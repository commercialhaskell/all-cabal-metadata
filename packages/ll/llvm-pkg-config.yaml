homepage: ''
changelog-type: ''
hash: d26172bb20205dbda70e5aa69c0185335b6fbfd5311c3d870c979a617f82bc53
test-bench-deps: {}
maintainer: llvm@henning-thielemann.de
synopsis: Generate Pkg-Config configuration file for LLVM
changelog: ''
basic-deps:
  explicit-exception: '>=0.1.7 && <0.2'
  Cabal: '>=1.14 && <4'
  base: '>=4.2 && <5'
  shell-utility: '>=0.0 && <0.2'
  process: '>=1.0 && <1.7'
  utility-ht: '>=0.0.14 && <0.1'
  transformers: '>=0.2.2 && <0.7'
all-versions:
- '0.0'
- 0.0.0.1
- 0.0.0.2
- 0.0.1
- 0.0.2
author: Henning Thielemann
latest: 0.0.2
description-type: haddock
description: |-
  Building the @llvm-base@ package is fragile due to its configuration process.
  It would be much simpler, if LLVM would support pkg-config
  since this is nicely integrated in Cabal.
  However, LLVM developers do not seem to care much about it:
  <http://llvm.org/bugs/show_bug.cgi?id=9405>.
  If we are lucky we get pkg-config support in Debian Linux.
  Until this comes true, you can use this program.
  It calls @llvm-config@ and writes its output to a PC file.

  > llvm-pkg-config

  calls default @llvm-config@ and writes the generated file to standard output.

  > sudo llvm-pkg-config --install

  installs the PC file at a default location.
  This should be the standard task to perform.

  > llvm-pkg-config --llvm-config=/custom/path/to/llvm-config

  if you have multiple versions of LLVM installed
  you may choose an @llvm-config@ other than the default one.

  You can check, whether your config file is found by @pkg-config@ using

  > pkg-config --modversion llvm

  It should show the version number of LLVM you want to use.

  If you install @llvm.pc@ in a non-standard location
  you may need to extend the search path for @pkg-config@

  > export PKG_CONFIG_PATH=your-llvm-pc-path:$PKG_CONFIG_PATH

  The package also includes the bash script @make-pkg-config.sh@
  that should also generate the @llvm.pc@ file.
license-name: BSD-3-Clause
