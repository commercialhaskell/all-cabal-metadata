all-versions:
- '0.1'
- '0.2'
- 0.2.0.1
- 0.2.0.2
- '0.3'
- 0.3.0.1
- 0.4.1
- 0.4.1.1
- 0.4.2
- '0.5'
- '0.6'
- 0.6.0.1
- 0.6.0.2
- '0.7'
- 0.7.0.1
- 0.7.1
- 0.7.2
- 0.7.3
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.1
- 0.8.2
- 0.8.3
- '0.9'
- 0.9.1
- '0.10'
- 0.10.1
- '0.11'
- '0.12'
- 0.12.0.1
- 0.12.1
- '0.13'
author: Henning Thielemann <haskell@henning-thielemann.de>
basic-deps:
  base: '>=3 && <5'
  base-orphans: '>=0.5 && <1'
  bool8: '>=0.0 && <0.1'
  containers: '>=0.1 && <0.8'
  enumset: '>=0.0.5 && <0.2'
  fixed-length: '>=0.2.1 && <0.3'
  llvm-extra: '>=0'
  llvm-tf: '>=12.1 && <21.1'
  non-empty: '>=0.2.1 && <0.4'
  prelude-compat: '>=0.0 && <0.0.1'
  storable-enum: '>=0.0 && <0.1'
  storable-record: '>=0.0.5 && <0.1'
  tagged: '>=0.7 && <0.9'
  tfp: '>=1.0 && <1.1'
  transformers: '>=0.1.1 && <0.7'
  utility-ht: '>=0.0.15 && <0.1'
changelog: |
  # Change log for the `llvm-extra` package

  ## 0.12.1

  * `Multi.Value` -> `Nice.Value`

    The `Multi.Value` name was misleading.
    `Multi.Value` retained for compatibility for now.

  ## 0.11

  * `Memory`: turn methods `load` and `store` into top-level functions
    based on `decompose` and `compose`.
    Deriving `decompose` and `compose` from `load` and `store`, respectively,
    requires `alloca` which will blast your stack when used in a loop.

  ## 0.10

  * `Storable`: We do not support storing tuple types directly anymore.
    This would require the `storable-tuple` package.
    That package ships orphan `Storable` instances
    with a memory layout that does not match your system's ABI.
    Instead, we support the `Tuple` wrapper from `storable-record`.

  * `Memory`: Attention!
    Memory layout is no longer compatible with `Foreign.Storable`.
    E.g. `Bool` now takes 1 byte space like LLVM does,
    but no longer 4 byte like `Foreign.Storable`.
    A `Foreign.Storable`-compliant layout
    is provided by `LLVM.Extra.Storable` now.

  * `Marshal`: Now based on `Memory.load` and `Memory.store`.
    Does not need `Proxy` anymore.

  * `Class` -> `Tuple`,
    `Tuple.Vector` class added.
    Pro: `valueOf vector` is no longer restricted to `IsPrimitive` elements.
    Cons: type inference works less well than before

  ## 0.9

  * `Extension`: Move to new package `llvm-extension`.
    We now implement advanced instructions using generic LLVM intrinsics.

  ## 0.8.1

  * `FastMath`: support for simplified arithmetic primitives
    under the assumption of the absence of corner cases.
changelog-type: markdown
description: |-
  The Low-Level Virtual-Machine is a compiler back-end with optimizer.
  You may also call it a high-level portable assembler.
  This package provides various utility functions
  for the Haskell interface to LLVM, for example:

  * arithmetic operations with more general types
  but better type inference than the @llvm@ interface
  in "LLVM.Extra.Arithmetic",

  * a type class for loading and storing sets of values with one command (macro)
  in "LLVM.Extra.Memory",

  * storing and reading Haskell values in an LLVM compatible format
  in "LLVM.Extra.Marshal",

  * LLVM functions for loading and storing values in Haskell's @Storable@ format
  in "LLVM.Extra.Storable",

  * support value tuples and instance declarations of LLVM classes
  in "LLVM.Extra.Tuple",

  * handling of termination by a custom monad on top of @CodeGenFunction@
  in "LLVM.Extra.MaybeContinuation"

  * various kinds of loops (while) and condition structures (if-then-else)
  in "LLVM.Extra.Control"

  * more functional loop construction using "LLVM.Extra.Iterator"

  * complex Haskell values mapped to LLVM values in "LLVM.Extra.Nice.Value"

  * advanced vector operations
  such as sum of all vector elements, cumulative sum,
  floor, non-negative fraction, absolute value
  in "LLVM.Extra.Vector"

  * type classes for handling scalar and vector operations
  in a uniform way
  in "LLVM.Extra.ScalarOrVector"
description-type: haddock
hash: faccfb029099d8ce1ab78a06a9e6ebd06893282b58217bcdf3c4b4538025aa33
homepage: https://wiki.haskell.org/LLVM
latest: '0.13'
license-name: BSD-3-Clause
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Utility functions for the llvm interface
test-bench-deps:
  QuickCheck: '>=2.11 && <3'
  base: '>=3 && <5'
  doctest-exitcode-stdio: '>=0.0 && <0.1'
  llvm-extra: '>=0'
  llvm-tf: '>=0'
  storable-record: '>=0'
  tfp: '>=0'
  transformers: '>=0'
  utility-ht: '>=0.0.1 && <0.1'
