homepage: https://wiki.haskell.org/LLVM
changelog-type: markdown
hash: caf5a2dfa2cabe8398d9de760fa9740f8667e632e1835ea9c79d471eecd8c58c
test-bench-deps:
  llvm-tf: -any
  base: -any
  private: -any
  utility-ht: -any
  tfp: -any
  QuickCheck: '>=2.11 && <3'
maintainer: Henning Thielemann <llvm@henning-thielemann.de>
synopsis: Bindings to the LLVM compiler toolkit using type families.
changelog: |
  # Change log for the `llvm-tf` package

  ## 9.2

  * custom `Ptr` type:
    We leave the original `Ptr` type for data in `Storable` compatible format,
    and use `LLVM.Ptr` for data in LLVM layout.

  * `instance Storable Vector`:
    Allows non-primitive elements and interleaves them.

  * `instance Marshal Vector`:
    Should now be really compatible with LLVM.
    Formerly, it was wrong on big-endian systems
    and vectors of Bool, WordN, IntN.
    The correct implementation required a new class for storing vectors.

  * `Ret` class: turned from multi-parameter type class
    to single parameter type class with type function `Result`.
    You may replace `Ret a r` by `Ret a, Result a ~ r` in your code,
    which may enable further simplifications.

  * `CallArgs f g r` -> `CallArgs r f g`,
    `CallerFunction f r` -> `CallerFunction r f`

  * `ArithFunction`, `ToArithFunction`:
    Replaced functional dependencies by type functions.

  * `ArithFunction`: split off `Return`

  ## 9.0

  * `Instructions.bitcastElements`:
    Use `Guided.bitcast Guided.vector` instead.

  * `Core.Guided`: new module for instructions on both scalars and vectors

  * fixed bug: `cmp` on `IntN` did an unsigned comparison

  * `Vector`: instance `QuickCheck.Arbitrary`

  ## 3.1.2

  * `Instructions`: setters for FastMath flags

  ## 3.1.0.1

  * `addFunctionMapping` checks for functions
    that are eliminated by optimization passes.
    This fixes a crash when working with optimizations and call-back functions.

  ## 3.1

  * `ExecutionEngine` is now managed by a `ForeignPtr` with a finalizer.
    That is, you must keep the `ExecutionEngine` alive
    as long as you call compiled functions.

    `FreePointers` and `getFreePointers` are gone.

  ## 3.0.3

  * `constVector`, `constArray`, `vector` do no longer cycle the vector
    Instead they check for the appropriate static length.

  * `FFI.constVector`, `FFI.constArray` must be in IO
    in order to proper sequence actions in `Core.Util.constVector`, `Core.Util.constArray`.
    Currently, in `Util.constVector` it is possible that `FFI.constArray`
    is called too late and thus operates on a released pointer.
basic-deps:
  llvm-ffi: -any
  base: -any
  private: -any
  utility-ht: -any
  tfp: -any
all-versions:
- 3.0.0.0
- 3.0.0.0.1
- 3.0.0.0.2
- 3.0.0.1
- 3.0.0.2
- 3.0.1
- 3.0.2
- 3.0.3.1
- 3.0.3.1.1
- 3.0.3.1.2
- 3.0.3.1.3
- 3.0.3.1.4
- 3.0.3.1.5
- 3.0.3.1.6
- 3.0.3.1.7
- 3.0.3.1.8
- 3.0.3.1.9
- 3.0.3.2
- 3.0.3.3
- '3.1'
- 3.1.0.1
- 3.1.0.2
- 3.1.1
- 3.1.1.1
- 3.1.2
- '3.9'
- '9.0'
- '9.1'
- 9.1.1
- '9.2'
- 9.2.0.1
author: Henning Thielemann, Bryan O'Sullivan, Lennart Augustsson
latest: 9.2.0.1
description-type: haddock
description: |-
  High-level bindings to the LLVM compiler toolkit using type families.

  A note on versioning:
  The versions of this package are loosely based on the LLVM version.
  However, we depend on a relatively stable part of LLVM
  and provide a relatively stable API for it.
  We conform to the Package Versioning Policy PVP,
  i.e. we increase the version of this package when its API changes,
  but not necessarily when we add support for a new LLVM version.
  We support all those LLVM versions
  that are supported by our @llvm-ffi@ dependency.

  This package is a descendant of the @llvm@ package
  which used functional dependencies.
  The original @llvm@ package will no longer work
  with current versions of LLVM nor GHC.
license-name: BSD-3-Clause
