homepage: http://haskell.org/haskellwiki/LLVM
changelog-type: ''
hash: d0705af972c7bfd21e28dc031e724992c8d60b0d9e1e4e13d31b7cc85128893f
test-bench-deps: {}
maintainer: Henning Thielemann <llvm@henning-thielemann.de>
synopsis: FFI bindings to the LLVM compiler toolkit.
changelog: ''
basic-deps:
  base: '>=3 && <5'
  enumset: '>=0.0.5 && <0.2'
all-versions:
- 3.0.0
- 3.0.0.1
- 3.0.0.2
- 3.1.0
- 3.2.0
- 3.2.1
- 3.3.0
- 3.4.0
- 3.5.0
- 3.5.1
- 3.6.0
- 3.7.0
- 3.8.0
- 3.8.1
- 3.8.1.1
- 3.8.1.2
- 3.9.0
- 3.9.1
- 9.0.0
- 9.1.0
- 9.1.0.1
- 9.1.1
- '10.0'
- '11.0'
- '12.0'
- '13.0'
- '14.0'
- '15.0'
author: Henning Thielemann, Bryan O'Sullivan, Lennart Augustsson
latest: '15.0'
description-type: haddock
description: |-
  FFI bindings to the LLVM compiler toolkit.

  Installation cannot be done fully automatically.
  It would require Cabal code that is bound to certain Cabal versions
  and is prone to fail.
  We give several non-automatic ways
  that also allow you to choose a particular LLVM version.

  First possibility is to point Cabal
  to the LLVM installation directories manually.
  It is recommended to add options to your global @.cabal/config@:

  > extra-include-dirs: /usr/lib/llvm-15/include
  > extra-lib-dirs: /usr/lib/llvm-15/lib

  This works for both @v1-build@ and @v2-build@.
  The shown paths work for Debian and Ubuntu
  using the LLVM repositories at <https://apt.llvm.org/>.
  You can obtain them with

  > llvm-config-15 --includedir --libdir

  You can choose specific LLVM versions per project.
  For @v1-builds@ it works like so:

  > cabal install -fllvm900 --extra-include-dirs=$(llvm-config-9 --includedir) --extra-lib-dirs=$(llvm-config-9 --libdir) yourpackage

  For Nix-style build you must add some options
  to the @cabal.project.local@ file of your LLVM-related project:

  > package llvm-ffi
  >   flags: +llvm900
  >   extra-include-dirs: /usr/lib/llvm-9/include
  >   extra-lib-dirs: /usr/lib/llvm-9/lib

  The second way uses @pkg-config@.
  You can store above paths permanently in a @pkg-config@ file like @llvm.pc@.
  The optimal way would be if LLVM installations or GNU/Linux distributions
  would contain such a file, but they don't.
  Instead, you may generate it using the @llvm-pkg-config@ package
  or write one manually.
  Then you run

  > cabal install -fpkgConfig

  We try to stay up to date with LLVM releases.
  The current version of this package is compatible with LLVM 3.9-15.
  Please understand that the package may or may not work
  against older LLVM releases.

  Warning for inplace builds:
  Re-configuring the package using, say @-fllvm600@,
  and re-buildung it might result in corrupt code.
  You must make sure that the stuff in @cbits@ is re-compiled.
  Cabal or GHC may forget about that.
  You are safe if you run @cabal clean@.

  Caution: Ugly crashes can occur
  if you have configured paths for LLVM version X in @.cabal/config@
  and try to build @llvm-ffi@ for a different LLVM version Y.
  Counterintuitively, global search paths have higher precedence
  than local ones: <https://github.com/haskell/cabal/issues/7782>.
  But that does not simply mean
  that the local configuration is ignored completely.
  Instead the local library file is found,
  because its name libLLVM-Y.so is unique,
  whereas the include file names clash,
  thus the ones from the global include directory are used.
license-name: BSD-3-Clause
