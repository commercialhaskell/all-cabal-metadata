all-versions:
- 12.1.0
- 12.1.1
author: Anthony Cowley, Stephen Diehl, Moritz Kiefer <moritz.kiefer@purelyfunctional.org>,
  Benjamin S. Scarlet
basic-deps:
  array: '>=0.4.0.0 && <0.6'
  attoparsec: '>=0.13 && <0.15'
  base: '>=4.9 && <5'
  bytestring: '>=0.10 && <0.12'
  containers: '>=0.4.2.1 && <0.7'
  exceptions: '>=0.8 && <0.11'
  fail: <4.10
  mtl: '>=2.1.3 && <2.3'
  template-haskell: '>=2.5.0.0 && <2.20'
  transformers: '>=0.3 && <0.6'
  unordered-containers: '>=0.2 && <0.3'
  utf8-string: '>=0.3.7 && <1.1'
changelog: |
  ## 12.1.1 (2023.06.26)

  + Fix maintainer field

  ## 12.1.0 (2023.06.26)

  + Merge llvm-hs and llvm-hs-pure.
  + Fix the build
  + Add upper bounds to everything

  # llvm-hs changelog

  ## 12.0.0 (2021-03-19)

  * Update to LLVM 12.0
  * Remove OrcJIT V1 bindings and replace them with OrcJIT V2.

  ## 9.0.1 (2019-09-28)

  * Fix build with Clang on MacOS.
  * Expose `LLVMOffsetOfElement` as `getOffsetOfElement`.

  ## 9.0.0 (2019-09-06)

  * Support GHC 8.8
  * Update to LLVM 9.0
    * Note that this is the last LLVM release that supports the current
      OrcJIT APIs and `llvm-hs` does not yet have bindings for OrcJIT
      V2. If you are interested in working on that please get in
      touch. See https://github.com/llvm-hs/llvm-hs/issues/276 for more
      details.
    * The `sanitizeAddresses` field from `MachineCodeOptions` has been
      removed following a change in LLVM.
    * The `MemorySanitizer` now has two new options `kernel` and
      `recover` matching the options in LLVM.


  ## 8.1.0

  * Change `withHostTargetMachine` to accept the code model, relocation model,
    and optimization level as arguments. The old behaviour is available
    under the name `withHostTargetMachineDefault`.

  ## 8.0.0 (2019-03-10)

  * Upgrade to LLVM 8
  * It is now possible to define multiple variables with an empty name
    without causing a name collision. Variables with an empty name
    cannot be referenced. This fixes an issue caused by using
    IRBuilder’s `extern` helper.

  ## 7.0.1 (2018-09-29)

  * Support llvm-config executables named `llvm-config-7` in addition to
    `llvm-config-7.0` and `llvm-config`.

  ## 7.0.0 (2018-09-28)

  * Throw an `EncodeException` if a local variable is defined multiple
    times. This is consistent with `llc` which also forbids reusing
    variable names.
  * Update for LLVM 7.0:
    * The ORC JIT API has been changed to reflect the changes in LLVM
      itself. The test suite should give you a good idea of how to adapt
      your code but here is a summary:
      * There is now a separate `ExecutionSession` that tracks module handles.
      * `SymbolResolver` only has a single resolver function.
      * Creating an `ObjectLinkingLayer` requires a way to get the
        symbol resolver for a module.
      * Creating a `CompileOnDemandLayer` requires a way to set and get
        the symbol resolver for a module.

  ## 6.3.0 (2018-06-12)

  * `findSymbol` and `findSymbolIn` now return `Either JITSymbolError
    JITSymbol` if the JIT symbol has the error flag set or the address
    is 0. (This is consistent with how LLVM treats JIT symbols).
  * The return type of `SymbolResolverFn` has been changed to `Either
    JITSymbolError JITSymbol`. It is fine to return a 0 address in
    `Right` so existing resolvers can be adapted by wrapping the result
    in `Right`.
  * Fixed a bug where instructions were constant-folded during
    encoding. This caused problems since the API available on a Constant
    is not the same as the one on an Instruction (e.g., we cannot set
    metadata on a Constant).
  * Fix use-after-free in `createObjectFile`.
  * Add `withObjectFile` wrapper for `createObjectFile` and
    `disposeObjectFile`.
  * Add API for looking up symbols in the `LinkingLayer`.
  * Add `LLVM.OrcJIT.CompileLayer` and `LLVM.OrcJIT.LinkingLayer`
    modules that reexport the internal modules. The
    `findSymbol/findSymbolIn` methods that have previously been exported
    from `LLVM.OrcJIT` can now be found in `LLVM.OrcJIT.CompileLayer`.

  ## 6.2.0 (2018-05-08)

  * Remove field prefixes from `DIDerivedType`, `DIBasicType` and
    `DISubroutineType` to make the API consistent with the other debug
    metadata types.
  * Change the type of the scope fields in `DIModule` and `DINamespace`
    to `Maybe (MDRef DIScope)` to reflect that they can be optional.

  ## 6.1.1 (2018-05-06)

  * Fix the source distribution by adding missing files to extra-source-files.

  ## 6.1.0 (2018-05-05)

  * Remove the `MetadataNodeReference` constructor. References to
    metadata nodes are now encoded using the polymorphic `MDRef` type.
  * Add support for encoding and decoding debug metadata. Thanks to
    @xldenis who started that effort!
  * Drop support for GHC 7.10.
  * Support decoding/encoding of metadata in `GlobalVariable` and `Function`.
  * Fix check that the type of `GlobalReference` is correct in the
    presence of automatic renamings due to name collisions.
  * Extract LinkingLayer into a separate module.

  ## 6.0.0 (2018-03-06)

  * Support for LLVM 6.0, take a look at the changelog of llvm-hs-pure for details.
  * Add `AggregateZero` for zero-initializing structs, arrays and vectors. Previously `Null`
    was used for null pointers as  well as zero-inializing aggregates. The new behavior reflects
    LLVM’s internal representation and the C++-API.
  * Enforce that `Null` is only used on pointer types. Existing uses of `Null` on arrays, structs and
    vector must be changed to the newly introduced `AggregateZero`.

  ## 5.1.3 (2018-01-06)

  * Add bindings to `loadLibraryPermamently` and `getSymbolAddressInProcess`.

  ## 5.1.2 (2017-12-19)

  * Reupload of 5.1.1 since [Hackage broke](https://github.com/haskell/hackage-server/issues/643) during the original upload.

  ## 5.1.1 (2017-12-16)

  * Fix argument order in `LLVM_Hs_CreateTargetMachine`. This affects `withTargetMachine` and `withHostTargetMachine`.
  * Add support for `MCTargetOptions`.

  ## 5.1.0 (2017-10-12)

  ### Bugfixes

  * Set target options in `withTargetMachine`. Previously the options
    passed there were simply ignored.
  * Fix decoding of constant vectors.
  * Fix decoding of function attributes in calls.

  ### Enhancements

  * Support for more target options.
  * Suport string attributes as parameter attributes.
  * Support more calling conventions.
  * Support `NoTail` `TailCallKind`.

  ## 5.0.0 (2017-09-07)

  * Support for LLVM 5.0

      We only give a summary of the changes affecting the public API of `llvm-hs` here.
      Please refer to the official
      [release notes for LLVM 5.0](http://releases.llvm.org/5.0.0/docs/ReleaseNotes.html)
      for an overview of all changes in LLVM 5.0.

      * The `X86_64_Win64` calling convention is now called `Win64`.
      * There is a new `Speculatable` function attribute.
      * The `CrossThread` synchronization scope has been removed. There is
        now a new `System` synchronization scope.
      * The `OrcJIT`-API now operates on individual modules instead of
        sets of modules.
      * The `lessPreciseFloatingPointMultiplyAddOption` field has been
        removed from the target options.
      * The `compressDebugSections` option field is now of type
        `DebugCompressionType` instead of `Bool`.
      * The `BasicBlockVectorize` pass has been removed. You should use
        `SuperwordLevelParallelismVectorize` instead.

  * Throw 'EncodeException' when the type supplied in a
    'GlobalReference' does not match the type of the expression.
  * Throw 'EncodeException' when the result of instructions returning
    void is named using ':='.

  ## 4.2.0 (2017-06-20)

  * Revamp OrcJIT API
    * The user facing API is now exposed using `LLVM.OrcJIT`.
    * All user facing functions have been documented.
    * In addition the bracket-style API, there are now `new*` and
      `dispose*` functions making it easier to ingegrate OrcJIT in
      custom monad transformer stacks.
    * There is a new `CompileLayer` typeclass which abstracts over the
      various compile layers in `OrcJIT`.
  * Support QuickCheck 2.10

  ## 4.1.0 (2017-05-17)

  * Switch most of the API from `String` to `ByteString`.
  * Switch from ExceptT to using exceptions.
    See `LLVM.Exception` for an overview of the exceptions potentially thrown.

  ## 4.0.1

  * Fix linking of system libraries

  ## 4.0.0 (initial release, changes in comparison to llvm-general)

  * Move modules from `LLVM.General*` to `LLVM.*`
  * Support for LLVM 4.0
  * Improved support for LLVM’s exception handling instructions
  * `-fshared-llvm` is now supported on windows (thanks to @RyanGLScott)
  * Default to `-fshared-llvm`
  * Expose `LLVM.Internal.*` modules.

  # llvm-hs-pure changelog

  ## 12.0.0 (2021-03-19)

  * Update to LLVM 12.0
  * Eliminate hard-coded assumption of 32-bit `size_t`
  * Add a runtime variant of the `LLVM.AST.Constant.sizeof` utility in `LLVM.IRBuilder.Instruction.sizeof`. The size of opaque structure types is unknown until link-time and therefore cannot be computed as a constant.
  * Handle type resolution through `NamedTypeReference` correctly: type resolution in LLVM depends on module state by design
  * Support the LLVM `NoFree` attribute
  * Add support for some more DWARF operators: `DW_OP_bregx` and `DW_OP_push_object_address`

  ## 9.1.0 (UNRELEASED)

  * IRBuilder: first emitted terminator (`br`, `condBr`, `ret`, ...) is only
    generated in final IR. This allows for greater composition of IR (and matches
    with LLVM semantics, since later instructions are unreachable).

  ## 9.0.0 (2019-09-06)

  * The functions in `LLVM.IRBuilder.Constant` no longer return a
    monadic context. To recover the previous behavior use `pure`. (Thanks to @jfaure)
  * `LLVM.IRBuilder.Instruction.globalStringPtr` returns a `Constant`
    instead of an `Operand`. (Thanks to @jfaure)
  * Fresh name generation in the IRBuilder should be significantly faster (Thanks to @luc-tielen)
  * Update to LLVM 9.0
    * The `MainSubprogram` constructor from `DIFlag` has been removed
      and a few new flags have been added.

  ## 8.0.0 (2019-03-10)

  * Upgrade to LLVM 8
  * Change type of `value` field in `DITemplateValueParameter` to
    `Maybe Metadata` to reflect that it can be null.

  ## 7.0.0 (2018-09-28)

  * Track type definitions in `MonadModuleBuilder`. This allows us to
    automatically resolve `NamedTypeReference`s in `gep` instructions.
    Note that type definitions must be defined before they are used
    (i.e. `MonadFix` will not behave correctly here).
  * Change the type of `gep` in the `IRBuilder` API to require a
    `MonadModuleBuilder` constraint.
  * Change the type of `typedef` in the `IRBuilder` API to return a
    `NamedTypeReference` to the newly defined type.
  * Update for LLVM 7.0:
    * Add `isUnsigned` field to `DIEnumerator`.
    * Change `DISubrange` to use the new `DICount` type instead of an `Int64`.
    * Merge `checksum` and `checksumKind` fields of `DIFile` into a
      `checksum` field of type `Maybe ChecksumInfo`.
    * Rename the `variables` field of `DISubprogram` to `retainedNodes`.

  ## 6.2.1 (2018-06-12)

  * Fix type of `shuffleVector` in the IRBuilder API.

  ## 6.2.0 (2018-05-08)

  * Remove field prefixes from `DIDerivedType`, `DIBasicType` and
    `DISubroutineType` to make the API consistent with the other debug
    metadata types.
  * Change the type of the scope fields in `DIModule` and `DINamespace`
    to `Maybe (MDRef DIScope)` to reflect that they can be optional.

  ## 6.1.0 (2018-05-05)

  * IRBuilder: Ensure that automatically generated block labels are
    assigned smaller identifiers than the instructions following
    them. This is only important when you use
    `llvm-hs-pretty`. `llvm-hs` does not care about the order of
    identifiers assigned to unnamed values.
  * IRBuilder: add `currentBlock` which returns name of the currently
    active block.
  * Remove the `MetadataNodeReference` constructor. References to
    metadata nodes are now encoded using the polymorphic `MDRef` type.
  * Add debug metadata to the AST in `LLVM.AST.Operand`. Thanks to
    @xldenis who started that effort!
  * Drop support for GHC 7.10.
  * Add `metadata` field to `GlobalVariable` and `Function`.

  ## 6.0.0 (2018-03-06)

  * Support for LLVM 6.0
    * Add `StrictFP` and `SanitizeHWAddress` function attributes.
    * Remove `UnsafeAlgebra` constructor from `FastMathFlags`.
    * Add `allowReassoc`, `allowContract` and `approxFunc` fields to `FastMathFlags`.
    * Remove `NoFastMathFlags` constructor since it is equivalent to
      setting all fields in the `FastMathFlags` record to
      `False`. Existing uses of `NoFastMathFlags` can be replaced by the
      `noFastMathFlags` value.
  * Add `AggregateZero` for zero-initializing structs, arrays and vectors. Previously `Null`
    was used for null pointers as  well as zero-inializing aggregates. The new behavior reflects
    LLVM’s internal representation and the C++-API. Existing uses of `Null` on non-pointer types
    must be changed to `AggregateZero`.
  * Fix recursive function calls in the `IRBuilder` API.

  ## 5.1.2 (2018-01-06)

  * Fixes and enhancements to the IRBuilder
    * `sdiv` and `udiv` no longer default to exact.
    * Fix type of global references.
    * Add more instructions.


  ## 5.1.1 (2017-12-16)

  * Add a completely new API for building modules in a monadic style similar to the IRBuilder provided by LLVM’s C++ API. The modules can be found in `LLVM.IRBuilder`. An example can be found in the readme and in the test suite.
  * Add an API for getting the type of LLVM values in
    `LLVM.AST.Typed`. This is primarily intended to be used in other
    libraries that build upon `llvm-hs-pure` such as `llvm-hs-pretty`.

  ## 5.1.0 (2017-10-12)

  ### Enhancements

  * Suport string attributes as parameter attributes
  * Support more calling conventions
  * Support `NoTail` `TailCallKind`

  ## 5.0.0 (2017-09-07)

  * Support for LLVM 5.0

      We only give a summary of the changes affecting the public API of `llvm-hs-pure` here.
      Please refer to the official
      [release notes for LLVM 5.0](http://releases.llvm.org/5.0.0/docs/ReleaseNotes.html)
      for an overview of all changes in LLVM 5.0.

      * The `X86_64_Win64` calling convention is now called `Win64`.
      * There is a new `Speculatable` function attribute.
      * The `CrossThread` synchronization scope has been removed. There is
        now a new `System` synchronization scope.

  ## 4.1.0 (2017-05-17)

  * Switch AST to `ByteString`/`ShortByteString` reflecting LLVM’s use
    of C-style strings.
  * `preferredAlignment` is now a `Word32` instead of `Maybe Word32`. To
    recover the old behavior set it to the same value as abiAlignment.
  * `GlobalAlias` now expects the element type of a pointer type instead
    of the pointer type itself. The address space is passed separately
    via the `addrSpace` field. This makes `GlobalAlias` consistent with
    `GlobalVariable`.
  * The `FloatingPointType` constructor now takes a `FloatingPointType` argument
    instead of a width and a `FloatingPointFormat` to more closely match the
    LLVM IR language reference.
  * The `IsString` instance of `Name` now throws an error on non-ASCII
    strings instead of silently discarding the upper bytes. There is
    also a new `mkName` function with the same behavior for easier
    discoverability. Non-ASCII names need to be encoded using an arbitrary encoding to
    to a `ShortByteString` which can then be used as a `Name`.

  ## 4.0.0 (initial release, changes in comparison to llvm-general)

  * Move modules from `LLVM.General*` to `LLVM.*`
  * Support for LLVM 4.0
  * Improved support for LLVM’s exception handling instructions
  * `-fshared-llvm` is now supported on windows (thanks to @RyanGLScott)
  * Default to `-fshared-llvm`
  * Expose `LLVM.Internal.*` modules.
changelog-type: markdown
description: |
  # llvm-party - Haskell bindings for LLVM

  [![Build Status](https://travis-ci.org/llvm-hs/llvm-hs.svg?branch=llvm-6)](https://travis-ci.org/llvm-hs/llvm-hs) [![Hackage](https://img.shields.io/hackage/v/llvm-hs.svg)](https://hackage.haskell.org/package/llvm-hs)

  This project aims to provide a relatively complete set of bindings for
  the LLVM API. If you find that anything is missing please open an
  issue! We generally try to stay close to the LLVM C++-API so you can
  consult the LLVM documentation and reuse existing resources.

  This is yet [another](https://hackage.haskell.org/package/llvm-tf) [fork](https://hackage.haskell.org/package/llvm) [of](https://hackage.haskell.org/package/llvm-hs) [llvm](https://hackage.haskell.org/package/llvm-general).
  Specifically [llvm-hs](https://hackage.haskell.org/package/llvm-hs)/[llvm-hs-pure](https://hackage.haskell.org/package/llvm-hs-pure)
  was forked, and smashed together into a single package.

  ## Getting started

  If you’ve worked with LLVM before, take a look at the examples in the
  [llvm-hs-examples repo](https://github.com/llvm-hs/llvm-hs-examples).
  If not, you can find a translation of the [official LLVM
  tutorial](http://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm)
  at https://github.com/llvm-hs/llvm-hs-kaleidoscope. There is also a
  [blog series](https://blog.josephmorag.com/tags/llvm/) on writing a C
  compiler with the library. In general, we try to stay very close to
  the API and AST provided by LLVM itself, so the [LLVM language
  reference](http://llvm.org/docs/LangRef.html) is also very useful.

  ## LLVM API Interface

  `llvm-hs` provides an LLVM binding at (roughly) the same level of abstraction
  as the official LLVM C API. Because of this, anything you might do with the
  LLVM C API, you should expect to be able to do with `llvm-hs`. In addition,
  some things which are not handled in the LLVM C API are supported. For example,
  the LLVM C API [does not provide any
  support](https://llvm.org/doxygen/group__LLVMCSupportTypes.html) for working
  with `AttributeSet` and `AttributeList` types, but `llvm-hs` does.

  However, the binding to LLVM is only half the story: a lot of advanced
  pure-Haskell functionality is built on top of this basic interface in the
  `llvm-hs-pure` module, most notably the monadic
  [IRBuilder](https://hackage.haskell.org/package/llvm-hs-pure) and
  [ModuleBuilder](https://hackage.haskell.org/package/llvm-hs-pure) interfaces
  which greatly simplify the task of generating LLVM code from a higher level
  abstract syntax. The
  [llvm-hs-examples](https://github.com/llvm-hs/llvm-hs-examples/blob/master/irbuilder/Main.hs)
  project contains example usage. These high level interfaces are ideal for
  implementing the LLVM backend for your code generation project. A good example
  is Google's [Dex](https://github.com/google-research/dex-lang) research
  language.

  ## LLVM API Coverage and Philosophy

  The `llvm-hs` FFI layer in `LLVM/Internal/FFI` extends the upstream LLVM C API
  *adding missing functionality* which upstream has not yet exposed from the C++
  API. We also provide some *improved implementations* of buggy or otherwise
  problematic functions in the LLVM C API. As the LLVM C API becomes more
  complete, we retire our extensions and directly wrap the newly added C API
  functions, ensuring our FFI layer is as small as possible.

  If you find you need to use some LLVM functionality which is available via the
  C++ API but not via the C API or in  `llvm-hs`, please open an issue and
  include links to the relevant entities in the LLVM doxygen-generated
  documentation.

  In general, if it is possible to implement something in Haskell using the LLVM
  C API primitives, that is preferable to implementing things in the FFI layer
  and merely exposing them to Haskell as wrapped C or C++ functions.

  ## Contributing

  We love all kinds of contributions so please feel free to open issues for
  missing LLVM features, report & fix bugs or report API inconveniences.

  ## Versioning

  Trying to represent the version of LLVM in the version number but also
  allowing for version bumps in the bindings themselves while respecting
  the [PVP](http://pvp.haskell.org/) can be tricky. Luckily LLVM switched to a
  [new versioning scheme](http://blog.llvm.org/2016/12/llvms-new-versioning-scheme.html)
  of `major.0.patch` starting from version `4.0`. This means that we can
  use the last two components for these bindings while the first
  component indicates the version of LLVM. A special case are the
  versions `3.major.minor` that represent bindings to LLVM 3.9. Bindings
  to earlier versions are not provided.

  ## How is this related to llvm-general?

  This project is a fork of the venerable `llvm-general` that aims to improve the
  public release story, and better provide the interfaces needed for any Haskell
  project looking to leverage LLVM. Contributions are encouraged.
description-type: markdown
hash: ca2c88a7984b9703f1519156e2f2cb36c4fd7dfc06139c3d807e24a6e1e993c0
homepage: http://github.com/jappeace/llvm-party/
latest: 12.1.1
license-name: BSD-3-Clause
maintainer: Jappie Klooster <hi@jappie.me>
synopsis: General purpose LLVM bindings
test-bench-deps:
  QuickCheck: '>=2.5.1.1'
  base: '>=4.9 && <5'
  bytestring: '>=0.10'
  containers: '>=0.4.2.1'
  llvm-party: '>=0'
  mtl: '>=2.1'
  pretty-show: '>=1.6'
  process: '>=0'
  tasty: '>=0.11'
  tasty-hunit: '>=0.9'
  tasty-quickcheck: '>=0.8'
  temporary: '>=1.2'
  transformers: '>=0.3.0.0'
