all-versions:
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3.0
- 0.1.3.1
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.5.0.0
- 0.5.1.0
author: Trevor Elliott <trevor@galois.com>
basic-deps:
  array: '>=0.3'
  base: '>=4.8 && <5'
  bytestring: '>=0.10'
  containers: '>=0.4'
  deepseq: '>=0'
  directory: '>=0'
  fgl: '>=5.5'
  fgl-visualize: '>=0.1'
  filepath: '>=0'
  foldl: '>=0'
  llvm-pretty: '>=0.13.0.0 && <0.14'
  llvm-pretty-bc-parser: '>=0'
  mtl: '>=2.2.2'
  pretty: '>=1.0.1'
  pretty-show: '>=1.6'
  process: '>=0'
  random: '>=0'
  temporary: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  turtle: '>=1.6'
  uniplate: '>=1.6'
  utf8-string: '>=1.0'
  xml: '>=0'
changelog: |
  # Revision history for llvm-pretty-bc-parser

  ## 0.5.1.0 (October 2025)

  * Support parsing data layout strings that specify function pointer alignment.
  * Implement `CST_CODE_STRING`, allowing the parsing of bitcode files containing strings without null terminators (as may be generated by languages other than C).

  ## 0.5.0.0 (March 2025)

  * `Data.LLVM.BitCode` now defines funtions (whose names all end with
    `*WithWarnings`) that return any parser-related warnings (`ParseWarning`s)
    alongside the parsed `Module`. Users can decide whether or not to display
    these warnings (e.g., by printing them to `stderr` using `ppParseWarnings`).

    The existing functions which do not return warnings have been deprecated in
    favor of the their `*WithWarnings` variants.
  * The functions in `Data.LLVM.BitCode` no longer produce a fatal error when
    encountering metadata records of unexpected sizes. Instead, these are now
    treated as warnings.

  ## 0.4.2.0 (August 2024)

  * Add support for GHC 9.8 and drop official support of 9.2.

  * Add support for new atomic operations in LLVM 9+.

  ## 0.4.1.0 (January 2024)

  * Add preliminary support for LLVM versions up through 16.
  * Require building with `llvm-pretty-0.12.*`.
  * Add preliminary support for parsing opaque pointers. For now,
    `llvm-pretty-bc-parser` will still fill in the types of certain instructions
    with non-opaque pointer types (e.g., the type of memory to store in a `store`
    instruction), so be wary of this if you are parsing a bitcode file that
    contains opaque pointers. See also the discussion in
    https://github.com/GaloisInc/llvm-pretty-bc-parser/issues/262.
  * Improve the runtime performance of the parser.
  * A variety of bugfixes. Some notable fixes include:
    * Fix a bug in which the parser would fail to parse `DIDerivedType` nodes
      produced by Apple Clang on macOS.
    * Fix a bug in which the DWARF address space field of a `DIDerivedType` node
      was parsed incorrectly.
    * Fix a bug in which constant `fcmp`/`icmp` expressions would parse their
      operands incorrectly.
changelog-type: markdown
description: |
  # llvm-pretty-bc-parser

  A parser for the LLVM bitcode file format, yielding a `Module` from
  [the llvm-pretty package](http://hackage.haskell.org/package/llvm-pretty).

  ## Compatibility

  The following table shows what kinds of tests have been/are being run with which
  compilers.

   - A check in the the randomized tests column indicates that such tests are
     regularly run [in Github Actions][fuzz-workflow].
   - A check in the manual tests column indicates that the parser seems to work on
     some code that was generated by this compiler.

  | Compiler  | Version | [Randomized tests](./fuzzing) | Manual tests | Notes                |
  |-----------|---------|-------------------------------|--------------|----------------------|
  | `clang`   | v3.4    | ✓                             |              |                      |
  |           | v3.5    | ✓                             |              |                      |
  |           | v3.6    | ✓                             |              |                      |
  |           | v3.7    | ✓                             |              |                      |
  |           | v3.8    | ✓                             | ✓            |                      |
  |           | v3.9    | ✓                             |              |                      |
  |           | v4.0    | ✓                             |              |                      |
  |           | v5.0    | ✓                             |              |                      |
  |           | v6.0    | ✓                             | ✓            |                      |
  |           | v7.0    | ✓                             |              |                      |
  |           | v8.0    | ✓                             |              |                      |
  |           | v9.0    | ✓                             |              |                      |
  |           | v10.0   | ✓                             |              |                      |
  |           | v11.0   | ✓                             |              |                      |
  |           | v12.0   | ✓                             |              |                      |
  |           | v13.0   | ✓                             |              | See [issues][llvm13] |
  |           | v14.0   | ✓                             |              | See [issues][llvm14] |
  |           | v15.0   | ✓                             |              | See [issues][llvm15] |
  |           | v16.0   | ✓                             |              | See [issues][llvm16] |
  | `clang++` | v3.4    |                               |              |                      |
  |           | v3.5    |                               |              |                      |
  |           | v3.6    |                               |              |                      |
  |           | v3.7    |                               |              |                      |
  |           | v3.8    |                               |              |                      |
  |           | v3.9    |                               |              |                      |
  |           | v4.0    |                               |              |                      |
  |           | v5.0    |                               |              |                      |
  |           | v6.0    |                               |              |                      |
  |           | v7.0    |                               | ✓            |                      |
  |           | v8.0    |                               |              |                      |

  If you encounter problems with the output of *any* compiler, please file [an
  issue](https://github.com/GaloisInc/llvm-pretty-bc-parser/issues).

  ## Documentation

  Developers' documentation: [doc/developing.md](./doc/developing.md)

  ## GHC Support

  llvm-pretty-bc-parser endeavors to support three versions of GHC at a time. See
  the developers' documentation for more details and a rationale:
  [doc/developing.md](./doc/developing.md). Currently supported:

  - GHC 9.6.6
  - GHC 9.8.4
  - GHC 9.10.1

  [fuzz-workflow]: https://github.com/GaloisInc/llvm-pretty-bc-parser/blob/master/.github/workflows/llvm-quick-fuzz.yml
  [llvm13]: https://github.com/GaloisInc/llvm-pretty-bc-parser/issues?q=is%3Aopen+is%3Aissue+label%3Allvm%2F13.0
  [llvm14]: https://github.com/GaloisInc/llvm-pretty-bc-parser/issues?q=is%3Aopen+is%3Aissue+label%3Allvm%2F14.0
  [llvm15]: https://github.com/GaloisInc/llvm-pretty-bc-parser/issues?q=is%3Aopen+is%3Aissue+label%3Allvm%2F15.0
  [llvm16]: https://github.com/GaloisInc/llvm-pretty-bc-parser/issues?q=is%3Aopen+is%3Aissue+label%3Allvm%2F16.0
description-type: markdown
hash: 07efb5baf054bc9627fc5f4f166dc34060e8f34ef6916df294b93f91d0e7c0b4
homepage: ''
latest: 0.5.1.0
license-name: BSD-3-Clause
maintainer: |-
  Ryan Scott <rscott@galois.com>
  , Kevin Quick <kquick@galois.com>
  , Langston Barrett <langston@galois.com>
synopsis: LLVM bitcode parsing library
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0.4'
  directory: '>=0'
  exceptions: '>=0.10 && <0.11'
  filepath: '>=0'
  generic-random: '>=0'
  lens: '>=0'
  llvm-pretty: '>=0'
  llvm-pretty-bc-parser: '>=0'
  optparse-applicative: '>=0.18.1.0'
  pretty-show: '>=1.6'
  prettyprinter: '>=1.7 && <1.8'
  process: '>=0'
  string-interpolate: '>=0.3 && <0.4'
  syb: '>=0.7'
  tasty: '>=1.3'
  tasty-expected-failure: '>=0.12 && <0.13'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  tasty-sugar: '>=2.2 && <2.3'
  terminal-size: '>=0.3 && <0.4'
  text: '>=0'
  transformers: '>=0.5 && <0.7'
  versions: <7
