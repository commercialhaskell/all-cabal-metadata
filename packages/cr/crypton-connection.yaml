all-versions:
- 0.3.1
- 0.3.2
- 0.4.0
author: Vincent Hanquez <vincent@snarc.org>
basic-deps:
  base: '>=3 && <5'
  basement: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  crypton-x509: '>=1.5'
  crypton-x509-store: '>=1.5'
  crypton-x509-system: '>=1.5'
  crypton-x509-validation: '>=1.5'
  data-default-class: '>=0'
  network: '>=2.6.3'
  socks: '>=0.6'
  tls: '>=1.7'
changelog: |+
  ## Version 0.4.0

  * Add support for overriding the TLS clientSupported member in TLSSettingsSimple
    [#3](https://github.com/kazu-yamamoto/crypton-connection/pull/3)

  ## Version 0.3.2

  * Supporting tls v2.0.0.

  ## Version 0.3.1

  * The first release to support crypton.

changelog-type: markdown
description: |
  haskell Connection library
  ==========================

  Simple network library for all your connection need.

  Features:

  - Really simple to use
  - SSL/TLS
  - SOCKS

  Usage
  -----

  Connect to www.example.com on port 4567 (without socks or tls), then send a
  byte, receive a single byte, print it, and close the connection:
  ```haskell
  import qualified Data.ByteString as B
  import Network.Connection
  import Data.Default

  main = do
      ctx <- initConnectionContext
      con <- connectTo ctx $ ConnectionParams
                                { connectionHostname  = "www.example.com"
                                , connectionPort      = 4567
                                , connectionUseSecure = Nothing
                                , connectionUseSocks  = Nothing
                                }
      connectionPut con (B.singleton 0xa)
      r <- connectionGet con 1
      putStrLn $ show r
      connectionClose con
  ```
  Using a socks proxy is easy, we just need replacing the connectionSocks
  parameter, for example connecting to the same host, but using a socks
  proxy at localhost:1080:
  ```haskell
  con <- connectTo ctx $ ConnectionParams
                         { connectionHostname  = "www.example.com"
                         , connectionPort      = 4567
                         , connectionUseSecure = Nothing
                         , connectionUseSocks  = Just $ SockSettingsSimple "localhost" 1080
                         }
  ```
  Connecting to a SSL style socket is equally easy, and need to set the UseSecure fields in ConnectionParams:
  ```haskell
  con <- connectTo ctx $ ConnectionParams
                         { connectionHostname  = "www.example.com"
                         , connectionPort      = 4567
                         , connectionUseSecure = Just def
                         , connectionUseSocks  = Nothing
                         }
  ```
  And finally, you can start TLS in the middle of an insecure connection. This is great for
  protocol using STARTTLS (e.g. IMAP, SMTP):

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  import qualified Data.ByteString as B
  import Data.ByteString.Char8 ()
  import Network.Connection
  import Data.Default

  main = do
      ctx <- initConnectionContext
      con <- connectTo ctx $ ConnectionParams
                                { connectionHostname  = "www.example.com"
                                , connectionPort      = 4567
                                , connectionUseSecure = Nothing
                                , connectionUseSocks  = Nothing
                                }
      -- talk to the other side with no TLS: says hello and starttls
      connectionPut con "HELLO\n"
      connectionPut con "STARTTLS\n"

      -- switch to TLS
      connectionSetSecure ctx con def

      -- the connection is from now on using TLS, we can send secret for example
      connectionPut con "PASSWORD 123\n"
      connectionClose con
  ```
description-type: markdown
hash: a7e622fe5f691abb0a10ff02374978b6ca7c085e93892b00eb1d3e7d513b41b4
homepage: https://github.com/kazu-yamamoto/crypton-connection
latest: 0.4.0
license-name: BSD-3-Clause
maintainer: Kazu Yamamoto <kazu@iij.ad.jp>
synopsis: Simple and easy network connections API
test-bench-deps: {}
