all-versions:
- '0.1'
- 0.1.1
- 0.1.2
author: Tom Hammersley
basic-deps:
  HUnit: '>=0'
  base: '>=4 && <5'
  bmp: '>=0'
  bytestring: '>=0'
  deepseq: '>=0'
  ghc-prim: '>=0'
  heap: '>=0'
  mersenne-random-pure64: '>=0'
  mtl: '>=0'
  parallel: '>=0'
changelog: ''
changelog-type: ''
description: "Haskell Ray Tracer and Photon Mapper v0.0\n-----------------------------------------\n\nThis
  is a parallel ray tracer and partially parallel photon mapper written in Haskell.
  \n\nFeatures:\n\nFully recursive raytracer with reflection and refraction\n* Sphere
  primitive\n* Plane primitive\n* Triangle mesh primitive\n* Parallelised ray tracing\n*
  Distributed ray tracing giving depth of field and anti-aliasing\n* Photon mapping\n*
  Irradiance caching\n* Gamma correction\n* Tone mapping\n\nDisclaimer\n----------\n\nI
  am a novice Haskell programmer. This code is not intended to be representative of
  best-practice Haskell programming.\n\nIf you see code that could be improved in
  terms of style, correctness, clarity, flexibility or efficiency, please, let me
  know! I'm eager to learn and I'd love to hear the opinion of those far more capable
  than me.\n\nWhy call it \"crocodile\"?\n------------------------\n\nMy two-year
  old son currently has quite a penchant for crocodiles.\n\nUsage\n-----\n\nCurrently
  there is a default hard-coded scene of the Cornell Box. I build the program with:\n\nscripts/build\n\nand
  execute it with:\n\ntime ./crocodile -p -i -c +RTS -N -RTS\n\nCabal also works,
  of course\n\nThis will output a file called test.bmp containing the resulting image.
  Depending on the number of photons emitted, the photon gathering radius and the
  maximum number of photons gathered, this could take quite some time. You can tune
  the parameters in Main.hs.\n\nOptions\n-------\n\n-i outputs intermediate renderings
  for fast debug feedback (recommended)\n-p enables the photon mapping pass\n-v directly
  visualises the photon map\n-c enable the irradiance cache\n\nBugs\n----\n\nThe Photon
  Mapping is largely functional though it currently has some minor artefacts. Work
  is ongoing to fix them.\nThere are numerous TODO issues noted in the code.\n\nFuture
  planned work\n-------------------\n\n* Gradients for the irradiance cache\n* Parsing
  of scene data files\n* Optimisation! Particularly of photon mapping\n* Parallelisation
  of photon gathering\n* Extended shader model\n* Alternative GI code paths - e.g.
  path tracing\n* Caustic photon mapping\n\nTom Hammersley 12/5/2011\ntomhammersley@gmail.com\n"
description-type: text
hash: c9de2d40c9ef9af7edc3a39983b89be77d7d85189b8acd16cd5f98bd48ddb007
homepage: https://github.com/TomHammersley/HaskellRenderer/
latest: 0.1.2
license-name: GPL-2.0-only
maintainer: tomhammersley@gmail.com
synopsis: An offline renderer supporting ray tracing and photon mapping
test-bench-deps: {}
