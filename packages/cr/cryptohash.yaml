all-versions:
- '0.4'
- 0.4.1
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.3
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
- 0.7.10
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.9.0
- 0.9.1
- 0.10.0
- 0.11.0
- 0.11.1
- 0.11.2
- 0.11.3
- 0.11.4
- 0.11.5
- 0.11.6
- 0.11.7
- 0.11.8
- 0.11.9
author: Vincent Hanquez <vincent@snarc.org>
basic-deps:
  base: '>=4 && <6'
  byteable: '>=0'
  bytestring: '>=0'
  cryptonite: '>=0.13'
  ghc-prim: '>=0'
  memory: '>=0'
changelog: ''
changelog-type: ''
description: ":warning: this library is now deprecated in favor of `cryptonite`, which
  is\na superset of this, and also have more functionality. For new projects,\nyou
  should *not* use this library anymore, and preferably you should\nconvert old projects
  to `cryptonite` too.\n\n:warning: the SHA3 implementation available in Crypto.Hash.SHA3
  is\nnot SHA3 as standardized by NIST, but Keccak as submitted for the SHA3 contest.\nA
  matching implementation is available as Keccak in `cryptonite`, although I would\nrecommend
  not to use unless you happens to really really need your digest value\nto be compatible.
  On the other hand, the centralized `Crypto.Hash` export\na proper SHA3 implementation
  (as standardized by NIST)\n\nCryptoHash\n==========\n\n`hs-cryptohash` provides
  many different secure digest algorithms, also\ncalled cryptographic hash functions
  or, simply, cryptohashes. The package\nexports common hash functions, as well as
  some more exotic ones, and\nprovides a single API for them all.\n\nThe general performance
  is comparable to the most optimised implementations\navailable.\n\nHere is the complete
  list of supported algorithms:\n\n* MD2, MD4, MD5 \n* RIPEMD160\n* SHA1\n* SHA-2
  family: 224, 256, 384, 512 and the newer 512t\n* SHA-3 (aka Keccak)\n* Skein: 256,
  512\n* Tiger\n* Whirlpool\n\nYou can easily import any hash with the following:\n\n
  \   import qualified Crypto.Hash.<HASH> as <Hash>\n\nWe recommend using `import
  qualified` because the APIs are similar and\nmany of the modules reuse the same
  names. However, if you are ony using\none module, there is no need to qualify the
  names.\n\nIncremental API\n---------------\n\nit's based on 4 different functions,
  similar to the lowlevel operations\nof a typical hash:\n\n* init: create a new hash
  context\n* update: update non-destructively a new hash context with a strict bytestring\n*
  updates: same as update, except that it takes a list of strict bytestring\n* finalize:
  finalize the context and returns a digest bytestring.\n\nall those operations are
  completely pure, and instead of changing the\ncontext as usual in others language,
  it re-allocates a new context each time.\n\nOne Pass API\n------------\n\nThe one
  pass API use the incremental API under the hood, but expose\ncommon operations to
  create digests out of a bytestring and lazy bytestring.\n\n* hash: create a digest
  (init+update+finalize) from a strict bytestring\n* hashlazy: create a digest (init+update+finalize)
  from a lazy bytestring\n\nMore Type safety\n----------------\n\nA more type safe
  API is also available from Crypto.Hash. The API provides\nall the supported hashes
  in the same namespace, through unified functions.\n\nIt introduces 2 new types,
  the Context type and the Digest type.\nBoth those types are parametrized with the
  HashAlgorithm used.\n\nThe API is very similar to each single hash module, except
  the types are\nslightly different.\n\n    import Crypto.Hash\n\n    -- use the incremental
  API to hash the byte [1,2,3] with SHA1\n    -- and print the hexadecimal digest.\n
  \   example1 = do\n        let ctx = hashInit\n            ctx' = hashUpdates ctx
  [ Data.ByteString.pack [1,2,3] ]\n            dgt  = hashFinalize ctx' :: Digest
  SHA1\n        putStrLn $ show dgt\n\n    -- use the one-pass API to hash the byte
  1,2,3 with SHA3_512\n    -- and print the hexadecimal digest.\n    example2 = do\n
  \       let dgt  = hash (Data.ByteString.pack [1,2,3]) :: Digest SHA3_512\n        putStrLn
  $ show dgt\n\nPerformance\n-----------\n\nCryptohash uses C implementations to provide
  maximum performance.\nsee the cbits directory for more information\n"
description-type: markdown
hash: 59d9494ba0cc9eef087ecba2e12e4d3e2d3b0327dd1542af552e3dca0e7de70d
homepage: http://github.com/vincenthz/hs-cryptohash
latest: 0.11.9
license-name: BSD-3-Clause
maintainer: Vincent Hanquez <vincent@snarc.org>
synopsis: collection of crypto hashes, fast, pure and practical
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=2'
  base: '>=4 && <5'
  byteable: '>=0'
  bytestring: '>=0'
  criterion: '>=0'
  cryptohash: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
