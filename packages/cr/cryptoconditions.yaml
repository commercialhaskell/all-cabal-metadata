all-versions:
- 0.1.0.0
- 0.2.2.1
- 0.2.2.2
- 0.2.3.0
- 0.2.4
- 0.2.5
author: Scott Sadler
basic-deps:
  aeson: '>=0'
  asn1-encoding: '>=0'
  asn1-parse: '>=0'
  asn1-types: '>=0'
  base: '>=4.7 && <5'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  cryptonite: '>=0'
  memory: '>=0'
  text: '>=0'
changelog: ''
changelog-type: ''
description: |+
  # Crypto Conditions

  Targeting spec: draft-thomas-crypto-conditions-02 of December 20, 2016

  ## Current status

  Supports all standard condition types except RSA.

  Needs more testing. [Some tests](./test/) exist.

  ## Design

  This approach to Crypto Conditions in Haskell has the goals:

  * Simple to understand and work with
  * Easily extensible

  The bottleneck to achieving these goals is extensibility; Haskell does not
  support dynamic dispatch like OOP languages, and runtime type casting
  in Haskell is very unnatural and somewhat unsafe.

  The solution is to decouple the condition type from the implementation,
  such that the core algorithms and serialization can work with instances
  of an "IsCondition" class, and a polymorphic data type can be implemented
  separately to support the desired condition types and behaviours.

  The module [Network.CryptoConditions](./Network/CryptoConditions.hs) supports the standard
  condition types, library authors wishing to extend CryptoConditions
  should copy and paste this file into their own project and define their own
  Condition type.

description-type: markdown
hash: ff169484e378392a8c02fbc189d2df42aec20316ca7bc62404e15bc2bb221af2
homepage: https://github.com/libscott/cryptoconditions-hs
latest: 0.2.5
license-name: BSD-3-Clause
maintainer: Scott Sadler <scott@scottsadler.de>
synopsis: Interledger Crypto-Conditions
test-bench-deps:
  aeson: '>=0'
  aeson-quick: '>=0'
  asn1-encoding: '>=0'
  base: '>=0'
  base16-bytestring: '>=0'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  cryptoconditions: '>=0'
  cryptonite: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  transformers: '>=0'
