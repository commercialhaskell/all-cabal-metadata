all-versions:
- '0.7'
- 0.7.1
author: Galois Inc.
basic-deps:
  async: '>=0'
  base: '>=4.13 && <4.20'
  bimap: '>=0'
  bv-sized: '>=1.0.0 && <1.1'
  containers: '>=0.5.9.0'
  exceptions: '>=0'
  fgl: '>=0'
  hashable: '>=0'
  json: '>=0.9 && <1.0'
  lens: '>=0'
  mtl: '>=0'
  panic: '>=0.3'
  parameterized-utils: '>=1.0.8 && <2.2'
  prettyprinter: '>=1.7.0'
  template-haskell: '>=0'
  text: '>=0'
  th-abstraction: '>=0.1 && <0.7'
  time: '>=1.8 && <2.0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  what4: '>=0.4'
changelog: |
  # 0.7.1 -- 2024-08-30

  * Add support for GHC 9.8

  * Deprecate `concreteizeSymSequence` in favor of `concretizeSymSequence`

  # 0.7 -- 2024-02-05

  * Add `TypedOverride`, `SomeTypedOverride`, and `runTypedOverride` to
    `Lang.Crucible.Simulator.OverrideSim`. These allow one to define an
    `OverrideSim` action and bundle `TypeRepr`s for its argument and result
    types, which is a common pattern in several Crucible backends.
  * Add `Lang.Crucible.Simulator.OverrideSim.bindCFG`, a utility function for
    binding a CFG to its handle in an `OverrideSim`.

  # 0.6

  * Separate backend data structures.  The "symbolic backend" is a
  ubiquitous datatype throughout Crucible. Previously, this single
  data structure was responsible for symbolic expression creation
  and also for tracking the structure of assumptions and assertions
  as the symbolic simulator progresses. These linked purposes made
  certain code patterns very difficult, such as running related symbolic
  simulation instances in separate threads, or configuring different
  online solvers for path satisfiability checking.

  We changed this structure so that the `sym` value is now only
  responsible for the What4 expression creation tasks.  Now, there is a
  new "symbolic backend" `bak` value (that contains a `sym`) which is
  used to handle path conditions and assertions.  These two values are
  connected by the `IsSymBackend sym bak` type class.  To prevent even
  more code churn than is already occurring, the exact type of `bak` is
  wrapped up into an existential datatype and stored in the
  `SimContext`. This makes accessing the symbolic backend a little less
  convenient, but prevents the new type from leaking into every type
  signature that currently mentions `sym`.  The `withBackend`
  and `ovrWithBackend` operations (written in a CPS style) are the
  easiest way to get access to the backend, but it can also be accessed
  via directly pattern matching on the existential `SomeBackend` type.

  For many purposes the old `sym` value is still sufficient, and the
  `bak` value is not necessary. A good rule is that any operation
  that adds assumptions or assertions to the context will need
  the full symbolic backend `bak`, but any operation that just
  builds terms will only need the `sym`.
changelog-type: markdown
description: |-
  Crucible provides a program representation format based on single-static assignment
  (SSA) form control flow graphs, and a symbolic simulation engine for executing
  programs expressed in this format.  It also provides support for communicating with
  a variety of SAT and SMT solvers, including Z3, CVC4, Yices, STP, and dReal.
description-type: haddock
hash: 4bf700e44cb6ae7fd2f4fa9010cc1098b839d03b728c5b96a4bc50e30ba580ee
homepage: ''
latest: 0.7.1
license-name: BSD-3-Clause
maintainer: rscott@galois.com, kquick@galois.com, langston@galois.com
synopsis: Crucible is a library for language-agnostic symbolic simulation
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  containers: '>=0'
  crucible: '>=0'
  hspec: '>=2.5'
  mtl: '>=0'
  panic: '>=0.3'
  parameterized-utils: '>=0'
  tasty: '>=0.10'
  tasty-hspec: '>=1.1'
  tasty-hunit: '>=0.9'
  tasty-quickcheck: '>=0.8'
  what4: '>=0'
