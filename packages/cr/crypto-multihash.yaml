all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
author: Marcello Seri
basic-deps:
  base: '>=4.7 && <5'
  base58-bytestring: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  crypto-multihash: '>=0'
  cryptonite: '>=0'
  memory: '>=0'
  string-conversions: '>=0'
changelog: ''
changelog-type: ''
description: "# Crypto Multihash\n\n[![Build Status](https://travis-ci.org/mseri/crypto-multihash.svg?branch=master)](https://travis-ci.org/mseri/crypto-multihash)\n[![Hackage](https://img.shields.io/hackage/v/crypto-multihash.svg)](http://hackage.haskell.org/package/crypto-multihash)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/crypto-multihash.svg)\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n\n\nMultihash
  library implemented on top of [cryptonite](https://hackage.haskell.org/package/cryptonite)
  cryptographic library. \nMultihash is a protocol for encoding the hash algorithm
  and digest length at the start of the digest, see the official [multihash github
  page](https://github.com/jbenet/multihash/).\n\nThis library is still experimental
  and the api is not guaranteed stable. \nI will increment the version number appropriately
  in case of breaking changes.\n\nFor the moment the library implements all the expected
  hashing algorithms with the exception of shake-128 and shake-256. A Multihash can
  be encoded in hex (`Base16`), base 32 (`Base32`), bitcoin base58 (`Base58`) and
  base64 (`Base64`). \n\n# Usage\n\n```{.haskell}\n-- in ghci `:set -XOverloadedStrings`\n{-#
  LANGUAGE OverloadedStrings #-}\n\n-- `:m +Crypto.Multihash`\nimport Crypto.Multihash\nimport
  Data.ByteString (ByteString)\n\nmain = do\n    let v = \"test\"::ByteString\n    let
  m = multihash SHA256 v\n\n    -- If using the Weak module\n    -- let m' = weakMultihash
  \"sha256\" v\n    \n    putStrLn $ \"Base16: \" ++ (encode' Base16 m)\n    -- You
  might need to specify the encoded string type\n    putStrLn $ \"Base58: \" ++ (encode'
  Base58 m :: String)\n\n    -- `encode` is the safe interface returning an `Either`
  type\n    putStrLn $ \"Base64: \" ++ show (encode Base64 m :: Either String String)\n
  \   \n    let h = encode' Base58 m :: ByteString\n    -- You can check that a multihash
  corresponds to some data `v`\n    checkMultihash h v\n    -- Right True\n    \n
  \   -- Or if you have a Multihash to compare you can use it\n    check h m\n    --
  Right True\n\n    -- There is also an unsafe version, as for encode\n    -- note
  that sometimes you will need to specify the string types\n    checkMultihash' (\"whatever\"::String)
  v\n    -- *** Exception: Unable to infer an encoding\n    checkMultihash' (\"Eiwhatever\"::ByteString)
  v\n    -- *** Exception: base64: input: invalid length\n    check' (\"EiCfhtCBiEx9ZZov6qDFWtAVo79PGysLgizRXWwVsPA1CA==\"::ByteString)
  m\n    -- False\n\n    checkMultihash' h v\n    -- True\n    check' h m\n    --
  True\n```\n\nThe of `import Crypto.Multihash.Weak` is almost identical, but it additionally
  introduces the function `toWeakMultihash` that tries to import a string as a `WeakMultihashDigest`.\n\n#
  Test\n\nSome preliminary tests can be performed with `stack test`. \n\nA simple
  example encoder is in `app/Main.hs`. \nYou can run it on files\n\n```{.bash}\necho
  -n test | stack exec mh -- somefile someotherfile\n```\n\nor read data from the
  standard input \n\n```{.bash}\necho -n test | stack exec mh -- -\n```\n\n# Contribution\n\n1.
  Fork repository\n2. Do some changes\n3. Create pull request\n4. Wait for CI build
  and review\n\nYou can use stack to build the project: `stack build`\n\nTo run tests:
  `stack test`\n\n# TODO\n\n- ~~Test the new `getBase` implementation using quickcheck~~\n-
  Accurately test the correct support of truncated multihashes, including the truncation
  length that triggers easy failures in `getBase`\n- Implement benchmarks, then start
  optimising the code where possible\n- ~~Use the hash length in `checkPayload` to
  treat correctly truncated hashes (see https://github.com/jbenet/multihash/issues/1#issuecomment-91783612)~~\n-
  Improve documentation\n- Implement `shake-128` and `shake-256` multihashes\n- ~~Implement
  `Base32` encoding~~ waiting for https://github.com/jbenet/multihash/issues/31 to
  be resolved)\n"
description-type: markdown
hash: 5faa52965ea0756886b34e8dbc3672cac518451baafd7a12cdbaa549f4761e73
homepage: https://github.com/mseri/crypto-multihash#crypto-multihash
latest: 0.4.2.0
license-name: BSD-3-Clause
maintainer: marcello.seri@gmail.com
synopsis: Multihash library on top of cryptonite crypto library
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  crypto-multihash: '>=0'
  hspec: '>=0'
