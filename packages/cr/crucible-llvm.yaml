all-versions:
- '0.6'
author: Galois Inc.
basic-deps:
  attoparsec: '>=0'
  base: '>=4.13 && <4.19'
  bv-sized: '>=1.0.0'
  bytestring: '>=0'
  containers: '>=0.5.8.0'
  crucible: '>=0.5'
  crucible-symio: '>=0'
  extra: '>=0'
  itanium-abi: '>=0.1.1.1 && <0.2'
  lens: '>=0'
  llvm-pretty: '>=0.12 && <0.13'
  mtl: '>=0'
  parameterized-utils: '>=2.1.5 && <2.2'
  pretty: '>=0'
  prettyprinter: '>=1.7.0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
  utf8-string: '>=0'
  vector: '>=0'
  what4: '>=0.4.1'
changelog: |
  # 0.6 -- 2024-02-05

  * `bindLLVMFunPtr` now accepts an `Text.LLVM.AST.Symbol` rather than a whole `Declare`.
    Use `decName` to get a `Symbol` from a `Declare`.
  * Implement overrides for the LLVM `llvm.is.fpclass.f*` intrinsics.
  * Implement overrides for the `isinf`, `__isinf`, and `__isinff` C functions.
  * Implement overrides for the LLVM `llvm.fma.f*` and `llvm.fmuladd.f*`
    intrinsics.
  * Implement overrides for the `fma` and `fmaf` C functions.
  * Add a `Lang.Crucible.LLVM.MemModel.CallStack.null` function.
  * Add a `ppLLVMLatest` function to `Lang.Crucible.LLVM.PrettyPrint`, which
    pretty-prints an LLVM AST using the latest LLVM version that `llvm-pretty`
    currently supports. Also add derived combinators (`ppDeclare`, `ppIdent`,
    etc.) for calling the `llvm-pretty` functions of the same names in tandem
    with `ppLLVMLatest`.

  # 0.5
  * Add `?memOpts :: MemOptions` constraints to the following functions:
    * `Lang.Crucible.LLVM.MemModel`: `doStore`, `storeRaw`, `condStoreRaw`, and
      `storeConstRaw`
    * `Lang.Crucible.LLVM.Globals`: `populateGlobal`
    * `Lang.Crucible.LLVM.MemModel.Generic`: `writeMem` and `writeConstMem`
  * `Lang.Crucible.LLVM`: `registerModuleFn` has changed type to
    accomodate lazy loading of Crucible IR.
  * `Lang.Crucible.LLVM.Translation` : The `ModuleTranslation` record is
    now opaque, the `cfgMap` is no longer exported and `globalInitMap`
    and `modTransNonce` have become lens-style getters instead of record
    accessors. CFGs should be retrieved using the new `getTranslatedCFG`
    or `getTranslatedCFGForHandle` functions.
  * `Lang.Crucible.LLVM` : new functions `registerLazyModuleFn` and
    `registerLazyModule`, which delay the building of Crucible CFGs until
    the functions in question are actually called.
  * `executeDirectives` in `Lang.Crucible.LLVM.Printf` now returns a `ByteString`
    instead of a `String` so that we can better preserve the exact bytes used in
    string arguments, without applying a particular text encoding.
  * `crucible-llvm` now handles LLVM's opaque pointer types, an alternative
    representation of pointer types that does not store a pointee type. As a
    result, `MemType` now has an additional `PtrOpaqueType` constructor in
    addition to the existing (non-opaque) `PtrType` constructor.

    LLVM 15 and later use opaque pointers by default, so it is recommended that
    you add support for `PtrOpaqueType` (and opaque pointers in general) going
    forward. `crucible-llvm` still supports both kinds of pointers, so you can
    fall back to non-opaque pointers if need be.
  * A new `Lang.Crucible.LLVM.SimpleLoopInvariant` module has been added, which
    provides an execution feature that facilitates reasoning about certain kinds
    of loops (which may not terminate) using loop invariants. Note that this
    functionality is very experimental and subject to change in the future.

  # 0.4
  * A new `indeterminateLoadBehavior` flag in `MemOptions` now controls now
    reading from uninitialized memory works when `laxLoadsAndStores` is enabled.
    If `StableSymbolic` is chosen, then allocating memory will also initialize it
    with a fresh symbolic value so that subsequent reads will always return that
    same value. If `UnstableSymbolic` is chosen, then each read from a section of
    uninitialized memory will return a distinct symbolic value each time.

    As a result of this change, `?memOpts :: MemOptions` constraints have been
    added to the following functions:
    * `Lang.Crucible.LLVM.Globals`:
      `initializeAllMemory`, `initializeMemoryConstGlobals`, `populateGlobals`,
      `populateAllGlobals`, and `populateConstGlobals`
    * `Lang.Crucible.LLVM.MemModel`:
      `doAlloca`, `doCalloc`, `doInvalidate`, `doMalloc`, `doMallocUnbounded`,
      `mallocRaw`, `mallocConstRaw`, `allocGlobals`, and `allocGlobal`
  * `HasLLVMAnn` now has an additional `CallStack` argument, which is used for
    annotating errors with call stacks.
changelog-type: markdown
description: |
  This package implements an LLVM frontend for Crucible.  The frontend provides two major things:
  1. A translation of LLVM IR into the Crucible IR
  2. Data types supporting that translation

  Most clients of the library that just want to analyze LLVM IR (which usually means C and C++) will only need the `Lang.Crucible.LLVM` and `Lang.Crucible.LLVM.Translation` modules.  The core data structure implementing the LLVM memory model (see `Lang.Crucible.LLVM.MemModel`) may be of interest to other clients.  The memory model is documented in more detail in [the docs](doc/memory-model.md).
description-type: markdown
hash: 95e4f64f1e096f0d6d54c7111ef00fd361ae5a5cef005b48a2c536bbf5d0793c
homepage: ''
latest: '0.6'
license-name: BSD-3-Clause
maintainer: rscott@galois.com, kquick@galois.com, langston@galois.com
synopsis: Support for translating and executing LLVM code in Crucible
test-bench-deps:
  base: '>=0'
  bv-sized: '>=0'
  containers: '>=0'
  crucible: '>=0'
  crucible-llvm: '>=0'
  directory: '>=0'
  filepath: '>=0'
  lens: '>=0'
  llvm-pretty: '>=0'
  llvm-pretty-bc-parser: '>=0'
  parameterized-utils: '>=0'
  process: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  tasty-sugar: '>=2.0 && <2.3'
  vector: '>=0'
  what4: '>=0'
