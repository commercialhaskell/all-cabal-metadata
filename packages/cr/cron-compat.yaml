all-versions:
- 0.2.6
author: Michael Xavier <michael@michaelxavier.net>
basic-deps:
  attoparsec: '>=0.10'
  base: '>=4 && <5'
  mtl: '>=2.1 && <=2.2'
  mtl-compat: '>=0.2.1 && <=0.2.2'
  old-locale: '>=1.0'
  text: '>=0.11 && <2'
  time: '>=1.4'
  transformers-compat: '>=0.3.0.0'
changelog: |
  # 0.2.5
  * GHC 7.10 support
  # 0.2.4
  * Bugfixes for new task runner feature
  # 0.2.3
  * Add new in-process task runner feature. Credit to @AndrewRademacher
  # 0.2.2
  * Fix edge case when day of month and day of week are both specified. Credit to @joelwilliamson
  # 0.2.1
  * Fix day of week bug. Credit to @meteogrid
  # 0.1.2
  * Relax dependency on text to allow 1.0
changelog-type: text
description: |
  cron
  ====
  [![Build Status](https://secure.travis-ci.org/MichaelXavier/cron.png)](http://travis-ci.org/MichaelXavier/cron)

  Cron data structure and Attoparsec parser for Haskell. The idea is to embed it
  in larger systems which want to roll their own scheduled tasks in a format that
  people are used to.

  `System.Cron` is where all the interesting datatypes live. You will also find
  `scheduleMatches`, which you can use to compare a time against a `CronSchedule`
  to see if an action needs to be performed.  System.Cron.Parser is where you will
  find the parsers `cronSchedule`, `crontabEntry` and `cronTab`. To parse
  individual schedules up to full crontab files.


  To do anything, you'll need to install cabal-dev with cabal.

  To build, run:

      make

  To run tests, run:

      make test

  If you have inotify-tools, run this to run tests continuously.

      make autotest

  To generate docs:

      make docs

  #### Scheduler
  Cron offers a scheduling monad which can be found in `System.Cron.Schedule`. This monad transform allows you to declare a set of jobs (of the type `IO ()`) that will be executed at intervals defined by cron strings.

  ```haskell
  main :: IO ()
  main = do
      ...
      tids <- execSchedule $ do
          addJob job1 "* * * * *"
          addJob job2 "0 * * * *"
      print tids
      ...

  job1 :: IO ()
  job1 = putStrLn "Job 1"

  job2 :: IO ()
  job2 = putStrLn "Job 2"
  ```

  ## Contributors

  * [Simon Hengel](https://github.com/sol)
  * [Alberto Valverde](https://github.com/albertov)
  * [Andrew Rademacher](https://github.com/AndrewRademacher)
description-type: markdown
hash: c536f62217965c61551f6223c7bb9fe97739df4000bfc7c960afde73072734f1
homepage: http://github.com/michaelxavier/cron
latest: 0.2.6
license-name: MIT
maintainer: Michael Xavier <michael@michaelxavier.net>
synopsis: Cron datatypes and Attoparsec parser
test-bench-deps:
  QuickCheck: '>=0'
  attoparsec: '>=0.10'
  base: '>=4 && <5'
  cron: '>=0'
  derive: '>=0'
  hspec: '>=1.3'
  hspec-expectations: '>=0'
  text: '>=0.11 && <2'
  time: '>=1.4'
  transformers: '>=0.4'
