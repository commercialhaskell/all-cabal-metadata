all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
author: Dmitrii Kovanikov, Veronika Romashkina
basic-deps:
  base: '>=4.12 && <4.21'
  deepseq: '>=1.4.3.0 && <1.6'
  selective: '>=0.3 && <0.8'
changelog: "# Changelog\n\n`validation-selective` uses [PVP Versioning][1].\nThe changelog
  is available [on GitHub][2].\n\n## 0.2.0.0 — Mar 1, 2023\n\n* [#62](https://github.com/kowainik/validation-selective/issues/62):\n
  \ Support GHC-9.4.\n* Allow `hedgehog-1.2`.\n* Allow `selective-0.6`.\n* Allow `doctest-0.21`.\n*
  Remove support for GHC-8.4 (due to `selective-0.6`, which dropped support for\n
  \ the earlier GHCs).\n\n## 0.1.0.2 — Jun 11, 2021\n\n* [#62](https://github.com/kowainik/validation-selective/issues/62):\n
  \ Support GHC-9.2.\n* [#64](https://github.com/kowainik/validation-selective/issues/64):\n
  \ Allow `selective` version `0.5`.\n* Allow `hspec-2.11`.\n* Allow `doctest-0.20`.\n\n##
  \U0001F967 0.1.0.1 — Mar 14, 2021\n\n* [#57](https://github.com/kowainik/validation-selective/issues/57):\n
  \ Support GHC-9.0. Upgrade minor version to 8.10.4 and 8.8.4.\n\n## 0.1.0.0 — May
  5, 2020\n\n* [#41](https://github.com/kowainik/validation-selective/issues/41):\n
  \ Support GHC-8.10.1.\n* [#24](https://github.com/kowainik/validation-selective/issues/24):\n
  \ Add `validationAll`, `when*` and `maybe*` combinators into\n  `Validation.Combinators`.\n\n##
  0.0.0.0\n\n* Initially created.\n\n[1]: https://pvp.haskell.org\n[2]: https://github.com/kowainik/validation-selective/releases\n"
changelog-type: markdown
description: |
  # validation-selective

  ![Logo](https://user-images.githubusercontent.com/8126674/76859713-c0880200-6851-11ea-8bc1-bb9dee87d44f.png)
  [![GitHub CI](https://github.com/kowainik/validation-selective/workflows/CI/badge.svg)](https://github.com/kowainik/validation-selective/actions)

  [![Hackage](https://img.shields.io/hackage/v/validation-selective.svg?logo=haskell)](https://hackage.haskell.org/package/validation-selective)
  [![MPL-2.0 license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](LICENSE)

  Lightweight pure data validation based on `Applicative` and `Selective` functors.

  `validation-selective` is built around the following data type:

  ```haskell
  data Validation e a
      = Failure e
      | Success a
  ```

  This data type is similar to `Either` but allows accumulating all
  errors instead of short-circuiting on the first one.

  For more examples and library tutorial, refer to Haddock:

  * [`validation`: Official documentation](http://hackage.haskell.org/package/validation-selective/docs/Validation.html)

  ## Comparison with other packages

  `validation-selective` is not the only package that provides such
  `Validation` data type. However, unlike other packages, it has some
  noticeable advantages:

  + **Lightweight**. `validation-selective` depends only on `base` and
    `selective` (which is tiny) Haskell libraries which make this
    package fast to build. So adding validation capabilities to your
    library or application doesn't contribute much to your dependency
    footprint.
  + **Selective instance.** `validation-selective` is the only package
    that provides `Selective` instance for `Validation` which allows
    using `Monad`-like branching behaviour but without implementing
    wrong `Monad` instance.
  + **More algebraic instances.** `validation-selective` also provides
    the `Alternative` instance and a more general `Semigroup` instance.
  + **Best-in-class documentation.** Official Haddock documentation
    contains mini-tutorial, usage example, per-component comparison with
    `Either`, the motivation behind each instance and the interface in
    general along with examples for **each instance and function**.

  The below section provides per-package comparison with the most
  popular validation packages in the Haskell ecosystem:

  + [`either`](https://hackage.haskell.org/package/either): `Validation`
    implementation by Edward Kmett. This package is more heavyweight,
    since it depends on more Haskell libraries like `profunctors`,
    `bifunctors`, `semigroupoids`. But it also provides prisms for
    `Validation` and some combinators for `Either`.
  + [`validation`](https://hackage.haskell.org/package/validation):
    `Validation` from [Queensland Functional Programming Lab](https://qfpl.io/).
    Depends on `lens`, which makes it even heavier but also have richer
    interface compared to the `either` package.

  ## How to use

  `validation-selective` is compatible with the latest GHC compiler
  versions starting from `8.6`.

  In order to start using `validation-selective` in your project, you
  will need to set it up with the three easy steps:

  1. Add the dependency on `validation-selective` in your project's
     `.cabal` file. For this, you should modify the `build-depends`
     section by adding the name of this library. After the adjustment,
     this section could look like this:

     ```haskell
     build-depends: base ^>= 4.14
                  , validation-selective ^>= 0.0
     ```
  2. In the module where you wish to implement pure data validation, you
     should add the import:

     ```haskell
     import Validation (Validation (..))
     ```
  3. Now you can use the types and functions from the library:

     ```haskell
     main :: IO ()
     main = print [Failure "wrong", Success 42]
     ```

  ### Usage with Stack

  If `validation-selective` is not available on your current Stackage
  resolver yet, fear not! You can still use it from Hackage by adding
  the following to the `extra-deps` section of your `stack.yaml` file:

  ```yaml
  extra-deps:
    - validation-selective-CURRENT_VERSION
  ```
description-type: markdown
hash: 65bc6ddf15619f68e427b96361c07951a91dba05b972b704675780f97a102f1d
homepage: https://github.com/kowainik/validation-selective
latest: 0.2.0.0
license-name: MPL-2.0
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Lighweight pure data validation based on Applicative and Selective functors
test-bench-deps:
  base: '>=4.12 && <4.21'
  doctest: '>=0.16 && <1'
  hedgehog: '>=1.0 && <1.5'
  hspec: '>=2.7.1 && <3'
  hspec-hedgehog: ^>=0.0.1.1
  selective: '>=0'
  text: '>=1.2.3 && <2.1'
  validation-selective: '>=0'
