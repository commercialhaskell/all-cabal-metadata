homepage: https://github.com/TotallyNotChase/valida-base#readme
changelog-type: markdown
hash: a37d590b89dfb0ff3f5aaea1d77025f291fdc44925140663085b32a7019c3acc
test-bench-deps:
  tasty-smallcheck: -any
  base: '>=4.13 && <5'
  smallcheck: -any
  valida-base: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
maintainer: totallynotchase42@gmail.com
synopsis: Simple applicative validation for product types, batteries included!
changelog: "# Changelog for valida-base\r\n\r\n## Unreleased changes\r\n\r\n## 0.1.1\r\nGeneral
  fixes to metadata files.\r\n\r\n## 0.1.0\r\nInitial release.\r\n"
basic-deps:
  base: '>=4.13 && <5'
all-versions:
- 0.1.0
- 0.1.1
author: Chase
latest: 0.1.1
description-type: markdown
description: "# Valida\r\nSimple, elegant, applicative validation for product types
  - batteries included!\r\n\r\nRead the documentation on [hackage](https://hackage.haskell.org/package/valida-base).\r\n\r\n#
  Highlights\r\n* Minimal - *Zero dependencies* apart from `base`.\r\n* Batteries
  included - `ValidationRule` combinators for almost every scenario.\r\n* Validation
  without the boiler plate - a highly specialized usage of contravariant functors
  to conveniently model the common validation usecases, without extra boilerplate.\r\n\r\n#
  Quick Taste\r\n```hs\r\nimport Data.List.NonEmpty (NonEmpty)\r\n\r\nimport Valida\r\n\r\ndata
  InputForm = InpForm\r\n  { inpName  :: String\r\n  , inpAge   :: Int\r\n  , inpEmail
  :: Maybe String\r\n  } deriving (Show)\r\n\r\ndata ValidInput = ValidInput\r\n  {
  vInpName  :: String\r\n  , vInpAge   :: Int\r\n  , vInpEmail :: Maybe String\r\n
  \ } deriving (Show)\r\n\r\ndata FormErr\r\n  = InvalidNameLength\r\n  | InvalidAge\r\n
  \ | NoAtCharInMail\r\n  | NoPeriodInMail\r\n  | InvalidEmailLength\r\n  deriving
  (Show)\r\n\r\n-- | Validator for each field in the input form - built using 'ValidationRule'
  combinators.\r\ninpFormValidator :: Validator (NonEmpty FormErr) InputForm ValidInput\r\ninpFormValidator
  = ValidInput\r\n    -- Name should be between 1 and 20 characters long\r\n    <$>
  inpName -?> lengthWithin (1, 20) InvalidNameLength\r\n    -- Age should be between
  18 and 120\r\n    <*> inpAge -?> valueWithin (18, 120) InvalidAge\r\n    -- Email,
  if provided, should contain '@', and '.', and be atleast 5 characters long\r\n    <*>
  inpEmail -?> optionally (minLengthOf 5 InvalidEmailLength\r\n        <> mustContain
  '@' NoAtCharInMail\r\n        <> mustContain '.' NoPeriodInMail)\r\n\r\ngoodInput
  :: InputForm\r\ngoodInput = InpForm \"John Doe\" 42 Nothing\r\n\r\nbadInput :: InputForm\r\nbadInput
  = InpForm \"John Doe\" 17 (Just \"@\")\r\n\r\nmain :: IO ()\r\nmain = do\r\n    print
  (runForm inpFormValidator goodInput)\r\n    -- Prints- Success (ValidInput {vInpName
  = \"John Doe\", vInpAge = 42, vInpEmail = Nothing})\r\n    print (runForm inpFormValidator
  badInput)\r\n    -- Prints- Failure (InvalidAge :| [InvalidEmailLength])\r\n```\r\n\r\nYou
  can also find more examples [here](./examples/Main.hs).\r\n\r\n# Quick Start\r\nThe
  primary purpose of the `Validator` type is to validate each field in product types.
  To do this, you'll use [`verify`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#v:verify).\r\n\r\n`verify`
  takes 2 inputs-\r\n* The \"selector\", which essentially just takes the product
  type as input, and returns the specific value of the specific field to validate.\r\n*
  The `ValidationRule`, which specifies the predicate the field must satisfy - as
  well as the error value to yield if it doesn't satisfy said predicate\r\n\r\nLet's
  validate a pair for example, the first field should be an int less than 10, the
  second field should be a non empty string. Then, the validator would look like-\r\n```hs\r\npairValidator
  :: Validator (NonEmpty String) (Int, String) (Int, String)\r\npairValidator = (,)
  <$> verify (failureIf (>=10) \"NotLessThan10\") fst <*> verify (notEmpty \"EmptyString\")
  snd\r\n```\r\nOr, if you prefer using operators - you can use [`-?>`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#v:-45--63--62-),
  which is a flipped version of `verify`.\r\n```hs\r\npairValidator :: Validator (NonEmpty
  String) (Int, String) (Int, String)\r\npairValidator = (,)\r\n    <$> fst -?> failureUnless
  (<10) \"NotLessThan10\"\r\n    <*> snd -?> notEmpty \"EmptyString\"\r\n```\r\n\r\nYou
  can then run the validator on your input using [`runValidator`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#t:Validator)-\r\n```hs\r\n>>>
  runValidator pairValidator (9, \"foo\")\r\nSuccess (9,\"foo\")\r\n>>> runValidator
  pairValidator (10, \"\")\r\nFailure (\"NotLessThan10\" :| [\"EmptyString\"])\r\n>>>
  runValidator pairValidator (5, \"\")\r\nFailure (\"EmptyString\" :| [])\r\n```\r\n\r\nThis
  is the core concept for building the validators. You can use the primitive combinators
  (e.g [`failureIf`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:failureIf),
  [`failureUnless`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:failureUnless))
  to build `ValidationRule`s directly from predicate functions, or you can choose
  one of the many derivate combinators (e.g [`notEmpty`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:notEmpty))
  to build `ValidationRule`s. Check out the [`Valida.Combinators`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html)
  module documentation to view all the included combinators.\r\n\r\n## Validators
  for non product types\r\nAlthough the primary purpose of Valida is building convenient
  validators for product types. Sometimes, you'll find yourself not needing to select
  on any field, but validating the input directly. In that case, you may find yourself
  using this pattern-\r\n```hs\r\n-- | Make sure int input is not even.\r\nintValidator
  :: Validator (NonEmpty String) Int Int\r\nintValidator = verify (failureIf even
  \"Even\") id\r\n```\r\n\r\nIn these situations, instead of using `verify` with `id`
  as selector, you should use [`validate`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#v:validate)
  instead, which is the same as `flip verify id`-\r\n```hs\r\nintValidator :: Validator
  (NonEmpty String) Int Int\r\nintValidator = validate (failureIf even \"Even\")\r\n```\r\n\r\n##
  Combining multiple `ValidationRule`s\r\nOften, you'll find yourself in situations
  where you expect the input to satisfy *multiple* `ValidationRule`s, or situations
  where you expect the input to satisfy *at least one* of many `ValidationRule`s.
  This is where [`andAlso`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:andAlso),
  and [`orElse`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:orElse)
  come into play.\r\n\r\n### Combining multiple `ValidationRule`s with `andAlso`\r\n`andAlso`
  is the semigroup implementation of `ValidationRule`, and thus is the same as `<>`.
  Combining 2 rules with `<>` creates a new rule that is only satisfied when *both
  of the given rules are satisfied*. Otherwise, the very first (left most) failure
  value is returned - and the rest are not tried.\r\n\r\nThe following rule only succeeds
  if the input is **odd**, *and* **not divisble by 3**.\r\n```hs\r\nrule :: ValidationRule
  (NonEmpty String) Int\r\nrule = failureIf even \"IsEven\" `andAlso` failureIf ((==0)
  . flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n(OR)\r\n```hs\r\nrule :: ValidationRule
  (NonEmpty String) Int\r\nrule = failureIf even \"IsEven\" <> failureIf ((==0) .
  flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n\r\nUsages-\r\n```hs\r\n>>> runValidator
  (validate rule) 5\r\nSuccess 5\r\n>>> runValidator (validate rule) 4\r\nFailure
  (\"IsEven\" :| [])\r\n>>> runValidator (validate rule) 15\r\nFailure (\"IsDivisbleBy3\"
  :| [])\r\n>>> runValidator (validate rule) 6\r\nFailure (\"IsEven\" :| [])\r\n```\r\n\r\n###
  Combining multiple `ValidationRule`s with `orElse`\r\n`orElse` also forms a semigroup,
  `</>` is aliased to `orElse`. Combining 2 rules with `</>` creates a new rule that
  is satisfied when *either of the given rules are satsified*. If all of them fail,
  the `Failure` values are accumulated.\r\n\r\nThe following rule succeeds if the
  input is *either* **odd**, *or* **not divisble by 3**.\r\n```hs\r\nrule :: ValidationRule
  (NonEmpty String) Int\r\nrule = failureIf even \"IsEven\" `orElse` failureIf ((==0)
  . flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n(OR)\r\n```hs\r\nrule :: ValidationRule
  (NonEmpty String) Int\r\nrule = failureIf even \"IsEven\" </> failureIf ((==0) .
  flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n\r\nUsages-\r\n```hs\r\n>>> runValidator
  (validate rule) 5\r\nSuccess 5\r\n>>> runValidator (validate rule) 4\r\nSuccess
  4\r\n>>> runValidator (validate rule) 15\r\nSuccess 15\r\n>>> runValidator (validate
  rule) 6\r\nFailure (\"IsEven\" :| [\"IsDivisbleBy3\"])\r\n```\r\n\r\n### Combining
  a foldable of `ValidationRule`s\r\nYou can combine a foldable of `ValidationRule`s
  using [`satisfyAll`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:satisfyAll)
  and [`satisfyAny`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:satisfyAny).
  `satisfyAll` folds using `andAlso`/`<>`, while `satisfyAny` folds using `orElse`/`</>`.\r\n\r\n##
  Ignoring errors\r\nAlthough, highly inadvisable and generally not useful in serious
  code, you may use alternative versions of `ValidationRule` combinators that use
  `()` (unit) as its error type so you don't have to supply error values. For example,
  [`failureIf'`](https://hackage.haskell.org/package/valida-base/docs/Valida-Combinators.html#v:failureIf-39-)
  does not require an error value to be supplied. In case of failure, it simply yields
  `Failure ()`.\r\n```hs\r\n>>> runValidator (validate (failureIf' even)) 2\r\nFailure
  ()\r\n```\r\n\r\n## Re-assigning errors\r\nUsing the [`label`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#v:label)/[`<?>`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#v:-60--63--62-)
  and [`labelV`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#v:labelV)/[`<??>`](https://hackage.haskell.org/package/valida-base/docs/Valida.html#v:-60--63--63--62-)
  functions, you can use override the errors `ValidationRule`s and `Validator`s yield.\r\n\r\nFor
  example, to re assign the error on a `ValidationRule`-\r\n```hs\r\nlabel \"IsEven\"
  (failureIf even \"Foo\")\r\n```\r\n(OR)\r\n```hs\r\nfailureIf even \"Foo\" <?> \"IsEven\"\r\n```\r\n\r\nThis
  is useful with `ValidationRule`s that use unit as their error type. You can create
  a `ValidationRule`, skip assigning an error to it - and label a specific error when
  you need it later.\r\n```hs\r\nlabel \"IsEven\" (failureIf' even)\r\n```\r\n\r\nRe-labeled
  `ValidationRule`s will yield the newly assigned error value when the rule is not
  satisfied.\r\n\r\nSimilarly, `labelV` (or `<??>`) can be used to relabel the error
  value of an entire `Validator`.\r\n\r\n## Wait, couldn't this be done using contravariant
  functors?\r\nYes! The concept of *keeping the input of a `Validator`* set to the
  same product type, but *letting it validate a specific field* of said input, can
  be generalized to contravariant functors. The `Validator` type looks like- `Validator
  e inp a`, to keep applicative composition working, the `inp` needs to stay the same
  - but each validator within said composition should also be able to *consume* a
  specific part of the `inp`. `ValidationRule` itself, is the typical example of a
  contravariant functor as well. It's essentially a specialized predicate function-
  `a -> Validation e ()`. The `verify` function simply combines these 2 *potentially
  generalizable* contravariant functors, into a very specialized usecase.\r\n\r\nI
  do think adding instances for actual generalized contravariant functors/profunctors
  for `ValidationRule` and `Validator`, *could* be more powerful, while also being
  able to provide the same specialized functions. However, I've refrained from doing
  so as I didn't want to pull in the extra dependencies. I think the separation of
  `ValidationRule` and `Validator`, combined with the provided functions, *should*
  be able to reliably, and elegantly model any scenario of building a validator. I
  have yet to find a usecase where the generalized contravariant instances *would
  be significantly useful*. But it could certainly be more idiomatic for haskell.
  I may consider creating a package that *does* go the contravariant/profunctor route
  though.\r\n\r\n# Comparison and Motivation\r\nThe concept of the `Validation` data
  type used in this package isn't new. It's also used in the following packages-\r\n*
  [either](https://hackage.haskell.org/package/either)\r\n* [validation](https://hackage.haskell.org/package/validation)\r\n*
  [validation-selective](https://hackage.haskell.org/package/validation-selective)\r\n\r\nValida
  aims to be a minimal in terms of dependencies, but batteries included in terms of
  API. It borrows many philosophies from `Data.Validation` (from `validation`) and
  `Validation` (from `validation-selective`), and aims to provide a convenient, minimal
  way to model the common usecases of them.\r\n\r\nThe `verify` function, combined
  with the `ValidationRule` combinators, and the parsec-esque `Validator` aims to
  assist in easily modeling typical validation usecases without too much boilerplate.
  The core idea, really, is [contravariance](#wait-couldnt-this-be-done-using-contravariant-functors)
  - the typical usecases, especially when validating product types (the most common
  target of validation), simply showcases contravariant functors.\r\n\r\nIn essence,
  the validation style itself, is designed to look like [forma](https://hackage.haskell.org/package/forma).
  Though the actual types, and core concepts are significantly different.\r\n"
license-name: MIT
