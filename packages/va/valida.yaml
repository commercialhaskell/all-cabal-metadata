homepage: https://github.com/TotallyNotChase/valida#readme
changelog-type: markdown
hash: b256210e2c4737775a680fdc6a008c56f61ff31dbdd23ce2bde5678350794a3c
test-bench-deps:
  tasty-smallcheck: -any
  valida: -any
  base: '>=4.12 && <5'
  smallcheck: '>=1.2'
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  profunctors: '>=5'
maintainer: totallynotchase42@gmail.com
synopsis: Simple applicative validation for product types, batteries included!
changelog: "# Changelog for valida\r\n\r\n## 1.1.0 (Aug 25, 2021)\r\n* Add `withDefault`
  combinator.\r\n* Make `optionally` preserve output of given validator.\r\n* Remove
  redundant `fixV` usage from examples.\r\n\r\n## 1.0.0 (Aug 24, 2021)\r\n* Add `profunctors`
  dependency.\r\n* Add `Profunctor` instance for `Validator`.\r\n* Rework `Validator`
  semigroup instance.\r\n\r\n  The new semigroup instance now works similar to the
  `ValidationRule` semigroup instance.\r\n* Add `Monoid` instance for `Validator`.\r\n*
  Remove `ValidationRule`.\r\n* Remove `Selector` type alias.\r\n* Rewrite all previous
  `ValidationRule` combinators to work with `Validator`s instead.\r\n* Rename `negateRule`
  -> `negateV`.\r\n* Rename `falseRule` -> `failV`.\r\n* Add `fixV` - refer to the
  documentation for more information.\r\n* Remove `validate` - no longer necessary.\r\n*
  Rename `labelV` -> `label`.\r\n* Rename `<??>` -> `<?>`. Infix precedence 6.\r\n*
  Remove `label` and `<?>`.\r\n* `verify` is now an alias to flipped `lmap` from `Data.Profunctor`,
  specialized for `Validator`s.\r\n* Allow usage with base == 4.12\r\n* Explicitly
  constraint smallcheck dependency to 1.2.0+\r\n\r\n## 0.1.0 (Aug 20, 2021)\r\nInitial
  release.\r\n"
basic-deps:
  base: '>=4.12 && <5'
  profunctors: '>=5'
all-versions:
- 0.1.0
- 1.0.0
- 1.1.0
author: Chase
latest: 1.1.0
description-type: markdown
description: "# Valida\r\nSimple, elegant, profunctorial, applicative validation for
  product types - batteries included!\r\n\r\nRead the documentation on [hackage](https://hackage.haskell.org/package/valida).\r\n\r\n#
  Highlights\r\n* Minimal - **Singular** external dependency: profunctors.\r\n\r\n
  \ If you'd like a more lightweight version. Checkout [valida-base](https://hackage.haskell.org/package/valida-base),
  which offers similar functionalites *without **any** external dependency*.\r\n*
  Batteries included - `Validator` combinators for almost every scenario.\r\n* Validation
  without the boiler plate - Implementation of contravariance to conveniently model
  the common validation usecases, without extra boilerplate.\r\n* Profunctorial, Applicative
  Validator - Relating to the previous point, the provided `Validator` type is not
  only an applicative functor, but also a profunctor. This is what allows the contravariance
  on its input argument.\r\n\r\n# Quick Taste\r\n```hs\r\nimport Data.List.NonEmpty
  (NonEmpty)\r\n\r\nimport Valida\r\n\r\ndata InputForm = InpForm\r\n  { inpName  ::
  String\r\n  , inpAge   :: Int\r\n  , inpEmail :: Maybe String\r\n  , inpFreeCake
  :: Maybe Bool\r\n  } deriving (Show)\r\n\r\ndata ValidInput = ValidInput\r\n  {
  vInpName  :: String\r\n  , vInpAge   :: Int\r\n  , vInpEmail :: Maybe String\r\n
  \ , vFreeCake :: Bool\r\n  } deriving (Show)\r\n\r\ndata FormErr\r\n  = InvalidNameLength\r\n
  \ | InvalidAge\r\n  | NoAtCharInMail\r\n  | NoPeriodInMail\r\n  | InvalidEmailLength\r\n
  \ | YouMustGetFreeCake\r\n  deriving (Show)\r\n\r\n-- | Validator for each field
  in the input form - built using 'Validator' combinators.\r\ninpFormValidator ::
  Validator (NonEmpty FormErr) InputForm ValidInput\r\ninpFormValidator = ValidInput\r\n
  \   -- Name should be between 1 and 20 characters long\r\n    <$> inpName -?> lengthWithin
  (1, 20) InvalidNameLength\r\n    -- Age should be between 18 and 120\r\n    <*>
  inpAge -?> valueWithin (18, 120) InvalidAge\r\n    -- Email, if provided, should
  contain '@', and '.', and be atleast 5 characters long\r\n    <*> inpEmail -?> optionally
  (minLengthOf 5 InvalidEmailLength\r\n        <> mustContain '@' NoAtCharInMail\r\n
  \       <> mustContain '.' NoPeriodInMail)\r\n    <*> inpFreeCake -?> failureUnless
  id YouMustGetFreeCake `withDefault` True\r\n\r\ngoodInput :: InputForm\r\ngoodInput
  = InpForm \"John Doe\" 42 Nothing (Just True)\r\n\r\nbadInput :: InputForm\r\nbadInput
  = InpForm \"John Doe\" 17 (Just \"@\") Nothing\r\n\r\nmain :: IO ()\r\nmain = do\r\n
  \   print (runValidator inpFormValidator goodInput)\r\n    -- Prints- Success (ValidInput
  {vInpName = \"John Doe\", vInpAge = 42, vInpEmail = Nothing, vFreeCake = true})\r\n
  \   print (runValidator inpFormValidator badInput)\r\n    -- Prints- Failure (InvalidAge
  :| [InvalidEmailLength])\r\n\r\n```\r\n\r\nYou can also find more examples [here](./examples/Main.hs).\r\n\r\n#
  Quick Start\r\nThe primary purpose of the `Validator` type is to validate each field
  in product types. To do this, you'll use [`verify`](https://hackage.haskell.org/package/valida/docs/Valida.html#v:verify).\r\n\r\n`verify`
  takes 2 inputs-\r\n* The \"selector\", which essentially just takes the product
  type as input, and returns the specific value of the specific field to validate.\r\n*
  The `Validator`, which specifies the predicate the field must satisfy, the error
  value to yield if it doesn't satisfy said predicate, and the output upon successful
  validation.\r\n\r\nLet's validate a pair for example, the first field should be
  an int less than 10, the second field should be a non empty string. Then, the validator
  would look like-\r\n```hs\r\npairValidator :: Validator (NonEmpty String) (Int,
  String) (Int, String)\r\npairValidator = (,) <$> verify (failureIf (>=10) \"NotLessThan10\")
  fst <*> verify (notEmpty \"EmptyString\") snd\r\n```\r\nOr, if you prefer using
  operators - you can use [`-?>`](https://hackage.haskell.org/package/valida/docs/Valida.html#v:-45--63--62-),
  which is a flipped version of `verify`.\r\n```hs\r\npairValidator :: Validator (NonEmpty
  String) (Int, String) (Int, String)\r\npairValidator = (,)\r\n    <$> fst -?> failureIf
  (>=10) \"NotLessThan10\"\r\n    <*> snd -?> notEmpty \"EmptyString\"\r\n```\r\n\r\nYou
  can then run the validator on your input using [`runValidator`](https://hackage.haskell.org/package/valida/docs/Valida.html#t:Validator)-\r\n```hs\r\n>>>
  runValidator pairValidator (9, \"foo\")\r\nSuccess (9,\"foo\")\r\n>>> runValidator
  pairValidator (10, \"\")\r\nFailure (\"NotLessThan10\" :| [\"EmptyString\"])\r\n>>>
  runValidator pairValidator (5, \"\")\r\nFailure (\"EmptyString\" :| [])\r\n```\r\n\r\nThis
  is the core concept for building the validators. You can use the primitive combinators
  (e.g [`failureIf`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:failureIf),
  [`failureUnless`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:failureUnless))
  to build `Validator`s directly from predicate functions, or you can choose one of
  the many derivate combinators (e.g [`notEmpty`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:notEmpty))
  to build `Validator`s. Check out the [`Valida.Combinators`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html)
  module documentation to view all the included combinators.\r\n\r\n## Combining multiple
  `Validator`s\r\nOften, you'll find yourself in situations where you expect the input
  to satisfy *multiple* `Validator`s (but don't need applicative composition), or
  situations where you expect the input to satisfy *at least one* of multiple `Validator`s.
  This is where [`andAlso`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:andAlso),
  and [`orElse`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:orElse)
  come into play.\r\n\r\n### Combining multiple `Validator`s with `andAlso`\r\n`andAlso`
  is the semigroup implementation of `Validator`, and thus is the same as `<>`. Combining
  2 validators with `<>` creates a new validator that is only satisfied when *both
  of the given validators are satisfied*.\r\n\r\nOtherwise, the **first (left most)**
  failure value is returned - and the rest are not tried. Upon successful validation,
  the **right-most** `Success` value is returned. This means that if all validators
  succeed, only the right-most validator's success value is returned.\r\n\r\nThe following
  validator only succeeds if the input is **odd**, *and* **not divisble by 3**.\r\n```hs\r\nvalidator
  :: Validator (NonEmpty String) Int Int\r\nvalidator = failureIf even \"IsEven\"
  `andAlso` failureIf ((==0) . flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n(OR)\r\n```hs\r\nvalidator
  :: Validator (NonEmpty String) Int Int\r\nvalidator = failureIf even \"IsEven\"
  <> failureIf ((==0) . flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n\r\nUsages-\r\n```hs\r\n>>>
  runValidator validator 5\r\nSuccess 5\r\n>>> runValidator validator 4\r\nFailure
  (\"IsEven\" :| [])\r\n>>> runValidator validator 15\r\nFailure (\"IsDivisbleBy3\"
  :| [])\r\n>>> runValidator validator 6\r\nFailure (\"IsEven\" :| [])\r\n```\r\n\r\n###
  Combining multiple `Validator`s with `orElse`\r\n`orElse` also forms a semigroup,
  `</>` is aliased to `orElse`. Combining 2 validators with `</>` creates a new validator
  that is satisfied when *either of the given validators are satsified*. If all of
  them fail, the `Failure` values are **accumulated**. The **left-most** `Success`
  value is returned, remaining validators are not tried.\r\n\r\nThe following validator
  succeeds if the input is *either* **odd**, *or* **not divisble by 3**.\r\n```hs\r\nvalidator
  :: Validator (NonEmpty String) Int Int\r\nvalidator = failureIf even \"IsEven\"
  `orElse` failureIf ((==0) . flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n(OR)\r\n```hs\r\nvalidator
  :: Validator (NonEmpty String) Int Int\r\nvalidator = failureIf even \"IsEven\"
  </> failureIf ((==0) . flip mod 3) \"IsDivisbleBy3\"\r\n```\r\n\r\nUsages-\r\n```hs\r\n>>>
  runValidator validator 5\r\nSuccess 5\r\n>>> runValidator validator 4\r\nSuccess
  4\r\n>>> runValidator validator 15\r\nSuccess 15\r\n>>> runValidator validator 6\r\nFailure
  (\"IsEven\" :| [\"IsDivisbleBy3\"])\r\n```\r\n\r\n### Combining a foldable of `Validator`s\r\nYou
  can combine a foldable of `Validator`s using [`satisfyAll`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:satisfyAll)
  and [`satisfyAny`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:satisfyAny).
  `satisfyAll` folds using `andAlso`/`<>`, while `satisfyAny` folds using `orElse`/`</>`.\r\n\r\n##
  Ignoring errors\r\nAlthough, highly inadvisable and generally not useful in serious
  code, you may use alternative versions of `Validator` combinators that use `()`
  (unit) as the error type so you don't have to supply error values. For example,
  [`failureIf'`](https://hackage.haskell.org/package/valida/docs/Valida-Combinators.html#v:failureIf-39-)
  does not require an error value to be supplied. In case of failure, it simply yields
  `Failure ()`.\r\n```hs\r\n>>> runValidator (failureIf' even) 2\r\nFailure ()\r\n```\r\n\r\n##
  Re-assigning errors\r\nUsing the [`label`](https://hackage.haskell.org/package/valida/docs/Valida.html#v:label)/[`<?>`](https://hackage.haskell.org/package/valida/docs/Valida.html#v:-60--63--62-)
  function, you can override the errors `Validator`s yield.\r\n\r\nFor example, to
  re assign the error on a `Validator`-\r\n```hs\r\nlabel \"IsEven\" (failureIf even
  \"Foo\")\r\n```\r\n(OR)\r\n```hs\r\nfailureIf even \"Foo\" <?> \"IsEven\"\r\n```\r\n\r\nThis
  is useful with `Validator`s that use unit as their error type. You can create a
  `Validator`, skip assigning an error to it - and label a specific error when you
  need to later.\r\n```hs\r\nlabel \"IsEven\" (failureIf' even)\r\n```\r\n\r\nRe-labeled
  `Validator`s will yield the newly assigned error value when the validator is not
  satisfied.\r\n\r\n# Core Idea\r\nAll usecases of applicative validation, involving
  validation of product types, have one noticable thing in common. A well written
  validator typically looks something like-\r\n```hs\r\ndata InputForm = InpForm\r\n
  \ { inpName :: String\r\n  , inpAge  :: Int\r\n  , inpDate :: String\r\n  } deriving
  (Show)\r\n\r\nvalidateName :: String -> Validation [String] String\r\nvalidateAge
  \ :: Int -> Validation [String] Int\r\nvalidateDate :: String -> Validation [String]
  String\r\n\r\nvalidateForm :: InputForm -> Validation [String] InputForm\r\nvalidateForm
  form = InputForm\r\n  <$> validateName (inpName form)\r\n  <*> validateAge (inpAge
  form)\r\n  <*> validateDate (inpDate form)\r\n```\r\n\r\nThere's a few things unideal
  with this. The functions `validateName`, `validateAge`, and `validateDate` are defined
  elsewhere - but all of their definitions are really similar. Yet, without handy
  combinators - they can't be defined in a terse way. However, the bigger problem,
  is how all of the validators need to be fed their specific input by selecting the
  field from the product type. It could look better if the validator functions could
  somehow just be linked to a specific field selector in an elegant way. Something
  like `inpName -?> validateName`, perhaps.\r\n\r\nThis is the perfect usecase for
  contravariance. A validation function, is really just a [`Predicate`](https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-Functor-Contravariant.html#t:Predicate),
  the idiomatic example of a contravariant functor. However, it *also* needs to be
  an applicative functor to allow for the elegant composition. In fact, the type of
  a validation function needs to parameterize on 3 types - `inp -> Validation e a`\r\n*
  The input type\r\n* The error type\r\n* The output type\r\n\r\nThe output is covariant,
  but the input is contravariant. This is a [Profunctor](https://hackage.haskell.org/package/profunctors-5.6.2/docs/Data-Profunctor.html)!
  With a profunctorial validator, you now have the ability to *not only* map the output
  type, *but also* contramap the input type.\r\n\r\nGiven a validator that makes sure
  an int input is even, and returns said int input as output - `evenValidator`, you
  can *easily* use it in the applicative validation of a `(Int, Int)` using `lmap`-\r\n```hs\r\n(,)
  <$> lmap fst evenValidator <*> lmap snd evenValidator\r\n```\r\n\r\nContravariant
  input, mixed with covariant output - is the bread and butter of Valida! It allows
  for elegant encoding of well composable validators using only 2 simple concepts.\r\n\r\nThere's
  one more core idea that `Valida` uses though - [`fixV`](https://hackage.haskell.org/package/valida/docs/Valida.html#v:fixV).
  `fixV` \"fixes\" a validator's output, to be the same as its input. `fmap` lets
  you *map* over the output, `lmap` lets you *contramap* over the input, `fixV` allows
  `fmap` to now *map* over the input value, on the output position. `fixV` also allows
  you to regain the input value in the output position if a validator has been `fmap`ed
  on.\r\n\r\n# Comparison and Motivation\r\nThe concept of the `Validation` data type
  used in this package isn't new. It's also used in the following packages-\r\n* [either](https://hackage.haskell.org/package/either)\r\n*
  [validation](https://hackage.haskell.org/package/validation)\r\n* [validation-selective](https://hackage.haskell.org/package/validation-selective)\r\n\r\nValida
  aims to be a minimal in terms of dependencies, but batteries included in terms of
  API. It borrows many philosophies from `Data.Validation` (from `validation`) and
  `Validation` (from `validation-selective`), and aims to provide a convenient, minimal
  way to model the common usecases of them.\r\n\r\nThe `verify` function, combined
  with the built in `Validator` combinators, and the parsec-esque `Validator` aims
  to assist in easily modeling typical validation usecases without too much boilerplate,
  using applicative composition and contravariant input.\r\n\r\nIn essence, the validation
  style itself, is designed to look like [forma](https://hackage.haskell.org/package/forma).
  Though the actual types, and core concepts are significantly different.\r\n"
license-name: MIT
