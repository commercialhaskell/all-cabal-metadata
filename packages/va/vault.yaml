homepage: https://github.com/HeinrichApfelmus/vault
changelog-type: markdown
hash: 313d6d61435619ec25b492f8775729d8f0ab9496030898d30a4ba34a24ec742b
test-bench-deps: {}
maintainer: Heinrich Apfelmus <apfelmus at quantentunnel de>
synopsis: a persistent store for values of arbitrary types
changelog: |
  ## Changelog for the `vault` package

  **0.3.1.5**

  * Compatibility with GHC-9.0
       * Bump dependencies to allow `base >= 4.5 && < 4.16`
  * Depend on `semigroups` only with `GHC < 8.0`

  **0.3.1.4**

  * Compatibility with GHC-8.10
       * Bump dependencies to allow `base >= 4.5 && < 4.15`

  **0.3.1.3**

  * Bump dependencies to allow `hashable-1.3`.
  * Compatibility with GHC-8.8
       * Bump dependencies to allow `base >= 4.5 && < 4.14`

  **0.3.1.2**

  * Bump dependencies to allow `containers-0.6`.
  * Compatibility with GHC-8.6
       * Bump dependencies to allow `base >= 4.5 && < 4.13`.


  **0.3.1.1**

  * Rename source files to allow building the package with [Bazel](https://bazel.build).

  **0.3.1.0**

  * Compatibility with GHC-8.4:
       * Bump dependencies to allow `base >= 4.5 && < 4.12`.
       * Add `Semigroup` instances.

  **0.3.0.7**

  * Bump dependencies to allow `base >= 4.5 && < 4.11`.

  **0.3.0.6**

  * Bump dependencies to allow `base >= 4.5 && < 4.10`.

  **0.3.0.5**

  * Add support for GHC type roles extension, using the `RoleAnnotations` language pragma.

  **0.3.0.4**

  * Bump upper version bound for the `base` dependency.

  **0.3.0.3**

  * Bump upper version bound for the `base` dependency.

  **0.3.0.2**

  * Fix tarball.

  **0.3.0.1**

  * Use CPP to reduce code duplication.

  **0.3.0.0**

  * Split modules into Lazy and Strict variants, no default choice.
  * Add Hashable instance to `Data.Unique.Really` for all implementations.
basic-deps:
  base: '>=4.5 && <4.19'
  unordered-containers: '>=0.2.3.0 && <0.3'
  containers: '>=0.4 && <0.7'
  hashable: '>=1.1.2.5 && <1.5'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.3
- 0.2.0.4
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
- 0.3.0.5
- 0.3.0.6
- 0.3.0.7
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.1.4
- 0.3.1.5
author: Heinrich Apfelmus, Elliott Hird
latest: 0.3.1.5
description-type: markdown
description: |+
  [![Build Status](https://travis-ci.org/HeinrichApfelmus/vault.png)](https://travis-ci.org/HeinrichApfelmus/vault)


  *Vault* is a tiny library that provides a single data structure called *vault*.

  A *vault* is a type-safe, persistent storage for values of arbitrary types. Like `IORef`, I want to be able to store values of any type in it, but unlike `IORef`, I want the storage space to behave like a persistent, first-class data structure, as appropriate for a purely functional language.

  It is analogous to a bank vault, where you can access different bank boxes with different keys; hence the name.

  In other words, a vault is an abstract data type with the following basic signature

      data Key a
      data Vault

      newKey :: IO (Key a)
      empty  :: Vault
      lookup :: Key a -> Vault -> Maybe a
      insert :: Key a -> a -> Vault -> Vault
      delete :: Key a -> Vault -> Vault

  A few common functions for finite maps, like `adjust` and `union`, are provided as well.


  This library was created thanks to the feedback on my blog post [Vault - a persistent store for values of arbitrary types][1].

    [1]: http://apfelmus.nfshost.com/blog/2011/09/04-vault.html


  Installation
  ============
  The whole thing is [available on hackage][hackage], so you just have to type

      cabal update
      cabal install vault

    [hackage]: http://hackage.haskell.org/package/vault

  Feedback
  ========
  Use the [issue tracker][2] or send an [email to the maintainer][3].

    [2]: https://github.com/HeinrichApfelmus/vault/issues
    [3]: mailto:apfelmus@quantentunnel.de




license-name: BSD-3-Clause
