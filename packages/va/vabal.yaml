all-versions:
- 2.0.0
author: Francesco Magliocca
basic-deps:
  Cabal: '>=2.2 && <2.5'
  base: '>=4.11 && <4.13'
  bytestring: '>=0.10.8 && <0.11'
  cassava: '>=0.5.1 && <0.6'
  containers: '>=0.5.11 && <0.7'
  directory: '>=1.3.1 && <1.4'
  filepath: '>=1.4.2 && <1.5'
  http-client: '>=0.5.14 && <0.6'
  http-client-tls: '>=0.3.5 && <0.4'
  http-types: '>=0.12.2 && <0.13'
  optparse-applicative: '>=0.14.3 && <0.15'
  process: '>=1.6.3 && <1.7'
  vabal-lib: '>=2.0.0 && <2.1.0'
changelog: "# Revision history for vabal\n\n## 2.0.0 -- 2019-01-10\n\n* The library
  has been separated in a different package, so that it can be reused\n* Add the vabal
  show command.\n* Now vabal prints the path to ghc even when using the ghc in PATH,\n
  \ so that xargs won't be confused by empty input even when vabal hasn't failed.\n*
  When deciding which ghc version to use, the Cabal constraints\n  found in the setup-depends
  section of the .cabal file are taken into account, too.\n\n## 1.2.0 -- 2018-12-27\n\n*
  Correctly deal with ghcup empty list of installed ghcs.\n* Add the ghc in PATH to
  the list of installed ghcs\n\n## 1.1.0 -- 2018-12-27\n\n* Make the vabal-internal
  sub-lib a public library, it plays better with hackage.\n* Redirect ghcup output
  to stderr, because otherwise it pollutes vabal output that gets forwarded to ghcup.\n
  \n## 1.0.0 -- 2018-12-26\n\n* First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "# Vabal - The Cabal Companion\n\n\n What is it?\n------------\n\nHave
  you ever wanted to try the new bleeding-edge GHC release, but also need older GHCs
  for your projects or programs (XMonad!)?\n\nHave you ever upgraded GHC just to find
  all your haskell projects broken?\n\nHave you ever dreamt about treating `base`
  as all other packages (i.e. change its version without much thought)?\n\n`vabal`
  tries to determine a `ghc` version that complies with the `base` package constraints
  (and\nthe `Cabal` package constraints in the setup-depends section, if any) found
  in the `.cabal` file.\nThen it uses [ghcup](https://github.com/haskell/ghcup) to
  fetch the compiler (if you don't have it yet)\nand prints to stdout the options
  to pass to `cabal` to use the fetched compiler.\n\nBy default `vabal` tries to use
  compilers already available on the system\nand downloads them only when it can't
  do otherwise (or fails if you use the `--no-install` flag).\n\nThis program tries
  to solve these issues in the easiest possible way.\nThe GHC compiler downloading
  is managed by [ghcup](https://github.com/haskell/ghcup).\nNo need to manually manage
  different ghc versions by hand!\n\n`vabal` tries to be as little intrusive as possible,
  leverages `cabal`'s capabilities of working with different GHC versions,\nand does
  *not* force you in its paradigm.\nThe only change to the global system state `vabal`
  does is to tell `ghcup` to download a compiler,\nthis behavior can be disabled with
  `--no-install` flag, so you are always in charge of what's happening!\n\n\n Requirements\n--------------\n\nIn
  order to install `vabal` you need:\n- `ghc` >= 8.4.1,\n\n\nYou can install `vabal`
  directly from Hackage by running:\n> $ cabal v2-install vabal\n\n(Or `cabal new-install`
  depending on the version of your `cabal`).\n\nOr you can install it from sources,
  by running:\n> $ git clone https://github.com/Franciman/vabal.git\n> \n> $ cd vabal\n>
  \n> $ cabal v2-install vabal\n\n(Or `cabal new-install`, depending on the version
  of your `cabal`)\n\nRemember to put `$HOME/.cabal/bin` in your `PATH`.\n\n\n`vabal`
  needs to run on a `POSIX` compliant system, because it uses `xargs` and `command`
  utilities,\nfurthermore, these programs are required to be in `PATH`:\n- ghcup,\n-
  cabal >= 2.4.0.0\n\n`cabal >= 2.4.0.0` is a requirement of `vabal configure`.\n\n`vabal`
  by itself can be used in combination with older `cabal`, too.\nSee the *How to use
  vabal: full story* paragraph for details.\n\n\n Quick start\n--------------\n\nFor
  starters run:\n> $ vabal update\n\nThis will download updated infos about released
  `ghc`s and the versions of `base` they ship,\nthe info is stored [here](https://github.com/Franciman/vabal-ghc-metadata/blob/master/ghc-metadata.csv),\nand
  will put them in `$HOME/.vabal/ghc-metadata.csv`.\nYou may want to run this from
  time to time, when new `ghc`s get released, so that vabal will know about them.\n\nThen
  cd into your project directory and run:\n> $ vabal configure\n\nThis will analyze
  the cabal file in the directory and extract constraints imposed on `base`,\nthen
  it will get a compatible version of `ghc` using `ghcup` (possibly downloading it)\nand
  will finally run `cabal v2-configure` to configure the project with the obtained
  version of `ghc`.\n\nIf everything went fine, you now have your project configured
  to use a `ghc` compatible\nwith the constraints imposed on `base` (and the `Cabal`
  package constraints in the setup-depends section, if any),\nyou can now build your
  project as you're used to:\n> $ cabal v2-build\n\nYou can also enable and disable
  flags for your package, like this:\n> $ vabal configure --flags=\"flag1 -flagToDisable\"\n\nAnd
  if you want to pass other flags directly to `cabal v2-configure`,\nyou can do it
  after a `--`, e.g.:\n> $ vabal configure -- --enable-tests --enable-shared\n\n\nHow
  to use vabal: full story\n----------------------------\n\n`vabal` tries to leverage
  the power of composability of shell commands,\nyou can use it in combination with
  any `cabal` subcommand.\nFor example, if you don't want vabal to also perform the
  `cabal v2-configure` step,\nbut would like to use it in combination with `cabal
  v2-build`, you can run (*):\n> $ vabal --flags=\"your -flags\" | xargs -r cabal
  v2-build\n\n(If you are on `OS X`, you don't need to specify the -r option for xargs)\n\nxargs
  invokes cabal with the arguments and options specified *plus* options read from
  stdin.\nRead the *Remark* for info about the `-r` option.\n\n> In Haskell jargon,
  you can see this as partially applying the `cabal` \"function\" first,\n> and then
  providing it the remaining arguments that `vabal` emitted.\n\nWhat vabal actually
  does is analyze the cabal file, obtain a suitable `ghc`, using `ghcup`, and then
  print to stdout\noptions to pass to cabal (already properly escaped to be used with
  xargs).\nIt follows the Unix philosophy and its power comes from composition with
  other programs.\n\nIn fact, `vabal configure` is just a shortcut for:\n> vabal |
  xargs -r cabal v2-configure\n\nIn this mode you can compose `vabal` with other `cabal`
  commands too, also with old-style `cabal build`, `cabal configure`, etc..\n\nThere
  is one last command available, it is `vabal show`, it does the same things `vabal`
  does,\nbut instead of printing to stdout the options to pass to cabal, it just prints
  the version of the obtained `ghc`.\n\n(*) Remark: \n> The `-r` flag you see is only
  available in the GNU version of `xargs`. It makes xargs fail if its input is empty,\n>
  i.e. when vabal fails. This is necessary or cabal will run as well without arguments
  from vabal.\n> If you use the BSD version of `xargs`, then this flag is not necessary
  (and is neither available),\n> because this is the default behavior.\n> Another
  possibility is to use the `-p` flag for `xargs` which is available on all `POSIX`
  systems,\n> it will show the command it is about to run and ask the user if he wants
  to proceed. In this way,\n> if vabal failed, he can stop the execution.\n> \n> Consult
  your system's manpage for `xargs` for further info.\n\n\n Gotchas\n----------\n\nHere
  are some known gotchas that affect `vabal`:\n- `vabal` trusts the constraints imposed
  on `base` (and `Cabal` constraints found in the setup-depends section, if any)\nthat
  it finds in the cabal file, therefore it only finds a ghc version that makes it
  possible to respect the constraints,\nbut it is not guaranteed that the build will
  be successful. (Generally one should always write correct constraints)\n\n\n Full
  list of options\n---------------------\n\n`vabal` and `vabal configure` accept these
  options:\n\n```\n  -g,--with-ghc-version VER\n                           Explicitly
  tell which version of ghc you want to use\n                           for the project.
  (Incompatible with option\n                           --with-base-version)\n                           \n
  \ -b,--with-base-version VER\n                           Specify the version of
  base package you want to use.\n                           It is going to be checked
  against base constraints in\n                           the cabal file for validity.
  (Incompatible with\n                           option --with-ghc-version)\n                           \n
  \ --flags FLAGS            String containing a list of space separated flags to\n
  \                          be used to configure the project (You can enable or\n
  \                          disable a flag by adding a + or - in front of the\n                           flag
  name. When none is specified, the flag is\n                           enabled).
  Flag assignment determined here is also\n                           emitted to stdout
  as a cabal option\n                           (or passed to \"cabal v2-configure\"
  in the case of\n                           \"vabal configure\")\n                           \n
  \ --cabal-file FILE        Explicitly tell which cabal file to use. This option\n
  \                          also emitted to stdout as cabal option (or passed to\n
  \                          `cabal v2-configure` in the case of \"vabal configure\")\n
  \ \n  --no-install             If GHC needs to be downloaded, fail, instead.\n  \n
  \ --always-newest          Always choose newest GHC possible, don't prefer\n                           already
  installed GHCs\n```\n\nwith `vabal configure` you can also pass arguments directly
  to cabal,\njust specify them after `--`, e.g.\n> vabal configure -- --cabal-option
  --enable-tests --haddock-css=PATH\n\n\n How to uninstall it\n--------------------\n\nIf
  you want to uninstall `vabal` you can follow the same steps\nthat are necessary
  to uninstall any executable installed with `cabal v2-install`\n(i.e. remove the
  symlink in \"$HOME/.cabal/bin\").\n\nFurthermore, you also need to remove the `$HOME/.vabal`
  directory\ncontaining metadata used by `vabal`.\n\n\n Contributing\n--------------\n\nPull
  Requests and suggestions are welcome.\n\n\n Issues\n--------\n\nYou can signal issues
  [here](https://github.com/Franciman/vabal/issues)\n\n\n Contributors\n--------------\n\nFrancesco
  Ariis\n\nFrancesco Gazzetta\n\nFrancesco Magliocca\n\nLorenzo Tabacchini\n\nMarco
  Umbrello\n\n"
description-type: markdown
hash: 02b13ef076bc099ea9913da5798885cd8b69fb1504f9d79381bf7a23f40e3028
homepage: https://github.com/vabal/vabal
latest: 2.0.0
license-name: GPL-3.0-only
maintainer: franciman12@gmail.com
synopsis: the cabal companion
test-bench-deps:
  base: '>=0'
  process: '>=0'
