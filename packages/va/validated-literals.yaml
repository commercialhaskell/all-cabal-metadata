all-versions:
- 0.3.0
- 0.3.1
author: Merijn Verstraaten
basic-deps:
  base: '>=4.9 && <4.19'
  template-haskell: '>=2.11 && <2.21'
  th-compat: ^>=0.1.3
changelog: |
  0.3.1 [2021.12.02]
  ------------------
  * Switch to using th-compat to support GHC 9.0 and 9.2

  0.3.0 [2019.01.10]
  ------------------
  * New implementation, forces use of Lift for the result, removes the unsafe
    typeclass functions, and adds the option to add a custom error message.

  0.2.0.1 [2018.09.10]
  --------------------
  * Turn examples into buildable tests, add readme, fix typos in documentation.
changelog-type: markdown
description: |
  validated-literals: Compile-time checking for partial smart-constructors
  ================================================================
  [![BSD3](https://img.shields.io/badge/License-BSD-blue.svg)](https://en.wikipedia.org/wiki/BSD_License)
  [![Hackage](https://img.shields.io/hackage/v/validated-literals.svg)](https://hackage.haskell.org/package/validated-literals)
  [![hackage-ci](https://matrix.hackage.haskell.org/api/v2/packages/validated-literals/badge)](https://matrix.hackage.haskell.org/#/package/validated-literals)
  [![Build Status](https://travis-ci.org/merijn/validated-literals.svg)](https://travis-ci.org/merijn/validated-literals)

  To disallow invalid input it is common to define (new)types with hidden data
  constructors. Forcing the user to go through a smart-constructor that enforces
  invariants and returns `Maybe ResultType`, preventing the construction of data
  with invalid values.

  However, it is __also__ common to want to include literal values of such types
  in source text. Things of textual literals for HTML, HTTP, etc. In such cases
  smart-constructors force us to handle potential conversion failures at runtime,
  or abusing functions like `fromJust` to break away all the safety
  smart-constructors provide. All this despite the fact that we can statically
  know at compile time that the conversion will always succeed or always fails.

  This package provides a typeclasses for using TH to validate the correctness of
  provided literals at compile. This lets you define, e.g., `newtype Even = Even
  Integer` and write:

  ```
  x :: Even
  x = $$(valid 38)
  ```

  This will check, at compile time, that the provided `Integer` is, in fact, even
  and unwrap it from `Maybe`, avoiding the runtime check.
description-type: markdown
hash: 0e873c01ad043217a9755a2c6231f61d2844d1a6870be8e9b41553225ade0e96
homepage: https://github.com/merijn/validated-literals
latest: 0.3.1
license-name: BSD-3-Clause
maintainer: Merijn Verstraaten <merijn@inconsistent.nl>
synopsis: Compile-time checking for partial smart-constructors
test-bench-deps:
  base: '>=0'
  bytestring: '>=0.10 && <0.13'
  deepseq: '>=1.4 && <1.5'
  tasty: '>=0.11 && <1.5'
  tasty-hunit: '>=0.9 && <0.11'
  tasty-travis: '>=0.2 && <0.3'
  template-haskell: '>=0'
  th-compat: '>=0'
  validated-literals: '>=0'
