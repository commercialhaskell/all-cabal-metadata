homepage: https://github.com/haskell-effectful/typed-process-effectful#readme
changelog-type: markdown
hash: a49b9b4ffb2bb1be80ad6462322ea5bb4b3819a8ba3eac2a6ca58bd0da21c92e
test-bench-deps:
  base: -any
  typed-process-effectful: -any
  tasty-hunit: '>=0.10 && <0.11'
  effectful: -any
  tasty: '>=1.4 && <1.5'
  effectful-core: -any
maintainer: hackage+typed-process-effectful@with-h.at
synopsis: A binding of the typed-process library for the effectful effect system.
changelog: |
  # CHANGELOG

  ## v1.0.0.1 (2023-10-07)
  * Bumped upper bounds for effectful and effectful-core dependency.

  ## v1.0.0.0 (2023-08-23)
  * Initial release
basic-deps:
  bytestring: <0.12
  base: '>=4.14 && <5'
  typed-process: '>=0.2.5 && <0.3'
  effectful: '>=2.0 && <2.4'
  effectful-core: '>=2.0 && <2.4'
all-versions:
- 1.0.0.0
- 1.0.0.1
author: Dominik Peteler
latest: 1.0.0.1
description-type: markdown
description: |
  # typed-process-effectful

  ## Description

  An alternative `Process` effect for the [`effectful`][effectful] ecosystem.
  While to the `Process` effect shipped with the `effectful` library is based on
  the [`process`][process] package this implementation relies on
  [`typed-process`][typed-process] instead.

  ## How to use

  The functions exposed by the `Effectful.Process.Typed` module are those from
  [`System.Process.Typed`](https://hackage.haskell.org/package/typed-process-0.2.6.1/docs/System-Process-Typed.html)
  with the notable difference that they have a `TypedProcess :> es` constraint.
  Use `runTypedProcess` to handle the effect and eliminate the constraint.

  ```haskell
  import Effectful.Monad
  import Effectful.Process.Typed

  main :: IO ()
  main = runEff . runTypedProcess $ true

  true :: TypedProcess :> es => Eff es ()
  true = Effectful.Process.Typed.runProcess_ $ shell "true"
  ```

  [effectful]: https://github.com/haskell-effectful/effectful
  [process]: https://hackage.haskell.org/package/process
  [typed-process]: https://hackage.haskell.org/package/typed-process
license-name: BSD-3-Clause
