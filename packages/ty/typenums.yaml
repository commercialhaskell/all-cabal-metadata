homepage: https://github.com/adituv/typenums#readme
changelog-type: markdown
hash: 1e7ed4d18db4a5d485716978bb588863fa1ff40afe7098e3b304f0f2b4b3687a
test-bench-deps:
  base: '>=4.10 && <5.0'
  hspec: '>=2.0'
  typenums: -any
  QuickCheck: '>=2.0'
maintainer: aditu.venyhandottir@gmail.com
synopsis: Type level numbers using existing Nat functionality
changelog: "Change log\n==========\n\ntypenums uses [PVP Versioning][1].\nThe change
  log is available [on GitHub][2].\n\n0.1.4\n=====\n* Added rational simplification\n*
  Added more arithmetic functionality:\n  * Reciprocals\n  * Division\n  * Integer
  division and remainder (DivMod, QuotRem...)\n  * Absolute value\n  * GCD, LCM\n
  \ * Exponentiation\n  * Rounding (Floor, Ceiling, Truncate)\n  * Integer logarithm\n*
  Rewrote arithmetic tests to compare types directly\n* Updated arithmetic operations
  to simplify rationals\n* (==?) now considers \"logical equality\" for numbers \n
  \ rather than exact type representational equality.\n\n0.1.3\n=====\n* Dropped support
  for GHC 8.2\n* Added support for GHCs 8.8+\n* ([#4](https://github.com/adituv/typenums/issues/4))\n
  \ Added more cases for (<=?) type level comparison\n* Fixed incorrect behaviour
  with (<=?) type level comparison\n  * Comparison of two rationals was previously
  incorrect\n* Added tests for comparison\n\n0.1.2.1\n=======\n* Fix build failure
  on GHC 8.6 by adding conditional NoStarIsType langauge\npragma\n\n0.1.2\n=====\n*
  ([#2](https://github.com/adituv/typenums/issues/2))\n  Refactored type-level arithmetic
  so that the type families are exposed from\n  an Internal module.\n\n0.1.1.1\n=======\n*
  Add UndecidableInstances language extension to Data.TypeNums.Rats.  This\n  fixes
  a compilation error with GHC HEAD.\n\n0.1.1\n=====\n* ([#1](https://github.com/adituv/typenums/issues/1))\n
  \ Added existentially-quantified datatypes SomeInt and SomeRat to handle\n  type-level
  Ints and Rats that are not statically known.  Added functions\n  someIntVal and
  someRatVal to construct these from an Integer/Rational value.\n\n0.1.0.0\n=======\n*
  Initial Haddock release\n* Defined type-level integers and rationals\n* Defined
  polykinded arithmetic over nats, ints and rats\n* Defined polykinded comparison
  over nats, ints and rats\n* Added Data.TypeLits module\n\n[1]: https://pvp.haskell.org\n[2]:
  https://github.com/adituv/typenums/releases\n\n"
basic-deps:
  base: '>=4.10 && <5.0'
all-versions:
- 0.1.3
- 0.1.4
author: AdituV
latest: 0.1.4
description-type: markdown
description: |
  # typenums

  [![Hackage](https://img.shields.io/hackage/v/typenums.svg)](https://hackage.haskell.org/package/typenums)
  ![example workflow](https://github.com/adituv/typenums/actions/workflows/haskell-ci.yml/badge.svg)
  [![BSD3 license](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/adituv/typenums/blob/master/LICENSE)

  Type level numbers using existing Nat functionality. Uses kind-polymorphic
  typeclasses and type families to facilitate more general code compatible with
  existing code using type-level Naturals.

  ## Usage
  Import either Data.TypeNums or Data.TypeLits instead of GHC.TypeLits.  Some
  definitions conflict with GHC.TypeLits, so if you really must import it, use
  an explicit import list.

  This library is intended to be used in a kind-polymorphic way, such that
  a type-level integer parameter can be written as a natural, and a rational
  can be written as either of the other two.  As an example:

  ```haskell
  {-# LANGUAGE PolyKinds #-}

  data SomeType (n :: k) = SomeType

  useSomeType :: KnownInt n => SomeType n -> _
  useSomeType = -- ...
  ```

  ## Syntax
  * Positive integers are written as natural numbers, as before.  Optionally
    they can also be written as `Pos n`.
  * Negative integers are written as `Neg n`.
  * Ratios are written as `n :% d`, where `n` can be a natural number, `Pos n`,
    or `Neg n`, and `d` is a natural number.

  Addition, subtraction and multiplication at type level are all given as infix
  operators with standard notation, and are compatible with any combination of
  the above types.  Equality and comparison constraints are likewise available
  for any combination of the above types.

  N.B. The equality constraint conflicts with that in Data.Type.Equality.  The
  (==) operator from Data.Type.Equality is re-exported as (==?) from both
  Data.TypeNums and Data.TypeLits.
license-name: BSD-3-Clause
