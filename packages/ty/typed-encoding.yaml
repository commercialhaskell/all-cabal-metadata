all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.2.1
- 0.5.2.2
- 0.5.2.3
author: Robert Peszek
basic-deps:
  base: '>=4.10 && <5'
  base64-bytestring: '>=1.0 && <1.3'
  bytestring: '>=0.10 && <0.13'
  symbols: '>=0.3 && <0.3.1'
  text: '>=1.2 && <3'
changelog: "# Changelog for typed-encoding\n\n## Anticipated future breaking changes\n\n-
  `Data.TypedEncoding.Common.Class.IsStringR` expected to be be changed / replaced\n-
  (post 0.5) \"enc-B64\" could be moved to a different package (more distant goal)\n\n\n##
  0.5.2.3\n- compile with ghc 9.4.7 / lts-21.14\n## 0.5.2.2\n\n- `instance UnexpectedDecodeErr
  Identity` does not use `fail` to allow for base >= 4.9 compilation\n## 0.5.2.1\n\n-
  documentation improvements\n## 0.5.2.0\n\n- Fixed up IsSuperset type family improving
  transitivity\n- added `_mkEncoding1` `runEncoding1'` functions that show equivalence
  of `Encoding` to one level encoding\n- added convenience one level encoding conversion
  functions\n- base64-bytestring deps relaxed\n\n## 0.5.1.0\n\n- \"r-B64\" added\n-
  @implVerifyR@ convenience function added to 'Data.TypedEncoding.Instances.Support.Encode'\n\n##
  0.5.0\n\n### Changes on a high level\n\n- Most of the changes should not create
  a big impact on upgrading.  Many definitions were moved to a different module but
  these modules are and had been re-exported by either `Data.TypedEncoding` or\n`Data.TypedEncoding.Instances.Support`\n-
  Some functionality has been moved to Examples or removed, notably:\n  - \"do-\"
  encodings\n  - `SomeEnc`, `SomeAnnotation`\n  - `HasA` typeclass\n- Some functions
  have been renamed or type signatures adjusted to follow consistent naming conventions.
  \ In most cases the changes have been made on previously deprecated definitions.\n\n\n###
  \ Details \n\n- Data.TypedEncoding.Instances.Do.Sample moved to Examples\n- Examples.TypedEncoding
  folder re-org\n- `Data.TypedEncoding.Instances.Support.Helpers` removed `foldEncStr`,
  `foldCheckedEncStr`\n   renamed  `splitSomePayload` to `splitCheckedPayload`\n-
  `HasA` typeclass moved to Examples\n- removed experimental `Data.TypedEncoding.Instances.Restriction.Bool`
  in favor of combinator helpers\n  `Data.TypedEncoding.Instances.Support.Bool`\n-
  `Data.TypedEncoding.Common.Types.SomeEnc` moved to Examples  \n- `Data.TypedEncoding.Common.Types.SomeAnnotation`
  moved to Examples\n- camel-case of some property names\n- Text instances for \"Base64\"
  moved to `Data.TypedEncoding.Instances.Enc.Warn.Base64`\n- Removed instanced for
  `\"r-()\"` encoding\n- Functions from `Data.TypedEncoding.Instances.Support.Common`
  moved to `Data.TypedEncoding.Instances.Support.Decode`\n- Signature changed in previously
  deprecated function `runDecoding` to match `mn ~ alg` convention and deprecation
  removed\n- Signature changed in previously deprecated function `runDecodings` to
  match `mns ~ algs` convention and deprecation removed\n-  Signature changed in previously
  deprecated function `runValidation` to match `mns ~ algs` convention and deprecation
  removed\n- `runValidationChecks` renamed to `runValidationChecks'` to match /typed-encoding/
  naming conventions. \n- removed deprecated `propEncodesInto'`\n- moved `Append`
  type family from from `Data.TypedEncoding.Common.Class.Util` to `Data.TypedEncoding.Common.Util.TypeLits`\n-
  `Data.TypedEncoding.Common.Class.Util` renamed to `Data.TypedEncoding.Common.Class.Common`\n-
  function `extractEither` removed from `Data.TypedEncoding.Internal.Util`\n- function
  `withSomeSymbol` moved to `Data.TypedEncoding.Common.Util.TypeLits`\n- function
  `proxyCons` moved to `Data.TypedEncoding.Common.Util.TypeLits`\n\n- More general
  instances for some encodings in `Data.TypedEncoding.Instances.Restriction.Misc`\n-
  `mkDecoding` deprecated in favor of `_mkDecoding` to follow the naming convention\n-
  `mkValidation` deprecated in favor of `_mkValidation` to follow the naming convention\n-
  `validR'` function renamed to `_validR`\n\n## 0.4.2\n\n- `Data.TypedEncoding.Instances.Support.Bool`
  combinators (\"r-bool\" remains experimental)\n- Correction in `r-ban` error message
  typo (\"'G' not bounded by 'F'\")\n- `_implEncFromString` creates \"r-\" encoding
  from `FromEncString` definition\n- property changes: `propEncodesIntoCheck` added;
  `propSuperset'`,  `propEncodesInto'` deprecated\n\n## 0.4.1\n\n- Code Changes. Backward
  compatible\n   - changed order in `IsSuperset` definition to speed up compilation
  of of more common cases (there is a small chance that it impacts GHC error messages)\n
  \  - Faster \"r-UTF8\", possible issue is changed error message in case ByteString
  is invalid.\n   - Deprecated 'validFromEnc' for its confusing name\n   - Deprecated
  `runDecodings` in favor of consistently named `runDecodings'`\n   - Deprecated `runDecoding`
  in favor of consistently named `runDecoding'`\n   - Deprecated `runValidation` in
  favor of consistently named `runValidation'`\n\n- Documentation / code comment fixes
  and improvements.\n\n- New functionality `validRFromEnc'` replacing 'validFromEnc'
  confusing name\n  - `propCompEncoding` property\n  - `propSupersetCheck` property\n
  \ - `propSafeDecoding'` properties\n  - `propSafeValidatedDecoding` properties\n
  \ - `IsEnc` type family and `Encoding` constraint\n  - `getUncheckedPayload` function\n
  \ - `pack` and `unpack` overloads in `Data.TypedEncoding.Conv.ByteString.Char8`\n\n-
  Fixes\n  - corrected `propEncodesInto'` property test specification\n\n\n## 0.4\n\n-
  Breaking \n  - IsSupersetOpen type family type arguments have changed\n\n- Potentially
  Breaking  \n  (These changes should be backward compatible in almost all cases):\n
  \ - Stronger (more precise) constraints on all functions `Data.TypedEncoding.Conv`\n
  \ - Compilation errors emitted from `IsSuperset` are different\n  - \"r-ban\" now
  only allows ASCII chars in annotation name, errors-out otherwise\n   \n- New\n  -
  `\"r-CHAR8\"` phantom restriction and `Superset` modified for \"r-CHAR8\"\n  - `\"r-UNICODE.D76\"`
  /text/ character set restriction and `Superset` modifications\n  - `Superset` constraint
  added back (different than in 0.2)\n  - properties for `Superset` testing\n  - `\"r-ByteRep\"`
  annotation used as a marker of low level use of `Char` instead of `Word8` for `ByteString`
  work.\n\n- Improved:\n  - `Data.TypedEncoding.Conv` `Text`, `String` and `ByteString`
  conversions are now more type safe and less error prone.\n    Conversion functions
  are reversible, A to B to C diagrams commute.\n\n- Fixes:\n  - `Data.TypedEncoding.Instances.Restriction.BoundedAlphaNums`
  `\"r-ban\"` now verifies `Superset \"r-ASCII\"`\n  \n## 0.3.0.2\n\n- Added documentation
  to `Data.TypedEncoding.Conv` outlining current limitations, challenges of conversions.\n-
  Improved readme\n\n\n## 0.3.0.1\n\n- Documentation changes / corrections\n- New
  _doctest_ tests\n- Haddock coverage and @since flags\n\n## 0.3\n\n- Breaking: Numerous
  changes on the implementation side, new version should be largely compatible on
  the call site except\n    for small differences in constraints and order for type
  variables (if `-XTypeApplications` is used).\n    See [v3 migration guide](https://github.com/rpeszek/typed-encoding/blob/master/doc/v3ConversionGuide.md).\n
  \ - `EncodeFAll`, `DecodeFAll`, `RecreateFAll`, `EncodeF`, `DecodeF`, `RecreateF`
  replaced with\n     `EncodeAll`, `DecodeAll`, `ValidateAll`, `Encode`, `Decode`,
  `Validate`.\n  - functions used to create encoding instances or encoding combinators
  (e.g. `implEncodeP`) are now more precisely typed\n  - `Displ String` instance (used
  in examples, has been made consistent with Text and ByteString)\n  - Modules under
  `Data.TypedEncoding.Combinators` merged into `Data.TypedEncoding.Instances`.\n  -
  Modules under `Data.TypedEncoding.Internal` have been reorganized and moved outside
  of `Internal`. Various  changes that make the library easier to navigate. \n    for
  better navigation and discovery.\n  - some previously exported combinators (e.g.
  `implTranF`) have moved to `Data.TypedEncoding.Instances.Support.Unsafe` \n  - `ToEncString`,
  `FromEncString` have more type variables and function name but backward compatible
  functions\n    have been provided.  \n  - `Superset` typeclass removed, replaced
  with `IsSuperset` type family.\n  - Minor changes in `forall` variable order in
  combinators for `\"r-bool:\"` encodings.\n  - `Encoder` type removed, replaced by
  `Encodings`.\n  - `checkWithValidationsEnc` combinator renamed to `check`\n  - (Considered
  private) `MkCheckedEnc` constructor became `UnsafeMkCheckedEnc`\n  - (Considered
  private) `MkEnc` constructor became `UnsafeMkEnc`\n \n- new functionality\n  - new
  types and typeclasses are based on both encoding name and algorithm name allowing\n
  \   typeclass definitions for open encodings like `\"r-ban:\"` that can contain
  arbitrary symbol literals. \n  - new set of combinators grouped into `_` (compiler
  decided algorithm), `'` (program specifies algorithm), and\n    `algorithm name
  ~ encoding name` categories  \n  - `above` combinator subsumes partial encoding
  / decoding combinators \n  - `EncodingSuperset` class added\n\n\n## 0.2.2 \n\n-
  Next version (0.3) will have number of breaking changes, some rethinking and a lot
  of cleanup,\n  this version preps for some of that (see section above)\n- Fixes\n
  \ - Conversions type safety issues\n  - new and corrected approach to conversions
  (all old conversion functions have been deprecated)\n  - corrected documentation
  in `Data.TypedEncoding.Combinators.Restriction.BoundedAlphaNums`\n- new functionality:\n
  \ - `Enc` versions for `pack`/ `unpack` for `Text` and `ByteString`. \n  - `Enc`
  versions of `decodeUtf8` / `encodeUtf8`\n  - new and corrected approach to conversions
  (all old conversion functions have been deprecated)\n  - `IsSuperset` type family
  with basic combinators deprecates `Superset` typeclass.\n  - more modules exported
  from `Data.TypedEncoding.Instances.Support` for instance and combinator creation\n
  \ - more utility type families `Data.TypedEncoding.Internal.Util.TypeLits` \n  -
  more utility combinators for creating encoding instances and combinators.\n  - String
  instance added in number of places, including for \"r-ASCII\" encoding\n  - few
  more support convenience functions.\n- deprecation warnings (see above) \n\n## 0.2.1.0\n\n-
  new functionality:\n  - bounded alpha-numeric restriction encodings (`r-ban`)\n
  \ - boolean algebra of encodings \n- minor improvements\n  - dropped IsString constraint
  from instances in `Data.TypedEncoding.Instances.Restriction.Common`\n  - added forall
  annotation to encodeAll and decodeAll\n\n## 0.2.0.0\n\n- breaking:\n  - Data.TypedEncoding.Instances
  modules reorganized\n  - Data.TypedEncoding.Internal.Class modules reorganized\n
  \ - Data.TypedEncoding.Internal.Utils module renamed\n  - Several TypeAnnotations
  friendly changes:\n      * Removed polymorphic kinds in most places\n      * Changed
  typeclass name from `Subset` to `Superset`\n      * flipped type parameters on FlattenAs,
  HasA typeclass functions\n      * Removed Proxy parameters from several methods
  (few methods have a '_' backward compatible version which still has them)\n- new
  functionality:\n  - `ToEncString` - class allowing to convert types to `Enc` encoded
  strings\n  - `FromEncString` - class reverses ToEncString\n  - `CheckedEnc` untyped
  version of `Enc` containing valid encoding\n  - `SomeEnc` existentially quantified
  version of `Enc` \n  - `UncheckedEnc` for working with not validated encoding\n
  \ - `RecreateExUnkStep` constructor added to RecreateEx\n  -  utility `IsStringR`
  - reverse to `IsString` class\n  -  utility `SymbolList` class\n- docs: \n  - ToEncString
  example\n\n\n## 0.1.0.0\n\n- initial release\n \n"
changelog-type: markdown
description: "# typed-encoding\nType level annotations, string transformations, and
  other goodies that make programming strings safer.\n\n## Motivation\nI have recently
  spent a lot of time troubleshooting various `Base64`, `quoted-printable`, and `UTF-8`
  encoding issues.  \nI decided to write a library that will help avoiding issues
  like these.\n\nThis library allows to specify and work with types like\n\n```Haskell\n--
  some data encoded in base 64\nmydata :: Enc '[\"enc-B64\"] c ByteString\n\n-- some
  text (utf8) data encoded in base 64 \nmyData :: Enc '[\"enc-B64\", \"r-UTF8\"] c
  ByteString\n```\n\nIt allows to define precise string content annotations like:\n\n```Haskell\nipaddr
  :: Enc '[\"r-IpV4\"] c Text\n```\n\nand provides ways for \n\n- encoding\n- decoding\n-
  recreation (encoding validation)\n- type conversions\n- converting types to encoded
  strings\n- typesafe conversion of encoded strings to types\n\nPartial and dangerous
  things like `decodeUtf8` are no longer dangerous, \n`ByteString` `Text` conversions
  become fully reversible.  Life is good!\n\n... but this approach seems to be a bit
  more...\n\n```Haskell\n-- upper cased text encoded as base64\nexample :: Enc '[\"enc-B64\",
  \"do-UPPER\"] () T.Text\nexample = encodeAll . toEncoding () $ \"some text goes
  here\"\n```\n\nIt becomes a type directed, declarative approach to string transformations.\n\nTransformations
  can be\n\n- used with parameters\n- applied or undone partially (if encoding is
  reversible)\n\nOne of more interesting uses of this library are encoding restrictions
  included in this library.   \nExample are (arbitrary) bounded alpha-numeric (`\"r-ban\"`)
  restrictions.\n\n```Haskell\n-- allow only properly formatted phone numbers\n\ntype
  PhoneSymbol = \"r-ban:999-999-9999\"\nphone :: Enc '[PhoneSymbol] () T.Text\nphone
  = ... \n```\n\nThe author often uses _typed-encoding_ with _Servant_ (`HttpApiData`
  instances are not included), e.g.:\n\n```Haskell\ntype LookupByPhone = \n  \"customer\"\n
  \ :> \"byphone\"\n  :> Capture \"phone\" (Enc '[PhoneSymbol] () T.Text)\n  :> Get
  '[JSON] ([Customer])\n```\n\nor to get type safety over text document using Unix
  vs Windows line breaks!\n\n\n## Goals and limitations\n\nThe main goal is to provide
  improved type safety for programs that use string encodings and \ntransformations.
  \ _Not to provide encoding implementation type safety_. \n_Encoding and string manipulation
  libraries are typically well established and tested, type safety is really needed
  at the usage site, not at the implementation site_.\n\nThis library approach is
  to fight issues with (value level) strings using (type level) strings. Using `Symbol`-s
  effectively forces us to play the orphan instances game.   \nOne of the long term
  goals is for this library to provide combinator alternatives to typeclass polymorphism
  so that the orphan instances are more of a convenience and not the necessity.  \n\n\n##
  Examples \n\nHere are some code examples:\n\n- [Overview](src/Examples/TypedEncoding/Overview.hs)\n-
  [Conversions between encodings](src/Examples/TypedEncoding/Conversions.hs)\n- [DIY
  encoding, error handling](src/Examples/TypedEncoding/Instances/DiySignEncoding.hs)\n-
  [To and from string conversions](src/Examples/TypedEncoding/ToEncString.hs)\n- [Unsafe
  - working inside encodings](src/Examples/TypedEncoding/Unsafe.hs)\n \n\n## Hackage\n\nhttps://hackage.haskell.org/package/typed-encoding\n\n##
  Other encoding packages\n\nMy approach will be to write specific encodings (e.g.
  _HTTP_) or wrap encodings from other packages using separate \"bridge\" projects.\n\nCurrently
  /typed-encoding/ depends on\n\n- /base64-bytestring/ because it was my driving example,
  this is likely to move out to a separate bridge project at some point. \n\nBridge
  work:\n\n- [typed-encoding-encoding](https://github.com/rpeszek/typed-encoding-encoding)
  bridges [encoding](https://github.com/dmwit/encoding) package \n\n\n## Tested with\n\n-
  stack (1.9.3) lts-14.27 (ghc-8.6.5)\n- stack (2.5.1) lts-16.27 (ghc-8.8.4)\n- needs
  ghc >= 8.2.2, base >=4.10 for GHC.TypeLits support\n\n## Known issues\n\n- running
  test suite: cabal has problems with doctest, use stack  \n   https://github.com/haskell/cabal/issues/6087
  \  \n"
description-type: markdown
hash: 0a22f35a8dc3945e3976df122183fc0d93b49fc1445ec2d045addb6c518488d5
homepage: https://github.com/rpeszek/typed-encoding#readme
latest: 0.5.2.3
license-name: BSD-3-Clause
maintainer: robpeszek@gmail.com
synopsis: Type safe string transformations
test-bench-deps:
  QuickCheck: '>=2.13.1 && <3'
  base: '>=4.10 && <5'
  base64-bytestring: '>=1.0 && <1.3'
  bytestring: '>=0.10 && <0.13'
  doctest: '>=0.16 && <1'
  doctest-discover: '>=0.2 && <0.3'
  hspec: '>=0'
  quickcheck-instances: '>=0.3.20 && <0.4'
  symbols: '>=0.3 && <0.3.1'
  text: '>=1.2 && <3'
  typed-encoding: '>=0'
