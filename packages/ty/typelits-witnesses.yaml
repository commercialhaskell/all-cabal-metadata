homepage: https://github.com/mstksg/typelits-witnesses
changelog-type: markdown
hash: 1acae3ffa1c39b0dfd6bed46b9ddde30975ced276230a505c4b4d7ea3fd89786
test-bench-deps: {}
maintainer: justin@jle.im
synopsis: Existential witnesses, singletons, and classes for operations on GHC TypeLits
changelog: |+
  Changelog
  =========

  Version 0.4.0.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.4.0.0>

  *June 20, 2019*

  *   Complete overhaul of *GHC.TypeLits.Witnesses* to more or less match the
      interface of singletons.  This changes the role of the module to be a
      "lightweight" version of the singletons library as it pertains to `Nat` and
      `Symbol`.
  *   Removal of the *GHC.TypeLits.List* module.  We could perform the same
      overhaul as *GHC.TypeLits.Witnesses*, but it is complex enough that it
      would be better to just use *singletons* instead at that point.
  *   Remove all external dependencies, except for *base* and *dependent-sum*.
  *   Break compatibility with GHC < 8.2

  Version 0.3.0.3
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.3.0.3>

  *October 1, 2018*

  *   Fix build for GHC 8.6 and `TypeIsStar` changes.
  *   Break compatibility with GHC < 8.0

  Version 0.3.0.2
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.3.0.2>

  *March 30, 2018*

  *   Functions taking multiple `p m` in *GHC.TypeLits.Compare* now are able to
      take different "proxy" types (`p` and `q`).

  Version 0.3.0.1
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.3.0.1>

  *   Documentation fixes because deprecation warnings were not showing up on
      haddocks for *GHC.TypeLits.List*.

  Version 0.3.0.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.3.0.0>

  *   Added extra witnesses inside the constructors of `(:<=?)`.
  *   Allowed functions to polymorphically expect `p n` instead of `Proxy n`
      whenever possible.
  *   Soft deprecation of *GHC.TypeLits.Witnesses*, in case people want to use
      the functionality of *singletons* without the full library.
  *   Formal deprecation of *GHC.TypeLits.List*, with migration information,
      because it's just so much more unweidly than using *singletons*.

  Version 0.2.3.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.3.0>

  *   Added the `GHC.TypeLits.Compare` module for refining bounds and proving
      inequalities on `KnownNat`s and associated utility functions.

  Version 0.2.2.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.2.0>

  *   Removed redundant `KnownNats` and `KnownSymbols` constraints for `sameNats`
      and `sameSymbols`.

  Version 0.2.1.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.1.0>

  *   Added "eliminators", a staple of dependently typed programming, for
      `NatList` and `SymbolList`.

  Version 0.2.0.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.2.0.0>

  *   **Breaking**: Changed the name of `someNatsVal'` to `someNatsValPos`, to
      break away from the "just add `'`" anti-pattern and to make the function
      name a bit more meaningful.

  *   Added `reifyNats'`, a "safe" version of `reifyNats`.  Ideally,
      `reifyNats` should be the safe one, but its connection to `reifyNat` from
      the *reflection* package is very strong and worth preserving, I think.

  Version 0.1.2.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.2.0>

  *   Added `mapNatList'` and `mapSymbolList'` companions to `mapNatList` and
      `mapSymbolList`; they use `NatList` and `SymbolList` instead of Rank-2
      types, so they can work better with function composition with `(.)` and
      other things that Rank-2 types would have trouble with.

  *   Added `sameNats` and `sameSymbols`, modeled after `sameNat` and
      `sameSymbol`.  They provide witnesses to GHC that `KnownNat`s passed in
      are both the same.

  Version 0.1.1.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.1.0>

  *   Added strict fields to `NatList`, `SomeNats`, `SymbolList`, and
      `SomeSymbols`.  It really doesn't make any sense for them to be lazy.

  Version 0.1.0.1
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.0.1>

  *   Added README to the cabal package as an extra source file, for viewing on
      Hackage.

  Version 0.1.0.0
  ---------------

  <https://github.com/mstksg/typelits-witnesses/releases/tag/v0.1.0.0>

  *   Initial version.

basic-deps:
  dependent-sum: -any
  base: '>=4.10 && <4.16'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.4.0.0
author: Justin Le
latest: 0.4.0.0
description-type: markdown
description: |
  typelits-witnesses
  ==================

  [![typelits-witnesses on Hackage](https://img.shields.io/hackage/v/typelits-witnesses.svg?maxAge=2592000)](https://hackage.haskell.org/package/typelits-witnesses)
  [![typelits-witnesses on Stackage LTS](http://stackage.org/package/typelits-witnesses/badge/lts)](http://stackage.org/lts/package/typelits-witnesses)
  [![typelits-witnesses on Stackage Nightly](http://stackage.org/package/typelits-witnesses/badge/nightly)](http://stackage.org/nightly/package/typelits-witnesses)
  [![Build Status](https://travis-ci.org/mstksg/typelits-witnesses.svg?branch=master)](https://travis-ci.org/mstksg/typelits-witnesses)

  This library contains:

  *   A small specialized subset of the *[singletons][]* library as it pertains to
      `Nat` and `Symbol`, for when you need some simple functionality without
      wanting to invoke the entire *singletons* library.
  *   Operations for manipulating these singletons and `KnownNat` and
      `KnownSymbol` instances, such as addition and multiplication of
      singletons/`KnownNat` instances.
  *   Operations for the comparison of `Nat`s in a way that works well with
      *GHC.TypeLits*'s different comparison systems.  This is helpful for
      bridging together libraries that use different systems; this functionality
      is not yet provided by *singletons*.

  [singletons]: https://hackage.haskell.org/package/singletons
license-name: MIT
