all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
author: Daniel SchÃ¼ssler
basic-deps:
  base: '>=4 && <5'
  containers: '>=0'
  syb: '>=0'
  template-haskell: '>=0'
  transformers: '>=0'
  type-equality: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Type classes can express sets and functions on the type level, but they are not first-class. This package expresses type-level sets and functions as /types/ instead.

  Instances are replaced by value-level proofs which can be directly manipulated; this makes quite a bit of (constructive) set theory expressible; for example, we have:

  * Subsets and extensional set equality

  * Unions (binary or of sets of sets), intersections, cartesian products, powersets, and a sort of dependent sum and product

  * Functions and their composition, images, preimages, injectivity

  The proposition-types (derived from the ':=:' equality type) aren't meaningful purely by convention; they relate to the rest of Haskell as follows: A proof of @A :=: B@ gives us a safe coercion operator @A -> B@ (while the logic is inevitably inconsistent /at compile-time/ since 'undefined' proves anything, I think that we still have the property that if the 'Refl' value is successfully pattern-matched, then the two parameters in its type are actually equal).
description-type: haddock
hash: ae942c9be1c3922b01c72387d5a83871319f8eaf841e99b55814014b6f58f395
homepage: ''
latest: 0.1.3.1
license-name: BSD-3-Clause
maintainer: daniels@community.haskell.org
synopsis: Sets and functions-as-relations in the type system
test-bench-deps: {}
