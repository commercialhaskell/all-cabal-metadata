homepage: https://github.com/isovector/type-errors#readme
changelog-type: markdown
hash: 8725efb33957b17270ee9fed1c8ab85e9aa9c04a13a849312d23894cfc009a31
test-bench-deps:
  first-class-families: '>=0.5.0.0'
  base: '>=4.7 && <5'
  syb: -any
  doctest: '>=0.16.0.1 && <0.22'
  th-abstraction: -any
  type-errors: -any
  template-haskell: -any
maintainer: sandy@sandymaguire.me
synopsis: Tools for writing better type errors
changelog: |+
  # Changelog for type-errors

  ## 0.2.0.2 (2023-04-08)

  - Bumped version bounds

  ## 0.2.0.1 (2022-11-24)

  - Bumped version bounds

  ## 0.2.0.0 (2019-07-03)

  ### Breaking Changes

  - The `UnlessPhantom` and various `Subst` type families were broken in the
      presence of stuckness. This rendered them almost entirely unusable --- so
      they now have a new implementation in terms of `te`.
  - Added `te`, a TemplateHaskell splice, which will perform symbolic
      substitutions over types. See haddock for the migration details.

  ## Unreleased changes

basic-deps:
  first-class-families: '>=0.5.0.0'
  base: '>=4.7 && <5'
  syb: -any
  th-abstraction: -any
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
author: Sandy Maguire
latest: 0.2.0.2
description-type: markdown
description: |+
  # type-errors

  [![Build Status](https://api.travis-ci.org/isovector/type-errors.svg?branch=master)](https://travis-ci.org/isovector/type-errors)
  [![Hackage](https://img.shields.io/hackage/v/type-errors.svg?logo=haskell&label=type-errors)](https://hackage.haskell.org/package/type-errors)

  ## Dedication

  > View the gradients of adversity as the colors that paint your story, and the
  > power of experience as what makes you a great teacher, creator, philosopher,
  > entrepreneur, artist, and human. Everything works out eventually.
  >
  > Jennifer Sodini


  ## Overview

  `type-errors` is a collection of tools for writing better, more ergonomic, type
  errors. Some of the more interesting features are the ability to observe
  stuckedness and phantomness, as well as perform substitutions over types.

  For more information, check out the [haddock
  documentation](https://hackage.haskell.org/package/type-errors/docs/Type-Errors.html).


  ## Acknowledgments

  This project wouldn't be possible without the help of two amazing people:

  * [kcsongor](https://kcsongor.github.io/) who came up with the original
    technology behind this library.
  * [Lysxia](https://blog.poisson.chat/) for articulating the approach to making
    `IfStuck` work for things of all kinds, and for helping me with the
    substitution machinery.

license-name: BSD-3-Clause
