all-versions:
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
- 0.3.0.0
author: Richard Lupton
basic-deps:
  aeson: '>=0'
  base: '>=4.9 && <5'
  bytestring: '>=0'
  protolude: '>=0.1.6 && <0.2'
  reflection: '>=0'
  singletons: '>=0'
  text: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: |
  # tyro

  `tyro` is a dependently typed JSON parsing library, that provides a quick way to create JSON parsers by deriving them from a type level description of the position of the value to be obtained. It provides some of the same functionality as Aeson lenses, but derives the parsers from types rather than doing a generic parse and applying prisms. This was mostly an experiment in dependent typing.

  ## Examples

  ### Type driven interface

  ```Haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE TypeOperators #-}

  import Data.Tyro
  import Data.Aeson (decode)
  import qualified Data.ByteString.Lazy as B

  json = "{\"key1\":[{\"key2\":41},{\"key2\":42}]}" :: B.ByteString

  -- Extract [41, 42] inside the Tyro types
  parsed = decode json :: Maybe ("key1" >%> List ("key2" >%> Extract Integer))

  -- We can dispose of the types using unwrap
  values :: Maybe [Integer]
  values = fmap unwrap parsed
  ```

  ### Value driven interface (experimental)

  The value driven interface is still experimental, and in the process of being refined.

  ```Haskell
  {-# LANGUAGE OverloadedStrings #-}
  import Data.Tyro

  json = "{\"key1\": {\"key2\" :  [41, 42]}}" :: B.ByteString

  -- Extract [41, 42] inside the JSON
  parsed = json %%> "key1" >%> "key2" >%> extract :: Maybe [Integer]
  ```
description-type: markdown
hash: e5c9afce89dd4795ec14dca7ad4cce37cb15cab6b5f396248ccd1e2c7f2846d5
homepage: https://github.com/rlupton20/tyro#readme
latest: 0.3.0.0
license-name: BSD-3-Clause
maintainer: example@example.com
synopsis: Type derived JSON parsing using Aeson
test-bench-deps:
  HUnit: '>=0'
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  protolude: '>=0.1.6 && <0.2'
  reflection: '>=0'
  singletons: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  text: '>=0'
  tyro: '>=0'
  vector: '>=0'
