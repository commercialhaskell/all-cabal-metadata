all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
author: Donnacha OisÃ­n Kidney
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.5'
  deepseq: '>=1.4'
  ghc-typelits-natnormalise: '>=0.4'
changelog: ''
changelog-type: ''
description: "# type-indexed-queues\n## Queues and Heaps with verified and unverified
  versions.\n\n[![Hackage](https://img.shields.io/hackage/v/type-indexed-queues.svg)](https://hackage.haskell.org/package/type-indexed-queues)
  [![Build Status](https://travis-ci.org/oisdk/type-indexed-queues.svg?branch=master)](https://travis-ci.org/oisdk/type-indexed-queues)\n\nThis
  library provides implementations of five different heaps\n(binomial, pairing, skew,
  leftist, and Braun), each in two\nflavours: one verified, and one not.\n\nAt the
  moment, only structural invariants are maintained.\n\nMore information, and a walkthrough
  of a couple implementations, can be found at this [blog post](http://doisinkidney.com/posts/2017-04-23-verifying-data-structures-in-haskell-lhs.html).\n\n##
  Comparisons of verified and unverified heaps\nBoth versions of each heap are provided
  for comparison: for\ninstance, compare the standard leftist heap (in\nData.Heap.Leftist):\n\n```haskell\ndata
  Leftist a\n  = Leaf\n  | Node !Int\n        a\n        (Leftist a)\n        (Leftist
  a)\n```\n\nTo its size-indexed counterpart (in Data.Heap.Indexed.Leftist):\n\n```haskell\ndata
  Leftist n a where\n        Leaf :: Leftist 0 a\n        Node :: !(The Nat (n + m
  + 1))\n             -> a\n             -> Leftist n a\n             -> Leftist m
  a\n             -> !(m <= n)\n             -> Leftist (n + m + 1) a\n```\n\nThe
  invariant here (that the size of the left heap must\nalways be less than that of
  the right) is encoded in the\nproof `m <= n`.\n \nWith that in mind, compare the
  unverified and verified\nimplementatons of `merge`:\n\n```haskell\nmerge Leaf h2
  = h2\nmerge h1 Leaf = h1\nmerge h1@(Node w1 p1 l1 r1) h2@(Node w2 p2 l2 r2)\n  |
  p1 < p2 =\n      if ll <= lr\n          then Node (w1 + w2) p1 l1 (merge r1 h2)\n
  \         else Node (w1 + w2) p1 (merge r1 h2) l1\n  | otherwise =\n      if rl
  <= rr\n          then Node (w1 + w2) p2 l2 (merge r2 h1)\n          else Node (w1
  + w2) p2 (merge r2 h1) l2\n  where\n    ll = rank r1 + w2\n    lr = rank l1\n    rl
  = rank r2 + w1\n    rr = rank l2\n```\n\nVerified:\n\n```haskell\nmerge Leaf h2
  = h2\nmerge h1 Leaf = h1\nmerge h1@(Node w1 p1 l1 r1 _) h2@(Node w2 p2 l2 r2 _)\n
  \ | p1 < p2 =\n      if ll <=. lr\n        then Node (w1 +. w2) p1 l1 (merge r1
  h2)\n        else Node (w1 +. w2) p1 (merge r1 h2) l1 . totalOrder ll lr\n  | otherwise
  =\n      if rl <=. rr\n          then Node (w1 +. w2) p2 l2 (merge r2 h1)\n          else
  Node (w1 +. w2) p2 (merge r2 h1) l2 . totalOrder rl rr\n  where\n    ll = rank r1
  +. w2\n    lr = rank l1\n    rl = rank r2 +. w1\n    rr = rank l2\n```\n\n## Using
  type families and typechecker plugins to encode the invariants\nThe similarity is
  accomplished through overloading, and some\nhandy functions. For instance, the second
  if-then-else works\non boolean *singletons*, and the `<=.` function provides a\nproof
  of order along with its answer. The actual arithmetic\nis carried out at runtime
  on normal integers, rather than\nPeano numerals. These tricks are explained in more
  detail\nTypeLevel.Singletons and TypeLevel.Bool.\n\nA typechecker plugin does most
  of the heavy lifting, although\nthere are some (small) manual proofs.\n\n## Uses
  of verified heaps\nThe main interesting use of these sturctures is total traversable\nsorting
  ([sort-traversable](https://github.com/treeowl/sort-traversable)).\nAn implementation
  of this is provided in Data.Traversable.Parts. I'm\ninterested in finding out other
  uses for these kinds of structures.\n"
description-type: markdown
hash: c6d10c905c5054271a6554e511d9e1f0d538617bc5764576605497be1ad74e73
homepage: https://github.com/oisdk/type-indexed-queues
latest: 0.2.0.0
license-name: MIT
maintainer: mail@doisinkidney.com
synopsis: Queues with verified and unverified versions.
test-bench-deps:
  QuickCheck: '>=1.0'
  base: '>=4.8 && <5'
  containers: '>=0.5'
  criterion: '>=0.1'
  doctest: '>=0.3.0'
  pqueue: '>=1.0.0'
  random: '>=1.0.0.0'
  tasty: '>=0.1'
  tasty-quickcheck: '>=0.1'
  type-indexed-queues: '>=0'
