all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1
- 0.1.1.1
- 0.1.1.2
author: Marcin Tolysz
basic-deps:
  aeson: '>=0'
  base: '>=4.5 && <5'
  bytestring: '>=0'
  haskell-src-meta: '>=0'
  parsec: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "[![Coverage Status](https://img.shields.io/coveralls/tolysz/typedquery.svg)](https://coveralls.io/r/tolysz/typedquery)\n[![Build
  Status](https://travis-ci.org/tolysz/typedquery.svg?branch=master)](https://travis-ci.org/tolysz/typedquery)\n[![Latest
  Version](https://img.shields.io/hackage/v/typedquery.svg)](https://hackage.haskell.org/package/typedquery)\n\n\ntypedquery\n==========\n\nParser
  for SQL augmented with types\n\nTill it finalised I would recomend installing it:
  with `cabal -f debug-typed-queries` just to see what is gonig on. \n As the SQL
  parser is not complete, and will need a major lift to make it readable and sane...
  however it works fine for all queries I need.\n\nThis package provides base parsing
  facilities for possibly all *-simple database packages converting them into *-simpel-typed\n\n
  * https://github.com/tolysz/mysql-simple-typed\n * https://github.com/tolysz/sqlite-simple-typed\n
  * https://github.com/tolysz/postgresql-simple-typed\n\nexample: https://github.com/tolysz/sqlite-simple-typed/blob/master/example/src/Main.hs\n\nThe
  basic idea is to start using SQL again, but use comemnts (`--`) to hide haskell
  annotation.\n\nThis started as `QuasiQuotes` excercise with the TH inpired `printf`.\n\n
  * `genJsonQuery` produces `[Value]`\n * `genTypedQuery` produces `[(T1,...,Tn)]`
  tuples, `[T]` or `()` all depending on the `SQL` query\n\nIf you do not provide
  value (or a mean to get on inside query you need to give it outside.\n\n\nThey do
  the same:\n\n    $(genJsonQuery \"SET SESSION group_concat_max_len = ? \") conn
  (10000 :: Int)\n    $(genJsonQuery \"SET SESSION group_concat_max_len = ? -- Int
  \") conn 10000\n    $(genJsonQuery \"SET SESSION group_concat_max_len = ? -- Int
  \ -- < 1000 \") conn\n    $(genJsonQuery \"SET SESSION group_concat_max_len = ?
  -- < (1000 :: Int) \") conn\n\n\nThere is a basic syntax, and the base idea is to
  have a nice easy for eye syntax.\nIt fires the correct `execute` or `query` with
  or without `_` depending on the actual `SQL` syntax\n\nThe parser is not complete,
  I will try to add as many issues there are and try to fix it.\n\nAdnotations start
  with `-- ` as otherwise `HeidiSQL` was complaining, then  `>` `<` `~`  or just text.\n\n
  \   \n| syntax                  |     equivalent               |\n-------------------------
  | ------------------------------\n|    `bal -- Type`          |  `(\\v -> v :: Bla)`
  \           |\n|    `bla -- > f`           |  `(\\v -> f bla )`              |\n|
  \   `bla -- Type -- > f`   |  `(\\v -> (f bla):: Type )`     |\n|    `?   -- Type
  -- < var` |  `??`                          |\n|    `?   -- < var`         |  `??`
  \                         |\n|    `?   -- < var`         |  `??`                          |\n|
  \   `?   -- ~ verbatim`    |  `??`                          |\n \n\n\nEg.\n\n    $(genJsonQuery
  [qq| insert into some_table\n      ( timeAsSQLfunction           -- ~ now ()\n      ,
  someInputfromAesonViaLens   -- Int  -- < v ^? (key \"coolValue\" . _Integral) ^.
  non 3 \n      , someUserName                -- Text -- < someNameFromContext\n      )
  |]) conn\n\nTranslates to\n\n    execute conn [qq| insert into some_table\n          (
  timeAsSQLfunction, someInputfromAesonViaLens, someUserName )\n          values (
  now (), ?, ?) |] \n            [( (v ^? (key \"coolValue\" . _Integral) ^. non 3
  ) :: Int, someNameFromContext Text)]\n"
description-type: markdown
hash: 7c401b2932f0c4136af0b05b1f3507e2b4d93e84a9cf122d706e3e6b82601b3b
homepage: https://github.com/tolysz/typedquery
latest: 0.1.1.2
license-name: BSD-3-Clause
maintainer: tolysz@gmail.com
synopsis: Parser for SQL augmented with types
test-bench-deps: {}
