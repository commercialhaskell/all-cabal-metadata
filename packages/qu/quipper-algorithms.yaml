all-versions:
- 0.9.0.0
author: |-
  Alexander S. Green, Keith Kim, Peter LeFanu Lumsdaine,
  Siun-Chuon Mau, Neil J. Ross, Artur Scherer,
  Peter Selinger, BenoÃ®t Valiron, Alexandr Virodov
basic-deps:
  Lattices: '>=0.0.1'
  QuickCheck: '>=2.6'
  array: '>=0.5'
  base: '>=4.5 && <5'
  containers: '>=0.5.2.1'
  deepseq: '>=1.4'
  easyrender: '>=0.1.0.0'
  filepath: '>=1.4'
  mtl: '>=2.1.2'
  newsynth: '>=0.3.0.1'
  primes: '>=0.2.1.0'
  quipper-algorithms: '>=0'
  quipper-language: '>=0.9.0.0'
  quipper-libraries: '>=0.9.0.0'
  quipper-utils: '>=0.9.0.0'
  random: '>=1.0.1.1'
changelog: "December 29, 2019: Release 0.9.0.0\n\n * Overhauled module structure:\n
  \n   Old:                New:\n   ====                ====\n   \n   Quipper.XYZ
  \        Quipper.Internal.XYZ\n   QuipperLib.XYZ      Quipper.Libraries.XYZ\n   Libraries.XYZ
  \      Quipper.Utils.XYZ\n   Algorithms.XYZ      Quipper.Algorithms.XYZ\n   tests
  \              Quipper.Demos\n   Programs            Quipper.Programs\n\n * Re-packaged
  Quipper as Cabal packages. Added executables quipper,\n   quipper-pp, quipperi,
  quipperdoc in lieu of shell scripts.\n * Moved PDF Previewer to a separate library
  in Quipper.Utils.Preview\n * Added a MonadFail instance to Circ, to keep ghc >=
  7.4 happy\n * Use type class synonyms to avoid warnings about simplifiable class.\n
  * Compatibility: removed obsolete functoin Map.insertWith'.\n * Added MultiControlledNot
  demo.\n * Removed dependency on set-monad, which is broken upstream.\n * Fixed some
  bugs in the stabilizer simulation.\n * Moved QuantumIf from BF to Libraries.\n *
  Added --help option to all Quipper tools.\n * Removed Quipper.Utils.ShowAll\n *
  Fixed some compiler errors and removed some unnecessary type class\n   assumptions.\n\nJuly
  27, 2016: Release 0.8\n\n * Portability: compatibility fixes for GHC 8.0. Note:
  GHC 7.10 is too\n   broken and will not be supported by Quipper.\n * Added tests/SimulationTest\n
  * Added QPrep and QUnPrep to the simulator\n\nOctober 14, 2014: Release 0.7\n\n
  * Portability: compatibility fixes for GHC 7.8.\n\nJanuary 16, 2014: Release 0.6\n\n
  * Minor edits and documentation updates.\n * Added a new gate gate_iX_inv\n * Added
  \"alternate\" version of synthesis algorithm, using only\n   generators of determinant
  1 if possible.\n * Synthesis code is now in an external package \"newsynth\".\n
  * Rendering code is now in an external package \"easyrender\".\n * Updated for use
  with fixedprec-0.2.1.0.\n\nSeptember 2, 2013: Release 0.5\n\n * Portability: compatibility
  fixes for GHC 7.6.2.\n * Portability: fixed Windows incompatibility bug. Handling
  of Ctrl-C\n   may or may not work on Windows, depending on console.\n * Added quipperi
  script, analogous to ghci.\n * New library QuipperLib.ClassicalOptim: algebraic
  optimization of\n   auto-generated classical circuits. Added \"optimized\" oracle
  to BWT\n   algorithm.\n * QuipperLib.Decompose: Added decomposition into a \"standard\"
  gate\n   set, consisting of X, Y, Z, H, S, S-dagger, T, T-dagger, and CNOT.\n   Added
  KeepPhase flag to some transformers.\n * QuipperLib.GateDecompositions: added more
  gates.\n * New library Libraries.Synthesis.RotationDecomposition: implements a\n
  \  variant of the algorithm from Nielsen and Chuang to decompose an\n   nxn unitary
  operator into one- and two-level rotations.\n * New library QuipperLib.Unboxing:
  unboxing transformers.\n * Updated ASCII output format; improved circuit parser
  efficiency.\n * Miscellaneous bug fixes: malformed W-gates, qdata_of_qubits,\n   floorlog.\n
  * Fixed handling of iterated subroutines in depth transformer.\n * Documentation
  updates and minor refactoring.\n\nJune 19, 2013: Release 0.4\n\n * First public
  release.\n"
changelog-type: text
description: "Running the included algorithms\n===============================\n\nEach
  algorithm builds an executable file, which can be run with\nvarious command line
  parameters to do different things. Run each\ncommand with option --help to see a
  summary of the usage information.\n\nIn the following, we describe the set of options
  for the algorithms\nthat were implemented.\n\n\nRunning the bwt program\n=======================\n\nUsage
  for Binary Welded Tree algorithm:\n---------------------------------------\n\nUsage:
  bwt [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -C             --circuit              output the whole circuit (default)\n  -O
  \            --oracle               output only the oracle\n  -K             --oraclec
  \             output the \"classical\" oracle as a classical circuit\n  -G             --graph
  \               print colored graph computed from oracle\n  -S             --simulate
  \            run simulations of some circuit fragments for tree height n\n  -f <format>
  \   --format=<format>      output format for circuits (default: preview)\n  -g <gatebase>
  \ --gatebase=<gatebase>  type of gates to decompose into (default: logical)\n  -o
  <oracle>                           select oracle to use (default: orthodox)\n  -n
  <n>         --height=<n>           set tree height (positive; default 5)\n  -c <c>
  \        --color=<c>            color to use with --oracle (0..3, default 0)\n  -s
  <s>         --repeats=<s>          set parameter s (iteration count; default 1)\n
  \ -l             --large                set large problem size: n=300, s=336960\n
  \ -t <dt>        --dt=<dt>              set parameter dt (simulation time step;
  default pi/180)\nPossible values for format are: eps, pdf, ps, postscript, ascii,
  preview, gatecount.\nPossible values for gatebase are: logical, binary, toffoli,
  cliffordt_old, cliffordt, cliffordt_keepphase, standard, strict, approximate, approximate_keepphase,
  exact, trimcontrols.\nPossible values for oracle are: orthodox, simple, blackbox,
  classical, template, optimized.\n\nExamples of command line options:\n---------------------------------\n\n*
  Show the complete circuit for the BWT algorithm using the\n  \"orthodox\" (official
  GFI) oracle, with n=5 and s=1:\n\n  ./bwt -C -o orthodox -n 5 -s 1\n\n  (One can
  point out the different parts of the algorithm: 8 oracle\n  calls, and 4 very short
  diffusion steps).\n\n* Show the same, using the \"Template Haskell\" oracle: this
  oracle is\n  much larger, but automatically generated from classical code (and\n
  \ completely unoptimized):\n\n  ./bwt -C -o template -n 5 -s 1\n\n  The \"template
  oracle\" is defined in BWT/Template.hs. See the\n  documentation of the module Quipper/CircLifting
  for how it works.\n\n* Show the graph of the BWT algorithm, which is obtained by\n
  \ simulating the orthodox oracle (and therefore offers some evidence\n  for the
  correctness of the oracle implementation):\n\n  ./bwt -G -o orthodox -n 5\n\n* Show
  the orthodox oracle for n=300. Note that this will result in a\n  big file. One
  has to zoom in substantially to see gates. \n\n  ./bwt -O -o orthodox -n 300\n\n*
  Show the complete circuit for the BWT algorithm, but decompose\n  everything into
  binary gates:\n\n  ./bwt -C -o orthodox -n 5 -s 1 -g binary \n\n* Show the oracle
  from Figure 1a (alternate oracle).\n\n  ./bwt -C -o figure1a\n\n* The same, decomposed
  into binary+Toffoli gates, or binary gates\n  only, respectively:\n\n  ./bwt -C
  -o figure1a -g toffoli\n  ./bwt -C -o figure1a -g binary\n\n* Show gate counts for
  BWT algorithm with n=300 and s=1, using\n  \"orthodox\" oracle:\n\n  ./bwt -C -o
  orthodox -n 300 -s 1 -f gatecount\n\n* Show gate counts for same, after decomposition
  to binary gates:\n\n  ./bwt -C -o orthodox -n 300 -s 1 -f gatecount -g binary \n\nObviously,
  most other combinations of command line options are also\npossible, for example:
  decompose to toffoli gates and then simulate\nand show the graph. Some other combinations
  are not legal: for\nexample, decomposing to binary gates and then simulating. (The\nclassical
  simulator will complain that the circuit is not boolean; it\ncontains \"V\" gates).\n\n*
  Similarly, one can run demos for the triangle finding\n  algorithm using various
  command line options. \n\nNote that the triangle finding algorithm is not a deliverable;
  it is a\nwork in progress. The only implemented algorithm that is officially a\ndeliverable
  is the \"orthodox\" BWT implementation in BWT.BWT.\n\nRunning the bf program\n======================\n\nUsage
  for the Boolean Formula algorithm:\n----------------------------------------\n\nUsage:
  bf [OPTION...]\n  -C             --circuit              output the whole circuit
  (default)\n  -D             --demo                 run a demo of the circuit\n  -H
  \            --hexboard             output a representation of the initial state
  of the given oracle, i.e. the game played so far\n  -p <part>      --part=<part>
  \         which part of the circuit to use (default: whole)\n  -o <oracle>    --oracle=<oracle>
  \     which oracle to use (default: small)\n  -m <moves>     --moves=<moves>        which
  moves have already been made (default: [])\n  -f <format>    --format=<format>      output
  format for circuits (default: _preview)\n  -d             --dummy                set
  to only use a dummy HEX gate instead of the full hex circuit\n  -h             --help
  \                print usage info and exit\n  -g <gatebase>  --gatebase=<gatebase>
  \ type of gates to decompose the output circuit into (default: logical)\nPossible
  values for part are: whole, u, oracle, hex, checkwin_red, diffuse, walk, undo_oracle.\nPossible
  values for oracle are: 9by7, small, custom x y t.\nPossible values for format are:
  eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible values for gatebase
  are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase, standard,
  strict, approximate, approximate_keepphase, exact, trimcontrols.\n\nRunning the
  cl program\n======================\n\nUsage for the Class Number algorithm:\n-------------------------------------\n\nUsage:
  cl [OPTION...]\n  -h               --help                 print usage info and exit\n
  \ -f <format>      --format=<format>      output format for circuits        (default:
  ASCII)\n  -g <gatebase>    --gatebase=<gatebase>  gates to decompose into           (default:
  Logical)\n  -1                                      output the circuit for stage
  1 of the algorithm (default)\n  -4                                      output the
  circuit for stage 4 of the algorithm\n  -S <subroutine>  --sub=<subroutine>     output
  the circuit for a specific subroutine\n  -R               --regulator            classically,
  find the regulator, given Î\n  -F                                      classically,
  find the fundamental unit, given Î\n  -P                                      classically,
  find the fundamental solution of Pellâs equation, given Î\n  -d <N>           --delta=<N>
  \           discriminant Î (a.k.a. D)                 (default: 28)\n  -s <N>           --ss=<N>
  \              estimated bound on period S, for stage 1 (default: 2)\n  -i <N>                                  estimated
  bound on log_2 S, for stage 1 (default: 1)\n  -r <N>           --rr=<N>               approximate
  regulator R, for stage 4  (default: 12.345)\n  -q <N>                                  The
  parameter q, for stage 4        (default: 4)\n  -k <N>                                  The
  parameter k, for stage 4        (default: 3)\n  -n <N>                                  The
  parameter n, for stage 4        (default: 3)\n  -m <N>                                  The
  parameter m, for stage 4        (default: 5)\n                   --seed=<N>             Random
  seed (0 for seed from time)(default: 1)\nPossible values for format are: eps, pdf,
  ps, postscript, ascii, preview, gatecount.\nPossible values for gatebase are: logical,
  binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase, standard, strict,
  approximate, approximate_keepphase, exact, trimcontrols.\nPossible values for subroutine
  are: rho, rhoinv, normalize, dotprod, starprod, fn.\n\nRunning the gse program\n=======================\n\nUsage
  for Ground State Estimation algorithm:\n--------------------------------------------\n\nUsage:
  gse [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -C             --circuit              output the whole circuit (default)\n  -T
  <indices>   --template=<indices>   output a particular circuit template\n  -f <format>
  \   --format=<format>      output format for circuits (default: Preview)\n  -g <gatebase>
  \ --gatebase=<gatebase>  gates to decompose into (default: Logical)\n  -m <N>         --orbitals=<N>
  \        number of orbitals (default: 4)\n  -o <N>         --occupied=<N>         number
  of occupied orbitals (default: 2)\n  -b <N>         --precision=<N>        number
  of precision qubits (default: 3)\n  -D <energy>    --delta_e=<energy>     energy
  range (default: 6.5536)\n  -E <energy>    --e_max=<energy>       maximum energy
  (default: -3876.941)\n                 --n0=<N>               use N_k = n0 * 2^k
  (default: N_k = 1)\n  -l             --large                set large problem size
  (m=208, o=84, b=12, n0=100)\n  -x             --orthodox             use the Coulomb
  operator of Whitman et al.\n                 --h1=<file>            filename for
  one-electron data (default: \"h_1e_ascii\")\n                 --h2=<file>            filename
  for two-electron data (default: \"h_2e_ascii\")\n  -d <file>      --datadir=<file>
  \      directory for one- and two-electron data (default: current)\nPossible values
  for format are: eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible values
  for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\nIndices
  can be specified as p,q or p,q,r,s (with no spaces)\n\nRunning the qls program\n=======================\n\nUsage
  for Quantum Linear Systems algorithm:\n-------------------------------------------\n\nUsage:
  qls [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -C             --circuit              output the whole circuit (default)\n  -O
  <name>      --oracle=<name>        output only the oracle <name> (default: r) \n
  \ -f <format>    --format=<format>      output format for circuits (default: gatecount)\n
  \ -g <gatebase>  --gatebase=<gatebase>  type of gates to decompose into (default:
  logical)\n  -o <oracle>                           select oracle implementation to
  use (default: blackbox)\n  -p <param>     --param=<param>        choose a set of
  parameters (default: dummy).\n  -P <n>         --peel=<n>             peel <n> layers
  of boxed subroutines (default: 0).\nPossible values for format are: ascii, gatecount.\nPossible
  values for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\nPossible
  values for oracle implementation are: matlab, blackbox.\nPossible values for param
  are: dummy, small, large.\nPossible values for oracle are: r, b, A[band][t|f]. E.g.
  \"-OA1t\" asks for band 1 with boolean argument True. For all three oracles, the
  factors are set up to 1.0.\n\nRunning the tf program\n======================\n\nUsage
  for Triangle Finding algorithm:\n-------------------------------------\n\nUsage:
  tf [OPTION...]\n  -h               --help                     print usage info and
  exit\n  -f <format>      --format=<format>          output format for circuits (default:
  preview)\n  -g <gatebase>    --gatebase=<gatebase>      type of gates to decompose
  into (default: logical)\n  -l <l>           --l=<l>                    parameter
  l (default: 4)\n  -n <n>           --n=<n>                    parameter n (default:
  3)\n  -r <r>           --r=<r>                    parameter r (default: 2)\n  -C
  \              --QWTFP                    output the whole circuit (default)\n  -O
  \              --oracle                   output only the oracle\n  -s <subroutine>
  \ --subroutine=<subroutine>  output the chosen subroutine (default: adder)\n  -Q
  \                                         use alternative qRAM implementation\n
  \ -o <oracle>                                 select oracle to use (default: blackbox)\n
  \ -A               --arith                    test/simulate the arithmetic routines\n
  \ -T               --oracletest               test/simulate the oracle\nPossible
  values for format are: eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible
  values for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\nPossible
  values for oracle are: orthodox, blackbox.\nPossible values for subroutine are:
  zero, initialize, hadamard, setup, qwsh, diffuse, fetcht, storet, fetchstoret, fetche,
  fetchstoree, update, swap, a15, a16, a17, a18, gcqwalk, gcqwstep, convertnode, testequal,
  pow17, mod3, sub, add, mult.\n\nRunning the usv program\n=======================\n\nUsage
  for Unique Shortest Vector algorithm:\n-------------------------------------------\n\nUsage:
  usv [OPTION...]\n  -h             --help                 print usage info and exit\n
  \ -f <format>    --format=<format>      output format for circuits (default: eps)\n
  \ -g <gatebase>  --gatebase=<gatebase>  type of gates to decompose into (default:
  logical)\n  -n <n>         --n=<n>                parameter n (default: 5)\n  -b
  <b>         --b=<b>                parameter b (default: 5X5 with entries = 1)\n
  \ -s <s>         --s=<s>                Random number generator seed s (default:
  1)\n  -F                                    output subroutine f (depends on b).\n
  \ -G                                    output subroutine g (depends on b).\n  -H
  \                                   output subroutine h (depends on n).\n  -U                                    output
  algorithm 1 (depends on b).\n  -Q                                    output algorithm
  2 (depends on b).\n  -R                                    output algorithm 3 (depends
  on b).\n  -T                                    output algorithm 4 (depends on n).\n
  \ -S                                    output sieving subroutine (depends on n).\n
  \ -D                                    output algorithm 5 (depends on n).\n  -t
  \                                   test subroutine h (depends on n).\nPossible
  values for format are: eps, pdf, ps, postscript, ascii, preview, gatecount.\nPossible
  values for gatebase are: logical, binary, toffoli, cliffordt_old, cliffordt, cliffordt_keepphase,
  standard, strict, approximate, approximate_keepphase, exact, trimcontrols.\n"
description-type: text
hash: e1096607bf04d9dca5ef89b376e5bd4d1c5fc3b2add7178bcb72eb94dcfb452f
homepage: http://www.mathstat.dal.ca/~selinger/quipper/
latest: 0.9.0.0
license-name: BSD-3-Clause
maintainer: selinger@mathstat.dal.ca
synopsis: A set of algorithms implemented in Quipper.
test-bench-deps: {}
