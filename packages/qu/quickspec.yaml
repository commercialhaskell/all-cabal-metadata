homepage: https://github.com/nick8325/quickspec
changelog-type: ''
hash: c516e1f7d27ba148a5fc1470d3322ac3a1cd8df65cc9d0b2b2e2b881046e1d36
test-bench-deps: {}
maintainer: nicsma@chalmers.se
synopsis: Equational laws for free!
changelog: ''
basic-deps:
  data-lens-light: '>=0.1.1'
  base: '>=4.7 && <5'
  constraints: -any
  dlist: -any
  twee-lib: -any
  containers: -any
  quickcheck-instances: '>=0.3.16'
  spoon: -any
  uglymemo: -any
  transformers: -any
  random: -any
  QuickCheck: '>=2.14.2'
  template-haskell: -any
all-versions:
- '0.9'
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.4
- 0.9.5
- 0.9.6
- '2'
- '2.1'
- 2.1.1
- 2.1.2
- 2.1.3
- 2.1.4
- 2.1.5
- '2.2'
author: Nick Smallbone
latest: '2.2'
description-type: markdown
description: |
  QuickSpec: equational laws for free!
  ====================================

  QuickSpec takes your Haskell code and, as if by magic, discovers laws about it.
  You give QuickSpec a collection of Haskell functions; QuickSpec tests your functions
  with QuickCheck and prints out laws which seem to hold.

  For example, give QuickSpec the functions `reverse`, `++` and `[]`, and it will
  find six laws:

  ```haskell
  reverse [] == []
  xs ++ [] == xs
  [] ++ xs == xs
  reverse (reverse xs) == xs
  (xs ++ ys) ++ zs == xs ++ (ys ++ zs)
  reverse xs ++ reverse ys == reverse (ys ++ xs)
  ```

  QuickSpec can find equational laws as well as conditional equations. All you
  need to supply are the functions to test, as well as `Ord` and `Arbitrary`
  instances for QuickSpec to use in testing; the rest is automatic.

  For information on how to use QuickSpec, see
  [the documentation](http://hackage.haskell.org/package/quickspec/docs/QuickSpec.html).
  You can also look in the `examples` directory, for example at
  `List.hs`, `IntSet.hs`, or `Parsing.hs`. To read about how QuickSpec works, see
  our paper, [Quick specifications for the busy programmer](http://www.cse.chalmers.se/~nicsma/papers/quickspec2.pdf).
license-name: BSD-3-Clause
