all-versions:
- 0.1.0.0
- 0.1.0.1
author: Heli Wang, David Thomas, Matt Halverson
basic-deps:
  QuickCheck: '>=0'
  aeson: '>=0.8'
  base: '>=4.9 && <4.11'
  bytestring: '>=0'
  containers: '>=0'
  fixed-list: '>=0'
  hashable: '>=0'
  mtl: '>=2.2 && <2.3'
  parsec: '>=3.1 && <3.2'
  predicate-class: '>=0'
  pretty: '>=1.1 && <1.2'
  semigroups: '>=0.16'
  text: '>=1.2 && <1.3'
  unordered-containers: '>=0'
  yaml: '>=0.8 && <0.9'
changelog: "# Versioning in a multi-package repo\nYou'll notice that this repo contains
  multiple package, each with its own versioning. To manage that, each package updates
  independently for minor and build changes, but major changes must be coordinated
  and linked across all packages.\n\nThe changelog is organized to reflect this. All
  packages maintain their own changelog with independent minor and build changes.
  However, major changes require coordination, which start here.\n\n# 0.1 to 0.2\n\n##
  0.1.0 to 0.1.1\n- Upgraded to GHC8, base 4.9\n- Added docs describing future development
  \n- Replaced redundant `overJust`\n"
changelog-type: markdown
description: "# queryparser\n\nParsing and analysis of Vertica, Hive, and Presto SQL.\n\n\n##
  Gentle introduction\n\nQueryparser supports parsing for three sql-dialects (Vertica,
  Hive, and\nPresto).\n\nEach dialect implements its own tokenization and parsing
  logic. There is a\nsingle abstract syntax tree (AST) for representing queries of
  any dialect. This\nAST is defined in Database/Sql/Type.hs and Database/Sql/Type/Query.hs.\n\nThe
  parsing logic produces an AST with table and column identifiers that are\n\"raw\"
  or optionally qualified. Frequently, it is desirable to convert the AST\nover raw
  names to an AST over resolved names, where identifiers are fully\nqualified. This
  transformation is called \"name resolution\" or simply\n\"resolution\". It requires
  as input the full list of columns in every table and\nthe full list of tables in
  every schema, otherwise known as \"catalog\ninformation\".\n\nAn example of resolution:\n\n
  * `SELECT                  column_c FROM          table_t` is a query with raw names\n
  * `SELECT schema_s.table_t.column_c FROM schema_s.table_t` is the same query with
  resolved names\n\nVarious utility functions (\"analyses\") have been defined for
  ASTs over resolved\nnames, such as:\n\n * what tables appear in the query?\n * what
  columns appear in the query, per clause?\n * what is the table/column lineage of
  a query?\n * what sets of columns does a query compare for equality?\n\nThe analyses
  are the main value-add of this library.\n\n\n## Demo\n\nEnough talk, let's show
  what it can do!\n\n    $ stack ghci\n    ...\n    ...> :set prompt \"> \"\n    >
  import Demo\n    > -- for the purposes of our demo, we have two tables: foo with
  columns a,b,c and bar with columns x,y,z\n    > demoAllAnalyses \"SELECT * FROM
  foo\" -- note that the SELECT * expands to a,b,c\n    Tables accessed:\n        public.foo\n
  \   Columns accessed by clause:\n        public.foo.a\tSELECT\n        public.foo.b\tSELECT\n
  \       public.foo.c\tSELECT\n    Joins:\n        no joins\n    Table lineage:\n
  \       no tables modified\n    > demoAllAnalyses \"SELECT * FROM bar\" -- and here
  the SELECT * expands to x,y,z\n    Tables accessed:\n        public.bar\n    Columns
  accessed by clause:\n        public.bar.x\tSELECT\n        public.bar.y\tSELECT\n
  \       public.bar.z\tSELECT\n    Joins:\n        no joins\n    Table lineage:\n
  \       no tables modified\n    > demoAllAnalyses \"SELECT x, count(1) FROM foo
  JOIN bar ON foo.a = bar.y WHERE z IS NOT NULL GROUP BY 1 ORDER BY 2 DESC, b\"\n
  \   Tables accessed:\n        public.bar\n        public.foo\n    Columns accessed
  by clause:\n        public.bar.x\tGROUPBY\n        public.bar.x\tSELECT\n        public.bar.y\tJOIN\n
  \       public.bar.z\tWHERE\n        public.foo.a\tJOIN\n        public.foo.b\tORDER\n
  \   Joins:\n        public.bar.y <-> public.foo.a\n    Table lineage:\n        no
  tables modified\n    > -- let's play with some queries that modify table-data!\n
  \   > demoTableLineage \"INSERT INTO foo SELECT * FROM bar\"\n    public.foo after
  the query depends on public.bar, public.foo before the query\n    > demoTableLineage
  \"TRUNCATE TABLE foo\"\n    public.foo no longer has data\n    > demoTableLineage
  \"ALTER TABLE bar, foo RENAME TO baz, bar\"\n    public.bar after the query depends
  on public.foo before the query\n    public.baz after the query depends on public.bar
  before the query\n    public.foo no longer has data\n    > -- let's explore a few
  subtler behaviors of the \"joins\" analysis (admittedly, something of a misnomer)\n
  \   > demoJoins \"SELECT * FROM foo JOIN bar ON a=x AND b+c = y+z\"\n    public.bar.x
  <-> public.foo.a\n    public.bar.y <-> public.foo.b\n    public.bar.y <-> public.foo.c\n
  \   public.bar.z <-> public.foo.b\n    public.bar.z <-> public.foo.c\n    > demoJoins
  \"SELECT a FROM foo UNION SELECT x FROM bar\"\n    public.bar.x <-> public.foo.a\n\nSpin
  up your own ghci and paste in your own queries!\n\n\n## Requirements\n\nTo build,
  you need:\n\n- stack\n- docker (recommended)\n\n### OS X\n\nYou can install stack
  on OS X with brew:\n\n    brew install ghc haskell-stack\n\nTo install docker, use
  the default installer found on https://docs.docker.com/mac/\n\nTo allow stack to
  see the docker daemon, add `eval \"$(docker-machine\nenv default)\"` to your bashrc
  or equivalent. (This is following https://docs.docker.com/machine/reference/env/)\n\n###
  Linux & Other\n\nFollow the directions at https://github.com/commercialhaskell/stack#how-to-install\n\n\n##
  Installation\n\nOnce you've got what you need, check out the repo and change to
  the directory.\n\nStack will download other dependencies for you:\n\n    stack setup\n\n\nNow
  you can build the package with:\n\n    stack build\n\n\nOr run the tests with:\n\n
  \   stack test\n\n\nOr run the benchmarks with:\n\n    stack bench\n\n\nOr pull
  things up in ghci with:\n\n    stack ghci\n\n## Contributing\n\nIf you'd like to
  contribute to the repo, use the above installation instructions to get started.\n\nWhen
  you're ready, make sure that the code compiles with the `Development` flag, i.e.:\n\n
  \   stack build --flag queryparser:development\n\n## Use\n\nMostly it boils down
  to this function:\n\n    parse :: Text -> Either ParseError SqlQuery\n\nTo parse
  some sql from the repl,\n\n    parse \"SELECT 1;\"\n\n## Areas of future interest\n\nThere
  is substantial room for future work in Queryparser. For more details, see\n[Areas
  of future interest](FUTURE.md).\n"
description-type: markdown
hash: bab2943c3be280546e3c53aa296de291ba67aba14ab2282d5a0de7f2462ebeb6
homepage: ''
latest: 0.1.0.1
license-name: MIT
maintainer: heli@uber.com
synopsis: Analysis and parsing library for SQL queries.
test-bench-deps:
  base: '>=4.9 && <4.11'
  criterion: '>=0'
  queryparser: '>=0'
  text: '>=0'
