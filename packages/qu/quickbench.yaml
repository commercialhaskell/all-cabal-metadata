homepage: https://github.com/simonmichael/quickbench#readme
changelog-type: markdown
hash: 71ffa9dc026b4ec06d58d2f75f6e348f07937933591c6e3cc210d6f51d2d3d6f
test-bench-deps:
  base: -any
  quickbench: -any
maintainer: simon@joyful.com
synopsis: quick & easy benchmarking of command-line programs
changelog: |
  1.0.1 2021-10-06

  - build cleanly with current GHC & libs

  1.0 2016-10-21

  - extract tools/simplebench from the hledger repo

  - stop using error, make safe for reuse

  - more robust command execution, signal handling, output, error reporting

  - switch to docopt, options must precede args for now

  - new UI: full commands are specified by arguments/file/stdin,
    alternate executables can be specified with -w, flags cleanup

  - default file for test commands is ./bench.sh

  - -N/--cycles repeats the whole test suite

  - man page
basic-deps:
  split: -any
  base: '>=4.7 && <5'
  time: -any
  docopt: '>=0.7.0.7'
  process: -any
  containers: -any
  quickbench: -any
  tabular: -any
  pretty-show: -any
  safe: -any
  directory: -any
all-versions:
- '1.0'
- 1.0.1
author: Simon Michael
latest: 1.0.1
description-type: markdown
description: "# quickbench 1.0\n\nQuick & easy benchmarking of command-line programs.\n\n
  \ [About](#about)\n| [Install](#install)\n| [Examples](#examples) \n| [Options](#options)\n|
  [Related tools](#related-tools)\n\n\n## About\n\nquickbench is an update and repackaging
  of a little benchmarking tool I've been \nusing in the hledger project since 2008.\nUse
  it like a more powerful \"time\" command for measuring the time taken by command-line
  programs,\nor for creating repeatable benchmark scripts for your projects.\n\nquickbench
  produces very simple output (elapsed seconds),\nas quickly as possible (running
  commands just once by default),\nand tabulates results from multiple executables.\nI
  find it very useful for quick and dirty, exploratory, and comparative measurements\nthat
  you can understand at a glance.\n\n## Install\n\nYou can build it from source on
  most platforms supporting [GHC](https://haskell.org/ghc). \nA [patch](https://github.com/docopt/docopt.hs/pull/34)
  is required for one of the dependencies,\nso for now you must build quickbench from
  inside its source tree, with \n[stack](https://www.fpcomplete.com/haskell/get-started/)\n(or
  if you build with [cabal](https://cabal.readthedocs.io), ensure it uses the docopt
  version mentioned in stack.yaml):\n\n```\n$ git clone https://github.com/simonmichael/quickbench\n$
  cd quickbench\n$ stack install\n```\n\nstack will advise you to add ~/.local/bin
  to $PATH if needed.\n\n## Examples\n\nYou can specify test commands as arguments:\n```\n$
  quickbench 'sleep 1'\nRunning 1 tests 1 times at 2016-10-16 23:06:48.058578 UTC:\n\nBest
  times:\n+---------++------+\n|         ||      |\n+=========++======+\n| sleep 1
  || 1.01 |\n+---------++------+\n```\n\nor put them in a file and use `-f FILE`.
  \nA file named `bench.sh` in the current directory will be used automatically:\n```\n$
  echo 'echo 3 * 1000000' > bench.sh\n$ quickbench\nRunning 1 tests 1 times at 2016-10-16
  23:53:04.743899 UTC:\n\nBest times:\n+------------------++------+\n|                  ||
  \     |\n+==================++======+\n| echo 3 * 1000000 || 0.00 |\n+------------------++------+\n```\n\nYou
  can compare results with different executables:\n```\n$ quickbench -w echo,expr
  -p5\nRunning 1 tests 1 times with 2 executables at 2016-10-16 23:56:40.808703 UTC:\n\nBest
  times:\n+-------------++---------+---------+\n|             ||    echo |    expr
  |\n+=============++=========+=========+\n| 3 * 1000000 || 0.00229 | 0.00195 |\n+-------------++---------+---------+\n```\n\nand
  run tests repeatedly to reduce or observe jitter. \nquickbench assumes the quickest
  measurement is the truest one:\n```\n$ quickbench -w echo,expr -p5 -n100 -N2\nRunning
  1 tests 100 times with 2 executables at 2016-10-16 23:57:34.387764 UTC:\n\nBest
  times 1:\n+-------------++---------+---------+\n|             ||    echo |    expr
  |\n+=============++=========+=========+\n| 3 * 1000000 || 0.00112 | 0.00135 |\n+-------------++---------+---------+\n\nBest
  times 2:\n+-------------++---------+---------+\n|             ||    echo |    expr
  |\n+=============++=========+=========+\n| 3 * 1000000 || 0.00111 | 0.00136 |\n+-------------++---------+---------+\n```\n\nYou
  can turn a shell script into a benchmark suite by adding a shebang line:  \n```\n$
  cat 410-run-time.sh\n#!/usr/bin/env quickbench -v -p2 -n2 -w hledger-410-before,hledger-410-8bde75c
  -f\nhledger -f 10000x1000x10.journal print\nhledger -f 10000x1000x10.journal register\nhledger
  -f 10000x1000x10.journal balance\n\n$ ./410-run-time.sh\nRunning 3 tests 2 times
  with 2 executables at 2016-10-16 23:42:57.349721 UTC:\n1: hledger-410-before -f
  10000x1000x10.journal print\n        [3.14s]\n2: hledger-410-before -f 10000x1000x10.journal
  print\n        [2.90s]\n1: hledger-410-8bde75c -f 10000x1000x10.journal print\n
  \       [3.13s]\n2: hledger-410-8bde75c -f 10000x1000x10.journal print\n        [2.92s]\n1:
  hledger-410-before -f 10000x1000x10.journal register\n        [3.52s]\n2: hledger-410-before
  -f 10000x1000x10.journal register\n        [3.52s]\n1: hledger-410-8bde75c -f 10000x1000x10.journal
  register\n        [3.51s]\n2: hledger-410-8bde75c -f 10000x1000x10.journal register\n
  \       [3.66s]\n1: hledger-410-before -f 10000x1000x10.journal balance\n        [3.38s]\n2:
  hledger-410-before -f 10000x1000x10.journal balance\n        [1.93s]\n1: hledger-410-8bde75c
  -f 10000x1000x10.journal balance\n        [1.93s]\n2: hledger-410-8bde75c -f 10000x1000x10.journal
  balance\n        [1.80s]\n\nBest times:\n+-----------------------------------++--------------------+---------------------+\n|
  \                                  || hledger-410-before | hledger-410-8bde75c |\n+===================================++====================+=====================+\n|
  -f 10000x1000x10.journal print    ||               2.90 |                2.92 |\n|
  -f 10000x1000x10.journal register ||               3.52 |                3.51 |\n|
  -f 10000x1000x10.journal balance  ||               1.93 |                1.80 |\n+-----------------------------------++--------------------+---------------------+\n```\n\n##
  Options\n\n```\n$ quickbench -h\nquickbench 1.0\nRun some test commands, possibly
  with different executables, once or more\nand show their best execution times.\nCommands
  are specified as one or more quote-enclosed arguments,\nand/or one per line in CMDSFILE;
  or read from a default file [./bench.sh].\nWith -w, commands' first words are replaced
  with a new executable\n(or multiple comma-separated executables, showing times for
  all).\nNote: tests executable files only, not shell builtins; options must precede
  args.\n\nUsage:\n  quickbench [options] [<cmd>...]\n\nOptions:\n  -f, --file CMDSFILE
  \  file containing commands, one per line (- for stdin)\n  -w, --with EXE[,...]
  \ replace first word of commands with these executables\n  -n, --iterations=N    run
  each test this many times [default: 1]\n  -N, --cycles=N        run the whole suite
  this many times [default: 1]\n  -p, --precision=N     show times with this many
  decimal places [default: 2]\n  -v, --verbose         show commands being run\n  -V,
  --more-verbose    show command output\n      --debug           show debug output
  for this program\n  -h, --help            show this help\n```\n\n## Related tools\n\n[bench](https://github.com/Gabriel439/bench#readme)
  (Gabriel Gonzalez 2016) is another \ncommand line benchmarking tool written in Haskell.\nUse
  that one if you need detailed statistical analysis and output, or HTML reports.
  \nHere is bench's output for the echo/expr example above: \n```\n$ bench 'echo 3
  * 1000000'; bench 'expr 3 \\* 1000000'\nbenchmarking echo 3 * 1000000\ntime                 2.215
  ms   (2.173 ms .. 2.250 ms)\n                     0.995 R²   (0.989 R² .. 0.998
  R²)\nmean                 2.238 ms   (2.203 ms .. 2.296 ms)\nstd dev              147.6
  μs   (92.84 μs .. 265.3 μs)\nvariance introduced by outliers: 48% (moderately inflated)\n\nbenchmarking
  expr 3 \\* 1000000\ntime                 3.484 ms   (3.405 ms .. 3.556 ms)\n                     0.994
  R²   (0.987 R² .. 0.998 R²)\nmean                 3.564 ms   (3.497 ms .. 3.684
  ms)\nstd dev              280.3 μs   (178.0 μs .. 494.9 μs)\nvariance introduced
  by outliers: 52% (severely inflated)\n```\n\n[hyperfine](https://github.com/sharkdp/hyperfine)
  also does statistical analysis\nand has good usability.\n"
license-name: LicenseRef-GPL
