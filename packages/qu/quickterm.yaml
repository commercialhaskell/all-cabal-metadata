all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.3.0
- 0.2.4.0
author: Samuel Schlesinger, Nils 'bash0r' Jonsson
basic-deps:
  base: '>=4.8 && <5'
  edit-distance: '>=0'
  hashmap: '>=0'
  quickterm: '>=0'
  regex-base: '>=0'
  regex-tdfa: '>=0'
  uu-parsinglib: '>=0'
changelog: ''
changelog-type: ''
description: "#Quickterm [Quick Haskell Terminal Interfaces]\n\n##Examples\n\nSome
  here: https://github.com/SamuelSchlesinger/Components\n\nOthers in examples folder\n\n##Install/Documentation\n\nTo
  install:\n\n> cabal install quickterm\n\nDocumentation: https://hackage.haskell.org/package/quickterm-0.1.0.0/docs/Quickterm.html\n\n##Development\n\nRight
  now I'm taking finals, but in src/Mainable.hs, there is a class which really would
  make the production of these programs much easier. I plan to rework the system pretty
  thoroughly to allow for such functions, probably simply by adding another case to
  the Quickterm class and adding another pattern for each of the functions which take
  a Quickterm. Hopefully by doing it this way I won't break much. I also want to add
  some sort of cute error handling device, as right now there is a pretty common pattern
  in my TerminalAction implementations that simply prints the usage or some error
  message, and that could probably be relegated to some Error Monad, or something
  a little more expressive. That's a pretty big change, though, and it would break
  most of the code I've already written, so I'm probably going to add in the other
  bit first, push it once more, then make a new version and rework it and refactor
  it pretty intensively.\n\n##First Look (Thoughts)\n\nI often want to port certain
  functions I write to a command line interface. Assuming the existence of various
  functions which map from a set of command line arguments to an action of type IO
  (), this involes parsing arguments, options, and generating some usage information
  which should give you an idea of how to use the application if you go wrong.\n\nI
  originally solved this with the idea of a Feature, which could be a Program with
  a list of features, or a Command, which contains a function [String] -> IO (). I
  did not include the concept of an option within this and I would like to handle
  this properly here. Both of the constructions of a Feature contained as well a name
  and a usage string, something which can recursively be generated and printed to
  the user upon failure to find a Command to run.\n\nI want to step back from this
  and take a more principled view, seeing which useful Haskell typeclasses within
  which I can instantiate the various types I found useful in the last attempt. (Looking
  back, basically none were needed or would have added much as far as I can see. Living
  in the IO Monad is basically enough.) \n\n##Second Look (First Interface)\n\nimporting
  the Quickterm module will give you the following definitions:\n\n> type Name = String
  -- I like this better than saying String everywhere, more meaning.\n\n> type Usage
  = String -- I like to describe things with characters, ideally with words.\n\n>
  type Args = [String] -- Nothing special here\n\n> type Options = Map Name [String]
  -- The options are a mapping from Name -> [String]\n> -- It's rather important to
  note that an option of the form -X takes no argument,\n> -- an option of the form
  --X can take one, ---X two, and so on.\n\n> type TerminalAction = Args -> Options
  -> IO () -- The sort of action we can perform\n\n> data Quickterm = Choice Name
  [Quickterm] Usage\n               | Command Name TerminalAction Usage \n\n> usage
  :: Quickterm -> String -- Generates the usage string\n\n> quickrun :: [String] ->
  Quickterm -> IO () -- Runs the program on the raw arguments\n"
description-type: markdown
hash: 60de34deef2ea44bedcd9f5e5488a36b3996d5053fb7f278a545c47e5025a0af
homepage: https://github.com/SamuelSchlesinger/Quickterm
latest: 0.2.4.0
license-name: GPL-3.0-only
maintainer: sgschlesinger@gmail.com,aka.bash0r@gmail.com
synopsis: An interface for describing and executing terminal applications
test-bench-deps: {}
