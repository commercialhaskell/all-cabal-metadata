homepage: https://github.com/input-output-hk/quickcheck-dynamic#readme
changelog-type: markdown
hash: f4ad38ba39e0a0bc1fa6327534b2c5d766d3d7f1ef36c604d99b4ca4a2e1fd42
test-bench-deps: {}
maintainer: arnaud.bailly@iohk.io
synopsis: A library for stateful property-based testing
changelog: |
  # Changelog

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to  [Semantic Versioning](https://semver.org/).

  As a minor extension, we also keep a semantic version for the `UNRELEASED`
  changes.

  ## UNRELEASED

  ## 3.1.1 - 2023-06-26

  * Added instances for `HasVariables` with custom error messages to avoid the issue of
    missing `Generic` instances causing difficult to understand type errors.

  ## 3.1.0 - 2023-04-10

  * **BREAKING**: Change the type of `postcondition` to allow you to
    express property monitoring (e.g. stats or counterexamples) in the
    postcondition itself - rather than duplicating code for counterexamples
    in the `monitoring` function.

  ## 3.0.3 - 2023-04-18

  * Added `hasNoVariablesQ` and `forAllNonVariableDL` functions to help make
    quantification require less boilerplate in `DL` properties.

  ## 3.0.2 - 2023-02-17

  * Added instances of `HasVariables` for Word types
  * Exported definition of `HasNoVariables` to make it useable
    with deriving via in downstream packages (whoops!)
  * Fixed impossible to use `nextVar` arguments to `forAllUniqueDL`

  ## 3.0.1 - 2023-02-15

  * Remove template haskell dependency

  ## 3.0.0 - 2023-02-14

  * **BREAKING**: Add `HasVariables` class to keep track of symbolic variables and automatically insert precondition
    checks for well-scopedness of variables.
  * **BREAKING**: Remove some unnecessary and unusead features in dynamic logic, including re-running tests from a
    counterexample directly.
  * Improved printing of counterexamples in DL - they are now printed as code that can be copied more-or-less verbatim to
    create a runnable counterexample in code.
  * Made the variable context explicit to avoid having to keep track of symbolic variables in the model
    * This introduces the `ctxAtType` and `arbitraryVar` functions to use in action generators (c.f. the
    `RegistryModel.hs` example).

  ## 2.0.0 - 2022-10-11

  * **BREAKING**: Add `Realized` type family to distinguish between the model- and real type of an action
  * **BREAKING**: Introduce `RunModel` type class to interpret Model-generated sequence of actions against real-world implementation
    * Move `perform` method from `StateModel` to this new type-class
    * Also split `postcondition` and `monitoring` out from the `StateModel` to the `RunModel` type class
  * Added Thread registry example based on io-sim concurrency simulation library

  ## 1.1.0 - 2022-08-27

  * Fix broken links in Hackage-generated documentation and link to other Quviq papers
  * Add `Show a` constraint on `monitoring`

  ## 1.0.0

  * Initial publication of quickcheck-dynamic library on Hackage
  * Provide base `StateModel` and `DynamicLogic` tools to write quickcheck-based models, express properties, and test them
basic-deps:
  base: '>=4.7 && <5'
  containers: -any
  mtl: -any
  random: -any
  QuickCheck: -any
all-versions:
- 1.0.0
- 1.1.0
- 2.0.0
- 3.0.0
- 3.0.1
- 3.0.2
- 3.0.3
- 3.1.0
- 3.1.1
author: Ulf Norell
latest: 3.1.1
description-type: markdown
description: |
  # quickcheck-dynamic

  A library for testing stateful programs using [QuickCheck](https://hackage.haskell.org/package/QuickCheck) and [dynamic logic](https://en.wikipedia.org/wiki/Dynamic_logic_(modal_logic)).

  ## Background

  This library was initially designed by [QuviQ](http://www.quviq.com/) in collaboration with
  [IOG](https://iohk.io/) to provide a dedicated test framework for [Plutus](https://docs.cardano.org/plutus/learn-about-plutus) "Smart
  contracts". As the need of a _Model-Based Testing_ framework arises in
  quite a lot of contexts, it was deemed useful to extract the most
  generic part as a standalone package with no strings attached to
  Plutus or Cardano.

  ## Usage

  * Documentation is currenly mostly provided inline as Haddock
    comments. Checkout [StateModel](https://hackage.haskell.org/package/quickcheck-dynamic/docs/src/Test.QuickCheck.StateModel.html)
    and [DynamicLogic](https://hackage.haskell.org/package/quickcheck-dynamic/docs/Test-QuickCheck-DynamicLogic.html) modules for
    some usage instructions.
  * For a concrete standalone example, have a look at `Registry` and `RegistryModel` modules from the companion [quickcheck-io-sim-compat](https://github.com/input-output-hk/quickcheck-dynamic/tree/main/quickcheck-io-sim-compat) package (not currently available on hackage), a multithreaded Thread registry inspired by the Erlang version of QuickCheck described in [this article](https://mengwangoxf.github.io/Papers/Erlang18.pdf)
  * For more documentation on how to quickcheck-dynamic is used to test
    Plutus DApps, check this
    [tutorial](https://plutus-apps.readthedocs.io/en/latest/plutus/tutorials/contract-models.html).
  * Apart from Plutus, this library is now in use in the
    [Hydra](https://github.com/input-output-hk/hydra-poc) project to
    verify the _Head Protocol_ implementation with respect to the
    original research paper.
license-name: Apache-2.0
