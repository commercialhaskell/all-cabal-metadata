all-versions:
- 0.0.1
- 0.0.3
author: Daniil Iaitskov
basic-deps:
  QuickCheck: '>=2.14.3 && <3'
  base: '>=4.7 && <5'
  bytestring: '>=0.12.1 && <1'
  casing: <1
  conduit: <2
  containers: <1
  directory: <2
  filepath: <2
  generic-data: <2
  generic-deriving: <2
  generic-lens: '>=2.2.2 && <3'
  generic-random: <2
  lens: '>=5.3.2 && <6'
  monad-time: <1
  mtl: <3
  pretty-simple: <5
  process: <2
  quick-process: '>=0'
  regex-compat: <1
  regex-tdfa: <2
  relude: '>=1.2.2 && <2'
  safe-exceptions: <1
  sbv: <12
  template-haskell: <3
  temporary: <2
  th-utilities: <1
  time: <2
  trace-embrace: '>=1.2.0 && <2'
  unix: <3
  wl-pprint-text: <2
changelog: |
  # trace-embrace changelog

  ## Version 0.0.3 2025-06-24
    * GHC 9.12
    * Outcome checkers
    * ConstArgs - list of ConstArg
    * Benchmark execution
    * Protection from lost imports
    * Call spec cascades
    * Include forked HList, multi-containers, refined, conduit-find

  ## Version 0.0.1 2025-06-01
    * init
changelog-type: markdown
description: |-
  The library checks program name during compilation, generates exec spec
  to be verified in tests, before installation or before launch.

  == Motivation
  #motivation#

  The strongest trait of Haskell language is its type system. This
  powerful type system gives infinite opportunities for experimenting with
  mapping relational entities onto application values in safer, more
  comprehensible and maintainable ways.

  Compare popularity of Java and Haskell languagues and number of SOL
  libraries in them:

  > > length $ words "Hasql Beam Reigh8 postgresql-typed persistent esqueleto Opaleye Rel8 Squeal Selda Groundhog"
  > 11
  > > length $ words "JPA Hibernate JOOQ EJB"
  > 4

  Haskell ecosystem counts 2.75 times more SQL libraries nonetheless
  according to <https://www.tiobe.com/tiobe-index/ TIOBE index> in 2025
  Java is 20 times more popular than Haskell and by
  <https://pypl.github.io/PYPL.html PYPL> 126 times!

  As far as I remember only <https://www.jooq.org/ JOOQ> resembles a type
  safe library. Other libraries require runtime environment to check
  compatibility of codebase with SQL queries.

  RDBMSs talk SQL and it are inherently text oriented for extenal clients.
  All these Haskell libraries first of all are trying to hide plain string
  manipulation behind type fence as deep as possible.

  Once I tried had to launch an external process in a Haskell program.
  Keeping in mind the 50-200x slope on SQL arena in Haskell, I expected to
  find at least a few libraries on <https://hackage.haskell.org/ hackage>
  providing some type safety layer between my application and execv
  syscall interface accepting a bare strings.

  The observation above motivated me experimenting with a type safe
  wrapper for <https://hackage.haskell.org/package/process process>
  library.

  Structure of command line arguments is way simpler than SQL. An external
  program can be modelled as a function with a side effect. Haskell has an
  amazing library for testing functions -
  <hackage.haskell.org/package/QuickCheck QuickCheck> including impure
  ones.

  Main concern of external programs - they are not shipped with the
  application. Recall
  <https://en.wikipedia.org/wiki/Dependency_hell PRM hell> phrase. These
  days situation with external explicit dependency resolution during
  software installation and upgrade improved by nix and bazel. Nix and
  bazel are powerful, because they can pack\/isolate\/unpack the whole
  dependency universe of a single app, but they are complicated systems
  with a steep learning curve. Plus nix is not supported on Windows.
  That’s why they’ve got limited popularity and lot of software is still
  distributed as a self-extracting archive assuming some dependencies are
  compatible and preinstalled manually.

  Explicit list of dependencies is manually currated.

  Language does not provide out of the box solution to build such list.
  Taking into account human factor explicit list of dependencies always
  has a chance to diverge from the full (effective) one. E.g. host system
  got newer version of dependency which behaves differently.

  Software installation out of prebuilt executables usually don’t run
  tests.

  == Goals
  #goals#

  quick-process defines following goals:

  -   provide DSL for describing a call spec of an external program
  -   generate types, from the call spec, compatible with application
      domain and arguments of an external program
  -   automatic discovery of call specs in code base
  -   check call spec compatibility during app development, testing and
      installation
  -   process launch and mapping call spec to CreadeProcess

  == Call spec verification
  #call-spec-verification#

  Often call spec can be verified with @--help@ key terminating command
  line arguments. It’s way easier than running the program in sandbox,
  because no files gerenration is required and validating after effects
  either. Help key validation support can be checked.

  == Examples
  #examples#

  === Constant argument
  #constant-argument#

  > {-# LANGUAGE TemplateHaskell #-}
  > module CallSpecs where
  > import System.Process.Quick
  >
  > $(genCallSpec [TrailingHelpValidate, SandboxValidate] "date" (ConstArg "+%Y" .*. HNil))

  > {-# LANGUAGE TemplateHaskell #-}
  > module CallSpecTest where
  >
  > import CallSpecs
  > import System.Process.Quick
  >
  > main :: IO ()
  > main = $(discoverAndVerifyCallSpecs
  >           (fromList [ TrailingHelpValidate
  >                     , SandboxValidate
  >                     ])
  >           3)

  > {-# LANGUAGE TemplateHaskell #-}
  > module Main where
  >
  > import CallSpecs
  > import System.Process.Quick
  >
  > main :: IO ()
  > main = callProcess Date

  @genCallSpec@ defines type @Date@ with nullary constructor and
  @CallSpec@ instance for it.

  @discoverAndVerifyCallSpecs@ discovers all types with @CallSpec@
  instances, generates 3 values per type ande executes help key check.
  There is not much to check besides exit code in Date spec.

  @callProcess@ is similar to
  <https://hackage.haskell.org/package/process/docs/System-Process.html#v:callProcess callProcess>
  from process library, but accepts typed input instead of strings.

  === Variable argument
  #variable-argument#

  > {-# LANGUAGE TemplateHaskell #-}
  > module CallSpecs where
  > import System.Process.Quick
  >
  > $(genCallSpec
  >   [TrailingHelpValidate, SandboxValidate]
  >   "/bin/cp"
  >   (   VarArg @(Refined (InFile "hs") FilePath) "source"
  >   .*. VarArg @(Refined (OutFile "*") FilePath) "destination"
  >   .*. HNil
  >   )
  >  )

  > {-# LANGUAGE TemplateHaskell #-}
  > module CallSpecTest where
  >
  > import CallSpecs
  > import System.Process.Quick
  >
  > main :: IO ()
  > main = $(discoverAndVerifyCallSpecs
  >           (fromList [ TrailingHelpValidate
  >                     , SandboxValidate
  >                     ])
  >           100)

  > {-# LANGUAGE TemplateHaskell #-}
  > module Main where
  >
  > import CallSpecs
  > import System.Process.Quick
  >
  > main :: IO ()
  > main =
  >   callProcess $ BinCp $(refinedTH "app.hs") $(refinedTH "app.bak")

  @CallSpec@ of cp command requires 2 parameters and here quick-process
  power start to show up. Refined constraint InFile ensures that first
  string is a valid file path to a Haskell source file. This part is
  delegated to <https://hackage.haskell.org/package/refined refined>
  library. HelpKey mode generates appropriate values, but they don’t point
  to real files on disk. Use Sandbox mode to actually launch process in a
  temporary dir with real files. In Sandbox @OutFile@ cause to check that
  the file appears on the path once process terminates.

  === Subcases
  #subcases#

  Call spec can be composed of sum types.

  > {-# LANGUAGE TemplateHaskell #-}
  > module CallSpecs where
  > import System.Process.Quick
  >
  > $(genCallSpec
  >   [TrailingHelpValidate, SandboxValidate]
  >   "find"
  >   (   ConstArg "."
  >   .*. Subcases
  >         "FindCases"
  >         [ Subcase "FindPrintf"
  >           (KeyArg @(Refined (Regex "^[%][fpactbnM%]$") String) "-printf" .*. HNil)
  >         , Subcase "FindExec"
  >           (KeyArg @(Refined (Regex "^(ls|file|du)$") String) "-exec" .*. ConstArgs (words "{} ;") .*. HNil)
  >         ]
  >   .*. HNil
  >   )
  >  )

  Note usage of @Regex@ predicate - thanks to
  <https://hackage.haskell.org/package/refined sbv> and z3 SMT solver
  values satisfing arbitrary TDFA regex can be generated.

  === Init Cascade
  #init-cascade#

  A call spec may require another command to be executed somewhere in the
  past e.g. most of git commands work only with initialize repository.

  > {-# LANGUAGE TemplateHaskell #-}
  > module CallSpecs where
  >
  > import CallSpecs.GitInit qualified as I
  > import System.Process.Quick
  >
  > $(genCallSpec
  >   [SandboxValidate]
  >   "git"
  >   (   ConstArg "remote"
  >   .*. StdErrMatches "^$"
  >   .*. StdOutMatches "^$"
  >   .*. Init @I.Git
  >   .*. HNil
  >   )
  >  )

  == Generated TH code inspection
  #generated-th-code-inspection#

  GHC prints generated TH code with pragma:

  > {-# OPTIONS_GHC -ddump-splices #-}
description-type: haddock
hash: fe2984a46fe64b7d014ee65deb0a8db4cf6e02f909af0612f67cfc587ea882a1
homepage: http://github.com/yaitskov/quick-process
latest: 0.0.3
license-name: BSD-3-Clause
maintainer: dyaitskov@gmail.com
synopsis: Run external processes verified at compilation/installation
test-bench-deps:
  QuickCheck: '>=2.14.3 && <3'
  base: '>=4.7 && <5'
  bytestring: '>=0.12.1 && <1'
  directory: '>=0'
  generic-lens: '>=2.2.2 && <3'
  lens: '>=5.3.2 && <6'
  quick-process: '>=0'
  quickcheck-instances: '>=0'
  relude: '>=1.2.2 && <2'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  temporary: '>=0'
  th-lift-instances: '>=0'
  th-utilities: '>=0'
  unliftio: '>=0'
