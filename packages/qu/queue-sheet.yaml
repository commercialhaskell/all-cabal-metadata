all-versions:
- 0.7.0.2
- 0.8.0.0
- 0.8.0.1
author: Travis Cardwell <travis.cardwell@extrema.is>
basic-deps:
  aeson: '>=1.4.7.1 && <2.3'
  base: '>=4.13 && <4.22'
  bytestring: '>=0.10.10.1 && <0.13'
  directory: '>=1.3.6 && <1.4'
  filepath: '>=1.4.2.1 && <1.6'
  ginger: '>=0.10.1 && <0.11'
  optparse-applicative: '>=0.18 && <0.20'
  prettyprinter: '>=1.7.1 && <1.8'
  process: '>=1.6.9 && <1.7'
  queue-sheet: '>=0'
  scientific: '>=0.3.6.2 && <0.4'
  text: '>=1.2.4 && <2.2'
  transformers: '>=0.5.6.2 && <0.7'
  ttc: '>=1.1 && <1.6'
  vector: '>=0.12.1.2 && <0.14'
  yaml: '>=0.11.5 && <0.12'
changelog: |
  # `queue-sheet-haskell` Changelog

  This project follows the [Haskell package versioning policy][PVP], with
  versions in `A.B.C.D` format.  `A` may be incremented arbitrarily for
  non-technical reasons, but [semantic versioning][SemVer] is otherwise
  followed, where `A.B` is the major version, `C` is the minor version, and `D`
  is the patch version.  Initial development uses versions `0.0.0.D`, for which
  every version is considered breaking.

  [PVP]: <https://pvp.haskell.org/>
  [SemVer]: <https://semver.org/>

  The format of this changelog is based on [Keep a Changelog][KaC], with the
  following conventions:

  * Level-two heading `Unreleased` is used to track changes that have not been
    released.
  * Other level-two headings specify the release in `A.B.C.D (YYYY-MM-DD)`
    format, with newer versions above older versions.
  * Level-three headings are used to categorize changes as follows:
      1. Breaking
      2. Non-Breaking
  * Changes are listed in arbitrary order and present tense.

  [KaC]: <https://keepachangelog.com/en/1.0.0/>

  ## 0.8.0.1 (2025-01-04)

  ### Non-Breaking

  * Flip `optparse-applicative_ge_0_18` flag

  ## 0.8.0.0 (2025-01-03)

  ### Breaking

  * Support whitespace-separated tags and items instead of CSV
  * Remove support for GHC 8.6, constraining lower bounds
  * Remove support for GHC 8.4, constraining lower bounds
  * Remove support for GHC 8.2, constraining lower bounds
  * Change minimal Cabal from 1.24 to 3.0

  ### Non-Breaking

  * Bump `aeson` dependency version upper bound
  * Bump `ansi-wl-pprint` dependency version upper bound
  * Bump `base` dependency version upper bound
  * Bump `bytestring` dependency version upper bound
  * Bump `filepath` dependency version upper bound
  * Add support for `optparse-applicative` `0.18`
  * Bump `tasty` dependency version upper bound
  * Bump `text` dependency version upper bound
  * Bump `transformers` dependency version upper bound
  * Bump `ttc` dependency version upper bound
  * Bump `vector` dependency version upper bound
  * Adjust dependency constraints to match tested versions

  ## 0.7.0.2 (2022-03-02)

  ### Non-Breaking

  * Bump `text` dependency version upper bound
  * Bump `optparse-applicative` dependency version upper bound

  ## 0.7.0.1 (2021-10-10)

  ### Non-Breaking

  * Add dependency bounds

  ## 0.7.0.0 (2021-06-25)

  ### Breaking

  * Fix `--help` when using `optparse-applicative` `0.16`

  ### Non-Breaking

  * Use TTC 1.1.0.1
  * Refactor Nix configuration

  ## 0.6.0.0 (2021-05-27)

  ### Breaking

  * Add support for `optparse-applicative` `0.16`

  ### Non-Breaking

  * Add `.deb` and `.rpm` packaging
  * Add Cabal support to `Makefile`
  * Add Cabal tests to GitHub Actions
  * Add [stan](https://hackage.haskell.org/package/stan) static analysis

  ## 0.5.0.1 (2020-11-23)

  ### Non-Breaking

  * Use GitHub Actions instead of Travis CI

  ## 0.5.0.0 (2020-11-08)

  ### Breaking

  * Add simplified CSV support for tags and items

  ### Non-Breaking

  * Rename Git default branch to `main`

  ## 0.4.0.0 (2020-09-12)

  ### Breaking

  * Add item support for tags

  ## 0.3.0.0 (2020-08-23)

  ### Breaking

  * Add default section support
  * Add top-level queues array support
  * Add import support
  * Add user-defined tag support
  * Remove split property
  * Change templates to use snake-case properties

  ## 0.2.0.0 (2020-08-11)

  ### Breaking

  * Add URL support

  ## 0.1.0.0 (2020-07-25)

  ### Breaking

  * Configure sections and queues in a single YAML file

  ### Non-Breaking

  * Add a template option
  * Add an output option
  * Refactor `Makefile`, add `STACK_NIX_PATH` support
  * Add `test-all` command to `Makefile`
  * Add Nix configuration

  ## 0.0.1.0 (2020-01-22)

  ### Breaking

  * Initial public release
changelog-type: markdown
description: |
  # Queue Sheet

  [![Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)
  [![GitHub CI](https://github.com/ExtremaIS/queue-sheet-haskell/workflows/CI/badge.svg?branch=main)](https://github.com/ExtremaIS/queue-sheet-haskell/actions)
  [![Hackage](https://img.shields.io/hackage/v/queue-sheet.svg)](https://hackage.haskell.org/package/queue-sheet)
  [![Stackage LTS](https://stackage.org/package/queue-sheet/badge/lts)](https://stackage.org/package/queue-sheet)
  [![Stackage Nightly](https://stackage.org/package/queue-sheet/badge/nightly)](https://stackage.org/nightly/package/queue-sheet)

  * [Overview](#overview)
  * [CLI](#cli)
      * [Requirements](#requirements)
      * [Installation](#installation)
          * [`.deb` Package Installation](#deb-package-installation)
          * [`.rpm` Package Installation](#rpm-package-installation)
          * [Installation From Hackage](#installation-from-hackage)
          * [Installation From Stackage](#installation-from-stackage)
      * [Usage](#usage)
  * [Project](#project)
      * [Links](#links)
      * [Tags](#tags)
      * [Contribution](#contribution)
      * [License](#license)

  ## Overview

  Queue Sheet is a utility that builds PDFs of lists.  Printed PDFs can be used
  to track progress when offline.

  Use Queue Sheet to track:

  * podcasts
  * research papers
  * conference videos
  * university lectures

  ## CLI

  ### Requirements

  Queue Sheet has only been tested on Linux.  It *might* work on Windows and
  macOS.

  Queue Sheet uses [XeTeX][] to build PDFs.  It is usually installed as part of
  [TeX Live][].  The LaTeX packages used depend entirely on the contents of the
  template.

  [XeTeX]: <https://tug.org/xetex/>
  [TeX Live]: <https://www.tug.org/texlive/>

  ### Installation

  #### `.deb` Package Installation

  Check the [Releases][] page for `.deb` packages.

  [Releases]: <https://github.com/ExtremaIS/queue-sheet-haskell/releases>

  #### `.rpm` Package Installation

  Check the [Releases][] page for `.rpm` packages.

  #### Installation From Hackage

  Install Queue Sheet from [Hackage][] using [Cabal][] as follows:

  ```
  $ cabal v2-install queue-sheet
  ```

  [Hackage]: <https://hackage.haskell.org/package/queue-sheet>
  [Cabal]: <https://www.haskell.org/cabal/>

  #### Installation From Stackage

  Install Queue Sheet from [Stackage][] using [Stack][] as follows:

  ```
  $ stack install queue-sheet
  ```

  [Stackage]: <https://www.stackage.org/package/queue-sheet>
  [Stack]: <https://haskellstack.org/>

  ### Usage

  See the [`queue-sheet` man page][] for usage information.

  See the [examples][] directory for example queue files, templates, and built
  output.

  [`queue-sheet` man page]: <doc/queue-sheet.1.md>
  [examples]: <examples>

  ## Project

  ### Links

  * Hackage: <https://hackage.haskell.org/package/queue-sheet>
  * Stackage: <https://www.stackage.org/package/queue-sheet>
  * Flora: <https://flora.pm/packages/@hackage/queue-sheet>
  * GitHub: <https://github.com/ExtremaIS/queue-sheet-haskell>
  * GitHub Actions CI: <https://github.com/ExtremaIS/queue-sheet-haskell/actions>

  ### Branches

  The `main` branch is reserved for releases.  It may be considered stable, and
  `HEAD` is always the latest release.

  The `develop` branch is the primary development branch.  It contains changes
  that have not yet been released, and it is not necessarily stable.

  [Hackage revisions][] are made for metadata changes, such as relaxation of
  constraints when new versions of dependencies are released.  The
  `queue-sheet.cabal` metadata in the `main` branch may therefore not match that
  of Hackage.  The `queue-sheet.cabal` metadata in the `develop` branch may
  match, *unless* work is being done on a new release that contains other
  changes.

  [Hackage revisions]: <https://github.com/haskell-infra/hackage-trustees/blob/master/revisions-information.md#hackage-metadata-revisions--what-they-are-how-they-work>

  ### Tags

  All releases are tagged in the `main` branch.  Release tags are signed using
  the
  [`security@extrema.is` GPG key][].

  [`security@extrema.is` GPG key]: <https://keyserver.ubuntu.com/pks/lookup?search=0x1D484E4B4705FADF&fingerprint=on&op=index>

  ### Contribution

  Issues and feature requests are tracked on GitHub:
  <https://github.com/ExtremaIS/queue-sheet-haskell/issues>

  Issues may also be submitted via email to <bugs@extrema.is>.

  ### License

  This project is released under the [MIT License][] as specified in the
  [`LICENSE`][] file.

  [MIT License]: <https://opensource.org/licenses/MIT>
  [`LICENSE`]: <LICENSE>
description-type: markdown
hash: e464e6c0be8f82c44a041bd4885460b95e0280077c86e692c472a7c3895aa596
homepage: https://github.com/ExtremaIS/queue-sheet-haskell#readme
latest: 0.8.0.1
license-name: MIT
maintainer: Travis Cardwell <travis.cardwell@extrema.is>
synopsis: queue sheet utility
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  queue-sheet: '>=0'
  tasty: '>=1.2.3 && <1.6'
  tasty-hunit: '>=0.10.0.3 && <0.11'
