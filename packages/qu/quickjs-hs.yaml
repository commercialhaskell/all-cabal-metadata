all-versions:
- 0.1.2.3
- 0.1.2.4
author: Sam Balco
basic-deps:
  aeson: '>=1.1 && <1.6'
  base: '>=4.11 && <5'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.5 && <0.7'
  exceptions: '>=0.8 && <0.11'
  inline-c: '>=0.5 && <0.10'
  mtl: '>=2.2.2 && <2.3'
  scientific: '>=0.3.5 && <0.4'
  string-conv: '>=0.1.2 && <0.2'
  text: '>=1.2.0 && <1.3'
  time: '>=1.8 && <1.10'
  transformers: '>=0.5 && <0.6'
  unliftio-core: '>=0.1 && <0.2.1'
  unordered-containers: '>=0.2.8 && <0.3'
  vector: '>=0.12 && <0.13'
changelog: |-
  # Changelog for quickjs-hs

  ### 0.1.2.4

  * Bumped the quickjs library to 2020-11-08 release
  * Relaxed QuickCheck bounds (PR by poscat0x04)

  ### 0.1.2.3

  * Fix for infinite loop caused by incorrect defintion of SomeJSRuntimeException

  ### 0.1.2.2

  * Bumped the quickjs library to release 2020-09-06

  ### 0.1.2.1

  * This one should compile

  ### 0.1.2

  * removed `DerivingVia` for better backwards compatibility

  ### 0.1.1

  * relaxed bounds on packages
  * removed explicit TemplateHaskell dependency

  ### 0.1

  * initial release
changelog-type: markdown
description: |
  # quickjs-hs

  ![Tests Cabal](https://github.com/goodlyrottenapple/quickjs-hs/workflows/Tests%20Cabal/badge.svg)


  This package provides a Haskell wrapper for the [QuickJS](https://bellard.org/quickjs/) Javascript Engine. It has been inspired by the [quickjs-rs](https://github.com/theduke/quickjs-rs) and [ocaml-quickjs](https://github.com/dhcmrlchtdj/ocaml-quickjs) libraries.
  ## Features

  The functionality is quite basic and is currently limited to:
  - evaluating JS code
  - calling a JS function in the global scope
  - marshalling [Aeson Values](https://hackage.haskell.org/package/aeson-1.5.3.0/docs/Data-Aeson.html#t:Value) to and from JSValues.


  ## Examples
  Evaluate an expression:

  ```haskell
  import Quickjs

  one_plus_two = quickjs $ do
    res <- eval "1+2"
    liftIO $ print res
  ```

  Declare a function and call it on an argument:

  ```haskell
  call_f = quickjs $ do
    _ <- eval_ "f = (x) => x+1"
    res <- eval "f(2)"
    liftIO $ print res
  ```

  Pass a Haskell value (which has a [ToJSON](https://hackage.haskell.org/package/aeson-1.5.3.0/docs/Data-Aeson.html#t:ToJSON) instance) to the JS runtime:

  ```haskell
  aeson_marshall = quickjs $ do
    _ <- eval_ "f = (x) => x+1"
    res <- withJSValue (3::Int) $ \x -> call "f" [x]
    liftIO $ print res
  ```

  ## Contributing

  Please feel free to report bugs/submit feature requests via the [github issue tracker](https://github.com/goodlyrottenapple/quickjs-hs/issues) and submit any pull requests to the [git repository](https://github.com/goodlyrottenapple/quickjs-hs/)
description-type: markdown
hash: d2556dedb1232f5377f12697b5a1f2be5e924cfd99d59f3d8d9427b5c8274cd2
homepage: https://github.com/goodlyrottenapple/quickjs-hs#readme
latest: 0.1.2.4
license-name: MIT
maintainer: goodlyrottenapple@gmail.com
synopsis: Wrapper for the QuickJS Javascript Engine
test-bench-deps:
  HUnit: '>=1.6.0.0 && <1.7'
  QuickCheck: '>=2.9 && <2.15'
  aeson: '>=0'
  base: '>=0'
  exceptions: '>=0'
  quickjs-hs: '>=0'
  tasty: '>=1.0 && <1.3'
  tasty-hunit: '>=0.10 && <0.11'
  tasty-quickcheck: '>=0.9 && <0.11'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
