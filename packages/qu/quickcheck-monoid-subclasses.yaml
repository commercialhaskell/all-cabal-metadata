homepage: ''
changelog-type: markdown
hash: 16a9751c67dc02b235b455168ead52b6db2a1a37e554fa574966aa4c25a3c29d
test-bench-deps:
  monoid-subclasses: '>=1.2.2 && <1.3'
  bytestring: '>=0.10.12.0 && <0.12'
  base: '>=4.14.3.0 && <4.18'
  hspec: '>=2.10.7 && <2.11'
  text: '>=1.2.4.1 && <2.1'
  quickcheck-classes: '>=0.6.5.0 && <0.7'
  quickcheck-monoid-subclasses: -any
  commutative-semigroups: '>=0.1.0.0 && <0.2'
  containers: '>=0.6.5.1 && <0.7'
  quickcheck-instances: '>=0.3.28 && <0.4'
  QuickCheck: '>=2.14.2 && <2.15'
  vector: '>=0.12.3.1 && <0.14'
maintainer: mail@jonathanknowles.net
synopsis: Testing monoid subclass instances with QuickCheck
changelog: |
  # 0.1.0.0

  - Added laws for the `LCMMonoid` type class.
  - Added laws for the `GCDMonoid` type class to match those of `LCMMonoid`.

  # 0.0.0.1

  - Revised lower dependency bound for the `vector` package.

  # 0.0.0.0

  - Provides support for testing instances of classes defined in the following
    modules:
      - `Data.Monoid.GCD`
      - `Data.Monoid.Monus`
      - `Data.Monoid.Null`
      - `Data.Semigroup.Cancellative`
basic-deps:
  monoid-subclasses: '>=1.2.2 && <1.3'
  internal: -any
  base: '>=4.14.3.0 && <4.18'
  quickcheck-classes: '>=0.6.5.0 && <0.7'
  QuickCheck: '>=2.14.2 && <2.15'
all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.1.0.0
author: Jonathan Knowles
latest: 0.1.0.0
description-type: markdown
description: "# `quickcheck-monoid-subclasses`\n\n<a href=\"http://jonathanknowles.net/quickcheck-monoid-subclasses/\"><img
  src=\"https://img.shields.io/badge/API-Documentation-green\" /></a>\n\n## Overview\n\nThe
  `quickcheck-monoid-subclasses` library provides:\n- [QuickCheck](https://hackage.haskell.org/package/QuickCheck)
  support for testing instances of type classes defined in the [`monoid-subclasses`](https://hackage.haskell.org/package/monoid-subclasses)
  library.\n- Compatibility with the [`quickcheck-classes`](https://hackage.haskell.org/package/quickcheck-classes)
  library.\n- Reusable properties for type class laws, in the form of [`Laws`](https://hackage.haskell.org/package/quickcheck-classes/docs/Test-QuickCheck-Classes.html#t:Laws)
  definitions.\n\n## Usage\n\nIn general, usage is identical to that of the [`quickcheck-classes`](https://hackage.haskell.org/package/quickcheck-classes)
  library. If you're already familiar with [`quickcheck-classes`](https://hackage.haskell.org/package/quickcheck-classes),
  then using this library should be straightforward.\n\n### Testing laws for a single
  type class\n\nTo test that the laws of a particular class hold for a particular
  type, use the [`lawsCheck`](https://hackage.haskell.org/package/quickcheck-classes/docs/Test-QuickCheck-Classes.html#t:lawsCheck)
  function with the [`Laws`](https://hackage.haskell.org/package/quickcheck-classes/docs/Test-QuickCheck-Classes.html#t:Laws)
  definition for the class you wish to test.\n\n> #### :stars: Example\n>\n> To test
  that the [`Monus`](https://hackage.haskell.org/package/monoid-subclasses/docs/Data-Monoid-Monus.html#t:Monus)
  laws hold for the [`Sum`](https://hackage.haskell.org/package/base/docs/Data-Monoid.html#t:Sum)
  [`Natural`](https://hackage.haskell.org/package/base/docs/Numeric-Natural.html#t:Natural)
  type:\n>\n> ```hs\n> import Data.Monoid (Sum)\n> import Data.Proxy (Proxy (Proxy))\n>
  import Numeric.Natural (Natural)\n> import Test.QuickCheck.Classes (lawsCheck)\n>
  import Test.QuickCheck.Classes.Monoid.Monus (monusLaws)\n>\n> lawsCheck (monusLaws
  (Proxy :: Proxy (Sum Natural)))\n> ```\n>\n> If all tests pass, you should see output
  similar to:\n>\n> ```hs\n> Monus: axiom1 +++ OK, passed 100 tests.\n> Monus: axiom2
  +++ OK, passed 100 tests.\n> Monus: axiom3 +++ OK, passed 100 tests.\n> Monus: axiom4
  +++ OK, passed 100 tests.\n> Monus: stripPrefixOverlap +++ OK, passed 100 tests.\n>
  Monus: stripSuffixOverlap +++ OK, passed 100 tests.\n> ```\n\n### Testing laws for
  multiple type classes\n\nTo test that the laws of __multiple__ classes hold for
  a particular type, use the [`lawsCheckOne`](https://hackage.haskell.org/package/quickcheck-classes/docs/Test-QuickCheck-Classes.html#t:lawsCheckOne)
  function with the [`Laws`](https://hackage.haskell.org/package/quickcheck-classes/docs/Test-QuickCheck-Classes.html#t:Laws)
  definitions for the classes you wish to test.\n\n> #### :stars: Example\n>\n> To
  test that the [`Sum`](https://hackage.haskell.org/package/base/docs/Data-Monoid.html#t:Sum)
  [`Natural`](https://hackage.haskell.org/package/base/docs/Numeric-Natural.html#t:Natural)
  type satisfies the laws of [`Semigroup`](https://hackage.haskell.org/package/base/docs/Data-Semigroup.html#t:Semigroup)
  and its subclasses:\n>\n> ```hs\n> import Data.Monoid (Sum)\n> import Data.Proxy
  (Proxy (Proxy))\n> import Numeric.Natural (Natural)\n> import Test.QuickCheck.Classes\n>
  import Test.QuickCheck.Classes.Monoid.GCD\n> import Test.QuickCheck.Classes.Monoid.Monus\n>
  import Test.QuickCheck.Classes.Monoid.Null\n> import Test.QuickCheck.Classes.Semigroup.Cancellative\n>
  \n> lawsCheckOne (Proxy :: Proxy (Sum Natural))\n>     [ cancellativeGCDMonoidLaws\n>
  \    , cancellativeLaws\n>     , commutativeLaws\n>     , gcdMonoidLaws\n>     ,
  leftCancellativeLaws\n>     , leftGCDMonoidLaws\n>     , leftReductiveLaws\n>     ,
  monoidLaws\n>     , monoidNullLaws\n>     , monusLaws\n>     , overlappingGCDMonoidLaws\n>
  \    , positiveMonoidLaws\n>     , reductiveLaws\n>     , rightCancellativeLaws\n>
  \    , rightGCDMonoidLaws\n>     , rightReductiveLaws\n>     , semigroupLaws\n>
  \    ]\n> ```\n\n## Subclasses and superclasses\n\nEach of the [`Laws`](https://hackage.haskell.org/package/quickcheck-classes/docs/Test-QuickCheck-Classes.html#t:Laws)
  definitions provided by this library corresponds to exactly __one__ type class,
  and includes __just__ the laws for that class. Laws for subclasses and superclasses
  are __not__ automatically included. Therefore, you'll need to __explicitly__ test
  the laws of every single class you wish to cover.\n\n## Coverage checks\n\nThis
  library includes __coverage checks__ to ensure that important cases are covered,
  and to reduce the probability of test passes that are false positives. These coverage
  checks are performed automatically.\n\nTo increase coverage of interesting and important
  cases, this library also checks that laws hold for __combinations__ of generated
  arbitrary values.\n\n> #### :stars: Example\n>\n> Suppose we are testing the following
  law:\n>\n> ```hs\n> isPrefixOf a b == isJust (stripPrefix a b)\n> ```\n> \n> This
  library will also test that the following __derived__ laws hold:\n> \n> ```hs\n>
  isPrefixOf a (a <> a) == isJust (stripPrefix a (a <> a))\n> isPrefixOf a (a <> b)
  == isJust (stripPrefix a (a <> b))\n> isPrefixOf a (b <> a) == isJust (stripPrefix
  a (b <> a))\n> ```\n"
license-name: Apache-2.0
