all-versions:
- 0.9.0.0
author: |-
  Alexander S. Green, Peter LeFanu Lumsdaine, Won Ng,
  Neil J. Ross, Peter Selinger, Benoit Valiron
basic-deps:
  base: '>=4.5 && <5'
  containers: '>=0.5.2.1'
  fixedprec: '>=0.2.1.0'
  mtl: '>=2.1.2'
  newsynth: '>=0.3.0.1'
  quipper-language: '>=0'
  quipper-libraries: '>=0'
  quipper-utils: '>=0'
  random: '>=1.0.1.1'
changelog: "December 29, 2019: Release 0.9.0.0\n\n * Overhauled module structure:\n
  \n   Old:                New:\n   ====                ====\n   \n   Quipper.XYZ
  \        Quipper.Internal.XYZ\n   QuipperLib.XYZ      Quipper.Libraries.XYZ\n   Libraries.XYZ
  \      Quipper.Utils.XYZ\n   Algorithms.XYZ      Quipper.Algorithms.XYZ\n   tests
  \              Quipper.Demos\n   Programs            Quipper.Programs\n\n * Re-packaged
  Quipper as Cabal packages. Added executables quipper,\n   quipper-pp, quipperi,
  quipperdoc in lieu of shell scripts.\n * Moved PDF Previewer to a separate library
  in Quipper.Utils.Preview\n * Added a MonadFail instance to Circ, to keep ghc >=
  7.4 happy\n * Use type class synonyms to avoid warnings about simplifiable class.\n
  * Compatibility: removed obsolete functoin Map.insertWith'.\n * Added MultiControlledNot
  demo.\n * Removed dependency on set-monad, which is broken upstream.\n * Fixed some
  bugs in the stabilizer simulation.\n * Moved QuantumIf from BF to Libraries.\n *
  Added --help option to all Quipper tools.\n * Removed Quipper.Utils.ShowAll\n *
  Fixed some compiler errors and removed some unnecessary type class\n   assumptions.\n\nJuly
  27, 2016: Release 0.8\n\n * Portability: compatibility fixes for GHC 8.0. Note:
  GHC 7.10 is too\n   broken and will not be supported by Quipper.\n * Added tests/SimulationTest\n
  * Added QPrep and QUnPrep to the simulator\n\nOctober 14, 2014: Release 0.7\n\n
  * Portability: compatibility fixes for GHC 7.8.\n\nJanuary 16, 2014: Release 0.6\n\n
  * Minor edits and documentation updates.\n * Added a new gate gate_iX_inv\n * Added
  \"alternate\" version of synthesis algorithm, using only\n   generators of determinant
  1 if possible.\n * Synthesis code is now in an external package \"newsynth\".\n
  * Rendering code is now in an external package \"easyrender\".\n * Updated for use
  with fixedprec-0.2.1.0.\n\nSeptember 2, 2013: Release 0.5\n\n * Portability: compatibility
  fixes for GHC 7.6.2.\n * Portability: fixed Windows incompatibility bug. Handling
  of Ctrl-C\n   may or may not work on Windows, depending on console.\n * Added quipperi
  script, analogous to ghci.\n * New library QuipperLib.ClassicalOptim: algebraic
  optimization of\n   auto-generated classical circuits. Added \"optimized\" oracle
  to BWT\n   algorithm.\n * QuipperLib.Decompose: Added decomposition into a \"standard\"
  gate\n   set, consisting of X, Y, Z, H, S, S-dagger, T, T-dagger, and CNOT.\n   Added
  KeepPhase flag to some transformers.\n * QuipperLib.GateDecompositions: added more
  gates.\n * New library Libraries.Synthesis.RotationDecomposition: implements a\n
  \  variant of the algorithm from Nielsen and Chuang to decompose an\n   nxn unitary
  operator into one- and two-level rotations.\n * New library QuipperLib.Unboxing:
  unboxing transformers.\n * Updated ASCII output format; improved circuit parser
  efficiency.\n * Miscellaneous bug fixes: malformed W-gates, qdata_of_qubits,\n   floorlog.\n
  * Fixed handling of iterated subroutines in depth transformer.\n * Documentation
  updates and minor refactoring.\n\nJune 19, 2013: Release 0.4\n\n * First public
  release.\n"
changelog-type: text
description: "Using the Quipper tools\n=======================\n\nThe quipper-tools
  package contains a number of stand-alone Quipper\nprograms, most of which read a
  circuit in the Quipper ASCII format on\nstandard input. These tools are intended
  as examples; they illustrate\nhow other such tools can be written. Each tool also
  has a --help\noption to display usage information.\n\nGraphical viewing of circuits:\n------------------------------\n\n*
  quipper-eps: convert a circuit from ASCII to EPS format.\n\n* quipper-pdf: convert
  a circuit from ASCII to PDF format.\n\n* quipper-preview: read a circuit and launch
  the previewer.\n\nDecomposing circuits into different gate sets:\n----------------------------------------------\n\n*
  quipper-approximate: decompose rotation and phase gates into the\n  Clifford+T base,
  using the approximate synthesis algorithm of \n  http://arxiv.org/abs/1403.2975.\n\n*
  quipper-binary: decompose a circuit into binary gates.\n\n* quipper-cliffordt: decompose
  a circuit into the Clifford+T base,\n  using both exact and approximate synthesis.\n\n*
  quipper-exact: decompose all gates that permit exact Clifford+T\n  representations
  into the following gates: controlled-not (with\n  positive or negative control),
  and single-qubit Clifford gate, T,\n  and T⁻¹.  Classical controls and classical
  gates are not subject to\n  the gate base, and are left untouched.\n\n* quipper-standard:
  decompose a circuit into the \"standard\" gates {X,\n  Y, Z, H, S, S⁻¹, T, T⁻¹,
  CNOT}, using exact and approximate\n  synthesis.\n\n* quipper-strict: decompose
  a circuit into the gates {H, S, T, CNOT},\n  using exact and approximate synthesis.\n\n*
  quipper-trimcontrols: trim excess controls from gates, so that the\n  gates {NOT,
  X, Y, Z, iX} have at most two controls, phase gates have\n  no controls, and all
  other gates have at most one control.\n\n* quipper-unbox: unwind a circuit by inlining
  all top-level boxed\n  subroutines. This can substantially increase the size of
  the circuit\n  representation. \n\nResource analysis:\n------------------\n\n* quipper-depth:
  read a circuit and output its depth.\n\n* quipper-gatecount: read a circuit and
  output gate counts.\n\nSimulation:\n-----------\n\n* quipper-simulate: read a circuit
  and simulate it by applying it to\n  every posssible basis vector. This is not efficient
  and only works\n  for very small circuits. Any measurements in the circuit will
  be\n  simulated probabilistically.\n\nMiscellaneous:\n--------------\n\n* quipper-ascii:
  the identity function on circuits: read a circuit on\n  standard output and then
  output the same circuit to standard\n  output. Illustrates how to parse and output
  the Quipper ASCII\n  circuit format.\n\n* quipper-qclparser: read an execution trace
  produced by Ömer's QCL,\n  and turn it into a Quipper circuit.\n"
description-type: text
hash: a63fb987a853ed45f7cfc72e2d50cca7fd1039f06bbcf018bcb9044ca9aebb0a
homepage: http://www.mathstat.dal.ca/~selinger/quipper/
latest: 0.9.0.0
license-name: BSD-3-Clause
maintainer: selinger@mathstat.dal.ca
synopsis: Miscellaneous stand-alone tools for Quipper
test-bench-deps: {}
