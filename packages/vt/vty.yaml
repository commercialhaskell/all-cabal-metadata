all-versions:
- 3.0.0
- 3.0.1
- 3.0.2
- 3.0.4
- 3.1.0
- 3.1.2
- 3.1.4
- 3.1.6
- 3.1.8
- 3.1.8.2
- 3.1.8.4
- 4.0.0
- 4.0.0.1
- 4.2.1.0
- 4.4.0.0
- 4.4.0.0.1
- 4.6.0.1
- 4.6.0.2
- 4.6.0.4
- 4.6.0.6
- 4.7.0.0
- 4.7.0.4
- 4.7.0.6
- 4.7.0.8
- 4.7.0.10
- 4.7.0.12
- 4.7.0.14
- 4.7.0.18
- 4.7.0.20
- 4.7.1
- 4.7.2
- 4.7.3
- 4.7.4
- 4.7.5
- 5.0.0
- 5.0.1
- 5.0.2
- 5.1.0
- 5.1.1
- 5.1.3
- 5.1.4
- 5.2.0
- 5.2.1
- 5.2.2
- 5.2.3
- 5.2.4
- 5.2.5
- 5.2.6
- 5.2.7
- 5.2.8
- 5.2.9
- 5.2.10
- 5.2.11
- '5.3'
- 5.3.1
- 5.4.0
- 5.5.0
- '5.6'
- '5.7'
- 5.7.1
- '5.8'
- 5.8.1
- '5.9'
- 5.9.1
- '5.10'
- '5.11'
- 5.11.1
- 5.11.2
- 5.11.3
- '5.13'
- '5.14'
- '5.15'
- 5.15.1
- '5.16'
- '5.17'
- 5.17.1
- '5.18'
- 5.18.1
- '5.19'
- 5.19.1
- 5.19.2
- '5.20'
- '5.21'
- '5.22'
- '5.23'
- 5.23.1
- '5.24'
- 5.24.1
- '5.25'
- 5.25.1
- '5.26'
- '5.27'
- '5.28'
- 5.28.1
- 5.28.2
- '5.29'
- '5.30'
- '5.31'
- '5.32'
- '5.33'
- '5.34'
- '5.35'
- 5.35.1
- '5.36'
- '5.37'
- '5.38'
- '5.39'
- '6.0'
- '6.1'
- '6.2'
author: AUTHORS
basic-deps:
  base: '>=4.8 && <5'
  binary: '>=0'
  blaze-builder: '>=0.3.3.2 && <0.5'
  bytestring: '>=0'
  deepseq: '>=1.1 && <1.6'
  directory: '>=0'
  filepath: '>=0'
  microlens: <0.4.14
  microlens-mtl: '>=0'
  mtl: '>=1.1.1.0 && <2.4'
  parsec: '>=0'
  stm: '>=0'
  text: '>=0.11.3'
  utf8-string: '>=0.3 && <1.1'
  vector: '>=0.7'
changelog: "\n6.2\n---\n\nPackage changes:\n* Update version bounds to support building
  with GHC 9.8\n\nBug fixes:\n* Updated `PictureToSpans` module to implement its lenses
  manually to\n  avoid template haskell which has trouble on Windows and GHC 9.2 (#271)\n\n6.1\n---\n\nAPI
  changes:\n* `ColorMode` got a `Read` instance.\n* The `Config` type got a new `configPreferredColorMode`
  field for\n  specifying a preferred `ColorMode`. Backend packages should respect\n
  \ this field, but note that `vty` itself does not (and cannot) enact\n  this preference
  since it's up to the backend driver to configure the\n  color mode.\n* The Vty configuration
  file got a new `colorMode` field whose value is\n  a string literal compatible with
  the `ColorMode` `Read` instance.\n\n6.0\n---\n\nThis release marks the beginning
  of multi-platform support in Vty.\nGetting to this point involved removing Unix-specific
  functionality\nfrom Vty and moving it to a new package, `vty-unix`. Windows support\nis
  now provided via a `vty-windows` package. Another new package,\n`vty-crossplatform`,
  is provided as a convenience for applications that\nwant to support both Unix and
  Windows platforms automatically at build\ntime. See the migration guide below for
  details on how to upgrade.\n\n**Migration guide for 6.0**\n\nTo upgrade to this
  version of Vty, most people will only need to take a\nfew steps:\n\n1. Add a package
  dependency on `vty-unix`, `vty-windows,` or\n   `vty-crossplatform`, depending on
  the desired level of platform\n   support. For example, if an application only supports
  Unix systems,\n   it should depend on `vty-unix`. But if an application is intended
  to\n   work anywhere Vty works, then `vty-crossplatform` is the best choice.\n2.
  Import `mkVty` from the platform package in step (1). (`mkVty` was\n   removed from
  the `vty` package and is now the responsibility of each\n   platform package.) Imports
  are as follows:\n   * `vty-unix`: `Graphics.Vty.Platform.Unix`\n   * `vty-windows`:
  `Graphics.Vty.Platform.Windows`\n   * `vty-crossplatform`: `Graphics.Vty.CrossPlatform`\n3.
  Maintain any existing package dependency on `vty`; the core library\n   abstractions,
  types, and functions are still obtained from `vty`\n   itself. The platform packages
  do not re-export the core library's\n   modules.\n4. If desired, call `Graphics.Vty.Config.userConfig`
  to load the Vty\n   user configuration since this step is no longer automatic.\n5.
  Some configurations have been moved to `Graphics.Vty.Output`. For \n   example,
  `mouseMode` is no longer a field in `VtyUserConfig`. \n   Instead, use `setMode`
  to enable it.\n\nFor applications using more of Vty's API than just the basic\ninitialization
  and rendering API, the full change list is provided\nbelow. For people who want
  to write their own Vty platform package like\n`vty-unix`, see `PLATFORM-HOWTO.md`.\n\n**Detailed
  change list for 6.0**\n\n* Package changes:\n  * The following modules got added
  to the `vty` library:\n    * `Graphics.Vty.UnicodeWidthTable.Main`\n  * The following
  modules got moved to `vty-unix`:\n    * `Data.Terminfo.Eval`\n    * `Data.Terminfo.Parse`\n
  \ * The following modules got moved to `vty-unix` into the\n    `Graphics.Vty.Platform.Unix`
  module namespace (previously\n    `Graphics.Vty`):\n    * `Graphics.Vty.Input.Classify`\n
  \   * `Graphics.Vty.Input.Classify.Parse`\n    * `Graphics.Vty.Input.Classify.Types`\n
  \   * `Graphics.Vty.Input.Focus`\n    * `Graphics.Vty.Input.Loop`\n    * `Graphics.Vty.Input.Mouse`\n
  \   * `Graphics.Vty.Input.Paste`\n    * `Graphics.Vty.Input.Terminfo`\n    * `Graphics.Vty.Output.TerminfoBased`\n
  \   * `Graphics.Vty.Output.XTermColor`\n  * The following modules were removed entirely
  (with contents migrated\n    elsewhere as needed):\n    * `Graphics.Vty.Inline.Unsafe`\n
  \   * `Graphics.Vty.Output.Interface` (migrated to\n      `Graphics.Vty.Output`)\n
  \ * Removed library dependencies on the following packages:\n    * `ansi-terminal`\n
  \   * `containers`\n    * `terminfo`\n    * `transformers`\n    * `unix`\n  * The
  following executables were moved to other packages:\n    * `vty-build-width-table`
  (moved to `vty-unix` as\n      `vty-unix-build-width-table`)\n    * `vty-mode-demo`
  (moved to `vty-crossplatform`)\n* API changes:\n  * `Graphics.Vty.mkVty` moved to
  the `vty-unix` package's\n    `Graphics.Vty.Platform.Unix` module.\n  * Added `Graphics.Vty.mkVtyFromPair`
  for platform packages to\n    construct `Vty` handles.\n  * The contents of the
  `Graphics.Vty.Output.Interface` module were\n    merged into `Graphics.Vty.Output`.\n
  \ * The `vty-build-width-table` tool was removed from the `vty` package,\n    but
  its core functionality is now exposed as a library for\n    platform packages to
  use to provide platform-specific tools using\n    `Graphics.Vty.UnicodeWidthTable.Main`
  and a new tool by the same\n    name was added to the `vty-unix` package.\n  * `Graphics.Vty.Events`:
  the `InternalEvent` type's\n    `ResumeAfterSignal` constructor was renamed to\n
  \   `ResumeAfterInterrupt` to be a bit more abstract and\n    platform-agnostic.\n
  \ * Removed the following lenses for fields of the `Input` type:\n    * `eventChannel`
  (was for `_eventChannel` which was then renamed to\n      `eventChannel`)\n    *
  `configRef` (was for `_configRef` which was then renamed to\n      `configRef`)\n
  \ * The `Output` record type got a new field, `setOutputWindowTitle`.\n  * The `Input`
  record type got a new field, `inputLogMsg :: String ->\n    IO ()`, for logging
  to the Vty log.\n  * `Graphics.Vty.Config` now exposes `VtyUserConfig` instead of\n
  \   `Config`. Many of its fields were Unix-specific and were\n    consequently moved
  to the `UnixSettings` type in `vty-unix`.\n  * The `VtyUserConfig` type's fields
  got a `config` field name prefix.\n* Behavior changes:\n  * Since `vty` no longer
  implements `mkVty`, the Vty user configuration\n    is no longer implicitly loaded
  by Vty-based applications.\n    Instead, it is now up to the applications to call\n
  \   `Graphics.Vty.Config.userConfig` to load any user-provided\n    configuration.\n
  \ * Vty no longer implicitly attempts to load configured Unicode\n    width tables.
  It is now the responsibility of the platform packages\n    (such as `vty-unix`)
  and/or applications to load tables via\n    `Graphics.Vty.UnicodeWidthTable.IO`
  and install them via\n    `Graphics.Vty.UnicodeWidthTable.Install`.\n* Changes to
  demonstration programs:\n  * `EventEcho`, `ModeDemo`, and `Rogue` demo programs
  moved to the\n    `vty-crossplatform` package.\n* Changes to tests:\n  * Where appropriate,
  some test programs and test cases were moved to\n    `vty-unix` or `vty-crossplatform`.\n\n5.39\n----\n\nPackage
  changes:\n* Now builds with `mtl-2.3.*`.\n\nBug fixes:\n* Fixed a long-standing
  issue where unused input on stdin could cause a\n  memory error and a crash when
  Vty was being initialized. (#266)\n\n5.38\n----\n\nThis release includes numerous
  API changes, although none of them should\nbreak your programs. If so, please open
  a ticket on the Vty issue\ntracker.\n\nPackage changes:\n* Support mtl 2.3 (thanks
  Daniel Firth)\n* The test and example collections got completely overhauled to clean
  up\n  bit rot.\n  * Moved example programs into examples/ under a new vty-examples\n
  \   package.\n  * Moved test suite programs out of vty.cabal and into tests/ under
  a\n    new vty-tests package.\n  * Cleaned up all build-depends lists in all three
  packages to remove\n    unused deps.\n  * Consolidated the test suite library modules
  into the vty-tests\n    library to avoid redundant compilation.\n  * Added build.sh
  to build everything in the development process to\n    help ensure that examples
  and tests don't get forgotten.\n  * Removeed lots of stale/unused modules in old
  test/ directory.\n* Got vty-examples building again and resolved various warnings
  and\n  issues.\n\nAPI changes:\n* All modules got explicit export lists. Prior to
  this release, many\n  modules exported everything they contained, making it difficult
  to\n  know what was really intended to be part of the public API. The new\n  export
  lists should contain everything that applications need; the\n  risk of breakage
  exists but should be minor. Please open a ticket if\n  you were using something
  that is no longer exported. It might be that\n  it was never supposed to be exported
  to begin with, or it might be\n  just something we need to export once again.\n*
  Moved the `attributeControl` function from `Graphics.Vty.Input.Loop`\n  to `Graphics.Vty.Input`.\n*
  Removed the `Graphics.Vty.Image.DisplayText` alias for `Text`.\n* Unified the `Image`
  cropping constructors (thanks Fraser Tweedale)\n\n5.37\n----\n\n* The Xterm backend
  is now used when `TERM` matches `rxvt` or `tmux`.\n* PictureToSpans now uses `error`,
  not `fail`, to avoid dependence on\n  soon-to-be-removed `MonadFail` instance for
  `ST` (#248)\n\n5.36\n----\n\n * Raised `microlens` upper bound to allow building
  with 0.4.13.\n * Replaced incomplete `Show` output for `Picture` with a derived\n
  \  instance; derived `Show` for `Cursor` and `Background`, too.\n\n5.35.1\n------\n\nBug
  fixes:\n * Fixed a build issue with a test program.\n\n5.35\n----\n\nNew features:\n
  * Add support for 24-bit color (thanks @u-quark). This change\n   updates Vty to
  look at the `COLORTERM` environment variable that is\n   conventionally used to
  advertise support for truecolor escape\n   sequences. The change also updates the
  Vty demo to demonstrate\n   24-bit colors. This change also adds a new data type,
  `ColorMode`,\n   to represent the color mode in use, as well as an `Output` interface\n
  \  field, `outputColorMode`, to track the active color mode and use it\n   to clamp
  emitted color escape sequences to the active color range.\n\nAPI changes:\n * All
  types in `Graphics.Vty.Input.Events` now have strict constructor\n   fields.\n *
  Internal events are now wrapped in a new `InternalEvent` type to\n   improve how
  signal handling is done. This change modifies the `Input`\n   type's event channel
  API to produce `InternalEvents`, not `Events`.\n   The new `InternalEvent` either
  wraps `Event` with the `InputEvent`\n   constructor (the previous behavior) or indicates
  that Vty resumed\n   after handling a signal using the `ResumeAfterSignal` constructor.\n
  \  This change avoids the previous use of `EvResize` with lazy exception\n   arguments
  as a sentinel value for `ResumeAfterSignal`.\n\nOther enhancements:\n * Bracketed
  paste parsing performance has been greatly improved thanks\n   to benchmarking and
  optimization work by @iphydf. As part of that\n   work, Vty now uses bytestrings
  rather than Strings internally when\n   parsing input to look for events.\n * The
  `\\b` value is now interpreted as `KBS` (thanks @vglfr)\n\n5.34\n----\n\nAPI changes:\n
  * Added an `NFData` instance for `Event` (thanks Mario Lang)\n * Removed `Monoid`
  and `Semigroup` instances for `Attr` and\n   `MaybeDefault`. This change removed
  the instances because they were\n   misbehaved; merging `Attr` and `MaybeDefault`
  values with these\n   instances resulted in field value losses. For example, before
  this\n   change,\n```\n(defAttr `withForeColor` blue) <> (defAttr `withBackColor`
  green)\n```\n   would result in just\n```\n   (defAttr `withBackColor` green)\n```\n
  \  because the instances were designed to favor the right-hand\n   arguments' fields
  even if they had not been explicitly set\n   (a consequence of the `MaybeDefault`
  `Semigroup` instance).\n   While that behavior was sensible specifically in the
  context of\n   `Graphics.Vty.Inline`, it wasn't a useful user-facing API and it
  made\n   for surprising instance behavior. Since there is actually no good way\n
  \  to handle this in a `Semigroup` instance for `Attr` -- some choices\n   have
  to be made about how to merge two attributes' foreground colors,\n   and that won't
  be much better than what we had -- the instance was\n   just removed.\n\n\n5.33\n----\n\nAPI
  changes:\n* The `Cursor` type got a new `PositionOnly` constructor for cursor\n
  \ placement without visibility.\n\nPackage changes:\n* Relaxed upper bound for `random`\n*
  Updated `microlens` bounds to allow 0.4.12\n\nOther improvements:\n* Various hlint-driven
  improvements (thanks Willem Van Onsem)\n* The implementation of `color240` was improved
  (thanks (Willem Van\n  Onsem)\n\n5.32\n----\n\nNew features:\n * Meta-PageUp and
  Meta-PageDown are now supported (#193)\n * Added `supportsItalics` and `supportsStrikethrough`
  functions to\n   check for feature support in terminfo\n\nBug fixes:\n * Detect
  utf-8 mode in `LANG` regardless of case (thanks Emeka\n   Nkurumeh)\n\n5.31\n----\n\nNew
  features and API changes:\n * Added support for strikethrough mode. This change
  adds a new\n   `strikethrough` `Style` value and uses the `smxx` and `rmxx`\n   Terminfo
  capabilities to activate and deactivate strikethrough mode,\n   respectively. If
  the terminfo does not report those capabilities,\n   this style is ignored.\n *
  `Output`: added the `setDisplayBounds` field to set the output\n   dimensions of
  the output handle; added an implementation of this for\n   the `TerminfoBased` backend.\n\nOther
  changes:\n * The C prototype for `vty_c_get_window_size` in `gwinsz.h` was fixed.\n\n5.30\n----\n\nNew
  features:\n * Added `Graphics.Vty.setWindowTitle` to emit an escape\n   sequence
  to set the window title, provide the terminal emulator\n   accepts Xterm-style title
  sequences. For details, see:\n   https://tldp.org/HOWTO/Xterm-Title-3.html\n\n5.29\n----\n\nAPI
  changes:\n * The Input type got a new field, 'restoreInputState'. This field\n   allows
  the end user to have direct access to the logic needed to\n   restore the terminal's
  input state flags. Prior to having this field,\n   this state restoration logic
  could only be invoked as part of calling\n   'shutdownInput', but since that function
  does other things (like\n   killing threads) it is not advisable to call it repeatedly
  (which is\n   necessary in the use case this change is intended to support). This\n
  \  can be called directly to restore the input state flags as needed,\n   although
  this is not required if 'shutdown' (or 'shutdownInput') is\n   called.\n\nOther
  changes:\n * attributeControl: explicitly enable the ICRNL terminal mode flag (see\n
  \  #187 and c572ad).\n\n5.28.2\n------\n\nBug fixes:\n * Added a package dependency
  on `semigroups` for the\n   `vty-build-width-table` tool on older GHCs (#185)\n\n5.28.1\n------\n\nBug
  fixes:\n * `installUnicodeWidthTable`: use `throwIO`, not `throw`\n\n5.28\n----\n\nThis
  release improves Vty's support for multi-column Unicode characters\nand provides
  greater compatibility with a wider array of terminal\nemulators. The following sections
  summarize the relevant changes, but an\noverview of the new functionality is motivated
  and detailed in the new\n\"Multi-Column Character Support\" README section. For\nhistorical
  context, please also consider reading over\n[#175](https://github.com/jtdaugherty/vty/issues/175).\n\nAPI
  changes:\n * New modules were added:\n   * `Graphics.Vty.UnicodeWidthTable.Types`\n
  \  * `Graphics.Vty.UnicodeWidthTable.IO`\n   * `Graphics.Vty.UnicodeWidthTable.Query`\n
  \  * `Graphics.Vty.UnicodeWidthTable.Install`\n * The `Config` type got a new field,
  `allowCustomUnicodeWidthTables`,\n   that controls whether `mkVty` will attempt
  to load a Unicode width\n   table if specified in the configuration.\n\nConfiguration
  file changes:\n * A new syntax was added to support specifying Unicode width tables
  on\n   a per-`TERM` basis. The syntax is `widthMap <TERM> <PATH>`. See the\n   documentation
  for `Graphics.Vty.Config` for details. Since prior\n   versions of this library
  will silently ignore any configuration file\n   lines they cannot parse, this change
  to user configuration files is\n   at least non-breaking for older versions of Vty.\n\nOther
  changes:\n * The `mkVty` function now automatically attempts to load a custom\n
  \  Unicode width table if one is specified in the configuration,\n   provided `allowCustomUnicodeWidthTables`
  is not set to `Just False`.\n   See the documentation for `Graphics.Vty.mkVty` for
  details.\n * Vty now includes a command line tool, `vty-build-width-table`, that\n
  \  queries the terminal emulator to construct a custom Unicode width\n   table and
  optionally update the Vty configuration file to use it.\n   Programs that want to
  use that tool's functionality may also do so\n   via the API exposed in the various
  modules listed above.\n\n5.27\n----\n\n* Added `Graphics.Vty.Config.getTtyEraseChar`
  to support querying the\n  kernel for the current terminal's settings to obtain
  the character\n  assigned by the `stty erase` command. That can then be added to
  the\n  Vty configuration's input map to map to `KBS` (backspace) if desired.\n\n5.26\n----\n\n*
  Resolved various import warnings (thanks @glguy)\n* Removed the `MonadIO` constraint
  from the Output type's fields and\n  removed `MonadFail` uses (PR #177, thanks @glguy)\n*
  Clarified documentation for ANSI colors (thanks Colby Jenn)\n* `Graphics.Vty.Attributes`
  no longer re-exports\n  `Graphics.Vty.Attributes.Color`\n* The `Graphics.Vty.Attributes.Color`
  module is now exposed (thanks\n  Colby Jenn)\n* Raised upper bound for `microlens`
  to 0.4.12 (thanks Artyom Kazak)\n* Changed from using `System.Posix.Env.getEnv`
  to\n  `System.Environment.lookupEnv` (thanks Jonathan Osser)\n* Added `Graphics.Vty.Image`
  functions for dealing with character width\n  computations on `Text` values instead
  of `Strings`:\n  * `safeWctwidth`\n  * `safeWctlwidth`\n  * `wctwidth`\n  * `wctlwidth`\n\n5.25.1\n------\n\n*
  Avoided a conflict with a Microlens 0.4.10 operator and added an\n  upper bound
  on Microlens of 0.4.11.\n\n5.25\n----\n\n* The Vty type got a new field, isShutdown,
  that returns whether the\n  Vty handle has had its 'shutdown' function called (thanks
  Ian\n  Jeffries)\n* Vty's shutdown function is now thread-safe.\n\n5.24.1\n------\n\n*
  The \"shutdown\" method of Vty handles is now idempotent (#159)\n\n5.24\n----\n\n*
  Add Generic and NFData instances for some types\n* Image: remove custom Show instance,
  add derived Show and Read\n  instances\n* Updated Travis build settings (thanks
  Eric Mertens)\n\n5.23.1\n------\n\n* Fixed a bug where italics did not combine properly
  with other display\n  modes (#155, thanks Eric Mertens)\n\n5.23\n----\n\n* Added
  support for italicized output when terminfo supports it. This\n  takes the form
  of a new Style, \"italic\". Note that most terminfo\n  descriptors do not report
  capabilities for italics, so support for\n  this will be very spotty.\n* Updateed
  text/string function documentation to indicate that escapes\n  are not permitted
  in their inputs.\n\n5.22\n----\n\n* Added Graphics.Vty.Attributes.Color240.color240CodeToRGB
  function\n  (thanks Brent Carmer)\n* Added nextEventNonblocking function (field)
  to Vty type (#87)\n\n5.21\n----\n\n* Picture and Background now provide Eq instances
  (thanks Jaro Reinders)\n* #145: vty builds with microlens 0.4.9 (thanks Daniel Wagner)\n*
  #142: note requirement of threaded RTS\n\n5.20\n----\n\nAPI changes:\n* Split up
  Monoid instances into Monoid and Semigroup for newer GHCs\n  (thanks Ryan Scott)\n\n5.19.1\n------\n\nAPI
  changes:\n* Cursor now provides an Eq instance (thanks Jaro Reinders)\n\n5.19\n----\n\nAPI
  changes:\n* URL hyperlinking (via 'withURL') is now optional and disabled by\n  default
  due to poor support on some common terminals. A new 'Mode'\n  constructor, 'Hyperlink',
  has been added to enable this feature. To\n  change the hyperlinking mode, use 'setMode'
  on the 'outputIface' of a\n  Vty handle.\n\n5.18.1\n------\n\nBug fixes:\n* Reset
  the hyperlink state on line endings to avoid run-on hyperlinks\n\n5.18\n----\n\nAPI
  changes:\n* Added support for hyperlinking attributes (thanks Getty Ritter). This\n
  \ change adds a new Attr field for containing the hyperlink to apply,\n  as per
  https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\n\n5.17.1\n------\n\n*
  withStyle now ignores zero arguments, leaving attribute styles\n  untouched if the
  input style is the null style\n\n5.17\n----\n\nAPI changes:\n* Add support for terminal
  focus events. This change adds a new mode\n  usable with setMode, Focus, that requests
  that the terminal send\n  events on focus lose/gain. This change also adds two new
  Event\n  constructors, EvLostFocus and EvGainedFocus.\n* No longer enable UTF8 mouse
  event encoding. This encoding was not\n  working properly with Terminal.app, and
  using the other modes (SGR,\n  etc.) work.\n* Graphics.Vty.Attributes: escape backticks
  in Haddock comment (fixes\n  #131)\n\n5.16\n----\n\nAPI changes:\n* Added support
  for mouse wheel events while in mouse mode. The Button\n  type got two new constructors
  as a result: BScrollUp and BScrollDown.\n  Thanks to doublescale@tutanota.com for
  this contribution!\n\nBug fixes:\n* charFill now clamps negative arguments to zero
  (thanks Eric Mertens!)\n\n5.15.1\n------\n\nPackage changes:\n* Documentation files
  are now marked accordingly (thanks Michal\n  Suchánek)\n\nBug fixes:\n* translateX/Y:
  fix negative translations\n\n5.15\n----\n\nPackage changes:\n* Discontinued support
  for GHC versions prior to 7.10.1.\n* Removed instructions and configuration for
  Stack builds since they\n  are no longer supported.\n* Clarified README mention
  of (lack of) Windows support (contributors\n  wanted, though!)\n* Removed dependency
  on data-default (see below).\n\nAPI changes:\n* Moved color definitions from Attributes
  to Color module.\n* In lieu of data-default (Default) instances for Attr and Config,
  use\n  'defAttr' and the new 'defaultConfig' (or 'mempty') instead of 'def'.\n*
  Graphics.Vty.Output no longer re-exports\n  Graphics.Vty.Output.Interface.\n* Removed
  Graphics.Vty.Prelude module and moved DisplayRegion and its\n  accessors to Graphics.Vty.Image.\n*
  Graphics.Vty.Image no longer re-exports Graphics.Vty.Attributes.\n* Graphics.Vty.Picture
  no longer re-exports Graphics.Vty.Image.\n\n5.14\n----\n\n* addMaybeClippedJoin:
  instead of raising an exception when the join\n  is totally clipped, just reduce
  the clip amount and continue\n* addMaybeClipped: skip blit of joins when their primary
  dimension is\n  zero\n* 'string' and related text functions no longer treat an empty
  string\n  as an empty image (thanks Chris Penner). This means that now it is\n  possible
  to use 'str \"\"' as a non-empty image with height 1.\n\n5.13\n----\n\n* Reverted
  changes in 5.12 due to disagreements between terminal\n  emulators and utf8proc;
  for more details, please see the ticket\n  discussion at\n  https://github.com/coreyoconnor/vty/issues/115\n\n5.12\n----\n\n*
  Replaced 'wcwidth' with a call to the utf8proc library's character\n  width function,
  which is much more up to date (by several Unicode\n  versions) and returns the right
  width for a much larger set of\n  characters.\n* Added a bundled version of the
  utf8proc C library.\n\n5.11.3\n------\n\n* Fix mouse event offsets in mouse-up events\n\n5.11.2\n------\n\n*
  Mouse events were modified so that the upper-left corner of the window\n  is (0,0)
  rather than (1,1).\n\n5.11.1\n------\n\n* Add Generic instance for Image\n* nextEvent:
  stop trying to refresh on a resize event (fixes segfault\n  on refresh with normal
  cursor positioning mode)\n* Remove redundant clause from clipForCharWidth (thanks
  Eric Mertens)\n* Update maintainer\n\n5.11\n----\n\n* Vty now raises a VtyConfigurationError
  exception when the TERM\n  evironment variable is missing (thanks Eric Mertens)\n*
  Graphics.Vty.Config got an explicit export list to avoid accidentally\n  exporting
  internal types (thanks Eric Mertens)\n\n5.10\n----\n\n* Add absolute cursor positioning
  mode AbsoluteCursor to Cursor. This\n  mode provides greater control over cursor
  positioning by bypassing\n  the logical positioning provided by default. Rather
  than positioning\n  the cursor by looking at the widths of characters involved,
  this\n  constructor lets you provide a physical row and column instead. This\n  is
  useful in more sophisticated programs. (thanks Eric Mertens)\n* Added a new Generic-derived
  config parser (thanks Eric Mertens)\n* Fixed the MShift case in the configuration
  file parser (thanks Eric\n  Mertens)\n* Fixed wcwidth import and matched safeWcswidth
  to its documented\n  behavior. Previously vty_mk_wcwidth was being imported with
  the\n  wrong type causing the -1 return value to be mapped to the wrong Int\n  value.
  Additionally safeWcswidth was using the unsafe character width\n  function and only
  ensuring that the final result was non-negative.\n  (thanks Eric Mertens)\n\n5.9.1\n-----\n\n*
  Vty now only emits UTF8 charset sequences in terminals without a\n  preexisting
  UTF8 declaration to avoid emitting garbage sequences\n  (fixes #89)\n\n5.9\n---\n\n*
  Added new Output methods supportsBell and ringTerminalBell to find out\n  whether
  the output device has an audio bell and to ring it (see #102)\n\n5.8.1\n-----\n\n*
  Fixed \"refresh\" to work as advertised (see #104)\n\n5.8\n---\n\n* API change:
  EvPaste input event now provides paste data as a raw\n  ByteString rather than a
  String to allow the application to decode how\n  best to decode it\n\n5.7.1\n-----\n\n*
  ModeDemo: added an explicit Control.Applicative import for older GHCs\n\n5.7\n---\n\n*
  Mouse and paste modes are now off by default.\n* The Config type got new fields:
  mouseMode and bracketedPasteMode.\n  These determine whether these modes are enabled
  initially (for\n  terminals that support them).\n* Added a Mode type for modal terminal
  features (mouse events,\n  bracketed paste mode) that is used with new Output interface\n
  \ functions:\n  * supportsMode :: Mode -> Bool tells whether the device supports
  a\n    mode\n  * setMode :: Mode -> Bool -> IO () turns a mode on or off\n  * getModeStatus
  :: Mode -> IO Bool tells you whether a mode is on or\n    off\n* Added a new demo
  program, ModeDemo.hs, to demonstrate usage of modes\n\n5.6\n---\n\n* Added support
  for normal and extended mouse modes in Xterm-like\n  terminals via the MouseDown
  and MouseUp Event constructors\n* Added support for bracketed paste mode in Xterm-like
  terminals via\n  the EvPaste event constructor\n* Added derived Show instances for
  Event and Button (thanks Felix\n  Hirn)\n* Now TERM values containing \"screen\"
  will automatically use the\n  XtermColor driver rather than just TerminfoBased\n\n5.5.0\n-----\n\n*
  Replaced lens dependency with microlens, microlens-mtl, microlens-th\n  dependencies.
  Issue #90\n  * Thanks Jonathan Daugherty\n* Cabal corrections.\n  * Thanks Lennart
  Spitzner\n\n5.4.0\n-----\n\n* Changed eventChannel of Graphics.Vty.Input from Chan
  to\n  TChan. This enables clients to query if there are no pending\n  events. The
  Graphics.Vty interface nextEvent is unchanged.\n  Clients that use eventChannel
  directly will require updating.\n  https://github.com/coreyoconnor/vty/issues/60\n\n5.3.1\n-----\n\n*
  Reverted cabal file to depend on Cabal >= 1.18 instead of 1.20 due to\n  possibly
  breaking this on reasonable GHC versions\n\n5.3\n---\n\n* Upgraded QuickCheck dependency
  to 2.7\n* The standard IO Config (standardIOConfig) was overriding any provided\n
  \ application config. In addition, the inputFd and outputFd could not be\n  changed
  if mkVty was used. Fixed.\n* Correct handling of display attributes at end of line.
  The output\n  attributes are set to default at the end of content for the line and\n
  \ at the start of a new line. Previously the current attribute would\n  extend to
  the next start of content. This was odd to reason about and\n  was the cause of
  https://github.com/coreyoconnor/vty/issues/76 IIRC Yi\n  requires the old behavior
  to display the selection region correctly.\n* shutdown of the input thread is now
  performed using killThread and\n  synchronization on an MVar. For correct handling
  of the terminal read\n  vmin and vtime the read must be a blocking read on an OS
  thread.\n  This places a threadWaitRead, which will be interrupted by the\n  killThread,
  prior to the uninterruptable read. An alternative would be\n  to re-import the read
  foreign call as interruptable.\n\n5.2.11\n------\n\n* deepseq bounds increased for
  tests.\n* Clean up warnings when compiling on 7.10\n  * Thanks Eric Mertens\n* Avoid
  discarding input bytes after multi-byte encoded codepoint\n  * Thanks Eric Mertens\n\n5.2.10\n------\n\n*
  \"str\" now returns EmptyImage for empty strings to match behavior of\n  other string-like
  Image constructors (fixes #74)\n  * Thanks Jonathan Daugherty\n\n5.2.9\n-----\n\n*
  dependency version bumps\n  * https://github.com/coreyoconnor/vty/pull/71\n  * https://github.com/coreyoconnor/vty/pull/70\n*
  Correct/Simplify the example code\n  * Thanks glguy\n  * https://github.com/coreyoconnor/vty/pull/69\n\n5.2.8\n-----\n\n*
  blaze-builder, lens, utf8-string version constraint bump\n    * Thanks glguy\n    *
  https://github.com/coreyoconnor/vty/pull/67\n* Do not differentiate based on TERM_PROGRAM\n
  \   * https://github.com/coreyoconnor/vty/issues/68\n\n5.2.7\n-----\n\n* lens and
  deepseq constraint bump + misc\n    * Thanks ethercrow\n    * https://github.com/coreyoconnor/vty/pull/66\n\n5.2.6\n-----\n\n*
  lens constraint bump\n    * Thanks alexander-b!\n    * https://github.com/coreyoconnor/vty/pull/64\n\n5.2.5\n-----\n\n*
  lens and random version constraint bump.\n    * Thanks RyanGlScott!\n    * https://github.com/coreyoconnor/vty/pull/62\n\n5.2.4\n-----\n\n*
  removed -fpic from cc-options. No longer required.\n    * https://github.com/coreyoconnor/vty/issues/61\n
  \   * https://ghc.haskell.org/trac/ghc/ticket/9657\n    * Thanks Fuuzetsu!\n\n5.2.3\n-----\n\n*
  evaluate/compile the input parsing table once instead of each\n  keystroke.\n    *
  https://github.com/coreyoconnor/vty/pull/59\n    * Thanks ethercrow!\n\n5.2.2\n-----\n\n*
  When looking at input for an event, don't look too deep.\n    * https://github.com/coreyoconnor/vty/pull/57\n
  \   * Thanks ethercrow!\n\n5.2.1\n-----\n\n* Bump upper version bound for lens to
  4.5. Thanks markus1189!\n\n5.2.0\n-----\n\n* Config structure now specifies file
  descriptor to use. The default\n  is stdInput and stdOutput file descriptors. Previously
  Vty used\n  stdInput for input and the follow code for output:\n    * hDuplicate
  stdout >>= handleToFd >>= (`hSetBuffering`\n      NoBuffering)\n    * the difference
  was required by Vty.Inline. Now, Vty.Inline uses\n      the Config structure options
  to acheive the same effect.\n* removed: derivedVtime, derivedVmin, inputForCurrentTerminal,\n
  \ inputForNameAndIO, outputForCurrentTerminal, outputForNameAndIO\n* added: inputForConfig,
  outputForConfig\n* updates to vty-rogue from jtdaugherty. Thanks!\n* the oldest
  version of GHC tested to support vty is 7.6.2.\n* the oldest version of GHC that
  vty compiles under is 7.4.2\n\n5.1.4\n-----\n\n* merged https://github.com/coreyoconnor/vty/pull/51
  thanks trofi!\n\n5.1.1\n-----\n\n* merged https://github.com/coreyoconnor/vty/pull/48
  thanks sjmielke!\n* jtdaugherty resolved a number of compiler warnings. Thanks!\n\n5.1.0\n-----\n\n*
  vmin and vtime can be specified however the application requires.\n  See Graphics.Vty.Config.\n*
  fixed the processing of input when vmin is set > 1.\n\n5.0.0\n-----\n\n* The naming
  convention now matches:\n  * http://www.haskell.org/haskellwiki/Programming_guidelines#Naming_Conventions\n*
  all projects using vty for input must be compiled with -threaded.\n  Please notify
  vty author if this is not acceptable.\n* mkVtyEscDelay has been removed. Use \"mkVty
  def\". Which initialized\n  vty with the default configuration.\n* input handling
  changes\n  * KASCII is now KChar\n  * KPN5 is now KCenter\n  * tests exist.\n  *
  Applications can add to the input tables by setting inputMap of\n    the Config.
  See Graphics.Vty.Config\n  * Users can define input table extensions that will apply
  to all vty\n    applications. See Graphics.Vty.Config\n  * terminal timing is now
  handled by selecting an appropriate VTIME.\n    Previously this was implemented
  within Vty itself. This reduced\n    complexity in vty but provides a different
  meta key behavior and\n    implies a requirement on -threaded.\n  * The time vty
  will wait to verify an ESC byte means a single ESC\n    key is the singleEscPeriod
  of the Input Config structure.\n* removed the typeclass based terminal and display
  context interface\n  in favor of a data structure of properties interface.\n* renamed
  the Terminal interface to Output\n* The default picture for an image now uses the
  \"clear\" background.\n  This background fills background spans with spaces or just
  ends the\n  line.\n  * Previously the background defaulted to the space character.
  This\n    causes issues copying text from a text editor. The text would end\n    up
  with extra spaces at the end of the line.\n* Layer support\n  * Each layer is an
  image.\n  * The layers for a picture are a list of images.\n  * The first image
  is the top-most layer. The images are ordered from\n    top to bottom.\n  * The
  transparent areas for a layer are the backgroundFill areas.\n    backgroundFill
  is added to pad images when images of different\n    sizes are joined.\n  * If the
  background is clear there is no background layer.\n  * If there is a background
  character then the bottom layer is the\n    background layer.\n  * emptyPicture
  is a Picture with no layers and no cursor\n  * addToTop and addToBottom add a layer
  to the top and bottom of the\n    given Picture.\n* compatibility improvements:\n
  \ * terminfo based terminals with no cursor support are silently\n    accepted.
  The cursor visibility changes in the Picture will have\n    no effect.\n  * alternate
  (setf/setb) color maps supported. Though colors beyond\n    the first 8 are just
  a guess.\n  * added \"rgbColor\" for easy support of RGB specified colors.\n  *
  Both applications and users can add to the mapping used to\n    translate from input
  bytes to events.\n* Additional information about input and output process can be\n
  \ appended to a debug log\n  * Set environment variable VTY_DEBUG_LOG to path of
  debug log\n  * Or use \"debugLog <path>\" config directive\n  * Or set 'debugLog'
  property of the Config provided to mkVty.\n* examples moved to vty-examples package.
  See test directory for cabal\n  file.\n  * vty-interactive-terminal-test\n    *
  interactive test. Useful for building a bug report for vty's\n      author.\n    *
  test/interactive_terminal_test.hs\n  * vty-event-echo\n    * view a input event
  log for vty. Example of interacting with\n      user.\n    * test/EventEcho.hs\n
  \ * vty-rogue\n    * The start of a rogue-like game. Example of layers and image\n
  \     build operations.\n    * test/Rogue.hs\n  * vty-benchmark\n    * benchmarks
  vty. A series of tests that push random pictures to\n      the terminal. The random
  pictures are generated using\n      QuickCheck. The same generators used in the
  automated tests.\n    * test/benchmark.hs\n\n4.7.0.0\n-------\n\nAPI changes:\n*
  Added Graphics.Vty.Image.crop: Ensure an image is no larger\n  than the specified
  size.\n* Added Graphics.Vty.Image.pad: Ensure an image is no smaller\n  than the
  specified size.\n* Added Graphics.Vty.Image.translate: Offset an image.\n* Thanks
  Ben Boeckel <MathStuf@gmail.com> for these features.\n\n4.2.1.0\n-------\n\nAPI
  changes:\n* Attr record accessor fore_color changed to attr_fore_color\n* Attr record
  accessor back_color changed to attr_back_color\n* Attr record accessor style changed
  to attr_style\n* Added an \"inline\" display attribute changing DSL:\n  * put_attr_change
  applies a display attribute change\n    immediately to a terminal\n  * For instance,
  can be used to change the display attrbiutes\n    of text output via putStrLn and
  putStr. EX:\n    \"put_attr_change $ back_color red\" will set the background\n
  \   color to red.\n  * Changes do not apply to a Picture output via output_picture.\n
  \ * See Graphics.Vty.Inline\n* Moved all IO actions into any monad an instance of
  MonadIO\n\n4.0.0.1\n-------\n\n* binding for mk_wcswidth was incorrect. Most platforms
  just\n  magically worked due to coincidence.\n\n4.0.0\n-----\n\nAPI changes:\n*
  \"getSize\" has been removed. Use \"terminal vty >>= display_bounds\"\n  where \"vty\"
  is an instance of the Vty data structure.\n* added a \"terminal\" field to the Vty
  data structure. Accesses the\n  TerminalHandle associated with the Vty instance.\n*
  Graphics.Vty.Types has undergone a number of changes. Summary:\n  * Partitioned
  into Graphics.Vty.Attributes for display attributes.\n    Graphics.Vty.Image for
  image combinators. Graphics.Vty.Picture\n    for final picture construction.\n*
  Graphics.Vty.Attributes:\n  * \"setFG\" and \"setBG\" are now \"with_fore_color\"
  and\n    \"with_back_color\"\n  * All other \"set..\" equations similarly replaced.\n
  \ * \"attr\" is now \"def_attr\", short for \"default display attributes\"\n    Also
  added a \"current_attr\" for \"currently applied display\n    attributes\"\n* Graphics.Vty.Image:\n
  \ * \"horzcat\" is now \"horiz_cat\"\n  * \"vertcat\" is now \"vert_cat\"\n  * \"renderBS\"
  is now \"utf8_bytestring\"\n  * \"renderChar\" is now \"char\"\n  * \"renderFill\"
  is now \"char_fill\"\n  * added a \"utf8_string\" and \"string\" (AKA \"iso_10464_string\")
  for\n    UTF-8 encoded Strings and ISO-10464 encoded Strings. String\n    literals
  in GHC have an ISO-10464 runtime representation.\n* Graphics.Vty.Picture:\n  * exports
  Graphics.Vty.Image\n  * \"pic\" is now \"pic_for_image\"\n  * added API for setting
  background fill pattern.\n* Completely rewritten output backend.\n  * Efficient,
  scanline style output span generator. Has not been\n    fully optimized, but good
  enough.\n  * The details required to display the desired picture on a\n    terminal
  are well encapsulated.\n  * Terminfo based display terminal implementation. With
  specialized\n    derivitives for xterm, Terminal.app, and iTerm.app.\n      * Attempts
  to robustly handle even terminals that don't\n        support all display attributes.\n
  \     * I've tested the following terminals with success: iTerm.app,\n        Terminal.app,
  xterm, rxvt, mlterm, Eterm, gnome-terminal,\n        konsole, screen, linux vty.
  Hopefully you will be as\n        successfull.\n  * Improved unicode support. Double
  wide characters will display as\n    expected.\n* 256 color support. See Graphics.Vty.Attributes.Color240.
  The actual\n  output color is adjusted according to the number of colors the\n  terminal
  supports.\n* The Graphics.Vty.Image combinators no longer require matching\n  dimensions
  to arguments. Unspecified areas are filled in with a\n  user-customizable background
  pattern. See Graphics.Vty.Picture.\n* output images are always cropped to display
  size.\n* Significant code coverage by QuickCheck tests. An interactive test\n  for
  those final properties that couldn't be automatically verified.\n\nIssues resolved:\n*
  \"gnome terminal displays non-basic attributes as strikethrough\"\n  * http://trac.haskell.org/vty/ticket/14\n*
  \"Multi-byte characters are not displayed correctly on update\"\n  * http://trac.haskell.org/vty/ticket/10\n*
  \"Redraw does not handle rendering a line that extends beyond screen\n  width characters\"\n
  \ * http://trac.haskell.org/vty/ticket/13\n* \"The <|> and <-> combinators should
  be more forgiving of mismatched\n  dimensions\"\n  * http://trac.haskell.org/vty/ticket/9\n*
  \"256-color support\"\n  * http://trac.haskell.org/vty/ticket/19\n"
changelog-type: markdown
description: |
  [![Build Status](https://travis-ci.org/jtdaugherty/vty.png)](https://travis-ci.org/jtdaugherty/vty)

  `vty` is a terminal interface library. It provides a high-level
  interface for doing terminal I/O. Vty is supported on GHC versions
  7.10.1 and up.

  `vty` and its partner packages are published on
  [Hackage](https://hackage.haskell.org/). The `vty` package works in
  concert with one or more *platform packages* to do terminal I/O. Each
  platform package provides support for terminal I/O on a specific
  platform. Known platform packages are:

  * [vty-unix](https://github.com/jtdaugherty/vty-unix) - the Unix
    terminal backend for Vty
  * [vty-windows](https://github.com/chhackett/vty-windows) - the Windows
    terminal backend for Vty
  * [vty-crossplatform](https://github.com/jtdaugherty/vty-crossplatform) -
    a package that builds `vty-unix` or `vty-windows` based on the build
    environment

  # How to use Vty

  1. Add a package dependency on `vty-unix`, `vty-windows,` or
     `vty-crossplatform`, depending on the desired level of platform
     support. For example, if an application only supports Unix systems,
     it should depend on `vty-unix`. But if an application is intended to
     work anywhere Vty works, then `vty-crossplatform` is the best choice.
  2. Add a package dependency on `vty`; the core library abstractions,
     types, and functions are obtained from `vty` itself. The platform
     packages do not re-export the core library's modules.
  3. Import `mkVty` from the platform package in step (1) and use that to
     construct a `Vty` handle and initialize the terminal.
  4. If desired, call `Graphics.Vty.Config.userConfig` to load the Vty
     user configuration since this step is not automatic.

  Once you've initialized the terminal and have a `Vty` value, all of the
  `vty` package's API is now ready to use to do terminal I/O.

  # Implementing support for a new platform

  Although this shouldn't be necessary to do very often (if ever!), if
  you would like to implement support for a new platform for Vty, see
  `PLATFORM-HOWTO.md`.

  # Features

  * Provides an efficient output algorithm. Output buffering and terminal
    state changes are minimized.

  * Automatically handles window resizes.

  * Minimizes repaint area, which virtually eliminates the flicker
    problems that plague ncurses programs.

  * Provides a pure, compositional interface for efficiently constructing
    display images.

  * Automatically supports refresh on Ctrl-L.

  * Provides extensible input and output interfaces.

  * Properly handles cleanup (but not due to signals).

  * Provides a comprehensive test suite.

  * Supports "normal" and "extended" (SGR) mouse modes as described at
    http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking

  * Supports bracketed paste mode as described at
    http://cirw.in/blog/bracketed-paste

  * Supports multi-column Unicode characters such as emoji characters. In
    cases where Vty and your terminal emulator disagree on character
    widths, Vty provides a tool `vty-build-width-table` and library
    functionality to build a width table that will work for your terminal
    and load it on application startup.

  # Development Notes

  Vty uses threads internally, so programs made with Vty need to be
  compiled with the threaded runtime using the GHC `-threaded` option.

  # Multi-Column Character Support

  Vty supports rendering of multi-column characters such as two-column
  Asian characters and Emoji characters. This section details how to
  take advantage of this feature, since its behavior will depend on the
  terminal emulator in use.

  Terminal emulators support Unicode to varying degrees, and each terminal
  emulator relies on a table of column widths for each supported Unicode
  character. Vty also needs to rely on such a table to compute the width
  of Vty images to do image layout. Since those tables can disagree if
  Vty and the terminal emulator support different versions of Unicode,
  and since different terminal emulators will support different versions
  of Unicode, it's likely that for some wide characters, Vty applications
  will exhibit rendering problems. Those rendering problems arise from Vty
  and the terminal emulator coming to different conclusions about how wide
  some characters are.

  To address this, Vty supports loading custom character width tables
  that are based on the terminal's behavior in order to eliminate these
  disagreements. By default, though, Vty will use its built-in Unicode
  character width table. Since the built-in table is likely to eventually
  disagree with your terminal, Vty provides an API and a command-line tool
  to generate and install custom tables.

  Custom Unicode width tables based on your terminal emulator can
  be built by using the API in `Graphics.Vty.UnicodeWidthTable`.
  The process works by querying the current terminal environment to
  obtain its width measurements for the entire supported Unicode
  range. The results are then saved to a disk file.

  Saved width tables can then be loaded in one of two ways:

  * Via the library API in `Graphics.Vty.UnicodeWidthTable.IO`
  * By adding a `widthMap` directive to your Vty configuration file and
    then invoking `mkVty` to initialize Vty

  The Vty configuration file supports the `widthMap` directive to allow
  users to specify which custom width table should be loaded for a given
  terminal type. This is done by specifying, e.g.,

  ```
  widthMap "xterm" "/path/to/map.dat"
  ```

  where the first argument is the value that `TERM` must have in order for
  the table to be loaded, and the second argument is the path to the table
  file itself as generated by the two alternatives listed above. If the
  Vty configuration file contains multiple matching `widthMap` directives
  for the current value of `TERM`, the last one listed in the file is
  used.

  The tables declared in the configuration file are only ever
  automatically loaded when applications set up Vty by calling
  `Graphics.Vty.mkVty`.

  Before a custom table has been loaded, calls to the library's character
  width functions (e.g. `wcwidth`) will use the default built-in table.
  Once a custom table has been loaded, the functions will use the new
  custom table. Only one custom table load can be performed in a Vty
  program. Once a custom table has been loaded, it cannot be replaced or
  removed.

  # Contributing

  If you decide to contribute, that's great! Here are some guidelines you
  should consider to make submitting patches easier for all concerned:

   - Please ensure that the examples and test suites build along with the
     library by running `build.sh` in the repository.
   - If you want to take on big things, talk to me first; let's have a
     design/vision discussion before you start coding. Create a GitHub
     issue and we can use that as the place to hash things out.
   - If you make changes, make them consistent with the syntactic
     conventions already used in the codebase.
   - Please provide Haddock documentation for any changes you make.

  # Further Reading

  Good sources of documentation for terminal programming are:

  * https://github.com/b4winckler/vim/blob/master/src/term.c
  * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html
  * http://ulisse.elettra.trieste.it/services/doc/serial/config.html
  * http://www.leonerd.org.uk/hacks/hints/xterm-8bit.html
  * http://www.unixwiz.net/techtips/termios-vmin-vtime.html
  * http://vt100.net/docs/vt100-ug/chapter3.html
description-type: markdown
hash: 3536dc83a3fee17d9a114baf58fe47b6f080c24987266f0cd0b7b4b1fcd9cf19
homepage: https://github.com/jtdaugherty/vty
latest: '6.2'
license-name: BSD-3-Clause
maintainer: Jonathan Daugherty (cygnus@foobox.com)
synopsis: A simple terminal UI library
test-bench-deps: {}
