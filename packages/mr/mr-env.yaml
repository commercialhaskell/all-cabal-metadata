homepage: https://github.com/meowgorithm/mr-env#readme
changelog-type: markdown
hash: 9e5d001fc4d61db731d87cab9be1b415f7f76a5ed9b22cb15ab228a0efc9d5a2
test-bench-deps:
  base: '>=4 && <5'
  hspec: '>=2.7 && <3'
  mr-env: -any
maintainer: christian@rocha.is
synopsis: A simple way to read environment variables in Haskell
changelog: |
  # Revision history for mr-env

  ## 0.1.0.1 -- 2020-03-19

  * Fix example code formatting in Haddocks. Super minor.

  ## 0.1.0.0 -- 2020-03-18

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
author: Christian Rocha
latest: 0.1.0.5
description-type: markdown
description: |
  # Mr. Env

  ![build][action-badge] [![Hackage][hackage-shield]][hackage]

  [action-badge]: https://github.com/meowgorithm/mr-env/workflows/build/badge.svg
  [hackage]: http://hackage.haskell.org/package/mr-env
  [hackage-shield]: https://img.shields.io/hackage/v/mr-env.svg?style=flat&color=blueviolet

  A simple way to read environment variables in Haskell.

  ```haskell
  -- Read environment variables, with defaults
  host <- envAsString "HOST" "localhost"
  port <- envAsInt "PORT" 8000
  ```

  ## Simple Example

  Read environment variables with `do` notation:

  ```haskell
  import System.Environment.MrEnv ( envAsBool, envAsInt, envAsInteger, envAsString )

  main :: IO ()
  main = do

      -- Get a string, with a fallback value if nothing is set.
      host <- envAsString "HOST" "localhost"

      -- Get an int. If you need an integer instead you could also use envAsInteger.
      port <- envAsInt "PORT" 8000

      -- Get a boolean. Here we're expecting the environment variable to read
      -- something along the lines of "true", "TRUE", "True", "truE" and so on.
      debug <- envAsBool "DEBUG" False

      putStrLn $
          "Let's connect to "
          ++ host
          ++ " on port "
          ++ show port
          ++ ". Debug mode is "
          ++ if debug then "on" else "off"
          ++ "."
  ```

  ## Fancy Example

  Read environment variables into a record:

  ```haskell
  import System.Environment.MrEnv ( envAsBool, envAsInt, envAsInteger, envAsString )

  data Config =
      Config { host  :: String
             , port  :: Int
             , debug :: Bool
             }

  getConfig :: IO Config
  getConfig = Config
      <$> envAsString "HOST" "localhost"
      <*> envAsInt "PORT" 8000
      <*> envAsBool "DEBUG" False

  main :: IO ()
  main =
      getConfig >>= \conf ->
          putStrLn $
              "Let's connect to "
              ++ host conf
              ++ " on port "
              ++ show $ port conf
              ++ ". Debug mode is "
              ++ if debug conf then "on" else "off"
              ++ "."
  ```

  We suggest pronouncing `<*>` _[brackety-splat][1]_ (as
  opposed to _ap_). In that vein, `<$>` is _brackety-cash._

  [1]: https://www.reddit.com/r/haskell/comments/241jcm/how_do_you_say/

  ## Authors

  * [Christian Rocha](https://github.com/meowgorithm)
  * [Sam Raker](https://github.com/swizzard)

  ## License

  MIT
license-name: MIT
