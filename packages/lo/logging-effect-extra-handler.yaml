all-versions:
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 2.0.0
- 2.0.1
author: Jason Shipman
basic-deps:
  base: '>=4.8 && <4.12'
  exceptions: '>=0.8.0.2 && <0.11'
  logging-effect: '>=1.1.0 && <1.4'
  logging-effect-extra-handler: '>=0'
  prettyprinter: '>=1.2 && <1.3'
  time: '>=1.5 && <1.10'
changelog: |
  # Change log

  ## 2.0.1

  * Update README.md example to use `prettyprinter` instad of `wl-pprint-text`

  ## 2.0.0

  * Bump upper bounds on `base` to 4.12 and `logging-effect` to 1.4
  * Replace `wl-pprint-text` with prettyprinter 1.2.*

  ## 1.1.4

  * Bump upper bound on `exceptions` from 0.10 to 0.11

  ## 1.1.3

  * Bump upper bound on `exceptions` from 0.9 to 0.10

  ## 1.1.2

  * Bump upper bound on `time` from 1.9 to 1.10

  ## 1.1.1

  * Update `iso8601PlusHandler` time output to zero-padded, fixed width fraction of second

  ## 1.1.0

  * Add `routeHandler`
  * Deprecate `dispatchHandler`

  ## 1.0.0

  * Initial release
changelog-type: markdown
description: |
  # [logging-effect-extra-handler][]

  ## Synopsis

  ```haskell
  {-# LANGUAGE FlexibleContexts #-}
  {-# LANGUAGE OverloadedStrings #-}

  module Main (main) where

  import Control.Monad.Log (MonadLog, WithSeverity)
  import qualified Control.Monad.Log as Log
  import qualified Control.Monad.Log.Extra.Handler as Log
  import Data.Text.Prettyprint.Doc (Doc)

  app :: MonadLog (WithSeverity (Doc ann)) m => m ()
  app = do
    Log.logEmergency "GAH! All systems are down!!!"
    Log.logAlert "Red alert!"
    Log.logCritical "Critical hit!"
    Log.logError "Errors abound!"
    Log.logWarning "Cargo number 2331 has commandeered the vessel"
    Log.logNotice "Heads up, but it's no biggie."
    Log.logInfo "Does anyone read these?"
    Log.logDebug "Sleuthing with log messages..."

  main :: IO ()
  main =
    Log.withStdoutHandler $ \stdoutHandler ->
    Log.withStderrHandler $ \stderrHandler ->
    Log.runLoggingT app (Log.routeHandler (Log.iso8601Handler stdoutHandler)
                                          (Log.iso8601Handler stderrHandler)
                                          id)
  ```

  ## Usage via `stack`

  ``` sh
  # Build the project.
  stack build

  # Run the `iso8601-handler` example
  stack exec iso8601-handler

  # Run the `iso8601plus-handler` example
  stack exec iso8601plus-handler

  # Run the `rfc822-handler` example
  stack exec rfc822-handler

  # Run the `route-handler-with-iso8601` example
  stack exec route-handler-with-iso8601

  # Run the `route-handler` example
  stack exec route-handler
  ```

  [logging-effect-extra-handler]: https://github.com/jship/logging-effect-extra
description-type: markdown
hash: dbdeba195d30b7d686db57b57d8cbabd1e3194807f5525af84808793ca162f99
homepage: https://github.com/jship/logging-effect-extra#readme
latest: 2.0.1
license-name: MIT
maintainer: Jason Shipman
synopsis: Handy logging handler combinators
test-bench-deps: {}
