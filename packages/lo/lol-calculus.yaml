all-versions:
- '1.20160822'
author: Julien Moutinho <julm+lol@autogeree.net>
basic-deps:
  base: '>=4.6 && <5'
  containers: '>=0.5 && <0.6'
  directory: '>=0'
  filepath: '>=0'
  haskeline: '>=0.7 && <0.8'
  lol-calculus: '>=0'
  mtl: '>=2.0'
  parsec: '>=3.1.2 && <4'
  text: '>=0'
  text-format: '>=0'
  transformers: '>=0.4 && <0.5'
changelog: ''
changelog-type: ''
description: |-
  WARNING: this is a research program
  written as I learn and explore /lambda calculii/:
  please understand well by yourself whatever you may take from it;
  any question or contribution being welcome :-)

  This package implements an /explicitely typed/
  (aka. /à la Church/) /lambda calculus/
  with: /simples types/, /parametric polymorphism/,
  /higher-rank polymorphism/ and /constructors of types/
  (I have no need for /dependent types/ so far,
  but it should be straightforward to add them
  to allow the full /Calculus of constructions/ (CoC)).

  This is mainly done by means of:
  a common /Algebraic Data Type/ (ADT) for terms and types
  to build a /Pure Type System/ (PTS),
  <https://www.schoolofhaskell.com/user/edwardk/bound generalized DeBruijn indices>
  to implement /capture-avoiding substitution/ of variables,
  and 'Typeable' axioms to embed Haskell types and terms
  (the most experimental and tricky part).

  The inspiring programs I studied
  which explore similar problems:
  Simon Peyton Jones and Erik Meijer's
  <https://research.microsoft.com/en-us/um/people/simonpj/papers/henk.ps.gz Henk>,
  Dan Doel's <http://hub.darcs.net/dolio/pts pts>,
  Gabriel Gonzalez's <https://hackage.haskell.org/package/morte morte>,
  Richard Eisenberg's <https://hackage.haskell.org/package/glambda glambda>,
  Edward Kmett's <https://hackage.haskell.org/package/bound bound>.

  See also: the <https://hackage.haskell.org/package/lol-typing lol-typing> package
  studying the /type inferencing/.

  NOTE: if you are just interested in building
  an /Embedded Domain Specific Language/ (EDSL)
  you may as well study Oleg Kiselyov, Jacques Carette and Chung-chieh Shan's
  <http://okmij.org/ftp/tagless-final Typed Tagless Final Interpreters>,
  which you may find being a much more simple, efficient and robust approach.
description-type: haddock
hash: bd358caa01bf0fcbdb00cc350910e604ebb1c70bf3dc6753f785f4b41290e814
homepage: ''
latest: '1.20160822'
license-name: GPL-3.0-only
maintainer: Julien Moutinho <julm+lol@autogeree.net>
synopsis: Calculus for LOL (λω language).
test-bench-deps: {}
