all-versions:
- 2009.6.25
- 2009.6.26
- 2009.6.27
- 2009.6.29
- 2009.7.2
- 2009.8.16
- 2009.8.18
- 2009.10.13
- 2010.10.9
- 2011.6.24
author: Jinjing Wang
basic-deps:
  base: '>4 && <=5'
  bytestring: '>=0'
  containers: '>=0'
  data-default: '>=0'
  hack: '>=2009.7.15'
  hack-contrib: '>=2009.8.18'
  mps: '>=2009.9.18'
  mtl: '>=0'
  template: <0.2
  utf8-string: '>=0'
changelog: |
  2010.10.9
  ---------

  ### Fix

  * compile again ...

  2009.10.13
  ----------

  ### Fix

  * compatible with lastest mps

  2009.8.18
  ---------

  ### Feature

  * use new hack-contrib

  2009.8.16
  ---------

  ### Feature

  * use hackCache for performance
  * no $ noise

  2009.7.2
  --------

  ### Features

  * before / after filter
  * On the fly router switcher

  ### Fix

  * safari display weird header

  2009.6.29
  ---------

  ### Features

  * Initial hackage release

  2009.6.27
  ---------

  ### Features

  * add template
  * add local binding
  * env and response are in reader and state monad respectively

  2009.6.26
  ---------

  ### Features

  * add route

  2009.6.25
  ---------

  Init
changelog-type: markdown
description: "# loli\n\nA minimum web dev DSL\n\n## Example\n\n    import Network.Loli\n
  \   import Hack.Handler.Happstack\n    \n    main = run . loli $ get \"/\" (text
  \"loli power\")\n\n\n## Installation\n\n    cabal update\n    cabal install loli\n
  \   cabal install hack-handler-happstack\n    \n    -- copy and paste the above
  example to myapp.hs\n    \n    ghc --make myapp.hs\n    ./myapp\n\ncheck: <http://localhost:3000>\n\n##
  Quick reference\n\n<http://github.com/nfjinjing/loli/blob/master/src/Test/Test.hs>\n\n\n##
  Routes\n\n### Verbs\n\n    -- use - instead of $ for clarity\n    import MPS.Light
  ((-))\n    import Prelude hiding ((-))\n    \n    import Network.Loli\n    import
  Hack.Handler.Happstack\n    \n    main = run . loli - do\n\n      get \"/\" - do\n
  \       -- something for a get request\n\n      post \"/\" - do\n        -- for
  a post request\n    \n      put \"/\" - do\n        -- put ..\n    \n      delete
  \"/\" - do\n        -- ..\n\n### Captures\n\n    get \"/say/:user/:message\" - do\n
  \     text . show =<< captures\n\n    -- /say/jinjing/hello will output\n    --
  [(\"user\",\"jinjing\"),(\"message\",\"hello\")]\n\n\n## Static\n\n    -- public
  serve, only allows `./src`\n    public (Just \".\") [\"/src\"]\n\n## Mime types\n\n
  \   -- treat .hs extension as text/plain\n    mime \"hs\" \"text/plain\"\n\n## Filters\n\n
  \   -- before takes a function of type (Env -> IO Env)\n    before - \\e -> do\n
  \     putStrLn \"before called\"\n      return e\n    \n    -- after takes that
  of type (Response -> IO Response)\n    after return\n\n## Hack integration\n\n###
  Use hack middleware\n\n    -- note both etag and lambda middleware are removed ...
  for somce ghc 7.0 compatability ><\n    \n    import Hack.Contrib.Middleware.ETag\n
  \   import Hack.Contrib.Middleware.Lambda\n    \n    middleware etag\n    middleware
  lambda\n\n### Convert loli into a hack application\n\n    -- in Network.Loli.Engine\n
  \   \n    loli :: Unit -> Application\n\n\n## Hints\n\n* It's recommended to use
  your own html combinator / template engine, loli's template system is for completeness
  rather then usefulness... The author has removed the section on view from this readme.
  Examples can still be found in `src/Test/Test.hs`. Try DIY with, e.g. [moe](http://github.com/nfjinjing/moe).
  The template code will stay for, say, a few years, but will eventually fade away.\n*
  [Example view using custom html combinator (moe in this case)](http://github.com/nfjinjing/loli/blob/master/src/Test/Moe.hs)\n*
  When inspecting the request, use `ask` defined in `ReaderT` monad to get the `Hack.Environment`,
  then use helper method defined in `Hack.Contrib.Request` to query it.\n* `Response`
  is in `StateT`, `html` and `text` are simply helper methods that update the state,
  i.e. setting the response body, content-type, etc.\n* You do need to understand
  monad transformers to reach the full power of `loli`.\n* For mac users, use `GHC
  6.12.1` if you have trouble running the server.\n    \n## Reference\n\n* loli is
  inspired by [Rack](http://rack.rubyforge.org), [Rails](http://rubyonrails.org),
  [Ramaze](http://ramaze.net), [Happstack](http://happstack.com/) and [Sinatra](http://www.sinatrarb.com/).\n\n\n<br/>\n\n<p>\n<a
  href=\"http://en.wikipedia.org/wiki/Shinryaku!_Ika_Musume\"><img src=\"https://github.com/nfjinjing/loli/raw/master/ita.jpg\"/></a>\n</p>"
description-type: markdown
hash: 73ab7ebe9eeba78525a2aed5c7e6d87f2c926025f6f8553f74bdebc2cb2ff8eb
homepage: http://github.com/nfjinjing/loli
latest: 2011.6.24
license-name: BSD-3-Clause
maintainer: Jinjing Wang <nfjinjing@gmail.com>
synopsis: A minimum web dev DSL in Haskell
test-bench-deps: {}
