homepage: http://wrengr.org
changelog-type: text
hash: 21e986dbcac1eb8545cb21f84bfbfc4d457b28b62d53584a87f09fde7d36f45c
test-bench-deps: {}
maintainer: wren@cpan.org
synopsis: Log-domain floating point numbers
changelog: |
  0.13.4 (2017-06-18):
      - Added Read LogFloat instance. (h/t Rob Zinkov)
      - Corrected a bug where `product` returns NaN on `logFloat 0`.
  0.13.3.2 (2015-08-06):
      - Fixed the buggy Show LogFloat instance
  0.13.3.1 (2015-05-30):
      - Moved VERSION to CHANGELOG
  0.13.3 (2015-03-29):
      - Got clean compile on GHC 7.10.1
  0.13.2 (2015-03-23):
      - Preliminary fixes for dealing with type-roles in GHC 7.10
  0.13.1 (2015-03-10):
      - Fixed a major bug in sum
  0.13 (2015-02-17):
      - monomorphized logFloat, logToLogFloat, fromLogFloat, logFromLogFloat
      - added sum, product, pow
      - cleaned up some extraneous rewrite rules
      - removed support for older versions of GHC, in order to clean things up

  0.12.1 (2010-03-19):
      - Fixed some NaN injection bugs in the Num instance. These would
        only have been triggered by non-probabilistic uses of LogFloat
        (i.e., if you used @logFloat infinity@)
  0.12.0.3 (2009-04-03):
      - Added notes to INSTALL about Windows compatibility
  0.12.0.2 (2009-04-03):
      - Updated TODO and VERSION
  0.12.0.1 (2009-03-25):
      - Disabled -fvia-C so the FFI can be used in GHC 6.10
  0.12 (2009-03-10):
      - Added log1p.
      - Added Storable instance (for GHC only)
      - removed orphaned toRational/fromRational rules. The
        RealToFrac module obviates those optimizations.
      - Adjusted Real LogFloat instance to throw errors on transfinite values

  0.11.2 (2009-03-09):
      - Moved log/exp rules from LogFloat into Transfinite
  0.11.1.1 (2009-03-09):
      - Documentation updates
  0.11.1 (2009-03-08):
      - Added IArray UArray LogFloat instance (thanks to Felipe Lessa).
  0.11 (2009-01-29):
      - Moved the RealToFrac class from Data.Number.Transfinite to
        Data.Number.RealToFrac. This breaks backwards compatibility if
        you depended directly on that module for the class. If you
        imported the class from Data.Number.LogFloat then you're still
        fine.
      - Cabal build fail due to missing new module (Fixed in 0.11.0.1).

  0.10 (2009-01-29):
      - Hugs' Prelude definitions of isInfinite and isNaN for Float
        and Double are buggy. The new Hugs.RealFloat module provides
        correct implementations (defaulting to the Prelude definition
        for non-Hugs compilers).
      - The PartialOrd and Transfinite instances for Double and Float
        have been updated to use these corrected functions.
      - Added maxPO and minPO to PartialOrd and added comparingPO to
        Data.Number.PartialOrd.
      - Minor changes to circumvent bugs in Hackage's new version of
        Haddock. You should be able to see all the documentation now.

  0.9.1 (2008-08-30):
      - Fixed some PartialOrd stuff and sanitized documentation
      - Build fail on GHC 6.10 due to GHC.Prim (Fixed in 0.9.1.1).
  0.9.0 (2008-08-30):
      - s/toFractional/realToFrac/g.
      - Also moved realToFrac and log to Transfinite
      - Build fail on GHC 6.10 due to GHC.Prim

  0.8.6 (2008-08-17):
      - Removed buggy RULES
      - Build fail on GHC 6.10 due to -Werror and removal of -fno-warn-orphans
  0.8.5 (2008-08-17):
      - Gave up and converted from lhs to hs so Hackage docs work
  0.8.4 (2008-08-17):
      - Broke out Transfinite
  0.8.3 (2008-08-16):
      - Documentation updates
  0.8.2 (2008-08-14):
      - Announced release
  0.8:
      - Did a bunch of tweaking. Things should be decent now

  0.7:
      - Haddockified
  0.6:
      - Fixed monomorphism of LogFloat constructors/destructors.
  0.5:
      - Added optimization rules.
  0.4:
      - Translated from Perl to Haskell at revision 2007.12.20.
  0.3:
      - Converted extensive comments to POD format.
  0.2:
      - Did a bunch of profiling, optimizing, and debugging.
  0.1:
      - Initial version (in Perl) created for hw5 for NLP with Jason Eisner.
basic-deps:
  base: '>=4.6 && <5'
  array: -any
all-versions:
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.9.0
- 0.9.1
- 0.9.1.1
- 0.9.1.2
- 0.9.1.3
- 0.10.0
- 0.11.0
- 0.11.0.1
- 0.11.1
- '0.12'
- 0.12.0.1
- 0.12.1
- 0.13.0.1
- 0.13.1
- 0.13.2
- 0.13.3
- 0.13.3.1
- 0.13.3.2
- 0.13.3.3
- 0.13.4
author: wren gayle romano
latest: 0.13.4
description-type: markdown
description: "logfloat\n========\n[![Hackage version](https://img.shields.io/hackage/v/logfloat.svg?style=flat)](https://hackage.haskell.org/package/logfloat)\n[![Hackage-Deps](https://img.shields.io/hackage-deps/v/logfloat.svg?style=flat)](http://packdeps.haskellers.com/specific?package=logfloat)\n[![TravisCI
  Build Status](https://img.shields.io/travis/wrengr/logfloat.svg?style=flat)](https://travis-ci.org/wrengr/logfloat)\n[![CircleCI
  Build Status](https://circleci.com/gh/wrengr/logfloat.svg?style=shield&circle-token=b57517657c556be6fd8fca92b843f9e4cffaf8d1)](https://circleci.com/gh/wrengr/logfloat)\n\nThis
  package provides a type for storing numbers in the log-domain,\nprimarily useful
  for preventing underflow when multiplying many\nprobabilities as in HMMs and other
  probabilistic models. The package\nalso provides modules for dealing with floating
  numbers correctly.\n\nAs of version 0.13.3, we've dropped support for Hugs and GHC
  < 7.8.\nNothing major has changed, so they should still work; it's just\nthat they're
  no longer officially supported. (In practice, GHC 7.6\nstill works just fine, and
  is still being tested against. It's just\nthat this support will be droped in the
  future, once it becomes a\nburden.) Thus, this version of the library provides a
  transitional\npoint between backwards compatability and adding new features (see\nbelow).\n\nNote
  that the GitHub repository is just a clone of [the Darcs\nrepo](http://code.haskell.org/~wren/logfloat/).
  I'm testing out\nwhether to switch things over to GitHub in order to use TravisCI,\nand
  an official ticket tracker, etc.\n\n\n## Install\n\nIn general, this is a simple
  package and should be easy to install.\nThe specifics are a bit murky however, since
  we use CPP and the FFI\nand want to retain portability, and due to the rapid evolution
  of\nCabal and other development tools. You should be able to use one\nof the following
  standard installation methods:\n\n    -- With cabal-install and without the source:\n
  \   $> cabal install logfloat\n\n    -- With cabal-install and with the source already:\n
  \   $> cd logfloat\n    $> cabal install\n\n    -- Without cabal-install, but with
  the source already:\n    $> cd logfloat\n    $> runhaskell Setup.hs configure --user\n
  \   $> runhaskell Setup.hs build\n    $> runhaskell Setup.hs haddock --hyperlink-source\n
  \   $> runhaskell Setup.hs copy\n    $> runhaskell Setup.hs register\n\nThe Haddock
  step is optional.\n\n\n### FFI Problems\n\nThe logfloat package uses the FFI to
  access functions in libm to\nimprove accuracy. These functions are part of the ISO
  C 1999 standard\nand are supported on most systems, however they're not part of
  the\nANSI C standard nor the System V standard and so they might be\nunavailable
  on some systems. If you encounter errors during build\nabout not being able to find
  `<math.h>`, not having prototypes for\nfunctions, or linking errors, then you are
  probably on such a system.\n\nIn order to use pure Haskell and disable the FFI,
  pass -f-useFFI\nduring the configure phase to disable the useFFI flag. This will\ndegrade
  the accuracy of certain operations, but should still compile\ncleanly.\n\nIf you
  run into errors like \"error: 'log1p' redeclared as different\nkind of symbol\"
  this is due to a bug in GHC 6.10.1 where you can't\nuse both -fvia-C and the FFI.
  This bug should be circumvented for\nthe moment, but resolving it is still a work
  in progress. See the\nbug report (which is resolved in GHC 6.10.2):\n\n    http://hackage.haskell.org/trac/ghc/ticket/3117\n\n\n###
  Windows FFI\n\nThe logfloat package builds and installs cleanly with GHC 8.0 and\nlater
  on Windows (without needing Cygwin nor Mingw/Msys), and the\ninstalled package can
  be used in compiled programs without any\nissues.\n\nPrior to GHC 8.0, the package
  does not work from the GHCi debugger\nby default and gives errors like \"can't load
  .so/.DLL for: m (addDLL:\ncould not load DLL)\". This is a long-standing issue with
  GHCi having\nto do with the fact that, on Windows, the so-called \"libm\" file does\nnot
  actually contain anything (as it does on POSIX) and the C\nfunctions we use are
  instead placed in `libmingwex.a` (which comes\nbundled with GHC). The problem is
  that `ghc` (the compiler) knows\nto pull in `libmingwex.a`, whereas `ghci` (the
  interactive debugger)\ndoes not. All of this is true at least as far back as Windows
  XP\nand GHC 6.10.1. Some more information can be found in the ticket:\n\n    https://ghc.haskell.org/trac/ghc/ticket/3242\n\nThe
  most reliable workaround at this point, alas, is to compile the\nlibrary with FFI
  support disabled in order to be able to use it in\nGHCi, and then to recompile with
  FFI enabled whenever you need to\nship a compiled program.\n\nA less-reliable workaround
  (i.e., needs to be tailored for your\nsystem based on your paths, and you'll need
  to have `gcc` installed)\nwhich avoids the need for recompilation is to generate
  the DLL\nyourself by running the following two commands and then placing the\nresulting
  `m.dll` into your path.\n\n    ar -x libmingwex.a\n\tgcc -shared *.o -o m.dll\n\n\n###
  Testing\n\nIf you want to run the test suite, use the following standard method\n(with
  `runhaskell Setup.hs` in lieu of `cabal`, if necessary):\n\n    $> cd logfloat\n
  \   $> cabal configure --enable-tests --enable-coverage\n    $> cabal build\n    $>
  cabal test --keep-tix-files\n\nThe results of the code coverage are in\n`./dist/hpc/vanilla/html/logfloat-$VERSION/hpc_index.html`.
  \ If\nyou're not interested in the coverage of the test suite, then you\nneedn't
  pass the `--enable-coverage` nor `--keep-tix-files` flags.\nNote that older versions
  of cabal used the flag name\n`--enable-library-coverage` instead of `--enable-coverage`.
  And\nIIRC hpc integration in cabal was broken for ghc-7.6.\n\n\n### Haddock Problems\n\nIn
  Cabal 1.2 there is a bug in the handling of building Haddock\ndocumentation when
  CPP is involved. These issues have been fixed\nin Cabal 1.6, but here are the instructions
  if you're on older\nsystems.\n\nIn Cabal 1.2 the cpp-options field is not passed
  to Haddock, and\ntherefore any macros defined there are not seen, which can cause\nHaddock
  to fail. The old workaround was to define CPP macros in the\nghc-options field which
  *does* get passed to Haddock. This is now\nconsidered bad style and is forbidden
  by Hackage. It appears that\npassing --haddock-option=... or --ghc-option=... flags
  during\nconfigure does not have the same effect as defining the field.\n\nTherefore,
  in order to properly compile Haddock documentation on\nCabal 1.2, you should go
  into logfloat.cabal and uncomment the\nghc-options fields which declare CPP macros
  -D__USE_FFI__ and\n-D__HUGS__=200609. If you know of a better workaround for this\nconfiguration,
  contact the maintainer.\n\n\n### Building for Hugs (September 2006)\n\nIf you're
  feeling adventurous and want to try and get the library\nto compile under Hugs,
  here's how you used to be able to compile\nthings:\n\n    runhaskell Setup.hs configure
  --hugs  \\\n        --with-cpphs=\"`which cpphs-hugs`\" \\\n        --ffihugs-options=\"-98
  +o\"        \\\n        --ffihugs-option=-F'cpp -P -traditional -D__HUGS__=200609
  -D__USE_FFI__'\n    runhaskell Setup.hs build\n    runhaskell Setup.hs copy\n    runhaskell
  Setup.hs register\n\nIf you need to disable the FFI due to issues with not being
  able\nto find <math.h>, not having prototypes for functions, or linking\nerrors,
  be sure *not* to pass -D__USE_FFI__ to the cpp filter for\nffihugs.\n\nNotably,
  Hugs installs cpphs under the name \"cpphs-hugs\" by default.\nThe `which` command
  will try to resolve the location, assuming it's\non your $PATH. If it isn't, then
  change the --with-cpphs= flag to\npoint to where cpphs is installed on your system.\n\nSome
  additional details about difficulties with building for Hugs\ncan be found in this
  blog post and the bug reports:\n\n    http://winterkoninkje.livejournal.com/60707.html\n
  \   http://hackage.haskell.org/trac/hackage/ticket/526\n    http://hackage.haskell.org/trac/hackage/ticket/527\n\nAnd
  while previous versions of Cabal could build this package (with\nthe above commandline
  to work around those bugs), Hugs support is\nbroken in Cabal 1.8 (including at least
  1.8.0.2 through 1.8.0.6):\n\n    http://hackage.haskell.org/trac/hackage/ticket/633\n\n\n##
  Changes: Version 0.13.3+ (2015-03-29) vs 0.12.1 (2010-03-19)\n\n* Monomorphized
  `logFloat`, `logToLogFloat`, `fromLogFloat`, and\n`logFromLogFloat`: that is, they
  all take/return `Double` now. The\nchange was made to help reduce the need for explicit
  type signatures.\nIt shouldn't really affect most users, since it seems noone was\nreally
  making use of the polymorphism provided by previous versions.\nTo get the previous
  behavior back, just explicitly add calls to\n`realToFrac` wherever necessary.\n\n*
  Fixed some instances to get them to compile under the new role-based\ntype system
  of GHC 7.10\n\n* Cleaned up various extraneous rewrite rules, specializations, etc\n\n*
  Added the functions `sum`, `product`, and `pow`. Both sum and\nproduct preserve
  more precision than the fold-based definitions in\nthe Prelude. Moreover, sum is
  *much* faster than the Prelude version,\nsince it only requires crossing the log/exp
  boundary n+1 times,\ninstead of 2\\*(n-1) times. The only downside is that sum requires\ntwo
  passes over the input and thus is not amenable to list fusion.\n\n* (Version 0.13.3.2;
  2015-08-06) Fixed the `Show LogFloat` instance\nto produce parentheses in the right
  place.\n\n\n## Upcoming changes (0.14+)\n\n* Since the `Data.Number.RealToFrac`
  module is no longer required\nby any of the others, it will probably be forked off
  to a separate\npackage in order to improve portability of the rest of the package\nby
  removing the need for MPTCs.\n\n* There's long been clamoring for adding a\nvector:`Data.Vector.Unboxed.Unbox`
  instance. I've been reluctant\nto add such an instance due to wanting to retain
  backwards compatibility\nand portability. Having dropped support for Hugs and older
  versions\nof GHC, I'm now willing to add them in.\n\nThe logfloat library is conceptually
  quite simple, and thus to\nwhatever extent possible I'd still like to retain portability
  to\nnon-GHC compilers. So if you are interested in using logfloat with\nanother
  compiler/interpreter but run into problems (e.g., due to\nthe type families required
  by the vector library), please get in\ntouch and I'll try to get things to work.\n\n\n##
  Compatibility / Portability\n\nThe package is compatible with GHC 7.8.3 and 7.10.1.
  It may still\ncompile with older versions of GHC (or even Hugs!), however they\nare
  no longer officially supported.\n\nThe package is not compatible with nhc98 and
  Yhc because\n`Data.Number.RealToFrac` uses MPTCs. However, that module is no\nlonger
  required by any others, and all the other modules should be\ncompatible with these
  compilers. Thus, it should be fairly easy to\nport. If you do so, please let me
  know and I'll try to incorporate\nsupport for them.\n\n\n## Links\n\n* [Website](http://cl.indiana.edu/~wren/)\n*
  [Blog](http://winterkoninkje.dreamwidth.org/)\n* [Twitter](https://twitter.com/wrengr)\n*
  [Hackage](http://hackage.haskell.org/package/logfloat)\n* [Darcs](http://code.haskell.org/~wren/logfloat)\n*
  [GitHub (clone)](https://github.com/wrengr/logfloat)\n* [Haddock (Darcs version)\n
  \   ](http://code.haskell.org/~wren/logfloat/dist/doc/html/logfloat)\n"
license-name: BSD-3-Clause
