all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
author: Francis Lim, Jongwhan Lee
basic-deps:
  base: '>=4.12.0 && <5'
  base16-bytestring: '>=0.1.0 && <0.2'
  blake2: '>=0.3.0 && <0.4'
  blake3: '>=0.2 && <0.3'
  bytestring: '>=0.10.8 && <0.11'
  containers: '>=0.6 && <0.7'
  cryptohash-sha256: '>=0.11.101 && <0.12'
  cryptonite: '>=0.25'
  deepseq: '>=1.4.4 && <1.5'
  docopt: '>=0.7.0.6'
  longshot: '>=0'
  memory: '>=0.14.0 && <0.16'
  parallel: '>=3.2.2 && <3.3'
  template-haskell: '>=2.14.0 && <2.17'
changelog: |
  # Changelog

  ## 0.1.0.0
  * First public release
  * Strict and deep search mode
  * Support various search length, character sets, and hashers

  ## 0.1.0.2
  * Fixed Hackage metadata

  ## 0.1.0.3
  * Up to 10% performance improvement while using 30% less memory
  * Additional explanations on the arguments of the core function

  ## 0.1.0.5
  * Deep search performance improvement
  * Clean up unnecessary arguments
  * Fixed typos

  ## 0.1.0.6
  * Default resolver version bump to lts-16.27 (ghc-8.8.4)
  * use docopt 0.7.0.6+ (fixed issue causing compilation error with below ghc-8.8.2)
changelog-type: markdown
description: "<p align=\"center\"> <img src=\"longshot.png\" height=\"200\"/> </p>\n\n>
  Is it really a __long shot__ to hope that the COVID-19 pandemic will end?\n\n\n\n[![Build
  Status](https://travis-ci.com/thyeem/longshot.svg?branch=master)](https://travis-ci.com/thyeem/longshot)
  [![Hackage](https://img.shields.io/hackage/v/longshot)](https://hackage.haskell.org/package/longshot)\n\n#
  longshot\n\n__Search for preimage__ from a given hash value using _Brute-force_
  method based on _parallelism_\n\n* Support various __search lengths__, __character
  sets__ and __hashers__.\n* Strict mode: searches only for a given _exact length_\n*
  Deep mode: **Incrementally searches** when you *do not know the exact length of
  search*\n* Use `CPUs` as _much_ as possible. __Get the most out of them!__\n* Use,
  however, `memory` as _little_ as possible.\n  \n\nEnjoy `longshot`. Good luck!\n\n\n\n```plain\nlongshot
  - Fast Brute-force search using parallelism\n\nUsage:\n  longshot run        [--deep
  | -n SIZE] [-c CHARS] [-a HASHER] HEX\n  longshot image      [-a HASHER] KEY\n\nCommands:\n
  \ run                 Brute-force search with given hexstring and options\n  image
  \              Generate image from given key string and hash algorithm\n\nArguments:\n
  \ HEX                 Specify target hexstring to search\n  KEY                 Specify
  key string as a preimage\n\nOptions:\n  -h --help           Show this\n  --deep
  \             Deep search by increasing length of search\n                      Use
  when you do not know the exact length of preimage\n  -n SIZE             Specify
  search length  [default: 8]   \n  -c CHARS            Specify characters available
  in preimage  [default: 0123456789]\n  -a HASHER           Specify hash algorithm
  \ [default: sha256]\n                      HASHER available below:\n                      md5
  \          sha1          ripemd160     whirlpool\n                      sha256        sha3_256
  \     sha3_384      sha3_512\n                      blake2s_256   blake2b_256   blake2b_384
  \  blake2b_512\n                      blake3_256    blake3_384    blake3_512\n                      keccak_256
  \   keccak_384    keccak_512\n                      skein_256     skein_384     skein_512\n```\n\n##
  How to build\n```shell\n## Install 'stack' if not any\n$ brew install stack\n\n$
  git clone https://github.com/thyeem/longshot.git\n\n$ make build \n\n## Optional:
  test if installed properly using quickcheck\n$ make test\n\n## You can see an executable
  'longshot' here\n$ cd app\n```\n\n## Quick start\n```shell\n## Refer to the following
  usage:\n## Note that the order of arguments and options matter.\n$ ./longshot -h\n\n##
  Generate test hash values\n$ ./longshot image 12345\n5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5\n\n$
  ./longshot image 12345678\nef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f\n\n##
  Brute-force search with default options:\n## The same as: ./longshot -n 8 -c 0123456789
  -a sha256 ef797c..98a64f\n$ ./longshot run ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f\nFound
  \ 12345678\n\n## Search below fails because default search length is 8.\n## In default
  mode, it searches by the exact length of key.\n$ ./longshot run 5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5\nNot
  found\n\n## If you don't know the exact key length, use deep search. (--deep)\n##
  In most cases, it is difficult to know the length of the preimage.\n## It will try
  to search by increasing length of search\n$ ./longshot run --deep 5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5\nFound
  \ 12345\n```\nThese are all about how to use `longshot`.  \nSee below for more interesting
  detailed examples.\n\n## More examples\n```shell\n## Generate a example image using
  Blake2b hash algorithm\n## Blake2b-hashed sofia (my first daughter!)\n$ ./longshot
  image -a blake2b sofia\nbb40f637bb211532318965627f15bb165f701230fd83e0adf8cd673a6ee02830\n\n##
  Need different character set. Don't forget --deep\n$ ./longshot run --deep -c 'abcdefghijklmnopqrstuvwxyz'
  -a blake2b bb40f6..e02830\nFound  sofia\n\n## You should consider the following
  if there might be more characters in preimage.\n## More characters, much longer
  time to find!\n$ ./longshot run --deep -c 'abcdefghijklmnopqrstuvwxyz0123456789'
  -a blake2b bb40f6..e02830\n\n## Roughly, time spending is proportional to (Number
  of char available) ^ (char length).\n## Exponent 'char length' is surely more dominant!
  Use long-long password as always!\n\n## Longshot is very efficient and get the most
  of CPU's power in parallel.\n## But this kind of work would need a lot of time even
  for longshot \n## due to exponentially increased search space.\n$ ./longshot run
  -deep -c 'abcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()-=_+[]{}\\|' \\\n                 -a
  blake2b bb40f6..e02830 +RTS -s\n\n## '+RTS -s' the end of line is optional, and
  that is for a summary of CPU time and memory.\n```\n"
description-type: markdown
hash: bf9424ab2c2f88126aa015febe4b578477f40076f1b3ffd2cf632ed22908eba1
homepage: https://github.com/thyeem/longshot#readme
latest: 0.1.0.6
license-name: MIT
maintainer: thyeem@gmail.com
synopsis: Fast Brute-force search using parallelism
test-bench-deps:
  base: '>=4.12.0 && <5'
  base16-bytestring: '>=0.1.0 && <0.2'
  blake2: '>=0.3.0 && <0.4'
  blake3: '>=0.2 && <0.3'
  bytestring: '>=0.10.8 && <0.11'
  containers: '>=0.6 && <0.7'
  cryptohash-sha256: '>=0.11.101 && <0.12'
  cryptonite: '>=0.25'
  deepseq: '>=1.4.4 && <1.5'
  docopt: '>=0.7.0.6'
  longshot: '>=0'
  memory: '>=0.14.0 && <0.16'
  parallel: '>=3.2.2 && <3.3'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=2.14.0 && <2.17'
