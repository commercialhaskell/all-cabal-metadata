all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.1.0
- 0.1.1
- 0.1.2
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.1.0
author: Pat Brisbin <pbrisbin@gmail.com>
basic-deps:
  base: '>=4.8.0 && <5'
  directory: '>=0'
  filepath: '>=0'
  parsec: '>=0'
changelog: |
  ## [*Unreleased*](https://github.com/pbrisbin/load-env/compare/v0.2.1.0...master)

  None

  ## [v0.2.1.0](https://github.com/pbrisbin/load-env/compare/v0.2.0.2...v0.2.1.0)

  - Don't override values already set in the environment

    Given a hypothetical program `load-env`, which uses one of our `loadEnv`
    functions on `stdin`:

    Previously,

    ```
    FOO=bar load-env <<EOM
    FOO=bat
    EOM
    ```

    would override `FOO` to `bat` when `load-env` ran. But now, it will see `FOO`
    is already `bar` and leave it.

    This is better behavior under the assumption that a `.env` file is meant to
    specify *defaults* in the case of nothing explicit. When there are explicit
    values in the environment, it's most likely that our user indeed wants them
    respected.

  ## [v0.2.0.2](https://github.com/pbrisbin/load-env/compare/v0.2.0.1...v0.2.0.2)

  - Allow lower-case characters in variable names [@denibertovic](https://github.com/pbrisbin/load-env/pull/4)

  ## [v0.2.0.1](https://github.com/pbrisbin/load-env/compare/v0.2.0.0...v0.2.0.1)

  - Packaging and documentation updates

  ## [v0.2.0.0](https://github.com/pbrisbin/load-env/compare/v0.1.2...v0.2.0.0)

  - Traverse up parent directories to find the `.env` file

  ## [v0.1.2](https://github.com/pbrisbin/load-env/compare/v0.1.1...v0.1.2)

  - Packaging updates

  ## [v0.1.1](https://github.com/pbrisbin/load-env/compare/v0.1.0...v0.1.1)

  - Parse variables names more strictly

  ## [v0.1.0](https://github.com/pbrisbin/load-env/compare/v0.0.4...v0.1.0)

  - Don't fail on an empty file
  - Ignore any invalid lines, not specifically things that look like comments

  ## [v0.0.4](https://github.com/pbrisbin/load-env/compare/v0.0.3...v0.0.4)

  - Don't throw an exception if the `.env` file is missing

  ## [v0.0.3](https://github.com/pbrisbin/load-env/compare/v0.0.2...v0.0.3)

  - Variable names can contain underscores

  ## [v0.0.2](https://github.com/pbrisbin/load-env/compare/v0.0.1...v0.0.2)

  - Drop support for GHC < 7.8

  ## [v0.0.1](https://github.com/pbrisbin/load-env/tree/v0.0.1)

  Initial release.
changelog-type: markdown
description: |
  # load-env

  [![Build Status](https://circleci.com/gh/pbrisbin/load-env/tree/master.png)](https://circleci.com/gh/pbrisbin/load-env)

  This is effectively a port of [dotenv][], whose README explains it best:

  > Storing configuration in the environment is one of the tenets of a
  > twelve-factor app. Anything that is likely to change between deployment
  > environments–such as resource handles for databases or credentials for
  > external services–should be extracted from the code into environment
  > variables.
  >
  > But it is not always practical to set environment variables on development
  > machines or continuous integration servers where multiple projects are run.
  > dotenv loads variables from a .env file into ENV when the environment is
  > bootstrapped.

  [dotenv]: https://github.com/bkeepers/dotenv

  This library exposes functions for doing just that.

  ## Usage

  ```haskell
  import LoadEnv
  import System.Environment (lookupEnv)

  main :: IO ()
  main = do
      loadEnv

      print =<< lookupEnv "FOO"
  ```

  ```console
  % cat .env
  FOO=bar
  % runhaskell main.hs
  Just "bar"
  ```

  ## Development & Test

  ```
  stack setup
  stack build --pedantic --test
  ```

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
description-type: markdown
hash: 17628d397cf7ba6af9bf103c2c3592bb246e2ad58bd019cc5071c654887b1083
homepage: https://github.com/pbrisbin/load-env#readme
latest: 0.2.1.0
license-name: BSD-3-Clause
maintainer: Pat Brisbin <pbrisbin@gmail.com>
synopsis: Load environment variables from a file.
test-bench-deps:
  base: '>=4.8.0 && <5'
  directory: '>=0'
  doctest: '>=0'
  hspec: '>=0'
  load-env: '>=0'
  parsec: '>=0'
  temporary: '>=0'
