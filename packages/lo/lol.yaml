all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.5.0.1
- 0.5.0.2
- 0.6.0.0
- 0.7.0.0
author: |-
  Eric Crockett <ecrockett0@gmail.com>,
  Chris Peikert <cpeikert@alum.mit.edu>
basic-deps:
  MonadRandom: '>=0.5.1 && <0.6'
  QuickCheck: '>=2.13.2 && <2.14'
  ansi-terminal: '>=0.9.1 && <0.10.0'
  arithmoi: '>=0.9.0 && <0.10'
  base: '>=4.12.0 && <4.13'
  bytestring: '>=0.10.8 && <0.11'
  constraints: '>=0.10.1 && <0.11.0'
  containers: '>=0.6.0 && <0.7'
  criterion: '>=1.5.6 && <1.6'
  criterion-measurement: '>=0.1.2 && <0.2'
  crypto-api: '>=0.13.3 && <0.14'
  data-default: '>=0.7.1 && <0.8'
  deepseq: '>=1.4.4 && <1.5'
  directory: '>=1.3.3 && <1.4'
  monadcryptorandom: '>=0.7.2 && <0.8'
  mtl: '>=2.2.2 && <2.3'
  numeric-prelude: '>=0.4.3 && <0.5'
  protocol-buffers: '>=2.4.12 && <2.5'
  protocol-buffers-descriptor: '>=2.4.12 && <2.5'
  random: '>=1.1 && <1.2'
  reflection: '>=2.1.5 && <2.2'
  singletons: '>=2.5.1 && <2.6'
  statistics: '>=0.15.1 && <0.16'
  tagged-transformer: '>=0.8.1 && <0.9'
  template-haskell: '>=2.14.0 && <2.15'
  test-framework: '>=0.8.2 && <0.9'
  test-framework-quickcheck2: '>=0.3.0 && <0.4'
  vector: '>=0.12.0 && <0.13'
  vector-th-unbox: '>=0.2.1 && <0.3'
changelog: |-
  Changelog for lol project
  ================================

  0.6.0.0
  ----
   * Support for serializing ring products, linear functions, and TypeReps.
   * Split previous lol package into separate tensor packages lol-cpp and lol-repa
     and utility packages lol-benches and lol-tests.
   * Moved test and benchmark code to packages lol-tests and lol-benches, respectively.
   * Simpler tests and benchmarks (though microbenchmarks might be slightly slower
     than 0.5.0.2).
   * Fixed minor bug in IrreducibleChar2.hs
   * Moved tensor-specific instances (Elt, Unbox, etc) to tensor packages
     (lol-cpp and lol-repa).

  0.5.0.2
  ----
   * Updates to README.

  0.5.0.1
  ----
   * Benchmarks now compile.

  0.5.0.0
  ----
   * Dramatically improved CT performance using Haskell INLINE/INLINABLE pragmas.
   * Removed fmapTM from Tensor.
   * Removed valuePPs, totientPPs, radicalPPs, oddRadicalPPs from Factored.
   * K_q (i.e. base ring RRq) is now serialized with a discrete modulus.
   * Fixed a bug in UCyc.divG. The result is `divG` is now split into `divGPow`
     `divGDec`, and `divGCRTC`.
   * Added `UCycPC` type synonym to UCyc.
   * Added data-level interface for Factored.
   * Added Random instance for FiniteField.

  0.4.0.0
  ----
   * Added support for GHC 8.0, also compatible with 7.10.3
   * Converted documentation to MathJax
   * Renamed Tensor.Matrix -> Tensor.Kron
   * Added Crypto.Lol.Types interface file

  0.3.0.0
  -----
   * Support for protocol-buffers
   * Support for reifying Factored types
   * Support for reals (RR) mod q
   * Replaced C backend with C++ backend
   * Renamed LatticePrelude -> Prelude
   * Added monad argument to CRTrans

  0.2.0.0
  -----
   * Added benchmarks
   * Better performance for C backend with RNS base ring
   * UCyc exposes bases as type for safety
   * Other safety improvements throughout
   * Easier index representation with TemplateHaskell
   * Split SymmSHE into new package lol-apps.

  0.1.0.0
  -----
   * Fixed bug in Box-Muller sampling routine.
   * Changed how we lift linear functions for better noise control.
   * Split entailment functions in Tensor.
   * Increased performance in FastCyc by better handling Sub constructors.
changelog-type: markdown
description: |
  This package is primarily a library providing high-level interfaces
  for lattice cryptography primitives. There are two main collections of
  interfaces: 'Cyclotomic' and 'Tensor'. The Cyclotomic interface can be
  used to build cryptographic primitives like encryption, pseudorandom
  functions, etc. The lower-level Tensor interface allows multiple
  backends to implement the functionality used by the Cyclotomic
  interface.  Unless you are writing a new backend implementation, you
  do not need to understand the Tensor interface. However, you *will*
  need an implementation of the Tensor interface in order to test,
  benchmark, and run applications.

  Most of the functionality in Lol is exported by two modules:

  * 'Crypto.Lol' exports the primary *interfaces* of Lol.

  * 'Crypto.Lol.Types' exports concrete types that would tend to be used
    by most instantiations.

  For a brief introduction to the relevant mathematical notation, see
  'Crypto.Lol'.

  Overview of key modules, roughly from highest- to lowest-level:

  Cyclotomic layer:

  * 'Crypto.Lol.Cyclotomic.Cyc' defines an interface for using
    cyclotomic fields \( K \), rings \( R \), and quotient rings \(
    R_q=R/qR \); as well as many other commonly used operations, e.g.,
    converting between rings; reducing, lifting, and decomposing
    elements; modulus reduction/rounding; etc. 'Cyc' is a safe wrapper
    around the 'CycRep' type, which exposes some
    representation-dependent operations.  'CycRep' (and hence 'Cyc') is
    implemented using a generic 'Tensor' (described below).

  Tensor layer:

  * 'Crypto.Lol.Cyclotomic.Tensor' defines interfaces that encapsulate
    all the necessary linear transformations for operating on
    representations of \( R \)- and \( R_q \)-elements, e.g., the CRT
    transform, converting between the powerful and decoding bases,
    generating error terms, etc.

  * You will need an implementation of the 'Tensor' interface in order
    to use Lol. The main up-to-date implementation is
    <https://hackage.haskell.org/package/lol-cpp lol-cpp>
    (<https://hackage.haskell.org/package/lol-repa lol-repa> is out of
    date).

  Base-ring layer:

  * 'Crypto.Lol.Types.FiniteField' gives an unoptimized implementation
    of finite-field arithmetic. To use this module, you will need an
    instance of 'IrreduciblePoly', which provides irreducible
    polynomials for various degrees and base fields. One (orphan)
    instance is provided for characteristic-2 fields of size up to 2^128
    in 'Crypto.Lol.Types.IrreducibleChar2', and is exported by
    'Crypto.Lol.Types'.  If you need to use an unsupported finite field,
    define your own instance of 'IrreduciblePoly' and do **not** import
    'IrreducibleChar2'.

  * 'Crypto.Lol.Types.Unsafe.ZqBasic', which is a basic implementation
    of \( \Z_q=\Z/q\Z \) arithmetic.

  * 'Crypto.Lol.Factored', which contains type-level support code for
    factored integers. It also supports "reifying" 'Int's at runtime as
    static types and "reflecting" those types as integer
    values. 'Factored' types are mainly used to represent cyclotomic
    indices.

  A collection of polymorphic tests and benchmarks can be found in the
  packages <https://hackage.haskell.org/package/lol-tests lol-tests> and
  <https://hackage.haskell.org/package/lol-benches lol-benches>,
  respectively. These tests should be (and are) instantiated for
  specific 'Tensor' backends by the corresponding tensor packages.
description-type: text
hash: 748ee336c1dbe0fe05a644eb1b9289bdf249dde618b6d619d08ac64bbb8f5526
homepage: https://github.com/cpeikert/lol#readme
latest: 0.7.0.0
license-name: GPL-3.0-only
maintainer: |-
  Eric Crockett <ecrockett@gmail.com>,
  Chad Sharp <cmlsharp@umich.edu>
synopsis: A library for lattice cryptography.
test-bench-deps:
  base: '>=0'
  lol: '>=0'
  test-framework: '>=0'
