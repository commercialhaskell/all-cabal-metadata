all-versions:
- '1.20160822'
author: Julien Moutinho <julm+lol@autogeree.net>
basic-deps:
  base: '>=4.6 && <5'
  containers: '>=0.5 && <0.6'
  ghc-prim: '>=0'
  lol-calculus: '>=0'
  monad-classes: '>=0.3.1.1'
  parsec: '>=3.1.2 && <4'
  text: '>=0'
  text-format: '>=0'
  transformers: '>=0.4 && <0.5'
  uuagc: '>=0.9'
  uuagc-cabal: '>=1.0.6.0'
changelog: ''
changelog-type: ''
description: |-
  WARNING: this is a research program
  written as I learn and explore /type inferencing/:
  please understand well by yourself whatever you may take from it;
  any question or contribution being welcome :-)

  This package implements /type inferencing/
  by manipulating /type constraints/
  through 3 successive phases:
  1. the 'Collect' phase collects them from some expression,
  2. the 'Order' phase modifies the order in which they will be solved,
  3. the 'Solver' phase solves them according to the logic
  of some /type inference rules/.

  So far, the principles within these phases
  are mainly a rewrite of Bastiaan Heeren's
  <https://hackage.haskell.org/package/Top Top>,
  using my own code conventions and ideals of simplicity.
  The most notable change being the use of Roman Cheplyaka's
  <https://hackage.haskell.org/package/monad-classes monad-classes>
  (a little bit augmented):
  to handle the 'Monad' stack building a 'Solver'
  (instead of a homegrown machinery I could not understand well).
  At this point, only a /bottom-up/ 'Collect', a no-op 'Order'
  and a 'Greedy' 'Solver' are implemented, supporting:
  /monomorphic types/ ('Monotype'),
  /parametric polymorphism/ ('Polytype'),
  /type class polymorphism/ ('Class'),
  and /type synonyms/ ('Synotype').
  The quite understandable thesis of Bastiaan Heeren
  explains a lot of this in details:
  <http://www.open.ou.nl/bhr/TopQuality.pdf Top Quality Type Error Messages>.

  The <https://hackage.haskell.org/package/uuagc Attribute Grammar System of Universiteit Utrecht>
  is used to demonstrate how to collect /type constraints/ from an expression ('Expr'),
  and then how to transform this /implicitely typed/ expression into an /explicitely typed/
  <https://hackage.haskell.org/package/lol-calculus lol-calculus> expression

  See also: the <https://hackage.haskell.org/package/helium helium> compiler.
description-type: haddock
hash: 66fc867da364d50ad2808e9b6ec0e6e55ea415691e66e0d6094880ddf768f3ba
homepage: ''
latest: '1.20160822'
license-name: GPL-3.0-only
maintainer: Julien Moutinho <julm+lol@autogeree.net>
synopsis: Type inferencer for LOL (λω language)
test-bench-deps:
  base: '>=4.6 && <5'
  containers: '>=0.5 && <0.6'
  directory: '>=0'
  filepath: '>=0'
  ghc-prim: '>=0'
  lol-calculus: '>=0'
  lol-typing: '>=0'
  monad-classes: '>=0.3.1.1'
  tasty: '>=0.11'
  tasty-hunit: '>=0'
  text: '>=0'
  text-format: '>=0'
  transformers: '>=0.4 && <0.5'
