all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.8.1
- 0.1.9
- 0.2.0
author: Roman Smrž <roman.smrz@seznam.cz>
basic-deps:
  ansi-terminal: ^>=0.11 || ^>=1.0 || ^>=1.1
  async: '>=2.2 && <2.3'
  base: '>=4.15 && <4.22'
  binary: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.13'
  clock: '>=0.8 && <0.9'
  containers: ^>=0.6 || ^>=0.7 || ^>=0.8
  crypton: '>=0.34 && <0.35 || >=1.0 && <1.1'
  deepseq: '>=1.4 && <1.6'
  directory: '>=1.3 && <1.4'
  erebos: '>=0'
  filepath: '>=1.4 && <1.6'
  fsnotify: ^>=0.3 || ^>=0.4
  hashable: ^>=1.3 || ^>=1.4 || ^>=1.5
  hashtables: ^>=1.2 || ^>=1.3 || ^>=1.4
  iproute: '>=1.7.12 && <1.8'
  memory: '>=0.14 && <0.19'
  mtl: '>=2.2 && <2.4'
  network: '>=3.1 && <3.3'
  process: '>=1.6 && <1.7'
  stm: '>=2.5 && <2.6'
  template-haskell: ^>=2.17 || ^>=2.18 || ^>=2.19 || ^>=2.20 || ^>=2.21 || ^>=2.22
    || ^>=2.23
  text: '>=1.2 && <2.2'
  time: '>=1.8 && <1.15'
  transformers: '>=0.5 && <0.7'
  unix: ^>=2.7 || ^>=2.8
  uuid-types: '>=1.0.4 && <1.1'
  websockets: ^>=0.12.7 || ^>=0.13
  zlib: '>=0.6 && <0.8'
changelog: |
  # Revision history for erebos

  ## 0.2.0 -- 2025-08-06

  * Weak references in records
  * Use XDG data directory for default storage path
  * Added `/identity` command to show details of current identity
  * Support tunnel for peers in discovery service
  * New CLI prompt implementation providing cleaner interface
      * Avoids displaying sent messages twice – both in previous prompt and in message history
      * Print received messages only for selected conversation
      * Clear tab completion options after use

  * API
      * Split `Erebos.Storage` into multiple modules
      * Removed deprecated `Message.formatMessage` alias
      * Renamed `Erebos.Message` module to `Erebos.DirectMessage`
      * Added `StorageBackend` type class to allow custom storage implementation
      * `MonadError` constraints use generic error type
      * Replaced `Erebos.Network.peerAddress` with `getPeerAddress` and added `getPeerAddresses`
      * Renamed `Erebos.Network.peerIdentity` to `getPeerIdentity`
      * Renamed some functions in `Erebos.DirectMessage` module to make clear they are related only to direct messages
      * `Erebos.Storage.Merge.generations`/`generationsBy` return `NonEmpty`
      * Replaced `watchReceivedDirectMessages` with `watchDirectMessageThreads`
      * Return type of `sendMessage` and `sendDirectMessage` is now `()`
      * Some functions use `MonadStorage` instead of explicit `Storage` parameter:
          * `Erebos.Set.storeSetAdd`
          * `Erebos.State.makeSharedStateUpdate`
          * `Erebos.Identity.createIdentity`

  ## 0.1.9 -- 2025-07-08

  * Option to show details or delete a conversation by giving index parameter without first selecting it
  * Improved handling of ICE connections
  * Automatic discovery of peers for pending direct messages

  ## 0.1.8.1 -- 2025-03-29

  * Fix build from sdist (add missing include)

  ## 0.1.8 -- 2025-03-28

  * Discovery service without requiring ICE support
  * Added `/delete` command to delete chatrooms for current user
  * Ignore record items with unexpected type
  * Support GHC 9.12

  ## 0.1.7 -- 2024-10-30

  * Chatroom-specific identity
  * Secure cookie for connection initialization
  * Support multiple public peers
  * Handle unknown object and record item types
  * Keep unknown items in local state

  ## 0.1.6 -- 2024-08-12

  * Chatroom members list and join/leave commands
  * Fix sending multiple data responses in a stream
  * Added `--storage`/`--memory-storage` command-line options
  * Compatibility with GHC up to 9.10
  * Local discovery with IPv6

  ## 0.1.5 -- 2024-07-16

  * Public chatrooms for multiple participants
  * Send keep-alive packets on idle connection
  * Windows support

  ## 0.1.4 -- 2024-06-11

  * Added `/conversations` command to list and select conversations
  * Added `/details` command for info about selected conversation
  * Handle peer reconnection after its restart
  * Support non-interactive mode without tty

  ## 0.1.3 -- 2024-05-05

  * Enable/disable network services by command-line parameters
  * Tab-completion of command name
  * Implemented streams in network protocol
  * Compatibility with GHC up to 9.8

  ## 0.1.2 -- 2024-02-20

  * Compatibility with GHC up to 9.6
  * Pruned unnecessary dependencies and fixed bounds

  ## 0.1.1 -- 2024-02-18

  * Added build flag to enable/disable ICE support with pjproject.
  * Added `-V` command-line switch to show version.

  ## 0.1.0 -- 2024-02-10

  * First version.
changelog-type: markdown
description: "Erebos\n======\n\nThe erebos binary provides simple CLI interface to
  the decentralized Erebos\nmessaging service. Local identity is created on the first
  run. Protocol and\nservices specification is being written at:\n\n[https://erebosprotocol.net/spec](https://erebosprotocol.net/spec)\n\nErebos
  identity is based on locally stored cryptographic keys, all\ncommunication is end-to-end
  encrypted. Multiple devices can be attached to the\nsame identity, after which they
  function interchangeably, without any one being\nin any way \"primary\"; messages
  and other state data are then synchronized\nautomatically whenever the devices are
  able to connect with one another.\n\nStatus\n------\n\nThis is experimental implementation
  of yet unfinished specification, so\nchanges, especially in the library API, are
  expected. Storage format and\nnetwork protocol should generally remain backward
  compatible, with their\nrespective versions to be increased in case of incompatible
  changes, to allow\nfor interoperability even in that case.\n\nUsage\n-----\n\nOn
  the first run, local identity will be created for this device based on\ninteractive
  prompts for:\n\n`Name:` name of the user/owner, which will be shared among all devices\nbelonging
  to the same user; keep empty when initializing device that is going\nto be attached
  to already existing identity on other device.\n\n`Device:` name describing current
  device, can be empty.\n\nAfter the initial setup, the erebos tool presents interactive
  prompt for\nmessages and commands. All commands start with the slash (`/`) character,\nfollowed
  by command name and parameters (if any) separated by spaces. When\na conversation
  is selected, message to send there is entered directly on\nthe command prompt.\n\nThe
  session can be terminated either by end-of-input (typically `Ctrl-d`) or\nusing
  the `/quit` command.\n\n### Example\n\nStart `erebos` CLI and create new identity:\n```\nName:
  Some Name\nDevice: First device\nSome Name / First device\n> \n```\n\nAdd public
  peer:\n```\n> /peer-add-public\n[1] PEER NEW <unnamed> [37.221.243.57 29665]\n[1]
  PEER UPD discovery1.erebosprotocol.net [37.221.243.57 29665]\n```\n\nSelect the
  peer and send it a message, the public server just responds with\nautomatic echo
  message:\n```\n> /1\ndiscovery1.erebosprotocol.net> hello\n[18:55] Some Name: hello\n[18:55]
  discovery1.erebosprotocol.net: Echo: hello\n```\n\nList chatrooms known to the peers:\n```\n>
  /chatrooms\n[1] Test chatroom\n[2] Second test chatroom\n```\n\nEnter a chatroom
  and send a message there:\n```\n> /1\nTest chatroom> Hi\nTest chatroom [19:03] Some
  Name: Hi\n```\n\n### Messaging\n\n`/peers`  \n: List peers with direct network connection.
  Peers are discovered automatically\n  on local network or can be manually added.\n\n`/contacts`
  \ \n: List known contacts (see below).\n\n`/conversations`  \n: List started conversations
  with contacts or other peers.\n\n`/<number>`  \n: Select conversation, contact or
  peer `<number>` based on the last\n  `/conversations`, `/contacts` or `/peers` output
  list.\n\n`<message>`  \n: Send `<message>` to selected conversation.\n\n`/history
  [<number>]`  \n: Show message history of the selected conversation, or the one identified
  by\n  `<number>` if given.\n\n`/details [<number>]`  \n: Show information about
  the selected conversations, contact or peer; or the\n  one identified by `<number>`
  if given.\n\n### Chatrooms\n\nCurrently only public unmoderated chatrooms are supported,
  which means that any\nnetwork peer is allowed to read and post to the chatroom.
  Individual messages\nare signed, so message author can not be forged.\n\n`/chatrooms`
  \ \n: List known chatrooms.\n\n`/chatroom-create-public [<name>]`  \n: Create public
  unmoderated chatroom. Room name can be passed as command\n  argument or entered
  interactively.\n\n`/members`  \n: List members of the chatroom – usesers who sent
  any message or joined via the\n`join` command.\n\n`/join`  \n: Join chatroom without
  sending text message.\n\n`/join-as <name>`  \n: Join chatroom using a new identity
  with a name `<name>`. This new identity is\n  unrelated to the main one, and will
  be used for any future messages sent to\n  this chatroom.\n\n`/leave`  \n: Leave
  the chatroom. User will no longer be listed as a member and erebos tool\n  will
  no longer collect message of this chatroom.\n\n`/delete [<number>]`  \n: Delete
  the chatroom (currently selected one, or the one identified by\n  `<number>`); this
  action is only synchronized with devices belonging to the\n  current user and does
  not affect the chatroom state for others. Due to the\n  storage design, the chatroom
  data will not be purged from the local state\n  history, but the chatroom will no
  longer be listed as available and no futher\n  updates for this chatroom will be
  collected or shared with other peers.\n\n### Add contacts\n\nTo ensure the identity
  of the contact and prevent man-in-the-middle attack,\ngenerated verification code
  needs to be confirmed on both devices to add\ncontacts to contact list (similar
  to bluetooth device pairing). Before adding\nnew contact, list peers using `/peers`
  command and select one with `/<number>`.\n\n`/contacts`  \n: List already added
  contacts.\n\n`/contact-add`  \n: Add selected peer as contact. Six-digit verification
  code will be computed\n  based on peer keys, which will be displayed on both devices
  and needs to be\n  checked that both numbers are same. After that it needs to be
  confirmed using\n  `/contact-accept` to finish the process.\n\n`/contact-accept`
  \ \n: Confirm that displayed verification codes are same on both devices and add\n
  \ the selected peer as contact. The side, which did not initiate the contact\n  adding
  process, needs to select the corresponding peer with `/<number>`\n  command first.\n\n`/contact-reject`
  \ \n: Reject contact request or verification code of selected peer.\n\n### Attach
  other devices\n\nMultiple devices can be attached to single identity to be used
  by the same\nuser. After the attachment process completes the roles of the devices
  are\nequivalent, both can send and receive messages independently and those\nmessages,
  along with any other sate data, are synchronized automatically\nwhenever the devices
  can connect to each other.\n\nThe attachment process and underlying protocol is
  very similar to the contact\nadding described above, so also generates verification
  code based on peer keys\nthat needs to be checked and confirmed on both devices
  to avoid potential\nman-in-the-middle attack.\n\nBefore attaching device, list peers
  using `/peers` command and select the\ntarget device with `/<number>`.\n\n`/attach`
  \ \n: Attach current device to the selected peer. After the process completes the\n
  \ owner of the selected peer will become owner of this device as well.\n  Six-digit
  verification code will be displayed on both devices and the user\n  needs to check
  that both are the same before confirmation using the\n  `/attach-accept` command.\n\n`/attach-accept`
  \ \n: Confirm that displayed verification codes are same on both devices and\n  complete
  the attachment process (or wait for the confirmation on the peer\n  device). The
  side, which did not initiate the attachment process, needs to\n  select the corresponding
  peer with `/<number>` command first.\n\n`/attach-reject`  \n: Reject device attachment
  request or verification code of selected peer.\n\n### Other\n\n`/peer-add <host>
  [<port>]`  \n: Manually add network peer with given hostname or IP address.\n\n`/peer-add-public`
  \ \n: Add known public network peer(s).\n\n`/peer-drop`  \n: Drop the currently
  selected peer. Afterwards, the connection can be\n  re-established by either side.\n\n`/identity`
  \ \n: Show details of current identity\n\n`/update-identity`  \n: Interactively
  update current identity information\n\n`/quit`  \n: Quit the erebos tool.\n\n\nStorage\n-------\n\nData
  are by default stored under `XDG_DATA_HOME`, typically\n`$HOME/.local/share/erebos`,
  unless there is an erebos storage already\nin `.erebos` subdirectory of the current
  working directory, in which case the\nlatter one in used instead. This can be overriden
  by `EREBOS_DIR` environment\nvariable.\n\nPrivate keys are currently stored in plaintext
  under the `keys` subdirectory of\nthe erebos directory.\n"
description-type: markdown
hash: 9149c56090abb5abfb11d757148e7df175a59c2e1bfcaf039170a0d923f85b0c
homepage: https://erebosprotocol.net/erebos
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: roman.smrz@seznam.cz
synopsis: Decentralized messaging and synchronization
test-bench-deps: {}
