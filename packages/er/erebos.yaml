all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
author: Roman Smr≈æ <roman.smrz@seznam.cz>
basic-deps:
  async: '>=2.2 && <2.3'
  base: '>=4.13 && <4.19'
  binary: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.13'
  clock: '>=0.8 && <0.9'
  containers: '>=0.6 && <0.8'
  cryptonite: '>=0.25 && <0.31'
  deepseq: '>=1.4 && <1.6'
  directory: '>=1.3 && <1.4'
  erebos: '>=0'
  filepath: '>=1.4 && <1.6'
  hashable: '>=1.3 && <1.5'
  hashtables: '>=1.2 && <1.4'
  haskeline: '>=0.7 && <0.9'
  hinotify: '>=0.4 && <0.5'
  iproute: '>=1.7.12 && <1.8'
  memory: '>=0.14 && <0.19'
  mtl: '>=2.2 && <2.4'
  network: '>=3.1 && <3.2'
  process: '>=1.6 && <1.7'
  stm: '>=2.5 && <2.6'
  template-haskell: '>=2.18 && <2.22'
  text: '>=1.2 && <2.2'
  time: '>=1.8 && <1.14'
  transformers: '>=0.5 && <0.7'
  unix: '>=2.7 && <2.9'
  uuid: '>=1.3 && <1.4'
  zlib: '>=0.6 && <0.8'
changelog: |
  # Revision history for erebos

  ## 0.1.2 -- 2024-02-20

  * Compatibility with GHC up to 9.6
  * Pruned unnecessary dependencies and fixed bounds

  ## 0.1.1 -- 2024-02-18

  * Added build flag to enable/disable ICE support with pjproject.
  * Added `-V` command-line switch to show version.

  ## 0.1.0 -- 2024-02-10

  * First version.
changelog-type: markdown
description: "Erebos\n======\n\nThe erebos binary provides simple CLI interface to
  the decentralized Erebos\nmessaging service. Local identity is created on the first
  run. Protocol and\nservices specification is being written at:\n\n[http://erebosprotocol.net](http://erebosprotocol.net)\n\nErebos
  identity is based on locally stored cryptographic keys, all\ncommunication is end-to-end
  encrypted. Multiple devices can be attached to the\nsame identity, after which they
  function interchangeably, without any one being\nin any way \"primary\"; messages
  and other state data are then synchronized\nautomatically whenever the devices are
  able to connect with one another.\n\nStatus\n------\n\nThis is experimental implementation
  of yet unfinished specification, so\nchanges, especially in the library API, are
  expected. Storage format and\nnetwork protocol should generally remain backward
  compatible, with their\nrespective versions to be increased in case of incompatible
  changes, to allow\nfor interoperability even in that case.\n\nUsage\n-----\n\nOn
  the first run, local identity will be created for this device based on\ninteractive
  prompts for:\n\n`Name:` name of the user/owner, which will be shared among all devices\nbelonging
  to the same user; keep empty when initializing device that is going\nto be attached
  to already existing identity on other device.\n\n`Device:` name describing current
  device, can be empty.\n\nAfter the initial setup, the erebos tool presents interactive
  prompt for\nmessages and commands. All commands start with the slash (`/`) character,\nfollowed
  by command name and parameters (if any) separated by spaces. When a\npeer or contact
  is selected, message to send him can be entered directly on the\ncommand prompt.\n\n###
  Messaging\n\n`/peers`  \nList peers with direct network connection. Peers are discovered
  automatically\non local network or can be manually added.\n\n`/contacts`  \nList
  known contacts (see below).\n\n`/<number>`  \nSelect contact or peer `<number>`
  based on previous `/contacts` or `/peers`\noutput list.\n\n`<message>`  \nSend `<message>`
  to selected contact.\n\n`/history`  \nShow message history for selected contact
  or peer.\n\n### Add contacts\n\nTo ensure the identity of the contact and prevent
  man-in-the-middle attack,\ngenerated verification code needs to be confirmed on
  both devices to add\ncontacts to contact list (similar to bluetooth device pairing).
  Before adding\nnew contact, list peers using `/peers` command and select one with
  `/<number>`.\n\n`/contacts`  \nList already added contacts.\n\n`/contact-add`  \nAdd
  selected peer as contact. Six-digit verification code will be computed\nbased on
  peer keys, which will be displayed on both devices and needs to be\nchecked that
  both numbers are same. After that it needs to be confirmed using\n`/contact-accept`
  to finish the process.\n\n`/contact-accept`  \nConfirm that displayed verification
  codes are same on both devices and add the\nselected peer as contact. The side,
  which did not initiate the contact adding\nprocess, needs to select the corresponding
  peer with `/<number>` command first.\n\n`/contact-reject`  \nReject contact request
  or verification code of selected peer.\n\n### Attach other devices\n\nMultiple devices
  can be attached to single identity to be used by the same\nuser. After the attachment
  process completes the roles of the devices are\nequivalent, both can send and receive
  messages independently and those\nmessages, along with any other sate data, are
  synchronized automatically\nwhenever the devices can connect to each other.\n\nThe
  attachment process and underlying protocol is very similar to the contact\nadding
  described above, so also generates verification code based on peer keys\nthat needs
  to be checked and confirmed on both devices to avoid potential\nman-in-the-middle
  attack.\n\nBefore attaching device, list peers using `/peers` command and select
  the\ntarget device with `/<number>`.\n\n`/attach`  \nAttach current device to the
  selected peer. After the process completes the\nowner of the selected peer will
  become owner of this device as well. Six-digit\nverification code will be displayed
  on both devices and the user needs to check\nthat both are the same before confirmation
  using the `/attach-accept` command.\n\n`/attach-accept`  \nConfirm that displayed
  verification codes are same on both devices and complete\nthe attachment process
  (or wait for the confirmation on the peer device). The\nside, which did not initiate
  the attachment process, needs to select the\ncorresponding peer with `/<number>`
  command first.\n\n`/attach-reject`  \nReject device attachment request or verification
  code of selected peer.\n\n### Other\n\n`/peer-add <host> [<port>]`  \nManually add
  network peer with given hostname or IP address.\n\n`/update-identity`  \nInteractively
  update current identity information\n\n\nStorage\n-------\n\nData are by default
  stored within `.erebos` subdirectory of the current working\ndirectory. This can
  be overriden by `EREBOS_DIR` environment variable.\n\nPrivate keys are currently
  stored in plaintext under the `keys` subdirectory of\nthe erebos directory.\n"
description-type: markdown
hash: dd1f815ceb08a4c13e4df5b302b7f015568627de5b2ce4501acd38510350ae08
homepage: http://erebosprotocol.net
latest: 0.1.2
license-name: BSD-3-Clause
maintainer: roman.smrz@seznam.cz
synopsis: Decentralized messaging and synchronization
test-bench-deps: {}
