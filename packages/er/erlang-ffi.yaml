homepage: https://github.com/Szetty/erlang-ffi#readme
changelog-type: markdown
hash: 60cf5bc1c40adf0d1fc733aeaee202d7444cb90fcdefc8ce62101c283183ec79
test-bench-deps:
  MissingH: '>=1.0 && <=1.4.3.0'
  bytestring: '>=0.10 && <=0.11.1'
  erlang-ffi: -any
  base: '>=4.7 && <5'
  hspec: '>=2.7.8 && <2.8'
  filepath: '>=1.0 && <=1.4.2.1'
  network: ==3.1.2.1
  binary: '>=0.2 && <0.9'
  random: '>=1.0 && <=1.2'
  directory: '>=1.0 && <=1.3.6.1'
maintainer: szederjesiarnold@gmail.com
synopsis: Send messages to an Erlang node using Haskell
changelog: |
  # Changelog for erlang-ffi

  1.0.0 - Move erlang-ffi to new and modern stack

  ## Unreleased changes
basic-deps:
  MissingH: '>=1.0 && <=1.4.3.0'
  bytestring: '>=0.10 && <=0.11.1'
  base: '>=4.7 && <5'
  filepath: '>=1.0 && <=1.4.2.1'
  network: ==3.1.2.1
  binary: '>=0.2 && <0.9'
  random: '>=1.0 && <=1.2'
  directory: '>=1.0 && <=1.3.6.1'
all-versions:
- 1.0.0
author: Arnold Szederjesi-Dragomir
latest: 1.0.0
description-type: markdown
description: "**IT IS A MODIFIED VERSION OF THE ORIGINAL [erlang-ffi](https://github.com/poor-a/erlang-ffi)
  TO MAKE IT WORK WITH NEW AND MODERN STACK.**\n\n# erlang-ffi\n\nShould work with
  with OTP version < 23 (have tried only with OTP 22 and 23).\n\nSpeaks the Erlang
  network protocol and impersonates an Erlang node on the network. Fully capable of
  bi-directional communication with Erlang. Erlang types are, as far as reasonable,
  mapped to Haskell types. Messages to Erlang are just function calls in Haskell,
  and messages from Erlang are delivered to MVars. \n\n## Short example\n\nWe introduce
  the `erlang` library through a simple working example. We are going to write a simple
  ''Hello, Erlang!'' program.\n\nLets start with the Haskell code. Here we initialize
  the ffi with `createSelf`, and create a mailbox with `createMBox`. Then we send
  our greeting with our pid to a registered process `p` running on Erlang node `erl@127.0.0.1`.
  We expect an answer, so we get it from the mailbox and print it out to the standard
  output.\n\n~~~~{haskell}\nimport Foreign.Erlang\n\nmain :: IO ()\nmain = do\n  self
  <- createSelf \"haskell@localhost\"\n  mbox <- createMBox self\n  mboxSend mbox
  (Long \"erl\" \"127.0.0.1\") (Right \"p\") (mboxSelf mbox, \"Hello, Erlang!\")\n
  \ answer <- mboxRecv mbox\n  putStrLn (\"Received: \" ++ fromErlang answer)\n~~~~\n\nAlright,
  that wasn't so hard! Lets continue with the Erlang side. We are not going to do
  any fancy thing here neither. We register a process that receives a message and
  replies to it.\n\n~~~~{erlang}\n-module(hello).\n-export([main/0]).\n\nmain() ->\n
  \   P = spawn(fun f/0),\n    register(p, P).\n\nf() ->\n    receive\n        {Hs,
  Msg} ->\n            io:format(\"Received ~p~n\", [Msg]),\n            Hs ! \"Hello,
  Haskell!\"\n    end.\n~~~~\n\nLets start up the engines! We are ready to compile
  and run our programs.\n\n~~~~\n$ ghc Hello.hs\n[1 of 1] Compiling Main             (
  Hello.hs, Hello.o )\nLinking Hello ...\n$ erlc hello.erl\n~~~~\n\nFirstly, we start
  an Erlang node:\n\n~~~~\n$ erl -name \"erl@127.0.0.1\"\nEshell V6.2  (abort with
  ^G)\n(erl@127.0.0.1)1> l(hello).\n{module,hello}\n(erl@127.0.0.1)2> hello:main().\ntrue\n~~~~\n\nErlang
  node is started, and the process is registered as well. Now start the Haskell program:\n\n~~~~\n./Hello
  \nReceived: Hello, Haskell!\n~~~~\n\nTaking a look at the Erlang shell, we see that
  the message is successfully delivered:\n\n~~~~\n(erl@127.0.0.1)3> Received \"Hello,
  Erlang!\"\n~~~~\n"
license-name: LicenseRef-GPL
