all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.0.1
author: Moritz Clasmeier
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  exceptions: '>=0'
  katip: '>=0'
  monad-logger: '>=0'
  mtl: '>=0'
  resourcet: '>=0'
  safe-exceptions: '>=0'
  text: '>=0'
  unliftio-core: '>=0'
  unordered-containers: '>=0'
changelog: |
  # Changelog for error-context

  ## Unreleased changes
changelog-type: markdown
description: "# error-context [![Hackage version](https://img.shields.io/hackage/v/error-context.svg?label=Hackage)](https://hackage.haskell.org/package/error-context)
  [![Stackage version](https://www.stackage.org/package/error-context/badge/lts?label=Stackage)](https://www.stackage.org/package/error-context)
  [![Build Status](https://travis-ci.org/mtesseract/error-context.svg?branch=master)](https://travis-ci.org/mtesseract/error-context)\n\n#
  !! This is experimental work-in-progress !!\n\nWelcome to *error-context*! This
  is a library providing context-aware\nerror and exception handling for Haskell.
  It has built-in support for\nthe [Katip logging\npackage](https://hackage.haskell.org/package/katip).
  This means that\nin combination with Katip, *error-context* can transparently use
  the\ncontext (key-value pairs and namespace hierarchy) maintained by\n`KatipContext`
  monads.\n\n## What problem does *error-context* attempt to solve?\n\nGood error
  handling is hard. In the case of failures it is important\nto keep as much context
  as necessary for a proper problem analysis.\nCall traces sometimes help, but the
  current solutions in Haskell-land\nfor accessing call traces are rather limited.\n\nThe
  *error-context* library allows you to easily attach call traces\n('error contexts')
  to errors, in particular to exceptions. Special\n`catch`- and `try`-functions are
  provided for accessing these\ncontexts.\n\n## How to use it?\n\nAdd an `ErrorContextT`
  layer to your monad transformer stack by adding\n`runErrorContextT` to the transformer
  unwrapping code.\n\nThe `ErrorContextT` transformer provides the context-enriching
  logic\nvia special implementations of `MonadThrow`, `MonadCatch` and\n`MonadIO`.\n\n##
  Examples\n\nConsider this IO action:\n\n```haskell\ntestExample :: IO ()\ntestExample
  = do\n  Left errWithCtx <- tryAnyWithContext . runErrorContextT $ do\n    withErrorNamespace
  \"middle-earth\" $\n      withErrorNamespace \"mordor\" $\n      withErrorContext
  \"ring-carrier\" (\"Frodo\" :: Text) $ \n      throwM TestException\n  putStrLn
  . displayException $ errWithCtx\n```\n\nWhen run, it produces the following output:\n\n```\nException:
  TestException\n           ring-carrier: \"Frodo\"\n  caused by: mordor\n  caused
  by: middle-earth\n```\n\nFor more examples, see\nhttps://github.com/mtesseract/error-context/blob/master/test/Control/Error/Context/Test.hs.\n\n##
  What about \"pure\" exceptions?\n\nThe `ErrorContextT` transformer implements `MonadThrow`
  and `MonadIO`,\ntherefore exceptions thrown by `throwM` and via `liftIO` are\nautomatically
  context-enriched. On the other hand, exceptional values\ncreated via\n\n```haskell\nthrow
  :: Exception e => e -> a\n```\n\nare not context-enriched per se. But there is a
  workaround for this\nuse-case:\n\n```haskell\nensureExceptionContext :: (MonadCatch
  m, MonadErrorContext m) => m a -> m a\n```\n\nThis function provides context-aware
  enriching for any exceptions\nthrown within some monadic value, including those
  thrown by evaluating\nvalues created by `throw`.\n"
description-type: markdown
hash: ea3298ac9c288d039586fecf8381910d87014384b5d5c36607bb83453b4c6a9c
homepage: https://github.com/mtesseract/error-context#readme
latest: 0.2.0.1
license-name: BSD-3-Clause
maintainer: mtesseract@silverratio.net
synopsis: Provides API for enriching errors with contexts
test-bench-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  error-context: '>=0'
  exceptions: '>=0'
  katip: '>=0'
  monad-logger: '>=0'
  mtl: '>=0'
  resourcet: '>=0'
  safe-exceptions: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  unliftio-core: '>=0'
  unordered-containers: '>=0'
