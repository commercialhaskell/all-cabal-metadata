homepage: https://github.com/sthenauth/zxcvbn-hs
changelog-type: markdown
hash: 0dc2158561e2a0f24c642628b1d45369dbee66b13d04a6249c664c4e5967ede2
test-bench-deps:
  base: '>=4.9 && <5.0'
  time: '>=1.8 && <2.0'
  tasty-hedgehog: '>=0.2 && <2'
  base64-bytestring: '>=1.0 && <1.3'
  zxcvbn-hs: -any
  unordered-containers: ==0.2.*
  text: '>=1.2 && <2.1'
  criterion: '>=1.5 && <1.7'
  hedgehog: '>=0.6 && <1.3 || ^>=1.3'
  containers: ==0.6.*
  lens: '>=4.17 && <6'
  math-functions: ==0.3.*
  binary: '>=0.8 && <0.11'
  fgl: '>=5.7 && <5.9'
  zlib: ==0.6.*
  tasty-hunit: ^>=0.10
  binary-instances: '>=1 && <2.0'
  attoparsec: '>=0.13 && <0.15'
  tasty: '>=1.1 && <1.5'
  aeson: '>=1.3 && <2.2 || >=2.2.0.0 && <2.3'
  vector: '>=0.12 && <0.14'
maintainer: Peter Jones <pjones@devalot.com>
synopsis: Password strength estimation based on zxcvbn.
changelog: |
  # Revision History

  ## 0.3.3 (Aug 02 2023)
  * Bump [#17](https://github.com/sthenauth/zxcvbn-hs/pull/17)
    aeson >=1.3 && <2.2 (latest: 2.2.0.0)
    hedgehog >=0.6 && <1.3 (latest: 1.3)


  ## 0.3.2 (June 22, 2023)

  + Bump version numbers [#14](https://github.com/sthenauth/zxcvbn-hs/pull/14)
  + Fix minor hlint error
  + Add ghc 9.6 support

  ## 0.3.1 (May 26, 2022)

  + Bump version numbers

  ## 0.3.0.0 (October 29, 2020)

    * Added a `ToJSON` instance to the `Score` type.

    * Minor releases:

      - Version 0.3.1 (May 26, 2022): Update dependency bounds

  ## 0.2.1.0 (September 25, 2019)

    * Export the entire `HasConfig` class so external code can use the
      `config` lens.

  ## 0.2.0.0 (September 12, 2019)

    * Make it possible for external projects to use the code generation
      tool (`zxcvbn-tools`)

    * Due to the `binary-orphans -> binary-instances` rename this
      package now only compiles under `nixpkgs-unstable`.

  ## 0.1.0.0 (September 10, 2019)

    * Initial (unreleased) version
basic-deps:
  pipes-text: '>=0.0 && <1.1'
  base: '>=4.9 && <5.0'
  time: '>=1.8 && <2.0'
  base64-bytestring: '>=1.0 && <1.3'
  zxcvbn-hs: -any
  unordered-containers: ==0.2.*
  text: '>=1.2 && <2.1'
  filepath: ^>=1.4
  containers: ==0.6.*
  lens: '>=4.17 && <6'
  math-functions: ==0.3.*
  binary: '>=0.8 && <0.11'
  pipes: ^>=4.3
  fgl: '>=5.7 && <5.9'
  zlib: ==0.6.*
  mtl: '>=2.2 && <2.4.0'
  binary-instances: '>=1 && <2.0'
  attoparsec: '>=0.13 && <0.15'
  optparse-applicative: '>=0.14 && <0.18'
  pipes-safe: ^>=2.3
  aeson: '>=1.3 && <2.2 || >=2.2.0.0 && <2.3'
  vector: '>=0.12 && <0.14'
all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1
- 0.3.2
- 0.3.3
author: Peter Jones <pjones@devalot.com>
latest: 0.3.3
description-type: markdown
description: |
  # Password Strength Estimation

  [![CI](https://github.com/sthenauth/zxcvbn-hs/workflows/CI/badge.svg)](https://github.com/sthenauth/zxcvbn-hs/actions)
  [![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/sthenauth/zxcvbn-hs?label=release)](https://github.com/pjones/zxcvbn-hs/releases)
  [![Hackage](https://img.shields.io/hackage/v/zxcvbn-hs)](https://hackage.haskell.org/package/zxcvbn-hs)

  ## What?

  This is a native Haskell implementation of the [zxcvbn][] password
  strength estimation algorithm as it appears in the 2016 USENIX
  Security [paper and presentation][paper] (with some small
  modifications).

  ## Why?

  The [zxcvbn][] algorithm is a major improvement over traditional
  password strength estimators.  Instead of counting the occurrence of
  special characters, mixed case characters, numeric digits, etc.,
  zxcvbn analyzes a plain text password and estimates the number of
  guesses that an attacker would need to make in order to crack it.

  ## How?

  A plain text password is broken into a list of substrings called
  tokens and each token is analyzed as follows:

    * Membership in a password or word frequency dictionary

    * Reversing the token and testing it against said dictionaries

    * Decoding l33t speak and testing it against said dictionaries

    * Determine if the token forms a pattern on a keyboard
      (e.g., "asdfgt", "poiuy", "aSw2@", etc.)

    * Compare the code points of the characters to see if they form a
      sequence (e.g., "13579", "abcde", "zyx", etc.)

    * Attempt to parse the token as a date with or without separators
      (e.g., "1013", "2011-01-01", "23/01/19", "012319", etc.)

    * Search for adjacent tokens that are identical (i.e. repeating
      patterns)

  Each possible interpretation of a token is given an estimated number
  of guesses and then the entire password is scored based on the weakest
  path.

  ## Usage

  A complete example can be found in the
  [example/Main.hs](example/Main.hs) file.  That said, it's pretty easy
  to use:

  ```haskell
  import Text.Password.Strength (score, strength, en_US)
  import Data.Time.Clock (getCurrentTime, utctDay)

  main = do
    -- The date matcher needs to know the current year.
    refDay <- utctDay <$> getCurrentTime

    let password = "password1234567"
        guesses  = score en_US refDay password

    print guesses -- Number of estimated guesses (18)
    print (strength guesses) -- Sum type describing the password strength (Risky)
  ```

  ## Demo App

  If you want to play with an interactive demo take a look at the
  [zxcvbn-ws repository][zxcvbn-ws].

  ## Customization

  You'll most likely want to add custom words to the frequency
  dictionaries.  For example, the name of your application, your domain
  name, and any personal information you have on the customer.  Doing so
  will penalize the score of a password using such information.

  The `Text.Password.Strength.Config` module defines the
  `addCustomFrequencyList` function which can be used to easily add
  words to the frequency dictionary.

  ### Localization

  Unlike other implementations of the [zxcvbn][] algorithm, this version
  fully supports localization.  It's easy to augment or completely
  replace the frequency dictionaries and keyboard layouts.  Tools are
  provided to compile simple text files into the data types required by
  this library.

  However, like the other implementations, the default configuration is
  heavily biased towards United States English, hence its name: `en_US`.

  Included in the default configuration are:

    * 30,000 most frequently used passwords according to [Mark Burnett][]

    * 30,000 most frequently used words in US movies and television shows

    * 30,000 most frequently used words in Wikipedia English articles

    * Top 10,000 surnames

    * Top 4,275 female names

    * Top 1,219 male names

    * QWERTY keyboard layout

    * Number pad keyboard layout

  ### Existing Localization Packages

    * [zxcvbn-dvorak][] Dvorak keyboard layout

  ## Performance

  It takes approximately 1.5 ms to process a 30-character password.
  Performance degrades as the length of the password increases (e.g., a
  60-character password clocks in at 13.54 ms).

  You probably want to limit the number of characters you send through
  the `score` function using something like `Text.take 100` in order to
  prevent a malicious user from slowing down your application.

  Most of the time is currently spent in decoding and testing l33t
  speak.  If you want to work on improving the performance I suggestion
  you generate a profile using the benchmark tool.

  [Mark Burnett]: https://xato.net/today-i-am-releasing-ten-million-passwords-b6278bbe7495?gi=d98e0d16566b
  [paper]: https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/wheeler
  [zxcvbn-dvorak]:https://code.devalot.com/sthenauth/zxcvbn-dvorak
  [zxcvbn-ws]: https://code.devalot.com/sthenauth/zxcvbn-ws
  [zxcvbn]: https://github.com/dropbox/zxcvbn
license-name: MIT
