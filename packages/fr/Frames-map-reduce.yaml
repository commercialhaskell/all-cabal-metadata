all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.1
- 0.4.1.2
author: Adam Conner-Sax
basic-deps:
  Frames: '>=0.6.1 && <0.8'
  base: '>=4.12.0 && <5'
  containers: '>=0.5.0 && <0.7'
  foldl: '>=1.4.5 && <1.5'
  hashable: '>=1.2.7 && <1.6'
  map-reduce-folds: '>=0.1.0 && <0.2'
  newtype: '>=0.2 && <0.3'
  profunctors: '>=5.3 && <5.7'
  vinyl: '>=0.11.0 && <0.15'
changelog: |
  v0.4.4.2
  * Bumped upper bounds in cabal

  v 0.4.1.1
  * Bumped some upper bounds

  v 0.4.0.0
  * Added ```splitOnData``` for assigning via a given set of data cols.
  * Bumped upper bounds
  * Checked compilation w/ghc-8.10.2
  * Fixed a redundant include warning for Monoid using CPP in Frames.Folds

  v 0.3.0.0
  * Added Combinator for aggregation in Frames.Aggregation along with helpers to create folds over data cols, promote simple functions to
  record functions to be used in aggregations, combine key aggregations.
  * Added ```toRecordFold``` to the Folds modules to simplify making record to record folds from record to Type folds. See examples.
  * Added an example of its use in the example.
  * Added the full record/functor generalization in Frames.Aggregation.General
  * Added the specialization to ```Maybe``` in Frames.Aggregation.Maybe
  * Cleanup of unneccesary imports
  * Suppressed Orphan Instance warnings about Hashable instances for ```Record``` and general record types.  These
  instances should properly be in Vinyl.
  * Bumped some upper bounds for GHC 8.8.  Still can't compile with 8.8+ until discrimination is updated.

  v 0.2.0.0
  * Added Combinators for ```record (Maybe :. ElField) rs``` (Much thanks to Tim Pierson, @o1lo01ol1o, for the idea and the work!).
  * Added Combinators polymorphic in record type (```Rec```, ```ARec``` or ```SRec``` are supported) and composed interpretation functor ```f :. ElField```
  * ```Maybe :. ElField``` case now uses the general case in order to avoid code duplication
  * ```Record``` case still uses separate code because the amount of new coercion code required was enough to not seem worth the re-use of the polymorphic case.

  v 0.1.0.2
  * Changed example from "executable" to "test-suite".  Now it doens't need to be built and its dependencies don't leak to library users.

  v 0.1.0.1
  * lowered containers lower bound
  * rasied some outdated upper bounds (profunctors, hashable)

  v 0.1.0.0
  * Initial hackage release
changelog-type: markdown
description: |-
  Frames-map-reduce provides some helpers for using the map-reduce-folds library with vinyl records and Frames.
  These include functions for filtering Frames, splitting records into key columns and data columns and
  recombining key columns with other columns after reducing.
  This package also provides some tools for building folds over records from folds over each column,
  e.g, summing multiple numerical columns into a multi-column result.
description-type: haddock
hash: 2a56b5597175df4f88a98eafc90e8a078d66fbba5b7671cf8a4db70589ff0b99
homepage: ''
latest: 0.4.1.2
license-name: BSD-3-Clause
maintainer: adam_conner_sax@yahoo.com
synopsis: Frames wrapper for map-reduce-folds and some extra folds helpers.
test-bench-deps:
  Frames: '>=0'
  Frames-map-reduce: '>=0'
  base: '>=0'
  foldl: '>=0'
  random: '>=1.2 && <1.3'
  text: '>=1.2.3 && <2.2'
  vector: '>=0'
  vinyl: '>=0'
