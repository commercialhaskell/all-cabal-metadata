homepage: https://github.com/coot/free-category#readme
changelog-type: markdown
hash: 44f1f6d5a08f5067768fdddb88c3ac56290361cddb52c23aa552234f34e6717c
test-bench-deps:
  base: -any
  criterion: -any
  free-category: -any
  free-algebras: -any
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: -any
maintainer: coot@coot.me
synopsis: efficient data types for free categories and arrows
changelog: "# Changelog for free-category\n\n## Version 0.0.4.3\n- updated for GHC
  9.0.1\n- added Control.Category.FreeEffect.runEffCat (thanks to Manuel BÃ¤renz)\n\n##
  Version 0.0.4.2\n- updated for *GHC 8.10.1*\n\n## Version 0.0.4.0\n- hoistOp\n-
  Renamed `Control.Category.FreeEff` module as `Control.Category.FreeEffect`\n  and
  renamed top level terms:\n    - `EffCategory` type class to `EffectCategory`\n    -
  `FreeEffCat` to `EffCat`\n    - `FreeEffCat` constructor as `Effect` and `lift`
  as `effect`\n    - `liftCat` to `liftEffect`\n    - `foldNatLift` to `foldNatEffCat`\n-
  Show instance of 'Cat' and 'C' via 'ListTr' (GHC >= 806)\n- Performance optimisations:
  rewrite rules & inline pragmas\n- Export ListTr from Control.Category.Free\n- foldrL,
  foldlL and zipWithL\n\n## Version 0.0.3.0\n- Efficient 'Cat' and 'Aff' based on
  real time queues with scheduling\n- Added Monoid instances \n- Added Op category\n-
  added `arrArr`, `mapArr`, `foldArr` for `Arr` free arrow category\n- added `arrCat`,
  `mapCat`, `fodlMap` for `Cat` free categroy\n\n## Version 0.0.2.0\n\n- EffCategory
  class and FreeEffCat category transformer\n- Example usage of FreeEffCat\n\n## Version
  0.0.1.0\n- free category (concrete and condensity transformed)\n- free arrows (concrete
  and condensity transformed)\n"
basic-deps:
  base: '>=4.9 && <5'
  free-algebras: '>=0.0.8.2'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.4.0
- 0.0.4.1
- 0.0.4.2
- 0.0.4.3
author: Marcin Szamotulski
latest: 0.0.4.3
description-type: markdown
description: |
  # Free Category
  [![Maintainer: coot](https://img.shields.io/badge/maintainer-coot-lightgrey.svg)](http://github.com/coot)
  [![Haskell/CI](https://github.com/coot/free-category/workflows/Haskell/CI/badge.svg)](https://github.com/coot/free-category/actions)

  This package contains efficient implementations of free categories. There are
  various representations available:

  * real-time queues (C. Okasaki 'Pure Functional Data Structures')
  * type aligned lists
  * continuation passing style (Church encoding)

  Free arrows and free Kleisli categories are also included.

  Free categories are useful to model state machines in a simple yet type safe
  manner.  For that purpose `Kleisli` categories are a very useful target which
  allows to include monadic computations.  This package contains a useful
  generalisation of `Kleisli` categories captured by `EffectCategory` class
  (categories with effects), and a (free) transformer which lifts a category to
  a category with effects.

  ## Benchmarks

  Check performance characteristics of various representations:

  * [report-O0](/bench/report-O0.md)
  * [report-O1](/bench/report-O1.md)
  * [report-O2](/bench/report-O2.md)

  ## Resources
  * [LoginStateMachine](https://github.com/coot/free-category/blob/master/examples/src/LoginStateMachine.hs):
    based on [State Machines All The Way
    Down](https://www.youtube.com/watch?v=xq7ZuSRgCR4) by Edwin Bradly, 2017.
    You can run it with `cabal new-run examples:login-state-machine`.
  * Read more [here](https://coot.me/posts/finite-state-machines.html) on
    a simple example of a finite state machine encoded using a free category
    using a simple GADT.
  * Another
    [example](https://github.com/coot/free-algebras/blob/master/examples/src/Control/Category/Free.hs).
  * [Blog post](https://coot.me/posts/kleisli-categories-and-free-monads.html) on Kleisli categories.
license-name: MPL-2.0
