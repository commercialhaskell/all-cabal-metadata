all-versions:
- 1.0.0.0
- 1.0.0.1
author: XT
basic-deps:
  base: '>=4.7 && <5'
changelog: |
  # Changelog for `from`

  All notable changes to this project should be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## 1.0.0.1 - 2025-10-24

  ### Changed

  - Split the test code into ordinary test and code generation test. The code generation test will not be run by default (by Hackage or Stackage, for example).

  ## 1.0.0.0 - 2025-10-24

  Initial release.

  ### Added

  - Typeclasses `From` and `TryFrom`.
  - Instances of `From` for some fundamental type-mappings in `base`:
      - All types in `Data.Int` and `Data.Word` can be both the source and the destination of the conversion.
      - The types `Float` and `Double` can be the destination, but not the source. So `from :: Int32 -> Float` exists, while `from :: Float -> Int32` does not.
      - That's it. We begin with minimal instances intentionally. For example, there is no `instance From Int String`. This is because it is tricky (often impossible) to selectively import instances, especially when the module dependency graph is complicated. We'd need to be careful about adding instances.
changelog-type: markdown
description: |
  # from

  Note that this package is a part of the "project" that includes from and from-string. For the general rationale behind this idea, see `README.md` under the project root.

  This Haskell library package provides the `From` and `TryFrom` typeclasses.

  The `From` typeclass provides `from :: a -> b`. It is an interface for types that can be converted from/to each other.

  The `TryFrom` typeclass provides `tryFrom :: a -> Maybe b`. It is an interface for types that can be converted from/to each other, with the possibility of a failure.

  This package has **1** dependency: base.

  ## Instances

  It is difficult and often impossible to "selectively" import/export typeclass instances. Therefore, we need to be careful about what instances to provide by default.

  There are base functions, some of them even in `Prelude`, that basically serve as a less general version of `from`. Examples include `fromIntegral` and `fromEnum`. However, naively defining

  - `instance (Integral a, Num b) => From a b` and
  - `instance (Enum a) => From a Int`

  will quickly lead us to trouble:

  ```
      • Overlapping instances for From Int16 Int
          arising from a use of ‘from’
        Matching instances:
          instance (Integral a, Num b) => From a b
          instance Enum a => From a Int
        ...
  ```

  Therefore, this package does not provide such "contextual" instances.

  Instead, concrete instances are provided. For example, all pairs (excluding self to self) of these integral types are instantiated using `fromIntegral`:

  - `Int`
  - `Integer`
  - `Int8`
  - `Int16`
  - `Int32`
  - `Int64`
  - `Word8`
  - `Word16`
  - `Word32`
  - `Word64`

  Each type can be both source and destination of `from`. Additional types are instantiated as destination-only:

  - `Float`
  - `Double`
description-type: markdown
hash: ff53dbec684d26a673bbc1ac0f376dbb78bac5235a3aa9cf86d00f15daf82573
homepage: https://codeberg.org/xt/from
latest: 1.0.0.1
license-name: Apache-2.0
maintainer: git@xtendo.org
synopsis: Typeclasses for type conversion mappings
test-bench-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.11.4.0 && <2'
  from: '>=0'
  rawfilepath: '>=1.0.1 && <2'
  unix: '>2.7.3 && <3'
