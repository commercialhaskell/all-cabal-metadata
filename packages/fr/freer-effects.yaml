all-versions:
- 0.3.0.0
- 0.3.0.1
author: Allele Dev, Ixcom Core Team, and other contributors
basic-deps:
  base: '>=4.7 && <5'
  freer-effects: '>=0'
changelog: |
  # Change Log

  All notable changes to this project will be documented in this file.

  ## [0.3.0.1] (April 16, 2017)

  * Relax `hlint` version bounds and disable `hlint` tests in non-developer
    builds.
    [#31](https://github.com/IxpertaSolutions/freer-effects/issues/31)

  ## [0.3.0.0] (March 06, 2017)

  * Package renamed to `freer-effects` to distinguish it from original `freer`.
    [#4](https://github.com/IxpertaSolutions/freer-effects/issues/4)
  * Fix `Could not deduce: effs ~ (r : rs)` that may occur when using
    a `Member` contraint (a regression introduced in 0.2.4.0)
    [freer!12](https://gitlab.com/queertypes/freer/merge_requests/12)
  * Add `runNatS` convenience function
    [freer!13](https://gitlab.com/queertypes/freer/merge_requests/13)
  * Add `evalState` and `execState` convenience functions
    [freer!14](https://gitlab.com/queertypes/freer/merge_requests/14)
  * Data constructors of `Yield`, `CutFalse`, `Fresh`, `State` and `Trace`
    are now exposed in addition to `Exc`, `Reader` and `Writer`
  * Generalised type signature of `asks`.
    [#7](https://github.com/IxpertaSolutions/freer-effects/issues/7)
  * Renamed modules `Data.Open.Union.*` to `Data.OpenUnion.*`.
    [#8](https://github.com/IxpertaSolutions/freer-effects/issues/8)
  * `NonDetEff` separated into its own module and renamed to `NonDet`.
    [#11](https://github.com/IxpertaSolutions/freer-effects/issues/11)
  * Reimplement `Union` using
    <http://okmij.org/ftp/Haskell/extensible/OpenUnion51.hs> as a basis.
    [#14](https://github.com/IxpertaSolutions/freer-effects/issues/14)
  * Renamed `Teletype` example DSL to `Console`.

  ## [0.2.4.1] (November 25, 2016)

  * Restore GHC (7.8, 7.10) compatibility

  ## 0.2.4.0 (November 25, 2016)

  * Internal reorg
    * In particular, hide implementation details in Union.Internal
    * Rewrite interpreters in terms of `extract` instead of `decomp`
  * Add `runNat` convenience function

  ## 0.2.3.0 (June 25, 2016)

  * Add GHC 8 support

  ## 0.2.2.2 (Sep. 14, 2015)

  * Use local `data Nat` for `Data.Open.Union`
    * Using GHC.TypeLits lead to overlapping instances

  ## 0.2.2.1 (Sep. 14, 2015)

  * Document ALL THE THINGS

  ## 0.2.2.0 (Sep. 13, 2015)

  * Add bench suite

  ## 0.2.1.0 (Sep. 13, 2015)

  * Add test suite

  ## 0.2.0.2 (Sep. 12, 2015)

  * Clean up language extensions per file
  * Add Teletype DSL to the README

  ## 0.2.0.1 (Sep. 12, 2015)

  * Add Teletype DSL example
  * Expose `send` in public interface

  ## 0.2.0.0 (Sep. 12, 2015)

  * Implement NonDetEff
  * Separate Cut/Coroutine out from Internals
    * Partial implementation: won't compile yet
  * Extract remaining examples from Internal comments

  ## 0.1.1.0 (Sep. 12, 2015)

  * Warnings clean up
  * Examples separated from primary implementation
  * Initial project documentation added

  ## 0.1.0.0 (Sep. 12, 2015)

  * Initial release

  [0.3.0.1]: https://github.com/IxpertaSolutions/freer/compare/0.3.0.0...0.3.0.1
  [0.3.0.0]: https://github.com/IxpertaSolutions/freer/compare/0.2.4.1...0.3.0.0
  [0.2.4.1]: https://github.com/IxpertaSolutions/freer/compare/0.2.4.0...0.2.4.1
changelog-type: markdown
description: |
  # Freer Effects: Extensible Effects with Freer Monads

  [![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)](http://www.haskell.org)
  [![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)](https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29)

  [![Hackage](http://img.shields.io/hackage/v/freer-effects.svg)](https://hackage.haskell.org/package/freer-effects)
  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/freer-effects.svg)](http://packdeps.haskellers.com/reverse/freer-effects)
  [![Build](https://travis-ci.org/IxpertaSolutions/freer-effects.svg?branch=master)](https://travis-ci.org/IxpertaSolutions/freer-effects)


  # Description

  Library `freer-effects` is an implementation of effect system for Haskell,
  which is based on the work of Oleg Kiselyov et al.:

  * [Freer Monads, More Extensible Effects](http://okmij.org/ftp/Haskell/extensible/more.pdf)
  * [Reflection without Remorse](http://okmij.org/ftp/Haskell/zseq.pdf)
  * [Extensible Effects](http://okmij.org/ftp/Haskell/extensible/exteff.pdf)

  Much of the implementation is a repackaging and cleaning up of the reference
  materials provided [here](http://okmij.org/ftp/Haskell/extensible/).


  # Features

  The key features of Freer are:

  * An efficient effect system for Haskell as a library.
  * Implementations for several common Haskell monads as effects:
      * `Reader`
      * `Writer`
      * `State`
      * `StateRW`: State in terms of Reader/Writer.
      * `Trace`
      * `Exception`
  * Core components for defining your own Effects.


  # Example: Console DSL

  Here's what using Freer looks like:

  ```haskell
  {-# LANGUAGE GADTs #-}
  {-# LANGUAGE FlexibleContexts #-}
  {-# LANGUAGE TypeOperators #-}
  {-# LANGUAGE DataKinds #-}
  module Console where

  import Control.Monad.Freer
  import Control.Monad.Freer.Internal
  import System.Exit hiding (ExitSuccess)

  --------------------------------------------------------------------------------
                                 -- Effect Model --
  --------------------------------------------------------------------------------
  data Console s where
      PutStrLn    :: String -> Console ()
      GetLine     :: Console String
      ExitSuccess :: Console ()

  putStrLn' :: Member Console r => String -> Eff r ()
  putStrLn' = send . PutStrLn

  getLine' :: Member Console r => Eff r String
  getLine' = send GetLine

  exitSuccess' :: Member Console r => Eff r ()
  exitSuccess' = send ExitSuccess

  --------------------------------------------------------------------------------
                            -- Effectful Interpreter --
  --------------------------------------------------------------------------------
  runConsole :: Eff '[Console] w -> IO w
  runConsole (Val x) = return x
  runConsole (E u q) =
      case extract u of
          PutStrLn msg -> putStrLn msg >>  runConsole (qApp q ())
          GetLine      -> getLine      >>= \s -> runConsole (qApp q s)
          ExitSuccess  -> exitSuccess

  --------------------------------------------------------------------------------
                               -- Pure Interpreter --
  --------------------------------------------------------------------------------
  runConsolePure :: [String] -> Eff '[Console] w -> [String]
  runConsolePure inputs req =
      reverse . snd $ run (handleRelayS (inputs, []) (\s _ -> pure s) go req)
    where
      go  :: ([String], [String])
          -> Console v
          -> (([String], [String]) -> Arr '[] v ([String], [String]))
          -> Eff '[] ([String], [String])
      go (is,   os) (PutStrLn msg) q = q (is, msg : os) ()
      go (i:is, os) GetLine        q = q (is, os) i
      go ([],   _ ) GetLine        _ = error "Not enough lines"
      go (_,    os) ExitSuccess    _ = pure ([], os)
  ```


  # Contributing

  Contributions are welcome! Documentation, examples, code, and feedback - they
  all help.


  ## Developer Setup

  The easiest way to start contributing is to install
  [stack](https://haskellstack.org/). Stack can install GHC/Haskell for you, and
  automates common developer tasks.

  The key commands are:

  * `stack setup` – install required version of GHC compiler
  * `stack build` – builds project, dependencies are automatically resolved
  * `stack test` – builds project, its tests, and executes the tests
  * `stack bench` – builds project, its benchmarks, and executes the benchamks
  * `stack ghci` – start a REPL instance with a project modules loaded
  * `stack clean`
  * `stack haddock` – builds documentation

  For more information about `stack` tool can be found in its
  [documentation](https://haskellstack.org/).


  # Licensing

  This project is distrubted under a BSD3 license. See the included
  LICENSE file for more details.


  # Acknowledgements

  Package `freer-effects` started as a fork of
  [freer](http://hackage.haskell.org/package/freer) authored by Allele Dev.

  This package would not be possible without the paper and the reference
  implementation. In particular:

  * `Data.OpenUnion` maps to
    [OpenUnion51.hs](http://okmij.org/ftp/Haskell/extensible/OpenUnion51.hs)
  * `Data.FTCQueue` maps to
    [FTCQueue1](http://okmij.org/ftp/Haskell/extensible/FTCQueue1.hs)
  * `Control.Monad.Freer*` maps to
    [Eff1.hs](http://okmij.org/ftp/Haskell/extensible/Eff1.hs)

  There will be deviations from the source.
description-type: markdown
hash: 5e5595bd0b3d4a5ffe872f84ff778e08d9032750d87943ea85abe35abdb6adb3
homepage: https://github.com/IxpertaSolutions/freer-effects
latest: 0.3.0.1
license-name: BSD-3-Clause
maintainer: ixcom-core@ixperta.com
synopsis: Implementation of effect system for Haskell.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  criterion: '>=0'
  free: '>=0'
  freer-effects: '>=0'
  mtl: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
