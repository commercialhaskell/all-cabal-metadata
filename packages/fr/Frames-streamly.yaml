homepage: https://github.com/adamConnerSax/Frames-streamly#readme
changelog-type: markdown
hash: 2f890bfe7577aef2b04d8a52b868c31999bfd174319ca0d4f540376e5e27f179
test-bench-deps:
  fast-builder: -any
  cereal: -any
  bytestring: -any
  Frames-streamly: -any
  base: -any
  bytestring-strict-builder: -any
  text: -any
  clock: -any
  strict: -any
  streamly-bytestring: -any
  Frames: -any
  vinyl: -any
  binary: -any
  relude: -any
  mtl: -any
  foldl: -any
  streamly: -any
  primitive: -any
  vector: -any
maintainer: adam_conner_sax@yahoo.com
synopsis: A streamly layer for Frames I/O
changelog: |
  v0.1.1.0
  * Added ```StrictReadRec``` class

  v0.1.0.3
  * Bumped some upper bounds and raised the lower bound on relude

  v0.1.0.2
  * Relaxed some ```MonadIO``` constraints to ```Monad``` in Frames.Streamly.CSV

  v0.1.0.0
  * Initial Release
basic-deps:
  exceptions: '>=0.10.0 && <0.11'
  base: '>=4.12.0 && <4.17'
  text: '>=1.2.3 && <1.3'
  strict: '>=0.4 && <0.5'
  Frames: '>=0.6 && <0.8'
  vinyl: '>=0.12 && <0.14'
  relude: '>=1.0.0 && <1.1'
  streamly: '>=0.7 && <0.8'
  primitive: '>=0.7 && <0.8'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
author: Adam Conner-Sax
latest: 0.1.1.0
description-type: markdown
description: "# Frames-streamly- v 0.1.0.2\n\n[![Build Status][travis-badge]][travis]\n[![Hackage][hackage-badge]][hackage]\n[![Hackage
  Dependencies][hackage-deps-badge]][hackage-deps]\n\nThis library contains some useful
  functions for using the \n[Frames](https://hackage.haskell.org/package/Frames) \npackage
  with [streamly](https://hackage.haskell.org/package/streamly).\n\nFrames has some
  built-in dependencies on the \n[Pipes](https://hackage.haskell.org/package/pipes)
  package,\na few of which--primarily file I/O-- require users of Frames to use\nthe
  Pipes package explicitly.  Streamly provides much of the same \nfunctionality as
  Pipes and may be some users preferred streaming \ninterface.\n\nThis package replicates
  all the external-facing bits of Frames that\nrely on Pipes and uses streamly instead.
  \ It also fleshes out the Frames\nAPI in a couple of places:\n\n1. It adds some
  flexibility to the functions to write CSV files.  \nFrames supported formatting
  of fields for CSV \nvia a typeclass ```ShowCSV```.  That is supported here as well.
  \ But\nthis package also supports using the ```Show``` instance, and, for more\ncustomized
  formatting,\ncreating field-by-field formatting on the fly via\na [Vinyl](https://hackage.haskell.org/package/vinyl)
  record of functions.\nHelpful combinators are provided for formatting any single
  field with\na ```Show``` instance or a ```ShowCSV``` instance or a user provided\nfunction
  from the field type to ```Text```. \n\n2. It adds some (experimental) support for
  ```Frame``` transformations \nusing Streamly streams as an intermediate state for
  transformations\nwhich may benefit from the concurrency available in streamly. Such\ntransformations
  first make any foldable of Records \n(including a ```Frame```) into a stream, apply
  a streamly transformation\nto a stream of some other records and then transforms
  those into a frame.\nSo the result is a frame -> frame function but one that can
  take advantage\nof streamly's features at the cost of the transformation into a
  stream and then\nback in to a Frame.\nThis allows use of the concurrent features
  of \nStreamly for functions like ```mapM``` or ```mapMaybeM```.  \n\n3. It adds
  Streamly folds for the various stream to in-core \ntransformations in case users
  want to use them directly \nin stream to Frame transformations.  Frames exposed
  only the functions\nto transform an entire stream (a pipe producer) into Frames
  \"AoS\" \nstructure.  This library provides that functionality as well, in this
  case\nusing streamly streams as the input.\nBut here we also expose streamly folds
  from streams of\nRecords to Frames so that more complex stream to Frame transformations\ncan
  be done by the user.  For example, suppose you are doing\na map/reduce on a large
  data set and you want to store the \ngrouped subsets as Frames for memory-efficiency.
  \ These folds\nmake that simpler.\n\n\nAn example using some of the utilities is
  [here](https://github.com/adamConnerSax/Frames-streamly/blob/master/examples/Main.hs).\n_______\n\nLICENSE
  (BSD-3-Clause)\n_______\nCopyright (c) 2020, Adam Conner-Sax, All rights reserved.\n\nRedistribution
  and use in source and binary forms, with or without\nmodification, are permitted
  provided that the following conditions are met:\n\n    * Redistributions of source
  code must retain the above copyright\n      notice, this list of conditions and
  the following disclaimer.\n\n    * Redistributions in binary form must reproduce
  the above\n      copyright notice, this list of conditions and the following\n      disclaimer
  in the documentation and/or other materials provided\n      with the distribution.\n\n
  \   * Neither the name of Adam Conner-Sax nor the names of other\n      contributors
  may be used to endorse or promote products derived\n      from this software without
  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
  HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
  BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS
  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n[travis]:        <https://travis-ci.org/adamConnerSax/Frames-streamly>\n[travis-badge]:
  \ <https://travis-ci.org/adamConnerSax/Frames-streamly.svg?branch=master>\n[hackage]:
  \      <https://hackage.haskell.org/package/Frames-streamly>\n[hackage-badge]: <https://img.shields.io/hackage/v/Frames-streamly.svg>\n[hackage-deps-badge]:
  <https://img.shields.io/hackage-deps/v/Frames-streamly.svg>\n[hackage-deps]: <http://packdeps.haskellers.com/feed?needle=Frames-streamly>\n"
license-name: BSD-3-Clause
