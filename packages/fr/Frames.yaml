homepage: ''
changelog-type: markdown
hash: dc30b1eee32e9ef6a5df31ddd951aba526de56c05bb9c495d0ce39e1f24d37c6
test-bench-deps:
  htoml: -any
  base: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  criterion: -any
  Frames: -any
  HUnit: -any
  vinyl: -any
  lens: -any
  pipes: '>=4.1.5 && <4.4'
  foldl: '>=1.3 && <1.5'
  attoparsec: -any
  regex-applicative: -any
  transformers: -any
  temporary: -any
  pretty: -any
  template-haskell: -any
  directory: -any
maintainer: acowley@gmail.com
synopsis: Data frames For working with tabular data files
changelog: "# 0.7.2\n\n- Add `writeCSVopts` that accepts options to specify the CSV
  delimiter.\n- Add `inferencePrefix` that controls how many lines of the input file
  are used for column type inference (default is 1000).\n- Add `readTableDebug` that
  loads and parses a data frame as `readTable`, but additionally prints lines that
  failed to parse to `stderr`.\n\n# 0.7.1\n\n- Add `showFrame`, `printFrame`, `takeRows`,
  and `dropRows` to the `Frames.Exploration` module. These helpers for working with
  `Frames` are re-exported from the `Frames` module itself. Thanks to @chfin.\n\n-
  GHC-9.0.1 support.\n\n# 0.7.0\n\nGHC-8.10 support in Vinyl requires a major version
  bump.\n\n# 0.6.3\n \n- Fix support for categorical column names that include spaces
  (@epn09)\n\n# 0.6.0\nSupport external CSV tokenizers\n\nInternal functionality is
  now defined more cleanly atop a stream of rows already broken into columns (rather
  than a stream of rows that we quietly break into columns ourself). This permits
  the use of external parsers such as provided by the new [Frames-dsv](https://hackage.haskell.org/package/Frames-dsv)
  package that supplies a CSV parser built atop `hw-dsv`.\n\nThe built-in CSV parser
  remains for ease of installation.\n\n# 0.5.1\nGHC 8.6 compatibility\n\n# 0.5.0\n\n-
  Renamed the `rgetf` and `rputf` exported by the `Frames` module to `rgetField` and
  `rputField`. This avoids clashing with the same names exported by `vinyl` and further
  advances the process of eliminating the old `Frames` `Col` type in favor of `vinyl`'s
  `ElField`.\n\n- Add a `ShowCSV` class rather than leaning on overburdened `Show`
  instances.\n\n- Add support for categorical column types: values of these types
  are one of a small number of textual values. Because they can only take on a small
  number of different text values, we can compactly represent values of these types
  as standard Haskell sum types.\n\n# 0.4.0\n\n- Added table joins in `Data.Vinyl.Joins`
  (Chris Hammill)\n\n- Changed types of `mapMethod` and `mapMethodV`\n\nThese now
  rely on explicit `TypeApplications` rather than `Proxy` values.\n\n# 0.3.0\n\n-
  Pervasive use of `pipes` for CSV data loading\n\nThis provides better exception
  handling (file handles should be closed more reliably), and offers an interface
  point for customized handling of input texts. An example of this latter point is
  working with particular file encodings.\n\nA breaking change is that operations
  that previously returned `IO` values now return `MonadSafe` constrained values.\n\n-
  Adaptation of `Data.Vinyl.Curry.runcurry` to the Frames `Record` type\nThis simply
  strips the column name information from a row before applying the function from
  `vinyl`.\n\n# 0.2.1\n\n- Refactored to use the `CoRec` type provided by `vinyl`
  >= 0.6.0\n\n- Fixed bug in typing mostly-numeric columns\nSuch columns must be represented
  as `Text`. Previously, we strove a bit too hard to avoid falling back to `Text`
  resulting in dropping rows containing non-numeric values for columns we crammed
  into a numeric type.\n\n- Minor optimization of CSV parsing\nIn particular, dealing
  with RFC4180 style quoting\n\n- GHC-8.2.1 compatibility\n\n# 0.1.10\n\n- Added CSV
  output functions: `produceCSV` and `writeCSV`\n- Added an Eq instance for the `Frame`
  type\n\n\n# 0.1.9\n\nFixed column type inference bug that led the inferencer to
  prefer `Bool` too strongly.\n\nThis was fallout from typing columns whose values
  are all 0 or 1 as `Bool`.\n\n# 0.1.6\n\nRe-export `Frames.CSV.declareColumn` from
  `Frames`. This makes it much\neasier to manually define column types.\n\n# 0.1.4\n\nUse
  `microlens` instead of `lens-family-core` for demos.\n\n# 0.1.3\n\nGHC-8.0.1 compatibility\n\n#
  0.1.2.1\n\nImproved documentation based on suggestions by Alexander Kjeldaas\n\n#
  0.1.2\n\nFixed bug in `Monoid` instance of `Frame` (@dalejordan)\n\n# 0.1.1.0\n\nAdded
  `frameConsA`, `frameSnoc`, and `RecordColumns` to help with\nchanging row types.\n\n#
  0.1.0.0\n\nInitial version pushed to hackage.\n"
basic-deps:
  bytestring: -any
  base: '>=4.10 && <4.16'
  pipes-bytestring: '>=2.1.6 && <2.2'
  pipes-group: '>=1.0.8 && <1.1'
  text: '>=1.1.1.0'
  containers: -any
  vinyl: '>=0.13.0 && <0.14'
  pipes-parse: '>=3.0 && <3.1'
  pipes: '>=4.1 && <5'
  ghc-prim: '>=0.3 && <0.8'
  contravariant: -any
  hashable: -any
  readable: '>=0.3.1'
  transformers: -any
  deepseq: '>=1.4'
  vector-th-unbox: '>=0.2.1.6'
  pipes-safe: '>=2.2.6 && <2.4'
  template-haskell: -any
  discrimination: -any
  primitive: '>=0.6 && <0.8'
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2
- 0.1.2.1
- 0.1.3
- 0.1.4
- 0.1.6
- 0.1.8
- 0.1.9
- 0.2.0
- 0.2.1
- 0.2.1.1
- 0.3.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0
- 0.5.0
- 0.5.1
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.7.0
- 0.7.1
- 0.7.2
author: Anthony Cowley
latest: 0.7.2
description-type: markdown
description: |
  # Frames


  ## Data Frames for Haskell

  User-friendly, type safe, runtime efficient tooling for working with tabular data deserialized from comma-separated values (CSV) files. The type of each row of data is inferred from data, which can then be streamed from disk, or worked with in memory.

  We provide streaming and in-memory interfaces for efficiently working with datasets that can be safely indexed by column names found in the data files themselves. This type safety of column access and manipulation is checked at compile time.


  ## Use Cases

  For a running example, we will use variations of the [prestige.csv](http://vincentarelbundock.github.io/Rdatasets/datasets.html) data set. Each row includes 7 columns, but we just want to compute the average ratio of `income` to `prestige`.


  ### Clean Data

  If you have a CSV data where the values of each column may be classified by a single type, and ideally you have a header row giving each column a name, you may simply want to avoid writing out the Haskell type corresponding to each row. `Frames` provides `TemplateHaskell` machinery to infer a Haskell type for each row of your data set, thus preventing the situation where your code quietly diverges from your data.

  We generate a collection of definitions generated by inspecting the data file at compile time (using `tableTypes`), then, at runtime, load that data into column-oriented storage in memory (an **in-core** array of structures (AoS)). We're going to compute the average ratio of two columns, so we'll use the `foldl` library. Our fold will project the columns we want, and apply a function that divides one by the other after appropriate numeric type conversions. Here is the entirety of that [program](https://github.com/acowley/Frames/tree/master/test/UncurryFold.hs).

  ```haskell
  {-# LANGUAGE DataKinds, FlexibleContexts, QuasiQuotes, TemplateHaskell, TypeApplications #-}
  module UncurryFold where
  import qualified Control.Foldl                 as L
  import           Data.Vinyl.Curry               ( runcurryX )
  import           Frames

  -- Data set from http://vincentarelbundock.github.io/Rdatasets/datasets.html
  tableTypes "Row" "test/data/prestige.csv"

  loadRows :: IO (Frame Row)
  loadRows = inCoreAoS (readTable "test/data/prestige.csv")

  -- | Compute the ratio of income to prestige for a record containing
  -- only those fields.
  ratio :: Record '[Income, Prestige] -> Double
  ratio = runcurryX (\i p -> fromIntegral i / p)

  averageRatio :: IO Double
  averageRatio = L.fold (L.premap (ratio . rcast) avg) <$> loadRows
    where avg = (/) <$> L.sum <*> L.genericLength
  ```


  ### Missing Header Row

  Now consider a case where our data file lacks a header row (I deleted the first row from \`prestige.csv\`). We will provide our own name for the generated row type, our own column names, and, for the sake of demonstration, we will also specify a prefix to be added to every column-based identifier (particularly useful if the column names **do** come from a header row, and you want to work with multiple CSV files some of whose column names coincide). We customize behavior by updating whichever fields of the record produced by `rowGen` we care to change, passing the result to `tableTypes'`. [Link to code.](https://github.com/acowley/Frames/tree/master/test/UncurryFoldNoHeader.hs)

  ```haskell
  {-# LANGUAGE DataKinds, FlexibleContexts, QuasiQuotes, TemplateHaskell, TypeApplications #-}
  module UncurryFoldNoHeader where
  import qualified Control.Foldl                 as L
  import           Data.Vinyl.Curry               ( runcurryX )
  import           Frames
  import           Frames.TH                      ( rowGen
                                                  , RowGen(..)
                                                  )

  -- Data set from http://vincentarelbundock.github.io/Rdatasets/datasets.html
  tableTypes' (rowGen "test/data/prestigeNoHeader.csv")
              { rowTypeName = "NoH"
              , columnNames = [ "Job", "Schooling", "Money", "Females"
                              , "Respect", "Census", "Category" ]
              , tablePrefix = "NoHead"}

  loadRows :: IO (Frame NoH)
  loadRows = inCoreAoS (readTableOpt noHParser "test/data/prestigeNoHeader.csv")

  -- | Compute the ratio of money to respect for a record containing
  -- only those fields.
  ratio :: Record '[NoHeadMoney, NoHeadRespect] -> Double
  ratio = runcurryX (\m r -> fromIntegral m / r)

  averageRatio :: IO Double
  averageRatio = L.fold (L.premap (ratio . rcast) avg) <$> loadRows
    where avg = (/) <$> L.sum <*> L.genericLength
  ```


  ### Missing Data

  Sometimes not every row has a value for every column. I went ahead and blanked the `prestige` column of every row whose `type` column was `NA` in `prestige.csv`. For example, the first such row now reads,

      "athletes",11.44,8206,8.13,,3373,NA

  We can no longer parse a `Double` for that row, so we will work with row types parameterized by a `Maybe` type constructor. We are substantially filtering our data, so we will perform this operation in a streaming fashion without ever loading the entire table into memory. Our process will be to check if the `prestige` column was parsed, only keeping those rows for which it was not, then project the `income` column from those rows, and finally throw away `Nothing` elements. [Link to code](https://github.com/acowley/Frames/tree/master/test/UncurryFoldPartialData.hs).

  ```haskell
  {-# LANGUAGE DataKinds, FlexibleContexts, QuasiQuotes, TemplateHaskell, TypeApplications, TypeOperators #-}
  module UncurryFoldPartialData where
  import qualified Control.Foldl as L
  import Data.Maybe (isNothing)
  import Data.Vinyl.XRec (toHKD)
  import Frames
  import Pipes (Producer, (>->))
  import qualified Pipes.Prelude as P

  -- Data set from http://vincentarelbundock.github.io/Rdatasets/datasets.html
  -- The prestige column has been left blank for rows whose "type" is
  -- listed as "NA".
  tableTypes "Row" "test/data/prestigePartial.csv"

  -- | A pipes 'Producer' of our 'Row' type with a column functor of
  -- 'Maybe'. That is, each element of each row may have failed to parse
  -- from the CSV file.
  maybeRows :: MonadSafe m => Producer (Rec (Maybe :. ElField) (RecordColumns Row)) m ()
  maybeRows = readTableMaybe "test/data/prestigePartial.csv"

  -- | Return the number of rows with unknown prestige, and the average
  -- income of those rows.
  incomeOfUnknownPrestige :: IO (Int, Double)
  incomeOfUnknownPrestige =
    runSafeEffect . L.purely P.fold avg $
      maybeRows >-> P.filter prestigeUnknown >-> P.map getIncome >-> P.concat
    where avg = (\s l -> (l, s / fromIntegral l)) <$> L.sum <*> L.length
          getIncome = fmap fromIntegral . toHKD . rget @Income
          prestigeUnknown :: Rec (Maybe :. ElField) (RecordColumns Row) -> Bool
          prestigeUnknown = isNothing . toHKD . rget @Prestige
  ```


  ## Tutorial

  For comparison to working with data frames in other languages, see the [tutorial](http://acowley.github.io/Frames/).


  ## Demos

  There are various [demos](https://github.com/acowley/Frames/tree/master/demo) in the repository. Be sure to run the `getdata` build target to download the data files used by the demos! You can also download the data files manually and put them in a `data` directory in the directory from which you will be running the executables.


  ## Benchmarks

  The [benchmark](https://github.com/acowley/Frames/tree/master/benchmarks/InsuranceBench.hs) shows several ways of dealing with data when you want to perform multiple traversals.

  Another [demo](https://github.com/acowley/Frames/tree/master/benchmarks/BenchDemo.hs) shows how to fuse multiple passes into one so that the full data set is never resident in memory. A [Pandas version](https://github.com/acowley/Frames/tree/master/benchmarks/panda.py) of a similar program is also provided for comparison.

  This is a trivial program, but shows that performance is comparable to Pandas, and the memory savings of a compiled program are substantial.

  First with Pandas,

  ```bash
  $ nix-shell -p 'python3.withPackages (p: [p.pandas])' --run '$(which time) -f "%Uuser %Ssystem %Eelapsed %PCPU; %Mmaxresident KB" python benchmarks/panda.py'
  28.087476512228815
  -81.90356506136422
  0.67user 0.04system 0:00.72elapsed 99%CPU; 79376maxresident KB
  ```

  Then with Frames,

  ```bash
  $ $(which time) -f '%Uuser %Ssystem %Eelapsed %PCPU; %Mmaxresident KB' dist-newstyle/build/x86_64-linux/ghc-8.10.4/Frames-0.7.2/x/benchdemo/build/benchdemo/benchdemo
  28.087476512228815
  -81.90356506136422
  0.36user 0.00system 0:00.37elapsed 100%CPU; 5088maxresident KB
  ```
license-name: BSD-3-Clause
