homepage: https://github.com/freckle/freckle-app#readme
changelog-type: markdown
hash: ba9eec0906806db8ffd8c48fb6608181e79a9116edd43446377894355d40f658
test-bench-deps:
  freckle-app: -any
  bytestring: '>=0.10.10.1'
  lens-aeson: '>=1.1'
  wai: '>=3.2.2.1'
  base: '>=4.13.0.0 && <5'
  time: '>=1.9.3'
  hspec: '>=2.8.1'
  text: '>=1.2.4.0'
  process: '>=1.6.9.0'
  memcache: '>=0.3.0.1'
  lens: '>=4.18.1'
  postgresql-simple: '>=0.6.4'
  mtl: '>=2.2.2'
  wai-extra: '>=3.0.32'
  temporary: '>=1.3'
  errors: '>=2.3.0'
  http-types: '>=0.12.3'
  aeson: '>=1.5.2.0'
  directory: '>=1.3.6.0'
maintainer: Freckle Education
synopsis: Haskell application toolkit used at Freckle
changelog: |
  ## [_Unreleased_](https://github.com/freckle/freckle-app/compare/v1.3.0.0...main)

  ## [v1.3.0.0](https://github.com/freckle/freckle-app/compare/v1.2.0.2...v1.3.0.0)

  - Adjust `Freckle.App.Test` interface
    - Remove `runAppTest`
    - Add `appExample` for making a expectation concretely `AppExample`
    - Add `expectationFailure`, and `pending(With)` helpers in `MonadIO`

  ## [v1.2.0.2](https://github.com/freckle/freckle-app/compare/v1.2.0.1...v1.2.0.2)

  - `Env.kept` compatibility with envparse-0.5

  ## [v1.2.0.1](https://github.com/freckle/freckle-app/compare/v1.2.0.0...v1.2.0.1)

  - Use `Env.kept` with parsing that occurs in `makePostgresPool`

    This ensure all `PG` variables are kept in the environment after parsing, to
    again match pre-v1.1 behavior.

    If you would prefer not to keep these variables, parse them yourself (e.g.
    with `envParseDatabaseConf`) and use `makePostgresPoolWith`.

  - Add `Freckle.App.Env.kept` to re-define a `Parser` so that all variables are
    kept after reading. Not doing this can break tests if you are re-parsing the
    environment for each example.

    Replace `Env.parse f` with `Env.parse f $ Env.kept` to recover how this module
    behaved prior to v1.1.

  ## [v1.2.0.0](https://github.com/freckle/freckle-app/compare/v1.1.0.0...v1.2.0.0)

  - Remove `Freckle.App.Logging`, integrate with [blammo][] instead.

    This will require the following end-user changes:

    - Remove `HasLogging` instance and add `HasLogger`

      This will require storing a `Logger` on your runtime `App` type, instead of
      a `LogLevel` (et al) in your static `AppSettings` type. (Or move to
      `runSimpleLoggingT`.)

    - Replace WAI middleware with [Blammo integration][blammo-wai]

    - Replace Yesod functions with [Blammo integration][blammo-yesod]

    And changes to environment variable values:

    - If using `LOG_OUTPUT=std(out|err)`, use `LOG_DESTINATION=std(out|err)` (note
      that `stdout` is the default)
    - If using `LOG_OUTPUT=file`, use `LOG_DESTINATION=@fancy.log` (yes, that's
      this option did)
    - If using `LOG_FORMAT=terminal`, use `LOG_FORMAT=tty` (note that this is the
      defualt)

  [blammo]: https://hackage.haskell.org/package/Blammo
  [blammo-wai]: https://github.com/freckle/blammo/#integration-with-wai
  [blammo-yesode]: https://github.com/freckle/blammo/#integration-with-yesod

  ## [v1.1.0.0](https://github.com/freckle/freckle-app/compare/v1.0.4.0...v1.1.0.0)

  - Require `MonadLoggerIO` in `makePostgresPool` (and so respect that logging
    context from DB activities).

    Previous behavior can be recovered by using `runNoLoggingT makePostgresPool`.

  - Re-implement `FronRow.App.Env` via external library, `envparse`

    Some conversions will be required:

    - `Reader a` should now be `Reader Error a`
    - `Parser a` should now be `Parser Error a`
    - `parse` should now be `parse id`
    - `var x X nonEmpty` should now be `var (x <=< nonempty) X mempty`

      Note that `(str <=< nonempty)` is redundant.

    - `var (f <$> g) X m` should now be `f <$> var g X m`

      Note that `def` will now need a value the same type as `g`, not `f`.

    - `switch` and `flag` no longer accept `def` (the non-active value is an
      implicit default; the previous behavior was kind of surprising and
      ambiguous).

    - `handleEither` has been removed. Users will have to parse a complete value
      and then further validate/throw externally.

    - Previously, we always behaved as if `keep` was applied. Add that explicitly
      if you need that behavior.

  ## [v1.0.4.0](https://github.com/freckle/freckle-app/compare/v1.0.3.0...v1.0.4.0)

  - Add `Freckle.App.Bugsnag` for Bugsnag logging in applications.
  - Increased default PG poolsize to 10.

  ## [v1.0.3.0](https://github.com/freckle/freckle-app/compare/v1.0.2.10...v1.0.3.0)

  - Add `Freckle.App.Memcache` for using memcached in Apps
  - Add `Freckle.App.Scientist` for using [scientist][] in Apps

    [scientist]: https://github.com/freckle/scientist-hs#readme

  ## [v1.0.2.10](https://github.com/freckle/freckle-app/compare/v1.0.2.9...v1.0.2.10)

  - Support GHC 9.0 and 9.2

  - Change `Wai` function arguments for producing `RouteName` and `TraceId` to
    tags

    To maintain the same behavior, replace

    ```hs
    makeLoggingMiddleware app getRouteName getTraceId ...
    ```

    With

    ```hs
    makeLoggingMiddleware app getTags ...
      where
        getTags req = catMaybes
          [ ("route", ) <$> getRouteName req
          , ("trace_id", ) <$> getTraceId req
          ]
    ```

    And similar for `makeRequestMetricsMiddleware`.

  ## [v1.0.2.9](https://github.com/freckle/freckle-app/compare/v1.0.2.8...v1.0.2.9)

  - Add some common textual encoding functions to prelude

  ## [v1.0.2.8](https://github.com/freckle/freckle-app/compare/v1.0.2.7...v1.0.2.8)

  - Don't allow `aeson-2.0`

  ## [v1.0.2.7](https://github.com/freckle/freckle-app/compare/v1.0.2.6...v1.0.2.7)

  - Remove explicit `--region` in IAM DB token call
  - Relax lower-bounds throughout

  ## [v1.0.2.6](https://github.com/freckle/freckle-app/compare/v1.0.2.5...v1.0.2.6)

  - Add a looser lower-bound on `containers`

  ## [v1.0.2.5](https://github.com/freckle/freckle-app/compare/v1.0.2.4...v1.0.2.5)

  - Add a looser lower-bound on `bytestring`
  - Add a looser lower-bound on `template-haskell`

  ## [v1.0.2.4](https://github.com/freckle/freckle-app/compare/v1.0.2.3...v1.0.2.4)

  - Add a looser lower-bound on `base`

  ## [v1.0.2.3](https://github.com/freckle/freckle-app/compare/v1.0.2.2...v1.0.2.3)

  - Add Freckle-specific prelude.

  ## [v1.0.2.2](https://github.com/freckle/freckle-app/compare/v1.0.2.1...v1.0.2.2)

  - Target `hspec-junit-formatter-1.0.3.0` (use `1.1.0.0` in development)

  ## [v1.0.2.1](https://github.com/freckle/freckle-app/compare/v1.0.2.0...v1.0.2.1)

  - Add `denyFrameEmbeddingMiddleware` for denying HTML frame embedding.

  ## [v1.0.2.0](https://github.com/freckle/freckle-app/compare/v1.0.1.0...v1.0.2.0)

  - Add 'Freckle.App.Yesod.Route' to allow printing route names.

  ## [v1.0.1.0](https://github.com/freckle/freckle-app/compare/v1.0.0.4...v1.0.1.0)

  - Added `Freckle.App.Datadog.Gauge` for client side stateful gauges.
  - Added `Freckle.App.Datadog.Rts` for sending RTS statistics to DataDog.

  ## [v1.0.0.4](https://github.com/freckle/freckle-app/compare/v1.0.0.3...v1.0.0.4)

  - Support seconds or milliseconds in `PGSTATEMENTTIMEOUT`

    NOTE: We consider this a non-breaking change because the environment variable
    interface is backwards-compatible. By normal Haskell rules, it would be major
    since it's changing the type of something exported.

  - Add `respondQueryCanceled` Yesod Middlewares

  - Add `makeRequestMetricsMiddleware`

  ## [v1.0.0.3](https://github.com/freckle/freckle-app/compare/v1.0.0.2...v1.0.0.3)

  - Add `package.yaml` to `extra-source-files`.

  ## [v1.0.0.2](https://github.com/freckle/freckle-app/compare/v1.0.0.1...v1.0.0.2)

  - Extract tests that require `git` into a new suite.

  ## [v1.0.0.1](https://github.com/freckle/freckle-app/compare/v1.0.0.0...v1.0.0.1)

  - Ensure `release` GitHub Action completes properly.

  ## [v1.0.0.0](https://github.com/freckle/freckle-app/tree/v1.0.0.0)

  First tagged release.
basic-deps:
  http-client: '>=0.6.4.1'
  semigroupoids: '>=5.3.4'
  exceptions: '>=0.10.4'
  bytestring: '>=0.10.10.1'
  ekg-core: '>=0.1.1.7'
  wai: '>=3.2.2.1'
  case-insensitive: '>=1.2.1.0'
  unliftio: '>=0.2.13.1'
  MonadRandom: '>=0.5.2'
  yesod-core: '>=1.6.18.8'
  base: '>=4.13.0.0 && <5'
  time: '>=1.9.3'
  persistent: '>=2.10.5.3'
  unordered-containers: '>=0.2.10.0'
  hspec: '>=2.8.1'
  text: '>=1.2.4.0'
  Blammo: '>=1.0.0.1'
  retry: '>=0.8.1.0'
  envparse: '>=0.4.1'
  scientist: '>=0.0.0.0'
  hspec-core: '>=2.8.1'
  monad-control: '>=1.0.2.3'
  resource-pool: '>=0.2.3.2'
  filepath: '>=1.4.2.1'
  persistent-postgresql: '>=2.10.1.2'
  doctest: '>=0.16.3'
  dlist: '>=0.8.0.8'
  conduit: '>=1.3.4'
  memcache: '>=0.3.0.1'
  containers: '>=0.6.2.1'
  datadog: '>=0.2.5.0'
  lens: '>=4.18.1'
  unliftio-core: '>=0.1.2.0'
  http-link-header: '>=1.0.3.1'
  typed-process: '>=0.2.6.0'
  hspec-expectations-lifted: '>=0.10.0'
  postgresql-simple: '>=0.6.4'
  network-uri: '>=2.6.3.0'
  mtl: '>=2.2.2'
  immortal: '>=0.3'
  hashable: '>=1.3.0.0'
  transformers-base: '>=0.4.5.2'
  monad-logger: '>=0.3.31'
  wai-extra: '>=3.0.32'
  transformers: '>=0.5.6.2'
  errors: '>=2.3.0'
  bugsnag: '>=1.0.0.0'
  http-conduit: '>=2.3.5'
  load-env: '>=0.2.1.0'
  http-types: '>=0.12.3'
  Glob: '>=0.10.1'
  aeson: '>=1.5.2.0'
  template-haskell: '>=2.15.0.0'
  primitive: '>=0.7.0.1'
  safe: '>=0.3.19'
  yaml: '>=0.11.5.0'
  vector: '>=0.12.1.2'
  hspec-junit-formatter: '>=1.1.0.1'
all-versions:
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
- 1.0.1.0
- 1.0.2.0
- 1.0.2.1
- 1.0.2.2
- 1.0.2.3
- 1.0.2.4
- 1.0.2.5
- 1.0.2.6
- 1.0.2.7
- 1.0.2.8
- 1.0.2.9
- 1.0.2.10
- 1.0.3.0
- 1.0.4.0
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
- 1.2.0.2
- 1.3.0.0
author: ''
latest: 1.3.0.0
description-type: markdown
description: |
  # freckle-app

  Haskell application toolkit used at Freckle.

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
