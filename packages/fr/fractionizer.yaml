homepage: ''
changelog-type: markdown
hash: f031390cec7310f2054893f5dbc525db783d01397d3eb3be4f8b5e9d73904db8
test-bench-deps: {}
maintainer: oleksandr.zhabenko@yahoo.com
synopsis: Numbers in the range [0.005, 1] as a sum of 2, 3, 4 or 5 unit fractions
  of special types.
changelog: "# Revision history for fractionizer\n\n## 0.1.0.0 -- 2023-04-19\n\n* First
  version. Released on an unsuspecting world.\n\n## 0.1.0.1 -- 2023-04-19\n\n* First
  version revised A. Fixed incorrectly looking README.md.\n\n## 0.2.0.0 -- 2023-04-20\n\n*
  Second version. Fixed mathematical incompleteness in the solution that led to the
  reformulation\nof the problem itself. Now the solution is mathematically correct.
  See the changed link to the\ndraft article in the package description. Changed the
  source code accordingly.\n\n## 0.3.0.0 -- 2023-04-20\n\n* Third version. Removed
  the unneeded parameter that is needed just for theoretical proof and\n  solution
  finding (see the related draft paper). Some code simplifications.\n\n## 0.4.0.0
  -- 2023-04-20\n\n* Fourth version. Fixed mathematical inaccuracy that led to the
  solution with possible two equal\n  after rounding denominators. See the pdf file
  in the description for more information.\n\n## 0.5.0.0 -- 2023-04-21\n\n* Fifth
  version. Fixed mathematical inaccuracy that lead to incorrect solution.\n\n## 0.6.0.0
  -- 2023-04-21 \n\n* Sixth version. Fixed mathematical inaccuracy, added new functionality
  according to the \npaper.\n\n## 0.6.1.0 -- 2023-04-21 \n\n* Sixth version revised
  A. Fixed README.md. \n\n## 0.6.1.1 -- 2023-04-22\n\n* Sixth version revised B. Some
  code and documentation improvements.\n\n## 0.6.1.2 -- 2023-04-22\n\n* Sixth version
  revised C. Some code and documentation improvements.\n\n## 0.7.0.0 -- 2023-04-24\n\n*
  Seventh version. Added the extended variants for 3 unit fractions decomposition.\n\n##
  0.7.0.1 -- 2023-04-24\n\n* Seventh version revised A. Some minor documentation improvements.\n\n##
  0.8.0.0 -- 2023-04-25\n\n* Eigth version. Added generalized variants of the functions
  using ErrorImpact type synonym with\nspecial semantics.\n\n## 0.9.0.0 -- 2023-04-25\n\n*
  Ninth version. Changed the error definition to the usual one (if the approximation
  now is greater\nthan the exact value then the error now is greater than 0, previously
  it was vice versa).\n\n## 0.10.0.0 -- 2023-05-10\n\n* Tenth version. Fixed some
  issues with the functions, moved the functionality of the \nsuitable21 function
  to the setOfSolutionsGmin function. Changed the behaviour of some functions\ndepending
  on the 'ErrorImpact' parameter (now its sign defines the sign of the absolute error).
  \nSome documentation improvements. \n\n## 0.11.0.0 -- 2023-10-12\n\n* Eleventh version.
  Added new function lessErrSimpleDecomp4PG that allows decompositions into 4 unit\n
  \ fractions with rather good precision. \n\n## 0.12.0.0 -- 2023-10-12\n\n* Twelveth
  version. Added new function lessErrSimpleDecomp5PG that allows decompositions into
  5 unit\n  fractions with even better precision. \n\n## 0.13.0.0 -- 2023-10-12\n\n*
  Thirteenth version. Added new function egyptianFractionDecomposition that allows
  to represent a fractions using the ancient Egyptian fraction representation.\n\n##
  0.14.0.0 -- 2023-10-12\n\n* Fourteenth version. Added new module EgyptianFractions
  and moved there a function from\n  UnitFractionsDecomposition2 module. Added a new
  function to the new module.\n \n"
basic-deps:
  base: '>=4.13 && <5'
all-versions:
- 0.14.0.0
author: Oleksandr-Zhabenko
latest: 0.14.0.0
description-type: markdown
description: "# Mathematical problem solution\n\nLet's consider the problem of decomposition
  (approximation) of fractions\nthat lie in the range [0.005, 2/3)  by the sum of
  two fractions with 1 in\nthe numerators (so called unit fractions) and, possibly,
  natural,\nunequal numbers in the denominators.\n\nWe will consider one of the two
  denominators to be a natural number,\nsmaller than the other number in the denominator,
  and we will look for\nsuch a pair of numbers that, when rounded to natural numbers,
  will give\nthe minimum absolute error of the resulting approximation.\nMathematically,
  this leads to a problem and its further solution below.\n\nFinally, we can decompose
  (approximate) the fraction in the range [0.005, 1] \nby the sum of 2, 3, 4, 5 or
  more unit fractions, with likely different denominators, \njust as like in the Egyptian
  mathematics.\n\nIn relation to music, this means that we can create rhythmic patterns
  using these \nunit fractions by treating the 1 as the music bar (notes between two
  consequtive barlines), \nbut this leads to patterns that use irrational (non-dyadic)
  music meters and together to \nslightly different (hopefully, not perceptible) from
  1 summary duration.\n\nThe tests show that there are some numerical instability
  for the numbers with more digits \nafter the dot. So we use just 3 digits as correct
  after the dot, but the errors are \ncalculated with respect to the original value
  with all the digits included.\n\nMore is by the link in the package description.\n\n#
  Relation to music rhythm and meter \n\nIt can be used to produce music by approximation
  of the meter. \nThis leads to interesting structures.\n\nIt also is directly connected
  to the irrational time signatures in music.\n\n# General error behaviour\n\nSince
  the version 0.8.0.0 there  is a possibility to use the results with absolute error\nof
  some sign.\n\n# Sum of 4 unit fractions\n\nSince the version 0.11.0.0 there is a
  function to decompose the fraction into sum  of not more than 4 unit\nfractions.
  The precision of this operation is rather high, so for many cases we can with enough\nprecision
  say that every fraction inside the [0.005, 2/3] range can be approximated with the
  sum of 4\nunit fractions. See the function lessErrSimpleDecomp4PG.\n\n# Sum of 5
  unit fractions\n\nSince the version 0.12.0.0 there is a function to decompose the
  fraction into sum of not more than 5\nunit fractions. The precision of this operation
  is better than for 4 unit fractions (see above).\nSee the function lessErrSimpleDecomp5PG.\n\n#
  Ancient Egyptian canonical representation\n\nSince the version 0.13.0.0 there is
  a function to represent the fraction using the canonical ancient\nEgyptian representation.
  Can be interesting from the historical perspective. \n\nSince the version 0.14.0.0
  there is a new module EgyptianFractions related to this functionality.\n\n# Acknowledgements\n\nAuthor
  would like to support the foundation\n[Gastrostars](https://gastrostars.nl) and
  its founder [Emma Kok](https://emmakok.nl). \nThe founder inspired him to conduct
  such a research. \nBesides, the author is grateful to the [Hackage website](https://hackage.haskell.org)
  \nfor publishing the Haskell code related to the research.\n\nOn the 2023-04-19
  there is the founder's namesday, \nthe memory of St. Emma  of Lesum or Emma of Stiepel
  (also known as Hemma and Imma).\n\nOn the 2023-04-25 there is St. Apostle and Evangelist
  Mark's Day, he is a patron of Egypt.\n \nIf you would like to share some financial
  support with the Foundation Gastrostars, please, contact the mentioned foundation\nusing
  the URL:\n\n[Contact Foundation GASTROSTARS](https://gastrostars.nl/hou-mij-op-de-hoogte)\n\nor
  \n\n[Donation Page](https://gastrostars.nl/doneren)\n\n"
license-name: MIT
