all-versions:
- 0.1.0.0
author: Ben Weitzman
basic-deps:
  base: '>=4.7 && <5'
  freer-simple: '>=1.1 && <1.2'
changelog: |
  # Changelog for freer-catching

  ## Unreleased changes
changelog-type: markdown
description: "# freer-catching\n\nThis is library for working with exceptions that
  are thrown during interpreation of free monad effects, at call time.\n\n## How to
  use\n\nThis library exposes one effect:\n\n```haskell\ncatching :: forall e f a
  r\n          . (Exception e, Member (Catching f e) r)\n         => Eff '[f] a\n
  \        -> Eff r (Either e a)\n```\n\nWe take an effectful function over one effect
  `f` and we turn it into an effectful computation of a new effect which denotes that
  we have an obligation to catch exceptions when we interpret this effect.\n\nWe can
  then discharge this obligation by interpretting the effect `f` and and any `Catching`
  effects built on `f` by interpretting them both at the same time: \n\n```haskell\nrunCatching
  :: forall e r v f\n             . (Member IO r, Member IO (f ': r))\n            =>
  (forall a q . Member IO q => Eff (f ': q) a -> Eff q a)\n            -> Eff (Catching
  f e : f : r) v\n            -> Eff r v\n``` \n\nWe can also interpret a `Catching
  f e` effect by way of another effect `g`:\n\n```haskell\nrunCatching2 :: forall
  e r v f g\n             . (Member IO r, Member IO (f : r), Member IO (f : g : r))\n
  \           => (forall a q. Member g q => Eff (f : q) a -> Eff q a)\n            ->
  (forall a q. Member IO q => Eff (g : q) a -> Eff q a)\n            -> Eff (Catching
  f e : f : g : r) v\n            -> Eff r v\n```            "
description-type: markdown
hash: b0280586f841f8d6d7210bac29b7fa50d6a6757180cc0f9d6b670024570232be
homepage: ''
latest: 0.1.0.0
license-name: MIT
maintainer: ben@costarastrology.com
synopsis: Checked runtime exceptions with freer-simple
test-bench-deps:
  base: '>=4.7 && <5'
  freer-simple: '>=1.1 && <1.2'
  freer-simple-catching: '>=0'
  hspec: '>=0'
