all-versions:
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
author: Alberto GÃ³mez Corona
basic-deps:
  base: '>4.0 && <6.0'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  ghcjs-perch: '>=0.3.3'
  mtl: '>=0'
  transformers: '>=0'
  transient: '>=0.6.0.1'
  transient-universe: '>=0.5.0.0'
changelog: ''
changelog-type: ''
description: "![Axiom logo](axiom.png)\r\n==========\r\n[![Hackage](https://img.shields.io/hackage/v/axiom.svg)](http://hackage.haskell.org/package/axiom)\r\n[![Stackage
  LTS](http://stackage.org/package/axiom/badge/lts)](http://stackage.org/lts/package/axiom)\r\n[![Stackage
  Nightly](http://stackage.org/package/axiom/badge/nightly)](http://stackage.org/nightly/package/axiom)\r\n[![Build
  Status](https://travis-ci.org/transient-haskell/axiom.png?branch=master)](https://travis-ci.org/transient-haskell/axiom)\r\n\r\n\r\nFor
  some examples, see the [transient-examples](https://github.com/transient-haskell/transient-examples)
  repository: [distributedApps.hs](https://github.com/transient-haskell/transient-examples/blob/master/distributedApps.hs)
  and      [webapp.hs](https://github.com/transient-haskell/transient-examples/blob/master/webapp.hs)\r\n\r\nThe
  source code of these applications can be executed in the commmand line if you have
  docker installed.\r\n\r\n[![Gitter](https://badges.gitter.im/theam/haskell-do.svg)](https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link)\r\n\r\nAxiom
  (the new name of ghcjs-hplay) is also the Web user interface of [Transient](https://github.com/agocorona/transient).
  The Web functionality of transient will be called **Axiom**, like the cruise starship
  of Wall-e. Axiom is made to let you navigate the universe of nodes in the cloud
  through your browser while you are comfortably seated in your [hoverchair](https://www.youtube.com/watch?v=uOL2W9JQmo8).\r\n\r\nUnlike
  his predecessor, [hplayground](http://github.com/agocorona/hplayground), Axiom has
  full integration with Transient and can run widgets that run code on the server,
  the client or both.\r\n\r\nAxiom execute browser widgets that are reactive, can
  be composed monadically and algebraically (applicative, alternative, monoidal..).
  At the same time they participate in cloud computations. A widget can execute code
  in the server and, trough the server, in any node on the cloud using the same cloud
  primitives defined in transient-universe. The example applications include widgets
  that perform distributed map-reduce and federated chat servers as well as stream
  fibonacci numbers from server to client and from client to server.\r\n\r\nTo see
  how it integrates with Transient and how to create client-server applications, see
  the web paragraphs of the [transient tutorial](https://github.com/agocorona/transient/wiki/Transient-tutorial).\r\n\r\nTo
  see how to create client side applications and widgets (with no server code integration),
  look for  [hplayground](https://github.com/agocorona/hplayground) package. [Tutorial](https://www.airpair.com/haskell-tutorial/intro-to-haskell-web-apps)\r\n\r\nHow
  it works\r\n============\r\nThe JS program compiled with GHCJS is sent to the browser,
  then it opens a websockets connection. Then  the most useful primitive is `atRemote`
  wich execute his argument in the server and return the result back to the client
  \ (or viceversa, see below). The communication transport the variables necessary
  for executing the computation remotely. There is no explicit serialization neither
  communication. All is done implicitly.\r\n\r\n`atRemote` can be executed inside
  itself, so a computation can jump from server to client and back. So a browser can
  be controlled by the server or the other way aroud. But the execution starts in
  the browser. Only the variable values already computed are transported to execute
  remotely.  In the other side, streaming  and reactivity in both directions is included
  since `atRemote` and other primitives are reactive (see the [transient tutorial](https://github.com/transient-haskell/transient/wiki/Transient-tutorial)).\r\n\r\nIn
  the other side, there is an experimental template editor to generate static HTML
  templates. The server can execute a rest route and bring the corresponding page
  template and the JS code to the browser, so web crawlers can find something to read.\r\nAlso
  in Axiom everithing compose algebraically with standard applicative, alternative
  and monoidal operators, and  also monadically:  \r\n\r\nLarger widgets can be composed
  with algebraic combinations of smaller widgets. No limits. Widgets can have server
  side (they can use `atRemote`) so they are full stack, autonomous pieces down to
  the cloud. They make perfect software components.\r\n\r\nEvents do not bubble up
  to the top like in the case of React. An event within a widget produce a monadic
  response that executes widgets down trough the monad without affecting the surrounding
  rendering not affected by the event. That is why Axiom does not need a Virtual DOM,
  and the logic of the application and the execution flow match, so it produces a
  clean and understandable code. look at the TODO app (it is client-side only)\r\n\r\nhttp://tryplayg.herokuapp.com/try/todo.hs/edit\r\n\r\nAxiom
  also implement widgets that works as spreadsheet cells, with formulas depending
  on other cells. These formulas can be executed in the server, so they have full
  access to databases, mumber crunching, map-reduce etc. This functionality need some
  testing.\r\n\r\nHow to install & run fast\r\n=========================\r\nuse `initNode`
  to initalize the application. Example below.\r\n   \r\n\r\nIf you have docker\r\n------------------\r\nYou
  can use a docker image that has GHC, GHCJS and Transient installed. First you should
  create this executable shell with this content and save it to an executable location:\r\n```\r\n$
  cat execthirdline.sh\r\ncommand=`sed -n '3p' ${1} | sed 's/-- //'`\r\neval $command
  $1 $2 $3\r\n```\r\nThen add this to the head of your main source file:\r\n\r\n```csh\r\n#!/usr/bin/env
  ./execthirdline.sh\r\n-- compile an Axiom program with ghcjs and execute it with
  runghc\r\n-- set -e && port=`echo ${3} | awk -F/ '{print $(3)}'` && docker run -it
  -p ${port}:${port} -v $(pwd):/work agocorona/transient:24-03-2017  bash -c \"cd
  work && mkdir -p ./static && ghcjs ${1} -o static/out && runghc ${1} ${2} ${3}\"\r\n```\r\n\r\nThat
  header compiles the program with GHCJS and write the javascript code generated to
  the \"static\" folder and then executes the server program in interpreted mode with
  `runghc`. This is useful for rapid development, since you can modify the code and
  re-execute it very fast.\r\n\r\nTo fully compile and execute the program, you can
  susbstitute `runghc` by `ghc` and execute the binary. The header would look like:\r\n\r\n```csh\r\n#!/usr/bin/env
  ./execthirdline.sh\r\n-- compile an Axiom program with ghcjs and with ghc, then
  execute the program\r\n-- set -e && port=`echo ${3} | awk -F/ '{print $(3)}'` &&
  docker run -it -p ${port}:${port} -v $(pwd):/work agocorona/transient:24-03-2017
  \ bash -c \"cd work && mkdir -p ./static && ghcjs ${1} -o static/out && ghc ${1}
  \ -o program && chmod 777 program && ./program ${2} ${3}\"\r\n```\r\nThat header,
  besides executing the application, it would also create a \"program\"  executable
  in your host machine  (as well as an \"static\" folder with files needed for the
  client-side application. You can execute it natively in a linux distro in the way
  it will be described below.\r\n\r\nMore complicated projects can be compiled and
  executed using `cabal` and `stack`. You can modify the header accordingly.\r\n\r\nFor
  example, this is a program that is directly executable with docker\r\n\r\n```haskell\r\n#!/usr/bin/env
  ./execthirdline.sh\r\n-- compile it with ghcjs and  execute it with runghc\r\n--
  set -e && port=`echo ${3} | awk -F/ '{print $(3)}'` && docker run -it -p ${port}:${port}
  -v $(pwd):/work agocorona/transient:24-03-2017  bash -c \"cd work && mkdir -p ./static
  && ghcjs ${1} -o static/out && runghc ${1}  ${2} ${3}\"\r\n\r\nimport Prelude hiding
  (div, id, span)\r\nimport Transient.Base\r\nimport GHCJS.HPlay.View\r\nimport Transient.Move\r\nimport
  Transient.Indeterminism\r\nimport Data.IORef\r\nimport Control.Concurrent (threadDelay)\r\nimport
  Control.Monad.IO.Class\r\nimport Data.Monoid\r\n\r\nmain= keep . initNode . onBrowser
  $ do \r\n    local . render $  wlink () (h1 \"hello fibonacci numbers\")\r\n    \r\n
  \   r <-  atRemote $ do\r\n                r <- local . threads 1 . choose $ take
  10 fibs\r\n                localIO $ print r\r\n                localIO $ threadDelay
  1000000\r\n                return r\r\n    \r\n    local . render . rawHtml $ (h2
  r)\r\n    where\r\n    fibs = 0 : 1 : zipWith (+) fibs (tail fibs) :: [Int]  --
  fibonacci numb. definition\r\n```\r\n\r\nTo execute the program:\r\n```\r\n> chmod
  777 YourSource.hs\r\n> ./YourSource.hs -p start/<host>/<port>\r\n```\r\n\r\nwhere
  <host> <port>  are defined by you. for example `./YourSource.hs -p start/localhost/8080`\r\n\r\nThe
  program will be accessed from outside docker as a web application. Read the documentation
  of Docker for your platform about how to invoke it.\r\n\r\nIf you want to run it
  in a host Linux machine, you can generate the browser code and the executable from
  docker in the way described above. Then in in the host you can execute it:\r\n\r\n```\r\n>
  ./program - p start/localhost/8080\r\n```\r\n\r\nIf you want to install Axiom in
  your host machine:\r\n--------------------------------------------------\r\n\r\nYou
  need to install [stack](https://docs.haskellstack.org/en/stable/README/) and [ghcjs](https://github.com/ghcjs/ghcjs).
  The latter is not an easy task.\r\n\r\nThen install Axiom in stack/ghc:\r\n\r\n```\r\n>
  stack install axiom\r\n```\r\n\r\nThis should install ghc and compile everithing.\r\n\r\nAlternatively,
  you can install [Haskell platform](https://www.haskell.org/platform/) and:\r\n\r\n```\r\n>
  cabal install axiom\r\n```\r\n\r\nIn any case you need to install Axiom in GHCJS
  too:\r\n\r\n```\r\n> cabal install axiom --ghcjs\r\n```\r\n\r\nHow to compile and
  run a program\r\n================================\r\n```\r\n> mkdir  static \r\n>
  ghcjs yourProgram.hs -o static/out\r\n> ghc yourProgram.hs\r\n\r\n> yourProgram
  -p start/yourhost/yourport\r\n\r\n```\r\n\r\nHow to run Distributed applications\r\n========================\r\n\r\nIf
  your program use `inputNodes` to connect N server nodes, you must use additional
  parameters in the command line:\r\n\r\nin a computer or docker instance:\r\n```\r\n>
  yourProgram -p start/host1/port1\r\n```\r\nIn the same or another computer or docker
  instance:\r\n```\r\n> yourProgram -p start/host2/port2/add/host1/port1/y\r\n```\r\nin
  the same or another computer or docker instance:\r\n```\r\n> yourProgram -p start/host3/port3/add/host1/port1/y\r\n```\r\n\r\nBe
  sure that the `host:port` ip addresses are reachable from all the machines.\r\n\r\nThis
  connect all the server nodes among them. \r\n\r\nThe web browser can point to any
  host:port of them. You must have the static folder (wich contains the generated
  javascript files) as well as the executable in all the locations.\r\n\r\nSee [distrbutedApps](https://github.com/transient-haskell/transient-examples/blob/master/distributedApps.hs)
  that contain examples of distributed web applications.\r\n\r\nPlans:\r\n======\r\n\r\nAxiom
  web nodes are client side applications. So dHTML rendering happens on the browser.
  It is intended to implement server side rendering as well as multipage navigation.
  The last release support page navigation and page templates for the creation of
  server-side content.\r\n\r\n\r\n"
description-type: markdown
hash: d0ce2b72cf9f32c474a206fa27d5b83c31d78007e3c4ac2b02a5eabc78c4283d
homepage: https://github.com/transient-haskell/axiom
latest: 0.4.7
license-name: MIT
maintainer: agocorona@gmail.com
synopsis: Web EDSL for running in browsers and server nodes using transient
test-bench-deps: {}
