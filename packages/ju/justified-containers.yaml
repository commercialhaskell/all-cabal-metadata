all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
author: Matt Noonan
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  roles: '>=0.2'
changelog: ''
changelog-type: ''
description: "# justified-containers\nKeyed container types with type-checked proofs
  of key presence.\n\n# Table of contents\n\n  * [Description](#description)\n    *
  [A simple example](#example)\n  * [Motivation](#motivation)\n  * [How it works](#how-it-works)\n
  \   * [Phantom evidence](#phantom-evidence)\n\n\n# Description\n\nHave you ever
  *known* that a key could be found in a certain map? Were you tempted to\nreach for
  `fromJust` or `error` to handle the \"impossible\" case, when you knew that\n`lookup`
  should give `Just v`? (and did shifting requirements ever make the impossible\nbecome
  possible after all?)\n\n`Data.Map.Justified` provides a zero-cost `newtype` wrapper
  around `Data.Map.Map`\nthat enables you to separate the *proof that a key is present*
  from the *operations using the key*.\nOnce you prove that a key is present, you
  can use it `Maybe`-free in any number of other\noperations -- sometimes even operations
  on other maps!\n\nNone of the functions in this module can cause a run-time error,
  and very few\nof the operations return a `Maybe` value.\n\nSee the `Data.Map.Justified.Tutorial`
  module for usage examples, or browse the API of the\nmost recent release [on Hackage](https://hackage.haskell.org/package/justified-containers/docs/Data-Map-Justified.html).\n\n###
  Example\n\n```haskell\n    withMap test_table $ \\table -> do\n    \n      case
  member 1 table of\n    \n        Nothing  -> putStrLn \"Sorry, I couldn't prove
  that the key is present.\"\n    \n        Just key -> do\n        \n          --
  We have proven that the key is present, and can now use it Maybe-free...\n          putStrLn
  (\"Found key: \"     ++ show key)\n          putStrLn (\"Value for key: \" ++ lookup
  key table)\n\n          -- ...even in certain other maps!\n          let table'
  = reinsert key \"howdy\" table\n          putStrLn (\"Value for key in updated map:
  \" ++ lookup key table')\n```\n\nOutput:\n\n    Found key: Key 1\n    Value for
  key: hello\n    Value for key in updated map: howdy\n\n## Motivation: `Data.Map`
  and `Maybe` values\n\nSuppose you have a key-value mapping using `Data.Map`'s type
  `Map k v`. Anybody making\nuse of `Map k v` to look up or modify a value must take
  into account the possibility\nthat the given key is not present.\n\nIn `Data.Map`,
  there are two strategies for dealing with absent keys:\n\n  1. Cause a runtime error
  (e.g. `Data.Map`'s `(!)` when the key is absent)\n\n  2. Return a `Maybe` value
  (e.g. `Data.Map`'s `lookup`)\n\nThe first option introduces partial functions, so
  is not very palatable. But what is\nwrong with the second option?\n\nTo understand
  the problem with returning a `Maybe` value, let's ask what the  `Maybe v` in\n\n```haskell\n
  \   lookup :: k -> Map k v -> Maybe v\n```\n\nreally does for us. By returning\na
  `Maybe v` value, `lookup key table` is saying \"Your program must account\nfor the
  possibility that `key` cannot be found in `table`. I will ensure that you\naccount
  for this possibility by forcing you to handle the `Nothing` case.\"\nIn effect,
  `Data.Map` is requiring the user to prove they have handled the\npossibility that
  a key is absent whenever they use the `lookup` function.\n\n## Laziness (the bad
  kind)\n\nEvery programmer has probably had the experience of knowing, somehow, that
  a certain\nkey is going to be present in a map. In this case, the `Maybe v` feels
  like a burden:\nI already *know* that this key is in the map, why should I have
  to handle the `Nothing` case?\n\nIn this situation, it is tempting to reach for
  the partial function `fromJust`,\nor a pattern match like `Nothing -> error \"The
  impossible happened!\"`. But as parts of\nthe program are changed over time, you
  may find the impossible has become possible after\nall (or perhaps youll see the
  dreaded and unhelpful `*** Exception: Maybe.fromJust: Nothing`)\n\nIt is tempting
  to reach for partial functions or \"impossible\" runtime errors here, because\nthe
  programmer has proven that the key is a member of the map in some other way. They\nknow
  that `lookup` should return a `Just v` --- but the *compiler* doesnt know this!\n\nThe
  idea behind `Data.Map.Justified` is to encode the programmers knowledge that a key\nis
  present *within the type system*, where it can be checked at compile-time. Once
  a key\nis known to be present, `Data.Map.Justified`'s `lookup` will never fail.
  Your justification\nremoves the `Just`!\n\n# How it works\n\nEvidence that a key
  can indeed be found in a map is carried by a phantom type parameter `ph`\nshared
  by both the `Data.Map.Justified.Map` and `Data.Map.Justified.Key` types. If you
  are\nable to get your hands on a value of type `Key ph k`, then you must have already
  proven that\nthe key is present in *any* value of type `Map ph k v`.\n\nThe `Key
  ph k` type is simply a `newtype` wrapper around `k`, but the phantom type `ph` allows\n`Key
  ph k` to represent both *a key of type `k`* __and__ *a proof that the key is present
  in*\n*all maps of type `Map ph k v`*.\n\nThere are several ways to prove that a
  key belongs to a map, but the simplest is to just use\n`Data.Map.Justified`'s `member`
  function. In `Data.Map`, `member`\nhas the type\n\n```haskell\n    member :: Ord
  k => k -> Map k v -> Bool\n```\n\nand reports whether or not the key can be found
  in the map. In `Data.Map.Justified`,\n`member` has the type\n\n```haskell\n    member
  :: Ord k => k -> Map ph k v -> Maybe (Key ph k)\n```\n\nInstead of a boolean, `Data.Map.Justified`'s
  `member` either says `the key is not present`\n(`Nothing`), or gives back the same
  key, *augmented with evidence that they key*\n*is present*. This key-plus-evidence
  can then be used to do any number of `Maybe`-free\noperations on the map.\n\n`Data.Map.Justified`
  uses the same rank-2 polymorphism trick used in the `Control.Monad.ST` monad to\nensure
  that the `ph` phantom type can not be extracted; in effect, the proof that a key
  is\npresent can't leak to contexts where the proof would no longer be valid.\n\n##
  Phantom evidence\n\nYou can interpret the `ph` phantom type as a concrete *set of
  keys*; under this interpretation,\na value of type `Key ph k` is a key of type `k`,
  belonging to the subset described by `ph`.\nSimilarly, a `Map ph k v` is a map whose
  keys are exactly the subset of `k` described by `ph`.\nFrom this perspective, the
  maps behave as if they were total, leading to their `Maybe`-free behavior.\n\n##
  Why all the continuations?\n\nMany of the functions in `justified-containers` make
  use of continuations, but why? As a case-study,\nconsider the basic function `withMap`
  that promotes a standard `Data.Map.Map` to a `Data.Map.Justified.Map':\n\n```haskell\nimport
  Data.Map.Justified\nimport qualified Data.Map as M\nwithMap :: M.Map k v -> (forall
  ph. Map ph k v -> t) -> t\n```\n\nThe last `(forall ph. Map ph k v -> t) -> t` part
  is the continuation.\n\nThe idea is that we know there is *some* set of keys `ph`
  belonging to this particular map, but\nat compile-time we may not know exactly what
  it is. But it does exist, after all, so we should be\nable to write\n\n```haskell\nwithMap
  :: M.Map k v -> exists ph. Map ph k v\n```\n\nSimilarly, the `inserting` function
  could look like\n\n```haskell\ninserting :: k -> v -> Map ph k v -> exists ph'.
  Map ph' k v\n```\n\nwhich can be read as \"after inserting a key/value pair, we
  get a (possibly) different set of keys `ph'`\".\nBut in this case, we actually know
  a bit more: first, the inserted key will be found in the new map. And\nsecond, every
  key in `ph` can also be found in `ph'`. We\ncan encode that knowledge by giving
  an explicit inclusion of `ph` into `ph'`, encoded as a function of\ntype `Key ph
  k -> Key ph' k`. So we could re-write `inserting` with the type\n\n```haskell\ninserting
  :: k -> v -> Map ph k v -> exists ph'. (Key ph' k, Key ph k -> Key ph' k, Map ph'
  k v)\n--                                                \\_______/  \\___________________/
  \ \\_________/\n--                                   the new key______|                |
  \                |\n--                                                      the
  inclusion__|                 |\n--                                                                       the
  new map_____|\n```\n\nLikewise, when deleting a key from a map with keys `ph`, we
  get a new map with keys `ph'` along\nwith a guarantee that `ph'` is a subset of
  `ph`. Compared to `inserting`, the inclusion goes the\nother way: there is an inclusion
  of `ph'` in `ph`, encoded as a function of type `Key ph' k -> Key ph l`.\nAltogether,
  we could give `deleting` the type\n\n```haskell\ndeleting :: k -> Map ph k v ->
  exists ph'. (Key ph' k -> Key ph k, Map ph' k v)\n--                                          \\___________________/
  \ \\_________/\n--                                                    |                 |\n--
  \                           the reversed inclusion__|                 |\n--                                                      the
  new map_____|\n```\n\nA similar pattern works for other map operations like `union`,
  `intersection`, `difference`, and\n`filter`.\n\n## But what about the continuations?\n\nIn
  the last section, we argued that `deleting` should have a type like\n\n```haskell\ndeleting
  :: k -> Map ph k v -> exists ph'. (Key ph' k -> Key ph k, Map ph' k v)\n--                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nBut
  if you check the documentation, you'll see the type\n\n```haskell\ndeleting :: k
  -> Map ph k v -> (forall ph'. (Key ph' k -> Key ph k, Map ph' k v) -> t) -> t\n--
  \                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nWhat
  happened to the underlined part of the type?\n\nThe problem is that Haskell doesn't
  support existential types directly: the `exists` part of\nthe type we wrote out
  is just wishful thinking. Instead, we have to go about things a little\nindirectly:
  we'll *encode* existentially-quantified types, via *rank-2 universally-quantified
  types*.\n\n\nThe idea can be understood via the Curry-Howard correspondence:\nIn
  classical logic, we have an equivalence between the propositions `∃X.P(X)`\nand
  `∀T. ((∀X.F(X) => T) => T)`.  It turns out that this equivalence remains valid\nin
  constructive logic, so we can transport it via the Curry-Howard correspondence to
  get\nan isomorphism between types:\n\n```haskell\nexists ph.  Map ph k v ~ (forall
  ph. Map ph k v -> t) -> t\n```\n\nIn other words, instead of returning the existentially-quantified
  type directly\nwe say \"tell me what you wanted to do with that existentially-quantified
  type,\nand I'll do it for you\". \n"
description-type: markdown
hash: 1345a6a34754818950d49c318ec0075f7a39462b4044dc988b072541a75148e0
homepage: https://github.com/matt-noonan/justified-containers
latest: 0.3.0.0
license-name: BSD-2-Clause
maintainer: matt.noonan@gmail.com
synopsis: Keyed container types with type-checked proofs of key presence.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  ghc-prim: '>=0'
  hspec: '>=0'
  justified-containers: '>=0'
  should-not-typecheck: '>=0'
