homepage: https://github.com/domoszlai/juicy-gcode
changelog-type: markdown
hash: 9eb9d091457e78fb6d3438bae8d02307fc789e00e0e38551fd7f3c15f5b2f0d8
test-bench-deps: {}
maintainer: dlacko@gmail.com
synopsis: SVG to G-Code converter
changelog: |
  # Revision history for juicy-gcode

  ## 0.3.0.0 -- 2022-12-14

  - Add linear approximation algorithm
  - New option: --curve-fitting
  - Breaking change: --generate-bezier has been removed in favor of --curve-fitting
  - Breaking change: --resolution has been renamed to --tolerance

  ## 0.2.1.0 -- 2022-11-26

  - The approximation error is now calculated along the radial direction
  - The approximation error calculation is now exact instead of sampling-based

  ## 0.2.0.2 -- 2022-10-31

  - Fix a problem triggered by non-quadratic inflexion point equations

  ## 0.2.0.1 -- 2020-08-24

  - Breaking change: change default DPI to 96 instead of 72
  - Breaking change: the option to mirror the Y axis is removed (it is always mirrored now for correct result)
  - Add --version flag

  ## 0.1.0.10 -- 2020-08-19

  - Improve algorithmic stability at small details
  - Fix issue with SVG Line element

  ## 0.1.0.9 -- 2020-05-27

  - Add option to generate bezier curves instead of arcs

  ## 0.1.0.8 -- 2020-05-19

  - Fix unhandled bezier edge cases resulting NaNs in GCode

  ## 0.1.0.7 -- 2020-05-15

  - Add support for the viewBox attribute

  ## 0.1.0.6 -- 2020-05-11

  - Add option to mirror Y axis

  ## 0.1.0.5.2 -- 2020-04-11

  - Update dependencies

  ## 0.1.0.5.1 -- 2018-08-08

  - Update documentation

  ## 0.1.0.5 -- 2018-08-08

  - Simplify special bezier curves to lines

  ## 0.1.0.4 -- 2017-12-30

  - Update LICENSE

  ## 0.1.0.3 -- 2017-03-19

  - Fix typo in cabal file

  ## 0.1.0.2 -- 2017-03-18

  - Fix generating arcs with negative I or J

  ## 0.1.0.1 -- 2016-10-31

  - Minor changes to the package description and README.

  ## 0.1.0.0 -- 2016-10-30

  - First version. Mostly feature complete, but not well tested.
basic-deps:
  base: '>=4.8 && <5'
  configurator: '>=0.3 && <0.4'
  text: '>=1.2.2 && <1.3 || >=2.0 && <2.1'
  gitrev: '>=1.3.0 && <1.4'
  matrix: '>=0.3.5 && <0.4'
  svg-tree: '>=0.6 && <0.7'
  lens: '>=4.15.4 && <5.3'
  linear: '>=1.20 && <1.23'
  optparse-applicative: '>=0.13 && <0.20'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.5.1
- 0.1.0.5.2
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
- 0.1.0.10
- 0.2.0.1
- 0.2.0.2
- 0.2.1.0
- 0.3.0.0
author: dlacko
latest: 0.3.0.0
description-type: markdown
description: "# Juicy-gcode: A lightweight SVG to GCode converter for maximal curve
  fitting\n\n[![Hackage](https://img.shields.io/hackage/v/juicy-gcode.svg)](https://hackage.haskell.org/package/juicy-gcode)\n[![Appveyor](https://ci.appveyor.com/api/projects/status/github/domoszlai/juicy-gcode?branch=master&svg=true)](https://ci.appveyor.com/project/domoszlai/juicy-gcode)\n\n##
  Overview\n\nJuicy-gcode is a configurable SVG to G-code converter that approximates
  bezier curves based on your needs:\n- with [biarcs](http://dlacko.org/blog/2016/10/19/approximating-bezier-curves-by-biarcs/)
  for maximal curve fitting: bezier curves are approximated with arcs ([G2, G3 commands](https://marlinfw.org/meta/gcode/)),
  the resulting path is [G1 continues](https://skill-lync.com/blogs/introductions-to-surface-continuities-and-its-types)\n-
  with linear approximation when arcs are not supported by your firmware: bezier curves
  are approximated with line segments ([G0, G1 commands](https://marlinfw.org/meta/gcode/)),
  the resulting path is [not smooth](https://skill-lync.com/blogs/introductions-to-surface-continuities-and-its-types),
  and the generated gcode is usually significantly larger \n- with cubic bezier curves
  if your firmware supports it: some firmwares (e.g. [Marlin](https://marlinfw.org/docs/gcode/G005.html))
  can handle bezier curves directly ([G5 command](https://marlinfw.org/meta/gcode/)),
  the result is [G2 continues](https://skill-lync.com/blogs/introductions-to-surface-continuities-and-its-types)\n\n##
  Installation\n\nThe easiest way is to download one of the pre-built binaries from
  the [releases page](https://github.com/domoszlai/juicy-gcode/releases).\nAlternatively,
  you can build from source code as follows:\n\n- Install [Stack](https://docs.haskellstack.org/en/stable/install_and_upgrade/)
  if you do not have it yet\n- `$ git clone https://github.com/domoszlai/juicy-gcode.git`\n-
  `$ stack build`\n- `$ stack install`\n- `$ juicy-gcode --help`\n\n## Usage\n\n>
  :warning: **Breaking change**: Since version 0.3.0.0, `--generate-bezier` has been
  removed in favor of the more generic `--curve-fitting` parameter and `--resolution`
  has been renamed to `--tolerance`\n\n> :warning: **Breaking change**: Since version
  0.2.0.1, default DPI is changed to 96 and the option to mirror the Y axis is removed
  (it is always mirrored now for correct result)\n\nThe easier way to use juicy-gcode
  is to simply provide an SVG file name. The generated GCode will be written to standard
  output. The default approximation method is the biarcs based.\n\n```\n$ juicy-gcode
  SVGFILE\n```\n\nAlternativly, you can provide an output file name as well.\n\n```\n$
  juicy-gcode SVGFILE -o OUTPUT\n```\n\nSometimes you want to overwrite some default
  settings. These are the \n\n* *--dpi* (default 96 DPI) [the resolution of the SVG
  file](https://developer.mozilla.org/en-US/docs/Web/CSS/resolution) that is used
  to determine the size of the SVG when it does not contain explicit units\n* *--tolerance*
  (default is 0.1 mm) maximum allowed derivation of the approximation curve\n \n```\n$
  juicy-gcode SVGFILE --dpi 72 --tolerance 0.01 \n```\n\nCurve fitting options (default
  is `biarc`):\n\n```\n$ juicy-gcode SVGFILE --curve-fitting=biarc\n```\n```\n$ juicy-gcode
  SVGFILE --curve-fitting=linear\n```\n```\n$ juicy-gcode SVGFILE --curve-fitting=cubic-bezier\n```\n\n##
  Configuration\n\nThe generated GCode is highly dependent on the actual device it
  will be executed by. In juicy-gcode these settings are called\nGCode *flavor* and
  consists of the following:\n\n- Begin GCode routine (commands that are executed
  *before* the actual print job)\n- End GCode routine (commands that are executed
  *after* the actual print job)\n- Tool on (commands to switch the tool on, e.g. lower
  pen)\n- Tool off (commands to switch the tool off e.g. lift pen)\n\nThese settings
  can be provided by a configuration file. The default settings\nare made for being
  able to test the generated GCode in an emulator e.g. with [LaserWeb](https://laserweb.yurl.ch/)\nor
  [my hanging plotter simulator](https://github.com/domoszlai/hanging-plotter-simulator).
  \n\n```\ngcode\n{\n   begin = \"G17;G90;G0 Z1;G0 X0 Y0\"\n   end = \"G0 Z1\"\n   toolon
  =  \"G00 Z1\"\n   tooloff = \"G01 Z0 F10.00\"\n}\n```\n\nIn the case you want to
  overwrite it, copy this favor to a text file and modify it according to your need.
  Then use juicy-gcode as follows:\n\n```\n$ juicy-gcode SVGFILE -f FLAVORFILE\n```\n\n##
  Future development\n\nJuicy-gcode was originally developed as a testbed for my hanging
  plotter project, but over the years\nit reached maturity and became a really usuable
  tool. My main idea for further development is to turn it\ninto a tool that can drive
  CNCs in 2.5 dimensions (e.g. carving, engraving) with just one colored SVG file.\n\nTo
  be able to test and enjoy that software, I need a proper CNC. Please consider donating
  a small amount for that purpose,\nor donate an actual CNC if you have a spare one
  for whatever reason.\n\n**[Donate for a CNC](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UGFZYDQSTF58L&source=https://github.com/domoszlai/juicy-gcode/)**\n\nCollected
  so far: 229.47&euro;\nTarget: >= 209&euro;\n\nThank you so much for all people supporting
  the development!\n\n## Limitations\n\nSVG features that are not supported:\n\n-
  texts\n- filling\n- clipping\n- images\n"
license-name: BSD-3-Clause
