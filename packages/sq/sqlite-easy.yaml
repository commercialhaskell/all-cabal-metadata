homepage: https://gitlab.com/gilmi/sqlite-easy
changelog-type: markdown
hash: e26df83250eeea26efc82c6c5b1fdfbf43ad82f4115e0858aed87101838c014b
test-bench-deps:
  unliftio: -any
  base: -any
  sqlite-easy: -any
  hspec: -any
  text: -any
  direct-sqlite: -any
  hspec-discover: -any
maintainer: gil@gilmi.net
synopsis: A primitive yet easy to use sqlite library.
changelog: |
  ### 1.0.0.0

  * Bump resource-pool bounds to >=0.4 && <5.

  ### 0.2.0.1

  * Fix: finalize prepared statements even when errors are encountered.

  ### 0.2.0.0

  * Rework the API
    * Introduce the `SQLite a` type instead of `Database -> IO a` for `run`, `runWith`, `withDB`, `migrate`, and so on.
    * Introduce `withPool` and export `liftIO`, `fromString` and `void`.
    * Depend on `unliftio-core` and `mtl`.
  * Implement nested transactions via savepoints.
    * `asTransaction` renamed to `transaction`.
    * `cancelTransaction` split to `rollback` and `rollbackAll`.
basic-deps:
  migrant-core: -any
  bytestring: -any
  base: '>=4.12 && <5'
  text: -any
  resource-pool: '>=0.4 && <0.5'
  direct-sqlite: -any
  unliftio-core: -any
  mtl: -any
all-versions:
- 0.2.0.1
- 1.0.0.0
author: Gil Mizrahi
latest: 1.0.0.0
description-type: markdown
description: |
  sqlite-easy
  ===========

  This library provides a primitive yet easy to use api for SQLite3 using the `direct-sqlite` library,
  resource pooling using `resource-pool`, and migrations using the `migrant` library.

  It might be useful for small toy projects and save a tiny bit of boilerplate.

  - [See the docs for more information](https://hackage.haskell.org/package/sqlite-easy)
  - [See an example app](https://github.com/soupi/sqlite-easy-example-todo)
license-name: BSD-3-Clause
