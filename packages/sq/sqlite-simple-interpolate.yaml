homepage: https://github.com/ruby0b/sqlite-simple-interpolate
changelog-type: markdown
hash: 3861e1d0d2e56f0741efea062329fa00e2f22bbcfd68805db471fa47633e2b75
test-bench-deps:
  sqlite-simple-interpolate: -any
  base: -any
  sqlite-simple: -any
maintainer: ruby0b
synopsis: Interpolated SQLite queries via quasiquotation
changelog: |
  # Changelog

  ## 0.2.0.0

  - **BREAKING**: field interpolation now uses `{}`, _without_ a dollar sign (before: `${}`)
  - Rename the module to `Database.SQLite.Simple.Interpolate` (before: `Database.SQLite.Simple.QQ.Interpolated`)
  - Add support for row interpolation (uses `@{}` syntax, see the updated readme for details)
  - Refactor the parser into a [custom-interpolation](https://hackage.haskell.org/package/custom-interpolation) package which does most of the work

  ## 0.1.1

  - Add support for textual SQL injection (PR #1)
  - Support GHC 8.10.7

  ## 0.1.0

  - Initial version.
basic-deps:
  base: '>=4.14 && <5'
  sqlite-simple: '>=0.1'
  custom-interpolation: ^>=0.1
  template-haskell: '>=2.16 && <2.20'
all-versions:
- '0.1'
- 0.1.1
- 0.2.0.0
author: ruby0b
latest: 0.2.0.0
description-type: markdown
description: |
  <h1 align="center">sqlite-simple-interpolate</h1>

  <p align="center">
    <a href="https://hackage.haskell.org/package/sqlite-simple-interpolate"><img src="https://img.shields.io/hackage/v/sqlite-simple-interpolate" alt="Hackage"></a>
    <a href="https://github.com/ruby0b/sqlite-simple-interpolate/actions/workflows/haskell-ci.yml"><img src="https://github.com/ruby0b/sqlite-simple-interpolate/actions/workflows/haskell-ci.yml/badge.svg" alt="Build Status"></a>
    <a href="https://github.com/simmsb/calamity/blob/master/LICENSE"><img src="https://img.shields.io/github/license/ruby0b/sqlite-simple-interpolate" alt="License"></a>
    <a href="https://hackage.haskell.org/package/sqlite-simple-interpolate"><img src="https://img.shields.io/hackage-deps/v/sqlite-simple-interpolate" alt="Hackage-Deps"></a>
  </p>

  Write natural SQL statements in Haskell using QuasiQuoters!

  The QuasiQuoters support 3 methods of interpolation that can be mixed freely:

  - `{}`: injection-safe field interpolation, e.g. `{myName}` gets replaced with `?` which gets substituted with `toField myName`.
  - `@{}`: injection-safe row interpolation, e.g. `@{myPerson}` gets replaced with `(?,?)` (assuming `Person` has two fields) which gets substituted with `toRow myPerson`.
  - `!{}`: injection-_vulnerable_ raw string interpolation. **Never use this for user input!** Intended for use cases that the anti-injection mechanisms won't allow, e.g. table names: `!{myTableName}` gets replaced with the value of `myTableName :: String`.

  ```haskell
  {-# LANGUAGE QuasiQuotes #-}

  module Main where

  import Control.Exception (bracket)
  import Data.Char (toLower)
  import Data.Function ((&))
  import qualified Database.SQLite.Simple as SQL
  import Database.SQLite.Simple.Interpolate

  data Person = Person {name :: String, age :: Integer}

  instance SQL.ToRow Person where
    toRow p = SQL.toRow (name p, age p)

  table :: String
  table = "people"

  main :: IO ()
  main = bracket (SQL.open ":memory:") SQL.close $ \conn -> do
    -- Create a table, interpolating safe string constants like table names with !{}
    conn & [iexecute|CREATE TABLE !{table} (name TEXT, age INTEGER)|]

    -- Insert a person, safely interpolating a field using {}
    let name = "clive"
    conn & [iexecute|INSERT INTO !{table} VALUES ({name}, 40)|]

    -- Insert a person, safely interpolating an entire row type using @{} (gets replaced with "(?,?)")
    let clara = Person {name = "clara", age = 25}
    conn & [iexecute|INSERT INTO !{table} VALUES @{clara}|]

    -- Use ifold to fold some rows into their sum in haskell
    ageHaskellSum <- conn & [ifold|SELECT age FROM !{table}|] 0 (\acc (SQL.Only x) -> pure (acc + x))
    print (ageHaskellSum :: Int)

    -- Let's calculate the average age of people that are at least 20 years old
    let minAge = 20 :: Int
    [ageAvg] <- conn & [iquery|SELECT AVG(age) FROM !{table} WHERE age >= {minAge}|]
    print (ageAvg :: SQL.Only Double)

    -- You can always use 'isql' directly but you'll have to use uncurry:
    (uncurry $ SQL.execute conn) [isql|INSERT OR REPLACE INTO !{table} VALUES ({name}, 41)|]
  ```
license-name: BSD-3-Clause
