all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.3.0
- 0.1.4.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
author: Heikki Johannes HildÃ©n
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.11.4.0 && <0.13'
  containers: '>=0.6.7 && <0.8'
  mtl: '>=2.2.2 && <2.4'
  text: '>=2.0.2 && <2.2'
  transformers: '>=0.5.6.2 && <0.7'
changelog: |-
  # CHANGELOG

  @todo
changelog-type: markdown
description: "<p align=\"center\">\n  <img alt=\"Logo\" src=\"readme/sqids-haskell.svg\"
  width=\"140\" />\n</p>\n\n<a href=\"https://sqids.org/haskell\">\n  <h1 align=\"center\">Sqids
  Haskell</h1>\n</a>\n\n<p align=\"center\">\n  <a href=\"https://github.com/sqids/sqids-haskell/actions/workflows/haskell.yml\">\n
  \   <img alt=\"\" src=\"https://github.com/sqids/sqids-haskell/actions/workflows/haskell.yml/badge.svg\"
  />\n  </a>\n  <a href=\"https://opensource.org/licenses/MIT\">\n    <img alt=\"\"
  src=\"https://img.shields.io/badge/license-MIT-yellow.svg\" />\n  </a>\n  <a href=\"https://www.haskell.org\">\n
  \   <img alt=\"\" src=\"https://img.shields.io/badge/language-Haskell-orange.svg\"
  />\n  </a>\n  <a href=\"https://hackage.haskell.org/package/sqids\">\n    <img alt=\"\"
  src=\"https://img.shields.io/hackage/v/sqids.svg\" />\n  </a>\n</p>\n\n<p align=\"center\">\n
  \ Sqids (<em>pronounced \"squids\"</em>) is a small library that lets you generate
  YouTube-looking IDs from numbers. It's good for link shortening, fast & URL-safe
  ID generation and decoding back into numbers for quicker database lookups.\n</p>\n\n###
  Table of contents\n\n* [Getting started](#-getting-started)\n  * [Installation](#installation)\n
  \ * [Usage](#usage)\n    * [Encoding](#encoding)\n    * [Decoding](#decoding)\n
  \ * [Setting options](#setting-options)\n  * [Monad transformer](#monad-transformer)\n
  \ * [Error handling](#error-handling)\n* [Options](#options)\n* [Errors](#errors)\n*
  [Notes](#notes)\n* [API documentation](#api-documentation)\n* [License](#license)\n\n##
  \U0001F680 Getting started\n\n### Installation\n\nSqids is available on Hackage
  ([hackage.haskell.org/package/sqids](https://hackage.haskell.org/package/sqids)).
  To install it, run:\n\n```\ncabal install sqids\n```\n\nOr using [Stack](https://docs.haskellstack.org/en/stable/):\n\n```\nstack
  install sqids\n```\n\n### Usage\n\nThe library exposes two versions of the API;\n\n-
  `Web.Sqids` relies on Haskell's `Int` data type, whereas\n- `Web.Sqids.Integer`
  uses `Integer`s, which support arbitrarily large integers.\n\nIf you need to work
  with (i.e. encode and decode to) large numbers, it is\nrecommended to choose the
  latter option, in which case you would import the\nlibrary as:\n\n```\nimport Web.Sqids.Integer\n```\n\nThe
  Haskell standard (see [here](https://www.haskell.org/onlinereport/haskell2010/haskellch6.html#dx13-135009))\nguarantees
  the range supported by `Int` to have an upper bound of at least\n2<sup>29</sup>
  - 1 (= 536,870,911). If this does not present a problem for your\nuse case, instead
  use:\n\n```\nimport Web.Sqids\n```\n\nUse `encode` to translate a list of non-negative
  integers into an ID, and\n`decode` to retrieve back the list of numbers encoded
  by an ID.\n\n```haskell\nencode :: (Integral a) => [a] -> Sqids Text\ndecode ::
  (Integral a) => Text -> Sqids [a]\n```\n\nThese functions return (monadic) values
  of type `Sqids Int a` or `Sqids Integer a`.\nCalling `sqids`, which uses the default
  configuration, or `runSqids` (see below)\nis the most straightforward way to extract
  the `something` from a `Sqids s something`\nvalue.\n\n```haskell\nsqids :: Sqids
  s a -> Either SqidsError a\n```\n\nThis gives you a value of type `Either SqidsError
  a`, where `a` is the ID in the\ncase of `encode`. If encoding fails for some reason,
  then the `Left` constructor\n[contains the error](#error-handling). For some use
  cases, directly calling\n`sqids` or `runSqids` in this way is sufficient. Doing
  so in multiple locations\nin your code, however, doesn't scale very well, especially
  when IO or other\neffects are involved. In this case, the [`SqidsT` monad transformer](#monad-transformer)\nis
  a better choice.\n\n#### Encoding\n\n```haskell\nmodule Main where\n\nimport Web.Sqids\n\nmain
  :: IO ()\nmain =\n  case sqids (encode [1, 2, 3]) of\n    Left  {}   -> print \"Something
  went wrong.\"\n    Right sqid -> print sqid\n```\n\n> The output of this program
  is:\n>\n> ```\n> \"86Rf07\"\n> ```\n\n#### Decoding\n\n```haskell\n{-# LANGUAGE
  OverloadedStrings #-}\nmodule Main where\n\nimport Web.Sqids\n\nmain :: IO ()\nmain
  =\n  case sqids (decode \"86Rf07\") of\n    Left  {}   -> print \"Something went
  wrong.\"\n    Right nums -> print nums\n```\n\n> The output of this program is:\n>\n>
  ```\n> [1,2,3]\n> ```\n\n##### A note about the `OverloadedStrings` language extension\n\n`decode`
  takes a `Text` value as input. If you are not compiling with\n`OverloadedStrings`
  enabled, the `\"86Rf07\"` string literal in the previous\nexample would need to
  be explicitly converted, using the `pack` function from\n`Data.Text`.\n\n```haskell\nimport
  Data.Text (pack)\n```\n\n```haskell\ndecode (pack \"86Rf07\")\n```\n\n### Setting
  options\n\nTo pass custom options to `encode` and `decode`, use `runSqids` which
  takes\nan additional `SqidsOptions` argument.\n\n```haskell\nrunSqids :: SqidsOptions
  -> Sqids s a -> Either SqidsError a\n```\n\nSee [here](#options) for available options.
  You can override the default values using\n`defaultSqidsOptions`, and the following
  idiom:\n\n```haskell\nmain =\n  case runSqids defaultSqidsOptions{ minLength = 24
  } (encode [1, 2, 3]) of\n    Left  {}   -> print \"Something went wrong.\"\n    Right
  sqid -> print sqid\n```\n\n> The output of this program is:\n>\n> ```\n> \"86Rf07xd4zBmiJXQG6otHEbe\"\n>
  ```\n\nTo set a custom alphabet:\n\n```haskell\nmain =\n  case runSqids defaultSqidsOptions{
  alphabet = \"mTHivO7hx3RAbr1f586SwjNnK2lgpcUVuG09BCtekZdJ4DYFPaWoMLQEsXIqyz\" }
  (encode [1, 2, 3]) of\n    Left  {}   -> print \"Something went wrong.\"\n    Right
  sqid -> print sqid\n```\n\n> The output of this program is:\n>\n> ```\n> \"oz6E9F\"\n>
  ```\n\nOr, you can set all options at once:\n\n```haskell\nmain = do\n  let options
  = SqidsOptions\n        { alphabet  = \"1234567890\"\n        , minLength = 8\n
  \       , blocklist = []\n        }\n  case runSqids options (encode [1, 2, 3])
  of\n    Left  {}   -> print \"Something went wrong.\"\n    Right sqid -> print sqid\n```\n\n>
  The output of this program is:\n>\n> ```\n> \"38494176\"\n> ```\n\n### Monad transformer\n\nIn
  a more realistically sized application, calling `runSqids` every time you\nneed
  to access the value returned by `encode` or `decode` isn't ideal. Instead,\nyou
  probably want to create your `SqidsOptions` once, and then do things with\nthe IDs
  across the code without having to pass the options object along every\ntime. Assuming
  your application relies on a transformer stack to combine effects\nfrom different
  monads, then this implies adding the `SqidsT` transformer at\nsome suitable layer
  of the stack. Instead of `sqids` and `runSqids`, there are\ntwo corresponding functions
  to fish out :fishing_pole_and_fish: the value from\ninside of `SqidsT`:\n\n```haskell\nsqidsT
  :: Monad m => SqidsT s m a -> m (Either SqidsError a)\nrunSqidsT :: Monad m => SqidsOptions
  -> SqidsT s m a -> m (Either SqidsError a)\n```\n\nBelow is an example where `SqidsT`
  is used in combination with the `Writer` and\n`IO` monads.\n\n```haskell\nmodule
  Main where\n\nimport Control.Monad (forM_)\nimport Control.Monad.IO.Class (liftIO)\nimport
  Control.Monad.Trans.Class (lift)\nimport Control.Monad.Writer (WriterT, execWriterT,
  tell)\nimport Data.Text (Text)\nimport Web.Sqids\n\nmain :: IO ()\nmain = do\n  w
  <- sqidsT (execWriterT makeIds)\n  case w of\n    Left  err -> print (\"Error: \"
  <> show err)\n    Right ids -> print ids\n\nmakeIds :: WriterT [Text] (SqidsT Int
  IO) ()\nmakeIds = do\n  liftIO $ print \"Generating IDs\"\n  forM_ [1 .. 50] $ \\n
  -> do\n    sqid <- encode [n, n, n, n]\n    tell [sqid]\n```\n\n> The output of
  this program is:\n>\n> ```\n> \"Generating IDs\"\n> [\"Q8Ac4uf3\",\"fU9zWydl\",\"aStUNEra\",\"KR5zQbHB\",\"n7qefHP0\",\"pRkWlenI\",\"ylr03cjE\",\"H0V1tEjl\",\"0rTYteaW\",\"jQw6pcuZ\",\"P9NfMbEk\",\"IYvhBx6l\",\"0vTGthaI\",\"UXLhWExs\",\"u52hY2FK\",\"IjvHBv6e\",\"pqk3lJnQ\",\"PKNDMnEj\",\"RJepNxTd\",\"K15yQcHf\",\"1c72LltW\",\"dY4YwC0z\",\"127FLStT\",\"F0GBXRKm\",\"ZDMTUa09\",\"aFtHNir0\",\"U4LiWBxu\",\"oRltrlxW\",\"1w7ULqtK\",\"nYq5fnPa\",\"HNVMtQjF\",\"IRv4B26F\",\"3wWEpjeF\",\"oXlIrpxD\",\"RNeTNnTN\",\"OQJXLTbo\",\"OAJwLube\",\"onlgrbxt\",\"u42vYoFH\",\"FmGvXwKx\",\"d84vwS0K\",\"QuAl41fQ\",\"H9VRtOjU\",\"sh80jrCd\",\"sB8CjqC3\",\"ZKMzUJ0a\",\"XkbEbTzD\",\"OZJnL3bj\",\"RGevNZTU\",\"36WapueZ\"]\n>
  ```\n\n### Error handling\n\nEncoding and decoding can fail for various reasons.\n\n```haskell\n
  \ case runSqids options (encode numbers) of\n    Left SqidsNegativeNumberInInput
  ->\n      print \"Negative numbers are not allowed as input.\"\n    _ ->\n      --
  etc...\n```\n\nSee [here](#errors) for possible errors.\n\nThe following is an example
  of how to handle errors with the help of\n`MonadError`s exception-handling mechanism:\n\n```haskell\nmodule
  Main where\n\nimport Control.Monad (when)\nimport Control.Monad.Except (catchError)\nimport
  Control.Monad.IO.Class (MonadIO, liftIO)\nimport Data.Either (fromRight)\nimport
  Data.Text (unpack)\nimport Text.Read (readMaybe)\nimport Web.Sqids\n\nputStrLn_
  :: String -> SqidsT Int IO ()\nputStrLn_ = liftIO . putStrLn\n\nrepl :: SqidsT Int
  IO ()\nrepl = do\n  input <- liftIO $ do\n    putStrLn \"Enter a comma-separated
  list of non-negative integers, or \\\"exit\\\".\"\n    putStr \"> \"\n    getLine\n
  \ when (input /= \"exit\") $ do\n    case readMaybe (\"[\" <> input <> \"]\") of\n
  \     Nothing ->\n        putStrLn_ \"Invalid input: Please try again.\"\n      Just
  numbers ->\n        catchError (encode numbers >>= putStrLn_ . unpack) $ \\err ->\n
  \         case err of\n            SqidsNegativeNumberInInput ->\n              putStrLn_
  \"Only non-negative integers are accepted as input.\"\n            _ ->\n              putStrLn_
  \"Unexpected error\"\n    repl\n\nrunRepl :: IO (Either SqidsError ())\nrunRepl
  = runSqidsT defaultSqidsOptions repl\n\nmain :: IO ()\nmain = fromRight () <$> runRepl\n```\n\n>
  Program example output:\n>\n> ![Example](https://raw.githubusercontent.com/sqids/sqids-haskell/main/readme/example.gif)\n\n##
  Options\n\n### `alphabet :: Text`\n\nThe alphabet used by the algorithm for encoding
  and decoding.\n\n* Default value: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789`\n\n###
  `minLength :: Int`\n\nThe minimum allowed length of IDs.\n\n* Default value: `0`\n\n###
  `blocklist :: [Text]`\n\nA list of words that must never appear in IDs.\n\n* Default
  value: See [src/Web/Sqids/Blocklist.hs](src/Web/Sqids/Blocklist.hs).\n* Also see
  [the official Sqids blocklist repository](https://github.com/sqids/sqids-blocklist).\n\n##
  Errors\n\n### `SqidsAlphabetTooShort`\n\nThe alphabet must be at least 3 characters
  long.\n\n### `SqidsAlphabetRepeatedCharacters`\n\nThe provided alphabet contains
  duplicate characters. E.g., `\"abcdefgg\"` is not\na valid alphabet.\n\n### `SqidsInvalidMinLength`\n\nThe
  given `minLength` value is not within the valid range.\n\n### `SqidsNegativeNumberInInput`\n\nOne
  or more numbers in the list passed to `encode` are negative. Only\nnon-negative
  integers can be used as input.\n\n### `SqidsMaxEncodingAttempts`\n\nEncoding failed
  after too many recursive iterations. This happens if the\nblocklist is too restrictive.
  Consider the following example:\n\n```haskell\n  let options = defaultSqidsOptions\n
  \       { alphabet  = \"abc\"\n        , blocklist = [ \"cab\", \"abc\", \"bca\"
  ]\n        , minLength = 3\n        }\n   in\n     runSqids options (encode [0])\n```\n\n###
  `SqidsAlphabetContainsMultibyteCharacters`\n\nThe alphabet must consist of only
  characters in the standard single-byte\ncharacter set.\n\n## Notes\n\n- **Do not
  encode sensitive data.** These IDs can be easily decoded.\n- **Default blocklist
  is auto-enabled.** It's configured for the most common profanity words. Create your
  own custom list by using the blocklist parameter, or pass an empty list to allow
  all words.\n- Read more at https://sqids.org/haskell\n\n## API documentation\n\nSee
  https://hackage.haskell.org/package/sqids.\n\n## License\n\n[MIT](LICENSE)\n"
description-type: markdown
hash: ca36c8bfe753294118a82d55ad21991e6938bfb699ea47facd4769730a1457e8
homepage: https://sqids.org/
latest: 0.2.2.0
license-name: MIT
maintainer: hildenjohannes@gmail.com
synopsis: A small library that lets you generate YouTube-looking IDs from numbers.
test-bench-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.11.4.0 && <0.13'
  containers: '>=0.6.7 && <0.8'
  hspec: '>=2.10.10 && <2.12'
  mtl: '>=2.2.2 && <2.4'
  split: '>=0.2.3.5 && <0.3.0.0'
  sqids: '>=0'
  text: '>=2.0.2 && <2.2'
  transformers: '>=0.5.6.2 && <0.7'
