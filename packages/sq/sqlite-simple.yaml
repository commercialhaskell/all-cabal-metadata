all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.4.3.1
- 0.4.4.0
- 0.4.5.0
- 0.4.5.1
- 0.4.5.2
- 0.4.6.0
- 0.4.6.1
- 0.4.7.0
- 0.4.8.0
- 0.4.9.0
- 0.4.10.0
- 0.4.11.0
- 0.4.12.0
- 0.4.12.1
- 0.4.13.0
- 0.4.14.0
- 0.4.15.0
- 0.4.16.0
- 0.4.18.0
- 0.4.18.2
author: Bryan O'Sullivan, Leon P Smith, Janne Hellsten
basic-deps:
  Only: '>=0.1 && <0.1.1'
  attoparsec: '>=0.10.3'
  base: <5
  blaze-builder: '>=0'
  blaze-textual: '>=0'
  bytestring: '>=0.9'
  containers: '>=0'
  direct-sqlite: '>=2.3.13 && <2.4'
  template-haskell: '>=0'
  text: '>=0.11'
  time: '>=0'
  transformers: '>=0'
changelog: "0.4.18.2\n\t* Depend on semigroups only for old GHC versions\n\n0.4.18.1\n\t*
  Add generic implementation of 'FromRow' and 'ToRow'.\n\n0.4.16.0\n\t* Add FromField
  instance for SQLData (thanks @LindaOrtega, @Shimuuar)\n\t* Add QuasiQuoter sql (thanks
  @vrom911)\n\n0.4.15.0\n\t* Support GHC 8.4.1 (Add instance Semigroup Query) (thanks
  @gwils!)\n\n0.4.14.0\n\t* Use @hvr's Only package for the Only single element typle
  type.\n\n0.4.13.0\n\t* Add columnCount (thanks @Shimuuar!)\n\t* Add withImmediateTransaction,
  withExclusiveTransaction (thanks @mbucc!)\n\t* Expose the Database.SQLite3 Statement
  type through Database.SQLite.Simple Statement\n\n0.4.12.1\n\t* Add Setup.hs (https://github.com/fpco/stackage/issues/2145)\n\n0.4.12.0\n\t*
  Add queryWith\n\n0.4.11.0\n\t* Add executeMany\n\n0.4.10.0\n\t* Expose sqlite3_changes/total_changes\n\n0.4.9.0\n\t*
  Provide queryWith_ to allow more fine-grained access to\n\t  constructing queries.\n\t*
  Expose error data constructors (pull request #42)\n\t* Improve haddocks\n\n0.4.8.0\n\t*
  Export `bindNamed'\n\n0.4.7.0\n\t* Add `withTransaction' for running IO actions
  inside SQL\n\t  transactions with automated rollback if any exceptions are thrown.\n\n0.4.6.1\n\t*
  Fix unit test build break with older bytestring versions\n\n0.4.6.0\n\t* Add \"named
  parameters\" variants of query & al.  Named params\n\t  allow queries like:\n\t
  \ res <- queryNamed conn \"SELECT * FROM posts WHERE id = :id\" [\":id\" := postId]\n\t*
  Add FromField instances for Int8, Word, Word8, Word16, Word32\n\t  and Word64.\n\t*
  Fix typos in some type conversion error messages.\n\t* Improved test coverage.\n\n0.4.5.2\n\t*
  Build fix for GHC 7.4\n\n0.4.5.1\n\t* Docs changes - uploaded new version to Hackage
  to update the\n\tHackage page.\n\n0.4.5.0\n\n\t* Various improvements to documentation.
  \ Especially UTCTime\n\t  parsing and printing, and how it relates to SQLite datetimes
  is\n\t  better documented now.\n\n\t* Improved date/time parsing performance by
  adapting Leon\n\t  P. Smith's parsers from postgresql-simple for SQLite.  UTCTime\n\t
  \ handling is also better defined now.\n\n\t* Improved query performance\n\t  (https://github.com/nurpax/sqlite-simple/issues/23)\n\n\t*
  Improved tests for all areas touched by the above change.\n\nv0.4.4.0\n\n\t* Add
  FromField instance for Float\n\n\t* Improve error handling for day parsing\n\n\t*
  + with tests\n\nv0.4.1.0 - v0.4.3.0 (missed tagging v0.4.2.0)\n\n\t* Improvements
  to withBind functionality and documentation\n\t  (see https://github.com/nurpax/sqlite-simple/pull/26)\n\n\t*
  Add columnName accessor for statements\n\n\t* Expose MonadPlus on RowParser\n\n\t*
  Allow access to the underlying direct-sqilte connection from an\n\t  sqlite-simple
  connection\n\n\t* Add Data.Text.Lazy and lazy ByteString From/ToField instances\n\nv0.4.0.0\n\n\t*
  Add lastInsertRowId\n\n\t* Expose SQLite statements based streaming API\n\t  (see
  https://github.com/nurpax/sqlite-simple/pull/22)\n\nv0.3.0.0\n\n\t* Add fold, fold_,
  withConnection\n\nv0.2.0.0 - v0.2.1.0\n\n\t* Optimizations to improve query rows/sec
  performance\n"
changelog-type: text
description: |
  sqlite-simple: mid-level bindings to the sqlite database
  ========================================================

  [![Build Status](https://secure.travis-ci.org/nurpax/sqlite-simple.png)](http://travis-ci.org/nurpax/sqlite-simple)

  This library is a mid-level Haskell binding to the SQLite database.

  Sqlite-simple provides a convenient API to sqlite that does some level
  of automatic data conversion between the database and Haskell types.
  The API has been modeled directly after
  [postgresql-simple](http://github.com/lpsmith/postgresql-simple) which
  in turn borrows from
  [mysql-simple](https://github.com/bos/mysql-simple).

  [The sqlite-simple API
  reference](https://hackage.haskell.org/package/sqlite-simple/docs/Database-SQLite-Simple.html)
  contains more examples of use and information on its features.

  The library is well tested and stable.  The library should also be
  reasonably performant.  You can find its benchmark suite here:
  [db-bench](https://github.com/nurpax/db-bench).  You can read more
  about sqlite-simple's expected performance in [my blog about
  sqlite-simple performance against direct-sqlite, Python and
  C](http://nurpax.github.io/posts/2013-08-17-sqlite-simple-benchmarking.html).


  ## Installation

  You can install [sqlite-simple from Hackage](http://hackage.haskell.org/package/sqlite-simple)
  with:

  ```
  cabal install sqlite-simple
  ```

  A Windows user?  It works but please see [this note](https://gist.github.com/3907344) on direct-sqlite Windows installation.

  ## Examples of use

  Create a test database by copy&pasting the below snippet to your
  shell:

  ```
  sqlite3 test.db "CREATE TABLE test (id INTEGER PRIMARY KEY, str text);\
  INSERT INTO test (str) VALUES ('test string');"
  ```

  ..and access it in Haskell:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  import Control.Applicative
  import Database.SQLite.Simple
  import Database.SQLite.Simple.FromRow

  data TestField = TestField Int String deriving (Show)

  instance FromRow TestField where
    fromRow = TestField <$> field <*> field

  main :: IO ()
  main = do
    conn <- open "test.db"
    execute conn "INSERT INTO test (str) VALUES (?)"
      (Only ("test string 2" :: String))
    r <- query_ conn "SELECT * from test" :: IO [TestField]
    mapM_ print r
    close conn
  ```

  More simple usage examples can be found from [sqlite-simple unit
  tests](https://github.com/nurpax/sqlite-simple/blob/master/test/Simple.hs).


  ## Development

  The development roadmap for sqlite-simple is mostly captured in the
  github issue database.

  I'm happy to receive bug reports, fixes, documentation enhancements,
  and other improvements.

  Please report bugs via the
  [github issue tracker](http://github.com/nurpax/sqlite-simple/issues).

  For general database issues with a Haskell focus, I recommend sending
  e-mail to the [database-devel mailing
  list](http://www.haskell.org/mailman/listinfo/database-devel).

  ## Contributing

  If you send pull requests for new features, it'd be great if you could also develop unit
  tests for any such features.

  ## Credits

  - [Janne Hellsten](https://github.com/nurpax) author, long-term maintainer
  - [Sergey Bushnyak](https://github.com/sigrlami) current maintainer

  A lot of the code is directly borrowed from
  [mysql-simple](http://github.com/bos/mysql-simple) by Bryan O'Sullivan
  and from
  [postgresql-simple](http://github.com/lpsmith/postgresql-simple) by
  Leon P. Smith.  Like Leon in postgresql-simple, I borrow code and
  documentation directly from both of these ancestor libraries.

  This package builds on top of the
  [direct-sqlite](http://hackage.haskell.org/package/direct-sqlite)
  package by Irene Knapp.

  SQLite is rather weakly-typed and thus the SQL to Haskell type
  strictness of the parent projects does not necessarily apply to this
  package.
description-type: markdown
hash: dda1643e723591c880dda8eeba73e93502cfa775078a79da55b5efec4c52ff66
homepage: http://github.com/nurpax/sqlite-simple
latest: 0.4.18.2
license-name: BSD-3-Clause
maintainer: Janne Hellsten <jjhellst@gmail.com>
synopsis: Mid-Level SQLite client library
test-bench-deps:
  HUnit: '>=0'
  base: '>=0'
  base16-bytestring: '>=0'
  bytestring: '>=0.9'
  direct-sqlite: '>=0'
  sqlite-simple: '>=0'
  text: '>=0'
  time: '>=0'
