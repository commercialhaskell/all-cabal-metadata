all-versions:
- 0.0.1.0
author: Geraud Boyer
basic-deps:
  base: '>=4.5 && <4.9'
  containers: '>=0.5'
  templater: '>=0'
  text: '>=1.1'
changelog: ''
changelog-type: ''
description: |
  # CmdItem
  [![Build Status](https://travis-ci.org/geraud/cmd-item.svg?branch=master)](https://travis-ci.org/geraud/cmd-item)

  CmdItem allows you to compose command lines by combining fragments of commands.

  ## Installation

  ```haskell
  cabal update
  cabal install cmd-item
  ```

  ## Example

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE OverloadedLists #-}

  import Data.CmdItem
  import System.Environment (getArgs)

  main :: IO ()
  main = do
      args <- getArgs
      case args of
      [] -> return ()
      (name:ns) -> do
          constants <- getConstants name
          makeProject constants

  makeProject :: CmdItem -> IO ()
  makeProject contants = do
      let cmdItem = pants <> "idea" <> ideaOptions <> constants
      shellCommand <- render cmdItem
      print shellcommand

  getConstants :: Text -> IO CmdItem
  getConstants name =  do
      home <- getHomeDirectory
      nCpu <- getNumProcessors
      let result = [ ("java_version", "7")
                   , ("project_root", T.pack $ home <> "/workspace/project")
                   , ("num_cpu", T.pack $ show nCpu)
                   , ("project_name", name)
                   ]
      return result

  pants :: CmdItem
  pants = "%{project_root}/pants"

  ideaOptions :: CmdItem
  ideaOptions = "--idea-java-language-level=%{java_version}"
              <> "--idea-java-maximum-heap-size=2096"
              <> "--idea-scala-maximum-heap-size=2096"
              <> "--idea-project-name=%{project_name}"
  ```
description-type: markdown
hash: 8eab108cb7010da23431fd7ae7804b0bdf6177023c581b0b200f846cd25deac8
homepage: https://github.com/geraud/cmd-item
latest: 0.0.1.0
license-name: MIT
maintainer: Geraud Boyer <geraud@gmail.com>
synopsis: Library to compose and reuse command line fragments
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  cmd-item: '>=0'
  hspec: '>=2 && <3'
  hspec-laws: '>=0'
  quickcheck-instances: '>=0'
  text: '>=0'
