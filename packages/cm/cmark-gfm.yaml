homepage: https://github.com/kivikakk/cmark-gfm-hs
changelog-type: text
hash: 6e31f5a6f12855cb8ddc2e3190f3ab15e49218d9945aa843a4258b7de30abcfe
test-bench-deps:
  markdown: '>=0.1 && <0.2'
  cmark-gfm: -any
  sundown: '>=0.6 && <0.7'
  base: -any
  discount: '>=0.1 && <0.2'
  text: -any
  criterion: -any
  HUnit: '>=1.2 && <1.7'
  cheapskate: '>=0.1 && <0.2'
  blaze-html: '>=0.7 && <0.10'
maintainer: ashe@kivikakk.ee
synopsis: Fast, accurate GitHub Flavored Markdown parser and renderer
changelog: "cmark-gfm 0.2.2 (16 Sep 2020)\n\n  * Pull in upstream changes.\n\ncmark-gfm
  0.2.1 (15 Nov 2019)\n\n  * Add tasklist support (#16, Christian Gill).\n\ncmark-gfm
  0.2.0 (8 Apr 2019)\n\n  * Pull in upstream changes.\n\ncmark 0.6 (08 Apr 2019)\n\n
  \ * Update to cmark 0.29.0.\n  * Export optUnsafe.  Note that the default is now
  to suppress\n    potentially unsafe HTML; set optUnsafe to return to the old behavior.\n\ncmark-gfm
  0.1.8 (14 Mar 2019)\n\n  * Pull in upstream changes.\n\ncmark 0.5.6.3 (13 Mar 2019)\n\n
  \ * Use snoc instead of <> to add the null terminator.\n\ncmark 0.5.6.2 (13 Mar
  2019)\n\n  * Ensure that withtext adds a null terminator (#14).\n    This fixes
  a regression due to PR #13, which caused\n    random content to appear in rendered
  TEXT nodes.\n\ncmark-gfm 0.1.7 (13 Mar 2019)\n\n  * Update to cmark-gfm 0.28.3.gfm.20.\n\ncmark
  0.5.6.1 (11 Mar 2019)\n\n  * Fix CString memory leaks (Anders Kaseorg).  The renderer
  functions return\n  a malloc’d string which the caller is expected to free.\n\n
  \ * Fix use-after-free bugs (Anders Kaseorg).  `useAsCString` frees the\n    CString
  after the IO action finishes executing, so passing `return` as\n    that action
  can never be correct.  To make sure the CString gets freed\n    at the right time,
  we need a “with”-style abstraction, not just a\n    conversion function.  While
  we’re here replace this with\n    `withCStringLen`, which also makes fewer copies.\n\n
  \ * Show node type on error for unknown node type.\n\ncmark-gfm 0.1.6 (17 Oct 2018)\n\n
  \ * Update to cmark-gfm 0.28.3.gfm.18.\n  * `optUnsafe` is now exposed, instead
  of `optSafe`. \n\ncmark-gfm 0.1.5 (21 Aug 2018)\n\n  * Update to cmark-gfm 0.28.3.gfm.15.\n
  \ * Fix build with system cmark-gfm (Felix Yan, #9).\n\ncmark-gfm 0.1.4 (2 Jul 2018)\n\n
  \ * Extensions work correctly on big-endian systems (Ilias Tsitsimpis).\n\ncmark-gfm
  0.1.3 (10 Aug 2017)\n\n  * Update to cmark-gfm 0.28.0.gfm.6.\n\ncmark-gfm 0.1.2
  (09 Aug 2017)\n\n  * Update to cmark-gfm 0.28.0.gfm.5.\n\ncmark-gfm 0.1.1 (03 Aug
  2017)\n\n  * Automatically register plugins.\n  * Rename alignment values to not
  clash with `None`, `Left`.\n  * Fix a potential use-after-free.\n\ncmark-gfm 0.1.0
  (03 Aug 2017)\n\n  * Update to cmark-gfm (between revisions).\n  * Add extension
  support.\n\ncmark 0.5.6 (02 Aug 2017)\n\n  * Update to cmark 0.28.0.\n\ncmark 0.5.5.1
  (20 Mar 2017)\n\n  * Update version bound for HUnit.\n\ncmark 0.5.5 (31 Jan 2017)\n\n
  \ * Update to cmark 0.27.1.\n  * Update version bounds for dependencies.\n\ncmark
  0.5.4 (18 Nov 2016)\n\n  * Update to cmark 0.27.0.\n\ncmark 0.5.3.1 (16 Jul 2016)\n\n
  \ * Remove unnecessary typedef that caused problems with the build\n    (patch from
  upstream).\n\ncmark 0.5.3 (15 Jul 2016)\n\n  * Update to cmark 0.26.0.\n  * Added
  appveyor CI.\n\ncmark 0.5.2.1 (22 May 2016)\n\n  * New .travis.yml - test with stack,
  cabal on many versions.\n  * Increase upper bound of base (Utku Demir).\n\ncmark
  0.5.2 (26 Mar 2016)\n\n  * Add flag to allow building with an installed libcmark
  (Jens Petersen).\n  * Updated to libcmark 0.25.2.\n\ncmark 0.5.1 (21 Jan 2016)\n\n
  \ * Updated to libcmark 0.24.1.\n\ncmark 0.5 (29 Dec 2015)\n\n  * Updated to libcmark
  0.23.0.\n  * API changes:\n    + Added `OnEnter` and `OnExit` types.\n    + In `NodeType`,
  `HRULE` is now `THEMATIC_BREAK`,\n      `HTML` is `HTML_BLOCK`, `INLINE_HTML` is\n
  \     `HTML_INLINE`, `HEADER` is `HEADING`.  New\n      constructors: `CUSTOM_INLINE`,
  `CUSTOM_BLOCK`.\n\ncmark 0.4.1 (23 Aug 2015)\n\n  * Updated to libcmark 0.22.0.\n
  \ * Bumped version bounds for HUnit.\n\ncmark 0.4.0.1 (14 Jul 2015)\n\n  * API changes:\n
  \   + Added `commonmarkToLaTeX`, `nodeToLaTeX`, `optSafe`.\n    + Changed type of
  `commonmarkToMan` and `nodeToMan`,\n      adding `Maybe Int` param for width.\n
  \   + Changed type of `nodeToCommonMark`, changing the `Int` width\n      parameter
  to a `Maybe Int`.\n  * Updated to cmark 0.21 sources.\n\ncmark 0.3.4 (08 Jun 2015)\n\n
  \ * Updated to libcmark 0.20.0.\n\ncmark 0.3.3.1 (28 May 2015)\n\n  * Changed name
  Bench.hs -> bench-cmark.hs.\n  * Benchmark:  don't benchmark pandoc (circular dependency).\n\ncmark
  0.3.3 (26 May 2015)\n\n  * Added `nodeToHtml`, `nodeToMan`, `nodeToXml`.\n  * Added
  version bounds for text (Albert Krewinkel).\n\ncmark 0.3.2 (28 Apr 2015)\n\n  *
  Updated libcmark C sources to 0.19.0.\n  * Fixes to avoid warning for earlier ghc
  versions.\n  * Refactored, removing the `io` convenience function.\n  * Removed
  unnecessary `unsafePerformIO` on `fromtext`.\n  * `fromtext`: use `ByteString.useAsCString`
  + explicit `encodeUtf8`.\n\ncmark 0.3.1 (29 Mar 2015)\n\n  * Added nodeToCommonmark.\n
  \ * Removed mtl from build-depends.\n  * Updated source info in README, cabal.\n
  \ * Updated C sources.\n  * Put all the C functions in the IO monad, and ensure\n
  \   that memory allocated by the C library is freed\n    at the right time.\n  *
  Added a rudimentary test suite.\n  * Properly free c-allocated resources.\n  * Removed
  bindings to nonexistent setters for source pos\n    attributes.\n"
basic-deps:
  bytestring: -any
  base: '>=4.5 && <5.0'
  text: '>=1.0 && <2.1'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.2.0
- 0.2.1
- 0.2.2
author: Ashe Connor
latest: 0.2.2
description-type: markdown
description: |
  cmark-gfm-hs
  ============

  This package provides Haskell bindings for [libcmark-gfm], the reference
  parser for [GitHub Flavored Markdown], a fully specified variant of Markdown.
  It includes sources for [libcmark-gfm] and does not require prior
  installation of the C library.

  cmark provides the following advantages over existing Markdown
  libraries for Haskell:

    - **Speed:** cmark can render a Markdown version of *War and Peace* in
      the blink of an eye.  Conversion speed is on par with the
      [sundown] library, though we were unable to benchmark precisely,
      because [sundown] raised a malloc error when compiled into our
      benchmark suite. Relative to other Haskell Markdown libraries:
      cmark was 82 times faster than [cheapskate], 59 times faster than
      [markdown], 105 times faster than [pandoc], and 3 times faster
      than [discount].

    - **Memory footprint:**  Memory footprint is on par with [sundown].
      On one sample, the library uses a fourth the memory that [markdown]
      uses, and less than a tenth the memory that [pandoc] uses.

    - **Robustness:**  cmark can handle whatever is thrown at it,
      without the exponential blowups in parsing time that sometimes afflict
      other libraries.  (The input `bench/full-sample.md`,
      for example, causes both [pandoc] and [markdown] to grind to a
      halt.)  [libcmark-gfm] has been extensively fuzz-tested.

    - **Accuracy:**  cmark passes the CommonMark spec's suite of over
      600 conformance tests.

    - **Standardization:**  Since there is a spec and a comprehensive suite
      of tests, we can have a high degree of confidence that any two
      CommonMark implementations will behave the same.  Thus, for
      example, one could use this library for server-side rendering
      and [commonmark.js] for client-side previewing.

    - **Multiple renderers.**  Output in HTML, groff man, LaTeX, CommonMark,
      and a custom XML format is supported. And it is easy to write new
      renderers to support other formats.

    - **Ease of installation:** cmark is portable and has minimal
      dependencies.

  cmark-gfm does not provide Haskell versions of the whole [libcmark-gfm]
  API, which is built around mutable `cmark_node` objects.  Instead, it
  provides functions for converting CommonMark to HTML (and other
  formats), and a function for converting CommonMark to a `Node`
  tree that can be processed further using Haskell.

  **A note on stability:**  There is a good chance the API will change
  significantly after this early release.

  [GitHub Flavored Markdown]: https://github.github.com/gfm/
  [libcmark-gfm]: http://github.com/github/cmark-gfm
  [benchmarks]: https://github.com/jgm/cmark/blob/master/benchmarks.md
  [cheapskate]: https://hackage.haskell.org/package/cheapskate
  [pandoc]: https://hackage.haskell.org/package/pandoc
  [sundown]: https://hackage.haskell.org/package/sundown
  [markdown]: https://hackage.haskell.org/package/markdown
  [commonmark.js]: http://github.com/jgm/commonmark.js
  [xss-sanitize]: https://hackage.haskell.org/package/xss-sanitize
  [discount]: https://hackage.haskell.org/package/discount
license-name: BSD-3-Clause
