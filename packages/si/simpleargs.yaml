homepage: http://malde.org/~ketil/simpleargs
changelog-type: ''
hash: 5d5924a7ae8c02ebe89ce5c44be3fed322bb52c8e827ca7f8f1ef1e78dcf8726
test-bench-deps: {}
maintainer: Ketil Malde <ketil@malde.org>
synopsis: Provides a more flexible getArgs function with better error reporting.
changelog: ''
basic-deps:
  base: '>=3 && <4.10'
all-versions:
- '0.1'
- 0.2.1
author: Ketil Malde
latest: 0.2.1
description-type: text
description: "\nSimpleArgs - provide a more flexible and informative replacement for
  getArgs \n\nFor \"real\" command line programs, you usually want to provide a\nflexible
  command line with various options and settings, sensibly\nnamed and with auto-generated
  help.  In that case, SimpleArgs is not\nfor you, stop reading this, and look up
  System.Console.GetOpt¹\ninstead. \n\nBut sometimes, a quick hack is just what you
  need.  Previously, you\nwere wont to do:\n\n    main = do\n        [count',gender']
  <- getArgs\n\tlet count = read count\n\t    gender = case gender' of \n\t       \t
  \     \t     \"M\" -> 'M'\n\t\t\t     \"F\" -> 'F'\n\tmain_real count gender\n\nThis
  is somewhat tedious, wastes precious sceen estate, users\nsupplying parameters of
  the wrong type will get obscure errors, and\nwhile any programming errors you might
  introduce probably will be\ntrivial, it would be better to avoid them entirely.\n\nThe
  SimpleArgs module provides getArgs with an overloaded return type,\nso that command
  line parameters are parsed as the types required by\nthe rest of the program.\n\nUsing
  SimpleArgs, the above could therefore look like this:\n\n    main = do \n        (count,gender)
  <- getArgs\n        main_real count gender\n\nor even (I think):\n\n    main = getArgs
  >>= return . uncurry main_real\n\nIf that was a bit contrieved, let's say you just
  want to read a file\nname:\n\n     main = do\n        [filename] <- getArgs\n        readFile
  filename >>= print . length \n\nI'm sure you could avoid the information-free name
  \"filename\" by some\nesoteric tranformation to more point-free style, but I argue
  that\nSimpleArgs makes this natural and easy:\n\n    main = getArgs >>= readFile
  >>= print . length\n\nI don't think 'wc -c' gets much easier than this.  Here's
  a custom\ndata type (which is parsed using its Read instance, and also needs\nTypeable):\n\n
  \   import System.SimpleArgs\n    import Data.Typeable\n\n    data Gender = Male
  | Female deriving (Typeable,Read)\n\n    main = do\n        g <- getArgs\n        case
  g of Male -> putStrLn \"X and Y\"\n                  Female -> putStrLn \"two Xs\"\n\nInstead
  of reporting errors rather anonymously as incomplete cases or\nread failures, SimpleArgs
  will provide more sensible error\nreporting. (To try this, build Example by executing
  'ghc --make\nExample.hs').  It will: \n\n      1) report incorrect number of parameters,\n
  \     \t also mentioning the expected parameters and types:\n\n\t  % ./Example foo\n\t
  \ Example: Incorrect number of arguments, got 1,\n\t  expected 2 (Int,[Char])\n\n\tThis
  also gives you a useful hint if you just run the program\n\twithout any parameters.\n\n
  \     2) report parameters that fail to parse as the required type:\n\n          %
  ./Example foo 10\n \t  Example: Couldn't parse parameter \"foo\" as type Int\n\nNice,
  huh?  Please enjoy, and let me know how you fare at ketil@malde.org.\n\n¹ http://www.haskell.org/haskellwiki/High-level_option_handling_with_GetOpt\n"
license-name: LicenseRef-LGPL
