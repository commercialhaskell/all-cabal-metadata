homepage: http://www.github.com/goldfirere/singletons
changelog-type: markdown
hash: 07b39a6c93a338cebb0437ffa071ac4b64a71f9a4951e5c511a89741d1147ee7
test-bench-deps: {}
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: A framework for generating singleton types
changelog: "Changelog for the `singletons-th` project\r\n=========================================\r\n\r\n3.2
  [2023.03.12]\r\n----------------\r\n* Require building with GHC 9.6.\r\n* Derived
  `POrd` and `SOrd` instances (arising from a use of `deriving Ord`)\r\n  now use
  `(<>) @Ordering` in their implementations instead of the custom\r\n  `thenCmp ::
  Ordering -> Ordering -> Ordering` function. While most code will\r\n  likely continue
  to work after this change, this may break code that attempts\r\n  to prove properties
  about the implementation of a derived `POrd`/`SOrd`\r\n  instance.\r\n* Fix a bug
  in which the `singDecideInstances` and `showSingInstances`, as well\r\n  as `deriving
  Show` declarations, would not respect custom\r\n  `promotedDataTypeOrConName` options.\r\n*
  Allow building with `mtl-2.3.*`.\r\n\r\n3.1.1 [2022.08.23]\r\n------------------\r\n*
  Require building with GHC 9.4.\r\n* Improve error messages when attempting to promote
  a partial application of\r\n  a function arrow `(->)`, which is not currently supported.\r\n\r\n3.1
  [2021.10.30]\r\n----------------\r\n* Require building with GHC 9.2.\r\n* Allow
  promoting and singling type applications in data constructor patterns.\r\n* Make
  the Template Haskell machinery generate `SingI1` and `SingI2` instances\r\n  when
  possible.\r\n* Make `genDefunSymbols` and related functions less likely to trigger\r\n
  \ [GHC#19743](https://gitlab.haskell.org/ghc/ghc/-/issues/19743).\r\n\r\n3.0 [2021.03.12]\r\n----------------\r\n*
  The `singletons` library has been split into three libraries:\r\n\r\n  * The new
  `singletons` library is now a minimal library that only provides\r\n    `Data.Singletons`,
  `Data.Singletons.Decide`, `Data.Singletons.Sigma`, and\r\n    `Data.Singletons.ShowSing`
  (if compiled with GHC 8.6 or later).\r\n    `singletons` now supports building GHCs
  back to GHC 8.0, as well as GHCJS.\r\n  * The `singletons-th` library defines Template
  Haskell functionality for\r\n    promoting and singling term-level definitions,
  but but nothing else. This\r\n    library continues to require the latest stable
  release of GHC.\r\n  * The `singletons-base` library defines promoted and singled
  versions of\r\n    definitions from the `base` library, including the `Prelude`.
  This library\r\n    continues to require the latest stable release of GHC.\r\n\r\n
  \ Consult the changelogs for `singletons` and `singletons-base` for changes\r\n
  \ specific to those libraries. For more information on this split, see the\r\n  [relevant
  GitHub discussion](https://github.com/goldfirere/singletons/issues/420).\r\n* Require
  building with GHC 9.0.\r\n* `Data.Singletons.CustomStar` and `Data.Singletons.SuppressUnusedWarnings`\r\n
  \ have been renamed to `Data.Singletons.TH.CustomStar` and\r\n  `Data.Singletons.SuppressUnusedWarnings`,
  respectively, to give every module\r\n  in `singletons-th` a consistent module prefix.\r\n*
  Due to the `singletons` package split, the `singletons-th` modules\r\n  `Data.Singletons.TH`
  and `Data.Singletons.TH.CustomStar` (formerly known as\r\n  `Data.Singletons.CustomStar`)
  no longer re-export any definitions from the\r\n  `singletons-base` module `Prelude.Singletons`
  (formerly known as\r\n  `Data.Singletons.Prelude`). The `singletons-base` library
  now provides\r\n  versions of these modules—`Data.Singletons.Base.CustomStar` and\r\n
  \ `Data.Singletons.Base.TH`, respectively—that do re-export definitions\r\n  from
  `Prelude.Singletons`.\r\n* \"Fully saturated\" defunctionalization symbols (e.g.,
  `IdSym1`) are now\r\n  defined as type families instead of type synonyms. This has
  two notable\r\n  benefits:\r\n\r\n  * Fully saturated defunctionalization symbols
  can now be given standalone\r\n    kind signatures, which ensures that the order
  of kind variables is the\r\n    same as the user originally declared them.\r\n  *
  This fixes a minor regression in `singletons-2.7` in which the quality\r\n    of
  `:kind!` output in GHCi would become worse when using promoted type\r\n    families
  generated by Template Haskell.\r\n\r\n  Under certain circumstances, this can be
  a breaking change:\r\n\r\n  * Since more TH-generated promoted functions now have
  type families on\r\n    their right-hand sides, some programs will now require\r\n
  \   `UndecidableInstances` where they didn't before.\r\n  * Certain definitions
  that made use of overlapping patterns, such as\r\n    `natMinus` below, will no
  longer typecheck:\r\n\r\n    ```hs\r\n    $(singletons [d|\r\n      data Nat = Z
  | S Nat\r\n\r\n      natMinus :: Nat -> Nat -> Nat\r\n      natMinus Z     _     =
  Z\r\n      natMinus (S a) (S b) = natMinus a b\r\n      natMinus a     Z     = a\r\n
  \     |])\r\n    ```\r\n\r\n    This can be worked around by avoiding the use of
  overlapping patterns.\r\n    In the case of `natMinus`, this amounts to changing
  the third equation\r\n    to match on its first argument:\r\n\r\n    ```hs\r\n    $(singletons
  [d|\r\n      natMinus :: Nat -> Nat -> Nat\r\n      natMinus Z       _     = Z\r\n
  \     natMinus (S a)   (S b) = natMinus a b\r\n      natMinus a@(S _) Z     = a\r\n
  \     |])\r\n    ```\r\n* The specification for how `singletons` deals with record
  selectors has been\r\n  simplified. Previously, `singletons` would try to avoid
  promoting so-called\r\n  \"naughty\" selectors (those whose types mention existential
  type variables\r\n  that do not appear in the constructor's return type) to top-level
  functions.\r\n  Determing if a selector is naughty is quite challenging in practice,
  as\r\n  determining if a type variable is existential or not in the context of\r\n
  \ Template Haskell is difficult in the general case. As a result, `singletons`\r\n
  \ now adopts the dumb-but-predictable approach of always promoting record\r\n  selectors
  to top-level functions, naughty or not.\r\n\r\n  This means that attempting to promote
  code with a naughty record selector,\r\n  like in the example below, will no longer
  work:\r\n\r\n  ```hs\r\n  $(promote [d|\r\n    data Some :: (Type -> Type) -> Type
  where\r\n      MkSome :: { getSome :: f a } -> Some f\r\n      -- getSome is naughty
  due to mentioning the type variable `a`\r\n    |])\r\n  ```\r\n\r\n  Please open
  an issue if you find this restriction burdensome in practice.\r\n* The `singEqInstanceOnly`
  and `singEqInstancesOnly` functions, which generate\r\n  `SEq` (but not `PEq`) instances,
  have been removed. There is not much point\r\n  in keeping these functions around
  now that `PEq` now longer has a special\r\n  default implementation. Use `singEqInstance{s}`
  instead.\r\n* The Template Haskell machinery will no longer promote `TypeRep` to
  `Type`,\r\n  as this special case never worked properly in the first place.\r\n*
  The Template Haskell machinery will now preserve strict fields in data types\r\n
  \ when generating their singled counterparts.\r\n* Introduce a new `promotedDataTypeOrConName`
  option to\r\n  `Data.Singletons.TH.Options`. Overriding this option can be useful
  in\r\n  situations where one wishes to promote types such as `Nat`, `Symbol`, or\r\n
  \ data types built on top of them. See the\r\n  \"Arrows, `Nat`, `Symbol`, and literals\"
  section of the `README` for more\r\n  information.\r\n* Define a `Quote` instance
  for `OptionsM`. A notable benefit of this instance\r\n  is that it avoids the need
  to explicitly `lift` TH quotes into `OptionsM`.\r\n  Before, you would have to do
  this:\r\n\r\n  ```hs\r\n  import Control.Monad.Trans.Class (lift)\r\n\r\n  withOptions
  defaultOptions\r\n    $ singletons\r\n    $ lift [d| data T = MkT |]\r\n  ```\r\n\r\n
  \ But now, it suffices to simply do this:\r\n\r\n  ```hs\r\n  withOptions defaultOptions\r\n
  \   $ singletons [d| data T = MkT |]\r\n  ```\r\n"
basic-deps:
  base: '>=4.18 && <4.19'
  th-orphans: '>=0.13.11 && <0.14'
  syb: '>=0.4'
  containers: '>=0.5'
  singletons: ==3.0.*
  th-desugar: '>=1.15 && <1.16'
  mtl: '>=2.2.1 && <2.4'
  transformers: '>=0.5.2'
  ghc-boot-th: -any
  template-haskell: '>=2.20 && <2.21'
all-versions:
- '3.0'
- '3.1'
- 3.1.1
- '3.2'
author: Richard Eisenberg <rae@cs.brynmawr.edu>, Jan Stolarek <jan.stolarek@p.lodz.pl>
latest: '3.2'
description-type: markdown
description: "`singletons-th`\r\n===============\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/singletons-th.svg)](http://hackage.haskell.org/package/singletons-th)\r\n\r\n`singletons-th`
  defines Template Haskell functionality that allows\r\n_promotion_ of term-level
  functions to type-level equivalents and\r\n_singling_ functions to dependently typed
  equivalents. This library was\r\noriginally presented in\r\n[_Dependently Typed
  Programming with Singletons_](https://richarde.dev/papers/2012/singletons/paper.pdf),\r\npublished
  at the Haskell Symposium, 2012. See also\r\n[the paper published at Haskell Symposium,
  2014](https://richarde.dev/papers/2014/promotion/promotion.pdf),\r\nwhich describes
  how promotion works in greater detail.\r\n\r\n`singletons-th` generates code that
  relies on bleeding-edge GHC language\r\nextensions. As such, `singletons-th` only
  supports the latest major version\r\nof GHC (currently GHC 9.6). For more information,\r\nconsult
  the `singletons`\r\n[`README`](https://github.com/goldfirere/singletons/blob/master/README.md).\r\n\r\nYou
  may also be interested in the following related libraries:\r\n\r\n* The `singletons`
  library is a small, foundational library that defines\r\n  basic singleton-related
  types and definitions.\r\n* The `singletons-base` library uses `singletons-th` to
  define promoted and\r\n  singled functions from the `base` library, including the
  `Prelude`.\r\n"
license-name: BSD-3-Clause
