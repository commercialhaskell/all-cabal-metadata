homepage: https://github.com/simplex-chat/simplexmq#readme
changelog-type: markdown
hash: 2547cc2d3a718b76936b503f9ef35838bf0eb17e73991a99ecfbbe607fc8c2d6
test-bench-deps:
  bytestring: ==0.10.*
  simple-logger: ==0.1.*
  x509-validation: ==1.6.*
  unliftio: ==0.2.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  time: ==1.9.*
  sqlite-simple: ==0.4.*
  base64-bytestring: '>=1.0 && <1.3'
  hspec: ==2.7.*
  text: ==1.2.*
  composition: ==1.0.*
  hspec-core: ==2.7.*
  tls: '>=1.5.7 && <1.6'
  filepath: ==1.4.*
  asn1-types: ==0.3.*
  direct-sqlite: ==2.3.*
  network: ==3.1.*
  async: ==2.2.*
  websockets: ==0.12.*
  x509-store: ==1.6.*
  constraints: '>=0.12 && <0.14'
  data-default: ==0.7.*
  HUnit: ==1.6.*
  memory: ==0.15.*
  containers: ==0.6.*
  x509: ==1.7.*
  ansi-terminal: '>=0.10 && <0.12'
  unliftio-core: ==0.2.*
  cryptostore: ==0.2.*
  generic-random: '>=1.3 && <1.5'
  iso8601-time: ==0.1.*
  simplexmq: -any
  cryptonite: '>=0.27 && <0.30'
  mtl: ==2.2.*
  network-transport: ==0.5.*
  timeit: ==2.0.*
  attoparsec: ==0.13.*
  transformers: ==0.5.*
  random: '>=1.1 && <1.3'
  asn1-encoding: ==0.9.*
  QuickCheck: ==2.14.*
  http-types: ==0.12.*
  aeson: ==1.5.*
  template-haskell: ==2.16.*
  directory: ==1.3.*
maintainer: chat@simplex.chat
synopsis: SimpleXMQ message broker
changelog: |
  # 1.0.2

  General:
  - Enable TLS 1.3 parameters for TLS handshake (server and client).
  - Switch from hs-tls fork to original repo now that it supports getFinished and getPeerFinished APIs for both TLS 1.2 and TLS 1.3.

  SMP server:
  - Perform TLS handshake in a separate thread per-connection.

  SMP agent:
  - Cease attempts to send HELLO after one week timeout.
  - Coalesce requests to connect to SMP servers, to have 1 connection per server.

  # 1.0.1

  SMP server:
  - Explicitly set line buffering in stdout/stderr to log each line when output is redirected to files.

  # 1.0.0

  Security and privacy improvements:
  - Faster and more secure 2-layer E2E encryption with additional encryption layer between servers and recipients:
    - application messages in each duplex connection (managed by SMP agents - see [overview](https://github.com/simplex-chat/simplexmq/blob/master/protocol/overview-tjr.md)) are encrypted using [double-ratchet algorithm](https://www.signal.org/docs/specifications/doubleratchet/), providing forward secrecy and break-in recovery. This layer uses two Curve448 keys per client for [X3DH key agreement](https://www.signal.org/docs/specifications/x3dh/), SHA512 based HKDFs and AES-GCM AEAD encryption.
    - SMP client messages are additionally E2E encrypted in each SMP queue to avoid cipher-text correlation of messages sent via multiple redundant queues (that will be supported soon). This and the next layer use [NaCl crypto_box algorithm](https://nacl.cr.yp.to/index.html) with XSalsa20Poly1305 cipher and Curve25519 keys for DH key agreement.
    - Messages delivered from the servers to the recipients are additionally encrypted to avoid cipher-text correlation between sent and received messages.
  - To prevent any traffic correlation by content size, SimpleX uses fixed transport block size of 16kb (16384 bytes) with padding on all encryption layers:
    - application messages are padded to 15788 bytes before E2E double-ratchet encryption.
    - messages between SMP clients are padded to 16032 bytes before E2E encryption in each SMP queue.
    - messages from the server to the recipient are padded to padded to 16088 bytes before the additional encryption layer (see above).
  - TLS 1.2+ with tls-unique channel binding in each command to prevent replay attacks.
  - Server identity verification via server offline certificate fingerprints included in SMP server addresses.

  New functionality:
  - Support for notification servers with new SMP commands: `NKEY`/`NID`, `NSUB`/`NMSG`.

  Efficiency improvements:
  - Binary protocol encodings to reduce overhead from circa 15% to approximately 3.7% of transmitted application message size, with only 2.2% overhead for SMP protocol messages.
  - More performant cryptographic algorithms.

  For more information about SimpleX:
  - [SimpleX overview](https://github.com/simplex-chat/simplexmq/blob/master/protocol/overview-tjr.md).
  - [SimpleX chat v1 announcement](https://github.com/simplex-chat/simplex-chat/blob/master/blog/20220112-simplex-chat-v1-released.md).

  # 0.5.2

  - Fix message delivery logic that blocked delivery of all server messages when server per-queue quota exceeded, making it concurrent per SMP queue, not per server.

  # 0.5.1

  - Fix server subscription logic bug that was leading to memory leak / resource exhaustion in some edge cases.

  # 0.5.0

  - No changes in SMP server implementation - it is backwards compatible with v0.4.1
  - SMP agent changes:
    - URI syntax for SMP queues and connection requests.
    - long-term connections links ("contacts") in SMP agent protocol.
    - agent command changes:
      - `REQ` notification and `ACPT` command are used only with long-term connection links.
      - `CONF` notification and `LET` commands are used for normal duplex connections.

  # 0.4.1

  - Include migrations in the package

  # 0.4.0

  - SMP server implementation and [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md) changes:
    - support 3072 bit RSA key size
    - add SMP queue quotas
    - set default transport block size to 4096 bits
    - allow SMP client to change transport block size during transport connection handshake
  - SMP agent implementation and protocol changes:
    - additional connection confirmation step for initiating party
    - automatically resume subscribed duplex connections once transport connection is resumed
    - passing an arbitrary binary information between parties during the duplex connection handshake - can be used to identify parties
    - asynchronous duplex connection handshake - the parties do not have to be online at the same time
    - asynchronous message delivery - the agent does not need transport connection to accept client messages for delivery
    - additional confirmation of message reception from the client to prevent message loss in case of process termination
    - set transport block size to 8192 bits (in the future the agent protocol can allow to have different block sizes for different duplex connections)
    - added client commands and notifications (see [agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)):
      - `REQ` - the notification about joining party establishing connection
      - `ACPT` - the command to accept connection with the joining party
      - `INFO` - the notification with the information from the initiating party
      - `DOWN`/`UP` - the notifications about losing/resuming the connection
      - `ACK` - the command to confirm that the message reception/processing is complete
      - `MID` - the response to `SEND` confirming that the message is accepted by the agent
      - `MERR` - the notification about permanent message delivery error (e.g., `ERR AUTH` indicating that the queue was removed)

  # 0.3.2

  - Support websockets
  - SMP server CLI commands

  # 0.3.1

  - Released to hackage.org
  - SMP agent protocol changes:
    - move SMP server from agent commands NEW/JOIN to agent config
    - send CON to user only when the 1st party responds HELLO
  - Fix REPLY vulnerability
  - Fix transaction busy error

  # 0.3.0

  - SMP encrypted transport over TCP
  - Standard X509/PKCS8 encoding for RSA keys
  - Sign and verify agent messages
  - Verify message integrity based on previous message hash and ID
  - Prevent timing attack allowing to determine if queue exists
  - Only allow correct RSA keys and signature sizes

  # 0.2.0

  - SMP client library
  - SMP agent with E2E encryption

  # 0.1.0

  - SMP protocol server implementation without encryption
basic-deps:
  bytestring: ==0.10.*
  simple-logger: ==0.1.*
  x509-validation: ==1.6.*
  unliftio: ==0.2.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  time: ==1.9.*
  sqlite-simple: ==0.4.*
  base64-bytestring: '>=1.0 && <1.3'
  text: ==1.2.*
  composition: ==1.0.*
  tls: '>=1.5.7 && <1.6'
  filepath: ==1.4.*
  process: ==1.6.*
  asn1-types: ==0.3.*
  direct-sqlite: ==2.3.*
  network: ==3.1.*
  async: ==2.2.*
  websockets: ==0.12.*
  x509-store: ==1.6.*
  constraints: '>=0.12 && <0.14'
  data-default: ==0.7.*
  ini: ==0.4.*
  memory: ==0.15.*
  containers: ==0.6.*
  x509: ==1.7.*
  ansi-terminal: '>=0.10 && <0.12'
  unliftio-core: ==0.2.*
  cryptostore: ==0.2.*
  generic-random: '>=1.3 && <1.5'
  iso8601-time: ==0.1.*
  simplexmq: -any
  cryptonite: '>=0.27 && <0.30'
  mtl: ==2.2.*
  network-transport: ==0.5.*
  attoparsec: ==0.13.*
  transformers: ==0.5.*
  optparse-applicative: '>=0.15 && <0.17'
  random: '>=1.1 && <1.3'
  asn1-encoding: ==0.9.*
  QuickCheck: ==2.14.*
  http-types: ==0.12.*
  aeson: ==1.5.*
  template-haskell: ==2.16.*
  directory: ==1.3.*
all-versions:
- 0.3.1
- 0.3.2
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 1.0.0
- 1.0.2
author: simplex.chat
latest: 1.0.2
description-type: markdown
description: "# SimpleXMQ\n\n[![GitHub build](https://github.com/simplex-chat/simplexmq/workflows/build/badge.svg)](https://github.com/simplex-chat/simplexmq/actions?query=workflow%3Abuild)\n[![GitHub
  release](https://img.shields.io/github/v/release/simplex-chat/simplexmq)](https://github.com/simplex-chat/simplexmq/releases)\n\n\U0001F4E2
  SimpleXMQ v1 is released - with many security, privacy and efficiency improvements,
  new functionality - see [release notes](https://github.com/simplex-chat/simplexmq/releases/tag/v1.0.0).\n\n**Please
  note**: v1 is not backwards compatible, but it has the version negotiation built
  into all protocol layers for forwards compatibility of this version and backwards
  compatibility of the future versions, that will be backwards compatible for at least
  two versions back.\n\nIf you have a server deployed please deploy a new server to
  a new host and retire the previous version once it is no longer used.\n\n## Message
  broker for unidirectional (simplex) queues\n\nSimpleXMQ is a message broker for
  managing message queues and sending messages over public network. It consists of
  SMP server, SMP client library and SMP agent that implement [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md)
  for client-server communication and [SMP agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)
  to manage duplex connections via simplex queues on multiple SMP servers.\n\nSMP
  protocol is inspired by [Redis serialization protocol](https://redis.io/topics/protocol),
  but it is much simpler - it currently has only 10 client commands and 8 server responses.\n\nSimpleXMQ
  is implemented in Haskell - it benefits from robust software transactional memory
  (STM) and concurrency primitives that Haskell provides.\n\n## SimpleXMQ roadmap\n\n-
  SimpleX service protocol and application template - to enable users building services
  and chat bots that work over SimpleX protocol stack. The first such service will
  be a notification service for a mobile app.\n- SMP queue redundancy and rotation
  in SMP agent connections.\n- SMP agents synchronization to share connections and
  messages between multiple agents (it would allow using multiple devices for [simplex-chat](https://github.com/simplex-chat/simplex-chat)).\n\n##
  Components\n\n### SMP server\n\n[SMP server](https://github.com/simplex-chat/simplexmq/blob/master/apps/smp-server/Main.hs)
  can be run on any Linux distribution without any dependencies, including low power/low
  memory devices.\n\nTo initialize the server use `smp-server init` command - it will
  generate keys and certificates for TLS transport. The fingerprint of offline certificate
  is used as part of the server address to protect client/server connection against
  man-in-the-middle attacks: `smp://<fingerprint>@<hostname>[:5223]`.\n\nSMP server
  uses in-memory persistence with an optional append-only log of created queues that
  allows to re-start the server without losing the connections. This log is compacted
  on every server restart, permanently removing suspended and removed queues.\n\nTo
  enable store log, initialize server using `smp-server -l` command, or modify `smp-server.ini`
  created during initialization (uncomment `enable: on` option in the store log section).
  Use `smp-server --help` for other usage tips.\n\n> **Please note:** On initialization
  SMP server creates a chain of two certificates: a self-signed CA certificate (\"offline\")
  and a server certificate used for TLS handshake (\"online\"). **You should store
  CA certificate private key securely and delete it from the server. If server TLS
  credential is compromised this key can be used to sign a new one, keeping the same
  server identity and established connections.** CA private key location by default
  is `/etc/opt/simplex/ca.key`.\n\nSMP server implements [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md).\n\n####
  Running SMP server on MacOS\n\nSMP server requires OpenSSL library for initialization.
  On MacOS OpenSSL library may be replaced with LibreSSL, which doesn't support required
  algorithms. Before initializing SMP server verify you have OpenSSL installed:\n\n```sh\nopenssl
  version\n```\n\nIf it says \"LibreSSL\", please install original OpenSSL:\n\n```sh\nbrew
  update\nbrew install openssl\necho 'PATH=\"/opt/homebrew/opt/openssl@3/bin:$PATH\"'
  >> ~/.zprofile # or follow whatever instructions brew suggests\n. ~/.zprofile #
  or restart your terminal to start a new session\n```\n\nNow `openssl version` should
  be saying \"OpenSSL\". You can now run `smp-server init` to initialize your SMP
  server.\n\n### SMP client library\n\n[SMP client](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Client.hs)
  is a Haskell library to connect to SMP servers that allows to:\n- execute commands
  with a functional API.\n- receive messages and other notifications via STM queue.\n-
  automatically send keep-alive commands.\n\n### SMP agent\n\n[SMP agent library](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Agent.hs)
  can be used to run SMP agent as part of another application and to communicate with
  the agent via STM queues, without serializing and parsing commands and responses.\n\nHaskell
  type [ACommand](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Agent/Protocol.hs)
  represents SMP agent protocol to communicate via STM queues.\n\nSee [simplex-chat](https://github.com/simplex-chat/simplex-chat)
  terminal UI for the example of integrating SMP agent into another application.\n\n[SMP
  agent executable](https://github.com/simplex-chat/simplexmq/blob/master/apps/smp-agent/Main.hs)
  can be used to run a standalone SMP agent process that implements plaintext [SMP
  agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)
  via TCP port 5224, so it can be used via telnet. It can be deployed in private networks
  to share access to the connections between multiple applications and services.\n\n##
  Using SMP server and SMP agent\n\nYou can either run your own SMP server locally
  or deploy using [Linode StackScript](https://cloud.linode.com/stackscripts/748014),
  or try local SMP agent with the deployed servers:\n\n`smp://u2dS9sG8nMNURyZwqASV4yROM28Er0luVTx5X1CsMrU=@smp4.simplex.im`\n\n`smp://hpq7_4gGJiilmz5Rf-CswuU5kZGkm_zOIooSw6yALRg=@smp5.simplex.im`\n\n`smp://PQUV2eL0t7OStZOoAsPEV2QYWt4-xilbakvGUGOItUo=@smp6.simplex.im`\n\nIt's
  the easiest to try SMP agent via a prototype [simplex-chat](https://github.com/simplex-chat/simplex-chat)
  terminal UI.\n\n[<img alt=\"Linode\" src=\"https://raw.githubusercontent.com/simplex-chat/simplexmq/master/img/linode.svg\"
  align=\"right\" width=\"200\">](https://cloud.linode.com/stackscripts/748014)\n\n##
  Deploy SMP server on Linode\n\n\\* You can use free credit Linode offers when [creating
  a new account](https://www.linode.com/) to deploy an SMP server.\n\nDeployment on
  Linode is performed via StackScripts, which serve as recipes for Linode instances,
  also called Linodes. To deploy SMP server on Linode:\n\n- Create a Linode account
  or login with an already existing one.\n- Open [SMP server StackScript](https://cloud.linode.com/stackscripts/748014)
  and click \"Deploy New Linode\".\n- You can optionally configure the following parameters:\n
  \   - SMP Server store log flag for queue persistence on server restart, recommended.\n
  \   - [Linode API token](https://www.linode.com/docs/guides/getting-started-with-the-linode-api#get-an-access-token)
  to attach server address etc. as tags to Linode and to add A record to your 2nd
  level domain (e.g. `example.com` [domain should be created](https://cloud.linode.com/domains/create)
  in your account prior to deployment). The API token access scopes:\n      - read/write
  for \"linodes\"\n      - read/write for \"domains\"\n    - Domain name to use instead
  of Linode IP address, e.g. `smp1.example.com`.\n- Choose the region and plan, Shared
  CPU Nanode with 1Gb is sufficient.\n- Provide ssh key to be able to connect to your
  Linode via ssh. If you haven't provided a Linode API token this step is required
  to login to your Linode and get the server's fingerprint either from the welcome
  message or from the file `/etc/opt/simplex/fingerprint` after server starts. See
  [Linode's guide on ssh](https://www.linode.com/docs/guides/use-public-key-authentication-with-ssh/)
  .\n- Deploy your Linode. After it starts wait for SMP server to start and for tags
  to appear (if a Linode API token was provided). It may take up to 5 minutes depending
  on the connection speed on the Linode. Connecting Linode IP address to provided
  domain name may take some additional time.\n- Get `address` and `fingerprint` either
  from Linode tags (click on a tag and copy it's value from the browser search panel)
  or via ssh.\n- Great, your own SMP server is ready! If you provided FQDN use `smp://<fingerprint>@<fqdn>`
  as SMP server address in the client, otherwise use `smp://<fingerprint>@<ip_address>`.\n\nPlease
  submit an [issue](https://github.com/simplex-chat/simplexmq/issues) if any problems
  occur.\n\n[<img alt=\"DigitalOcean\" src=\"https://raw.githubusercontent.com/simplex-chat/simplexmq/master/img/digitalocean.png\"
  align=\"right\" width=\"300\">](https://marketplace.digitalocean.com/apps/simplex-server)\n\n##
  Deploy SMP server on DigitalOcean\n\n> \U0001F6A7 DigitalOcean snapshot is currently
  not up to date, it will soon be updated \U0001F3D7️\n\n\\* When creating a DigitalOcean
  account you can use [this link](https://try.digitalocean.com/freetrialoffer/) to
  get free credit. (You would still be required either to provide your credit card
  details or make a confirmation pre-payment with PayPal)\n\nTo deploy SMP server
  use [SimpleX Server 1-click app](https://marketplace.digitalocean.com/apps/simplex-server)
  from DigitalOcean marketplace:\n\n- Create a DigitalOcean account or login with
  an already existing one.\n- Click 'Create SimpleX server Droplet' button.\n- Choose
  the region and plan according to your requirements (Basic plan should be sufficient).\n-
  Finalize Droplet creation.\n- Open \"Console\" on your Droplet management page to
  get SMP server fingerprint - either from the welcome message or from `/etc/opt/simplex/fingerprint`.
  Alternatively you can manually SSH to created Droplet, see [DigitalOcean instruction](https://docs.digitalocean.com/products/droplets/how-to/connect-with-ssh/).\n-
  Great, your own SMP server is ready! Use `smp://<fingerprint>@<ip_address>` as SMP
  server address in the client.\n\nPlease submit an [issue](https://github.com/simplex-chat/simplexmq/issues)
  if any problems occur.\n\n> **Please note:** SMP server uses server address as a
  Common Name for server certificate generated during initialization. If you would
  like your server address to be FQDN instead of IP address, you can log in to your
  Droplet and run the commands below to re-initialize the server. Alternatively you
  can use [Linode StackScript](https://cloud.linode.com/stackscripts/748014) which
  allows this parameterization.\n\n```sh\nsmp-server delete\nsmp-server init [-l]
  -n <fqdn>\n```\n\n## SMP server design\n\n![SMP server design](https://raw.githubusercontent.com/simplex-chat/simplexmq/master/design/server.svg)\n\n##
  SMP agent design\n\n![SMP agent design](https://raw.githubusercontent.com/simplex-chat/simplexmq/master/design/agent2.svg)\n\n##
  License\n\n[AGPL v3](https://github.com/simplex-chat/simplexmq/blob/master/LICENSE)\n"
license-name: AGPL-3.0-only
