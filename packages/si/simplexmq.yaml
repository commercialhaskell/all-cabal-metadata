homepage: https://github.com/simplex-chat/simplexmq#readme
changelog-type: markdown
hash: 3d9b84d986df7409839c19455a376722837d52a646cb5d136037cadd0b5a4b76
test-bench-deps:
  bytestring: ==0.10.*
  simple-logger: ==0.1.*
  unliftio: ==0.2.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  time: ==1.9.*
  sqlite-simple: ==0.4.*
  base64-bytestring: '>=1.0 && <1.3'
  hspec: ==2.7.*
  text: ==1.2.*
  composition: ==1.0.*
  hspec-core: ==2.7.*
  filepath: ==1.4.*
  asn1-types: ==0.3.*
  direct-sqlite: ==2.3.*
  network: ==3.1.*
  async: ==2.2.*
  websockets: ==0.12.*
  constraints: '>=0.12 && <0.14'
  HUnit: ==1.6.*
  memory: ==0.15.*
  containers: ==0.6.*
  x509: ==1.7.*
  ansi-terminal: '>=0.10 && <0.12'
  unliftio-core: ==0.2.*
  generic-random: '>=1.3 && <1.5'
  iso8601-time: ==0.1.*
  simplexmq: -any
  cryptonite: '>=0.27 && <0.30'
  mtl: ==2.2.*
  network-transport: ==0.5.*
  timeit: ==2.0.*
  file-embed: ==0.0.14.*
  attoparsec: ==0.13.*
  transformers: ==0.5.*
  random: '>=1.1 && <1.3'
  asn1-encoding: ==0.9.*
  QuickCheck: ==2.14.*
  http-types: ==0.12.*
  template-haskell: ==2.16.*
  directory: ==1.3.*
maintainer: chat@simplex.chat
synopsis: SimpleXMQ message broker
changelog: |
  # 0.5.0

  - No changes in SMP server implementation - it is backwards compatible with v0.4.1
  - SMP agent changes:
    - URI syntax for SMP queues and connection requests.
    - long-term connections links ("contacts") in SMP agent protocol.
    - agent command changes:
      - `REQ` notification and `ACPT` command are used only with long-term connection links.
      - `CONF` notification and `LET` commands are used for normal duplex connections.

  # 0.4.1

  - Include migrations in the package

  # 0.4.0

  - SMP server implementation and [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md) changes:
    - support 3072 bit RSA key size
    - add SMP queue quotas
    - set default transport block size to 4096 bits
    - allow SMP client to change transport block size during transport connection handshake
  - SMP agent implementation and protocol changes:
    - additional connection confirmation step for initiating party
    - automatically resume subscribed duplex connections once transport connection is resumed
    - passing an arbitrary binary information between parties during the duplex connection handshake - can be used to identify parties
    - asynchronous duplex connection handshake - the parties do not have to be online at the same time
    - asynchronous message delivery - the agent does not need transport connection to accept client messages for delivery
    - additional confirmation of message reception from the client to prevent message loss in case of process termination
    - set transport block size to 8192 bits (in the future the agent protocol can allow to have different block sizes for different duplex connections)
    - added client commands and notifications (see [agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)):
      - `REQ` - the notification about joining party establishing connection
      - `ACPT` - the command to accept connection with the joining party
      - `INFO` - the notification with the information from the initiating party
      - `DOWN`/`UP` - the notifications about losing/resuming the connection
      - `ACK` - the command to confirm that the message reception/processing is complete
      - `MID` - the response to `SEND` confirming that the message is accepted by the agent
      - `MERR` - the notification about permanent message delivery error (e.g., `ERR AUTH` indicating that the queue was removed)

  # 0.3.2

  - Support websockets
  - SMP server CLI commands

  # 0.3.1

  - Released to hackage.org
  - SMP agent protocol changes:
    - move SMP server from agent commands NEW/JOIN to agent config
    - send CON to user only when the 1st party responds HELLO
  - Fix REPLY vulnerability
  - Fix transaction busy error

  # 0.3.0

  - SMP encrypted transport over TCP
  - Standard X509/PKCS8 encoding for RSA keys
  - Sign and verify agent messages
  - Verify message integrity based on previous message hash and ID
  - Prevent timing attack allowing to determine if queue exists
  - Only allow correct RSA keys and signature sizes

  # 0.2.0

  - SMP client library
  - SMP agent with E2E encryption

  # 0.1.0

  - SMP protocol server implementation without encryption
basic-deps:
  bytestring: ==0.10.*
  simple-logger: ==0.1.*
  unliftio: ==0.2.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  time: ==1.9.*
  sqlite-simple: ==0.4.*
  base64-bytestring: '>=1.0 && <1.3'
  text: ==1.2.*
  composition: ==1.0.*
  filepath: ==1.4.*
  asn1-types: ==0.3.*
  direct-sqlite: ==2.3.*
  network: ==3.1.*
  async: ==2.2.*
  websockets: ==0.12.*
  constraints: '>=0.12 && <0.14'
  ini: ==0.4.*
  memory: ==0.15.*
  containers: ==0.6.*
  x509: ==1.7.*
  ansi-terminal: '>=0.10 && <0.12'
  unliftio-core: ==0.2.*
  cryptostore: ==0.2.*
  generic-random: '>=1.3 && <1.5'
  iso8601-time: ==0.1.*
  simplexmq: -any
  cryptonite: '>=0.27 && <0.30'
  mtl: ==2.2.*
  network-transport: ==0.5.*
  file-embed: ==0.0.14.*
  attoparsec: ==0.13.*
  transformers: ==0.5.*
  optparse-applicative: '>=0.15 && <0.17'
  random: '>=1.1 && <1.3'
  asn1-encoding: ==0.9.*
  QuickCheck: ==2.14.*
  http-types: ==0.12.*
  template-haskell: ==2.16.*
  directory: ==1.3.*
all-versions:
- 0.3.1
- 0.3.2
- 0.4.0
- 0.4.1
- 0.5.0
author: simplex.chat
latest: 0.5.0
description-type: markdown
description: "# SimpleXMQ\n\n[![GitHub build](https://github.com/simplex-chat/simplexmq/workflows/build/badge.svg)](https://github.com/simplex-chat/simplexmq/actions?query=workflow%3Abuild)\n[![GitHub
  release](https://img.shields.io/github/v/release/simplex-chat/simplexmq)](https://github.com/simplex-chat/simplexmq/releases)\n\n##
  Message broker for unidirectional (simplex) queues\n\nSimpleXMQ is a message broker
  for managing message queues and sending messages over public network. It consists
  of SMP server, SMP client library and SMP agent that implement [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md)
  for client-server communication and [SMP agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)
  to manage duplex connections via simplex queues on multiple SMP servers.\n\nSMP
  protocol is inspired by [Redis serialization protocol](https://redis.io/topics/protocol),
  but it is much simpler - it currently has only 8 client commands and 6 server responses.\n\nSimpleXMQ
  is implemented in Haskell - it benefits from robust software transactional memory
  (STM) and concurrency primitives that Haskell provides.\n\n## SimpleXMQ roadmap\n\n-
  SMP queue redundancy and rotation in SMP agent duplex connections.\n- SMP agents
  synchronization to share connections and messages between multiple agents (it would
  allow using multiple devices for [simplex-chat](https://github.com/simplex-chat/simplex-chat)).\n-
  Streams - high performance message queues. See [Streams RFC](https://github.com/simplex-chat/simplexmq/blob/master/rfcs/2021-02-28-streams.md)
  for details.\n\n## Components\n\n### SMP server\n\n[SMP server](https://github.com/simplex-chat/simplexmq/blob/master/apps/smp-server/Main.hs)
  can be run on any Linux distribution without any dependencies. It uses in-memory
  persistence with an optional append-only log of created queues that allows to re-start
  the server without losing the connections. This log is compacted on every server
  restart, permanently removing suspended and removed queues.\n\nTo enable the queue
  logging, uncomment `enable: on` option in `smp-server.ini` configuration file that
  is created the first time the server is started.\n\nOn the first start the server
  generates an RSA key pair for encrypted transport handshake and outputs hash of
  the public key every time it runs - this hash should be used as part of the server
  address: `<hostname>:5223#<key hash>`.\n\nSMP server implements [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md).\n\n###
  SMP client library\n\n[SMP client](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Client.hs)
  is a Haskell library to connect to SMP servers that allows to:\n- execute commands
  with a functional API.\n- receive messages and other notifications via STM queue.\n-
  automatically send keep-alive commands.\n\n### SMP agent\n\n[SMP agent library](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Agent.hs)
  can be used to run SMP agent as part of another application and to communicate with
  the agent via STM queues, without serializing and parsing commands and responses.\n\nHaskell
  type [ACommand](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Agent/Protocol.hs)
  represents SMP agent protocol to communicate via STM queues.\n\nSee [simplex-chat](https://github.com/simplex-chat/simplex-chat)
  terminal UI for the example of integrating SMP agent into another application.\n\n[SMP
  agent executable](https://github.com/simplex-chat/simplexmq/blob/master/apps/smp-agent/Main.hs)
  can be used to run a standalone SMP agent process that implements plaintext [SMP
  agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)
  via TCP port 5224, so it can be used via telnet. It can be deployed in private networks
  to share access to the connections between multiple applications and services.\n\n##
  Using SMP server and SMP agent\n\nYou can either run your own SMP server locally
  or deploy using [Linode StackScript](#deploy-smp-server-on-linode), or try local
  SMP agent with the deployed servers:\n\n`smp2.simplex.im#z5W2QLQ1Br3Yd6CoWg7bIq1bHdwK7Y8bEiEXBs/WfAg=`
  (London, UK)\n`smp3.simplex.im#nxc7HnrnM8dOKgkMp008ub/9o9LXJlxlMrMpR+mfMQw=` (Fremont,
  CA)\n\nIt's the easiest to try SMP agent via a prototype [simplex-chat](https://github.com/simplex-chat/simplex-chat)
  terminal UI.\n\n[<img alt=\"Linode\" src=\"https://raw.githubusercontent.com/simplex-chat/simplexmq/master/img/linode.svg\"
  align=\"right\" width=\"200\">](https://cloud.linode.com/stackscripts/748014)\n\n##
  Deploy SMP server on Linode\n\nYou can get Linode [free credits](https://www.linode.com/lp/affiliate-referral/?irclickid=02-QkdTEpxyLW0W0EOSREQreUkB2DtzGE2lGTE0&irgwc=1&utm_source=impact)
  to deploy SMP server.\n\nDeployment on [Linode](https://www.linode.com/) is performed
  via StackScripts, which serve as recipes for Linode instances, also called Linodes.
  To deploy SMP server on Linode:\n\n- Create a Linode account or login with an already
  existing one.\n- Open [SMP server StackScript](https://cloud.linode.com/stackscripts/748014)
  and click \"Deploy New Linode\".\n- You can optionally configure the following parameters:\n
  \   - [SMP Server store log](#SMP-server) flag for queue persistence on server restart
  (recommended).\n    - [Linode API token](https://www.linode.com/docs/guides/getting-started-with-the-linode-api#get-an-access-token)
  for attaching server info as tags to Linode (server address, public key hash, version)
  and adding A record to your 2nd level domain (Note: 2nd level e.g. `example.com`
  domain should be [created](https://cloud.linode.com/domains/create) in your account
  prior to deployment). The API token access scope should be read/write access to
  \"linodes\" (to update linode tags - you need them), and \"domains\" (to add A record
  for the 3rd level domain, e.g. `smp`).\n    - Domain name to use instead of Linode
  ip address, e.g. `smp.example.com`.\n- Choose the region and plan according to your
  requirements (for regular use Shared CPU Nanode should be sufficient).\n- Provide
  ssh key to be able to connect to your Linode via ssh. This step is required if you
  haven't provided a Linode API token, because you will need to login to your Linode
  and get a public key hash either from the welcome message or from the file `/etc/opt/simplex/pub_key_hash`
  on your Linode after SMP server starts.\n- Deploy your Linode. After it starts wait
  for SMP server to start and for tags to appear (if a Linode API token was provided).
  It may take up to 5 minutes depending on the connection speed on the Linode. Connecting
  Linode IP address to provided domain name may take some additional time.\n- Get
  `hostname` and `hash` either from Linode tags (click on a tag and copy it's value
  from the browser search panel) or via ssh. Linode has a good [guide](https://www.linode.com/docs/guides/use-public-key-authentication-with-ssh/)
  about ssh.\n- Great, your own SMP server is ready! Use `address#hash` as SMP server
  address in the client.\n\nPlease submit an [issue](https://github.com/simplex-chat/simplexmq/issues)
  if any problems occur.\n\n[<img alt=\"DigitalOcean\" src=\"https://raw.githubusercontent.com/simplex-chat/simplexmq/master/img/digitalocean.png\"
  align=\"right\" width=\"300\">](https://marketplace.digitalocean.com/apps/simplex-server)\n\n##
  Deploy SMP server on DigitalOcean\n\nYou can deploy SMP server using [SimpleX Server
  1-click app](https://marketplace.digitalocean.com/apps/simplex-server) from DigitalOcean
  marketplace:\n\n- Create a DigitalOcean account or login with an already existing
  one.\n- Click 'Create SimpleX server Droplet' button.\n- Choose the region and plan
  according to your requirements (cheapest Regular plan should be sufficient).\n-
  Provide ssh key and confirm Droplet creation. \n- SSH to created Droplet (`ssh root@<droplet_ip_address>`)
  to get SMP server public key hash - either from the welcome message or from `/etc/opt/simplex/pub_key_hash`.
  DigitalOcean has a good guide on [how to login to Droplet via ssh](https://docs.digitalocean.com/products/droplets/how-to/connect-with-ssh/).\n-
  Great, your own SMP server is ready! Use `ip_address#hash` as SMP server address
  in the client.\n\nPlease submit an [issue](https://github.com/simplex-chat/simplexmq/issues)
  if any problems occur.\n\n## SMP server design\n\n![SMP server design](https://raw.githubusercontent.com/simplex-chat/simplexmq/master/design/server.svg)\n\n##
  SMP agent design\n\n![SMP agent design](https://raw.githubusercontent.com/simplex-chat/simplexmq/master/design/agent2.svg)\n\n##
  License\n\n[AGPL v3](https://github.com/simplex-chat/simplexmq/blob/master/LICENSE)\n"
license-name: AGPL-3.0-only
