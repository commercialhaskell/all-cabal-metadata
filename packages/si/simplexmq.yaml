homepage: https://github.com/simplex-chat/simplexmq#readme
changelog-type: markdown
hash: 520eb73ef466bcd18c3de3e42532bdda45e76ebff1c542f74778d2d0aace46be
test-bench-deps:
  bytestring: ==0.10.*
  simple-logger: ==0.1.*
  unliftio: ==0.2.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  time: ==1.9.*
  sqlite-simple: ==0.4.*
  base64-bytestring: '>=1.0 && <1.3'
  hspec: ==2.7.*
  text: ==1.2.*
  hspec-core: ==2.7.*
  filepath: ==1.4.*
  asn1-types: ==0.3.*
  network: ==3.1.*
  async: ==2.2.*
  websockets: ==0.12.*
  HUnit: ==1.6.*
  memory: ==0.15.*
  containers: ==0.6.*
  x509: ==1.7.*
  ansi-terminal: ==0.10.*
  unliftio-core: ==0.2.*
  generic-random: ==1.3.*
  iso8601-time: ==0.1.*
  simplexmq: -any
  cryptonite: ==0.27.*
  mtl: ==2.2.*
  network-transport: ==0.5.*
  timeit: ==2.0.*
  attoparsec: ==0.13.*
  transformers: ==0.5.*
  random: ==1.1.*
  asn1-encoding: ==0.9.*
  QuickCheck: ==2.14.*
  template-haskell: ==2.16.*
  directory: ==1.3.*
maintainer: chat@simplex.chat
synopsis: SimpleXMQ message broker
changelog: |
  # 0.3.2

  - Support websockets
  - SMP server CLI commands

  # 0.3.1

  - Released to hackage.org
  - SMP agent protocol changes:
    - move SMP server from agent commands NEW/JOIN to agent config
    - send CON to user only when the 1st party responds HELLO
  - Fix REPLY vulnerability
  - Fix transaction busy error

  # 0.3.0

  - SMP encrypted transport over TCP
  - Standard X509/PKCS8 encoding for RSA keys
  - Sign and verify agent messages
  - Verify message integrity based on previous message hash and ID
  - Prevent timing attack allowing to determine if queue exists
  - Only allow correct RSA keys and signature sizes

  # 0.2.0

  - SMP client library
  - SMP agent with E2E encryption

  # 0.1.0

  - SMP protocol server implementation without encryption
basic-deps:
  bytestring: ==0.10.*
  simple-logger: ==0.1.*
  unliftio: ==0.2.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  time: ==1.9.*
  sqlite-simple: ==0.4.*
  base64-bytestring: '>=1.0 && <1.3'
  text: ==1.2.*
  filepath: ==1.4.*
  asn1-types: ==0.3.*
  network: ==3.1.*
  async: ==2.2.*
  websockets: ==0.12.*
  ini: ==0.4.*
  memory: ==0.15.*
  containers: ==0.6.*
  x509: ==1.7.*
  ansi-terminal: ==0.10.*
  unliftio-core: ==0.2.*
  cryptostore: ==0.2.*
  generic-random: ==1.3.*
  iso8601-time: ==0.1.*
  simplexmq: -any
  cryptonite: ==0.27.*
  mtl: ==2.2.*
  network-transport: ==0.5.*
  attoparsec: ==0.13.*
  transformers: ==0.5.*
  optparse-applicative: ==0.15.*
  random: ==1.1.*
  asn1-encoding: ==0.9.*
  QuickCheck: ==2.14.*
  template-haskell: ==2.16.*
  directory: ==1.3.*
all-versions:
- 0.3.1
- 0.3.2
author: simplex.chat
latest: 0.3.2
description-type: markdown
description: "# SimpleXMQ\n\n[![GitHub build](https://github.com/simplex-chat/simplexmq/workflows/build/badge.svg)](https://github.com/simplex-chat/simplexmq/actions?query=workflow%3Abuild)\n[![GitHub
  release](https://img.shields.io/github/v/release/simplex-chat/simplexmq)](https://github.com/simplex-chat/simplexmq/releases)\n\n##
  Message broker for unidirectional (simplex) queues\n\nSimpleXMQ is a message broker
  for managing message queues and sending messages over public network. It consists
  of SMP server, SMP client library and SMP agent that implement [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md)
  for client-server communication and [SMP agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)
  to manage duplex connections via simplex queues on multiple SMP servers.\n\nSMP
  protocol is inspired by [Redis serialization protocol](https://redis.io/topics/protocol),
  but it is much simpler - it currently has only 8 client commands and 6 server responses.\n\nSimpleXMQ
  is implemented in Haskell - it benefits from robust software transactional memory
  (STM) and concurrency primitives that Haskell provides.\n\n## SimpleXMQ roadmap\n\n-
  Streams - high performance message queues. See [Streams RFC](https://github.com/simplex-chat/simplexmq/blob/master/rfcs/2021-02-28-streams.md)
  for details.\n- \"Small\" connection groups, when each message will be sent by the
  SMP agent to multiple connections with a single client command. See [Groups RFC](https://github.com/simplex-chat/simplexmq/blob/master/rfcs/2021-03-18-groups.md)
  for details.\n- SMP agents cluster to share connections and message management by
  multiple agents (for example, it would enable multi-device use for [simplex-chat](https://github.com/simplex-chat/simplex-chat)).\n-
  SMP queue redundancy and rotation in SMP agent duplex connections.\n- \"Large\"
  groups design and implementation. \n\n## Components\n\n### SMP server\n\n[SMP server](https://github.com/simplex-chat/simplexmq/blob/master/apps/smp-server/Main.hs)
  can be run on any Linux distribution without any dependencies. It uses in-memory
  persistence with an optional append-only log of created queues that allows to re-start
  the server without losing the connections. This log is compacted on every server
  restart, permanently removing suspended and removed queues.\n\nTo enable the queue
  logging, uncomment `enable: on` option in `smp-server.ini` configuration file that
  is created the first time the server is started.\n\nOn the first start the server
  generates an RSA key pair for encrypted transport handshake and outputs hash of
  the public key every time it runs - this hash should be used as part of the server
  address: `<hostname>:5223#<key hash>`.\n\nSMP server implements [SMP protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/simplex-messaging.md).\n\n###
  SMP client library\n\n[SMP client](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Client.hs)
  is a Haskell library to connect to SMP servers that allows to:\n- execute commands
  with a functional API.\n- receive messages and other notifications via STM queue.\n-
  automatically send keep-alive commands.\n\n### SMP agent\n\n[SMP agent library](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Agent.hs)
  can be used to run SMP agent as part of another application and to communicate with
  the agent via STM queues, without serializing and parsing commands and responses.\n\nHaskell
  type [ACommand](https://github.com/simplex-chat/simplexmq/blob/master/src/Simplex/Messaging/Agent/Protocol.hs)
  represents SMP agent protocol to communicate via STM queues.\n\nSee [simplex-chat](https://github.com/simplex-chat/simplex-chat)
  terminal UI for the example of integrating SMP agent into another application.\n\n[SMP
  agent executable](https://github.com/simplex-chat/simplexmq/blob/master/apps/smp-agent/Main.hs)
  can be used to run a standalone SMP agent process that implements plaintext [SMP
  agent protocol](https://github.com/simplex-chat/simplexmq/blob/master/protocol/agent-protocol.md)
  via TCP port 5224, so it can be used via telnet. It can be deployed in private networks
  to share access to the connections between multiple applications and services.\n\n##
  Using SMP server and SMP agent\n\nYou can either run SMP server locally or try local
  SMP agent with the deployed demo server:\n\n`smp1.simplex.im:5223#pLdiGvm0jD1CMblnov6Edd/391OrYsShw+RgdfR0ChA=`\n\nIt's
  the easiest to try SMP agent via a prototype [simplex-chat](https://github.com/simplex-chat/simplex-chat)
  terminal UI.\n\n## SMP server design\n\n![SMP server design](https://raw.githubusercontent.com/simplex-chat/simplexmq/master/design/server.svg)\n\n##
  SMP agent design\n\n![SMP agent design](https://raw.githubusercontent.com/simplex-chat/simplexmq/master/design/agent2.svg)\n\n##
  License\n\n[AGPL v3](https://github.com/simplex-chat/simplexmq/blob/master/LICENSE)\n"
license-name: AGPL-3.0-only
