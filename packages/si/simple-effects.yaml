all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.8.0.2
- 0.9.0.1
- 0.10.0.0
- 0.10.0.1
- 0.10.0.2
- 0.11.0.0
- 0.11.0.1
- 0.12.0.0
- 0.13.0.0
author: Luka Horvat
basic-deps:
  MonadRandom: '>=0'
  array: '>=0'
  async: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  exceptions: '>=0'
  list-t: '>=0'
  monad-control: '>=1.0 && <1.1'
  mtl: '>=0'
  text: '>=0'
  transformers: '>=0'
  transformers-base: '>=0.4 && <0.5'
changelog: "# 0.13.0.0\r\n* Support for unique parametrized effects.\r\n    * Each
  effect can provide an extra constrain on the monad in which it executes\r\n    *
  One of the applications is a class that provides an extra functional dependency
  on some of the effects parameters\r\n* State effect now has a functional dependency
  on the parameter meaning you can only have one state effect in a computation, but
  the inferrence is much better\r\n* Module for working with newtypes of effects\r\n
  \   * Allows you to tag a certain effect with a new name so multiples of the same
  effect can be used without interaction\r\n    * This lets you recover the ability
  to use multiple state effects in the same computation\r\n* Yield effect also gets
  a functional dependency\r\n* Async effect gets a parameter with a functional dependency
  enabling different implementations to use different thread representations\r\n*
  Removed Parallel module. Pretty much covered by Async\r\n* Ability to cancel thread
  and check if they're done with Async\r\n* Better errors when failing to derive an
  Effect instance\r\n* Better docs\r\n"
changelog-type: markdown
description: |
  Some of the things you can do with this package:

  * Declare and check which side-effects your function uses
  * Dependency injection
  * Test effectful code
  * Avoid the \(n \times k\) instance problem
  * Define custom effects with very little programming overhead

  === Declare and check which side-effects your function uses

  The library provides a nice, declarative way of specifying exactly what your monadic function
  does.

  > getProductAndWriteToFile :: MonadEffects '[Database, FileSystem] m => ProductId -> FilePath -> m ()

  This way you can be sure that your @harmlessFunction@ doesn't do unexpected things behind your
  back. The compiler makes sure that all the effects are accounted for in the function's type.

  === Dependency injection

  Functions are not tied to any specific implementation of an effect meaning you can swap out
  different implementations without changing your code. Code like this

  > myFunction :: MonadEffects '[Time, Logging] m => m ()
  > myFunction = do
  >     t <- getCurrentTime
  >     log (show t)

  is effectively the same as

  > myFunction :: Monad m => m ZonedTime -> (String -> m ()) -> m ()
  > myFunction getCurrentTime log = do
  >     t <- getCurrentTime
  >     log (show t)

  but the library does all the parameter passing for you. And just like you'd be able to
  provide any implementation as @getCurrentTime@ and @log@ parameters you can do the same with
  simple effects.

  > myFunction
  >     & implement (TimeMethods someCurrentTimeImplementation)
  >     & implement (LoggingMethods someLoggingImplementation)

  === Test effectful code

  Easily provide dummy implementations of your effects to prevent missle-launching during testing.

  > myEffectfulFunction :: MonadEffects '[Database, Missiles] m => m Int
  >
  > main = do
  >     conn <- connectToDb "connStr"
  >     myEffectfulFunction
  >         & implement (realDatabase conn)
  >         & implement (MissilesMethods (launchMissles "access codes"))
  >
  > spec = do
  >     res <- myEffectfulFunction
  >         & implement (fakeDb Map.empty)
  >         & implement (MissilesMethods (print "Totally launching missiles"))
  >     when (res /= 42) (error "Test failed!")

  === Avoid the \(n \times k\) instance problem

  Any effect you define is automatically liftable through any transformer. Most @MonadX@ instances
  you'd write would look like @func a b c = lift (func a b c)@, so why would you have to write them
  yourself? @simple-effects@ does it for you using an overlappable instance.

  What about effects that aren't that simple? Each effect can specify a constraint on the transformers
  that it can be lifted through and a mechanism that does the lifting. So you get all the benefits
  of automatic lifting of simple effects and retain all of the flexibility of complex ones.

  === Define custom effects with very little programming overhead

  Lets say we need a way to get coordinates for some address. Here's how we'd declare that
  functionality.

  @
  data Geolocation m = GeolocationMethods
  &#32;   &#x7b; _getLocation :: Address -> m Coordinates &#x7d;
  &#32;   deriving (Generic, Effect)
  getLocation :: MonadEffect Geolocation m => Address -> m Coordinates
  getLocation = _getLocation effect
  @

  That's all you need to start using your effect in functions.

  > getUsersLocation :: (MonadEffect Geolocation m, MonadIO m) => m Coordinates
  > getUsersLocation = do
  >     liftIO $ putStrLn "Please enter your address:"
  >     addr <- liftIO readLn
  >     getLocation addr

  ==== <docs/Tutorial-T1_Introduction.html Check out the tutorial modules for more details>
description-type: haddock
hash: 357ba115eccff7f2b32a530b053366b18e974c2bf4b8703d1bc4f4468950ec97
homepage: https://gitlab.com/LukaHorvat/simple-effects
latest: 0.13.0.0
license-name: BSD-3-Clause
maintainer: luka.horvat9@gmail.com
synopsis: A simple effect system that integrates with MTL
test-bench-deps:
  base: '>=4.7 && <5'
  criterion: '>=0'
  mtl: '>=0'
  simple-effects: '>=0'
  transformers: '>=0'
