homepage: https://github.com/juhp/simple-cmd
changelog-type: markdown
hash: f23be118c857c11804624d28b2e3a4de4c71cb9218b539aede94c839f7ef5807
test-bench-deps:
  base: <5.0
  hspec: -any
  simple-cmd: -any
maintainer: Jens Petersen <juhpetersen@gmail.com>
synopsis: Simple String-based process commands
changelog: |
  # Version history for simple-cmd

  ## 0.2.4 (2022-03-27)
  - error' and warning are now strict
  - pipeBool: return False if either end fails
  - add filesWithExtension and fileWithExtension
  - initial basic testsuite

  ## 0.2.3 (2020-12-20)
  - most commands now use removeTrailingNewline
  - cmdFull: wrapper of readProcessWithExitCode
  - cmdStderrToStdoutIn: like cmdStderrToStdout but reads a String
  - pipe3 connects 3 commands

  ## 0.2.2 (2020-06-17)
  - grep: no longer errors for no match
  - add cmdStderrToStdout: redirects stderr to stdout
  - add gitBool
  - define gitBranch using "git rev-parse" (internal change)
  - now export ifM and whenM from extra

  ## 0.2.1 (2019-12-12)
  - add cmdTry_: only runs if available
  - add ifM and whenM
  - add needProgram

  ## 0.2.0 (2019-06-03)
  - add warning command
  - API change: sudo and sudo_
  - add shellBool
  - add pipe, pipe_, pipeBool, pipeFile_, pipe3
  - quoteCmd uses showCommandForUser

  ## 0.1.4 (2019-04-08)
  - export error'
  - add cmdLog (deprecates cmdlog)

  ## 0.1.3.1 (2019-03-15)
  - sudo: ignored for root or when no sudo installed

  ## 0.1.3 -- 2019-02-20
  - gitDiffQuiet
  - fix rwGitDir regexp
  - use errorWithoutStackTrace

  ## 0.1.2 -- 2018-10-28
  - grep
  - improve haddock documentation

  ## 0.1.1 -- 2018-10-02
  - cmdLines
  - Git: grepGitConfig
  - new Rpm: rpmspec

  ## 0.1.0.0  -- 2018-09-13

  - Initial release, providing:
    cmd, cmd_, cmdBool, cmdMaybe, cmdStdIn, cmdlog, cmdN,
    cmdIgnoreErr, cmdQuiet, cmdSilent, cmdStdErr,
    egrep_, grep_, logMsg,
    removePrefix, removeStrictPrefix, removeSuffix,
    shell, shell_, sudo, (+-+)
  - A few git commands

  # Local Variables:
  # mode: text
  # End:
basic-deps:
  extra: -any
  unix: -any
  base: <5
  filepath: -any
  process: '>=1.4.3.0'
  directory: '>=1.2.5.0'
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.4
- 0.2.0
- 0.2.0.1
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Jens Petersen <juhpetersen@gmail.com>
latest: 0.2.4
description-type: markdown
description: |
  [![Hackage](http://img.shields.io/hackage/v/simple-cmd.png)](http://hackage.haskell.org/package/simple-cmd)
  [![Stackage LTS](http://stackage.org/package/simple-cmd/badge/lts)](http://stackage.org/lts/package/simple-cmd)
  [![Stackage Nightly](http://stackage.org/package/simple-cmd/badge/nightly)](http://stackage.org/nightly/package/simple-cmd)

  # simple-cmd

  Some simple String wrappers of `readProcess`, `readProcessWithExitCode`,
  `rawSystem` from the Haskell `process` library.

  ## Usage

  ```haskell
  import SimpleCmd
  ```

  ```haskell
  cmd_ :: String -> [String] -> IO ()
  ```
  outputs to stdout. For example

  ```haskell
  cmd_ "echo" ["Hello"]
  cmd_ "git" ["clone", url]
  ```
  This can shortened to `git_ "clone" [url]`.

  ```haskell
  cmd :: String -> [String] -> IO String
  ```
  returns stdout as a `String`. eg

  ```haskell
  date <- cmd "date" []
  ```

  There are also `cmdBool`, `cmdMaybe`, `cmdList`, `shell`, and others.

  Simple pipes are also supported:
  ```haskell
  pipe_ ("echo",["hello"]) ("grep",["ello"])
  ```
  `pipeBool` returns True if both commands succeed.

  Other examples:
  ```haskell
  gitBranch :: IO String
  grep_ pat file :: IO Bool
  sudo_ c args :: IO ()
  ```

  See the library documentation for more details.
license-name: BSD-3-Clause
