all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.4
- 0.1.1.5
- 0.1.1.6
- 0.2.0.1
author: edwardwas
basic-deps:
  adjunctions: '>=4.3 && <4.5'
  aeson: '>=1.2 && <1.5'
  base: '>=4.9 && <4.13'
  comonad: '>=5.0 && <5.1'
  constraints: '>=0.9 && <0.11'
  distributive: '>=0.5 && <1'
  generics-sop: '>=0.3 && <0.6'
  lens: '>=4.15 && <5'
  mtl: '>=2.2.2 && <2.3'
  random: '>=1.1 && <1.2'
  vector: '>=0.12 && <0.13'
  vector-space: '>=0.10 && <2'
changelog: "# Revision history for sized-grid\n\n## 0.2.0.0 -- NOT PUBLISHED\n\n*
  _WrappedCoord is now an Iso\n\n* IsCoord is now of kind Nat -> *. Introduced IsCoordLifted.
  This is unfortunatly a breaking change\n\n## 0.1.1.6 -- 2018-11-21\n\n* Reduced
  bound on generics-sop\n\n## 0.1.1.5 -- 2018-11-20\n\n* Changed test suite to use
  QuickCheck\n\n## 0.1.1.3 -- 2018-11-14\n\n* Version bumps\n\n## 0.1.1.0 -- 2018-05-10\n\n*
  Added Field instances for coord\n* Added ways of manipulating coords\n\n## 0.1.0.0
  \ -- 2018-04-18\n\n* First version. \n"
changelog-type: markdown
description: "[![Build Status](https://travis-ci.org/edwardwas/sized-grid.svg?branch=master)](https://travis-ci.org/edwardwas/sized-grid)\n\n![Hackage](https://img.shields.io/hackage/v/sized-grid)\n\nsized-grid\n===========\n\nA
  way of working with grids in Haskell with size encoded at the type level.\n\nQuick
  tutorial\n========\n\nThe core datatype of this library is `Grid (cs :: '[k]) (a
  :: *)`. `cs` is a type level list of coordinate types. We could use a single type
  level number here, but by using different types we can say what happened when we
  move outside the bounds of a grid. There are three different coordinate types provided.\n\n*
  `Ordinal n`: An ordinal can be an integral number between 0 and n - 1. As numbers
  outside the grid are not possible, this has the most restrictive API. One can convert
  between an Ordinal and a number of ordinalToNum and numToOrdinal.\n\n* `HardWrap
  n`: Like Oridnal, HardWrap can only hold intergral numbers between 0 and n - 1,
  but it allows a more permissive API by clamping values outside of its range. It
  is an instance of `Semigroup` and `Monoid`, where `mempty` is 0 and `<>` is addition.
  \n\n* `Periodic n`: This is the most permissive. When a value is generated outside
  the given range, it wraps that around using modular arithmetic. Is is an instance
  of `Semigroup` and `Monoid` like `HardWrap`, but also of `AdditiveGroup` allowing
  negation.\n\n`HardWrap` and `Periodic` are both instances of `AffineSpace`, with
  their `Diff` being `Integer`. This means there are many occasions where one doesn't
  have to work directly with these values (which can be cumbersome) and can instead
  work with their differences as regular numbers.\n\nThe last type value of `Grid`
  is the type of each element. \n\nThe other main type is `Coord cs`, where `cs` is,
  again, a type level list of coordinate types. For example, `Coord '[Periodic 3,
  HardWrap 4]` is a coordinate in a 3 by 4 2D space. The different types (`Periodic`
  and `HardWrap`) tell how to handle combining theses different numbers. `Coord cs`
  is an instance of `Semigroup`, `Monoid` and `AdditiveGroup` as long as each of the
  coordinates is also an instance of that typeclass. `Coord` is also an instance of
  of `AffineSpace`, where `Diff` is a n-tuple, meaning we can pattern match and do
  all sorts of nice things.\n\nFor working directly with `Coord`s, one can construct
  them with `singleCoord` and `appendCoord` and consume and update them with `coordHead`
  and `coordTail`. They are also instances of `FieldN` from lens, allowing one to
  directly update or get a certain dimension.\n\nThere is a deliberately small number
  of functions that work over `Grid`: we instead opt for using typeclasses to create
  the required functionality. `Grid` is an instance of the following types (with some
  required constraints):\n\n* `Functor`: Update all values in the grid with the same
  function\n* `Applicative`: As the size of the grid is statically known, `pure` just
  creates a grid with the same element at each point. `<*>` combines the grids point
  wise.\n* `Monad`: I'm not sure if there is much of a need for this, but an instance
  exists.  \n* `Foldable`: Combine each element of the grid\n* `Traverse`: Apply an
  applicative function over the grid\n* `IndexedFunctor`, `IndexedFoldable` and `IndexedTraversable`:
  Like `Functor`, `Foldable` and `Traversable`, but with access to the position at
  each point. These are from the lens package\n* `Distributive`: Like `Traversable`,
  but the other way round. Allows us to put a functor inside the grid\n* `Representable`:
  `Grid cs a` is isomorphic `Coord cs -> a`, so we can `tabulate` and `index` to make
  this conversion\n\nWe also have a `FocusedGrid` type, which is like `Grid` but has
  a certain focused position. This means that we lose many instances, but we gain
  `Comonad` and `ComonadStore`. \n\nWhen dealing with areas around `Coord`s, we can
  use `moorePoints` and `vonNeumanPoints` to generate [Moore](https://en.wikipedia.org/wiki/Moore_neighborhood)
  and [von Neuman](https://en.wikipedia.org/wiki/Von_Neumann_neighborhood) neighbourhoods.
  Note that these include the center point.\n\nWe introduce two new typeclasses: `IsCoord`
  and `IsGrid`. `IsGrid` has `gridIndex`, which allows us to get a single element
  of the grid and lenses to convert between `FocusedGrid` and `Grid`. `IsCoord` has
  `CoordSized`, which is the size of the coord and an iso to convert between `Ordinal`
  and the `Coord`.\n\nExample - Game of Life\n=====================\n\nAs is traditional
  for anything with grids and comonads in Haskell, we can reimplement [Conway's Game
  of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life).\n\nThis is a literate
  Haskell file, so we start by turning on some language extensions, importing our
  library and some other utilities.\n\n```haskell\n{-# LANGUAGE MultiWayIf #-}\n{-#
  LANGUAGE TypeFamilies #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE TypeOperators
  #-}\n{-# LANGUAGE MonoLocalBinds #-}\n{-# LANGUAGE DataKinds #-}\n\nimport SizedGrid\n\nimport
  Control.Comonad\nimport Control.Lens\nimport Control.Comonad.Store\nimport Data.AdditiveGroup\nimport
  Data.AffineSpace\nimport Data.Distributive\nimport Data.Functor.Rep\nimport Data.Semigroup
  (Semigroup(..))\nimport GHC.TypeLits\nimport qualified GHC.TypeLits as GHC\nimport
  System.Console.ANSI\n```\n\nWe create a datatype for alive or dead.\n\n```haskell\ndata
  TileState = Alive | Dead deriving (Eq,Show)\n```\n\nWe encode the rules of the game
  via a step function.\n\n```haskell\ntype Rule = TileState -> [TileState] -> TileState\n\ngameOfLife
  :: Rule\ngameOfLife here neigh =\n    let aliveNeigh = length $ filter (== Alive)
  neigh\n    in if | here == Alive && aliveNeigh `elem` [2,3] -> Alive\n          |
  here == Dead && aliveNeigh == 3 -> Alive\n          | otherwise -> Dead\n```\n\nWe
  can then write a function to apply this to every point in a grid.\n\n```haskell\napplyRule
  :: \n       ( All IsCoordLifted cs\n       , All Monoid cs\n       , All Semigroup
  cs\n       , All AffineSpace cs\n       , All Eq cs\n       , AllDiffSame Integer
  cs\n       , AllSizedKnown cs\n       , IsGrid cs (grid cs)\n       )\n    => Rule\n
  \   -> grid cs TileState\n    -> grid cs TileState\napplyRule rule = over asFocusedGrid
  $ \n    extend $ \\fg -> rule (extract fg) $ map (\\p -> peek p fg) $ \n        filter
  (/= pos fg) $ moorePoints (1 :: Integer) $ pos fg\n\n```\n\nWe can create a simple
  drawing function to display it to the screen.\n\n```haskell\ndisplayTileState ::
  TileState -> Char\ndisplayTileState Alive = '#'\ndisplayTileState Dead = '.'\n\ndisplayGrid
  :: (KnownNat (x GHC.* y), KnownNat x, KnownNat y) => \n      Grid '[f x, g y] TileState
  -> String\ndisplayGrid = unlines . collapseGrid . fmap displayTileState\n```\n\nLet's
  create a glider, and watch it move!\n\n```haskell\nglider :: \n      ( KnownNat
  (CoordNat x GHC.* CoordNat y)\n      , Semigroup x\n      , Semigroup y\n      ,
  Monoid x\n      , Monoid y\n      , IsCoordLifted x\n      , IsCoordLifted y\n      ,
  AffineSpace x\n      , AffineSpace y\n      , Diff x ~ Integer\n      , Diff y ~
  Integer\n      ) \n      => Coord '[x,y] \n      -> Grid '[x,y] TileState\nglider
  offset = pure Dead \n    & gridIndex (offset .+^ (0,-1)) .~ Alive\n    & gridIndex
  (offset .+^ (1,0)) .~ Alive\n    & gridIndex (offset .+^ (-1,1)) .~ Alive\n    &
  gridIndex (offset .+^ (0,1)) .~ Alive\n    & gridIndex (offset .+^ (1,1)) .~ Alive\n```\n\nWe
  can now make our glider run!\n\n```haskell\nrun = \n    let start :: Grid '[Periodic
  10, Periodic 10] TileState \n        start = glider (mempty .+^ (3,3))\n        doStep
  grid = do\n          clearScreen\n          putStrLn $ displayGrid grid\n          _
  <- getLine\n          doStep $ applyRule gameOfLife grid\n    in doStep start\n\nmain
  = return ()\n```\n"
description-type: markdown
hash: f269a9a658a66d5b9925f22c163b61c62a041670bfcb84a8748a969ceeb5dc9c
homepage: https://github.com/edwardwas/sized-grid
latest: 0.2.0.1
license-name: MIT
maintainer: ed@wastell.co.uk
synopsis: Multidimensional grids with sized specified at compile time
test-bench-deps:
  HUnit: '>=1.6.0.0 && <1.7'
  QuickCheck: '>=2.10 && <3.0'
  adjunctions: '>=4.3 && <4.5'
  aeson: '>=1.2 && <1.5'
  ansi-terminal: '>=0.8.0.2 && <0.10'
  base: '>=4.9 && <4.13'
  comonad: '>=5.0 && <5.1'
  distributive: '>=0.5 && <1'
  generics-sop: '>=0.3 && <0.6'
  lens: '>=4.15 && <5'
  markdown-unlit: '>=0.5.0 && <0.6'
  sized-grid: '>=0'
  tasty: '>=1.0 && <2.1'
  tasty-hunit: '>=0.10 && <0.11'
  tasty-quickcheck: '>=0.9 && <1'
  vector: '>=0.12 && <0.13'
  vector-space: '>=0.10 && <2'
