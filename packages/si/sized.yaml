all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.8.0.0
- 0.9.0.0
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
author: Hiromi ISHII
basic-deps:
  base: '>=4 && <5'
  constraints: '>=0'
  containers: '>=0.5'
  deepseq: '>=1.4'
  equational-reasoning: '>=0.5'
  ghc-typelits-knownnat: '>=0'
  ghc-typelits-presburger: '>=0.7.2'
  hashable: '>=1.2'
  lens: '>=0.14'
  mono-traversable: '>=0.10'
  subcategories: '>=0.2'
  these: '>=0'
  type-natural: '>=1.3'
  vector: '>=0.12'
changelog: |
  # Changelog

  ## 1.1.0.2

  * Supports GHC 9.10

  ## 1.1.0.1

  * Supports GHC 9.8
  * Drops Support for GHC <9

  ## 1.1.0.0

  * Supports GHC 9.6
  * Migrates to recent toolchains

  ## 1.0.0.1

  * Minor refactoring of test-suite to support inspection-testiong 0.5

  ## 1.0.0.0

  * Drops Peano-numerals
  * Obsolete kind-generic classes
  * Now all types are kinded with GHC's builtin type-level naturals, and no type parameters for naturals.
  * Drops dependency for `singletons` package and their relatives.

  ## 0.9.0.0

  * This is transitional change: preparation for future rework of `type-natural`
    - Types and constraints in `Data.Sized.Builtin` is now incompatible with `Data.Sized` and `Data.Sized.Peano`
    - The latter two modules will be removed in future release.
  * Removes `NilL` and `NilR`
  * Compolete overhaul on `Data.Sized.Builtin`
    - Stop using orders from `Data.Singletons`
    - Types of nested pattern synonyms can now be inferred correctly

  ## 0.8.0.0

  * Makes `sLength` using `KnownNat` instance to get O(1) always.
  * Introduces `Nil` pattern and deprecates `NilL` and `NilR`.
  * Previously, in sepcialised modules for `Builtin` and `Peano`,
    `elemIndex`, `elemIndices` and their Ordinal version were misimplemented;
    they are now correctly uses their counterparts in `Data.Sized`.
  * Adds documentation for specialised modules.

  ## 0.7.0.0

  * Stop using `ListLike` package and switched to [`subcategories`] package for the abstraction of sequential types.
  * Complete overhaul on type signatures.
  * Both `Data.Sized.Builtin` and `Data.Sized.Peano` exports specialised functions instead of reexporting functions from `Data.Sized`.
changelog-type: markdown
description: |
  sized - Sized sequence data-types
  =================================
  ![Haskell CI](https://github.com/konn/sized/workflows/Haskell%20CI/badge.svg) [![Hackage](https://img.shields.io/hackage/v/sized.svg)](https://hackage.haskell.org/package/sized)

  A wrapper to make length-parametrized data-type from endofunctors from [subcategories].

  [subcategories]: http://hackage.haskell.org/package/subcategories
description-type: markdown
hash: 8890c0d7c9624f3928d47b9d24eb364691687f17c9cd077b68a0c1c341fec253
homepage: ''
latest: 1.1.0.2
license-name: BSD-3-Clause
maintainer: konn.jinro_at_gmail.com
synopsis: Sized sequence data-types
test-bench-deps:
  base: '>=0'
  containers: '>=0'
  inspection-testing: '>=0.4 && <0.6'
  mono-traversable: '>=0'
  primitive: '>=0'
  sized: '>=0'
  subcategories: '>=0'
  tasty: '>=0'
  tasty-inspection-testing: '>=0'
  template-haskell: '>=0'
  th-lift: '>=0'
  type-natural: '>=0'
  vector: '>=0'
