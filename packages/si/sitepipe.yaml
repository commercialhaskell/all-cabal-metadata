homepage: https://github.com/ChrisPenner/sitepipe#readme
changelog-type: ''
hash: 8ddcda190134541ae0de47634f8b2b4d9c61e4756f4e314983de220b10e5bd9f
test-bench-deps: {}
maintainer: christopher.penner@gmail.com
synopsis: A simple to understand static site generator
changelog: ''
basic-deps:
  MissingH: -any
  exceptions: -any
  shelly: -any
  bytestring: -any
  lens-aeson: -any
  base: <5
  unordered-containers: -any
  text: -any
  megaparsec: -any
  filepath: -any
  parsec: -any
  containers: -any
  lens: -any
  pandoc: -any
  mtl: -any
  mustache: -any
  transformers: -any
  optparse-applicative: -any
  Glob: -any
  aeson: -any
  yaml: -any
  directory: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
author: Chris Penner
latest: 0.4.0.2
description-type: markdown
description: "# SitePipe \n\nHey there! If you're just getting started with a static
  site I'd recommend checking out  [`slick`](https://github.com/ChrisPenner/slick)
  instead. It has better caching support, is faster, and has better pandoc interop!
  SitePipe isn't deprecated (yet), but I'd recommend trying `slick` instead! There's
  a template repo [HERE](https://github.com/chrispenner/slick-template) to get you
  started. Cheers!\n\n\n\n[![Build Status](https://travis-ci.org/ChrisPenner/SitePipe.svg?branch=master)](https://travis-ci.org/ChrisPenner/SitePipe)\n[![Hackage](https://img.shields.io/badge/hackage-latest-green.svg)](https://hackage.haskell.org/package/sitepipe)\n[![Join
  the chat at https://gitter.im/SitePipe/Lobby](https://badges.gitter.im/SitePipe/Lobby.svg)](https://gitter.im/SitePipe/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n![SitePipe](./artwork/pipe.png)\n\nHeads
  up! If you're reading this from the Hackage docs the links will be broken, go\nread
  it on [Github](https://github.com/chrispenner/sitepipe).\n\n### Contents:\n\n-   [What
  is it?](#what-is-it)\n    -   [What's it look like?](#whats-it-look-like)\n    -
  \  [Wait, another static site generator? What about\n        Hakyll/Jekyll?](#wait-another-static-site-generator-what-about-hakylljekyll)\n-
  \  [Getting Started](#getting-started)\n    -   [Quick Start](#quick-start)\n    -
  \  [Tutorial](#tutorial)\n-   [Concepts](#concepts)\n    -   [How is SitePipe different
  from other\n        solutions?](#how-is-sitepipe-different-from-other-solutions)\n
  \   -   [Data/Metadata](#datametadata)\n    -   [Templating](#templating)\n    -
  \  [Loaders](#loaders)\n    -   [Reader](#reader)\n    -   [Writers](#writers)\n
  \   -   [Loader/Writers](#loaderwriters)\n    -   [Utilities](#utilities)\n-   [Issues/Troubleshooting](#issuestroubleshooting)\n\n##
  What is it?\n\nIt's a simple to understand static site generator for making blogs,
  personal\nwebsites, etc.\n\n## What's it look like?\n\nStart by setting up the structure
  of your website in a `site` folder:\n\n```\nsite\n├── templates\n│   ├── post.html\n│  
  └── index.html\n└── posts\n    └── article.md\n```\n\nHere's a dead-simple blog
  generator using markdown posts, you can see it in action in\n[examples/starter-template](./examples/starter-template),
  or build on it in the [tutorial](./docs/tutorial.md)\n\n```haskell\n{-# language
  OverloadedStrings #-}\nmodule Main where\n\nimport SitePipe\n\nmain :: IO ()\nmain
  = site $ do\n  -- Load all the posts from site/posts/\n  posts <- resourceLoader
  markdownReader [\"posts/*.md\"]\n\n  -- Build up a context for our index page\n
  \ let indexContext :: Value\n      indexContext = object [ \"posts\" .= posts\n
  \                           -- The url is where the index page will be written to\n
  \                           , \"url\" .= (\"/index.html\" :: String)\n                            ]\n\n
  \ -- write out index page and posts via templates\n  writeTemplate \"templates/index.html\"
  [indexContext]\n  writeTemplate \"templates/post.html\" posts\n```\n\n## Wait, another
  static site generator? What about Hakyll/Jekyll?\n\nYup, yet another static site
  generator. I've tried using Hakyll and Jekyll on\ndifferent occasions and found
  there was too much magic going on with all of the\nmonadic contexts for me to understand
  how to customize things for my use-cases.\nEven adding simple tags/categories to
  my blog seemed far more complex then it\nneeded to be; Hakyll specifically got me
  really bogged down; what was the\n`Compiler` monad? How does an `Item` work? How
  do I add a custom field? Why\ncouldn't I just edit data directly like I'm used to
  doing in Haskell? They\nseemed a bit too opinionated without giving me escape hatches
  to wire in my own\nfunctionality. If they're working for you, then great! But they
  weren't working\nfor me, so that's where SitePipe came from.\n\n# Getting Started\n\n##
  Quick Start\n\nThe easiest way to get started is to clone this repo and try out
  the examples in the\n[examples](./examples) directory. There's a starter-template
  which is a barebones\nstarting point, and also a slightly more complex blog with
  tags and an rss feed.\nYou can build either of the examples using [Stack](http://seanhess.github.io/2015/08/04/practical-haskell-getting-started.html)\nby
  `cd`ing into the directory and running `stack build && stack exec build-site`.\nThis
  creates a 'dist' folder with the results of the build. A quick way to serve\nthe
  site is to use [Serve](https://www.npmjs.com/package/serve).\n\nServing a site with
  [Serve](https://www.npmjs.com/package/serve):\n- `npm install -g serve`\n- `serve
  dist`\n- Navigate to the port which is serving (usually http://localhost:3000)\n\n##
  Tutorial\n\nRead the walkthrough of the system [HERE](./docs/tutorial.md); it'll
  run you through the basics\nof how the system works and how to make your own customizations!\n\n#
  Concepts\n\nHow is SitePipe different from other solutions?\n-----------------------------------------------\n\nInstead
  of dealing with complex contexts SitePipe works with *values*. Values\nare loaded
  from files and can be rendered into html. What happens to the values\nin-between
  is up to you!\n\nSitePipe provides a bunch of helpers for you, but at the end of
  the day you can\nfit the pipes together however you like.\n\n## Data/Metadata\n\nMetadata
  for posts and content is parsed from yaml into [Aeson's `Value`\ntype](https://hackage.haskell.org/package/aeson);
  Aeson can\neasily represent nested objects or lists inside your metadata, and there's
  a\nrich ecosystem for working with Aeson types! You can load resources in as any\nobject
  which implements `FromJSON` (or just leave them as Aeson Values) and you\nhave the
  option to edit the objects directly without worrying about monadic or\nexternal
  context.\n\n## Templating\n\nSitePipe has built-in support for [Mustache\nTemplates](https://mustache.github.io/mustache.5.html),
  specifically [Justus\nAdam's implementation](https://hackage.haskell.org/package/mustache)
  in\nHaskell. This lets you use a well established templating system in your site,\ncomplete
  with template functions, partials, and iteration. Since the underlying\ndata is
  based on It's clear how templates will behave since resources are based\non Aeson's
  JSON types.\n\n## Loaders\n\nYou can load resources in to work on them using a `Loader`,
  A loader simply\nfinds and loads files into resources by employing a `Reader` on
  some files. A\nbasic `resourceLoader` loader is provided, which will load all of
  the files\nmatching a set of file-globs through the provided reader and will return
  an\nAeson Value containing the relevant metadata and content. You should be able
  to\nuse resourceLoader for most things by customizing the reader function which
  you\npass it.\n\n## Reader\n\nA reader is a function of the type `String -> IO String`;
  the input is the file\ncontents which remain after a yaml header has been stripped
  off (if it exists).\nThe most common reader is the provided `markdownReader` which
  runs a markdown\ndocument through pandoc's markdown processor and outputs html.
  You can write\nyour own readers if you like, either by making a function which operates
  over\nthe content of the document and matches `String -> IO String` or by using\nthe
  provided Pandoc helpers (`mkPandocReader`, `mkPandocReaderWith`) which\nallow you
  to use any of Pandoc's provided document formats, and optionally specify\ntransformations
  over the pandoc document before it is rendered to html or some other\noutput format.\n\n##
  Writers\n\nWriters take a list of resources (anything with a ToJSON instance, often
  an\nAeson Value) and will write them to the output where the static site will be.\nThe
  most common writer is `writeTemplate` which will render the given resource\nthrough
  a given template, but you can also use `textWriter`, or write your own\nwriter;
  either writing to disk using `liftIO` or by using the provided\n`writeWith` combinator
  which given a transformation from a resource to a String\n`(a -> SiteM String)`
  will write the result of the transformation to the place\nspecified by the resource's
  url.\n\n## Loader/Writers\n\nSome things don't fit into the previous categories.
  For example `copyFiles` and\n`copyFilesWith` are simple tools which just copy the
  specified files over as-is\ninto the output directory. You pass either of them a
  list of file globs and the\nresulting files will be copied over. `copyFiles` sends
  them to the same\nrelative filepath from the source directory to the output directory,
  while\n`copyFilesWith` allows you to transform the filepath to specify a new location\nfor
  each file.\n\n## Utilities\n\nSitepipe includes a few utilities which simply make
  working with sites easier.\nThe included utilities will expand as time goes on.\n\n#
  Issues/Troubleshooting\n\nFeel free to file an [issue](https://github.com/chrispenner/sitepipe/issues)
  if you run into any trouble,\nor come ask in the [Chatroom](https://gitter.im/SitePipe/Lobby)\n"
license-name: BSD-3-Clause
