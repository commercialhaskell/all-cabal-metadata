homepage: https://github.com/hspec/silently
changelog-type: markdown
hash: 1496b654d2113b9653d14f92e39acb40d0e1ed5de830214857191622b8ed4653
test-bench-deps:
  base: -any
  nanospec: -any
  silently: -any
  temporary: -any
  deepseq: -any
  directory: -any
maintainer: SÃ¶nke Hahn <soenkehahn@gmail.com>, Simon Hengel <sol@typeful.net>, Andreas
  Abel
synopsis: Prevent or capture writing to stdout and other handles.
changelog: |
  # 1.2.5.2 November 2021

  * Tested with GHC 7.0 - 9.2.
  * Silence warning caused by missing `other-modules` in cabal file.
  * Add README and CHANGELOG to dist.

  # 1.2.5.1 July 2019

  No changelog for this and earlier versions.
basic-deps:
  base: '>=4 && <=5'
  deepseq: -any
  directory: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.5
- '1.2'
- 1.2.0.1
- 1.2.0.2
- 1.2.3
- 1.2.4
- 1.2.4.1
- 1.2.5
- 1.2.5.1
- 1.2.5.2
author: Trystan Spangler
latest: 1.2.5.2
description-type: markdown
description: |
  [![Hackage version](https://img.shields.io/hackage/v/silently.svg?label=Hackage&color=informational)](http://hackage.haskell.org/package/silently)
  [![silently on Stackage Nightly](https://stackage.org/package/silently/badge/nightly)](https://stackage.org/nightly/package/silently)
  [![Stackage LTS version](https://www.stackage.org/package/silently/badge/lts?label=Stackage)](https://www.stackage.org/package/silently)
  [![Cabal build](https://github.com/hspec/silently/workflows/Haskell-CI/badge.svg)](https://github.com/hspec/silently/actions)

  # silently

  Silently is a package that allows you to run an `IO` action and
  prevent it from writing to `stdout`, or any other handle, by using
  `silence`. Or you can capture the output for yourself using `capture`.

  For example, the program
  ```haskell
   import System.IO.Silently

   main = do
     putStr "putStrLn: " >> putStrLn "puppies!"
     putStr "silenced: " >> silence (putStrLn "kittens!")
     putStrLn ""
     (captured, result) <- capture (putStr "wookies!" >> return 123)
     putStr "captured: " >> putStrLn captured
     putStr "returned: " >> putStrLn (show result)
  ```
  will print:
  ```
   putStrLn: puppies!
   silenced:
   captured: wookies!
   returned: 123
  ```
license-name: BSD-3-Clause
