all-versions:
- 0.1.0.0
- 0.2.0
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.5.0
- 0.6.0
- 0.7.0
- 0.7.1
- 0.8.0
author: Jake Wheat
basic-deps:
  base: '>=4 && <5'
  containers: '>=0.6 && <0.8'
  megaparsec: '>=9.6 && <9.8'
  mtl: '>=2.1 && <2.4'
  parser-combinators: '>=1.3 && <1.4'
  prettyprinter: '>=1.7 && <1.8'
  text: '>=2.0 && <2.2'
changelog: "0.8.0   lexer has new option to output an invalid token on some kinds
  of\n          parse errors\n        switch tests to hspec\n        improve parse
  error messages\n\t* and x.* changed to only parse in some expression contexts -\n
  \ \t  select items and function application argument lists\n\tsupport sqlite 'without
  rowid'\n\tmake types in columndefs optional\n\tallow column constraints and defaults
  to be in arbitrary order\n\tpartially support parentheses at query expression level
  (some nested parens don't parse yet)\n0.7.1   fix error message source quoting\n0.7.0
  \  support autoincrement for sqlite\n\tsupport table constraints without separating
  comma for sqlite\n\tswitch source from literate to regular haskell\n\tuse megaparsec
  instead of parsec\n\tuse prettyprinter lib instead of pretty\n\tparsing nested block
  comments regressed - post a bug if you need this\n\tfixed fixity parsing of union,
  except and intersect (matches postgres docs now)\n\tremoved the Errors module -
  the pretty printer function for errors is in the Parse module\n\tparses from and
  pretty prints to strict Text\n\tuse strict Text instead of String everywhere\n\ttested
  with latest three main ghc releases (9.8.1, 9.6.4, and 9.4.8) and stack lts 22.5\n\tthe
  makeSelect helper is now a distinct type, code using it will need some trivial\n\t
  \ tweaks, this is change so that code using makeSelect doesn't emit warnings\n\toverhaul
  website\n0.6.1   added odbc handling to sqlsqerver dialect\n\t\tadded sqlserver
  dialect case for convert function\n0.6.0\n        tested with ghc 8.8.1 also\n        change
  the dialect handling - now a dialect is a bunch of flags\n          plus a keyword
  list, and custom dialects are now feasible\n          (still incomplete)\n        fix
  parsing for a lot of things which are keywords in the standard\n        fix bug
  with cte pretty printing an extra 'as', which the parser\n          also incorrectly
  accepted\n        bug fix: allow keywords that are quoted to be parsed as identifiers\n\n0.5.0\n
  \       update to work with ghc 8.6.5, also tested with 8.4.4 and 8.2.1\n\trename
  some of the modules Lexer -> Lex, Parser -> Parse\n\tadd a separate lexer to simplify
  code and speed up parsing\n\treplace SqlIndent with new tool, SimpleSqlParserTool
  (amazing\n\t  name) which can indent, and parse and lex.\n\texperiments in new approach
  to dealing with fixities with separate\n\t  pass after parsing\n\tdml :add support
  for insert, update, delete and truncate\n\tddl: add limited support for create schema,
  plus drop schema\n\t  create, alter and drop table with defaults and constraints\n\t
  \ create, alter and drop for domain, view, sequence\n\t  create and drop for assertion\n\taccess
  control: simple create and drop for role\n\tsimple grant and revoke\n\tlimited support
  for transaction management: start transation,\n\trollback, commit, savepoint\n\tfix
  the precendence of operators which was following the weird\n\t  postgresql 9.4 and
  earlier precendences instead of the standard\n\trefactor the syntax for names, identifiers
  and strings slightly\n\trefactor the dialect support, add some support for postgresql\n\t
  \ syntax\n\tchange parsing of identifiers and strings to not unescape the\n\t  identifier
  or string text during parsing\n\tadd some explicit parse failures for probably ambiguous
  text\n\t  */ without /* (outside quoted identifier, string) will fail\n\t  .,e,E
  following a number without whitespace always fails\n\t  three symbols together fails
  explicitly, instead of trying to\n\t    lex and giving a less good error at parse
  time (applies to |\n\t    and : in postgres dialect)\n\tfix parsing of functions
  whose name is a keyword (e.g. abs)\n\tadd basic support for parsing odbc syntax
  ({d 'literals'} {fn\n\t  app(something)} and {oj t1 left outer join ... }\n\trename
  ValueExpr -> ScalarExpr (I think scalar expression is\n\t  slightly less incorrect)\n
  \       rename CombineQueryExpr to QueryExprSetOp and CombineOp to SetOperatorName\n
  \       use explicit data type for sign in interval literals\n        add comments
  to statement syntax (aimed at codegen)\n        add support for oracle type size
  units 'char' and 'byte', example: varchar2(55 byte)\n        updated the makefile
  to use cabal v2 commands\n        fix for parsing window functions with keyword
  names\n0.4.4\n\ttested with ghc 8.2.1 and 8.4.3\n0.4.3\n\ttested with ghc 8.0.2
  and 8.2.1\n0.4.1 (commit c156c5c34e91e1f7ef449d2c1ea14e282104fd90)\n\ttested with
  ghc 7.4.2, 7.6.3, 7.8.4,7.10.0.20150123\n\tsimple demonstration of how dialects
  could be handled internally\n\tadd ability to add comments to syntax tree to help
  with generating\n\tSQL code\n0.4.0 (commit 7914898cc8f07bbaf8358d208469392346341964)\n\tnow
  targets SQL:2011\n\tupdate to ghc 7.8.2\n\tremove dependency on haskell-src-exts\n\tderive
  Data and Typeable in all the syntax types\n\timprove the error messages a great
  deal\n\tsql features:\n\tparse schema qualified table names in from clause (thanks
  to SÃ¶nke\n\t  Hahn)\n\tsupport multiline string literals\n\tsupport colon prefix
  host parameters and introducer\n\tsupport unique predicate\n\tsupport match predicate\n\tsupport
  array constructors and subscripting\n\tsupport character set literals\n\tsupport
  collate\n\tsupport escape for string literals as a postfix operator\n\tparse schema/whatever
  qualified ids in various places: identifiers\n\t  (replaces equivalent functionality
  using '.' operator), function,\n\t  aggregate, window function names, explicit tables
  and functions in\n\t  from clauses, typenames\n\tsupport almost all typename syntax
  for SQL:2011 (just missing refs)\n\tsupport most multiset operations (missing some
  predicates only,\n\t  likely to be added before next release)\n\tsupport two double
  quotes in a quoted identifier to represent a\n\t  quote character in the identifier\n\tsupport
  filter and within group for aggregates\n\tsupport next value for\n\tparse special
  nullary functions\n\tannoying changes:\n\treplace Int with Integer in the syntax\n\tremove
  support for parsing clauses after the from clause if there\n\t  is no from clause\n\tchange
  the syntax representation of quantified comparison\n\t  predicates\n\tchange the
  hardcoded collate keyword in substring and trim to use\n\t  the new collate postfix
  operator, this also changes the collation\n\t  name to be an identifier instead
  of a string\n\trepresent missing setquantifier as a literal default instead of as\n\t
  \ the actual default value (all in select, distinct in set\n\t  operators)\n\tsame
  for sort directions in order by\n\timplement complete interval literals (fixed the
  handling of the\n\t  interval qualifier)\n\tmake most of the standard reserved words
  actually reserved (still\n\t  some gaps)\n\tchange the natural in join abstract
  syntax to match the concrete\n\t  syntax instead of combining natural, on and using
  into one field\n\tremove support for postgresql limit syntax\n\tbug fixes:\n\tfix
  some trailing whitespace issues in the keyword style functions,\n\t  e.g. extract(day
  from x), dealing with trailing whitespace on\n\t  the parens was fixed\n\timprove
  some cases of parsing chained prefix or postfix operators\n\t  (still some issues
  here)\n\tfix bug where the 'as' was incorrectly optional in a 'with\n\t  expression
  list item'\n\tfix bug in set operations where 'all' was assumed as the default\n\t
  \ instead of 'distinct', e.g. 'select * from t union select * from\n\t  u' was parsed
  to 'select * from t union all select * from u'\n\t  instead of 'select * from t
  union distinct select * from u'.\n\tfix corresponding bug where 'distinct' was being
  pretty printed in\n\t  this case and 'all' was not since the assumed default was
  the\n\t  wrong way round\n\tfix some trailing junk lexing issues with symbols and
  number\n\t  literals\n\tfix number literals to accept upper case E\n0.3.1 (commit
  5cba9a1cac19d66166aed2876d809aef892ff59f)\n\tupdate to work with ghc 7.8.1\n0.3.0
  (commit 9e75fa93650b4f1a08d94f4225a243bcc50445ae)\n\tfix the basic operator fixity
  parsing\n\tswap the order in select item abstract syntax so it is now\n\t  (expression,
  alias) which matches the order in the concrete\n\t  syntax\n\trename ScalarExpr
  -> ValueExpr\n\trename Duplicates to SetQuantifier\n\trename qeDuplicates to qeSetQuantifier\n\trename
  OrderField to SortSpec\n\trename InThing to InPredValue\n\tadd support for ? for
  parameterized queries\n\tadd new abstract syntax for special operators whose concrete\n\t
  \ syntax is a kind of limited named parameters syntax\n\tadd more parsing for these
  operators: position, convert,\n\t  translate, overlay, trim, and improve the substring
  parsing\n\tadd support for multi keyword type names\n\t   previously:\n\t     double
  precision\n\t     character varying\n\t   now:\n\t     double precision,\n\t     character
  varying,\n\t     char varying,\n\t     character large object,\n\t     char large
  object,\n\t     national character,\n\t     national char,\n\t     national character
  varying,\n\t     national char varying,\n\t     national character large object,\n\t
  \    nchar large object,\n\t     nchar varying,\n\t     bit varying\n\trename tools/PrettyIt
  to tools/SQLIdent and add to cabal file as\n\t  optional executable (disabled by
  default)\n\trename the qeFetch field in Select to qeFetchFirst\n\tchange the pretty
  printer to use 'fetch first' instead of\n\t  'fetch next'\n\n0.2.0 (commit 9ea29c1a0ceb2c3f3157fb161d1ea819ea5d64d4)\n\t''
  quotes in string literal\n\tparse simple interval literal e.g. \"interval '1 week'\"\n\tsupport
  . in identifiers as a dot operator\n\tsupport quoted identifiers\n\tpartial support
  for explicit window frames\n\tsupport multiple test expressions in when branches
  in case expressions\n\trename CastOp to TypedLit\n\tsupport typenames with precision
  and scale in casts\n\tsupport nulls first and nulls last in order by\n\tsupport
  grouping expressions: group by (), grouping sets, cube,\n\t  rollup and parens\n\tsupport
  with recursive\n\tsupport values table literal\n\tsupport 'table t' syntax\n\trename
  fields qe1 and qe1 in combinequeryexpr to qe0 and qe1\n\tadd support for functions
  in from clause\n\tadd support for lateral in from clause\n\tsupport column aliases
  in common table expressions\n\trefactor the tests and add lots more\n\tparse * in
  any scalar context instead of trying to restrict it\n\tsupport row ctor without
  'row' e.g. (a,b) = (c,d)\n\tadd % ^ | & ~ operators\n\tsupport ansi standard syntax
  for offset n rows and fetch first n\n\t  rows only\n\tfix keyword parsing to be
  case insensitive\n\n0.1.0.0 (commit 9bf4012fc40a74ad9a039fcb936e3b9dfc3f90f0)\n\tinitial
  release\n"
changelog-type: text
description: |
  A parser for SQL in Haskell.

  Homepage: http://jakewheat.github.io/simple-sql-parser/latest

  Contact: jakewheat@tutanota.com
description-type: text
hash: dedefe5ed8627d9f619714aa145429d8b5127218f86de575c3ee480f969ae952
homepage: http://jakewheat.github.io/simple-sql-parser/latest
latest: 0.8.0
license-name: BSD-3-Clause
maintainer: jakewheat@tutanota.com
synopsis: A parser for SQL.
test-bench-deps:
  base: '>=4 && <5'
  containers: '>=0.6 && <0.8'
  filepath: '>=0'
  hspec: '>=0'
  hspec-expectations: '>=0'
  hspec-golden: '>=0'
  hspec-megaparsec: '>=0'
  megaparsec: '>=9.6 && <9.8'
  mtl: '>=2.1 && <2.4'
  parser-combinators: '>=1.3 && <1.4'
  pretty-show: '>=0'
  prettyprinter: '>=1.7 && <1.8'
  raw-strings-qq: '>=0'
  simple-sql-parser: '>=0'
  text: '>=2.0 && <2.2'
