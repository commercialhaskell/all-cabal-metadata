all-versions:
- 0.1.0.0
- 0.2.0.0
author: Junaid Rasheed
basic-deps:
  base: '>=4.14 && <5'
  containers: '>=0.6.5.1 && <0.7'
  generic-lens: '>=2.2.0 && <2.3'
  lens: '>=5.2.2 && <5.3'
  monad-logger: '>=0.3.40 && <0.4'
  text: '>=2.0.2 && <2.1'
  time: '>=1.12.2 && <1.13'
changelog: |
  # Changelog for simplex-haskell

  ## Unreleased changes

  ## [v0.2.0.0](https://github.com/rasheedja/LPPaver/tree/v0.2.0.0)

  - Setup CI
  - Use fourmolu formatter
  - Add better types
  - Use lens
  - Use RecordDot syntax
  - Add logging
  - Improve Docs
  - More Tests
  - Bump Stackage LTS
  - Rename Linear.Simplex.Simplex -> Linear.Simplex.TwoPhase.Simplex

  ## [v0.1.0.0](https://github.com/rasheedja/LPPaver/tree/v0.1.0.0)

  - Initial release
changelog-type: markdown
description: "# simplex-method\n\n`simplex-method` is a Haskell library that implements
  the two-phase [simplex method](https://en.wikipedia.org/wiki/Simplex_algorithm)
  in exact rational arithmetic.\n\n## Quick Overview\n\nThe `Linear.Simplex.Solver.TwoPhase`
  module contain both phases of the two-phase simplex method.\n\n### Phase One\n\nPhase
  one is implemented by `findFeasibleSolution`:\n\n```haskell\nfindFeasibleSolution
  :: (MonadIO m, MonadLogger m) => [PolyConstraint] -> m (Maybe FeasibleSystem)\n```\n\n`findFeasibleSolution`
  takes a list of `PolyConstraint`s.\nThe `PolyConstraint` type, as well as other
  custom types required by this library, are defined in the `Linear.Simplex.Types`
  module.\n`PolyConstraint` is defined as:\n\n```haskell\ndata PolyConstraint\n  =
  LEQ {lhs :: VarLitMapSum, rhs :: SimplexNum}\n  | GEQ {lhs :: VarLitMapSum, rhs
  :: SimplexNum}\n  | EQ {lhs :: VarLitMapSum, rhs :: SimplexNum}\n  deriving (Show,
  Read, Eq, Generic)\n```\n\n`SimplexNum` is an alias for `Rational`, and `VarLitMapSum`
  is an alias for `VarLitMap`, which is an alias for `Map Var SimplexNum`.\n`Var`
  is an alias of `Int`.\n\nA `VarLitMapSum` is read as `Integer` variables mapped
  to their `Rational` coefficients, with an implicit `+` between each entry.\nFor
  example: `Map.fromList [(1, 2), (2, (-3)), (1, 3)]` is equivalent to `(2x1 + (-3x2)
  + 3x1)`.\n\nAnd a `PolyConstraint` is an inequality/equality where the LHS is a
  `VarLitMapSum` and the RHS is a `Rational`.\nFor example: `LEQ (Map.fromList [(1,
  2), (2, (-3)), (1, 3)] 60)` is equivalent to `(2x1 + (-3x2) + 3x1) <= 60`.\n\nPassing
  a `[PolyConstraint]` to `findFeasibleSolution` will return a `FeasibleSystem` if
  a feasible solution exists:\n\n```haskell\ndata FeasibleSystem = FeasibleSystem\n
  \ { dict :: Dict\n  , slackVars :: [Var]\n  , artificialVars :: [Var]\n  , objectiveVar
  :: Var\n  }\n  deriving (Show, Read, Eq, Generic)\n```\n\n```haskell\ntype Dict
  = M.Map Var DictValue\n\ndata DictValue = DictValue\n  { varMapSum :: VarLitMapSum\n
  \ , constant :: SimplexNum\n  }\n  deriving (Show, Read, Eq, Generic)\n```\n\n`Dict`
  can be thought of as a set of equations, where the key represents a basic variable
  on the LHS of the equation\nthat is equal to the RHS represented as a `DictValue`
  value.\n\n### Phase Two\n\n`optimizeFeasibleSystem` performs phase two of the simplex
  method, and has the type:\n\n```haskell\n\noptimizeFeasibleSystem :: (MonadIO m,
  MonadLogger m) => ObjectiveFunction -> FeasibleSystem -> m (Maybe Result)\n\ndata
  ObjectiveFunction = Max {objective :: VarLitMapSum} | Min {objective :: VarLitMapSum}\n\ndata
  Result = Result\n  { objectiveVar :: Var\n  , varValMap :: VarLitMap\n  }\n  deriving
  (Show, Read, Eq, Generic)\n```\n\nWe give `optimizeFeasibleSystem` an `ObjectiveFunction`
  along with a `FeasibleSystem`.\n\n### Two-Phase Simplex\n\n`twoPhaseSimplex` performs
  both phases of the simplex method.\nIt has the type:\n\n```haskell\ntwoPhaseSimplex
  :: (MonadIO m, MonadLogger m) => ObjectiveFunction -> [PolyConstraint] -> m (Maybe
  Result)\n```\n\n### Extracting Results\n\nThe result of the objective function is
  present in the returned `Result` type of both `twoPhaseSimplex` and `optimizeFeasibleSystem`,
  but this can be difficult to grok in systems with many variables, so the following
  function will extract the value of the objective function for you.\n\n```haskell\ndictionaryFormToTableau
  :: Dict -> Tableau\n```\n\nThere are similar functions for `DictionaryForm` as well
  as other custom types in the module `Linear.Simplex.Util`.\n\n## Example\n\n```haskell\nexampleFunction
  :: (ObjectiveFunction, [PolyConstraint])\nexampleFunction =\n  (\n    Max {objective
  = Map.fromList [(1, 3), (2, 5)]},      -- 3x1 + 5x2\n    [\n      LEQ {lhs = Map.fromList
  [(1, 3), (2, 1)], rhs = 15}, -- 3x1 + x2 <= 15 \n      LEQ {lhs = Map.fromList [(1,
  1), (2, 1)], rhs = 7},  -- x1 + x2 <= 7\n      LEQ {lhs = Map.fromList [(2, 1)],
  rhs = 4},          -- x2 <= 4\n      LEQ {lhs = Map.fromList [(1, -1), (2, 2)],
  rhs = 6}  -- -x1 + 2x2 <= 6\n    ]\n  )\n\ntwoPhaseSimplex (fst exampleFunction)
  (snd exampleFunction)\n```\n\nThe result of the call above is:\n\n```haskell\nJust
  \n  (Result\n    { objectiveVar = 7 -- Integer representing objective function\n
  \   , varValMap = Map.fromList  \n      [ (7, 29) -- Value for variable 7, so max(3x1
  + 5x2) = 29.\n      , (1, 3) -- Value for variable 1, so x1 = 3 \n      , (2, 4)
  -- Value for variable 2, so x2 = 4\n      ]\n    }\n  )\n```\n\nThere are many more
  examples in test/TestFunctions.hs.\nYou may use `prettyShowVarConstMap`, `prettyShowPolyConstraint`,
  and `prettyShowObjectiveFunction` to convert these tests into a more human-readable
  format.\n\n## Issues\n\nPlease share any bugs you find [here](https://github.com/rasheedja/simplex-haskell/issues).\n"
description-type: markdown
hash: ccfc12e88789d4e11935061d743b757ff7f6424c2f8f39ec8194cfe7a9af7bce
homepage: https://github.com/rasheedja/simplex-method#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: jrasheed178@gmail.com
synopsis: Implementation of the two-phase simplex method in exact rational arithmetic
test-bench-deps:
  base: '>=4.14 && <5'
  containers: '>=0.6.5.1 && <0.7'
  generic-lens: '>=2.2.0 && <2.3'
  lens: '>=5.2.2 && <5.3'
  monad-logger: '>=0.3.40 && <0.4'
  simplex-method: '>=0'
  text: '>=2.0.2 && <2.1'
  time: '>=1.12.2 && <1.13'
