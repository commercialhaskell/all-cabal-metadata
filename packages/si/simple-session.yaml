homepage: http://simple.cx
changelog-type: markdown
hash: e51076aa8ec775a7e75a7a59c0f0eb1d29db7a365222e543b4dcdacb45c0485d
test-bench-deps: {}
maintainer: amit@amitlevy.com
synopsis: Cookie-based session management for the Simple web framework
changelog: |
  # Version 0.10.1.0 (2015-11-18)

    * Default to using `httponly` cookie option

    * Default to using `secure` cookie option for requests over HTTPS

    * Allow customization of cookie options using the `sessionBaseCookie` method
basic-deps:
  cookie: -any
  bytestring: -any
  wai: '>=3.0'
  base: <6
  base64-bytestring: -any
  simple: '>=2.0.0'
  containers: -any
  blaze-builder: -any
  byteable: -any
  wai-extra: '>=3.0'
  transformers: -any
  http-types: -any
  cryptohash: -any
all-versions:
- 0.6.0
- 0.7.0
- 0.8.0
- 0.8.0.1
- 0.8.1.0
- 0.9.0.0
- 0.10.0.0
- 0.10.1.0
- 0.10.1.1
- 1.0.0
- 2.0.0
author: Amit Aryeh Levy
latest: 2.0.0
description-type: haddock
description: |-
  Adds cookie-based session management to simple 'Controller's. To add to an
  application, declare the Controller setting\'s type an instance of
  'HasSession', and wrap routes with 'withSession'. For example:

  > data AppSettings = ...
  >
  > instance HasSession AppSettings where
  >   ...

  > controllerApp settings $ withSessions $ do
  >   routeName \"posts\" $ ...

  Then, in your controllers you can seemlessly get and set keys from the
  session:

  > get "/profile" $ do
  >   muserId <- sessionLookup "current_user_id"
  >   case muserIf of
  >     Nothing -> respond $ redirectTo "/login"
  >     Just userId -> [handle request]
license-name: LGPL-3.0-only
