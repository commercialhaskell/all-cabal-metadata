homepage: https://github.com/cabalism/updo#readme
changelog-type: markdown
hash: ec39c91aced2fc262a08b082b7f2a3bd4fae6745169b1417a1575ad11262f1f3
test-bench-deps: {}
maintainer: phil.dejoux@blockscope.com
synopsis: A style of maintaining and upgrading Haskell projects
changelog: |-
  ### 1.0.0
  * First release
basic-deps:
  base: '>=4.12 && <5'
  dhall: '>=1.41.1 && <1.42'
  text: '>=1.2.3 && <2.1'
  filepath: '>=1.4.2 && <1.5'
  turtle: '>=1.6.1 && <1.7'
  utf8-string: '>=1.0.2 && <1.1'
  aeson: '>=2.1.2 && <2.2'
all-versions:
- 1.0.0
author: Phil de Joux
latest: 1.0.0
description-type: markdown
description: "# \U0001FAF8 Updo \U0001FAF7\n\n> A hairstyle and a way of maintaining
  and upgrading Haskell projects.\n\n### What is a Project?\n\nUpdo is good for project
  packages, constraints, source repository packages and\nstackage resolver[^download-stackage-config].
  More than this can be added into a\nproject template.\n\n[^download-stackage-config]:
  For cabal, the cabal.config will have to be\n  downloaded to `project-stackage/resolver.config`
  and then edited to comment\n  out constraints that would otherwise lead to impossible
  to solve conflicting\n  constraints because cabal constraints are additive and cannot
  be overridden.\n\n### Goals\n\n1. Map a single set of packages, constraints and
  source repository packages to\n   projects for cabal and stack.\n2. Minimize the
  effort of upgrading constraints, source repository packages and\n   GHC versions.\n\nWe
  do this with configuration in `.dhall` files, makefiles and `dhall text`\ntemplates.
  We also have some simple Haskell scripts for operations not possible\nin Dhall like
  sorting a `List Text`[^dhall-sort-list-nat].\n\n[^dhall-sort-list-nat]: Dhall can
  only sort `List Natural`.\n\n# Template Outputs\n\nWe generate projects from the
  configured inputs using templates.  With the\n`dhall text` command we're able to
  mirror to both stack and cabal projects using\ntext templates. See [templates](./TEMPLATES.md)
  for more.\n\nWe provide one stack template `dhall2stack`. The `dhall2cabal` template
  for\ncabal is so similar that the generated outputs can be compared using file diff\ntooling.
  However, we prefer the `dhall2config` template because it retains\npackage groups
  that can bring order to an [upgrade](#upgrading-a-project) if the\ncabal solving
  order is roughly captured by package group ordering.\n\nWe provide one level of
  nesting for grouping packages together as inputs. Groups\nare preserved or flattened
  depending on the template.\n\n* `dhall2stack` - Stack projects cannot import so
  necessarily must lose the\n  grouping and contain the list of packages.\n* `dhall2cabal`
  - This template lists packages within the cabal project.\n* `dhall2config` - When
  generating the cabal project we keep [package\n  groups](#package-groups), generating
  the same tree structure but replacing the\n  leaves. From each `group-name.dhall`
  we generate a `group-name.config` file.\n\nIt is nice to be able to look at packages
  both grouped and as one sorted list.\nFind the flat sorted lists of packages used
  by some templates in the `.updo`\nfolder.\n\n```\n.updo\n├── pkgs-sorted.dhall        ▨
  List Text\n└── pkgs-upgrade-done.dhall  ▨ List Text\n```\n\nIf you don't want groups
  then please put all packages in the one group.\n\n# Maintaining a Project\n\nMaintaining
  a project involves configuring or reconfiguring inputs and then\nusing make to generate
  the projects. What do we want to configure? We don't need\nmuch:\n\n1. A stackage
  resolver[^download-stackage-config].\n2. A list of constraints (package dependencies
  with their versions).\n3. A list of source repository packages, for unpublished[^unpublished-packages]\n
  \ packages or for unpublished versions of packages.\n4. A list of packages.\n\n[^unpublished-packages]:
  A package not published to hackage or stackage.\n\n\nAll configuration goes into
  `./project-dhall` (where `.` is the root folder for\nyour Haskell project) except
  for the `cabal.config` that we'll need to download\nfrom stackage. Save this file
  as `project-stackage/lts-m.n.config` using the\nexact resolver name.\n\n```\nproject-stackage\n└──
  lts-m.n.config\n```\n\nFor each `ghc-x.y.z` compiler version, create this set of
  inputs and templates:\n\n```\nproject-dhall\n└── ghc-x.y.z\n    ├── constraints.dhall
  \     ▨ List { dep : Text, ver : Text }\n    ├── deps-external.dhall    ▨ List {
  loc : Text, tag : Text, sub : List Text }\n    ├── deps-internal.dhall    ▨ List
  { loc : Text, tag : Text, sub : List Text }\n    ├── forks-external.dhall   ▨ List
  { loc : Text, tag : Text, sub : List Text }\n    ├── forks-internal.dhall   ▨ List
  { loc : Text, tag : Text, sub : List Text }\n    └── text-templates\n        ├──
  dhall2cabal.dhall  ▨ template for ghc-x.y.z.dhall2cabal.project\n        ├── dhall2config.dhall
  ▨ template for ghc-x.y.z.dhall2config.project\n        ├── dhall2stack.dhall  ▨
  template for ghc-x.y.z.dhall2stack.yaml\n        └── stacksnippet.dhall ▨ anything
  for ghc-x.y.z.dhall2stack.yaml\n```\n\nAnything in `stacksnippet.dhall` gets added
  to the top of the generated stack\nproject[^base.yaml].  The rest of the files are
  inputs.\n\n[^base.yaml]: Anything in `stacksnippet.dhall` will be used by\n  [dhall2yaml2stack](alternatives/yaml2stack#readme)
  too and is put into a\n  `base.yaml`, the topmost fragment when stitching together
  fragments.\n\n### 1. Stackage Resolver and Constraints\n\nThe stackage resolver
  is able to provide us with a list of packages that work\ntogether for both stack
  and cabal. Any other dependencies as constraints or\nsource packages are either
  not found on stackage or are different versions.\n\nBy specifying a resolver with
  stack we get a list of exact `==` versions for\npackages published to stackage.
  Stackage also publishes a `cabal.config` file\nthat has these package versions as
  cabal constraints. As cabal constraints are\nadditive, in practice importing directly
  from stackage often leads to conflicts\nbetween stackage's constraints and the project's
  own constraints and for that\nreason we'll usually have to download the `cabal.config`
  from\nstackage[^stackage-config-url-path] and comment out lines that are conflicted.\n\n[^stackage-config-url-path]:
  The URL path to download this file from is\n  `/resolver/cabal.config`. The latest
  nightly is always at\n  https://www.stackage.org/nightly/cabal.config.\n\nWe don't
  expect any packages to impose constraints on their dependencies at the\npackage
  level, in their `.cabal` files, but if they do then these constraints\nmust fit
  with constraints at the project level.\n\n### 2. Constraints\n\nIn constraints[^constraints]
  put published packages that you want to use that are\nnot on stackage or if they
  are on stackage where you want to use a different\nversion.\n\n[^constraints]: To
  stack, constraints and source repository packages are\n    both `extra-deps`. We
  use cabal-like nomenclature but, be warned, cabal\n    constraints cover more than
  just `package ==version`, such as flags:\n    ```cabal\n    constraints:\n        bson
  -_old-network\n      , HaXml +splitbase\n    ```\n\n```dhall\n[ { dep = \"diagrams-postscript\",
  ver = \"1.5\" }\n, { dep = \"diagrams-svg\", ver = \"1.4.3\" }\n]\n```\n\nThe type
  of constraints is a list of records with dependency and version fields:\n\n```dhall\nList
  { dep : Text, ver : Text }\n```\n\n### 3. Source Repository Packages\n\nThere are
  various reasons to depend on source packages and forks of source\npackages; to keep
  a mirror within your organization, to add fixes that haven't been\nupstreamed yet,
  or to pick up a fix someone else has made but hasn't yet been merged\nupstream,
  released and published.\n\n```\nproject-dhall\n└── ghc-x.y.z\n    ├── deps-external.dhall
  \   ▨ List { loc : Text, tag : Text, sub : List Text }\n    ├── deps-internal.dhall
  \   ▨ List { loc : Text, tag : Text, sub : List Text }\n    ├── forks-external.dhall
  \  ▨ List { loc : Text, tag : Text, sub : List Text }\n    └── forks-internal.dhall
  \  ▨ List { loc : Text, tag : Text, sub : List Text }\n```\n\nThe type of these
  files are all the same. They contain a list of records with\nfields for location,
  tag (commit SHA) and subdirectories:\n\n```dhall\nList { loc : Text, tag : Text,
  sub : List Text }\n```\n\nAny empty `sub` field must be type annotated like this
  `[] : List Text`. Each\nsource repository package record will bring in one dependency
  or as many as\nthere are `sub` fields.\n\nThese source repository `*.dhall` files
  are for original work from your\norganisation (internal) and from third parties
  (external) and for internal and\nexternal forks. If using the empty list in any
  one of these files then use an\nexplicit type annotation:\n\n```dhall\n[] : List
  { loc : Text, tag : Text, sub : List Text }\n```\n\n### 4. Package Groups\nIn the
  `pkgs` folder, create one or more groups for related packages.\n\n```\nproject-dhall\n├──
  ghc-x.y.z\n├── pkgs\n│   ├── db.dhall      ▨ List Text\n│   ├── server.dhall  ▨
  List Text\n│   └── tools.dhall   ▨ List Text\n└── pkg-groups.dhall  ▨ List Text\n```\n\nThe
  contents of each group is a `List Text` of relative paths to folders\ncontaining
  package `.cabal` files.\n\n```dhall\n-- ./project-dhall/pkgs/tools.dhall\n[ \"tool/linter/\"\n,
  \"tool/formatter/\"\n]\n```\n\nList the package groups in `pkg-groups.dhall`[^pkg-groups].
  A good order to use\nis the order of cabal constraint solving that you may witness
  when upgrading a\nproject and seeing solving failures.\n\n[^pkg-groups]: Dhall can't
  do arbitrary IO like reading files from a folder.\n\n```dhall\n-- ./project-dhall/pkg-groups.dhall\n[
  \"tools\"\n, \"db\"\n, \"server\"\n]\n```\n\nThis gives you control of the imports
  in the generated\n`./project-cabal/pkgs.config`, itself imported into\n`ghc-x.y.z.dhall2config.project`:\n\n*
  Use `CABAL_RELATIVITY=ImportRelative` to be import-compatible with `cabal-3.10`.\n
  \ ```cabal\n  -- ./project-cabal/pkgs.config\n  import: ./pkgs/tools.config\n  import:
  ./pkgs/db.config\n  import: ./pkgs/server.config\n  ```\n* The default of `CABAL_RELATIVITY=ProjectRelative`
  is import-compatible with `cabal-3.8`.\n  ```cabal\n  -- ./project-cabal/pkgs.config\n
  \ import: ./project-cabal/pkgs/tools.config\n  import: ./project-cabal/pkgs/db.config\n
  \ import: ./project-cabal/pkgs/server.config\n  ```\n\n\n```cabal\n-- ./ghc-x.y.z.dhall2config.project\nimport:
  ./project-stackage/lts-m.n.config\n\nimport: ./project-cabal/pkgs.config\n\nimport:
  ./project-cabal/ghc-x.y.z/constraints.config\nimport: ./project-cabal/ghc-x.y.z/deps-external.config\nimport:
  ./project-cabal/ghc-x.y.z/deps-internal.config\nimport: ./project-cabal/ghc-x.y.z/forks-external.config\nimport:
  ./project-cabal/ghc-x.y.z/forks-internal.config\n```\n\n# Upgrading a Project\n\n###
  GHC Upgrade\nFor a GHC compiler upgrade, add another folder to `project-dhall` for
  the\nupgrade from `ghc-u.v.w` to `ghc-x.y.z`:\n\n```\nproject-dhall\n├── ghc-u.v.w\n├──
  ghc-x.y.z\n├── pkgs\n├── pkg-groups.dhall        ▨ List Text\n└── pkgs-upgrade-todo.dhall
  ▨ List Text\n```\n\nAt the start of a GHC upgrade put all packages into\n`project-dhall/pkgs-upgrade-todo.dhall`.
  As the upgrade progresses remove\npackages from this list as you work on them.\n\n###
  Constraint Upgrade\nFor a dependency version upgrade, add or change an entry in
  `constraints.dhall`\nand if that dependency is on stackage for the resolver we're
  using and if the\nversion there differs then comment out that entry in the downloaded\n`project-stackage/resolver-name.config`
  file to avoid impossible constraint\nsolving conflicts with cabal.\n\n### Source
  Repository Upgrade\nFor a source repository upgrade, bump the `tag` field if picking
  up a newer\nversion.\n\nIf the `tag` you were on has been superseded by a published
  version then delete\nthe entry and add a constraint unless the published version
  is already a match\nin the downloaded `cabal.config` file from stackage.\n\n###
  Adding a Fork\nIf you are forking then you'll want to add a record to `fork-internal.dhall`
  and\nthen:\n- If forking a stackage package: comment out the entry in the downloaded
  `cabal.config`\n- If forking a hackage package: delete the matching entry in `constraints.dhall`\n\nUsing
  someone else's fork is the same except add the record to\n`fork-external.dhall`.\n\nUnforking
  goes the other way, remove the `fork-*.dhall` entry and either\nfallback to the
  stackage version or another version for which you'll add an\nentry in `constraints.dhall`.\n\n#
  Getting Started\n\nDhall is a prerequisite.\n\nAs well as other make targets, updo
  can bootstrap itself by adding one of two\nrecipes to `project-files.mk`:\n\n```make\nUPDO_VERSION
  ?= 1.0.0\nHACKAGE := http://hackage.haskell.org/package\nUPDO_URL := ${HACKAGE}/updo-${UPDO_VERSION}/updo-${UPDO_VERSION}.tar.gz\n```\n\n1.
  When opting for the scripts:\n\n```make\nupdo/Makefile:\n\trm -rf updo\n\tcurl -sSL
  ${UPDO_URL} | tar -xz\n\tmv updo-* updo\n\tchmod +x $$(grep -RIl '^#!' updo)\n```\n\n2.
  When opting to install the included executables:\n\n```make\nupdo/Makefile:\n\trm
  -rf updo\n\tcurl -sSL ${UPDO_URL} | tar -xz\n\tcd updo-${UPDO_VERSION}\n\tstack
  install\n\tcd -\n\tmv updo-* updo\n```\n\nInstead of curl and tar, `cabal get` or
  `stack unpack` can unpack package sources.\n\n# Make Targets\n\nIn the root of your
  project, add two files.\n\n```\n.\n├── project-files.mk\n└── project-versions.mk\n```\n\nIn
  `project-versions.mk` set variables for GHC and STACKAGE.\n\n```make\nGHC_VERSION
  := u.v.w\nGHC_UPGRADE := x.y.z\nSTACKAGE_VERSION := lts-j.k\nSTACKAGE_UPGRADE :=
  lts-m.n\n```\n\nHere is a basic set up for `project-files.mk`:\n\n```make\ninclude
  project-versions.mk\ninclude updo/Makefile\n```\n\n### Canonical Targets\n\nWe consider
  the following as canonical project names and no target is required\nto build them
  (they're built by the default `all` target):\n\n```\n$ make -f project-files.mk\n```\n\n-
  `stack.yaml`\n- `cabal.project`\n- `stack.upgrade.yaml`\n- `cabal.upgrade.project`\n\nWe
  use CABAL_VIA and STACK_VIA makefile variables to decide which `ghc-x.y.z`\nprefixed
  projects will be copied to the default project names (`cabal.project`\nand `stack.yaml`).
  This way, Updo will create a single pair of projects for one\nversion of GHC.\n\n###
  GHC-Prefixed Targets\n\nWe can build `ghc-x.y.z` projects explicitly:\n\n```\n$
  make -f project-files.mk ghc-x.y.z.dhall2config.project\n$ make -f project-files.mk
  ghc-x.y.z.dhall2cabal.project\n$ make -f project-files.mk ghc-x.y.z.dhall2stack.yaml\n```\n\n###
  Modified Time Travel\n\nBe careful with modified time that make relies on. If you
  hand-modify a target\nso that it is newer than a prerequisite then make will not
  use its recipe to\nbuild the target. This is easy to do inadvertently with a git
  GUI tool when\ndiscarding changes or by doing a `git restore <project-name>`. As
  git advances\nthe modified time, this is effectively the same as `touch <project-name>`.
  \ To\nrecover from this situation, either;\n- Remove the target with `rm <project-name>`.\n-
  Run make with its `--always-make` flag but be careful with this if\n  bootstrapping
  updo itself within the makefile.\n\n### Lock Files\n\nFor stack, the project and
  its lock are separate targets (`.yaml` and\n`.yaml.lock`).\n\n```\n$ make -f project-files.mk
  ghc-x.y.z.dhall2stack.yaml\ndhall text --file project-dhall/ghc-x.y.z/project-stack.dhall
  > ghc-x.y.z.dhall2stack.yaml\n```\n\n```\n$ make -f project-files.mk ghc-x.y.z.dhall2stack.yaml.lock\nstack
  build --dry-run --stack-yaml ghc-x.y.z.dhall2stack.yaml\n```\n\nWe don't provide
  a make target for cabal `.project.freeze` files, relying\ninstead on a combination
  of constraints, those in the `cabal.config` downloaded\nfrom stackage and those
  we add ourselves to `constraints.dhall`. If you do want\nto freeze anyway there's
  a cabal command to generate a freeze file.\n\n```\n$ make -f project-files.mk ghc-x.y.z.dhall2cabal.project\ndhall
  text --file project-dhall/ghc-x.y.z/project-cabal.dhall > ghc-x.y.z.dhall2cabal.project\n```\n\n#
  Clean GHC-Prefixed Projects\n\nThere's a make target to remove all `ghc-x.y.z` prefixed
  projects:\n\n```\n$ make -f project-files.mk clean\nrm -f ghc-*.stack.* ghc-*.dhall2config.*
  ghc-*.dhall2cabal.* ghc-*.dhall2stack.*\nghc-*.stack2cabal.* ghc-*.cabal2stack.*
  ghc-*.dhall2yaml2stack.* ghc-*.sha256map.nix\n```\n\n# GHC-Prefixed Projects as
  Temporary\n\nTo treat `ghc-x.y.z` prefixed files as temporary, add lines like these
  to\n`project-files.mk`:\n\n```make\n.INTERMEDIATE: ghc-$(GHC_VERSION).dhall2config.project\n.INTERMEDIATE:
  ghc-$(GHC_VERSION).dhall2cabal.project\n.INTERMEDIATE: ghc-$(GHC_VERSION).dhall2stack.yaml\n.INTERMEDIATE:
  ghc-$(GHC_VERSION).sha256map.nix\n```\n\n# SHA256 Map Generation Method\n\nWith
  this snippet from `project-files.mk`, we can switch between two methods of\ngenerating
  `ghc-x.y.z.sha256map.nix`.\n\n```make\n# How to generate project-nix/ghc-$(GHC_VERSION)/sha256map.nix?\n#
  This is copied from ghc-$(GHC_VERSION).sha256map.nix.\n#  - false to generate from
  *.dhall inputs via sha256map.hs.\n#  - true to generate from stack.yaml via sha256map.py.\nSHA256MAP_VIA_PYTHON
  ?= false\n\n# If true, generate the sha256map from the stack.yaml with python,\n#
  overriding the recipe for this target.\nifeq ($(SHA256MAP_VIA_PYTHON), true)\nghc-$(GHC_VERSION).sha256map.nix:
  stack.yaml\n\tupdo/project-nix/sha256map.py <$^ >$@\nendif\n```\n\nThe default is
  to use the `sha256map.hs` script to generate\nit[^replacing_versions]:\n\n[^replacing_versions]:
  Using ghc-x.y.z and lts-m.n in the example output, not\n  the actual GHC version
  or resolver.\n\n```\n$ make -f project-files.mk ghc-x.y.z.sha256map.nix\necho \\\n
  \ '[./project-dhall/ghc-x.y.z/deps-external.dhall\n  , ./project-dhall/ghc-x.y.z/deps-internal.dhall\n
  \ , ./project-dhall/ghc-x.y.z/forks-external.dhall\n  , ./project-dhall/ghc-x.y.z/forks-internal.dhall\n
  \ , ([] : List {loc : Text, tag : Text, sub : List Text})\n  ]' \\\n  | ./updo/project-nix/sha256map.hs
  > ghc-x.y.z.sha256map.nix\n```\n\nTo use the `sha256map.py` script instead that
  is much slower:\n\n```\n$ SHA256MAP_VIA_PYTHON=true \\\n  make -f project-files.mk
  project-nix/ghc-x.y.z/sha256map.nix\nupdo/project-nix/sha256map.py <stack.yaml >ghc-x.y.z.sha256map.nix\nmkdir
  -p project-nix/ghc-x.y.z && cp ghc-x.y.z.sha256map.nix project-nix/ghc-x.y.z/sha256map.nix\nrm
  ghc-x.y.z.sha256map.nix\n\n```\n\nYou can [read more about Updo Nix](project-nix#readme)
  and its use with\nhaskell.nix.\n\n# Installed Exes or Scripts\n\nTo use the executables
  of Updo's own package, by default, instead of its\nscripts, add these lines to `project-files.mk`:\n\n```make\nSHA256MAP_HS_EXE
  ?= true\nPKG_GROUPS_HS_EXE ?= true\nPKGS_SORTED_HS_EXE ?= true\nPKGS_UPGRADE_DONE_HS_EXE
  ?= true\n```\n\n### Why Dhall for Configuration?\n\nDhall has excellent imports
  and is an intentionally limited typed programming\nlanguage. We use dhall's `text`
  command to write cabal and stack projects using\n[dhall text templating][dhall-text-templating].\n\nThe
  `dhall` executable comes with a `format` command[^format-lsp]. This helps in\nthe
  maintenance of the various `.dhall` files.\n\nAn example of the limits of the language
  we encountered in Updo is not being\nable to compare anything but `Natural` values.
  Sorting something like `List\nText` is not possible but there is great interop with
  Haskell so this can be\ndone over there as we do with scripts.\n\n## Acknowledgements\n\nI
  already knew Dhall well from maintaining hpack-dhall. Thanks Simon Hengel for\nsuggesting
  I take over its maintenance.\n\nFP Complete is the corporate sponsor of this tooling.
  Thanks to my collegues;\nDaniel Herrera Rendón for first seeing this could work,
  Neil Mayhew for makefile\ntips and tricks, Abel Sen for careful reviews and thoughtful
  suggestions and\nEduardo Lemos Rocha for advocacy and enthusiasm.\n\nPlease contact
  me for any questions, problems, suggestions or the like.\nMaintenance of Updo will
  be coming from me and not FP Complete.\n\nUpdo grew to fill a need after every other
  way I could find to maintain projects\nwas unsatisfactory for the specific problem
  I had, herding hundreds of packages\nand their dependencies into buildable projects
  over two compiler versions for\nboth cabal and stack.  The more I use it, the more
  I love it as a fast, simple\nand appropriate solution for maintaining Haskell projects.\n\nThanks
  FP Complete.\n\n[^format-lsp]: Formatting is also available with the [Dhall LSP
  Server][LSP].\n\n[dhall-text-templating]: https://www.haskellforall.com/2017/06/dhall-is-now-template-engine.html\n[LSP]:
  https://github.com/PanAeon/vscode-dhall-lsp-server\n"
license-name: MPL-2.0
