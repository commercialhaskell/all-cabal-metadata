all-versions:
- 0.0.1.1
- 0.0.1.2
- 0.0.1.3
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.0.3.1
- 0.0.4.0
- 0.0.4.1
- 0.0.4.2
- 0.0.4.3
- 0.0.4.4
author: Patrick Brisbin
basic-deps:
  Glob: '>=0.9.0'
  aeson: '>=1.3.0.0'
  base: '>=4.11.0 && <5'
  bugsnag-haskell: '>=0'
  bytestring: '>=0.10.12.0'
  case-insensitive: '>=1.2.1.0'
  containers: '>=0.6.2.1'
  http-client: '>=0.6.4.1'
  http-client-tls: '>=0.3.5.3'
  http-conduit: '>=2.3.8'
  http-types: '>=0.12.3'
  iproute: '>=1.7.11'
  network: '>=3.1.1.1'
  parsec: '>=3.1.14.0'
  template-haskell: '>=2.16.0.0'
  text: '>=1.2.4.1'
  th-lift-instances: '>=0.1.18'
  time: '>=1.9.3'
  ua-parser: '>=0.7.6.0'
  unliftio: '>=0.2.18'
  wai: '>=3.2.3'
  warp: '>=3.3.16'
  yesod-core: '>=1.6.20.1'
changelog: |
  ## [_Unreleased_](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.4.4...main)

  - None

  ## [v0.0.4.4](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.4.3...v0.0.4.4)

  - Remove the orphan instance ToJSON ByteString

  ## [v0.0.4.3](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.4.2...v0.0.4.3)

  - Include `package.yaml` in release tarball

    We read `default-extensions` out of it for doctests.

  ## [v0.0.4.2](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.4.1...v0.0.4.2)

  - Support Aeson 2.0

  ## [v0.0.4.1](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.4.0...v0.0.4.1)

  - Fix invalid URLs in Request tab (missing leading `/`s in paths)

  ## [v0.0.4.0](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.3.1...v0.0.4.0)

  - Fixed serialization of headers in BugsnagRequest

    Previously, headers were a list of:

    ```
    [(CI ByteString, ByteString)]
    ```

    So they serialized as an array, but Bugsnag only accepts objects for headers.

    To solve this, the `newtype BugsnagRequestHeaders` wraps the headers and has a
    correct `ToJSON` instance.

  ## [v0.0.3.1](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.3.0...v0.0.3.1)

  - Tag SomeException with the underlying exception class

  ## [v0.0.3.0](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.2...v0.0.3.0)

  - Fix sensitive request header redacting
  - Remove `defaultBeforeNotify`

  ## [v0.0.2.2](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.1...v0.0.2.2)

  Packaging changes only.

  ## [v0.0.2.1](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.2.0...v0.0.2.1)

  - Set StackFrame as in-project based on the `CodeIndex` when present
  - Correctly parse `throwString` exceptions with newlines in the message

  ## [v0.0.2.0](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.1.3...v0.0.2.0)

  - Add `CodeIndex` support

    Adds a Template Haskell function to read your project source into an in-memory
    Map structure to be set on your `BugsnagSettings` value. Then, as part of
    notification, we can attach lines of source context to the StackFrames we
    have. NOTE: This has memory-footprint implications, so is entirely opt-in.

    See https://github.com/pbrisbin/bugsnag-haskell/pull/39

  ## [v0.0.1.3](https://github.com/pbrisbin/bugsnag-haskell/compare/v0.0.1.2...v0.0.1.3)

  - Redact sensitive request headers by default
    [#31](https://github.com/pbrisbin/bugsnag-haskell/issues/31)

    **NOTE**: this wasn't actually working at this point. It is actually fixed in
    v0.0.3.0.

  - Deprecate Settings that should be `BeforeNotify` values
    [#32](https://github.com/pbrisbin/bugsnag-haskell/issues/32)
  - `bugsnagShouldNotify` operates after any `BeforeNotify` changes

  ## [v0.0.1.2](https://github.com/pbrisbin/bugsnag-haskell/tree/v0.0.1.2)

  - Make App Version an opaque `Text`, not a structured `Version`
    ([@MaxGabriel](https://github.com/pbrisbin/bugsnag-haskell/pull/29))

  ## [v0.0.1.1](https://github.com/pbrisbin/bugsnag-haskell/tree/v0.0.1.1)

  First (pre-) released version.
changelog-type: markdown
description: |
  # Bugsnag error reporter for Haskell

  [![CI](https://github.com/pbrisbin/bugsnag-haskell/actions/workflows/ci.yml/badge.svg)](https://github.com/pbrisbin/bugsnag-haskell/actions/workflows/ci.yml)
  [![Stackage nightly](https://github.com/pbrisbin/bugsnag-haskell/actions/workflows/nightly.yml/badge.svg)](https://github.com/pbrisbin/bugsnag-haskell/actions/workflows/nightly.yml)

  Catch and report exceptions in your Haskell code.

  ## Configuration

  ```hs
  settings <- newBugsnagSettings "BUGSNAG_API_KEY"
  ```

  See
  [`Network.Bugsnag.Settings`](http://hackage.haskell.org/package/bugsnag-haskell/docs/Network-Bugsnag-Settings.html).

  ## Reporting an Error

  ```hs
  notifyBugsnag settings $ toException
      $ bugsnagException "Error" "message"
          [ $(currentStackFrame) "myFunction"
          ]
  ```

  See
  [`Network.Bugsnag.Notify`](http://hackage.haskell.org/package/bugsnag-haskell/docs/Network-Bugsnag-Notify.html).

  ## Throwing & Catching

  Throw a `BugsnagException` yourself:

  ```hs
  throw
      $ bugsnagException "Error" "message" [$(currentStackFrame) "myFunction"]
  ```

  Catch any exceptions, notify, and re-throw it:

  ```hs
  myFunction `catch` \ex -> do
      notifyBugsnag settings ex
      throw ex
  ```

  ## Examples

  - [Simple](./examples/simple/Main.hs)
  - [Command-Line](./examples/cli/Main.hs)
  - [WAI/Warp](./examples/warp/Main.hs)
  - [Yesod](./examples/yesod/Main.hs)

  Examples can be built locally with:

  ```console
  stack build --flag bugsnag-haskell:examples
  ```

  ## Contributing

  See [CONTRIBUTING](./CONTRIBUTING.md).

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
description-type: markdown
hash: 8564478f73f06b973b723ef3baedb7667de84247b54a402f85f5b93145eb1cb7
homepage: https://github.com/pbrisbin/bugsnag-haskell#readme
latest: 0.0.4.4
license-name: MIT
maintainer: pbrisbin@gmail.com
synopsis: Bugsnag error reporter for Haskell
test-bench-deps:
  aeson: '>=1.5.6.0'
  aeson-qq: '>=0.8.3'
  base: '>=4.11.0 && <5'
  bugsnag-haskell: '>=0'
  doctest: '>=0.17'
  hspec: '>=2.7.10'
  text: '>=1.2.4.1'
  time: '>=1.9.3'
  unliftio: '>=0.2.18'
  yaml: '>=0.11.5.0'
