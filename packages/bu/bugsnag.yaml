homepage: https://github.com/pbrisbin/bugsnag-haskell#readme
changelog-type: markdown
hash: 0b5454bbf8527fc6e7f6fdbd4f21e0c1ce0387b690ee59175470d648f49a8cdc
test-bench-deps:
  unliftio: '>=0.2.12'
  base: '>=4.11.0 && <5'
  hspec: '>=2.7.1'
  text: '>=1.2.3.1'
  bugsnag: -any
maintainer: pbrisbin@gmail.com
synopsis: Bugsnag error reporter for Haskell
changelog: |
  ## [_Unreleased_](https://github.com/pbrisbin/bugsnag-haskell/compare/bugsnag-v1.0.0.0...main)

  - None

  ## [v1.0.0.0](https://github.com/pbrisbin/bugsnag-haskell/tree/bugsnag-v1.0.0.0)

  First released version.

  ---

  For CHANGELOG details prior to the package re-organization, see
  [`archive/CHANGELOG.md`](../archive/CHANGELOG.md).
basic-deps:
  http-client: '>=0.6.4'
  bytestring: '>=0.10.8.2'
  base: '>=4.11.0 && <5'
  unordered-containers: '>=0.2.10.0'
  bugsnag-hs: '>=0.2.0.8'
  text: '>=1.2.3.1'
  parsec: '>=3.1.14.0'
  ua-parser: '>=0.7.5.1'
  th-lift-instances: '>=0.1.14'
  containers: '>=0.6.0.1'
  http-client-tls: '>=0.3.5.3'
  bugsnag: -any
  Glob: '>=0.9.0'
  template-haskell: '>=2.14.0.0'
all-versions:
- 1.0.0.0
author: Patrick Brisbin
latest: 1.0.0.0
description-type: markdown
description: |
  # Bugsnag error reporter for Haskell

  Catch exceptions in your Haskell code and report then to Bugsnag.

  ## Configuration

  ```hs
  let settings = defaultSettings "A_BUGSNAG_API_KEY"
  ```

  ## Manual Reporting

  `Data.Bugsnag.Exception` is the type of actual exceptions included in the event
  reported to Bugsnag. Constructing it directly can be useful to attach the
  current source location as a stack frame.

  ```hs
  let
    ex = defaultException
      { exception_errorClass = "Error"
      , exception_message = Just "message"
      , exception_stacktrace = [$(currentStackFrame) "myFunction"]
      }
  ```

  In order to treat it like an actual Haskell `Exception` (including to report
  it), wrap it in `AsException`:

  ```hs
  notifyBugsnag settings $ AsException ex
  ```

  ## Catching & Throwing

  Catch any exceptions, notify, and re-throw:

  ```hs
  myFunction `withException` notifyBugsnag @SomeException settings
  ```

  Throw a manually-built exception:

  ```hs
  throwIO $ AsException ex
  ```

  ## Examples

  - [Simple](./examples/simple/Main.hs)
  - [Command-Line](./examples/cli/Main.hs)

  Examples can be built locally with:

  ```console
  stack build --flag bugsnag:examples
  ```

  ## `bugsnag-hs`

  We depend on `bugsnag-hs` to define the types for the full reporting API
  payload. Unfortunately, it exposes them from its own `Network.Bugsnag` module,
  which conflicts with ourselves.

  To get around this, we re-export that whole module as `Data.Bugsnag`. If you are
  currently depending on `bugsnag-hs` and wish to use our package too, we
  recommend you only depend on us and use its types through the `Data.Bugsnag`
  re-export.

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
