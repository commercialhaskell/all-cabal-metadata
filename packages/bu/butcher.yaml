homepage: https://github.com/lspitzner/butcher/
changelog-type: markdown
hash: 9513d3bba9c58a43199c43d856dd3901d374117406fb438786dddef6ad8639b1
test-bench-deps:
  free: -any
  microlens-th: -any
  butcher: -any
  extra: -any
  unsafe: -any
  base: <999
  hspec: -any
  deque: -any
  multistate: -any
  containers: -any
  mtl: -any
  transformers: -any
  pretty: -any
  microlens: -any
maintainer: Lennart Spitzner <hexagoxel@hexagoxel.de>
synopsis: Chops a command or program invocation into digestable pieces.
changelog: |
  # Revision history for butcher

  ## 1.3.3.2  -- June 2020

  * Support ghc-8.10
  * Drop support for ghc < 8.4
  * Fix a somewhat hidden issue in the cabal file
  * Add support for building / testing via haskell.nix nixpkgs overlay

  ## 1.3.3.1  -- April 2020

  * Fix a cabal file mistake

  ## 1.3.3.0  -- April 2020

  * Fix bug with params with default when parsing from commandline
  * Add the `descendDescTo` function

  ## 1.3.2.3  -- June 2019

  * Fix broken build when using deque>=0.3

  ## 1.3.2.2  -- June 2019 (broken, disabled on hackage)

  * Fix too-shallow descriptions on siblings for partial parses returned
    for interactive usage

  ## 1.3.2.1  -- October 2018

  * Adapt/Use latest version of `deque` to fix ghc-8.6 problems

  ## 1.3.2.0  -- October 2018

  * Fix for simpleCompletion
  * Expose some bindings that were forgotten in previous release
  * Bounds fixed for ghc-8.6 (also via revision in 1.3.1.1)

  ## 1.3.1.1  -- April 2018

  * Fixup version bound

  ## 1.3.1.0  -- April 2018

  * Add/Expose two more functions: addAlternatives and varPartDesc

  ## 1.3.0.1  -- April 2018

  * Support ghc-8.4
  * Drop support for ghc<8

  ## 1.3.0.0  -- February 2018

  * Experimental: Hidden commandparts (do not appear in help)
  * Experimental: Bash completion
  * Add addHelpCommandWith to support user-defined column count
  * Fix help document printing (ribbons)
  * Fix completion behaviour

  ## 1.2.1.0  -- November 2017

  * Fix bug in 'ppUsageWithHelp'
  * some utilities for interactive usage in new module
    `UI.Butcher.Monadic.Interactive`

  ## 1.2.0.0  -- October 2017

  * Rename some `Monadic.Param.*`, deprecate old versions.
      - `addReadParam` -> `addParamRead`
      - `addReadParamOpt` -> `addParamReadOpt`
      - `addStringParam` -> `addParamString`
      - `addStringParamOpt` -> `addParamStringOpt`
      - `addStringParams` -> `addParamStrings`
      - `addRestOfInputStringParam` -> `addParamRestOfInput`
  * Add functions `addParamNoFlagString`, `addParamNoFlagStringOpt`,
    `addParamNoFlagStrings`
  * Fix flag parsing behaviour (ignore initial spaces)

  ## 1.1.1.0  -- October 2017

  * Add `addNullCmd` function that descends into childcommand on an epsilon match
  * Add `addStringParams` function that reads all remaining words

  ## 1.1.0.2  -- September 2017

  * Improve 'usage' pretty-printing

  ## 1.1.0.1  -- August 2017

  * Adapt for ghc-8.2

  ## 1.1.0.0  -- May 2017

  * First version. Released on an unsuspecting world.
basic-deps:
  free: <5.2
  void: <0.8
  microlens-th: <0.5
  extra: <1.8
  unsafe: <0.1
  base: '>=4.11 && <4.17'
  deque: '>=0.3 && <0.5'
  multistate: '>=0.7 && <0.9'
  containers: <0.7
  bifunctors: <5.6
  mtl: <2.3
  transformers: <0.6
  pretty: <1.2
  microlens: <0.5
all-versions:
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.1.0
- 1.2.0.0
- 1.2.1.0
- 1.3.0.0
- 1.3.0.1
- 1.3.1.0
- 1.3.1.1
- 1.3.2.0
- 1.3.2.1
- 1.3.2.2
- 1.3.2.3
- 1.3.3.0
- 1.3.3.1
- 1.3.3.2
author: Lennart Spitzner
latest: 1.3.3.2
description-type: markdown
description: "# butcher\n\n#### Chops a command or program invocation into digestable
  pieces.\n\nSimilar to the `optparse-applicative` package, but less features,\nmore
  flexibility and more evil.\n\nThe main differences are:\n\n* Provides a pure interface
  by default\n\n* Exposes an evil monadic interface, which allows for much nicer binding
  of\n  command part results to some variable name.\n\n    In `optparse-applicative`
  you easily lose track of what field you are\n    modifying after the 5th `<*>` (admittedly,
  i think -XRecordWildCards\n    improves on that issue already.)\n\n    Evil, because
  you are not allowed to use the monad's full power in this\n    case, i.e. there
  is a constraint that is not statically enforced.\n    See below.\n\n* The monadic
  interface allows much clearer definitions of commandparses\n  with (nested) subcommands.
  No pesky sum-types are necessary.\n\n## Examples\n\nThe minimal example is\n\n~~~~.hs\nmain
  = mainFromCmdParser $ addCmdImpl $ putStrLn \"Hello, World!\"\n~~~~\n\nBut lets
  look at a more feature-complete example:\n\n~~~~.hs\nmain = mainFromCmdParserWithHelpDesc
  $ \\helpDesc -> do\n\n  addCmdSynopsis \"a simple butcher example program\"\n  addCmdHelpStr
  \"a very long help document\"\n\n  addCmd \"version\" $ do\n    porcelain <- addSimpleBoolFlag
  \"\" [\"porcelain\"]\n      (flagHelpStr \"print nothing but the numeric version\")\n
  \   addCmdHelpStr \"prints the version of this program\"\n    addCmdImpl $ putStrLn
  $ if porcelain\n      then \"0.0.0.999\"\n      else \"example, version 0.0.0.999\"\n\n
  \ addCmd \"help\" $ addCmdImpl $ print $ ppHelpShallow helpDesc\n\n  short <- addSimpleBoolFlag
  \"\" [\"short\"]\n    (flagHelpStr \"make the greeting short\")\n  name <- addStringParam
  \"NAME\"\n    (paramHelpStr \"your name, so you can be greeted properly\")\n\n  addCmdImpl
  $ do\n    if short\n      then putStrLn $ \"hi, \" ++ name ++ \"!\"\n      else
  putStrLn $ \"hello, \" ++ name ++ \", welcome from butcher!\"\n~~~~\n\nFurther:\n\n-
  [Full description of the above example, including sample behaviour](example1.md)\n-
  [Example of a pure usage of a CmdParser](example2.md)\n- [Example of using a CmdParser
  on interactive input](example3.md)\n- The [brittany](https://github.com/lspitzner/brittany)
  formatting tool is a\n  program that uses butcher for implementing its commandline
  interface. See\n  its [main module source](https://github.com/lspitzner/brittany/blob/master/src-brittany/Main.hs)\n
  \ or [the config flag parser](https://github.com/lspitzner/brittany/blob/master/src/Language/Haskell/Brittany/Config.hs).\n\n##
  The evil monadic interface\n\nAs long as you only use Applicative or (Kleisli) Arrow,
  you can use the\ninterface freely. When you use Monad, there is one rule: Whenever
  you read\nany command-parts like in\n\n~~~~\nf <- addFlag ...\np <- addParam ...\n~~~~\n\nyou
  are only allowed to use bindings bound thusly in any command's\nimplemenation, i.e.
  inside the parameter to `addCmdImpl`. You are _not_\nallowed to force/inspect/patternmatch
  on them before that. _good_ usage is:\n\n~~~~\naddCmdImpl $ do\n  print x\n  print
  y\n~~~~\n\nwhile _bad_ would be\n\n~~~~\nf <- addFlag\nwhen f $ do\n  p <- addParam\n
  \ -- evil: the existence of the param `p`\n  -- depends on parse result for the
  flag `f`.\n~~~~\n\nThat means that checking if a combination of flags is allowed
  must be done\nafter parsing. (But different commands and their subcommands (can)
  have\nseparate sets of flags.)\n\n## (abstract) Package intentions\n\nConsider a
  commandline invocation like \"ghc -O -i src -Main.hs -o Main\". This\npackage provides
  a way for the programmer to simultaneously define the\nsemantics of your program
  based on its arguments and retrieve documentation\nfor the user. More specifically,
  i had three goals in mind:\n\n1. Straight-forward description of (sub)command and
  flag-specific behaviour\n2. Extract understandable usage/help commandline documents/texts
  from that\n   descriptions, think of `ghc --help` or `stack init --help`.\n3. Extract
  necessary information to compute commandline completion results\n   from any partial
  input. (This is not implemented to any serious degree.)\n\n## Semantics\n\nBasic
  elements of a command are flags, parameters and subcommands. These can\nbe composed
  in certain ways, i.e. flags can have a (or possibly multiple?)\nparameters; parameters
  can be grouped into sequences, and commands can have\nsubcommands.\n\nCommands are
  essentially `String -> Either ParseError out` where `out` can\nbe chosen by the
  user. It could for example be `IO ()`.\n\nTo allow more flexible composition, the
  parts of a command have the \"classic\"\nparser's type: `String -> Maybe (p, String)`
  where `p` depends on the part.\nParse a prefix of the input and return something
  and the remaining input, or\nfail with `Nothing`.\n\nA command-parser contains a
  sequence of parts and then a number of subcommands\nand/or some implementation.
  \n\n### Commands and Child-Commands\n\n- ~~~~ .hs\n  myParser :: CmdParser Identity
  Int ()\n  myParser = return ()\n  ~~~~\n\n  input | `runCmdParserSimple input myParser`\n
  \ ----- | -------------\n  \"\" | Left \"command has no implementation\"\n  \"x\"
  | Left \"error parsing arguments: could not parse input/unprocessed input at: \\\"x\\\".\"\n\n-
  ~~~~ .hs\n  myParser :: CmdParser Identity Int ()\n  myParser = do\n    addCmd \"foo\"
  $ addCmdImpl 2\n    addCmd \"bar\" $ addCmdImpl 3\n    addCmd \"noimpl\" $ pure
  ()\n    addCmd \"twoimpls\" $ do\n      addCmdImpl 4\n      addCmdImpl 5\n    addCmdImpl
  1\n  ~~~~\n  \n  input | `runCmdParserSimple input myParser`\n  ----- | -------------\n
  \ \"\" | Right 1\n  \"x\" | Left \"error parsing arguments: could not parse input/unprocessed
  input at: \\\"x\\\".\"\n  \"foo\" | Right 2\n  \"bar\" | Right 3\n  \"foo bar\"
  | Left \"error parsing arguments: could not parse input/unprocessed input at: \\\"bar\\\".\"\n
  \ \"noimpl\" | Left \"command has no implementation\"\n  \"twoimpls\" | Right 5\n\n###
  Flags\n\n- without any annotation, no reodering is allowed and the flags must appear
  in order:\n  ~~~~ .hs\n  myParser :: CmdParser Identity (Bool, Int, Int) ()\n  myParser
  = do\n    b <- addSimpleBoolFlag \"b\" [] mempty\n    c <- addSimpleCountFlag \"c\"
  [] mempty\n    i <- addFlagReadParam \"i\" [] \"number\" (flagDefault 42)\n    addCmdImpl
  $ (b, c, i)\n  ~~~~\n  \n  input | `runCmdParserSimple input myParser`\n  -----
  | -------------\n  \"\" | Right (False,0,42)\n  \"-b -c -i 3\" | Right (True,1,3)\n
  \ \"-c -b\" | Left \"error parsing arguments: could not parse input/unprocessed
  input at: \\\"-b\\\".\"\n  \"-c -c -c\" | Right (False,3,42)\n\n- this time with
  reordering; also \"j\" has no default and thus becomes mandatory, still it must
  not\n  occur more than once:\n  ~~~~ .hs\n  myParser :: CmdParser Identity (Bool,
  Int, Int, Int) ()\n  myParser = do\n    reorderStart -- this time with reordering\n
  \   b <- addSimpleBoolFlag \"b\" [] mempty\n    c <- addSimpleCountFlag \"c\" []
  mempty\n    i <- addFlagReadParam \"i\" [] \"number\" (flagDefault 42)\n    j <-
  addFlagReadParam \"j\" [] \"number\" mempty -- no default: flag mandatory\n    reorderStop\n
  \   addCmdImpl $ (b, c, i, j)\n  ~~~~\n  \n  input | `runCmdParserSimple input myParser`\n
  \ ---------------------------- | -------------\n  \"-b\" | Left \"error parsing
  arguments:<br>could not parse expected input -j number with remaining input:<br>InputString
  \\\"\\\" at the end of input.\"\n  \"-j=5\" | Right (False,0,42,5)\n  \"-c -b -b
  -j=5\" | Right (True,1,42,5)\n  \"-j=5 -i=1 -c -b\" | Right (True,1,1,5)\n  \"-c
  -j=5 -c -i=5 -c\" | Right (False,3,5,5)\n  \"-j=5 -j=5\" | Left \"error parsing
  arguments: could not parse input/unprocessed input at: \\\"-j=5\\\".\"\n\n- addFlagReadParams
  - these can occur more than once. Note that defaults have slightly different semantics:\n
  \ ~~~~ .hs\n  myParser :: CmdParser Identity (Int, [Int]) ()\n  myParser = do\n
  \   reorderStart\n    i <- addFlagReadParam \"i\" [] \"number\" (flagDefault 42)\n
  \   js <- addFlagReadParams \"j\" [] \"number\" (flagDefault 50)\n    reorderStop\n
  \   addCmdImpl $ (i, js)\n  ~~~~\n  \n  input | `runCmdParserSimple input myParser`\n
  \ ---------------------------- | -------------\n  \"\" | Right (42,[])\n  \"-i\"
  | Left \"error parsing arguments: could not parse input/unprocessed input at: \\\"-i\\\".\"\n
  \ \"-j=1 -j=2 -j=3\" | Right (42,[1,2,3])\n  \"-j\" | Right (42,[50])\n  \"-i=1\"
  | Right (1,[])\n  \"-j=2\" | Right (42,[2])\n  \"-j=2 -i=1 -j=3\" | Right (1,[2,3])\n
  \ \n### Params\n\nTODO\n\n\n\n"
license-name: BSD-3-Clause
