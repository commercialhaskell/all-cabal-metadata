all-versions:
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 1.0.1
author: Benjamin Fischer
basic-deps:
  base: '>=4.7 && <5'
  buffet: '>=0'
changelog: ''
changelog-type: ''
description: "# Buffet \U0001F35C\n\n![Build](https://github.com/evolutics/buffet/workflows/build/badge.svg)\n[![Package](https://img.shields.io/hackage/v/buffet)](https://hackage.haskell.org/package/buffet)\n\nAssemble
  many Dockerfiles in a single Dockerfile. This gives you the convenience of one Docker
  image with your favorite tools while keeping a separate Dockerfile per tool.\n\n<details>\n<summary>Demo
  example</summary>\n\nA Dockerfile for Prettier\n\n```dockerfile\nFROM alpine:3.12.0\nRUN
  apk add --no-cache yarn~=1.22 \\\n && yarn global add prettier@2.1.2\nWORKDIR /workdir\n```\n\nplus
  a Dockerfile for HTML Tidy\n\n```dockerfile\nFROM alpine:3.12.0\nRUN apk add --no-cache
  tidyhtml~=5.6\nWORKDIR /workdir\n```\n\nare automatically assembled in a single
  Dockerfile\n\n```dockerfile\nFROM alpine:3.12.0\nRUN apk add --no-cache yarn~=1.22
  \\\n && yarn global add prettier@2.1.2 \\\n && apk add --no-cache tidyhtml~=5.6\nWORKDIR
  /workdir\n```\n\nYou can try this yourself by running\n\n```bash\nbuffet assemble
  examples/minimal_demonstration\n```\n\n</details>\n\nSee [Code Cleaner Buffet](https://github.com/evolutics/code-cleaner-buffet)
  for an application of this.\n\n## Installation\n\nFor a **quick start,** use the
  Docker image [`evolutics/buffet`](https://hub.docker.com/r/evolutics/buffet). I
  recommend a Bash alias like\n\n```bash\nalias buffet='docker run --rm --volume \"$(pwd)\":/workdir
  evolutics/buffet'\n```\n\nYou are ready when\n\n```bash\nbuffet --help\n```\n\nworks.\n\nAlternatively,
  you can do a **native** installation with `stack install buffet` or `cabal install
  buffet`.\n\n## Usage example\n\nSay we work on a simple website with HTML code that
  we would like to format, clean up, and validate. For this purpose, we choose the
  tools Prettier and HTML Tidy, which we plan use in continuous integration via a
  Docker image.\n\nFor the following, we assume you first run\n\n```bash\ngit clone
  https://github.com/evolutics/buffet.git\ncd buffet\n```\n\nThe source code for this
  and other examples is in the **[`examples`](examples) folder.**\n\n### Assembling\n\nIn
  the subfolders of [`examples/quick_start`](examples/quick_start), you see a [Dockerfile
  for Prettier](examples/quick_start/prettier/Dockerfile) and another [Dockerfile
  for HTML Tidy](examples/quick_start/tidy/Dockerfile). These Dockerfiles (called
  \"dishes\") are the modular toy blocks, which we now **automatically combine** to
  one Dockerfile (called \"buffet\") by running\n\n```bash\nbuffet assemble examples/quick_start\n```\n\nThis
  prints a Dockerfile based on the subfolders of `examples/quick_start` to stdout.
  From this, we can then build a Docker image `mona_linta` with\n\n```bash\nbuffet
  assemble examples/quick_start | docker build --tag mona_linta -\n```\n\nNote the
  hyphen `-` at the end that makes Docker read the Dockerfile from stdin.\n\n### Testing\n\nAs
  a demo that our Docker image works as expected, run\n\n```bash\ndocker run -it --rm
  mona_linta\nprettier --version\ntidy --version\n```\n\nTo integrate a check like
  `prettier --version` as a test of the tool installation, add a `HEALTHCHECK` instruction
  as you see in the [Dockerfile for Prettier](examples/quick_start/prettier/Dockerfile).
  The exit status of such a command is then reported when you run our example **test
  suite** with\n\n```bash\nbuffet test --arguments examples/quick_start/test_arguments.yaml
  \\\n  examples/quick_start\n```\n\nThis builds a Docker image to then run the tests.
  Only the dishes referred in the file [`test_arguments.yaml`](examples/quick_start/test_arguments.yaml)
  are tested.\n\n**Note:** As `buffet test â€¦` executes Docker commands, a [native
  installation](#installation) is required here.\n\nIf you like, try adding a test
  for HTML Tidy.\n\n### Documenting\n\nYou can generate documentation with\n\n```bash\nbuffet
  document --template examples/quick_start/document_template.md.mustache \\\n  examples/quick_start\n```\n\nThis
  renders the template [`document_template.md.mustache`](examples/quick_start/document_template.md.mustache).
  To print the raw **template context,** omit this option as in\n\n```bash\nbuffet
  document examples/quick_start\n```\n\nAmong others, data from `LABEL` instructions
  is integrated in the template context.\n\n### API usage\n\nYou may like to programmatically
  process the parsed source Dockerfiles. To print an intermediate representation in
  JSON, run\n\n```bash\nbuffet parse examples/quick_start\n```\n\n## Terminology\n\n-
  **Buffet:** A Dockerfile automatically assembled based on many dishes.\n- **Dish:**
  A Dockerfile, usually providing a specific command-line tool.\n- **Menu:** Configuration
  with a list of dishes to be assembled in a buffet.\n"
description-type: markdown
hash: 6d6057435db54a2d293396b889b52206d02adf1119e7d24125457ab11e2d574c
homepage: https://github.com/evolutics/buffet#readme
latest: 1.0.1
license-name: MIT
maintainer: benjamin.fischer@evolutics.info
synopsis: Assembles many Dockerfiles in one.
test-bench-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  buffet: '>=0'
  bytestring: '>=0'
  directory: '>=0'
  filepath: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  typed-process: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  yaml: '>=0'
