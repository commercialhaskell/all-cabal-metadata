all-versions:
- 0.0.1
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
author: Johannes Gerer
basic-deps:
  Decimal: '>=0.4.2'
  ListLike: '>=0'
  MissingH: '>=0'
  aeson: '>=1.0.0'
  ansi-wl-pprint: '>=0'
  array: '>=0'
  async: '>=0'
  base: '>=4.0.0.0 && <5'
  boxes: '>=0'
  bytestring: '>=0'
  cassava: '>=0.4.1.0'
  containers: '>=0'
  data-default: '>=0'
  deepseq: '>=0'
  directory: '>=0'
  edit-distance: '>=0'
  file-embed: '>=0'
  filepath: '>=0'
  formatting: '>=0'
  hashable: '>=0'
  haskeline: '>=0'
  hint: '>=0'
  hledger: '>=1.1'
  hledger-lib: '>=1.1'
  lens: '>=0'
  lifted-base: '>=0'
  megaparsec: '>=5.0.0'
  monad-control: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0.13'
  parsec: '>=0'
  process: '>=1.1.0.2'
  regex-compat: '>=0'
  regex-tdfa: '>=0'
  regex-tdfa-text: '>=0'
  safe: '>=0'
  semigroups: '>=0'
  split: '>=0'
  strict: '>=0'
  temporary: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  yaml: '>=0'
changelog: ''
changelog-type: ''
description: "# Buchhaltung  [![Build Status](https://travis-ci.org/johannesgerer/buchhaltung.svg?branch=master)](https://travis-ci.org/johannesgerer/buchhaltung)
  [![Hackage](https://img.shields.io/hackage/v/buchhaltung.svg)](https://hackage.haskell.org/package/buchhaltung)\n\n>
  What advantages does he derive from the system of book-keeping by double entry!
  It is among the finest inventions of the human mind; every prudent master of a house
  should introduce it into his economy.\n> -- Johann Wolfgang von Goethe\n\n*Buchhaltung*
  (['bu&#720;&chi;ˌhaltʊŋ], German *book keeping*), written in Haskell, helps you
  keep track of your finances on the command line with minimal effort. It provides
  tools that help you in creating a complete ledger of all your bank and savings accounts',
  credit cards', and other transactions, in a text-based ledger format, that is readable
  by the [ledger CLI tool](http://www.ledger-cli.org/) and its many [derivatives](http://plaintextaccounting.org/).\n\n*
  Fetch your bank transaction directly via FinTS/HBCI/OFXDirectConnect\n* Import transactions
  from \n  * PayPal\n  * Barclaycard Visa\n  * comdirect Visa\n  * Revolut\n  * Barclays
  UK CSV\n  * NatWest International CSV\n  * and Monefy expense tracker app\n  * ...
  or define your own formats\n* Semi-automatically match transactions to accounts
  using Bayesian classification\n* Semi-automatic transaction entry with meaningful
  suggestions in keyboard-based speed mode\n * It is couples/room-mates aware: Create
  several transaction simultaneously (see [Multi-user add](#multi-user-add))\n\n##
  Status & aim\n\nI am actively and successfully using this software since 2010 and
  my ledger now contains more than 12,000 transactions accurately and continuously
  tracking the finances of my spouse and me including four checking and two savings
  accounts, one credit card, two PayPal accounts, two cash wallets in EUR, bitcoin
  trading (both physical and on exchanges) and other currencies like USD, GPB used
  on trips.\n\nThe software is in alpha phase and I am looking for early adopters
  and their use cases. The aim of this stage is to agree about the functionality and
  customizability and produce a first shippable version, that can be used without
  tinkering with the source.\n\nRight now, I am using it on Linux but it should also
  run wherever GHC runs.\n\n# Installation\n\n## Prerequisites\n\n* [Haskell Stack](https://haskell-lang.org/get-started),
  more specifically the [Glasgow Haskell Compiler](https://www.haskell.org/) and [Stack](https://docs.haskellstack.org/en/stable/README/)\n\n
  \ Required to **compile** the software.\n  \n* [AqBanking Command Line Tool](http://www2.aquamaniac.de/sites/aqbanking/index.php)
  (optional)\n\n  This is required for **direct retrieval of bank transactions** via
  FinTS/HBCI/EBICS (Germany) or OFXDirectConnect (USA, Canada, UK). Packages available
  e.g. on Ubuntu (aqbanking-tools) and ArchLinux (aqbanking). (AqBanking is also the
  used by [GnuCash](http://wiki.gnucash.org/wiki/AqBanking) for this purpose.)\n\n*
  [dbacl](http://dbacl.sourceforge.net/) (optional, needed to run [`match`](#match-accounts))\n\n
  \ Bayesian classifier used to **match transaction to accounts**. Packages available
  e.g. on Ubuntu and ArchLinux ([AUR](https://aur.archlinux.org/packages/dbacl/)).\n\n*
  [ledger CLI tool](http://www.ledger-cli.org/) or a compatible [derivative](http://plaintextaccounting.org/)
  (optional)\n\n  ... to **query the ledger, create balance and report statements**,
  [web interface](http://hledger.org/hledger-web.html), etc.\n  \n### Under the hood\n\nAqBanking
  or any other supported CSV source provides the raw transaction data. The `buchhaltung`
  binary converts this data into the ledger format and puts the original source in
  the comments; thereby producing selfcontained transactions without the need for
  an external database or log. These comments  are used later for duplicates detection
  and account classification.\n\nThe `buchhaltung` binary internally uses the great
  `hledger` library. The resulting ledger files can be processed/queried with one
  of the `hledger` tools or any other compatible tool.\n\n\n## Download, compile &
  install\n\n```shell\n# download\ngit clone https://github.com/johannesgerer/buchhaltung.git\ncd
  buchhaltung\n\n\n# compile and install (usually in ~/.local/bin)\nstack install\n\n```\n\n##
  Configure\n\n1. Create a folder that will hold all your config and possibly ledger
  files:\n    \n    ```shell\n    mkdir ~/.buchhaltung\n    cp /path/to/buchhaltung/config.yml
  ~/.buchhaltung/config.yml\n    ```\n    \n    If you want a folder under a different
  location, either create a symlink or set the `BUCHHALTUNG` environment variable
  to that location.\n\n2. Edit the [`config.yml`](config.yml).\n\n3. Make sure the
  configured ledger files exist.\n\n# Getting help\n\n* The [`config.yml`](config.yml)
  file provides excessive comments.\n* This readme documents most functionality.\n*
  Every command and subcommand shows a help message when invoked with `-h`.\n* Read
  the haddock documentation and source code on [Hackage](https://hackage.haskell.org/package/buchhaltung).\n*
  Open an issue.\n* Write an email.\n\n# Usage\n\n## First usage / clean\n\nTo initialize
  AqBanking after you edited the config file, you need to run:\n\n```shell\nbuchhaltung
  setup\n```\n\nTo clean everything aqbanking related remove the configured [`aqBanking.configDir`](config.yml)
  \ and rerun the `setup` command.\n\n### Manual AqBanking setup\n\nCurrently only
  the HBCI `PinTan` method is supported by the `setup` command (pull requests welcome).
  For other methods or if the AqBanking setup fails due to other reasons, you can
  configure AqBanking manually into the configured [`aqBanking.configDir`](config.yml)
  (see for help [here](https://www.aquamaniac.de/sites/download/download.php?package=09&release=09&file=01&dummy=aqbanking4-handbook-20091231.pdf)
  or [here](https://wiki.gnucash.org/wiki/AqBanking), usually via `aqhbci-tool4 -C
  <aqBanking.configDir>`).\n\nSo far, I have not tested the OFXDirectConnect capabilities
  of AqBanking (please share your experiences), but `buchhaltung` should transparently
  support any method offered by AqBanking.\n\n## Importing transactions\n\nThere various
  ways (including from PayPal CSV files) to import transactions into your configured
  [`ledgers.imported`](config.yml) file. They are presented in the following, but
  consult\n\n```shell\nbuchhaltung import -h\n```\n\nand the `-h` calls to its subcommands
  to see the currently available functionality.\n\nThe accounts of the imported transactions
  will be taken from the configured [`bankAccounts`](config.yml) and the offsetting
  balance will be posted to an account named `TODO`, and will be replaced by [`match`](#match-accounts).\n\nThe
  original source information will be included in the second posting's comment and
  used for learning the account mappings and to find and handle duplicates.\n\n###
  AqBanking\n\n```shell\nbuchhaltung update\n```\n\nThis command fetches and imports
  all available transactions from all configured AqBanking connections.\n\nIn order
  to import an existing file in [AqBanking format](https://hackage.haskell.org/package/buchhaltung-0.0.3/docs/buchhaltung/src/Buchhaltung-Importers.html#aqbankingImport),
  use:\n\n```shell\nbuchhaltung import <file.csv> aqbanking\n```\n\n### Other formats\n\nFor
  other CSV formats you have two options:\n\n1) Use the importers for PayPal, Barclaycard
  Visa, comdirect Visa, Revolut, and Monefy expense tracker app.\n\n2) Bring your
  CSV into a currently supported format. The AqBanking format works especially well\n\n3)
  Hack the source, which is fun and should be easy since you only need to\ncopy and
  adapt from the other importers.\n\nYou can look at `aqbankingImporter`, `comdirectVisaImporter`
  and\n`paypalImporter`\nin\n[Buchhaltung/Importers.hs](https://hackage.haskell.org/package/buchhaltung-0.0.3/docs/buchhaltung/Buchhaltung-Importers.html)
  (or on [GitHub](src/Buchhaltung/Importers.hs)).\n\n### Resolve duplicates\n\nBanks
  often minimally change the way they report transactions which leads to unwanted
  duplicates.\n\nWhen importing, *Buchhaltung* will identify duplicates based on `([(Commodity,Quantity)],
  AccountName, Day)` and interactively resolve them by showing the user what fields
  have changed. If there are several candidates, it sorts the candidates according
  to similarity using `levenshteinDistance` from [edit-distance](https://hackage.haskell.org/package/edit-distance-0.2.1.3).
  (See [`Buchhaltung.Uniques.addNew`](src/Buchhaltung/Uniques.hs#L27))\n\n## Match
  accounts\n\n```shell\nbuchhaltung match\n```\n\nThis command asks the user for the
  offsetting accounts of imported transactions, or more specifically, transaction
  whose second posting's account begins with `TODO` and does not match any regex in
  [`ignoredAccountsOnMatch`](config.yml). \n\nHave a look at the example output [here](example_output/match.md).\n\nThe
  significantly speed up this process, it learns the account mapping from existing
  transactions in the configured [`ledgers.imported`](config.yml) file using the original
  source of the imported transaction.\n\nPlease note that you will have to enter account
  information in **reverse order**: for example `Expenses:Food` has to be entered
  as `Food:Expenses`.\nSee [this](#input-and-tab-completion) information about the
  account input field.\n\n\n### Best practices\n \nThe Bayesian classifier can only
  work if similar transactions are always matched with the same account.\n\nConsider
  frequent credit card payments to Starbucks:\n\n* Match them with `Expenses:Food:Starbucks`
  if you know that these should always be booked to that account.\n\n* Match them
  with `Accounts receivable:Starbucks` and [manually enter](#enter-transactions) your
  paper receipts if \n\n    * you want to make sure they charge you the correct amounts.\n
  \   \n    * you sometimes order for friends and get reimbursed later.\n    \n    *
  ...\n\nSee also [this issues](https://github.com/johannesgerer/buchhaltung/issues/16)
  on how you could use this.\n\n## Enter transactions\n\n```shell\nbuchhaltung add\n```\n\nThis
  command opens a transaction editor. [Here](example_output/add.md) is an example
  of the output of this command.\n\nThe amount of manual typing is kept to a minimum
  by two clever suggestion mechanisms and TAB completion.\n\n### Input and TAB completion\n\nAll
  input fields save their history in the current directory. It can be browsed using
  up and down arrow keys.\n\nThe account input fields support TAB completion. To make
  this even more useful, the account hierarchy is read in reverse order. For example
  `Expenses:Food` has to be entered as `Food:Expenses`. This behaviour can be deactivated
  by setting [`reverseAccountInput`](config.yml) to `False`.\n\n### Suggested transactions\n\nAfter
  the amount is entered, the user can select a transaction whose title, date, amount
  and second posting's account will used to pre fill an offsetting transaction. Suggestions
  will consist of all transactions\n\n* whose second posting has not been cleared
  (i.e. marked with an asterisk in front of the account name, and\n* whose first posting's
  amount has the absolute value as the entered amount\n* whose first posting's account
  is contained in the configured [`bankAccounts`](config.yml) and does not match any
  of regexes in [`ignoredAccountsOnAdd`](config.yml).\n\n### Suggested accounts\n\nOnce
  the first posting's account has been entered, the editor suggests accounts for the
  second posting based on the frequency of the resulting transaction's accounts in
  the configured [`ledgers.addedByThisUser`](config.yml) file.\n\n### Assertions \\&
  assignments\n\nAmounts can be entered with [assertions](http://hledger.org/manual.html#balance-assertions)
  or can be [assigned](http://hledger.org/manual.html#balance-assignments). \n\n###
  Default currency\n\nIn order to be able to enter naked amounts and have the currency
  added automatically, add a [default currency](http://hledger.org/manual.html#default-commodity)
  to the configured [`addedByThisUser`](config.yml) ledger file. Example:\n\n```\nD
  1,000.000 EUR\n```\n\n\n### Multi-user add\n\n```shell\nbuchhaltung add -w alice\n```\n\nIf
  there is more than one user configured — possibly each with their own ledger, they
  can be included/activated via the command-line argument `-w`. This enables you to
  enter a transaction where postings belong to different users. When done, a transaction
  for each user will be generated containing their respective postings and a balancing
  posting to an account prefixed with the configured [`accountPrefixOthers`](config.yml).\n\nExample
  taken from the [output](example_output/add_multi_user.md) of the above command:\n\n```shell\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n2016/12/19
  Dinner\n\n        Account          |  Amount  | Assertion\n-------------------------+----------+-----------+----------\n0,jo
  \   Wallet:Assets    | $ -100.0 |           |\n1,jo    Food:Expenses    | $ 50     |
  \          |\n2,alice Food:Expenses    | $ 50     |           |\n-------------------------+----------+-----------+----------\nOpen
  Balance             | 0        |\n```\n\ngenerates the following transactions\n\n```shell\n#######
  \ jo:  Balanced Transaction   #######\n\n2016/12/19 Dinner    ; Entered on \"2016-12-19T19:01:00Z\"
  by 'buchhaltung' user jo\n    Wallet:Assets                             $ -100.0\n
  \   Food:Expenses                                 $ 50\n    Accounts receivable:Friends:alice:jo
  \         $ 50\n\n\n\n#######  alice:  Balanced Transaction   #######\n\n2016/12/19
  Dinner    ; Entered on \"2016-12-19T19:01:00Z\" by 'buchhaltung' user jo\n    Accounts
  receivable:Friends:jo:jo         $ -50\n    Food:Expenses                              $
  50\n```\n\n## Getting results\n\n### Get current AqBanking account balances\n\n```shell\nbuchhaltung
  lb\n```\n\n### Call `ledger` or `hledger`\n\n```shell\nbuchhaltung ledger\n\nbuchhaltung
  hledger\n```\n\nThis calls the respective program with the `LEDGER` environment
  variable set to the configured [`mainLedger`](config.yml) or [`mainHledger`](config.yml).\n\n###
  Commit the changes\n\n```shell\nbuchhaltung commit -a -m'checking account ok'\n```\n\nor\n\n```shell\nbuchhaltung
  commitHledger -a -m'checking account ok'\n```\n\nthis commits all changes to the
  git repository that contains the [`mainLedger`](config.yml) file. The commit message
  will also contain the output of `buchhaltung lb` and `buchhaltung ledger balance
  --end tomorrow`.\n"
description-type: markdown
hash: d58b9e9aeafd8ba5403ba2ba99d19e79646bc390844e763e23b3bd86c1249308
homepage: http://johannesgerer.com/buchhaltung
latest: 0.0.7
license-name: MIT
maintainer: Johannes Gerer <oss@johannesgerer.com>
synopsis: Automates most of your plain text accounting data entry in ledger format.
test-bench-deps: {}
