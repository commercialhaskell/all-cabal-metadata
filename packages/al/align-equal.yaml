all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 1.0.0.0
author: Joonkyu Park (based on original work by Gabriella Gonzalez)
basic-deps:
  align-equal: '>=0'
  base: '>=4.17 && <4.19'
  safe: '>=0.3.21 && <0.4'
  text: '>=2.0.2 && <2.1'
changelog: |
  # Changelog
  All notable changes to the `align-equal` project will be documented in this file.

  ## [1.0.0] - 2025-03-31

  ### Changed:
  - **`prefixLength`**: Changed return type from `Int` to `Maybe Int`. Now returns `Nothing` if no '=' is found, and `Just` the length of the prefix before the first '=' if it exists. This is a breaking change.
  - Updated documentation for **`prefixLength`** and **`adjustText`** to reflect the new behavior.
  - Bumped package version to `1.0.0` to reflect a breaking change in the API.

  ### Fixed:
  - Properly handles lines without '=' in **`adjustText`** and **`prefixLength`**.

  ## [0.1.1.1] - 2025-03-31

  ### Added:
  - Expanded `README.md` with a detailed description of the tool.
  - Included Vim usage instructions with examples.

  ### Miscellaneous:
  - Bumped version to `0.1.1.1` in `align-equal.cabal`.

  ## [0.1.1.0] - 2025-03-27

  ### Added:
  - Extracted core functions into a separate library module (`Data.Text.AlignEqual`).
    - Refactored original `Main.hs` into executable and library components.
    - Added `src/Data/Text/AlignEqual.hs` with core text alignment logic.
    - Updated `app/Main.hs` to import and use `Data.Text.AlignEqual`.
    - Adjusted `.cabal` file to include a new library section and dependencies.
  - Added Haddock documentation for `Data.Text.AlignEqual`.
    - Documented module purpose, `prefixLength`, `adjustLine`, and `adjustText` with descriptions, examples, and parameter annotations.
  - Included `CHANGELOG.md` in the package documentation via `extra-doc-files` in `.cabal`.
  - Maintained compatibility with the existing executable.

  ## [0.1.0.1] - 2025-03-10

  ### Fixed:
  - Relaxed `base` dependency constraint to `>=4.17 && <4.19`.
  - Removed duplicate `extra-doc-files` entry in `.cabal` file.

  ### Added:
  - `README.md` with credit to Gabriella Gonzalez.
  - Source repository link to `hub.darcs.net` in `.cabal` file.

  ## [0.1.0.0] - 2025-03-10

  ### Initial Release:
  - Basic functionality for aligning text with equal signs.
    - Implemented as a standalone executable in `Main.hs`.
    - Initial project setup with `.cabal` and `LICENSE` files.
changelog-type: markdown
description: "# align-equal\n\nThis project is based on an idea from Gabriella Gonzalez.
  \ \nFor more details, visit: [Gabriella's blog](https://www.haskellforall.com/2018/10/detailed-walkthrough-for-beginner.html)\n\n`align-equal`
  is a command-line tool that aligns text based on the `=` symbol.  \nIt ensures that
  all `=` signs are vertically aligned, improving readability.\n\nThis program reads
  text from **standard input**, processes it, and outputs the aligned result to **standard
  output**.\n\n## Installation\n\nTo install `align-equal` using `cabal`, run:\n\n```sh\ncabal
  install align-equal\n```\n\n## Usage\n\n### **Using in Vim**\n\n`align-equal` is
  primarily designed for use within Vim. You can align selected text in **visual mode**
  as follows:\n\n1. Select the lines you want to align in **visual mode** (`V` for
  line-wise selection).\n2. Run:  \n   ```vim\n   :!align-equal\n   ```\n3. The selected
  text will be replaced with an aligned version.\n\n#### **Example**\n\n**Before (Selected
  Text in Visual Mode)**:\n```vim\nx = 1\nlongVariable = 2\nshort = 3\n```\n\n**Command**:\n```vim\n:!align-equal\n```\n\n**After**:\n```vim\nx
  \           = 1\nlongVariable = 2\nshort        = 3\n```\n\n## How it Works\n\n`align-equal`
  scans the input, detects `=` symbols, and aligns them by adding the appropriate
  amount of whitespace.\n"
description-type: markdown
hash: 238d976c322ba6783ba31af3388fafc002d7c5a4d8f337885f9c40dccf57ab9c
homepage: ''
latest: 1.0.0.0
license-name: MIT
maintainer: vpark45@gmail.com
synopsis: Aligns text prefixes before '=' for consistent formatting
test-bench-deps: {}
