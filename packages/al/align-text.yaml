all-versions:
- 0.1.0.0
- 0.1.0.1
author: Daniel Choi
basic-deps:
  base: '>=4.7 && <4.8'
  optparse-applicative: ==0.11.0.1
  text: '>=0'
changelog: ''
changelog-type: ''
description: "# align\n\nSimple unix filter to align text on specified substrings.\n\n`align`
  can be run from inside Vim or other editors with custom key bindings to\nalign lines
  of code neatly on programming language operators like =>, ::, @=?,\n=, +, etc.\n\n##
  Installation\n\nYou must first have the Haskll platform installed on your system:\n\n*
  [Haskell platform](https://www.haskell.org/platform)\n\n```\ncabal update\ncabal
  install align-text\n```\n\nThis will likely install the `align` executable in ~/.cabal/bin,
  which should be on your PATH.\n\n\n## Usage\n\n`align` has two modes: Serial mode
  and Alternative mode.\n\n### Serial mode\n\nAssume you want to align this text:\n\ninput.sample:\n```\n
  \   \"parseKeyExpr\" ~: [ObjectKey \"item\"] @=? parseKeyExpr \"item\"\n  , \"ngEvalToString\"
  ~: \"apple\" @=? ngEvalToString testContext1 \"item\" \n  , \"ngEvalToString2\"
  ~: \"apple\" @=? ngEvalToString testContext2 \"item.name\" \n```\n\nYou can do so
  with this command:\n\n    align '~: @=?' < input.sample\n\nwhich outputs:\n\n```\n
  \   \"parseKeyExpr\"    ~: [ObjectKey \"item\"] @=? parseKeyExpr \"item\"\n  , \"ngEvalToString\"
  \ ~: \"apple\"            @=? ngEvalToString testContext1 \"item\"\n  , \"ngEvalToString2\"
  ~: \"apple\"            @=? ngEvalToString testContext2 \"item.name\"\n```\n\n`align`
  takes an argument list of strings to align the text and performs\nthe alignment
  operation on the text it gets from STDIN.\n\n`align` will only match each alignment
  string once, so if that string\noccurs multiple times in a line, you need to specify
  it than many times \nin the argument.\n\n### Alternative mode\n\nAssume you want
  to align this text:\n\ninput2.sample:\n```\nsendmailCustom :: FilePath        --
  ^ sendmail executable path\n  -> [String]     -- ^ sendmail command-line options\n
  \ -> L.ByteString -- ^ mail message as lazy bytestring\n   -> IO ()\n```\n\nHere
  you want to align `::` and `->` in the same column position. To\ndo this use the
  `-a` flag:\n\n    align -a -- '-> ::' < input2.sample\n\n(FYI you need to add the
  `--` argument to prevent the `->` string, which starts\nwith a dash, from being
  parsed as a command option.)\n\nThis outputs:\n\n```\nsendmailCustom :: FilePath
  \       -- ^ sendmail executable path\n               -> [String]     -- ^ sendmail
  command-line options\n               -> L.ByteString -- ^ mail message as lazy bytestring\n
  \              -> IO ()\n```\n\nYou can also align the comment (beginning with `--`)
  by using a pipeline:\n\n    cat input2.sample | align -a -- '-> ::' | align -- '--'\n\nwhich
  outputs:\n\n```\nsendmailCustom :: FilePath     -- ^ sendmail executable path\n
  \              -> [String]     -- ^ sendmail command-line options\n               ->
  L.ByteString -- ^ mail message as lazy bytestring\n               -> IO ()\n```\n\n##
  How to use align in Vim \n\nTo use align from Vim, you can select some text, and
  then use a Vim\nfilter command:\n\n    !align '~: @=?'\n\nFor common alignment operations,
  you can make Vim commands and put them\nin your `.vimrc`, e.g.:\n\n```vimscript\ncommand!
  -range AlignHaskellTypeAnnotation :<line1>,<line2>!align '::'\nvnoremap <leader>h
  :AlignHaskellTypeAnnotation<cr>\n\ncommand! -range AlignHaskellTest :<line1>,<line2>!align
  '~: @=?'\nvnoremap <leader>H :AlignHaskellTest<cr>\n\n```\n\n\n## Author\n\nDaniel
  Choi <https://github.com/danchoi>\n\n"
description-type: markdown
hash: 9ef99171afc072105f62b597a97b6d8b300b682033fbb28e3416ff3912906e1d
homepage: https://github.com/danchoi/align-text
latest: 0.1.0.1
license-name: MIT
maintainer: dhchoi@gmail.com
synopsis: A simple unix filter to align text on specified substrings
test-bench-deps: {}
