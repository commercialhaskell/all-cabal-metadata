homepage: https://hackage.haskell.org/package/algorithmic-composition-basic
changelog-type: markdown
hash: e48dd4ab701d07009bbc722f1c2f2a2d7cb18293eb8f99c475de90d4a0ba2437
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: Helps to create experimental music from a file (or its part) and a Ukrainian
  text.
changelog: "# Revision history for algorithmic-composition-basic\n\n## 0.1.0.0 --
  2021-02-22\n\n* First version. Released on an unsuspecting world.\nRewritten from
  the dobutokO2 package using arrays and lists based functionality instead of vector
  based one. Added some new \nfunctions, removed some functions. \n\n"
basic-deps:
  mmsyn3: '>=0.1.5 && <1'
  mmsyn7l: '>=0.9 && <1'
  bytestring: '>=0.10.6 && <1'
  base: '>=4.8 && <4.15'
  process: '>=1.4 && <1.9'
  mmsyn7ukr-common: '>=0.1.1 && <1'
  phonetic-languages-simplified-base: '>=0.2 && <1'
  foldable-ix: '>=0.2 && <1'
  mmsyn2-array: '>=0.1.1 && <1'
  ukrainian-phonetics-basic-array: '>=0.1.2 && <1'
  directory: '>=1.2.7 && <1.7'
all-versions:
- 0.1.0.0
author: OleksandrZhabenko
latest: 0.1.0.0
description-type: markdown
description: "Rewritten from the dobutokO2 package on Hackage (https://hackage.haskell.org/package/dobutokO2)\nusing
  arrays and lists instead of vector-related functionality.\n\n\nHelps to create experimental
  music from a file (or its part) and a Ukrainian text. \nIt can also generate a timbre
  for the notes. Uses SoX inside.\n\n\n                ***** Usage *****\n                =================\n\nYou
  can use it as a library or as an executable.\n\nPlease, check before executing whether
  there is no \"x.wav\", \"test\\*.wav\",\n\"result\\*.wav\" and \"end.wav\" files
  in the current directory, because they\ncan be overwritten. The same can be said
  about \"nx\\*.wav\" files in the directory.\n\nFor the executable you enter in the
  terminal:\n\nacb { 0 | 1 | 11 | 2 | 21 | 3 | 31 | 4 | 41 | 5 | 51 | 6 | 7 } {fileName}
  {Ukrainian text}\n\nOR:\n\nacb { 8 | 80 | 9 | 99 | 999 }\n\nOR:\n\nacb { 82 | 820
  | 92 | 992 | 9992 } {volatile symbols together, e. g. \"0\"} {quality control, see
  information below}\n\nOR:\n\nacb { 00 | 002 } {beginning symbols for the filenames
  \"fade\" effect to be applied to} {quality control, see information below}\n\n  where
  filename is:\n  the full name of the file to be recorded in the current directory
  or\n  the full absolute path to the sound .wav file (or other one format\n  that
  is supported by your SoX installation) to obtain sound information from.\n\nIf the
  first command line argument equals to one of the numbers below, then\nthe program
  behaves as follows:\n\n  \"1\", or \"3\", or \"5\" ->  then the executable uses
  the overTones functions,\n    so for the given parameters the overtones are the
  same for every call.\n\n  \"2\", or \"4\", or \"6\" -> then the program uses uniqOverTones
  functions.\n\n  \"3\", or \"4\", or \"5\", or \"6\" -> the program uses additional
  String to define\n    signs for the harmonics coefficients for overtones.\n\n  \"11\",
  or \"21\", or \"31\", or \"41\", or \"51\", or \"61\" -> the program works as for\n
  \    the respective inputs with only the first character in the option\n       (e.
  g. for \"51\", this is \"5\"), but uses not octaves, but n-th elements sets\n         of
  consequential notes consisting of 2, 3, 4, 6, or 9 elements (called\n           'enky').
  The usual octave is from such point of view a 12th elements set\n             of
  consequential notes. This allows to create more 'condensed' and\n               'narrower'
  compositions that being more defined can be at the\n                 same time more
  precise.\n\n  \"9\" -> the program works with existing \"result\\*.wav\" files and
  you can replace\n     some of them by other one(s) or their sequences. This allows
  to create files,\n       then edit them using this first command line option (possibly
  for several\n         times) and at last create a resulting melody file with \"8\"
  or \"80\" options.\n\n  \"99\" -> the program takes a filename (it is a first command
  line argument and it is\n     ignored) and the rest of the command line argument
  (they are treated as command\n       line arguments to the SoX 'play' command).
  Then the program prompts you to\n         specify the needed indeces for the \"result\\*.wav\"
  files in the current\n           directory (e. g. they can be obtained by executing
  the acb with\n             the first command line argument less than \"8\", or produced
  by some\n               other means). You can specify multiple lists of Int to select
  the\n                 needed files to be played with effects. Afterwards, the program\n
  \                  just plays these selected files applying the specified SoX\n
  \                    effects to them consequently. For example:\n    acb 9 reverb
  -w\n                       will play the selected (during execution) files with
  the\n                         SoX \"reverb -w\" effect. For more information on
  effects,\n                           please, refer to the SoX documentation.\n\n
  \ \"999\" -> similarly to \"99\", but instead of playing the files, SoX actually\n
  \     applies to them these effects and overwrites the files with the obtained ones.\n
  \       It is convenient way to test the sounding effects with firstly run the\n
  \         acb with \"99\" first command line argument, and then, if suitable,\n
  \           with \"999\" one. Be aware, that after running with the latter one,
  the\n              program cannot restore the files that were changed to their previous\n
  \               state, so be careful while running.\n                           \n
  \ In more details:\n\n  \"0\" -> the program just converts multiline Ukrainian text
  from stdin\n     into a String and prints it to stdout. No other arguments are used.\n\n
  \ \"00\" -> the program applies \"fade q 0.01 -0.0\" SoX effect to every \"zs\\*.wav\"\n
  \    (or instead of them to every \"zs\\*.flac\") file in the current directory.
  \n       The 'zs' here is specified by the second command line argument.\n        This
  allows to avoid clipping while just simply concatenating the files into\n          one
  with SoX. The mentioned clipping can be desirable in some circumstances\n            but
  generally is not necessary or is redundant. For more information,\n              please,
  refer to the SoX documentation and to that one for 'fadeAllE'\n                function
  in the Composition.Sound.IntermediateF module.\n                \n  \"002\" -> the
  program applies \"fade q 0.002 -0.0\" SoX effect to every \"zs\\*.wav\"\n     (or
  instead of them to every \"zs\\*.flac\") file in the current directory. \n       Works
  similarly to the option \"00\" (see above).\n\n  \"1\" -> basic functionality without
  the possibility to define individual overtones.\n\n  \"11\" -> the same as \"1\",
  but works with enky. See general information above.\n  \n  \"2\" -> basic functionality
  with the possibility to define individual overtones.\n     In such a case, another
  text gives the other overtones.\n\n  \"21\" -> the same as \"2\", but works with
  enky. See general information above.\n\n  \"3\" -> adittionally to basic functionality
  gives an opportunity \n     to specify the signs for the harmonics coefficients
  for overtones\n       by additional String.\n\n  \"31\" -> the same as \"3\", but
  works with enky. See general information above.\n\n  \"4\" -> similarly to \"2\"
  gives an opportunity to specify the signs\n     for the harmonics coefficients for
  overtones by additional String.\n\n  \"41\" -> the same as \"4\", but works with
  enky. See general information above.\n\n  \"5\" -> additionally to that one functionality
  provided by \"3\" gives\n     an opportunity to specify in how many times the amplitude
  for\n       the second lower note (if any) is greater, than the amplitude\n         for
  the main note and specify the intervals to be used\n           for every note.\n\n
  \ \"51\" -> the same as \"5\", but works with enky. See general information above.\n\n
  \ \"6\" -> the same as \"5\", but you can define also overtones by an additional
  String.\n\n  \"61\" -> the same as \"6\", but works with enky. See general information
  above.\n\n  \"7\" -> the program behaves like for the \"5\" option, but generates\n
  \    overtones using additional String and allows maximum control over\n       the
  parameters. Besides, all the needed information it obtains from\n         the singular
  formatted input, which can be ended with a keyboard keys\n           combination
  that means an end of input (e. g. for Unices, that is\n             probably Ctrl
  + D). '@' are separators for the input parts\n               for their respective
  parts. For more information about the\n                 format of the single input,
  see:\n        https://drive.google.com/open?id=10Z_GRZR4TKoL5KXfqPm-t-4humuHN0O4\n
  \                 The file is also provided with the package as text.dat.txt.\n
  \                  The last two or three inputs (an input just here means\n                     a
  textual input between two '@') can be omitted, the\n                       program
  will work also but with less control for\n                         the user possible.\n\n
  \  \"8\" -> the program just creates from input \"result\\*\" files the \"end.wav\"
  by\n     concatenating them into one. It is mostly useful after some processment\n
  \      on the \"result\\*\" files after previous execution with other lesser first\n
  \        command line arguments to get the test final sound file. It can be then\n
  \          listened to and probably remade again by editing the \"result\\*\" files\n
  \            and running the program with this option again. In such a case,\n               none
  from the other command line arguments is important for the\n                 program
  running, so they all can be simply omitted.\n\n   \"80\" -> the same as \"8\" but
  with one important difference that the program if\n     succeeded in creation of
  the \"end.wav\" file, then removes all other \"result\\*\"\n       files from the
  current directory, so you cannot reverse the successful action\n         back and
  try again with just the same files. In such a case, you need to\n           repeat
  all the process of creation of \"result\\*\" files. Be aware and use\n             with
  care!\n\n  \"82\" -> the same as \"8\", but you can specify the sound quality parameters
  for the\n     resulted file and choose whether it will be in WAV or FLAC format.
  To specify\n       this additional processing information, use as a third command
  line argument\n          (after the first \"82\" and the volatile second one) 4
  consequent symbols:\n            3 digits and 1 letter ('f' -- for FLAC one and
  'w' for WAV one). The first\n              two digits are a code for rate and the
  third one -- a code for bit depth\n                ('1' -- for 16 bit and '2' --
  for 24 bit). The list of possible first\n                  two digits and their
  corresponding frequency rate in Hz:\n\n                     \"11\" -> 11025\n\n
  \                    \"16\" -> 16000\n\n                     \"17\" -> 176400\n\n
  \                    \"19\" -> 192000\n\n                     \"32\" -> 32000\n\n
  \                    \"44\" -> 44100\n\n                     \"48\" -> 48000\n\n
  \                    \"80\" -> 8000\n\n                     \"96\" -> 96000\n\n
  \                    The default one behaviour is equivalent to \"221w\".\n\n  \"820\"
  -> the same as \"80\", but similarly to \"82\" it gives you the opportunity to\n
  \     specify sound quality parameters in just the same way.\n\n  \"9\", \"99\",
  or \"999\" -> see the information above.\n\n  \"92\", \"992\", or \"9992\" -> similar
  to the above line, but with the opportunity to\n      specify sound quality parameters
  in just the same way as for \"82\" option.\n         These are considered still
  highly experimental and not well tested,\n            so use them not for production.\n
  \          \n   _  -> the program behaves like for the \"5\" option, but generates\n
  \    overtones using additional String and allows maximum control over\n        the
  parameters.\n\nAfter the program executing (it takes some time) with the first command
  line\noptions except \"80\" there are files \"result\\*.wav\" in the directory.\nThese
  are the resulting melody generated in their order preserved.\n\nThe program now
  lifts the frequencies to the octave or to the enka with the number,\nwhich you can
  specify during its execution.\n\nYou can use the default values by simply pressing
  'Enter' while being prompted and\nthe informational message contains the line about
  the default value.\n\nThe package extends its library functions with\nthe possibility
  to create not only single notes or intervals of sounds playing\nsimultaneously but
  also sets of three, four, five, six, seven or more sounds\nplayed simultaneously
  with their overtones. For more information, please, refer\nto the documentation
  for the Composition.Sound.Functional module.\n\nThe library functions are extended
  also with the\npossibility to adjust volume for the overtones using generalized
  functions '1G'\nwith adjustment being represented in dB. For more information, please,
  refer\nto the documentation for the Composition.Sound.Functional module.\n\nThe
  library includes functions '2G': generalized\nones in the Composition.Sound.Functional,
  and Composition.Sound.IntermediateF, and\nComposition.Sound.Executable modules.
  They allow to specify sound quality\nof the resulting files using additional parameter.\n\nThe
  library includes functions to work more explicitly\nwith f function in the Composition.Sound.Functional
  module. They are based on the\nsimplest (but still meaningful) multiplicative data
  fitting.\n\nThe library includes functions to split the sound \ninto several simultaneously
  sounding similar ones. For more information, please, \nrefer to the Composition.Sound.Functional
  module.\n\nThe library includes functions to provide your own \nvariants of durations,
  intervals and volume adjustments and the possibilities \nto generate speech-like
  music with most of parameters obtained from the Ukrainian \nlanguage texts.\n\nThe
  library includes new datatype Params in the \nComposition.Sound.Functional module
  and various functions to work with it. It \nallows to use tonalities or something
  close to them. For more information, \nplease, refer to Composition.Sound.Functional
  submodules.\n\nThere are some additional effects and opportunities \nin the Composition.Sound.Functional
  and Composition.Sound.IntermediateF modules. Some \nfunctions in the library were
  moved from the Composition.Sound.Executable module \nto the Composition.Sound.Functional
  module because of logics of the module structure \nand semantics.\n\n** Note:\n\n*
  Better to execute in the RAM. Need rather a lot of space on the disk for\nthe resulting
  file \"end.wav\" and auxiliary files (MBs) for a short sound\nin the second command
  line arguments.\n\n                ***** Examples *****\n                ====================\n\nYou
  can refer to examples in the GitHub special\nrepository (https://github.com/OleksandrZhabenko/dobutokO2-examples/)
  for the\npreviously created dobutokO2 and dobutokO3 packages. \nYou can also see
  some of the generated sounds on the YouTube list:\nhttps://www.youtube.com/playlist?list=PLuG3zSZWV7yollV9nMPcRtm3udVuYVlFS\n\n\n
  \               ***** Support for not Sound File Variativity Sources *****\n                ==========================================================\n
  \               \nThe library supports not only the sound file as a \nvariativity
  source but also other types of files. They are used through \na special reencoding
  using lazy bytestrings. For more information, please, \nrefer to Composition.Sound.Keyboard
  module.                \n\nThe library uses Float instead of Double where possible.
  Double precision \nis redundant. The shift is inspired by: https://www.youtube.com/watch?v=FYTZkE5BZ-0\n\n"
license-name: MIT
