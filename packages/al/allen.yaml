all-versions:
- 0.1.0.0
author: Adam Brohl
basic-deps:
  aeson: '>=2.1.2 && <2.2'
  allen: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0.11.2.0 && <0.12'
  containers: '>=0.6.4 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  text: '>=2.0.2 && <2.0.3'
  vector: '>=0.13.0 && <0.14'
changelog: |
  # Changelog for `allen`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# Haskell - Allen's Interval Algebra Implementation\n\nAn Implementation
  of Allen's Interval Algebra in Haskell.\n\nThis library provides a monadic way to
  perform computations related to Allen's \ninterval algebra. The interval network
  strucutre is implicitly updated upon \nthe creation of a new interval and when a
  set of relations is applied to two \nintervals. \n\n## Sources\n\nThis library is
  based off of the interval algebra described in\n[Maintaining Knowledge about Temporal
  Intervals](https://cse.unl.edu/~choueiry/Documents/Allen-CACM1983.pdf), \nand [Allen's
  Interval Algebra](https://www.ics.uci.edu/~alspaugh/cls/shr/allen.html).\n\n## Examples\n\nAssume
  a situation with three intervals:\n\n1. I am walking.\n2. I am talking.\n3. My friend
  calls me.\n\nand assume that we know the following:\n\n- When I am walking, I am
  not talking.\n- When my friend called me, I started talking.\n\nwe can easily compute
  the relations between when I was walking and when my friend called me:\n\n```haskell
  \ncalc :: Allen [Relation]\ncalc = do \n    walking <- interval \n    talking <-
  interval \n    friend  <- interval\n\n    assumeSet walking [Precedes, Meets, MetBy,
  PrecededBy] talking\n    assume friend Starts talking\n\n    relations <- getConstraints
  walking friend\n\n    return (fromBits relations)\n\nmain :: IO ()\nmain = print
  $ evalAllen calc\n```\n\nAnd this gives the result:\n\n```\n[Precedes,Meets,PrecededBy]\n```\n\nWhich
  means that we can deduce that walking either happens before, directly \nbefore,
  or after my friend calls.\n\n## Documentation\n\nTo view more information for library
  functions, you can view the documentation \nfor this library [here](https://archaversine.github.io/allen/Data-Allen.html).\n\n##
  Interactive REPL\n\nYou can use an interactive REPL to perform calculations from
  the command line.\nExecutables are available for both Linux and Windows.\n\nYou
  can download the interactive version here: \n\n- [Linux](https://github.com/Archaversine/allen/releases/tag/v1.0.1-linux)\n-
  [Windows](https://github.com/Archaversine/allen/releases/tag/v1.0.1-windows)\n"
description-type: markdown
hash: c964f9c35f447653bb61838f72ce66624395964129bf1c800070b72fa0a6fced
homepage: https://github.com/archaversine/allen#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: awbrohl@knox.edu
synopsis: A monadic way of calculating relations between intervals of time.
test-bench-deps:
  QuickCheck: '>=2.14.3 && <2.15'
  allen: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0.6.4 && <0.7'
  criterion: '>=1.6.2 && <1.7'
  mtl: '>=2.2.2 && <2.3'
  vector: '>=0.13.0 && <0.14'
