homepage: https://github.com/isovector/algebra-checkers#readme
changelog-type: markdown
hash: 2c1193ee53c032984c85564380ffd660d20e0a48fb82d489c8895c177f374b2f
test-bench-deps: {}
maintainer: sandy@sandymaguire.me
synopsis: Model and test API surfaces algebraically
changelog: |+
  # Changelog for algebra-checkers

  ## Unreleased changes

  ## Version 0.1.0.1 (2022-11-19)

  Minor updates to get algebra-changes compiling on relatively recent versions of
  GHC.

basic-deps:
  groups: '>=0.4.1.0'
  th-instance-reification: '>=0.1.5'
  checkers: '>=0.5.5'
  base: '>=4.7 && <5'
  syb: '>=0.7'
  containers: '>=0.5.10.2'
  ansi-terminal: '>=0.10.3'
  mtl: '>=2.2.2 && <3'
  transformers: '>=0.5.2.0'
  QuickCheck: '>=2.10.1 && <3'
  pretty: '>=1.1.3.3 && <2'
  template-haskell: '>=2.12.0.0 && <3'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Sandy Maguire
latest: 0.1.0.1
description-type: markdown
description: |+
  # algebra-checkers

  [![Build Status](https://travis-ci.org/isovector/algebra-checkers.svg?branch=master)](https://travis-ci.org/isovector/algebra-checkers)

  ## Dedication

  > "Any fool can make a rule, and any fool will mind it."
  >
  > Henry David Thoreau


  ## Overview

  `algebra-checkers` is a little library for testing algebraic laws. For example,
  imagine we're writing an ADT:

  ```haskell
  data Foo a
  instance Semigroup (Foo a)
  instance Monoid (Foo a)

  data Key


  get :: Key -> Foo a -> a
  get = undefined

  set :: Key -> a -> Foo a -> Foo a
  set = undefined
  ```

  Let's say we expect the lens laws to hold for `get` and `set`, as well for `set`
  to be a monoid homomorphism. We can express those facts to `algebra-checkers`
  and have it generate tests for us:

  ```haskell
  lawTests :: [Property]
  lawTests = $(testModel [e| do

  law "set/set"
      (set i x' (set i x s) == set i x' s)

  law "set/get"
      (set i (get i s) s == s)

  law "get/set"
      (get i (set i x s) == x)

  homo @Monoid
      (\s -> set i x s)

  |])
  ```

  Furthermore, `algebra-checkers` will generate tests to show that these laws are
  confluent. We can run these tests via `quickCheck lawTests`.

  If we use the `theoremsOf` function instead of `testModel`, `algebra-checkers`
  will dump out all the additional theorems it has proven about our algebra. This
  serves as a good sanity check:

  ```
  Theorems:

  • set i x' (set i x s) = set i x' s (definition of "set/set")
  • set i (get i s) s = s (definition of "set/get")
  • get i (set i x s) = x (definition of "get/set")
  • set i x mempty = mempty (definition of "set:Monoid:mempty")
  • set i x (s1 <> s2) = set i x s1 <> set i x s2
      (definition of "set:Monoid:<>")
  • set i1 (get i1 (set i1 x1 s1)) s1 = set i1 x1 s1
      (implied by "set/get" and "set/set")
  • set i1 (get i1 (s12 <> s22)) s12 <> set i1 (get i1 (s12 <> s22)) s22
          = s12 <> s22
      (implied by "set/get" and "set:Monoid:<>")
  • set i1 x'2 (set i1 x1 s11 <> set i1 x1 s21)
          = set i1 x'2 (s11 <> s21)
      (implied by "set/set" and "set:Monoid:<>")
  • get i1 (set i1 x1 s11 <> set i1 x1 s21) = x1
      (implied by "get/set" and "set:Monoid:<>")


  Contradictions:

  • get i1 mempty = x1
      the variable x1 is undetermined
      (implied by "get/set" and "set:Monoid:mempty")
  ```

  Uh oh! Look at that! This contradiction is  clearly a bogus theorem, which lets
  us know that "get/set" and "set mempty" are nonconfluent with one another!

license-name: BSD-3-Clause
