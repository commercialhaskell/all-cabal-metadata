homepage: ''
changelog-type: markdown
hash: 02aac60cf1511206ca969104a8fe63f8c89c59287bb2af7113d47c1811968468
test-bench-deps:
  base: '>=4.9 && <4.16'
  containers: -any
  tasty-hunit: -any
  random: -any
  tasty: -any
  alpaca-netcode: -any
maintainer: davide@well-typed.com
synopsis: Rollback/replay NetCode for realtime, deterministic, multiplayer games.
changelog: |
  # Revision history for alpaca-netcode

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  flat: -any
  bytestring: -any
  network-run: -any
  stm: -any
  base: '>=4.9 && <4.16'
  time: -any
  network: '>=3.1 && <3.2'
  containers: -any
  hashable: -any
  random: -any
all-versions:
- 0.1.0.0
author: David Eichmann
latest: 0.1.0.0
description-type: haddock
description: |-
  A rollback/replay client-server system for realtime multiplayer games. The API
  only requires you to express your game as a pure, deterministic function.

  See "Alpaca.NetCode" to get started.

  === Advantages
  * Simple code. Your game logic contains no NetCode.
  * Low bandwidth. Only inputs are shared.
  * Zero latency. Player's own inputs affect their game immediatly.
  * UDP based. Unordered and using redundancy to mitigate packet loss.
  * Lightweight server. The server does not run the game logic, it only relays and tracks user inputs.
  * Cheating. Only inputs are shared which eliminates a whole class state manipulation cheats.

  === Disadvantages
  * Increased CPU usage. Rollback/replay means that clients must run the game step function multiple times per frame.
  * Not suitable for large numbers of players. Tens of players is likey reasonable.

  === Disclaimer
  This is an initial release with minimal functionality and still very
  experimental. Use at your own risk.
license-name: Apache-2.0
