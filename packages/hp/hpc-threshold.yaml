all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Ecky Putrady
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  hpc-threshold: '>=0'
  interpolate: '>=0'
  pcre-heavy: '>=0'
changelog: |
  # Changelog for hpc-threshold

  ## 0.1.0.3

  Add documentation to HPCThreshold.

  ## 0.1.0.2

  Change the module name to HPCThreshold.

  ## 0.1.0.1

  Added more documentation.

  ## 0.1.0.0

  Initial release, feature working.

  ## Unreleased changes

  None
changelog-type: markdown
description: "# hpc-threshold\n\n[![Build Status](https://travis-ci.org/eckyputrady/hpc-threshold.svg?branch=master)](https://travis-ci.org/eckyputrady/hpc-threshold)\n[![Hackage
  version](https://img.shields.io/hackage/v/hpc-threshold.svg?label=Hackage)](https://hackage.haskell.org/package/hpc-threshold)\n\n`hpc-threshold`
  ensures the code coverage of your Haskell project is above configured thresholds.
  This program is meant to be used within a CI pipeline, in which the build will fail
  if the code coverage falls below the configured thresholds.\n\nThe program reads
  a configuration file named `.hpc-threshold` and parse [Haskell Program Coverage
  (HPC)](https://wiki.haskell.org/Haskell_program_coverage) text from `stdin`. The
  program outputs a report and will terminate with exit code 1 if the coverage falls
  below the configured threshold, and exit code 0 otherwise.\n\n## User Guide\n\nInstall
  the program by using stack\n\n```\nstack install hpc-threshold\n```\n\nThen, create
  a configuration file named `.hpc-threshold`:\n\n```\n[ Threshold \n    { thresholdName
  = \"Expressions used\"\n    , thresholdRegex = \"(\\\\d+)% expressions used\"\n
  \   , thresholdValue = 80.0\n    }\n, Threshold \n    { thresholdName = \"Boolean
  coverage\"\n    , thresholdRegex = \"(\\\\d+)% boolean coverage\"\n    , thresholdValue
  = 80.0\n    }\n, Threshold \n    { thresholdName = \"Alternatives used\"\n    ,
  thresholdRegex = \"(\\\\d+)% alternatives used\"\n    , thresholdValue = 80.0\n
  \   }\n, Threshold \n    { thresholdName = \"Local declarations used\"\n    , thresholdRegex
  = \"(\\\\d+)% local declarations used\"\n    , thresholdValue = 80.0\n    }\n, Threshold
  \n    { thresholdName = \"Top-level declarations used\"\n    , thresholdRegex =
  \"(\\\\d+)% top-level declarations used\"\n    , thresholdValue = 80.0\n    }\n]\n```\n\n-
  `thresholdRegex` is the regex to be used for extracting the coverage from HPC report.
  There should be one `(\\\\d+)` in the regex.\n- `thresholdValue` is the threshold
  for the code coverage.\n- `thresholdName` will be used for the threshold report.\n\nThen,
  build the coverage report:\n\n```\nstack test --coverage\n```\n\nThen, generate
  a text report and feed that into `hpc-threshold`:\n\n```\nstack hpc report --all
  2>&1 | hpc-threshold\n```\n\nThe `stderr` -> `stdout` redirection is necessary there
  because `stack hpc report` outputs the result in `stderr`, but we want to pipe that
  into `hpc-threshold`.\n\nThen, you'll get an output similar to the following:\n\n```\nCode
  coverage threshold check: FAIL\n· Expressions used: 67.0% (< 80.0%)\n· Boolean coverage:
  14.0% (< 80.0%)\n· Alternatives used: 42.0% (< 80.0%)\n✓ Local declarations used:
  88.0% (≥ 80.0%)\n✓ Top-level declarations used: 80.0% (≥ 80.0%)\n```\n\nIf we check
  the exit code of the last process, we'll get `1` since some code coverage areas
  are below the configured threshold:\n\n```\n$ echo $?\n1\n```\n\nFor successful
  scenario, the output that you'll get is as follows:\n\n```\nCode coverage threshold
  check: PASS\n✓ Expressions used: 67.0% (≥ 60.0%)\n✓ Boolean coverage: 14.0% (≥ 10.0%)\n✓
  Alternatives used: 42.0% (≥ 40.0%)\n✓ Local declarations used: 88.0% (≥ 80.0%)\n✓
  Top-level declarations used: 80.0% (≥ 80.0%)\n```\n\nAnd the exit code is 0:\n\n```\n$
  echo $?\n0\n```\n\n## Developer Guide\n\nSee `.travis.yml`, under `scripts` section
  to see how to build the application\n"
description-type: markdown
hash: c531046fe19bc386f008890c65dba0ab28c7a98b57dba03799af0c9a2529d0fb
homepage: https://github.com/eckyputrady/hpc-threshold#readme
latest: 0.1.0.3
license-name: BSD-3-Clause
maintainer: eckyputrady@gmail.com
synopsis: Ensure the code coverage is above configured thresholds
test-bench-deps:
  base: '>=4.7 && <5'
  deepseq: '>=0'
  hpc-threshold: '>=0'
  hspec: '>=0'
