all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- 0.8.0.1
- 0.8.0.2
- '0.9'
- '0.10'
author: Claude Heiland-Allen
basic-deps:
  array: '>=0'
  attoparsec: '>=0'
  base: '>=4 && <5'
  containers: '>=0.5'
  filepath: '>=0'
  floatshow: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  semigroups: '>=0'
  text: '>=0'
changelog: ''
changelog-type: ''
description: "hp2pretty\n=========\n\nhp2ps is a tool to generate PostScript graphs
  of Heap Profiles.\nhp2pretty is a rewrite of hp2ps, implemented in Haskell, with\nthe
  aims of being maintainable, with more flexible output, and\nmore beautiful output.
  \ Currently hp2pretty outputs Scalable\nVector Graphics (SVG) only, though PostScript
  (PS) is planned.\nNot all of hp2ps' options are implemented yet in hp2pretty.\n\n\nUsage\n=====\n\n
  \   hp2pretty - generate pretty graphs from heap profiles\n    \n    Usage: hp2pretty
  [--uniform-scale AXES] [--sort FIELD] [--key KEY]\n                     [--title
  TITLE] [--reverse] [--trace PERCENT] [--bands COUNT]\n                     [--pattern]
  FILES...\n      Convert heap profile FILES.hp to pretty graphs FILES.svg\n    \n
  \   Available options:\n      --uniform-scale AXES     Whether to use a uniform
  scale for all outputs. One\n                               of: none (default), time,
  memory, both.\n      --sort FIELD             How to sort the bands. One of: size
  (default),\n                               stddev, name.\n      --key KEY                Whether
  to embed the key in the image output. One of:\n                               inline
  (default), FILE.txt. Use - for standard output\n                               and
  ./inline for a file named literally \"inline\".\n      --title TITLE            Whether
  to embed the title in the image output. One\n                               of:
  inline (default), FILE.txt. Use - for standard\n                               output
  and ./inline for a file named literally\n                               \"inline\".\n
  \     --reverse                Reverse the order of bands.\n      --trace PERCENT
  \         Percentage of trace elements to\n                               combine.
  (default: 1.0)\n      --bands COUNT            Maximum number of bands to draw (0
  for\n                               unlimited). (default: 15)\n      --pattern                Use
  patterns instead of solid colours to fill bands.\n      FILES...                 Heap
  profiles (FILE.hp will be converted to\n                               FILE.svg).\n
  \     -h,--help                Show this help text\n\n\nBenchmarks\n==========\n\nhp2pretty-0.1\n-------------\n\n$
  wc in.hp\n 1484749  2969502 37406420 in.hp\n\n$ time hp2pretty <in.hp >out.svg\nreal
  0m38.786s 0m39.423s 0m38.674s\nuser 0m38.120s 0m38.800s 0m38.110s\nsys  0m00.360s
  0m00.250s 0m00.400s\n\n$ time hp2ps <in.hp >out.ps\nreal 0m38.474s 0m38.765s 0m38.017s\nuser
  0m38.350s 0m38.200s 0m37.860s\nsys  0m00.090s 0m00.140s 0m00.150s\n\n(hp2pretty
  compiled with \"ghc -O2 --make\")\n\nEssentially identical runtime!\n\nMemory usage
  from 'top':\nhp2pretty ~275M\nhp2ps      ~50M\n\nTests were run on 64bit GNU/Linux
  with ghc-6.12.3.\n\n\nhp2pretty-0.2\n-------------\n\n\"in.hp\"     time (seconds)
  \      memory (bytes)\n(bytes)   hp2pretty    hp2ps   hp2pretty   hp2ps\n    37M
  \     33.345   36.430         64M     25M\n   1.3M       1.015    0.074        2.2M
  \   1.0M\n    47k       0.058    0.005        210k     60k\n\nTime is real time
  averaged over 3 runs as measured by 'bash'.\nMemory is peak usage as measured by
  'valgrind --tool=massif'.\n\nhp2pretty compiled via cabal-install with 'ghc -O --make'.\n\nTests
  were run on 64bit GNU/Linux with ghc-6.12.3.\n"
description-type: text
hash: f020176ec16006bf3148508a14087a0d89edffc19eb8d04f480730aecf141480
homepage: https://mathr.co.uk/blog/hp2pretty.html
latest: '0.10'
license-name: BSD-3-Clause
maintainer: claude@mathr.co.uk
synopsis: generate pretty graphs from heap profiles
test-bench-deps: {}
