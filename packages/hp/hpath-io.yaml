homepage: ''
changelog-type: markdown
hash: 42647da035f0b89d819301509102804154e7249d1e61fb010505f77ac71d4563
test-bench-deps: {}
maintainer: Julian Ospald <hasufell@posteo.de>
synopsis: High-level IO operations on files/directories
changelog: "# Revision history for hpath-io\n\n## 0.14.1 -- ????-??-??\n\n- add `readFileStrict`\n\n##
  0.14.0 -- 2020-07-04\n\n* Use hpath-directory-0.14.0\n\n## 0.13.2 -- 2020-05-08\n\n*
  Add getDirsFilesStream and use streamly-posix for dircontents (#34)\n\n## 0.13.0
  -- 2020-01-26\n\n* switch to using 'hpath-bytestring' for the implementation (this
  is now just a wrapper module, mostly)\n\n## 0.12.0 -- 2020-01-20\n\n* breaking API
  changes\n\t* RelC and Fn were removed from `hpath`\n\t* further changes to `parseAny`\n\n\n##
  0.11.0 -- 2020-01-18\n\n* `writeFile` not allows to set file mode and create file
  if it does not exist (this broke API)\n* added various new functions:\n\t* createDirIfMissing\n\t*
  writeFileL (for lazy bytestring)\n\t* isReadable\n\t* isExecutable\n\t* getModificationTime\n\t*
  setModificationTime\n\t* setModificationTimeHiRes\n\t* getDirsFiles' (returns filenames
  instead of paths)\n\t* withRawFilePath\n\t* withHandle\n\n## 0.10.1 -- 2020-01-13\n\n*
  Move file check functions to HPath.IO\n* Add 'doesExist'\n* Exception handling of
  `doesExist`, `doesFileExist`, `doesDirectoryExist` has changed: only eNOENT is catched\n*
  Exception handling of `isWritable` has changed: just a wrapper around `access` now\n*
  switch exception handling to `safe-exceptions`\n* Redo file reading API (readFileEOF
  dropped and now using streamly under the hood, added `readFileStream`)\n\n\n## 0.10.0
  -- 2020-01-04\n\n* First version. Split from 'hpath', contains only the IO parts.\n*
  Now uses streamly for 'copyFile'\n* Fixed tmpdir in hspec\n"
basic-deps:
  exceptions: -any
  bytestring: '>=0.10.0.0'
  unix: '>=2.5'
  base: '>=4.8 && <5'
  time: '>=1.8'
  hpath-posix: '>=0.13.3 && <0.14'
  safe-exceptions: '>=0.1'
  hpath: '>=0.12 && <0.13'
  streamly: '>=0.7'
  hpath-directory: '>=0.14.2 && <0.15'
all-versions:
- 0.11.0
- 0.12.0
- 0.13.0
- 0.13.1
- 0.13.2
- 0.14.0
- 0.14.1
- 0.14.2
author: Julian Ospald <hasufell@posteo.de>
latest: 0.14.2
description-type: markdown
description: |+
  # HPath-IO

  [![Gitter chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hasufell/hpath?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Hackage version](https://img.shields.io/hackage/v/hpath-io.svg?label=Hackage)](https://hackage.haskell.org/package/hpath-io) [![Build Status](https://api.travis-ci.org/hasufell/hpath.png?branch=master)](http://travis-ci.org/hasufell/hpath) [![Hackage-Deps](https://img.shields.io/hackage-deps/v/hpath-io.svg)](http://packdeps.haskellers.com/feed?needle=hpath-io)

  High-level IO operations on files/directories, utilizing type-safe Paths. This uses [hpath-directory](https://hackage.haskell.org/package/hpath-directory) under the hood.

  This package is part of the HPath suite, also check out:

  * [hpath](https://hackage.haskell.org/package/hpath)
  * [hpath-directory](https://hackage.haskell.org/package/hpath-directory)
  * [hpath-filepath](https://hackage.haskell.org/package/hpath-filepath)

  ## Motivation

  The motivation came during development of
  [hsfm](https://github.com/hasufell/hsfm)
  in order to have a proper high-level API of file related operations,
  while utilizing type-safe Paths.

  ## Goals

  * high-level API to file operations like recursive directory copy
  * still allowing sufficient control to interact with the underlying low-level calls
  * unit-testing exceptions (because yes, people may rely on them)

  Note: this library was written for __posix__ systems and it will probably not support other systems.

license-name: BSD-3-Clause
