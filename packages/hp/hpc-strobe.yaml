all-versions:
- '0.1'
author: Thorkil Naur
basic-deps:
  base: '>=0'
  filepath: '>=0'
  hpc: '>=0'
changelog: ''
changelog-type: ''
description: "=======================================================================\nREADME:
  hpc-strobe: Hpc-generated strobes for a running Haskell program\n=======================================================================\n\nhpc-strobe
  is a rudimentary library that demonstrates the possibility of\nusing Hpc (Haskell
  Program Coverage) to inspect the state of a running\nHaskell program. Please refer
  to\n\n  Andy Gill and Colin Runciman: \"Haskell Program Coverage\", in\n  Haskell
  Workshop, ACM Press, 2007\n\nfor a description of Hpc. At the time of writing this
  (2009-May-08),\nthe paper is available at\n\n  http://www.ittc.ku.edu/~andygill/papers/Hpc07.pdf\n\nIn
  ordinary use of Hpc, a single so-called tix file is produced at the\nend of a run.
  The tix file records how many times each expression has\nbeen used during the run.
  This can be used to mark up the source code,\nidentifying expressions that have
  not been used.\n\nhpc-strobe uses the basic machinery provided by Hpc to produce
  multiple\ntix files, also called strobes, representing the coverage at different\ntimes
  while the program is running. By subtracting such two tix files,\nagain using Hpc
  machinery, a tix file representing the expressions used\nbetween the times of recording
  the subtracted tix files is produced.\nThis may be used, for example, to get a better
  idea of what a\nlong-running program is doing. It could also be used as a profiling\ntool,
  getting information about how many times individual expressions\nare used.\n\nA
  program is included whose strobe differences produce a crude rendering\nof an analog
  clock when they are used to mark up the source code using\nHpc.\n\nUse of the library
  involves a simple change of the main function and\nalso requires the program to
  be enabled for hpc. At the time of writing,\nthis means using a fairly recent version
  of GHC and compiling the\nHaskell code with the -fhpc option.\n\nIn the rest of
  this README, please find (1) download information; (2)\nbuild and install information;
  (3) information on how to run the\ndemonstration program and render the analog clock;
  (4) a bit of\nbackground information; and (5) some final remarks. Information on
  how\nto use the library can be found in the haddock documentation which is\nbased
  on comments in src/Trace/Hpc/Strobe.hs in the package.\n\n1. Downloading hpc-strobe\n-------------------------\n\nhpc-strobe
  is on hackage, so for example:\n\n  $ wget http://hackage.haskell.org/packages/archive/hpc-strobe/0.1/hpc-strobe-0.1.tar.gz\n\n2.
  Building and installing hpc-strobe\n-------------------------------------\n\nFirst
  unpack the package:\n\n  $ tar xvz hpc-strobe-0.1.tar.gz\n\nThen build and install
  the Cabal way:\n\n  $ cd hpc-strobe-0.1\n  $ runhaskell Setup.hs configure # Additional
  options may be used\n  $ runhaskell Setup.hs build\n  $ runhaskell Setup.hs haddock
  # Optional\n  $ runhaskell Setup.hs install # Privileges (sudo) may be needed\n\nFor
  example:\n\n  $ tar xvfz ../../test/hpc/hpc-strobeDarcsRepository/hpc-strobe/dist/hpc-strobe-0.1.tar.gz
  \n  hpc-strobe-0.1/\n  hpc-strobe-0.1/demonstration/\n  hpc-strobe-0.1/demonstration/showClock1.sh\n
  \ hpc-strobe-0.1/demonstration/StrobeClock.hs\n  hpc-strobe-0.1/demonstration/strobeHpcDiff1.sh\n
  \ hpc-strobe-0.1/hpc-strobe.cabal\n  hpc-strobe-0.1/LICENSE\n  hpc-strobe-0.1/README\n
  \ hpc-strobe-0.1/Setup.hs\n  hpc-strobe-0.1/src/\n  hpc-strobe-0.1/src/Trace/\n
  \ hpc-strobe-0.1/src/Trace/Hpc/\n  hpc-strobe-0.1/src/Trace/Hpc/Strobe.hs\n  $ cd
  hpc-strobe-0.1/\n  $ runhaskell Setup.hs configure --user --prefix=/Users/thorkilnaur/tn/install/hpc-strobe-0.1\n
  \ Configuring hpc-strobe-0.1...\n  $ runhaskell Setup.hs build\n  Preprocessing
  library hpc-strobe-0.1...\n  Building hpc-strobe-0.1...\n  [1 of 1] Compiling Trace.Hpc.Strobe
  ( src/Trace/Hpc/Strobe.hs, dist/build/Trace/Hpc/Strobe.o )\n  ar: creating archive
  dist/build/libHShpc-strobe-0.1.a\n  $ runhaskell Setup.hs haddock\n  Preprocessing
  library hpc-strobe-0.1...\n  Running Haddock for hpc-strobe-0.1...\n  Documentation
  created: dist/doc/html/hpc-strobe/index.html\n  $ runhaskell Setup.hs install\n
  \ Installing: /Users/thorkilnaur/tn/install/hpc-strobe-0.1/lib/hpc-strobe-0.1/ghc-6.8.2\n
  \ Registering hpc-strobe-0.1...\n  Reading package info from \"dist/installed-pkg-config\"
  ... done.\n  Saving old package config file... done.\n  Writing new package config
  file... done.\n  $ \n\n3. Running the demonstration program\n------------------------------------\n\nI
  show how to run he demonstration program in-place in the unpacked\npackage directory:\n\n
  \ $ cd demonstration\n  $ ghc --version\n  The Glorious Glasgow Haskell Compilation
  System, version 6.8.2\n  $ ghc --make StrobeClock.hs -fhpc\n  [1 of 1] Compiling
  Main             ( StrobeClock.hs, StrobeClock.o )\n  Linking StrobeClock ...\n
  \ $ mkdir tixfiles\n  $ ./StrobeClock tixfiles \n  StrobeClock(2009-May-08 10.41):
  Canvas pixel height 39, pixel width 39\n  StrobeClock(2009-May-08 10.41): 634\n
  \ StrobeClock(2009-May-08 10.41): 1266\n  ...\n\nStrobeClock never stops, so at
  this point, enter a separate shell and\n\n  $ cd hpc-strobe-0.1/demonstration \n
  \ $ ls -tr tixfiles | tail -n 3\n  StrobeClock_254.tix\n  StrobeClock_255.tix\n
  \ StrobeClock_256.tix\n  $ \n\nto watch the growing list of strobes.\n\nNote: StrobeClock
  will not complain if you forget to create the tixfiles\ndirectory: In that case,
  no tixfiles will be written. Whether this\nshould be considered an error or a feature,
  I haven't decided.\n\nTo produce a single strobe difference, a shell script strobeHpcDiff1.sh\nis
  provided. For example:\n\n  $ sh strobeHpcDiff1.sh . tixfiles StrobeClock 0 5\n
  \ Writing: Main.hs.html\n  Writing: hpc_index.html\n  Writing: hpc_index_fun.html\n
  \ Writing: hpc_index_alt.html\n  Writing: hpc_index_exp.html\n  strobeHpc_StrobeClock_5_SUB_0_20090508_140251/\n
  \ strobeHpc_StrobeClock_5_SUB_0_20090508_140251/Main.hs.html\n  $ \n\nThis deposits
  marked-up source code in a time-stamped directory. It\nalso produces a .tar.gz file
  for that directory. Please look at the\nstrobeHpcDiff1.sh code itself for usage
  information.\n\nNow point your browser to the Main.hs.html file in the time-stamped\ndirectory.
  On my Mac OS X, I can do\n\n  $ /Applications/Firefox.app/Contents/MacOS/firefox
  strobeHpc_StrobeClock_5_SUB_0_20090508_140251/Main.hs.html &\n  [1] 23707\n  $ \n\nbut
  something different may be needed. Now scroll down a few lines in\nthis marked-up
  version of the StrobeClock.hs code to display the canvas\nfunction. You should be
  able to make out a crude rendering of an analog\nclock, showing the local time of
  day. And since we have taken the\ndifference over 5 strobes, with 1 second between
  each, the seconds hand\non the clock is smeared, covering those 5 seconds.\n\nFor
  a more dynamic experience, with StrobeClock still running:\n\n  $ sh showClock1.sh
  \n  showClock1.sh: Skip over tixfiles/StrobeClock_0.tix to tixfiles/StrobeClock_1.tix\n
  \ showClock1.sh: Skip over tixfiles/StrobeClock_1.tix to tixfiles/StrobeClock_2.tix\n
  \ ...\n  showClock1.sh: Skip over tixfiles/StrobeClock_30.tix to tixfiles/StrobeClock_31.tix\n
  \ showClock1.sh: Mark up tixfiles/StrobeClock_31.tix to tixfiles/StrobeClock_32.tix\n
  \ Writing: Main.hs.html\n  Writing: hpc_index.html\n  Writing: hpc_index_fun.html\n
  \ Writing: hpc_index_alt.html\n  Writing: hpc_index_exp.html\n  ...\n\nThis creates
  a directory, ClockDisplay, and maintains in this directory\na marked-up Main.hs.html
  that corresponds to the difference between the\nthird- and second-latest strobes
  in the tixfiles directory.\n(showClock1.sh assumes that the tixfiles directory is
  named \"tixfiles\"\nand also that the tixfile filename prefix is \"StrobeClock\".)\n\nThen
  point your browser to this file, for example (again after entering\na new shell:
  showClock1.sh runs forever; also, I need to close the\nother firefox before starting
  a new one):\n\n  $ cd hpc-strobe-0.1/demonstration \n  $ /Applications/Firefox.app/Contents/MacOS/firefox
  ClockDisplay/Main.hs.html &\n  [1] 24813\n  $ \n\nThis will show the most recently
  marked-up strobe difference, hence the\ncurrent local time will be rendered in the
  canvas function. Smearing\nmay occur, but refreshing the display usually helps.\n\nIn
  addition to PPC Mac OS X 10.4 with GHC 6.8.2, the demonstration has\nbeen tried
  successfully on Windows with GHC 6.8.2 with both MSYS and\nCygwin; and on Ubuntu
  x86 Linux with GHC 6.10.2.\n\n4. Background\n-------------\n\nThe path to using
  the reflect interface in Hpc started with my desire to\ninvestigate a long-winding
  darcs pull (some GHC HEAD into GHC STABLE).\nSee http://bugs.darcs.net/issue1075.
  \ Earlier, to investigate the\nHughesPJ pretty-printing library, I had written a
  simple tracer that did\na source-to-source transformation of Haskell code, inserting
  calls to\nDebug.Trace.trace for all top-level definitions in a Haskell module. See\nhttp://hackage.haskell.org/trac/ghc/ticket/1337.
  This was at a point in\ntime where Hpc was not working. So my initial idea was to
  do something\nsimilar to darcs, transforming selected darcs modules to figure out
  what\nthey were doing.\n\nThe work started around 2008-Sep-02. After struggling
  for a while, I\nhad settled on a modified version of the Hpc.c that comes with the
  GHC\nruntime system that wrote out tix files regularly. Immediately\nafterwards,
  however, I stumbled over the Trace.Hpc.Reflect and\nTrace.Hpc.Tix modules that supported
  exactly what I needed. Thanks to\nthe foresight of Andy Gill and Colin Runciman,
  everything turned out to\nbe surprisingly simple. In fact, a major motivation for
  publishing the\npresent library is simply to make this technique better known. The\nhpc-strobe
  library itself is really not adding anything significant to\nHpc itself.\n\nAt the
  Hac5/darcs sprint 2, I gave a brief presentation of the\ntechnique:\n\n  http://blog.darcs.net/2009/04/darcs-hacking-sprint-2-report.html\n\nThanks
  to Don Steward for helping here.\n\n5. Final words\n--------------\n\nAs mentioned,
  the contents of the hpc-strobe library itself is really\nnot particularly significant
  and it is easy to imagine a number of\ngeneralizations and variations of the technique
  that opens up what I\nbelieve is a fairly rich field of valuable applications.\n\nI
  should mention the hpc-tracer library by Andy Gill and Colin Runciman:\n\n  http://hackage.haskell.org/cgi-bin/hackage-scripts/package/hpc-tracer\n\nI
  must admit that I have not studied this library in detail, but it\nclearly seems
  to be headed in much the same direction as hpc-strobe,\nbut with a more elaborate
  user interface.\n\nThorkil Naur\n"
description-type: text
hash: db28c05e984549d8fb02735fe137b5018ada242b883e482de27a5747f7d9b71d
homepage: ''
latest: '0.1'
license-name: BSD-3-Clause
maintainer: naur@post11.tele.dk
synopsis: Hpc-generated strobes for a running Haskell program
test-bench-deps: {}
