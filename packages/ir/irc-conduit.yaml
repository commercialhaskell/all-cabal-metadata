homepage: https://github.com/barrucadu/irc-conduit
changelog-type: ''
hash: 39f31b42308083a2d7d9c0807fccda4f956c5767ead8592350f2fd7986018019
test-bench-deps: {}
maintainer: mike@barrucadu.co.uk
synopsis: Streaming IRC message library using conduits.
changelog: ''
basic-deps:
  bytestring: '>=0.10 && <0.11'
  x509-validation: '>=1.6 && <1.7'
  base: '>=4.8 && <5'
  time: '>=1.4 && <1.10'
  text: '>=1.0 && <1.3'
  tls: '>=1.3 && <1.6'
  network-conduit-tls: '>=1.1 && <1.4'
  async: '>=2.0 && <2.3'
  connection: '>=0.2 && <0.4'
  conduit: '>=1.2.8 && <1.4'
  irc-ctcp: '>=0.1.1 && <0.2'
  conduit-extra: '>=1.1 && <1.4'
  irc: '>=0.6 && <0.7'
  transformers: '>=0.3 && <0.6'
  profunctors: '>=5 && <6'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.2.1
- 0.2.2.2
- 0.2.2.3
- 0.2.2.4
- 0.2.2.5
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
- 0.3.0.5
author: Michael Walker
latest: 0.3.0.5
description-type: haddock
description: |-
  IRC messages consist of an optional identifying prefix, a command
  name, and a list of arguments. The <http://hackage.haskell.org/package/irc irc>
  package provides a low-level decoding and encoding scheme for
  messages in terms of ByteStrings, but using this relies on matching
  names of commands as strings, and unpacking this decoded structure
  yourself. This package takes it a little further, providing an ADT
  for IRC messages and sources, and conduits which attempt to decode
  and encode messages appropriately.

  In addition to providing conduits for automatically handling
  streaming messages, there are also helper functions for connecting
  to an IRC server and hooking up conduits to the socket.
license-name: MIT
