all-versions:
- 0.0.0.0
- 0.1.0.0
author: Dmitrii Kovanikov
basic-deps:
  ansi-terminal: ^>=0.11
  base: '>=4.14 && <4.18'
  directory: ^>=1.3
  mtl: '>=2.2 && <2.4'
  optparse-applicative: ^>=0.17
  process: ^>=1.6
  text: '>=1.2 && <2.1'
  unliftio-core: ^>=0.2
changelog: "# Changelog\n\nAll notable changes to this project will be documented
  in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  this project adheres to [PVP Versioning][1]. The changelog is also\navailable [on
  GitHub][2].\n\n## [Unreleased]\n\n<!-- Add new changes here -->\n\n## [0.1.0.0]
  — 2023-03-02 \U0001F382\n\n### Added\n\n- [#22](https://github.com/chshersh/iris/issues/22):\n
  \ Implement full CLI Guidelines recommendations on colouring:\n\n    * Detect colours
  of `stdout` and `stderr` automatically\n    * Always output colours when `--colour`
  (or `--color`) is specified\n    * Disable colours when:\n        * `--no-colour`
  (or `--no-color`) is specified\n        * Output handle doesn't support colouring\n
  \       * `NO_COLOUR` (or `NO_COLOR`) env is set\n        * `MYAPP_NO_COLOUR` (or
  `MYAPP_NO_COLOR`) env is set\n        * `TERM=dumb` env variable is set\n\n  (by
  [@marcellourbani], [@chshersh])\n- [#58](https://github.com/chshersh/iris/issues/58):\n
  \ Detect non-interactive terminals automatically\n  (by [@marcellourbani])\n- [#89](https://github.com/chshersh/iris/issues/89)\n
  \ Add `putStderrColoured` and `putStdoutColoured` functions for putting string\n
  \ without outputting the line break\n  (by [@Dponya])\n- [#84](https://github.com/chshersh/iris/issues/84):\n
  \ Add support for GHC 9.4\n  (by [@blackheaven])\n- [#27](https://github.com/chshersh/iris/issues/27):\n
  \ Add Haddock with usage examples to many modules\n  (by [@chshersh])\n\n### Changed\n\n-
  [#90](https://github.com/chshersh/iris/issues/90):\n  Use `Text` instead of `ByteString`
  in `putStdoutColoured(Ln)` and\n  `putStderrColoured(Ln)` functions\n  (by [@lillycat332])\n
  \   - __Migration guide:__ Use functions from `Data.Text.Encoding` to convert\n
  \     between `ByteString` and `Text` or change your types to `Text`\n- [#67](https://github.com/chshersh/iris/issues/67):\n
  \ Remove the `cliEnvSettingsRequiredTools` field from the `CliEnvSettings` type.\n
  \ Also remove the `CliEnvException` type.  Now, a new function `need` from\n  `Iris.Tool`
  should be used for each individual command instead.\n  (by [@german1608])\n    -
  __Migration guide 1:__ Use the `need` function from the `Iris.Tool` module instead.\n
  \   - __Migration guide 2:__ Don't catch `CliEnvException` from `mkCliEnv` anymore.\n-
  [#33](https://github.com/chshersh/iris/issues/33):\n  Move errors from `ToolCheckResult`
  into a separate type\n  (by [@charrsky])\n    - __Migration guide:__ Change pattern-matching
  on `ToolCheckResult` to\n    handle only one constructor with an error instead of
  previous two.\n\n### Non-UX changes\n\n- [#16](https://github.com/chshersh/iris/issues/16):\n
  \ Write complete Iris tutorial with a usage example using Literate Haskell\n  (by
  [@Dponya], [@chshersh])\n- [#56](https://github.com/chshersh/iris/issues/56):\n
  \ Implement tests for the `--help` parser\n  (by [@CThuleHansen])\n- [#57](https://github.com/chshersh/iris/issues/57):\n
  \ Add tests for the `--version` and `--numeric-version` flags\n  (by [@CThuleHansen])\n-
  [#59](https://github.com/chshersh/iris/issues/59):\n  Write a test to check if global
  parsing conflicts with local parsing\n  (by [@zetkez])\n- [#70](https://github.com/chshersh/iris/issues/70):\n
  \ Add HLint configuration and CI support\n  (by [@blackheaven])\n- [#64](https://github.com/chshersh/iris/issues/64):\n
  \ Add Stan configuration and CI support\n  (by [@blackheaven])\n- [#69](https://github.com/chshersh/iris/issues/69):\n
  \ Add pre-commit hooks config\n  (by [@aleeusgr])\n- [#74](https://github.com/chshersh/iris/issues/74):\n
  \ Add pull request template\n  (by [@himanshumalviya15])\n- [#62](https://github.com/chshersh/iris/issues/62):\n
  \ Use `fourmolu` for code formatting\n  (by [@chshersh])\n\n## [0.0.0.0] — 2022-08-09
  \U0001F307\n\nInitial release prepared by [@chshersh].\n\n### Added\n\n- [#34](https://github.com/chshersh/iris/issues/34):\n
  \ Add the `--no-input` CLI option for disabling interactivity\n  (by [@charrsky])\n-
  [#36](https://github.com/chshersh/iris/issues/36):\n  Support Windows and macOS\n
  \ (by [@charrsky])\n- [#37](https://github.com/chshersh/iris/issues/37):\n  Support
  GHC 9.0.2\n  (by [@charrsky])\n- [#38](https://github.com/chshersh/iris/issues/38):\n
  \ Support GHC 9.2.3 and GHC 9.2.4\n  (by [@charrsky], [@chshersh])\n- [#42](https://github.com/chshersh/iris/issues/42),\n
  \ [#52](https://github.com/chshersh/iris/issues/52):\n  Add `stack` support and
  instructions to build with `stack`\n  (by [@charrsky], [@chshersh])\n- [#43](https://github.com/chshersh/iris/issues/43):\n
  \ Add `MonadUnliftIO` instance for the `CliApp` monad\n  (by [@charrsky])\n\n<!--
  Contributors -->\n\n[@aleeusgr]: https://github.com/aleeusgr\n[@blackheaven]: https://github.com/blackheaven\n[@charrsky]:
  https://github.com/charrsky\n[@chshersh]: https://github.com/chshersh\n[@CThuleHansen]:
  https://github.com/CThuleHansen\n[@Dponya]: https://github.com/Dponya\n[@german1608]:
  https://github.com/german1608\n[@himanshumalviya15]: https://github.com/himanshumalviya15\n[@lillycat332]:
  https://github.com/lillycat332\n[@marcellourbani]: https://github.com/marcellourbani\n[@zetkez]:
  https://github.com/zetkez\n\n<!-- Header links -->\n\n[1]: https://pvp.haskell.org\n[2]:
  https://github.com/chshersh/iris/releases\n\n<!-- Versions -->\n\n[Unreleased]:
  https://github.com/chshersh/iris/compare/v0.1.0.0...HEAD\n[0.1.0.0]: https://github.com/chshersh/iris/releases/tag/v0.1.0.0\n[0.0.0.0]:
  https://github.com/chshersh/iris/releases/tag/v0.0.0.0\n"
changelog-type: markdown
description: "# iris\n\n[![GitHub CI](https://github.com/chshersh/iris/workflows/CI/badge.svg)](https://github.com/chshersh/iris/actions)\n[![Hackage](https://img.shields.io/hackage/v/iris.svg?logo=haskell)](https://hackage.haskell.org/package/iris)\n[![MPL-2.0
  license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](LICENSE)\n\n**Iris**
  is a Haskell framework for building CLI applications that follow\n[Command Line
  Interface Guidelines](https://clig.dev/).\n\n> \U0001F308 Iris (/ˈaɪrɪs/) is a Greek
  goddess associated with communication, messages,\n> the rainbow, and new endeavors.\n\n<picture>\n
  \ <source media=\"(prefers-color-scheme: dark)\"  srcset=\"https://raw.githubusercontent.com/chshersh/iris/main/images/iris-dark.png\">\n
  \ <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/chshersh/iris/main/images/iris-light.png\">\n
  \ <img alt=\"Iris changing her workflow and hair colour depending on the time of
  day.\" src=\"https://raw.githubusercontent.com/chshersh/iris/main/images/iris-dark-always.png\">\n</picture>\n\n>
  ℹ️ **DISCLAIMER #1:** Currently, Iris is in experimental phase and\n> mostly for
  early adopters. It may lack documentation or have\n> significant breaking changes.
  We appreciate anyone's help in\n> improving the documentation! At the same time,
  the maintainers will\n> strive to provide helpful migration guides.\n\n> ℹ️ **DISCLAIMER
  #2:** Iris is developed and maintained in free time\n> by volunteers. The development
  may continue for decades or may stop\n> tomorrow. You can use\n> [GitHub Sponsorship](https://github.com/sponsors/chshersh)
  to support\n> the development of this project.\n\n## Goals\n\nIris development is
  guided by the following principles:\n\n1. **Support [Command Line Interface Guidelines](https://clig.dev/).**\n
  \  Features or changes that violate these guidelines are not accepted\n   in the
  project.\n2. **Beginner-friendliness.** Haskell beginners should be able to build\n
  \  CLI applications with Iris. Hence, the implementation of Iris API\n   that uses
  less fancy Haskell features are preferred. When the\n   complexity is justified,
  the cost of introducing this extra\n   complexity should be mitigated by having
  better documentation.\n3. **Reasonable batteries-included.** Iris is not trying
  to be\n   minimalistic as possible, it strives to provide out-of-the-box\n   solutions
  for most common problems. But at the same time, we don't\n   want to impose unnecessary
  heavy dependencies.\n4. **Excellent documentation.** Iris documentation should be
  as\n   helpful as possible in using the framework.\n\n   > **NOTE:** Currently,
  Iris may lack documentation but there's an\n   > ongoing effort to improve the situation.\n\n5.
  **Single-line access.** Iris is designed for qualified imports, and you\n   should
  be able to get all the needed API by writing a single import line:\n\n   ```haskell\n
  \  import qualified Iris\n   ```\n\n\U0001F9F1 Iris focuses solely on CLI applications.
  If you're interested in\nbuilding TUI app with Haskell, check out\n[brick](https://hackage.haskell.org/package/brick).\n\n##
  Features\n\nCLI apps built with Iris offer the following features for end users:\n\n*
  Automatic detection of colouring support in the terminal\n* Ability to check required
  external tools if you need e.g. `curl` or\n  `git`\n* Support for standard CLI options
  out-of-the-box:\n    * `--help`\n    * `--version`\n    * `--numeric-version`: helpful
  for detecting required tools versions\n    * `--no-input`: for disabling all interactive
  features\n    * `--colour=(auto|never|always)`: to set colour mode\n    * `--no-colour`:
  to disable terminal colouring\n* Utilities to open files in a browser\n\n## Quick
  Start Guide\n\n> \U0001F4DA Refer to [the complete Iris tutorial][simple-grep] for
  more details and\n> examples of more Iris features.\n\n[simple-grep]: https://github.com/chshersh/iris/blob/main/examples/simple-grep/README.md\n\n`iris`
  is compatible with the following GHC\nversions - [supported versions](https://matrix.hackage.haskell.org/#/package/iris)\n\nIn
  order to start using `iris` in your project, you\nwill need to set it up with these
  steps:\n\n1. Add the dependency on `iris` in your project's\n   `.cabal` file. For
  this, you should modify the `build-depends`\n   section according to the below section:\n\n
  \  ```haskell\n   build-depends:\n     , base ^>= LATEST_SUPPORTED_BASE\n     ,
  iris ^>= LATEST_VERSION\n   ```\n\n2. To use this package, refer to the below example.\n\n
  \  ```haskell\n   {-# LANGUAGE DerivingStrategies #-}\n   {-# LANGUAGE GeneralizedNewtypeDeriving
  #-}\n\n   module Main (main) where\n\n   import Control.Monad.IO.Class (MonadIO
  (..))\n\n   import qualified Iris\n\n\n   newtype App a = App\n       { unApp ::
  Iris.CliApp () () a\n       } deriving newtype\n           ( Functor\n           ,
  Applicative\n           , Monad\n           , MonadIO\n           )\n\n   appSettings
  :: Iris.CliEnvSettings () ()\n   appSettings = Iris.defaultCliEnvSettings\n       {
  Iris.cliEnvSettingsHeaderDesc = \"Iris usage example\"\n       , Iris.cliEnvSettingsProgDesc
  = \"A simple 'Hello, world!' utility\"\n       }\n\n   app :: App ()\n   app = liftIO
  $ putStrLn \"Hello, world!\"\n\n   main :: IO ()\n   main = Iris.runCliApp appSettings
  $ unApp app\n   ```\n\n## For contributors\n\nCheck [CONTRIBUTING.md](https://github.com/chshersh/iris/blob/main/CONTRIBUTING.md)\nfor
  contributing guidelines.\n\n## Development\n\nTo build the project and run the tests
  locally, you can use either\n`cabal` or `stack`.\n\n> See the [First time](#first-time)
  section if you don't have Haskell\n> development environment locally.\n\n### Cabal\n\nBuild
  the project:\n\n```shell\ncabal build all\n```\n\nRun all unit tests:\n\n```shell\ncabal
  test --enable-tests --test-show-details=direct\n```\n\n### Stack\n\nBuild the project:\n\n```shell\nstack
  build --test --no-run-tests\n```\n\nRun all unit tests:\n\n```shell\nstack test\n```\n\n###
  First time\n\nIf this is your first time dealing with Haskell tooling, we recommend\nusing
  [GHCup](https://www.haskell.org/ghcup/).\n\nDuring the installation, GHCup will
  suggest you installing all the\nnecessary tools. If you have GHCup installed but
  miss some of the\ntooling for some reason, type the following commands in the terminal:\n\n```shell\nghcup
  install ghc 9.2.5\nghcup set     ghc 9.2.5\nghcup install cabal 3.8.1.0\n```\n\n>
  If you are using Linux or macOS, you may find `ghcup tui` command a\n> more attractive
  option.\n"
description-type: markdown
hash: dd6d664b87dc78b9a2f3b7316dedb5aacdaebb84083f97c50625c5d445edf288
homepage: https://github.com/chshersh/iris
latest: 0.1.0.0
license-name: MPL-2.0
maintainer: Dmitrii Kovanikov <kovanikov@gmail.com>
synopsis: Haskell CLI framework
test-bench-deps:
  base: '>=4.14 && <4.18'
  hspec: '>=2.9.7 && <2.11'
  iris: '>=0'
  optparse-applicative: '>=0'
  text: '>=0'
