homepage: https://github.com/parsonsmatt/monad-metrics#readme
changelog-type: markdown
hash: 1f9f719039c9a7a6e251630d8e2344052431cfce03b2bee0eb774d5c896b814d
test-bench-deps:
  base: '>=4.8 && <=5.0'
  monad-metrics: -any
maintainer: parsonsmatt@gmail.com
synopsis: A convenient wrapper around EKG metrics
changelog: "# Change Log\n\n## v0.2.2.1\n\n- Bump upper bounds\n\n## v0.2.2.0\n\n-
  Add `gaugeIncrement` and `gaugeDecrement` functions [#16](https://github.com/parsonsmatt/monad-metrics/pull/16)\n\n##
  v0.2.1.1\n\n- Bump `exceptions` upper bound from 0.9 to 0.10\n\n## v0.2.1.0\n\n-
  Introduced `timedList` method, to store the same distribution data under several
  names at once.\n- Fix some documentation typos\n\n## v0.2.0.0 \n\n- Make `timed`
  and `timed'` require a `MonadMask` constraint for bracketing.\n- [#7](https://github.com/sellerlabs/monad-metrics/pull/7)
  Switch `Map` to `HashMap`; [~4x faster to look up](https://github.com/sellerlabs/monad-metrics/pull/8)\n-
  Fix a potential race condition when registering new metrics.\n\n## v0.1.0.2\n\nFix
  bug where timed metrics are reported in the negatives.\n\n## ~~v0.1.0.0~~ v0.1.0.1\n\nInitial
  Release\n\n"
basic-deps:
  exceptions: '>=0.6 && <0.11'
  ekg-core: '>=0.1.0.1 && <0.2'
  base: '>=4.8 && <5'
  unordered-containers: '>=0.2 && <0.3'
  text: -any
  clock: '>=0.3 && <0.9'
  mtl: '>=2 && <2.4'
  hashable: '>=1.2 && <1.5'
  transformers: '>=0.3 && <0.7'
  microlens: '>=0.2 && <0.5'
all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
- 0.2.1.4
- 0.2.2.0
- 0.2.2.1
author: Matthew Parsons
latest: 0.2.2.1
description-type: markdown
description: "# `monad-metrics`\n\n[![Build Status](https://travis-ci.org/parsonsmatt/monad-metrics.svg?branch=master)](https://travis-ci.org/parsonsmatt/monad-metrics)\n\nThis
  library defines a convenient wrapper and API for using [EKG][] metrics in\nyour
  application. It's heavily inspired by the metrics code that Taylor Fausak\nused
  in his Haskell application [blunt](https://github.com/tfausak/blunt).\n\n# Usage\n\nThis
  [README is an executable literate Haskell\nfile](https://github.com/silky/literate-readme).
  If you have [stack][] installed, then you can run the file with:\n\n```\n./README.lhs\n```\n\nWe'll
  need to start with the import/pragma boilerplate:\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE NoMonomorphismRestriction
  #-}\n\nimport qualified Control.Monad.Metrics as Metrics\nimport           Control.Monad.Metrics
  (Metrics, Resolution(..), MonadMetrics(..))\nimport           Control.Monad.Reader\nimport
  qualified System.Metrics        as EKG\n```\n\nThe `Control.Monad.Metrics` module
  is designed to be imported qualified.\n\n### Initialize!\n\nFirst, you need to initialize
  the `Metrics` data type. You can do so using\n`initialize` (to create a new EKG
  store) or `initializeWith` if you want to\npass a preexisting store.\n\n```haskell\ninitializing
  :: Bool -> EKG.Store -> IO Metrics\ninitializing True store = Metrics.initializeWith
  store\ninitializing False _    = Metrics.initialize\n```\n\n### Embed!\n\nThe next
  step is to implement an instance of the class `MonadMetrics` for your\nmonad transformer
  stack. This library has explicitly decided not to provide a\nconcrete monad transformer
  to reduce the dependency footprint. Fortunately,\nit's pretty easy!\n\nSuppose you've
  got the following stack:\n\n```haskell\ntype App = ReaderT Config IO\n\ndata Config
  = Config { configMetrics :: Metrics }\n```\n\nthen you can easily get the required
  instance with:\n\n```haskell\ninstance MonadMetrics (ReaderT Config IO) where\n
  \   getMetrics = asks configMetrics\n```\n\nNow, you're off to the races! Let's
  record some metrics.\n\nIf you're after a really simple embedding, you can use `run`
  or `run'`:\n\n```haskell\nsimple :: Int -> IO ()\nsimple i = \n    Metrics.run $
  do\n        metrics <- Metrics.getMetrics\n        Metrics.gauge \"Simple\" i\n
  \       forM_ [1..i] $ \\_ -> do\n            Metrics.increment \"Count!\"\n\ngettingThere
  :: IO ()\ngettingThere = \n    Metrics.run' (\\metrics -> Config metrics) $ do\n
  \       liftIO $ putStrLn \"it accepts a constructor\"\n```\n\n### Measure!\n\nOnce
  your application has the required instance, you can use [EKG][]'s metrics\n(counters,
  gauges, labels, distributions). \n\nFor detailed descriptions of the various metric
  types, see the corresponding [EKG][] documentation:\n\n- [Counter][]\n- [Distribution][]\n-
  [Gauge][]\n- [Label][]\n\nGenerally, the library provides \"sane default\" functions
  which accept the name\nof the metric to work with and the value to contribute to
  that metric.\n\n```haskell\nw = Metrics.label \"Foo\" \"Bar\"\nx = Metrics.counter
  \"MetricName\" 6\ny = Metrics.distribution \"Distribute\" 3.4\nz = Metrics.gauge
  \"Gauge\" 7\n```\n\nGeneralized versions of these functions are available with an
  apostrophe. Labels accept any `Show`able value, while gauges and counters accept
  any `Integral` value.\n\n```haskell\na = Metrics.label' \"List\" [1,2,3]\nb = Metrics.counter'
  \"Count\" (3 :: Integer)\n```\n\n#### Timers\n\nYou can time actions with `timed`,
  which has a resolution of seconds. You can\nuse `timed'` which accepts a `Resolution`
  argument to provide a different\nscale.\n\n```haskell\ntimedProcess :: App Int\ntimedProcess
  = \n    Metrics.timed \"summing1\" $ do\n        pure $! sum [1 .. 100000]\n\ntimedInMilliseconds
  :: App Int\ntimedInMilliseconds = \n    Metrics.timed' Microseconds \"summing2\"
  $ do\n        pure $! sum [1..100]\n```\n\n# A demonstration\n\n```haskell\nmain
  :: IO ()\nmain = do\n    metrics <- Metrics.initialize\n    flip runReaderT (Config
  metrics) $ do\n        Metrics.label \"ProgramName\" \"README\"\n        forM_ [1..10]
  $ \\_ -> do\n            Metrics.increment \"up-to-ten\"\n        Metrics.timed'
  Nanoseconds \"Whatever\" $ do\n            liftIO $ putStrLn \"Hello World!\" \n```\n\n[EKG]:
  http://hackage.haskell.org/package/ekg-core\n[stack]: https://www.haskellstack.org/\n[Counter]:
  http://hackage.haskell.org/package/ekg-core-0.1.1.1/docs/System-Metrics-Counter.html\n[Gauge]:
  \ http://hackage.haskell.org/package/ekg-core-0.1.1.1/docs/System-Metrics-Gauge.html\n[Distribution]:
  http://hackage.haskell.org/package/ekg-core-0.1.1.1/docs/System-Metrics-Distribution.html\n[Label]:
  http://hackage.haskell.org/package/ekg-core-0.1.1.1/docs/System-Metrics-Label.html\n"
license-name: MIT
