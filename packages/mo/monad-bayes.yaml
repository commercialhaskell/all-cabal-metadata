homepage: http://github.com/tweag/monad-bayes#readme
changelog-type: markdown
hash: 8929887b2883e553b928dcc9b1326171c87b6aa26f11800dc8c55b119a9e9649
test-bench-deps:
  mwc-random: -any
  base: -any
  hspec: -any
  text: -any
  monad-bayes: -any
  criterion: -any
  process: -any
  matrix: -any
  log-domain: -any
  containers: -any
  lens: -any
  math-functions: -any
  pipes: -any
  typed-process: -any
  ieee754: -any
  linear: -any
  mtl: -any
  foldl: -any
  pretty-simple: -any
  statistics: -any
  transformers: -any
  random: -any
  QuickCheck: -any
  abstract-par: -any
  profunctors: -any
  vector: -any
maintainer: dominic.steinitz@tweag.io
synopsis: A library for probabilistic programming.
changelog: |
  # 1.0.0 (2022-09-10)

  - host website from repo
  - host notebooks from repo
  - use histogram-fill

  # 0.2.0 (2022-07-26)

  - rename various functions to match the names of the corresponding types (e.g. `Enumerator` goes with `enumerator`)
  - add configs as arguments to inference methods `smc` and `mcmc`
  - add rudimentary tests for all inference methods
  - put `mcmc` as inference method in new module `Control.Monad.Bayes.Inference.MCMC`
  - update history of changelog in line with semantic versioning conventions
  - bumped to GHC 9.2.3

  # 0.1.5 (2022-07-26)

  - Refactor of sampler to be parametric in the choice of a pair of IO monad and RNG

  # 0.1.4 (2022-06-15)

  Addition of new helper functions, plotting tools, tests, and Integrator monad.

  - helpers include: `toEmpirical` (list of samples to empirical distribution) and `toBins` (simple histogramming)
  - `Integrator` is an instance of `MonadDistribution` for numerical integration
  - `notebooks` now contains working notebook-based tutorials and examples
  - new tests, including with conjugate distributions to compare analytic solution against inferred posterior
  - `models` directory is cleaned up. New sequential models using `pipes` package to represent monadic streams

  # 0.1.3 (2022-06-08)

  Clean up of unused functions and broken code

  - remove unused functions in `Weighted` and `Population`
  - remove broken models in `models`
  - explicit imports
  - added some global language extensions

  # 0.1.2 (2022-06-08)

  Add documentation

  - docs written in markdown
  - docs built by sphinx

  # 0.1.1 (2020-04-08)

  - New exported function: `Control.Monad.Bayes.Class` now exports `discrete`.

  # 0.1.0 (2020-02-17)

  Initial release.
basic-deps:
  free: '>=5.0.2 && <5.2'
  mwc-random: '>=0.13.6 && <0.16'
  histogram-fill: -any
  base: '>=4.11 && <4.17'
  time: -any
  text: -any
  monad-bayes: -any
  vty: -any
  matrix: -any
  monad-coroutine: ^>=0.9.0
  integration: -any
  log-domain: '>=0.12 && <0.14'
  containers: '>=0.5.10 && <0.7'
  lens: -any
  math-functions: '>=0.2.1 && <0.4'
  pipes: -any
  ieee754: ^>=0.8.0
  monad-extras: -any
  linear: -any
  mtl: ^>=2.2.2
  foldl: -any
  pretty-simple: -any
  statistics: '>=0.14.0 && <0.17'
  optparse-applicative: -any
  random: -any
  scientific: -any
  brick: '>=1.0 && <2.0'
  primitive: -any
  safe: ^>=0.3.17
  vector: '>=0.12.0 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 1.0.0
- 1.1.0
author: Adam Scibior <adscib@gmail.com>
latest: 1.1.0
description-type: markdown
description: "# [Monad-Bayes](https://monad-bayes-site.netlify.app/_site/about.html)\n\nA
  library for probabilistic programming in Haskell. \n\n<!-- [![Hackage](https://img.shields.io/hackage/v/monad-bayes.svg)](https://hackage.haskell.org/package/monad-bayes)\n[![Stackage](http://stackage.org/package/monad-bayes/badge/lts)](http://stackage.org/lts/package/monad-bayes)\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/monad-bayes.svg)](http://packdeps.haskellers.com/reverse/monad-bayes)\n[![Build
  status](https://badge.buildkite.com/147af088063e8619fcf52ecf93fa7dd3353a2e8a252ef8e6ad.svg?branch=master)](https://buildkite.com/tweag-1/monad-bayes)
  -->\n\n[See the website](https://monad-bayes-site.netlify.app/_site/about.html)
  for an overview of the documentation, library, tutorials, examples (and a link to
  this very source code). \n\n<!-- Monad-Bayes is a library for **probabilistic programming
  in Haskell**. The emphasis is on composition of inference algorithms, and is implemented
  in terms of monad transformers. -->\n\n<!-- See the [documentation](https://monad-bayes.netlify.app/)
  for a quick-start user guide and a reference overview of how it all works. -->\n\nCreated
  by [Adam Scibior][adam-web] ([@adscib][adam-github]), documentation, website and
  newer features by [Reuben][reuben-web], maintained by [Tweag][tweagio].\n\n## Project
  status\n\nNow that `monad-bayes` has been released on Hackage, and the documentation
  and the API has been updated, we will focus on adding new features. See the Github
  issues to get a sense of what is being prepared, and please feel free to make requests.\n\n##
  Background\n\nThe basis for the code in this repository is the ICFP 2018 paper [2].
  For the\ncode associated with the Haskell2015 paper [1], see the [`haskell2015`\ntag][haskell2015-tag].\n\n[1]
  Adam M. Ścibior, Zoubin Ghahramani, and Andrew D. Gordon. 2015. [Practical\nprobabilistic
  programming with monads][haskell2015-doi]. In _Proceedings of the\n2015 ACM SIGPLAN
  Symposium on Haskell_ (Haskell ’15), Association for Computing\nMachinery, Vancouver,
  BC, Canada, 165–176.\n\n[2] Adam M. Ścibior, Ohad Kammar, and Zoubin Ghahramani.
  2018. [Functional\nprogramming for modular Bayesian inference][icfp2018-doi]. In
  _Proceedings of\nthe ACM on Programming Languages_ Volume 2, ICFP (July 2018), 83:1–83:29.\n\n[3]
  Adam M. Ścibior. 2019. [Formally justified and modular Bayesian inference\nfor probabilistic
  programs][thesis-doi]. Thesis. University of Cambridge.\n\n## Hacking\n\n1. Install
  `stack` by following [these instructions][stack-install].\n\n2. Clone the repository
  using one of these URLs:\n   ```\n   git clone git@github.com:tweag/monad-bayes.git\n
  \  git clone https://github.com/tweag/monad-bayes.git\n   ```\n\nNow you can use
  `stack build`, `stack test` and `stack ghci`.\n\n**To view the notebooks, go to
  the website**. To use the notebooks interactively:\n\n1. Compile the source: `stack
  build`\n2. If you do not have `nix` [install it](https://nixos.org/download.html).\n3.
  Run `nix develop --system x86_64-darwin --extra-experimental-features nix-command
  --extra-experimental-features flakes` - this should open a nix shell. For Linux
  use `x86_64-linux` for `--system` option instead. \n4. Run `jupyter-lab` from the
  nix shell to load the notebooks.\n\nYour mileage may vary. \n\n[adam-github]: https://github.com/adscib\n[adam-web]:
  https://www.cs.ubc.ca/~ascibior/\n[reuben-web]: https://reubencohngordon.com/\n[haskell2015-doi]:
  https://doi.org/10.1145/2804302.2804317\n[haskell2015-tag]: https://github.com/tweag/monad-bayes/tree/haskell2015\n[icfp2018-doi]:
  https://doi.org/10.1145/3236778\n[models]: https://github.com/tweag/monad-bayes/tree/master/models\n[stack-install]:
  https://docs.haskellstack.org/en/stable/install_and_upgrade/\n[thesis-doi]: https://doi.org/10.17863/CAM.42233\n[tweagio]:
  https://tweag.io\n"
license-name: MIT
