all-versions:
- 0.33.0
author: Zebulun Arendsee
basic-deps:
  aeson: '>=1.2.4.0 && <1.3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8.2 && <0.11'
  containers: '>=0.5.10.2 && <0.6'
  directory: '>=1.3.0.2 && <1.4'
  docopt: '>=0.7.0.5 && <0.8'
  extra: '>=1.6.5 && <1.7'
  filepath: '>=1.4.1.2 && <1.5'
  haskell-src-meta: '>=0.8.0.2 && <0.9'
  megaparsec: '>=6.4.1 && <6.5'
  morloc: '>=0'
  mtl: '>=2.2.2 && <2.3'
  parsec: '>=3.1.13.0 && <3.2'
  partial-order: '>=0.1.2.1 && <0.2'
  pretty-simple: '>=2.1.0.0 && <2.2'
  prettyprinter: '>=1.2.0.1 && <1.3'
  prettyprinter-ansi-terminal: '>=1.1.1.2 && <1.2'
  process: '>=1.6.1.0 && <1.7'
  raw-strings-qq: '>=1.1 && <1.2'
  safe: '>=0.3.17 && <0.4'
  scientific: '>=0.3.5.3 && <0.4'
  template-haskell: '>=2.12.0.0 && <2.13'
  text: '>=1.2.3.0 && <1.3'
  unordered-containers: '>=0.2.9.0 && <0.3'
  yaml: '>=0.8.29 && <0.9'
changelog: "1.0.0 [202x.xx.xx]\n------------------\n\nThe first stable. It will be
  a product that I expect other people to use for\nimportant projects, therefore backwards
  compatibility will be important. The\nwhole system needs extensive testing in real
  applications. Much of this will be\ndone in the development of the core libraries.
  We will also need to add\nhandling for several very different languages (proofs-of-concept).\n\n
  - [ ] typeclasses\n - [ ] semantic types - test in bioinformatics applications\n
  - [ ] constraints - refined types?\n - [ ] manifold hooks - caching, documentation,
  logging, effects\n - [ ] logic engine (z3?) - from typechecking to architecture
  design and debugging\n - [ ] ecosystem (test suite, linter, package tools, vim plugin)\n
  - [ ] language support (Python3, R, C++, Java, Haskell, Scheme, Prolog)\n - [ ]
  well tested core libraries\n\n0.34.0 [202x.xx.xx]\n-------------------\n\n - [ ]
  Remove extra space printed at the end of R JSON\n - [ ] Remove semicolon requirement\n\n0.33.0
  [2020.11.03]\n-------------------\n\nFirst hackage release\n\n * Haddock documentation\n
  * Update README\n * In help statements write universal, not concrete, types\n *
  Make default containers non-existential (probably a bad decision?)\n\n0.32.0 [2020.11.01]\n-------------------\n\n
  * Add record/table field access\n * Fix JSON handling in nexus\n * Fix nexus bug
  necessitated escaping quotations and braces\n * Print general types in nexus help\n
  * Resolve most GHC warnings\n\n0.31.0 [2020.10.29]\n-------------------\n\n * Fix
  anonymous records in C++\n * Distinguish 'record', 'object', and 'table'\n * Add
  object handling\n * Add table handling\n\n0.30.0 [2020.10.23]\n-------------------\n\n
  * Add `object` keyword for defining record types\n * Add full record serialization
  handling (C++, py, R)\n\n0.29.0 [2020.10.21]\n-------------------\n\n * Add AST
  directed (de)serialization framework\n * Add type constructors for parameterized
  types\n\n0.28.0 [2020.10.12]\n-------------------\n\n * Allow import/export of type
  aliases\n * Refactor with DAGs all through the parser and typechecker\n\n0.27.0
  [2020.10.04]\n-------------------\n\n * Add systematic tests for data serialization\n
  * Fix bug in C++ serialization\n * Move to serialize to dedicated libraries that
  require no import\n\n0.26.0 [2020.09.27]\n-------------------\n\nAdd `type` keyword
  for defining type aliases\n\n0.25.0 [2020.09.26]\n-------------------\n\nNo explicit
  forall. Instead use Haskell convention of generics being lowercase\nand non-generics
  being uppercase. \n\n * no more explicit \"forall\"\n * generics are lowercase in
  type signatures\n * non-generic types are uppercase\n * normal functions are lowercase\n
  * class constructors are uppercase (though handling for this is not yet implemented)\n\n0.24.0
  [2020.09.22]\n-------------------\n\nAllow integration of many instances\n\n0.23.0
  [2020.05.14]\n\nBug fixes and code cleanup\n\nBug fixes / tests\n - [x] [x] github
  issue #7 - new Var=> typechecking rule\n - [x] [x] github issue #9 - rewire container
  type inference\n - [x] [x] github issue #10\n - [x] [x] github issue #11\n\n\n0.22.0
  [2020.04.28]\n-------------------\n\nImplement a schema-directed composable serialization
  system\n\nMajor changes\n * Fully composable serialization over containers and primitives\n
  * Improved C++ support of generic functions\n * Record support for R and Python3
  (not C++ yet)\n * Refactor generator - replace old grammar system\n * Allow arguments
  to be passed to general functions\n   (e.g., `foo x = [x]`, where no specific language
  is needed) \n\nMinor changes\n * change default python3 interpreter from \"python\"
  to \"python3\"\n * add default library and tmp paths to config handler\n * test
  composable serialization functions in all supported languages\n * allow wrapped
  comments in R\n\nTesting - grammar directed testing\n * test record handling\n *
  remove and replace out-of-date golden tests\n * systematic argument handling tests\n
  * systematic manifold form tests\n * systematic interop testing\n\n0.21.0 [2020.03.31]\n-------------------\n\nMajor
  - add handling and test for many many corner cases\n * Allow export of data statements\n
  * Allow export of non-functions\n * Allow functions with containers at the root\n
  * Allow export of 0-argument functions \n\nMinor\n * proof-of-concept composable
  serialization functions in C++ (cppbase)\n * add python tests\n * make the test
  output look pretty (no weird whitespace)\n\n0.20.0 [2020.03.23]\n-------------------\n\n
  * Add composable default types\n\n0.19.1 [2020.02.22]\n-------------------\n\n *
  bug fixes\n\n0.19.0 [2020.02.20]\n-------------------\n\nMajor changes\n * Allow
  currying\n * Add realization optimizations\n * Refactor generator into series of
  clear transformations\n * Added handling for dealing with ambiguous ASTs\n\nMinor
  bug fixes and updates\n * Prettier code generation for C++, Python and R\n * More
  detailed comments in generated code\n * Allow tags on parenthesized types\n * Fix
  bug in functions with multiple parameters \n * Fix bug preventing loading of package
  metadata \n\n0.18.1 [2019.11.08]\n-------------------\n\n * Fix travis\n * Use C++11
  for C++ builds\n * Make .morloc/config optional\n * Fix bug in parsing unit type:
  `()`\n\n0.18.0 [2019.11.04]\n-------------------\n\n * Add bidirectional type system\n
  * Allow parameterized concrete types\n * Allow higher-order functions\n * Allow
  properties to contain multiple terms \n * Add many tests\n * Add module system\n
  * Allow non-primitive types in lists, tuples, and records\n * Removed arq and SPARQL
  dependency (very fast compilation)\n\n0.17.4 [2019.06.29]\n-------------------\n\n
  * Add C and C++ handling\n * Define Ord intance for MTypeMeta\n * Allow pools to
  be called as executables\n * Add type handling to generators\n * Remove redundant
  SPARQL queries (better performance)\n * New RDF list semantics\n * Use strings to
  represent concrete types (e.g. \"char\\*\")\n * Write pretty-printed diagnostic
  files to `$MORLOC_HOME/tmp` \n * Handling for multiple concrete type signatures
  (e.g., definition of\n   a function in multiple languages).\n * Handling for multiple
  abstract type signatures\n * Handling for multiple function declarations\n\n0.17.3
  [2019.06.14]\n-------------------\n\n * Partial C support\n   - execution of sourced
  functions\n   - no composition\n   - no foreign calls\n\n * Partial transition to
  typed generators\n   - bound arguments are still not typed correctly\n\n * Use integer
  IDs to identify manifolds in pools and the nexus (can to make\n   calls between
  them) instead of long, mangled names.\n\n * Replace string names of languages (e.g.,
  \"python\") with a sum type.\n\n0.17.2 [2019.05.05]\n-------------------\n\n  Pycon
  release\n\n0.17.1 [2019.04.26]\n-------------------\n\n * Fix output serialization
  in generate code\n * Fix module linking in generated code\n\n0.17.0 [2019.04.16]\n-------------------\n\n
  * Add morloc home\n * Load modules from `$MORLOCHOME/lib`\n * Create monad stack\n\n0.16.2
  [2018.03.05]\n-------------------\n\n * Add Zenodo badge making the project citable\n
  * Move to `morloc-project/morloc` github repo\n\n0.16.1 [2018.09.24]\n-------------------\n\nMinor
  release consisting of internal refactoring\n\n * Pruned unnecessary code\n * Pruned
  unnecessary imports\n * Compliance with stricter compile flags\n\n0.16.0 [2018.09.14]\n-------------------\n\n
  * Write RDF bools in lowercase (\"true\", rather than \"True\"), as per specs\n
  * Stricter node typing (replace ad hoc names with elements from an ADT)\n * Add
  very rudimentary typechecking\n * Remove SPARQL server dependency (now there's a
  sluggish Jena dependency)\n\n0.15.1 [2018.09.10]\n-------------------\n\n * Add
  error handling and reporting to pools\n * Add type signature comments to generated
  pools \n * Richer internal data structures\n\n0.15.0 [2018.09.05]\n-------------------\n\n
  * Generalize code generators using grammar records\n * Add Python compatibility\n
  * Replace unit tests with golden tests\n * Use docopt and USAGE template for argument
  handling\n * Report number of arguments in nexus usage statements\n"
changelog-type: markdown
description: "[![experimental](http://badges.github.io/stability-badges/dist/experimental.svg)](http://github.com/badges/stability-badges)\n[![travis
  build status](https://travis-ci.org/morloc-project/morloc.svg?branch=master)](https://travis-ci.org/morloc-project/morloc)\n[![github
  release](https://img.shields.io/github/release/morloc-project/morloc.svg?label=current+release)](https://github.com/morloc-project/morloc/releases)\n[![license:
  GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![DOI](https://zenodo.org/badge/75355860.svg)](https://zenodo.org/badge/latestdoi/75355860)\n\n`morloc`
  is a functional programming language where functions are imported from\nforeign
  languages and unified under a common type system. The compiler\ngenerates the code
  needed to compose functions across languages and also to\ndirect automation of mundane
  tasks such as data validation, type/format\nconversions, data caching, distributed
  computing, and file reading/writing. The\nendgame is to develop `morloc` into a
  query language that returns optimized\nprograms from an infinite library of functions
  and compositions of functions.\n\nSee [the manual](https://morloc-project.github.io/docs)
  for more information.\n\nIf you want to get straight to playing with code, go through
  the steps in the\ninstallation section and then go to the project in `demo/01_sequence_analysis`.\n\n##
  Status\n\nThis project is under active development with no stability guarantees
  until the\nv1.0 release. Pull requests, issue reports, and private messages are
  very\nwelcome.\n\n## Installation\n\nCompile and install the package (requires the
  Haskell utility `stack`):\n\n```sh\ngit clone https://github.com/morloc-project/morloc\ncd
  morloc\nstack install --fast\n```\n\n`morloc` also depends on the `JSON::XS` perl
  module from CPAN, which can be\ninstalled as follows:\n\n```sh\nexport PERL_MM_USE_DEFAULT=1\nexport
  PERL_CANARY_STABILITY_NOPROMPT=1\nsudo perl -MCPAN -e 'install JSON::XS' \n```\n\nFor
  Python support, you need to download the `pymorlocinternals` library from\nPyPi:\n\n```sh\npip
  install pymorlocinternals\n# or on Mac:\npip3 install pymorlocinternals\n```\n\nFor
  R support, you need to install the `rmorlocinternals` library from github,\nin an
  R session, run:\n\n```sh\nR> install.packages(\"devtools\")\nR> devtools::install_github(\"morloc-project/rmorlocinternals\")\n```\n\nC++
  support currently requires a GNU compiler that supports C++11.\n\n`morloc` modules
  can be installed from the `morloc`\n[library](https://github.com/morloclib) with
  the commands such as:\n\n```sh\nmorloc install cppbase\nmorloc install pybase\nmorloc
  install rbase\nmorloc install math\n```\n\nThe `morloc install` commands will install
  the modules in the\n`$HOME/.morloc/lib` folder.\n\nLast of all, if you are working
  in vim, you can install `morloc` syntax highlighting as follows:\n\n``` sh\nmkdir
  -p ~/.vim/syntax/\nmkdir -p ~/.vim/ftdetect/\ncp vim-syntax/loc.vim ~/.vim/syntax/\necho
  'au BufRead,BufNewFile *.loc set filetype=loc' > ~/.vim/ftdetect/loc.vim\n```\n\n##
  Getting Started\n\n```\nexport hello\nhello = \"Hello World\"\n```\n\nThe \"export\"
  keyword exports the variable \"hello\" from the module.\n\nPaste this into a file
  (e.g. \"hello.loc\") and then it can be imported by other\n`morloc` modules or directly
  compiled into a program where every exported term\nis a subcommand.\n\n```\nmorloc
  make hello.loc\n```\n\nThis will generate a single file named \"nexus.pl\". The
  nexus is the executable\nscript that the user will interact with. For this simple
  example, it is the\nonly generated file. It is currently written in Perl. \n\nCalling
  \"nexus.pl\" with no arguemtns or with the `-h` flag, will print a help\nmessage:\n\n```\n$
  ./nexus.pl -h\nThe following commands are exported:\n  hello\n    return: Str\n```\n\nThe
  `return: Str` phrases states that hello returns a string value.\n\nThe command `hello`
  can be called as shown below:\n\n```\n$ ./nexus.pl hello\nHello World\n```\n\n##
  Composing C++ Functions\n\nThe following code uses only C++ functions (`fold`, `map`,
  `add` and `mul`). \n\n```\nimport cppbase (fold, map, add, mul)\n\nexport square;\nexport
  sumOfSquares;\n\nsquare x = mul x x;\n\nsumOfSquares xs = fold add 0 (map square
  xs);\n```\n\nIf this script is pasted into the file \"example-1.loc\", it can be
  compiled as\nfollows:\n\n```sh\nmorloc install cppbase\nmorloc make example-1.loc\n```\n\nThe
  `install` command clones the `cppbase` repo from github\n[repo](https://github.com/morloclib/cppbase)
  into the local directory\n`~/.morloc/lib`. The `morloc make` command will generate
  a file named\n`nexus.pl`, which is an executable interface to the exported functions.\n\nYou
  can see typed usage information for the exported functions with the `-h` flag:\n\n```sh\n$
  ./nexus.pl -h\nThe following commands are exported:\n  square\n    param 1: Num\n
  \   return: Num\n  sumOfSquares\n    param 1: [Num]\n    return: Num\n```\n\nThen
  you can call the exported functions (arguments are in JSON format):\n\n```sh\n$
  ./nexus.pl sumOfSquares '[1,2,3]'\n14\n```\n\nThe `nexus.pl` executable dispatches
  the command to the compiled C++ program,\n`pool-cpp.out`.\n\n\n## Language interop\n\n`morloc`
  can compose functions across languages. For example:\n\n```\nimport math (fibonacci);\nimport
  rbase (plotVectorPDF, ints2reals);\n\nexport fibplot\n\nfibplot n = plotVectorPDF
  (ints2reals (fibonacci n)) \"fibonacci-plot.pdf\";\n```\n\nThe `fibplot` function
  calculates Fibonacci numbers using a C++ function and\nplots it using an R function.
  The R function `plotPDF` is a perfectly normal R\nfunction with no extra boilerplate:\n\n```
  R\nplotPDF <- function(x, filename){\n  pdf(filename)\n  plot(x)\n  dev.off()\n}\n```\n\n\n##
  The Morloc Type System\n\nThe first level of the `morloc` type system is basically
  System F extended\nacross languages. A given function will have a general type as
  well as a\nspecialized type for each language it is implemented in.\n\nThe map function
  has the types\n\n```\nmap :: (a -> b) -> [a] -> [b]\nmap Cpp :: (a -> b) -> \"std::vector<$1>\"
  a -> \"std::vector<$1>\" b\nmap Python3 :: (a -> b) -> list a -> list b\n```\n\nThe
  general signature looks almost the same as the Haskell equivalent (except\nthat
  `morloc` universal quantification is currently explicit). The list type\nconstructors
  for C++ are very literally \"type constructors\" in that they are\nused to create
  syntactically correct C++ type strings. If the type variable `a`\nis inferred to
  be `int`, for example, then the C++ type `std::vector<int>` will\nbe used in the
  generated code. The same occurs in the python type constructors\n`list`, except
  here the same Python type is generated regardless of the type of\n`a`.\n\nThe following
  example is available in `examples/rmsWithTypes.loc`:\n\n```\nimport cppbase (fold,
  map, add, mul)\n\nexport square;\nexport sumOfSquares;\n\nsquare x = mul x x;\n\nsumOfSquares
  xs = fold add 0 (map square xs);\n```\n\nThis example cannot be compiled since none
  of the functions are imported or\nsourced, but it can be typechecked:\n\n```\nmorloc
  typecheck examples/rmsWithTypes.loc\n```\n\n```\nadd :: Num -> Num -> Num;\nadd
  Cpp :: double -> double -> double;\n\nmul :: Num -> Num -> Num;\nmul Cpp :: double
  -> double -> double;\n\nfold     :: (b -> a -> b) -> b -> [a] -> b;\nfold Cpp ::
  (b -> a -> b) -> b -> \"std::vector<$1>\" a -> b;\n\nmap :: (a -> b) -> [a] -> [b];\nmap
  Cpp :: (a -> b) -> \"std::vector<$1>\" a\n                    -> \"std::vector<$1>\"
  b;\n\nsquare x = mul x x;\nsumOfSquares xs = fold add 0 (map square xs);\n```\n\nThe
  typechecker associates each sub-expression of the program with a set of\ntypes.
  The specific type information in `mul` is sufficient to infer concrete\ntypes for
  every other C++ function in the program. The inferred C++ type of\n`sumOfSquares`
  is\n\n```\n\"std::vector<$1>\" double -> double\n```\n\nThe general type for this
  expression is also inferred as:\n\n```\nList Num -> Num\n```\n\nThe concrete type
  of `mul` is currently written as a binary function of\ndoubles. Ideally this function
  should accept any numbers (e.g., an `int` and a\n`double`). I intend to add this
  functionallity eventually, perhaps with a\nHaskell-style typeclass system.\n"
description-type: markdown
hash: de8082dbc98bfe72e28a687cdb748836155327ada40d716a141d48c014fdea84
homepage: https://github.com/morloc-project/morloc
latest: 0.33.0
license-name: GPL-3.0-only
maintainer: zbwrbz@gmail.com
synopsis: A multi-lingual, typed, workflow language
test-bench-deps:
  QuickCheck: '>=2.10.1 && <2.11'
  aeson: '>=1.2.4.0 && <1.3'
  base: '>=4.10.1.0 && <4.11'
  bytestring: '>=0.10.8.2 && <0.11'
  containers: '>=0.5.10.2 && <0.6'
  directory: '>=1.3.0.2 && <1.4'
  extra: '>=1.6.5 && <1.7'
  filepath: '>=1.4.1.2 && <1.5'
  haskell-src-meta: '>=0.8.0.2 && <0.9'
  megaparsec: '>=6.4.1 && <6.5'
  morloc: '>=0'
  mtl: '>=2.2.2 && <2.3'
  parsec: '>=3.1.13.0 && <3.2'
  partial-order: '>=0.1.2.1 && <0.2'
  pretty-simple: '>=2.1.0.0 && <2.2'
  prettyprinter: '>=1.2.0.1 && <1.3'
  prettyprinter-ansi-terminal: '>=1.1.1.2 && <1.2'
  process: '>=1.6.1.0 && <1.7'
  raw-strings-qq: '>=1.1 && <1.2'
  safe: '>=0.3.17 && <0.4'
  scientific: '>=0.3.5.3 && <0.4'
  tasty: '>=1.0.1.1 && <1.1'
  tasty-golden: '>=2.3.1.3 && <2.4'
  tasty-hunit: '>=0.10.0.1 && <0.11'
  tasty-quickcheck: '>=0.9.2 && <0.10'
  template-haskell: '>=2.12.0.0 && <2.13'
  text: '>=1.2.3.0 && <1.3'
  unordered-containers: '>=0.2.9.0 && <0.3'
  yaml: '>=0.8.29 && <0.9'
