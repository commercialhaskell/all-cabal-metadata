all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.1.3
- 0.0.1.4
- 0.0.2.0
- 0.0.3.0
author: Alexis King <lexi.lambda@gmail.com>
basic-deps:
  base: '>=4.8 && <5'
  exceptions: '>=0.6'
  monad-control: '>=1.0.0.0 && <2'
  monad-logger: '>=0.3.10'
  mtl: '>=0'
  persistent: '>=2.5 && <3'
  text: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
changelog: |
  ## 0.0.3.0 (September 18th, 2018)

  - Added support for `persistent` version 2.8.0 and above.

  ## 0.0.2.0 (November 9th, 2017)

  - Added lifting instance for `MonadPersist` for `IdentityT`.

  ## 0.0.1.4 (October 10th, 2017)

  - Fixed package dependencies for GHC 7.8 and 7.10.

  ## 0.0.1.3 (October 10th, 2017)

  - Added `runSqlPoolPersistT` ([#2](https://github.com/cjdev/monad-persist/pull/2)).

  ## 0.0.1.2 (April 26th, 2017)

  - Removed the need for `MonadIO` when running `PersistT`, since `MonadBaseControl IO` is already enough.

  ## 0.0.1.1 (April 24th, 2017)

  - Added instances for `MonadThrow`, `MonadCatch`, and `MonadMask` to `PersistT`.

  ## 0.0.1.0 (April 20th, 2017)

  - Initial release
changelog-type: markdown
description: |
  # monad-persist [![Build Status](https://travis-ci.org/cjdev/monad-persist.svg?branch=master)](https://travis-ci.org/cjdev/monad-persist)

  This module provides an [mtl][]-style `MonadPersist` typeclass for [persistent][], as well as a `PersistT` monad transformer that implements it. This makes it easier to use persistent in an arbitrary monad transformer stack, rather than one that must be `ReaderT` over `MonadIO`.

  ```haskell
  import Control.Monad.Logger (runNoLoggingT)
  import Control.Monad.Persist
  import Data.Text (Text)
  import Database.Persist.Sqlite (withSqliteConn)
  import Database.Persist.TH

  share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
  User
    name Text
    email Text

    UniqueEmail email

    deriving Eq Show
  |]


  ghci> runNoLoggingT $ withSqliteConn ":memory:" $ \conn -> flip runSqlPersistT conn $ do
          runMigration migrateAll
          insert_ User { userName = "Alyssa", userEmail = "alyssa@example.com" }
          users <- selectList [] []
          return (users :: [Entity User])

  Migrating: CREATE TABLE "user"("id" INTEGER PRIMARY KEY,"name" VARCHAR NOT NULL,"email" VARCHAR NOT NULL,CONSTRAINT "unique_email" UNIQUE ("email"))
  [Entity {entityKey = UserKey {unUserKey = SqlBackendKey {unSqlBackendKey = 1}}, entityVal = User {userName = "Alyssa", userEmail = "alyssa@example.com"}}]
  ```

  [For more information, see the documentation on Hackage.][monad-persist]

  [monad-persist]: http://hackage.haskell.org/package/monad-persist
  [mtl]: https://hackage.haskell.org/package/mtl
  [persistent]: https://hackage.haskell.org/package/persistent
description-type: markdown
hash: 5741afa087d03fb301b206ee33ef3004a833a6d46a7e25a1989810ea72ab27db
homepage: https://github.com/cjdev/monad-persist#readme
latest: 0.0.3.0
license-name: ISC
maintainer: Alexis King <lexi.lambda@gmail.com>
synopsis: An mtl-style typeclass and transformer for persistent.
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  monad-control: '>=0'
  monad-logger: '>=0'
  monad-persist: '>=0'
  persistent: '>=0'
  persistent-sqlite: '>=0'
  persistent-template: '>=0'
  text: '>=0'
  transformers: '>=0'
