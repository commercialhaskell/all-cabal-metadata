homepage: https://gitlab.com/morley-framework/morley
changelog-type: markdown
hash: 70a9fc646bae3a85967224c7c42b2e49155461d6124c487bbcc1d825111a189d
test-bench-deps:
  bytestring: -any
  morley-prelude: -any
  Cabal: -any
  morley: -any
  process: -any
  doctest: -any
  base-noprelude: '>=4.7 && <5'
  optparse-applicative: -any
maintainer: Serokell <hi@serokell.io>
synopsis: Developer tools for the Michelson Language
changelog: |
  Unreleased
  ==========
  <!-- Append new entries here -->

  1.14.0
  ======
  * [!799](https://gitlab.com/morley-framework/morley/-/merge_requests/799)
    + Fix product type instances of 1-nary constructors and empty types
      (they could produce compilation error before).
  * [!814](https://gitlab.com/morley-framework/morley/-/merge_requests/814)
    + Renamed `Type` from `Michelson.Untyped.Type` with `Ty`.
    + Added the usage of `Prelude.Type` instead of `Data.Kind.Type`,
      as a result `Kind.Type` was replaced with just `Type`.
  * [!733](https://gitlab.com/morley-framework/morley/-/merge_requests/733)
    + Added special annotations handling for `LEFT` and `RIGHT` instructions.
  * [!787](https://gitlab.com/morley-framework/morley/-/merge_requests/787)
    + Added support for `CAR k` and `CDR k` macros.
  * [!747](https://gitlab.com/morley-framework/morley/-/merge_requests/747)
    + Fix `ligoLayout` not working for alphabetically unordered sum types.
  * [!798](https://gitlab.com/morley-framework/morley/-/merge_requests/798)
    + Added helper functions for recent Peano utility types.
  * [!815](https://gitlab.com/morley-framework/morley/-/merge_requests/815)
    + Added `IsList` and `Buildable` instances to `BigMap`.

  1.13.0
  ======
  * [!796](https://gitlab.com/morley-framework/morley/-/merge_requests/796)
    + Generalized `InstrWithNotes` to handle instructions that put
      more than one value at the top of the stack.
    + Added support for `GET_AND_UPDATE` instructions.
  * [!774](https://gitlab.com/morley-framework/morley/-/merge_requests/774)
    + Added support for `BLS12-381` crypto primitives.
  * [!776](https://gitlab.com/morley-framework/morley/-/merge_requests/776)
    + Added support for `DUP n` instruction.
  * [!755](https://gitlab.com/morley-framework/morley/-/merge_requests/755)
    Restricted `FAILWITH` only to packable values, except `CONTRACT`s
  * [!781](https://gitlab.com/morley-framework/morley/-/merge_requests/781)
    + Replaced mixins and dependency on `base` with `base-noprelude`.
    + Added doctest examples and enabled `doctest` tests in `morley:lib`.
  * [!764](https://gitlab.com/morley-framework/morley/-/merge_requests/764)
    + Added support for `never` type.
  * [!750](https://gitlab.com/morley-framework/morley/-/merge_requests/750)
    [!769](https://gitlab.com/morley-framework/morley/-/merge_requests/769)
    [!786](https://gitlab.com/morley-framework/morley/-/merge_requests/786)
    [!791](https://gitlab.com/morley-framework/morley/-/merge_requests/791)
    + Added support for `PAIR n`, `UNPAIR n`, `GET n` and `UPDATE n` instructions.
  * [!778](https://gitlab.com/morley-framework/morley/-/merge_requests/778)
    + Added support for `VOTING_POWER` and `TOTAL_VOTING_POWER` instructions.
  * [!767](https://gitlab.com/morley-framework/morley/-/merge_requests/767)
    Made `unit`, `key`, `signature`, `chain_id`, `option`, `or` types
    comparable in preparation for `edo` switch.

  1.12.0
  ======
  * [!751](https://gitlab.com/morley-framework/morley/-/merge_requests/751)
    + Added support for `LEVEL` instruction.
    + Added --level parameter to `morley` executable
  * [!753](https://gitlab.com/morley-framework/morley/-/merge_requests/753)
    [!754](https://gitlab.com/morley-framework/morley/-/merge_requests/754)
    + `edo` changes:
      + Ability to parse right-combed types (e.g. `pair int nat string`)
        from all 3 formats (binary, micheline, michelson)
      + Ability to parse right-combed values (e.g. `Pair 1 2 "a"`)
        from all 3 formats (binary, micheline, michelson)
  * [!742](https://gitlab.com/morley-framework/morley/-/merge_requests/742)
    Allowed parsing single field annotations for `LEFT` and `RIGHT` instructions.
  * [!744](https://gitlab.com/morley-framework/morley/-/merge_requests/744)
    + Added `reifyDataType` and `deriveFullType` to `Util.CustomGeneric`.
    + Added `lookupTypeNameOrFail` to `Util.TH`.
  * [!741](https://gitlab.com/morley-framework/morley/-/merge_requests/741)
    + Added support for `SHA3` and `KECCAK` instructions.

  1.11.1
  ======
  * [!740](https://gitlab.com/morley-framework/morley/-/merge_requests/740)
    Fixed `morley print` to correctly render `PUSH` instructions that
    previously caused contracts to be misaligned and rejected by `tezos-client`.

  1.11.0
  ======
  * [!731](https://gitlab.com/morley-framework/morley/-/merge_requests/731)
    + Added opportunity to reorder fields in `GenericStrategy`.
    + Added `GenericStrategy`-ies for compatibility with LIGO.
  * [!724](https://gitlab.com/morley-framework/morley/-/merge_requests/724)
    Fixed `UNPACK` to accept pairs of comparable types.
  * [!712](https://gitlab.com/morley-framework/morley/-/merge_requests/712)
    + In optimizer, by default lambdas are now also handled.
    + Field names in optimizer config are changed (prefix added).
  * [!726](https://gitlab.com/morley-framework/morley/-/merge_requests/726)
    Added `Data` and `Plated` instances to `Morley.Micheline.Expression`.
  * [!723](https://gitlab.com/morley-framework/morley/-/merge_requests/723)
    * Splitted `class ContainsDoc` into `ContainsDoc` and `ContainsUpdateableDoc`;
    * Allow avoiding explicit `DName` call (now `docGroup "Title"` works).
  * [!684](https://gitlab.com/morley-framework/morley/-/merge_requests/684)
    Simplify working with autodoc in contracts.
    (follow the deprecation warnings in case this hits you).

  1.10.0
  ======
  * [!692](https://gitlab.com/morley-framework/morley/-/merge_requests/692)
    The `ToJSON` instance for Micheline `Expression` now produces more compact JSON values,
    by omitting the `"annots"` and `"args"` fields when these lists are empty.
  * [!673](https://gitlab.com/morley-framework/morley/-/merge_requests/673)
    + Removed `TextException`.
    Migration guide: use `StringException` or `throwString` from `safe-exceptions`.
    + Removed `displayUncaughtException`.
    Migration guide: use `uncaught-exception` library.
    + Added `Util.Main` module, consider using it in your `Main.hs`.
  * [!657](https://gitlab.com/morley-framework/morley/-/merge_requests/657)
    Make `namedParser` handle complex-worded options neatly.
  * [!678](https://gitlab.com/morley-framework/morley/-/merge_requests/678)
    Added `FromExpression` instances for `Michelson.Untyped.Type`, `Michelson.Typed.T`,
    and `Michelson.Typed.Instr`.
  * [!607](https://gitlab.com/morley-framework/morley/-/merge_requests/607)
    Removed `parse` from the executable.
  * [!659](https://gitlab.com/morley-framework/morley/-/merge_requests/659)
    Remove `Michelson.Interpret.MichelsonAmbigousEpRef` exception constructor.
  * [!664](https://gitlab.com/morley-framework/morley/-/merge_requests/664)
    Added `Tezos.Crypto.Sign`.
  * [!638](https://gitlab.com/morley-framework/morley/-/merge_requests/638)
    Added `Morley.Micheline.Json.TezosMutez`.
  * [!638](https://gitlab.com/morley-framework/morley/-/merge_requests/638)
    Added `Tezos.Core.prettyTez`.

  1.9
  =====
  * [!653](https://gitlab.com/morley-framework/morley/-/merge_requests/653)
    + `Michelson.OpSize` module is moved to `Michelson.Untyped.OpSize`.
    + Added primitives for evaluating `OpSize` in typed Michelson.
    + Added `instance Buildable OpSize`.
  * [!633](https://gitlab.com/morley-framework/morley/-/merge_requests/633)
    Added `Tezos.Core.timestampToUTCTime`.

  1.8.1
  =====
  * [!613](https://gitlab.com/morley-framework/morley/-/merge_requests/613)
    Added `HasCLReader` instances for `Word16` and `String`.

  1.8.0
  =====

  * [!610](https://gitlab.com/morley-framework/morley/-/merge_requests/610)
    Remove `Arbitrary` instances and everything else that depends on `QuickCheck`.
  * [!616](https://gitlab.com/morley-framework/morley/-/merge_requests/616)
    Make `RootAnn` a mere type alias of `FieldAnn`.
  * [!615](https://gitlab.com/morley-framework/morley/-/merge_requests/615)
    Make `mkEntrypointsMap` accept `ParameterType` instead of `Type`.
  * [!567](https://gitlab.com/morley-framework/morley/-/merge_requests/567)
    Add `DConversionInfo` that describes Haskell <-> Michelson conversion
    mechanism.
  * [!585](https://gitlab.com/morley-framework/morley/-/merge_requests/585)
    Add `Exception` instance for `ParseChainIdError`.
  * [!598](https://gitlab.com/morley-framework/morley/-/merge_requests/598)
    Fix bug: correct processing of `EDIV` of negative `Integer` and `Natural`.
  * [!574](https://gitlab.com/morley-framework/morley/-/merge_requests/574)
    Implement a verbose switch for `morley typecheck`. It allows to
    print a stack type after every well-typed instruction, even if a
    contract as a whole is ill-typed.

  1.7.1
  =====
  * [!549](https://gitlab.com/morley-framework/morley/-/merge_requests/549)
    Add `instance Buildable TezosInt64`.

  1.7.0
  =====
  * [!565](https://gitlab.com/morley-framework/morley/-/merge_requests/565)
    Remove useless error entities from `Michelson.Interpret`.
  * [!563](https://gitlab.com/morley-framework/morley/-/merge_requests/563)
    Fix handling of Natural numbers.
  * [!554](https://gitlab.com/morley-framework/morley/-/merge_requests/554)
    Fix 'SELF' instruction packing.
  * [!548](https://gitlab.com/morley-framework/morley/-/merge_requests/548)
    + The interpreter now takes a typed contract and storage value for origination operations.
    + Use binary serialization to compute operation hashes and addresses.
    + Add `typeCheckContractAndStorage` to `Michelson.TypeCheck`
    + Remove `withGlobalOperation` from `Michelson.Runtime`
    + Remove `EEIllTypedContract` and `EEIllTypedStorage` constructors from `ExecutorError'`

  1.6.0
  =====
  * [!323](https://gitlab.com/morley-framework/morley/-/merge_requests/323)
    Add `parseSecretKey` which allows parsing all types of `SecretKey`.
  * [!537](https://gitlab.com/morley-framework/morley/-/merge_requests/537)
    Permit `SELF %default` instruction.
  * [!522](https://gitlab.com/morley-framework/morley/-/merge_requests/522)
    Allow calling the interpreter with a typed transfer parameter and
    avoid unnecessary typechecking.
  * [!495](https://gitlab.com/morley-framework/morley/-/merge_requests/495)
    Add source location to typed `Instr` AST.
  * [!521](https://gitlab.com/morley-framework/morley/-/merge_requests/521)
    Document generater can now generate table of contents.

  1.5.0
  =====
  * [!509](https://gitlab.com/morley-framework/morley/-/merge_requests/509)
    Implement missing parts of `secp256k1` and `P256`.
    + `checkSignature` now works correctly with all signature formats.
  * [!511](https://gitlab.com/morley-framework/morley/-/merge_requests/511)
    Add `zeroMutez` and `oneMutez` for safe initial values.
  * [!500](https://gitlab.com/morley-framework/morley/-/merge_requests/500)
    Add ability to parse optimized formats of `signature`, `contract`, `key`, and `key_hash`.
  * [!486](https://gitlab.com/morley-framework/morley/-/merge_requests/486)
    Add `Util.CustomGeneric` to derive `Generic` instances with a custom tree structure.
  * [!466](https://gitlab.com/morley-framework/morley/-/merge_requests/466)
    Add sub-command 'repl' to Morley executable which starts an REPL that
    can execute Morley instructions.
  * [!492](https://gitlab.com/morley-framework/morley/-/merge_requests/492)
    + `TypeHasDoc` instance for `newtype` now has its field remove by default
    without having to use `haskellRepNoFields`.
    + Add `haskellAddNewtypeField` function to add field name for `newtype`
    if desired.
  * [!487](https://gitlab.com/morley-framework/morley/-/merge_requests/487)
    Fix typechecking error message pointing to the whole `map unit nat` as not comprable.
    + It now only points to `unit` type as not comparable.
  * [!457](https://gitlab.com/morley-framework/morley/-/merge_requests/457)
    + Allow using the same position when defining `DocItem`.
    + When two `DocItem`s have the same position, they will be sorted alphabetically by their names.
  * [!480](https://gitlab.com/morley-framework/morley/-/merge_requests/480)
    Arithmetic instructions (ADD, MUL, EDIV, LSL, ...) now take annotations into account.
      + Results from the instructions are also properly annotated.
  * [!470](https://gitlab.com/morley-framework/morley/-/merge_requests/470)
    Move `Michelson.Doc.Test`, `Michelson.Test` and  Hedgehog generators to
    a new package: `cleveland`.
  * [!453](https://gitlab.com/morley-framework/morley/-/merge_requests/453)
    Order of top-level entries in contract are now preserved.
    + `PACK`/`UNPACK` now serialize contracts according their top-level entries order.
    + Pretty printer now display contracts according to their given top-level entries order.
  * [!445](https://gitlab.com/morley-framework/morley/merge_requests/445)
    Remove unnecessary `TcOriginatedContracts` usages and split `typeCheckTopLevelValue`
    to `typeCheckParameter` (the only case where `TcOriginatedContracts` is useful)
    and `typeCheckStorage`.

  1.4.0
  =====
  * [!446](https://gitlab.com/morley-framework/morley/-/merge_requests/446)
    Include source locations and let-binding stacks into typecheck errors.
  * [!449](https://gitlab.com/morley-framework/morley/-/merge_requests/449)
    + Improve `Michelson.Test.Integrational` interface.
    + Remove `IntegrationalValidator`, `SuccessValidator`, `validate`,
      `composeValidators`, `composeValidatorsList`, `expectAnySuccess`.
    + Add `unexpectedInterpreterError`, `attempt`, `catchExpectedError`.
    + Change type of `expect*`/`tExpect*` functions.
      They now return `IntegrationalScenario` instead of `SuccessValidator` / `Bool`.
    + Rename `ValidationError` to `TestError`
    + Replace `TestError`'s `UnexpectedExecutorError` constructor with
      `InterpreterError` and `UnexpectedInterpreterError`.
  * [!441](https://gitlab.com/morley-framework/morley/merge_requests/441)
    Remove `tezos-bake-monitor-lib dependency`, and define value to json conversion
    using binary round trip locally instead.
  * [!448](https://gitlab.com/morley-framework/morley/merge_requests/448)
    Remove `base-noprelude` dependency and use mixins to hide `Prelude` instead.
  * [!367](https://gitlab.com/morley-framework/morley/merge_requests/367)
    Values and instructions now carry some extra constraints in order to avoid
    construction of illegally typed values from within Haskell.
    `WellTyped` now also requires `Typeable` and `SingI` constraints.
  * [!409](https://gitlab.com/morley-framework/morley/-/merge_requests/409)
    + Add hedgehog support
  * [!438](https://gitlab.com/morley-framework/morley/-/merge_requests/438)
    + Fixed parsing bug: support semicolons after block comments.

  * [!424](https://gitlab.com/morley-framework/morley/-/merge_requests/424) Changed
    contract address computation logic in the interpreter to match the
    reference implementation a bit more closely by including a global counter and
    an origination index (nonce) to contract's hash. Specifically, now the same
    contract may be originated several times, leading to different addresses,
    just like in Tezos.

  1.3.0
  =====
  * [!417](https://gitlab.com/morley-framework/morley/-/merge_requests/417)
  Change the license to MIT.
  * [!386](https://gitlab.com/morley-framework/morley/-/merge_requests/386)
    + Add a way to describe constructors and fields of ADTs in Markdown documentation.
    + Require that all contracts include documentation for the storage type.
  * [!396](https://gitlab.com/morley-framework/morley/merge_requests/396) Fixed
    typed `Notes` to permit pair annotations for container keys.
  * [!359](https://gitlab.com/morley-framework/morley/merge_requests/359) Renamed
    'FullContract' to 'Contract', removed the prefix `f` from its record fields
    and removed "Full" from the names of the functions:
    `convertFullContract`, `printTypedFullContract` and `mapFullContractCode`.
  * [!354](https://gitlab.com/morley-framework/morley/-/merge_requests/354)
    + Fix bug: add `ChainId` to `IsPrimitiveValue` type family.
    + Add `GInstrDeconstruct` type class and related functions
      which serve to deconstruct datatype into its fields on the stack.
    + Add `gInstrConstructStack` to `GInstrConstruct` type class that serves
      to construct a datatype from its fields on the stack.
    + Add `GFieldNames` type family returning list of `Symbol`s:
      the names of direct fields of datatype.

  1.2.0
  =====
  * [!343](https://gitlab.com/morley-framework/morley/-/merge_requests/343)
    + Make pairs comparable and available to use as map keys and in sets.
    + CT type has been integrated into T.
    + A `WellTyped` type class has been added to ensure that a type
      represented by  T is valid as per Michelson's rules.
  * [!358](https://gitlab.com/morley-framework/morley/-/merge_requests/358)
    Remove deprecated `STEPS_TO_QUOTA` instruction.
  * [!368](https://gitlab.com/morley-framework/morley/-/merge_requests/368)
    + Update JSON encoding of types.
    + Rename fields of the untyped `Contract'`.
  * [!286](https://gitlab.com/morley-framework/morley/-/merge_requests/286)
    Morley supports field annotations for parameter root now.
  * [!344](https://gitlab.com/morley-framework/morley/-/merge_requests/344)
    Fixed a bug in `Michelson.Analyzer` and added `linearizeLeftDeep`.

  1.1.0
  =====
  * [!337](https://gitlab.com/morley-framework/morley/-/merge_requests/337)
    Added an extension for Michelson comment to typed and untyped contract representation.
  * [!306](https://gitlab.com/morley-framework/morley/-/merge_requests/306)
    Added PAIR/UNPAIR rule to optimizer.
  * [!314](https://gitlab.com/morley-framework/morley/-/merge_requests/314)
    Fixed a bug in the implementation of `MAP` operation: it did not preserve modifications to
    stack.
  * [!261](https://gitlab.com/morley-framework/morley/merge_requests/261)
    Slightly modified interpreter API.
  * [!313](https://gitlab.com/morley-framework/morley/-/merge_requests/313)
    Made `typeCheckValue` polymorphic in desired type, instead of using
    existential wrappers.
  * [!310](https://gitlab.com/morley-framework/morley/merge_requests/232)
    + Add `DGeneralInfoSection` documentation section with git revision and
      potentially other info.
    + Add `buildLorentzDocWithGitRev` and `buildInstrDocWithGitRev` to
      API to add a git revision to contract docs from the executable.
  * [!121](https://gitlab.com/morley-framework/morley/merge_requests/302)
    `BALANCE` instruction now returns the balance with funds from incoming
    transaction.
  * [!294](https://gitlab.com/morley-framework/morley/-/merge_requests/294)
    + Added `Paths_*` modules to `autogen-modules` in cabal files.  Removed `-O0`
    + from default GHC options. Please set `ghc-options` in your `stack.yaml` or
    `cabal.project.local`.
  * [!271](https://gitlab.com/morley-framework/morley/merge_requests/271) Renamed
    'Contract' to 'ContractCode', and appended "Code" to the names of two functions:
    'convertContract' and 'printTypedContract'
  * [!278](https://gitlab.com/morley-framework/morley/merge_requests/278)
    Added some utilities for command line option parsing, see `Util.CLI` and `Morley.CLI` modules.
  * [!268](https://gitlab.com/morley-framework/morley/merge_requests/268)
    Test functions which import typed contract now return `FullContract` instead
    of `Contract`, thus preserving parameter and storage annotations. In case you
    don't need this behaviour, use `fcCode` for conversion.
    Test functions which import Lorentz contracts have been removed because they
    cannot be implemented sanely, and Lorentz is assumed to be used to generate
    code, do not use it for work with textual Michelson contracts.
  * [!212](https://gitlab.com/morley-framework/morley/merge_requests/212)
    + Fix `AND` instruction return type.
    + Add `DUP n` macro support.
    + Fix `LAMBDA` instruction printer.
  * [!265](https://gitlab.com/morley-framework/morley/merge_requests/265)
    The semicolons between instructions are now optional.

  1.0.0
  =====

  * [!215](https://gitlab.com/morley-framework/morley/merge_requests/215)
    Major change: all Lorentz functionality was moved into `lorentz` package.
    A small portion of testing library code was moved around (from `Lorentz.*` to `Michelson.*` or vice versa).

  0.7.0
  =====

  * [!237](https://gitlab.com/morley-framework/morley/merge_requests/237)
    The `option (nat %foo)` is now accepted syntax. The `%foo` is ignored.
  * [!241](https://gitlab.com/morley-framework/morley/merge_requests/241)
    Derive `Show` instance for `Void_`.
  * [!238](https://gitlab.com/morley-framework/morley/merge_requests/238)
    + `NoExplicitDefaultEntrypoint` is now GHC-understandable constraint,
      for previous behaviour with nice error message use
      `ForbidExplicitDefaultEntrypoint`.
    + `CanHaveEntrypoints` is made stricter, now it returns true only for
       Michelson sum types. If that's a problem for you, consider using
       `ShouldHaveEntrypoints` wrapper.
    + Added pseudo `Empty` type.
  * [!219](https://gitlab.com/morley-framework/morley/merge_requests/219)
    Various entrypoints-related updates.
    + Integrational tests now carry `TAddress` as a reference to contract.
      Make sure that parameters of the originated contracts are clear;
      e.g. origination of `consumer` contract may require explicit type
      annotation to specify parameter type.
      If you passed a reference to the originated contract to `View` constructor,
      consider using `mkView` instead or applying `callingDefTAddress` to the
      reference.
    + Generally it is encouraged to use `TAddress` instead of `Address`
      where it is used to refer to a contract.
    + `fromContractAddr` renamed to `fromContractRef`.
    + `Default` instances for `{Some,}EntrypointCall` are removed, use
       one of explicit versions: `epcPrimitive`, `epcCallRootUnsafe`.
    + Reworked `FutureContract` type.

  0.6.0
  =====

  * [!127](https://gitlab.com/morley-framework/morley/merge_requests/127)
    Limit annotations' allowed characters
  * [!184](https://gitlab.com/morley-framework/morley/merge_requests/184)
    Fix `LAMBDA` instruction type converter bug
  * [!173](https://gitlab.com/morley-framework/morley/merge_requests/173)
    [!197](https://gitlab.com/morley-framework/morley/merge_requests/197)
    Add support for lightweight entrypoints in Lorentz, as well as in
    the interpreter runner and morley executable.
    Support entrypoint references in `SELF` instruction.
    Minor refactorings related to entrypoints.
  * [!201](https://gitlab.com/morley-framework/morley/merge_requests/201)
    + Add entrypoint argument to methods in testing eDSL. Preserve the existing type of `lCall` and deprecate it.
    + Deprecate `Lorentz.TestScenario`.
  * [!208](https://gitlab.com/morley-framework/morley/merge_requests/208)
    Resolve an ambiguity within integrational and unit interpreters
    by renaming interpreter in `Michelson.Runtime` to `executor`.
  * [!180](https://gitlab.com/morley-framework/morley/merge_requests/180)
    Remove `coerce_` in favor of more safe variants.
    Migration guide: pick one of the functions from 'Lorentz.Coercions' module.
    In most cases you need one of the following ones:
      * `checkedCoerce_`
      * `coerceWrap` / `coerceUnwrap`
      * `forcedCoerce_` (aka old `coerce_` - this variant provides the least safety).
  * [!180](https://gitlab.com/morley-framework/morley/merge_requests/180)
    Type arguments of `coerceWrap` and `coerceUnwrap` are flipped.
    This change concerns you if you used type application on these functions.

  0.5.0
  =====

  * Require `morley-prelude` to be ≥ 0.3.0 to make Hackage happy.
  * [!156](https://gitlab.com/morley-framework/morley/merge_requests/156)
    Consider annotations in PACK and UNPACK.

  0.4.0
  =====

  * Implemented most of Babylon changes: new instructions, elimination of `big_map` restructions, new restrictions for the `contract` type, partial support for entrypoints. Some instructions have been removed/deprecated.
  * Many updates of helper data types for upgradeable contracts: `UParam` and `UStore`.
  * Michelson printer can produce pretty output, not just one line.
  * Added utilities for contract processing and analysis: optimizer, string transformer, errors transformer, analyzer.
  * Added `tasty` helpers to the testing engine.
  * Added annotations to typed representation and Lorentz.
  * Added automatic documentation generator.
  * Modified standard errors in Lorentz: now they are based on `CustomError`.
  * Added unpacking from readable representation.
  * Removed `parameter` and `storage` aliases, they were not very useful and complicated the code.
  * Extended cryptographic types and `Address` to work with other curves (tz2 and tz3 addresses).
  * Made it nearly impossible to generate dead code (which is illegal in Michelson) using Lorentz.
  * Various bug fixes.

  0.3.0.1
  =======

  * Update maintainer.

  0.3.0
  =====

  * [TM-68](https://issues.serokell.io/issue/TM-68) Lorentz DSL which allows one to write contracts directly in Haskell.
  May be moved to a separate package later.
  * [TM-132](https://issues.serokell.io/issue/TM-132) Names for contracts in integrational tests.
  * [TM-35](https://issues.serokell.io/issue/TM-35) `PACK` and `UNPACK` instructions.
  * [TM-27](https://issues.serokell.io/issue/TM-27) Proper handling of `FAILWITH`.
  * [TM-44](https://issues.serokell.io/issue/TM-44) [TM-124](https://issues.serokell.io/issue/TM-124) Reorganization of modules.
  * Bug fixes.

  0.2.0.1
  =======

  * Update documentation and metadata.

  0.2.0
  =====

  Initial release.

  * Typechecker and interpreter for Michelson.
  * Morley extensions:
    - syntax sugar
    - let-blocks
    - inline assertions
  * EDSL for unit testing and integrational testing
basic-deps:
  first-class-families: '>=0.5.0.0'
  fmt: -any
  bytestring: -any
  aeson-casing: -any
  MonadRandom: -any
  morley-prelude: '>=0.3.0'
  haskeline: -any
  timerep: -any
  time: -any
  parser-combinators: '>=1.0.0'
  uncaught-exception: -any
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  morley: -any
  with-utf8: -any
  galois-field: -any
  megaparsec: '>=7.0.0'
  syb: -any
  generic-deriving: -any
  gitrev: -any
  show-type: -any
  constraints: '>=0.11'
  base-noprelude: '>=4.7 && <5'
  data-default: -any
  semigroups: '>=0.19.1'
  memory: -any
  th-lift-instances: -any
  containers: -any
  singletons: -any
  vinyl: -any
  lens: -any
  wl-pprint-text: -any
  binary: -any
  interpolate: -any
  base58-bytestring: -any
  text-manipulate: -any
  pairing: -any
  cryptonite: -any
  mtl: -any
  hex-text: -any
  elliptic-curve: -any
  optparse-applicative: -any
  named: -any
  scientific: -any
  th-lift: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.2.0
- 0.2.0.1
- 0.3.0
- 0.3.0.1
- 0.4.0
- 0.5.0
- 0.6.0
- 0.7.0
- 1.0.0
- 1.1.0
- 1.2.0
- 1.3.0
- 1.4.0
- 1.5.0
- 1.6.0
- 1.7.0
- 1.7.1
- 1.8.0
- 1.8.1
- '1.9'
- 1.10.0
- 1.11.0
- 1.11.1
- 1.12.0
- 1.13.0
- 1.14.0
author: camlCase, Serokell, Tocqueville Group
latest: 1.14.0
description-type: markdown
description: |
  # Morley: Developer tools for the Michelson Language

  [![Hackage](https://img.shields.io/hackage/v/morley.svg)](https://hackage.haskell.org/package/morley)

  Morley aims to make writing smart contracts in Michelson pleasant and effective.
  It contains 3 major things:
  1. An [executable](https://gitlab.com/morley-framework/morley/-/tree/master/code/morley#morley-executable) that lets you perform various operations on Michelson smart contracts.
  2. A [library](https://gitlab.com/morley-framework/morley/-/tree/master/code/morley#morley-library) with core Tezos and Michelson data types, and functions such as Michelson typechecker and interpreter.
  3. A superset of the Michelson language that we call the [Morley language](https://gitlab.com/morley-framework/morley/-/tree/master/code/morley#morley-language).
  It relaxes Michelson parser rules, adds some syntax sugar and simple features.

  ## Morley executable

  ### How to install

  There are three ways to get Morley executable:
  - [Docker](https://docs.docker.com/) based (preferable).
    * Get [script](https://gitlab.com/morley-framework/morley/-/blob/master/scripts/morley.sh)
   (e. g. using `curl https://gitlab.com/morley-framework/morley/raw/master/scripts/morley.sh > morley.sh`)
    and run it `./morley.sh <args>`. This script will pull a docker image that contains the latest version of Morley executable from the `production` branch and run it with the given arguments.
      You'll need `coreutils` to be installed in order to use `morley.sh`.
    * Usage example:
      + `./morley.sh` to see help message
      + `./morley.sh run --contract add1.tz --storage 1 --parameter 1 --amount 1`
  - [Stack](https://docs.haskellstack.org/en/stable/README/) based.
    * Clone this git repository and run `stack build` command,
      after that you can do `stack exec -- morley <args>` to run morley executable built from the source code.
    * Usage example:
      + `stack exec -- morley --help` to see help message
      + `stack exec -- morley originate --contract contracts/tezos_examples/attic/add1.tz --storage 1 --verbose`
  - [Cabal](https://www.haskell.org/cabal/) based.
    * Clone this git repository, go to this directory and run `cabal new-update && cabal new-build` command,
      after that you can do `cabal new-run -- morley <args>` to run morley executable built from the source code.
    * Usage example:
      + `cabal new-run -- morley --help` to see help message
      + `cabal new-run -- morley originate --contract contracts/tezos_examples/attic/add1.tz --storage 1 --verbose`

  ### Usage

  Morley executable does not interact with Tezos node and Tezos network.
  It works in _emulated environment_ which is stored in a simple JSON file on disk.
  The following commands depend on environment and may modify it:
  - `originate` a contract.
  - `transfer` tokens to a given address (and call a smart contract if it's the destination).
  - `run` a contract. A given contract is being originated first, and then the transaction is being sent to it.

  The following commands don't depend on environment:
  - `optimize` a contract by replacing certain sequences of instructions with equivalent but more efficient ones.
  - `typecheck` a contract.
  - `repl` starts a REPL where you can type Michelson instructions and interpret them.
  - `analyze` a contract and print some statistics about it.
  - `print` a contract in vanilla Michelson format.
  It can be useful in some cases:
    + You have a smart contract that uses [Morley extensions](https://gitlab.com/morley-framework/morley/-/tree/master/code/morley#morley-language) and want to convert it to vanilla Michelson format that can be handled by Tezos reference implementation.
    + You have a contract with inconsistent/ugly formatting and want to format it in uniform style.
    + You want to print a contract on a single line.
  - `parse` a contract and return its representation in Haskell types.

  You can get more info about these commands by running `morley <command> --help`.
  Run `morley --help` to get the list of all commands.

  ## Morley library

  Morley-the library is available on [Hackage](https://hackage.haskell.org/package/morley).
  It consists of the following parts:

  - The `Tezos.*` hierarchy ([`Tezos.Address`](http://hackage.haskell.org/package/morley/docs/Tezos-Address.html), [`Tezos.Core`](http://hackage.haskell.org/package/morley/docs/Tezos-Core.html), [`Tezos.Crypto`](http://hackage.haskell.org/package/morley/docs/Tezos-Crypto.html)) is designed to implement cryptographic primitives, string and byte formats, and any other functionality specific to the Tezos protocol which is required for testing/execution of Michelson contracts but is used not only by Michelson.
  - [`Michelson.Untyped`](http://hackage.haskell.org/package/morley/docs/Michelson-Untyped.html) and [`Michelson.Typed`](http://hackage.haskell.org/package/morley/docs/Michelson-Typed.html) hierarchies define Haskell data types that assemble a Michelson contract. See [michelsonTypes.md](https://gitlab.com/morley-framework/morley/-/blob/master/code/morley/docs/michelsonTypes.md).
  - [`Michelson.TypeCheck`](http://hackage.haskell.org/package/morley/docs/Michelson-TypeCheck.html): A typechecker that validates Michelson contracts according to the Michelson's typing rules. Essentially, it performs conversion from untyped representation to the typed one. See [morleyTypechecker.md](https://gitlab.com/morley-framework/morley/-/blob/master/code/morley/docs/morleyTypechecker.md).
  - [`Michelson.Interpret`](http://hackage.haskell.org/package/morley/docs/Michelson-Interpret.html): An interpreter for Michelson contracts which doesn't perform any side effects. See [morleyInterpreter.md](https://gitlab.com/morley-framework/morley/-/blob/master/code/morley/docs/morleyInterpreter.md).
  - [`Michelson.Macro`](http://hackage.haskell.org/package/morley/docs/Michelson-Macro.html) Types for macros, syntactic sugar, and other extensions that are described in the next chapter.
  - [`Michelson.Parser`](http://hackage.haskell.org/package/morley/docs/Michelson-Parser.html) A parser to turn a `.tz` or `.mtz` file (`.mtz` is a Michelson contract with Morley extensions) into a Haskell ADT.
  - [`Michelson.Runtime`](http://hackage.haskell.org/package/morley/docs/Michelson-Runtime.html): A high-level interface to Morley functionality, see [morleyRuntime.md](https://gitlab.com/morley-framework/morley/-/blob/master/code/morley/docs/morleyRuntime.md).

  ## Morley language

  Morley-the-language is a superset of the Michelson language, which means that each Michelson contract is also a valid Morley contract but not vice versa.
  There are several extensions which make it more convenient to write Michelson contracts and test them.
  For example, one can write inline assertions in their contracts for testing.
  All the details can be found in [the document](https://gitlab.com/morley-framework/morley/-/blob/master/code/morley/docs/language/morleyLanguage.md) about these extensions.
  A smart contract written in the Morley language can be transpiled to Michelson using the aforementioned `morley print` command.
license-name: MIT
