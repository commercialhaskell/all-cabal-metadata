homepage: https://hub.darcs.net/blamario/SCC.wiki/
changelog-type: ''
hash: 6a267be8406e5c02581db66108611596467a054225cf7cdb15a1d6dae6354b3c
test-bench-deps: {}
maintainer: blamario@protonmail.com
synopsis: Coroutine monad transformer for suspending and resuming monadic computations
changelog: ''
basic-deps:
  base: '>=4.9 && <5'
  monad-parallel: <1.0
  transformers: '>=0.2 && <0.6'
  transformers-compat: '>=0.3 && <0.7'
all-versions:
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- '0.8'
- 0.8.0.1
- '0.9'
- 0.9.0.1
- 0.9.0.2
- 0.9.0.3
- 0.9.0.4
- 0.9.1
- 0.9.1.1
- 0.9.1.2
author: Mario Blazevic
latest: 0.9.1.2
description-type: markdown
description: "\nThe `monad-coroutine` library, implemented by the `Control.Monad.Coroutine`
  module, provides a limited coroutine\nfunctionality in Haskell. The centerpiece
  of the approach is the monad transformer `Coroutine`, which transforms an\narbitrary
  monadic computation into a suspendable and resumable one. The basic definition is
  simple:\n\n    newtype Coroutine s m r = Coroutine {resume :: m (Either (s (Coroutine
  s m r)) r)}\n\n    instance (Functor s, Monad m) => Monad (Coroutine s m) where\n
  \     return = Coroutine . return . Right\n      t >>= f = Coroutine (resume t >>=
  either (return . Left . fmap (>>= f)) (resume . f))\n\n## Suspension Functors\n\nThe
  Coroutine transformer type is parameterized by a functor. The functor in question
  wraps the resumption of a suspended coroutine, and it can carry other information
  as well. Module `Control.Monad.Coroutine.SuspensionFunctors` exports some useful
  functors, one of which is `Yield`:\n\n    data Yield x y = Yield x y\n    instance
  Functor (Yield x) where\n      fmap f (Yield x y) = Yield x (f y)\n\nA coroutine
  parameterized by this functor is a generator which yields a value every time it
  suspends. For example, the following function generates the program's command-line
  arguments:\n\n    genArgs :: Coroutine (Yield String) IO ()\n    genArgs = getArgs
  >>= mapM_ yield\n\nThe `Await` functor is dual to `Yield`; a coroutine that suspends
  using this functor is a consumer coroutine that on every suspension expects to be
  given a value before it resumes. The following example is a consumer coroutine that
  prints every received value to standard output:\n\n    printer :: Show x => Coroutine
  (Await x) IO ()\n    printer = await >>= print >> printer           \n\nWhile these
  two are the most obvious suspension functors, any functor whatsoever can be used
  as a coroutine suspension functor.\n\n## Running a coroutine\n\nAfter a coroutine
  suspends, the suspension functor must be unpacked to get to the coroutine resumption.
  Here's an example of how the `printer` example could be run:\n\n    printerFeeder
  :: Show x => [x] -> Coroutine (Await x) IO () -> IO ()\n    printerFeeder [] _ =
  return ()\n    printerFeeder (head:tail) printer = do p <- resume printer\n                                           case
  p of Left (Await p') -> printerFeeder tail (p' head)\n                                                     Right
  result -> return result\n\nAlternatively, you can use the function `pogoStick` or
  `foldRun` to the same effect:\n\n    printerFeeder feed printer = liftM snd $ foldRun
  f feed printer\n      where f (head:tail) (Await p) = (tail, p head)\n            f
  []          _         = ([], return ())\n\n\n## Links\n\n * Download and API documentation
  is available at [Hackage](http://hackage.haskell.org/package/monad-coroutine)\n
  * The current source code is in a Darcs repository at <https://hub.darcs.net/blamario/SCC/>\n"
license-name: LicenseRef-GPL
