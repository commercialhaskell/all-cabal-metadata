homepage: https://github.com/blamario/monoid-subclasses/
changelog-type: markdown
hash: 025a73243c49a9352dff196ee3741fae1f4bc8c3da09fa84d5bafcaaffe01a79
test-bench-deps:
  monoid-subclasses: -any
  bytestring: '>=0.9 && <1.0'
  base: '>=4.9 && <5'
  text: '>=0.11 && <1.3 || >=2.0 && <2.1'
  primes: ==0.2.*
  containers: '>=0.5.7.0 && <0.7'
  quickcheck-instances: '>=0.3.12 && <0.4'
  tasty-quickcheck: '>=0.7 && <1.0'
  tasty: '>=0.7'
  QuickCheck: '>=2.9 && <3'
  vector: '>=0.12 && <0.14'
maintainer: Mario Blažević <blamario@protonmail.com>
synopsis: Subclasses of Monoid
changelog: |
  Version 1.1.3
  ---------------
  * Support for text-2.0 by Bodigrim

  Version 1.1.2
  ---------------
  * CI tests
  * Fallback implementation of `stripCommonSuffix @Text` for GHCjs by Jack Kelly
  * Fixed documentation bug #31, Factorial laws too strong

  Version 1.1.1
  ---------------
  * Fixed compilation with GHC 8.0.2
  * `Positioned` doesn't use a column for zero-width characters any more

  Version 1.1
  ---------------
  * Added a new TextualMonoid method `toText` for performance
  * Fixed the calculations of `column` of `LinePositioned`
  * Changed the `column` of `LinePositioned` to be one-based
  * `LinePositioned` now treats FF, CR, and TAB characters as
    special, in accordance with Haskell language specification.

  Version 1.0.1
  ---------------
  * Incremented the lower bound of the base dependency
  * Fixed Haddock links

  Version 1.0
  ---------------
  * Fixed issue #24, unlawful LeftReductiveMonoid instance for Map
  * Tightened the laws of GCD classes, dropped instances for Sum and Product
  * Introduced the `Monus` class
  * Introduced the `OverlappingGCDMonoid` class
  * Added the instances of type `Sum Natural` and `Product Natural`
  * Using the language extensions `FlexibleInstances` and `OverlappingInstances`
  * Removed the linear complexity requirement
  * Added and documented less efficient instances
  * Moved various GCD classes into the new module `Data.Monoid.GCD`
  * Added module `Data.Semigroup.Cancellative` with `Semigroup` subclasses
  * Added module `Data.Semigroup.Factorial` with `Semigroup` subclasses
  * Deprecated several `Monoid` subclasses and made them constraint synonyms instead:
    * `type CommutativeMonoid m = (Monoid m, Commutative m)`
    * `type ReductiveMonoid m = (Monoid m, Reductive m)`
    * `type LeftReductiveMonoid m = (Monoid m, LeftReductive m)`
    * `type RightReductiveMonoid m = (Monoid m, RightReductive m)`
    * `type CancellativeMonoid m = (Monoid m, Cancellative m)`
    * `type LeftCancellativeMonoid m = (Monoid m, LeftCancellative m)`
    * `type RightCancellativeMonoid m = (Monoid m, RightCancellative m)`

  Version 0.4.6.1
  ---------------
  Bumped the containers dependency upper bounds

  Version 0.4.6
  ---------------
  Added the Semigroup instances to fix the compilation errors with base-4.11

  Version 0.4.4
  ---------------
  Fixed boundary condition bugs in ByteStringUTF8 uncovered by a new version of QuickCheck

  Version 0.4.3.2
  ---------------
  Fixed compilation errors with GHC 7.8.4 and older

  Version 0.4.3.1
  ---------------
  Bumped the vector dependency upper bounds

  Version 0.4.3
  ---------------
  * Added instances for 3- and 4-tuples
  * Re-implemented Concat as an own data type, dropping Seq

  Version 0.4.2.1
  ---------------
  * Fixed compilation problems with GHC 8 and containers-0.5.7
  * Fixed compilation problems with GHC 8 and containers-0.5.7
  * Merge pull request #10 from mgiles: minor typo in FactorialMonoid laws

  Version 0.4.2
  ---------------
  * Fixed a bug in splitAt implementation for ByteStringUTF8
  * Merge pull request #9 from phadej: use newest quickcheck-instances
  * Removed the overzealous assertions from ByteStringUTF8

  Version 0.4.1.2
  ---------------
  Removing accidental reference to Instances.Markup module

  Version 0.4.1.1
  ---------------
  * Bumped the vector dependency upper bounds
  * Removed GHC-prof-options from the cabal file

  Version 0.4.1
  ---------------
  * Changed the Prelude imports to enable compilation with GHC 7.4
  * Added INLINE pragmas
  * Added the toString method to TextualMonoid class
  * Importing Text.Show.Functions to avoid overlapping instances
  * Eliminated the redundant import warnings from GHC 7.10.1

  Version 0.4.0.4
  ---------------
  * Added -Wall GHC option and eliminated almost all the warnings
  * Fixed a bug in the Textual instance of ByteStringUTF8

  Version 0.4.0.3
  ---------------
  * Excluding the imports of foldMap from Prelude

  Version 0.4.0.2
  ---------------
  * Added more tests and fixed a bug in Stateful
  * Fixed a bug in Positioned.span_
  * Optimized the Stateful data type

  Version 0.3.6.2
  ---------------
  * Added a bunch of pragmas

  Version 0.3.6
  ---------------
  * Deprecated all the inject functions
  * Registered the new Stateful module

  Version 0.3.4.1
  ---------------
  Accommodating the text-1.0 release

  * Introduced the function ByteStringUTF8.decode
  * Removed the utf-string dependency
  * Replaced the utf-string import by a more efficient UTF-8 encoding

  Version 0.3.1
  ---------------
  * Added the Data.Monoid.Instances.Concat module and tests
  * Added the PositiveMonoid class
  * Added the StableFactorialMonoid subclass of FactorialMonoid
  * Added more instances for ()

  Version 0.3
  ---------------
  Added the CommutativeMonoid class at the root of the Cancellative classes

  Version 0.2
  ---------------
  * Added TextualMonoid instances for Seq Char and Vector Char
  * Renamed the FactorialMonoid method map to foldMap in keeping with Foldable

  Version 0.1.2
  ---------------
  Optimizations of the default Factorial methods and of the ButeStringUTF8 instances

  Version 0.1
  ---------------
  Initial release
basic-deps:
  bytestring: '>=0.9 && <1.0'
  base: '>=4.9 && <5'
  text: '>=0.11 && <1.3 || >=2.0 && <2.1'
  primes: ==0.2.*
  containers: '>=0.5.7.0 && <0.7'
  vector: '>=0.12 && <0.14'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.4.1
- 0.3.5
- 0.3.6
- 0.3.6.1
- 0.3.6.2
- '0.4'
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 0.4.0.4
- 0.4.1
- 0.4.1.1
- 0.4.1.2
- 0.4.2
- 0.4.2.1
- 0.4.3
- 0.4.3.1
- 0.4.3.2
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.6.1
- '1.0'
- 1.0.1
- '1.1'
- 1.1.1
- 1.1.2
- 1.1.3
author: Mario Blažević
latest: 1.1.3
description-type: markdown
description: "monoid-subclasses\n=================\n\n### Subclasses of Semigroup
  and Monoid with a solid theoretical foundation and practical purposes ###\n\nThe
  monoid-subclasses package has been released [on\nHackage](http://hackage.haskell.org/package/monoid-subclasses).
  The package defines several classes that are richer\nthan [semigroups](http://hackage.haskell.org/package/base/docs/Data-Semigroup.html#t:Semigroup)
  and\n[monoids](http://hackage.haskell.org/package/base/docs/Data-Monoid.html#t:Monoid)
  but less demanding than\n[groups](http://hackage.haskell.org/package/groups/docs/Data-Group.html):\n\n*
  [Reductive](http://hackage.haskell.org/package/monoid-subclasses/docs/Data-Semigroup-Cancellative.html#t:Reductive)\nprovides
  the operator `</>` which acts as a partial inverse of the semigroup `<>` operator.\n*
  [Cancellative](http://hackage.haskell.org/package/monoid-subclasses/docs/Data-Semigroup-Cancellative.html#t:Cancellative)\nis
  a subclass of `Reductive` that provides additional guarantees about the `</>` operation
  result:\n\n        (a <> b) </> a == Just b\n        (a <> b) </> b == Just a\n\n
  \   Every group (*i.e.*, every `Monoid a` with the operation `inverse :: a -> a`)
  is a cancellative monoid where `a </> b = Just (a <> inverse b)` but not every `Cancellative`
  monoid is a group.\n    \n* [GCDMonoid](http://hackage.haskell.org/package/monoid-subclasses/docs/Data-Monoid-GCD.html#t:GCDMonoid)
  is a subclass of `Reductive` and `Monoid` that provides the `gcd` operation for
  getting the greatest common denominator for two given monoid values.\n* [Monus](http://hackage.haskell.org/package/monoid-subclasses/docs/Data-Monus.html#t:Monus)
  provides the `<\\>` monus operation. The set difference is one familiar instance
  of this operation.\n* [MonoidNull](http://hackage.haskell.org/package/monoid-subclasses/docs/Data-Monoid-Null.html)
  class provides the Boolean `null` operation that checks if the argument monoid is
  `mempty`.\n* [Factorial](http://hackage.haskell.org/package/monoid-subclasses/docs/Data-Semigroup-Factorial.html)
  and [FactorialMonoid](http://hackage.haskell.org/package/monoid-subclasses/docs/Data-Monoid-Factorial.html)
  classes represent semigroups and monoids that can be split up into irreducible factors.\n\nThat's
  the theoretical point of view. From the practical point of view, the main purpose
  of the _monoid-subclasses_ package is similar to that of [ListLike](http://hackage.haskell.org/package/ListLike/docs/Data-ListLike.html)
  - to provide unifying abstractions for various monoidal data types in Haskell, primarily
  [String](http://hackage.haskell.org/package/base/docs/Data-String.html#t:String),
  [ByteString](http://hackage.haskell.org/package/bytestring/docs/Data-ByteString.html#t:ByteString),
  and [Text](http://hackage.haskell.org/package/text). All three types are already
  instances of the [Monoid](http://hackage.haskell.org/package/base/docs/Data-Monoid.html#t:Monoid)
  class. While that abstraction is useful for building sequences of data, it doesn't
  help with deconstructing them.\n\nThat being said, there are two major differences
  in the goals of _ListLike_ and _monoid-subclasses_:\n  * _ListLike_ strives to reproduce
  the standard [Data.List](http://hackage.haskell.org/package/base/docs/Data-List.html)
  interface, whereas _monoid-subclasses_ builds from deeper theoretical foundations;
  and\n  * The _monoid-subclasses_ implementation uses standard Haskell 2010, with
  the exception of two minor extensions which can be worked around if necessary.\n\nThe
  [incremental-parser](http://hackage.haskell.org/package/incremental-parser) package
  can serve as a compact example\nof a parser library that can be applied to different
  input types thanks to _monoid-subclasses_. There is also\n[picoparsec](http://hackage.haskell.org/package/picoparsec),
  a fork of\n[attoparsec](http://hackage.haskell.org/package/attoparsec), and the
  heavy-duty\n[grammatical-parsers](http://hackage.haskell.org/package/grammatical-parsers)
  library.\n\nA more thorough description of the library design can be found in the
  Haskell Symposium 2013 paper [Adding Structure\nto Monoids ](https://github.com/blamario/monoid-subclasses/wiki/Files/HaskellSymposium2013.pdf)\n"
license-name: BSD-3-Clause
