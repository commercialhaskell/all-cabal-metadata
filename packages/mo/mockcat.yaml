all-versions:
- 0.1.0.0
author: funnycat <pujoheadsoft@gmail.com>
basic-deps:
  base: '>=4.7 && <5'
  template-haskell: '>=2.18 && <2.23'
  text: '>=2.0 && <2.2'
changelog: |
  # Changelog for `mockcat`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# \U0001F408Mocking library for Haskell\U0001F408‍\n\n[![Test](https://github.com/pujoheadsoft/mockcat/workflows/Test/badge.svg)](https://github.com/pujoheadsoft/mockcat/actions?query=workflow%3ATest+branch%3Amain)\n\n[日本語版
  README はこちら](https://github.com/pujoheadsoft/mockcat/blob/master/README-ja.md)\n\nmockcat
  is a simple mocking library that supports testing in Haskell.\n\nIt mainly provides
  two features:\n- Creating stub functions\n- Verifying if the expected arguments
  were applied\n\nStub functions can return not only monadic values but also pure
  values.\n\n```haskell\n{-# LANGUAGE BlockArguments #-}\n{-# LANGUAGE TypeApplications
  #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec :: Spec\nspec = do\n  it \"Example
  of usage\" do\n    -- Create a Mock (applying “value” returns the pure value True)\n
  \   mock <- createMock $ \"value\" |> True\n\n    -- Extract the stub function from
  the mock\n    let stubFunction = stubFn mock\n\n    -- Verify the results of applying
  an argument\n    stubFunction \"value\" `shouldBe` True\n\n    -- Verify if the
  expected value (\"value\") was applied\n    mock `shouldApplyTo` \"value\"\n```\n\n#
  Stub Functions\n## Simple Stub Functions\nTo create stub functions, use the createStubFn
  function.\n```haskell\n{-# LANGUAGE BlockArguments #-}\n{-# LANGUAGE TypeApplications
  #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec :: Spec\nspec = do\n  it \"can
  create a stub function\" do\n    -- Create\n    f <- createStubFn $ \"param1\" |>
  \"param2\" |> pure @IO ()\n\n    -- Apply\n    actual <- f \"param1\" \"param2\"\n\n
  \   -- Verify\n    actual `shouldBe` ()\n```\nTo createStubFn, you pass the expected
  arguments concatenated with |>.\nThe final value after |> is the return value of
  the function.\n\nIf unexpected arguments are applied to the stub function, an error
  occurs.\n```console\nuncaught exception: ErrorCall\nExpected arguments were not
  applied to the function.\n  expected: \"value\"\n  but got: \"valuo\"\n```\n## Named
  Stub Functions\nYou can name stub functions.\n```haskell\n{-# LANGUAGE BlockArguments
  #-}\n{-# LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec
  :: Spec\nspec = do\n  it \"named stub\" do\n    f <- createNamedStubFun \"named
  stub\" $ \"x\" |> \"y\" |> True\n    f \"x\" \"z\" `shouldBe` True\n```\nIf the
  expected arguments are not applied, the error message will include this name.\n```console\nuncaught
  exception: ErrorCall\nExpected arguments were not applied to the function `named
  stub`.\n  expected: \"x\",\"y\"\n  but got: \"x\",\"z\"\n```\n## Flexible Stub Functions\nYou
  can create a flexible stub function by giving the `createStubFn` function a conditional
  expression instead of a specific value.  \nThis allows you to return expected values
  for arbitrary values, strings matching specific patterns, etc.\n\n### any\nany matches
  any value.\n```haskell\n{-# LANGUAGE BlockArguments #-}\n{-# LANGUAGE TypeApplications
  #-}\nimport Test.Hspec\nimport Test.MockCat\nimport Prelude hiding (any)\n\nspec
  :: Spec\nspec = do\n  it \"any\" do\n    f <- createStubFn $ any |> \"return value\"\n
  \   f \"something\" `shouldBe` \"return value\"\n```\nSince a function with the
  same name is defined in Prelude, we use import Prelude hiding (any).\n\n### Condition
  Expressions\nUsing the expect function, you can handle arbitrary condition expressions.
  \ \nThe expect function takes a condition expression and a label.  \nThe label is
  used in the error message if the condition is not met.\n```haskell\n{-# LANGUAGE
  BlockArguments #-}\n{-# LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport
  Test.MockCat\n\nspec :: Spec\nspec = do\n  it \"expect\" do\n    f <- createStubFn
  $ expect (> 5) \"> 5\" |> \"return value\"\n    f 6 `shouldBe` \"return value\"\n```\n\n###
  Condition Expressions without Labels\n`expect_` is a label-free version of expect.
  \ \nThe error message will show [some condition].\n```haskell\n{-# LANGUAGE BlockArguments
  #-}\n{-# LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec
  :: Spec\nspec = do\n  it \"expect_\" do\n    f <- createStubFn $ expect_ (> 5) |>
  \"return value\"\n    f 6 `shouldBe` \"return value\"\n```\n\n### Condition Expressions
  using Template Haskell\nUsing expectByExp, you can handle condition expressions
  as values of type Q Exp.  \nThe error message will include the string representation
  of the condition expression.\n```haskell\n{-# LANGUAGE BlockArguments #-}\n{-# LANGUAGE
  TypeApplications #-}\n{-# LANGUAGE TemplateHaskell #-}\nimport Test.Hspec\nimport
  Test.MockCat\n\nspec :: Spec\nspec = do\n  it \"expectByExpr\" do\n    f <- createStubFn
  $ $(expectByExpr [|(> 5)|]) |> \"return value\"\n    f 6 `shouldBe` \"return value\"\n```\n\n##
  Stub Functions that Return Different Values for Each Applied Argument\nBy applying
  a list in the form of x |> y to the `createStubFn` function,   \nyou can create
  stub functions that return different values for each applied argument.\n```haskell\n{-#
  LANGUAGE BlockArguments #-}\n{-# LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport
  Test.MockCat\nimport Prelude hiding (and)\n\nspec :: Spec\nspec = do\n  it \"multi\"
  do\n    f <-\n      createStubFn\n        [ \"a\" |> \"return x\",\n          \"b\"
  |> \"return y\"\n        ]\n    f \"a\" `shouldBe` \"return x\"\n    f \"b\" `shouldBe`
  \"return y\"\n```\n\n# Verification\n## Verify if the Expected Arguments were Applied\nYou
  can verify if the expected arguments were applied using the `shouldApplyTo` function.\nTo
  perform the verification, create a mock using the `createMock` function instead
  of the `createStubFn` function.\nIn this case, use the `stubFn` function to extract
  the stub function from the mock.\n```haskell\n{-# LANGUAGE BlockArguments #-}\n{-#
  LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec ::
  Spec\nspec = do\n  it \"stub & verify\" do\n    -- create a mock\n    mock <- createMock
  $ \"value\" |> True\n    -- stub function\n    let stubFunction = stubFn mock\n
  \   -- assert\n    stubFunction \"value\" `shouldBe` True\n    -- verify\n    mock
  `shouldApplyTo` \"value\"\n```\n## Verify the Number of Times the Expected Arguments
  were Applied\nYou can verify the number of times the expected arguments were applied
  using the `shouldApplyTimes` function.\n```haskell\n{-# LANGUAGE BlockArguments
  #-}\n{-# LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec
  :: Spec\nspec = do\n  it \"shouldApplyTimes\" do\n    m <- createMock $ \"value\"
  |> True\n    print $ stubFn m \"value\"\n    print $ stubFn m \"value\"\n    m `shouldApplyTimes`
  (2 :: Int) `to` \"value\"\n```\n## Verify if the Arguments were Applied in the Expected
  Order\nYou can verify if the arguments were applied in the expected order using
  the `shouldApplyInOrder` function.\n```haskell\n{-# LANGUAGE BlockArguments #-}\n{-#
  LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec ::
  Spec\nspec = do\n  it \"shouldApplyInOrder\" do\n    m <- createMock $ any |> True
  |> ()\n    print $ stubFn m \"a\" True\n    print $ stubFn m \"b\" True\n    m\n
  \     `shouldApplyInOrder` [ \"a\" |> True,\n                             \"b\"
  |> True\n                           ]\n```\n\n## Verify if the Arguments were Applied
  in the Expected Partial Order\nThe `shouldApplyInOrder` function strictly verifies
  the order of application,  \nbut the `shouldApplyInPartialOrder` function can verify
  if the order of application matches partially.\n```haskell\n{-# LANGUAGE BlockArguments
  #-}\n{-# LANGUAGE TypeApplications #-}\nimport Test.Hspec\nimport Test.MockCat\n\nspec
  :: Spec\nspec = do\n  it \"shouldApplyInPartialOrder\" do\n    m <- createMock $
  any |> True |> ()\n    print $ stubFn m \"a\" True\n    print $ stubFn m \"b\" True\n
  \   print $ stubFn m \"c\" True\n    m\n      `shouldApplyInPartialOrder` [ \"a\"
  |> True,\n                                    \"c\" |> True\n                                  ]\n```"
description-type: markdown
hash: b4c51dc35ec2cd139a5f2a7e1daba3a5804dbb0d01d744cfbc05ff3f341c28c1
homepage: https://github.com/pujoheadsoft/mockcat#readme
latest: 0.1.0.0
license-name: MIT
maintainer: funnycat <pujoheadsoft@gmail.com>
synopsis: Simple mock function library for test in Haskell.
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=0'
  mockcat: '>=0'
  template-haskell: '>=2.18 && <2.23'
  text: '>=2.0 && <2.2'
