homepage: https://github.com/TikhonJelvis/modular-arithmetic
changelog-type: markdown
hash: 2fa424db61ef94cb9f0ae28665c6dbd76b0c910cc34d8bb0d6971bfbca80b956
test-bench-deps:
  base: '>4.9 && <5'
  typelits-witnesses: <0.5
  doctest: '>=0.9 && <0.22'
maintainer: Tikhon Jelvis <tikhon@jelv.is>
synopsis: A type for integers modulo some constant.
changelog: |+
  2.0.0.3
  ---
  * Fixed build for GHC 9.4+

  2.0.0.0
  ---
  * replaced `Integral` instance with `Fractional` instance (see #8 and #14)
  * added a constraint to ensure the type-level modulus is never 0
  * made `inv` return `Maybe` instead of raising an error
  * misc. refactoring and improvements

  1.2.1.3
  ---
  * fixed a name clash with GHC.TypeLits for base >= 4.11.0

  1.2.1.2
  ---
  * exported the `/` type operator with `ExplicitNamespaces` enabled to
    support GHC 8. Should be backwards compatible through GHC 7.6.

  1.2.1.1
  ---
  * added a basic test suite with doctests

  1.2.1.0
  ---
  * changed `Integral` implementation: `quotRem` now uses modular inversion!
  * added `inv` for modular inversion
  * added `SomeMod` data type for modular number with unknown modulus
  * added `modVal` and `someModVal` helpers similar to ones in `GHC.TypeLits`

basic-deps:
  base: '>4.9 && <5'
  typelits-witnesses: <0.5
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.1.0
- 1.0.1.1
- 1.1.0.0
- 1.2.0.0
- 1.2.1.0
- 1.2.1.1
- 1.2.1.2
- 1.2.1.3
- 1.2.1.4
- 1.2.1.5
- 2.0.0.1
- 2.0.0.2
- 2.0.0.3
author: Tikhon Jelvis <tikhon@jelv.is>
latest: 2.0.0.3
description-type: markdown
description: "# Modular Arithmetic\n\n[![Hackage package](http://img.shields.io/hackage/v/modular-arithmetic.svg)](http://hackage.haskell.org/package/modular-arithmetic)\n\n\nThis
  package provides a type for integers modulo some constant, usually written as ℤ/n.
  \n\nHere is a quick example:\n\n```\n>>> 10 * 11 :: ℤ/7\n5\n```\n\nIt also works
  correctly with negative numeric literals:\n\n```\n>>> (-10) * 11 :: ℤ/7\n2\n```\n\nModular
  division is an inverse of modular multiplication.\nIt is defined when divisor is
  coprime to modulus:\n\n```\n>>> 7 `div` 3 :: ℤ/16\n13\n>>> 3 * 13 :: ℤ/16\n7\n```\n"
license-name: BSD-3-Clause
