all-versions:
- '0.1'
- 0.1.1
author: Bump Technologies, Inc
basic-deps:
  ListLike: '>=0'
  aeson: '>=0.3'
  base: '>=4 && <5'
  bytestring: '>=0.9'
  containers: '>=0'
  mtl: '>=2.0 && <2.2'
  old-locale: '>=0'
  pool-conduit: '>=0.1.0.2 && <0.2'
  protocol-buffers: '>=2.0.11'
  protocol-buffers-descriptor: '>=2.0.11'
  riak-bump: '>=0.7.3.4'
  safe: '>=0'
  stats-web: '>=0'
  stm: '>=2.2'
  system-uuid: '>=2'
  text: '>=0.11'
  text-format: '>=0'
  time: '>=1.2'
  unordered-containers: '>=0.2.1 && <0.3'
  zeromq-haskell: '>=0.8 && <0.9'
changelog: ''
changelog-type: ''
description: "========================\nHaskell Client for Montage\n========================\n\nInstall\n=======\n\nBuilt
  and tested with ghc 7.4.1\n\nInstall the non-hackage dependencies::\n\n    git clone
  git@github.com:wmoss/StatsWeb.git\n    cd StatsWeb && cabal install\n\n    git clone
  git@github.com:bumptech/riak-haskell-client.git\n    cd riak-haskell-client && cabal
  install\n\nFrom montage-haskell-client/ execute::\n\n    cabal install\n\nWe recommend
  using a sandbox, hsenv is particularly good.\n\nTo setup montage itself, see http://github.com/bumptech/montage\n\nConfiguration\n=======\n\nThe
  montage proxy is port configurable (here given the Config handle set to 7078), with
  riak running on 8087::\n\n    import Network.Riak (defaultClient, connect, disconnect,
  Client(port), Connection)\n    import Data.Conduit.Pool (Pool, createPool)\n\n    import
  Network.Riak.Montage\n\n    main :: IO ()\n    main = do\n        mainPool <- createPool\n\t
  \   (connect $ defaultClient {port = \"8087\"})\n\t    disconnect\n\t    1 -- stripes\n\t
  \   10 -- timeout\n\t    300 -- max connections\n\n\tlet cfg' = cfg { proxyPort
  = 7078 }\n\n\trunDaemon (cfg' :: Config ResObject) mainPool\n\nSee montage for how
  to define resolutions for a resolution object (ResObject), which is also required
  to start the proxy.\n\nYour client's request pool must connect (not bind) to that
  port::\n\n    import Data.Conduit.Pool (Pool, createPool)\n    import System.ZMQ
  as ZMQ\n\n    import Network.Riak.MontageClient\n\n    montageZpool <- createPool
  (do\n        s <- ZMQ.socket ctx Req\n\tZMQ.connect s \"tcp://localhost:7078\"\n\treturn
  s\n\t) ZMQ.close 1 5 1\n\n    let (bucket, key) = (\"u-info\", \"1\")\n    resp
  <- montageGet montageZpool bucket key\n\nSee Examples and More for full documentation
  of client requests.\n\nExamples\n=======\nTo setup the examples, first download
  hprotoc::\n\n    cabal install hprotoc\n\nThen execute::\n\n    cd examples && hprotoc
  user.proto\n\nYou must have montage installed to run the basic proxy which the examples
  talk with.  In your external montage/ directory::\n\n    cd examples && runhaskell
  basic_proxy.hs\n\nSee github.com/bumptech/montage for more on the montage haskell
  setup.\n\nTo run the examples, in examples/ execute::\n\n    runhaskell Resolution.hs
  -- a basic last write wins resolution\n    runhaskell Delete.hs -- tests a delete
  after a put\n    runhaskell Many.hs -- asserts the identity of put many -> get many\n
  \   runhaskell Reference.hs -- a basic, multi-target reference get\n\nMore\n===========\n\nSee
  the haddock documentation for type-signatures, descriptions, and source of client
  functions.\n"
description-type: text
hash: 8458cdf7d3b7709dfdba03ae40de75fe7238921f8e540275f7d5685f7e982c7c
homepage: http://github.com/bumptech/montage-haskell-client
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: dev@bu.mp
synopsis: Riak Resolution Proxy Client
test-bench-deps: {}
