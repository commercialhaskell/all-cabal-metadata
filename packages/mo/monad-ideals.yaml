all-versions:
- 0.1.0.0
author: Koji Miyazato
basic-deps:
  base: '>=4.14 && <4.21'
  bifunctor-classes-compat: '>=0.1 && <1'
  comonad: '>=5.0.8 && <5.1'
  semigroupoids: '>=6.0.0 && <6.1'
changelog: |-
  # Revision history for monad-ideals

  ## 0.1.0.0 -- 2024-04-23

  * Created based on [category-extras-0.53.5](https://hackage.haskell.org/package/category-extras-0.53.5)
    with updates

    - Changes needed to work with current ecosystem
    - Implement coproduct of ideal monads (product of coideal comonads)
changelog-type: markdown
description: "# monad-ideals: Ideal Monads and coproduct of Monads\n\nRevives `Control.Monad.Ideal`
  from old versions of [category-extras](https://hackage.haskell.org/package/category-extras-0.53.25).\n\n##
  Ideal Monads\n\nIdeal monads[^1] are certain kind of monads. Informally, an ideal
  monad `M`\nis a `Monad` which can be written as a disjoint union of \"pure\" values
  and \"impure\" values,\nand its `join` operation on \"impure\" values never produces
  \"pure\" values.\n\n[^1]: N. Ghani and T. Uustalu, [“Coproducts of ideal monads,”](http://www.numdam.org/article/ITA_2004__38_4_321_0.pdf)
  Theoret. Inform. and Appl., vol. 38, pp. 321–342, 2004.\n\n```haskell\ndata M a
  = Pure a | Impure (...)\n\npure :: a -> M a\npure = Pure\n\njoin :: M (M a) -> M
  a\njoin (Pure ma) = ma\njoin (Impure ...) = Impure (...)\n  -- Impure values of
  @M a@ never becomes pure again \n```\n\nFormally, an ideal monad `m` is a `Monad`
  equipped with \n\n- `Functor m₀`, called the ideal part of `m`\n- Natural isomorphism
  `iso :: ∀a. Either a (m₀ a) -> m a` (and its inverse `iso⁻¹ :: ∀a. m a -> Either
  a (m₀ a)`)\n- Natural transformation `idealize :: ∀a. m₀ (m a) -> m₀ a`\n\nsatisfying
  these two properties.\n\n- `iso . Left === pure :: ∀a. a -> m a`\n- `either id (iso
  . Right . idealize) . iso⁻¹ === join :: m (m a) -> m a`\n\nThis package provides
  `MonadIdeal`, a type class to represent ideal monads in terms of\nits ideal part
  `m₀` (instead of a subclass of `Monad` to represent ideal monad itself.)\n\n```haskell\nclass
  (Isolated m0, Bind m0) => MonadIdeal m0 where\n  idealBind :: m0 a -> (a -> Ideal
  m0 b) -> m0 b\n\ntype Ideal m0 a\n\n-- | Constructor of @Ideal@\nideal :: Either
  a (m0 a) -> Ideal m0 a\n\n-- | Deconstructor of @Ideal@\nrunIdeal :: Ideal m0 a
  -> Either a (m0 a)\n```\n\nHere, `Ideal m0` corresponds to the ideal monad which
  would have `m0` as its ideal part.\n\n## `Isolated` class\n\nThere is a generalization
  to ideal monads, which are almost ideal monads,\nbut lack a condition that says
  \"an impure value does not become a pure value by the `join` operation\".\n\nA monad
  `m` in this class has natural isomorphism `Either a (m₀ a) -> m a` with some functor
  `m₀`, and\n`pure` is the part of `m` which is not `m₀`. Formally, the defining data
  of this class are:\n\n- `Functor m₀`, called the impure part of `m`\n- Natural isomorphism
  `iso :: ∀a. Either a (m₀ a) -> m a` (and its inverse `iso⁻¹ :: ∀a. m a -> Either
  a (m₀ a)`)\n- `iso . Left === pure :: ∀a. a -> m a`\n\nCombined with the monad laws
  of `m`, `join :: ∀a. m (m a) -> m a` must be equal to the following natural transformation\nwith
  some `impureJoin`.\n\n```haskell\njoin :: ∀a. m (m a) -> m a\njoin mma = case iso⁻¹
  mma of\n  Left ma -> ma\n  Right m₀ma -> impureJoin m₀ma\n  where\n    impureJoin
  :: ∀a. m₀ (m a) -> m a\n```\n\nThe `Isolated` class is a type class for a functor
  which can be thought of as an\nimpure part of some monad.\n\n```haskell\nnewtype
  Unite f a = Unite { runUnite :: Either a (f a) }\n\nclass Functor m0 => Isolated
  m0 where\n  impureBind :: m0 a -> (a -> Unite m0 b) -> Unite m0 b\n```\n\n## Coproduct
  of monads\n\nCoproduct `m ⊕ n` of two monads[^2] `m, n` is the coproduct (category-theoretic
  sum) in the category of monad\nand [monad morphisms](https://hackage.haskell.org/package/mmorph-1.2.0/docs/Control-Monad-Morph.html).
  [^3]\n\nIn basic terms, `m ⊕ n` is a monad with the following functions and properties.\n\n-
  Monad morphism `inject1 :: ∀a. m a -> (m ⊕ n) a`\n- Monad morphism `inject2 :: ∀a.
  n a -> (m ⊕ n) a`\n- Function `eitherMonad` which takes two monad morphisms and
  return a monad morphism.\n\n  ```\n  eitherMonad :: (∀a. m a -> t a) -> (∀a. n a
  -> t a) -> (∀a. (m ⊕ n) a -> t a)\n  ```\n\n- Given arbitrary monads `m, n, t`,\n\n
  \ - For all monad morphisms `f1` and `f2`,\n\n    - `eitherMonad f1 f2 . inject1
  = f1`\n    - `eitherMonad f1 f2 . inject2 = f2`\n\n  - For any monad morphism `f
  :: ∀a. (m ⊕ n) a -> t a`, `f` equals to `eitherMonad f1 f2` for some unique `f1,
  f2`.\n    Or, equvalently, `f = eitherMonad (f . inject1) (f . inject2)`.\n\nCoproduct
  of two monads does not always exist, but for ideal monads or monads with `Isolated`
  impure parts,\ntheir coproducts exist. This package provides a type constructor
  `(:+)` below.\n\n```haskell\n-- Control.Monad.Coproduct\ndata (:+) (m :: Type ->
  Type) (n :: Type -> Type) (a :: Type)\n```\n\nUsing this type constructor, coproduct
  of monad can be constructed in two ways.\n\n- If `m0, n0` are `Isolated` i.e. the
  impure part of monads `Unite m0, Unite n0` respectively,\n  `m0 :+ n0` is also `Isolated`
  and `Unite (m0 :+ n0)` is the coproduct of monads `Unite m0 ⊕ Unite n0`.\n\n- If
  `m0, n0` are `MonadIdeal` i.e. the ideal part of ideal monads `Ideal m0, Ideal n0`
  respectively,\n  `m0 :+ n0` is also `MonadIdeal` and `Ideal (m0 :+ n0)` is the coproduct
  of monads `Ideal m0 ⊕ Ideal n0`.\n\n[^2]: Jiří Adámek, Nathan Bowler, Paul B. Levy
  and Stefan Milius, [\"Coproducts of Monads on Set.\"](https://arxiv.org/abs/1409.3804)
  (https://doi.org/10.48550/arXiv.1409.3804)\n\n[^3]: To name the same concept to
  monad morphism, the term \"monad transformation\" is used in `transformers` package
  ([Control.Monad.Trans.Class](https://hackage.haskell.org/package/transformers-0.6.0.3/docs/Control-Monad-Trans-Class.html#t:MonadTrans).)\n\n##
  Duals\n\nThis package also provides the duals of ideal monads and coproducts of
  them: _Coideal comonads_ and _products_ of them.\n\n--------"
description-type: markdown
hash: 66014efc4bd1dbd57c4034e14261047d71d85ec41febd9836ae0f3002b884095
homepage: https://github.com/viercc/monad-ideals
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: viercc@gmail.com
synopsis: Ideal Monads and coproduct of them
test-bench-deps:
  base: '>=0'
  comonad: '>=0'
  monad-ideals: '>=0'
