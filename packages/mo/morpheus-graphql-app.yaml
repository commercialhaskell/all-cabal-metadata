homepage: https://morpheusgraphql.com
changelog-type: markdown
hash: ef5058926c5c46ae4eb613445e27c9919649812561fc29a2a591129df9646c7d
test-bench-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  megaparsec: '>=7.0.0 && <10.0.0'
  morpheus-graphql-core: '>=0.19.0 && <0.20.0'
  th-lift-instances: '>=0.1.1 && <0.3'
  containers: '>=0.4.2.1 && <0.7'
  relude: '>=0.3.0 && <2.0'
  morpheus-graphql-tests: '>=0.19.0 && <0.20.0'
  mtl: '>=2.0 && <3.0'
  hashable: '>=1.0.0 && <2.0'
  tasty-hunit: '>=0.1 && <1.0'
  transformers: '>=0.3 && <0.6'
  tasty: '>=0.1 && <1.5'
  scientific: '>=0.3.6.2 && <0.4'
  morpheus-graphql-app: -any
  aeson: '>=1.4.4.0 && <3'
  template-haskell: '>=2.0 && <3.0'
  vector: '>=0.12.0.1 && <0.13'
  directory: '>=1.0 && <2.0'
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL App
changelog: |
  # Changelog

  see latest changes on [Github](https://github.com/morpheusgraphql/morpheus-graphql/releases)

  ## 0.19.0 - 21.03.2022

  ## 0.18.0 - 08.11.2021

  - Data.Morpheus.App.NamedResolvers (inspired by apollo [named resolvers](https://www.apollographql.com/docs/apollo-server/data/resolvers/#as-this-example-shows)

  ## 0.17.0 (Initial Release) - 25.02.2021
basic-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  megaparsec: '>=7.0.0 && <10.0.0'
  morpheus-graphql-core: '>=0.19.0 && <0.20.0'
  th-lift-instances: '>=0.1.1 && <0.3'
  containers: '>=0.4.2.1 && <0.7'
  relude: '>=0.3.0 && <2.0'
  mtl: '>=2.0 && <3.0'
  hashable: '>=1.0.0 && <2.0'
  transformers: '>=0.3 && <0.6'
  scientific: '>=0.3.6.2 && <0.4'
  aeson: '>=1.4.4.0 && <3'
  template-haskell: '>=2.0 && <3.0'
  vector: '>=0.12.0.1 && <0.13'
all-versions:
- 0.17.0
- 0.18.0
- 0.19.0
- 0.19.1
- 0.19.2
author: Daviti Nalchevanidze
latest: 0.19.2
description-type: markdown
description: |
  # Morpheus GraphQL App

  provides utilities for creating executable GraphQL applications for servers. You can use it to create a schema-first GraphQL server with dynamic typings.

  ## Build schema-first GraphQL App with dynamic typings

  ###### schema.gql

  ```gql
  type Deity {
    name: String
    power: [String!]
  }

  type Query {
    deity(id: ID): Deity
  }
  ```

  ###### App.hs

  ```hs
  deityResolver :: Monad m => NamedResolverFunction QUERY e m
  deityResolver arg =
    object
      [ ("name", pure "Morpheus"),
        ("power", pure $ list [enum "Shapeshifting"])
      ]

  resolver :: Monad m => RootResolverValue e m
  resolver =
    queryResolvers
      [ ( "Query", const $ object [("deity", ref "Deity" <$> getArgument "id")]),
        ("Deity", deityResolver)
      ]

  api :: ByteString -> IO  ByteString
  api query = do
    schema <- LBS.readFile "./schema.gql" >>= resultOr (fail . show) pure . parseSchema
    runApp (mkApp schema resolver) query
  ```
license-name: MIT
