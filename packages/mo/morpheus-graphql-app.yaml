homepage: https://morpheusgraphql.com
changelog-type: markdown
hash: 7561a7b371673417c8d7e4200ce2e79f01b5a8557547efdf341136459132d9cc
test-bench-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  megaparsec: '>=7.0.0 && <10.0.0'
  morpheus-graphql-core: '>=0.17.0 && <0.18.0'
  th-lift-instances: '>=0.1.1 && <=0.3'
  containers: '>=0.4.2.1 && <0.7'
  relude: '>=0.3.0'
  mtl: '>=2.0 && <=3.0'
  hashable: '>=1.0.0'
  tasty-hunit: -any
  transformers: '>=0.3.0.0 && <0.6'
  tasty: -any
  scientific: '>=0.3.6.2 && <0.4'
  morpheus-graphql-app: -any
  aeson: -any
  template-haskell: '>=2.0 && <=3.0'
  vector: '>=0.12.0.1 && <0.13'
  directory: '>=1.0'
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL Core
changelog: |
  # Changelog

  ## 0.17.0 (Initial Release) - 25.02.2021
basic-deps:
  bytestring: '>=0.10.4 && <0.11'
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.8.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  megaparsec: '>=7.0.0 && <10.0.0'
  morpheus-graphql-core: '>=0.17.0 && <0.18.0'
  th-lift-instances: '>=0.1.1 && <=0.3'
  containers: '>=0.4.2.1 && <0.7'
  relude: '>=0.3.0'
  mtl: '>=2.0 && <=3.0'
  hashable: '>=1.0.0'
  transformers: '>=0.3.0.0 && <0.6'
  scientific: '>=0.3.6.2 && <0.4'
  aeson: '>=1.4.4.0 && <=1.6'
  template-haskell: '>=2.0 && <=3.0'
  vector: '>=0.12.0.1 && <0.13'
all-versions:
- 0.17.0
author: Daviti Nalchevanidze
latest: 0.17.0
description-type: markdown
description: |
  # Morpheus GraphQL App

  provides utilities for creating executable GraphQL applications for servers. You can use it to create a schema-first GraphQL server with dynamic typings.

  ## Build schema-first GraphQL App with dynamic typings

  ```hs
  schema :: Schema VALID
  schema =
    [dsl|
    type Query {
      deity(name: String): Deity!
    }

    type Deity {
      name: String!
      power: [String!]!
    }
  |]

  resolver :: Monad m => RootResolverValue e m
  resolver =
    RootResModel
      { query =
          pure $
            mkObject
              "Query"
              [("deity", resolveDeity)],
        mutation = pure mkNull,
        subscription = pure mkNull
      }

  resolveDeity :: Monad m => m (ResolverValue  m)
  resolveDeity =
    pure $
      mkObject
        "Deity"
        [ ("name", pure $ mkString "Morpheus"),
          ("power", pure $ mkList [mkString "Shapeshifting"])
        ]

  api :: ByteString -> IO  ByteString
  api = runApp (mkApp schema resolver)
  ```
license-name: MIT
