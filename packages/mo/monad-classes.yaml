all-versions:
- '0.3'
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
author: Roman Cheplyaka <roma@ro-che.info>
basic-deps:
  base: '>=4.7 && <5'
  ghc-prim: '>=0'
  mmorph: '>=1.0.3'
  monad-control: '>=1'
  peano: '>=0.1'
  reflection: '>=1.4'
  transformers: '>=0.2'
  transformers-base: '>=0.4.2'
  transformers-compat: '>=0.3.1'
changelog: ''
changelog-type: ''
description: |
  [![Build Status](https://travis-ci.org/strake/monad-classes.hs.svg?branch=master)](https://travis-ci.org/strake/monad-classes.hs)

  See [this series of articles][1] for the detailed description and motivation.

  [1]: https://ro-che.info/articles/extensible-effects

  This is a more flexible version of mtl, the monad transformers library.

  *   You can have many layers of e.g. state transformers in your stack, and
      you don't have to explicitly lift your `get`s and `put`s, as soon as
      different state transformers carry different types of states.

      Example:

      ``` haskell
      a :: (MonadState Bool m, MonadState Int m) => m ()
      a = do
        put False -- set the boolean state
        modify (+ (1 :: Int)) -- modify the integer state
      ```

  *   mtl requires *Θ(n<sup>2</sup>)* instances (like `MonadReader e (StateT s m)`);
      monad-classes requires only *Θ(n)* of them (where *n* is the number of
      different transformer types).

      If you'd like to define your own monad-classes-style class, you have to
      write much less boilerplate code.
description-type: markdown
hash: 793faead28dafb47f115c4dec877ce3e3ffab604f134d852652385632ea0923f
homepage: https://github.com/strake/monad-classes.hs
latest: 0.3.2.2
license-name: MIT
maintainer: M Farkas-Dyck <strake888@gmail.com>
synopsis: more flexible mtl
test-bench-deps:
  base: '>=4 && <5'
  conduit: '>=0'
  data-lens-light: '>=0.1.2'
  ghc-prim: '>=0'
  mmorph: '>=0'
  monad-classes: '>=0'
  tasty: '>=0.8'
  tasty-hunit: '>=0'
  transformers: '>=0'
