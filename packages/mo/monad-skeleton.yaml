homepage: https://github.com/fumieval/monad-skeleton
changelog-type: markdown
hash: 1768220a01d010020adfd7a8e435998c8e5e1a6a562866dd54b3af23e08e123f
test-bench-deps: {}
maintainer: Fumiaki Kinoshita <fumiexcel@gmail.com>
synopsis: Monads of program skeleta
changelog: |
  0.2
  ----

  * Removed `unbone`

  0.1.4
  ----
  * Changed the representation of `Skeleton` for performance optimisation
basic-deps:
  base: '>=4.9 && <4.17'
all-versions:
- '0'
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.2.2
- 0.1.3
- 0.1.3.1
- 0.1.3.2
- 0.1.4
- 0.1.5
- '0.2'
author: Fumiaki Kinoshita
latest: '0.2'
description-type: markdown
description: |
  monad-skeleton
  ======================

  [![Build Status](https://travis-ci.org/fumieval/monad-skeleton.svg?branch=master)](https://travis-ci.org/fumieval/monad-skeleton)
  [![Hackage](https://img.shields.io/hackage/v/monad-skeleton.svg)](https://hackage.haskell.org/package/monad-skeleton)

  This package provides `Skeleton`, an operational monad (i.e. free monad that does not require the Functor implementation). The internal encoding
  gives O(1) bind and monadic reflection.

  `Skeleton` promotes unit instructions to a monad. It is isomorphic to
  `MonadView (Skeleton t)`:

  ```haskell
  data MonadView t m x where
    Return :: a -> MonadView t m a
    (:>>=) :: !(t a) -> (a -> m b) -> MonadView t m b

  boned :: MonadView t (Skeleton t) a -> Skeleton t a
  debone :: Skeleton t a -> MonadView t (Skeleton t) a
  ```

  GADTs are handy to define instructions:

  ```haskell
  data Interaction x where
    Get :: Interaction String
    Put :: String -> Interaction ()

  echo :: Skeleton Interaction ()
  echo = bone Get >>= bone . Put
  ```

  Use `debone` to interpret a computation.

  ```haskell
  interpret :: Skeleton Interaction a -> IO a
  interpret m = case debone m of
    Return a -> return a
    Get :>>= k -> getLine >>= interpret . k
    Put s :>>= k -> putStrLn s >>= interpret . k
  ```
license-name: BSD-3-Clause
