all-versions:
- '0.1'
- 0.1.1
author: Bump Technologies, Inc
basic-deps:
  ListLike: '>=0'
  aeson: '>=0.3'
  base: '>=4 && <5'
  bytestring: '>=0.9'
  containers: '>=0'
  old-locale: '>=0'
  pool-conduit: '>=0.1.0.2 && <0.2'
  protocol-buffers: '>=2.0.11'
  protocol-buffers-descriptor: '>=2.0.11'
  riak-bump: '>=0.7.3.4'
  safe: '>=0'
  stats-web: '>=0'
  stm: '>=2.2'
  system-uuid: '>=2'
  text: '>=0.11'
  time: '>=1.2'
  unordered-containers: '>=0.2.1 && <0.3'
  zeromq-haskell: '>=0.8 && <0.9'
changelog: ''
changelog-type: ''
description: "========================\nMontage: a riak resolution proxy\n========================\n\nEven
  Rocky had a montage...\n\nInstall\n=======\n\nBuilt and tested with ghc 7.4.1\n\nInstall
  the non-hackage dependencies::\n\n    git clone git@github.com:wmoss/StatsWeb.git\n
  \   cd StatsWeb && cabal install\n\n    git clone git@github.com:bumptech/riak-haskell-client.git\n
  \   cd riak-haskell-client && cabal install\n\nFrom montage/ execute::\n\n    cabal
  install\n\nWe recommend using a sandbox, hsenv is particularly good.\n\nConfiguration\n=======\n\nThe
  montage proxy is port configurable (here given the Config handle set to 7078), with
  riak running on 8087::\n\n    import Network.Riak (defaultClient, connect, disconnect,
  Client(port), Connection)\n    import Data.Conduit.Pool (Pool, createPool)\n\n    import
  Network.Riak.Montage\n\n    main :: IO ()\n    main = do\n        mainPool <- createPool\n\t
  \   (connect $ defaultClient {port = \"8087\"})\n\t    disconnect\n\t    1 -- stripes\n\t
  \   10 -- timeout\n\t    300 -- max connections\n\n\tlet cfg' = cfg { proxyPort
  = 7078 }\n\n\trunDaemon (cfg' :: Config ResObject) mainPool\n\nResObject is a concrete
  datatype you define.  For Montage to work with this datatype, you must define:\n
  \ (1) translations from bytestring -> datatype, datatype -> bytestring,\n  (2) methods
  for resolving siblings,\n  (3) and how to obtain a bytestring key from values in
  the datatype\nSee examples/ for a definition of ResObject and how to implement (1),
  (2), and (3).\n\nYou can also set the mainPool argument to be a datatype with more
  than one pool, in case particular buckets have such variable resolution times that
  you want to isolate your bucket fetches::\n\n    data Pools = Pools {\n        poolA
  :: Pool Connection\n      , poolB :: Pool Connection\n    }\n\n    instance Poolable
  Pools where\n        chooser pools \"bucketA\" = poolA pools\n        chooser pools
  \"bucketB\" = poolB pools\n        chooser pools \"bucketC\" = poolC pools\n\nFor
  a single pool, like mainPool, you're also required to define its datatype as an
  instance of Poolable, such that the bucket doesn't matter::\n\n    instance Poolable
  (Pool Connection) where\n        chooser pool _ = pool\n\nYou can also a set the
  cfg field 'logger' to a logging function that fits the type signature::\n\n    logger
  :: B.Bytestring -> Maybe Double -> Value -> IO ()\n    logger errorType duration
  val = -- your defintion\n\nwhere errorType is filled in by the Montage exception
  handler with the type of exception (useful as a prefix), duration is a timestamp
  Montage may provide (depending on where the error occurs), and val is JSON that
  Montage constructs with details about the error.\n\nSince Montage provides these
  values, your logger would simply format the arguments and broadcasts them to a location
  of your choice.  The default logger simply concatenates the arguments and broadcasts
  to stderr.\n\nExamples\n=======\nTo setup the examples, first download hprotoc::\n\n
  \   cabal install hprotoc\n\nThen execute::\n\n    cd examples && hprotoc user.proto\n\nThen::\n\n
  \   cd examples && runhaskell basic_proxy.hs\n\nFor client examples to run against
  the basic_proxy, see github.com/bumptech/montage-haskell-client/examples\n\nMore\n===========\n\nSee
  the haddock documentation for type-signatures, descriptions, and source of client
  functions.\n"
description-type: text
hash: 47aee319f9e2beb0c7852042e2b304f0ca2330eca3b921e93a41ad9214211897
homepage: http://github.com/bumptech/montage
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: dev@bu.mp
synopsis: Riak Resolution Proxy
test-bench-deps: {}
