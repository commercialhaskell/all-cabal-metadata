all-versions:
- 0.2.0.0
- 0.3.0
- 0.4.0
author: Oskar WickstrÃ¶m
basic-deps:
  base: '>=4.9 && <5'
  motor: '>=0.4.0'
  motor-reflection: '>=0'
  template-haskell: '>=2.11.1.0'
  text: '>=0'
changelog: |
  * 0.4.0 (pending)
    - Use row-types 0.3.0 or higher, and the `Overwrite` construct
      rather than `Modify`
  * 0.3.0
    - Use row-types instead of CTRex.
    - Rename `:->` operator to `:=`.
    - Provide better default constraints from using `Actions`.
    - Make `Actions` a data type and use it promoted.
    - Add `Remain` action.
    - Add `get` operator, returning the current state of a named
      resource.
    - Add `update` operator, mapping an update function over the current
      state of a named resource.
  * 0.2.0.0
    - Add `motor-reflection` and `motor-diagrams` packages.
  * 0.1.1.0
    - Add `call` operation to `MonadFSM` class
  * 0.1.0.0
    - Initial version of Motor
changelog-type: markdown
description: |
  # motor-diagrams

  Generate state diagrams from Motor FSM typeclasses.

  **This package is experimental!**

  ## Example

  ![Game state diagram](diagrams/game.png)

  ## Usage

  First, use `reflectEvents` on your FSM typeclass to obtain a
  value-level representation:

  ``` haskell
  data Open
  data Closed

  class MonadFSM m => Door (m :: Row * -> Row * -> * -> *) where
    type State m :: * -> *
    initial
      :: Name n
      -> Actions m '[n !+ State m Open] r ()
    close
      :: Name n
      -> Actions m '[n :-> State m Open !--> State m Closed] r ()
    open
      :: Name n
      -> Actions m '[n :-> State m Closed !--> State m Open] r ()
    end
      :: Name n
      -> Actions m '[n !- State m Closed] r ()

  reflectEvents ''Door "doorEvents"
  ```

  Then, use `Motor.FSM.Diagram.renderPlantUmlToFile` to render it
  as a PlantUML state diagram:

  ``` haskell
  main :: IO ()
  main =
    renderPlantUmlToFile
      "door.uml.txt"
      doorEvents
  ```

  Or, use the Template Haskell wrapper
  `Motor.FSM.Diagram.TH.renderPlantUmlToFile` to write the file when
  compiling the module (this requires the reflection to happen in another
  module):

  ``` haskell
  $(renderPlantUmlToFile
      "door.uml.txt"
      doorEvents)
  ```

  Last, render in your format of choice using the PlantUML JAR file:

  ``` shell
  java -jar plantuml.jar -tpng door.uml.txt -o door.png
  ```

  For an example how to automate the last step with Make, see [this
  Makefile](Makefile).

  ## License

  Mozilla Public License Version 2.0, see `LICENSE` file in each
  package.
description-type: markdown
hash: 31611637a703207c4224a4020ac158591d7dd9f0100f09d55272f8eb8ebe425f
homepage: ''
latest: 0.4.0
license-name: MPL-2.0
maintainer: oskar.wickstrom@gmail.com
synopsis: Generate state diagrams from Motor FSM typeclasses
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  hspec-discover: '>=0'
  motor: '>=0'
  motor-diagrams: '>=0'
  motor-reflection: '>=0'
  text: '>=0'
