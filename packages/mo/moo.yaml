all-versions:
- '1.0'
- '1.2'
author: Sergey Astanin <s.astanin@gmail.com>
basic-deps:
  MonadRandom: '>=0'
  array: '>=0'
  base: '>=4 && <5'
  containers: '>=0'
  gray-code: '>=0.2.1'
  mersenne-random-pure64: '>=0'
  mtl: '>=2'
  parallel: '>=3.0'
  random: '>=0.1'
  random-shuffle: '>=0.0.2'
  time: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "Moo\r\n===\r\n\r\n     ------------------------------------------------\r\n
  \   < Moo. Breeding Genetic Algorithms with Haskell. >\r\n     ------------------------------------------------\r\n
  \           \\   ^__^\r\n             \\  (oo)\\_______\r\n                (__)\\
  \      )\\/\\\r\n                    ||----w |\r\n                    ||     ||\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n###
  Installation from Hackage\r\n\r\nHackage is a Haskell community's package archive.
  This is where the\r\nlatest versions of packages are published first.\r\nTo install
  Moo from Hackage use Cabal-Install:\r\n\r\n  * install Haskell Platform or GHC and
  Cabal-Install\r\n  * run `cabal update`\r\n  * run `cabal install moo`\r\n\r\n\r\n###
  Installation with Stack\r\n\r\nStackage is a stable package archive. Stackage builds
  are supposed to\r\nbe reproducible. Stackage also provides Long Term Support releases.\r\nTo
  build Moo with Stackage dependencies, use the `stack` tool:\r\n\r\n  * install [`stack`](https://docs.haskellstack.org/)\r\n
  \ * if necessary, install GHC: run `stack setup`\r\n  * run: `stack update`\r\n
  \ * in the project source directory run: `stack build`\r\n  * to run tests: `stack
  test`\r\n\r\n\r\n### Build Status\r\n\r\n[![Build Status](https://travis-ci.org/astanin/moo.svg?branch=master)](https://travis-ci.org/astanin/moo)\r\n\r\n\r\nFeatures\r\n--------\r\n\r\n
  \   |                       | Binary GA            | Continuous GA            |\r\n
  \   |-----------------------+----------------------+--------------------------|\r\n
  \   |Encoding               | binary bit-string    | sequence of real values  |\r\n
  \   |                       | Gray bit-string      |                          |\r\n
  \   |-----------------------+----------------------+--------------------------|\r\n
  \   |Initialization         |            random uniform                       |\r\n
  \   |                       |            constrained random uniform           |\r\n
  \   |                       |            arbitrary custom                     |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Objective              |            minimization and maximiation         |\r\n
  \   |                       |            optional scaling                     |\r\n
  \   |                       |            optional ranking                     |\r\n
  \   |                       |            optional niching (fitness sharing)   |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Selection              |            roulette                             |\r\n
  \   |                       |            stochastic universal sampling        |\r\n
  \   |                       |            tournament                           |\r\n
  \   |                       |            optional elitism                     |\r\n
  \   |                       |            optionally constrained               |\r\n
  \   |                       |            custom non-adaptive ^                |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Crossover              |            one-point                            |\r\n
  \   |                       |            two-point                            |\r\n
  \   |                       |            uniform                              |\r\n
  \   |                       |            custom non-adaptive ^                |\r\n
  \   |                       +----------------------+--------------------------|\r\n
  \   |                       |                      | BLX-Î± (blend)            |\r\n
  \   |                       |                      | SBX (simulated binary)   |\r\n
  \   |                       |                      | UNDX (unimodal normally  |\r\n
  \   |                       |                      | distributed)             |\r\n
  \   |-----------------------+----------------------+--------------------------|\r\n
  \   |Mutation               | point                | Gaussian                 |\r\n
  \   |                       | asymmetric           |                          |\r\n
  \   |                       | constant frequency   |                          |\r\n
  \   |                       +----------------------+--------------------------|\r\n
  \   |                       |            custom non-adaptive ^                |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Replacement            |            generational with elitism            |\r\n
  \   |                       |            steady state                         |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Stop                   |            number of generations                |\r\n
  \   |condition              |            values of objective function         |\r\n
  \   |                       |            stall of objective function          |\r\n
  \   |                       |            custom or interactive (`loopIO`)     |\r\n
  \   |                       |            time limit (`loopIO`)                |\r\n
  \   |                       |            compound conditions (`And`, `Or`)    |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Logging                |            pure periodic (any monoid)           |\r\n
  \   |                       |            periodic with `IO`                   |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Constrainted           |            constrained initialization           |\r\n
  \   |optimization           |            constrained selection                |\r\n
  \   |                       |            death penalty                        |\r\n
  \   |-----------------------+-------------------------------------------------|\r\n
  \   |Multiobjective         |            NSGA-II                              |\r\n
  \   |optimization           |            constrained NSGA-II                  |\r\n\r\n\r\n`^`
  non-adaptive: any function which doesn't depend on generation number\r\n\r\nThere
  are other possible encodings which are possible to represent\r\nwith list-like genomes
  (`type Genome a = [a]`):\r\n\r\n  * permutation encodings (`a` being an integer,
  or other `Enum` type)\r\n  * tree encodings (`a` being a subtree type)\r\n  * hybrid
  encodings (`a` being a sum type)\r\n\r\n\r\nContributing\r\n------------\r\n\r\nThere
  are many ways you can help developing the library:\r\n\r\n  * I'm not a native speaker
  of English. If you are, please proof-read\r\n    and correct the comments and the
  documentation.\r\n\r\n  * Moo is designed with possibility of implementing custom
  genetic\r\n    operators in mind. If you write new operators (`SelectionOp`,\r\n
  \   `CrossoverOp`, `MutationOp`) or replacement strategies\r\n    (`StepGA`), consider
  contributing them to the library.\r\n    In the comments please give a reference
  to an academic\r\n    work which introduces or studies the method. Explain when
  or why\r\n    it should be used. Provide tests and examples if possible.\r\n\r\n
  \ * Implementing some methods (like adaptive genetic algorithms) will\r\n    require
  to change some library types. Please discuss your approach\r\n    first.\r\n\r\n
  \ * Contribute examples. Solutions of known problems with known optima\r\n    and
  interesting properties. Try to avoid examples which are too\r\n    contrived.\r\n\r\n\r\n\r\nAn
  example\r\n----------\r\n\r\nMinimizing [Beale's function][test-functions] (optimal
  value f(3, 0.5) = 0):\r\n\r\n```haskell\r\nimport Moo.GeneticAlgorithm.Continuous\r\n\r\n\r\nbeale
  :: [Double] -> Double\r\nbeale [x, y] = (1.5 - x + x*y)**2 + (2.25 - x + x*y*y)**2
  + (2.625 - x + x*y*y*y)**2\r\n\r\n\r\npopsize = 101\r\nelitesize = 1\r\ntolerance
  = 1e-6\r\n\r\n\r\nselection = tournamentSelect Minimizing 2 (popsize - elitesize)\r\ncrossover
  = unimodalCrossoverRP\r\nmutation = gaussianMutate 0.25 0.1\r\nstep = nextGeneration
  Minimizing beale selection elitesize crossover mutation\r\nstop = IfObjective (\\values
  -> (minimum values) < tolerance)\r\ninitialize = getRandomGenomes popsize [(-4.5,
  4.5), (-4.5, 4.5)]\r\n\r\n\r\nmain = do\r\n  population <- runGA initialize (loop
  stop step)\r\n  print (head . bestFirst Minimizing $ population)\r\n```\r\n\r\nFor
  more examples, see [examples/](examples/) folder.\r\n\r\n[test-functions]: http://en.wikipedia.org/wiki/Test_functions_for_optimization\r\n"
description-type: markdown
hash: 0c4be1a01548db785dcbbe6b8c98579dbf03c5b3b536e0420dce3ba6a61337cb
homepage: http://www.github.com/astanin/moo/
latest: '1.2'
license-name: BSD-3-Clause
maintainer: Sergey Astanin <s.astanin@gmail.com>
synopsis: Genetic algorithm library
test-bench-deps:
  HUnit: '>=0'
  MonadRandom: '>=0'
  array: '>=0'
  base: <5
  containers: '>=0'
  gray-code: '>=0.2.1'
  mersenne-random-pure64: '>=0'
  moo: '>=0'
  mtl: '>=0'
  parallel: '>=3.0'
  random: '>=0.1'
  random-shuffle: '>=0.0.2'
  time: '>=0'
  vector: '>=0'
