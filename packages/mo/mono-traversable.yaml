all-versions:
- 0.5.0
- 0.6.0
- 0.6.0.1
- 0.6.0.2
- 0.6.0.3
- 0.6.0.4
- 0.6.1
- 0.6.2
- 0.6.3
- 0.7.0
- 0.8.0
- 0.8.0.1
- 0.9.0
- 0.9.0.1
- 0.9.0.2
- 0.9.1
- 0.9.2
- 0.9.2.1
- 0.9.3
- 0.10.0
- 0.10.0.1
- 0.10.1
- 0.10.1.1
- 0.10.2
- 1.0.0
- 1.0.0.1
- 1.0.1
- 1.0.1.1
- 1.0.1.2
- 1.0.1.3
- 1.0.2
- 1.0.2.1
- 1.0.4.0
- 1.0.5.0
- 1.0.6.0
- 1.0.7.0
- 1.0.8.0
- 1.0.8.1
- 1.0.9.0
- 1.0.10.0
- 1.0.11.0
- 1.0.12.0
- 1.0.13.0
- 1.0.15.0
- 1.0.15.1
- 1.0.15.2
- 1.0.15.3
- 1.0.17.0
author: Michael Snoyman, John Wiegley, Greg Weber
basic-deps:
  base: '>=4.13 && <5'
  bytestring: '>=0.9'
  containers: '>=0.5.8'
  hashable: '>=0'
  split: '>=0.2'
  text: '>=0.11'
  transformers: '>=0.3'
  unordered-containers: '>=0.2'
  vector: '>=0.10'
  vector-algorithms: '>=0.6'
changelog: |
  # ChangeLog for mono-traversable

  ## 1.0.17.0

  * Added `inits`, `tails`, `initTails` to class `IsSequence` with tests and benchmarks for `initTails`.
  * Improved ghc benchmark flags.
  * Removed extraneous constraint `IsSequence` from `initMay`.

  ## 1.0.16.0

  * Added MonoPointed instance for bytestring Builder
    [#219](https://github.com/snoyberg/mono-traversable/pull/219#pullrequestreview-1879553961)

  ## 1.0.15.3

  * Compile with GHC 9.2 (`Option` removed from `base-4.16`)
    [#199](https://github.com/snoyberg/mono-traversable/issues/199)

  ## 1.0.15.2

  * Support transformers 0.6.0.0 [#196](https://github.com/snoyberg/mono-traversable/issues/196)
  * Compile with GHC 9 [#193](https://github.com/snoyberg/mono-traversable/pull/193)

  ## 1.0.15.1

  * Remove whitespace after `@` in as-patterns for GHC HEAD [#186](https://github.com/snoyberg/mono-traversable/pull/186)

  ## 1.0.15.0

  * Added `toNonEmpty` to `Data.NonNull`
    [#185](https://github.com/snoyberg/mono-traversable/pull/185)

  ## 1.0.14.0
  * Added `WrappedMono` to `Data.MonoTraversable`
    [#182](https://github.com/snoyberg/mono-traversable/pull/182)

  ## 1.0.13.0
  * Added `WrappedPoly` to `Data.MonoTraversable`
    [#180](https://github.com/snoyberg/mono-traversable/pull/180)

  ## 1.0.12.0
  * Added `filterSet` to `Data.Containers`
  * Use container specific implementations for `filterSet` and `filterMap`
    [#178](https://github.com/snoyberg/mono-traversable/pull/178)

  ## 1.0.11.0

  * Adding monomorphic instances for GHC.Generics and Data.Proxy types
    [#175](https://github.com/snoyberg/mono-traversable/issues/175)

  ## 1.0.10.0

  * Make index work on negative indices
    [#172](https://github.com/snoyberg/mono-traversable/issues/172)
    [#114](https://github.com/snoyberg/mono-traversable/issues/114)

  ## 1.0.9.0

  * Added `filterMap` to `Data.Containers`
    [#167](https://github.com/snoyberg/mono-traversable/pull/167)

  ## 1.0.8.1

  * Compat with gauge 0.1 and 0.2

  ## 1.0.8.0

  * Switch to gauge
  * Relax constraint on `singleton` to `MonoPointed`
    [#156](https://github.com/snoyberg/mono-traversable/issues/156)

  ## 1.0.7.0

  * Add `dropPrefix` and `dropSuffix` to `Data.Sequences` [#139](https://github.com/snoyberg/mono-traversable/issues/139)
  * Change `sort` implementation [#153](https://github.com/snoyberg/mono-traversable/issues/153)

  ## 1.0.6.0

  * Add `mapNonNull` function to `Data.NonNull` [#150](https://github.com/snoyberg/mono-traversable/issues/150)

  ## 1.0.5.0

  * Move `oelem` and `onotElem` into the `MonoFoldable` class [#133](https://github.com/snoyberg/mono-traversable/issues/133)
      * Change `instance MonoFoldable (Set e)` to `instance Ord e => MonoFoldable (Set e)`

  ## 1.0.4.0

  * Add `dropEnd` function to the `IsSequence` class, and a specialized implementation for `Text`

  ## 1.0.3.0

  * Add `ensurePrefix` and `ensureSuffix` functions [#141](https://github.com/snoyberg/mono-traversable/pull/141)

  ## 1.0.2.1

  * Fix test suite for foldl 1.3

  ## 1.0.2

  * `IsSequence` class: add `lengthIndex` [#127](https://github.com/snoyberg/mono-traversable/pull/127)

  ## 1.0.1.3

  * Make 'olength' for Set and Map O(1) [#125](https://github.com/snoyberg/mono-traversable/pull/125)

  ## 1.0.1.2

  * Support for GHC 8.2

  ## 1.0.1.1

  * Fix typo in rewrite rule

  ## 1.0.1

  * Add `replaceElem` and `replaceSeq` [#107](https://github.com/snoyberg/mono-traversable/pull/107)

  ## 1.0.0.1

  * Add missing export [#101](https://github.com/snoyberg/mono-traversable/pull/101)

  ## 1.0.0

  * Implement the cleanups described in [#95](https://github.com/snoyberg/mono-traversable/issues/95)
      * Split out `Data.MinLen` to `minlen` package, and have `Data.NonNull` stand on its own
      * Remove `Data.ByteVector`
      * Split out extra typeclass instances to `mono-traversable-instances`
  * Remove the `Eq` and `Ord` specific classes, and instead use rewrite rules
  * Provide the `Data.MonoTraversable.Unprefixed` module
  * Generalize `unwords` and `unlines` [#87](https://github.com/snoyberg/mono-traversable/pull/87)
  * Add `tailMay` and `initMay` [#89](https://github.com/snoyberg/mono-traversable/issues/89)

  ## 0.10.2

  * Add `delete` and `deleteBy` methods to EqSequence [#94](https://github.com/snoyberg/mono-traversable/pull/94)

  ## 0.10.1.1

  * Remove unneeded INLINEs [#90](https://github.com/snoyberg/mono-traversable/issues/90)

  ## 0.10.1

  * Allow comonad-5 [#86](https://github.com/snoyberg/mono-traversable/issues/86)

  ## 0.10.0.1

  * Instance for Data.Sequence.Seq is incorrect. [#83](https://github.com/snoyberg/mono-traversable/issues/83)

  ## 0.10.0

  * Remove `Functor` instance for `MinLen` [#82](https://github.com/snoyberg/mono-traversable/issues/82)

  ## 0.9.3

  * Added `intercalate`, `splitWhen`, `splitElem`, and `splitSeq` [#80](https://github.com/snoyberg/mono-traversable/pull/80)

  ## 0.9.2.1

  * Tweak test suite for 32-bit systems [#78](https://github.com/snoyberg/mono-traversable/issues/78)

  ## 0.9.2

  * MonoComonad

  ## 0.9.1

  * Fill in missing Mono\* instances [#72](https://github.com/snoyberg/mono-traversable/pull/72)

  ## 0.9.0.1

  * Documentation improvements

  ## 0.9.0

  * Better fixity for mlcons [#56](https://github.com/snoyberg/mono-traversable/issues/56)

  ## 0.8.0.1

  README updates

  ## 0.8.0

  A new MonoFoldableEq class that takes `elem` and `notElem` from `EqSequence`.
  `EqSequence` now inherits from `MonoFoldableEq`.

  For most users that do not define instances this should not be a breaking change.
  However, any instance of `EqSequence` now needs to define `MonoFoldableEq`.


  ## 0.7.0

  * Work on better polymorphic containers
      * Rename `mapKeysWith` to `omapKeysWith`
      * Add new class `BiPolyMap`
      * Add `keys` to `IsSet`
      * New class `HasKeysSet`
  * Added `index`, `indexEx` and `unsafeIndex`.
  * Added `sortOn`
changelog-type: markdown
description: "mono-traversable\n================\n\nType classes for mapping, folding,
  and traversing monomorphic and polymorphic containers.\nHaskell is good at operating
  over polymorphic containers such as a list `[a]`.\nA monomorphic container is one
  such as Text which has a type `Text` that does not expose a type variable for the
  underlying characters.\n\nmono-traversable also adds\n\n  * `IsSequence`, etc for
  operating over sequential data types\n  * `IsSet`, `IsMap`, etc for unifying set
  and map APIs\n  * `NonNull` for making partial functions (head, tail) total\n\nIn
  addition to this package, the\n[mono-traversable-instances](https://www.stackage.org/package/mono-traversable-instances)\npackage
  provides a number of orphan instances.\n\n\nUsing Typeclasses\n-----------------\n\nThere
  are 2 use cases for mono-traversable: application authors and library authors.\n\n###
  Library authors\n\nAs a library author, if you want to allow a user to pass in a
  `Text` or a `String`,\nthen you need to expose an API with a mono-traversable typeclass.\nYou
  should think twice about using mono-traversable though because\n\n* Using Typeclasses
  makes type inference more difficult. It is usually better to force the user to give
  a `Text`. Another option is to just have multiple APIs.\n* If you are operating
  on polymorphic structures in which the normal typeclasses suffice, you should just
  use them from base. On the other hand, even if you are using polymorphic containers
  you may want to leverage `IsSequence` or `MinLen`.\n\n### Application authors\n\nAs
  an application author, you should consider using classy-prelude, which leans heavily
  on mono-traversable.\n\nWhen writing your own function signatures, you should default
  to making them concrete: if you are actually using a list, then make your function
  take a list rather than an `IsSequence`. This will improve type inference, error
  messages, and make your code easier to understand. When you decide to use a `Vector`
  instead of a list, change the type signature to use a `Vector`. When you actually
  need a function to both accept a `Vector` and a list, it is easy to change the function
  signature to the more abstract typeclasses that you require.\n\n\nStandard Typeclasses\n--------------------\n\nin
  the upcoming GHC 7.10, using `Functor`, `Foldable`, and `Traversable` will become
  common-place. This means that rather than using `List.map`, `Vector.map`, etc, the
  map from the prelude will work on all data types that are a Functor. Of course,
  you can already do this now using `fmap`.\n\nFor a Haskeller, it is important to
  understand `Functor`, `Applicative`, `Monad`, `Foldable`, and `Monoid`: these are
  encountered in every day code. For mono-traversable, it is most important to understand
  [Foldable](https://www.haskell.org/haskellwiki/Typeclassopedia#Foldable).\n\nmono-traversable
  Typeclasses\n----------------------------\n\n### MonoFunctor\n\nSame as Functor,
  but cannot change the type.\n\n``` haskell\ntype family   Element mono\ntype instance
  Element Text = Char\ntype instance Element [a] = a\n```\n\nElement is a type family.
  This tells the compiler to substitute `Char` for `Element Text`.\nWe can create
  this rule for every monomorphic container we want to operate on such as `Text`\nAnd
  we can also create it for a polymorphic container.\n\nNow lets compare MonoFunctor
  to the normal Functor.\n\n``` haskell\nfmap :: Functor f => (a -> b) -> f a -> f
  b\nomap :: MonoFunctor mono => (Element mono -> Element mono) -> mono -> mono\n```\n\nSo
  there is no type-change from `a` to `b`, the contained type must stay the same (`Element
  mono -> Element mono`).\n\nHere is the MonoFunctor typeclass definition\n\n``` haskell\nclass
  MonoFunctor mono where\n    omap :: (Element mono -> Element mono) -> mono -> mono\n
  \   default omap :: (Functor f, Element (f a) ~ a, f a ~ mono) => (a -> a) -> f
  a -> f a\n    omap = fmap\n```\n\nAnd we can write some instances\n\n``` haskell\ninstance
  MonoFunctor T.Text where\n    omap = T.map\n\ninstance MonoFunctor [a]\n```\n\nThe
  list definition was able to default to using `fmap` so no body was needed.\n\n\n###
  MonoFoldable\n\nSame as Foldable, but also operates over monomorphic containers.\n\nMonoFoldable
  is the heart of the power of mono-traversable (and arguably the package should be
  named mono-foldable) because anything that can be done with `Foldable` can be done
  with `MonoFoldable`.\nThe reason why is that a monomorphic container can never change
  its type.\nSo `omap` is a restricted `fmap`.\nHowever, folding generates a *new*
  structure, so we have no such concerns.\nIn the classy-prelude package, map is set
  to `fmap` and omap must be used separately.\nHowever, foldMap is set to just use
  the mono-traversable version: `ofoldMap`\n\n``` haskell\nclass Foldable t where\n
  \ foldMap :: Monoid m => (a -> m) -> t a -> m\n  foldr   :: (a -> b -> b) -> b ->
  t a -> b\n  ...\n\nclass MonoFoldable mono where\n  ofoldMap :: Monoid m => (Element
  mono -> m) -> mono -> m\n  ofoldr :: (Element mono -> b -> b) -> b -> mono -> b\n
  \ ...\n```\n\nThere are additional Typeclasses which build on MonoFoldable\n\n```
  haskell\nclass (MonoFoldable mono, Monoid mono) => MonoFoldableMonoid mono where\n
  \   oconcatMap :: (Element mono -> mono) -> mono -> mono\n\nclass (MonoFoldable
  mono, Ord (Element mono)) => MonoFoldableOrd mono where\n    maximumEx :: mono ->
  Element mono\n    minimumEx :: mono -> Element mono\n\nclass MonoPointed mono where\n
  \   opoint :: Element mono -> mono\n```\n\nMonoPointed abstracts over the concept
  of a singleton. For any `Applicative`, `opoint` is the same as `pure` from Applicative.
  Since mono-traversable did not bother with a `MonoApplicative` typeclass, we added
  `MonoPointed` to still have the functionality of `pure`.\n\n\n### MonoTraversable\n\n`MonoTraversable`
  is `Traversable` for monomorphic containers, just as\n`MonoFunctor` is `Functor`
  for monomorphic containers.\n\n``` haskell\nclass (Functor t, Foldable t) => Traversable
  t where\n  traverse  :: Applicative f => (a -> f b) -> t a -> f (t b)\n  ...\n\nclass
  (MonoFunctor mono, MonoFoldable mono) => MonoTraversable mono where\n  otraverse
  :: Applicative f => (Element mono -> f (Element mono)) -> mono -> f mono\n  ...\n```\n\n\n###
  Containers\n\n* SetContainer: unifies operations across `Set` and `Map`\n* PolyMap:
  differenceMap and intersectionMap\n* IsSet: unifies operations across different
  `Set`s\n* IsMap: unifies operations across different `Map`s\n* MonoZip: zip operations
  on MonoFunctors.\n\nNote that because `Set` is not a Functor (and therefore neither
  a MonoFunctor nor MonoTraversable), one must use `setFromList` and `setToList` to
  `omap` or `otraverse` over the elements of a `Set`.\n\n\n### Sequences\n\n`IsSequence`
  contains list-like operations.\n\n``` haskell\n-- | Sequence Laws:\n--\n-- > fromList
  . otoList = id\n-- > fromList (x <> y) = fromList x <> fromList y\n-- > otoList
  (fromList x <> fromList y) = x <> y\nclass (Monoid seq, MonoTraversable seq, SemiSequence
  seq, MonoPointed seq) => IsSequence seq where\n    fromList :: [Element seq] ->
  seq\n    break :: (Element seq -> Bool) -> seq -> (seq, seq)\n    ...\n```\n\nThe
  laws state that an IsSequence is a list-like (sequential) structure.\n\n* an `IsSequence`
  is not just something that can be converted to a list (`MonoFoldable`), but something
  that can be created from a list.\n* Converting to and from a list does not change
  the `IsSequence`, and it doesn't even change the `IsSequence` if you do the conversions
  on chunks of the `IsSequence`.\n\nSemiSequence is required by IsSequence. It is
  conceptually the same as IsSequence, but contains operations that can also be used
  on a `NonEmpty` or a `MinLen` (which are SemiGroups) because they do not reduce
  the number of elements in the sequence.\n\n\nThere are some more typeclasess that
  build on top of IsSequence.\n\n``` haskell\nclass (IsSequence seq, Eq (Element seq))
  => EqSequence seq where\nclass (EqSequence seq, MonoFoldableOrd seq) => OrdSequence
  seq where\nclass (IsSequence t, IsString t, Element t ~ Char) => Textual t where\n
  \   words :: t -> [t]\n    unwords :: [t] -> t\n    lines :: t -> [t]\n    unlines
  :: [t] -> t\n    toLower :: t -> t\n    toUpper :: t -> t\n    ...\n```\n\nTextual
  functions are always safe to use with Unicode (it is possible to misuse other functions
  that operate on individual characters).\n\n\n### MinLen\n\nDid you notice minimumEx
  and maximumEx from above? Ex stands for 'Exception'.\nAn exception will occur if
  you call minimumEx on an empty list.\nMinLen is a tool to guarantee that this never
  occurs, and instead to prove that there are one or more elements in your list.\n\n```
  haskell\nminimumEx :: MonoFoldable mono => mono -> Element mono\n\n-- | like Data.List,
  but not partial on a MonoFoldable\nminimum :: MonoFoldableOrd mono => MinLen (Succ
  nat) mono -> Element mono\nminimum = minimumEx . unMinLen\n\nnewtype MinLen nat
  mono = MinLen { unMinLen :: mono }\n    deriving (Eq, Ord, Read, Show, Data, Typeable,
  Functor)\n\n-- Type level naturals\ndata Zero = Zero\ndata Succ nat = Succ nat\n```\n\nThe
  `minimum` function exposed from `MinLen` is very similar to `minimumEx`, but has
  a `MinLen` wrapper that ensures it will never throw an exception.\n`MinLen` is a
  newtype with a phantom type that contains information about the minimum number of
  elements we know are in the structure. That is done through type-level Peano numbers.\n\nWhat
  do we know about the input to minimum? If nat is Zero, then it reduces to `MinLen
  (Succ Zero) mono`. Succ means successor, and the successor of 0 is 1, so the data
  structure has a minimum length of 1.\n\nLets see this in practice\n\n``` haskell\n>
  minimum []\n<interactive>:3:9:\n    Couldn't match expected type ‘MinLen (Succ nat0)
  mono’\n                with actual type ‘[t0]’\n\n\n> minimum [1,2,3]\n-- same error
  as above\n\n> minimum (toMinList (3 :| [2,1]))\n1\n> minimum (3 `mlcons` toMinLenZero
  [2,1])\n1\n```\n\nHere we used Data.List.NonEmpty combined with toMinList or we
  just work with a List and prove through the usage of cons that it has more than
  one element.\n\n\n\nAdding instances\n----------------\n\nIf you have a _polymorphic_
  data type which is a member of one of the relevant typeclasses ([Functor](http://hackage.haskell.org/package/base/docs/Data-Functor.html),\n[Foldable](http://hackage.haskell.org/package/base/docs/Data-Foldable.html),\n[Traversable](http://hackage.haskell.org/package/base/docs/Data-Traversable.html)),
  it's quite easy to add an instance for\n[MonoFunctor](https://hackage.haskell.org/package/mono-traversable/docs/Data-MonoTraversable.html#t:MonoFunctor),
  [MonoFoldable](https://hackage.haskell.org/package/mono-traversable/docs/Data-MonoTraversable.html#t:MonoFoldable)
  or [MonoTraversable](https://hackage.haskell.org/package/mono-traversable/docs/Data-MonoTraversable.html#t:MonoTraversable).\n\nYou
  just have to declare the proper type instance:\n\n``` haskell\n{-# LANGUAGE TypeFamilies
  \        #-}\n\ntype instance Element (CustomType a) = a\n```\n\nAnd then, we can
  use the default implementation to declare instances:\n\n``` haskell\ninstance MonoFunctor
  (CustomType a)\ninstance MonoFoldable (CustomType a)\ninstance MonoTraversable (CustomType
  a)\n```\n    \nNow you are ready to use ```CustomType a``` with the functions defined
  in this package.\n\n**Note**: if your type is a _monomorphic_ container without
  the proper typeclasses, then you will have to provide an implementation rather than
  using the default. However, this should be fairly simple, as can be seen [in the
  code](https://github.com/snoyberg/mono-traversable/blob/d85e4ed3c11afec2d49c0f4fe2812122a279e5d4/src/Data/MonoTraversable.hs#L428)\n\n\nmono-traversable
  versus lens Traversal\n--------------------------------------\n\nlens is a library
  with a lot of functionality covering a variety of patterns. One piece of functionality
  it exposes is `Fold` and `Traversal` which can also be used to deal with monomorphic
  containers.\n\nYou could prefer mono-traversable to using this part of lens because\n\n*
  Familiar API - If you know `Foldable`, you can use `MonoFoldable` just as easily\n*
  mono-traversable's typeclass based approach means many methods are included in the
  class but can be given specialised optimized implementations\n* You don't explicitly
  pass around the `Traversal`\n\nThe last point is also a point of inflexibility and
  points to a use case where you could prefer using a lens `Traversal`. mono-traversable
  treats `ByteString` as a sequence of bytes. If you want to treat it as both bytes
  and characters, mono-traversable would require a newtype wrapper around `ByteString`,
  whereas a lens `Traversal` would use a different traversal function.\n\nmono-traversable
  is only an alternative for `Fold` and `Traversal`, not for `Lens`, `Prism`, `Iso`,
  `Getter`, `Setter`, `Review`, or `Equality`.\n\n\n\n\n[![Build Status](https://secure.travis-ci.org/snoyberg/mono-traversable.png)](http://travis-ci.org/snoyberg/mono-traversable)\n"
description-type: markdown
hash: f62b52e93bb9ed1b9ff4e026993c18eed08ec202bc4d30aa7245279ac81c4174
homepage: https://github.com/snoyberg/mono-traversable#readme
latest: 1.0.17.0
license-name: MIT
maintainer: michael@snoyman.com
synopsis: Type classes for mapping, folding, and traversing monomorphic containers
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  foldl: '>=0'
  gauge: '>=0'
  hspec: '>=0'
  mono-traversable: '>=0'
  mwc-random: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
