homepage: http://github.com/bgamari/monoidal-containers
changelog-type: markdown
hash: 124941d70df5e2928b4c6db605a1d0464e68c2c6b02e426db24a40194d43821d
test-bench-deps: {}
maintainer: ben@smart-cactus.org
synopsis: Containers with monoidal accumulation
changelog: "# Monoidal containers\n\n# 0.6.2.0\n\n  * [Remove cyclic definition of
  `!?`](https://github.com/bgamari/monoidal-containers/pull/88)\n  * [Bump lens and
  hashable version bounds](https://github.com/bgamari/monoidal-containers/pull/87)\n\n#
  0.6.1.0\n\n  * Drop official support for GHC 7.8.4\n  * Require containers 0.5.9
  or greater.\n  * Support lens-5, semialign-1.2, and aeson-2\n  * MonoidalMap and
  MonoidalMap.Strict: Add several functions added to Data.Map since 0.5 up to 0.5.9:\n
  \   `take`, `drop`, `splitAt`, `lookupMin`, `lookupMax`, `restrictKeys`,\n    `withoutKeys`,
  `fromDescList`,  `fromDescListWith`, `fromDescListWithKey`,\n    `fromDistinctDescList`,
  `takeWhileAntitone`, `dropWhileAntitone`,\n    `spanAntitone`, and `traverseMaybeWithKey`\n
  \ * Add instances of `Filterable` and `Witherable` from the `witherable` package\n
  \ * Add `Control.Lens.Wrapped.Rewrapped` instances.\n  \n# 0.6.0.1\n\n  * Support
  semialign-1.1\n\n# 0.6\n\n  * Deprecates 0.5.* and reverts behavior of fromList,
  insert, mapKeys, etc. to match behavior in Data.Map. The only difference in behavior
  between Data.Map.Monoidal.MonoidalMap and Data.Map.Map is now the semigroup and
  monoid instances (as was the case in 0.4 and earlier).\n  * Fix the argument order
  of Data.HashMap.Monoidal.insert\n  * Remove Data.HashMap.Monoidal.insertOrReplace
  as it is now identical to Data.HashMap.Monoidal.insert\n  * Added Data.HashMap.Monoidal.insertWith
  and Data.HashMap.Monoidal.fromListWith\n\n# 0.5.0.1\n\n  * Add a flag, `split-these`,
  to select whether to use the new \"these\"/\"semialign\" packages or the older combined
  \"these\" package.\n  * Add default.nix to make it easier to hack on this package
  in nix\n\n# 0.5.0.0\n\n  * Added Data.IntMap.Monoidal and Data.IntMap.Monoidal.Strict,
  corresponding to Data.IntMap and Data.IntMap.Strict\n  * Make `fromList`, `insert`,
  and `mapKeys` from `Data.Map.Monoidal` and `Data.Map.Monoidal.Strict` require `Semigroup`
  on values to properly capture monoidal behavior instead of reverting to the left-biased
  semantics of `Data.Map`.\n  * Add Align instances and, for sufficiently recent versions
  of `these`, Semialign instances\n  * Support `these` 0.8.0\n\n# 0.4.0.0\n\nGeneral
  changes:\n\n * Added support for `unordered-containers < 0.2.8`\n * Added many more
  functions in `Data.Map.[Strict.]Monoid`\n\nWeakened `Monoid` constraints to `Semigroup`
  whenever possible as enabled by the\n[Semigroup-Monoid\nproposal](https://prime.haskell.org/wiki/Libraries/Proposals/SemigroupMonoid).\nThis
  includes,\n\n * the `Monoid` instance of `MonoidalHashMap` and `MonoidalMap`\n *
  the `IsList` instance of `MonoidalHashMap` and `MonoidalMap`\n * the `modifyDef`
  and `mapKeys` functions of `MonoidalHashMap`\n\n\n# 0.3 and earlier\n\nPre-history\n"
basic-deps:
  newtype: '>=0.2 && <0.3'
  semialign: '>=1 && <1.3'
  these: '>=1 && <1.2'
  witherable: '>=0.4 && <0.5'
  base: '>=4.7 && <4.16'
  unordered-containers: '>=0.2 && <0.3'
  containers: '>=0.5.9 && <0.7'
  lens: '>=4.4 && <5.2'
  hashable: '>=1.2 && <1.5'
  deepseq: '>=1.3 && <1.5'
  aeson: '>=1.0 && <2.1'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.2.5
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.1.0
- 0.4.0.0
- '0.6'
- 0.6.0.1
- 0.6.1.0
- 0.6.2.0
author: Ben Gamari
latest: 0.6.2.0
description-type: haddock
description: |-
  Containers with merging via monoidal accumulation. The 'Monoid' instances
  provided by the @containers@ and @unordered-containers@ packages merge
  structures in a left-biased manner instead of using the underlying monoidal
  structure of the value.

  This package wraps the types provided by these packages, but provides @Monoid@
  instances implemented in terms of the value type's 'mappend'. For instance,
  the @Monoid@ @Map@ instance looks like,

  @
  instance (Ord k, Semigroup a) => Monoid (MonoidalMap k a)
  @
license-name: BSD-3-Clause
