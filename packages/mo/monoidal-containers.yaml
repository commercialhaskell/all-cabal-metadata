homepage: http://github.com/bgamari/monoidal-containers
changelog-type: markdown
hash: 5e5d2c0b28fb9e2ee1f19d34e2925f687d31b7daeb72d970ba176c95a94a17f5
test-bench-deps: {}
maintainer: ben@smart-cactus.org
synopsis: Containers with monoidal accumulation
changelog: |
  # Monoidal containers

  # 0.6.0.1

    * Support semialign-1.1

  # 0.6

    * Deprecates 0.5.* and reverts behavior of fromList, insert, mapKeys, etc. to match behavior in Data.Map. The only difference in behavior between Data.Map.Monoidal.MonoidalMap and Data.Map.Map is now the semigroup and monoid instances (as was the case in 0.4 and earlier).
    * Fix the argument order of Data.HashMap.Monoidal.insert
    * Remove Data.HashMap.Monoidal.insertOrReplace as it is now identical to Data.HashMap.Monoidal.insert
    * Added Data.HashMap.Monoidal.insertWith and Data.HashMap.Monoidal.fromListWith

  # 0.5.0.1

    * Add a flag, `split-these`, to select whether to use the new "these"/"semialign" packages or the older combined "these" package.
    * Add default.nix to make it easier to hack on this package in nix

  # 0.5.0.0

    * Added Data.IntMap.Monoidal and Data.IntMap.Monoidal.Strict, corresponding to Data.IntMap and Data.IntMap.Strict
    * Make `fromList`, `insert`, and `mapKeys` from `Data.Map.Monoidal` and `Data.Map.Monoidal.Strict` require `Semigroup` on values to properly capture monoidal behavior instead of reverting to the left-biased semantics of `Data.Map`.
    * Add Align instances and, for sufficiently recent versions of `these`, Semialign instances
    * Support `these` 0.8.0

  # 0.4.0.0

  General changes:

   * Added support for `unordered-containers < 0.2.8`
   * Added many more functions in `Data.Map.[Strict.]Monoid`

  Weakened `Monoid` constraints to `Semigroup` whenever possible as enabled by the
  [Semigroup-Monoid
  proposal](https://prime.haskell.org/wiki/Libraries/Proposals/SemigroupMonoid).
  This includes,

   * the `Monoid` instance of `MonoidalHashMap` and `MonoidalMap`
   * the `IsList` instance of `MonoidalHashMap` and `MonoidalMap`
   * the `modifyDef` and `mapKeys` functions of `MonoidalHashMap`


  # 0.3 and earlier

  Pre-history
basic-deps:
  newtype: '>=0.2 && <0.3'
  semialign: '>=1 && <1.2'
  these: '>=1 && <1.2'
  base: '>=4.7 && <4.16'
  unordered-containers: '>=0.2 && <0.3'
  semigroups: '>=0.18 && <0.20'
  containers: '>=0.5 && <0.7'
  lens: '>=4.4 && <5'
  hashable: '>=1.2 && <1.4'
  deepseq: '>=1.3 && <1.5'
  aeson: '>=1.0 && <1.5'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.2.5
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.1.0
- 0.4.0.0
- '0.6'
- 0.6.0.1
author: Ben Gamari
latest: 0.6.0.1
description-type: haddock
description: |-
  Containers with merging via monoidal accumulation. The 'Monoid' instances
  provided by the @containers@ and @unordered-containers@ packages merge
  structures in a left-biased manner instead of using the underlying monoidal
  structure of the value.

  This package wraps the types provided by these packages, but provides @Monoid@
  instances implemented in terms of the value type's 'mappend'. For instance,
  the @Monoid@ @Map@ instance looks like,

  @
  instance (Ord k, Semigroup a) => Monoid (MonoidalMap k a)
  @
license-name: BSD-3-Clause
