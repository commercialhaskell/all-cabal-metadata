homepage: https://morpheusgraphql.com
changelog-type: markdown
hash: 6a2691a7cf24bd69c8fc77645ddd23099840c04d2dce7b0557f10d18f70d2b9f
test-bench-deps: {}
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL CLI
changelog: |
  # Changelog

  see latest changes on [Github](https://github.com/morpheusgraphql/morpheus-graphql/releases)
basic-deps:
  morpheus-graphql-server: '>=0.24.0 && <0.25.0'
  bytestring: '>=0.10.4 && <0.12.0'
  base: '>=4.7.0 && <5.0.0'
  unordered-containers: '>=0.2.8 && <0.3.0'
  text: '>=1.2.3 && <1.3.0'
  filepath: '>=1.1.0 && <1.5.0'
  morpheus-graphql-client: -any
  morpheus-graphql-core: '>=0.24.0 && <0.25.0'
  containers: '>=0.4.2.1 && <0.7.0'
  morpheus-graphql-code-gen-utils: '>=0.24.0 && <0.25.0'
  relude: '>=0.3.0 && <2.0.0'
  file-embed: '>=0.0.10 && <1.0.0'
  prettyprinter: '>=1.7.0 && <2.0.0'
  optparse-applicative: '>=0.12.0 && <0.18.0'
  morpheus-graphql-code-gen: -any
  Glob: '>=0.7.0 && <1.0.0'
  template-haskell: '>=2.0.0 && <3.0.0'
  yaml: '>=0.8.32 && <1.0.0'
all-versions:
- 0.18.0
- 0.19.0
- 0.19.1
- 0.19.2
- 0.19.3
- 0.20.0
- 0.20.1
- 0.21.0
- 0.22.0
- 0.22.1
- 0.23.0
- 0.24.0
author: Daviti Nalchevanidze
latest: 0.24.0
description-type: markdown
description: |
  # Morpheus GraphQL Code Gen

  Morpheus GraphQL Code Gen helps you to generate GraphQL APIs .

  Morpheus GraphQL CLI is still in an early stage of development, so any feedback is more than welcome, and we appreciate any contribution!
  Just open an issue here on GitHub, or join [our Slack channel](https://morpheus-graphql-slack-invite.herokuapp.com/) to get in touch.

  ## Getting Started

  Generating dummy Morpheus Api from `schema.gql`

  ```ssh
  morpheus build src/*.gql --root src
  ```

  _src/schema.gql_

  ```gql
  type Query {
    deity(name: String!): Deity
    deities: [Deity!]!
  }

  """
  deity description
  """
  type Deity {
    """
    name description
    """
    name: String!
    power: String
  }
  ```

  _src/Schema.hs_

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE DeriveAnyClass #-}
  {-# LANGUAGE DeriveGeneric #-}
  {-# LANGUAGE DuplicateRecordFields #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE TypeFamilies #-}

  module Schema where

  import Data.Data (Typeable)
  import Data.Map (empty, fromList)
  import Data.Morpheus.Kind (TYPE)
  import Data.Morpheus.Types
  import Data.Text (Text)
  import GHC.Generics (Generic)

  ---- GQL Query -------------------------------
  data Query m = Query
    { queryDeity :: Arg "name" Text -> m (Maybe (Deity m)),
      queryDeities :: m [Deity m]
    }
    deriving (Generic)

  instance (Typeable m) => GQLType (Query m) where
    type KIND (Query m) = TYPE

  ---- GQL Deity -------------------------------
  data Deity m = Deity
    { deityName :: m Text,
      deityPower :: m (Maybe Text)
    }
    deriving (Generic)

  instance (Typeable m) => GQLType (Deity m) where
    type KIND (Deity m) = TYPE
    description _ = Just "\ndeity description\n"
    getDescriptions _ = fromList [("name", "\n  name description\n  ")]
  ```
license-name: BSD-3-Clause
