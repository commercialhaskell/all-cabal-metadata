all-versions:
- 0.2.0.0
- 0.3.0
- 0.4.0
author: Oskar WickstrÃ¶m
basic-deps:
  base: '>=4.9 && <5'
  motor: '>=0.4.0'
  template-haskell: '>=2.11.1.0'
  text: '>=0'
changelog: |
  * 0.4.0 (pending)
    - Use row-types 0.3.0 or higher, and the `Overwrite` construct
      rather than `Modify`
  * 0.3.0
    - Use row-types instead of CTRex.
    - Rename `:->` operator to `:=`.
    - Provide better default constraints from using `Actions`.
    - Make `Actions` a data type and use it promoted.
    - Add `Remain` action.
    - Add `get` operator, returning the current state of a named
      resource.
    - Add `update` operator, mapping an update function over the current
      state of a named resource.
  * 0.2.0.0
    - Add `motor-reflection` and `motor-diagrams` packages.
  * 0.1.1.0
    - Add `call` operation to `MonadFSM` class
  * 0.1.0.0
    - Initial version of Motor
changelog-type: markdown
description: |
  # motor-reflection

  Reflect on typeclasses following Motor FSM conventions, using Template
  Haskell.

  **This package is experimental!**

  ## Usage

  First, you need to import the reflection module and the `Event` type:

  ``` haskell
  import           Motor.FSM.Reflection
  import           Motor.FSM.Reflection.Event (Event)
  ```

  Given that your FSM typeclass follows Motor's conventions, you can
  reflect to get a list of events:

  ``` haskell
  data Open
  data Closed

  class MonadFSM m => Door (m :: Row * -> Row * -> * -> *) where
    type State m :: * -> *
    initial
      :: Name n
      -> Actions m '[n !+ State m Open] r ()
    close
      :: Name n
      -> Actions m '[n :-> State m Open !--> State m Closed] r ()
    open
      :: Name n
      -> Actions m '[n :-> State m Closed !--> State m Open] r ()
    end
      :: Name n
      -> Actions m '[n !- State m Closed] r ()

  reflectEvents ''Door "doorEvents"
  ```

  The last line, using `reflectEvents`, will define `doorEvents ::
  [Motor.FSM.Reflection.Event.Event]` at the top-level.

  ### Conventions

  * The typeclass must have an associated type (open type family) called
    `State`, parameterized by the instance, with a result of kind `* ->
    *`.
  * Each FSM event in the typeclass must have a return type of the
    `Actions` type alias, listing the additions, deletions, and
    transitions of named resources.

  These conventions may be relaxed in the future. This package is new
  and experimental.

  ## License

  Mozilla Public License Version 2.0, see `LICENSE` file in each
  package.
description-type: markdown
hash: 3f65076fe649aa07eb57677c34f79de582d8edf51f8cec06de7ce6b41996b901
homepage: ''
latest: 0.4.0
license-name: MPL-2.0
maintainer: oskar.wickstrom@gmail.com
synopsis: Reflect on Motor FSM typeclasses to obtain runtime representations
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  hspec-discover: '>=0'
  indexed: '>=0'
  motor: '>=0'
  motor-reflection: '>=0'
  row-types: '>=0'
