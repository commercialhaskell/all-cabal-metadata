homepage: https://hub.darcs.net/blamario/SCC.wiki/
changelog-type: ''
hash: 44f64399061036580acfa627c1f07f5481553f058de7d54ab9953801f75d5e86
test-bench-deps: {}
maintainer: blamario@yahoo.com
synopsis: Parallel execution of monadic computations
changelog: ''
basic-deps:
  base: <5
  transformers: '>=0.2 && <0.7'
  parallel: -any
  transformers-compat: '>=0.3 && <0.8'
all-versions:
- '0.5'
- 0.5.1
- 0.5.2
- '0.7'
- 0.7.1
- 0.7.1.1
- 0.7.1.2
- 0.7.1.3
- 0.7.1.4
- 0.7.2
- 0.7.2.0
- 0.7.2.1
- 0.7.2.2
- 0.7.2.3
- 0.7.2.4
- 0.7.2.5
- '0.8'
author: Mario Blazevic
latest: '0.8'
description-type: markdown
description: "\nThe low-level libraries available with GHC provide two completely
  different ways to execute tasks in parallel: [par](http://hackage.haskell.org/packages/archive/parallel/1.1.0.1/doc/html/Control-Parallel.html#v:par)
  and [forkIO](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.2.0.0/Control-Concurrent.html#v%3AforkIO).
  The former can be applied to any pure computation, while the latter works only in
  the IO monad.\n\nThe purpose of the _monad-parallel_ library package is to unify
  the two approaches. For this purpose, it defines classes of monads that are capable
  of:\n\n * splitting or forking monadic computations to be performed in parallel,
  and\n * combining the results of those computations when they complete.\n\nThe way
  these classes are implemented by the IO monad (as well as any MonadIO instance)
  is different from the way they're implemented by stateless monads, but the classes
  abstract these implementation details away.\n\n## Class `MonadFork`\n\nA monad that's
  an instance of the `MonadFork` class supports method\n\n    forkExec :: MonadFork
  m => m a -> m (m a)\n\nThis function launches the argument computation in a parallel
  thread and returns a handle to it. The main thread is free to perform some other
  task and then obtain the result of the parallel computation:\n\n    task1 :: MonadFork
  m => m Int\n    task2 :: MonadFork m => m Int\n    task3 :: MonadFork m => m Int\n\n
  \   example = do handle1 <- forkExec task1\n                 handle2 <- forkExec
  task2\n                 result3 <- task3\n                 result1 <- handle1\n
  \                result2 <- handle2\n                 return (result1 + result2
  + result3)\n\n## Class `MonadParallel`\n\nA monad that's an instance of the `MonadParallel`
  class supports method\n\n    bindM2 :: MonadParallel m => (a -> b -> m c) -> m a
  -> m b -> m c\n\nThis method executes its `m a` and `m b` arguments in parallel.
  Once they're both finished, _bindM2_ runs their results through its first argument
  and returns the final result. Note that `bindM2` can be implemented using `forkExec`,
  but not vice versa.\n\nBased on this foundation, the library defines and exports
  other useful functions. These replicate the functionality of the `Control.Monad`
  module, but they execute their monadic arguments in parallel.\n\n    bindM3      ::
  MonadParallel m => (a -> b -> c -> m d) -> m a -> m b -> m c -> m d\n    liftM2
  \     :: MonadParallel m => (a -> b -> c) -> m a -> m b -> m c\n    liftM3      ::
  MonadParallel m => (a1 -> a2 -> a3 -> r) -> m a1 -> m a2 -> m a3 -> m r\n    ap
  \         :: MonadParallel m => m (a -> b) -> m a -> m b\n    sequence    :: MonadParallel
  m => [m a] -> m [a]\n    sequence_   :: MonadParallel m => [m a] -> m () \n    mapM
  \       :: MonadParallel m => (a -> m b) -> [a] -> m [b]\n    replicateM  :: MonadParallel
  m => Int -> m a -> m [a]\n    replicateM_ :: MonadParallel m => Int -> m a -> m
  ()\n\n## Links\n\n * Download and API documentation is available from [Hackage](http://hackage.haskell.org/package/monad-parallel)\n
  * Source code repository: <https://hub.darcs.net/blamario/SCC/>\n"
license-name: BSD-3-Clause
