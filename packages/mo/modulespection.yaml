all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
author: Jonathan Fischoff
basic-deps:
  base: '>=4.6 && <666'
  exceptions: '>=0.5 && <0.7'
  filepath: '>=1.3 && <1.4'
  ghc: '>=0'
  ghc-paths: '>=0.1 && <0.2'
  template-haskell: '>=2.7'
  temporary: '>=1.2 && <1.3'
  transformers: '>=0.3 && <0.4 || >=0.4 && <0.5'
changelog: ''
changelog-type: ''
description: |-
  Collect all of the declarations in a module using Template Haskell (via the GHC API).

  One can either get all the names, or just the declarations (only type declarations
  are supported right now).

  Here is a quick example:

  > import Language.Haskell.TH.Module.Magic (names)
  >
  > data Test = Test Int
  > newtype OtherTest = OtherTest Test
  >
  > someFunction :: String -> String
  > someFunction = id
  >
  > -- 'names' is Template Haskell function that will collect all of the
  > -- toplevel declaration names of the current file.
  > names >>= runIO . print >> return []

  Which will spew the following when compiling:

  > [Test,OtherTest,someFunction]

  There is also 'declarations' which can be used, for example, to make sure that all
  types have @ToJSON@/@FromJSON@ instances.

  > import Data.Aeson.TH (deriveJSON, defaultOptions)
  > import MonadUtils (concatMapM)
  > import Language.Haskell.TH.Module.Magic (declarations)
  >
  > data Test = Test Int
  > newtype OtherTest = OtherTest Test
  >
  > concatMapM (deriveJSON defaultOptions) =<< declarations

  Which will make JSON instances for Test, OtherTest and any other types
  added to the file.

  You can also do the same thing for an existing module.

  > import Data.Aeson.TH (deriveJSON, defaultOptions)
  > import MonadUtils (concatMapM)
  > import Language.Haskell.TH.Module.Magic (moduleDeclarations)
  > import Data.Monoid
  >
  > concatMapM (deriveJSON defaultOptions) =<< moduleDeclarations "Data.Monoid"

  Which will build instances for all the types in "Data.Monoid".
description-type: haddock
hash: e45c889cbd4f62a573149a7cdaa7bf34c6c252b9c4589019622648126110d51a
homepage: https://github.com/jfischoff/modulespection
latest: 0.1.2.2
license-name: BSD-3-Clause
maintainer: jonathangfischoff@gmail.com
synopsis: Template Haskell for introspecting a module's declarations
test-bench-deps: {}
