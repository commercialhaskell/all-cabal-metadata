all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.11
- 0.1.12
- 0.1.13
- '0.2'
- 0.2.0.1
- '0.3'
- 0.3.0.1
- 0.3.0.2
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.2.1
- 0.4.2.2
- 0.4.2.3
- '0.5'
- 0.5.1
- 0.5.1.1
- 0.5.1.2
- 0.5.2
- 0.5.3
- '0.6'
- 0.6.1
author: Cale Gibbard and others
basic-deps:
  base: '>=4.8 && <5'
  mtl: '>=2.2.1 && <2.3 || >=2.3.1 && <2.4'
  primitive: '>=0.6 && <0.10'
  random: '>=1.0.1 && <1.3'
  transformers: '>=0.4 && <0.7'
  transformers-compat: '>=0.4 && <0.8'
changelog: "0.6.1 (22 October 2024)\n-----------------------\n\n- Fix the potential
  for a crash in `fromListMay` (and hence also in\n  functions that use it, namely
  `fromList`, `weighted`, `weightedMay`,\n  `uniform`, and `uniformMay`). Thanks to
  @Flupp for pointing out the\n  issue and suggesting a fix.  The fix may in theory
  cause these\n  functions, extremely rarely, to output values different from the
  old\n  values for the same seed.  See\n  https://byorgey.github.io/blog/posts/2024/10/14/MonadRandom-version-bump.html\n
  \ for more information and discussion.\n\n0.6 (5 Nov 2022)\n----------------\n\n-
  Remove instances for deprecated `ErrorT` and `ListT` transformers\n- Allow building
  with `transformers-0.6` and `mtl-2.3.1`\n- Drop support for GHC 7.6 and 7.8\n\n-
  r1 (18 Dec 2022): require `base >= 4.8`\n- r2 (9 Jan 2023): require `random >= 1.0.1`\n-
  r3 (22 Feb 2023): allow `primitive-0.8`\n- r4 (12 Oct 2023): allow `primitive-0.9`,
  test on GHC 9.6 and 9.8\n\n0.5.3 (8 April 2021)\n--------------------\n\n- `StatefulGen`
  instances for `RandT`\n- Addition of `RandGen`\n- Addition of `withRandGen` and
  `withRandGen_`\n\n- r1 (28 April 2021): require `base >= 4.6`\n- r2 (9 Aug 2021):
  allow `transformers-compat-0.7`.\n- r3 (9 Aug 2022): Test with GHC 9.0-9.4\n\n0.5.2
  (24 June 2020)\n--------------------\n\n- Support for `random-1.2`.\n- Drop support
  for GHC 7.4, test with GHC 8.10.\n\n0.5.1.2 (18 Jan 2020)\n---------------------\n\n-
  Better error message when total probability sum is negative in\n  fromListMay, weightedMay,
  weighted\n\n0.5.1.1 (21 May 2018)\n---------------------\n\n- Only depend on `fail`
  package when GHC < 8.0.\n\n0.5.1 (9 February 2017)\n-----------------------\n\nRe-export
  `System.Random` from `Control.Monad.Random.{Lazy,Strict}`\nand hence also from `Control.Monad.Random`.\n\n-
  Hackage r1: allow `transformers-compat-0.6.x`.\n\n0.5 (3 January 2017)\n--------------------\n\n
  \ This release has quite a few small additions as well as a big module\n  reorganization.
  \ However, thanks to module re-exports, most existing\n  code using the library
  should continue to work with no changes; the\n  major version bump reflects the
  large reorganization and my\n  inability to 100% guarantee that existing user code
  will not break.\n\n  The biggest changes that may be of interest to users of the
  library\n  include new lazy vs strict variants of the `Rand` monad; a new\n  `MonadInterleave`
  class which is a big improvement over\n  `MonadSplit`; new `PrimMonad` instances;
  and new random selection\n  functions like `weighted`, `weightedMay`, `uniformMay`,
  *etc.*.  See\n  the list below for full details.\n\n  Although there was some discussion
  of generalizing `MonadRandom` to\n  work for a wider range of underlying generators\n
  \ (see\n  [#26](https://github.com/byorgey/MonadRandom/issues/26),\n  [#31](https://github.com/byorgey/MonadRandom/issues/31),
  and\n  [comments on this blog post](https://byorgey.wordpress.com/2016/11/16/monadrandom-0-5-and-mwc-random-feedback-wanted/)),\n
  \ I decided to punt on that for now. It seems rather complicated and\n  there\n
  \ are\n  [already good alternatives](http://hackage.haskell.org/package/random%2Dfu)
  so\n  I decided to keep things simple for this release.  I'm still open to\n  proposals
  for generalizing future releases.\n\n  Changes in 0.5 include:\n\n  - Refactor to
  reflect structure of `mtl` and `transformers` libraries.\n  - Add lazy and strict
  variants of `RandT`.\n  - Add `MonadRandom` and `MonadSplit` instances for `ListT`.\n
  \ - Add (but do not export) `unRandT` field to `RandT`.\n  - Add `MonadCont`, `MonadError`,
  `MonadRWS`, `PrimMonad`, and `MonadFail`\n    instances for `RandT`.\n  - Add `evalRandTIO`
  operation.\n  - Move `fromList` and `uniform` operations to\n    `Control.Monad.Random.Class`.\n
  \ - `fromList` now raises an error when the total weight of elements\n    is zero.\n
  \ - Generalize the type of `uniform` to work over any `Foldable`.\n  - Add new operations
  `weighted`, `weightedMay`, `fromListMay`, and\n    `uniformMay`.  `weighted` is
  like `fromList` but generalized to\n    work over any `Foldable`.  The `May` variants
  return a `Maybe`\n    result instead of raising an error.\n  - New `MonadInterleave`
  class for random monads which can interleave\n    random generation using `split`.
  \ In some ways this is similar to\n    `MonadSplit` but much more useful.\n  - Improved
  documentation.\n\n0.4.2.3 (21 April 2016)\n-----------------------\n\n  - Mark `Control.Monad.Random`
  as `Trustworthy`.\n\n0.4.2.2 (18 January 2016)\n-------------------------\n\n  -
  Allow `transformers-0.5`.\n\n0.4.2.1 (16 January 2016)\n-------------------------\n\n
  \ - Allow `transformers-compat-0.5`.\n\n0.4.2 (16 January 2016)\n-----------------------\n\n
  \ - Add `MonadPlus` and `Alternative` instances for `RandT`.\n\n0.4.1 (20 November
  2015)\n------------------------\n\n  - Remove unnecessary `Monad m` constraint from
  `liftRandT` and\n    `runRandT`.\n\n  This should again technically require a major
  version bump, but I'm\n  not doing it this time in the interest of not being super
  annoying.\n  If this breaks something for you, just yell, and I will\n  deprecate
  this version and do a proper 0.5 release.\n\n0.4 (12 May 2015)\n-----------------\n\n
  \ - Remove unnecessary `RandomGen g` constraints from `liftRandT`,\n    `liftRand`,
  `evalRandT`, `evalRand`, `runRandT`, `runRand`.\n\n  A major version bump is required
  by the PVP since the types of all\n  the above methods have changed, but this release
  is again very\n  unlikely to break any client code.\n\n0.3.0.2 (30 March 2015)\n-----------------------\n\n
  \ - Add `transformers-compat` to allow building with newer `mtl`\n\n0.3.0.1 (24
  November 2014)\n--------------------------\n\n  - Improve documentation: ranges
  are exclusive at the upper bound\n\n0.3 (4 September 2014)\n----------------------\n\n
  \ - Eta-reduce definition of `Rand`\n  - Remove unnecessary `Random a` constraint
  from types of `liftRand`\n    and `liftRandT`.\n\n  Note that a major version bump
  is required by the PVP since the\n  types of `liftRand` and `liftRandT` have changed,
  but this release\n  is highly unlikely to break any client code.\n\n0.2.0.1 (24
  August 2014)\n------------------------\n\n  - Allow building with both `transformers-0.3`
  and `0.4`.\n\n0.2 (20 August 2014)\n--------------------\n\n  - change `Rand` from
  a `newtype` to a type synonym\n  - `MonadRandom` and `MonadSplit` instances for\n
  \     - `ExceptT`\n\t  - strict variants of `StateT` and `WriterT`\n\t  - both lazy
  and strict variants of `RWST`\n  - remove unneeded `RandomGen` constraint from `MonadState
  RandT` instance\n\n0.1.13 (9 February 2014)\n------------------------\n\n  - add
  simple `uniform` function for creating a uniform distribution\n    over a list of
  values\n\n0.1.12 (30 September 2013)\n--------------------------\n\n  - add `liftRandT`
  and `liftRand` functions, for lifting explicit\n    generator-passing functions
  into `RandT` and `Rand`, respectively.\n\n0.1.11 (1 August 2013)\n----------------------\n\n
  \ - add `MonadRandom` and `MonadSplit` instances for `IdentityT`\n  - derive `MonadReader`
  and `MonadWriter` instances instead of declaring\n    them explicitly (thanks again
  to James Koppel)\n\n0.1.10 (16 July 2013)\n---------------------\n\n  - add `MonadRandom`
  and `MonadSplit` instances for `ContT`\n    (thanks to James Koppel for the patch)\n\n0.1.9
  (26 April 2013)\n---------------------\n\n  - add `MonadRandom` and `MonadSplit`
  instances for `MaybeT`\n"
changelog-type: markdown
description: Support for computations which consume random values.
description-type: haddock
hash: 17914ff7ca7bf9982ee65fe5a18780e9f54ce2d9ca4d3c3950cfc9284b8d72e3
homepage: ''
latest: 0.6.1
license-name: BSD-3-Clause
maintainer: Brent Yorgey <byorgey@gmail.com>
synopsis: Random-number generation monad.
test-bench-deps: {}
