all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.1.0
- 0.2.2.0
- 0.2.2.1
- 0.2.2.2
author: Jakob Brünker
basic-deps:
  base: '>=4.17.0.0 && <4.22'
  containers: ^>=0.6.4.1 || ^>=0.7
  fused-effects: ^>=1.1.1.2
  ghc: '>=9.4 && <9.13'
  transformers: '>=0.5.6.2 && <0.7'
changelog: "# Revision history for monadic-bang\r\n\r\n## 0.2.2.1 -- 2024-05-20\r\n\r\n*
  Only run plugin on modules that contain bangs\r\n\r\n## 0.2.2.0 -- 2024-05-20\r\n\r\n*
  Added support for GHC 9.10\r\n\r\n## 0.2.1.0 -- 2023-10-16\r\n\r\n* Added support
  for GHC 9.8\r\n* Prefix internal modules with `Internal`\r\n\r\n## 0.1.1.0 -- 2023-07-10\r\n\r\n*
  Removed debug log message (thanks evincarofautumn!)\r\n* Minor documentation fixes\r\n*
  Added quotes to variables in error messages\r\n* Added test for `-XQualifiedDo`\r\n*
  Added support for GHC 9.6\r\n\r\n## 0.1.0.0 -- 2023-01-07\r\n\r\n* First version\r\n"
changelog-type: markdown
description: "# Monadic Bang\r\n\r\n[![Run Tests](https://github.com/JakobBruenker/monadic-bang/actions/workflows/haskell.yml/badge.svg?branch=main&event=push)](https://github.com/JakobBruenker/monadic-bang/actions/workflows/haskell.yml)\r\n\r\nThis
  is a GHC Parser plugin for GHC 9.4 and above, intended to make monadic code within
  `do`-blocks more concise and nicer to work with. Works with HLS.\r\n\r\nThis is
  heavily inspired by [Idris's !-notation](https://idris2.readthedocs.io/en/latest/tutorial/interfaces.html#notation),
  but with some [important differences](#comparison-with-idriss--notation).\r\n\r\n##
  Contents\r\n\r\n1. [Motivating Examples](#motivating-examples)\r\n2. [Usage](#usage)\r\n3.
  [Cute Things](#cute-things)\r\n4. [Caveats](#caveats)\r\n5. [Details](#details)\r\n6.
  [Comparison with Idris's `!`-notation](#comparison-with-idriss--notation)\r\n\r\n##
  Motivating Examples\r\n\r\nLet's look at a few examples where Haskell syntax can
  be a bit annoying when it comes to monads - and what this plugin allows you to write
  instead:\r\n\r\nWhen you use `Reader` or `State`, you will often have to use `<-`
  to bind fairly simple expressions:\r\n\r\n```haskell\r\nlaunchMissile :: StateT
  Int IO ()\r\nlaunchMissile = do\r\n  count <- get\r\n  liftIO . putStrLn $ \"Missile
  no. \" <> show count <> \" has been launched\"\r\n  modify' (+ 1)\r\n```\r\n\r\n```haskell\r\nhelp
  :: Reader Config String\r\nhelp = do\r\n  manualLink <- asks (.links.manual)\r\n
  \ email <- asks (.contact.email)\r\n  pure $\r\n    \"You can find help by going
  to \" <> manualLink <>\r\n    \" or writing us at \" <> email\r\n```\r\n\r\nWith
  Monadic Bang, you can instead write\r\n```haskell\r\nlaunchMissile :: StateT Int
  IO ()\r\nlaunchMissile = do\r\n  liftIO . putStrLn $ \"Missile no. \" <> show !get
  <> \" has been launched\"\r\n  modify' (+ 1)\r\n```\r\n\r\n```haskell\r\nhelp ::
  Reader Config String\r\nhelp = do\r\n  pure $\r\n    \"You can find help by going
  to \" <> (!ask).links.manual <>\r\n    \" or writing us at \" <> (!ask).contact.email\r\n```\r\n\r\nWith
  `IORefs`, `STRefs`, mutable arrays, and so on, you'll often have to write code that
  looks like this, having to use somewhat redundant variable names:\r\n\r\n```haskell\r\naddIORefs
  :: IORef Int -> IORef Int -> IO Int\r\naddIORefs aRef bRef = do\r\n  a <- readIORef
  aRef\r\n  b <- readIORef bRef\r\n  pure $ a + b\r\n```\r\n\r\nWith Monadic Bang,
  you can write\r\n\r\n```haskell\r\naddIORefs :: IORef Int -> IORef Int -> IO Int\r\naddIORefs
  a b = do pure $ !(readIORef a) + !(readIORef b)\r\n```\r\n\r\nImplicit parameter
  definitions have somewhat more limited syntax than regular definitions: You can't
  write something like `?foo <- action`.  \r\nThat lead me to have to write this in
  a Vulkan program:\r\n\r\n```haskell\r\ninitQueues = do\r\n  let getQueue = getDeviceQueue
  ?device\r\n  graphicsQueue <- getQueue ?graphicsQueueFamily 0\r\n  presentQueue
  \ <- getQueue ?presentQueueFamily  0\r\n  computeQueue  <- getQueue ?computeQueueFamily
  \ 1\r\n  let ?graphicsQueue = graphicsQueue\r\n      ?presentQueue  = presentQueue\r\n
  \     ?computeQueue  = computeQueue\r\n  pure Dict\r\n```\r\n\r\nwith Monadic Bang,
  I can write\r\n\r\n```haskell\r\ninitQueues = do\r\n  let getQueue = getDeviceQueue
  ?device\r\n  let ?graphicsQueue = !(getQueue ?graphicsQueueFamily 0)\r\n      ?presentQueue
  \ = !(getQueue ?presentQueueFamily  0)\r\n      ?computeQueue  = !(getQueue ?computeQueueFamily
  \ 1)\r\n  pure Dict\r\n```\r\n\r\nTake this (slightly adapted) code used for the
  test suite of this very plugin:\r\n\r\n```haskell\r\nsettings :: MonadIO m => m
  Settings\r\nsettings = ... -- some long function body\r\n\r\ninitialDynFlags ::
  MonadIO m => m DynFlags\r\ninitialDynFlags = do\r\n  settings' <- settings\r\n  dflags
  <- defaultDynFlags settings' llvmConfig\r\n  pure $ dflags{generalFlags = addCompileFlags
  $ generalFlags dflags}\r\n```\r\n\r\nWith this plugin, I can instead write\r\n\r\n```haskell\r\nsettings
  :: MonadIO m => m Settings\r\nsettings = ... -- some long function body\r\n\r\ninitialDynFlags
  :: MonadIO m => m DynFlags\r\ninitialDynFlags = do\r\n  dflags <- defaultDynFlags
  !settings llvmConfig\r\n  pure $ dflags{generalFlags = addCompileFlags $ generalFlags
  dflags}\r\n```\r\n\r\nOr, to take some more code from this plugin's implementation\r\n\r\n```haskell\r\ndo
  logger <- getLogger\r\n   liftIO $ logMsg logger MCInfo (UnhelpfulSpan UnhelpfulNoLocationInfo)
  m\r\n```\r\nWhy have `logger` *and* `getLogger` when you can instead write\r\n\r\n```haskell\r\ndo
  liftIO $ logMsg !getLogger MCInfo (UnhelpfulSpan UnhelpfulNoLocationInfo) m\r\n```\r\n\r\nThe
  pattern you might have noticed here is that this plugin is convenient\r\nwhenever
  you have a `do`-block with a `<-` that doesn't do pattern matching,\r\nwhose bound
  variable is only used once, and has a short right-hand side.  While\r\nthat might
  sound like a lot of qualifiers, it does occur fairly often in\r\npractice.\r\n\r\n##
  Usage\r\n\r\nTo use this plugin, you have to add `monadic-bang` to the `build-depends`
  stanza in your `.cabal` file. Then you can either add `-fplugin=MonadicBang` to
  the `ghc-options` stanza, or add\r\n\r\n```haskell\r\n{-# OPTIONS_GHC -fplugin=MonadicBang
  #-}\r\n```\r\n\r\nto the top of the files you want to use it in.\r\n\r\nThis should
  also allow HLS to pick up on the plugin, as long as you use HLS 1.9.0.0 or above.\r\n\r\nThe
  plugin supports a couple of options, which you can provide via invocations of `-fplugin-opt=MonadicBang:<option>`.
  The options are:\r\n\r\n- `-ddump`: Print the altered AST\r\n- `-preserve-errors`:
  Keep parse errors about `!` outside of `do` in their original form, rather than
  a more relevant explanation. This is mainly useful if another plugin expects those
  errors.\r\n\r\n## Cute Things\r\n\r\n### Idiom Brackets Alternative\r\n\r\nIn some
  cases where idiom brackets would be ideal, `!` can be a reasonable alternative.
  For example, compare these four options:\r\n\r\n```haskell\r\n1. liftA2 (&&) (readIORef
  useMetric) (readIORef useCelsius)\r\n2. (&&) <$> readIORef useMetric <*> readIORef
  useCelsius\r\n   -- hypothetical idiom brackets:\r\n3. [| readIORef useMetric &&
  readIORef useCelsius |]\r\n   -- Monadic Bang:\r\n4. do pure (!(readIORef useMetric)
  && !(readIORef useCelsius))\r\n```\r\n\r\nwhile `<$>` and `<*>` are probably better
  here for prefix functions, `!` plays nicer with infix operators.\r\n\r\nIf you have
  `-XApplicativeDo` enabled, this even works with `Applicative` instances.\r\n\r\n###
  Nested `!`\r\n\r\n`!` can easily be nested. E.g. you could have\r\n\r\n```haskell\r\ndo
  putStrLn !(readFile (!getArgs !! 1))\r\n```\r\n\r\nFor how this is desugared, see
  [Desugaring](#desugaring).\r\n\r\n### Using `-XQualifiedDo`\r\n\r\n`!` always has
  to be used inside a `do`-block, but it *can* be a qualified `do`-block. For example,
  if you use `-XLinearTypes`, you could write things like\r\n\r\n```haskell\r\n{-#
  LANGUAGE QualifiedDo, BlockArguments, OverloadedStrings #-}\r\nimport Prelude.Linear\r\nimport
  Control.Functor.Linear as Linear\r\nimport System.IO.Resource.Linear\r\n\r\nmain
  :: IO ()\r\nmain = run Linear.do\r\n  Linear.pure !(move Linear.<$> hClose !(hPutStrLn
  !(openFile \"tmp\" WriteMode) \"foo\"))\r\n```\r\n\r\nwhich would be desugared as\r\n\r\n```Haskell\r\nmain
  :: IO ()\r\nmain = run Linear.do\r\n  a <- openFile \"tmp\" WriteMode\r\n  b <-
  hPutStrLn a \"foo\"\r\n  c <- move Linear.<$> hClose b\r\n  Linear.pure c\r\n```\r\n\r\n###
  List comprehensions\r\n\r\nList comprehensions are essentially just special `do`-blocks,
  so `!` can be used here as well (as well as in monad comprehensions). Example:\r\n\r\n```haskell\r\n[
  x + ![1, 2, 3] | x <- [60, 70, ![800, 900]] ]\r\n```\r\nThis would be equivalent
  to\r\n```haskell\r\n[ x + b | a <- [800, 900], x <- [60, 70, a], b <- [1, 2, 3]]\r\n```\r\n\r\nThe
  reason `b <- ...` is at the end here instead of the beginning is that everything
  that appears to the left of the `|` in a list comprehension is essentially treated
  like the last statement of a `do`-block (+ `pure`).\r\n\r\n### Get Rid of `<-`\r\n\r\nIn
  principle, every instance of `pattern <- action` in a `do`-block could be replaced
  by `let pattern = !action`. Should they? That's a separate question, though it could
  be a viable style.\r\n\r\nThe implicit parameter example in the first section is
  a valid use case of this.\r\n\r\n### Monadic Variants\r\n\r\nOftentimes, some generic
  function exists, but then it turns out that a monadic variant of said function would
  be useful as well. For example, hoogle finds at least a dozen different packages
  offering `whenM`. With this plugin, you can instead write\r\n\r\n```haskell\r\nmain
  = do\r\n  when (null !getArgs) $ print usage\r\n  ...\r\n```\r\n\r\n⚠️ NB: This
  works here since `when` only needs to evaluate its condition once. If you were to
  try to replace e.g. one of the forms of `whileM` in this manner, you would run into
  trouble since it's supposed to evaluate the condition again on each iteration.\r\n\r\n##
  Caveats\r\n\r\nThere are a few disadvantages to using this that are worth mentioning:\r\n\r\n-
  Since the plugin modifies the source code, the location info in error messages might
  look a bit strange, since it contains the desugared version. This shouldn't be an
  issue if you use HLS or another tool to highlight errors within your editor.\r\n-
  HLint currently does not work with this plugin (HLint will show you a parse error
  if you try to use `!`.)\r\n- If there are fatal parse errors in the source code,
  unfortunately each `!` will also be highlighted as a parse error. This is unavoidable
  at the moment, since the plugin can only intercept those messages if the module
  is otherwise successfully parsed.\r\n- Plugins like this cannot be used inside of
  GHCi at this time (however, you can load modules that use it into GHCi).\r\n- Arguably
  this makes `do`-desugaring slightly more confusing - e.g., compare the following:\r\n\r\n
  \ ```haskell\r\n  do put 4\r\n     put 5 >> print !get\r\n  ``` \r\n  \r\n  ```haskell\r\n
  \ do put 4\r\n     put 5\r\n     print !get\r\n  ```  \r\n  \r\n  With the usual
  desugaring rules, whether you use `>>` or a new line shouldn't make a difference,
  but here, the first snippet will print `4`, while the second snippet will print
  `5`.\r\n\r\n  Because of this, the plugin is usually best used in situations where
  the order in which effects happen makes no difference.\r\n\r\n## Details\r\n\r\nWhile
  the above information should cover most use cases, there are some details that could
  sometimes be relevant\r\n\r\n### Desugaring\r\n\r\nThe desugaring is essentially
  what one would expect from comparing the motivating examples with the versions using
  `!`.\r\n\r\nTo illustrate with a fairly extensive example:\r\n\r\n```haskell\r\nx
  = g do\r\n  foo\r\n  bar <- !a + !(!b ++ !c)\r\n  baz <- case !d of\r\n    (!f ->
  e) -> do !g e\r\n```\r\n\r\nis desugared into\r\n\r\n```haskell\r\nx = g do\r\n
  \ foo\r\n  <!a> <- a\r\n  <!b> <- b\r\n  <!c> <- c\r\n  <!(!b ++ !c)> <- <!b> ++
  <!c>\r\n  bar <- <!a> + <!(!b ++ !c)>\r\n  <!d> <- d\r\n  <!f> <- f\r\n  baz <-
  case <!d> of\r\n    (<!f> -> e) -> do\r\n      <!g> <- g\r\n      <!g> e\r\n```\r\n\r\nwhere
  `<!a>` etc. are simply special variable names.\r\n\r\nSo, broadly speaking, the
  order in which things are bound is top-to-bottom (statement-wise), inside-out, and
  left-to-right.\r\n\r\nThis can be important when the order of effects matters -
  though as mentioned above, if order *does* matter, `!` might not be the clearest
  way to express things.\r\n\r\n`!` will only bubble up to the nearest `do`-block.
  To illustrate:\r\n\r\n```haskell\r\nx = do when nuclearStrikeDetected $ log !launchMissiles\r\n\r\ny
  = do when nuclearStrikeDetected $ do log !launchMissiles\r\n```\r\n\r\n`x` will
  launch the missiles regardless of whether or not a strike has been detected. But
  it will only log the results in the case of detection.\r\n`y` will only launch the
  missiles (and log the results) if a strike has been detected.\r\n\r\nThe desugaring:\r\n\r\n```haskell\r\nx
  = do\r\n  <!launchMissiles> <- launchMissiles\r\n  when nuclearStrikeDetected $
  log <!launchMissiles>\r\n\r\ny = do\r\n  when nuclearStrikeDetected $ do\r\n    <!launchMissiles>
  <- launchMissiles\r\n    log <!launchMissiles>\r\n```\r\n\r\nThe story for `case`
  and `if` expressions is similar, `!` in the individual branches will *all* be executed
  unless the branches have their own `do`-blocks.\r\n\r\n### Variable scope\r\n\r\nA
  variable can be used inside a `!` if\r\n- it was bound outside the current `do`-block\r\n-
  or it was bound before the statement the `!` is in\r\n- or it is bound inside the
  `!`\r\n\r\nIn other words, this is legal:\r\n```haskell\r\nf x = do\r\n  let a =
  a\r\n  foo !(let b = b in x + a + b)\r\n```\r\nbut this is not:\r\n```haskell\r\nc
  = do\r\n  let a = a in foo !a\r\n```\r\nThat's because this would be desugared as\r\n```haskell\r\nc
  = do\r\n  <!a> <- a\r\n  let a = a in foo <!a>\r\n```\r\nbut `a` is not in scope
  in the second line.\r\n\r\n### Where it can be used\r\n\r\nIt can be used in any
  expression that is somewhere inside a `do`-block. In particular, this includes for
  example `where`-blocks in `case`-expressions:\r\n\r\n```haskell\r\nmain = do\r\n
  \ putStrLn case !getLine of\r\n    \"print args\" -> prettyArgs \"\\n\"\r\n      where
  prettyArgs sep = intercalate sep !getArgs\r\n    \"greeting\" -> \"hello there!\"\r\n```\r\n\r\nand
  view patterns\r\n\r\n```haskell\r\ndo (extract !getSettings -> contents) <- readArchive\r\n
  \  print contents\r\n```\r\n\r\n## Comparison with Idris's `!`-notation\r\n\r\nThe
  main difference is that Idris will insert a `do` if there is none - e.g. this is
  legal in Idris:\r\n\r\n```haskell\r\nf : IO ()\r\nf = putStrLn !getLine\r\n```\r\n\r\nbut
  (assuming it's at top-level) wouldn't be with this plugin; you would have to write
  `f = do putStrLn !getLine` instead.\r\n\r\nSome other differences:\r\n- In Idris,
  `!`'d expressions cannot escape to outside of a lambda expression (it effectively
  inserts a new `do` at the beginning of the lambda body instead)\r\n- The same difference
  applies to `let` bindings that define functions\r\n"
description-type: markdown
hash: c228c5beb0a4ad228695f93429d364491929d56cfd5a4e928f58e8d5e7de077f
homepage: https://github.com/JakobBruenker/monadic-bang
latest: 0.2.2.2
license-name: MIT
maintainer: jakob.bruenker@gmail.com
synopsis: GHC plugin to desugar ! into do-notation
test-bench-deps:
  base: '>=0'
  ghc: '>=0'
  ghc-boot: '>=9.4 && <9.13'
  ghc-paths: ^>=0.1.0.12
  monadic-bang: '>=0'
  transformers: '>=0'
