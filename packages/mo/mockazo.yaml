all-versions:
- 0.1.0
- 0.1.1
author: The Agile Monkeys
basic-deps:
  base: '>=4.7 && <5'
  constraints: '>=0.10'
  multistate: '>=0.8'
  relude: '>=0.4'
  template-haskell: '>=2.14'
changelog: ''
changelog-type: ''
description: "# Mockazo \U0001F443\n_Mock your records of functions with ease_\n\n[![CircleCI](https://circleci.com/gh/theam/mockazo.svg?style=svg&circle-token=e80d08cb0d9855a774709311335f4e29ca40f5de)](https://circleci.com/gh/theam/mockazo)\n[![PRs
  Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n[![Average
  time to resolve an issue](http://isitmaintained.com/badge/resolution/theam/mockazo.svg)](http://isitmaintained.com/project/theam/mockazo
  \"Average time to resolve an issue\")\n[![GitHub license](https://img.shields.io/github/license/theam/mockazo.svg)](https://github.com/theam/mockazo/blob/master/LICENSE)\n[![Hackage
  version](https://img.shields.io/hackage/v/mockazo.svg)](https://hackage.haskell.org/package/mockazo)\n[![Open
  Source Love png1](https://badges.frapsoft.com/os/v1/open-source.png?v=103)](https://github.com/ellerbrock/open-source-badges/)\n\nOne
  approach to structure a Haskell is using records of functions, sometimes called\nhandles,
  services, or as we like to call them, components.\n\nMockazo provides a way of mocking
  components with ease and to verify that they executed\nthe proper operations with
  the proper results.\n\n# Adding it to your project\n\nAdd the `mockazo` dependency
  to your `package.yaml` **or** your `cabal` file.\n\nIf you use Stack, you also need
  to add `multistate-0.8.0.2` to your `extra-deps`\nsection in the `stack.yaml` file.\n\nIn
  your tests, `import Data.Component.Mock`, and you are ready to roll!\n\n# Some restrictions\n\nFor
  Mockazo to work properly, we need that you do a little tweaking on your component\ndefinitions:\n\n##
  Parametrize the return context\n\nIt is common practice to make component methods
  return values in the `IO` context.\nThis might looks straightforward, but when mocking
  comes into place, it is much easier\nto work in other contexts.\n\nImagine that
  we have a simple logging component:\n\n```haskell\ndata Component = Component\n
  \ { logInfo  :: Text -> IO ()\n  , logWarn  :: Text -> IO ()\n  , logError :: Text
  -> IO ()\n  }\n```\n\nFor Mockazo to work properly, we parametrize the context of
  execution:\n\n```haskell\ndata Component context = Component\n  { logInfo  :: Text
  -> context ()\n  , logWarn  :: Text -> context ()\n  , logError :: Text -> context
  ()\n  }\n```\n\nThis not only makes testing easier, but also makes your code much
  more robust,\nbecause when defining a function that uses this component, we are
  unable to execute\nany other kind of code that runs in another execution contexts
  (like a colleague\ncalling `launchMissiles :: IO ()`).\n\n## All methods must return
  something in a context\n\nGenerally, we use Components to model pieces of our application
  that perform side effects,\nso adding a field that contains some static piece of
  data doesn't make much sense.\n\nIf you really need to do this, we recommend you
  that you create a companion `Configuration`\ntype, with all of these values, and
  leave the component for the side effect operations only.\n\nIf you **really** need
  the value inside of the component, wrap it in `context`.\n\nMockazo, expects all
  the methods to be effectful. So it will choke on a return value that\nis not wrapped
  in the context.\n\nSo, instead of doing:\n\n```haskell\ndata Component context =
  Component\n  { foo :: Text\n  }\n```\n\nDo this:\n\n```haskell\ndata Component context
  = Component\n  { foo :: context Text\n  }\n```\n\n# Creating your first mock\n\nLet's
  suppose that we want to mock the logging component from the first example:\n\n```haskell\ndata
  Component context = Component\n  { logInfo  :: Text -> context ()\n  , logWarn  ::
  Text -> context ()\n  , logError :: Text -> context ()\n  }\n```\n\nCreate a separate
  module for the mock (we recommend you to do it in `test/Mock`, and the\nname of
  the module should match the name of the component module).\n\nAfter that, we create
  the mock (following the advice, we make it in `test/Mock/Logging.hs`):\n\n```haskell\nmodule
  Mock.Logging where\nimport Logging   -- We import the component *UNQUALIFIED*\nmakeMock
  ''Component\n```\n\nThat's it! (Yes, really)\n\nIf for some reason, you want to
  add the export list to the mock module (your compiler is\ncomplaining), you can
  fix it like this:\n\n```haskell\nmodule Mock.Logging (Action(..), Component(..),
  mock) where\nimport Logging\nmakeMock ''Component\n```\n\n# Testing a function that
  calls our component\n\nSuppose that somewhere we have a function `importantOperation`\nthat
  looks like this:\n\n```haskell\nimportantOperation :: Monad context => Logging.Component
  context -> context ()\nimportantOperation Logging.Component{..} = do\n  logInfo
  \"info\"\n  logWarn \"warn\"\n  logError \"error\"\n```\n\nWe want to assure that
  these operations are run in order and with the\nappropriate arguments. We can write
  a test for it by using Mockazo's little DSL.\n\nIn our tests file:\n\n```haskell\nimport
  qualified Mock.Logging as Logging\n\nlet loggingMock = Logging.mock\n\n-- ... somewhere
  in our test framework\n\nrunMock\n  $ withActions\n    [ Logging.LogInfo  \"info\"
  \ :-> ()\n    , Logging.LogWarn  \"warn\"  :-> ()\n    , Logging.LogError \"error\"
  :-> ()\n    ]\n  $ importantOperation loggingMock\n```\n\nWe tell the test to run
  a function with a mock using `runMock`.\n\nAfter that, we specify the actions that
  we expect to be run, and what they return,\nusing the `:->` operator, inside of
  a `withActions` block.\n\nFinally, we run the function that we want to test, by
  passing the mocked component to it.\n\n# Functions that depend on multiple components\n\nSuppose
  that `importantOperation` depended on two, three, or whatever more components.\n\nThe
  great stuff about Mockazo, is that you can chain as many `withActions` blocks as\nyou
  want, passing the expected operations for each one of the mocks.\n\nSuppose that
  apart from the `Logging` component, we had another called `UserFetch`.\nWe could
  also mock it in the same way we did with `Logging`, and add the expected\noperations
  too:\n\n```haskell\nimport qualified Mock.Logging as Logging\nimport qualified Mock.UserFetch
  as UserFetch\n\nlet loggingMock   = Logging.mock\nlet userFetchMock = UserFetch.mock\n\n--
  ... somewhere our test framework\n\nrunMock\n  $ withActions\n    [ Logging.LogInfo
  \ \"info\"  :-> ()\n    , Logging.LogWarn  \"warn\"  :-> ()\n    , Logging.LogError
  \"error\" :-> ()\n    ]\n  $ withActions\n    [ UserFetch.Connect \"localhost\"
  \ :-> ()\n    , UserFetch.Fetch :-> User { name = \"mike\", password = \"absolutely-encrypted\"
  }\n    ]\n  $ importantOperation loggingMock userFetchMock\n```\n\n# Acknowledgements\n\nMockazo
  is heavily inspired by [`monad-mock`](https://github.com/cjdev/monad-mock/). It
  wouldn't have been possible to create this package without it's existence.\n\nTo
  all of the authors and contributors of `monad-mock`:\n\n### **Thank you!**\n"
description-type: markdown
hash: 90c713f9804701e4ac614845993632cacd375a58cc8fd40f02cae7993f8a7445
homepage: https://github.com/theam/mockazo#readme
latest: 0.1.1
license-name: MIT
maintainer: hackers@theagilemonkeys.com
synopsis: Mock records of functions easily
test-bench-deps:
  base: '>=4.7 && <5'
  constraints: '>=0.10'
  hspec: '>=0'
  mockazo: '>=0'
  multistate: '>=0.8'
  relude: '>=0.4'
  template-haskell: '>=2.14'
