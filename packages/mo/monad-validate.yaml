all-versions:
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
- 1.2.0.2
- 1.3.0.0
author: Alexis King <lexi.lambda@gmail.com>
basic-deps:
  base: '>=4.12 && <5'
  exceptions: '>=0.9 && <1'
  monad-control: '>=1 && <2'
  mtl: '>=0'
  transformers: '>=0.5.6'
  transformers-base: <1
changelog: |
  # 1.3.0.0 [2023-08-17]

  - Added `MonadFix` instance for `ValidateT`.

  # 1.2.0.2 [2023-08-17]

  - Added support for mtl 2.3.

  # 1.2.0.1 [2022-07-05]

  - Added support for GHC 9.0 and 9.2.

  # 1.2.0.0 [2019-08-09]

  - Added the `exceptToValidate`, `exceptToValidateWith`, `validateToError`, and `validateToErrorWith` functions for converting between different error-raising monads.
  - Removed the `DefaultSignatures`-based default methods for `MonadValidate` in favor of a `WrappedMonadTrans` newtype available from `Control.Monad.Validate.Class` that can be used to derive instances using `DerivingVia`.
  - Added a default implementation of `dispute` in terms of `refute` and `tolerate` and added their equivalence as a law for `MonadValidate`.

  # 1.1.0.0 [2019-08-05]

  - Added the `tolerate` method to `MonadValidate`, which allows relaxing validation errors from fatal to nonfatal.
  - Added the `embedValidateT` and `mapErrors` functions, which can be used together to locally alter the type of validation errors in `ValidateT` computations.
  - Removed the `MonadValidate` instance for `ContT`, which is no longer possible to implement due to the addition of `tolerate`.

  # 1.0.0.0 [2019-08-04]

  - Initial release.
changelog-type: markdown
description: |
  # monad-validate [![Build Status](https://img.shields.io/github/actions/workflow/status/lexi-lambda/monad-validate/build.yml?branch=master)](https://github.com/lexi-lambda/monad-validate/actions/workflows/build.yml) [![Hackage](https://img.shields.io/badge/hackage-1.3.0.0-5e5184)][hackage]

  A Haskell library providing the `ValidateT` monad transformer, designed for writing data validations that provide high-quality error reporting without much effort. `ValidateT` automatically exploits the data dependencies of your program—as encoded implicitly in uses of `fmap`, `<*>`, and `>>=`—to report as many errors as possible upon failure instead of completely aborting at the first one.

  See [the documentation on Hackage][hackage] for more information and examples.

  [hackage]: https://hackage.haskell.org/package/monad-validate
description-type: markdown
hash: eb6ddd5c9cf72ff0563cba604fa00291376e96138fdb4932d00ff3a99d66706e
homepage: https://github.com/lexi-lambda/monad-validate
latest: 1.3.0.0
license-name: ISC
maintainer: Alexis King <lexi.lambda@gmail.com>
synopsis: A monad transformer for data validation.
test-bench-deps:
  aeson: '>=2 && <3'
  aeson-qq: '>=0'
  base: '>=4.12 && <5'
  exceptions: '>=0.9 && <1'
  hspec: '>=0'
  monad-control: '>=1 && <2'
  monad-validate: '>=0'
  mtl: '>=0'
  scientific: '>=0'
  text: '>=0'
  transformers: '>=0.5.6'
  transformers-base: <1
  unordered-containers: '>=0'
  vector: '>=0'
