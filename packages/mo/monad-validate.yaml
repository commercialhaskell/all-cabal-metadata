homepage: https://github.com/lexi-lambda/monad-validate#readme
changelog-type: markdown
hash: 1f3166c90e4eb6c3221af1591a364c437e06f604ba0617d81b8e94eb20ccfe39
test-bench-deps:
  exceptions: '>=0.9 && <1'
  monad-validate: -any
  base: '>=4.12 && <4.15'
  unordered-containers: -any
  hspec: -any
  text: -any
  monad-control: '>=1 && <2'
  mtl: -any
  transformers-base: <1
  transformers: '>=0.5.6'
  aeson-qq: -any
  scientific: -any
  aeson: -any
  vector: -any
maintainer: Alexis King <lexi.lambda@gmail.com>
synopsis: A monad transformer for data validation.
changelog: |
  # 1.2.0.0 [2019-08-09]

  - Added the `exceptToValidate`, `exceptToValidateWith`, `validateToError`, and `validateToErrorWith` functions for converting between different error-raising monads.
  - Removed the `DefaultSignatures`-based default methods for `MonadValidate` in favor of a `WrappedMonadTrans` newtype available from `Control.Monad.Validate.Class` that can be used to derive instances using `DerivingVia`.
  - Added a default implementation of `dispute` in terms of `refute` and `tolerate` and added their equivalence as a law for `MonadValidate`.

  # 1.1.0.0 [2019-08-05]

  - Added the `tolerate` method to `MonadValidate`, which allows relaxing validation errors from fatal to nonfatal.
  - Added the `embedValidateT` and `mapErrors` functions, which can be used together to locally alter the type of validation errors in `ValidateT` computations.
  - Removed the `MonadValidate` instance for `ContT`, which is no longer possible to implement due to the addition of `tolerate`.

  # 1.0.0.0 [2019-08-04]

  - Initial release.
basic-deps:
  exceptions: '>=0.9 && <1'
  base: '>=4.12 && <4.15'
  monad-control: '>=1 && <2'
  mtl: -any
  transformers-base: <1
  transformers: '>=0.5.6'
all-versions:
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
author: Alexis King <lexi.lambda@gmail.com>
latest: 1.2.0.0
description-type: markdown
description: |
  # monad-validate

  A Haskell library providing the `ValidateT` monad transformer, designed for writing data validations that provide high-quality error reporting without much effort. `ValidateT` automatically exploits the data dependencies of your program—as encoded implicitly in uses of `fmap`, `<*>`, and `>>=`—to report as many errors as possible upon failure instead of completely aborting at the first one.

  See [the documentation on Hackage][hackage] for more information and examples.

  [hackage]: https://hackage.haskell.org/package/monad-validate
license-name: ISC
