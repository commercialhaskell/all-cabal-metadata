homepage: ''
changelog-type: markdown
hash: 640b0dc483c2c0fef3fbbe91ddd2685aa13621fc1457497659d6c4c4d2d1ee74
test-bench-deps:
  test-framework-hunit: '>=0.3'
  free: '>=5.1'
  test-framework: '>=0.8'
  base: '>=4.11 && <5'
  test-framework-quickcheck2: '>=0.3'
  HUnit: '>=1.3'
  monad-schedule: -any
  transformers: '>=0.5'
  QuickCheck: '>=2.12'
maintainer: programming@manuelbaerenz.de
synopsis: A new, simple, composable concurrency abstraction.
changelog: |
  # Revision history for monad-schedule

  ## 0.1.2.0 -- 2022-06-26

  * Added test suite
  * Added further Writer instances
  * Fixed bug in ScheduleT and YieldT

  ## 0.1.1.0 -- 2022-06-25

  * Added Yield scheduling monad
  * Added Identity instance

  ## 0.1.0.0 -- 2022-03-27

  * Added MonadSchedule clas
  * Added free scheduling transformer ScheduleT
  * Added instances for common transformers
basic-deps:
  free: '>=5.1'
  stm: '>=2.5'
  base: '>=4.13.0 && <=4.17'
  time-domain: '>=0.1'
  transformers: '>=0.5'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
author: Manuel BÃ¤renz
latest: 0.1.2.0
description-type: haddock
description: |-
  A monad @m@ is said to allow scheduling if you can pass a number of actions @m a@ to it,
  and those can be executed at the same time concurrently.
  You can observe the result of the actions after some time:
  Some actions will complete first, and the results of these are returned then as a list @'NonEmpty' a@.
  Other actions are still running, and for these you will receive continuations of type @m a@,
  which you can further run or schedule to completion as you like.
license-name: MIT
