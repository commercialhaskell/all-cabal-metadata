all-versions:
- 0.1.0
author: Daviti Nalchevanidze
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  filepath: '>=1.1 && <1.5'
  morpheus-graphql: '>=0'
  optparse-applicative: '>=0.12 && <0.15'
changelog: ''
changelog-type: markdown
description: |
  # Morpheus GraphQL CLI

  Morpheus GraphQL CLI helps you to generate GraphQL APIs .

  Morpheus GraphQL CLI is still in an early stage of development, so any feedback is more than welcome, and we appreciate any contribution!
  Just open an issue here on GitHub, or join [our Slack channel](https://morpheus-graphql-slack-invite.herokuapp.com/) to get in touch.

  ## Getting Started

  ### Setup

  To get started with Morpheus, you first need to add it to your project's dependencies, as follows (assuming you're using hpack):

  _package.yml_

  ```yaml
  dependencies:
    - morpheus-graphql-cli
  ```

  Additionally, you should tell stack which version to pick:

  _stack.yml_

  ```yaml
  resolver: lts-14.8

  extra-deps:
    - morpheus-graphql-0.5.0
  ```

  As Morpheus and is quite new, make sure stack can find morpheus-graphql by running `stack upgrade` and `stack update`

  ## Code Generating

  Generating dummy Morpheus Api from `schema.gql`

  ```
  morpheus build src/schem.gql src/GQLApi.hs
  ```

  _schema.gql_

  ```gql
  type Query {
    deity(name: String!): Deity!
  }

  type Deity {
    name: String!
    power: String
  }
  ```

  _API.hs_

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE DeriveGeneric #-}
  {-# LANGUAGE TypeFamilies #-}

  -- generated by 'Morpheus' CLI
  module API (rootResolver) where

  import  GHC.Generics  (Generic)
  import  Data.Morpheus.Kind  (SCALAR, ENUM, INPUT_OBJECT, OBJECT, UNION)
  import  Data.Morpheus.Types  (GQLRootResolver(..), toMutResolver, IORes, IOMutRes, IOSubRes, Event(..), SubRootRes, GQLType(..), GQLScalar(..), ScalarValue(..))
  import  Data.Text  (Text)

  rootResolver :: GQLRootResolver IO () () Query () ()
  rootResolver =
    GQLRootResolver
      { queryResolver = resolveQuery
    ,  mutationResolver = return ()
    ,  subscriptionResolver = return ()
      }




  ---- GQL Query -------------------------------
  data Query = Query
      { deity :: ArgDeity -> IORes Deity
      }
   deriving (Generic)

  data ArgDeity = ArgDeity
      { name :: Text
      }
   deriving (Generic)

  instance GQLType Query where
    type KIND Query = OBJECT



  resolveQuery :: IORes Query
  resolveQuery = return Query
      { deity = const resolveDeity
      }




  ---- GQL Deity -------------------------------
  data Deity = Deity
      { name :: () -> IORes Text
    ,  power :: () -> IORes (Maybe Text)
      }
   deriving (Generic)

  instance GQLType Deity where
    type KIND Deity = OBJECT



  resolveDeity :: IORes Deity
  resolveDeity = return Deity
      { name = const $ return ""
    ,  power = const $ return Nothing
      }
  ```

  this command will generate Haskell API and resolvers,
  resolvers will resolve default values for every object

  # About

  ## The name

  _Morpheus_ is the greek god of sleep and dreams whose name comes from the greek word _μορφή_ meaning form or shape.
  He is said to be able to mimic different forms and GraphQL is good at doing exactly that: Transforming data in the shape
  of many different APIs.

  ## Team

  Morpheus is written and maintained by [_nalchevanidze_](https://github.com/nalchevanidze)
description-type: markdown
hash: 5a172438957d29e116c77560bfb9496cdbe58f3c9f3e578fe788d41ae1806bbe
homepage: https://morpheusgraphql.com
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: d.nalchevanidze@gmail.com
synopsis: Morpheus GraphQL CLI
test-bench-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  filepath: '>=1.1 && <1.5'
  morpheus-graphql: '>=0'
  optparse-applicative: '>=0.12 && <0.15'
