all-versions:
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- '0.4'
- 0.4.1
- '0.5'
- '0.6'
- 0.6.0.1
- '0.7'
- 0.7.0.1
- 0.7.1
- 0.7.1.1
- 0.7.1.2
- '0.8'
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.8.0.5
- 0.8.0.6
- 0.8.0.7
- 0.8.0.8
- '1.0'
author: Don Stewart
basic-deps:
  base: '>=4 && <5'
  deepseq: '>=1.1 && <1.6'
changelog: |
  # Change Log

  ## [Unreleased][]

  _No unreleased changes at this time._

  ## [v1.0][]

  Released on **2020-07-18**, **Nelson Mandela International Day**.

  ### Added

  * `intercalate` for `DList` ([#43][], [Jacob Leach][])
  * `Traversable` instance for `DList` ([#45][], [Veronika Romashkina][])
  * `Data.DList.Internal` for the `DList` implementation, `Data.DList.Unsafe` for
    exporting the `DList` constructor `UnsafeDList` and record label
    `unsafeApplyDList` ([#55][], [#59][])
  * `Data.DList.DNonEmpty` ([#60][])
  * GitHub Action for uploading a release ([#74][])
  * `dlist-bench`, a benchmark package ([#71][])

  ### Changed

  * `stimes` for `DList` defined with `stimesMonoid` ([#46][], [Janek Spaderna][])
  * Type of `tail`: `DList a -> DList a` to `DList a -> [a]` ([#69][])
  * GitHub Action for continuous integration testing to replace Travis-CI
    ([#47][], [#50][])
  * GHC warning and error improvements ([#72][], [#73][])
  * Improved documentation ([#55][], [#70][], [#76][], [#77][])

  ### Removed

  * `list :: b -> (a -> DList a -> b) -> DList a -> b` ([#69][])

  ## [v0.8.0.8][]

  Released on **2020-04-02**, **World Autism Awareness Day**.

  ### Added

  * `toList` in the `Foldable` instance for `DList` ([#36][], [Ryan Scott][])

  ### Changed

  * `QuickCheck` upper bound: 2.14 to 2.15 ([`a7ea60d`][])

  ### Fixed

  * Documented time complexity of `head` for `DList` ([#35][], [Simon Jakobi][])

  ## [v0.8.0.7][]

  Released on **2019-08-05**, **Independence Day in Burkina Faso**.

  ### Added

  * `MonadFail` instance for `DList` ([#32][], [Vanessa McHale][])

  ### Changed

  * `deepseq` upper bound: 2 to 1.5 ([#33][], [Herbert Valerio Riedel][])

  ## [v0.8.0.6][]

  Released on **2019-03-29**, **Martyrs' Day in Madagascar**.

  ### Changed

  * `QuickCheck` upper bound: 2.13 to 2.14 ([`242511c`][])

  ## [v0.8.0.5][]

  Released on **2018-09-13**, **Day of the Programmer**.

  ### Changed

  * `QuickCheck` upper bound: 2.12 to 2.13 ([`0e2b3a5`][])

  ## [v0.8.0.4][]

  Released on **2018-01-19**, **Kokborok Day**.

  ### Added

  * `{-# LANGUAGE Trustworthy #-}` in `Data.DList` ([#31][], [Bertram
    Felgenhauer][])

  ### Changed

  * `QuickCheck` upper bound: 2.11 to 2.12 ([`3d9c8ad`][])
  * `QuickCheck` lower bound: 2.7/2.9 to 2.10 ([`4f92012`][])
  * `Arbitrary`, `Arbitrary1` instances for `NonEmpty` in the test suite copied
    from `quickcheck-instances` ([`4f92012`][])

  ## [v0.8.0.3][]

  Released on **2017-07-04**, **Independence Day in the United States**.

  ### Added

  * `quickcheck-instances` dependency in the test suite for the `Arbitrary`,
    `Arbitrary1` instances for `NonEmpty` ([`5b41d0d`][])

  ### Changed

  * `QuickCheck` upper bound: 2.10 to 2.11 ([`b2f791a`][])

  ### Fixed

  * `stimes` property in the test suite ([#30][], [Oleg Grenrus][])

  ## [v0.8.0.2][]

  Released on **2016-09-04**, **World Sexual Health Day**.

  ### Fixed

  * Missing module `OverloadedStrings` in the test suite ([#29][], [Sergei
    Trofimovich][])

  ## [v0.8.0.1][]

  Released on **2016-07-29**, the **58th Anniversary of the Creation of NASA**.

  ### Changed

  * `QuickCheck` lower bound: 2.7 to 2.9 for GHC >= 8 ([#28][], [Adam Bergmark][])

  ## [v0.8][]

  Released on **2016-07-17**, **Constitution Day in South Korea**.

  ### Added

  * Pattern synonyms `Nil` and `Cons` ([#15][])
  * `Semigroup` instance for `DList` ([#25][])
  * Canonical `Applicative` and `Monad` instances for `DList` ([#23][], [Herbert
    Valerio Riedel][])

  ### Changed

  * `IsString` instance for `DList` is no longer flexible ([#26][], [Baldur
    Blöndal][])
  * `QuickCheck` upper bound: 2.9 to 2.10 ([`ef7eac5`][])

  ## [v0.7.1.2][]

  Released on **2015-08-23**, **International Day for the Remembrance of the Slave
  Trade and its Abolition**.

  ### Fixed

  * Imports causing warnings in GHC 7.10 ([#22][], [Mikhail Glushenkov][])

  ## [v0.7.1.1][]

  Released on **2015-03-19**, **St. Joseph's Day**.

  ### Changed

  * `QuickCheck` lower bound: 2.5 to 2.7 ([`2d8ec37`][])
  * `QuickCheck` upper bound: 2.8 to 2.9 ([`3176153`][])

  ## [v0.7.1][]

  Released on **2014-06-28**, the **100th Anniversary of the Assassination of
  Franz Ferdinand**.

  ### Added

  * `IsList` instance for `DList` ([#13][], [Baldur Blöndal][])

  ## [v0.7.0.1][]

  Released on **2014-03-24**, **World Tuberculosis Day**.

  ### Changed

  * `QuickCheck` upper bound: 2.7 to 2.8 ([`7494dbc`][])

  ## [v0.7][]

  Released on **2014-03-17**, **St. Patrick's Day**.

  ### Added

  * `NFData` instance for `DList` ([#10][], [Evan Laforge][])
  * `IsString` instance for `DList` ([`771a38d`][])

  ### Changed

  * `base` lower bound: 2 to 4 ([`77f6898`][])

  ### Removed

  * `DList` constructor and record label, `maybeReturn` ([`62c0c09`][])

  ## [v0.6.0.1][]

  Released on **2013-12-01**, **World AIDS Day**.

  ### Changed

  * `QuickCheck` lower bound: 2.6 to 2.5 ([#9][], [Michael Snoyman][])

  ## [v0.6][]

  Released on **2013-11-29**, **Black Friday**.

  ### Added

  * `apply` to replace `DList` record label `unDL` ([#4][])
  * `Eq`, `Ord`, `Show`, and `Alternative` instances for `DList` ([#1][], [Bas van
    Dijk][])
  * `Read` instance for `DList` ([`58ef305`][])
  * `Foldable` instance for `DList` ([`5b1d09f`][])
  * Travis-CI for continuous integration testing ([#6][], [Herbert Valerio
    Riedel][])

  ### Changed

  * Maintenance: [Don Stewart][] to [Sean Leather][] ([#2][], [Bas van Dijk][])
  * Repository: `http://code.haskell.org/~dons/code/dlist/` to
    `https://github.com/spl/dlist`
  * `base` lower bound: 0 to 2 ([`6e1d9e7`][])

  ### Fixed

  * Test suite simplified and changed to use `cabal test` ([`9f58759`][])

  ### Deprecated

  * Exported `DList` constructor and record label, `maybeReturn` ([#4][])

  <!-- Keep each of these groups of references sorted. -->

  <!-- Version tag comparisons -->

  [v0.6]: https://github.com/spl/dlist/compare/v0.5...v0.6
  [v0.6.0.1]: https://github.com/spl/dlist/compare/v0.6...v0.6.0.1
  [v0.7]: https://github.com/spl/dlist/compare/v0.6.0.1...v0.7
  [v0.7.0.1]: https://github.com/spl/dlist/compare/v0.7...v0.7.0.1
  [v0.7.1.1]: https://github.com/spl/dlist/compare/v0.7.1...v0.7.1.1
  [v0.7.1.2]: https://github.com/spl/dlist/compare/v0.7.1.1...v0.7.1.2
  [v0.7.1]: https://github.com/spl/dlist/compare/v0.7.0.1...v0.7.1
  [v0.8]: https://github.com/spl/dlist/compare/v0.7.1.2...v0.8
  [v0.8.0.1]: https://github.com/spl/dlist/compare/v0.8...v0.8.0.1
  [v0.8.0.2]: https://github.com/spl/dlist/compare/v0.8.0.1...v0.8.0.2
  [v0.8.0.3]: https://github.com/spl/dlist/compare/v0.8.0.2...v0.8.0.3
  [v0.8.0.4]: https://github.com/spl/dlist/compare/v0.8.0.3...v0.8.0.4
  [v0.8.0.5]: https://github.com/spl/dlist/compare/v0.8.0.4...v0.8.0.5
  [v0.8.0.6]: https://github.com/spl/dlist/compare/v0.8.0.5...v0.8.0.6
  [v0.8.0.7]: https://github.com/spl/dlist/compare/v0.8.0.6...v0.8.0.7
  [v0.8.0.8]: https://github.com/spl/dlist/compare/v0.8.0.7...v0.8.0.8
  [v1.0]: https://github.com/spl/dlist/compare/v0.8.0.8...v1.0

  <!-- The HEAD version tag comparison -->

  [Unreleased]: https://github.com/spl/dlist/compare/v1.0...HEAD

  <!-- Issues and PRs -->

  [#1]: https://github.com/spl/dlist/pull/1
  [#2]: https://github.com/spl/dlist/pull/2
  [#4]: https://github.com/spl/dlist/issues/4
  [#6]: https://github.com/spl/dlist/pull/6
  [#9]: https://github.com/spl/dlist/pull/9
  [#10]: https://github.com/spl/dlist/issues/10
  [#13]: https://github.com/spl/dlist/pull/13
  [#15]: https://github.com/spl/dlist/issues/15
  [#22]: https://github.com/spl/dlist/pull/22
  [#23]: https://github.com/spl/dlist/pull/23
  [#25]: https://github.com/spl/dlist/issues/25
  [#26]: https://github.com/spl/dlist/pull/26
  [#28]: https://github.com/spl/dlist/issues/28
  [#29]: https://github.com/spl/dlist/pull/29
  [#30]: https://github.com/spl/dlist/pull/30
  [#31]: https://github.com/spl/dlist/pull/31
  [#32]: https://github.com/spl/dlist/pull/32
  [#33]: https://github.com/spl/dlist/pull/33
  [#35]: https://github.com/spl/dlist/pull/35
  [#36]: https://github.com/spl/dlist/pull/36
  [#43]: https://github.com/spl/dlist/pull/43
  [#45]: https://github.com/spl/dlist/pull/45
  [#46]: https://github.com/spl/dlist/pull/46
  [#47]: https://github.com/spl/dlist/pull/47
  [#50]: https://github.com/spl/dlist/pull/50
  [#55]: https://github.com/spl/dlist/pull/55
  [#59]: https://github.com/spl/dlist/pull/59
  [#60]: https://github.com/spl/dlist/pull/60
  [#69]: https://github.com/spl/dlist/pull/69
  [#70]: https://github.com/spl/dlist/pull/70
  [#71]: https://github.com/spl/dlist/pull/71
  [#72]: https://github.com/spl/dlist/pull/72
  [#73]: https://github.com/spl/dlist/pull/73
  [#74]: https://github.com/spl/dlist/pull/74
  [#76]: https://github.com/spl/dlist/pull/76
  [#77]: https://github.com/spl/dlist/pull/77

  <!-- Commits -->

  [`0e2b3a5`]: https://github.com/spl/dlist/commit/0e2b3a542796b50796f2aa6dde4665911b9d15a1
  [`242511c`]: https://github.com/spl/dlist/commit/242511c501299b38c57efeafb9e604f29cb8bb7a
  [`2d8ec37`]: https://github.com/spl/dlist/commit/2d8ec370a3c19d39c0d543f39f8fc31948087fd9
  [`3176153`]: https://github.com/spl/dlist/commit/3176153187b130002a1577675cdcd5509dd86556
  [`3d9c8ad`]: https://github.com/spl/dlist/commit/3d9c8ad348b419590a121b8a1604e8ebd01bffbe
  [`4f92012`]: https://github.com/spl/dlist/commit/4f920128592f6f99b8c57a1adf50cdb16d26c13b
  [`58ef305`]: https://github.com/spl/dlist/commit/58ef305146474d77a49a3f9e0148393eb6546fd2
  [`5b1d09f`]: https://github.com/spl/dlist/commit/5b1d09f6daad5543d927a003b4ea5ca50f3e6604
  [`5b41d0d`]: https://github.com/spl/dlist/commit/5b41d0d84a0a14c75798ca30883b613b37ad464a
  [`62c0c09`]: https://github.com/spl/dlist/commit/62c0c099d20c3f950d7950dc9ec5a6b3797acaf8
  [`6e1d9e7`]: https://github.com/spl/dlist/commit/6e1d9e74e0a7c7f9c6612cd6bd0b4753f5651968
  [`7494dbc`]: https://github.com/spl/dlist/commit/7494dbc56550a0f7eb09304403a61c68b4a360e3
  [`771a38d`]: https://github.com/spl/dlist/commit/771a38df953b97a631806884133a76ab8dfcfce8
  [`77f6898`]: https://github.com/spl/dlist/commit/77f689829223b5fd6762e24594ce9111e6ef8f6b
  [`9f58759`]: https://github.com/spl/dlist/commit/9f587599f128a4dc147c5c8f907b29b46110763b
  [`a7ea60d`]: https://github.com/spl/dlist/commit/a7ea60d3d02775216a15d6f688db230d7735c9d1
  [`b2f791a`]: https://github.com/spl/dlist/commit/b2f791ab98e2091303fff4567727716b6021b63e
  [`ef7eac5`]: https://github.com/spl/dlist/commit/ef7eac55fc7e180ac3441657f4971ed171b0669c

  <!-- Contributors -->

  [Adam Bergmark]: https://github.com/bergmark
  [Baldur Blöndal]: https://github.com/Icelandjack
  [Bas van Dijk]: https://github.com/basvandijk
  [Bertram Felgenhauer]: https://github.com/int-e
  [Don Stewart]: https://github.com/donsbot
  [Evan Laforge]: https://github.com/elaforge
  [Herbert Valerio Riedel]: https://github.com/hvr
  [Jacob Leach]: https://github.com/riz0id
  [Janek Spaderna]: https://github.com/JaSpa
  [Michael Snoyman]: https://github.com/snoyberg
  [Mikhail Glushenkov]: https://github.com/23Skidoo
  [Oleg Grenrus]: https://github.com/phadej
  [Ryan Scott]: https://github.com/RyanGlScott
  [Sean Leather]: https://github.com/spl
  [Sergei Trofimovich]: https://github.com/trofi
  [Simon Jakobi]: https://github.com/sjakobi
  [Vanessa McHale]: https://github.com/vmchale
  [Veronika Romashkina]: https://github.com/vrom911
changelog-type: markdown
description: |
  # Difference Lists

  [![test-badge][]][test]
  [![hackage-badge][]][hackage-dlist]
  [![packdeps-badge][]][packdeps]

  _**List-like types supporting O(1) `append` and `snoc` operations.**_

  ## Installation

  [`dlist`][hackage-dlist] is a Haskell package available from [Hackage][hackage].
  It can be installed with [`cabal`][cabal] or [`stack`][stack].

  See the [change log][changelog] for the changes in each version.

  ## Usage

  Here is an example of “flattening” a `Tree` into a list of the elements in its
  `Leaf` constructors:

  ```haskell
  import qualified Data.DList as DList

  data Tree a = Leaf a | Branch (Tree a) (Tree a)

  flattenSlow :: Tree a -> [a]
  flattenSlow = go
    where
      go (Leaf x) = [x]
      go (Branch left right) = go left ++ go right

  flattenFast :: Tree a -> [a]
  flattenFast = DList.toList . go
    where
      go (Leaf x) = DList.singleton x
      go (Branch left right) = go left `DList.append` go right
  ```

  (The above code can be found in the [benchmark][].)

  `flattenSlow` is likely to be slower than `flattenFast`:

  1. `flattenSlow` uses `++` to concatenate lists, each of which is recursively
     constructed from the `left` and `right` `Tree` values in the `Branch`
     constructor.

  2. `flattenFast` does not use `++` but constructs a composition of functions,
     each of which is a “cons” introduced by `DList.singleton` (`(x :)`). The
     function `DList.toList` applies the composed function to `[]`, constructing
     a list in the end.

  To see the difference between `flattenSlow` and `flattenFast`, consider some
  rough evaluations of the functions applied to a `Tree`:

  ```haskell
  flattenSlow (Branch (Branch (Leaf 'a') (Leaf 'b')) (Leaf 'c'))
    = go (Branch (Branch (Leaf 'a') (Leaf 'b')) (Leaf 'c'))
    = go (Branch (Leaf 'a') (Leaf 'b')) ++ go (Leaf 'c')
    = (go (Leaf 'a') ++ go (Leaf 'b')) ++ "c"
    = ("a" ++ "b") ++ "c"
    = ('a' : [] ++ "b") ++ "c"
    = ('a' : "b") ++ "c"
    = 'a' : "b" ++ "c"
    = 'a' : 'b' : [] ++ "c"
    = 'a' : 'b' : "c"
  ```

  ```haskell
  flattenFast (Branch (Branch (Leaf 'a') (Leaf 'b')) (Leaf 'c'))
    = toList $ go (Branch (Branch (Leaf 'a') (Leaf 'b')) (Leaf 'c'))
    = toList $ go (Branch (Leaf 'a') (Leaf 'b')) `append` go (Leaf 'c')
    = unsafeApplyDList (go (Branch (Leaf 'a') (Leaf 'b'))) . unsafeApplyDList (go (Leaf 'c')) $ []
    = unsafeApplyDList (go (Branch (Leaf 'a') (Leaf 'b'))) (unsafeApplyDList (go (Leaf 'c')) [])
    = unsafeApplyDList (go (Branch (Leaf 'a') (Leaf 'b'))) (unsafeApplyDList (singleton 'c') [])
    = unsafeApplyDList (go (Branch (Leaf 'a') (Leaf 'b'))) (unsafeApplyDList (UnsafeDList ((:) 'c')) [])
    = unsafeApplyDList (go (Branch (Leaf 'a') (Leaf 'b'))) "c"
    = unsafeApplyDList (UnsafeDList (unsafeApplyDList (go (Leaf 'a')) . unsafeApplyDList (go (Leaf 'b')))) "c"
    = unsafeApplyDList (go (Leaf 'a')) (unsafeApplyDList (go (Leaf 'b')) "c")
    = unsafeApplyDList (go (Leaf 'a')) (unsafeApplyDList (singleton 'b') "c")
    = unsafeApplyDList (go (Leaf 'a')) (unsafeApplyDList (UnsafeDList ((:) 'b')) "c")
    = unsafeApplyDList (go (Leaf 'a')) ('b' : "c")
    = unsafeApplyDList (singleton 'a') ('b' : "c")
    = unsafeApplyDList (UnsafeDList ((:) 'a')) ('b' : "c")
    = 'a' : 'b' : "c"
  ```

  The left-nested `++` in `flattenSlow` results in intermediate list constructions
  that are immediately discarded in the evaluation of the outermost `++`. On the
  other hand, the evaluation of `flattenFast` involves no intermediate list
  construction but rather function applications and `newtype` constructor wrapping
  and unwrapping. This is where the efficiency comes from.

  _**Warning!**_ Note that there is truth in the above, but there is also a lot of
  hand-waving and intrinsic complexity. For example, there may be GHC rewrite
  rules that apply to `++`, which will change the actual evaluation. And, of
  course, strictness, laziness, and sharing all play a significant role. Also, not
  every function in the `dlist` package is the most efficient for every situation.

  _**Moral of the story:**_ If you are using `dlist` to speed up your code, check
  to be sure that it actually does. Benchmark!

  ## Design Notes

  These are some notes on design and development choices made for the `dlist`
  package.

  ### Avoid `++`

  The original intent of Hughes' representation of lists as first-class functions
  was to provide an abstraction such that the list `append` operation found in
  functional programming languages (and now called `++` in Haskell) would not
  appear in left-nested positions to avoid duplicated structure as lists are
  constructed. The lesson learned by many people using list over the years is that
  the `append` operation can appear, sometimes surprisingly, in places they don't
  expect it.

  One of our goals is for the `dlist` package to avoid surprising its users with
  unexpected insertions of `++`. Towards this end, there should be a minimal set
  of functions in `dlist` in which `++` can be directly or indirectly found. The
  list of known uses of `++` includes:

  * `DList`: `fromList`, `fromString`, `read`
  * `DNonEmpty`: `fromList`, `fromNonEmpty`, `fromString`, `read`

  If any future requested functions involve `++` (e.g. via `fromList`), the burden
  of inclusion is higher than it would be otherwise.

  ### Abstraction

  The `DList` representation and its supporting functions (e.g. `append`, `snoc`,
  etc.) rely on an invariant to preserve its safe use. That is, without this
  invariant, a user may encounter unexpected outcomes.

  (We use safety in the sense that the semantics are well-defined and expected,
  not in the sense of side of referential transparency. The invariant does not
  directly lead to side effects in the `dlist` package, but a program that uses an
  unsafely generated `DList` may do something surprising.)

  The invariant is that, for any `xs :: DList a`:

  ```haskell
  fromList (toList xs) = xs
  ```

  To see how this invariant can be broken, consider this example:

  ```haskell
  xs :: DList a
  xs = UnsafeDList (const [])

  fromList (toList (xs `snoc` 1))
    = fromList (toList (UnsafeDList (const []) `snoc` 1))
    = fromList (toList (UnsafeDList (unsafeApplyDList (UnsafeDList (const [])) . (x :))))
    = fromList (toList (UnsafeDList (const [] . (x :))))
    = fromList (($ []) . unsafeApplyDList $ UnsafeDList (const [] . (x :)))
    = fromList (const [] . (x :) $ [])
    = fromList (const [] [x])
    = fromList []
    = UnsafeDList (++ [])
  ```

  The invariant can also be stated as:

  ```haskell
  toList (fromList (toList xs)) = toList xs
  ```

  And we can restate the example as:

  ```haskell
  toList (fromList (toList (xs `snoc` 1)))
    = toList (UnsafeDList (++ []))
    = []
  ```

  It would be rather unhelpful and surprising to find ``(xs `snoc` 1)`` turned out
  to be the empty list.

  To preserve the invariant on `DList`, we provide it as an abstract type in the
  `Data.DList` module. The constructor, `UnsafeDList`, and record label,
  `unsafeApplyDList`, are not exported because these can be used, as shown above,
  to break the invariant.

  All of that said, there have been numerous requests to export the `DList`
  constructor. We are not convinced that it is necessary, but we are convinced
  that users should decide for themselves.

  To use the constructor and record label of `DList`, you import them as follows:

  ```haskell
  import Data.DList.Unsafe (DList(UnsafeDList, unsafeApplyDList))
  ```

  If you are using Safe Haskell, you may need to add this at the top of your
  module:

  ```haskell
  {-# LANGUAGE Trustworthy #-}
  ```

  Just be aware that the burden of proof for safety is on you.

  ## References

  These are various references where you can learn more about difference lists.

  ### Research

  * **A novel representation of lists and its application to the function
    “reverse.”** John Hughes. Information Processing Letters. Volume 22, Issue 3.
    1986-03. Pages 141-144. [PDF][hughes-pdf]

    This is the original published source for a representation of lists as
    first-class functions.

  ### Background

  * [Wikipedia][wikipedia]
  * [Haskell Wiki][wiki-haskell]
  * [Stack Overflow][stack-overflow]

  ### Blogs and Mailing Lists

  * [Using Difference Lists][blog-auclair-1]. Douglas M. Auclair. 2008-08-13.
  * [A Sort of Difference][blog-kmett]. Edward Kmett. 2008-09-18.
  * [Reference for technique wanted][mail-okeefe]. Richard O'Keefe, et al.
    2010-10-31.
  * [24 Days of Hackage: dlist][blog-charles]. Oliver Charles. 2012-12-14.
  * [Constructing a list in a Monad][blog-breitner]. Joachim Breitner. 2013-11-13.
  * [Demystifying DList][blog-ellis] ([Reddit][blog-ellis-reddit]). Tom Ellis.
    2014-01-24.
  * [keepEquals with Difference Lists][blog-auclair-2]. Douglas M. Auclair.
    2014-06-21.

  ### Books

  * [Chapter 13. Data Structures][book-real-world-haskell]. Real World Haskell.
    2008-12-05.

  ## License

  [BSD 3-Clause “New” or “Revised” License][license] © Don Stewart, Sean Leather,
  contributors

  [changelog]: https://github.com/spl/dlist/blob/main/changelog.md#change-log
  [benchmark]: https://github.com/spl/dlist/blob/main/bench/Main.hs
  [blog-auclair-1]: https://logicaltypes.blogspot.com/2008/08/using-difference-lists.html
  [blog-auclair-2]: https://logicaltypes.blogspot.com/2014/06/keepequals-with-difference-lists.html
  [blog-breitner]: https://www.joachim-breitner.de/blog/620-Constructing_a_list_in_a_Monad
  [blog-charles]: https://ocharles.org.uk/blog/posts/2012-12-14-24-days-of-hackage-dlist.html
  [blog-ellis-reddit]: https://www.reddit.com/r/haskell/comments/1w5duf/demystifying_dlist/
  [blog-ellis]: http://h2.jaguarpaw.co.uk/posts/demystifying-dlist/
  [blog-kmett]: https://web.archive.org/web/20080918101635/comonad.com/reader/2008/a-sort-of-difference/
  [book-real-world-haskell]: http://book.realworldhaskell.org/read/data-structures.html
  [cabal]: https://cabal.readthedocs.io/
  [hackage-badge]: https://img.shields.io/hackage/v/dlist.svg?maxAge=3600
  [hackage-dlist]: https://hackage.haskell.org/package/dlist
  [hackage]: https://hackage.haskell.org/
  [hughes-pdf]: https://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/lists.pdf
  [license]: https://github.com/spl/dlist/blob/main/license.md
  [mail-okeefe]: https://www.mail-archive.com/haskell-cafe@haskell.org/msg83699.html
  [packdeps-badge]: https://img.shields.io/hackage-deps/v/dlist.svg?maxAge=3600
  [packdeps]: http://packdeps.haskellers.com/feed?needle=dlist
  [stack-overflow]: https://stackoverflow.com/questions/3352418/what-is-a-dlist
  [stack]: https://docs.haskellstack.org/
  [test-badge]: https://github.com/spl/dlist/workflows/test/badge.svg
  [test]: https://github.com/spl/dlist/actions?query=workflow%3Atest
  [wiki-haskell]: https://wiki.haskell.org/Difference_list
  [wikipedia]: https://en.wikipedia.org/wiki/Difference_list
description-type: markdown
hash: 854727594c5a816ab3d10f15b1bc4fedaf9e3f7d1ef517a2bb9011f29ba261d2
homepage: https://github.com/spl/dlist
latest: '1.0'
license-name: BSD-3-Clause
maintainer: Sean Leather <sean.leather@gmail.com>
synopsis: Difference lists
test-bench-deps:
  QuickCheck: '>=2.10 && <3'
  base: '>=0'
  dlist: '>=0'
