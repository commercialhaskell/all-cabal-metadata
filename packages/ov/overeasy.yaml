all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
author: Eric Conlon
basic-deps:
  algebraic-graphs: '>=0.5 && <0.7'
  base: '>=4.12 && <5'
  containers: '>=0.6 && <0.7'
  deepseq: '>=1.4 && <1.5'
  hashable: '>=1.3 && <1.5'
  int-like: '>=0.1.1 && <0.2'
  logict: '>=0.7 && <0.9'
  mtl: '>=2.2 && <2.3'
  recursion-schemes: '>=5.2 && <5.3'
  text: '>=1.2 && <2.1'
  transformers: '>=0.5 && <0.7'
  unfree: '>=0.1 && <0.2'
  unordered-containers: '>=0.2 && <0.3'
changelog: ''
changelog-type: ''
description: |
  # overeasy

  [![CircleCI](https://circleci.com/gh/ejconlon/overeasy/tree/master.svg?style=svg)](https://circleci.com/gh/ejconlon/overeasy/tree/master)

  A purely functional E-Graph library

  ## Quick start

  If you have `stack` installed (see below), try `make ghci` to hop into a REPL. Then try `exampleMain` or anything else from the `Overeasy.Example` module.

  ## More on how to build and run

  This repo is setup so you never have to `cd` out of the root directory.

  To run the Haskell programs, you need `stack` installed on your system. [This](https://docs.haskellstack.org/en/stable/README/) is an easy way to do so, but you can also check your package manager or use [ghcup](https://www.haskell.org/ghcup/).

  Most of the interesting stuff is going to be run in the test suite. Run it with `make test`. `stack` will get the appropriate Haskell compiler and package dependencies, and it will compile the project before running the test suite.
description-type: markdown
hash: b62b412ad5845f24a1d49e0cf30bd868448051cdb5b48262c1a633efbce37744
homepage: https://github.com/ejconlon/overeasy#readme
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: ejconlon@gmail.com
synopsis: A purely functional E-Graph library
test-bench-deps:
  algebraic-graphs: '>=0.5 && <0.7'
  base: '>=4.12 && <5'
  containers: '>=0.6 && <0.7'
  deepseq: '>=1.4 && <1.5'
  hashable: '>=1.3 && <1.5'
  hedgehog: '>=1.0 && <1.1'
  int-like: '>=0.1.1 && <0.2'
  logict: '>=0.7 && <0.9'
  mtl: '>=2.2 && <2.3'
  overeasy: '>=0'
  prop-unit: '>=0.1 && <0.2'
  recursion-schemes: '>=5.2 && <5.3'
  text: '>=1.2 && <2.1'
  transformers: '>=0.5 && <0.7'
  unfree: '>=0.1 && <0.2'
  unordered-containers: '>=0.2 && <0.3'
