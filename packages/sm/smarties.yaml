all-versions:
- 1.2.1
author: pdlla
basic-deps:
  MonadRandom: '>=0'
  QuickCheck: '>=2.11'
  base: '>=4.7 && <5.0'
  haskeline: '>=0'
  ilist: '>=0'
  microlens: '>=0'
  microlens-th: '>=0'
  mtl: '>=0'
  random: '>=0'
  smarties: '>=0'
  text: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for smarties
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
  and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

  ## [1.2.1] - 2020-03-27
  ### Added
  - more tests cases in `Smarties`

  ### Changed
  - renamed `runNodes` to `runNodeSequenceT` to be more consistent with `StateT`
  - cleaned up dependencies

  ## [1.2.0] - 2020-03-26
  ### Added
  - travis CI
  - tests cases for `Smarties.Builder`

  ### Changed
  - removed non transformer variant of smarties
  - simplified some interfaces
  - possibly fixed some bugs.
  - improved README.md

  ## [1.1.0] - 2018-11-07
  ### Added
  - Added `Smarties.Trans` containing Monad Transformer variant `NodeSequenceT`. Currently as separate module for performance reasons. I still have to do side by side benchmarks. I'm pretty sure it's a substantial performance hit especially due to all the extra wrapping/unwrapping that happens in selector nodes.
  - Added transformer variants in `Smarties.Trans.Builders`
  - Added Conway's Game of Life tutorial to examples
  - Haddock comment cleanup

  ### Changed
  - Utility type no longer requires `Num`/`Ord` constraints, these constraints are enforced by the selectors that use them.
  - Pronouns moved out of main README.md
  - updated Pronouns README.md

  ### Removed
  - Removed `sequence` method. Just use `do` notation
  - Removed NotSoSmarties

  ## [1.0.2] - 2018-05-08
  ### Added
  - This ChangeLog.md file is being updated now.

  ### Changed
  - README.md updated

  ### Removed
  - `TreeState` and `TreeStack` modules both removed. They aren't necessary and their functionality is better done by monadic syntax.

  ## 1.0.1
  ### Added
  - First proper release

  [Unreleased]: https://github.com/pdlla/smarties/compare/v1.0.2...HEAD
  [1.0.2]:https://github.com/pdlla/smarties/compare/v1.0.1...v1.0.2
changelog-type: markdown
description: "[![Build Status](https://travis-ci.com/pdlla/smarties.svg?branch=master)](https://travis-ci.com/pdlla/smarties)\n\n#
  smarties\nSmarties is a general purpose [behavior tree](https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control))
  (BT) library written in Haskell. The library supports utility AI for advanced decision
  making. Smarties implements many of the design patterns outlined in this [paper](https://course.ccs.neu.edu/cs5150f13/readings/dill_designpatterns.pdf)
  and some that aren't.\n\nBTs are written in a DSL built with the **NodeSequence**
  monad. Monadic return values are used for computing utility and passing state between
  nodes.\n\nTo jump right in, please see the this tutorial example implementing [Conway's
  Game of Life](https://github.com/pdlla/smarties/tree/master/examples/tutorial).
  There are other examples in the examples folder that I either put in too little
  or too much effort.\n\n## Terminology\n- **perception**: input and computation state
  of the BT. Named perception because it represents how the tree perceives the outside
  world. It's possible to write nodes that modify **perception** so that your BT has
  mutable perception (or state). Since you are already writing in Haskell, you probably
  don't ever want to do this.\n- **sequence**: control node that executes each child
  node in sequence until it hits a FAIL node and collects all output.\n- **selector**:
  control node that executes the first SUCCESS node.\n- **utility**: optional monadic
  output for a node that can be used for more complex control flow. For example **utilitySelector**
  executes the node that has the largest utility.\n\n## Understanding the NodeSequence
  Monad\n**NodeSequence** is a computation that executes all it's internal nodes.
  At each **>>=** it will check the output and early exit if it reaches a **FAIL**.\n\n**NodeSequence**
  has the following definition\n\n```haskell\ndata NodeSequenceT g p o m a =  NodeSequence
  { runNodeSequenceT :: g -> p -> (a, g, p, Status, [o]) }\n```\n\nThe sequence represents
  a computation that takes a generator and perception and returns an output with the
  following types:\n\n- **a**: monad output type, typically used for computing utility\n-
  **g**: random generator\n- **p**: perception type\n- **Status**: Status of executing
  NodeSequence, either **SUCCESS** or **FAIL**\n- **o**: output type (or action type)\n\n**NodeSequence**
  looks a lot like **StateT (p,g) Writer [o]** except with an additional Status output.
  The difference is that with each **>>=** if the input computation has Status **FAIL**,
  the monad will stop accumulating changes on **p** and appending to **[o]**. Note
  that it will continue to pass through **p** and **g** to evaluate the monadic return
  value **a** which is needed for things like utility selectors. Thus running **NodeSequence**
  produces an **a** and two thunks representing the perception and output up until
  the first **FAIL**.\n\nThe monadic return value is useful for passing general information
  between nodes. For example it's possible to implement loops:\n\n```haskell\nhowQueerIsMyFriend
  = sequence $ do\n\tx <- getFriend\n\tn <- numberFriendsOf x\n\tclique <- forM [0..(n-1)]
  (\\n' -> do\n\t\ts <- getFriendOf x n'\n\t\treturn queerness s\n\t\t)\n\treturn
  (mean clique)\n```\n\n## Builders\nSmarties provides the `Smarties.Builders` module
  for building your own logic nodes which are needed to actually use Smarties in a
  project. It supports the following types of nodes:\n\n- `Condition`: create a condition
  node\n- `Action`: create an action node\n- `Utility`: create a node that returns
  a utility score\n- `Perception`: create a node that modify the perception\n\nEach
  builder (except for `Perception`) has a simple variant (prefixed by `Simple`) which
  ensures the **perception** is immutable. You'll want to use the simple variants
  in most cases.\n\nTo keep the syntax simple in most cases, there are non-transformer
  variants of each builder which wrap the transformer ones.\n\n## Other\n- Smarties
  gives access to the (rather simple) BT control methods in `Smarties.Nodes`. Most
  of its power comes from the flexibility of monadic syntax. In some cases, it may
  be better/simpler to use something like **StateT (p,g) Writer [o]**. Sequence and
  selectors are still possible with monadic operations like [`ifM`](https://hackage.haskell.org/package/extra-1.7.1/docs/Control-Monad-Extra.html).\n\n##
  Additional Features: <a id=\"missing\"></a>\nSome ideas for features to add to this
  package. I'll probably never get to these but feel free to submit a PR.\n\n- Built
  in support for [Statistic.Distribution.Normal](https://hackage.haskell.org/package/statistics-0.14.0.2/docs/Statistics-Distribution-Normal.html)
  for modeling risk reward. This includes [basic](https://en.wikipedia.org/wiki/Sum_of_normally_distributed_random_variables)
  [operations](https://ccrma.stanford.edu/~jos/sasp/Product_Two_Gaussian_PDFs.html)
  on distributions.\n\n- It is possible to modify **perception** during tree execution.
  This is only recommended in the special case where the input state is same as what
  the tree is operating on as a whole in which case the tree represents a sequential
  set of operations on a value. e.g. **NodeSequence g Int (Int->Int)** represents
  operations on an Int value. In these cases, ensure the **SelfActionable p o** constraint
  is satisfied and use **SelfAction** which is the same as **Action** except also
  applies the output to the perception. The current implementation is a little idiosyncratic
  and I may remove in the future so it's mentioned here for now.\n"
description-type: markdown
hash: 40dbd6c2cfca89c24e975d2914e4e156670abcf151491e78d6875dcd55117b76
homepage: https://github.com/pdlla/smarties#readme
latest: 1.2.1
license-name: BSD-3-Clause
maintainer: chippermonky@gmail.com
synopsis: Haskell Behavior Tree Library
test-bench-deps:
  MonadRandom: '>=0'
  QuickCheck: '>=2.11'
  base: '>=4.7 && <5.0'
  hspec: '>=0'
  microlens: '>=0'
  microlens-th: '>=0'
  mtl: '>=0'
  random: '>=0'
  smarties: '>=0'
  text: '>=0'
