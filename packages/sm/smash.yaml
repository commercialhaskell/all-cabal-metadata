homepage: https://github.com/emilypi/smash
changelog-type: markdown
hash: de7ac7df5affa36f1c42aef8286f1827202fa1e3ea8ae15d396085603f51ab44
test-bench-deps: {}
maintainer: emilypi@cohomolo.gy
synopsis: Smash products, wedge products, and pointed products
changelog: |
  # Revision history for possibly-can

  ## 0.1.2

  * Add Monad Transformers for `Can`, `Wedge`, and `Smash` ([#25](https://github.com/emilypi/smash/pull/25))
  * Add Safe haskell pragmas
  * Add instances for all functor classes.
  * Add instances for `MonadZip`
  * Add nice pointfree definitions for some functions ([#24](https://github.com/emilypi/smash/pull/24), thanks @subttle!)
  * Add unfolds to the Api.
  * Add template haskell `Lift` instance ([#20](https://github.com/emilypi/smash/pull/20), thanks @gergoerdi!)
  * Fixes for various haddock problems (thank you @lemastero and @L7R7!)
  * Bump base to exclude 8.2.x

  ## 0.1.1

  * Add `NFData`, `Binary` instances
  * CPP to extend to 8.2.2 without warnings

  ## 0.1.0.0

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.11 && <4.16'
  bifunctors: ^>=5.5
  binary: ^>=0.8
  mtl: -any
  hashable: ^>=1.3
  deepseq: ^>=1.4
  template-haskell: '>=2.2 && <3.0'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2
author: Emily Pillmore
latest: 0.1.2
description-type: markdown
description: |
  # smash: Combinators for Maybe types

  [![Build Status](https://travis-ci.com/emilypi/smash.svg?branch=master)](https://travis-ci.com/emilypi/smash)
  [![Hackage](https://img.shields.io/hackage/v/smash.svg)](https://hackage.haskell.org/package/smash)

  This package consists of 3 interesting datatypes and their respective monad transformers:

   - [Wedge](https://hackage.haskell.org/package/smash/docs/Data-Wedge.html): Isomorphic to `Maybe (Either a b)`. The `Wedge` datatype represents the coproduct in the category Hask\* of pointed Hask types, called a [wedge sum](https://ncatlab.org/nlab/show/wedge+sum). One can derive this type as follows:

      ```haskell
      Either (Maybe a) (Maybe b)
      ~ (1 + a) + (1 + b)
      -- units are the same via pushout
      ~ 1 + a + b
      ~ Maybe (Either a b)
      ~ Wedge a b
      ```

   - [Can](https://hackage.haskell.org/package/smash/docs/Data-Can.html): Isomorphic to `Maybe (These a b)`. The `Can` datatype represents the product in Hask\*. One can derive this as follows:

      ```haskell
      (Maybe a, Maybe a)
      ~ (1 + a) * (1 + b)
      -- products distribute over coproducts
      ~ 1 + b + a + a*b
      -- coproducts are associative
      ~ 1 + (b + a + a*b)
      ~ 1 + These a b
      ~ Maybe (These a b)
      ~ Can a b
      ```

   - [Smash](https://hackage.haskell.org/package/smash/docs/Data-Smash.html): Isomorphic to `Maybe (a,b)`. The `Smash` datatype represents a special type of product, a
  [smash product](https://ncatlab.org/nlab/show/smash+product), in the category Hask\*.  The smash product is a symmetric, monoidal tensor in Hask* that is the quotient of `Can` over `Wedge`. It can be derived as follows:

      ```haskell
      Can a b / Wedge a b
      ~ 1 + a + b + a*b / 1 + a + b
      -- reassoc coproduct
      ~ (1 + a + b) + a*b / 1 + a + b
      -- def. of quotient: (1 + a + b) ~ 1
      ~ 1 + a * b
      ~ Maybe (a,b)
      ~ Smash a b
      ```
license-name: BSD-3-Clause
