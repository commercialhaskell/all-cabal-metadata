homepage: https://github.com/Bodigrim/smallcheck
changelog-type: markdown
hash: b976cf0bbab4ba29f61933df10740cc19cd17548b5a3d1f8e0205840a1a89738
test-bench-deps: {}
maintainer: Andrew Lelechenko <andrew.lelechenko@gmail.com>
synopsis: A property-based testing library
changelog: |
  Changes
  =======

  Version 1.2.1.1
  -------------

  * Annotate everything with `@since` pragmas.

  Version 1.2.1
  -------------

  * Add `Serial` and `CoSerial` instances for `Ordering`.

  Version 1.2.0
  -------------

  * Add `Serial` and `CoSerial` instances for
    `(,,,,)`, `(,,,,,)`,
    `Compose`,
    `Foreign.C.Types`,
    `Data.List.NonEmpty`,
    `Void`,
    `Complex`.
  * Add `Bounded`, `Functor`, `Foldable` and `Traversable` instances
    for `Positive` and `NonNegative` wrappers.
  * Add `NonZero` wrapper for non-zero integers.
  * Add `cons5`, `cons6`, `alts5`, `alts6`.

  Version 1.1.7
  -------------

  * Fix overlapping instances of `GSerial`.

  Version 1.1.6
  -------------

  * Mark modules as `Safe`, not just `Trustworthy`.

  Version 1.1.5
  -------------

  * Add `limit :: Monad m => Int -> Series m a -> Series m a`
  * Add `genericSeries` and `genericCoseries`, so that you can use the generic
    implementations more flexibly. Previously, the generic implementation was
    only available as the default method for `series`/`coseries` but not as
    standalone functions.

  Version 1.1.4
  -------------

  * Add instances for fixed-width Int and Word types (Int8, Word8 etc.)

  Version 1.1.3.1
  ---------------

  * Fix compatibility with GHC 7.8 and older

  Version 1.1.3
  -------------

  * Add `Serial` and `CoSerial` instances for `Word` and `Natural`

  Version 1.1.2
  -------------

  * Export the `test` function
  * Add a `listSeries` function

  Version 1.1.1
  -------------

  Export some auxiliary functions from `T.S.Series`, and document how to express
  `consN` and `altsN` for `N > 4`.

  Version 1.1.0.1
  ---------------

  Documentation fixes

  Version 1.1
  -----------

  * Add a `Serial` instance for `Ratio`
  * Add the `NonEmpty` wrapper for lists
  * Add `listM` (the monadic version of `list`)
  * Add optional explanation for test outcomes

  Version 1.0.4
  -------------

  Fix compatibility with GHC 7.4.1

  Version 1.0.3
  -------------

  Fix a bug where no test cases were generated for some functional types (#19).

  Version 1.0.2
  -------------

  Fix a bug in the generic instance

  Version 1.0.1
  -------------

  Make SmallCheck build with GHC 7.4

  Version 1.0
  -----------

  This is a major incompatible release of SmallCheck. Virtually every function has
  changed its name, type, semantics or module. So please carefully read the docs
  when upgrading.

  For some highlights, see [this blog post](http://ro-che.info/articles/2013-02-19-smallcheck.html).

  Version 0.6.2
  -----------
  * Derive Typeable Property instance
  * Add smallCheckPure

  Version 0.6.1
  -----------

  * Documentation improvements
  * Make the package build with GHC 7.4.1

  Version 0.6
  -----------

  * Default Generic implementation of Serial instance (by Bas van Dijk)
  * The code is split into modules
  * Convert much of README into haddock documentation
  * Many small API changes
  * Remove impure Testable (IO a) instance

  Version 0.5
  -----------

  Make the package build with GHC 7.2. Some cosmetic changes.

  Version 0.4
  -----------

  The module SmallCheck is now Test.SmallCheck.  Packaged with Cabal.

  Version 0.3
  -----------

  Existential quantifiers now have unique variants for which two witnesses
  are reported when uniqueness fails.  The over-generating coseries method
  for functions of functional arguments has been replaced; now 'coseries'
  and the 'alts<N>' family take a series argument. Test counters are
  now Integers, not Ints.  Ord and Eq are now derived for the N types.
  Examples extended.

  Version 0.2
  -----------

  The 'smallCheck' driver now takes an argument d and runs test series
  at depths 0..d without interaction, stopping if any test fails.
  The interactive variant is still available as 'smallCheckI'.  All
  Prelude numeric types now have Serial instances, including floating-point
  types. Serial types Nat and Natural are also defined.  Examples extended.

  Version 0.1
  -----------

  The differences from 0.0 are two fixes (space-fault, output buffering),
  an 'unsafe' but sometimes useful Testable (IO a) instance and additional
  examples.
basic-deps:
  logict: '>=0.5 && <0.9'
  base: '>=4.3 && <5'
  mtl: <2.4
  pretty: <1.2
all-versions:
- 0.2.1
- '0.4'
- '0.5'
- '0.6'
- 0.6.1
- 0.6.2
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- '1.1'
- 1.1.0.1
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.3.1
- 1.1.4
- 1.1.5
- 1.1.7
- 1.2.0
- 1.2.1
- 1.2.1.1
author: Colin Runciman, Roman Cheplyaka
latest: 1.2.1.1
description-type: markdown
description: |
  SmallCheck: a property-based testing library for Haskell
  ========================================================

  **As of 2023, this library is largely obsolete: arbitrary test generators
  with shrinking such as [`falsify`](https://hackage.haskell.org/package/falsify)
  offer much better user experience.**

  SmallCheck is a testing library that allows to verify properties for all test
  cases up to some depth. The test cases are generated automatically by
  SmallCheck.

  Usefulness of such an approach to testing is based on the following observation:

  > If a program fails to meet its specification in some cases, it almost always
  > fails in some simple case.

  In many ways SmallCheck is very similar to QuickCheck. It uses the idea of type-based generators for test data, and the way testable properties are expressed is closely based on the QuickCheck approach. Like QuickCheck, SmallCheck tests whether properties hold for finite completely defined values at specific types, and reports counter-examples.

  The big difference is that instead of using a sample of randomly generated values, SmallCheck tests properties for all the finitely many values up to some depth, progressively increasing the depth used. For data values, depth means depth of construction. For functional values, it is a measure combining the depth to which arguments may be evaluated and the depth of possible results.

  The package is based on the [paper](http://www.cs.york.ac.uk/fp/smallcheck/smallcheck.pdf)
  by Colin Runciman, Matthew Naylor and Fredrik Lindblad.
license-name: BSD-3-Clause
