all-versions:
- 1.0.0
- 1.1.0
- 1.2.0
- 1.3.0
author: ''
basic-deps:
  HasCacBDD: '>=0.2.0.0 && <0.3'
  QuickCheck: '>=2.14.3 && <2.15'
  ansi-terminal: '>=0.11.5 && <1.2'
  array: '>=0.5.4 && <0.6'
  base: '>=4.8 && <5'
  containers: '>=0.6.7 && <0.7'
  decision-diagrams: '>=0.2.0 && <0.3'
  directory: '>=1.3.7 && <1.4'
  filepath: '>=1.4.2 && <1.5'
  graphviz: '>=2999.20.2 && <2999.21'
  process: '>=1.6.18 && <1.7'
  smcdel: '>=0'
  tagged: '>=0.8.0 && <0.9'
  temporary: '>=1.3 && <1.4'
  text: '>=2.0.2 && <2.1'
  time: '>=1.12.2 && <1.13'
changelog: |
  # SMCDEL Changelog

  ## v1.3.0 (2022-04-24)

  New:

  - ZDDs as alternative in `SMCDEL.Symbolic.S5_CUDD` and `SMCDEL.Symbolic.K_CUDD` (by @dushiel)
  - `SMCDEL.Symbolic.Ki` and `SMCDEL.Symbolic.Ki_CUDD` using one agent-indexed DD (by @dushiel)
  - `SMCDEL.Symbolic.S5_DD`: using the pure Haskell `decision-diagrams` library
  - Examples: add generalised versions of Sum and Product and Dining Cryptographers
  - Web and CLI: add `ONEOF` keyword to allow formulas like `ONEOF (p, q, r)` - fix #21
  - Web and CLI: allow lists after Kw for formulas like `bob knows whether (p, q)`
  - Add gitpod and devcontainer configurations
  - Haddock documentation, replacing the literate Haskell PDF document
  - Add `D` and `Dw` operators for distributed knowledge (by @foxyseta and @BasLaa)
  - Multipointed models and structures for S5

  Changed:

  - Web UI improvements: syntax highlighting, vertically maximized
  - Use `defaultVocabulary` also for random Boolean formulas (and thus BDDs)
  - Use `open` instead of hardcoding Okular
  - Use newer HasCacBDD with faster `sizeOf`
  - Bug fixes in `simStep`

  ## v1.2.0 (2022-02-22)

  New:

  - "TRUE?" command in Web and CLI interface to check truth at a single state
  - multipointed translations for S5, including action models
  - `instance Optimizable` for symbolic structures
  - provide `whereViaBdd` also in `SMCDEL.Symbolic.S5_CUDD`
  - sanity check input for Web and CLI interface
  - integration tests for web interface

  Changed:

  - improve test coverage
  - correction to Cheryl's Birthday example
  - new definitions and functions for `MultipointedEvent = (Transformer,Bdd)`
  - swapped argument order of `icSolves`
  - use HasCacBDD-0.1.0.3
  - update ace.js and MathJax
  - check if dot2tex is available before using it
  - compile web with -threaded to prevent the error `file descriptor ... out of range`
  - bugfix in `SMCDEL.Internal.Help.set`
  - bugfix in `SMCDEL.Translations.S5.actionToTransformerWithMap` to fix #17
  - test coverage and bugfix for `SMCDEL.Symbolic.S5.generatedSubstructure`
  - do not shrink to empty models
  - web: listen only on 127.0.0.1, use PORT env variable

  ## v1.1.0 (2019-12-09)

  New:

  - minimization under bisimulation
  - dynamic operators in formulas via `Data.Dynamic`
  - multipointed models, action models, structures and events
  - added Cheryl's Birthday and Cheryl's Age examples
  - experimental functions for epistemic planning (with small examples)
  - more instances for QuickCheck, more tests
  - add S5 to K conversion in `SMCDEL.Translations.Convert`
  - improvements to the web interface

  Changed:

  - polymorphic `update` replaces `productUpdate`, `transform`, `pubAnnounce` etc.
  - factual change by default: merge `Symbolic.S5.Change` into `Symbolic.S5` etc.
  - remove changeprops in (Kn)Trf to avoid redundancy with changelaw
  - move BDD related functions to HasCacBDD (`substit`, `substitSimul`)
  - avoid `Data.Map` in S5 modules, no longer depend on `lens`
  - replace `.cabal` file with a `package.yml` for `hpack`


  ## v1.0.0  (2018-02-26)

  New:

  - action models and transformers with factual change
  - NonS5 modules, now called K, are no longer experimental
  - separate types State and World
  - automated testing and benchmarks
  - lots of bugfixes

  Removed:

  - removed support for robbed, NooBDD and Z3
  - old Example files


  ## v0.2  (2015-11-17)

  First release with a standalone-executable.


  ## v0.1  (2015-09-21)

  The first public version of SMCDEL. Note that this version does not contain a
  stand-alone executable. It can only be used as a Haskell library.
changelog-type: markdown
description: |
  # SMCDEL

  [![Release](https://img.shields.io/github/release/jrclogic/SMCDEL.svg)](https://github.com/jrclogic/SMCDEL/releases)
  [![Hackage](https://img.shields.io/hackage/v/smcdel.svg)](https://hackage.haskell.org/package/smcdel)
  [![GitLab CI](https://gitlab.com/m4lvin/SMCDEL/badges/master/pipeline.svg)](https://gitlab.com/m4lvin/SMCDEL/-/pipelines)
  [![Test Coverage](https://gitlab.com/m4lvin/SMCDEL/badges/master/coverage.svg)](https://gitlab.com/m4lvin/SMCDEL/-/jobs/artifacts/master/file/hpc/combined/all/hpc_index.html?job=test)
  [![DOI](https://zenodo.org/badge/36519077.svg)](https://zenodo.org/badge/latestdoi/36519077)

  A symbolic model checker for [Dynamic Epistemic Logic](https://plato.stanford.edu/entries/dynamic-epistemic).


  ## Online

  You can try SMCDEL online here: https://w4eg.de/malvin/illc/smcdelweb/


  ## Basic usage

  1) Use *stack* from https://www.stackage.org

  - `stack install` will build and install an executable `smcdel`
    into `~/.local/bin` which should be in your `PATH` variable.

  2) Create a text file `MuddyShort.smcdel.txt` which describes the knowledge structure and the formulas you want to check for truth or validity:

      ```
      -- Three Muddy Children in SMCDEL
      VARS 1,2,3
      LAW  Top
      OBS  alice: 2,3
           bob:   1,3
           carol: 1,2
      WHERE?
        [ ! (1|2|3) ] alice knows whether 1
      VALID?
        [ ! (1|2|3) ]
        [ ! ((~ (alice knows whether 1)) & (~ (bob knows whether 2)) & (~ (carol knows whether 3))) ]
        [ ! ((~ (alice knows whether 1)) & (~ (bob knows whether 2)) & (~ (carol knows whether 3))) ]
        (alice,bob,carol) comknow that (1 & 2 & 3)
      ```

  3) Run `smcdel MuddyShort.smcdel.txt` resulting in:

      ```
      >> smcdel MuddyShort.smcdel.txt
      SMCDEL 1.0 by Malvin Gattinger -- https://github.com/jrclogic/SMCDEL

      At which states is ... true?
      []
      [1]

      Is ... valid on the given structure?
      True
      ```

      More example files are in the folder [Examples](https://github.com/jrclogic/SMCDEL/tree/master/Examples).

  4) To also build and install the web interface, run `stack install --flag smcdel:web`
     Then you can run `smcdel-web` and open <http://localhost:3000>.


  ## Advanced usage

  The executables only provide model checking for S5 with public announcements.
  For K and to define more complex models and updates, SMCDEL should be used as a Haskell library.
  Please refer to the [Haddock documentation](https://hackage.haskell.org/package/smcdel) for each module.

  Examples can be found in the folders
    [src/SMCDEL/Examples](https://github.com/jrclogic/SMCDEL/tree/master/src/SMCDEL/Examples)
  and
    [bench](https://github.com/jrclogic/SMCDEL/tree/master/bench).

  *Dependencies*:
  To get all visualisation functions working, [graphviz](https://graphviz.org/), [dot2tex](https://github.com/kjellmf/dot2tex) and some LaTeX packages should be installed.
  On Debian, please do `sudo apt install graphviz dot2tex libtinfo5 texlive-latex-base poppler-utils preview-latex-style texlive-pstricks`.


  ## Used BDD packages

  SMCDEL uses different BDD packages.

  - [Data.HasCacBDD](https://github.com/m4lvin/HasCacBDD) which runs CacBDD from <http://kailesu.net/CacBDD/>.
    This is the default choice used by the executables and the modules `Symbolic.S5` and `Symbolic.K`.

  - The pure Haskell library [`decision-diagrams`](https://github.com/msakai/haskell-decision-diagrams).
    It is used by the module `Symbolic.S5_DD`.

  - Optionally, [Cudd](https://github.com/davidcock/cudd) ([with some patches](https://github.com/m4lvin/cudd))
    which uses the CUDD library.
    To obtain the modules `SMCDEL.Symbolic.S5_CUDD`, `SMCDEL.Symbolic.S5_K`, `SMCDEL.Symbolic.S5_Ki`
    you should compile with `stack build --flag smcdel:with-cudd`.


  ## References

  Main reference for the theory behind the implementation, also containing benchmarks:

  - [Malvin Gattinger:
  *New Directions in Model Checking Dynamic Epistemic Logic.*
  PhD thesis, ILLC, Amsterdam,
  2018](https://malv.in/phdthesis/).

  Additional publications:

  - [Johan van Benthem, Jan van Eijck, Malvin Gattinger, and Kaile Su:
  *Symbolic Model Checking for Dynamic Epistemic Logic.*
  In: Proceedings of The Fifth International Conference on Logic, Rationality and Interaction (LORI-V),
  2015](https://doi.org/10.1007/978-3-662-48561-3_30).

  - [Johan van Benthem, Jan van Eijck, Malvin Gattinger, and Kaile Su:
  *Symbolic Model Checking for Dynamic Epistemic Logic --- S5 and Beyond.*
  Journal of Logic and Computation,
  2017](https://pure.uva.nl/ws/files/25483686/2016_05_23_del_bdd_lori_journal.pd.pdf).

  - [Malvin Gattinger:
  *Towards Symbolic Factual Change in DEL.*
  ESSLLI 2017 student session,
  2017](https://w4eg.de/malvin/illc/2017-07-symbolicfactualchange.pdf).

  - [Daniel Miedema, Malvin Gattinger:
  *Exploiting Asymmetry in Logic Puzzles: Using ZDDs for Symbolic Model Checking Dynamic Epistemic Logic*,
  TARK 2023,
  2023](https://doi.org/10.4204/EPTCS.379.32)
description-type: markdown
hash: 97b7b7a09199c76b7a2f552fce28973bf448d9eb44e059a228571f6a454b73fd
homepage: https://github.com/jrclogic/SMCDEL#readme
latest: 1.3.0
license-name: GPL-2.0-only
maintainer: Malvin Gattinger <malvin@w4eg.eu>
synopsis: Symbolic Model Checking for Dynamic Epistemic Logic
test-bench-deps:
  HasCacBDD: '>=0'
  QuickCheck: '>=0'
  base: '>=4.8 && <5'
  bytestring: '>=0'
  cassava: '>=0'
  containers: '>=0'
  criterion: '>=0'
  directory: '>=0'
  hspec: '>=0'
  scientific: '>=0'
  smcdel: '>=0'
  split: '>=0'
  time: '>=0'
  vector: '>=0'
