all-versions:
- 0.0.1
author: Mark Hibberd
basic-deps:
  aeson: '>=1.0 && <1.5'
  base: '>=4.10 && <5'
  bytestring: '>=0 && <1'
  directory: '>=1 && <2'
  filepath: '>=1 && <2'
  http-client: '>=0.5 && <0.6'
  http-client-tls: '>=0.2 && <0.4'
  http-types: '>=0 && <1'
  jose: '>=0.7 && <0.8'
  oauth2-jwt-bearer: '>=0.0 && <0.1'
  text: '>=1 && <2'
  transformers: '>=0.4 && <0.6'
  transformers-bifunctors: '>=0 && <1'
changelog: |
  # Revision history for smith-client

  ## 0.1.0.0  -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # smith-client

  This is a client-library for the [Smith](https://smith.st) API.

  The goal is to provide a convenient Haskell API for working with
  the API.


  ### Configuration

  The default 'configure' function will source credentials configuration as follows:
   - It will check for an environment provided API key in '$SMITH_JWK'.
   - It will fall-back to looking for '$SMITH_HOME/credentials.json' if '$SMITH_HOME' is set.
   - It will fall-back to looking for '$HOME/.smith/credentials.json'.

  The default 'configure' function will source endpoint configuration as follows:
   - It will check for an environment provided endpoint in '$SMITH_ENDPOINT'.
   - It will fall-back to the public production endpoint 'https://api.smith.st'.


  ### Stability

  This library is new, and should have the disclaimers that normally
  comes with that. It is expected that most people will interact with
  `smith-cli` rather than directly with this library, however if you
  do use this library directly, please note that whilst compatibility
  won't be broken unless necessary there are a few parts of the library
  (for example error handling) that will be evolved and polished as an
  official release version of the API is available.


  ### Example

  A crude example:

  ```
  import qualified Data.Text.IO as Text

  import qualified Smith.Client as Smith
  import           Smith.Client.Data.User
  import           Smith.Client.Error (SmithError (..))

  example :: IO (Either SmithError UserInfo)
  example =
    Smith.configure >>= \c -> case c of
      Left err ->
         Text.putStrLn . Smith.renderSmithConfigureError $ err
      Right smith ->
        Smith.runRequest smith Smith.userinfo
  ```


  ### Development

  The simplest way to develop this library is working against the
  [Pact](https://docs.pact.io/) stub server (depends on docker).

  ```
  # Configures and starts a docker container with API stubs.
  /bin/ghci-stub
  ```
description-type: markdown
hash: 08242f519240238f5171f71809893be7c2f1d676438341bbee6aa7ae8d04906b
homepage: https://github.com/smith-security/smith-client
latest: 0.0.1
license-name: BSD-3-Clause
maintainer: mth@smith.st
synopsis: API client for <https://smith.st/ Smith>.
test-bench-deps:
  aeson: '>=0'
  base: '>=4.10 && <5'
  bytestring: '>=0'
  case-insensitive: '>=0'
  hedgehog: '>=0.6 && <0.7'
  http-types: '>=0'
  smith-client: '>=0'
  text: '>=0'
  transformers: '>=0'
