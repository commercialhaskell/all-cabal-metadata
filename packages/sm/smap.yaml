all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.2
- 0.3.3
author: Will Yager
basic-deps:
  attoparsec: '>=0.13.2.2 && <0.14'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8.2 && <0.11'
  hashable: '>=1.2.7.0 && <1.3'
  memory: '>=0.14.18 && <0.15'
  mmorph: '>=1.1.3 && <1.2'
  optparse-applicative: '>=0.14.3.0 && <0.15'
  resourcet: '>=1.2.2 && <1.3'
  smap: '>=0'
  streaming: '>=0.2.2.0 && <0.3'
  streaming-bytestring: '>=0.1.6 && <0.2'
  strict: '>=0.3.2 && <0.4'
  text: '>=1.2.3.1 && <1.3'
  transformers: '>=0.5.6.2 && <0.6'
  unordered-containers: '>=0.2.9.0 && <0.3'
changelog: |
  # Changelog for smap

  ## Unreleased changes
changelog-type: markdown
description: "# smap - a command line tool for sets and maps\n\nThis is a very minimal
  but powerful tool for performing set/map union, subtraction, and intersection on
  text files. If you find yourself using commands like `sort`, `uniq`, `comm`, and
  really contorted `sed`/`awk` invocations, this tool will probably help you. It's
  faster, simpler to use, and doesn't require lexicographic ordering.\n\n## Installation:\n\nTo
  install from hackage (without downloading this repo), you will want [cabal](https://www.haskell.org/cabal/).
  Then you can run \n\n```bash\ncabal install smap\n```\n\nTo install from this repo,
  I recommend getting [stack](https://www.haskellstack.org) and running\n\n\n```bash\nstack
  install smap\n```\n\n## Tutorial:\n\nThe setup:\n\n```bash\ncat > patients << EOF\nBob
  Smith\nJane Doe\nJohn Smith\nCarol Carell\nEOF\n\ncat > has_cold << EOF\nJane Doe\nJohn
  Smith\nEOF\n\ncat > has_mumps << EOF\nJane Doe\nCarol Carell\nEOF\n```\n\n### Simple
  usage (sets)\n\n#### cat - Set Union (and Deduplication)\n\nSick patients:\n\n```bash\n$
  smap cat has_cold has_mumps\nJane Doe\nJohn Smith\nCarol Carell\n```\n\nYou can
  also use `-` instead of a filename to represent stdin/stdout. (This works for any
  command.)\n\n```bash\n$ cat has_cold | smap cat - has_mumps\nJane Doe\nJohn Smith\nCarol
  Carell\n```\n\nIf you don't provide any arguments, `cat` will assume you mean stdin.\n\n```bash\n$
  cat has_cold has_mumps | smap cat\nJane Doe\nJohn Smith\nCarol Carell\n```\n\nBy
  default, output goes to stdout, but you can send it elsewhere with `-o`. (This also
  works for any command.)\n\n#### sub - Set subtraction\n\nHealthy patients:\n\n```bash\n$
  smap sub patients has_cold has_mumps\nBob Smith\n```\n\n#### int - Set intersection\n\nPatients
  with both a cold and mumps:\n\n```bash\n$ smap int has_cold has_mumps\nJane Doe\n```\n\nIt's
  worth noting that both **int** and **sub** treat their first argument as a *stream*,
  not a *set*. This means that they won't deduplicate values from their first argument.
  In practice you will find that this is the most useful arrangement. You can always
  use `smap cat` to turn a stream into a set.\n\n\nTo put this all together, let's
  find patients who only have a cold or mumps, but not both:\n\n```bash\n$ smap sub
  <(smap cat has_cold has_mumps) <(smap int has_cold has_mumps)\nCarol Carell\nJohn
  Smith\n```\n\n\nIf you haven't seen the `<(command)` syntax before, it's a very
  useful shell tool called [process substitution](https://www.tldp.org/LDP/abs/html/process-sub.html).\n\n###
  Advanced usage (maps)\n\nWhen using `smap` with sets, the behavior is pretty straightforward.
  It gets a bit more complicated when\ndealing with maps.\n\nThere are actually three
  ways you can pass a file argument to `smap`.\n\n1. If you just use a regular filepath,
  like `patients.txt` or `-` (for stdin/out), `smap` will create a map where the keys
  are equal to the values. This behaves like a set, which is why all the simple usage
  examples work this way.\n2. If you instead use an argument like `+file1,file2`,
  `smap` will use `file1` for the keys and `file2` for the values.\n3. If you instead
  use an argument like `@file`, `smap` will read/write keys/values on alternating
  lines. \nThis is useful for passing maps between invocations of `smap`. You can
  of course use `@-` to mean \"alternating between keys and values on stdin/stdout\".\n\n\nHere
  are some examples.\n\n#### Pick one patient from each family:\n\nWe can get a list
  of patient last names using `cut -f 2 -d ' ' <patient file>`.\n\n```bash\n$ smap
  cat +<(cut -f 2 -d ' ' patients),patients\nBob Smith\nJane Doe\nCarol Carell\n```\n\nTo
  understand the above:\n\n* `<(cut -f 2 -d ' ' patients)` gets a list of all the
  patients' last names and creates a pipe containing this list. \n* `+<(cut -f 2 -d
  ' ' patients),patients` constructs a stream where the keys are the last names and
  the values are the whole names.\n\n`cat` deduplicates by key, so if we see a second
  (or third, or fourth, etc.) person from a given family we don't print them out.\n\n\n####
  Patients who have family members with a cold:\n\n```bash\n$ smap int +<(cut -f 2
  -d ' ' patients),patients <(cut -f 2 -d ' ' has_cold)\nBob Smith\nJane Doe\nJohn
  Smith\n```\n\nTo understand the above:\n\n* `<(cut -f 2 -d ' ' patients)` gets a
  list of all the patients' last names.\n* `+<(cut -f 2 -d ' ' patients),patients`
  constructs a stream where the keys are the last names and the values are the whole
  names.\n* `<(cut -f 2 -d ' ' has_cold)` gets a list of family names of everyone
  who has a cold.\n\nSo `int` is filtering the first argument (treated as a `key,value`
  stream) by the keys present in the second argument.\n\n#### Passing maps between
  `smap` invocations\n\nIn earlier examples where we composed invocations of `smap`,
  we only passed sets between the various invocations. We can easily pass maps as
  well, using the `@` syntax to read/write keys and values from the same file (on
  alternating lines). For example, let's say we wanted to find patients whose family
  members have a cold *and* mumps. One way we could do it is\n\n```bash\n$ smap int
  +<(cut -f 2 -d ' ' patients),patients <(cut -f 2 -d ' ' has_cold) <(cut -f 2 -d
  ' ' has_mumps)\nJane Doe\n```\n\nThankfully Jane doesn't have any other family members
  who are at risk of catching both a cold and mumps. We could also write this as\n\n```bash\n$
  smap int +<(cut -f 2 -d ' ' patients),patients <(cut -f 2 -d ' ' has_cold) -o @-
  | smap int @- <(cut -f 2 -d ' ' has_mumps)\nJane Doe\n```\n\nWhat's going on here
  is that the first command is finding all patients who have a family member with
  a cold, and outputting to stdout each person's name (the value) *as well as* their
  family name (the key). We can see this by running:\n\n```bash\n$ smap int +<(cut
  -f 2 -d ' ' patients),patients <(cut -f 2 -d ' ' has_cold) -o @-\nSmith\nBob Smith\nDoe\nJane
  Doe\nSmith\nJohn Smith\n```\n\nThen, we have a second invocation of `smap int` which
  is reading these key/value pairs in from stdin and intersecting them with the set
  of families where someone has mumps.\n\n### Approximate mode\n\nIf you're processing
  lots of lines and running up against memory limits, \nyou can use the `--approximate`
  or `-a` option to keep track of a 64-bit hash \nof each line instead of the entire
  line. You can also use \n`--approx-with-key` or `-k` if you want to specify the
  SipHash key.\n\nIllustrative example:\n\n```bash\n$ smap sub -a +<(cut -f 2 -d '
  ' patients),patients -o @-\n5e1334422d6eedac\nBob Smith\nc62edd9db8aac96c\nJane
  Doe\n5e1334422d6eedac\nJohn Smith\n79db904924f32d34\nCarol Carell\n```\n\nNotice
  that the Smiths both have a key of `5e13...`\n\n### Performance\n\nIt's pretty fast.
  On my laptop, I can churn through 1.something million lines per second for short
  lines and a few hundred megabytes per second on long lines. I'll probably run out
  of RAM before I run out of time. Of course, faster is better, so please feel free
  to open an issue/PR with suggestions.\n"
description-type: markdown
hash: 4dda02582937ae3dd3c12ceebb02b7c0b2f5e805f3252c6921d4628796042238
homepage: https://github.com/wyager/smap#readme
latest: 0.3.3
license-name: BSD-3-Clause
maintainer: will@yager.io
synopsis: A command line tool for working with sets and maps
test-bench-deps:
  attoparsec: '>=0.13.2.2 && <0.14'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8.2 && <0.11'
  hashable: '>=1.2.7.0 && <1.3'
  memory: '>=0.14.18 && <0.15'
  mmorph: '>=1.1.3 && <1.2'
  optparse-applicative: '>=0.14.3.0 && <0.15'
  resourcet: '>=1.2.2 && <1.3'
  smap: '>=0'
  streaming: '>=0.2.2.0 && <0.3'
  streaming-bytestring: '>=0.1.6 && <0.2'
  strict: '>=0.3.2 && <0.4'
  text: '>=1.2.3.1 && <1.3'
  transformers: '>=0.5.6.2 && <0.6'
  unordered-containers: '>=0.2.9.0 && <0.3'
