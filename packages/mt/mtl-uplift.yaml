homepage: https://github.com/SamuelSchlesinger/mtl-uplift
changelog-type: ''
hash: c5f7ff784f2be33f0d0909ac320f4d06c30460068252c07606f4ab3c71c8911d
test-bench-deps:
  mtl-uplift: -any
  base: -any
  mtl: -any
maintainer: sgschlesinger@gmail.com
synopsis: Lift substacks of monad transformer stacks
changelog: ''
basic-deps:
  base: '>=4.12 && <5'
  mtl: '>=2.2'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Samuel Schlesinger
latest: 0.1.0.1
description-type: markdown
description: |
  # mtl-uplift

  [![Hackage](https://img.shields.io/hackage/v/mtl-uplift.svg)](https://hackage.haskell.org/package/mtl-uplift)

  Uplift entire substacks of monad transformer stacks, boilerplate free!

  Many industry Haskell programmers are all too familiar with code like:
  ```haskell
  lift . lift . lift . lift . lift . lift . lift . lift . lift . lift . lift . lift . lift $ do
    blah
  ```
  This may or may not be an exaggeration. Now, we can just write the much less
  visually annoying:
  ```haskell
  uplift @TopOfSubstackT $ do
    blah
  ```
  This relieves the programmer from having to do any bookkeeping about what
  level of their greater stack their substack lives at, but just to know which monad tops it.
  Beyond that, if we transform our stack, with the old code we would potentially have to modify the number of
  calls to `lift`, but now, as long as we still want to `uplift` a substack with
  the same top, we don't have to. Isn't that uplifting?

  Here is a more complete example from the tests:

  ```haskell
  {-# LANGUAGE TypeApplications #-}
  {-# LANGUAGE BlockArguments #-}
  module Main where

  import Control.Monad.Trans.Uplift

  import Control.Monad.State
  import Control.Monad.Writer
  import Control.Monad.Reader

  type Stack = StateT Bool (WriterT [String] (ReaderT Char IO))

  runStack :: Stack a -> IO (a, [String])
  runStack stack = runReaderT (runWriterT (evalStateT stack True)) 'X'

  main :: IO ()
  main = do
    (a, xs) <- runStack do
      uplift @(WriterT [String]) do
        tell ["One", "Two"]
        c <- uplift @(ReaderT Char) ask
        if c == 'X' then tell ["One, Two, Three, Four"]
        else pure ()
    guard (xs == ["One", "Two", "One, Two, Three, Four"])
  ```
license-name: MIT
