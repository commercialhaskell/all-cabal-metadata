all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Domen Kožar
basic-deps:
  base: '>=4.2 && <5'
  exceptions: '>=0'
  http-client: '>=0'
  http-types: '>=0'
  random: '>=0'
  stamina: '>=0'
  time: '>=0'
changelog: |
  # Revision history for stamina

  ## 0.1.0.3 (2024-01-26)

  * Fix typo
  * Add Stamina.indefiniteDefaults

  ## 0.1.0.2 (2024-01-03)

  * Fix haddock
  * Get rid of head usage

  ## 0.1.0.1 (2023-12-30)

  * Fix haddock and include README

  ## 0.1.0.0 (2023-12-30)

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# Stamina\n\n[![Active – The project has reached a stable, usable state
  and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#concept)
  [![Hackage](https://img.shields.io/hackage/v/stamina.svg?style=flat)](https://hackage.haskell.org/package/stamina)
  ![CI status](https://github.com/cachix/stamina.hs/actions/workflows/ci.yml/badge.svg)\n\nA
  retry Haskell library for humans:\n\n- **Exponential backoff** with **jitter** between
  retries.\n- Limit the **attempts** of retries and **total** time.\n- **Stamina.HTTP**
  for retrying retriable [Network.HTTP.Client](https://hackage.haskell.org/package/http-client)
  exceptions respecting `Retry-After` headers.\n- Introspectable retry state for logging
  using **RetryStatus**, including the last exception that occurred.\n- Support **resetting
  the retry state** when for **long-running tasks** with an attempt that works.\n\n##
  API\n\n## Basics\n\n- `Stamina.defaults :: (MonadIO m) => m RetrySettings`\n- `Stamina.RetryStatus
  = RetryStatus { attempts :: Int, delay :: NominalDiffTime, totalDelay :: NominalDiffTime,
  resetInitial :: IO (), lastException :: Maybe SomeException }`\n- `Stamina.retry
  :: (MonadCatch m, MonadIO m) => RetrySettings -> (RetryStatus -> m a) -> m a`\n\n##
  Exceptions\n\n- `Stamina.RetryAction = RaiseException | Retry | RetryDelay NominalDiffTime
  | RetryTime UTCTime`\n- `Stamina.retryFor :: (MonadCatch m, MonadIO m, Exception
  exc) => RetrySettings -> (exc -> m RetryAction) -> (RetryStatus -> m a) -> m a`\n\n##
  HTTP\n\n- `Stamina.HTTP.retry :: (MonadIO m, MonadCatch m) => Stamina.RetrySettings
  -> (Stamina.RetryStatus -> m a) -> m a`\n\n## Basic example\n\n```haskell\nimport
  qualified Stamina\nimport Control.Monad.Catch (throwM)\nimport Control.Monad.IO.Class
  (MonadIO)\n\ngo :: IO ()\ngo = Stamina.retry Stamina.defaults $ \\retryStatus ->
  do\n  throwM $ userError \"nope\"\n```\n\n## Example to catch specific exceptions\n\n```haskell\n\nhandler
  :: (MonadIO m) => IOError -> m Stamina.RetryAction\nhandler _ = return Stamina.Retry\n\ngo2
  :: IO ()\ngo2 = Stamina.retryFor Stamina.defaults handler $ \\retryStatus -> do\n
  \ throwM $ userError \"nope\"\n```\n\n## Development\n\n1. Install [devenv.sh](https://devenv.sh/getting-started/).\n\n2.
  `devenv shell`\n\n3. `stack build`\n\n## Credits\n\n- Heavily inspired by [stamina
  for Python](https://stamina.hynek.me/en/stable/tutorial.html#retries).\n- [retry](https://github.com/Soostone/retry)
  as case study for what needs to be supported.\n\n<details>\n  <summary>Test setup</summary>\n
  \ \n  ```haskell\n  main = undefined\n  ```\n</details>\n"
description-type: markdown
hash: 7a41ce24449fdabb1ca8ef88fb46b5a6bb1c90a0da9017e92790f1397034217e
homepage: https://github.com/cachix/stamina.hs
latest: 0.1.0.3
license-name: Apache-2.0
maintainer: domen@cachix.org
synopsis: Retries for humans
test-bench-deps:
  base: '>=0'
  exceptions: '>=0'
  hspec: '>=0'
  http-client: '>=0'
  mtl: '>=0'
  stamina: '>=0'
  time: '>=0'
