all-versions:
- 0.1.0
- 0.1.2
author: Joseph Sumabat
basic-deps:
  array: '>=0.5.4 && <0.6'
  base: '>=4.17.0 && <4.19'
  containers: '>=0.6.0 && <0.7'
  directory: '>=1.3.7 && <1.4'
  errors: '>=2.3.0 && <2.4'
  extra: '>=1.7.12 && <1.8'
  filepath: '>=1.4.1 && <1.5'
  ghc: '>=9.4.3 && <9.7'
  ghc-paths: '>=0.1.0 && <0.2'
  ghcide: '>=2.5.0 && <2.6.0'
  hiedb: '>=0.4.2 && <0.5'
  lsp: '>=2.3 && <2.4'
  lsp-types: '>=2.1 && <2.2'
  mtl: '>=2.2.2 && <2.4'
  optparse-applicative: '>=0.17.0.0 && <0.19'
  parsec: '>=3.1.0 && <3.2'
  sqlite-simple: '>=0.4.18 && <0.5'
  static-ls: '>=0'
  template-haskell: '>=2.19.0 && <2.21'
  text: '>=2.0.1 && <2.1'
  transformers: '>=0.5.6.2 && <0.7'
  unliftio-core: '>=0.2.1 && <0.3'
changelog: |
  # Revision history for static-ls

  ## 0.2.0 -- TBD

  * Add support for arguments
    * Support user specified hiedb file via argument
    * Support user specified hiefiles path via argument
    * Support user specified hifiles path via argument
    * Support user specified src base directories
    * Add version command
    * Add help command

  * Bugfixes
    * Correctly terminate hie file read attempt on bad version header
    * Generate static information for tests rather than relying on hard-coded information

  * Support reading interface files for haddock comments (https://github.com/josephsumabat/static-ls/pull/30)

  * Support goto typedef (https://github.com/josephsumabat/static-ls/pull/31)

  * Support workspace symbol (https://github.com/josephsumabat/static-ls/pull/18)

  ## 0.1.0 -- 2023-04-13

  * Initial release supporting
    * find references globally when hie files and hiedb are available
    * type on hover when hie files are available
    * find definition locally and globally when hie files and hiedb are available
changelog-type: markdown
description: "# static-ls\n\nstatic-ls (\"static language server\") is a [hie files](https://gitlab.haskell.org/ghc/ghc/-/wikis/hie-files)
  and\n[hiedb](https://github.com/wz1000/HieDb/) based language server heavily\ninspired
  by [halfsp](https://github.com/masaeedu/halfsp), which reads static\nproject information
  to provide IDE functionality through the language server\nprotocol. `static-ls`
  will not generate this information on its own and instead\nwill rely on the user
  to generate this information via separate programs\n\nSupported static sources of
  information currently include:\n- hiefiles\n- hiedb\n\nThe goal of `static-ls` is
  to provide a high-speed, low-memory solution for large\nprojects for which\n[haskell-language-server](https://github.com/haskell/haskell-language-server)\ntends
  to take up too much memory on recompilation.\n[Haskell-language-server](https://github.com/haskell/haskell-language-server)\nis
  recommended if you are not experiencing these issues. `static-ls` is meant\nto work
  on enterprise size projects where aforementioned constraints can be an\nissue. `static-ls`
  tends to work better standalone as a code navigation tool\nsince project edits require
  re-indexing of hie files but also works reasonably\nwell for editing with a program
  such as\n[ghcid](https://github.com/ndmitchell/ghcid) to watch files for compilation
  and\nthe `-fdefer-type-errors flag`.\n\nIn the future we plan to use more sources
  of static information such as interface files\nto fetch documentation or ghcid's
  output to fetch diagnostics\n\nCurrently only ghc 9.4.4 and 9.6.1 are explicitly
  supported but I'm happy to add support for other versions of ghc if desired\n\n##
  Usage\n\n1. Compile your project with ide info `-fwrite-ide-info` and `-hiedir .hiefiles`\n
  \   \n    For a better UX, the following flags are *strongly* recommended.\n\n     ```\n
  \    - -fdefer-type-errors\n     - -Werror=deferred-type-errors\n     - -Werror=deferred-out-of-scope-variables\n
  \    - -fno-defer-typed-holes\n     ```\n  \n    These flags will allow hie files
  to be refreshed even if compilation fails to\n    type check and will ensure that
  type check failures are still thrown as\n    errors.\n\n    - If you're using hpack
  you can add:\n      ```\n        ghc-options:\n          - -fwrite-ide-info\n          -
  -hiedir .hiefiles\n          - -fdefer-type-errors\n          - -Werror=deferred-type-errors\n
  \         - -Werror=deferred-out-of-scope-variables\n          - -fno-defer-typed-holes\n
  \     ```\n      to  your `package.yaml`. See this project's `package.yaml` or `static-ls.cabal`
  for examples\n    - You may instead add the following to your `cabal.project.local`
  file:\n      ```\n      ignore-project: False\n      program-options:\n        ghc-options:\n
  \         -fdefer-type-errors\n          -Werror=deferred-type-errors\n          -Werror=deferred-out-of-scope-variables\n
  \         -fno-defer-typed-holes\n      ```\n    \n2. Index your project in hiedb
  running:\n      ```\n        hiedb -D .hiedb index .hiefiles --src-base-dir .\n
  \     ```\n\n    from your workspace root. If you're on an older version of `hiedb`
  where the `--src-base-dir` argument is not available use:\n    \n      ```\n        hiedb
  -D .hiedb index .hiefiles\n      ```\n      \n      `entr` is also recommended if
  you want file watching functionality:\n      ```\n      find -L .hiefiles | entr
  hiedb -D .hiedb index /_       \n      ```\n\n3. Point your language client to the
  `static-ls` binary and begin editing!\n    (See [Editor Setup](#editor-setup) for
  instructions if you're not sure how)\n\n[ghcid](https://github.com/ndmitchell/ghcid)
  is recommended to refresh hie files but compiling with `cabal build` should work
  as well\n\n## Features\n\n`static-ls` supports the following lsp methods:\n- `textDocument/references`\n
  \ - Note that find references only works on top level definitions and can be\n    slow
  for functions which are used frequently\n\n![Find references](./docs/gifs/find-references.gif)\n\n-
  `textDocument/hover`\n  - Provides type information and definition location on hover\n\n![Type
  on hover](./docs/gifs/hover.gif)\n\n- `textDocument/definition`\n  - Works on both
  local and top level definitions\n\n![Find definition](./docs/gifs/find-definition.gif)\n\n##
  Limitations\n- Must be compiled on the same version of ghc as the project\n- You
  will need to re-index your hie files once you edit your project\n\n## Editor setup\nInstructions
  for editor setup\n\n### neovim - coc.nvim\ncall `:CocConfig` and copy the following
  in:\n```\n{\n  \"languageserver\": {\n    \"static-ls\": {\n      \"command\": \"static-ls\",\n
  \     \"rootPatterns\": [\"*.cabal\", \"stack.yaml\", \"cabal.project\", \"package.yaml\",
  \"hie.yaml\"],\n      \"filetypes\": [\"haskell\"]\n    },\n  },\n}\n```\n\n###
  Visual Studio Code\n\n1. Install the Haskell language extension\n  ![Haskell Extension](./docs/imgs/vs-code-extension.png)\n\n2.
  Open the extension settings\n  ![Go to tsettings](./docs/imgs/vs-code-settings.png)\n\n3.
  Scroll down until you see \"Server Executable Path\" and set the path to the path
  of your `static-ls` binary\n  ![Set the language server executable path](./docs/imgs/vs-code-settings-executable-path.png)\n\nAlternatively
  you can also in your workspace's `./vscode/settings.json` you can use the following:\n```\n{\n
  \ \"haskell.manageHLS\": \"PATH\",\n  \"haskell.serverExecutablePath\": \"static-ls\",\n
  \ \"haskell.serverExtraArgs\": \"\"\n}\n```\n(Note `haskell.serverExecutablePath`
  should be the path to your binary).\n"
description-type: markdown
hash: b0da4ee8febeef05b1ced8eb29c2e7bb5d5024a24f1232b116db783194cb62ba
homepage: https://github.com/josephsumabat/static-ls#readme
latest: 0.1.2
license-name: MIT
maintainer: josephrsumabat@gmail.com
synopsis: See README on Github for more information
test-bench-deps:
  array: '>=0.5.4 && <0.6'
  base: '>=4.17.0 && <4.19'
  containers: '>=0.6.0 && <0.7'
  directory: '>=1.3.7 && <1.4'
  errors: '>=2.3.0 && <2.4'
  extra: '>=1.7.12 && <1.8'
  filepath: '>=1.4.1 && <1.5'
  ghc: '>=9.4.3 && <9.7'
  ghc-paths: '>=0.1.0 && <0.2'
  ghcide: '>=2.5.0 && <2.6.0'
  hiedb: '>=0.4.2 && <0.5'
  hspec: '>=2 && <3'
  lsp: '>=2.3 && <2.4'
  lsp-types: '>=2.1 && <2.2'
  mtl: '>=2.2.2 && <2.4'
  parsec: '>=3.1.0 && <3.2'
  sqlite-simple: '>=0.4.18 && <0.5'
  static-ls: '>=0'
  template-haskell: '>=2.19.0 && <2.21'
  text: '>=2.0.1 && <2.1'
  transformers: '>=0.5.6.2 && <0.7'
  unliftio-core: '>=0.2.1 && <0.3'
