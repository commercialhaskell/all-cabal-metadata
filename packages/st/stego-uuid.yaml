all-versions:
- 1.0.0.0
author: Dimitri DeFigueiredo
basic-deps:
  base: '>=4.9.1 && <5'
  bytestring: '>=0.10.8 && <0.11'
  cryptonite: '>=0.21 && <0.22'
  memory: '>=0.14.1 && <0.15'
  uuid: '>=1.3.13 && <1.4'
changelog: ''
changelog-type: ''
description: "# stego-uuid\nA generator and verifier for steganographic numbers that
  look random\n\nThe standard use of this package is to generate a 64-bit number and
  use\nthis, along with a secret key, as input to the marking function.\n\nExample:\n\n```haskell\n\nsecretHi
  = KeyHi64 12345  -- secret key hi  64 bits\nsecretLo = KeyLo64 67890  -- secret
  key low 64 bits\n\nmain :: IO ()\nmain = do\n\n  putStrLn \"Is this marked?\"\n
  \ r  <- randomIO :: IO Word64           -- get 64-bit random number\n  let x = mark
  secretHi secretLo r      -- produce marked 128-bit UUID\n  print x                               \n
  \ print (isMarked secretHi secretLo x)  -- True\n```\n\n## Security considerations\nThis
  is a poor man's MAC. We use SHA256 to generate the second half of the UUID from
  the 64-bit\nrandom looking input and the secret key. The small number of bits limits
  the security.\n\nWe will start getting collisions on the 64-bit random number after
  about 2^32 numbers are used.\nBut this just means we will be providing the function
  with the same input, so the same output\nwill be produced.\n\n### False Negatives\nThis
  is zero. If you produced the number with the `mark` function, this number will always
  be\ndetected with `isMarked` as long as you provide the correct key.\n\n### False
  positives\nThis is false detection. We worry about a UUID that was *not* generated
  using `mark` but is\ndetected as marked by `isMarked`. (A malicious adversary can
  always replay any UUIDs known as\nmarked. Thus, we will consider only new UUIDs.)\n\nAssuming
  SHA256 is a perfect pseudo-random function, its truncated output, i.e. the last
  64 bits of\nthe UUID, does not leak any information about the secret key. Given
  a fixed secret key, for any\n64-bit input (corresponding to the the first half of
  the UUID), there is a unique 64-bit output\n(corresponding to the second half of
  the UUID). There is only one such output per 64-bit input. So,\nthe probability
  of finding such input from a random draw is 2^(-64). The adversary would have more\nthan
  a 1/2 chance of finding it after 2^63 guesses.\n\n### Information leakage\nThe adversary
  can only know a UUID is marked if it is able to differentiate the output of truncated\nSHA256
  from a pseudo-random function. I am unaware of any significant results in doing
  so. The key\nis 128-bits in length, so going through all possible values is currently
  unfeasible.\n"
description-type: markdown
hash: 1a2d9b2bef305b99d9845d312b79ee303c951dedfc870d18f6c9d1bba123483b
homepage: https://github.com/dimitri-xyz/stego-uuid#readme
latest: 1.0.0.0
license-name: BSD-3-Clause
maintainer: defigueiredo@ucdavis.edu
synopsis: Generator and verifier for steganographic numbers
test-bench-deps:
  base: '>=4.9.1 && <5'
  random: '>=1.1 && <1.2'
  stego-uuid: '>=0'
  uuid: '>=1.3.13 && <1.4'
