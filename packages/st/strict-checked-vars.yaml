all-versions:
- 0.2.1.0
author: IOG Engineering Team
basic-deps:
  base: '>=4.9 && <5'
  io-classes: ^>=1.8
changelog: |
  # Revision history of strict-checked-vars

  ## 0.2.1.0 â€” 2025-05-15

  * Use `io-classes-1.8`.

  ## 0.2.0.0

  * Remove 'Switch' modules. From now on, instead of switching _imports_, this
    package switches the _representations_ of checked variables depending on the
    `checkmvarinvariants` and `checktvarinvariants` flags. This solves a problem
    where compiling projects that depend on `strict-checked-vars` might succeed
    with a flag turned on but fail when it is turned off (and vice versa).

  * Add new `unsafeToUncheckedStrictMVar` and `unsafeToUncheckedStrictTVar`
    functions.

  ## 0.1.0.4

  * Propagate HasCallStack constraints in the `Switch` module for checked strict
    MVars.

  ## 0.1.0.3

  * Make `writeTVar` more strict.

  ## 0.1.0.2

  * Make `newTVarWithInvariant`, `newTVarWithInvariantIO` and `newMVarWithInvariant` strict.

  ## 0.1.0.1

  * Export `checkInvariant`.

  ## 0.1.0.0

  * Initial version, not released on Hackage.
changelog-type: markdown
description: |-
  # Strict `MVar`s and `TVar`s with invariant checking

  The `strict-checked-vars` package provides a strict interface to mutable
  variables (`MVar`) and `TVar`s with invariant checking. It builds on top of
  `strict-mvar`, `strict-stm` and `io-classes`, and thus it provides the interface
  for `MVar`/`TVar` implementations for both
  [IO](https://hackage.haskell.org/package/base-4.18.0.0/docs/Prelude.html#t:IO)
  and [io-sim](https://hackage.haskell.org/package/io-sim).

  ## Checked and unchecked variants

  There are currently two variant implementations of `StrictTVar`s.
  * From `strict-stm`: `Control.Concurrent.Class.MonadSTM.Strict.TVar`
  * From `strict-checked-vars`: `Control.Concurrent.Class.MonadSTM.Strict.TVar.Checked`

  Similarly, there are currently two variant implementations of `StrictMVar`s.
  * From `strict-mvar`: `Control.Concurrent.Class.MonadMVar.Strict`
  * From `strict-checked-vars`: `Control.Concurrent.Class.MonadMVar.Strict.Checked`


  The _unchecked_ modules provide the simplest implementation of strict variables:
  a light wrapper around lazy variables that forces values to WHNF before they are
  put inside the variable. The _checked_ module does the exact same thing, but it
  has the additional feature that the user can provide an invariant that is
  checked each time a new value is placed inside the variable. The checked modules
  are drop-in replacements for the unchecked modules, though invariants will be
  trivially true in that case. Non-trivial invariants can be set when creating a
  new variable.

  ```haskell
  newMVarWithInvariant :: MonadMVar m
                       => (a -> Maybe String)
                       -> a
                       -> m (StrictMVar m a)

  newEmptyMVarWithInvariant :: MonadMVar m
                            => (a -> Maybe String)
                            -> m (StrictMVar m a)

  newTVarWithInvariant :: (MonadSTM m, HasCallStack)
                       => (a -> Maybe String)
                       -> a
                       -> STM m (StrictTVar m a)

  newTVarWithInvariantIO :: (MonadSTM m, HasCallStack)
                         => (a -> Maybe String)
                         -> a
                         -> m (StrictTVar m a)
  ```

  **Note:** though the checked modules are drop-in replacements for the unchecked
  modules, the `StrictMVar`/`StrictTVar` types are distinct. This means we can't
  make mixed use of the checked and unchecked modules.

  ## Guarantees for invariant checking on `StrictMVar`s

  Although all functions that modify a checked `StrictMVar` will check the
  invariant, we do *not* guarantee that the value inside the `StrictMVar` always
  satisfies the invariant. Instead, we *do* guarantee that if the `StrictMVar` is
  updated with a value that does not satisfy the invariant, an exception is thrown
  *after* the new value is written to the `StrictMVar`. The reason for this weaker
  guarantee is that leaving an `MVar` empty can lead to very hard to debug
  "blocked indefinitely" problems.
description-type: markdown
hash: 3ca2b45e7c7468e68fb831e1d419aa708f163b0f9f1d2bd15ecd53aeceaa6f3f
homepage: ''
latest: 0.2.1.0
license-name: Apache-2.0
maintainer: operations@iohk.io, Joris Dral
synopsis: Strict MVars and TVars with invariant checking for IO and IOSim
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  io-classes: '>=0'
  io-sim: '>=0'
  nothunks: '>=0'
  strict-checked-vars: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
