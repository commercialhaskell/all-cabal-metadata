homepage: http://code.haskell.org/~thielema/storable-tuple/
changelog-type: markdown
hash: 75897946f56c019b863c9deaabf887eef603130a2db8f5458cda750a304b1887
test-bench-deps: {}
maintainer: Henning Thielemann <storable@henning-thielemann.de>
synopsis: Storable instance for pairs and triples
changelog: |
  # Change log for the `storable-tuple` package

  ## 0.1

  * `Tuple`: implement instances using `Record.Tuple`
basic-deps:
  base: '>=3 && <5'
  storable-record: '>=0.0.5 && <0.1'
  base-orphans: '>=0.5 && <1'
  utility-ht: '>=0.0.1 && <0.1'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.3.1
- 0.0.3.2
- 0.0.3.3
- '0.1'
author: Henning Thielemann <storable@henning-thielemann.de>
latest: '0.1'
description-type: haddock
description: |-
  Provides a Storable instance for pair and triple
  which should be binary compatible with C99 and C++.
  The only purpose of this package is to provide a standard location
  for this instance so that other packages needing this instance
  can play nicely together.
  Note however, that the original purpose of the @Storable@ class
  was the transfer of primitive types between Haskell and foreign code.
  This purpose was already extended by HSC,
  which creates @Storable@ instances for records from C header files.
  Nonetheless,
  @Storable@ instances for tuples were omitted from @base@ by intention.
  Instead of using the orphan instances from this package,
  you may instead use the custom class or the wrapper type
  from the module @Foreign.Storable.Record.Tuple@
  from the package @storable-record@.
license-name: BSD-3-Clause
