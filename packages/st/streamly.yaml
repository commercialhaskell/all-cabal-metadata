all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.2.0
- 0.2.1
- 0.3.0
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.3.1
- 0.7.3.2
- 0.8.0
- 0.8.1
- 0.8.1.1
- 0.8.2
- 0.8.3
- 0.9.0
- 0.10.0
- 0.10.1
author: Composewell Technologies
basic-deps:
  atomic-primops: '>=0.8 && <0.9'
  base: '>=4.12 && <4.22'
  containers: '>=0.6.0 && <0.8'
  deepseq: '>=1.4.4 && <1.6'
  directory: '>=1.2.2 && <1.4'
  exceptions: '>=0.8.0 && <0.11'
  hashable: '>=1.3 && <1.6'
  heaps: '>=0.3 && <0.5'
  lockfree-queue: '>=0.2.4 && <0.3'
  monad-control: '>=1.0 && <1.1'
  mtl: '>=2.2.2 && <2.4'
  network: '>=2.6 && <3.3'
  streamly-core: '>=0.2.2 && <0.2.4'
  template-haskell: '>=2.14 && <2.24'
  transformers: '>=0.5.5 && <0.7'
  transformers-base: '>=0.4 && <0.5'
  unicode-data: '>=0.1 && <0.7'
  unordered-containers: '>=0.2 && <0.3'
changelog: "# Changelog\n\n<!-- See rendered changelog at https://streamly.composewell.com
  -->\n\n## 0.10.1 (Jan 2024)\n\n* Fix TH macros in `Streamly.Data.Stream.MkType`
  for GHC 9.6 and above.\n\n## 0.10.0 (Nov 2023)\n\nSee\n[0.9.0-0.10.0 API Changelog](https://github.com/composewell/streamly/blob/streamly-0.10.0/docs/User/Project/ApiChangelogs/0.9.0-0.10.0.txt)\nfor
  a full list of API changes in this release. Only a few significant\nchanges are
  mentioned here.  For changes to the core functionality\nplease see the changelog
  of the `streamly-core` package.\n\n### Breaking Changes\n\n* `MonadTrans` and `MonadBase`
  instances have been removed for `AsyncT`,\n  `ParallelT`, `AheadT` for GHC versions
  9.6 onwards. This is due to a\n  breaking change in `transformers` 0.6. You can
  replace `lift` with\n  `fromEffect` when using these as top level monads in a monad
  stack.\n\n### Enhancements\n\n* __Concurrent Folds__: `Streamly.Data.Fold.Prelude`
  module added with\n  concurrent fold APIs and a container fold API to fold a key
  value\n  stream to a HashMap.\n\n## 0.9.0 (Mar 2023)\n\nAlso see the following:\n\n*
  [streamly-0.9.0 Upgrade Guide](https://github.com/composewell/streamly/blob/streamly-0.10.0/docs/User/Project/Upgrading-0.8-to-0.9.md)
  or\n  https://hackage.haskell.org/package/streamly-0.9.0/docs/docs/User/ProjectRelated/Upgrading.md\n*
  [streamly-0.9.0 API Changelog](https://github.com/composewell/streamly/blob/streamly-0.10.0/docs/User/Project/ApiChangelogs/0.8.3-0.9.0.txt)
  or\n  https://hackage.haskell.org/package/streamly-0.9.0/docs/docs/User/ProjectRelated/ApiChangelogs/0.8.3-0.9.0.txt\n*
  [streamly-core-0.1.0 API Changelog](https://github.com/composewell/streamly/blob/streamly-0.10.0/core/docs/ApiChangelogs/0.1.0.txt)
  or\n  https://hackage.haskell.org/package/streamly-core-0.1.0/docs/docs/ApiChangelogs/0.1.0.txt\n\n###
  Package split\n\n`streamly` package is split into two packages, (1) `streamly-core`
  that\nhas only GHC boot library depdendecies, and (2) `streamly` that contains\nhigher
  level operations (including concurrent ones) with additional\ndependencies. Make
  sure you add a dependency on `streamly-core` to keep old\ncode working.\n\n* Moved
  the following modules from `streamly` package to the\n  `streamly-core` package:\n
  \ * Streamly.Console.Stdio\n  * Streamly.Data.Fold\n  * Streamly.Data.Unfold\n  *
  Streamly.FileSystem.Handle\n  * Streamly.Unicode.Stream\n\n### Breaking Changes\n\n*
  Unboxed arrays now require `Unbox` constraint instead of `Storable`.\n  The `Unbox`
  typeclass can be imported from `Streamly.Data.Array`. You\n  can use generic deriving
  to derive Unbox instances.\n* Stream type in all modules has been changed to the
  new `Stream` type\n  replacing the existing `IsStream t` or `SerialT` types. Use
  `fromStream`,\n  `toStream` from `Streamly.Prelude` module to adapt the types.\n*
  Signatures changed in `Streamly.Data.Unfold`:\n  * `fromStream`\n  * `replicateM`\n\n###
  Major Changes\n\n`Streamly.Prelude` module has been deprecated, equivalent\nfunctionality
  is covered by the `Streamly.Data.Stream`,\n`Streamly.Data.Stream.Prelude`, and `Streamly.Data.Fold`
  modules. The\nnew modules use a monomorphic `Stream` type instead of the polymorphic\n`IsStream
  t` type.\n\n`Streamly.Data.Stream` module and the `Stream` type are meant for\nwriting
  high-performance fused pipelines not involving explicit\nrecursion. For writing
  code that may require recursive function calls,\n`Streamly.Data.Stream.StreamK`
  module and the `StreamK` type have been\nadded which provide a CPS based stream
  implementation. `Stream` and\n`StreamK` types can be easily interconverted.\n\nThe
  old code can be adapted to use the new modules with some changes.\nSee the \n[streamly-0.9.0
  Upgrade Guide](https://github.com/composewell/streamly/blob/streamly-0.10.0/docs/User/Project/Upgrading-0.8-to-0.9.md)\nfor
  more details on how to adapt your existing code to the new release.\n\n### Enhancements\n\n*
  Added the following new modules to the `streamly` package:\n  * Streamly.Data.Stream.MkType\n
  \ * Streamly.Data.Stream.Prelude\n* Added the following new modules to the `streamly-core`
  package:\n  * Streamly.Data.Array\n  * Streamly.Data.Array.Generic\n  * Streamly.Data.MutArray\n
  \ * Streamly.Data.MutArray.Generic\n  * Streamly.Data.Parser\n  * Streamly.Data.ParserK\n
  \ * Streamly.Data.Stream\n  * Streamly.Data.StreamK\n  * Streamly.FileSystem.Dir\n
  \ * Streamly.FileSystem.File\n  * Streamly.Unicode.Parser\n  * Streamly.Unicode.String\n\n###
  Deprecations\n\n* Remove support for GHC 8.4.*\n\nSeveral modules and functions
  have been deprecated, equivalent modules or\nfunctions are suggested in the deprecation
  warning messages by the compiler.\n\n### Internal module changes\n\nIf you cannot
  find an internal module that you were using, it may have\nbeen moved to the `streamly-core`
  package or may have been renamed.\n\nFollowing modules are moved to `streamly-core`
  package and renamed:\n  * Streamly.Internal.Data.Array.Stream.Foreign -> Streamly.Internal.Data.Stream.Chunked\n
  \ * Streamly.Internal.Data.Array.Stream.Mut.Foreign -> Streamly.Internal.Data.Array.Mut.Stream\n\n##
  0.8.3 (September 2022)\n\n* Fix build with GHC 9.4\n\n## 0.8.2 (Mar 2022)\n\n* Fix
  performance issues for GHC-9. These changes coupled with GHC changes\n  expected
  to land in 9.2.2 will bring the performance back to the same levels\n  as before.\n\n##
  0.8.1.1 (Dec 2021)\n\n* Disable building FileSystem.Events where FS Events isn't
  supported.\n\n## 0.8.1 (Nov 2021)\n\nSee ApiChangelogs/0.8.3.txt for new APIs introduced.\n\n###
  Bug Fixes\n\n* Several bug fixes in the Array module:\n    * Fix writeN fold eating
  away one element when applied multiple times\n      [#1258](https://github.com/composewell/streamly/issues/1258).\n
  \   * Fix potentially writing beyond allocated memory when shrinking. Likely\n      cause
  of [#944](https://github.com/composewell/streamly/issues/944).\n    * Fix potentially
  writing beyond allocated memory when writing the last\n      element. Likely cause
  of\n      [#944](https://github.com/composewell/streamly/issues/944).\n    * Fix
  missing pointer touch could potentially cause use of freed memory.\n    * Fix unnecessary
  additional allocation due to a bug\n* Fix a bug in classifySessionsBy, see\n  [PR
  #1311](https://github.com/composewell/streamly/pull/1311). The bug\n  could cause
  premature ejection of a session when input events with the\n  same key are split
  into multiple sessions.\n\n### Notable Internal API Changes\n\n* `tapAsync` from
  `Streamly.Internal.Data.Stream.Parallel` has been moved to\n  `Streamly.Internal.Data.Stream.IsStream`
  and renamed to `tapAsyncK`.\n* `Fold2` has now been renamed to `Refold` and the
  corresponding `Fold2`\n  combinators have been either renamed or removed.\n\n##
  0.8.0 (Jun 2021)\n\nSee [API Changelog](/docs/User/Project/ApiChangelogs/0.8.3.txt)
  for a complete list of signature\nchanges and new APIs introduced.\n\n### Breaking
  changes\n\n* `Streamly.Prelude`\n    * `fold`: this function may now terminate early
  without consuming\n      the entire stream. For example, `fold Fold.head stream`
  would\n      now terminate immediately after consuming the head element from\n      `stream`.
  This may result in change of behavior in existing programs\n      if the program
  relies on the evaluation of the full stream.\n* `Streamly.Data.Unicode.Stream`\n
  \   * The following APIs no longer throw errors on invalid input, use new\n      APIs
  suffixed with a prime for strict behavior:\n        * decodeUtf8\n        * encodeLatin1\n
  \       * encodeUtf8\n* `Streamly.Data.Fold`:\n    * Several instances have been
  moved to the `Streamly.Data.Fold.Tee`\n      module, please use the `Tee` type to
  adapt to the changes.\n\n### Bug Fixes\n\n* Concurrent Streams: The monadic state
  for the stream is now propagated across\n  threads. Please refer to\n  [#369](https://github.com/composewell/streamly/issues/369)
  for more info.\n* `Streamly.Prelude`:\n    * `bracket`, `handle`, and `finally`
  now also work correctly on streams\n      that aren't fully drained. Also, the resource
  acquisition and release is\n      atomic with respect to async exceptions.\n    *
  `iterate`, `iterateM` now consume O(1) space instead of O(n).\n    * `fromFoldableM`
  is fixed to be concurrent.\n* `Streamly.Network.Inet.TCP`: `accept` and `connect`
  APIs now close the socket\n  if an exception is thrown.\n* `Streamly.Network.Socket`:
  `accept` now closes the socket if an exception is\n  thrown.\n\n### Enhancements\n\n*
  See [API Changelog](/docs/User/Project/ApiChangelogs/0.8.3.txt) for a complete list
  of new\n  modules and APIs introduced.\n* The Fold type is now more powerful, the
  new termination behavior allows\n  to express basic parsing of streams using folds.\n*
  Many new Fold and Unfold APIs are added.\n* A new module for console IO APIs is
  added.\n* Experimental modules for the following are added:\n    * Parsing\n    *
  Deserialization\n    * File system event handling (fsnotify/inotify)\n    * Folds
  for streams of arrays\n* Experimental `use-c-malloc` build flag to use the c library
  `malloc` for\n  array allocations. This could be useful to avoid pinned memory fragmentation.\n\n\n###
  Notable Internal/Pre-release API Changes\n\nBreaking changes:\n\n* The `Fold` type
  has changed to accommodate terminating folds.\n* Rename: `Streamly.Internal.Prelude`
  => `Streamly.Internal.Data.Stream.IsStream`\n* Several other internal modules have
  been renamed and re-factored.\n\nBug fixes:\n\n* A bug was fixed in the conversion
  of `MicroSecond64` and `MilliSecond64`\n  (commit e5119626)\n* Bug fix: `classifySessionsBy`
  now flushes sessions at the end and terminates.\n\n### Miscellaneous\n\n* Drop support
  for GHC 7.10.3.\n* The examples in this package are moved to a new github repo\n
  \ [streamly-examples](https://github.com/composewell/streamly-examples)\n\n## 0.7.3
  (February 2021)\n\n### Build Issues\n\n* Fix build issues with primitive package
  version >= 0.7.1.\n* Fix build issues on armv7.\n\n## 0.7.2 (April 2020)\n\n###
  Bug Fixes\n\n* Fix a bug in the `Applicative` and `Functor` instances of the `Fold`\n
  \ data type.\n\n### Build Issues\n\n* Fix a bug that occasionally caused a build
  failure on windows when\n  used with `stack` or `stack ghci`.\n* Now builds on 32-bit
  machines.\n* Now builds with `primitive` package version >= 0.5.4 && <= 0.6.4.0\n*
  Now builds with newer `QuickCheck` package version >= 2.14 && < 2.15.\n* Now builds
  with GHC 8.10.\n\n## 0.7.1 (February 2020)\n\n### Bug Fixes\n\n* Fix a bug that
  caused `findIndices` to return wrong indices in some\n  cases.\n* Fix a bug in `tap`,
  `chunksOf` that caused memory consumption to\n  increase in some cases.\n* Fix a
  space leak in concurrent streams (`async`, `wAsync`, and `ahead`) that\n  caused
  memory consumption to increase with the number of elements in the\n  stream, especially
  when built with `-threaded` and used with `-N` RTS option.\n  The issue occurs only
  in cases when a worker thread happens to be used\n  continuously for a long time.\n*
  Fix scheduling of WAsyncT stream style to be in round-robin fashion.\n* Now builds
  with `containers` package version < 0.5.8.\n* Now builds with `network` package
  version >= 3.0.0.0 && < 3.1.0.0.\n\n### Behavior change\n\n* Combinators in `Streamly.Network.Inet.TCP`
  no longer use TCP `NoDelay` and\n  `ReuseAddr` socket options by default. These
  options can now be specified\n  using appropriate combinators.\n\n### Performance\n\n*
  Now uses `fusion-plugin` package for predictable stream fusion optimizations\n*
  Significant improvement in performance of concurrent stream operations.\n* Improved
  space and time performance of `Foldable` instance.\n\n## 0.7.0 (November 2019)\n\n###
  Breaking changes\n\n* Change the signature of `foldrM` to ensure that it is lazy\n*
  Change the signature of `iterateM` to ensure that it is lazy.\n* `scanx` would now
  require an additional `Monad m` constraint.\n\n### Behavior change\n\n* Earlier
  `ParallelT` was unaffected by `maxBuffer` directive, now `maxBuffer`\n  can limit
  the buffer of a `ParallelT` stream as well. When the buffer becomes\n  full, the
  producer threads block.\n* `ParallelT` streams no longer have an unlimited buffer
  by default. Now the\n  buffer for parallel streams is limited to 1500 by default,
  the same as other\n  concurrent stream types.\n\n### Deprecations\n\n* In `Streamly.Prelude`:\n
  \   * `runStream` has been replaced by `drain`\n    * `runN` has been replaced by
  `drainN`\n    * `runWhile` has been replaced by `drainWhile`\n    * `fromHandle`
  has been deprecated. Please use\n      `Streamly.FileSystem.Handle.read`, `Streamly.Data.Unicode.Stream.decodeUtf8`
  and\n      `splitOnSuffix` with `Streamly.Data.Fold.toList` to split the\n       stream
  to a stream of `String` separated by a newline.\n    * `toHandle` has been deprecated.
  Please use `intersperse` and `concatUnfold` to\n      add newlines to a stream,
  `Streamly.Data.Unicode.Stream.encodeUtf8` for encoding and\n      `Streamly.FileSystem.Handle.write`
  for writing to a file handle.\n    * Deprecate `scanx`, `foldx`, `foldxM`, `foldr1`\n
  \   * Remove deprecated APIs `foldl`, `foldlM`\n    * Replace deprecated API `scan`
  with a new signature, to scan using Fold.\n\n* In `Streamly` module:\n    * `runStream`
  has been deprecated, please use `Streamly.Prelude.drain`\n\n* Remove deprecated
  module `Streamly.Time` (moved to Streamly.Internal.Data.Time)\n* Remove module `Streamly.Internal`
  (functionality moved to the Internal hierarchy)\n\n### Bug Fixes\n\n* Fix a bug
  that caused `uniq` function to yield the same element twice.\n* Fix a bug that caused
  \"thread blocked indefinitely in an MVar operation\"\n  exception in a parallel
  stream.\n* Fix unbounded memory usage (leak) in `parallel` combinator. The bug manifests\n
  \ when large streams are combined using `parallel`.\n\n### Major Enhancements\n\nThis
  release contains a lot of new features and major enhancements.  For more\ndetails
  on the new features described below please see the haddock docs of the\nmodules
  on hackage.\n\n#### Exception Handling\n\nSee `Streamly.Prelude` for new exception
  handling combinators like `before`,\n`after`, `bracket`, `onException`, `finally`,
  `handle` etc.\n\n#### Composable Folds\n\n`Streamly.Data.Fold` module provides composable
  folds (stream consumers). Folds\nallow splitting, grouping, partitioning, unzipping
  and nesting a stream onto\nmultiple folds without breaking the stream. Combinators
  are provided for\ntemporal and spatial window based fold operations, for example,
  to support\nfolding and aggregating data for timeout or inactivity based sessions.\n\n####
  Composable Unfolds\n\n`Streamly.Data.Unfold` module provides composable stream generators.
  Unfolds allow\nhigh performance merging/flattening/combining of stream generators.\n\n####
  Streaming File IO\n\n`Streamly.FileSystem.Handle` provides handle based streaming
  file IO\noperations.\n\n#### Streaming Network IO\n\n* `Streamly.Network.Socket`
  provides socket based streaming network IO\noperations.\n\n* `Streamly.Network.Inet.TCP`
  provides combinators to build Inet/TCP\nclients and servers.\n\n#### Concurrent
  concatMap\n\nThe new `concatMapWith` in `Streamly.Prelude` combinator performs a\n`concatMap`
  using a supplied merge/concat strategy. This is a very\npowerful combinator as you
  can, for example, concat streams\nconcurrently using this.\n\n### Other Enhancements\n\n*
  Add the following new features/modules:\n  * _Unicode Strings_: `Streamly.Data.Unicode.Stream`
  module provides\n    encoding/decoding of character streams and other character
  stream\n    operations.\n  * _Arrays_: `Streamly.Memory.Array` module provides arrays
  for efficient\n    in-memory buffering and efficient interfacing with IO.\n\n* Add
  the following to `Streamly.Prelude`:\n    * `unfold`, `fold`, `scan` and `postscan`\n
  \   * `concatUnfold` to concat a stream after unfolding each element\n    * `intervalsOf`
  and `chunksOf`\n    * `splitOn`, `splitOnSuffix`, `splitWithSuffix`, and `wordsBy`\n
  \   * `groups`, `groupsBy` and `groupsByRolling`\n    * `postscanl'` and `postscanlM'`\n
  \   * `intersperse` intersperse an element in between consecutive elements in\n
  \     stream\n    * `trace` combinator maps a monadic function on a stream just
  for side\n      effects\n    * `tap` redirects a copy of the stream to a `Fold`\n\n##
  0.6.1 (March 2019)\n\n### Bug Fixes\n\n* Fix a bug that caused `maxThreads` directive
  to be ignored when rate control\n  was not used.\n\n### Enhancements\n\n* Add GHCJS
  support\n* Remove dependency on \"clock\" package\n\n## 0.6.0 (December 2018)\n\n###
  Breaking changes\n\n* `Monad` constraint may be needed on some of the existing APIs
  (`findIndices`\n  and `elemIndices`).\n\n### Enhancements\n\n* Add the following
  functions to Streamly.Prelude:\n    * Generation: `replicate`, `fromIndices`, `fromIndicesM`\n
  \   * Enumeration: `Enumerable` type class, `enumerateFrom`, `enumerateFromTo`,\n
  \     `enumerateFromThen`, `enumerateFromThenTo`, `enumerate`, `enumerateTo`\n    *
  Running: `runN`, `runWhile`\n    * Folds: `(!!)`, `maximumBy`, `minimumBy`, `the`\n
  \   * Scans: `scanl1'`, `scanl1M'\n    * Filters: `uniq`, `insertBy`, `deleteBy`,
  `findM`\n    * Multi-stream: `eqBy`, `cmpBy`, `mergeBy`, `mergeByM`, `mergeAsyncBy`,\n
  \     `mergeAsyncByM`, `isPrefixOf`, `isSubsequenceOf`, `stripPrefix`,\n      `concatMap`,
  `concatMapM`, `indexed`, `indexedR`\n* Following instances were added for `SerialT
  m`, `WSerialT m` and\n  `ZipSerialM m`:\n  * When `m` ~ `Identity`: IsList, Eq,
  Ord, Show, Read, IsString, NFData,\n    NFData1, Traversable\n  * When `m` is `Foldable`:
  Foldable\n* Performance improvements\n* Add benchmarks to measure composed and iterated
  operations\n\n## 0.5.2 (October 2018)\n\n### Bug Fixes\n\n* Cleanup any pending
  threads when an exception occurs.\n* Fixed a livelock in ahead style streams. The
  problem manifests sometimes when\n  multiple streams are merged together in ahead
  style and one of them is a nil\n  stream.\n* As per expected concurrency semantics
  each forked concurrent task must run\n  with the monadic state captured at the fork
  point.  This release fixes a bug,\n  which, in some cases caused an incorrect monadic
  state to be used for a\n  concurrent action, leading to unexpected behavior when
  concurrent streams are\n  used in a stateful monad e.g. `StateT`. Particularly,
  this bug cannot affect\n  `ReaderT`.\n\n## 0.5.1 (September 2018)\n\n* Performance
  improvements, especially space consumption, for concurrent\n  streams\n\n## 0.5.0
  (September 2018)\n\n### Bug Fixes\n\n* Leftover threads are now cleaned up as soon
  as the consumer is garbage\n  collected.\n* Fix a bug in concurrent function application
  that in certain cases would\n  unnecessarily share the concurrency state resulting
  in incorrect output\n  stream.\n* Fix passing of state across `parallel`, `async`,
  `wAsync`, `ahead`, `serial`,\n  `wSerial` combinators. Without this fix combinators
  that rely on state\n  passing e.g.  `maxThreads` and `maxBuffer` won't work across
  these\n  combinators.\n\n### Enhancements\n\n* Added rate limiting combinators `rate`,
  `avgRate`, `minRate`, `maxRate` and\n  `constRate` to control the yield rate of
  a stream.\n* Add `foldl1'`, `foldr1`, `intersperseM`, `find`, `lookup`, `and`, `or`,\n
  \ `findIndices`, `findIndex`, `elemIndices`, `elemIndex`, `init` to Prelude\n\n###
  Deprecations\n\n* The `Streamly.Time` module is now deprecated, its functionality
  is subsumed\n  by the new rate limiting combinators.\n\n## 0.4.1 (July 2018)\n\n###
  Bug Fixes\n\n* foldxM was not fully strict, fixed.\n\n## 0.4.0 (July 2018)\n\n###
  Breaking changes\n\n* Signatures of `zipWithM` and `zipAsyncWithM` have changed\n*
  Some functions in prelude now require an additional `Monad` constraint on\n  the
  underlying type of the stream.\n\n### Deprecations\n\n* `once` has been deprecated
  and renamed to `yieldM`\n\n### Enhancements\n\n* Add concurrency control primitives
  `maxThreads` and `maxBuffer`.\n* Concurrency of a stream with bounded concurrency
  when used with `take` is now\n  limited by the number of elements demanded by `take`.\n*
  Significant performance improvements utilizing stream fusion optimizations.\n* Add
  `yield` to construct a singleton stream from a pure value\n* Add `repeat` to generate
  an infinite stream by repeating a pure value\n* Add `fromList` and `fromListM` to
  generate streams from lists, faster than\n  `fromFoldable` and `fromFoldableM`\n*
  Add `map` as a synonym of fmap\n* Add `scanlM'`, the monadic version of scanl'\n*
  Add `takeWhileM` and `dropWhileM`\n* Add `filterM`\n\n## 0.3.0 (June 2018)\n\n###
  Breaking changes\n\n* Some prelude functions, to whom concurrency capability has
  been added, will\n  now require a `MonadAsync` constraint.\n\n### Bug Fixes\n\n*
  Fixed a race due to which, in a rare case, we might block indefinitely on\n  an
  MVar due to a lost wakeup.\n* Fixed an issue in adaptive concurrency. The issue
  caused us to stop creating\n  more worker threads in some cases due to a race. This
  bug would not cause any\n  functional issue but may reduce concurrency in some cases.\n\n###
  Enhancements\n* Added a concurrent lookahead stream type `Ahead`\n* Added `fromFoldableM`
  API that creates a stream from a container of monadic\n  actions\n* Monadic stream
  generation functions `consM`, `|:`, `unfoldrM`, `replicateM`,\n  `repeatM`, `iterateM`
  and `fromFoldableM` can now generate streams\n  concurrently when used with concurrent
  stream types.\n* Monad transformation functions `mapM` and `sequence` can now map
  actions\n  concurrently when used at appropriate stream types.\n* Added concurrent
  function application operators to run stages of a\n  stream processing function
  application pipeline concurrently.\n* Added `mapMaybe` and `mapMaybeM`.\n\n## 0.2.1
  (June 2018)\n\n### Bug Fixes\n* Fixed a bug that caused some transformation ops
  to return incorrect results\n  when used with concurrent streams. The affected ops
  are `take`, `filter`,\n  `takeWhile`, `drop`, `dropWhile`, and `reverse`.\n\n##
  0.2.0 (May 2018)\n\n### Breaking changes\n* Changed the semantics of the Semigroup
  instance for `InterleavedT`, `AsyncT`\n  and `ParallelT`. The new semantics are
  as follows:\n  * For `InterleavedT`, `<>` operation interleaves two streams\n  *
  For `AsyncT`, `<>` now concurrently merges two streams in a left biased\n    manner
  using demand based concurrency.\n  * For `ParallelT`, the `<>` operation now concurrently
  meges the two streams\n    in a fairly parallel manner.\n\n  To adapt to the new
  changes, replace `<>` with `serial` wherever it is used\n  for stream types other
  than `StreamT`.\n\n* Remove the `Alternative` instance.  To adapt to this change
  replace any usage\n  of `<|>` with `parallel` and `empty` with `nil`.\n* Stream
  type now defaults to the `SerialT` type unless explicitly specified\n  using a type
  combinator or a monomorphic type.  This change reduces puzzling\n  type errors for
  beginners. It includes the following two changes:\n  * Change the type of all stream
  elimination functions to use `SerialT`\n    instead of a polymorphic type. This
  makes sure that the stream type is\n    always fixed at all exits.\n  * Change the
  type combinators (e.g. `parallely`) to only fix the argument\n    stream type and
  the output stream type remains polymorphic.\n\n  Stream types may have to be changed
  or type combinators may have to be added\n  or removed to adapt to this change.\n*
  Change the type of `foldrM` to make it consistent with `foldrM` in base.\n* `async`
  is renamed to `mkAsync` and `async` is now a new API with a different\n  meaning.\n*
  `ZipAsync` is renamed to `ZipAsyncM` and `ZipAsync` is now ZipAsyncM\n  specialized
  to the IO Monad.\n* Remove the `MonadError` instance as it was not working correctly
  for\n  parallel compositions. Use `MonadThrow` instead for error propagation.\n*
  Remove Num/Fractional/Floating instances as they are not very useful. Use\n  `fmap`
  and `liftA2` instead.\n\n### Deprecations\n* Deprecate and rename the following
  symbols:\n    * `Streaming` to `IsStream`\n    * `runStreaming` to `runStream`\n
  \   * `StreamT` to `SerialT`\n    * `InterleavedT` to `WSerialT`\n    * `ZipStream`
  to `ZipSerialM`\n    * `ZipAsync` to `ZipAsyncM`\n    * `interleaving` to `wSerially`\n
  \   * `zipping` to `zipSerially`\n    * `zippingAsync` to `zipAsyncly`\n    * `<=>`
  to `wSerial`\n    * `<|` to `async`\n    * `each` to `fromFoldable`\n    * `scan`
  to `scanx`\n    * `foldl` to `foldx`\n    * `foldlM` to `foldxM`\n* Deprecate the
  following symbols for future removal:\n    * `runStreamT`\n    * `runInterleavedT`\n
  \   * `runAsyncT`\n    * `runParallelT`\n    * `runZipStream`\n    * `runZipAsync`\n\n###
  Enhancements\n* Add the following functions:\n    * `consM` and `|:` operator to
  construct streams from monadic actions\n    * `once` to create a singleton stream
  from a monadic action\n    * `repeatM` to construct a stream by repeating a monadic
  action\n    * `scanl'` strict left scan\n    * `foldl'` strict left fold\n    *
  `foldlM'` strict left fold with a monadic fold function\n    * `serial` run two
  streams serially one after the other\n    * `async` run two streams asynchronously\n
  \   * `parallel` run two streams in parallel (replaces `<|>`)\n    * `WAsyncT` stream
  type for BFS version of `AsyncT` composition\n* Add simpler stream types that are
  specialized to the IO monad\n* Put a bound (1500) on the output buffer used for
  asynchronous tasks\n* Put a limit (1500) on the number of threads used for Async
  and WAsync types\n\n## 0.1.2 (March 2018)\n\n### Enhancements\n* Add `iterate`,
  `iterateM` stream operations\n\n### Bug Fixes\n* Fixed a bug that caused unexpected
  behavior when `pure` was used to inject\n  values in Applicative composition of
  `ZipStream` and `ZipAsync` types.\n\n## 0.1.1 (March 2018)\n\n### Enhancements\n*
  Make `cons` right associative and provide an operator form `.:` for it\n* Add `null`,
  `tail`, `reverse`, `replicateM`, `scan` stream operations\n* Improve performance
  of some stream operations (`foldl`, `dropWhile`)\n\n### Bug Fixes\n* Fix the `product`
  operation. Earlier, it always returned 0 due to a bug\n* Fix the `last` operation,
  which returned `Nothing` for singleton streams\n\n## 0.1.0 (December 2017)\n\n*
  Initial release\n"
changelog-type: markdown
description: |
  # [Streamly][]: Idiomatic Haskell with C-Like Performance

  [![Gitter chat](https://badges.gitter.im/composewell/gitter.svg)](https://gitter.im/composewell/streamly)
  [![Hackage](https://img.shields.io/hackage/v/streamly.svg?style=flat)](https://hackage.haskell.org/package/streamly)

  ## Upgrading to 0.9.0+

  Please read the [Streamly 0.9.0 Upgrade Guide](/docs/User/Project/Upgrading-0.8-to-0.9.md).

  ## Overview

  Streamly is a powerful Haskell library that provides developers with
  the essential building blocks to create safe, scalable, modular, and
  high-performance software. With Streamly, developers can enjoy the
  benefits of Haskell's type safety while leveraging C-like program
  performance.  Streamly offers a comprehensive range of features,
  comprising:

  * Haskell's strong type safety.
  * C-program-like performance capabilities.
  * Flexible, modular building blocks.
  * Idiomatic functional programming.
  * Fearless, declarative concurrency for seamless parallel execution.
  * A collection of ecosystem libraries for fast and efficient development.

  Check out the [Streamly Getting Started
  Guide](/docs/User/Tutorials/getting-started.md) and [Quick
  Overview](/docs/User/Tutorials/quick-overview.md) for an introduction
  to the library. For more detailed documentation, visit the [Haskell
  Streamly website][Streamly].

  ## Blazing Fast

  Streamly delivers C-like speed in Haskell by fusing stream pipelines
  using the stream-fusion technique, resulting in compiled code that is
  equivalent to handwritten C code, eliminating intermediate allocations
  and function calls.

  For a comprehensive comparison of Streamly to other Haskell streaming
  libraries, check out our [streaming benchmarks][streaming-benchmarks]
  page. In fact, Streamly's fused loops can be up to 100 times faster than
  those of libraries without stream fusion.

  ## Declarative Concurrency

  Streamly introduces declarative concurrency to standard functional
  streaming abstractions.  Declarative concurrency abstracts away the
  low-level details of concurrency management, such as locks and threads,
  and allows for easier and safer parallelization of code.  For example,
  with Streamly you can do things like repeat actions concurrently to
  generate a stream of results, map functions concurrently on a stream,
  and combine multiple streams concurrently to create a single output
  stream.

  ## Unified API

  Streamly provides a comprehensive and unified API for basic programming
  needs, covering a wide range of areas including streaming, concurrency,
  logic programming, reactive programming, pinned and unpinned arrays,
  serialization, builders, parsers, unicode processing, file-io, file
  system events, and network-io. By unifying functionality from disparate
  Haskell libraries, Streamly simplifies development while delivering
  equivalent or improved performance. Additionally, the complexity
  of handling combinations of lazy, strict, bytestring, and text is
  eliminated by using streams for lazy evaluation, and by generalizing
  bytestring and text to arrays.

  Check out [Streamly's documentation][Streamly] for more information
  about Streamly's features.

  ## Batteries Included

  In addition to the fundamental programming constructs, Streamly also
  provides higher-level functionality through supporting packages such as
  [streamly-process][], [streamly-shell][], and [streamly-coreutils][]
  that are essential for general programming tasks. Check out the
  [streamly-examples][] repository for some program snippets.

  ## Highly Modular

  Traditionally, you must choose between modularity and performance when
  writing code. However, with [Haskell Streamly][Streamly], you can have
  the best of both worlds. By taking advantage of GHC's stream fusion
  optimizations (such as `case-of-case` and `spec-constr`), Streamly achieves
  performance comparable to an equivalent C program while still allowing
  for highly modular code.

  ## Credits

  The following authors/libraries have influenced or inspired this library in a
  significant way:

    * Roman Leshchinskiy ([vector](http://hackage.haskell.org/package/vector))
    * Gabriella Gonzalez ([foldl](https://hackage.haskell.org/package/foldl))
    * Alberto G. Corona ([transient](https://hackage.haskell.org/package/transient))

  Please see the [`credits`](/docs/User/ProjectRelated/Credits.md) directory for a full
  list of contributors, credits and licenses.

  ## Licensing

  Streamly is an [open source](https://github.com/composewell/streamly)
  project available under a liberal [BSD-3-Clause license][LICENSE]

  ## Contributing to Streamly

  As an open project we welcome contributions:

  * [Streamly Contributor's Guide][CONTRIBUTING.md]
  * [Contact the streamly development team](mailto:streamly@composewell.com)

  ## Getting Support

  Professional support is available for [Streamly][]: please contact
  [support@composewell.com](mailto:support@composewell.com).

  You can also join our [community chat
  channel](https://gitter.im/composewell/streamly) on Gitter.

  <!--
  Link References.
  -->

  [Streamly]: https://streamly.composewell.com/
  [streaming-benchmarks]: https://github.com/composewell/streaming-benchmarks
  [concurrency-benchmarks]: https://github.com/composewell/concurrency-benchmarks
  [streamly-examples]: https://github.com/composewell/streamly-examples
  [streamly-process]: https://github.com/composewell/streamly-process
  [streamly-shell]: https://github.com/composewell/streamly-shell
  [streamly-coreutils]: https://github.com/composewell/streamly-coreutils

  <!--
  Keep all the unstable links here so that they can be updated to stable
  links (for online docs) before we release.
  -->

  <!-- local files -->
  [LICENSE]: /LICENSE
  [CONTRIBUTING.md]: /docs/Developer/Contributing.md
  [docs]: docs/
description-type: markdown
hash: c0cdf0c1e57d8011bd585a0e571b3f92fb10f31458cdc8d466128c24b18af74a
homepage: https://streamly.composewell.com
latest: 0.10.1
license-name: BSD-3-Clause
maintainer: streamly@composewell.com
synopsis: Streaming, dataflow programming and declarative concurrency
test-bench-deps: {}
