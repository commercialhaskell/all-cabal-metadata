all-versions:
- 0.0.1
- 0.0.1.1
- 0.1.0
- 0.2.0
- 0.2.1
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.7.0
- 0.8.0
author: Shlok Datye
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10.10.0 && <0.12'
  containers: '>=0.6.5.1 && <0.7'
  directory: '>=1.3.6.0 && <1.4'
  lifted-base: '>=0.2.3.12 && <0.3'
  monad-control: '>=1.0.3.1 && <1.1'
  safe-exceptions: '>=0.1.7.3 && <0.2'
  stm: '>=2.5.0.2 && <2.6'
  streamly: '>=0.10.0 && <0.11'
  streamly-core: '>=0.2.0 && <0.3'
changelog: |
  ## 0.8.0

  * Updated for Streamly 0.10.0.
  * Added proper concurrency support, including safety upon asynchronous exceptions. (The previous versions were unreliable in concurrent settings—segfaults, deadlocks, etc.)
  * A byproduct of the previous point: `writeLMDB` no longer maintains its own read-write transactions under the hood.
  * Added the ability to chunk the read-only transactions (by bytes or number of pairs) that `readLMDB` can create under the hood.
  * Added the ability to use read-write transactions for `readLMDB`.
  * Eliminated the `Void` seed for `readLMDB`.
  * Added more choices for `readStart`.
  * Added the ability to stream unexpected key-value pairs in `writeLMDB` into a separate fold.
  * Added `getLMDB` for getting a single key-value pair normally (without streaming).
  * Added `writeLMDBChunk` for writing key-value pairs normally (without streaming).
  * Added `chunkPairs`/`chunkPairsFold` convenience functions that allow chunking a stream of key-value pairs (by bytes or number of pairs).
  * Added `deleteLMDB` for deleting key-value pairs.
  * Made the unsafe FFI functionality internal.
  * Improved documentation, esp. regarding caveats for long-lived transactions and various lower-level LMDB requirements.

  ## 0.7.0

  * Added `readUnsafeFFI` and `writeUnsafeFFI` options.

  ## 0.6.0

  * Updated for Streamly 0.9.0.

  ## 0.5.0

  * Added the ability to close databases and environments.

  ## 0.4.0

  * Added support for precreating read-only transactions.

  ## 0.3.0

  * Updated for Streamly 0.8.0.

  ## 0.2.1

  * Allow QuickCheck <2.15 and tasty <1.5.

  ## 0.2.0

  * Added read options for backward reading and starting from a specific key.

  ## 0.1.0

  * Added a write option that disallows overwriting but does not throw an error when attempting to write a key-value pair that already exists in the database.

  ## 0.0.1.1

  * Fixed `install-includes` and `include-dirs` in the Cabal file.
  * Added safety check for bound threads in `writeLMDB`.

  ## 0.0.1

  * Initial release.
changelog-type: markdown
description: |
  # streamly-lmdb

  [![Hackage](https://img.shields.io/hackage/v/streamly-lmdb.svg?style=flat)](https://hackage.haskell.org/package/streamly-lmdb)
  ![CI](https://github.com/shlok/streamly-lmdb/workflows/CI/badge.svg?branch=master)

  Stream data to or from LMDB databases using the Haskell [streamly](https://hackage.haskell.org/package/streamly) library.

  ## Requirements

  Install LMDB on your system:

  * Debian Linux: `sudo apt-get install liblmdb-dev`.
  * macOS: `brew install lmdb`.

  ## Quick start

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import Data.Function
  import qualified Streamly.Data.Fold as F
  import qualified Streamly.Data.Stream.Prelude as S
  import Streamly.External.LMDB

  main :: IO ()
  main = do
    -- Open an environment. There should already exist a file or
    -- directory at the given path. (Empty for a new environment.)
    env <-
      openEnvironment
        "/path/to/lmdb-database"
        defaultLimits {mapSize = tebibyte}

    -- Get the main database.
    -- Note: It is common practice with LMDB to create the database
    -- once and reuse it for the remainder of the program’s execution.
    db <- getDatabase env Nothing

    -- Stream key-value pairs into the database.
    withReadWriteTransaction env $ \txn ->
      [("baz", "a"), ("foo", "b"), ("bar", "c")]
        & S.fromList
        & S.fold (writeLMDB defaultWriteOptions db txn)

    -- Stream key-value pairs out of the
    -- database, printing them along the way.
    -- Output:
    --     ("bar","c")
    --     ("baz","a")
    --     ("foo","b")
    S.unfold readLMDB (defaultReadOptions, db, LeftTxn Nothing)
      & S.mapM print
      & S.fold F.drain
  ```

  ## Benchmarks

  See `bench/README.md`. Summary (with rough figures from our machine<sup>†</sup>):

  * Reading (iterating through a fully cached LMDB database):
    - When using the ordinary `readLMDB` (which creates intermediate key/value `ByteString`s managed by the RTS), the overhead compared to C depends on the key/value sizes; for 480-byte keys and 2400-byte values, the overhead is roughly 815 ns/pair.
    - By using `unsafeReadLMDB` instead of `readLMDB` (to avoid the intermediate `ByteString`s), we can get the overhead compared to C down to roughly 90 ns/pair. (Plain Haskell `IO` code has roughly a 50 ns/pair overhead compared to C. The two preceding figures being similar fulfills the promise of [streamly](https://hackage.haskell.org/package/streamly) and stream fusion.)
  * Writing:
    - The overhead of this library compared to C depends on the size of the key/value pairs (`ByteString`s managed by the RTS). For 480-byte keys and 2400-byte values, the overhead is around 4.3 μs/pair.
    - For now, we don’t provide “unsafe” write functionality (to avoid the key/value `ByteString`s) because this write performance is currently good enough for our purposes.
  * For reference, we note that opening and reading 1 byte [16 KiB] from a file on disk with C takes us around 2.8 μs [20 μs].

  <sup>†</sup> September 2024; NixOS 24.11; Intel i7-12700K (3.6 GHz, 12 cores); Corsair VENGEANCE LPX DDR4 RAM 64GB (2 x 32GB) 3200MHz; Samsung 970 EVO Plus SSD 2TB (M.2 NVMe).
description-type: markdown
hash: f50aef35e3664f7cf07153bbe6ea40d317a704a3d6ed0184950c7b0b82f3f7ea
homepage: https://github.com/shlok/streamly-lmdb
latest: 0.8.0
license-name: BSD-3-Clause
maintainer: sd-haskell@quant.is
synopsis: Stream data to or from LMDB databases using the streamly library.
test-bench-deps:
  QuickCheck: '>=2.13.2 && <2.15'
  async: '>=2.2.2 && <2.3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.10.0 && <0.12'
  cereal: '>=0.5.8.3 && <0.6'
  containers: '>=0.6.5.1 && <0.7'
  directory: '>=1.3.6.0 && <1.4'
  mtl: '>=2.3.1 && <2.4'
  random: '>=1.2.1.2 && <1.3'
  streamly: '>=0.10.0 && <0.11'
  streamly-core: '>=0.2.0 && <0.3'
  streamly-lmdb: '>=0'
  tasty: '>=1.2.3 && <1.5'
  tasty-hunit: '>=0.10.0.3 && <0.11'
  tasty-quickcheck: '>=0.10.1.1 && <0.11'
  temporary: '>=1.3 && <1.4'
  transformers: '>=0.6.0.2 && <0.7'
  vector: '>=0.12.3.1 && <0.14'
