homepage: https://github.com/shlok/streamly-lmdb
changelog-type: markdown
hash: 08d12de2607ab07c5792d6cf3dc1def1c6df3f6cf2f8955f20bf73819336cf97
test-bench-deps:
  bytestring: '>=0.10.10.0 && <0.12'
  base: '>=4.7 && <5'
  streamly-lmdb: -any
  async: '>=2.2.2 && <2.3'
  streamly-core: ==0.1.*
  tasty-quickcheck: '>=0.10.1.1 && <0.11'
  temporary: ==1.3.*
  tasty: '>=1.2.3 && <1.5'
  QuickCheck: '>=2.13.2 && <2.15'
  streamly: ==0.9.*
  directory: '>=1.3.6.0 && <1.4'
maintainer: sd-haskell@quant.is
synopsis: Stream data to or from LMDB databases using the streamly library.
changelog: |
  ## 0.7.0

  * Added `readUnsafeFFI` and `writeUnsafeFFI` options.

  ## 0.6.0

  * Updated for Streamly 0.9.0.

  ## 0.5.0

  * Added the ability to close databases and environments.

  ## 0.4.0

  * Added support for precreating read-only transactions.

  ## 0.3.0

  * Updated for Streamly 0.8.0.

  ## 0.2.1

  * Allow QuickCheck <2.15 and tasty <1.5.

  ## 0.2.0

  * Added read options for backward reading and starting from a specific key.

  ## 0.1.0

  * Added a write option that disallows overwriting but does not throw an error when attempting to write a key-value pair that already exists in the database.

  ## 0.0.1.1

  * Fixed `install-includes` and `include-dirs` in the Cabal file.
  * Added safety check for bound threads in `writeLMDB`.

  ## 0.0.1

  * Initial release.
basic-deps:
  bytestring: '>=0.10.10.0 && <0.12'
  base: '>=4.7 && <5'
  async: '>=2.2.2 && <2.3'
  streamly-core: ==0.1.*
  streamly: ==0.9.*
all-versions:
- 0.0.1
- 0.0.1.1
- 0.1.0
- 0.2.0
- 0.2.1
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.7.0
author: Shlok Datye
latest: 0.7.0
description-type: markdown
description: |
  # streamly-lmdb

  [![Hackage](https://img.shields.io/hackage/v/streamly-lmdb.svg?style=flat)](https://hackage.haskell.org/package/streamly-lmdb)
  ![CI](https://github.com/shlok/streamly-lmdb/workflows/CI/badge.svg?branch=master)

  Stream data to or from LMDB databases using the Haskell [streamly](https://hackage.haskell.org/package/streamly) library.

  ## Requirements

  Install LMDB on your system:

  * Debian Linux: `sudo apt-get install liblmdb-dev`.
  * macOS: `brew install lmdb`.

  ## Quick start

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import Data.Function ((&))
  import qualified Streamly.Data.Fold as F
  import qualified Streamly.Data.Stream.Prelude as S
  import Streamly.External.LMDB
    ( Limits (mapSize),
      WriteOptions (writeTransactionSize),
      defaultLimits,
      defaultReadOptions,
      defaultWriteOptions,
      getDatabase,
      openEnvironment,
      readLMDB,
      tebibyte,
      writeLMDB,
    )

  main :: IO ()
  main = do
    -- Open an environment. There should already exist a file or
    -- directory at the given path. (Empty for a new environment.)
    env <-
      openEnvironment "/path/to/lmdb-database" $
        defaultLimits {mapSize = tebibyte}

    -- Get the main database.
    -- Note: It is common practice with LMDB to create the database
    -- once and reuse it for the remainder of the program’s execution.
    db <- getDatabase env Nothing

    -- Stream key-value pairs into the database.
    let fold' = writeLMDB db defaultWriteOptions {writeTransactionSize = 1}
    let writeStream = S.fromList [("baz", "a"), ("foo", "b"), ("bar", "c")]
    _ <- S.fold fold' writeStream

    -- Stream key-value pairs out of the
    -- database, printing them along the way.
    -- Output:
    --     ("bar","c")
    --     ("baz","a")
    --     ("foo","b")
    let unfold' = readLMDB db Nothing defaultReadOptions
    let readStream = S.unfold unfold' undefined
    S.mapM print readStream
      & S.fold F.drain
  ```

  ## Benchmarks

  See `bench/README.md`. Summary (with rough figures from our machine<sup>†</sup>):

  * Reading:
    - For iterating through a fully cached LMDB database, this library has roughly a 110 ns/pair overhead compared to C. (Plain Haskell `IO` code has roughly a 70 ns/pair overhead compared to C. The two preceding figures being similar fulfills the promise of [streamly](https://hackage.haskell.org/package/streamly) and stream fusion.)
    - By using `unsafeReadLMDB` instead of `readLMDB`, we can get the overhead down to roughly 100 ns/pair.
    - By additionally using the `readUnsafeFFI` option (to use `unsafe` FFI calls under the hood), we can get the overhead down to roughly 40 ns/pair.

  * Writing:
    - For writing to an LMDB database, this library has roughly a 210 ns/pair overhead compared to C. (Plain Haskell `IO` code has roughly a 100 ns/pair overhead compared to C. The two preceding figures being similar fulfills the promise of [streamly](https://hackage.haskell.org/package/streamly) and stream fusion.)
    - By using the `writeUnsafeFFI` option (to use `unsafe` FFI calls under the hood), we can get the overhead down to roughly 140 ns/pair.

  * For most Haskell programs, these differences will not cause problems. (For instance, note that merely opening and reading 1 byte from a file with C already takes us tens of *microseconds*.)

  <sup>†</sup> May 2023; [Linode](https://linode.com); Debian 11, Dedicated 32GB: 16 CPU, 640GB SSD storage, 32GB RAM.
license-name: BSD-3-Clause
