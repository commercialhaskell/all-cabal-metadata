homepage: https://github.com/georgefst/streamly-fsnotify
changelog-type: markdown
hash: 70664e463d77c9273518056564530034ba0d3daea15256009245b3c7b0adb62b
test-bench-deps: {}
maintainer: George Thomas
synopsis: Folder watching as a Streamly stream.
changelog: |
  # Revision history for streamly-fsnotify

  ## 1.1.1.0 -- 2020-05-27

  * Export additional `EventPredicate`s.

  ## 1.1.0.0 -- 2020-05-27

  * Use abstract newtype for `StopWatching`.
  * Remove typed filepaths. Power-to-weight ratio was too low.

  ## 1.0.1.0 -- 2020-05-27

  * George Thomas takes over as maintainer. Metadata changes.

  ## 1.0.0.1 -- 2019-12-09

  * Widen bounds on ``time`` to support Windows build.

  ## 1.0.0.0 -- 2019-12-06

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.9 && <5'
  time: ^>=1.6 || ^>=1.7 || ^>=1.8 || ^>=1.9 || ^>=1.10 || ^>=1.11 || ^>=1.12
  text: ^>=1.2.3.0
  filepath: ^>=1.4.2.1
  semirings: ^>=0.5.2 || ^>=0.6
  fsnotify: ^>=0.3.0.1
  streamly: ^>=0.7.0 || ^>=0.8
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.1.0
- 1.1.0.0
- 1.1.1.0
author: Koz Ross, George Thomas
latest: 1.1.1.0
description-type: markdown
description: |
  ## What's the deal with this library?

  [``streamly``][1] is an undoubtedly awesome library - [fast][2], flexible, and
  well-documented. File system watching is a natural fit for a streaming library,
  and this is exactly what ``streamly-fsnotify`` provides you.

  As an example, here is a program which watches ``/home/koz/c-project/`` and any
  of its subdirectories for added or modified C source files (which we take to be
  anything with a ``.c`` extension). This program then writes that the event
  occurred, to what file, and when, forever.

  ```haskell

  {-# LANGUAGE LambdaCase #-}

  import System.FilePath ((</>))
  import Streamly.FSNotify (EventPredicate, hasExtension, isDirectory, invert, isDeletion, conj, watchTree)
  import qualified Streamly.Prelude as SP

  -- conj -> both must be true
  -- invert -> true when the argument would be false and vice versa
  isCSourceFile :: EventPredicate
  isCSourceFile = hasExtension "c" `conj` invert isDirectory

  notDeletion :: EventPredicate
  notDeletion = invert isDeletion

  srcPath :: FilePath
  srcPath = "home" </> "koz" </> "c-project"

  -- first value given by watchTree stops the watcher
  -- we don't use it here, but if you want to, just call it
  main :: IO ()
  main = do
      (_, stream) <- watchTree srcPath $ isCSourceFile `conj` notDeletion
      SP.drain . SP.mapM go $ stream
    where
      go = \case
          Added p t _ -> putStrLn $ "Created: " ++ show p ++ " at " ++ show t
          Modified p t _ -> putStrLn $ "Modified: " ++ show p ++ " at " ++ show t
          _ -> pure ()
  ```

  ## That seems pretty cool! What kind of features can I expect?

  * Cross-platform - should work anywhere both ``streamly`` and ``fsnotify`` do.
  * Efficient (event-driven, so won't shred your CPU or load your RAM).
  * Able to do one-level and recursive watching.
  * Compositional and principled treatment of event filtering predicates.
  * Extensive set of filtering predicates, so you don't have to see events you
    don't care about!

  ## Sounds good? Can I use it?

  We've test-built this library for GHCs 8.6.5 through 8.10.1 on GNU/Linux. In
  theory, ``streamly-fsnotify`` should work everywhere both ``streamly`` and
  ``fsnotify`` will, which includes other OSes (such as Windows). However, we
  haven't tried it ourselves - let us know if you do!

  [1]: http://hackage.haskell.org/package/streamly
  [2]: https://github.com/composewell/streaming-benchmarks
license-name: BSD-3-Clause
