homepage: https://github.com/haskell-strict/strict
changelog-type: markdown
hash: 76f07389001fa7a9036cbf13a1753c0f16556bde3b79c862a8bbe1201aac2326
test-bench-deps: {}
maintainer: |-
  Don Stewart <dons@galois.com>,
  Bas van Dijk <v.dijk.bas@gmail.com>,
  Oleg Grenrus <oleg.grenrus@iki.fi>,
  Simon Meier <iridcode@gmail.com>,
  Ximin Luo <infinity0@pwned.gg>
synopsis: Strict data types and String IO.
changelog: |
  # 0.5

  - Depend on `bifunctor-classes-compat` instead of `bifunctors`
    See changelog note in `bifunctors-5.6`: https://hackage.haskell.org/package/bifunctors-5.6/changelog
    This is breaking change, but affects only GHC-8.0 and older users.

  # 0.4.0.1

  - Allow `bytestring-0.11`
  - Remove duplicate `semigroups` dependency

  # 0.4

  - Add instances for type-classes in current `base`, `binary`, `deepseq` and `hashable`
  - Add combinators mirroring `Data.Maybe`, `Data.Either` and `Data.Tuple`
  - Add `Strict lazy strict` type-class with `toStrict` / `toLazy`
    conversion functions
  - Modules are explicitly marked `Safe` or `Trustworthy`
  - Add strict `These`
  - `:!:` (`Pair` constructor) is non-associative
basic-deps:
  bytestring: '>=0.9.2.1 && <0.12'
  these: '>=1.2 && <1.3'
  base: '>=4.5.0.0 && <5'
  assoc: '>=1.1 && <1.2'
  text: '>=1.2.3.0 && <1.3 || >=2.0 && <2.1'
  binary: '>=0.5.1.0 && <0.9'
  ghc-prim: -any
  hashable: '>=1.2.7.0 && <1.5'
  bifunctor-classes-compat: '>=0.1 && <0.2'
  transformers: '>=0.3.0.0 && <0.7'
  deepseq: '>=1.3.0.0 && <1.5'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- '0.4'
- 0.4.0.1
- '0.5'
author: |-
  Roman Leshchinskiy <rl@cse.unsw.edu.au>
  Simon Meier <iridcode@gmail.com>
latest: '0.5'
description-type: haddock
description: |-
  This package provides strict versions of some standard Haskell data
  types (pairs, Maybe and Either). It also contains strict IO operations.

  It is common knowledge that lazy datastructures can lead to space-leaks.
  This problem is particularly prominent, when using lazy datastructures to
  store the state of a long-running application in memory. One common
  solution to this problem is to use @seq@ and its variants in every piece of
  code that updates your state. However a much easier solution is to use
  fully strict types to store such state values. By \"fully strict types\" we
  mean types for whose values it holds that, if they are in weak-head normal
  form, then they are also in normal form. Intuitively, this means that
  values of fully strict types cannot contain unevaluated thunks.

  To define a fully strict datatype, one typically uses the following recipe.

  1. Make all fields of every constructor strict; i.e., add a bang to
  all fields.

  2. Use only strict types for the fields of the constructors.

  The second requirement is problematic as it rules out the use of
  the standard Haskell 'Maybe', 'Either', and pair types. This library
  solves this problem by providing strict variants of these types and their
  corresponding standard support functions and type-class instances.

  Note that this library does currently not provide fully strict lists.
  They can be added if they are really required. However, in many cases one
  probably wants to use unboxed or strict boxed vectors from the 'vector'
  library (<http://hackage.haskell.org/package/vector>) instead of strict
  lists.  Moreover, instead of @String@s one probably wants to use strict
  @Text@ values from the @text@ library
  (<http://hackage.haskell.org/package/text>).

  This library comes with batteries included; i.e., mirror functions and
  instances of the lazy versions in @base@. It also includes instances for
  type-classes from the @deepseq@, @binary@, and @hashable@ packages.
license-name: BSD-3-Clause
