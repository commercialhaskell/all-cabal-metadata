homepage: https://github.com/psibi/streamly-bytestring#readme
changelog-type: markdown
hash: aeb310e6e1788b2cdb765a781252c547cadfbae932010815f07f1fe514242ed2
test-bench-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  hspec: -any
  filepath: -any
  streamly-bytestring: -any
  gauge: -any
  quickcheck-instances: -any
  streamly-core: -any
  temporary: -any
  random: -any
  deepseq: -any
  QuickCheck: -any
  hspec-discover: -any
  directory: -any
maintainer: sibi@psibi.in
synopsis: Library for streamly and bytestring interoperation.
changelog: |
  # Changelog for streamly-bytestring

  ## 0.2.0 (Mar 2023)

  * Support streamly-core-0.1.0
  * Support bytestring >= 0.3.0
  * Rename read to reader

  ## 0.1.4 (Dec 2021)

  * Support streamly-0.8.1

  ## 0.1.3 (Jul 2021)

  * Support streamly-0.8.0

  ## 0.1.2

  * Fix memory bug in Strict.toArray

  ## 0.1.1

  * Add `fromChunksIO` function to `Streamly.External.ByteString.Lazy` module.

  ## 0.1.0.1

  * Fix build with ghc-8.0.2 and ghc-7.10.3 ([#6](https://github.com/psibi/streamly-bytestring/issues/5))

  ## 0.1.0.0

  * Initial version released
basic-deps:
  bytestring: ==0.11.0.* || ==0.11.1.* || ==0.11.2.* || (>=0.11.3.1 && <0.11.4) ||
    ==0.11.4.*
  base: '>=4.7 && <5'
  streamly-core: ==0.1.0.*
all-versions:
- 0.1.2
- 0.1.3
- 0.1.4
- 0.2.0
author: Sibi Prabakaran
latest: 0.2.0
description-type: markdown
description: |
  # streamly-bytestring

  Library for streamly and bytestring interoperation.

  If you are writing code from scratch, please use `Streamly.Data.Array` which is
  a generalization of `ByteString` and better integrated with streamly.

  This library is to enable interoperation of streamly with existing code that
  uses `ByteString`.

  The package provides APIs to interconvert between strict `Bytestring` and
  streamly `Array Word8` and between lazy `Bytestring` and stream of `Array
  Word8`.

  The interconversion in the case of strict `Bytestring` and streamly `Array
  Word8` has no overhead for GHC allocated memory. For foreign allocator allocated
  memory there is a copy involved.

  ## Usage

  This is a dumb program that counts the number of bytes in a file.

  ```haskell
  import qualified Streamly.Data.Stream as S
  import qualified Streamly.Data.Fold as FL

  import qualified Data.ByteString as BS
  import qualified Data.ByteString.Lazy as BSL

  import qualified Streamly.External.ByteString as Strict
  import qualified Streamly.External.ByteString.Lazy as Lazy

  import System.IO (FilePath)

  strictByteStringSize :: BS.ByteString -> IO Int
  strictByteStringSize bs = S.fold FL.length $ S.unfold Strict.reader bs

  lazyByteStringSize :: BSL.ByteString -> IO Int
  lazyByteStringSize bsl =
      S.fold (FL.foldl' (+) 0)
          $ S.mapM strictByteStringSize
          $ fmap Strict.fromArray
          $ Lazy.toChunks bsl

  fileSize :: FilePath -> IO Int
  fileSize path = do
      bsl <- BSL.readFile path
      lazyByteStringSize bsl
  ```
license-name: BSD-3-Clause
