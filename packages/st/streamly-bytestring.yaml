homepage: https://github.com/psibi/streamly-bytestring#readme
changelog-type: markdown
hash: c7783df80956c17c3f31ecb53aa5f4cec5bbbd8b7f6ef2070535a60da29042e9
test-bench-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  hspec: -any
  filepath: -any
  streamly-bytestring: -any
  gauge: -any
  quickcheck-instances: -any
  base-compat: '>=0.11'
  temporary: -any
  random: -any
  deepseq: -any
  hspec-discover: -any
  streamly: -any
  directory: -any
maintainer: sibi@psibi.in
synopsis: Library for streamly and bytestring interoperation.
changelog: |
  # Changelog for streamly-bytestring

  ## 0.1.4 (Dec 2021)

  * Support streamly-0.8.1

  ## 0.1.3 (Jul 2021)

  * Support streamly-0.8.0

  ## 0.1.2

  * Fix memory bug in Strict.toArray

  ## 0.1.1

  * Add `fromChunksIO` function to `Streamly.External.ByteString.Lazy` module.

  ## 0.1.0.1

  * Fix build with ghc-8.0.2 and ghc-7.10.3 ([#6](https://github.com/psibi/streamly-bytestring/issues/5))

  ## 0.1.0.0

  * Initial version released
basic-deps:
  bytestring: '>=0.10.0 && <=0.11.1.0'
  base: '>=4.7 && <5'
  base-compat: '>=0.11'
  streamly: '>=0.8.1 && <0.8.2'
all-versions:
- 0.1.2
- 0.1.3
- 0.1.4
author: Sibi Prabakaran
latest: 0.1.4
description-type: markdown
description: |
  # streamly-bytestring

  Library for streamly and bytestring interoperation.

  If you are writing code from scratch, please use `Streamly.Data.Array.Foreign`
  which is a generalization of `ByteString` and better integrated with streamly.

  This library is to enable interoperation of streamly with existing code that
  uses `ByteString`.

  The package provides APIs to interconvert between strict `Bytestring` and
  streamly `Array Word8` and between lazy `Bytestring` and stream of `Array
  Word8`.

  The interconversion in the case of strict `Bytestring` and streamly `Array
  Word8` has no overhead as the underlying representation of ByteString and Array
  are the same, we just need to rewrap the data in a different type.

  ## Usage

  This is a dumb program that counts the number of bytes in a file.

  ```
  import qualified Streamly.Prelude as S

  import qualified Data.ByteString as BS
  import qualified Data.ByteString.Lazy as BSL

  import qualified Streamly.External.ByteString as Strict
  import qualified Streamly.External.ByteString.Lazy as Lazy

  import System.IO (FilePath)

  strictByteStringSize :: BS.ByteString -> IO Int
  strictByteStringSize bs = S.length $ S.unfold Strict.read bs

  lazyByteStringSize :: BSL.ByteString -> IO Int
  lazyByteStringSize bsl = S.foldl' (+) 0
                           $ S.mapM strictByteStringSize
                           $ S.map Strict.fromArray
                           $ Lazy.toChunks bsl

  fileSize :: FilePath -> IO Int
  fileSize path = do
      bsl <- BSL.readFile path
      lazyByteStringSize bsl
  ```
license-name: BSD-3-Clause
