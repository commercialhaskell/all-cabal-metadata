homepage: https://streamly.composewell.com
changelog-type: markdown
hash: c36324fe14508a591ce5e2a8128a833ddf4b11133fc9876279477fd861c65a82
test-bench-deps: {}
maintainer: streamly@composewell.com
synopsis: Examples for Streamly
changelog: |
  # Changelog

  ## 0.1.1 (Jan 2022)

  * Update the examples to work with the latest streamly version

  ## 0.1.0 (Jun 2021)

  * Initial version
basic-deps:
  exceptions: '>=0.8 && <0.11'
  base: '>=4.9 && <4.17'
  unordered-containers: ==0.2.*
  network: '>=2.6 && <4'
  containers: '>=0.5 && <0.7'
  mtl: '>=2.2 && <3'
  hashable: '>=1.2 && <1.4'
  transformers-base: ==0.4.*
  transformers: '>=0.4 && <0.6'
  random: '>=1.0.0 && <2'
  streamly: ==0.8.1.*
  vector: ==0.12.*
  directory: '>=1.2 && <1.4'
all-versions:
- 0.1.0
- 0.1.1
author: Composewell Technologies
latest: 0.1.1
description-type: markdown
description: "# Streamly Examples\n\nPractical examples to demonstrate the features
  and performance of\nStreamly.  Includes examples about file IO, text processing,
  networking,\nconcurrent programming, reactive programming and more.\n\nThese examples
  also serve as a beginner's guide to express practical\nprograms using the dataflow
  programming (streaming) model.  Please visit\nthe [Streamly homepage](https://streamly.composewell.com)
  for more\ndetails and comprehensive documentation.\n\n## Running The Examples\n\nExecutable
  names are the same as the filenames.  To run an example:\n\n```\n$ cabal run AcidRain\n```\n\nFor
  performance sensitive examples use fusion-plugin for best performance:\n\n```\n$
  cabal run --flag fusion-plugin WordCount -- streamly-examples.cabal\n```\n\nTo run
  SDL2 based examples, make sure that you have the OS package for\nthe sdl2 library
  installed on your system and the headers are visible to\ncabal:\n\n```\n$ cabal
  run --flag sdl2 CirclingSquare\n```\n\nTo run interop examples, use the `interop`
  build flag:\n\n```\n$ cabal run --flag interop Interop.Pipes\n```\n\n## List of
  examples\n\n### General\n\n* [Intro](examples/Intro.hs): Simple, introductory examples
  - loops, text\n  processing, networking, concurrency.\n* [MergeSort](examples/MergeSort.hs):
  Merge sorted streams concurrently.\n* [Rate](examples/Rate.hs): Run an action at
  a given rate.\n\n### FileSystem\n\n* [CoreUtils](examples/CoreUtils.hs): Implement
  simplified coreutils\n  like `cat`, `cp`, `tee`, `grep` using `Streamly.FileSystem.File`
  API.\n* [CoreUtilsHandle](examples/CoreUtilsHandle.hs): Implement simplified\n  coreutils
  using `Streamly.FileSystem.Handle` API.\n* [Split](examples/Split.hs): Implement
  file splitting utility `split`.\n* [FileSystemEvent](examples/FileSystemEvent.hs):
  File watching/fsnotify API\n  example.\n* [ListDir](examples/ListDir.hs): List a
  directory tree recursively and\n  concurrently.\n\n### Text Processing\n\n* [CamelCase](examples/CamelCase.hs):
  Convert a file to camel case.\n* [WordCount](examples/WordCount.hs): Simple word
  counting (`wc`) program.\n* [WordCount.c](examples/WordCount.c): C equivalent for
  perf comparison.\n* [WordCountModular](examples/WordCountModular.hs): Modular version.\n*
  [WordCountParallel](examples/WordCountParallel.hs): Concurrent version.\n* [WordCountParallelUTF8](examples/WordCountParallelUTF8.hs):
  Concurrent \n  version with full UTF8 handling.\n* [WordFrequency](examples/WordFrequency.hs):
  Count word frequency in\n  a file and print top 25 words.\n* [CSVParser](examples/CSVParser.hs):
  Process a CSV file\n\n### Networking\n\n* [EchoServer](examples/EchoServer.hs):
  A concurrent TCP server that\n  echoes everything that it receives.\n* [MergeServer](examples/MergeServer.hs):
  Merges lines received from\n  several client connections and writes them to a file.\n*
  [FileSender](examples/FileSender.hs): Send many files concurrently to\n  a server
  over multiple connections. Can be used to test `MergeServer`.\n* [CmdServer](examples/CmdServer.hs):
  Receive a stream of commands from many\n  clients and respond to them using command
  handlers.\n* [CmdClient](examples/CmdClient.hs): Run multiple concurrent clients
  sending\n  streams of commands to a server and receiving responses. Can be used
  to test\n  `CmdServer`.\n* [WordServer](examples/WordServer.hs): A word look up
  (dictionary)\n  server, instead of performing a real DB query the server just adds
  a\n  time delay to simulate the IO.\n\n### FRP/Games/Animation\n\n* [AcidRain](examples/AcidRain.hs):
  A console game with deteriorating health\n  that can be modified by typing \"harm\"
  and \"potion\" commands.\n* [CirclingSquare](examples/CirclingSquare.hs): Use SDL2
  to display a\n  square that moves in a circle, and follows the mouse pointer.\n\n###
  Monad Transformers\n\n* [ControlFlow](examples/ControlFlow.hs): Combining control
  flow manipulating\n  transformers (`MaybeT`, `ExceptT`, `ContT`) with streamly.\n\n###
  Interoperation\n\n* [Interop.Streaming](examples/Interop/Streaming.hs): Converting
  streamly\n  stream type to and from `streaming` stream type.\n* [Interop.Pipes](examples/Interop/Pipes.hs):
  Converting streamly\n  stream type to and from `pipes` stream type.\n* [Interop.Conduit](examples/Interop/Conduit.hs):
  Converting streamly\n  stream type to and from `conduit` stream type.\n* [Interop.Vector](examples/Interop/Vector.hs):
  Converting streamly\n  stream type to and from `vector` stream type.\n\n## Licensing\n\nAvailable
  under [Apache-2.0 license](LICENSE).\n"
license-name: Apache-2.0
