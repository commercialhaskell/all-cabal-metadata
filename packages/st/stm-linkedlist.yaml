all-versions:
- 0.1.0.0
author: Joey Adams
basic-deps:
  base: '>=4 && <5'
  stm: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Doubly linked lists are often used in imperative languages to maintain a
  collection of objects such that an object can remove itself easily.  The
  same idea applies here.  Thanks to STM, these lists can be shared among
  threads with little effort.

  Suppose you have a thread listening for events.  You want to dispatch
  events to any thread that opts in.  You could write a function that
  installs an event handler, performs an action, and removes the handler:

  >withEventHandler list handler action =
  >    bracket (atomically $ LinkedList.append handler list)
  >            (atomically . LinkedList.delete)
  >            (\_ -> action)

  Then, you could have your listener thread dispatch events using a function
  like this:

  >dispatchEvent list event = do
  >    handlers <- atomically $ LinkedList.toList list
  >    forM_ handlers $ \handler -> handler event
description-type: haddock
hash: a1b82dfd8e3652c998b50b2df4a99a27b6decfa463394c1c8b48b5e03bbe3e1e
homepage: ''
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: joeyadams3.14159@gmail.com
synopsis: Mutable, doubly linked lists for STM
test-bench-deps: {}
