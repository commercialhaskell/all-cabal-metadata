homepage: ''
changelog-type: markdown
hash: aea99400ef6e7fa064bb275601503544608b8e3fbee6f6c661b019033dc40d11
test-bench-deps:
  streaming: -any
  base: -any
  streaming-cassava: -any
  hspec: '>=2.4 && <2.8'
  text: -any
  quickcheck-instances: -any
  mtl: '>=2.2.1 && <2.3'
  QuickCheck: ==2.*
  vector: '>=0.3'
maintainer: Ivan.Miljenovic@gmail.com
synopsis: Cassava support for the streaming ecosystem
changelog: |
  # Revision history for streaming-cassava

  ## 0.2.0.0 -- 2021-02-28

  * Support `streaming-bytestring-0.2.*`

  ## 0.1.0.2 -- 2021-02-28

  * Fix issues with `readFile`.

  ## 0.1.0.1 -- 2018-01-23

  * Bump dependency on `streaming`.

  * Document what to do with `readFile` errors.

  ## 0.1.0.0 -- 2017-06-30

  * First version.
basic-deps:
  streaming: '>=0.1.1.0 && <0.3'
  bytestring: -any
  base: '>=4.8 && <5'
  cassava: ==0.5.*
  mtl: -any
  transformers: -any
  streaming-bytestring: ==0.2.*
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
author: Ivan Lazar Miljenovic
latest: 0.2.0.0
description-type: markdown
description: |
  streaming-cassava
  =================

  [![Hackage](https://img.shields.io/hackage/v/streaming-cassava.svg)](https://hackage.haskell.org/package/streaming-cassava) [![Build Status](https://github.com/haskell-streaming/streaming-cassava/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/haskell-streaming/streaming-cassava/actions/workflows/haskell-ci.yml)

  > [cassava] support for the [streaming] ecosystem

  [cassava]: http://hackage.haskell.org/package/cassava
  [streaming]: http://hackage.haskell.org/package/streaming

  This library allows you to easily stream CSV data in and out.  You can
  do so using both "plain" record-based (with optional header support)
  or name-based (header required to determine ordering)
  encoding/decoding.

  All encoding/decoding options are supported, it's possible to
  automatically add on default headers and you can even choose whether
  to fail on the first parse error or handle errors on a row-by-row
  basis.

  Reading data from file
  ----------------------

  A common use-case is to stream CSV-encoded data in from a file.  You
  may be tempted to use `readFile` from [streaming-bytestring] to obtain
  the file contents, and for simple cases this should suffice.  However,
  the recommended solution is to use the [streaming-with] package for
  the IO aspects.  You can then write something like:

  ```haskell
  withBinaryFileContents \"myFile.csv\" $
    doSomethingWithStreamingCSV
    . 'decodeByName'
  ```

  [streaming-bytestring]: https://hackage.haskell.org/package/streaming-bytestring
  [streaming-with]: https://hackage.haskell.org/package/streaming-with
license-name: MIT
