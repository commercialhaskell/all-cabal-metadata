all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.1.0
- 0.5.2.0
- 0.5.3.0
- 0.5.4.0
- 0.5.5.0
- 0.5.5.1
- 0.5.5.2
- 0.5.6.0
- 0.5.6.1
- 0.5.7.0
- 0.5.8.0
- 0.5.9.0
- 0.5.9.1
- 0.5.10.0
- 0.5.10.1
- 0.5.10.2
- 0.5.11.0
- 0.5.11.1
- 0.5.11.2
- 0.5.12.0
- 0.5.13.0
- 0.5.14.0
- 0.5.14.1
- 0.5.14.2
- 0.5.14.3
- 0.5.14.4
- 0.5.15.0
- 0.5.15.1
- 0.5.15.2
- 0.5.16.0
- 0.5.17.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.3.0
- 0.6.4.0
- 0.6.5.0
- 0.7.0.0
- 0.7.1.0
- 0.8.0.0
- 0.8.1.0
- 0.9.0.0
- 0.9.0.1
- 0.9.0.2
- 0.9.1.0
- 0.9.1.1
- 0.9.2.0
- 0.9.2.1
- 0.9.2.2
- 0.9.3.0
- 0.9.4.0
- 0.9.4.3
- 0.9.4.4
- 0.10.0.0
- 0.11.0.0
- 0.11.0.3
- 0.12.0.0
- 0.12.1.0
- 0.12.2.0
- 0.13.0.0
- 0.14.0.0
- 0.14.0.1
- 0.14.1.0
- 0.14.2.0
- 0.14.3.0
- 0.14.4.0
- 0.14.5.0
- 0.14.6.0
- 0.15.0.0
- 0.15.0.1
- 0.15.1.0
author: Jasper Van der Jeugt <m@jaspervdj.be>
basic-deps:
  Cabal: '>=3.10 && <4.0'
  HsYAML: '>=0.2.0 && <0.3'
  HsYAML-aeson: '>=0.2.0 && <0.3'
  aeson: '>=0.6 && <2.3'
  base: '>=4.19 && <5'
  bytestring: '>=0.9 && <0.13'
  containers: '>=0.3 && <0.9'
  directory: '>=1.2.3 && <1.4'
  file-embed: '>=0.0.10 && <0.1'
  filepath: '>=1.1 && <1.6'
  ghc-lib-parser: '>=9.12 && <9.13'
  ghc-lib-parser-ex: '>=9.12 && <9.13'
  mtl: '>=2.0 && <2.4'
  optparse-applicative: '>=0.12 && <0.19'
  regex-tdfa: '>=1.3 && <1.4'
  strict: '>=0.3 && <0.6'
  stylish-haskell: '>=0'
  syb: '>=0.3 && <0.8'
  text: '>=1.2 && <2.2'
changelog: |
  # CHANGELOG

  - 0.15.1.0 (2025-04-13)
       *  #491 Support GHC 9.12 (By GuillaumedeVolpiano)

  - 0.15.0.1 (2025-04-13)
       *  #493 Support Cabal 3.12 again (By GuillaumedeVolpiano)

  - 0.15.0.0 (2025-04-13)
       *  #480 Support with GHC 9.10 (By Jan Hrček)

       *  #482 Add `ConfigSearchStrategy` to allow avoiding `getCurrentDirectory`
          when loading config (by Jan Hrček)

          This is breaking API change that can be fixed like this:

          ```diff
          -format Nothing maybeFile contents
          +format SearchFromCurrentDirectory maybeFile contents

          -format (Just cfgFile) maybeFile content
          +format (UseConfig cfgFile) maybeFile content
          ```

       *  Bump `Cabal` lower bound to 3.14

  - 0.14.6.0 (2024-01-19)
       *  #471 Support GHC 9.8 (by Michael Peyton Jones)
       *  #440 Fix dissappearing `DEPRECATED` pragma on module (by Lev Dvorkin)
       *  #464 Fix compilation issue with GHC 9.4

  - 0.14.5.0 (2023-06-23)
       *  #459 Support GHC 9.6 (by Michael Peyton Jones)
       *  #445 Default `ghc-lib` flag to True (by amesgen)

  - 0.14.4.0 (2023-01-09)
       *  #421 Support GHC 9.4 (by Lei Zhu)
       *  #439 Fix NoXyz extension issues for .cabal files (by Lev Dvorkin)
       *  #424 Deriving alignment for enums (by Lev Dvorkin)
       *  #416 Support Safe/Trustworthy/Unsafe extensions

  - 0.14.3.0 (2022-09-28)
       *  Fix parsing of NoXyz extensions
       *  Bump `Cabal` upper bound to 4.0
       *  Add option to automatically group imports (by Tikhon Jelvis)

  - 0.14.2.0 (2022-04-27)
       *  Add a build flag to force the use of ghc-lib-parser

  - 0.14.1.0 (2022-03-31)
       *  Unify the Editor modules, deal with overlap better

  - 0.14.0.1 (2022-03-17)
       *  Use GHC API directly if >= 9.2.2
       *  Bump `bytestring` upper bound to 0.12

  - 0.14.0.0 (2022-03-16)
       *  Port to GHC 9.2 AST (by jaspervdj)
       *  Case insensitive import sort (by vlatkoB)
       *  Fix issue with dissappearing GADT kind signatures (by Łukasz Gołębiewski)

  - 0.13.0.0 (2021-09-15)
       *  Don't remove ticks on promoted data types (by Jim McStanton)
       *  Add break_only_where option (by 1Computer1)
       *  Keep wildcard if present in IEThingWith (by Moisés Ackerman)
       *  Generalise break_only_where to allow single-line module headers
          (by Thomas Winant)
       *  Add new configuration to ModuleHeader step (by Pawel Szulc)
       *  Add a language pragma style "vertical_compact" (by Javran Cheng)
       *  Don't remove existential quantification (by Imuli)
       *  Add support for post qualified import formatting (by Moisés Ackerman)
       *  Bump `optparse-applicative` upper bound to 0.17

  - 0.12.2.0 (2020-10-08)
       *  align: Add a new option for aligning only adjacent items (by 1Computer1)
       *  align: Add support for aligning MultiWayIf syntax (by 1Computer1)
       *  data: Fix some issues with record field padding
       *  module_header: Add separate_lists option
       *  imports: Respect separate_lists for (..) imports
       *  data: Make sorting deriving list optional (by Maxim Koltsov)

  - 0.12.1.0 (2020-10-05)
       *  Bump Cabal-version to 2.4 (by Łukasz Gołębiewski)
       *  Fix "group" import sort with multi-line imports (by Maxim Koltsov)

  - 0.12.0.0 (2020-10-02)
       *  Use ghc-lib-parser rather than haskell-src-exts

          This patch swaps out the parsing library from `haskell-src-exts` to
          `ghc-lib-parser`, which gives us better compatibility with GHC.

          Because almost every module heavily used the Haskell AST provided by
          `haskell-src-exts`, this was a huge effort and it would not have been
          possible without Felix Mulder doing an initial port, GSoC student
          Beatrice Vergani porting several other steps, and Łukasz Gołębiewski and
          Paweł Szulc who helped me finish up things in the home stretch.

          I've generally tried to keep styling 100% compatible with what was there
          before, but some issues may have unintentionally slipped in so please
          report those.

          This introduces one new import styling contributed by Felix: when
          wrapping import lists over multiple lines, you can repeat the module
          name, e.g.:

              import Control.Monad.Except as X (ExceptT (..), MonadError (..))
              import Control.Monad.Except as X (runExceptT, withExceptT)

          This is activated by using `import_align: repeat`.

          Secondly, a new Step was added, `module_header`, which formats the
          export list of a module, including the trailing `where` clause.  Details
          for this new step can be found in the `data/stylish-haskell.yaml`.

       *   Remove `semigroup` dependency for GHC >= 8.0
       *   Bump `strict` upper bound to 0.4
       *   Bump `Cabal` upper bound to 3.3 for test suite

  - 0.11.0.3 (2020-08-02)
      * Set default-language to Haskell2010

  - 0.11.0.2 (2020-08-02)
      * Bump `Cabal-version` to 1.10

  - 0.11.0.1 (2020-08-02)
      * Bump `aeson` upper bound to 1.6
      * Bump `Cabal` upper bound to 3.3

  - 0.11.0.0 (2020-02-24)
      * Disable record formatting by default
      * Allow more customization for record formatting (by Maxim Koltsov)
      * Disable formatting of data types without records (by Maxim Koltsov)
      * Add `-r` flag to recursively find Haskell files (by Akos Marton)

  - 0.10.0.0 (2020-01-26)
      * Switch to HsYAML library (by vijayphoenix)
      * Expose `format` from main library (by Łukasz Gołębiewski)
      * Support record formatting (by Łukasz Gołębiewski and Pawel Szulc)
      * Allow setting `columns` to `null` to disable all wrapping (by Chris
        Martin)
      * Bump `haskell-src-exts` to 1.23
      * New logo (by Jose Fernando García Parreño)
      * Make language extension prefix configurable (by Flavio Corpa)

  - 0.9.4.4 (2019-11-03)
      * Bump `haskell-src-exts` to 1.22

  - 0.9.4.3 (2019-10-29)
      * Bump release script
      * Bump `Cabal` to 3.0

  - 0.9.4.2 (2019-10-29)
      * Bump release script

  - 0.9.4.1 (2019-10-29)
      * Bump release script

  - 0.9.4.0 (2019-10-29)
      * Read language extensions from `.cabal` file (by Georgy Lukyanov)

  - 0.9.3.1 (2019-10-08)
      * Fix CircleCI configuration

  - 0.9.3.0 (2019-10-08)
      * Bump `optparse-applicative` to 0.15
      * Don't remove page breaks in the trailing whitespace step (by Chris
        Perivolaropoulos)
      * Add `with_module_name` option to `list_align` for import styling (by
        Rupert Horlick)

  - 0.9.2.2 (2019-06-12)
      * Bump `semigroups` to 0.19
      * Bump `haskell-src-exts` to 1.21

  - 0.9.2.1 (2019-01-02)
      * Bump `aeson` to 1.4
      * Bump `yaml` to 0.11
      * Bump `containers` to 0.6

  - 0.9.2.0 (2018-05-01)
      * Support alignment of case expressions with a single guard
      * Add a new step to squash multiple spaces between some elements (by Martin
        Huschenbett)

  - 0.9.1.1 (2018-04-26)
      * Bump `aeson` to 1.3 for tests as well

  - 0.9.1.0 (2018-04-26)
      * Support GHC 8.4.1 by adding instance SemiGroup ImportPortion (by George
        Wilson)
      * Bump `aeson` to 1.3

  - 0.9.0.2 (2018-01-03)
      * Bump lower bound of `directory` to `1.2.3` for `getXdgDirectory`

  - 0.9.0.1 (2017-12-29)
      * Fix missing Extra-source-file in cabal file

  - 0.9.0.0 (2017-12-26)
      * Embed the default configuration
      * Add platform-specific configuration paths (by Jan Tojnar)
      * Bump `haskell-src-exts` to 0.20
      * Avoid unpaired parenthesis when import doesn't specify any items (by
        Matthew Kennerly)
      * Remove shebang lines at the beginning of file (by Vaibhav Sagar)

  - 0.8.1.0 (2017-06-19)
      * Add `pad_module_names` option (by Yuriy Syrovetskiy)
      * Add `space_surround` option to import styling (by Linus Arver)
      * Bump `optparse-applicative` to 0.14

  - 0.8.0.0
      * Remove `MagicHash` from whitelisted language extensions, since it was
        causing parsing errors (by Artyom Kazak)
      * Don't leave a `#-}` hanging on the next line when `language_pragmas`
        is set to `compact` and the `#-}` doesn't fit into character limit
        (by Artyom Kazak)
      * Deduplicate import specs (i.e. `import Foo (a, a, b)` becomes
        `import Foo (a, b)`) (by Artyom Kazak)
      * Take package imports into account when prettifying imports
        (by Artyom Kazak)
      * Bump `aeson` to 1.2
      * Bump `syb` to 0.7
      * Bump `HUnit` to 1.6

  - 0.7.1.0
      * Keep `safe` and `{-# SOURCE #-}` import annotations (by Moritz Drexl)

  - 0.7.0.0
      * If there's parse errors, show these and exit with code 1
      * Bump `aeson` to 1.1
      * Bump `directory` to 1.3
      * Bump `haskell-src-exts` to 1.19

  - 0.6.5.0
      * Fix issue with unit records (by Mizunashi Mana)
      * Bump `HUnit` to 1.5

  - 0.6.4.0
      * Remove `XmlSyntax` from whitelisted language extensions, since it was
        causing parsing errors

  - 0.6.3.0
      * Bump `optparse-applicative` to 0.13.0.0
      * Export Import options & add a default
      * Add `list_padding: module_name` option (by Oleg Grenrus)
      * Bump `aeson` to 1.0 (by Oleg Grenrus)
      * Special setting for empty import lists (by Oleg Grenrus)

  - 0.6.2.0
      * Bump `haskell-src-exts` to 1.18

  - 0.6.1.0
      * Fix line patching issue in Editor

  - 0.6.0.0
      * Add a `simple_align` step
      * Move `records` step into `simple_align`
      * Use a set of default language extensions for parsing (by Langston Barrett)
      * Add a newline format option (by Svyatolslav Gryaznov)
      * Add more symbols from UnicodeSyntax (by Langston Barrett)
      * Add a `--version` option (by Ondra Pelech)

  - 0.5.17.0
      * Remove shebang from input before attempting to extract pragmas
      * Set stdin and stdout encoding to UTF-8 by default

  - 0.5.16.0
      * Fail if the default configuration file is not found.

  - 0.5.15.2
      * Bump `aeson` to 0.11

  - 0.5.15.1
      * Fix error that caused haddock to bail on this package

  - 0.5.15.0
      * Add new options for import list alignment (by Ondřej Janošík)

  - 0.5.14.4
      * Bump `stylish-haskell` to 1.17.0

  - 0.5.14.3
      * Bump `HUnit` to 1.13

  - 0.5.14.2
      * Bump `aeson` to 0.10
      * Bump `syb` to 0.6

  - 0.5.14.1
      * Bump `aeson` to 0.9

  - 0.5.14.0
      * Bump `syb` to 0.5
      * Slight refactoring in align code

  - 0.5.13.0
      * Fix issue with shebang code

  - 0.5.12.0
      * Add support for shebang at start of file

  - 0.5.11.2
      * Bump `filepath` dependency to 1.5

  - 0.5.11.1
      * Fix -Wall compilation with GHC 7.10

  - 0.5.11.0
      * Bump `haskell-src-exts` dependency to 1.16

  - 0.5.10.2
      * Bump `mtl` dependency to 2.2

  - 0.5.10.1
      * Bump `aeson` dependency to 0.8

  - 0.5.10.0
      * Bump `haskell-src-exts` dependency to 1.15
      * Fix test which was not run before

  - `0.5.9.0`
      * Add `compact_line` setting for Language Pragma styling
changelog-type: text
description: |
  ## stylish-haskell

  <img src="./assets/Logo/SVG/RoundedLogo.svg" width="100px">

  ![Stack Build Status](https://github.com/jaspervdj/stylish-haskell/workflows/CI/badge.svg)
  ![Cabal Build Status](https://github.com/jaspervdj/stylish-haskell/workflows/Cabal/badge.svg)

  ## Introduction

  A simple Haskell code prettifier. The goal is not to format all of the code in
  a file, since I find those kind of tools often "get in the way". However,
  manually cleaning up import statements etc. gets tedious very quickly.

  This tool tries to help where necessary without getting in the way.

  ## Installation

  You can install it using `stack install stylish-haskell` or `cabal install stylish-haskell`.

  You can also install it using your package manager:

  - Debian 9 or later: `apt-get install stylish-haskell`
  - Ubuntu 16.10 or later: `apt-get install stylish-haskell`
  - Arch Linux: `pacman -S stylish-haskell`

  ## Features

  - Aligns and sorts `import` statements
  - Groups and wraps `{-# LANGUAGE #-}` pragmas, can remove (some) redundant
    pragmas
  - Removes trailing whitespace
  - Aligns branches in `case` and fields in records
  - Converts line endings (customizable)
  - Replaces tabs by four spaces (turned off by default)
  - Replaces some ASCII sequences by their Unicode equivalents (turned off by
    default)
  - Format data constructors and fields in records.

  Feature requests are welcome! Use the [issue tracker] for that.

  [issue tracker]: https://github.com/haskell/stylish-haskell/issues

  ## Example

  Turns:

  ```haskell
  {-# LANGUAGE ViewPatterns, TemplateHaskell #-}
  {-# LANGUAGE GeneralizedNewtypeDeriving,
              ViewPatterns,
      ScopedTypeVariables #-}

  module Bad where

  import Control.Applicative ((<$>))
  import System.Directory (doesFileExist)

  import qualified Data.Map as M
  import      Data.Map    ((!), keys, Map)

  data Point = Point { pointX, pointY :: Double , pointName :: String} deriving (Show)
  ```

  into:

  ```haskell
  {-# LANGUAGE GeneralizedNewtypeDeriving #-}
  {-# LANGUAGE ScopedTypeVariables        #-}
  {-# LANGUAGE TemplateHaskell            #-}

  module Bad where

  import           Control.Applicative ((<$>))
  import           System.Directory    (doesFileExist)

  import           Data.Map            (Map, keys, (!))
  import qualified Data.Map            as M

  data Point = Point
      { pointX, pointY :: Double
      , pointName      :: String
      } deriving (Show)
  ```

  ## Configuration

  The tool is customizable to some extent. It tries to find a config file in the
  following order:

  1. A file passed to the tool using the `-c/--config` argument
  2. `.stylish-haskell.yaml` in the current directory (useful for per-directory
     settings)
  3. `.stylish-haskell.yaml` in the nearest ancestor directory (useful for
     per-project settings)
  4. `stylish-haskell/config.yaml` in the platform’s configuration directory
     (on Windows, it is %APPDATA%, elsewhere it defaults to `~/.config` and
     can be overridden by the `XDG_CONFIG_HOME` environment variable;
     useful for user-wide settings)
  5. `.stylish-haskell.yaml` in your home directory (useful for user-wide
     settings)
  6. The default settings.

  Use `stylish-haskell --defaults > .stylish-haskell.yaml` to dump a
  well-documented default configuration to a file, this way you can get started
  quickly.

  ## Record formatting

  Basically, stylish-haskell supports 4 different styles of records, controlled by `records`
  in the config file.

  Here's an example of all four styles:

  ```haskell
  -- equals: "indent 2", "first_field": "indent 2"
  data Foo a
    = Foo
        { a :: Int
        , a2 :: String
          -- ^ some haddock
        }
    | Bar
        { b :: a
        }
    deriving (Eq, Show)
    deriving (ToJSON) via Bar Foo

  -- equals: "same_line", "first_field": "indent 2"
  data Foo a = Foo
                 { a :: Int
                 , a2 :: String
                   -- ^ some haddock
                 }
             | Bar
                 { b :: a
                 }
    deriving (Eq, Show)
    deriving (ToJSON) via Bar Foo

  -- equals: "same_line", "first_field": "same_line"
  data Foo a = Foo { a :: Int
                   , a2 :: String
                     -- ^ some haddock
                   }
             | Bar { b :: a
                   }
    deriving (Eq, Show)
    deriving (ToJSON) via Bar Foo

  -- equals: "indent 2", first_field: "same_line"
  data Foo a
    = Foo { a :: Int
          , a2 :: String
            -- ^ some haddock
          }
    | Bar { b :: a
          }
    deriving (Eq, Show)
    deriving (ToJSON) via Bar Foo
  ```

  ## Editor integration

  ### Haskell Language Server
  [Haskell Language Server(HLS)][HLS] includes a [plugin][HLS stylish-haskell Plugin]
  for stylish-haskell. By changing the formatting provider option
  (`haskell.formattingProvider`) to `stylish-haskell` as described in
  [HLS options][HLS option], any editors that support [Language Server Protocol][LSP]
  can use stylish-haskell for formatting.

  [HLS]: https://github.com/haskell/haskell-language-server
  [HLS option]: https://haskell-language-server.readthedocs.io/en/latest/configuration.html#language-specific-server-options
  [HLS stylish-haskell Plugin]: https://github.com/haskell/haskell-language-server/blob/master/plugins/hls-stylish-haskell-plugin/src/Ide/Plugin/StylishHaskell.hs
  [LSP]: https://microsoft.github.io/language-server-protocol/

  ### VIM integration

  Since it works as a filter it is pretty easy to integrate this with VIM.

  You can call

      :%!stylish-haskell

  and add a keybinding for it.

  Or you can define `formatprg`

      :set formatprg=stylish-haskell

  and then use `gq`.

  Alternatively, [vim-autoformat] supports stylish-haskell. To have it
  automatically reformat the files on save, add to your vimrc:

  ```vim
  autocmd BufWrite *.hs :Autoformat
  " Don't automatically indent on save, since vim's autoindent for haskell is buggy
  autocmd FileType haskell let b:autoformat_autoindent=0
  ```

  There are also plugins that run stylish-haskell automatically when you save a
  Haskell file:

  - [vim-stylish-haskell]
  - [vim-stylishask]

  [vim-stylish-haskell]: https://github.com/nbouscal/vim-stylish-haskell
  [vim-stylishask]: https://github.com/alx741/vim-stylishask

  ### Emacs integration

  [haskell-mode] for Emacs supports `stylish-haskell`. For configuration,
  see [the “Using external formatters” section][haskell-mode/format] of the
  haskell-mode manual.

  [haskell-mode]: https://github.com/haskell/haskell-mode
  [haskell-mode/format]: http://haskell.github.io/haskell-mode/manual/latest/Autoformating.html

  ### Atom integration

  [ide-haskell] for Atom supports `stylish-haskell`.

  [atom-beautify] for Atom supports Haskell using `stylish-haskell`.

  [ide-haskell]: https://atom.io/packages/ide-haskell
  [atom-beautify]: Https://atom.io/packages/atom-beautify

  ### Visual Studio Code integration

  [stylish-haskell-vscode] for VSCode supports `stylish-haskell`.

  [stylish-haskell-vscode]: https://github.com/vigoo/stylish-haskell-vscode

  ## Using with Continuous Integration

  You can quickly grab the latest binary and run `stylish-haskell` like so:

      curl -sL https://raw.github.com/haskell/stylish-haskell/master/scripts/latest.sh | sh -s .

  Where the `.` can be replaced with the arguments you pass to `stylish-haskell`.

  ## Credits

  Written and maintained by Jasper Van der Jeugt.

  Contributors:

  - Chris Done
  - Hiromi Ishii
  - Leonid Onokhov
  - Michael Snoyman
  - Mikhail Glushenkov
  - Beatrice Vergani
  - Paweł Szulc
  - Łukasz Gołębiewski
  - Felix Mulder
description-type: markdown
hash: 46f5b2152f8f310c2a907449ab71a1aece788406df1e36cf2b27d9aadba322d4
homepage: https://github.com/haskell/stylish-haskell
latest: 0.15.1.0
license-name: BSD-3-Clause
maintainer: Jasper Van der Jeugt <m@jaspervdj.be>
synopsis: Haskell code prettifier
test-bench-deps:
  Cabal: '>=3.10 && <4.0'
  HUnit: '>=1.2 && <1.7'
  HsYAML: '>=0.2.0 && <0.3'
  HsYAML-aeson: '>=0.2.0 && <0.3'
  aeson: '>=0.6 && <2.3'
  base: '>=4.19 && <5'
  bytestring: '>=0.9 && <0.13'
  containers: '>=0.3 && <0.9'
  directory: '>=1.2.3 && <1.4'
  file-embed: '>=0.0.10 && <0.1'
  filepath: '>=1.1 && <1.6'
  ghc-lib-parser: '>=9.12 && <9.13'
  ghc-lib-parser-ex: '>=9.12 && <9.13'
  mtl: '>=2.0 && <2.4'
  random: '>=1.1'
  regex-tdfa: '>=1.3 && <1.4'
  stylish-haskell: '>=0'
  syb: '>=0.3 && <0.8'
  test-framework: '>=0.4 && <0.9'
  test-framework-hunit: '>=0.2 && <0.4'
  text: '>=1.2 && <2.2'
