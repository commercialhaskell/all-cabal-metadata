all-versions:
- 4.0.0.0
author: ''
basic-deps:
  base: '>=0'
  mtl: '>=0'
changelog: ''
changelog-type: ''
description: "------------------------------------------------------------------------------\n\nStrategyLib
  --- a library for generic programming with functional strategies\n\nREADME file\n\nTable
  of contents\n\n- Cross references (files with further information)\n- Subdirectories
  of the source distribution\n- Prerequisites for using the library and running examples\n-
  Checking the installation (just do a \"gmake check\")\n- Targets used by Makefile
  system\n- Supported models of functional strategies\n- \n\n------------------------------------------------------------------------------\n\n\nCross
  references\n----------------\n\nAUTHORS   --- authors of Strafunski\nCOPYING   ---
  BSD-style copyright\nINTALL    --- recommeneded versions of hugs/ghc/ghci/DrIFT\nVERSION
  \  --- version of StrategyLib\nChangeLog --- changes compared to previous version\nTODO
  \     --- issues to be addressed in the future\n\n\n------------------------------------------------------------------------------\n\n\nSubdirectories
  of the source distribution\n-----------------------------------------\n\nlibrary
  \ --- implementation of functional strategies and StrategLib's themes\nmodels   ---
  different models of functional strategies\nscripts  --- reusable scripts (mainly
  includes for Makefiles)\nexamples --- examples of using functional strategies\n\n\n------------------------------------------------------------------------------\n\n\nPrerequisites
  for using the library and running examples\n--------------------------------------------------------\n\nEither
  ghc or hugs or both, and maybe DrIFT.\nSee the file INSTALL for details.\n\n\n------------------------------------------------------------------------------\n\n\nChecking
  the installation\n-------------------------\n\nJust type in \"gmake check\" which
  provides you with a list of options\nto check the distribution in different ways.
  The options differ\nregarding the used Haskell implementations and regarding the
  fact\nwhether derived modules are to be regenerated with DrIFT or the\nshipped versions
  will be used as is.\n\n\n-------------------------------------------------------------------------------\n\n\nTargets
  used by Makefile system\n-------------------------------\n\nYou don't need to \"make\"
  anything since this is a source distribution,\nbut there are some make targets to
  run examples and do other things.\nIn applications of StrategyLib, one is encouraged
  to reuse some includes\nfor Makefiles as provided in subdirectory \"scripts\".\n\n\nTargets
  in examples/*/Makefiles:\n\n run-hugs   --- run Main.hs with hugs\n run-ghci   ---
  run Main.hs with ghci\n run-ghc    --- run Main.hs with ghc \n derive     --- run
  DrIFT if needed\n\n\nRecursive clean targets:\n\n clean      --- remove backup files,
  object code, etc.\n very-clean --- also remove modules generated by DrIFT\n\n\nTargets
  in the top-level Makefile:\n\n check      --- list detailed check options\n dist
  \      --- build a distribution (to be implemented)\n\n\n-------------------------------------------------------------------------------\n\n\nSupported
  models of functional strategies\n-----------------------------------------\n \nWe
  have played with quite a few models, and most of them are somewhat\nsupported by
  DrIFT, but for simplicity we only exercise two models in\nthe present distribution;
  see subdirectory \"models\":\n \n- drift-default: a model based on a specific universal
  term representation\n- deriving:      a model based on GHC's support for the Typeable/Data
  classes\n \nMost subdirectories of ${StrategyLib}/examples assume the\n\"drift-default\"
  model. In fact, we only demonstrate the difference for\nthe two models by having
  a \"twosorts-drift-default\" vs. a\n\"twosorts-deriving\" example.\n\n\n-------------------------------------------------------------------------------\n\n\nExamples\n--------\n\nExamples
  are hosted in subdirectory examples.\n\ntwo-sorts-drift-default --- the most trivial
  example; good for studying\ntwo-sorts-derving       --- a variation requiring GHC's
  deriving support\nlittle-lambda           --- a trivial example of language processing\njoos-padl02
  \            --- refactoring for a Java-subset (see PADL'02 paper)\njoos-rule02
  \            --- refactoring for a Java-subset (see RULE'02 paper)\nhaskell                 ---
  transformation of Haskell itself\n\n\n-------------------------------------------------------------------------------\n\n\nLinks\n-----\n\n-
  DrIFT      --- http://repetae.net/john/computer/haskell/DrIFT/\n- Strafunski ---
  http://www.cs.vu.nl/Strafunski/ \n                 http://strafunski.sourceforge.net/\n\n"
description-type: text
hash: 1b1cf316dc5c86604afce975b819a6ef47092bb93fc07a9c6defc2f9ccdf3df4
homepage: http://naesten.dyndns.org:8080/repos/StrategyLib
latest: 4.0.0.0
license-name: NONE
maintainer: Samuel Bronson <naesten@gmail.com>
synopsis: ''
test-bench-deps: {}
