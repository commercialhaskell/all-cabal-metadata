all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.4.0.0
author: Daniel Diaz
basic-deps:
  base: '>=4.8 && <5'
  foldl: '>=1.4.0'
  pipes: '>=4.1.0'
  streaming: '>=0.2.0.0'
  transformers: '>=0.4.0.0'
changelog: |+
  0.4.0.0

  - Bumped lower bounds for "streaming" and "foldl".
  - Removed functions with MonadResource constraints.

  0.3.1.0

  - Added functions with MonadResource contraints.

  0.3.0.0

  - Implemented the improvements suggested by Michael Thompson here :
  https://groups.google.com/forum/#!topic/haskell-pipes/7n6NPTmxPKY by M.T.
  - Removed the newtypes. I mistakenly believed that they were needed to avoid
  having to enable -XImpredicativeTypes.

  0.2.0.0

  - Eversible, not Evertible!
  - Removed special purpose error functions.
  - Added some utility functions.
  - Added Category instances.

changelog-type: text
description: "## What's in this library?\n\nFunctions that turn pull-based stream
  operations from the pipes/streaming\necosystem into push-based, iteratee-like stream
  operations. \n\nInspired by the blog post [Programmatic translation to iteratees
  from pull-based code](http://pchiusano.blogspot.com.es/2011/12/programmatic-translation-to-iteratees.html).\n\n##
  Could you go into more detail?\n\nThere are three streaming libraries that often
  go together:\n[pipes](http://hackage.haskell.org/package/pipes),\n[streaming](http://hackage.haskell.org/package/streaming),
  and\n[foldl](http://hackage.haskell.org/package/foldl).\n\nOf these, the first two
  are pull-based: you take some (possibly effectful)\nsource of values and keep extracting
  stuff until the source is exhausted and/or\nyou have obtained all the info you need.\n\nMeanwhile,
  foldl is push-based: foldl folds are not directly aware of any\nsource, they are
  like little state machines that keep running as long as\nsomeone feeds them input.
  \n\nUsually, defining stream transformations in pull-based mode is easier and feels\nmore
  natural. The pipes ecosystem already provides a lot of them:\n[parsers](http://hackage.haskell.org/package/pipes-parse),\n[decoders](http://hackage.haskell.org/package/pipes-text),\n[splitters](http://hackage.haskell.org/package/pipes-group).\n\nHowever,
  push-based mode also has advantages. Push-based abstractions are not\ntied to a
  particular type of source because data is fed externally. And foldl\nfolds have
  very useful Applicative and Comonad instances. \n\nAlso, sometimes a library will
  only offer a push-based interface. \n\nWouldn't it be nice if you could adapt already
  existing pull-based operations\nto work on push-based consumers? For example, using
  a decoding function from\n[Pipes.Text.Encoding](http://hackage.haskell.org/package/pipes-text-0.0.2.4/docs/Pipes-Text-Encoding.html#g:6)\nto
  preprocess the inputs of a\n[Fold](http://hackage.haskell.org/package/foldl-1.2.1/docs/Control-Foldl-Text.html).\n\nThis
  library provides that.\n\n"
description-type: markdown
hash: 2a4e4c161840acea38c780a0efc6f8145e9b1305d90f73b17bedbd016136e59c
homepage: ''
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: Translate pull-based stream folds into push-based iteratees.
test-bench-deps:
  base: '>=4.8 && <5'
  doctest: '>=0.10.1'
  foldl: '>=1.1.5'
  microlens: '>=0.4.2.1'
  pipes: '>=4.1.0'
  pipes-bytestring: '>=2.1.1'
  pipes-text: '>=0.0.2.2'
  streaming: '>=0.1.4.2'
  streaming-eversion: '>=0'
  tasty: '>=0.10.1.1'
  tasty-hunit: '>=0.9.2'
  tasty-quickcheck: '>=0.8.3.2'
