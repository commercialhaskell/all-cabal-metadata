all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- '0.3'
- 0.3.1
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.3.2
- 0.5.0
- 0.5.0.1
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.6.0
- 0.6.0.1
- 0.6.1
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
- 0.7.10
- 0.7.11
- 0.7.12
- 0.7.13
- 0.7.14
- 0.7.15
- 0.7.16
- 0.7.17
- 0.7.18
author: ''
basic-deps:
  array: '>=0.5.0.0'
  async: '>=2.0.2'
  base: '>=4.7 && <5'
  base-orphans: '>=0.4.3'
  base64-bytestring: '>=0.1.1'
  bifunctors: '>=4.0'
  bytestring: '>=0.10.4.0'
  containers: '>=0.5.5.1'
  contravariant: '>=1.3'
  cryptohash-sha1: '>=0.11.6'
  deepseq: '>=1.3.0.2'
  directory: '>=1.2'
  filepath: '>=1.3'
  free: '>=4.11'
  ghc-prim: '>=0.3.1.0'
  hashable: '>=1.2.3.1'
  hspec: '>=2.1.2'
  hspec-smallcheck: '>=0.3.0'
  integer-gmp: '>=0.5.1.0'
  lifted-base: '>=0.2.3.3'
  monad-control: '>=0.3.3.0'
  mono-traversable: '>=0.7.0'
  nats: '>=1'
  network: '>=2.6.0.2'
  primitive: '>=0.6'
  resourcet: '>=1.1.3.3'
  safe: '>=0.3.8'
  smallcheck: '>=1.1.1'
  store-core: '>=0.4 && <0.5'
  syb: '>=0.4.4'
  template-haskell: '>=2.9.0.0'
  text: '>=1.2.0.4'
  th-lift: '>=0.7.1'
  th-lift-instances: '>=0.1.4'
  th-orphans: '>=0.13.2'
  th-reify-many: '>=0.1.6'
  th-utilities: '>=0.2'
  time: '>=1.5'
  transformers: '>=0.3.0.0'
  unordered-containers: '>=0.2.5.1'
  vector: '>=0.10.12.3 && <0.13.2.0'
  void: '>=0.5.11'
changelog: |
  # ChangeLog

  ## 0.7.16

  * Adds support for `vector-0.13.0.0`. See [#174][].

  [#174]: https://github.com/mgsloan/store/issues/174


  ## 0.7.15

  * Adds support for `text >= 2`. See [#170][].

  [#170]: https://github.com/mgsloan/store/issues/170


  ## 0.7.14

  * Fixes build with ghc-8.10 (broken in last release due to differences
    in TH API). See [#165][].

  [#165]: https://github.com/mgsloan/store/issues/165


  ## 0.7.13

  * Fix build with `time >= 1.11`. See [#162][].

  * Adds missing `liftTyped` method for `Lift TypeHash`. See [#163][].

  [#162]: https://github.com/mgsloan/store/issues/162
  [#163]: https://github.com/mgsloan/store/issues/163

  ## 0.7.12

  * Build with ghc-9.0.1

  ## 0.7.11

  * Fixes testsuite compilation with `network >= 3.1.2`. See [#159][].

  ## 0.7.10

  * Adds `Store` instances for all serializable datatypes exported by
    the `time` library. See [#158][].

  [#158]: https://github.com/mgsloan/store/issues/158

  ## 0.7.9

  * Attempts to fix build on ghc-7.8.4. See [#157][].

  [#157]: https://github.com/mgsloan/store/issues/157

  ## 0.7.8

  * Adds a `Store` instance for `Natural`. See [#154][].

  [#154]: https://github.com/mgsloan/store/issues/154

  ## 0.7.7

  * Test now compiles with `smallcheck >= 1.2` and `base >= 4.14`.
    See [#153][].

  [#153]: https://github.com/fpco/store/issues/153

  ## 0.7.6

  * Now only depends on `fail` / `semigroups` shim for `ghc < 8`.

  ## 0.7.4

  * Fix for compilation with `ghc-8.10` in `0.7.3` did not use enough
    CPP, and so broke builds for older versions. This release fixes
    that.

  ## 0.7.3

  * Fixes compilation with `ghc-8.10`, particularly
    `template-haskell-2.16.0.0`. See [#149][].

  [#149]: https://github.com/fpco/store/issues/149

  ## 0.7.2

  * Fixes compilation with `vector >= 0.12.1.1` by making
    `deriveManyStoreUnboxVector` capable of handling more complex
    instance constraints. In particular, it now correctly generates
    instances `Store (Vector (f (g a))) => Store (Vector (Compose f g
    a))` and `Store (Vector (f a)) => Store (Vector (Alt f a))`.

  ## 0.7.1

  * Fixes compilation with GHC-7.10 due to it not defining `Generic`
    instances for `Complex` and `Identity`. See [#142][].

  * Documents some gotchas about using store vs other libraries

  [#142]: https://github.com/fpco/store/issues/142

  ## 0.7.0

  * Fixes a bug where the `Store` instances for `Identity`, `Const`, and
    `Complex` all have `Storable` superclasses instead of `Store. See
    [#143][].

  [#143]: https://github.com/fpco/store/issues/143

  ## 0.6.1

  * Can now optionally be built with `integer-simple` instead of
    `integer-gmp`, via the `integer-simple` cabal flag.  Note that the
    serialization of `Integer` with `integer-simple` differs from what
    is used by the GMP default. See [#147][].

  [#147]: https://github.com/fpco/store/pull/147

  ## 0.6.0.1

  * Now builds with GHC-7.10 - compatibility was broken in 0.6.0 due to
    the fix for GHC-8.8. See
    [#146][https://github.com/fpco/store/issues/146].

  ## 0.6.0

  * Now builds with GHC-8.8. This is a major version bump because
    MonadFail constraints were added to some functions, which is
    potentially a breaking change.

  ## 0.5.1.2

  * Fixes compilation with GHC < 8.0.  See
    [#142](https://github.com/fpco/store/issues/142).

  ## 0.5.1.1

  * Update to the instances for generics, to improve error messages for
    sum types with more than 255 constructors.  See
    [#141](https://github.com/fpco/store/issues/141)

  ## 0.5.1.0

  * Update to TH to support sum types with more than 62 constructors.

  * Uses TH to derive Either instance, so that it can sometimes have ConstSize #119.

  ## 0.5.0.1

  * Updates to test-suite enabling `store` to build with newer dependencies.

  ## 0.5.0

  * `Data.Store.Streaming` moved to a separate package, `store-streaming`.

  ## 0.4.3.2

  * Buildable with GHC 8.2

  * Fix to haddock formatting of Data.Store.TH code example

  ## 0.4.3.1

  * Fixed compilation on GHC 7.8

  ## 0.4.3

  * Less aggressive inlining, resulting in faster compilation / simplifier
    not running out of ticks

  ## 0.4.2

  * Fixed testsuite

  ## 0.4.1

  * Breaking change in the encoding of Map / Set / IntMap / IntSet,
    to use ascending key order. Attempting to decode data written by
    prior versions of store (and vice versa) will almost always fail
    with a decent error message. If you're unlucky enough to have a
    collision in the data with a random Word32 magic number, then the
    error may not be so clear, or in extremely rare cases,
    successfully decode, yielding incorrect results. See
    [#97](https://github.com/fpco/store/issues/97) and
    [#101](https://github.com/fpco/store/pull/101).


  * Performance improvement of the 'Peek' monad, by introducing more
    strictness.  This required a change to the internal API.

  * API and behavior of 'Data.Store.Version' changed. Previously, it
    would check the version tag after decoding the contents. It now
    also stores a magic Word32 tag at the beginning, so that it fails
    more gracefully when decoding input that lacks encoded version
    info.

  ## 0.4.0

  Deprecated in favor of 0.4.1

  ## 0.3.1

  * Fix to derivation of primitive vectors, only relevant when built with
    primitive-0.6.2.0 or later

  * Removes INLINE pragmas on the generic default methods.  This
    dramatically improves compilation time on recent GHC versions.
    See [#91](https://github.com/fpco/store/issues/91).

  * Adds `instance Contravariant Size`

  ## 0.3

  * Uses store-core-0.3.*, which has support for alignment sensitive
    architectures.

  * Adds support for streaming decode from file descriptor, not supported on
    windows. As part of this addition, the API for "Data.Store.Streaming" has
    changed.

  ## 0.2.1.2

  * Fixes a bug that could could result in attempting to malloc a negative
    number of bytes when reading corrupted data.

  ## 0.2.1.1

  * Fixes a bug that could result in segfaults when reading corrupted data.

  ## 0.2.1.0

  Release notes:

  * Adds experimental `Data.Store.Version` and deprecates `Data.Store.TypeHash`.
    The new functionality is similar to TypeHash, but there are much fewer false
    positives of hashes changing.

  Other enhancements:

  * Now exports types related to generics

  ## 0.2.0.0

  Release notes:

  * Core functionality split into `store-core` package

  Breaking changes:

  * `combineSize'` renamed to `combineSizeWith`

  * Streaming support now prefixes each Message with a magic number, intended to
    detect mis-alignment of data frames. This is worth the overhead, because
    otherwise serialization errors could be more catastrophic - interpretting some
    bytes as a length tag and attempting to consume many bytes from the source.

  Other enhancements:

  * [weigh](https://github.com/fpco/weigh) based allocations benchmark.

  * Addition of `Array` / `UArray` instances

  * Streaming support now has checks for over/undershooting buffer

  Bug fixes:


  ## 0.1.0.0

  * First public release
changelog-type: markdown
description: |
  # store

  The 'store' package provides efficient binary serialization. There are
  a couple features that particularly distinguish it from most prior
  Haskell serialization libraries:

  * Its primary goal is speed. By default, direct machine
    representations are used for things like numeric values (`Int`,
    `Double`, `Word32`, etc) and buffers (`Text`, `ByteString`,
    `Vector`, etc). This means that much of serialization uses the
    equivalent of `memcpy`.

    We have plans for supporting architecture independent
    serialization - see [#36](https://github.com/fpco/store/issues/36)
    and [#31](https://github.com/fpco/store/issues/31). This plan makes
    little endian the default, so that the most common endianness has no
    overhead.

    - Another way that the serialization behavior can vary is if
      integer-simple is used instead of GHC's default of using
      GMP. `Integer` serialized with the `integer-simple` flag enabled
      are not compatible with those serialized without the flag enabled.

  * Instead of implementing lazy serialization / deserialization
    involving multiple input / output buffers, `peek` and `poke` always
    work with a single buffer. This buffer is allocated by asking the
    value for its size before encoding. This simplifies the encoding
    logic, and allows for highly optimized tight loops.

  * `store` can optimize size computations by knowing when some types
    always use the same number of bytes.  This allows us to compute the
    byte size of a `Vector Int32` by just doing `length v * 4`.

  It also features:

  * Optimized serialization instances for many types from base, vector,
    bytestring, text, containers, time, template-haskell, and more.

  * TH and GHC Generics based generation of Store instances for
    datatypes.

  * TH generation of testcases.

  * Utilities for streaming encoding / decoding of Store encoded
    messages, via the `store-streaming` package.

  ## Gotchas

  Store is best used for communication between trusted processes and
  local caches.  It can certainly be used for other purposes, but the
  builtin set of instances have some gotchas to be aware of:

  * Store's builtin instances serialize in a format which depends on
    machine endianness.

  * Store's builtin instances trust the data when deserializing. For
    example, the deserialization of `Vector` will read the vector's
    length from the first 8 bytes. It will then allocate enough memory
    to store all the elements. Malicious or malformed input could cause
    allocation of large amounts of memory.  See [issue #122][].

  * Serialization may vary based on the version of datatypes. For
    example, `Text` serialized from `text < 2` will not be compatible
    with `Text` from `text >= 2`, because the internal representation
    switched from UTF-16 to UTF-8.

  [issue #122]: https://github.com/fpco/store/issues/122

  ## Blog posts

  * [Initial release announcement](https://www.fpcomplete.com/blog/2016/05/store-package)
  * [Benchmarks of the prototype](https://www.fpcomplete.com/blog/2016/03/efficient-binary-serialization)
  * [New 'weigh' allocation benchmark package](https://www.fpcomplete.com/blog/2016/05/weigh-package),
    created particularly to aid optimizing `store`.
description-type: markdown
hash: 4b159aa1f683e83a6f946b0d2de83b207fa84817db39a82186b2bbd261ca1af3
homepage: https://github.com/mgsloan/store#readme
latest: 0.7.18
license-name: MIT
maintainer: Michael Sloan <mgsloan@gmail.com>
synopsis: Fast binary serialization
test-bench-deps:
  array: '>=0.5.0.0'
  async: '>=2.0.2'
  base: '>=4.7 && <5'
  base-orphans: '>=0.4.3'
  base64-bytestring: '>=0.1.1'
  bifunctors: '>=4.0'
  bytestring: '>=0.10.4.0'
  cereal: '>=0'
  cereal-vector: '>=0'
  clock: '>=0.3'
  containers: '>=0.5.5.1'
  contravariant: '>=1.3'
  criterion: '>=0'
  cryptohash-sha1: '>=0.11.6'
  deepseq: '>=1.3.0.2'
  directory: '>=1.2'
  filepath: '>=1.3'
  free: '>=4.11'
  ghc-prim: '>=0.3.1.0'
  hashable: '>=1.2.3.1'
  hspec: '>=2.1.2'
  hspec-smallcheck: '>=0.3.0'
  integer-gmp: '>=0.5.1.0'
  lifted-base: '>=0.2.3.3'
  monad-control: '>=0.3.3.0'
  mono-traversable: '>=0.7.0'
  nats: '>=1'
  network: '>=2.6.0.2'
  primitive: '>=0.6'
  resourcet: '>=1.1.3.3'
  safe: '>=0.3.8'
  smallcheck: '>=1.1.1'
  store: '>=0'
  store-core: '>=0.4 && <0.5'
  syb: '>=0.4.4'
  template-haskell: '>=2.9.0.0'
  text: '>=1.2.0.4'
  th-lift: '>=0.7.1'
  th-lift-instances: '>=0.1.4'
  th-orphans: '>=0.13.2'
  th-reify-many: '>=0.1.6'
  th-utilities: '>=0.2'
  time: '>=1.5'
  transformers: '>=0.3.0.0'
  unordered-containers: '>=0.2.5.1'
  vector: '>=0.10.12.3'
  vector-binary-instances: '>=0'
  void: '>=0.5.11'
  weigh: '>=0'
