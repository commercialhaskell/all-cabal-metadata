all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.8
- '0.5'
- 0.5.1
author: Jens Petersen <juhpetersen@gmail.com>
basic-deps:
  base: '>=4.8 && <5'
  directory: '>=1.2.5'
  extra: '>=1.4.3'
  filemanip: '>=0'
  filepath: '>=0'
  simple-cmd: '>=0.1.4'
  simple-cmd-args: '>=0.1.2'
  simple-prompt: '>=0.2'
changelog: |
  # Release history for stack-clean-old

  ## 0.5.1 (2023-12-17)
  - listStackSubdirs: sort after filtering
  - Directory: ignore non-directories, like .DS_Store files (#19,
    thanks to @0rphee for reporting #18)

  ## 0.5 (2023-09-13)
  - simpler dry run output and use simple-prompt yesNo
  - add --yes option for --delete
  - keep-minor: fix ghc minor version checks with major version

  ## 0.4.8 (2023-08-26)
  - support the `STACK_ROOT` environment variable which overrides
    the default Stack root (`~/.stack`) by @PRESFIL (#12)
  - list all the platform variants by default (#15)

  ## 0.4.7 (2023-08-22)
  - add --tarballs for programs/ ghc tarballs too (#9)
  - bug fix to match both ghc-*.* and ghc-variant-*.* (#14)
  - rename --os-system to --platform and add more explanation (#15)
  - parse ghc installation versions more carefully
  - ignore hidden files in stack dirs

  ## 0.4.6 (2022-02-03)
  - fix --recursive and --subdirs to work again
  - show --recursive dir paths
  - ignore non-ghc dirs in ~/.stack/programs/

  ## 0.4.5 (2022-01-14)
  - fix multiple reminders about using --delete

  ## 0.4.4 (2022-01-04)
  - handle .stack-work/ consistently for --subdir and --recursive
  - remind user to use '--delete' for removal
  - purge-older: output is now sorted by ghc versions

  ## 0.4.3 (2021-11-23)
  - 'delete-work' now prints ".stack-work" would be deleted
  - prompts now print what would be deleted
  - '--recursive' now prints dirs with '/' appended

  ## 0.4.2 (2021-11-22)
  - add optional --os-system to fix #7
  - list/size snapshots before compilers for --global

  ## 0.4.1 (2021-10-05)
  - --help now mentions --delete and a link to README

  ## 0.4 (2021-09-26)
  - dryrun is now default: use --delete for actual removal
    (suggested by @andreasabel #6)
  - new --subdirs and --recursive options
  - various output improvements
  - purge-older now also says "would be removed" when dryrun

  ## 0.3.1 (2021-08-01)
  - 'delete-work': use find -prune and ignore inaccessible files (@petrem, #4)

  ## 0.3 (2021-01-08)
  - drop subsubcommands to simplify UI
  - default to project if there is a .stack-work/ dir, otherwise global ~/.stack
  - rename commands:
    - remove-version -> remove
    - remove-earlier-minor -> keep-minor
    - remove-older -> purge-older
    - remove-work -> delete-work
  - fix handling of partially installed ghc compiler temp dirs (#2)
  - rename --dryrun to --dry-run (#1)
  - drop --dir option
  - delete-work: use --all to run from a non-project dir

  ## 0.2.2 (2002-12-31)
  - add 'project remove-work' to recursively remove .stack-work from projects

  ## 0.2.1 (2020-11-14)
  - remove-earlier-minor can now take a major version
  - major internal refactors with VersionSnapshots type
  - split code into modules

  ## 0.2 (2020-10-26)
  - add --dryrun to all remove commands
  - remove-earlier-minor subcommands to purge for previous ghc minor versions
  - allow major ghc X.Y versions (prompts for removal)
  - 'ghc list' is now sorted

  ## 0.1 (2020-09-22)
  - initial release with project and snapshots subcommands
changelog-type: markdown
description: "# stack-clean-old\n\nA small tool to clean away older Haskell [stack](https://docs.haskellstack.org)\nsnapshot
  builds and ghc versions to recover diskspace.\n\n## Usage\n```\nstack-clean-old
  [size|list|remove|keep-minor|purge-older|delete-work] [(-P|--project)|(-G|--global)|(-C|--compilers)|(-T|--tarballs)]
  [(-s|--subdirs)|(-r|--recursive)] [-d|--delete] [GHCVER]`\n```\nIn a project directory
  it acts on `.stack-work/install/` by default,\notherwise on `${STACK_ROOT}/{snapshots,programs}/`\n(the
  default *Stack root* is `~/.stack/`):\nsee the [Stack root documentation](https://docs.haskellstack.org/en/stable/stack_root/).\n\nSubcommands:\n\n`size`:\n
  \   prints the total size of `.stack-work/` of project(s) or the *Stack root*.\n
  \   directories (`size` does not take a GHCVER argument).\n\n`list`:\n    shows
  the total size and number of snapshots per ghc version\n    (the GHCVER argument
  is optional).\n\n`remove`:\n    removes for the specified ghc version (the GHCVER
  argument is required).\n\n`keep-minor`:\n    removes the builds/installs for older
  minor releases of ghc major versions.\n    If GHCVER is given then only minor versions
  older than it\n    (or than the latest installed minor version) are removed.\n    If
  no GHCVER is given it applies to each installed ghc major version.\n\n`purge-older`:\n
  \   removes snapshot builds with older timestamps\n\n`delete-work`:\n    removes
  `.stack-work` directories completely\n\ndry-run mode is used by default and one
  should use `--delete` (`-d`)\nfor actual deletion of files, after checking the dry-run
  output.\n\nIf you should remove any needed snapshot builds,\nthen they will get
  rebuilt again by stack next time you build any projects\nneeding them, so removals
  should be done carefully\nbut can recover a lot of diskspace.\n\nFurther the commands
  can use `--subdirs` or `--recursive` to run over\nthe projects in subdirs under
  the current directory or\nall matching `.stack-work` dirs from the current directory
  and below\nrespectively.\n\nIf you have different ghc variants/archs installed\nyou
  can use `--platform` to restrict to one of then,\notherwise they are each listed
  by default.\n\n### Example usage\nList a project's builds:\n```ShellSession\n$ stack-clean-old
  list\n149M  9.2.8  (5 dirs)\n163M  9.4.7  (5 dirs)\n155M  9.6.2  (5 dirs)\n```\nRemove
  project's 9.0.2 builds:\n```ShellSession\n$ stack-clean-old remove --delete --project
  9.0.2\n:\n```\n(--project is optional in a project dir).\n\nRemove stack ghc-9.4
  snapshot builds and minor compilers before 9.4.7:\n```ShellSession\n$ stack-clean-old
  list --global 9.4\nx86_64-linux-tinfo6:\n1.8G  9.4.6  (61 dirs)\n279M  9.4.7  (6
  dirs)\nx86_64-linux:\nghc-tinfo6-9.4.6\nghc-tinfo6-9.4.7\n$ stack-clean-old keep-minor
  --global 9.4\nghc-tinfo6-9.4.6 compiler would be removed\nx86_64-linux-tinfo6:\n61
  dirs in ~/.stack/snapshots/x86_64-linux-tinfo6/*/9.4.6 would be removed\n\n(use
  --delete (-d) for removal)\n$ stack-clean-old keep-minor --global 9.4 -d\nghc-tinfo6-9.4.6
  compiler removed\nx86_64-linux-tinfo6:\n61 dirs in ~/.stack/snapshots/x86_64-linux-tinfo6/*/9.4.6
  removed\n```\n(--global is optional outside a project dir).\n\nIf you have different
  latest minor versions for compilers and snapshots\nyou may prefer to specify the
  latest minor version to keep\nto get more certain behaviour.\n\n### Purging older
  stack project builds\n```\nstack-clean-old purge-older\n```\nThis command removes
  older stack builds from `.stack-work/install/`.\nBy default it keeps 5 newest builds
  per ghc version.\n\nThe preservation/deletion is calculated and done per ghc version.\n\nNB:
  If you regularly build your project for several branches/tags against the same LTS
  or ghc version then it is safer to avoid using `purge-older`.\n\n### Deleting all
  `.stack-work/` subdirectories\n`stack-clean-old delete-work --recursive` can be
  used to remove recursively\n_all_ `.stack-work/` dirs within (or outside) a project
  directory to save\nspace (seems same as `stack clean --full` inside a project).\n\n##
  Help output\n(Note you can also run this tool via `stack clean-old`.)\n\nTo get
  help you can run `stack-clean-old --help` or just:\n`$ stack-clean-old --version`\n```\n0.5\n```\n`$
  stack-clean-old --help`\n```\nStack clean up tool\n\nUsage: stack-clean-old [--version]
  COMMAND\n\n  Cleans away old stack-work builds (and pending: stack snapshots) to
  recover\n  diskspace. Use the --delete option to perform actual removals.\n  https://github.com/juhp/stack-clean-old#readme\n\nAvailable
  options:\n  -h,--help                Show this help text\n  --version                Show
  version\n\nAvailable commands:\n  size                     Total size\n  list                     List
  sizes per ghc version\n  remove                   Remove for a ghc version\n  keep-minor
  \              Remove for previous ghc minor versions\n  purge-older              Purge
  older builds in .stack-work/install\n  delete-work              Remove project's
  .stack-work/ (optionally\n                           recursively)\n```\n\n### Command
  options\nMost of the commands have similar options, e.g.:\n\n`$ stack-clean-old
  remove --help`\n```\nUsage: stack-clean-old remove [(-d|--delete) [-y|--yes]] \n
  \                             [(-P|--project) | (-S|--snapshots) | \n                                (-C|--compilers)
  | (-T|--tarballs) | \n                                (-G|--global)] \n                              [(-s|--subdirs)
  | (-r|--recursive)] GHCVER \n                              [-o|--platform SYSTEM]\n\n
  \ Remove for a ghc version\n\nAvailable options:\n  -d,--delete              Do
  deletion [default is dryrun]\n  -y,--yes                 Assume yes for all prompts\n
  \ -P,--project             Act on current project's .stack-work/ [default in\n                           project
  dir]\n  -S,--snapshots           Act on ~/.stack/snapshots/\n  -C,--compilers           Act
  on ~/.stack/programs/ installations\n  -T,--tarballs            Act on ~/.stack/programs/
  tarballs\n  -G,--global              Act on both ~/.stack/{programs,snapshots}/
  [default\n                           outside project dir]\n  -s,--subdirs             List
  subdirectories\n  -r,--recursive           List subdirectories\n  -o,--platform
  SYSTEM     Specify which OS platform to work on (eg\n                           'x86_64-linux-tinfo6',
  'aarch64-linux-nix',\n                           'x86_64-osx', 'aarch64-osx', etc)\n
  \ -h,--help                Show this help text\n```\n\n(The `list` and `size` commands
  don't have `--delete` and `--yes`.)\n\n## Installation\n\nRun `stack install` or
  `cabal install`\n\n## Related\nThis tool complements\n[stack-all](https://hackage.haskell.org/package/stack-all)\nwhich
  builds projects across LTS major versions and\nhence generates a lot of stack builds.\n\n[cabal-clean](https://hackage.haskell.org/package/cabal-clean)
  is\na similar tool for cleaning old cached cabal build files.\n\n## Contributing\nBSD
  license\n\nProject: <https://github.com/juhp/stack-clean-old>\n\n## Disclaimer\nUse
  at your own risk: the author takes no responsibility for any loss or\ndamaged caused
  by using this tool.\n\nBug reports, suggestions, and improvements are welcome.\n"
description-type: markdown
hash: 7380de1c0b765f22881cd2ab399b9d1ab72cf3bfd0c72ab8eb09c771e6ed791a
homepage: https://github.com/juhp/stack-clean-old
latest: 0.5.1
license-name: BSD-3-Clause
maintainer: Jens Petersen <juhpetersen@gmail.com>
synopsis: Clean away old stack build artifacts
test-bench-deps: {}
