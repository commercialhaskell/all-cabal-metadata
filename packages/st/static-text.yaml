all-versions:
- '0.2'
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.0.6
- 0.2.0.7
author: Dmitry Dzhus
basic-deps:
  base: <5
  bytestring: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  vector: '>=0'
changelog: |
  # Changelog

  ## [0.2.0.7] - 2021-07-10

  ### Changed

  - GHC 9.x support

  ## [0.2.0.6] - 2020-06-03

  ### Changed

  - Relaxed dependency version bounds

  ## [0.2.0.5] - 2020-02-21

  ### Changed

  - Dependencies bump

  ## [0.2.0.4] - 2019-01-23

  ### Changed

  - Test suite dependencies bump

  ## [0.2.0.3] - 2018-10-08

  ### Changed

  - GHC 8.6.x support

  ## [0.2.0.2] - 2018-07-30

  ### Changed

  - Use `doctest-driver-gen` to run doctests

  - Dependencies bump

  - Use `markdown-unlit` to test code example in README

  ## [0.2.0.1] - 2018-03-15

  ### Changed

  - GHC 8.4.x support

  ## [0.2.0] - 2018-02-17

  ### Changed

  - Package renamed to `static-text` as per
    <https://github.com/dzhus/static-text/issues/2>. Old names were
    changed as follows:

      | before       | after             |
      |--------------|-------------------|
      | `Data.Sext`  | `Data.StaticText` |
      | `Sext n a`   | `Static a n`      |
      | `Sextable a` | `IsStaticText a`  |
      | `$(sext ..)` | `$(st ..)`        |

  ## [0.1.3.1] - 2017-10-29

  ### Added

  - GHC 8.2.x support

  ## [0.1.3] - 2017-03-26

  ### Added

  - `ShortByteString` support

  ### Fixed

  - A bug in `createLeft` which failed to actually pad/truncate strings
    (<https://github.com/dzhus/static-text/issues/4>)

  ## [0.1.2] - 2017-01-18

  ### Added

  - `Vector` support, `Eq` and `Ord` instances. \
    Contributed by Dylan Simon <dylan@dylex.net>
    (<https://github.com/dzhus/static-text/pull/3>)

  ## [0.1.1] - 2016-19-12

  ### Added

  - GHC 8.0.x support

  ## [0.1.0.2] - 2015-12-06

  ### Added

  - GHC 7.10.x support

  ## [0.1.0.0] - 2014-08-10

  [0.2.0.7]: https://github.com/dzhus/static-text/compare/0.2.0.6...0.2.0.7
  [0.2.0.6]: https://github.com/dzhus/static-text/compare/0.2.0.5...0.2.0.6
  [0.2.0.5]: https://github.com/dzhus/static-text/compare/0.2.0.4...0.2.0.5
  [0.2.0.4]: https://github.com/dzhus/static-text/compare/0.2.0.3...0.2.0.4
  [0.2.0.3]: https://github.com/dzhus/static-text/compare/0.2.0.2...0.2.0.3
  [0.2.0.2]: https://github.com/dzhus/static-text/compare/0.2.0.1...0.2.0.2
  [0.2.0.1]: https://github.com/dzhus/static-text/compare/0.2.0...0.2.0.1
  [0.2.0]:   https://github.com/dzhus/static-text/compare/0.1.3.1...0.2.0
  [0.1.3.1]: https://github.com/dzhus/static-text/compare/0.1.3...0.1.3.1
  [0.1.3]:   https://github.com/dzhus/static-text/compare/0.1.2...0.1.3
  [0.1.2]:   https://github.com/dzhus/static-text/compare/0.1.1...0.1.2
  [0.1.1]:   https://github.com/dzhus/static-text/compare/0.1.0.2...0.1.1
  [0.1.0.2]: https://github.com/dzhus/static-text/compare/0.1.0.0...0.1.0.2
  [0.1.0.0]: https://github.com/dzhus/static-text/tree/0.1.0.0
changelog-type: markdown
description: |
  # static-text: lists, Texts, ByteStrings and Vectors of statically known length

  [![Github CI build status](https://github.com/dzhus/static-text/actions/workflows/ci.yaml/badge.svg)](https://github.com/dzhus/static-text/actions/workflows/ci.yaml)
  [![Hackage](https://img.shields.io/hackage/v/static-text.svg?colorB=5e5184&style=flat)](https://hackage.haskell.org/package/static-text)
  [![Hackage deps](https://img.shields.io/hackage-deps/v/static-text.svg)](http://packdeps.haskellers.com/feed?needle=static-text)

  static-text provides type-level safety for basic operations on
  string-like types (finite lists of elements), such as `Data.Text`,
  `String` (and all lists), `Data.ByteString` and `Data.Vector`. Use it
  when you need static guarantee on lengths of strings produced in your
  code.

  An example application would be a network exchange protocol built of
  packets with fixed-width fields:

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE TemplateHaskell #-}
  import Data.ByteString.Char8 (ByteString, pack)
  import Data.StaticText

  mkPacket :: ByteString -> Static ByteString 32
  mkPacket inp =
    -- 5-character version signature
    $(st "PKT10") `append`
    -- 25-character payload
    payload `append`
    -- 2-character payload checksum
    checksum
    where
      payload = createLeft 0x20 inp
      checksum :: Static ByteString 2
      checksum = createLeft 0x20 $
                 pack $ show $ Data.StaticText.length payload `mod` 100

  message :: Static ByteString 64
  message = mkPacket "Hello" `append` mkPacket "world"

  main :: IO ()
  main = print message
  ```

  Please consult the [Hackage page for static-text][hackage-doc] for
  documentation and examples.

  ## Alternatives

  The emphasis of static-text is on type-safe padding/truncation and
  type-safe string literals. Other similar libraries may suit different
  use cases:

  - [vector-sized][] and [fixed-vector][]: full support for Vector API,
    but not string-like types.

  [hackage-doc]: http://hackage.haskell.org/package/static-text/docs/Data-StaticText.html

  [fixed-vector]:  https://hackage.haskell.org/package/fixed-vector

  [vector-sized]: https://hackage.haskell.org/package/vector-sized
description-type: markdown
hash: dc510b8c2e6212f18555080827f0ec2728219db4033b1a09016184deae3f571d
homepage: https://github.com/dzhus/static-text#readme
latest: 0.2.0.7
license-name: BSD-3-Clause
maintainer: dima@dzhus.org
synopsis: Lists, Texts, ByteStrings and Vectors of statically known length
test-bench-deps:
  base: <5
  bytestring: '>=0'
  doctest: '>=0'
  doctest-driver-gen: '>=0'
  markdown-unlit: '>=0'
  static-text: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  template-haskell: '>=0'
