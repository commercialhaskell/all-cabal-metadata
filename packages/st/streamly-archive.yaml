all-versions:
- 0.0.1
- 0.0.2
- 0.1.0
- 0.2.0
- 0.3.0
author: Shlok Datye
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10.10.0 && <0.12'
  containers: '>=0.6.2.1 && <0.8'
  streamly: '>=0.10.0 && <0.11'
  streamly-core: '>=0.2.0 && <0.3'
changelog: |
  ## 0.3.0

  * Updated for Streamly 0.10.0.
  * Eliminated the `Void` seed for `readArchive`.
  * Added the ability to map over headers and filter out entries during `readArchive`.
  * Generalized `groupByHeader` to `groupByLeft`.
  * Added utility functions: `eitherByLeft`, `chunkOn`, `chunkOnFold`.

  ## 0.2.0

  * Updated for Streamly 0.9.0.
  * Added `groupByHeader` convenience function.

  ## 0.1.0

  * Updated for Streamly 0.8.0.

  ## 0.0.2

  * Allow QuickCheck <2.15 and tasty <1.5.

  ## 0.0.1

  * Initial release.
changelog-type: markdown
description: |
  # streamly-archive

  [![Hackage](https://img.shields.io/hackage/v/streamly-archive.svg?style=flat)](https://hackage.haskell.org/package/streamly-archive)
  ![CI](https://github.com/shlok/streamly-archive/workflows/CI/badge.svg?branch=master)

  Stream data from archives (tar, tar.gz, zip, or any other format [supported by libarchive](https://github.com/libarchive/libarchive/wiki/LibarchiveFormats)) using the Haskell [streamly](https://hackage.haskell.org/package/streamly) library.

  ## Requirements

  Install libarchive on your system.

  * Debian Linux: `sudo apt-get install libarchive-dev`.
  * macOS: `brew install libarchive`.

  ## Quick start

  ```haskell
  {-# LANGUAGE ScopedTypeVariables #-}
  {-# LANGUAGE TypeApplications #-}

  module Main where

  import Crypto.Hash
  import Data.ByteString (ByteString)
  import Data.Function
  import Data.Functor
  import Data.Maybe
  import Streamly.Data.Fold (Fold)
  import qualified Streamly.Data.Fold as F
  import qualified Streamly.Data.Stream.Prelude as S
  import Streamly.External.Archive

  main :: IO ()
  main = do
    -- A fold for converting each archive entry (which is a Header followed by
    -- zero or more ByteStrings) into a path and corresponding SHA-256 hash
    -- (Nothing for no data).
    let entryFold :: Fold IO (Either Header ByteString) (String, Maybe String) =
          F.foldlM'
            ( \(mpath, mctx) e ->
                case e of
                  Left h -> do
                    mpath' <- headerPathName h
                    return (mpath', mctx)
                  Right bs ->
                    return
                      ( mpath,
                        Just . (`hashUpdate` bs) $
                          fromMaybe (hashInit @SHA256) mctx
                      )
            )
            (return (Nothing, Nothing))
            <&> ( \(mpath, mctx) ->
                    ( show $ fromMaybe (error "path expected") mpath,
                      show . hashFinalize <$> mctx
                    )
                )

    -- Execute the stream, grouping at the headers (the Lefts) using the above
    -- fold, and output the paths and SHA-256 hashes along the way.
    S.unfold readArchive (id, "/path/to/archive.tar.gz")
      & groupByLeft entryFold
      & S.mapM print
      & S.fold F.drain
  ```

  ## Benchmarks

  See `./bench/README.md`. Summary (with rough figures from our machine<sup>†</sup>):
   * For 1-byte files, this library has roughly a 70 ns/byte overhead compared to plain Haskell `IO` code, which has roughly a 895 ns/byte overhead compared to plain C.
   * For larger (> 10 KB) files, this library performs just as good as plain Haskell `IO` code, which has roughly a 0.15 ns/byte overhead compared to plain C.

  <sup>†</sup> July 2024; NixOS 22.11; Intel i7-12700K (3.6 GHz, 12 cores); Corsair VENGEANCE LPX DDR4 RAM 64GB (2 x 32GB) 3200MHz; Samsung 970 EVO Plus SSD 2TB (M.2 NVMe).
description-type: markdown
hash: 0f15ea4085c21c49bdb071fac80d35b2cd5b0143d02da51587869f2f6cb38a5e
homepage: https://github.com/shlok/streamly-archive#readme
latest: 0.3.0
license-name: BSD-3-Clause
maintainer: sd-haskell@quant.is
synopsis: Stream data from archives using the streamly library.
test-bench-deps:
  QuickCheck: '>=2.13.2 && <2.15'
  async: '>=2.2.2 && <2.3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.10.0 && <0.12'
  containers: '>=0.6.2.1 && <0.8'
  cryptonite: '>=0.26'
  directory: '>=1.3.1 && <1.4'
  filepath: '>=1.4.2.1 && <1.5'
  split: '>=0.2.3.5 && <0.3'
  streamly: '>=0.10.0 && <0.11'
  streamly-archive: '>=0'
  streamly-core: '>=0.2.0 && <0.3'
  tar: '>=0.5.1.1 && <0.6'
  tasty: '>=1.2.3 && <1.5'
  tasty-hunit: '>=0.10.1 && <0.11'
  tasty-quickcheck: '>=0.10.1.1 && <0.11'
  temporary: '>=1.3 && <1.4'
  zlib: '>=0.6.2.1 && <0.7'
