all-versions:
- 0.0.1
- 0.0.2
- 0.1.0
- 0.2.0
author: Shlok Datye
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.11 && <0.12'
  streamly: '>=0.9 && <0.10'
  streamly-core: '>=0.1 && <0.2'
changelog: |
  ## 0.2.0

  * Updated for Streamly 0.9.0.
  * Added `groupByHeader` convenience function.

  ## 0.1.0

  * Updated for Streamly 0.8.0.

  ## 0.0.2

  * Allow QuickCheck <2.15 and tasty <1.5.

  ## 0.0.1

  * Initial release.
changelog-type: markdown
description: |
  # streamly-archive

  [![Hackage](https://img.shields.io/hackage/v/streamly-archive.svg?style=flat)](https://hackage.haskell.org/package/streamly-archive)
  ![CI](https://github.com/shlok/streamly-archive/workflows/CI/badge.svg?branch=master)

  Stream data from archives (tar, tar.gz, zip, or any other format [supported by libarchive](https://github.com/libarchive/libarchive/wiki/LibarchiveFormats)) using the Haskell [streamly](https://hackage.haskell.org/package/streamly) library.

  ## Requirements

  Install libarchive on your system.

  * Debian Linux: `sudo apt-get install libarchive-dev`.
  * macOS: `brew install libarchive`.

  ## Quick start

  ```haskell
  {-# LANGUAGE ScopedTypeVariables #-}
  {-# LANGUAGE TypeApplications #-}

  module Main where

  import Crypto.Hash (hashFinalize, hashInit, hashUpdate)
  import Crypto.Hash.Algorithms (SHA256)
  import Data.ByteString (ByteString)
  import Data.Function ((&))
  import Data.Maybe (fromJust, fromMaybe)
  import Data.Void (Void)
  import qualified Streamly.Data.Fold as F
  import qualified Streamly.Data.Stream.Prelude as S
  import Streamly.External.Archive
    ( Header,
      groupByHeader,
      headerPathName,
      readArchive,
    )
  import Streamly.Internal.Data.Fold.Type (Fold (Fold), Step (Partial))
  import Streamly.Internal.Data.Unfold.Type (Unfold)

  main :: IO ()
  main = do
    -- Obtain an unfold for the archive.
    -- For each entry in the archive, we will get a Header followed
    -- by zero or more ByteStrings containing chunks of file data.
    let unf :: Unfold IO Void (Either Header ByteString) =
          readArchive "/path/to/archive.tar.gz"

    -- Create a fold for converting each entry (which, as we saw
    -- above, is a Left followed by zero or more Rights) into a
    -- path and corresponding SHA-256 hash (Nothing for no data).
    let entryFold :: Fold IO (Either Header ByteString) (String, Maybe String) =
          Fold
            ( \(mpath, mctx) e ->
                case e of
                  Left h -> do
                    mpath' <- headerPathName h
                    return $ Partial (mpath', mctx)
                  Right bs ->
                    return $
                      Partial
                        ( mpath,
                          Just . (`hashUpdate` bs) $
                            fromMaybe (hashInit @SHA256) mctx
                        )
            )
            (return $ Partial (Nothing, Nothing))
            ( \(mpath, mctx) ->
                return
                  ( show $ fromJust mpath,
                    show . hashFinalize <$> mctx
                  )
            )

    -- Execute the stream, grouping at the headers (the Lefts) using the
    -- above fold, and output the paths and SHA-256 hashes along the way.
    S.unfold unf undefined
      & groupByHeader entryFold
      & S.mapM print
      & S.fold F.drain
  ```

  ## Benchmarks

  See `./bench/README.md`. We find on our machine<sup>†</sup> that (1) reading an archive using this library is just as fast as using plain Haskell `IO` code; and that (2) both are somewhere between 1.7x (large files) and 2.5x (many 1-byte files) slower than C.

  The former fulfills the promise of [streamly](https://hackage.haskell.org/package/streamly) and stream fusion. The differences to C are presumably explained by the marshalling of data into the Haskell world and are currently small enough for our purposes.

  <sup>†</sup> April 2023; [Linode](https://linode.com); Debian 11, Dedicated 32GB: 16 CPU, 640GB Storage, 32GB RAM.
description-type: markdown
hash: bebf7db36615524dc9783920a83e3e083456497e0289902c42c4fa1557581aef
homepage: https://github.com/shlok/streamly-archive#readme
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: sd-haskell@quant.is
synopsis: Stream data from archives using the streamly library.
test-bench-deps:
  QuickCheck: '>=2.13.2 && <2.15'
  base: '>=4.7 && <5'
  bytestring: '>=0.11 && <0.12'
  cryptonite: '>=0.26'
  directory: '>=1.3.6.0 && <1.4'
  filepath: '>=1.4.2.1 && <1.5'
  streamly: '>=0.9 && <0.10'
  streamly-archive: '>=0'
  streamly-core: '>=0.1 && <0.2'
  tar: '>=0.5.1.1 && <0.6'
  tasty: '>=1.2.3 && <1.5'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty-quickcheck: '>=0.10.1.1 && <0.11'
  temporary: '>=1.3 && <1.4'
  zlib: '>=0.6.2.1 && <0.7'
