all-versions:
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.7.0
- 0.7.1
- 0.7.2
author: |-
  Dmitry Bushev
  , Benno Fünfstück
basic-deps:
  Cabal: '>2.2'
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>4.7 && <5'
  bytestring: '>=0'
  cabal2nix: '>=2.7.2'
  containers: '>=0'
  deepseq: '>=0'
  distribution-nixpkgs: '>=1.1'
  exceptions: '>0.8'
  filepath: '>=0'
  gitlib: '>3'
  gitlib-libgit2: '>3'
  hopenssl: '>2.2'
  inflections: '>=0.3'
  language-nix: '>=0'
  lens: '>=0'
  network-uri: '>=0'
  optparse-applicative: '>=0'
  pretty: '>=0'
  stackage-curator: '>=0.15'
  stackage2nix: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  yaml: '>=0'
changelog: |
  # 0.7.2
  - Build with ghc-8.4
  - Drop compatibility with Cabal<2.2
  - Don't check extra-deps when generating derivation from stack.yaml

  # 0.7.1
  - Generate stack packages `stack-yaml-packages.nix`

  # 0.7.0
  - Add compatibility with nixos-18.03
  - Drop compatibility with nixos-17-09
  - Add partial support for new stack extra-deps syntax.
    https://docs.haskellstack.org/en/stable/yaml_configuration/#packages-and-extra-deps
    Supported same syntax for packages and extra-deps sections

  # 0.6.1
  - Pass extra `buildHaskellPackages` argument to `makePackageSet` function

  # 0.6.0
  - Replace call to `<nixpkgs/pkgs/development/haskell-modules>` in generated
    Haskell packages with `makePackageSet` library function

  # 0.5.0
  - Add `--with-stackage` and `--with-stackage-closure` flag generates stackage
  - Add `--extra-deps-revision-latest` flag. Changes generation strategy for the
    direct dependencies of the stack.yaml extra-deps. Default strategy is to
    generate exact revision defined in the Stackage config. With this flag
    enabled, direct dependencies of the stack.yaml extra-deps will be generated
    with latest revision available on Hackage. This may help when Cabal fails to
    resolve dependencies of extra-deps, and dependences are fixed in the latest
    revision
  - Upd by default stackage2nix generates override of pre-generated Stackage
    packages set.
  - Upd generated Stackage packages with `doCheck` and `runHaddock` enabled by
    default
  - Remove `--do-check-stackage` flag (enabled by default)
  - Remove `--do-haddock-stackage` flag (enabled by default)
  - Remove `--no-packages-closure` flag (use `--with-stackage-closure`)
  - Remove `cabal2nix < 2.7.2` support #45

  # 0.4.0
  - Add `--resolver` option to generate full stackage packages set
  - Add Nix wrapper, see `nix/README.md`
  - Upd support cabal2nix >2.5
  - Fix honor `--hackage-db` flag

  # 0.3.0
  - Initial Hackage release
  - Add CHANGELOG.md
changelog-type: markdown
description: |
  # stackage2nix

  [![Build Status](https://travis-ci.org/typeable/stackage2nix.svg?branch=master)](https://travis-ci.org/typeable/stackage2nix)

  `stackage2nix` converts a Stack file into a Nix Haskell packages set.

  # Create build derivation from stack.yaml

  ## Generate targets from stack.yaml only

  ```
  stack exec -- stackage2nix .
  ```

  Command creates file `default.nix` which overrides `haskell.packages.stackage`
  packages set. You should use
  [typeable/nixpkgs-stackage](https://github.com/typeable/nixpkgs-stackage) overlay that
  adds LTS Stackage packages to Nixpkgs.

  Build package with overlay installed:

  ```
  nix-build -A stackage2nix
  ```

  ## Generate Stackage packages for the build

  If you don't want to use Stackage overlay, stackage2nix can generate required
  packages with `--with-stackage-closure` flag.

  ``` bash
  stack exec -- stackage2nix \
    --all-cabal-hashes /path/to/commercialhaskell/all-cabal-hashes \
    --lts-haskell /path/to/fpco/lts-haskell \
    --with-stackage-closure \
    ./stack.yaml
  ```

  To generate Stackage packages, you should supply additional
  `--all-cabal-hashes` and `--lts-haskell` flags that points to
  [commercialhaskell/all-cabal-hashes](https://github.com/commercialhaskell)
  checked out to `hackage` branch and
  [fpco/lts-haskell](https://github.com/fpco/lts-haskell) respectively.

  ### stackage2nix wrapper

  You can use stackage2nix wrapper from `nix` directory that adds required flags:

  ```
  nix-env -i -f ./nix/stackage2nix
  stackage2nix --with-stackage-closure ./stack.yaml
  ```

  This command will produce `packages.nix` and `configuration-packages.nix`
  Stackage packages and its override in `default.nix`

  ## Generate full Stackage

  `--with-stackage` parameter generates full Stackage LTS in addition to the
  targets from `stack.yaml`

  ```
  nix-env -i -f ./nix/stackage2nix
  stackage2nix --with-stackage ./stack.yaml
  ```

  ## Generate Stackage from LTS resolver

  You can also generate only Stackage packages set from the resolver:

  ```
  nix-env -i -f ./nix/stackage2nix
  stackage2nix --resolver lts-10.0
  ```

  This command will produce Stackage packages `packages.nix`, packages config
  `configuration-packages.nix` and a Haskell packages set `default.nix`.

  ## Runtime dependencies

  - `nix-env` is required to be on PATH by the
    [distribution-nixpkgs](https://hackage.haskell.org/package/distribution-nixpkgs)
    dependency
  - `nix-prefetch-scripts` is required on PATH if you have git dependencies in
    `stack.yaml`

  ## Override result derivation

  Complex projects may require some extra customization.
  Snippet `override.nix` below shows a minimal example of how to apply additional
  overrides on top of Haskell packages set produced by `stackage2nix`.

  ``` nix
  with import <nixpkgs> {};
  with haskell.lib;
  let haskellPackages = import ./. {};
  in haskellPackages.override {
    overrides = self: super: {
      stackage2nix = disableSharedExecutables super.stackage2nix;
    };
  }
  ```

  ```
  nix-build -A stackage2nix override.nix
  ```

  For more complex overrides and detailed information on how to work with Haskell packages in Nix, see Nixpkgs manual [User’s Guide to the Haskell Infrastructure](http://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure)

  ## Tests

  Integration tests that build stackage2nix form different yaml configs:

  ``` bash
  STACKAGE_REPO=<path/to/stackage/repo> \
  ALL_CABAL_HASHES=<path/to/all-cabal-hashes/repo> \
  STACK_FILE=stack-ghc-7103.yaml \
  ./ci-stackage2nix
  ```
description-type: markdown
hash: 81793e19ef2c971c5c7c44f7b55b33eeab67a624f0219fa9ae862b30e80f8b07
homepage: https://github.com/typeable/stackage2nix#readme
latest: 0.7.2
license-name: BSD-3-Clause
maintainer: bushevdv@gmail.com
synopsis: Convert Stack files into Nix build instructions.
test-bench-deps:
  Cabal: '>=0'
  base: '>=0'
  bytestring: '>=0'
  hspec: '>=0'
  network-uri: '>=0'
  pretty: '>=0'
  shakespeare: '>=0'
  stackage2nix: '>=0'
  text: '>=0'
  yaml: '>=0'
