all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
author: daniel
basic-deps:
  base: '>=4.10 && <5'
  streaming: '>=0.2.0.0 && <0.3'
changelog: "0.1.1.0 \n=======\n\n- Added over'\n"
changelog-type: markdown
description: "# streaming-bracketed\r\n\r\n[![Build Status](https://travis-ci.org/danidiaz/streaming-bracketed.svg?branch=master)](https://travis-ci.org/danidiaz/streaming-bracketed)\r\n\r\n##
  What's this?\r\n\r\nA resource management \"decorator\" for the `Stream` type from\r\n[streaming](http://hackage.haskell.org/package/streaming).
  \ \r\n\r\nThe idea is that the `Bracketed` type represents a `Stream` which might
  have\r\nsome finalizers that will be triggered when we reach a given point in the\r\nstream.\r\n\r\nBy
  being careful about how we lift operations to work on `Bracketed` streams,\r\nwe
  can ensure that finalizers are promptly called even with operations like\r\n`take`.\r\n\r\n`Bracketed`
  streams are ultimately consumed by using a continuation.\r\n\r\n## Differences with
  resourcet\r\n\r\n[resourcet](http://hackage.haskell.org/package/resourcet) is a
  widely used\r\nlibrary for resource handling. It provides a monad transformer over
  IO that\r\nkeeps track of registered resources and ensures proper cleanup.\r\n\r\nThe
  main differences with the present library are:\r\n\r\n- This library only works
  on `Stream`s from streaming.\r\n\r\n- `Bracketed` sits above the streaming monad,
  not below like `ResourceT`.\r\n\r\n- This library aims to provide smarter handling
  of stream functions like\r\n  `take`, without too much hassle.\r\n\r\n- In this
  library finalizer scopes are nested, unlike `ResourceT` which allows\r\n  arbitrary
  interleavings. \r\n\r\n## Doubts\r\n\r\n- Lifting functions like `splitAt` might
  cause problems if we try to use the\r\n  rest of the stream.\r\n\r\n## Motivation\r\n\r\nFrom
  the\r\n[CHANGELOG](http://hackage.haskell.org/package/streaming-0.2.1.0/changelog)
  of\r\nthe [streaming](http://hackage.haskell.org/package/streaming) package:\r\n\r\n
  \   Remove bracketStream, MonadCatch instance, and everything dealing with\r\n    ResourceT.
  All of these things of sort of broken for Stream since there is no\r\n    guarantee
  of linear consumption (functions like take can prevent finalizers\r\n    from running).\r\n\r\n[One
  Github issue](https://github.com/haskell-streaming/streaming/issues/52).\r\n\r\n[Another
  one](https://github.com/haskell-streaming/streaming-with/issues/2).\r\n\r\n[Streaming
  libs exercise/challenge](https://twitter.com/DiazCarrete/status/1016073374458671104):\r\n\r\n
  \   Given a list [(Filepath,Int,Int)] of files and line ranges, create a stream\r\n
  \   of lines belonging to the concatenated ranges.\r\n\r\n    Prompt release of
  file handles is required. resource-handling monads and\r\n    \"withXXX\"-style
  functions are allowed.\r\n\r\n"
description-type: markdown
hash: d083df9a996931478e2e5514877663a8cb08c56311cc84e2489e63d337e2e4ab
homepage: ''
latest: 0.1.1.0
license-name: MIT
maintainer: diaz_carrete@yahoo.com
synopsis: 'A resource management decorator for "streaming".        '
test-bench-deps:
  base: '>=4.10 && <5'
  containers: '>=0.5.0.1'
  directory: '>=1.3.1.0'
  doctest: '>=0.16.0'
  filepath: '>=1.3'
  streaming: '>=0.2.0.0 && <0.3'
  streaming-bracketed: '>=0'
  streaming-commons: '>=0.2.1.0'
  tasty: '>=0.10.1.1'
  tasty-hunit: '>=0.9.2'
