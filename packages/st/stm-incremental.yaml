homepage: https://github.com/SamuelSchlesinger/stm-incremental
changelog-type: markdown
hash: 004756e3ccf2ad94d840cec85ccdcee4a9a5f3cabaeefc7dae6d8fecf3bad0cb
test-bench-deps:
  stm: '>=2.1'
  base: '>=4.12 && <5'
  hspec: '>=2.7'
  stm-incremental: -any
maintainer: sgschlesinger@gmail.com
synopsis: A library for constructing incremental computations
changelog: |
  # Revision history for stm-incremental

  ## 0.1.0.0 -- 2020-10-14

  * First version of stm-incremental was put together, tests are satisfactory
  and ironed out a few corner cases which had bugs. Now, the recursive updates
  seem to be working, and we can use this to basically write materialized views
  in Haskell code.
basic-deps:
  stm: '>=2.1'
  base: '>=4.12 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
author: Samuel Schlesinger
latest: 0.1.1.0
description-type: markdown
description: |
  # stm-incremental

  [![Hackage](https://img.shields.io/hackage/v/stm-incremental.svg)](https://hackage.haskell.org/package/stm-incremental)

  This library is meant to expose an interface for incremental computation
  using software transactional memory in Haskell.

  ```haskell
  import Control.Concurrent.STM.Incremental

  main = do
    (salutation, name, greeting) <- atomically do
      salutation <- incremental "Hello"
      name <- incremental "Samuel"
      greeting <- combine (\s n -> s <> ", " n) salutation name
      pure (salutation, name, greeting)
    -- Will print "Hello, Samuel"
    atomically (observe greeting) >>= print
    atomically (set salutation "Hiya")
    -- Will print "Hiya, Samuel"
    atomically (observe greeting) >>= print
  ```

  There are three operations, `imap`, `combine`, and `choose`. They sort of
  correspond to the operations of `fmap`, `liftA2`, and `(>>=)`, but not exactly.
  `imap` allows you to construct an incremental computation depending on one
  other, which only ever gets updated when this single dependency does. `combine`
  allows you to construct an incremental computation depending on two others,
  which gets updated whenever _either_ does. `choose` allows you to switch your
  dependency structure depending on live values in the incremental computation.
  In other words, this allows you to have dynamic dependencies, whereas the
  former two functions only allowed you to have static dependencies.

  The `choose` combinator is the most computationally expensive, requiring in the
  worst case time proportional to the size of the image of the choice function
  passed in.
license-name: MIT
