homepage: https://github.com/freckle/stackctl#readme
changelog-type: markdown
hash: 50a955ddf541c27db2144a811205bad35d8e30f3176f9656a03baabcc1240b0c
test-bench-deps:
  bytestring: -any
  base: '>=4 && <5'
  stackctl: -any
  hspec: -any
  mtl: -any
  QuickCheck: -any
  aeson: -any
  yaml: -any
maintainer: freckle-engineering@renaissance.com
synopsis: ''
changelog: |
  ## [_Unreleased_](https://github.com/freckle/stackctl/compare/v1.3.0.0...main)

  ## [v1.3.0.0](https://github.com/freckle/stackctl/compare/v1.2.0.1...v1.3.0.0)

  - Fix it so commands like `version` don't need a valid AWS environment

    This changes the `Subcommand` interface and so is a major version update for
    the purposes of those using Stackctl as a library.

  ## [v1.2.0.0](https://github.com/freckle/stackctl/compare/v1.1.3.1...v1.2.0.0)

  - Use more specific types in `Has{Directory,Filter,Color}Option`
  - Add environment variable configuration for `STACKCTL_{DIRECTORY,FILTERS}`

  ## [v1.1.4.0](https://github.com/freckle/stackctl/compare/v1.1.3.1...v1.1.4.0)

  - Support matching Stacks by glob in `capture`
  - Add `--tag` to `changes` and `deploy`

  ## [v1.1.3.1](https://github.com/freckle/stackctl/compare/v1.1.3.0...v1.1.3.1)

  - Fix JSON formatting bugs in generating specification

  ## [v1.1.3.0](https://github.com/freckle/stackctl/compare/v1.1.2.2...v1.1.3.0)

  - Repository-local configuration

    See https://github.com/freckle/stackctl/commit/564678203fe70b5c4c46c655dd3daeaafb6de9e0

  - Don't duplicate re-used templates in `stackctl-cat`
  - Improve `--filter`

    - Match against stack name and template, in addition to spec path.
    - Automatically prepend `**/` (unless there is already a leading wildcard) and
      append `{/*,.yaml,.json}` (unless there is already a trailing wildcard or
      extension).

    In general, this aims to make `--filter` match more things more intuitively
    for operators, but still match exactly in programmatic use-cases.

  - Various documentation improvements
  - Support more natural `{Key}: {Value}` syntax in `Parameters` and `Tags`
  - Fix bug where we may generate an `{}` element in `Parameters`

  ## [v1.1.2.2](https://github.com/freckle/stackctl/compare/v1.1.2.1...v1.1.2.2)

  - Add support for Stack descriptions

  ## [v1.1.2.1](https://github.com/freckle/stackctl/compare/v1.1.2.0...v1.1.2.1)

  - Build with LTS-20.4 / GHC 9.2

  ## [v1.1.2.0](https://github.com/freckle/stackctl/compare/v1.1.1.1...v1.1.2.0)

  - Fix incorrect ordering of log-messages by setting `LOG_CONCURRENCY=1`
  - Fix potential coloring of changes being redirected to a file
  - Make `PATH` optional (again) in `stackctl changes`
  - Add `--no-flip` to `stackctl capture`

  ## [v1.1.1.1](https://github.com/freckle/stackctl/compare/v1.1.1.0...v1.1.1.1)

  - Trigger release

  ## [v1.1.1.0](https://github.com/freckle/stackctl/compare/v1.1.0.5...v1.1.1.0)

  - Add `--parameter` to `changes` and `deploy`
  - Sort changes by causing-before-caused

  ## [v1.1.0.5](https://github.com/freckle/stackctl/compare/v1.1.0.4...v1.1.0.5)

  - Trigger release workflow

  ## [v1.1.0.4](https://github.com/freckle/stackctl/compare/v1.1.0.3...v1.1.0.4)

  - Fix bug where only the last spec in a multi-spec case had its changes present
    in the output file generated by `changes`.

  ## [v1.1.0.3](https://github.com/freckle/stackctl/compare/v1.1.0.2...v1.1.0.3)

  - Require Blammo-1.1.1.0

  ## [v1.1.0.2](https://github.com/freckle/stackctl/compare/v1.1.0.1...v1.1.0.2)

  - Log responses from `awsLambdaInvoke` when running actions
  - Clarify discovery logging
  - Add install script

  ## [v1.1.0.1](https://github.com/freckle/stackctl/compare/v1.1.0.0...v1.1.0.1)

  - Update to `cfn-flip-0.1.0.3`

  ## [v1.1.0.0](https://github.com/freckle/stackctl/compare/v1.0.2.0...v1.1.0.0)

  - Fix interleaved or out-of-order output bugs by streaming deployment events
    through the Logger instead of directly to `stdout`
  - Logging goes to `stdout` by default (`LOG_DESTINATION` can still be used)
  - The `changes` subcommand now requires a `PATH` argument

  ## [v1.0.2.0](https://github.com/freckle/stackctl/compare/v1.0.1.2...v1.0.2.0)

  - Add `Stackctl.Action`

    Support for taking actions during Stack management, currently we support
    invoking a lambda post-deployment. In the future, we can add more, such as
    running local pre-deploy validation or preparation scripts.

  - Add `awsCloudFormationDescribeStackOutputs`

  ## [v1.0.1.2](https://github.com/freckle/stackctl/compare/v1.0.1.1...v1.0.1.2)

  - Always flush log messages before our own output

  ## [v1.0.1.1](https://github.com/freckle/stackctl/compare/v1.0.1.0...v1.0.1.1)

  - Respect `LOG_DESTINATION` (the default remains `stderr`)

  ## [v1.0.1.0](https://github.com/freckle/stackctl/compare/v1.0.0.2...v1.0.1.0)

  - Support reading CloudGenesis specifications

    - Accept account paths like `id.name` or `name.id`
    - Read `Parameters` as `Parameter{Key,Value}` or `{Name,Value}`

    This allows us to work with specifications directories originally implemented
    for, and potentially still used with, the CloudGenesis tooling.

  ## [v1.0.0.2](https://github.com/freckle/stackctl/compare/v1.0.0.1...v1.0.0.2)

  - Fix tailing all events to read most recent, causing Throttling errors

  ## [v1.0.0.1](https://github.com/freckle/stackctl/compare/v1.0.0.0...v1.0.0.1)

  - Fix non-portable paths issue in OSX executable build

  ## [v1.0.0.0](https://github.com/freckle/stackctl/tree/v1.0.0.0)

  First release
basic-deps:
  amazonka: -any
  exceptions: -any
  rio: -any
  bytestring: -any
  lens-aeson: -any
  aeson-casing: -any
  unliftio: -any
  extra: -any
  amazonka-sts: -any
  base: ==4.*
  time: -any
  stackctl: -any
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  uuid: -any
  Blammo: '>=1.1.1.1'
  envparse: -any
  filepath: -any
  amazonka-lambda: -any
  conduit: -any
  semigroups: -any
  containers: -any
  lens: -any
  unliftio-core: -any
  amazonka-core: -any
  mtl: -any
  cfn-flip: '>=0.1.0.3'
  amazonka-ec2: -any
  monad-logger: -any
  optparse-applicative: -any
  errors: -any
  amazonka-cloudformation: -any
  resourcet: -any
  Glob: -any
  aeson: -any
  yaml: -any
all-versions:
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.0.3
- 1.1.0.4
- 1.1.0.5
- 1.1.1.0
- 1.1.1.1
- 1.1.2.0
- 1.1.2.1
- 1.1.2.2
- 1.1.3.0
- 1.1.3.1
- 1.1.4.0
- 1.2.0.0
- 1.3.0.0
author: Freckle Engineering
latest: 1.3.0.0
description-type: markdown
description: |
  # Stackctl

  [![Hackage](https://img.shields.io/hackage/v/stackctl.svg?style=flat)](https://hackage.haskell.org/package/stackctl)
  [![CI](https://github.com/freckle/stackctl/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/stackctl/actions/workflows/ci.yml)

  Manage CloudFormation Stacks through specifications.

  ## About

  `stackctl` is a command-line tool for working with [Stack Specifications][spec]. A Stack
  Specification is a file-system format for describing deployed (or
  to-be-deployed) CloudFormation Stacks including the Template, Parameters, and
  Tags. `stackctl` can be used to pretty-print, diff, and deploy these
  specifications.

  [spec]: https://github.com/freckle/stackctl/blob/main/doc/stackctl.1.md#stack-specifications

  This project also contains a Haskell library for doing the same.

  ## Install

  ### Pre-requisites

  - Have `~/.local/bin` on your `$PATH`
  - Have `~/.local/share/man` on your `$MANPATH` (for documentation)
  - If on OSX, `brew install coreutils` (i.e. have `ginstall` available)

  ### Scripted

  ```console
  curl -L https://raw.githubusercontent.com/freckle/stackctl/main/install | bash
  ```

  **NOTE**: some in the community have expressed [concerns][curlsh-bad] about the
  security of so-called "curl-sh" installations. We think the argument has been
  [pretty well debunked][curlsh-ok], but feel free to use the manual steps
  instead.

  [curlsh-bad]: https://0x46.net/thoughts/2019/04/27/piping-curl-to-shell/
  [curlsh-ok]: https://www.arp242.net/curl-to-sh.html

  ### Manual

  Go to the [latest release][latest] and download the `.tar.gz` asset appropriate
  for your OS. Navigate to the directory containing the downloaded file and run:

  [latest]: https://github.com/freckle/stackctl/releases/latest

  ```console
  tar xvf stackctl-*.tar.gz
  cd stackctl
  ```

  User installation:

  ```console
  make install PREFIX="$HOME/.local"
  ```

  Global installation

  ```console
  sudo make install
  ```

  ## Usage

  Once installed, see:

  - `stackctl --help`,
  - `stackctl <command> --help`,
  - `man 1 stackctl`, or
  - `man 1 stackctl <command>`

  The man pages are also available [in-repository](./doc), but contain
  documentation as of `main`, and not your installed version.

  ## Relationship to CloudGenesis

  [CloudGenesis][] is a project that also takes a directory of Stack
  Specifications and deploys them when changed. Its on-disk format inspired ours
  and, in fact, directories built for CloudGenesis can be managed by `stackctl`
  (not necessarily the other way around).

  [cloudgenesis]: https://github.com/LifeWay/CloudGenesis

  The key differences are:

  - CloudGenesis supplies AWS CodeBuild tooling for handling changes to your
    GitOps repository; Stackctl expects you to implement a GitHub Action that
    installs and executes `stackctl` commands as appropriate

    This makes Stackctl better if you need or want to also run the same tooling in
    a local context, but it makes CloudGenesis better if you need or want this
    activity to remain within the boundaries of your AWS VPC.

  - CloudGenesis reacts to file-change events in S3, which only happens when you
    synchronize from `main`; Stackctl can run on any branch and easily be scoped
    to files changed in the PR or push.

    This enables Stackctl features like commenting with ChangeSet details on PRs,
    which are not possible in CloudGenesis as it's currently implemented.

  - Stackctl adds the `Depends` key, for ordering multi-Stack processing

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
