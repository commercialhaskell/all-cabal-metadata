all-versions:
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.0.3
- 1.1.0.4
- 1.1.0.5
- 1.1.1.0
- 1.1.1.1
- 1.1.2.0
- 1.1.2.1
- 1.1.2.2
- 1.1.3.0
- 1.1.3.1
- 1.1.4.0
- 1.2.0.0
- 1.3.0.0
- 1.3.0.1
- 1.3.0.2
- 1.4.0.0
- 1.4.0.1
- 1.4.2.0
- 1.4.2.1
- 1.4.2.2
- 1.4.3.0
- 1.4.4.0
- 1.5.0.0
- 1.5.0.1
- 1.6.0.0
- 1.6.1.0
- 1.6.1.1
- 1.6.1.2
- 1.7.0.0
- 1.7.1.0
- 1.7.2.0
- 1.7.3.0
- 1.7.3.2
- 1.7.3.3
- 1.7.3.4
- 1.7.3.5
- 1.7.3.6
author: Freckle Engineering
basic-deps:
  Blammo: '>=1.1.2.3'
  Glob: '>=0.10.2'
  QuickCheck: '>=2.14.3'
  aeson: '>=2.2.3.0'
  aeson-casing: '>=0.2.0.0'
  aeson-pretty: '>=0.8.10'
  amazonka: '>=2.0'
  amazonka-cloudformation: '>=2.0'
  amazonka-core: '>=2.0'
  amazonka-ec2: '>=2.0'
  amazonka-lambda: '>=2.0'
  amazonka-mtl: '>=0.1.1.0'
  amazonka-sso: '>=2.0'
  amazonka-sts: '>=2.0'
  base: '>=4 && <5'
  bytestring: '>=0.12.1.0'
  cfn-flip: '>=0.1.0.3'
  conduit: '>=1.3.6'
  containers: '>=0.6.8'
  envparse: '>=0.6.0'
  errors: '>=2.3.0'
  exceptions: '>=0.10.7'
  extra: '>=1.7.16'
  filepath: '>=1.4.301.0'
  lens: '>=5.3.3'
  lens-aeson: '>=1.2.3'
  monad-logger: '>=0.3.41'
  mtl: '>=2.3.1'
  optparse-applicative: '>=0.18.1.0'
  prettyprinter: '>=1.7.1'
  resourcet: '>=1.3.0'
  rio: '>=0.1.22.0'
  semigroups: '>=0.20'
  stackctl: '>=0'
  text: '>=2.1.1'
  text-metrics: '>=0.3.3'
  time: '>=1.12.2'
  transformers: '>=0.6.1.0'
  typed-process: '>=0.2.12.0'
  unix: '>=2.8.6.0'
  unliftio: '>=0.2.25.0'
  unordered-containers: '>=0.2.20'
  uuid: '>=1.3.16'
  yaml: '>=0.11.11.2'
changelog: |
  See https://github.com/freckle/stackctl/releases
changelog-type: markdown
description: |
  # Stackctl

  [![Hackage](https://img.shields.io/hackage/v/stackctl.svg?style=flat)](https://hackage.haskell.org/package/stackctl)
  [![CI](https://github.com/freckle/stackctl/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/stackctl/actions/workflows/ci.yml)

  Manage CloudFormation Stacks through specifications.

  ## About

  `stackctl` is a command-line tool for working with [Stack Specifications][spec]. A Stack
  Specification is a file-system format for describing deployed (or
  to-be-deployed) CloudFormation Stacks including the Template, Parameters, and
  Tags. `stackctl` can be used to pretty-print, diff, and deploy these
  specifications.

  [spec]: https://freckle.github.io/stackctl/#STACK-SPECIFICATIONS

  This project also contains a Haskell library for doing the same.

  ## Install

  ### Pre-requisites

  - Have `~/.local/bin` on your `$PATH`
  - Have `~/.local/share/man` on your `$MANPATH` (for documentation)
  - If on OSX, `brew install coreutils` (i.e. have `ginstall` available)
  - If on OSX, `brew install jq`

  ### Scripted

  ```console
  curl -L https://raw.githubusercontent.com/freckle/stackctl/main/install | bash
  ```

  > [!NOTE]
  > Some in the community have expressed [concerns][curlsh-bad] about the
  > security of so-called "curl-sh" installations. We think the argument has been
  > [pretty well debunked][curlsh-ok], but feel free to use the manual steps
  > instead.

  [curlsh-bad]: https://0x46.net/thoughts/2019/04/27/piping-curl-to-shell/
  [curlsh-ok]: https://www.arp242.net/curl-to-sh.html

  ### Manual

  Go to the [latest release][latest] and download the `.tar.gz` asset appropriate
  for your OS. Navigate to the directory containing the downloaded file and run:

  [latest]: https://github.com/freckle/stackctl/releases/latest

  ```console
  tar xvf stackctl-*.tar.gz
  cd stackctl
  ```

  User installation:

  ```console
  make install PREFIX="$HOME/.local"
  ```

  Global installation

  ```console
  sudo make install
  ```

  ## Usage

  Once installed, see:

  - `stackctl --help`,
  - `stackctl <command> --help`,
  - `man 1 stackctl`, or
  - `man 1 stackctl <command>`

  The man pages are also available [online](https://freckle.github.io/stackctl/),
  but contain documentation as of `main`, and not your installed version.

  ## Release

  To trigger a release in this project, merge a commit to `main` with a
  conventionally-formatted commit message. In short, one that starts with:

  1. `fix:` to trigger a patch release,
  1. `feat:` for minor, or
  1. `feat!:` for major

  Conventional commits are not required generally for this project, though you're
  free to always use them. They are only required when you want to trigger a
  release.

  ## Comparison to AWS CloudFormation Git Sync

  [AWS CloudFormation Git Sync][aws-git-sync] was recently released by AWS. It
  allows you to link a repository on GitHub to a CloudFormation Stack. The
  repository contains a "deployment file" that defines a `template-file-path`,
  `parameters`, and `tags` -- effectively, a Stack Specification.

  When AWS notices updates to the deployment or template file land on a defined
  branch, it updates the configured Stack accordingly, emitting events to SNS as
  it does.

  This is great for simple use-cases, and we fully expect they'll improve and
  extend it such that it obviates Stackctl one day. In the meantime, there are
  currently the following limitations when compared to Stackctl:

  1. A repository can only target a single account and region
  1. There is no changeset flow amenable to previewing changes via PRs. You update
     the file(s) on `main` and it syncs, that's it. If you're using a PR, you have
     only linting and human review as possible pre-deployment steps.
  1. There is no way to specify description, capabilities, or dependencies
  1. As of 12/23, there seemed to be some bugs, and the setup installs a managed
     event bridge that "phones home", sending events about your updates to some
     other AWS account ([source][first-look-blog])

  [aws-git-sync]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/git-sync.html
  [first-look-blog]: https://medium.com/@mattgillard/first-look-git-sync-for-cloudformation-stacks-9e2f39c311ac

  ## Relationship to CloudGenesis

  [CloudGenesis][] is a project that also takes a directory of Stack
  Specifications and deploys them when changed. Its on-disk format inspired ours
  and, in fact, directories built for CloudGenesis can be managed by `stackctl`
  (not necessarily the other way around).

  [cloudgenesis]: https://github.com/LifeWay/CloudGenesis

  The key differences are:

  - CloudGenesis supplies AWS CodeBuild tooling for handling changes to your
    GitOps repository; Stackctl expects you to implement a GitHub Action that
    installs and executes `stackctl` commands as appropriate

    This makes Stackctl better if you need or want to also run the same tooling in
    a local context, but it makes CloudGenesis better if you need or want this
    activity to remain within the boundaries of your AWS VPC.

  - CloudGenesis reacts to file-change events in S3, which only happens when you
    synchronize from `main`; Stackctl can run on any branch and easily be scoped
    to files changed in the PR or push.

    This enables Stackctl features like commenting with ChangeSet details on PRs,
    which are not possible in CloudGenesis as it's currently implemented.

  - Stackctl adds the `Depends` key, for ordering multi-Stack processing

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
description-type: markdown
hash: 5a88a4777d12da8a9971970d7c5881e2d562325e4c285a3de7fc78c05a4ebf25
homepage: https://github.com/freckle/stackctl#readme
latest: 1.7.3.6
license-name: MIT
maintainer: freckle-engineering@renaissance.com
synopsis: ''
test-bench-deps:
  Blammo: '>=2.1.1.0'
  Glob: '>=0.10.2'
  QuickCheck: '>=2.14.3'
  aeson: '>=2.2.3.0'
  amazonka: '>=2.0'
  amazonka-cloudformation: '>=2.0'
  amazonka-ec2: '>=2.0'
  amazonka-lambda: '>=2.0'
  amazonka-mtl: '>=0.1.1.0'
  base: '>=4 && <5'
  bytestring: '>=0.12.1.0'
  filepath: '>=1.4.301.0'
  hspec: '>=2.11.10'
  hspec-expectations-lifted: '>=0.10.0'
  hspec-golden: '>=0.2.1.0'
  http-types: '>=0.12.4'
  lens: '>=5.3.3'
  mtl: '>=2.3.1'
  stackctl: '>=0'
  text: '>=2.1.1'
  time: '>=1.12.2'
  unliftio: '>=0.2.25.0'
  yaml: '>=0.11.11.2'
