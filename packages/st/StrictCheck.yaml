all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 0.4.0
author: Kenneth Foner, Hengchu Zhang, and Leo Lampropoulos
basic-deps:
  QuickCheck: '>=2.10 && <2.17'
  base: '>=4.7 && <5'
  bifunctors: '>=5.5 && <5.7'
  containers: '>=0.5 && <0.9'
  generics-sop: '>=0.3.2 && <0.6'
  template-haskell: '>=2.18 && <2.24'
changelog: "# Releases\r\n\r\nAll notable changes to this project will be documented
  in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand
  this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).\r\n\r\n##
  [0.4.0] - 2025-08-30\r\n\r\n- Compatibility with GHC 9.2 - 9.12\r\n- Add `Shaped`
  and `Produce` instances for `NonEmpty`\r\n- Fix output for non-Unicode locales\r\n\r\n##
  [0.3.0] - 2019-11-01\r\n\r\n- Add `Show` instance for `Demand`\r\n\r\n## [0.2.0]
  - 2018-10-08\r\n\r\n### Added\r\n\r\n- Expose instrumentation of data structures
  as a safe interface in the `IO` monad.\r\n- Add monadic folds and unfolds `translateA`,
  `foldM`, `unfoldM`, and `unzipWithM` to `Test.StrictCheck.Shaped`.\r\n\r\n### Removed\r\n\r\n-
  Remove the referentially opaque observation primitives in `Test.StrictCheck.Unsafe`.\r\n\r\n###
  Changed\r\n\r\n- Improve type inference by making `Shape` an injective type family.\r\n\r\n##
  [0.1.1] - 2018-10-01\r\n\r\n### Fixed\r\n\r\n- Fix critical semantic [bug #2](https://github.com/kwf/StrictCheck/issues/2)
  which caused violation of referential transparency when compiling with optimizations
  on GHC 8.6.\r\n\r\n## [0.1.0] - 2018-06-22\r\n\r\nFirst release of StrictCheck.
  This version matches the reviewed artifact submitted to ICFP, archived on the ACM
  DL, with the exception of some small documentation tweaks.\r\n"
changelog-type: markdown
description: "# StrictCheck: Keep Your Laziness In Check\r\n  \r\n[![Hackage](https://img.shields.io/hackage/v/StrictCheck.svg)](https://hackage.haskell.org/package/StrictCheck)\r\n\r\nStrictCheck
  is a property-based random testing framework for\r\nobserving, specifying, and testing
  the strictness behaviors of Haskell\r\nfunctions. Strictness behavior is traditionally
  considered a non-functional\r\nproperty; StrictCheck allows it to be tested as if
  it were one, by reifying\r\ndemands on data structures so they can be manipulated
  and examined within\r\nHaskell.\r\n\r\nFor details, see the library on Hackage:
  <https://hackage.haskell.org/package/StrictCheck>.\r\n"
description-type: markdown
hash: 7c27f53d75ce883fd8f593f397cfe222c59541b96a36f6aa972d2f0c448145b8
homepage: https://github.com/kwf/StrictCheck#readme
latest: 0.4.0
license-name: MIT
maintainer: lysxia@gmail.com
synopsis: 'StrictCheck: Keep Your Laziness In Check'
test-bench-deps:
  QuickCheck: '>=0'
  StrictCheck: '>=0'
  base: '>=0'
