all-versions:
- 0.1.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.1
- 0.1.2
- 0.1.3
author: Pepe Iborra
basic-deps:
  array: '>=0'
  base: <5
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  hashable: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "[![Travis Build Status](https://travis-ci.org/pepeiborra/strict-types.svg)](https://travis-ci.org/pepeiborra/strict-types)\n[![Hackage](https://img.shields.io/hackage/v/strict-types.svg)](https://hackage.haskell.org/package/strict-types)\n[![Stackage
  Nightly](http://stackage.org/package/strict-types/badge/nightly)](http://stackage.org/nightly/package/strict-types)\n\nstrict-types\n===================\n\nThis
  package provides two pattern synonyms `Strict` and `Rnf` to constrain value strictness.\n\n#####
  Use `Strict` when you can and `Rnf` when you must. #####\n\nThe Rnf pattern\n----------------\nThe
  `Rnf` pattern matches every value of a type with an `NFData` instance, forcing it
  to rigid normal form before binding it.\n```\n> let !(Rnf x) = [trace \"One\" 1,
  trace \"Two\" 2]\nOne\nTwo\n```\nThe bang pattern is needed to force the `Rnf x`
  closure to weak head normal form (whnf).\n\n`Rnf` is very handy to avoid space leaks
  when working with non-strict data, but forcing structured data with `rnf` has a
  cost even if the data is already forced, and it should be avoided in inner loops.
  Too few `Rnf` patterns and one risks a space leak, too many and one ends up with
  squared complexity factors.\n\nThe Strict pattern\n-----------------------\nIf our
  datatypes are strict, then their weak head normal form is already fully evaluated
  and `Rnf` is morally just `seq`. In practice, it depends on what the `NFData` instance
  does. One would hope it would be implemented as a noop, but in practice this is
  not always the case for first order types, and can never be for higher kinded types
  which cannot make any assumptions about the strictness of their type parameters.\n\nBut
  not all is lost! We can ask the typechecker to inspect the GHC Generics representation
  for a type to check if it is strict, and avoid calling `rnf` if that is the case.
  This is what the `Strict` pattern synonym does:\n```\n> let !(Strict x) = [1, 2]\n<interactive>:1:7:
  error:\n    • [Int] has an unnamed lazy field in constructor :\n    • In the pattern:
  Strict y\n      In the pattern: !(Strict y)\n      In a pattern binding:\n        !(Strict
  y) = [trace \"1\" 1, trace \"2\" (2 :: Int)]\n```\nLists are not strict, so the
  expression above does not type check.\n\nIf we define our own strict list datatype
  with a `Generic` instance, the type checker can certify the property that `!(Strict
  x)` is equivalent to `!(Rnf x)`:\n```\n> data StrictList a = Nil | Cons !a (StrictList
  a) deriving Generic ; infixr :!\n> let !(Strict y) = trace \"one\" 1 :! trace \"two\"
  2 :! Nil\ntwo\none\n```\n\nThe StrictType class\n--------------------------\nNot
  all strict types derive `Generic`. For such cases where the type checker is unable
  to see the strictness information we can \"promise\" that a type is deep strict
  by adding an instance of the `StrictType` class. \n\nCaveats\n-----------\nNon regular
  recursive types, also known as nested datatypes, will cause the type checker to
  loop and run out of fuel when trying to prove deep strictness.\n\nFAQ\n----------\n*
  What about the `Strict` and `StrictData` pragmas ?\n\nThe `Strict` pragma adds an
  implicit bang pattern on every binding, but it doesn't force values to normal form.\n\nThe
  `StrictData` pragma adds an implicit bang pattern on every field of a data type
  guaranteeing that first order types are strict, but does not help with higher kinded
  types.\n"
description-type: markdown
hash: 5e6a4e0044050d80bb1070121a62b3d4329b0f6e52ea66ddc8ce658b423677ac
homepage: https://github.com/pepeiborra/strict-types
latest: 0.1.3
license-name: BSD-3-Clause
maintainer: Pepe Iborra (pepeiborra@gmail.com)
synopsis: A type level predicate ranging over strict types
test-bench-deps: {}
