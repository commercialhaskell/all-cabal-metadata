all-versions:
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.5.0
- 0.5.1
- 0.5.1.1
- 0.5.1.2
- 0.6.0
- 0.6.0.1
- 0.6.1.1
- 0.6.1.2
- 0.6.3
- 0.7.0
- 0.7.1
- 0.7.2
- 0.8.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.8.1
- 0.8.2
- '3.0'
- 3.0.0.1
- 3.0.1
- 3.0.1.1
- '3.1'
- 3.1.1
- '3.2'
- 3.2.1
- '3.3'
- 3.3.1
- 3.3.2
- 3.3.3
author: Edward A. Kmett
basic-deps:
  adjunctions: '>=4.0.1 && <5'
  base: '>=4.9 && <5'
  boring: '>=0.2 && <0.3'
  comonad: '>=4 && <6'
  distributive: '>=0.2.1 && <1'
  semigroupoids: '>=4 && <7'
changelog: |
  3.3.3 [2024.12.06]
  ------------------
  * Drop support for pre-8.0 versions of GHC.

  3.3.2 [2023.03.12]
  ------------------
  * Support building with `semigroupoids-6`.

  3.3.1 [2022.11.30]
  ------------------
  * Add `Boring` and `Absurd` instances for infinite streams.
  * Add a `head :: Stream a -> a` function to `Data.Stream.Infinite`.

  3.3
  ---
  * Removed a number of redundant parts of the API. If a method you were using has been removed, consider the classes available. No functionality was lost.
  * Better support for GHC 7.10, the `Foldable (length, null)` members are now defined directly leading to asymptotic improvements and helping to further shrink the API.
  * Added `prepend` and `concat` functions to `Data.Stream.Infinite`
  * Allow `comonad-5`

  3.2.2
  -----
  * Bug fix in `Data.Stream.Infinite.Skew` and removed `fromList`.

  3.2.1
  -----
  * Add support for `semigroupoids` 5 and GHC 7.10

  3.2
  ---
  * Switched to `tabulate` and `index` from `adjunctions`. Note: this reversed the argument order to `index`.
  * Proper upper bounds on dependencies.

  3.1.1
  -----
  * Marked modules appropriately Trustworthy

  3.0.1
  -----
  * Removed intra-package dependency bounds for my packages
  * Build system improvements
  * IRC Buildbot notification

  3.0
  ---
  * Version sync with the rest of my packages

  0.7
  --
  * "Data.Stream.NonEmpty" renamed to "Data.List.NonEmpty" and pushed upstream into the semigroups package.

  0.6.3
  -----
  * Removed a redundant UNPACK pragma

  0.5.1
  -----
  * Data.Stream.Supply added

  Since 0.1:
  ----------
  * A number of strictness issues with 'NonEmpty' were fixed
  * More documentation
changelog-type: markdown
description: "-- currently implemented\n\n* Data.Stream.Supply          data Supply
  a = Supply a (Supply a) (Supply a)\n* Data.Stream.Branching       data Stream f
  a = a :< f (Stream a)\n* Data.Stream.NonEmpty        data NonEmpty a = a :| [a]
  \n* Data.Stream.Future               data Future a = Last a | a :<   Future a\n*
  Data.Stream.Future.Skew          data Future a = Last a | !(Complete a) :< Future
  a\n* Data.Stream.Infinite                    data Future a = a :<   Future a\n*
  Data.Stream.Infinite.Skew               data Future a = !(Complete a) :< Future
  a\n* Data.Stream.Infinite.Functional.Zipper  data Zipper a = Zipper !(Integer ->
  a) !Integer\n\n-- TODO: refactor the existing Functional.Zipper to have a lower
  bound and add a Symmetric variant\n-- Data.Stream.Infinite.Functional.Zipper data
  Zipper a = Zipper !(Integer -> a) !Integer !Integer -- can seek arbitrarily\n\nData.Stream.Causal
  \              data Causal a = First a |   Causal a  :> a   \nData.Stream.Causal.Infinite
  \     data Causal a =             Causal a  :> a\nData.Stream.Causal.Finite        data
  Causal a = First a | !(Causal a) :> a\nData.Stream.Causal.Skew          data Causal
  a = First a |   Causal a  :> !(Complete a)\nData.Stream.Causal.Infinite.Skew data
  Causal a =             Causal a  :> !(Complete a)\n\nData.Stream.Future.Finite        data
  Future a = Last a | a :< !(Future a)\n\nData.Stream.Zipper                         data
  Zipper a = Now !(Finite.Causal a) | !(Finite.Causal a) :| (Future a) \nData.Stream.Zipper.Symmetric
  \              data Zipper a = Now !(Causal a)        | !(Causal a)        :| (Future
  a) \nData.Stream.Zipper.Infinite                data Zipper a =                          !(Finite.Causal
  a) :| Infinite.Future a\nData.Stream.Zipper.Infinite.Symmetric      data Zipper
  a =         {- #UNPACK #-} !(Infinite.Causal a) :| Infinite.Future a\nData.Stream.Zipper.Finite
  \                 data Zipper a = Now !(Finite.Causal a) | !(Finite.Causal a) :|
  !(Finite.Future a)\nData.Stream.Zipper.Skew                    data Zipper a = Zipper
  !(Seq a) !(Seq a) !(Skew.Future a)\nData.Stream.Zipper.Skew.Symmetric          data
  Zipper a = Zipper !(S.Causal a) !(Seq a) !(Seq a) !(Skew.Future a)\nData.Stream.Zipper.Infinite.Skew
  \          data Zipper a = Zipper !(S.Causal a) !(Seq a) !(Seq a) !(IS.Future a)\nData.Stream.Zipper.Infinite.Skew.Symmetric
  data Zipper a = Zipper !(IS.Causal a) !(Seq a) !(Seq a) !(IS.Future a)\n\nData.Stream.Infinite.Functional.Future
  \          data Future a = Future !(Integer -> a) !Integer -- increment only\nData.Stream.Infinite.Functional.Causal
  \          data Causal a = Causal !(Integer -> a) !Integer -- decrement only\n\nData.Sequence.Future
  \       data Future a = Future !(Int# -> a)      Int# Int#\nData.Sequence.Causal
  \       data Causal a = Causal !(Int# -> a) Int# Int#\nData.Sequence.Zipper        data
  Zipper a = Zipper !(Int# -> a) Int# Int# Int#\n\nData.Tensors          data Tensors
  f a = Last a | a :-   Tensors f (f a)\nData.Tensors.Infinite data Tensors f a =
  \         a :-   Tensors f (f a)\nData.Tensors.Finite   data Tensors f a = Last
  a | a :- !(Tensors f (f a))\n"
description-type: text
hash: 35366bd14e39964cdacb6a6c0e43f0f626e0d2ed74aa574953c9ccfcb1544471
homepage: http://github.com/ekmett/streams
latest: 3.3.3
license-name: BSD-3-Clause
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Various Haskell 2010 stream comonads
test-bench-deps: {}
