homepage: https://wrengr.org/software/hackage.html
changelog-type: text
hash: b2d4b54b2859da7a002819165fae0b051582036af7c313c23e9e0d28562e1938
test-bench-deps: {}
maintainer: wren@cpan.org
synopsis: Additional types of channels for STM.
changelog: |
  3.0.0.9 (2023-03-19):
      - Added `Tested-With: GHC == 9.6.1` (didn't actually need to
        nudge the upper bound on 'base', because it's already lenient)
  3.0.0.8 (2022-08-28):
      - Added `Tested-With: GHC == 9.4.1` (didn't actually need to
        nudge the upper bound on 'base', because it's already lenient)
  3.0.0.7 (2021-11-22):
      - Added `Tested-With: GHC == 9.2.1` (didn't actually need to
        nudge the upper bound on 'base', because it's already lenient)
  3.0.0.6 (2021-10-17):
      - Removed old __HADDOCK__ hack
      - Updating stale emails, urls, etc
  3.0.0.5 (2021-10-16):
      - Fixed the cabal file for Cabal >1.24
  3.0.0.4 (2015-05-30):
      - Moved VERSION to CHANGELOG
  3.0.0.3 (2015-03-29):
      - Cleaning up headers to compile cleanly with GHC 7.10
  3.0.0 (2013-05-29):
      - Removed the deprecated compatibility modules.

  2.1.0 (2013-05-29):
      - Added UNPACK pragmas everywhere to reduce indirections.
      - Added versions of newBroadcastT*Chan for TMChan
      - Deprecated all the compatibility stuff, since newBroadcastTChan requires stm >= 2.4 anyways.
  2.0.0 (2013-05-12):
      - Add TQueue support

  1.3.1 (2012-02-29):
      - Corrected the CPP macros now that stm-2.3 is released.
  1.3.0 (2012-02-25):
      - Added Control.Concurrent.STM.TMVar.Compat
  1.2.0.3 (2012-02-12):
      - Change stability from experimental to provisional.
  1.2.0.2 (2012-02-12):
      - Documentation fix for Control.Concurrent.STM.TMChan.writeTMChan
  1.2.0.1 (2011-05-07):
      - Moved old TBChan,TBMChan implementations to ./test/bench/
  1.2.0 (2011-05-07):
      - Various optimizations.
      - Switched to using 2 TVars in TBChan and TBMChan, reducing
        contention between readers and writers and improving throughput
        considerably (when multiple OS threads are used).
      - Control.Concurrent.STM.TBChan: added estimateFreeSlotsTBChan,
        freeSlotsTBChan
      - Control.Concurrent.STM.TBMChan: added estimateFreeSlotsTBMChan,
        freeSlotsTBMChan
  1.1.0 (2011-04-05):
      - Control.Concurrent.STM.TBChan: added tryWriteTBChan
      - Control.Concurrent.STM.TBMChan: added tryWriteTBMChan
  1.0.0 (2011-04-03):
      - Initial version forked from Posta-IPC.
      - Added tryRead* and tryPeek* functions for the various channels.
basic-deps:
  stm: '>=2.4'
  base: '>=4.1 && <5'
all-versions:
- 1.0.0
- 1.1.0
- 1.2.0
- 1.2.0.1
- 1.2.0.2
- 1.2.0.3
- 1.3.0
- 1.3.1
- 2.0.0
- 2.1.0
- 3.0.0
- 3.0.0.2
- 3.0.0.3
- 3.0.0.4
- 3.0.0.5
- 3.0.0.6
- 3.0.0.9
author: wren gayle romano, Thomas DuBuisson
latest: 3.0.0.9
description-type: markdown
description: "stm-chans\n=========\n[![Hackage version](https://img.shields.io/hackage/v/stm-chans.svg?style=flat)](https://hackage.haskell.org/package/stm-chans)
  \n[![Build Status](https://github.com/wrengr/stm-chans/workflows/ci/badge.svg)](https://github.com/wrengr/stm-chans/actions?query=workflow%3Aci)\n[![Dependencies](https://img.shields.io/hackage-deps/v/stm-chans.svg?style=flat)](http://packdeps.haskellers.com/specific?package=stm-chans)\n\nThis
  package offers a collection of channel types, similar to\n`Control.Concurrent.STM.{TChan,TQueue}`
  but with additional features.\nIn particular we offer the following data types:\n\n*
  `Control.Concurrent.STM.TBChan`:  Bounded FIFO channels.\n    When the channel is
  full, writers will block/retry. This ensures\n    that the writers do not get too
  far ahead of the readers, which\n    helps to  make sure that memory and cpu resources
  are used\n    responsibly.\n* `Control.Concurrent.STM.TMChan`:   Closeable FIFO
  channels.\n* `Control.Concurrent.STM.TMQueue`:  Closeable FIFO queues.\n    Like
  `TChan (Maybe a)` but with a monotonicity guarantee that\n    once `Nothing` is
  returned all future reads will be `Nothing`\n    as well.\n* `Control.Concurrent.STM.TBMChan`:
  \ Bounded Closeable FIFO channels.\n* `Control.Concurrent.STM.TBMQueue`: Bounded
  Closeable FIFO queues.\n    Combines the capabilities of `TBChan` and `TMChan`.\n\n\n##
  Install\n\nIn general, this is a simple package and should be easy to install.\nIt
  does require GHC however, because it relies on the\nControl.Concurrent.STM.TChan
  type which (for some unknown reason)\nis GHC-only. With the cabal-install program
  you can just do:\n\n    $> cabal install stm-chans\n\n\n## Links\n\n* [Website](http://wrengr.org/)\n*
  [Blog](http://winterkoninkje.dreamwidth.org/)\n* [Twitter](https://twitter.com/wrengr)\n*
  [Hackage](http://hackage.haskell.org/package/stm-chans)\n* [GitHub](https://github.com/wrengr/stm-chans)\n"
license-name: BSD-3-Clause
