homepage: https://github.com/chessai/st2.git
changelog-type: markdown
hash: e7dc9e214e4334e261e482b2cc0af4c6ae08c27ad086414da3849bf93eaf7766
test-bench-deps: {}
maintainer: chessai1996@gmail.com
synopsis: shared heap regions between local mutable state threads
changelog: |
  # Revision history for st2

  ## 0.1.0.2 -- 2018-11-02

  * Fix build on GHC-8.6, which requires Control.Monad.ST2 to have
    -XPolyKinds enabled in order to compile.

  ## 0.1.0.1 -- 2018-11-02

  * Fix internal bug that could cause semantic differences under optimisations,
    related to implementation of runRegion#.

  ## 0.1.0.0 -- 2018-07-23

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.9 && <5'
  gdp: '>=0.0.0.1 && <0.1'
  primitive: '>=0.6.4 && <0.8'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1
author: chessai
latest: 0.1.1
description-type: haddock
description: |-
  This library implements the ST2 monad, a type using GDP (ghosts of departed proofs)
  to define shared regions of memory between local mutable state threads. This allows
  us to define a region of the heap in more minute contours, with each state thread
  having explicit access to regions in memory. This is achieved using the function `runST2`,
  which in effects lets the user run a computation that makes use of two partially-overlapping
  memory regions. Within that computation, the user can run sub-computations bound to one or
  the other memory region. Furthermore, a sub-computation can move any variable that it owns
  into the common overlap via `share`.

  An example is shown in the documentation, where one sub-computation creates two cells: one
  private, and the other shared. A second sub-computation has unconstrained access to the
  shared cell. Yet even though the private reference is also in scope during the second
  sub-computation, any attempts to access it there will fail to compile.
license-name: BSD-3-Clause
