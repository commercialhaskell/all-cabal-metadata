homepage: https://github.com/schell/steeloverseer#readme
changelog-type: ''
hash: 96dec4a4584f4b00edb09fb736a19a1651cd7c5a9720fc07b0b63e01d899626d
test-bench-deps:
  streaming: '>=0.1.0 && <0.3'
  exceptions: -any
  steeloverseer: -any
  bytestring: '>=0.10'
  stm: '>=2.4'
  base: '>=4.0 && <5.0'
  hspec: -any
  managed: '>=1.0.1'
  text: '>=1.2'
  async: '>=2.0'
  semigroups: '>=0.16'
  regex-tdfa: '>=1.2'
  mtl: '>=2.2'
  fsnotify: '>=0.3'
  yaml: '>=0.8'
maintainer: schell@takt.com
synopsis: A file watcher and development tool.
changelog: ''
basic-deps:
  streaming: '>=0.1.0 && <0.3'
  exceptions: -any
  steeloverseer: -any
  bytestring: '>=0.10'
  unix: -any
  stm: '>=2.4'
  base: '>=4.0 && <5.0'
  managed: '>=1.0.1'
  text: '>=1.2'
  filepath: '>=1.3'
  process: '>=1.6 && <1.7'
  async: '>=2.0'
  semigroups: '>=0.16'
  containers: '>=0.5'
  ansi-terminal: '>=0.6.2'
  regex-tdfa: '>=1.2'
  mtl: '>=2.2'
  optparse-applicative: '>=0.11'
  fsnotify: '>=0.3'
  aeson: '>=0.8 && <1.6'
  yaml: '>=0.8'
  directory: '>=1.2'
all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.5.0.0
- 0.5.0.1
- 1.0.1.0
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.0.3
- 1.1.0.4
- 1.1.0.5
- 1.1.0.6
- 1.1.1.0
- '2.0'
- 2.0.0.1
- 2.0.1.0
- 2.0.2.0
- 2.1.0.0
author: |-
  Schell Scivally,
  Mitchell Rosen
latest: 2.1.0.0
description-type: markdown
description: "Steel Overseer\n==============\n\nA file watcher and development tool,
  similar to Ruby's [Guard](https://github.com/guard/guard).\n\nThe main idea is that
  you have steeloverseer watch your files and then execute a series of shell \ncommands
  in response. The first command to fail short circuits the series. The watched files
  can \nbe selected using regular expressions and the commands may include capture
  groups.\n\n[![Build Status](https://travis-ci.org/steeloverseer/steeloverseer.png?branch=master)](https://travis-ci.org/steeloverseer/steeloverseer)\n\nInstallation\n============\n\nDownload
  and install the [stack](https://github.com/commercialhaskell/stack) build tool.\n\n
  \   stack install steeloverseer\n\nThis will create a binary deep inside `~/.stack/`,
  and symlink to it at\n`~/.local/bin/sos`.\n\nUsage\n=====\n\nSee `sos --help` to
  get started:\n\n    Steel Overseer 2.0.2\n\n    Usage: sos [TARGET] [--rcfile ARG]
  [-c|--command COMMAND] [-p|--pattern PATTERN]\n               [-e|--exclude PATTERN]\n
  \     A file watcher and development tool.\n\n    Available options:\n      -h,--help
  \               Show this help text\n      TARGET                   Optional file
  or directory to watch for\n                               changes. (default: \".\")\n
  \     --rcfile ARG             Optional rcfile to read patterns and commands\n                               from.
  (default: \".sosrc\")\n      -c,--command COMMAND     Add command to run on file
  event.\n      -p,--pattern PATTERN     Add pattern to match on file path. Only relevant
  if\n                               the target is a directory. (default: .*)\n      -e,--exclude
  PATTERN     Add pattern to exclude matches on file path. Only\n                               relevant
  if the target is a directory.\n\n\nPatterns and Commands\n-------------------\nCapture
  groups can be created with `(` `)` and captured variables can be\nreferred to with
  `\\1`, `\\2`, etc. (`\\0` contains the entire match).\n\nFor example, for each change
  to a `.c` file in `src/` (excluding files\ncontaining `\"_test\"`), we may want
  to compile the file and run its corresponding\nunit test:\n\n    sos src/ -c \"gcc
  -c \\0 -o obj/\\1.o\" -c \"make test --filter=test/\\1_test.c\" -p \"src/(.*)\\.c\"
  -e \"_test\"\n\nCommands are run left-to-right, and one failed command will halt
  the entire pipeline.\n\nThe RCFile\n----------\nAs a shortcut, we may want to write
  the above only once and save it in `.sosrc`,\nwhich is an alternative to the command-line
  interface (yaml syntax):\n\n```yaml\n- pattern: src/(.*)\\.c\n  exclude: _test\n
  \ commands:\n  - gcc -c \\0 -o obj/\\1.o\n  - make test --filter=test/\\1_test.c\n```\n\nThen,
  we only need to run:\n\n    sos\n\nto start watching the current directory. If you'd
  like to use multiple rcfiles,\nor just don't like the name `.sosrc` you can specify
  the rcfile on the command\nline like so:\n\n    sos --rcfile my-rcfile\n\n### Grammar\n\n
  \   sosrc            := [entry]\n    entry            := {\n                          pattern_entry,\n
  \                         exclude_entry?, -- Note: optional!\n                          command_entry\n
  \                       }\n    pattern_entry    := \"pattern\" | \"patterns\" :
  value | [value]\n    exclude_entry    := \"exclude\" | \"excludes\" | \"excluding\"
  : value | [value]\n    command_entry    := \"command\" | \"commands\" : value |
  [value]\n    value            := [segment]\n    segment          := text_segment
  | var_segment\n    text_segment     := string\n    var_segment      := '\\' integer\n\nThe
  .sosrc grammar is somewhat flexible with respect to the command\nspecifications.
  Both singular and plural keys are allowed, and both strings\nand lists of strings
  are allowed for values.\n\nPipelining Explaned\n-------------------\nPipelines of
  commands are immediately canceled and re-run if a subsequent\nfilesystem event triggers
  the *same* list of commands. Otherwise, commands are\nare enqueued and run sequentially
  to keep the terminal output clean and readable.\n\nFor example, we may wish to run
  `hlint` on any modified `.hs` file:\n\n```yaml\n- pattern: .*\\.hs\n  command: hlint
  \\0\n```\n\nWe can modify `foo.hs` and trigger `hlint foo.hs` to run. During its
  execution,\nmodifying `bar.hs` will *enqueue* `hlint bar.hs`, while modifying `foo.hs`
  again\nwill *re-run* `hlint foo.hs`.\n"
license-name: BSD-3-Clause
