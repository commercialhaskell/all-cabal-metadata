all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
author: Alexander Thiemann <mail@thiemann.at>
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  casing: '>=0'
  cpphs: '>=0'
  cryptonite: '>=0'
  http-client: '>=0'
  http-types: '>=0'
  memory: '>=0'
  safe: '>=0'
  servant: '>=0'
  servant-client: '>=0'
  stripe-servant: '>=0'
  text: '>=0'
  time: '>=0'
changelog: ''
changelog-type: ''
description: |
  # stripe-hs

  Unofficial and incomplete Stripe SDK/client for Haskell. It's generated via `servant-client` from `stripe-servant` with a small amount of hand-written code. Contributions are welcome!

  ## Install

  ``` sh
  # stack
  stack install stripe-hs

  # cabal
  cabal install stripe-hs
  ```

  ## Example

  ``` haskell
  {-# LANGUAGE OverloadedStrings #-}
  import Stripe.Client

  import System.Environment (getEnv)
  import Network.HTTP.Client
  import Network.HTTP.Client.TLS

  main :: IO ()
  main =
    do manager <- newManager tlsManagerSettings
       apiKey <- T.pack <$> getEnv "STRIPE_KEY"
       -- create a stripe client that automatically retries up to 4 times on network
       -- errors
       let client = makeStripeClient apiKey manager 4
       result <-
           createCustomer cli (CustomerCreate Nothing (Just "mail@athiemann.net"))
       print result
  ```

  ## Features

  The package provides a module for webhook signature verification (see `Stripe.Webhook.Verify`).

  The implementation retries automatically according to [Stripe's error handling documentation](https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency).

  ### Supported APIs/Resources:

  * Customers
  * Products
  * Prices
  * CustomerPortal
  * CheckoutSession
  * Events

  *Note that all resources are likely missing fields. The library is currently focused on to be used in combination with Stripe's hosted surfaces (Customer Portal and Checkout).*

  ## Running the tests

  You can run all tests with `stack test`. You'll need a Stripe testmode API Key assigned to the `STRIPE_KEY` environment variable and you'll need to setup a Customer Portal configuration in the Stripe dashboard before running them.
description-type: markdown
hash: 19427f08dad18d67d4b8428e35825ed11669aaa11c96d4827d51c53875d8d11e
homepage: https://github.com/agrafix/stripe-hs#readme
latest: 0.3.0.0
license-name: BSD-3-Clause
maintainer: Alexander Thiemann <mail@thiemann.at>
synopsis: Unofficial Stripe client
test-bench-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  casing: '>=0'
  containers: '>=0'
  cpphs: '>=0'
  cryptonite: '>=0'
  hspec: '>=0'
  http-client: '>=0'
  http-client-tls: '>=0'
  http-types: '>=0'
  memory: '>=0'
  safe: '>=0'
  servant: '>=0'
  servant-client: '>=0'
  servant-client-core: '>=0'
  stripe-hs: '>=0'
  stripe-servant: '>=0'
  text: '>=0'
  time: '>=0'
  timespan: '>=0'
  vector: '>=0'
