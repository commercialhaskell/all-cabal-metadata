homepage: https://github.com/juhp/stack-all
changelog-type: markdown
hash: 39e294b134bed0e1999d1b847742e161864cd57ac1f5049a68f222915e20f7de
test-bench-deps: {}
maintainer: Jens Petersen <juhpetersen@gmail.com>
synopsis: CLI tool for building across Stackage major versions
changelog: |
  # Revision history for stack-all

  ## 0.2 (2021-04-03)
  - better error messages when reading snapshot option/arg (TristanCacqueray)
  - search parent dirs for stack project dir, like stack
  - snapshot options/args can now be in compact ltsXY form as well as lts-XY
  - support stack commands and options

  ## 0.1.2 (2021-02-05)
  - --create-config comment line mentions older version
  - show error for unversioned "stack-lts.yaml"
  - add lts-17

  ## 0.1.1 (2020-12-04)
  - fix ordering of stack-lts-*.yaml
  - allow --newest to override oldest lts config

  ## 0.1.0 (2020-11-14)
  - initial release with --create-config, --debug, --cmd, --newest
  - VersionSpec: --all-lts, --oldest, and lts args
basic-deps:
  extra: '>=1.6.15'
  base: <5
  text: -any
  simple-cmd-args: -any
  filepath: -any
  process: -any
  config-ini: -any
  simple-cmd: '>=0.1.4'
  directory: -any
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
author: Jens Petersen <juhpetersen@gmail.com>
latest: '0.2'
description-type: markdown
description: |
  # stack-all

  A CLI tool for building Haskell projects easily over Stackage major versions.

  This is how I do my Haskell "build ci" now locally.

  ## Usage

  `stack-all` by default runs `stack build` over
  recent Stackage LTS major versions and Nightly
  (current default is nightly, lts-17, lts-16, lts-14,... , lts-11)
  corresponding to latest major ghc minor verions.

  Note that stack-all will automatically use `stack-ltsXX.yaml`, even for older lts releases: eg say you have `stack-lts13.yaml` in your project, then it will also be used for building lts-12 (unless you have a `stack-lts12.yaml` config file of course).  (Other versioned stack.yaml filenames like stack-ghc-8.8.yaml are not supported currently.)

  You can specify the oldest working LTS for a project with `stack-all -o lts-13` or set it in a `.stack-all` file containing:
  ```
  [versions]
  # lts-12 foo-bar too old
  oldest = lts-13
  ```
  which can be created with `stack-all -c -o lts-13`.

  You can also pass stack commands and options on the command line: eg
  ```
  $ stack-all test
  ```
  will run `stack test` over the LTS versions, etc (instead of `stack build`).

  Happy stack building!

  ## Install
  Run `stack install` or `cabal install` in the source.

  ## Contribute or discuss
  at https://github.com/juhp/stack-all
license-name: BSD-3-Clause
