all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- 0.2.1
- 0.2.2
- '0.3'
- 0.3.1
- '0.4'
- 0.4.0.1
- 0.4.1
- 0.4.2
- '0.5'
- 0.5.1
- 0.5.2
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- '0.7'
- 0.7.1
author: Jens Petersen <juhpetersen@gmail.com>
basic-deps:
  aeson: '>=0'
  base: <5
  cached-json-file: '>=0'
  config-ini: '>=0'
  directory: '>=1.2.5'
  extra: '>=1.6.15'
  filepath: '>=0'
  http-query: '>=0'
  process: '>=0'
  simple-cmd: '>=0.2.1'
  simple-cmd-args: '>=0.1.8'
  text: '>=0'
  yaml: '>=0'
changelog: |
  # Release history for stack-all

  ## 0.7.1 (2025-08-05)
  - check for stack
  - for lts <= 11 fallback to stack-2.15.7
  - MajorVer: improve parsing of nightly (nightly-\*), lts (lts-\*), ghc-\*
  - add ghc9.10 alias for lts24

  ## 0.7 (2025-05-25)
  - complete rework of stack*.yaml config file logic
  - add --stack option to specify stack program (eg stack-2)
  - support "snapshot:" as well as "resolver:"
  - add -S,--make-all-lts flag (pbrisbin,#4)
  - bump default oldest major version from LTS 18 to 20
  - error for lts11 with stack > 3
  - fix --update-resolver for nightly snapshot
  - change --default-resolver short option from -d to -r
  - add ghc9.8 alias for lts23

  ## 0.6.4 (2024-10-13)
  - Fix the missing stack.yaml logic to first check for a .cabal file before
    trying parent directory

  ## 0.6.3 (2024-06-10)
  - `--update-resolver` to update default resolver to latest minor
  - command option args are now handled more precisely with an ADT

  ## 0.6.2 (2024-05-21)
  - `--default-resolver` to update stack.yaml resolver
  - change `--debug` short option to `-D`
  - test for `package.yaml` if no .cabal file

  ## 0.6.1 (2024-05-20)
  - fix `--create-config` and `--make-lts` failing if no command

  ## 0.6 (2024-05-19)
  - stack-all now works outside of projects too like stack does
  - error when `--make-lts` combined with a command args
  - also error for `--create-config` with versions or command args
  - bump default oldest lts from 16 to 18 (ghc-8.10)

  ## 0.5.2 (2024-04-18)
  - fix parsing of ltsXX
  - use https for snapshots url

  ## 0.5.1 (2024-03-19)
  - update the stackage snapshots.json url

  ## 0.5 (2024-02-19)
  - support ghc-X.Y/ghcX.Y aliases for lts major versions
  - default oldest lts bumped from lts-11 (ghc8.2) to lts-16 (ghc8.8)
  - ignore .cabal file directory

  ## 0.4.2 (2023-10-01)
  - support unversioned "lts" argument
  - add --refresh-cache option to force refresh of cached snapshots.json

  ## 0.4.1 (2023-02-20)
  - ignore nightly as a base when creating a new lts file

  ## 0.4.0.1 (2022-03-27)
  - fix build with simple-cmd-0.2.4

  ## 0.4 (2022-01-24)
  - 'lts' alias can now be used as a commandline version argument
  - stack-nightly.yaml is now only used for building nightly
  - if creating stack.yaml use latest lts snapshot resolver from snapshot.json
  - support aeson-2.0

  ## 0.3.1 (2021-09-06)
  - newest LTS for a project can now be configured
  - use cached-json-file for snapshots.json
  - add --keep-going
  - exclude lts17 now by default

  ## 0.3 (2021-06-26)
  - use hackage.stackage.org/snapshots.json:
    - to determine the latest LTS major version
    - to resolve major LTS version to latest minor snapshot and also print it
  - cache snapshots.json locally in ~/.cache/stack-all/ for a few hours
  - new --make-lts command to generate a stack-ltsXX.yaml file from newer one

  ## 0.2.2 (2021-06-07)
  - create a stack.yaml file if only an .cabal file is found

  ## 0.2.1 (2021-04-30)
  - if stack fails, print the ~/.stack snapshot path for reference

  ## 0.2 (2021-04-03)
  - better error messages when reading snapshot option/arg (TristanCacqueray)
  - search parent dirs for stack project dir, like stack
  - snapshot options/args can now be in compact ltsXY form as well as lts-XY
  - support stack commands and options

  ## 0.1.2 (2021-02-05)
  - --create-config comment line mentions older version
  - show error for unversioned "stack-lts.yaml"
  - add lts-17

  ## 0.1.1 (2020-12-04)
  - fix ordering of stack-lts-*.yaml
  - allow --newest to override oldest lts config

  ## 0.1.0 (2020-11-14)
  - initial release with --create-config, --debug, --cmd, --newest
  - VersionSpec: --all-lts, --oldest, and lts args
changelog-type: markdown
description: |
  # stack-all

  A CLI tool for building Haskell projects easily
  over several Stackage major versions.

  I use this to do Haskell build CI for projects locally with stack.

  ## Usage

  `stack-all` by default runs `stack build` over Stackage Nightly and
  LTS major versions (the current default range is LTS versions back to lts-20)
  corresponding to latest major ghc minor versions,
  using appropriate stack `--resolver` options.

  Note that `stack` only works in a project if a `stack.yaml` file exists.
  If no `stack.yaml` file is found in a .cabal project,
  `stack-all` will create one if there is a .cabal or "package.yaml" file.
  Of course it may still fail to build, but this allows for quick attempts
  to build a package that does not include a stack.yaml file.

  Since 0.6, stack-all also works outside projects, like stack itself does
  (for commands that do not need a project).

  ### Help output
  `$ stack-all --version`

  ```
  0.7.1
  ```
  `$ stack-all --help`

  ```
  Build project over Stackage major versions

  Usage: stack-all [--version] [-k|--keep-going] [-D|--debug] [--refresh-cache]
                   [--stack STACKPROG] [-n|--newest MAJOR]
                   [(-o|--oldest MAJOR) | (-a|--all-lts)]
                   [(-c|--create-config) | (-r|--default-resolver MAJOR) |
                     (-u|--update-resolver) | (-s|--make-lts MAJOR) |
                     (-S|--make-all-lts) | [MAJORVER... COMMAND...]]

    https://github.com/juhp/stack-all#readme

  Available options:
    -h,--help                Show this help text
    --version                Show version
    -k,--keep-going          Keep going even if an LTS fails
    -D,--debug               Verbose stack build output on error
    --refresh-cache          Force refresh of stackage snapshots.json cache
    --stack STACKPROG        stack program to use [default: stack]
    -n,--newest MAJOR        Newest LTS release to build from
    -o,--oldest MAJOR        Oldest compatible LTS release
    -a,--all-lts             Try to build back to LTS 1 even
    -c,--create-config       Create a project .stack-all file
    -r,--default-resolver MAJOR
                             Set stack.yaml resolver
    -u,--update-resolver     Update stack.yaml resolver
    -s,--make-lts MAJOR      Create a stack-ltsXX.yaml file
    -S,--make-all-lts        Create all stack-ltsXX.yaml files
  ```

  ### Overriding stack.yaml
  `stack-all` can use `stack-ltsXX.yaml` files to override the default
  `stack.yaml` file for particular Stackage major versions.
  Note that a `stack-ltsXX.yaml` file will also be used for
  older LTS major versions until another `stack-ltsYY.yaml` file is found.
  `stack-nightly.yaml` is also supported, but used only for nightly.

  For example if you have `stack-lts23.yaml` and `stack-lts21.yaml` files
  in your project,
  then `stack.yaml` will be used as normal to build nightly and lts-24,
  but `stack-lts23.yaml` will be used for building lts-23 and lts-22,
  and `stack-lts21.yaml` will be used for lts-21 and older.
  Since `stack-all` overrides the exact resolver with the latest minor snapshot,
  the exact minor Stackage version specified in the `stack*.yaml` files
  doesn't actually matter: `stack-all` always uses the latest published
  minor releases of Stackage major versions. (Since 0.7 the version handling
  is slightly more complex, since it allows using eg `stack-lts24.yaml` before
  an `stack.yaml` set for lts23 or older say: previously `stack.yaml` was always used
  before any `stack-lts*.yaml` files.)

  `stack-ltsXX.yaml` files can be easily created using
  `stack-all --make-lts ltsXX` (or `-s ltsXX` for short).

  (Other versioned stack.yaml filenames like stack-ghc-8.8.yaml
  are not currently supported.)

  If you wish you can create `stack-ltsXX.yaml` for all lts versions using
  `--make-all-lts` (`-S`), but it is recommended to create only needed files.

  Since 0.7, a `stack-ltsXX.yaml` conflicting (overlapping in major version)
  with `stack.yaml` gives an error, and stack-all will also refuse to generate
  such a file.

  ### Specifying LTS versions
  You can abbreviate `lts-XX` args to `ltsXX` on the commandline.
  `lts` is also accepted and resolves to the latest major LTS version.

  You can also use (hardcoded) ghc major version aliases for LTS's:
  eg `ghc9.10` corresponds to `lts24` and `ghc-9.2` to `lts-20`
  (but not for `nightly`).

  There are `--oldest`  and `--newest` options to specify the range of
  lts versions to build over:

  You can specify the oldest major LTS to build for with eg `stack-all -o lts18`.
  Otherwise if not configured the default oldest LTS is currently `lts-20`.

  Similarly you can specify the newest LTS version to build from with
  eg `stack-all -n lts23`. (The default is to build from nightly.)

  Alternatively, one can give one or more explicit LTS major versions to build
  for as arguments: eg `stack-all lts22` if you only wish to build that version.

  ### Configuring the oldest and/or newest LTS to build
  You can configure the oldest working LTS major version for your project
  by running for example `stack-all -c -o lts-21` which generates a `.stack-all`
  project config file like this:
  ```
  [versions]
  # lts-20 too old
  oldest = lts-21
  ```
  (the comment line can be used to document why the older LTS doesn't work).
  This specifies that the oldest LTS version to build for is lts-21.

  The newest LTS to build with stack-all can similarly be configured:
  `stack-all -c -n lts22` or inserting `newest = lts-22`.

  ### Running other stack commands
  By default `stack-all` just runs the stack `build` command over
  Stackage major versions.

  You can also specify a stack command to run with options on the commandline:
  eg
  ```
  $ stack-all test --no-rerun-tests
  ```
  will run `stack test` over the LTS versions instead.


  Any stack command can be used, possibly outside a project,
  eg: `stack-all list aeson`

  Happy stack building!

  ## Install
  The project is released on Hackage.

  You can also build from a git clone with `stack install` or `cabal install`.

  ## Collaboration
  The project is hosted at https://github.com/juhp/stack-all under a BSD license.
description-type: markdown
hash: 4bfc815a4768305ebb6a1135729a0fce8009c37fac08e9b810f20dce84b3342d
homepage: https://github.com/juhp/stack-all
latest: 0.7.1
license-name: BSD-3-Clause
maintainer: Jens Petersen <juhpetersen@gmail.com>
synopsis: CLI tool for building over Stackage major versions
test-bench-deps: {}
