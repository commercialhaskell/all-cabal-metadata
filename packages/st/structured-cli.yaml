all-versions:
- 0.9.0.2
- 0.9.0.3
- 0.9.1.0
- 0.9.2.0
- 0.9.3.0
- 0.9.3.1
- 0.9.4.0
- 0.9.4.1
- 2.0.0.0
- 2.0.0.1
- 2.2.0.0
- 2.2.1.0
- 2.3.0.0
- 2.4.0.0
- 2.4.0.1
- 2.5.0.0
- 2.5.0.1
- 2.5.0.2
- 2.5.0.3
- 2.5.1.0
- 2.5.2.0
- 2.6.0.0
- 2.7.0.0
- 2.7.0.1
author: Erick Gonzalez
basic-deps:
  base: '>=4.9.1.0 && <5'
  data-default: '>=0.7.1.1 && <0.8'
  exceptions: '>=0.6 && <0.11'
  haskeline: '>=0.8 && <0.9'
  mtl: '>=2.2.1 && <3.0'
  split: '>=0.2.3.2 && <0.3'
  structured-cli: '>=0'
  transformers: '>=0.5.2.0 && <0.6'
changelog: ''
changelog-type: ''
description: |
  # structured-cli
  #### Haskell library for building structured CLI applications

  This module provides the tools to build a complete "structured" CLI application, similar
  to those found in systems like Cisco IOS or console configuration utilities etc. It aims
  to be easy for implementors to use.

  * How to use this module:

  It is often the case that a simple example is the best user guide, at least for the
  experienced programmer. The following code illustrates a basic but functioning CLI application:


  ```haskell
  module Main where

  import Control.Monad                 (void)
  import Control.Monad.IO.Class        (liftIO)
  import Data.Default                  (def)
  import System.Console.StructuredCLI

  root :: Commands ()
  root = do
    world >+ do
      hello
      bye
      command "exit" "return to previous level" exit

  world :: Commands ()
  world = command "world" "enter into the world" $ return NewLevel

  hello :: Commands ()
  hello = command "hello" "prints a greeting" $ do
            liftIO . putStrLn $ "Hello world!"
            return NoAction

  bye :: Commands ()
  bye = command "bye" "say goodbye" $ do
          liftIO . putStrLn $ "Sayonara!"
          return NoAction

  main :: IO ()
  main = void $ runCLI "Hello CLI" def root
  ```

  resulting example session:

  ```
  >>> Hello CLI > ?
  - world: enter into the world

  >>> Hello CLI > world
  >>> Hello CLI world > ?
  - exit: return to previous level
  - bye: say goodbye
  - hello: prints a greeting

  >>> Hello CLI world > hello
  Hello world!
  >>> Hello CLI world > bye
  Sayonara!
  >>> Hello CLI world > exit
  >>> Hello CLI >
  ```

  A good way to get you started is to grab the example code available under [example/Main.hs](https://gitlab.com/codemonkeylabs/structured-cli/blob/master/example/Main.hs) and modify it to suit your needs.
description-type: markdown
hash: af3c03e42ce31c8773b26e43b8b79b5af3fd6cc7454ec3d6b37ada80b48b56dc
homepage: https://gitlab.com/codemonkeylabs/structured-cli#readme
latest: 2.7.0.1
license-name: BSD-3-Clause
maintainer: erick@codemonkeylabs.de
synopsis: Application library for building interactive console CLIs
test-bench-deps: {}
