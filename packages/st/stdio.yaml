all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
author: Dong Han, Tao He
basic-deps:
  QuickCheck: '>=2.10'
  base: '>=4.12 && <5.0'
  case-insensitive: '>=1.2 && <1.3'
  deepseq: '>=1.4 && <1.5'
  exceptions: '>=0.10 && <0.11'
  ghc-prim: '>=0.5.3 && <=0.5.4'
  hashable: '>=1.2 && <1.3'
  integer-gmp: '>=0.2 && <1.1'
  primitive: '>=0.6.4 && <=0.6.5'
  scientific: '>=0.3 && <0.4'
  stm: '>=2.5 && <2.6'
  tagged: '>=0.8 && <0.9'
  template-haskell: '>=2.14 && <2.15'
  time: '>=1.8 && <2.0'
  unordered-containers: '>=0.2 && <0.3'
changelog: |
  # Revision history for stdio

  ## 0.1.1.0  -- 2019-02-19

  * Add LEON, a little endian first serialization/deserialization module.
  * Use pkg-config to find libuv by default, which can be turned off via cabal flag no-pkg-config
  * Export `Result` constructor in `Std.Data.Parser` module.

  ## 0.2.0.0  --2019-05-15

  * Add UDP module.
  * Add JSON module.
  * Add `ToText` class to `TextBuilder` module.
  * Improve numeric builders by using FFI code.
  * Change `readParser` 's type in `Std.IO.Buffered` module to directly return parsing result.
  * Add `FlatMap/FlatSet/FlatIntMap/FlatIntSet` module.
  * Fix a bug of `Parser` 's  `Alternative` instance.
  * Fix a bug of `PrimVector` 's `QuasiQuoter`.
changelog-type: markdown
description: "Haskell stdio: haskell standard input and output\n================================================\n\n[![Linux
  Build Status](https://img.shields.io/travis/haskell-stdio/stdio/master.svg?label=Linux%20build)](https://travis-ci.org/haskell-stdio/stdio)\n[![Windows
  Build Status](https://img.shields.io/appveyor/ci/winterland1989/stdio-7usux/master.svg?label=Windows%20build)](https://ci.appveyor.com/project/winterland1989/stdio-7usux/branch/master)\n\nWelcome!
  Haskell stdio is a complete I/O toolkit powered by libuv, it features a multi-core
  io multiplexer and various improvements on packed data types. This project is still
  in infancy. Please join in!\n\n```\n    __  _____   _____ __ __ ________    __       _______________
  \ ________ \n   / / / /   | / ___// //_// ____/ /   / /      / ___/_  __/ __ \\/
  \ _/ __ \\\n  / /_/ / /| | \\__ \\/ ,<  / __/ / /   / /       \\__ \\ / / / / /
  // // / / /\n / __  / ___ |___/ / /| |/ /___/ /___/ /___    ___/ // / / /_/ // //
  /_/ / \n/_/ /_/_/  |_/____/_/ |_/_____/_____/_____/   /____//_/ /_____/___/\\____/\n```\n\nInstall\n-------\n\nOn
  windows we have bundled libuv source, so no extra steps to be taken.\n\nOn \\*nix
  platforms, you should install libuv library first, you can use your distribution's
  package manager if available, for example:\n\n```\n# on debian/ubuntu, make sure
  to use 1.x\napt-get install libuv1-dev  libuv1\n\n# on MacOS, we recommend brew\nbrew
  install libuv\n\n...\n```\n\nCurrently **the minimum version requirement for libuv
  is v1.14**. If your package manager's libuv doesn't meet this requirement, you can
  also build libuv from source following the guide [here](https://github.com/libuv/libuv#build-instructions),
  e.g.\n\n```\ngit clone https://github.com/libuv/libuv.git \ncd libuv \ngit checkout
  tags/v1.24.0   # depend on your own need, any version >= 1.14 will work.\nsh autogen.sh
  \n./configure \nmake \nsudo make install \n```\n\nAfter manually building and installing,
  you may need to modify your `LIBRARY_PATH/CPATH` if necessary. Now installing stdio
  is as easy as any other haskell packages.  \n\n```\ncabal install stdio\n```\n\nNow
  you can fire GHCi and play around, or read the [project overview](https://haskell-stdio.github.io/stdio),
  [haddock](http://hackage.haskell.org/package/stdio).\n\nExamples\n--------\n\n+
  hello world\n\n```\nimport Std.IO.StdStream\nimport qualified Std.Data.Text as T\n\nmain
  = do\n    -- read stdin and write to stdout, but with our new IO manager!\n    input
  <- readLineStd\n    printStd (T.validate input)\n```\n\n+ tcp echo server\n\n```\nimport
  Std.IO.TCP\nimport Std.IO.Buffered\nimport Control.Monad\n\nmain = do\n    startServer
  defaultServerConfig\n        { serverAddr = SockAddrInet 8888 inetAny\n        ,
  serverWorker = echo\n        }\n  where\n    echo uvs = forever $ do\n        i
  <- newBufferedInput uvs 4096\n        o <- newBufferedOutput uvs 4096\n        readBuffer
  i >>= writeBuffer o\n        flushBuffer o\n```\n\nNow try `nc -v 127.0.0.1 8888`.\n\n+
  logging\n\n```\nimport Std.IO.Logger\nimport qualified Std.Data.Builder as B\nimport
  Control.Concurrent\n\nmain = withStdLogger $ do\n    debug $ \"hello world! PI ~=\"
  >> B.double pi     -- debug level won't be immediately flushed\n    forkIO $ do\n
  \       fatal \"fatal message will trigger a log flush\"\n```\n\n+ file system operatations\n\n```\nimport
  \          Std.IO.FileSystem\nimport           Std.IO.Resource\nimport           Std.IO.StdStream\n\nmain
  = do\n    -- create a temp directory\n    tempdir <- mkdtemp \"temp\"   \n    let
  filename = \"temp\" <> \"/test\"\n        flags = O_RDWR .|. O_CREAT      -- create
  if not exist\n        mode = DEFAULT_MODE\n\n    -- file is a 'Resource', use 'withResource'
  to automatically manage it\n    withResource (initUVFile filename flags mode) $
  \\ f -> do\n        o <- newBufferedOutput file 4096\n        writeBuffer o \"hello
  world!\"\n        flushBuffer o\n\n    stat filename >>= printStd\n```\n"
description-type: markdown
hash: c2dfaecd7e3e5fe9098c49ab0dab5fe2d6d4ac80bc664d5951428020f710e131
homepage: https://github.com/haskell-stdio/stdio
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: winterland1989@gmail.com
synopsis: A simple and high performance IO toolkit for Haskell
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=2.10'
  base: '>=0'
  hashable: '>=0'
  hspec: '>=2.5.4'
  integer-gmp: '>=0.2 && <1.1'
  primitive: '>=0'
  quickcheck-instances: '>=0'
  scientific: '>=0'
  stdio: '>=0'
  word8: '>=0'
