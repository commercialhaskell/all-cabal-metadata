all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: Alexey Vagarenko
basic-deps:
  base: '>=4.10 && <=5.0'
  deepseq: '>=1.4.3 && <1.4.4'
  lens: '>=4.15 && <4.16'
  mono-traversable: '>=1.0 && <1.1'
  singletons: '>=2.3 && <2.4'
  split: '>=0.2 && <0.3'
  template-haskell: '>=2.12 && <2.13'
changelog: "# Revision history for static-tensor\r\n\r\n## 0.2.1.0  -- 2017-12-17\r\n\r\n*
  Added `norm` vector function.\r\n* Added `fromHomogenous` and `toHomogenous` vector
  functions.\r\n\r\n## 0.2.0.0  -- 2017-09-20\r\n\r\n* **BREAKING:** Changed `PositiveDims`
  type family to return `Constraint` instead of `Bool`\r\n\r\n* Fixed suboptimal Core
  for `ounzip`, `adjugateMatrix`, `cofactor`, `cofactorMatrix`, `determinant`, \r\n`inverse`,
  `minor`, `minorMatrix`, `transpose` functions.\r\n\r\n## 0.1.0.0  -- 2017-09-15\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n"
changelog-type: markdown
description: "# Static tensor\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/static-tensor.svg)](https://hackage.haskell.org/package/static-tensor)\r\n[![Build
  Status](https://api.travis-ci.org/vagarenko/static-tensor.svg?branch=master)](https://travis-ci.org/vagarenko/static-tensor)\r\n\r\nSometimes
  when working with vectors or matrices or tensors of any rank, you know their sizes
  \r\nand types of their elements at compile time, and you don't need to change them
  at runtime.\r\n\r\nThis library provides a uniform interface for working with tensors
  of any rank. \r\nIt uses type-level programing to catch errors at compile time instead
  of runtime.\r\nIt also (ab)uses GHC optimizations to unroll loops to achieve greater
  performance.\r\n\r\n## Tensor data family\r\n\r\nThe library is built around a data
  family of tensors\r\n\r\n```haskell\r\n-- | Data family of unboxed tensors. Dimensions
  of a tensor are represented as type-level list of \r\n--   naturals. For instance,
  @Tensor [3] Float@ is a vector of 3 'Float' elements; @Tensor [4,3] Double@ \r\n--
  \  is a matrix with 4 rows 3 columns of 'Double' and so on.\r\nclass IsTensor (dims
  :: [Nat]) e where\r\n    {-# MINIMAL tensor, unsafeFromList, toList #-}\r\n\r\n
  \   -- | Tensor data constructor for given size and element type.\r\n    data Tensor
  dims e :: Type\r\n\r\n    -- | Alias for a concrete tensor data constructor.\r\n
  \   -- \r\n    -- >>> tensor @[2,2] @Int 0 1 2 3\r\n    -- Tensor'2'2 [[0,1],[2,3]]\r\n
  \   tensor :: TensorConstructor dims e\r\n\r\n    -- | Build tensor from the list.
  The list must contain at least 'length' elements or method will throw an exception.\r\n
  \   unsafeFromList :: [e] -> Tensor dims e\r\n\r\n    -- | Convert tensor to list.\r\n
  \   toList :: Tensor dims e -> [] e\r\n```\r\nIn order to start to work with the
  library, you need to create instances of this data family \r\nwith desired sizes
  and element's types.\r\nFor this, you can use Template Haskell functions\r\n\r\n```haskell\r\nData.Tensor.Static.TH.genTensorInstance
  :: NonEmpty Int       -- ^ Dimensions of the tensor.\r\n                                        ->
  Name               -- ^ Type of elements.\r\n                                        ->
  Q [Dec]\r\n\r\nData.Vector.Static.genVectorInstance    :: Int                --
  ^ Size of the vector.\r\n                                        -> Name               --
  ^ Type of elements.\r\n                                        -> Q [Dec]\r\n\r\nData.Matrix.Static.genMatrixInstance
  \   :: Int                -- ^ Number of rows.\r\n                                        ->
  Int                -- ^ Number of columns.\r\n                                        ->
  Name               -- ^ Type of elements.\r\n                                        ->
  Q [Dec]\r\n```\r\n\r\nThis code, for example\r\n\r\n```haskell\r\n$(genVectorInstance
  4 ''Float)\r\n$(genMatrixInstance 4 4 ''Float)\r\n$(genTensorInstance [2, 3, 4]
  ''Float)\r\n```\r\n\r\nwill generate:\r\n* data instance for vector of 4 elements
  of type `Float`\r\n* data instance for matrix of 4 rows and 4 columns of type `Float`\r\n*
  data instance for tensor with dimensions 2x3x4 of type `Float`\r\n\r\nNow you can
  create a value of a tensor with functions `vector`, `matrix`, `tensor` \r\nwhich
  are just aliases for concrete generated data constructors.\r\n\r\n```haskell\r\n{-#
  LANGUAGE TypeApplications #-}\r\n\r\nv :: Vector 4 Float\r\nv = vector @4 @Float
  0 1 2 3\r\n\r\nm :: Matrix 4 4 Float\r\nm = matrix @4 @4 @Float 0 1 2 3 4 5 6 7
  8 9 10 11 12 13 14 15\r\n\r\nt :: Tensor '[2, 3, 4] Float\r\nt = tensor @'[2, 3,
  4] @Float 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\r\n```\r\n\r\nYou
  can add tensors of the same size:\r\n```haskell\r\nv2 = v `add` v\r\nm2 = m `add`
  m\r\n```\r\n\r\nYou can multiply matrix of size `m*n` by matrix of size `n*o` to
  get matrix of size `m*o`:\r\n```haskell\r\n$(genMatrixInstance 3 3 ''Float)\r\n$(genMatrixInstance
  3 4 ''Float)\r\n$(genMatrixInstance 4 3 ''Float)\r\n\r\nm1 :: Matrix 3 4 Float\r\nm1
  = matrix @3 @4 @Float 0 1 2 3 4 5 6 7 8 9 10 11\r\n\r\nm2 :: Matrix 4 3 Float\r\nm2
  = matrix @4 @3 @Float 0 1 2 3 4 5 6 7 8 9 10 11\r\n\r\nmm :: Matrix 3 3 Float\r\nmm
  = m1 `mult` m2\r\n```\r\n\r\nYou can multiply matrix of size `m*n` by vector of
  size `n`:\r\n```haskell\r\nmv :: Vector 4 Float\r\nmv = m `mult` v\r\n\r\nvm ::
  Vector 4 Float\r\nvm = v `mult` m\r\n```\r\n\r\nIn all those examples, if the dimensions
  of the tensors have been incompatible, \r\nyou would have received a compilation
  error.\r\n\r\n\r\n## Loop unrolling\r\nThe library (ab)uses GHC optimizations to
  unroll loops to achieve greater performance.\r\n\r\nFor example, matrix multiplication
  function specialized to concrete size and type\r\n\r\n```haskell\r\nmm :: Matrix
  3 3 Float -> Matrix 3 3 Float -> Matrix 3 3 Float\r\nmm = mult\r\n```\r\n\r\nis
  compiled to this nice Core\r\n\r\n```haskell\r\nMm.mm1\r\n  :: Data.Tensor.Static.Tensor
  '[3, 3] Float\r\n     -> Data.Tensor.Static.Tensor '[3, 3] Float\r\n     -> Data.Tensor.Static.Tensor
  (MatrixMultDims '[3, 3] '[3, 3]) Float\r\nMm.mm1\r\n  = \\ (m0 :: Data.Tensor.Static.Tensor
  '[3, 3] Float)\r\n      (m1 :: Data.Tensor.Static.Tensor '[3, 3] Float) ->\r\n      case
  m0 `cast` <Co:1> of\r\n      { Tensor'3'3'Float dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8
  ->\r\n      case m1 `cast` <Co:1> of\r\n      { Tensor'3'3'Float dt9 dt10 dt11 dt12
  dt13 dt14 dt15 dt16 dt17 ->\r\n      (Mm.Tensor'3'3'Float\r\n         (GHC.Prim.plusFloat#\r\n
  \           (GHC.Prim.timesFloat# dt dt9)\r\n            (GHC.Prim.plusFloat#\r\n
  \              (GHC.Prim.timesFloat# dt1 dt12) (GHC.Prim.timesFloat# dt2 dt15)))\r\n
  \        (GHC.Prim.plusFloat#\r\n            (GHC.Prim.timesFloat# dt dt10)\r\n
  \           (GHC.Prim.plusFloat#\r\n               (GHC.Prim.timesFloat# dt1 dt13)
  (GHC.Prim.timesFloat# dt2 dt16)))\r\n         (GHC.Prim.plusFloat#\r\n            (GHC.Prim.timesFloat#
  dt dt11)\r\n            (GHC.Prim.plusFloat#\r\n               (GHC.Prim.timesFloat#
  dt1 dt14) (GHC.Prim.timesFloat# dt2 dt17)))\r\n         (GHC.Prim.plusFloat#\r\n
  \           (GHC.Prim.timesFloat# dt3 dt9)\r\n            (GHC.Prim.plusFloat#\r\n
  \              (GHC.Prim.timesFloat# dt4 dt12) (GHC.Prim.timesFloat# dt5 dt15)))\r\n
  \        (GHC.Prim.plusFloat#\r\n            (GHC.Prim.timesFloat# dt3 dt10)\r\n
  \           (GHC.Prim.plusFloat#\r\n               (GHC.Prim.timesFloat# dt4 dt13)
  (GHC.Prim.timesFloat# dt5 dt16)))\r\n         (GHC.Prim.plusFloat#\r\n            (GHC.Prim.timesFloat#
  dt3 dt11)\r\n            (GHC.Prim.plusFloat#\r\n               (GHC.Prim.timesFloat#
  dt4 dt14) (GHC.Prim.timesFloat# dt5 dt17)))\r\n         (GHC.Prim.plusFloat#\r\n
  \           (GHC.Prim.timesFloat# dt6 dt9)\r\n            (GHC.Prim.plusFloat#\r\n
  \              (GHC.Prim.timesFloat# dt7 dt12) (GHC.Prim.timesFloat# dt8 dt15)))\r\n
  \        (GHC.Prim.plusFloat#\r\n            (GHC.Prim.timesFloat# dt6 dt10)\r\n
  \           (GHC.Prim.plusFloat#\r\n               (GHC.Prim.timesFloat# dt7 dt13)
  (GHC.Prim.timesFloat# dt8 dt16)))\r\n         (GHC.Prim.plusFloat#\r\n            (GHC.Prim.timesFloat#
  dt6 dt11)\r\n            (GHC.Prim.plusFloat#\r\n               (GHC.Prim.timesFloat#
  dt7 dt14) (GHC.Prim.timesFloat# dt8 dt17))))\r\n      `cast` <Co:10>\r\n      }\r\n
  \     }\r\n```\r\n\r\nFor implementation details of this trick see `Data.List.Unrolled`
  module.\r\nAlso see test suite for more Core dumps.\r\n\r\n## Performance\r\nLoop
  unrolling allows to achive greater performance.\r\nIn matrix multiplication benchmark,
  for instance, this library is 3 times faster than the `linear` package.\r\n![Bench](https://raw.githubusercontent.com/vagarenko/static-tensor/master/bench.png)\r\n\r\n```\r\nbenchmarking
  matrix mult 4x4/tensor\r\ntime                 58.24 ns   (58.13 ns .. 58.39 ns)\r\n
  \                    1.000 R²   (1.000 R² .. 1.000 R²)\r\nmean                 58.16
  ns   (58.03 ns .. 58.41 ns)\r\nstd dev              557.6 ps   (304.1 ps .. 904.9
  ps)\r\n\r\nbenchmarking matrix mult 4x4/linear\r\ntime                 197.2 ns
  \  (196.3 ns .. 198.5 ns)\r\n                     1.000 R²   (0.999 R² .. 1.000
  R²)\r\nmean                 197.3 ns   (196.2 ns .. 198.8 ns)\r\nstd dev              4.364
  ns   (3.190 ns .. 5.935 ns)\r\nvariance introduced by outliers: 30% (moderately
  inflated)\r\n\r\nbenchmarking matrix mult 4x4/unrolled\r\ntime                 60.11
  ns   (60.01 ns .. 60.25 ns)\r\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\r\nmean                 59.98 ns   (59.88 ns .. 60.10 ns)\r\nstd dev              376.7
  ps   (320.8 ps .. 455.2 ps)\r\n\r\nbenchmarking matrix mult 4x4/unrolledFull\r\ntime
  \                60.20 ns   (59.85 ns .. 60.62 ns)\r\n                     1.000
  R²   (1.000 R² .. 1.000 R²)\r\nmean                 59.89 ns   (59.71 ns .. 60.14
  ns)\r\nstd dev              691.5 ps   (518.4 ps .. 949.5 ps)\r\nvariance introduced
  by outliers: 11% (moderately inflated)\r\n\r\nbenchmarking matrix mult 4x4/vector\r\ntime
  \                420.1 ns   (419.2 ns .. 420.9 ns)\r\n                     1.000
  R²   (1.000 R² .. 1.000 R²)\r\nmean                 418.0 ns   (416.9 ns .. 419.4
  ns)\r\nstd dev              3.881 ns   (2.799 ns .. 6.224 ns)\r\n\r\nbenchmarking
  matrix mult 4x4/vector4\r\ntime                 95.30 ns   (94.95 ns .. 95.59 ns)\r\n
  \                    1.000 R²   (1.000 R² .. 1.000 R²)\r\nmean                 94.59
  ns   (94.35 ns .. 94.86 ns)\r\nstd dev              877.4 ps   (721.2 ps .. 1.167
  ns)\r\n```\r\n"
description-type: markdown
hash: 787cd4cef3f5cdb3a7040fb809d07bb55be7e3a9a0a2ded1ea658d3c71dbb0b3
homepage: https://github.com/vagarenko/static-tensor
latest: 0.2.1.0
license-name: BSD-3-Clause
maintainer: vagarenko@gmail.com
synopsis: Tensors of statically known size
test-bench-deps:
  Diff: '>=0.3 && <0.4'
  base: '>=4.10 && <=5.0'
  criterion: '>=1.2 && <1.3'
  deepseq: '>=1.4.3 && <1.4.4'
  linear: '>=1.20 && <1.21'
  mwc-random: '>=0.13 && <0.14'
  static-tensor: '>=0'
  tasty: '>=0.11.2 && <0.11.3'
  tasty-golden: '>=2.3 && <2.4'
  text: '>=1.2 && <1.3'
  typed-process: '>=0.1 && <0.2'
  vector: '>=0.12 && <0.13'
