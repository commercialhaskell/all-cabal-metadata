all-versions:
- 0.3.0.0
author: Michael B. Gale
basic-deps:
  base: '>=4.7 && <5.0'
  containers: '>=0'
  haskell-src-exts: '>=1.16'
  haskell-src-meta: '>=0.6'
  lens: '>=4.10'
  mtl: '>=2.1'
  parsec: '>=3.1.9'
  pretty: '>=0'
  template-haskell: '>=2.14'
  text: '>=0'
changelog: ''
changelog-type: ''
description: "# hoop\n\nA Haskell library for object-oriented programming which allows
  programmers to use objects in ordinary Haskell programs. In particular, the library
  achieves the following design objectives (to avoid ambiguity with Haskell's type
  classes, we refer to classes in the object-oriented sense as _object classes_):\n\n-
  No extensions to the Haskell language are required beyond what is already implemented
  in GHC. Object classes are generated from Template Haskell quasi quotations using
  an OO-like syntax where the methods are defined as ordinary Haskell expressions.
  \n- Object classes can be instantiated from ordinary Haskell code (with an overloaded
  function named `new`). The resulting objects are ordinary Haskell values and can
  be used as such.\n- Calling methods on objects can be done from within ordinary
  Haskell code. \n- The objects do not rely on IO. Instantiating objects and calling
  methods on the resulting objects is pure. \n- Object classes can inherit from other
  object classes, which also established subtyping relations between them. There is
  no limit to how deep these inheritance trees may grow.\n- Class hierarchies are
  open for extension. I.e. the library does not need to know about all subclasses
  of a given class in order to generate the code for that class, allowing modular
  compilation.\n- Casting from subtype objects to their supertypes is supported and
  the types are correctly reflected in Haskell's type system (e.g. assuming that we
  have `Duck <: Bird` and that `obj :: Duck` then `upcast obj :: Bird`) and pure.\n-
  Type annotations are generally not required except where something would logically
  be ambiguous otherwise (e.g. instantiating an object with the `new` function).\n\n##
  Examples\n\nThe [test](https://github.com/mbg/hoop/tree/master/test) folder contains
  a number of examples of the library in action, illustrating the various features.
  \n\nAs a quick tutorial, a simple expression language can be implemented using the
  library as shown below. Note that the bodies of the two implementations of the `eval`
  method are ordinary Haskell expressions. The `.!` operator is an ordinary Haskell
  operator used to call methods on objects and `this` is just an ordinary Haskell
  definition, too.\n\n```haskell\n[state|\nabstract state Expr where\n    eval ::
  Int\n\nstate Val : Expr where\n    data val = 0 :: Int\n\n    eval = do\n        r
  <- this.!val\n        return r\n\nstate Add : Expr where \n    data left :: Expr
  \n    data right :: Expr \n\n    eval = do \n        x <- this.!left.!eval \n        y
  <- this.!right.!eval \n        return (x+y)\n|]\n\nsomeExpr :: Add \nsomeExpr =
  new @Add (upcast $ new @Val 4, upcast $ new @Val 7)\n\nsomeExprResult :: Int \nsomeExprResult
  = result (someExpr.!eval)\n```\n\nIf we evaluate `someExprResult`, the result is
  `11` as expected. We can note some points of interest here that differ from popular
  object-oriented programming languages:\n\n- The type annotations on `someExpr` and
  `someExprResult` are optional and just provided for clarity. The type applications
  for the calls to `new` are required (alternatively, type annotations on the sub-expression
  would work, too).\n- Casts must be explicit: in the example, the objects of type
  `Val` must be explicitly cast to `Expr` values to instantiate the `Add` object.\n-
  Since everything is pure, calling a method on an object produces two results: the
  result of the method call and a (potentially) updated object. The `result` function
  returns the result of calling `eval` on the `someExpr` object, discarding the resulting
  object.\n- It does not matter what type of object we call `eval` on, as long as
  it is of type `Expr` or is a sub-type of `Expr`.\n\nIndeed, we can cast the `Add`
  object to an `Expr` object, call `eval` on it, and still get the correct result:\n\n```haskell\n>
  let e = upcast someExpr in result (e.!eval)\n11\n```\n\n- Casting from supertype
  objects to a subtype is possible, but may fail (returning `Nothing`). E.g. assuming
  `Duck <: Bird` and that `obj :: Bird` then `downcast obj :: Maybe Duck`.\n\n## Overview
  of the process\n\n* `QuasiQuoters.hs` contains the entry point\n* First, the state
  declarations are parsed (`Parsers.hs`) via `parseStateDecl`\n* The parsed declarations
  are then passed to `genStateDecls` (`Language.MSH.CodeGen.Decls` / `Decls.hs`)\n*
  This turns the declarations into a dependency graph (via `buildStateGraph` in `Language.MSH.StateEnv`
  / `StateEnv.hs`)\n* If successful, the graph is written to `graph.log`\n* The `genStateDecl`
  function is then applied to every state declaration in dependency order (i.e. starting
  from no dependencies)"
description-type: markdown
hash: 8ddf4218011c587fef3cf878daf50f5bdb8a1b668835395531aae2ec2c382476
homepage: https://github.com/mbg/hoop#readme
latest: 0.3.0.0
license-name: MIT
maintainer: m.gale@warwick.ac.uk
synopsis: Object-Oriented Programming in Haskell
test-bench-deps:
  base: '>=4.7 && <5.0'
  containers: '>=0'
  haskell-src-exts: '>=1.16'
  haskell-src-meta: '>=0.6'
  hoop: '>=0'
  hspec: '>=0'
  lens: '>=4.10'
  mtl: '>=2.1'
  parsec: '>=3.1.9'
  pretty: '>=0'
  template-haskell: '>=2.14'
  text: '>=0'
