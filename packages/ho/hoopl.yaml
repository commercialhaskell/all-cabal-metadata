all-versions:
- 3.7.0.0
- 3.7.1.0
- 3.7.2.2
- 3.7.3.3
- 3.7.3.4
- 3.7.3.5
- 3.7.4.0
- 3.7.7.0
- 3.7.8.0
- 3.7.12.1
- 3.8.3.0
- 3.8.6.0
- 3.8.7.0
- 3.8.7.1
- 3.8.7.3
- 3.8.7.4
- 3.9.0.0
- 3.10.0.0
- 3.10.0.1
- 3.10.0.2
- 3.10.1.0
- 3.10.2.0
- 3.10.2.1
- 3.10.2.2
author: Norman Ramsey, Joao Dias, Simon Marlow and Simon Peyton Jones
basic-deps:
  base: '>=4.3 && <4.12'
  containers: '>=0.5 && <0.6'
changelog: "# Changelog for [`hoopl` package](http://hackage.haskell.org/package/hoopl)\n\n##
  3.10.2.2 *Feb 2017*\n  This release includes non-API changes.\n\n - Use cabal builtin
  options to enable test coverage\n\n - Move up the constraints of base and containers\n\n
  - Refactor the references of the fold family functions to their equivalant foldr
  functions.\n\n - Drop the support for 7.0.1\n\n - Fix a bug that drops out dominators
  when joined DPATHs have non-shared nodes in the middle.\n\n\n## 3.10.2.1 *Dec 2015*\n
  \ This release includes only non-functional changes.\n\n - Rewrite Applicative/Monad
  instances into normal-form\n\n - Relax the upper bound constraint of base to include
  4.9\n\n - Replace `#if CABAL` macro by no CPP at all\n\n - Wrap redudant wild card
  pattens in conditional compilation \n\n - Prefix unused type variables with underscores.
  \n\n## 3.10.2.0 *Aug 2015*\n\n - Add #if CABAL macro to several hoopl source files
  such that the Cabal generated macro is not included when building in ghci\n\n -
  Change the test code (testing/*) to compare the converted graphs against the expected
  graphs in AST form \n\n - Update the cabal file to run tests and generate a test
  coverage report \n \n - Unhide gSplice of Hoopl.Graph\n\n - Expose Showing of Hoopl.Show\n\n
  - Some fixes of testing\n\n## 3.10.1.0 *Apr 2015*\n\n - Re-export runWithFuel from
  Compiler.Hoopl.\n\n - Remove redundant constraints\n\n## 3.10.0.2  *Dec 2014*\n\n
  - Add support for `base-4.8.0.0` package version\n\n - Mark a few modules as Safe
  rather than Trustworthy\n\n## 3.10.0.1  *Mar 2014*\n\n  - Remove UTF8 character
  from hoopl.cabal to workaround issue\n    in GHC 7.8.1's build system\n\n## 3.10.0.0
  \ *Mar 2014*\n\n  - Bundled with GHC 7.8.1\n\n  - Define `Functor` and `Applicative`
  instances for\n     - `SimpleUniqueMonad`\n     - `CheckingFuelMonad`\n     - `InfiniteFuelMonad`\n
  \    - `UniqueMonadT`\n     - `VM` (not exported)\n\n  - Update to Cabal format
  1.10\n\n## 3.9.0.0\n\nLots of API changes; mainly a new API for working with Blocks\n\n###
  Summary of refactorings:\n\n   - `Compiler.Hoopl.Block` contains the `Block` datatype
  and all the\n     operations on Blocks.  It seemed like a good idea to collect all\n
  \    this stuff together in one place.\n\n   - `Compiler.Hoopl.Graph` now has the
  operations on Graphs.\n\n   - `Compiler.Hoopl.Util` and `Compiler.Hoopl.GraphUtil`
  are no more; their\n     contents have been moved to other homes.  (and a bit of
  duplicated\n     functionality has been removed).\n\n   - I removed the newtypes
  around `Unique` and `Label`, these are now just\n     type synonyms.  The newtype
  wrappers were costing some performance in\n     GHC, because in cases like `mapToList`
  the newtype isn't optimised away.\n\n     This change might be controversial.  Feel
  free to complain.\n\n### Other changes:\n\n   - Optimisations to the Dataflow algorithms.
  \ I'm not actually using\n     this implementation of Dataflow in GHC any more,
  instead I have a\n     local copy specialised to our monad, for speed.  Nevertheless
  I've\n     put some of the optimisations I'm using in the GHC version into the\n
  \    generic library version too.\n\n### Summary of API changes:\n\n#### Added\n\n
  \ - `IsMap(mapInsertWith, mapFromListWith)`\n\n  - `mapGraphBlocks`\n    (was previously
  called `graphMapBlocks`, and not exported)\n\n  - `mapBlock'`\n    (strict version
  of `mapBlock`)\n\n  - New API for working with Blocks:\n\n    ```haskell\n      --
  ** Predicates on Blocks\n    , isEmptyBlock\n \n      -- ** Constructing blocks\n
  \   , emptyBlock, blockCons, blockSnoc\n    , blockJoinHead, blockJoinTail, blockJoin,
  blockJoinAny\n    , blockAppend\n \n      -- ** Deconstructing blocks\n    , firstNode,
  lastNode, endNodes\n    , blockSplitHead, blockSplitTail, blockSplit, blockSplitAny\n
  \n      -- ** Modifying blocks\n    , replaceFirstNode, replaceLastNode\n \n      --
  ** Converting to and from lists\n    , blockToList, blockFromList\n \n      -- **
  Maps and folds\n    , mapBlock, mapBlock', mapBlock3'\n    , foldBlockNodesF, foldBlockNodesF3\n
  \   , foldBlockNodesB, foldBlockNodesB3\n    ```\n\n#### Removed\n\n  - `mapMaybeO`,
  `mapMaybeC`\n    (no need: we have `Functor` instances)\n\n  - Block constructors
  are no longer exported\n    (use the block API instead)\n\n  - `blockToNodeList`,
  `blockToNodeList'`, `blockToNodeList''`, `blockToNodeList'''`\n    (use the block
  API instead)\n\n  - `tfFoldBlock`, `ScottBlock`, `scottFoldBlock`, `fbnf3`,\n    `BlockResult(..)`,
  `lookupBlock`,\n    (I don't know what any of these are for, if they're still important\n
  \   we could reinstate)\n\n#### Changed\n\n  - Compiler.Hoopl.GHC is now Compiler.Hoopl.Internals
  and exports some\n    more stuff.\n\n  - Label is not a newtype; type Label = Unique\n
  \ - Unique is not a newtype: type Unique = Int\n    (these newtypes were adding
  overhead)\n\n  - blockMapNodes3 is now mapBlock3'\n\n  - Lots of internal refactoring
  and tidying up\n\n## 3.8.7.4\n\n  - Re-export runWithFuel as per Justin Bailey\n\n##
  3.8.7.3\n\n  - Uploaded to Hackage by Ian Lynagh; appears to contain updates\n    that
  use Safe Haskell if GHC >= 7.2 (thanks David Terei)\n\n## 3.8.7.2\n\n  - Version
  changed with no record of update; never uploaded to Hackage\n\n## 3.8.7.1\n\n  -
  Eliminate warning about nonexhaustive pattern match (thanks Edward Yang)\n\n## 3.8.7.0\n\n
  \ - Works with GHC 7 (thanks Edward Yang)\n  - `cabal sdist` now sort of works (and
  is added to validate)\n\n## 3.8.6.0\n\n  - Matches the camera-ready Haskell'10 paper\n\n##
  3.8.1.0\n\n  - Major reorganization per simonpj visit to Tufts 20 April 2010\n    Collections\n\n##
  3.7.13.1\n\n  - Added function to fold over nodes in graph.\n\n## 3.7.13.0\n\n  -
  Pointed type replaces WithTop and WithBot, which are now synonyms.\n\n## 3.7.12.3\n\n###
  Interface changes\n\nThe type of AGraph is now abstract.\nIt is now recommended
  to create AGraphs with just three functions:\n\n    <*>          concatenation\n
  \   |*><*|       splicing at a closed point\n    addBlocks    add C/C blocks out
  of line\n\nThere are new utility functions in modules Util and XUtil, all\nexported
  by Compiler.Hoopl.  Here's a selection:\n\n    -- | A utility function so that a
  transfer function for a first\n    -- node can be given just a fact; we handle the
  lookup.  This\n    -- function is planned to be made obsolete by changes in the
  dataflow\n    -- interface.\n    firstXfer :: Edges n => (n C O -> f -> f) -> (n
  C O -> FactBase f -> f)\n    firstXfer xfer n fb = xfer n $ fromJust $ lookupFact
  fb $ entryLabel n\n\n    -- | This utility function handles a common case in which
  a transfer function\n    -- produces a single fact out of a last node, which is
  then distributed\n    -- over the outgoing edges.\n    distributeXfer :: Edges n
  => (n O C -> f -> f) -> (n O C -> f -> FactBase f)\n    distributeXfer xfer n f
  = mkFactBase [ (l, xfer n f) | l <- successors n ]\n\n    -- | This utility function
  handles a common case in which a transfer function\n    -- for a last node takes
  the incoming fact unchanged and simply distributes\n    -- that fact over the outgoing
  edges.\n    distributeFact :: Edges n => n O C -> f -> FactBase f\n\n    -- | Function
  'graphMapBlocks' enables a change of representation of blocks,\n    -- nodes, or
  both.  It lifts a polymorphic block transform into a polymorphic\n    -- graph transform.
  \ When the block representation stabilizes, a similar\n    -- function should be
  provided for blocks.\n    graphMapBlocks :: forall block n block' n' e x .\n                      (forall
  e x . block n e x -> block' n' e x)\n                   -> (Graph' block n e x ->
  Graph' block' n' e x)\n\n    postorder_dfs :: Edges (block n) => Graph' block n
  O x -> [block n C C]\n\nThere are quite a few other variations related to depth-first
  traversal.\n\n\nThere is a new module Compiler.Hoopl.Pointed, which uses GADTs to\nenable
  you to add a Top or Bot element to a lattice, or both, all\nusing the same type.
  \ (Types `WithBot` and `WithTop` in XUtil,\nexported by Compiler.Hoopl, do similar
  jobs, but I think they are\ninferior.  Your opinion is solicited.)\n\nI added a
  function showGraph to print Graphs.  Right now it requires a\npolymorphic node-showing
  function as argument. When we change the\nBlock representation we may get enough
  static type information that we\ncan simply have an instance declaration for\n\n
  \   instance (Show n C O, Show n O O, Show n O C) => Show (Graph n e x)\n\nAt present,
  I don't see how to achieve such a declaration.\n\nJohn added new functions `debugFwdJoins`
  and `debugBwdJoins` to extend\npasses with debugging information.\n\nWe added primed
  versions of the analyzeAndRewrite functions, which\noperate on Graph, not Body.
  \ Recommended, at least for first-timers.\n\nNot all maps keyed by Label are FactBases,
  so there is now a new set\nof names of functions to manipulate LabelMaps that do
  not contain\ndataflow facts.\n\n### Implementation changes\n\nSplit pass and rewrite-function
  combinators into Compiler.Hoopl.Combinators.\n\nChanged order of blocks for forward
  and backward analysis.\nThese changes have not been tested, because we don't have
  a true\nregression suite yet.\n\nGraph and Body types now have more polymorphic
  variants Graph' and Body'.\n\nLots of experiments with zippers.\n\n### Changes ahead\n\nForwardTransfer
  will become an abstract type, and clients will have\ntwo ways to create ForwardTransfers:
  as now, with a single,\npolymorphic transfer function; or with a triple of monomorphic\ntransfer
  functions.  The implementation will use monomorphic\nfunctions, which will enable
  more useful combinators on passes,\nincluding adding more debugging information
  and enabling us to combine\npasses.\n\nPerhaps we should provide splicing and `addBlocks`
  on Graph?\n\nChange of block representation to have three monomorphic unit\nconstructors
  and one polymorphic concatenation constructor.\n\nGraph body to be represented by
  a finite map; add functions to check\nfor duplicate labels.\n\n## 3.7.12.1\n\n  -
  Added a bunch of zipper experiments.\n  - Existing clients should not be affected.\n\n##
  3.7.12.0\n\n  - More expressive debugging support\n  - retract arfGraph and normalization;
  export analyzeAndRewriterFwd'\n\n## 3.7.11.1\n\n  - Expose arfGraph and normalization
  functions\n\n## 3.7.11.0\n\n  - Debugging support\n\n## 3.7.8.0\n\n  - Rationalized
  AGraph splicing functions.\n\n## 3.7.7.0\n\n  - Restrict clients so they see much
  less, including hiding\n    the value constructors for Body.\n"
changelog-type: markdown
description: "The `hoopl` Package  [![Hackage](https://img.shields.io/hackage/v/hoopl.svg)](https://hackage.haskell.org/package/hoopl)
  [![Build Status](https://travis-ci.org/haskell/hoopl.svg)](https://travis-ci.org/haskell/hoopl)\n===================\n\n##
  Hoopl: A Higher-Order OPtimization Library\n\nAPI documentation can be found on\n[Hackage](https://hackage.haskell.org/package/hoopl).
  \ For detailed explanation\nof the library design see paper [\"Hoopl: A Modular,
  Reusable Library for\nDataflow Analysis and\nTransformation\"](http://research.microsoft.com/en-us/um/people/simonpj/Papers/c--/hoopl-haskell10.pdf)\n\n|
  Directory      | Contents\n| -------------- | ---------\n| `src/`         | The
  current official sources to the Cabal package\n| `testing/`     | Tests, including
  a sample client.  See [`testing/README`](testing/README)\n\n### Development Notes\n\n####
  Building and testing\n\nTo build the library run:\n\n    cabal configure\n    cabal
  build\n    cabal install --enable-documentation\n\nTo run the tests in the `testing/`
  folder run:\n\n    cabal configure --enable-tests\n    cabal test\n\nTo run the
  tests with the test coverage report run:\n\n    cabal configure --enable-tests --enable-coverage\n
  \   cabal test\n\nYou'll need a Haskell Platform, which should include appropriate\nversions
  of Cabal and GHC.\n\n#### Coding style\n\nPlease follow Johan Tibell's\n[Haskell
  Style Guide](https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md)\nfor
  all new/modified code.\n\n### Checklist for Making Releases\n\nIn order to facilitate
  GHC development's workflow, the version in [`hoopl.cabal`](hoopl.cabal) is to be
  bumped as soon as a change requires a respective version bump (according to the
  PVP) relative to the last released `hoopl` version.\n\n1. Make sure `hoopl` passes
  Travis for all GHC versions in the build-matrix\n2. Update Changelog (& `git commit`)\n3.
  Generate source tarball via `cabal sdist` and upload a candidate to Hackage (see
  note below), and inspect the result. \n4. If everything checks out, make an annotated
  and GPG-signed Git release tag: `git tag -a -s v${VER} -m \"hoopl ${VER}\"`\n5.
  Publish (there's a button for that on Hackage) the package candidate\n6. Work on
  next release\n\nNote: To upload to Hackage,\n\n    cabal sdist\n    cabal upload
  dist/hoopl-*.tar.gz\n\nHowever, it's recommended use the Hackage feature for\n[uploading
  a candidate](http://hackage.haskell.org/packages/candidates/upload).\n"
description-type: markdown
hash: ddd36c30f166b179173502ef6f8179f96f59671442060b61f6716ff825f9d748
homepage: https://github.com/haskell/hoopl
latest: 3.10.2.2
license-name: BSD-3-Clause
maintainer: Ning Wang <email@ningwang.org>, Michal Terepeta <michal.terepeta@gmail.com>,
  Norman Ramsey <nr@cs.tufts.edu>
synopsis: A library to support dataflow analysis and optimization
test-bench-deps:
  base: '>=4.3 && <4.12'
  containers: '>=0.5 && <0.6'
  filepath: '>=0'
  mtl: '>=2.1.3.1'
  parsec: '>=3.1.7'
  test-framework: <0.9
  test-framework-hunit: <0.4
