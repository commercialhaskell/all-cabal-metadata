all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.3.0
author: sorki
basic-deps:
  attoparsec: '>=0'
  base: '>=4.12 && <5'
  bytestring: '>=0'
  containers: '>=0'
  data-default-class: '>=0'
  exceptions: '>=0'
  hocd: '>=0'
  mtl: '>=0'
  network: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: |+
  # Version [0.1.3.0](https://github.com/DistRap/hocd/compare/0.1.2.0...0.1.3.0) (2024-01-18)

  * Add `registers`, `readReg`, `writeReg` commands
  * Add `raw` command (escape hatch)

  # Version [0.1.2.0](https://github.com/DistRap/hocd/compare/0.1.1.1...0.1.2.0) (2024-01-03)

  * Add execution control commands
    * `reset`
    * `resetHalt`
    * `resetHaltInit`
    * `resume`
    * `resumeAt`
    * `step`
    * `stepTo`

  * Add `version` query

  # Version [0.1.1.1](https://github.com/DistRap/hocd/compare/0.1.1.0...0.1.1.1) (2023-12-27)

  * Export `runOCDConfig`

  # Version [0.1.1.0](https://github.com/DistRap/hocd/compare/0.1.0.0...0.1.1.0) (2023-12-27)

  * Transformers boilerplate

  # Version [0.1.0.0](https://github.com/DistRap/hocd/compare/6a16c2d...0.1.0.0) (2023-12-26)

  * Initial release

  ---

  `hocd` uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org

changelog-type: markdown
description: |
  [![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/DistRap/hocd/ci.yaml?branch=main)](https://github.com/DistRap/hocd/actions/workflows/ci.yaml)
  [![Hackage version](https://img.shields.io/hackage/v/hocd.svg?color=success)](https://hackage.haskell.org/package/hocd)
  [![Dependencies](https://img.shields.io/hackage-deps/v/hocd?label=Dependencies)](https://packdeps.haskellers.com/feed?needle=hocd)

  # hocd

  [OpenOCD] RPC service client.

  [OpenOCD]: https://openocd.org/

  ## API

  See Haddocks or [HOCD.Monad]

  [HOCD.Monad]: ./src/HOCD/Monad.hs

  ## Example

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE TypeApplications #-}

  import Data.Word (Word32)
  import HOCD

  main :: IO ()
  main = runOCD example >>= print

  -- | For STM32G474
  example
    :: MonadOCD m
    => m ([Word32], Word32, Word32)
  example = do
    -- Note that halting a target is not required
    -- for writing or reading memory, only for reading
    -- CPU registers
    halt'

    -- Read pc CPU register
    pc <- readReg $ regName "pc"
    -- Write back same value
    writeReg @Word32 (regName "pc") pc

    -- Read RCC.CR register
    rccCr <- readMemCount @Word32 0x40021000 2

    -- Read and increment GPIOA.ODR register
    let gpioaOdr = 0x48000014
    odr <- readMem32 gpioaOdr
    writeMem gpioaOdr [odr+1]
    r <- readMem32 gpioaOdr

    resume

    pure (rccCr, r, pc)
  ```

  This example is runnable from git repository using:

  ```sh
  openocd -f nucleo.cfg
  cabal run hocd-readme
  ```

  ## Executable

  `hocd-read-mem` can be used to read a single or multiple
  addresses:

  ```sh
  cabal run hocd-read-mem -- 0x40021000 0x48000014
  ```

  Outputs:

  ```
  0x40021000: 0x3030500
  0x48000014: 0x9
  ```
description-type: markdown
hash: d2bac8fa1886f9df2f7be96e2b43a88fe3644a807ae65660e52bc76920c5bb58
homepage: https://github.com/DistRap/hocd
latest: 0.1.3.0
license-name: BSD-3-Clause
maintainer: srk@48.io
synopsis: OpenOCD Haskell interface
test-bench-deps:
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  hocd: '>=0'
  hspec: '>=0'
  raw-strings-qq: '>=0'
