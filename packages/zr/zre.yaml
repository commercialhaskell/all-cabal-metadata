all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.5.1
author: Richard Marko
basic-deps:
  async: '>=0'
  attoparsec: ^>=0.14
  base: '>=4 && <5'
  binary: '>=0.8'
  bytestring: '>=0'
  cereal: '>=0'
  containers: '>=0'
  data-default: '>=0'
  directory: '>=0'
  filepath: '>=0'
  lifted-async: '>=0'
  lifted-base: '>=0'
  monad-control: '>=0'
  mtl: '>=0'
  network: ^>=3.1
  network-bsd: ^>=2.8
  network-info: ^>=0.2
  network-multicast: ^>=0.3
  optparse-applicative: '>=0'
  process: '>=0'
  random: '>=0'
  repline: ^>=0.4
  sockaddr: '>=0'
  stm: '>=0'
  text: '>=0'
  time: '>=0'
  transformers-base: '>=0'
  uuid: '>=0'
  zeromq4-haskell: ^>=0.8
  zre: '>=0'
changelog: |+
  # Version [0.1.5.1](https://github.com/sorki/haskell-zre/compare/0.1.5.0...0.1.5.1) (2023-11-28)

  * Fix missing `void` import for GHC9.6.3
  * Allow `binary >= 0.8`

  # Version [0.1.5.0](https://github.com/sorki/haskell-zre/compare/0.1.4.0...0.1.5.0) (2022-02-28)

  * Use `attoparsec 0.14`

  # Version [0.1.4.0](https://github.com/sorki/haskell-zre/compare/0.1.3.0...0.1.4.0) (2020-07-19)

  * Changed `zfail` type from `String -> ZRE ()` to `String -> ZRE a`
  * Handles errors in user application correctly instead of silently ignoring them
  * Fixed incorrect time periods for pinger

  # Version [0.1.3.0](https://github.com/sorki/haskell-zre/compare/0.1.2.0...0.1.3.0) (2020-07-14)

  * Cabal fixes
    * Relaxed base bound
    * `cabal-version: 2.0`

  # Version [0.1.2.0](https://github.com/sorki/haskell-zre/compare/0.1.1.0...0.1.2.0) (2020-07-10)

  * Added
    * `zreChanWith` - principled variant of `zreChan` accepting runner function
    * `runZreEnvConfig` - runner utilizing config files only

  # Version [0.1.1.0](https://github.com/sorki/haskell-zre/compare/0.1.0.2...0.1.1.0) (2020-06-17)

  * Changelog started. Previous release was `0.1.0.2`.

  * Breaking changes:
    * `zgossip_server` executable is renamed to `zgossip-server`
    * Removed `runZreOpts` in favor of `runZreParse` which now accepts another `optparse-applicative` parser
    * Groups now use `newtype Group` instead of plain String(s)
      and need to be constructed with `mkGroup`
    * `zrecvShouts` now requires `Group` and filters the message for this group only
    * Command line options changed:
      * `iface` renamed to `interface`
      * `mcast` renamed to `multicast-group`
      * Added `quiet-ping-rate`
    * No longer ships with `stack.yaml`

  * Additions
    * Experimental `Network.ZRE.Chan` for working with typed channels

  * Minor:
    * Spots new `examples` flag for building with examples (disabled by default)

  ---

  `zre` uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org

changelog-type: markdown
description: |
  # zre

  [![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/sorki/haskell-zre/ci.yaml?branch=master)](https://github.com/sorki/haskell-zre/actions/workflows/ci.yaml)
  [![Hackage version](https://img.shields.io/hackage/v/zre.svg?color=success)](https://hackage.haskell.org/package/zre)
  [![Dependencies](https://img.shields.io/hackage-deps/v/zre?label=Dependencies)](https://packdeps.haskellers.com/feed?needle=zre)

  ZRE protocol implementation https://rfc.zeromq.org/spec:36/ZRE/

  Peer-to-peer local area networking with reliable group messaging
  and automatic peer discovery.

  ## Usage

  Dependencies:

  ```
  zeromq4
  ```

  Clone and test

  ```sh
  git clone https://github.com/sorki/haskell-zre/
  cd haskell-zre
  nix-build
  ./result/bin/zre
  # in another terminal or networked computer
  ./result/bin/zre
  ```

  Two zre peers should find each other and be able to send message between each other.
  Firewall needs to allow traffic on UDP port 5670 and TCP port range 41000-41100.
  Application picks random port from this range and advertises it to network.

  ## Applications

  Few applications are provided to get you started:

   - zre - interact and dump events
   - zrecat <group> - cat messages for group

  These can be installed locally using `pkgs.haskellPackage.zre`.

  Try running multiple copies of `zre` and `zrecat` on
  the same computer or computers on the local network

  ```sh
  zre
  # another terminal
  zrecat test
  # now in original terminal you can join testgroup with
  > /join test
  # or send messages to it
  > /shout test msg
  ```

  Send uptime periodically to uptime group

  ```sh
  ( while true; do uptime; sleep 1; done ) | zrecat uptime
  ```

  Cat file to group

  ```sh
  cat /etc/os-release | zrecat test
  ```

  Interact manually

  ```sh
  zre
  # in zre shell following commands are supported:
  > /join time
  > /shout time test!
  > /leave time
  > /join uptime
  > /whisper <uuid> message
  ```

  ## ZGossip

  Implementation of gossip protocol is included in form of key value TTL server.
  This allows connecting peers from different networks (or subnets) not reachable via multicast
  beacon. This service requires TCP port 31337 and can be started with `zgossip-server` binary.

  Run server

  ```sh
  zgossip_server
  ```

  Pass gossip endpoint to apps with

  ```sh
  zre -g <gossip_ip>:31337
  ```

  ## Configuration

  ZRE applications using `runZre` will automatically try to load configuration
  file if `ZRECFG` environment variable points to it. See `zre.conf` for configuration
  example::

  ```sh
  ZRECFG=./zre.conf zrecat test
  ```

  To be able to use one config for multiple apps and still be able to distinguish between
  them you can also set `ZRENAME` environment variable which overrides name
  from config or default config if `ZRECFG` is not used::

  ```sh
  ZRENAME=zrenode1 zrecat test
  ```

  ## Demos

  * https://asciinema.org/a/106340
description-type: markdown
hash: 6617f07d81aec1b4aedfce713deb4cf893ede7618d75d2f274c774e57861161e
homepage: https://github.com/sorki/haskell-zre/
latest: 0.1.5.1
license-name: BSD-3-Clause
maintainer: srk@48.io
synopsis: ZRE protocol implementation
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  quickcheck-instances: '>=0'
  uuid: '>=0'
  zre: '>=0'
