all-versions:
- 0.1.0
- 0.2.0
author: Vitalii Guzeev <viviag@yandex.ru>
basic-deps:
  aeson: '>=0'
  ansi-terminal: '>=0'
  base: '>=4.7 && <5'
  changelogged: '>=0'
  either: '>=0'
  exceptions: '>=0'
  foldl: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  system-filepath: '>=0'
  text: '>=0'
  turtle: '>=1.5.0'
  unordered-containers: '>=0'
  vector: '>=0'
  yaml: '>=0'
changelog: |
  0.2.0
  ---

  * Major changes
    - Redesign configuration format (see [#76](https://github.com/GetShopTV/changelogged/pull/76));
      - universal changelog configuration;
      - separate version files from watched files (those can be different);
      - ignored files;
      - add optional version `branch` config (for Git Flow projects where development and feature branches might not have version tags associated with them);
      - pretty printing config and git info summary on start;
      - fix PR and commit links for projects with `git@github.com:` remote url;
    - Improve CLI (see [#64](https://github.com/GetShopTV/changelogged/pull/64));

  * Minor changes
    - Enable Travis CI (see [#65](https://github.com/GetShopTV/changelogged/pull/65));
    - Move code from Main to Changelogged.Main (see [`1194b20`](https://github.com/GetShopTV/changelogged/commit/1194b20));
    - Ignore tag at `HEAD` (see [`35cae7c`](https://github.com/GetShopTV/changelogged/commit/35cae7c));

  * Fixes
    - Remove orphan instances (see [`c9ffce3`](https://github.com/GetShopTV/changelogged/commit/c9ffce3));
    - Add images to `extra-source-files` and improve description (see [`b4a2efb`](https://github.com/GetShopTV/changelogged/commit/b4a2efb));
    - Fix image paths in README (see [`6028f57`](https://github.com/GetShopTV/changelogged/commit/6028f57));
    - Track changes for `HEAD` instead of origin/master (see [`0f5c839`](https://github.com/GetShopTV/changelogged/commit/0f5c839));
    - Use `--abbrev=0` to get clear tag name (see [`4f50f22`](https://github.com/GetShopTV/changelogged/commit/4f50f22));
    - Fix version bump to just use `version_pattern` (see [`976633f`](https://github.com/GetShopTV/changelogged/commit/976633f));
changelog-type: markdown
description: "# changelogged\n\n[![Hackage](https://img.shields.io/hackage/v/changelogged.svg)](http://hackage.haskell.org/package/changelogged)\n[![Build
  Status](https://travis-ci.org/GetShopTV/changelogged.svg?branch=master)](https://travis-ci.org/GetShopTV/changelogged)\n\n##
  What and how to?\n\n### Purpose\nThis is the tool for tracking project history and
  release documentation.\nIt guides developer through writing changelogs are bump
  version in project files.\nWith proper usage it guarantees that every pull request
  or commit from git history is mentioned in project changelogs and that versions
  all over the project are up to date.\nIt can also write changelogs based on git
  history and infer new version from changelog if it contains rubrication by level
  of changes.\n\n### Configuration file\n[example](changelogged.yaml.skel)\n```\nchangelogs:\n
  \ main:\n    # You can simply use arrays here.\n    path: \"CHANGELOG.md\"\n  api:\n
  \   path: \"API_CHANGELOG.md\"\n    indicator:\n      path: \"file.json\"\n      variable:
  \"version\"\nversioned:\n  main:\n  - path: \"file.cabal\"\n    variable: \"version\"\n
  \ - path: \"file2.cabal\"\n    variable: \"version\"\n  - path: \"file3.hs\"\n    variable:
  \"version\"\n  - path: \"file4.json\"\n    variable: \"version\"\n  api:\n  - path:
  \"file.hs\"\n    variable: \"apiVersion\"\n  - path: \"file.json\"\n    variable:
  \"version\"\n```\n\nConfig is optional.\nWith no config tool will try to check file
  named `ChangeLog.md` as far as it's part of Stack project template and bump versions
  in `package.yaml` files all over the project.\n\nConfig (named `changelogged.yaml`)
  is split in two sections.\n\n`changelogs` record contains records about each changelog
  to track.\nEach changelog has a key - key of the record. Two keys are reserved -
  `main` and `api` for common project changelog and API changelog correspondingly.\nFor
  each key there is a value. `path` is path to changelog from directory where you
  intent to run `changelogged`. `indicator` is optional.\n`indicator` is used e.g.
  for API changelogs - it's file such that changing this file is equivalent to change
  API. This record contains `path` to file and `variable` where version is stored.\nCurrent
  version for parts tracked by local changelogs is known from `indicator`. That's
  why `variable` key persists. General version of project is known from latest git
  tag.\n\n`versioned` section contains same key-names as `changelogs`. Each key contains
  array of files with `path` to file and `variable` where version is stored.\n\n###
  Features reference\n\n#### Help message\n\n```\nchangelogged --help\n```\n\n```\nchangelogged
  - Changelog Manager for Git Projects\n\nUsage: changelogged [--format FORMAT] [--update-changelog]
  [--bump-versions]\n\nAvailable options:\n  -h,--help                Show this help
  text\n  --format FORMAT          Missing entries report format. FORMAT can be 'simple'\n
  \                          or 'suggest'. (default: simple)\n  --update-changelog
  \      Prepend missing entries to changelogs. Available with\n                           --format=suggest.\n
  \ --bump-versions          Bump versions according to change level.\n  --level CHANGE_LEVEL
  \    Level of changes (for packages). CHANGE_LEVEL can be\n                           'app',
  'major', 'minor', 'fix' or 'doc'.\n  --api-level CHANGE_LEVEL Level of changes (for
  API). CHANGE_LEVEL can be\n                           'app', 'major', 'minor', 'fix'
  or 'doc'.\n  --from-bc                Check changelogs for the entire history of
  the\n                           project.\n  --force                  Bump versions
  even when changelogs are outdated.\n  --no-check               Do not check changelogs.\n```\n\nSee
  examples [below](#guiding-examples)\n\n#### Checking changelogs\nThis is default
  feature. Changelogged will output all missing pull requests and commits with their
  messages.\nIt ignores commits and pull requests affecting only `.md` files.\n\nYou
  can skip it with `-c` option or ignore results with `-f` option. Also you can check
  changelog from the first commit with `-e`.\n\n#### Bumping versions\nThis is also
  default feature. In default way if changelogs are up to day changelogged will bump
  versions all over the project.\n\nYou can variously combine changelog checking and
  bumping versions. For example you may just want to be sure changelogs are up to
  date. There is `-C` option for that.\nBy default new version is inferred from changelog.
  It will work if you have some of `* App...` `* Major...`, `* Minor...`, `* Fix...`,
  and `* Doc...` sections in changelog and name versions correspondingly.\nSuggested
  versioning: `app.major.minor.fix.doc`.\nOtherwise you can specify new version explicitly
  with `-l` option. It's also the only way to work with `-c` option.\n\n#### Multiple
  changelogs and subversions\nThis feature requires `changelogged.yaml`.\n\nWith `-m`
  option tool will assume there is more than one changelog and check all of them by
  keys from configuration file. Here is also subversioning from the box.\nCurrent
  version is known from indicator file and new version is known from changelog.\n\nYou
  cannot explicitly set new version for arbitrary changelog but `-W` option provides
  special checking of API changelog. And you can set new version with `-a`.\nIt's
  impossible to check only API changelog for now. See [issue](https://github.com/GetShopTV/changelogged/issues/54).\n\n####
  Writing changelogs.\n`--format suggest` provides another format for records you
  see on the screen.\nIt can be used with `-y` option to write these strings to the
  top of changelog they are relevant to.\nThis option cannot be used with `--format
  simple` which is default.\n\n### Guiding examples:\n\n#### Common run:\n```\nchangelogged
  (master):$ changelogged\n```\n![image1](images/common_run.png)\n\n#### Suggest changelog
  entries:\n```\nchangelogged (master):$ changelogged --format suggest\n```\n![image2](images/suggest.png)\n\nForce
  with no entries in changelog:\n```\nchangelogged (master):$ changelogged --format
  suggest -f\n```\n![image3](images/no_force.png)\n\nForce with explicit version:\n```\nchangelogged
  (master):$ changelogged -f -l major\n```\n![image4](images/force.png)\n\n#### Write
  suggested entries to changelog (works only with `--format suggest`)\n```\nchangelogged
  (master):$ changelogged --format suggest -y\n```\n![image5](images/suggest.png)\n```\nchangelogged
  (master):$ git diff ChangeLog.md\n```\n![image6](images/chlog_diff.png)\nIt requires
  some manual editing after. And it will not bump version immediately.\n\n#### Bump
  version infering it from changelog:\n```\nchangelogged (master):$ changelogged --format
  suggest -y\n```\n![image7](images/bump.png)\n```\nchangelogged (master):$ git diff
  ChangeLog.md\n```\n![image8](images/release.png)\n\nDo not bump even if changelogs
  are up to date\n```\nchangelogged -C\n```\n![image9](images/no_bump.png)\n\nTry
  to bump without checking changelogs. Seems that `-f` option is always preferrable.
  But it waits for use cases.\n```\nchagelogged -c\n```\n![image10](images/no_check.png)\n\n###
  Typical daily workflow to keep project and API changelogs up to date (assuming existing
  changelogged.yaml):\nSee missing entries:\n```\nchangelogged -C --format suggest
  -W\n```\nRecord these changes.\n```\nchangelogged --format suggest -W -y\n```\nAnd
  then edit changelogs manually.\n\n### Suggested simple workflow on release (for
  project with no `changelogged.yaml` and API changelog):\nSee missing entries:\n```\nchangelogged
  -C\n```\nRecord these changes:\n```\nchangelogged --format suggest -y\n```\nManually
  edit changelog\n\nBump versions:\n```\nchangelogged\n```\n_Next part is subject
  to change:_\n\nCommit files with bumped versions.\n\nRecord commit with version
  bumps:\n```\nchangelogged --format suggest -y\n```\nEdit changelog - move new entry
  under version milestone.\nNote: changes in `.md` files are ignored.\n\nCommit changelog,
  push and release.\n\n## Setting up\n\n### Requirements\nIt works with git projects
  only.\nIt was never tested on Windows. Ideally it will work if you have Git Bash
  installed.\nAs tool was designed for Haskell ecosystem first there are these extensions
  supported: `.hs`, `.cabal`, `.yaml` and `.json`. You cannot bump version in any
  other file.\nBut new extensions can be easily provided as far as changelogged aims
  to have the most wide users community. See [Add new extension](#add-new-extension)
  section. \n\n### Getting and building\nFirst of all you should go to project [Github](https://github.com/GetShopTV/changelogged)\n\nThen
  you can simply download it - there is a binary in `bin` directory. After execute
  something like `cp bin/changelogged ~/.local/bin`.\n\nOr you can clone repo and
  build it from source. You need latest [Stack](https://docs.haskellstack.org/en/stable/README/)
  installed.\nTo build run\n```\nstack install\n```\n\n## Contributing\n\n### Common\nBug
  reports and feature requests are welcome on [Github](https://github.com/GetShopTV/changelogged/issues)\n\nYou
  are free to fork project and make a pull request.\n\n### Add new extension\nYou
  may want to use this tool inside project written not in Haskell. You are very welcome.\n\nVersion
  bumping is restricted with extension of file. There is no euristic rules like \"version
  is placed in `version = `\" to have determined behaviour.\nYou may request for extension
  you want to be supported in [special issue](https://github.com/GetShopTV/changelogged/issues/35).
  It will be here ASAP.\nOr you may write it yourself.\nYou are welcome to ask about
  how in comments in that issue (or browse comments).\n"
description-type: markdown
hash: 25ef25005f3b0e2a398f1671d30ce236e8e6ea1d60b78d183fd3c335ab7a864e
homepage: https://github.com/GetShopTV/changelogged#readme
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: Vitalii Guzeev <viviag@yandex.ru>
synopsis: Changelog manager for Git projects.
test-bench-deps:
  Glob: '>=0'
  QuickCheck: '>=0'
  ansi-terminal: '>=0'
  base: '>=0'
  doctest: '>=0'
  turtle: '>=1.5.0'
  unordered-containers: '>=0'
