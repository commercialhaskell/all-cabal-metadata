homepage: https://github.com/tonyday567/chart-svg#readme
changelog-type: ''
hash: 10b8e483995d072ab0d1ce0c13ba1a659bc55790778df9f624560abbb9440e83
test-bench-deps: {}
maintainer: tonyday567@gmail.com
synopsis: Charting library targetting SVGs.
changelog: ''
basic-deps:
  reanimate: '>=1.1.1.0 && <1.2'
  numhask: ^>=0.8
  lucid: ^>=2.9
  JuicyPixels: ^>=3.3
  base: '>=4.7 && <5'
  time: ^>=1.9
  unordered-containers: ^>=0.2
  text: ^>=1.2
  Color: ^>=0.3
  chart-svg: -any
  reanimate-svg: ^>=0.13
  numhask-space: ^>=0.8
  containers: ^>=0.6
  lens: ==5.0.*
  linear: ^>=1.21
  cubicbezier: ^>=0.6
  mtl: ^>=2.2.2
  foldl: ^>=1.4
  attoparsec: ^>=0.14
  generic-lens: '>=1.2 && <3.0'
  transformers: ^>=0.5
  scientific: ^>=0.3
  tagsoup: ^>=0.14
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
author: Tony Day
latest: 0.2.3
description-type: haddock
description: |-
  This package provides a charting library targetting SVG as the rendered output.

  == Usage

  >>> import Chart
  >>> :set -XOverloadedLabels
  >>>let xs = fmap (fmap (uncurry Point)) [[(0.0, 1.0), (1.0, 1.0), (2.0, 5.0)], [(0.0, 0.0), (3.2, 3.0)], [(0.5, 4.0), (0.5, 0)]] :: [[Point Double]]
  >>> let anns = zipWith (\w c -> LineA (LineStyle w c Nothing Nothing Nothing Nothing)) [0.015, 0.03, 0.01] palette1_
  >>> let lineExample = mempty & (#chartList .~ zipWith Chart anns (fmap (fmap PointXY) xs)) & #hudOptions .~ defaultHudOptions & #svgOptions .~ defaultSvgOptions :: ChartSvg

  > writeChartSvg "other/line.svg" lineExample

  ![main example](docs/other/lines.svg)

  See "Chart" for a broad overview of concepts, and "Chart.Examples" for a variety of practical examples.
license-name: BSD-3-Clause
