homepage: https://github.com/tonyday567/chart-svg#readme
changelog-type: ''
hash: c4c76f8c8a2afba2046fe6b01f2e7be429f88984641e616b90f44d3e7757927e
test-bench-deps:
  bytestring: '>=0.11.3 && <0.13'
  flatparse: '>=0.4 && <0.6'
  base: '>=4.7 && <5'
  tasty-golden: ^>=2.3.1.1
  chart-svg: -any
  tree-diff: '>=0.3 && <0.4'
  tasty: '>=1.2 && <1.5'
maintainer: tonyday567@gmail.com
synopsis: Charting library targetting SVGs.
changelog: ''
basic-deps:
  optics-core: ^>=0.4
  numhask: ^>=0.11
  bytestring: '>=0.11.3 && <0.13'
  string-interpolate: ^>=0.3
  flatparse: '>=0.4 && <0.6'
  base: '>=4.7 && <5'
  formatn: '>=0.3 && <0.4'
  time: '>=1.9 && <2'
  text: '>=1.2 && <2.1'
  Color: ^>=0.3
  adjunctions: ^>=4.4
  numhask-space: ^>=0.11
  tree-diff: '>=0.3 && <0.4'
  containers: ^>=0.6
  cubicbezier: ^>=0.6
  mtl: '>=2.2.2 && <2.4'
  foldl: ^>=1.4
  attoparsec: '>=0.13.2 && <0.15'
  random: ^>=1.2.1
  numhask-array: ^>=0.11
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
- 0.4.1.0
author: Tony Day
latest: 0.4.1.0
description-type: haddock
description: |-
  This package provides a charting library targetting SVG as the rendered output.

  == Usage

  >>> :set -XOverloadedLabels
  >>> :set -XOverloadedStrings
  >>> import Chart
  >>> import Optics.Core
  >>> let lines = [[Point 0.0 1.0, Point 1.0 1.0, Point 2.0 5.0],[Point 0.0 0.0, Point 2.8 3.0],[Point 0.5 4.0, Point 0.5 0]]
  >>> let styles = (\c -> defaultLineStyle & #color .~ palette1 c & #size .~ 0.015) <$> [0..2]
  >>> let cs = zipWith (\s x -> LineChart s [x]) styles lines
  >>> let lineExample = mempty & #charts .~ named "line" cs & #hudOptions .~ defaultHudOptions :: ChartOptions
  >>> writeChartOptions "other/usage.svg" lineExample

  ![usage example](docs/other/usage.svg)

  See "Chart" for a broad overview of concepts, and "Chart.Examples" for practical examples.
license-name: BSD-3-Clause
