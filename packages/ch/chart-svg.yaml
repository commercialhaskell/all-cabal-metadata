homepage: https://github.com/tonyday567/chart-svg#readme
changelog-type: ''
hash: 518958258764d01f660981c1972ca64d3a184f0ed606941b599f7d2e64f702d6
test-bench-deps: {}
maintainer: tonyday567@gmail.com
synopsis: Charting library targetting SVGs.
changelog: ''
basic-deps:
  optics-core: ^>=0.4
  numhask: ^>=0.10
  lucid: ^>=2.9
  base: '>=4.7 && <5'
  formatn: ^>=0.2
  time: ^>=1.9
  text: ^>=1.2
  Color: ^>=0.3
  adjunctions: ^>=4.4
  numhask-space: ^>=0.10
  containers: ^>=0.6
  cubicbezier: ^>=0.6
  mtl: ^>=2.2.2
  foldl: ^>=1.4
  attoparsec: '>=0.13.2 && <0.15'
  transformers: ^>=0.5
  random: ^>=1.2.1
  scientific: ^>=0.3
  numhask-array: ^>=0.10
  tagsoup: ^>=0.14
  neat-interpolation: ^>=0.5.1
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.3.0
author: Tony Day
latest: 0.3.0
description-type: haddock
description: |-
  This package provides a charting library targetting SVG as the rendered output.

  == Usage

  >>> :set -XOverloadedLabels
  >>> :set -XOverloadedStrings
  >>> import Chart
  >>> import Optics.Core
  >>> let lines = [[Point 0.0 1.0, Point 1.0 1.0, Point 2.0 5.0],[Point 0.0 0.0, Point 2.8 3.0],[Point 0.5 4.0, Point 0.5 0]]
  >>> let styles = (\c -> defaultLineStyle & #color .~ palette1 c & #size .~ 0.015) <$> [0..2]
  >>> let cs = zipWith (\s x -> LineChart s [x]) styles lines
  >>> let lineExample = mempty & #charts .~ named "line" cs & #hudOptions .~ defaultHudOptions :: ChartSvg
  >>> writeChartSvg "other/usage.svg" lineExample

  ![usage example](docs/other/usage.svg)

  See "Chart" for a broad overview of concepts, and "Chart.Examples" for practical examples.
license-name: BSD-3-Clause
