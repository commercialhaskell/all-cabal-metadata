all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.2
- 0.4.0
author: Hong Minhee
basic-deps:
  base: '>=4.7 && <5'
  checkmate: '>=0'
  containers: '>=0.5.7.1 && <0.6.0.0'
  diff-parse: '>=0.2.1 && <0.3.0'
  directory: '>=1.3 && <1.4'
  filepath: '>=1.4.1.1 && <2.0.0'
  github: '>=0.19 && <0.20'
  megaparsec: '>=6.5 && <6.6'
  monad-parallel: '>=0.7.2.2 && <0.8.0.0'
  optparse-applicative: '>=0.13.2.0 && <0.15.0.0'
  process: '>=1.6.1.0 && <1.7.0.0'
  text: '>=1 && <2'
changelog: |
  Checkmate changelog
  ===================

  Version 0.4.0
  -------------

  Released on September 1, 2018.

   -  Became internally independent from the [range] library.
   -  Became to use GHC 8.4 internally.
   -  The officially distributed executable binaries for Linux became
      independent from [glibc] again, and statically linked to [musl] instead.

  [range]: https://hackage.haskell.org/package/range
  [musl]: https://www.musl-libc.org/


  Version 0.3.3
  -------------

  Released on May 16, 2018.

   -  The officially distributed executable binaries for Linux became
      dependent on [glibc].

   -  Fixed a bug that it had failed to scan if any file in a change set is
      deleted.

  [glibc]: https://www.gnu.org/software/libc/


  Version 0.3.2
  -------------

  Released on November 4, 2017.

   -  Relicensed from GPLv3+ to [AGPLv3][]+ since [diff-parse][] library that
      Checkmate depends on has been licensed under AGPLv3.

   -  Fixed a bug that the diff parser had failed with a result of `endOfInput`
      when the input diff contains file renames.  It was a bug of [diff-parse][]
      library, and a [patch](https://github.com/mulby/diff-parse/pull/10) was
      needed to fix this.

  [AGPLv3]: https://www.gnu.org/licenses/agpl-3.0.html
  [diff-parse]: https://github.com/mulby/diff-parse


  Version 0.3.1
  -------------

  Released on November 3, 2017.

   -  Fixed a bug that `checkmate github-travis` and `checkmate github-circle`
      commands were prone to reach rate limit of GitHub API due to unauthenticated
      request for getting metadata of the pull request.


  Version 0.3.0
  -------------

  Released on October 21, 2017.

  ### Frontend

   -  Added a new filename *.check* besides *CHECK* as directory-level checklist
      file.

   -  `checkmate github` command became to leave no comment when there are
      nothing to `CHECK` corresponding to the given diff.  It also removes
      the existing comment previously left by Checkmate on the same pull request.

   -  Added `checkmate github-travis` and `checkmate github-circle` commands,
      shortcuts of `checkmate github` for Travis CI and Circle CI integration.
      It even doesn't need the result of `git diff`.

   -  `checkmate` and its subcommands became to terminate with a proper non-zero
      exit code and print messages to /dev/stderr instead of /dev/stdout when
      it fails to read diff.

  ### Internals

   -  Added `Checkmate.Publisher` and `Checkmate.Publisher.GitHub` module.


  Version 0.2.1
  -------------

  Released on September 26, 2017.

   -  Fixed a parser bug which had scanned continuous inline comments of
      unmatched styles, e.g.:

          // CHECK This line is scanned.
          // This line also is scanned.
          -- This line had been scanned, but the parser is fixed
          -- so that it isn't scanned anymore.

   -  GitHub Flavored Markdown renderer (`checkmate gfm` and
      `Checkmate.Rendrer.toGFMarkdown`) became to ignore soft linebreaks to be
      consistent with CommonMark renderer.


  Version 0.2.0
  -------------

  Released on September 25, 2017.

   -  Now `CHECK` comments in source codes can be multiline.  The following
      patterns are supported:

       -  ~~~ c
          /*
          CHECK Lorem ipsum dolor sit amet, per facilis reprimique ut,
          ei agam invenire mel.

          Tacimates nominati vix ut, ea iudicabit prodesset deseruisse duo.
          */
          ~~~

       -  ~~~ c
          // CHECK Lorem ipsum dolor sit amet, per facilis reprimique ut,
          // ei agam invenire mel.
          //
          // Tacimates nominati vix ut, ea iudicabit prodesset deseruisse duo.
          ~~~

   -  `CHECK` keywords with a colon (i.e. `CHECK:`) became matched.


  Version 0.1.4
  -------------

  Released on September 21, 2017.

   -  Fixed a broken build of `checkmate` binary on the download page.
      It was crashed on Linux distros that glibc is unavailable.


  Version 0.1.3
  -------------

  Released on September 20, 2017.

   -  Fixed a broken build of `checkmate` binary on the download page.


  Version 0.1.2
  -------------

  Released on September 20, 2017.

   -  Fixed a broken build of `checkmate` binary on the download page.


  Version 0.1.1
  -------------

  Released on September 20, 2017.

  ### Frontend

   -  Checklist texts generated by `checkmate commonmark`, `checkmate gfm`, and
      `checkmate github` became to have two levels of headings.  The top-level
      heading is still the title of the checklist as it has been, and the
      second-level heading is a corresponding file path of its following checks.

  ### Internals

   -  Added `Checkmate.Renderer` module.


  Version 0.1.0
  -------------

  Initial release.  Released on September 20, 2017.
changelog-type: markdown
description: "Checkmate\n=========\n\n[![Build Status][ci-badge]][ci]\n[![Hackage][hackage-badge]][hackage]\n[![GitHub
  release][release-badge]][latest release]\n\nCheckmate is a small program to generate
  human-readable checklists from\na given patch (or pull request).  Leave `CHECK`
  comments (that are the same\nfashion as `FIXME` or `TODO` comments); then Checkmate
  detects when a diff\ntouches some code scopes having any `CHECK` comments, and lists
  the checks.\n\nIt helps contributors and reviewers to remind matters that require
  attention\nwhen a part of the code is changed.\n\n[ci-badge]: https://travis-ci.com/dahlia/checkmate.svg?branch=master\n[ci]:
  https://travis-ci.com/dahlia/checkmate\n[hackage-badge]: https://img.shields.io/hackage/v/checkmate.svg\n[hackage]:
  https://hackage.haskell.org/package/checkmate\n[release-badge]: https://img.shields.io/github/release/dahlia/checkmate.svg?label=download&colorB=4c1\n\n\nSituation\n---------\n\nLet's
  say there's a dictionary, and we should update the manual when a key\nis added to
  or removed from it:\n\n~~~~~~~~ python\nTARGET_LANGUAGES = {\n    # CHECK: Please
  update the manual on the project wiki when you add/remove\n    # a language.\n\n
  \   'c': '*.c',\n    'java': '*.java',\n    'javascript': '*.js',\n    'python':
  '*.py',\n}\n~~~~~~~~\n\nThe above example may be artificial, but suppose lines of
  the dictionary are\nlengthy.  Such tasks should be done outside of the source code
  repository\nso that they cannot be automated by simply eliminating code duplicates.\nContributors
  and reviewers altogether are easy to forget about such tasks.\n\nTo remind peers
  of such tasks, Checkmate detects `CHECK` comments like the above\nexample when a
  relevant *code block* is touched and show peers a checklist.\n\n\nListing relevant
  checks: overlapped blocks\n------------------------------------------\n\nHow does
  Checkmate list only relevant checks to a diff?  It currently doesn't\nhave any language-specific
  algorithms, but only a language-agnostic heuristics\non indented blocks.\n\nSuppose
  the following diff:\n\n~~~~~~~~ diff\ndiff --git a/langs.py b/langs.py\n--- a/langs.py\n+++
  b/langs.py\n@@ -5,6 +5,7 @@ TARGET_LANGUAGES = {\n     'c': '*.c',\n     'java':
  '*.java',\n     'javascript': '*.js',\n+    'haskell': '*.hs',\n     'python': '*.py',\n
  }\n \n~~~~~~~~\n\nSince it touched a code block with a `CHECK` comment, Checkmate
  generates\nthe following checklist:\n\n> - Please update the manual on the project
  wiki when you add/remove a language.\n\nSuppose a patch touches only code blocks
  without any `CHECK` comments too, e.g.:\n\n~~~~~~~~ diff\ndiff --git a/langs.py
  b/langs.py\n--- a/langs.py\n+++ b/langs.py\n@@ -8,6 +8,7 @@ TARGET_LANGUAGES = {\n
  \    'python': '*.py',\n }\n \n OTHER_DATA = {\n     # This code block is not relevant
  to TARGET_LANGUAGES.\n+    'haskell': '*.hs',\n }\n~~~~~~~~\n\nSince the touched
  block doesn't have any `CHECK` comments, Checkmate generates\nan empty checklist.\n\nNote
  that it doesn't parse code's semantics, but only scans blocks through\nindentation.
  \ Even if a block is wrapped in curly braces without indentation,\nit isn't counted
  as a block.\n\n\nDirectory-level checklist\n-------------------------\n\nSome checks
  may need to be listed for a whole directory.  Checkmate recognizes\nfiles named
  *.check* or *CHECK* in a directory and include checks in that to\nthe checklist
  if any file in the directory are changed.  Its syntax is basically\na simple bullet
  list and a bullet can be `*`/`-`/`+`/`CHECK` or digits followed\nby `.`/`)`, e.g.:\n\n
  \   - Check 1\n    - Check 2\n\n    + A plus sign too can be a bullet.\n    * An
  asterisk too.\n\n    1. Numbered-bullets also can be used.\n    2) A closing parenthesis
  as well can follow instead of a period.\n\n    CHECK: For consistency `CHECK` keyword
  also can be a bullet as well.\n    CHECK And a colon can be omitted.\n    Lines
  without any bullet is continued from previous line(s).\n\n\nDownload\n--------\n\nWe
  provide an official Linux x86_64 binary for [every release][].  See also\nthe [latest
  release][].  Note that official binaries are distributed as\nstatically-linked standalone
  executable, and they aren't gzipped.  Download and\ngive an `+x` permission; then
  it's ready.\n\nOn the other platforms you can download and install using Haskell
  [Cabal][]\nor [Stack][] since source tarballs also are distributed on [Hackage][]:\n\n~~~~~~~~
  bash\nstack install checkmate\n~~~~~~~~\n\nNote: if you experience an error like
  `ConnectionFailure\nNetwork.BSD.getProtocolByName: does not exist (no such protocol
  name: tcp)`\non Debian/Ubuntu Linux, try to install [*netbase*][netbase] package.\n(Read
  [this explanation][1] for details.)\n\n[every release]: https://github.com/dahlia/checkmate/releases\n[latest
  release]: https://github.com/dahlia/checkmate/releases/latest\n[Cabal]: https://www.haskell.org/cabal/\n[Stack]:
  https://www.haskellstack.org/\n[netbase]: https://packages.debian.org/search?keywords=netbase\n[1]:
  https://github.com/commercialhaskell/stack/issues/2372#issuecomment-234113085\n\n\nIntegration
  with CI\n-------------------\n\nSince Checkmate usually is executed as a part of
  CI build, we show examples\nfor widely-used CI services.\n\nAll examples assume
  the environment variables are defined:\n\n -  `GITHUB_TOKEN` contains the access
  token to leave comments on a\n    corresponding GitHub repository.  See also GitHub's
  official article\n    about [personal API tokens][].\n -  `CHECKMATE_DOWNLOAD_URL`
  contains the download link to the prebuilt binary\n    of the latest release, i.e.:\n\n
  \   ~~~~~~~ bash\n    CHECKMATE_DOWNLOAD_URL=https://github.com/dahlia/checkmate/releases/download/0.4.0/checkmate-linux-x86_64\n
  \   ~~~~~~~\n\n[personal API tokens]: https://github.com/blog/1509-personal-api-tokens\n\n\n###
  Travis CI\n\n~~~~~~~~ yaml\ninstall:\n- curl -L -o ~/bin/checkmate \"$CHECKMATE_DOWNLOAD_URL\"\n-
  chmod +x ~/bin/checkmate\nscript:\n- ~/bin/checkmate github-travis --token \"$GITHUB_TOKEN\"\n~~~~~~~~\n\n\n###
  Circle CI\n\n~~~~~~~~ yaml\ndependencies:\n  post:\n  - curl -L -o ~/bin/checkmate
  \"$CHECKMATE_DOWNLOAD_URL\"\n  - chmod +x ~/bin/checkmate\ntest:\n  post:\n  - ~/bin/checkmate
  github-circle --token \"$GITHUB_TOKEN\"\n~~~~~~~~\n\n\n### Other CI softwares/services\n\nYou
  can run `checkmate github` command with explicit arguments:\n\n~~~~~~~~ bash\ncurl
  -L -o ~/bin/checkmate \"$CHECKMATE_DOWNLOAD_URL\"\nchmod +x ~/bin/checkmate\n# Suppose
  we're running a build of github.com/foo/bar/pull/123\n~/bin/checkmate github \\\n
  \   --token \"$GITHUB_TOKEN\" \\\n    --login foo \\\n    --repo bar \\\n    --pr
  123\n~~~~~~~~\n\nIf you're using GitHub Enterprise on premise use `--endpoint` option.\nFurther
  reading: `checkmate github --help`.\n"
description-type: markdown
hash: 84a499292ff0260ea7ab15c9e87df0cd49e6822115f1c17a6a5059bf694dcbf4
homepage: https://github.com/dahlia/checkmate#readme
latest: 0.4.0
license-name: AGPL-3.0-only
maintainer: hong.minhee@gmail.com
synopsis: Generate checklists relevant to a given patch
test-bench-deps:
  QuickCheck: '>=2.9.2 && <3.0.0'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8.1 && <0.11'
  checkmate: '>=0'
  diff-parse: '>=0.2.1 && <0.3.0'
  directory: '>=1.3 && <1.4'
  file-embed: '>=0.0.10 && <0.1.0'
  filepath: '>=1.4.1.1 && <2.0.0'
  hlint: '>=2.0.9 && <3'
  hspec: '>=2.4.4 && <3.0.0'
  hspec-megaparsec: '>=1.0.0 && <1.1.0'
  interpolatedstring-perl6: '>=1 && <2'
  megaparsec: '>=6.5 && <6.6'
  quickcheck-text: '>=0.1.2.1 && <0.2.0.0'
  temporary: '>=1.2.1 && <1.3.0.0'
  text: '>=1 && <2'
