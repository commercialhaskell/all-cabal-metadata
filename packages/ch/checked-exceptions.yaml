all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
author: Zachary Churchill
basic-deps:
  base: '>=4.12.0.0 && <5'
  constraints: '>=0.14 && <0.15'
  exceptions: '>=0.10 && <0.11'
  ghc: '>=8.6.5 && <10'
  ghc-tcplugins-extra: '>=0.4 && <0.6'
  mtl: '>=2.0.0.0 && <3.0.0.0'
changelog: |
  # Revision history for checked-exceptions

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# checked-exceptins\n\nA monad transformer that allows you to throw
  and catch a restricted set of exceptions, tracked at the type level\n\nConsider
  the following example:\n\n```haskell\ntype TestExceptions = '[(), Int, Bool, String]\n\ntestCE
  :: CheckedExceptT TestExceptions IO ()\ntestCE = CheckedExcept.do\n  () <- testCE1
  :: CheckedExceptT '[()] IO ()\n  () <- testCE2 :: CheckedExceptT '[Int] IO ()\n
  \ () <- testCE3 :: CheckedExceptT '[Bool] IO ()\n  () <- testCE4 :: CheckedExceptT
  '[String] IO ()\n  -- () <- testCE5 :: CheckedExceptT '[Char] IO () -- doesn't compile\n
  \ pure ()\n\ntest :: CheckedExcept TestExceptions () -> IO ()\ntest ce = case runCheckedExcept
  ce of\n  Left e -> do \n    applyAll (putStrLn . encodeException) e\n    -- or\n
  \   withOneOf @() e $ \\() -> putStrLn \"()\"\n    withOneOf @Int e $ \\n -> print
  $ n + 1\n    withOneOf @Bool e $ \\_ -> pure ()\n    -- or\n    caseException e\n
  \     (  (\\() -> putStrLn \"()\")\n      <: (\\n -> print $ n + 1)\n      <: CaseAny
  (\\x -> putStrLn $ encodeException x)\n      -- <: (\\b -> putStrLn \"bool\")\n
  \     -- <: (\\s -> putStrLn \"string\")\n      -- <: CaseEnd\n      )\n  Right
  () -> putStrLn \"Right\"\n```\n\nThe facilities this library provides will alert
  you when you have, intentionally or unintentionally, introduced a new possible exception
  in your code that is presently unaccounted for.\nSince we enforce at the type level
  what kinds of exceptions are permissible, you can safely trust the exceptions set
  in the type signature to do something like generate OpenAPI documenation for an
  HTTP handler's error responses.\n\nWhen catching an exception, we provide the `CaseException`
  type to allow coverage checking with a case-like api `caseException`, or you can
  use methods provided by the `CheckedException` typeclass to perform common operations
  on exceptions without inspecting the type of the exception.\n"
description-type: markdown
hash: 6fe03965717d5f0c39b0ebf2842ddd7a999db97bf0e44fc454c44b5008534169
homepage: http://github.com/haskell/checked-exceptions
latest: 0.2.0.0
license-name: MIT
maintainer: zacharyachurchill@gmail.com
synopsis: mtl-style checked exceptions
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  checked-exceptions: '>=0'
  mtl: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  transformers: '>=0'
