homepage: http://github.com/sordina/churros
changelog-type: markdown
hash: ad92e7b8ce2b959d92b41bf159cc9b6e3e60f3792ce3228a4f572f7060f7807a
test-bench-deps:
  stm: -any
  base: '>=4.10 && <4.17'
  time: -any
  async: -any
  doctest: -any
  containers: -any
  unagi-chan: -any
  random: -any
maintainer: lyndon@sordina.net
synopsis: Channel/Arrow based streaming computation library.
changelog: |
  # Revision history for Churros

  ## 0.1.6.0 -- 2022-10-16

  * Bump base dependency bounds to allow use of GHC 9.x
  * Fix warnings

  ## 0.1.5.1 -- 2020-10-20

  * Generalising processes to allow for different transport for process group.
  * Added `processesUnagi` function.

  ## 0.1.4.1 -- 2020-10-20

  * Adding `processes` function that runs a set of processes over the input.
  * Adding `withChurro` helper function.

  ## 0.1.4.0 -- 2020-10-18

  * Generalising list type to Foldable/Traversible where possible (`sources`).
  * Additional documentation
  * Underscore variants of prelude function that specialise Async action to `()`.

  ## 0.1.3.0 -- 2020-10-17

  * Generalised functions to have Monoid for Async action result.

  ## 0.1.2.0 -- 2020-10-15

  * Added type families to transport class to allow for different in/out types
  * Added support for unagi-chan
  * Added support for bounded unagi-chan
  * Updating documentation

  ## 0.1.1.0 -- 2020-10-15

  * Transport method `flex` now returns a pair of channels to move towards support for Unagi.
  * Addition of new prelude methods such as `sources`.
  * Adding README.md to Hackage contents page.

  ## 0.1.0.3 -- 2020-10-12

  * Fixed broken changelog.
  * Added `sources` combinator.

  ## 0.1.0.2 -- 2020-10-12

  * Added new prelude functions and updated to export main library.

  ## 0.1.0.1 -- 2020-10-12

  * Updated documentation.

  ## 0.1.0.0 -- 2020-10-12

  * First version. Released on an unsuspecting world.
basic-deps:
  stm: -any
  base: '>=4.10 && <4.17'
  time: -any
  async: -any
  containers: -any
  unagi-chan: -any
  random: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.4.1
- 0.1.5.0
- 0.1.6.0
author: Lyndon Maydwell
latest: 0.1.6.0
description-type: markdown
description: |-
  # Churros

  > Chan + Arrow = Churro

  Simple alternative to
     [Conduit](https://hackage.haskell.org/package/conduit),
     [Pipes](https://hackage.haskell.org/package/pipes),
     [Streaming](https://hackage.haskell.org/package/streaming),
     [Machines](https://hackage.haskell.org/package/machines), etc.

  Use-case is CSP like scenarios where you need a graph of actors.

  Signup Example:

  ```
  New-Users -->  Validate -------?----->  Deploy  -----?--------------> Log
  Subscribe    REST Request      |      Run Server     |         Write File
  {-> ID}    {ID -> (ID,Email}   |    {Email -> Port}  |  {Port|Receipt ->}
                                 |                     |
                                 +-------> Warn -------+
                                        Send Email
                                    {Email -> Receipt}
  ```

  Developed from a history of attempting to use co-routines libraries for setting up complicated asynchronous processes
  such as collections of MIDI instruments, etc, but being frustrated by not easily being able to conditionally
  consume and emit events. In these situations I'd fall back on creating a bunch of Chans and piping events manually.
  Churros just formalises that strategy to help you get it right!

  Advantages over other alternatives:

  * Focus on IO processes
  * Dynamic choice of consumption/production
  * Arrow instance
  * Choice of transport via the `Transport` class

  Disadvantages:

  * No pure interface!
  * Type for the async action restricted to Monoid for most operations.
  * Limited ability to perform lock-step computation (although this is by design)

  See [Hackage](https://hackage.haskell.org/package/churros) for more info!

  ## Examples

  See `./test/` directory for more extensive examples.

  ```haskell
  import Control.Churro

  main = do
     runWaitChan             $ sourceList [1..10] >>> processDebug "after source" >>> delay 1 {- seconds -} >>> arr succ >>> sinkPrint
     (wait =<<)  $ run @Chan $ sourceIO (\cb -> cb 1 >> print "Doing whatever!" >> cb 5) >>> filterC (> 3) >>> sinkIO print
  ```

  ## Testing

  Cabal test-suite including doctests:

  > cabal exec cabal test

  Or for itterative development:

  > find {src,test} | entr -- cabal exec -- doctest -isrc -itest test/Churro/Test/Examples.hs

  ## TODO

  * [ ] Add seperate projects to allow minimal core and enciched ecosystem e.g. churros-unagi
  * [ ] Create profunctor instance
  * [ ] Create contravariant functor instance
  * [ ] Create ArrowChoice instance
  * [ ] Create ArrowLoop instance
  * [ ] Different transports for sections of the graph
  * [ ] Allow configurable parallelism / Pool Churro functions
  * [x] Recovery/Retry capability
  * [x] Fix await deadlock
  * [x] Generic Chan functions, then specific newtype
  * [x] Stop using list functions
  * [x] Different transport options, buffered, etc.
  * [x] Write doctests for functionality
  * [x] Get Doctests working as part of the cabal test-suite
  * [x] Bundle in/out channels in the Transport class to allow Unagi to implement it
  * [x] Allow returning of results from run functions
  * [x] Get haddocks rendering correctly - Including contents
  * [x] Early termination if downstream consumer completes
      - [x] Ensure that infinite lists work when partially consumed
license-name: MIT
