homepage: https://github.com/mlang/chessIO#readme
changelog-type: markdown
hash: 9c6595def4d6615503d1b78aef51749522f6f77aac7eb8643b0d1c22d018a4a9
test-bench-deps:
  bytestring: -any
  o-clock: -any
  MonadRandom: -any
  extra: -any
  stm: -any
  base: '>=4.10 && <5'
  th-compat: '>=0.1.2'
  time: -any
  unordered-containers: -any
  text: -any
  megaparsec: '>=9.0'
  process: -any
  vector-instances: -any
  HUnit: -any
  th-lift-instances: -any
  containers: -any
  vector-binary-instances: -any
  lens: -any
  binary: -any
  hashable: -any
  chessIO: -any
  file-embed: -any
  attoparsec: -any
  prettyprinter: '>=1.7.0'
  random: -any
  parallel: -any
  deepseq: -any
  template-haskell: '>=2.9.0.0'
  mono-traversable: -any
  vector: -any
  directory: -any
maintainer: mlang@blind.guru
synopsis: Basic chess library
changelog: |+
  # Releases

  ## chessIO 0.9.3.0

  - Builds with GHC 9.2.1

  ## chessIO 0.9.2.0

  - Move `cbookview` into a separate repository, removing the build-dep on brick
  - Update internal book

  ## chessIO 0.9.1.0

  - Add a Binary instance for Square
  - Reimplement move generator in the ST monad with unboxed vector.
    New function legalPlies' and speedup of roughly 15% and 300% less allocations.

  ## chessIO 0.9.0.0

  - New functions:
    - move :: Square -> Square -> Ply
    - promoteTo :: Ply -> PieceType -> Ply
    - mapRank :: (Rank -> Rank) -> Square -> Square
    - mapFile :: (File -> File) -> Square -> Square
  - Game.Chess.UCI: 'setPosition' now also takes the list of plies from start pos
  - Fix compilation with GHC 9.0.1

  ## chessIO 0.8.0.0

  - Speedup of about 1.4 compared to previous release
  - PGN: Replace nested tuples with records
  - Export mkFile, unFile, mkRank, unRank
  - Unexport fromPolyglot and toPolyglot which always should have been internal functions
  - Use th-compat to work around compatibility issues

  ## chessIO 0.7.0.0

  - Remove IsSquare class and add three newtye'd Ints: Square, Rank, File (inspired by [issue 5](https://github.com/mlang/chessIO/issues/5))
  - Add HasCallStack to partial doPly and toSAN (thanks Oleg Grenrus)
  - instance IsString Position based on fromFEN
  - instance Binary Position
  - instance Hashable Position
  - instance Binary Ply
  - instance Unbox Ply
  - New functions: rank, file, rankChar, fileChar, toCoord
  - New module: Game.Chess.ECO
  - Chess.Game.UCI: PV is now an unboxed vector

  ## chessIO 0.6.1.1

  - Fix [half-move counter not being reset on pawn push or capture](https://github.com/mlang/chessIO/issues/2) (Thanks to Oleg Grenrus)
  - Fix [toFEN not emitting a dash when only king moved](https://github.com/mlang/chessIO/issues/3) (Thanks to Oleg Grenrus)

  ## chessIO 0.6.1.0

  - Add enPassantSquare (thanks Tochi Obudulu).
  - cbookview:
    - piece styles
    - Key End now moves to the final position of the most popular game
    - FEN string display

  ## chessIO 0.6.0.0

  - Optimize `foldBits`.
  - Avoid cycles in `bookForest`.
  - Don't reexport tree related functions from Game.Chess.
  - Split SAN functions into new exposed module Chess.Game.SAN.
  - Rename `Game.Chess.Polyglot.Book` to `Game.Chess.Polyglot`.
  - New functions `plySource` and `plyTarget`.
  - New tool `cbookview`: terminal chess book opening explorer.

  ## chessIO 0.5.0.0

  - Split SAN parsing code into a separate module.
  - Adapt to VisualStream change in Megaparsec >= 9.
  - Use Maybe to indicate that bestmove in UCI can be empty.
  - instance Storable QuadBitboard

  ## chessIO 0.4.0.0

  - Support for letting UCI engines ponder.
  - Avoid a branch to further speed up move generation.

basic-deps:
  bytestring: -any
  o-clock: -any
  MonadRandom: -any
  extra: -any
  haskeline: -any
  stm: -any
  base: '>=4.10 && <5'
  th-compat: '>=0.1.2'
  time: -any
  unordered-containers: -any
  text: -any
  megaparsec: '>=9.0'
  process: -any
  vector-instances: -any
  th-lift-instances: -any
  containers: -any
  vector-binary-instances: -any
  lens: -any
  binary: -any
  mtl: -any
  hashable: -any
  chessIO: -any
  file-embed: -any
  attoparsec: -any
  prettyprinter: '>=1.7.0'
  optparse-applicative: -any
  random: -any
  deepseq: -any
  template-haskell: '>=2.9.0.0'
  mono-traversable: -any
  vector: -any
all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.6.1.1
- 0.7.0.0
- 0.8.0.0
- 0.9.0.0
- 0.9.1.0
- 0.9.2.0
- 0.9.3.0
author: Mario Lang
latest: 0.9.3.0
description-type: markdown
description: |
  # A Haskell chess library and console UCI frontend program

  [![Build status](https://github.com/mlang/chessIO/actions/workflows/ci.yml/badge.svg)](https://github.com/mlang/chessIO/actions/workflows/ci.yml)

  `chessIO` is a Haskell library for working with chess positions and moves,
  and a console frontend program (cboard) to work with UCI compatible
  chess engines.

  ## The Library

  The main module provided by the library is
  [Game.Chess](https://hackage.haskell.org/package/chessIO/docs/Game-Chess.html),
  which defines data types and functions for working with chess positions
  and moves. It offers a fully compliant move generator and parsing for
  and printing positions in [Forsyth-Edwards
  Notation](https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation)
  and moves in [Algebraic
  Notation](https://en.wikipedia.org/wiki/Algebraic_notation_(chess)).

  Module
  [Game.Chess.UCI](https://hackage.haskell.org/package/chessIO/docs/Game-Chess-UCI.html)
  provides functionality to run an external process which understands the
  Universal Chess Interface protocol from within Haskell.

  ## Console frontend for the Universal Chess Interface protocl

  `cboard` is a simple console (text-mode) frontend for interacting with
  chess engines (like stockfish or glaurung) which make use of the UCI
  protocol.

  To launch a chess engine, simply pass its executable name and arguments
  to cboard. For instance, `cboard stockfish`.
license-name: BSD-3-Clause
