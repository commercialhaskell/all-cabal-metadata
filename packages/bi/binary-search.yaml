all-versions:
- '0.0'
- '0.1'
- '0.9'
- '1.0'
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 2.0.0
author: supercede <support@supercede.com>, Ross Paterson <ross@soi.city.ac.uk>, Takayuki
  Muranushi <muranushi@gmail.com>
basic-deps:
  base: '>=4.5 && <5'
  containers: '>=0.4'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: |-
  __Introduction__

  This package provides varieties of binary search functions.
  c.f.  "Numeric.Search" for the examples.

  These search function can search for pure and monadic predicates, of type:

  > pred :: Eq b => a -> b
  > pred :: (Eq b, Monad m) => a -> m b

  The predicates must satisfy that the domain range for any codomain value
  is continuous; that is, @∀x≦y≦z. pred x == pred z ⇒ pred y == pred x@ .

  For example, we can address the problem of finding the boundary
  of an upward-closed set of integers, using a combination
  of exponential and binary searches.

  Variants are provided
  for searching within bounded and unbounded intervals of
  both 'Integer' and bounded integral types.

  The package was created by Ross Paterson, and extended
  by Takayuki Muranushi, to be used together with SMT solvers.

  __The Module Structure__

  *  "Numeric.Search" provides the generic search combinator, to search for pure and monadic predicates.

  *  "Numeric.Search.Bounded" ,  "Numeric.Search.Integer" ,  "Numeric.Search.Range" provides the various specialized searchers, which means less number of function arguments, and easier to use.

  <<https://travis-ci.org/nushio3/binary-search.svg?branch=master>>
description-type: haddock
hash: cb67b4cd8106a5391b9cccc206ba312b19a3bf7a1b09eb25dd40774cb80fde3f
homepage: ''
latest: 2.0.0
license-name: BSD-3-Clause
maintainer: supercede <support@supercede.com>
synopsis: Binary and exponential searches
test-bench-deps:
  QuickCheck: '>=2.5'
  base: '>=4.7 && <5'
  binary-search: '>=0'
  directory: '>=1.1'
  doctest: '>=0.9.3'
  filepath: '>=1.2'
  hspec: '>=1.3'
