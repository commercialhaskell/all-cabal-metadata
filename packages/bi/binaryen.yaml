all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
- 0.0.5.0
- 0.0.6.0
author: ''
basic-deps:
  base: <5
  binaryen: '>=0'
changelog: |
  # CHANGELOG for `binaryen`

  ## 0.0.1.1

  - Fix a runtime error when linking against `version_92` or above due to a
    breaking [change](https://github.com/WebAssembly/binaryen/pull/2745) in
    upstream C API.

  ## 0.0.1.0

  - Initial release.
changelog-type: markdown
description: |
  # Haskell bindings for [binaryen][binaryen]

  ![](https://github.com/tweag/haskell-binaryen/workflows/pipeline/badge.svg?branch=master)

  [Binaryen][binaryen] is a compiler and toolchain infrastructure library for
  WebAssembly, written in C++. This package defines bindings to the [Binaryen C
  API][binaryen-api].

  ## Versioning

  Starting from `0.0.5.0`, we bundle the C++ sources of `binaryen` with this
  package, so the package can be built and used as long as the C++ toolchain is
  present in the build environment. The `system-binaryen` Cabal flag defaults to
  `False`, but it can be manually enabled to link against the system-wide
  `binaryen` library and avoid building the bundled C++ library.

  | Haskell bindings version | Bundled Binaryen version |
  | ------------------------ | ------------------------ |
  | 0.0.6.\*                 | version_99               |

  Older versions of this package links against the system-wide `binaryen` library,
  so before building the package, please check the Binaryen version and make sure
  it's no less than the minimum version listed below.

  | Haskell bindings version | Minimum Binaryen version |
  | ------------------------ | ------------------------ |
  | 0.0.1.\*                 | version_91               |
  | 0.0.2.\*                 | version_94               |
  | 0.0.3.\*                 | version_96               |
  | 0.0.4.\*                 | version_97               |
  | 0.0.5.\*                 | version_98               |

  ## How to build

  A simple `stack build` or `cabal build` command should work.

  For Windows `cabal` users: run the build in a msys2 mingw64 shell.

  [`nix`][nix]-based build is also supported:

  ```shell
  $ nix-shell --pure --run "cabal v2-run binaryen:test"
  $ nix-shell --pure --run "cabal v2-run binaryen:test --flags=system-binaryen --extra-include-dirs=\$binaryenIncludeDir --extra-lib-dirs=\$binaryenLibDir"
  ```

  Use the [`asterius`][cachix-asterius] Cachix bucket for reusing binary cache
  built on CI.

  [binaryen]: https://github.com/WebAssembly/binaryen
  [binaryen-api]: https://github.com/WebAssembly/binaryen/blob/master/src/binaryen-c.h
  [cachix-asterius]: https://app.cachix.org/cache/asterius
  [nix]: https://nixos.org/nix
description-type: markdown
hash: 8fe849289d04865536b3fa4b059caa9a4587b85bb6235cef5c5f2c3f00e7cb8c
homepage: https://github.com/tweag/haskell-binaryen#readme
latest: 0.0.6.0
license-name: BSD-3-Clause
maintainer: Cheng Shao <cheng.shao@tweag.io>
synopsis: Haskell bindings to binaryen
test-bench-deps:
  base: <5
  binaryen: '>=0'
