homepage: https://github.com/jnbooth/bitwise-enum
changelog-type: markdown
hash: 8a00c4ba15279a3f2f9581da0bea4da844df08844ba874f154c8651c404c4a53
test-bench-deps:
  test-framework: '>=0.8.2.0'
  base: -any
  test-framework-quickcheck2: '>=0.3.0.5'
  array: '>=0.5.1 && <0.6'
  gauge: '>=0.2.5'
  wide-word: '>=0.1.0.9'
  deepseq: '>=1.1 && <1.6'
  QuickCheck: '>=2.13.2'
  aeson: '>=0.11 && <2.3'
  mono-traversable: '>=1.0.12 && <1.1'
  vector: '>=0.11 && <0.14'
  bitwise-enum: -any
maintainer: Joshua Booth <joshua.n.booth@gmail.com>
synopsis: Bitwise operations on bounded enumerations
changelog: |
  ## [1.0.1.0]

  * Add `EnumSet.toRaw`.
basic-deps:
  base: '>=4.5 && <5'
  array: '>=0.5.1 && <0.6'
  deepseq: '>=1.1 && <1.6'
  aeson: '>=0.11 && <2.3'
  mono-traversable: '>=1.0.12 && <1.1'
  vector: '>=0.11 && <0.14'
all-versions:
- 0.1.0.3
- 1.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.1.0
- 1.0.1.1
author: Joshua Booth <joshua.n.booth@gmail.com>
latest: 1.0.1.1
description-type: markdown
description: |
  # bitwise-enum

  Efficient sets over bounded enumerations, using bitwise operations based on [containers](https://hackage.haskell.org/package/containers-0.6.0.1/docs/src/Data.IntSet.Internal.html) and [EdisonCore](https://hackage.haskell.org/package/EdisonCore-1.3.2.1/docs/src/Data-Edison-Coll-EnumSet.html). All operations apart from folds are constant-time. In many cases, the compiler may use constant folding to optimize `EnumSet`s away entirely. For example, in the following code:

  ```hs
  import Data.Enum.Set as E

  data Foo = A | B | C | D | E | F | G | H deriving (Bounded, Enum, Eq, Ord)

  instance E.AsEnumSet Foo

  addFoos :: E.EnumSet Foo -> E.EnumSet Foo
  addFoos = E.delete A . E.insert B

  bar :: E.EnumSet Foo
  bar = addFoos $ E.fromFoldable [A, C, E]

  barHasA :: Bool
  barHasA = E.member A bar
  ```

  With  -O  or  -O2 ,  `bar`  will compile to  `GHC.Types.W# 22##`  and  `barHasA`  will compile to  `GHC.Types.False`.

  By default, `Word`s are used as the representation. Other representations may be chosen in the class instance:

  ```hs
  {-# LANGUAGE TypeFamilies #-}

  import Data.Enum.Set as E
  import Data.Word (Word64)

  data Foo = A | B | C | D | E | F | G | H deriving (Bounded, Enum, Eq, Ord, Show)

  instance E.AsEnumSet Foo where
      type EnumSetRep Foo = Word64
  ```
license-name: BSD-3-Clause
