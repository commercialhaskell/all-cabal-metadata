homepage: https://github.com/kolmodin/binary
changelog-type: markdown
hash: 81f468c1c75fd6535152ab69b2d32ac6cfcc03e345267b069abe4da56ec95801
test-bench-deps:
  cereal: -any
  bytestring: '>=0.10.4'
  test-framework: -any
  Cabal: -any
  base: '>=4.5.0.0 && <5'
  unordered-containers: -any
  generic-deriving: '>=0.10'
  filepath: -any
  test-framework-quickcheck2: '>=0.3'
  criterion: ==1.*
  HUnit: -any
  array: -any
  base-orphans: '>=0.8.1 && <0.9'
  containers: -any
  binary: -any
  zlib: -any
  mtl: -any
  attoparsec: -any
  random: '>=1.0.1.0'
  deepseq: -any
  QuickCheck: '>=2.9'
  directory: -any
maintainer: Lennart Kolmodin, Don Stewart <dons00@gmail.com>
synopsis: Binary serialisation for Haskell values using lazy ByteStrings
changelog: "binary\n======\n\nbinary-0.8.9.1\n--------------\n\n- Fix redundant pattern
  match warning in GHC 9.4\n\nbinary-0.8.9.0\n--------------\n\n- Compatibility with
  GHC 9.2\n- Drop instances for deprecated `Data.Semigroup.Option`\n\nbinary-0.8.8.0\n--------------\n\n-
  Support Int32Rep and Word32Rep (3e0134df).\n- Use bases built-in float/word32 and
  double/word64 casts (8eae4af0).\n\nbinary-0.8.7.0\n--------------\n\n- MonadFail
  compatibility in base-4.13 (`fail` is not method of `Monad).\n- `Binary NonEmpty`
  `fail`s non empty lists, not `error`s\n\nbinary-0.9.0.0 & binary-0.10.0.0\n--------------------------------\n\n-
  `0.8.5.0` was first released as version `0.9.0.0`. It didn't have any\n  breaking
  changes though, so it was again released as version `0.8.5.0`\n  according to PVP.\n-
  `0.8.6.0` was first released as version `0.10.0.0`.\n\nbinary-0.8.6.0\n---------------\n\n-
  Add binary instance for Data.Functor.Identity from base, #146.\n- Don't use * when
  we have TypeOperators, #148.\n\n\nbinary-0.8.5.0\n--------------\n\n- Add Binary
  instances for Typeable TypeReps, #131.\n\nbinary-0.8.4.1\n--------------\n\n- Fix
  compilation with bytestring < 0.10.4.\n\nbinary-0.8.4.0\n--------------\n\n- `binary`
  supports GHC >= 7.4.2\n- Performance improvements for `Alternative` functions.\n-
  put/get functions for IEEE-754 floats and doubles, #119.\n- Fix performance bugs,
  #115.\n- Binary instances for datatypes in `Data.Monoid` and `Data.Semigroup`, #114.\n\nbinary-0.8.3.0\n--------------\n\n-
  Replace binary's home grown `Builder` with `Data.ByteString.Builder`.\n  `Data.Binary.Builder`
  now exports `Data.ByteString.Builder.Builder`.\n- Add `putList :: [a] -> Put` to
  the `Binary` class. This is used to be able to\n  use the list writing primitives
  of the new Builder. This brought a number of speedups;\n  Encoding a String is now
  70% faster. [Word8] is 76% faster, which also makes\n  Integer 34% faster. Similar
  numbers for all [IntXX] and [WordXX].\n- Fail gracefully within `Get` when decoding
  `Bool` and `Ordering`. Previously\n  when decoding invalid data these instances
  would fail with `error`.\n- Add Binary instance for `Complex a`.\n- Add Monoid and
  Semigroup instance for `Put`.\n\nbinary-0.8.2.1\n--------------\n\n- Fix compilation
  error when using older GHC versions and clang. clang barfs on some of its CPP input
  (#105).\n\nbinary-0.8.2.0\n--------------\n\n- When using GHC >= 8, `Data.Binary.Get.Get`
  implements MonadFail and delegates its `fail` to `MonadFail.fail`.\n\nbinary-0.8.1.0\n--------------\n\n-
  Add binary instance for `Data.ByteString.Short`.\n- Add get/put functions for all
  Int sizes to `Data.Binary.Builder`, `Data.Binary.Get` and `Data.Binary.Put`.\n\nbinary-0.8.0.1\n--------------\n\n-
  Address compiler warnings.\n\nbinary-0.8.0.0\n--------------\n\n- Added binary instance
  for `Version` from `Data.Version`.\n- Added binary instance for `Void` from GHC
  7.10.1.\n- Added binary instance for `(Data.Fixed a)` from GHC 7.8.1.\n- Added semigroup
  instance for `Data.Binary.Builder` from GHC 8.0.\n\nbinary-0.7.6.1\n--------------\n\n-
  Fix compilation for GHC == 7.2.*.\n\nbinary-0.7.6.0\n--------------\n\n- Added binary
  instance for GHC.Fingerprint (from GHC >= 7.4).\n\nbinary-0.7.5.0\n--------------\n\n-
  Fix performance bug that was noticable when you get a big strict ByteString\n  and
  the input to the decoder consists of many small chunks.\n    - https://github.com/kolmodin/binary/issues/73\n
  \   - https://github.com/kolmodin/binary/pull/76\n- Fix memory leak when decoding
  Double and Float.\n    - Commit 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb\n- We now
  require QuickCheck >= 2.8. Remove our version of arbitrarySizedNatural.\n\nbinary-0.7.4.0\n--------------\n\n-
  Some invalid UTF-8 strings caused an exception when decoded. Those errors will\n
  \ now now fail in the Get monad instead. See #70.\n  Patch contributed by @ttuegel.\n\nbinary-0.7.3.0\n--------------\n\n-
  Add Binary instance for Natural (only with base > 4.8).\n\nbinary-0.7.2.3\n--------------\n\n-
  Remove INLINEs from GBinary/GSum methods. These interact very badly with the\n  GHC
  7.9.x simplifier. See also;\n     - https://github.com/kolmodin/binary/pull/62\n
  \    - https://ghc.haskell.org/trac/ghc/ticket/9630\n     - https://ghc.haskell.org/trac/ghc/ticket/9583\n\nbinary-0.7.2.2\n--------------\n\n-
  Make import of GHC.Base future-proof (https://github.com/kolmodin/binary/pull/59).\n\nbinary-0.7.2.1\n--------------\n\n-
  Fix to compile on GHC 6.10.4 and older (https://github.com/kolmodin/binary/issues/55).\n\nbinary-0.7.2.0\n--------------\n\n-
  Add `isolate :: Int -> Get a -> Get a`.\n- Add `label :: String -> Get a -> Get
  a`.\n\nbinary-0.7.1.0\n--------------\n\n- Add `lookAheadE :: Get (Either a b) ->
  Get (Either a b)`.\n- Add MonadPlus instance for Get. \n\n\nbinary-0.7.0.1\n--------------\n\n-
  Updates to documentation.\n\nbinary-0.7.0.0\n--------------\n\n- Add `lookAhead
  :: Get a -> Get a`.\n- Add `lookAheadM :: Get (Maybe a) -> Get (Maybe a)`.\n- Add
  Alternative instance for Get (provides `<|>`).\n- Add `decodeOrFail :: Binary a
  => L.ByteString -> Either (L.ByteString, ByteOffset, String) (L.ByteString, ByteOffset,
  a)`\n- Add `decodeFileOrFail :: Binary a => FilePath -> IO (Either (ByteOffset,
  String) a)`.\n- Remove `Ord` class constraint from `Set` and `Map` Binary instances.\n\nbinary-0.6.4\n------------\n\n-
  Add `runGetOrFail :: Get a -> L.ByteString -> Either (L.ByteString, ByteOffset,
  String) (L.ByteString, ByteOffset, a)`.\n\nbinary-0.6.3\n------------\n\n- Documentation
  tweeks, internal restructuring, more tests.\n\nbinary-0.6.2\n------------\n\n- `some`
  and `many` more efficient.\n- Fix bug where `bytesRead` returned the wrong value.\n-
  Documentation improvements.\n\nbinary-0.6.1\n------------\n\n- Fix bug where a decoder
  could return with `Partial` after the previous reply was `Nothing`.\n\nbinary-0.6.0.0\n--------------\n"
basic-deps:
  bytestring: '>=0.10.4'
  base: '>=4.5.0.0 && <5'
  array: -any
  containers: -any
all-versions:
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.4
- 0.4.5
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.1.0
- 0.5.1.1
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.3.0
- 0.6.4.0
- 0.7.0.0
- 0.7.0.1
- 0.7.1.0
- 0.7.2.0
- 0.7.2.1
- 0.7.2.2
- 0.7.2.3
- 0.7.3.0
- 0.7.4.0
- 0.7.5.0
- 0.7.6.0
- 0.7.6.1
- 0.8.0.0
- 0.8.0.1
- 0.8.1.0
- 0.8.2.0
- 0.8.2.1
- 0.8.3.0
- 0.8.4.0
- 0.8.4.1
- 0.8.5.0
- 0.8.5.1
- 0.8.6.0
- 0.8.7.0
- 0.8.8.0
- 0.8.9.0
- 0.8.9.1
author: Lennart Kolmodin <kolmodin@gmail.com>
latest: 0.8.9.1
description-type: markdown
description: "# binary package #\n\n[![Hackage version](https://img.shields.io/hackage/v/binary.svg?label=Hackage)](https://hackage.haskell.org/package/binary)
  [![Stackage version](https://www.stackage.org/package/binary/badge/lts?label=Stackage)](https://www.stackage.org/package/binary)
  [![Build Status](https://api.travis-ci.org/kolmodin/binary.png?branch=master)](http://travis-ci.org/kolmodin/binary)\n\n*Efficient,
  pure binary serialisation using lazy ByteStrings.*\n\nThe ``binary`` package provides
  Data.Binary, containing the Binary class,\nand associated methods, for serialising
  values to and from lazy\nByteStrings. \nA key feature of ``binary`` is that the
  interface is both pure, and efficient.\nThe ``binary`` package is portable to GHC
  and Hugs.\n\n## Installing binary from Hackage ##\n\n``binary`` is part of The Glasgow
  Haskell Compiler (GHC) and therefore if you\nhave either GHC or [The Haskell Platform](http://www.haskell.org/platform/)\ninstalled,
  you already have ``binary``.\n\nMore recent versions of ``binary`` than you might
  have installed may be\navailable. You can use ``cabal-install`` to install a later
  version from\n[Hackage](http://hackage.haskell.org/package/binary).\n\n    $ cabal
  update\n    $ cabal install binary\n\n## Building binary ##\n\n``binary`` comes
  with both a test suite and a set of benchmarks.\nWhile developing, you probably
  want to enable both.\nHere's how to get the latest version of the repository, configure
  and build.\n\n    $ git clone git@github.com:kolmodin/binary.git\n    $ cd binary\n
  \   $ cabal update\n    $ cabal configure --enable-tests --enable-benchmarks\n    $
  cabal build\n\nRun the test suite.\n\n    $ cabal test\n\n## Using binary ##\n\nFirst:\n\n
  \   import Data.Binary\n\nand then write an instance of Binary for the type you
  wish to serialise.\nAn example doing exactly this can be found in the Data.Binary
  module.\nYou can also use the Data.Binary.Builder module to efficiently build\nlazy
  bytestrings using the ``Builder`` monoid. Or, alternatively, the\nData.Binary.Get
  and Data.Binary.Put to serialize/deserialize using\nthe ``Get`` and ``Put`` monads.\n\nMore
  information in the haddock documentation.\n\n## Deriving binary instances using
  GHC's Generic ##\n\nBeginning with GHC 7.2, it is possible to use binary serialization
  without\nwriting any instance boilerplate code.\n\n```haskell\n{-# LANGUAGE DeriveGeneric
  #-}\n\nimport Data.Binary\nimport GHC.Generics (Generic)\n\ndata Foo = Foo deriving
  (Generic)\n\n-- GHC will automatically fill out the instance\ninstance Binary Foo\n```\n\n##
  Contributors ##\n\n* Lennart Kolmodin\n* Duncan Coutts\n* Don Stewart\n* Spencer
  Janssen\n* David Himmelstrup\n* Björn Bringert\n* Ross Paterson\n* Einar Karttunen\n*
  John Meacham\n* Ulf Norell\n* Tomasz Zielonka\n* Stefan Karrmann\n* Bryan O'Sullivan\n*
  Bas van Dijk\n* Florian Weimer\n\nFor a full list of contributors, see\n[here](https://github.com/kolmodin/binary/graphs/contributors).\n"
license-name: BSD-3-Clause
