all-versions:
- 0.0.0.0
- 0.0.0.1
author: Jannis
basic-deps:
  base: '>=4 && <5'
changelog: |
  # Changelog

  `bitfield` uses [PVP Versioning][1].

  ## 0.0.0.1

  * Added Ord instance to Bitfield

  ## 0.0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
changelog-type: markdown
description: "<h1 align=\"center\"> bitfield </h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/1Jajen1/bitfield/actions\">\n
  \ <img src=\"https://img.shields.io/github/actions/workflow/status/1Jajen1/bitfield/ci.yml?branch=main\"
  alt=\"CI badge\" />\n</a>\n<a href=\"https://haskell.org\">\n  <img src=\"https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&style=flat-square\"
  alt=\"made with Haskell\"/>\n</a>\n<a href=\"https://hackage.haskell.org/package/bitfield\">\n
  \ <img src=\"https://img.shields.io/hackage/v/bitfield?style=flat-square\" alt=\"Hackage\"
  />\n</a>\n</p>\n\n## Description\n\nGeneric and easy to use bitfields. Pack and
  unpack records into compact representations.\n\n## Example\n\n```haskell\nimport
  Data.Bitfield\n\ndata Example = Example { one :: Word8, two :: Bool, three :: Bool
  } deriving (Show, Generic)\n \nx :: Bitfield Word16 Example\nx = pack $ Example
  5 False True\n\n>>> x\n\"Example { one = 5, two = False, three = True }\"\n>>> get
  @\"two\" x\n\"False\"\n-- Requires OverloadedRecordDot\n>>> x.two\n\"False\"\n>>>
  set @\"three\" x False\n\"Example { one = 5, two = False, three = False }\"\n```\n\n`x`
  is represented using `Word16` instead of the full heap object `Example` and thus
  takes far less memory.\n\n## Custom fields\n\nThere are two important typeclasses
  for working with types in bitfields: `AsRep` and `HasFixedBitSize`.\n\nThe most
  common way to use them is to derive them via either an underlying `Enum` or `Integral`
  instance.\n\n#### Via `Enum`\n\n```haskell\ndata AEnum = A1 | A2 | A3\n  deriving
  stock (Generic, Enum)\n  deriving (HasFixedBitSize, AsRep rep) via (GenericEnum
  AEnum)\n```\n\nThis still requires a `Generic` instance to count the constructors
  of `AEnum` for the `HasFixedBitSize` instance. The resulting field has a size of
  `Log2 NumConstructors` rounded up (`2` bits for `AEnum`). The actual value will
  be constructed using the `Enum` instance, so unless that is derived, the constructor
  order won't matter.\n\n#### Via `Integral`\n\n```haskell\nnewtype SmallInt = UnsafeSmallInt
  Int\n  deriving (HasFixedBitSize, AsRep rep) via (ViaIntegral 5 Int)\n```\n\nThis
  creates a `HasFixedBitSize` instance with a fixed bit size of `5` and a `AsRep`
  instance which reads and writes `5` bit values.\n\nNote: The value is not truncated
  nor is it otherwise checked that the underlying value actually fits into the specified
  bit size. If it is too large it will write over other values!\n\n## Type safety\n\nAny
  operation on a `Bitfield` checks (on the type level) if that `Bitfield` is valid.
  Any field operation also requires a `HasField` instance, guaranteeing that such
  a field exists. The following examples will not compile:\n\n```haskell\ndata Bad1
  = Bad1 { a :: Bool, b :: Word8, c :: Bool }\n\nx :: Bitfield Word8 Bad1\nx = pack
  $ Bad1 True 1 True\n-- Datatype Bad1 needs 10 bits, but the given representation
  Word8 has 8\n\ny :: Bitfield Word16 Bad1 -> Word8\ny b = get @\"test\" b\n-- No
  instance HasField \"test\" Bad1 Word8\n```\n"
description-type: markdown
hash: 896889db41642ec6644c1540f269c2d10c400f3133653df5a6d98e51aee54fb4
homepage: ''
latest: 0.0.0.1
license-name: MIT
maintainer: Jannis <overesch.jannis@gmail.com>
synopsis: Generic and easy to use haskell bitfields
test-bench-deps:
  QuickCheck: '>=2.13 && <2.15'
  base: '>=4 && <5'
  bitfield: '>=0'
  genvalidity: '>=1.0 && <1.2'
  genvalidity-sydtest: '>=1.0 && <1.1'
  sydtest: '>=0.12 && <0.16'
  validity: '>=0.12 && <0.13'
