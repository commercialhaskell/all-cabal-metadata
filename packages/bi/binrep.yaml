homepage: https://github.com/raehik/binrep#readme
changelog-type: markdown
hash: 279a2d3e1946b189cb81bc78be91700b49a9b2b723ed1f09e9d5f2dc16be64bd
test-bench-deps: {}
maintainer: Ben Orchard <thefirstmuffinman@gmail.com>
synopsis: Encode binary representations via types.
changelog: |
  ## 0.1.0 (2022-04-22)
  Initial release.

    * extracted from gtvm-hs
basic-deps:
  cereal: '>=0.5.8.1 && <0.6'
  bytestring: ==0.11.*
  base: '>=4.14 && <5'
  text: ==1.2.*
  refined-with: '>=0.1.0 && <0.2'
  refined: '>=0.6.3 && <0.7'
  aeson: ==2.0.*
all-versions:
- 0.1.0
author: Ben Orchard
latest: 0.1.0
description-type: markdown
description: |
  # binrep
  Haskell data types with their binary representation explicitly built into the
  types. Intended for simple binary file parsing.

  The binary and cereal libraries are for passing Haskell data between other
  binary and cereal users. Thus, data representation is largely obscured. For
  example, in `cereal`, all data is handled in big-endian format. If you use the
  `Serialize` typeclass methods for parsing and serializing, you would never know.

  binrep never makes decisions by itself. You can't parse/serialize a `Word64`
  without either providing the endianness to use at runtime, or encoding the
  endianness into the type.

  See the Hackage documentation for details.
license-name: MIT
