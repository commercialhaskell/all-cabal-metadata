all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.6
- 0.0.7
- 0.0.8
- 0.0.9
- 0.0.10
- 0.0.11
- 0.0.12
- 0.0.13
- 0.0.14
- 0.0.15
- 0.0.16
- 0.0.17
- 0.0.18
- 0.0.19
author: Parker, Matt
basic-deps:
  MissingH: '>=1.1.0.3'
  base: '>=4.0 && <5'
  bytestring: '>=0'
  containers: '>=0'
  data-default: '>=0.2'
  hack: '>=2009.10.30'
  hack-handler-happstack: '>=0'
  haskell98: '>=0'
  mtl: '>=1.1.0.2'
  parsec: '>=2.1.0.1'
  process: '>=0'
  rallod: '>=0'
changelog: ''
changelog-type: ''
description: "# Bird\n\nA sinatra-ish web framework written in haskell, riding on
  top of Hack.\n\n## Why?\n\nSinatra has a beautiful, simple, elegant syntax, but
  it's essentially an attempt to bring pattern matching to a language never intended
  for\npattern matching. Why not attempt something similar in a language with not
  just beautiful pattern matching, but with all the declarative\nbells and whistles:
  lazy evaluation, first-class functions, currying, polymorphism?\n\n## Install\n\n
  \   λ cabal update && cabal install bird\n\nNote: make sure $HOME/.cabal/bin is
  in your PATH.\n\n## Create an app\n\n    λ bird hatch StarWars\n      A fresh bird
  app has been created in StarWars.\n\n## Compile your app\n\n    λ cd StarWars\n
  \   λ bird nest \n      [1 of 2] Compiling StarWars           ( StarWars.hs, StarWars.o
  )\n      [2 of 2] Compiling Main               ( Main.hs, Main.o )\n      Linking
  Main ...\n    λ\n\n\n## Start your app (runs on port 3000)\n\n    λ bird fly\n      A
  bird was just spotted in flight at http://localhost:3000\n\n## Try it out\n\n    λ
  curl http://localhost:3000\n      Hello, Bird!\n\n## Improvise!\n\n    -- StarWars.bird.hs\n
  \   import Data.String.Utils (join)\n\n    get [\"droids\"] = do\n      body \"These
  aren't the droids you're looking for. Move along.\"\n      status 404\n\n    post
  [\"jedi\"] = do\n      name <- param \"name\"\n      teacher <- param \"teacher\"\n
  \     case teacher of \n        Just \"Yoda\" -> body \"The force is strong with
  this one!\"      >> status 201\n        _           -> body \"Sorry. The force is
  not with this one.\"  >> status 400 \n\n\n    get (\"force\":xs) = do\n      body
  $ \"May the force be with you \" ++ (join \", \" xs) ++ \"!\"\n\n    get [] = do\n
  \     name <- param \"name\"\n      log \"I'm about to greet a Jedi. Teehee!\"\n
  \     body $ \"Greetings, \" ++ (maybe \"Jedi!\" id name)\n\nNow recompile your
  app and start it flying:\n\n    λ bird nest\n    λ bird fly &\n\n    λ curl -i http://localhost:3000/force/Han/Chewie\n\n
  \       HTTP/1.1 200 OK\n        Connection: close\n        Content-Type: text/html\n
  \       Date: Sat, 31 Jul 2010 14:07:17 GMT\n        Server: Happstack/0.5.0.2\n\n
  \       May the force be with you Han, Chewie!\n\n    \n    λ curl -i -X POST http://localhost:3000/jedi
  -d name=Luke -d teacher=Yoda\n        \n        HTTP/1.1 201 Created\n        Connection:
  close\n        Content-Type: text/html\n        Date: Sat, 21 Aug 2010 21:38:11
  GMT\n        Server: Happstack/0.5.0.2\n\n        The force is strong with this
  one!\n    \n\n    λ curl -i http://localhost:3000/droids\n\n        HTTP/1.1 404
  Not Found\n        Connection: close\n        Content-Type: text/html\n        Date:
  Sat, 31 Jul 2010 14:08:35 GMT\n        Server: Happstack/0.5.0.2\n\n        These
  aren't the droids you're looking for. Move along.\n\n\n## API\n\nYou have four functions
  to implement: get, post, put, and delete. They each accept a Bird Request.\n\nInside
  the function body, you can use the following methods (don't worry, this is a growing
  list):\n\n    param :: String -> Maybe String\n    -- ex: for the request GET /droids?name=c3po,\n
  \   --     then `p <- param \"name\"' would bind the value `Just \"c3po\"' to the
  variable \"p\"\n\n    body :: String -> BirdResponder ()\n    -- takes a string
  and sets the Http Response body to whatever the string contained.\n\n    status
  :: Integer -> BirdResponder ()\n    -- takes a number, and sets the HTTP Reponse
  header \"Status\" to that number.\n\n    mime :: String -> BirdResponder ()\n    --
  sets the mime type to whatever you provide\n    -- ex: get [] = body \"Hello World\"
  >> mime \"text/plain\"\n\n    header :: String -> String -> BirdResponder ()\n    --
  creates/updates a header\n    -- ex: get [] = body \"Hello World\" >> header \"X-Powered-By\"
  \"BIRD!\"\n\n    log :: String -> BirdResponder ()\n    -- adds to the log\n    --
  ex: get [] = body \"Hello World\" >> log \"Why did I just greet the world?\"\n\n##
  Notes\n\nThis project is *still* in its infancy. Coming features:\n\n* support for
  multipart forms submissions\n* helpers for popular html generation solutions (Hamlet,
  HStringTemplate, HAXML, BlazeHTML, etc.)\n* WAI support\n* static asset serving\n*
  support for sending files\n"
description-type: markdown
hash: d1c92a68bb4c5476f751a5f7b1853d3f9a5f1ed74b1accd82297040cc9f6fa3f
homepage: http://github.com/moonmaster9000/bird
latest: 0.0.19
license-name: BSD-3-Clause
maintainer: Parker, Matt <moonmaster9000@gmail.com>
synopsis: A simple, sinatra-inspired web framework.
test-bench-deps: {}
