all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Bodigrim
basic-deps:
  base: '>=4.5 && <5'
  bit-stream: '>=0'
  ghc-prim: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: |
  # bit-stream

  Lazy, infinite, compact stream of `Bool` with O(1) indexing.
  Most useful for memoization of predicates.

  ## Example 1

  Consider following predicate:

  ```haskell
  isOdd :: Word -> Bool
  isOdd 0 = False
  isOdd n = not (isOdd (n - 1))
  ```

  Its computation is expensive, so we'd like to memoize its values into
  `BitStream` using `tabulate` and access this stream via `index`
  instead of recalculation of `isOdd`:

  ```haskell
  isOddBS :: BitStream
  isOddBS = tabulate isOdd

  isOdd' :: Word -> Bool
  isOdd' = index isOddBS
  ```

  We can do even better by replacing part of recursive calls to `isOdd`
  by indexing memoized values. Write `isOddF`
  such that `isOdd = fix isOddF`:

  ```haskell
  isOddF :: (Word -> Bool) -> Word -> Bool
  isOddF _ 0 = False
  isOddF f n = not (f (n - 1))
  ```

  and use `tabulateFix`:

  ```haskell
  isOddBS :: BitStream
  isOddBS = tabulateFix isOddF

  isOdd' :: Word -> Bool
  isOdd' = index isOddBS
  ```

  ## Example 2

  Define a predicate, which checks whether its argument is
  a prime number by trial division.

  ```haskell
  isPrime :: Word -> Bool
  isPrime n
    | n < 2     = False
    | n < 4     = True
    | even n    = False
    | otherwise = and [ n `rem` d /= 0 | d <- [3, 5 .. ceiling (sqrt (fromIntegral n))], isPrime d]
  ```

  Convert it to unfixed form:

  ```haskell
  isPrimeF :: (Word -> Bool) -> Word -> Bool
  isPrimeF f n
    | n < 2     = False
    | n < 4     = True
    | even n    = False
    | otherwise = and [ n `rem` d /= 0 | d <- [3, 5 .. ceiling (sqrt (fromIntegral n))], f d]
  ```

  Create its memoized version for faster evaluation:

  ```haskell
  isPrimeBS :: BitStream
  isPrimeBS = tabulateFix isPrimeF

  isPrime' :: Word -> Bool
  isPrime' = index isPrimeBS
  ```
description-type: markdown
hash: ff350f6b6bc6810c70defed9bbab90d33651ebbf96d1e1545329118729dca4e8
homepage: https://github.com/Bodigrim/bit-stream#readme
latest: 0.1.0.2
license-name: BSD-3-Clause
maintainer: andrew.lelechenko@gmail.com
synopsis: Lazy, infinite, compact stream of Bool with O(1) indexing.
test-bench-deps:
  QuickCheck: '>=2.10'
  base: '>=4.5 && <5'
  bit-stream: '>=0'
  criterion: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  tasty-smallcheck: '>=0'
  vector: '>=0'
