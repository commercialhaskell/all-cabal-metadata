homepage: https://functionalley.com/BishBosh/bishbosh.html
changelog-type: markdown
hash: 55e07c69c1391915b8b78f20e97472a8783a87ece1b536c434afd6eba9ebf709
test-bench-deps:
  toolshed: '>=0.18'
  extra: -any
  base: '>=4.9 && <5.0'
  filepath: -any
  data-default: -any
  HUnit: -any
  array: '>=0.5.1.1'
  containers: -any
  hxt: -any
  polyparse: -any
  mtl: -any
  random: -any
  deepseq: '>=1.4.1'
  QuickCheck: '>=2.8.2'
  bishbosh: -any
maintainer: mailto:bishbosh@functionalley.com
synopsis: Plays chess.
changelog: "# 2018-01-01 Dr. Alistair Ward <bishbosh@functionalley.com>\n\n## 0.0.0.1\n*
  First version of the package.\n\n## 0.0.0.2\n* Minor changes required to build on
  Windows.\n\n## 0.0.0.3\n* Added **Paths_bishbosh** to **Other-modules** section
  of cabal file.\n\n## 0.0.0.4\n* Changed references to author's domain-name.\n\n##
  0.0.0.5\n* Added ability to specify the text-encoding used in a PGN-database file.\n*
  Updated list of test-compilers.\n\n## 0.0.0.6\n* Fixed failure to persist game-state
  after requesting that the game be restarted.\n* Fixed parsing of **TextEncoding**
  in **PGNOptions**.\n* Replaced module **Distribution.Verbosity** with **BishBosh.Input.Verbosity**.\n\n##
  0.0.0.7\n* Rewrote function **BishBosh.Data.RoseTree.countTerminalNodes** in accordance
  with the suggestions of David Feuer.\n* Amended function **BishBosh.State.EnPassantAbscissa.mkMaybeEnPassantAbscissa**
  to guard against exposing one's King after En-passant capture.\n\n## 0.0.0.8\n*
  Corrected the parsing of FEN when an Enpassant-destination defined on file **b**
  was erroneously interpreted as a bishop in the previous **CastleableRooks** field.\n*
  Added parent class **BishBosh.Property.ExtendedPositionDescription.EPD** for **Property.ForsythEdwards.FEN**,
  for which the latter typically has a default implementation of both methods.\n\n##
  0.1.0.0\n### Bug-fixes:\n* Upgraded the transposition-table in module **Search.DynamicMoveData**,
  from merely recording moves (which doesn't include the rank to which a Pawn is promoted),
  to recording qualified-moves.\n* In function **Search.AlphaBeta.negaMax.descend.selectMax**,
  amended bound function **isFitter** to prefer shorter move-sequences where fitness
  is equal, & corrected the scenario in which all nodes were skipped because they
  were repetitious, but without ever defining alpha.\n\n### Features:\n* Added the
  configurable runtime ability to asynchronously decompress PGN-databases, & to set
  a maximum number of games to read.\n* Added a configuration-option to normalise
  the values of specified piece-square tables into the closed unit-interval.\n* Modularised
  the packaged config-files, by defining XML **External Entities** in the DTD.\n*
  Added suggestions on failure to parse a user-command, & created a module **Text.AutoComplete**
  to contain common code.\n* Added **makefile** to facilitate common tasks.\n* Removed
  the configuration-option **preferMovesTowardsCentre** & its implementation in function
  **Cartesian.Coordinates.radiusSquared**, because of it's conceptually wobbly foundations.\n\n###
  New Runtime Cmmands:\n-----------------------------------------\nCommand\t\t\t\t|
  Purpose\n--------------------------------| -------\n**availableMoves**\t\t| to report
  all available moves from the current position.\n**maxPositionInstances**\t| to reveal
  the maximum number of instances any available position has been visited.\n**reversiblePlyCount**\t\t|
  to count the number of consecutive reversible plies that have been made.\n-----------------------------------------\n\n###
  Command-line Options:\n* Added a new module **Input.CategorisedCommandLineOptions**
  to improved the partitioning of command-line options into functional categories.\n*
  Added a command-line option **--formatPieceSquareTableForGNUPlot** to print the
  piece-square tables in a format suitable for **GNUPlot**.\n\n### Performance:\n*
  Included a compilation-flag **unboxedarrays**, to request the use of unboxed arrays
  where (infrequently) possible.\n* Changed data-type **Component.PieceSquareByCoordinatesByRank.EitherPieceSquareValueByNPiecesByCoordinates**,
  bringing type **Cartesian.Coordinates.ByCoordinates** inside **Either**, leading
  to significant space/time gains.\n* Constructed each large constant data-structure
  in parallel. Bracketed all data-parallel operations with CPP-conditionals controlled
  by the compilation-flag **threaded**.\n* Parallelised function **Attribute.CriterionValue.calculateWeightedMean**.\n\n###
  New Modules:\n-----------------------------------------\nModule\t\t\t\t| Purpose\n--------------------------------|
  -------\n**Component.CastlingMove**\t| Forked from module **Component.Move**.\n**Data.Enum**\t\t\t|
  Currently single-function.\n**Data.Foldable**\t\t| Currently single-function.\n**Property.FixedMembership**\t|
  Defines a class to which sum-types can conform.\n**StateProperty.Censor**\t| Relocated
  from directory **State/**.\n**StateProperty.Mutator**\t| defines a class to express
  the dual implementations within **State.Board**.\n**StateProperty.Seeker**\t| defines
  a class to express the dual implementations within **State.Board**.\n**Text.Case**\t\t\t|
  Forked from **Text.ShowList** to contain case-related operations.\n**Text.Prefix**\t\t\t|
  Forked from **Text.ShowList** to define the constant prefixes of log-messages.\n-----------------------------------------\n\n###
  Testing:\n* Split **src-test/Main.hs** into **src-test/HUnit.hs** & **src-test/QuickCheck.hs**,
  each referenced independently from the cabal file.\n* Added an executable **duel**
  (to coordinate a battle between two independently configured instances of **bishbosh**)
  & a corresponding section-1 man-page.\n* Validated the list of ranks supplied to
  construct either **Attribute.RankValues.RankValues** or **Input.PieceSquareTable.PieceSquareTable**.\n\n###
  Refactoring:\n* Flattened the nested array **Component.Zobrist.getRandomByCoordinatesByRankByLogicalColour**,
  by means of a composite index.\n* Reimplemented function **Cartesian.Coordinates.getLogicalColourOfSquare**.\n*
  Reimplemented function **Cartesian.Coordinates.interpolationsByDestinationBySource**
  in terms of function **Cartesian.Coordinates.extrapolationsByDirectionByCoordinates**.\n*
  Used the **LambdaCase** language-extension.\n\n## 0.1.1.0\n### New Modules:\n---------------------------------------------------------\nNew
  Module\t\t\t\t\t| Purpose\n------------------------------------------------| -------\n**BishBosh.Time.StopWatch**\t\t\t|
  Replaces module **BishBosh.Data.Time** to encapsulate interaction with module **Data.Time.Clock**.\n**BishBosh.Time.GameClock**\t\t\t|
  Contains two **BishBosh.Time.StopWatch**es to enable module **Duel.Process.Intermediary**
  to measure the time used by each player.\n**BishBosh.Property.Switchable**\t\t|
  Exports a type-class, which both **BishBosh.Time.StopWatch** & **BishBosh.Time.GameClock**
  implement, to expose their functionality.\n**BishBosh.Property.SelfValidating**\t\t|
  Exports a type-class, which both **BishBosh.Time.GameClock** & **Duel.Data.Options**
  implement, to validate themselves.\n**BishBosh.Type.Countable**\t\t\t| Defines newtypes
  to enhance type-safety, replacing type-synonyms for **Int**. There is a performance-degradation,
  so this enhancement can be disabled using a new cabal-flag.\n**BishBosh.Type.Crypto**\t\t\t|
  Self-documentation.\n**BishBosh.Type.Length**\t\t\t| Replaced the polymorphic type-parameters
  **row** & **column** with newtypes to enhance type-safety.\n**BishBosh.Type.Mass**\t\t\t\t|
  Self-documentation.\n**BishBosh.Metric.RankValue**\t\t\t| Replaced the polymorphic
  type-parameter **rankValue**, with a newtype & a smart-constructor to guard permissible
  bounds.\n\n### Duel:\n* Added command-line option **--verifyConfiguration**, to
  request that the mutual compatibility of the two configuration-files be verified
  before forwarding each to a forked instance of **bishbosh**.\n\n### BishBosh:\n*
  Created a new directory **Rule/** to which **Model.**{**DrawReason**, **GameTerminationReason**,
  **Result**} were relocated.\n* Refactored functions **BishBosh.ContextualNotation.PositionHashQualifiedMoveTree.findNextOnymousQualifiedMovesForPosition**,
  **BishBosh.Model.MoveFrequency.insertMoves** & **BishBosh.Model.GameTree.toMoveFrequency**.\n*
  Evaluation-criteria:\n\t+ Moved **BishBosh.Attribute.**{**CriterionValue**, **CriterionWeight**,
  **WeightedMeanAndCriterionValues**} to a new directory **Metric/**\n\t+ Implemented
  classes [**Num**, **Fractional**, **Real**] for data-types **BishBosh.Metric.**{**CriterionValue.CriterionValue**,
  **CriterionWeight.CriterionWeight**}, nullifying the requirement for exports.\n\t+
  Replaced the pointless polymorphic payloads in data-types **BishBosh.Metric.**{**CriterionValue.CriterionValue**,
  **CriterionWeight.CriterionWeight**, **WeightedMeanAndCriterionValues.WeightedMeanAndCriterionValues**}
  with concrete types.\n* Moved **BishBosh.Attribute.RankValues** to **BishBosh.Input**.\n*
  Checked that (with the possible exception of the King) the Queen is configured as
  the most valuable rank.\n* Avoided repeated calls from module **BishBosh.Evaluation.Fitness**
  to function **IBishBosh.nput.RankValues.calculateMaximumTotalValue** by adding the
  record-field **BishBosh.Input.EvaluationOptions.getMaximumTotalRankValue**.\n\n"
basic-deps:
  factory: '>=0.3.1'
  toolshed: '>=0.18'
  hxt-relaxng: -any
  extra: -any
  unix: -any
  base: '>=4.9 && <5.0'
  time: -any
  filepath: -any
  process: '>=1.6.4'
  data-default: -any
  array: '>=0.5.1.1'
  containers: -any
  hxt: -any
  polyparse: -any
  mtl: -any
  random: -any
  parallel: '>=3.0'
  deepseq: '>=1.4.1'
  bishbosh: -any
  directory: -any
all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
- 0.0.0.7
- 0.0.0.8
- 0.1.0.0
- 0.1.1.0
author: Dr. Alistair Ward
latest: 0.1.1.0
description-type: markdown
description: |+
  # **BishBosh**

  [![Build Status](https://travis-ci.com/functionalley/BishBosh.svg?branch=master)](https://travis-ci.com/functionalley/BishBosh)
  [![Hackage](https://img.shields.io/hackage/v/bishbosh.svg)](https://hackage.haskell.org/package/bishbosh)
  [![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
  [![Haskell](https://b.repl.ca/v1/language-haskell-yellow.png)](https://haskell.org)

  This is "**BishBosh**", a chess-game which can be rendered in a terminal (emulator) using raw ASCII, or used as an engine by [xboard](https://www.gnu.org/software/xboard/).

  ## Installation

  It can be built & installed using:

  * [Cabal](https://www.haskell.org/cabal/),
  * [The Haskell Tool Stack](https://docs.haskellstack.org/en/stable/README/).

  ## Documentation

  The documentation is in the product's "**man/**" directory & all source-code is documented in [haddock](https://www.haskell.org/haddock/).

  ## License

  For information on copying & distributing this package, see the file "**LICENSE**" in the product's installation-directory.

  ## Bug-reporting

  Bug-reports should be emailed to <bishbosh@functionalley.com>.

  ## Testing

  The test-suite can be run using:

  * "**cabal configure --enable-tests && cabal build && cabal test --show-details=always**",
  * "**stack test**",
  * "**make test**" issued from the product's installation-directory.

  It has only been tested on **Linux**.

  ## Author

  This application is written & maintained by Dr. Alistair Ward.

license-name: GPL-3.0-or-later
