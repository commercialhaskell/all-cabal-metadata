homepage: http://github.com/ekmett/bifunctors/
changelog-type: markdown
hash: 958dfda27c94250e96d2e5cc4d0fc6f3a9002d7a2c8289314a1d7eafee40b50f
test-bench-deps:
  base: '>=4 && <5'
  hspec: '>=1.8'
  bifunctors: -any
  transformers: -any
  QuickCheck: '>=2 && <3'
  template-haskell: -any
  transformers-compat: -any
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Bifunctors
changelog: "5.5.14 [2022.12.07]\r\n-------------------\r\n* Define `Functor`, `Foldable`,
  and `Traversable` instances for `Sum` and\r\n  `Product`.\r\n\r\n5.5.13 [2022.09.12]\r\n-------------------\r\n*
  Make the `Biapplicative` instances for tuples lazy, to match their `Bifunctor`\r\n
  \ instances.\r\n\r\n5.5.12 [2022.05.07]\r\n-------------------\r\n* Backport an
  upstream GHC change which removes the default implementation of\r\n  `bitraverse`.
  Per the discussion in\r\n  https://github.com/haskell/core-libraries-committee/issues/47,
  this default\r\n  implementation was completely broken, as attempting to use it
  would always\r\n  result in an infinite loop.\r\n\r\n5.5.11 [2021.04.30]\r\n-------------------\r\n*
  Allow building with `template-haskell-2.18` (GHC 9.2).\r\n\r\n5.5.10 [2021.01.21]\r\n-------------------\r\n*
  Fix a bug in which `deriveBifoldable` could generate code that triggers\r\n  `-Wunused-matches`
  warnings.\r\n\r\n5.5.9 [2020.12.30]\r\n------------------\r\n* Explicitly mark modules
  as Safe or Trustworthy.\r\n\r\n5.5.8 [2020.10.01]\r\n------------------\r\n* Fix
  a bug in which `deriveBifunctor` would fail on sufficiently complex uses\r\n  of
  rank-n types in constructor fields.\r\n* Fix a bug in which `deriveBiunctor` and
  related functions would needlessly\r\n  reject data types whose two last type parameters
  appear as oversaturated\r\n  arguments to a type family.\r\n\r\n5.5.7 [2020.01.29]\r\n------------------\r\n*
  Add `Data.Bifunctor.Biap`.\r\n\r\n5.5.6 [2019.11.26]\r\n------------------\r\n*
  Add `Category`, `Arrow`, `ArrowChoice`, `ArrowLoop`, `ArrowZero`, and\r\n  `ArrowPlus`
  instances for `Data.Bifunctor.Product`.\r\n\r\n5.5.5 [2019.08.27]\r\n------------------\r\n*
  Add `Eq{1,2}`, `Ord{1,2}`, `Read{1,2}`, and `Show{1,2}` instances for data\r\n  types
  in the `Data.Bifunctor.*` module namespace where possible. The\r\n  operative phrase
  is \"where possible\" since many of these instances require\r\n  the use of `Eq2`/`Ord2`/`Read2`/`Show2`,
  which are not avaiable when\r\n  built against `transformers-0.4.*`.\r\n\r\n5.5.4
  [2019.04.26]\r\n------------------\r\n* Support `th-abstraction-0.3` or later.\r\n*
  Don't incur a `semigroup` dependency on recent GHCs.\r\n\r\n5.5.3 [2018.07.04]\r\n------------------\r\n*
  Make `biliftA2` a class method of `Biapplicative`.\r\n* Add the `traverseBia`, `sequenceBia`,
  and `traverseBiaWith` functions for\r\n  traversing a `Traversable` container in
  a `Biapplicative`.\r\n* Avoid incurring some dependencies when using recent GHCs.\r\n\r\n5.5.2
  [2018.02.06]\r\n------------------\r\n* Don't enable `Safe` on GHC 7.2.\r\n\r\n5.5.1
  [2018.02.04]\r\n------------------\r\n* Test suite fixes for GHC 8.4.\r\n\r\n5.5
  [2017.12.07]\r\n----------------\r\n* `Data.Bifunctor.TH` now derives `bimap`/`bitraverse`\r\n
  \ implementations for empty data types that are strict in the argument.\r\n* `Data.Bifunctor.TH`
  no longer derives `bifoldr`/`bifoldMap` implementations\r\n  that error on empty
  data types. Instead, they simply return the folded state\r\n  (for `bifoldr`) or
  `mempty` (for `bifoldMap`).\r\n* When using `Data.Bifunctor.TH` to derive `Bifunctor`
  or `Bitraversable`\r\n  instances for data types where the last two type variables
  are at phantom\r\n  roles, generated `bimap`/`bitraverse` implementations now use
  `coerce` for\r\n  efficiency.\r\n* Add `Options` to `Data.Bifunctor.TH`, along with
  variants of existing\r\n  functions that take `Options` as an argument. For now,
  the only configurable\r\n  option is whether derived instances for empty data types
  should use the\r\n  `EmptyCase` extension (this is disabled by default).\r\n\r\n5.4.2\r\n-----\r\n*
  Make `deriveBitraversable` use `liftA2` in derived implementations of `bitraverse`
  when possible, now that `liftA2` is a class method of `Applicative` (as of GHC 8.2)\r\n*
  Backport slightly more efficient implementations of `bimapDefault` and `bifoldMapDefault`\r\n\r\n5.4.1\r\n-----\r\n*
  Add explicit `Safe`, `Trustworthy`, and `Unsafe` annotations. In particular, annotate
  the `Data.Bifoldable` module as `Trustworthy` (previously, it was inferred to be
  `Unsafe`).\r\n\r\n5.4\r\n---\r\n* Only export `Data.Bifoldable` and `Data.Bitraversable`
  when building on GHC < 8.1, otherwise they come from `base`\r\n* Allow TH derivation
  of `Bifunctor` and `Bifoldable` instances for datatypes containing unboxed tuple
  types\r\n\r\n5.3\r\n---\r\n* Added `bifoldr1`, `bifoldl1`, `bimsum`, `biasum`, `binull`,
  `bilength`, `bielem`, `bimaximum`, `biminimum`, `bisum`, `biproduct`, `biand`, `bior`,
  `bimaximumBy`, `biminimumBy`, `binotElem`, and `bifind` to `Data.Bifoldable`\r\n*
  Added `Bifunctor`, `Bifoldable`, and `Bitraversable` instances for `GHC.Generics.K1`\r\n*
  TH code no longer generates superfluous `mempty` or `pure` subexpressions in derived
  `Bifoldable` or `Bitraversable` instances, respectively\r\n\r\n5.2.1\r\n----\r\n*
  Added `Bifoldable` and `Bitraversable` instances for `Constant` from `transformers`\r\n*
  `Data.Bifunctor.TH` now compiles warning-free on GHC 8.0\r\n\r\n5.2\r\n-----\r\n*
  Added several `Arrow`-like instances for `Tannen` so we can use it as the Cayley
  construction if needed.\r\n* Added `Data.Bifunctor.Sum`\r\n* Added `BifunctorFunctor`,
  `BifunctorMonad` and `BifunctorComonad`.\r\n* Backported `Bifunctor Constant` instance
  from `transformers`\r\n\r\n5.1\r\n---\r\n* Added `Data.Bifunctor.Fix`\r\n* Added
  `Data.Bifunctor.TH`, which permits `TemplateHaskell`-based deriving of `Bifunctor`,
  `Bifoldable` and `Bitraversable` instances.\r\n* Simplified `Bitraversable`.\r\n\r\n5\r\n-\r\n*
  Inverted the dependency on `semigroupoids`. We can support a much wider array of
  `base` versions than it can.\r\n* Added flags\r\n\r\n4.2.1\r\n-----\r\n* Support
  `Arg` from `semigroups` 0.16.2\r\n* Fixed a typo.\r\n\r\n4.2\r\n---\r\n* Bumped
  dependency on `tagged`, which is required to build cleanly on GHC 7.9+\r\n* Only
  export `Data.Bifunctor` when building on GHC < 7.9, otherwise it comes from `base`.\r\n\r\n4.1.1.1\r\n-------\r\n*
  Added documentation for 'Bifoldable' and 'Bitraversable'\r\n\r\n4.1.1\r\n-----\r\n*
  Added `Data.Bifunctor.Join`\r\n* Fixed improper lower bounds on `base`\r\n\r\n4.1.0.1\r\n-------\r\n*
  Updated to BSD 2-clause license\r\n\r\n4.1\r\n---\r\n* Added product bifunctors\r\n\r\n4.0\r\n---\r\n*
  Compatibility with `semigroupoids` 4.0\r\n\r\n3.2\r\n---\r\n* Added missing product
  instances for `Biapplicative` and `Biapply`.\r\n\r\n3.1\r\n-----\r\n* Added `Data.Biapplicative`.\r\n*
  Added the `Clown` and `Joker` bifunctors from Conor McBride's \"Clowns to the left
  of me, Jokers to the right.\"\r\n* Added instances for `Const`, higher tuples\r\n*
  Added `Tagged` instances.\r\n\r\n3.0.4\r\n-----\r\n* Added `Data.Bifunctor.Flip`
  and `Data.Bifunctor.Wrapped`.\r\n\r\n3.0.3\r\n---\r\n* Removed upper bounds from
  my other package dependencies\r\n"
basic-deps:
  base: '>=4.3 && <5'
  comonad: '>=5.0.7 && <6'
  base-orphans: '>=0.8.4 && <1'
  th-abstraction: '>=0.4.2.0 && <0.5'
  tagged: '>=0.8.6 && <1'
  containers: '>=0.2 && <0.7'
  transformers: '>=0.3 && <0.7'
  template-haskell: '>=2.4 && <2.20'
  transformers-compat: '>=0.5 && <0.8'
all-versions:
- '0.1'
- 0.1.1
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.3.3
- '3.0'
- 3.0.1
- 3.0.2
- 3.0.3
- 3.0.4
- '3.1'
- '3.2'
- 3.2.0.1
- '4.0'
- '4.1'
- 4.1.0.1
- 4.1.1
- 4.1.1.1
- '4.2'
- 4.2.1
- '5'
- '5.1'
- '5.2'
- 5.2.1
- '5.3'
- 5.4.1
- 5.4.2
- '5.5'
- 5.5.1
- 5.5.2
- 5.5.3
- 5.5.4
- 5.5.5
- 5.5.6
- 5.5.7
- 5.5.8
- 5.5.9
- 5.5.10
- 5.5.11
- 5.5.12
- 5.5.13
- 5.5.14
author: Edward A. Kmett
latest: 5.5.14
description-type: markdown
description: "bifunctors\r\n==========\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/bifunctors.svg)](https://hackage.haskell.org/package/bifunctors)
  [![Build Status](https://github.com/ekmett/bifunctors/workflows/Haskell-CI/badge.svg)](https://github.com/ekmett/bifunctors/actions?query=workflow%3AHaskell-CI)\r\n\r\nContact
  Information\r\n-------------------\r\n\r\nContributions and bug reports are welcome!\r\n\r\nPlease
  feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.\r\n\r\n-Edward
  Kmett\r\n"
license-name: BSD-3-Clause
