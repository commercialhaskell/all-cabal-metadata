all-versions:
- 0.1.0.0
author: Lev135
basic-deps:
  base: ^>=4.14.3.0
  template-haskell: '>=0'
changelog: "0.1.0.0\r\n---\r\nFirst version. Not released yet\r\n"
changelog-type: markdown
description: "bidirectional-instances\r\n===\r\n\r\nThis is a haskell package to provide
  wrapper class and useful template haskell\r\ninstance-generator functions for bidirectional
  instances, i. e. for instance\r\n```hs\r\ninstance (A a, B b) => C (Foo a b)\r\n```\r\ndeduce
  not only `forall a b. (A a, B b) => C (Foo a b)`, but also\r\n`forall a b. C (Foo
  a b) => A a` and `forall a b. C (Foo a b) => B b`.\r\nThis behavior doesn't implemented
  in modern GHC version, but its very intuitive\r\n(and, of course, sound) if there
  are no overlapping instances for `C (Foo a b)`.\r\n\r\nThere was a [paper](https://arxiv.org/pdf/1906.12242.pdf),
  related to this \r\nfeature and an attempt to \r\n[implement it as GHC extension](https://github.com/KoenP/ghc-proposals/blob/patch-1/proposals/0000-bidirectional-instances.md).\r\nIn
  the discussion about alternatives for that extension this solution \r\n[was mentioned](https://github.com/KoenP/ghc-proposals/blob/patch-1/proposals/0000-bidirectional-instances.md#using-constraint-kinds),\r\nbut
  was discarded as \"decidedly nontrivial, and some boilerplate is still \r\nrequired,
  which needs to be written for every instance\".\r\nTo reduce these downsides, instances
  from this package are made more general\r\nand template haskell function for generating
  boilerplate code are provided.\r\nI suppose that implementation this as an compiler
  extension probably would be \r\nbetter for performance, but I don't have enough
  qualification to implement it.\r\n\r\nDocumentation\r\n---\r\nDetailed documentation
  with examples can be found in the main module \r\n*(Control.Bidirectional)*.\r\n\r\nUsage\r\n---\r\nAll
  function and classes you need to work with are exported from \r\n`Control.Bidirectional`.\r\n\r\nTo
  be implemented somewhere in the future\r\n---\r\nI'll try to make a GHC plugin to
  improve this solution in two directions:\r\n- no need for template haskell\r\n-
  more intuitive syntax\r\n\r\nMore precisely, I'd like to have the following syntax
  for declaring \r\nbidirectional instances:\r\n```hs\r\ninstance {-# BIDIRECTIONAL
  #-} (A a, B b) => C (Foo a b)\r\n```\r\nand `-XBidirectionalInstances` to make all
  instances without \r\n`OVERLAPS`/`OVERLAPPING`/`OVERLAPPABLE` bidirectional by default.\r\n\r\n"
description-type: markdown
hash: 350c9e7657278182184b4f77cd90f0f94ad4af930d34e022019fcbf25b07fb8d
homepage: https://github.com/Lev135/bidirectional-instances
latest: 0.1.0.0
license-name: MIT
maintainer: lev_135@mail.ru
synopsis: Make instance constraints bidirectional
test-bench-deps:
  base: ^>=4.14.3.0
  bidirectional-instances: '>=0'
  mtl: '>=0'
  transformers: '>=0'
