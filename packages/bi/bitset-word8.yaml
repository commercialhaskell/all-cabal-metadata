all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
author: Naoto Shimazaki
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  template-haskell: '>=0'
  th-lift-instances: '>=0'
changelog: |
  ## Bitset-word8 0.1.1.2

  * Include .cabal file in source repo.
  * Migrate CI from Travis to GitHub Actions.
  * Build and test for multiple platforms and GHC versions.

  ## Bitset-word8 0.1.1.1

  * Move to hpack from hand written cabal project file.

  ## Bitset-word8 0.1.1.0

  * Changed backend from ByteString to unboxed Word64 based on benchmark result.
  * Added benchmarks with some backend implementations.

  ## Bitset-word8 0.1.0.1

  * Minor modifications in documents.

  ## Bitset-word8 0.1.0.0

  * Initial release.
changelog-type: markdown
description: |
  # bitset-word8

  [![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)
  [![Build Status](https://github.com/nshimaza/bitset-word8/workflows/build/badge.svg)](https://github.com/nshimaza/bitset-word8/actions?query=workflow%3Abuild)
  [![Hackage](https://img.shields.io/hackage/v/bitset-word8.svg?style=flat)](https://hackage.haskell.org/package/bitset-word8)
  [![Stackage Nightly](http://stackage.org/package/bitset-word8/badge/nightly)](http://stackage.org/nightly/package/bitset-word8)
  [![Stackage LTS](http://stackage.org/package/bitset-word8/badge/lts)](http://stackage.org/lts/package/bitset-word8)

  Space efficient set of `Word8` and some pre-canned sets useful for parsing HTTP related `ByteString`.
  This package is intended to provide O(1) membership test on any subset of ASCII and Latin-1 character set
  in order to write efficient HTTP related parser.

  ### Creating your own set

  You can create your own set by `fromList`.

  ```haskell
  myCharSet :: BitSetWord8
  myCharSet = fromList [ 'Y', 'y', 'N', 'n' ]
  ```

  You can create pre-evaluated set using Template Haskell.

  ```haskell
  {-# LANGUAGE TemplateHaskell #-}
  import Language.Haskell.TH.Syntax (Lift, lift)

  myPreEvaluatedCharSet :: BitSetWord8
  myPreEvaluatedCharSet = $(lift myCharSet)
  ```

  ### Example Usage

  ```haskell
  import Data.Attoparsec.ByteString

  -- | Parse RFC7230 token.
  token :: Parser ByteString
  token = takeWhile1 (member rfc7230TChar)
  ```
description-type: markdown
hash: ddc28f40c573f0630779fe54a83295dabb2cdfbccae5bdcb2abee70eb53661fe
homepage: https://github.com/nshimaza/bitset-word8#readme
latest: 0.1.1.2
license-name: MIT
maintainer: Naoto.Shimazaki@gmail.com
synopsis: Space efficient set of Word8 and some pre-canned sets useful for parsing
  HTTP
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  bitset-word8: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  hspec: '>=0'
  template-haskell: '>=0'
  th-lift-instances: '>=0'
  vector: '>=0'
