homepage: https://code.mathr.co.uk/bitwise
changelog-type: ''
hash: 2499779e8c9d59b3d8660e4994d357328750de8b4d1076c9924fb93404fa4c3a
test-bench-deps:
  bytestring: -any
  base: -any
  criterion: '>=0.6 && <1.6'
  array: -any
  bitwise: -any
  QuickCheck: '>=2.4 && <2.15'
maintainer: claude@mathr.co.uk
synopsis: fast multi-dimensional unboxed bit packed Bool arrays
changelog: ''
basic-deps:
  bytestring: <0.11
  base: '>=4.7 && <4.16'
  array: <0.6
all-versions:
- '0.1'
- 0.1.0.1
- 0.1.0.2
- 0.1.1
- 0.1.1.1
- '0.2'
- 1.0.0.1
author: Claude Heiland-Allen
latest: 1.0.0.1
description-type: haddock
description: |-
  Unboxed multidimensional bit packed Bool arrays with fast aggregate
  operations based on lifting Bool operations to bitwise operations.

  There are many other bit packed structures out there, but none met
  all of these requirements:

  (1) unboxed bit packed Bool array,

  (2) multi-dimensional indexing,

  (3) fast (de)serialization, or interoperable with foreign code,

  (4) fast aggregate operations (fold, map, zip).

  Quick tour of the bitwise library:

  [Data.Bits.Bitwise] Lift boolean operations on 'Bool' to bitwise
  operations on 'Data.Bits.Bits'.

  [Data.Array.BitArray] Immutable bit arrays.

  [Data.Array.BitArray.ST] Mutable bit arrays in 'Control.Monad.ST.ST'.

  [Data.Array.BitArray.IO] Mutable bit arrays in 'IO'.

  [Data.Array.BitArray.ByteString] (De)serialization.

  [Codec.Image.PBM] Portable bitmap monochrome 2D image format.

  Very rough performance benchmarks:

  * immutable random access single bit reads:
  @BitArray ix@ is about 40% slower than @UArray ix Bool@,

  * 'Control.Monad.ST.ST' mutable random access single bit reads:
  @STBitArray s ix@ is about the same as @STUArray s ix Bool@,

  * immutable map @Bool -> Bool@:
  @BitArray ix@ is about 85x faster than @UArray ix Bool@,

  * immutable zipWith @Bool -> Bool -> Bool@:
  @BitArray ix@ is about 1300x faster than @UArray ix Bool@.
license-name: BSD-3-Clause
