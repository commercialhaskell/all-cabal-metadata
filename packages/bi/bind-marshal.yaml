all-versions:
- '0.1'
author: Corey O'Connor <coreyoconnor@gmail.com>
basic-deps:
  base: '>=4.4 && <4.5'
  bytestring: '>=0.9 && <0.10'
  containers: '>=0.4 && <0.5'
  deepseq: '>=1.1 && <1.2'
  ghc-prim: '>=0'
  monads-tf: '>=0.1 && <0.2'
  mtl: '>=2.0 && <2.1'
  numeric-prelude: '>=0.2 && <0.3'
  random: '>=1.0 && <1.1'
  stm: '>=2.2 && <2.3'
  strict: '>=0.3 && <0.4'
  transformers: '>=0.2 && <0.3'
  type-level-tf: '>=0.2.1'
  unix: '>=2.5 && <2.6'
changelog: ''
changelog-type: ''
description: "bind-marshal\n\nA (in development) high performance data marshaling
  layer for haskell. Uses a pair of parameterized\nmonads to represent: Data marshalling
  actions with static buffering requirements (EG: Needs no more\nthan 100 bytes available
  to succeed) ; Data marshalling actions with a dynamic composition of\nactions with
  static buffering requirements.\n\nCurrently bind-marshal can only be used via dev-system.
  A build/run/test dev tool I have not\ncurrently released. Sorry!\n\nThe static buffering
  actions parameterize a monad with the maximum number of bytes that will either\nbe
  read/written from/to a buffer. A type level number is used to represent the maximum
  number of\nbytes. \n\nFor example, this expression represents a serialization action
  that writes at most 8 bytes in host\nendian order:\n\nfoo :: StaticSerAction D8
  () -- D8 is the type level representation of 8\nfoo = do\n    ser (256 :: Word32)
  -- ser for serialize\n    ser (13 :: Word32)\n    static_return ()\n\nA more complex
  example would be:\nbar :: StaticSerAction D16 ()\nbar = do\n    _ <- foo\n    _
  <- foo\n    static_return ()\n\nA note on syntax: The \"static_return\" is equivalent
  to \"return\" except it plays nicely with the\nmechanism that infers the buffer
  requirements. Actually, due to the use of parameterized monads\n\"return\" cannot
  be used. Instead \"returnM\" must be used which properly interacts with the\nparameterized
  monad machinery. So a more accurate statement would be that \"static_return\" is\nequivalent
  to \"returnM\".\n\nStatic actions are useful for basic structures. However, most
  structures contain components whose\nmarshalled size are dynamic; Not known at compile
  time. \n\nBind-marshal represents these cases with the the Dynamic actions: DynamicSerAction,\nDynamicDesAction.
  Which are actions composed of individual static actions. Where before each static\naction
  is a check that assures the buffer satisfies the requirements of the static action.
  \n\nFor example, the following action:\n\npew i = do \n    replicateM i $ dyn_action
  $ do      \n        x :: Word32 <- des              \n        y :: Word32 <- des
  \             \n        static_return ()\n\nIs evaluated (more or less) like so:\n
  \   0. For i times\n        a. Verify there is at least 8 bytes available to read\n
  \       b. Read 4 bytes\n        c. Read 4 bytes\n\n\nCurrently a \"dyn_action\"
  is required to \"lift\" a static action into a dynamic action monad. This\nshould
  be automatic, but I have thus failed to get automatic lifting to work as a user
  expects. In\nthe currently implementation: If the dyn_action is ommited the equation
  will fail to type check. \n\n"
description-type: text
hash: 0e2fc93f0a9291dd2494b929bfc6ede9ee72f30faa07eb20ed26e0aabcdb1ad3
homepage: https://github.com/coreyoconnor/bind-marshal
latest: '0.1'
license-name: BSD-3-Clause
maintainer: Corey O'Connor <coreyoconnor@gmail.com>
synopsis: Data marshaling library that uses type level equations to optimize buffering.
test-bench-deps: {}
