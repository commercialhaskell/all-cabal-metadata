homepage: http://www.kb.ecei.tohoku.ac.jp/~kztk/b18n-combined/desc.html
changelog-type: ''
hash: 82e4bdfb66e0037587961722a9c3f6834796b74d472885bf5efe9478dec878bb
test-bench-deps: {}
maintainer: kztk@kb.ecei.tohoku.ac.jp
synopsis: Prototype Implementation of Combining Syntactic and Semantic Bidirectionalization
  (ICFP'10)
changelog: ''
basic-deps:
  bytestring: -any
  unix: -any
  base: ==4.*
  xhtml: -any
  hint: '>=0.3.2'
  parsec: -any
  containers: -any
  utf8-string: -any
  cgi: -any
  mtl: -any
  pretty: -any
  template-haskell: -any
  directory: -any
all-versions:
- '0.1'
- 0.1.0.1
author: Kazutaka Matsuda, Joachim Breitner
latest: 0.1.0.1
description-type: text
description: " `b18n-combined`: Combining Syntactic and Semantic Bidirectionalization\n======================================================================\n\nWhat's
  This?\n------------\n\nThis program, `b18n-combined`, is a prototype implementation
  of\nthe paper \"Combining Syntactic and Semantic Bidirectionalization\" \nwritten
  by Janis Voigtl&auml;nder, Zhenjiang Hu, Kazutaka Matsuda,\nand Meng Wang, which
  is accepted at ICFP'10.\n\nThe program takes input program describing a view function
  that constructs a view from a source, \nand generates a put-back function that reflects
  updates on the view to the source. \nThanks to combination of syntactic and semantic
  bidirectionalization, \nthe program can generates effective put-back functions in
  the sense that\nthe generated put-back functions can put back more updates than
  \nthose obtained by either of syntactic/semantic bidirectionalization.\n\nOnline
  Version\n--------------\n\nA [CGI version] of the program is provided for your convenience.\n\n[CGI
  version]: http://www.kb.ecei.tohoku.ac.jp/~kztk/b18n-combined/\n\n\nExample\n-------\n
  \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.shell}\n$ cat example/init.txt
  \ninit []          = []\ninit [a]         = []\ninit (a:b:x)     = a:initWork b
  x\ninitWork a []    = []\ninitWork a (b:x) = a:initWork b x\n$ ./dist/build/b18n-combined/b18n-combined
  example/sieve.txt -syn -hs\nimport Control.Monad\nimport BUtil\ndata Cmpl t0 t1\n
  \   = Csieve_Cmpl_1\n    | Csieve_Cmpl_2 t0\n    | Csieve_Cmpl_3 t1 (Cmpl t0 t1)\nsieve
  ([]) = []\nsieve (a : []) = []\nsieve (a : (b : x)) = b : sieve (x)\nsieve_B s v
  = head (sieve_T_I v (sieve_Cmpl s))\nsieve_Cmpl ([]) = Csieve_Cmpl_1\nsieve_Cmpl
  (a : []) = Csieve_Cmpl_2 a\nsieve_Cmpl (a : (b : x)) = Csieve_Cmpl_3 a (sieve_Cmpl
  (x))\nsieve_T_I x1 x2 = mplus (sieve_T_I_1 x1 x2) (mplus (sieve_T_I_2 x1 x2) (mplus
  (sieve_T_I_3 x1 x2) mzero))\nsieve_T_I_1 [] (Csieve_Cmpl_1) = do return ([])\nsieve_T_I_1
  _ _ = mzero\nsieve_T_I_2 [] (Csieve_Cmpl_2 a) = do return (a : [])\nsieve_T_I_2
  _ _ = mzero\nsieve_T_I_3 (b : tv1) (Csieve_Cmpl_3 a\n                                     tc1)
  = do (x) <- sieve_T_I tv1 tc1\n                                               return
  (a : (b : x))\nsieve_T_I_3 _ _ = mzero\n$ ./b18n-combined example/sieve.txt -sem\nimport
  Data.Bff\nimport BUtil\nsieve_B s v\n    = bff Main.sieve s v\nsieve ([]) = []\nsieve
  (a : []) = []\nsieve (a : (b : x)) = b : sieve (x)\n$ ./b18n-combined example/sieve.txt
  -comb \nimport Control.Monad\nimport BUtil\nsieve_Bb bias s v\n    = gen_put_bias
  bias Main.sieve(\\x y -> castError $ (sieve_22_B $! x) $! y) s v\nsieve_Bbd = withDefaultBias
  sieve_Bb\nsieve_Bd = withDefault sieve_B\nsieve_B s v = sieve_Bb rear s v\ndata
  Cmpl\n    = Csieve_22_Cmpl_1\n    | Csieve_22_Cmpl_2\nsieve ([]) = []\nsieve (a
  : []) = []\nsieve (a : (b : x)) = b : sieve (x)\nsieve_22_B s v = head (sieve_22_T_I
  v (sieve_22_Cmpl s))\nsieve_22_Cmpl (Z) = Csieve_22_Cmpl_1\nsieve_22_Cmpl (S (Z))
  = Csieve_22_Cmpl_2\nsieve_22_Cmpl (S (S x)) = sieve_22_Cmpl (x)\nsieve_22_T_I x1
  x2 = mplus (sieve_22_T_I_1 x1 x2) (mplus (sieve_22_T_I_2 x1 x2) (mplus (sieve_22_T_I_3
  x1 x2) mzero))\nsieve_22_T_I_1 (Z) (Csieve_22_Cmpl_1) = do return (Z)\nsieve_22_T_I_1
  _ _ = mzero\nsieve_22_T_I_2 (Z) (Csieve_22_Cmpl_2) = do return (S Z)\nsieve_22_T_I_2
  _ _ = mzero\nsieve_22_T_I_3 (S tv1) tc1 = do (x) <- sieve_22_T_I tv1 tc1\n                                return
  (S (S x))\nsieve_22_T_I_3 _ _ = mzero\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHow
  to Build Using cabal-install\n--------------------------------\n\nIf you have [cabal-install]
  (part of the Haskell Platform) available on your system, you can install b18n-combined
  using the command\n\n    cabal install bidirectionalization-combined\n\n[cabal-install]:
  http://haskell.org/cabal/download.html\n\nHow to Build Manually\n---------------------\n\n\n
  \ 0. Install [GHC] and make sures that following Haskell packages \n     are installed.\n
  \    * mtl, template-haskell, containers, pretty, parsec (for web interface: directory,
  xhtml, cgi, utf8-string, bytestring, unix, hint >= 0.3.2)\n  1. Get the source tarball
  from \n     [./bidirectionalization-combined-0.1.tar.gz](./bidirectionalization-combined-0.1.tar.gz)
  or from [hackage].\n  2. Unfold the source tarball\n     * `tar zxvf bidirectionalization-combined-0.1.tar.gz`
  \n  3. Build the executables by \n     1. `runhaskell Setup.hs configure`\n     2.
  `runhaskell Setup.hs build`\n    \nNote that the source code is also available via
  darcs.\n\n     darcs get http://www.kb.ecei.tohoku.ac.jp/~kztk/darcs/sem_syn/\n\n[GHC]:
  http://www.haskell.org/ghc/\n[hackage]: http://hackage.haskell.org/package/bidirectionalization-combined\n\n\nLimitation\n----------\n\nCurrent
  implementation can handle lists only.\n\n<div class=\"footer\">\n\n----------------------------------------------------\n<address>Kazutaka
  Matsuda: <kztk@kb.ecei.tohoku.ac.jp>.</address>\n\n<p>The first version of this
  page was published in Jul. 29th, 2010.</p>\n\n</div>\n\n"
license-name: LicenseRef-PublicDomain
