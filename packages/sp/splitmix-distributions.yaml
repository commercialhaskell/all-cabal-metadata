homepage: https://github.com/ocramz/splitmix-distributions#readme
changelog-type: markdown
hash: 0591e1a88f4f9ec1dea91d201bfc9ca06ee3c62717f8d4d6ae11d69266790b8d
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: -any
  splitmix: -any
  erf: -any
  splitmix-distributions: -any
  mtl: -any
  transformers: -any
maintainer: ocramz
synopsis: Random samplers for some common distributions, based on splitmix.
changelog: |+
  0.3 :

  - type signatures of all generators are now parametrized over some Monad m rather than Identity. This allows for more flexibility on the use site.

  0.2 :

  - add Pareto, Dirichlet, multinomial distributions

basic-deps:
  base: '>=4.7 && <5'
  splitmix: -any
  erf: -any
  mtl: -any
  transformers: -any
all-versions:
- 0.1.0.0
- 0.3.0.0
author: Marco Zocca
latest: 0.3.0.0
description-type: markdown
description: |
  # splitmix-distributions

  Random samplers for some common distributions, as well as a convenient interface for composing them, based on `splitmix`.


  ## Usage

  Compose your random sampler out of simpler ones thanks to the Applicative and Monad interface, e.g. this is how you would declare and sample a binary mixture of Gaussian random variables:


      import Control.Monad (replicateM)
      import System.Random.SplitMix.Distributions (Gen, sample, bernoulli, normal)

      process :: Gen Double
      process = do
          coin <- bernoulli 0.7
          if coin
          then
              normal 0 2
          else
              normal 3 1

      dataset :: [Double]
      dataset = sample 1234 $ replicateM 20 process


  and sample your data in a pure (`sample`) or monadic (`sampleT`) setting.

  ## Implementation details

  The library is built on top of `splitmix`, so the caveats on safety and performance that apply there are relevant here as well.
license-name: BSD-3-Clause
