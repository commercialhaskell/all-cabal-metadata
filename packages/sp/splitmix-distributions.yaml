all-versions:
- 0.1.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.9.0.0
- 1.0.0
- 1.1.0
author: Marco Zocca
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  erf: '>=0'
  exceptions: '>=0'
  mtl: '>=0'
  splitmix: '>=0'
  transformers: '>=0'
changelog: "1.1\n\n- add sampleRunT and samplesRunT: both return the final state of
  the PRNG as a tuple of Word64\n- add unit test that asserts that sample runs are
  deterministic given the same starting PRNG state\n- \n\n1.0\n\n- add MonadReader
  r (GenT m) instance\n- fixed MonadState (GenT m) instance via MonadTrans (i.e. as
  done in 'mtl')\n\n0.9 :\n\n- ensure it builds with ghc 8.6.5 (== stackage lts 14.27)
  as well\n- relax lower bound\n\n0.8 :\n\n- add `exceptions` dependency\n- add MonadThrow
  (GenT m) instance\n\n0.7 :\n\n- add sampleIO, samplesIO\n- clarify pure vs IO-based
  sampling in the docs\n\n0.6 :\n\n- add Chinese Restaurant Process\n\n0.5 :\n\n-
  add Log-normal, Laplace, Weibull distributions\n\n0.4 :\n\n- add Discrete, Categorical,
  Zipf-Mandelbrot distributions\n\n0.3 :\n\n- type signatures of all generators are
  now parametrized over some Monad m rather than Identity. This allows for more flexibility
  on the use site.\n\n0.2 :\n\n- add Pareto, Dirichlet, multinomial distributions\n\n"
changelog-type: markdown
description: |
  # splitmix-distributions

  [![Haskell CI](https://github.com/ocramz/splitmix-distributions/actions/workflows/ci.yaml/badge.svg)](https://github.com/ocramz/splitmix-distributions/actions/workflows/ci.yaml)

  Random samplers for some common distributions, as well as a convenient interface for composing them, based on `splitmix`.


  ## Usage

  Compose your random sampler out of simpler ones thanks to the Applicative and Monad interface, e.g. this is how you would declare and sample a binary mixture of Gaussian random variables:


      import Control.Monad (replicateM)
      import System.Random.SplitMix.Distributions (Gen, sample, bernoulli, normal)

      process :: Gen Double
      process = do
          coin <- bernoulli 0.7
          if coin
          then
              normal 0 2
          else
              normal 3 1

      dataset :: [Double]
      dataset = sample 1234 $ replicateM 20 process


  and sample your data in a pure (`sample`) or monadic (`sampleT`) setting.

  ## Implementation details

  The library is built on top of `splitmix`, so the caveats on safety and performance that apply there are relevant here as well.
description-type: markdown
hash: bd5efc24685f9dccd50fd7d86ff1ba9ae5d75da19da3ebeb1951547c6e583d33
homepage: https://github.com/ocramz/splitmix-distributions#readme
latest: 1.1.0
license-name: BSD-3-Clause
maintainer: ocramz
synopsis: Random samplers for some common distributions, based on splitmix.
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=0'
  splitmix-distributions: '>=0'
