all-versions:
- '0'
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- '0.1'
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.1
author: ''
basic-deps:
  base: '>=4.12.0.0 && <4.22'
  deepseq: '>=1.4.4.0 && <1.6'
changelog: |
  # 0.1.1

  - Drop support for GHCs prior 8.6.5
  - Support GHC-9.12

  # 0.1.0.4

  - Add TestU01 test-suite

  # 0.1.0.3

  - Fix oops bugs in 0.1.0.2

    - It's lowercase `windows.h`.
      I blame Microsoft docs for using capital case `Windows.h` in the docs.
      https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocessid

    - accidental `shiftL` vs `shiftR` mixup for 32-bit generator initialization.
      Doesn't affect Linux.

  # 0.1.0.2

  - Drop `time` dependency in favour of handcoded initialization
    - On Unix platforms we use `/dev/urandom` if it exists,
      otherwise use `gettimeofday`, `clock` and `getpid`.
    - On Windows we use `GetCurrentProcessID`, `GetCurrentThreadId()`,
      `GetTickCount`, `GetSystemTime` and `QueryPerformanceCounter`.
    - On GHCJS use `Math.random()`
    - Using `time` is a fallback option (e.g. for Hugs).

  # 0.1.0.1

  - Add `INLINEABLE` pragmas to `bitmaskWithRejection*` functions
  - Support GHC-9.0

  # 0.1

  - Drop `random` dependency unconditionally.
    https://github.com/phadej/splitmix/issues/34

  # 0.0.5

  - Add `nextInteger`
  - Use smaller range in `bitmaskWithRejection32` and `64`,
    when upper bound is 2^n - 1.
    This changes generated values when they were on the boundary.

  # 0.0.4

  - Add `bitmaskWithRejection32'` and `bitmaskWithRejection64'`
    which generate numbers in closed range `[0, n]`.
    Unticked variants generate in closed-open range `[0, n)`.

  # 0.0.3

  - Add `System.Random.SplitMix32` module
  - Add `bitmaskWithRejection32` and `bitmaskWithRejection64` functions
  - Add `nextWord32`, `nextTwoWord32` and `nextFloat`
  - Add `random` flag, dropping dependency on `random`
    (breaks things, e.g. `QuickCheck`, when disabled).

  # 0.0.2

  - Support back to GHC-7.0
  - Add `Read SMGen` instance

  # 0.0.1

  - Add `NFData SMGen` instance
  - Fix a bug. http://www.pcg-random.org/posts/bugs-in-splitmix.html
    The generated numbers will be different for the same seeds!
changelog-type: markdown
description: |
  # splitmix

  Pure Haskell implementation of SplitMix pseudo-random number generator.

  ## dieharder

  > [Dieharder](http://webhome.phy.duke.edu/~rgb/General/dieharder.php) is a random
  number generator (rng) testing suite. It is intended to test generators, not
  files of possibly random numbers as the latter is a fallacious view of what it
  means to be random. Is the number 7 random? If it is generated by a random
  process, it might be. If it is made up to serve the purpose of some argument
  (like this one) it is not. Perfect random number generators produce "unlikely"
  sequences of random numbers &ndash; at exactly the right average rate. Testing a rng
  is therefore quite subtle.

  ```
  time $(cabal-plan list-bin splitmix-dieharder) splitmix
  ```

  The test-suite takes around half-an-hour to complete.
  From 30 runs, 2.49% were weak (3247 passed, 83 weak, 0 failed).

  In comparison, built-in [Marsenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister)
  test takes around 15min.

  ```
  time dieharder -a
  ```

  ## benchmarks

  ```
  benchmarking list 64/random
  time                 1.317 ms   (1.303 ms .. 1.335 ms)
                       0.998 R²   (0.998 R² .. 0.999 R²)
  mean                 1.380 ms   (1.365 ms .. 1.411 ms)
  std dev              70.83 μs   (37.26 μs .. 131.8 μs)
  variance introduced by outliers: 39% (moderately inflated)

  benchmarking list 64/tf-random
  time                 141.1 μs   (140.4 μs .. 142.1 μs)
                       0.999 R²   (0.998 R² .. 1.000 R²)
  mean                 145.9 μs   (144.6 μs .. 150.4 μs)
  std dev              7.131 μs   (3.461 μs .. 14.75 μs)
  variance introduced by outliers: 49% (moderately inflated)

  benchmarking list 64/splitmix
  time                 17.86 μs   (17.72 μs .. 18.01 μs)
                       0.999 R²   (0.998 R² .. 1.000 R²)
  mean                 17.95 μs   (17.75 μs .. 18.47 μs)
  std dev              1.000 μs   (444.1 ns .. 1.887 μs)
  variance introduced by outliers: 64% (severely inflated)

  benchmarking tree 64/random
  time                 800.3 μs   (793.3 μs .. 806.5 μs)
                       0.999 R²   (0.998 R² .. 0.999 R²)
  mean                 803.2 μs   (798.1 μs .. 811.2 μs)
  std dev              22.09 μs   (14.69 μs .. 35.47 μs)
  variance introduced by outliers: 18% (moderately inflated)

  benchmarking tree 64/tf-random
  time                 179.0 μs   (176.6 μs .. 180.7 μs)
                       0.999 R²   (0.998 R² .. 0.999 R²)
  mean                 172.7 μs   (171.3 μs .. 174.6 μs)
  std dev              5.590 μs   (4.919 μs .. 6.382 μs)
  variance introduced by outliers: 29% (moderately inflated)

  benchmarking tree 64/splitmix
  time                 51.54 μs   (51.01 μs .. 52.15 μs)
                       0.999 R²   (0.998 R² .. 0.999 R²)
  mean                 52.50 μs   (51.93 μs .. 53.55 μs)
  std dev              2.603 μs   (1.659 μs .. 4.338 μs)
  variance introduced by outliers: 55% (severely inflated)
  ```

  Note: the performance can be potentially further improved when GHC gets
  [SIMD Support](https://ghc.haskell.org/trac/ghc/wiki/SIMD/Implementation/Status).
description-type: markdown
hash: 8f92088f1c51c8d4569279a07565f8aa6b534a6735615b2295d2961dec8f1783
homepage: ''
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Fast Splittable PRNG
test-bench-deps:
  HUnit: '>=1.6.0.0 && <1.7'
  async: '>=2.2.1 && <2.3'
  base: '>=0'
  base-compat-batteries: '>=0.10.5 && <0.15'
  bytestring: '>=0.10.8.2 && <0.13'
  containers: '>=0.6.0.1 && <0.8'
  criterion: '>=1.6.0.0 && <1.7'
  deepseq: '>=0'
  math-functions: '>=0.3.3.0 && <0.4'
  process: '>=1.6.0.0 && <1.7'
  random: '>=0'
  splitmix: '>=0'
  test-framework: '>=0.8.2.0 && <0.9'
  test-framework-hunit: '>=0.3.0.2 && <0.4'
  tf-random: '>=0.5 && <0.6'
  vector: '>=0.13.0.0 && <0.14'
