all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
author: Jared Tobin
basic-deps:
  base: '>=4 && <6'
  kan-extensions: '>=5 && <6'
  lens: '>=4 && <6'
  mcmc-types: '>=1.0.1'
  mwc-probability: '>=1.0.1'
  pipes: '>=4 && <5'
  primitive: '>=0.6 && <1.0'
  transformers: '>=0.5 && <1.0'
changelog: ''
changelog-type: ''
description: |-
  Speedy slice sampling.

  This implementation of the slice sampling algorithm uses 'lens' as a means to
  operate over generic indexed traversable functors, so you can expect it to
  work if your target function takes a list, vector, map, sequence, etc. as its
  argument.

  Additionally you can sample over anything that's an instance of both 'Num' and
  'Variate', which is useful in the case of discrete parameters.

  Exports a 'mcmc' function that prints a trace to stdout, a 'chain' function
  for collecting results in memory, and a 'slice' transition operator that can
  be used more generally.

  > import Numeric.MCMC.Slice
  > import Data.Sequence (Seq, index, fromList)
  >
  > bnn :: Seq Double -> Double
  > bnn xs = -0.5 * (x0 ^ 2 * x1 ^ 2 + x0 ^ 2 + x1 ^ 2 - 8 * x0 - 8 * x1) where
  >   x0 = index xs 0
  >   x1 = index xs 1
  >
  > main :: IO ()
  > main = withSystemRandom . asGenIO $ mcmc 10000 1 (fromList [0, 0]) bnn
description-type: haddock
hash: abcb4db8bf7224258b0bd5f7c2445f4b7cb3cb849646852573c95620b2dda9cc
homepage: http://github.com/jtobin/speedy-slice
latest: 0.3.2
license-name: MIT
maintainer: jared@jtobin.ca
synopsis: Speedy slice sampling.
test-bench-deps:
  base: '>=4 && <6'
  containers: '>=0.5 && <0.8'
  speedy-slice: '>=0'
