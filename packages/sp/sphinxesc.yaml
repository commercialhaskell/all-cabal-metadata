all-versions:
- 0.1.0.0
- 0.1.0.1
author: Daniel Choi
basic-deps:
  MissingH: <1.5
  base: '>=4.8 && <5.0'
  optparse-applicative: <0.14
  parsec: <3.2
  sphinxesc: '>=0'
  split: <0.3
changelog: ''
changelog-type: ''
description: "# sphinxesc\n\nA small module to prevent user-submitted search expressions
  from being \nmis-parsed into invalid Sphinx Extended Query Expressions.\n\nThe module
  provides a function \n\n    module SphinxEscape where\n    escapeSphinxQueryString
  :: String -> String\n\nthat sanitizes the Sphinx query expression in a way that
  can be safely submitted to the Sphinx API. \n\n## Synopsis\n\nExample from ghci:\n\n```\nghci>
  :m SphinxEscape \nghci> putStrLn $ escapeSphinxQueryString \"@tag_list hello OR
  quick brown fox 7/11\"\n@tag_list hello | quick brown fox 7 11\nghci> \nghci> putStrLn
  $ escapeSphinxQueryString \"hello AND quick brown fox 7/11\"\nhello & quick brown
  fox 7 11\nghci> \n\n```\n\n## Explanation\n\n`escapeSphinxQueryString` performs
  very simple escaping with the help of a\nsimplified abtract syntax tree. The abstract
  syntax tree it builds is:\n\n```\ndata Expression = \n        TagFieldSearch String
  \n      | Literal String\n      | Phrase String\n      | AndOrExpr Conj Expression
  Expression \n  deriving Show\n\n```\n\nThe escaping does not parse more advanced
  Sphinx query expressions such as\n`NEAR/n`, quorum, etc., nor does it recognize
  arbitrary `@field` expressions.\nThe only special expressions recognized are `&
  (AND)`, `| (OR)` and `@tag_list\nWORDS`.  Except for quoted phrases, non-alphanumeric
  characters that do not\nform part of these specific expressions are simply turned
  into whitespace. \n\nSee the **Testing** section below for examples of conversions.\n\nObviously
  these rules are quite domain specific. The rules can be\nmade more configurable
  later.\n\n\n## Testing\n\n\nThe command line executable `sphinxesc` can be used
  to test the expression parser \nand escaping of the input to the final sphinx search
  expression.\n\n```\n$ sphinxesc \"test OR hello\"\ntest | hello\n\n# -p option shows
  the parsing result\n\n$ sphinxesc -p \"test OR hello\"\nAndOrExpr Or (Literal \"test\")
  (Literal \"hello\")\n```\n\nThere is a suite of Bash-based regression tests in `tests.txt`,
  where the input\nis on the left, followed by `::` surrounded by any whitespace,
  followed by the\nexpected escaped output result. To run the tests, execute the script\n`./test.sh`\n\n\n**NOTE**
  This test output may be outdated. Please look at the `tests.txt` for \nthe current
  tests.\n\n```\n./test.sh\n\nINPUT                         EXPECTED                      RESULT
  \                       PASS      \n7/11                          7 11                          7
  11                          PASS      \nhello 7/11                    hello 7 11
  \                   hello 7 11                    PASS      \nhello OR 7/11                 hello
  | 7 11                  hello | 7 11                  PASS      \nhello or 7/11
  \                hello | 7 11                  hello | 7 11                  PASS
  \     \nhello | 7/11                  hello | 7 11                  hello | 7 11
  \                 PASS      \nhello AND 7/11                hello & 7 11                  hello
  & 7 11                  PASS      \n@tag_list fox tango 7/11      @tag_list fox
  tango 7 11      @tag_list fox tango 7 11      PASS      \n@(tag_list) fox tango
  7/11    @tag_list fox tango 7 11      @tag_list fox tango 7 11      PASS      \n@(tag_list)
  AND               @tag_list AND                 @tag_list AND                 PASS
  \     \n@other_field AND              other field AND               other field
  AND               PASS      \nhello & @other_field AND      hello &  other field
  AND      hello &  other field AND      PASS      \nhello &                       hello
  \                        hello                         PASS      \n& hello &                     hello
  \                        hello                         PASS      \n& & hello &                   hello
  \                        hello                         PASS      \n| | hello |                   hello
  \                        hello                         PASS      \n\"hello\" hello
  \                hello  hello                  hello  hello                  PASS
  \     \nhello\" hello                  hello  hello                  hello  hello
  \                 PASS      \nhello' hello                  hello  hello                  hello
  \ hello                  PASS      \nhello' @tag_list fox          hello   @tag_list
  fox         hello   @tag_list fox         PASS      \nhello' @tag_list fox &        hello
  \  @tag_list fox         hello   @tag_list fox         PASS      \n                                                                                          PASS
  \     \n```\n\n(The last case is hard to see, but the input is a blank string \"\"
  and the output is a blank string \"\".)\n\n## Future directions\n\nThe escaping
  function can be made more configurable. The parser and AST data\nstructure can also
  be made more sophisticated, so that the AST can cover more\nof the Sphinx Extended
  Query syntax. \n\n## Reference\n\n* <http://sphinxsearch.com/docs/latest/extended-syntax.html>
  Sphinx Extended Syntax docs\n"
description-type: markdown
hash: 85317b910b35a1970e97bf69405bac67eb9ede00d54c27002caafbe742f2224a
homepage: https://github.com/mackeyrms/sphinxesc#readme
latest: 0.1.0.1
license-name: MIT
maintainer: Mackey RMS
synopsis: Transform queries for sphinx input
test-bench-deps: {}
