all-versions:
- 0.1.0.0
- 0.1.0.1
author: George Thomas
basic-deps:
  aeson: '>=2.1.0 && <2.2'
  base: '>=4.16 && <5'
  bytestring: '>=0.11.3 && <0.12'
  composition: '>=1.0.2 && <1.1'
  containers: '>=0.6.5 && <0.7'
  directory: '>=1.3.6 && <1.4'
  exceptions: '>=0.10 && <0.11'
  extra: '>=1.7.12 && <1.8'
  filepath: '>=1.4.2 && <1.5'
  http-client: ^>=0.7.13
  http-client-tls: ^>=0.3.6
  http-types: ^>=0.12.3
  lucid: ^>=2.11
  monad-loops: '>=0.4.3 && <0.5'
  mtl: '>=2.2.2 && <2.4'
  pretty-simple: '>=4.1 && <4.2'
  servant: '>=0.19 && <0.20'
  servant-client: ^>=0.19
  servant-lucid: ^>=0.9
  spotify: '>=0'
  text: '>=1.2.5 && <1.3 || >=2.0 && <2.1'
  time: '>=1.11.1 && <1.13'
  transformers: '>=0.5.6 && <0.7'
  unordered-containers: '>=0.2.19 && <0.3'
changelog: |
  # Revision history for spotify

  ## 0.1.0.0 -- 2023-06-22

  * First release. Unstable.
changelog-type: markdown
description: |
  # Spotify Web API bindings for Haskell

  Designed to be very high-level (eg. handling token refresh etc. automatically). Though it should be possible to expose more of the lower level functionality if anyone requests it. At the very least, the raw Servant encoding of the API is available in `spotify-servant`, on which the main library depends.

  Designed for use with lenses and/or modern record extensions (`OverloadedRecordDot` etc.), e.g. to work around duplicated identifiers. This allows us to mirror the Spotify API in a methodical way without being too verbose.

  All requests take place inside a monad implementing `MonadSpotify`. In particular, this abstracts away authentication, meaning that we don't need to explicitly pass tokens around. A concrete monad `Spotify` is provided, though you'll often want to roll your own. There is also an instance `MonadSpotify IO`, which caches authentication data to disk, so one should be careful about security. It also creates a new connection `Manager` for every request, which can be expensive. Thus a `State`-like monad is preferred for serious code. Nonetheless, being able to run the functions directly in `IO` can be very convenient, especially from `GHCI`.
description-type: markdown
hash: 9fab97eaedfe0f15730044f9ea0a58ebf1ce85d8c7fe9dec1d4343c47ecd6f6d
homepage: https://github.com/georgefst/spotify
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: George Thomas
synopsis: Spotify Web API
test-bench-deps:
  Cabal: ^>=3.6 || ^>=3.8 || ^>=3.10
  aeson: ^>=2.1.0
  base: '>=4.16 && <5'
  bytestring: ^>=0.11.3
  composition: ^>=1.0.2
  containers: ^>=0.6.5
  directory: ^>=1.3.6
  exceptions: ^>=0.10
  extra: ^>=1.7.12
  filepath: ^>=1.4.2
  monad-loops: ^>=0.4.3
  mtl: ^>=2.2.2 || ^>=2.3
  pretty-simple: ^>=4.1
  servant: ^>=0.19
  spotify: '>=0'
  text: ^>=1.2.5 || ^>=2.0
  time: ^>=1.11.1 || ^>=1.12
  transformers: ^>=0.5.6 || ^>=0.6
  unordered-containers: ^>=0.2.19
