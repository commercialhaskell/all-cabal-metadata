homepage: https://github.com/georgefst/spotify
changelog-type: markdown
hash: f3d457fb5a71273f141f605397ec8ebe1ee6a12681a79225b997e51995f72f25
test-bench-deps:
  exceptions: ^>=0.10
  bytestring: ^>=0.11.3
  extra: ^>=1.7.12
  spotify-servant: -any
  Cabal: ^>=3.6 || ^>=3.8 || ^>=3.10
  base: '>=4.16 && <5'
  time: ^>=1.11.1 || ^>=1.12
  unordered-containers: ^>=0.2.19
  text: ^>=1.2.5 || ^>=2.0
  composition: ^>=1.0.2
  spotify-types: -any
  monad-loops: ^>=0.4.3
  filepath: ^>=1.4.2
  spotify: -any
  servant: ^>=0.19
  containers: ^>=0.6.5
  mtl: ^>=2.2.2 || ^>=2.3
  pretty-simple: ^>=4.1
  transformers: ^>=0.5.6 || ^>=0.6
  aeson: ^>=2.1.0
  directory: ^>=1.3.6
maintainer: George Thomas
synopsis: Spotify Web API
changelog: |
  # Revision history for spotify

  ## 0.1.0.0 -- 2023-06-22

  * First release. Unstable.
basic-deps:
  http-client: ^>=0.7.13
  exceptions: ==0.10.*
  lucid: ^>=2.11
  bytestring: '>=0.11.3 && <0.12'
  extra: '>=1.7.12 && <1.8'
  spotify-servant: -any
  base: '>=4.16 && <5'
  time: '>=1.11.1 && <1.13'
  servant-client: ^>=0.19
  unordered-containers: '>=0.2.19 && <0.3'
  text: '>=1.2.5 && <1.3 || ==2.0.*'
  composition: '>=1.0.2 && <1.1'
  spotify-types: -any
  monad-loops: '>=0.4.3 && <0.5'
  filepath: '>=1.4.2 && <1.5'
  spotify: -any
  servant: ==0.19.*
  containers: '>=0.6.5 && <0.7'
  http-client-tls: ^>=0.3.6
  mtl: '>=2.2.2 && <2.4'
  pretty-simple: ==4.1.*
  transformers: '>=0.5.6 && <0.7'
  servant-lucid: ^>=0.9
  http-types: ^>=0.12.3
  aeson: '>=2.1.0 && <2.2'
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.1.0.0
author: George Thomas
latest: 0.1.0.0
description-type: markdown
description: |
  # Spotify Web API bindings for Haskell

  Built around Servant + Aeson.

  Work in progress. Will be put on Hackage once remotely stable.

  Designed to be very high-level (eg. handling token refresh etc. automatically). I can think about exposing the lower level functionality if anyone requests it.

  Designed for use with lenses and/or modern record extensions, eg. to work around duplicated identifiers. This allows us to mirror the Spotify API in a methodical way without being too verbose. `RecordDotSyntax` will suit us nicely whenever it lands.

  All request take place inside a monad implementing `MonadSpotify`. In particular, this abstracts away authentication - we don't need to explicitly pass tokens around. A concrete monad `Spotify` is provided, though you'll often want to roll your own. There is also an instance `MonadSpotify IO` - this caches authentication data to disk, so one should be careful about security. It also creates a new connection `Manager` for every request, which can be expensive. Thus a `State`-like monad is preferred for serious code. Nonetheless, being able to run the functions directly in `IO` can be very convenient, especially from `GHCI`.
license-name: BSD-3-Clause
