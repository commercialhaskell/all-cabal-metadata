all-versions:
- 0.2.0.0
author: Tochi Obudulu
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.12'
  containers: '>=0.6 && <0.7'
  cryptonite: '>=0.25 && <0.31'
  memory: '>=0.14 && <0.18'
changelog: |+
  # 0.2.0.0 (2022-05-25)


  * build!: unexpose DataNote ([5b095d5](https://github.com/tochicool/sparse-merkle-trees/commit/5b095d5954575dd0dd04b16bb3fda775445ae3fb))


  ### Features

  * **csmt:** implementation ([83c19ef](https://github.com/tochicool/sparse-merkle-trees/commit/83c19ef45b5694be1bf6c9f4d77fecdb39069fd6))


  ### BREAKING CHANGES

  * the `Crypto.Hash.CompactSparseMerkleTree.DataNode` is no longer exported



changelog-type: markdown
description: "# sparse-merkle-trees\n\n[![CI/CD](https://github.com/tochicool/sparse-merkle-trees/actions/workflows/cicd.yaml/badge.svg)](https://github.com/tochicool/sparse-merkle-trees/actions/workflows/cicd.yaml)\n[![Hackage](https://img.shields.io/hackage/v/sparse-merkle-trees)](https://hackage.haskell.org/package/sparse-merkle-trees)\n[![BSD3](https://img.shields.io/github/license/tochicool/sparse-merkle-trees)](https://github.com/tochicool/sparse-merkle-trees/blob/master/LICENSE)\n\nA
  Haskell library implementing sparse Merkle trees, an authenticated data \nstructure
  with support for zero-knowledge proofs of *inclusion and exclusion*, \nparametrised
  over cryptographic hash algorithms at the type level.\n\n\n> **Note**: This library
  is currently experimental and is subject to change.\n\n## Introduction\n\nA [Merkle
  tree](https://en.wikipedia.org/wiki/Merkle_tree) is an authenticated \ndata structure
  which supports efficient zero-knowledge proofs of element \ninclusion from a Merkle
  root.\n\nA sparse Merkle tree (SMT) is Merkle Tree where all possible keys (digests)
  are \nat the leaves of the tree. This gives us the additional properties over a
  Merkle \ntree:\n\n* support for proofs of *exclusion* of elements from a Merkle
  root\n* *history independence* of the merkle root from element insertion order\n\nA
  naive construction would mean that a N-bit key would yield a SMT of size \n2^N.
  However, because the tree is *sparse*, there are efficient constructions\nthat grow
  in size O(n) where n is the size of the tree.\n\n### Use cases\n\nSMTs expand on
  the existing use cases of Merkle trees including:\n\n* Asset universes\n* Certificate
  revocation\n* Secure file systems\n* Secure messaging\n\n## Examples\n\n### Compact
  Sparse Merkle Trees\n\nThe compact sparse Merkle tree is based on the description
  given in this \n[report](https://eprint.iacr.org/2018/955.pdf) by \n[Faraz Haider](https://github.com/farazhaider).
  The module exposes an similar \nAPI to [`Data.Set`](https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Set.html)
  but this is subject to change.\n\n```haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE
  GADTs #-}\n{-# LANGUAGE LambdaCase #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nimport
  Crypto.Hash (SHA256) -- from cryptonite package\nimport Crypto.Hash.CompactSparseMerkleTree
  (CSMT, MembershipProof, MerkleRoot, Size (NonEmpty))\nimport qualified Crypto.Hash.CompactSparseMerkleTree
  as CSMT\nimport Data.ByteString (ByteString) -- from bytestring package\n\ntype
  MailingList = CSMT 'NonEmpty SHA256 ByteString\n\ncypherPunks :: MailingList\ncypherPunks
  =\n  CSMT.insert \"hal@finney.org\" $\n    CSMT.insert \"satoshi@vistomail.com\"
  $\n      CSMT.insert \"aba@dcs.ex.ac.uk\" $\n        CSMT.insert \"szabo@techbook.com\"
  $\n          CSMT.insert \"weidai@eskimo.com\" $\n            CSMT.empty\n\nsummary
  :: MerkleRoot SHA256\nsummary = CSMT.merkleRoot cypherPunks\n\n-- >>> summary\n--
  MerkleRoot b7061997fc49294bfb5c8893a684eea53d20f11d152530fbb95b3fc5ca902d2a\n\nnakamotoProof
  :: MembershipProof SHA256\nnakamotoProof = CSMT.membershipProof \"satoshi@vistomail.com\"
  cypherPunks\n\n-- >>> nakamotoProof\n-- MembershipProof (InclusionProof {includedDigest
  = 4a2220676a74d2be6d0c00d939513a3b5599bd01c65cf3d1ce2d517f070a1c11, rootPath = [(5554c052244897a83ef61362e6a3141c034284b54f4977163070d634749a714c,R),(6c98a4128b8a86d5f646707d860a869244938b95177298c6746da5e1e981426e,R),(e1a4e69d03cd197af06688aafb33d50db1d7c407be747b4b9d46c877f2e97fa1,R)]})\n\nszaboTechbookProof
  :: MembershipProof SHA256\nszaboTechbookProof = CSMT.membershipProof \"szabo@techbook.com\"
  cypherPunks\n\n-- >>> szaboTechbookProof\n-- MembershipProof (InclusionProof {includedDigest
  = 5554c052244897a83ef61362e6a3141c034284b54f4977163070d634749a714c, rootPath = [(4a2220676a74d2be6d0c00d939513a3b5599bd01c65cf3d1ce2d517f070a1c11,L),(6c98a4128b8a86d5f646707d860a869244938b95177298c6746da5e1e981426e,R),(e1a4e69d03cd197af06688aafb33d50db1d7c407be747b4b9d46c877f2e97fa1,R)]})\n\nszaboNetcomProof
  :: MembershipProof SHA256\nszaboNetcomProof = CSMT.membershipProof \"szabo@netcom.com\"
  cypherPunks\n\n-- >>> szaboNetcomProof\n-- MembershipProof (ExclusionProof {excludedDigest
  = 8f3af01ec764fa90a9bb98b1547656e362640fc336cf31c80b7dfacb50f2d256, immediatePredecessor
  = Just (InclusionProof {includedDigest = 6c98a4128b8a86d5f646707d860a869244938b95177298c6746da5e1e981426e,
  rootPath = [(0fa34cea30d143cb5bbfd6937e3848c8faf4d0737b88b55fbcb0f2afac94e6b3,())]}),
  immediateSuccessor = Just (InclusionProof {includedDigest = 949802fb7f855457ede853818031b82bc5f446c7369f7abe6fa9e564dde18e96,
  rootPath = [(dc2baa959e086c741627d36a0804a302590b11e44590936621e81acd4a528de4,())]}),
  commonRootPath = []})\n\ncypherPunks' :: MailingList\ncypherPunks' = CSMT.delete
  \"szabo@techbook.com\" (CSMT.insert \"szabo@netcom.com\" cypherPunks) $ \\case\n
  \ t@CSMT.Parent {} -> t\n  _ -> error \"impossible\"\n\nsummary' :: MerkleRoot SHA256\nsummary'
  = CSMT.merkleRoot cypherPunks'\n\n-- >>> summary'\n-- MerkleRoot 7dc6b4dfcd54f9c6ac67a330b35539407c2e9559d7e589e6064f1c8a46256aa7\n\nszaboTechbookProof'
  :: MembershipProof SHA256\nszaboTechbookProof' = CSMT.membershipProof \"szabo@techbook.com\"
  cypherPunks'\n\n-- >>> szaboTechbookProof'\n-- MembershipProof (ExclusionProof {excludedDigest
  = 5554c052244897a83ef61362e6a3141c034284b54f4977163070d634749a714c, immediatePredecessor
  = Just (InclusionProof {includedDigest = 4a2220676a74d2be6d0c00d939513a3b5599bd01c65cf3d1ce2d517f070a1c11,
  rootPath = []}), immediateSuccessor = Just (InclusionProof {includedDigest = 6c98a4128b8a86d5f646707d860a869244938b95177298c6746da5e1e981426e,
  rootPath = []}), commonRootPath = [(b8804f3bbe10963f35ee72dbd55a8aa33b64260ab0c63bff59acc13ea8088e56,R)]})\n\nszaboNetcomProof'
  :: MembershipProof SHA256\nszaboNetcomProof' = CSMT.membershipProof \"szabo@netcom.com\"
  cypherPunks'\n\n-- >>> szaboNetcomProof\n-- MembershipProof (ExclusionProof {excludedDigest
  = 8f3af01ec764fa90a9bb98b1547656e362640fc336cf31c80b7dfacb50f2d256, immediatePredecessor
  = Just (InclusionProof {includedDigest = 6c98a4128b8a86d5f646707d860a869244938b95177298c6746da5e1e981426e,
  rootPath = [(0fa34cea30d143cb5bbfd6937e3848c8faf4d0737b88b55fbcb0f2afac94e6b3,())]}),
  immediateSuccessor = Just (InclusionProof {includedDigest = 949802fb7f855457ede853818031b82bc5f446c7369f7abe6fa9e564dde18e96,
  rootPath = [(dc2baa959e086c741627d36a0804a302590b11e44590936621e81acd4a528de4,())]}),
  commonRootPath = []})\n\n-- >>> all (CSMT.validProof summary) [nakamotoProof, szaboTechbookProof,
  szaboNetcomProof]\n-- True\n-- >>> all (CSMT.validProof summary') [szaboTechbookProof',
  szaboNetcomProof']\n-- True\n-- >>> CSMT.validProof summary' nakamotoProof\n-- False\n```\nSee
  the more complete haddock documentation on [Hackage](https://hackage.haskell.org/package/sparse-merkle-trees).\n\n##
  Related libraries\n\n* [cryptonite](https://hackage.haskell.org/package/cryptonite)
  for cryptographic primitives\n* [merkle-tree](https://hackage.haskell.org/package/merkle-tree)
  for an implementation of a merkle tree\n"
description-type: markdown
hash: bada611077ecf69a87dc28db156823bd4152020fe07ef6be13378a4d5d0501be
homepage: https://github.com/tochicool/sparse-merkle-trees#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: tochicool@gmail.com
synopsis: Sparse Merkle trees with proofs of inclusion and exclusion
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.12'
  containers: '>=0.6 && <0.7'
  criterion: '>=0'
  cryptonite: '>=0.25 && <0.31'
  deepseq: '>=0'
  memory: '>=0.14 && <0.18'
  smallcheck: '>=0'
  sparse-merkle-trees: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  tasty-smallcheck: '>=0'
