homepage: ''
changelog-type: ''
hash: cfb2e8d844df3ec1fbbe26f8496b1dd6c02609ff38dc5c54586e1c47ecd23249
test-bench-deps: {}
maintainer: isaac.shapira@platonic.systems
synopsis: Unified API for phantom typed newtypes and type aliases
changelog: ''
basic-deps:
  base: '>=4.9 && <5'
all-versions:
- 0.1.0.0
author: Isaac Shapira
latest: 0.1.0.0
description-type: markdown
description: "<div align=\"center\"><h1>\U0001F47B</h1></div>\n\n# Concept\n\nThis
  is a package designed to help optimize around scenarios with bad newtype support
  without losing type safety.\n<br/>\n```haskell\nSpooky :: (s :: Type) -> (a :: Type)
  -> Type\n```\n\nIf type `a` can be represented as type `s`, we can make `s` spooky.
  While we usually might use terms of type `a`, we need to represent `a` as a term
  of type `s` instead because of some tragedy.  Converting our types to `s` directly
  loses important type information (knowledge of `a` is erased). We could preserve
  this information by placing `a` in a phantom typed newtype over `s`. But then we
  incuring cost around this newtype, that is not incurred by a type alias. However,
  if we use a type alias over `s` to get `a` into a phantom type, we get no additional
  safety over using `s` directly. Only readability is gained with the type alias.\n\n**This
  library resolves this tension**\n\n`Data.Spooky.Spooky` is a newtype or a type alias
  depending on cabal flags. This means you can develop with Spooky as a newtype and
  get all the benefits of the static type checking and static analysis in tooling,
  while for production use a type alias.\n\nThis technique was originally motivated
  by the need to reduce file sizes when using the Haskell to Plutus compiler in 2021.\n\n#
  The Typed Version\n\nThis **is** the default. You may pass a cabal flag `-f typed`
  for symmetry, but it wont do anything.\n\n```haskell\nnewtype Spooky (s :: Type)
  (a :: Type) = Spooky s\n```\n\n## Note\n\nKeep in mind with the typed version the
  following works. So we have some real safety:\n\n```haskell\n λ. newtype Typed a
  = Typed String deriving Show\n λ. typedId = id :: Typed Int -> Typed Int\n λ. y
  = Typed \"wat\" :: Typed String\n λ. typedId y\n\n<interactive>:21:9: error:\n    •
  Couldn't match type ‘[Char]’ with ‘Int’\n      Expected type: Typed Int\n        Actual
  type: Typed String\n    • In the first argument of ‘typedId’, namely ‘y’\n      In
  the expression: typedId y\n      In an equation for ‘it’: it = typedId y\n```\n\n#
  Untyped Version\n\nThis is **not** the default. Supplied along side the newtyped
  version, and can be enabled with a cabal flag.\n\n```bash\ncabal build -f untyped\n```\n\nwill
  replace the newtype with an alias\n\n```haskell\ntype Spooky (s :: Type) (a :: Type)
  = s\n```\n\nThis allows for some safety as we can hold type information in the phantom
  type representing the semantics of our code.\n\n## Note\n\nKeep in mind the following
  works. So not that much safety is provided here:\n\n```haskell\n λ. type Untyped
  a = String\n λ. untypedId = id :: Untyped Int -> Untyped Int\n λ. x = \"wat\" ::
  Untyped String\n λ. untypedId x\n\"wat\"\n```\n"
license-name: BSD-3-Clause
