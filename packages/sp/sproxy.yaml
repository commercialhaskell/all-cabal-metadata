all-versions:
- 0.9.4
- 0.9.5
- 0.9.6
- 0.9.7
- 0.9.7.1
- 0.9.8
- 0.9.9
author: |-
  Chris Forno <jekor@jekor.com>
  , Igor Pashev <pashev.igor@gmail.com>
basic-deps:
  SHA: '>=0'
  aeson: '>=0.7.0.4'
  attoparsec: '>=0'
  base: '>=4.8 && <5'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  containers: '>=0.5'
  data-default: '>=0'
  docopt: '>=0.7'
  entropy: '>=0'
  http-conduit: '>=2.1.8'
  http-kit: '>=0.5'
  http-types: '>=0.8.5'
  interpolatedstring-perl6: '>=0'
  network: '>=0'
  postgresql-simple: '>=0'
  resource-pool: '>=0'
  split: '>=0'
  text: '>=0'
  time: '>=0'
  tls: '>=1.3.3'
  unix: '>=0'
  utf8-string: '>=0'
  x509: '>=0'
  yaml: '>=0.8'
changelog: "0.9.9\n=====\n\n* This is the last release of this Sproxy. See [Sproxy2](http://hackage.haskell.org/package/sproxy2).\n*
  Google: prompt for account only, don't ask for offline access.\n\n\n0.9.8\n=====\n\n*
  If the user is not authenticated, show login page with [HTTP status code\n  511](https://tools.ietf.org/html/rfc6585),
  instead of 302 -> 200.  It had\n  bad UX for AJAX calls.\n* Always convert authenticated
  user's email to lowercase. This affects the\n  cookie and the `From` header.\n*
  Stop using the `string-conversions` package.\n* Print authentication code in debug
  mode only.\n\n\n0.9.7.1\n=======\n\n* Fixed cabal source distribution\n\n\n0.9.7\n=====\n\n*
  Added support for [LinkedIn OAuth2 API](https://developer.linkedin.com/docs/oauth2).\n
  \ Added new options `linkedin_client_id` and `linkedin_client_secret`. They are
  optional\n  as well as Google's `client_id` and `client_secret`. The user is now
  redirected to the\n  `sproxy/login` page to choose an OAuth2 provider.\n\n\n0.9.6\n=====\n\n*
  Session shelf life is configurable with the `session_shelf_life` option\n  in configuration
  file. Defaults to 30 days. It was hard-coded before.\n* Dropped dependency on `logsink`
  / `logging-facade` (fail to build).\n  Log to stderr only, log levels: error, warning,
  info, debug.\n  The `log_target` option is ignored.\n\n\n0.9.5\n=====\n\n* Allow
  running as unprivileged user: added option `user` in the configuration file.\n*
  Default log level is `debug` if omitted in the configuration file.\n\n\n0.9.4\n=====\n\n*
  Combine the multiple header fields into one \"field-name: field-value\" pair\n  with
  a comma-separated list for the field-value (Instead of removing duplicates).\n*
  `sproxy [ -h | --help ]` works (using [docopt](https://hackage.haskell.org/package/docopt))\n*
  Stop counting client parsing failures as errors.\n\n\n0.9.3\n=====\n\n* Made some
  options in configuration file optional with reasonable default values:\n  - `log_target`:
  `stderr`\n  - `listen`: `443`\n  - `redirect_http_to_https`: yes if `listen == 443`\n
  \ - `backend_address`: `\"127.0.0.1\"`\n  - `backend_port`: `8080`\n* Allow backend
  at UNIX socket: new option `backend_socket`.\n* Removed tests (unsupported).\n*
  Don't build Sproxy library.\n\n\n0.9.2\n=====\n\n* Deny SSLv3.\n* Removed the `auth_token_key`
  option from the config file.\n  The token is generated randomly on startup.\n\tRestarting
  sproxy invalidates existing sessions.\n* Added `ChangeLog.md`\n\n"
changelog-type: markdown
description: |+
  # Sproxy - HTTP proxy for authenticating users via OAuth2

  ## Motivation

  Why use a proxy for doing OAuth? Isn't that up to the application?

   * sproxy is secure by default.  No requests make it to the web server if they
     haven't been explicitly whitelisted.
   * sproxy is independent.  Any web application written in any language can use
     it.

  ## Use cases

   * Existing web applications with concept of roles. For example,
     [Mediawiki](https://www.mediawiki.org), [Jenkins](https://jenkins.io),
     [Icinga Web 2](https://www.icinga.org/products/icinga-web-2/). In
     this case you configure Sproxy to allow unrestricted access
     to the application for some groups defined by Sproxy. These
     groups are mapped to the application roles.  There is a [plugin for
     Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Reverse+Proxy+Auth+Plugin)
     which can be used for this. Mediawiki and Icinga Web 2 were also
     successfully deployed in this way, though it required changes to their
     source code.

   * New web applications designed to work specifically behind Sproxy. In this case
     you define Sproxy rules to control access to the
     application's API.  It would likely be [a single-page
     application](https://en.wikipedia.org/wiki/Single-page_application).
     Examples are [MyWatch](https://hackage.haskell.org/package/mywatch) and
     [Juan de la Cosa](https://hackage.haskell.org/package/juandelacosa)

  ## How it works

  When an HTTP client makes a request, Sproxy checks for a *session cookie*.
  If it doesn't exist (or it's invalid, expired), it responses with [HTTP
  status 511](https://tools.ietf.org/html/rfc6585) with the page, where the
  user can choose an [OAuth2](https://tools.ietf.org/html/rfc6749) provider to
  authenticate with.  Finally, we store the the email address in a session
  cookie: signed with a hash to prevent tampering, set for HTTP only (to prevent
  malicious JavaScript from reading it), and set it for secure (since we don't
  want it traveling over plaintext HTTP connections).

  From that point on, when sproxy detects a valid session cookie it extracts the
  email, checks it against the access rules, and relays the request to the
  back-end server (if allowed).


  ## Logout

  Hitting the endpoint `/sproxy/logout` will invalidate the session cookie.
  The user will be redirected to `/` after logout.  The query parameter `state`
  can be provided to specify an alternate URL-encoded redirect path


  ## Robots

  Since all sproxied resources are private, it doesn't make sense for web
  crawlers to try to index them. In fact, crawlers will index only the login
  page. To prevent this, sproxy returns the following for `/robots.txt`:

  ```
  User-agent: *
  Disallow: /
  ```


  ## Permissions system

  Permissions are stored in a PostgreSQL database. See sproxy.sql for details.
  Here are the main concepts:

  - A `group` is identified by a name. Every group has
    - members (identified by email address, through `group_member`) and
    - associated privileges (through `group_privilege`).
  - A `privilege` is identified by a name _and_ a domain. It has associated rules
    (through `privilege_rule`) that define what the privilege gives access to.
  - A `rule` is a combination of sql patterns for a `domain`, a `path` and an
    HTTP `method`. A rule matches an HTTP request, if all of these components
    match the respective attributes of the request. However of all the matching
    rules only the rule with the longest `path` pattern will be used to determine
    whether a user is allowed to perform a request. This is often a bit
    surprising, please see the following example:


  ### Privileges example

  Consider this `group_privilege` and `privilege_rule` relations:

  group            | privilege | domain
  ---------------- | --------- | -----------------
  `readers`        | `basic`   | `wiki.example.com`
  `readers`        | `read`    | `wiki.example.com`
  `editors`        | `basic`   | `wiki.example.com`
  `editors`        | `read`    | `wiki.example.com`
  `editors`        | `edit`    | `wiki.example.com`
  `administrators` | `basic`   | `wiki.example.com`
  `administrators` | `read`    | `wiki.example.com`
  `administrators` | `edit`    | `wiki.example.com`
  `administrators` | `admin`   | `wiki.example.com`

  privilege   | domain            | path           | method
  ----------- | ----------------- | -------------- | ------
  `basic`     | `wiki.example.com` | `/%`           | `GET`
  `read`      | `wiki.example.com` | `/wiki/%`      | `GET`
  `edit`      | `wiki.example.com` | `/wiki/edit/%` | `%`
  `admin`     | `wiki.example.com` | `/admin/%`     | `%`

  With this setup, everybody (that is `readers`, `editors` and `administrators`s)
  will have access to e.g. `/imgs/logo.png` and `/favicon.ico`, but only
  administrators will have access to `/admin/index.php`, because the longest
  matching path pattern is `/admin/%` and only `administrator`s have the `admin`
  privilege.

  Likewise `readers` have no access to e.g. `/wiki/edit/delete_everything.php`.


  ## HTTP headers passed to the back-end server:

  header               | value
  -------------------- | -----
  `From:`              | visitor's email address
  `X-Groups:`          | all groups that granted access to this resource, separated by commas (see the note below)
  `X-Given-Name:`      | the visitor's given (first) name
  `X-Family-Name:`     | the visitor's family (last) name
  `X-Forwarded-Proto:` | the visitor's protocol of an HTTP request, always `https`
  `X-Forwarded-For`    | the visitor's IP address (added to the end of the list if header is already present in client request)


  `X-Groups` denotes an intersection of the groups the visitor belongs to and the groups that granted access:

  Visitor's groups | Granted groups | `X-Groups`
  ---------------- | -------------- | ---------
  all              | all, devops    | all
  all, devops      | all            | all
  all, devops      | all, devops    | all,devops
  all, devops      | devops         | devops
  devops           | all, devops    | devops
  devops           | all            | Access denied


  ## Configuration file

  By default `sproxy` will read its configuration from
  `config/sproxy.yml`.  There is example file with documentation
  [config/sproxy.yml.example](config/sproxy.yml.example). You can specify a
  custom path with:

  ```
  sproxy --config /path/to/sproxy.yml
  ```

description-type: markdown
hash: 81730136445e1b0196918e60ba1964ec20c191cf2291f8a0bec3fb0b1c388add
homepage: ''
latest: 0.9.9
license-name: MIT
maintainer: Igor Pashev <pashev.igor@gmail.com>
synopsis: HTTP proxy for authenticating users via OAuth2
test-bench-deps: {}
