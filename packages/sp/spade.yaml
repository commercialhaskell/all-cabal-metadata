homepage: ''
changelog-type: markdown
hash: 9ac4566b6c09176dfff6ada4e713fa3798d20d4a482d0e82f68188a9ee6d6570
test-bench-deps:
  exceptions: '>=0.10.4 && <0.11'
  bytestring: '>=0.10.12 && <0.11'
  stm: '>=2.5.0 && <2.6'
  base: '>=4.9 && <5'
  time: '>=1.9.3 && <1.10'
  WAVE: '>=0.1.6 && <0.2'
  unordered-containers: '>=0.2.16 && <0.3'
  hspec: -any
  text: '>=1.2.4 && <1.3'
  strip-ansi-escape: -any
  monad-loops: '>=0.4.3 && <0.5'
  process: '>=1.6.11 && <1.7'
  hedgehog: -any
  constraints: '>=0.13.2 && <0.14'
  ordered-containers: '>=0.2.2 && <0.3'
  sdl2: '>=2.5.3 && <2.6'
  containers: '>=0.6.4 && <0.7'
  terminal: '>=0.2.0 && <0.3'
  ansi-terminal: '>=0.11.1 && <0.12'
  sdl2-mixer: '>=1.2.0 && <1.3'
  mtl: '>=2.2.2 && <2.3'
  hex-text: '>=0.1.0 && <0.2'
  file-embed: '>=0.0.15 && <0.1'
  random: '>=1.2.1 && <1.3'
  hspec-hedgehog: -any
  scientific: '>=0.3.7 && <0.4'
  Decimal: '>=0.5.2 && <0.6'
  hspec-discover: -any
  spade: -any
  aeson: '>=2.0.2 && <2.1'
  template-haskell: '>=2.17.0 && <2.18'
  vector: '>=0.12.3 && <0.13'
  neat-interpolation: -any
maintainer: sandeep@sras.me
synopsis: A simple programming and debugging environment.
changelog: |
  # Changelog for S.P.A.D.E

  ## Unreleased changes
basic-deps:
  exceptions: '>=0.10.4 && <0.11'
  bytestring: '>=0.10.12 && <0.11'
  stm: '>=2.5.0 && <2.6'
  base: '>=4.9 && <5'
  time: '>=1.9.3 && <1.10'
  WAVE: '>=0.1.6 && <0.2'
  unordered-containers: '>=0.2.16 && <0.3'
  hspec: '>=2.9.4 && <2.10'
  text: '>=1.2.4 && <1.3'
  monad-loops: '>=0.4.3 && <0.5'
  process: '>=1.6.11 && <1.7'
  hedgehog: '>=1.0.5 && <1.1'
  constraints: '>=0.13.2 && <0.14'
  ordered-containers: '>=0.2.2 && <0.3'
  sdl2: '>=2.5.3 && <2.6'
  containers: '>=0.6.4 && <0.7'
  terminal: '>=0.2.0 && <0.3'
  ansi-terminal: '>=0.11.1 && <0.12'
  sdl2-mixer: '>=1.2.0 && <1.3'
  mtl: '>=2.2.2 && <2.3'
  hex-text: '>=0.1.0 && <0.2'
  file-embed: '>=0.0.15 && <0.1'
  random: '>=1.2.1 && <1.3'
  hspec-hedgehog: '>=0.0.1 && <0.1'
  scientific: '>=0.3.7 && <0.4'
  Decimal: '>=0.5.2 && <0.6'
  spade: -any
  aeson: '>=2.0.2 && <2.1'
  template-haskell: '>=2.17.0 && <2.18'
  vector: '>=0.12.3 && <0.13'
all-versions:
- 0.1.0.3
- 0.1.0.4
author: Sandeep.C.R
latest: 0.1.0.4
description-type: markdown
description: |
  # S.P.A.D.E

  S.P.A.D.E stands of Simple Programming And Debugging Environment.

  It contains a simple programming language and a built-in Terminal based
  IDE.

  The following is a small spade program that draws a bunch of random circles
  in red color, in an SDL window.

  ```
  graphicswindow(400, 400, true)
  setcolor(255, 0, 0)
  for i = 1 to 100
    circle(random(10, 300), random(10, 300), random(10, 40))
  endfor
  drawscreen()
  waitforkey()
  ```

  The entire language and function reference is available in the IDE in an
  easily searchable way. Press F1 or use the help menu to access it.

  NOTE: This is still a very early version. The standard library is virtually non
  existent, and those function present are the only ones that were required to write the
  sample programs in the "samples" folder in this repo.

  ### IDE Demo
  A small screen recording of SPADE in action can be seen here. It shows writing
  a small program, and then using the in-built documentation and debugger.

  [![asciicast](https://asciinema.org/a/bG7PPKj0AaJq087ZNPxSZwcCl.svg)](https://asciinema.org/a/bG7PPKj0AaJq087ZNPxSZwcCl)

  ### Installing

  #### Linux

  ##### Run from a portable binary.

  The easiest way to run spade on Linux is to download the portable executable
  from [here](https://sras.me/releases).  The latest release will be named
  `spade.run`.  After downloading the required  `.run` file, make it executable
  and run it.

  ```
  chmod +x spade.run
  ./spade.run
  ```

  The file is a self extraction archive containing most of the shared dependencies, so it should
  hopefully work on most of the linux distros.

  #### From source

  ##### Dependencies

  To install depdendencies:

  ```
    apt-get install libsdl2-dev
    apt-get install libsdl2-mixer-dev
    apt-get install libtinfo-dev
  ```

  You can download the source package '.tar.gz' file from hackage, and use cabal
  or stack tool to build and install it.  After extracting the source to a
  folder, running either of the following commands in the folder should build and install
  it.

  ```
  cabal build && cabal install

  ```

  ```
  stack build && stack install

  ```

  #### Building on Raspberry PI

  You should be able to install this in a Raspberry Pi 3 or later iterations. The following steps appear to
  work for a succesful build on a Raspberry Pi 3.

  1. Install GHC version 9.0.1 following steps described https://www.haskell.org/ghc/blog/20200515-ghc-on-arm.html
  2. Install `stack tool` using `apt-get install haskell-stack`
  3. Increase the swap space to 2GB, disable GUI by booting into terminal mode, and then build the program using `stack build --system-ghc`.

  Depending on your setup, the initial build can take a very long time, like a couple of days.


  ### Getting started

  The program should be started by providing a file name. For example,

  ```
  spade /tmp/temp.spd
  ```

  If the file does not exist, it will be created on save. If it exist then
  contents will loaded into the editor.

  Other than this are no provisions to select or open a file from within the IDE.
  The user is supposed to only work with a single file at one time.

  To interpret a spade program without starting the IDE, you can use
  the `run` command.

  ```
  spade run /tmp/temp.spd
  ```

  Will execute the program without opening the IDE.

  ### Reporting bugs/issues

  Please use the issue tracker [here](https://bitbucket.org/sras/spade/issues).
license-name: GPL-3.0-only
