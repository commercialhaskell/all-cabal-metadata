homepage: ''
changelog-type: markdown
hash: 65dba10f13f5e8a9e6a9ae7a94b09339ff61e2e8b04e5e97f004ab0a2ef64067
test-bench-deps:
  exceptions: -any
  bytestring: -any
  unix: -any
  stm: -any
  base: '>=4.16.3 && <4.17'
  time: -any
  WAVE: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  with-utf8: -any
  strip-ansi-escape: -any
  monad-loops: -any
  filepath: -any
  process: -any
  hedgehog: -any
  constraints: -any
  ordered-containers: -any
  memory: -any
  sdl2: -any
  containers: -any
  terminal: -any
  ansi-terminal: -any
  sdl2-mixer: -any
  regex-tdfa: -any
  cryptonite: -any
  mtl: -any
  hex-text: -any
  file-embed: -any
  random: -any
  hspec-hedgehog: -any
  scientific: -any
  Decimal: -any
  hspec-discover: -any
  spade: -any
  aeson: -any
  template-haskell: -any
  vector: -any
  neat-interpolation: -any
  directory: -any
maintainer: sandeep@sras.me
synopsis: A simple programming and debugging environment.
changelog: |
  # Changelog for S.P.A.D.E

  ## Unreleased

  ## 0.1.0.8

  * Documentation and fix samples

  ## 0.1.0.7

  * Added directory iterator.
  * Make subscripted indexing work for strings and bytes.

  ## 0.1.0.6

  * Added an output window within IDE.
  * Added 'Run > Stop' menu item to kill the interpreter thread anytime.
  * Ctrl-C during interpreter execution drops to debug mode.
  * Make delete key to delete the selection, if there was one.
  * A fix for backward selection weirdness where the selection follows cursor.
  * Add 'debug' command to debug stdin behavior.

  ## 0.1.0.5
  * Fix bug that caused the ide to freeze when the loaded program is run for
    second time.
  * Hide autocomplete window as soon as the only suggestion is the same as
    search key.

  ## 0.1.0.4
  * Fix regression that caused step debugging to freeze the ui.

  ## 0.1.0.3
  * Initial proper release
basic-deps:
  exceptions: -any
  bytestring: -any
  unix: -any
  stm: -any
  base: '>=4.16.3 && <4.17'
  time: -any
  WAVE: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  with-utf8: -any
  monad-loops: -any
  filepath: -any
  process: -any
  hedgehog: -any
  constraints: -any
  ordered-containers: -any
  memory: -any
  sdl2: -any
  containers: -any
  terminal: -any
  ansi-terminal: -any
  sdl2-mixer: -any
  regex-tdfa: -any
  cryptonite: -any
  mtl: -any
  hex-text: -any
  file-embed: -any
  random: -any
  hspec-hedgehog: -any
  scientific: -any
  Decimal: -any
  spade: -any
  aeson: -any
  template-haskell: -any
  vector: -any
  directory: -any
all-versions:
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
author: Sandeep.C.R
latest: 0.1.0.8
description-type: markdown
description: |
  # S.P.A.D.E

  S.P.A.D.E stands of Simple Programming And Debugging Environment.

  It contains a simple programming language and a built-in Terminal based
  IDE.

  The following is a small spade program that draws a bunch of random circles
  in red color, in an SDL window.

  ```
  graphicswindow(400, 400, true)
  setcolor(255, 0, 0)
  for i = 1 to 100
    circle(random(10, 300), random(10, 300), random(10, 40))
  endfor
  render()
  ```

  The entire language and function reference is available in the IDE in an
  easily searchable way. Press F1 or use the help menu to access it.

  NOTE: This is still a very early version. The standard library is virtually non
  existent, and those function present are the only ones that were required to write the
  sample programs in the "samples" folder in this repo.

  ### IDE Demo
  A short screen recording of SPADE in action can be seen [here](https://vimeo.com/692243011).

  ### Installing

  #### Linux

  ##### Run from a portable binary.

  TODO

  #### From source


  ##### Dependencies

  To install depdendencies:

  ```
    apt-get install libsdl2-dev
    apt-get install libsdl2-mixer-dev
    apt-get install libtinfo-dev
  ```

  You will need the `cabal` tool. Once you have either of these, running
  `cabal install spade` will install it for you.

  Or you can download the source package, '.tar.gz' file from hackage, and again
  use cabal or stack tool to build and install it.  After extracting the source
  to a folder, running either of the following commands in the folder should
  build and install it.

  ```
  cabal build && cabal install

  ```

  ```
  stack build && stack install

  ```

  #### Building on Raspberry PI

  You should be able to install this in a Raspberry Pi 3 or later iterations. The following steps appear to
  work for a succesful build on a Raspberry Pi 3.

  1. Install GHC version 9.0.1 following steps described https://www.haskell.org/ghc/blog/20200515-ghc-on-arm.html
  2. Install `stack tool` using `apt-get install haskell-stack`
  3. Increase the swap space to 2GB, disable GUI by booting into terminal mode, and then build the program using `stack build --system-ghc`.

  Depending on your setup, the initial build can take a very long time, like a couple of days.


  ### Getting started

  The program should be started by providing a file name. For example,

  ```
  spade /tmp/temp.spd
  ```

  If the file does not exist, it will be created on save. If it exist then
  contents will loaded into the editor.

  Other than this are no provisions to select or open a file from within the IDE.
  The user is supposed to only work with a single file at one time.

  To interpret a spade program without starting the IDE, you can use
  the `run` command.

  ```
  spade run /tmp/temp.spd
  ```

  Will execute the program without opening the IDE.

  ### Reporting bugs/issues

  Please use the issue tracker [here](https://bitbucket.org/sras/spade/issues).
license-name: GPL-3.0-only
