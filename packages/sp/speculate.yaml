all-versions:
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 0.2.10
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.4
- 0.4.6
- 0.4.8
- 0.4.10
- 0.4.12
- 0.4.14
author: Rudy Matela,  Colin Runciman
basic-deps:
  base: '>=4 && <5'
  cmdargs: '>=0'
  containers: '>=0'
  express: '>=1.0.0'
  leancheck: '>=0.9.6'
changelog: "Changelog for Speculate\n=======================\n\n\nv0.4.14\n-------\n\n*
  `Test.Speculate.Reason`: add `doubleCheck`;\n* add `lowtests` benchmark;\n* bump
  [express] requirement to v1.0.0;\n* fix parallel compilation when using the Makefile.\n\n\nv0.4.12\n-------\n\n*
  bump [express] requirement to v0.2.0\n* add this changelog\n\n\nv0.4.10\n-------\n\n*
  no changes in the actual [Speculate] library\n* cleanup build files\n* remove uneeded
  typeable derivations on examples and tests\n\n\nv0.4.8\n------\n\n* no changes in
  the actual [Speculate] library\n* refactor build scripts\n* use GitHub Workflows
  as the CI\n* fix compilation of some examples under the new [LeanCheck]\n\n\nv0.4.6\n------\n\n*
  [`Test.Speculate`]: export `reifyName`;\n* \"internal\" modules:\n\t- `Test.Speculate.Args`:
  remove `compareExpr`;\n\t- `Test.Speculate.Engine`: add three new wrappers for \"theory
  and representatives\";\n\t- `Test.Speculate.Expr.Core`: rename functions to `compareLexicographicallyBy`
  and `compareComplexityThenIndex`;\n\t- `Test.Speculate.Function`: add `Function.A10`
  and `A100` and `A1000`;\n\t- `Test.Speculate.Reason`: export `isRootNormal` and
  `isRootNormalE`;\n* add trilean benchmark;\n* improve order tests.\n\n\nEarlier
  versions\n----------------\n\nPlease refer to the [git commit history].\n\n[git
  commit history]: https://github.com/rudymatela/speculate/commits/master\n\n[Speculate]:
  \       https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html\n[`Test.Speculate`]:
  https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html\n[LeanCheck]:
  \       https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html\n[express]:
  \         https://hackage.haskell.org/package/express\n"
changelog-type: markdown
description: "Speculate\n=========\n\n[![Speculate Build Status][build-status]][build-log]\n[![Speculate
  on Hackage][hackage-version]][speculate-on-hackage]\n[![Speculate on Stackage LTS][stackage-lts-badge]][speculate-on-stackage-lts]\n[![Speculate
  on Stackage Nightly][stackage-nightly-badge]][speculate-on-stackage-nightly]\n\n![Speculate
  logo][speculate-logo]\n\nSpeculate automatically discovers laws about [Haskell]
  functions.\nGive Speculate a bunch of Haskell functions and it will discover laws
  like:\n\n  * equations, such as `id x == x`;\n  * relations of order, such as `0
  <= x * x`;\n  * conditional equations, such as `x <= 0  ==>  x + abs x == 0`.\n\nSpeculate
  is similar to, and inspired by, [QuickSpec].\n\n\nInstalling Speculate\n--------------------\n\nTo
  install the [latest Speculate version from Hackage], just:\n\n\t$ cabal update\n\t$
  cabal install speculate\n\nPre-requisites are [cmdargs], [express] and [leancheck].\nThey
  should be automatically resolved and installed by [Cabal].\n\n\nUsing Speculate\n---------------\n\nSpeculate
  is used as a library: import it, then call the function [`speculate`]\nwith relevant
  arguments.  The following program Speculates about the\nfunctions [`(+)`] and [`abs`]:\n\n\timport
  Test.Speculate\n\n\tmain :: IO ()\n\tmain = speculate args\n\t  { constants =\n\t
  \     [ showConstant (0::Int)\n\t      , showConstant (1::Int)\n\t      , constant
  \"+\"   ((+)  :: Int -> Int -> Int)\n\t      , constant \"abs\" (abs  :: Int ->
  Int)\n\t      ]\n\t  }\n\nwhen run, it prints the following:\n\n\t_ :: Int  (holes:
  Int)\n\t0 :: Int\n\t1 :: Int\n\t(+) :: Int -> Int -> Int\n\tabs :: Int -> Int\n\n\t
  \   abs (abs x) == abs x\n\t          x + 0 == x\n\t          x + y == y + x\n\t
  \   (x + y) + z == x + (y + z)\n\tabs (x + abs x) == x + abs x\n\t  abs x + abs
  x == abs (x + x)\n\tabs (1 + abs x) == 1 + abs x\n\n\tx <= abs x\n\t0 <= abs x\n\tx
  <= x + 1\n\n\nNow, if we add [`<=`] and [`<`] as background constants on [`args`]\n\n\t
  \ , constants =\n\t      [ showConstant (0::Int)\n\t      , showConstant (1::Int)\n\t
  \     , constant \"+\"   ((+)  :: Int -> Int -> Int)\n\t      , constant \"abs\"
  (abs  :: Int -> Int)\n\t      , background\n\t      , constant \"<=\"  ((<=) ::
  Int -> Int -> Bool)\n\t      , constant \"<\"   ((<)  :: Int -> Int -> Bool)\n\t
  \     ]\n\nthen run again, we get the following as well:\n\n\t    y <= x ==> abs
  (x + abs y) == x + abs y\n\t    x <= 0 ==>       x + abs x == 0\n\tabs x <= y ==>
  \    abs (x + y) == x + y\n\tabs y <= x ==>     abs (x + y) == x + y\n\nFor more
  examples, see the [eg](eg) folder.\n\n(One can use the [TypeApplications] to simplify
  the above examples:\n`((+) @ Int)` instead of `((+) :: Int -> Int -> Int))`.\nI
  have chosen to keep the example [Haskell 98] compliant.)\n\n\nSupported types\n---------------\n\nSpeculate
  works for virtually any type.\nHowever,\nif you would like to produce equations,\ncomparisons
  and variables of any given type\nthis type must be respectively\nan instance of
  the [`Eq`], [`Ord`], [`Listable`] and [`Name`] typeclasses.\n\nBy default,\nSpeculate
  will produce equations, comparison and variables\nto [a few types](https://github.com/rudymatela/speculate/blob/master/src/Test/Speculate/Expr/Instance.hs#L110-L151)\nin
  the [Haskell 2010 Language Report].\nIf you would like expand that to more types,\nyou
  need to pass reified instances to Speculate explicitly by\nusing [`reifyInstances`]
  on [`instances =`] of [`speculate`]'s [`args`] like so:\n\n\tmain = speculate args\n
  \     { instances = [ reifyInstances (undefined :: <Type1>)\n                    ,
  reifyInstances (undefined :: <Type2>)\n                    , reifyInstances (undefined
  :: <Type3>)\n\t                , ...\n\t                ]\n      , constants = ...\n\t
  \ , ...\n\t  }\n\nTo use [`reifyInstances`],\nyour type must be an instance of\n[`Eq`],
  [`Ord`], [`Listable`] and [`Name`].\n\n* [`Eq`]  is needed for equations between
  values of the type;\n\n* [`Ord`] is needed for comparisons between values of the
  type;\n\n* [`Listable`] is needed for involving variables of the type.\n  This is
  needed in order for Speculate to be able\n  to generate values of your type to replace
  any variables.\n  [LeanCheck] comes with [`Listable`] instances\n  for virtually
  all types in the [Haskell 2010 Language Report].\n\n* [`Name`] is needed for cosmetic
  puposes:\n  if there are any variables of your type,\n  [`Name`] allows you to tell
  Speculate how to call your variables.\n  For example, if you have an `User` type,
  you can define your name instance as:\n\n\t\tinstance Name (User) where\n\t\t\tname
  u  =  \"usr\"\n\n  This way, variables of your `User` type will be called:\n  `usr`,
  `usr1`, `usr2`, `usr3`, etc.\n\nIt is also fine to have only one, two or three of
  the above instances.\nIn that case, instead of [`reifyInstances`]\nyou can use [`reifyEq`],
  [`reifyOrd`], [`reifyListable`] and [`reifyName`] accordingly.\nIf you do not provide
  a [`Name`] implementation,\nyour variables will default to being `x`, `y` and `z`.\nThis
  may cause confusion as you involve more and more types,\ncompare the following two
  identical equations:\n\n\t[x,y] `areOwnedBy` z  ==  z `owns` x && z `owns` y\n\t[tckt,tckt1]
  `areOwnedBy` user  ==  usr `owns` tckt && user `owns tckt1`\n\nThe second is clearer.\nSo,
  I recomment you add a [`Name`] instance.\nIt is simple enough.\n\nYou also have
  to do this for any user defined types you are using\nor even for newtypes.\n\nSpeculate
  comes with a few examples illustrating the use of [`reifyInstances`]:\non the [eg](eg)
  folder:\n[eg/algebraic-graphs.hs](eg/algebraic-graphs.hs),\n[eg/binarytree0.hs](eg/binarytree0.hs),\n[eg/binarytree.hs](eg/binarytree.hs),\n[eg/colour.hs](eg/colour.hs),\n[eg/digraphs.hs](eg/digraphs.hs),\n[eg/fun.hs](eg/fun.hs),\n[eg/monad.hs](eg/monad.hs),\n[eg/pretty-compact.hs](eg/pretty-compact.hs),\n[eg/pretty.hs](eg/pretty.hs),\n[eg/regexes.hs](eg/regexes.hs),\n[eg/sets.hs](eg/sets.hs),\n[eg/speculate-reason.hs](eg/speculate-reason.hs),\n[eg/string.hs](eg/string.hs),\n[eg/tauts.hs](eg/tauts.hs),\n[eg/tuples.hs](eg/tuples.hs),\n[eg/zip.hs](eg/zip.hs).\n\nNot
  having the reified instances for a given type will cause the following warnings
  to be printed:\n\n\tWarning: no Listable instance for <YourTypeHere>, variables
  of this type will not be considered\n\tWarning: no Listable instance for <YourTypeHere>,
  variables of this type will not be considered\n\tWarning: no Eq instance for <YourTypeHere>,
  equations of this type will not be considered\n\tWarning: no Eq instance for <YourTypeHere>,
  equations of this type will not be considered\n\tWarning: no Ord instance for <YourTypeHere>,
  inequations of this type will not be considered\n\tWarning: no Ord instance for
  <YourTypeHere>, inequations of this type will not be considered\n\nYou can silence
  the above warnings by following the instructions above.\nHowever, it may be the
  case that you don't want variables, equations or comparisons for a given type.\nIf
  that is so, you can ignore these warnings.\n\n\nSimilarities and Differences to
  QuickSpec\n-----------------------------------------\n\nSpeculate is inspired by
  [QuickSpec].\nLike QuickSpec, Speculate uses testing to speculate equational laws
  about given\nHaskell functions.  There are some differences:\n\n* Speculate tests
  enumeratively using [LeanCheck],\n  QuickSpec tests randomly using [QuickCheck];\n*
  Speculate is able to report comparisons directly;\n* QuickSpec allows polymorphism,
  Speculate does not;\n* For most examples,\n  Speculate runs slower than QuickSpec
  2\n  but faster than QuickSpec 1.\n\n\nMore documentation\n------------------\n\nFor
  more examples, see the [eg](eg) and [bench](bench) folders.\n\nSpeculate has been
  subject to a paper, see the\n[Speculate Paper on Haskell Symposium 2017](https://matela.com.br/paper/speculate.pdf).\nSpeculate
  is also subject to a chapter in a [PhD Thesis (2017)].\n\n[leancheck]: https://hackage.haskell.org/package/leancheck\n[LeanCheck]:
  https://hackage.haskell.org/package/leancheck\n[express]:   https://hackage.haskell.org/package/express\n[QuickSpec]:
  https://github.com/nick8325/quickspec\n[QuickCheck]: https://hackage.haskell.org/package/QuickCheck\n[cmdargs]:
  https://hackage.haskell.org/package/cmdargs\n\n[Cabal]:   https://www.haskell.org/cabal\n[Haskell]:
  https://www.haskell.org/\n\n[PhD Thesis (2017)]: https://matela.com.br/paper/rudy-phd-thesis-2017.pdf\n\n[`speculate`]:
  \     https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:speculate\n[`constant`]:
  \      https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:constant\n[`args`]:
  \          https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:args\n[`Args`]:
  \          https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#t:Args\n[`instances
  =`]:    https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#t:Args\n\n[`reifyInstances`]:
  https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:reifyInstances\n[`reifyEq`]:
  \       https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:reifyEq\n[`reifyOrd`]:
  \      https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:reifyOrd\n[`reifyEqOrd`]:
  \    https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:reifyEqOrd\n[`reifyListable`]:
  \ https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:reifyListable\n[`reifyName`]:
  \     https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#v:reifyName\n\n[`Eq`]:
  \            https://hackage.haskell.org/package/base/docs/Prelude.html#t:Eq\n[`Ord`]:
  \           https://hackage.haskell.org/package/base/docs/Prelude.html#t:Ord\n[`Listable`]:
  \      https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#t:Listable\n[`Name`]:
  \          https://hackage.haskell.org/package/speculate/docs/Test-Speculate.html#t:Name\n\n[`(+)`]:
  \      https://hackage.haskell.org/package/base/docs/Prelude.html#v:-43-\n[`abs`]:
  \      https://hackage.haskell.org/package/base/docs/Prelude.html#v:abs\n[`<=`]:
  \       https://hackage.haskell.org/package/base/docs/Prelude.html#v:-60--61-\n[`<`]:
  \        https://hackage.haskell.org/package/base/docs/Prelude.html#v:-60-\n\n[Haskell
  2010 Language Report]:          https://www.haskell.org/onlinereport/haskell2010/\n[Haskell
  2010]:                          https://www.haskell.org/onlinereport/haskell2010/\n[Haskell
  98]:                            https://www.haskell.org/onlinereport/\n[TypeApplications]:
  \                     https://gitlab.haskell.org/ghc/ghc/-/wikis/type-application\n\n[speculate-logo]:
  https://github.com/rudymatela/speculate/raw/master/doc/speculate.svg?sanitize=true\n\n[build-log]:
  \   https://github.com/rudymatela/speculate/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/speculate/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  https://img.shields.io/hackage/v/speculate.svg\n[latest Speculate version from Hackage]:
  https://hackage.haskell.org/package/speculate\n[speculate-on-hackage]:                  https://hackage.haskell.org/package/speculate\n[stackage-lts-badge]:
  \           https://stackage.org/package/speculate/badge/lts\n[stackage-nightly-badge]:
  \       https://stackage.org/package/speculate/badge/nightly\n[speculate-on-stackage]:
  \        https://stackage.org/package/speculate\n[speculate-on-stackage-lts]:     https://stackage.org/lts/package/speculate\n[speculate-on-stackage-nightly]:
  https://stackage.org/nightly/package/speculate\n"
description-type: markdown
hash: 5b2c7df0bc96cb9129b58506bd8847a1eb12b291e6d1d5120b6dfc99d236101a
homepage: https://github.com/rudymatela/speculate#readme
latest: 0.4.14
license-name: BSD-3-Clause
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: discovery of properties about Haskell functions
test-bench-deps:
  base: '>=4 && <5'
  express: '>=0'
  leancheck: '>=0'
  speculate: '>=0'
