all-versions:
- 1.0.0
author: Arista Networks
basic-deps:
  base: '>=4.14 && <4.15'
  comonad: '>=0'
  containers: '>=0.6'
  hashable: '>=1.3.0.0'
  logict: '>=0'
  microlens: '>=0'
  microlens-mtl: '>=0'
  mtl: '>=2.2'
  optparse-applicative: '>=0'
  prettyprinter: '>=0'
  prettyprinter-ansi-terminal: '>=0'
  text: '>=0'
  transformers: '>=0.5'
changelog: "Version 0.1.0.0\n===============\n\n#### Extensible Records\n\n* 'RecT'
  renamed to 'RecF' to avoid colliding with the naming scheme generally reserved for
  monad transformers. Record constructor names reflect this change.\n\n* The \"rec\"
  suffix removed from the functions 'setRecF', 'getRecF', 'getRec', and 'setRec' renamed
  to prefer the less noise 'setF', getF', 'set', and 'get'.\n\n* The selector constraint
  (.|) and (#) type synonym replaced with 'Has' constraint for readiblity. \n  ```haskell
  \n  -- previously \n  type HasFooInt ctx = \"foo\" # Int .| ctx \n  \n  -- ... is
  now \n  type HasFootInt ctx = Has \"foo\" Int ctx\n  ```\n\n* A new type 'Evident'
  and class 'HasDict' now give a uniform way for capturing typeclass evidence of extensible
  records.\n\n* 'Rec' and 'RecT' instance declaration are no longer defined for the
  base case and inductive case. Instead, extensible record instances pass the responsibility
  witnessing a dictionary to a 'HasDict' superclass.  \n  ```haskell \n  -- old version\n
  \ instance Show (Rec '[]) where \n    show RNil = ...\n\n  instance (Show x, Show
  xs) => Show (Rec (x ': xs)) where \n    show RNil = ...\n    \n  -- new version\n
  \ instance HasDict Show ctx => Show (Rec ctx) where\n    show Nil = ... \n    show
  Con {} = ... \n  ```\n"
changelog-type: markdown
description: |
  # spectacle

  [![ci](https://github.com/awakesecurity/spectacle/actions/workflows/ci.yml/badge.svg)](https://github.com/awakesecurity/spectacle/actions/workflows/ci.yml)

  `Language.Spectacle` defines an embedded language for writing formal specifications of software in the temporal logic of actions. Specifications written in spectacle can be model-checked and shown to either be correct with respect to temporal properties or refuted by a counterexample. Examples of specifications written in spectacle are provided under `test/integration`.
description-type: markdown
hash: 6681a516404790eef33c3c91c9f1da5f91ed44b41912ed585b7479918a8e855f
homepage: https://github.com/awakesecurity/spectacle
latest: 1.0.0
license-name: Apache-2.0
maintainer: opensource@awakesecurity.com
synopsis: Embedded specification language & model checker in Haskell.
test-bench-deps:
  base: '>=4.14 && <4.15'
  comonad: '>=0'
  containers: '>=0'
  hashable: '>=0'
  hedgehog: '>=0'
  microlens: '>=0'
  spectacle: '>=0'
  tasty: '>=0'
  tasty-hedgehog: '>=0'
