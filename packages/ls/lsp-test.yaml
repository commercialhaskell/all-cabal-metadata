all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.5.1.4
- 0.5.2.0
- 0.5.2.1
- 0.5.2.2
- 0.5.2.3
- 0.5.3.0
- 0.5.4.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.8.0.0
- 0.8.1.0
- 0.8.2.0
- 0.9.0.0
- 0.10.0.0
- 0.10.1.0
- 0.10.2.0
- 0.10.3.0
- 0.11.0.0
- 0.11.0.1
- 0.11.0.2
- 0.11.0.3
- 0.11.0.4
- 0.11.0.5
- 0.11.0.6
- 0.11.0.7
- 0.12.0.0
- 0.13.0.0
- 0.14.0.0
- 0.14.0.1
- 0.14.0.2
- 0.14.0.3
- 0.14.1.0
- 0.15.0.0
- 0.15.0.1
- 0.16.0.0
- 0.16.0.1
- 0.17.0.0
- 0.17.0.1
- 0.17.0.2
- 0.17.1.0
author: Luke Lau
basic-deps:
  Diff: '>=0.4 && <0.6'
  Glob: '>=0.9 && <0.11'
  aeson: '>=2 && <2.3'
  aeson-pretty: ^>=0.8
  ansi-terminal: '>=0.10 && <1.2'
  async: ^>=2.2
  base: '>=4.10 && <5'
  bytestring: '>=0.10 && <0.13'
  co-log-core: ^>=0.3
  conduit: ^>=1.3
  conduit-parse: ^>=0.2
  containers: '>=0.6 && <0.8'
  data-default: ^>=0.7
  directory: ^>=1.3
  exceptions: ^>=0.10
  extra: ^>=1.7
  filepath: '>=1.4 && <1.6'
  lens: '>=5.1 && <5.4'
  lens-aeson: ^>=1.2
  lsp: ^>=2.7
  lsp-types: ^>=2.3
  mtl: '>=2.2 && <2.4'
  parser-combinators: ^>=1.3
  process: ^>=1.6
  some: ^>=1.0
  text: '>=1 && <2.2'
  time: '>=1.10 && <1.13'
  transformers: '>=0.5 && <0.7'
  unix: '>=0'
changelog: "# Revision history for lsp-test\n\n## 0.17.1.0 -- 2024-06-06\n\n- Add
  helpers for testing inlay hints.\n\n## 0.17.0.2\n\n- Support for newer versions
  of dependencies.\n\n## 0.17.0.1\n\n- Support for newer versions of dependencies.\n\n##
  0.17.0.0\n\n- `ignoreRegistrationRequests` option to ignore `client/registerCapability`
  requests, on\n  by default.\n- New functions `setIgnoringRegistrationRequests` to
  change whether such messages are \n  ignored during a `Session` without having to
  change the `SessionConfig`.\n- `lsp-test` will no longer send `workspace/didChangConfiguration`
  notifications unless\n  the server dynamically registers for them.\n\n## 0.16.0.1\n\n-
  Support newer versions of dependencies.\n\n## 0.16.0.0\n\n- The client configuration
  is now _mandatory_ and is an `Object` rather than a `Value`.\n- `lsp-test` now responds
  to `workspace/configuration` requests.\n- `lsp-test` does _not_ send a `workspace/didChangeConfiguration`
  request on startup.\n- New functions for modifying the client configuration and
  notifying the server.\n- `ignoreLogNotifications` is now _on by default_. Experience
  shows the norm is to ignore these\n  and it is simpler to turn this on only when
  they are required.\n- `ignoreConfigurationRequests` option to ignore `workspace/configuration`
  requests, also on\n  by default.\n- New functions `setIgnoringLogNotifications`
  and `setIgnoringConfigurationRequests` to change\n  whether such messages are ignored
  during a `Session` without having to change the `SessionConfig`.\n\n## 0.15.0.1\n\n*
  Adds helper functions to resolve code lens, code actions, and completion items.\n\n##
  0.15.0.0\n\n* Support `lsp-types-2.0.0.0` and `lsp-2.0.0.0`.\n\n## 0.14.1.0\n\n*
  Compatibility with new `lsp-types` major version.\n* Export `runSessionWithConfigCustomProcess`
  to allow modifying the CreateProcess used to start a server\n* Add `MonadThrow`
  instance for `Session`\n\n## 0.14.0.3\n\n* Compatibility with new `lsp-types` major
  version.\n\n## 0.14.0.2 \n\n* Compatibility with new `lsp-types` major version.\n\n##
  0.14.0.1 -- 2021-07-30\n\n* Catch IO exception when sending messages to server (#317)
  (@berberman)\n* Improve error messages on JSON decode failures (#320) (@strager)\n*
  Add tests for satisfyMaybe (#325) (@strager)\n* Add call hierarchy support (@July541)\n*
  pass the lspConfig at initialization time as well (@pepeiborra)\n* Semantic tokens
  support (@michaelpj)\n\n## 0.13.0.0 -- 2021-03-26\n\n* Update for lsp-types-1.2
  (@wz1000)\n* Limit diagnostics by range in getCodeActions (@aufarg)\n* Kill timeout
  thread to avoid building up thousands of old TimeoutMessages (@wz1000)\n\n## 0.13.0.0
  -- 2021-02-14\n\n* Add support for lsp-types-1.1 (@wz1000)\n* Automatically respond
  to `workspace/applyEdit` and\n  `window/workDoneProgress/create` messages (@wz1000)\n\n##
  0.12.0.0 -- 2021-01-25\n* Add `getIncompleteProgressSessions` to track ongoing progress
  sessions\n  (@wz1000)\n\n## 0.11.0.0 -- 2020-05-14\n\n* Replace `openDoc'` with
  `createDoc` which now sends\n  `workspace/didChangeWatchedFiles` notifications if
  the server has registered\n  for it\n* Add `getRegisteredCapabilities`\n\n## 0.10.3.0
  -- 2020-05-04\n\n* Build with new haskell-lsp-0.22\n\n## 0.10.2.0 -- 2020-03-21\n\n*
  Bump constraints for new haskell-lsp\n\n## 0.10.1.0 -- 2020-02-04\n\n* Bump constraints
  for new haskell-lsp\n\n## 0.10.0.0 -- 2019-12-29\n\n* Account for messages received
  between the initialize request and response.\n  (Though it will throw an exception
  if the message received is an illegal one)\n\n## 0.9.0.0 -- 2019-12-1\n\n* Add `ignoreLogNotifications`
  config option\n* Add ability to override `logStdErr` and `logMessages` config options
  with\n  the `LSP_TEST_LOG_STDERR` and `LOG_TEST_LOG_MESSAGES` environment variables\n*
  Update for haskell-lsp-0.19.0.0 (@mpickering)\n\n## 0.8.2.0 -- 2019-11-17\n\n* Expose
  `satisfyMaybe` (@cocreature)\n\n## 0.8.1.0 -- 2019-11-17\n\n* Update to haskell-lsp-0.18.0.0
  (@mpickering, @alanz)\n* Tests now require hie-bios based hie\n\n## 0.8.0.0 -- 2019-10-18\n\n*
  Make `Session` a newtype\n* Update for haskell-lsp-0.17.0.0 (@cocreature)\n\n##
  0.7.0.0 -- 2019-09-08\n\n* Update for haskell-lsp-0.16.0.0\n\n## 0.6.1.0 -- 2019-08-24\n\n*
  Add `satisfyMaybe` (@cocreature)\n\n## 0.6.0.0 -- 2019-07-04\n\n* Update to haskell-lsp-0.15.0.0
  (@lorenzo)\n\n## 0.5.4.0 -- 2019-06-13\n\n* Fix `getDefinitions` for SingleLoc (@cocreature)\n*
  Add `getCodeLenses` (@cocreature)\n\n## 0.5.3.0 -- 2019-06-13\n\n* Update to haskell-lsp-0.14.0.0
  (@cocreature)\n* Support `TextDocumentDidChange` (@cocreature)\n* Add non-file based
  `openDoc` (@cocreature)\n\n## 0.5.2.0 -- 2019-04-28\n\n* Add `satisfy` parser combinator\n\n##
  0.5.1.0 -- 2019-04-22\n\n* Fix unhandled `window/progress` server notifications\n\n##
  0.5.1.0 -- 2019-04-07\n\n* Add getTypeDefinitions (@fendor)\n\n## 0.5.0.2 -- 2018-12-05\n\n*
  Fix loose threads when exceptions are thrown\n\n## 0.5.0.0 -- 2018-11-13\n\n* Add
  lspConfig option in config\n* GHC 8.6.2 support\n\n## 0.4.0.0 -- 2018-09-08\n\n*
  Update to haskell-lsp-0.8.0.0\n\n## 0.3.0.0 -- 2018-09-0t\n\n* Update to haskell-lsp-0.7.0.0\n\n##
  0.2.1.0 -- 2018-08-14\n\n* Add getCodeActions\n* Add getCurrentDiagnostics\n\n##
  0.2.0.0 -- 2018-08-06\n\n* Update to haskell-lsp 0.6.0.0\n"
changelog-type: markdown
description: |
  # lsp-test

  lsp-test is a functional testing framework for Language Server Protocol servers.

  It is part of the [lsp](https://github.com/haskell/lsp) family of
  packages, along with [lsp](https://hackage.haskell.org/package/lsp)
  and [lsp-types](https://hackage.haskell.org/package/lsp-types)

  ```haskell
  import Language.LSP.Test
  main = runSession "hie" fullLatestClientCaps "proj/dir" $ do
    doc <- openDoc "Foo.hs" "haskell"
    skipMany anyNotification
    symbols <- getDocumentSymbols doc
  ```

  ## Examples

  ### Unit tests with HSpec
  ```haskell
  describe "diagnostics" $
    it "report errors" $ runSession "hie" fullLatestClientCaps "test/data" $ do
      openDoc "Error.hs" "haskell"
      [diag] <- waitForDiagnosticsSource "ghcmod"
      liftIO $ do
        diag ^. severity `shouldBe` Just DsError
        diag ^. source `shouldBe` Just "ghcmod"
  ```

  ### Replaying captured session
  ```haskell
  replaySession "hie" "test/data/renamePass"
  ```

  ### Parsing with combinators
  ```haskell
  skipManyTill loggingNotification publishDiagnosticsNotification
  count 4 (message :: Session ApplyWorkspaceEditRequest)
  anyRequest <|> anyResponse
  ```

  Try out the example tests in the `example` directory with `cabal test`.
  For more examples see this [introductory blog post](https://lukelau.me/haskell/posts/lsp-test/).

  Whilst writing your tests you may want to debug them to see what's going wrong.
  You can set the `logMessages` and `logStdErr` options in `SessionConfig` to see what the server is up to.
  There are also corresponding environment variables so you can turn them on from the command line:
  ```
  LSP_TEST_LOG_MESSAGES=1 LSP_TEST_LOG_STDERR=1 cabal test
  ```

  ## Developing
  The tests for lsp-test use a dummy server found in `test/dummy-server/`.
  Run the tests with `cabal test` or `stack test`.
  Tip: If you want to filter the tests, use `cabal run test:tests -- -m "foo"`

  ## Troubleshooting
  Seeing funny stuff when running lsp-test via stack? If your server is built upon Haskell tooling, [keep in mind that stack sets some environment variables related to GHC, and you may want to unset them.](https://github.com/alanz/haskell-ide-engine/blob/bfb16324d396da71000ef81d51acbebbdaa854ab/test/utils/TestUtils.hs#L290-L298)
description-type: markdown
hash: f54757a564b46783cf67b13f4cb4ebc45e43f5afc3604d9757ee387c091b73e9
homepage: https://github.com/haskell/lsp/blob/master/lsp-test/README.md
latest: 0.17.1.0
license-name: BSD-3-Clause
maintainer: luke_lau@icloud.com
synopsis: Functional test framework for LSP servers.
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  co-log-core: '>=0'
  containers: '>=0'
  data-default: '>=0'
  directory: '>=0'
  extra: '>=0'
  filepath: '>=0'
  hspec: '>=0'
  lens: '>=0'
  lsp: '>=0'
  lsp-test: '>=0'
  mtl: '>=0'
  parser-combinators: '>=0'
  process: '>=0'
  text: '>=0'
  unliftio: '>=0'
