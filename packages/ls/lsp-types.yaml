homepage: https://github.com/haskell/lsp
changelog-type: markdown
hash: 1dc41eb358345c1927fb8f285e7d951869623fe5b695fbbecf2fe6a3cee9fcfd
test-bench-deps: {}
maintainer: alan.zimm@gmail.com
synopsis: Haskell library for the Microsoft Language Server Protocol, data types
changelog: "# Revision history for lsp-types\n\n## 1.2.0.1\n\n* Add compatibility
  with GHC 9.2 (#345) (@fendor)\n* Fix missing lenses (@michaelpj)\n* Semantic tokens
  support (@michaelpj)\n* Fix GHC 9 build (@anka-213)\n* Add call hierarchy support
  (@July541)\n* Do not crash on workspace/didChangeConfiguration (#321) (@strager)\n*
  Improve error messages on JSON decode failures (#320) (@strager)\n\n## 1.2.0.0\n\n*
  Prevent crashing when optional fields are missing (@anka-213)\n* Use StrictData
  (@wz1000)\n* Add MarkupContent in SignatureHelp types (@michaelpj)\n* Add activeParameter
  support in SignatureInformation (@michaelpj)\n* Add label offset support in SignatureHelp
  (@michaelpj)\n* Add some documentation comments to SignatureHelp types (@michaelpj)\n*
  Add support for InsertReplaceEdit (@michaelpj)\n* Add support for InsertTextMode
  (@michaelpj)\n* Add resolveSupport (@michaelpj)\n* Fix applying a TextEdit past
  the end of the document (#271) (@michaelpj)\n* Use Empty instead of () as progress
  create response (#295) (@wz1000)\n* Add tag support for DocumentSymbol, SymbolInformation,
  and document symbol provider label (#301) (@michaelpj)\n* Support change annotations
  (#302) (@michaelpj)\n* Add some more missing lenses (#307) (@michaelpj)\n\n## 1.1.0.0\n\n*
  Fix prepareRename reponse and prepareProvider (@kirelagin)\n* Fix deriving instance
  of MonadUnliftIO (@banacorn)\n* Add support for file and folder operations in WorkspaceEdit
  (@banacorn)\nInstead of having TextDocumentEdit in WorkspaceEdit\n\n```haskell\ndata
  WorkspaceEdit =\n  WorkspaceEdit\n    { _changes         :: Maybe WorkspaceEditMap\n
  \   , _documentChanges :: Maybe (List TextDocumentEdit)\n    } deriving (Show, Read,
  Eq)\n```\nIt is now replaced by a new type called DocumentChange\n\n```haskell\ndata
  WorkspaceEdit =\n  WorkspaceEdit\n    { _changes         :: Maybe WorkspaceEditMap\n
  \   , _documentChanges :: Maybe (List DocumentChange)\n    } deriving (Show, Read,
  Eq)\n```\nWhich is just a synonym of union of WorkspaceEdit and other operations\n\n```haskell\ntype
  DocumentChange = TextDocumentEdit |? CreateFile |? RenameFile |? DeleteFile\n```\n*
  Add new CodeAction features (isPreferred, disabled) (@pepeiborra)\n* Respond to
  requests with missing handlers (@wz1000)\n* Use Text over String in more places
  (@wz1000)\n* Add missing lenses (@wz1000, @bubba)\n\n## 1.0.0.0\n\n1.0.0.0 is a
  major rework with both internal and external facing changes, and\nwill require manual
  migration.\n\n* The package has been renamed from `haskell-lsp` to `lsp`, and similarly
  for `haskell-lsp-types` to `lsp-types`\n  * Because of this, all modules are now
  exported from `Language.LSP.X` rather than `Language.Haskell.X`.\n* Both `lsp` and
  `lsp-types` have been reworked to be much more *type safe*\n* The 3.15 specification
  should be fully supported now. If you find anything in\n  the specification that
  isn't in lsp-types, please let us know\n* The Capture module has been removed as
  it will be reworked later on and moved to lsp-test\n* `lsp` can now handle dynamic
  registration through the `registerCapability` and\n  `unregisterCapability` functions\n\n###Â Type
  safety\nThere are three types of concrete messages, `NotificationMessage`,\n`RequestMessage`
  and `ResponseMessage`. They are parameterised by their\n`Method`, which determines
  what type their parameters or response result must be.\n\n```haskell\ndata RequestMessage
  (m :: Method f Request) = RequestMessage\n    { _jsonrpc :: Text\n    , _id      ::
  LspId m\n    , _method  :: SMethod m\n    , _params  :: MessageParams m\n    }\n```\n\nA
  `Method` in turn is parameterised by whether it originates from the client or\nthe
  server, and whether it is used for notifications or requests:\n\n```haskell\nTextDocumentFoldingRange
  \          :: Method FromClient Request\nTextDocumentSelectionRange         :: Method
  FromClient Request\nWindowShowMessage                  :: Method FromServer Notification\nWindowShowMessageRequest
  \          :: Method FromServer Request\n```\n\nEach `Method` also has a singleton
  counterpart which allows it to be used at the\nterm level, for example in `RequestMessage._method`:\n\n```haskell\nSTextDocumentFoldingRange
  \          :: SMethod TextDocumentFoldingRange\nSTextDocumentSelectionRange         ::
  SMethod TextDocumentSelectionRange\n\nSWindowShowMessage                  :: SMethod
  WindowShowMessage\nSWindowShowMessageRequest           :: SMethod WindowShowMessageRequest\n```\n\nThe
  type families `MessageParams` and `ResponseResult` map each `Method` to the\nappropriate
  type to be used in a response:\n\n```haskell\nResponseResult TextDocumentRename
  \           = WorkspaceEdit\nResponseResult TextDocumentPrepareRename     = Range
  |? RangeWithPlaceholder\n```\n\nAlso new is the `|?` type which represents [union
  types in\nTypeScript](https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html#union-types),\nand
  is used throughout the specification where a field can accept several\ndifferent
  types.\n\nAs an example of this in action, the types of your handlers will now depend
  on\nwhether or not they are a request or a notification. They will pass along the\nprecise
  type for the parameters the method you are handling, and in the case of\na request
  handler, will expect that the response you give back is of the correct\ntype as
  well.\n\n```haskell\ntype family Handler (f :: Type -> Type) (m :: Method from t)
  = (result :: Type) | result -> f t m where\n  Handler f (m :: Method _from Request)
  \     = RequestMessage m -> (Either ResponseError (ResponseResult m) -> f ()) ->
  f ()\n  Handler f (m :: Method _from Notification) = NotificationMessage m -> f
  ()\n```\n\n### LspT\n`LspFuncs` has been removed and instead functionality is exposed
  through\nfunctions in the `MonadLsp` class.\n\n```haskell\ngetVirtualFile :: MonadLsp
  config m => NormalizedUri -> m (Maybe VirtualFile)\nsendRequest :: forall (m ::
  Method FromServer Request) f config. MonadLsp config f\n            => SServerMethod
  m\n            -> MessageParams m\n            -> (Either ResponseError (ResponseResult
  m) -> f ())\n            -> f (LspId m)\n```\n\nIt is parameterised over the server's
  LSP configuration type and the underlying\nmonad.\nWe recommend that you build your
  own monad for your server on top of the `LspT`\ntransformer, so it will automatically
  become an instance of `MonadLsp`.\n\nInside the new `ServerDefinition` data type
  which gets passed to `runServer`,\nyou need to specify how to convert from IO to
  your monad and back in\n`interpretHandler` so that `lsp` can execute your monad
  inside the handlers. You\ncan use the result returned from `doInitialize` to pass
  along the\n`LanguageContextEnv` needed to run an `LspT`, as well as anything else
  your\nmonad needs.\n```haskell\ntype \nServerDefinition { ...\n, doInitialize =
  \\env _req -> pure $ Right env\n, interpretHandler = \\env -> Iso \n   (runLspT
  env) -- how to convert from IO ~> m\n   liftIO        -- how to convert from m ~>
  IO\n}\n```\n\n### Steps to migrate\n\n1. In your `.cabal` file change any `haskell-lsp`
  dependencies to `lsp`\n2. Replace your existing imports with `Haskell.LSP.Server`\n3.
  If necessary define your own monad and fill in `interpretHandler`\n4. Migrate your
  handlers to use `notificationHandler` and `requestHandler`,\n   passing along the
  corresponding `SMethod` (See `example/Simple.hs`)\n5. Remove any storage/use of
  `LspFuncs` and instead call the corresponding\n   functions directly from your monad
  instead of `IO`\n\n## 0.23.0.0\n\n* Add runWith for transporots other than stdio
  (@paulyoung)\n* Fix race condition in event captures (@bgamari)\n* Tweak the sectionSeparator
  (@alanz)\n* Add hashWithSaltInstances (@ndmitchell)\n* Fix CompletionItem.tags not
  being optional (@bubba)\n* Avoid unnecessary normalisation in Binary instance for\n
  \ NormalizedFilePath (@cocreature)\n* Fix ordering of TH splices (@fendor)\n\n##
  0.22.0.0\n\n* ResponseMessage results are now an Either type (@greenhat)\n* Support
  for GHC 8.10.1\n\n## 0.21.0.0\n\n* Stop getCompletionPrefix from crashing if beforePos
  is empty\n* Add DidChangeWatchedFilesRegistrationOptions\n* Add NormalizedFilePath
  from ghcide\n* Add diagnostic and completion tags\n* Fix language server example\n*
  Correctly fix the problem with '$/' notifications\n* Add azure ci\n\n## 0.20.0.0\n\n*
  Force utf8 encoding when writing vfs temp files\n* Don't log errors for '$/' notifications
  (@jinwoo)\n* Force utf8 encoding when writing vfs temp files (@jneira)\n* Store
  a hash in a NormalizedUri (@mpickering)\n* Move \"Semigroup WorkspaceEdit\" instance
  (@sheaf)\n* Fix vfs line endings (@jneira)\n\n## 0.19.0.0 -- 2019-12-14\n\n* Fix
  vfs line endings (@jneira)\n* Fix typo in .cabal (@turion)\n* Normalize file paths
  before converting to Uri's (@jneira)\n* Fixes to persistVirtualFile (@mpickering)\n\n##
  0.18.0.0 -- 2019-11-17\n\n* Fix response type for CodeLensResolve, add the ContentModified
  error\n  code (@SquidDev)\n* Add missing fmClientPrepareRenameRequest to MessageFuncs
  export (@alanz)\n* Rework Core.Options and infer all server capabilities from handlers
  (@bubba)\n* Generate lenses for WorkDoneProgress data types (@alanz)\n\n## 0.17.0.0
  -- 2019-10-18\n\n* Update progress reporting to match the LSP 3.15 specification
  (@cocreature)\n* Ensure ResponseMessage has either a result or an error (@cocreature)\n\n##
  0.16.0.0 -- 2019-09-07\n\n* Add support for CodeActionOptions (@thomasjm)\n* Add
  support for `textDocument/prepareRename` request (@thomasjm)\n* Fix diagnostic code
  parsing (@thomasjm)\n* Fix shutdown response type (@bubba)\n* Relax base constraints
  for GHC 8.8 (@bubba)\n\n## 0.15.0.0 -- 2019-07-01\n\n* Normalize URIs to avoid issues
  with percent encoding (@cocreature)\n\n## 0.14.0.1 -- 2019-06-13\n\n* Fix Haddock
  error\n\n## 0.14.0.0 -- 2019-06-13\n\n* Add support for custom request and notification
  methods\n  (@cocreature)\n\n## 0.11.0.0 -- 2019-04-28\n\n* Fix `window/progress/cancel`
  notification being a from server\n  notification when it should be a from client
  notification\n* Fix typo in FoldingRange request name\n\n## 0.10.0.0 -- 2019-04-22\n\n*
  Add types for `window/progress` notifications.\n\n## 0.8.3.0\n\n* Add `MarkupContent`
  to `HoverResponse`, and (some) json roundtrip tests.\n\n## 0.8.2.0 -- 2019-04-11\n\n*
  Add `applyTextEdit` and `editTextEdit` helpers\n\n## 0.8.0.1 -- 2018-10-27\n\n*
  Support GHC 8.6.1 by loosening constraints. Via @domenkozar\n\n## 0.8.0.0 -- 2018-09-08\n\n*
  Update Hover to be a nullable according to spec\n* Move Lenses into a separate module,
  `Language.Haskell.LSP.Types.Lens`\n\n## 0.7.0.0 -- 2018-08-14\n\n* Update CompletionItem\n
  * Add `commitCharacters` field\n * Add `MarkupContent` option for `documentation`\n
  * Add `preselect` field\n* Add CompletionContext\n* Add new server capabilities\n*
  Add workspace folder support\n* Add document color and color presentation\n* Add
  folding range support\n* Add goto type support\n* s/TH/Types/g\n * Move all types
  into haskell-lsp-types\n * Hide Language.Haskell.LSP.TH.DataTypesJSON - Use Language.Haskell.LSP.Types
  instead\n* Add lenses for Language.Haskell.LSP.Types.Capabilities\n\n## 0.6.0.0
  \ -- 2018-08-06\n\n* Add new DocumentSymbol type and hierarchal support\n* Rename
  CommandOrCodeAction to CAResult\n\n## 0.5.0.0  -- 2018-08-03\n\n* Update Command.arguments
  to match specification\n* Update ClientCapabilities to v3.10\n* Add MarkupContent\n*
  Add new CompletionKinds\n* Add new SymbolKinds\n* Add preset version capabilities\n\n##
  0.4.0.0  -- 2018-07-10\n\n* CodeAction support as per v3.8 of the specification,
  by @Bubba\n* Update VersionedTextDocumentIdentifier to match specification, by @Bubba.\n\n##
  0.3.0.0\n\n* Handle TextDocumentSync fallbacks with new TDS type.\n\n## 0.2.3.0\n\n*
  GHC 8.4.3 support\n* Introduce additional error codes as per the LSP spec. By @Bubba\n\n##
  0.2.2.0  -- 2018-05-04\n\n* Make Diagnostic relatedInformation optional, as per
  the LSP Spec. By @Bubba.\n\n## 0.2.1.0  -- 2018-05-02\n\n* Broken out from the haskell-lsp
  package, to simplify development\n  by not having to run massive TH processes when
  working on the\n  framework.\n"
basic-deps:
  bytestring: -any
  dependent-sum: '>=0.7.1.0'
  dependent-sum-template: '>=0.1.0.0'
  base: '>=4.11 && <4.16'
  Diff: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  dlist: -any
  data-default: -any
  containers: -any
  some: -any
  lens: '>=4.15.2'
  binary: -any
  rope-utf16-splay: '>=0.3.1.0'
  hslogger: -any
  network-uri: -any
  mtl: -any
  hashable: -any
  temporary: -any
  deepseq: -any
  scientific: -any
  aeson: '>=1.2.2.0'
  template-haskell: -any
  directory: -any
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
- 1.2.0.0
- 1.3.0.1
author: Alan Zimmerman
latest: 1.3.0.1
description-type: markdown
description: |
  [![Hackage](https://img.shields.io/hackage/v/lsp-types.svg)](https://hackage.haskell.org/package/lsp-types)

  # lsp-types
  Haskell library for the data types for Microsoft Language Server Protocol

  It is part of the [lsp](https://github.com/haskell/lsp) family of
  packages, along with [lsp](https://hackage.haskell.org/package/lsp)
  and [lsp-test](https://hackage.haskell.org/package/lsp-test)

  ## Useful links

  - https://github.com/haskell/lsp
  - https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md

  ## Other resource

  See #haskell-language-server on IRC freenode
license-name: MIT
