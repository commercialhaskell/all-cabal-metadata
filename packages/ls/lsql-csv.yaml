all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Přemysl Šťastný
basic-deps:
  Glob: '>=0.10 && <0.11'
  base: '>=4.9 && <4.20'
  containers: '>=0.5 && <0.7'
  lsql-csv: '>=0'
  parsec: '>=3.1 && <3.2'
  text: '>=1.2 && <1.3'
changelog: |+
  # Revision history for lsql-csv

  ## 0.1.0.3
  * Improved cabal package description

  ## 0.1.0.2
  * Fixed problem in lsql-csv.cabal base upper bound dependency

  ## 0.1.0.1
  Bumped up base dependency upper bound to 4.20

  ## 0.1.0.0
  Initial release

changelog-type: markdown
description: "# lsql-csv\n`lsql-csv` is a tool for CSV file data querying from the
  shell with short queries. It makes it possible to work with small CSV files like
  with a read-only relational database.\n\nThe tool implements a new language LSQL
  similar to SQL, specifically designed for working with CSV files in shell. \n\n##
  Installation\nIt is necessary, you had GHC (`>=8 <9.29`) and Haskell packages Parsec
  (`>=3.1 <3.2`), Glob (`>=0.10 <0.11`), base (`>=4.9 <4.20`), text (`>=1.2 <1.3`)
  and containers (`>=0.5 <0.7`)\n installed. (The package boundaries given are identical
  to cabal boundaries.) Run then:\n\n    make\n    sudo make install\n    \nNow the
  lsql-csv is installed in `/usr/local/bin`. If you want, you can specify `INSTALL_DIR`
  like:\n\n    sudo make INSTALL_DIR=/custom/install-folder install\n\nThis will install
  the package into `INSTALL_DIR`.\n\nIf you have installed `cabal`, you can alternatively
  run:\n\n    cabal install\n   \nIt will also install the dependencies for you.    \n\nThe
  package is also published at https://hackage.haskell.org/package/lsql-csv in Hackage
  public repository. You can therefore also install it directly without repository
  cloned with:\n\n    cabal install lsql-csv\n\n### Running the unit tests\nIf you
  want to verify, that the package has been compiled correctly, it is possible to
  test it by running:\n\n    make test\n\nThis will run all unit tests for you.\n\n\n##
  lsql-csv - quick introduction \nLSQL, the language of `lsql-csv`, aims to be a more
  lapidary language than SQL. Its design purpose is to enable its user to quickly
  write simple queries directly to the terminal - its design purpose is therefore
  different from SQL, where the readability of queries is more taken into account
  than in LSQL.\n\n\n### Examples\nOne way to learn a new programming language is
  by understanding concrete examples of its usage. The following examples are written
  explicitly for the purpose of teaching a reader, how to use the tool `lsql-csv`
  by showing him many examples of its usage. \n\nThe following examples might not
  be enough for readers, who don't know Unix/Linux scripting enough. If this is the
  case, please consider learning Unix/Linux scripting first before LSQL.\n\nIt is
  also advantageous to know SQL.\n\nThe following examples will be mainly about parsing
  of `/etc/passwd` and parsing of `/etc/group`. To make example reading more comfortable,
  we have added `/etc/passwd` and `/etc/group` column descriptions from man pages
  to the text.\n\nFile `/etc/passwd` has the following columns:\n* login name;\n*
  optional encrypted password;\n* numerical user ID;\n* numerical group ID;\n* user
  name or comment field;\n* user home directory;\n* optional user command interpreter.\n\nFile
  `/etc/group` has the following columns:\n* group name;\n* password;\n* numerical
  group ID;\n* user list.\n\n#### Hello World\n\n    lsql-csv '-, &1.2 &1.1'\n\nThis
  will print the second (`&1.2`) and the first column (`&1.1`) of csv file on stdin.
  If you know SQL, you can read it like `from stdio S select S.second, S.first`. \n\nCommands
  are split by commas into blocks. The first block is (*and always is*) the from block.
  There are file names or `-` (stdin) separated by space. The second block is the
  select block, also separated by space.\n\nFor example:\n\n    lsql-csv '-, &1.2
  &1.1' <<- EOF\n    World,Hello\n    EOF\n    \nIt returns:\n    \n    Hello,World\n\n####
  Simple filtering \n    lsql-csv -d: '-, &1.*, if &1.3>=1000' < /etc/passwd\n\nThis
  will print lines of users whose UID >=1000. It can also be written as:\n  \n    lsql-csv
  -d: 'p=/etc/passwd, p.*, if p.3 >= 1000'\n    \n    lsql-csv -d: 'p=/etc/passwd,
  &1.*, if &1.3 >= 1000'\n\n    lsql-csv -d: '/etc/passwd, &1.*, if &1.3 >= 1000'\n
  \   \nThe `-d:` optional argument means the primary delimiter is `:`. In previous
  examples we used overnaming, which allows us to give a data source file `/etc/passwd`
  a name `p`.\n\nIf you know SQL, you can read it as `from /etc/passwd P select *
  where P.UID >= 1000`. As you can see, lsql style is more compressed than standard
  SQL.\n    \nThe output might be:\n\n    nobody:x:65534:65534:nobody:/var/empty:/bin/false\n
  \   me:x:1000:1000::/home/me:/bin/bash\n\nIf you specify delimiter specifically
  for `/etc/passwd`, the output will be a comma delimited.\n    \n    lsql-csv '/etc/passwd
  -d:, &1.*, if &1.3 >= 1000'\n\nIt might return:\n\n    nobody,x,65534,65534,nobody,/var/empty,/bin/false\n
  \   me,x,1000,1000,,/home/me,/bin/bash\n\n\n#### Named columns\nLet's suppose we
  have a file people.csv:\n   \n    name,age\n    Adam,21\n    Petra,23\n    Karel,25\n\nNow,
  let's get all the names of people in people.csv using the `-n` named switch:\n\n
  \   lsql-csv -n 'people.csv, &1.name'\n\nThe output will be:\n\n    Adam\n    Petra\n
  \   Karel\n\nAs you can see, we can reference named columns by a name. Named switch
  `-n` enables first-line headers.\nIf named columns are enabled, each column has
  two names under &X - the number name &X.Y and the actual name &X.NAME.\n\nNow, we
  can select all columns with wildcard `&1.*`:\n\n    lsql-csv -n 'people.csv, &1.*'\n\nAs
  the output, we get\n\n    Adam,21,21,Adam\n    Petra,23,23,Petra\n    Karel,25,25,Karel\n\nThe
  output contains each column twice because wildcard `&1.*` was evaluated to `&1.1,
  &1.2, &1.age, &1.name`.\nHow to fix it?\n\n    lsql-csv -n 'people.csv, &1.[1-9]*'\n\nThe
  output is now:\n\n    Adam,21\n    Petra,23\n    Karel,25\n\nThe command can also
  be written as\n\n    lsql-csv -n 'people.csv, &1.{1,2}'\n    lsql-csv -n 'people.csv,
  &1.{1..2}'\n\nThe output will be in both cases still the same.\n\n\n#### Simple
  join\n\nLet's say, I am interested in the default group names of users. We need
  to join to tables: `/etc/passwd` and `/etc/group`. Let's do it.\n\n    lsql-csv
  -d: '/etc/{passwd,group}, &1.1 &2.1, if &1.4 == &2.3'\n    \nWhat does `/etc/{passwd,group}`
  mean? Basically, there are three types of expressions. Select, from and arithmetic
  expression. In all select and from expressions, you can use expansion and wildcards
  just like in bash.\n    \nFinally, the output can be something like this:\n\n    root:root\n
  \   bin:bin\n    daemon:daemon\n    me:me\n\nThe first column is the name of a user
  and the second column is the name of its default group.\n    \n#### Basic grouping\nLet's
  say, I want to count users using the same shell. \n\n    lsql-csv -d: 'p=/etc/passwd,
  p.7 count(p.3), by p.7'\n    \nAnd the output?\n\n    /bin/bash:7\n    /bin/false:7\n
  \   /bin/sh:1\n    /bin/sync:1\n    /sbin/halt:1\n    /sbin/nologin:46\n    /sbin/shutdown:1\n
  \   \nYou can see here the first usage of `by` block, which is equivalent of `group
  by` in SQL. \n\n#### Basic sorting\nLet's say, you want to sort your users with
  UID greater than or equal to 1000 ascendingly.\n\n    lsql-csv -d: '/etc/passwd,
  &1.*, if &1.3 >= 1000, sort &1.3'\n\nThe output might look like:\n  \n    me1:x:1000:1000::/home/me1:/bin/bash\n
  \   me2:x:1001:1001::/home/me2:/bin/bash\n    me3:x:1002:1002::/home/me3:/bin/bash\n
  \   nobody:x:65534:65534:nobody:/var/empty:/bin/false\n\nThe sort block is the equivalent
  of `order by` in SQL.\n\nIf we wanted descendingly sorted output, we might create
  a pipe to the `tac` command - the `tac` command prints the lines in reverse order:\n
  \   \n    lsql-csv -d: '/etc/passwd, &1.*, if &1.3 >= 1000, sort &1.3' | tac\n\n
  \   \n#### About nice outputs\nThere is a trick, how to concatenate two values in
  a select expression: Write them without space.\n\nBut how does the interpreter know
  the ends of the value name or value expression? You must use quotes for it - quotes
  themselves can't be part of the value name.\nAs an example, let's try to format
  our basic grouping example.\n\nLet's try it!\n\n    lsql-csv -d: 'p=/etc/passwd,
  \"The number of users of \"p.7\" is \"count(p.3)\".\", by p.7\n    \nThe output
  might be:\n \n    The number of users of /bin/bash is 7.\n    The number of users
  of /bin/false is 7.\n    The number of users of /bin/sh is 1.\n    The number of
  users of /bin/sync is 1.\n    The number of users of /sbin/halt is 1.\n    The number
  of users of /sbin/nologin is 46.\n    The number of users of /sbin/shutdown is 1.\n
  \  \nAs you can see, string formatting is sometimes very simple with LSQL.\n\n\n####
  Arithmetic expression\n\nSo far, we just met all kinds of blocks, and only if block
  accepts an arithmetic expression and the other accepts a select expression. \nWhat
  if we needed to run an arithmetic expression inside a select expression? There is
  a special syntax `$(...)` for it.\n\nFor example:\n\n    lsql-csv -d: '/etc/passwd,
  $(sin(&1.3)^2 + cos(&1.3)^2)'\n    \nIt returns something like:\n    \n    1.0\n
  \   1.0\n    1.0\n    0.9999999999999999\n    ...\n    1.0\n\nIf we run:\n    \n
  \   lsql-csv -d: '/etc/passwd, $(&1.3 >= 1000), sort $(&1.3 >= 1000)'\n\nWe get
  something like:\n\n    false\n    false\n    ...\n    false\n    true\n    true\n
  \   ...\n    true\n\n#### More complicated join\n\nLet's see more complicated examples.\n\n
  \   lsql-csv -d: 'p=/etc/passwd g=/etc/group, p.1 g.1, if p.1 in g.4'\n    \nThis
  will print all pairs of user and its group excluding the default group. If you know
  SQL, you can read it as `from /etc/passwd P, /etc/group G select P.1, G.1 where
  P.1 in G.4`.\n\nHow does `in` work? It's one of the basic string level \"consist\".
  If A is a substring of B, then `A in B` is true. Otherwise, it is false.\n\nAnd
  the output?\n\n    root:root\n    root:wheel\n    root:floppy\n    root:tape\n    lp:lp\n
  \   halt:root\n    halt:wheel\n\n#### More complicated...\n\nThe previous example
  doesn't give a very readable output. We can use `group by` to improve it (shortened
  as `by`).\n\n    lsql-csv -d: 'p=/etc/passwd g=/etc/group, p.1 cat(g.1\",\"), if
  p.1 in g.4, by p.1'\n\nThe output will be something like:\n    \n    adm:adm,disk,sys,\n
  \   bin:bin,daemon,sys,\n    daemon:adm,bin,daemon,\n    lp:lp,\n    mythtv:audio,cdrom,tty,video,\n
  \   news:news,\n    \nIt groups all non-default groups of a user to one line and
  concatenates it delimited by \",\". \n\nHow can we add default groups too?\n\n    lsql-csv
  -d: 'p=/etc/passwd g=/etc/group, p.1 cat(g.1\",\"), if p.1 in g.4, by p.1' |\n    lsql-csv
  -d: '- /etc/passwd /etc/group, &1.1 &1.2\"\"&3.1, if &1.1 == &2.1 && &2.4 == &3.3'\n
  \   \nThis will output something like:\n\n    adm:adm,disk,sys,adm\n    bin:bin,daemon,sys,bin\n
  \   daemon:adm,bin,daemon,daemon\n    lp:lp,lp\n    mythtv:audio,cdrom,tty,video,mythtv\n
  \   news:news,news\n\nThe first part of the command is the same as in the previous
  example. The second part inner joins the output\nof the first part with `/etc/passwd`
  on the username and `/etc/group` on the default GID number and prints\nthe output
  of the first part with an added default group name.\n\n## Usage\nNow, if you understand
  the examples, it is time to move forward to a more abstract description of the language
  and tool usage.\n\n### Options\n\n    -h\n    --help\n\nShows short command line
  help and exits before doing anything else.\n\n    -n\n    --named\n\nEnables first-line
  naming convention in csv files. This works only on input files. \nOutput is always
  without first-line column names.\n    \n    -dCHAR\n    --delimiter=CHAR\n\nChanges
  default primary delimiter. The default value is `,`.\n\n    -sCHAR\n    --secondary-delimiter=CHAR\n
  \   \nChanges default quote char (secondary delimiter). The default value is `\"`.\n\n###
  Datatypes\nThere are 4 datatypes considered: `Bool`, `Int`, `Double`, `String`.
  \n`Bool` is either true/false, `Int` is at least a 30-bit integer, `Double` double-precision
  floating point number, and `String` is an ordinary char string.\n\nDuring CSV data
  parsing, the following logic of datatype selection is used: \n* `Bool`, if `true`
  or `false`;\n* `Int`, if `[0-9]+` matches;\n* `Double`, if `[0-9]+.[0-9]+(e[0-9]+)?`
  matches;\n* `String`, if none of the above matches.\n\n### Joins\nJoin means, that
  you put multiple input files into from block.\n\nJoins always have the time complexity
  O(nm). There is no optimization made based on if conditions when you put multiple
  files into from block.\n\n### Documentation of language\n\n    lsql-csv [OPTIONS]
  COMMAND\n    \n    Description of the grammar\n    \n      COMMAND -> FROM_BLOCK,
  REST\n    \n      REST -> SELECT_BLOCK, REST\n      REST -> BY_BLOCK, REST\n      REST
  -> SORT_BLOCK, REST\n      REST -> IF_BLOCK, REST\n      REST ->\n    \n      FROM_BLOCK
  -> FROM_SELECTOR FROM_BLOCK\n      FROM_SELECTOR ~~> FROM ... FROM //Wildcard and
  brace expansion\n\n      FROM -> FROM_NAME=FROM_FILE OPTIONS\n      FROM -> FROM_FILE
  OPTIONS\n\n      OPTIONS -> -dCHAR OPTIONS\n      OPTIONS -> --delimiter=CHAR OPTIONS\n
  \     OPTIONS -> -sCHAR OPTIONS\n      OPTIONS -> --secondary-delimiter=CHAR OPTIONS\n
  \     OPTIONS -> -n OPTIONS\n      OPTIONS -> --named OPTIONS\n      OPTIONS ->
  -N OPTIONS\n      OPTIONS -> --not-named OPTIONS\n      OPTIONS ->\n\n      \n      SELECT_BLOCK
  -> SELECT_EXPR\n      BY_BLOCK -> by SELECT_EXPR\n      SORT_BLOCK -> sort SELECT_EXPR\n
  \     IF_BLOCK -> if ARITHMETIC_EXPR\n    \n \n      ARITHMETIC_EXPR -> ATOM\n      ARITHMETIC_EXPR
  -> ONEARG_FUNCTION(ARITHMETIC_EXPR)\n      ARITHMETIC_EXPR -> ARITHMETIC_EXPR OPERATOR
  ARITHMETIC_EXPR\n      ARITHMETIC_EXPR -> (ARITHMETIC_EXPR)\n      // Logical negation\n
  \     ARITHMETIC_EXPR -> ! ARITHMETIC_EXPR\n      ARITHMETIC_EXPR -> - ARITHMETIC_EXPR\n
  \     \n      SELECT_EXPR -> ATOM_SELECTOR SELECT_EXPR\n      SELECT_EXPR ->\n      \n
  \     ATOM_SELECTOR ~~> ATOM ... ATOM //Wildcard and brace expansion\n      \n      //
  eg. 1.0, \"text\", 'text', 1\n      ATOM -> CONSTANT\n      // eg. &1.1\n      ATOM
  -> COLUMN_NAME\n      ATOM -> pi\n      ATOM -> e\n      ATOM -> true\n      ATOM
  -> false\n      ATOM -> $(ARITHMETIC_EXPR)\n      ATOM -> AGGREGATE_FUNCTION(SELECT_EXPR)\n
  \     ATOM -> ONEARG_FUNCTION(ARITHMETIC_EXPR)\n\n      // # is not really char:\n
  \     // two atoms can be written without space \n      // and will be (string)
  appended, \n      // if they are separated using quote chars:\n      //   left atom
  must end or right atom must begin with quote char\n      // This rule doesn't apply
  inside ARITHMETIC_EXPR\n      ATOM ~~> ATOM#ATOM     \n\n      \n      AGGREGATE_FUNCTION
  -> cat\n      AGGREGATE_FUNCTION -> sum\n      AGGREGATE_FUNCTION -> count\n      AGGREGATE_FUNCTION
  -> max\n      AGGREGATE_FUNCTION -> min\n      AGGREGATE_FUNCTION -> avg\n      \n
  \     //All trigonometric functions in radian\n      ONEARG_FUNCTION -> sin\n      ONEARG_FUNCTION
  -> cos\n      ONEARG_FUNCTION -> tan\n      \n      ONEARG_FUNCTION -> asin\n      ONEARG_FUNCTION
  -> acos\n      ONEARG_FUNCTION -> atan\n      \n      ONEARG_FUNCTION -> sinh\n
  \     ONEARG_FUNCTION -> cosh\n      ONEARG_FUNCTION -> tanh\n      \n      ONEARG_FUNCTION
  -> asinh\n      ONEARG_FUNCTION -> acosh\n      ONEARG_FUNCTION -> atanh\n      \n
  \     ONEARG_FUNCTION -> exp\n      ONEARG_FUNCTION -> sqrt\n      \n      //The
  length of the string\n      ONEARG_FUNCTION -> size\n      ONEARG_FUNCTION -> to_string\n
  \     \n      ONEARG_FUNCTION -> negate\n      ONEARG_FUNCTION -> abs\n      ONEARG_FUNCTION
  -> signum\n      \n      ONEARG_FUNCTION -> truncate\n      ONEARG_FUNCTION -> ceiling\n
  \     ONEARG_FUNCTION -> floor\n      \n      ONEARG_FUNCTION -> even\n      ONEARG_FUNCTION
  -> odd\n      \n      // A in B means A is a substring of B\n      OPERATOR -> in\n
  \     \n      OPERATOR -> *\n      OPERATOR -> **    //general power\n      OPERATOR
  -> ^     //natural power\n      OPERATOR -> /\n      \n      // Integer division
  truncated towards minus infinity\n      // (x div y)*y + (x mod y) == x\n      OPERATOR
  -> div\n      OPERATOR -> mod\n      \n      //Integer division truncated towards
  0\n      // (x quot y)*y + (x rem y) == x  \n      OPERATOR -> quot\n      OPERATOR
  -> rem\n\n      // greatest common divisor\n      OPERATOR -> gcd\n      // least
  common multiple\n      OPERATOR -> lcm\n      \n      OPERATOR -> ++    //append\n
  \     \n      OPERATOR -> +\n      OPERATOR -> -\n      \n      OPERATOR -> <=\n
  \     OPERATOR -> >=\n      OPERATOR -> <\n      OPERATOR -> >\n      OPERATOR ->
  !=\n      OPERATOR -> ==\n      \n      OPERATOR -> ||\n      OPERATOR -> &&\n\nEach
  command is made from blocks separated by a comma. There are these types of blocks.\n*
  From block\n* Select block\n* If block\n* By block\n* Sort block\n\nThe first block
  is always from block. If the block after the first block is without a specifier
  (`if`, `by`, or `sort`), then it is a select block. Otherwise, it is a block specified
  by the specifier.\n\nFrom block accept specific grammar (as specified in the grammar
  description), select, by, and sort block select expression (`SELECT_EXPR` in the
  grammar) and if block arithmetic expression (`ARITHMETIC_EXPR` in the grammar).\n\nEvery
  source file has a number and may have multiple names - assign name, the name given
  to the source file by `ASSIGN_NAME=FILE_PATH` syntax in from block, and \ndefault
  name, which is given the path to the file or `-` in case of stdin in from block.\n\nEach
  column of a source file has a number and may have a name (if the named option is
  enabled for the given source file). \n\nIf the source file with index M (numbering
  input files from 1) has been given a name XXX, its columns can be addressed by &M.N
  or XXX.N, where N is the index of column (numbering columns from 1). \nIf the named
  option is enabled and a column has the name `NAME`, it can also be addressed by
  &M.NAME or XXX.NAME.\n\nIf there is a collision in naming (two source files have
  the same name or two columns under the same source file have the same name), then
  the behavior is undefined.\n\n\n#### Exotic chars\nThere are some chars that cannot
  be in symbol names (column names). For simplicity, we can suppose, they are everything
  but alphanumerical chars excluding `-`, `.`, `&` and `_`. \nAlso first char of a
  symbol name must be non-numerical to not be considered as an exotic char.\nReferencing
  names containing exotic chars without quotes is unsupported.\n\nIt is possible to
  reference columns with names with exotic chars using \\` quote - like \\`EXOTIC
  NAME\\`. The source file name is always part of the column name from the syntax
  perspective of language - it must be inside the quotes.\n\n#### Quote chars\nThere
  are 3 quotes (\\`, \" and ') used in Lsql. \" and ' are always quoting a string.
  The \\` quote is used for quoting symbol names.\n\nThese chars can be used for fast
  appending. If two atoms inside SELECT_EXPR are written without space and are separated
  using the quotes, they will be appended. For example, `abc\"abc\"` means: append
  column abc to the string abc.\n\n#### Constants\nThere are 3 types of constants.
  String, Double, and Int. Everything quoted in \" or ' is always String constant.
  Numbers without `[0-9]+` are considered Int constant and numbers `[0-9]+.[0-9]+`
  Double constant.\n\n#### Operator precedence and associativity\nThe following list
  outlines the precedence and associativity of lsql-csv infix operators. The lower
  the precedence number, the higher the priority.\n* 1: `in`, `**`, `^`\n* 2: `*`,
  `/`, `div`, `quot`, `rem`, `mod`, `gcd`, `lcm`\n* 3: `++`, `+`, `-`\n* 4: `<=`,
  `>=`, `<`, `>`, `!=`, `==`\n* 5: `||`, `&&`\n\nAll operators are right-to-left associative.\n\n\n####
  Select expression\nThey are similar to bash expressions. They are made by atom selector
  expressions separated by whitespaces. These expressions are expanded, evaluated,
  and matched to column names, constants, aggregate functions, or arithmetic expressions.\n\nEvery
  atom selector expression can consist:\n* Wildcard (Each wildcard will be expanded
  to multiple statements during processing)\n* Bash brace expansion (e.g. {22..25}
  -> 22 23 24 25)\n* Arithmetic expression in `$(expr)` format\n* Quotes \\`anything\\`
  to prevent wildcards and expansions\n* Quotes \" or ' to insert string\n* Call of
  aggregate function `AGGREGATE_FUNCTION(next select block)` - there cannot be any
  space after FUNCTION\n* Call of single arg function `ONEARG_FUNCTION(arithmetic
  expression)` - there cannot be any space after FUNCTION\n* Constants\n* Reference
  to a column name\n\nIf you want to concatenate strings without `++` operator, you
  can write: `a.1\",\"a.2`.\n\nPlease, keep in mind, that operators must be put inside
  arithmetic expressions, or they will be matched to a column name or aggregate function.\n\n####
  Arithmetic expression\nThe statement uses mainly classical awk logic. You can use
  keywords `>`, `<`, `<=`, `>=`, `==`, `||`, `&&`, `+`, `-`, `*`, `/`... \n\n####
  Select blocks\nThese blocks determine output. They accept select expressions and
  are evaluated and printed in a delimitered format. \n\nEvery select block must contain
  at least one reference to the column name, or the behavior is undefined.\n\nExamples
  of select blocks:\n\n    &1.[3-6]\n\nThis will print columns 3, 4, 5, and 6 from
  the first file.\n\n    ax*.{6..4} \n    \nThis will print the 6th, 5th, and 4th
  of all files whose name begins with ax.\n\n\n#### From blocks\nThere must be exactly
  one from block at the beginning of the command. The block can contain any files
  (and `-` specifies standard input). You can use any syntax you would otherwise use
  in bash to select these files (wildcards, expansion...). You can also overname the
  file using `NAME=stmt`. If there is more than 1 matching of stmt, the files will
  be named `(NAME, NAME1, NAME2...)`.\n\nExample:\n\n    /etc/{passwd,group}\n    \nThis
  will select `/etc/passwd` and `/etc/group` files. They can be addressed either as
  `&1` or `/etc/passwd`, and `&2` or `/etc/group`.\n\nIf `filename` is put inside
  \\` quotes, no wildcard or expansion logic will apply to it.\n\nYou can also add
  custom attributes to files in the format `FILE -aX --attribute=X -b`. The attributes
  will be applied to all files which will be matched using `FILE` bash expression.\n\n#####
  Possible attributes\n    \n    -n\n    --named\n\nIt means that csv file has the
  first line with the names of the columns\n\n    -N\n    --not-named\n\nYou can also
  set the exact opposite. This can be useful if you change the default behavior.\n\n
  \   -dCHAR\n    --delimiter=CHAR\n    \nThis changes the primary delimiter.\n\n
  \   -sCHAR\n    --secondary-delimiter=CHAR\n    \nThis changes the secondary delimiter
  char.\n\nExample:\n\n    /etc/passwd -d:\n\nCurrently, commas and CHARs, which are
  also quotes in Lsql, are not supported as delimiters.\n    \n#### If block\nThis
  block always begins with `if`. They accept arithmetic expressions, which should
  be convertible to Bool - either String `false`/`true`, Int (`0` `false`, anything
  else `true`), or Bool. \nRows with true are printed or aggregated, and rows with
  false are skipped.\n\nFiltering is done before the aggregation.\n\nYou can imagine
  if block as where clause in SQL.\n\n#### By block\nThis statement always begins
  with `by` and the rest of the block is a select expression. There can be only one
  By block in the whole command.\n\nThe by block is used to group the resulting set
  by the given atoms.\n\nYou can imagine by block as the group by clause in SQL. \n\nThere
  must be at least one aggregate function in the select block if by block is present.
  Otherwise, behavior is undefined.\n\nIf there is an aggregate function present without
  by block present, aggregation runs over all rows at once.\n\n#### Sort block\nThis
  block can be at the end of the command. It begins with the `sort` keyword and the
  rest is a select expression.\n\nThe sort block determines the order of the final
  output - given atoms are sorted in ascending order.\n\nYou can imagine a sort block
  as the order by clause in SQL.\n\nThere can be only one Sort block in the whole
  command.\n"
description-type: markdown
hash: b6fb687881bc48c6a6f43248bcb49b4b790b31194ed028f446492ccb12ad650b
homepage: https://github.com/stastnypremysl/lsql-csv/
latest: 0.1.0.3
license-name: GPL-3.0-only
maintainer: p-w@stty.cz
synopsis: 'A tool for CSV files data querying from the shell with short queries. '
test-bench-deps: {}
