all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
- 1.2.0.0
- 1.3.0.0
- 1.3.1.0
- 1.4.0.0
- 1.4.1.0
author: Alexander Vieth, Duncan Coutts, Marcin Szamotulski, Thomas Winant
basic-deps:
  array: '>=0'
  async: '>=2.1'
  base: '>=4.9 && <4.20'
  bytestring: '>=0'
  mtl: '>=2.2 && <2.4'
  primitive: '>=0.7 && <0.10'
  stm: '>=2.5 && <2.6'
  time: '>=1.9.1 && <1.13'
changelog: |
  # Revsion history of io-classes

  ## 1.4.1.0

  ### Non-breaking changes

  * New dependency on `primitive` package
  * New `stToIO` in `MonadST`, which is simpler to use than the existing
    `withLiftST`, and depends on the `primitive` package's `PrimState` (#141).

  ## 1.4.0.0

  ### Breaking changes

  * Removed deprecated module `Control.Monad.Class.MonadVar`.

  ### Non-breaking changes

  * Fixed some module haddock typos.

  ## 1.3.1.0

  ### Non-breaking changes

  * Added `forkFinally` to `MonadFork`.

  ## 1.3.0.0

  - `io-sim-1.3.0.0`.
  * Support `ghc-9.8`.

  ## 1.2.0.0

  ### Non-breaking changes

  * Add new `MonadInspectMVar` class with an `inspectMVar` function for accessing
    an `MVar` in an underlying monad (if applicable). This is mainly useful for
    `io-sim`, since the underlying monad is `ST`. `IO` has no underlying monad, so
    the provided instance for `IO` defaults `inspectMVar` to `tryReadMVar`.
  * Add some Haddock documentation to `MonadDelay`

  ## 1.1.0.0

  ### Breaking changes

  * `Control.Monad.Class.MonadMVar` is now deprecated in favour of
    `Control.Concurrent.Class.MonadMVar`.

  ### Non breaking changes

  * Fixed building haddocks with `ghc-8.10`.

  ## 1.0.0.1

  ### Non breaking changes

  * Support `ghc-9.6`.

  ## 1.0.0.0

  ### Breaking changes

  * `MonadMonotonicTime` morphed into `MonadMonotonicTimeNSec` which supports
    `getMonotonicTimeNSec` from "base".  `MonadMonotonicTime` can be found in new
    package `si-timers`.
  * A simplified `MonadTimer` which is using time in microseconds encoded as
    `Int` rather than `DiffTime`.  The previous interface can be found in the
    package `si-timers`.
  * The non standard timer API is moved from `MonadTimer` to a `MonadTimerFancy`
    type class which can be imported from
    `Control.Monad.Class.MonadTimer.NonStandard` module.

  ### Non breaking changes

  * Added `registerDelayCancellable` to `Control.Monad.Class.MonadTimer` module.

  ## 0.6.0.0

  ## 0.5.0.0

  * fixed `tryTakeMVarDefault`, `takeMVarDefault`, `putMVarDefault` and
    `isEmptyMVarDefault`.
  * Implemented the proper `readMVar` semantics.
  * Added `tryReadMVar` to `MonadMVar` type class.
  * Moved `MVarDefault` to `io-sim` package.

  ## 0.4.0.0

  * support `ghc-9.4` (except on Windows input-output-hk/io-sim#51)

  ## 0.3.0.0

  * added missing `MArray` instance for `WrappedSTM`
  * added monoid instances for `WrappedSTM`
  * added `threadStatus` method of `MonadFork` class
  * removed `linktTo` and `linkToOnly`
  * added `labelTChan`
  * added `flushTQueue`
  * split `MonadSTM` into submodules in a similar way that the `stm` package is.
  * added `TChan`, `TSem` and `TArray`
  * added `interruptible` and `allowInterrupt` to `MonadMaskingState` type class.
  * added `unGetTQueue` & `unGetTBQueue`
  * support `ghc-9.2` & `ghc-9.4`
  * added `MonadMVar`

  ## 0.2.0.0

  * First version published on Hackage.
  * added `lengthTBQueue` to `MonadSTM`; `io-classes` now depends on `stm-2.5.0.0`.

  ## 0.1.0.0

  * Initial version, not released on Hackage.
changelog-type: markdown
description: "# IO Monad Class Hierarchy\n\nThis package provides a monad class hierarchy
  which is an interface for both\nthe [`io-sim`] and [`IO`] monads.  It was developed
  with the following\nconstraints in mind:\n\n* be a drop-in replacement for `IO`
  monad;\n* `IO` instances do not alter its original semantics, providing a shallow\n
  \ bindings to [`async`], [`base`], [`stm`], and [`exceptions`] packages as well\n
  \ as timer API;\n* provide zero-cost abstractions.\n\nWe provide also non-standard
  extensions of this API:\n\n* [`strict-stm`]: strict `TVar`'s, and other mutable
  `STM` variables, with\n  support of the [`nothunks`] library;\n* [`si-timers`]:
  timers api:\n    - 32-bit safe API using `DiffTime` measured in seconds (rather
  than time in\n      microseconds represented as `Int` as in `base`)\n    - cancellable
  timeouts.\n\n[`strict-stm`] and [`nothunks`] were successfully used in a large code
  base to\neliminate space leaks and keep that property over long development cycles.\n\n##
  Exception Class Hierarchy\n\nThis package provides an alternative class hierarchy
  giving access to\nexceptions API.  The [`exception`] package class hierarchy is
  also supported by\n[`io-sim`], so you can also use either one.\n\nThe `MonadThrow`
  defined in this package allows working with exceptions without\nhaving explicit
  access to `catch` or `mask`.  It only provides access to\n`throwIO`, `bracket`,
  `bracket_`, and `finally`.  `MonadCatch` class provides\nAPI which allows working
  with exceptions, e.g. `catch` or `bracketOnError`, and\n`MonadMask` gives access
  to low-level `mask` and friends.   This division makes\ncode review process somewhat
  easier.  Using only `MonadThrow` constraint, the\nreviewer can be sure that no low-level
  exception API is used, which usually\nrequires more care.  Still `MonadThrow` is
  general enough to do resource\nhandling right.\n\n## Time and Timer APIs\n\nThe
  time and timer APIs of this package follows closely the API exposed by\n[`base`]
  and [`time`] packages.  We separately packaged a more convenient API\nin [`si-timers`]
  (ref [SI]), which provides a monoidal action of `DiffTime` on\nmonotonic time as
  well as exposes 32-bit safe timer API (on 32-bit systems time\nin microseconds represented
  as an `Int` can only hold timeouts of ~35 minutes).\n\n`Control.Monad.Class.MonadTimer.NonStandard.MonadTimeout`
  provides a low-level\ntimeout abstraction.  On systems that support a native timer
  manager, it's used\nto implement its API, which is very efficient even for low-latency
  timeouts.\nOn other platforms (e.g. `Windows`), it's good enough for subsecond timeouts\nbut
  it's not good enough for fine-grained timeouts (e.g. sub milliseconds) as\nit relays
  on the GHC thread scheduler.  We support `MonadTimeout` on `Linux`,\n`MacOS`, `Windows`,
  and `IOSim` (and unofficially on `GHCJS`).\n\n`MonadDelay` and `MonadTimer` classes
  provide a well-established interface to\ndelays & timers.\n\n\n## Software Transactional
  Memory API\n\nWe provide two interfaces to `stm` API: lazy, included in `io-classes`;
  and\nstrict one provided by [`strict-stm`].\n\n\n## Threads API\n\nWe draw a line
  between `base` API and `async` API.  The former is provided by\n[MonadFork](https://hackage.haskell.org/package/io-classes/docs/Control-Monad-Class-MonadFork.html#t:MonadFork)\nthe
  latter by\n[MonadAsync](https://hackage.haskell.org/package/io-classes/docs/Control-Monad-Class-MonadFork.html#t:MonadAsync).\nBoth
  are shallow abstractions around APIs exposed by the `base` and `async`\npackages.\n\n\n##
  Some other APIs\n\n* [MonadEventlog]: provides an API to the [Debug.Trace] event
  log interface.\n* [MonadST]: provides a way to lift `ST`-computations.\n* [MonadSay]:
  dummy debugging interface\n\n## Differences from `base`, `async`, or `exceptions`
  packages\n\n### Major differences\n\n* `getMonotonicTime` returns `Time` (a newtype
  wrapper around `DiffTime`)\n* `Deadlock` exceptions are not thrown to the main thread
  (see\n  [ref][io-deadlock]), so they cannot be caught. This was a design decision,\n
  \ which allows to catch all deadlocks which otherwise could be captured by\n  a
  `catch`.\n\n### Minor differences\n\nSome of the types have more general kind signatures,
  e.g.\n\n```\ntype Async :: (Type -> Type) -> Type -> Type\n```\n\nThe first type
  of kind `Type -> Type` describes the monad which could be\ninstantiated to `IO`,
  `IOSim` or some other monad stacks built with monad\ntransformers.  The same applies
  to many other types, e.g. `TVar`, `TMVar`.\n\nThe following types although similar
  to the originals are not the same as the\nones that come from `base`, `async`, or
  `exceptions` packages:\n\n* `Handler` (origin: `base`)\n* `MaskingState` (origin:
  `base`)\n* `Concurrently` (origin: `async`)\n* `ExceptionInLinkedThread` (origin:
  `async`): `io-class`es version does not\n  store `Async`\n* `ExitCase` (origin:
  `exceptions`)\n\n## Debuging & Insepction\n\nWe provide quite extended debugging
  & inspection API.  This proved to be\nextremely helpful when analysing complex deadlocks
  or livelocks or writing\ncomplex quickcheck properties of a highly concurrent system.
  \ Some of this is\nonly possible because we can control the execution environment
  of [`io-sim`].\n\n* `labelThread` as part of `MonadThread` ([`IO`], [`io-sim`],
  which is also\n  part of `GHC` API, ref [`labelThread`][labelThread-base]);\n* `MonadLabelledSTM`
  which allows to label of various `STM` mutable variables,\n  e.g. `TVar`, `MVar`,
  etc. ([`io-sim`], not provided by `GHC`);\n* `MonadInspectSTM` which allows inspecting
  values of `STM` mutable variables\n  when they are committed. ([`io-sim`], not provided
  by `GHC`).\n\n\n## Monad Transformers\n\nWe provide support for monad transformers
  (although at this stage it might have\nits limitations and so there might be some
  rough edges.  PRs are welcomed,\n[contributing]).\n\n[SI]: https://www.wikiwand.com/en/International_System_of_Units
  \n[`DiffTime`]: https://hackage.haskell.org/package/time-1.10/docs/Data-Time-Clock.html#t:DiffTime\n[`IO`]:
  https://hackage.haskell.org/package/base-4.14.0.0/docs/GHC-IO.html#t:IO\n[`async`]:
  https://hackage.haskell.org/package/async\n[`base`]: https://hackage.haskell.org/package/base\n[`exceptions`]:
  https://hackage.haskell.org/package/exceptions\n[`io-sim`]: https://hackage.haskell.org/package/io-sim\n[`si-timers`]:
  https://hackage.haskell.org/package/si-timers\n[`stm`]: https://hackage.haskell.org/package/stm\n[`strict-stm`]:
  https://hackage.haskell.org/package/strict-stm\n[`threadDelay`]: https://hackage.haskell.org/package/io-classes/docs/Control-Monad-Class-MonadTimer.html#v:threadDela\n[`time`]:
  https://hackage.haskell.org/package/time\n[contributing]: https://www.github.com/input-output-hk/io-sim/tree/master/CONTRIBUTING.md\n[`nothunks`]:
  https://hackage.haskell.org/package/nothunks\n[labelThread-base]: https://hackage.haskell.org/package/base-4.17.0.0/docs/GHC-Conc-Sync.html#v:labelThread\n[io-deadlock]:
  https://hackage.haskell.org/package/base-4.19.0.0/docs/Control-Exception.html#t:Deadlock\n\n[MonadEventlog]:
  https://hackage.haskell.org/package/io-sim-classes/docs/Control-Monad-Class-MonadEventlog.html#t:MonadEventlog\n[Debug.Trace]:
  https://hackage.haskell.org/package/base/docs/Debug-Trace.html\n[MonadST]: https://hackage.haskell.org/package/io-classes/docs/Control-Monad-Class-MonadST.html#t:MonadST\n[MonadSay]:
  https://hackage.haskell.org/package/io-classes/docs/Control-Monad-Class-MonadSay.html#t:MonadSay\n"
description-type: markdown
hash: 0354f399aaf500e84a752178a2be655df8ba2ccb56c81e9a18614e1b44584254
homepage: ''
latest: 1.4.1.0
license-name: Apache-2.0
maintainer: Duncan Coutts duncan@well-typed.com, Marcin Szamotulski coot@coot.me
synopsis: Type classes for concurrency with STM, ST and timing
test-bench-deps: {}
