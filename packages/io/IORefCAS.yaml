all-versions:
- 0.0.1
- 0.0.1.1
- 0.0.1.2
- 0.1.0.1
- '0.2'
- 0.2.0.1
author: Adam C. Foltzer, Ryan Newton
basic-deps:
  base: '>=4.4.0.0 && <4.7'
  bits-atomic: '>=0'
  ghc-prim: '>=0'
changelog: ''
changelog-type: ''
description: "See haddock in Data.CAS\n\n\nA few notes on performance results\n==================================\n\n\n[2011.11.12]
  Initial Measurements\n---------------------------------\n\n  An initial round of
  tests gives the following results when executing\n  100K CAS's from each of four
  threads on a 3.33GHz Nehalem desktop:\n\n    RAW Haskell CAS:  0.143s        25%
  productivity 58MB alloc,  204,693 successes\n    'Fake' CAS:       0.9s - 1.42s
  \ 89% productivity, 132M alloc, 104,044 successes\n    Foreign CAS:      1.6s          23%
  productivity, 82M alloc,  264,821 successes\n\n  \"Successes\" counts the total
  number of CAS operations that actually\n  succeeded.\n\n  This microbenchmark is
  spending a lot of its time in Gen 0 garbage collection.\n\n  Next, a million CAS's
  per thread:\n\n    RAW Haskell CAS:  0.65 - 1.0    20% productivity 406MB alloc
  (can stack overflow)\n    'Fake' CAS:       14.3 - 17s    270% CPU  92% productivity
  1.3GB alloc  1,008,468 successes\n    Foreign CAS:      Stack overflow after 28.5s
  ... 300-390% CPU, 15% productivity, \n\n                      After bumping the
  stack size up it takes a long\n                      time to finish, even after
  it has printed the\n                      sample success bit vectors.\n\t\t      \n\t\t
  \     With -K100M:\n\t\t      78s           6% productivity, 898M alloc,  3,324,943
  successes\n                                    67 seconds elapsed in Gen 0 GC!!\n\n
  \ Something odd is going on here.  How could it spend so long in GC\n  for so little
  allocation??  For only two threads the Foreign\n  implementation drops to 22s, but
  still 17.97s elapsed in Gen 0 GC.\n  \n  What about the Raw haskell CAS?  It also
  wil stack overflow with the\n  current version of the test.  With a 1G stack it
  can do 5Mx4 CAS's\n  (8,9M successful) in 6.7 seconds.  10M in 17s.  And STILL not
  seeing\n  the previous segfault with the Raw CAS version...\n  \n[2011.11.12] Simple
  Stack Overflow Fix\n--------------------------------------\n\n  After making sure
  that all the (+1)'s in the test are strict, the\n  stack overflow goes away and
  the numbers change (Raw does 5M in 3.3s\n  instead of 6.7s).  BUT there's still
  quite a lot of time spent in\n  GC.  Here's 1Mx4 CAS's again:\n      \n    RAW Haskell
  CAS:  0.7s  (23% prod, 0.8s total Gen 0 GC)\n    'Fake' CAS:       11.8s (91% prod,
  0.8s total Gen 0 GC)\n    Foreign CAS:      52s  (6% prod)\n  \n  And then adding
  -A1M makes a neglible change in runtime for Raw, but\n  reduces the # of gen0 collections
  from 484 to 235.\n\n  Ok, how about testing on a 3.1GHz Westmere.\n  Wow, just ran
  into this:\n\n    cc1: internal compiler error: Segmentation fault\n    Please submit
  a full bug report,\n    with preprocessed source if appropriate.\n    See <http://bugzilla.redhat.com/bugzilla>
  for instructions.\n    make: *** [all] Error 1\n\n  On a different machine it worked
  (default runtime flags 1Mx4 CAS):\n\n    RAW Haskell CAS:  0.7s  \n    'Fake' CAS:
  \      8.1s\n    Foreign CAS:      46s\n\n  The lack of hyperthreading may also
  be helping.\n\n <TODO>: \n  The primary source of allocation in this example is
  the accumulation\n  of the [Bool] lists of success and failure.  I should disable
  those\n  and test again.\n\n\n[2011.11.13] Testing specialized CAS.Foreign instance\n-----------------------------------------------------\n\nAll
  of the above results were for a cell containing an Int.  That\nwould not have triggered
  the specialized (Storable-based) instance in\nForeign.hs.  There SHOULD be special
  cases for all word-sized scalars,\nbut currently there's just one for Word32.  Let's
  test that one.\n\n    Word32 1Mx4 CAS's:\n    RAW Haskell CAS:  0.57s  (13.7% prod)\n
  \   Foreign CAS:      0.64s  (15% prod)\n\nWow, the foreign one is doing as well
  as the Haskell one even though\nthere's some extra silliness in the Foreign.CASRef
  type (causing a\nruntime case dispatch to unpack).\n\n\n[2011.11.13] Testing atomicModify
  based on CAS\n----------------------------------------------\n\nAn atomicModify
  based on CAS offers a drop-in replacement that could\nimprove performance.  I implemented
  one which will try CAS until it\nfails a certain number of times (\"30\" for now,
  but needs to be tuned).\n\nThese seem to work well.  They are cheaper than you would
  think given\nhow long it takes to get successful CAS attempts under contention:\n\n
  1Mx4 CAS attempts or atomicModifies:\n    0.19s  -- CAS attempts 1.07M successful.\n
  \   0.02s  -- 1M   atomicModifyIORefCAS on 1 thread\n    0.13s  -- 1Mx2 atomicModifyIORefCAS
  on 2 threads\n    0.37s  -- 1Mx4 atomicModifyIORefCAS on 4 threads\n\nAnd they are
  cheaper than the real atomicModifyIORef (which also seems\nto have a stack space
  problem right now because of its laziness).  But\nwith a huge stack (1G) it will
  succeed:\n\n    1.27s  -- 1Mx4 atomicModifyIORef\n\nBut inserting extra strictness
  (an evaluate call) to avoid the\nstack-leak actually makes it slower:\n\n    2.08s
  \ -- 1Mx4 atomicModifyIORef, stricter\n\n"
description-type: markdown
hash: 2b9e7dfb2d888b523e7790c3bf823c65861822354787fb35350b3740f7850168
homepage: https://github.com/rrnewton/haskell-lockfree-queue/wiki
latest: 0.2.0.1
license-name: BSD-3-Clause
maintainer: acfoltzer@gmail.com, rrnewton@gmail.com
synopsis: Atomic compare and swap for IORefs and STRefs.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=4.4.0.0 && <4.7'
  bits-atomic: '>=0'
  ghc-prim: '>=0'
  time: '>=0'
