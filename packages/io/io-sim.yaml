homepage: ''
changelog-type: markdown
hash: f1f187b91e4055cc3912837dc4da5e6a12cfd7bc43295086fa2262011605d5a3
test-bench-deps:
  base: -any
  time: -any
  criterion: -any
  array: -any
  containers: -any
  strict-stm: -any
  io-sim: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  parallel: -any
  si-timers: -any
  QuickCheck: -any
  io-classes: -any
maintainer: Duncan Coutts duncan@well-typed.com, Marcin Szamotulski coot@coot.me
synopsis: A pure simulator for monadic concurrency with STM.
changelog: |
  # Revsion history of io-sim

  ## next version

  ## 1.0.0.0

  ### Breaking changes

  * Support refactored `MonadTimer`, and new `MonadTimerFancy`, `MonadTimeNSec`
    monad classes.

  ## 0.6.0.0

  ### Breaking changes

  * Added `TimeoutId` to `EventThreadDelay` and `EventThreadFired` events.

  ### Non breaking changes

  * Fixed `threadDelay` in presence of asynchronous exceptions (in `IOSim` and `IOSimPOR`) (#80).
  * Fixed bug in `IOSim` & `IOSimPOR` which resulted in reusing existing
    `ThreadId`s (#80).

  ## 0.5.0.0

  * `MVar` type family is not injective anymore.
  * Removed default implementation of `readMVar` in the `MonadMVar` type class.
  * Moved `MVarDefault` to `io-sim` package.

  ## 0.4.0.0

  * support `ghc-9.4` (except on Windows input-output-hk/io-sim#51)
  * `MonadCatch` instance for `STM (IOSim s)` monad
  * fixed `isEmptyTBQueeuDefault` (thanks to @EMQ-YangM)
  * refactored internal implementation of timeouts, changed `SimEventType`
    constructors

  ## 0.3.0.0

  * added `Functor` instance for `SimResult`
  * added `MonadFix` instance for `STM (IOSim s)`
  * support `ghc-9.2` & `ghc-9.4`

  ## 0.2.0.0

  * First version published on Hackage.
  * Depends on `io-classes-0.2.0.0`.

  ## 0.1.0.0

  * Initial version, not released on Hackage.
basic-deps:
  exceptions: '>=0.10'
  quiet: -any
  base: '>=4.9 && <4.18'
  time: '>=1.9.1 && <1.13'
  deque: -any
  nothunks: -any
  containers: -any
  strict-stm: ^>=1.0
  parallel: -any
  si-timers: ^>=1.0
  QuickCheck: -any
  io-classes: ^>=1.0
  psqueues: '>=0.2 && <0.3'
all-versions:
- 1.0.0.0
author: Alexander Vieth, Duncan Coutts, John Hughes, Marcin Szamotulski
latest: 1.0.0.0
description-type: markdown
description: |
  # IOSim - IO Simulator Monad

  A pure simulator monad built on top of the lazy `ST` monad which supports:

    * optional dynamic race discovery and schedule exploration
    * synchronous and asynchronous exceptions; including: throwing, catching and
      masking synchronous and asynchronous exceptions;
    * concurrency (using simulated threads), with interfaces shaped by the
      `base` and `async` libraries;
    * software transactional memory (`STM`);
    * simulated time;
    * timeouts;
    * dynamically typed traces and event log tracing;
    * lifting any `ST` computations;
    * inspection of `STM` mutable data structures;
    * deadlock detection;
    * `MonadFix` instances for both `IOSim` and its corresponding `STM` monad.

  `io-sim` together with [`io-classes`] is a drop-in replacement for the `IO`
  monad (with some ramifications).  It was designed to write easily testable
  Haskell code (including simulating socket programming or disk IO).  Using
  [`io-classes`] and [`si-timers`] libraries one can write code that can run in
  both: the real `IO` and the `IOSim` monad provided by this package.  One of the
  design goals was to keep the API as close as possible to `base`, `exceptions`,
  `async`, and `stm` packages.

  `io-sim` package also provides two interpreters, a standard one and `IOSimPOR`
  which supports dynamic discovery or race conditions and schedule exploration
  with partial order reduction.

  `io-sim` provides API to explore traces produced by a simulation.  It can
  contain arbitrary Haskell terms, a feature that is very useful to build
  property-based tests using `QuickCheck`.

  The package contains thorough tests, including tests of `STM` against the
  original specification (as described in [Composable Memory
  Transactions](https://research.microsoft.com/en-us/um/people/simonpj/papers/stm/stm.pdf)
  and its `GHC` implementation.  This can be seen in both ways: as a check that
  our implementation matches the specification and the `GHC` implementation, but
  also the other way around: that `GHC`s `STM` implementation meets the
  specification.

  [`io-classes`]: https://hackage.haskell.org/package/io-classes
  [`si-timers`]: https://hackage.haskell.org/package/si-timers
license-name: Apache-2.0
