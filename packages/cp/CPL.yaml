all-versions:
- 0.0.5
- 0.0.6
- 0.0.7
- 0.0.8
- 0.0.9
author: Masahiro Sakai (masahiro.sakai@gmail.com)
basic-deps:
  array: '>=0'
  base: '>=4 && <5'
  containers: '>=0'
  mtl: '>=2.0.0.0'
  parsec: '>=0'
  readline: '>=0'
changelog: |
  Changes since the 0.0.7 release
  -------------------------------

  * "→" can be used instead of "->"
  * GHC-7.10 support

  Changes since the 0.0.6 release
  -------------------------------

  * Clean up internals
  * Enable `-fReadline` and `-fHaskeline` by default

  Changes since the 0.0.5 release
  -------------------------------

  Readline/Haskeline support.

  Changes since the 0.0.3 release
  -------------------------------

  Function defintions are added.

  Examples:

      > let uncurry(f) = eval . prod(f, I)
      uncurry(f) = eval.prod(f,I)
      f: *a -> exp(*b,*c)
      -----------------------------
      uncurry(f): prod(*a,*b) -> *c

      > let primrec(f,g) = pi2.pr(pair(0,f), pair(s.pi1, g))
      primrec(f,g) = pi2.pr(pair(0,f),pair(s.pi1,g))
      f: 1 -> *a  g: prod(nat,*a) -> *a
      ---------------------------------
      primrec(f,g): nat -> *a
changelog-type: markdown
description: |
  An implementation of "A Categorical Programing Language"
  ========================================================

  [![Build Status](https://secure.travis-ci.org/msakai/cpl.png?branch=master)](http://travis-ci.org/msakai/cpl) [![Build status](https://ci.appveyor.com/api/projects/status/dl935ws9jouy06br/branch/master?svg=true)](https://ci.appveyor.com/project/msakai/cpl/branch/master) [![Hackage](https://img.shields.io/hackage/v/CPL.svg)](https://hackage.haskell.org/package/CPL)

  This package is an implementation of "A Categorical Programing Language"
  (CPL for short)[1][2] written in Haskell.

  CPL is a functional programming language based on category
  theory. Data types are declared in a categorical manner by
  adjunctions. Data types that can be handled include the terminal
  object, the initial object, the binary product functor, the binary
  coproduct functor, the exponential functor, the natural number object,
  the functor for finite lists, and the functor for infinite lists.
  Each data type is declared with its basic operations or
  morphisms. Programs consist of these morphisms, and execution of
  programs is the reduction of elements (i.e. special morphisms) to
  their canonical form.

  Install
  -------

  De-Compress archive and enter its top directory.
  Then type:

      $ cabal configure
      $ cabal build
      $ cabal install

  If you want to compile with readline or haskeline, add -fReadline or
  -fHaskeline respectively to configure command.

  Usage
  -----

  See chapter 5 of [1]

  License
  -------

  This program is licenced under the BSD-style license.
  (See the file 'COPYING'.)

  Copyright (C) 2004-2014 Masahiro Sakai <masahiro.sakai@gmail.com>

  Author
  ------

  Masahiro Sakai <masahiro.sakai@gmail.com>

  Bibliography
  ------------

  (1) Tatsuya Hagino, “A Categorical Programming Languge”.
      Ph.D. Thesis, University of Edinburgh, 1987
      available at <http://web.sfc.keio.ac.jp/~hagino/index.html.en>

  (2) Tatsuya Hagino, “Categorical Functional Programming Language”.
      Computer Software, Vol 7, No.1.
      Advances in Software Science and Technology 4, 1992
      ISBN 0-12-037104-9
description-type: markdown
hash: e25cd9897cc34015f88972e270eeca0e5ce0a6ce3846d42eb095430ecd59ad93
homepage: https://github.com/msakai/cpl
latest: 0.0.9
license-name: BSD-3-Clause
maintainer: masahiro.sakai@gmail.com
synopsis: An interpreter of Hagino's Categorical Programming Language (CPL).
test-bench-deps: {}
