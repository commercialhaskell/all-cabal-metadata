all-versions:
- 0.0.5
- 0.0.6
- 0.0.7
- 0.0.8
- 0.0.9
- 0.1.0
author: Masahiro Sakai (masahiro.sakai@gmail.com)
basic-deps:
  array: '>=0'
  base: '>=4 && <5'
  containers: '>=0'
  mtl: '>=2.2.1'
  parsec: '>=0'
  readline: '>=0'
changelog: |
  0.1.0 (2025-10-29)
  -------------------------------

  * Update Cabal-Version requirement from >=1.10 to 2.2
  * Require `mtl` >=2.2.1 for `Control.Monad.Except`
  * Fix compilation error on recent `mtl` package

  0.0.9 (2018-02-16)
  -------------------------------

  * Use `Control.Monad.Except` instead of deprecated Control.Monad.Error

  0.0.8 (2016-01-14)
  -------------------------------

  * "→" can be used instead of "->"
  * GHC-7.10 support
  * Add windows installer

  0.0.7 (2014-08-13)
  -------------------------------

  * Clean up internals
  * Enable `-fReadline` and `-fHaskeline` by default

  0.0.6 (2009-10-26)
  -------------------------------

  Readline/Haskeline support.

  0.0.4
  -------------------------------

  Function defintions are added.

  Examples:

      > let uncurry(f) = eval . prod(f, I)
      uncurry(f) = eval.prod(f,I)
      f: *a -> exp(*b,*c)
      -----------------------------
      uncurry(f): prod(*a,*b) -> *c

      > let primrec(f,g) = pi2.pr(pair(0,f), pair(s.pi1, g))
      primrec(f,g) = pi2.pr(pair(0,f),pair(s.pi1,g))
      f: 1 -> *a  g: prod(nat,*a) -> *a
      ---------------------------------
      primrec(f,g): nat -> *a
changelog-type: markdown
description: |
  An implementation of "A Categorical Programming Language"
  =========================================================

  [![Build Status](https://github.com/msakai/cpl/actions/workflows/build.yaml/badge.svg)](https://github.com/msakai/cpl/actions/workflows/build.yaml)
  [![Hackage](https://img.shields.io/hackage/v/CPL.svg)](https://hackage.haskell.org/package/CPL)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/CPL.svg)](https://packdeps.haskellers.com/feed?needle=CPL)
  [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)

  This package is an implementation of "A Categorical Programming Language"
  (CPL for short)[1][2] written in Haskell.

  CPL is a functional programming language based on category
  theory. Data types are declared in a categorical manner by
  adjunctions. Data types that can be handled include the terminal
  object, the initial object, the binary product functor, the binary
  coproduct functor, the exponential functor, the natural number object,
  the functor for finite lists, and the functor for infinite lists.
  Each data type is declared with its basic operations or
  morphisms. Programs consist of these morphisms, and execution of
  programs is the reduction of elements (i.e. special morphisms) to
  their canonical form.

  Install
  -------

  De-Compress the archive and enter its top directory.
  Then type:

  ```
  $ cabal configure
  $ cabal build
  $ cabal install
  ```

  If you want to compile with readline or haskeline, add `-fReadline` or
  `-fHaskeline` respectively to the configure command.

  Usage
  -----

  See chapter 5 of [1]

  License
  -------

  This program is licensed under the BSD-style license.
  (See the file [COPYING](COPYING).)

  Copyright (C) 2004-2014 Masahiro Sakai <masahiro.sakai@gmail.com>

  Author
  ------

  Masahiro Sakai <masahiro.sakai@gmail.com>

  Bibliography
  ------------

  1. Tatsuya Hagino, “A Categorical Programming Language”.
      Ph.D. Thesis, University of Edinburgh, 1987.
      available at <http://web.sfc.keio.ac.jp/~hagino/index.html.en>

  2. Tatsuya Hagino, “Categorical Functional Programming Language”.
      Computer Software, Vol 7, No.1.
      Advances in Software Science and Technology 4, 1992.
      ISBN 0-12-037104-9.
description-type: markdown
hash: 98d6672036bc7e71da13866daa3d558942cdb958e698ee62dcd3ea82c6e9f70f
homepage: https://github.com/msakai/cpl
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: masahiro.sakai@gmail.com
synopsis: An interpreter of Hagino's Categorical Programming Language (CPL).
test-bench-deps: {}
