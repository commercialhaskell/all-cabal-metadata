homepage: http://github.com/vincenthz/hs-cprng-aes
changelog-type: ''
hash: 964851f00ee700ec6b0f5e32a045cf8aed5fb776881756f8f2199899cfd3241a
test-bench-deps:
  bytestring: -any
  base: '>=4 && <5'
  criterion: -any
  cprng-aes: -any
  mtl: -any
  crypto-random: -any
maintainer: Vincent Hanquez <vincent@snarc.org>
synopsis: Crypto Pseudo Random Number Generator using AES in counter mode.
changelog: ''
basic-deps:
  bytestring: <0.12
  base: '>=3 && <5'
  cipher-aes: '>=0.2.9 && <0.3'
  crypto-random: '>=0.0.7 && <0.1'
  byteable: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
author: Vincent Hanquez <vincent@snarc.org>
latest: 0.6.1
description-type: markdown
description: |+
  CPRNG-AES
  =========

  This module provides a crypto pseudo random number generator using AES in counter mode.

  to import:

      import Crypto.Random.AESCtr

  to use:

      rng <- makeSystem
      let (ran, rng') = getRandomBytes rng 1024

  it's also an instance of CryptoRandomGen from the crypto-api package.

  Statistics
  ----------

  Using ent, a randomness property maker on one 1Mb sample.

  cprng-AES:

      Entropy = 7.999837 bits per byte.
      Optimum compression would reduce the size of this 1048576 byte file by 0 percent.
      Chi square distribution for 1048576 samples is 237.02.
      Arithmetic mean value of data bytes is 127.3422 (127.5 = random).
      Monte Carlo value for Pi is 3.143589568 (error 0.06 percent).

  Compared to urandom with the same sampling:

      Entropy = 7.999831 bits per byte.
      Optimum compression would reduce the size of this 1048576 byte file by 0 percent.
      Chi square distribution for 1048576 samples is 246.63.
      Arithmetic mean value of data bytes is 127.6347 (127.5 = random).
      Monte Carlo value for Pi is 3.132465868 (error 0.29 percent).

license-name: BSD-3-Clause
