all-versions:
- 0.1.0
- 0.1.1
author: Mark Karpov <markkarpov92@gmail.com>
basic-deps:
  base: '>=4.8 && <5.0'
  containers: '>=0.5 && <0.6'
changelog: |
  ## Data Check 0.1.1

  * Minor documentation and metadata changes.

  ## Data Check 0.1.0

  * Initial release.
changelog-type: markdown
description: |
  # Data Check

  [![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)
  [![Hackage](https://img.shields.io/hackage/v/data-check.svg?style=flat)](https://hackage.haskell.org/package/data-check)
  [![Stackage Nightly](http://stackage.org/package/data-check/badge/nightly)](http://stackage.org/nightly/package/data-check)
  [![Stackage LTS](http://stackage.org/package/data-check/badge/lts)](http://stackage.org/lts/package/data-check)
  [![Build Status](https://travis-ci.org/mrkkrp/data-check.svg?branch=master)](https://travis-ci.org/mrkkrp/data-check)
  [![Coverage Status](https://coveralls.io/repos/mrkkrp/data-check/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/data-check?branch=master)

  This is a library that implements generalized approach to checking and
  verification of data. It's useful, for example, for validation of fields on
  web forms.

  Typically, there are a number of transformations and checks you may want to
  perform on a particular type of data, such as text. Thus, it makes sense to
  create all those transformations and checks once and then combine them to
  get more complex validators that may vary on per-field basis.

  Certainly, if we can normalize and validate, we should normalize first.
  However, if we have many normalizing operations, we need a way to specify in
  which order they should be performed, or result can be unpredictable.

  To specify order in which transformations are performed, `normalizer` and
  `normalizerM` functions take a “priority” argument, which is just a
  `Natural` number. The bigger the number, the later the function will be
  applied, so the transformation with priority 0 will always run first.

  This method applies to validators just as well. It's possible to create a
  vocabulary of validators that can be mixed together and the result will
  be always deterministic.

  To support more real-world use cases, every check can be performed inside of
  a monad, allowing to query a database for example.

  One last thing to note is that every normalizer and every validator should
  have a unique priority number. Normalizers (and validators) with the same
  priority will overwrite each other. This is by design. Note that normalizer
  won't override validator with the same priority though, their
  priority-spaces are separate.

  ## License

  Copyright © 2016–2017 Mark Karpov

  Distributed under BSD 3 clause license.
description-type: markdown
hash: ce82ff6388c6c77db825ab3ca4fc03f74c6cb25deeb260cb9136f7bbb2d1789b
homepage: https://github.com/mrkkrp/data-check
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Library for checking and normalization of data (e.g. from web forms)
test-bench-deps:
  QuickCheck: '>=2.4 && <3.0'
  base: '>=4.7 && <5.0'
  data-check: '>=0'
  hspec: '>=2.0 && <3.0'
