homepage: https://github.com/ejconlon/dahdit#readme
changelog-type: ''
hash: 799a581f97095f629cdd9405a75d9d8d30b9e4f2a8c79c4cb27937bdf5e26e74
test-bench-deps:
  dahdit: -any
  free: ==5.1.*
  bytestring: ==0.11.*
  base: '>=4.12 && <5'
  data-sword: ==0.2.*
  data-default: ==0.7.*
  containers: ==0.6.*
  mtl: ==2.2.*
  tasty-hunit: -any
  transformers: ==0.5.*
  tasty: -any
  primitive: '>=0.7 && <0.9'
  vector: ==0.12.*
maintainer: ejconlon@gmail.com
synopsis: Binary parsing and serialization with integrated size
changelog: ''
basic-deps:
  free: ==5.1.*
  bytestring: ==0.11.*
  base: '>=4.12 && <5'
  data-sword: ==0.2.*
  data-default: ==0.7.*
  containers: ==0.6.*
  mtl: ==2.2.*
  transformers: ==0.5.*
  primitive: '>=0.7 && <0.9'
  vector: ==0.12.*
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.2.0
author: Eric Conlon
latest: 0.2.0
description-type: markdown
description: |+
  # dahdit

  Binary parsing and serialization with integrated size.

  (dahs and dits are signal durations in Morse code)

  This differs from `binary` in a few ways:

  * It supports parsing from (or rendering into) pinned or unpinned memory.
  * It uses `ByteArray` internally to avoid generating new or retaining references to old pinned memory.
  * Examining `Put` can yield required byte size without serializing.
  * Derivation uses `via` and not `anyclass` for better control of derived instances.
  * Optionally, types implementing `Binary` can also implement or derive `ByteSized` for size calculation.
  * Known-statically-sized types can implement `StaticByteSized` for size speedups.
  * Provides several additional types representing fixed-length strings or sequences (using `TypeLits`).

license-name: BSD-3-Clause
