homepage: https://github.com/ejconlon/dahdit#readme
changelog-type: ''
hash: 866e35490402093251ea4d6cafd8c23d5a51c1a1a29e493c9889f264fcd62461
test-bench-deps:
  dahdit: -any
  free: ==5.1.*
  bytestring: ==0.11.*
  base: '>=4.12 && <5'
  text: '>=1.2 && <2.1'
  data-sword: ==0.2.*
  falsify: ==0.2.*
  data-default: ==0.7.*
  ghc-typelits-knownnat: ==0.7.*
  containers: ==0.6.*
  mtl: ==2.2.*
  tasty-hunit: ==0.10.*
  transformers: ==0.5.*
  tasty: ==1.4.*
  primitive: '>=0.7 && <0.9'
  vector: '>=0.12 && <0.14'
maintainer: ejconlon@gmail.com
synopsis: Binary parsing and serialization with integrated size
changelog: ''
basic-deps:
  free: ==5.1.*
  bytestring: ==0.11.*
  base: '>=4.12 && <5'
  text: '>=1.2 && <2.1'
  data-sword: ==0.2.*
  data-default: ==0.7.*
  ghc-typelits-knownnat: ==0.7.*
  containers: ==0.6.*
  mtl: ==2.2.*
  transformers: ==0.5.*
  primitive: '>=0.7 && <0.9'
  vector: '>=0.12 && <0.14'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.2.0
- 0.3.0
- 0.5.0
author: Eric Conlon
latest: 0.5.0
description-type: markdown
description: |+
  # dahdit

  Binary parsing and serialization with integrated size.

  (dahs and dits are signal durations in Morse code)

  This differs from `binary` in a few ways:

  * It supports parsing from (or rendering into) pinned or unpinned memory.
  * It uses `ByteArray` internally to avoid generating new or retaining references to old pinned memory.
  * Examining `Put` can yield required byte size without serializing.
  * Derivation uses `via` and not `anyclass` for better control of derived instances.
  * Types implementing `Binary` can implement `byteSized` for size calculation (or it will reflect on `put`).
  * Known-statically-sized types can implement `StaticByteSized` for size speedups.
  * Provides several additional types representing fixed-length strings or sequences (using `TypeLits`).

  ## Static sizes

  You may find it necessary to discharge simple `KnownNat` constraints with a plugin like `ghc-typelits-knownnat`.
  Add that package to your dependencies and add this to the top of the necessary files:

      {-# OPTIONS_GHC -fplugin GHC.TypeLits.KnownNat.Solver #-}

license-name: BSD-3-Clause
