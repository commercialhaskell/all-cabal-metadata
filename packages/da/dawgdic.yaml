all-versions:
- 0.1.0
author: Andrey Prokopenko
basic-deps:
  base: '>=4.17.2.1 && <4.25.0.0'
  binary: '>=0'
  bitvec: '>=0'
  deepseq: '>=0'
  hashable: '>=0'
  primitive: '>=0'
  vector: '>=0'
  vector-binary: '>=0'
  vector-hashtables: '>=0'
changelog: |
  # Revision history for `dawgdic`

  ## 0.1.0 -- 2025-08-28

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# dawgdic\n\n## Overview\n\n**dawgdic** is a library for building and
  accessing \ndictionaries implemented with directed acyclic word \ngraphs (DAWG).\n\nThis
  is a ported version of [C++ dawgdic library](https://github.com/s-yata/dawgdic).\n\n##
  Features\n\nThis library offers `DAWG`, `Dictionary`, `Guide` and `Completer` data
  types as well as their builders. \n\n- `DAWG` represents word graph. It is provided
  as intermediate data structure.\n- `Dictionary` represents compact layout for `DAWG`.
  It offers API to check the presence of the word and associated value in the graph.
  Also it could be stored into a file and loaded from file.\n- `Guide` is being used
  as a tree-like index to get the faster navigation through the dictionary. Also could
  be stored into a file and loaded from file.\n\nInput characters must be in range
  0-255.\n\nThis port does not contain `RankedGuide` and `RankedCompleter` (yet).\n\n###
  Comparison with other DAWG libraries\n\n- dictionary file size, in bytes:\n\n| package/lexicon
  size (words)   | 2.6K   | 26K     | 370K     |\n| ------------------------------
  | ------ | ------- | -------- |\n| dawg: Data.DAWG.Dynamic        | 370868 | 2823660
  | 29933964 |\n| dawg: Data.DAWG.Static         | 133138 | 1030578 | 11128690 |\n|
  dawg-ord: Data.DAWG.Int        | N/A    | N/A     | N/A      |\n| dawg-ord: Data.DAWG.Ord
  \       | N/A    | N/A     | N/A      |\n| packed-dawg: Data.DAWG.Packed  | 15619
  \ | 128491  | 1481671  |\n| dawgdic: Data.DAWG.Dictionary  | 3088   | 141328  |
  1603600  |\n| dawgdic: Guide (w/ Dictionary) | 4640   | 212000  | 2405408  |\n\n-
  features:\n\n| feature          | dawg    | dawg-ord | packed-dawg  | dawgdic |\n|
  ---------------- | ------- | -------- | ------------ | ------- |\n| build from list
  \ | +       | +        | +            | +       |\n| persistence      | +       |
  -        | +            | +       |\n| insert           | Dynamic | +        | -
  \           | Builder |\n| delete key       | Dynamic | +        | -            |
  -       |\n| follow character | Static  | ~edges   | lookupPrefix | +       |\n|
  lookup value     | +       | +        | -            | +       |\n| member           |
  ~lookup | ~lookup  | +            | +       |\n| keys             | +       | +
  \       | +            | +       |\n| values           | +       | +        | -
  \           | +       |\n| toList (assocs)  | +       | +        | -            |
  +       |\n| complete word    | ~submap | -        | ~toList      | +       |\n|
  fuzzy search     | -       | -        | -            | -       |\n| max size         |
  N/A     | N/A      | 2^22 nodes   | N/A     |\n\n\n## Installation\n\nAdd `dawgdic`
  dependency to your project and run `cabal build`.\n\n\n## Building and Querying\n\nBuilding
  DAWG from lexicon of words and ignoring insertion failures is as simple as this:\n\n```haskell\n>>>
  import Data.DAWG.DAWG\n>>> dawg <- fromAscList . lines =<< readFile \"/path/to/lexicon\"\n```\n\nOtherwise,
  consider mutable builder. It could also be useful if words are associated with values.\n\n```haskell\nbuildOrError
  content = do\n  dawgBuilder <- new\n  forM_ content \\(word, value) -> do\n    result
  <- insert word (Just value) dawgBuilder\n    unless result $ error \"Insert failed\"\n
  \ freeze dawgBuilder\n```\n\nBuilding dictionary and guide:\n\n```\n>>> import qualified
  Data.DAWG.Dictionary as D\n>>> import qualified Data.DAWG.Guide as G\n>>> dict <-
  D.build' dawg\n>>> guide <- G.build' dawg dict\n```\n\nSaving dictionary and guide:\n\n```\n>>>
  D.write \"dict.dawg\" dict\n>>> G.write \"guide.dawg\" guide\n```\n\nLoading dictionary
  and guide:\n\n```\n>>> dict <- D.load \"dict.dawg\"\n>>> guide <- G.load \"guide.dawg\"\n```\n\nConsider
  using `Completer` for auto-complete-like queries or if you need to obtain lexicon
  back from `Dictionary` and `Guide`.\n\n## Benchmarks\n\n### Utilities\n\n```\nBenchmark
  \                            default(μs)\n-------------------------------------
  ------------\nUtilities/10/Dawg.fromAscList             5549.76\nUtilities/10/Dict.build'
  \                26981.64\nUtilities/10/Dict.contains                  22.46\nUtilities/10/Dict.lookup
  \                   22.68\nUtilities/10/Dict.follow                    22.42\nUtilities/10/Guide.build'
  \                  76.81\nUtilities/10/Completer.completeKeys        385.35\n-------------------------------------
  ------------\nUtilities/100/Dawg.fromAscList           66486.21\nUtilities/100/Dict.build'
  \              194881.38\nUtilities/100/Dict.contains                326.16\nUtilities/100/Dict.lookup
  \                 323.45\nUtilities/100/Dict.follow                  319.86\nUtilities/100/Guide.build'
  \                782.24\nUtilities/100/Completer.completeKeys      7016.36\n-------------------------------------
  ------------\nUtilities/1000/Dawg.fromAscList         888061.61\nUtilities/1000/Dict.build'
  \            1659798.44\nUtilities/1000/Dict.contains              3627.54\nUtilities/1000/Dict.lookup
  \               3638.10\nUtilities/1000/Dict.follow                3564.64\nUtilities/1000/Guide.build'
  \              7992.73\nUtilities/1000/Completer.completeKeys    82343.20\n-------------------------------------
  ------------\n```\n\n### How to reproduce:\n\n- Install `bench-show`:\n\n```\ncabal
  install bench-show --overwrite-policy=always\n```\n\n- Run and wait (it might take
  around `3m` to complete):\n\n```\ntime cabal bench +RTS \"-N4 -A64m -n4m -qb0\"
  -RTS  --benchmark-options=\"--output bench.html --csv results.csv\"\n```\n\n- Generate
  report:\n\n```\nbench-show --presentation=Solo report results.csv\n```\n\n### Comparison\n\n```\nBenchmark
  \                     default(μs)\n------------------------------ -----------\n10/dawgdic.follow
  \                   21.04\n10/dawg.follow                       85.41\n10/dawg-ord.follow
  \                 110.42\n10/packed-dawg.follow               147.30\n100/dawgdic.follow
  \                 311.05\n100/dawg.follow                    1367.81\n100/dawg-ord.follow
  \               1774.78\n100/packed-dawg.follow             2098.12\n1000/dawgdic.follow
  \               3273.02\n1000/dawg.follow                  18842.47\n1000/dawg-ord.follow
  \             21992.03\n1000/packed-dawg.follow           28938.01\n------------------------------
  -----------\n10/dawgdic.lookup value              21.74\n10/dawg.lookup value                 61.89\n10/dawg-ord.lookup
  value            209.93\n100/dawgdic.lookup value            290.13\n100/dawg.lookup
  value               847.27\n100/dawg-ord.lookup value          2973.35\n1000/dawgdic.lookup
  value          3551.44\n1000/dawg.lookup value            14217.29\n1000/dawg-ord.lookup
  value        40111.28\n10/dawgdic.member                    21.02\n------------------------------
  -----------\n10/dawg.member                       56.43\n10/dawg-ord.member                  191.74\n10/packed-dawg.member
  \              173.97\n100/dawgdic.member                  343.32\n100/dawg.member
  \                    873.70\n100/dawg-ord.member                2863.96\n100/packed-dawg.member
  \            2200.33\n1000/dawgdic.member                9288.22\n1000/dawg.member
  \                 13878.72\n1000/dawg-ord.member              31428.47\n1000/packed-dawg.member
  \          29089.83\n------------------------------ -----------\n10/dawgdic.keys
  \                    108.33\n10/dawg.keys                        100.23\n10/dawg-ord.keys
  \                   160.51\n10/packed-dawg.keys                  50.50\n100/dawgdic.keys
  \                  1392.78\n100/dawg.keys                      1413.00\n100/dawg-ord.keys
  \                 2324.99\n100/packed-dawg.keys                692.23\n1000/dawgdic.keys
  \                15628.83\n1000/dawg.keys                    16541.79\n1000/dawg-ord.keys
  \               27612.77\n1000/packed-dawg.keys              7415.48\n------------------------------
  -----------\n10/dawgdic.values                    52.26\n10/dawg.values                       72.29\n10/dawg-ord.values
  \                 134.79\n100/dawgdic.values                  616.02\n100/dawg.values
  \                   1060.87\n100/dawg-ord.values                1794.82\n1000/dawgdic.values
  \               6457.32\n1000/dawg.values                  11734.25\n1000/dawg-ord.values
  \             21532.54\n------------------------------ -----------\n10/dawgdic.toList
  \                  107.26\n10/dawg.toList                      116.89\n10/dawg-ord.toList
  \                 202.35\n100/dawgdic.toList                 1367.87\n100/dawg.toList
  \                   1608.26\n100/dawg-ord.toList                2898.26\n1000/dawgdic.toList
  \              16334.34\n1000/dawg.toList                  18578.59\n1000/dawg-ord.toList
  \             36360.44\n------------------------------ -----------\n10/dawgdic.complete
  word            367.97\n10/dawg.complete word               248.14\n10/packed-dawg.complete
  word        303.69\n100/dawgdic.complete word          6151.51\n100/dawg.complete
  word             4494.85\n100/packed-dawg.complete word      4913.83\n1000/dawgdic.complete
  word        71152.49\n1000/dawg.complete word           58222.76\n1000/packed-dawg.complete
  word    60828.53\n------------------------------ -----------\n```\n\n### How to
  reproduce:\n\n- Install `bench-show`:\n\n```\ncabal install bench-show --overwrite-policy=always\n```\n\n-
  Run and wait (it might take around `7m` to complete):\n\n```\ntime cabal bench +RTS
  \"-N4 -A64m -n4m -qb0\" -RTS  --benchmark-options=\"--output bench.html --csv results.csv\"\n```\n\n-
  Generate report:\n\n```\nbench-show --presentation=Solo report results.csv\n```\n\n##
  Contributing\n\nIn cases of issues please attach callstack, provide minimal dictionary
  lexicon and provide logs with enabled tracing.\n\n```\ncabal build -ftrace\n```\n\n##
  Acknowledgments\n\n- [Susumu Yata](https://github.com/s-yata) as original author
  of C++ library.\n"
description-type: markdown
hash: a2ecad683aec8f222f4fa8ce7902832bbb81c60606ce0511e4dbf1f905d012a2
homepage: ''
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: persiantiger@yandex.ru
synopsis: Generation and traversal of compressed directed acyclic dawg graphs
test-bench-deps:
  base: '>=4.17.2.1 && <4.25.0.0'
  criterion: '>=0'
  dawgdic: '>=0'
  hashable: '>=0'
  hspec: '>=0'
  text: '>=0'
  vector: '>=0'
