all-versions:
- 0.1.0.0
- 0.1.0.1
author: Arthur Jamet
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  data-reify-gadt: '>=0'
  hashable: '>=0'
  unordered-containers: '>=0'
changelog: ''
changelog-type: ''
description: |
  # `Data.Reify.GADT`

  [![Hackage Version](https://img.shields.io/hackage/v/data-reify-gadt)](https://hackage.haskell.org/package/data-reify-gadt)
  [![Doc](https://img.shields.io/badge/Documentation-Haddock-purple)](https://hackage.haskell.org/package/data-reify-gadt-0.1.0.0/docs/Data-Reify-GADT.html)
  [![CI](https://github.com/Arthi-chaud/data-reify-gadt/actions/workflows/CI.yml/badge.svg)](https://github.com/Arthi-chaud/data-reify-gadt/actions/workflows/CI.yml)


  `data-reify-gadt` is a rewrite of [`data-reify`](https://hackage.haskell.org/package/data-reify) to make the library usable with GADTs.

  With this implementation, it is possible to use `data-reify`'s technique to make a graph out of typed ASTs that use GADTs.

  The logic is the same, only the type definition changes slightly.

  Take a look at the `examples/` directory.
description-type: markdown
hash: 46fdb21d0de36ade2b00ac710cea488c336837d8a672a4def1979f922be4ea3e
homepage: https://github.com/Arthi-chaud/data-reify-gadt#readme
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: aj530@kent.ac.uk
synopsis: Data.Reify for GADTs
test-bench-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  data-reify-gadt: '>=0'
  hashable: '>=0'
  hspec: '>=0'
  unordered-containers: '>=0'
