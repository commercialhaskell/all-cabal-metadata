all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
- 0.3.1.1
- 0.3.1.2
- 0.3.2.0
- 0.3.3.0
- 0.3.3.1
author: Michael Chavinda
basic-deps:
  array: ^>=0.5
  attoparsec: '>=0.12 && <0.15'
  base: '>=4 && <5'
  bytestring: '>=0.11 && <0.13'
  bytestring-lexing: '>=0.5 && <0.6'
  containers: '>=0.6.7 && <0.9'
  dataframe: ^>=0.3
  directory: '>=1.3.0.0 && <2'
  granite: ^>=0.3
  hashable: '>=1.2 && <2'
  process: ^>=1.6
  random: '>=1 && <2'
  snappy-hs: ^>=0.1
  template-haskell: '>=2.0 && <3'
  text: '>=2.0 && <3'
  time: '>=1.12 && <2'
  vector: '>=0.13 && <0.14'
  vector-algorithms: ^>=0.9
  zstd: '>=0.1.2.0 && <0.2'
changelog: "# Revision history for dataframe\n\n## 0.3.3.1\n* Fix bug in `randomSplit`
  causing two splits to overlap.\n\n## 0.3.3.0\n* Better error messaging for expression
  failures.\n* Fix bug where exponentials were not being properly during CSV parsing.\n*
  `toMatrix` now returns either an exception or the a vector of vector doubles.\n*
  Add `sample`, `kFolds`, and `randomSplit` to sample dataframes.\n\n## 0.3.2.0\n*
  Fix dataframe semigroup instance. Appending two rows of the same name but different
  types now gives a row of `Either a b` (work by @jhrcek).\n* Fix left expansion of
  semigroup instance (work by @jhrcek). \n* Added `hasElemType` function that can
  be used with `selectBy` to filter columns by type. E.g. `selectBy [byProperty (hasElemType
  @Int)] df.`\n* Added basic support for program synthesis for feature generation
  (`synthesizeFeatureExpr`) and symbolic regression (`fitRegression`).\n* Web plotting
  doesn't embed entire script anymore.\n* Added `relu`, `min`, and `max` functions
  for expressions.\n* Add `fromRows` function to build a dataframe from rows. Also
  add `toAny` function that converts a value to a dynamic-like Columnable value.\n*
  `isNumeric` function now recognises `Integer` types.\n* Added `readCsvWithOpts`
  function that allows read specification.\n* Expose option to specify data formats
  when parsing CSV.\n* Added setup script for Hasktorch example.\n\n\n## 0.3.1.2\n*
  Update granite version, again, for stackage.\n\n## 0.3.1.1\n* Aggregation now works
  on expressions rather than just column references.\n* Export writeCsv\n* Loosen
  bounds for dependencies to keep library on stackage.\n* Add `filterNothing` function
  that returns all empty rows of a column.\n* Add `IfThenElse` function for conditional
  expressions.\n* Add `synthesizeFeatureExpr` function that does a search for a predictive
  variable in a `Double` dataframe.\n\n## 0.3.1.0\n* Add new `selectBy` function which
  subsumes all the other select functions. Specifically we can:\n    * `selectBy [byName
  \"x\"] df`: normal select.\n    * `selectBy [byProperty isNumeric] df`: all columns
  with a given property.\n    * `selectBy [byNameProperty (T.isPrefixOf \"weight\")]
  df`: select by column name predicate.\n    * `selectBy [byIndexRange (0, 5)] df`:
  picks the first size columns.\n    * `selectBy [byNameRange (\"a\", \"c\")] df`:
  select names within a range.\n* Cut down dependencies to reduce binary/installation
  size.\n* Add module for web plots that uses chartjs.\n* Web plots can open in the
  browser.\n\n## 0.3.0.4\n* Fix bug with parquet reader.\n\n## 0.3.0.3\n* Improved
  parquet reader. The reader now supports most parquet files downloaded from internet
  sources\n  * Supports all primitive parquet types plain and uncompressed.\n  * Can
  decode both v1 and v2 data pages.\n  * Supports Snappy and ZSTD compression.\n  *
  Supports RLE/bitpacking encoding for primitive types\n  * Backward compatible with
  INT96 type.\n  * From the parquet-testing repo we can successfully read the following:\n
  \   * alltypes_dictionary.parquet\n    * alltypes_plain.parquet\n    * alltypes_plain.snappy.parquet\n
  \   * alltypes_tiny_pages_plain.parquet\n    * binary_truncated_min_max.parquet\n
  \   * datapage_v1-corrupt-checksum.parquet\n    * datapage_v1-snappy-compressed-checksum.parquet\n
  \   * datapage_v1-uncompressed-checksum.parquet\n* Improve CSV parsing: Parse bytestring
  and convert to text only at the end. Remove some redundancies in parsing with suggestions
  from @Jhingon.\n* Faster correlation computation.\n* Update version of granite that
  ships with dataframe and add new scatterBy plot.\n\n## 0.3.0.2\n* Re-enable Parquet.\n*
  Change columnInfo to describeColumns\n* We can now convert columns to lists.\n*
  Fast reductions and groupings. GroupBys are now a dataframe construct not a column
  construct (thanks to @stites).\n* Filter is now faster because we do mutation on
  the index vector.\n* Frequencies table nnow correctly display percentages (thanks
  @kayvank)\n* Show table implementations have been unified (thanks @metapho-re)\n*
  We now compute statistics on null columns\n* Drastic improvement in plotting since
  we now use granite.\n\n## 0.3.0.1\n* Temporarily remove Parquet support. I think
  it'll be worth creating a spin off of snappy that doesn't rely on C bindings. Also
  I'll probably spin Parquet off into a separate library.\n\n## 0.3.0.0\n* Now supports
  inner joins\n```haskell\nghci> df |> D.innerJoin [\"key_1\", \"key_2\"] other\n```\n*
  Aggregations are now expressions allowing for more expressive aggregation logic.
  Previously: `D.aggregate [(\"quantity\", D.Mean), (\"price\", D.Sum)] df` now ``D.aggregate
  [(F.sum (F.col @Double \"label\") / (F.count (F.col @Double \"label\")) `F.as` \"positive_rate\")]``\n*
  In GHCI, you can now create type-safe bindings for each column and use those in
  expressions.\n\n```haskell\nghci> :exposeColumns df\nghci> D.aggregate  [(F.sum
  label / F.count label) `F.as` \"positive_rate\"]\n```\n* Added pandas and polars
  benchmarks.\n* Performance improvements to `groupBy`.\n* Various bug fixes.\n\n##
  0.2.0.2\n* Experimental Apache Parquet support.\n* Rename conversion columns (changed
  from toColumn and toColumn' to fromVector and fromList).\n* Rename constructor for
  dataframe to fromNamedColumns\n* Create an error context for error messages so we
  can change the exceptions as they are thrown.\n* Provide safe versions of building
  block functions that allow us to build good traces.\n* Add readthedocs support.\n\n##
  0.2.0.1\n* Fix bug with new comparison expressions. gt and geq were actually implemented
  as lt and leq.\n* Changes to make library work with ghc 9.10.1 and 9.12.2\n\n##
  0.2.0.0\n### Replace `Function` adt with a column expression syntax.\n\nPreviously,
  we tried to stay as close to Haskell as possible. We used the explicit\nordering
  of the column names in the first part of the tuple to determine the function\narguments
  and the a regular Haskell function that we evaluated piece-wise on each row.\n\n```haskell\nlet
  multiply (a :: Int) (b :: Double) = fromIntegral a * b\nlet withTotalPrice = D.deriveFrom
  ([\"quantity\", \"item_price\"], D.func multiply) \"total_price\" df\n```\n\nNow,
  we have a column expression syntax that mirrors Pyspark and Polars.\n\n```haskell\nlet
  withTotalPrice = D.derive \"total_price\" (D.lift fromIntegral (D.col @Int \"quantity\")
  * (D.col @Double\"item_price\")) df\n```\n\n### Adds a coverage report to the repository
  (thanks to @oforero)\nWe don't have good test coverage right now. This will help
  us determine where to invest.\n@oforero provided a script to make an HPC HTML report
  for coverage.\n\n### Convenience functions for comparisons\nInstead of lifting all
  bool operations we provide `eq`, `leq` etc.\n\n## 0.1.0.3\n* Use older version of
  correlation for ihaskell itegration\n\n## 0.1.0.2\n* Change namespace from `Data.DataFrame`
  to `DataFrame`\n* Add `toVector` function for converting columns to vectors.\n*
  Add `impute` function for replacing `Nothing` values in optional columns.\n* Add
  `filterAllJust` to filter out all rows with missing data.\n* Add `distinct` function
  that returns a dataframe with distict rows.\n\n## 0.1.0.1\n* Fixed parse failure
  on nested, escaped quotation.\n* Fixed column info when field name isn't found.\n\n##
  0.1.0.0\n* Initial release\n"
changelog-type: markdown
description: "<h1 align=\"center\">\n  <a href=\"https://dataframe.readthedocs.io/en/latest/\">\n
  \   <img width=\"100\" height=\"100\" src=\"https://raw.githubusercontent.com/mchav/dataframe/master/docs/_static/haskell-logo.svg\"
  alt=\"dataframe logo\">\n  </a>\n</h1>\n\n<div align=\"center\">\n  <a href=\"https://hackage.haskell.org/package/dataframe\">\n
  \   <img src=\"https://img.shields.io/hackage/v/dataframe\" alt=\"hackage Latest
  Release\"/>\n  </a>\n  <a href=\"https://github.com/mchav/dataframe/actions/workflows/haskel-ci.yml\">\n
  \   <img src=\"https://github.com/mchav/dataframe/actions/workflows/haskell-ci.yml/badge.svg\"
  alt=\"C/I\"/>\n  </a>\n</div>\n\n<p align=\"center\">\n  <a href=\"https://dataframe.readthedocs.io/en/latest/\">User
  guide</a>\n  |\n  <a href=\"https://discord.gg/XJE5wKT2kb\">Discord</a>\n</p>\n\n#
  DataFrame\n\nA fast, safe, and intuitive DataFrame library.\n\n## Why use this DataFrame
  library?\n\n* Encourages concise, declarative, and composable data pipelines.\n*
  Static typing makes code easier to reason about and catches many bugs at compile
  time—before your code ever runs.\n* Delivers high performance thanks to Haskell’s
  optimizing compiler and efficient memory model.\n* Designed for interactivity: expressive
  syntax, helpful error messages, and sensible defaults.\n* Works seamlessly in both
  command-line and notebook environments—great for exploration and scripting alike.\n\n##
  Example usage\n\n### Interactive environment\n![Screencast of usage in GHCI](./static/example.gif)\n\nKey
  features in example:\n* Intuitive, SQL-like API to get from data to insights.\n*
  Create typed, completion-ready references to columns in a dataframe using `:exposeColumns`\n*
  Type-safe column transformations for faster and safer exploration.\n* Fluid, chaining
  API that makes code easy to reason about.\n\n### Standalone script example\n```haskell\n--
  Useful Haskell extensions.\n{-# LANGUAGE OverloadedStrings #-} -- Allow string literal
  to be interpreted as any other string type.\n{-# LANGUAGE TypeApplications #-} --
  Convenience syntax for specifiying the type `sum a b :: Int` vs `sum @Int a b'.
  \n\nimport qualified DataFrame as D -- import for general functionality.\nimport
  qualified DataFrame.Functions as F -- import for column expressions.\n\nimport DataFrame
  ((|>)) -- import chaining operator with unqualified.\n\nmain :: IO ()\nmain = do\n
  \   df <- D.readTsv \"./data/chipotle.tsv\"\n    let quantity = F.col \"quantity\"
  :: D.Expr Int -- A typed reference to a column.\n    print (df\n      |> D.select
  [\"item_name\", \"quantity\"]\n      |> D.groupBy [\"item_name\"]\n      |> D.aggregate
  [ (F.sum quantity)     `F.as` \"sum_quantity\"\n                     , (F.mean quantity)
  \   `F.as` \"mean_quantity\"\n                     , (F.maximum quantity) `F.as`
  \"maximum_quantity\"\n                     ]\n      |> D.sortBy D.Descending [\"sum_quantity\"]\n
  \     |> D.take 10)\n\n```\n\nOutput:\n\n```\n------------------------------------------------------------------------------------------\nindex
  |          item_name           | sum_quantity |    mean_quanity    | maximum_quanity\n------|------------------------------|--------------|--------------------|----------------\n
  Int  |             Text             |     Int      |       Double       |       Int
  \     \n------|------------------------------|--------------|--------------------|----------------\n0
  \    | Chicken Bowl                 | 761          | 1.0482093663911847 | 3              \n1
  \    | Chicken Burrito              | 591          | 1.0687160940325497 | 4              \n2
  \    | Chips and Guacamole          | 506          | 1.0563674321503131 | 4              \n3
  \    | Steak Burrito                | 386          | 1.048913043478261  | 3              \n4
  \    | Canned Soft Drink            | 351          | 1.1661129568106312 | 4              \n5
  \    | Chips                        | 230          | 1.0900473933649288 | 3              \n6
  \    | Steak Bowl                   | 221          | 1.04739336492891   | 3              \n7
  \    | Bottled Water                | 211          | 1.3024691358024691 | 10             \n8
  \    | Chips and Fresh Tomato Salsa | 130          | 1.1818181818181819 | 15             \n9
  \    | Canned Soda                  | 126          | 1.2115384615384615 | 4 \n```\n\nFull
  example in `./examples` folder using many of the constructs in the API.\n\n## Installing\n\n###
  Jupyter notebook\n* We have a [hosted version of the Jupyter notebook](https://ulwazi-exh9dbh2exbzgbc9.westus-01.azurewebsites.net/lab)
  on azure sites. This is hosted on Azure's free tier so it can only support 3 or
  4 kernels at a time.\n* To get started quickly, use the Dockerfile in the [ihaskell-dataframe](https://github.com/mchav/ihaskell-dataframe)
  to build and run an image with dataframe integration.\n* For a preview check out
  the [California Housing](https://github.com/mchav/dataframe/blob/main/docs/California%20Housing.ipynb)
  notebook.\n\n### CLI\n* Run the installation script `curl '=https' --tlsv1.2 -sSf
  https://raw.githubusercontent.com/mchav/dataframe/refs/heads/main/scripts/install.sh
  | sh`\n* Download the run script with: `curl --output dataframe \"https://raw.githubusercontent.com/mchav/dataframe/refs/heads/main/scripts/dataframe.sh\"`\n*
  Make the script executable: `chmod +x dataframe`\n* Add the script your path: `export
  PATH=$PATH:./dataframe`\n* Run the script with: `dataframe`\n\n\n## What is exploratory
  data analysis?\nWe provide a primer [here](https://github.com/mchav/dataframe/blob/main/docs/exploratory_data_analysis_primer.md)
  and show how to do some common analyses.\n\n## Coming from other dataframe libraries\nFamiliar
  with another dataframe library? Get started:\n* [Coming from Pandas](https://github.com/mchav/dataframe/blob/main/docs/coming_from_pandas.md)\n*
  [Coming from Polars](https://github.com/mchav/dataframe/blob/main/docs/coming_from_polars.md)\n*
  [Coming from dplyr](https://github.com/mchav/dataframe/blob/main/docs/coming_from_dplyr.md)\n\n##
  Supported input formats\n* CSV\n* Apache Parquet\n\n## Supported output formats\n*
  CSV\n\n## Future work\n* Apache arrow compatability\n* Integration with more data
  formats (SQLite, Postgres, json lines, xlsx).\n* Host the whole library + Jupyter
  lab on Azure with auth and isolation.\n"
description-type: markdown
hash: 8345ca964fa693addf00f501531847c55d73254121157d16d49ddb2f5f04edd5
homepage: ''
latest: 0.3.3.1
license-name: GPL-3.0-or-later
maintainer: mschavinda@gmail.com
synopsis: A fast, safe, and intuitive DataFrame library.
test-bench-deps:
  HUnit: ^>=1.6
  base: '>=4 && <5'
  criterion: '>=1 && <2'
  dataframe: '>=0.3 && <0.4'
  process: '>=1.6 && <2'
  random: '>=1 && <2'
  random-shuffle: '>=0.0.4 && <1'
  text: '>=2.0 && <3'
  time: '>=1.12 && <2'
  vector: ^>=0.13
