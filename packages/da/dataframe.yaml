all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
author: Michael Chavinda
basic-deps:
  array: '>=0.5 && <0.6'
  attoparsec: '>=0.12 && <=0.14.4'
  base: '>=4.17.2.0 && <4.22'
  bytestring: '>=0.11 && <=0.12.2.0'
  containers: '>=0.6.7 && <0.8'
  directory: '>=1.3.0.0 && <=1.3.9.0'
  filepath: '>=1.0.0.0 && <=1.5.4.0'
  hashable: '>=1.2 && <=1.5.0.0'
  random: '>=1 && <=1.3.1'
  snappy: '>=0.2.0.0 && <=0.2.0.4'
  statistics: '>=0.16.2.1 && <=0.16.3.0'
  template-haskell: '>=2.0 && <=2.30'
  text: '>=2.0 && <=2.1.2'
  time: '>=1.12 && <=1.14'
  vector: '>=0.13 && <0.14'
  vector-algorithms: '>=0.9 && <0.10'
  zstd: '>=0.1.2.0 && <=0.1.3.0'
changelog: "# Revision history for dataframe\n\n## 0.3.0.0\n* Now supports inner joins\n*
  Aggregations are now expressions allowing for more expressive aggregation logic.\n*
  In GHCI, you can now create type-safe bindings for each column and use those in
  expressions.\n* Added pandas and polars benchmarks.\n* Performance improvements
  to `groupBy`.\n* Various bug fixes.\n\n## 0.2.0.2\n* Experimental Apache Parquet
  support.\n* Rename conversion columns (changed from toColumn and toColumn' to fromVector
  and fromList).\n* Rename constructor for dataframe to fromNamedColumns\n* Create
  an error context for error messages so we can change the exceptions as they are
  thrown.\n* Provide safe versions of building block functions that allow us to build
  good traces.\n* Add readthedocs support.\n\n## 0.2.0.1\n* Fix bug with new comparison
  expressions. gt and geq were actually implemented as lt and leq.\n* Changes to make
  library work with ghc 9.10.1 and 9.12.2\n\n## 0.2.0.0\n### Replace `Function` adt
  with a column expression syntax.\n\nPreviously, we tried to stay as close to Haskell
  as possible. We used the explicit\nordering of the column names in the first part
  of the tuple to determine the function\narguments and the a regular Haskell function
  that we evaluated piece-wise on each row.\n\n```haskell\nlet multiply (a :: Int)
  (b :: Double) = fromIntegral a * b\nlet withTotalPrice = D.deriveFrom ([\"quantity\",
  \"item_price\"], D.func multiply) \"total_price\" df\n```\n\nNow, we have a column
  expression syntax that mirrors Pyspark and Polars.\n\n```haskell\nlet withTotalPrice
  = D.derive \"total_price\" (D.lift fromIntegral (D.col @Int \"quantity\") * (D.col
  @Double\"item_price\")) df\n```\n\n### Adds a coverage report to the repository
  (thanks to @oforero)\nWe don't have good test coverage right now. This will help
  us determine where to invest.\n@oforero provided a script to make an HPC HTML report
  for coverage.\n\n### Convenience functions for comparisons \nInstead of lifting
  all bool operations we provide `eq`, `leq` etc.\n\n## 0.1.0.3\n* Use older version
  of correlation for ihaskell itegration\n\n## 0.1.0.2\n* Change namespace from `Data.DataFrame`
  to `DataFrame`\n* Add `toVector` function for converting columns to vectors.\n*
  Add `impute` function for replacing `Nothing` values in optional columns.\n* Add
  `filterAllJust` to filter out all rows with missing data.\n* Add `distinct` function
  that returns a dataframe with distict rows.\n\n## 0.1.0.1\n* Fixed parse failure
  on nested, escaped quotation.\n* Fixed column info when field name isn't found.\n\n##
  0.1.0.0\n* Initial release\n"
changelog-type: markdown
description: "<h1 align=\"center\">\n  <a href=\"https://dataframe.readthedocs.io/en/latest/\">\n
  \   <img width=\"100\" height=\"100\" src=\"https://raw.githubusercontent.com/mchav/dataframe/master/docs/_static/haskell-logo.svg\"
  alt=\"dataframe logo\">\n  </a>\n</h1>\n\n<div align=\"center\">\n  <a href=\"https://hackage.haskell.org/package/dataframe-0.2.0.2\">\n
  \   <img src=\"https://img.shields.io/hackage/v/dataframe\" alt=\"hackage Latest
  Release\"/>\n  </a>\n  <a href=\"https://github.com/mchav/dataframe/actions/workflows/haskel-ci.yml\">\n
  \   <img src=\"https://github.com/mchav/dataframe/actions/workflows/haskell-ci.yml/badge.svg\"
  alt=\"C/I\"/>\n  </a>\n</div>\n\n<p align=\"center\">\n  <a href=\"https://dataframe.readthedocs.io/en/latest/\">User
  guide</a>\n  |\n  <a href=\"https://discord.gg/XJE5wKT2kb\">Discord</a>\n</p>\n\n#
  DataFrame\n\nA fast, safe, and intuitive DataFrame library.\n\n## Why use this DataFrame
  library?\n\n* Encourages concise, declarative, and composable data pipelines.\n*
  Static typing makes code easier to reason about and catches many bugs at compile
  time—before your code ever runs.\n* Delivers high performance thanks to Haskell’s
  optimizing compiler and efficient memory model.\n* Designed for interactivity: expressive
  syntax, helpful error messages, and sensible defaults.\n\n## Example usage\n\n###
  Interactive environment\n```haskell\nghci> import qualified DataFrame as D\nghci>
  import DataFrame ((|>))\nghci> df <- D.readCsv \"./data/housing.csv\"\nghci> D.columnInfo
  df\n--------------------------------------------------------------------------------------------------------------------\nindex
  |    Column Name     | # Non-null Values | # Null Values | # Partially parsed |
  # Unique Values |     Type    \n------|--------------------|-------------------|---------------|--------------------|-----------------|-------------\n
  Int  |        Text        |        Int        |      Int      |        Int         |
  \      Int       |     Text    \n------|--------------------|-------------------|---------------|--------------------|-----------------|-------------\n0
  \    | total_bedrooms     | 20433             | 207           | 0                  |
  1924            | Maybe Double\n1     | ocean_proximity    | 20640             |
  0             | 0                  | 5               | Text        \n2     | median_house_value
  | 20640             | 0             | 0                  | 3842            | Double
  \     \n3     | median_income      | 20640             | 0             | 0                  |
  12928           | Double      \n4     | households         | 20640             |
  0             | 0                  | 1815            | Double      \n5     | population
  \        | 20640             | 0             | 0                  | 3888            |
  Double      \n6     | total_rooms        | 20640             | 0             | 0
  \                 | 5926            | Double      \n7     | housing_median_age |
  20640             | 0             | 0                  | 52              | Double
  \     \n8     | latitude           | 20640             | 0             | 0                  |
  862             | Double      \n9     | longitude          | 20640             |
  0             | 0                  | 844             | Double\nghci> :exposeColumns
  df\nghci> import qualified DataFrame.Functions as F\nghci> df |> D.groupBy [\"ocean_proximity\"]
  |> D.aggregate [(F.mean median_house_value) `F.as` \"avg_house_value\" ]\n--------------------------------------------\nindex
  | ocean_proximity |  avg_house_value  \n------|-----------------|-------------------\n
  Int  |      Text       |       Double      \n------|-----------------|-------------------\n0
  \    | <1H OCEAN       | 240084.28546409807\n1     | INLAND          | 124805.39200122119\n2
  \    | ISLAND          | 380440.0          \n3     | NEAR BAY        | 259212.31179039303\n4
  \    | NEAR OCEAN      | 249433.97742663656\nghci> df |> D.derive \"rooms_per_household\"
  (total_rooms / households) |> D.take 10\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nindex
  | longitude | latitude | housing_median_age | total_rooms | total_bedrooms | population
  | households |   median_income    | median_house_value | ocean_proximity | rooms_per_household\n------|-----------|----------|--------------------|-------------|----------------|------------|------------|--------------------|--------------------|-----------------|--------------------\n
  Int  |  Double   |  Double  |       Double       |   Double    |  Maybe Double  |
  \  Double   |   Double   |       Double       |       Double       |      Text       |
  \      Double       \n------|-----------|----------|--------------------|-------------|----------------|------------|------------|--------------------|--------------------|-----------------|--------------------\n0
  \    | -122.23   | 37.88    | 41.0               | 880.0       | Just 129.0     |
  322.0      | 126.0      | 8.3252             | 452600.0           | NEAR BAY        |
  6.984126984126984  \n1     | -122.22   | 37.86    | 21.0               | 7099.0
  \     | Just 1106.0    | 2401.0     | 1138.0     | 8.3014             | 358500.0
  \          | NEAR BAY        | 6.238137082601054  \n2     | -122.24   | 37.85    |
  52.0               | 1467.0      | Just 190.0     | 496.0      | 177.0      | 7.2574
  \            | 352100.0           | NEAR BAY        | 8.288135593220339  \n3     |
  -122.25   | 37.85    | 52.0               | 1274.0      | Just 235.0     | 558.0
  \     | 219.0      | 5.6431000000000004 | 341300.0           | NEAR BAY        |
  5.8173515981735155 \n4     | -122.25   | 37.85    | 52.0               | 1627.0
  \     | Just 280.0     | 565.0      | 259.0      | 3.8462             | 342200.0
  \          | NEAR BAY        | 6.281853281853282  \n5     | -122.25   | 37.85    |
  52.0               | 919.0       | Just 213.0     | 413.0      | 193.0      | 4.0368
  \            | 269700.0           | NEAR BAY        | 4.761658031088083  \n6     |
  -122.25   | 37.84    | 52.0               | 2535.0      | Just 489.0     | 1094.0
  \    | 514.0      | 3.6591             | 299200.0           | NEAR BAY        |
  4.9319066147859925 \n7     | -122.25   | 37.84    | 52.0               | 3104.0
  \     | Just 687.0     | 1157.0     | 647.0      | 3.12               | 241400.0
  \          | NEAR BAY        | 4.797527047913447  \n8     | -122.26   | 37.84    |
  42.0               | 2555.0      | Just 665.0     | 1206.0     | 595.0      | 2.0804
  \            | 226700.0           | NEAR BAY        | 4.294117647058823  \n9     |
  -122.25   | 37.84    | 52.0               | 3549.0      | Just 707.0     | 1551.0
  \    | 714.0      | 3.6912000000000003 | 261100.0           | NEAR BAY        |
  4.970588235294118\nghci> df |> D.derive \"nonsense_feature\" (latitude + ocean_proximity)
  |> D.take 10\n\n<interactive>:14:47: error: [GHC-83865]\n    • Couldn't match type
  ‘Text’ with ‘Double’\n      Expected: Expr Double\n        Actual: Expr Text\n    •
  In the second argument of ‘(+)’, namely ‘ocean_proximity’\n      In the second argument
  of ‘derive’, namely\n        ‘(latitude + ocean_proximity)’\n      In the second
  argument of ‘(|>)’, namely\n        ‘derive \"nonsense_feature\" (latitude + ocean_proximity)’\n```\n\nKey
  features in example:\n* Intuitive, SQL-like API to get from data to insights.\n*
  Create type-safe references to columns in a dataframe using `:exponseColumns`\n*
  Type-safe column transformations for faster and safer exploration.\n* Fluid, chaining
  API that makes code easy to reason about.\n\n### Standalone script example\n```haskell\n--
  Useful Haskell extensions.\n{-# LANGUAGE OverloadedStrings #-} -- Allow string literal
  to be interpreted as any other string type.\n{-# LANGUAGE TypeApplications #-} --
  Convenience syntax for specifiying the type `sum a b :: Int` vs `sum @Int a b'.
  \n\nimport qualified DataFrame as D -- import for general functionality.\nimport
  qualified DataFrame.Functions as F -- import for column expressions.\n\nimport DataFrame
  ((|>)) -- import chaining operator with unqualified.\n\nmain :: IO ()\nmain = do\n
  \   df <- D.readTsv \"./data/chipotle.tsv\"\n    let quantity = F.col \"quantity\"
  :: D.Expr Int -- A typed reference to a column.\n    print (df\n      |> D.select
  [\"item_name\", \"quantity\"]\n      |> D.groupBy [\"item_name\"]\n      |> D.aggregate
  [ (F.sum quantity)     `F.as` \"sum_quantity\"\n                     , (F.mean quantity)
  \   `F.as` \"mean_quantity\"\n                     , (F.maximum quantity) `F.as`
  \"maximum_quantity\"\n                     ]\n      |> D.sortBy D.Descending [\"sum_quantity\"]\n
  \     |> D.take 10)\n\n```\n\nOutput:\n\n```\n------------------------------------------------------------------------------------------\nindex
  |          item_name           | sum_quantity |    mean_quanity    | maximum_quanity\n------|------------------------------|--------------|--------------------|----------------\n
  Int  |             Text             |     Int      |       Double       |       Int
  \     \n------|------------------------------|--------------|--------------------|----------------\n0
  \    | Chicken Bowl                 | 761          | 1.0482093663911847 | 3              \n1
  \    | Chicken Burrito              | 591          | 1.0687160940325497 | 4              \n2
  \    | Chips and Guacamole          | 506          | 1.0563674321503131 | 4              \n3
  \    | Steak Burrito                | 386          | 1.048913043478261  | 3              \n4
  \    | Canned Soft Drink            | 351          | 1.1661129568106312 | 4              \n5
  \    | Chips                        | 230          | 1.0900473933649288 | 3              \n6
  \    | Steak Bowl                   | 221          | 1.04739336492891   | 3              \n7
  \    | Bottled Water                | 211          | 1.3024691358024691 | 10             \n8
  \    | Chips and Fresh Tomato Salsa | 130          | 1.1818181818181819 | 15             \n9
  \    | Canned Soda                  | 126          | 1.2115384615384615 | 4 \n```\n\nFull
  example in `./examples` folder using many of the constructs in the API.\n\n### Visual
  example\n![Screencast of usage in GHCI](./static/example.gif)\n\n## Installing\n\n###
  Jupyter notebook\n* We have a [hosted version of the Jupyter notebook](https://ihaskell-dataframe-crf7g5fvcpahdegz.westus2-01.azurewebsites.net/lab/)
  on azure sites.\n* Use the Dockerfile in the [ihaskell-dataframe](https://github.com/mchav/ihaskell-dataframe)
  to build and run an image with dataframe integration.\n* For a preview check out
  the [California Housing](https://ihaskell-dataframe-crf7g5fvcpahdegz.westus2-01.azurewebsites.net/lab/tree/California%20Housing.ipynb)
  notebook.\n\n### CLI\n* Install Haskell (ghc + cabal) via [ghcup](https://www.haskell.org/ghcup/install/)
  selecting all the default options.\n* Install snappy (needed for Parquet support)
  by running: `sudo apt install libsnappy-dev`.\n* To install dataframe run `cabal
  update && cabal install dataframe`\n* Open a Haskell repl with dataframe loaded
  by running `cabal repl --build-depends dataframe`.\n* Follow along any one of the
  tutorials below.\n\n\n## What is exploratory data analysis?\nWe provide a primer
  [here](https://github.com/mchav/dataframe/blob/main/docs/exploratory_data_analysis_primer.md)
  and show how to do some common analyses.\n\n## Coming from other dataframe libraries\nFamiliar
  with another dataframe library? Get started:\n* [Coming from Pandas](https://github.com/mchav/dataframe/blob/main/docs/coming_from_pandas.md)\n*
  [Coming from Polars](https://github.com/mchav/dataframe/blob/main/docs/coming_from_polars.md)\n*
  [Coming from dplyr](https://github.com/mchav/dataframe/blob/main/docs/coming_from_dplyr.md)\n\n##
  Supported input formats\n* CSV\n* Apache Parquet (still buggy and experimental)\n\n##
  Future work\n* Apache arrow compatability\n* Integration with common data formats
  (currently only supports CSV)\n* Support windowed plotting (currently only supports
  ASCII plots)\n* Host the whole library + Jupyter lab on Azure with auth and isolation.\n"
description-type: markdown
hash: 1660d9f3ea193b1d9762336ced0b0c8f6e95915deb5af7a4aaaf26c3bc8d4357
homepage: ''
latest: 0.3.0.0
license-name: GPL-3.0-or-later
maintainer: mschavinda@gmail.com
synopsis: A fast, safe, and intuitive DataFrame library.
test-bench-deps:
  HUnit: ^>=1.6
  base: '>=4.17.2.0 && <4.22'
  criterion: '>=1 && <=1.6.4.0'
  dataframe: '>=0'
  process: '>=1.6'
  random: '>=1 && <=1.3.1'
  random-shuffle: '>=0.0.4'
  text: '>=2.0 && <=2.1.2'
  time: '>=1.12'
  vector: '>=0.13 && <0.14'
