all-versions:
- 0.1.0.0
author: Ilya Pershin
basic-deps:
  base: '>=4.8 && <5.0'
  containers: '>=0'
changelog: ''
changelog-type: ''
description: "# What is it?\n\nThis is an attempt to rethink the concept of list indexing,
  implemented in \nHaskell. Here are some examples (do `cabal install` before it):\n\n```haskell\nPrelude>
  import Data.List.Index as LI\nPrelude LI> [1..7] LI.!! 1\n2\nPrelude LI> [1..7]
  LI.!! end\n7\nPrelude LI> [1..7] LI.!! (end-2)\n5\nPrelude LI> [1..7] LI.!! mid\n4\nPrelude
  LI> LI.drop 13 ['a'..'z']\n\"nopqrstuvwxyz\"\nPrelude LI> LI.drop mid ['a'..'z']\n\"nopqrstuvwxyz\"\nPrelude
  LI> LI.splitAt mid \"Hello World!\"\n(\"Hello \",\"World!\")\nPrelude LI> LI.splitAt
  (mid - 1) \"Hello World!\"\n(\"Hello\",\" World!\")\n```\n\n# Why would someone
  need this?\n\nWell, there already are a few of programming languages in which one
  can access \nlists from their end, rather than from the beginning.\n\n* Some of
  them use a negative index (e.g. Python, Perl) like `a[-2]`. It's \nnot safe way
  though, because this approach may disguise an error of violating \nlists' range.\n*
  The others use a special keyword or a symbol (e.g. Tcl, Matlab, Julia, D) \nlike
  `a[end-1]`. It's a good option, although it requires support from the \nlanguage
  syntax.\n\nOther programming languages do not have such a feature. This package
  \n**data-index** tries to get it done for Haskell in a rather peculiar way.\n\n1.
  The required functionality is added as a library, in contrast with patching \nthe
  syntax\n2. Not only an access from the end of a list is added, but also an access
  from \nany user-defined place, i.e. from the middle.\n\n# How is this done?\n\nThe
  concept of a list index was invented anew. What is an access to a list by \nindex
  anyway? Well, this is a function of two arguments that takes a list and \na some
  abstract *place*, and returns a value from the *place*. This *place* \nmust be defined
  in a list-independent way. These are examples of such \n*places*: the third element
  from the beginning, the second element from the \nend, the middle. That's how it
  can be done:\n\n```haskell\nnewtype Index i = Index (forall a . [a] -> i)\nidx   =
  Index (\\t -> 2)                -- third element from the beginning\nidx'  = Index
  (\\t -> length t - 2)     -- second element from the end\nidx'' = Index (\\t ->
  length t `div` 2) -- the middle\n```\n\nOne can notice that with such a definition,
  `Index` turns out to be something \nvery similar to `Reader` monad, saving `forall`.
  Furthermore, \"classical\" \nindices from the beginning become `pure` indices, in
  virtue of\n    \n```haskell\npure i = Index (const i)\n```\n\nNew `Index` is `Num`
  instance as well, allowing using not only `t !!  end`, \nbut also `t !! (end-2)`
  or `t !! 1`, due to\n\n```haskell\n(-) = liftA2 (-)\nfromInteger = pure . fromInteger\n```\n\n#
  Functions redefining\n\nThe only problem is to make functions to work with new `Index`
  instead of \n`Int`. At present this is getting done by manual redefining each needed
  \nfunction via do-notation, because I don't know how to do it better. Container
  \npolymorphism is also done, so the actual definition of `Index` is:\n\n```haskell\nnewtype
  Index t i = Index {runIndex :: forall a . t a -> i}\n```\n\nTherefore, for each
  necessary container `t` corresponding functions working \nwith indices as `Int`
  have to be redefined to functions working with `Index t \nInt`. Until now this is
  done for `Data.List` and `Data.Sequence`, but it's \neasy to implement `Index` for
  any linear container, e.g. `Vector`.\n"
description-type: markdown
hash: f883a2131f214db027f1b269d3e21b046749c407d7b36aec5b996df567ce6f47
homepage: https://github.com/Toucandy/data-index#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: pershin2010@gmail.com
synopsis: Extending the concept of indices for lists and other containers
test-bench-deps:
  base: '>=0'
  doctest: '>=0.8'
