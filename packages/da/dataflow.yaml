all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.3.0
- 0.5.4.0
- 0.6.0.0
- 0.6.1.0
- 0.7.1.0
- 0.7.3.0
author: Oskar WickstrÃ¶m (Sony Mobile Communications)
basic-deps:
  MissingH: '>=0'
  aeson: '>=0.9.0.1'
  base: '>=4 && <5'
  blaze-html: '>=0.8.0.2'
  bytestring: '>=0.10'
  containers: '>=0.4'
  dataflow: '>=0'
  filepath: '>=1.3.0'
  gitrev: '>=1.1.0'
  hastache: '>=0.6.1'
  markdown: '>=0.1.13.2'
  mtl: '>=2.2'
  parsec: '>=3.1.9'
  text: '>=1.0'
  vector: '>=0.11'
changelog: ''
changelog-type: ''
description: "# DataFlow\n\nRender graphs using a declarative markup. Currently supports
  DFD\n(http://en.wikipedia.org/wiki/Data_flow_diagram) and sequence diagrams\n(http://plantuml.sourceforge.net/sequence.html).\n\n![DFD
  Output](examples/webapp.dfd.png)\n\n## Usage\n\nThe following forms are supported
  by DataFlow.\n\n#### IDs\n\nAn ID can contain letters, numbers and underscores.
  It must start with a\nletter.\n\n<!--- Not dot code, but use dot code highlighter
  for .flow code -->\n```dot\nmy_id_contain_4_words\n```\n\n#### Strings\n\nString
  literals are written using double quotes.\n\n```dot\n\"this is a string and it can
  contain everything but double quotes and newlines\"\n```\n\n**NOTE!** Escaping characters
  inside strings is not supported at the moment.\n\n#### Text Blocks\n\nText blocks
  are special strings, enclosed in backticks, that are can span\nmultiple lines in
  the source document. The space characters before the first\nnon-space characters
  on each line are trimmed, regardless of the indentation.\n\n```dot\n`this is\n      a\n
  \ textblock`\n```\n\n... is converted to:\n\n```\nthis is\na\ntextblock\n```\n\n####
  Arrays\n\nArrays can contain other values (arrays, strings, text blocks).\n\n```dot\n[\"hello\",
  \"world\", [\"I\", \"am\", `nested\n                                here`]]\n```\n\n####
  Attributes\n\nAttributes are key-value pairs for diagrams and nodes that are used
  by\noutput renderers. Attributes are enclosed by curly brackets. For nodes that\ncan
  contain other nodes, attributes must appear before nodes.\n\nKeys have the same
  rules as IDs. Values can be strings or text blocks.\n\n```dot\n{\n  key1 = \"attr
  value\"\n  key2 = `attr\n          value`\n  key3 = [\"value1\", \"value2\"]\n}\n```\n\n####
  `diagram`\n\n`diagram` is the top-level form and must appear exactly once in a DataFlow\ndocument.
  It can contain attributes and nodes.\n\n```dot\ndiagram {\n  title = \"My diagram\"\n}\n```\n\n####
  `boundary`\n\nThe `boundary` form declares a TrustBoundary node that can contain\nattributes
  and other nodes. Boundaries are only allowed in the top-level\ndiagram and they
  must have unique IDs.\n\n```dot\ndiagram {\n  boundary my_boundary {\n    title
  = \"My System\"\n  }\n}\n```\n\n#### nodes: `io`, `function`, `database`\n\nThe
  `io`, `function` and `database` forms declare `InputOutput`, `Function` and\n`Database`
  nodes, respectively. The nodes have IDs and they can contain\nattributes. Empty
  attribute brackets can be omitted.\n\n```dot\ndiagram {\n  io thing1\n\n  io thing2
  {\n    title = \"Thing 2\"\n  }\n}\n\n```\n\n#### `->`\n\nThe `->` form declares
  a `Flow` between the nodes referenced by their\nIDs. It can contain attributes.
  Empty attribute brackets can be omitted.\nFlows must be declared after all nodes.\n\nNote
  that the arrow can be reversed as well (`<-`).\n\n```dot\ndiagram {\n  thing1 ->
  thing2\n\n  thing1 <- thing2 {\n    operation = \"Greet\"\n    data = \"A nice greeting\"\n
  \ }\n}\n```\n\n#### Comment\n\nComments are written using `/*` and `*/` and are
  ignored by the Reader. They're\nonly used for human consumption.\n\n```dot\ndiagram
  {\n  /* I can write\n   * whatever I\n   * want in here! */\n}\n```\n\n## Example\n\nThe
  image from the top of this README is rendered from the following DataFlow\ndocument.\n\n```dot\ndiagram
  {\n  title = \"Webapp\"\n\n  /* Some comment about this... */\n  threats = `\n    No
  particular threats at this point.\n\n    It's **extremely** safe.`\n\n  boundary
  {\n    title = \"Browser\"\n\n    function client {\n      title = \"Client\"\n
  \   }\n  }\n\n  boundary {\n    title = \"Amazon AWS\"\n\n    function server {\n
  \     title = \"Web Server\"\n    }\n    database logs {\n      title = \"Logs\"\n
  \   }\n  }\n  io analytics {\n    title = \"Google Analytics\"\n  }\n\n  client
  -> server {\n    operation = \"Request /\"\n    description = `User navigates with
  a browser to see some content.`\n  }\n  server -> logs {\n    operation = \"Log\"\n
  \   data = `The user\n            IP address.`\n    description = `Logged to a ELK
  stack.`\n  }\n  server -> client {\n    operation = \"Response\"\n    data = \"User
  Profile\"\n    description = `The server responds with some HTML.`\n  }\n  analytics
  <- client {\n    operation = \"Log\"\n    data = \"Page Navigation\"\n    description
  = `The Google Analytics plugin sends navigation\n                   data to Google.`\n
  \ }\n}\n```\n\n## Run DataFlow\n\nThe `dataflow` executable takes an output format
  and a DataFlow source document\nand writes the output to `stdout`.\n\n```bash\ndataflow
  (dfd|seq) FILE\n```\n\n## DFD\n\n![DFD Legend](examples/legend.dfd.png)\n\nTo use
  the *DFD* output you need [Graphviz](http://www.graphviz.org/) installed.\n\n```bash\ndataflow
  dfd webapp.flow | dot -Tpng > webapp.png\n```\n### Output\n\n![DFD Output](examples/webapp.dfd.png)\n\n##
  Sequence Diagram\n\n![Sequence Diagram Legend](examples/legend.seq.png)\n\nYou can
  use [PlantUML](http://plantuml.sourceforge.net/) to generate a sequence\ndiagram.\n\n```bash\ndataflow
  seq webapp.flow | java -Djava.awt.headless=true -jar plantuml.jar -tpng -pipe >
  webapp.png\n```\n\n### Output\n\n![Sequence Diagram Output](examples/webapp.seq.png)\n\n##
  Templating\n\nYou can use [Hastache](https://github.com/lymar/hastache) to output
  arbitrary\ntext with its Mustache-like templates.\n\n```bash\ndataflow template
  template.ha webapp.flow > webapp.html\n```\n\n### Built-in Functions and Values\n\n*
  `markdown` - Convert the attribute at the given key from Markdown to HTML.\n\n  ```mustache\n
  \ {{#markdown}}my_markdown_attr{{/markdown}}\n  ```\n\n* `html_linebreaks` - Replace
  `\\n` with `<br/>` elements in the attribute at\n  the given key, to retain linebreaks
  in HTML output.\n\n  ```mustache\n  {{#html_linebreaks}}my_formatted_attr{{/html_linebreaks}}\n
  \ ```\n\n* `filename_without_extension` - The input `.flow` file name with no path
  and\n  no extension. Useful when generating graphics and text/HTML with matching\n
  \ filenames (e.g. `my-flow.html` includes `my-flow.png`).\n\n  ```mustache\n  <img
  src=\"{{filename_without_extension}}.png\" />\n  ```\n\n* `flows` - a list of all
  the Flow nodes in the diagram. Attributes of the\n  flow is accessible inside the
  iteration scope, including a `number`.\n\n  ```mustache\n  <ol>\n  {{#flows}}\n
  \   <li>{{number}} - {{description}}</li>\n  {{/flows}}\n  </ol>\n  ```\n\nFor an
  example see [template.ha](examples/template.ha) and the output HTML in\n[webapp.html](examples/webapp.html).\n\n###
  Output\n\n![Sequence Diagram Output](examples/webapp.seq.png)\n\n## Makefile Example\n\nThe
  following Makefile finds `.flow` sources in `src` and generates DFDs, in\nSVG format,
  in `dist`.\n\n```make\nSOURCES=$(shell find src/*.flow)\nTARGETS=$(SOURCES:src/%.flow=dist/%.dfd.svg)\n\nK
  := $(if $(shell which dataflow),,$(error \"No dataflow executable in PATH. See https://github.com/SonyMobile/dataflow
  for install instructions)))\"))\n\ndist/%.dfd.svg: src/%.flow\n\t@dataflow dfd $<
  | dot -Tsvg > $@\n\ndfd: $(TARGETS)\n\nclean:\n  rm -f $(TARGETS)\n```\n\n## Build
  Instructions\n\nSee [BUILD.md](BUILD.md).\n\n## License\n\nBSD-3, see [LICENSE](LICENSE).\n"
description-type: markdown
hash: efba03a055cf659affd6eb62d2d56faa5bc96623b433f48e4ebe3d011ad72350
homepage: https://github.com/sonyxperiadev/dataflow
latest: 0.7.3.0
license-name: BSD-3-Clause
maintainer: oskar.wickstrom@gmail.com
synopsis: Generate Graphviz documents from a Haskell representation.
test-bench-deps:
  HUnit: '>=0'
  aeson: '>=0.9.0.1'
  base: '>=4 && <5'
  bytestring: '>=0.10'
  containers: '>=0.4'
  dataflow: '>=0'
  hspec: '>=2 && <3'
  parsec: '>=3.1.9'
  vector: '>=0.11'
