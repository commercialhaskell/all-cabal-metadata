all-versions:
- 0.1.0.0
author: Sorki
basic-deps:
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  data-prometheus: '>=0'
  lens: '>=0'
  mtl: '>=0'
  text: '>=0'
  transformers: '>=0'
  wreq: '>=0'
changelog: ''
changelog-type: ''
description: "# data-prometheus\n\nPure Prometheus metrics parser and builder.\n\n##
  Usage\n\n### Parsing metrics\n\n```haskell\nimport qualified Data.Prometheus\nimport
  qualified Network.Wreq\nimport qualified Data.ByteString.Lazy\n\nmain :: IO ()\nmain
  = do\n  r <- Network.Wreq.get \"http://localhost:9100/metrics\"\n  case Data.Prometheus.parseProm\n
  \       (Data.ByteString.Lazy.toStrict $ r ^. responseBody)\n  of\n    Right result
  -> print result\n    Left err -> putStrLn err\n```\n\n### Generating metrics\n\nIn
  monadic manner\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport Data.Prometheus\nimport
  qualified Data.Text.IO\n\nmain :: IO ()\nmain = do\n  Data.Text.IO.putStrLn\n  $
  runMetrics (metric \"readme\")\n  $ do\n    addMetric\n      \"subMetric\"\n      (Counter
  13)\n\n    logError \"something is not right\"\n\n    addMetric'\n      ( sub \"anotherSubMetric\"\n
  \     . sub \"gauge\"\n      . label \"key\" \"val\")\n      (Gauge 13)\n```\n\nor
  alternatively define `ToMetrics` instances for your data types.\n\nAbove example
  will output:\n\n```\n# HELP readme_gauge_anotherSubMetric \n# TYPE readme_gauge_anotherSubMetric
  gauge\nreadme_gauge_anotherSubMetric{key=\"val\"} 13.0\n# HELP readme_subMetric
  \n# TYPE readme_subMetric counter\nreadme_subMetric 13.0\n# ERROR something is not
  right\n```\n"
description-type: markdown
hash: 9cf1a8f29d6dbdf58445abbc8a4299d4ab10cc3a00e3e60cb7bfbfcc66221564
homepage: https://github.com/sorki/data-prometheus
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: srk@48.io
synopsis: Prometheus metrics text format
test-bench-deps:
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  data-prometheus: '>=0'
  hspec: '>=0'
  raw-strings-qq: '>=0'
