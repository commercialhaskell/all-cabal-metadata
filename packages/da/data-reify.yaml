homepage: http://ku-fpg.github.io/software/data-reify/
changelog-type: markdown
hash: 8643ca9fbd988fa8a9c423a2e6d7a3d64b72db35e589eaec1d2b14916eb359aa
test-bench-deps:
  data-reify: -any
  base: '>=4 && <5'
  hspec: ==2.*
  base-compat: '>=0.11 && <0.14'
maintainer: Andy Gill <andygill@ku.edu>
synopsis: Reify a recursive data structure into an explicit graph.
changelog: |
  ## 0.6.3 [2020.10.12]
  * Fix a bug introduced in `data-reify-0.6.2` where `reifyGraph` could return
    `Graph`s with duplicate key-value pairs.

  ## 0.6.2 [2020.09.30]
  * Use `HashMap`s and `IntSet`s internally for slightly better performance.

  ## 0.6.1
  * Fix warnings in GHC 7.10.

  ## 0.5
  * Merge the mono-typed and dynamic version again, by using 'DynStableName', an
    unphantomized version of StableName.

  ## 0.4
  * Use 'Int' as a synonym for 'Unique' rather than 'Data.Unique' for node ids,
    by popular demand.

  ## 0.3
  * Provide two versions of 'MuRef', the mono-typed version, for trees of a
    single type, and the dynamic-typed version, for trees of different types.

  ## 0.2
  * Use 'StableName's, making `data-reify` much faster.

  ## 0.1
  * Use unsafe pointer compares.
basic-deps:
  data-reify: -any
  base: ==4.*
  unordered-containers: -any
  containers: -any
  hashable: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- 0.6.1
- 0.6.3
author: Andy Gill
latest: 0.6.3
description-type: markdown
description: |-
  # data-reify [![Hackage version](https://img.shields.io/hackage/v/data-reify.svg?style=flat)](http://hackage.haskell.org/package/data-reify) [![Build Status](https://img.shields.io/travis/ku-fpg/data-reify.svg?style=flat)](https://travis-ci.org/ku-fpg/data-reify)

  `data-reify` provided the ability to turn recursive structures into explicit graphs. Many (implicitly or explicitly) recursive data structure can be given this ability, via a type class instance. This gives an alternative to using `Ref` for observable sharing.

  Observable sharing in general is unsafe, so we use the IO monad to bound this effect, but can be used safely even with `unsafePerformIO` if some simple conditions are met. Typically this package will be used to tie the knot with DSLs that depend of observable sharing, like Lava.

  Providing an instance for `MuRef` is the mechanism for allowing a structure to be reified into a graph, and several examples of this are provided.

  History: Version 0.1 used unsafe pointer compares. Version 0.2 of `data-reify` used StableNames, and was much faster. Version 0.3 provided two versions of `MuRef`, the mono-typed version, for trees of a single type, and the dynamic-typed version, for trees of different types. Version 0.4 used `Int` as a synonym for `Unique` rather than `Data.Unique` for node ids, by popular demand. Version 0.5 merged the mono-typed and dynamic version again, by using `DynStableName`, an unphantomized version of `StableName`.
license-name: BSD-3-Clause
