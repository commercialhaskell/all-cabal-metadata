all-versions:
- 0.1.0.0
author: Michael Chavinda, Junji Hashimoto
basic-deps:
  base: '>=4 && <5'
  bytestring: '>=0.11 && <0.13'
  containers: '>=0.6.7 && <0.9'
  dataframe: ^>=0.3
  persistent: '>=2.14 && <3'
  template-haskell: '>=2.0 && <3'
  text: '>=2.0 && <3'
  time: '>=1.12 && <2'
  transformers: '>=0.5 && <0.7'
  vector: ^>=0.13
changelog: ''
changelog-type: markdown
description: "# dataframe-persistent\n\nPersistent database integration for the Haskell
  DataFrame library.\n\n## Overview\n\nThis package provides seamless integration
  between the `dataframe` library and the `persistent` database library, allowing
  you to:\n\n- Load database entities directly into DataFrames\n- Perform DataFrame
  operations on database data  \n- Save DataFrame results back to the database\n-
  Work with type-safe database entities\n\n## Installation\n\nAdd to your `package.yaml`:\n\n```yaml\ndependencies:\n-
  dataframe ^>= 0.3\n- dataframe-persistent ^>= 0.1\n- persistent >= 2.14\n- persistent-sqlite
  >= 2.13  # or your preferred backend\n```\n\nOr to your `.cabal` file:\n\n```cabal\nbuild-depends:\n
  \ dataframe ^>= 0.3,\n  dataframe-persistent ^>= 0.1,\n  persistent >= 2.14,\n  persistent-sqlite
  >= 2.13\n```\n\n## Quick Start\n\n```haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE
  DerivingStrategies #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE GADTs #-}\n{-#
  LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-#
  LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE StandaloneDeriving
  #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE
  TypeFamilies #-}\n{-# LANGUAGE UndecidableInstances #-}\n\nimport Control.Monad.IO.Class
  (liftIO)\nimport Database.Persist\nimport Database.Persist.Sqlite\nimport Database.Persist.TH\nimport
  qualified DataFrame as DF\nimport qualified DataFrame.Functions as F\nimport DataFrame.IO.Persistent\nimport
  DataFrame.IO.Persistent.TH\nimport qualified Data.Vector as V\n\n-- Define your
  entities\nshare [mkPersist sqlSettings, mkMigrate \"migrateAll\"] [persistLowerCase|\nTestUser\n
  \   name Text\n    age Int\n    active Bool\n    deriving Show Eq\n|]\n\n-- Derive
  DataFrame instances\n$(derivePersistentDataFrame ''TestUser)\n\n-- Example usage\nmain
  :: IO ()\nmain = runSqlite \"example.db\" $ do\n    -- Run migrations\n    runMigration
  migrateAll\n    \n    -- Insert some test data\n    _ <- insert $ TestUser \"Alice\"
  25 True\n    _ <- insert $ TestUser \"Bob\" 30 False\n    _ <- insert $ TestUser
  \"Charlie\" 35 True\n    \n    -- Load from database\n    allUsersDF <- fromPersistent
  @TestUser []\n    liftIO $ putStrLn $ \"Loaded \" ++ show (nRows allUsersDF) ++
  \" users\"\n    \n    -- Load with filters\n    activeUsersDF <- fromPersistent
  @TestUser [TestUserActive ==. True]\n    liftIO $ putStrLn $ \"Active users: \"
  ++ show (nRows activeUsersDF)\n    \n    -- Process with DataFrame operations\n
  \   let youngUsers = DF.filter @Int \"age\" (< 30) allUsersDF\n        ages = V.toList
  $ DF.columnAsVector @Int \"age\" youngUsers\n    liftIO $ putStrLn $ \"Young user
  ages: \" ++ show ages\n    \n    -- Custom configuration\n    let config = defaultPersistentConfig
  \n                    { pcIdColumnName = \"user_id\"\n                    , pcIncludeId
  = True\n                    }\n    customDF <- fromPersistentWith @TestUser config
  []\n    liftIO $ putStrLn $ \"Columns with custom config: \" ++ show (DF.columnNames
  customDF)\n```\n\n## Features\n\n- **Type-safe conversions** between Persistent
  entities and DataFrames\n- **Template Haskell support** for automatic instance generation\n-
  **Configurable loading** with batch size and column selection\n- **Column name cleaning**
  - removes table prefixes automatically (e.g., `test_user_name` → `name`)\n- **Type
  preservation** - maintains proper types for Text, Int, Bool, Day, etc.\n- **Empty
  DataFrame support** - preserves column structure even with no data\n- **Support
  for all Persistent backends** (SQLite, PostgreSQL, MySQL, etc.)\n\n## Configuration
  Options\n\n```haskell\ndata PersistentConfig = PersistentConfig\n    { pcBatchSize
  :: Int        -- Number of records to fetch at once (default: 10000)\n    , pcIncludeId
  :: Bool       -- Whether to include entity ID as column (default: True)\n    , pcIdColumnName
  :: Text    -- Name for the ID column (default: \"id\")\n    }\n```\n\n## Advanced
  Usage\n\n### Custom Field Extraction\n\nYou can also extract fields from individual
  entities:\n\n```haskell\nlet user = TestUser \"Alice\" 25 True\n    columns = persistFieldsToColumns
  user\n-- Result: [(\"name\", SomeColumn [\"Alice\"]), (\"age\", SomeColumn [25]),
  (\"active\", SomeColumn [True])]\n```\n\n### Working with Vector Data\n\n```haskell\n--
  Extract specific column data\nlet names = V.toList $ DF.columnAsVector @Text \"name\"
  df\n    ages = V.toList $ DF.columnAsVector @Int \"age\" df\n    activeFlags = V.toList
  $ DF.columnAsVector @Bool \"active\" df\n```\n\n## Examples\n\nFor comprehensive
  examples and test cases, see:\n- [`tests/PersistentTests.hs`](tests/PersistentTests.hs)
  - Full test suite with examples\n- [`../docs/persistent_integration.md`](../docs/persistent_integration.md)
  - Detailed integration guide\n\n## Status\n\nThis package is **actively maintained**
  and tested. Current test coverage includes:\n- ✅ Entity loading with and without
  filters\n- ✅ Custom configuration options\n- ✅ DataFrame operations on Persistent
  data\n- ✅ Empty result set handling\n- ✅ Field extraction utilities\n- ✅ Multi-table
  relationships\n\n## Documentation\n\nFor detailed documentation, see:\n- [Main dataframe
  documentation](https://github.com/mchav/dataframe)\n- [Persistent integration guide](../docs/persistent_integration.md)\n\n##
  License\n\nGPL-3.0-or-later (same as the main dataframe package)"
description-type: markdown
hash: 19a57c1d19cc8fc0db303e891a6f16facf61ce9dfd7dea9cb0f7440dc7baf2ef
homepage: ''
latest: 0.1.0.0
license-name: GPL-3.0-or-later
maintainer: mschavinda@gmail.com
synopsis: Persistent database integration for the dataframe library
test-bench-deps:
  HUnit: ^>=1.6
  base: '>=4 && <5'
  dataframe: ^>=0.3
  dataframe-persistent: '>=0'
  monad-logger: '>=0.3 && <0.4'
  persistent: '>=2.14 && <3'
  persistent-sqlite: '>=2.13 && <3'
  resourcet: '>=0.1 && <2'
  temporary: '>=1.3 && <2'
  text: '>=2.0 && <3'
  time: '>=1.12 && <2'
  transformers: '>=0.5 && <0.7'
  vector: ^>=0.13
