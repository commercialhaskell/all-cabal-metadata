all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
author: winterland1989
basic-deps:
  base: '>=4.8 && <5'
changelog: |
  # v0.4.0.0

  * Add `:*:` type operator and pattern synonym for tuple.
  * Drop GHC < 7.10 support.

  # v0.3.0.0

  * Add `hasLens`, thanks @pavelkogan!

  # v0.2.1.0

  * Fix benchmarks.

  # v0.2.0.0

  * Change `get/modify` to `getter/modifier` to reduce naming collision, namely `get/modify` would collide with `MonadState`.
  * Add tuple instances up to 12 elements.
changelog-type: text
description: |
  data-has
  ========

  [![Hackage](https://img.shields.io/hackage/v/data-has.svg?style=flat)](http://hackage.haskell.org/package/data-has)
  [![Build Status](https://travis-ci.org/winterland1989/data-has.svg)](https://travis-ci.org/winterland1989/data-has)

  A simple extensible product system, a typical usage is to free you from considering how to layer your monad stack, because your can now extend your monad in one layer:

  ```haskell
   {-# LANGUAGE FlexibleContexts #-}

   -- in some library code
   ...
   logInAnyReaderHasLogger :: (Has Logger r, MonadReader r m) => LogString -> m ()
   logInAnyReaderHasLogger s = asks getter >>= logWithLogger s

   queryInAnyReaderHasSQL :: (Has SqlBackEnd r, MonadReader r m) => Query -> m a
   queryInAnyReaderHasSQL q = asks getter >>= queryWithSQL q
   ...

   -- now you want to use these effects together
   ...
   logger <- initLogger  ...
   sql <- initSqlBackEnd ...

   (`runReader` (logger, sql)) $ do
         ...
         logInAnyReaderHasLogger ...
         ...
         x <- queryInAnyReaderHasSQL ...
         ...
  ...
  ```
description-type: markdown
hash: 033f4719045061b3024ef9d52b60b0fdf77f0583b342ed53c666d5812b260653
homepage: https://github.com/winterland1989/data-has
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: winterland1989@gmail.com
synopsis: Simple extensible product
test-bench-deps:
  base: '>=0'
  criterion: '>=1.0.2.0'
  data-has: '>=0'
  transformers: '>=0'
