homepage: https://github.com/michalkonecny/aern2#readme
changelog-type: markdown
hash: 5bd43ef227be11fecc145133b3d571062220a5b5c52d8c50ff40d8db481d1fa6
test-bench-deps:
  integer-logarithms: -any
  reflection: -any
  aern2-mp: -any
  base: ==4.*
  hspec: -any
  collect-errors: '>=0.1.3'
  regex-tdfa: -any
  mixed-types-num: '>=0.5.8'
  deepseq: -any
  QuickCheck: -any
  cdar-mBound: '>=0.1.0.0'
  template-haskell: -any
maintainer: mikkonecny@gmail.com
synopsis: Multi-precision ball (interval) arithmetic
changelog: |
  # Change log for aern2-mp

  * v 0.2.7 2021-06-02
    * make WithCurrentPrec p (CN MPBall) a Field
    * simplify WithCurrentPrec, swap its parameters
  * v 0.2.6 2021-05-29
    * adapt to new ppow operations
  * v 0.2.5 2021-05-27
    * add generic multivalued select + Kleenean instances
    * WithCurrentPrec: add MixedTypesNumPrelude class instances
  * v 0.2.4 2021-05-26
    * use endpoint multiplication in integer power to avoid crossing 0
  * v 0.2.3 2021-05-22
    * make MPBall "Very inaccurate" a *potential* error (important for CReal accuracy queries)
  * v 0.2.2 2021-05-21
    * move Kleenean from mixed-types-num to here
  * v 0.2.1 2021-05-18
    * add WithAnyPrec existential type wrapper for WithCurrentPrec
  * v 0.2.0 2021-05-17
    * switch to new simplified collect-errors, mixed-types-num 0.5.0
      * got rid of EnsureCE etc.
      * not introducing CN wrapper unless at least one parameter is already CN
    * using CDAR backend only, no MPFR for now
    * WithCurrentPrec for specifying default precision via types
  * v 0.1.4 2019-03-19
    * CDAR-based Integer-only backend
      * needs the mBound branch of CDAR
    * adapts to mixed-types-num 0.3.2 (new divI, mod)
  * v 0.1.3.1 2018-11-21
    * small fixes, mainly documentation
  * v 0.1.3.0 2018-11-20
    * only one MPFR backend - rounded
    * reduce backend-specific code
  * v 0.1.2.0 2017-11-14
    * fix compilation with haskell-mpfr
  * v 0.1.1.0 2017-11-14
    * using Claude Heiland-Allen's Numeric.Rounded.Simple
  * v 0.1.0.1 2017-09-12
    * first release on Hackage
    * backends: hmpfr and (tweaked) rounded
basic-deps:
  integer-logarithms: -any
  reflection: -any
  base: ==4.*
  hspec: -any
  collect-errors: '>=0.1.3'
  regex-tdfa: -any
  mixed-types-num: '>=0.5.8'
  deepseq: -any
  QuickCheck: -any
  cdar-mBound: '>=0.1.0.0'
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
- 0.2.6.0
- 0.2.7.0
author: Michal Konecny
latest: 0.2.7.0
description-type: markdown
description: "# aern2-mp  <!-- omit in toc -->\n\nVariable-precision interval arithmetic\n\nAPI
  documentation available on the [Hackage page](https://hackage.haskell.org/package/aern2-mp).\n\n##
  Table of contents <!-- omit in toc -->\n\n- [1. Numeric data types](#1-numeric-data-types)\n-
  [2. Interval arithmetic with Prelude](#2-interval-arithmetic-with-prelude)\n- [3.
  Interval arithmetic with MixedTypesNum](#3-interval-arithmetic-with-mixedtypesnum)\n-
  [4. Internal types and backends](#4-internal-types-and-backends)\n- [5. Specifications
  and tests](#5-specifications-and-tests)\n\n## 1. Numeric data types\n\nThis package
  provides the following two data types:\n\n- `Dyadic`:  variable-precision floats
  with exact ring operations\n  \n- `MPBall`: variable-precision interval (float centre
  ± error bound) with field & elementary interval operations\n  \nThe type `MPBall`
  has instances of both [mixed-types-num](https://hackage.haskell.org/package/mixed-types-num)
  type classes such as `CanAdd`, `CanSqrt` as well as with traditional Prelude type
  classes such as `Ord`, `Num` and `Floating`.\nThe type `Dyadic` also has an appropriate
  subset of such instances.\n\nPackage [aern2-real](../aern2-real) provides an arithmetic
  of exact real numbers as converging lazy sequences of `MPBall`s of increasing precision.
  \ Exact real numbers offer additional convenience and readability to validated numeric
  programming.\n\n## 2. Interval arithmetic with Prelude\n\nFirst, let us load the
  package with **Prelude** operations:\n\n```Text\n$ stack ghci aern2-mp:lib --no-load
  --ghci-options AERN2.MP\n*AERN2.MP> import Prelude\n*AERN2.MP Prelude>\n```\n\nWe
  can work with `MPBall`s whose center is computed with a given **precision**, roughly
  corresponding to the number of significant bits:\n\n```Text\n...> pi100 = piBallP
  (prec 100)\n...> pi100\n[3.14159265358979323846264338... ± ~7.8886e-31 ~2^(-100)]\n\n...>
  pi10000 = piBallP (prec 10000)\n...> pi10000\n[3.14159265358979323846264338... ±
  ~0.0000 ~2^(-10000)]\n\n...> sin pi100\n[0.00000000000000000000000000... ± ~7.8925e-31
  ~2^(-99)]\n\n...> sin pi10000\n[0.00000000000000000000000000... ± ~0.0000 ~2^(-9999)]\n(0.08
  secs, 64,529,960 bytes)\n```\n\nThe Prelude power operator works only for integral
  types:\n\n```Text\n...> pi100 ^ 2\n[9.86960440108935861883449099... ± ~1.5777e-29
  ~2^(-95)]\n\n...> pi100 ^ pi100\n<interactive>:18:1: error:\n    • No instance for
  (Integral MPBall) arising from a use of ‘^’\n```\n\nNumerical order cannot be decided
  when the compared intervals overlap:\n\n```Text\n...> pi100 > 0\nTrue\n\n...> pi100
  == pi100\n*** Exception: Failed to decide equality of MPBalls.  If you switch to
  MixedTypesNumPrelude instead of Prelude, comparison of MPBalls returns Kleenean
  instead of Bool.\n```\n\n## 3. Interval arithmetic with MixedTypesNum\n\nWe see
  that some things do not work with Prelude. Let us use **MixedTypesNumPrelude** operations
  instead:\n\n```Text\n$ stack ghci aern2-mp:lib --no-load --ghci-options AERN2.MP\n*AERN2.MP>
  import MixedTypesNumPrelude\n*AERN2.MP MixedTypesNumPrelude>\n```\n\nWe get a more
  general power operator:\n\n```Text\n...> pi100 = piBallP (prec 100)\n...> pi10000
  = piBallP (prec 10000)\n\n...> pi100 ^ pi100\n[36.46215960720791177099082602...
  ± ~1.8696e-28 ~2^(-92)]\n\n...> pi10000 ^ pi10000\n[36.46215960720791177099082602...
  ± ~0.0000 ~2^(-9992)]\n(0.28 secs, 206,026,032 bytes)\n```\n\nInterval comparison
  now returns a `Kleenean` instead of `Bool`, supporting undecided comparisons:\n\n```Text\n...>
  pi100 > 0\nCertainTrue\n\n...> pi100 == pi100\nTrueOrFalse\n```\n\n## 4. Internal
  types and backends\n\nThe type `MPBall` internally uses the type:\n\n- `MPFloat`:
  arbitrary-precision floats with both upwards and downwards-rounded arithmetic operations
  such as `*^` and `*.`\n\nThe package uses [cdar-mBound](https://hackage.haskell.org/package/cdar-mBound),
  a fork of [cdar](https://github.com/jensblanck/cdar) as its backend for `Dyadic`
  and `MPFloat`.\n\nIn previous versions, there was an MPFR backend via [rounded](https://hackage.haskell.org/package/rounded).
  \ This may be added again in future.\n\n## 5. Specifications and tests\n\nThis package
  also provides a fairly complete hspec/QuickCheck specification of algebraic properties
  for the above types.  \n\nFor `MPFloat`, the properties are given mostly as approximate
  versions of algebraic equalities with a small rounding error tolerance.  \n\nFor
  `MPBall`, the properties are given mostly as (interval) set over-approximations
  of the usual algebraic equalities.\n"
license-name: BSD-3-Clause
