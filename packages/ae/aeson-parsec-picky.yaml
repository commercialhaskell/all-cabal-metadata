all-versions:
- 0.1.0.0
- 0.1.0.1
author: Matej Kollar
basic-deps:
  aeson: '>=0.10'
  base: '>=4.7 && <5.0'
  parsec: '>=3.0'
  scientific: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: |
  Changelog / Release Notes
  =========================

  Version 0.1.0.0
  ---------------

  Release date: **2015-11-09**

  * First public release.
changelog-type: markdown
description: "Picky JSON Parser\n=================\n\nJSON parser with nice error
  messages and little\nmore strict syntax (whitespace-wise). Based on\n[Aeson](http://hackage.haskell.org/package/aeson)
  and\n[Parsec](http://hackage.haskell.org/package/parsec).\n\nInteracting with user\n---------------------\n\nJSON
  being nice readable text-based format seems good candidate\nfor occasionally being
  created by a user. While Aeson provides really\nsuper-optimized parsers, their error
  messages are not very helpful.\nCreating larger JSON object by hand can be frustrating
  (especially)\nwhen you make even a small mistake.\n\nWhile this parser is not optimized
  for speed, it tries to produce\nnice and helpful error messages. (This library uses
  Parsec library.)\n\nAnother way to help your user is not allowing him or her to\nlearn
  wrong habbits. Just look at the following piece of code (be\nwarned - there are
  trailing spaces there):\n\n~~~ .json\n{ \"name\"   :   \n   ,   \n\n\"Hal\"\n}\n~~~\n\nThat
  (in my opinion) is something one would not like to see in files\nusers of his or
  hers tool produces. So why not forbid that? This\nlibrary does not allow such things
  while still allowing to make\nthe input more airy.\n\nComposability\n-------------\n\nThis
  library was written with re-usability in mind. Parsers it\nprovides do not consume
  any spaces before of after corresponding\nvalues and therefore are more easily reusable
  for your own projects.\n\nParsing to Aeson data types\n---------------------------\n\nAeson
  library is nice to work with with large ecosystem of useful\nlibraries. So why not
  join them and avoid reinventing the wheel?\n\nExample Use\n-----------\n\n### Script\n\n~~~
  { .haskell }\n{-# LANGUAGE DeriveGeneric #-}\nmodule Main (main) where\n\nimport
  GHC.Generics\nimport System.Environment (getArgs)\n\nimport Data.Aeson hiding (eitherDecode)\nimport
  Data.Aeson.Parser.Parsec.Picky (eitherDecode)\n\nimport Data.Text.IO as Text (readFile)\n\ndata
  Contact = Contact\n    { name :: String\n    , address :: String\n    } deriving
  (Generic, Show)\n\ninstance FromJSON Contact\n\nprintContacts :: [Contact] -> IO
  ()\nprintContacts = mapM_ print\n\nmain' :: [String] -> IO ()\nmain' [filename]
  = Text.readFile filename\n    >>= process . eitherDecode filename\n    where\n    process
  = either putStrLn printContacts\nmain' _ = print \"Usage: script [CONTACTS_FILE]\"\n\nmain
  :: IO ()\nmain = getArgs >>= main'\n~~~\n\n### Input file\n\n~~~ { .json }\n[ {
  \"name\": \"Alice\"\n  , \"address\": \"Kansas\"\n  }\n]\n~~~\n\nMotivation\n----------\n\nWhy
  another JSON parser? Some internal tool for\nJSON RPC testing used simple format
  that re-used JSON parsers.\nIt was already re-written few times and reasons were:\n\n*
  Bad error messages for people who were writing testing scripts.\n* Those people
  were able to do horrible stuff (trailing spaces, ...).\n* Some parsers that used
  Parsec (and produced helpful error messages)\n  were producing non-aeson data structures
  and we already use\n  aeson on some places so we had option to be more heterogeneous\n
  \ or make useless conversions.\n\nNo parser I was aware of seemed to solve these
  issues.\n"
description-type: markdown
hash: 4b3602599bae8ec6de990cfaa1c96da74c131f76d5cf2f0fd5701154aba43d75
homepage: https://github.com/FPBrno/aeson-parsec-picky
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: 208115@mail.muni.cz
synopsis: Alternative JSON parser based on Parsec and Aeson
test-bench-deps: {}
