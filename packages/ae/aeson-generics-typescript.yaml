homepage: ''
changelog-type: ''
hash: f4a48944a2190626dcdba9857c79836b1cdd75b409ecb15684ad8aaa2534637f
test-bench-deps: {}
maintainer: info@Platonic.Systems
synopsis: Generates TypeScript definitions that match Generic Aeson encodings
changelog: ''
basic-deps:
  bytestring: '>=0.11.5 && <0.12'
  string-interpolate: '>=0.3.2 && <0.4'
  split: '>=0.2.4 && <0.3'
  base: '>=4.17.2 && <4.18'
  time: '>=1.12.2 && <1.13'
  hspec: '>=2.11.7 && <2.12'
  text: '>=2.0.2 && <2.1'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.17 && <1.7'
  containers: '>=0.6.7 && <0.7'
  random: '>=1.2.1 && <1.3'
  QuickCheck: '>=2.14.3 && <2.15'
  aeson: '>=2.1.2 && <2.2'
  directory: '>=1.3.7 && <1.4'
all-versions:
- 0.0.0.1
author: Platonic.Systems
latest: 0.0.0.1
description-type: markdown
description: |
  # Aeson Generics TypeScript

  This project generates TypeScript type definitions using GHC.Generics, that match Aeson instances generated the same way.

  ```haskell
  data Foo = ...
    deriving stock (Generic)
    deriving anyclass (ToJSON, FromJSON, TypeScriptDefinition)
  ```

  Is all it takes to have your TypeScript type definition for your data type. Now you can obtain the TypeScript definition as a string like so.

  ```haskell
  fooTSDef :: String
  fooTSDef = getPrintedDefinition $ Proxy @Foo
  ```

  ## Example

  You can see many examples in the tests. One provided here for documentation purposes:

  ```haskell
  data Sum a b = Foyst a
               | Loser b
    deriving stock (Eq, Generic, Ord, Show)
    deriving anyclass (ToJSON, TypeScriptDefinition)

  -- getPrintedDefinition must have a concrete type. If you want to retain
  -- generic type variables in TypeScript, use `TSGenericVar` to make the
  -- type concrete.
  sumTSDef :: String
  sumTSDef = getPrintedDefinition $ Proxy @(Sum (TSGenericVar "a") (TSGenericVar "b"))
  ```

  will generate

  ```TypeScript
  // Defined in Data.Aeson.Generics.TypeScript.Types of main
  type Sum<A,B> = Foyst<A> | Loser<B>;
  interface Foyst<A> {
    readonly tag: "Foyst";
    readonly contents: A;
  }
  interface Loser<B> {
    readonly tag: "Loser";
    readonly contents: B;
  }
  ```
license-name: BSD-3-Clause
