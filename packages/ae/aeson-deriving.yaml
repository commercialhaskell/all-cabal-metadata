all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.1.1
- 0.1.1.2
author: Cliff Harvey
basic-deps:
  aeson: '>=1.2 && <1.6'
  base: '>=4.7 && <5'
  regex-tdfa: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
changelog: |
  # Changelog for aeson-deriving

  ### 0.1.2

  * Added `EmptyObject` newtype for single-constructor types to be encoded as an empty JSON object.

  ### 0.1.1

  * Added `TextWithPattern` newtype for Text validated against a regex pattern [PR 2](https://github.com/fieldstrength/aeson-deriving/pull/2)

  ## 0.1.0

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# aeson-deriving\n\n[![Build Status](https://travis-ci.org/fieldstrength/aeson-deriving.svg?branch=master)](https://travis-ci.org/fieldstrength/aeson-deriving)\n[![Hackage](https://img.shields.io/hackage/v/aeson-deriving.svg)](http://hackage.haskell.org/package/aeson-deriving)\n\nDefine
  JSON encoding and decoding behavior in a unified way with [DerivingVia](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#deriving-via).
  This ensures the instances for the two `aeson` type classes stay in sync and eliminates
  much needless boilerplate, besides supporting many extra features.\n\n## Uses and
  examples\n\n### Basic encoding options & common patterns\n\nAeson's generics support
  governs the basic mapping between Haskell definitions and the JSON format.\nThis
  functionality, along with its tunable parameters, can be specified with the `GenericEncoded`
  newtype.\n\n```haskell\ntype MyEncoding = GenericEncoded\n  '[ ConstructorTagModifier
  := SnakeCase  -- extensible function support\n  , FieldLabelModifier :=\n      [
  SnakeCase, DropSuffix \"_\" ]       -- functions can be composed\n  , SumEncoding
  := TaggedObject \"type\" \"contents\"\n  ]\n\n\ndata User = User\n  { firstName
  :: Text\n  , id_       :: UserId\n  , companyId :: CompanyId\n  }\n  deriving stock
  (Generic, Show)\n  deriving (FromJSON, ToJSON)\n    via MyEncoding User\n\ndata
  Document = Document\n  { name      :: Text\n  , id_       :: Int64\n  , companyId
  :: CompanyId\n  , parts     :: [SubDocument]\n  }\n  deriving stock (Generic, Show)\n
  \ deriving (FromJSON, ToJSON)\n    via MyEncoding Document\n\n-- >>> encode (User
  \"jake\" 1 29)\n-- { \"type\": \"user\", \"first_name\": \"jake\", \"id\": 1, \"company_id\":
  29}\n```\n\n### Modifier newtypes\n\n#### Constrant Fields\n\n```haskell\ndata Transaction
  = Transaction\n  { transactionId :: UUID }\n  deriving stock (Generic, Show)\n  deriving
  (FromJSON, ToJSON) via\n    WithConstantFieldsOut\n     '[ \"version\" := \"1.0\"\n
  \     , \"system_info\" := \"\U0001F44D\"\n      ]\n      (MyEncoding Transaction)\n```\n\nNote:
  Some newtypes that modify the instances come in an inbound and outbound variant.
  For example `WithConstantFields` is defined as the composition of `WithConstantFieldsIn`
  and `WithConstantFieldsOut`.\n\n#### Constant Objects\n\nSometimes you may need
  an entire object of constant fields, with no information passing to the haskell
  representation. This is modeled as a single-value type and can also be used with
  the `WithConstantFields` newtype, as long as the base type is wrapped in the `EmptyObject`
  newtype (because otherwise unit types do not serialize to the empty object by default).\n\n```haskell\ndata
  Requirements = Requirements\n  deriving (Show, Eq, Generic)\n  deriving (FromJSON,
  ToJSON) via\n    WithConstantFields\n     '[ \"api_version\" := \"2.0\"\n      ,
  \"check_performed\" := 'True\n      ]\n      (EmptyObject Requirements)\n```\n\n####
  Apply arbitrary functions before encoding/decoding\n\n##### Example: Special treatment
  for magic values\n\n```haskell\ndata Feedback = Feedback\n  { comment :: Text }\n
  \ deriving stock (Generic, Show)\n  deriving (FromJSON, ToJSON) via\n    ModifyFieldIn
  \"comment\"\n      (\"booo!\" ==> \"boo-urns!\")\n      (MyEncoding Feedback)\n\n\n--
  x ==> y  maps the value x to y and leaves others unchanged\n-- Implement your own
  instances of `KnownJSONFunction` for other behavior\n\n```\n\n### Preventing infinite
  loops\n\nNewtypes that modify an inner type class instance must be careful not to
  do so in an infinitely recursive way. Here the inner type should use the generic-based
  instance, rather than reference the instance being defined.\n\nThis package employs
  a custom compiler error to prevent this very easy mistake.\n\n### Improved error
  messages for sums of records\n\nSee `RecordSumEncoded` documentation.\n\nTo be expanded...\n"
description-type: markdown
hash: e7be3f84464baa72c3bd61d60b9035e00637b6fb88cf464322ce773340963b6b
homepage: https://github.com/fieldstrength/aeson-deriving#readme
latest: 0.1.1.2
license-name: MIT
maintainer: cs.hbar+hs@gmail.com
synopsis: data types for compositional, type-directed serialization
test-bench-deps:
  aeson: '>=1.2 && <1.6'
  aeson-deriving: '>=0'
  base: '>=4.7 && <5'
  hedgehog: '>=0'
  regex-tdfa: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
