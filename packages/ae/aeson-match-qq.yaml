homepage: https://github.com/supki/aeson-match-qq#readme
changelog-type: markdown
hash: 5139ccadf408f2266cab4f8f62a90cad15bac856bc65d2019cd9790af126d0a2
test-bench-deps:
  base: '>=4.14 && <5'
  unordered-containers: -any
  hspec: -any
  aeson-match-qq: -any
  aeson-qq: -any
  aeson: -any
maintainer: matvey.aksenov@gmail.com
synopsis: Declarative JSON matchers.
changelog: |
  1.6.0
  =====

    * Clarified ans simplified API some more.

  1.5.3
  =====

    * Minuscule Haddock improvements

  1.5.2
  =====

    * Add `prettyError`, a pretty printer for `Error`s (https://github.com/supki/aeson-match-qq/pull/24)

  1.5.1
  =====

    * GHC 9.2 compatibility

  1.5.0
  =====

    * Streamlined API.

    * Sprinkled some CPP to support clients that have not been made compatible
      with Aeson 2.0 yet, so that they do not have to use a separate release (1.3.x)

  1.4.3
  =====

    * Improved matching errors for embedded Haskell values (https://github.com/supki/aeson-match-qq/pull/18)

    * Separate error types for type- and value- level mismatches (https://github.com/supki/aeson-match-qq/pull/18)

    * Case insensitive strings (https://github.com/supki/aeson-match-qq/pull/17)

  1.4.2
  =====

    * Unordered arrays (https://github.com/supki/aeson-match-qq/pull/15)

  1.4.1
  =====

    * Proper Unicode support (https://github.com/supki/aeson-match-qq/pull/14)

  1.4.0
  =====

    * Aeson 2.0 compatibility

  1.3.0
  =====

    * GHC 9.0 compatibility

  1.2.0
  =====

    * Fixed a couple of parsing edge cases (https://github.com/supki/aeson-match-qq/pull/11)

  1.1.0
  =====

    * Optionally typed holes (https://github.com/supki/aeson-match-qq/pull/9)

    * Fixed spurious validation errors (https://github.com/supki/aeson-match-qq/issues/7)

  1.0.0
  =====

    * Initial release.
basic-deps:
  either: -any
  bytestring: -any
  case-insensitive: -any
  base: '>=4.14 && <5'
  unordered-containers: -any
  text: -any
  containers: -any
  attoparsec: -any
  scientific: -any
  haskell-src-meta: -any
  pretty: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- 1.0.0
- 1.1.0
- 1.2.0
- 1.2.1
- 1.2.2
- 1.3.0
- 1.3.1
- 1.3.2
- 1.4.0
- 1.4.1
- 1.4.2
- 1.4.3
- 1.5.0
- 1.5.1
- 1.5.2
- 1.5.3
- 1.6.0
author: ''
latest: 1.6.0
description-type: markdown
description: "aeson-match-qq\n==============\n\n[![Build status](https://circleci.com/gh/supki/aeson-match-qq.svg?style=svg)](https://circleci.com/gh/supki/aeson-match-qq)\n\nDeclarative
  JSON matchers.\n\nMotivation\n----------\n\nWhen testing an HTTP service that spouts
  JSON documents, it's often inconvenient to write out the whole response as\nthe
  expected value.  Sometimes, you only care about a couple specific properties, or
  simply want to ensure that the\nresponse has certain structure.  This package provides
  a quasiquoter to define declarative matchers using a variation\nof the familiar
  syntax.\n\nFeatures\n--------\n\n### Basic JSON construction\n\nSince this package
  is heavily inspired by [aeson-qq][0], the parser tries to follow its behavior and
  has support for\noptional quotes for simple keys and the `#{exp}` syntax for Haskell
  expression interpolation. It currently does not support\nvariable keys though and
  there are no plans to add them.\n\n### Spread-like syntax for arrays and objects\n\nThis
  syntax allows you to match only the part of the structure you care about:\n\n`[match|
  [1, 2, 3, ...] |]` matches arrays starting with `[1, 2, 3]`  \n`[match| {foo: 1,
  bar: 2, ...} |]` matches objects that are supersets of `{foo: 1, bar: 2}`\n\n###
  Holes\n\nHoles are placeholders that match anything:\n\n`[match| _ |]` matches any
  JSON document  \n`[match| {foo: _} |]` matches any object that has the `foo` property.\n\nIf
  a hole is named, its value will be returned from `match`\n\n`[match| {foo: {bar:
  _n} |]` will return `{n: 4}` if matched with `{foo: {bar: 4}}`\n\n### Case-insensitive
  strings\n\nA small addition to the JSON syntax that allows string matches that ignore
  case:\n\n`[match| (ci) \"foo\" |]` matches any of `\"Foo\"`, `\"fOO\"`, or `\"FOO\"`.\n\n###
  Unordered arrays\n\nA small addition to the JSON syntax that allows array matches
  that ignore the order\nof the elements, for example:\n\n`[match| (unordered) [1,2,3]
  |]` matches `[3, 1, 2]`.\n\n  [0]: https://hackage.haskell.org/package/aeson-qq\n"
license-name: BSD-2-Clause
