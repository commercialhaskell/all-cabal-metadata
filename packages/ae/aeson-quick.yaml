homepage: https://github.com/ssadler/aeson-quick#readme
changelog-type: markdown
hash: e4db9e1f517248e0e29b72e82cfbfa1facfd9b7be8edbc5cb8435f221fa95d5d
test-bench-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  criterion: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  attoparsec: -any
  tasty: -any
  deepseq: -any
  QuickCheck: -any
  aeson-quick: -any
  microlens: -any
  aeson: -any
  template-haskell: -any
  vector: -any
maintainer: scott@scottsadler.de
synopsis: Quick JSON extractions with Aeson
changelog: |+
  # Changelog for aeson-quick

  ## 0.2.0

  * Support Aeson gte 2.0.0.0 as well as lte 1.5.6.0
  * QuasiQuoter for structure: [quick|...|]
  * QuasiQuoter for json literal: [jsonlit|...|]
  * Tests with QuickCheck
  * new README.md
  * Rename Structure to Quick
  * New, better defined build function
  * Array bounds for deconstruction

basic-deps:
  base: '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  attoparsec: -any
  deepseq: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- 0.1.1
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
- 0.1.2.1
- 0.1.3
- 0.2.0
author: Scott Sadler
latest: 0.2.0
description-type: markdown
description: |
  # aeson-quick

  [![hackage](https://img.shields.io/hackage/v/aeson-quick.svg)](https://hackage.haskell.org/package/aeson-quick) [![ci](https://github.com/ssadler/aeson-quick/actions/workflows/haskell.yml/badge.svg)](https://github.com/ssadler/aeson-quick/tree/0.2.0)

  `aeson-quick` is a small DSL on top of [aeson](https://hackage.haskell.org/package/aeson) for casual and concise JSON construction and deconstruction.

  In essence, it allows you to remove the Objects in a json `Value` using a simple key lookup syntax, so that the `FromJSON` typeclass can do the rest of the work, and it can go the other way, too.

  `aeson-quick` structures can be defined using the `fromString` instance, or using the QuasiQuoter `quick` for compile time validation, ie: `[quick|{foo}|]`.

  ## Syntax

  ## Transformations

  | Operation                       | Json Value                      | Quick expression &nbsp; &nbsp; | Haskell type     |
  |---------------------------------|---------------------------------|----------------------|------------------|
  | Parse any value                 | ``*``                           | ``.``                | ``a``            |
  | Key lookup                      | ``{"foo": *}``                  | ``{foo}``            | ``a``            |
  | Optional key                    | ``{}``                          | ``{foo?}``           | ``Maybe a``      |
  | Multiple keys                   | ``{"foo": *, "bar": *}``        | ``{foo,bar}``        | ``(a, b)``       |
  | Nested object                   | ``{"foo": {"bar": *}}``         | ``{foo:{bar}}``      | ``b``            |
  | Complex object                  | ``[{"foo": *, "bar": [*, *]}]`` &nbsp; &nbsp; | ``[{a,b:[.]}]``      | ``[(a, [c])]``   |
  | Array                           | ``[*, *]``                      | ``[.]``              | ``[a]``          |
  | Array lookup (deconstruct only) | ``[*, *]``                      | ``[.]1``             | ``a``            |
  | Array range (deconstruct only)  | ``[*, *]``                      | ``[.]1-``            | ``[a]``          |

  ## Examples:

  #### Deconstruction:

  ```Haskell
  > let value = [jsonlit|{"foo": true, "bar": [0, 1], "baz": [{"foo": true}, {}, {"foo": false}]}|]

  > value .! "{foo}" :: Bool
  True

  > value .! "{foo, bar}" :: (Bool, [Int])
  (True, [0, 1])

  > value .! "{baz:[{foo?}]}" :: [Maybe Bool]
  [Just True, Nothing, Just False]

  -- value is [1,2,3]
  > value .! "[.]1" :: Int
  2
  > value .! "[.]1-" :: [Int]
  [2,3]
  > value .! "[.]0-2" :: [Int]
  [1,2]
  > value .! "[.]4" :: Maybe Int
  Nothing
  ```

  #### Construction:

  ```Haskell

  > "." .% True
  true

  > "{foo}" .% True
  {"foo": true}

  > "[{foo}]" .% [1,2,3]
  [{"foo":1},{"foo":2},{"foo":3}]

  > "{foo:[{bar?}]}" .% [Just 1, Nothing]
  {"foo":[{"bar":1},{}]}
  ```


  ## Performance

  Performance is extremely similar to using Aeson functions directly. See Writeup.md for more details.
license-name: BSD-3-Clause
