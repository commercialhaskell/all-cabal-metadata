homepage: https://github.com/haskell/aeson
changelog-type: markdown
hash: 5720fffb7289366029f2b7940e9f8b22a1b4c282f0cef4710685b1d14d76bdc7
test-bench-deps:
  bytestring: '>=0.10.4'
  integer-logarithms: '>=1 && <1.1'
  these: -any
  data-fix: -any
  text-short: -any
  base: -any
  tasty-golden: -any
  time: -any
  Diff: '>=0.4 && <0.5'
  unordered-containers: -any
  text: -any
  generic-deriving: '>=1.10 && <1.15'
  strict: -any
  filepath: -any
  dlist: -any
  base-orphans: '>=0.5.3 && <0.9'
  tagged: -any
  time-compat: -any
  containers: -any
  OneTuple: -any
  quickcheck-instances: '>=0.3.26.1 && <0.4'
  base-compat: -any
  ghc-prim: '>=0.2'
  tasty-quickcheck: -any
  hashable: -any
  tasty-hunit: -any
  base16-bytestring: -any
  attoparsec: -any
  tasty: -any
  uuid-types: -any
  scientific: -any
  QuickCheck: '>=2.14.2 && <2.15'
  aeson: -any
  template-haskell: -any
  vector: -any
  directory: -any
maintainer: Adam Bergmark <adam@bergmark.nl>
synopsis: Fast JSON parsing and encoding
changelog: "For the latest version of this document, please see [https://github.com/haskell/aeson/blob/master/changelog.md](https://github.com/haskell/aeson/blob/master/changelog.md).\n\n###
  2.0.2.0\n\n* Add `IsList (KeyMap v)` instance.\n* Add `toMapText` and `fromMapText`
  to `Data.Aeson.KeyMap`.\n* Add `ShortText` instances\n* Add `Solo` instances\n\n###
  2.0.1.0\n\n* Add `FromJSON KeyMap` instance.\n* Make `ordered-keymap` on by default.\n\n###
  2.0.0.0\n\n* Remove forced `-O2` and then unneeded `fast` flag.\n  Also remove most
  of `INLINE` pragmas.\n  In the effect, `aeson` compiles almost twice as fast.\n\n
  \ To get `fast` compilation effect cabal-install users may specify `optimization:
  False`.\n\n* Make map type used by Object abstract so the underlying implementation
  can\n  be modified, thanks to Callan McGill\n\n* Add `ordered-keymap` flag allowing
  to change the underlying implementation of object `KeyMap`.\n\n* Drop GHC-7 support\n\n*
  Remove Data.Aeson.Encode module\n\n* `Double` and `Float` infinities are encoded
  as `\"+inf\"` and `\"-inf\"`.\n  Change `To/FromJSONKey` instances to use `\"+inf\"`
  and `\"-inf\"` too.\n\n* `FromJSON ()` and `FromJSON (Proxy tag)` accept any JSON
  value.\n\n\n### 1.5.6.0\n* Make `Show Value` instance print object keys in lexicographic
  order.\n\n### 1.5.5.1\n* Fix a bug in `FromJSON QuarterOfYear` instance.\n\n###
  1.5.5.0\n* Add instances for `Month`, `Quarter` and `QuarterOfYear` (from `time-1.11`),
  thanks to Oleg Grenrus.\n\n* The aeson repository has been moved to the haskell
  github organization!\n\n#### 1.5.4.1\n* Use `Text.Encoding.decodeLatin1` to speed
  up ASCII string decoding, thanks to Dmitry Ivanov.\n* Support `bytestring 0.11.*`
  and `th-abstraction 0.4.*`, thanks to Oleg Grenrus.\n\n### 1.5.4.0\n\n* Add instances
  for `ToJSONKey` and `FromJSONKey` to `Const`, thanks to Dan Fithian.\n* Add support
  for template-haskell 2.17, thanks to Galen Huntington.\n* Documentation typo fix,
  thanks to Jean-Baptiste Mazon.\n\n### 1.5.3.0\n\n* Add instances for types in `strict`
  and `data-fix` packages, thanks to Oleg Grenrus.\n* CPP cleanup, thanks to Oleg
  Grenrus.\n* Instances for `dlist`'s `Data.DList.DNonEmpty.DNonEmpty`, thanks to
  Oleg Grenrus.\n\n### 1.5.2.0\n\n* Add `Ord Value` instance, thanks to Oleg Grenrus.\n*
  Export `rejectUnknownFields` from `Data.Aeson`\n\n### 1.5.1.0\n\n* Add instances
  for `these`, thanks to Oleg Grenrus.\n\n## 1.5.0.0\n\n* Fix bug in `rejectUnknownFields`
  not respecting `fieldLabelModifier`, thanks to Markus Schirp.\n* `GFromJSON` members
  are no longer exported from `Data.Aeson(.Types)`, if you are using `gParseJSON`
  consider switching to `gParseJSON'`, thanks to Oleg Grenrus.\n* Aeson no longer
  accepts unescaped control characters, thanks to Oleg Grenrus.\n* Remove `CoerceText`
  since GHC >=7.8 has `Coercible`, thanks to Oleg Grenrus.\n* Rename the `GToJSON`
  class to `GToJSON'` and expose it, thanks to Oleg Grenrus.\n\nClosed tickets: https://github.com/bos/aeson/milestone/21\n\n\n####
  1.4.7.1\n\n* GHC 8.10 compatibility, thanks to Ryan Scott.\n\n### 1.4.7.0\n\nLong
  overdue release (once again), so there's quite a bit of stuff\nincluded even though
  it's a \"minor\" release. Big thanks to all the\ncontributors, the project would
  not exist without you!\n\nSpecial thanks to Oleg Grenrus and Xia Li-Yao for reviewing
  tons\nof stuff.\n\nNew stuff:\n\n* Add `rejectUnknownFields` to Options which rejects
  unknown fields on\n  deserialization. Useful to find errors during development,
  but\n  enabling this should be considered a breaking change as previously\n  accepted
  inputs may now be rejected. Thanks to rmanne.\n\n```\ninstance FromJSON Foo where\n
  \ parseJSON = gParseJSON defaultOptions { rejectUnknownFields = True }\n```\n\n*
  `FromJSON` instance of `Ratio a` now parses numbers in addtion to\n  standard `{numerator=...,
  denumerator=...}` encoding. Thanks to\n  Aleksey Khudyakov.\n\n* Add more information
  to parse errors, including a sample of the\n  surrounding text. Hopefully this will
  lead to less \"Failed to read:\n  satisfy\" confusion! Thanks to Sasha Bogicevic.
  We expect some\n  downstream test suites to break because of this, apologies in\n
  \ advance. Hopefully you will like the improvement anyway :-)\n\n* Add `parseFail`
  to `Data.Aeson.Types`. `parseFail = fail` but\n  doesn't require users to know about
  `MonadFail`. Thanks to Colin\n  Woodbury.\n\n* Make Template Haskell type family
  detection smarter when deriving\n  `ToJSON1` instances, thanks to Ryan Scott.\n\n*
  Optimize string parsing for the common case of strings without\n  escapes, thanks
  to Yuras.\n\n\nMisc:\n\n* Clean up compiler warnings and switch from base-compat
  to\n  base-compat-batteries. Thanks to Colin Woodbury & Oleg Grenrus.\n\n* Clarification
  & fixes to documentation regarding treatment of Maybe fields, thanks to Roman Cheplyaka.\n\n*
  Add documentation for internal development workflows. Thanks to Guru\n  Devanla.\n\n*
  Drop support for GHC < 7.8. We've chosen to support older GHCs as\n  long as it
  doesn't prevent us from adding new features, but now it\n  does!  Thanks to Oleg
  Grenrus for the patch.\n\n* Allow generic-deriving 1.13 in test suite.\n\n* Some
  DRY fixes thanks to Mark Fajkus.\n\n### 1.4.6.0\n\n* Provide a clearer error message
  when a required tagKey for a constructor is missing, thanks to Guru Devanla.\n  The
  error message now looks like this: `Error in $: parsing Types.SomeType failed, expected
  Object with key \"tag\" containing one of [\"nullary\",\"unary\",\"product\",\"record\",\"list\"],
  key \"tag\" not found`\n\n* Add `formatPath` and `formatRelativePath` functions
  to turn a `JSONPath` into a `String`, thanks to Robbie McMichael\n\n\n### 1.4.5.0\n\n*
  Expose `(<?>)`, `JSONPath` and `JSONPathElement(..)` from `Data.Aeson.Types`. Previously
  only available through internal modules. Thanks to Luke Clifton.\n\n* Support for
  base-compat 0.11, thanks to Ryan Scott.\n\n* Travis build for GHC 8.8, thanks to
  Oleg Grenrus.\n\n### 1.4.4.0\n\n**New features**:\n\n* Adds a parameterized parser
  `jsonWith` that can be used to choose how to handle duplicate keys in objects, thanks
  to Xia Li-Yao.\n\n* Add generic implementations of `FromJSONKey` and `ToJSONKey`,
  thanks to Xia Li-Yao. Example:\n\n```haskell\ndata Foo = Bar\n  deriving Generic\n\nopts
  :: JSONKeyOptions\nopts = defaultJSONKeyOptions { keyModifier = toLower }\n\ninstance
  ToJSONKey Foo where\n  toJSONKey = genericToJSONKey opts\n\ninstance FromJSONKey
  Foo where\n  fromJSONKey = genericFromJSONKey opts\n```\n\n**Minor**:\n* aeson now
  uses `time-compat` instead of `time-locale-compat`, thanks to Oleg Grenrus.\n* Prepare
  for `MonadFail` breakages in GHC 8.8, thanks to Oleg Grenrus.\n* Require `bytestring
  >= 0.10.8.1` for newer GHCs to avoid build failures, thanks to Oleg Grenrus.\n*
  Support `primitive 0.7.*`, thanks to Adam Bergmark.\n* Allow `semigroups 0.19.*`
  and `hashable 1.3.*`, thanks to Oleg Grenrus.\n* Fix a typo in the error message
  when parsing `NonEmpty`, thanks to Colin Woodbury.\n* Document surprising behavior
  when using `omitNothingFields` with type variables, thanks to Xia Li-Yao.\n\n**Internal
  changes**:\n* Code cleanup by Oleg Grenrus\n* Fix dependencies of the benchmarks
  on older GHC's, thanks to Xia Li-Yao.\n\n### 1.4.3.0\n* Improve error messages for
  FromJSON in existing instances and GHC Generic implementation. Thanks to Xia Li-Yao
  & Igor Pashev.\n* Tweak error-reporting combinators and their documentation. Thanks
  to Xia Li-Yao.\n  * `typeMismatch` is now about comparing JSON types (i.e., the
  expected and actual names of the Value constructor).\n  * `withObject` and other
  `with*` combinators now also mention the JSON types they expect\n  * New `unexpected`
  and `prependFailure` combinators.\n* Add `Contravariant` `ToJSONKeyFunction` instance.
  Thanks to Oleg Grenrus.\n* Add `KeyValue` instance for `Object`. Thanks to Robert
  Hensing.\n* Improve performance when parsing certain large numbers, thanks to Oleg
  Grenrus.\n* Add `Data.Aeson.QQ.Simple` - A limited version of aeson-qq. Thanks to
  Oleg Grenrus.\n* Exposes internal helper functions like `<?>`, `JSONPath`, and `parseIndexedJSON`
  from `Data.Aeson` module. Thanks to Abid Uzair.\n* Better error messages when there
  are syntax errors parsing objects and arrays. Thanks to Fintan Halpenny.\n* Support
  building with `th-abstraction-0.3.0.0` or later. Thanks to Ryan Scott.\n\n### 1.4.2.0\n\n*
  Add `Data.Aeson.QQ.Simple` which is a simpler version of the `aeson-qq` package,
  it does not support interpolation, thanks to Oleg Grenrus.\n* Add `Contravariant
  ToJSONKeyFunction` instance, thanks to Oleg Grenrus.\n* Add `KeyValue Object` instance,
  thanks to Robert Hensing\n* Improved performance when parsing large numbers, thanks
  to Oleg Grenrus.\n\n### 1.4.1.0\n\n* Optimizations of generics, thanks to Rémy Oudompheng,
  here are some numbers for GHC 8.4:\n  * Compilation time: G/BigProduct.hs is 25%
  faster, G/BigRecord.hs is 2x faster.\n  * Runtime performance: BigRecord/toJSON/generic
  and BigProduct/encode/generic are more than 2x faster.\n* Added To/FromJSON instances
  for `Void` and Generics's `V1`, thanks to Will Yager\n* Added To/FromJSON instances
  for `primitive`'s `Array`, `SmallArray`, `PrimArray` and `UnliftedArray`, thanks
  to Andrew Thad.\n* Fixes handling of `UTCTime` wrt. leap seconds , thanks to Adam
  Schønemann\n* Warning and documentation fixes thanks to tom-bop, Gabor Greif, Ian
  Jeffries, and Mateusz Curyło.\n\n## 1.4.0.0\n\nThis release introduces bounds on
  the size of `Scientific` numbers when they are converted to other arbitrary precision
  types that do not represent them efficiently in memory.\n\nThis means that trying
  to decode a number such as `1e1000000000` into an `Integer` will now fail instead
  of using a lot of memory. If you need to represent large numbers you can add a newtype
  (preferably over `Scientific`) and providing a parser using `withScientific`.\n\nThe
  following instances are affected by this:\n* `FromJSON Natural`\n* `FromJSONKey
  Natural`\n* `FromJSON Integer`\n* `FromJSONKey Integer`\n* `FromJSON NominalDiffTime`\n\nFor
  the same reasons the following instances & functions have been removed:\n* Remove
  `FromJSON Data.Attoparsec.Number` instance. Note that `Data.Attoparsec.Number` is
  deprecated.\n* Remove deprecated `withNumber`, use `withScientific` instead.\n\nFinally,
  encoding integral values with large exponents now uses scientific notation, this
  saves space for large numbers.\n\n#### 1.3.1.1\n\n* Catch 0 denominators when parsing
  Ratio\n\n### 1.3.1.0\n\n* Fix bug in generically derived `FromJSON` instances that
  are using `unwrapUnaryRecords`, thanks to Xia Li-yao\n* Allow base-compat 0.10.*,
  thanks to Oleg Grenrus\n\n## 1.3.0.0\n\nBreaking changes:\n* `GKeyValue` has been
  renamed to `KeyValuePair`, thanks to Xia Li-yao\n* Removed unused `FromJSON` constraint
  in `withEmbeddedJson`, thanks to Tristan Seligmann\n\nOther improvements:\n* Optimizations
  of TH toEncoding, thanks to Xia Li-yao\n* Optimizations of hex decoding when using
  the default/pure unescape implementation, thanks to Xia Li-yao\n* Improved error
  message on `Day` parse failures, thanks to Gershom Bazerman\n* Add `encodeFile`
  as well as `decodeFile*` variants, thanks to Markus Hauck\n* Documentation\tfixes,
  thanks to Lennart Spitzner\n* CPP cleanup, thanks to Ryan Scott\n\n### 1.2.4.0\n\n*
  Add `Ord` instance for `JSONPathElement`, thanks to Simon Hengel.\n\n\n### 1.2.3.0\n\n*
  Added `withEmbeddedJSON` to help parse JSON embedded inside a JSON string, thanks
  to Jesse Kempf.\n* Memory usage improvements to the default (pure) parser, thanks
  to Jonathan Paugh. Also thanks to Neil Mitchell & Oleg Grenrus for contributing
  a benchmark.\n* `omitNothingFields` now works for the `Option` newtype, thanks to
  Xia Li-yao.\n* Some documentation fixes, thanks to Jonathan Paug & Philippe Crama.\n\n###
  1.2.2.0\n\n* Add `FromJSON` and `ToJSON` instances for\n  * `DiffTime`, thanks to
  Víctor López Juan.\n  * `CTime`, thanks to Daniel Díaz.\n* Fix handling of fractions
  when parsing Natural, thanks to Yuriy Syrovetskiy.\n* Change text in error messages
  for Integral types to make them follow the common pattern, thanks to Yuriy Syrovetskiy.\n*
  Add missing `INCOHERENT` pragma for `RecordToPair`, thanks to Xia Li-yao.\n* Everything
  related to `Options` is now exported from `Data.Aeson`, thanks to Xia Li-yao.\n*
  Optimizations to not escape text in clear cases, thanks to Oleg Grenrus.\n* Some
  documentation fixes, thanks to Phil de Joux & Xia Li-yao.\n\n### 1.2.1.0\n\n* Add
  `parserThrowError` and `parserCatchError` combinators, thanks to Oleg Grenrus.\n\n*
  Add `Generic` instance for `Value`, thanks to Xia Li-yao.\n\n* Fix a mistake in
  the 1.2.0.0 changelog, the `cffi` flag is disabled by default! Thanks to dbaynard.\n\n##
  1.2.0.0\n\n* `tagSingleConstructors`, an option to encode single-constructor types
  as tagged sums was added to `Options`. It is disabled by default for backward compatibility.\n\n*
  The `cffi` flag is now turned off (`False`) by default, this means C FFI code is
  no longer used by default. You can flip the flag to get C implementation.\n\n* The
  `Options` constructor is no longer exposed to prevent new options from being breaking
  changes, use `defaultOptions` instead.\n\n* The contents of `GToJSON` and `GToEncoding`
  are no longer exposed.\n\n* Some INLINE pragmas were removed to avoid GHC running
  out of simplifier ticks.\n\n### 1.1.2.0\n\n* Fix an accidental change in the format
  of `deriveJSON`. Thanks to Xia Li-yao!\n\n* Documentation improvements regarding
  `ToJSON`, `FromJSON`, and `SumEncoding`. Thanks to Xia Li-yao and Lennart Spitzner!\n\n###
  1.1.1.0\n\n* Added a pure implementation of the C FFI code, the C FFI code. If you
  wish to use the pure haskell version set the `cffi` flag to `False`. This should
  make aeson compile when C isn't available, such as for GHCJS. Thanks to James Parker
  & Marcin Tolysz!\n\n* Using the `fast` flag can no longer cause a test case to fail.
  As far as we know this didn't affect any users of the library itself. Thanks to
  Xia Li-yao!\n\n## 1.1.0.0\n\n* Added instances for `UUID`.\n\n* The operators for
  parsing fields now have named aliases:\n  -  `.:` => `parseField`\n  -  `.:?` =>
  `parseFieldMaybe`\n  -  `.:!` => `parseFieldMaybe'`\n  - These functions now also
  have variants with explicit parser functions: `explicitParseField`, `explicitParseFieldMaybe`,
  \"explicitParseFieldMaybe'`\nThanks to Oleg Grenrus.\n\n* `ToJSONKey (Identity a)`
  and `FromJSONKey (Identity a)` no longer require the unnecessary `FromJSON a` constraint.
  Thanks to Oleg Grenrus.\n\n* Added `Data.Aeson.Encoding.pair'` which is a more general
  version of `Data.Aeson.Encoding.pair`. Thanks to Andrew Martin.\n\n* `Day`s BCE
  are properly encoded and `+` is now a valid prefix for `Day`s CE. Thanks to Matt
  Parsons.\n\n* Some commonly used ToJSON instances are now specialized in order to
  improve compile time. Thanks to Bartosz Nitka.\n\n\n[JSONTestSuite](https://github.com/nst/JSONTestSuite)
  cleanups, all\nmotivated by tighter RFC 7159 compliance:\n\n* The parser now rejects
  numbers for which\n  [the integer portion contains a leading zero](https://github.com/bos/aeson/commit/3fb7c155f2255482b1b9566ec5c1eaf9895d630e).\n*
  The parser now rejects numbers for which\n  [a decimal point is not followed by
  at least one digit](https://github.com/bos/aeson/commit/ecfca35a45286dbe2bbaf5f62354be393bc59b66),\n*
  The parser now rejects documents that contain [whitespace outside the\n  set {space,
  newline, carriage return, tab}](https://github.com/bos/aeson/commit/8ef622c2ad8d4a109884e17c2792238a2a320e44).\n\nOver
  90% of JSONTestSuite tests currently pass. The remainder can be\ncategorised as
  follows:\n\n* The string parser is strict with Unicode compliance where the RFC\n
  \ leaves room for implementation-defined behaviour (tests prefixed\n  with \"`i_string_`\".
  (This is necessary because the `text` library\n  cannot accommodate invalid Unicode.)\n\n*
  The parser does not (and will not) support UTF-16, UTF-32, or byte\n  order marks
  (BOM).\n* The parser accepts unescaped control characters, even though the RFC\n
  \ states that control characters must be escaped. (This may change at\n  some point,
  but doesn't seem important.)\n\n#### 1.0.2.1\n\n* Fixes a regression where a bunch
  of valid characters caused an\n  \"Invalid UTF8-Stream\" error when decoding. Thanks
  to Vladimir\n  Shabanov who investigated and fixed this.\n\n### 1.0.2.0\n\n* Fixes
  a regression where it was no longer possible to derive\n  instances for types such
  as `data T a = T { f1 :: a, f2 :: Maybe a\n  }`.\n\nThanks to Sean Leather for fixing
  this, and to Ryan Scott for helping out.\n\n### 1.0.1.0\n\n* Decoding performance
  has been significantly improved (see\n  https://github.com/bos/aeson/pull/452).
  Thanks to @winterland1989.\n\n* Add `ToJSON`/`FromJSON` instances for newtypes from\n
  \ `Data.Semigroup`: `Min`, `Max`, `First`, `Last`, `WrappedMonoid`,\n  `Option`.
  Thanks to Lennart Spitzner.\n\n* Make the documentation for `.:!` more accurate.
  Thanks to Ian Jeffries.\n\n# 1.0.0.0\n\nMajor enhancements:\n\n* Introduced new
  `FromJSONKey` and `ToJSONKey` type classes that are\n  used to encode maps without
  going through HashMap. This also allows arbitrary\n  serialization of keys where
  a string-like key will encode into an object and\n  other keys will encode into
  an array of key-value tuples.\n\n* Added higher rank classes: `ToJSON1`, `ToJSON2`,
  `FromJSON1`, and\n  `FromJSON2`.\n\n* Added `Data.Aeson.Encoding` with functions
  to safely write `ToJSON`\n  instances using `toEncoding`.\n\nOther enhancements:\n\n*
  A Cabal `fast` flag was added to disable building with optimizations. This drastically
  speeds up compiling both aeson ***and*** libraries using aeson so it is recommended
  to enable it during development. With cabal-install you can `cabal install aeson
  -ffast` and with stack you can add a flag section to your stack.yaml:\n```\nflags:\n
  \ aeson:\n    fast: true\n```\n\n* Added list specific members to `ToJSON` and `FromJSON`
  classes. In\n  the same way `Read` and `Show` handle lists specifically. This\n
  \ removes need for overlapping instances to handle `String`.\n\n* Added a new `sumEncoding`
  option `UntaggedValue` which prevents\n  objects from being tagged with the constructor
  name.\n\n* JSONPaths are now tracked in instances derived with template-haskell\n
  \ and generics.\n\n* Get rid of redundancy of JSONPath error messages in nested
  records.\n\n  `eitherDecode \"{\\\"x\\\":{\\\"a\\\": [1,2,true]}}\" :: Either String
  Y`\n  previously yielded\n  `Error in $.x.a[2]: failed to parse field\" x: failed
  to parse field a: expected Int, encountered Boolean`\n  and now yields `Error in
  $.x.a[2]: expected Int, encountered Boolean\"`.\n\n  Some users might prefer to
  insert `modifyFailure` themselves to\n  customize error messages, which previously
  prevented the use of\n  `(.:)`.\n\n* Backwards compatibility with `bytestring-0.9`
  using the\n  `bytestring-builder` compatibility package.\n\n* Export `decodeWith`,
  `decodeStrictWith`, `eitherDecodeWith`, and\n  `eitherDecodeStrictWith` from `Data.Aeson.Parser`.
  This allows\n  decoding using explicit parsers instead of using `FromJSON`\n  instances.\n\n*
  Un-orphan internal instances to render them in haddocks.\n\nOther changes:\n\n*
  Integral `FromJSON` instances now only accept integral\n  values. E.g. parsing `3.14`
  to `Int` fails instead of succeeding\n  with the value `3`.\n\n* Over/underflows
  are now caught for bounded numeric types.\n\n* Remove the `contents` field encoding
  with `allNullaryToStringTag = False`,\n  giving us `{ \"tag\" : \"c1\" }` instead
  of `{ \"tag\" : \"c1\", contents : [] }`.\n  The contents field is optional when
  parsing so this is only a breaking\n  change for ToJSON instances.\n\n* Fix a bug
  where `genericToEncoding` with `unwrapUnaryRecords = True`\n  would produce an invalid
  encoding: `\"unwrap\\\":\"\"`.\n\n* `ToJSON` instances using `genericToEncoding`
  and `omitNothingFields`\n  no longer produce invalid JSON.\n\n* Added instances
  for `DList`, `Compose`, `Product`, `Sum`.\n\n### 0.11.2.0\n\n* Enable `PolyKinds`
  to generalize `Proxy`, `Tagged`, and `Const` instances.\n* Add `unsafeToEncoding`
  in `Data.Aeson.Types`, use with care!\n\n#### 0.11.1.4\n\n* Fix build with `base
  >= 4.8` and `unordered-containers < 0.2.6`.\n\n#### 0.11.1.3\n\n* Fix build on TH-less
  GHCs\n\n#### 0.11.1.2\n\n* Fix build with `base < 4.8` and `unordered-containers
  < 0.2.6`.\n* Add missing field in docs for `defaultOptions`.\n\n#### 0.11.1.1\n\n*
  Fixes a bug where the hashes of equal values could differ.\n\n### 0.11.1.0\n\nThe
  only changes are added instances.\n\nThese are new:\n* `ToJSON a => ToJSON (NonEmpty
  a)`\n* `FromJSON a => FromJSON (NonEmpty a)`\n* `ToJSON (Proxy a)`\n* `FromJSON
  (Proxy a)`\n* `ToJSON b => ToJSON (Tagged a b)`\n* `FromJSON b => FromJSON (Tagged
  a b)`\n* `ToJSON a => ToJSON (Const a b)`\n* `FromJSON a => FromJSON (Const a b)`\n\nThese
  are now available for older GHCs:\n* `ToJSON Natural`\n* `FromJSON Natural`\n\n#
  0.11.0.0\n\nThis release should be close to backwards compatible with aeson 0.9.\n\nIf
  you are upgrading from aeson 0.10 it might be easier to go back in\nhistory to the
  point you were still using 0.9.\n\n**Breaking changes**:\n\n* Revert `.:?` to behave
  like it did in 0.9. If you want the 0.10\n  behavior use `.:!` instead.\n\n* Revert
  JSON format of `Either` to 0.9, `Left` and `Right` are now\n  serialized with an
  initial uppercase letter. If you want the names\n  in lowercase you can add a newtype
  with an instance.\n\n* All `ToJSON` and `FromJSON` instances except for `[a]` are
  no longer\n  `OVERLAPPABLE`. Mark your instance as `OVERLAPPING` if it overlaps\n
  \ any of the other aeson instances.\n\n* All `ToJSON` and `FromJSON` instances except
  for `[Char]` are no\n  longer incoherent, this means you may need to replace your\n
  \ incoherent instances with a newtyped instance.\n\n**Additions**:\n\n* Introduce
  `.:!` that behaves like `.:?` did in 0.10.\n\n* Allow `HH:MM` format for `ZonedTime`
  and `UTCTime`.\n  This is one of the formats allowed by\n  [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Times).\n\n*
  Added `ToJSON` and `FromJSON` instances for the\n  `Version`, `Ordering`, and `Natural`
  types.\n\n**Bug fixes**:\n\n* JSONPath identifiers are now escaped if they contain
  invalid characters.\n\n* Fixed JSONPath messages for Seq to include indices.\n\n*
  Fixed JSONPath messages for Either to include `left`/`right`.\n\n* Fix missing quotes
  surrounding time encodings.\n\n* Fix #293: Type error in TH when using `omitNothingFields
  = True`.\n\n**Compatibility**:\n\n* Various updates to support GHC 8.\n\n\n# 0.10.0.0\n\n##
  Performance improvements\n\n* Direct encoding via the new `toEncoding` method is
  over 2x faster\n  than `toJSON`.  (You must write or code-gen a `toEncoding`\n  implementation
  to unlock this speedup.  See below for details.)\n\n* Improved string decoding gives
  a 12% speed win in parsing\n  string-heavy JSON payloads (very common).\n\n* Encoding
  and decoding of time-related types are 10x faster (!!) as a\n  result of bypassing
  `Data.Time.Format` and the arbitrary-precision\n  `Integer` type.\n\n* When using
  `toEncoding`, `[Char]` can be encoded without a conversion to\n  `Text`.  This is
  fast and efficient.\n\n* Parsing into an `Object` is now 5% faster and more\n  allocation-efficient.\n\n##
  SUBTLE API CHANGES, READ CAREFULLY\n\nWith the exception of long-deprecated code,
  the API changes below\n**should be upwards compatible** from older versions of `aeson`.
  \ If you run\ninto upgrade problems, please file an issue with details.\n\n* The
  `ToJSON` class has a new method, `toEncoding`, that allows\n  direct encoding from
  a Haskell value to a lazy bytestring without\n  construction of an intermediate
  `Value`.\n\n  The performance benefits of direct encoding are significant: more\n
  \ than 2x faster than before, with less than 1/3 the memory usage.\n\n  To preserve
  API compatibility across upgrades from older versions of\n  this library, the default
  implementation of `toEncoding` uses\n  `toJSON`.  You will *not* see any performance
  improvement unless you\n  write an implementation of `toEncoding`, which can be
  very simple:\n\n  ```haskell\n  instance ToJSON Coord where\n    toEncoding = genericToEncoding
  defaultOptions\n  ```\n\n  (Behind the scenes, the `encode` function uses `toEncoding`
  now, so\n  if you implement `toEncoding` for your types, you should see a\n  speedup
  immediately.)\n\n  If you use Template Haskell or GHC Generics to auto-generate
  your\n  `ToJSON` instances, you'll benefit from fast toEncoding\n  implementations
  for free!\n\n* When converting from a `Value` to a target Haskell type, `FromJSON`\n
  \ instances now provide much better error messages, including a\n  complete JSON
  path from the root of the object to the offending\n  element.  This greatly eases
  debugging.\n\n* It is now possible to use Template Haskell to generate `FromJSON`\n
  \ and `ToJSON` instances for types in data families.\n\n* If you use Template Haskell
  or generics, and used to use the\n  `camelTo` function to rename fields, the new
  `camelTo2` function is\n  smarter.  For example, `camelTo` will rename `CamelAPICase`
  to\n  `camelapi_case` (ugh!), while `camelTo2` will map it to\n  `camel_api_case`
  (yay!).\n\n* New `ToJSON` and `FromJSON` instances for the following time-related\n
  \ types: `Day`, `LocalTime`.\n\n* `FromJSON` `UTCTime` parser accepts the same values
  as for `ZonedTime`,\n  but converts any time zone offset into a UTC time.\n\n* The
  `Result` type is now an instance of `Foldable` and `Traversable`.\n\n* The `Data.Aeson.Generic`
  module has been removed. It was deprecated in\n  late 2013.\n\n* GHC 7.2 and older
  are no longer supported.\n\n* The instance of `Monad` for the `Result` type lacked
  an implementation\n  of `fail` (oops).  This has been corrected.\n\n* Semantics
  of `(.:?)` operator are changed. It's doesn't anymore accept\n  present `Null` value.\n\n*
  Added `(Foldable t, ToJSON a) => ToJSON (t a)` overlappable instance.\n  You might
  see `No instance for (Foldable YourPolymorphicType) arising from a\n  use of ‘.=’`
  -errors due this change.\n\n# 0.9.0.1\n\n* A stray export of `encodeToBuilder` got
  away!\n\n# 0.9.0.0\n\n* The `json` and `json'` parsers are now synonyms for `value`
  and\n  `value'`, in conformance with the looser semantics of RFC 7159.\n\n* Renamed
  `encodeToByteStringBuilder` to the more compact\n  `encodeToBuilder`.\n\n# 0.8.1.1\n\n*
  The dependency on the `unordered-containers` package was too lax,\n  and has been
  corrected.\n\n# 0.8.1.0\n\n* Encoding a `Scientific` value with a huge exponent
  is now handled\n  efficiently.  (This would previously allocate a huge\n  arbitrary-precision
  integer, potentially leading to a denial of\n  service.)\n\n* Handling of strings
  that contain backslash escape sequences is\n  greatly improved.  For a pathological
  string containing almost a\n  megabyte of consecutive backslashes, the new implementation
  is 27x\n  faster and uses 42x less memory.\n\n* The `ToJSON` instance for `UTCTime`
  is rendered with higher\n  (picosecond) resolution.\n\n* The `value` parser now
  correctly handles leading whitespace.\n\n* New instances of `ToJSON` and `FromJSON`
  for `Data.Sequence` and\n  `Data.Functor.Identity`.  The `Value` type now has a
  `Read` instance.\n\n* `ZonedTime` parser ordering now favours the standard `JSON`
  format,\n  increasing efficiency in the common case.\n\n* Encoding to a `Text.Builder`
  now escapes `'<'` and `'>'` characters,\n  to reduce XSS risk.\n\n# 0.8.0.2\n\n*
  Fix `ToJSON` instance for 15-tuples (see #223).\n\n# 0.8.0.1\n\n* Support `time-1.5`.\n\n#
  0.8.0.0\n\n* Add `ToJSON` and `FromJSON` instances for tuples of up to 15\n  elements.\n\n#
  0.7.1.0\n\n* Major compiler and library compatibility changes: we have dropped\n
  \ support for GHC older than 7.4, `text` older than 1.1, and\n  `bytestring` older
  than 0.10.4.0.  Supporting the older versions had\n  become increasingly difficult,
  to the point where it was no longer\n  worth it.\n\n# 0.7.0.0\n\n* The performance
  of encoding to and decoding of bytestrings have both\n  improved by up to 2x, while
  also using less memory.\n\n* New dependency: the `scientific` package lets us parse
  floating point\n  numbers more quickly and accurately.\n\n* `eitherDecode`, `decodeStrictWith`:
  fixed bugs.\n\n* Added `FromJSON` and `ToJSON` instances for `Tree` and `Scientific`.\n\n*
  Fixed the `ToJSON` instances for `UTCTime` and `ZonedTime`.\n\n# 0.6 series\n\n*
  Much improved documentation.\n\n* Angle brackets are now escaped in JSON strings,
  to help avoid XSS\n  attacks.\n\n* Fixed up handling of nullary constructors when
  using generic\n  encoding.\n\n* Added `ToJSON`/`FromJSON` instances for:\n\n  *
  The `Fixed` class\n  * ISO-8601 dates: `UTCTime`, `ZonedTime`, and `TimeZone`\n\n*
  Added accessor functions for inspecting `Value`s.\n\n* Added `eitherDecode` function
  that returns an error message if\n  decoding fails.\n\n# 0.5 to 0.6\n\n* This release
  introduces a slightly obscure, but\n  backwards-incompatible, change.\n\n  In the
  generic APIs of versions 0.4 and 0.5, fields whose names\n  began with a `\"_\"`
  character would have this character removed.  This\n  no longer occurs, as it was
  both buggy and surprising\n  (https://github.com/bos/aeson/issues/53).\n\n* Fixed
  a bug in generic decoding of nullary constructors\n  (https://github.com/bos/aeson/issues/62).\n\n#
  0.4 to 0.5\n\n* When used with the UTF-8 encoding performance improvements\n  introduced
  in version 0.11.1.12 of the `text` package, this release\n  improves `aeson`'s JSON
  encoding performance by 33% relative to\n  `aeson` 0.4.\n\n  As part of achieving
  this improvement, an API change was necessary.\n  The `fromValue` function in the
  `Data.Aeson.Encode` module now uses\n  the `text` package's `Builder` type instead
  of the `blaze-builder`\n  package's `Builder` type.\n\n# 0.3 to 0.4\n\n* The new
  `decode` function complements the longstanding `encode`\n  function, and makes the
  API simpler.\n\n* New examples make it easier to learn to use the package\n  (https://github.com/bos/aeson/tree/master/examples).\n\n*
  Generics support\n\n  `aeson`'s support for data-type generic programming makes
  it\n  possible to use JSON encodings of most data types without writing\n  any boilerplate
  instances.\n\n  Thanks to Bas Van Dijk, `aeson` now supports the two major schemes\n
  \ for doing datatype-generic programming:\n\n  * the modern mechanism, built into
  GHC itself\n\t(http://www.haskell.org/ghc/docs/latest/html/users_guide/generic-programming.html)\n\n
  \ * the older mechanism, based on SYB (aka \"scrap your\n\tboilerplate\")\n\n  The
  modern GHC-based generic mechanism is fast and terse: in fact,\n  its performance
  is generally comparable in performance to\n  hand-written and TH-derived `ToJSON`
  and `FromJSON` instances.  To\n  see how to use GHC generics, refer to `examples/Generic.hs`.\n\n
  \ The SYB-based generics support lives in `Data.Aeson.Generic` and is\n  provided
  mainly for users of GHC older than 7.2.  SYB is far slower\n  (by about 10x) than
  the more modern generic mechanism.  To see how\n  to use SYB generics, refer to
  `examples/GenericSYB.hs`.\n\n* We switched the intermediate representation of JSON
  objects from\n  `Data.Map` to `Data.HashMap` which has improved type conversion\n
  \ performance.\n\n* Instances of `ToJSON` and `FromJSON` for tuples are between
  45% and 70%\n  faster than in 0.3.\n\n* Evaluation control\n\n  This version of
  aeson makes explicit the decoupling between\n  *identifying* an element of a JSON
  document and *converting* it to\n  Haskell.  See the `Data.Aeson.Parser` documentation
  for details.\n\n  The normal `aeson` `decode` function performs identification\n
  \ strictly, but defers conversion until needed.  This can result in\n  improved
  performance (e.g. if the results of some conversions are\n  never needed), but at
  a cost in increased memory consumption.\n\n  The new `decode'` function performs
  identification and conversion\n  immediately.  This incurs an up-front cost in CPU
  cycles, but\n  reduces reduce memory consumption.\n"
basic-deps:
  semialign: '>=1.2 && <1.3'
  bytestring: '>=0.10.8.1 && <0.12'
  these: '>=1.1 && <1.2'
  witherable: '>=0.4.1 && <0.5'
  data-fix: '>=0.3 && <0.4'
  text-short: '>=0.1.4 && <0.2'
  base-compat-batteries: '>=0.10.0 && <0.13'
  base: '>=4.9.0.0 && <5'
  time: '>=1.6.0.1 && <1.13'
  indexed-traversable: '>=0.1.1 && <0.2'
  unordered-containers: '>=0.2.10.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  strict: '>=0.4 && <0.5'
  dlist: '>=0.8.0.4 && <1.1'
  th-abstraction: '>=0.3.0.0 && <0.5'
  tagged: '>=0.8.6 && <0.9'
  time-compat: '>=1.9.6 && <1.10'
  containers: '>=0.5.7.1 && <0.7'
  OneTuple: '>=0.3.1 && <0.4'
  ghc-prim: '>=0.5.0.0 && <0.9'
  contravariant: '>=1.4.1 && <1.6'
  hashable: '>=1.3.5.0 && <1.5'
  attoparsec: '>=0.13.2.2 && <0.15'
  deepseq: '>=1.4.2.0 && <1.5'
  uuid-types: '>=1.0.3 && <1.1'
  scientific: '>=0.3.7.0 && <0.4'
  template-haskell: '>=2.11.0.0 && <2.19'
  primitive: '>=0.7.0.1 && <0.8'
  vector: '>=0.12.0.1 && <0.13'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
- 0.3.2.4
- 0.3.2.5
- 0.3.2.6
- 0.3.2.7
- 0.3.2.8
- 0.3.2.9
- 0.3.2.10
- 0.3.2.11
- 0.3.2.12
- 0.3.2.13
- 0.3.2.14
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
- 0.6.1.0
- 0.6.2.0
- 0.6.2.1
- 0.7.0.4
- 0.7.0.6
- 0.8.0.2
- 0.8.1.0
- 0.8.1.1
- 0.9.0.0
- 0.9.0.1
- 0.11.0.0
- 0.11.1.0
- 0.11.1.1
- 0.11.1.2
- 0.11.1.3
- 0.11.1.4
- 0.11.2.0
- 0.11.2.1
- 0.11.3.0
- 1.0.0.0
- 1.0.1.0
- 1.0.2.0
- 1.0.2.1
- 1.1.0.0
- 1.1.1.0
- 1.1.2.0
- 1.2.0.0
- 1.2.1.0
- 1.2.2.0
- 1.2.3.0
- 1.2.4.0
- 1.3.0.0
- 1.3.1.0
- 1.3.1.1
- 1.4.0.0
- 1.4.1.0
- 1.4.2.0
- 1.4.3.0
- 1.4.4.0
- 1.4.5.0
- 1.4.6.0
- 1.4.7.0
- 1.4.7.1
- 1.5.0.0
- 1.5.1.0
- 1.5.2.0
- 1.5.3.0
- 1.5.4.0
- 1.5.4.1
- 1.5.5.0
- 1.5.5.1
- 1.5.6.0
- 2.0.0.0
- 2.0.1.0
- 2.0.2.0
author: Bryan O'Sullivan <bos@serpentine.com>
latest: 2.0.2.0
description-type: markdown
description: |
  # Welcome to `aeson`

  [![Hackage](https://img.shields.io/hackage/v/aeson.svg)](https://hackage.haskell.org/package/aeson) [![Build Status](https://github.com/haskell/aeson/workflows/Haskell-CI/badge.svg)](https://github.com/haskell/aeson/actions?query=workflow%3AHaskell-CI)

  aeson is a fast Haskell library for working with JSON data.

  # Join in!

  We are happy to receive bug reports, fixes, documentation enhancements,
  and other improvements.

  Please report bugs via the
  [github issue tracker](http://github.com/haskell/aeson/issues).

  Master [git repository](http://github.com/haskell/aeson):

  * `git clone git://github.com/haskell/aeson.git`

  See what's changed in recent (and upcoming) releases:

  * https://github.com/haskell/aeson/blob/master/changelog.md

  (You can create and contribute changes using either git or Mercurial.)


  # Authors

  This library was originally written by Bryan O'Sullivan.
license-name: BSD-3-Clause
