all-versions:
- 0.1.0.0
author: Ondrej Palkovsky
basic-deps:
  aeson: '>=2.2 && <2.3'
  base: '>=4.16 && <4.21'
  data-default: '>=0.7 && <0.8'
  text: '>=2.0 && <2.2'
changelog: |
  # Revision history for aeson-default-field

  ## 0.1.0.0 -- 2024-10-08

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  ## aeson-generic-default

  Type-level configuration of missing values for aeson FromJSON Generic parser.

  Using higher-kinded-types, Coercible and Generic instances it is possible to define
  a class that can be configured by a type parameter to use custom field
  parsers during parsing and only when the parsing is done, it can be coerced
  to use normal types.

  ```haskell
  data ConfigFileT d = ConfigFile {
    defaultEnabled :: DefaultField d (DefBool True)
  , defaultDisabled :: DefaultField d (DefBool False)
  , defaultText :: DefaultField d (DefText "default text")
  , defaultInt :: DefaultField d (DefInt 42)
  , defaultNegativeInt :: DefaultField d (DefNegativeInt 42)
  , defaultRed :: DefaultField d (DefDefault Color)
  , defaultBlue :: DefaultField d (DefDefaultConstant BlueDefault)
  , normalField :: T.Text
  , normalOptional :: Maybe Int
  } deriving (Generic)
  type ConfigFile = ConfigFileT Final

  instance FromJSON ConfigFile where
    parseJSON = parseWithDefaults defaultOptions
  ```

  The resulting `ConfigFile` type alias has a form of:

  ```haskell
  {
    defaultEnabled :: Bool
  , defaultDisabled :: Bool
  , defaultText :: Text
  , defaultInt :: Int
  , defaultNegativeInt :: Int
  , defaultRed :: Color
  , defaultBlue :: Color
  , normalField :: T.Text
  , normalOptional :: Maybe Int
  }
  ```

  The type-level configuration can be easily extended with newtypes, e.g. to create a full compatibility
  layer with `singletons`:

  ```haskell
  newtype DefSing (a :: k) = DefSing (Demote k) deriving Generic
  instance (SingI a, SingKind k, FromJSON (Demote k)) => FromJSON (DefSing (a :: k)) where
    omittedField = Just $ DefSing $ fromSing (sing @a)
    parseJSON v = DefSing <$> parseJSON v
  ```

  And then the definition of the field can be for any singleton (e.g. Bool):

  ```haskell
  flag :: DefaultField d (DefSing True)
  ```
description-type: markdown
hash: b62b7db5e700885ede9d764d4fd07f8b10ca6c2beb6c5ec1718206a0bda2a1e8
homepage: https://github.com/ondrap/aeson-generic-default
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: palkovsky.ondrej@gmail.com
synopsis: Type-level default fields for aeson Generic FromJSON parser
test-bench-deps:
  aeson: '>=0'
  aeson-generic-default: '>=0'
  base: '>=0'
  data-default: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
