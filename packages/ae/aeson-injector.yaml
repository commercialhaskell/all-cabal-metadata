homepage: ''
changelog-type: markdown
hash: 883f84f8b7bccc82a0bfc529c5178f39d0a326c15217bd14fdc85f05c073e99c
test-bench-deps:
  base: -any
  text: -any
  quickcheck-text: -any
  HUnit: '>=1.3'
  aeson-injector: -any
  containers: -any
  lens: -any
  tasty-quickcheck: '>=0.8'
  tasty-hunit: '>=0.9'
  swagger2: -any
  tasty: '>=0.11'
  scientific: -any
  QuickCheck: '>=2.8.2'
  aeson: -any
  vector: -any
maintainer: ncrashed@gmail.com
synopsis: Injecting fields into aeson values
changelog: |
  1.2.0.0
  =======

  - Fixes issue #3 with unexpected errors when injected value fails to parse.

  1.1.6.0
  =======

  - Relax bounds to support GHC 8.10

  1.1.5.0
  =======

  - Bump `aeson` version.

  1.1.4.0
  =======

  - Disambiguate OnlyField schema with for one type (https://github.com/NCrashed/aeson-injector/pull/7)

  1.1.3.0
  =======

  - Bump upper version of base to `4.14`.

  1.1.2.0
  =======

  - Move to `swagger2-2.4` and `ghc-8.6`.

  1.1.0.0
  =======

  - Fix #1 bug.
  - `FromJSON (WithFields a b)` now requires `ToJSON a` to catch fields that should be removed from `b` JSON object before parsing.

  1.0.10.0
  ========

  - Push upper bounds for `base-4.10`.

  1.0.9.0
  =======

  - Push upper bounds for `servant-docs-0.11`.

  1.0.8.0
  =======

  - Push upper bounds for `aeson-1.2`.

  1.0.7.0
  =======

  - Push upper bounds for `aeson-1.1` and `servant-0.10`.

  1.0.6.0
  =======

  - Push upper bounds for `servant-docs` up to `9.0`

  1.0.5.0
  =======

  - Add support for `aeson-1.0.0`.

  1.0.4.0
  =======

  - Add `Data.Aeson.Unit` module.

  1.0.3.0
  =======

  - Add [servant-docs](https://hackage.haskell.org/package/servant-docs) instances.

  1.0.2.0
  =======

  - Add `OnlyField` data type.
basic-deps:
  servant-docs: '>=0.7 && <0.13'
  base: '>=4.7 && <4.17'
  unordered-containers: '>=0.2.7 && <0.3'
  text: '>=1.2 && <2.1'
  lens: '>=4.13 && <5.2'
  bifunctors: '>=5.2 && <6'
  hashable: '>=1.0 && <2.0'
  swagger2: '>=2.4 && <3.0'
  attoparsec: '>=0.14 && <0.15'
  deepseq: '>=1.4 && <2'
  aeson: '>=2.1 && <2.2'
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.1.0
- 1.0.2.0
- 1.0.3.0
- 1.0.4.0
- 1.0.5.0
- 1.0.5.1
- 1.0.6.0
- 1.0.7.0
- 1.0.8.0
- 1.0.9.0
- 1.0.10.0
- 1.1.0.0
- 1.1.1.0
- 1.1.2.0
- 1.1.3.0
- 1.1.4.0
- 1.1.5.0
- 1.1.6.0
- 1.2.0.0
- 2.0.0.0
author: Anton Gushcha
latest: 2.0.0.0
description-type: markdown
description: "# aeson-injector\n\n[![Build Status](https://travis-ci.org/NCrashed/aeson-injector.svg?branch=master)](https://travis-ci.org/NCrashed/aeson-injector)\n\nIt
  is small utility library that is intented to be used in RESTful APIs, especially
  with [servant](http://haskell-servant.readthedocs.io/en/stable/) and [Swagger](http://swagger.io/).
  Its main purpose is simple injection of fields into JSONs produced by [aeson](https://hackage.haskell.org/package/aeson)
  library.\n\nConsider the following common data type in web service developing:\n\n```
  haskell\ndata News = News {\n  title :: Text\n, body :: Text\n, author :: Text\n,
  timestamp :: UTCTime  \n}\n\n-- Consider we have simple 'ToJSON' and 'FromJSON'
  instances\n$(deriveJSON defaultOptions ''News) \n```\n\n[ToJSON](http://hackage.haskell.org/package/aeson-0.11.2.0/docs/Data-Aeson.html#t:ToJSON)
  instance produces JSON's like:\n\n``` json\n{\n  \"title\": \"Awesome piece of news!\"\n,
  \"body\": \"Big chunk of text\"\n, \"author\": \"Just Me\"\n, \"timestamp\": \"2016-07-26T18:54:42.678999Z\"\n}\n```\n\nNow
  one can create a simple web server with servant DSL:\n\n``` haskell\ntype NewsId
  = Word \n\ntype NewsAPI = \n       ReqBody '[JSON] News :> Post '[JSON] NewsId\n
  \ :<|> Capture \"news-id\" NewsId :> Get '[JSON] News\n  :<|> \"list\" :> Get '[JSON]
  [News]\n```\n\nAll seems legit, but, wait a second, an API user definitely would
  like to know id of news in `list` method. One way to do this is declare new type
  `NewsInfo` with additional field, but it is bad solution as requires to keep extra
  data type for each resource. \n\nSo, here `aeson-injector` steps in, now you can
  write:\n``` haskell\ntype NewsAPI = \n       ReqBody '[JSON] News :> Post '[JSON]
  NewsId\n  :<|> Capture \"news-id\" NewsId :> Get '[JSON] News\n  :<|> \"list\" :>
  Get '[JSON] [WithField \"id\" NewsId News]\n``` \n\n`WithField \"id\" NewsId News`
  or simply `WithId NewsId News` wraps you data type and injects `id` field in produced
  JSON values:\n\n``` haskell\n>>> encode (WithField 42 myNews :: WithField \"id\"
  NewsId News)\n```\n\n``` json\n{\n  \"id\": 42\n, \"title\": \"Awesome piece of
  news!\"\n, \"body\": \"Big chunk of text\"\n, \"author\": \"Just Me\"\n, \"timestamp\":
  \"2016-07-26T18:54:42.678999Z\"\n}\n```\n\n`WithField` data type has `FromJSON`
  instance for seamless parsing of data with injected fields and [ToSchema](https://hackage.haskell.org/package/swagger2-2.1/docs/Data-Swagger-Internal-Schema.html#t:ToSchema)
  instance for [servant-swagger](https://hackage.haskell.org/package/servant-swagger)
  support.\n\n## Injecting multiple values\n\nThe library also has more general data
  type `WithFields a b` that injects fields of 'toJSON a' into `toJSON b`. \n\n```
  haskell\ndata NewsPatch = NewsPatch {\n  tags :: [Text]\n, rating :: Double\n}\n$(deriveJSON
  defaultOptions ''NewsPatch) \n```\n\n``` haskell\nlet myNewsPatch = NewsPatch [\"tag1\",
  \"tag2\"] 42 \nin encode $ WithFields myNewsPatch myNews\n```\n\n``` json\n{\n  \"title\":
  \"Awesome piece of news!\"\n, \"body\": \"Big chunk of text\"\n, \"author\": \"Just
  Me\"\n, \"timestamp\": \"2016-07-26T18:54:42.678999Z\"\n, \"tags\": [\"tag1\", \"tag2\"]\n,
  \"rating\": 42.0\n}\n```\n\n## Corner cases\n\nUnfortunately, we cannot inject in
  non object values of produced JSON, so the library creates a wrapper object around
  non-object value:\n\n``` haskell\nencode (WithId 0 \"non-object\" :: WithId Int
  String)\n```\n\n``` json\n{\n  \"id\": 0 \n, \"value\": \"non-object\"\n}\n```\n\nThe
  same story is about `WithFields` data type:\n\n``` haskell\nencode (WithFields 0
  \"non-object\" :: WithFields Int String)\n```\n\n``` json\n{\n  \"injected\": 0
  \n, \"value\": \"non-object\"\n}\n```\n\nFor more examples and details, please,
  follow the haddocks.\n"
license-name: MIT
