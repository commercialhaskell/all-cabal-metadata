homepage: https://github.com/biocad/aeson-picker#readme
changelog-type: markdown
hash: 01acf227c011c495d6489adaf9170fdd2614d9d4f409796843e7676d978e0604
test-bench-deps:
  base: '>=4.7 && <5'
  aeson-picker: -any
  hspec: '>=2.4 && <3'
  text: -any
maintainer: bog2dan1@gmail.com, kolmax94@gmail.com
synopsis: Tiny library to get fields from JSON format
changelog: |
  # Changelog
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
  and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

  ## [0.1.0.6] - 2022-03-23
  ### Changed
  - Support aeson-2 and other GHC-9 related packages.

  ## [0.1.0.5] - 2019-09-07
  ### Changed
  - Upper bounds for lens-aeson.

  ## [0.1.0.0] - 2018-01-22
  ### Added
  - Initial version for picking.
basic-deps:
  lens-aeson: '>=1.0 && <1.3'
  base: '>=4.7 && <5'
  text: '>=1.2 && <2.1'
  lens: '>=4.15 && <6'
  aeson: '>=1.2 && <3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
author: Bogdan Neterebskii
latest: 0.1.0.6
description-type: markdown
description: |+
  # aeson-picker

  [![Travis](https://img.shields.io/travis/ozzzzz/aeson-picker.svg)](https://travis-ci.org/ozzzzz/aeson-picker)
  [![hackage](https://img.shields.io/hackage/v/aeson-picker.svg)](https://hackage.haskell.org/package/aeson-picker)
  [![hackage-deps](https://img.shields.io/hackage-deps/v/aeson-picker.svg)](https://hackage.haskell.org/package/aeson-picker)

  Tiny library to get fields from JSON format

  Common use is the following:
  ```
  JSON |-- FIELDS :: EXPECTED TYPE
  Text |-- [Text] :: a
  ```
  So operator `(|--)` gets JSON (represented as `Text`), "route" to field inside JSON (represented as `[Text]`), and tries to parse field from JSON with described route to expected type.
  If expected type can be deduced with type checker then it can be dropped down.

  A little bit safer operator is `(|-?)`. It returns not `a` but `Maybe a`.

  ## Examples
  First, add extension (to not pack `String` to `Text` every time):
  ```
  ghci>:set -XOverloadedStrings
  ```

  Then you can try something simple (empty list means that you try to parse `Value` from the top JSON-level):
  ```
  ghci>"5" |-- [] :: Int
  5
  ghci>"5" |-- [] :: Float
  5.0
  ghci>"5" |-- [] :: String
  "*** Exception: Data.Aeson.Picker: could not pick field with path: []
  ```

  But what if field you are looking for somewhere inside JSON?
  That's why are you here.

  Let's try to get something from inside JSON:
  ```
  ghci>"{\"a\": 5}" |-- ["a"] :: Int
  5
  ```
  But be sure that the field is presented inside JSON:
  ```
  ghci>"{\"a\": 5}" |-- ["b"] :: Int
  *** Exception: Data.Aeson.Picker: could not pick field with path: ["b"]
  ```
  We can go deeper (as deep as you want):
  ```
  ghci>"{\"outer\": {\"inner\": [1,2,3]}}" |-- ["outer", "inner"] :: [Int]
  [1,2,3]
  ```
  But be sure that you JSON is really valid (by specification key in JSON should be `String`):
  ```
  ghci>"{a: 5}" |-- ["a"] :: Int
  *** Exception: Data.Aeson.Picker: input json is not valid
  ```

  If you want more "safe" picker, you can use another operator:
  ```
  ghci>"5" |-? [] :: Maybe Int
  Just 5
  ghci>"{\"a\": 5}" |-? ["a"] :: Maybe Int
  Just 5
  ghci>"{\"a\": 5}" |-? ["b"] :: Maybe Int
  Nothing
  ```

  In current logic even operator `(|-?)` will throw error if JSON is not valid:
  ```
  ghci>"{a: 5}" |-? ["a"] :: Maybe Int
  *** Exception: Data.Aeson.Picker: input json is not valid
  ```

  You can open issue if you do not think that it is right logic.

license-name: BSD-3-Clause
