homepage: https://github.com/michalkonecny/aern2#readme
changelog-type: markdown
hash: 4ec962d7dc4120c80cff01e4fc36c37206499f54bebe59834d0c39c74d3f0213
test-bench-deps:
  integer-logarithms: -any
  aern2-mp: '>=0.2.6'
  base: ==4.*
  aern2-real: -any
  hspec: -any
  collect-errors: '>=0.1.5'
  mixed-types-num: '>=0.5.7'
  QuickCheck: -any
maintainer: mikkonecny@gmail.com
synopsis: Real numbers as sequences of MPBalls
changelog: |
  # Change log for aern2-real

  * v 0.2.5 2021-05-27
    * CanSelect moved to aern2-mp
  * v 0.2.4 2021-05-26
    * overhaul README and examples
    * stop "very inaccurate" errors breaking ? (bits n) queries
    * optimisation: ? (bits n) queries start from precision n
    * add tests for accuracy queries, limit and select
    * fix div by 0 during low-accuracy integer powers
  * v 0.2.1 2021-05-18
    * add conversion from WithAnyPrec
  * v 0.2.0 2021-05-17
    * moving Arrow-based functionality to package aern2-net
    * replacing Arrow-based sequences by list-based sequences
    * switch to new simplified collect-errors, mixed-types-num 0.5.0
      * got rid of EnsureCE etc.
      * not introducing CN wrapper unless at least one parameter is already CN
  * v 0.1.2 2019-03-19
    * adapts to mixed-types-num 0.3.2 (new divI, mod)
  * v 0.1.1.0 2017-12-06
    * disable aern2-generate-netlog-elm for now
  * v 0.1.0.3 2017-12-06
    * remove further upper bounds
  * v 0.1.0.2 2017-11-14
    * remove most upper bounds, building with ghc 8.2
  * v 0.1.0.1 2017-09-12
    * first release on Hackage
    * fast convergent sequences indexed by AccuracySG
    * arrow-based networks of nodes communicating via query-answer protocols
    * networks executable with cached and parallel strategies
    * network execution can be visualised in browser using an Elm frontend
basic-deps:
  integer-logarithms: -any
  aern2-mp: '>=0.2.6'
  base: ==4.*
  hspec: -any
  collect-errors: '>=0.1.5'
  mixed-types-num: '>=0.5.7'
  QuickCheck: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1.0
- 0.1.2
- 0.2.0.0
- 0.2.1.0
- 0.2.4.0
- 0.2.4.1
- 0.2.4.2
- 0.2.4.3
- 0.2.5.0
- 0.2.6.0
author: Michal Konecny
latest: 0.2.6.0
description-type: markdown
description: "# aern2-real <!-- omit in toc -->\n\nExact real arithmetic\n\nAPI documentation
  is available on the [Hackage page](https://hackage.haskell.org/package/aern2-real).\n\nThe
  remainder of this text is an introductory tutorial.  The code for the examples contained
  here is also available in file [Introduction.hs](src/AERN2/Real/Introduction.hs).\n\n##
  Table of contents <!-- omit in toc -->\n\n- [1. Data types](#1-data-types)\n- [2.
  Usage with Prelude](#2-usage-with-prelude)\n- [3. Usage with MixedTypesNumPrelude](#3-usage-with-mixedtypesnumprelude)\n-
  [4. Partial functions and error handling](#4-partial-functions-and-error-handling)\n-
  [5. Limits](#5-limits)\n- [6. Multivalued selection](#6-multivalued-selection)\n
  \ - [6.1. Parallel branching](#61-parallel-branching)\n  - [6.2. Multi-valued selection](#62-multi-valued-selection)\n-
  [7. Specification and tests](#7-specification-and-tests)\n\n## 1. Data types\n\nThis
  package provides the following two data types:\n\n- `CReal`:  Exact real numbers
  via lazy sequences of interval approximations\n  \n- `CKleenean`: Lazy Kleeneans,
  naturally arising from comparisons of `CReal`s\n  \nThe type `CReal` has instances
  of both [mixed-types-num](https://hackage.haskell.org/package/mixed-types-num) type
  classes such as `CanAdd`, `CanSqrt` as well as with traditional Prelude type classes
  such as `Ord`, `Num` and `Floating`.\nThe type `CKleenean` supports the usual Boolean
  operations.\n\nReal numbers are represented by converging sequences of dyadic intervals:\n\n```Haskell\ntype
  CReal = CSequence MPBall\n```\n\nA `CSequence` is a list of approximations computed
  with increasing *precision*.\nPrecision here does *not* guarantee a certain *accuracy*.\nPrecision
  roughly corresponds to the number of *significant digits* used\nin all intermediate
  computations.\nWith increasing precision the intervals eventually converge to exact
  values.\n\nThe elements of a `CSequence` use the `CN` error-collecting wrapper.\nA
  convergent sequence must be error-free from some point onwards.\nA sequence is allowed
  not to converge, but only if all its elements contain the same error.  \nSuch a
  sequence can be thought of as converging to this error.\n\n## 2. Usage with Prelude\n\nFirst,
  let us load the package with **Prelude** operations:\n\n```Text\n$ stack ghci aern2-real:lib
  --no-load --ghci-options \"AERN2.Real -Wno-type-defaults\"\n*AERN2.Real> import
  Prelude hiding (pi)\n*AERN2.Real Prelude>\n```\n\nWe can obtain approximations of
  a real number with a chosen *precision*:\n\n```Text\n...> (sin 1 ::CReal) ? (prec
  120)\n[0.84147098480789650665250232... ± ~4.6644e-35 ~2^(-114)]\n\n...> (sin 1 ::CReal)
  ? (prec 10000)\n[0.84147098480789650665250232... ± ~0.0000 ~2^(-13530)]\n```\n\nNotice
  that sometimes the accuracy of the interval is lower than the working precision.
  \ Instead of precision, we can request that the computation is performed with a
  certain *guaranteed accuracy*:\n\n```Text\n...> (sin 1 ::CReal) ? (bits 120)\n[0.84147098480789650665250232...
  ± ~2.2431e-55 ~2^(-181)]\n\nNevertheless, this sometimes comes with a performance
  penalty, since internally the computation may need to be restarted with a higher
  accuracy:\n\n...> sumSines n = sum [sin (creal i) | i <- [1..n::Integer]]\n\n...>
  sumSines 100 ? (prec 120)\n[-0.12717101366042011543675217... ± ~2.8393e-33 ~2^(-108)]\n(0.03
  secs, 26,203,776 bytes)\n\n...> sumSines 100 ? (bits 120)\n[-0.12717101366042011543675217...
  ± ~1.2220e-53 ~2^(-175)]\n(0.05 secs, 60,537,128 bytes)\n```\n\nWhich can be obtained
  faster if directly guessing that we need precision at least 130:\n\n```Text\n...>
  (sumSines1 100) ? (prec 130)\n[-0.12717101366042011543675217... ± ~1.2220e-53 ~2^(-175)]\n(0.03
  secs, 35,209,088 bytes)\n```\n\nWhen formatting a real number, a *default precision*
  is used:\n\n```Text\n...> pi\n{?(prec 36): [3.14159265358466655015945434... ± ~1.4552e-11
  ~2^(-36)]}\n```\n\nThe **Prelude** power operator works only for integral types:\n\n```Text\n...>
  pi ^ 2\n{?(prec 36): [9.86960440099937841296195983... ± ~1.4964e-10 ~2^(-32)]}\n\n...>
  pi ^ pi\n<interactive>:18:1: error:\n    • No instance for (Integral CReal) arising
  from a use of ‘^’\n```\n\nNumerical order cannot be decided when the two numbers
  are equal:\n\n```Text\n...> pi > 0\nTrue\n\n...> pi == pi\n*** Exception: Failed
  to decide equality of Sequences.  If you switch to MixedTypesNumPrelude instead
  of Prelude, comparison of Sequences returns CSequence Kleenean or similar instead
  of Bool.\n```\n\nPrelude comparison fails to determine also inequality when the
  two numbers are very close:\n\n```Text\n...> pi == pi + 0.00000000000000000000000000000000001\nFalse\n\n...>
  pi == pi + 0.00000000000000000000000000000000000001\n*** Exception: Failed to decide
  equality of Sequences.  If you switch to MixedTypesNumPrelude instead of Prelude,
  comparison of Sequences returns CSequence Kleenean or similar instead of Bool.\n```\n\n##
  3. Usage with MixedTypesNumPrelude\n\nWe see that some things do not work with Prelude.
  Let us use [MixedTypesNumPrelude](https://hackage.haskell.org/package/mixed-types-num)
  operations instead:\n\n```Text\n$ stack ghci aern2-real:lib --no-load --ghci-options
  AERN2.Real\n*AERN2.Real> import MixedTypesNumPrelude\n*AERN2.Real MixedTypesNumPrelude>\n```\n\nFirst,
  our Prelude expressions\n\n- `(sin 1 :: CReal)`\n- `sum [sin (creal i) | i <- [1..n::Integer]]`\n\ncan
  now be simplified as follows:\n\n```Text\n...> :t sin 1\nsin 1 :: CReal\n\n...>
  sumSines n = sum [sin i | i <- [1..n]]\n...> :t sumSines\nsumSines :: Integer ->
  CReal\n```\n\nMoreover, we get a more general power operator:\n\n```Text\n...> 2^0.5\n{?(prec
  36): [1.41421356237193073034085251... ± ~1.0305e-11 ~2^(-36)]}\n\n...> pi ^ pi\n{?(prec
  36): [36.46215960553849863252041849... ± ~2.7112e-9 ~2^(-28)]}\n\n...> (pi ^ pi)
  ? (bits 10000)\n[36.46215960720791177099082602... ± ~0.0000 ~2^(-13532)]\n(0.83
  secs, 631,232,904 bytes)\n```\n\nReal comparison now returns a `CKleenean` instead
  of `Bool`, where\n\n```Haskell\ntype CKleenean = CSequence Kleenean\n```\n\nAs a
  three-value truth type, `Kleenean` supports undecided comparisons.  Being a sequence,
  `CKleenean` supports comparisons with a specified precision:\n\n```Text\n...> pi
  > 0\n{?(prec 36): CertainTrue}\n\n...> pi == pi\n{?(prec 36): TrueOrFalse}\n\n...>
  pi == pi + 2^(-100)\n{?(prec 36): TrueOrFalse}\n\n...> (pi == pi + 2^(-100)) ? (prec
  1000)\nCertainFalse\n```\n\nWhen the numbers are known exactly, an equality test
  succeeds:\n\n```Test\n...> (creal 0) == 0\n{?(prec 36): CertainTrue}\n```\n\n##
  4. Partial functions and error handling\n\nNormally in Haskell, computation such
  as `1/0` or `sqrt (-1)` result in **NaN** or run-time exceptions.\nSince `CReal`
  uses the [CN wrapper](https://hackage.haskell.org/package/collect-errors), for `CReal`
  these expressions instead return special values that describe the error.\n\nSince
  comparisons can be only semi-decided, also such errors can be only semi-detected.\nTherefore,
  an invalid input leads to a normal `CReal` value, and the error is demonstrated
  only when we extract an approximation:\n\n```Text\n...> bad1 = sqrt (-1)\n...> bad1
  ? (prec 100)\n{{ERROR: out of domain: negative sqrt argument}}\n```\n\nand sometimes
  an error cannot be determined with certainty:\n\n```Text\n...> a_third = creal (1/3)\n\n...>
  bad2 = 1/(a_third-a_third)\n...> bad2 ? (prec 100)\n{{POTENTIAL ERROR: division
  by 0}}\n\n...> bad2 ? (bits 100)\n{{POTENTIAL ERROR: numeric error: failed to find
  an approximation with sufficient accuracy}}\n```\n\nA query for guaranteed precision
  may take a long time because before it fails, the computation is attempted iteratively
  for higher and higher precisions, up to precision around 5,000,000 bits:\n\n```Text\n...>
  bad3 = 1/(pi-pi)\n...> bad3 ? (prec 100)\n{{POTENTIAL ERROR: division by 0}}\n\n...>
  bad3 ? (bits 100)\n-- TAKES A VERY LONG TIME\n```\n\nWhen we are sure that potential
  errors are harmless, we can clear them:\n\n```Text\n...> ok4 = sqrt (pi-pi)\n...>
  ok4 ? (prec 100)\n[0.00000000000000000061331736... ± ~6.1332e-19 ~2^(-60)]{{POTENTIAL
  ERROR: out of domain: negative sqrt argument}}}\n\n...> ok5 = clearPotentialErrors
  $ sqrt (pi-pi)\n...> ok5 ? (prec 100)\n[0.00000000000000000061331736... ± ~6.1332e-19
  ~2^(-60)]\n```\n\nAttempting to clear a certain error is harmless:\n\n```Text\n...>
  bad6 = clearPotentialErrors (sqrt (pi-pi-1))\n...> bad6 ? (prec 100)\n{{ERROR: out
  of domain: negative sqrt argument}}\n```\n\nBut clearing a potential error which
  is a real error is unsound:\n\n```Text\n...> bad7 = clearPotentialErrors (sqrt (pi-pi-2^(-1000)))\n...>
  bad7 ? (prec 100)\n[0.00000000000000000061331736... ± ~6.1332e-19 ~2^(-60)]\n...>
  bad7 ? (prec 1000)\n{{ERROR: out of domain: negative sqrt argument}}\n```\n\nErrors
  can be investigated, eg as follows:\n\n```Text\n...> detectCN r = if not (CN.hasError
  r) then Just r else Nothing\n\n...> detectCN (sqrt (-1) ? (prec 100))\nNothing\n\n...>
  detectCN (sqrt 0 ? (prec 100))\nJust [0 ± 0]\n```\n\nThere is also `CN.hasCertainError`
  which ignores potential errors.\n\n## 5. Limits\n\nComputing a limit of a fast converging
  sequence of numbers or functions is one of the most fundamental operations for real
  numbers.\nA sequence `a_n` is fast converging if each\n`a_n` is no more than `0.5^n`
  distant from the limit.\n\nFor example, we can compute `e` as the limit of the partial
  sums of terms `1/n!` for `n` ranging from `0` onwards:\n\n```Text\n... MixedTypesNumPrelude>
  fact n = creal $ product [1..n]\n... MixedTypesNumPrelude> e_sum n = sum $ map (recip
  . fact) [0..n]\n```\n\nThe difference between `e` and `e_sum n` is no more than
  `3/(fact (n+1))` which is less than `0.5^(n-2)`.\nThus the sequence `\\n -> e_sum
  (n+2)` is fast converging and the following limit is valid:\n\n```Text\n...> my_e
  = limit $ \\(n :: Integer) -> e_sum (n+2)\n\n...> my_e ? (prec 1000)\n[2.71828182845904523536028747...
  ± ~0.0000 ~2^(-1217)]\n```\n\nThe type declaration for `n` is required because `limit`
  is generic and works also for sequences indexed by `Int` or even positive rational
  numbers.\n\n## 6. Multivalued selection\n\nWhen a comparison is needed for branching,
  its semi-decidability becomes a challenge.  As an example, consider the task of
  defining the `abs` function by cases.\nWe have two ways to overcome the challenge:\n\n###
  6.1. Parallel branching\n\n```Text\n...> absR1 x = if x < 0 then -x else x\n\n...>
  absR1 (pi - pi)\n{?(prec 36): [0 ± ~2.9104e-11 ~2^(-35)]}\n```\n\nThis simple definition
  works even when x = 0 because AERN2 has redefined the if-then-else operator for
  a `CKleenean` condition and real number branches in such a way that in situations
  where the condition is inconclusive, both branches are computed and the results
  safely merged.  This is convenient, but can lead to inefficient code if the number
  of branches that need to be considered grows large.\n\n### 6.2. Multi-valued selection\n\nA
  more general mechanism for dealing with branching based on semi-decidable conditions
  such as real-number comparisons is non-deterministic `select`. If given two lazy
  Kleeneans, `select` will enquire them concurrently with increasing precisions until
  one of them becomes `CertainTrue`.  By convention `select` returns a `Bool` which
  is `True` if the first branch succeeds and `False` if the second branch succeeds.
  \ \n\nHere we use `select` to implement a *soft* sign test with some tolerance `eps`
  and define `absR2` to be the limit of a sequence of approximate implementations
  of `abs` with different `eps`:\n\n```Text\n...> absR2_approx x (q :: Rational) =
  if select (x > -q) (x < q) then x else -x\n\n...> absR2 x = limit $ absR2_approx
  x\n\n...> absR2 (pi - pi)\n{?(prec 36): [0 ± ~4.3656e-11 ~2^(-34)]}\n```\n\n## 7.
  Specification and tests\n\nMost `CReal` operations are simply lifts of the corresponding
  `CN MPBall` operations, which are tested in package [aern2-mp](../aern2-mp/README.md)
  against a fairly complete hspec/QuickCheck specification of algebraic properties.\n\nThere
  are also tests specific to `CReal`, mostly checking that `? (bits n)` queries return
  sufficiently accurate approximations.  There is are tests for `select` and `limit`.\n"
license-name: BSD-3-Clause
