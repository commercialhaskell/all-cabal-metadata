homepage: ''
changelog-type: markdown
hash: 4d3f0823dbe44517b83837b8c5df59a761edda6b08ab8b8900d9b5950519667e
test-bench-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  composite-base: '>=0.7.0.0 && <0.8'
  unordered-containers: -any
  text: -any
  cassava: '>=0.5.0.0 && <0.6'
  composite-cassava: -any
  tasty-hunit: -any
  tasty: -any
  vector: -any
maintainer: dan.firth@homotopic.tech
synopsis: Csv parsing functionality for composite.
changelog: |
  # Changelog for composite-cassava

  ## v0.0.3.0

  * Add tests.
  * Add `ToHeader` class with `generateRecHeader` function.

  ## v0.0.2.0

  * Fix `ToNamedRecord` instances.

  ## v0.0.1.0

  * Add `FromNamedRecord` and `ToNamedRecord` instances for `Rec f xs`.
basic-deps:
  base: '>=4.7 && <5'
  composite-base: '>=0.7.0.0 && <0.8'
  unordered-containers: -any
  text: -any
  cassava: '>=0.5.0.0 && <0.6'
  vector: -any
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.0.3.1
author: Daniel Firth
latest: 0.0.3.1
description-type: markdown
description: |
  # composite-cassava

  Provides `FromNamedRecord` and `ToNamedRecord` instances for composite records.

  In order to use this, use DerivingVia with one of the newtypes, depending on your
  use case. The recommended way is like so:

  ```{.haskell}
  withLensesAndProxies
    [d|
      type A = "A" :-> Text

      type B = "B" :-> Double

      type C = "C" :-> Text

      type D = "D" :-> Int
      |]

  type RecMaybe = Rec Maybe '[A, B, C, D]

  deriving newtype instance FromField A

  deriving newtype instance FromField B

  deriving newtype instance FromField C

  deriving newtype instance FromField D

  deriving newtype instance ToField A

  deriving newtype instance ToField B

  deriving newtype instance ToField C

  deriving newtype instance ToField D

  deriving via (TF Maybe '[A, B, C, D]) instance FromNamedRecord RecMaybe

  deriving via (TF Maybe '[A, B, C, D]) instance ToNamedRecord RecMaybe
  ```
license-name: MIT
