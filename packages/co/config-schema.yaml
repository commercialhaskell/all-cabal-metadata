homepage: https://github.com/glguy/config-schema
changelog-type: markdown
hash: 66bd2019ed4e10daf9e9e981a6744110e1f9f7ee2038210d4ace6b2b9fc7cd30
test-bench-deps:
  base: -any
  text: -any
  config-value: -any
  config-schema: -any
maintainer: emertens@gmail.com
synopsis: Schema definitions for the config-value package
changelog: |
  # Revision history for config-schema

  ## 1.3.0.0

  * Generalize atomSpec to suport arbitrary exactSpec matches

  ## 1.2.2.0

  * Re-export `Alt` from `Config.Schema.Spec`

  ## 1.2.1.0

  * Expose `Config.Schema.Load.Error.simplifyValueSpecMismatch`
    for providing more focused error feedback.
  * Added `instance ErrorAnnotation FilePosition`

  ## 1.2.0.0

  * Update to build against `config-value-0.7.0.0`
  * Added additional specs and instances to `Config.Schema.Spec`
  * Primitive number spec now only matches `Number`, previous
    `IntegerSpec` is now derived in terms of `NumberSpec`

  ## 1.1.0.0

  * Simplify field types of `ValueSpecMismatch`
  * More aggressively eliminate `TypeMismatch` and `WrongAtom`
    when other, more specific errors, are available.

  ## 1.0.0.0

  * Rename `ValueSpec` to `PrimValueSpec`
  * Rename `ValueSpecs` to `ValueSpec`
  * Rename `SectionSpec` to `PrimSectionSpec`
  * Rename `SectionSpecs` to `SectionsSpec`
  * Rename `Spec` class to `HasSpec`
  * Rename `valuesSpec` to `anySpec`
  * Custom specifications changed type to expose an error message.
  * Move spec types to `Config.Schema.Types`. Now `Config.Schema.Spec`
    has only the exports needed for building specs and not defining
    new spec consumers.
  * Improve schema mismatch type and errors in `Config.Schema.Load.Error`

  ## 0.5.0.1
  * Support GHC 8.4.1

  ## 0.5.0.0

  * Add Spec instances for Int and Word types. All instances
    including the previous Int instance now validate ranges.
  * Changed argument order for `loadValueFromFile`

  ## 0.4.1.0

  * Add `loadValueFromFile` and `SchemaError`. This is intended
    as a quick way to get a configuration file loaded with all
    errors being thrown as exceptions.

  ## 0.4.0.0

  * Parameterize the Load module on a position type
  * Allow Docs module to process recursively defined
    specifications as long as a named section breaks
    the loop.
  * Add parentheses to docs when needed

  ## 0.3.1.1  -- 2017-05-17

  * Add support for GHC 7.10.3

  ## 0.3.1.0  -- 2017-05-16

  * Allow `generateDocs` to work on any ValueSpec, rather than
    top-level empty-named section specs.

  ## 0.3.0.0  -- 2017-05-09

  * Added "association list" specifications
  * Use `pretty` library for documentation generation
  * Reorder parameters so that documentation comes last
  * Hide implementations of `ValueSpecs` and `SectionSpecs`

  ## 0.2.0.0  -- 2017-05-07

  * Expose `liftValueSpec` and `liftSectionSpec`
  * Add `fractionalSpec`
  * Add `nonemptySpec` and `oneOrNonemptySpec`
  * `loadValue` returns a `NonEmpty LoadError`

  ## 0.1.0.0  -- 2017-05-06

  * First version. Released on an unsuspecting world.
basic-deps:
  semigroupoids: '>=5.1 && <6.1'
  free: '>=4.12 && <5.3'
  base: '>=4.9 && <4.20'
  text: '>=1.2 && <2.2'
  kan-extensions: '>=5.0.2 && <5.3'
  containers: '>=0.5 && <0.8'
  config-value: ^>=0.8.3
  transformers: '>=0.4 && <0.7'
  pretty: '>=1.1.2 && <1.2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.2.1.0
- 1.2.2.0
- 1.3.0.0
author: Eric Mertens
latest: 1.3.0.0
description-type: markdown
description: |
  config-schema
  =============

  [![Hackage](https://img.shields.io/hackage/v/config-schema.svg)](https://hackage.haskell.org/package/config-schema) [![Build Status](https://secure.travis-ci.org/glguy/config-schema.png?branch=master)](http://travis-ci.org/glguy/config-schema)

  Live Demo
  --------

  The config-value and config-schema packages are available in a [live demo](https://glguy.net/config-demo/).

  About
  --------

  This package allows the user to define configuration schemas suitable for
  matching against configuration files written in the
  [config-value](https://hackage.haskell.org/package/config-value) format.
  These schemas allow the user to extract an arbitrary Haskell value from
  an interpretation of a configuration file. It also allows the user to
  programatically generate documentation for the configuration files
  accepted by the loader.

  ```haskell
  {-# Language OverloadedStrings, ApplicativeDo #-}
  module Example where

  import qualified Data.Text as Text
  import           Data.Text (Text)
  import           Data.Monoid ((<>))
  import           Data.Functor.Alt ((<!>))
  import           Data.List.NonEmpty (NonEmpty)

  import           Config
  import           Config.Schema

  exampleFile :: Text
  exampleFile =
    " name: \"Johny Appleseed\" \n\
    \ age : 99                  \n\
    \ happy: yes                \n\
    \ kids:                     \n\
    \   * name: \"Bob\"         \n\
    \   * name: \"Tom\"         \n"

  exampleValue :: Value Position
  Right exampleValue = parse exampleFile

  exampleSpec :: ValueSpec Text
  exampleSpec = sectionsSpec "" $
    do name  <- reqSection  "name" "Full name"
       age   <- reqSection  "age"  "Age of user"
       happy <- optSection' "happy" yesOrNo
                "Current happiness status"
       kids  <- reqSection' "kids"  (oneOrList kidSpec)
                "All children's names"

       return $
         let happyText = case happy of Just True  -> " and is happy"
                                       Just False -> " and is not happy"
                                       Nothing    -> " and is private"

         in name <> " is " <> Text.pack (show (age::Integer)) <>
               " years old and has kids " <>
               Text.intercalate ", " kids <>
               happyText

  kidSpec :: ValueSpec Text
  kidSpec = sectionsSpec "kid" (reqSection "name" "Kid's name")


  -- | Matches the 'yes' and 'no' atoms
  yesOrNo :: ValueSpec Bool
  yesOrNo = True  <$ atomSpec "yes" <!>
            False <$ atomSpec "no"


  printDoc :: IO ()
  printDoc = print (generateDocs exampleSpec)
  -- *Example> printDoc
  -- Top-level configuration file fields:
  --     name: REQUIRED text
  --        Full name
  --     age: REQUIRED integer
  --        Age of user
  --     happy: `yes` or `no`
  --        Current happiness status
  --     kids: REQUIRED kid or list of kid
  --        All children
  --
  -- kid
  --     name: REQUIRED text
  --        Kid's name

  example :: Either (NonEmpty (LoadError Position)) Text
  example = loadValue exampleSpec exampleValue
  -- *Example> exampleVal
  -- Right "Johny Appleseed is 99 years old and has kids Bob, Tom and is happy"
  ```
license-name: ISC
