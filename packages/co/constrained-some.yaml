all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
author: Julian Bruder
basic-deps:
  base: '>=4.12 && <4.21'
changelog: |
  # Changelog

  All notable changes to the constrained-some library will be documented in this
  file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [PVP versioning](https://pvp.haskell.org/).

  ## v0.1.2 _(2024-11-29)_

  ### Added
  - Added type aliases `SomesF` and `SomeF` for existentials with fixed containers
  - Added `mapSome` with infix `(<~$>)` and `traverseSome` with infix `(<~*>)`

  ## v0.1.1 _(2024-11-29)_

  ### Added
  - Added instance `Show (Somes cs)` if `cs` contains `Show`

  ## Initial release: v0.1.0 _(2024-11-27)_

  ### Added
  - Existentials `Somes` and `Somes1`
changelog-type: markdown
description: |
  [![Hackage](https://img.shields.io/hackage/v/constrained-some.svg)](https://hackage.haskell.org/package/constrained-some) ![Static Badge](https://img.shields.io/badge/Lang-Haskell2010-blue) [![Haskell-CI](https://github.com/bruderj15/constrained-some/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/bruderj15/constrained-some/actions/workflows/haskell-ci.yml) [![License: GPL v3](https://img.shields.io/badge/License-MIT-blue.svg)](https://mit-license.org/)

  # constrained-some

  This library provides utilities for working with existential types and type-level constraints.
  It allows you to enforce multiple constraints on polymorphic types and containers complementing `some`.

  ## Core

  - **Existential types**: `Somes` and `Somes1` provide existential wrappers for types with multiple constraints.
  - **Convenient aliases**: Simplified types `Some` and `Some1` for scenarios where just one constraint is needed.
  - **More convenient aliases**: Simplified types `SomeF` and `SomesF` for scenarios where the container of a `Somes1` is known.
  - **Natural transformations with constraints**
      - `mapSome :: (forall a. AllC csa a => f a -> g a) -> SomesF f csa -> SomesF g csa`
      - `traverseSome :: Functor m => (forall a. AllC csa a => f a -> m (g a)) -> SomesF f csa -> m (SomesF g csa)`
  ## Usage

  ```haskell
  import Data.Some.Constraint

  someShowableOrd :: Somes '[Show, Ord]
  someShowableOrd = Some [1, 2, 3 :: Int]

  someNumFunctor :: Some1 Functor Num
  someNumFunctor = Some1 [1, 2, 3 :: Int]

  someListShowable :: SomeF [] Show
  someListShowable = Some1 [1, 2, 3 :: Int]
  ```

  ## Contact information
  Contributions, critics and bug reports are welcome!

  Please feel free to contact me through GitHub.
description-type: markdown
hash: 9e34a3a65960b5ebf49cc3e3264d4bf83e3a746e1b11fca6a1427b2f809bca57
homepage: https://github.com/bruderj15/constrained-some
latest: 0.1.2
license-name: MIT
maintainer: julian.bruder@outlook.com
synopsis: Existential type that can be constrained
test-bench-deps:
  base: '>=4.12 && <4.21'
  constrained-some: '>=0'
