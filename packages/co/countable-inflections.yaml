all-versions:
- 0.0.1
- 0.1.0
- 0.2.0
- 0.3.0
author: Brady Ouren <brady.ouren@gmail.com>
basic-deps:
  base: '>=4.8 && <5'
  bytestring: '>=0'
  exceptions: '>=0'
  pcre-utils: '>=0'
  regex-pcre-builtin: '>=0'
  text: '>=0'
changelog: |
  ## 0.3.0

  * Bumped lts from 8.0 to 10.8

  ## 0.2.1

  * Add inflect and inflectWith methods for pluralizing or singularizing based on input

  ## 0.2.0

  * solidify basic API and fix regex problems with replace
changelog-type: markdown
description: |
  # Countable Inflections

  [![License MIT](https://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)
  [![Hackage](https://img.shields.io/hackage/v/countable-inflections.svg)](http://hackage.haskell.org/package/countable-inflections)
  [![Stackage LTS](http://stackage.org/package/countable-inflections/badge/lts)](http://stackage.org/lts/package/countable-inflections)
  [![Build Status](https://circleci.com/gh/tippenein/countable-inflections.svg?style=shield&circle-token=whatever)](https://circleci.com/gh/tippenein/countable-inflections)

  This library implements pluralization and singularization in a similar way to the [rails inflectors](http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html)

  It uses regexes to define the non-standard transformations and therefore
  doesn't provide much safety. If you need to provide the same pluralization and
  singularization which rails does out of the box, this will work the same. If
  you want _more_ you should be using
  [inflections-hs](https://github.com/stackbuilders/inflections-hs) which uses
  megaparsec to give you more guarantees

  ## Usage

  ```haskell
  λ: pluralize "person"
  "people"

  λ: singularize "branches"
  "branch"
  ```

  These can also be given custom inflection matchers

  ```haskell
  λ: :t singularizeWith
  [Inflection] -> Text -> Text
  ```

  There are 3 different types of transformations:

  ### Match

  Takes a PCRE regex and a replacement string.

  ```haskell
  λ: :t makeMatchMapping
  [(RegexPattern, RegexReplace)] -> [Inflection]

  λ: let mapping = makeMatchMapping [("(octop)us", "\\1i")]
  λ: pluralizeWith mapping "octopus"
  "octopi"
  ```

  ### Irregular

  From singular to plural with no greater pattern.

  ```haskell
  λ: :t makeIrregularMapping
  [(Singular, Plural)] -> [Inflection]

  λ: let mapping = makeIrregularMapping [("zombie","zombies")]
  λ: pluralizeWith mapping "zombie"
  "zombies"
  ```

  ### Uncountable

  Doesn't have a mapping, word stays the same) so it has the type:

  ```haskell
  [Text] -> [Inflection]
  ```

  ### Inflect

  In general you can input a number and singularize or pluralize based on the count, for example:

  ```haskell
  setReport = do
    sets <- getSets
    n <- length sets
    print $ show n ++ " " ++ inflect "sets" n
  ```

  This way it'll list as "1 set" or "5 sets" based on the input.

  ## License

  MIT - see [the LICENSE file](LICENSE.md).
description-type: markdown
hash: 1ae91292663c99b655db47e534964f0041e16d3f4ff530e01a752b09bcad9fbe
homepage: https://github.com/tippenein/countable-inflections
latest: 0.3.0
license-name: MIT
maintainer: Brady Ouren <brady.ouren@gmail.com>
synopsis: Countable Text Inflections
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  countable-inflections: '>=0'
  hspec: '>=0'
  text: '>=0'
