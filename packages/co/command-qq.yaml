all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.3.1.0
author: Matvey Aksenov
basic-deps:
  base: '>=4 && <5'
  process: '>=0'
  template-haskell: '>=0'
  text: '>=0'
changelog: |
  0.3.1.0
  =======

    * Improved exception handling

    * Relaxed the licesnse to BSD2

    * Made compatible with GHC 8.8

  0.3.0.0
  =======

    * Added another way to avoid variable expansion (`\\#{foo}` is replaced with `#{foo}`)

  0.2.2.0
  =======

    * Exported `substituteVars`

  0.2.1.0
  =======

    * Added a bunch of predefined quasiquoters to `System.Command.QQ.Predef`

    * Added `Embed` instances for `Data.Text.Text` and `Data.Text.Lazy.Text`

  0.2.0.0
  =======

    * Added `sh_` quasiquoter to avoid type annotations for trivial quotes

    * Moved `Eval` onto `Text` to speed I/O up.

    * Added support for embedding literals and constructors with no arguments

    * Mored `Embed` instances
changelog-type: markdown
description: |
  # command-qq
  [![Hackage](https://budueba.com/hackage/command-qq)](https://hackage.haskell.org/package/command-qq)
  [![Build Status](https://secure.travis-ci.org/biegunka/command-qq.png?branch=master)](https://travis-ci.org/biegunka/command-qq)
  [![Build Status](https://drone.io/github.com/biegunka/command-qq/status.png)](https://drone.io/github.com/biegunka/command-qq/latest)

  ```
  >>> import System.Command.QQ
  >>> putStr =<< unlines . reverse . lines <$> [sh|cowsay "Hello, I am command-qq!"|]
                  ||     ||
                  ||----w |
              (__)\       )\/\
           \  (oo)\_______
          \   ^__^
   -------------------------
  < Hello, I am command-qq! >
   _________________________
  ```

  ## Install

  ```
  % cabal install command-qq
  ```

  ## Features

  ### Quasiquotation syntax for external interpreters

  ```
  >>> [sh_| echo hello world! |]
  hello world!
  ```

  ### Custom quasiquoters

  ```
  ghci = quoter $ callCommand "ghc" ["-ignore-dot-ghci", "-e"]
  ```

  Then you can use `ghci` in ghci!

  ```
  >>> [ghci| putStrLn "hello world!" |] :: IO ()
  hello world!
  ```

  For more examples, see [`System.Command.QQ.Predef`][0]

  ### Haskell values embedding

  Let's define `Embed` instance for a custom data type:

  ```haskell
  data Bang = Bang

  instance Embed Bang where
    embed Bang = "!"
  ```

  Then you can use variables of `Bang` type in quoted strings!

  ```
  >>> [sh_| echo hello#{Bang} |]
  hello!
  >>> let bang = Bang in [sh_| echo hello#{bang} |]
  hello!
  ```

  Note, `command-qq` does not support full Haskell in embeddings,
  only variables/constructors names and literals

  ### DSLs

  See [`examples/CommandT.hs`][1]

    [0]: https://github.com/biegunka/command-qq/blob/master/src/System/Command/QQ/Predef.hs
    [1]: https://github.com/biegunka/command-qq/blob/master/example/CommandT.hs
description-type: markdown
hash: 61cf67c77eedd7d59d5410300a24ea5e3a1aff8d4d4a7d338f833e85de9a1ee7
homepage: http://biegunka.github.io/command-qq/
latest: 0.3.1.0
license-name: BSD-2-Clause
maintainer: matvey.aksenov@gmail.com
synopsis: Quasiquoters for external commands
test-bench-deps:
  base: '>=4 && <5'
  command-qq: '>=0'
  doctest: '>=0'
  hspec: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
