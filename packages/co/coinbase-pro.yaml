homepage: https://github.com/mdunnio/coinbase-pro#readme
changelog-type: markdown
hash: c7746069d6119cbc9ee8bbe330b038ffa3d44e807f06f47da70969a5d588d025
test-bench-deps: {}
maintainer: Michael Dunn <michaelsdunn1@gmail.com>
synopsis: Client for Coinbase Pro
changelog: |
  # Version 0.9.2.2

  - Added `CoinbasePro.Unauthenticated.singleProduct`

  # Version 0.9.2.1

  - Use `Runner` instead of `ClientM a -> IO a` where applicable
  - Added more documentation around `Runner`
  - Added `runDefCbAuthT` as a default for calling `runCbAuthT` without passing in a `Runner`
  - Updated `src/example/request/Main.hs` to reflect `runDefCbAuthT` and a minor refactor

  # Version 0.9.2.0

  Feature complete! (except FIX)

  ## Additional Features

  - Added support for the following endpoints:
    - stablecoin conversions
    - oracle

  # Version 0.9.1.0

  - Minor refactors + linting.

  ## Additional Features

  - Added support for the following endpoints:
    - `Profiles`
    - `Reports`

  # Version 0.9.0.0

  - Upgraded to lts-17.4 (ghc 8.10.4)
  - Added hie.yaml for use with haskell-language-server (hls)
  - Removed `taker_fee_rate` from `Activate` websocket message
  - Added `max_withdrawal_amount` to `CurrencyDetails`
  - Changed `example/test-request` to `Sandbox` instead of `Production`
  - Use `Network.HTTP.Types.encodePathSegments` when making `RequestPath` in authenticated requests
  - Added `min_market_funds` and `max_market_funds` to `Product`
  - Made several explicit `Show` instances
  - Added support for the following endpoints:
    - account history
    - account holds
    - exchange limits
    - deposits
    - withdrawals
    - list payment methods
    - listing coinbase accounts
    - list tranfers endpoint

  # Version 0.8.2.0

  - Changed `port` in `WSConnection` back to `PortNumber` instead of `Int`

  # Version 0.8.1.0

  - Upgraded to lts-16.7 (ghc 8.8.3)
  - Changed `port` in `WSConnection` to `Int` instead of `PortNumber`

  # Version 0.8.0.0

  ## Breaking API changes:

  - `Environment` concept has been introduced. This allows the user to specify an endpoint (production, sandbox)
    in which to query or stream.

      - `run` (and associated functions) now take an `Environment` as the first parameter. `runSandbox` and associated
        functions have been removed.
      - `runWithManager` now has different parameter ordering. Signature is `runWithManager :: Manager -> Environment -> ClientM a -> IO a`
      - `runCbAuthT` now takes a `Runner a`, where `Runner a = ClientM a -> IO a`; allows users to specify an environment in which to run

  - `placeOrder` now has `Maybe ClientOrderId` as the first parameter that allows users to assign `client_oid` to
    submitted orders. The `client_oid` field is visible on the `Full` channel.

  - `CoinbasePro.WebSocketFeed.subscribeToFeed` has two additional parameters:

      - `Environment`
      - `Maybe CoinbaseProCredentials`: allows users to authenticate on subscription. See `User`

  - Moved `UserId` and `ProfileId` to `CoinbasePro.Types` from `CoinbasePro.WebSocketFeed.Channel.Full.Activate`

  ## Additional Features:

  - Added `User` channel functionality that allows users to see `user_id` and `profile_id` on messages that pertain to the subscriber.
    See [documentation](https://docs.pro.coinbase.com/#the-user-channel) for more details

      - `user_id` and `profile_id` fields are now parsed from `Full` channel messages if available.

  - `CoinbasePro.Types.ClientOrderId` has been introduced to specify `client_oid` in `placeOrder` API request.
    - `client_oid` is now parsed from `CoinbasePro.WebSocketFeed.Channel.Full.Received.

  - `CoinbasePro.Authenticated.getOrder` allows users to query status of order

  - `CoinbasePro.Authenticated.getClientOrder` allows users to query status of order using `client_oid`


  ## Misc

  - minor cleanups of unused imports

  # Version 0.7.2.0
   - Upgraded to stack lts-14.17

  # Version 0.7.1.0
   - Fixed broken examples

  # Version 0.7.0.0
   - Unauthenticated requests are now all in the `ClientM` monad. `CoinbasePro.Request.run` is now required
     to operate in the IO monad.

     Example: `run (trades (ProductId "BTC-USD")) >>= print`

  - Added `run_`, `runSandbox`, `runSandboxWithManager` in `CoinbasePro.Request`
  - Added `currencies`, `fees`, and `trailingVolume` queries
basic-deps:
  http-client: '>=0.5 && <0.7'
  exceptions: '>=0.4 && <1.0'
  bytestring: ==0.10.*
  aeson-casing: '>=0.1 && <0.3'
  base: '>=4.7 && <5'
  time: '>=1.8 && <2.0'
  servant-client: '>=0.14 && <0.19'
  unordered-containers: ==0.2.*
  text: ==1.2.*
  uuid: ==1.3.*
  http-api-data: '>=0.3 && <0.5'
  servant-client-core: '>=0.14 && <0.19'
  network: '>=2.6 && <3.2'
  async: '>=2.1 && <2.3'
  websockets: ==0.12.*
  coinbase-pro: -any
  servant: '>=0.14 && <0.19'
  memory: '>=0.14 && <0.16'
  containers: '>=0.5 && <0.7'
  io-streams: ==1.5.*
  binary: ==0.8.*
  http-streams: ==0.8.*
  http-client-tls: ==0.3.*
  wuss: ==1.1.*
  cryptonite: '>=0.24 && <0.30'
  transformers: ==0.5.*
  HsOpenSSL: ==0.11.*
  http-types: ==0.12.*
  unagi-streams: ==0.2.*
  aeson: '>=1.2 && <1.6'
  vector: ==0.12.*
all-versions:
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.8.0.0
- 0.9.0.0
- 0.9.1.0
- 0.9.2.0
- 0.9.2.2
author: Michael Dunn <michaelsdunn1@gmail.com>
latest: 0.9.2.2
description-type: markdown
description: "# coinbase-pro\n\nClient for Coinbase Pro REST and Websocket APIs.\n\nHere
  is a list of implemented/unimplemented features:\n\n- Market Data\n    - [x] Products\n
  \       - [x] Get Products\n        - [x] Get Product Order Book\n        - [x]
  Get Product Ticker\n        - [x] Get Trades\n        - [x] Get Historic Rates\n
  \       - [x] Get 24hr Stats\n    - [x] Currencies\n        - [x] Get Currencies\n
  \   - [x] Time\n- Private\n    - [x] Accounts\n        - [x] List Accounts\n        -
  [x] Get An Account\n        - [x] Get Account History\n        - [x] Get Holds\n
  \   - [x] Orders\n        - [x] Place a New Order\n        - [x] Cancel an Order\n
  \       - [x] Cancel all\n        - [x] List Orders\n        - [x] Get an Order\n
  \   - [x] Fills\n        - [x] List Fills\n\t- [x] Limits\n\t\t- [x] Get Current
  Exchange Limits\n    - [x] Deposits\n\t\t- [x] List Deposits\n\t\t- [x] Single Deposit\n
  \       - [x] Payment Method\n        - [x] Coinbase\n\t\t- [x] Generate a Crypto
  Deposit Address\n    - [x] Withdrawals\n\t\t- [x] List Withdrawals\n\t\t- [x] Single
  Withdrawal\n        - [x] Payment Method\n        - [x] Coinbase\n        - [x]
  Crypto\n\t\t- [x] Fee Estimate\n    - [x] Stablecoin Conversions\n        - [x]
  Create Conversion\n    - [x] Payment Methods\n        - [x] List Payment Methods\n\t-
  [x] Coinbase Accounts\n\t\t- [x] List Accounts\n    - [x] Fees\n        - [x] Get
  Current Fees\n    - [x] Reports\n        - [x] Create a new report\n        - [x]
  Get report status\n\t- [x] Profiles\n\t\t- [x] List Profiles\n\t\t- [x] Get a Profile\n\t\t-
  [x] Create a Profile Transfer\n    - [x] User Account\n        - [x] Trailing Volume\n\t-
  ~~[ ] Margin~~ (Disabled)[https://blog.coinbase.com/coinbase-pro-disables-margin-trading-42f5862f8a66]\n\t-
  [x] Oracle\n\t\t- [x] Get Oracle\n- Websocket Feed\n    - [x] Channels\n        -
  [x] The heartbeat channel\n        - [x] The status channel\n        - [x] The ticker
  channel\n        - [x] The level2 channel\n        - [x] The user channel\n        -
  [x] The matches channel\n        - [x] The full channel\n- FIX API\n    - [ ] Messages\n\n\n##
  Request API\n\n### Market Data Requests\n\n```haskell\nrun Sandbox (trades (ProductId
  \"BTC-USD\")) >>= print\n```\n\n### Authenticated Private Requests\n\n```haskell\nrunDefCbAuthT
  Sandbox cpc $ do\n    fills (Just btcusd) Nothing >>= liftIO . print\n  where\n
  \   accessKey  = CBAccessKey \"<access-key>\"\n    secretKey  = CBSecretKey \"<secret-key>\"\n
  \   passphrase = CBAccessPassphrase \"<passphrase>\"\n    cpc        = CoinbaseProCredentials
  accessKey secretKey passphrase\n```\n\n## Websocket API\n\nTo print out all of the
  full order book updates for BTC-USD:\n\n\n```haskell\nmain :: IO ()\nmain = do\n
  \   msgs <- subscribeToFeed [ProductId \"BTC-USD\"] [Ticker] Nothing\n    forever
  $ Streams.read msgs >>= print\n```\n\n## Example\n\nExample execs can be found in
  `src/example/`\n\n### Run Example\n\nTo run any of the authenticated endpoints in
  `test-request`, the access key,\nsecret key, and passphrase must be provided. See
  _Authenticated Private Requests_ above.\n"
license-name: MIT
