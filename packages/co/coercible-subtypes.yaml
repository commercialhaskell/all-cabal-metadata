all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
author: Koji Miyazato
basic-deps:
  base: '>=4.12 && <4.21'
  profunctors: '>=0'
changelog: "# Revision history for coercible-subtypes\n\n## 0.3.0.0 -- 2023-01-01\n\n*
  Breaking changes\n  \n  * Change the `Newtype.Intersection.associative` and `Newtype.Union.associative`
  to new,\n    more succinct type.\n\n* Instance added to `IsIntersection` and `IsUnion`\n\n##
  0.2.0.0 -- 2021-09-13\n\n* Add `Related`\n* Add `IsIntersection` and `IsUnion` facilities\n\n##
  0.1.1.0 -- 2021-08-24\n\n* Add instances `Coercible a b => (Read (Sub a b), Enum
  (Sub a b), Bounded (Sub a b))`\n* Add `instantiate`\n* Add some more combinators\n\n##
  0.1.0.0 -- 2020-04-08\n\n* First version.\n"
changelog-type: markdown
description: "# coercible-subtypes\n\nThis library provides unidirectional (one-way)
  variant of [Coercion](https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Type-Coercion.html).\n\nThe
  variant is a type `Sub` defined in `Data.Type.Coercion.Sub`.\n`Sub a b` can be used
  to convert a type `a` to another type `b`.\n\n```\nupcastWith :: Sub a b -> a ->
  b\n```\n\nFor all `Sub a b` values, the runtime representation of `a` and\n`b` values
  are same, so `upcastWith` do not require any computation\nto return `b` value, just
  [coerce](https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Coerce.html)s\nGHC
  to treat a value of `a` as type `b`.\nThis feature is not different to `Coercion`.\n\nThe
  difference is that while `Coercion` represents\nbidirectional relation, `Sub` represents
  unidirectional relation.\n`Coercion a b` and its underlying type class `Coercible
  a b` witnesse you can coerce both `a` to `b` and `b` to `a`.\nUnlike that, `Sub
  a b` only allows you to coerce `a` to `b`, not `b` to `a`.\n\n## Usage Example\n\nTo
  use this library effectively, it must be used at two places: a library\nand its
  user code. For this example, let's assume they are written by two people,\na *library
  author* and a *user*.\n\nThe library author writes a module `RightTriangle` below.\n\n```\nmodule
  RightTriangle(Triangle(), toEdges, getEdges, fromEdges) where\n  import Data.Coerce\n
  \ import Data.Type.Coercion.Sub\n  \n  newtype Triangle = MkTriangle (Int, Int,
  Int)\n  \n  -- | Triangles can be coerced into 3-tuples of Ints\n  toEdges :: Sub
  Triangle (Int, Int, Int)\n  toEdges = sub\n  \n  getEdges :: Triangle -> (Int, Int,
  Int)\n  getEdges = coerce\n  \n  -- | Creates right triangle from lengths of edges
  (a,b,c)\n  -- \n  -- >  *\n  -- >  |\\ c\n  -- > a| \\\n  -- >  *--*\n  -- >   b\n
  \ --\n  -- (a^2 + b^2 == c^2) must hold.\n  fromEdges :: (Int, Int, Int) -> Maybe
  Triangle\n  fromEdges = {- Omit -}\n```\n\nThe author wants to protect the invariant
  condition `a^2 + b^2 == c^2`.\nFor that purpose, the author can't export the constructor
  of `Triangle`.\nBecause it is symmetric, `Coercion Triangle (Int,Int,Int)` can't
  be exported either.\n\nThe user is building an application using `RightTriangle`
  module.\n\n```\nmodule Main where\n  import Data.Map (Map)\n  import RightTriangle\n
  \ \n  import Data.Type.Coercion.Sub\n  \n  main :: IO ()\n  main = ......\n```\n\nIn
  this application, the user has to convert `Map String Triangle` to\n`Map String
  (Int, Int, Int)`, revealing the edge lengths of the triangles.\nWhile it is easy
  to do so with `fmap getEdges`,\nusing `fmap` here can make an entire copy of the
  Map<sup>[†](#footnote)</sup>.\nThis is wasted work and memory. Instead, the user
  can use `mapR toEdges` to get\n`Sub (Map String Triangle) (Map String (Int, Int,
  Int))`\nand then `upcastWith` to perform zero cost coercion over `Map`.\n\n## Comparison
  against other methods\n\nThere are some other methods to achive the goal of this
  library.\n\n* Just give up coercion\n\n  * This is just for better performance,
  so not doing it\n    is always an option.\n\n* Rewrite rules\n\n  * Rewrite rules
  based method is currently employed, and working at our hand.\n    So, it is possible
  you don't need this library at all.\n  \n  * The downside is whether it works or
  not is on the provider of the\n    \"container\" type in use, and GHC doing expected
  optimizations.\n    Without reading source codes and examining the GHC optimization
  result (e.g. `-ddump-rule-firings`),\n    you can't be sure you are doing the conversion
  zero-cost.\n\n--------\n\n<a id=\"footnote\">†</a> For `Data.Map`, which [containers](https://hackage.haskell.org/package/containers)\npackage
  provides, can optimize `fmap` away via proper inlining and rewrite rules. The purpose
  of this library\nis turning optimizations into explicit codes, or handling the cases
  when the container type in use does not\nprovide such an opportunity via rewrite
  rules.</small>\n"
description-type: markdown
hash: abeba45ceffebfdf8ce338cbdb53c91e61ed1f282402a200c9c6862cde4a1c00
homepage: https://github.com/viercc/coercible-subtypes
latest: 0.3.0.1
license-name: BSD-3-Clause
maintainer: viercc@gmail.com
synopsis: Coercible but only in one direction
test-bench-deps: {}
