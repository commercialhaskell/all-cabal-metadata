all-versions:
- 0.1.0.0
author: Henry Johnson
basic-deps:
  aeson: '>=2.2.1 && <2.3'
  base: ^>=4.18.0.0
  bytestring: '>=0.11.4 && <0.12'
  text: '>=2.0.2 && <2.1'
changelog: |
  # Revision history for cozo-hs

  ## 0.1.0.0 -- 2023-11-03

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# cozo-hs\n\n### A library with bindings and simple types to the C API
  of the embeddable Cozo database.\n\n## Installation\n\nThis library relies on pkg-config
  for libcozo_c being available on your system. You will need to have `cozo_c.h` and
  `libcozo_c.so` installed somewhere your linker can find it and it must be registered
  with pkg-config. \n\nTo do so, you can download both the header files as well as
  the library from the [Cozo project repository](https://github.com/cozodb/cozo) or
  you could clone that repository and build it from source. \n\nIf there is no official
  way to install this library on your OS/Distro (Debian for example) then you can
  put the library and headers in common paths (/usr/local/lib, /usr/local/include
  respectively) then manually create a pkg-config file for them. Just make sure that
  the version you specify matches what you have installed!\n\nHere is an example libcozo_c.pc:\n```\nName:
  cozo_c\nDescription: C Interface with the Cozo embeddable database.\nVersion: 0.7.5\nCflags:
  -I/usr/local/include\nLibs: -L/usr/local/lib -lcozo_c\n```\n\nAfter that, a simple
  `cabal build` can make sure that the C compiler is linking correctly.\n\nAfter building,
  you may want to ensure that the runtime is linked correctly as well. Run `cabal
  repl` to try out some of the code or `cabal test` to run the test-suite.\n\nFollowing
  all of this, you can include this library as a dependency in other Cabal projects
  the normal way.\n\n## Notes on Usage\n\nThis library makes heavy use of aeson given
  that the C API is defined almost entirely in terms of JSON. Therefore, some primitive
  data types which match the structure of returned JSON are provided as part of this
  library.\n\nIf you desire to use your own serialization scheme rather than the types
  provided, the underlying bindings are exposed in the form of functions with a `'`
  suffix. All of these functions deal with strict `ByteStrings` that are marshalled
  from the strings produced by C.\n\nAll errors are handled in a pure Either.\n\nA
  very simple program which opens an in-memory connection and runs a query is as follows:\n```Haskell\n{-#LANGUAGE
  OverloadedStrings#-}\nimport Database.Cozo\nimport Control.Exception (bracket, throwIO)\n\nmain
  :: IO ()\nmain = \n  bracket \n    (open \"mem\" \"\" \"{}\" >>= either throwIO
  pure)\n    (fmap (const ()) . close)\n    $ \\c -> do\n      er <- runQuery c \"?[]
  <- [[1,2,3]]\" KM.empty\n      case er of\n        Left e -> throwIO e\n        Right
  (CozoResult badOkay) -> \n          case badOkay of\n            Left bad -> print
  . cozoBadMessage $ bad\n            Right okay -> print . namedRowsRows . cozoOkayNamedRows
  $ okay\n```\n\nThis program will output:\n\n```\n[[Number 1.0,Number 2.0,Number
  3.0]]\n```"
description-type: markdown
hash: 94f220f3394b27952168517efd3f72e779d9199d8fa1ddd9a06ef849ea635daa
homepage: ''
latest: 0.1.0.0
license-name: MPL-2.0
maintainer: hencutJohnson@gmail.com
synopsis: Haskell bindings to the CozoDB C API
test-bench-deps:
  aeson: '>=2.2.1 && <2.3'
  base: ^>=4.18.0.0
  bytestring: '>=0.11.4 && <0.12'
  cozo-hs: '>=0'
  tasty: ==1.5
  tasty-hunit: ==0.10.1
  text: '>=2.0.2 && <2.1'
