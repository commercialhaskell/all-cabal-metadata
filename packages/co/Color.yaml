all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3.1
- 0.1.4
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
- 0.4.1
author: Alexey Kuleshevich
basic-deps:
  base: '>=4.11 && <5'
  data-default-class: '>=0'
  deepseq: '>=0'
  vector: '>=0.11'
changelog: |
  # Changelog for Color

  ## 0.4.1

  * Addition of `OKLAB` and `OKLCH` color spaces. From the [CSS 4 Color
    Specification](https://drafts.csswg.org/css-color-4/#:~:text=XYZ_to_OKLab)

  ## 0.4.0

  * Addition of `DIN99` color space.
  * Scale `L*a*b*` color space to `[0, 1]` range from the more common `[0, 100]` for
    consistency.
  * Addition of: `toGrayscale`, `applyGrayscale` and `replaceGrayscale`.
  * Addition of: `ChannelCount`, `channelCount`, `channelNames` and `channelColors`
  * Remove `RealFloat` constraint from `ColorSpace` for `Y'`

  ## 0.3.3

  Addition of `SVG` colors

  ## 0.3.2

  * Addition of `CIEL*u*v*` colorspace and `LCh` views of both `CIEL*a*b*` and `L*u*v*`.

  ## 0.3.1

  * Remove `RealFloat` constraint from `ColorSpace` for `Y'`

  ## 0.3.0

  * Rename `Y` color model into `X` to avoid the annoying name conflict.
  * Add `ColorSpace` instance for `Y'` and enrich it with base space info
  * Rename `YCbCr` -> `Y'CbCr` and remove explicit linearity from its base space
  * Fix BT470 transfer function. `ecctf` and `dcctf` were mixed up.
  * Move `transfer` and `itransfer` functions into the `RedGreenBlue` class
  * Move out `ecctf` and `dcctf` functions outside of `RedGreenBlue` class
  * Remove all customized functions from RGB modules in favor of their respective class
    implementations:

    * `primaries` (standalone) -> `gamut` (in class)
    * `transfer` (standalone) -> `transfer` (in class)
    * `itransfer` (standalone) -> `itransfer` (in class)
    * `npmStandard` (standalone) -> `npm` (in class)
    * `inpmStandard` (standalone) -> `inpm` (in class)

  * Addition of `coerceGamut`
  * Fix re-export of vector's `MVector`, `Vector` type families.
  * Re-arrange how modules are exported a little bit.

  ## 0.2.0

  * Addition of `CIE1931 RGB` color space
  * Add `Linearity` kind to `RedGreenBlue` color spaces.
  * Add `Default` instance for `Pixel`
  * Addition of universal division `(//)` to `Elevator`
  * Addition of CIE1931 RGB color space.
  * Fix show instance for floating point colors: adjust formatting in Elevator for `Float` and `Double`
  * Add record accessor functions: `chromaticityCIExyY`, `whitePointChromaticity`
  * Fix show instance for `Gamut`
  * Remove deprecated: `CIECAM02` and `ciecam02Adaptation`

  ## 0.1.4

  * Export `pixelColor`
  * Add luma related patterns: `PixelY'`, `PixelY'A`, `Y'` and `Y'A`. Also `rgbPixelLuma`

  ## 0.1.3.1

  * Fix introduced in `0.1.2` for `Alpha cs` was incomplete and is fixed in this version
    without breakage.

  ## 0.1.3 (deprecated)

  * Addition of `CMCCAT2000`.
  * Rename `CIECAM02` to `CIECAT02` with a fallback synonym for backwards compatibility
  * Fix `ColorSpace` instance for `Alpha cs`
  * Add `ColorSpace` instances for `YCbCr cs` color spaces that have `Luma` instance:
    `BT709`, `BT601_525` and `BT601_625`

  ## 0.1.2

  * Fix `YCbCr` conversion to derived RGB color spaces
  * Fix conversion of `toWord64 (1 :: Double)` and `toWord632 (1 :: Float)`.
  * Addition of `xyzColorMatchingFunctions` and `spectralPowerDistributions`

  ## 0.1.1

  * Addition of `Graphics.Color.Illuminant.Wikipedia` module
  * Addition of `convertColor` and `convertColorFloat` functions

  ## 0.1.0

  Initial alpha release
changelog-type: markdown
description: |
  # Color

  A library for dealing with Colors and pixels. It implements arbitrary color space
  conversion, chromatic adaptation and other color manipulations.

  ## Status

  | Language | Github Actions | Coveralls |Gitter.im |
  |:--------:|:--------------:|:---------:|:--------:|
  | ![GitHub top language](https://img.shields.io/github/languages/top/lehins/Color.svg) | [![Build Status](https://github.com/lehins/Color/workflows/Color-CI/badge.svg)](https://github.com/lehins/Color/actions) | [![Coverage Status](https://coveralls.io/repos/github/lehins/Color/badge.svg?branch=master)](https://coveralls.io/github/lehins/Color?branch=master) | [![Join the chat at https://gitter.im/haskell-massiv/Lobby](https://badges.gitter.im/haskell-massiv/Lobby.svg)](https://gitter.im/haskell-massiv/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

  |      Package       | Hackage | Nightly | LTS |
  |:-------------------|:-------:|:-------:|:---:|
  |  [`Color`](https://github.com/lehins/Color/tree/master/Color)|                                       [![Hackage](https://img.shields.io/hackage/v/Color.svg)](https://hackage.haskell.org/package/Color)|                                                                                                        [![Nightly](https://www.stackage.org/package/Color/badge/nightly)](https://www.stackage.org/nightly/package/Color)|                                                                                         [![Nightly](https://www.stackage.org/package/Color/badge/lts)](https://www.stackage.org/lts/package/Color)|

  ## Description

  There is a clear separation between color models, color spaces and alternative
  representations of color spaces. All are distinct at the type level. The goal is to
  prevent mixups of incompatible color types as well as utilize type information for
  conversion between them.

  Currently supported:

  * Color models:

    * `Y`
    * `RGB`
    * `HSI`
    * `HSL`
    * `HSV`
    * `YCbCr`
    * `CMYK`

  * Color spaces and arbitrary conversions between them:

    * `Y` - luminance
    * `Y'` - luma
    * `CIE XYZ`
    * `CIE L*a*b*`
    * `DIN99`
    * `RGB`:

      * `sRGB` - both standardized and derived
      * `AdobeRGB` - both standardized and derived
      * ITU: `Rec470`, `Rec601` and `Rec709`
      * Alternative representations:

        * `HSI`
        * `HSL`
        * `HSV`
        * `YCbCr`
        * `CMYK`

  * Illuminants:

    * CIE1931 - 2 degree observer
    * CIE1964 - 10 degree observer
    * Some common alternatives

  * Chromatic adaptation:

    * VonKries adaptation with transformations:

        * `VonKries`
        * `Bradford` (default)
        * `Fairchild`
        * `CIECAM02`
        * `CMCCAT2000`

  * Color Standards:

    * RAL
    * SVG

  ## Example

  Here is a short example how this library can be used. Here we assume a GHCi session that
  can be started like so:

  ```shell
  $ stack ghci --package Color
  ```

  ### Perceived lightness

  Let's say we need find the perceived lightness as described in [this StackOverflow
  answer](https://stackoverflow.com/questions/596216/formula-to-determine-perceived-brightness-of-rgb-color/56678483#56678483)
  for an RGB triple `(128, 255, 65) :: (Word8, Word8, Word8)`.

  Before we can attempt getting the lightness we need to do these two things:

  1. Figure out what is the color space of the `RGB` triplet? In particular the `Illuminant`
     and the `Linearity` of the `RGB` color space.
  2. Convert your `RGB` color to [`CIE
     L*a*b*`](https://en.wikipedia.org/wiki/CIELAB_color_space) and then we can get the `L*`
     out, which is the perceived lightness.

  More often than not an RGB image will be encoded in non-linear sRGB color space with 8 bits
  per channel, so we'll use that for this example:

  ```haskell
  ghci> :set -XDataKinds
  ghci> import Graphics.Color.Space
  ghci> let rgb8 = ColorSRGB 128 255 65 :: Color (SRGB 'NonLinear) Word8
  ghci> print rgb8
  <SRGB 'NonLinear:(128,255, 65)>
  ```

  Before we convert `sRGB` to `CIE L*a*b*` color space we need to increase the precision to
  `Double`, because for now `Word8` is not supported by the `LAB` color space implementation:

  ```haskell
  ghci> let rgb = toDouble <$> rgb8
  ghci> print rgb
  <SRGB 'NonLinear:( 0.5019607843137255, 1.0000000000000000, 0.2549019607843137)>
  ```

  In order to convert to another color space without changing the `Illuminant` we can use
  `convertColor` function. So here is how we convert to CIELAB and extract the perceived
  lightness `L*`:

  ```haskell
  ghci> let lab@(ColorLAB l _ _) = convertColor rgb :: Color (LAB D65) Double
  ghci> lab
  <LAB * D65:(90.0867507593648500,-65.7999116680496000,74.4643898323530600)>
  ghci> l
  90.08675075936485
  ```

  ### Color adaptation

  When a change of `Illuminant` is also needed during color space conversion we can use
  `convert` function

  ```haskell
  ghci> import Graphics.Color.Adaptation (convert)
  ghci> import qualified Graphics.Color.Illuminant.CIE1964 as CIE1964
  ghci> let lab@(ColorLAB l _ _) = convert rgb :: Color (LAB 'CIE1964.D50) Double
  ghci> lab
  <LAB CIE1964 'D50:(90.2287735564601500,-59.3846969983265500,72.9304679742930800)>
  ```

  ## External resources

  * `Color` is on a list of curated [Awesome Colour](https://awesome-colour.org/#haskell)
    resources.

  * While working on this library the [colour-science.org](https://www.colour-science.org/)
    and their Python implementation of [colour](https://github.com/colour-science/colour)
    was used extensively as a reference.
description-type: markdown
hash: ab8e7286ace1416f629c7c346310f770fafb0a150ef6e9d1331b8f0a6e133d4b
homepage: https://github.com/lehins/Color
latest: 0.4.1
license-name: BSD-3-Clause
maintainer: alexey@kuleshevi.ch
synopsis: Color spaces and conversions between them
test-bench-deps:
  Color: '>=0'
  HUnit: '>=0'
  JuicyPixels: '>=0'
  QuickCheck: '>2.13'
  base: '>=4.8 && <5'
  colour: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  hspec: '>=0'
  massiv: '>=0'
  massiv-test: '>=0'
  random: '>=0'
  vector: '>=0'
