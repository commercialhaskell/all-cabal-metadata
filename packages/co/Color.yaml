homepage: https://github.com/lehins/Color
changelog-type: markdown
hash: 268a28d4864e904c3e6693c08b1fb9880271c953b114d0a483a0f9a81ef09577
test-bench-deps:
  JuicyPixels: -any
  base: '>=4.8 && <5'
  hspec: -any
  Color: -any
  massiv-test: -any
  massiv: -any
  criterion: -any
  doctest: '>=0.16'
  HUnit: -any
  colour: -any
  random: -any
  deepseq: -any
  QuickCheck: '>2.13'
  vector: -any
maintainer: alexey@kuleshevi.ch
synopsis: Color spaces and conversions between them
changelog: |
  # Changelog for Color

  ## 0.3.2

  * Addition of `CIEL*u*v*` colorspace and `LCh` views of both `CIEL*a*b*` and `L*u*v*`.

  ## 0.3.1

  * Remove `RealFloat` constraint from `ColorSpace` for `Y'`

  ## 0.3.0

  * Rename `Y` color model into `X` to avoid the annoying name conflict.
  * Add `ColorSpace` instance for `Y'` and enrich it with base space info
  * Rename `YCbCr` -> `Y'CbCr` and remove explicit linearity from its base space
  * Fix BT470 transfer function. `ecctf` and `dcctf` were mixed up.
  * Move `transfer` and `itransfer` functions into the `RedGreenBlue` class
  * Move out `ecctf` and `dcctf` functions outside of `RedGreenBlue` class
  * Remove all customized functions from RGB modules in favor of their respective class
    implementations:

    * `primaries` (standalone) -> `gamut` (in class)
    * `transfer` (standalone) -> `transfer` (in class)
    * `itransfer` (standalone) -> `itransfer` (in class)
    * `npmStandard` (standalone) -> `npm` (in class)
    * `inpmStandard` (standalone) -> `inpm` (in class)

  * Addition of `coerceGamut`
  * Fix re-export of vector's `MVector`, `Vector` type families.
  * Re-arrange how modules are exported a little bit.

  ## 0.2.0

  * Addition of `CIE1931 RGB` color space
  * Add `Linearity` kind to `RedGreenBlue` color spaces.
  * Add `Default` instance for `Pixel`
  * Addition of universal division `(//)` to `Elevator`
  * Addition of CIE1931 RGB color space.
  * Fix show instance for floating point colors: adjust formatting in Elevator for `Float` and `Double`
  * Add record accessor functions: `chromaticityCIExyY`, `whitePointChromaticity`
  * Fix show instance for `Gamut`
  * Remove deprecated: `CIECAM02` and `ciecam02Adaptation`

  ## 0.1.4

  * Export `pixelColor`
  * Add luma related patterns: `PixelY'`, `PixelY'A`, `Y'` and `Y'A`. Also `rgbPixelLuma`

  ## 0.1.3.1

  * Fix introduced in `0.1.2` for `Alpha cs` was incomplete and is fixed in this version
    without breakage.

  ## 0.1.3 (deprecated)

  * Addition of `CMCCAT2000`.
  * Rename `CIECAM02` to `CIECAT02` with a fallback synonym for backwards compatibility
  * Fix `ColorSpace` instance for `Alpha cs`
  * Add `ColorSpace` instances for `YCbCr cs` color spaces that have `Luma` instance:
    `BT709`, `BT601_525` and `BT601_625`

  ## 0.1.2

  * Fix `YCbCr` conversion to derived RGB color spaces
  * Fix conversion of `toWord64 (1 :: Double)` and `toWord632 (1 :: Float)`.
  * Addition of `xyzColorMatchingFunctions` and `spectralPowerDistributions`

  ## 0.1.1

  * Addition of `Graphics.Color.Illuminant.Wikipedia` module
  * Addition of `convertColor` and `convertColorFloat` functions

  ## 0.1.0

  Initial alpha release
basic-deps:
  base: '>=4.11 && <5'
  data-default-class: -any
  deepseq: -any
  vector: '>=0.11'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3.1
- 0.1.4
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
author: Alexey Kuleshevich
latest: 0.3.2
description-type: markdown
description: |
  # Color

  A library for dealing with Colors and pixels. It implements arbitrary color space
  conversion, chromatic adaptation and other color manipulations.

  ## Status

  | Language | Github Actions | Coveralls |Gitter.im |
  |:--------:|:--------------:|:---------:|:--------:|
  | ![GitHub top language](https://img.shields.io/github/languages/top/lehins/Color.svg) | [![Build Status](https://github.com/lehins/Color/workflows/Color-CI/badge.svg)](https://github.com/lehins/Color/actions) | [![Coverage Status](https://coveralls.io/repos/github/lehins/Color/badge.svg?branch=master)](https://coveralls.io/github/lehins/Color?branch=master) | [![Join the chat at https://gitter.im/haskell-massiv/Lobby](https://badges.gitter.im/haskell-massiv/Lobby.svg)](https://gitter.im/haskell-massiv/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

  |      Package       | Hackage | Nightly | LTS |
  |:-------------------|:-------:|:-------:|:---:|
  |  [`Color`](https://github.com/lehins/Color/tree/master/Color)|                                       [![Hackage](https://img.shields.io/hackage/v/Color.svg)](https://hackage.haskell.org/package/Color)|                                                                                                        [![Nightly](https://www.stackage.org/package/Color/badge/nightly)](https://www.stackage.org/nightly/package/Color)|                                                                                         [![Nightly](https://www.stackage.org/package/Color/badge/lts)](https://www.stackage.org/lts/package/Color)|

  ## Description

  There is a clear separation between color models, color spaces and alternative
  representations of color spaces. All are distinct at the type level. The goal is to
  prevent mixups of incompatible color types as well as utilize type information for
  conversion between them.

  Currently supported:

  * Color models:

    * `Y`
    * `RGB`
    * `HSI`
    * `HSL`
    * `HSV`
    * `YCbCr`
    * `CMYK`

  * Color spaces and arbitrary conversions between them:

    * `Y` - luminance
    * `Y'` - luma
    * `CIE XYZ`
    * `CIE L*a*b*`
    * `RGB`:

      * `sRGB` - both standardized and derived
      * `AdobeRGB` - both standardized and derived
      * ITU: `Rec470`, `Rec601` and `Rec709`
      * Alternative representations:

        * `HSI`
        * `HSL`
        * `HSV`
        * `YCbCr`
        * `CMYK`

  * Illuminants:

    * CIE1931 - 2 degree observer
    * CIE1964 - 10 degree observer
    * Some common alternatives

  * Chromatic adaptation:

    * VonKries adaptation with transformations:

        * `VonKries`
        * `Bradford` (default)
        * `Fairchild`
        * `CIECAM02`
        * `CMCCAT2000`

  * Color Standards:

    * RAL


  ## External resources

  * `Color` is on a list of curated [Awesome Colour](https://awesome-colour.org/#haskell)
    resources.

  * While working on this library the [colour-science.org](https://www.colour-science.org/)
    and their Python implementation of [colour](https://github.com/colour-science/colour)
    was used extensively as a reference.
license-name: BSD-3-Clause
