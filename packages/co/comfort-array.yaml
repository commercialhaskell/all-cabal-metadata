homepage: https://hub.darcs.net/thielema/comfort-array/
changelog-type: markdown
hash: 4b3af39a9e3bf6cd0c86878299753f383c9b0d2556ae199e6538a98536db5972
test-bench-deps:
  base: -any
  doctest-exitcode-stdio: '>=0.0 && <0.1'
  tagged: -any
  containers: -any
  doctest-lib: '>=0.1 && <0.1.1'
  comfort-array: -any
  ChasingBottoms: '>=1.2.2 && <1.4'
  QuickCheck: -any
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Arrays where the index type is a function of the shape type
changelog: |
  # Change log for the `comfort-array` package

  ## 0.4.1

   * use `doctest-extract` for tests

   * `instance Shape Map`

   * `Shape.Cyclic`

   * `Shape.Square`, `Shape.Cube`

  ## 0.4

   * `fromAssocations`: Make default value the first parameter.
     It is most oftenly zero and thus less variable than the array size.

   * `Shape.DeferredIndex`:
     Now uses the shape as the type parameter, not the index type.

  ## 0.3

   * `Storable.Mutable.Array`: Replace `ForeignPtr` by `Array.Guarded.MutablePtr`.
     In the last release we altered the arrays after initialization
     which corrupted the debugging by the `guarded-allocation` package.
     This should be fixed now.

   * `Shape.sizeOffset`: It does not return a single offset anymore
     but an offset computation function.
     This allows to cache a size computation across many offset computations.

  ## 0.2

   * Add a monad parameter to the mutable `Storable` array type
     and generalize functions to `PrimMonad`s.
     This way the mutating functions can also be used in the `ST` monad.

  ## 0.1.2

   * Add immutable `Boxed` array type and mutable `Storable` array type.

  ## 0.1

   * Split `Shape.C` into `Shape.C` and `Shape.Indexed`.

  ## 0.0

   * Initial version featuring the `Shape.C` class with type function `Index`
     and the immutable `Storable` array type.
basic-deps:
  base: '>=4.5 && <5'
  storable-record: '>=0.0.1 && <0.1'
  semigroups: '>=0.18.3 && <1.0'
  guarded-allocation: '>=0.0.1 && <0.1'
  utility-ht: '>=0.0.10 && <0.1'
  tagged: '>=0.7 && <0.9'
  containers: '>=0.5.4 && <0.7'
  non-empty: '>=0.3.2 && <0.4'
  transformers: '>=0.3 && <0.6'
  deepseq: '>=1.3 && <1.5'
  QuickCheck: '>=2 && <3'
  prelude-compat: '>=0.0 && <0.1'
  primitive: '>=0.6.4 && <0.8'
all-versions:
- '0.0'
- 0.0.1
- 0.0.1.1
- 0.1.1
- 0.1.2
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.4.1
description-type: haddock
description: |-
  Arrays from the basic @array@ package are already very powerful
  compared with arrays in other languages.
  They may have any number of dimensions, are type safe
  and defined in a uniform way using the Ix class
  with free choice of the lower bounds (0, 1, or whatever you like).

  This package goes one step further:
  The shape and the index type are different,
  but the index type is a type function of the shape type.
  This offers much more flexibility and type safety.

  Some examples are:

  * @Range@:
  Allow dynamic choice of lower and upper array bounds
  such as in the 'Array's from the @array@ package.
  You can combine it with other shapes in other dimensions.
  It allows you to describe the bounds of each dimension individually.

  * @Shifted@:
  Describe array bounds by start index and length.
  It is sometimes more natural to use these parameters.
  E.g. a non-negative index type like 'Word' cannot represent @-1@
  and thus cannot encode an empty range starting with index @0@.

  * @ZeroBased, OneBased@:
  Arrays with fixed lower bound, either 0 or 1, respectively.

  * @Cyclic@:
  Indices with wrap-around semantics.

  * @Zero, ()@:
  Arrays with fixed size 0 or 1, respectively.

  * @Enumeration@:
  Arrays with indices like 'LT', 'EQ', 'GT' and a shape of fixed size.

  * @(:+:)@:
  The Append type constructor allows to respresent block arrays,
  e.g. block matrices.
  It also allows to represent non-empty arrays via @():+:sh@.

  * @Set@: Use an arbitrary ordered set as index set.

  * @Map@: Concatenate a set of shapes.

  * @Triangular@:
  A 2D array with the shape of a lower or upper triangular matrix.

  * @Square@: A 2D array where both dimensions always have equal size.

  * @Cube@: A 3D array where all three dimensions always have equal size.

  * @Tagged@: Statically distinguish shapes and indices that are isomorphic.

  The @lapack@ package defines even more fancy shapes
  like tall rectangular matrices, triangular matrices and banded matrices.
license-name: BSD-3-Clause
