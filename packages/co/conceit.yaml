homepage: ''
changelog-type: text
hash: c443cc867af659a754ce40fe2d37421af323e0b8b22fdb11b4dda591ad2f408d
test-bench-deps: {}
maintainer: diaz_carrete@yahoo.com
synopsis: Concurrent actions that may fail with a value.
changelog: "0.5.0.0\r\n=======\r\n    - Removed all dependencies except base. This
  is a breaking change because\r\n\t  we lose the Alt, Plus and Apply instances.\r\n\r\n0.4.0.0\r\n=======\r\n
  \   - Removed Monad, MonadThrow, MonadCatch instances.\r\n    - Added Semigroup
  instance.\r\n    - Removed exception and mtl dependencies.\r\n\r\n0.3.1.0\r\n=======\r\n
  \   - Made internal function \"conceit'\" public.\r\n\r\n0.3.0.0\r\n=======\r\n
  \   - Incorporate the solution to issue #27 from the async package\r\n      https://github.com/simonmar/async/issues/27
  \r\n      This changes the order of cancellation of threads in case\r\n      of
  an asynchronous exception.\r\n\r\n0.2.2.1\r\n=======\r\n    - Qualified Alt to make
  it compile with GHC 7.10.\r\n\r\n0.2.2.0\r\n=======\r\n    - Bumped void and exceptions
  dependencies.\r\n\r\n0.2.1.0\r\n=======\r\n    - Now >> behaves differently from
  the concurrent *>, and sequences its\r\n      arguments. It makes more sense for
  the monad. This is what Haxl does as\r\n      well. \r\n    \r\n0.2.0.0\r\n=======\r\n
  \   - Internal changes that remove the necessity for (Show e,Typeable e)\r\n      constraints.\r\n
  \   - Removed async dependency.\r\n    - Many new instances for Conceit.\r\n\r\n0.1.1.0\r\n=======\r\n\r\n
  \   - Added _Conceit.\r\n"
basic-deps:
  base: '>=4.8 && <5'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.2.1
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
- 0.5.0.0
author: Daniel DÃ­az Carrete
latest: 0.5.0.0
description-type: markdown
description: "conceit\r\n=======\r\n\r\nA version of the\r\n[Concurrently](http://hackage.haskell.org/package/async-2.0.2/docs/Control-Concurrent-Async.html#t:Concurrently)\r\nApplicative
  from Simon Marlow's\r\n[async](http://hackage.haskell.org/package/async) package,
  with the difference\r\nthat the concurrent computation stops if any of the actions
  returns a Left\r\nvalue, not only in the case of exceptions.\r\n\r\nThe internals
  have been copied wholesale from Concurrently, with modifications\r\nto support the
  new behaviour.\r\n\r\nIncludes a useful Bifunctor instance.\r\n"
license-name: BSD-3-Clause
