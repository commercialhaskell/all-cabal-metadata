homepage: https://github.com/obsidiansystems/constraints-extras
changelog-type: markdown
hash: 0897821d9d0428f41cf2179b2a8e99e0053e96a98dd39d91a31ab2851052338f
test-bench-deps: {}
maintainer: maintainer@obsidian.systems
synopsis: Utility package for constraints
changelog: |
  # Revision history for constraints-extras

  ## 0.3.2.0

  * Provide `ArgDict` instances for sums of functors.

  ## 0.3.1.0

  * Allow deriving instances with `deriveArgDict` for data and newtype family instances by supplying the name of one of its constructors
  * Support GHC 9.0.1

  ## 0.3.0.3 - 2020-06-22

  * Update version bounds for GHC 8.10

  ## 0.3.0.2 - 2019-09-30

  * Update version bounds for GHC 8.8

  ## 0.3.0.1 - 2019-05-17

  * Drop markdown-unlit in favor of using regular "Bird"-style LHS to avoid some cross-compilation problems

  ## 0.3 - 2019-05-16

  * Added a parameter for the type class, to allow for custom not-fully-polymorphic instances of ArgDict in cases where e.g. your key type contains dictionaries for specific classes. You will now need FlexibleInstances, MultiParamTypeClasses for the instances created by deriveArgDict.

  ## 0.2.3.5 - 2019-05-04

  * Bumped version bounds on base and template-haskell to admit the versions from GHC 8.6.x

  ## 0.2.3.4 - 2019-03-22

  * Added ChangeLog.md
  * Replaced some occurrences of <> in Data.Constraint.Extras.TH with ++ so that the module will hopefully build with GHC 8.0.2 and 8.2.2 without needing to import Data.Semigroup.
basic-deps:
  constraints-extras: -any
  base: '>=4.9 && <4.16'
  constraints: '>=0.9 && <0.14'
  aeson: -any
  template-haskell: '>=2.11 && <2.18'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.2.1
- 0.2.3.0
- 0.2.3.1
- 0.2.3.2
- 0.2.3.3
- 0.2.3.4
- 0.2.3.5
- '0.3'
- 0.3.0.1
- 0.3.0.2
- 0.3.1.0
- 0.3.2.0
author: Cale Gibbard, Ali Abrar
latest: 0.3.2.0
description-type: markdown
description: |
  constraints-extras [![travis-ci](https://api.travis-ci.org/obsidiansystems/constraints-extras.svg?branch=develop)](https://travis-ci.org/obsidiansystems/constraints-extras)
  ==================

  Example usage:
  --------------

  ```haskell

  > {-# LANGUAGE GADTs #-}
  > {-# LANGUAGE KindSignatures #-}
  > {-# LANGUAGE PolyKinds #-}
  > {-# LANGUAGE ScopedTypeVariables #-}
  > {-# LANGUAGE TemplateHaskell #-}
  > {-# LANGUAGE TypeApplications  #-}
  > {-# LANGUAGE TypeFamilies #-}
  > {-# LANGUAGE FlexibleInstances #-}
  > {-# LANGUAGE MultiParamTypeClasses #-}
  > {-# LANGUAGE UndecidableInstances #-}
  > {-# LANGUAGE ExistentialQuantification #-}
  >
  > import Data.Aeson
  > import Data.Constraint.Forall
  > import Data.Constraint.Extras
  > import Data.Constraint.Extras.TH
  >
  > data A :: * -> * where
  >   A_a :: A Int
  >   A_b :: Int -> A ()
  >
  > deriveArgDict ''A
  >
  > data B :: * -> * where
  >   B_a :: A a -> A a -> B a
  >   B_x :: Int -> B Int
  >
  > deriveArgDict ''B
  >
  > data V :: (* -> *) -> * where
  >   V_a :: A Int -> V A
  >
  > deriveArgDict ''V
  >
  > data DSum k f = forall a. DSum (k a) (f a)
  >
  > -- Derive a ToJSON instance for our 'DSum'
  > instance forall k f.
  >   ( Has' ToJSON k f -- Given a value of type (k a), we can obtain an instance (ToJSON (f a))
  >   , ForallF ToJSON k -- For any (a), we have an instance (ToJSON (k a))
  >   ) => ToJSON (DSum k f) where
  >   toJSON (DSum (k :: k a) f) = toJSON
  >     ( whichever @ToJSON @k @a $ toJSON k -- Use the (ForallF ToJSON k) constraint to obtain the (ToJSON (k a)) instance
  >     , has' @ToJSON @f k $ toJSON f -- Use the (Has' ToJSON k f) constraint to obtain the (ToJSON (f a)) instance
  >     )
  >
  > data Some k = forall a. Some (k a)
  >
  > -- Derive a FromJSON instance for our 'DSum'
  > instance (FromJSON (Some f), Has' FromJSON f g) => FromJSON (DSum f g) where
  >   parseJSON x = do
  >     (jf, jg) <- parseJSON x
  >     Some (f :: f a) <- parseJSON jf
  >     g <- has' @FromJSON @g f (parseJSON jg)
  >     return $ DSum f g
  >
  > main :: IO ()
  > main = return ()
  ```
license-name: BSD-3-Clause
