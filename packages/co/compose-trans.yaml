all-versions:
- '0.0'
- '0.1'
author: Miguel Mitrofanov
basic-deps:
  base: '>=2 && <5'
  mtl: '>=0'
changelog: ''
changelog-type: ''
description: |-
  A version of monad transformers that (a) allows one to convince the type checker that transformer application is a monad, and (b) doesn't need lots of boilerplate to add a new transformer. It's supposed to play nicely with @Control.Monad.Trans@.

  In order to make a new transformer (say, @T@) an instance of @TransM@ (@TransP@, @TransF@) class, all you have to do is:

  * define @instance MonadTrans T@ &#x2014; which you've probably done already

  * define @instance Monad m => Monad (T m)@ &#x2014; also something quite common (for @TransP@ and @TransF@ you'd need another instance for @MonadPlus@ and @MonadFix@, respectively).

  * write @instance Trans T where transMInst = instM@ &#x2014; which is exactly one line of boilerplate. Sorry about that.

  After that, you can use your new and shiny transformer in compositions, like @ReaderT Char :. T :. WriterT String@ &#x2014; and such a composition would automagically become a monad transformer.
description-type: haddock
hash: cadfd6cdebe94c3adc5acddba1d849fe4850c1eb6335487d2b7561145abf94ee
homepage: ''
latest: '0.1'
license-name: BSD-3-Clause
maintainer: miguelimo38@yandex.ru
synopsis: Composable monad transformers
test-bench-deps: {}
