all-versions:
- 0.1.2
author: Mihai Giurgeanu
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  cold-widow: '>=0'
changelog: ''
changelog-type: ''
description: "# cold-widow\n\nExecutables and Haskell library to transfer files via
  QR Codes.\n\nThe idea is to generate a list of qr-coedes representing the archived\nversion
  folder. The qr-codes will be read as text values by any qr-code\nreader supporting
  alpahnumeric encoding. The texts can be send via any\ntechnology, like email, sms,
  whatsapp, skype, hangouts, etc to the final\ndestination. At the final destination,
  you feed these texts to the decoder\nand get the original file structure.\n\n##
  Installation\n\nThe only supported installation method is from source files,\n[stack](http://www.haskellstack.org/).\n\n##
  Building from source\n\n### Prerequisites\n\nYou will need to [download and install
  stack](https://docs.haskellstack.org/en/stable/README/#how-to-install).\n\nYou also
  need [git](https://git-scm.com/) to get the latest source code.\n\n### Get the source\n\n
  \   git clone https://github.com/mihaigiurgeanu/cold-widow.git\n    \n### Building\n\nTo
  build the project, you need first to run `stack setup`. This command\nwill make
  sure you have the correct haskell compiler, and, if you don't\nhave it, it will
  download and install one in a separate location in such\na way to not interract
  with your existing haskell environment (if you have one):\n\n    #> cd /the/location/of/cold-widow/\n
  \   #> stack setup\n    \nAfter the setup (you only need to run setup once) you
  may build, test or install\nthe software. To build, simply issue:\n\n    #> stack
  build\n    \nTo run the tests:\n\n    #> stack test\n    \nTo install it in the
  stack's install directory, type:\n\n    #> stack install\n    \n## Usage\n\nThe
  only functions implemented until now are encoding and decoding a file to/from\na
  textual form using only the alphanumeric symbols allowed in a QR Code. This will\nallow
  you to read the generated QR Code with any QR Code reader, copy paste the\ntext
  in an email or whatever transport you choose.\n\nTo generate QR Codes you need to
  use external programs to archive and compress\nyour files, to split the archive
  in appropriate size to be encoded in the QR Codes.\nFor example:\n\n    #> tar cv
  informic-0.1.0/*.patch | bzip2 -9 | split -b 2900 - informic-0.1.0/x\n    \nwill
  archive the files with the extension `.patch` located in the `informic-0.1.0/`\nfolder,
  will compress the archive using `bzpi2` utility, will split the resulting\ncompressed
  archived in files named `xaa`, `xab`, `xac`, etc. of 2900 bytes each\nand will put
  these files into `informic-0.1.0/` folder.\n\nTo encode those files using _cold-widow's
  encode45_ you could use the following:\n\n    #> cd informic-0.1.0\n    #> for i
  in x*; do encode45 $i > $i.txt; done \n    \nThen you should use a qr-code generator
  to generate one qr-code for each\n`xaa.txt`, `xab.txt`, `xac.txt`, etc files generated
  by the above commands. Scan\nthe qr-codes with you mobile phone and copy-paste the
  text into a email message\nthat you can send to anyone you want.\n\nFinally, using
  `decode45` you can convert the fragments of text back to the original\narchive.
  Copy in the clipboard the text coresponding to first part (the file `xaa`\nin the
  example above) and paste it in a file, for example in the `xaa.txt` file:\n\n    #>
  decode45 xaa < xaa.txt\n\nThis will generate on disk the file named `xaa` with the
  same contents of the \noriginal `xaa` file which is a part of the splited compressed
  archive. After\ndoing this for all file parts, you can use the following to obtain
  the original\nfiles structure:\n\n    #> cat x* | bzcat | tar xv\n\n## encode45\n\nThe
  `encode45` utility will get a file as first argument and will output\nthe encoded
  text representing the file. The text will contain only characters\nallowed by the
  qr-code alphanumeric mode.\n\nTo use it as a qr-code, you need to pass a maximum
  of about 2900 bytes file to\nthe `encode45` utility.\n\n## decode45\n\n`decode45`
  will read from standard output a text containing only the characters\nallowed in
  qr-code alphanumeric mode and will decoded as a binary file. The name\nof the file
  to which `decode45` will save the binary data _must_ be passed as\nthe first argument
  of the `decode45` method.\n\n"
description-type: markdown
hash: 9b56c36ac3692490ec92991944865f3fbeb1c72225fe4b2cd98c3d99c059feae
homepage: https://github.com/mihaigiurgeanu/cold-widow#readme
latest: 0.1.2
license-name: BSD-3-Clause
maintainer: mihai.giurgeau@gmail.com
synopsis: File transfer via QR Codes.
test-bench-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  cold-widow: '>=0'
  hspec: '>=0'
