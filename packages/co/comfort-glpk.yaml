homepage: ''
changelog-type: ''
hash: afc11e1306b702bf1646fd53b30c7299aaa01cf8e82194ab4bf38cbcdb8561a3
test-bench-deps:
  base: '>=4.5 && <5'
  doctest-exitcode-stdio: '>=0.0 && <0.1'
  utility-ht: -any
  doctest-lib: '>=0.1 && <0.2'
  comfort-array: '>=0.5.2'
  comfort-glpk: -any
  QuickCheck: '>=2.1 && <3'
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Linear Programming using GLPK and comfort-array
changelog: ''
basic-deps:
  base: '>=4.5 && <5'
  utility-ht: '>=0.0.16 && <0.1'
  non-empty: '>=0.3.2 && <0.4'
  comfort-array: '>=0.4 && <0.6'
  deepseq: '>=1.3 && <1.5'
  glpk-headers: '>=0.4.1 && <0.6'
all-versions:
- 0.0.0.1
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.0.0.1
description-type: haddock
description: |-
  Simple interface to linear programming functions provided by GLPK
  using the flexible Array shape framework from @comfort-array@.

  E.g. you can use @Shape.Tuple@ to convert safely
  between nested tuples and arrays with the same number of elements.

  > type X = Shape.Element
  > type PairShape = Shape.NestedTuple Shape.TupleIndex (X,X)
  >
  > case Shape.indexTupleFromShape (Shape.static :: PairShape) of
  >   (posIx,negIx) ->
  >     case mapSnd (mapSnd Array.toTuple) <$>
  >          LP.simplex [] [[1.*posIx, (-1).*negIx] ==. 314]
  >            (LP.Minimize,
  >             Array.fromTuple (23,42) :: Array PairShape Double)
  >       of
  >         (Right (LP.Optimal, (absol, (pos, neg)))) ->
  >           printf "absol %f,  pos %f, neg %f\n" absol pos neg
  >         _ -> fail "GLPK solver failed"

  Alternatives: @hmatrix-glpk@, @glpk-hs@
license-name: BSD-3-Clause
