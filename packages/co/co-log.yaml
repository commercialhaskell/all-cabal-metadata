all-versions:
- 0.0.0
- 0.1.0
- 0.2.0
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
author: Dmitrii Kovanikov
basic-deps:
  ansi-terminal: '>=1.0 && <1.1'
  base: '>=4.14 && <4.19'
  bytestring: '>=0.10.8 && <0.13'
  chronos: ^>=1.1 && <1.2
  co-log: '>=0'
  co-log-core: '>=0.3 && <0.4'
  containers: '>=0.5.7 && <0.7'
  contravariant: ^>=1.5
  dependent-map: '>=0.4 && <0.5'
  dependent-sum: '>=0.7 && <0.8'
  directory: ^>=1.3.0
  exceptions: '>=0.8.3 && <0.11'
  filepath: ^>=1.4.1
  mtl: '>=2.2.2 && <2.4'
  run-st: <=0.1.3.0
  text: '>=1.2.3 && <2.2'
  transformers: '>=0.5 && <0.7'
  unliftio-core: ^>=0.2
  vector: '>=0.12.0.3 && <0.14'
changelog: |
  # Changelog

  `co-log` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.6.0.0 - Sep 18, 2023

  ### What's Changed

  * Support GHC-9.6 - replace `typerep-map` with `dependent-map`. by @alaendle in [#264](https://github.com/co-log/co-log/pull/264)
  * Support GHC 9.4. by @alaendle in [#252](https://github.com/co-log/co-log/pull/252)
  * Add MonadUnliftIO instance by @newhoggy in [#240](https://github.com/co-log/co-log/pull/240)
  * Update CI tested GHC versions & workaround for GHC < 9.4.5 (run-st, primitive-unlifted) by @alaendle in [#257](https://github.com/co-log/co-log/pull/257)
  * Derive `MonadFail` for `LoggerT` by @alaendle in [#260](https://github.com/co-log/co-log/pull/260)
  * docs: use relative path to benefit locally reading by @xieyuschen in [#253](https://github.com/co-log/co-log/pull/253)
  * docs: refine readme by @xieyuschen in [#254](https://github.com/co-log/co-log/pull/254)
  * tutorials: add demo for LoggerT and SimpleMsg, #84 by @xieyuschen in [#256](https://github.com/co-log/co-log/pull/256)
  * docs: add a link to tutorial pages and aggregate all tutorial pages by @xieyuschen in [#259](https://github.com/co-log/co-log/pull/259)
  * tutorials: add a tutorial for loggert and message by @xieyuschen in [#261](https://github.com/co-log/co-log/pull/261)
  * Create tags and upload package candidates on version bumps. by @alaendle in [#265](https://github.com/co-log/co-log/pull/265)
  * Added @alaendle as code owner. by @alaendle in [#258](https://github.com/co-log/co-log/pull/258)
  * GA(deps): Bump actions/checkout from 3 to 4 by @dependabot in [#263](https://github.com/co-log/co-log/pull/263)

  ### New Contributors

  * @xieyuschen made their first contribution in [#253](https://github.com/co-log/co-log/pull/253)
  * @newhoggy made their first contribution in [#240](https://github.com/co-log/co-log/pull/240)

  **Full Changelog**: https://github.com/co-log/co-log/compare/v0.5.0.0...v0.6.0.0

  ## 0.5.0.0 - Nov 2, 2022

  * [#230](https://github.com/co-log/co-log/issues/230):
    Support GHC-9.2.
  * Allow `mtl-2.3`.
  * Allow `vector-0.13`.
  * Allow `hedgehog-1.2`.
  * [#187](https://github.com/co-log/co-log/issues/187):
    Remove `CoLog.Concurrent` module and executable.
  * [#243](https://github.com/co-log/co-log/pull/243):
    Improve printing in multiple threads.
  * Drop support for GHC-8.2, GHC-8.4, GHC-8.6, GHC-8.8

  ## 0.4.0.2 — <M> <d>, 2021

  * [#223](https://github.com/co-log/co-log/pulls/223):
    Support GHC-9.0.1.
    Require typerep-map ^>= 0.4

  ## 0.4.0.1 — Apr 18, 2020

  * [#186](https://github.com/co-log/co-log/issues/186):
    Support GHC-8.10.1.

  ## 0.4.0.0 — Jan 19, 2020

  * [#120](https://github.com/co-log/co-log/issues/120):
    Improve time formatting.

    Old: `29-12-2019 22:00:00.000`

    New: `29 Dec 2019 22:00:00.000 +00:00`

    (by [@vrom911](https://github.com/vrom911))
  * [#144](https://github.com/co-log/co-log/issues/144):
    Add Windows CI check.
    (by [@vrom911](https://github.com/vrom911))
  * [#148](https://github.com/co-log/co-log/issues/148):
    Support GHC-8.8.2.
    (by [@chshersh](https://github.com/chshersh))
  * [#119](https://github.com/co-log/co-log/issues/119):
    Add new message type that allows printing messages without
    `Severity`.
    (by [@sphaso](https://github.com/sphaso))
  * [#150](https://github.com/co-log/co-log/issues/150):
    Introduce `formatWith` — beginner-friendly alias for formatting combinator.
    (by [@chshersh](https://github.com/chshersh))
  * Use `chronos-1.1` as `1.0.9` is not Windows-compatible.
    (by [@vrom911](https://github.com/vrom911))
  * [#156](https://github.com/co-log/co-log/issues/156):
    Improve documentation for the `Colog.Concurrent` module.
    (by [@chshersh](https://github.com/chshersh))
  * [#146](https://github.com/co-log/co-log/issues/146):
    Allow `ansi-terminal-0.10`.
    (by [@mpilgrem](https://github.com/mpilgrem))
  * [#124](https://github.com/co-log/co-log/issues/124):
    Implement executable playground for concurrent logging.
    (by [@chshersh](https://github.com/chshersh))

  ## 0.3.0.0 — May 5, 2019

  * [#77](https://github.com/co-log/co-log/issues/77):
    **Important:** Use `chronos` time formatter. This is a breaking change because
    default field map in `RichMessage` now contains different type representing
    time. If you use your custom formatter for time, you should change it.
    Othwerwise no observable differences in the library API usage will be noticed.
  * [#103](https://github.com/co-log/co-log/issues/103):
    **Breaking change:** make `Message` data type polymorhic over the type of severity.

    **Migration guide:** this change is done in backwards-compatible way. If you
    use any fields of the `Message` data type, you should rename them according to
    the following scheme:
    ```haskell
    messageSeverity -> msgSeverity
    messageStack    -> msgStack
    messageText     -> msgText
    ```
  * Export more formatting functions to make implementation of custom formatters easier.
  * [#96](https://github.com/co-log/co-log/issues/96):
    Add `simpleMessageAction` and `richMessageAction` to work with `Message`s.
  * Use `co-log-core` of version `0.2.0.0`.

  ## 0.2.0 — Nov 15, 2018

  * [#45](https://github.com/co-log/co-log/issues/45):
    Introduce approach for concurrent log writing.
  * [#46](https://github.com/co-log/co-log/issues/46):
    Moves `logStringStdout`, `logStringStderr`, `logStringHandle`,
    `withLogStringFile` from `Colog.Actions` to `Colog.Core.IO`
  * [#77](https://github.com/co-log/co-log/issues/77):
    Remove `relude` from dependencies.
    Add HLint check to Travis CI.
  * [#64](https://github.com/co-log/co-log/issues/64):
    Introduce basic benchmarks.
  * [#20](https://github.com/co-log/co-log/issues/20):
    Add experimental support for logger rotation (see `Colog.Rotation` module).
  * [#39](https://github.com/co-log/co-log/issues/39):
    Support GHC-8.2.2 and GHC-8.6.2.

  ## 0.1.0

  * [#37](https://github.com/co-log/co-log/issues/37):
    Add bounds to all dependencies. Move `Prelude` to the
    `other-modules` section.

  ## 0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/co-log/co-log/releases
changelog-type: markdown
description: |
  # co-log

  <img align="left" width="180" height="180" src="https://user-images.githubusercontent.com/8126674/80955687-92f21a80-8df7-11ea-90d3-422dafdc8391.png">

  [![GitHub CI](https://github.com/co-log/co-log/workflows/CI/badge.svg)](https://github.com/co-log/co-log/actions)
  [![MPL-2.0 license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/co-log/co-log/blob/main/LICENSE)

  `co-log` is a composable and configurable logging framework. It
  combines all the benefits of Haskell idioms to provide a reasonable
  and convenient interface. Although the library design uses some advanced
  concepts in its core, we are striving to provide beginner-friendly API. The
  library also provides the complete documentation with a lot of beginner-friendly
  examples, explanations and tutorials to guide users. The combination of a
  pragmatic approach to logging and fundamental Haskell abstractions allows us to
  create a highly composable and configurable logging framework.

  ---

  If you're interested in how different Haskell typeclasses are used to
  implement core functions of `co-log`, you can read the following blog
  post which goes into detail about the internal implementation specifics:

  - [co-log: Composable Contravariant Combinatorial Comonadic Configurable Convenient Logging](https://kowainik.github.io/posts/2018-09-25-co-log)

  ## Co-Log Family

  Co-Log is a family of repositories for a composable and configurable logging
  framework `co-log`.

  Here is the list of currently available repositories and libraries that you can
  check out:

  |                                                                    |                                                                                                                                                        |                                    |
  | :----------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------- |
  | [`co-log-core`](https://github.com/co-log/co-log-core)             | lightweight package with basic data types and general idea which depends only on `base`                                                                | [![Hackage][hk-img-core]][hk-core] |
  | [`co-log`](https://github.com/co-log/co-log)                       | taggless final implementation of logging library based on `co-log-core`                                                                                | [![Hackage][hk-img]][hk]           |
  | [`co-log-polysemy`](https://github.com/co-log/co-log-polysemy)     | implementation of logging library based on `co-log-core` and the [`polysemy`](http://hackage.haskell.org/package/polysemy) extensible effects library. | [![Hackage][hk-img-ps]][hk-ps]     |
  | [`co-log-benchmarks`](https://github.com/co-log/co-log-benchmarks) | benchmarks of the `co-log` library                                                                                                                     | -                                  |

  ## `co-log` library

  Logging library based on [`co-log-core`](https://github.com/co-log/co-log-core)
  package. Provides ready-to-go implementation of logging. This README contains
  _How to_ tutorial on using this library. This tutorial explains step by step how
  to integrate `co-log` into small basic project, specifically how to replace
  `putStrLn` used for logging with library provided logging.

  All code below can be compiled and run with the following commands:

  ```shell
  $ cabal build
  $ cabal exec readme
  ```

  ## Preamble: imports and language extensions

  Since this is a literate haskell file, we need to specify all our language
  extensions and imports up front.

  ```haskell
  {-# LANGUAGE FlexibleContexts  #-}
  {-# LANGUAGE OverloadedStrings #-}

  import Control.Monad.IO.Class (MonadIO, liftIO)

  import Colog (Message, WithLog, cmap, fmtMessage, logDebug, logInfo, logTextStdout, logWarning,
                usingLoggerT)

  import qualified Data.Text as Text
  import qualified Data.Text.IO as TextIO
  ```

  ## Simple IO function example

  Consider the following function that reads lines from `stdin` and outputs
  different feedback depending on the line size.

  ```haskell
  processLinesBasic :: IO ()
  processLinesBasic = do
      line <- TextIO.getLine
      case Text.length line of
          0 -> do
              -- here goes logging
              TextIO.putStrLn ">>>> Empty input"
              processLinesBasic
          n -> do
              TextIO.putStrLn ">>>> Correct input"
              TextIO.putStrLn $ "Line length: " <> Text.pack (show n)
  ```

  This code mixes application logic with logging of the steps. It's convenient to
  have logging to observe behavior of the application. But `putStrLn` is very
  simple and primitive way to log things.

  ## Using `co-log` library

  In order to use `co-log` library, we need to refactor `processLinesBasic`
  function in the following way:

  ```haskell
  processLinesLog :: (WithLog env Message m, MonadIO m) => m ()
  processLinesLog = do
      line <- liftIO TextIO.getLine
      case Text.length line of
          0 -> do
              -- here goes logging
              logWarning "Empty input"
              processLinesLog
          n -> do
              logDebug "Correct line"
              logInfo $ "Line length: " <> Text.pack (show n)
  ```

  Let's summarize required changes:

  1. Make type more polymorphic: `(WithLog env Message m, MonadIO m) => m ()`
  2. Add `liftIO` to all `IO` functions.
  3. Replace `putStrLn` with proper `log*` function.

  ## Running actions

  Let's run both functions:

  ```haskell
  main :: IO ()
  main = do
      processLinesBasic

      let action = cmap fmtMessage logTextStdout
      usingLoggerT action processLinesLog
  ```

  And here is how output looks like:

  ![screenshot from 2018-09-17 20-52-01](https://user-images.githubusercontent.com/4276606/45623973-8bafb900-babb-11e8-9e20-4369a5a8e5ff.png)

  ## More Tutorials

  To provide a more user-friendly introduction to the library, we've
  created the tutorial series which introduces the main concepts behind `co-log`
  smoothly, please [check more details here](./tutorials/README.md).

  [hk-img]: https://img.shields.io/hackage/v/co-log.svg?logo=haskell
  [hk-img-ps]: https://img.shields.io/hackage/v/co-log-polysemy.svg?logo=haskell
  [hk-img-core]: https://img.shields.io/hackage/v/co-log-core.svg?logo=haskell
  [hk]: https://hackage.haskell.org/package/co-log
  [hk-ps]: https://hackage.haskell.org/package/co-log-polysemy
  [hk-core]: https://hackage.haskell.org/package/co-log-core
description-type: markdown
hash: 91c14447cb1cbdd6d76317e80d2acd75efe4d964975a57f9731d8af56a4fba7a
homepage: https://github.com/co-log/co-log
latest: 0.6.0.2
license-name: MPL-2.0
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Composable Contravariant Comonadic Logging Library
test-bench-deps:
  Glob: ^>=0.10.0
  base: '>=4.14 && <4.19'
  co-log: '>=0'
  co-log-core: '>=0'
  doctest: '>=0.16.0 && <0.23'
  hedgehog: '>=1.0 && <1.5'
