all-versions:
- 0.0.0.0
- 0.0.1.0
- 0.0.2.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Nathan "Taneb" van Doorn
basic-deps:
  base: '>=4.6 && <4.20'
  containers: '>=0.4 && <0.8'
changelog: |
  # Revision history for commutative-semigroups

  ## 0.1.0.2 -- 2023-12-22

  - Support GHC 9.8.1

  ## 0.1.0.1 -- 2023-04-17

  - Loosen version bounds
  - Support GHC 9.6.1

  ## 0.1.0.0 -- 2022-06-12

  - `Commutative (Product a)` now requires `CommutativeProduct a`.
    `CommutativeProduct` is a new class to indicate `(*)` from `Num` is
    commutative, which is not required by `Num`. (Example:
    multiplication on
    [quaternions](https://en.wikipedia.org/wiki/Quaternion) is
    non-commutative, and the `Quaternion a` type from the `linear`
    package has a valid `instance RealFloat a => Num (Quaternion a)`.)

    **Remark:** There is also no canonical subclass class in the `Num`
    hierarchy which implies commutative `(*)`, as both `Integral` and
    `Floating` instances work here:

    - `Integral` instances are customarily Euclidean Domains, which are
      commutative rings with extra conditions.

    - `Floating` instances customarily expect `(+)`, `(*)`, and `exp` to
      form an exponential field, which is also a commutative ring with
      extra conditions.

  ## 0.0.2.0 -- 2022-03-26

  - Add `instance Ord a => Commutative (Set a)`
  - Add `instance Commutative IntSet`

  ## 0.0.1.0 -- 2021-01-28

  - Add instance for `Maybe`.

  ## 0.0.0.0 -- 2021-01-06

  Initial version, created from `groups` package.
changelog-type: markdown
description: |
  # Commutative Semigroup

  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/commutative-semigroups.svg)](https://hackage.haskell.org/package/commutative-semigroups)  [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/reflex-frp/commutative-semigroups/LICENSE)

  A commutative semigroup is a semigroup where the order of arguments to mappend does not matter.

  ```haskell
  class Semigroup g => Commutative g
  ```
description-type: markdown
hash: 3629c249ac5be72e48eac677969f0638e48b9199370b64ffcf6ceeac391ecc6e
homepage: ''
latest: 0.1.0.2
license-name: BSD-3-Clause
maintainer: maintainer@obsidian.systems
synopsis: Commutative semigroups
test-bench-deps: {}
