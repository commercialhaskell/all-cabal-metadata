homepage: https://conferer.ludat.io
changelog-type: markdown
hash: 8cc7ffc21af1ec12eb6f4ecbf1925332972519f4625cbb4dc744a618364bfa95
test-bench-deps:
  conferer: -any
  bytestring: '>=0.10 && <0.12'
  base: '>=4.3 && <5'
  hspec: -any
  text: '>=1.1 && <1.3'
  filepath: '>=1.0 && <2.0'
  containers: '>=0.5 && <0.7'
  deepseq: -any
  QuickCheck: -any
  directory: '>=1.2 && <2.0'
maintainer: lucas6246@gmail.com
synopsis: Configuration management library
changelog: |
  # Changelog
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [PVP](https://pvp.haskell.org/).

  ## [Unreleased]

  Nothing

  ## [v1.1.0.0] - 2021-03-01

  ### Changed

  * Rename `fromFilePath` to `fromFilePath'`.
  * Define a new `fromFilePath` whose type is `FilePath -> SourceCreator` instaed of `FilePath -> IO Source`.
  * (Internal) Remove the mismatched type exception since it's not actionable by the user
  * (Internal) Use a list for default values so that many different defaults are available,
    possible point of extension in the future.
  * Constraint valid key names to lowercase ascii and numbers (previously some non ascii characters were allowed)

  ### Added

  * `isValidKeyFragment` and `isKeyCharacter` to validate `Key`s
  * Added an overriding method based on type and key (details in the docs)

  ## [v1.0.0.1] - 2021-01-17

  ### Fixed

  * In the `File`'s `FromConfig` instance, if the default is present and it's type
  is `File`, it throws, which doesn't follow the rest of the library.

  ### Added

  * Add `mkConfig'` which allows creating a config by passing a list of defaults and
  a list of source creators.
  * Add `addSources`, which allows to add several sources to a config.
  * Define the type `Defaults`, which is a list of associations from `Key` to
  `Dynamic`.

  ## [v1.0.0.0] - 2020-12-29

  First release

  [Unreleased]: https://github.com/ludat/conferer/compare/conferer_v1.1.0.0...HEAD
  [v1.1.0.0]: https://github.com/ludat/conferer/releases/tag/conferer_v1.0.0.1...conferer_v1.1.0.0
  [v1.0.0.1]: https://github.com/ludat/conferer/releases/tag/conferer_v1.0.0.0...conferer_v1.0.0.1
  [v1.0.0.0]: https://github.com/ludat/conferer/releases/tag/v0.0.0.0...conferer_v1.0.0.0
basic-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.3 && <5'
  text: '>=1.1 && <2.1'
  filepath: '>=1.0 && <2.0'
  containers: '>=0.5 && <0.7'
  directory: '>=1.2 && <2.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.1.1
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
author: Lucas David Traverso
latest: 1.1.0.0
description-type: markdown
description: "<h1 align=\"center\">Conferer</h1>\n<p align=\"center\">\n    <a href=\"https://img.shields.io/travis/ludat/conferer\"
  alt=\"Travis CI\">\n        <img src=\"https://img.shields.io/travis/ludat/conferer\"
  />\n    </a>\n    <a href=\"https://img.shields.io/hackage/v/conferer\" alt=\"Hackage
  version\">\n        <img src=\"https://img.shields.io/hackage/v/conferer\" />\n
  \   </a>\n    <a href=\"https://img.shields.io/hackage-deps/v/conferer\" alt=\"Hackage
  deps\">\n        <img src=\"https://img.shields.io/hackage-deps/v/conferer\" />\n
  \   </a>\n</p>\n\n## The problem\n\nHave you ever tried configuring a Haskell application?
  If you are not the author\nyou are usually out of luck and the only way to configure
  it is recompiling, and\neven if you are the author you have to write that logic
  yourself (reading env vars,\nfiles or cli params), what about partial updates? and
  environments? or error handling?\n\n## One solution: Conferer\n\nConferer is a library
  that defines ways of getting configuration for your\nHaskell application and the
  libraries it uses in a very ergonomical way.\n\n## Example: one Settings\n\nLet's
  say I want to configure a warp server, then we'd do:\n\n```haskell\nmain = do\n
  \ -- First we create a Config, which defines which sources our config will be\n
  \ -- reading, by default cli params, env vars and .properties files\n  config <-
  defaultConfig \"awesomeapp\"\n  -- Then we use getFromConfig with some arbitrary
  key (to scope the server\n  -- config) and we use our Config to generate a Warp
  Settings\n  warpConfig :: Warp.Settings <- getFromConfig \"server\" config\n\n  --
  Afterwards we use the Settings as usual\n  Warp.runSettings warpConfig myApp\n```\n\nNow
  I need to chage the port of the app, I can change it by either:\n\n* Setting cli
  params like `./myApp --server.port=5555`\n* Setting an environment variable called
  `AWESOMEAPP_SERVER_PORT=5555`\n* In a `config/dev.properties` file, you can have
  `server.port=5555`\n\nAnd you may also get that value from different configuration
  sources like\nredis, json file, dhall file or whichever you may need.\n\n## Example
  2: many different values with defaults\n\nLet's say I want to configure a warp server
  and a redis db (using hedis), To \ndo that we'd do:\n\n```haskell\n\n-- First we
  create our configuration record which holds all the configurations\n-- our app needs\ndata
  AppConfig = AppConfig\n  { appConfigWarp :: Settings\n  -- ^- From Warp\n  , appConfigHedis
  :: ConnectionInfo\n  -- ^- From Hedis\n  , appConfigSecret :: Text\n  -- ^- Some
  custom value we need\n  } deriving (Generic)\n  -- ^- We need to derive Generic
  to derive FromConfig\n\n-- This typeclass defines how to create our type from a
  bunch of string based\n-- key/values, (which our Config is), for records we can
  derive it using\n-- Generics\ninstance FromConfig AppConfig\n\n-- Now we need a
  default value for our app, all apps should be able to work\n-- at least somewhat
  stupidly even if the user doens't supply configurations\n-- at all\ninstance DefaultConfig
  AppConfig where\n  configDef = AppConfig\n    { appConfigWarp = setPort 2222 configDef\n
  \   -- ^- We want the default Warp config but the port should be 2222\n    --    if
  the config doesn't mention it\n    , appConfigHedis = configDef \n    -- ^- defaults
  for hedis are ok\n    , appConfigSecret = \"very secret... shhh\"\n    -- ^- we
  decide some random default, notice that Text has no default\n    --    so using
  configDef here won't compile\n    }\n\n\nmain = do\n  -- Like last time we create
  the config\n  config <- defaultConfig \"awesomeapp\"\n  -- Then we use getFromRootConfig
  without a key since Generics on AppConfig\n  -- already scoped everything inside
  itself and we use our Config to\n  -- generate an AppConfig\n  warpConfig :: AppConfig
  <- getFromRootConfig config\n\n  -- Afterwards we use the Settings as usual\n  Warp.runSettings
  warpConfig myApp\n```\n\nNow to configure our app we can use the same sources as
  before (env vars, cli,\nfiles, etc) but using the following flags we can configure:\n\n*
  `--warp.port=5555`: set warp's server port to 5555\n* `--secret=real_secrets`: set
  our custom secret to `\"real_secrets\"`\n* `--hedis=redis://username:password@host:42/2`:
  set hedis' connection to that\n* `--hedis.host=redis.example.com`: set hedis' connection
  host to `redis.example.com`\n\n\n## Existing sources\n\nSources usually incur in
  many dependencies so they are split into different\npackages\n\n* *[Json](https://hackage.haskell.org/package/conferer-source-json)*
  (depends on `aeson`)\n* *[Dhall](https://hackage.haskell.org/package/conferer-source-dhall)*
  (depends on `dhall`)\n* *[Yaml](https://hackage.haskell.org/package/conferer-source-yaml)*
  (depends on `yaml`) \n\n## Existing FromConfig instances\n\nDefault instances for
  fetching a values from a config (usually a config value\nfor some library)\n\n*
  *[snap-server](https://hackage.haskell.org/package/conferer-snap)*\n* *[warp](https://hackage.haskell.org/package/conferer-warp)*\n*
  *[hedis](https://hackage.haskell.org/package/conferer-hedis)*\n* *[hspec](https://hackage.haskell.org/package/conferer-hspec)*\n\n##
  Utilities\n\nThere are as well some utilities to change sources:\n\n* `Conferer.Source.Namespace`:
  All keys must be namespaced and the namespace\n  is striped for lookup\n* `Conferer.Source.Mapped`:
  Using a map key to maybe key you can change the\n  name of a key or even hiding
  some key\n* `Conferer.Source.Simple`: Get keys from a hardcoded map key to string\n\n##
  Future maybe things\n\n* Interpolate keys with other keys: `{a: \"db\", b: \"${a}_thing\"}`,
  getting `b`\n  will give `\"db_thing\"` (maybe) even in different levels of configuration\n*
  A LOT of sources\n* A LOT of `FromConfig` implementations\n"
license-name: MPL-2.0
