all-versions:
- 0.1.0.0
- 0.2.0.0
author: Mateusz Kowalczyk
basic-deps:
  base: '>=0'
changelog: |
  # Changelog for concurrent-resource-map

  ## Unreleased changes

  ## 0.2.0.0

  * Add `withInitialisedResource` function for querying possibly-missing
    resources.

  * Abstract away the underlying map type. You're no longer forced to
    use `Data.Map`. The downside is that you're forced to choose now via
    an instance. This hapens to keep dependencies even more minimal.

  ## 0.1.0.0

  * Initial release.
changelog-type: markdown
description: |
  # concurrent-resource-map [![Build Status](https://travis-ci.com/Fuuzetsu/concurrent-resource-map.svg?branch=master)](https://travis-ci.com/Fuuzetsu/concurrent-resource-map)

  User-counted resource map with automatic resource collection, aimed to
  be used in concurrent setting.

  Consider having some sort of resource that you need properly
  initialised and cleaned up but only once and only for as long as there
  are interested users (threads). Further, instead of only a single
  resource, you want a collection of such resources, keyed on some
  value.

  This package implements a simple bracket-based scheme that manipulates
  a resource map by counting number of initalisations and clean-ups: if
  it detects that the cleanup is from the last user, it removes the
  resource from the map all together. See the code/hackage for
  documentation.
description-type: markdown
hash: 6c1ae34e497c67b6d7e9c5606a4a1cef6b745cb2930d747d615ea65a6ccc4b02
homepage: https://github.com/Fuuzetsu/concurrent-resource-map#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: fuuzetsu@fuuzetsu.co.uk
synopsis: Concurrent resource map
test-bench-deps:
  base: '>=4.8 && <5'
  concurrent-resource-map: '>=0'
  containers: '>=0'
  random: '>=0'
  stm: '>=0'
