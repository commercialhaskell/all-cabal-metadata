all-versions:
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.6.0
- 0.1.7.0
- 0.1.8.0
author: Norbert Dzikowski
basic-deps:
  aeson: '>=2.2.3 && <2.3'
  base: '>=0'
  convex-schema-parser: '>=0'
  deepseq: '>=1.4.8 && <1.6'
  directory: '>=0'
  filepath: '>=0'
  fsnotify: '>=0.4.3 && <0.5'
  optparse-applicative: '>=0.19.0 && <0.20'
  parsec: '>=0'
  process: '>=0'
  stm: '>=2.5.3 && <2.6'
  yaml: '>=0.11.11 && <0.12'
changelog: |
  # Revision history for convex-schema-parser

  ## 0.1.7.0 -- 2025-07-21

  * **Codegen Improvements Rust/Python:**
      * We now generated `<FunctionPrefix>ArgObject`s for convex functions which receive parameters.
      * We now enforce named parameters for the generated python functions.

  ## 0.1.6.0 -- 2025-07-21

  * **Codegen Improvements Rust:**
      * `convex-schema-parser` now properly handles union types with special chars.

  ## 0.1.5.0 -- 2025-07-12

  *   **Backend Improvements:**
      *   **Python:**
          *   The generated Python code now correctly orders class and constant definitions based on their dependencies, resolving issues with out-of-order declarations.
          *   Added support for `ConvexInt64` with Pydantic, ensuring proper validation and serialization.
      *   **Rust:**
          *   Generated `TryFrom` implementations for anonymous enums, improving type safety and ergonomics.

  ## 0.1.4.0 -- 2025-07-09

  *   **Fixes:**
      *   Properly unify nested types during the unification pass.

  ## 0.1.3.0 -- 2025-07-08

  *   **Schema Parsing:**
      *   More robust implementation of the schema parser provides better error handling and more accurate parsing.
      *   Correctly handles foreign imported types.
      *   Support for `i64`, `f64`, `ArrayBuffer`, and `v.bytes()` has been added.

  *   **Backend Improvements:**
      *   **Rust:**
          *   Custom `serde` implementation for `convex::Value`.
          *   Validator for generated types.
          *   Typed subscription streams for Convex subscriptions.
      *   **Python:**
          *   Validator for generated types.
          *   Pydantic annotations to handle fields prefixed with `_`.
          *   Typed subscription generators for Convex subscriptions.

  *   **Developer Experience:**
      *   New `init` command to guide users through the setup process.
      *   `optparse-applicative` for a better CLI experience.
      *   New "dev mode" to automatically regenerate code on file changes.
      *   `justfile` to provide a simple way to run common commands.

  *   **Fixes:**
      *   **Rust Backend:**
          *   Correctly use the inner optional value when generating functions.
          *   Fixed a bug where `innerValueConversion` was not being properly handled for functions.
          *   Custom structs now know how to encode themselves to `convex::Value`.
      *   **Python Backend:**
          *   Removed redundant imports from the generated Python code.
          *   Properly indent code with helpers.
          *   Reverted to a sync client.
      *   **General:**
          *   Normalized generated strings for easier testing.
          *   Namespaced functions to avoid conflicts in the Python and Rust backends.
          *   Fixed a bug where empty function arguments were not being properly handled in the action parser.
          *   Properly unify nested types during the unification pass.

  *   **Miscellaneous:**
      *   Updated README and LICENSE.
      *   Added a CI/CD pipeline for releases.
      *   Support for GHC 9.6.7.

  ## 0.1.0 -- 2025-06-30

  * First version
changelog-type: markdown
description: "# Convex Schema Parser & Client Generator\n\n`convex-schema-parser`
  is a simple command-line tool designed to parse your Convex project's schema and
  function definitions, generating strongly-typed API clients for both Rust and Python.\n\nIt
  offers two primary modes of operation:\n\n1. A one-shot `generate` command for manual
  client generation.\n\n2. A persistent `dev` mode that watches your Convex project
  for changes and automatically regenerates your clients, providing a seamless development
  experience.\n\n> [!IMPORTANT]\n> At the bottom you will find a USAGE section and
  in `examples` a complete simple example configuration with multiple projects.\n\n##
  Installation\n\nThe easiest way to use `convex-schema-parser` is currently through
  the Cabal package manager.\n\n> [!NOTE]\n> We are on hackage now! So you can simply
  run `cabal update` (important, this package is a recent addition to Hackage) and
  then `cabal install convex-schema-parser` to install the tool quickly without cloning.\n\nWe
  provide prebuilt binaries for `linux` & `macOS` that you can download and run directly,
  but `macOS` users have to allow the binary to run first since we do not sign it
  (yet).\nA `npm` package `@parsonosai/convex-schema-parser` is also on its way and
  supported as soon as we get code-signing ready, we currently use a placeholder.\n\nInstalling
  `cabal` & `ghc` is best done using [`ghcup`](https://www.haskell.org/ghcup/). As
  soon as it is installed:\n\n```bash\nghcup install ghc 9.10.1\nghcup install cabal
  3.10.3.0\n```\n\nYou can then build/run the tool from source.\n\n```bash\ncabal
  update\ncabal install convex-schema-parser # If you have $HOME/.cabal/bin in your
  PATH.\ncabal run convex-schema-parser -- --help # If you do not want to install
  it globally and just run it.\n```\n\n## Prerequisites\n\n> [!NOTE]\n> Everything
  here is also explained when you issue `conves-schema-parser init`.\n\nBefore using
  the tool, please ensure your environment meets the following requirements:\n\n###
  1. `pnpm` or `npm` Installation\n\nThe tool shells out to your package manager to
  generate TypeScript declaration files (`.d.ts`). You must have `pnpm` or `npm` installed
  and available in your system's PATH.\n\n### 2. `package.json` Script\n\nYour Convex
  project's `package.json` must contain a script named `declarations`. This script
  is responsible for running all the necessary steps to generate the `.d.ts` files
  for the parser to read. This often involves cleaning old artifacts, running the
  TypeScript compiler, and copying over pre-generated files.\nEverything here will
  also be explained when you issue `convex-schema-parser init`, this command will
  also create a template `convex-parser.yaml` file.\n\n**Example `package.json`:**\n\n```json\n{\n
  \ \"scripts\": {\n    \"declarations:clean\": \"rm -rf tmp\",\n    \"declarations:build\":
  \"tsc -p tsconfig.declarations.json\",\n    \"declarations:copy-generated\": \"cp
  -r convex/_generated tmp/declarations/\",\n    \"declarations\": \"npm run declarations:clean
  && npm run declarations:build && npm run declarations:copy-generated\",\n    \"test\":
  \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n}\n```\n\n### 3. tsconfig.declarations.json\n\nThe
  tool assumes a specific `tsconfig.json` file exists to guide the declaration generation
  process. This file should be configured to only emit declaration files into a designated
  output directory (e.g., `tmp/declarations`) from your source `convex/` directory.\n\nExample
  `tsconfig.declarations.json`:\n\n```json\n{\n  \"compilerOptions\": {\n    // ---
  Output Configuration ---\n    \"outDir\": \"./tmp/declarations\", // Output all
  files to a temporary directory\n    \"rootDir\": \"./convex\",          // The root
  of the source files we care about\n\n    // --- Generation Settings ---\n    \"declaration\":
  true,            // Generate .d.ts files\n    \"emitDeclarationOnly\": true,    //
  Don't generate any .js files\n    \"skipLibCheck\": true,           // Speeds up
  compilation by not checking library files\n\n    // --- Module Settings (to match
  Convex) ---\n    \"module\": \"commonjs\",\n    \"target\": \"es2020\"\n  },\n  //
  Tell tsc where to find the files to compile\n  \"include\": [\"convex/**/*.ts\"]\n}\n```\n\n#
  Usage\n\nThe tool is run from the command line and has two main subcommands: generate
  and dev.\n\n## `generate` Command (One-Shot)\n\nThis command parses your project
  once, generates the specified client, and then exits. It's useful for CI/CD pipelines
  or manual updates.\n\n```bash\nconvex-schema-parser generate --schema <path> --declarations
  <path> --target <lang> [-o <output_file>]\n\n# Or if you are not using the installed
  binary but via cabal (same for the other commands):\ncabal run convex-schema-parser
  -- generate --schema <path> --declarations <path> --target <lang> [-o <output_file>]\n```\n\n###
  Arguments:\n\n* `--schema`: (Required) Path to your main `schema.ts` file.\n \n*
  `--declarations`: (Required) Path to the root directory where `tsc` generated the
  `.d.ts` files (the `outDir` from your `tsconfig`).\n \n* `--target`: (Required)
  The target language. Can be `Python` or `Rust`.\n \n* `-o, --output`: (Optional)
  The file to write the generated code to. If omitted, the code will be printed to
  standard output.\n\n### Example:\n\n```bash\ncabal run convex-schema-parser -- generate
  \\\n  --schema /path/to/my-project/convex/schema.ts \\\n  --declarations /path/to/my-project/tmp/declarations
  \\\n  --target Rust \\\n  --output /path/to/my-rust-app/src/convex_api.rs\n```\n\n##
  `dev` Command (Watch Mode)\n\nThis is the recommended mode for local development.
  It starts a persistent process that watches your `convex/` directory for any file
  changes. When a change is detected, it automatically runs the `pnpm declarations`
  (or `npm run declarations`) script and regenerates all clients defined in your configuration
  file.\n\n```bash\nconvex-schema-parser dev [--config <path>]\n```\n\n### Arguments:\n\n*
  `--config`: (Optional) The path to your YAML configuration file. Defaults to `convex-parser.yaml`
  in the current working directory.\n\n# Configuration (`convex-parser.yaml`)\n\nThe
  `dev` mode is driven by a YAML configuration file. This file allows you to define
  multiple generation targets, enabling you to generate clients for different languages
  and output them to multiple locations simultaneously.\n\n### Example `convex-parser.yaml`:\n\n```yaml\n#
  Configuration for the Convex Client Generator.\n\n# (Required) The absolute path
  to the root of your Convex project.\n# This is the directory that contains the `convex/`
  folder and `package.json`.\nproject_path: /path/to/your/convex/project\n\n# (Required)
  The absolute path to the generated TypeScript declarations, relative to `project_path`.\ndeclarations_dir:
  /path/to/your/tmp/declarations\n\n# (Optional) The path where validation sandbox
  projects will be created.\n# Defaults to `~/.config/convex-schema-parser` if omitted.\nvalidation_path:
  \"~/.config/convex-schema-parser\"\n\n# (Required) A list of generation targets.
  You can have one or more.\ntargets:\n  # Example 1: Generate a Rust client for a
  backend service.\n  - lang: Rust\n    # A list of one or more output files for this
  target.\n    output:\n      - ../my-rust-app/src/convex_api.rs\n      - ../my-other-app/src/convex_api.rs\n\n
  \ # Example 2: Generate a Python client for data scripts.\n  - lang: Python\n    output:\n
  \     - ../scripts/lib/convex_client.py\n```\n\n### Configuration Schema:\n\n* `project_path`:
  The absolute path to your Convex project root directory. This directory should contain
  the `convex/` folder and a `package.json` file.\n* `declarations_dir`: The absolute
  path to the directory where your TypeScript declaration files (`.d.ts`) are generated.
  This should be the output directory specified in your `tsconfig.declarations.json`.\n*
  `validation_path`: (Optional) The path where validation sandbox projects will be
  created. If omitted, defaults to `~/.config/convex-schema-parser`.\n* `targets`:
  A opt-level key holding a list `[]` of target configurations.\n* `lang`: The target
  language for the client. **Must** be `Python` or `Rust`.\n* `output`: A list `[]`
  of file paths where the generated client code will be written. Each target can have
  multiple output paths.\n\n# API Usage Examples\n\nOnce you have generated your client
  code, you can use it in your projects.\n\n## Python Client Example\n\nThe generated
  Python client uses nested classes to mirror your Convex project's file structure.\n\n###
  Queries, Mutations and Actions\n\n```python\nimport os\nfrom convex import ConvexClient\n#
  Import the generated API module (e.g., convex_api.py)\nimport convex_api\n\n# 1.
  Instantiate the official ConvexClient with your deployment URL.\ndeployment_url
  = os.environ.get(\"CONVEX_URL\")\nclient = ConvexClient(deployment_url)\n\n# 2.
  Instantiate your generated API, wrapping the client.\nauth_key = get_auth_key()
  \ # Replace with your method to get the auth/api/jwt key if required\nclient.set_auth(auth_key)\n\napi
  = convex_api.API(client)\n\n# 3. Call functions using the nested structure.\n# This
  corresponds to the function `getProject` in `convex/functions/projects.ts`.\n# The
  generated API reraises any exceptions from the Convex client, so you can handle
  them as needed.\n# Additionally, we use `pydantic` for type validation, so we raise
  these exceptions as well.\ntry:\n    project_id = convex_api.Id(\"prj_...\")\n    #
  NOTE that we force named arguments so you do not accidentally refactor stuff in
  your convex db\n    # and forget to adjust your other projects. See the annotation
  for the rust example below for\n    # the reason.\n    project = api.functions.projects.get_project(project_id=project_id)\n
  \   if project:\n        print(f\"Successfully fetched project: {project.project_name}\")\n
  \   else:\n        print(\"Project not found.\")\nexcept Exception as e:\n    print(f\"An
  error occurred: {e}\")\n```\n\n### Subscriptions\n\n```python\nfrom convex import
  ConvexError\n\n# ... (assuming `api` is already instantiated and authenticated)\n\ntry:\n
  \   # 1. Call the generated `subscribe_*` method. This returns a generator instantly.\n
  \   tenant_id = convex_api.Id(\"tnt_...\")\n    project_subscription = api.functions.queries.subscribe_fetch_projects(tenant_id=tenant_id)\n\n
  \   print(\"Subscribed to projects. Waiting for updates... (Press Ctrl+C to stop)\")\n\n
  \   # 2. The `for` loop starts the subscription and blocks until the first value\n
  \   #    is received. The loop body will run again for each subsequent update.\n
  \   for updated_projects in project_subscription:\n        # 3. `updated_projects`
  is already a fully validated Pydantic model\n        #    (e.g., list[FetchProjectsReturnObject]).\n
  \       print(f\"Received update with {len(updated_projects)} projects:\")\n        for
  project in updated_projects:\n            print(f\"  - ID: {project._id}, Name:
  {project.project_name}\")\n\nexcept ConvexError as e:\n    print(f\"Subscription
  failed with an error: {e}\")\nexcept KeyboardInterrupt:\n    print(\"\\nSubscription
  stopped by user.\")\n```\n\n\n## Rust Client Example\n\nThe generated Rust client
  uses a method-based API which works with Rust's ownership and borrowing rules.\n\n###
  Queries, Mutations and Actions\n\n```rust\n// Assuming the generated module is named
  `convex_api`.\nuse convex_api::{Api, Id, types::ProjectsDoc};\nuse convex::ConvexClient;\nuse
  anyhow::Result;\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    //
  1. Instantiate and authenticate the official ConvexClient.\n    let convex_url =
  std::env::var(\"CONVEX_URL\")?;\n    let auth_key = get_auth_key(); // Replace with
  your method to get the auth/api/jwt key if required\n    \n    let mut convex_client
  = ConvexClient::new(&convex_url).await?;\n    convex_client.set_auth(&auth_key);\n\n
  \   // 2. Instantiate your generated API, wrapping the client.\n    let mut api
  = Api::new(convex_client);\n\n    // 3. Call functions using the nested, method-chaining
  API.\n    let project_id = Id::<ProjectsDoc>::new(\"prj_...\".to_string());\n    \n
  \   // This corresponds to the function `getProject` in `convex/functions/projects.ts`.\n
  \   // NOTE the use of an argument type:\n    //    We cannot rely on convex to
  output deterministic positional args for the type generated for convex\n    //    functions.
  And in case you reorder arguments of the same type (like having two or more strings
  with\n    //    semantic differences) this will simulate \"named args\".\n    //
  \   Especially for generated code, this is safer and keeps the calling site consistent
  regardless\n    //    of refactors in the convex backend.\n    match api.functions().projects().get_project(convex_api::types::FunctionsQueriesGetProjectArg
  { project_id }).await {\n        Ok(Some(project)) => {\n            println!(\"Successfully
  fetched project: {}\", project.project_name.unwrap_or_default());\n        }\n        Ok(None)
  => {\n            println!(\"Project not found.\");\n        }\n        Err(e) =>
  {\n            eprintln!(\"An error occurred: {}\", e);\n        }\n    }\n\n    Ok(())\n}\n```\n\n###
  Subscriptions\n\n```rust\nuse futures_util::stream::StreamExt;\n\n// ... (assuming
  `api` is already instantiated and authenticated)\n\nasync fn run_subscription()
  -> anyhow::Result<()> {\n    // 1. Call the generated `subscribe_*` method.\n    let
  tenant_id = convex_api::Id::<convex_api::types::TenantsDoc>::new(\"tnt_...\".to_string());\n
  \   let mut project_subscription = api.functions().queries().subscribe_fetch_projects(convex_api::types::FunctionsQueriesFetchProjectsArgObject
  { tenant_id }).await?;\n\n    println!(\"Subscribed to projects. Waiting for updates...
  (Press Ctrl+C to stop)\");\n\n    // 2. The `while let` loop asynchronously polls
  the stream for new items.\n    while let Some(result) = project_subscription.next().await
  {\n        // 3. Each `result` is a `Result<T, ApiError>`, where T is your strongly-typed\n
  \       //    return value (e.g., Vec<FetchProjectsReturnObject>).\n        match
  result {\n            Ok(updated_projects) => {\n                println!(\"Received
  update with {} projects:\", updated_projects.len());\n                for project
  in updated_projects {\n                    println!(\"  - ID: {}, Name: {}\", project._id,
  project.project_name.unwrap_or_default());\n                }\n            }\n            Err(e)
  => {\n                eprintln!(\"Received an error in the subscription stream:
  {}\", e);\n            }\n        }\n    }\n\n    Ok(())\n}\n```\n"
description-type: markdown
hash: 5e090ca78573609d984deff0ef5c1209339ab899a43e1d64212bad8590687e48
homepage: https://github.com/parsonosai/convex-schema-parser
latest: 0.1.8.0
license-name: MIT
maintainer: lambdax.one@icloud.com
synopsis: A type-safe client generator for Convex for both Rust and Python.
test-bench-deps:
  HUnit: '>=1.6.0 && <1.7'
  base: '>=0'
  containers: '>=0'
  convex-schema-parser: '>=0'
  mtl: '>=0'
  parsec: '>=0'
