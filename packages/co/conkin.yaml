all-versions:
- 1.0.2
author: Noah Luck Easterly
basic-deps:
  base: '>=4.9 && <4.11'
changelog: ''
changelog-type: markdown
description: "One thing I haven't often seen people talk about doing in Haskell is
  working with data in [column-major order](https://en.wikipedia.org/wiki/Row-_and_column-major_order),
  or as a [struct of arrays](https://en.wikipedia.org/wiki/AOS_and_SOA). If we take
  a look though, there's some interesting possibilities and theory underlying this
  relatively simple concept.  \n\nThe `conkin` library is the result of my explorations
  along this line of thinking.\n\n<!--\n# Setup\n\nThis is a literate haskell file,
  so we need to specify all our `LANGUAGE` pragma and imports up front.  But just
  because we *need* to, doesn't mean we need to show it our reader, thus the HTML
  comments.\n\n```haskell\n{-# OPTIONS_GHC -Wno-name-shadowing #-}\n{-# LANGUAGE RecordWildCards
  #-}\n{-# LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE NoMonomorphismRestriction
  #-}\n{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE TypeApplications #-}\n{-#
  LANGUAGE PatternSynonyms #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE
  ExplicitNamespaces #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE PackageImports
  #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE PolyKinds
  #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE TypeFamilies #-}\nmodule Main
  where\nimport Data.Functor.Identity (Identity(..))\nimport Control.Applicative (Alternative(..))\nimport
  \"conkin\" Conkin (type (~>)((~$~)))\nimport qualified \"conkin\" Conkin\nimport
  Numeric (showHex)\nimport Data.Char (toUpper)\nimport Data.Maybe (fromJust, fromMaybe,
  isJust)\nimport Data.Default (Default(..))\nimport Data.Monoid (All(..), (<>))\nimport
  GHC.Generics\nimport Test.DocTest\n\nmain :: IO ()\nmain = doctest $ words \"-pgmL
  markdown-unlit README.lhs\"\n```\n\nA couple things only need to be set for the
  tests.\n\n```haskell\n{-$\n>>> :set -XTypeApplications -XTypeOperators -XStandaloneDeriving
  -XDeriveGeneric\n-}\n```\n\nBy using an alternate printer, we get much more legible
  example results in the doctests\n\n```haskell\n{-$\n>>> import Text.Show.Pretty
  (pPrint)\n>>> :set -interactive-print pPrint\n-}\n```\n\nAnd some custom data types
  are handy, but could be distracting pedagogically:\n\n```haskell\ntype Dollars =
  Double\n\nnewtype UPC = UPC { getUPC :: Integer }\n  deriving (Num, Eq, Ord)\ninstance
  Show UPC where\n  showsPrec _ (UPC u) = showString \"0x\" . (map toUpper (showHex
  u []) ++)\n```\n-->\n\n# An example of use\n\nSuppose we have a list of items we
  wish to manipulate in column-major order:\n\n```haskell\nitems :: [Item]\nitems
  = [ chocolateBar, toiletPaper, ibuprofen ]\n\nchocolateBar, toiletPaper, ibuprofen
  :: Item\n\nchocolateBar = Item 0xDE1EC7AB1E \"chocolate bar\" 1.50\ntoiletPaper
  = Item 0xDEFEC8 \"toilet paper\" 9.99\nibuprofen = Item 0x43A1A11 \"ibuprofen\"
  5.25\n```\n\nUsing the `Functor` instance for lists, we can easily extract each
  field into its own list:\n\n```haskell\nextractFields0 :: [Item] -> ([UPC], [String],
  [Double])\nextractFields0 items = ( upc <$> items, name <$> items, price <$> items
  )\n\n{-$-----------------------------------------------------------------------------\n>>>
  extractFields0 items\n( [ 0xDE1EC7AB1E , 0xDEFEC8 , 0x43A1A11 ]\n, [ \"chocolate
  bar\" , \"toilet paper\" , \"ibuprofen\" ]\n, [ 1.5 , 9.99 , 5.25 ]\n)\n-}\n```\n\nWe've
  lost bit of semantic meaning, however, as we've switched from our own custom data
  type to a generic tuple.  We can regain this meaning if we define a type specifically
  for a collection of items, parameterized by the item type:\n\n```haskell\nextractFields1
  :: [Item] -> ItemF []\nextractFields1 items = ItemF (upc <$> items) (name <$> items)
  (price <$> items)\n\n{-$-----------------------------------------------------------------------------\n>>>
  extractFields1 items\nItemF\n  { _upc = [ 0xDE1EC7AB1E , 0xDEFEC8 , 0x43A1A11 ]\n
  \ , _name = [ \"chocolate bar\" , \"toilet paper\" , \"ibuprofen\" ]\n  , _price
  = [ 1.5 , 9.99 , 5.25 ]\n  }\n-}\ndata ItemF f = ItemF \n  { _upc :: f UPC\n  ,
  _name :: f String\n  , _price :: f Dollars\n  }\nderiving instance (Show (f String),
  Show (f Dollars), Show (f UPC)) => Show (ItemF f)\nderiving instance (Eq (f String),
  Eq (f Dollars), Eq (f UPC)) => Eq (ItemF f)\n```\n\nWith a little help from `PatternSynonyms`
  we can derive the `Item` type from `ItemF`, making sure the two definitions don't
  slip out of step:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  items\n[ ItemF\n    { _upc = Identity 0xDE1EC7AB1E\n    , _name = Identity \"chocolate
  bar\"\n    , _price = Identity 1.5\n    }\n, ItemF\n    { _upc = Identity 0xDEFEC8\n
  \   , _name = Identity \"toilet paper\"\n    , _price = Identity 9.99\n    }\n,
  ItemF\n    { _upc = Identity 0x43A1A11\n    , _name = Identity \"ibuprofen\"\n    ,
  _price = Identity 5.25\n    }\n]\n-}\n\n-- import Data.Functor.Identity (Identity(..))\n--
  ...\ntype Item = ItemF Identity\n\n-- {-# LANGUAGE PatternSynonyms #-}\n-- ...\npattern
  Item :: UPC -> String -> Dollars -> Item\npattern Item upc name price = ItemF (Identity
  upc) (Identity name) (Identity price) \n\nupc :: Item -> UPC\nupc = runIdentity
  . _upc\n\nname :: Item -> String\nname = runIdentity . _name\n\nprice :: Item ->
  Dollars\nprice = runIdentity . _price\n```\n\nSo what else can we do with `ItemF`?
  \ We can't make it a `Functor`, it's got the wrong *kind*. \n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  instance Functor ItemF where fmap = undefined\n<BLANKLINE>\n... \n    • Expected
  kind ‘* -> *’, but ‘ItemF’ has kind ‘(* -> *) -> *’\n    • In the first argument
  of ‘Functor’, namely ‘ItemF’\n      In the instance declaration for ‘Functor ItemF’\n-}\n```\n\nBut
  it's still got this parameter that it's covariant and homogenous in - all the fields
  must use the same container of kind `* -> *`, and changing what container we're
  using should be easy.\n\nSo let's define a different `Functor` class for types of
  kind `(k -> *) -> *`.\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :i Conkin.Functor\nclass Conkin.Functor (f :: (k -> *) -> *) where\n  Conkin.fmap
  :: forall (a :: k -> *) (b :: k -> *).\n                 (forall (x :: k). a x ->
  b x) -> f a -> f b\n...\n-}\n\n-- import qualified Conkin\n-- ...\ninstance Conkin.Functor
  ItemF where\n  fmap f (ItemF {..}) = ItemF\n    { _upc = f _upc\n    , _name = f
  _name\n    , _price = f _price\n    }\n```\n\nNow we can use `Conkin.fmap` to convert
  an individual `Item` into a `ItemF []`\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :t Conkin.fmap (\\(Identity x) -> [x])\nConkin.fmap (\\(Identity x) -> [x])\n  ::
  Conkin.Functor f => f Identity -> f []\n>>> Conkin.fmap (\\(Identity x) -> [x])
  chocolateBar\nItemF\n  { _upc = [ 0xDE1EC7AB1E ]\n  , _name = [ \"chocolate bar\"
  ]\n  , _price = [ 1.5 ]\n  }\n-}\n```\n\nWe could stitch together multiple of these
  `ItemF []` into one if `ItemF []` had a `Monoid` instance:\n\n```haskell\nextractFields2
  :: [Item] -> ItemF []\nextractFields2 = foldMap $ Conkin.fmap $ pure . runIdentity\n\n{-$-----------------------------------------------------------------------------\n>>>
  extractFields2 items\nItemF\n  { _upc = [ 0xDE1EC7AB1E , 0xDEFEC8 , 0x43A1A11 ]\n
  \ , _name = [ \"chocolate bar\" , \"toilet paper\" , \"ibuprofen\" ]\n  , _price
  = [ 1.5 , 9.99 , 5.25 ]\n  }\n-}\n\n-- import Control.Applicative (Alternative(..))\n--
  ...\ninstance Alternative a => Monoid (ItemF a) where\n  mempty = ItemF empty empty
  empty\n  left `mappend` right = ItemF\n    { _upc = _upc left <|> _upc right\n    ,
  _name = _name left <|> _name right\n    , _price = _price left <|> _price right\n
  \   }\n```\n\nOf course we could do this before with `extractFields1`, but there's
  nothing specific to `ItemF` in the definition of `extractFields2`.  The same definition
  would work for any `Conkin.Functor` that formed a `Monoid`:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :t foldMap $ Conkin.fmap $ pure . runIdentity\nfoldMap $ Conkin.fmap $ pure . runIdentity\n
  \ :: (Applicative b, Conkin.Functor f, Monoid (f b), Foldable t) =>\n     t (f Identity)
  -> f b\n-}\n```\n\nAnother useful monoid is `ItemF Maybe`. This could let us combine
  multiple partially specified items into one:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  mempty { _price = Just 2.99 }\nItemF { _upc = Nothing , _name = Nothing , _price
  = Just 2.99 }\n>>> mempty { _price = Just 2.99 } <> mempty { _upc = Just 0x0 }\nItemF
  { _upc = Just 0x0 , _name = Nothing , _price = Just 2.99 }\n-}\n```\n\n(Side note
  - I love being able to partially specify `ItemF Maybe` using `mempty` with record
  notation.  All the succinctness of `ItemF { _price = Just 2.99 }`, but none of the
  missing fields.)\n\nWe can use `<>` (aka `mappend`) to transform a partially specified
  item into a fully specified one:\n\n```haskell\nwithDefaults0 :: ItemF Maybe ->
  Item\nwithDefaults0 partial = Conkin.fmap (Identity . fromJust) $ partial <> ItemF\n
  \ { _upc = Just 0x0\n  , _name = Just \"unknown\"\n  , _price = Just 0\n  }\n\n{-$-----------------------------------------------------------------------------\n>>>
  withDefaults0 mempty\nItemF\n  { _upc = Identity 0x0\n  , _name = Identity \"unknown\"\n
  \ , _price = Identity 0.0\n  }\n>>> withDefaults0 mempty { _price = Just 2.99, _name
  = Just \"flyswatter\" }\nItemF\n  { _upc = Identity 0x0\n  , _name = Identity \"flyswatter\"\n
  \ , _price = Identity 2.99\n  }\n-}\n```\n\nHowever, I'm not a big fan of this solution.
  We've abandoned some safety by using the partial `fromJust`.  If a future developer
  alters a default to be `Nothing`, the compiler won't complain, we'll just get a
  runtime error.\n\nWhat I'd rather be using is the safer `fromMaybe`, but since that's
  a two-argument function, I can't just use it via `fmap`. I need `ItemF` to be an
  `Applicative`.\n\nWe'll need a slightly different `Applicative` class than `Prelude`'s,
  as `ItemF` again has the wrong kind:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :i Conkin.Applicative\nclass Conkin.Functor f =>\n      Conkin.Applicative (f ::
  (k -> *) -> *) where\n  Conkin.pure :: forall (a :: k -> *). (forall (x :: k). a
  x) -> f a\n  (Conkin.<*>) :: forall (a :: k -> *) (b :: k -> *).\n                  f
  (a ~> b) -> f a -> f b\n...\n>>> :i (~>)\ntype role (~>) representational representational
  nominal\nnewtype (~>) (a :: k -> *) (b :: k -> *) (x :: k)\n  = Conkin.Arrow {(~$~)
  :: a x -> b x}\n...\n-}\n\ninstance Conkin.Applicative ItemF where\n  pure a = ItemF
  a a a\n  ItemF fi fs fd <*> ItemF ai as ad\n    = ItemF (fi ~$~ ai) (fs ~$~ as)
  (fd ~$~ ad)\n```\n\nNow we can lift `fromMaybe`:\n\n```haskell\nwithDefaults1 ::
  ItemF Maybe -> Item\nwithDefaults1 = Conkin.liftA2 (\\(Identity x) -> Identity .
  fromMaybe x) ItemF\n    { _upc = Identity 0x0\n    , _name = Identity \"unknown\"\n
  \   , _price = Identity 0\n    }\n\n{-$-----------------------------------------------------------------------------\n>>>
  withDefaults1 mempty\nItemF\n  { _upc = Identity 0x0\n  , _name = Identity \"unknown\"\n
  \ , _price = Identity 0.0\n  }\n>>> withDefaults1 mempty { _price = Just 2.99, _name
  = Just \"flyswatter\" }\nItemF\n  { _upc = Identity 0x0\n  , _name = Identity \"flyswatter\"\n
  \ , _price = Identity 2.99\n  }\n-}\n```\n\nUsing `data-default`'s `Default` class,
  we can generalize this idea to create a function that converts any partially-specified
  `Conkin.Applicative` to a fully specified one.\n\n```haskell\nwithDefaults2 :: (Conkin.Applicative
  f, Default (f Identity)) => f Maybe -> f Identity\nwithDefaults2 = Conkin.liftA2
  (\\(Identity x) -> Identity . fromMaybe x) def\n\ninstance Default Item where\n
  \ def = ItemF\n    { _upc = Identity 0x0\n    , _name = Identity \"unknown\"\n    ,
  _price = Identity 0\n    }\n\n{-$-----------------------------------------------------------------------------\n>>>
  withDefaults2 mempty :: ItemF Identity\nItemF\n  { _upc = Identity 0x0\n  , _name
  = Identity \"unknown\"\n  , _price = Identity 0.0\n  }\n>>> withDefaults2 mempty
  { _price = Just 2.99, _name = Just \"flyswatter\" }\nItemF\n  { _upc = Identity
  0x0\n  , _name = Identity \"flyswatter\"\n  , _price = Identity 2.99\n  }\n-}\n```\n\nWhat
  also might be nice is a way to test whether a `ItemF Maybe` is actually fully specified:\n\n```haskell\nisAllJust
  :: Conkin.Foldable f => f Maybe -> Bool\nisAllJust = getAll . Conkin.foldMap (All
  . isJust)\n\n{-$-----------------------------------------------------------------------------\n>>>
  isAllJust mempty { _upc = Just 0x1111111111 }\nFalse\n>>> isAllJust ItemF { _upc
  = Just 0xDEADBEEF, _name = Just \"hamburger\", _price = Just 1.99 }\nTrue\n-}\n```\n\nAt
  this point, it should not be surprising that we need a slightly different `Foldable`
  in order to collapse `ItemF` values:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :i Conkin.Foldable\nclass Conkin.Foldable (t :: (k -> *) -> *) where\n  Conkin.foldr
  :: forall (a :: k -> *) b.\n                  (forall (x :: k). a x -> b -> b) ->
  b -> t a -> b\n  Conkin.foldMap :: forall m (a :: k -> *).\n                    Monoid
  m =>\n                    (forall (x :: k). a x -> m) -> t a -> m\n...\n-}\n\ninstance
  Conkin.Foldable ItemF where\n  foldMap f (ItemF {..}) = f _upc <> f _name <> f _price\n```\n\nWe
  could use `isAllJust` to safely create an `Item` from a fully-specified `ItemF Maybe`:\n\n```haskell\ntoItem0
  :: ItemF Maybe -> Maybe Item\ntoItem0 i | isAllJust i = Just $ Conkin.fmap (Identity
  . fromJust) i\n          | otherwise   = Nothing\n```\n\nBut the `conkin` package
  already provides a function that does just that:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  Conkin.apportion mempty { _upc = Just 0x1111111111 }\nNothing\n>>> Conkin.apportion
  ItemF { _upc = Just 0xDEADBEEF, _name = Just \"hamburger\", _price = Just 1.99 }\nJust\n
  \ ItemF\n    { _upc = Identity 0xDEADBEEF\n    , _name = Identity \"hamburger\"\n
  \   , _price = Identity 1.99\n    }\n>>> :t Conkin.apportion\nConkin.apportion\n
  \ :: (Conkin.Traversable g, Applicative f) => g f -> f (g Identity)\n-}\n```\n\nAlthough
  `conkin` does require that `ItemF` implement its custom `Traversable` class, it
  provides helpers for tuple-like classes like `ItemF`.\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :m +Data.Functor.Compose\n>>> :i Conkin.Traversable\nclass (Conkin.Foldable t, Conkin.Functor
  t) =>\n      Conkin.Traversable (t :: (i -> *) -> *) where\n  Conkin.traverse ::
  forall j (f :: (j -> *) -> *) (a :: i\n                                                         ->
  *) (b :: i -> j -> *).\n                     Conkin.Applicative f =>\n                     (forall
  (x :: i). a x -> f (b x))\n                     -> t a -> f (Compose t (Conkin.Flip
  b))\n  Conkin.sequenceA :: forall j (f :: (j -> *) -> *) (a :: i\n                                                          ->
  j -> *).\n                      Conkin.Applicative f =>\n                      t
  (Compose f a) -> f (Compose t (Conkin.Flip a))\n...\n-}\ninstance Conkin.Traversable
  ItemF where\n  sequenceA (ItemF {..}) = Conkin.liftT3 ItemF _upc _name _price\n```\n\nWe
  could also attempt to use `apportion` to invert `extractFields2`, but it mixes\nup
  the columns:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  items\n[ ItemF\n    { _upc = Identity 0xDE1EC7AB1E\n    , _name = Identity \"chocolate
  bar\"\n    , _price = Identity 1.5\n    }\n, ItemF\n    { _upc = Identity 0xDEFEC8\n
  \   , _name = Identity \"toilet paper\"\n    , _price = Identity 9.99\n    }\n,
  ItemF\n    { _upc = Identity 0x43A1A11\n    , _name = Identity \"ibuprofen\"\n    ,
  _price = Identity 5.25\n    }\n]\n>>> Conkin.apportion (extractFields2 items)\n[
  ItemF\n    { _upc = Identity 0xDE1EC7AB1E\n    , _name = Identity \"chocolate bar\"\n
  \   , _price = Identity 1.5\n    }\n, ItemF\n    { _upc = Identity 0xDE1EC7AB1E\n
  \   , _name = Identity \"chocolate bar\"\n    , _price = Identity 9.99\n    }\n,
  ItemF\n    { _upc = Identity 0xDE1EC7AB1E\n    , _name = Identity \"chocolate bar\"\n
  \   , _price = Identity 5.25\n    }\n...\n, ItemF\n    { _upc = Identity 0x43A1A11\n
  \   , _name = Identity \"ibuprofen\"\n    , _price = Identity 1.5\n    }\n, ItemF\n
  \   { _upc = Identity 0x43A1A11\n    , _name = Identity \"ibuprofen\"\n    , _price
  = Identity 9.99\n    }\n, ItemF\n    { _upc = Identity 0x43A1A11\n    , _name =
  Identity \"ibuprofen\"\n    , _price = Identity 5.25\n    }\n]\n-}\n```\n\nThis
  is because of `[]`'s `Applicative` instance. If we use the `ZipList` newtype wrapper,
  we can get the behaviour we desire:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  import Control.Applicative (ZipList(..))\n>>> Conkin.align (ZipList items)\nItemF\n
  \ { _upc =\n      ZipList { getZipList = [ 0xDE1EC7AB1E , 0xDEFEC8 , 0x43A1A11 ]
  }\n  , _name =\n      ZipList\n        { getZipList = [ \"chocolate bar\" , \"toilet
  paper\" , \"ibuprofen\" ] }\n  , _price = ZipList { getZipList = [ 1.5 , 9.99 ,
  5.25 ] }\n  }\n>>> Conkin.apportion (Conkin.align (ZipList items))\nZipList\n  {
  getZipList =\n      [ ItemF\n          { _upc = Identity 0xDE1EC7AB1E\n          ,
  _name = Identity \"chocolate bar\"\n          , _price = Identity 1.5\n          }\n
  \     , ItemF\n          { _upc = Identity 0xDEFEC8\n          , _name = Identity
  \"toilet paper\"\n          , _price = Identity 9.99\n          }\n      , ItemF\n
  \         { _upc = Identity 0x43A1A11\n          , _name = Identity \"ibuprofen\"\n
  \         , _price = Identity 5.25\n          }\n      ]\n  }\n-}\n```\n\nHere we
  use the handy `align` function as yet another way to implement `extractFields`:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :t Conkin.align\nConkin.align\n  :: (Conkin.Applicative g, Traversable f) => f (g
  Identity) -> g f\n-}\n```\n\n# A little bit of theory\n\nTypically in Haskell, we
  talk about the category *Hask*, where the objects are types of kind `*` and the
  arrows are normal Haskell functions.  In general, a *functor* is a mapping between
  categories, mapping each object or arrow in one category to an object or arrow (respectively)
  in another.\n\nThe `Prelude`'s `Functor` typeclass actually describes *endofunctors*
  from Hask to Hask; given a `Functor f`, we can map any type `a` in `Hask` to the
  type `f a` in Hask (so `f` must have kind `* -> *`), and we can map any arrow (function)
  `a -> b` in Hask to an arrow `f a -> f b` in Hask (using `fmap`).\n\nThe `conkin`
  package focuses on the functors from *Hask<sup>k</sup>* to *Hask*. In Hask<sup>k</sup>,
  the objects are types of kind `k -> *`, and the arrows are transformations `a ~>
  b` where `(a ~> b) x ~ (a x -> b x)`.  A functor from Hask<sup>k</sup> to Hask must
  then be able to map any type `a :: k -> *` in Hask<sup>k</sup> to a type `f a ::
  *` in Hask (so `f` must have kind `(k -> *) -> *`), and must be able to map any
  arrow `a ~> b` in Hask<sup>k</sup> to an arrow `f a -> f b` in Hask.\n\n(I'm not
  very well read in category theory, so it's thoroughly possible Hask<sup>k</sup>
  has a more common name in literature, I just chose that one out of similarity with
  type exponentials.)\n\nYou can lift any functor from Hask to Hask to a functor from
  Hask<sup>k</sup> to Hask using `Dispose`:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :i Conkin.Dispose\ntype role Conkin.Dispose representational nominal nominal\nnewtype
  Conkin.Dispose (f :: * -> *) (x :: k) (a :: k -> *)\n  = Conkin.Dispose {Conkin.getDispose
  :: f (a x)}\n...\n-}\n```\n\nAnd any functor from Hask<sup>k</sup> to Hask can be
  lifted to a functor from Hask to Hask using `Coyoneda`:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  :i Conkin.Coyoneda\ntype role Conkin.Coyoneda representational representational\ndata
  Conkin.Coyoneda (t :: (k -> *) -> *) u where\n  Conkin.Coyoneda :: forall k (t ::
  (k -> *) -> *) u (a :: k -> *).\n                     (forall (x :: k). a x -> u)
  -> (t a) -> Conkin.Coyoneda t u\n...\n-}\n```\n\nNot only do both of these encodings
  preserve functorality, but they also preserve foldability, applicativity, and traversability
  (e.g. `Traversable t => Conkin.Traversable (Conkin.Dispose t x)`).\n\nAnother interesting
  facet of functors from Hask<sup>k</sup> to Hask is the similarity between their
  kind, `(k -> *) -> *`, and the type of continuations, `type Cont r a = (a -> r)
  -> r`. This **con**tinuation **kin**d is where the `conkin` package gets its name
  from.  \n\nIf we start to look at these functors as types of kind `Cont Type i`,
  then we can can start thinking of how to compose them \nin an algebra, using\n\n*
  `Conkin.Product f g :: Cont Type (i,j)` as the product type of functors `f :: Cont
  Type i` and `g :: Cont Type j`\n* `Conkin.Coproduct f g :: Cont Type (Either i j)`
  as the coproduct type of functors `f :: Cont Type i` and `g :: Cont Type j`\n\nInterestingly,
  `Conkin.Product f g a` is isomorphic to `f (Compose g a)`, making `Conkin.sequenceA`
  the equivalent of [`Data.Tuple.swap`](http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Tuple.html#v:swap).\n\n#
  Notes and concerns\n\n## Existing Work\n\nThe `conkin` package isn't unprecedented.
  In addition to Edward Kmett's [even more general `categories` package](http://hackage.haskell.org/package/categories),
  there's also Gracjan Polak's [`fieldwise` package](http://hackage.haskell.org/package/fieldwise),
  which supports a similar set of operations for types of kind `(k -> *) -> *`.\n\n##
  Boilerplate instances\n\nInstances of `Conkin`'s `Functor`, `Applicative`, `Foldable`,
  and `Traversable` classes are mainly mechanical, and seem like excellent candidates
  for using `-XDeriveGeneric` and `-XDefaultSignatures` to reduce the amount of boilerplate
  needed for use.  This is not currently true, as you cannot encode a type like `ItemF`
  using the fundamental representational types GHC knows about:\n\n```haskell\n{-$-----------------------------------------------------------------------------\n>>>
  deriving instance Generic1 (ItemF)\n...\n    • Can't make a derived instance of
  ‘Generic1 ItemF’:\n        Constructor ‘ItemF’ applies a type to an argument involving
  the last parameter\n                            but the applied type is not of kind
  * -> *, and\n        Constructor ‘ItemF’ applies a type to an argument involving
  the last parameter\n                            but the applied type is not of kind
  * -> *, and\n        Constructor ‘ItemF’ applies a type to an argument involving
  the last parameter\n                            but the applied type is not of kind
  * -> *\n    • In the stand-alone deriving instance for ‘Generic1 (ItemF)’\n-}\n```\n\nIt's
  very possible to hand-write instances of `Generic1` for functors from Hask<sup>k</sup>
  to Hask \nusing an fundamental representational type, `Par2`:\n\n```haskell\nnewtype
  Par2 (x :: k) (a :: k -> *) = Par2 { unPar2 :: a x }\n\ninstance Generic1 ItemF
  where\n  type Rep1 ItemF =\n    D1 ('MetaData \"ItemF\" \"Main\" \"conkin\" 'True)\n
  \     (C1 ('MetaCons \"ItemF\" 'PrefixI 'True)\n        (S1 ('MetaSel ('Just \"_upc\")
  'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)\n          (Par2 UPC)\n
  \        :*:\n         S1 ('MetaSel ('Just \"_name\") 'NoSourceUnpackedness 'NoSourceStrictness
  'DecidedLazy)\n          (Par2 String)\n         :*:\n         S1 ('MetaSel ('Just
  \"_cost\") 'NoSourceUnpackedness 'NoSourceStrictness 'DecidedLazy)\n          (Par2
  Dollars)))\n  from1 (ItemF {..}) = M1 (M1 (M1 (Par2 _upc) :*: M1 (Par2 _name) :*:
  M1 (Par2 _price)))\n  to1 (M1 (M1 (M1 (Par2 _upc) :*: M1 (Par2 _name) :*: M1 (Par2
  _price)))) = ItemF {..}\n```\n\nHowever the verbosity of the above makes it less
  useful as a way to avoid boilerplate.\n\nThis is not necessarily the end of all
  hope; I could make a pull request to GHC including `Par2` and updates to the `DeriveGeneric`
  mechanism, or write some `TemplateHaskell` macros to generate the instances.  Until
  I do so, I've gone the fairly low-effort route of providing a few helper functions
  to make `Conkin.Traversable` instances easier to write.\n\n## Use of `unsafeCoerce`\n\nIn
  my personal Haskell experience, my only uses of `unsafeCoerce` until this package
  had been for `newtype` wrappers and such (i.e. excellent candidates to use `coerce`
  instead).  This library marks the first time I found myself using `unsafeCoerce`
  because I just couldn't think of another way to convince the compiler of something,
  in `Dispose`'s implementation of `Conkin.Traversable`:\n\n```\ninstance Prelude.Traversable
  t => Traversable (Dispose t x) where\n  sequenceA = teardown . Prelude.traverse
  setup . getDispose where\n    setup :: Compose f a x -> Coyoneda f (Exists (a x))\n
  \   setup = Coyoneda Exists . getCompose\n\n    teardown :: (Functor f, Prelude.Functor
  t) => Coyoneda f (t (Exists (a x))) -> f (Compose (Dispose t x) (Flip a))\n    teardown
  (Coyoneda k fax) = Compose . Dispose . Prelude.fmap Flip . unwrap k <$> fax\n\n
  \   -- by parametricity, `t`'s implementation of `Prelude.sequenceA :: t (g e) ->\n
  \   -- g (t e)` can't inspect the value of `e`, so all `Exists a` values\n    --
  must be wrapped `a x` values, so this should be an okay use\n    -- of `unsafeGetExists`.\n
  \   unwrap :: Prelude.Functor t => (b x -> t (Exists a)) -> b x -> t (a x)\n    unwrap
  k bx = Prelude.fmap (unsafeGetExists bx) $ k bx\n\n    unsafeGetExists :: proxy
  x -> Exists a -> a x\n    unsafeGetExists _ (Exists az) = unsafeCoerce az\n\ndata
  Exists (a :: k -> *) where\n  Exists :: a x -> Exists a\n```\n\nI've managed to
  convince myself that my use of `unsafeCoerce` is, well, safe, but only until someone
  finds a law-abiding `Traversable` that proves me wrong.  I should probably come
  back to this, and either come up with a more formal proof of validity, rather than
  the loose argument I present in the code.\n  \n# Literate Haskell\n\nThis `README.md`
  file is a literate haskell file, for use with [`markdown-unlit`](https://github.com/sol/markdown-unlit#readme).
  \ To allow GHC to recognize it, it's softlinked as `README.lhs`, which you can compile
  with\n\n    $ ghc -pgmL markdown-unlit README.lhs\n\nMany of the above examples
  are [`doctest`](https://github.com/sol/doctest#readme)-compatible, and can be run
  with\n\n    $ doctest -pgmL markdown-unlit README.lhs\n\nAlternately, you can have
  cabal manage the dependencies and compile and test this with:\n\n    $ cabal install
  happy\n    $ cabal install --enable-tests\n    $ cabal test readme\n"
description-type: markdown
hash: 3f0094e26e2152d0d6cd403b1afd1bef2d5ac2ae57bde7a6e64b332768757c21
homepage: http://github.com/rampion/conkin
latest: 1.0.2
license-name: LicenseRef-PublicDomain
maintainer: noah.easterly@gmail.com
synopsis: Tools for functors from Hask^k to Hask
test-bench-deps:
  base: '>=0'
  conkin: '>=0'
  data-default: '>=0.7.0 && <0.8'
  doctest: '>=0.11.2 && <0.12'
  markdown-unlit: '>=0.4.0 && <0.5'
  pretty-show: '>=1.6.13 && <2.0.0'
