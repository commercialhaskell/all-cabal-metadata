all-versions:
- 0.2.1.0
- 0.3.0.0
author: Georg Rudoy
basic-deps:
  aeson: '>=0'
  async: '>=0'
  async-pool: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  can-i-haz: '>=0'
  coformat: '>=0'
  command: '>=0'
  command-qq: '>=0'
  containers: '>=0'
  dom-selector: '>=0'
  extra: '>=0'
  fast-logger: '>=0'
  generic-data: '>=0'
  hashable: '>=0'
  html-conduit: '>=0'
  interpolate: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  monad-logger: '>=0'
  mtl: '>=0'
  optparse-generic: '>=0'
  scientific: '>=0'
  temporary: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  xml-conduit: '>=0'
  yaml: '>=0'
changelog: |
  # Changelog for coformat

  ## v0.3.0.0

  * A fairly major refactoring: isolated the description of the formatters.
  * Change the casing of flags to be more in line with the common lisp-style.

  ## v0.2.1.0

  * Allow the user to force-set formatter options.
  * Fixed discovering the default style options: need to pass user-forced and hardcoded options,
    otherwise clang-format might return nonsense.

  ## v0.2.0.0

  * Changed the scoring from Levenshtein distance to something more suitable for the task.
  * Allow resuming the optimization process from an existing style file.

  ## v0.1.0.0

  Initial release: it formats something and is even tolerant to the formatter's crashes.
changelog-type: markdown
description: |
  # coformat

  Code style formatters take a style description and format a code base accordingly.

  *coformat* is _dual_ to them: it takes a code base and produces a code style description for it! This is achieved by a cunning combination of state-of-the-art type system features (`DataKinds`, `RankNTypes` and `GADTs`, among others) and modern machine learning techniques (there is a numerical optimization step after all).

  More seriously, this project only supports `clang-format` for now, but plugging other formatters (perhaps for other languages) should be trivial enough, provided there is an easy way to get the list of available options and their possible values.
description-type: markdown
hash: 70a9763a5220ad78034a4ed8033b635f91e540fe8e6310934eb316c66e8f911b
homepage: https://github.com/0xd34df00d/coformat#readme
latest: 0.3.0.0
license-name: BSD-3-Clause
maintainer: 0xd34df00d@gmail.com
synopsis: Generate clang-format config based on some existing code base
test-bench-deps:
  aeson: '>=0'
  async: '>=0'
  async-pool: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  can-i-haz: '>=0'
  coformat: '>=0'
  command: '>=0'
  command-qq: '>=0'
  containers: '>=0'
  dom-selector: '>=0'
  extra: '>=0'
  fast-logger: '>=0'
  generic-data: '>=0'
  hashable: '>=0'
  html-conduit: '>=0'
  interpolate: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  monad-logger: '>=0'
  mtl: '>=0'
  optparse-generic: '>=0'
  scientific: '>=0'
  temporary: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  xml-conduit: '>=0'
  yaml: '>=0'
