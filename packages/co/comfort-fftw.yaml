homepage: https://hub.darcs.net/thielema/comfort-fftw/
changelog-type: ''
hash: 99e7f917fe6d35b1d9ea58301f92031acaf9cee2623457780b677f5cac2492ee
test-bench-deps:
  netlib-ffi: -any
  base: -any
  storable-record: '>=0.0.6 && <0.1'
  doctest-exitcode-stdio: '>=0.0 && <0.1'
  doctest-lib: '>=0.1 && <0.2'
  non-empty: '>=0.3.2 && <0.4'
  comfort-array: -any
  comfort-fftw: -any
  deepseq: -any
  QuickCheck: -any
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: High-level interface to FFTW (Fast Fourier Transform) based on comfort-array
changelog: ''
basic-deps:
  netlib-ffi: '>=0.0 && <0.2'
  base: '>=4.5 && <5'
  fftw-ffi: '>=0.0 && <0.2'
  comfort-array: '>=0.5 && <0.6'
  deepseq: '>=1.3 && <1.6'
  QuickCheck: '>=2 && <3'
all-versions:
- '0.0'
- 0.0.0.1
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.0.0.1
description-type: haddock
description: |-
  FFTW claims to be the fastest Fourier Transform in the West.
  This is a high-level interface to @libfftw@.
  We re-use the type classes from @netlib-ffi@.

  Features:

  * Support of one (audio), two (image), three (video) dimensional data,
  as well as n-dimensional one.

  * Support for batched transformations e.g. for block-wise Fourier transform.

  * No normalization like in plain @fftw@.
  This is because I see no universally best place to apply normalization.

  The use of @comfort-array@ enables to use array shapes tailored
  to Fourier transforms:

  [@Shape.Cyclic@]: for data where the @n-1@-th element
  can also be accessed via index @-1@.
  [@Shape.Half@]: for complex data of a real-to-complex Fourier transform.
  It saves you from case distinction between even and odd data length
  and according mistakes.
  [@Shape.Symmetric@]: for real-to-real Sine and Cosine transforms.
  They assert that you will always use
  the appropriate kind for back transformation.

  For rather simple examples
  see the packages @align-audio@ and @morbus-meniere@.

  See also package @fft@.
license-name: BSD-3-Clause
