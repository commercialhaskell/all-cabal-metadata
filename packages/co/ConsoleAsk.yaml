all-versions:
- 0.1.0.0
- 0.1.0.1
author: Toma Sasaki
basic-deps:
  base: '>=4.7 && <5'
  lens: '>=5 && <6'
  parsec: '>=3.1 && <3.2'
  regex-tdfa: '>=1.3 && <1.4'
  text: '>=2 && <3'
changelog: "# 0.1.0.1\r\n- Added compatibility with text-2.1.1 and below.\r\n\r\n#
  0.1.0.0\r\nInitial release.\r\n"
changelog-type: markdown
description: "# ConsoleAsk\r\nSimple CLI user input library\r\n\r\n## Example\r\n```haskell\r\nimport
  Data.Functor ((<&>))\r\nimport Data.Text (Text)\r\nimport Text.Parsec (char, digit,
  many1)\r\nimport Text.Regex.TDFA ((=~))\r\n\r\nimport System.Console.Ask (Ask, ask,
  askOptional, askOrElse, runAsk, defaultBehaviour)\r\nimport System.Console.Ask.Askable
  (Askable (fromText), fromParsec)\r\n\r\ndata UserInformation = UserInformation\r\n
  \   { name                   :: Text\r\n    , age                    :: Maybe Int\r\n
  \   , birthday               :: Date\r\n    , notificationPreference :: NotificationPreference\r\n
  \   } deriving Show\r\n\r\ndata NotificationPreference = NotificationPreference\r\n
  \   { needNotifications :: Bool\r\n    , emailAddress      :: Maybe EmailAddress\r\n
  \   } deriving Show\r\n\r\naskUserInformation :: Ask UserInformation\r\naskUserInformation
  =\r\n    UserInformation\r\n        <$> ask         \"What is your name?\"\r\n        <*>
  askOptional \"How old are you?\"\r\n        <*> ask         \"When is your birthday?\"\r\n
  \       <*> askNotificationPreference\r\n\r\naskNotificationPreference :: Ask NotificationPreference\r\naskNotificationPreference
  = do\r\n    needNotifications' <- askOrElse \"Do you need our update notifications?\"
  False\r\n\r\n    emailAddress' <-\r\n        if needNotifications'\r\n            then
  Just <$> ask \"What is your email address?\"\r\n            else pure Nothing\r\n\r\n
  \   pure NotificationPreference\r\n        { needNotifications = needNotifications'\r\n
  \       , emailAddress      = emailAddress'\r\n        }\r\n\r\nnewtype EmailAddress
  = EmailAddress Text deriving Show\r\n\r\ninstance Askable EmailAddress where\r\n
  \   fromText text =\r\n        if text =~ (\"[a-zA-Z0-9+._-]+@[a-zA-Z-]+\\\\.[a-z]+\"
  :: Text)\r\n            then Just (EmailAddress text)\r\n            else Nothing\r\n\r\ndata
  Date = Date Int Int deriving Show\r\n\r\ninstance Askable Date where\r\n    fromText
  = fromParsec $ do\r\n        day   <- many1 digit <&> read\r\n        _     <- char
  '/'\r\n        month <- many1 digit <&> read\r\n\r\n        pure (Date day month)\r\n\r\nmain
  :: IO ()\r\nmain = do\r\n    userInfo <- runAsk defaultBehaviour askUserInformation\r\n\r\n
  \   print userInfo\r\n```\r\n```\r\nWhat is your name?\r\n> Toma Sasaki\r\n\r\nHow
  old are you?\r\n>\r\n\r\nWhen is your birthday?\r\n> 15/9\r\n\r\nDo you need our
  update notifications? (Default: False)\r\n> aye\r\n\r\nWhat is your email address?\r\n>
  me@t-sasaki.net\r\n\r\nUserInformation\r\n    { name = \"Toma Sasaki\"\r\n    ,
  age = Nothing\r\n    , birthday = Date 15 9\r\n    , notificationPreference =\r\n
  \       NotificationPreference\r\n            { needNotifications = True\r\n            ,
  emailAddress = Just (EmailAddress \"me@t-sasaki.net\")\r\n            }\r\n    }\r\n```\r\n\r\n##
  Features\r\n- Automatically parses input values to `Askable` instances. (See also:
  [Askable.hs](https://github.com/t-sasaki915/ConsoleAsk/blob/main/src/System/Console/Ask/Askable.hs))\r\n```haskell\r\nimport
  Control.Monad.IO.Class (liftIO)\r\nimport Data.Text (Text)\r\nimport qualified Data.Text
  as Text\r\nimport qualified Data.Text.IO as TextIO\r\n\r\nimport System.Console.Ask
  (Ask, ask, askOptional, askOrElse, defaultBehaviour, runAsk)\r\n\r\nmain :: IO ()\r\nmain
  = runAsk defaultBehaviour $ do\r\n    name              <- ask         \"What is
  your name?\"               :: Ask Text\r\n    age               <- askOptional \"How
  old are you?\"                 :: Ask (Maybe Int)\r\n    needNotifications <- askOrElse
  \  \"Do you need notifications?\" False :: Ask Bool\r\n\r\n    liftIO $ do\r\n        TextIO.putStrLn
  (\"Name: \" <> name)\r\n        TextIO.putStrLn (\"Age: \" <> Text.show age)\r\n
  \       TextIO.putStrLn (\"Need notifications: \" <> Text.show needNotifications)\r\n```\r\n```\r\nWhat
  is your name?\r\n> Toma Sasaki\r\n\r\nHow old are you?\r\n> a\r\nInvalid input.\r\n\r\nHow
  old are you?\r\n> 18\r\n\r\nDo you need notifications? (Default: False)\r\n> no\r\n\r\nName:
  \"Toma Sasaki\"\r\nAge: 18\r\nNeed notifications: False\r\n```\r\n\r\n- `Askable`
  supports both `Text -> Maybe a` and parsec.\r\n```haskell\r\nimport Data.Functor
  ((<&>))\r\nimport Data.Text (Text)\r\nimport Text.Parsec (char, digit, many1)\r\nimport
  Text.Regex.TDFA ((=~))\r\n\r\nimport System.Console.Ask.Askable (Askable (fromText),
  fromParsec)\r\n\r\nnewtype EmailAddress = EmailAddress Text deriving Show\r\n\r\ninstance
  Askable EmailAddress where\r\n    fromText text =\r\n        if text =~ (\"[a-zA-Z0-9+._-]+@[a-zA-Z-]+\\\\.[a-z]+\"
  :: Text)\r\n            then Just (EmailAddress text)\r\n            else Nothing\r\n\r\ndata
  Date = Date Int Int deriving Show\r\n\r\ninstance Askable Date where\r\n    fromText
  = fromParsec $ do\r\n        day   <- many1 digit <&> read\r\n        _     <- char
  '/'\r\n        month <- many1 digit <&> read\r\n\r\n        pure (Date day month)\r\n```\r\n\r\n-
  Custom prompt\r\n```haskell\r\nimport Control.Monad.IO.Class (liftIO)\r\nimport
  Data.Text (Text)\r\nimport qualified Data.Text as Text\r\nimport qualified Data.Text.IO
  as TextIO\r\n\r\nimport System.Console.Ask (Ask, ask', askOptional', askOrElse',
  defaultBehaviour, runAsk)\r\n\r\nmain :: IO ()\r\nmain = runAsk defaultBehaviour
  $ do\r\n    name              <- ask'         \"What is your name?\"               \"Text>
  \" :: Ask Text\r\n    age               <- askOptional' \"How old are you?\"                 \"Int
  > \" :: Ask (Maybe Int)\r\n    needNotifications <- askOrElse'   \"Do you need notifications?\"
  False \"Y/N > \" :: Ask Bool\r\n\r\n    liftIO $ do\r\n        TextIO.putStrLn (\"Name:
  \" <> name)\r\n        TextIO.putStrLn (\"Age: \" <> Text.show age)\r\n        TextIO.putStrLn
  (\"Need notifications: \" <> Text.show needNotifications)\r\n```\r\n```\r\nWhat
  is your name?\r\nText> Toma Sasaki\r\n\r\nHow old are you?\r\nInt > 18\r\n\r\nDo
  you need notifications? (Default: False)\r\nY/N > True\r\n\r\nName: \"Toma Sasaki\"\r\nAge:
  18\r\nNeed notifications: True\r\n```\r\n\r\n- Customisable behaviour (See also:
  [Behaviour.hs](https://github.com/t-sasaki915/ConsoleAsk/blob/main/src/System/Console/Ask/Behaviour.hs))\r\n```haskell\r\nimport
  Control.Monad.IO.Class (liftIO)\r\nimport Data.Text (Text)\r\nimport qualified Data.Text
  as Text\r\nimport qualified Data.Text.IO as TextIO\r\n\r\nimport System.Console.Ask
  (Ask, ask, askOptional, askOrElse, defaultBehaviour, runAsk, withBehaviour)\r\nimport
  System.Console.Ask.Behaviour (DefaultValueStyle (..), defaultValueStyle, invalidInputErrorMsg,
  set)\r\n\r\nmain :: IO ()\r\nmain = runAsk defaultBehaviour $ do\r\n    let customBehaviour1
  = set invalidInputErrorMsg (Just \"??????\") defaultBehaviour\r\n        customBehaviour2
  = set defaultValueStyle OnNewline defaultBehaviour\r\n\r\n    name              <-
  ask \"What is your name?\" :: Ask Text\r\n    age               <- withBehaviour
  customBehaviour1 (askOptional \"How old are you?\")                 :: Ask (Maybe
  Int)\r\n    needNotifications <- withBehaviour customBehaviour2 (askOrElse   \"Do
  you need notifications?\" False) :: Ask Bool\r\n\r\n    liftIO $ do\r\n        TextIO.putStrLn
  (\"Name: \" <> name)\r\n        TextIO.putStrLn (\"Age: \" <> Text.show age)\r\n
  \       TextIO.putStrLn (\"Need notifications: \" <> Text.show needNotifications)\r\n```\r\n```\r\nWhat
  is your name?\r\n> Toma Sasaki\r\n\r\nHow old are you?\r\n> a\r\n??????\r\n\r\nHow
  old are you?\r\n> 18\r\n\r\nDo you need notifications?\r\nDefault: False\r\n> True\r\n\r\nName:
  \"Toma Sasaki\"\r\nAge: 18\r\nNeed notifications: True\r\n```\r\n"
description-type: markdown
hash: 59f85fa207c0bc12fb56d0285e1e31550d40891c5c74e97b21bdf0ccfbd1887c
homepage: https://github.com/t-sasaki915/ConsoleAsk#readme
latest: 0.1.0.1
license-name: MIT
maintainer: netst915@gmail.com
synopsis: Simple CLI user input library
test-bench-deps: {}
