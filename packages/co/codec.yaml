all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
author: Patrick Chilton
basic-deps:
  aeson: '>=1.0.0.0'
  base: '>=4.6 && <6'
  binary: '>=0'
  binary-bits: '>=0'
  bytestring: '>=0'
  mtl: '>=0'
  profunctors: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "# Codec [![Build Status](https://travis-ci.org/chpatrick/codec.svg?branch=master)](https://travis-ci.org/chpatrick/codec)
  [![Hackage](https://img.shields.io/hackage/v/codec.svg)](http://hackage.haskell.org/package/codec)\n\nCodec
  makes it simple to write composable bidirectional serializers with a consistent
  interface.\n\nJust define your data type normally:\n\n```haskell\ndata RecordB =
  RecordB\n  { recordBString :: String\n  , recordBDouble :: Double\n  } deriving
  (Eq, Ord, Show)\n```\n\nand then associate each field with a codec using the `=.`
  operator:\n\n```haskell\nrecordBObjCodec :: JSONCodec RecordB\nrecordBObjCodec =
  asObject \"RecordB\" $\n  RecordB\n    <$> recordBString =. field \"string\"\n    <*>
  recordBDouble =. field \"double\"\n```\n\nThat's it! If you want, you can now define
  `ToJSON` and `FromJSON` instances, or just use it directly:\n\n```haskell\ninstance
  ToJSON RecordB where\n  toJSON = toJSONCodec recordBObjCodec\n  toEncoding = toEncodingCodec
  recordBObjCodec\n\ninstance FromJSON RecordB where\n  parseJSON = parseJSONCodec
  recordBObjCodec\n```\n\nSupport can be added for almost any serialization library,
  but `aeson` and `binary` support is included.\n\nJSON example:\n```haskell\ndata
  RecordA = RecordA\n  { recordAInt :: Int\n  , recordANestedObj :: RecordB\n  , recordANestedArr
  :: RecordB\n  , recordANestedObjs :: [ RecordB ]\n  } deriving (Eq, Ord, Show)\n\ndata
  RecordB = RecordB\n  { recordBString :: String\n  , recordBDouble :: Double\n  }
  deriving (Eq, Ord, Show)\n\nrecordACodec :: JSONCodec RecordA\nrecordACodec = asObject
  \"RecordA\" $\n  RecordA\n    <$> recordAInt =. field \"int\"\n    <*> recordANestedObj
  =. field' \"nestedObj\" recordBObjCodec\n    <*> recordANestedArr =. field' \"nestedArr\"
  recordBArrCodec\n    <*> recordANestedObjs =. field' \"nestedObjs\" (arrayOf' id
  id recordBObjCodec)\n\nrecordBObjCodec :: JSONCodec RecordB\nrecordBObjCodec = asObject
  \"RecordB\" $\n  RecordB\n    <$> recordBString =. field \"string\"\n    <*> recordBDouble
  =. field \"double\"\n\n-- serialize to array elements\nrecordBArrCodec :: JSONCodec
  RecordB\nrecordBArrCodec = asArray \"RecordB\" $\n  RecordB\n    <$> recordBString
  =. element\n    <*> recordBDouble =. element\n```\n\nBinary example:\n```haskell\ndata
  RecordA = RecordA\n  { recordAInt64 :: Int64\n  , recordAWord8 :: Word8\n  , recordANestedB
  :: RecordB\n  } deriving (Eq, Ord, Show)\n\ndata RecordB = RecordB\n  { recordBWord16
  :: Word16\n  , recordBByteString64 :: BS.ByteString\n  } deriving (Eq, Ord, Show)\n\nrecordACodec
  :: BinaryCodec RecordA\nrecordACodec =\n  RecordA\n    <$> recordAInt64 =. int64le\n
  \   <*> recordAWord8 =. word8\n    <*> recordANestedB =. recordBCodec\n\nrecordBCodec
  :: BinaryCodec RecordB\nrecordBCodec =\n  RecordB\n    <$> recordBWord16 =. word16host\n
  \   <*> recordBByteString64 =. byteString 64\n```\n\nA `Codec` is just a combination
  of a deserializer `r a`, and a serializer `c -> w a`.\n```haskell\ndata CodecFor
  r w c a = Codec\n  { codecIn :: r a\n  , codecOut :: c -> w a\n  }\n  \ntype Codec
  r w a = CodecFor r w a a\n```\nWith `binary` for example, `r` is `Get` and `w` is
  `PutM`. The reason we have an extra parameter `c` is so that we can associate a
  `Codec` with a particular field using the `=.` operator:\n\n`(=.) :: (c' -> c) ->
  CodecFor r w c a -> CodecFor r w c' a`\n\n`Codec` is an instance of `Functor`, `Applicative`,
  `Monad` and `Profunctor`. You can serialize in any order you like, regardless of
  field order in the data type:\n\n```haskell\nrecordBCodecFlipped :: BinaryCodec
  RecordB\nrecordBCodecFlipped = do\n  bs64 <- recordBByteString64 =. byteString 64\n
  \ RecordB\n    <$> recordBWord16 =. word16host\n    <*> pure bs64\n```\n\n### Contributors\n\n`=.`
  operator and `Profunctor` approach thanks to [Xia Li-yao](https://github.com/lysxia)\n"
description-type: markdown
hash: 3db4bc8255a122ce1de3411060f5143302a4eef2d383181a5a43fa2cb3479505
homepage: https://github.com/chpatrick/codec
latest: 0.2.1
license-name: BSD-3-Clause
maintainer: chpatrick@gmail.com
synopsis: Simple bidirectional serialization
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  binary: '>=0'
  bytestring: '>=0'
  codec: '>=0'
  generic-arbitrary: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
