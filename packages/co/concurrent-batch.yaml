all-versions:
- 0.1.0.0
author: Harpo Roeder
basic-deps:
  base: '>=4.7 && <5'
  clock: '>=0'
  stm: '>=0'
changelog: ''
changelog-type: ''
description: |
  # Concurrent STM Batch

  This package facilitates batch processing based on STM. Batches are both sized, and have automatic timeout functionality.

  ## Example Usage

  The batch handler lives inside STM. Batches should not be processed at this stage but instead pushed somewhere else for processing. In this simple example we store the results in a TMVar and process them with ```putStrLn```. Requiring the initial handler to be in STM instead of IO increases async exception safety without having to mask on a potentially blocked action.

  ```
  import Control.Concurrent.STM
  import Control.Concurrent.STM.TMVar
  import Control.Concurrent.STM.Batch

  main :: IO ()
  main = do
    -- Create variable that batches are pushed to
    output <- newEmptyTMVarIO
    -- Create batches of 3 elements with a timeout of 10 seconds
    batcher <- newBatch 3 (Just $ fromSecs 10) (putTMVar output)
    -- Write 3 items to the batcher
    mapM_ (writeBatch batcher) [1 2 3]
    -- Get the first result batch
    batch1 <- atomically $ takeTMVar output
    -- See [3 2 1]
    putStrLn batch1
  ```
description-type: markdown
hash: 42f3c1d977040e57b7380324042b7374d2c1679f139efbe1afe0bc63f2e38971
homepage: https://github.com/harporoeder/concurrent-batch#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: roederharpo@protonmail.ch
synopsis: Concurrent batching queue based on STM with timeout.
test-bench-deps: {}
