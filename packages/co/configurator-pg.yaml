all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 0.2.10
- 0.2.11
author: Robert Vollmert
basic-deps:
  base: '>=4.9 && <4.22'
  bytestring: '>=0.10.8 && <0.13'
  containers: '>=0.5.6.2 && <0.8'
  megaparsec: '>=7.0.0 && <9.8'
  protolude: '>=0.1.10 && <0.4'
  scientific: '>=0.3.4.9 && <0.4'
  text: '>=1.2.2.2 && <2.2'
changelog: |
  # Revision history for configurator-pg

  ## 0.2.11 -- 2025-10-10

  * Fix loading `utf-8` file when locale encoding is set to `ASCII`

  ## 0.2.10 -- 2024-03-06

  * Allow megaparsec-9.6
  * Remove unused bytestring dependency from tests

  ## 0.2.9 -- 2023-12-07

  * Allow text-2.1 and GHC 9.8.

  ## 0.2.8 -- 2023-12-07

  * Allow megaparsec-9.5 and GHC 9.4.8.

  ## 0.2.7 -- 2022-08-11

  * Allow text-2.0 and GHC 9.4.

  ## 0.2.6 -- 2022-05-24

  * Allow megaparsec-9.2 and GHC 9.2.

  ## 0.2.5 -- 2020-10-26

  * Allow bytestring-0.11.

  ## 0.2.4 -- 2020-09-04

  * Allow megaparsec-9.0.

  ## 0.2.3 -- 2020-04-19

  * Drop support for GHC 7.10.

  ## 0.2.2 -- 2020-04-07

  * Support GHC 8.10.

  ## 0.2.1 -- 2020-03-11

  * Include test output files in source release.

  ## 0.2.0 -- 2020-03-10

  * Rewrite file parser with Megaparsec instead of
    Attoparsec for better error messages. No expected
    change in functionality except possibly in
    pathological cases.

  ## 0.1.0.6 -- 2020-03-08

  * Fix GHC 7.10 build by depending on package fail.

  ## 0.1.0.5 -- 2020-03-07

  * Provide a MonadFail instance for Parser.
    This fixes a PostgREST compile failure with GHC 8.8.3.

  ## 0.1.0.4 -- 2020-03-07

  * Relax bounds to support GHC 8.8.3.

  ## 0.1.0.3 -- 2019-06-04

  * Include another missing test data file.

  ## 0.1.0.2 -- 2019-06-04

  * Lower bounds to support GHC 7.10.3.
  * Include test data to fix tests.

  ## 0.1.0.1 -- 2019-06-03

  * Include README.md in release.

  ## 0.1.0.0 -- 2019-06-03

  * First version.
changelog-type: markdown
description: |
  ## What is this?

  This is a simplified version of the resting
  [configurator-ng](https://github.com/lpsmith/configurator-ng),
  aimed particularly to offer users of configurator-ng such as
  [PostgREST](postgrest.org) an easy path to migrate to
  a package that compiles with modern GHC versions and that
  continues to read existing configuration files.

  ## Changes

  configurator-pg skips some of configurator-ng's features, and
  changes the API in other places:

    * No configuration file reloading.
    * Simplified parsing API:
      - There is no type-class based value parsing; you need
        to supply explicit value parsers.
      - There's only `load` to read and evaluate a configuration file,
        and `runParser` to extract configuration values.
    * Simpler error handling and improved logging of parse errors.
    * Simplified handling of configuration subsets. There's `subassocs`
      and the unit tests pass, but the author didn't attempt to
      understand the original implementation fully.

  ## Credits

  The original configurator-ng is due to MailRank, Inc., Bryan
  O'Sullivan and Leon P Smith.

  The low-level parser (Data.Configurator.Syntax) was initially
  mostly unchanged, but has since been rewritten with Megaparsec
  for better error messages. The evaluation (Data.Configurator.Load)
  is still close to the original. The high-level parser
  (Data.Configurator.Parser) is original.

  ## File format

  In short, the file format supports:

  * A simple but flexible configuration language that supports several
    of the most commonly needed types of data, along with
    interpolation of strings from the configuration or the system
    environment (e.g. `$(HOME)`).

  * An `import` directive allows the configuration of a complex
    application to be split across several smaller files, or common
    configuration data to be shared across several applications.

  The format is more fully documented in the packages
  [configurator](https://hackage.haskell.org/package/configurator) and
  [configurator-ng](https://hackage.haskell.org/package/configurator-ng).

  Here's an example:

  ```
  # listen address
  hostname = "localhost"
  port = 8000

  logdir = "$(HOME)/logs"
  logfile = "$(logdir)/log.txt"
  loglevels = [1, 4, 5]

  users {
    alice = "alice@example.com"
    bob   = "bob@example.com"
  }

  # passwords.txt might contain
  #   alice = "12345"
  #   bob   = "sesame"
  passwords {
    import "secrets/passwords.txt"
  }
  ```

  ## Usage

  The following code can be used to parse the example above.

  ```
  import Data.Configurator

  data Settings = Settings
    { hostname  :: Text
    , port      :: Int
    , logfile   :: Maybe FilePath
    , loglevels :: Maybe [Int]
    , users     :: [(Text, Text)]
    , passwords :: [(Text, Text)]
    }

  settingsParser :: Parser Config Settings
  settingsParser =
    Settings
      <$> required "hostname" string
      <*> (Maybe.withDefault 1234 <$> optional "port" int)
      <*> optional "logfile" (pack <$> string)
      <*> optional "loglevels" (list int)
      <*> subassocs "users" string
      <*> subassocs "passwords" string

  loadSettings :: IO Settings
  loadSettings = do
    cfg <- load "settings.cfg"
    case runParser settingsParser cfg of
      Left err       -> die $ "reading config: " <> err
      Right settings -> return settings
  ```

  Though note that for no apparent reason, `subassocs`
  returns the full key, whence the parsed list of users
  will be

  ```
      [ ("users.alice", "alice@example.com")
      , ("users.bob", "bob@example.com")
      ]
  ```
description-type: markdown
hash: de0c56386591e85159436b0af04a8f15a4f4e156354e99709676c2c2ee959505
homepage: https://github.com/robx/configurator-pg
latest: 0.2.11
license-name: BSD-3-Clause
maintainer: rob@vllmrt.net
synopsis: Reduced parser for configurator-ng config files
test-bench-deps:
  HUnit: '>=1.3.1.2 && <1.7'
  base: '>=4.9 && <4.22'
  configurator-pg: '>=0'
  filepath: '>=1.4 && <1.6'
  protolude: '>=0.1.10 && <0.4'
  test-framework: '>=0.8.1.1 && <0.9'
  test-framework-hunit: '>=0.3.0.2 && <0.4'
  text: '>=1.2.2.2 && <2.2'
