homepage: ''
changelog-type: markdown
hash: 1f2f292bbc9cc7ca21091c239120169fb370d7860aae381e5a23e82e5c144ef1
test-bench-deps:
  these: -any
  base: -any
  genvalidity-sydtest: -any
  sydtest-discover: -any
  containers: -any
  compactable: -any
  sydtest: -any
  QuickCheck: -any
  genvalidity: -any
  vector: -any
maintainer: fresheyeball@protonmail.com
synopsis: A typeclass for structures which can be catMaybed, filtered, and partitioned.
changelog: |
  # Revision history for Compactable

  ## 0.1.0.0  -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  semigroupoids: -any
  these: -any
  base: '>=4.9 && <4.16'
  data-default-class: -any
  unordered-containers: -any
  vector-instances: -any
  containers: -any
  keys: -any
  lens: -any
  base-compat: -any
  bifunctors: -any
  contravariant: -any
  hashable: -any
  transformers: -any
  deepseq: -any
  QuickCheck: -any
  aeson: -any
  transformers-compat: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.2.0.0
author: Isaac Shapira
latest: 0.2.0.0
description-type: haddock
description: This provides polymorphic implementations for filter, compact (catMaybes),
  and separate. It allows for higher performance implementations to be used in place
  of defaults for all data structures, and endeavors to centerally document those
  implementations. Compactable aims to be as general and unconstrained as possible,
  providing instances for non-Functors like Set, as well as some Contravariants (though
  not published here). Compactable fully subsumes Data.Witherable, offers more laws,
  and is more general.
license-name: BSD-3-Clause
