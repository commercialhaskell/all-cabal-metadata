all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
- 0.1.0.10
- 0.1.0.11
- 0.1.0.12
- 0.1.0.13
- 0.1.0.14
- 0.1.0.15
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.1.4
- 0.1.1.5
author: Phil Hargett
basic-deps:
  async: '>=0'
  base: '>=4.8 && <5'
  bytestring: '>=0'
  cereal: '>=0'
  containers: '>=0'
  courier: '>=0'
  hslogger: '>=0'
  network: '>=0'
  stm: '>=0'
  text: '>=0'
  uuid: '>=0'
changelog: "0.1.1.5\n\n  * Added withClient / withServer helpers\n  * Removed support
  for 7.6 / 7.8, as they are before the FAMP proposal was         \n    implemented
  (https://wiki.haskell.org/Functor-Applicative-Monad_Proposal)\n  * Added typed equivalents
  for a selection of functions in Network.RPC\n\n0.1.1.4\n\n  * Corrected an issue
  with memory transport where a message to an unbound destination would be dropped\n\n0.1.1.3\n\n
  \ * Changed with... functions to return specified types in IO, instead of always
  returning (); not technically a\n    breaking change, but does prevent backward
  compatibility from here\n  * Memory transport flushes to destinations before completing
  shutdown\n  * Linting and first compile against GHC 8.0.1; continuing to support
  back to 7.6 for now\n\n0.1.1.2\n\n  * Updated README with better working example\n
  \ * Removed warning about TCP/IP transport; it's working again\n\n0.1.1.1\n\nThere
  are significant changes in this release, due to a complete rewrite of TCP connection
  handling, and,\nin so doing, a rewrite of the basic model for how transports and
  endpoints interact. This rewrite fixes\nbug #10.\n\nEndpoints now simply have inbound
  and outbound mailboxes, and a set of names to which the endpoint is bound\nvia a
  transport. The intent is that endpoints are discrete entities orthogonal to the
  transport which moves\nmessages between them. Its the job of the transport to move
  messages from the outbound mailbox of one endpoint\nto the inbound mailbox of the
  endpoint bound to the name specified in the envelope for a given message.\n\nNew
  helpers for managing the lifecycle of bindings and connections now exist, and also
  a helper for setting the name\nof a client.\n\n0.1.0.15\n\n    * Initial implementation
  of IPv6 transports (TCP and UDP)\n    * Small cleanup for better thread safety\n
  \   * Refactored socket transports for more code sharing\n    * Added anyCall\n
  \   * Exported RequestId and mkRequestId\n    * Incorporated changes from carletes
  for running tests in parallel by allowing\n    each test to bind to their own set
  of ports; on machines with multiple CPUs the speedup\n    has a noticeable impact
  on producitivity\n    * Added methodSelector for applications that may want to customize
  RPC handling\n\n0.1.0.14\n\n    * Included test source into tarball\n\n0.1.0.13\n\n
  \   * Explicitly removed support for 7.4; 7.6 now required.\n\n0.1.0.12\n\n    *
  Fixed a long-standing issue concerning inconsistent failures. Turns out, on operating\n
  \   systems with both IPv4 and IPv6 support, the TCP and UDP transports (which were
  really\n    only intended to be IPv4 for now) were not properly finding IPv4 addresses--in
  some\n    cases, IPv6 were being used instead, resulting in errors.  Both TCP and
  UDP now\n    pass (IPv4 only, of course), and in the future, IPv6 versions of these
  transports\n    will be added.\n\n0.1.0.11\n\n    * API breaking change: RPC functions
  no longer take / return instances of Serialize,\n    but they take / return Message
  values instead.  The reason for this change is that\n    while courier does use
  Serialize internally to simplify a variety of operations,\n    putting instances
  of Serialize in RPC functions was misleading: applications would\n    still need
  to take care to ensure that different RPC requests / responses could\n    be differentiated,
  otherwise courier might accidentally deserialize a message\n    to the wrong type
  at an application's request (e.g., inside a hear callback). This\n    can lead to
  decoding errors, which may actually causes exceptions to be thrown\n    in pure
  methods.  By leaving the interface to use Message values, its not only\n    consistent
  with the rest of Endpoint behavior, but it clarifies the responsibility\n    of
  the calling application to manage their Message payloads on their own.\n\n    *
  Improvements to RPC. Previously, it was not possible to differentiate correctly\n
  \   between requests and responses in the same mailbox: the only check was that\n
  \   deserialization succeeded, which wasn't a sufficient test, and it would be possible\n
  \   to deserialize a response as a request, etc.  This lead to spurious errors.\n\n
  \   * Added functions for detecting presence of messages in an an endpoint's mailbox\n
  \   (while still leaving them unconsumed): mostly added this for applications that\n
  \   need to react to the presence of a particular message, but not actual consume\n
  \   such messages.\n\n    * Exposed the Request / Response types used by RPC.  Applications
  may benefit\n    from detecting them or otherwise manipulating them outside of normal
  RPC\n    flow, they are exposed here for that purpose.\n\n0.1.0.10\n\n    * Added
  hear primitive as one-shot counterpart to call.  While handle\n    may be generally
  useful for many applications as it fully encapsulates repeated\n    handling of
  incoming requests, hear adds the ability to wait for a single\n    incoming request.
  Hear also returns a function of type Reply suitable for sending\n    a single response
  to the caller. Being more low-level in nature, some applications\n    find direct
  use of hear more flexible than the higher-level handle construct.\n\n    * Fixed
  a mistake in 0.1.0.9 where RPCs where supposed to have unique identifiers\n    for
  matching up a call with a response.  The value was never computed, when it\n    should
  have been a random value for every call, so that responses could be matched\n    with
  their originating request.  Now using Data.UUID.V4 to generate unique identifiers\n
  \   for each request; dependency added in cabal.\n\n    * Unit tests on OS X 10.9
  unreliable again, with both ghc 7.6.3 and ghc 7.8.1 (rc1)\n\n    * Unit tests passing
  on Ubuntu 12.04 LTS AMD64 ghc 7.6.3\n\n    * Unit tests passing on FP Complete with
  7.8 preview compiler\n\n0.1.0.9\n\n    * Added HelloWorld example, and updated code
  sample in documentation to reflect\n      working with the current API\n\n    *
  Early implementation of synchronous RPCs on top of endpoints, with basic unit tests.\n
  \     Both single and group RPCs are implemented, as are calls with definite and
  indefinite\n      waits for responses.\n\n    * Removed dependency on network-simple\n\n
  \   * Improved documentation throughout.\n\n0.1.0.8\n\n * Enabled selective out
  of order mesage reception, by using a Mailbox, an extension of STM's\n   TQueues
  that extracts the next message from the queue that matches a supplied selection\n
  \  function regardless of message order in the queue.\n\n   With selective out of
  order message reception, endpoints can approximate the\n   Erlang-style of message
  delivery and composing applications that must handle multiple\n   message types
  becomes simpler. If an application needs to handle multiple message types,\n   it
  can choose to run separate separate message pumps concurrently, each handling different\n
  \  types of messages. Each message pump can operate independently of one another.\n\n
  * Fixed issue #2 and other interim bugs all resulting from multiple name bindings
  that resolve\n   the same underlying address.  Now, bound sockets are reused (with
  reference counting) so\n   that if there are multiple bindings to the same address
  only 1 socket is created and user.\n\n * Unit tests passing on Mac OS X again, mostly
  due to correct management of sockets and\n   appropriate reuse.\n\n0.1.0.7\n\n  *
  First inclusion of changelog in package\n\n0.1.0.6\n\n * Added simple implementation
  of transport for UDP\n * Verified build & unit tests on Linux Ubuntu 13.10 with
  GHC 7.6.3\n * Verified build & unit tests on pre-release GHC 7.8 on FP Complete's
  platform\n * Mac OS X 10.9 is unreliable for unit tests, do to non-deterministic
  socket bind failures\n"
changelog-type: markdown
description: |-
  Inspired by Erlang's simple message-passing facilities, courier provides roughly similar
  capabilities. Applications simply create one or more endpoints,
  bind each to a transport using a given name, then can freely
  send / receive messages to other endpoints just by referencing the name each endpoint
  bound to its transport.

  A primary driver of this package's design is separation of concerns: many algorithms
  (especially for distributed applications) depend upon a message-passing foundation,
  but the algorithms are sufficiently complex that the details of how those messages
  are transmitted among nodes are best hidden away and solved separately from
  the distributed algorithm itself.  With this in mind, this package aims
  to provide a variety of transports as well as support for common communication
  idioms (e.g., in order message delivery, selective out of order message delivery,
  synchronous RPC, etc.).

  Applications may process messages in the order received at an endpoint, or use
  selective message reception to process the first message arriving at an endpoint
  that also matches a provided selection function. Through selective message reception,
  applications may approximate the style of an Erlang application, and enjoy better
  composability of message reception with multiple independent dispatch routines or
  message pumps.
description-type: haddock
hash: 130523009c798f8952285de6254a62d41311485bdad0db79246d4b17e5806156
homepage: http://github.com/hargettp/courier
latest: 0.1.1.5
license-name: MIT
maintainer: phil@haphazardhouse.net
synopsis: A message-passing library for simplifying network applications
test-bench-deps:
  HUnit: '>=0'
  async: '>=0'
  base: '>=0'
  cereal: '>=0'
  containers: '>=0'
  courier: '>=0'
  directory: '>=0'
  hslogger: '>=0'
  network: '>=0'
  stm: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
