homepage: ''
changelog-type: markdown
hash: 4231e25b8e7240905865f0958ed8440ae81d972df83f9bc21bdb384ea7ffd615
test-bench-deps:
  base: '>=4.7 && <5'
  composite-base: '>=0.7.0.0 && <0.8'
  dhall: '>=1.34.0 && <1.40'
  composite-dhall: -any
  text: '>=1.0 && <1.4'
  tasty-hunit: -any
  tasty: -any
maintainer: dan.firth@homotopic.tech
synopsis: Dhall instances for composite records.
changelog: |
  # Changelog for composite-dhall

  ## v0.0.4.0

  * Change implementations to use DerivingVia.
  * Export `F` and `CoF` newtypes for deriving new `Rec f` instances.

  ## v0.0.3.0

  * Add `ToDhall` and `FromDhall` instances for `Rec []`
  * Add `TextTemplate` and `runTextTemplate`.

  ## v0.0.2.0

  * Add `ToDhall` and `FromDhall` instances for `Rec Maybe`.
  * Add `ToDhall` instances for `Predicate`, `Equivalence` and `Op b`.
  * Add `FromDhall` instances for `Rec Predicate`, `Rec Equivalence` and `Rec (Op b)`

  ## v0.0.1.0

  * Add `ToDhall` and `FromDhall` instances for composite `Record`s.
basic-deps:
  base: '>=4.7 && <5'
  composite-base: '>=0.7.0.0 && <0.8'
  dhall: '>=1.34.0 && <1.40'
  text: '>=1.0 && <1.4'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
author: Daniel Firth
latest: 0.0.4.0
description-type: markdown
description: |
  # composite-dhall

  `ToDhall` and `FromDhall` instances for
  [composite](https://hackage.haskell.org/package/composite-base) records.

  You lets you use extensible records over any base functor that is representable
  in dhall.

  You can parse normal records:

  ```{.dhall}
  { a = "foo"
  , b = +5 }
  ```

  using a `Record` like:

  ```{.haskell}
  withLensesAndProxies
    [d|
      type A = "a" :-> Text

      type B = "b" :-> Int
      |]

  type MyRec = Record '[A, B]
  ```

  This also works for `Rec Maybe` and `Rec []`.

  ```{.dhall}
  { a = Just "foo"
  , b = Just +5 }
  ```

  ```{.haskell}
  type MyMaybeRec = Rec Maybe '[A, B]
  ```

  Similarly you can use a contravariant functor as the base functor
  to parse a collection of templates for different types.

  ```{.dhall}
  { a = \(x : Text) -> "Hello ${x}."
  , b = \(y : Integer) -> "You are ${Integer/show y} years old."
  }
  ```

  ```{.haskell}
  newtype TextTemplate a = TextTemplate (Op Text a)
    deriving newtype (FromDhall)

  newtype TextTemplates = TextTemplates {unTemplates :: Rec Template '[A, B]}
    deriving (FromDhall) via (Rec (Op Text) '[A, B])
  ```
license-name: MIT
