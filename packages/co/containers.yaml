homepage: ''
changelog-type: markdown
hash: a029734132bb3471f8a91e3deaa095581a97410c405a1c665643053db87d87c1
test-bench-deps: {}
maintainer: libraries@haskell.org
synopsis: Assorted concrete container types
changelog: "# Changelog for [`containers` package](http://github.com/haskell/containers)\n\n##
  0.6.5.1\n\n### Bug fixes\n\n* `foldr'` and `foldl'` for `Map` and `Set` are now
  strict everywhere they\n  should be, and we have detailed tests to make sure they
  stay that way.\n  (Thanks, coot.)\n\n* The `Ord IntSet` instance, which was broken
  in the last version, has been\n  repaired.\n\n### New instance\n\n* We now have
  `Ord a => Ord (Tree a)` (Thanks, Ericson2314.)\n\n### Testing fixes\n\n* Thanks
  to konsumlamm and infinity0 for various bug fixes in the test suite.\n\n## 0.6.4.1\n\n###
  Bug fixes\n\n* [Replace value-forcing variants of `compose` with lazy variants.](https://github.com/haskell/containers/pull/745)\n
  \ *  This brings `compose` closer in line with functions like `union` and `intersection`
  which don't evaluate any map values. (Thanks, Simon Jakobi)\n\n### Additions\n\n*
  [Add `reverseTopSort` to `Data.Graph`](https://github.com/haskell/containers/pull/638)
  (Thanks, James Parker)\n\n* [Expose `traverseMaybeWithKey` from `Data.IntMap.{Lazy,Strict}`](https://github.com/haskell/containers/pull/743)
  (Thanks, Simon\n  Jakobi)\n\n### Other changes\n\n* Improvements to the testsuite:
  [#663](https://github.com/haskell/containers/pull/663), [#662](https://github.com/haskell/containers/pull/662)
  (Thanks, Bertram Felgenhauer)\n\n* [Fix build with `stack test`](https://github.com/haskell/containers/pull/738)
  (Thanks, Simon Jakobi)\n\n[0.6.4.1]: https://github.com/haskell/containers/compare/v0.6.3.1-release...v0.6.4.1\n\n##
  0.6.3.1\n\n### Bug fixes\n\n* Fix `traverse` and `traverseWithKey` for `IntMap`,
  which would\n  previously produce invalid `IntMap`s when the input contained\n  negative
  keys (Thanks, Felix Paulusma).\n\n* Fix the traversal order of various functions
  for `Data.IntMap`:\n  `traverseWithKey`, `traverseMaybeWithKey`, `filterWithKeyA`,\n
  \ `minimum`, `maximum`, `mapAccum`, `mapAccumWithKey`, `mapAccumL`,\n  `mapAccumRWithKey`,
  `mergeA` (Thanks, Felix Paulusma, Simon Jakobi).\n\n### Additions\n\n* Add `compose`
  for `Map` and `IntMap` (Thanks, Alexandre Esteves).\n\n* Add `alterF` for `Set`
  and `IntSet` (Thanks, Simon Jakobi).\n\n* Add `Data.IntSet.mapMonotonic` (Thanks,
  Javran Cheng).\n\n* Add `instance Bifoldable Map` (Thanks, Joseph C. Sible).\n\n###
  Performance improvements\n\n* Make `(<*)` for `Data.Sequence` incrementally asymptotically
  optimal.\n  This finally completes the task, begun in December 2014, of making all\n
  \ the `Applicative` methods for sequences asymptotically optimal\n  even when their
  results are consumed incrementally. Many thanks to\n  Li-Yao Xia and Bertram Felgenhauer
  for helping to clean up and begin\n  to document this rather tricky code.\n\n* Speed
  up `fromList` and related functions in `Data.IntSet`, `Data.IntMap`\n  and `Data.IntMap.Strict`
  (Thanks, Bertram Felgenhauer).\n\n* Use `count{Leading,Trailing}Zeros` in `Data.IntSet`
  internals (Thanks, Alex\n  Biehl).\n\n### Other changes\n\n* Reduce usage of the
  `Forest` type synonym in `Data.Tree` (Thanks, David\n  Feuer).\n\n* Address a Core
  lint warning for `foldToMaybeTree` (Thanks, Matthew Pickering).\n\n* Improve documentation
  (Thanks to Daniel Wagner, Johannes Waldmann, Steve Mao,\n  Gabriel Greif, Jean-Baptiste
  Mazon, Ziyang Liu, Matt Renaud, Li-Yao Xia).\n\n* Improvements to the testsuite
  and benchmarks (Thanks, Bertram Felgenhauer,\n  Simon Jakobi, Johannes Waldmann).\n\n*
  Canonicalise `Seq`'s `Monoid` instance (Thanks, Fumiaki Kinoshita).\n\n## 0.6.2.1\n\n*
  Add `disjoint` for `Map` and `IntMap` (Thanks, Simon Jakobi).\n\n* Fix documentation
  bugs (Thanks, olligobber).\n\n* Fix unused imports (Thanks, Ben Gamari).\n\n## 0.6.1.1\n\n*
  Fix Foldable instance for IntMap, which previously placed positively\n  keyed entries
  before negatively keyed ones for `fold`, `foldMap`, and\n  `traverse`.\n\n* Make
  strict `IntMap` merges strict.\n\n* Make `Data.IntMap.Merge.Strict` tactics (except
  `preserveMissing`)\n  strict.\n\n* Add a strict `Data.Map.Merge.Strict.preserveMissing'`
  tactic.\n\n* Make `stimes` for sequences work with 0 arguments, and make it more\n
  \ efficient.\n\n* Speed up `cartesianProduct` for `Data.Set`.\n\n* Speed up `Data.Set.isSubsetOf`,
  `Data.Map.isSubmapOf`, and `Data.Set.disjoint`.\n\n* Allow inlining for `Data.Sequence.traverseWithIndex`,
  making it faster\n  than `sequence` combined with `mapWithIndex`.\n\n* Produce more
  concise assembly from `maskW`. (Thanks, Mateusz Kowalczyk)\n\n* Use `countLeadingZeros`
  to implement `highestBitMask` (Thanks, Dmitry\n  Ivanov)\n\n* Improve documentation.
  (Thanks to jwaldmann, Yuji Yamamoto, David Sanders,\n  Alec Theriault, Vaibhav Sagar,
  Boro Sitnikovski, Morten Kolstad, Vados,\n  Benjamin Web, Chris Martin, Alexandre
  Esteves).\n\n* Clean up packaging and testing. (Thanks, David Eichmann, Simon Jakobi,\n
  \ Oleg Grenrus, Andreas Klebinger)\n\n## 0.6.0.1\n\n* Released with GHC 8.6\n\n###
  New functions and class instances\n\n* Add `Data.Containers.ListUtils` offering
  `nub`-like functions. (Thanks to\n  Gershom Bazerman for starting the process of
  writing these.)\n\n* Add `Generic` and `Generic1` instances for key `Data.Sequence.Internal`
  types:\n  `Node`, `Digit`, `Elem`, and `FingerTree`.\n\n### Death of deprecated
  functions\n\nThe following functions have been disabled. As an experiment\nin function
  removal technology, the functions are still temporarily present,\nbut any attempts
  to use them will result in type errors advising on\nreplacement.\n\n* `Data.IntMap`:
  `insertWith'`, `insertWithKey'`, `fold`, and `foldWithKey`.\n\n* `Data.Map`: `insertWith'`,
  `insertWithKey'`, `insertLookupWithKey'`,\n   `fold`, and `foldWithKey`.\n\nThe
  same has been done for the deprecated exports of `showTree` and\n`showTreeWith`.
  These function remain available in the internal `Debug`\nmodules.\n\n### Changes
  to existing functions\n\n* Generalize the types of `unions` and `unionsWith`. (Thanks,
  jwaldmann.)\n\n### Performance improvements\n\n* Speed up folds and `traverse` on
  sequences. (Thanks, Donnacha Oisín Kidney.)\n\n* Speed up `Data.Set.union`. (Thanks,
  Joachim Breitner.)\n\n* Speed up several algorithms in `Data.Graph` a bit by using
  unboxed arrays\n  where appropriate.\n\n* Implement `Data.Graph.indegree` directly
  instead of taking the transpose\n  and calculating its `outdegree`. This may not
  lead to an immediate performance\n  improvement (see [GHC Trac #14785](https://ghc.haskell.org/trac/ghc/ticket/14785))\n
  \ but it should be better eventually.\n\n### Other package changes\n\n* Drop support
  for GHC versions before 7.6.\n\n* Improve `Data.Graph` documentation, and reorganize
  map and set documentation.\n\n* Remove the `Data.Map.Lazy.Merge` and `Data.Map.Strict.Merge`
  modules. These\n  were renamed and deprecated almost as soon as they were introduced.\n\n\n##
  0.5.11\n\n* Released with GHC 8.4.\n\n### New functions and class instances\n\n*
  Add a `MonadFix` instance for `Data.Sequence`.\n\n* Add a `MonadFix` instance for
  `Data.Tree`.\n\n* Add `powerSet`, `cartesianProduct`, and `disjointUnion` for\n
  \ `Data.Set`. (Thanks, Edward Kmett.)\n\n* Add `disjoint` for `Data.Set` and `Data.IntSet`.
  (Thanks, Víctor López Juan.)\n\n* Add `lookupMin` and `lookupMax` to `Data.IntMap`.
  (Thanks, bwroga.)\n\n* Add `unzip` and `unzipWith` to `Data.Sequence`. Make unzipping\n
  \ build its results in lockstep to avoid certain space leaks.\n\n* Add carefully
  optimized implementations of `sortOn` and `unstableSortOn`\n  to `Data.Sequence`.
  (Thanks, Donnacha Oisín Kidney.)\n\n### Changes to existing functions and features\n\n*
  Make `Data.Sequence.replicateM` a synonym for `replicateA`\n  for post-AMP `base`.\n\n*
  Rewrite the `IsString` instance head for sequences, improving compatibility\n  with
  the list instance and also improving type inference. We used to have\n  \n  ```haskell\n
  \ instance IsString (Seq Char)\n  ```\n  \n  Now we commit more eagerly with\n  \n
  \ ```haskell\n  instance a ~ Char => IsString (Seq a)\n  ```\n\n* Make `>>=` for
  `Data.Tree` strict in the result of its second argument;\n  being too lazy here
  is almost useless, and violates one of the monad identity\n  laws. Specifically,
  `return () >>= \\_ -> undefined` should always be\n  `undefined`, but this was not
  the case.\n\n* Harmonize laziness details for `minView` and `maxView` between\n
  \ `Data.IntMap` and `Data.Map`.\n\n### Performance improvement\n\n* Speed up both
  stable and unstable sorting for `Data.Sequence` by (Thanks, Donnacha\n  Oisín Kidney.)\n\n###
  Other changes\n\n* Update for recent and upcoming GHC and Cabal versions (Thanks,
  Herbert\n  Valerio Reidel, Simon Jakobi, and Ryan Scott.)\n\n* Improve external
  and internal documentation (Thanks, Oleg Grenrus\n  and Benjamin Hodgson.)\n\n*
  Add tutorial-style documentation.\n\n* Add Haddock `@since` annotations for changes
  made since version\n  0.5.4 (Thanks, Simon Jakobi.)\n\n* Add a (very incomplete)
  test suite for `Data.Tree`.\n\n* Add structural validity checks to the test suites
  for `Data.IntMap`\n  and `Data.IntSet` (Thanks to Joachim Breitner for catching
  an error\n  in a first draft.)\n\n## 0.5.10.2\n\n* Released with GHC 8.2.\n\n* Use
  `COMPLETE` pragmas to declare complete sets of pattern synonyms\n  for `Data.Sequence`.
  At last!\n\n* Make `Data.IntMap.Strict.traverseWithKey` force the values before\n
  \ installing them in the result. Previously, this function could be used to\n  produce
  an `IntMap` containing undefined values.\n\n* Fix strictness bugs in various rewrite
  rules for `Data.Map.Strict` and\n  `Data.IntMap.Strict`. Previously, rules could
  unintentionally reduce\n  strictness. The most important change in this regard is
  the elimination\n  of rules rewriting `*.Strict.map coerce` to `coerce`. To map
  a coercion\n  over a structure for free, be sure to use the lazy `map` or `fmap`.\n
  \ It is possible to write rules that do a somewhat better job of this, but\n  it
  turns out to be a bit messy.\n\n* Optimize `Data.IntMap.restrictKeys` and `Data.IntMap.withoutKeys`.
  The\n  semantic fix in 0.5.10.1 left them rather slow in certain cases.\n\n* Speed
  up `size` for `IntSet` and `IntMap` (thanks, Mike Ledger!).\n\n* Define a custom
  `liftA2` in `Applicative` instances for base 4.10, and use\n  `liftA2` rather than
  `<*>` whenever it may be beneficial.\n\n* Add `liftA2`-related `RULES` for `Data.Sequence`.\n\n*
  Export non-deprecated versions of `showTree` and `showTreeWith` from\n  `Data.IntMap.Internal.Debug`.\n\n##
  0.5.10.1\n\n* Fix completely incorrect implementations of `Data.IntMap.restrictKeys`
  and\n  `Data.IntMap.withoutKeys`. Make the tests for these actually run. (Thanks\n
  \ to Tom Smalley for reporting this.)\n  \n* Fix a minor bug in the `Show1` instance
  of `Data.Tree`. This produced valid\n  output, but with fewer parentheses than `Show`.
  (Thanks, Ryan Scott.)\n\n* Add `MonadZip` instance for `Data.Sequence`.\n\n* Remove
  meaningless stability annotations (Thanks, Simon Jakobi.)\n\n## 0.5.9.2\n\n* Backport
  bug fixes from 0.5.10.1\n\n## 0.5.9.1\n\n* Add `merge` and `mergeA` for `Data.IntMap`.\n\n*
  Add instances for `Data.Graph.SCC`: `Foldable`, `Traversable`, `Data`,\n  `Generic`,
  `Generic1`, `Eq`, `Eq1`, `Show`, `Show1`, `Read`, and `Read1`.\n\n* Add lifted instances
  (from `Data.Functor.Classes`) for `Data.Sequence`,\n  `Data.Map`, `Data.Set`, `Data.IntMap`,
  and `Data.Tree`. (Thanks to\n  Oleg Grenrus for doing a lot of this work.)\n\n*
  Properly deprecate functions in `Data.IntMap` long documented as deprecated.\n\n*
  Rename several internal modules for clarity. Thanks to esoeylemez for starting\n
  \ this process.\n\n* Make `Data.Map.fromDistinctAscList` and `Data.Map.fromDistinctDescList`
  more\n  eager, improving performance.\n\n* Plug space leaks in `Data.Map.Lazy.fromAscList`
  and\n `Data.Map.Lazy.fromDescList` by manually inlining constant functions.\n\n*
  Add `lookupMin` and `lookupMax` to `Data.Set` and `Data.Map` as total\nalternatives
  to `findMin` and `findMax`.\n\n* Add `!?` to `Data.Map` as a total alternative to
  `!`.\n\n* Avoid using `deleteFindMin` and `deleteFindMax` internally, preferring\ntotal
  functions instead. New implementations of said functions lead to slight\nperformance
  improvements overall.\n\n## 0.5.8.2\n\n* Backport bug fixes from 0.5.10.1.\n\n##
  0.5.8.1 *Aug 2016*\n\n### General package changes\n\n  * Remove all attempts to
  support nhc98 and any versions of GHC\n    before 7.0.\n\n  * Integrate benchmarks
  with Cabal. (Thanks, Gabriel Gonzalez!)\n  \n  * Make Cabal report required extensions
  properly, and stop using\n    default extensions. Note that we do *not* report extensions
  conditionally enabled\n    based on GHC version, as doing so would lead to a maintenance
  nightmare\n    with no obvious benefits.\n\n  * Use `BangPatterns` throughout to
  reduce noise. This extension\n    is now *required* to compile `containers`.\n\n
  \ * Improve QuickCheck properties taking arbitrary functions by using\n    `Test.QuickCheck.Function.Fun`
  instead of evil `Show` instances\n    for functions.\n\n  * Expose several internal
  modules through Cabal (as requested by\n    Edward Kmett). These remain completely
  unsupported.\n\n### New exports and instances\n\n  * Add `alterF`, `restrictKeys`,
  and `withoutKeys` to `Data.Map`\n    and `Data.IntMap`.\n\n  * Add `take`, `drop`,
  `splitAt`, `takeWhileAntitone`, `dropWhileAntitone`,\n    and `spanAntitone` for
  `Data.Map` and `Data.Set`. Thanks to Cale Gibbard\n    for suggesting these.\n\n
  \ * Add `merge`, `mergeA`, and associated merge tactics for `Data.Map`.\n    Many
  thanks to Cale Gibbard, Ryan Trinkle, and Dan Doel for\n    inspiring the merge
  idea and helping refine the interface.\n\n  * Add `traverseMaybeWithKey`, `fromDescList`,
  `fromDescListWith`,\n    `fromDescListWithKey`, and `fromDistinctDescList` to `Data.Map`.\n\n
  \ * Add `fromDescList` and `fromDistinctDescList` to `Data.Set`.\n\n  * Add `Empty`,
  `:<|`, and `:|>` pattern synonyms for `Data.Sequence`.\n\n  * Add `adjust'`, `(!?)`,
  `lookup`, `chunksOf`, `cycleTaking`, `insertAt`, `deleteAt`, `intersperse`,\n    `foldMapWithIndex`,
  and `traverseWithIndex` for `Data.Sequence`.\n\n  * Derive `Generic` and `Generic1`
  for `Data.Tree.Tree`, `Data.Sequence.ViewL`,\n    and `Data.Sequence.ViewR`.\n\n
  \ * Add `foldTree` for `Data.Tree`. (Thanks, Daniel Wagner!)\n\n### Semantic changes\n\n
  \ * Make `Data.Sequence.splitAt` strict in its arguments. Previously,\n    it returned
  a lazy pair.\n\n  * Fix completely erroneous definition of `length` for `Data.Sequence.ViewR`.\n
  \ \n  * Make `Data.Map.Strict.traverseWithKey` force result values before\n    installing
  them in the new map.\n\n  * Make `drawTree` handle newlines better. (Thanks, recursion-ninja!)\n\n###
  Deprecations\n\n  * All functions in `Data.Map` proper that have been documented
  as deprecated since\n    version 0.5 or before now have `DEPRECATED` pragmas and
  will actually be\n    removed after another cycle or two.\n\n  * Tree printing functions
  in `Data.Map` intended for library debugging are now\n    deprecated. They will
  continue to be available for the foreseeable future in\n    an internal module.\n\n###
  Performance changes\n\n  * Substantially speed up `splitAt`, `zipWith`, `take`,
  `drop`,\n    `fromList`, `partition`, `foldl'`, and `foldr'` for `Data.Sequence`.\n
  \   Special thanks to Lennart Spitzner for digging into the performance\n    problems
  with previous versions of `fromList` and finding a way to\n    make it really fast.
  Slightly optimize `replicateA`. Stop `traverse`\n    from performing many unnecessary
  `fmap` operations.\n\n  * Most operations in `Data.Sequence` advertised as taking
  logarithmic\n    time (including `><` and `adjust`) now use their full allotted
  time\n    to avoid potentially building up chains of thunks in the tree. In general,\n
  \   the only remaining operations that avoid doing more than they\n    really need
  are the particular bulk creation and transformation functions\n    that really benefit
  from the extra laziness. There are some situations\n    where this change may slow
  programs down, but I think having more\n    predictable and usually better performance
  more than makes up for that.\n\n  * Add rewrite rules to fuse `fmap` with `reverse`
  for `Data.Sequence`.\n\n  * Switch from *hedge* algorithms to *divide-and-conquer*
  algorithms\n    for union, intersection, difference, and merge in both `Data.Map`\n
  \   and `Data.Set`. These algorithms are simpler, are known to be\n    asymptotically
  optimal, and are faster according to our benchmarks.\n\n  * Speed up `adjust` for
  `Data.Map`. Allow `map` to inline, and\n    define a custom `(<$)`. This considerably
  improves mapping with\n    a constant function.\n\n  * Remove non-essential laziness
  in `Data.Map.Lazy` implementation.\n\n  * Speed up deletion and alteration functions
  for `Data.IntMap`.\n\n\n## 0.5.7.1  *Dec 2015*\n\n  * Planned to bundle with GHC
  8.0.1.\n\n  * Add `IsString` instance to `Data.Sequence`.\n\n  * Define `Semigroup`
  instances for `Data.Map`, `Data.Set`, `Data.IntMap`,\n    `Data.IntSet` and `Data.Sequence`.\n\n##
  0.5.6.2  *Dec 2014*\n\n  * Bundled with GHC 7.10.1.\n\n  * Add role annotations
  for `Data.Map` and `Data.Set`.\n\n  * Add `IsList` instances for `Data.Map`, `Data.Set`,
  `Data.IntMap` and\n    `Data.IntSet`.\n\n  * Several performance improvements for
  `Data.Sequence`.\n\n  * Add `Data.Sequence.fromFunction` and `Data.Sequence.fromArray`.\n\n##
  0.5.4.0  *Jan 2014*\n\n  * Bundled with GHC 7.8.1.\n\n  * The `Data.Map.fromList`
  and `Data.Set.fromList` now use linear-time\n    algorithm if the input is sorted,
  without need to call `fromDistinctAscList`.\n\n  * Implement indexing operations
  (`lookupIndex`, `findIndex`, `elemAt`,\n    `deletaAt`) for `Data.Set` too.\n\n
  \ * Add `Applicative` and `Alternative` instances for `Data.Sequence`.\n\n  * Add
  `foldMapWithKey` to `Data.Map` and `Data.IntMap`.\n\n  * Implement poly-kinded `Typeable`.\n\n
  \ * Add `Functor` instance for `Data.Graph.SCC`.\n\n  * Add `Data.Map.splitRoot`
  and `Data.Set.splitRoot`.\n\n## 0.5.0.0  *May 2012*\n\n  * Bundled with GHC 7.6.1.\n\n
  \ * Major improvements since last release:\n    * a clearer distinction between
  value-lazy and value-strict containers,\n    * performance improvements across the
  board,\n    * a big internal clean-up, and\n    * new functions for e.g. merging,
  updating, and searching containers.\n\n  * While the old `Data.Map` and\n    `Data.IntMap`
  modules will continue to exist for the foreseeable future, we've\n    abandoned
  the practice of having the strict and lazy versions of each\n    function distinguished
  by an apostrophe. The distinction is instead made at\n    the module level, by introducing
  four new modules:\n    * Data.Map.Strict\n    * Data.Map.Lazy\n    * Data.IntMap.Strict\n
  \   * Data.IntMap.Lazy\n\n    This split has three benefits:\n    * It makes the
  choice between value-strict and value-lazy containers\n      more declarative; you
  pick once at import time, instead of having to\n      remember to use the strict
  or lazy versions of a function every time\n      you modify the container.\n    *
  It alleviates a common source of performance issues, by forcing the\n      user
  to think about the strictness properties upfront. For example,\n      using insertWith
  instead of insertWith' is a common source of\n      containers-related performance
  bugs.\n    * There are fewer functions per module, making it easier to get an\n
  \     overview of each module.\n\n  * Note that the types used in the strict and
  lazy APIs are the same, so\n    you can still use the same container in a \"mixed\"
  manner, if needed.\n\n  * The `Data.IntSet` representation changed to store small
  sets using\n    bits in an `Word`. Larger sets are stored as a collection of such\n
  \   dense small sets, connected together by a prefix trie.\n\n## 0.4.2.1  *Feb 2012*\n\n
  \ * Bundled with GHC 7.4.1.\n\n  * `Data.Map now exports `foldr`, `foldr'`, `foldl`
  and `foldl'`.\n\n  * `Data.Set now exports `foldr`, `foldr'`, `foldl` and `foldl'`.\n\n
  \ * `Data.IntMap now exports `foldr`, `foldr'`, `foldl`, `foldl'`, `foldrWithKey`,
  `foldrWithKey'`, `foldlWithKey` and `foldlWithKey'`.\n\n  * `Data.IntSet now exports
  `foldr`, `foldr'`, `foldl` and `foldl'`.\n\n  * `Data.Map.foldWithKey` is no longer
  deprecated, although it is expected to be deprecated again in the future.\n\n  *
  There are now `NFData` instance for `Data.Map.Map`, `Data.Set.Set`, `Data.IntMap.IntMap`,
  `Data.IntSet.IntSet` and `Data.Tree.Tree`.\n\n## 0.4.1.0  *Aug 2011*\n\n  * Bundled
  with GHC 7.2.1.\n\n  * `Data.Map` now exports new functions `foldrWithKey'` and
  `foldlWithKey'`, which are strict variants of `foldrWithKey` and `foldlWithKey`
  respectively.\n\n  * `Data.IntMap` now exports new functions `insertWith'` and `insertWithKey'`,
  which are strict variants of `insertWith` and `insertWithKey` respectively.\n\n##
  0.4.0.0  *Nov 2010*\n\n  * Bundled with GHC 7.0.1.\n\n  * Strictness is now more
  consistent, with containers being strict in their elements even in singleton cases.\n\n
  \ * There is a new function `insertLookupWithKey'` in `Data.Map`.\n\n  * The `foldWithKey`
  function in `Data.Map` has been deprecated in favour of `foldrWithKey`.\n\n## 0.3.0.0
  \ *Dec 2009*\n\n  * Bundled with GHC 6.12.1.\n\n  * `mapAccumRWithKey` has been
  added to `Data.IntMap`.\n\n  * A `Traversable` instance has been added to `Data.IntMap.IntMap`.\n\n
  \ * The types of `Data.IntMap.intersectionWith` and `Data.IntMap.intersectionWithKey`
  have been changed from\n    `intersectionWith :: (a -> b -> a) -> IntMap a -> IntMap
  b -> IntMap a`\n    `intersectionWithKey :: (Key -> a -> b -> a) -> IntMap a ->
  IntMap b -> IntMap a`\n    to\n    `intersectionWith :: (a -> b -> c) -> IntMap
  a -> IntMap b -> IntMap c`\n    `intersectionWithKey :: (Key -> a -> b -> c) ->
  IntMap a -> IntMap b -> IntMap c`\n\n  * The types of `Data.IntMap.findMin` and
  `Data.IntMap.findMax` have been changed from\n    `findMin :: IntMap a -> a`\n    `findMax
  :: IntMap a -> a`\n    to\n    `findMin :: IntMap a -> (Int,a)`\n    `findMax ::
  IntMap a -> (Int,a)`\n\n  * `Data.Map` now exports `mapAccumRWithKey`, `foldrWithKey`,
  `foldlWithKey` and `toDescList`.\n\n  * `Data.Sequence` now exports `replicate`,
  `replicateA`, `replicateM`, `iterateN`, `unfoldr`, `unfoldl`, `scanl`, `scanl1`,
  `scanr`, `scanr1`, `tails`, `inits`, `takeWhileL`, `takeWhileR`, `dropWhileL`, `dropWhileR`,
  `spanl`, `spanr`, `breakl`, `breakr`, `partition`, `filter`, `sort`, `sortBy`, `unstableSort`,
  `unstableSortBy`, `elemIndexL`, `elemIndicesL`, `elemIndexR`, `elemIndicesR`, `findIndexL`,
  `findIndicesL`, `findIndexR`, `findIndicesR`, `foldlWithIndex`, `foldrWithIndex`,
  `mapWithIndex`, `zip`, `zipWith`, `zip3`, `zipWith3`, `zip4` and `zipWith4`.\n\n##
  0.2.0.0  *Nov 2008*\n\n  * Bundled with GHC 6.10.1.\n\n  * Various result type now
  use `Maybe` rather than allowing any `Monad`.\n\n## 0.1.0.0  *Nov 2007*\n\n  * Bundled
  with GHC 6.8.1.\n\n  * Initial split off from GHC base.\n"
basic-deps:
  base: '>=4.6 && <5'
  array: '>=0.4.0.0'
  deepseq: '>=1.2 && <1.5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.2.1
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.2.1
- 0.5.3.0
- 0.5.3.1
- 0.5.4.0
- 0.5.5.0
- 0.5.5.1
- 0.5.6.0
- 0.5.6.1
- 0.5.6.2
- 0.5.6.3
- 0.5.7.0
- 0.5.7.1
- 0.5.8.2
- 0.5.9.2
- 0.5.10.1
- 0.5.10.2
- 0.5.11.0
- 0.6.0.1
- 0.6.1.1
- 0.6.2.1
- 0.6.3.1
- 0.6.4.1
- 0.6.5.1
author: ''
latest: 0.6.5.1
description-type: haddock
description: |2-

  This package contains efficient general-purpose implementations
  of various immutable container types including sets, maps, sequences,
  trees, and graphs.

  For a walkthrough of what this package provides with examples of common
  operations see the [containers
  introduction](https://haskell-containers.readthedocs.io).

  The declared cost of each operation is either worst-case or amortized, but
  remains valid even if structures are shared.
license-name: BSD-3-Clause
