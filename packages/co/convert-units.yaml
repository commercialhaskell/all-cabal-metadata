all-versions:
- '0'
author: Alice Rixte
basic-deps:
  base: '>=4.18 && <5'
  template-haskell: '>=2.21.0'
changelog: "# Changelog for `tiles`\r\n\r\nAll notable changes to this project will
  be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand
  this project adheres to the\r\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\r\n\r\n##
  Unreleased\r\n\r\n## 0.1.0.0 - YYYY-MM-DD\r\n"
changelog-type: markdown
description: "# convert-units\r\n\r\n[![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org)
  [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/AliceRixte/convert-units/LICENSE)
  [![Hackage](https://img.shields.io/hackage/v/convert-units.svg)](https://hackage.haskell.org/package/convert-units)
  [![Nightly](https://www.stackage.org/package/convert-units/badge/nightly)](https://www.stackage.org/nightly/package/convert-units)
  [![LTS](https://www.stackage.org/package/convert-units/badge/lts)](https://www.stackage.org/lts/package/convert-units)\r\n\r\nA
  Haskell library to convert between units, that will statically check the dimensions
  of the units being converted.\r\n\r\nConversions are usually as fast as manual multiplication
  by a conversion factor, thanks to heavy use of inlining.\r\n\r\n## Usage\r\n\r\nYou
  will need the `TypeApplications` extension:\r\n\r\n``` haskell\r\n>>> :set -XTypeApplications\r\n```\r\n\r\n###
  Convert between units\r\n\r\nYou can use `to` or  `fromTo` for conversions:\r\n```
  haskell\r\n>>> t = Hour 8\r\n>>> to @Minute t\r\nMinute 480.0\r\n\r\n>>> fromTo
  @Hour @Minute 8\r\nMinute 480.0\r\n```\r\n\r\nUser-friendly static errors when  trying
  to convert between incompatible dimensions:\r\n\r\n```haskell\r\n>>> fromTo @Minute
  @Meter 1\r\n• Cannot convert unit ‘min’ to unit ‘m’ because their dimensions do
  not match.\r\n      Dimension of ‘min’ is: T\r\n      Dimension of ‘m’ is: L\r\n```\r\n\r\nThere
  are two sorts of unit conversions:\r\n\r\n1. The regular ones\r\n``` haskell\r\n>>>
  fromTo @Celsius @Kelvin 0\r\nKelvin 273.15\r\n```\r\n\r\n2. Conversion that only
  takes the conversion factor into account (and not potential offsets):\r\n``` haskell\r\n>>>
  fromTo' @Celsius @Kelvin 0\r\nKelvin 0.0\r\n```\r\n\r\n### Pretty printing\r\n\r\n```
  haskell\r\n>>> putQuantity (Celsius 25)\r\n25 °C\r\n>>> putQuantity (quantity @(Kilo
  Meter ./. Hour) 130)\r\n130 km⋅hr⁻¹\r\n```\r\n\r\nGet info about some unit:\r\n\r\n```
  haskell\r\n>>> putInfoU @Newton\r\nUnit:       Newton\r\n abbr:      N\r\nDimension:
  \ Mass .*. Length .*. Time.^-2\r\n abbr:      M⋅L⋅T⁻²\r\nNormalized: Kilo Gram .*.
  Meter .*. Second.^-2\r\n abbr:      kg⋅m⋅s⁻²\r\n```\r\n\r\n### Unit arithmetics\r\n\r\nMultiplication
  by a scalar:\r\n\r\n``` haskell\r\n>>> 2 * Meter 4\r\nMeter 8\r\n```\r\n\r\nYou
  can multiply or divide two units:\r\n\r\n``` haskell\r\n>>> putQuantity $ Newton
  1 .*. Meter 2\r\n2 N⋅m\r\n```\r\n\r\n``` haskell\r\n>>> v = Kilo (Meter 10) ./.
  Hour 2\r\n>>> putQuantity v\r\n5.0 km⋅hr⁻¹\r\n>>> putQuantity $ to @(Meter ./. Second)
  v\r\n1.3888888888888888 m⋅s⁻¹\r\n```\r\n\r\nAutomatically simplify units by converting
  the right unit :\r\n``` haskell\r\n>>> putQuantity $ Kilo (Meter 2) .*~  Meter 3\r\n6.0e-3
  km²\r\n```\r\n\r\nor the left unit:\r\n\r\n``` haskell\r\n>>> putQuantity $ Kilo
  (Meter 2) ~*.  Meter 3\r\n6000.0 m²\r\n```\r\n\r\n### Convert to and from SI base
  units\r\n\r\n``` haskell\r\n>>> v = toBaseUnit (quantity @(Kilo Meter ./. Hour)
  36)\r\n>>> putQuantity v\r\n10.0 m⋅s⁻¹\r\n```\r\n\r\n### Make your own units, prefixes
  and dimensions\r\n\r\nMake a new dimension with its associated base unit:\r\n\r\n```
  haskell\r\n$(mkDim \"Angle\" \"A\" 1000)\r\n$(mkBaseUnit \"Radian\" \"rad\" ''Angle)\r\n```\r\n\r\nMake
  a new unit convertible by multiplying with some  factor:\r\n``` haskell\r\n$(mkUnit
  \"Minute\" \"min\" ''Time 60)\r\n```\r\n\r\nMake a new prefix:\r\n\r\n``` haskell\r\n$(mkPrefix
  \"Micro\" \"µ\" 1e-6)\r\n```\r\n\r\nMake a new unit with special conversion:\r\n\r\n```
  haskell\r\n$(mkUnitNoFactor \"Fahrenheit\" \"°F\" ''Temperature)\r\n\r\ninstance
  Fractional a => ConversionFactor Fahrenheit a where\r\n  factor = 5 / 9\r\n  {-#
  INLINE factor #-}\r\n\r\ninstance Fractional a => ConvertibleUnit Fahrenheit a where\r\n
  \ toBaseUnit (Fahrenheit x) = Kelvin ((x + 459.67) * 5 / 9)\r\n  {-# INLINE toBaseUnit
  #-}\r\n\r\n  fromBaseUnit (Kelvin x) = Fahrenheit (x * 9 / 5 - 459.67)\r\n  {-#
  INLINE fromBaseUnit #-}\r\n```\r\n\r\n## Comparison with other Haskell unit libraries\r\n\r\nThere
  are other excellent units libraries out there, the two most used being:\r\n- [dimensional](https://hackage.haskell.org/package/dimensional)\r\n-
  [units](https://hackage.haskell.org/package/units)\r\n\r\nCompared to these two
  libraries, `convert-units` offers\r\n\r\n* Greater flexibility for conversions that
  do not use conversion factors, for instance for logarithmic units (see logarithmic
  pitch units in `Data.Unit.NonStd.Frequency` for instance)\r\n* The possibility to
  add dimensions, such as `Angle`, `Information` (not yet implemented, see this [wikipedia
  article](https://en.wikipedia.org/wiki/Quantities_of_information)), and so on ...\r\n\r\n|
  Feature                              | convert-units | dimensional | units |\r\n|---------------------------------------|:------------:|:-----------:|:-----:|\r\n|
  Static dimension checking             |      ✅     |     ✅      |  ✅   |\r\n| Custom
  unit                           |      ✅     |     ✅      |  ✅   |\r\n| Custom prefixes
  \                      |      ✅     |     ✅      |  ✅   |\r\n| Custom dimensions
  \                    |      ✅     |     ❌      |  ❌   |\r\n| Pretty-printing units
  \                |      ✅     |     ✅      |  ✅   |\r\n| Offset-aware conversions
  (e.g. °C/K)  |      ✅     |     ✅      |  ❌   |\r\n| Any conversion                        |
  \     ✅     |     ❌      |  ❌   |\r\n"
description-type: markdown
hash: 09ea910ab63ea3a3e2882218e20dbd61dd1007e12af522620fd53f6243231b5b
homepage: https://github.com/AliceRixte/convert-units#readme
latest: '0'
license-name: BSD-3-Clause
maintainer: alice.rixte@u-bordeaux.fr
synopsis: Arithmetic and type checked conversions between units.
test-bench-deps:
  QuickCheck: '>=2.14'
  base: '>=4.18 && <5'
  convert-units: '>=0'
  criterion: '>=1.6'
  hspec: '>=2.11'
  linear: '>=0'
  template-haskell: '>=2.21.0'
