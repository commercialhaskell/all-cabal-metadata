homepage: http://github.com/nedervold/context-free-grammar
changelog-type: text
hash: 0a8ce6555352cec740ddfc0775b7466a314366f723c833eef0ff8865e35ef414
test-bench-deps:
  test-framework-hunit: -any
  context-free-grammar: -any
  test-framework: -any
  base: -any
  test-framework-quickcheck2: '>=0.3'
  HUnit: -any
  containers: '>=0.5'
  quickcheck-properties: '>=0.1'
  QuickCheck: '>=2.6'
  pretty: '>=1.1'
  template-haskell: -any
maintainer: Eric Nedervold<nedervoldsoftware@gmail.com>
synopsis: Basic algorithms on context-free grammars
changelog: |
  0.1.1 (2021-05-28):
      - Backport of contributions from Andreas Abel to update for modern
        GHC.  Removed tabs, reformatted with hindent, updated Makefile
        for modern cabal, added github workflow.  Delinted.
  0.1.0 (2015-04-02):
      - Restructured API so default is to keep partial analysis results;
        old way was too error-prone.
  0.0.1 (2015-03-14):
      - Initial version.
basic-deps:
  base: '>=4 && <5'
  dlist: '>=0.7'
  semigroups: -any
  array: '>=0.5'
  containers: '>=0.5'
  control-monad-omega: '>=0.3'
  mtl: '>=2.1'
  pretty: '>=1.1'
  template-haskell: -any
all-versions:
- 0.0.1
- 0.1.0
- 0.1.1
author: Eric Nedervold<nedervoldsoftware@gmail.com>
latest: 0.1.1
description-type: haddock
description: |-
  Basic algorithms on context-free grammars:

  * augmenting a grammar

  * calculating nullability

  * calculating reachability

  * calculating productivity

  * calculating first sets

  * calculating follow sets

  * calculating predict sets

  You may define your context-free grammar textually using 'parse'
  or with the quasiquoter 'bnf' (both in "Data.Cfg.Bnf"), or you may
  use any data structure you like after making it an instance of
  'Cfg' (found in "Data.Cfg.Cfg").

  Testing is very thin in this version; basically just
  sanity-checking.
license-name: BSD-3-Clause
