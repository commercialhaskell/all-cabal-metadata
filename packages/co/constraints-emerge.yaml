all-versions:
- 0.1.2
author: Sandy Maguire
basic-deps:
  base: '>=4.9 && <5'
  constraints: '>=0'
  containers: '>=0'
  ghc: '>=8.0.1'
  hashable: '>=0'
changelog: |
  # Revision history for constraints-emerge

  ## 0.1.2 -- 2018-04-19

  * Significantly better dictionary generation; the plugin will now build
      dictionaries that depend on subdicts.
  * Fixed a bug where dictionaries depending on subdicts would cause segfaults at
      runtime.
  * The plugin will now refuse to discharge 'Emerge c' constraints if 'c' is not
      fully monomorphic.
  * The plugin will now fail to generate equality dicts, even for types that are,
      in fact, equal. This is bad, but much less disastrous than the old behavior
      which would generate dictionaries for non-equal types...

  ## 0.1.1 -- 2018-04-18

  * Updated some misleading error messages.

  ## 0.1 -- 2018-04-18

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |+
  # constraints-emerge: defer instance lookups until runtime

  [![Build Status](https://api.travis-ci.org/isovector/constraints-emerge.svg?branch=master)](https://travis-ci.org/isovector/constraints-emerge) | [Hackage][hackage]

  [hackage]: https://hackage.haskell.org/package/constraints-emerge


  ## Dedication

  > Failure should be our teacher, not our undertaker. Failure is delay, not
  > defeat. It is a temporary detour, not a dead end. Failure is something we can
  > avoid only by saying nothing, doing nothing, and being nothing.
  >
  > Denis Waitley


  ## Synopsis

  ```haskell
  {-# LANGUAGE ConstraintKinds     #-}
  {-# LANGUAGE FlexibleContexts    #-}
  {-# LANGUAGE ScopedTypeVariables #-}
  {-# LANGUAGE TypeApplications    #-}
  {-# OPTIONS_GHC -fplugin=Data.Constraint.Emerge.Plugin #-}

  module Test where

  import Data.Constraint.Emerge

  showAnything :: forall c. Emerge (Show c) => c -> String
  showAnything c =
    case emerge @(Show c) of
      Just Dict -> show c
      Nothing -> "<<unshowable>>"


  showBool = showAnything True  -- "True"
  showId   = showAnything id    -- "<<unshowable>>"
  ```


  ## Known Bugs

  * `constraints-emerge` will generate type-equality dictionaries any types (even
      ones that aren't equal :scream: :scream: :scream:)
  * It fails to provide `Emerge c` dictionaries at runtime.
  * The generated error messages mention mangled type variables; it would be cool
      if they didn't.

  If someone wants to pick it up from here, thatâ€™d be great!


  ## Related Work

   * [union-constraints](https://github.com/rampion/constraint-unions)
   * [Data.Constraint.Deferrable](https://github.com/ekmett/constraints/)


  ## Contact

  Please reports bugs and missing features at the [GitHub bugtracker][issues]. This is
  also where you can find the [source code][source].

  `constraints-emerge` was written by [Sandy Maguire][me] and is licensed under a
  permissive MIT [license][lic].

  [me]: http://reasonablypolymorphic.me
  [lic]: https://github.com/isovector/constraints-emerge/blob/LICENSE
  [issues]: https://github.com/isovector/constraints-emerge/issues
  [source]: https://github.com/isovector/constraints-emerge

description-type: markdown
hash: aec7428f0fdd05dbdf17c7cca745ec5d62be42576c8455b37852f36199e989fe
homepage: https://github.com/isovector/constraints-emerge
latest: 0.1.2
license-name: MIT
maintainer: sandy@sandymaguire.me
synopsis: Defer instance lookups until runtime
test-bench-deps:
  base: '>=4.9 && <5'
  constraints: '>=0'
  constraints-emerge: '>=0'
  hspec: '>=0'
  transformers: '>=0'
