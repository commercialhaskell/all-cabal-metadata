all-versions:
- 0.0.2
- 0.0.4
- 0.1.0
- 0.1.2
- 0.2.0
- 0.2.2
- 0.2.4
- 0.2.6
- 0.2.8
- 0.3.0
- 0.3.2
- 0.3.4
- 0.3.6
- 0.4.0
- 0.4.2
- 0.4.4
- 0.5.0
- 0.5.2
- 0.5.4
- 0.5.6
- 0.5.8
- 0.5.10
- 0.5.12
- 0.5.14
- 0.5.16
- 0.6.0
- 0.6.2
- 0.6.4
- 0.6.6
- 0.6.8
- 0.6.10
- 0.7.0
- 0.7.2
- 0.7.4
author: Rudy Matela
basic-deps:
  base: '>=4 && <5'
  express: '>=1.0.16'
  leancheck: '>=1.0.0'
  speculate: '>=0.4.20'
  template-haskell: '>=0'
changelog: "Changelog for (Code) Conjure\n============================\n\n\nv0.7.4
  (May 2025)\n-----------------\n\n* For now, `unfun` replaces `con`.\n* Use list
  of properties in `conjureFromSpec`.\n\n\nv0.7.2 (May 2025)\n-----------------\n\n*
  Add `unfun` as a potential future replacement for `con`.\n* eta-reduce when applicable
  before displaying result\n\n\nv0.7.0 (May 2025)\n-----------------\n\n* Several
  breaking API changes;\n* `Prim` is now `Ingredient`;\n* `pr` and `prim` are now
  `con` and `fun`;\n* `prif` is now `iif`;\n* `primOrdCaseFor` is now `ordcase`;\n*
  `Prim`, `pr`, `prim`, `prif`, `primOrdCaseFor` are deprecated;\n* `Args` and `args`
  were replaced by ingredient settings:\n  `maxTests`, `target`, `maxSize`, etc;\n*
  display `search exhausted` when a suitable candidate is not found\n  (instead of
  `cannot conjure`);\n* display warning when the specification cannot be reified;\n*
  lightly improve internal testing of `conjure`;\n* try to place recursive calls last
  in commutative operators\n  before showing a resulting function.\n\n\nv0.6.10 (February
  2025)\n-----------------------\n\n* fix bug preventing Conjure to work in the presence
  of argument types\n  whose tiers enumeration would have no values of the first tier\n*
  allow configuring `maxPatternDepth`.  Default 1, interesting 2.\n* slightly increase
  default `maxSearchTests`\n* slight improvements in performance by improve memo tables\n*
  improve internal tests\n* add `eg/tuple`\n\n\nv0.6.8 (February 2025)\n----------------------\n\n*
  add `guard` to provide guard as a primitive\n* fix bug in `maxConstantSize` handling\n\n\nv0.6.6
  (February 2025)\n----------------------\n\n* (pruning) test candidate cases earlier
  and indepentently\n  (can be disabled with `earlyTests=False`);\n* (pruning) rewrite
  after filling in recursions;\n* improve showing of test values;\n* some internal
  refactoring and code cleanup;\n* update documentation of new interfaces\n  with
  runtimes in examples\n  and removal of uneeded uses of maxSize.\n\n\nv0.6.4 (February
  2025)\n----------------------\n\n* Create `Args.target` as the main setting to configure\n
  \ a target number of candidates to explore.\n  This should relate more closely with
  runtime.\n  `target = 10080` is the default.\n* relax `maxSize=12` to `maxSize=24`
  by default.\n* show runtime in the output by default\n* some internal refactoring\n\n\nv0.6.2
  (February 2025)\n----------------------\n\n* don't require 0 as a base case by default\n
  \ (defalt to `requireZero=False`)\n* add switch to limit the size of constant sub-expressions\n
  \ (`Args.maxConstantSize`)\n* add switch to enable showing of allowed patterns\n
  \ (`Args.showPatterns`)\n* update examples\n\n\nv0.6.0 (February 2025)\n----------------------\n\n*
  `Args` record: add `showCandidates`, `showTests` and `showDeconstructions`\n  to
  make it easier to see what Conjure is doing.\n* require `0` as a base case when
  recursing over `Num`s,\n  can be disabled by setting `requireZero=False` on `Args`.\n*
  `conjpure*`: return a record rather than a tuple.\n* improve main documentation
  and introductory examples in Haddock and README.\n* improve Haddock documentation
  a bit throughout\n  (`conjureIsDeconstruction`, `deriveConjurable`, etc).\n* slightly
  improve examples and benchmarks\n* (internal) improve debugging mechanisms of `Defn`
  evaluation functions.\n\n\nv0.5.16 (January 2025)\n----------------------\n\n* slightly
  improve search space pruning\n* slightly cleanup code\n* fix build of tests on GHC
  >= 9.10\n* improve tests and CI scripts\n\n\nv0.5.14 (February 2024)\n-----------------------\n\n*
  improve commutative pruning, slightly faster Conjure\n* add `carryOn`, `rewriting`,
  `requireDescent`, `adHocRedundancy` switches\n  to the `Args` record\n* add more
  benchmarks and tests\n\n\nv0.5.12 (February 2024)\n-----------------------\n\n*
  bump Speculate requirement to v0.4.20\n* improve testing of Conjure itself\n* improvements
  and fixes of Conjure's benchmarks\n\n\nv0.5.10 (February 2024)\n-----------------------\n\n*
  improve pruning of candidate functions;\n* `Conjure`: un-export experimental `equalModuloTesting`\n*
  `Conjure.Conjurable`: add `conjureListFor`, `conjureSizeFor` & `conjureGrounds`;\n*
  Reorganize internal modules\n* Add `Conjure.Defn.Redundancy` module for redundant
  candidates;\n* Add `Conjure.Defn.Test` module testing candidate definitions;\n*
  Add `Conjure.Reason` module for term-rewriting-based reasoning;\n* Add `Conjure.Red`
  module for recursive descent;\n* `Conjure.Expr`: add a few auxiliary functions\n*
  Move functions out of `Conjure.Engine` into new modules\n* add more examples and
  benchmarks;\n* improved testing of Conjure itself;\n* and several other improvements
  and fixes.\n\n\nv0.5.8 (January 2024)\n---------------------\n\n* prune redundant
  mutants using a few new rules\n* rework numeric recursion criteria\n* improve pretty-printing\n*
  improve error handling\n* refactor and lint throughout\n* Conjurable tuples up to
  12-tuples\n* bump Express requirement to v1.0.14 (bugfix)\n\n\nv0.5.6 (November
  2023)\n----------------------\n\n* `Conjure` module: no main API changes\n* `Conjure.Engine`:
  add `equalModuloTesting`\n* `Conjure.Utils`: add some misc functions\n* add `bench/redundants`
  that reports groups of redundant candidates\n\n\nv0.5.4 (November 2023)\n----------------------\n\nThis
  has been the \"dev\" version after v0.5.2\nfor almost a couple of years:\n\n* report
  invalid theories-from-testing\n* weed-out some redundant candidates:\n\t- add and
  use `isRedundantDefn`\n\t- update how deconstructions are handled\n* add (but not
  use) `conjureSize` to `Conjurable`\n\n\nv0.5.2 (March 2022)\n-------------------\n\n*
  show number of tested candidates\n* complete `Conjurable` derivation functions\n*
  reference related work on README\n* add switch to unique-modulo-testing candidates
  (slow)\n  to allow computing the near upper/lower limit on pruning\n\n\nv0.5.0 (September
  2021)\n-----------------------\n\n* allow synthesizing/conjuring from properties
  with `conjureFromSpec`;\n* complete Haddock documentation;\n* remove several unused
  functions;\n* add stub `conjurableDerive` functions;\n* Makefile: add targets to
  run GPS(2) and TerpreT benches.\n\n\nv0.4.4 (September 2021)\n-----------------------\n\n*
  remove need for explicit deconstructions:\n\t- use `-` and `1` instead of `dec`;\n\t-
  allow `mod` and `div` as deconstructions;\n* bump Express requirement to v1.0.6
  (bugfix);\n* complete the GPS1 benchmark;\n* add GPS2 and TerpreT benchmarks;\n*
  minor fixes in the README.\n\n\nv0.4.2 (August 2021)\n--------------------\n\n*
  default to using top-level patterns on generated functions;\n* memoize function
  evaluation;\n* double-check theory at the end and report warning on incorrect properties;\n*
  add `prif` to `Conjure`;\n* simplify deconstructor discovery and add `conjureSize`
  to `Conjurable`;\n* add `cevaluate`, `ceval` and `cvl` to `Conjure.Conjurable`;\n*
  add `bench/gps` and `bench/lowtests`;\n* improve tests and benchmarks.\n\n\nv0.4.0
  (July 2021)\n------------------\n\n* background primitives are now provided with
  `pr` and `prim`.\n* report number of rules used in pruning\n* require Express v1.0.4
  and Speculate v0.4.12\n* allow `..` notation\n* add benchmarks, replicate, subset,
  p12, p30 and candidates\n* add and use the `Defn` type and `conjureDefns`\n* minor
  changes in benchmarks\n* cleanup unused code\n\n\nv0.3.6 (June 2021)\n------------------\n\n*
  add switch for descending recursions\n  to allow generation of `gcd`\n* refactor
  recursion generation (replace a hole later)\n* change `conjpureWith` to take `Args`\n*
  rename two args fields to `maxBodyRecursions` and `maxEvalRecursions`\n  at this
  point, the old names were misnomers.\n\n\nv0.3.4 (June 2021)\n------------------\n\n*
  reallow recursions under `&&` and `||`\n  (simplifies the generated `or`, `and`,
  `set` and `elem` functions)\n* only require deconstructions on a non-empty subset
  of arguments\n  (allows `fib01` to be produced)\n* limit number of terminal evaluations
  in `recursiveToDynamic`\n* fix bug in `recursiveToDynamic` (not counting some recursions)\n*
  add 4 new benchmarks: `count`, `gcd`, `tree` and `setelem`\n\n\nv0.3.2 (June 2021)\n------------------\n\n*
  significant runtime reduction in several benchmarks, e.g.:\n\t- take is now reachable
  in about 5 seconds\n* improved candidate generation:\n\t- faster runtime\n\t- fewer
  redundant/invalid candidates\n* limit recursive calls to use deconstructors\n\t-
  test to find deconstructors automatically\n* improve recursion evaluation method
  (`revaluate` replaces `recursexpr`)\n* add fibonacci benchmark\n* minor:\n\t- record
  runtimes with one decimal place instead of two\n\t- add longshot benchmark\n\t-
  add intercalate to the list benchmark\n\t- add stub `Conjure.Constructors` module\n\n\nv0.3.0
  (May 2021)\n-----------------\n\n* only automatically include an `if` for the return
  type of the given function\n* add the `take-drop` benchmark\n* make bottom-up enumeration
  more type directed\n\n\nv0.2.8 (May 2021)\n-----------------\n\n* export the `A`,
  `B`, `C`, `D`, `E` and `F` helper types\n\n\nv0.2.6 (May 2021)\n-----------------\n\n*
  require Express v0.1.10 due to `hasHole` being now exported there\n* require Eq
  result on `conjure1`, `conjure2` and `conjure3`\n* code cleanup and more tests\n\n\nv0.2.4
  (May 2021)\n-----------------\n\n* allow conjuring from specifications in addition
  to partial definitions\n  (`conjure1`, `conjure2`, `conjure3` and related functions)\n*
  improve examples\n* improve criteria for automatic primitive inclusion:\n\t- only
  include `if :: ... -> Bool` if there are `Bool` primitives\n\t- include `False`
  and `True` automatically only on Speculate's background\n* add code-optional candidate
  nubbing and debug functions\n\n\nv0.2.2 (May 2021)\n-----------------\n\n* by default,
  search for 60 argument combinations\n  among 100000 enumerated combinations\n\n\nv0.2.0
  (May 2021)\n-----------------\n\n* search until 100% match is found and exit\n*
  other misc changes\n\n\nv0.1.2 (April 2021)\n-------------------\n\nFor the changelog
  of earlier versions, check the git commit history.\n"
changelog-type: markdown
description: "Conjure\n=======\n\n[![Conjure's Build Status][build-status]][build-log]\n[![Conjure
  on Hackage][hackage-version]][code-conjure-on-hackage]\n[![Conjure on Stackage LTS][stackage-lts-badge]][code-conjure-on-stackage-lts]\n[![Conjure
  on Stackage Nightly][stackage-nightly-badge]][code-conjure-on-stackage-nightly]\n\n![Conjure
  logo][conjure-logo]\n\nConjure is a tool that synthesizes Haskell functions out
  of partial definitions.\n\n\nInstalling\n----------\n\nTo install the [latest Conjure
  version from Hackage], just run:\n\n\t$ cabal update\n\t$ cabal install code-conjure\n\nPrerequisites
  are [express], [leancheck] and [speculate].\nThey should be automatically resolved
  and installed by [Cabal].\n\nNOTE: the name of the Hackage package is __[`code-conjure`]__\n--
  not to be confused with [Conjure the BitTorrent client].\n\nStarting from Cabal
  v3.0, you need to pass `--lib` as an argument to\n`cabal install` to install packages
  globally on the `default` user environment:\n\n\t$ cabal install code-conjure --lib\n\nIf
  you already have Conjure installed\n[Cabal may refuse to update](https://github.com/haskell/cabal/issues/7373)\nto
  the latest version.\nTo update, you need to reset your user's cabal installation
  with:\n\n\trm -rf ~/.cabal/{bin,lib,logs,share,store} ~/.ghc/*/\n\nWARNING: the
  above command will erase all user-local packages.\n\n\nSynthesizing functions\n----------------------\n\nTo
  use Conjure, import the library with:\n\n\timport Conjure\n\nThen, declare a partial
  definition of a function to be synthesized.\nFor example,\nhere is a partial implementation
  of a function that computes the factorial of a number:\n\n\tfactorial :: Int ->
  Int\n\tfactorial 1  =  1\n\tfactorial 2  =  2\n\tfactorial 3  =  6\n\tfactorial
  4  =  24\n\nNext, declare a list of ingredients that seem like interesting pieces\nin
  the final fully-defined implementation.\nFor example,\nhere is a list of ingredients
  including\naddition, multiplication, subtraction and their neutral elements:\n\n\tingredients
  :: [Ingredient]\n\tingredients  =  [ unfun (0::Int)\n\t                , unfun (1::Int)\n\t
  \               , fun \"+\" ((+) :: Int -> Int -> Int)\n\t                , fun
  \"*\" ((*) :: Int -> Int -> Int)\n\t                , fun \"-\" ((-) :: Int -> Int
  -> Int)\n\t                ]\n\nFinally, call the [`conjure`] function,\npassing
  the function name, the partial definition and the list of ingredients:\n\n\tfactorial
  :: Int -> Int\n\t-- 0.1s, testing 4 combinations of argument values\n\t-- 0.8s,
  pruning with 27/65 rules\n\t-- 0.8s, 3 candidates of size 1\n\t-- 0.9s, 3 candidates
  of size 2\n\t-- 0.9s, 7 candidates of size 3\n\t-- 0.9s, 8 candidates of size 4\n\t--
  0.9s, 28 candidates of size 5\n\t-- 0.9s, 35 candidates of size 6\n\t-- 0.9s, 167
  candidates of size 7\n\t-- 0.9s, tested 95 candidates\n\tfactorial 0  =  1\n\tfactorial
  x  =  x * factorial (x - 1)\n\nConjure is able to synthesize the above implementation
  in less than a second\nin a regular laptop computer.\n\nIt is also possible to generate
  a folding implementation\nlike the following:\n\n\tfactorial x  =  foldr (*) 1 [1..x]\n\nby
  including [`enumFromTo`] and [`foldr`] in the background.\n\nFor more information,
  see the `eg/factorial.hs` example and\nthe Haddock documentation for the [`conjure`]
  function.\n\n\nSynthesizing functions over algebraic data types\n------------------------------------------------\n\nConjure
  is not limited to integers,\nit works for functions over algebraic data types too.\nConsider
  the following partial definition of `take`:\n\n\ttake' :: Int -> [a] -> [a]\n\ttake'
  0 [x]    =  []\n\ttake' 1 [x]    =  [x]\n\ttake' 0 [x,y]  =  []\n\ttake' 1 [x,y]
  \ =  [x]\n\ttake' 2 [x,y]  =  [x,y]\n\ttake' 3 [x,y]  =  [x,y]\n\nConjure is able
  to find an appropriate implementation\ngiven list constructors, zero, one and subtraction:\n\n\t>
  conjure \"take\" (take' :: Int -> [A] -> [A])\n\t>   [ unfun (0 :: Int)\n\t>   ,
  unfun (1 :: Int)\n\t>   , unfun ([] :: [A])\n\t>   , fun \":\" ((:) :: A -> [A]
  -> [A])\n\t>   , fun \"-\" ((-) :: Int -> Int -> Int)\n\t>   ]\n\ttake :: Int ->
  [A] -> [A]\n\t-- 0.2s, testing 153 combinations of argument values\n\t-- 0.2s, pruning
  with 4/7 rules\n\t-- ...   ...   ...   ...   ...\n\t-- 0.4s, 5 candidates of size
  9\n\t-- 0.4s, tested 15 candidates\n\ttake 0 xs  =  []\n\ttake x []  =  []\n\ttake
  x (y:xs)  =  y:take (x - 1) xs\n\nThe above example also takes less than a second
  to run in a modern laptop.\nThe selection of functions in the list of ingredients
  was minimized\nto what was absolutely needed here.\nWith a larger collection as
  ingredients YMMV.\n\n\nSynthesizing from specifications (for advanced users)\n-----------------------------------------------------\n\nConjure
  also supports synthesizing from a functional specification\nwith [`conjureFromSpec`].\n\nConsider
  a function `duplicates` that given a list of values\nshould return all values that
  are repeated.\nThe resulting list should itself not contain repetitions.\n\nEven
  an experienced programmer\nmay take a few minutes to come up with a correct definition
  for `duplicates`\neven when told that a conditional definition\nis possible using
  only\n`[]`,\n`:`,\n`not`,\n`&&` and\n`elem`.\n(We invite the reader to try.)\n\nWe
  can encode a specification of duplicates with test properties like so:\n\n\tduplicatesSpec
  :: ([Int] -> [Int]) -> [Property]\n\tduplicatesSpec duplicates  =  and\n\t  [ property
  $ \\x xs -> (count (x ==) xs > 1) == elem x (duplicates xs)\n\t  , property $ \\x
  xs -> count (x ==) (duplicates xs) <= 1\n\t  ]  where  count p  =  length . filter
  p\n\nConjure finds a solution in 1 second\nwith the following call:\n\n\tconjureFromSpec
  \"duplicates\" duplicatesSpec\n\t  [ unfun ([] :: [Int])\n\t  , fun \"not\" not\n\t
  \ , fun \"&&\" (&&)\n\t  , fun \":\" ((:) :: Int -> [Int] -> [Int])\n\t  , fun \"elem\"
  (elem :: Int -> [Int] -> Bool)\n\t  , guard  -- allows guards\n\t  ]\n\nThis is
  the definition produced by Conjure:\n\n\tduplicates []  =  []\n\t-- 0.2s, pruning
  with 21/26 rules\n\t-- 0.2s, 2 candidates of size 1\n\t-- 0.3s, 1 candidates of
  size 2\n\t-- 0.3s, 0 candidates of size 3\n\t-- 0.3s, 2 candidates of size 4\n\t--
  0.3s, 1 candidates of size 5\n\t-- 0.3s, 2 candidates of size 6\n\t-- 0.3s, 3 candidates
  of size 7\n\t-- 0.3s, 8 candidates of size 8\n\t-- 0.3s, 13 candidates of size 9\n\t--
  0.3s, 18 candidates of size 10\n\t-- 0.3s, 21 candidates of size 11\n\t-- 0.3s,
  28 candidates of size 12\n\t-- 0.3s, 39 candidates of size 13\n\t-- 0.4s, 54 candidates
  of size 14\n\t-- 0.5s, 67 candidates of size 15\n\t-- 0.7s, 80 candidates of size
  16\n\t-- 1.0s, 99 candidates of size 17\n\t-- 1.0s, tested 340 candidates\n\tduplicates
  (x:xs)\n\t  | elem x xs && not (elem x (duplicates xs))  =  x:duplicates xs\n\t
  \ | otherwise  =  duplicates xs\n\n\nRelated work\n------------\n\n__Conjure's dependencies__.\nInternally,
  Conjure uses [LeanCheck], [Speculate] and [Express].\n[LeanCheck] does testing similarly
  to [QuickCheck], [SmallCheck] or [Feat].\n[Speculate] discovers equations similarly
  to [QuickSpec].\n[Express] encodes expressions involving [Dynamic] types.\n\n[Speculate]:
  \ https://github.com/rudymatela/speculate\n[Express]:    https://github.com/rudymatela/express\n[QuickCheck]:
  https://hackage.haskell.org/package/QuickCheck\n[smallcheck]: https://hackage.haskell.org/package/smallcheck\n[Feat]:
  \      https://hackage.haskell.org/package/testing-feat\n[QuickSpec]:  https://hackage.haskell.org/package/quickspec\n[Dynamic]:
  \   https://hackage.haskell.org/package/base/docs/Data-Dynamic.html\n\n\n__Program
  synthesis within Haskell.__\n\n[MagicHaskeller]: https://hackage.haskell.org/package/MagicHaskeller\n[Igor
  II]: https://cogsys.uni-bamberg.de/projects/effalip\n\n[MagicHaskeller] (2007) is
  another tool\nthat is able to generate Haskell code automatically.\nIt supports
  recursion through\ncatamorphisms, paramorphisms and the [`fix`] function.\n[Igor
  II] (2010) is able to synthesize Haskell\nprograms as well.\n\n[Hoogle]: https://hoogle.haskell.org/\n[Hoogle+]:
  https://hoogleplus.goto.ucsd.edu/\n\n[Hoogle] (2004) is a search engine for Haskell
  functions.\nIt is not able to synthesize expressions\nbut it can find functions
  that match a type.\n[Hoogle+] (2020) is similar to Hoogle\nbut is able to search
  for small expressions.\nIn addition to the type, Hoogle+ allows\nusers to provide
  tests that the function should pass.\n\n\n__Program synthesis beyond Haskell.__\n\n[PushGP]:
  https://github.com/lspector/Clojush\n[G3P]: https://github.com/t-h-e/HeuristicLab.CFGGP\n\n[PushGP]
  (2002) and [G3P] (2017) are genetic programming systems\nthat are able to synthesize
  programs in Push and Python respectively.\nDifferently from Conjure or MagicHaskeller,\nthey
  require around a hundred tests for traning\ninstead of just about half a dozen.\n\n[Barliman]:
  \      https://github.com/webyrd/Barliman\n\n[Barliman] (2016) for Lisp is another
  tool that does program synthesis.\n\n\nFurther reading\n---------------\n\nFor a
  detailed documentation of each function, see\n[Conjure's Haddock documentation].\n\nThe
  `eg` folder in the source distribution\ncontains more than 60 examples of use.\n\n\nConjure,
  Copyright 2021-2025  Rudy Matela,\ndistribued under the 3-clause BSD license.\n\n\n[Conjure's
  Haddock documentation]: https://hackage.haskell.org/package/code-conjure/docs/Conjure.html\n[`conjure`]:
  \            https://hackage.haskell.org/package/code-conjure/docs/Conjure.html#v:conjure\n[`conjureFromSpec`]:
  \    https://hackage.haskell.org/package/code-conjure/docs/Conjure.html#v:conjureFromSpec\n\n[`foldr`]:
  \              https://hackage.haskell.org/package/base/docs/Prelude.html#v:foldr\n[`enumFromTo`]:
  \         https://hackage.haskell.org/package/base/docs/Prelude.html#v:enumFromTo\n[`fix`]:
  \                https://hackage.haskell.org/package/base/docs/Data-Function.html#v:fix\n[`holds`]:
  \              https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:holds\n\n[symbol
  `>`]: https://www.haskell.org/haddock/doc/html/ch03s08.html#idm140354810780208\n[Template
  Haskell]: https://wiki.haskell.org/Template_Haskell\n\n[conjure-logo]: https://github.com/rudymatela/conjure/raw/master/doc/conjure.svg?sanitize=true\n\n[`code-conjure`]:
  \                  https://hackage.haskell.org/package/code-conjure\n[Conjure the
  BitTorrent client]:    https://hackage.haskell.org/package/conjure\n\n[Cabal]:   https://www.haskell.org/cabal\n[Haskell]:
  https://www.haskell.org/\n[leancheck]:      https://hackage.haskell.org/package/leancheck\n[LeanCheck]:
  \     https://hackage.haskell.org/package/leancheck\n[express]:        https://hackage.haskell.org/package/express\n[speculate]:
  \     https://hackage.haskell.org/package/speculate\n\n[avoid using `cabal install`]:
  \        https://github.com/haskell/cabal/issues/7373\n[latest Conjure version from
  Hackage]: https://hackage.haskell.org/package/code-conjure\n\n[build-log]:    https://github.com/rudymatela/conjure/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/conjure/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  \                 https://img.shields.io/hackage/v/code-conjure.svg\n[code-conjure-on-hackage]:
  \         https://hackage.haskell.org/package/code-conjure\n[stackage-lts-badge]:
  \              https://stackage.org/package/code-conjure/badge/lts\n[stackage-nightly-badge]:
  \          https://stackage.org/package/code-conjure/badge/nightly\n[code-conjure-on-stackage]:
  \        https://stackage.org/package/code-conjure\n[code-conjure-on-stackage-lts]:
  \    https://stackage.org/lts/package/code-conjure\n[code-conjure-on-stackage-nightly]:
  https://stackage.org/nightly/package/code-conjure\n"
description-type: markdown
hash: edf43728e7a7418f4c546e1e122f80f285c5370dc53f58f727d9088cd83c2913
homepage: https://github.com/rudymatela/conjure#readme
latest: 0.7.4
license-name: BSD-3-Clause
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: synthesize Haskell functions out of partial definitions
test-bench-deps:
  base: '>=4 && <5'
  code-conjure: '>=0'
  express: '>=0'
  leancheck: '>=0'
  speculate: '>=0'
