homepage: https://github.com/rudymatela/conjure#readme
changelog-type: markdown
hash: 36c4779b45fae0ac259a01ee3b76a0a63ce091e4d314c90bd5a41263fa81591d
test-bench-deps:
  base: ==4.*
  leancheck: -any
  speculate: -any
  code-conjure: -any
  express: -any
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: synthesize Haskell functions out of partial definitions
changelog: "Changelog for (Code) Conjure\n============================\n\n\nv0.5.0\n------\n\n*
  allow synthesizing/conjuring from properties with `conjureFromSpec`;\n* complete
  Haddock documentation;\n* remove several unused functions;\n* add stub `conjurableDerive`
  functions;\n* Makefile: add targets to run GPS(2) and TerpreT benches.\n\n\nv0.4.4\n------\n\n*
  remove need for explicit deconstructions:\n\t- use `-` and `1` instead of `dec`;\n\t-
  allow `mod` and `div` as deconstructions;\n* bump Express requirement to v1.0.6
  (bugfix);\n* complete the GPS1 benchmark;\n* add GPS2 and TerpreT benchmarks;\n*
  minor fixes in the README.\n\n\nv0.4.2\n------\n\n* default to using top-level patterns
  on generated functions;\n* memoize function evaluation;\n* double-check theory at
  the end and report warning on incorrect properties;\n* add `prif` to `Conjure`;\n*
  simplify deconstructor discovery and add `conjureSize` to `Conjurable`;\n* add `cevaluate`,
  `ceval` and `cvl` to `Conjure.Conjurable`;\n* add `bench/gps` and `bench/lowtests`;\n*
  improve tests and benchmarks.\n\n\nv0.4.0\n------\n\n* background primitives are
  now provided with `pr` and `prim`.\n* report number of rules used in pruning\n*
  require Express v1.0.4 and Speculate v0.4.12\n* allow `..` notation\n* add benchmarks,
  replicate, subset, p12, p30 and candidates\n* add and use the `Defn` type and `conjureDefns`\n*
  minor changes in benchmarks\n* cleanup unused code\n\n\nv0.3.6\n------\n\n* add
  switch for descending recursions\n  to allow generation of `gcd`\n* refactor recursion
  generation (replace a hole later)\n* change `conjpureWith` to take `Args`\n* rename
  two args fields to `maxBodyRecursions` and `maxEvalRecursions`\n  at this point,
  the old names were misnomers.\n\n\nv0.3.4\n------\n\n* reallow recursions under
  `&&` and `||`\n  (simplifies the generated `or`, `and`, `set` and `elem` functions)\n*
  only require deconstructions on a non-empty subset of arguments\n  (allows `fib01`
  to be produced)\n* limit number of terminal evaluations in `recursiveToDynamic`\n*
  fix bug in `recursiveToDynamic` (not counting some recursions)\n* add 4 new benchmarks:
  `count`, `gcd`, `tree` and `setelem`\n\n\nv0.3.2\n------\n\n* significant runtime
  reduction in several benchmarks, e.g.:\n\t- take is now reachable in about 5 seconds\n*
  improved candidate generation:\n\t- faster runtime\n\t- fewer redundant/invalid
  candidates\n* limit recursive calls to use deconstructors\n\t- test to find deconstructors
  automatically\n* improve recursion evaluation method (`revaluate` replaces `recursexpr`)\n*
  add fibonacci benchmark\n* minor:\n\t- record runtimes with one decimal place instead
  of two\n\t- add longshot benchmark\n\t- add intercalate to the list benchmark\n\t-
  add stub `Conjure.Constructors` module\n\n\nv0.3.0\n------\n\n* only automatically
  include an `if` for the return type of the given function\n* add the `take-drop`
  benchmark\n* make bottom-up enumeration more type directed\n\n\nv0.2.8\n------\n\n*
  export the `A`, `B`, `C`, `D`, `E` and `F` helper types\n\n\nv0.2.6\n------\n\n*
  require Express v0.1.10 due to `hasHole` being now exported there\n* require Eq
  result on `conjure1`, `conjure2` and `conjure3`\n* code cleanup and more tests\n\n\nv0.2.4\n------\n\n*
  allow conjuring from specifications in addition to partial definitions\n  (`conjure1`,
  `conjure2`, `conjure3` and related functions)\n* improve examples\n* improve criteria
  for automatic primitive inclusion:\n\t- only include `if :: ... -> Bool` if there
  are `Bool` primitives\n\t- include `False` and `True` automatically only on Speculate's
  background\n* add code-optional candidate nubbing and debug functions\n\n\nv0.2.2\n------\n\n*
  by default, search for 60 argument combinations\n  among 100000 enumerated combinations\n\n\nv0.2.0\n------\n\n*
  search until 100% match is found and exit\n* other misc changes\n\n\nv0.1.2\n------\n\nFor
  the changelog of earlier versions, check the git commit history.\n"
basic-deps:
  base: '>=4 && <5'
  leancheck: '>=0.9.10'
  speculate: '>=0.4.14'
  express: '>=1.0.8'
  template-haskell: -any
all-versions:
- 0.0.2
- 0.0.4
- 0.1.0
- 0.1.2
- 0.2.0
- 0.2.2
- 0.2.4
- 0.2.6
- 0.2.8
- 0.3.0
- 0.3.2
- 0.3.4
- 0.3.6
- 0.4.0
- 0.4.2
- 0.4.4
- 0.5.0
author: Rudy Matela
latest: 0.5.0
description-type: markdown
description: "Conjure\n=======\n\n[![Conjure's Build Status][build-status]][build-log]\n[![Conjure
  on Hackage][hackage-version]][code-conjure-on-hackage]\n[![Conjure on Stackage LTS][stackage-lts-badge]][code-conjure-on-stackage-lts]\n[![Conjure
  on Stackage Nightly][stackage-nightly-badge]][code-conjure-on-stackage-nightly]\n\n![Conjure
  logo][conjure-logo]\n\nConjure is a tool that synthesizes Haskell functions out
  of partial definitions.\n\n\nInstalling\n----------\n\nTo install the [latest Conjure
  version from Hackage], just run:\n\n\t$ cabal update\n\t$ cabal v1-install code-conjure\n\nIf
  you are using Cabal v3.0 or later,\n[avoid using `cabal install`] for the time being\nand
  use `v1-install` instead.\n\nPrerequisites are [express], [leancheck] and [speculate].\nThey
  should be automatically resolved and installed by [Cabal].\n\nNOTE: the name of
  the Hackage package is __[`code-conjure`]__\n-- not to be confused with [Conjure
  the BitTorrent client].\n\n\nSynthesizing functions\n----------------------\n\nTo
  use Conjure, import the library with:\n\n\timport Conjure\n\nThen, declare a partial
  definition of a function to be synthesized.\nFor example,\nhere is a partial implementation
  of a function that squares a number:\n\n\tsquare :: Int -> Int\n\tsquare 0  =  0\n\tsquare
  1  =  1\n\tsquare 2  =  4\n\nNext, declare a list of primitives that seem like interesting
  pieces\nin the final fully-defined implementation.\nFor example,\nhere is a list
  of primitives including\naddition, multiplication and their neutral elements:\n\n\tprimitives
  :: [Prim]\n\tprimitives  =  [ pr (0::Int)\n\t               , pr (1::Int)\n\t               ,
  prim \"+\" ((+) :: Int -> Int -> Int)\n\t               , prim \"*\" ((*) :: Int
  -> Int -> Int)\n\t               ]\n\nFinally, call the [`conjure`] function,\npassing
  the function name, the partial definition and the list of primitives:\n\n\t> conjure
  \"square\" square primitives\n\tsquare :: Int -> Int\n\t-- testing 3 combinations
  of argument values\n\t-- pruning with 14/25 rules\n\t-- looking through 3 candidates
  of size 1\n\t-- looking through 4 candidates of size 2\n\t-- looking through 9 candidates
  of size 3\n\tsquare x  =  x * x\n\nConjure is able to synthesize the above implementation
  in less than a second.\n\nFor more information, see the `eg/arith.hs` example and\nthe
  Haddock documentation for the [`conjure`] and [`conjureWith`] functions.\n\n\nSynthesizing
  recursive functions\n--------------------------------\n\nConjure supports synthetization
  of recursive functions.\n\nTake for example the following partial implementation
  of a function\nthat computes the factorial of a number:\n\n\tfactorial :: Int ->
  Int\n\tfactorial 1  =  1\n\tfactorial 2  =  2\n\tfactorial 3  =  6\n\tfactorial
  4  =  24\n\nHere is a list of primitives:\n\n\tprimitives :: [Prim]\n\tprimitives
  \ =  [ pr (0::Int)\n\t               , pr (1::Int)\n\t               , prim \"+\"
  ((+) :: Int -> Int -> Int)\n\t               , prim \"*\" ((*) :: Int -> Int ->
  Int)\n\t               , prim \"-\" ((-) :: Int -> Int -> Int)\n\t               ]\n\nAnd
  here is what Conjure produces\nwith the above partial definition and list of primitives:\n\n\t>
  conjure \"factorial\" factorial primitives\n\tfactorial :: Int -> Int\n\t-- testing
  4 combinations of argument values\n\t-- pruning with 27/65 rules\n\t-- looking through
  3 candidates of size 1\n\t-- looking through 4 candidates of size 2\n\t-- looking
  through 13 candidates of size 3\n\t-- looking through 34 candidates of size 4\n\t--
  looking through 75 candidates of size 5\n\t-- looking through 183 candidates of
  size 6\n\t-- looking through 577 candidates of size 7\n\tfactorial 0  =  1\n\tfactorial
  x  =  x * factorial (x - 1)\n\nThe above synthetization takes less than a second.\n\nIt
  is also possible to generate a folding implementation\nlike the following:\n\n\tfactorial
  x  =  foldr (*) 1 [1..x]\n\nby including [`enumFromTo`] and [`foldr`] in the background.\n\nFor
  more information, see the `eg/factorial.hs` example and\nthe Haddock documentation
  for the [`conjure`] and [`conjureWith`] functions.\n\n\nSynthesizing from specifications
  (for advanced users)\n-----------------------------------------------------\n\nConjure
  also supports synthesizing from a functional specification\nwith the functions [`conjureFromSpec`]
  and [`conjureFromSpecWith`]\nas, in some cases,\na partial definition may not be
  appropriate\nfor one of two reasons:\n\n1. Conjure may fail to \"hit\" the appropriate
  data points;\n2. specifying argument-result bindings may not be easy.\n\nTake for
  example a function `duplicates :: Eq a => [a] -> [a]`\nthat should return the duplicate
  elements in a list without repetitions.\n\nLet's start with the primitives:\n\n\tprimitives
  :: [Prim]\n\tprimitives  =  [ pr ([] :: [Int])\n\t               , prim \"not\"
  not\n\t               , prim \"&&\" (&&)\n\t               , prim \":\" ((:) ::
  Int -> [Int] -> [Int])\n\t               , prim \"elem\" (elem :: Int -> [Int] ->
  Bool)\n\t               , prif (undefined :: [Int])\n\t               ]\n\nNow here's
  a first attempt at a partial definition:\n\n\tduplicates' :: [Int] -> [Int]\n\tduplicates'
  []  =  []\n\tduplicates' [1,2,3,4,5]  =  []\n\tduplicates' [1,2,2,3,4]  =  [2]\n\tduplicates'
  [1,2,3,3,3]  =  [3]\n\tduplicates' [1,2,2,3,3]  =  [2,3]\n\nHere is what [`conjureWith`]
  prints:\n\n\t> conjureWith args{maxSize=18} \"duplicates\" duplicates primitives\n\tduplicates
  :: [Int] -> [Int]\n\t-- testing 1 combinations of argument values\n\t-- pruning
  with 21/26 rules\n\t-- looking through 2 candidates of size 1\n\tduplicates xs  =
  \ xs\n\nThe generated function clearly does not follow our specification.\nBut if
  we look at the reported number of tests,\nwe see that only _one_ of the argument-result
  bindings\nof our partial definition was used.\nConjure failed to hit any of the
  argument values with five elements.\n(Since Conjure uses enumeration to test functions
  these values have to be kept \"small\").\n\nHere is a second attempt:\n\n\tduplicates
  :: [Int] -> [Int]\n\tduplicates [0,0]  =  [0]\n\tduplicates [0,1]  =  []\n\tduplicates
  [1,0,1]  =  [1]\n\nHere is what [`conjureWith`] now prints:\n\n\t> conjureWith args{maxSize=18}
  \"duplicates\" duplicates primitives\n\tduplicates :: [Int] -> [Int]\n\t-- testing
  3 combinations of argument values\n\t-- pruning with 21/26 rules\n\t-- ...\n\t--
  looking through 16 candidates of size 9\n\tduplicates []  =  []\n\tduplicates (x:xs)
  \ =  if elem x xs then [x] else []\n\nThe `duplicates` function that Conjure generated
  is still not correct.\nNevertheless, it does follow our partial definition.  We
  have to refine it.\nHere is a third attempt with more argument-result bindings:\n\n\tduplicates
  :: [Int] -> [Int]\n\tduplicates [0,0]  =  [0]\n\tduplicates [0,1]  =  []\n\tduplicates
  [1,0,1]  =  [1]\n\tduplicates [0,1,0,1]  =  [0,1]\n\nHere is what Conjure prints:\n\n\tduplicates
  []  =  []\n\tduplicates (x:xs)  =  if elem x xs then x:duplicates xs else []\n\nThis
  implementation follows our partial definition, but may return duplicate duplicates,\nsee:\n\n\tduplicates
  [1,0,1,0,1]  =  [1,0,1]\n\nHere is a fourth and final refinement:\n\n\tduplicates
  :: [Int] -> [Int]\n\tduplicates [0,0]  =  [0]\n\tduplicates [0,1]  =  []\n\tduplicates
  [1,0,1]  =  [1]\n\tduplicates [0,1,0,1]  =  [0,1]\n\tduplicates [1,0,1,0,1]  =  [0,1]\n\tduplicates
  [0,1,2,1]  =  [1]\n\nNow Conjure prints a correct implementation:\n\n\t> conjureWith
  args{maxSize=18} \"duplicates\" duplicates primitives\n\tduplicates :: [Int] ->
  [Int]\n\t-- testing 6 combinations of argument values\n\t-- ...\n\t-- looking through
  2189 candidates of size 17\n\tduplicates []  =  []\n\tduplicates (x:xs)  =  if elem
  x xs && not (elem x (duplicates xs)) then x:duplicates xs else duplicates xs\n\t(in
  1.5s)\n\nIn this case,\nspecifying the function with specific argument-result bindings\nis
  perhaps not the best approach.\nIt took us four refinements of the partial definition
  to get a result.\nSpecifying test properties perhaps better describes what we want.\nAgain,
  we would like `duplicates` to return all duplicate elements\nwithout repetitions.\nThis
  can be encoded in a function using [`holds`] from [LeanCheck]:\n\n\timport Test.LeanCheck
  (holds)\n\n\tduplicatesSpec :: ([Int] -> [Int]) -> Bool\n\tduplicatesSpec duplicates
  \ =  and\n\t  [ holds 360 $ \\x xs -> (count (x ==) xs > 1) == elem x (duplicates
  xs)\n\t  , holds 360 $ \\x xs -> count (x ==) (duplicates xs) <= 1\n\t  ]  where
  \ count p  =  length . filter p\n\nThis function takes as argument a candidate implementation
  of `duplicates`\nand returns whether it is valid.\nThe first property states that
  all duplicates must be listed.\nThe second property states that duplicates themselves
  must not repeat.\n\nNow, we can use the function [`conjureFromSpecWith`] to generate
  the same duplicates function\npassing our `duplicatesSpec` as argument:\n\n\t> conjureFromSpecWith
  args{maxSize=18} \"duplicates\" duplicatesSpec primitives\n\tduplicates :: [Int]
  -> [Int]\n\tduplicates []  =  []\n\tduplicates (x:xs)  =  if elem x xs && not (elem
  x (duplicates xs)) then x:duplicates xs else duplicates xs\n\t(in 1.5s)\n\nFor more
  information see the `eg/dupos.hs` example and\nthe Haddock documentation for the
  [`conjureFromSpec`] and [`conjureFromSpecWith`] functions.\n\nThe functions [`conjureFromSpec`]
  and [`conjureFromSpecWith`] also accept specifications\nthat bind specific arguments
  to results.\nJust use `==` and `&&` accordingly:\n\n\tduplicatesSpec :: ([Int] ->
  [Int]) -> Bool\n\tduplicatesSpec duplicates  =  duplicates [0,0] == [0]\n\t                           &&
  duplicates [0,1]  ==  []\n\t                           && duplicates [1,0,1]  ==
  \ [1]\n\t                           && duplicates [0,1,0,1]  ==  [0,1]\n\t                           &&
  duplicates [1,0,1,0,1]  ==  [0,1]\n\t                           && duplicates [0,1,2,1]
  \ ==  [1]\n\nWith this, there is no way for Conjure to miss argument-result bindings.\n\n\nRelated
  work\n------------\n\n[MagicHaskeller] (2007) is another tool\nthat is able to generate
  Haskell code automatically.\nIt supports recursion through\ncatamorphisms, paramorphisms
  and the [`fix`] function.\n\n[Barliman] for Lisp is another tool that does program
  synthesis.\n\nThere are hundreds of others,\nI'll add the most closely related here
  when I have the time.\n\n\nFurther reading\n---------------\n\nFor a detailed documentation
  of each function, see\n[Conjure's Haddock documentation].\n\nThe `eg` folder in
  the source distribution\ncontains more than 60 examples of use.\n\n\nConjure, Copyright
  2021  Rudy Matela,\ndistribued under the 3-clause BSD license.\n\n\n[Conjure's Haddock
  documentation]: https://hackage.haskell.org/package/code-conjure/docs/Conjure.html\n[`conjure`]:
  \            https://hackage.haskell.org/package/code-conjure/docs/Conjure.html#v:conjure\n[`conjureWith`]:
  \        https://hackage.haskell.org/package/code-conjure/docs/Conjure.html#v:conjureWith\n[`conjureFromSpec`]:
  \    https://hackage.haskell.org/package/code-conjure/docs/Conjure.html#v:conjureFromSpec\n[`conjureFromSpecWith`]:
  https://hackage.haskell.org/package/code-conjure/docs/Conjure.html#v:conjureFromSpecWith\n\n[`foldr`]:
  \              https://hackage.haskell.org/package/base/docs/Prelude.html#v:foldr\n[`enumFromTo`]:
  \         https://hackage.haskell.org/package/base/docs/Prelude.html#v:enumFromTo\n[`fix`]:
  \                https://hackage.haskell.org/package/base/docs/Data-Function.html#v:fix\n[`holds`]:
  \              https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:holds\n\n[symbol
  `>`]: https://www.haskell.org/haddock/doc/html/ch03s08.html#idm140354810780208\n[Template
  Haskell]: https://wiki.haskell.org/Template_Haskell\n\n[conjure-logo]: https://github.com/rudymatela/conjure/raw/master/doc/conjure.svg?sanitize=true\n\n[`code-conjure`]:
  \                  https://hackage.haskell.org/package/code-conjure\n[Conjure the
  BitTorrent client]:    https://hackage.haskell.org/package/conjure\n\n[Cabal]:   https://www.haskell.org/cabal\n[Haskell]:
  https://www.haskell.org/\n[leancheck]:      https://hackage.haskell.org/package/leancheck\n[LeanCheck]:
  \     https://hackage.haskell.org/package/leancheck\n[express]:        https://hackage.haskell.org/package/express\n[speculate]:
  \     https://hackage.haskell.org/package/speculate\n[MagicHaskeller]: https://hackage.haskell.org/package/MagicHaskeller\n[Barliman]:
  \      https://github.com/webyrd/Barliman\n\n[avoid using `cabal install`]:         https://github.com/haskell/cabal/issues/7373\n[latest
  Conjure version from Hackage]: https://hackage.haskell.org/package/code-conjure\n\n[build-log]:
  \   https://github.com/rudymatela/conjure/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/conjure/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  \                 https://img.shields.io/hackage/v/code-conjure.svg\n[code-conjure-on-hackage]:
  \         https://hackage.haskell.org/package/code-conjure\n[stackage-lts-badge]:
  \              https://stackage.org/package/code-conjure/badge/lts\n[stackage-nightly-badge]:
  \          https://stackage.org/package/code-conjure/badge/nightly\n[code-conjure-on-stackage]:
  \        https://stackage.org/package/code-conjure\n[code-conjure-on-stackage-lts]:
  \    https://stackage.org/lts/package/code-conjure\n[code-conjure-on-stackage-nightly]:
  https://stackage.org/nightly/package/code-conjure\n"
license-name: BSD-3-Clause
