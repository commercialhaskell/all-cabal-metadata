homepage: https://github.com/expipiplus1/exact-real#readme
changelog-type: markdown
hash: 258e91c9f0725496b13dff8d8984b3ddf9a6040892e2687779aae8d3cf90e7c8
test-bench-deps:
  groups: '>=0.3'
  tasty-th: '>=0.1'
  checkers: '>=0.5.6'
  base: '>=4'
  criterion: '>=1.1'
  doctest: -any
  exact-real: -any
  tasty-quickcheck: '>=0.8'
  tasty-hunit: '>=0.9'
  random: '>=1.0'
  tasty: '>=0.10'
  QuickCheck: '>=2.9'
maintainer: Ellie Hermaszewska <keep.it.real@monoid.al>
synopsis: Exact real arithmetic
changelog: |
  # Change Log

  ## WIP

  ## [0.12.5.1] - 2021-12-13
  - Correct author name
  - Squash warnings for newer GHCs

  ## [0.12.5] - 2021-05-29
  - Tweak test suite to fix #35

  ## [0.12.4.1] - 2020-11-01
    - Use newer version of `checkers`

  ## [0.12.4] - 2020-06-07
    - Big speedup (orbits testsuite about 9 times faster)

  Big thanks for @Zemyla for the new memoization scheme

  ## [0.12.3] - 2020-05-29
    - More relaxed version bounds
basic-deps:
  base: '>=4.8 && <5'
  integer-gmp: -any
  random: '>=1.0'
all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.7.1.0
- 0.8.0.0
- 0.8.0.2
- 0.9.0
- 0.10.0
- 0.11.0
- 0.11.1
- 0.11.2
- 0.11.3
- 0.12.0
- 0.12.1
- 0.12.2
- 0.12.3
- 0.12.4
- 0.12.4.1
- 0.12.5
- 0.12.5.1
author: Ellie Hermaszewska
latest: 0.12.5.1
description-type: markdown
description: "exact-real\n==========\n\nExact real arithmetic implemented by fast
  binary Cauchy sequences.\n\nMotivating Example\n-------------------\n\nCompare evaluating
  Euler's identity with a `Float`:\n\nNote that you'll need the `DataKinds` extension
  turned on to evaluate the \nexamples in this readme.\n\n``` haskell\nλ> let i =
  0 :+ 1\nλ> exp (i * pi) + 1 :: Complex Float\n0.0 :+ (-8.742278e-8)\n```\n\n...
  and with a `CReal`:\n\n``` haskell\nλ> import Data.CReal\nλ> let i = 0 :+ 1\nλ>
  exp (i * pi) + 1 :: Complex (CReal 0)\n0 :+ 0\n```\n\nOr:\n\n```haskell\nλ> let
  f :: ∀ a. Fractional a => (a, a); f = iterate (\\(x0, x1) -> let x2 = 111 - (1130-3000/x0)
  / x1 in (x1, x2)) (11/2, 61/11) !! 100\nλ> f @Double\n(100.0,100.0)\nλ> f @(CReal
  10)\n(6.0000,6.0000)\nλ> f @(CReal 50)\n(5.9999999879253263,5.9999999899377725)\n```\n\nImplementation\n--------------\n\n`CReal`'s
  phantom type parameter `n :: Nat` represents the precision at which\nvalues should
  be evaluated at when converting to a less precise representation.\nFor instance
  the definition of `x == y` in the instance for `Eq` evaluates `x -\ny` at precision
  `n` and compares the resulting `Integer` to zero. I think that\nthis is the most
  reasonable solution to the fact that lots of of operations\n(such as equality) are
  not computable on the reals but we want to pretend that\nthey are for the sake of
  writing useful programs. Please see the\n[Caveats](#caveats) section for more information.\n\nThe
  `CReal` type is an instance of `Num`, `Fractional`, `Floating`, `Real`,\n`RealFrac`,
  `RealFloat`, `Eq`, `Ord`, `Show` and `Read`. The only functions not\nimplemented
  are a handful from `RealFloat` which assume the number is\nimplemented with a mantissa
  and exponent.\n\nThere is a comprehensive test suite to test the properties of these
  classes.\n\nThe performance isn't terrible on most operations but it's obviously
  not nearly\nas speedy as performing the operations on `Float` or `Double`. The only
  two\nsuper slow functions are `asinh` and `atanh` at the moment.\n\n\nCaveats\n-------\n\nThe
  implementation is not without its caveats however. The big gotcha is that\nalthough
  internally the `CReal n`s are represented exactly, whenever a value is\nextracted
  to another type such as a `Rational` or `Float` it is evaluated to\nwithin `2^-p`
  of the true value.\n\nFor example when using the `CReal 0` type (numbers within
  1 of the true value)\none can produce the following:\n\n``` haskell\nλ> 0.5 == (1
  :: CReal 0)\nTrue\nλ> 0.5 * 2 == (1 :: CReal 0) * 2\nFalse\n```\n\nContributing\n------------\n\nContributions
  and bug reports are welcome!\n\n[goldberg]: http://www.validlab.com/goldberg/paper.pdf
  \"What Every Computer Scientist Should Know About Floating-Point Arithmetic\"\n"
license-name: MIT
