all-versions:
- 1.6.0.0
author: Lennart Spitzner
basic-deps:
  base: '>=4.7.0.2 && <5'
  base-orphans: '>=0.5.1 && <0.6'
  bifunctors: '>=5.4.1 && <5.5'
  containers: '>=0.5.0.0 && <0.6'
  data-pprint: '>=0.2.4'
  deepseq: '>=1.3.0.1 && <1.5'
  deepseq-generics: '>=0.1.1.2 && <0.3'
  directory: '>=1.2 && <1.3'
  either: '>=4.4 && <4.5'
  exference: '>=0'
  hashable: '>=1.2.4.0 && <1.3'
  haskell-src-exts: '>=1.17.1 && <1.18'
  hood: '>=0.3 && <0.4'
  lens: '>=4.12 && <4.15'
  mmorph: '>=1.0.4 && <1.1'
  mtl: '>=2.1 && <2.3'
  multistate: '>=0.6.2 && <0.8'
  parsec: '>=3.1.11 && <3.2'
  pqueue: '>=1.3.1 && <1.4'
  pretty: '>=1.1 && <1.2'
  process: '>=1.2.3.0 && <1.5'
  safe: '>=0.3.10 && <0.4'
  split: '>=0.2.3.1 && <0.3'
  template-haskell: '>=2.8.0.0 && <2.12.0.0'
  transformers: '>=0.3 && <0.6'
  unordered-containers: '>=0.2.5 && <0.3'
  vector: '>=0.11 && <0.13.0.0'
changelog: ''
changelog-type: ''
description: |-
  Type inference takes an expression and tells you its type. This process
  can be inversed: We recursively create random expression trees while checking
  that they -so far- match a given input type. At each step we do the backwards
  step of the inference algorithm step. If you are lucky, this search
  yields one or more expressions.

  Djinn is a similar tool that guarantees to always terminate. But the
  cost of that property is that Djinn does not properly handle polymorphic
  queries - and those are the interesting ones, really :)

  Exference supports type classes, handles undeclared types well
  (Foo -> Foo yields id for unknown Foo), does _not_ check kinds,
  can pattern-match on newtypes, supports RankNTypes.

  Exference reads an environment of function types, data types, type classes
  and instances. The user can add to this environment, but keep in mind that
  each addition enlarges the search space.
description-type: haddock
hash: 334ddeb8112ca62909d009f5324b159b35a4f7bad86d7f25469d2172d1152cfb
homepage: https://github.com/lspitzner/exference
latest: 1.6.0.0
license-name: BSD-3-Clause
maintainer: Lennart Spitzner <hexagoxel@hexagoxel.de>
synopsis: Tool to search/generate (haskell) expressions with a given type
test-bench-deps: {}
