all-versions:
- 0.0.1.0
- 0.0.1.1
author: Matt Parsons
basic-deps:
  base: '>=4.13 && <5'
  exceptions: '>=0'
  mtl: '>=0'
  unliftio: '>=0'
  unliftio-core: '>=0'
changelog: |
  # exceptiot

  ## 0.0.1.1

  * [#3](https://github.com/parsonsmatt/exceptiot/pull/3)
      * Add imports for `Control.Monad.Fix` and `Control.Monad`, allowing to build
        with newer `mtl`.

  ## 0.0.1.0

  * [#1](https://github.com/parsonsmatt/exceptiot/pull/1)
      * Initial implementation
changelog-type: markdown
description: |
  # `exceptiot`

  Sometimes, it is nice to write code in `MonadError` to indicate that the code
  can throw an exception.

  ```haskell
  foo :: MonadError FooError m => Int -> m Char
  ```

  We can call `foo` in `Either FooError` for a pure test, or a `ExceptT FooError
  IO` if we are writing in some monad directly. However, sometimes you can't use
  `ExceptT`. One possible reason is performance: `ExceptT` can add overhead.
  Another reason is `MonadUnliftIO` - `ExceptT` cannot have an instance for this.

  You don't want to *stop* using `MonadError`, but you also can't use `ExceptT`
  anymore. What can you do?

  ```haskell
  import Control.Monad.Except.IO

  main :: IO ()
  main = do
      eres <- runExceptIOT (foo 3)
      case eres of
          Left FooError ->
              putStrLn "got FooError"
          Right c ->
              putChar c
  ```

  You can replace `ExceptT` with `ExceptIOT`, and all exception use will switch to
  `IO` based exceptions instead of `Either`-based values. This allows you to use
  `MonadUnliftIO` without fear.
description-type: markdown
hash: 84df520a6bf7dd3920b2b4a6d52ce53105c579ac4be400fd7a9bf9015fe900ba
homepage: https://github.com/parsonsmatt/exceptiot#readme
latest: 0.0.1.1
license-name: BSD-3-Clause
maintainer: parsonsmatt@gmail.com
synopsis: ExceptT, but uses IO instead of Either
test-bench-deps:
  base: '>=4.13 && <5'
  exceptions: '>=0'
  exceptiot: '>=0'
  hspec: '>=0'
  mtl: '>=0'
  unliftio: '>=0'
  unliftio-core: '>=0'
