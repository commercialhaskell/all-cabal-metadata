all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
author: Chris Smith <cdsmith@gmail.com>
basic-deps:
  HUnit: '>=1.3.0 && <1.7'
  QuickCheck: '>=2.8 && <2.15'
  array: '>=0.5.2 && <0.6'
  base: '>=4.12.0 && <4.20'
  mono-traversable: '>=1.0.15 && <1.1'
  regex-tdfa: '>=1.3.1 && <1.4'
  syb: '>=0.7.2 && <0.8'
  template-haskell: '>=2.13.0 && <2.22'
changelog: |
  # Revision history for explainable-predicates

  ## 0.1.2.4 -- 2023-11-28

  * Version bounds now allow GHC 9.6 and 9.8
  * Fix TypeOperators warning in Test.Predicates

  ## 0.1.2.3 -- 2021-09-18

  * Version bounds now allow GHC 9.4

  ## 0.1.2.2 -- 2021-12-20

  * Better error messages for HUnit integration.

  ## 0.1.2.1 -- 2021-12-20

  * Builds with GHC 9.2.1

  ## 0.1.2.0 -- 2021-09-25

  * HUnit and Hspec integration is now available in `Test.Predicates.HUnit`.

  ## 0.1.1.0 -- 2021-09-25

  * `Predicate` now has a `Contravariant` instance.
  * `==~` is an infix synonym for `accept`.
  * Cabal `regex` and `containers` flags (default true) enable regex and
    container predicates, respectively.
  * Cabal `dev` flag (default false) turns GHC warnings into errors.
  * The `inBranch` and `qADT` combinators are now available for more convenient
    matching of algebraic data types and fields.
  * QuickCheck integration is now available in `Test.Predicates.QuickCheck`.

  ## 0.1.0.0 -- 2021-09-18

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |+
  # explainable-predicates - Predicates that can explain themselves

  [![CI](https://github.com/cdsmith/explainable-predicates/actions/workflows/ci.yml/badge.svg)](https://github.com/cdsmith/explainable-predicates/actions/workflows/ci.yml)
  [![Hackage](https://img.shields.io/hackage/v/explainable-predicates)](https://hackage.haskell.org/package/explainable-predicates)

  [Explainable predicates](https://hackage.haskell.org/package/explainable-predicates)
  are essentially functions from types to `Bool` which can additionally describe
  themselves and explain why an argument does or doesn't match.  They are intended
  to be used during unit tests to provide better error messages when tests fail.
  For example, if a collection is missing an element, an explainable predicate can
  tell you which element is missing.

  ## FAQ

  Here are a few tips for making the most of explainable-predicates.

  ### Which GHC versions are supported?

  explainable-predicates is tested with GHC versions from 8.6 through 9.4.

description-type: markdown
hash: 69125c622d19b4e5ca44c384e354a615aef13605756a77d2fd371307ae092586
homepage: https://github.com/cdsmith/explainable-predicates
latest: 0.1.2.4
license-name: BSD-3-Clause
maintainer: Chris Smith <cdsmith@gmail.com>
synopsis: Predicates that can explain themselves.
test-bench-deps:
  base: '>=0'
  doctest-exitcode-stdio: '>=0'
  doctest-lib: '>=0'
  explainable-predicates: '>=0'
  hspec: '>=0'
