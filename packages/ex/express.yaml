homepage: https://github.com/rudymatela/express#readme
changelog-type: markdown
hash: 7bed5c75da81869c65f7ac11d6008c8ce15f3fdc44c8b748f0061672b2f9c37e
test-bench-deps:
  base: ==4.*
  leancheck: '>=0.9.4'
  express: -any
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: Dynamically-typed expressions involving applications and variables.
changelog: "Changelog for Express\n=====================\n\n\nv0.1.12\n-------\n\n*
  `Data.Express.Fixtures`, add several symbols:\n\t- `hh` and `hhE`;\n\t- `four` and
  `zzs`;\n\t- `signum'` and `signumE`;\n\t- `compose` and `-.-`;\n\t- `mapE` and `map'`.\n\n*
  Add the experimental `Triexpr` module, including:\n\t- the `Triexpr` type;\n\t-
  tests;\n\t- benchmarks.\n\n* Retire Travis as the CI\n\n\nv0.1.10\n-------\n\n*
  add the `hasHole` and `isComplete` functions\n* add the `encompasses` function\n*
  add `appendInt` to `Data.Express.Fixtures`\n* add the `u-conjure` example\n* the
  `Express` typeclass now requires `Show`\n* improve examples in the `eg/` folder\n*
  improve tests of `hasInstanceOf` and `isInstanceOf`\n* improve tests\n* add this
  changelog\n\n\nv0.1.8\n------\n\n* slightly change behaviour of `canonicalVariations`
  and related functions.\n* add more fixtures and improve fixtures' documentation\n*
  improve Makefile and test scripts\n* use GitHub actions as CI\n\n\nv0.1.6\n------\n\n*
  add `compareLexicographically` and `compareQuickly`\n* define behaviour of `canonicalVariations`
  for some undefined cases\n* improve haddock documentation\n* improve tests\n\n\nv0.1.4\n------\n\n*
  add the `fill` and `isFun` functions\n* `Data.Express.Fixtures`: more fixtures,
  define fixity\n* add fixity for some fixtures\n* improve documentation, tests and
  lint\n\n\nv0.1.3\n------\n\nSee the git commit log for v0.1.3 and previous versions.\n"
basic-deps:
  base: '>=4 && <5'
  template-haskell: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.6
- 0.1.8
- 0.1.10
- 0.1.12
author: Rudy Matela <rudy@matela.com.br>
latest: 0.1.12
description-type: markdown
description: "Express\n=======\n\n[![Express's Build Status][build-status]][build-log]\n[![Express
  on Hackage][hackage-version]][express-on-hackage]\n[![Express on Stackage LTS][stackage-lts-badge]][express-on-stackage-lts]\n[![Express
  on Stackage Nightly][stackage-nightly-badge]][express-on-stackage-nightly]\n\n![Express
  logo][express-logo]\n\n\nExpress is a library for manipulating dynamically typed
  Haskell expressions.\nIt's like [`Data.Dynamic`] but with support for encoding applications
  and\nvariables.\n\nIt provides the [`Expr`] type and over a hundred functions for\nbuilding,
  evaluating, comparing, folding, canonicalizing and matching\n[`Expr`]s.  See [Express's
  Haddock documentation] for more details.\n\nThis library has been used in the implementation
  of\n[Speculate] and [Extrapolate].\n\n\nInstalling\n----------\n\nTo install the
  latest Express version from Hackage, just run:\n\n\t$ cabal update\n\t$ cabal install
  express\n\nStarting from Cabal v3.0, you need to pass `--lib` as an argument to
  cabal\ninstall:\n\n\t$ cabal install leancheck --lib\n\n\nBasics\n------\n\nTo import
  `Express` just:\n\n\t> import Data.Express\n\nFor types that are [`Show`] instances,\nwe
  can use [`val`] to encode values as [`Expr`]s.\n\n\t> let false = val False\n\t>
  :t false\n\tfalse :: Expr\n\t> print false\n\tFalse :: Bool\n\n\t> let one = val
  (1 :: Int)\n\t> :t one\n\tone :: Expr\n\t> print one\n\t1 :: Int\n\nAs seen above,
  the [`Show`] instance for [`Expr`] produces a string with the\nencoded value and
  it's type.\n\nFor types that aren't [`Show`] instances, like functions,\nwe can
  use [`value`] to encode values as [`Expr`]s.\n\n\t> let notE = value \"not\" not\n\t>
  :t notE\n\tnotE :: Expr\n\t> print notE\n\tnot :: Bool -> Bool\n\nUsing [`:$`] we
  can apply function valued [`Expr`]s, to other Exprs.\n\n\t> let notFalse = notE
  :$ false\n\t> :t notFalse\n\tnotFalse :: Expr\n\t> notFalse\n\tnot False :: Bool\n\nUsing
  [`evaluate`] and [`eval`] we can evaluate [`Expr`]s back into a regular Haskell
  value.\n\n\t> evaluate notFalse :: Maybe Bool\n\tJust True\n\t> evaluate notFalse
  :: Maybe Int\n\tNothing\n\t> eval False notFalse\n\tTrue\n\t> eval (0::Int) notFalse\n\t0\n\n\nExample
  1: heterogeneous lists\n------------------------------\n\nLike with [`Data.Dynamic`],
  we can use Express to create heterogeneous lists.\n\nHere, we use applications of
  [`val`] to create a heterogeneous list:\n\n\t> let xs = [val False, val True, val
  (1::Int), val (2::Int), val (3::Integer), val \"123\"]\n\t> :t xs\n\txs :: [Expr]\n\t>
  xs\n\t[ False :: Bool\n\t, True :: Bool\n\t, 1 :: Int\n\t, 2 :: Int\n\t, 3 :: Integer\n\t,
  \"123\" :: [Char]\n\t]\n\nWe can then apply [`evaluate`] to select values of different
  types:\n\n\t> import Data.Maybe\n\t> mapMaybe evaluate xs :: [Bool]\n\t[False,True]\n\t>
  mapMaybe evaluate xs :: [Int]\n\t[1,2]\n\t> mapMaybe evaluate xs :: [Integer]\n\t[3]\n\t>
  mapMaybe evaluate xs :: [String]\n\t[\"123\"]\n\n\nExample 2: listing applications\n-------------------------------\n\nCarrying
  on from Example 1, we define an heterogeneous list of functions\nencoded as [`Expr`]s:\n\n\t>
  let fs = [value \"not\" not, value \"&&\" (&&), value \"abs\" (abs :: Int -> Int)]\n\t>
  :t fs\n\tfs :: [Expr]\n\nUsing [`$$`] we list the type correct applications of functions
  in `fs` to\nvalues in `xs`.\n\n\t> catMaybes [f $$ x | f <- fs, x <- xs]\n\t[ not
  False :: Bool\n\t, not True :: Bool\n\t, (False &&) :: Bool -> Bool\n\t, (True &&)
  :: Bool -> Bool\n\t, abs 1 :: Int\n\t, abs 2 :: Int\n\t]\n\nExample 3: u-Extrapolate\n------------------------\n\n[u-Extrapolate]
  is a property-based testing library\ncapable of generalizing counter-examples.  It's
  implementation has under 40\nlines of code.  Besides, using Express to encode expressions,
  it uses\n[LeanCheck] for generating test values.\n\n\timport Data.Express\n\timport
  Test.LeanCheck hiding (counterExample, check)\n\nGiven a maximum number of tests
  and a property, the following `counterExample`\nfunction returns either `Nothing`
  when tests pass or `Just` a counterexample\nencoded as an [`Expr`].\n\n\tcounterExample
  :: (Listable a, Express a) => Int -> (a -> Bool) -> Maybe Expr\n\tcounterExample
  maxTests prop  =  listToMaybe\n\t  [expr x | x <- take maxTests list, not (prop
  x)]\n\nExamples (REPL):\n\n\t> counterExample 100 (\\(x,y) -> x + y == y + x)\n\tNothing\n\t>
  counterExample 100 (\\x -> x == x + x)\n\tJust (1 :: Integer)\n\t> counterExample
  100 (\\xs -> nub xs == (xs :: [Int]))\n\tJust ([0,0] :: [Int])\n\nBefore moving
  on to generalize counterexamples, we need a way to compute ground\nexpressions from
  an expression with variables.  For that, we will use `grounds`\nand `tiersFor`:\n\n\tgrounds
  :: Expr -> [Expr]\n\tgrounds e  =  map (e //-)\n\t           .  concat\n\t           $
  \ products [mapT ((,) v) (tiersFor v) | v <- nubVars e]\n\n\ttiersFor :: Expr ->
  [[Expr]]\n\ttiersFor e  =  case show (typ e) of\n\t  \"Int\"    ->  mapT val (tiers
  :: [[Int]])\n\t  \"Bool\"   ->  mapT val (tiers :: [[Bool]])\n\t  \"[Int]\"  ->
  \ mapT val (tiers :: [[ [Int] ]])\n\t  \"[Bool]\" ->  mapT val (tiers :: [[ [Bool]
  ]])\n\t  _        ->  []\n\nAbove, we restrict ourselves to `Int`, `Bool`, `[Int]`
  and `[Bool]` as test\ntypes.  So we can now compute the grounds of an expression
  with variables:\n\n\t> grounds (value \"not\" not :$ var \"p\" (undefined :: Bool))\n\t[
  not False :: Bool\n\t, not True :: Bool\n\t]\n\t> grounds (value \"&&\" (&&) :$
  var \"p\" (undefined :: Bool) :$ var \"q\" (undefined :: Bool))\n\t[ False && False
  :: Bool\n\t, False && True :: Bool\n\t, True && False :: Bool\n\t, True && True
  :: Bool\n\t]\n\nTo compute candidate generalizations from a given counter-example,
  we use the\nfollowing function:\n\n\tcandidateGeneralizations :: Expr -> [Expr]\n\tcandidateGeneralizations
  \ =  map canonicalize\n\t                          .  concatMap canonicalVariations\n\t
  \                         .  gen\n\t  where\n\t  gen e@(e1 :$ e2)  =\n\t    [holeAsTypeOf
  e | isListable e]\n\t    ++ [g1 :$ g2 | g1 <- gen e1, g2 <- gen e2]\n\t    ++ map
  (:$ e2) (gen e1)\n\t    ++ map (e1 :$) (gen e2)\n\t  gen e\n\t    | isVar e    =
  \ []\n\t    | otherwise  =  [holeAsTypeOf e | isListable e]\n\t  isListable  =  not
  . null . tiersFor\n\nThe need for `isListable` above makes sure we only replace
  by variables what we\ncan enumerate.  Our candidate generalizations are listed in
  non-increasing\norder of generality:\n\n\t> candidateGeneralizations (value \"not\"
  not :$ val False)\n\t[ p :: Bool\n\t, not p :: Bool\n\t]\n\tPrelude> candidateGeneralizations
  (value \"||\" (||) :$ val False :$ val True)\n\t[ p :: Bool\n\t, p || q :: Bool\n\t,
  p || p :: Bool\n\t, p || True :: Bool\n\t, False || p :: Bool\n\t]\n\nFor a given
  maximum number of tests, property and counter-example, the\nfollowing function returns
  a counter-example generalization if one is found.\nIt goes through the list of candidate
  generalizations and returns the first for\nwhich all tests _fail_.\n\n\tcounterExampleGeneralization
  :: Express a => Int -> (a -> Bool) -> Expr -> Maybe Expr\n\tcounterExampleGeneralization
  maxTests prop e  =  listToMaybe\n\t  [g | g <- candidateGeneralizations e\n\t     ,
  all (not . prop . evl) (take maxTests $ grounds g)]\n\nWe can finally define our
  `check` function, that will test a property and\nreport a counterexample and a generalization
  when either are found.\n\n\tcheck :: (Listable a, Express a) => (a -> Bool) -> IO
  ()\n\tcheck prop  =  putStrLn $ case counterExample 500 prop of\n\t  Nothing ->
  \"+++ Tests passed.\\n\"\n\t  Just ce -> \"*** Falsified, counterexample:  \" ++
  show ce\n\t          ++ case counterExampleGeneralization 500 prop ce of\n\t             Nothing
  -> \"\"\n\t             Just g -> \"\\n               generalization:  \" ++ show
  g\n\t          ++ \"\\n\"\n\nNow we can find counterexamples and their generalizations:\n\n\t>
  check $ \\xs -> sort (sort xs :: [Int]) == sort xs\n\t+++ Tests passed.\n\n\t> check
  $ \\xs -> length (nub xs :: [Int]) == length xs\n\t*** Falsified, counterexample:
  \ [0,0] :: [Int]\n\t               generalization:  x:x:xs :: [Int]\n\n\t> check
  $ \\x -> x == x + (1 :: Int)\n\t*** Falsified, counterexample:  0 :: Int\n\t               generalization:
  \ x :: Int\n\n\t> check $ \\(x,y) -> x /= (y :: Int)\n\t*** Falsified, counterexample:
  \ (0,0) :: (Int,Int)\n\t               generalization:  (x,x) :: (Int,Int)\n\n[u-Extrapolate]
  has some limitations:\n\n* it only supports properties with one argument (uncurried);\n*
  it only supports generalization of `Int`, `Bool`, `[Int]` and `[Bool]` values;\n*
  there is no way to configure the number of test arguments.\n\nPlease see [Extrapolate]
  for a full-featured version without the above\nlimitations and with support for
  conditional generalizations.\n\n\nExample 4: u-Speculate\n----------------------\n\nUsing
  Express, it takes less than 70 lines of code to define a function\n`speculateAbout`
  that conjectures equations about a set of functions based on\nthe results of testing:\n\n\t>
  speculateAbout [hole (undefined :: Bool), val False, val True, value \"not\" not]\n\t[
  not False == True :: Bool\n\t, not True == False :: Bool\n\t, not (not p) == p ::
  Bool\n\t]\n\n\t> speculateAbout\n    >   [ hole (undefined :: Int)\n    >   , hole
  (undefined :: [Int])\n    >   , val ([] :: [Int])\n    >   , value \":\" ((:) ::
  Int -> [Int] -> [Int])\n    >   , value \"++\" ((++) :: [Int] -> [Int] -> [Int])\n
  \   >   , value \"sort\" (sort :: [Int] -> [Int])\n    >   ]\n\t[ sort [] == []
  :: Bool\n    , xs ++ [] == xs :: Bool\n    , [] ++ xs == xs :: Bool\n    , sort
  (sort xs) == sort xs :: Bool\n    , sort [x] == [x] :: Bool\n    , [x] ++ xs ==
  x:xs :: Bool\n    , sort (xs ++ ys) == sort (ys ++ xs) :: Bool\n    , sort (x:sort
  xs) == sort (x:xs) :: Bool\n    , sort (xs ++ sort ys) == sort (xs ++ ys) :: Bool\n
  \   , sort (sort xs ++ ys) == sort (xs ++ ys) :: Bool\n    , (x:xs) ++ ys == x:(xs
  ++ ys) :: Bool\n    , (xs ++ ys) ++ zs == xs ++ (ys ++ zs) :: Bool\n\t]\n\nPlease
  see the [u-Speculate] example in the [eg](eg) folder for the full code\nof `speculateAbout`.\n\n[u-Speculate]
  has some limitations:\n\n* it sometimes prints redundant equations;\n* although
  it usually runs quickly with less than 6 symbols,\n  runtime is exponential with
  the number of symbols given,\n  providing it with more than a dozen symbols can
  make it run for several\n  minutes or hours;\n* there is no way to configure the
  size limit of reported equations;\n* it only supports variables of `Int`, `Bool`,
  `[Int]`, and `[Bool]` types.\n\nPlease see [Speculate] for a full-featured version
  without the above\nlimitations.\n\n\nExample 5: u-Conjure\n--------------------\n\nUsing
  Express, it takes less than 70 lines of code to define a function\n`conjure` that
  generates a function from a partial function definition\nand a list of primitives.\n\n__Example
  5.1.__ Given:\n\n\tfactorial :: Int -> Int\n\tfactorial 0  =  1\n\tfactorial 1  =
  \ 1\n\tfactorial 2  =  2\n\tfactorial 3  =  6\n\tfactorial 4  =  24\n\nRunning:\n\n\tconjure
  \"factorial\" factorial\n\t  [ val (0 :: Int)\n\t  , val (1 :: Int)\n\t  , value
  \"+\" ((+) :: Int -> Int -> Int)\n\t  , value \"*\" ((*) :: Int -> Int -> Int)\n\t
  \ , value \"foldr\" (foldr :: (Int -> Int -> Int) -> Int -> [Int] -> Int)\n\t  ,
  value \"enumFromTo\" (enumFromTo :: Int -> Int -> [Int])\n\t  ]\n\nPrints:\n\n\t
  \ factorial :: Int -> Int\n\t  factorial x  =  foldr (*) 1 (enumFromTo 1 x)\n\n__Example
  5.2.__ Given:\n\n\t(+++) :: [Int] -> [Int] -> [Int]\n\t[x] +++ [y]  =  [x,y]\n\t[x,y]
  +++ [z,w]  =  [x,y,z,w]\n\nRunning:\n\n\tconjure \"++\" (+++)\n      [ val (0 ::
  Int)\n      , val (1 :: Int)\n      , val ([] :: [Int])\n      , value \"head\"
  (head :: [Int] -> Int)\n      , value \"tail\" (tail :: [Int] -> [Int])\n      ,
  value \":\" ((:) :: Int -> [Int] -> [Int])\n      , value \"foldr\" (foldr :: (Int
  -> [Int] -> [Int]) -> [Int] -> [Int] -> [Int])\n      ]\n\nPrints:\n\n\t(++) ::
  [Int] -> [Int] -> [Int]\n\txs ++ ys  =  foldr (:) ys xs\n\nPlease see the [u-Conjure]
  example in the [eg](eg) folder for the full code.\n\n[u-Conjure] has some limitations:\n\n*
  the maximum function size (7) or number of tests (60) are not configurable;\n* the
  maximum function size has to be kept small (<=7)\n  for a reasonable runtime.\n
  \ Due to this, several simple functions are simply out-of-reach;\n* the number of
  primitive functions given has to be kept small (<12)\n  for a reasonable runtime;\n*
  there is no support for explicitly recursive functions\n  thought it is possible
  to pass `foldr` and similar functions as primitives.\n\nPlease see [Conjure] library
  for an experimental version that addresses\nsome the above limitations.\n\n\nFurther
  reading\n---------------\n\nFor a detailed documentation, please see [Express's
  Haddock documentation].\n\nFor more examples, see the [eg](eg) and [bench](bench)
  folders.\n\n\n[Express's Haddock documentation]: https://hackage.haskell.org/package/express/docs/Data-Express.html\n\n[`Expr`]:
  \        https://hackage.haskell.org/package/express/docs/Data-Express.html#t:Expr\n[`val`]:
  \         https://hackage.haskell.org/package/express/docs/Data-Express.html#v:val\n[`value`]:
  \       https://hackage.haskell.org/package/express/docs/Data-Express.html#v:value\n[`eval`]:
  \        https://hackage.haskell.org/package/express/docs/Data-Express.html#v:eval\n[`evaluate`]:
  \    https://hackage.haskell.org/package/express/docs/Data-Express.html#v:evaluate\n[`:$`]:
  \          https://hackage.haskell.org/package/express-0.1.1/docs/Data-Express.html#v::-36-\n[`$$`]:
  \          https://hackage.haskell.org/package/express/docs/Data-Express.html#v:-36--36-\n[`Show`]:
  \        https://hackage.haskell.org/package/base/docs/Prelude.html#t:Show\n[`Data.Dynamic`]:
  https://hackage.haskell.org/package/base/docs/Data-Dynamic.html\n\n[LeanCheck]:
  \  https://hackage.haskell.org/package/leancheck\n[Extrapolate]: https://hackage.haskell.org/package/extrapolate\n[Speculate]:
  \  https://hackage.haskell.org/package/speculate\n[Conjure]:     https://hackage.haskell.org/package/conjure\n\n[u-Speculate]:
  \  eg/u-speculate.hs\n[u-Extrapolate]: eg/u-extrapolate.hs\n[u-Conjure]:     eg/u-conjure.hs\n\n[express-logo]:
  https://github.com/rudymatela/express/raw/master/doc/express.svg?sanitize=true\n\n[build-log]:
  \   https://github.com/rudymatela/express/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/express/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  https://img.shields.io/hackage/v/express.svg\n[express-on-hackage]: https://hackage.haskell.org/package/express\n[stackage-lts-badge]:
  \         https://stackage.org/package/express/badge/lts\n[stackage-nightly-badge]:
  \     https://stackage.org/package/express/badge/nightly\n[express-on-stackage]:
  \        https://stackage.org/package/express\n[express-on-stackage-lts]:     https://stackage.org/lts/package/express\n[express-on-stackage-nightly]:
  https://stackage.org/nightly/package/express\n"
license-name: BSD-3-Clause
