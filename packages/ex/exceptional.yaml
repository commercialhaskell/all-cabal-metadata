all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.3.0
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- 0.1.5.1
- 0.2.0.0
- 0.3.0.0
author: Peter Harpending
basic-deps:
  base: '>=4 && <5'
  exceptions: '>=0'
changelog: ''
changelog-type: ''
description: |-
  exceptional
  ===========

  This is a Haskell library that exists to house a type:

  ```haskell
  data Exceptional x
    = Failure String
    | Success x
  ```

  It's much like `Maybe`, except instead of `Nothing`, we have `Failure
  String`.

  A comparison could also be made to `Either String`. I made this
  library because I was dissatisfied with the `Monad` instance for
  `Either`. In this type, `fail = Failure`. It's rather simple.

  Installing
  ----------

      cabal install exceptional

  Or, add `exceptional` to the `build-depends` field in your `.cabal`
  file.
description-type: markdown
hash: 8d310cde1b8562f7a31c42951c42b5de154fe433a5dbfc6e14b0e7eae7094b82
homepage: https://github.com/
latest: 0.3.0.0
license-name: BSD-2-Clause
maintainer: peter@harpending.org
synopsis: Essentially the Maybe type with error messages.
test-bench-deps: {}
