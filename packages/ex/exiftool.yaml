homepage: https://github.com/marhop/exiftool-haskell
changelog-type: markdown
hash: 7f00f66f68258bff40a5d27e1c24373ab4ae2394b9df3f36808cfed0111ff169
test-bench-deps: {}
maintainer: martin@hoppenheit.info
synopsis: Haskell bindings to ExifTool
changelog: |
  # Revision history for exiftool

  ## 0.2.0.0 -- 2021-09-28

  * New (backwards-incompatible) API. Highlights:
    * The simplified Tag type allows greater syntactic flexibility when specifying
      tag names.
    * The new FromValue/ToValue type classes and new functions for querying and
      manipulating metadata (get/set/del) support polymorphic values.

  ## 0.1.1.0 -- 2021-04-24

  * The getMeta* functions now extract unknown tags as well (exiftool -U option).
  * Improved documentation in [README](README.md).
  * Dependency version bumps.

  ## 0.1.0.0 -- 2020-09-14

  * Initial release.
basic-deps:
  bytestring: '>=0.10.8 && <0.12'
  base: '>=4.12 && <5'
  unordered-containers: '>=0.2.12 && <0.3'
  text: '>=1.2.3 && <1.3'
  process: '>=1.6.5 && <1.7'
  base64: '>=0.4.2 && <0.5'
  hashable: '>=1.3.0 && <1.4'
  temporary: '>=1.3 && <1.4'
  scientific: '>=0.3.6 && <0.4'
  string-conversions: '>=0.4.0 && <0.5'
  aeson: '>=1.5.4 && <2.1'
  vector: '>=0.12.1 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
author: Martin Hoppenheit
latest: 0.2.0.0
description-type: markdown
description: |
  # exiftool-haskell

  [![Hackage](https://img.shields.io/hackage/v/exiftool)](https://hackage.haskell.org/package/exiftool)
  [![CI](https://github.com/marhop/exiftool-haskell/actions/workflows/ci.yml/badge.svg)](https://github.com/marhop/exiftool-haskell/actions/workflows/ci.yml)

  Haskell bindings to the [ExifTool](https://exiftool.org) command-line
  application that enable reading, writing and deleting metadata in various file
  formats.

  Full documentation is on [Hackage](https://hackage.haskell.org/package/exiftool/docs/ExifTool.html).
  A short code example:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import Data.Text (Text)
  import ExifTool

  data Foo = Foo
    { description :: Text,
      resolution :: Int
    }
    deriving (Show)

  main :: IO ()
  main = withExifTool $ \et -> do
    m <- readMeta et [] "a.jpg"
    print $ Foo <$> get (Tag "Description") m <*> get (Tag "XResolution") m
    let m' = del (Tag "Description") . set (Tag "XResolution") (42 :: Int) $ m
    writeMeta et m' "a.jpg"
  ```
license-name: MIT
