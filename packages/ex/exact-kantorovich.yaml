all-versions:
- 0.1.0.0
author: Stéphane Laurent
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.5.1 && <0.7'
  extra: '>=1.7 && <1.8'
  matrix: '>=0.3.6.0 && <0.4'
  monad-logger: '>=0.3.40 && <0.4'
  simplex-method: '>=0.2.0.0 && <0.3'
changelog: |
  # Changelog for `exact-kantorovich`


  ## 0.1.0.0 - 2024-05-08

  First release.
changelog-type: markdown
description: "# exact-kantorovich\n\n<!-- badges: start -->\n[![Stack-lts](https://github.com/stla/exact-kantorovich/actions/workflows/Stack-lts.yml/badge.svg)](https://github.com/stla/exact-kantorovich/actions/workflows/Stack-lts.yml)\n[![Stack-nightly](https://github.com/stla/exact-kantorovich/actions/workflows/Stack-nightly.yml/badge.svg)](https://github.com/stla/exact-kantorovich/actions/workflows/Stack-nightly.yml)\n<!--
  badges: end -->\n\n***Exact Kantorovich distance between finite probability measures.***
  \n\nThis small package allows to compute the exact Kantorovich distance between
  two\nfinite probability measures. This assumes that the probability masses are \nrational
  numbers and that the distance function takes rational values only.\n\n___\n\nLet's
  say you have the two probability measures with masses $(1/7, 2/7, 4/7)$ \nand $(1/4,
  1/4, 1/2)$, both distributed on the set $\\{1, 2, 3\\}$, and you want\nto get the
  Kantorovich distance between them when this set is endowed with the \ndistance function
  $d(i, j) = |i - j|$. To get it with this package, you will \nuse the `kantorovich`
  function. It has four arguments. The first two ones are\nthe two random variables
  corresponding these probability measures, and a random\nvariable is defined as a
  map from its states set to the rational numbers; this\nmap assigns to each element
  its probability mass:\n\n```haskell\nimport Data.Map.Strict ( fromList )\nimport
  Data.Ratio ( (%) )\nmu, nu :: RandomVariable Int\nmu = fromList $ zip [1, 2, 3]
  [1%7, 2%7, 4%7]\nnu = fromList $ zip [1, 2, 3] [1%4, 1%4, 1%2]\n```\n\nThe third
  one is the distance function; it must return a *positive* rational \nnumber:\n\n```haskell\ndist
  :: (Int, Int) -> Rational\ndist (i, j) = toRational $ abs (i - j)\n```\n\nAnd the
  fourth one is a Boolean value that you set to `True` if you want to \nprint to the
  `stdout` stream some details of the simplex algorithm performed \nby the `kantorovich`
  function:\n\n```haskell\nimport Math.Optimization.Kantorovich\nresult <- kantorovich
  mu nu dist False\n```\n\nThe output of the `kantorovich` function has type \n`IO
  (Maybe (KantorovichResult a b))` where here `a = b = Int` and the type \n`KantorovichResult
  a b` is the pair of types \n`(Rational, RandomVariable (a, b))`. The first element
  of an object of a \n`KantorovichResult` object represents the value of the Kantorovich
  distance \nand the second element represents a solution of the \nunderlying linear
  programming problem, that is to say a joining of the two \nprobability measures
  that achieves the Kantorovich distance. \n\nHere is the value of the Kantorovich
  distance for our example:\n\n```haskell\nimport Data.Maybe ( fromJust )\nfst $ fromJust
  result\n-- 5 % 28\n```\n\nYou can display the solution in the style of a matrix
  with the help of the \n`prettyKantorovichSolution` function:\n\n```haskell\nputStrLn
  $ prettyKantorovichSolution result\n```\n\nThis prints:\n\n```\n┌                      ┐\n│
  \ 1 % 7  0 % 1  0 % 1 │\n│ 3 % 28 5 % 28  0 % 1 │\n│  0 % 1 1 % 14  1 % 2 │\n└                      ┘\n```\n\nThat's
  all. There is no other function exported by this package.\n"
description-type: markdown
hash: 98655b5e168040a58ff9f943ca3aef8486123a720cee0e7b37528e120e0f2606
homepage: https://github.com/stla/exact-kantorovich#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: laurent_step@outlook.fr
synopsis: Exact Kantorovich distance between finite probability measures.
test-bench-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.5.1 && <0.7'
  exact-kantorovich: '>=0'
  tasty: '>=1.4 && <1.5'
  tasty-hunit: '>=0.10 && <0.11'
