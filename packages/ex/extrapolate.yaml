all-versions:
- 0.0.1
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.4
- 0.4.6
author: Rudy Matela
basic-deps:
  base: '>=4 && <5'
  express: '>=0.1.6'
  leancheck: '>=0.9.4'
  speculate: '>=0.4.6'
  template-haskell: '>=0'
changelog: ''
changelog-type: ''
description: "Extrapolate\n===========\n\n[![Extrapolate Build Status][build-status]][build-log]\n[![Extrapolate
  on Hackage][hackage-version]][extrapolate-on-hackage]\n[![Extrapolate on Stackage
  LTS][stackage-lts-badge]][extrapolate-on-stackage-lts]\n[![Extrapolate on Stackage
  Nightly][stackage-nightly-badge]][extrapolate-on-stackage-nightly]\n\n![Extrapolate
  logo][extrapolate-logo]\n\nExtrapolate is a [property-based testing] library for
  [Haskell]\ncapable of reporting generalized counter-examples.\n\n\nInstalling Extrapolate\n----------------------\n\nTo
  install the latest version of [Extrapolate from Hackage] using [cabal], just:\n\n\t$
  cabal update\n\t$ cabal install extrapolate\n\nTo test if it installed correctly,
  follow through the next section.\n\nStarting from Cabal v3, you need to pass `--lib`
  to `cabal install`:\n\n\t$ cabal install extrapolate --lib\n\n\nUsing Extrapolate\n-----------------\n\nTo
  use Extrapolate, you first import the [`Test.Extrapolate`] module,\nthen pass any
  properties you with to test to the function [`check`]:\n\n\t$ ghci\n\t> import Test.Extrapolate\n\t>
  check $ \\x y -> x + y == y + (x :: Int)\n\t+++ OK, passed 360 tests.\n\n\t> import
  Data.List (nub)\n\t> check $ \\xs -> nub xs == (xs :: [Int])\n\t*** Failed! Falsifiable
  (after 3 tests):\n\t[0,0]\n\n\tGeneralization:\n\tx:x:_\n\nThe operator [`+`] is
  commutative.  The function [`nub`] is not an identity.\n\n\n### Configuring the
  number of tests\n\nTo increase the number of tests, use the [`for`] combinator:\n\n\t$
  ghci\n\t> import Test.Extrapolate\n\t> check `for` 1000 $ \\x y -> x + y == y +
  (x :: Int)\n\t+++ OK, passed 1000 tests.\n\n\n### Customizing the background functions
  (allowed in side-conditions)\n\nTo customize the background functions, use the [`withBackground`]
  combinator:\n\n\t$ ghci\n\t> import Test.Extrapolate\n\t> import Data.List (nub)\n\t>
  let hasDups xs  =  nub xs /= (xs :: [Int])\n\t> check `withBackground` [constant
  \"hasDups\" hasDups] $ \\xs -> nub xs == (xs :: [Int])\n\t*** Failed! Falsifiable
  (after 3 tests):\n\t[0,0]\n\n\tGeneralization:\n\tx:x:_\n\n\tConditional Generalization:\n\txs
  \ when  hasDups xs\n\nPerhaps the example above is silly (`hasDups` is the negation
  of the property\nitself!), but it illustrates the use of [`withBackground`].\n\n\nThe
  combinators [`for`] and [`withBackground`] can be used in conjunction:\n\n\t> check
  `for` 100 `withBackground` [...] $ property\n\nDon't forget the dollar sign [`$`].\n\n\nAnother
  Example\n---------------\n\nConsider the following (faulty) sort function and a
  property about it:\n\n    sort :: Ord a => [a] -> [a]\n    sort []      =  []\n
  \   sort (x:xs)  =  sort (filter (< x) xs)\n                 ++ [x]\n                 ++
  sort (filter (> x) xs)\n\n    prop_sortCount :: Ord a => a -> [a] -> Bool\n    prop_sortCount
  x xs  =  count x (sort xs) == count x xs\n      where\n      count x = length .
  filter (== x)\n\nAfter testing the property, Extrapolate returns a fully defined
  counter-example\nalong with a generalization:\n\n    > import Test.Extrapolate\n
  \   > check (prop_sortCount :: Int -> [Int] -> Bool)\n    *** Failed! Falsifiable
  (after 4 tests):\n    0 [0,0]\n\n    Generalization:\n    x (x:x:_)\n\nThis hopefully
  makes it easier to find the source of the bug.  In this case,\nthe faulty sort function
  discards repeated elements.\n\n\nFurther reading\n---------------\n\nFor more examples,
  see the [eg](eg) folder.\nFor type signatures, other options and uses,\nsee [Extrapolate's
  API documentation].\n\nThere are two other tools for [Haskell] capable of producing
  generalized\ncounter-examples: [SmartCheck] and [Lazy SmallCheck 2012].\n\nExtrapolate
  was accepted for presentation at [IFL 2017], see the\n[IFL paper about Extrapolate](https://matela.com.br/paper/extrapolate.pdf).\nExtrapolate
  is also subject to a chapter in a [PhD Thesis (2017)].\n\n[extrapolate-on-hackage]:
  \         https://hackage.haskell.org/package/extrapolate\n[Extrapolate from Hackage]:
  \       https://hackage.haskell.org/package/extrapolate\n[Extrapolate's API documentation]:
  https://hackage.haskell.org/package/extrapolate/docs/Test-Extrapolate.html\n[`Test.Extrapolate`]:
  \             https://hackage.haskell.org/package/extrapolate/docs/Test-Extrapolate.html\n[`check`]:
  \                        https://hackage.haskell.org/package/extrapolate/docs/Test-Extrapolate.html#v:check\n[`for`]:
  \                          https://hackage.haskell.org/package/extrapolate/docs/Test-Extrapolate.html#v:for\n[`withBackground`]:
  \               https://hackage.haskell.org/package/extrapolate/docs/Test-Extrapolate.html#v:withBackground\n[`$`]:
  \                            https://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html#v:-36-\n[`+`]:
  \                            https://hackage.haskell.org/package/base/docs/Prelude.html#v:-43-\n[`nub`]:
  \                          https://hackage.haskell.org/package/base/docs/Data-List.html#v:nub\n[Haskell]:
  \                        https://www.haskell.org/\n[cabal]:                           https://www.haskell.org/cabal/\n[property-based
  testing]:          https://github.com/rudymatela/leancheck/blob/master/doc/tutorial.md\n\n[IFL
  2017]:             http://iflconference.org/\n[SmartCheck]:           https://github.com/leepike/SmartCheck\n[Lazy
  SmallCheck 2012]: https://github.com/UoYCS-plasma/lazysmallcheck2012\n[PhD Thesis
  (2017)]: https://matela.com.br/paper/rudy-phd-thesis-2017.pdf\n\n[extrapolate-logo]:
  https://github.com/rudymatela/extrapolate/raw/master/doc/extrapolate.svg?sanitize=true\n\n[build-log]:
  \   https://github.com/rudymatela/extrapolate/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/extrapolate/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  https://img.shields.io/hackage/v/extrapolate.svg\n[stackage-lts-badge]:              https://stackage.org/package/extrapolate/badge/lts\n[stackage-nightly-badge]:
  \         https://stackage.org/package/extrapolate/badge/nightly\n[extrapolate-on-stackage]:
  \        https://stackage.org/package/extrapolate\n[extrapolate-on-stackage-lts]:
  \    https://stackage.org/lts/package/extrapolate\n[extrapolate-on-stackage-nightly]:
  https://stackage.org/nightly/package/extrapolate\n"
description-type: markdown
hash: 1d652943057eece566cf4c81c0f544aaedcbbf463634a3a659e3b02ec2057432
homepage: https://github.com/rudymatela/extrapolate#readme
latest: 0.4.6
license-name: BSD-3-Clause
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: generalize counter-examples of test properties
test-bench-deps:
  base: '>=4 && <5'
  express: '>=0'
  extrapolate: '>=0'
  leancheck: '>=0'
  speculate: '>=0'
