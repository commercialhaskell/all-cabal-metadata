all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Daishi Nakajima
basic-deps:
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  template-haskell: '>=0'
  text: '>=0'
changelog: |
  # Changelog for data-extend-th

  ## Unreleased changes
changelog-type: markdown
description: |
  # data-extend-th

  TH to define a new record data type that extends the existing simple record data type.

  This library should be useful when used with [generic-lens](http://hackage.haskell.org/package/generic-lens).
  ## Syntax
  ```
  $(extendD "data T = T1 <> T2 <> { f1 :: T3, f2 :: T4 } deriving (c1, c2) ")
  ```

  ## Examples

  ### unioning existing record data type

  ```
  data Animal = Animal
    { name :: String
    , age  :: Int
    } deriving (Show, Eq, Generic)

  data HumanInfo = HumanInfo
    { address :: String
    } deriving (Show, Eq, Generic)

  $(extendD "data Human = Animal <> HumanInfo deriving (Show, Generic) ")
  ```

  `data Human`

  ```
  :i Human
  data Human
    = Human {name :: String,
             age :: Int,
             address :: String}
  instance Show Human
  instance Generic Human
  ```

  ### higher kind, define field records anonymously

  ```
  data X a = X {f1 :: a Int} deriving (Generic)
  data Y a = Y {f2 :: Maybe a} deriving (Generic, Show)
  data Z a = Z { x :: X a } deriving(Generic)
  $(extendD "data XY = X <> Y <> { e1 :: String, e2 :: String } <> Z deriving (Generic)")
  ```

  `XY`
  ```
  data XY (a :: * -> *) a1 (a2 :: * -> *)
    = XY {f1 :: a Int,
          f2 :: Maybe a1,
          e1 :: String,
          e2 :: String,
          x :: X a2}
  instance Generic (XY a1 a2 a3)
  ```
description-type: markdown
hash: 10b6e74b3ad325fa87cbfebafd8cef699516f0da2c841a3c73c0a100fc5eb928
homepage: https://github.com/nakaji-dayo/extend-record-data-th#readme
latest: 0.1.0.2
license-name: BSD-3-Clause
maintainer: nakaji.dayo@gmail.com
synopsis: TH to define a new record data type that extends the existing record data
  type.
test-bench-deps:
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  extend-record-data-th: '>=0'
  template-haskell: '>=0'
  text: '>=0'
