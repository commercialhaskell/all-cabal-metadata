all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Veronika Romashkina, Dmitrii Kovanikov
basic-deps:
  Cabal: ^>=3.12
  base: '>=4.13.0.0 && <4.20'
  bytestring: '>=0.10 && <0.13'
  colourista: '>=0.1 && <0.3'
  containers: '>=0.6 && <0.7'
  directory: '>=1.3 && <1.4'
  extensions: '>=0'
  filepath: '>=1.4 && <1.5'
  ghc-boot-th: '>=8.8.1 && <9.9'
  optparse-applicative: '>=0.15 && <0.18'
  parsec: ^>=3.1
  text: '>=1.2.3 && <2.2'
changelog: "# Changelog\n\n`extensions` uses [PVP Versioning][1].\nThe changelog is
  available [on GitHub][2].\n\n## 0.1.0.2 — Apr 29, 2024\n\n* Add support for GHC-9.8\n\n*
  Support `Cabal` `3.12` (only)\n\n## 0.1.0.1 — Oct 15, 2023\n\n* Add support for
  GHC-9.6\n\n* Add support for `Cabal` `3.10` and remove support for all other\n  `Cabal`
  versions.  This seems like the sensible thing to do, because\n  the list of extensions
  in the `Cabal` package changes every major\n  version.  If this causes you problems
  please [file an\n  issue](https://github.com/kowainik/extensions/issues/new) and
  we\n  will address it.\n\n## 0.1.0.0 — Oct 14, 2022\n\n* [#74](https://github.com/kowainik/extensions/issues/74):\n
  \ Support GHC-9.2.\n* [#83](https://github.com/kowainik/extensions/issues/83):\n
  \ Support GHC-9.4.\n* Support `Cabal` `3.4`, `3.6` and `3.8`.\n* [#70](https://github.com/kowainik/extensions/issues/70):\n
  \ Parse empty lines and spaces in before comments and pragmas in the beginning\n
  \ of the file.\n\n## 0.0.0.1 — May 9, 2020 \U0001F396️\n\n* Handle one more parsing
  case.\n\n## 0.0.0.0 — May the 4th, 2020 \U0001F4AA\n\n* Initially created.\n\n[1]:
  https://pvp.haskell.org\n[2]: https://github.com/kowainik/extensions/releases\n"
changelog-type: markdown
description: |
  # extensions

  ![Logo](https://user-images.githubusercontent.com/8126674/80925339-f09a4e80-8d86-11ea-81f4-fd1a6f50cd6b.png)

  [![GitHub CI](https://github.com/kowainik/extensions/workflows/CI/badge.svg)](https://github.com/kowainik/extensions/actions)
  [![Hackage](https://img.shields.io/hackage/v/extensions.svg?logo=haskell)](https://hackage.haskell.org/package/extensions)
  [![MPL-2.0 license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](LICENSE)

  Library and CLI tool to parse Haskell `{-# LANGUAGE #-}` extensions in
  source files, extract `default-extensions` from `.cabal` files and
  combine together `default-extensions` and per-module extensions.

  ## Goals

  The `extensions` library provides a lightweight way to get Haskell
  LANGUAGE pragmas for Haskell modules. It has the following goals:

  1. Be **lightweight**. Dependency footprint is extremely small,
     and using `extensions` either as a library or as a tool is
     straightforward.
  2. Support both `default-extensions` in **Cabal** and `{-# LANGUAGE #-}`
     pragmas in **Haskell** modules.
  3. Should work on common and real cases. `extensions` strives to
     support as many valid syntactic constructions as possible, but it
     may not work on every possible combination of CPP, comments and
     pragmas, where GHC would work. We encouragle you to
     [open issue](https://github.com/kowainik/extensions/issues/new) if
     you encounter any failures when using `extensions`.

  ## How to use

  You can use `extensions` either as a library or as a CLI tool.

  ### Library

  #### Usage with Cabal

  `extensions` is compatible with the latest GHC compiler
  versions starting from `8.8.3`.

  In order to start using `extensions` in your project, you
  will need to set it up with the three easy steps:

  1. Add the dependency on `extensions` in your project's
     `.cabal` file. For this, you should modify the `build-depends`
     section by adding the name of this library. After the adjustment,
     this section could look like this:

     ```haskell
     build-depends: base ^>= 4.14
                  , extensions ^>= 0.0
     ```
  2. In the module where you wish to extract extensions, you
     should add the import:

     ```haskell
     import Extensions (getPackageExtensions)
     ```
  3. Now you can use the types and functions from the library:

     ```haskell
     main :: IO ()
     main = getPackageExtensions "extensions.cabal" >>= print
     ```

  #### Usage with Stack

  If `extensions` is not available on your current Stackage
  resolver yet, fear not! You can still use it from Hackage by adding
  the following to the `extra-deps` section of your `stack.yaml` file:

  ```yaml
  extra-deps:
    - extensions-0.0.0.0
  ```

  ### CLI tool

  To use `extensions` as a CLI tool, you need to install it either with Cabal

  ```
  cabal install extensions
  ```

  Stack

  ```
  stack install extensions
  ```

  or the nix package manager which allows you to use it ad-hoc via `nix-shell -p haskellPackages.extensions --run extensions` or to install via

  ```
  nix-env -iA nixpkgs.haskellPackages.extensions
  ```

  The tool can be used to inspect language extensions in your Haskell
  project. Some common usages of the tool:

  1. Get all extensions in all modules, combined with
     `default-extensions` from the `.cabal` file.
     ![All extensions](https://user-images.githubusercontent.com/4276606/80870176-b0f73800-8c9c-11ea-8ffc-dda2d4940d1e.png)
  2. Get all extensions for a specific module, combined with Cabal
     extensions.
     ![Module extensions](https://user-images.githubusercontent.com/4276606/80870175-b05ea180-8c9c-11ea-9f48-cac7ff854b9c.png)
  3. Get extensions defined only in a module.
     ![Only module](https://user-images.githubusercontent.com/4276606/80870173-afc60b00-8c9c-11ea-9d74-cf92ed0c3940.png)

  ## Alternatives

  Alternatively, you can extract Haskell Language extensions using the
  following ways:

  1. Using `ghc` as a library. This approach ties you to a specific GHC
     version and requires more effort to support multiple GHCs. Also,
     GHC API is more complicated than `extensions` API (especially if
     you want to handle `CPP`). And even with `CPP` handling from `ghc`
     you won't be able to get all extensions defined in a
     module. However, this approach allows you to fully reproduce GHC
     behaviour.
  2. Using `ghc-lib-parser`. Same as the previous approach, but does not
     tie you to a specific GHC version. However, `ghc-lib-parser` is
     rather big dependency.
  3. Using the `haskell-src-exts` library. This library parses Haskell
     source files, but it's not actively maintained anymore and doesn't
     support `CPP`.
description-type: markdown
hash: a2836b4ee7d25fe5f556067ff5d2c503bf651178c3fef16916a7024882a573cf
homepage: https://github.com/kowainik/extensions
latest: 0.1.0.2
license-name: MPL-2.0
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Parse Haskell Language Extensions
test-bench-deps:
  base: '>=4.13.0.0 && <4.20'
  bytestring: '>=0'
  containers: '>=0'
  extensions: '>=0'
  ghc-boot-th: '>=0'
  hedgehog: '>=1.0 && <1.5'
  hspec: '>=0'
  hspec-hedgehog: '>=0.0.1 && <0.2'
  text: '>=0'
