all-versions:
- 0.1.1.1
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
author: Michael Sloan
basic-deps:
  base: '>=4.0 && <5.0'
  bytestring: '>=0'
  cryptohash: '>=0'
  directory: '>=0'
  executable-hash: '>=0'
  executable-path: '>=0.0.3 && <0.1'
  file-embed: '>=0.0.8 && <0.1'
  template-haskell: '>=0'
changelog: |
  0.2.0.4
  =======

  Added `custom-setup` to `.cabal` file

  0.2.0.3
  =======

  Add a `PackageImport` to avoid conflicting module names for `Crypto.Hash.SHA1`
  introduced by the `cryptohash-sha1` package.

  0.2.0.0
  =======

  In order to support dynamic linking, `executableHash` and
  `injectedExecutableHash` now need to be run in TH splices.  Before
  this change, the library was assuming that it would be statically
  linked, such that the file-embed dummy bytestring would be present in
  the executable.

  See [this github issue](https://github.com/fpco/executable-hash/issues/1).

  0.1.1.1
  =======

  First public version
changelog-type: markdown
description: |
  # executable-hash

  Provides the SHA1 hash of the executable.  This hash can either be
  injected into the executable as a step after compilation, or
  calculated at runtime.

  ## Usage

  The main function expected to be used by the user is
  `System.Executable.Hash.executableHash`.  When used in a TH splice,
  like `$(executableHash)`, the resulting expression yields a SHA1 hash
  determined by the contents of the executable.  However, note that this
  may not be the actual SHA1 of the executable, since the hash can be
  injected into the executable (which changes its "actual" hash).

  Installing this package will also install the `inject-executable-hash`
  executable.  Running this program on a binary, like
  `inject-executable-hash <binary-name>` will replace a dummy
  `ByteString` (via the `file-embed` package) in the binary with its
  hash.

  Alternatively, you can put this in a `Setup.hs` file, and set
  `build-type: Custom` in your `.cabal`:

  ```haskell
  import Distribution.Simple (defaultMainWithHooks, simpleUserHooks, postBuild)
  import Distribution.Simple.LocalBuildInfo (buildDir)
  import System.Executable.Hash.Internal (maybeInjectExecutableHash)
  import System.FilePath ((</>))

  main :: IO ()
  main = defaultMainWithHooks $ simpleUserHooks
      { postBuild = \_ _ _ buildInfo ->
          maybeInjectExecutableHash (buildDir buildInfo </> "exeName/exeName")
      }
  ```

  (Note: you'll need to change the executable path)
description-type: markdown
hash: 70d606ec3ab3a833af698f961439ae8ecb2b1238565e8af13d21d464d1838428
homepage: http://github.com/fpco/executable-hash
latest: 0.2.0.4
license-name: MIT
maintainer: FP Complete <sloan@fpcomplete.com>
synopsis: Provides the SHA1 hash of the program executable
test-bench-deps:
  base: '>=0'
  executable-hash: '>=0'
