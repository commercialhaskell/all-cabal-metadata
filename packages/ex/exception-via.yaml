homepage: https://github.com/parsonsmatt/exception-via#readme
changelog-type: markdown
hash: 31bf0ca8f30987c78da89efa77fc512e9be2ceb459fb6db9c2a494267e97a27c
test-bench-deps: {}
maintainer: parsonsmatt@gmail.com
synopsis: DerivingVia for your hierarchical exceptions
changelog: |
  # Changelog

  ## [Unreleased](https://github.com/parsonsmatt/exception-via/tree/HEAD)

  ## 0.2.0.0 -- 2023-08-18

  ### Added

  - Support for Template Haskell versions `>=2.18` (#2)

  - `Exception` instance for the `ExceptionVia` newtype (#5)

  ### Fixed

  - Add missing splice to Template Haskell code for `mkHierarchy` (#5)
basic-deps:
  base: '>=4.7 && <5'
  template-haskell: '>=2.9.0.0 && <2.21'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Matt Parsons
latest: 0.2.0.0
description-type: markdown
description: "# exception-via\n\nHaskell supports hierarchical exceptions, but there's
  a bit of boilerplate involved.\nThe [documentation for `Control.Exception`](https://www.stackage.org/haddock/lts-16.20/base-4.13.0.0/Control-Exception.html#t:Exception)
  has a write-up:\n\n```haskell\n---------------------------------------------------------------------\n--
  Make the root exception type for all the exceptions in a compiler\n\ndata SomeCompilerException
  = forall e . Exception e => SomeCompilerException e\n\ninstance Show SomeCompilerException
  where\n    show (SomeCompilerException e) = show e\n\ninstance Exception SomeCompilerException\n\ncompilerExceptionToException
  :: Exception e => e -> SomeException\ncompilerExceptionToException = toException
  . SomeCompilerException\n\ncompilerExceptionFromException :: Exception e => SomeException
  -> Maybe e\ncompilerExceptionFromException x = do\n    SomeCompilerException a <-
  fromException x\n    cast a\n\n---------------------------------------------------------------------\n--
  Make a subhierarchy for exceptions in the frontend of the compiler\n\ndata SomeFrontendException
  = forall e . Exception e => SomeFrontendException e\n\ninstance Show SomeFrontendException
  where\n    show (SomeFrontendException e) = show e\n\ninstance Exception SomeFrontendException
  where\n    toException = compilerExceptionToException\n    fromException = compilerExceptionFromException\n\nfrontendExceptionToException
  :: Exception e => e -> SomeException\nfrontendExceptionToException = toException
  . SomeFrontendException\n\nfrontendExceptionFromException :: Exception e => SomeException
  -> Maybe e\nfrontendExceptionFromException x = do\n    SomeFrontendException a <-
  fromException x\n    cast a\n\n---------------------------------------------------------------------\n--
  Make an exception type for a particular frontend compiler exception\n\ndata MismatchedParentheses
  = MismatchedParentheses\n    deriving Show\n\ninstance Exception MismatchedParentheses
  where\n    toException   = frontendExceptionToException\n    fromException = frontendExceptionFromException\n```\n\nWoof!
  That's a lot of code just to have nested exceptions.\nEspecially since Java devs
  can just write\n\n```java\npublic class CompilerException extends Exception { ...
  }\npublic class FrontendException extends CompilerException {....}\n```\n\nThis
  library attempts to help by providing a `newtype` wrapper you can use with `DerivingVia`.\nWith
  basic exceptions, you don't need this - the default methods on `Exception` default
  to a top-level exception.\n\n```haskell\ndata  EasyException = EasyException\n  deriving
  stock Show\n  deriving anyclass Exception\n```\n\nLet's make those nested exceptions.\n\n```haskell\ndata
  SomeCompilerException = forall e . Exception e => SomeCompilerException e\n\nderiving
  stock instance Show SomeCompilerException\nderiving anyclass instance Exception
  SomeCompilerException\n\ninstance Hierarchy SomeCompilerException where\n  toParent
  = SomeCompilerException\n  fromParent (SomeCompilerException e) = cast e\n```\n\nThe
  `Hierarchy` class is required to tell us how to unpack and pack things in the exception
  type.\nNow let's get to the frontend exception.\nIt's a subtype of `SomeCompilerException`,
  so we'll derive the `Exception` instance using our `via`-type.\n\n```haskell\ndata
  SomeFrontendException = forall e . Exception e => SomeFrontendException e\n\nderiving
  stock instance Show SomeFrontendException\nderiving \n  via (SomeFrontendException
  <!!! SomeCompilerException) \n  instance Exception SomeFrontendException\n```\n\nThat's
  it.\nWe need to define the `Hierarchy` instance, which is extremely boilerplate:\n\n```haskell\ninstance
  Hierarchy SomeFrontendException where\n  toParent = SomeFrontendException\n  fromParent
  (SomeFrontendException e) = cast e\n```\n\nA `TemplateHaskell` helper would be nice...\n\n```haskell\nmkHierarchy
  ''SomeFrontendException\n```\n\nMuch better.\n\nAnd now we have our actual exception
  types:\n\n```haskell\ndata MismatchedParentheses = MismatchedParentheses\n  deriving
  stock Show\n  deriving \n    via (MismatchedParentheses <!!! SomeFrontendException)
  \n    Exception MismatchedParentheses\n```\n\nEasy peasy.\n"
license-name: BSD-3-Clause
