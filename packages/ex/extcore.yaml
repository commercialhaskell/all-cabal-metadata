all-versions:
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- 0.9.1
- 0.9.2
- '1.0'
- 1.0.1
- 1.0.2
author: Andrew Tolmach, Tim Chevalier, The GHC Team
basic-deps:
  array: '>=0'
  base: '>=4 && <5'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  mtl: '>=0'
  parsec: '>=0'
  pretty: '>=0'
  syb: '>=0'
changelog: "extcore change log\n\nNew in version 1.0.1:\n* Fixed documentation URL
  in README. Updated required Cabal version.\n\nNew in version 1.0:\n\n* Disambiguate
  everythingBut function defined in Language.Core.Utils,\nas Data.Generics in GHC
  7 defines a function with the same name (but a\ndifferent type); thanks to Jason
  Dagit.\n\n* As the library appears to have more than one user and no major bugs\nhave
  been reported, increment version to 1.0.\n\nNew in version 0.9.2:\n\n* Added debug
  printer code, contributed by Neil Brown (see\nLanguage.Core.DebugPrinter)\n\nNew
  in version 0.9.1:\n\n* Print out negative rational literals correctly (that is,
  \naccording to the External Core syntax specification).\n\nNew in version 0.9:\n\n*
  Documentation only.\n\nNew in version 0.8:\n\n* Added more library patches (allowing
  for more library code\nto be usefully compiled to External Core).\n\n* Removed stray
  debug traces.\n\nNew in version 0.7:\n\n* Tested with GHC 6.12.2 and 6.10.4, and
  updated compiler flags appropriately.\n\n* Eliminated compiler warnings in ParsecParser
  (no substantial changes) and\nsome other modules.\n\nNew in version 0.6:\n\n* Re-added
  old lexer and happy parser. (The Parsec parser is quite inefficient\n  and not recommended
  if you desire good performance. It contains some\n  backtracking that could be removed
  easily, but other kinds of backtracking in\n  it are harder to remove while keeping
  the parser nice and modular.)\n\n* Rewrote ElimDeadCode without using Data.Generics.\n\n*
  Re-added Dependencies module.\n\n* Fixed bug in Prep that was causing some unapplied
  data constructors to\nnot be eta-expanded.\n\n* Changed Env type to Data.Map everywhere.\n\n*
  Fixed bug in Printer with printing of escape characters."
changelog-type: text
description: "This package contains a set of example programs for handing GHC's\nExternal
  Core format. The typechecker and interpreter give a precise\nstatic and dynamic
  semantics.\n\n==== Documentation ====\n\nDocumentation for the External Core format
  lives at:\nhttp://www.haskell.org/ghc/docs/latest/core.pdf\n\nSince this URL has
  been known to change, you can also search the web for\n\"An External Representation
  for the GHC Core Language\" (a PDF; make sure\nthe date listed on page 1 is in 2009
  or later).\n\n==== Building ====\n\nThe ext-core library can be built in the usual
  Cabal manner:\n1. runhaskell Setup.lhs configure\n2. runhaskell Setup.lhs build\n3.
  runhaskell Setup.lhs install\n\nThe file Language/Core/PrimEnv.hs can be automatically
  generated from GHC's\nprimop table. This distribution (as of September 2009) contains
  a snapshot\nof GHC 6.10.4's primops. See the sources for Setup.lhs in this directory\nfor
  how to re-generate this file from a more recent version of GHC (you need\na GHC
  build tree if you want to do this.)\n\n==== Parser warning ====\n\nThe parsers in
  this package don't parse negative rational literals\nas found in Core generated
  by GHC 6.10.* or 6.12.2. The bug is in GHC\nrather than the parsers. The bug is
  currently fixed in the HEAD\n(as of June 14, 2010) and will be fixed in GHC 6.12.4.
  In the meantime,\nyou can get a patch for the stable branch (GHC 6.10) at:\nhttp://cs.pdx.edu/~tjc/Patches/core-prettyprinter.dpatch\n\nIf
  you want to use GHC 6.12.* instead, then just pull the HEAD. \n\n==== Running the
  code ====\n\nThe easiest way to run the included checker and interpreter is to\ninstall
  and use the Core Linker, which combines multiple External Core\nsource files into
  a single source file. Since even a very simple GHC-\ncompiled program relies on
  many different library modules, this makes\nthe code easier, and (as of September
  2009) I haven't recently tested\nthe checker and interpreter on Core programs consisting
  of sets of \nmultiple modules.\n\nThe Core Linker lives at:\nhttp://hackage.haskell.org/package/linkcore\n\nTo
  use the tools, you need to generate External Core for all the base,\ninteger and
  ghc-prim libraries. You need a GHC source tree for\nthis. Adding \"-fext-core\"
  to the GhcLibHcOpts in your build.mk file,\nthen run \"make\" under libraries/.\n\nIf
  you want to run the sample interpreter, then before doing the previous\nstep, you
  need to apply some library patches that circumvent some of\nGHC's implementations
  of I/O functions to avoid exposing primops that the\next-core interpreter doesn't
  know how to do. In this directory, you'll\nfind a patch called simple_io.dpatch.
  \"darcs apply\" it under libraries/base.\nIn addition, base-library.dpatch masks
  out some additional library code\nand can be \"darcs apply\" it under libraries/base.
  It contains implementations\nof GHC.Float code that are ***very likely buggy***!
  This code is mainly\nmeant for demonstrating what you can do, not for generating
  ext-core code\nthat you can execute without substantial additional work. Finally,\ndownload
  the integer-simple library from:\nhttp://darcs.haskell.org/libraries/integer-simple\nand
  \"darcs apply\" the patch in this directory called integer-simple-library.dpatch\nunder
  libraries/integer-simple.\n\nOnce you've compiled all the libraries to Core, installed
  the Core Linker, and\ngenerated an example file from it -- say, hello_out.hcr --
  you can try running\nthe checker and interpreter.\n\nTo do that, build the example
  Driver program (included in this directory) with:\n  ghc -package extcore Driver.hs
  -o Driver\nand then:\n  ./Driver hello_out.hcr\n\nOf course, you can also import
  Language.Core.ParsecParser, Language.Core.Check,\nLanguage.Core.Interp, etc. from
  your own programs.\n\nTested most recently with GHC 6.12.2.\n\n==== Acknowledgments
  ====\n\nThanks to Neil Brown for contributing the code in Language.Core.DebugPrinter\nand
  to SÃ¶nke Hahn for contributing patches updating the library for\nGHC 7.6.\n\n====
  Bugs? ====\n\nProbably. Please direct questions or bug reports both to:\nTim Chevalier
  <chevalier@alum.wellesley.edu>\nand to\nglasgow-haskell-users@haskell.org\n\n====
  Notes ====\n[Warning: the following notes may be out of date, as of September 2009.]\n\nThe
  checker should work on most programs. Bugs (and infelicities) \nI'm aware of:\n\n
  \  There's some weirdness involving funny character literals. This can\n   be fixed
  by writing a new lexer for chars rather than using Parsec's\n   built-in charLiteral
  lexer. But I haven't done that.\n\nTypechecking all the GHC libraries eats about
  a gig of heap and takes a\nlong time. I blame Parsec. (Someone who was bored, or
  understood happy\nbetter than I do, could update the old happy parser, which is
  still in the\nrepo.)\n\nThe interpreter is also memory-hungry, but works for small
  programs\nthat only do simple I/O (e.g., putStrLn is okay; not much more than that)\nand
  don't use Doubles or arrays. For example: exp3_8, gen_regexps, queens,\nprimes,
  rfib, tak, wheel-sieve1, and wheel-sieve2, if modified so as not\nto take input
  or arguments.\n\n\n\n"
description-type: text
hash: 48c177c3fb3ad30a66173a883986aa8d1701b661a389ded26f8b746113cc4a54
homepage: ''
latest: 1.0.2
license-name: BSD-3-Clause
maintainer: Tim Chevalier <chevalier@alum.wellesley.edu>
synopsis: Libraries for processing GHC Core
test-bench-deps: {}
