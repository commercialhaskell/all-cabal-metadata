all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- '0.2'
- '0.3'
- '0.4'
- '0.5'
author: Jakub Daniel
basic-deps:
  base: '>=4.9 && <4.13'
  containers: '>=0.5 && <0.7'
  expressions: '>=0.5 && <0.6'
  list-t: '>=1.0 && <1.1'
  singletons: '>=2.2 && <2.6'
  transformers: '>=0.5.2 && <0.6'
  z3: '>=4.1.2 && <4.4'
changelog: |
  # Revision history for expressions-z3

  ## 0.4

  * Bump dependencies

  ## 0.3

  * Bump dependencies

  ## 0.2

  * Bump dependencies

  ## 0.1.6

  * Bump dependencies

  ## 0.1.5

  * Z3 API

  ## 0.1.4

  * Bump dependencies

  ## 0.1.3

  * Bump dependencies

  ## 0.1.2

  * Bump dependencies

  ## 0.1.1

  * Bump dependencies

  ## 0.1.0

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |-
  A simple interface for converting expressions back and forth between pure
  representation and an AST within a Z3 context.

  Assume

  > λ> :m + Control.Monad Data.Expression Data.Expression.Z3 Z3.Monad Data.Singletons
  > λ> :t f
  > f :: MonadZ3 z3 => AST -> z3 AST

  Then

  > λ> let g :: ( MonadZ3 z3, IFromZ3 f, IToZ3 f, SingI s ) => IFix f s -> z3 (IFix f s); g = fromZ3 <=< f <=< toZ3
  > λ> :t g (var "a" :: Lia 'BooleanSort)
  > g (var "a" :: Lia 'BooleanSort) :: MonadZ3 z3 => z3 (Lia 'BooleanSort)

  For example

  > λ> let f b = mkStringSymbol "a" >>= mkIntVar >>= toApp >>= \a' -> mkForallConst [] [a'] b
  > λ> let g :: ( MonadZ3 z3, IFromZ3 f, IToZ3 f ) => IFix f 'BooleanSort -> z3 (IFix f 'BooleanSort); g = fromZ3 <=< g <=< toZ3
  > λ> evalZ3 $ g (var "a" .+. cnst 1 .=. var "b" :: Lia 'BooleanSort)
  > (forall ((a : int)) (= (+ 1 (a : int)) (b : int)))

  Or more interestingly

  > λ> :{
  > |  let f :: ( MonadZ3 z3, IFromZ3 f, IToZ3 f, SingI s ) => IFix f s -> z3 (IFix f s)
  > |      f a = do
  > |      a' <- toZ3 a
  > |      r <- getModel
  > |      case r of
  > |          (Sat, Just m) -> do
  > |              v <- modelEval m a' True
  > |              case v of
  > |                Just v' -> fromZ3 v'
  > |                _ -> error "..."
  > |          _ -> error "..."
  > :}
  > λ> evalZ3 $ f (var "a" :: Lia 'BooleanSort)
  > false
  > λ> evalZ3 $ f (var "a" :: Lia 'IntegralSort)
  > 0
  > λ> evalZ3 $ f (var "a" .+. cnst 1:: Lia 'IntegralSort)
  > 1
description-type: haddock
hash: 599b7dc2010c0c3a089438d64a87799391d903c1272a48d8d3bf3b46a07b671d
homepage: ''
latest: '0.5'
license-name: BSD-3-Clause
maintainer: jakub.daniel@protonmail.com
synopsis: Encode and Decode expressions from Z3 ASTs
test-bench-deps:
  base: '>=0'
  containers: '>=0'
  expressions: '>=0'
  expressions-z3: '>=0'
  singletons: '>=0'
  transformers: '>=0'
  z3: '>=0'
