all-versions:
- 0.5.0.0
- 1.0.1.0
- 1.1.0.0
- 1.2.0.0
- 1.3.0.0
- 1.4.0.0
- 1.5.0.0
- 1.5.0.1
- 1.6.0.0
- 1.6.0.1
- 1.6.0.2
- 1.6.1.0
- 1.6.1.1
- 1.7.0.0
author: Torsten Schmits
basic-deps:
  base: '>=4.16.4.0 && <4.20'
  ghc: '>=9.2.8 && <9.9'
  incipit-base: '>=0.5.0.0 && <0.7'
  parsec: '>=3.1.15.0 && <3.2'
  template-haskell: '>=2.18.0.0 && <2.22'
changelog: |
  # 1.6.0.0

  * Replace `flatparse` with `parsec` for less friction when updating GHC.

  # 1.5.0.0

  * Use `exonProcess` for `intercalate`
  * Add `intercalate1` for `NonEmpty`

  # 1.2.0.0

  * Add class `ExonExpression`, allowing customization of how interpolated expressions are converted to builders.
    The method `exonExpression` is provided with the function `exonBuilder` as an argument to avoid having to depend on
    the class manually.
  * Change multi-method classes to use the default-method implementation style for the overlappable instance.

  # 1.1.0.0

  * Add `exonConcat` to `ExonAppend`. The function is pulled out of `exonBuild` to allow using a different way of folding
    the segment list.

  # 1.0.0.0

  * Rewrite the main logic, splitting it across multiple classes.
  * Automatically unwrap `Generic` newtype segments.
  * Use builders like `Text.Builder`, unwrapping `Generic` newtypes of the result type.
  * Don't treat whitespace as special in the default quoter.

  # 0.2.0.0

  * Add `exonws`, a variant that preserves whitespace.
  * Add `exonWith`, a constructor for custom quasiquoters.

  # 0.1.1.0

  * Add `Exon` instance for `String -> String`, used by `showsPrec`.
changelog-type: markdown
description: |
  This Haskell library provides string interpolation in quasiquotes, allowing you to build strings like this:

  ```haskell
  animal = "snake"
  location = "a tree"
  [exon|#{animal} in #{location}|]
  -- "snake in a tree"
  ```

  Each step of the process is customizable based on the result type of the quote, making it possible to construct strings
  for arbitrary types.
  For example, `String -> String` is the type used by `showsPrec`, which can be a bit of a hassle to write:

  ```haskell
  data Record =
    Record {
      number :: Int,
      maybeNumber :: Maybe Int,
      value :: Value
    }

  instance Show Record where
    showsPrec d Record {..} =
      showParen (d > 10) [exon|Record #{showsPrec 11 number} #{showsPrec 11 maybeNumber} #{showsPrec 11 value}|]
  ```

  [hackage]: https://hackage.haskell.org/package/exon/docs/Exon.html
description-type: markdown
hash: f25b3ccd06bd772e15f4a7f803e4f42ab9f7a6300b9c6908f36f69ef58766aaf
homepage: https://github.com/tek/exon#readme
latest: 1.7.0.0
license-name: BSD-2-Clause-Patent
maintainer: hackage@tryp.io
synopsis: Customizable quasiquote interpolation
test-bench-deps:
  base: '>=4.16.4.0 && <4.20'
  criterion: '>=1.5.11.0 && <1.7'
  exon: '>=0'
  hedgehog: '>=1.1 && <1.5'
  incipit-base: '>=0.5.0.0 && <0.7'
  tasty: '>=1.4.0.3 && <1.5'
  tasty-hedgehog: '>=1.1.0.0 && <1.5'
  template-haskell: '>=2.18.0.0 && <2.22'
