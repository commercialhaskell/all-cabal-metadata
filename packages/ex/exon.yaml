homepage: https://github.com/tek/exon#readme
changelog-type: markdown
hash: de5f1d2777c8ace594259de2868ee1a3a5d42964b51acc7c033507901a30faf2
test-bench-deps:
  exon: -any
  base: ==4.*
  tasty-hedgehog: '>=1.3 && <1.5'
  incipit-base: '>=0.4 && <0.6'
  criterion: '>=1.5 && <1.7'
  hedgehog: '>=1.1 && <1.3'
  tasty: ==1.4.*
  template-haskell: -any
maintainer: hackage@tryp.io
synopsis: Customizable quasiquote interpolation
changelog: |
  # 1.6.0.0

  * Replace `flatparse` with `parsec` for less friction when updating GHC.

  # 1.5.0.0

  * Use `exonProcess` for `intercalate`
  * Add `intercalate1` for `NonEmpty`

  # 1.2.0.0

  * Add class `ExonExpression`, allowing customization of how interpolated expressions are converted to builders.
    The method `exonExpression` is provided with the function `exonBuilder` as an argument to avoid having to depend on
    the class manually.
  * Change multi-method classes to use the default-method implementation style for the overlappable instance.

  # 1.1.0.0

  * Add `exonConcat` to `ExonAppend`. The function is pulled out of `exonBuild` to allow using a different way of folding
    the segment list.

  # 1.0.0.0

  * Rewrite the main logic, splitting it across multiple classes.
  * Automatically unwrap `Generic` newtype segments.
  * Use builders like `Text.Builder`, unwrapping `Generic` newtypes of the result type.
  * Don't treat whitespace as special in the default quoter.

  # 0.2.0.0

  * Add `exonws`, a variant that preserves whitespace.
  * Add `exonWith`, a constructor for custom quasiquoters.

  # 0.1.1.0

  * Add `Exon` instance for `String -> String`, used by `showsPrec`.
basic-deps:
  ghc: -any
  base: ==4.*
  incipit-base: '>=0.4 && <0.6'
  parsec: -any
  template-haskell: -any
all-versions:
- 0.5.0.0
- 1.0.1.0
- 1.1.0.0
- 1.2.0.0
- 1.3.0.0
- 1.4.0.0
- 1.5.0.0
- 1.5.0.1
- 1.6.0.0
author: Torsten Schmits
latest: 1.6.0.0
description-type: markdown
description: |
  This Haskell library provides string interpolation in quasiquotes, allowing you to build strings like this:

  ```haskell
  animal = "snake"
  location = "a tree"
  [exon|#{animal} in #{location}|]
  -- "snake in a tree"
  ```

  Each step of the process is customizable based on the result type of the quote, making it possible to construct strings
  for arbitrary types.
  For example, `String -> String` is the type used by `showsPrec`, which can be a bit of a hassle to write:

  ```haskell
  data Record =
    Record {
      number :: Int,
      maybeNumber :: Maybe Int,
      value :: Value
    }

  instance Show Record where
    showsPrec d Record {..} =
      showParen (d > 10) [exon|Record #{showsPrec 11 number} #{showsPrec 11 maybeNumber} #{showsPrec 11 value}|]
  ```

  [hackage]: https://hackage.haskell.org/package/exon/docs/Exon.html
license-name: BSD-2-Clause-Patent
