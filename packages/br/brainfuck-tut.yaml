all-versions:
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.6.0.0
- 0.6.0.1
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
author: Allele Dev
basic-deps:
  array: '>=0'
  base: '>=4.7 && <5'
  brainfuck-tut: '>=0'
changelog: |
  0.7.0.0

  * added support for '?' command
      * this breaks compatibility with programs that use ? as a comment
        character

  0.6.0.1

  * update the changelog

  0.6.0.0

  * fix: jump logic now respects nesting

  0.5.1.3

  * Add changelog

  0.5.1.2

  * Add homepage, issue tracker, project repo

  0.5.1.1

  * Fix documentation formatting issues

  0.5.1.0

  * Initial release
changelog-type: markdown
description: |
  # Brainfuck: A Toy Implementation

  This project exists to show what a
  [Brainfuck](http://en.wikipedia.org/wiki/Brainfuck) evaluator might
  look like in Haskell.

  The implementation is fairly well documented. I endeavored to make it
  readable.

  ## Terms

  Below is the abstract syntax tree for the BF language as implemented:

  ```haskell
  data Term
    = IncDP        -- >
    | DecDP        -- <
    | OutDP        -- ?
    | IncByte      -- +
    | DecByte      -- -
    | OutByte      -- .
    | InByte       -- ,
    | JumpForward  -- [
    | JumpBackward -- ]
    deriving (Show, Eq)
  ```

  ## Evaluation Semantics

  I followed the summary given on the wikipedia page closely. A few
  particulars to this implementation:

  * "Jump not found" errors abort evaluation and return the state of the tape
  * Out of bound errors are not detected
  * Evaluation proceeds until the instruction stream runs out

  ## Executable

  An executable is provided:

  ```
  $ cabal build bfh
  $ cabal run bfh
  usage: bfh <size> <program>
  $ cabal run bfh 10 ',.'
  a<enter>
  a
  ```
description-type: markdown
hash: dc487c25613b4c497282465170863f63529c690f21ab8687d05bb6041f8f9de8
homepage: https://gitlab.com/queertypes/brainfuck-tut
latest: 0.7.0.2
license-name: BSD-3-Clause
maintainer: allele.dev@gmail.com
synopsis: A simple BF interpreter.
test-bench-deps: {}
