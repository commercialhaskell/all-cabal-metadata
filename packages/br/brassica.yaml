all-versions:
- 0.0.3
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 1.0.0
author: Brad Neimann
basic-deps:
  aeson: '>=2.2 && <2.3'
  attoparsec-aeson: ^>=2.2
  base: '>=4.7 && <5'
  brassica: '>=0'
  bytestring: '>=0.10 && <0.13'
  conduit: '>=1.3 && <1.4'
  conduit-extra: ^>=1.3
  containers: '>=0.6 && <0.7'
  deepseq: '>=1.4 && <1.6'
  fast-myers-diff: ==0.0.0
  megaparsec: '>=8.0 && <9.7'
  mtl: '>=2.2 && <2.4'
  optparse-applicative: '>=0.17.1 && <0.19'
  parallel: ^>=3.2
  parser-combinators: '>=1.2 && <1.3'
  split: '>=0.2 && <0.3'
  text: '>=1.2 && <2.3'
  transformers: '>=0.5 && <0.7'
  vector: '>=0.13 && <0.14'
changelog: "# Brassica changelog\n\n## 1.0.0\n\n### Behaviour\n\n(Note: breaking changes
  are boldfaced.)\n\n- Bugfixes:\n  - Etymologies are now added in all situations
  when processing an MDF file\n  - Desktop version correctly warns about unsaved changes
  when opening a file\n  - Rules such as `[p f] / [f h] / (a) _ #` are no longer applied
  twice to the same grapheme\n      (as a consequence of changes to rule application,
  see below)\n  - `noreplace` categories now tokenise multigraphs as expected\n- Documentation
  (user guides and Haddocks) have been comprensively rewritten\n- ‘Tonogenesis’ example
  has been replaced by ‘Thai’ example\n- New support for phonetic features:\n  - Features
  can be written as maximal `$name#ident(values)` after another lexeme\n  - Categories
  named `+Feature`, `-Feature` and `+Feature+Value`\n      get special interpretation
  with intersections and subtractions\n  - New category syntax: `&` before category
  name forces union interpretation\n      even for category names beginning with `+`/`-`\n
  \ - Change to category syntax: first element of category is always interpreted as
  union\n      (**technically a breaking change**, but unlikely in existing sound
  changes)\n  - Syntax `&Feature` after set operation (`&`/`+`/`-`) to include both
  `-Feature` and `+Feature`\n      (i.e. all graphemes with a setting for that feature)\n
  \ - Declaration `auto <FeaturalCategory>` in category definition block\n      can
  be used to treat said feature autosegmentally\n      whenever a grapheme in the
  selected category is mentioned\n- Other changes to sound change syntax:\n  - `report`
  directive allows for reporting intermediate results in input→output mode\n  - Graphemes
  followed by `~` are now allowed inside a category block,\n      but **disallowed
  in category names and in `extra` declarations** (where they would be meaningless)\n
  \ - **Category intersection now produces a category with graphemes\n      in the
  same order as the last category mentioned, rather than the first**\n  - Optional
  elements or categories can now be prefixed by `%` to make them match greedily\n
  \ - New backreference syntax `@#id` allows categories to be matched by ID rather
  than number\n  - `extra` graphemes are now always taken into account for multigraph
  tokenisation\n      (**technically a breaking change**, but unlikely in existing
  sound changes)\n  - Within a category, single graphemes inside braces are now treated
  the same as single graphemes outside braces\n      (**technically a breaking change**,
  but unlikely to change existing sound changes)\n- Changes to rule application algorithm:\n
  \ - **Sound change applications can now overlap,\n      such that the replacement
  from one application can be used as the environment for the next**\n  - New flag
  `-no` allows for reverting to the previous behaviour (non-overlapping applications)\n
  \ - **Make RTL and LTR application symmetric,\n      by reimplementing the former
  as LTR application with words and rules reversed:\n      consequently category correspondences,
  backreferences etc. are also reversed**\n- Improvements to graphical interface:\n
  \ - Whitespace is now preserved when displaying sound change output on desktop and
  web\n  - New keyboard shortcuts in desktop GUI:\n      Ctrl+Enter to apply rules,
  Ctrl+Tab to toggle between rules and words textboxes\n  - Some labels have been
  changed to be more descriptive:\n    ‘Different to input’ to ‘Any rule applied’,
  and ‘Wordlist’ to ‘Wordlist + glosses’\n  - Improvements to output from ‘Report
  rules apply’: most importantly,\n    comments are no longer included next to rules,
  and\n    outputs are no longer aligned across input words (greatly increasing responsiveness
  on desktop)\n  - User can now choose which MDF hierarchy to use for dictionaries\n
  \ - Web version brought closer to parity with desktop version\n      by adding MDF
  support and an option to ‘synchronise scroll positions’\n  - When ‘view results
  live’ is selected, results are updated on changes to all controls,\n      not just
  changes to words or sound changes\n  - Add ‘Edit’ menu to desktop GUI, including
  ‘Find’ dialog box\n  - Add ‘Help’ menu to desktop GUI\n  - Fields of web GUI can
  now be initialised using URL query parameters\n    (`r` for rules, `w` for words)\n
  \ - Add ‘select all’ buttons to web GUI\n  - Improve display of web application
  controls on small screens\n  - Sound changes editor on web version has been rewritten
  to work around bug with combining diacritics\n  - Add option for ‘input→output’
  display format to include glosses and whitespace\n\n### Code\n\n- CMakeLists for
  desktop GUI now track Haskell binary dependency correctly\n- Renamed `Brassica.SoundChange.Category`
  to `Brassica.SoundChange.Expand`\n- Renamed constructor `Brassica.SoundChange.Types.DirectiveS`
  to `Brassica.SoundChange.Types.DeclS` \n- Changes resulting from addition of `report`:\n
  \ - New constructor `ReportS` added to `Brassica.SoundChange.Types.Statement`\n
  \ - A constructor `ReportWord` has been added to `Brassica.SoundChange.Apply.Internal.LogItem`,\n
  \     while its former record fields `input` and `output` have been replaced with
  functions\n      `logInput` and `logOutput`.\n  - `Brassica.SoundChange.Frontend.Internal`
  has been restructured to allow display of intermediate results\n  - New function
  `Brassica.SoundChange.Tokenise.joinComponents` added to assist with said restructure\n-
  Changes resulting from addition of features:\n  - New constructors `Feature` and
  `Autosegment` added to `Brassica.SoundChange.Types.Lexeme`\n    (the latter primarily
  for internal use)\n  - New type `Brassica.SoundChange.Apply.Internal`\n  - New constructor
  `DefineAuto` added to `Brassica.SoundChange.Types.CategoryDefinition`\n  - Changes
  in category expansion:\n      new type `Brassica.SoundChange.Expand.AutosegmentDef`,\n
  \     and new constructor `InvalidDerivedValue`\n        added to `Brassica.SoundChange.Expand.ExpandError`\n-
  Changes resulting from new rule application algorithm:\n  - New constructore `PrevEnd`
  added to `Brassica.SoundChange.Apply.Internal.RuleTag`\n  - New field `nonOverlappingTarget`
  added to `Brassica.SoundChange.Types.Flags`\n- New constructors `GreedyOptional`
  and `GreedyCategory` for `Brassica.SoundChange.Types.Lexeme`\n- `Brassica.SoundChange.Frontend.Internal.InputLexiconFormat`\n
  \   now depends on new type `Brassica.SoundChange.Frontend.Internal.MDFHierarchy`\n-
  Word boundaries are now simply ordinary graphemes `\"#\"`:\n    `Brassica.SoundChange.Types.Grapheme`
  is now a type synonym for `[Char]`\n- Expansion now results in sound changes with
  declaration type `GraphemesList`\n    rather than `[Grapheme]`\n- API of `Brassica.SoundChanges.Apply`
  (and `Brassica.SoundChanges.Apply.Internal`) has been refactored:\n  - `LogItem`
  (now re-exported from `Brassica.SoundChanges.Apply`)\n      no longer stores redundant
  information on input words\n  - `PWordLog` is renamed `Log`, and is now based on
  `LogItem`\n  - `initialWord` is now renamed `inputWord`\n  - Former functions `applyRule`
  and `applyStatement`\n      have been renamed to `applyRuleMZ` and `applyStatementMZ`;\n
  \ - Former functions `applyRuleWithLogs` and `applyStatementWithLog`\n      have
  been renamed to `applyRule` and `applyStatement`\n  - Function `applyRuleWithLog`
  has been removed\n  - Set of sound change application functions `applyChanges*`\n
  \     has been replaced with a single function `applyChanges` returning a `PWordLog`,\n
  \     plus a set of functions to extract various outputs from it\n- New constructor
  `WordsWithProtoOutputPreserve` for `Brassica.SoundChange.Frontend.Internal.OutputMode`\n-
  Remove now-unnecessary pattern `Brassica.SoundChange.Types.Boundary`\n- In parsing
  modules, re-export whole module `Text.Megaparsec.Error`\n    rather than only re-exporting
  the single function `errorBundlePretty`\n- Category elements are now represented
  as simply `[Lexeme category a]`\n    (synonym `Brassica.SoundChanges.Types.CategoryElement`),\n
  \   without any special case for single-grapheme elements\n- `concatWithBoundary`
  is now no longer re-exported from `Brassica.SoundChange.Tokenise`\n\n## 0.3.0\n\n###
  Behaviour\n\n- Bugfix: nested categories are now matched up correctly between target
  and replacement\n- Bugfix: Brassica no longer freezes with rules where the target
  is entirely optional\n- Bugfix: Brassica no longer crashes when a rule refers to
  nonexistent categories\n- Wildcard symbols can now be used in the replacement of
  a rule\n- Brassica now applies sound changes to words in parallel, giving a significant
  speedup on multi-core machines (though not in a webpage)\n- New `extra` directive
  allows specifying characters which should never be replaced through all category
  redefinitions\n- Improved placement of etymologies in MDF output\n- Target and replacement
  can now be separated by `->`\n- New `filter` directive allows removing unwanted
  results\n- An improved heuristic for avoiding infinite loops in epenthesis rules,\n
  \   such that e.g. `/h/a_a` yields `aaaa`→`ahahaha` rather than previous unexpected
  *`ahaaha`\n- New `-??` flag to allow for per-occurrence sporadicity\n- `categories`
  directive can now be specified `noreplace`\n    to prevent replacement of unknown
  graphemes with U+FFFD (�)\n- Improved method for highlighting words ‘different to
  last run’\n    (now using the Myers diff algorithm)\n- Added syntax highlighting
  for flags\n- Sound change rules can now be specified on the command-line using new
  `--eval` or `-e` flag\n- Add CLI option to highlight words different to input\n-
  Currently open files shown in title of desktop window\n- Desktop application warns
  when closing with unsaved changes\n- Improve user interface for file management
  in desktop paradigm builder\n- New CLI for paradigm builder: program name `brassica-pb`\n\n###
  Code\n\n- `optparse-applicative` lower bound tightened to 0.17.1\n- Bugfix: `Brassica.SoundChange.Apply.applyRuleStr`
  is no longer seriously broken\n- `Brassica.SoundChange.Apply.Internal.applyOnce`
  now returns a `RuleStatus` value with more detailed information about the rule application,
  which is now used by `Brassica.SoundChange.Apply.Internal.setupForNextApplication`\n-
  `Wildcard` and `Kleene` no longer have `OneOf 'Target 'Env` constraint\n- `OneOf`
  type family is no longer used and has been removed\n- `Target` and `Environment`
  `LexemeType`s have been unified as `Matched`\n- `Brassica.SoundChange.Frontend.Internal.parseTokeniseAndApplyRules`
  now takes another argument specifying how to map over the parse output,\n    allowing
  it to be run both on a single core and in parallel depending on the provided function\n-
  `Brassica.SoundChange.Types.Directive` has a new constructor `ExtraGraphemes` for
  the `extra` directive, with corresponding changes in parsing and expansion\n- `Brassica.SoundChange.Category.extend`
  has been renamed to `extendCategories`, and now requires pattern-matching on a `Categories`
  directive before use\n- `Brassica.SoundChange.Frontend.Internal.parseTokeniseAndApplyRules`
  no longer implements rule expansion,\n   allowing it to take place only once without
  needing to be repeated for each rule application.\n- MDF support has been comprehensively
  rewritten:\n  - `Brassica.MDF` has been removed\n  - New module `Brassica.SFM.SFM`
  implements generic support for SIL Standard Field Marker hierarchies\n  - New module
  `Brassica.SFM.MDF` describes the standard and alternate MDF hierarchies,\n    and
  other necessary utilities for working with MDF documents\n  - Some rewrites to `Brassica.SoundChange.Frontend.Internal`
  to account for the new architecture\n- New type `Brassica.SoundChange.Types.Filter`,
  resulting in other changes:\n  - New `FilterS` constructor added to `Brassica.SoundChange.Types.Statement`\n
  \ - `LogItem` and `PWordLog` (in `Brassica.SoundChange.Apply.Internal`) now use
  `Maybe PWord`\n    to show cases where a word was deleted\n  - Corresponding changes
  to parsing, expansion and application\n- Rule sporadicity is now represented by
  a dedicated type, `Brassica.SoundChange.Types.Sporadicity`\n- `Categories` constructor
  (in `Brassica.SoundChange.Types.Directive`)\n    now has an extra field for `noreplace`
  directive\n- Add useful function `Brassica.Paradigm.Apply.depth`\n\n## v0.2.0\n\n-
  Allow grapheme to begin with star\n- Allow lexeme sequences in categories using
  `{…}` syntax\n- Allow backreferences to occur in the environment\n- Allow user to
  choose separator used between multiple results (previously a space)\n- Internal
  refactor: category expansion is now separate from parsing\n- Add `--version` command-line
  option\n- Store `MultiZipper` data in a `Vector` rather than a linked list (for
  performance)\n- Bugfix: subtraction now removes all subtracted graphemes\n- Store
  paradigm builder output in a tree data structure, allowing a more compact output
  format\n- Documented abstract features in paradigm builder (previously present but
  undocumented)\n\n## v0.1.1\n\n- Rewrote executables with a client/server architecture
  for better Windows support.\n  The library remains unchanged.\n\n## v0.1.0\n\n-
  Add new syntax with `#` in lexicon to create word boundaries which can be manipulated
  by sound changes\n- Web interface greatly improved using WebAssembly\n- Allow synchronising
  scroll positions in GUI between input and output textboxes\n- Add timeout to desktop
  GUI to abort long-running computations\n- Allow category backreferencing with `@n`
  before category\n- Allow forcing nondeterminism with `@?` before category\n- Add
  ‘input→output’ format for output words\n- Change default output format for MDF input
  to wordlist in CLI\n- Add ‘or environments’ with syntax ‘target / replacement /
  env1 / env2 / env3 / …’.\n  Former rule exceptions with similar syntax have been
  changed to syntax ‘target / replacement / env // exception’.\n- Improve documentation\n"
changelog-type: markdown
description: |
  # Brassica

  [![Hackage](https://img.shields.io/hackage/v/brassica.svg?logo=haskell)](https://hackage.haskell.org/package/brassica)

  Brassica is a sound change applier: a program to simulate the evolution of language over time.

  Brassica’s features include:

  - A choice of four different platforms: you can use Brassica interactively [online](https://bradrn.com/brassica/index.html) or as a standalone application,
      non-interactively on the command-line, or as a [Haskell library](https://hackage.haskell.org/package/brassica)
  - Being well-tested, including several automated test suites, as well as example files with sound changes from natural languages
  - First-class support for suprasegmental features, such as stress and tone
  - Easy control over rule application: apply sound changes iteratively, sporadically, right-to-left, between words, and in many more ways
  - Native support for the MDF dictionary format, also used by tools including [SIL Toolbox](https://software.sil.org/toolbox/) and [Lexique Pro](https://software.sil.org/lexiquepro/)
  - A comprehensive user interface with live preview and highlighting for both sound changes and output
  - Comes with a [paradigm builder](https://bradrn.com/brassica/builder.html) for quickly investigating inflectional and other patterns

  And many more!

  See the [documentation](./docs) for details on Brassica usage,
    and the [example files](./examples) for examples of practical usage.

  Download Brassica from the [releases page](https://github.com/bradrn/brassica/releases/latest).
  Alternately, try it online at http://bradrn.com/brassica.
  As of the time of writing prebuilt binaries exist for Windows and Linux.
  Instructions for building from source are available at [`BUILDING.md`](./BUILDING.md).

  ![Image of Brassica with some example sound changes](./docs/screenshot.png)
description-type: markdown
hash: b1cc602f6db767c4346d3e62d19e20fecb7d0d847ddfce87c6dd36e542c46190
homepage: https://github.com/bradrn/brassica#readme
latest: 1.0.0
license-name: BSD-3-Clause
maintainer: Brad Neimann
synopsis: Featureful sound change applier
test-bench-deps:
  base: '>=4.7 && <5'
  brassica: '>=0'
  bytestring: '>=0'
  conduit: ^>=1.3
  criterion: '>=1.5 && <1.7'
  file-embed: '>=0.0.15 && <0.0.16'
  pandoc: '>=3.3 && <3.4'
  pandoc-types: '>=1.23 && <1.24'
  parallel: ^>=3.2
  tasty: '>=1.4 && <1.5'
  tasty-golden: ^>=2.3
  text: '>=1.2 && <2.3'
  transformers: '>=0.5 && <0.7'
  utf8-string: ^>=1.0
