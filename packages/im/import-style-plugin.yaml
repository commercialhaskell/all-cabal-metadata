all-versions:
- 0.1.0.0
author: goosedb
basic-deps:
  aeson: '>=0'
  base: '>=4.11 && <4.20'
  containers: '>=0'
  ghc: '>=9.2 && <9.10'
  yaml: '>=0'
changelog: ''
changelog-type: markdown
description: "# Import style GHC plugin\n\nThe plugin helps to unify imports style
  via compile warnings/errors\n\nTested with:\n  * 9.2.7\n  * 9.4.8\n  * 9.6.4\n  *
  9.8.2\n\n## Usage\n\n### Yaml config\n#### Enable plugin in your cabal file:\n```cabal\n
  \ build-depends: ..., import-style-plugin, ...\n\n  ghc-options: -fplugin ImportStylePlugin.Yaml
  -fplugin-opt ImportStylePlugin.Yaml:<path-to-config>\n```\n#### Write config:\n\n```yaml\nqualificationStyle:
  Post | Pre | null\n\nbannedModules: # can be null\n  Module.Name:\n    severity:
  Error | Warning\n    why: string with ban reason\n\nimportRules: # can be null\n
  \ DataModuleName:\n    severity: Error | Warning\n    rules:\n      - qualification:
  Required | Forbidden | null\n        aliases:\n          # Either `exactly`, so
  alias can't be omitted \n          exactly:\n            - Module.Alias\n            -
  Alias\n          # or just list, so alias can be omitted\n          - Module.Alias\n
  \         - Alias\n          # or null\n        importedNames:\n          # Either
  whitelist, so import should be \n          # accompanied with explicit import list
  \n          whitelist:\n            - pattern (:|>) \n            - type (+)\n            -
  foo\n          # or blacklist, so import should be \n          # accompanied with
  explicit hiding list with all these names\n          # or explicit import list shouldn't
  contain any of these names \n          blacklist:\n            - pattern (:|>) \n
  \           - type (+)\n            - foo\n          # or null\n```\n#### Here is
  example:\n```yaml\nqualificationStyle: Post\n\nbannedModules:\n  # Forbids Data.Map
  at all\n  Data.Map:\n    severity: Error\n    why: Use 'Data.Map.Strict'\n\nimportRules:\n
  \ # Either\n  # import Data.Text (Text)\n  # or\n  # import Data.Text qualified
  as Text\n  Data.Text:\n    severity: Warning\n    rules:\n      - qualification:
  Required\n        aliases:\n          exactly: \n            - Text\n\n      - qualification:
  Forbidden\n        importedNames:\n          whitelist: \n            - Text\n```\n###
  Derived plugin\nIt can be useful if you have a lot of projects with one style. So
  you haven't to copy paste config but just use _style_ as library\n\n  1. Create
  library package\n  2. Add to deps `import-style-plugin`\n  3. Create module `YourPlugin.hs`
  (or something like that, it's unimportant)\n  4. Put there \n      ```haskell\n
  \     module YourPlugin where\n      \n      import ImportStylePlugin.Derived qualified
  as Derived\n      import ImportStylePlugin.Config as Cfg\n\n      -- variable name
  `plugin` IS important\n      -- Configure your style with Haskell types from `ImportStylePlugin.Config`\n
  \     plugin = Derived.plugin\n        ImportsStyle\n          { qualificationStyle
  = ...\n          , bannedModules = ...\n          , importRules = ... \n          }\n
  \     ```\n  5. Plug in\n      ```cabal\n        build-depends: ..., your-import-style-plugin,
  ...\n\n        ghc-options: -fplugin YourPlugin\n      ```\n## Tips\n### Custom
  warning\nSince ghc-9.8 the plugin introduces custom warning `x-import-style`. So
  if you set `-Werror` but still want to style warnings be warnings use ghc option
  `-Wwarn=x-import-style`. You also can disable at all warnings with `-Wno-x-import-style`"
description-type: markdown
hash: 6872516c788370f68bc1cdd76f7e3f1d2e6823f83249afc7c46b32552b316884
homepage: https://github.com/goosedb/import-style-plugin
latest: 0.1.0.0
license-name: MIT
maintainer: goosedb@yandex.ru
synopsis: Helps maintain consistency of imports
test-bench-deps: {}
