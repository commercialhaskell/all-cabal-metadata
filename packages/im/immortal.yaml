all-versions:
- '0.1'
- '0.2'
- 0.2.2
- 0.2.2.1
- '0.3'
author: Roman Cheplyaka
basic-deps:
  base: '>=4.5 && <5'
  stm: '>=0'
  unliftio-core: '>=0.1.1.0'
changelog: |
  CHANGES
  =======

  Version 0.3
  -----------

  Replace monad-control with unliftio-core.
  As a result, immortal will no longer work with stateful monads like StateT,
  which is considered a feature.

  Version 0.2.2.1
  ---------------

  Fix the README

  Version 0.2.2
  -------------

  Add `onUnexpectedFinish`

  Version 0.2.1
  -------------

  Add `wait` and `wait-stm` functions

  Version 0.2
  -----------

  * Pass a `Thread` handle to the thread itself
  * Add `mortalize`, `immortalize`
changelog-type: markdown
description: |
  immortal
  ========

  A small library to create threads that never die. This is useful e.g. for
  writing servers.

  ``` haskell
  import qualified Control.Immortal as Immortal
  import Control.Concurrent (threadDelay)
  import Control.Monad (forever)

  main = do
    -- start an immortal thread
    _thread <- Immortal.create $ \ _thread -> do
      -- do stuff

    -- in the main thread, sleep until interrupted
    -- (e.g. with Ctrl-C)
    forever $ threadDelay maxBound
  ```
description-type: markdown
hash: a84c83c876fac7e45548f713db4b5c10ea4ad73a75978b8bc354f79313bd6754
homepage: https://github.com/feuerbach/immortal
latest: '0.3'
license-name: MIT
maintainer: roma@ro-che.info
synopsis: Spawn threads that never die (unless told to do so)
test-bench-deps:
  base: '>=4 && <5'
  immortal: '>=0'
  stm: '>=0'
  tasty: '>=0.8'
  tasty-hunit: '>=0'
  transformers: '>=0'
