homepage: https://github.com/fpclass/iterative-forward-search#readme
changelog-type: markdown
hash: d3d09f38128d5b116babe398cf64e233063920167bee3d186a7ed38133ec5512
test-bench-deps:
  fingertree: <0.2
  base: '>=4.7 && <5'
  time: <1.10
  unordered-containers: <0.3
  criterion: <1.6
  containers: <0.7
  hashable: <1.4
  iterative-forward-search: -any
  transformers: <0.6
  random: <1.2
  deepseq: <1.5
maintainer: m.gale@warwick.ac.uk
synopsis: An IFS constraint solver
changelog: |
  # Changelog

  ## 0.1.0.0

  Initial Release
basic-deps:
  fingertree: <0.2
  base: '>=4.7 && <5'
  time: <1.10
  unordered-containers: <0.3
  containers: <0.7
  hashable: <1.4
  transformers: <0.6
  random: <1.2
  deepseq: <1.5
all-versions:
- 0.1.0.0
author: Michael B. Gale and Oscar Harris
latest: 0.1.0.0
description-type: markdown
description: "# Iterative Forward Search\n\n![MIT](https://img.shields.io/github/license/fpclass/iterative-forward-search)\n[![CI](https://github.com/fpclass/iterative-forward-search/actions/workflows/haskell.yaml/badge.svg)](https://github.com/fpclass/iterative-forward-search/actions/workflows/haskell.yaml)\n[![stackage-nightly](https://github.com/fpclass/iterative-forward-search/actions/workflows/stackage-nightly.yaml/badge.svg)](https://github.com/fpclass/iterative-forward-search/actions/workflows/stackage-nightly.yaml)\n[![iterative-forward-search](https://img.shields.io/hackage/v/iterative-forward-search)](https://hackage.haskell.org/package/iterative-forward-search)\n\nThis
  library implements a contraint solver via the [iterative forward search algorithm](https://muller.unitime.org/lscs04.pdf).
  It also includes a helper module specifically for using the algorithm to timetable
  events.\n\n## Usage\n\nTo use the CSP solver first create a `CSP` value which describes
  your CSP, for example\n```haskell\ncsp :: CSP Solution\ncsp = MkCSP {\n    cspVariables
  = IS.fromList [1,2,3],\n    cspDomains = IM.fromList [(1, [1, 2, 3]), (2, [1, 2,
  4]), (3, [4, 5, 6])],\n    cspConstraints = [ (IS.fromList [1, 2], \\a -> IM.lookup
  1 a != IM.lookup 2 a)\n                     , (IS.fromList [2, 3], \\a -> IM.lookup
  2 a >= IM.lookup 3 a)\n                     ],\n    cspRandomCap = 30, -- 10 * (#
  of variables) is a reasonable default\n    cspTermination = defaultTermination\n}\n```\n\nThis
  example represents a CSP with 3 variables, `1`, `2` and `3`, where variable `1`
  has domain `[1, 2, 3]`, variable `2` has domain `[1, 2, 4]`, and variable `3` has
  domain `[4, 5, 6]`. The contraints are that variable `1` is not equal to variable
  `2`, and variable `2` is at least as big as variable `3`. It uses the default termination
  condition, and performs 30 iterations before we select variables randomly.\n\nYou
  can then find a solution simply by evaluating `ifs csp`, which will perform iterations
  till the given termination function returns a `Just` value.\n\n### Timetabling\n\nThe
  `toCSP` function in `Data.IFS.Timetable` takes a mapping from slot IDs to intervals,
  a hashmap of event IDs to the person IDs involved, and a map of person IDs to the
  slots where they are unavailable and generates a CSP which can then be solved with
  `ifs`. For example:\n\n```haskell\nslotMap :: IntMap (Interval UTCTime)\nslotMap
  = IM.fromList [(1, eventTime1), (2, eventTime2), (3, eventTime3)]\n\nevents :: HashMap
  Int [person]\nevents = HM.fromList [(1, [user1, user2]), (2, [user1])]\n\nunavailability
  :: HashMap person (Set Int)\nunavailability = HM.fromList [(user1, S.empty), (user2,
  S.fromList [1,3])]\n\ncsp :: CSP r\ncsp = toCSP slotMap events unavailability defaultTermination\n```\n\nThis
  will generate a CSP that creates a mapping from the events 1 and 2 to the time slots
  1, 2 and 3. \n\n## Limitations\n\n- Variables and values must be integers\n- Only
  hard constraints are supported\n"
license-name: MIT
