all-versions:
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.3.3
- 0.1.3.4
author: Toshio Ito <debug.ito@gmail.com>
basic-deps:
  base: '>=4.11.1.0 && <4.16'
  fgl: '>=5.6.0.0 && <5.8'
  greskell: '>=1.0.0.0 && <1.3'
  monad-logger: '>=0.3.28.1 && <0.4'
  net-spider: '>=0.4.3.0 && <0.5'
  net-spider-cli: '>=0.2.0.0 && <0.3'
  net-spider-rpl: '>=0.4.0.0 && <0.5'
  net-spider-rpl-cli: '>=0'
  optparse-applicative: '>=0.14.3.0 && <0.17'
  text: '>=1.2.2.2 && <1.3'
  time: '>=1.8.0.2 && <1.10'
  transformers: '>=0.5.5.0 && <0.6'
  unordered-containers: '>=0.2.8 && <0.3'
changelog: |
  # Revision history for net-spider-rpl-cli

  ## 0.1.3.4  -- 2022-01-02

  * Confirm test with `base-4.15`

  ## 0.1.3.3  -- 2020-12-30

  * Confirm test with `greskell-1.2.0.0` and `optparse-applicative-0.16.0.0`

  ## 0.1.3.2  -- 2020-06-21

  * Confirm test with `base-4.13` and `base-4.14`.

  ## 0.1.3.1  -- 2020-04-26

  * Confirm test with `greskell-1.1.0.0`.

  ## 0.1.3.0  -- 2020-04-18

  * Add Analyze module.

  ## 0.1.2.2  -- 2019-12-29

  * Confirm `ip-1.7.0`.

  ## 0.1.2.1  -- 2019-12-28

  * docker-compose.yaml: Upgrade to janusgraph:0.4.0.
  * Require `net-spider-0.4.0.0`, `net-spider-rpl-0.4.0.0` and
    `greskell-1.0.0.0` to support janusgraph:0.4.0.

  ## 0.1.2.0  -- 2019-10-13

  * Add `--duration` option, thanks to `net-spider-cli-0.2.0.0`.
  * Enable `-threaded` to build the executable.

  ## 0.1.1.1  -- 2019-10-04

  * Confirm test with `net-spider-rpl-0.3.0.0`, `ip-1.5.1` and `ip-1.6.0`.

  ## 0.1.1.0  -- 2019-09-23

  * First release.
  * Improve README.
  * Add `--filter` option to `input` command.
  * Add `--year` option to `input` command.
  * Improve debug messages.
  * Now `--starts-from` option is mandatory for `snapshot` command.
  * Now at least one input file is mandatory for `input` command.


  ## 0.1.0.0  -- 2019-09-16

  * Preliminary version. Not released to hackage. Just to test Docker Hub.
changelog-type: markdown
description: |
  # net-spider-rpl-cli

  An executable of [net-spider](https://hackage.haskell.org/package/net-spider) specialized for analyzing [RPL](https://tools.ietf.org/html/rfc6550) networks.

  ## Synopsis

  Here is an example of using the Docker images of this package. You have to install [docker](https://docs.docker.com/install/) and [docker-compose](https://docs.docker.com/compose/) first.

  1. Start the graph database backend (i.e. Gremlin Server).

          $ docker-compose up -d

  2. Clear the entire database.

          $ ./run-net-spider.sh clear

  3. Input logs about RPL networks.

          $ ./run-net-spider.sh input - < syslog

  4. Get a snapshot graph of the RPL network in GraphML format.

          $ ./run-net-spider.sh snapshot --time-to '2019-09-20T10:43:08' --starts-from 'fd00::212:eeaa:0077:2f9c' > snapshot.graphml


  ## Description

  net-spider-rpl-cli is a tool to analyze evolution of an RPL network. It collects "local findings" about the network topology from RPL nodes, and stores those data into a graph database. Then you can query the database to get a "snapshot graph", a network topology at the specified time.

  For general description about net-spider and its terminology, see [net-spider README](https://github.com/debug-ito/net-spider).

  For details on command-line options, run the tool with `--help` option.

  ## Build and install

  net-spider-rpl-cli is a regular Haskell package with an executable. You can install it from [hackage repository](https://hackage.haskell.org/package/net-spider-rpl-cli).

  Or, you can just use [the pre-built Docker image](#Docker-image).

  ## Graph database

  net-spider-rpl-cli stores time-varying topology of an RPL network into a graph dabase via the [Gremlin Server](http://tinkerpop.apache.org/). You have to set up the server, and pass the server's hostname and port to `--host` and `--port` options, respectively.

  ## Commands

  net-spider-rpl-cli has the folowing sub-commands.

  ### clear command

  `clear` command clears the entire database. Use with care.

  ### input command

  `input` command reads log files, extracts information about the RPL network topology with timestamps and stores them into the database.

  Currently, the format of the log files must be **logs of rpl-lite module of [Contiki-NG](https://github.com/contiki-ng/contiki-ng) operating system, prefixed with the standard syslog header.** See [this test file](https://github.com/debug-ito/net-spider/blob/master/net-spider-rpl/test/data/syslog_root.log) for an example.

  There are two kinds of RPL network topology: the DIO (upward) graph and the DAO (downward) graph. `input` command extracts and stores both kinds of information.

  ### snapshot command

  `snapshot` command queries the database to make a "snapshot graph", an RPL network topology observed at the specified time. You can specify a time range with `--time-from` and `--time-to` options, and then it makes a snapshot graph using only those input information observed during the time range.

  To run this command, you have to specify `--starts-from` option at least one time. This is the IPv6 address of the node from which it searches for a snapshot graph. Usually this should be the address of the DODAG root.

  It prints the obtained snapshot graph to STDOUT in [GraphML](http://graphml.graphdrawing.org/) format. The graph includes both DIO and DAO graphs, but you can distinguish them by `link_type` attribute of edges.

  ### cis command

  `cis` command is a short for "clear + input + snapshot". It clears the database, inputs the specified log files and returns a snapshot graph.

  With this command, you don't have to specify `--starts-from` option (it's ignored.) Instead, all IPv6 addresses observed in the input log files are searched.


  ## Docker image

  We provide pre-built Docker images of net-spider-rpl-cli and the graph database.

  - The Docker image of the graph database is specified in `docker-compose.yml` in this directory.

      - You can start it with `docker-compose up` command.
      - The "db" directory stores persistent graph data.

  - The Docker image of net-spider-rpl-cli is available at Docker Hub as [debugito/net-spider-rpl-cli](https://hub.docker.com/r/debugito/net-spider-rpl-cli).
  - To run the net-spider-rpl-cli image with the graph database image, use "run-net-spider.sh" script in this directory.


  ## Author

  Toshio Ito <debug.ito@gmail.com>
description-type: markdown
hash: 030a26e11c2ae9fa8b14455a0bbbd82203eb76661e004db6569b81c884f8a64e
homepage: https://github.com/debug-ito/net-spider
latest: 0.1.3.4
license-name: BSD-3-Clause
maintainer: Toshio Ito <debug.ito@gmail.com>
synopsis: CLI executable of NetSpider.RPL.
test-bench-deps:
  base: '>=0'
  bytestring: '>=0.10.8.2 && <0.11'
  fast-logger: '>=2.4.11 && <3.1'
  hashable: '>=1.2.6.1 && <1.4'
  hspec: '>=2.5.5'
  ip: '>=1.3.0 && <1.8'
  monad-logger: '>=0'
  net-spider: '>=0'
  net-spider-cli: '>=0'
  net-spider-rpl: '>=0'
  net-spider-rpl-cli: '>=0'
  optparse-applicative: '>=0'
  text: '>=0'
