homepage: https://github.com/haskell/network-uri
changelog-type: markdown
hash: a4765164ed0a2d1668446eb2e03460ce98645fbf083598c690846af79b7de10d
test-bench-deps:
  base: <5
  criterion: -any
  HUnit: -any
  tasty-quickcheck: -any
  network-uri: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  QuickCheck: -any
maintainer: ezra@ezrakilty.net
synopsis: URI manipulation
changelog: |
  # network-uri-2.6.4.1 (2021-02-07)
  * Fix: Restore "Safe" designation which was accidentally removed.

  # network-uri-2.6.4.0 (2021-02-07)
  * Add compatibility with GHC 9.0.1.

  # network-uri-2.6.3.0 (2020-02-18)
  * Add official support for SafeHaskell
    NOTE: This is the first version whose SafeHaskell properties have become an
    intentional part of the API contract; previous versions were merely
    accidentally safe-inferred (or not depending on various factors; in other
    words, this was a fragile property).
  * Derive `Lift` instances using `DeriveLift` extension, when available.

  # network-uri-2.6.2.0 (2020-01-30)
  * Mark the modules as Safe for SafeHaskell.

  # network-uri-2.6.2.0 (2020-01-30)
  * Merge network-uri-static (Network.URI.Static) into this
    package, which offers a way to parse URI strings at compile time.
  * Add `Lens`es for the `URI` types
  * Add `Generic` instances for the `URI` type
  * Add `Lift` instances for the `URI` type
  * Optimize `isReserved` and related character-class functions.
  * Start to add some benchmarks for performance analysis
  * Fix a bug: Correctly parse IPv6 addresses in URIs.
  * Add `rectify` which normalizes a URI if it is missing certain
    separator characters required by the module. Some users found adding
    those characters inconvenient when building a URI from parts.
  * Add `nullURIAuth` and `uriAuthToString`, paralleling `nullURI` and `uriToString`.

  # network-uri-2.6.0.3
  * Fix a bug with IPv4 address parsing.

  # network-uri-2.6.0.2
  * Implement Generic and NFData.

  # network-uri-2.6.0.0
  * Initial release: Module split off from `network`.
basic-deps:
  base: '>=3 && <5'
  th-compat: '>=0.1.1 && <1.0'
  parsec: '>=3.1.12.0 && <3.2'
  deepseq: '>=1.1 && <1.5'
  template-haskell: -any
all-versions:
- 2.5.0.0
- 2.6.0.0
- 2.6.0.1
- 2.6.0.2
- 2.6.0.3
- 2.6.1.0
- 2.6.2.0
- 2.6.3.0
- 2.6.4.0
- 2.6.4.1
author: ''
latest: 2.6.4.1
description-type: markdown
description: |
  The network-uri package
  =======================

  This package provides facilities for parsing and unparsing URIs, and creating
  and resolving relative URI references, closely following the URI spec, IETF
  RFC 3986 [1].

  The main module in this package, `Network.URI`, was split off from the
  network package in the network-2.6 release.

  # Network.URI.Static

  Network.URI.Static that allows you to declare static URIs in type-safe manner.

  With the base module, when you declare a static URI, you need to either use `Maybe URI` or use `URI` and give up type safety.

  ```haskell
  safeButWrappedInMaybeURI :: Maybe URI
  safeButWrappedInMaybeURI = parseURI "http://www.google.com/"

  directButUnsafeURI :: URI
  directButUnsafeURI = fromJust $ parseURI "http://www.google.com/"
  ```

  This library allows you to write static URIs in type-safe manner by checking URIs at compile time using template haskell.

  Now, you can write the following.

  ```haskell
  directAndSafeURI :: URI
  directAndSafeURI = $$(staticURI "http://www.google.com")
  ```

  You can even use a quasi quote if you'd like.

  ```haskell
  directAndSafeURI :: URI
  directAndSafeURI = [uri|"http://www.google.com"|]
  ```

  These two expressions emit an error at compile time if a specified URI is malformed.
license-name: BSD-3-Clause
