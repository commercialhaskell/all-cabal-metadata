all-versions:
- 0.1.0.0
author: sorki
basic-deps:
  QuickCheck: '>=0'
  attoparsec: '>=0.14'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  data-default-class: '>=0'
  mtl: '>=0'
  network: '>=3.1'
  network-can: '>=0'
  serialport: '>=0.5.5'
  transformers: '>=0'
  unliftio: '>=0'
changelog: |
  # Version [0.1.0.0](https://github.com/DistRap/network-can/compare/d50564...0.1.0.0) (2025-05-19)

  * Initial release

  ---

  `network-can` uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org
changelog-type: markdown
description: |
  # network-can

  [![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/DistRap/network-can/ci.yaml?branch=main)](https://github.com/DistRap/network-can/actions/workflows/ci.yaml)
  [![Hackage version](https://img.shields.io/hackage/v/network-can.svg?color=success)](https://hackage.haskell.org/package/network-can)

  CAN bus networking using Linux SocketCAN or SLCAN backends.

  ## Usage

  ```haskell
  import qualified Control.Monad
  import qualified Control.Monad.IO.Class
  import qualified Network.CAN
  import qualified Network.SocketCAN

  main :: IO ()
  main = do
    Network.SocketCAN.runSocketCAN
      (Network.SocketCAN.mkCANInterface "vcan0")
      $ do
          Network.CAN.send
            $ Network.CAN.standardMessage
                0x123
                [0xDE, 0xAD]

          Control.Monad.forever
            $ Network.CAN.recv
              >>= Control.Monad.IO.Class.liftIO . print
  ```
description-type: markdown
hash: bab29506bbba5d800cbacbb1a8f89ebbe1175c9ef75b2646b89acbf88883a2d0
homepage: https://github.com/DistRap/network-can
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: srk@48.io
synopsis: CAN bus networking
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=0'
  network-can: '>=0'
