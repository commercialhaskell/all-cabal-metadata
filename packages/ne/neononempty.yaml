homepage: https://github.com/414owen/neononempty
changelog-type: markdown
hash: bd980f1e9fab6fb65749a225e0381f2a50f4bae4180c86259b6784d2a5f7b2e3
test-bench-deps:
  base: '>=4.9.0.0 && <5'
  hedgehog: '>=0.6 && <2'
  neononempty: '>=1.0.0 && <2'
maintainer: owen@owen.cafe
synopsis: NonEmpty lists that look [more, like, this]
changelog: |
  # Revision history for neononempty

  ## 1.1.0

  * Support GHC >= 8.0.2 / base >= 4.9

  ## 1.0.0

  * Initial version
basic-deps:
  base: '>=4.9.0.0 && <5'
  base-compat: '>=0 && <1'
all-versions:
- 1.0.0
- 1.1.0
author: Owen Shepherd
latest: 1.1.0
description-type: haddock
description: |-
  This package provides @NonEmpty@, an alternative to the NonEmpty type
  in base.

  It has a few differences from base's NonEmpty:

  * It has @Show@ and @Read@ instance similar to that of normal lists
  * It has a 100% safe API
  * It has a few added\/removed\/updated functions (see @Data.List.NeoNonEmpty@'s module docs)
  * New functions aren't tied to new versions of GHC/base

  The show instance is the original raison d'Ãªtre. When scanning textual data,
  the brain can interpret uniformity more quickly. Which do you think is easier
  to scan?

  > x :| [y, z]
  > [x, y, z]

  Now imagine this in various fields of a large compound structure, and you
  have two of them, and you're trying to find the difference.

  >>> :set -XOverloadedLists
  >>> aNonEmpty [1, 2, 3]
  [1,2,3]
  >>> read "[1, 2, 3]" :: NonEmpty Int
  [1,2,3]
license-name: BSD-3-Clause
