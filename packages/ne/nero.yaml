all-versions:
- '0.1'
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
author: Danny Navarro
basic-deps:
  base: '>=4.6 && <4.9'
  bifunctors: '>=4.1.1.1'
  bytestring: '>=0.10.0.2'
  containers: '>=0.5.0.0'
  lens: '>=4.1.2.1'
  text: '>=0.11.3.1'
changelog: |
  # Change Log
  All notable changes to this project will be documented in this file. This file
  follows the formatting recommendations from [Keep a
  CHANGELOG](http://keepachangelog.com/). This project adheres to [Semantic
  Versioning](http://semver.org/).

  ## [0.3.1][0.3.1] - 2015-4-16
  ### Fixed
  - Make examples private modules so they can be built.

  ### Added
  - Lower bounds versions for dependencies.

  ## [0.3][0.3] - 2015-4-12
  This release includes changes driven by the initial implementation of
  [`nero-wai`](https://github.com/plutonbrb/nero-wai).
  ### Changed
  - `GET` and `POST` are now types on their own instead of constructors for
    `Request`. `Request` is now sum type wrapper for the types `GET` and `POST`
  - `Payloaded` is now a `Lens'` and has been renamed to `HasPayload`.
    `Request` is not an instance of `HasPayload` anymore, instead use `payloaded`.
  - Rename `server` -> `application` in `Server` type class.

  ### Added
  - `split` for combining `match` and `sep`.
  - `notFound` response.
  - `payloaded` `Prism'` for `Request` `Payload`s.
  - `HasBody` instance for `Request`.
  - `Prism'` for `Response`s with different status.
  - `null`, `fromList` for `MultiMap`.
  - `Binary` module including `Renderable` and `Parseable` classes.
  - `Renderable` instance for `Url`.
  - Single `Response` instance for `Server`.

  ## [0.2] - 2015-4-5
  ### Changed
  - Replace basic routing (monoidal matching) with lens routing.
  - Limit exports for central module `Nero`.

  ### Added
  - Custom `Prelude` (`Nero.Prelude`) extended with frequently used imports.

  ## [0.1.1] - 2015-3-30
  ### Fixed
  - Support for ghc-7.6.3 and ghc-7.10.1.

  ## [0.1] - 2015-3-30
  ### Added
  - Basic routing.
  - HTTP parameters handling for both *query string* and form encoded `POST`s.
  - Trailing slash redirection.

  [0.3.1]: https://github.com/plutonbrb/nero/compare/v0.3...v0.3.1
  [0.3]: https://github.com/plutonbrb/nero/compare/v0.2...v0.3
  [0.2]: https://github.com/plutonbrb/nero/compare/v0.1.1...v0.2
  [0.1.1]: https://github.com/plutonbrb/nero/compare/v0.1...v0.1.1
  [0.1]: https://github.com/plutonbrb/nero/compare/a2c3f720...v0.1
changelog-type: markdown
description: |
  # Nero

  > A [`Lens`][lens]-based HTTP toolkit.

  :warning: The following is a declaration of intentions.  Expect wild
  changes in the `API` until the `1.0.0` release.

  * **Not a framework**: it may be considered an *anti-framework*,
    *micro-framework*, or just a "library", in the sense that it provides a
    set of utilities for building *custom* web applications instead of
    creating applications from user provided code following certain
    structure.

    <!-- In reality this is more a distinction in intention than in actual
    code-->

  * **Pay for what you eat**: instead of coming with *everything and the
    kitchen sink*, it provides the bare minimum to write applications
    with minimum implicit behavior. At the same time, it offers diverse
    paths to *grow with you* as applications become more complex.

    <!-- No monad transformers until they are needed.-->

  * **Unopinonated**: there is no preferred routing method, HTML templating
    library, session management, web server or database adapter. It comes with
    some defaults to alleviate the [paradox of
    choice](https://en.wikipedia.org/wiki/The_Paradox_of_Choice), but most
    components are expected to be easily swapped in and out either with
    plain 3rd party [Haskell] libraries or by writing thin adapters around
    them.

    <!-- Is pluggable right here? Sounds out of fashion -->

  * **Power of [Haskell] and [`Lens`][lens]**: the [`Lens`][lens]-based API
    enables a style familiar to imperative programmers [`Lens`][lens] while
    being purely functional under the hood. Veteran *Haskellers* can take
    advantage of the powerful lens combinators.

  [![Hackage Version](https://img.shields.io/hackage/v/nero.svg)](https://hackage.haskell.org/package/nero) [![Build Status](https://img.shields.io/travis/plutonbrb/nero.svg)](https://travis-ci.org/plutonbrb/nero)

  ## Example

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  import Nero.Prelude
  import Nero (Request, Response, _GET, prefixed, ok)
  import Nero.Warp (serve) -- from `nero-warp`

  app :: Request -> Maybe Response
  app request = request ^? _GET . prefixed "/hello/" <&> \name ->
      ok $ "<h1>Hello " <> name <> "</h1>"

  main :: IO ()
  main = serve 8080 app
  ```

  More examples in the [examples directory](
  https://github.com/plutonbrb/nero/tree/master/examples).

  [Haskell]: https://www.haskell.org/
  [lens]: https://lens.github.io/
description-type: markdown
hash: ceb8194c00dc5e7150882b74f0bbf09a77c972939853d356fbbbb6f4d87b7c03
homepage: https://github.com/plutonbrb/nero
latest: 0.3.1
license-name: BSD-3-Clause
maintainer: Danny Navarro <j@dannynavarro.net>
synopsis: Lens-based HTTP toolkit
test-bench-deps:
  Glob: '>=0'
  base: '>=4.6 && <4.9'
  bytestring: '>=0'
  doctest: '>=0'
  lens: '>=0'
  nero: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
