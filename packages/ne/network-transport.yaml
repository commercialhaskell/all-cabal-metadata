homepage: http://haskell-distributed.github.com
changelog-type: text
hash: 22e38b85c9f9f2c722e6acd2ed98e7bf17c7a5e927cb86788f95d476f158874c
test-bench-deps: {}
maintainer: Facundo Domínguez <facundo.dominguez@tweag.io>
synopsis: Network abstraction layer
changelog: "2022-08-30  Facundo Domínguez <facundo.dominguez@tweag.io> 0.5.6\n\n*
  Fix extension fields in the cabal file (#41).\n\n2022-08-09  Facundo Domínguez <facundo.dominguez@tweag.io>
  0.5.5\n\n* Relax dependency bounds to build with ghc9 (#40).\n\n2019-05-12  Facundo
  Domínguez <facundo.dominguez@tweag.io> 0.5.4\n\n* Fix documentation typo (#39).\n\n2019-05-12
  \ Facundo Domínguez <facundo.dominguez@tweag.io> 0.5.3\n\n* Relax upper bound of
  hashable.\n\n2017-07-25  Facundo Domínguez <facundo.dominguez@tweag.io> 0.5.2\n\n*
  prependLength checks for overflow (5608f0f)\n* Drop inlinePerformIO for unsafeDupablePerformIO
  (18bf80c)\n* Have travis build n-t even with no tests (7ffe43e)\n\n2017-02-23  Facundo
  Domínguez <facundo.dominguez@tweag.io> 0.5.1\n\n* Add {encode|decode}{Word|Enum|Num}{32|16}.\n*
  Removed {encode|decode}Int{32|16}\n\n2016-01-28  Facundo Domínguez <facundo.dominguez@tweag.io>
  0.4.4.0\n\n* Add compatibility with ghc-8.\n\n2016-01-28  Facundo Domínguez <facundo.dominguez@tweag.io>
  0.4.3.0\n\n* Derive Binary instances for missing types.\n* Use auto-derive for Reliability
  as Binary instance.\n* Stop testing with ghc-7.4 and build with ghc-7.10.\n\n2015-06-15
  \ Facundo Domínguez <facundo.dominguez@tweag.io> 0.4.2.0\n\n* Add NFData instance
  for EndPointAddress.\n* Relax dependency bounds.\n\n2014-12-09  Tim Watson  <watson.timothy@gmail.com>
  \ 0.4.1.0\n\n* foreigns htonl, ntohl, htons, ntohs are imported from ws2_32 on windows
  \n* Created Data instance for EndPointAddress (thanks Andrew Rademacher)\n\n2014-05-30
  \ Tim Watson  <watson.timothy@gmail.com>  0.4.0.0\n\n* Fix build for GHC 7.4 - thanks
  mboes!\n* Allow transformers above v5\n* Bump binary version to include 0.7.*\n*
  Binary instance for 'Reliability' - thanks mboes!\n* Hashable instance for 'EndPointAddress'\n\n2012-11-22
  \ Edsko de Vries  <edsko@well-typed.com>  0.3.0.1\n\n* Relax bounds on Binary\n\n2012-10-03
  \ Edsko de Vries  <edsko@well-typed.com>  0.3.0\n\n* Clarify disconnection\n* Require
  that 'connect' be \"as asynchronous as possible\"\n* Added strictness annotations\n\n2012-07-16
  \ Edsko de Vries  <edsko@well-typed.com>  0.2.0.2\n\n* Base 4.6 compatible test
  suites\n* Relax package constraints for bytestring\n\n2012-07-16  Edsko de Vries
  \ <edsko@well-typed.com>  0.2.0.1\n\n* Hide catch only for base < 4.6\n\n2012-07-07
  \ Edsko de Vries  <edsko@well-typed.com>  0.2.0\n\n* Initial release.\n"
basic-deps:
  bytestring: '>=0.9 && <0.12'
  base: '>=4.6 && <5'
  binary: '>=0.5 && <0.9'
  hashable: '>=1.2.0.5 && <1.5'
  transformers: '>=0.2 && <0.6'
  deepseq: '>=1.0 && <1.5'
all-versions:
- 0.2.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.4.3.1
- 0.4.4.0
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.6
author: Duncan Coutts, Nicolas Wu, Edsko de Vries
latest: 0.5.6
description-type: haddock
description: |-
  "Network.Transport" is a Network Abstraction Layer which provides
  the following high-level concepts:

  * Nodes in the network are represented by 'EndPoint's. These are
  heavyweight stateful objects.

  * Each 'EndPoint' has an 'EndPointAddress'.

  * Connections can be established from one 'EndPoint' to another
  using the 'EndPointAddress' of the remote end.

  * The 'EndPointAddress' can be serialised and sent over the
  network, whereas 'EndPoint's and connections cannot.

  * Connections between 'EndPoint's are unidirectional and lightweight.

  * Outgoing messages are sent via a 'Connection' object that
  represents the sending end of the connection.

  * Incoming messages for /all/ of the incoming connections on
  an 'EndPoint' are collected via a shared receive queue.

  * In addition to incoming messages, 'EndPoint's are notified of
  other 'Event's such as new connections or broken connections.

  This design was heavily influenced by the design of the Common
  Communication Interface
  (<http://www.olcf.ornl.gov/center-projects/common-communication-interface>).
  Important design goals are:

  * Connections should be lightweight: it should be no problem to
  create thousands of connections between endpoints.

  * Error handling is explicit: every function declares as part of
  its type which errors it can return (no exceptions are thrown)

  * Error handling is "abstract": errors that originate from
  implementation specific problems (such as "no more sockets" in
  the TCP implementation) get mapped to generic errors
  ("insufficient resources") at the Transport level.

  This package provides the generic interface only; you will
  probably also want to install at least one transport
  implementation (network-transport-*).
license-name: BSD-3-Clause
