homepage: https://github.com/xquantxz/nekos-best.hs
changelog-type: ''
hash: 44acb454a63949cc818f0a1f67ff4cecddd49bf7bac59c153ecffe26e7c111b4
test-bench-deps: {}
maintainer: xquantxz@gmail.com
synopsis: Unofficial nekos.best API wrapper
changelog: ''
basic-deps:
  http-client: ^>=0.7.13.1
  bytestring: ^>=0.11.4.0
  base: ^>=4.16.4.0
  containers: ^>=0.6.5.1
  http-client-tls: ^>=0.3.6.2
  random: ^>=1.2.1
  http-types: ^>=0.12.3
  aeson: ^>=2.1.2.1
all-versions:
- 0.1.0.0
- 0.2.0.0
author: xQuantx
latest: 0.2.0.0
description-type: markdown
description: "# nekos-best\r\n![](https://img.shields.io/hackage/v/nekos-best.svg)\r\n![](https://img.shields.io/github/license/xquantxz/nekos-best%2ehs.svg)\r\n![](https://img.shields.io/github/issues/xquantxz/nekos-best%2ehs.svg)\r\n\r\nHaskell
  wrapper for [nekos.best](https://nekos.best) API\r\n\r\n## Examples\r\n\r\nGet a
  neko image\r\n\r\n```haskell\r\nimport NekosBest.API (getNbImage)\r\nimport qualified
  NekosBest.Category as C\r\n\r\nmain = do\r\n    res <- getNbImage C.Neko\r\n    print
  res\r\n```\r\n\r\n___\r\n\r\nFor random images you can use `randomNbImage` passing
  a `RandomGen` value\r\n\r\n```haskell\r\nimport NekosBest.API (randomNbImage)\r\nimport
  qualified NekosBest.Category as C\r\n\r\nmain = do\r\n    gen <- getStdGen\r\n    (res,
  gen') <- randomNbImage gen\r\n    print res\r\n\r\n```\r\n___\r\n\r\nDownloading
  an image\r\n\r\n```haskell\r\nimport NekosBest.API (getNbImage, downloadNbImage)\r\nimport
  qualified NekosBest.Category as C\r\n\r\nmain = do\r\n    res <- getNbImage C.Neko\r\n
  \   mapM_ (\\x -> downloadNbImage x \"filename\") res\r\n```\r\n"
license-name: MIT
