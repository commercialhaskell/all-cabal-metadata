all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
author: Michael B. Gale
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  exceptions: '>=0'
  network: '>=0'
  retry: '>=0'
changelog: |
  # Changelog for network-wait

  ## 0.4.0

  - Fixed [an issue](https://github.com/mbg/network-wait/issues/19) where under some circumstances an attempt to connect to a socket could become stuck for a long time or possibly forever. A timeout is now applied to all connection attempts made by functions in the `Network.Wait` module to ensure that the checks terminate in a reasonable amount of time. Contributed by [@thomasjm](https://github.com/thomasjm) in [#20](https://github.com/mbg/network-wait/pull/20).
  - Added a new `recoveringWithStatus` function which provides the `RetryStatus` to the action.

  ## 0.3.0

  - Functions in the `Network.Wait.PostgreSQL` module are now overloaded to accept different types of connection information. In addition to the previously supported `ConnectInfo` type, the function now also accept connection strings in the form of `ByteString` values.

  ## 0.2.0

  - Add `Network.Wait.Redis` module with functions to wait for Redis servers to become ready to accept connections. This module and its dependency on `hedis` are not enabled by default. The `network-wait:redis` flag must be enabled for this package's Redis support.
  - Generalise the `recoveringWith` function to allow it to return the result of a computation.
  - The functions for TCP/Sockets now return the `Socket` if they are successful.
  - The functions for PostgreSQL now return the `Connection` if they are successful.

  ## 0.1.2

  - Compatibility with GHC 8.2 and Stack LTS 11

  ## 0.1.1

  - Add `Network.Wait.PostgreSQL` module with functions to wait for PostgreSQL servers to become ready to accept connections. This module and its dependency on `postgresql-simple` are not enabled by default. The `network-wait:postgres` flag must be enabled for this package's PostgreSQL support.

  ## 0.1.0

  - First release
changelog-type: markdown
description: |
  # network-wait

  ![MIT](https://img.shields.io/github/license/mbg/network-wait)
  [![CI](https://github.com/mbg/network-wait/actions/workflows/build.yml/badge.svg)](https://github.com/mbg/network-wait/actions/workflows/build.yml)
  [![Hackage](https://img.shields.io/hackage/v/network-wait)](https://hackage.haskell.org/package/network-wait)

  A lightweight Haskell library for waiting on networked services to become available. This is useful if you are e.g. building a web application which relies on a database server to be available, but which may not be immediately available on application startup.

  [**Full Haddock documentation for all modules**](https://mbg.github.io/network-wait/)

  ## Example

  All functions provided by this library work with retry policies from [`Control.Retry`](https://hackage.haskell.org/package/retry) which provide good control over the retry behaviour. To wait for a PostgreSQL server to become available on the same machine:

  ```haskell
  import Control.Retry
  import Network.Wait

  main :: IO ()
  main = do
      waitTcp retryPolicyDefault "localhost" "5432"
      putStrLn "Yay, the server is available!"
  ```

  The haddock documentation for this library contains more examples.

  ## Example: PostgreSQL

  The `network-wait` package can be compiled with the `network-wait:postgres` flag (e.g. `stack build --flag network-wait:postgres`) which enables support for checking the readiness of PostgreSQL servers specifically. Unlike the functions in the `Network.Wait` module, which only check that connections can be established, the functions in `Network.Wait.PostgreSQL` also check that a PostgreSQL server is ready to accept commands. To wait for a PostgreSQL server to become available and accept commands:

  ```haskell
  import Control.Retry (retryPolicyDefault)
  import Database.PostgreSQL.Simple (defaultConnectInfo)
  import Network.Wait.PostgreSQL (waitPostgreSQL)

  main :: IO ()
  main = do
      waitPostgreSQL retryPolicyDefault defaultConnectInfo
      putStrLn "Yay, the PostgreSQL server is ready to accept commands!"
  ```

  Internally, this uses `postgresql-simple` to connect to the specified server (`defaultConnectInfo` in the example above) and send a `SELECT 1;` query. If the query is answered correctly, we consider the server to be in a state ready to accept commands.

  Alternatively, a connection string may be used instead of a `ConnectInfo` value:

  ```haskell
  import Data.ByteString (ByteString)
  import Control.Retry (retryPolicyDefault)
  import Database.PostgreSQL.Simple (defaultConnectInfo)
  import Network.Wait.PostgreSQL (waitPostgreSQL)

  connStr :: ByteString
  connStr = "host=localhost port=5432"

  main :: IO ()
  main = do
      waitPostgreSQL retryPolicyDefault connStr
      putStrLn "Yay, the PostgreSQL server is ready to accept commands!"
  ```

  The `Network.Wait.PostgreSQL` module is gated behind the `network-wait:postgres` flag so that the PostgreSQL-specific dependencies are only required when PostgresSQL support is required by users of this library.

  ## Example: Redis

  The `network-wait` package can be compiled with the `network-wait:redis` flag (e.g. `stack build --flag network-wait:redis`) which enables support for checking the readiness of Redis servers specifically. Unlike the functions in the `Network.Wait` module, which only check that connections can be established, the functions in `Network.Wait.Redis` also check that a Redis server is ready to accept commands. To wait for a Redis server to become available and accept commands:

  ```haskell
  import Control.Retry (retryPolicyDefault)
  import Database.Redis (defaultConnectInfo)
  import Network.Wait.Redis (waitRedis)

  main :: IO ()
  main = do
      waitRedis retryPolicyDefault defaultConnectInfo
      putStrLn "Yay, the Redis server is ready to accept commands!"
  ```

  Internally, this uses `hedis` to connect to the specified server (`defaultConnectInfo` in the example above) and send a ping. If the ping is answered, we consider the server to be in a state ready to accept commands.

  The `Network.Wait.Redis` module is gated behind the `network-wait:redis` flag so that the Redis-specific dependencies are only required when Redis support is required by users of this library.

  ## See also

  - [wait-for](https://github.com/eficode/wait-for) is a popular shell script with the same objectives as this library.
  - The [port-utils](https://hackage.haskell.org/package/port-utils) package has some functions for waiting on TCP servers to become available, with a fixed timeout.
description-type: markdown
hash: d4b6fe36b8930cc9513626e5077af2a26e001030e77e3b562c6ca968d1b47e06
homepage: https://github.com/mbg/network-wait#readme
latest: 0.4.0.0
license-name: MIT
maintainer: github@michael-gale.co.uk
synopsis: Lightweight library for waiting on networked services to become available.
test-bench-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  exceptions: '>=0'
  network: '>=0'
  network-simple: '>=0'
  network-wait: '>=0'
  retry: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
