all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.4.1
author: Jakub Waszczuk
basic-deps:
  IntervalMap: '>=0.6 && <0.7'
  base: '>=4.7 && <5'
  binary: '>=0'
  bytestring: '>=0.9 && <0.11'
  cmdargs: '>=0.10 && <0.11'
  containers: '>=0.5 && <0.7'
  crf-chain1: '>=0.2 && <0.3'
  data-named: '>=0.6.1 && <0.7'
  dawg: '>=0.8.2 && <0.9'
  directory: '>=1.1 && <1.4'
  filepath: '>=1.3 && <1.5'
  monad-ox: '>=0.2 && <0.3'
  mtl: '>=2.1 && <2.3'
  nerf: '>=0'
  network: '>=2.3 && <2.9'
  polimorf: '>=0.7.4 && <0.8'
  polysoup: '>=0.2 && <0.3'
  sgd: '>=0.2.3 && <0.3'
  tagsoup: '>=0.13 && <0.15'
  temporary: '>=1.1 && <1.4'
  text: '>=0'
  text-binary: '>=0.1 && <0.3'
  tokenize: ==0.3.0
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "Nerf\n====\n\nNerf is a statistical named entity recognition (NER) tool
  based on linear-chain\nconditional random fields (CRFs).\nIt has been adapted to
  recognize tree-like structures of NEs (i.e., with\nrecursively embedded NEs) by
  using the joined label tagging method which\n-- for a particular sentence -- works
  as follows:\n\n  * CRF model is used to determine the most probable sequence of
  labels,\n  * Extended IOB method is used to decode the sequence into a forerst of
  NEs.\n\nThe extended IOB method also provides the inverse encoding function which
  is\nneeded during the model training.\n\n\nInstallation\n=============\n\nIt is
  recommanded to install *nerf* using the\n[Haskell Tool Stack][stack], which you
  will need to downoload and\ninstall on your machine beforehand.  Then clone this
  repository into\na local directory and use `stack` to install the library by running:\n\n
  \   stack install\n\n\nData formats\n============\n\nThe only data encoding supported
  by Nerf is `UTF-8`.\n\nTraining data\n-------------\n\nThe current version of Nerf
  works with a simple data format in which:\n\n  * Each sentence is kept in a separate
  line,\n  * Named entities are represented with embedded beginning and ending tags,\n
  \ * Contents of individual tags represent named entity types.\n\nFor example:\n\n
  \   <organization>Church of the <deity>Flying Spaghetti Monster</deity></organization>
  .\n\nText and label values should be escaped by prepending the `\\` character before
  special\n`>`, `<`, `\\` and ` ` (space) characters.\n\nHave a look in the `example`
  directory for an example of a file in the\nappropriate format.\n\nNER input data\n--------------\n\nBelow
  is a list of data formats supported within the NER mode.\n\n### Raw text\n\nNerf
  can be used to annotate raw text with named entites.  The annotated data\nwill be
  presented in the format which is also used for training and has already\nbeen described
  above.  Each sentence should be supplied in a separate line --\ncurrently, Nerf
  doesn't perform any sentence-level segmentation.\n\n### XCES format\n\nIt is also
  possible to annotate data stored in the XCES format.\n\n\nTraining\n========\n\nOnce
  you have an annotated data file `train.nes` (and, optionally, an evaluation\nmaterial
  `eval.nes`) conformant with the format described above you can train\nthe Nerf model
  using the following command:\n\n    nerf train train.nes -e eval.nes -o model.bin\n\nRun
  `nerf train --help` to learn more about the program arguments and possible\ntraining
  options.\n\nThe nerf tool can be also supplied with additional \n[runtime system
  options](http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html).\nFor
  example, to train the model using four threads, use:\n\n    nerf train train.nes
  -e eval.nes -o model.bin +RTS -N4\n\n**WARNING**: Currently, the `-N` runtime option
  sometimes leads to errors in\nthe training process and therefore should be avoided
  for the time being.\n\n\nDictionaries\n------------\n\nNerf supports a list of NE-related
  dictionaries:\n\n  * [PoliMorf](http://zil.ipipan.waw.pl/PoliMorf),\n  * [NELexicon](http://nlp.pwr.wroc.pl/en/tools-and-resources/nelexicon),\n
  \ * [Gazetteer for Polish Named Entities](http://clip.ipipan.waw.pl/Gazetteer),\n
  \ * [PNET](http://zil.ipipan.waw.pl/PNET),\n  * [Prolexbase](http://zil.ipipan.waw.pl/Prolexbase).\n\nTo
  use the particular dictionary during NER you have to supply it as a\ncommand line
  argument during the training process, for example:\n\n    nerf train train.nes --polimorf
  PoliMorf-0.6.1.tab\n\n\nNamed entity recognition\n========================\n\nTo
  annotate the `input.txt` data file using the trained `model.bin` model, run: \n\n
  \   nerf ner model.bin < input.txt\n\nAnnotated data will be printed to `stdout`.
  \ Data formats currently supported within\nthe NER mode has been described above.
  \ Run `nerf ner --help` to learn more about the\nadditional NER arguments.\n\n\nServer\n======\n\nNerf
  provides also a client/server mode.  It is handy when, for example,\nyou need to
  annotate a large collection of small files.  Loading Nerf model\nfrom a disk takes
  considerable amount of time which makes the tagging method\ndescribed above very
  slow in such a setting.\n\nTo start the Nerf server, run:\n\n    nerf server model.bin\n\nYou
  can supply a custom port number using a `--port` option.  For example,\nto run the
  server on the `10101` port, use the following command:\n\n    nerf server model.bin
  --port 10101\n\nTo use the server in a multi-threaded environment, you need to specify
  the\n`-N` [RTS][ghc-rts] option.  A set of options which usually yield good\nserver
  performance is presented in the following example:\n\n    nerf server model.bin
  +RTS -N -A4M -qg1 -I0\n\nRun `nerf server --help` to learn more about possible server-mode
  options.\n\nThe client mode works just like the tagging mode.  The only difference
  is that,\ninstead of supplying your client with a model, you need to specify the
  port number\n(in case you used a custom one when starting the server; otherwise,
  the default\nport number will be used).\n\n    nerf client --port 10101 < input.txt
  > output.nes\n\nRun `nerf client --help` to learn more about the possible client-mode
  options.\n\n\n[stack]: http://docs.haskellstack.org \"Haskell Tool Stack\"\n[ghc-rts]:
  http://www.haskell.org/ghc/docs/latest/html/users_guide/runtime-control.html \"GHC
  runtime system options\"\n"
description-type: markdown
hash: a85a20818d76ec7e02b385317f94d1bb5e6558d769fdb3673c9b51418deeba84
homepage: https://github.com/kawu/nerf#readme
latest: 0.5.4.1
license-name: BSD-3-Clause
maintainer: waszczuk.kuba@gmail.com
synopsis: Nerf, a named entity recognition tool based on linear-chain CRFs
test-bench-deps: {}
