homepage: https://github.com/typeclasses/d10
changelog-type: markdown
hash: 1dba511771ec9a36d5c6a4604e624a674b4f1633c6024e890260599bc98348f2
test-bench-deps:
  d10: -any
  base: '>=4.10 && <4.16'
  hedgehog: ==1.0.*
  template-haskell: '>=2.12 && <2.18'
maintainer: Chris Martin, Julie Moronuki
synopsis: Digits 0-9
changelog: |
  **v0.1.0.0**

    * Initial release

  **v0.1.0.1**

    * Improve error messages when quasi-quoters are used in a
      non-expression context

  **v0.1.1.0**

    * Add functions for generating Template Haskell expressions
      to be spliced, as alternatives to using the quasi-quoters

  **v0.2.0.0**

    * Add Template Haskell splice patterns `d10Pat` and `d10ListPat`
    * Define `quotePat` for the quasi-quoters `d10` and `d10list`,
      so they can now be used with pattern matching
    * Add `Integral a` constraint to `d10` and `d10list` in the
      `Data.D10.Num` module, because this is needed for the
      definition of `quotePat`.

  **v0.2.0.1**

    * Add `CHANGELOG.md` to package distribution

  **v0.2.1.0**

    * Add functions mod-10 arithmetic functions: `(+)`, `(-)`, `(*)`

  **v0.2.1.2**

    * Support GHC 8.8

  **v0.2.1.4**

    * Support GHC 8.10

  **v0.2.1.6**

    * Support `doctest-0.17`

  **v0.3**

  In module `Data.D10.Char`:

    * Removed `isD10Str` (see `Data.D10.Predicate`)
    * Type of `d10Exp` changed
      from `Integral a => a -> Q Exp`
      to `Integer -> Q Exp`
    * Type of `d10Pat` changed
      from `D10 -> Q Pat`
      to `Integer -> Q Pat`
    * Type of `d10ListPat` changed
      from `[D10] -> Q Pat`
      to `String -> Q Pat`

  In module `Data.D10.Num`:

    * Removed `isD10Str` (see `Data.D10.Predicate`)
    * Type of `d10Exp` changed
      from `(Integral b, Lift a, Num a) => b -> Q Exp`
      to `Integer -> Q Exp`
    * Type of `d10ListExp` changed
      from `(Lift a, Num a) => String -> Q Exp`
      to `String -> Q Exp`
    * Type of `d10Pat` changed
      from `Integral a => D10 a -> Q Pat`
      to `Integer -> Q Pat`
    * Type of `d10ListPat` changed
      from `Integral a => [D10 a] -> Q Pat`
      to `String -> Q Pat`
    * Type of `d10` changed
      from `(Lift a, Integral a) => QuasiQuoter`
      to `QuasiQuoter`
    * Type of `d10list` changed
      from `(Lift a, Integral a) => QuasiQuoter`
      to `QuasiQuoter`
    * Although type variables no longer appear in the
      various Template Haskell functions, the expressions
      and patterns they generate are polymorphic.

  In module `Data.D10.Safe`:

    * The `D10` type now has instances of the `Data` and `Generic`.
    * Type of `d10ListPat` changed
      from `[D10] -> Q Pat`
      to `String -> Q Pat`
    * Removed `d10Exp`, `d10Pat`, and `d10`

  Other changes:

    * `doctest` test dependency has been removed, and
      `hedgehog` dependency has been added instead

  **v0.3.0.1**

    * Support GHC 9.0, base 4.15, template-haskell 2.17
basic-deps:
  base: ^>=4.10 || ^>=4.11 || ^>=4.12 || ^>=4.13 || ^>=4.14 || ^>=4.15
  template-haskell: ^>=2.12 || ^>=2.13 || ^>=2.14 || ^>=2.15 || ^>=2.16 || ^>=2.17
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.1
- 0.2.1.0
- 0.2.1.2
- 0.2.1.4
- 0.2.1.6
- '0.3'
- 0.3.0.1
author: Chris Martin
latest: 0.3.0.1
description-type: markdown
description: |
  # d10

  Data types representing the digits zero through nine.

  ## Modules

  Each of the following modules defines a different type named
  `D10`, all of which are different representations of the same
  concept:

  * `Data.D10.Char` - Defines a `D10` type as a newtype for `Char`,
    where the values are restricted to characters between `'0'` and
    `'9'`.
  * `Data.D10.Num` - Defines a `D10` type as a newtype for any
    type with an instance of the `Num` class, where the values
    are restricted to numbers between `fromInteger 0` and
    `fromInteger 9`.
  * `Data.D10.Safe` - Defines a `D10` type as
    `D0 | D1 | D2 | ... | D9`.

  Other modules:

  * `Data.D10.Predicate` - Functions to test whether values of
    various types represent digits in the range *0* to *9*.

  ## Quasi-quoters

  Each module that defines a `D10` type also defines quasi-quoters
  for it. With the `QuasiQuotes` GHC extension enabled, a single
  digit like *7* can be written as `[d10|7|]`, and a list of digits
  like *[4,5,6]* can be written as `[d10|456|]`. For `Data.D10.Char`
  and `Data.D10.Num`, the quasi-quoters are an important feature,
  because the `D10` types defined in these modules have unsafe
  constructors, and the quasi-quoters provide compile-time assurance
  that we never construct a `D10` that represents a value outside
  the range *0* to *9*. For `Data.D10.Safe`, the quasi-quoter is
  offered merely as a possible convenience, allowing you to write
  `[d10|456789|]` in place of the somewhat longer expression
  `[D4,D5,D6,D7,D8,D9]`.
license-name: MIT
