all-versions:
- 0.2.0.1
- '0.3'
- 0.3.2
- '0.4'
- 0.4.1
- 0.4.1.1
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.3.2
- 0.5.4
- 0.5.5
- 0.5.5.1
- 0.5.5.2
author: Michael Tolly
basic-deps:
  JuicyPixels: '>=3.2.7 && <3.4'
  base: '>=4.6.0.1 && <5'
  boxes: '>=0.1.3 && <0.2'
  bytestring: '>=0.10.4.0 && <0.11'
  conduit: '>=1.2.3.1 && <1.4'
  conduit-audio: '>=0.1 && <0.3'
  containers: '>=0.5.0.0 && <0.7'
  directory: '>=1.2.0.1 && <1.4'
  filepath: '>=1.3.0.1 && <1.5'
  jammittools: '>=0'
  process: '>=1.1.0.2 && <1.7'
  resourcet: '>=1.1.7.2 && <1.3'
  text: '>=1.2.1.1 && <1.3'
  transformers: '>=0.3.0.0 && <0.6'
  vector: '>=0.10.12.2 && <0.13'
  xml: '>=1.3.14 && <1.4'
changelog: "## v0.5.5.2\r\n\r\n  * Supports GHC 8.6\r\n  * Replaced `HPDF` with C
  library `pdfgen`\r\n\r\n## v0.5.5.1\r\n\r\n  * Switched to new `conduit` syntax\r\n
  \ * Fixed comments that were confusing Haddock\r\n\r\n## v0.5.5\r\n\r\n  * Fixed
  a memory leak from a song with sheet music height set to 0\r\n  * Fixed one song
  with some missing `info.plist` fields\r\n  * Support for all remaining instrument
  track names\r\n  * Fixed empty string value not parsing from `plist` files\r\n  *
  Fixed crash when exporting sheet music for a track with no images\r\n\r\n## v0.5.4\r\n\r\n
  \ * Program will always also look for songs in the folder it's in\r\n  * Add option
  and script to export all backing tracks without combining them\r\n\r\n## v0.5.3.2\r\n\r\nMac-only
  release, fixes some issues on Sierra\r\n\r\n## v0.5.3\r\n\r\nAdded support for \"Bass
  2\", \"Vocals\" (instead of \"Vocal\"),\r\nand \"Vocal 1\"/\"Vocal 2\" (instead
  of \"Vocal\"/\"B Vocals\").\r\n\r\n## v0.5.2\r\n\r\nAdded the ability to export
  the metronome click track.\r\nAvailable via the `-m` option, or via the `-x` or
  `-b` full backup options\r\n(including the `easy-export` script on Windows/Mac).\r\n\r\n##
  v0.5.1\r\n\r\nAdded a `-b` option for backing up an entire library of songs.\r\n\r\n##
  v0.5.0.3\r\n\r\nFixed some bugs in both audio and image decoding.\r\n\r\n## v0.5.0.1\r\n\r\nFixed
  a bug in reading the `beats.plist` file\r\n(not actually used in the executable).\r\n\r\n##
  v0.5\r\n\r\n  * Fixed a bug where `\"Song Title \"` wasn't considered the same as
  `\"Song Title\"`\r\n  * Much internal cleanup, smaller executable size\r\n  * Library:
  added some more Jammit types (beats, ghost beats, sections)\r\n\r\n## v0.4.1.1\r\n\r\nFixes
  for GHC 7.10 (no new functionality).\r\n\r\n## v0.4.1\r\n\r\nUses [`conduit-audio`](http://hackage.haskell.org/package/conduit-audio),\r\nand
  exposes the audio file as an\r\n[`AudioStream`](http://hackage.haskell.org/package/conduit-audio-0.1/docs/Data-Conduit-Audio.html#t:AudioSource).\r\n\r\n##
  v0.4\r\n\r\n  * Doesn't require ImageMagick or SoX anymore!\r\n    Thanks to [JuicyPixels](https://hackage.haskell.org/package/JuicyPixels),\r\n
  \   [HPDF](https://hackage.haskell.org/package/HPDF),\r\n    [conduit](https://hackage.haskell.org/package/conduit),\r\n
  \   and audio code ported from [aifc2wav](http://sed.free.fr/aifc2wav.html).\r\n
  \ * Prints better instructions.\r\n  * Prints what it is doing during each step
  of the `-x dir` export option.\r\n  * Error if the search parameters don't narrow
  down the library\r\n    to exactly one song.\r\n\r\n## v0.3.2\r\n\r\nFixes for Windows,
  other platforms are unchanged:\r\n\r\n  * Use `wchar_t` for C functions to support
  non-ASCII filenames\r\n  * Look for SoX in Program Files (the installer doesn't
  put it in the `PATH`)\r\n\r\n## v0.3.1\r\n\r\n  * Added support for Drums 1, Drums
  2 and Organ parts\r\n  * Better argument handling (quits on unrecognized argument)\r\n\r\n##
  v0.3\r\n\r\nSplit the package into a library and an executable.\r\nNo functional
  changes to the executable.\r\n\r\n## v0.2.0.1\r\n\r\nDocumentation, packaging, and
  version bounds improvements.\r\n\r\n## v0.2\r\n\r\n  * Proper Mac support (knows
  the official library location).\r\n  * Changed the long forms of some commands for
  consistency.\r\n  * Removed `-u` and `-b`, replaced with a simple `-c` option which
  does a dry\r\n    run of audio extraction. That is, it does no audio conversion,
  but exits\r\n    with a code of 0 only if all specified audio parts are found.\r\n
  \ * Fixed a crash on very large libraries.\r\n\r\n## v0.1.1\r\n\r\n  * `-u` and
  `-b` audio options for\r\n    [`onyxite-customs`](https://github.com/mtolly/onyxite-customs)
  project\r\n  * `-T` and `-R` perform exact title/artist search,\r\n    instead of
  existing `-t` and `-r` \"case-insensitive substring\" search\r\n\r\n## v0.1\r\n\r\nBinary
  compiled with GHC 7.6.3 32-bit on Windows 7 64-bit.\r\nShould also work on Wine.\r\nYou
  must install [ImageMagick](http://www.imagemagick.org/script/index.php)\r\nand [SoX](http://sox.sourceforge.net/)\r\nfor
  sheet music and audio export respectively.\r\n"
changelog-type: markdown
description: |
  # `jammittools`

  [![Available on Hackage](https://img.shields.io/hackage/v/jammittools.svg)](http://hackage.haskell.org/package/jammittools)

  A command-line tool for exporting sheet music and audio from the (defunct) Windows/Mac app [Jammit].
  It should go without saying, but please do not distribute content from songs you have purchasedâ€”it is for your use only!

  [Jammit]: https://www.jammit.com/

  ## Easy export instructions

  1. Download songs through the Windows or Mac Jammit app.

  2. Download `jammittools` from the [releases page](https://github.com/mtolly/jammittools/releases).

  3. Unzip somewhere, and run the included `easy-export` script. Song folders will start being extracted in that same folder.

  ## Command-line instructions

      jammittools -?
      # Print usage info.

      jammittools -d
      # Displays the entire library.

      jammittools -t "My Song" -r "Some Artist" -x dir
      # Easiest export option: exports all sheet music and audio for a song.

      jammittools -t "My Song" -r "Some Artist" -s file.pdf -y <parts>
      # Exports a single sheet music file with a list of parts, interleaved.
      # See below for the syntax of instrument parts.

      jammittools -t "My Song" -r "Some Artist" -a file.wav -y <parts>
      # Exports a single audio file with a list of parts, mixed together.
      # See below for the syntax of instrument parts.

      jammittools -t "My Song" -r "Some Artist" -m file.wav
      # Exports the metronome click track for the song.

      jammittools -t "My Song" -r "Some Artist" -c -y <parts>
      # Do a "dry run" of audio extraction, which checks if the parts exist
      # but does not do any conversion. Exits with a non-zero code if any
      # part does not exist.

      jammittools -b dir
      # Full library backup: runs -x for each song in your library.
      # Each song is extracted to its own folder within "dir".

  Other lesser-used flags:

      -j /path/to/jammit/lib
      # On Windows and OS X, the official app's library location is used
      # if you do not specify this flag.
      # You can also specify the environment variable JAMMIT.
      # Songs in the same folder as the program will also always be found.

      -T "My Song"
      # Exact search on title, instead of -t which is case-insensitive substring.

      -R "Some Artist"
      # Exact search on artist, instead of -r which is case-insensitive substring.

      -n <parts>
      # Allows you to invert certain audio parts when exporting a WAV file.
      # This can be used to access "hidden" parts that aren't a part of any
      # transcribed instrument part, see below.

      -l <number>
      # Select the number of sheet music systems per page.
      # One system contains a line from each individual part.
      # If this flag is not given, an appropriate number of systems will be chosen
      # to get close to an 8.5" by 11" page ratio.

      --raw
      # For -x and -b options, exports all original backing tracks separately
      # instead of producing a combined one.

  Instrument parts are given by this somewhat terse syntax:

      g - Guitar (1)
      r - Guitar 2
      b - Bass (1)
      a - Bass 2
      d - Drums (1)
      m - Drums 2
      k - Keyboard (1)
      y - Keyboard 2
      p - Piano
      s - Synth
      o - Organ
      v - Vocals (Lead)
      x - Vocals (Backing)
      GRBA - in sheet music, tab instead of notation
      GBDKV - in audio, the backing track for an instrument

  So, for example, to make a backing track consisting of just drums and bass:

      jammittools <search parameters> -a out.wav -y db

  To make a sheet music file with Guitar 1's notation and tab interleaved:

      jammittools <search parameters> -s out.pdf -y gG

  ## Accessing hidden parts

  Not all the audio in a song has been transcribed and sold by Jammit. Things such
  as sound-effects, other instruments like violin, and occasionally third guitar
  or keyboard parts are "hidden" inside the backing tracks for every instrument
  package that you can purchase. You can listen to these parts by performing
  audio subtraction, where you take two audio files, invert one of them, and then
  mix them together.

  Let's say you own all 5 instruments for a song. You can access the "hidden"
  track with a command similar to the following:

      jammittools <search parameters> -a out.wav -y D -n grbkyvx

  This uses the `-n` flag to mix many audio files in after inverting them.
  The `D` part is the backing track for the drums package. What this does is
  subtract the non-drums instrument parts from this backing track, leaving you
  with just the portion of the song that isn't present in any of the transcribed
  parts. If you use the `-x` or `-b` options to export all parts of a song, this
  process will be done for you and placed in a file called `backing.wav`.

  The resulting file has a thin layer of noise, because all the audio used in
  Jammit is lossily encoded, which means the backing tracks are not quite perfect
  mixes of their constituent parts. But the results are generally pretty good,
  and you can easily use something like [Audacity]'s noise filter to clean it up
  further. Using the drums backing track as a base is preferred, because drums
  leaves the most audible noise when you remove it from a different backing track.

  [Audacity]: http://audacity.sourceforge.net/
description-type: markdown
hash: 0dc1d6345fb573b6ca10cc873b450df2974418a1c2fb0b49357133a61b32e92d
homepage: https://github.com/mtolly/jammittools
latest: 0.5.5.2
license-name: GPL-3.0-only
maintainer: miketolly@gmail.com
synopsis: Export sheet music and audio from Windows/Mac app Jammit
test-bench-deps: {}
