all-versions:
- 0.2.0
author: Andy Gill
basic-deps:
  aeson: '>=1.4 && <1.5'
  base: '>=4.9 && <4.14'
  binary: '>=0.8 && <0.9'
  containers: '>=0.5 && <0.7'
  javascript-bridge: '>=0'
  scotty: '>=0.11 && <0.12'
  stm: '>=2.4 && <2.6'
  text: '>=1.2 && <1.3'
  time: '>=1.6 && <1.10'
  transformers: '>=0.4 && <0.6'
  wai: '>=3.2 && <3.3'
  wai-websockets: '>=3.0.1 && <3.1'
  websockets: '>=0.10 && <0.13'
changelog: |+
  ## 0.2
  * First public release

changelog-type: markdown
description: |
  # javascript-bridge [![Build Status](https://img.shields.io/travis/ku-fpg/javascript-bridge.svg?style=flat)](https://travis-ci.org/ku-fpg/javascript-bridge)

  **javascript-bridge** is a straightforward way of calling JavaScript
  from Haskell, using web-sockets as the underlying transport
  mechanism. Conceptually, javascript-bridge gives Haskell acccess to
  the JavaScript `eval` function.  However, we also support calling and
  returning values from JavaScript functions, constructing and using
  remote objects, and sending events from JavaScript to Haskell, all
  using a remote monad.

  # Overview of API

  **javascript-bridge** remotely executes JavaScript *fragments*.
  The basic Haskell idiom is.
  ```Haskell
       send eng $ command "console.log('Hello!')"
  ```
  where `send` is an `IO` function that sends a commands for remote execution,
  `eng` is a handle into a specific JavaScript engine,
  and `command` is a command builder.

  There are also ways synchronously sending a `procedure`,
  that is a JavaScript expression that constructs a value,
  then returns the resulting value.

  ```Haskell
    do xs :: String <- send eng $ procedure "new Date().toLocaleTimeString()"
       print xs
  ```

  There are ways of creating remote values, for future use,
  where Haskell has a handle for this remote value.

  ```Haskell
  data Date = Date -- phantom

    do t :: RemoteValue Date <- send eng $ constructor "new Date()"
       send eng $ procedure $ "console.log(" <> var t <> ".toLocaleTimeString())"
  ```

  Finally, there is a way of sending events from JavaScript,
  then listening for the event in Haskell.

  ```Haskell
    do -- Have JavaScript send an event to Haskell
       send eng $ command $ event ('Hello!'::String)"
       -- Have Haskell wait for the event, which is an Aeson 'Value'.
       e :: Value <- listen eng
       print e
  ```

  # Bootstrapping

  Bootstrapping the connection is straightforward.
  First, use a `middleware` to setup the (Haskell) server.

  ```Haskell
  import Network.JavaScript

          ...
          scotty 3000 $ do
            middleware $ start app
            ...

  app :: Engine -> IO ()
  app eng = send eng $ command "console.log('Hello!')"
  ```

  Next, include the following fragment in your HTML code.

  ```HTML
      <script>
          window.jsb = {ws: new WebSocket('ws://' + location.host)};
          jsb.ws.onmessage = (evt) => eval(evt.data);
      </script>
  ```

  That's it!
description-type: markdown
hash: 851bf3abef5b7ee66dc2019d818288d9ea4dbeb8bc90de92eca75d08a5db6eec
homepage: ''
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: andygill@ku.edu
synopsis: Remote Monad for JavaScript on the browser
test-bench-deps:
  aeson: '>=1.0 && <1.5'
  base: '>=4.9 && <4.14'
  javascript-bridge: '>=0'
  scotty: '>=0.11 && <0.12'
  stm: '>=2.4 && <2.6'
  text: '>=1.2 && <1.3'
  time: '>=1.6 && <1.10'
  wai-extra: '>=3.0 && <3.1'
