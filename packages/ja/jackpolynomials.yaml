all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
- 1.1.0.1
- 1.1.1.0
- 1.1.2.0
- 1.2.0.0
- 1.2.1.0
- 1.2.2.0
- 1.3.0.0
- 1.4.0.0
- 1.4.1.0
author: StÃ©phane Laurent
basic-deps:
  array: '>=0.5.4.0 && <0.6'
  base: '>=4.7 && <5'
  combinat: '>=0.2.10 && <0.3'
  containers: '>=0.6.4.1 && <0.8'
  extra: '>=1.7 && <1.8'
  hspray: '>=0.5.0.0 && <0.6.0.0'
  ilist: '>=0.4.0.1 && <0.4.1'
  lens: '>=5.0.1 && <5.3'
  numeric-prelude: '>=0.4.4 && <0.5'
  unordered-containers: '>=0.2.17.0 && <0.3'
changelog: "1.0.0.0\r\n-------\r\n* initial release\r\n\r\n1.0.0.1\r\n-------\r\n*
  removed the upper bounds of the dependencies\r\n\r\n1.1.0.0\r\n-------\r\n* replaced
  the **mpolynomials** dependency with **hspray**\r\n* unit tests\r\n\r\n1.1.0.1\r\n-------\r\n*
  unexported some useless functions\r\n* one more unit test\r\n\r\n1.1.1.0\r\n-------\r\n*
  `schurPol` now returns a `Spray a`\r\n* added package upper bounds in the cabal
  file\r\n* increased the version of the dependencies **hspray** and **hypergeomatrix**\r\n*
  cleaned the code\r\n* tested with higher versions of GHC\r\n* new unit tests\r\n\r\n1.1.2.0\r\n-------\r\n*
  skew Schur polynomials (functions `skewSchur` and `skewSchurPol`)\r\n\r\n1.2.0.0\r\n-------\r\n*
  it is now possible to choose which Jack polynomial to get or evaluate, \r\n`J`,
  `C`, `P` or `Q` (the previous versions returned `J` only)\r\n\r\n* it is now possible
  to get Jack polynomials with a symbolic Jack parameter\r\n\r\n1.2.1.0\r\n-------\r\n*
  a new module provides some stuff to deal with symmetric polynomials, mainly \r\nsome
  functions to print them as a linear combination of the monomial symmetric \r\npolynomials,
  and a function to check the symmetry\r\n\r\n1.2.2.0\r\n-------\r\n* slight modifications
  due to the upgrade of **hspray**\r\n\r\n1.3.0.0\r\n-------\r\n* the type of the
  Jack polynomials with a symbolic Jack parameter has changed \r\nfrom `OneParameterSpray
  a` to `ParametricSpray a`\r\n\r\n1.4.0.0\r\n-------\r\n* upgraded the **hspray**
  dependency (an error has been fixed in this new \r\nversion)\r\n\r\n* added the
  Laplace-Beltrami operator and the Calogero-Sutherland operator; \r\nthe Jack polynomials
  are eigenpolynomials of these operators\r\n\r\n1.4.1.0\r\n-------\r\n* new function
  `psPolynomial`, to get a power sum symmetric polynomial\r\n\r\n* new function `psCombination`,
  to get a symmetric polynomial as a linear \r\ncombination of some power sum polynomials\r\n\r\n*
  new function `hallInnerProduct`, to compute the Hall inner product between \r\ntwo
  symmetric polynomials, and there is also the function \r\n`symbolicHallInnerProduct`,
  to get the Hall inner product with a symbolic \r\nparameter"
changelog-type: markdown
description: "# jackpolynomials\r\n\r\n***Jack, zonal, Schur and skew Schur polynomials.***\r\n\r\n<!--
  badges: start -->\r\n[![Stack-lts](https://github.com/stla/jackpolynomials/actions/workflows/Stack-lts.yml/badge.svg)](https://github.com/stla/jackpolynomials/actions/workflows/Stack-lts.yml)\r\n[![Stack-nightly](https://github.com/stla/jackpolynomials/actions/workflows/Stack-nightly.yml/badge.svg)](https://github.com/stla/jackpolynomials/actions/workflows/Stack-nightly.yml)\r\n<!--
  badges: end -->\r\n\r\nSchur polynomials have applications in combinatorics and
  zonal polynomials have\r\napplications in multivariate statistics. They are particular
  cases of\r\n[Jack polynomials](https://en.wikipedia.org/wiki/Jack_function). This
  package\r\nallows to evaluate these polynomials and to compute them in symbolic
  form.\r\n\r\n___\r\n\r\nEvaluation of the Jack polynomial with parameter `2` associated
  to the integer \r\npartition `[3, 1]`, at `x1 = 1` and `x2 = 1`:\r\n\r\n```haskell\r\nimport
  Math.Algebra.Jack\r\njack' [1, 1] [3, 1] 2 'J'\r\n-- 48 % 1\r\n```\r\n\r\nThe non-evaluated
  Jack polynomial:\r\n\r\n```haskell\r\nimport Math.Algebra.JackPol\r\nimport Math.Algebra.Hspray\r\njp
  = jackPol' 2 [3, 1] 2 'J'\r\nputStrLn $ prettyQSpray jp\r\n-- 18*x^3.y + 12*x^2.y^2
  + 18*x.y^3\r\nevalSpray jp [1, 1]\r\n-- 48 % 1\r\n```\r\n\r\nThe first argument,
  here `2`, is the number of variables of the polynomial.\r\n\r\n\r\n### Symbolic
  Jack parameter\r\n\r\nAs of version `1.2.0.0`, it is possible to get Jack polynomials
  with a \r\nsymbolic Jack parameter:\r\n\r\n```haskell\r\nimport Math.Algebra.JackSymbolicPol\r\nimport
  Math.Algebra.Hspray\r\njp = jackSymbolicPol' 2 [3, 1] 'J'\r\nputStrLn $ prettyParametricQSpray
  jp\r\n-- { [ 2*a^2 + 4*a + 2 ] }*X^3.Y + { [ 4*a + 4 ] }*X^2.Y^2 + { [ 2*a^2 + 4*a
  + 2 ] }*X.Y^3\r\nputStrLn $ prettyQSpray' $ substituteParameters jp [2]\r\n-- 18*x^3.y
  + 12*x^2.y^2 + 18*x.y^3\r\n```\r\n\r\nThis is possible thanks to the **hspray**
  package which provides the type \r\n`ParametricSpray`. An object of this type represents
  a multivariate polynomial \r\nwhose coefficients depend on some parameters which
  are symbolically treated. \r\nThe type of the Jack polynomial returned by the `jackSymbolicPol`
  function is \r\n`ParametricSpray a`, and it is `ParametricQSpray` for the `jackSymbolicPol'`
  \r\nfunction. The type `ParametricQSpray` is an alias of `ParametricSpray Rational`.\r\n\r\nFrom
  the definition of Jack polynomials, as well as from their implementation \r\nin
  this package, the coefficients of the Jack polynomials are \r\n*fractions of polynomials*
  in the Jack parameter. However, in the above \r\nexample, one can see that the coefficients
  of the Jack polynomial `jp` are \r\n*polynomials* in the Jack parameter `a`. This
  fact actually is always true for \r\nthe $J$-Jack polynomials (not for $C$, $P$
  and $Q$). This is a consequence of \r\nthe Knop & Sahi combinatorial formula. But
  be aware that in spite of this fact, \r\nthe coefficients of the polynomials returned
  by Haskell are *fractions* of \r\npolynomials, in the sense that this is the nature
  of the `ParametricSpray` \r\nobjects. \r\n\r\nNote that if you use the function
  `jackSymbolicPol` to get a \r\n`ParametricSpray Double` object in the output, it
  is not guaranted that you \r\nwill visually get some polynomials in the Jack parameter
  for the coefficients, \r\nbecause the arithmetic operations are not exact with the
  `Double` type\r\n\r\n\r\n### Showing symmetric polynomials\r\n\r\nAs of version
  1.2.1.0, there is a module providing some functions to print a \r\nsymmetric polynomial
  as a linear combination of the monomial symmetric \r\npolynomials. This can considerably
  shorten the expression of a symmetric \r\npolynomial as compared to its expression
  in the canonical basis, and the \r\nmotivation to add this module to the package
  is that any Jack polynomial is \r\na symmetric polynomial. Here is an example:\r\n\r\n```haskell\r\nimport
  Math.Algebra.JackPol\r\nimport Math.Algebra.SymmetricPolynomials\r\njp = jackPol'
  3 [3, 1, 1] 2 'J'\r\nputStrLn $ prettySymmetricQSpray jp\r\n-- 42*M[3,1,1] + 28*M[2,2,1]\r\n```\r\n\r\nAnd
  another example, with a symbolic Jack polynomial:\r\n\r\n```haskell\r\nimport Math.Algebra.JackSymbolicPol\r\nimport
  Math.Algebra.SymmetricPolynomials\r\njp = jackSymbolicPol' 3 [3, 1, 1] 'J'\r\nputStrLn
  $ prettySymmetricParametricQSpray [\"a\"] jp\r\n-- { [ 4*a^2 + 10*a + 6 ] }*M[3,1,1]
  + { [ 8*a + 12 ] }*M[2,2,1]\r\n```\r\n\r\nOf course you can use these functions
  for other polynomials, but carefully: \r\nthey do not check the symmetry. This new
  module provides the function \r\n`isSymmetricSpray` to check the symmetry of a polynomial,
  much more efficient \r\nthan the function with the same name in the **hspray** package.\r\n\r\n\r\n###
  Hall inner product\r\n\r\nAs of version 1.4.1.0, the package provides an implementation
  of the Hall \r\ninner product with parameter. It is known that the Jack polynomials
  with \r\nJack parameter $\\alpha$ are orthogonal for the Hall inner product with
  \r\nparameter $\\alpha$. \r\n\r\nThere is a function `hallInnerProduct` as well
  as a function \r\n`symbolicHallInnerProduct`. The latter allows to get the Hall
  inner product \r\nof two symmetric polynomials without substituting a value to the
  parameter \r\n$\\alpha$. The Hall inner product of two symmetric polynomials is
  a polynomial \r\nin $\\alpha$, so the result of `symbolicHallInnerProduct` is a
  `Spray` object.\r\n\r\nLet's see a first example with a power sum polynomial. These
  symmetric \r\npolynomials are implemented in the package. We display the result
  by using \r\n`alpha` to denote the parameter of the Hall product.\r\n\r\n```haskell\r\nimport
  Math.Algebra.SymmetricPolynomials \r\nimport Math.Algebra.Hspray hiding (psPolynomial)\r\npsPoly
  = psPolynomial 4 [2, 1, 1] :: QSpray\r\nhip = symbolicHallInnerProduct psPoly psPoly\r\nputStrLn
  $ prettyQSprayXYZ [\"alpha\"] hip\r\n-- 4*alpha^3\r\n```\r\n\r\nNow let's consider
  the following situation. We want to get the symbolic Hall \r\ninner product of a
  Jack polynomial with itself, and we deal with a symbolic \r\nJack parameter in this
  polynomial. We denote it by `t` to distinguish it from \r\nthe parameter of the
  Hall product that we still denote by `alpha`.\r\n\r\nThe signature of the `symbolicHallInnerProduct`
  is a bit misleading:\r\n```haskell\r\nSpray a -> Spray a -> Spray a\r\n```\r\nbecause
  the `Spray a` of the output is not of the same family as the two \r\n`Spray a` inputs:
  this is a univariate polynomial in $\\alpha$. \r\n\r\nWe use the function `jackSymbolicPol'`
  to compute a Jack polynomial. It\r\nreturns a `ParametricQSpray` spray, a type alias
  of `Spray RatioOfQSprays`.\r\n\r\n```haskell\r\nimport Math.Algebra.JackSymbolicPol\r\nimport
  Math.Algebra.SymmetricPolynomials \r\nimport Math.Algebra.Hspray \r\njp = jackSymbolicPol'
  2 [3, 1] 'P'\r\nhip = symbolicHallInnerProduct jp jp\r\nputStrLn $ prettyParametricQSprayABCXYZ
  [\"t\"] [\"alpha\"] hip\r\n-- { [ 3*t^2 + 6*t + 11 ] %//% [ t^2 + 2*t + 1 ] }*alpha^2
  + { [ 4*t^2 + 16*t + 16 ] %//% [ t^2 + 2*t + 1 ] }*alpha\r\n```\r\n\r\nOne could
  be interested in computing the Hall inner product of a Jack \r\npolynomial with
  itself when the Jack parameter and the parameter of the \r\nHall product are identical.
  That is, we want to take `alpha = t` in the \r\nabove expression. Since the symbolic
  Hall product is a `ParametricQSpray` \r\nspray, one can substitute its variable
  `alpha` by a `RatioOfQSprays` \r\nobject. On the other hand, `t` represents a `QSpray`
  object, but one can \r\nidentify a `QSpray` to a `RatioOfQSprays` by taking the
  unit spray as the \r\ndenominator, that is, by applying the `asRatioOfSprays` function.
  Finally \r\nwe get the desired result if we evaluate the symbolic Hall product by
  \r\nreplacing `alpha` with `asRatioOfSprays (qlone 1)`, since `t` is the \r\nfirst
  polynomial variable, `qlone 1`. \r\n\r\n```haskell\r\nprettyRatioOfQSpraysXYZ [\"t\"]
  $ evaluate hip [asRatioOfSprays (qlone 1)]\r\n-- [ 3*t^4 + 10*t^3 + 27*t^2 + 16*t
  ] %//% [ t^2 + 2*t + 1 ]\r\n```\r\n\r\n\r\n\r\n## References\r\n\r\n* I.G. Macdonald.
  *Symmetric Functions and Hall Polynomials*. Oxford Mathematical Monographs. The
  Clarendon Press Oxford University Press, New York, second edition, 1995.\r\n\r\n*
  J. Demmel and P. Koev. *Accurate and efficient evaluation of Schur and Jack functions*.
  Mathematics of computations, vol. 75, n. 253, 223-229, 2005.\r\n\r\n* Jack polynomials.
  <https://www.symmetricfunctions.com/jack.htm>.\r\n"
description-type: markdown
hash: 33cc189b53f254887ec63229e751a71689d3526b1f1d1aaaa263b330217ead23
homepage: https://github.com/stla/jackpolynomials#readme
latest: 1.4.1.0
license-name: GPL-3.0-only
maintainer: laurent_step@outlook.fr
synopsis: Jack, zonal, Schur and skew Schur polynomials
test-bench-deps:
  base: '>=4.7 && <5'
  combinat: '>=0.2.10 && <0.3'
  containers: '>=0.6.4.1 && <0.8'
  hspray: '>=0.5.0.0 && <0.6.0.0'
  hypergeomatrix: '>=1.1.0.2 && <2'
  jackpolynomials: '>=0'
  miniterion: '>=0.1.1.0 && <0.2'
  tasty: '>=1.4 && <1.6'
  tasty-hunit: '>=0.10 && <0.11'
