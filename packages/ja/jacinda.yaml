all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 2.0.0.0
- 2.0.1.0
- 2.0.2.0
- 3.0.0.0
- 3.0.1.0
- 3.0.1.1
- 3.0.2.0
- 3.1.0.0
- 3.1.0.1
- 3.1.1.0
author: Vanessa McHale
basic-deps:
  base: '>=0'
  jacinda: '>=0'
  optparse-applicative: '>=0.14.1.0'
  text: '>=0'
changelog: "# 3.1.1.0\n\n  * Add `reintercalate` builtin\n  * Save a few hundred Î¼s
  by not using recursion schemes\n\n# 3.1.0.1\n\n  * Fix package description (.cabal)\n\n#
  3.1.0.0\n\n  * Add support for CSV via the `--csv` flag and `:set csv`\n  * Add
  `~?` (maybe match)\n\n# 3.0.2.0\n\n  * Fix list indexing\n  * Remove `foldTwo` from
  the Jacinda prelude\n  * Add `head#, `tail#`, `init#`, `last#`, `drop#`, `take#`
  for lists\n\n# 3.0.1.1\n\n  * Fix bug with tuples in implicit contexts.\n  * `fp`
  is defined (as `(stdin)`) when reading from stdin\n  * Bug in row typing for fields
  where `->0` is treated as legitimate and fails\n    with unclear error at runtime\n\n#
  3.0.1.0\n\n  * Add `,,` (bookend)\n  * Add `$>`; stream-and-report\n\n# 3.0.0.0\n\n
  \ * Rewrite backend to always stream/not blow up memory\n  * Better error messages
  when a field is out of bounds\n  * Better error message on empty `|>` (`fold1`)\n
  \ * Fix parsing bug in curried binary operators\n  * Add `--asv` and `--usv` command-line
  flags\n  * Add `:set asv;` `:set usv;` to language\n  * Add `Witherable` instance
  for `List`\n  * Add `subs` builtin\n\n# 2.0.3.0\n\n  * Handle some parsing/currying
  cases (still hinky)\n  * Add `sub1` builtin like AWK's `sub`\n  * Better presentation
  of regex engine errors\n  * Faster float printing\n  * Rewrite pretty-printer to
  parenthesize correctly.\n\n# 2.0.2.0\n\n  * Add support for custom record separators\n
  \ * Faster float parsing\n  * Add \\`$ builtin\n  * Allow escaped `/` within regex\n
  \ * Round out support for `$0:f` &c.\n\n# 2.0.1.0\n\n  * Add `mapMaybe`, `dedup`,
  `filter`, `fold`, `fold1`, `scan`, `dedupOn`,\n    `catMaybes` synonyms.\n\n# 2.0.0.0\n\n
  \ * Scrap `HasField` typeclass; add row types\n  * Expressions with multiple folds
  no longer blow up memory (\U0001F91E)\n  * Fix many bugs\n  * Unicode syntax works
  from command-line\n\n# 1.2.0.0\n\n  * `~`, `!~` builtins require that the regex
  be the second argument.\n\n# 1.1.0.0\n\n  * Add builtin for last field\n  * Performance
  improvements\n  * Fix bug in how fields were split\n  * `:` works on column literals\n
  \ * Add `#*` (list length) builtin\n\n# 1.0.0.0\n\n  * Generalize type of `\\.`
  (prior)\n  * Reintroduce monomorphism restriction (oops)\n  * Better errors for
  ambiguous types\n  * Multiple folds no longer blow up memory in some cases\n  *
  `option` can be curried (parse bug fixed)\n\n# 0.3.1.0\n\n  * Performance improvements\n
  \ * Bug fix, dfns are renamed properly\n  * Add `-.` negate function\n  * Work with
  shell shebangs\n  * Implement `=` for boolean\n  * Add `captures` as a builtin\n
  \ * Add `|>`, fold without seed\n  * Allow `fn...` declarations with no arguments
  and no parentheses\n  * Add conditionals\n  * Fix bug in normalizing `Some` and
  `None`\n  * Fix bug in indexing + filter\n  * Fix bug in polymorphic functions used
  at multiple sites\n  * Change parsing/rewrite so `f a b + c` parses as `(f a b)
  + c` rather than `f a (b + c)`\n  * Fix bug in parser rewriting in `@include`d files\n
  \ * Include searches current directory\n\n# 0.3.0.0\n\n  * Fix renaming bug that
  was inveigling folds with lambdas\n  * Add `nf` builtin\n  * Add deduplication builtin
  (`~.`)\n  * Add anchor ability to print multiple streams\n  * Make `Option` a functor\n
  \ * Add `Witherable` class, `:?` (mapMaybe)\n  * Allow file `@include`s (crude library
  capability)\n  * Fix typos in manpage\n\n# 0.2.1.0\n\n  * Add `fp` builtin\n  *
  Add `:` unary operator\n  * Floor/ceiling operators\n  * `Some` and `None` literals\n\n#
  0.2.0.0\n\n  * Complete implementation of folds/maps for lists\n  * Fix space leak
  in folds\n  * Fix line splitting (no longer discard blank lines)\n  * Dfn fix\n
  \ * Allow escaped characters in strings\n  * Add several builtin functions\n  *
  Location information when reporting errors related to typeclasses\n  * Option type\n
  \ * Selectors for tuples\n\n# 0.1.0.0\n\n* Initial release\n"
changelog-type: markdown
description: |
  Jacinda is a functional pattern sifting language,
  a smaller [AWK](http://www.awklang.org).

  # Installation

  ## Releases

  There are binaries for some platforms on the [releases page](https://github.com/vmchale/jacinda/releases/).

  If you are on Mac, you will need to install `*-librure.dylib` as well.

  ## From Source

  First, install [Rust's regex library](https://github.com/rust-lang/regex/tree/master/regex-capi#c-api-for-rusts-regex-engine). You'll need to put `librure.so` or `librure.dylib` etc. in the appropriate place.

  If you have [cabal](https://www.haskell.org/cabal/) and [GHC](https://www.haskell.org/ghc/) installed (perhaps via [ghcup](https://www.haskell.org/ghcup/)):

  ```
  cabal install jacinda
  ```

  ## Editor Support

  There is a [vim plugin](https://github.com/vmchale/jacinda-vim) and a [VSCode extension](https://marketplace.visualstudio.com/items?itemName=vmchale.jacinda).

  # Usefulness

  Unix uses record separators in many places; we can display one entry in the
  `PATH` variable with:

  ```
  echo $PATH | ja -F: "{|[x+'\n'+y]|>\`$}"
  ```

  Many Unix tools output much information separated with spaces. We use regular
  expressions to match relevant lines and then select the field with the data
  itself, viz.

  ```
  otool -l $(locate libpng.dylib) | ja '{`1 ~ /^name/}{`2}'
  ```

  To get the value of a variable (say, `PATH`) from the output of `printenv`:

  ```
  printenv | ja -F= '{%/^PATH/}{`2}'
  ```

  ## Rosetta

  Replace

  ```awk
  NF == 1 && $1 != "}" {
    haveversion[$1] = 1
  }
  END {
    for (i in haveversion)
      printf "have-%s = yes\n", i
  }
  ```

  with

  ```
  (sprintf 'have-%s = yes')" ~.{nf=1 & `1 != '}'}{`1}
  ```

  # Documentation

  See the [guide](https://vmchale.github.io/jacinda/), which contains a tutorial
  on some of the features as well as examples.

  The manpages document the builtins and provide a syntax reference.

  # Status

  ## Missing Features & Bugs

    * No nested dfns
    * No list literal syntax
    * Postfix `:f` and `:i` are handled poorly
    * Streams of functions don't work
    * Higher-order functions are subtly broken

  Intentionally missing features:

    * No loops

  # Advantages

    * [Rust's regular expressions](https://docs.rs/regex/)
      - extensively documented with Unicode support
    * Deduplicate builtin

  # Contributing

  I have rewritten the code several times so forking and applying patches is fraught!

  Bug reports are welcome contributions.
description-type: markdown
hash: c6f18e19d463f7e3e09887f324f5969412bb43951b791e70f40794fba4fdb6b5
homepage: ''
latest: 3.1.1.0
license-name: AGPL-3.0-only
maintainer: vamchale@gmail.com
synopsis: Functional, expression-oriented data processing language
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  jacinda: '>=0'
  silently: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
