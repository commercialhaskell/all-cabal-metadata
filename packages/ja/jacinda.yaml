all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 2.0.0.0
- 2.0.1.0
author: Vanessa McHale
basic-deps:
  base: '>=0'
  jacinda: '>=0'
  optparse-applicative: '>=0.14.1.0'
  text: '>=0'
changelog: "# 2.0.1.0\n\n  * Add `mapMaybe`, `dedup`, `filter`, `fold`, `fold1`, `scan`,
  `dedupOn`,\n    `catMaybes` synonyms.\n\n# 2.0.0.0\n\n  * Scrap `HasField` typeclass;
  add row types\n  * Expressions with multiple folds no longer blow up memory (\U0001F91E)\n
  \ * Fix many bugs\n  * Unicode syntax works from command-line\n\n# 1.2.0.0\n\n  *
  `~`, `!~` builtins require that the regex be the second argument.\n\n# 1.1.0.0\n\n
  \ * Add builtin for last field\n  * Performance improvements\n  * Fix bug in how
  fields were split\n  * `:` works on column literals\n  * Add `#*` (list length)
  builtin\n\n# 1.0.0.0\n\n  * Generalize type of `\\.` (prior)\n  * Reintroduce monomorphism
  restriction (oops)\n  * Better errors for ambiguous types\n  * Multiple folds no
  longer blow up memory in some cases\n  * `option` can be curried (parse bug fixed)\n\n#
  0.3.1.0\n\n  * Performance improvements\n  * Bug fix, dfns are renamed properly\n
  \ * Add `-.` negate function\n  * Work with shell shebangs\n  * Implement `=` for
  boolean\n  * Add `captures` as a builtin\n  * Add `|>`, fold without seed\n  * Allow
  `fn...` declarations with no arguments and no parentheses\n  * Add conditionals\n
  \ * Fix bug in normalizing `Some` and `None`\n  * Fix bug in indexing + filter\n
  \ * Fix bug in polymorphic functions used at multiple sites\n  * Change parsing/rewrite
  so `f a b + c` parses as `(f a b) + c` rather than `f a (b + c)`\n  * Fix bug in
  parser rewriting in `@include`d files\n  * Include searches current directory\n\n#
  0.3.0.0\n\n  * Fix renaming bug that was inveigling folds with lambdas\n  * Add
  `nf` builtin\n  * Add deduplication builtin (`~.`)\n  * Add anchor ability to print
  multiple streams\n  * Make `Option` a functor\n  * Add `Witherable` class, `:?`
  (mapMaybe)\n  * Allow file `@include`s (crude library capability)\n  * Fix typos
  in manpage\n\n# 0.2.1.0\n\n  * Add `fp` builtin\n  * Add `:` unary operator\n  *
  Floor/ceiling operators\n  * `Some` and `None` literals\n\n# 0.2.0.0\n\n  * Complete
  implementation of folds/maps for lists\n  * Fix space leak in folds\n  * Fix line
  splitting (no longer discard blank lines)\n  * Dfn fix\n  * Allow escaped characters
  in strings\n  * Add several builtin functions\n  * Location information when reporting
  errors related to typeclasses\n  * Option type\n  * Selectors for tuples\n\n# 0.1.0.0\n\n*
  Initial release\n"
changelog-type: markdown
description: |
  Jacinda is a functional, expression-oriented data processing language,
  complementing [AWK](http://www.awklang.org).

  # Installation

  ## Releases

  There are binaries for some platforms on the [releases page](https://github.com/vmchale/jacinda/releases/).

  If you are on Mac, you will need to install `*-librure.dylib` as well.

  ## From Source

  First, install [Rust's regex library](https://github.com/rust-lang/regex/tree/master/regex-capi#c-api-for-rusts-regex-engine). You'll need to put `librure.so` or `librure.dylib` etc. in the appropriate place.

  If you have [cabal](https://www.haskell.org/cabal/) and [GHC](https://www.haskell.org/ghc/) installed (perhaps via [ghcup](https://www.haskell.org/ghcup/)):

  ```
  cabal install jacinda
  ```

  ## Editor Support

  There is a [vim plugin](https://github.com/vmchale/jacinda-vim) and a [VSCode extension](https://marketplace.visualstudio.com/items?itemName=vmchale.jacinda).

  # SHOCK & AWE

  ```
  curl -sL https://raw.githubusercontent.com/nychealth/coronavirus-data/master/latest/now-weekly-breakthrough.csv | \
      ja ',[1.0-x%y] {ix>1}{`5:} {ix>1}{`17:}' -F,
  ```

  ## Rosetta

  Replace

  ```awk
  NF == 1 && $1 != "}" {
    haveversion[$1] = 1
  }
  END {
    for (i in haveversion)
      printf "have-%s = yes\n", i
  }
  ```

  with

  ```
  (sprintf 'have-%s = yes')" ~.{nf=1 & `1 != '}'}{`1}
  ```

  # Documentation

  See the [guide](https://vmchale.github.io/jacinda/), which contains a tutorial
  on some of the features as well as examples.

  The manpages document the builtins and provide a syntax reference.

  # Status

  ## Missing Features & Bugs

    * No nested dfns
    * No list literal syntax
    * Postfix `:f` and `:i` are handled poorly
    * Polymorphic functions can't be instantiated with separate types (global
      monomorphism restriction)

  Intentionally missing features:

    * No loops

  # Advantages

    * [Rust's regular expressions](https://docs.rs/regex/)
      - extensively documented with Unicode support
    * Deduplicate builtin
description-type: markdown
hash: 6470aa8b5b43616338a4642098075caef7e5de719c0cf1fbf6a1b8eb0632a278
homepage: ''
latest: 2.0.1.0
license-name: AGPL-3.0-only
maintainer: vamchale@gmail.com
synopsis: Functional, expression-oriented data processing language
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  jacinda: '>=0'
  silently: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
