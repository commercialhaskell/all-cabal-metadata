all-versions:
- '0.1'
author: Keito Kajitani <ijaketak@gmail.com>
basic-deps:
  base: <4.20
  binary: <0.9
  bytestring: <0.13
  deepseq: <1.6
  hashable: <1.5
  primitive: <0.10
  random: '>=1.2 && <1.3'
  template-haskell: <2.22
  text: <2.2
  time: <1.13
changelog: |
  # Revision history for ulid-tight

  ## version 0

  ### 0.1 -- 2023-10-19

  * First version.
changelog-type: markdown
description: |
  # ulid-tight

  [![Hackage](https://img.shields.io/hackage/v/ulid-tight.svg)](https://hackage.haskell.org/package/ulid-tight)
  [![Haskell CI](https://github.com/ijaketak/ulid-tight/actions/workflows/haskell.yml/badge.svg)](https://github.com/ijaketak/ulid-tight/actions/workflows/haskell.yml)

  ulid-tight is one implementation of ULID.
  The data type Ulid consumes only 128-bit.

  For ULID, see <https://github.com/ulid/spec>.
description-type: markdown
hash: 0d9a2a8e74daf2cd64153696f8305de092f1e993ebf808048322a455b9f55aac
homepage: https://github.com/ijaketak/ulid-tight
latest: '0.1'
license-name: MIT
maintainer: Keito Kajitani <ijaketak@gmail.com>
synopsis: Another ULID implementation with tight memory representation
test-bench-deps:
  base: <4.20
  binary: <0.9
  hashable: <1.5
  hspec: <2.12
  primitive: <0.10
  random: '>=1.2 && <1.3'
  text: <2.2
  ulid-tight: '>=0'
