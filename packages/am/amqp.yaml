all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- '0.4'
- 0.4.1
- 0.4.2
- 0.5.0
- 0.6.0
- 0.7.0
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- '0.9'
- '0.10'
- 0.10.1
- '0.11'
- '0.12'
- 0.12.1
- 0.12.2
- 0.12.3
- 0.13.0
- 0.13.1
- 0.14.0
- 0.14.1
- 0.15.0
- 0.15.1
- 0.16.0
- 0.17.0
- 0.18.0
- 0.18.1
- 0.18.2
- 0.18.3
- 0.19.0
- 0.19.1
- 0.20.0
- 0.20.0.1
- 0.21.0
- 0.22.0
- 0.22.1
- 0.22.2
- 0.23.0
- 0.24.0
author: Holger Reinhardt
basic-deps:
  base: '>=4 && <5'
  binary: '>=0.5'
  bytestring: '>=0.9'
  clock: '>=0.4.0.1'
  containers: '>=0.2'
  crypton-connection: '>=0.4 && <=0.5'
  data-binary-ieee754: '>=0.4.2.1'
  data-default-class: '>=0.1'
  monad-control: '>=0.3'
  network: '>2.6'
  network-uri: '>=2.6'
  split: '>=0.2'
  stm: '>=2.4.0'
  text: '>=0.11.2'
  vector: '>=0'
  xml: '>=1.3 && <1.4'
changelog: "### Version 0.24.0\r\n\r\n* the `fromURI` method now returns `Either String
  ConnectionOpts` to better handle parsing-errors\r\n\r\n### Version 0.23.0\r\n\r\n*
  bump dependency bounds for `crypton-connection`\r\n\r\n### Version 0.22.2\r\n\r\n*
  replace `connection` dependency with `crypton-connection`\r\n\r\n### Version 0.22.1\r\n\r\n*
  fix a potential deadlock in `closeConnection`\r\n\r\n### Version 0.22.0\r\n\r\n*
  `closeChannel` now uses a `ChannelClosedException` to kill the channel-thread instead
  of `ThreadKilled`. This fixes a bug in 0.21.0 that led to errors being printed on
  the screen when `closeChannel` was called.\r\n\r\n### Version 0.21.0\r\n\r\n* added
  method `isNormalChannelClose`\r\n* Channels that have no explicit exception handlers
  (added using `addChannelExceptionHandler`) will now print all exceptions to `stderr`,
  even if those are not of type `ChannelClosedException`. This is an uncommon situation,
  so it should not have an observable effect for most users.\r\n\r\n### Version 0.20.0\r\n\r\n*
  `fromURI` now activates TLS if the URI starts with `ampqs://`. Previously it only
  changed the port, without activating TLS.\r\n* `fromURI` now supports multi-broker
  URIs in the form of `amqp://user:pass@host-1:port-2,host-2:port-2/vhost`\r\n\r\n###
  Version 0.19.1\r\n\r\n* add `nackMsg` and `nackEnv` methods\r\n\r\n### Version 0.19.0\r\n\r\n*
  change `FVString` to be binary instead of UTF-8 encoded\r\n\r\n### Version 0.18.3\r\n\r\n*
  respond to `channel.close` messages from the server with `channel.close_ok`\r\n\r\n###
  Version 0.18.2\r\n\r\n* support `connection` 0.3 and drop support for `network`
  < 2.6\r\n\r\n### Version 0.18.1\r\n\r\n* new function `addConnectionBlockedHandler`
  to be notified when the connection is blocked (due to the server being resource-constrained)\r\n\r\n###
  Version 0.18.0\r\n\r\n* `ConnectionClosedException` and `ChannelClosedException`
  now specify whether the close was normal (user-initiated) or abnormal (caused by
  an AMQP exception)\r\n* channels that are abnormally closed and have no exception
  handler (set using `addChannelExceptionHandler`) will now print the error to `stderr`\r\n*
  new function `getServerProperties` to get the RabbitMQ server-properties\r\n* `consumeMsgs'`
  now allows setting a consumer-cancellation-callback\r\n\r\n### Version 0.17.0\r\n\r\n*
  When the server asynchronously closed a channel, this was (erroneously) internally
  represented as a `ConnectionClosedException`. It is now represented as a `ChannelClosedException`.
  This could affect you if you explicitly match on `ConnectionClosedException` or
  `ChannelClosedException` in your code, for example when using `addChannelExceptionHandler`.\r\n\r\n###
  Version 0.16.0\r\n\r\n* new `coName` field in `ConnectionOpts` to specify a custom
  name that will be displayed in the RabbitMQ web interface\r\n\r\n### Version 0.15.1\r\n\r\n*
  export the `AckType` data-type and constructors\r\n\r\n### Version 0.15.0\r\n\r\n*
  The way channels are closed internally was changed. This may affect you if you have
  installed an exception handler inside the callback passed to `consumeMsgs`. Specifically,
  the exceptions used internally to close channels are now wrapped inside `ChanThreadKilledException`.
  You should make sure to re-throw this exception if you did catch it.\r\n\r\n###
  Version 0.14.1\r\n\r\n* show all exceptions if no host can be connected to\r\n\r\n###
  Version 0.14.0\r\n\r\n* publishMsg now returns the message sequence-number\r\n*
  new `TLSCustom` field in `TLSSettings`\r\n\r\n### Version 0.13.1\r\n\r\n* don't
  print to stderr when `openConnection` fails to connect to a broker\r\n\r\n### Version
  0.13.0\r\n\r\n* support for [RabbitMQ publisher confirms](http://www.rabbitmq.com/confirms.html)\r\n\r\n###
  Version 0.12.3\r\n\r\n* send version info of this library to RabbitMQ on connecting\r\n\r\n###
  Version 0.12.2\r\n\r\n* GHC 7.10 compatibility\r\n\r\n### Version 0.12.1\r\n\r\n*
  error messages now go to stderr\r\n\r\n### Version 0.12.0\r\n\r\n* new function
  addChannelExceptionHandler\r\n\r\n### Version 0.11.0\r\n\r\n* all content fields
  for messages are now supported\r\n\r\n### Version 0.10.0\r\n\r\n* the maximum number
  of channels can now be set\r\n\r\n### Version 0.9.0\r\n\r\n* add 'global' flag for
  qos\r\n\r\n### Version 0.8.3\r\n\r\n* implement closeChannel\r\n\r\n### Version
  0.8.0\r\n\r\n* TLS support\r\n* new helper function rejectEnv\r\n* new field exchangeArguments
  in ExchangeOpts\r\n* new module Network.AMQP.Lifted with consumeMsgs functions lifted
  to MonadBaseControl\r\n\r\n### Version 0.7.0\r\n\r\n* new function fromURI to parse
  AMQP URIs\r\n* heartbeat support\r\n\r\n### Version 0.6.0\r\n\r\n* new function
  addReturnListener which allows specifying a handler for returned messages\r\n* new
  function openConnection'' with support for most AMQP connection options\r\n* better
  error message on failed connection handshake\r\n\r\n### Version 0.5.0\r\n\r\n* support
  for AMQP 0-9-1\r\n* new function consumeMsgs' which allows you to pass in a field-table\r\n*
  new function bindExchange allows for binding an exchange to another exchange\r\n*
  new function unbindQueue allows unbinding a queue from an exchange\r\n* new function
  unbindExchange allows unbinding an exchange from an exchange\r\n\r\n### Version
  0.4.3\r\n\r\n* use Handles instead of sockets\r\n* fix deprecation warnings from
  Data.Binary\r\n\r\n### Version 0.4.2\r\n\r\n* add (Read, Ord, Eq, Show) instances
  for most data-types\r\n\r\n### Version 0.4.1\r\n\r\n* add queueHeaders field to
  QueueOpts\r\n\r\n### Version 0.4\r\n\r\n* Data.Text is now used instead of Strings.
  Using the _OverloadedStrings_ extension will make upgrading easier\r\n* the field-types
  in Network.AMQP.Types should now be more compatible with RabbitMQ\r\n* hostnames
  passed to openConnection will now be resolved\r\n* basic QoS support\r\n* exceptions
  thrown in a callback will not erroneously close the channel anymore\r\n"
changelog-type: markdown
description: Client library for AMQP servers (currently only RabbitMQ)
description-type: haddock
hash: ee78a72bb69b8a7a9e55712f086de3ea2cb428f3ebd34fd0a78c7076ca75ae2e
homepage: https://github.com/hreinhardt/amqp
latest: 0.24.0
license-name: BSD-3-Clause
maintainer: Holger Reinhardt <hreinhardt@gmail.com>
synopsis: Client library for AMQP servers (currently only RabbitMQ)
test-bench-deps:
  base: '>=4 && <5'
  binary: '>=0.5'
  bytestring: '>=0.9'
  clock: '>=0.4.0.1'
  containers: '>=0.2'
  crypton-connection: '>=0.4 && <=0.5'
  data-binary-ieee754: '>=0.4.2.1'
  data-default-class: '>=0.1'
  hspec: '>=1.3'
  hspec-expectations: '>=0.3.3'
  network: '>2.6'
  network-uri: '>=2.6'
  split: '>=0.2'
  stm: '>=2.4.0'
  text: '>=0.11.2'
  vector: '>=0'
