homepage: https://github.com/freckle/amazonka-mtl#readme
changelog-type: markdown
hash: 90b45a950c0e398b0e48d1447766f331c2ac3d5a72e15be2bf0be3b3c56159c3
test-bench-deps:
  amazonka-mtl: -any
  base: '>=4.14.3.0 && <5'
  time: -any
  hspec: -any
  text: -any
  Blammo: -any
  markdown-unlit: -any
  conduit: -any
  lens: -any
  amazonka-core: -any
  mtl: -any
  amazonka-s3: -any
maintainer: Freckle Education
synopsis: MTL-style type-class and deriving-via newtypes for Amazonka
changelog: |
  ## [_Unreleased_](https://github.com/freckle/amazonka-mtl/compare/v0.1.1.0...main)

  ## [v0.1.1.0](https://github.com/freckle/amazonka-mtl/compare/v0.1.0.0...v0.1.1.0)

  - Add `withAuth` and `localEnv`

  ## [v0.1.0.0](https://github.com/freckle/amazonka-mtl/tree/v0.1.0.0)

  First tagged pre-release.
basic-deps:
  amazonka: '>=2.0'
  base: '>=4.14.3.0 && <5'
  conduit: '>=1.3.4.2'
  lens: '>=4.19.2'
  unliftio-core: '>=0.2.0.1'
  amazonka-core: '>=2.0'
  mtl: '>=2.2.2'
  resourcet: '>=1.2.4.3'
all-versions:
- 0.1.0.0
- 0.1.1.0
author: ''
latest: 0.1.1.0
description-type: markdown
description: |
  # amazonka-mtl

  [![Hackage](https://img.shields.io/hackage/v/amazonka-mtl.svg?style=flat)](https://hackage.haskell.org/package/amazonka-mtl)
  [![Stackage Nightly](http://stackage.org/package/amazonka-mtl/badge/nightly)](http://stackage.org/nightly/package/amazonka-mtl)
  [![Stackage LTS](http://stackage.org/package/amazonka-mtl/badge/lts)](http://stackage.org/lts/package/amazonka-mtl)
  [![CI](https://github.com/freckle/amazonka-mtl/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/amazonka-mtl/actions/workflows/ci.yml)

  MTL-style type-class and deriving-via newtypes for Amazonka.

  ## Example

  This package allows incorporation of AWS actions into any MTL-style function,

  <!--
  ```haskell
  {-# OPTIONS_GHC -Wno-unused-top-binds #-}

  module Main (main) where

  import Prelude

  import Amazonka.S3 (BucketName)
  import Control.Monad.Reader (MonadReader)
  import Text.Markdown.Unlit ()
  ```
  -->

  ```haskell
  import Amazonka.Data.Text (ToText(..))
  import Amazonka.S3.ListObjects
  import Amazonka.S3.Types.Object
  import Blammo.Logging
  import Conduit
  import Control.Lens hiding ((.=))
  import Control.Monad.AWS as AWS
  ```

  <!--
  ```haskell
  data Settings = Settings
    { settingsBucketName :: BucketName
    }

  class HasSettings env where
    settingsL :: Lens' env Settings

  instance HasSettings Settings where
    settingsL = id
  ```
  -->

  ```haskell
  someAction
    :: ( MonadIO m
       , MonadLogger m
       , MonadAWS m
       , MonadReader env m
       , HasSettings env
       )
    => m ()
  someAction = do
    Settings {..} <- view settingsL

    keys <-
      runConduit
        $ paginate (newListObjects settingsBucketName)
        .| concatMapC (^. listObjectsResponse_contents)
        .| concatC
        .| mapC (^. object_key . to toText)
        .| iterMC (\k -> logDebug $ k :# [])
        .| sinkList

    logInfo $ "Bucket contents" :# ["keys" .= keys]
  ```

  <!--
  ```haskell
  main :: IO ()
  main = pure ()
  ```
  -->

  This package also provides a number of options for execution:

  - Through a concrete transformer: `Control.Monad.AWS.EnvT`
  - Through your own reader env and deriving-via: `Control.Monad.AWS.ViaReader`

  This package also provides mechanisms for mocking AWS in tests:

  - Through a concrete transformer: `Control.Monad.AWS.MockT`
  - Through your own reader env and deriving-via: `Control.Monad.AWS.ViaMock`

  Please see the [documentation on hackage][hackage] for all the details.

  [hackage]: https://hackage.haskell.org/package/amazonka-mtl

  ## Development & Tests

  ```console
  stack build --fast --pedantic --test --file-watch
  ```

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
