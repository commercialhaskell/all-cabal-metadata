all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.4
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
author: Sebastian Graf
basic-deps:
  SafeSemaphore: '>=0'
  aeson: '>=0'
  async: '>=2.0.1 && <2.2'
  base: '>=4.6 && <5'
  binary: <0.9
  bytestring: <0.11
  concurrent-extra: <0.8
  conduit: '>=0'
  conduit-extra: '>=1.1.2 && <1.2'
  containers: '>=0.5 && <0.6'
  data-hash: <0.3
  directory: '>=1.2.0.0 && <1.3'
  distributed-process: '>=0.5 && <0.7'
  distributed-process-async: '>=0.1 && <0.3'
  distributed-process-client-server: '>=0.1 && <0.3'
  distributed-process-extras: '>=0.1 && <0.3'
  distributed-process-p2p: '>=0.1 && <0.2'
  extra: <2
  feed-gipeda: '>=0'
  file-embed: '>=0.0.10'
  filepath: '>=1.4.0.0 && <1.5'
  fsnotify: '>=0.2 && <0.3'
  logging: '>=3.0.4 && <3.1'
  network-uri: <2.7
  optparse-applicative: '>=0.11'
  process: '>=1.2.3 && <1.5'
  reactive-banana: '>=1 && <1.2'
  temporary: '>=1.1 && <1.3'
  text: <1.3
  time: '>=1.5 && <2'
  transformers: '>=0.2'
  yaml: '>=0.8.11 && <0.9'
changelog: ''
changelog-type: ''
description: "# feed-gipeda [![Build Status](https://travis-ci.org/sgraf812/feed-gipeda.svg?branch=master)](https://travis-ci.org/sgraf812/feed-gipeda)
  [![Hackage](https://img.shields.io/hackage/v/feed-gipeda.svg?flat=true)](https://hackage.haskell.org/package/feed-gipeda)\n\nA
  kitchen-sink tool to run [gipeda](https://hackage.haskell.org/package/gipeda) on
  a list of repositories after having run a benchmark script on each (repo, commit)
  pair that is yet to be benchmarked.\n\nThis will take all the necessary steps to
  update and deploy a `gipeda`-based site. Think Travis CI for benchmarks.\n\nUse
  this when you host a variety of repositories and want to display performance data
  about them. Although the defaults are biased towards Haskell projects using `cabal`/`stack`,
  the script to run on each new commit can be configured.\n\n## I think I could use
  this but I haven't understood a word\n\nThis is a high-level example setup of how
  to use it:\n\n![High-level architecture visualization](https://cdn.rawgit.com/sgraf812/feed-gipeda/master/docs/images/feed-gipeda.svg)\n\nBelow
  there is a detailed visualization of the FRP layer (of the master node):\n\n![master
  architecture visualization](https://cdn.rawgit.com/sgraf812/feed-gipeda/master/docs/images/master.svg)\n\nWithout
  any special flags, `feed-gipeda` will enter the build once mode (and then exit).\n\n`feed-gipeda`
  extracts repositories to watch from a \\*.yaml file (c.f. Config file). For each
  remote repository, a unique but human-readable directory (`<base-name>-<hash-of-URI>`)
  is created, under which a mirror repository resides in the `repository/` folder.\n\nEvery
  commit for which `gipeda` requests a benchmark (e.g. because there is no \\*.csv
  result file in `site/out/results`) causes a benchmark script to be run. The concrete
  example above uses [`cloben`](https://github.com/sgraf812/cloben) for that (it's
  also the default), but any other benchmark script which expects to be executed in
  the project folder and which writes its CSV output to `stdout` should do.\n\nEither
  after a benchmark finishes or a repository was fetched, `gipeda` is executed for
  both new commits to benchmark and for producing the website to be deployed via `rsync`
  to a remote location (`--deploy-to` flag).\n\n## `--watch` mode\n\nWhen `gipeda`
  requests no more benchmarks, `feed-gipeda` exits.\n\nThis can be changed\nvia the
  `--watch=SECONDS` option. If specified, `feed-gipeda` will enter a daemon mode\nand
  not exit if there is temporary nothing to benchmark. Instead, it will watch for\nchanges
  to the config file (handle updates to the watched repository list) and refetch\nall
  currently watched repositories every `SECONDS` seconds.\n\n## `--check` mode\n\nWith
  the `--check` flag supplied, `feed-gipeda` will check the config file\n(c.f. Config
  file, `--config`) for syntax errors and report them as an error.\nIt will successfully
  exit when it can find none.\n\n## How to get it to run\n\nThe following steps should
  get you all Haskell dependencies (using `cabal` in a similar way):\n\n```\n$ stack
  install cloben gipeda feed-gipeda\n```\n\nYou will also need to install the [system
  dependencies for gipeda](https://github.com/nomeata/gipeda#setting-it-up) (sorry,
  fellow Windows users!), as well as there must be `rsync` and `ssh` available on
  the path, if\nyou choose to `--deploy-to` some location.\n\nUsing `cloben` is of
  course optional, but the simplest option for benchmarking (if you want to benchmark
  `cabal`-conformant Haskell repositories).\n\nBy now, `$ feed-gipeda --help` should
  spit out maybe more up-to-date documentation than this README and you can read about
  supplying custom paths to various files such as the configuration file. For the
  sake of the example, we will use the default location, which is at `~/.feed-gipeda/feed-gipeda.yaml`.
  Put this into that file:\n\n```\nrepositories:\n- https://github.com/sgraf812/benchmark-test\n```\n\nIn
  `--watch` mode, that file would be watched for changes, so you can make it part
  of a git repository (like I did [here](https://github.com/sgraf812/.feed-gipeda))
  and fetch updates as part of a `cron` job.\n\nAlternatively, you can run `feed-gipeda`
  in the default mode (build once) any time you need updates.\n\nNow find yourself
  a quiet little tmp folder and run\n```\n$ feed-gipeda --help\n...\n$ feed-gipeda
  --deploy-to=some/local/path/if/you/want\n```\n\nFor some more usage examples, see
  the Cookbook section.\n\n## Config file\n\nContains the list of repositories to
  watch encoded in a YAML file. Is supplied via the `--config` option, which defaults
  to `~/.feed-gipeda/feed-gipeda.yaml` (resp. `%APPDATA%/Roaming/.feed-gipeda/feed-gipeda.yaml`
  on Windows).\n\nFor an example, see <https://github.com/sgraf812/.feed-gipeda> or
  the example 2 line file above.\nThe file must contain a top-level `repositories`
  mapping to a list of repository URIs.\n\n## Cookbook\n\n- `feed-gipeda`  \nEnter
  default mode (Exit when done). Read config from the default location (system-specific,
  see `--config` option under `--help`), act as both a master and a slave node.\n-
  `feed-gipeda --watch=5`  \nEnter watch mode. Watch for changes to config and re-fetch
  repositories every 5 seconds. Read config from the default location, act as both
  master and slave node\n- `feed-gipeda --check --config=~/.feed-gipeda/feed-gipeda.yaml`
  \ \nEnter check mode. Check the specified config file for syntax errors. Useful
  in a CI setting.\n- `feed-gipeda --master=12345`  \nEnter default mode. Dispatch
  benchmark requests on registered slave nodes, don't work on them in this process.\n-
  `feed-gipeda --slave=12346:127.0.0.1:12345`  \nEnter slave-only mode, listen on
  127.0.0.1:12346. Periodically try\nto register at the master node located at 127.0.0.1:12345
  which requests you to\ndo benchmarks.\n- `feed-gipeda --deploy-to=deploymentDir/`
  \ \nEnter default mode. Deploy changes via `rsync` to the local `deploymentDir`\n"
description-type: markdown
hash: aa90cd7bff4308e096717d90686db84b503d1562b08af5d21bfa7e02017c3cef
homepage: http://github.com/sgraf812/feed-gipeda#readme
latest: 0.3.0.1
license-name: BSD-3-Clause
maintainer: sgraf1337@gmail.com
synopsis: CI service around gipeda
test-bench-deps:
  HUnit: '>=0'
  async: '>=0'
  base: '>=4.6 && <5'
  bytestring: '>=0.10.0.0'
  conduit: '>=0'
  conduit-extra: '>=1.1.2'
  directory: <1.3
  exceptions: '>=0'
  feed-gipeda: '>=0'
  file-embed: '>=0.0.10'
  filepath: <1.5
  free: '>=0'
  fsnotify: '>=0.2 && <0.3'
  logging: '>=0'
  managed: '>=0'
  network-uri: <2.7
  process: '>=1.2.3 && <1.5'
  tasty: '>=0'
  tasty-hspec: '>=1.1.1'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  tasty-smallcheck: '>=0'
  temporary: '>=1.1'
  text: '>=0'
  transformers: '>=0.2.0.0'
