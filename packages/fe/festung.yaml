all-versions:
- 0.9.1.1
- 0.9.1.2
author: figo GmbH
basic-deps:
  aeson: '>=0'
  argparser: '>=0'
  async: '>=0'
  base: '>=4.9 && <5.0'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  containers: '>=0'
  directory: '>=0'
  either: <5
  exceptions: '>=0'
  festung: '>=0'
  filepath: '>=0'
  http-types: '>=0'
  mtl: '>=0'
  scientific: '>=0'
  sqlcipher: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  utf8-string: '>=0'
  vector: '>=0'
  wai: '>=0'
  yesod: '>=0'
  yesod-core: '>=0'
changelog: ''
changelog-type: ''
description: "# Festung\n\nRemote multi-db SQLCipher server exposing a REST API\n\n![](https://upload.wikimedia.org/wikipedia/commons/c/c1/SenjNehajgrad0.jpg)\n\n##
  Build\n\nThe `festung` container is built with the help of an auxiliary container
  called `steinmetz`.\nThe `steinmetz` container gathers and compiles all build dependencies,
  so that build process\nof `festung` itself is faster. You can build both containers
  by invoking `make` with no\ntarget.\n\n```sh\n$ make\n```\n\n## Run\n\nTo spin up
  a festung instance do\n\n```sh\n$ docker run --rm --tty --interactive --publish
  127.0.0.1:2728:2728 --name festung festung\n```\n\nor just do\n\n```sh\n$ make start\n```\n\nIf
  you want to persist the vaults between multiple runs, you either have to mount a
  directory\nfrom the host system or create a docker volume. The latter could be done
  by doing\n\n```sh\n$ docker volume create vaults\n```\n\nand then run festung like
  so\n\n```sh\n$ docker run --rm -it -p 127.0.0.1:2728:2728 --mount source=vaults,target=/var/festung
  --name festung festung\n```\n\n## Interact\n\nOnce you have a festung instance running
  you can interact with the API by using `curl`, `httpie` or an\nHTTP client of your
  choice.\n\nThe databases that are handled by festung are encrypted. The key is provided
  through the Authorization\nheader whose value is base64 encoded\n\n```sh\n$ echo
  foo | base64\nZm9vCg==\n```\n\nThe request body for issuing queries against festung
  contains the fields `sql` and `params`. To create a\nnew table `foo` in the database
  `1` (encrypted with the password `\"foo\"`) you can issue the following \nrequest:\n\n```json\n#
  http localhost:2728/1 Authorization:Zm9vCg== sql='CREATE TABLE foo (id INT, b VARCHAR)'
  params:='[]'\n{\n    \"data\": [],\n    \"headers\": [],\n    \"last_row_id\": 0,\n
  \   \"rows_changed\": 0\n}\n```\n\nThe `params` paramter can be used for parametrizing
  queries. Let's say we insterted some data in our\ntable\n\n```json\n# http localhost:2728/1
  Authorization:Zm9vCg== sql='INSERT INTO foo VALUES (1, \"b\")' params:='[]'\n{\n
  \   \"data\": [],\n    \"headers\": [],\n    \"last_row_id\": 0,\n    \"rows_changed\":
  0\n}\n```\n\nthen we could use `params` as follows:\n\n```json\n# http localhost:2728/1
  Authorization:Zm9vCg== sql='SELECT * FROM foo WHERE id IN (?)' params:='[1]'\n{\n
  \   \"data\": [\n        [\n            1,\n            \"b\"\n        ]\n    ],\n
  \   \"headers\": [\n        {\n            \"name\": \"id\",\n            \"type\":
  \"INT\"\n        },\n        {\n            \"name\": \"b\",\n            \"type\":
  \"VARCHAR\"\n        }\n    ],\n    \"last_row_id\": 0,\n    \"rows_changed\": -1\n}\n```\n"
description-type: markdown
hash: 07670804a8ac71098f430780c46b86b6657ea1cafd4d5cfdbcc4ca86d576c4ad
homepage: http://www.figo.io
latest: 0.9.1.2
license-name: MIT
maintainer: developer@figo.io
synopsis: Remote multi-db SQLCipher server
test-bench-deps:
  HUnit: '>=0'
  aeson: '>=0'
  base: '>=0'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  festung: '>=0'
  filepath: '>=0'
  hspec: '>=2.3 && <2.5'
  scientific: '>=0'
  temporary: '>=0'
  text: '>=0'
  wai-extra: '>=0'
  yesod: '>=0'
  yesod-test: '>=0'
