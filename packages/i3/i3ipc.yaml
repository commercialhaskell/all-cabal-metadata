all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
author: Evan Cameron
basic-deps:
  aeson: '>=1.2 && <1.5'
  base: '>=4.7 && <5'
  binary: '>=0.8.6 && <0.10'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.5.10 && <0.7'
  exceptions: '>=0.8.1 && <0.10.5'
  network: '>=2.6.3.5 && <3.2'
  text: '>=1.2.1.0 && <1.3'
  typed-process: '>=0.2.4 && <0.3'
  vector: '>=0.11.0 && <0.13'
changelog: ''
changelog-type: ''
description: "# i3ipc\n\n[![Build Status](https://travis-ci.com/leshow/i3ipc.svg?branch=master)](https://travis-ci.com/leshow/i3ipc)\n\nHaskell
  type-safe bindings for working with i3 using it's unix socket IPC. Sway is supposed
  to be protocl compatible with i3, I've included a function to bind to sway's socket
  also.\n\n## Subscribing\n\nSubscribe to events:\n\n```haskell\nimport qualified
  I3IPC.Subscribe         as Sub\nimport           I3IPC                   ( subscribe
  )\nimport           Control.Monad.IO.Class\n\n-- will print all events\nmain ::
  IO ()\nmain = liftIO $ subscribe print [Sub.Workspace, Sub.Window]\n```\n\nAn example
  of explicitly matching on some events and printing their fields:\n\n```haskell\nimport
  qualified I3IPC.Subscribe               as Sub\nimport           I3IPC.Event\nimport
  \          I3IPC                         ( subscribe )\nimport           Control.Monad.IO.Class\n\nmain
  :: IO ()\nmain = liftIO $ subscribe handle [Sub.Workspace, Sub.Window]\n where\n
  \ handle :: MonadIO m => Either String Event -> m ()\n  handle (Right evt) = case
  evt of\n    Workspace WorkspaceEvent { wrk_current } -> print wrk_current\n    Window
  WindowEvent { win_container } -> print win_container\n    _ -> error \"No other
  event types\"\n  handle (Left err) = error err\n```\n\n## Sending Messages\n\nSending
  Messages to i3:\n\n```haskell\nimport           I3IPC              ( connecti3\n
  \                                   , getWorkspaces\n                                    )\nimport
  \          Control.Monad.IO.Class                                    \n\nmain ::
  IO ()\nmain = do\n    soc <- liftIO $ connecti3\n    print $ getWorkspaces soc\n```\n\nAlternatively,
  you can ignore the convenience functions and construct these messages yourself:\n\n```haskell\nimport
  qualified I3IPC.Message     as Msg\nimport           I3IPC              ( connecti3\n
  \                                   , receiveMsg\n                                    )\nimport
  \          Control.Monad.IO.Class                                    \n\nmain ::
  IO ()\nmain = do\n    soc <- liftIO $ connecti3\n    print $ Msg.sendMsg soc Msg.Workspaces
  >> receiveMsg soc\n```\n\n## Community\n\nI'm happy to take PRs or suggestions,
  or simply fix issues for this library.\n"
description-type: markdown
hash: d2fef6058ead7115b5602686ec67fd485a934d5b67ee97acf68c92de89ee31fe
homepage: https://github.com/leshow/i3ipc#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: cameron.evan@gmail.com
synopsis: A type-safe wrapper around i3's IPC
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  hspec: '>=0'
  i3ipc: '>=0'
