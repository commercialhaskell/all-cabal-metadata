all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.2.3
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3.0
- 0.2.3.1
- 0.3.0.0
author: Daniel Stiner
basic-deps:
  Cabal: '>=0'
  Diff: '>=0'
  HUnit: '>=0'
  ansi-wl-pprint: '>=0'
  base: '>=4.8 && <5'
  bytestring: '>=0'
  conduit: '>=0'
  conduit-combinators: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  filepath: '>=0'
  haskell-src-exts: '>1.20'
  hfmt: '>=0'
  hindent: '>=5 && <6'
  hlint: '>=3 && <4'
  optparse-applicative: '>=0'
  path: '>=0'
  path-io: '>=0'
  pretty: '>=0'
  stylish-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
  yaml: '>=0'
changelog: ''
changelog-type: ''
description: |
  hfmt
  ====

  [![Hackage](https://img.shields.io/hackage/v/hfmt.svg)](https://hackage.haskell.org/package/hfmt)
  [![license](https://img.shields.io/github/license/danstiner/hfmt.svg)](https://github.com/danstiner/hfmt/blob/master/LICENSE)
  [![Build Status](https://travis-ci.org/danstiner/hfmt.svg?branch=master)](https://travis-ci.org/danstiner/hfmt)

  hfmt is a tool for formatting Haskell programs. Currently it is simply a gofmt style wrapper of the excellent tools [hlint](https://github.com/ndmitchell/hlint/blob/master/README.md), [hindent](https://github.com/chrisdone/hindent#readme), and [stylish-haskell](https://github.com/jaspervdj/stylish-haskell#readme).


  ## Installation

  with [stack](https://www.haskellstack.org/)

      $ stack install hfmt

  with [cabal](https://www.haskell.org/haskellwiki/Cabal/How_to_install_a_Cabal_package)

      $ cabal install hfmt

  ## Usage

  Check all Haskell source under the current directory:

      hfmt

  Overwrite files with formatting suggestions:

      hfmt -w

  ## Help text

      Î» hfmt --help
      hfmt - format Haskell programs

      Usage: hfmt [-d|--print-diffs] [FILE]
        Reformats Haskell source files by applying HLint, hindent, and
        stylish-haskell.

      Available options:
        -h,--help                Show this help text
        -d,--print-diffs         If a file's formatting is different, print a diff.
        -s,--print-sources       If a file's formatting is different, print its
                                source.
        -l,--print-paths         If a file's formatting is different, print its path.
        -w,--write-sources       If a file's formatting is different, overwrite it.
        FILE                     Explicit paths to process.
                                  - A single '-' will process standard input.
                                  - Files will be processed directly.
                                  - Directories will be recursively searched for source files to process.
                                  - .cabal files will be parsed and all specified source directories and files processed.
                                  - If no paths are given, the current directory will be searched for .cabal files to process, if none are found the current directory will be recursively searched for source files to process.

      Exit Codes:
        0 = No error
        1 = Encountered I/O or other operational error
        2 = Failed to parse a source code file
        3 = Source code was parsed but cannot be formatted properly
        4 = Formatted code differs from existing source (--print-diffs only)
description-type: markdown
hash: 25d0f75028ae950a93b5bb3b1e45cf43506a62dff984dd3486a4ab0cf844338c
homepage: https://github.com/danstiner/hfmt#readme
latest: 0.3.0.0
license-name: MIT
maintainer: Daniel Stiner <daniel.stiner@gmail.com>
synopsis: Haskell source code formatter
test-bench-deps:
  Cabal: '>=0'
  Diff: '>=0'
  HUnit: '>=0'
  base: '>=4.8 && <5'
  bytestring: '>=0'
  conduit: '>=0'
  conduit-combinators: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  filepath: '>=0'
  haskell-src-exts: '>1.20'
  hfmt: '>=0'
  hindent: '>=5 && <6'
  hlint: '>=3 && <4'
  path: '>=0'
  path-io: '>=0'
  pretty: '>=0'
  stylish-haskell: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  text: '>=0'
  transformers: '>=0'
  yaml: '>=0'
