all-versions:
- 0.1.0.0
- 0.1.1.0
author: Pavel
basic-deps:
  HFitUI: '>=0'
  MissingH: '>=1.4.0'
  base: '>=4.7 && <5'
  blaze-html: '>=0.8.1'
  blaze-markup: '>=0.7.1'
  mtl: '>=2.2.1'
  process: '>=1.4.2'
  random: '>=1.1'
  shakespeare: '>=2.0.11'
  template-haskell: '>=2.11.0'
  text: '>=1.2.2'
  uuid: '>=1.3.12'
changelog: ''
changelog-type: ''
description: "# HFitUI\n\n## Introduction\nLibrary for generating a graphical interface
  on the web for the Haskell programming language.\n\n## Short description\nThe **HFitUI**
  uses the blaze library as the result of generating a graphical interface on the
  web. Using the HFitUI, you construct an interface from the panels, buttons, more
  complex widget components.The HFitUI has its own Javascript generator from Haskell
  code based on a set of JavaScript simulation functions.\nBelow is an example [demo](https://github.com/iqsf/HFitUI/blob/master/src/WebUI/Demo/LibDemo.hs)
  code:\n\n```\ntestOne :: UI H.Html\ntestOne = \n    widgetLayoutUI $ do \n        --
  Базовые виджеты\n        shell                   <- shellExtUI \"TestGL (Dyn)\"
  []\n        (root, idRoot, _)       <- expandWUI $ wuiPanel <#> boundsBRDNum (44,
  0, 0, 0)\n                                                        <#> overflowHiddenX\n
  \                                                       <#> overflowAutoY\n\n        scriptsOutside
  \         <- wuiScriptSrc [] \n\n        jsScript                <- wuiScriptTextJS
  $ runScript defaultHBConfig {hbc_entryLine = \"\\n\"\n                                                                               }
  $ do \n                                        var_b <- newVarInt \"b\" 10 \n                                        var_c
  <- newVarInt \"c\" 5\n                                        var_cm <- newVar \"cm\"
  $ mathACos var_c\n                                        (//) \"Test variable\"\n
  \                                       var_testPer <- newVar \"testPer\" HJsEmpty\n
  \                                       var_st <- newVarStr \"st\" \"TestSt\"\n
  \                                       flag_1 <- newVarBool \"flag_1\" True\n                                        var_res
  <- newVar \"res\" HJsNull\n\n                                        var_res <-
  eql var_res $ (var_b + var_c) * var_st / var_b\n                                        var_res
  <- eql var_res var_b \n\n                                        hjs $(juliusFile
  \"templates/test/TestScript.julius\") \n\n                                        hjs
  $[julius|    \n                                            function veryTest (){\n
  \                                               console.log(\"VeryTest\");\n                                            }\n
  \                                       |]\n\n                                        (***)
  $ \"The first multi-line comment\" +-+ \n                                                \"before
  the myFunc function\"\n                                        vatFn_myFunc <- functJS
  \"myFunc\" [] $ do \n                                            return endH\n                                        call
  vatFn_myFunc []\n                                        var_res_myFunc <- eqlMT
  (varJS \"res_myFunc\") $ call vatFn_myFunc []\n\n                                        var_testFunc
  <- eqlMT (varJS \"testFunc\") $ functJS \"\" [] $ do \n                                            var_bbb
  <- newVarInt \"bbb\" 23 \n                                            returnJS thisJS\n
  \                                       call var_testFunc []\n                                        var_res_testFunc
  <- eqlMT (varJS \"res_testFunc\") $ call var_testFunc [5, var_b, valStr \"qwe\",
  valInt 19, valBool True]\n                                        var_res_new_testFunc
  <- eqlMT (varJS \"res_new_testFunc\") $ newJS $ call var_testFunc [5, var_b, valStr
  \"qwe\", valInt 19, valBool True]\n\n                                        jsFinish
  \n\n        shell `addWUIs` [ root\n                        , scriptsOutside\n                        ,
  jsScript\n                        ]\n```\n\nThis code generates the following HTML:\n\n```\n<!DOCTYPE
  HTML>\n<html><head><title>TestGL (Dyn)</title></head><body id=\"f98b3765-f949-44ed-b653-7234e250f08e\"
  ui_widget=\"shell\" style=\"\"><div id=\"42826f90-aa08-4008-b3a7-3c27e62b5d2d\"
  ui_widget=\"panel\" style=\"top:44px;right:0px;bottom:0px;left:0px;overflow-x: hidden;overflow-y:
  auto;\" class=\"\"></div><script type=\"text/javascript\" id=\"87a1f750-123a-4148-bcb5-a53f40e23a52\"
  ui_widget=\"script_text\" style=\"\" class=\"\">\n/*Generate by HScript from the
  HFitUI library*/\nvar b = 10;\nvar c = 5;\nvar cm = Math.acos(c);\n//Test variable\nvar
  testPer;\nvar st = \"TestSt\";\nvar flag_1 = true;\nvar res = null;\nres = (((b
  + c) * st) / b);\nres = b;\nfunction test(){\n    console.log(\"Test\");\n}\nfunction
  veryTest (){\n    console.log(\"VeryTest\");\n}\n/*The first multi-line comment\nbefore
  the myFunc function*/\nfunction myFunc (){\n}\nmyFunc();\nres_myFunc = myFunc();\n;\ntestFunc
  = function (){\n  var bbb = 23;\n  return this;\n}\n;\ntestFunc();\nres_testFunc
  = testFunc(5, b, \"qwe\", 19, true);\n;\nres_new_testFunc = new testFunc(5, b, \"qwe\",
  19, true);\n\n;\n</script></body></html>\n```\n\nThe library **HFitUI** represents
  a simple yet powerful tool for creating graphical interface on the Web.\n\n\n\n"
description-type: markdown
hash: 4593d195662448f2e902c953c43cc03c1c052eb7b74c4d35938a3d2d7cc2aa86
homepage: https://github.com/iqsf/HFitUI.git
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: iqsf@ya.ru
synopsis: The library for generating a graphical interface on the web
test-bench-deps:
  HFitUI: '>=0'
  base: '>=0'
