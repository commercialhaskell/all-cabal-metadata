all-versions:
- 0.0.0.3
author: Daneil Gröber
basic-deps:
  Cabal: '>=1.24.0.0 && <1.25'
  base: '>=4.8.0.0 && <4.10'
  directory: <1.3 && >=1.2.2.0
  filepath: <1.5 && >=1.4.0.0
  process: <1.5 && >=1.2.3.0
  rts-loader: '>=0'
  unix: <2.8 && >=2.7.1.0
  zenc: ==0.1.1
changelog: |
  2016-06-24  Daniel Gröber  <dxld@darkboxed.org>

          * Release version 0.0.0.3

          * Release version 0.0.0.2

          * Release version 0.0.0.1

          * Release version 0.0.0.0

  2016-06-23  Daniel Gröber  <dxld@darkboxed.org>

          * Initial release
changelog-type: text
description: "Haskell dynamic library loader\n==============================\n\nLoad
  and execute functions from Haskell dynamic libraries without being\nrestricted to
  a single RTS/GHC version.\n\nThis package consists of the initial loader executable
  `rts-loader` written\nin plain C and a Haskell library providing a convinient interface
  to it. The\ninitial loader executable is implemented in C since writing it in Haskell
  would\nmean linking against the RTS which means we can't load libraries compiled
  with\nanother version of GHC.\n\nIn order to get Cabal to compile a pure C executable
  while not linking against\nthe RTS still some hacks in `Setup.hs` are employed to
  call `gcc` directly so\nbeware.\n\nUsage\n-----\n\nThe example below will locate
  the package \"foopkg\" in the package databases\nconfigured for the Cabal project
  in the current directory and execute the\nfunction \"main\" from the module \"Lib\".
  The package can be found in\n`tests/lib` in the rts-loader source tree.\n\nTo run
  the example, execute the following commands in the rts-loader source\ntree.\n\n```\n$
  cabal install --only-dependencies && cabal configure && cabal build && cabal install
  tests/lib\n$ rts_loader_libexecdir=dist/build/rts-loader dist/build/rts-loader-example/rts-loader-example\n```\n\n`rts_loader_libexecdir=...`
  is only required if you didn't install rts-loader\ninto a sandbox or elsewhere already.\n\n
  \   import System.Loader.RTS\n    import System.Process\n   \n    import Distribution.Verbosity\n
  \   import Distribution.Package\n    import Distribution.Simple.Configure\n   \n
  \   import Distribution.Simple.LocalBuildInfo\n    import Distribution.Simple.Configure
  (getPersistBuildConfig)\n   \n    main :: IO ()\n    main = do\n      lbi <- getPersistBuildConfig
  \"dist\"\n   \n      let verbosity = normal\n          comp = compiler lbi\n          pkg_db_stack
  = withPackageDB lbi\n          prog_conf = withPrograms lbi\n   \n      pidx <-
  getInstalledPackages verbosity comp pkg_db_stack prog_conf\n   \n      loader_exe
  <- loaderExecutablePath\n      loader_args <- loaderInvocation (SymbolIdentifier
  \"Lib\" \"main\") [] <$>\n        (resolveLibraryInfo comp [WayDyn] $\n          lookupLibraryInfo
  pidx $\n            PQName $ PackageName \"foopkg\")\n   \n      print =<< rawSystem
  loader_exe loader_args\n \nWe use information written by `cabal configure` (see
  `getPersistBuildConfig`)\nfor convinience only this is not actually required to
  use the loader.\n"
description-type: markdown
hash: a878982d2cb419dc3c463b2dfbe1ce7db944a6bc9c9b7673486aa4c99dfe3456
homepage: https://github.com/DanielG/rts-loader
latest: 0.0.0.3
license-name: GPL-3.0-only
maintainer: dxld@darkboxed.org
synopsis: Dynamically load Haskell libraries
test-bench-deps: {}
