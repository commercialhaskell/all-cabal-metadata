all-versions:
- '0.1'
- 0.1.1
- 0.1.2
author: Don Stewart
basic-deps:
  base: '>3 && <5'
  containers: '>=0.2'
  pretty: '>=0'
  strict-concurrency: '>=0'
  vector: '>=0.7'
changelog: ''
changelog-type: ''
description: |
  This library defines an embedded language in Haskell for programming
  the Yices SMT solver.

  Yices is an efficient SMT solver that decides the satisfiability of
  arbitrary formulas containing uninterpreted function symbols with
  equality, linear real and integer arithmetic, scalar types,
  recursive datatypes, tuples, records, extensional arrays, fixed-size
  bit-vectors, quantifiers, and lambda expressions. Yices also does
  MaxSMT (and, dually, unsat cores) and is competitive as an ordinary
  SAT and MaxSAT solver.

  The embedded language embeds both terms, functions and types into
  Haskell, via a typed higher-order abstract syntax representation.
  Propositions in the embedding are represented as (typed) pure
  expressions.

  Solution variables in the proposition (notionally, free variables)
  are bound an the outermost lambda term. Propositions constructed
  from logical primitives can then be executed by the solver to yield
  a satisfying assignment to those free variables in the proposition.
  Uninterpreted functions may be introduced via variables as well.

  More information about Yices:

  * <http://yices.csl.sri.com/>

  The primary interface is via the EDSL, "Yices.Painless.Language",
  however, low and medium-level bindings to the Yices C API are also provided
  ("Yices.Painless.Base.C" and "Yices.Painless.Base"). The
  medium-level bindings add significant type and resource safety to
  that which the C API provides.

  Documentation for this package is available:

  * <http://www.galois.com/~dons/yices-painless/>
description-type: haddock
hash: 9f23c43bee2793b70b04641cb9aae10ef7fd826957880ea098380344f51cdd59
homepage: http://code.haskell.org/~dons/code/yices-painless
latest: 0.1.2
license-name: BSD-3-Clause
maintainer: dons@galois.com
synopsis: An embedded language for programming the Yices SMT solver
test-bench-deps: {}
