all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- '0.5'
- 0.5.1
- 0.5.4
- '0.6'
- 0.6.1
- '0.7'
- '1.0'
- '1.1'
- '1.2'
- 1.2.1
- '1.3'
- '1.4'
- '2.0'
- '2.1'
- '3.0'
- '3.1'
- '4.0'
- 4.0.1
- 4.0.3
- '4.1'
- 4.1.1
- '4.2'
- '4.3'
- 4.3.1
- 4.3.2
- 4.3.3
- 4.3.4
- 4.3.5
- '4.5'
- '4.6'
- 5.0.1
- '5.1'
- '5.2'
- '5.3'
- 5.3.1
- '5.4'
- '5.5'
- '5.6'
- '5.7'
- '5.8'
- '5.9'
- 5.9.1
- 6.0.0
- '6.1'
- 6.1.1
- '6.2'
author: David Sorokin
basic-deps:
  array: '>=0.3.0.0'
  base: '>=4.9.0.0 && <6'
  binary: '>=0.6.4.0'
  containers: '>=0.4.0.0'
  deepseq: '>=1.1.0.0'
  exceptions: '>=0.9.0'
  mtl: '>=2.1.1'
  mwc-random: '>=0.13.1.0'
  random: '>=1.0.0.3'
  semigroups: '>=0.10'
  vector: '>=0.10.0.1'
changelog: "\nVersion 6.2\n-----\n\n* Fixed the normalised version of TimingStats,
  after it is converted to SamplingStats. The deviation has a better approximation
  now.\n\nVersion 6.1\n-----\n\n* Fixed a space leak in the SignalSource data type.\n\n*
  Fixed the contAwait function.\n\nVersion 6.0\n-----\n\n* Introduced the discrete
  event priorities.\n\nVersion 5.9\n-----\n\n* Added the support of GHC 8.6 and dropped
  the support of old versions\n  that do not have Monad.Fail.\n\nVersion 5.8\n-----\n\n*
  Satisfying a new requirement of the MonadMask class type.\n\nVersion 5.7\n-----\n\n*
  Implemented MonadMask and MonadCatch for basic simulation computations.\n\nVersion
  5.6\n-----\n\n* Lars Kuhtz added the support of GHC 8.4.\n\nVersion 5.5\n-----\n\n*
  Added the 4th order Runge-Kutta 3/8-method.\n\n* Added experimental functions delayByDT
  and delayIByDT.\n\nVersion 5.4\n-----\n\n* A more correct treating of the stop time.
  Earlier, the final\n  integration time point was used instead of the stop time in\n
  \ some functions.\n\nVersion 5.3.1\n-----\n\n* Increased the speed of simulation.\n\nVersion
  5.3\n-----\n\n* Introduced the result source titles, which can be useful when plotting
  the charts.\n\n* Added functions newSignalInTimeGrid and timeGrid.\n\nVersion 5.2\n-----\n\n*
  Significantly improved in the examples the speed of simulation after using\n  the
  mwc-random package by Bryan O'Sullivan for generating random numbers.\n  It was
  possible to use custom random number generators before, but now\n  the mentioned
  generator is used by default. Also the type signature of\n  the SimpleGeneratorWithSeed
  data constructor has changed.\n\nVersion 5.1.1\n-----\n\n* Updated the pure-functional
  priority queue so that the events could be yielded\n  in the distributed simulation
  module too.\n\nVersion 5.1\n-----\n\n* Includes changes destined for Aivika Exension
  Pack.\n\n* Minor changes in the resource preemption statistics.\n\n* Added the statistics
  reset.\n\nVersion 5.0\n-----\n\n* Added the Composite monad.\n\n* Added the Channel
  computation.\n\n* Breaking change: modified signatures of functions signalStream
  and streamSignal.\n\n* Breaking change: the signalProcessor function is replaced
  with channelProcessor.\n\n* Breaking change: the processorSignaling function is
  replaced with processorChannel.\n\n* Added module Signal.Random.\n\n* Added functions
  arrivalTimerSignal and arrivalTimerChannel.\n\n* Added functions queuedSignalStream,
  queuedProcessorChannel and queuedChannelProcessor.\n\nVersion 4.6\n-----\n\n* Updated
  module DoubleLinkedList.\n\n* Breaking change: arrows Net and Processor are trying
  to perform computations\n  in parallel as possible, when using the proc notation.
  Earlier they executed\n  sequentially.\n\nVersion 4.5\n-----\n\n* The Transform
  computation seems to be not ArrowLoop.\n\n* Added the enqueueEventWithStartTime
  and enqueueEventWithStopTime functions.\n\nVersion 4.3.5\n-----\n\n* Removed the
  obsolete preprocessor instructions for conditional compilation.\n\nVersion 4.3.4\n-----\n\n*
  Yet more safe the resource preemption.\n\n* Introducing exception SimulationRetry,
  which is needed for parallel distributed simulation.\n\nVersion 4.3.3\n-----\n\n*
  Added function vectorDeleteRange to remove the range of elements from the mutable
  vector.\n\n* Fixed the resource preemption when releasing and requesting again for
  the resource at\n  the same modeling time.\n\nVersion 4.3.2\n-----\n\n* Added functions
  splitStreamFiltering, splitStreamFilteringQueueing to filter when \n  splitting
  the input stream.\n\n* Explicit exporting function newRandomGenerator01 for generating
  random numbers by \n  the specified custom generator returning numbers from 0 to
  1.\n  \n* Added function freezeList for the double linked list.\n\n* Added an immutable
  priority queue.\n\nVersion 4.3.1\n-----\n\n* Improved the timeoutProcessUsingId
  function: no need in additional cancellation signal.\n  Thanks to Gabriel Garcia
  who pointed to this issue and suggested a possible solution.\n\n* Added functions
  delaySignal and delaySignalM to delay a signal in time through \n  the event queue.\n\n*
  Added function runSimulationByIndex to run the simulation with an arbitrary run
  index.\n\nVersion 4.3\n-----\n\n* Added optimised queues which have no counters
  nor signals.\n\n* Added assembling functions for streams.\n\n* Added the operation
  activity as a simplification of server.\n\n* Added new functions for the queues.\n\nVersion
  4.2\n-----\n\n* Added new random distributions: lognormal, Gamma, Beta, Weibull
  and \n  a generic discrete by pdf.\n\n* The items can be removed from the queue;
  moreover, the queue can be \n  cleared.\n\n* Added a simplified API for accessing
  the results of simulation.\n\n* Added the Gate entity.\n\nVersion 4.1.1\n-----\n\n*
  More counters and statistics for the new resources.\n\nVersion 4.1\n-----\n\n* Added
  new resource types with counters and statistics.\n\nVersion 4.0.2\n-----\n\n* Minor
  changes in the Statistics module: replacing functions \n  resetSamplingCounter and
  resetTimingCounter with their general analogs.\n\n* Unifying process preemption
  signals in modules Server and Activity: \n  renaming four signals like that how
  they are named in the Process module.\n  \n* The timing statistics (time persistent
  one) can be normalized to \n  a sampling-based statistics (based upon observation),
  which allows, \n  for example, building a deviation chart for the queue size.\n\nVersion
  4.0.1\n-----\n\n* Fixed build issues on GHC 7.10.1.\n\nVersion 4.0\n-----\n\n* Added
  resource preemption.\n\n* Fixed misprint in the activityProcessor function.\n\nVersion
  3.1\n-----\n\n* Added functions failoverStream and failoverProcessor to model\nservers
  with failures (temporary cancellation of the process with the\nfurther repairing
  of the server).\n\n* Added functions joinStream and joinProcessor to simplify the\nmodeling
  of servers.\n\n* Checking the argument, i.e. time period, in the holdProcess\nfunction.
  It must not be negative.\n\n* The taskProcess computation behaves exactly like the
  background\n  process, i.e. now its cancellation leads to immediate cancelling the
  background\n  process too.\n\n* Functions setStateActivation, setStateDeactivation
  and\n  setStateTransition are redefined as the Event computations instead\n  of
  Simulation computations.\n\n* Refactored and simplified module Results.\n"
changelog-type: markdown
description: |
  Aivika is a discrete event simulation (DES) framework with support of activity-oriented,
  event-oriented and process-oriented paradigms. It supports resource preemption and other
  improved simulation techniques. There is also a partial support of system dynamics and
  agent-based modelling. All the complexity is hidden under easy-to-use computations.

  The represented package is a basic simulation library optimized for sequential execution.
  There are also packages for nested and parallel distributed simulation.

  The library has the following features:

  * allows defining recursive stochastic differential equations of
  system dynamics (unordered as in maths via the recursive do-notation);

  * supports the event-driven paradigm of DES as a basis for
  implementing other paradigms;

  * supports extensively the process-oriented paradigm of DES
  with an ability to resume, suspend and cancel
  the discontinuous processes;

  * allows working with the resources based on specified queue strategies
  (FCFS\/FIFO, LCFS\/LIFO, SIRO, static priorities and so on);

  * allows customizing the unbounded and bounded queues based on strategies too;

  * supports the resource preemption;

  * allows defining a queue network based on streams of data (transacts);

  * allows using a GPSS-like DSL with help of the additional library;

  * allows simulating circuits with recursive links and delays;

  * supports the activity-oriented paradigm of DES;

  * supports basic constructs for the agent-based modeling such as
  agents, states, timeout and timer handlers;

  * allows creating combined discrete-continuous models as all parts
  of the library are well integrated and this is reflected directly
  in the type system;

  * the arrays of simulation variables are inherently supported;

  * supports the Monte-Carlo simulation;

  * the simulation model can depend on external parameters;

  * uses extensively signals for notification;

  * allows gathering statistics in time points;

  * hides technical details in high-level simulation computations
  (monads, streams and arrows).

  The simulation engine itself has minimal dependencies.
  However, there are additional packages [1, 2] that offer the following
  features:

  * automating simulation experiments;

  * saving the results in CSV files;

  * plotting the deviation chart by rule 3-sigma, histogram,
  time series, XY chart;

  * collecting the summary of statistical data;

  * parallel execution of the Monte-Carlo simulation;

  * has an extensible architecture.

  The charting package has two interchangeable back-ends [3, 4],
  where one of them uses Cairo and it creates small PNG images, while another
  creates more detailed SVG files and it can be used on Windows.

  There are also additional packages that allow saving the results of simulation
  in SQL databases. Then the results can be accessed from other software applications.
  For example, it can be useful when creating flight simulators in other programming languages
  such as C# or Java.

  Moreover, the method was generalized [5] and applied to
  nested simulation [6] and parallel distributed simulation [7].

  The libraries were tested on Linux, Windows and OS X.

  \[1] <http://hackage.haskell.org/package/aivika-experiment>

  \[2] <http://hackage.haskell.org/package/aivika-experiment-chart>

  \[3] <http://hackage.haskell.org/package/aivika-experiment-cairo>

  \[4] <http://hackage.haskell.org/package/aivika-experiment-diagrams>

  \[5] <http://hackage.haskell.org/package/aivika-transformers>

  \[6] <http://hackage.haskell.org/package/aivika-branches>

  \[7] <http://hackage.haskell.org/package/aivika-distributed>

  P.S. Aivika is actually a genuine female Mari name which is pronounced
  with stress on the last syllable.
description-type: haddock
hash: a967aef1cac38c313c170e6f524395a3066dab5d12ce816507d8381752ad4458
homepage: https://gitflic.ru/project/dsorokin/aivika
latest: '6.2'
license-name: BSD-3-Clause
maintainer: David Sorokin <davsor@mail.ru>
synopsis: A multi-method simulation library
test-bench-deps: {}
