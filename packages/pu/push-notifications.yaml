all-versions:
- '0.2'
- 0.2.1
author: ''
basic-deps:
  HsOpenSSL: '>=0.10.3.3'
  aeson: '>=0'
  base: '>=4 && <=5'
  base16-bytestring: '>=0.1.1.5'
  binary: '>=0.5.1.0'
  bytestring: '>=0.9.2.1'
  casing: '>=0'
  conduit: '>=1.0.0'
  convertible: '>=1.0.11.1'
  data-default: '>=0'
  http-conduit: '>=1.9.1'
  http-types: '>=0.8.0'
  network: '>=2.4.1.2'
  resourcet: '>=1.1.9'
  text: '>=0'
  time: '>=1.4'
  transformers: '>=0.3.0.0'
changelog: |
  # Revision history for push-notifications

  ## 0.2.1.0

  * APNS: Close socket upon exception

  ## 0.2.0.0

  * Remove deprecated `pushMess` function
  * Rename project and change module names to begin with `Network.PushNotification`
changelog-type: markdown
description: |
  # push-notifications

  Server-side push messaging from Haskell to various platforms (currently supporting iOS and Android).

  ## Android

  Push notifications to android devices are sent via Google's [Firebase](https://firebase.google.com) service. To send push notifications via Firebase, you'll need to create a project and acquire a "server key."

  To get your server key, go to the [Firebase console](https://console.firebase.google.com/) and create or open a project. On the project settings page, there is a "Cloud Messaging" section. On that page you should be able to retrieve or create a "server key."

  The server key should be passed to `Network.PushNotification.Android.sendAndroidPushMessage`.

  To construct an android push message payload, have a look at `Network.PushNotification.Android.Payload` which provides a haskell datatype and JSON instances for Firebase Cloud Messaging payloads (as documented [here](https://firebase.google.com/docs/cloud-messaging/http-server-ref)).

  ## IOS

  Sending push notifications requires an "Apple Push Services" certificate and an Apple-provided device token.

  ### Getting an APS Certificate
  The APS certificate is produced in the iOS Provisioning Portal. Once you've generated the certificate, you can download it from the Provisioning Portal.  It is usually named `aps_production.cer` or `aps_development.cer`.

  The private key for the certificate can be extracted from Apple's Keychain utility as a `.p12` file.

  Once you have both the certificate and private key, the following commands can be used to convert the certificate and private key files into the format required by this library.

  ```bash
  openssl x509 -in aps_development.cer -inform DER -outform PEM -out cert.pem
  openssl pkcs12 -in key.p12 -out key.pem -nodes
  ```

  ### Getting a Device Token

  Device tokens are retrieved on the device itself by calling the @registerForRemoteNotifications@ method of the @UIApplication@ object.

  For more information, please see [Apple's documentation](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1).

  ## Credits

  Originally based on a blog post by Teemu Ikonen, available [here](https://bravenewmethod.com/2012/11/08/apple-push-notifications-with-haskell/) and packaged by David Fendrich as the "phone-push" library on hackage. That library was eventually forked and updated and, eventually, became this one.
description-type: markdown
hash: 1895815063b414e89582ae318483efd168624ce66ecc82134ccf3115e233bccb
homepage: https://github.com/obsidiansystems/push-notifications
latest: 0.2.1
license-name: BSD-3-Clause
maintainer: maintainer@obsidian.systems
synopsis: Push notifications for Android and iOS
test-bench-deps: {}
