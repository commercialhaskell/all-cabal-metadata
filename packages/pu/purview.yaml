homepage: https://github.com/purview-framework/purview#readme
changelog-type: markdown
hash: fa99e13fdc49bfe790aacd88d7e5613669b449a2324a567d4a6bc7e89b8c586a
test-bench-deps:
  warp: '>=3.3.0 && <3.4'
  wai-websockets: '>=3.0.1 && <3.1'
  bytestring: '>=0.10.12.0 && <0.13'
  wai: '>=3.2.0 && <3.3'
  purview: -any
  stm: '>=2.5.0 && <2.6'
  base: '>=4.7 && <5'
  time: '>=1.9.3 && <1.14'
  hspec: '>=2.7.10 && <2.12'
  text: '>=1.2.4.1 && <2.2'
  criterion: '>=1.5.13 && <1.6'
  websockets: ==0.12.*
  blaze-builder: '>=0.4.2 && <0.5'
  raw-strings-qq: ==1.1.*
  QuickCheck: '>=2.14.2 && <2.15'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.5.6 && <2.3'
  template-haskell: '>=2.15.0 && <2.21'
maintainer: bontaq@gmail.com
synopsis: A simple, fun way to build websites
changelog: |
  # Changelog for bridge

  ## Unreleased changes
basic-deps:
  warp: '>=3.3.0 && <3.4'
  wai-websockets: '>=3.0.1 && <3.1'
  bytestring: '>=0.10.12.0 && <0.13'
  wai: '>=3.2.0 && <3.3'
  stm: '>=2.5.0 && <2.6'
  base: '>=4.7 && <5'
  text: '>=1.2.4.1 && <2.2'
  websockets: ==0.12.*
  blaze-builder: '>=0.4.2 && <0.5'
  raw-strings-qq: ==1.1.*
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.5.6 && <2.3'
  template-haskell: '>=2.15.0 && <2.21'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
author: Ian Davidson
latest: 0.2.0.1
description-type: markdown
description: "# Purview\n\nA simple, fun way to build websites with Haskell.  It's
  inspired by Phoenix LiveView, React, and Redux + Sagas.\n\nThe main points:\n* It's
  server side rendered and uses websockets to communicate HTML updates and to receive
  events.\n* State can be broken up into small components.\n* Attributes flow down
  to concrete HTML, events bubble up to state handlers.\n* Handlers can send further
  events to a parent handler or themselves\n\nIt's still in early development so expect
  things to break or be missing!\n\n## What it looks like\n\n```haskell\nmodule Main
  where\n\nimport Prelude hiding (div)\n\nimport Purview \nimport Purview.Server\n\n\ndata
  CountEvent = Increment | Decrement\n  deriving (Show, Eq)\n\nview :: Int -> Purview
  CountEvent m\nview count = div\n  [ h1 [ text (show count) ]\n  , div [ onClick
  Increment $ button [ text \"increment\" ]\n        , onClick Decrement $ button
  [ text \"decrement\" ]\n        ]\n  ]\n\n-- passes state down to the child and
  maintains type safety of actions\ncountHandler :: (Int -> Purview CountEvent m)
  -> Purview () m\n-- arguments are initial actions, initial state, and then the reducer\ncountHandler
  = handler' [] (0 :: Int) reducer\n  where\n    reducer Increment state = (state
  + 1, [])  -- new events can be added in the []\n    reducer Decrement state = (state
  - 1, [])\n\n-- url is passed in to the top level component by `serve`\ncomponent
  url = countHandler view\n\nmain = serve defaultConfiguration component\n```\n\nMore
  detailed docs on the use and particulars of Purview are mainly on [Hackage](https://hackage.haskell.org/package/purview).\n\n###
  Overview of how it works\n\nUsing an imagined example of getting the time, here's
  how events flow when the user clicks \"check time\"\n\n1. The event is sent from
  the browser in a form like\n\n   ```{ event: click, value: undefined, location:
  [0], childLocation: [0,0] }```\n2. The event is put onto the channel for the event
  loop to process\n3. It goes down the tree to find the event in Haskell by childLocation\n4.
  It takes that event and applies it to the handler found by location\n5. The handler
  does its work in a green thread, creating a new event that looks like\n   \n   ```{
  event: stateChange, fn: state -> state, location: [0] }```\n6. The state change
  event is put onto the channel for the event loop to process\n7. By going down the
  tree it applies the state change fn to the latest state in the tree, returning a
  new tree\n8. Any HTML changes are sent to the browser, completing the loop\n\n###
  Contributing\n\nAnything is welcome, including examples or patterns you found nice.
  \ There's still a lot to discover.\n\nThe roadmap is, loosely, determined by adding
  things required to build real websites.  The first two site-based goals:\n1. The
  Purview website itself, which will have more in depth tutorials (so requiring at
  least navigation)\n2. A stripe-based checkout (requiring communication with javascript)\n\n###
  Installation\n\n1. Install [stack](https://docs.haskellstack.org/en/stable/README/)\n2.
  `stack build`\n\n### Running Tests\n\n1. The same as above with stack and build\n2.
  `stack test`\n"
license-name: BSD-3-Clause
