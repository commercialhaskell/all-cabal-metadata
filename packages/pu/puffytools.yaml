all-versions:
- 0.0.0.1
author: Peter Harpending
basic-deps:
  MissingH: '>=1.3 && <1.4'
  aeson: '>=0.7'
  aeson-pretty: '>=0.7'
  base: '>=4 && <4.8'
  bytestring: '>=0.10 && <0.11'
  console-program: '>=0.3.2 && <0.4'
  containers: '>=0.5 && <0.6'
  directory: '>=1.2 && <1.3'
  old-locale: '>=1.0'
  puffytools: '>=0'
  random-fu: '>=0.2 && <0.3'
  safe: '>=0.3 && <0.4'
  text: '>=0.10'
  time: '>=1.4 && <1.5'
  vector: '>=0.10 && <0.11'
changelog: ''
changelog-type: ''
description: "# puffytools, version 0.0.0.1\n\nThis is the Puffy Toolkit, or Ptk.
  Ptk is a command-line \"personal assistant\",\nof sorts. Currently, it will keep
  journals. I'm adding more functionality as I\ncan. Pull requests are welcome, although
  do read the \"Development version\"\nsection below.\n\n# Installation and usage\n\nYou
  can install the experimental version from Hackage. If you use Windows or OS\nX,
  you'll need to install the\n[Haskell Platform](https://www.haskell.org/platform/).
  On Linux or BSD, your\ndistribution should have the packages `ghc` and `cabal-install`.
  The GHC version\nmust be 7.8 or later. Install those, then run:\n\n    cabal update\n
  \   cabal install puffytools\n\nIf the installation fails, you may need to install
  an updated version of\n`cabal-install`, `alex`, and `happy`:\n\n    cabal install
  cabal-install alex happy\n    cabal install puffytools\n\n## Development version\n\nIf
  you want the development version, the steps are a bit different. \n\n    git clone
  git://github.com/pharpend/puffytools.git -b develop\n    cd puffytools\n    cabal
  sandbox init\n    cabal install --enable-tests\n\nI use `gitflow` as a branching
  model, so\n[read about that](http://nvie.com/posts/a-successful-git-branching-model/)
  if\nyou have never heard about it. I don't particularly care what branching model\nyou
  use, as long as you don't commit to the `master` or `develop` branches.\n\n## Usage\n\n```\nptk\nThe
  Puffy Toolkit, version 0.0.0\n\n  j\n  Same as journal.\n  \n    add_entry slug
  STRING\n    Add an entry to journal with a given slug. The second argument is the
  entry text.\n    \n    \n    ae slug STRING\n    Same as add_entry\n    \n    \n
  \   cat slug\n    Output the raw journal\n    \n    \n    list\n    List all of
  the available journals\n    \n    \n    ls\n    Same as list\n    \n    \n    list_entries
  JOURNAL_SLUG\n    List the entries in a given journal\n            --time-format=STRING,\n
  \     --strftime=STRING          The format with which to print timestamps. See
  `man strftime` for more information.\n    \n    \n    le JOURNAL_SLUG\n    Same
  as listEntries\n            --time-format=STRING,\n      --strftime=STRING          The
  format with which to print timestamps. See `man strftime` for more information.\n
  \   \n    \n    new\n    Create a new journal\n      -sSTRING,\n      -nSTRING --slug=STRING,\n
  \     --name=STRING                 The slug/short name of the journal.\n      -tSTRING
  --title=STRING       The title of the journal\n      -dSTRING --description=STRING
  The journal Description\n    \n    \n    help\n    Show help for the journal module\n
  \   \n    \n  \n  journal\n  Do things with Journals\n  \n    add_entry slug STRING\n
  \   Add an entry to journal with a given slug. The second argument is the entry
  text.\n    \n    \n    ae slug STRING\n    Same as add_entry\n    \n    \n    cat
  slug\n    Output the raw journal\n    \n    \n    list\n    List all of the available
  journals\n    \n    \n    ls\n    Same as list\n    \n    \n    list_entries JOURNAL_SLUG\n
  \   List the entries in a given journal\n            --time-format=STRING,\n      --strftime=STRING
  \         The format with which to print timestamps. See `man strftime` for more
  information.\n    \n    \n    le JOURNAL_SLUG\n    Same as listEntries\n            --time-format=STRING,\n
  \     --strftime=STRING          The format with which to print timestamps. See
  `man strftime` for more information.\n    \n    \n    new\n    Create a new journal\n
  \     -sSTRING,\n      -nSTRING --slug=STRING,\n      --name=STRING                 The
  slug/short name of the journal.\n      -tSTRING --title=STRING       The title of
  the journal\n      -dSTRING --description=STRING The journal Description\n    \n
  \   \n    help\n    Show help for the journal module\n    \n    \n  \n  help\n  Show
  this help menu.\n  \n  \n  version\n  Print the version to the console. Meant for
  use in other programs.\n  \n  \n  shell\n  PTK REPL (Expiremental).\n``` \n\n# Licensing\n\nLike
  most Haskell packages, Ptk is licensed under the BSD-3 license. You can see\nthe
  [`LICENSE` file][2] for more information.\n        \n[1]: https://github.com/bitemyapp/learnhaskell\n[2]:
  https://github.com/pharpend/puffytools/blob/develop/LICENSE\n[3]: https://github.com/pharpend/puffytools/blob/develop/ptkbuild\n"
description-type: markdown
hash: 91dfdb9bc6833015bf2ea2f0a485846d9a4d60d26ccc08d99dbf6f39bc8078c5
homepage: https://github.com/pharpend/puffytools
latest: 0.0.0.1
license-name: BSD-3-Clause
maintainer: pharpend2@gmail.com
synopsis: A CLI assistant
test-bench-deps:
  QuickCheck: '>=2.7 && <2.8'
  aeson: '>=0.7 && <0.9'
  base: '>=4.7 && <4.8'
  bytestring: '>=0.10 && <0.11'
  puffytools: '>=0'
  test-framework: '>=0.8 && <0.9'
  test-framework-quickcheck2: '>=0.3 && <0.4'
  text: '>=1.1 && <1.3'
  time: '>=1.4 && <1.5'
  vector: '>=0.10 && <0.11'
