all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: mangoiv
basic-deps:
  aeson: <2.3
  async: <2.3
  base: <5
  bytestring: <0.13
  chronos: <1.2
  colourista: <0.2
  fused-effects: <1.2
  kan-extensions: <6
  template-haskell: <2.23
  text: <2.2
  unclogging: '>=0'
  unliftio: <0.3
changelog: "# Revision history for unclogging\n\n## 0.1.0.0 -- 2024-09-22 \n\n* First
  version. Implements concurrent logging and multiple useful subscribers and the unliftio
  and fused-effects frontends.\n\n## 0.1.0.1 -- 2024-09-23\n\n* Some documentation
  updates and add tested-with stanza\n\n## 0.1.0.2 -- 2024-09-24\n\n* more tiny documentatoin
  changes\n"
changelog-type: markdown
description: "![ci](https://ci.mangoiv.com/api/badges/12/status.svg)\n[![hackage](https://img.shields.io/hackage/v/unclogging.svg)](https://hackage.haskell.org/package/unclogging)\n\n#
  unclogging \n\nView repository: https://git.mangoiv.com/mangoiv/unclogging\n\nSimple,
  yet extensible concurrent logging system based on publish/subscribe.\n\nThe frontend
  to this library is based on importing a specific logging frontend. Currently there
  are `Control.Effect.Unclog.{Json,Text}` \nand `Unclog.IO.{Json,Text}` for `aeson`
  and `text` based logging and use with `fused-effects` and `MonadUnliftIO` respectively,
  \nexposing functions with the same names, `debug`, `info`, `warn` and `fatal` for
  the four common log levels.\n\nSubscribers watch a channel of logs and are constructed
  and destructed by the toplevel logging handler, like `runUnclogging` or \n`withLoggingWithSubscribers`.
  To construct your own subscribers, check out the `Unclog.Subscriber` module, more
  specifically, the \n`mkSubscriber`, `mkSubscriberSimple` and `bracketSubscriber`
  functions. \n\nThe library makes use of template haskell to efficiently create static
  information at compile time. This means that the logging frontend functions are
  \nof type `Q Exp`, which isn't very telling. Due to limitations for typed template
  haskell we currently cannot perform better though. If you're familiar with \ntyped
  template haskell, you can imagine the logging functions to have a type similar to
  `Code m (frontend -> m ())` (more about this right below).\n\nIn reality, as soon
  as you're splicing in a logging function, e.g. by using `$info`, the type will \"materialise\"
  and you will obtain a function \nof type `frontend -> m ()` where `frontend` is
  either `Data.Aeson.Object` if you're using the json frontend or `Data.Text.Text`
  if you're using the \ntext frontend. `m` will be something according to the effect
  system you're using. E.g. in the fused-effects case it will emit a `Has Log sig
  m` constraint \nand in the io case it will emit a `MonadUnliftIO` constraint.\n\n##
  example for standalone usage, i.e. `MonadUnliftIO` and `text` frontend\n\n```haskell\n--
  import utilities that are useful for logging\nimport Unclog\n-- the logging frontend
  has to be specific to the effect system used\nimport Unclog.Text\nimport Unclog.Subscribers
  (withLoggingWithSubscribers)\n\nmain :: IO ()\nmain = do\n  let subs = [colourSubscriber
  Info stdout, simpleSubscriber Fatal stderr, fileSubscriber Debug \"bla.log\"]\n\n
  \ withLoggingWithSubscribers subs \\logger -> do\n    $info logger \"info\"\n    $debug
  logger \"some important debug info\"\n```\n\n## example for use with `fused-effects`
  and `aeson` frontend\n\n```haskell\nimport Unclog\n-- logging frontend specific
  to fused-effects\nimport Control.Effect.Unclog.Json\nimport Control.Carrier.Unclog\n\n--
  for the construction of JSON objects.\nimport Data.Aeson\n\nmain :: IO ()\nmain
  = do\n  let subs = [colourSubscriber Info stdout, simpleSubscriber Fatal stderr,
  fileSubscriber Debug \"bla.log\"]\n\n  -- as you can see, we don't have to pass
  around the logger explicitly, which makes it a bit more concise and \n  -- also
  a tad more safe \n  runUnclogging subs do\n    $info [\"msg\" .= String \"hello
  world\"]\n    $debug [\"msg\" .= String \"message with number\", \"number\" .= Number
  1]\n```\n\n## more verbose example with multiple threads involved\n\n```haskell\nimport
  Unclog\nimport Unclog.Json\n\nimport Data.Aeson\nimport UnliftIO\nimport Data.String
  (fromString)\nimport Control.Monad (replicateM_, void)\n\nmain :: IO ()\nmain =
  do\n  let subs = [colourSubscriber Info stdout, simpleSubscriber Fatal stderr, fileSubscriber
  Debug \"bla.log\"]\n\n  withLoggingWithSubscribers subs \\logger -> do\n    -- spawn
  a couple of tasks that write to the logger channel concurrently\n    let spawnTask
  (i :: Int) = do\n          $info logger [\"msg\" .= String (\"I am task \" <> fromString
  (show i))]\n          replicateM_ 2 do\n            replicateM_ 2 do\n              $debug
  logger [\"msg\" .= String (\"debugging from \" <> fromString (show i))]\n            $warn
  logger [\"warning\" .= String (\"warning from \" <> fromString (show i))]\n          $fatal
  logger [\"error\" .= String (\"fatal from \" <> fromString (show i))]\n    void
  $ runConcurrently $ traverse @[] (Concurrently . spawnTask) [1 .. 5]\n```\n\n##
  the looks of it \n\nThis is how the coloured logging looks with above example, as
  you can see, both the simple logger writes the fatal events to stderr witout colouring
  them, and the coloured logger writes everything from `Info` upwards.\n\n![screenshot
  of coloured log scenario](./assets/screenshot-log-colour.png)\n"
description-type: markdown
hash: 4f04ff29bdee2f46fcf415f786e2ed0eb5c9422bdcd7b860b68def6d01eeaf6b
homepage: ''
latest: 0.1.0.2
license-name: AGPL-3.0-or-later
maintainer: contact@mangoiv.com
synopsis: a library which implements easy, concurrent and pretty logging
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  fused-effects: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  unclogging: '>=0'
  unliftio: '>=0'
