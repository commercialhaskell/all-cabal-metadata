all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Mark Wotton
basic-deps:
  base: '>=4.7 && <5'
changelog: ''
changelog-type: ''
description: "Unidecode: a transliterator of last resort\n==========================================\n\nSo,
  for some reason you're stuck in the 90s and can't use UTF text. Punycode isn't cutting
  it?\nFine: Unidecode will help you murder some carefully constructed text into something
  vaguely readable in good ol'\n\"I don't wanna learn anything\"-ASCII.\n\nThere's
  one function, unidecode :: Char -> String. If you have more text, I'm sure you can
  foldMap & pack it.\n\n(This is sourced ultimately from Unicode.PM, but I scavenged
  the tables from Carter Schonwald, who graciously\nallowed usage.)\n\nWhy did you
  write a bunch of C, Mark? Don't you like Haskell?\n=============================================================\n\nGHC
  compiled a big Haskell literal list fine, then crashed at runtime with some weaksauce
  excuse\nabout \"i can't handle something that big, the compiler should have rejected
  it\". Cons cells are for\nclosers, RTS.\n\nThe other approach that Carter took was
  to build an IntMap on top of the C data structures, but for reasons\nI still can't
  quite comprehend, it didn't pass the stack-leak detection trick at \nhttps://neilmitchell.blogspot.de/2015/09/detecting-space-leaks.html\n\nquick
  bsearch did the job (and I learned in the process that a Haskell project is not
  a bad way\nto build C code).\n\nissues/PRs all welcome, but hopefully there's not
  anything missing.\n"
description-type: markdown
hash: 99581ee1ea334a4596a09ae3642e007808457c66893b587e965b31f15cbf8c4d
homepage: https://github.com/mwotton/unidecode#readme
latest: 0.1.0.4
license-name: BSD-3-Clause
maintainer: mwotton@gmail.com
synopsis: Haskell binding of Unidecode
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  unidecode: '>=0'
