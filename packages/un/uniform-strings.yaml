homepage: https://github.com/github.com:andrewufrank/uniform-strings.git#readme
changelog-type: markdown
hash: f91eac1e7df4ab7870f43dea0882db751d82ce2a9e9a5fe2507116f874e22dd6
test-bench-deps:
  uniform-algebras: -any
  MissingH: -any
  uniform-strings: -any
  bytestring: -any
  HTF: -any
  split: -any
  base: '>4.5 && <5'
  monads-tf: -any
  text: -any
  test-invariant: -any
  quickcheck-text: -any
  snap-core: -any
  network-uri: -any
  pretty-show: -any
  safe: -any
maintainer: Andrew U. Frank <uniform@gerastree.at>
synopsis: Manipulate and convert strings of characters uniformly and consistently
changelog: "0.0.12\n    move from   versions in Workspace8 2019\n0.0.9 radical reduction
  to use Text only\n0.0.11 structure regularized\n            added LanguageCodes,
  needs uniform-algebras\n0.1.2 for 9.2.1 \n    removed snap-core, because limited
  with attoparsec <0.14\n0.1.3\n    pushed on hackage\n\n0.1.3 added stack build lts
  19.16 for ghc 9.0.2\n0.1.3.1 removed dependency on text-icu0.1.3.2\n    added showlong
  for arrays to list one item per line\n0.1.3.3\n    import frm similar packages:\n
  \   - algebra of programming: https://hackage.haskell.org/package/aop-prelude-0.4.1.1/docs/src/AOPPrelude.html
  \n    - from thielmann: https://hackage.haskell.org/package/utility-ht\n    - from
  mitchel : https://hackage.haskell.org/package/extra\n    could be better just to
  copy the code.\n    changes: swapPair -> swap, pair -> both\n\n    split off the
  tuples stuff from the pointless\n0.1.3.4 \n0.1.3.5 \n    instance shownice \n    added
  shownice with 4 digits precision\n        showAsLines - shows list, inside is shown
  regularly, does not propagate\n0.1.5.1  ghc 9.2.5 changed versino to be in sync
  with other packages"
basic-deps:
  uniform-algebras: '>=0.1.4'
  MissingH: -any
  bytestring: -any
  split: -any
  base: '>4.5 && <5'
  monads-tf: -any
  text: -any
  snap-core: -any
  network-uri: -any
  pretty-show: -any
  safe: -any
all-versions:
- 0.1.0
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.5.1
author: Andrew Frank
latest: 0.1.5.1
description-type: markdown
description: " \n\n# The uniform-strings package \n\nTries to resolve the confusing
  breadth of choices to represent and operate on text in Haskell. It contains \n\n-
  a *principled* set of conversions between representations for text, namely \n\n
  \   - s - Strings,\n\n    - t - Text,\n\n    - b - ByteString,\n\n    - l - LazyByteString,
  \n\n    - bu - ByteString containing `UTF-8` characters,\n\n    - latin - charcters
  with `latin1` encoding\n\n    - u - URLencoding, and \n\n    conversions functions
  of *x to y* are named `x2y` (e.g. `s2t` for a conversion from String to Text).\n\n-
  a set of functions applicable to character strings, which have the exact same semantics
  for all the types (usually the name of the function applicable to Strings with an
  appended \\\"\\'\\\" to avoid name clashes with existing code.\n\n- a few infix
  function for string manipulation. \n\nThis is a package in `uniformBase` and other
  uniform packages will build on it. \n\nIt may require  \n    debian: apt-get install
  libicu-dev\n\nTo Do:\nThe code originated in 2010 to 2018. It will be revised  and
  the dependencies greatly reduced when using `text` and `basement`.\n\n# Intention
  of *uniform* packages\nThe *uniform* packages are yet another attempt to select
  a useful subset from the overwhelming variety of the Haskell biotop. It was started
  in the 2010, grew over the years but was never packaged and put into Hackage; it
  is comparable to other similar attempts from which it has learned and occasionally
  copied code. \n\nThe \"uniform\" approach is different from some others by:\n- compatible
  with 'standard' Haskell, i.e. Haskell 2010 plus extensions as indicated in the modules,\n-
  use the regular Haskell prelude,\n- avoid name clashes as far as possible,\n- combine
  logically connected operations in one place and in a form allowing coordinated use,
  but \n- broken in small, mostly independently building packages.\n\nChoices are:\n-
  strong preference for total functions, achieved often with producing error messages
  which makes debugging easier than the plain failure of partial functions,\n- use
  `monads-tf` because TypeFamilies seemed to lead to better documentation.\n\nIssues
  with this approach: it is limited by the deeps of understanding of Haskell of the
  author and his experience. It shows a focus on understanding semantics (and formal
  ontology) linked to algebra applied to practical problems (Geographic Information
  Systems). \nIt seems that efforts to construct coherent subsets of Haskell are limited
  by the complexity of the task -- the more comprehensive an environment should be
  the more complex is it to learn and use. The approach here is what emerged after
  some 25 years of using Haskell to write application oriented code, mostly to demonstrate
  theories in spatial information theory. "
license-name: GPL-2.0-only
