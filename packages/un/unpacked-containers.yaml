all-versions:
- '0'
author: Edward A. Kmett
basic-deps:
  base: '>=4.10 && <5'
  data-default-class: ^>=0.1
  deepseq: ^>=1.4
  unpacked-containers: '>=0'
changelog: |
  ## 0

  * repository initialized
changelog-type: markdown
description: "unpacked-containers\n==\n\nThis package supplies a simple unpacked version
  of `Data.Set` and `Data.Map` using backpack.\n\nThis can remove a level of indirection
  on the heap and unpack your keys directly into nodes of your sets and maps.\n\nThe
  exported modules roughly follow the API of `containers 0.5.11`, but with all deprecated
  functions removed.\n\nNote however, that all CPP has been removed relative to `containers`,
  because on one hand, use of backpack locks us to a current version of GHC,\nand
  on the other there is a bug in GHC 8.2.2 that prevents the use of CPP in a module
  that uses backpack. This issue is resolved in GHC 8.4.1,\nso as that comes into
  wider usage if we need to track `containers` API changes going forward and those
  need CPP we can just drop support for 8.2.2.\n\nIt is intended that you will remap
  the names of the modules. from `Set.*` or `Map.*` to some portion of the namespace
  that is peculiar to your\nproject, and so the module names are designed to be as
  short as possible, mirroring the usage of `containers` but with the `Data` prefix
  stripped off.\n\nUsage\n-----\n\nTo work this into an existing haskell project,
  you'll need to be on GHC >= 8.2.2, and use cabal >= 2. \n\nFirst build an internal
  library for your project that has a module that matches the `Key` signature.\n\n```\nmodule
  MyKey where\n\ntype Key = ()\n```\n\nYou can put whatever you want in for `Key`
  as long as it is an instance of `Ord`.\n\nThen in your cabal file you can set up
  your internal library as an extra named internal library (multiple library support
  was added in cabal 2).\n\n```\nlibrary my-keys\n  exposed-modules: MyKey\n  build-depends:
  base\n```\n\nand in your library or executable that wants to work with sets or maps
  of that key type use\n\n\n```\nlibrary\n  build-depends: unpacked-containers, my-keys\n
  \ mixins: unpacked-containers (Set as MyKey.Set) requires (Key as MyKey)\n```\n\nIf
  you need several `Set`s or `Map`s you can use several `mixins:` clauses.\n\nIf you
  need to expose the set type, remember you can use a `reexported-modules:` stanza.\n\nNow
  you work with `MyKey.Set` as a monomorphic set type specific to the type of `Key`
  you specified earlier.\n\nSee the `executable unpacked-set-example` and `library
  example` sections in the `unpacked-containers.cabal` file for a minimal working
  example.\n\nDocumentation\n==\n\nTo build haddocks for this project you need to
  run `cabal new-haddock` as `cabal-haddock` doesn't work.\n\nContact Information\n-------------------\n\nContributions
  and bug reports are welcome!\n\nPlease feel free to contact me through github or
  on the #haskell IRC channel on irc.freenode.net.\n\n-Edward Kmett\n"
description-type: markdown
hash: 0e69d72f5bdf848e480cecfa8b3f093a52ec2336494359c48ba60a29ab28e093
homepage: http://github.com/ekmett/unpacked-containers/
latest: '0'
license-name: BSD-2-Clause
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Unpacked containers via backpack
test-bench-deps: {}
