all-versions:
- 1.0.0
- 1.0.2
- 2.0.0
author: Sven Heyll
basic-deps:
  QuickCheck: '>=0'
  atomic-primops: '>=0'
  base: '>=4.14 && <5'
  containers: '>=0.5.8 && <0.7'
  data-default: '>=0.7 && <0.8'
  hashable: '>=0'
  mtl: '>=0'
  text: '>=0'
  unagi-chan: '>=0'
  unliftio: '>=0'
  unliftio-messagebox: '>=0'
changelog: ''
changelog-type: ''
description: "[![main Build Results](https://github.com/sheyll/unliftio-messagebox/workflows/.github/workflows/test.yml/badge.svg?branch=main)](https://github.com/sheyll/unliftio-messagebox/actions)\n[![Latest
  Build Results](https://github.com/sheyll/unliftio-messagebox/workflows/.github/workflows/test.yml/badge.svg)](https://github.com/sheyll/unliftio-messagebox/actions)\n\n#
  Fast and Robust Message Queues for Concurrent Processes\n\n**NOTE:** To be able
  to fully view this README, use the [GitHub Pages Version](https://sheyll.github.io/unliftio-messagebox/).\n*
  [API docs](./generated-reports/haddock-report/unliftio-messagebox)\n* [API docs
  on Hackage](http://hackage.haskell.org/package/unliftio-messagebox)\n\nA thin wrapper
  around a subset of `unagi-chan` based on `unliftio`.\n\nThe unit tests and benchmarks
  in this project excercise a subset \nof `unagi-chan`, so hopefully the user of this
  library doesn't\nhave to worry about this.\n\nThis project also aims to implicitly
  verify parts of `unagi-chan`.\n\nThe overall goal is to reduce the risk of live
  and dead locks and \nthread starvation, as well as acceptable performance \neven
  in massively concurrent programs.\n\n## Module Structure\n\nThe library is contained
  in modules with names starting with \n**UnliftIO.MessageBox**.\n\n![Module Structure](./generated-reports/module-graph/module-graph.png)\n\nAlso
  the module \n`UnliftIO.MessageBox` [(API docs)](./generated-reports/haddock-report/unliftio-messagebox/UnliftIO-MessageBox.html)\n[(Hackage)](http://hackage.haskell.org/package/unliftio-messagebox/docs/UnliftIO-MessageBox.html)\nexposes
  the API, and can be used to import everything.\n\nThe full documentation is either
  [on this page](./generated-reports/haddock-report/unliftio-messagebox/index.html)[(build
  log)](./generated-reports/haddock-report/build.log)\nor on [Hackage](http://hackage.haskell.org/package/unliftio-messagebox).\n\n##
  Benchmarks\n\n* [Single Core Results](./generated-reports/benchmark-report/benchmark-1-CORES.html)\n*
  [Multi Core Results](./generated-reports/benchmark-report/benchmark-ALL-CORES.html)\n\n##
  Unit Tests\n\n* [Test Results](./generated-reports/test-profiling-report/test-result.html)\n*
  [Test Coverage](./generated-reports/test-coverage-report/hpc_index.html)\n### Heap
  Profiling\n\n![Test Heap Profiling Report](./generated-reports/test-profiling-report/unliftio-messagebox-test.svg)\n\n###
  Time Profiling\n\n[Test Profiling Report](./generated-reports/test-profiling-report/unliftio-messagebox-test.prof)\n\n##
  Memory Leak Tests\n\nThis is a small application with a 1002 processes, each performing
  a fix amount of \nwork.\n\nWhen the work is done, all processes synchronise before
  starting a new iteration.\nAfter each iteration, the memory usage is queried from
  the GHC runtime \nstatistics.\nThere are 10 iterations like that. \n\nAfter that
  all processes are shutdown, and the process\nstarts all over again, 5 times.\n\nIn
  total 50 iterations.\n\nIf memory is leaked it should become visible.\n\nThe test
  program is executed with the `+RTS -Mxxxm` option that instructs\nthe runtime to
  limit the available heap to `xxx` MB, so if there is a memory\nleak, the program
  would at some point crash with a heap exhaustion error.\n\n![Memleak Test Heap Profiling
  Report](./generated-reports/messagebox-memleak-test-report/unliftio-messagebox-memleak-test.svg)\n\nThe
  output is printed into [this log file](./generated-reports/messagebox-memleak-test-report/test.log).\n"
description-type: markdown
hash: 8a38f3eb0cd82312316674dfbaea788642be260ddd41eaabfb81d77e5cfa0b3d
homepage: https://github.com/sheyll/unliftio-messagebox#readme
latest: 2.0.0
license-name: BSD-2-Clause
maintainer: sven.heyll@gmail.com
synopsis: Fast and robust message queues for concurrent processes
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  atomic-primops: '>=0'
  base: '>=4.14 && <5'
  containers: '>=0.5.8 && <0.7'
  criterion: '>=0'
  data-default: '>=0.7 && <0.8'
  hashable: '>=0'
  mtl: '>=0'
  tasty: '>=0'
  tasty-html: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  unagi-chan: '>=0'
  unliftio: '>=0'
  unliftio-messagebox: '>=0'
