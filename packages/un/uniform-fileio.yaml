homepage: ''
changelog-type: markdown
hash: b987e5914bd85ff4c5d577388220dd6d8480f07764275fd9c9ba7bfe31dd30bf
test-bench-deps:
  uniform-algebras: -any
  exceptions: -any
  uniform-strings: -any
  bytestring: -any
  HTF: -any
  unix: -any
  path: -any
  base: '>=4.7 && <5'
  monads-tf: -any
  text: -any
  test-invariant: -any
  quickcheck-text: -any
  filepath: -any
  pureMD5: -any
  uniform-error: -any
  uniform-fileio: -any
  uniform-time: -any
  pipes: -any
  zlib: -any
  deepseq: -any
  path-io: -any
  safe: -any
  directory: -any
maintainer: Andrew U. Frank <uniform@gerastree.at>
synopsis: Uniform file handling operations
changelog: "0.0.16\n    move from   versions in Workspace8 2019\n    0.0.8 for use
  in litText\n    0.0.11 fixed callIO and use callIO everywhere\n    0.0.12 changed
  to use path library for filnames\n    0.0.14.2 changed copyFile' to copyOneFile
  renameOneFile\n    0.0.14.3 path without wrapper \n    0.0.14.6 fix fileExtension
  confusion\n    0.0.15.0 fix building issue with time \n    0.0.15.2 lts 16.0"
basic-deps:
  uniform-algebras: -any
  exceptions: -any
  uniform-strings: -any
  bytestring: -any
  unix: -any
  path: -any
  base: '>=4.7 && <5'
  monads-tf: -any
  text: -any
  filepath: -any
  pureMD5: -any
  uniform-error: -any
  uniform-time: -any
  pipes: -any
  zlib: -any
  deepseq: -any
  path-io: -any
  safe: -any
  directory: -any
all-versions:
- 0.1.0
author: Andrew Frank
latest: 0.1.0
description-type: markdown
description: "Uniform methods to access data in files.\n\nGoals:\n\n- same functions
  with identical semantics independent of representation\n\n- all functions are total
  (or become so using `Maybe` or `Either`)\n\n- performance is NOT a goal - once the
  program logic is confirmed and tested, performance improvements can be achieved
  based on observations. The goal for \"uniform\" is reducing the complexity for the
  designer of a program - performance improvement come when the logic is correct.
  \n\nSpecifically:\n\n- a file path can be given as `Filepath` (which is a string)
  or as a `Path`, which different types for directories and files and for absolute
  and relative path, to reduce confusing.\n\n- functions to work on file path independent
  of representation\n\n- functions to access file with either type of path representation\n\n-
  operations are total; failures of file operations are signaled by ErrorT or Either
  returns.\n\nExperimentally:\n\n- `TypedFile.hs` tries to extend a type concept from
  the representation in memory to a representation on file (indicated by the file
  extension). It proposes a set of functions to read structured files into structured
  data - selected by the extensions."
license-name: GPL-2.0-only
