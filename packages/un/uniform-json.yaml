homepage: https://github.com/andrewufrank/u4blog.git#readme
changelog-type: markdown
hash: 44424923434564850095be828a93962316d5599749297c38e20364269f54d4dc
test-bench-deps:
  lens-aeson: -any
  HTF: -any
  base: '>=4.7 && <5'
  time: -any
  aeson-pretty: -any
  monads-tf: -any
  unordered-containers: -any
  quickcheck-text: -any
  lens: -any
  uniform-time: '>=0.1.5'
  pretty-show: -any
  aeson: -any
  uniformBase: -any
  yaml: -any
  uniform-json: '>=0.1.5'
maintainer: Andrew U. Frank <frank@geoinfo.tuwien.ac.at>
synopsis: handling of JSON and YAML in an uniform way
changelog: "0.0.12\n    move from   versions in Workspace8 2019\n0.0.9 radical reduction
  to use Text only\n0.0.11 structure regularized\n            added LanguageCodes,
  needs uniform-algebras\n    v0.0.4 for aeson >2.0\n    v0.0.5 for ghc 9.2.1, aeson
  >= 2 \n    0.0.6 change in error to use ExceptionT\n    0.0.6.1 added getAtKey for
  int\n\n  0.0.6.1 for lts-19.16 with aeson 2.0.3.0 - \n      \n0.1.5 branch for ghc
  9.2.5\n0.1.5.1\n0.1.5.2  add filename in error msg from yaml parse    "
basic-deps:
  lens-aeson: -any
  base: '>=4.7 && <5'
  aeson-pretty: -any
  monads-tf: -any
  unordered-containers: -any
  lens: -any
  pretty-show: -any
  aeson: -any
  uniformBase: '>=0.1.5'
  yaml: -any
all-versions:
- 0.1.5.1
- 0.1.5.2
author: Andrew Frank
latest: 0.1.5.2
description-type: markdown
description: "Uniform approach to use JSON and YAML\n\nTo use JSON and YAML in Haskell
  - connecting to other tools which expects input or produce output in those formats
  - is a challenge.\nA set of functions which were used in a few projects - some connected
  to `pandoc` - are here collected and arranged to work in the uniform style (use
  ErrIO, `text`).  "
license-name: LicenseRef-GPL
