homepage: ''
changelog-type: markdown
hash: 9dd7bc7fb8b91016b3783fd846e85bfb35add0bae796d36b0373eb9ff72ce35f
test-bench-deps: {}
maintainer: Andrew U. Frank <uniform@gerastree.at>
synopsis: Pointless functions and a simplistic zero and monoid
changelog: |-
  0.0.10
      updating 0.0.9 versions in Workspace8 2019 for submission
      cleaned up (mostly)
  0.1.2 preparing for 9.2.1
basic-deps:
  base: '>4.7 && <5'
  test-invariant: -any
  numeric-prelude: -any
all-versions:
- 0.1.0
- 0.1.2
author: Andrew Frank
latest: 0.1.2
description-type: markdown
description: " \n\n# The uniform-algebras package \ncontains a few simplistic algebras,
  e.g.\n- a zero which is not even a semigroup to be widely usable as a generic \"nothing\";
  it is attempted to allow automatic instantiation (under construction),\n- a ListForm
  class, which is a monoid and has generic operations to make and append to a list.
  \n- a collection of operations for \"pointless\" code writing, especially tuples
  with 4 or 5 elements.\n\nThis is a starter package, with no dependencies except
  for base, other uniform packages will build on it.\n\n# Pointers to somewhat related
  things: \n- [uniform-pair](https://hackage.haskell.org/package/uniform-pair-0.1.15)\n-
  [basement](https://hackage.haskell.org/package/basement) \n\n# Intension of \"uniform\"
  packages\nThe \"uniform\" packages are yet another attempt to select a useful subset
  from the overwhelming variety of the Haskell biotop. It was started in the 2010,
  grew over the years but was never packaged and put into Hackage; it is comparable
  to other similar attempts from which it has learned and occasionally copied code.
  \n\nThe \"uniform\" approach is different from some others by:\n- compatible with
  'standard' Haskell, i.e. Haskell 2010 plus extensions as indicated in the modules,\n-
  use the regular Haskell prelude,\n- avoid name clashes as far as possible,\n- combine
  logically connected operations in one place and in a form allowing coordinated use.\n\nIssues
  with this approach: it is limited by the deeps of understanding of Haskell of the
  authors and his experience. It shows a focus on understanding semantics (and formal
  ontology) linked to algebra applied to practical problems (Geographic Information
  Systems). \nIt seems that efforts to construct coherent subsets of Haskell are limited
  by the complexity of the task -- the more comprehensive an environment should be
  the more complex is it to learn and use. The approach here is what emerged after
  some 25 years of using Haskell to write application oriented code, mostly to demonstrate
  theories in spatial information theory. "
license-name: GPL-2.0-only
