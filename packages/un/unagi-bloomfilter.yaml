all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
author: Brandon Simmons
basic-deps:
  atomic-primops: '>=0.8'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  hashabler: '>=1.3.0'
  primitive: '>=0'
changelog: ''
changelog-type: ''
description: |
  This library implements a fast concurrent bloom filter, based on bloom-1 from
  "Fast Bloom Filters and Their Generalization" by Y Qiao, et al.

  A bloom filter is a probabilistic, constant-space, set-like data structure
  supporting insertion and membership queries. This implementation is backed by
  SipHash so can safely consume untrusted inputs.

  The implementation here compares favorably with traditional set
  implementations in a single-threaded context, e.g. here are 10 inserts or
  lookups compared across some sets of different sizes:

  <<http://i.imgur.com/gei1LW4.png>>

  With the llvm backend benchmarks take around 75-85% of the runtime of the
  native code gen.

  Unfortunately writes in particular don't seem to scale currently; i.e.
  distributing writes across multiple threads may be /slower/ than in a
  single-threaded context, because of memory effects. We plan to export
  functionality that would support using the filter here in a concurrent
  context with better memory behavior (e.g. a server that shards to a
  thread-pool which handles only a portion of the bloom array).

  <<http://i.imgur.com/RaUSmZB.png>>
description-type: haddock
hash: f3bfb382d8efc33814ca3c905125c96f23a32e81debfdce092aa8369b2495b5b
homepage: http://github.com/jberryman/unagi-bloomfilter
latest: 0.1.1.2
license-name: BSD-3-Clause
maintainer: brandon.m.simmons@gmail.com
synopsis: A fast, cache-efficient, concurrent bloom filter
test-bench-deps: {}
