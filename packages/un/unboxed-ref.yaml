all-versions:
- 0.3.0.0
- 0.4.0.0
author: winter
basic-deps:
  base: '>=4.8 && <5.0'
  ghc-prim: '>=0.4'
  primitive: '>=0'
changelog: |
  # Revision history for unboxed-ref

  ## 0.4.0.0  -- 2017-07-17

  * Add atomic operations which return old value, which is useful for building concurrent control structures.
changelog-type: markdown
description: |
  unboxed-ref
  ===========

  [![Hackage](https://img.shields.io/hackage/v/unboxed-ref.svg?style=flat)](http://hackage.haskell.org/package/unboxed-ref)
  [![Test Status](https://img.shields.io/travis/winterland1989/unboxed-ref.svg)](https://travis-ci.org/winterland1989/unboxed-ref)

  This package provide fast unboxed references for `ST` and `IO` monad and atomic operations for `IORefU Int` type. Unboxed reference is implemented using single cell `MutableByteArray s` to eliminate indirection overhead which `MutVar# s a` carry, on the otherhand unboxed reference only support limited type(instances of `Prim` class).

  A simple diagram could show the difference between `IORef Int` with `IORefU Int`:

  ```
  data Foo = Foo {-# UNPACK #-} (IORef Int)

          +-----------+    +-------------+    +---------+
          | Foo |  *  +--->+ MutVar# | * +--->+ I# | i# |
          +-----------+    +-------------+    +---------+

  data Bar = Bar {-# UNPACK #-} (IORefU Int)

          +-----------+    +------------------------+
          | Bar |  *  +--->+ MutableByteArray# | i# |
          +-----------+    +------------------------+
  ```

  Benchmark
  ---------

  Modified from [this benchmark](https://marcotmarcot.wordpress.com/2010/03/13/performance-of-ioref/).

  ```bash
  $ cd bench && cabal build
  $ time ./dist/build/bench-ref/bench-ref
  143
  ./dist/build/bench-ref/bench-ref  19.76s user 0.02s system 99% cpu 19.785 total
  ------------------------------------------------------------
  $ time ./dist/build/bench-unboxed-ref/bench-unboxed-ref
  143
  ./dist/build/bench-unboxed-ref/bench-unboxed-ref  16.66s user 0.02s system 99% cpu 16.694 total
  ------------------------------------------------------------
  $ ./dist/build/bench-unboxed-ref-atomic/bench-unboxed-ref-atomic
  50500000
  ------------------------------------------------------------
  $ ./dist/build/bench-ref-atomic/bench-ref-atomic
  3597361
  ```
description-type: markdown
hash: a1fce8c763c4656fc6fa01db1722b088362bc48eafe1aad508d0dd5e5d668641
homepage: https://github.com/winterland1989/unboxed-ref
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: drkoster@qq.com
synopsis: Fast unboxed references for ST and IO monad
test-bench-deps:
  HUnit: '>=0'
  async: '>=0'
  base: '>=4 && <5'
  unboxed-ref: '>=0'
