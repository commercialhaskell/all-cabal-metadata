homepage: https://github.com/hapytex/unicode-tricks#readme
changelog-type: markdown
hash: 8a7b8e0d0df6dbf09a4da4e0892f958830b5a08dc932e29ebb8a81bff7e888e2
test-bench-deps:
  base: -any
  hspec: ==2.*
  QuickCheck: '>=2.10.0 && <2.14.3'
  unicode-tricks: -any
maintainer: hapytexeu+gh@gmail.com
synopsis: Functions to work with unicode blocks more convenient.
changelog: |
  # `unicode-tricks` Changelog

  For a full list of changes, see the history on [GitHub](https://github.com/hapytex/unicode-tricks).

  ## Version 0.9.0.0

  Added support for /ballot boxes/, /brackets/, /control pictures/, seven-segment displays, and Klingon characters (for the private codeblock).


  ## Version 0.8.0.0

  Reorganizing modules.

  Ancient Egyptian numerals.

  Combining Unicode characters.

  Extra range checks.

  More functionality to render Roman numerals.

  ## Version 0.7.0.0

  Small plus and minus in subscript and superscript.

  Bugfix by @wismill.

  ## Version 0.6.0.0

  Added *duodecimal* numbers and *math* alphanumerical symbols.

  ## Version 0.5.0.0

  Added *dices*, *dominos*, and *Roman numerals*.

  ## Version 0.4.0.0

  Added *playing cards* character support.

  ## Version 0.3.0.0

  Added *chess* character support.

  ## Version 0.2.0.0

  Added *Braille* character support.

  ## Version 0.1.0.0

  The first version that is deployed on Hackage.
basic-deps:
  base: '>=4.7 && <5'
  text: '>=1.1 && <1.3'
  data-default: '>=0.2'
  containers: '>=0.4.2.1'
  QuickCheck: '>=2.10.0 && <2.14.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.8.0.0
- 0.9.0.0
- 0.9.1.0
author: Willem Van Onsem
latest: 0.9.1.0
description-type: markdown
description: |
  # unicode-tricks

  [![Build Status of the package by GitHub actions](https://github.com/hapytex/unicode-tricks/actions/workflows/build-ci.yml/badge.svg)](https://github.com/hapytex/unicode-tricks/actions/workflows/build-ci.yml)
  [![Build Status of the package by Hackage](https://matrix.hackage.haskell.org/api/v2/packages/unicode-tricks/badge)](https://matrix.hackage.haskell.org/#/package/unicode-tricks)
  [![Hackage version badge](https://img.shields.io/hackage/v/unicode-tricks.svg)](https://hackage.haskell.org/package/unicode-tricks)

  Based on the [**`unicode`** package](https://hackage.haskell.org/package/unicode) by *Henning Thielemann*.

  This library aims to provide functionality to make working with certain blocks of
  unicode characters more effective.

  Currently the package contains the following modules:

   - **`Data.Char.Core`**: a module that defines common data structures;
   - **`Data.Char.BallotBox`**: rendering boxes that are empty, with a checkmark, or a cross;
   - **`Data.Char.Block`**: rendering a 2-by-2 block by a matrix of `Bool`s;
   - **`Data.Char.Brackets`**: determine if a character is a bracket, and find the corresponding bracket;
   - **`Data.Char.Braille`**: a module to render Braille characters with six or eight dot cells;
   - **`Data.Char.Card`**: a module to work with playing cards;
   - **`Data.Char.Chess`**: a module to render chess pieces (and some variants) in unicode;
   - **`Data.Char.Control`**: a module that visualizes *control characters*;
   - **`Data.Char.Combining`**: combine a character with a (sequence of) *combining* characters (diacritics, geometrical shapes, etc.);
   - **`Data.Char.Dice`**: a module to render die unicode characters;
   - **`Data.Char.Domino`**: a module to render domino unicode characters;
   - **`Data.Char.Egyptian`**: a module that defines pattern synonyms for ancient Egyptian hieroglyphs;
   - **`Data.Char.Emoji`**: functions to render *emoji* characters (flags, objects, persons, etc.);
   - **`Data.Char.Enclosed`**: functions to convert alphanumerical characters to characters where these are enclosed by circles, squares, parenthesis, etc.;
   - **`Data.Char.Frame`**: typesetting frame elements. Lines of the frames can be `Light` or `Heavy`, and there are additional options to use arcs for corners;
   - **`Data.Char.Math.*`**: a set of modules to render mathematical symbols and text, for example in *Fraktur*, *Blackboard bold*, etc.
   - **`Data.Char.Number.Duodecimal`**: a module to work with [duodecimal numbers](https://en.wikipedia.org/wiki/Duodecimal);
   - **`Data.Char.Number.Egyptian`**: a module to render [ancient Egyptian numerals](https://en.wikipedia.org/wiki/Egyptian_numerals);
   - **`Data.Char.Number.Roman`**: a module to render [Roman numerals](https://en.wikipedia.org/wiki/Roman_numerals);
   - **`Data.Char.Number.Segmented`**: a module to render numbers on a [seven-segment display](https://en.wikipedia.org/wiki/Seven-segment_display);
   - **`Data.Char.Private`**: characters belonging to the *private usage area*;
   - **`Data.Char.Private.Klingon`**: Klingon script characters; and
   - **`Data.Char.Small`**: making use of subscript and superscript in unicode, and for example formatting `Ratio` objects.

  ## `unicode-tricks` is *safe* Haskell

  The modules are marked with the `{-# LANGUAGE Safe #-}` pragma, it thus provides
  guarantees, for example about not using [`unsafePerformIO`](https://begriffs.com/posts/2015-05-24-safe-haskell.html).

  ## Contribute

  You can contribute by making a pull request on the [*GitHub
  repository*](https://github.com/hapytex/unicode-tricks).

  You can contact the package maintainer by sending a mail to
  [`hapytexeu+gh@gmail.com`](mailto:hapytexeu+gh@gmail.com).

  Contributors:

   - [`@wismill`](https://github.com/wismill) found a bug and added tests for the
     `Data.Char.Math` as well as the `Data.Char.Number.Segmented` module.
license-name: BSD-3-Clause
