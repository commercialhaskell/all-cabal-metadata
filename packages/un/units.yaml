all-versions:
- 1.0.0
- 1.0.1
- '1.1'
- '2.0'
- '2.1'
- '2.2'
- 2.2.1
- '2.3'
- '2.4'
- 2.4.1
- 2.4.1.1
- 2.4.1.2
- 2.4.1.3
- 2.4.1.4
- 2.4.1.5
author: Richard Eisenberg <rae@richarde.dev>, Takayuki Muranushi <muranushi@gmail.com>
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.4'
  deepseq: '>=1.1.0.0 && <1.5'
  lens: '>=4 && <6'
  linear: '>=1.16.2'
  mtl: '>=1.1'
  multimap: '>=1.2'
  singletons: '>=0.9 && <3'
  syb: '>=0.3'
  template-haskell: '>=0'
  th-desugar: '>=1.5.4'
  units-parser: '>=0.1 && <1.0'
  vector-space: '>=0.8'
changelog: |
  Release notes for `units`
  =========================

  Version 2.4.1.5
  ---------------
  * Use the `(-)` operator of the underlying `Num` instance in `(|-|)`.
    This prevents crashes when the underlying number type does not support
    negation. (Issue #69)
  * Compatibility with GHC 9.2.

  Version 2.4.1.4
  ---------------
  * Compatibility with GHC 9.0.

  Version 2.4.1.3
  ---------------
  * Compatibility with GHC 8.10, thanks to @ocharles.

  Version 2.4.1.2
  ---------------
  * Compatibility with singletons 2.6 and GHC 8.8, further thanks to @ocharles.

  Version 2.4.1.1
  ---------------
  * Fix some GHC compatibility issues, thanks to @ocharles.

  Version 2.4.1
  -------------
  * Add `Units` superclass to `UnitFactor`, easing type inference in
  GHC 8.0, thanks to @rimmington.

  Version 2.4
  -----------
  * New interface with the `linear` package in `Data.Metrology.Linear`.

  * New `Show` and `Read` instances for dimensionless quantities.

  * New `NFData` instances for quantities, thanks to @rimmington.

  * GHC 8 compatibility.

  Version 2.3
  -----------
  * `Data.Metrology.TH.evalType` now works in GHC 7.10 on dimensions like `Volume` instead
  of just base dimensions.

  * Break out the units parser into its own package: `units-parser`.

  * Add `Data.Metrology.Unsafe.UnsafeQu`, which has `Functor` and other
  instances.

  * Fix the fixity of `%`. It was way too high! Now it's 5.

  * Add the ability to convert in and out of point quantities. See `quOfPoint`
  and friends in `Data.Metrology.Vector`.

  Version 2.2.1
  -------------

  * Compatibility with GHC 7.10.

  * Added `AdditiveGroup` and `VectorSpace` instances for `Qu`.

  Version 2.2
  -----------

  * Some types of arithmetic operations are different to aid in type inference.
  For example, `*|` does not normalize its dimension list.

  * The types of the `derive...` TH functions now allow for deriving units
  based on composite dimensions/units.

  * New TH function to help declare constants, called `declareConstant`.

  Version 2.1
  -----------

  * Includes a decently comprehensive test suite.

  * Add support for unit parsing within expressions:

        g = 9.8 % [si| m/s^2 |]

    See `Data.Metrology.Parser`.

  * Now, `Data.Metrology` exports operators that work with the default
    LCSU. Use `Data.Metrology.Poly` to get the old, more flexible operators.

  * Moved `showIn` from `Data.Metrology.Show` to `Data.Metrology.Poly`. This
    allows users to import `showIn` without a `Show` instance for quantities.

  * Numeric operations are available based on vector spaces, as implemented in
    the `vector-space` library. See `Data.Metrology.Vector`.

  * Some documentation cleanup.

  * New function `evalType` that evaluates a type, using Template Haskell. This
    allows for easier instance declarations for quantities.

  * New class `Quantity` that allows for easy conversions with non-`units` types.

  * A few bugfixes.

  * The `Eq` and `Ord` instances now work over any quantity, not just dimensionless ones.

  * New functions in `Data.Metrology.TH` that define `Dimension` and `Unit` instances
    for you.

  Version 2.0
  -----------

  This is a major update. `units` now supports the notion of a local unit set
  and of separable dimensions and units. See the description in the
  [draft paper](http://www.cis.upenn.edu/~eir/papers/2014/units/units.pdf) for
  more info.

  This update will very likely break any code that used `units-1.x`.

  The update was written in partnership with Takayuki Muranushi.

  Version 1.1
  -----------

  * Added dependency on the singletons library

  * Brought up to date with changes for GHC 7.8

  * Generalized numerical representation

  * Improved Haddock headers

  Version 1.0.1
  -------------

  * Fixed dependency on base to force compilation with GHC >= 7.7

  Version 1.0
  -----------

   * First release
changelog-type: markdown
description: "units\n=====\n\nThe _units_ package provides a mechanism for compile-time
  dimensional analysis\nin Haskell programs. It defines an embedded type system based
  on\nunits-of-measure. The units and dimensions defined are fully extensible, and\nneed
  not relate to physical properties. This package exports definitions\nonly for `Dimensionless`
  and `Number`. The set of units and dimensions from\nthe International System (SI)
  are exported from the companion package `units-defs`.\n\nThis package supports independent
  notions of _dimension_ and _unit_. Examples\nof dimensions include length and mass.
  Examples of unit include meter and\ngram. Every unit measures a particular dimension,
  but a given dimension\nmay be measured by many different units. For example, both
  meters and feet\nmeasure length.\n\nThe package supports defining multiple inter-convertible
  units of the same\ndimension, such as `Meter` and `Foot`. When extracting a numerical
  value from\na quantity, the desired unit must be specified, and the value is converted\ninto
  that unit.\n\nThe laws of nature have dimensions, and they hold true regardless
  of the units\nused. For example, the gravitational force between two bodies is\n`(gravitational
  constant) * (mass 1) * (mass 2) / (distance between body 1 and\n2)^2`, regardless
  of whether the distance is given in meters or feet\nor centimeters. In other words,
  every law of nature is unit-polymorphic.\n\nThe _units_ package supports unit-polymorphic
  programs through the coherent\nsystem of units (CSU) mechanism. A CSU is essentially
  a mapping from\ndimensions to the units. All dimensioned quantities (generally just
  called\nquantities) are expressed using the `Qu` type. The `Qu` type constructor
  takes\na (perhaps compound) dimension, a CSU and a numerical value type as arguments.\nInternally,
  the quantity is stored as a number in the units as specified in\nthe CSU -- this
  may matter if you are worried about rounding errors. In the\nsequence of computations
  that works within one CSU, there is no unit\nconversion. Unit conversions are needed
  only when putting values in and out of\nquantities, or converting between two different
  CSUs.\n\nChecking out units\n------------------\n\nUnits has a git submodule, so
  you'll want to use `git clone --recursive`. Example:\n\n    git clone --recursive
  https://github.com/goldfirere/units\n\nUser contributions\n------------------\n\nIt
  is easy to imagine any number of built-in facilities that would go well\nwith this
  package (sets of definitions of units for various systems, vector\noperations, a
  suite of polymorphic functions that are commonly needed but hard\nto define, etc.).
  Yet, I (Richard) don't have the time to imagine or write all\nof these. If you write
  code that is sufficiently general and might want to be\nincluded with this package
  (but you don't necessarily want to create your own\nnew package), please write me!\n\nModules\n-------\n\nThe
  _units_ package exports several key modules. Note that you will generally\nimport
  only *one* of `Data.Metrology`, `Data.Metrology.Poly`, or\n`Data.Metrology.Vector`.\n\n
  -  __`Data.Metrology.Poly`__\n\n    This is the main exported module. It exports
  all the necessary functionality\n    for you to build your own set of units and
  operate with them.\n\n -  __`Data.Metrology`__\n\n    This re-exports most of the
  definitions from `Data.Metrology.Poly`, but\n    restricts a few operators to work
  only with the default LCSU, as this is\n    simpler for new users to `units`.\n\n
  -  __`Data.Metrology.Vector`__\n\n    This also re-exports a similar set of definitions
  as `Data.Metrology.Poly`,\n    but provides numerical operations based on `vector-space`
  instead of the\n    standard numerical classes.\n\n -  __`Data.Metrology.Linear`__\n\n
  \   This exports a set of definitions for interoperability with the `linear`\n    package.
  This is /not/ a top-level import; generally, import this with\n    `Data.Metrology.Poly`
  as well.\n\n -  __`Data.Metrology.Internal`__\n\n    This module contains mostly-internal
  definitions that may appear in GHC's\n    error messages. Users will generally not
  need to use these definitions in\n    their code. However, by exporting this module
  from within\n    `Data.Metrology.Poly`, we can reduce the module-prefix clutter
  in error\n    messages.\n\n -  __`Data.Metrology.Unsafe`__\n\n    This module exports
  the constructor for the central datatype that stores\n    quantities. With this
  constructor, you can arbitrarily change\n    units! Use at your peril.\n\n -  __`Data.Metrology.Show`__\n\n
  \   This module defines a `Show` instance for quantities, printing\n    out the
  number stored along with its canonical dimension. This behavior\n    may not be
  the best for every setting, so it is exported separately.\n    Importing this module
  reduces the guaranteed unit-safety of your code,\n    because it allows you to inspect
  (in a round-about way) how your quantities\n    are stored.\n\n -  __`Data.Metrology.Parser`__\n\n
  \   This module allows users to create custom unit parsers. The user specifies\n
  \   a set of prefixes and a set of units to parse, and then a quasi-quoting parser\n
  \   is generated. See the module documentation for details.\n\n -  __`Data.Metrology.TH`__\n\n
  \   This module exports several functions, written with Template Haskell, that\n
  \   make programming with `units` somewhat easier. In particular, see\n    `declareMonoUnit`,
  which gets rid of a lot of the boilerplate if you don't\n    want unit polymorphism.\n\n
  -  __`Data.Metrology.Quantity`__\n\n    This module defines a `Quantity` class to
  enable easy, safe conversions with\n    non-`units` types. See the module for more
  documentation.\n\nExamples\n========\n\nWe will build up a full working example
  in several sections. It is awkward to\nexplain the details of the pieces until the
  whole example is built, so please\nread on to see how it all works. For more complete(-ish)
  examples, see [this\ntest\ncase](https://github.com/goldfirere/units/blob/master/Tests/Compile/Simulator.hs)\n(for
  examples of how to use units) and\n[units-defs](https://github.com/goldfirere/units-defs)
  (for examples of how to\ndefine units).\n\nDimension definitions\n---------------------\n\nWhen
  setting up your well-typed units-of-measure program, the first step is\nto define
  the dimensions you will be working in. (If your application involves\nphysical quantities,
  you may want to check `Data.Dimensions.SI` in the\n`units-defs` package first.)\n\n
  \   data LengthDim = LengthDim  -- each dimension is a datatype that acts as its
  own proxy\n    instance Dimension LengthDim\n\n    data TimeDim = TimeDim\n    instance
  Dimension TimeDim\n\nWe can now build up dimensions from these base dimensions:\n\n
  \   type VelocityDim = LengthDim :/ TimeDim\n\nUnit definitions\n----------------\n\nWe
  then define units to work with these dimensions. Here, we define two different\ninter-convertible
  units for length. (Note that just about all of this boilerplate\ncan be generated
  by functions in the `Data.Metrology.TH` module.)\n\n    data Meter = Meter\n    instance
  Unit Meter where           -- declare Meter as a Unit\n      type BaseUnit Meter
  = Canonical   -- Meters are \"canonical\"\n      type DimOfUnit Meter = LengthDim
  \ -- Meters measure Lengths\n    instance Show Meter where           -- Show instances
  are optional but useful\n      show _ = \"m\"                      -- do *not* examine
  the argument!\n\n    data Foot = Foot\n    instance Unit Foot where\n      type
  BaseUnit Foot = Meter        -- Foot is defined in terms of Meter\n      conversionRatio
  _ = 0.3048        -- do *not* examine the argument!\n                                        --
  We don't need to specify the `DimOfUnit`;\n                                        --
  it's implied by the `BaseUnit`.\n    instance Show Foot where\n      show _ = \"ft\"\n\n
  \   data Second = Second\n    instance Unit Second where\n      type BaseUnit Second
  = Canonical\n      type DimOfUnit Second = TimeDim\n    instance Show Second where\n
  \     show _ = \"s\"\n\nA unit assignment\n-----------------\n\nTo perform computations
  with _units_, we must define a so-called _local coherent\nset of units_, or LCSU.
  This is a mapping from dimensions to units, and it informs\nexactly how the quantities
  are stored. For example:\n\n    type LCSU = MkLCSU '[(LengthDim, Meter), (TimeDim,
  Second)]\n\nThis definition says that we wish to store lengths in meters and times
  in seconds.\nNote that, even though `Meter` is defined as the `Canonical` length,
  we could have\nused `Foot` in our LCSU. Canonical units are used only in conversion
  between\nunits, not the choice of how to store a quantity.\n\nValue types\n-----------\n\nTo
  use all these pieces to build the actual type that will store quantities, we\nuse
  one of the `MkQu_xxx` type synonyms, as follows:\n\n    type Length = MkQu_DLN LengthDim
  LCSU Double\n      -- Length stores lengths in our defined LCSU, using `Double`
  as the numerical type\n    type Length' = MkQu_ULN Foot LCSU Double\n      -- same
  as Length. Note the `U` in `MkQu_ULN`, allowing it to take a unit\n\n    type Time
  = MkQu_DLN TimeDim LCSU Double\n\nSome computations\n-----------------\n\nWe now
  show some example computations on the defined types:\n\n    extend :: Length ->
  Length            -- a function over lengths\n    extend x = redim $ x |+| (1 %
  Meter)\n\n    inMeters :: Length -> Double          -- extract the # of meters\n
  \   inMeters = (# Meter)                  -- more on this later\n\n    conversion
  :: Length                  -- mixing units\n    conversion = (4 % Meter) |+| (10
  % Foot)\n\n    vel :: Length %/ Time                 -- The `%*` and `%/` operators
  allow\n                                          -- you to combine types\n    vel
  = (3 % Meter) |/| (2 % Second)\n\nExplanation\n-----------\n\nLet's pick this apart.
  The `data LengthDim = LengthDim` declaration creates both the\ntype `LengthDim`
  and a term-level proxy for it. It would be possible to get away\nwithout the proxies
  and use lots of type annotations, but who would want to?\nWe must define an instance
  of `Dimension` to declare that `LengthDim` is a dimension.\nWhy suffix with `Dim`?
  To distinguish the length dimension from the length type.\nGenerally, the type is
  mentioned more often and should be the shorter name.\n\nWe then create a `TimeDim`
  to operate alongside the `LengthDim`. Using the\n`:/` combinator, we can create
  a `VelocityDim` out of the two dimensions defined\nso far. See below for more information
  on unit combinators.\n\nThen, we make some units, using similar `data` definitions.
  We define an\ninstance of `Unit` to make `Meter` into a proper unit. The `Unit`
  class is\nprimarily responsible for handling unit conversions. In the case of `Meter`,\nwe
  define that as the _canonical_ unit of length, meaning that all lengths\nwill internally
  be stored in meters. It also means that we don't need to\ndefine a conversion ratio
  for meters. You will also see that we say that\n`Meter`s measure the dimension `LengthDim`,
  through the `DimOfUnit` declaration.\n\nWe also include a `Show` instance for `Meter`
  so that lengths can be printed\neasily. If you don't need to `show` your lengths,
  there is no need for this\ninstance.\n\nWhen defining `Foot`, we say that its `BaseUnit`
  is `Meter`, meaning that\n`Foot` is inter-convertible with `Meter`. This declaration
  also says that\nthe dimension measured by a `Foot` must be the same as the dimension
  for\na `Meter`. We must then define the conversion\nratio, which is the number of
  meters in a foot. Note that the\n`conversionRatio` method must take a parameter
  to fix its type parameter, but\nit _must not_ inspect that parameter. Internally,
  it will be passed\n`undefined` quite often.\n\nThe definition for `Second` is quite
  similar to that for `Meter`.\n\nThe next section of code constructs an \"LCSU\"
  -- a local coherent set of units.\nThe idea is that we wish to be able to choose
  a set of units which are to be\nused in the internal, concrete representation. An
  LCSU is just an association\nlist giving a concrete unit for each dimension in your
  domain. The particular\nLCSU here says that length is stored in meters and time
  is stored in\nseconds. It would be invalid to specify an LCSU with repeats for either\ndimension
  or unit.\n\nWith all this laid out, we can make the types that store values. _units_\nexports
  several `MkQu_xxx` type synonyms that vary in the arguments they\nexpect. `MkQu_DLN`,
  for example, takes a dimension, an LCSU, and a\nnumerical type. With the definition
  above, `Length` is now a type suitable\nfor storing lengths.\n\nNote\nthat `Length`
  and `Length'` are _the same type_. The `MkQu` machinery notices\nthat these two
  are inter-convertible and will produce the same dimensioned\nquantity.\n\nNote that,
  as you can see in the function examples at the end, it is necessary\nto specify
  the choice of unit when creating a quantity or\nextracting from a quantity. Thus,
  other than thinking about the\nvagaries of floating point wibbles and the `Show`
  instance, it is _completely\nirrelevant_ which unit the concrete unit in the LCSU.\nThe
  type `Length` defined here could be\nused equally well in a program that deals exclusively
  in feet as it could in a\nprogram with meters.\n\nAs a tangential note: I have experimented
  both with definitions like `data\nMeter = Meter` and `data Meter = Meters` (note
  the `s` at the end). The second\noften flows more nicely in code, but the annoyance
  of having to remember\nwhether I was at the type level or the term level led me
  to use the former in\nmy work.\n\nOther features\n==============\n\nPrefixes\n--------\n\nHere
  is how to define the \"kilo\" prefix:\n\n    data Kilo = Kilo\n    instance UnitPrefix
  Kilo where\n      multiplier _ = 1000\n\n    kilo :: unit -> Kilo :@ unit\n    kilo
  = (Kilo :@)\n\nWe define a prefix in much the same way as an ordinary unit, with
  a datatype\nand a constructor to serve as a proxy. Instead of the `Unit` class,
  though,\nwe use the `UnitPrefix` class, which contains a `multiplier` method. As
  with\nother methods, this may *not* inspect its argument.\n\nDue to the way units
  are encoded, it is necessary to explicitly apply prefixes\nwith the `:@` combinator
  (available at both the type and term level). It is often\nconvenient to then define
  a function like `kilo` to make the code flow more\nnaturally:\n\n    longWayAway
  :: Length\n    longWayAway = 150 % kilo Meter\n\n    longWayAwayInMeters :: Double\n
  \   longWayAwayInMeters = longWayAway # Meter  -- 150000.0\n\nUnit combinators\n----------------\n\nThere
  are several ways of combining units to create other units.\nUnits can be multiplied
  and divided with the operators `:*` and `:/`, at either\nthe term or type level.
  For example:\n\n    type MetersPerSecond = Meter :/ Second\n    type Velocity1 =
  MkQu_ULN MetersPerSecond LCSU Double\n\n    speed :: Velocity1\n    speed = 20 %
  (Meter :/ Second)\n\nThe _units_ package also provides combinators \"%*\" and \"%/\"
  to combine the\ntypes of quantities.\n\n    type Velocity2 = Length %/ Time    --
  same type as Velocity1\n    \nThere are also exponentiation combinators `:^` (for
  units) and `%^` (for\nquantities) to raise to a power. To represent the power, the\n_units_
  package exports `Zero`, positive numbers `One` through `Five`, and\nnegative numbers
  `MOne` through `MFive`. At the term level, precede the number\nwith a `p` (mnemonic:
  \"power\"). For example:\n\n    type MetersSquared = Meter :^ Two\n    type Area1
  = MkQu_ULN MetersSquared LCSU Double\n    type Area2 = Length %^ Two        -- same
  type as Area1\n\n    roomSize :: Area1\n    roomSize = 100 % (Meter :^ pTwo)\n\n
  \   roomSize' :: Area1\n    roomSize' = 100 % (Meter :* Meter)\n    \nNote that
  addition and subtraction on units does not make physical sense, so\nthose operations
  are not provided.\n\nDimension-safe cast\n-------------------\n\nThe haddock documentation
  shows the term-level quantity\ncombinators. The only one deserving special mention
  is `redim`, the\ndimension-safe cast operator. Expressions written with the _units_
  package can\nhave their types inferred. This works just fine in practice, but the
  types are\nterrible, unfortunately. Much better is to use top-level annotations
  (using\nabbreviations like `Length` and `Time`) for your functions. However, it
  may\nhappen that the inferred type of your expression and the given type of your\nfunction
  may not exactly match up. This is because quantities have\na looser notion of type
  equality than Haskell does. For example, \"meter *\nsecond\" should be the same
  as \"second * meter\", even though these are in\ndifferent order. The `redim` function
  checks (at compile time) to make sure its\ninput type and output type represent
  the same underlying dimension and then\nperforms a cast from one to the other. This
  cast is completely free at\nruntime. When providing type annotations, it is good
  practice to start your\nfunction with a `redim $` to prevent the possibility of
  type errors. For\nexample, say we redefine velocity a different way:\n\n    type
  Velocity3 = (MkQu_ULN Number LCSU Double) %/ Time %* Length\n    addVels :: Velocity1
  -> Velocity1 -> Velocity3\n    addVels v1 v2 = redim $ v1 |+| v2\n\nThis is a bit
  contrived, but it demonstrates the point. Without the `redim`, the\n`addVels` function
  would not type-check. Because `redim` needs to know its\n_result_ type to type-check,
  it should only be used at the top level, such as\nhere, where there is a type annotation
  to guide it.\n\nNote that `redim` is _always_ dimension-safe -- it will not convert
  a time to a\nlength!\n\nMonomorphic behavior\n====================\n\n_units_ provides
  a facility for ignoring LCSUs, if your application does not\nneed to worry about
  numerical precision. The facility is through the type\nfamily `DefaultUnitOfDim`.
  For example, with the definitions above, we could\nsay\n\n    type instance DefaultUnitOfDim
  LengthDim = Meter\n    type instance DefaultUnitOfDim TimeDim   = Second\n\nand
  then use the `DefaultLCSU` for our LCSU. To make the use of the default\nLCSU even
  easier, the `MkQu_xxx` operators that don't mention an LCSU all\nuse the default
  one. So, we can say\n\n    type Length = MkQu_D LengthDim\n\nand get to work. (This
  uses `Double` as the underlying numerical representation.)\n\nThe module `Data.Metrology.SI`
  from the _units-defs_ package exports type\ninstances for `DefaultUnitOfDim` for
  the SI types, meaning that you can use\ndefinitions like this right away.\n\nMore
  examples\n=============\n\nCheck out some of the test examples we have written to
  get more of a feel for\nhow this all works,\n[here](https://github.com/goldfirere/units/tree/master/Tests).\n"
description-type: markdown
hash: 6d422a47af998f1886165722f6569303e764983a60e461da759c13f9d86c716a
homepage: https://github.com/goldfirere/units
latest: 2.4.1.5
license-name: BSD-3-Clause
maintainer: Richard Eisenberg <rae@richarde.dev>
synopsis: A domain-specific type system for dimensional analysis
test-bench-deps: {}
