all-versions:
- 0.4.0
- 0.4.1
- 0.5.0
author: Zankoku Okuno
basic-deps:
  attoparsec: '>=0.10.0.0'
  base: '>=4.8 && <5'
  data-default: '>=0.5'
  directory: '>=1 && <2'
  filepath: '>=1 && <2'
  text: '>=0.11 && <2'
  twitch: '>=0.1.7 && <0.1.8'
  unicoder: '>=0'
changelog: "Changes\n=======\nv0.4.1\n------\n * Fixed issue #1: Failure to xform
  inside macro argument\n * Fixed issue #2: Missing API docs\n * Library functions
  for locating and parsing file contents.\n * Removed `parseConfigFile` for being
  monolithic.\n * Added a `_fromFile` field in `Config`: prepping for imports.\n\nv0.4.0\n------\n
  * Cabalized.\n * Config file location determined by cabal.\n * Split major functions
  into a library.\n * Allow two-part replacements.\n * No more tmp file needed.\n\nv0.3.1\n------\n
  * Use config files from locations other than `/etc/zanoku-okuno/unicoder/`.\n *
  Use a `.unicoder.tmp` extension instead of `.tmp` so that there's less\n   chance
  of name-collision with the tempfile.\n\nv0.3.0\n------\n * Each configuration file
  can specify separator string and valid name\n   characters.\n * More than one configuration
  file can be stored and selected between on the \n   command line.\n * The role of
  `symbols.conf` is now dealt with by `default.conf`.\n * No more extra newline at
  end of file\n\nv0.2.0\n------\n\n * There are no longer any failure modes of the
  parser. One could probably do a \n   formal proof that given finite input and no
  OS errors, unicoder will \n   complete without failure in a finite time.\n * No
  special handling of strings. Unicoder is therefore now language-agnostic.\n"
changelog-type: markdown
description: "Unicoder\n========\n\n[![Build Status](https://travis-ci.org/Zankoku-Okuno/unicoder.svg?branch=master)](https://travis-ci.org/Zankoku-Okuno/unicoder)\n\nUnicoder
  reads in a source file and makes replacements in-place. The goal\nis to allow ascii
  interfaces to be able to insert unicode without taking your\nhands off the keyboard.
  This can allow for unicode to be entered into source\ncode or any other text document
  you're editing.\n\nEntering unicode is as easy as typing a special string (default
  backslash)\nfollowed by an identifier. There's also syntax for wrapping content
  inside a\npair of unicode strings.\nFor example, with the default configuration,
  unicoder turns\n`\\floor{x} \\def \\lambda x. (floor x)` into `⌊x⌋ ≡ λ x. (floor
  x)`.\nAdmittedly, this is not a great syntax for some kinds of documents (esp. XeLaTeX),\nbut
  that's why we've allowed for configuration of each of the special marks as\nwell
  as the identifier character set, so Unicoder can be relevant to any type of\ntext
  data.\n\nBy default, unicoder takes input on stdin and puts the unicodized verision
  on\nstdout: `unicoder < file.in > file.out`.\nUnicoder can also operate in-place
  on multiple files (`unicoder -i src/*.c`)\nand in file-watch mode (`unicoder -w
  'src/**/*.c' &`; note that the glob pattern\nis quoted so that it is passed into
  unicoder instead of being expanded\nimmediately).\n\nThere's more documentation
  on our\n[Viewdocs](http://zankoku-okuno.viewdocs.io/unicoder/).\nIf you're learning
  to use Unicoder, I would especially recommend our\n[examples](http://zankoku-okuno.viewdocs.io/unicoder/examples.md).\n\n\nExamples\n--------\n\nAssuming
  a config file that looks like this:\n\n```\n\\ . { } a-z\n\nlambda λ\npi π\nbag
  ⟅ ⟆\n```\n\nwe can write this with a normal keyboard:\n\n```\n\\lambda.x. x + \\pi\n```\n\nand
  after unicodizing, we will get:\n\n```\nλx. x + π\n```\n\nand celebrate the nice,
  clean lambda-calculus.\n\nHave no fear, however, code such as this:\n\n```\nid =
  \\x -> x\nnewline_period = \"\\n.\"\n```\n\nWill remain unchanged, as `x` and `n`
  are not in the config file.\n\nThere are also two-part replacements. These take
  a single (non-nested) argument,\ntransforming\n\n```\n\\bag{black}\n```\n\ninto\n\n```\n⟅black⟆\n```\n\nYou
  can also use each half of a two-part replacement individually. This is especially\nusefule
  for nesting, but also when you simply have argument-close marks in the argument:\n\n```\n\\{bag
  {} \\}bag\n```\n\nbecomes\n\n```\n⟅ {} ⟆\n```\n\nPitfalls\n--------\n\nEven in something
  as simple as this, you may want to be aware of a few facts:\n\n * Beware of adding
  names like `n` or `t` in your config file. If you are using \n   a language that
  isn't esoteric, you will probably change the meaning of your \n   code.\n * It _is_
  still possible to mess up strings. For example, `\"\\neq\"` → `\"≠\"` \n   instead
  of being equivalent to `\"\\n\" ++ \"eq\"`. I conjecture that there is \n   no way
  to solve this problem without sacrificing idempotence.\n * I've made little attempt
  to ensure safety, other than using Haskell. Make \n   backups if you are wary (and
  your editor doesn't already).\n\nThankfully, the pitfalls are realistically enumerable.\n\n\nContribute\n==========\n\nUnicoder
  is in the beta stage. I'm sure there's a bug or two, some cleanup to be\ndone, and
  definitely some missing features. Please add any issues or pull requests\nto our
  [github](https://github.com/Zankoku-Okuno/unicoder). You can email me, but\nthat's
  usually higher latency than github.\n"
description-type: markdown
hash: be9fabdc4ce3286c8aa40e87aaec9a1923b8910375c21d2290067a5f2f098978
homepage: https://github.com/Zankoku-Okuno/unicoder
latest: 0.5.0
license-name: BSD-3-Clause
maintainer: zankoku.okuno@gmail.com
synopsis: Make writing in unicode easy.
test-bench-deps:
  base: '>=0'
  text: '>=0'
  unicoder: '>=0'
