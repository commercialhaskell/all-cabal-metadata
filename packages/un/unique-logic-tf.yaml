all-versions:
- '0.4'
- 0.4.0.1
- 0.4.1
- 0.4.1.1
- 0.4.1.2
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.1
author: Henning Thielemann
basic-deps:
  base: '>=4 && <5'
  containers: '>=0.4 && <0.9'
  data-ref: '>=0.0 && <0.2'
  semigroups: '>=0.1 && <1.0'
  transformers: '>=0.4 && <0.7'
  utility-ht: '>=0.0.9 && <0.1'
changelog: |
  ## 0.5

   * `ZeroFractional` class

   * generalize from `ST` monad to any monad supporting mutable references
     using `data-ref` package
changelog-type: markdown
description: |-
  Solve a number of equations simultaneously.
  This is not Computer Algebra,
  better think of a kind of type inference algorithm
  or logic programming with only one allowed solution.

  Only one solution is computed.
  Simultaneous equations with multiple solutions are not allowed.
  However, variables may remain undefined.
  The solver may optionally check for consistency.
  It does not do so by default
  since with floating point numbers or symbolic expressions
  even simple rules may not be consistent.

  The modules ordered with respect to abstraction level are:

  * "UniqueLogic.ST.TF.System":
  Construct and solve sets of functional dependencies.
  Example: @assignment3 (+) a b c@ means dependency @a+b -> c@.

  * "UniqueLogic.ST.TF.Rule":
  Combine functional dependencies to rules
  that can apply in multiple directions.
  Example: @add a b c@ means relation @a+b = c@
  which resolves to dependencies @a+b -> c, c-a -> b, c-b -> a@.
  For an executable example see "UniqueLogic.ST.TF.Example.Rule".

  * "UniqueLogic.ST.TF.Expression":
  Allows to write rules using arithmetic operators.
  It creates temporary variables automatically.
  Example: @(a+b)*c =:= d@ resolves to @a+b = x, x*c = d@.
  For an executable example see "UniqueLogic.ST.TF.Example.Expression".

  * "UniqueLogic.ST.TF.System.Simple":
  Provides specialised functions from "UniqueLogic.ST.TF.System"
  for the case of a system without labels and consistency checks.

  * "UniqueLogic.ST.TF.System.Label":
  Provides a custom constructor for variables.
  When creating a variable you decide whether and how
  an assignment to this variable shall be logged.
  There is an example that shows how to solve a logic system
  using symbolic expressions.
  The naming and logging allows us to observe shared intermediate results.
  For an executable example see "UniqueLogic.ST.TF.Example.Label".

  * By using more sophisticated monad transformers,
  we can check the equations for consistency,
  report inconsistencies and how they arised.
  We demonstrate that in "UniqueLogic.ST.TF.Example.Verify".

  This variant of the package requires type families.
description-type: haddock
hash: 99b19e7b796cf6d62559bfdd97e591126e8103897583ffb1f5f487b6564fb415
homepage: http://hub.darcs.net/thielema/unique-logic-tf/
latest: 0.5.1
license-name: BSD-3-Clause
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Solve simple simultaneous equations
test-bench-deps:
  QuickCheck: '>=2.4 && <3'
  base: '>=0'
  non-empty: '>=0.0 && <0.4'
  semigroups: '>=0'
  transformers: '>=0'
  unique-logic-tf: '>=0'
  utility-ht: '>=0'
