all-versions:
- 0.0.0.90
- 0.0.1
- 0.0.2
- 0.0.2.1
- 0.0.3
- '0.1'
- 0.1.2
- 0.1.2.1
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
author: Aleksey Kliger
basic-deps:
  ansi-wl-pprint: '>=0.6.7.2 && <0.7'
  base: '>=4.6 && <5'
  containers: '>=0.5 && <0.7'
  contravariant: '>=0.5'
  deepseq: '>=1.3.0.0'
  exceptions: '>=0.8 && <0.11'
  mtl: '>=2.1'
  profunctors: '>=4.0'
  template-haskell: '>=2.8.0.0'
  transformers: '>=0.3 && <0.7'
  transformers-compat: '>=0.3'
changelog: "# NEXT\n\n# 0.4.3\n\n* Add an `instantiate` function that substitutes
  a list of terms for a collection of bound variables in a toplevel `Bind p t` term.\n
  \ Thanks to Stephanie Weirich (sweirich).  This adds a new `substBvs` function to
  the `Subst` class.\n* Add `substBind` operation that substitutes for the bound variable
  of a `Bind (Name a) t` term.\n  This is a specialization of `instantiate` to the
  case where the pattern is a single `Name a`\n* Tests for `substBind` by Mark Lemay
  (marklemay) Thanks!\n* Expose `Rec` constructor of the `Rec` type and the `ctxLevel`
  function from `AlphaCtx`\n* Require `transformers < 0.6`, run CI with GHC 9.4, drop
  CI with GHC 7.10.\n  Thanks to Andreas Abel (andreaasabel).\n\n# 0.4.2\n\n* Add
  `Functor` instance for `Unbound.Generics.LocallyNameless.Internal.Iso.Exchange`\n
  \ Thanks to Emily Pillmore (emilypi)\n* Import `MonadPlus` and `MonadFix` explicitly
  when building with mtl-2.3\n* Builds with GHC 9.0, GHC 9.2\n\n# 0.4.1\n\n* Add `MonadFail`
  instances for `LFreshMT` and `FreshMT`\n\n* Builds with GHC 8.10\n\n# 0.4.0\n\n*
  New binding specification type `Ignore`.\n\n  Any two `Ignore T` terms will always
  be alpha-equivalent to each other, will\n  be considered to contain no variables,
  and will not have any substitution\n  apply beneath `Ignore`.  Useful for attaching
  annotation terms to your AST.\n\n  ```haskell\n    import Text.Parsec.Pos (SourcePos)\n
  \   \n\tdata Expr =\n\t   ...\n\t   | Lambda (Ignore SourcePos) (Bind (Name Expr)
  Expr)\n  ```\n\n  As expected, any two `Lambda` expressions will be considered alpha-equivalent\n
  \ even if they differ in source position.\n\n  Note that the `Ignore` will block
  operations on `Name a` for all `a`, which can be a little unexpected:\n\n  ```haskell\n
  \   data Ty =\n\t  TyVar (Name Ty)\n      | TyArr Ty Ty\n    \n    instance Subst
  Ty Ty where\n\t  ...\n\n\tdata Expr =\n\t  ...\n\t  | Var (Name Expr)\n\t  | Lambda
  (Ignore Ty) (Bind (Name Expr) Expr)\n    \n     instance Subst Ty Expr\n  ```\n\n
  \ Applying a substitution of a type for a free type variable to a `Lambda` will\n
  \ not descend into the `Ignore Ty`.\n\n  Thanks Reed Mullanix (TOTWBF) for the new
  operation.\n\n* Fix an issue in substitution where traversal would not continue
  in\n  an AST node for which `isvar` or `isCoerceVar` is defined to return\n  non-`Nothing`
  but which had additional structure.\n\n  For example, in a language with meta variables
  and explicit substitutions:\n  ```haskell\n     data Expr =\n\t   ...\n         --
  normal variables that stand for expressions\n       | Var (Name Expr)\n          --
  a meta variable occurrence and an explicit substitution\n\t\t  -- of expressions
  to substitute in for the free variables\n\t   | MetaVar (Name Meta) [(Name Expr,
  Expr)]\n     -- a meta variable stands for an expression with some free term vars\n\t
  data Meta = MetaVar Expr\n\n     -- substitution for a meta in an expression\n\t
  instance Subst Expr Meta where\n\t   isCoerceVar (MetaVar u sub) = Just (SubstCoerce
  u (Just . applyExplicitSubst sub))\n\t applyExplicitSubst :: [(Name Expr, Expr)]
  -> Meta -> Expr\n\t applyExplicitSubst s (MetaVar e) = substs s e\n  ```\n\n  Given
  an expression `e1` defined as `MetaVar \"u\" [(\"x\", 10)]`, we may want to\n  substitute
  a `Meta (\"x\" + \"x\")` for `\"u\"`  to get `10 + 10` (that is,\n  we replace `\"u\"`
  by the expression `\"x\" + \"x\"` and immediately apply\n  the substitution `10`
  for `\"x\"`).\n\n  Now suppose we have an expression `e2` defined as `MetaVar \"v\"
  [(\"y\",\n  e1)]` (that is, an occurrence of meta var \"v\" together with a\n  substitution
  of `e1` from above for `\"y\"`).  If we again try to\n  substitute `Meta (\"x\"
  + \"x\")` for `\"u\"` in `e2`, we would expect to\n  get `MetaVar \"v\" [(\"y\",
  10 + 10)]` (that is, since \"v\" is not equal to\n  \"u\", we leave the meta var
  alone, but substitute for any occurrences\n  of \"u\" in the explicit substitution,
  so `e1` becomes `10 + 10` as\n  before).\n\n  The bug in previous versions of `unbound-generics`
  was that we would\n  incorrectly leave `MetaVar \"v\" [(\"y\", e1)]` unchanged as
  soon as we\n  saw that `isCoerceVar (MetaVar \"v\" [(\"y\", e1)])` returned\n  `Just
  (SubstCoerce \"u\" ...)` where `\"u\" /= \"v\"`.\n\n  Thanks Reed Mullanix (TOTWBF)
  for finding and fixing this issue.\n  https://github.com/lambdageek/unbound-generics/issues/26\n\n#
  0.3.4\n\n* Bump `containers` upper bound to support `0.6`.\n  (GHC 8.6.1 support)\n
  \ Thanks Christiaan Baaij.\n\n# 0.3.3\n\n* Bump `exceptions` upper bound to support
  `0.10.0`\n\n# 0.3.2\n\n* Bump `deepseq >= 1.4.0.0` remove benchmark dependency on
  `deepseq-generics`\n* Tested with GHC 8.4.1\n* Tested with GHC 8.2.2\n* Compile
  with `-Wcompat`\n* Add `Semigroup` instances for all types that were previously
  `Monoid` instances\n* Added more examples to the [examples/ directory](https://github.com/lambdageek/unbound-generics/tree/main/examples)\n*
  Added \"exceptions\" dependency and `MonadThrow`, `MonadCatch`, `MonadMask` instances
  for `FreshMT` and `LFreshMT`.\n  Thanks Alex McKenna.\n\n# 0.3.1\n\n* Tested with
  GHC 8.0.1\n* Removed `Generic b` constraint from `Subst b (Name a)` instance.\n\n\n#
  0.3\n\n* Change types of `open` and `close` to take `NthPatFind` and `NamePatFind`
  instead of generic patterns, update call sites.\n* Add newtype wrappers and Monoid
  instances for `NthPatFind` and `NamePatFind`\n* Change `isTerm` to return `All`
  instead of `Bool`\n\n# 0.2\n\n* Incorporating some of the extras/oversights from\n
  \ [clash-lib Unbound.Generics.LocallyNameless.Extra](https://github.com/clash-lang/clash-compiler/blob/master/clash-lib/src/Unbound/Generics/LocallyNameless/Extra.hs)\n\n\t*
  Make `Embed` an instance of `Ord`\n\t* `NFData` instances (see below)\n\n* Re-implement
  `freshen'` and `gfreshen` using a free monad to give\n  GHC a chance to inline it
  all away.  This changes the type of\n  `gfreshen`.  Major version bump.\n\n\t* Expose
  `FFM`, `liftFFM` and `retractFFM`\n\n* Provide `NFData` instances for all the combinators.\n
  \ Depend on 'deepseq'\n\n* Start benchmarking some of the operations (particularly
  `unbind`).\n\n# 0.1.2.1\n\n* Fix ghc-7.10 build.\n* Haddock cleanup.\n\n# 0.1.2\n\n*
  Added `IsEmbed` typeclass\n\n    * Depend on 'profunctors'\n\n* Changed `embed`
  and `unembed` to work over any `IsEmbed` type.\n\n* Added `Shift` type for shifting
  the scope of embedded terms out one level.\n\n# 0.1.1\n\n* Added `isNullDisjointSet`
  function.\n* Implement a TH `makeClosedAlpha` splice for constructing trivial leaf
  instances.\n\n# 0.1\n\n* Add `acompare` functiona and `acompare'` method to `Alpha`
  typeclass.  (christiaanb)\n\n    Handwritten `Alpha` instances will need to define
  this additional\n    method now.  Major version bump.\n\n# 0.0.3\n\n* Add 'name2Integer'
  method (christiaanb)\n* Export internal type-directed `gaeq`, `gopen`, `gclose`,
  etc\n  functions from `Unbound.Generics.LocallyNameless.Alpha`.\n\n    Allows definitions
  like:\n\n        instance Alpha Term where\n          aeq' _ (Prim t1 _dk1) (Prim
  t2 _dk2) = t1 == t2\n          aeq' c t1             t2             = gaeq c (from
  t1) (from t2)\n\n\n# 0.0.2.1\n\n* Unconditionally add ErrorT and ExceptT instances
  using transformers-compat (bergmark)\n\n# 0.0.2\n\n* Add 'Rec' pattern and 'TRec'
  term combinators.\n\n* Alpha instance for '()'\n\n# 0.0.1\n\n* Add 'lunbind2' function.\n\n*
  Doc updates.\n\n* Switch from 'HUnit' to 'Tasty' for testing.\n\n# 0.0.0.90\n\n*
  Initial (re-)implementation effort.\n"
changelog-type: markdown
description: "# unbound-generics\n\n[![Join the chat at https://gitter.im/lambdageek/unbound-generics](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/lambdageek/unbound-generics?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Discord](https://img.shields.io/discord/732650960471720076?logo=discord)](https://discord.gg/CRfu93W)\n\n[![Hackage](https://img.shields.io/hackage/v/unbound-generics.svg)](https://hackage.haskell.org/package/unbound-generics)\n[![CI](https://github.com/lambdageek/unbound-generics/workflows/CI/badge.svg)](https://github.com/lambdageek/unbound-generics/actions?query=workflow%3ACI+branch%3Amain)\n<!--
  [![Build Status](https://travis-ci.org/lambdageek/unbound-generics.svg)](https://travis-ci.org/lambdageek/unbound-generics)
  -->\n\nSupport for programming with names and binders using GHC Generics.\n\n##
  Summary\n\nSpecify the binding structure of your data type with an expressive set
  of type combinators, and `unbound-generics`\nhandles the rest!  Automatically derives
  alpha-equivalence, free variable calculation, capture-avoiding substitution, and
  more. See [`Unbound.Generics.LocallyNameless`](src/Unbound/Generics/LocallyNameless.hs)
  to get started.\n\nThis is a reimplementation of (parts of) [unbound](http://hackage.haskell.org/package/unbound)
  but using [GHC generics](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/GHC-Generics.html)
  instead of [RepLib](https://hackage.haskell.org/package/RepLib).\n\n## Examples\n\nSome
  examples are in the `examples/` directory in the source.  And also at [unbound-generics
  on GitHub Pages](https://lambdageek.github.io/unbound-generics)\n\n### Example:
  Untyped lambda calculus interpreter\nHere is how you would implement call by value
  evaluation for the untyped lambda calculus:\n\n```haskell\n{-# LANGUAGE DeriveDataTypeable,
  DeriveGeneric, MultiParamTypeClasses #-}\nmodule UntypedLambdaCalc where\nimport
  Unbound.Generics.LocallyNameless\nimport GHC.Generics (Generic)\nimport Data.Typeable
  (Typeable)\n\n-- | Variables stand for expressions\ntype Var = Name Expr\n\n-- |
  Expressions\ndata Expr = V Var                -- ^ variables\n          | Lam (Bind
  Var Expr) -- ^ lambdas bind a variable within a body expression\n          | App
  Expr Expr       -- ^ application\n          deriving (Show, Generic, Typeable)\n\n--
  Automatically construct alpha equivalence, free variable computation and binding
  operations.\ninstance Alpha Expr\n\n-- semi-automatically implement capture avoiding
  substitution of expressions for expressions\ninstance Subst Expr Expr where\n  --
  `isvar` identifies the variable case in your AST.\n  isvar (V x) = Just (SubstName
  x)\n  isvar _     = Nothing\n\n-- evaluation takes an expression and returns a value
  while using a source of fresh names\neval :: Expr -> FreshM Expr\neval (V x) = error
  $ \"unbound variable \" ++ show x\neval e@Lam{} = return e\neval (App e1 e2) = do\n
  \ v1 <- eval e1\n  v2 <- eval e2\n  case v1 of\n   Lam bnd -> do\n     -- open the
  lambda by picking a fresh name for the bound variable x in body\n     (x, body)
  <- unbind bnd\n     let body' = subst x v2 body\n     eval body'\n   _ -> error
  \"application of non-lambda\"\n\nexample :: Expr\nexample =\n  let x = s2n \"x\"\n
  \     y = s2n \"y\"\n      e = Lam $ bind x (Lam $ bind y (App (V y) (V x)))\n  in
  runFreshM $ eval (App (App e e) e)\n  \n-- >>> example\n-- Lam (<y> App (V 0@0)
  (Lam (<x> Lam (<y> App (V 0@0) (V 1@0)))))\n\n```\n## Differences from `unbound`\n\nFor
  the most part, I tried to keep the same methods with the same signatures.  However
  there are a few differences.\n\n1. `fv :: Alpha t => Fold t (Name n)`\n\n   The
  `fv` method returns a `Fold` (in the sense of the [lens](http://hackage.haskell.org/package/lens)
  library),\n   rather than an `Unbound.Util.Collection` instance.  That means you
  will generally have to write `toListOf fv t` or some    other summary operation.\n\n2.
  Utility methods in the `Alpha` class have different types.\n\n   You should only
  notice this if you're implementing an instance of `Alpha` by hand (rather than by
  using the default\n   generic instance).\n   \n   1. `isPat :: Alpha t => t -> DisjointSet
  AnyName`\n     The original `unbound` returned a `Maybe [AnyName]` here with the
  same interpretation as `DisjointSet`: `Nothing` means an inconsistency was encountered,
  or `Just` the free variables of the pattern.\n   2. `isTerm :: Alpha t => t -> All`\n
  \  3. `open :: Alpha t => AlphaCtx -> NthPatFind -> t -> t`, `close :: Alpha t =>
  AlphaCtx -> NamePatFind -> t -> t` where `NthPatFind` and `NamePatFind` are newtypes\n\n3.
  `embed :: IsEmbed e => Embedded e -> e` and `unembed :: IsEmbed e => e -> Embedded
  e`\n\n    The typeclass `IsEmbed` has an `Iso` (again in the sense of the `lens`
  library) as a method instead of the above pair of methods.\n\n    Again, you should
  only notice this if you're implementing your own types that are instances of `IsEmbed`.
  \ The easiest thing to do is to use implement `embedded = iso yourEmbed yourUnembed`
  where `iso` comes from `lens`.  (Although you can also implement it in terms of
  `dimap` if you don't want to depend on lens)\n"
description-type: markdown
hash: 12209c0049000d0dd8c3eb6013d0278a8b269a2421d9758083aab9f58c4b6b4c
homepage: http://github.com/lambdageek/unbound-generics
latest: 0.4.3
license-name: BSD-3-Clause
maintainer: aleksey@lambdageek.org
synopsis: Support for programming with names and binders using GHC Generics
test-bench-deps:
  QuickCheck: '>=2.7 && <3'
  base: '>=0'
  criterion: '>=1.0.0.1'
  deepseq: '>=1.4.0.0'
  mtl: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  unbound-generics: '>=0'
