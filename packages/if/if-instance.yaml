all-versions:
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.6.0.0
author: Sam Derbyshire
basic-deps:
  base: '>=4.15.0 && <4.22'
  ghc: '>=9.0 && <9.14'
  ghc-tcplugin-api: '>=0.13 && <0.15'
  transformers: '>=0.5.6.2 && <0.7'
changelog: "\r\n# Version 0.6.0.0 (2025-03-29)\r\n\r\n- Fixed the treatment of constraints
  containing coercion variables; the plugin\r\n  will no longer crash upon encountering
  such constraints.\r\n\r\n# Version 0.5.2.0 (2024-11-29)\r\n\r\n- Update to support
  GHC 9.10 and 9.12.  \r\n  Now requires `ghc-tcplugin-api` 0.13 or above.\r\n\r\n#
  Version 0.5.1.0 (2023-08-30)\r\n\r\n- Be more thorough when resetting GHC solver
  monad state. This should ensure\r\n  transparent backtracking after giving up on
  the LHS of a disjunction\r\n  constraint.\r\n\r\n# Version 0.5.0.0 (2023-08-29)\r\n\r\n-
  Add a fixity declaration for `(||)` (`infixr 2`, matching term-level disjunction).\r\n\r\n-
  Reset the GHC solver monad state after failing to solve the LHS constraint in\r\n
  \ a disjunction.\r\n\r\n- Require `ghc-tcplugin-api >= 0.11`.\r\n\r\n# Version 0.4.0.0
  (2023-08-09)\r\n\r\n- Only consider a constraint solved when there are no residual
  constraints.\r\n\r\n- Bump version bounds for `ghc-tcplugin-api`.\r\n\r\n# Version
  0.3.1.0 (2023-01-24)\r\n\r\n- Bumping of version bounds, and support for GHC 9.4
  and GHC 9.6.\r\n  Now requires `ghc-tcplugin-api` 0.9 or above.\r\n\r\n# Version
  0.3.0.0 (2021-09-01)\r\n\r\n- Add the `(||)` constraint disjunction mechanism, with\r\n\r\n```haskell\r\ndispatch
  :: ( c || d ) => ( c => r ) -> ( d => r ) -> r\r\n```\r\n\r\nThis allows users to
  select between two different constraints.\r\nThis is more general than `ifCt`, as
  it allows extra constraints\r\nin the fallback branch.\r\n\r\n- Implement `IfCt`,
  `ifCt` in terms of `(||)` and `dispatch`.\r\n  `IfCt` becomes a type synonym, which
  means that it no longer\r\n  bundles `ifCt`.\r\n\r\n# Version 0.2.1.1 (2021-08-31)\r\n\r\n-
  Minor documentation improvements.\r\n\r\n# Version 0.2.1.0 (2021-08-31)\r\n\r\n-
  Require `ghc-tcplugin-api >= 0.5.1.0`.\r\n\r\n# Version 0.2.0.0 (2021-08-31)\r\n\r\n-
  Add a type family `IsSat :: Constraint -> Bool`\r\n  that computes whether a type-family
  is satisfied in\r\n  the current context.\r\n\r\n- Rename `IfCt` to `IfSat`.\r\n\r\n#
  Version 0.1.0.0 (2021-08-30)\r\n\r\nInitial release.\r\n"
changelog-type: markdown
description: |-
  This library provides a mechanism that can be used to branch on
  whether a constraint is satisfied (not limited to typeclass instances).

  Usage example:

  @

  {-# OPTIONS_GHC -fplugin=IfSat.Plugin #-}

  module MyModule where

  import Data.Constraint.If ( IfSat(ifSat) )

  hypot :: forall a. ( Floating a, IfSat (FMA a) ) => a -> a -> a
  hypot = ifSat @(FMA a) withFMA withoutFMA
    where
      withFMA :: FMA a => a -> a -> a
      withFMA x y =
        let
          h = sqrt $ fma x x (y * y)
          h² = h * h
          x² = x * x
          u = fma (-y) y (h² - x²) + fma h h (-h²) - fma x x (-x²)
        in
          h - u / ( 2 * h )
      withoutFMA :: a -> a -> a
      withoutFMA x y = sqrt ( x * x + y * y )

  @

  Here we select between two ways of computing the hypotenuse function
  based on whether we have access to the fused multiply-add operation

  @ fma :: FMA a => a -> a -> a -> a @

  which computes @ \\ x y z -> ( x * y ) + z @ in a single instruction,
  providing stronger guarantees about precision of the result.

  A call of the form @hypot \@MyNumberType@ will either use the robust @withFMA@
  function when an @FMA MyNumberType@ instance is available, or will fallback
  to the simple @withoutFMA@ implementation when no such instance can be found.
description-type: haddock
hash: 7109dcbbc97715d76249202db3579c563a9ff66a96f374f7f7f9606dbb1c090f
homepage: https://github.com/sheaf/if-instance
latest: 0.6.0.0
license-name: BSD-3-Clause
maintainer: Sam Derbyshire
synopsis: Branch on whether a constraint is satisfied
test-bench-deps:
  base: '>=4.15.0 && <4.22'
  ghc: '>=9.0 && <9.14'
  if-instance: '>=0'
