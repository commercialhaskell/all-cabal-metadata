homepage: https://github.com/sheaf/if-instance
changelog-type: markdown
hash: 7ef9544af992d38c588e6d768c417318a82139389fa8381162c962863812f0e6
test-bench-deps:
  ghc: '>=8.10 && <9.6'
  base: '>=4.14.0 && <4.18'
  if-instance: -any
maintainer: Sam Derbyshire
synopsis: Branch on whether a constraint is satisfied
changelog: "# Version 0.1.0.0 (2021-08-30)\r\n\r\nInitial release."
basic-deps:
  ghc: '>=8.10 && <9.6'
  base: '>=4.14.0 && <4.18'
  ghc-tcplugin-api: '>=0.5.0.0 && <0.6'
all-versions:
- 0.1.0.0
author: Sam Derbyshire
latest: 0.1.0.0
description-type: haddock
description: |-
  This library provides a mechanism that can be used to branch on
  whether a constraint is satisfied (not limited to typeclass instances,
  despite the name of the library).

  Usage example:

  @

  {-# OPTIONS_GHC -fplugin=IfCt.Plugin #-}

  module MyModule where

  import Data.Constraint.If ( IfCt(ifCt) )

  hypot :: forall a. ( Floating a, IfCt (FMA a) ) => a -> a -> a
  hypot = ifCt @(FMA a) withFMA withoutFMA
    where
      withFMA :: FMA a => a -> a -> a
      withFMA a b =
        let
          h = sqrt $ fma a a (b * b)
          h² = h * h
          a² = a * a
          x = fma (-b) b (h² - a²) + fma h h (-h²) - fma a a (-a²)
        in
          h - x / ( 2 * h )
      withoutFMA :: a -> a -> a
      withoutFMA a b = sqrt ( a * a + b * b )
  @

  Here we select between two ways of computing the hypotenuse function
  based on whether we have access to the fused multiply-add operation

  @ fma :: FMA a => a -> a -> a -> a @

  which computes @ \\ a b c -> ( a * b ) + c @ in a single instruction,
  providing stronger guarantees about precision of the resul.

  A call of the form @hypot \@MyNumberType@ will either use the robust @withFMA@
  function when an @FMA MyNumberType@ instance is available, or will fallback
  to the simple @withoutFMA@ implementation when no such instance can be found.
license-name: BSD-3-Clause
