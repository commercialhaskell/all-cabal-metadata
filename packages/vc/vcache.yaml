all-versions:
- '0.1'
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
author: David Barbour
basic-deps:
  base: '>=4.6 && <5'
  bytestring: '>=0'
  containers: '>=0.5'
  direct-murmur-hash: '>=0'
  easy-file: '>=0'
  filelock: '>=0'
  lmdb: '>=0.2.5'
  random: '>=1.0'
  stm: '>=2.4.3'
  transformers: '>=0'
changelog: |2-

  * **0.1.0**
   * original version
  * **0.2.0**
   * bugfix for reference counting GC
  * **0.2.1**
   * added peekBufferSize
  * **0.2.2**
   * added withVRefBytes; zero copy access to VRef ByteString
  * **0.2.3**
   * added getVSpace
  * **0.2.4**
   * added withBytes; zero copy access to bytes via VGet
  * **0.2.5**
   * added changelog
   * added putVSpace and VSpace VCacheable instance
  * **0.2.6**
   * fix a severe buffer resize bug for allocating large VCache nodes
changelog-type: markdown
description: "haskell-vcache\n==============\n\n* work with structured acyclic values
  larger than system memory \n* update persistent variables and STM TVars together,
  atomically \n* structure sharing; diff structures with reference equality \n* subdirectories
  for roots support decomposition of applications\n\nConcepts\n--------\n\nVCache
  provides extended, persistent memory with ACID transactions to Haskell. The intention
  is to support applications that operate on data much larger than system memory,
  or that desire nearly transparent persistence. VCache uses two main concepts: **VRef**
  and **PVar**.\n\nA **VRef** is a reference to an immutable value, which is usually
  stored outside normal Haskell process memory. When dereferenced, the value will
  be parsed and loaded into Haskell's memory. Typically, a dereferenced value will
  be cached for a little while, to assist in future dereference operations. Developers
  can influence or bypass the caching behavior. Structure sharing is implicit: all
  VRefs with the same serialized data will also use the same address.\n\nA **PVar**
  is a reference to a mutable variable which contains a value. Operations on PVars
  are transactional, building upon STM. PVar contents are not cached, but their first
  read is lazy and they may contain VRefs for cached content.\n\nValues in VCache
  must be serializable into binary strings, VRefs, and PVars. VCache has a reference-counting
  garbage collector to remove unused VRefs and PVars. Persistence is supported by
  named root PVars, which are essentially global persistent variables that will not
  be GC'd. Holding a VRef or PVar in Haskell process is also sufficient to prevent
  garbage collection.\n\nVCache is backed by LMDB, a memory-mapped key value store
  that is known empirically to scale to at least a few terabytes. Theoretically, it
  could scale to a few exabytes, but you're likely to shard and distribute your app
  long before you reach that limit. While LMDB is read-optimized, VCache mitigates
  write performance concerns by batching multiple STM-layer transactions into one
  LMDB-layer update and writing sequentially within each database.\n\nCompare and
  Contrast\n--------------------\n\nHaskell packages similar to VCache:\n\n* **acid-state**
  supports a single persistent variable per database, and records this variable in
  terms of a checkpointed value and a sequence of updates. Acid-state cannot readily
  integrate atomic updates with multiple variables or non-persistent resources. Acid-state
  also doesn't perform any memory caching, so a very large persistent resource becomes
  a significant burden on system memory and the Haskell garbage collector.\n\n* **TCache**
  provides STM-based DBRefs that are similar to PVars from VCache. However, TCache
  operates only at the named variable layer; it does not support a notion of structured
  immutable values, and does not support anonymous variables. TCache also attempts
  to be generic across databases, which introduces a lot of performance overhead.
  If you're using TCache with Amazon S3 or shared databases, then VCache can't replace
  TCache. But if you're using a filesystem-backed TCache, VCache is a superior option.\n\n*
  **perdure** from Cognimeta has a single persistent variable per file and supports
  structured values and memory caching. Unfortunately, perdure does not support ephemeral
  roots, so developers must be careful about laziness and cannot readily separate
  values from variables. Also, perdure uses a file format created just for perdure,
  and has not demonstrated scalability beyond 100MB.\n\nNotes and Caveats\n-----------------\n\nVCache
  works best if you open only one instance. Libraries, frameworks, plugins, etc. that
  use VCache should not instantiate it, instead accepting VCache as an argument. Open
  VCache in main, then grant each persistent software component a stable subdirectory
  to resist namespace collisions between PVar roots. \n\nA VCache file may be opened
  by only one process at a time, and only once within said process. The LMDB layer
  is used with `MDB_NOLOCK` and is thus unsuitable for IPC. Concurrent access to VCache
  is only safe if using multiple threads within one process. A lockfile is used to
  prevent accidentally opening a VCache resource more than once.\n\nVCache transactions
  build upon STM. The caveats for STM apply. Long running transactions may be starved
  by short-running transactions. If heavy contention is anticipated or observed, developers
  may need to model queues and channels and external patterns for cooperative concurrency.
  \n\nVCache is not a database. Features for search, query, query optimization, index,
  join, import, export, replication, sharding, and so on are not supported. VCache
  is just a persistence layer. Persistence may be useful for modeling long-running
  relationships with a real database, or for modeling an ad-hoc database using Haskell
  types. \n\nThis package does not provide the datatypes to make VCache especially
  useful. Container types - B-trees, tries, finger-trees, ropes, arrays, hashmaps,
  etc. - implemented leveraging VRefs type would make it a lot easier to pick up and
  use VCache. This package does not provide type versioning. A variation of SafeCopy
  for the VCacheable instance seems a worthy investment, but is not a major priority
  at this time.\n\nDevelopers are permitted to model cyclic structures using PVars.
  However, the naive reference counting used by VCache will not garbage collect cycles.
  Developers must be careful to break cycles when finished with them or they will
  leak space at the persistence layer. This isn't an especially difficult burden,
  but it's something to keep in mind.\n"
description-type: markdown
hash: 8a1eeea09884cb6e9ac1f1da4696bf2e56cd46811310c434d397415d3d544a11
homepage: http://github.com/dmbarbour/haskell-vcache
latest: 0.2.6
license-name: BSD-3-Clause
maintainer: dmbarbour@gmail.com
synopsis: semi-transparent persistence for Haskell using LMDB, STM
test-bench-deps: {}
