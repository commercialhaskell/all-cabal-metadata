all-versions:
- 0.3.0.0
- 0.3.0.1
author: IOG Engineering Team
basic-deps:
  base: '>=4.14 && <4.21'
  bytestring: ^>=0.10 || ^>=0.11 || ^>=0.12
  containers: ^>=0.5 || ^>=0.6 || ^>=0.7
  deepseq: ^>=1.4 || ^>=1.5
  digest: ^>=0.0
  directory: ^>=1.3
  filepath: ^>=1.4 || ^>=1.5
  io-classes: ^>=1.6 || ^>=1.7
  primitive: ^>=0.9
  safe-wild-cards: ^>=1.0
  text: ^>=1.2 || ^>=2.0 || ^>=2.1
  unix: ^>=2.7 || ^>=2.8
  unix-bytestring: ^>=0.4
changelog: |
  # Revision history for fs-api

  ## 0.3.0.1 -- 2024-10-02

  ### Patch

  * Support `io-classes-1.6` and `io-classes-1.7`. Older versions of `io-classes`
    are no longer supported.

  ## 0.3.0.0 -- 2024-08-26

  ### Breaking

  * Remove orphan `Show` instance for `Foreign.C.Error.Errno`.
  * Provide implementations for the new primitives in the `IO` implementation of
    `HasFS`. As a result, `ioHasFS` now requires that `PrimState IO ~ PrimState m`.
  * Rename `Util.CallStack` and `Util.Condense` to `System.FS.CallStack` and
    `System.FS.Condense` respectively.
  * Make modules in the `System.FS.IO.Internal` hierarchy public, inspired by
    "Internal convention is a mistake". The following modules are moved/renamed:
    * `System.FS.IO.Internal` is moved to `System.FS.IO.Unix` on Linux and MacOS
      systems, and moved to `System.FS.IO.Windows` on Windows systems.
    * `System.FS.IO.Internal.Handle` is moved to `System.FS.IO.Handle`.

  ### Non-breaking

  * Add new primitives to the `HasFS` interface for performing file I/O with
    user-supplied buffers: `hGetBufSome`, `hGetBufSomeAt`, `hPutBufSome`, and
    `hPutBufSomeAt`.
  * Add compound functions, built from the new primitives in `HasFS`:
    `hGetBufExactly`, `hGetBufExactlyAt`, `hPutBufExactly`,  and
    `hPutBufExactlyAt`.
  * `NFData` instances for `FsPath`, `HasFS` and `Handle`.
  * Add `FsPath` combinators: `(<.>)` and `addExtension`, `(</>)` and `combine`.

  ### Patch

  * Add a clarification in the documentation of `FsPath` that the user is
    responsible for picking sensible directory/file names.
  * Bump upper version bounds for `io-classes` to `1.6`
  * Make it build with `ghc-9.10`.
  * New `primitive ^>=0.9` dependency
  * Tight dependency bounds.

  ## 0.2.0.1 -- 2023-10-30

  ### Patch

  * Make it build with `ghc-9.8`.

  ## 0.2.0.0 -- 2023-08-01

  ### Breaking

  * Modules that are required for `ioHasFS` should never be used by client code.
    For this reason, we move the relevant modules into an `Internal` hierarchy.
    * Move the `System.IO.FS` module to `System.FS.IO.Internal`.
    * Move the `System.FS.Handle` module to `System.FS.IO.Internal.Handle`.
  * Move strict and lazy compound definitions for reading/writing bytes into
    separate modules `System.FS.API.Strict` and `System.FS.API.Lazy`. Both modules
    re-export `System.FS.API`.

  ### Non-breaking

  * Re-export `System.FS.API.Types` from `System.FS.API`.

  ### Patch

  * Bump upper version bounds for `io-classes` to `1.3`

  ## 0.1.0.3 -- 2023-06-2

  ### Patch

  * Enable building with `ghc-9.4`.
  * Remove `asserts` package flag.

  ## 0.1.0.2 -- 2023-05-25

  * Enable building with ghc-9.6

  ## 0.1.0.1 -- 2023-04-24

  ### Non-breaking

  Update the code to compile with `io-sim-1.0.0.1`.

  ## 0.1.0.0 -- 2023-03-27

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # fs-api

  The `fs-api` package provides an abstract interface to filesystems. The abstract
  interface is a datatype called `HasFS`, which is parameterised over a monad `m`
  that filesystem operations run in, and the type of file handles `h`.
  `removeFile` is an example of a filesystem operation in this interface.

  ```haskell
  data HasFS m h = HasFS {
      {- omitted -}
      -- | Remove the file (which must exist)
    , removeFile               :: HasCallStack => FsPath -> m ()
      {- omitted -}
    }
  ```

  Code that is written using this interface can be run against any implementation
  of a file system. The `System.FS.IO` module provides a function for initialising
  a `HasFS` interface for the real filesystem.

  ```haskell
  ioHasFS :: (MonadIO m, PrimState IO ~ PrimState m) => MountPoint -> HasFS m HandleIO
  ```

  Note that `ioHasFS` requires some context in the form of a `MountPoint`: the
  base directory in which the filesystem operations should be run.
description-type: markdown
hash: e6aa28abf64e17db2917d31cdb5732ac4e94fc9f43c0ab896c591ea1e39c0c22
homepage: https://github.com/input-output-hk/fs-sim
latest: 0.3.0.1
license-name: Apache-2.0
maintainer: operations@iohk.io, Joris Dral (joris@well-typed.com)
synopsis: Abstract interface for the file system
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  filepath: '>=0'
  fs-api: '>=0'
  primitive: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  temporary: '>=0'
  text: '>=0'
