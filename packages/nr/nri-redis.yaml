all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.2
- 0.2.0.3
author: NoRedInk
basic-deps:
  aeson: '>=2.0 && <2.2'
  async: '>=2.2.2 && <2.3'
  base: '>=4.16.4.0 && <4.19'
  bytestring: '>=0.10.8.2 && <0.12'
  conduit: '>=1.3.0 && <1.4'
  containers: '>=0.6.0.1 && <0.7'
  cryptohash-sha1: '>=0.11.101.0 && <0.12'
  haskell-src-meta: '>=0.8.12 && <0.9'
  hedis: '>=0.14.0 && <0.16'
  megaparsec: '>=9.2.2 && <9.6'
  modern-uri: '>=0.3.1.0 && <0.4'
  nri-env-parser: '>=0.1.0.0 && <0.3'
  nri-observability: '>=0.1.0 && <0.3'
  nri-prelude: '>=0.1.0.0 && <0.7'
  pcre-light: '>=0.4.1.0 && <0.4.2'
  resourcet: '>=1.2.0 && <1.4'
  safe-exceptions: '>=0.1.7.0 && <1.3'
  template-haskell: '>=2.16 && <3.0'
  text: '>=1.2.3.1 && <2.1'
  unordered-containers: '>=0.2.0.0 && <0.3'
  uuid: '>=1.3.0 && <1.4'
changelog: |
  # 0.2.0.3

  - [bugfix] When a query times out, its context is no longer removed from the Stack
  - query timeout setting can be modified at runtime

  # 0.2.0.2

  - Adds `sismember`

  # 0.2.0.1

  - Drop support for `aeson-1.x`
  - Allow `resourcet-1.3.x`, `megaparsec-9.5.x`
  - Support GHC 9.6.5

  # 0.2.0.0

  - Drop support for GHC 8.10.7

  # 0.1.2.1

  - Support GHC 9.4.7, `aeson-2.1.x`

  # 0.1.2.0

  - Remove `Redis.Mock` - best to test against a real Redis.

  # 0.1.1.0

  - Add Unix socket config support.

  # 0.1.0.4

  - Relax version bounds to encompass `text-2.0.x`, `base-4.16.x` and `template-haskell-2.18.x`

  # 0.1.0.3

  - Support `aeson-2.0.x`.

  # 0.1.0.2

  - Support Hedis version 0.15.

  # 0.1.0.1

  - Support GHC 9.0.1.

  # 0.1.0.0

  - First release, but we've battle-tested it against significant load for months now!
    Hope you enjoy
changelog-type: markdown
description: |
  # Redis

  _Reviewed last on 2020-10-14_

  This library provides functions for working with [Redis][redis] and
  JSON-serialized haskell records.

  Because JSON encoding is quite lenient for containers (e.g. lists, maps),
  using Hedis alone makes it easy to accidentally write a record to redis, and
  only later discover that, when reading, you actually get back a list of that
  record.

  This library helps avoid those problem by levering specific Key-Value mapping
  that we call an API.

  At present this library implements a subset of the available [redis commands].
  If you miss a command please feel free to add it!

  ## How to use me

  1. make a handler

  (optional) Set up some environmental variables.

  these are the defaults:

  ```sh
  REDIS_CONNECTION_STRING=redis://localhost:6379
  # we also support unix sockets via a scheme we provide:
  # REDIS_CONNECTION_STRING=redis+unix:///path/to/redis.sock[?db=DB_NUM]

  REDIS_CLUSTER=0 # 1 is on
  REDIS_DEFAULT_EXPIRY_SECONDS=0 # 0 is no expiration
  REDIS_QUERY_TIMEOUT_MILLISECONDS=1000 # 0 is no timeout
  ```

  ```haskell
  main : IO ()
  main =
    -- use nri-env-parser to parse settings from the environment
    settings <- Environment.decode Redis.decoder
    -- get a handler
    Conduit.withAcquire (Redis.handler settings) <| \redisHandler ->
      callSomeRedisFuncs redisHandler
  ```

  2. Define a codec type

  ```haskell
  data Key = Key
    { userId :: Int,
      quizId :: Int
    }

  data User =
    User {
      name :: Text,
      favoriteColor :: Text
    }
    deriving (Generic)
  -- payload needs this!
  instance Aeson.ToJSON User
  instance Aeson.FromJSON User

  -- using this enforces this key-value mapping
  redisApi :: Redis.Api Key User
  redisApi =
    Redis.Hash.jsonApi toKey
    where
      toKey :: Key -> Text
      toKey Key {userId, quizId} =
        Text.join
          "-"
          [ "quiz",
            Text.fromInt userId,
            Text.fromInt quizId,
            "v1" -- good idea to version your keys!
          ]
  ```

  3. use the codec to read and writee!

  ```haskell
  _ <- Redis.query handler (Redis.set redisApi (Key 1 2) (User "alice" "orange"))
  Redis.query (Redis.get redisApi (Key 1 2))  -- Just (User "alice" "orange")
  -- or, perhaps better
  [ (Redis.set redisApi (Key 1 2) (User "alice" "orange"))
  , (Redis.get redisApi (Key 1 2))
  ]
    |> Redis.sequence
    |> Redis.transaction -- Transaction ensures these commands are run together
  ```

  ## FAQ

  ### Your default env variables cause a collision. What do I do?

  add a prefix, and use `decoderWithEnvVarPrefix` instead of `decoder`

  [redis]: https://redis.io
  [redis commands]: https://redis.io/commands

  ```

  ```
description-type: markdown
hash: 72e9e58d0b9a60c8744931aca22468ddef92fd43e1e4131e4936698a3fa797b8
homepage: https://github.com/NoRedInk/haskell-libraries/tree/trunk/nri-redis#readme
latest: 0.2.0.3
license-name: BSD-3-Clause
maintainer: haskell-open-source@noredink.com
synopsis: An intuitive hedis wrapper library.
test-bench-deps:
  aeson: '>=2.0 && <2.2'
  async: '>=2.2.2 && <2.3'
  base: '>=4.16.4.0 && <4.19'
  bytestring: '>=0.10.8.2 && <0.12'
  conduit: '>=1.3.0 && <1.4'
  containers: '>=0.6.0.1 && <0.7'
  cryptohash-sha1: '>=0.11.101.0 && <0.12'
  haskell-src-meta: '>=0.8.12 && <0.9'
  hedis: '>=0.14.0 && <0.16'
  megaparsec: '>=9.2.2 && <9.6'
  modern-uri: '>=0.3.1.0 && <0.4'
  nri-env-parser: '>=0.1.0.0 && <0.3'
  nri-observability: '>=0.1.0 && <0.3'
  nri-prelude: '>=0.1.0.0 && <0.7'
  pcre-light: '>=0.4.1.0 && <0.4.2'
  resourcet: '>=1.2.0 && <1.4'
  safe-exceptions: '>=0.1.7.0 && <1.3'
  template-haskell: '>=2.16 && <3.0'
  text: '>=1.2.3.1 && <2.1'
  unordered-containers: '>=0.2.0.0 && <0.3'
  uuid: '>=1.3.0 && <1.4'
