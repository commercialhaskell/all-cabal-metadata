homepage: https://github.com/NoRedInk/haskell-libraries/tree/trunk/nri-kafka#readme
changelog-type: markdown
hash: d2cacc37c46b03adc7dfb2d942a6b1b6fb6973c86a0a1ddf958d270611bdb4e7
test-bench-deps:
  bytestring: '>=0.10.8.2 && <0.12'
  nri-env-parser: '>=0.1.0.0 && <0.2'
  unix: '>=2.7.2.2 && <2.8.0.0'
  stm: '>=2.4 && <2.6'
  base: '>=4.12.0.0 && <4.17'
  time: '>=1.8.0.2 && <2'
  text: '>=1.2.3.1 && <2.1'
  uuid: '>=1.3.0 && <1.4'
  safe-exceptions: '>=0.1.7.0 && <1.3'
  async: '>=2.2.2 && <2.3'
  conduit: '>=1.3.0 && <1.4'
  containers: '>=0.6.0.1 && <0.7'
  nri-prelude: '>=0.1.0.0 && <0.7'
  nri-observability: '>=0.1.1.1 && <0.2'
  hw-kafka-client: '>=4.0.3 && <5.0'
  aeson: '>=1.4.6.0 && <2.1'
maintainer: haskell-open-source@noredink.com
synopsis: Functions for working with Kafka
changelog: |
  # 0.1.0.4

  - Added new `ElsewhereButToKafkaAsWell` mode to `CommitOffsets`, which commits offsets to Kafka once the external Offset storage has been updated. Kafka commits are performed only to keep Kafka informed about consumer lag.

  # 0.1.0.3

  - Relax version bounds to encompass `text-2.0.x`, `base-4.16.x` and `template-haskell-2.18.x`

  # 0.1.0.2

  - Support `time-1.x`.

  # 0.1.0.1

  - Support `aeson-2.0.x`.

  # 0.1.0.0

  - First release, but we've battle-tested it against significant load for months now!
    Hope you enjoy
basic-deps:
  bytestring: '>=0.10.8.2 && <0.12'
  nri-env-parser: '>=0.1.0.0 && <0.2'
  unix: '>=2.7.2.2 && <2.8.0.0'
  stm: '>=2.4 && <2.6'
  base: '>=4.12.0.0 && <4.17'
  time: '>=1.8.0.2 && <2'
  text: '>=1.2.3.1 && <2.1'
  uuid: '>=1.3.0 && <1.4'
  safe-exceptions: '>=0.1.7.0 && <1.3'
  async: '>=2.2.2 && <2.3'
  conduit: '>=1.3.0 && <1.4'
  containers: '>=0.6.0.1 && <0.7'
  nri-prelude: '>=0.1.0.0 && <0.7'
  nri-observability: '>=0.1.1.1 && <0.2'
  hw-kafka-client: '>=4.0.3 && <5.0'
  aeson: '>=1.4.6.0 && <2.1'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.4
author: NoRedInk
latest: 0.1.0.4
description-type: markdown
description: "# Kafka integration\n\n_Reviewed last on 2021-05-28_\n\nThis library
  exposes an Elm-like API to Kafka. It exports two main modules:\n\n- `Kafka`, for
  writing to Kafka.\n- `Kafka.Worker`, For building long-running worker apps that
  process Haskell\n  messages.\n\nAt NoRedInk, we use this to power our high-throughput
  quiz-engine service. If\nyou work at NoRedInk: look there for a simple example app.\n\nOtherwise:
  here's the gist of it:\n\n```\nimport qualified Environment -- from nri-env-parser\nimport
  qualified Kafka.Worker\n\n-- your long running app\nmain :: IO ()\nmain =\n  settings
  <- Environment.decode Kafka.Worker.decoder\n  Kafka.Worker.process\n    Kafka.Worker.Description\n
  \     settings\n      \"this worker's group id\"\n      (Kafka.Worker.subscription
  \"my.topic\" processMessage,)\n\ndata MyKafkaMessageType =\n  ReticulateSplines
  Int\n  AddHiddenAgenda Text\n  CalculateLlamaExpectorationTrajectory Llamas\n  deriving
  (generic)\n\ninstance Aeson.ToJSON Envelope\ninstance Aeson.FromJSON Envelope\n\n--
  the meat and potatoes: handles all MyKafkaMessageTypes\nprocessMessage ::\n  Kafka.Worker.Envelope
  MyKafkaMessageType ->\n  Task Text ()\nprocessMessage record myMessage =\n  -- process
  your message in here\n  -- because of our usage of `Task` you probably want to pass
  in any handlers\n  case myMessage of\n    AddHiddenAgenda agenda ->\n    \tDebug.todo
  \"Add the agenda\"\n    _ ->\n    \tDebug.todo \"and also handle the other cases\"\n```\n"
license-name: BSD-3-Clause
