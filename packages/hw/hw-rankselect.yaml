all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.9.0.0
- 0.10.0.0
- 0.10.0.1
- 0.10.0.2
- 0.10.0.3
- 0.11.0.0
- 0.12.0.0
- 0.12.0.1
- 0.12.0.2
- 0.12.0.3
- 0.12.0.4
- 0.13.0.0
- 0.13.1.0
- 0.13.2.0
- 0.13.3.0
- 0.13.3.1
- 0.13.3.2
- 0.13.4.0
- 0.13.4.1
author: John Ky
basic-deps:
  base: '>=4.11 && <5'
  deepseq: '>=1.4 && <1.6'
  directory: '>=1.2 && <1.4'
  generic-lens: '>=1.2.0.1 && <2.3'
  hw-balancedparens: '>=0.2.2.0 && <0.5'
  hw-bits: '>=0.4.0.0 && <0.8'
  hw-fingertree: '>=0.1.1.0 && <1.2'
  hw-prim: '>=0.6.2.23 && <0.7'
  hw-rankselect: '>=0'
  hw-rankselect-base: '>=0.2.0.0 && <0.4'
  lens: '>=4 && <6'
  mmap: '>=0.5 && <0.6'
  mtl: '>=2.2 && <3'
  optparse-applicative: '>=0.11 && <0.19'
  vector: '>=0.12 && <0.14'
changelog: ''
changelog-type: ''
description: "# hw-rankselect\n[![CircleCI](https://circleci.com/gh/haskell-works/hw-rankselect.svg?style=svg)](https://circleci.com/gh/haskell-works/hw-rankselect)\n[![Travis](https://travis-ci.org/haskell-works/hw-rankselect.svg?branch=master)](https://travis-ci.org/haskell-works/hw-rankselect)\n\nEfficient
  `rank` and `select` operations on large bit-vectors based on the paper\n\"Space-Efficient,
  High-Performance Rank & Select Structures on Uncompressed Bit\nSequences\".  This
  library does not yet implement the full cspoppy implementation.\nNotably, it still
  uses the sub-optimal \"Straw man\" design for \"Combined Sampling\"\non page 10.\n\nThis
  library will use support for some BMI2 CPU instructions on some x86 based\nCPUs
  if compiled with the appropriate flags on `ghc-8.4.1` or later.\n\n## Rank and select\n\nThis
  library provides the following functions on indexed bit-vectors:\n\n* `rank1`\n*
  `rank0`\n* `select1`\n* `select0`\n\nThe supported indexed bit-vector types are:\n\n*
  `Poppy512`\n* `CsPoppy`\n\n## Constructing and using an indexed bit-vector in the
  repl\n\nThe example below constructs an indexed bit-vector from a string and runs\nrank
  and select query operations on it.  The bits in a string are in\nlittle-endian and
  can be of arbitrary length.  The resulting bit-vector\nwill be padded with 0-bits
  until the next 64-bit boundary.\n\n```text\n$ stack repl --package hw-rankselect
  --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\nλ>
  import Data.Maybe\nλ> import HaskellWorks.Data.Bits.BitRead\nλ> import HaskellWorks.Data.RankSelect.Base.Rank1\nλ>
  import HaskellWorks.Data.RankSelect.Base.Select1\nλ> import HaskellWorks.Data.RankSelect.CsPoppy\nλ>
  let bs = fromJust $ bitRead \"10010010\" :: CsPoppy\nbs :: CsPoppy\nλ> select1 bs
  1\n1\nλ> select1 bs 2\n4\nλ> select1 bs 3\n7\nλ> rank1 bs 7\n3\nλ> rank1 bs 4\n2\nλ>
  rank1 bs 1\n1\n```\n\nA valid bit string contains zero or more characters.  Characters
  other than `1` and `0` are\npermitted, but are ignored.  For example spaces can
  be used to group bits for clarity.\n\n```text\nλ> let bs = fromJust $ bitRead \"\"
  :: CsPoppy\nbs :: CsPoppy\nλ> let bs = fromJust $ bitRead \"10010010 10010010\"
  :: CsPoppy\nbs :: CsPoppy\n```\n\nWhilst the use of a bit string is convenient for
  the repl, for performance reasons, it\nis more typical to construct an indexed bit-vector
  from a 64-bit word vector:\n\n```text\n> import qualified Data.Vector.Storable as
  DVS\nλ> let bs = makeCsPoppy (DVS.fromList [23, 73, 55])\nbs :: CsPoppy\n```\n\n##
  Working with files\n\nBit strings are stored in files as a string of bits (little-endian,
  which is native for\nIntel platforms) padded to the nearest word8 (byte) without
  any additional structure.\n\nQuery such a structure directly is slow, so it is possible
  to load it into memory by\nway of memory mapping then constructing an additional
  Rank-Select-Bit-String index.\n\nThe following code shows how to query such bit
  vectors and run simple queries:\n\n```haskell\nλ> import Data.Maybe\nλ> import HaskellWorks.Data.Bits.BitRead\nλ>
  import qualified HaskellWorks.Data.FromForeignRegion as IO\nλ> v :: CsPoppy <- IO.mmapFromForeignRegion
  \"data/sample-000.idx\"\nλ> rank1 v 100\n8\nλ> select1 v 8\n95\n```\n\nHere the
  \n\n## Compilation\n\nIt is sufficient to build, test and benchmark the library
  as follows\nfor basic performance.  The library will be compiled to use broadword\nimplementation
  of rank & select, which has reasonable performance.\n\n```text\nstack build\nstack
  test\nstack bench\n```\n\nTo target the BMI2 instruction set, add the `bmi2` flag:\n\n```text\nstack
  build --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\nstack
  test  --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\nstack
  bench --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2\n```\n\n##
  Benchmark results\n\nThe following benchmark shows the kinds of performance gain
  that can\nbe expected from enabling the BMI2 instruction set for CPU targets\nthat
  support them.  Benchmarks were run on 2.9 GHz Intel Core i7,\nmacOS High Sierra.\n\nWith
  BMI2 disabled:\n\n```text\nbenchmarking data/example.ib/CsPoppy Select1\ntime                 3.341
  μs   (3.312 μs .. 3.385 μs)\n                     0.999 R²   (0.998 R² .. 1.000
  R²)\nmean                 3.357 μs   (3.331 μs .. 3.403 μs)\nstd dev              109.2
  ns   (81.13 ns .. 151.9 ns)\nvariance introduced by outliers: 42% (moderately inflated)\n```\n\nWith
  BMI2 enabled:\n\n```text\nbenchmarking data/example.ib/CsPoppy Select1\ntime                 1.907
  μs   (1.902 μs .. 1.911 μs)\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\nmean                 1.906 μs   (1.901 μs .. 1.911 μs)\nstd dev              17.94
  ns   (14.44 ns .. 21.87 ns)\n```\n\n## References\n\n* [Space-Efficient, High-Performance
  Rank & Select Structures on Uncompressed Bit Sequences](http://www.cs.cmu.edu/~./dga/papers/zhou-sea2013.pdf)\n"
description-type: markdown
hash: d274f53420665ccc9fdb7db03d7af97bc873d0dd0f71aef17b623a4b5bb9253c
homepage: http://github.com/haskell-works/hw-rankselect#readme
latest: 0.13.4.1
license-name: BSD-3-Clause
maintainer: newhoggy@gmail.com
synopsis: Rank-select
test-bench-deps:
  QuickCheck: '>=2.10 && <2.15'
  base: '>=4.11 && <5'
  bytestring: '>=0.10 && <0.13'
  conduit: '>=1.2 && <1.4'
  criterion: '>=1.1 && <1.7'
  directory: '>=1.2 && <1.4'
  doctest: '>=0.16.2 && <1'
  doctest-discover: '>=0.2 && <0.3'
  hedgehog: '>=1.0 && <2'
  hspec: '>=2.4 && <3'
  hw-bits: '>=0.4.0.0 && <0.8'
  hw-hedgehog: '>=0.1.0.1 && <0.2'
  hw-hspec-hedgehog: '>=0.1 && <0.2'
  hw-prim: '>=0.6.2.23 && <0.7'
  hw-rankselect: '>=0'
  hw-rankselect-base: '>=0.2.0.0 && <0.4'
  mmap: '>=0.5 && <0.6'
  resourcet: '>=1.1 && <1.4'
  transformers: '>=0.4 && <0.7'
  vector: '>=0.12 && <0.14'
