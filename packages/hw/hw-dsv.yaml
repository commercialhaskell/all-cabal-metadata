homepage: https://github.com/haskell-works/hw-dsv#readme
changelog-type: markdown
hash: 4af1d2c4534471455841c867f23d2c2bf5656f9200f0f70e2c4e317f451b47b3
test-bench-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.11 && <5'
  hspec: '>=2.4 && <3'
  text: '>=1.2.2 && <3'
  criterion: '>=1.4.1.0 && <1.7'
  hedgehog: '>=0.5 && <1.2'
  doctest: '>=0.16.2 && <0.21'
  mmap: '>=0.5.9 && <0.6'
  hw-prim: '>=0.6.2.14 && <0.7'
  weigh: '>=0.0.6 && <0.1'
  cassava: '>=0.5.1.0 && <0.6'
  hw-rankselect: '>=0.12.0.2 && <0.14'
  hw-rankselect-base: '>=0.3.2.0 && <0.4'
  ghc-prim: '>=0.4 && <0.10'
  doctest-discover: '>=0.2 && <0.3'
  deepseq: ==1.4.*
  bits-extra: '>=0.0.1.2 && <0.1'
  hw-dsv: -any
  hw-bits: '>=0.7.0.2 && <0.8'
  hw-simd: '>=0.1.1.3 && <0.2'
  vector: '>=0.12.0.1 && <0.14'
  hw-hspec-hedgehog: '>=0.1.0.4 && <0.2'
  directory: '>=1.2.2 && <1.4'
maintainer: newhoggy@gmail.com
synopsis: Unbelievably fast streaming DSV file parser
changelog: |
  # Changelog for hw-dsv

  ## 0.4.0

  * Resolve some ambiguity to whether functions are lazy by moving them to designated modules.
  * Fix names of functions which were lying about the types they were dealing with.  In particular:

    * ```haskell
      selectListVector :: [Int] -> DsvCursor -> [[LBS.ByteString]]
      ```

      should be

      ```haskell
      selectListList :: [Int] -> DsvCursor -> [[LBS.ByteString]]
      ```

  * Remove deprecated functions.

  ## 0.3.7

  * Deprecate some functions.  Some of these functions have been moved to another module or renamed.
    See implementation of deprecated functions to see how downstream code should be refactor.

  ## 0.2.1

  * Add instance NFData Lazy.DsvCursor

  ## 0.2

  * Change delimiter types from Char to Word8, since only 8-bit chars work.
  * Support GHC 7.10
  * Don't store delimiters in cursors unnecessarily

  ## Unreleased changes
basic-deps:
  bytestring: '>=0.10 && <0.12'
  appar: '>=0.1.8 && <0.2'
  base: '>=4.11 && <5'
  text: '>=1.2.2 && <3'
  hw-ip: '>=2.3.4.2 && <2.5'
  hedgehog: '>=0.5 && <1.2'
  hw-prim: '>=0.6.2.14 && <0.7'
  lens: '>=4.15 && <6'
  hw-rankselect: '>=0.12.0.2 && <0.14'
  hw-rankselect-base: '>=0.3.2.0 && <0.4'
  ghc-prim: '>=0.4 && <0.10'
  generic-lens: '>=2.2 && <2.3'
  transformers: '>=0.4 && <0.7'
  optparse-applicative: '>=0.13 && <0.18'
  deepseq: ==1.4.*
  bits-extra: '>=0.0.1.2 && <0.1'
  hw-dsv: -any
  resourcet: '>=1.1 && <1.3'
  hw-bits: '>=0.7.0.2 && <0.8'
  hw-simd: '>=0.1.1.3 && <0.2'
  vector: '>=0.12.0.1 && <0.14'
all-versions:
- 0.1.0.0
- '0.2'
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- 0.3.7
- 0.3.8
- 0.4.0
- 0.4.1.0
- 0.4.1.1
author: John Ky
latest: 0.4.1.1
description-type: markdown
description: |
  # hw-dsv
  [![CircleCI](https://circleci.com/gh/haskell-works/hw-dsv.svg?style=svg)](https://circleci.com/gh/haskell-works/hw-dsv)
  [![Travis](https://travis-ci.org/haskell-works/hw-dsv.svg?branch=master)](https://travis-ci.org/haskell-works/hw-dsv)

  Unbelievably fast streaming DSV file parser that reads based on succinct data structures.

  This library will use support for some BMI2 or AVX2 CPU instructions on some x86 based
  CPUs if compiled with the appropriate flags on `ghc-8.4.1` or later.

  ## Compilation & Installation

  Pre-requisites:

  * `cabal-install-3.0.0.0`
  * `ghc-8.4.4` or higher

  It is sufficient to build, test and benchmark the library as follows
  for basic performance.  The library will be compiled to use broadword
  implementation of rank & select, which has reasonable performance.

  ```bash
  cabal v2-configure --enable-tests --enable-benchmarks --disable-documentation
  cabal v2-build
  cabal v2-test
  cabal v2-bench
  cabal v2-install --overwrite-policy=always --installdir="$HOME/.local/bin"
  ```

  Ensure that `$HOME/.local/bin` is in your path if you are using intending to
  use the `hw-dsv` binary.

  For best performance, add the `bmi2` and `avx2` flags to target the BMI2 and
  AVX2 instruction are specified in the `cabal.project` file.

  For slightly older CPUs, remove `avx2` flags from the `cabal.project` file to
  target only the BMI2 instruction set.

  ### Stack support

  It should be possible to install `hw-dsv` via stack:

  ```bash
  stack install --flag bits-extra:bmi2 --flag hw-rankselect-base:bmi2 --flag hw-rankselect:bmi2 --flag hw-simd:bmi2 --flag hw-simd:avx2 --flag hw-dsv:bmi2 --flag hw-dsv:avx2
  ```

  Although your mileage may vary depending on which snapshot you are using.

  The flags should be adjusted for the CPU you are targetting.

  ## Benchmark results

  The following benchmark shows the kinds of performance gain that can
  be expected from enabling the BMI2 instruction set for CPU targets
  that support them.  Benchmarks were run on 2.9 GHz Intel Core i7,
  macOS High Sierra.

  With BMI2 disabled:

  ```bash
  $ cat 7g.csv | pv -t -e -b -a | hw-dsv query-lazy -k 1 -k 2 -d , -e '|' > /dev/null
  7.08GiB 0:07:25 [16.3MiB/s]
  ```

  With BMI2 and AVX2 enabled:

  ```bash
  $ cat 7gb.csv | pv -t -e -b -a | hw-dsv query-lazy -k 1 -k 2 -d , -e '|' > /dev/null
  7.08GiB 0:00:39 [ 181MiB/s]
  ```

  With only BMI2 enabled:

  ```bash
  $ cat 7gb.csv | pv -t -e -b -a | hw-dsv query-lazy -k 1 -k 2 -d , -e '|' > /dev/null
  7.08GiB 0:00:43 [ 165MiB/s]
  ```

  ## `hw-dsv` command line options

  The `hw-dsv` application accepts 1-based column indexes rather than 0-based. The library is 0-based.

  ## Using `hw-dsv` as a library

  ```haskell
  {-# LANGUAGE ScopedTypeVariables #-}

  module Example where

  import qualified Data.ByteString.Lazy                   as LBS
  import qualified Data.Vector                            as DV
  import qualified HaskellWorks.Data.Dsv.Lazy.Cursor      as SVL
  import qualified HaskellWorks.Data.Dsv.Lazy.Cursor.Lazy as SVL

  example :: IO ()
  example = do
    bs <- LBS.readFile "sample.csv"
    let c = SVL.makeCursor ',' bs
    let rows :: [DV.Vector LBS.ByteString] = SVL.toListVector c

    return ()
  ```
license-name: BSD-3-Clause
