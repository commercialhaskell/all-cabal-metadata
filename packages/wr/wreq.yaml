all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.5.1.0
- 0.5.2.0
- 0.5.2.1
- 0.5.3.0
- 0.5.3.1
- 0.5.3.2
- 0.5.3.3
- 0.5.4.0
- 0.5.4.2
- 0.5.4.3
author: Bryan O'Sullivan <bos@serpentine.com>
basic-deps:
  aeson: '>=0.7.0.3'
  attoparsec: '>=0.11.1.0'
  authenticate-oauth: '>=1.5'
  base: '>=4.13 && <5'
  base16-bytestring: '>=0'
  bytestring: '>=0.9'
  case-insensitive: '>=0'
  containers: '>=0'
  crypton: '>=0'
  exceptions: '>=0.5'
  ghc-prim: '>=0'
  hashable: '>=0'
  http-client: '>=0.6'
  http-client-tls: '>=0.3.3'
  http-types: '>=0.8'
  lens: '>=4.5'
  lens-aeson: '>=0'
  memory: '>=0'
  mime-types: '>=0'
  psqueues: '>=0.2'
  template-haskell: '>=0'
  text: '>=0'
  time: '>=1.5'
  time-locale-compat: '>=0'
  unordered-containers: '>=0'
changelog: |
  -*- markdown -*-

  2023-08-15 0.5.4.3

  * Replace cryptonite(deprecated) with crypto


  2023-08-15 0.5.4.2

  * Fix base bounds


  2023-07-31 0.5.4.1

  * Cabal version change2023-07-31 0.5.4.1

  * Cabal version change

  2023-03-01 0.5.4.0

  * Aeson 2.0 compatibility
  * Add patch request


  2020-02-08 0.5.3.3

  * GHC9 compatibility

  2019-01-25 0.5.3.2

  * Compatibility with http-client >= 0.6.0

  2018-12-10 0.5.3.1

  * Fix AWS-related things

  2018-11-16 0.5.3.0

  * Added Postable/Putable on aeson encoding

  * Added better AWS signing for urls without region

  2018-03-01 0.5.2.1

  * Fixed some building issues with older versions

  * Removed dependency on cryptohash, using cryptonite instead

  2018-01-01 0.5.2.0

  * Added some HistoriedResponse support

  * Deprecated withSession, added newSession (to be inline with upstream http-client)

  * Added same instances for Putable as for Postable (might be merged?)

  * Added getSessionCookieJar to get cookies from a Session

  * Fixed customPayloadMethod to follow the method (it was sometimes POST)

  2017-12-23 0.5.1.1

  * Add awsSessionTokenAuth (in addition to the existing awsAuth) to
    support AWS Session Token Service (AWS STS) credentials. These look
    like regular AWS credentials but have an additional session token as
    a 3rd element. This mechanism is needed to be able to (a) use EC2
    instance profiles, (b) make calls form AWS Lambda, (c) is useful for
    delegated role access (assumeRole within and across accounts), and (d)
    enables MFA-protected access scenarios.
    See tests/AWS/IAM.hs for a test and simple example.

  2017-01-09 0.5.1.0

  * Add Session-specific version of Network.Wreq.customPayloadMethodWith

  * 8.2 GHC compatibility

  2017-01-09 0.5.0.0

  * Compatible with `http-client` >= 0.5

  * This compatibility change required a small API change: `checkStatus`
    is now named `checkResponse` for compatibility with the
    `http-client` package

  2015-05-10 0.4.0.0

  * Compatible with GHC 7.10.

  * New withAPISession and withSessionControl functions make talking to
    REST services more efficient.

  * Added support for AWS S3 virtual-host style URLs.

  * Added signing support for region specific calls to the AWS Security
    Token Service (AWS STS).

  * The introduction of AWS support accidentally introduced unwanted AWS
    headers and computation into all requests. This has been fixed.


  2014-12-11 0.3.0.1

  * Bump lower bound on http-client to 0.3.0.1


  2014-12-02 0.3.0.0

  * Support for Amazon Web Services request signing

  * New customMethod, customMethodWith functions allow use of arbitrary
    HTTP verbs

  * httpProxy, basicAuth, oauth2Bearer, oauth2Token: removed Maybe from
    result types, changed documentation to suggest use of (?~)


  2014-08-25 0.2.0.0

  * Support for lens 4.4


  2014-04-22 0.1.0.0

  * Initial release.
changelog-type: markdown
description: |
  # wreq: a Haskell web client library [![Build Status](https://travis-ci.org/bos/wreq.svg)](https://travis-ci.org/bos/wreq)

  `wreq` is a library that makes HTTP client programming in Haskell
  easy.

  # Features

  * Simple but powerful `lens`-based API

  * Over 100 tests, and built on reliable libraries like [`http-client`](http://hackage.haskell.org/package/http-client/)
    and [`lens`](https://lens.github.io/)

  * Session handling includes connection keep-alive and pooling, and
    cookie persistence

  * Automatic decompression

  * Powerful multipart form and file upload handling

  * Support for JSON requests and responses, including navigation of
    schema-less responses

  * Basic and OAuth2 bearer authentication

  * Amazon Web Services (AWS) request signing (Version 4)

  * AWS signing supports sending requests through the
    [Runscope Inc.](https://www.runscope.com) Traffic Inspector

  # Tutorials

  See [the tutorials](http://www.serpentine.com/wreq/) for a quick-start.

  # Is it done?

  No!  See [`TODO.md`](TODO.md) for a rather long list of ideas.
description-type: markdown
hash: fe0677e0f960c2e13e855e7310b067bf313089c65e9400bfba3065522325018b
homepage: http://www.serpentine.com/wreq
latest: 0.5.4.3
license-name: BSD-3-Clause
maintainer: bos@serpentine.com
synopsis: An easy-to-use HTTP client library.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=2.7'
  aeson: '>=0'
  aeson-pretty: '>=0.8.0'
  base: '>=4.13 && <5'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  containers: '>=0'
  directory: '>=0'
  doctest: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  http-client: '>=0'
  http-types: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  network-info: '>=0'
  snap-core: '>=1.0.0.0'
  snap-server: '>=0.9.4.4'
  temporary: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  test-framework-quickcheck2: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unix-compat: '>=0'
  unordered-containers: '>=0'
  uuid: '>=0'
  vector: '>=0'
  wreq: '>=0'
