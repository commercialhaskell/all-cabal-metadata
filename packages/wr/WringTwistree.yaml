all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.1.0.0
author: Pierre Abbat
basic-deps:
  WringTwistree: '>=0'
  arithmoi: '>=0'
  array: '>=0'
  base: '>=4.17 && <5'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  mod: '>=0'
  multiarg: '>=0'
  parallel: '>=0'
  sort: '>=0'
  split: '>=0'
  terminal-progress-bar: '>=0'
  utf8-string: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for `WringTwistree`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/) for Haskell
  and [Semantic Versioning](https://semver.org/) for Rust.

  ## 0.1.0.0 - 1.0.0 - 2024-05-30

  ### Added

  - -O2 option
  - Progress bar for cryptanalysis
  - In Rust, initialize sbox of new Wring and Twistree
  - 15-byte test vectors

  ### Changed

  - Increased number of rounds in Wring, because cryptanalysis showed it was not sufficient for security of large messages
  - Make Rust modules and functions private

  ## 0.0.1.1 - 0.1.0 - 2024-01-11

  ### Removed

  - -O2 and -fllvm options

  ## 0.0.1.0 - 0.1.0 - 2024-01-03

  ### Added

  - Keying, common to Wring and Twistree
  - Whole-message cipher Wring
  - Keyed hash algorithm Twistree
  - Test vectors for both algorithms
  - Shell script to test that both implementations give identical results
  - Related-key cryptanalysis of Wring
  - Integral cryptanalysis of Wring
  - Restricted-byte differential cryptanalysis of Twistree
changelog-type: markdown
description: "# WringTwistree\nWring is a whole-message cipher. This is like a block
  cipher, but the block can be arbitrarily large, up to about 3 GiB (the Rust version
  will start getting multiplication overflows about there). Wring can also be used
  as a length-preserving all-or-nothing transform.\n\nTwistree is a hash function.
  It constructs two trees out of the blocks of data, runs the compression function
  at each node of the trees, and combines the results with the compression function.\n\nBoth
  algorithms are keyed. The key is turned into 96 16-bit words, which are then used
  to make three S-boxes. The key can be any byte string, including the empty string.\n\n#
  Features\nA round consists of four operations:\n\n1. The `mix3Parts` operation splits
  the message or block in three equal parts and mixes them nonlinearly. This provides
  both diffusion and nonlinearity. The number of rounds in Wring increases logarithmically
  with message size so that diffusion spreads to the entire message.\n2. The three
  key-dependent 8×8 S-boxes provide confusion and \nresist linear cryptanalysis.\n3.
  Rotating by the population count thwarts integral and differential cryptanalysis
  by moving the difference around to a different part of the message.\n4.  \n    *
  Wring's round constant, which is dependent on the byte position as well as the round
  number, is added to every byte to prevent slide attacks and ensure that an all-zero
  message doesn't stay that way.\n    * Twistree runs a CRC backwards to make the
  four bytes about to be dropped affect all the other bytes.\n\n# Rust\nTo run the
  program, type `cargo run`. The first time you run it, Cargo may download a quarter-gigabyte
  of data, which is the index to all crates. You can also test the program with `cargo
  test`.\n\n# Haskell\nYou can run WringTwistree in the REPL with `stack ghci`, compile
  and run it with `stack run`, or use other Stack commands. You can also test the
  program with `stack test`.\n\nIf you develop this using Cabal, please edit `package.yaml`
  to match any changes you make to `WringTwistree.cabal`.\n\n# Command-line options\n`stack
  run -- -k key -e plaintext -o ciphertext` enciphers a file. Omit `-o ciphertext`
  to encipher in place.\n\n`stack run -- -k key -d ciphertext -o plaintext` deciphers
  a file. Omit `-o plaintext` to decipher in place.\n\n`stack run -- -k key -H plaintext
  -o hash` hashes a file. Omit `-o hash` to output the hash to stdout.\n\n`stack run
  -- -c foo` runs cryptanalysis of type `foo`, which is currently `relkey` for related-key
  cryptanalysis, `integral` for integral cryptanalysis, `hashcoll` for hash collisions,
  or `integral-fixed` or `hashcoll-linear` for variants of the preceding. This option
  is not available in the Rust implementation.\n\n`cargo` instead of `stack` runs
  the Rust implementation; the options are the same, except that hash is `-h`.\n\nThe
  Rust binary is `wring-twistree` and can be installed with `cargo install --path
  .`; the Haskell binary is `WringTwistree` and can be installed with `stack install`.
  They take the options after `--`.\n\n# Test vectors\nTest vectors are in `test/Spec.hs`
  and `src/lib.rs`.\n"
description-type: markdown
hash: cce0c69d39e79eee64d6a9c700a6d2b67dc2d1420a7f175bf214eafefb6a58a6
homepage: https://github.com/phma/wring-twistree#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: phma@bezitopo.org
synopsis: Whole-message cipher and tree hash
test-bench-deps:
  WringTwistree: '>=0'
  array: '>=0'
  base: '>=4.17 && <5'
  bytestring: '>=0'
  containers: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  utf8-string: '>=0'
  vector: '>=0'
