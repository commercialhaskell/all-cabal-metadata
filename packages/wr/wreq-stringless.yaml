all-versions:
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.5.1.0
- 0.5.2.0
- 0.5.9.0
- 0.5.9.1
author: Juergen Keck
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  text: '>=0'
  utf8-string: '>=0'
  wreq: '>=0.5 && <0.6'
changelog: ''
changelog-type: ''
description: |
  # wreq-stringless: Simple wrapper to use wreq without Strings

  This Haskell library wraps [Network.Wreq](http://hackage.haskell.org/package/wreq) to use the functions without Strings.

  You can use:

  - Data.Text
  - Data.Text.Lazy
  - Data.ByteString.UTF8
  - Data.ByteString.Layz.UTF8

  for all functions from [Network.Wreq](http://hackage.haskell.org/package/wreq) where the original implementation use Strings.



  ## Example:

      {-# LANGUAGE OverloadedStrings #-}
      module Main where

      import qualified Data.Text               as T
      import           Lens.Micro.Extras       (view)
      import qualified Network.Wreq            as Wreq
      import qualified Network.Wreq.StringLess as Wreq'


      -- say we use a alternate prelude like 'Protolude', and we don't use Strings
      -- or we have the url from somewhere else, and it's not a String.
      url :: T.Text
      url = "http://httpbin.org"


      main :: IO ()
      main = do
        -- with plain wreq
        view Wreq.responseStatus  <$> Wreq.get (T.unpack url) >>= print

        -- with wreq-stringless - no manual conversion necessary
        view Wreq'.responseStatus <$> Wreq'.get url >>= print



  ## How to use it:

  * replace your **wreq** dependency with **wreq-stringless**
  * replace the import **Network.Wreq** with **Network.Wreq.StringLess**
description-type: markdown
hash: 11534e76d8e888ec17b51ae5da46997b82e043e94f0af5b1712da92f7893e397
homepage: https://github.com/j-keck/wreq-stringless#readme
latest: 0.5.9.1
license-name: MIT
maintainer: Juergen Keck <jhyphenkeck@gmail.com>
synopsis: Simple wrapper to use wreq without Strings
test-bench-deps: {}
