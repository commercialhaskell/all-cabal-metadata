homepage: ''
changelog-type: markdown
hash: 847b6b04577c755dc63db3bf78fdf3a7f4c4d5d394d668ee06755c5c1bf0b14e
test-bench-deps:
  base: '>=4.10.0.0 && <5'
  doctest: ^>=0.20
  tasty-hunit: '>=0.9.2'
  by-other-names: -any
  tasty: '>=0.10.1.1'
  aeson: '>=1.5.2.0'
maintainer: diaz_carrete@yahoo.com
synopsis: Give aliases to record fields.
changelog: "\uFEFF1.2.2.0\n=======\n\n- GeneralJSONEnum : like JSONEnum, but lets
  you define FromJSON/ToJSON instances\n  for a newtype that use the generic representation
  of the wrapped type,\n  *without* requiring FromJSON/ToJSON instances from the wrapped
  type. So it's\n  different from GeneralizedNewtypeDeriving: only the generic rep
  of the wrapped\n  type is used!\n\n  JSONEnum instances implemented in terms of
  GeneralJSONEnum.\n\n- GeneralJSONRecord and GeneralJSONSum.\n\n1.2.1.0\n=======\n\n-
  JSONEnum: FromJSON / ToJSON instances for enum-like types without fields.\n\n1.2.0.1\n=======\n\n-
  A bit more documentation.\n\n1.2.0.0\n=======\n\n- Hid the internals of the `Aliases`
  module in the main module.\n- Various generic helpers.\n\n1.0.1.0\n=======\n\n-
  deprecated fieldAliases and branchAliases in favor of aliasListBegin.\n\n1.0.2.0\n=======\n\n-
  added a quasiquoter in a new public library\n\n1.1.0.0\n=======\n\n- removed deprecated
  functions fieldAliases and branchAliases\n- renamed ForRubric to AliasType\n"
basic-deps:
  base: '>=4.10.0.0 && <5'
  indexed-traversable: '>=0.1.2'
  text: '>=1.2.3.0'
  aeson: '>=2.1.0.0'
  template-haskell: '>=2.16.0.0'
all-versions:
- 1.2.0.0
- 1.2.0.1
- 1.2.1.0
- 1.2.2.0
author: Daniel Diaz
latest: 1.2.2.0
description-type: markdown
description: |
  # by-other-names

  Give aliases to record fields.

  When generically deriving [aeson](http://hackage.haskell.org/package/aeson)'s
  `FromJSON` and `ToJSON` instances, field names are used as the keys for the
  serialized JSON. If you don't want that, another option is to write the
  instances manually. Problem is, you have to repeat the field names once for
  `FromJSON` and once for `ToJSON`.

  I wanted an intermediate solution similar to what is provided by Go's [struct
  tags](https://www.digitalocean.com/community/tutorials/how-to-use-struct-tags-in-go):
  associate aliases with each field and use those aliases when
  serializing/deserializing. There can be different sets of aliases for different
  contexts (json, orm...). In this library, each of those possible contexts is
  called a "rubric".

  ## How to depend on this library?

  ```
  build-depends:
    by-other-names ^>= 1.2.0.0
  ```
  ## Other related packages

  - [generics-sop](https://hackage.haskell.org/package/generics-sop)

  - [barbies](https://hackage.haskell.org/package/barbies)

  - [higgledy](https://hackage.haskell.org/package/higgledy)

  - [generic-data-surgery](https://hackage.haskell.org/package/generic-data-surgery)

  - [one-liner](https://hackage.haskell.org/package/one-liner)
license-name: BSD-3-Clause
