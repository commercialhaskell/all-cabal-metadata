all-versions:
- 1.2.0.0
- 1.2.0.1
- 1.2.1.0
- 1.2.2.0
- 1.2.3.0
author: Daniel Diaz
basic-deps:
  aeson: '>=2.1.0.0'
  base: '>=4.10.0.0 && <5'
  indexed-traversable: '>=0.1.2'
  template-haskell: '>=2.16.0.0'
  text: '>=1.2.3.0'
changelog: "\uFEFF1.2.3.0\n=======\n\n- New modules 'ByOtherNamesH' and 'ByOtherNamesH.Aeson'
  (The \"H\" is for\n\"higher-order\") that let you go beyond field/branch aliases
  and specify\n\"wrappers\" for each field. This lets you for example to specify JSON
  parsers for\na particular field without always depending on its `FromJSON`/`ToJSON`\ninstances.
  \n\n1.2.2.0\n=======\n\n- GeneralJSONEnum : like JSONEnum, but lets you define FromJSON/ToJSON
  instances\n  for a newtype that use the generic representation of the wrapped type,\n
  \ *without* requiring FromJSON/ToJSON instances from the wrapped type. So it's\n
  \ different from GeneralizedNewtypeDeriving: only the generic rep of the wrapped\n
  \ type is used!\n\n  JSONEnum instances implemented in terms of GeneralJSONEnum.\n\n-
  GeneralJSONRecord and GeneralJSONSum.\n\n1.2.1.0\n=======\n\n- JSONEnum: FromJSON
  / ToJSON instances for enum-like types without fields.\n\n1.2.0.1\n=======\n\n-
  A bit more documentation.\n\n1.2.0.0\n=======\n\n- Hid the internals of the `Aliases`
  module in the main module.\n- Various generic helpers.\n\n1.0.1.0\n=======\n\n-
  deprecated fieldAliases and branchAliases in favor of aliasListBegin.\n\n1.0.2.0\n=======\n\n-
  added a quasiquoter in a new public library\n\n1.1.0.0\n=======\n\n- removed deprecated
  functions fieldAliases and branchAliases\n- renamed ForRubric to AliasType\n"
changelog-type: markdown
description: "# by-other-names\n\nGive aliases to record fields.\n\nWhen generically
  deriving [aeson](http://hackage.haskell.org/package/aeson)'s\n`FromJSON` and `ToJSON`
  instances, field names are used as the keys for the\nserialized JSON. If you don't
  want that, another option is to write the\ninstances manually. Problem is, you have
  to repeat the field names once for\n`FromJSON` and once for `ToJSON`.\n\nI wanted
  an intermediate solution similar to what is provided by Go's [struct\ntags](https://www.digitalocean.com/community/tutorials/how-to-use-struct-tags-in-go):\nassociate
  aliases with each field and use those aliases when\nserializing/deserializing. There
  can be different sets of aliases for different\ncontexts (json, orm...). In this
  library, each of those possible contexts is\ncalled a \"rubric\".\n\n## How to depend
  on this library?\n\n```\nbuild-depends:\n  by-other-names ^>= 1.2.3.0\n```\n## Other
  related packages\n\n- [autodocodec](https://hackage.haskell.org/package/autodocodec).
  A [family](https://github.com/NorfairKing/autodocodec#readme) of packages for deriving
  JSON and Openapi-related classes. More mature and fully-featured than this package.
  [A blog post about it](https://www.dylanamartin.com/2022/11/08/improving-the-aeson-experience.html).\n\n-
  [generics-sop](https://hackage.haskell.org/package/generics-sop). \n\n- [barbies](https://hackage.haskell.org/package/barbies)\n\n-
  [higgledy](https://hackage.haskell.org/package/higgledy)\n\n- [generic-data-surgery](https://hackage.haskell.org/package/generic-data-surgery)\n\n-
  [one-liner](https://hackage.haskell.org/package/one-liner)\n"
description-type: markdown
hash: bcfc2df71d734dd058b5c4a9c71c60a23c2a6b34a2c1d60bd3d5635de126bbe5
homepage: ''
latest: 1.2.3.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: Give aliases to record fields.
test-bench-deps:
  aeson: '>=1.5.2.0'
  base: '>=4.10.0.0 && <5'
  by-other-names: '>=0'
  doctest: ^>=0.20
  tasty: '>=0.10.1.1'
  tasty-hunit: '>=0.9.2'
