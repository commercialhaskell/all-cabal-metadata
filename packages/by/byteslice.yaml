homepage: https://github.com/andrewthad/byteslice
changelog-type: markdown
hash: b9d781040018345533a07d9f7768a648fa190d5b2a3ea6135446e5680f6d8b29
test-bench-deps:
  bytestring: -any
  base: '>=4.11.1 && <5'
  text: '>=1.2'
  quickcheck-classes: '>=0.6.4'
  gauge: -any
  byteslice: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  transformers: -any
  tasty: -any
  primitive: -any
maintainer: andrew.thaddeus@gmail.com
synopsis: Slicing managed and unmanaged memory
changelog: "# Revision history for byteslice\n\n## 0.2.9.0 -- 2022-12-08\n\n* Add
  `toShortText`, `toShortTextU`, and `toText` to `Data.Byte.Text.Ascii`.\n* Add `fromShortText`
  and `fromText` to `Data.Bytes.Text.Utf8`.\n\n## 0.2.8.0 -- 2022-11-21\n\n* Add `Data.Bytes.replace`
  and `Data.Bytes.findIndices`\n* Add `Data.Bytes.fromShortText`\n* Add `Data.Bytes.fromPrimArray`\n*
  Add `decodeDecWord`\n* Add `concatArray` and `concatArrayU`.\n\n## 0.2.7.0 -- 2022-02-16\n\n*
  Add support for GHC 9.2.\n* Drop support for GHC 8.8 and earlier.\n* Add `foldlM`
  and `foldrM` for mondic folds over byte sequences.\n\n## 0.2.6.0 -- 2021-09-15\n\n*
  Add `BytesN` and `ByteArrayN`.\n* Add `isInfixOf`.\n* Add `hForLines_` and `hFoldLines`.\n*
  Add `lift` and `unlift` for converting between `Bytes` and `Bytes#`.\n* Move text-oriented
  functions from Data.Bytes to `Data.Bytes.Text.*`.\n  Provide aliases with older
  names that come with deprecation warning.\n\n## 0.2.5.2 -- 2021-02-23\n\n* Correct
  compatibility shims.\n\n## 0.2.5.1 -- 2021-02-22 (deprecated)\n\n* Compatibility
  with GHC 9.0.\n\n## 0.2.5.0 -- 2021-01-22\n\n* Add `Data.Bytes.Chunks.concatByteString`.\n*
  Expose `pinnedToByteString` to end users. \n\n## 0.2.4.0 -- 2020-10-15\n\n* Add
  `toByteString` and `fromByteString`.\n* Add `fromShortByteString`.\n* Add `equalsLatin(9|10|11|12)`.\n*
  Add `toPinnedByteArray`, `toPinnedByteArrayClone`, and `concatPinnedU`.\n* Add `toLowerAsciiByteArrayClone`.\n*
  Add `intercalateByte2`.\n* Add `splitEnd1`.\n\n## 0.2.3.0 -- 2020-04-30\n\n* Add
  `fnv1a32` and `fnv1a64`, implementations of the 32-bit and\n  64-bit variants of
  the FNV-1a hash algorithm, to both `Data.Bytes`\n  and `Data.Bytes.Chunks`.\n* Add
  `Data.Bytes.Chunks.null`.\n* Add `readFile` to both `Data.Bytes` and `Data.Bytes.Chunks`.\n*
  Add `foldl'` to `Data.Bytes.Chunks`.\n* Add `split` to `Data.Bytes.Chunks`.\n* Add
  `splitStream` for splitting as a good stream-fusion producer.\n* Add `hPut` and
  `writeFile` to `Data.Bytes.Chunks`.\n* Add `fromCString#`.\n* Add `Bytes#` newtype
  on GHC 8.10 and up.\n\n## 0.2.2.0 -- 2020-02-27\n\n* Add `split4`.\n* Add `equalsCString`.\n*
  Add `stripCStringPrefix`.\n* Add `equalsLatin8`.\n* Add `emptyPinned`.\n* Add `concatPinned`
  to `Data.Bytes.Chunks`.\n* Add `any` and `all`.\n\n## 0.2.1.0 -- 2020-01-22\n\n*
  Add `longestCommonPrefix`.\n* Fix broken `Ord` instance of `Bytes`.\n\n## 0.2.0.0
  -- 2020-01-20\n\n* Change behavior of `split`. This function previously had a special
  case\n  for zero-length byte sequences to mirror the behavior `bytestring`'s\n  behavior.
  Now, `split` returns a singleton list with the empty byte\n  sequence in this case.\n*
  Add `splitNonEmpty` so that users who need to take advantage of the\n  non-null
  guarantee `split` provides can do so.\n* Add `splitU` and `splitInitU` for users
  who are going to split a\n  byte sequence without and consume the results more than
  once.\n* Make the C code compile on platforms that do not have `rawmemchr`.\n* Rename
  `splitOnce` to `split1`.\n* Add `split2` and `split3`.\n* Add `equalsLatin{1,2,3,4,5,6,7}`\n*
  Add `ifoldl'`.\n* Add `hGet` and `hPut`.\n* Move `Data.Bytes.Chunks` from `small-bytearray-builder`
  to `byteslice`.\n* Rename `Data.Bytes.Chunks.concat` to `concatU` (the U means unsliced),\n
  \ and add a new `concat` that returns `Bytes`.\n* Add `fromBytes`, `fromByteArray`,
  and `unsafeCopy` to `Data.Bytes.Chunks`.\n* Add `hGetContents` to `Data.Bytes.Chunks`.\n*
  Add `isBytePrefixOf` and `isByteSuffixOf`.\n* Add `replicate` and `replicateU`.\n*
  Add `Monoid` instance for `Bytes`.\n* Add `singleton`, `doubleton`, `tripleton`,
  and their unsliced variants.\n* Rename `copy` to `unsafeCopy`.\n* Add `fromLatinString`.\n*
  Change the behavior of `fromAsciiString` to replace out-of-bounds codepoints\n  with
  NUL.\n* Add `unsnoc` and `uncons`.\n\n## 0.1.4.0 -- 2019-11-12\n\n* Add `toLatinString`.\n*
  Add `stripPrefix`, `stripSuffix`, `stripOptionalPrefix`, and\n  `stripOptionalSuffix`.\n*
  Add `takeWhileEnd` and `dropWhileEnd`.\n* Add `count`.\n* Add an optimized `split`
  function.\n* Add `splitInit`.\n* Add `splitFirst`.\n* Add `copy`.\n* Add `pin`.\n*
  Add `touch`.\n* Add `elem`.\n* Add `unsafeIndex`.\n\n## 0.1.3.0 -- 2019-09-15\n\n*
  Add `isPrefixOf` and `isSuffixOf`.\n* Add `foldl`, `foldr`, `foldl'`, and `foldr'`.\n\n##
  0.1.2.0 -- 2019-08-21\n\n* Add `Data.Bytes.Mutable` module.\n* Add `Data.Bytes`
  module.\n\n## 0.1.1.0 -- 2019-07-03\n\n* Add record labels for Bytes and MutableBytes\n*
  Add UnmanagedBytes. This is just an Addr and a length.\n\n## 0.1.0.0 -- 2019-04-30\n\n*
  First version.\n"
basic-deps:
  primitive-addr: '>=0.1 && <0.2'
  bytestring: '>=0.10.8 && <0.12'
  text-short: '>=0.1.3 && <0.2'
  base: '>=4.14 && <5'
  text: '>=1.2.5'
  run-st: '>=0.1.1 && <0.2'
  primitive-unlifted: '>=0.1.2 && <0.2'
  tuples: '>=0.1 && <0.2'
  primitive: '>=0.7.4 && <0.8'
  vector: '>=0.12 && <0.14'
all-versions:
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
- 0.2.5.2
- 0.2.6.0
- 0.2.7.0
- 0.2.8.0
- 0.2.9.0
author: Andrew Martin
latest: 0.2.9.0
description-type: haddock
description: |-
  This library provides types that allow the user to talk about a slice of
  a ByteArray or a MutableByteArray. It also offers UnmanagedBytes, which
  is kind of like a slice into unmanaged memory. However, it is just an
  address and a length.
license-name: BSD-3-Clause
