all-versions:
- 0.9.0.0
- 0.10.0.0
- 0.10.0.1
- 0.10.1.1
- 0.10.1.2
- 0.10.1.3
- 0.10.1.4
- 0.10.1.5
- 0.10.1.6
- 0.10.1.7
- 0.10.1.8
- 0.10.1.9
- 0.10.1.10
- 0.10.1.11
- 0.10.1.12
author: Daniel Rolls
basic-deps:
  base: '>=4.7 && <5'
  extra: '>=1.6.21 && <1.9'
  parsec: '>=3.1.14.0 && <3.2'
  parsec-numbers: '>=0.1.0 && <0.2'
  text: '>=1.2.3.2 && <2.2'
changelog: |
  # Changelog for byte-count-reader

  ## Unreleased changes

  ## 0.10.1
  - Added a function that always assumes base 2 where ambiguities occur

  ## 0.10.0.1
  - Relaxed upper bound on extra <1.7 -> <1.8
  - Fixed incorrect link in README

  ## 0.10
  - bytesParser now accepts Text not [Char] datatypes
  - Moved usage of parsec3-numbers to parsec-numbers

  ## 0.9
  - Initial Version
changelog-type: markdown
description: |
  # Byte Count Reader
  -------------------

  [![Build Status](https://app.travis-ci.com/danielrolls/byte-count-reader.svg?branch=master)](https://app.travis-ci.com/danielrolls/byte-count-reader)
  [![Hackage](https://img.shields.io/hackage/v/byte-count-reader.svg)][hackage]
  [![Stackage](https://www.stackage.org/package/byte-count-reader/badge/nightly?label=stackage)](https://www.stackage.org/package/byte-count-reader)

  This library is for reading strings describing a number of bytes like 2Kb and 0.5 MiB.

  The following are examples of strings that are accepted:
  - 1b
  - 2 KiB
  - 3.5 MB
  - 10 &nbsp;&nbsp; gib
  - 100tb

  [hackage]: http://hackage.haskell.org/package/byte-count-reader "Hackage"
description-type: markdown
hash: f23918f05e5f2367f47dc90d863c01d1911ad99f71a26a82754730ee9ba5e8b1
homepage: https://github.com/danielrolls/byte-count-reader#readme
latest: 0.10.1.12
license-name: GPL-3.0-only
maintainer: daniel.rolls.27@googlemail.com
synopsis: Read strings describing a number of bytes like 2Kb and 0.5 MiB
test-bench-deps:
  base: '>=4.7 && <5'
  byte-count-reader: '>=0'
  extra: '>=1.6.21 && <1.9'
  hspec: '>=2.7.1 && <2.12'
  parsec: '>=3.1.14.0 && <3.2'
  parsec-numbers: '>=0.1.0 && <0.2'
  text: '>=1.2.3.2 && <2.2'
