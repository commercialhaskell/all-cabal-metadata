homepage: https://wrengr.org/software/hackage.html
changelog-type: text
hash: ba9907193f2ef0c2bd3d83dbf5a10182d456acb6127d33cc9931d6b55b1a3e0e
test-bench-deps:
  bytestring: '>=0.9.2 && <0.12'
  tasty-smallcheck: '>=0.8.0.1 && <0.9'
  base: '>=4.5 && <4.17'
  bytestring-trie: -any
  smallcheck: '>=1.1.1 && <1.3'
  binary: '>=0.5.1 && <0.11'
  tasty-quickcheck: '>=0.8.3.2 && <0.11'
  tasty-hunit: <0.11
  tasty: '>=0.10.1.2 && <1.5'
  QuickCheck: '>=2.10 && <2.15'
maintainer: wren@cpan.org
synopsis: An efficient finite map from (byte)strings to values.
changelog: |
  0.2.6 (2021.11.22):
      - Adjusting the instances for Applicative/Monad and Monoid, to
        avoid warnings from GHC 9.2.1 regarding:
        <https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return>
        <https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid>
      - Documented the order of results for `matches`/`matches_`
      - Added Data.Trie.minMatch
      - Added Data.Trie.Internal.{cata,cata_}
      - Added intersection functions (HT: Kevin Brubeck Unhammer)
      - Added Data.Trie.deleteSubmap (HT: YongJoon Joe)
      - Fixed a bug in mergeBy
      - Numerous minor tweaks with smart-constructors
      - Greatly increased code-coverage of the test suite
  0.2.5.3 (2021.11.02):
      - Increasing upper bounds for GHC 9.2.1
  0.2.5.2 (2021.10.16):
      - Increasing upper bounds to Hackage latest, instead of just GHC 9.0.1
  0.2.5.1 (2021.10.16):
      - Fixing things to compile under GHC 9.0.1
  0.2.5.0 (2019.02.25):
      - Fixing things to compile under GHC 8.4 and 8.6.
      - Adds Semigroup (Trie a) instance
      - Removed the obsolete/unused "useCinternal" Cabal flag
  0.2.4.3 (2019.02.24):
      - Moved VERSION to CHANGELOG
      - Fixing things to compile under GHC 8.0 and 8.2.  N.B., still doesn't compile under 8.4 or 8.6, due to the version limit on `base`.
  0.2.4.1 (2015.04.04):
      - Data.Trie.Internal: adjusted imports to compule under GHC 7.10.1
  0.2.4 (2014.10.09):
      - added Data.Trie.Internal.{match_,matches_}, Data.Trie.Base.{match,matches}
  0.2.3 (2010.02.12):
      - added Data.Trie.Internal.alterBy_
      - added Data.Trie.Internal.{contextualMap, contextualMap', contextualFilterMap, contextualMapBy}
      - added Data.Trie.Convenience.{fromListWith', fromListWithL, fromListWithL'} as suggested by Ian Taylor
      - added Data.Trie.Convenience{insertWith', insertWithKey', unionWith'}
      - converted fmap, foldMap, traverse, and filterMap to worker/wrapper
  0.2.2 (2010.06.10):
      - Corrected a major bug in mergeBy, reported by Gregory Crosswhite
  0.2.1.1 (2009.12.20):
      - Added a VERSION file
  0.2.1 (2009.02.13):
      - Most recent release before adding a VERSION file

  0.1.4 (2009.01.11):
      - The only previous tag
basic-deps:
  bytestring: '>=0.9.2 && <0.12'
  base: '>=4.5 && <4.17'
  binary: '>=0.5.1 && <0.11'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.4.1
- 0.2.4.3
- 0.2.5.0
- 0.2.5.1
- 0.2.5.2
- 0.2.5.3
- 0.2.6
author: wren gayle romano
latest: 0.2.6
description-type: markdown
description: "bytestring-trie\n===============\n[![Hackage version](https://img.shields.io/hackage/v/bytestring-trie.svg?style=flat)](https://hackage.haskell.org/package/bytestring-trie)
  \n[![Build Status](https://github.com/wrengr/bytestring-trie/workflows/ci/badge.svg)](https://github.com/wrengr/bytestring-trie/actions?query=workflow%3Aci)\n[![Dependencies](https://img.shields.io/hackage-deps/v/bytestring-trie.svg?style=flat)](http://packdeps.haskellers.com/specific?package=bytestring-trie)\n\nThe
  bytestring-trie package provides an efficient implementation\nof tries mapping `ByteString`
  to values.  The implementation is\nbased on Okasaki's big-endian patricia trees,
  Ã  la `IntMap`.  We\nfirst trie on the elements of `ByteString` and then trie on
  the\nbig-endian bit representation of those elements.  Patricia trees\nhave efficient
  algorithms for union and other merging operations,\nbut they're also quick for lookups
  and insertions.\n\nIf you are only interested in being able to associate individual\n`ByteString`s
  to values, then you may prefer the `hashmap` package\nwhich is faster for those
  only needing a map-like structure.  This\npackage is intended for those who need
  the extra capabilities that\na trie-like structure can offer (e.g., structure sharing
  to reduce\nmemory costs for highly redundant keys, taking the submap of all\nkeys
  with a given prefix, contextual mapping, extracting the minimum\nand maximum keys,
  etc.)\n\n\n## Install\n\nThis is a simple package and should be easy to install.
  \ You should\nbe able to use the standard:\n\n    $> cabal install bytestring-trie\n\n\n##
  Portability\n\nThe implementation is quite portable, relying only on a few basic\nlanguage
  extensions. The complete list of extensions used by the library is:\n\n* CPP\n*
  MagicHash -- Only if using GHC\n* NoImplicitPrelude\n\nThe test suite uses a few
  additional extensions:\n\n* MultiParamTypeClasses\n* FlexibleInstances\n* FlexibleContexts\n\n##
  Links\n\n* [Website](http://wrengr.org/)\n* [Blog](http://winterkoninkje.dreamwidth.org/)\n*
  [Twitter](https://twitter.com/wrengr)\n* [Hackage](http://hackage.haskell.org/package/bytestring-trie)\n*
  [GitHub](https://github.com/wrengr/bytestring-trie)\n"
license-name: BSD-3-Clause
