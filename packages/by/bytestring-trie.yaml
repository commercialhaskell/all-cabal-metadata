all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.4.1
- 0.2.4.3
- 0.2.5.0
- 0.2.5.1
- 0.2.5.2
- 0.2.5.3
- 0.2.6
- 0.2.7
- 0.2.7.1
- 0.2.7.2
author: wren gayle romano
basic-deps:
  base: '>=4.5 && <4.19'
  binary: '>=0.5.1 && <0.11'
  bytestring: '>=0.9.2 && <0.12'
  deepseq: '>=1.2 && <1.5'
changelog: |
  0.2.7.2 (2023-03-19):
    * Technical Debt:
      - Updated for GHC 9.6
  0.2.7.1 (2022-08-28):
    * Technical Debt:
      - Updated for GHC 9.4
  0.2.7 (2022-03-14):
    * Added:
      - Instances: Eq1, Ord, Ord1, IsList, Show1, Read, Read1, NFData.
      - Methods:   Semigroup(stimes), Foldable(fold,foldMap')
      - Functions: Data.Trie.Internal.{filter,filterA,wither}
    * Performance Improvements:
      - Significantly sped up `size`
      - Misc other changes to the Foldable instance.
      - Reordered data constructors, for better branch-prediction.
      - Fixed quadratic slowdown for priority-queue functions.
      - Reduced quadratic slowdown for functions that reconstruct keys;
        however, it's still asymptotically quadratic:
        <https://github.com/wrengr/bytestring-trie/issues/25>
    * Breakage:
      - Changed the type of Data.Trie.Internal.lookupBy_
    * Technical Debt:
      - Updated the *.cabal file to use Cabal-2.2 format/features.
      - Greatly increased code-coverage of the test suite
      - Added a bunch of benchmarks, including for regression testing.
      - Added Safe/Trustworthy annotations.
      - Cleaning up OPTIONS_GHC and imports.
      - Cleaning up Haddock and adding more @since annotations.
  0.2.6 (2021-11-22):
    * Added:
      - Data.Trie.minMatch
      - Data.Trie.Internal.{cata,cata_}
      - intersection functions (HT: Kevin Brubeck Unhammer)
      - Data.Trie.deleteSubmap (HT: YongJoon Joe)
    * Fixed:
      - Adjusting the Applicative, Monad, and Monoid instances to
        avoid warnings from GHC 9.2.1 regarding:
        <https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/monad-of-no-return>
        <https://gitlab.haskell.org/ghc/ghc/-/wikis/proposal/semigroup-monoid>
      - Fixed a bug in mergeBy
    * Documentation:
      - Documented the order of results for `matches`/`matches_`
    * Technical Debt:
      - Numerous minor tweaks with smart-constructors
      - Greatly increased code-coverage of the test suite
  0.2.5.3 (2021-11-02):
    * Fixed:
      - Increasing upper bounds for GHC 9.2.1
  0.2.5.2 (2021-10-16):
    * Fixed:
      - Increasing upper bounds to Hackage latest, instead of just GHC 9.0.1
  0.2.5.1 (2021-10-16):
    * Fixed:
      - Fixing things to compile under GHC 9.0.1
  0.2.5.0 (2019-02-25):
    * Added:
      - Instance: Semigroup
    * Fixed:
      - Fixing things to compile under GHC 8.4 and 8.6.
    * Technical Debt:
      - Removed the obsolete/unused "useCinternal" Cabal flag
  0.2.4.3 (2019-02-24):
    * Technical Debt:
      - Moved VERSION to CHANGELOG
    * Fixed:
      - Fixing things to compile under GHC 8.0 and 8.2.  N.B., still
        doesn't compile under 8.4 or 8.6, due to the version limit on `base`.
  0.2.4.1 (2015-04-04):
    * Fixed:
      - Data.Trie.Internal: adjusted imports to compile under GHC 7.10.1
  0.2.4 (2014-10-09):
    * Added:
      - Data.Trie.Internal.{match_,matches_}, Data.Trie.{match,matches}
  0.2.3 (2010-02-12):
    * Added:
      - Data.Trie.Internal.alterBy_
      - Data.Trie.Internal.{contextualMap, contextualMap', contextualFilterMap, contextualMapBy}
      - Data.Trie.Convenience.{fromListWith', fromListWithL, fromListWithL'} as suggested by Ian Taylor
      - Data.Trie.Convenience.{insertWith', insertWithKey', unionWith'}
    * Performance:
      - converted fmap, foldMap, traverse, and filterMap to worker/wrapper
  0.2.2 (2010-06-10):
    * Fixed:
      - Corrected a major bug in mergeBy, reported by Gregory Crosswhite
  0.2.1.1 (2009-12-20):
      - Added a VERSION file
  0.2.1 (2009-02-13):
      - Most recent release before adding a VERSION file
  0.1.4 (2009-01-11):
      - The only previous tag
changelog-type: text
description: "bytestring-trie\n===============\n[![Hackage version](https://img.shields.io/hackage/v/bytestring-trie.svg?style=flat)](https://hackage.haskell.org/package/bytestring-trie)
  \n[![Build Status](https://github.com/wrengr/bytestring-trie/workflows/ci/badge.svg)](https://github.com/wrengr/bytestring-trie/actions?query=workflow%3Aci)\n[![Dependencies](https://img.shields.io/hackage-deps/v/bytestring-trie.svg?style=flat)](http://packdeps.haskellers.com/specific?package=bytestring-trie)\n\nThe
  bytestring-trie package provides an efficient implementation\nof tries mapping `ByteString`
  to values.  The implementation is\nbased on Okasaki's big-endian patricia trees,
  Ã  la `IntMap`.  We\nfirst trie on the elements of `ByteString` and then trie on
  the\nbig-endian bit representation of those elements.  Patricia trees\nhave efficient
  algorithms for union and other merging operations,\nbut they're also quick for lookups
  and insertions.\n\nIf you are only interested in being able to associate individual\n`ByteString`s
  to values, then you may prefer the `hashmap` package\nwhich is faster for those
  only needing a map-like structure.  This\npackage is intended for those who need
  the extra capabilities that\na trie-like structure can offer (e.g., structure sharing
  to reduce\nmemory costs for highly redundant keys, taking the submap of all\nkeys
  with a given prefix, contextual mapping, extracting the minimum\nand maximum keys,
  etc.)\n\n\n## Install\n\nThis is a simple package and should be easy to install.
  \ You should\nbe able to use the standard:\n\n    $> cabal install bytestring-trie\n\n\n##
  Portability\n\nThe implementation is quite portable, relying only on a few basic\nlanguage
  extensions. The complete list of extensions used by the library is:\n\n* CPP\n*
  MagicHash -- Only if using GHC\n* NoImplicitPrelude\n\nThe test suite uses a few
  additional extensions:\n\n* MultiParamTypeClasses\n* FlexibleInstances\n* FlexibleContexts\n\n##
  Links\n\n* [Website](http://wrengr.org/)\n* [Blog](http://winterkoninkje.dreamwidth.org/)\n*
  [Twitter](https://twitter.com/wrengr)\n* [Hackage](http://hackage.haskell.org/package/bytestring-trie)\n*
  [GitHub](https://github.com/wrengr/bytestring-trie)\n"
description-type: markdown
hash: 88558b6aee952f4597293b750c5a58ee8572105dd5dee27577926bf868924032
homepage: https://wrengr.org/software/hackage.html
latest: 0.2.7.2
license-name: BSD-3-Clause
maintainer: wren@cpan.org
synopsis: An efficient finite map from bytestrings to values.
test-bench-deps:
  QuickCheck: '>=2.10 && <2.15'
  base: '>=4.5 && <4.19'
  binary: '>=0.5.1 && <0.11'
  bytestring: '>=0.9.2 && <0.12'
  bytestring-trie: '>=0'
  criterion: '>=0'
  deepseq: '>=1.2 && <1.5'
  smallcheck: '>=1.1.1 && <1.3'
  tasty: '>=0.10.1.2 && <1.5'
  tasty-hunit: <0.11
  tasty-quickcheck: '>=0.8.3.2 && <0.11'
  tasty-smallcheck: '>=0.8.0.1 && <0.9'
