homepage: http://wrengr.org
changelog-type: text
hash: 40bc3acb213fd832e71c0b0f14cc975c3eb72ca9bb72b25a134794088ef47e29
test-bench-deps: {}
maintainer: wren@cpan.org
synopsis: An efficient finite map from (byte)strings to values.
changelog: "0.2.5.2 (2021.10.16):\n    - Increasing upper bounds to Hackage latest,
  instead of just GHC 9.0.1\n0.2.5.1 (2021.10.16):\n    - Fixing things to compile
  under GHC 9.0.1\n0.2.5.0 (2019.02.25):\n    - Fixing things to compile under GHC
  8.4 and 8.6.\n\t- Adds Semigroup (Trie a) instance\n\t- Removed the obsolete/unused
  \"useCinternal\" Cabal flag\n0.2.4.3 (2019.02.24):\n    - Moved VERSION to CHANGELOG\n
  \   - Fixing things to compile under GHC 8.0 and 8.2.  N.B., still doesn't compile
  under 8.4 or 8.6, due to the version limit on `base`.\n0.2.4.1 (2015.04.04):\n    -
  Data.Trie.Internal: adjusted imports to compule under GHC 7.10.1\n0.2.4 (2014.10.09):\n
  \   - added Data.Trie.Internal.{match_,matches_}, Data.Trie.Base.{match,matches}\n0.2.3
  (2010.02.12):\n    - added Data.Trie.Internal.alterBy_\n    - added Data.Trie.Internal.{contextualMap,
  contextualMap', contextualFilterMap, contextualMapBy}\n    - added Data.Trie.Convenience.{fromListWith',
  fromListWithL, fromListWithL'} as suggested by Ian Taylor\n    - added Data.Trie.Convenience{insertWith',
  insertWithKey', unionWith'}\n    - converted fmap, foldMap, traverse, and filterMap
  to worker/wrapper\n0.2.2 (2010.06.10):\n    - Corrected a major bug in mergeBy,
  reported by Gregory Crosswhite\n0.2.1.1 (2009.12.20):\n    - Added a VERSION file\n0.2.1
  (2009.02.13):\n    - Most recent release before adding a VERSION file\n\n0.1.4 (2009.01.11):\n
  \   - The only previous tag\n"
basic-deps:
  bytestring: '>=0.9.2 && <0.12'
  base: '>=4.5 && <4.16'
  binary: '>=0.5.1 && <0.11'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.4.1
- 0.2.4.3
- 0.2.5.0
- 0.2.5.1
- 0.2.5.2
author: wren gayle romano
latest: 0.2.5.2
description-type: markdown
description: "bytestring-trie\n===============\n[![Hackage version](https://img.shields.io/hackage/v/bytestring-trie.svg?style=flat)](https://hackage.haskell.org/package/bytestring-trie)
  \n[![Build Status](https://github.com/wrengr/bytestring-trie/workflows/ci/badge.svg)](https://github.com/wrengr/bytestring-trie/actions?query=workflow%3Aci)\n[![Dependencies](https://img.shields.io/hackage-deps/v/bytestring-trie.svg?style=flat)](http://packdeps.haskellers.com/specific?package=bytestring-trie)\n\nThe
  bytestring-trie package provides an efficient implementation\nof tries mapping `ByteString`
  to values.  The implementation is\nbased on Okasaki's big-endian patricia trees,
  Ã  la `IntMap`.  We\nfirst trie on the elements of `ByteString` and then trie on
  the\nbig-endian bit representation of those elements.  Patricia trees\nhave efficient
  algorithms for union and other merging operations,\nbut they're also quick for lookups
  and insertions.\n\nIf you are only interested in being able to associate individual\n`ByteString`s
  to values, then you may prefer the `hashmap` package\nwhich is faster for those
  only needing a map-like structure.  This\npackage is intended for those who need
  the extra capabilities that\na trie-like structure can offer (e.g., structure sharing
  to reduce\nmemory costs for highly redundant keys, taking the submap of all\nkeys
  with a given prefix, contextual mapping, extracting the minimum\nand maximum keys,
  etc.)\n\n\n## Install\n\nThis is a simple package and should be easy to install.
  \ You should\nbe able to use one of the following standard methods to install it.\n\n
  \   -- With cabal-install and without the source:\n    $> cabal install bytestring-trie\n
  \   \n    -- With cabal-install and with the source already:\n    $> cd bytestring-trie\n
  \   $> cabal install\n    \n    -- Without cabal-install, but with the source already:\n
  \   $> cd bytestring-trie\n    $> runhaskell Setup.hs configure --user\n    $> runhaskell
  Setup.hs build\n    $> runhaskell Setup.hs haddock --hyperlink-source\n    $> runhaskell
  Setup.hs copy\n    $> runhaskell Setup.hs register\n\nThe Haddock step is optional.\n\n\n##
  Portability\n\nThe implementation is quite portable, relying only on a few basic\nlanguage
  extensions. The complete list of extensions used is:\n\n* CPP\n* MagicHash \n* NoImplicitPrelude\n\n##
  Links\n\n* [Website](http://wrengr.org/)\n* [Blog](http://winterkoninkje.dreamwidth.org/)\n*
  [Twitter](https://twitter.com/wrengr)\n* [Hackage](http://hackage.haskell.org/package/bytestring-trie)\n*
  [GitHub](https://github.com/wrengr/bytestring-trie)\n"
license-name: BSD-3-Clause
