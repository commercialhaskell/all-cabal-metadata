homepage: https://github.com/byteverse/bytebuild
changelog-type: markdown
hash: c0f3bdbb92cfb48193756366c50193cde23aa7f8292994a9e3a744f5307c6fc1
test-bench-deps:
  natural-arithmetic: -any
  bytestring: -any
  text-short: -any
  base: '>=4.12.0.0 && <5'
  text: '>=1.2 && <1.3'
  quickcheck-classes: '>=0.6.4'
  gauge: '>=0.2.4'
  primitive-unlifted: '>=0.1.2'
  quickcheck-instances: '>=0.3.22'
  wide-word: '>=0.1.0.9 && <0.2'
  bytebuild: -any
  byteslice: -any
  tasty-quickcheck: '>=0.10.1 && <0.11'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty: '>=1.2.3 && <1.3'
  QuickCheck: '>=2.13.1 && <2.15'
  primitive: -any
  vector: -any
maintainer: andrew.thaddeus@gmail.com
synopsis: Serialize to a small byte arrays
changelog: "# Revision history for bytebuild\n\nNote: Prior to version 0.3.4.0, this
  library was named\n`small-bytearray-builder`, not `bytebuild`. The library\n`small-bytearray-builder`
  is now just a compatibility shim\nto ease the migration process.\n\n## 0.3.10.0
  -- 2022-03-01\n\n* Add upper bound on base since this does not build with GHC 9.2.\n*
  Add `rebuild`\n* Add `copyCons` for copying small byte sequences with extra byte
  in front\n* Use `zigzag` library from hackage\n* Seven eights encoding\n* Finish
  out LEB for 32-bit and signed 32/64\n\n## 0.3.9.0 -- 2021-11-19\n\n* Add `cstring#`\n*
  Add `ToBuilder` and `ToBoundedBuilder` classes\n* Add quasiquoter named `bldr` in
  `Data.Bytes.Builder.Template`.\n\n## 0.3.8.0 -- 2021-06-25\n\n* Fix `doubleDec`,
  which was encoding small numbers incorrectly.\n* Add `runByteString` for producing
  `ByteString` from bounded builders.\n* Add `cstring#` for producing builder from
  `Addr#`.\n* Correct the required length calculation for json string encoding.\n\n##
  0.3.7.0 -- 2020-11-06\n\n* Fix build error in test suite.\n* Add `ascii7` and `ascii8`.\n*
  Performance tweak for json string escape builder.\n\n## 0.3.6.0 -- 2020-06-30\n\n*
  Add `replicate`.\n* Fix compatibility with `primitive-0.7.1.0`.\n\n## 0.3.5.0 --
  2020-05-01\n\n* Add `wordLEB128` and `word64LEB128`.\n* Add `integerDec` and `naturalDec`.\n*
  Add `word48PaddedLowerHex`.\n* Add `newBuilderState`, `closeBuilderState`, `commitDistance`,
  and\n  `commitDistance1` to the unsafe module.\n\n## 0.3.4.0 -- 2020-02-27\n\n*
  Rename the library from `small-bytearray-builder` to `bytebuild`, and\n  move modules
  from the `Data.ByteArray` namespace to the `Data.Bytes`\n  namespace. This is not
  considered a breaking change since\n  `small-bytearray-builder` continues to exist
  as a compatibility shim,\n  reexporting the modules with their old names.\n* Add
  `wordPaddedDec4`.\n* Add `reversedOnto` and `commitsOntoChunks`.\n* Add `ascii(2|3|4|5|6)`.\n*
  Add `cstringLen` unbounded builder.\n* Add `copy2`.\n\n## 0.3.3.0 -- 2020-02-10\n\n*
  Add `word64PaddedLowerHex` and `word32PaddedLowerHex`\n* Add `word256Array{LE,BE}`
  and `word256{LE,BE}`\n* Add `word{128,256}Padded{Lower,Upper}Hex`\n\n## 0.3.2.0
  -- 2020-01-20\n\n* Add `putMany`, which allows pasting into the same mutable byte\n
  \ array over and over.\n* Add `consLength`.\n* Add `putManyConsLength`, useful for
  chunked HTTP encoding.\n* Add `runOnto`\n* Add `Data.Bytes.Chunks.length`\n* Add
  `wordPaddedDec2` and `wordPaddedDec9`.\n* Add `word8PaddedLowerHex`.\n\n## 0.3.1.0
  -- 2019-11-20\n\n* Add big-endian and little-endian parsers for `Word128`. This
  includes\n  both the single and multiple element variants.\n* Export `reverseCommitsOntoChunks`
  from the `Unsafe` module.\n* Add `Semigroup` and `Monoid` instances for `Chunks`.\n*
  Add `consLengthLE32`.\n* Add `fromEffect` to the unsafe interface.\n\n## 0.3.0.0
  -- 2019-10-17\n\n* Breaking change: Change the internal implementation of `Builder`.
  This\n  now works a lot more like the builder from `bytestring`. It accumulates\n
  \ chunks and can do a zero-copy appends when working with a sufficiently\n  large
  immutable chunk. This introduces a mild performance regression\n  (around 10%),
  but it makes the libary more generally useful.\n* Introduce `consLengthBE32` and
  `consLength64BE` for efficient serialization\n  of wire protocols that require prefixing
  a payload with its length.\n* Add `int{16,32,64}BE` and `int{16,32,64LE}` as conveniences.\n*
  Add little-endian encoding functions for `Word16`, `Word32`, and `Word64`.\n* Add
  big-endian and little-endian functions for copying a\n  `PrimArray` of numbers (both
  signed and unsigned) into a builder.\n* Add `flush`, `copy`, and `insert` for better
  control when\n  converting byte sequences to builders.\n* Add `shortByteString`
  to improve interoperability with the\n  `bytestring` library. \n\n## 0.2.1.0 --
  2019-09-05\n\n* Stop exporting data constructor in `Data.ByteArray.Builder`.\n  This
  is technically a breaking change, but it was only\n  exported by accident. So, with
  this release, we will technically\n  violate PVP, and the previous release will
  be deprecated on hackage.\n* Add more functions for encoding unsigned words: `word16PaddedLowerHex`,\n
  \ `word16LowerHex`, `word16UpperHex`, `word8LowerHex`.\n* Unroll loop for `word8Dec`.\n\n##
  0.2.0.0 -- 2019-09-04\n\n* Use `natural-arithmetic` to make manipulation of bounds
  possible.\n* Add more functions for encoding numbers. This includes\n  `word8/16/32/64`
  and `int8/16/32/64`.\n* Rename the modules.\n* Correct a serious error in the implementation
  of `bytes`.\n* Make `pasteGrowST` accept an initial offset.\n* Add a `pasteGrowST`
  for length-indexed builders.\n* Add function for rendering floating-point numbers
  in a slightly\n  inaccurate way.\n* Add functions for encoding `ShortText` as UTF-8
  and as a JSON string.\n\n## 0.1.1.0 -- 2019-07-30\n\n* Add several additional functions
  for encoding numbers.\n\n## 0.1.0.0 -- 2019-06-25\n\n* First version\n"
basic-deps:
  natural-arithmetic: '>=0.1 && <0.2'
  bytestring: '>=0.10.8.2 && <0.12'
  integer-logarithms: '>=1.0.3 && <1.1'
  text-short: '>=0.1.3 && <0.2'
  base: '>=4.12.0.0 && <4.16'
  run-st: '>=0.1 && <0.2'
  primitive-offset: '>=0.2 && <0.3'
  primitive-unlifted: '>=0.1.2 && <0.2'
  wide-word: '>=0.1.0.9 && <0.2'
  byteslice: '>=0.2.6 && <0.3'
  zigzag: -any
  haskell-src-meta: '>=0.8'
  template-haskell: '>=2.16'
  primitive: '>=0.7 && <0.8'
all-versions:
- 0.3.4.0
- 0.3.5.0
- 0.3.6.0
- 0.3.7.0
- 0.3.8.0
- 0.3.9.0
- 0.3.10.0
author: Andrew Martin
latest: 0.3.10.0
description-type: haddock
description: |-
  This is similar to the builder facilities provided by
  `Data.ByteString.Builder`. It is intended to be used in
  situations where the following apply:

  * An individual entity will be serialized as a small
  number of bytes (less than 512).

  * A large number (more than 32) of entities will be serialized
  one after another without anything between them.

  Unlike builders from the `bytestring` package, these builders
  do not track their state when they run out of space. A builder
  that runs out of space simply aborts and is rerun at the beginning
  of the next chunk. This strategy for building is suitable for most
  CSVs and several line protocols (carbon, InfluxDB, etc.).
license-name: BSD-3-Clause
