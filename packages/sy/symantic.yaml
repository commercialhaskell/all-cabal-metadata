all-versions:
- 6.0.0.20170623
- 6.2.0.20170702
- 6.3.0.20170703
- 6.3.0.20170807
- 6.3.1.20180213
- 6.3.2.20180208
- 6.3.3.20190614
- 6.3.4.20190712
author: Julien Moutinho <julm+symantic@autogeree.net>
basic-deps:
  base: '>=4.6 && <5'
  containers: '>=0.5'
  mono-traversable: '>=1.0'
  symantic-document: '>=1.5'
  symantic-grammar: '>=0'
  text: '>=1.2'
  transformers: '>=0.5'
changelog: ''
changelog-type: ''
description: "# symantic\n\nThis is an experimental library for composing, parsing,
  typing, compiling, transforming and interpreting\na custom DSL (Domain-Specific
  Language).\n\n# Features\n\nThose custom DSL can express a subset of GHC's Haskell
  type system:\n\n* *first class functions* (aka. *lambdas*),\n* chosen *monomorphic
  types* (like `Bool` or `Maybe`),\n* chosen *rank-1 polymorphic types* (like `(Maybe
  a)`),\n* chosen *type class instances*,\n* chosen *type family instances*,\n* and
  chosen *type constraints*;\n\nwhere \"chosen X\" means declared in Haskell\nand
  selected when composing the DSL.\n\nIn particular, this library is currently not
  able to:\n\n* do *type inferencing* for the argument of *lambdas*\n  (they must
  all be explicitely annotated, aka. *Church-style*),\n* do *pattern matching* (aka.
  *case*) (but *Church-encoding* functions are often enough),\n* do *rank-N polymorphic
  types* (aka. *non-prenex forall*, like `(forall s. ST s a) -> a`).\n\nAnd by itself,
  the DSL is only able to define new terms to be interpreted,\nno new types, or other
  type-level structures.\n\n# Warning\n\nPlease be aware that despite its using of
  powerful ideas from clever people,\nthis remains a FUND-LESS SINGLE-PERSON EXPERIMENTAL
  LIBRARY.\nMeaning that it IS NOT heavily tested and documented,\nDOES NOT have a
  strong commitment to preserving backward compatibility,\nMAY FAIL to comply with
  the [PVP](http://www.haskell.org/haskellwiki/Package_versioning_policy),\nand CAN
  die without notice.\nYou've been warned.\n\n# Use cases\n\nThe main goal of this
  library is to enable the runtime interpretation of terms,\ntype-checked according
  to some types defined at composing-time (ie. GHC's compile-time).\n\nUsing a DSL
  enables to limit expressiveness in order to ease analysis.\nHere the idea is that
  the more complex logic shall remain written in Haskell,\nand then this library used
  to project an interface into a DSL\n(using GHC's Haskell as a FFI (Foreign Function
  Interface)).\nThis in order to give runtime users the flexibility\nto write programs
  not requiring a full-blown Haskell compiler,\nyet enabling enough flexibility to
  let them express complex needs\nwith a reasonably advanced type-safe way\nand a
  controlled environment of primitives.\n\n## Typical use cases\n\n* Enabling runtime
  users to enter some Haskell-like expressions\n  (maybe with a more convenient syntax
  wrt. the domain problem)\n  without using at runtime all the heavy machinery and
  ecosystem of GHC\n  (eg. by using [hint](https://hackage.haskell.org/package/hint)),\n
  \ but still leaning on primitive functions coded in GHC's Haskell.\n* Limiting those
  expressions to be built from well-controlled expressions only.\n* Run some analyzes/optimizations
  on those well-controlled expressions.\n* Report errors specific to the domain problem.\n\n#
  Usage\n\nPlease learn how to use this library by reading example source files in
  `test/`\nin [symantic-lib](https://hackage.haskell.org/package/symantic-lib)\nin
  [Git repository](git://git.autogeree.net/symantic).\n\nThese `test` files use [megaparsec](https://hackage.haskell.org/package/megaparsec)
  as parser\n(see `test/Testing/Megaparsec.hs`) and a default grammar somehow sticking
  to Haskell's,\nbut staying context-free (so in particular: insensitive to the indentation),\nand
  supporting prefix and postfix operators.\nThis grammar — itself written as a symantic
  embedded DSL\nwith [symantic-grammar](https://hackage.haskell.org/package/symantic-grammar)
  —\ncan be reused to build other ones, is not bound to a specific parser,\nand can
  produce its own EBNF rendition.\n\n# Acknowledgements\n\nThis library would probably
  be much worse than it is\nwithout the following seminal works:\n\n* [Finally Tagless](http://okmij.org/ftp/tagless-final/)
  by Jacques Carette, Oleg Kiselyov, and Chung-chieh Shan.\n* [Dependent Types in
  Haskell](http://cs.brynmawr.edu/~rae/papers/2016/thesis/eisenberg-thesis.pdf) by
  Richard A. Eisenberg.\n* [A reflection on types](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/dynamic.pdf)
  by Simon Peyton Jones, Stephanie Weirich, Richard A. Eisenberg and Dimitrios Vytiniotis.\n*
  [Typeable](https://ghc.haskell.org/trac/ghc/wiki/Typeable) by Ben Gamari and others.\n\n#
  Main ideas\n\n* __Symantic DSL__.\n  Terms are encoded in the [Tagless-Final](http://okmij.org/ftp/tagless-final/)
  way (aka. the *symantic* way)\n  which leverages the *type class* system of Haskell
  — instead of using *data types* — to form an embedded DSL.\n  More specifically,
  a *class* encodes the *syntax* of terms (eg. `Sym_Bool`)\n  and its *class instances*
  on a dedicated type encodes their *semantics*\n  (eg. `(Sym_Bool Eval)` interprets
  a term as a value of its type\n  in the host language (`Bool` in Haskell here),\n
  \ or `(Sym_Bool View)` interprets a term as a textual rendition, etc.).\n  \n  DSL
  are then composed/extended by selecting those symantic *classes*\n  (and in an embedded
  DSL those could even be automatically inferred,\n  when `NoMonomorphismRestriction`
  is on).\n  Otherwise, when using symantics for a non-embedded DSL\n  — the whole
  point of this library — the *classes* composing the DSL\n  are selected manually
  at GHC's compile-time,\n  through the *type-level list* `ss` given to `readTerm`.\n
  \ \n  Moreover, those symantic `term`s are parameterized by the type of the value
  they encode,\n  in order to get the same type safety as with plain Haskell values.\n
  \ Hence the symantic *classes* have the higher kind: `((* -> *) -> Constraint)`\n
  \ instead of just `(* -> Constraint)`.\n  \n  Amongst those symantics, `Sym_Lambda`
  introduces *lambda abstractions* by an higher-order approach,\n  meaning that they
  directly reuse GHC's internal machinery\n  to abstract or instantiate variables,\n
  \ which I think is by far the most efficient and simplest way of doing it\n  (no
  (generalized or not) DeBruijn encoding\n  like in [bound](https://hackage.haskell.org/package/bound)'s
  `Monad`s).\n\n* __Singleton for any type__.\n  To typecheck terms using a `(Type
  src vs t)` which acts as a *singleton type*\n  for any Haskell *type index* `t`
  of any kind,\n  which is made possible with the dependant Haskell extensions:\n
  \ especially `TypeFamilies`, `GADTs` and `TypeInType`.\n\n* __Type constants using
  `Typeable`__.\n  *Type constant* could be introduced by indexing them amongst a
  *type-level list*,\n  but since they are *monomorphic types*, using `Typeable` simplifies\n
  \ the machinery, and is likely more space/time efficient, including at GHC-compile-time.\n\n*
  __Type variables using a type-level list__.\n  Handling *type variables* is done
  by indexing them amongst a `vs` *type-level list*,\n  where each *type variable*
  is wrapped inside a `Proxy` to handle different kinds.\n  Performing a substitution
  (in `substVar`) preserves the *type index* `t`,\n  which is key for preserving any
  associated `Term`.\n  Unifying *type variables* is done with `unsafeCoerce` (in
  `unifyType`),\n  which I think is necessary and likely safe.\n\n# Main extensions\n\n*
  `AllowAmbiguousTypes` for avoiding a lot of uses of `Proxy`.\n* `ConstraintKinds`
  for *type lists* to contain `Constraint`s,\n  or reifying any `Constraint` as an
  explicit dictionary `Dict`,\n  or defining *type synonym* of *type classes*,\n  or
  merging *type constraints*.\n* `DataKinds` for type-level data structures (eg. *type-level
  lists*).\n* `DefaultSignatures` for providing identity transformations of terms,\n
  \ and thus avoid boilerplate code when a transformation\n  does not need to alter
  all semantics.\n  Almost as explained in [Reducing boilerplate in finally tagless
  style](https://ro-che.info/articles/2016-02-03-finally-tagless-boilerplate).\n*
  `GADTs` for knowing types by pattern-matching terms,\n  or building terms by using
  type classes.\n* `PolyKinds` for avoiding a lot of uses of `Proxy`.\n* `Rank2Types`
  or `ExistentialQuantification` for parsing `GADT`s.\n* `TypeApplications` for having
  a more concise syntax\n  to build `Type` (eg. `tyConst @Bool`).\n* `TypeFamilies`
  for type-level programming.\n* `TypeInType` (introduced in GHC 8.0.1)\n  for `Type`
  to also bind a kind equality for the type `t` it encodes.\n  Which makes the *type
  application* (`TyApp`)\n  give us an *arrow kind* for the Haskell *type constructor*\n
  \ it applies an Haskell type to, releaving me from tricky workarounds.\n* `UndecidableInstances`
  to relax the checks that the type-level programming does terminate.\n\n# Bugs\n\nThere
  are some of them hidding in there,\nand the whole thing is far from being perfect…\nYour
  comments, problem reports, or questions, are welcome!\nYou have my email address,
  so… just send me some emails :]\n\n# To do\n\n* Study to which point *type inferencing*
  is doable,\n  now that `Type` is powerful enough to contain `TyVar`s.\n* Study to
  which point error messages can be improved,\n  now that there is a `Source` carried
  through all `Kind`s or `Type`s,\n  it should enable some nice reports.\n  Still,
  a lot of work and testing remain to be done,\n  and likely some ideas to find too…\n*
  Add more terms in [symantic-lib](https://hackage.haskell.org/package/symantic-lib).\n*
  Add more transformations.\n* Study how to list class instances.\n* Study where to
  put `INLINE`, `INLINEABLE` or `SPECIALIZE` pragmas.\n* Study how to support *rank-N
  polymorphic types*,\n  special cases can likely use the *boxed polymorphism* workaround,\n
  \ but even if GHC were supporting *impredicative types*,\n  I'm currently clueless
  about how to do this.\n"
description-type: markdown
hash: a9492013bfbbce9e4a5b63e841becba8189adfadc13c4f78e61d69045161b99c
homepage: ''
latest: 6.3.4.20190712
license-name: GPL-3.0-only
maintainer: Julien Moutinho <julm+symantic@autogeree.net>
synopsis: Library for Typed Tagless-Final Higher-Order Composable DSL
test-bench-deps: {}
