homepage: http://www.haskell.org/haskellwiki/Synthesizer
changelog-type: markdown
hash: 420613d1572c6878d7600b30c6c207c6719ebed64293c149cc95b53be1d0e013
test-bench-deps:
  llvm-tf: -any
  synthesizer-llvm: -any
  base: -any
  storablevector: -any
  utility-ht: -any
  synthesizer-core: -any
  llvm-extra: -any
  tfp: -any
  random: -any
  QuickCheck: '>=1 && <3'
  numeric-prelude: -any
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Efficient signal processing using runtime compilation
changelog: |
  # Change log for the `synthesizer-llvm` package

  ## 0.9

  * Clean separation between Haskell's `Storable` memory format
    as used in `StorableVector`
    and LLVM's memory format, used for parameters.

  * Use of new `llvm-dsl` package.

  ## 0.8.3

  * `Noise`: caused a crash with LLVM-9
    because it called the X86 intrinsic `pmuludq`.
    Now use generic multiplication.

  ## 0.8.0

  * Compiled code is now freed by the garbage collector if it is no longer needed.

  * `reverbSimple`: No longer add the original signal.
    Every partial comb filter maintains it anyway.

  * In `CausalParameterized.Process`:
    `reverb` -> `reverbSimple`
    `reverbEfficient` -> `reverb`

  * added many export lists

  * For GHC-7.10 we had to separate `ProcessOf` type functions
    from `synthesizer-core:CausalClass`.
    We adapt to this change here.
basic-deps:
  llvm-tf: '>=9.0 && <9.3'
  sox: '>=0.2 && <0.3'
  unsafe: '>=0.0 && <0.1'
  base: '>=4 && <5'
  llvm-dsl: '>=0.0 && <0.1'
  storable-record: '>=0.0.3 && <0.1'
  event-list: '>=0.1 && <0.2'
  semigroups: '>=0.1 && <1.0'
  storablevector: '>=0.2.6 && <0.3'
  midi: '>=0.2.1 && <0.3'
  utility-ht: '>=0.0.15 && <0.1'
  containers: '>=0.1 && <0.7'
  synthesizer-core: '>=0.8 && <0.9'
  llvm-extra: '>=0.10 && <0.11'
  non-empty: '>=0.2.1 && <0.4'
  vault: '>=0.3 && <0.4'
  tfp: '>=1.0 && <1.1'
  pathtype: '>=0.8 && <0.9'
  transformers: '>=0.2 && <0.6'
  random: '>=1.0 && <1.2'
  synthesizer-midi: '>=0.6 && <0.7'
  numeric-prelude: '>=0.3 && <0.5'
  non-negative: '>=0.1 && <0.2'
all-versions:
- '0.2'
- 0.2.0.1
- '0.3'
- '0.5'
- 0.5.0.1
- 0.5.0.2
- '0.6'
- '0.7'
- 0.7.0.1
- '0.8'
- 0.8.1
- 0.8.1.1
- 0.8.1.2
- 0.8.2
- 0.8.2.1
- 0.8.3
- '0.9'
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: '0.9'
description-type: haddock
description: |-
  Efficient signal processing
  using runtime compilation and vector instructions.
  It uses LLVM library, thus it is not bound to a specific CPU.
  There are some example executables that you can build
  with Cabal flag @buildExamples@:

  * @synthi-llvm-render@:
  Render a MIDI file into an audio file
  using some arbitrary instruments.

  * @synthi-llvm-alsa@:
  A realtime software synthesizer
  that receives MIDI events via ALSA
  and in response plays tones via ALSA.
  If you have no ALSA (or Linux at all),
  then you can disable this example with @-f-alsa@.

  * @synthi-llvm-jack@:
  The same realtime software synthesizer using JACK.
  If you have no JACK,
  then you can disable this example with @-f-jack@.

  * @synthi-llvm-example@:
  Not very useful as an executable.
  You should better load the according module into GHCi
  and play around with it.
  The module Synthesizer.LLVM.LAC2011
  should be especially useful for an introduction.
license-name: GPL-3.0-only
