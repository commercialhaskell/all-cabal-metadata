all-versions:
- '0.2'
- 0.2.0.1
- '0.3'
- '0.5'
- 0.5.0.1
- 0.5.0.2
- '0.6'
- '0.7'
- 0.7.0.1
- '0.8'
- 0.8.1
- 0.8.1.1
- 0.8.1.2
- 0.8.2
- 0.8.2.1
- 0.8.3
- '0.9'
- '1.0'
- '1.1'
- 1.1.0.1
author: Henning Thielemann <haskell@henning-thielemann.de>
basic-deps:
  base: '>=4 && <5'
  containers: '>=0.1 && <0.7'
  event-list: '>=0.1 && <0.2'
  llvm-dsl: '>=0.1.1 && <0.2'
  llvm-extra: '>=0.11 && <0.14'
  llvm-tf: '>=9.0 && <21.1'
  midi: '>=0.2.1 && <0.3'
  non-empty: '>=0.2.1 && <0.4'
  non-negative: '>=0.1 && <0.2'
  numeric-prelude: '>=0.3 && <0.5'
  pathtype: '>=0.8 && <0.9'
  random: '>=1.0 && <1.3'
  semigroups: '>=0.1 && <1.0'
  sox: '>=0.2 && <0.3'
  storable-record: '>=0.0.3 && <0.1'
  storablevector: '>=0.2.6 && <0.3'
  synthesizer-core: '>=0.8 && <0.9'
  synthesizer-midi: '>=0.6 && <0.7'
  tfp: '>=1.0 && <1.1'
  transformers: '>=0.2 && <0.7'
  unsafe: '>=0.0 && <0.1'
  utility-ht: '>=0.0.15 && <0.1'
  vault: '>=0.3 && <0.4'
changelog: |
  # Change log for the `synthesizer-llvm` package

  ## 1.0

  * Move from `llvm-dsl` `Parameter` to `Exp` for parameters.
    Remove clumsy distinction between simple and parameterized
    `Signal`s and `Process`es.

  ## 0.9

  * Clean separation between Haskell's `Storable` memory format
    as used in `StorableVector`
    and LLVM's memory format, used for parameters.

  * Use of new `llvm-dsl` package.

  ## 0.8.3

  * `Noise`: caused a crash with LLVM-9
    because it called the X86 intrinsic `pmuludq`.
    Now use generic multiplication.

  ## 0.8.0

  * Compiled code is now freed by the garbage collector if it is no longer needed.

  * `reverbSimple`: No longer add the original signal.
    Every partial comb filter maintains it anyway.

  * In `CausalParameterized.Process`:
    `reverb` -> `reverbSimple`
    `reverbEfficient` -> `reverb`

  * added many export lists

  * For GHC-7.10 we had to separate `ProcessOf` type functions
    from `synthesizer-core:CausalClass`.
    We adapt to this change here.
changelog-type: markdown
description: |-
  Efficient signal processing
  using runtime compilation and vector instructions.
  It uses LLVM library, thus it is not bound to a specific CPU.
  There are some example executables that you can build
  with Cabal flag @buildExamples@:

  * @synthi-llvm-render@:
  Render a MIDI file into an audio file
  using some arbitrary instruments.

  * @synthi-llvm-alsa@:
  A realtime software synthesizer
  that receives MIDI events via ALSA
  and in response plays tones via ALSA.
  If you have no ALSA (or Linux at all),
  then you can disable this example with @-f-alsa@.

  * @synthi-llvm-jack@:
  The same realtime software synthesizer using JACK.
  If you have no JACK,
  then you can disable this example with @-f-jack@.

  * @synthi-llvm-example@:
  Not very useful as an executable.
  You should better load the according module into GHCi
  and play around with it.
  The module Synthesizer.LLVM.LAC2011
  should be especially useful for an introduction.
description-type: haddock
hash: cb0bf21e153c95cb64a2e73f70ee617cefa5332d1922a0e7f6a8a5636340ebe5
homepage: http://www.haskell.org/haskellwiki/Synthesizer
latest: 1.1.0.1
license-name: GPL-3.0-only
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Efficient signal processing using runtime compilation
test-bench-deps:
  QuickCheck: '>=1 && <3'
  base: '>=0'
  doctest-exitcode-stdio: '>=0.0 && <0.1'
  llvm-dsl: '>=0'
  llvm-extra: '>=0'
  llvm-tf: '>=0'
  numeric-prelude: '>=0'
  random: '>=0'
  storablevector: '>=0'
  synthesizer-core: '>=0'
  synthesizer-llvm: '>=0'
  tfp: '>=0'
  unsafe: '>=0'
  utility-ht: '>=0'
