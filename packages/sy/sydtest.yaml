all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.7.0.1
- 0.8.0.0
- 0.8.0.1
- 0.9.0.0
- 0.10.0.0
- 0.10.1.0
- 0.11.0.0
- 0.11.0.1
- 0.11.0.2
- 0.12.0.0
- 0.12.0.1
- 0.13.0.0
- 0.13.0.1
- 0.13.0.2
- 0.13.0.3
- 0.13.0.4
- 0.14.0.0
- 0.15.0.0
- 0.15.1.0
- 0.15.1.1
- 0.15.1.2
- 0.15.1.3
- 0.16.0.0
- 0.17.0.0
- 0.17.0.1
- 0.17.0.2
- 0.18.0.0
- 0.18.0.1
- 0.19.0.0
author: Tom Sydney Kerckhove
basic-deps:
  MonadRandom: '>=0'
  QuickCheck: '>=0'
  async: '>=0'
  autodocodec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  dlist: '>=0'
  fast-myers-diff: '>=0.0.1'
  filepath: '>=0'
  mtl: '>=0'
  opt-env-conf: '>=0.5'
  path: '>=0'
  path-io: '>=0'
  pretty-show: '>=0'
  quickcheck-io: '>=0'
  random: '>=0'
  random-shuffle: '>=0'
  safe: '>=0'
  safe-coloured-text: '>=0'
  safe-coloured-text-terminfo: '>=0'
  stm: '>=0'
  svg-builder: '>=0'
  text: '>=0'
  vector: '>=0'
changelog: "# Changelog\n\n## [0.19.0.0] - 2024-11-17\n\n### Added\n\n- Timeout support\n-
  `modifiedTimeout`\n- `withoutTimeout`\n- `withTimeout`\n\n### Changed\n\n- Tests
  now timeout after 60 seconds by default.\n\n## [0.18.0.1] - 2024-11-01\n\n### Changed\n\n-
  Fixed `mkNotEqualButShouldHaveBeenEqual` logic so it keeps the escape\n  sequence
  for `Text` and `String`. This fix a regression introduced in\n  0.18.0.0.\n\n##
  [0.18.0.0] - 2024-09-26\n\n### Added\n\n- The test `Assertion` which displays a
  diff in case of error (so `shouldBe`,\n  `shouldReturn`, golden tests and variations)
  will now timeout (after `2s`)\n  when computing the diff between expected and actual
  value.\n  In case of timeout, the values are displayed without any diff formatting.\n
  \ This ensure that test suite runtime won't be dominated by computing diff on\n
  \ some pathological cases.\n- The smart constructor `mkNotEqualButShouldHaveBeenEqual`
  \n- You can use your own diff algorithm using the constructor\n  `NotEqualButShouldHaveBeenEqualWithDiff`.\n-
  Test suite does not crash if failed assertion tries to print values\n  containing
  lazy exception.\n  For example `shouldBe (1, error \"nop\") (2, 3)` was crashing
  before.\n  The exception is now reported as the failure reason for the test.\n  Note
  that this can be counter intuitive, because the test is failing because\n  values
  are not equal (e.g. `(1, _) != (2, _)`), and this will be reported\n  differently.\n\n\n###
  Changed\n\nThe diff computation between actual value and reference changed so diff
  can\ntimeout.\n\nThis does not change the usual API (`shouldBe` or `GoldenTest`),
  but some\ninternal changed and you may need to adapt.\nThe change is straightforward,
  most of the functions are not `IO`:\n\n- `stringsNotEqualButShouldHaveBeenEqual`,\n
  \ `textsNotEqualButShouldHaveBeenEqual` and\n  `bytestringsNotEqualButShouldHaveBeenEqual`
  are now `IO Assertion` (was\n  `Assertion`) in order to implement the timeout logic
  described for\n  `shouldBe`.\n  The `Assertion` `NotEqualButShouldHaveBeenEqual`
  is removed and replaced by\n  `NotEqualButShouldHaveBeenEqualWithDiff` which embed
  the difference between\n  both values.\n- The record field `goldenTestCompare` of
  `GoldenTest` changed from `a -> a ->\n  Maybe Assertion` to `a -> a -> IO (Maybe
  Assertion)`.\n\n## [0.17.0.2] - 2024-09-26\n\n### Changed\n\n- Sydtest won't crash
  anymore, behave weirdly, or leak resources when executed\n  in a REPL and interrupted
  by C-c.\n\n## [0.17.0.1] - 2024-09-26\n\n### Changed\n\n* Only use `withArgs` when
  the argument list isn't already empty.\n  This works around a concurrency issue
  wherein `withArgs` cannot be run twice from multiple threads.\n\n## [0.17.0.0] -
  2024-08-04\n\n### Changed\n\n* Allow golden tests to perform IO during comparisons\n\n##
  [0.16.0.0] - 2024-08-03\n\n### Changed\n\n* `opt-env-conf`-based settings parsing.\n\n##
  [0.15.1.3] - 2024-07-20\n\n### Changed\n\n* Fix race condition in the asynchronous
  runner\n\n## [0.15.1.2] - 2024-07-18\n\n### Changed\n\n* Fix parsing filter flags
  so it becomes easy to select tests with spaces in their description\n\n## [0.15.1.1]
  - 2023-10-04\n\n### Changed\n\n* Compatibility with `optparse-applicative > 0.18`.\n*
  Compatibility with `GHC >= 9.7`.\n* Refactored out `fast-myers-diff` into its own
  package.\n\n## [0.15.1.0] - 2023-07-28\n\n### Added\n\n* `setupAroundWithAll`: so
  it's easier to use multiple outer resources to provide an inner resource, without
  the need of extra type annotation.\n\n## [0.15.0.0] - 2023-04-08\n\n### Added\n\n*
  `DefBeforeAllWithNode`: so that `beforeAllWith` can be defined in terms of it and
  have better parallelism properties.\n* `DefSetupNode`: so that `beforeAll_` can
  be defined in terms of it and have better parallelism properties.\n\n## [0.14.0.0]
  - 2023-04-05\n\n### Added\n\n* Profiling mode, for figuring out why your test suite
  is slow.\n  Use `--profile` to turn it on.\n\n### Changed\n\n* An improved asynchronous
  test runner.\n* Made `--debug` imply `--retries 0`\n\n## [0.13.0.4] - 2023-03-31\n\n###
  Added\n\n* Allow supplying multiple `--filter`/`--match` flags.\n* Add short names
  `-m` and `-f` for the filter flag options.\n\n## [0.13.0.3] - 2023-03-27\n\n###
  Added\n\n* Compatibility with `mtl-2.3`\n\n## [0.13.0.2] - 2023-03-24\n\n### Changed\n\n*
  Improved white space diffing\n\n## [0.13.0.1] - 2023-01-13\n\n### Changed\n\n* Replaced
  the diffing algorithm by a custom one.\n  This has sped up diffing at least 100x
  and let us get rid of the `Diff` and `split` dependencies.\n* Reworded 'likely not
  flaky' to 'does not look flaky' to be more technically\n  accurate as we know nothing
  about the likelihood of flakiness.\n\n## [0.13.0.0] - 2022-10-14\n\n### Changed\n\n*
  Changed the default of --golden-start to false.\n  If this causes any of your tests
  to fail, that means that you are not\n  correctly shipping the golden results along
  with your test suite.\n* Fixed a typo in the parallelisation warning that you see
  when you run sydtest in parallel with only one core..\n\n## [0.12.0.1] - 2022-10-06\n\n*
  Released the changelog with a date.\n\n## [0.12.0.0] - 2022-10-06\n\n### Added\n\n*
  Automatic flakiness diagnostics, see the `README`\n  This adds the `potentiallyFlaky`
  and `potentiallyFlakyWith` functions.\n* `Test.Syd` now also exports `pPrint`.\n*
  The `modifyRetries`, `withoutRetries`, `withRetries` functions, to allow configuration
  of the number of retries independently of whether flakiness is allowed.\n* The `TestRunReport`
  type, so that a `ResultForest` contains information about all runs of a test instead
  of only the last.\n* Expectation of failure.\n  This adds the `expectFailing`, `expectPassing`,
  and `withExpectationMode` functions.\n\n### Changed\n\n* Fixed: Fail-fast now works
  correctly together with fail-on-flaky\n* Fixed that flags with a `no-` prefix did
  not parse correctly and could therefore not be used.\n* The `FlakinessMode` type
  no longer contains a number of retries.\n  The number of retries is now configured
  separately.\n* Fixed that `xdescribe` would only result in one pending test instead
  of the same number of tests as are marked as pending.\n* Fixed that `specify` and
  `prop` would show a callstack from inside `sydtest` instead of from where you used
  them.\n* Sydtest now sets the global pseudorandomness seed in the random library
  to the given seed using `setStdGen` for extra reproducability.\n\n### Removed\n\n##
  [0.11.0.2] - 2022-09-7\n\n### Changed\n\n* Added the `shouldMatchList` expectation,
  corresponding the one from\n  `hspec-expectations`.\n\n## [0.11.0.1] - 2022-06-28\n\n###
  Changed\n\n* Made the type of `setupAround` more general.\n\n## [0.11.0.0] - 2022-06-28\n\n###
  Changed\n\n* `printOutputSpecForest` now uses `Data.Text.Lazy.IO` to output the
  report, so it will try to respect the system's locale.\n* `renderResultReport` now
  outputs a `Text.Builder` instead of a `ByteString.Builder` and a newline at the
  end.\n\n## [0.10.1.0] - 2022-06-04\n\n### Changed\n\n* Fixed a bug where multiple
  layers of contextual failures were not unwrapped and shown correctly.\n* Made 'Assertion'
  fields strict.\n\n## [0.10.0.0] - 2022-04-28\n\n### Added\n\n* Allow supplying filters
  without a flag, so `hello` instead of `--filter hello` or `--match hello`.\n* Simplified
  the way exceptions work to allow for attaching context to any failure instead of
  only `Assertion`s.\n\n## [0.9.0.0] - 2022-04-13\n\n### Added\n\n* Optional type-safe
  progress reporting for property tests.\n\n## [0.8.0.1] - 2022-02-11\n\n### Changed\n\n*
  Fixed property tests without labels still showing labels in the output.\n\n## [0.8.0.0]
  - 2022-02-11\n\n### Changed\n\n* The `TestDefM` now contains a `TestDefEnv` which
  also contains the test description path, along with `TestRunSettings`.\n* Removed
  the `MonadState ()` instance of `TestDefM`. It was just silly.\n* Changed the internals
  of `TestDefM` to use `ReaderT` and a strict `WriterT` instead of `RWST`.\n* Renamed
  `wrapRWST` to `wrapForest`.\n* Fixed the property label output to use the right
  total.\n* Moved `filterTestForest` and `randomiseTestForest` from `Test.Syd.TestDefM`
  to `Test.Syd.SpecDef`, where `SpecDefForest` is defined.\n\n### Added\n\n* `getTestDescriptionPath`
  to get the test description path upwards from inside a test definition.\n\n\n##
  [0.7.0.1] - 2021-12-23\n\n### Changed\n\n* Fixed `shouldStartWith` to test on the
  prefix rather then infix\n\n## [0.7.0.0] - 2021-12-15\n\n### Added\n\n* Flaky tests
  now show up in the failure report when `--fail-on-flaky` is active.\n* Flakiness
  information like the number of retries is now shown in the failure report for real
  (non-flaky) failures.\n\n### Changed\n\n* Simplified the way settings are passed
  around.\n\n## [0.6.1.0] - 2021-12-10\n\n### Added\n\n* The `flakyWith` combinator,
  which is like `flaky`, but lets you also add a message to your team.\n\n## [0.6.0.0]
  - 2021-11-12\n\n### Changed\n\n* Started using `autodocodec` instead of `yamlparse-applicative`.\n\n##
  [0.5.0.0] - 2021-11-12\n\n### Added\n\n* The flakiness combinators (`flaky`, `notFlaky`,
  and `withFlakiness`) to mark a test group as potentially flaky.\n* The `--fail-on-flaky`
  flag to falsify flakiness.\n* Experimental Windows support\n\n### Changed\n\n* Fixed
  the interpretation of `max-size` vs `max-success` in the configuration file and
  environment parsing.\n\n## [0.4.1.0] - 2021-10-10\n\n### Added\n\n* The `--random-seed`
  option to use random seeds instead of the fixed seed that is used by default.\n\n##
  [0.4.0.0] - 2021-09-02\n\n### Added\n\n* The `--debug` option.\n\n### Changed\n\n*
  Redid the entire flags parsing.\n  This should be backward compatible, and result
  in a nicer `--help` overview.\n\n## [0.3.0.3] - 2021-08-07\n\n### Changed\n\n* Show
  the total number of examples in the output as well\n\n## [0.3.0.2] - 2021-07-06\n\n###
  Changed\n\n* Accept options using American spelling as well.\n\n## [0.3.0.1] - 2021-06-20\n\n###
  Changed\n\n* Turned off shrinking when using `around` and friends. See https://github.com/nick8325/quickcheck/issues/331.\n\n##
  [0.3.0.0] - 2021-06-17\n\n### Added\n\n* An `IsTest (ReaderT env IO a)` instance.\n\n###
  Deleted\n\n* `Test.Syd.Def.Env`, which contained `eit` and `withTestEnv`\n  Now
  that `ReaderT env IO a` is also in `IsTest`, you can just use `it` for this.\n\n##
  [0.2.0.0] - 2021-06-03\n\n### Added\n\n* `beforeWith` and `beforeWith'`\n* `scenarioDir`
  and `scenarioDirRecur` for scenario testing.\n* `bracketSetupFunc`\n\n### Changed\n\n*
  The `SetupFunc` has been simplified to only take one type parameter.\n\n### Deleted\n\n*
  `composeSetupFunc`, now obsolete: use `<=<` instead.\n* `connectSetupFunc`, now
  obsolete: use `>=>` instead.\n* `wrapSetupFunc`, now entirely obsolete.\n* `unwrapSetupFunc`,
  now entirely obsolete.\n* `makeSimpleSetupFunc`, now obsolete: Use the `SetupFunc`
  constructor directly.\n* `useSimpleSetupFunc`, now obsolete: Use the `unSetupFunc`
  function directly.\n\n## [0.1.0.0] - 2021-03-07\n\nVarious fixes\n\n## [0.0.0.0]
  - 2020-12-26\n\nInitial release\n"
changelog-type: markdown
description: A modern testing framework for Haskell with good defaults and advanced
  testing features. Sydtest aims to make the common easy and the hard possible. See
  https://github.com/NorfairKing/sydtest#readme for more information.
description-type: haddock
hash: ec124b07cfa21692aed7307ceef75b218026758dc311a5d1258112603d3dab63
homepage: https://github.com/NorfairKing/sydtest#readme
latest: 0.19.0.0
license-name: LicenseRef-OtherLicense
maintainer: syd@cs-syd.eu
synopsis: A modern testing framework for Haskell with good defaults and advanced testing
  features.
test-bench-deps: {}
