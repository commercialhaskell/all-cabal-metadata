all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 1.0.0.0
author: Paweł Nowak
basic-deps:
  base: '>=4 && <5'
  lens: '>=4'
  mono-traversable: '>=0'
  scientific: '>=0.3'
  semi-iso: '>=1'
  text: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: |2-

  "syntax" allows you to write a single syntax description and instantiate is both as a parser and a pretty printer.

  Syntax descriptions are written in applicative or arrow style. The library uses a custom typeclass hierarchy, provided
  by the "semi-iso" package. Most of the time you will be using operators like '/$/', '/*/' and '/+/' (= '<|>'), just
  like parser combinators. When more power is needed - e.g. when the syntax depends on the parsed or printed value -
  you turn to arrows.

  Semi-isomorphisms from "semi-iso" are the basic building block of syntax descriptions. I recommend reading
  the hackage page of "semi-iso" first, as it contains much more information.

  Once you write a syntax description (polymorphic in the syntax category) you can instantiate it both as a parser or as
  a pretty-printer. The library "syntax-attoparsec" gives you the ability to extract an Attoparsec parser. Pretty-printing
  is implemented by the "syntax-printer" library, which uses Text and ByteString builders. (Note that formatting is handled
  by "syntax" itself, not by the printer library)

  Advanced formatting and parsing (for example indentation, haskell layout rule) is implemented as category transformers
  (similar to monad transformers). Currently only simple indentation is implemented (in "Data.Syntax.Indent") - basically
  a reader category transformer that tracks current indentation level. I plan on implementing Haskell layout rule in the
  future.

  The library can work with both text and binary data. Alas, there are no binary combinators implemented yet.

  EXAMPLES! See @syntax-example@ and @syntax-example-json@ for examples.

  * "syntax-example" implements a simple lambda calculus.

  * "syntax-example-json" implements a json parser and pretty printer.
description-type: haddock
hash: 3959bcb0cea2f2e1d1bf643306962551f6888b0db888beb632477c7929e6966d
homepage: ''
latest: 1.0.0.0
license-name: MIT
maintainer: Paweł Nowak <pawel834@gmail.com>
synopsis: Reversible parsing and pretty-printing.
test-bench-deps: {}
