homepage: https://git.code.sourcephile.fr/~julm/symantic-base
changelog-type: markdown
hash: e7423c9af471b39a128de334c1b5fe928edddaffb9f7eebfdd0bbeb6fe6a96f7
test-bench-deps: {}
maintainer: mailto:~julm/symantic-base@todo.code.sourcephile.fr
synopsis: Basic symantics combinators for Embedded Domain-Specific Languages (EDSL)
changelog: |2+

  ## symantic-base-0.3.0.20211007 (2021-10-07)

  ### Interface

  * Add `(<.)` and `(.>)` to class `ProductFunctor`.
  * Add class `Inferable`.
  * Add classes `Emptyable` and `Semigroupable`.
  * Add `CurryN` to the root import.
  * Add class `SumFunctor`.
  * Add instance `Category Iso`.
  * Change `(==)` to curryed form.
  * Change to `infixr` classes `ProductFunctor` and `SumFunctor`.
  * Fix class `Voidable`.
  * Fix class `Dicurryable`.
  * Move some `Abstractable` methods to `Functionable`.
  * Rename module `Symantic.{Lang => Class}`.
  * Rename term `{def => define}`.
  * Update release `version`.

  ### Documentation

  * Add `ChangeLog.md`.
  * Rename {hut => code}.sourcephile.fr.

  ### Implementation

  * Cleanup formatting a bit.
  * Cleanup useless import.

  ### Build

  * Add tool `git-chglog` for generating `ChangeLog.md`.
  * Add tool `reuse` for copyright linting.
  * Ignore more local-only files.
  * Improve linting.
  * Remove nix input `flake-utils`.
  * Remove lingering Stack file.
  * Update nix input `nixpkgs`.

basic-deps:
  base: '>=4.10 && <5'
  unordered-containers: -any
  containers: -any
  hashable: -any
  transformers: -any
  template-haskell: -any
all-versions:
- 0.0.0.20200708
- 0.0.1.20200708
- 0.0.2.20200708
- 0.1.0.20210703
- 0.2.0.20210731
- 0.2.0.20210831
- 0.3.0.20211007
author: Julien Moutinho <julm+symantic-base@sourcephile.fr>
latest: 0.3.0.20211007
description-type: haddock
description: |-
  This is a work-in-progress collection of basic tagless-final combinators,
  along with some advanced utilities to exploit them.

  * @Symantic.Class@
    gathers commonly used tagless-final combinators
    (the syntax part of symantics).
  * @Symantic.Data@ is an interpreter enabling to pattern-match on combinators,
    while keeping their extensibility.
  * @Symantic.Derive@
    enables to give a default value to combinators which avoids boilerplate code
    when implementing combinators for an interpreter is factorizable.
  * @Symantic.ObserveSharing@
    enables to observe Haskell @let@ definitions,
    turning infinite values into finite ones,
    which is useful to inspect and optimize recursive grammars for example.
    Inspired by Andy Gill's [Type-safe observable sharing in Haskell](https://doi.org/10.1145/1596638.1596653).
    For an example, see [symantic-parser](https://hackage.haskell.org/package/symantic-parser).
  * @Symantic.Reify@
    enables the lifting to any interpreter
    of any Haskell functions taking as arguments
    only polymorphic types (possibly constrained)
    or functions using such types.
    Inspired by Oleg Kiselyov's [TDPE.hs](http://okmij.org/ftp/tagless-final/course/TDPE.hs).
  * @Symantic.View@
    is an interpreter enabling to turn combinators into a human-readable string.
  * @Symantic.ADT@
    enables to derive reciprocal functions between
    data-constructors and @Either@s of tuples.
  * @Symantic.CurryN@
    gathers utilities for currying or uncurrying tuples
    of size greater or equal to 2.
  * @Symantic.Fixity@
    gathers utilities for parsing or viewing
    infix, prefix and postfix combinators.
license-name: AGPL-3.0-or-later
