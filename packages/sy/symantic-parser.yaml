homepage: ''
changelog-type: markdown
hash: b77e507fd1b22fa92954da195292f311571ad68f3d3cee103b08f2d916189709
test-bench-deps:
  symantic-parser: -any
  bytestring: '>=0.10'
  unix: '>=2.7'
  base: '>=4.10 && <5'
  tasty-golden: '>=2.3'
  unordered-containers: -any
  text: '>=1.2'
  strict: '>=0.4'
  filepath: '>=1.4'
  process: '>=1.6'
  containers: '>=0.5'
  hashable: '>=1.2.6'
  transformers: '>=0.4'
  tasty: '>=0.11'
  deepseq: '>=1.4'
  template-haskell: '>=2.16'
  directory: '>=1.3'
maintainer: Julien Moutinho <julm+symantic-parser@sourcephile.fr>
synopsis: Parser combinators statically optimized and staged via typed meta-programming
changelog: |
  ## symantic-parser-0.1.0.20210201

  * Add error reporting using the farthest position reached.
  * Add factoring of minimal input length checks ("horizon" checks).
  * Open data-types `Comb` and `Instr`
    using a new technique based upon `data family` and `Typeable`.
  * Leverage symantics further more to simplify the optimization passes.
  * Rename some types and terms for clarity.
  * Fix reproductibility of unit tests by hidding unique names.
  * Add a few more tests.

  ## symantic-parser-0.0.0.20210102

  * Add missing golden tests in the Cabal tarball.

  ## symantic-parser-0.0.0.20210101

  * Initial (pre-alpha) release, on the unsuspecting world at sleep.
basic-deps:
  bytestring: -any
  base: '>=4.10 && <5'
  unordered-containers: -any
  text: -any
  array: -any
  containers: -any
  ghc-prim: -any
  hashable: -any
  transformers: -any
  template-haskell: '>=2.16'
all-versions:
- 0.0.0.20210101
- 0.0.0.20210102
- 0.1.0.20210201
author: Julien Moutinho <julm+symantic-parser@sourcephile.fr>
latest: 0.1.0.20210201
description-type: markdown
description: |
  ### Main differences with respect to `ParsleyHaskell`

  - Extensible primitive grammar combinators, including their underlying optimization passes, by leveraging reciprocal injections between a tagless-final encoding of syntaxes (aka. type-classes) and a corresponding tagful-initial encoding to pattern-match syntaxes (aka. data-instances). This enable a very principled, yet flexible source code. Moreover `DefaultSignatures` are supplied to succinctly derive new semantics (aka. type-class-instances) using automatic `trans`formations.

  - Error messages based upon the farthest input position reached (not yet implemented in `ParsleyHaskell`).

  - Minimal input length checks ("horizon" checks) required for a successful parsing are factorized using a different static analysis than `ParsleyHaskell`'s "piggy bank" which I've not understood well. This analyis can see beyond calls to subroutines, but maybe `ParsleyHaskell`'s analysis can also be adjusted to do the same. Both analysis are not well documented and studied.

  - No dependency upon GHC plugins: `lift-plugin` and `idioms-plugin`, because those are plugins hence introduce a bit of complexity in the build processes using this parser, but most importantly they are experimental and mostly cosmetics, since they only enable a cleaner usage of the parsing combinators, by lifting Haskell code in `pure` to integrate the `TemplateHaskell` needed. I do not understand them that much and do not feel confortable to maintain them come the day that their authors abandon them.

  - No dependency upon `dependent-map` by keeping observed sharing inside `def` and `ref` combinators, instead of passing by a `DMap`. And also when introducing the join-points optimization, where fresh `TemplateHaskell` names are also directly used instead of passing by a `DMap`.

  - No support for general purpose registers in the `Machine` producing the `TemplateHaskell` splices (maybe it will come if I need and understand what's done in `ParsleyHaskell`).

  - License is `GPL-3.0-or-later` not `BSD-3-Clause`.

  ### Main goals

  - For me to better understand [ParsleyHaskell](https://github.com/j-mie6/ParsleyHaskell), and find a manageable balance between simplicity of the codebase and features of the parser. And by doing so, challenging and showcasing symantic techniques.

  - To support the parsing of tree-like data structures instead of only string-like data structures. Eg. to validate XML using RelaxNG in [symantic-xml](http://hackage.haskell.org/package/symantic-xml) or to perform routing of HTTP requests in [symantic-http-server](http://hackage.haskell.org/package/symantic-http-server). This is currently done in those packages using `megaparsec`, but `megaparsec` is not conceived for such input, and is less principled when it comes to optimizing, like merging alternatives.
license-name: GPL-3.0-or-later
