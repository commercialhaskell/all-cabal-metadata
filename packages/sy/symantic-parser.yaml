all-versions:
- 0.0.0.20210101
- 0.0.0.20210102
- 0.1.0.20210201
- 0.2.0.20210703
- 0.2.1.20210803
author: Julien Moutinho <julm+symantic-parser@sourcephile.fr>
basic-deps:
  array: '>=0'
  base: '>=4.10 && <5'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=1.4'
  ghc-prim: '>=0'
  hashable: '>=0'
  pretty: '>=1.1'
  symantic-base: '>=0.2'
  template-haskell: '>=2.16'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
changelog: |
  ## symantic-parser-0.2.0.20210703

  * Fix mutual let bindings by defining them all together.
  * Add a fixpoint to analyse the minimal reads and raisable exceptions
    of each let binding in the `Machine`.
    Those analyses respectively enable to minimize calls to `checkHorizon`,
    and minimize the number of `catchHandler`s passed to `call`s and `jump`s.
    Computed values appear in golden tests.
  * Add golden tests for `TemplateHaskell` splices using `runQ`
    which is enough here and avoids to have a custom `Setup.hs`
    in order to correctly run an external `ghc`
    like [singletons](https://hackage.haskell.org/package/singletons-base-3.0/src/Setup.hs) does.
  * Add preliminary support for error reporting using exceptions,
    based upon: [A Parsing Machine for Parsing Expression Grammars with Labeled Failures](https://dl.acm.org/doi/10.1145/2851613.2851750)
  * Add benchmarks for Brainfuck parsers.
  * Change `ValueCode` to `Production` which relies upon `Data.Functor.Product`,
    to be able to leverage type-classes to handle the burden of defining both
    `Identity` and `CodeQ` for `Production` expressions.
  * Rename `Symantic.Univariant` to `Symantic.Typed`.
  * Add `Language.Haskell.TH.Show` utility to avoid
    adding a `Symantic.Typed.View` entry into `Production`
    which would make writing `Production`s even more painful.
    This adds the benefit of printing any Haskell code,
    instead of only operators having symantics, eg. in `Symantic.Typed.Lang`.
    However `Symantic.Typed.View` is no longer used now,
    and thus `lam1`s no longer singled-out, not a big deal though.
  * Major refactoring.
  * Minor other optimizations and fixes.

  ## symantic-parser-0.1.0.20210201

  * Add error reporting using the farthest position reached.
  * Add factoring of minimal input length checks ("horizon" checks).
  * Open data-types `Comb` and `Instr`
    using a new technique based upon `data family` and `Typeable`.
  * Leverage symantics further more to simplify the optimization passes.
  * Rename some types and terms for clarity.
  * Fix reproductibility of unit tests by hidding unique names.
  * Add a few more tests.

  ## symantic-parser-0.0.0.20210102

  * Add missing golden tests in the Cabal tarball.

  ## symantic-parser-0.0.0.20210101

  * Initial (pre-alpha) release, on the unsuspecting world at sleep.
changelog-type: markdown
description: |
  ### Main differences with respect to `ParsleyHaskell`

  - Primitive grammar combinators are extensible, including the optimization pass for which they are the current top-level combinator.

  - Error messages are based upon the farthest input position reached (not yet implemented in `ParsleyHaskell`) and there is a preliminary support for error messages based upon [labeled failures](https://dl.acm.org/doi/10.1145/2851613.2851750).

  - Minimal input length checks ("horizon" checks) required for a successful parsing are statically computed using a [polyfix](http://okmij.org/ftp/Computation/fixed-point-combinators.html#Poly-variadic) to see beyond calls to subroutines, which is not (yet) possible in `ParsleyHaskell`.

  - Symantics are used for grammars productions instead of GHC plugins: `lift-plugin`, `idioms-plugin` or `parsley-garnish` for users. Those provide convenient syntaxic-sugar (by quoting an Haskell expression as itself and its `TemplateHaskell` equivalent), but I do not understand them that much and do not feel confortable to maintain them in case their authors abandon them.

  - Fresh `TemplateHaskell` names are used directly (when observing sharingm introducing join-points, etc.) instead of a detour depending upon `dependent-map`.

  - Code is a common published under the copyleft license `AGPL-3.0-or-later`, instead of the more liberal `BSD-3-Clause` of `ParsleyHaskell`.

  - Testing grammars have their generated machines and `TemplateHaskell` splices followed by golden tests.

  ### Main goals

  - For me to better understand [ParsleyHaskell](https://github.com/j-mie6/ParsleyHaskell), and find a manageable balance between simplicity of the codebase and features of the parser. And by doing so, challenging and showcasing symantic techniques.

  - To support the parsing of tree-like data structures instead of only string-like data structures. Eg. to validate XML using RelaxNG in [symantic-xml](https://hackage.haskell.org/package/symantic-xml) or to perform routing of HTTP requests in [symantic-http-server](http://hackage.haskell.org/package/symantic-http-server). This is currently done in those packages using `megaparsec`, but `megaparsec` is not conceived for such input, and is less principled when it comes to optimizing, like merging alternatives.

  ### Implementation techniques

  #### Typed Tagless-Final
  The syntax of grammars are term-level combinators defined in type-classes,
  and their semantics are data-types having instances of those type-classes.
  And the same technique is applied for machine instructions and grammar productions.

  For automatic deriving, `DefaultSignatures` are supplied, see `Symantic.Typed.Derive`.

  For pattern-matching, data-families indexed by the syntaxic type-class are supplied,
  see `Symantic.Typed.Data`.
description-type: markdown
hash: 5719a4901ff9f0ba82b8fef1bb87a2877916a9dfc7347c69aa92837c7834a520
homepage: https://git.hut.sourcephile.fr/~julm/symantic-parser
latest: 0.2.1.20210803
license-name: AGPL-3.0-or-later
maintainer: mailto:~julm/symantic-parser@todo.hut.sourcephile.fr
synopsis: Parser combinators statically optimized and staged via typed meta-programming
test-bench-deps:
  attoparsec: '>=0.13'
  base: '>=4.10 && <5'
  bytestring: '>=0.10'
  containers: '>=0.5.10.1'
  criterion: '>=1.5'
  deepseq: '>=1.4'
  directory: '>=1.3'
  filepath: '>=1.4'
  hashable: '>=1.2.6'
  megaparsec: '>=9.0'
  process: '>=1.6'
  random: '>=1.1'
  strict: '>=0.4'
  symantic-parser: '>=0'
  tasty: '>=0.11'
  tasty-golden: '>=2.3'
  template-haskell: '>=2.16'
  text: '>=1.2'
  transformers: '>=0.5'
  unix: '>=2.7'
  unordered-containers: '>=0'
