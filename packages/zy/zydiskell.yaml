all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.0
author: nerded
basic-deps:
  base: '>=4.7 && <4.15'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.6 && <0.7'
  fixed-vector: '>=1.2 && <1.3'
  storable-record: '>=0.0.5 && <0.0.6'
changelog: |
  [0.2.0.0] - Unreleased

    * **Note**: breaking change.
      * `Zydis.Decoder.decodeFullBuffer` now return a `Seq` instead of a `Vector`.
      * introduce `ZyanStatus`, `ZyanCoreStatus` and `ZydisStatus` in `Zydis.Status` which are directly mapped from their C counterparts.

    * remove `vector` dependency
    * introduce `containers` dependency

  [0.1.1.0] - November 2020

    * initial release
changelog-type: markdown
description: |
  [![build status](https://github.com/nerded1337/zydiskell/workflows/build/badge.svg)](https://github.com/nerded1337/zydiskell/actions)
  [![hackage version](https://img.shields.io/hackage/v/zydiskell)](https://hackage.haskell.org/package/zydiskell)

  # Zydiskell

  Haskell langage binding for the [Zydis library](https://github.com/zyantific/zydis), a fast and lightweight x86/x86-64 disassembler.

  ## Building

  - Recursively clone the project: `git clone --recursive https://github.com/nerded1337/zydiskell`
  - Either use Stack or Cabal: `stack build` | `cabal v2-build`

  Notes:
  - the [Zydis library](https://github.com/zyantific/zydis) is directly embedded and compiled by GHC.
  - we support the last three major GHC versions, currently: `8.6`, `8.8` and `8.10`

  ## Interface

  We currently expose three functions:

  ```haskell
  import Data.ByteString (ByteString)
  import qualified Zydis as Z

  Z.initialize :: Z.MachineMode -> Z.AddressWidth -> IO (Either Z.ZyanStatus Z.Decoder)

  Z.decodeBuffer
    :: Z.Decoder
    -> ByteString
    -> Z.Offset
    -> Z.Length
    -> IO (Either Z.ZyanStatus Z.DecodedInstruction)

  Z.decodeFullBuffer
    :: Z.Decoder -> ByteString -> IO (Either Z.ZyanStatus (Seq Z.DecodedInstruction))
  ```

  ## Example
  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import           Data.Sequence
  import           Data.Bifoldable
  import qualified Zydis                         as Z

  main :: IO ()
  main = test

  test :: IO ()
  test = bitraverse_ initFailure decode =<< initZydis
   where
    zyanError :: Show a => String -> a -> IO ()
    zyanError s = putStrLn . ((s <> ". ZyanStatus: ") <>) . show

    initFailure :: Z.ZyanStatus -> IO ()
    initFailure = zyanError "Failed to initialize decoder"

    initZydis :: IO (Either Z.ZyanStatus Z.Decoder)
    initZydis = Z.initialize Z.MachineModeLong64 Z.AddressWidth64

    {-
       mov rax, 0xCAFEBABECAFEBABE
       push rax
       ret
    -}
    buffer    = "\x48\xB8\xBE\xBA\xFE\xCA\xBE\xBA\xFE\xCA\x50\xC3"

    decodingFailure :: Z.ZyanStatus -> IO ()
    decodingFailure = zyanError "Failed to decode buffer"

    {-
        Given the decoded buffer, should output: [MnemonicMov,MnemonicPush,MnemonicRet]
    -}
    printMnemonics :: Seq Z.DecodedInstruction -> IO ()
    printMnemonics = print . fmap Z.decodedInstructionMnemonic

    decode :: Z.Decoder -> IO ()
    decode decoder =
      bitraverse_ decodingFailure printMnemonics
        =<< Z.decodeFullBuffer decoder buffer
  ```
description-type: markdown
hash: a54bb24a04d5c76eb1e4597368ce30446152a57c5a2b161a13c674b72e414175
homepage: https://github.com/nerded1337/zydiskell#readme
latest: 0.2.0.0
license-name: GPL-3.0-only
maintainer: nerded.nerded@gmail.com
synopsis: Haskell language binding for the Zydis library, a x86/x86-64 disassembler.
test-bench-deps:
  base: '>=4.7 && <4.15'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.6 && <0.7'
  fixed-vector: '>=1.2 && <1.3'
  storable-record: '>=0.0.5 && <0.0.6'
  zydiskell: '>=0'
