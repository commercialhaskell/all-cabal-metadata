all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: Javran Cheng
basic-deps:
  base: '>=4.15 && <=1000'
  primitive: '>=0'
  template-haskell: '>=0'
  vector: '>=0'
changelog: |
  # v0.2.1.0

  - Remove most of `Ord a` constraints, which are unnecessary since we already have a `a -> a -> Ordering` as input.

  # v0.2.0.0

  - `Data.SortingNetwork` now exports sorting functions based on optimal network (by size).
  - Added proper type signatures to generated functions (thanks to u/brandonchinn178).
  - Renamed `sortListXBy` to `unsafeSortListBy`, and few changes to improve runtime safety (thanks to u/Endicy).
  - Improved documentation.

  # v0.1.0.0

  Initial version.
changelog-type: markdown
description: |
  # sorting-network

  Sort small lists with sorting network.

  ## How to use

  This library provides functions that can sort small (2 ~ 16 elements),
  fixed-sized list / homogenous tuple of elements.

  To use this library, `import Data.SortingNetwork` and you will bring two sets of functions into scope:

  ```haskell
  -- where X is a number from 2-16
  unsafeSortListXBy :: (a -> a -> Ordering) -> [a] -> [a]

  -- where X is a number from 2-16
  sortTup2By :: (a -> a -> Ordering) -> (a, a) -> (a, a)
  sortTup3By :: (a -> a -> Ordering) -> (a, a, a) -> (a, a, a)
  sortTup4By :: (a -> a -> Ordering) -> (a, a, a, a) -> (a, a, a, a)
  ...
  sortTup16By :: (a -> a -> Ordering) -> (a, a, ..., a) -> (a, a, ..., a)
  ```

  in which `unsafeSortListXBy` are partial functions that only accept list of corresponding length
  (you will get pattern matching failures if that is not the case).

  ## How it works

  A [sorting network](https://en.wikipedia.org/wiki/Sorting_network) can sort fixed size list of elements.

  Observe that the following function sorts a tuple of 3 elements (name shadowing is intentional for demostration):

  ```haskell
  sortTup3By :: (a -> a -> Ordering) -> (a, a, a) -> (a, a, a)
  sortTup3By = \cmp (a, b, c) ->
    let sw = \u v f ->
          if cmp u v == GT then f v u else f u v
     in sw a b \a b ->
          sw a c \a c ->
            sw b c \b c ->
              (a, b, c)
  ```

  This works because it simulates a sorting network of length 3:
  if we pretend variable `a`, `b`, and `c` are 3 wires in the network,
  and `sw a b \a b -> {body}` applies a comparator on wire `a` and `b`, shadowing
  old variables with now properly ordered `a` and `b` in the `{body}`.

  To generalize, if we have `n` variables and a sorting network known to sort `n` elements,
  we can build a sort function of fixed size `n` by building sorting network with
  comparators applied layer-by-layer in that order.

  This library builds those functions for you, utilizing template haskell.

  ## Acknowledgment

  This library takes inspiration from @oisdk's post [Sorting Small Things in Haskell](https://doisinkidney.com/posts/2018-05-06-sorting-small.html).

  Optimal networks (by size) are taken from https://bertdobbelaere.github.io/sorting_networks.html.

  Also thanks for all the suggestion, support, and criticism from [the initial release thread on Reddit](https://www.reddit.com/r/haskell/comments/11eyopo/ann_sortingnetwork_initial_release/).
description-type: markdown
hash: d79266675d2516430800f555602a1c6d206f23c80519e75fe1d816aad6eec626
homepage: https://github.com/Javran/sorting-network#readme
latest: 0.2.1.0
license-name: Apache-2.0
maintainer: javran.c@gmail.com
synopsis: Sort small lists with sorting network.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.15 && <=1000'
  criterion: '>=0'
  hspec: '>=0'
  mwc-random: '>=0'
  sorting-network: '>=0'
  vector: '>=0'
