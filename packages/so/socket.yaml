all-versions:
- 0.1.0.1
- 0.2.0.0
- 0.3.0.1
- 0.4.0.1
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.3.0
- 0.5.3.1
- 0.6.0.0
- 0.6.0.1
- 0.6.1.0
- 0.6.2.0
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.1.0
- 0.8.2.0
- 0.8.3.0
author: Lars Petersen
basic-deps:
  base: '>=4.8 && <5'
  bytestring: <0.12
changelog: "0.8.3.0 Lars Petersen <info@lars-petersen.net> 2020-06-29\n\n  * Updates
  Stack LTS to 16.3\n\n0.8.2.0 Lars Petersen <info@lars-petersen.net> 2018-10-31\n\n
  \ * Issue 61: Fixed unexpected `IOError` bubbling up from `threadWaitSTM`.\n  *
  Added message flag `msgPeek` (MSG_PEEK).\n\n0.8.1.0 Lars Petersen <info@lars-petersen.net>
  2018-08-13\n\n * Issue 51: Add a `getAddress` operation for getting the local socket
  address.\n * Marked `System.Socket.Type.Stream.receiveAll` as deprecated.\n   This
  is a preparation for a name reuse in upcoming 0.9.0.0.\n * Removed dead code (`Message`
  type).\n * Added error code `ePermissionDenied`.\n\n0.8.0.1 Lars Petersen <info@lars-petersen.net>
  2017-02-25\n\n * Issue 47: Fixed haddock documentation. \n * Issue 46: Export `KeepAlive`
  socket option in the main module.\n\n0.8.0.0 Lars Petersen <info@lars-petersen.net>
  2017-02-25\n\n * Issue 26: Show instances for `SocketException` and `AddressInfoException`\n
  \  no longer use `strerror()` and `gai_strerror()`, but simply show the name\n   of
  the error code. Linking to `gai_strerror()` was problematic on Windows\n   and `strerror()`
  was not thread-safe on Linux.\n\n * Issue 38: Added SO_KEEPALIVE as `System.Socket.KeepAlive`.\n\n
  * Issue 37: Added TCP_NODELAY as `System.Socket.Protocol.TCP.NoDelay`.\n\n * Issue
  40: Changed allocation function to malloPlainForeignPtr.\n   This mechanism used
  in the ByteString library is heavily optimised and\n   2 - 2.5 times faster than
  the previous implementation.\n   See https://github.com/lpeterse/haskell-socket/pull/40
  for details.\n\n * Issue 31: Added a `Default` protocol type.\n\n * Issue 27: Fixed
  a memory leak that manifested when interrupting threads\n   waiting on socket events.\n\n
  * Issue 25: The `awaitEvent: invalid argument` was caused by the forked-off\n   thread
  in `threadWaitRead`. The new code introduced by the changes caused\n   by issue
  27 catches and swallows this exception in a sane way.\n\n * Renamed `unsafeSocketWaitRead/Write/Connected`
  to `waitRead/Write/Connected`\n   as these operations are not really unsafe, just
  internal. The operation\n   signatures changed due to issue 27. Also, documented
  Windows specific\n   implementation details.\n\n * The `connect` operation does
  no longer hold the lock on the socket while\n   waiting for connection establishment.\n\n
  * Refactored and adapted the `accept` operation for changes caused by issue 27.\n
  \  Operation semantics shouldn't have changed.\n\n * Made `SocketAddress` an associated
  data family and added a\n   `Storable (SocketAddress f)` constraint to the `Family`
  class. This allows\n   omitting the `Storable` in socket operations (`Family` suffices
  now). It\n   should be compatible with all existing code and not require any changes.\n\n0.7.0.0
  Lars Petersen <info@lars-petersen.net> 2016-11-13\n\n * Added function `sendAllLazy`
  and `sendAllBuilder`. Changed the signature and\n   semantics of `sendAll` (thus
  the major version bump).\n\n * The `MessageFlags` constructor is now exported (kudos
  to Shea Levy for noting\n   that this is necessary when writing extension libraries).\n\n
  * GHC 8 introduces a built-in alignment macro which is now used when present.\n
  \  This prevents re-definition warnings.\n\n * Fixed implicit function declaration
  warning concerning accept4.\n   Defining `GNU_SOURCE` in the header file declares
  `accept4` when present\n   (see man accept4).\n\n0.6.2.0 Lars Petersen <info@lars-petersen.net>
  2016-08-15\n\n * Added functions for constructing internet addresses without the
  need for IO\n   (`inetAddressToTuple`, `inetAddressFromTuple`, `inet6AddressToTuple`,\n
  \   `inet6AddressFromTuple`) as proposed by Erik Rantapaa.\n\n0.6.1.0 Lars Petersen
  <info@lars-petersen.net> 2016-08-11\n\n * A potential race condition has been fixed
  (issue #18): `c_get_last_error`\n   was supposed to return the error code of the
  last operation (if any).\n   On Linux et.al. it just returned `errno` whereas on
  Windows it wrapped\n   a call to `WSAGetLastError`.\n   The problem was that the
  value of `errno` and `WSAGetLastError` is only\n   valid when sampled immediately
  after the failed call. This could not be\n   easily guaranteed the way it was implemented:
  GHC's RTS is potentially\n   allowed to interrupt the thread between the failed
  call and the call to\n   `c_get_last_error` (although this is very unlikely when
  no memory allocation\n   is necessary). The content of `errno` might have been reset
  of overridden\n   by another thread.\n   The solution for this is that all FFI calls
  now take a pointer with a reserved\n   memory location (allocated on the stack,
  so it's quite cheap) and the C\n   functions immediately save the errno (if necessary).
  The `unsafe ccall`s are\n   guaranteed to be uninterruptible.\n\n * All tests have
  been ported to `tasty` as previously proposed by\n   Roman Cheplyaka.\n\n * Fixed
  `connect` operation to use `getsockopt` with SO_ERROR to determine\n   socket connection
  status / error code instead of issuing a second connection\n   attempt (see issue
  #15).\n   On Windows, the solution is a bit more difficult: `getsockopt` return
  0\n   unless the operation has either succeeded or failed.\n   Unfortunately, there
  did not exist a mechanism to wait for this condition\n   (GHC's IO manager lacks
  this feature). This has been circumvented by\n   calling `select` for the socket
  with minimal timeout several times with\n   an exponential back-off. Tests have
  been added to validate different aspects\n   of this.\n\n0.6.0.1 Lars Petersen <info@lars-petersen.net>
  2016-04-10\n\n * Adapted the `AddrInfo` test suite to not depend on specific name
  resolution\n   features that aren't available in a `chroot()` environment (see issue
  #12).\n\n0.6.0.0 Lars Petersen <info@lars-petersen.net> 2016-03-26\n\n * Improved
  and adapted documentation.\n * Merged `GetSocketOption` and `SetSocketOption` to
  one single type class\n   `SocketOption`.\n * `getNameInfo` now returns `NameInfo`
  instead of a tuple.\n * Added all theoretically possible `SocketExceptions`.\n *
  The type class `GetNameInfo` has been renamed to `HasNameInfo`.\n * The type class
  `GetAddressInfo` has been renamed to `HasAddressInfo`.\n * Removed operation `withConnectedSocket`
  without replacement.\n   It should not be part of this minimal library. Its code
  can be retrieved from the repository if needed.\n * The operations `sendAll` and
  `receiveAll` are now exported through\n   `System.Socket.Type.Stream` and no longer
  trough the main module.\n   They are very specific, solely stream-oriented and just
  wrappers around\n   the basic operations. Such operations shouldn't pollute the
  main module.\n * Issue #10: Ben Gamari reported that the associated type `SocketAddress`\n
  \  is not injective which would lead to compilation failure on GHC 8.* .\n   This
  is fixed by using a data family instead.\n\n0.5.3.0 Lars Petersen <info@lars-petersen.net>
  2015-08-09\n\n * Added a test for `eOperationNotSupported` (try to listen on a UDP
  socket).\n * Niklas Hamb√ºchen added `eOperationNotSupported`.\n\n0.5.2.0 Lars Petersen
  <info@lars-petersen.net> 2015-07-08\n\n * Don't set `msgNoSignal` automatically
  with `send` and `sendTo`. This implicit\n   behaviour is a bad design decision.
  The implications of this change are\n   rather limited. The behaviour/correctness
  of an application is only affected\n   if it hooked SIGPIPE. GHC's RTS by default
  ignores SIGPIPE since #1619.\n   You're still advised to adapt your applications
  to use `msgNoSignal`\n   explicitly when writing on stream oriented sockets. Otherwise
  the RTS gets\n   unnecessarily interrupted. This is harmless, but annoying and not
  desired\n   when developing high-performance applications.\n * Define `msgNoSignal`
  as 0 if not available and documented this behaviour.\n * Added new exception value
  `ePipe`.\n\n0.5.1.0 Lars Petersen <info@lars-petersen.net> 2015-06-22\n\n * Exposed
  `unsafeGetSocketOption` and `unsafeSetSocketOption`.\n * Exposed `socketWaitRead`
  and `socketWaitWrite` through `System.Socket.Unsafe`.\n\n0.5.0.0 Lars Petersen <info@lars-petersen.net>
  2015-06-19\n\n * Introduced newtypes `Port`, `FlowInfo` and `ScopeId` in Inet6 family.\n
  * Renamed nearly everything in response to very constructive criticism\n   by Bryan
  O'Sullivan. This is a breaking change (sorry about that).\n   I felt this was the
  last chance to get this straight before the library\n   gets widely adopted.\n   Additional
  kudos to @ignorantone and @whatsthepoint.\n * Issue #7: Typo in documentation of
  inaddrNONE and inaddrBROADCAST.\n   Kudos to Michael Fox.\n\n0.4.0.1 Lars Petersen
  <info@lars-petersen.net> 2015-06-17\n\n * tar-ball did not contain relevant source
  files.\n\n0.4.0.0 Lars Petersen <info@lars-petersen.net> 2015-06-16\n\n * Changed
  semantics of `connect` operation. It now\n   blocks until a connection has either
  has been established or failed.\n * Added `SO_ERROR` socket option.\n * Added `eALREADY`
  exception constant.\n * Added `eISCONN` exception constant.\n * Added `eNOTCONN`
  exception constant.\n * Added convenience operation `withConnectedSocket`.\n * Added
  `eNETUNREACH` exception constant.\n * Added new operation `recvAll` and changed
  `sendAll` to lazy `ByteString`.\n * Added new socket option IPV6_V6ONLY.\n * Removed
  untested socket option SO_ACCEPTCONN.\n * Correctly defining AI_ flags on Windows
  (MinGW doesn't although\n   they are all well support on Vista or higher).\n * Got
  all tests passing on Windows 7.\n\n0.3.0.1 Lars Petersen <info@lars-petersen.net>
  2015-06-07\n\n * Fixed documentation of eaiNONAME.\n * Fixed typo in .cabal file
  in reference to cbits file.\n\n0.3.0.0 Lars Petersen <info@lars-petersen.net> 2015-06-07\n\n
  * `AddrInfoFlags` and `NameInfoFlags` are now instances of `Bits`.\n * Dropped all
  sendmsg/recvmsg related operations (harden the core first!)\n * Dropped support
  for UNIX socket (will be separate package `socket-unix`)\n * Renamed type function
  `Address` to `SockAddr`.\n * Added GetAddrInfo and GetNameInfo classes.\n * Dropped
  support for SCTP (will be separate package `socket-sctp`)\n * Added support for
  RAW sockets.\n * Started to support Windows (still unfinished).\n * New operation
  `recvRecord`.\n * ReceiveMsg now returns a strict `ByteString`.\n * New operations
  `sendV`, `sendToV`.\n * Restricted getAddrInfo and getNameInfo and added `getAddrInfo6`
  and\n   `getNameInfo6`\n * Added address family types INET, INET6 and UNIX (API
  breaking change)\n * Hide `SockAddrIn6` address constructor\n * Hide `SockAddrIn`
  address constructor\n * Added `recvMsg` operation\n * Fixed unsafeSend, unsafeSendTo
  and unsafeSendMsg (they were waiting for\n   a read event instead of waiting for
  writing)\n * Use `aiStrError` values in Show instance\n * Added `aiStrError` function\n
  * Added constants for AddrInfoException\n * Changed definitin of AddrInfoException\n
  * Added `sendAllMsg` operation\n * Added `sendMsg` operation (+ some types and internals)\n\n0.2.0.0
  Lars Petersen <info@lars-petersen.net> 2015-05-29\n\n * Added a sendAll operation\n
  * Exposed the Socket constructor\n * Added `getNameInfo` operation\n * Added msgWAITALL
  and fixed serious bug regarding all other MsgFlags\n * Nicer Show instances for
  SockAddrIn and SockAddrIn6\n * Hiding internal modules\n * Added `getAddrInfo` operation\n\n0.1.0.1
  Lars Petersen <info@lars-petersen.net> 2015-05-28\n\n * Added CHANGELOG.md\n * Removed
  `threadWaitReadMVar` and `threadWaitWriteMVar`\n * Import `Data.Monoid` in `System.Socket.Unsafe`
  to support older Preludes\n\n0.1.0.0 Lars Petersen <info@lars-petersen.net> 2015-05-28\n\n
  * Initial release\n"
changelog-type: markdown
description: |
  socket
  ======

  [![Available on Hackage][badge-hackage]][hackage]
  [![License MIT][badge-license]][license]
  [![Build Status][badge-travis]][travis]
  [![AppVeyor][badge-appveyor]][appveyor]

  ### Motivation

  This library aims to expose a minimal and cross-platform interface for
  BSD style networking code.

  ### Implementation Philosophy

    - Every operation and every flag exposed should be supported with same
      semantics on every platform. If this cannot be guaranteed it should
      be supplied by another (extension) package.

    - Absolutely no conditional exports.

    - No `#ifdef` madness in the Haskell sources. The Haskell binding code
      uses the FFI to reference platform dependant C functions for each operation.
      If a platform is not POSIX compliant (i.e. Windows) equivalent functionality
      is implemented by using whatever the platform specific building blocks are.

  ### Platform Support

  #### Linux

  Platform is fully supported. Each commit and release is automatically tested with
  [Travis CI](https://travis-ci.org/lpeterse/haskell-socket) and several versions
  of GHC.

  #### Windows

  Fully supported on Windows7 (maybe Vista) or higher :-)

  GHC's runtime system on Windows does not offer an event notification mechanism for sockets.
  The original [network](https://hackage.haskell.org/package/network) library
  suffers from this, too. For example, connection attempts are non-interruptible etc.
  The approach taken to circumvent this in this library is to poll the
  non-blocking sockets with increasing delay. This guarantees interruptibility
  and fairness between different threads. It allows for decent throughput
  while also keeping CPU consumption on a moderate level if a socket has not seen
  events for a longer period of time (maximum of 1 second delay after 20
  polling iterations). The only drawback is potentially reduced response time
  of your application. The good part: Heavy load (e.g. connection requests or
  incoming traffic) will reduce this problem. Eventually your accepting thread
  won't wait at all if there are several connection requests queued.

  This workaround may be removed if someone is willing to sacrifice to improve
  the IO manager on Windows.

  Each commit and release is automatically tested with
  [AppVeyor](https://ci.appveyor.com/project/lpeterse/haskell-socket) continuous
  integration.

  #### MacOS

  Working, but not regularly tested.

  Please report when it is no longer working on MacOS.

  ### Dependencies

     - base
     - bytestring

  ### Tests

  The project uses [tasty](http://documentup.com/feuerbach/tasty) for testing.

  There are two test suites: `default` and `threaded` which share the same
  code. The only difference is that one is compiled against GHC's single threaded
  RTS and the other against the multi-threaded one. Run `cabal test` or `stack test`
  to execute both in sequence.

  [badge-travis]: https://img.shields.io/travis/lpeterse/haskell-socket.svg?label=Linux%20build
  [travis]: https://travis-ci.org/lpeterse/haskell-socket
  [badge-appveyor]: https://img.shields.io/appveyor/ci/lpeterse/haskell-socket.svg?label=Windows%20build
  [appveyor]: https://ci.appveyor.com/project/lpeterse/haskell-socket
  [badge-hackage]: https://img.shields.io/hackage/v/socket.svg?dummy
  [hackage]: https://hackage.haskell.org/package/socket
  [badge-license]: https://img.shields.io/badge/license-MIT-green.svg?dummy
  [license]: https://github.com/lpeterse/haskell-socket/blob/master/LICENSE
  [issues]: https://github.com/lpeterse/haskell-socket/issues
  [Github]: https://github.com/lpeterse/haskell-socket
description-type: markdown
hash: 25c35fc352de42010871ac2162b344a48d43512fa51f3ac24e8518fb964cc11e
homepage: https://github.com/lpeterse/haskell-socket
latest: 0.8.3.0
license-name: MIT
maintainer: info@lars-petersen.net
synopsis: An extensible socket library.
test-bench-deps:
  QuickCheck: '>=2.9'
  async: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  socket: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
