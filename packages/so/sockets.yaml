all-versions:
- 0.1.0.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.5.0.0
- 0.6.1.0
- 0.6.1.1
- 0.7.0.0
author: Andrew Martin
basic-deps:
  base: '>=4.11.1.0 && <5'
  byteslice: '>=0.1.1 && <0.3'
  bytestring: '>=0.10 && <0.12'
  error-codes: '>=0.1.0.1 && <0.2'
  ip: '>=1.4.1'
  posix-api: '>=0.7 && <0.8'
  primitive: '>=0.7 && <0.10'
  primitive-addr: '>=0.1 && <0.2'
  primitive-offset: '>=0.2 && <0.3'
  primitive-unlifted: ==0.1.3.1 || >=2.1
  sockets: '>=0'
  stm: '>=2.4'
  systemd-api: '>=0.1'
  text: '>=1.2'
changelog: |
  # Revision history for stream-sockets

  ## 0.7.0.0

  * Remove `sendMany`.
  * Make it possible to build this project with GHC 9.2 series. The previous
    release had dropped support for everything below GHC 9.4.

  ## 0.6.1.1

  * Work with primitive-unlifted-2.1.0.0.

  ## 0.6.1.0

  * Correct implementation of withListenerReuse
  * Add interruptibleForkAcceptedUnmasked for UDS. Add `SO_REUSEADDR` inet functions.

  ## 0.6.0.0

  * Give slab types a phantom type argument that indicates whether
    or not they operate on pinned byte arrays. This makes it possible
    to provide a `bytestring` interface to `recvmmsg`.
  * Upgrade interruptible datagram interface to work with new slabs.

  ## 0.5.0.0

  * Add support for getting back `ECONNREFUSED` when send or receiving
    with datagram sockets.
  * Add support for using `Addr` and `ByteString` with datagram sockets.
  * Add sendMany for vectored io on a stream socket.
  * Correct the implementation of interruptible functions that
    work on datagram sockets.

  ## 0.4.0.0

  * Overhaul the interface. Aggressively use backpack.

  ## 0.3.1.0

  * Add functions for sending strict bytestrings and lazy bytestrings
    over a stream socket (`sendByteArray` and `sendLazyByteArray`).
  * Add `receiveByteString` to `Socket.Stream.IPv4`. This is a function
    for receive strict bytestring.
  * Add `sendAddr`. This is used in the implementations of both
    `sendByteArray` and `sendLazyByteArray`.

  ## 0.3.0.0

  * Totally redo almost everything. The API is now considered fairly
    stable.

  ## 0.1.0.0 -- 2019-01-18

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |-
  This library provides a high-level abstraction for network sockets. It uses
  Haskell2010 (along with GADTs) without typeclasses to ensure that
  consumers of the API can only call appropriate functions on a socket.
  .
  Exceptions are tracked in the types of functions and returned to the caller
  with `Either`. The caller is free to handle these gracefully or to throw
  them. This library has another class of exceptions described as _unrecoverable_.
  This library only throws exceptions in three situations:
  .
  * The library detects that it has misused the operating system's
    sockets API. This includes getting a `sockaddr` with an unexpected
    socket family. It also includes getting an error code that should not
    be possible. For example, the abstractions provided for both datagram
    sockets and stream sockets mean that `send` system calls in either
    context should never return the error code `ENOTCONN`. Consequently,
    this error is treated as unrecoverable.
  .
  * The caller asks for a negatively-sized slice of a buffer
    (such exceptions indicate a mistake in the code consuming this API).
  .
  * A system call fails with `ENOBUFS` or `ENOMEM`. These indicate that
    the operating system is out of memory. If this happens, the
    Out Of Memory (OOM) manager is likely killing processes to
    reclaim memory, so the process that received this message may
    be killed soon. Making things even worse is that the GHC runtime
    requests pages of memory from the operating system at times that
    are effectively unpredictable to Haskell developers. (Most
    memory-managed languages have this behavior). Any attempt
    to recover from `ENOBUFS` or `ENOMEM` might cause the runtime to
    allocate memory from the operating system. According to the
    documentation for the <http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Exception-Base.html#t:AsyncException HeapOverflow>
    exception, an allocation failure at this point in time (likely given
    the recent `ENOBUFS`/`ENOMEM`) would result in immidiate
    termination of the program. So, although it is technically possible
    to recover from `ENOBUFS`/`ENOMEM`, the OOM killer and the
    GHC runtime make it impossible to do so reliably.  Consequently,
    these error codes are treated as fatal.
description-type: haddock
hash: 90b698c84e087539dcba3e283e45e0f4474cd57f564f40f80a33178f30681cbc
homepage: https://github.com/andrewthad/sockets
latest: 0.7.0.0
license-name: BSD-3-Clause
maintainer: andrew.thaddeus@gmail.com
synopsis: High-level network sockets
test-bench-deps:
  async: '>=0'
  base: '>=4.11.1.0 && <5'
  byteslice: '>=0.1.1'
  bytestring: '>=0.10.8.2'
  entropy: '>=0.4.1.4'
  ip: '>=1.4.1'
  primitive: '>=0.7 && <0.10'
  primitive-addr: '>=0'
  primitive-unlifted: ==0.1.3.1 || >=2.1
  sockets: '>=0'
  stm: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
