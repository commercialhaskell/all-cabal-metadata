all-versions:
- 0.0.1
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 1.0.0
- 1.1.0
- 2.0.0
- 2.0.1
- 2.1.0
- 3.0.0
- 3.1.0
- 3.2.0
- 3.3.0
- 3.4.0
- 3.5.0
- 3.5.1
- 4.0.0
author: Luc Tielen
basic-deps:
  array: <=1.0
  base: '>=4.12 && <5'
  bytestring: '>=0.10.10 && <1'
  deepseq: '>=1.4.4 && <2'
  directory: '>=1.3.3 && <2'
  filepath: '>=1.4.2 && <2'
  mtl: '>=2.0 && <3'
  process: '>=1.6 && <2'
  profunctors: '>=5.6.2 && <6'
  temporary: '>=1.3 && <2'
  text: '>=2.0.2 && <3'
  vector: <=1.0
changelog: |
  # Changelog

  All notable changes to this project (as seen by library users) will be documented in this file.
  The CHANGELOG is available on [Github](https://github.com/luc-tielen/souffle-haskell.git/CHANGELOG.md).

  ## [4.0.0] - 2024-01-03

  ### Added

  - Support for GHC 9.6

  ### Removed

  - Support for marshalling of Text.Short values. Only UTF8 Text values are
    supported.

  ## [3.5.1] - 2022-11-07

  ### Added

  - Instances for strict `State` and `RWS` monads for `MonadSouffle`.

  ### Changed

  - Added support for GHC 9.2

  ## [3.5.0] - 2022-06-04

  ### Changed

  - souffle-haskell now supports Souffle version 2.3.

  ## [3.4.0] - 2022-05-15

  ### Changed

  - Loosen the constraint that only types that are simple products that only
    contain directly marshallable types like `Int32`, `Word32`, ... Now also
    newtypes are allowed to be serialized, as well as product types inside other
    product types (as long as all the fields implement the 'Marshal' typeclass).

  ### Fixed

  - Check if a type is a simple product type consisting of only types supported by
    Datalog. (This had a small bug for facts with more than 4 arguments.)

  ## [3.3.0] - 2022-02-27

  ### Added

  - New `DerivingVia`-style API for binding to a Datalog program.

  ## [3.2.0] - 2022-02-20

  ### Added

  - Add `Analysis` type for composing multiple Datalog programs.

  ### Changed

  - souffle-haskell now supports Souffle version 2.2.

  ## [3.1.0] - 2021-09-30

  ### Changed

  - souffle-haskell now supports Souffle version 2.1.

  ### Fixed

  - Bug in some C++ assertions that caused the actual assertion message to be
    wrongly computed.

  ## [3.0.0] - 2021-05-03

  ### Changed

  - Optimized the underlying way of transferring facts between Haskell and C++.
  - Add an extra `Submit a` constraint on `addFacts`, `addFact` and `containsFact`
    when using compiled mode, similar to `Collect c` when using `getFacts`.

  ### Fixed

  - Potential memory leak if an async exception occurred between the point of
    allocating a pointer and wrapping it in a `ForeignPtr`.

  ### Removed

  - Souffle EDSL (this is now available in the
    [souffle-dsl](https://github.com/luc-tielen/souffle-dsl)
    package). This is mostly done to improve compile times of this package.

  ## [2.1.0] - 2021-01-03

  ### Added

  - Support Semigroup and Monoid instances for composing Souffle actions in
    other ways.
  - Add role annotations to handle types to avoid using `coerce` to change
    the type of a Souffle handle.

  ### Changed

  - souffle-haskell now supports Souffle version 2.0.2.

  ### Fixed

  - Fix GHC 8.10 specific warnings and compile error.

  ## [2.0.1] - 2020-09-05

  ## Fixed

  - Compiler flags in package.yaml that lead to a compile error.

  ## [2.0.0] - 2020-08-23

  ### Added

  - The `Fact` typeclass now also requires you to specify the `FactDirection`.
    This prevents inconsistent and buggy behavior when trying to use a fact in
    an invalid way (e.g. trying to add an output-only fact).
  - DSL for creating Soufflé programs directly from Haskell.
    See the docs of `Language.Souffle.Experimental` for more information.

  ### Changed

  - souffle-haskell now supports Soufflé version 2.0.1.
  - `getFacts`, `findFact`, `addFact` and `addFacts` now have stricter
    constraints in their type signatures to prevent invalid usage of facts.
  - `runSouffle` for both compiled and interpreted mode and `runSouffleWith`
    for interpreted mode have updated type signatures to be able to
    automatically cleanup temporary files created while interacting with Souffle.

  ### Removed

  - `init` function for both compiled and interpreted mode. Initialization is
    now handled by the `runSouffle*` functions. This change makes automatic
    cleanup of created files possible and prevents double initialization of
    Souffle programs.
  - `cleanup` function for interpreted mode, this is handled automatically now.

  ## [1.1.0] - 2020-07-26

  ### Added

  - getFacts can now return facts in a fixed size array (from the array package).
  - Added support for facts containing "unsigned" values.
  - Added support for facts containing "float" values.

  ### Fixed

  - The `run` function in `Language.Souffle.Interpeted` now always closes
    stdout and stderr handles of the external souffle process.

  ### Removed

  - `Language.Souffle` module is removed since it only existed due to legacy
    reasons. This removal forces users to be explicit about the mode they are
    using souffle-haskell in (interpreted or compiled mode). If you experience
    compilation errors, rename all imports of `Language.Souffle` to
    `Language.Souffle.Compiled`.

  ## [1.0.0] - 2020-07-09

  ### Changed

  - Libraries using souffle-haskell are now "self-contained": if a project
    depends on such a library, it will not require to also have Souffle installed.
  - souffle-haskell now supports Soufflé version 2.0.0.
  - `writeFiles` now takes an extra `FilePath` argument for writing facts to a
    certain directory.

  ### Deleted

  - Language.Souffle.TH module is deleted because it is no longer needed anymore
    due to a change in the generated Souffle code. The generated code can now be
    correctly integrated by adding the files to `cxx-sources`
    in package.yaml / cabal file.

  ## [0.2.3] - 2020-05-21

  ### Changed

  - Optimize performance when marshalling and unmarshalling facts.

  ## [0.2.2] - 2020-04-30

  ### Changed

  - Fix compile time issue when generically deriving `Marshal` typeclass
    for data types with more than 3 fields.

  ## [0.2.1] - 2020-04-25

  ### Changed

  - Trimmed dependencies to make the library more lightweight.

  ## [0.2.0] - 2020-04-22

  ### Added

  - Added Language.Souffle.Interpreted module for running Souffle programs in interpreted mode.
    NOTE: For this mode the CSV fact files must use TAB (`'\t'`) characters as separators.
  - In interpreted mode, you can configure where the library looks for datalog files or where
    the souffle executable is located. For more information, see the `runSouffle` and `runSouffleWith`
    functions in the Language.Souffle.Interpreted module.

  ### Changed

  - Introduced Language.Souffle.Class module as separation of the typeclass and the
    Language.Souffle.Compiled module to offer a uniform API in both interpreted and compiled mode.

  ## [0.1.0] - 2019-12-21

  ### Added

  - Added Marshal instance for lazy and strict Text

  ### Changed

  - getFacts can now return a vector instead of a list, based on type inference.
    This allows for a more efficient representation in memory as well
    as being able to allocate all needed memory once before collecting facts.

  ## [0.0.1] - 2019-10-23

  ### Added

  - Initial version of the library
changelog-type: markdown
description: |
  # Souffle-haskell

  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/luc-tielen/souffle-haskell/blob/master/LICENSE)
  [![CI](https://github.com/luc-tielen/souffle-haskell/actions/workflows/build.yml/badge.svg)](https://github.com/luc-tielen/souffle-haskell/actions/workflows/build.yml)
  [![Hackage](https://img.shields.io/hackage/v/souffle-haskell?style=flat-square)](https://hackage.haskell.org/package/souffle-haskell)

  This repo provides Haskell bindings for performing analyses with the
  [Souffle Datalog language](https://github.com/souffle-lang/souffle).

  Fun fact: this library combines both functional programming (Haskell),
  logic programming (Datalog / Souffle) and imperative / OO programming (C / C++).

  ## Motivating example

  Let's first write a datalog program that can check if one point
  is reachable from another:

  ```prolog
  // We define 2 data types:
  .decl edge(n: symbol, m: symbol)
  .decl reachable(n: symbol, m: symbol)

  // We indicate we are interested in "reachable" facts.
  // NOTE: If you forget to add outputs, the souffle compiler will
  //       try to be smart and remove most generated code!
  .output reachable

  // We write down some pre-defined facts on the datalog side.
  edge("a", "b").
  edge("b", "c").
  edge("c", "e").
  edge("e", "f").
  edge("c", "d").

  // And we tell datalog how to check if 1 point is reachable from another.
  reachable(x, y) :- edge(x, y).                  // base rule
  reachable(x, z) :- edge(x, y), reachable(y, z). // inductive rule
  ```

  Now that we have the datalog code, we can generate a `path.cpp` from it
  using `souffle -g path.cpp path.dl`. `souffle-haskell` can bind to this program
  in the following way:

  ```haskell
  -- Enable some necessary extensions:
  {-# LANGUAGE DeriveGeneric, DeriveAnyClass, DerivingVia, DataKinds, UndecidableInstances #-}

  -- NOTE: The usage of "deriving stock", "deriving anyclass" and "deriving via" in the
  -- examples below matters in order for the library to work correctly!

  module Main ( main ) where

  import Data.Foldable ( traverse_ )
  import Control.Monad.IO.Class
  import GHC.Generics
  import Data.Vector
  import qualified Language.Souffle.Compiled as Souffle


  -- First, we define a data type representing our datalog program.
  data Path = Path
    -- By making Path an instance of Program, we provide Haskell with information
    -- about the datalog program. It uses this to perform compile-time checks to
    -- limit the amount of possible programmer errors to a minimum.
    deriving Souffle.Program
    via Souffle.ProgramOptions Path "path" '[Edge, Reachable]

  -- Facts are represented in Haskell as simple product types,
  -- Numbers map to Int32, unsigned to Word32, floats to Float,
  -- symbols to Strings / Text.

  data Edge = Edge String String
    deriving stock (Eq, Show, Generic)
    -- For simple product types, we can automatically generate the
    -- marshalling/unmarshalling code of data between Haskell and datalog.
    deriving anyclass Souffle.Marshal
    -- By making a data type an instance of Fact, we give Haskell the
    -- necessary information to bind to the datalog fact.
    deriving Souffle.Fact
    via Souffle.FactOptions Edge "edge" 'Souffle.Input

  data Reachable = Reachable String String
    deriving stock (Eq, Show, Generic)
    deriving anyclass Souffle.Marshal
    deriving Souffle.Fact
    via Souffle.FactOptions Reachable "reachable" 'Souffle.Output


  main :: IO ()
  main = Souffle.runSouffle Path $ \maybeProgram -> do  -- Initializes the Souffle program.
    case maybeProgram of
      Nothing -> liftIO $ putStrLn "Failed to load program."
      Just prog -> do
        Souffle.addFact prog $ Edge "d" "i"   -- Adding a single fact from Haskell side
        Souffle.addFacts prog [ Edge "e" "f"  -- Adding multiple facts
                              , Edge "f" "g"
                              , Edge "f" "g"
                              , Edge "f" "h"
                              , Edge "g" "i"
                              ]

        Souffle.run prog  -- Run the Souffle program

        -- NOTE: You can change type param to fetch different relations
        --       Here it requires an annotation since we directly print it
        --       to stdout, but if passed to another function, it can infer
        --       the correct type automatically.
        --       A list of facts can also be returned here.
        results :: Vector Reachable <- Souffle.getFacts prog
        liftIO $ traverse_ print results

        -- We can also look for a specific fact:
        maybeFact <- Souffle.findFact prog $ Reachable "a" "c"
        liftIO $ print $ maybeFact
  ```

  For more examples of how to use the top level API, you can also take a look at
  the tests.

  ## Getting started

  This library assumes that the Souffle include paths are properly set.
  This is needed in order for the C++ code to be compiled correctly.
  The easiest way to do this (that I know of) is via [Nix](https://nixos.org/nix/).
  Add `souffle` to the build inputs of your derivation and everything will
  be set correctly.
  Without Nix, you will have to follow the manual install instructions
  on the [Souffle website](https://souffle-lang.github.io/install).

  In your package.yaml or .cabal file, make sure to add the following options
  (assuming package.yaml here):

  ```yaml
  # ...

  cxx-options:
    - -D__EMBEDDED_SOUFFLE__
  cxx-sources:
    - /path/to/FILE.cpp # be sure to change this according to what you need!

  # ...
  ```

  This will instruct the Souffle compiler to compile the C++ in such a way that
  it can be linked with other languages (including Haskell!).

  For an example, take a look at the configuration for the
  [test suite](https://github.com/luc-tielen/souffle-haskell/blob/master/package.yaml#L118-L133) of this project.

  If you run into C++ compilation issues when using stack, this might be because
  the `-std=c++17` flag is not being used correctly when compiling souffle-haskell.
  To fix this, you can add the following to your `stack.yaml`:

  ```yaml
  ghc-options:
    souffle-haskell: -optcxx-std=c++17
  ```

  ## Souffle EDSL

  This package previously contained a Haskell EDSL for writing Souffle code
  directly in Haskell. This has now been moved to a separate
  [package](https://github.com/luc-tielen/souffle-dsl.git).

  ## Documentation

  The documentation for the library can be found on
  [Hackage](https://hackage.haskell.org/package/souffle-haskell).
  `Language.Souffle.Class` is a good starting point for getting an overview of
  the top level API.

  ## Supported modes

  Souffle programs can be run in 2 ways. They can either run in **interpreted** mode
  (using the `souffle` CLI command), or they can be **compiled** to C++-code and
  called from a host program for improved efficiency. This library supports both
  modes (since version 0.2.0). The two variants have only a few minor differences
  and can be swapped fairly easily.

  ### Interpreted mode

  This is probably the mode you want to start out with if you are developing a
  program that uses Datalog for computing certain relations. Interpreted mode
  offers quick development iterations (no compiling of C++ code each time you
  change your Datalog code). However because the Souffle code is interpreted,
  it can't offer the same speed as in compiled mode.

  If you want to use interpreted Souffle, you need to import the
  `Language.Souffle.Interpreted` module.

  #### Interpreter configuration

  The interpreter uses CSV files to read or write facts. The configuration
  allows specifiying where the fact directory is located. With the default
  configuration, it will try to lookup `DATALOG_DIR` in the environment and
  fall back to the current directory (or `.`).

  You can also configure which souffle executable will be used. By default,
  it will first look at the `SOUFFLE_BIN` environment variable. If this is
  not set, it will try to find the executable using the `which` shell-command.
  If it also can't find the executable this way, then it will fail to
  initialize the interpreter.

  For more information regarding configuration, take a look at the
  `runSouffleWith` function.

  The separators in the CSV fact files cannot be configured at the moment.
  A tab character (`'\t'`) is used to separate the different columns.

  ### Compiled mode

  Once the prototyping phase of the Datalog algorithm is over, it is advised
  to switch over to the compiled mode. It offers much improved performance
  compared to the interpreted mode, at the cost of having to recompile your
  Datalog algorithm each time it changes.

  The main differences with interpreted mode are the following:

  1. Compile the Datalog code with `souffle -g`.
  2. Import `Language.Souffle.Compiled`

  The [motivating example](#motivating-example) is a complete example for the compiled mode.

  ## Contributing

  TLDR: Nix-based project; the Makefile contains the most commonly used commands.

  Long version:

  The project makes use of [Nix](https://nixos.org/nix/download.html) to setup the development environment.
  Setup your environment by entering the following command:

  ```bash
  $ cachix use luctielen  # Optional (improves setup time *significantly*)
  $ nix-shell
  ```

  After this command, you can build the project:

  ```bash
  $ make configure  # configures the project
  $ make build      # builds the haskell code
  $ make lint       # runs the linter
  $ make hoogle     # starts a local hoogle webserver
  ```

  ## Issues

  Found an issue or missing a piece of functionality?
  Please open an issue with a description of the problem.
description-type: markdown
hash: 2771282d801bb4376558b1f9455323381871c3f913e58228ded81267219f7ada
homepage: https://github.com/luc-tielen/souffle-haskell#README.md
latest: 4.0.0
license-name: MIT
maintainer: luc.tielen@gmail.com
synopsis: Souffle Datalog bindings for Haskell
test-bench-deps:
  array: <=1.0
  base: '>=4.12 && <5'
  criterion: '>=1 && <2'
  deepseq: '>=1.4.4 && <2'
  directory: '>=1.3.3 && <2'
  hedgehog: '>=1 && <2'
  hspec: '>=2.6.1 && <3.0.0'
  hspec-hedgehog: '>=0 && <1'
  profunctors: '>=5.6.2 && <6'
  souffle-haskell: '>=0'
  temporary: '>=1.3 && <2'
  text: '>=2.0.2 && <3'
  vector: <=1.0
