all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
author: Takamasa Mitsuji
basic-deps:
  array: '>=0'
  base: '>=4.7 && <5'
  binary: '>=0.8.1.0'
  bytestring: '>=0'
  crypton: '>=0'
  crypton-x509-store: '>=0'
  crypton-x509-system: '>=0'
  data-default-class: '>=0'
  mtl: '>=0'
  network: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  time: '>=0'
  tls: '>=0'
  uuid-types: '>=0'
changelog: |
  # Changelog for ms-tds

  ## Unreleased changes
changelog-type: markdown
description: "# ms-tds: TDS Protocol implemented in Haskell\n\nThis library is a Haskell
  implementation of the Tabular Data Stream (TSD) protocol\nused by Microsoft SQL
  Server and others.\n\n\n## Related projects\n\n* [mssql-simple](https://github.com/mitsuji/mssql-simple)\n
  \ : SQL Server client library implemented in Haskell  \n  https://github.com/mitsuji/mssql-simple\n
  \ \n* [mssql-simple-example](https://github.com/mitsuji/mssql-simple-example)\n
  \ : Usage example of mssql-simple  \n  https://github.com/mitsuji/mssql-simple-example\n\n\n##
  Advantage\n\n* ODBC independent\n\n* Implemented only with Haskell (Independent
  of other languages ​​and environments)\n\n* Supports encryption at login\n\n* Implemented
  as\n  [binary](http://hackage.haskell.org/package/binary)\n  package compatible
  data types\n\n* Intended for use in both Client library and Server library implementations\n\n*
  7.1 Revision 1 (SQL Server 2000 SP1 and later)\n\n* Tested with SQL Server 2008
  R2, SQL Server 2014\n\n\n\n## Todo\n\n* Write tests\n  * Write general tests\n  *
  Test legacy data types\n\n\n* Implement data types\n  * AltMetaData\n  * AltRow\n\n\n*
  Implement [Binary.put](http://hackage.haskell.org/package/binary-0.10.0.0/docs/Data-Binary.html#v:put)\n
  \ interface of\n  * TokenStreams\n\n\n* Implement [Binary.get](http://hackage.haskell.org/package/binary-0.10.0.0/docs/Data-Binary.html#v:get)\n
  \ interface of\n  * Login7\n  * SqlBatch\n  * RpcRequest\n\n\n* Implement more detailed
  types\n  * Collation(DataStream)\n  * GUID(Prelogin,DataStream)\n  * NONCE(Prelogin)\n
  \ * TimeStamp(RCDlarge)\n  * Login7: TDS Version\n  * Login7: client program version\n
  \ * Login7: timezone\n  * Login7: language\n  * TSEnvChange: Type\n  * TSLoginAck:
  Interface\n  * TSReturnValue: Status\n\n\n* Implement Flag interfaces\n  * Header
  status\n  * PLOEncryption\n  * PLOMars\n  * Login7 flag1\n  * Login7 flag2\n  *
  Login7 sql type\n  * Login7 flag3\n  * RpcReqBatchProcId OptionFlags\n  * RpcReqBatchPhrocName
  OptionFlags\n  * RpcReqBatchParam StatusFlag\n  * AltMetaDta Flags\n  * MetaColumnData
  Flags\n  * TSDone status\n  * TSDoneInProc status\n  * TSDoneProc status\n  * TSReturnValue
  Flags\n\n\n* ETC\n  * Encrypt entire connection support\n  * Mars support\n  * SSPI
  support\n  * FedAuth support\n  * TDS protocol versions other than 7.1\n\n  * Attention
  \ \n    https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/dc28579f-49b1-4a78-9c5f-63fbda002d2e\n
  \ \n  * Bulk Load  \n    https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/88176081-df75-4b24-bcfb-4c16ff03cbfa\n\n
  \ * Distributed Transaction  \n    https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-tds/b4b78564-5440-4fc0-b5ef-c9e1925aaefe\n\n\n\n"
description-type: markdown
hash: 74d197346be84872f3ab6caab9d439ffeffefa9254e629d41f6edd64c7dba01a
homepage: https://github.com/mitsuji/ms-tds#readme
latest: 0.4.0.3
license-name: BSD-3-Clause
maintainer: tkms@mitsuji.org
synopsis: TDS Protocol implemented in Haskell
test-bench-deps:
  array: '>=0'
  base: '>=4.7 && <5'
  binary: '>=0.8.1.0'
  bytestring: '>=0'
  crypton: '>=0'
  crypton-x509-store: '>=0'
  crypton-x509-system: '>=0'
  data-default-class: '>=0'
  ms-tds: '>=0'
  mtl: '>=0'
  network: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  time: '>=0'
  tls: '>=0'
  uuid-types: '>=0'
