all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
author: Michał J. Gajda
basic-deps:
  HaTeX: '>=0'
  base: '>=4.7 && <5'
  blaze-html: '>=0'
  blaze-markup: '>=0'
  containers: '>=0'
  ghc-syntax-highlighter: '>=0'
  optics-core: '>=0'
  optics-th: '>=0'
  optparse-applicative: '>=0'
  pandoc-filter-indent: '>=0'
  pandoc-types: '>=0'
  skylighting: '>=0'
  text: '>=0'
changelog: |
  # Changelog for pandoc-filter-indent

  ## Unreleased changes

  ## Release history

  0.3.2.0 Sep 29 2021
    - stacked subscripts
    - lambda in Haskell tokenizer
    - greek letters for special variable names: eps, pi, rho
    - automatically append required LaTeX packages (broken for Beamer output)
    - Mapsto for |=>

  0.3.1.0 Jan 15 2021
    - Slightly improved formatting with SkyLighting and LaTeX

  0.3.0.0 Jan 15 2021
    - Support default syntaxes from skylighting.

  0.2.3.0 Jan 12 2021
    - fixed minor issue that disabled inline rendering.

  0.2.2.0 Jan 12 2021
    - Fixed problem with declaring too few columns in LaTeX
    - Inline code formatting
    - Removed indent marks from parenthesised operators: "(+)"
    - Removed indent marks from functions promoted to operators like "`mappend`"
    - Fixed rendering of indent mark at the start of the column

  0.1.0.0 Dec 1 2020
    - Initial release supporting LaTeX and HTML output

  0.2.0.0 Dec 2 2020
    - Preliminary support for Tikzmarks
    - Updated README

  0.2.1.0 Dec 2 2020
    - Extended code documentation
    - Cleanups
changelog-type: markdown
description: "---\ntitle: \"Code typesetting made simple\"\nsubtitle: \"Pandoc filter\"\ndescription:
  |\n  To build this document use:\n\n  > pandoc README.md  -o README.pdf --filter=pandoc-filter-indent\n\ndate:
  |\n  `\\today`{=latex}\nabstract: |\n  Program code has become a prime medium for
  communicating important algorithmic and mathematical ideas, as\n  indicated by unwavering
  popularity of functional pearls and multitude blog posts using literate programming
  style\n  to illustrate key ideas.  However the literate programming systems are
  either appallingly complex or provide\n  only limited functionality to emphasise
  code structure.  We propose extremely simple code typesetting tool that\n  is also
  a Pandoc filter, and can thus be used to improve comprehensibility of the code.
  It is also simple enough\n  to be provided as a literate program within this submission.
  While it is processing Haskell code, we show how it\n  can be easily adapted to
  typeset Python, Java or C/C++.\nauthor: Michał J. Gajda\n\n#  - name: Michał J.
  Gajda\n#    email: mjgajda@migamake.com\n#    orcid:       \"0000-0001-7820-3906\"\n#
  \   affiliation: 1\naffiliation:\n  institution: \"Migamake Pte Ltd\"\n  email:
  \       mjgajda@migamake.com\n  url:         \"https://migamake.com\"\nreview: true\nnumbersections:
  true\nheader-includes:\n  - |-2\n    \\usepackage{graphicx}\n    \\DeclareUnicodeCharacter{03B1}{\\ensuremath{\\alpha{}}}\n\nprologue:\n
  \ - |-2\n    \\usepackage{graphicx}\n    \\DeclareUnicodeCharacter{03B1}{\\ensuremath{\\alpha{}}}\n
  \   \\renewcommand{\\longeq}{\\scalebox{1.7}[1]{=}}\n\n---\n\n# Introduction\n\nProgram
  code has become a prime medium for communicating important algorithmic and mathematical
  ideas, as\nindicated by unwavering popularity of functional pearls and multitude
  blog posts using literate programming style\nto illustrate key ideas.  However the
  literate code typesetting systems like lhs2TEX[@lhs2tex]\nare either appallingly
  complex, language-specific, or provide only limited functionality to emphasise code
  structure.\n\nWe propose a simple approach that can be used not just for code in
  languages with syntax defined by indentation-defined\n(like Haskell or Python),
  but also for code that has been formatted by indentation (like many Java and C/C++
  projects mandate).\n\n# Algorithm\n\nWe use `pandoc` to process only code fragments
  in otherwise unprocessed literate program\nor article with code excerpts.\n\nWe
  detect layout boundaries from tokens:\n\n(1) we note an column indent for each line^[This
  step is implemented using GHC API.],\nthen\n\n(2) mark a start of each operator
  (like `::`, `=`, or `>>=`) by column.\nOur second step is that of transposing a
  list of `Line = [(Column, Token)]`\ninto per-column list of indentations `[(Line,
  Token)]`.\n\n(3) If any token is present after more than a single space, we also
  mark its beginning\nas indentation boundary.\n\n(4) After sorting columns by line
  number, we mark these columns that have a consistent\npresence along consecutive
  lines as indentation anchors.\n\n(5) Additionally we mark the leftmost indent as
  a same indentation barrier\nas long as it follows the nesting order.\n\n(6) For
  postprocessing, we escape the text according to target text processing\nengine syntax,
  translate common operators to their ligatures (see appendix),\nand output the text
  with layout boundaries.\n\nWe also plan to implement support for pointing to code
  fragments\nwith TikZ target marks[@tikz] at this stage^[With syntax of `{->p1-}`
  standing for `\\tikzmark{p1}`].\n\nWe also give user an option to align code fragments
  without regards for operators,\nin case the source programming language is not yet
  supported.\n\n## Integration\n\nThis solution is provided as a `pandoc`[@pandoc]
  filter so that it is integrated\ninto standard Markdown-based processing engines
  with its numerous plugins\nthat allow inclusion of GraphViz graphs, tables from
  `.csv` content\nor citation referencing.\n\n# Examples\n\n## Layout\n\nThe example
  input is here:\n```{.haskell}\nclass Eq      a\n   => Compare a where\n  compare
  :: a -> a -> Ordering\n  (>=)    :: a -> a -> Bool\n```\n\nAfter splitting input
  sections into separated code blocks\nand further by `\\n\\n` markers, we get the
  following layout boundaries\ndetected.\n\n```\ncl.ass |Eq  .   . |a.\n  . => |Comp.are.
  |a. wh.er.e\n  |comp.are |:: |a. |-> |a |-> |Ordering\n  |(>=).    |:: |a. |-> |a
  |-> |Bool\n```\nHere `|` marks an indentation boundary in a given line and column,
  whereas `.` is filler (no marker) to keep the columns indented.\n\nFirst you sort
  by column (`Data.List.sortBy`), then within each column (`Data.List.groupBy`)\nyou
  compare token type that starts there.\nAs a result we see the following list of
  column boundaries^[Counting from column 1 and line 1.]:\n```{.haskell}\n[(3 -- column\n
  ,[3,4]) -- lines where it applies\n (7, -- column\n ,[1,2]) -- lines where it applies\n,(11\n
  ,[3,4])\n,(14\n ,[3,4])\n,(15\n ,[1,2])\n,(16,\n  [3,4])\n,(18,\n  [3,4])\n,(21,\n
  \ [3,4])\n]\n```\n\nAnother example input follows, to illustrate that we only take
  account\nof tokens that start after at least one space:\n\n```haskell\n(\\x -> x)\n```\nThe
  following detection would be **wrong**:\n```\n|(|\\|x |-|> |x)\n```\nInstead we
  detect layout boundaries as follows:\n```\n(\\x |-> |x)\n```\n\n## Generating \\LaTeX{}
  or HTML output\n\nWhen generating \\LaTeX{} or HTML output, we simply\nassign a
  list of columns to each span of code tex in line.\nThis can be implemented using
  multicolumn marking in both output languages.\nConsider the above example with columns
  numbered at starting character:\n\n```\ncl.ass |Eq  .   . |a.\n  . => |Comp.are.
  |a. wh.er.e\n  |comp.are |:: |a. |-> |a |-> |Ordering\n  |(>=).    |:: |a. |-> |a
  |-> |Bool\n  1    2    3   4 5 6   7  8   9\n```\nAlignment assignment is here:\n```\ncl.ass
  >Eq  .   . |a.\n  . => >Comp.are. |a. wh.er.e\n  |comp.are |:: |a. |-> |a |-> ^Ordering\n
  \ |(>=).    |:: |a. |-> |a |-> ^Bool\n```\nNote the use of `>` instead of `|` at
  the boundary of right aligned block.\nWe also use `^` at the right boundary of center-aligned.\n\nThat
  means that we produce code like this for the first line:\n```latex\n\\multicolumn{2}{r}{class}\n\\multicolumn{2}{l}{Eq}\n\\multicolumn{6}{l}{a}\n```\nGeneral
  syntax of\n`\\multicolumn`^[See [Overleaf tutorial](https://www.overleaf.com/learn/latex/tables#Combining_rows_and_columns)\nif
  you do not know how \\LaTeX{} tables work.] has three arguments, each enclosed with
  braces (`{}`):\n1. Number of columns in the cell, for example `{2}` or `{6}`.\n2.
  Alignment of text in the cell:\n    - `{l}` for left,\n    - `{r}` right,\n    -
  `{c}` for centered.\n3. The text in the cell. For example `{class}`\n\nFirst two
  columns end at `>`. So `\\multicolumn` has parameter `{2}` to indicate that the
  cell spans two columns (just like [`colspan=\"2\"` in HTML](https://www.w3schools.com/tags/att_td_colspan.asp).)\n`Eq
  ` spans another two columns (3rd and 4th column) so again it is parameter `{2}`.\n\nYou
  basically compute column span this way:\n* Start a new column with `colspan=1` for
  other column markers (`<` and `|`)\n* Add `+1` to the current column span for every
  `.`.\n\nThe third column would have code like this:\n```latex\n\\multicolumns{1}{l}{
  }\n\\multicolumn{2}{l}{compare}\n\\multicolumn{1}{c}{::}\n\\multicolumn{2}{l}{a}\n\\multicolumn{1}{c}{->}\n\\multicolumn{1}{l}{a}\n\\multicolumn{1}{c}{->}\n\\multicolumn{1}{l}{Ordering}\n```\nThat
  is the `class` takes columns 0 and 1,\n`Eq` takes columns 2 and 3, and `a` goes
  from column 4 til the end in column 10.\n\nThis can be easily converted to HTML
  table:\n```\n<td colspan=\"2\" style=\"text-align:right\">class</td>\n<td colspan=\"2\"
  style=\"text-align:left\" >Eq</td>\n<td colspan=\"2\" style=\"text-align:left\"
  >a</td>\n```\n## Pandoc filter interface\n\nMain executable is a `pandoc` filter.\nYou
  get `pandoc` input stream, and replace\n[`CodeBlock` blocks](https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Definition.html#t:Block)\nthere
  with `Raw \"latex\"` \\LaTeX{} blocks.  It is these block elements of ADT that should
  contain the \\LaTeX{} code\nPandoc will build the document for you, and do it better
  than you would.\nBelow is a modified [example from `pandoc` documentation](https://texblog.org/2012/12/21/multi-column-and-multi-row-cells-in-latex-tables/)\nfor
  making a `pandoc` filter executable:\n\n```{.haskell}\nmodule Main where\n\nimport
  Text.Pandoc.JSON\n\nmain :: IO ()\nmain = toJSONFilter blockFormatter\n\nblockFormatter
  :: Block -> Block\nblockFormatter (CodeBlock attrs content) | isHaskell attrs =\n
  \ haskellCodeFormatter :: Text -> Text\n  Raw \"latex\" $ haskellCodeFormatter content\nblockFormatter
  \ x = x\n```\n\nIn the executable above, you write `haskellCodeFormatter` function\nthat
  takes Haskell code, and returns \\LaTeX{} code _fragment_ like this:\n\n```{.latex}\n\\begin{array}\n\\multicol{2}{..}\n\\end{array}\n```\n\n##
  Deciding between output formats\n\nWe need to check Pandoc meta before issuing `walk`\nin
  order to check what is the output format.\nIn case it is \\LaTeX{} or PDF, then
  we produce \\LaTeX{} raw code fragments.\nIn case output format is any other, then
  we produce HTML table.\n\n## Passing options to the filter\n\nThere are three ways
  that `pandoc` filter should accept the options:\n\n1. On the command line `--debug`.\n2.
  As `pandoc` metadata elements\n   ([`YAML`](https://en.wikipedia.org/wiki/YAML)\n
  \   [at the start of the document](https://pandoc.org/MANUAL.html#extension-yaml_metadata_block)):\n
  \   ` pandoc-filter-indent: debug=true`\n3. As attributes of the code block: ` ```{.haskell
  debug=true}`\n\nAll options should be available through all three option channels.\nSee
  tutorial on `optparse-applicative` to define CLI options.\nTo allow `YAML` option
  definition, add `FromJSON` instance.\nFor concatenating options from different sources
  use\nthis [tutorial on option merging](https://chrispenner.ca/posts/hkd-options).\n\nThere
  are following options that will be processed:\n\n* `lexer` -- select a language
  lexer:\n  - `haskell` -- default lexer, GHC\n  - `indent`  -- indent only lexer:
  table column starts when whitespace characters at beginning of the line ends\n  -
  `spaces`  -- space-only lexer: table column starts at the end of block of two or
  more whitespace characters\n  - `python3` -- Python lexer (see below in @sec:python-lexer)\n*
  `debug` -- add option that shows table columns (for debugging layout)\n* `underbar`
  -- do not escape `_`, but instead use \\LaTeX{}/HTML subscript til the end of the
  token:\n   `method_agile` becomes `method_{agile}` in \\LaTeX{}, `x_i_j` becomes
  `x_{i,j}` in \\LaTeX{}\n* table alignment (\\LaTeX{} output only):\n  - `array`
  -- use `array` environment, the default\n  - `polytable` -- use `polytable` environment\n*
  code alignment:\n  - center environment -- default for `array`\n  - `left` justify
  entire code environment -- for convenience when mentioning code inline.\n* output
  mode -- is selected by the `pandoc` metadata only\n  - `latex` -- `Raw \"latex\"`
  for `tex`, `pdf`, or `beamer` output\n  - `html` -- `Raw \"html\"` for `html`, `slidy`,
  `slideous`, `s5`, or `revealjs` outputs\n  - `table` -- for all other outputs we
  produce a `Table` block\n\n## Appendix: operator symbol replacement\n\nCode should
  be given a table of possible token replacements\ndepending on type of the symbol.\n\n1.
  We implement greek unicode replacements for single-character type variables:\n```\n(TypeVar
  \"a\") -> α\n```\n\n\n2. We also replace the common operators with \\LaTeX{} symbols
  commonly used for this purpose:\n\n| Input token      | \\LaTeX{} code | Rendering
  \      |\n|:-----------------|:--------------|:---------------:|\n| `Operator \"=\"`
  \  | `\\scalebox{1.7}[1]{=}`     | $\\scalebox{1.7}[1]{=}$ |\n| `Operator \"<>\"`
  \ | `\\diamond`    | $\\diamond{}$    |\n| `Operator \">=\"`  | `\\geq`        |
  $\\geq{}$        |\n| `Operator \"<=\"`  | `\\geq`        | $\\leq{}$        |\n|
  `Operator \"/=\"`  | `\\ne`         | $\\ne{}$         |\n| `Operator \"==>\"` |
  `\\Rightarrow` | $\\Rightarrow{}$ |\n| `Operator \"\\/\"`  | `\\ne`         | $\\bigvee{}$
  \    |\n| `Operator \"/\\\"`  | `\\ne`         | $\\bigwedge{}$   |\n| `Operator
  \".\"`   | `\\cdot`       | $\\cdot$         |\n| `Operator \"elem\"`| `\\in`         |
  $\\in$            |\n| `Operator \">>\"`  | `\\gg`         | $\\gg$            |\n|
  `Operator \"<<\"`  | `\\ll`         | $\\ll$            |\n| `Operator \"~=\"`  |
  `\\approx`     | $\\approx$          |\n| `Operator \"~\"`   | `\\sim`             |
  \  $\\sim$          |\n| `Operator \"<->\"` | `\\leftrightarrow` | $\\leftrightarrow{}$
  \        |\n| `Operator \">>>\"` | `\\ggg`            | $\\ggg{}$         |\n| `Operator
  \"<<<\"` | `\\lll`            | $\\lll{}$         |\n| `Operator \"||\"`  | `\\parallel`
  \      | $\\parallel{}$         |\n| `Operator \">>=\"` | `\\ne`             | $\\gg\\joinrel=$
  \        |\n| `Operator \"|>\"`  | `\\triangleright`  | $\\triangleright{}$ |\n|
  `Operator \"-<\"`  | `\\prec`           | $\\prec{}$       |\n| `Operator \"<-\"`
  \ | `\\gets`           | $\\gets{}$       |\n| `Operator \"|\"`   | `\\vert{}`         |
  $\\vert{}$       |\n| `Operator \"\\\\\"`  | `\\setminus`       | $\\setminus{}$
  \      |\n| `Var \"bottom\"`   | `\\bot`           | $\\bot$            |\n| `Var
  \"top\"`      | `\\top`              | $\\top$            |\n| `Var \"not\"`      |
  `\\neg`              | $\\neg$            |\n| `Var \"mempty\"`   | `\\emptyset{}`
  \    | $\\emptyset{}$   |\n| `Var \"forall\"`   | `\\forall{}`       | $\\forall{}$
  \  |\n\n3. For HTML we only replace these with either HTML entities that indicate
  these symbols:\n\n```\n  (Operator \">\") -> &gt;\n```\n\n*Unreplaced* content should
  be escaped.\n\nIn order to allow easy implementation we will need alternate debugging\nexecutable
  `lexer` that will just print the output of the lexer\nfrom the code on the input:\n\n```\n[Operator
  \"=\", Var \"mempty\", ...]\n```\n\nFor finding the right symbol replacements use:\n\n1.
  [Guide to lhs2TeX](https://hackage.haskell.org/package/lhs2tex-1.18/src/doc/Guide2.pdf)
  is a good reference on how to format Haskell code symbols.\n   See code examples
  laid out in this document. I expect you to find the mapping for the most commonly
  used operators:\n   - lambda sign token: `\\` shown as $\\lambda$,\n   - equals
  sign `=`,\n   - function type `->`,\n   - type sign `::`,\n   - and operators in
  standard type classes:\n     * `Control.Monad`: `>>=`, `>>`, `>=>` \n     * `Control.Alternative`:
  `<|>`\n     * `Control.Functor`: `<$>`\n     * `Control.Applicative`: `<*>`, `<$>`,
  `<*`, and `*>`\n     * `Data.Semigroup.<>` shown as $\\diamond$\n     * `Data.Ord`:
  `/=`, `>=`, `<=`, `>`, `<`\n     * `Num`: `+`, `-`, `*`, `/`,\n     * `System.FilePath`:
  `</>`, `<.>`\n     * `Test.QuickCheck`: `==>` shown as $\\Rightarrow$\n     * `Control.Arrow`:
  `>>>`, `***`, `&&&`, `<+>`, `^<<`, `<<^`, `>>^`, `^>>`\n     * `Control.Lens`: `^.`,
  `^.=`.\n     * arrow notation: `-<`, `>-`.\n   - convert single-letter type variables
  (and only type variables) to greek letters:\n     * `a` to `\\alpha` shown as $\\alpha$\n
  \    * `b` to `\\beta` shown as $\\beta$\n     * etc.\n\n2. [The Comprehensive LATEX
  Symbol List](http://tug.ctan.org/info/symbols/comprehensive/symbols-a4.pdf) is a
  good reference of \\LaTeX{} symbol names.\n   See section _3. Mathematical symbols_.\n\n##
  Formatting different token types\n\nSince we want to use `\\begin{array}` environment
  in \\LaTeX{},\nwe should encompass the token characters with different \\LaTeX{}
  operators.\n\n* variables with `\\textrm{var}`\n* type variables with `\\mathit{tyvar}`\n*
  others with `\\textrm{}` as well\n* Haskell keywords with `\\textit`\nThis mapping
  should be easily changed in a single place in code.\n\n_Please let me know if there
  is a question about any other token types!_\n\n## Formatting inline code\n\nTo format
  inline code we lookup `inline-code` in YAML metadata,\nand append it to attributes
  of each inline code fragment.\nBy default it is `haskell`.\n\n## Safe escaping\n\nIn
  order to safely escape strings, we keep token type\nnext to original token text
  over entire pipeline\nuntil rendering of code fragment as raw \\LaTeX{} or HTML:\n```{.haskell}\ntype
  Token... = (MyTok, Text, ...)\n```\n\n### Pandoc filter connection\n\nUsing [`Text.Pandoc.Walk`](https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Walk.html)\ninterface
  we can easily implement the filter.\n\nFilter main is a function like:\n```{.haskell}\nimport
  Text.Pandoc.JSON\nimport Text.Pandoc.Walk\n\nmain :: IO ()\nmain = toJSONFilter
  (ourPandocWalk :: Walkable [a] Pandoc => ToJSONFilter (a -> IO [a])\n```\n\nThen
  we make `ourPandocWalk` to be a function that:\n\n1. Matches [`Meta`](https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Definition.html#t:Meta)\nto
  check if we are targetting \\LaTeX{} or HTML.\n2. Finds [`CodeBlock`](https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Definition.html#t:Block)
  and leaves everything else as-is.\n3. Generates `\\table` as [`RawBlock`](https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Definition.html#t:Block)\n
  \  of \\LaTeX{} output.\n\nOptions **shall** be parsed **per `CodeBlock`**.\nFirst
  parameter to each `CodeBlock` are attributes ([`Attr`](https://hackage.haskell.org/package/pandoc-types-1.20/docs/Text-Pandoc-Definition.html#t:Attr)).\nThese
  attributes should be parsed as options\n\n#### Option attributes\n\nPer-`CodeBlock`
  attributes to be handled:\n* `lexer=indent` or `lexer=haskell`\n* ignore `CodeBlock`
  that does not have attribute:\n  - `lexer=`\n  - or `.haskell`\n\nGlobal `Meta`
  attributes to be handled:\n* output format:\n  - \\LaTeX{} or PDF -- produce \\LaTeX{}
  `RawBlock`\n  - HTML -- produce HTML `RawBlock`\n  - or all others -- produce `Table`\n\n###
  TikZ marks\n\nTikZ marks are useful for pointing to fragments of the generated code.\n\nYou
  should just look for comments with syntax:\n`{->markName-}` and convert them to
  a raw\n\\LaTeX{} string `\\tikzmark{markName}`.\n\nFor HTML, it generates `<span
  id=\"markName\" />` which you\ncan then draw to with [a convenient JavaScript](https://stackoverflow.com/questions/554167/drawing-arrows-on-an-html-page-to-visualize-semantic-links-between-textual-spans#623770).\n\n###
  Alternate lexers\n\nPlease note that using alternate lexers\ndisables token replacement!\nThis
  is important, since the token replacement\nto \\LaTeX{} special symbols is language-specific.\n\n####
  Indent only\n\nIndent only is simplest to implement,\njust start a column after
  initial whitespace in each line ends.\n\n#### Space only\n\nThere should be an option
  to use alternate lexer.\nIt is driven solely by indentation.\n\n1. Cell break is
  delimited by a starting indent.\n2. Or column of **consecutive** spaces that occur
  in more than one line,\n   **and** at least one line has at least **one more** space
  before it.\n\nExample input:\n```{.python}\n# n is size of heap\ndef heapify(arr,
  n, i):\n    largest = i  # Initialize largest as root\n    l = 2 * i + 1     # left
  = 2*i + 1\n    r = 2 * i + 2     # right = 2*i + 2\n```\n\nExample column division:\n```\n#
  n is size of heap\ndef |heapify(arr, n, i).:\n    |largest = i  # Ini.tialize largest
  as root\n    |l = 2 * i + 1     |# left = 2*i + 1\n    |r = 2 * i + 2     |# right
  = 2*i + 2\n```\n\nFor highlighting we will later connect [`skylighting`](https://hackage.haskell.org/package/skylighting)\nlike
  Pandoc does natively.\n\n#### Python3 lexer {#sec:python-lexer}\n\nVery easy to
  support, just add package [`language-python`](https://hackage.haskell.org/package/language-python-0.5.6/docs/Language-Python-Version3-Lexer.html)
  to dependencies.\nThe token type is different, but we only ever compare it by equality.
  \ \n\n# Used tools\n\n## Finding Haskell tokens\n\nWe find Haskell tokens with GHC-lib
  that uses GHC parser itself.\nFor simplicity we use [`ghc-syntax-highlighter`](https://hackage.haskell.org/package/ghc-syntax-highlighter-0.0.6.0/docs/GHC-SyntaxHighlighter.html)\nWe
  readd locations after the fact, since it gives you pure tokens with text and spaces,\nor
  pure locations (without text).\n\n```\ntokenizeHaskell :: Text -> Maybe [(Token,
  Text)]\n```\n\n## \\LaTeX{} output\n\nFor escaping text in TeX we use [HaTeX](http://hackage.haskell.org/package/HaTeX-3.5/docs/Text-LaTeX-Base-Render.html#t:Render)[@hatex]\n\nWe
  render tables inline tables with `multicolumn` (not `polytable` like lhs2TeX[@lhs2tex]
  does.)\n\nWe do not use [HaTeX table support](https://hackage.haskell.org/package/HaTeX-3.22.2.0/docs/Text-LaTeX-Packages-Multirow.html)
  yet.\n\n## Debugging\n\nPandoc can automatically detect output format.\nIn order
  to get \\LaTeX{} and HTML output just run:\n\n```sh\npandoc input.md --filter=pandoc-filter-indent
  -o output.tex\npandoc input.md --filter=pandoc-filter-indent -o output.pdf\n```\n\nFor
  debugging indentation use `text` output format:\n```\npandoc input.md --filter=pandoc-filter-indent
  -o output.txt\n```\nIn text mode, it renders indent boundaries as `|` and `^`.\n\nNote
  that the filter *does not* touch the text outside code blocks.\nIt can add necessary
  \\LaTeX{} headers or HTML styles in meta `headers-include`.\n"
description-type: markdown
hash: a722f981324715f3ff3e39a59f67f075529c274fe56480c2303d20c361a90463
homepage: https://github.com/mgajda/pandoc-filter-indent#readme
latest: 0.3.2.0
license-name: BSD-3-Clause
maintainer: mjgajda@migamake.com
synopsis: Pandoc filter formatting Haskell code fragments using GHC lexer.
test-bench-deps:
  HaTeX: '>=0'
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  blaze-html: '>=0'
  blaze-markup: '>=0'
  ghc-syntax-highlighter: '>=0'
  optics-core: '>=0'
  optics-th: '>=0'
  pandoc-filter-indent: '>=0'
  pandoc-types: '>=0'
  quickcheck-text: '>=0'
  skylighting: '>=0'
  text: '>=0'
