homepage: http://github.com/jaspervdj/patat
changelog-type: markdown
hash: 9c63b1ba5d00ee0d5db0f7e2705491425961b7e666bcf05bb333fe0f0d9dd9d7
test-bench-deps:
  base: '>=4.8 && <5'
  text: '>=1.2 && <2.1'
  patat: -any
  pandoc: '>=3.1 && <3.2'
  tasty-quickcheck: '>=0.10 && <0.11'
  tasty-hunit: '>=0.10 && <0.11'
  tasty: '>=1.2 && <1.5'
  QuickCheck: '>=2.8 && <2.15'
  directory: '>=1.2 && <1.4'
maintainer: Jasper Van der Jeugt <m@jaspervdj.be>
synopsis: Terminal-based presentations using Pandoc
changelog: |
  # Changelog

  ## 0.10.1.0 (2023-10-15)

   *  Add dissolve transition effect (#150)

   *  Add random transitions (#151)

      Set transition `type` to `random` to randomly sample transition effects

  ## 0.10.0.0 (2023-10-12)

   *  Add transition effects (#149)

      This adds a framework for setting transition effects in between slides. Only
      a single transition type is implemented at this point, `slideLeft`.

      Example configuration:

          patat:
            transition:
              type: slideLeft
              frames: 24  # Optional
              duration: 1  # Seconds, optional


   *  Allow overriding certain settings in slides (#148)

      Configuration was typically done in the metadata block of the input file,
      or in a per-user configuration.  These settings are applied to the entire
      presentation.

      We now allow selectively overriding these settings on a per-slide basis,
      by adding one or more config blocks to those slides.  Config blocks are
      comments that start with `config:`.  They can be placed anywhere in the
      slide.

          # This is a normal slide

          Normal slide content

          # This slide has a different colour header

          <!--config:
          theme:
            header: [vividYellow]
          -->

          Wow, how did that happen?

   *  Allow configuring top margin (#147)

  ## 0.9.2.0 (2023-09-26)

   *  Read configuration from XDG standard directory (#146)

      The per-user patat configuration file was `$HOME/.patat.yaml`,
      which does not follow the XDG standard.  We now support
      `$XDG_CONFIG_DIRECTORY/patat/config.yaml` (typically `$XDG_CONFIG_DIRECTORY`
      is set to `$HOME/.config`) which is compliant with the standard.

      Note that `$HOME/.patat.yaml` is still supported for backward-compatibility,
      but anything in `$XDG_CONFIG_DIRECTORY` takes precedence.

   *  Support filenames in bash completion (#145) (#126)

  ## 0.9.1.0 (2023-09-25)

   *  Fall back to forcing UTF-8 if decoding fails (#144) (#127)

      When we try to read a file that is encoded in UTF-8, and the system locale
      is not set to UTF-8, the GHC runtime system will throw an error.

      While this typically indicates that the user should update their system
      locale using e.g. the `LANG` environment variable, we want to provide a good
      initial experience for people unfamiliar with this, and in 2023 it's
      reasonable to assume files may be encoded in UTF-8.

   *  Dependency updates:
       -  Bump `skylighting` upper bound to 0.15 (#143)

  ## 0.9.0.0 (2023-09-13)

   *  Add proper support for speaker notes (#142)

      You can configure `patat` to write the speaker notes for the current slide
      to a file whenever the slide changes:

          patat:
            speakerNotes:
              file: /tmp/notes.txt

      Then, you can display these in a second terminal (presumably on a second
      monitor) by just displaying this file whenever it changes.  [entr] is one
      way to do that:

          echo /tmp/notes.txt | entr -s 'clear; cat /tmp/notes.txt'

      [entr]: http://eradman.com/entrproject/

      Alternatively, just use a second `patat` instance with `--watch` enabled:

          patat -w /tmp/notes.txt

   *  Add support for showing plain text files (#141)

      This isn't super useful on its own, it's meant to support speaker notes.

   *  Add syntaxDefinitions to settings (#140)

      This allows users to add custom kate highlighting XML files in the settings:

          ---
          patat:
            syntaxDefinitions:
            - 'impurescript.xml'
          ...

          Here is some *im*purescript:

          ```impurescript
          ...
          ```

  ## 0.8.9.0 (2023-06-27)

  * Apply block quote theming to entire block (#119) (#111)
  * Fix table header theming (#128)
  * Dependency updates:
      - `aeson` to 2.1
      - `optparse-applicative` to 0.18
      - `pandoc` to 3.1
      - `pandoc-types` to 1.23
      - `text` to 2.0
      - `time` to 1.12

  ## 0.8.8.0 (2022-10-26)

  * Allow hiding slide number (contribution by Paweł Dybiec)
  * Support additional markdown extensions (contribution by Spreadcat)
  * Dependency updates:
      - `aeson` to 2.0
      - `ansi-terminal` to 0.11
      - `base64-bytestring` to 1.2
      - `bytestring` to 0.11
      - `optparse-applicative` to 1.16
      - `pandoc` to 2.19
      - `skylighting` to 0.13

  ## 0.8.7.0 (2021-03-12)

  * Fix alignment and display of CJK characters in presentation title, author
    and tables
  * Add support for showing images in Kitty terminal
  * Search in `$PATH` for `w3mimgdisplay`
  * Bump `pandoc` dependency to 2.11
  * Refactor `Patat.Presentation.Display` module to make it pure

  ## 0.8.6.1 (2020-09-18)

  * Fix issue with laziness for evaluted code blocks, they should only be
    evaluated when we actually want to show them
  * Bump stack resolver to `lts-16.9`

  ## 0.8.6.0 (2020-09-11)

  * Allow evaluating code blocks (see README for more info)
  * Refactor implementation of fragments
  * Add breadcrumbs to title based on headers
  * Error out when YAML parsing fails

  ## 0.8.5.0 (2020-06-29)

  * Bump `pandoc` dependency to 2.9
  * Switch to `goldplate` for testing

  ## 0.8.4.3 (2020-01-21)

  * Fix Haddock syntax in some comments (contribution by Asad Saeeduddin)

  ## 0.8.4.2 (2020-01-18)

  * Add builds for Mac OS
  * Refactor CircleCI config & Makefile

  ## 0.8.4.1 (2019-10-29)

  * Bump CircleCI configuration
  * Bump release script
  * Add slide seeking to `--help` output

  ## 0.8.4.0 (2019-10-09)

  * Add slide seeking (enter slide number + `enter`)
  * Fix turning tty echo off/on during presentation
  * Run `w3mimgdisplay` cleanup action, fixing image issues on some terminals

  ## 0.8.3.0 (2019-09-07)

  * Fix test failure again, and ensure that it works for multiple pandoc
    versions by slightly modifying test input
  * Include pandoc version info in `patat --version`

  ## 0.8.2.5 (2019-08-12)

  * Fix test failure caused by slightly different pandoc output for lists

  ## 0.8.2.4 (2019-08-12)

  * Bump `optparse-applicative` upper bound to 0.16
  * Bump `skylighting` upper bound to 0.9

  ## 0.8.2.3 (2019-06-25)

  * Bump upper `pandoc` dependency to 2.8

  ## 0.8.2.2 (2019-02-04)

  * Bump lower `base` dependency to 4.8

  ## 0.8.2.1 (2019-02-03)

  * Bump `pandoc` to 2.6
  * Bump `ansi-terminal` to 0.10

  ## 0.8.2.0 (2019-01-24)

  * GHC 7.8 compatibility

  ## 0.8.1.3 (2019-01-24)

  * Bump `pandoc` to 2.4
  * Bump `yaml` to 0.11

  ## 0.8.1.2 (2018-10-29)

  * Work around test failure caused by slightly different syntax highlighting
    in different pandoc versions

  ## 0.8.1.1 (2018-10-26)

  * Tickle CircleCI cache

  ## 0.8.1.0 (2018-10-26)

  * Add support for italic ansi code in themes
  * Fix centered titles not being centered (contribution by Hamza Haiken)

  ## 0.8.0.0 (2018-08-31)

  * Themed border rendering improvements (contribution by Hamza Haiken)
  * Add support for margins (contribution by Hamza Haiken)
  * Add RGB colour support for themes (contribution by Hamza Haiken)
  * Add experimental images support
  * Add images support for iTerm2 (contribution by @2mol)

  ## 0.7.2.0 (2018-05-08)

  * GHC 8.4 compatibility

  ## 0.7.1.0 (2018-05-08)

  * GHC 8.4 compatibility

  ## 0.7.0.0 (2018-05-04)

  * Support HTML-style comments

  ## 0.6.1.2 (2018-04-30)

  * Bump `pandoc` to 2.2

  ## 0.6.1.1 (2018-04-27)

  * Bump `aeson` to 1.3
  * Bump `skylighting` to 0.7
  * Bump `time` to 1.9
  * Bump `ansi-terminal` to 0.8

  ## 0.6.1.0 (2018-01-28)

  * Bump `skylighting` to 0.6
  * Bump `pandoc` to 2.1
  * Bump `ansi-terminal` to 0.7

  ## 0.6.0.1 (2017-12-24)

  * Automatically upload linux binary to GitHub

  ## 0.6.0.0 (2017-12-19)

  * Make pandoc extensions customizable in the configuration
  * Bump `pandoc` to 2.0

  ## 0.5.2.2 (2017-06-14)

  * Add `network-uri` dependency to fix travis build

  ## 0.5.2.1 (2017-06-14)

  * Bump `optparse-applicative-0.14` dependency

  ## 0.5.2.0 (2017-05-16)

  * Add navigation using `PageUp` and `PageDown`.
  * Use `skylighting` instead of deprecated `highlighting-kate` for syntax
    highlighting.

  ## 0.5.1.2 (2017-04-26)

  * Make build reproducible even if timezone changes (patch by Félix Sipma)

  ## 0.5.1.1 (2017-04-23)

  * Include `README` in `Extra-source-files` so it gets displayed on Hackage

  ## 0.5.1.0 (2017-04-23)

  * Bump `aeson-1.2` dependency
  * Fix vertical alignment of title slides
  * Fix wrapping issue with inline code at end of line
  * Add bash-completion script generation to Makefile

  ## 0.5.0.0 (2017-02-06)

  * Add a `slideLevel` option & autodetect it.  This changes the way `patat`
    splits slides.  For more information, see the `README` or the `man` page.
    If you just want to get the old behavior back, just add:

          ---
          patat:
            slideLevel: 1
          ...

      To the top of your presentation.

  * Clear the screen when finished with the presentation.

  ## 0.4.7.1 (2017-01-22)

  * Bump `directory-1.3` dependency
  * Bump `time-1.7` dependency

  ## 0.4.7.0 (2017-01-20)

  * Bump `aeson-1.1` dependency
  * Parse YAML for settings using `yaml` instead of pandoc
  * Clarify watch & autoAdvance combination in documentation.

  ## 0.4.6.0 (2016-12-28)

  * Redraw the screen on unknown commands to prevent accidental typing from
    showing up.
  * Make the cursor invisible during the presentation.
  * Move the footer down one more line to gain some screen real estate.

  ## 0.4.5.0 (2016-12-05)

  * Render the date in a locale-independent manner (patch by Daniel
    Shahaf).

  ## 0.4.4.0 (2016-12-03)

  * Force the use of UTF-8 when generating the man page.

  ## 0.4.3.0 (2016-12-02)

  * Use `SOURCE_DATE_EPOCH` if it is present instead of getting the date from
    `git log`.

  ## 0.4.2.0 (2016-12-01)

  * Fix issues with man page generation on Travis.

  ## 0.4.1.0 (2016-12-01)

  * Fix compatibility with `pandoc-1.18` and `pandoc-1.19`.
  * Add a man page.

  ## 0.4.0.0 (2016-11-15)

  * Add configurable auto advancing.
  * Support fragmented slides.

  ## 0.3.3.0 (2016-10-31)

  * Add a `--version` flag.
  * Add support for `pandoc-1.18` which includes a new `LineBlock` element.

  ## 0.3.2.0 (2016-10-20)

  * Keep running even if errors are encountered during reload.

  ## 0.3.1.0 (2016-10-18)

  * Fix compilation with `lts-6.22`.

  ## 0.3.0.0 (2016-10-17)

  * Add syntax highlighting support.
  * Fixed slide clipping after reload.

  ## 0.2.0.0 (2016-10-13)

  * Add theming support.
  * Fix links display.
  * Add support for wrapping.
  * Allow org mode as input format.

  ## 0.1.0.0 (2016-10-02)

  * Upload first version from hotel wifi in Kalaw.
basic-deps:
  bytestring: '>=0.10 && <0.12'
  ansi-wl-pprint: '>=0.6 && <1.1'
  base: '>=4.9 && <5'
  time: '>=1.6 && <1.13'
  base64-bytestring: '>=1.0 && <1.3'
  unordered-containers: '>=0.2 && <0.3'
  text: '>=1.2 && <2.1'
  patat: -any
  doctemplates: '>=0.8 && <0.12'
  filepath: '>=1.4 && <1.5'
  process: '>=1.6 && <1.7'
  network: '>=2.6'
  async: '>=2.2 && <2.3'
  pandoc-types: '>=1.23 && <1.24'
  containers: ==0.6.*
  terminal-size: '>=0.3 && <0.4'
  ansi-terminal: '>=0.6 && <1.1'
  pandoc: ==3.1.*
  skylighting: '>=0.10 && <0.15'
  wcwidth: '>=0.0 && <0.1'
  network-uri: '>=2.6'
  mtl: '>=2.2 && <2.4'
  colour: '>=2.3 && <2.4'
  optparse-applicative: '>=0.16 && <0.19'
  random: '>=1.2 && <1.3'
  aeson: '>=2.0 && <2.2'
  yaml: '>=0.8 && <0.12'
  vector: '>=0.13 && <0.14'
  directory: '>=1.2 && <1.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.4.0.0
- 0.4.2.0
- 0.4.3.0
- 0.4.4.0
- 0.4.5.0
- 0.4.6.0
- 0.4.7.0
- 0.4.7.1
- 0.5.0.0
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.2.0
- 0.5.2.1
- 0.5.2.2
- 0.6.0.0
- 0.6.1.0
- 0.6.1.1
- 0.7.0.0
- 0.7.2.0
- 0.8.0.0
- 0.8.1.1
- 0.8.1.2
- 0.8.1.3
- 0.8.2.0
- 0.8.2.1
- 0.8.2.2
- 0.8.2.3
- 0.8.2.4
- 0.8.2.5
- 0.8.3.0
- 0.8.4.0
- 0.8.4.3
- 0.8.5.0
- 0.8.6.0
- 0.8.6.1
- 0.8.7.0
- 0.8.8.0
- 0.8.9.0
- 0.9.0.0
- 0.9.2.0
- 0.10.0.0
- 0.10.1.0
author: Jasper Van der Jeugt <m@jaspervdj.be>
latest: 0.10.1.0
description-type: markdown
description: "\U0001F954 patat\n========\n\n![CI](https://github.com/jaspervdj/patat/workflows/CI/badge.svg)
  [![Hackage](https://img.shields.io/hackage/v/patat.svg)](https://hackage.haskell.org/package/patat)
  [![GitHub tag](https://img.shields.io/github/tag/jaspervdj/patat.svg)]()\n\n`patat`
  (**P**resentations **A**top **T**he **A**NSI **T**erminal) is a\nfeature-rich presentation
  tool that runs in the terminal.\n\n- Understands most markdown extensions and many
  other input formats\n  (rST, Org-mode...) by building on top of [Pandoc].\n- [Evaluate
  code snippets and show the result](#evaluating-code).\n- Syntax highlighting for
  nearly one hundred languages generated from [Kate]\n  syntax files.\n- [Automatically
  reload](#running) your slides as you edit them.\n- Display [speaker notes](#speaker-notes)
  in a second window or monitor.\n- [Incremental slide display](#fragmented-slides).\n-
  Experimental [images](#images) support.\n- [Transition effects](#transitions).\n-
  Supports [smart slide splitting](#input-format).\n- [Auto advancing](#auto-advancing)
  with configurable delay.\n- Optionally [re-wrapping](#line-wrapping) text to terminal
  width with proper\n  indentation.\n- [Theming](#theming) support including 24-bit
  RGB.\n- Hihgly portable as it only requires an ANSI terminal as opposed to\n  something
  like `ncurses`.\n\n![screenshot](extra/demo.gif?raw=true)\n\n[Kate]: https://kate-editor.org/\n[Pandoc]:
  http://pandoc.org/\n\nTable of Contents\n-----------------\n\n-   [Table of Contents](#table-of-contents)\n-
  \  [Installation](#installation)\n    -   [Pre-built-packages](#pre-built-packages)\n
  \   -   [Homebrew](#homebrew)\n    -   [From source](#from-source)\n-   [Running](#running)\n-
  \  [Options](#options)\n-   [Controls](#controls)\n-   [Input format](#input-format)\n-
  \  [Configuration](#configuration)\n    -   [Line wrapping](#line-wrapping)\n    -
  \  [Margins](#margins)\n    -   [Auto advancing](#auto-advancing)\n    -   [Advanced
  slide splitting](#advanced-slide-splitting)\n    -   [Fragmented slides](#fragmented-slides)\n
  \   -   [Theming](#theming)\n    -   [Syntax Highlighting](#syntax-highlighting)\n
  \   -   [Pandoc Extensions](#pandoc-extensions)\n    -   [Images](#images)\n    -
  \  [Breadcrumbs](#breadcrumbs)\n    -   [Slide numbers](#slide-numbers)\n    -   [Evaluating
  code](#evaluating-code)\n    -   [Speaker notes](#speaker-notes)\n    -   [Transitions](#transitions)\n-
  \  [Trivia](#trivia)\n\nInstallation\n------------\n\n### Pre-built-packages\n\n-
  Archlinux: <https://aur.archlinux.org/packages/patat-bin>\n- Debian: <https://packages.debian.org/unstable/patat>\n-
  Ubuntu: <https://packages.ubuntu.com/bionic/patat>\n- openSUSE: <https://build.opensuse.org/package/show/openSUSE:Factory:ARM/patat>\n-
  Fedora: <https://src.fedoraproject.org/rpms/patat>\n- NixOS: <https://search.nixos.org/packages?show=haskellPackages.patat>\n\nYou
  can also find generic Linux and Mac OS binaries here:\n<https://github.com/jaspervdj/patat/releases>.\n\n###
  Homebrew\n\nHomebrew packages are offered by a third-party repository:\n\n1. Install
  [Homebrew] for your platform.\n2. Run `brew tap nicholasdille/tap`.\n3. Run `brew
  install patat-bin` to receive the official binaries or\n   `brew install patat`
  for pre-built (\"bottled\") binaries.\n\n[Homebrew]: https://brew.sh/\n\nFor issues
  and feedback please refer to [nicholasdille/homebrew-tap].\n\n[nicholasdille/homebrew-tap]:
  https://github.com/nicholasdille/homebrew-tap\n\n### From source\n\nInstallation
  from source is very easy.  You can build from source using `stack\ninstall` or `cabal
  install`.  `patat` is also available from [Hackage].\n\n[Hackage]: https://hackage.haskell.org/package/patat\n\nFor
  people unfamiliar with the Haskell ecosystem, this means you can do either\nof the
  following:\n\n#### Using stack\n\n1. Install [stack] for your platform.\n2. Clone
  this repository.\n3. Run `stack setup` (if you're running stack for the first time)
  and\n   `stack install`.\n4. Make sure `$HOME/.local/bin` is in your `$PATH`.\n\n[stack]:
  https://docs.haskellstack.org/en/stable/README/\n\n#### Using cabal\n\n1. Install
  [cabal] for your platform.\n2. Run `cabal install patat`.\n3. Make sure `$HOME/.cabal/bin`
  is in your `$PATH`.\n\n[cabal]: https://www.haskell.org/cabal/\n\nRunning\n-------\n\n`patat
  [*options*] file`\n\nOptions\n-------\n\n`-w`, `--watch`\n\n:   If you provide the
  `--watch` flag, `patat` will watch the presentation file\n    for changes and reload
  automatically.  This is very useful when you are\n    writing the presentation.\n\n`-f`,
  `--force`\n\n:   Run the presentation even if the terminal claims it does not support
  ANSI\n    features.\n\n`-d`, `--dump`\n\n:   Just dump all the slides to stdout.
  \ This is useful for debugging.\n\n`--version`\n\n:   Display version information.\n\nControls\n--------\n\n-
  **Next slide**: `space`, `enter`, `l`, `→`, `PageDown`\n- **Previous slide**: `backspace`,
  `h`, `←`, `PageUp`\n- **Go forward 10 slides**: `j`, `↓`\n- **Go backward 10 slides**:
  `k`, `↑`\n- **First slide**: `0`\n- **Last slide**: `G`\n- **Jump to slide N**:
  `N` followed by `enter`\n- **Reload file**: `r`\n- **Quit**: `q`\n\nThe `r` key
  is very useful since it allows you to preview your slides while you\nare writing
  them.  You can also use this to fix artifacts when the terminal is\nresized.\n\nInput
  format\n------------\n\nThe input format can be anything that Pandoc supports.  Plain
  markdown is\nusually the most simple solution:\n\n```markdown\n---\ntitle: This
  is my presentation\nauthor: Jane Doe\n...\n\n# This is a slide\n\nSlide contents.
  \ Yay.\n\n---\n\n# Important title\n\nThings I like:\n\n- Markdown\n- Haskell\n-
  Pandoc\n```\n\nHorizontal rulers (`---`) are used to split slides.\n\nHowever, if
  you prefer not use these since they are a bit intrusive in the\nmarkdown, you can
  also start every slide with a header.  In that case, the file\nshould not contain
  a single horizontal ruler.\n\n`patat` will pick the most deeply nested header (e.g.
  `h2`) as the marker for a\nnew slide.  Headers _above_ the most deeply nested header
  (e.g. `h1`) will turn\ninto title slides, which are displayed as as a slide containing
  only the\ncentered title.\n\nThis means the following document is equivalent to
  the one we saw before:\n\n```markdown\n---\ntitle: This is my presentation\nauthor:
  Jane Doe\n...\n\n# This is a slide\n\nSlide contents.  Yay.\n\n# Important title\n\nThings
  I like:\n\n- Markdown\n- Haskell\n- Pandoc\n```\n\nAnd that following document contains
  three slides: a title slide, followed by\ntwo content slides.\n\n```markdown\n---\ntitle:
  This is my presentation\nauthor: Jane Doe\n...\n\n# Chapter 1\n\n## This is a slide\n\nSlide
  contents.  Yay.\n\n## Another slide\n\nThings I like:\n\n- Markdown\n- Haskell\n-
  Pandoc\n```\n\nFor more information, see [Advanced slide splitting](#advanced-slide-splitting).\n\nConfiguration\n-------------\n\n`patat`
  is fairly configurable.  The configuration is done using [YAML].  There\nare several
  places where you can put your configuration.\n\n1.  For per-user configuration you
  can use\n    `$XDG_CONFIG_DIRECTORY/patat/config.yaml`\n    (typically `$HOME/.config/patat/config.yaml`)
  or `$HOME/.patat.yaml`, for\n    example:\n\n    ```yaml\n    slideNumber: false\n
  \   ```\n\n2.  In the presentation file itself, using the [Pandoc metadata header].\n
  \   These settings take precedence over anything specified in the per-user\n    configuration
  file.  They must be placed in a `patat:` section, so they\n    don't conflict with
  metadata:\n\n    ```markdown\n    ---\n    title: Presentation with options\n    author:
  John Doe\n    patat:\n        slideNumber: false\n    ...\n\n    Hello world.\n
  \   ```\n\n3.  Within a slide, using a comment starting with `<!--config:`.  These\n
  \   settings can override configuration for that specific slide only.\n    There
  should not be any whitespace between `<!--` and `config:`.\n\n    ```markdown\n
  \   # First slide\n\n    Slide numbers are turned on here.\n\n    # Second slide\n\n
  \   <!--config:\n    slideNumber: false\n    -->\n\n    Slide numbers are turned
  off here.\n    ```\n\n    The following settings can **not** be set in a slide configuration
  block,\n    and doing so will result in an error:\n\n     -  `autoAdvanceDelay`\n
  \    -  `eval`\n     -  `images`\n     -  `incrementalLists`\n     -  `pandocExtensions`\n
  \    -  `slideLevel`\n     -  `speakerNotes`\n\n[YAML]: http://yaml.org/\n[Pandoc
  metadata header]: http://pandoc.org/MANUAL.html#extension-yaml_metadata_block\n\n###
  Line wrapping\n\nLine wrapping can be enabled by setting `wrap: true` in the configuration.
  \ This\nwill re-wrap all lines to fit the terminal width better.\n\n### Margins\n\nMargins
  can be enabled by setting a `margins` entry in the configuration:\n\n```markdown\n---\ntitle:
  Presentation with margins\nauthor: John Doe\npatat:\n    wrap: true\n    margins:\n
  \       left: 10\n        right: 10\n        top: 5\n...\n\nLorem ipsum dolor sit
  amet, ...\n```\n\nThis example configuration will generate slides with a margin
  of 10 columns on\nthe left, and it will wrap long lines 10 columns before the right
  side of the\nterminal.  Additionally, there will be 5 empty lines in between the
  title bar\nand slide content.\n\n[Line wrapping](#line-wrapping) should be enabled
  when using non-zero `right`\nmargin.\n\nBy default, the `left` and `right` margin
  are set to 0, and the `top` margin is\nset to 1.\n\n### Auto advancing\n\nBy setting
  `autoAdvanceDelay` to a number of seconds, `patat` will automatically\nadvance to
  the next slide.\n\n```markdown\n---\ntitle: Auto-advance, yes please\nauthor: John
  Doe\npatat:\n    autoAdvanceDelay: 2\n...\n\nHello World!\n\n---\n\nThis slide will
  be shown two seconds after the presentation starts.\n```\n\nNote that changes to
  `autoAdvanceDelay` are not picked up automatically if you\nare running `patat --watch`.
  \ This requires restarting `patat`.\n\n### Advanced slide splitting\n\nYou can control
  the way slide splitting works by setting the `slideLevel`\nvariable.  This variable
  defaults to the least header that occurs before a\nnon-header, but it can also be
  explicitly defined.  For example, in the\nfollowing document, the `slideLevel` defaults
  to **2**:\n\n```markdown\n# This is a slide\n\n## This is a nested header\n\nThis
  is some content\n```\n\nWith `slideLevel` 2, the `h1` will turn into a \"title slide\",
  and the `h2` will\nbe displayed at the top of the second slide.  We can customize
  this by setting\n`slideLevel` manually:\n\n```markdown\n---\npatat:\n  slideLevel:
  1\n...\n\n# This is a slide\n\n## This is a nested header\n\nThis is some content\n```\n\nNow,
  we will only see one slide, which contains a nested header.\n\n### Fragmented slides\n\nBy
  default, slides are always displayed \"all at once\".  If you want to display\nthem
  fragment by fragment, there are two ways to do that.  The most common\ncase is that
  lists should be displayed incrementally.\n\nThis can be configured by settings `incrementalLists`
  to `true` in the metadata\nblock:\n\n```markdown\n---\ntitle: Presentation with
  incremental lists\nauthor: John Doe\npatat:\n    incrementalLists: true\n...\n\n-
  This list\n- is displayed\n- item by item\n```\n\nSetting `incrementalLists` works
  on _all_ lists in the presentation.  To flip\nthe setting for a specific list, wrap
  it in a block quote.  This will make the\nlist incremental if `incrementalLists`
  is not set, and it will display the list\nall at once if `incrementalLists` is set
  to `true`.\n\nThis example contains a sublist which is also displayed incrementally,
  and then\na sublist which is displayed all at once (by merit of the block quote).\n\n```markdown\n---\ntitle:
  Presentation with incremental lists\nauthor: John Doe\npatat:\n    incrementalLists:
  true\n...\n\n- This list\n- is displayed\n\n    * item\n    * by item\n\n- Or sometimes\n\n
  \   > * all at\n    > * once\n```\n\nAnother way to break up slides is to use a
  pagraph only containing three dots\nseparated by spaces.  For example, this slide
  has two pauses:\n\n```markdown\nLegen\n\n. . .\n\nwait for it\n\n. . .\n\nDary!\n```\n\n###
  Theming\n\nColors and other properties can also be changed using this configuration.
  \ For\nexample, we can have:\n\n```markdown\n---\nauthor: 'Jasper Van der Jeugt'\ntitle:
  'This is a test'\npatat:\n    wrap: true\n    theme:\n        emph: [vividBlue,
  onVividBlack, italic]\n        strong: [bold]\n        imageTarget: [onDullWhite,
  vividRed]\n...\n\n# This is a presentation\n\nThis is _emph_ text.\n\n![Hello](foo.png)\n```\n\nThe
  properties that can be given a list of styles are:\n\n`blockQuote`, `borders`, `bulletList`,
  `codeBlock`, `code`, `definitionList`,\n`definitionTerm`, `emph`, `header`, `imageTarget`,
  `imageText`, `linkTarget`,\n`linkText`, `math`, `orderedList`, `quoted`, `strikeout`,
  `strong`,\n`tableHeader`, `tableSeparator`, `underline`\n\nThe accepted styles are:\n\n`bold`,
  `italic`, `dullBlack`, `dullBlue`, `dullCyan`, `dullGreen`,\n`dullMagenta`, `dullRed`,
  `dullWhite`, `dullYellow`, `onDullBlack`,\n`onDullBlue`, `onDullCyan`, `onDullGreen`,
  `onDullMagenta`, `onDullRed`,\n`onDullWhite`, `onDullYellow`, `onVividBlack`, `onVividBlue`,
  `onVividCyan`,\n`onVividGreen`, `onVividMagenta`, `onVividRed`, `onVividWhite`,
  `onVividYellow`,\n`underline`, `vividBlack`, `vividBlue`, `vividCyan`, `vividGreen`,\n`vividMagenta`,
  `vividRed`, `vividWhite`, `vividYellow`\n\nAlso accepted are styles of the form
  `rgb#RrGgBb` and `onRgb#RrGgBb`, where `Rr`\n`Gg` and `Bb` are hexadecimal bytes
  (e.g. `rgb#f08000` for an orange foreground,\nand `onRgb#101060` for a deep purple
  background).  Naturally, your terminal\nneeds to support 24-bit RGB for this to
  work.  When creating portable\npresentations, it might be better to stick with the
  named colours listed above.\n\n### Syntax Highlighting\n\n`patat` uses [Kate] Syntax
  Highlighting files.  `patat` ships with support for\nnearly one hundred languages
  thanks to Pandoc.  However, if your language is\nnot yet available, you can add
  the highlighting XML file in the settings:\n\n```markdown\n---\npatat:\n  syntaxDefinitions:\n
  \ - 'impurescript.xml'\n...\n\n...\n```\n\nAs part of theming, syntax highlighting
  is also configurable.  This can be\nconfigured like this:\n\n```markdown\n---\npatat:\n
  \ theme:\n    syntaxHighlighting:\n      decVal: [bold, onDullRed]\n...\n\n...\n```\n\n`decVal`
  refers to \"decimal values\".  This is known as a \"token type\".  For a\nfull list
  of token types, see [this list] -- the names are derived from there in\nan obvious
  way.\n\n[this list]: https://hackage.haskell.org/package/highlighting-kate-0.6.3/docs/Text-Highlighting-Kate-Types.html#t:TokenType\n\nNote
  that in order to get syntax highlighting to work, you should annotate code\nblocks
  with the language, e.g. using a fenced code block:\n\n    ```ruby\n    puts \"Hello,
  world!\"\n    ```\n\n### Pandoc Extensions\n\nPandoc comes with a fair number of
  extensions on top of markdown, listed [here](https://hackage.haskell.org/package/pandoc-2.0.5/docs/Text-Pandoc-Extensions.html).\n\n`patat`
  enables a number of them by default, but this is also customizable.\n\nIn order
  to enable an additional extensions, e.g. `autolink_bare_uris`, add it\nto the `pandocExtensions`
  field in the YAML metadata:\n\n```markdown\n---\npatat:\n  pandocExtensions:\n    -
  patat_extensions\n    - autolink_bare_uris\n...\n\nDocument content...\n```\n\nThe
  `patat_extensions` in the above snippet refers to the default set of\nextensions
  enabled by `patat`.  If you want to disable those and only use a\nselect few extensions,
  simply leave it out and choose your own:\n\n```markdown\n---\npatat:\n  pandocExtensions:\n
  \   - autolink_bare_uris\n    - emoji\n...\n\n...\n\nDocument content...\n```\n\nIf
  you don't want to enable any extensions, simply set `pandocExtensions` to the\nempty
  list `[]`.\n\n\n### Images\n\n`patat-0.8.0.0` and newer include images support for
  some terminal emulators.\n\n```markdown\n---\npatat:\n  images:\n    backend: auto\n...\n\n#
  A slide with only an image.\n\n![](matterhorn.jpg)\n```\n\n`patat` can display full-size
  images on slides. For this to work `images` must be enabled in the configuration
  and the slide needs to contain only a single image and no other content. The image
  will be centered and resized to fit the terminal window.\n\n`images` is off by default
  in the configuration.\n\n`patat` supports the following image drawing backends:\n\n-
  \  `backend: iterm2`: uses [iTerm2](https://iterm2.com/)'s special escape\n    sequence
  to render the image.  This even works with animated GIFs!\n\n-   `backend: kitty`:
  uses\n    [Kitty's icat command](https://sw.kovidgoyal.net/kitty/kittens/icat.html).\n\n-
  \  `backend: w3m`: uses the `w3mimgdisplay` executable to draw directly onto\n    the
  window.  This has been tested in `urxvt` and `xterm`, but is known to\n    produce
  weird results in `tmux`.\n\n    If `w3mimgdisplay` is in a non-standard location,
  you can specify that using\n    `path`:\n\n    ```yaml\n    backend: 'w3m'\n    path:
  '/home/jasper/.local/bin/w3mimgdisplay'\n    ```\n\n### Breadcrumbs\n\nBy default,
  `patat` will print a breadcrumbs-style header, e.g.:\n\n    example.md > This is
  a title > This is a subtitle\n\nThis feature can be turned off by using:\n\n```yaml\npatat:\n
  \ breadcrumbs: false\n```\n\n### Slide numbers\n\nBy default, `patat` will display
  slide number in bottom-right corner\n\nThis feature can be turned off by using:\n\n```yaml\npatat:\n
  \ slideNumber: false\n```\n\n### Evaluating code\n\n`patat` can evaluate code blocks
  and show the result.  You can register an\n_evaluator_ by specifying this in the
  YAML metadata:\n\n    ---\n    patat:\n      eval:\n        ruby:\n          command:
  irb --noecho --noverbose\n          fragment: true  # Optional\n          replace:
  false  # Optional\n    ...\n\n    Here is an example of a code block that is evaluated:\n\n
  \   ```ruby\n    puts \"Hi\"\n    ```\n\nAn arbitrary amount of evaluators can be
  specified, and whenever a a class\nattribute on a code block matches the evaluator,
  it will be used.\n\n**Note that executing arbitrary code is always dangerous**,
  so double check the\ncode of presentations downloaded from the internet before running
  them if they\ncontain `eval` settings.\n\nAside from the command, there are two
  more options:\n\n -  `fragment`: Introduce a pause (see [fragments](#fragmented-slides))
  in\n    between showing the original code block and the output.  Defaults to `true`.\n
  -  `replace`: Remove the original code block and replace it with the output\n    rather
  than appending the output in a new code block.  Defaults to `false`.\n\nSetting
  `fragment: false` and `replace: true` offers a way to \"filter\" code\nblocks, which
  can be used to render ASCII graphics.\n\n    ---\n    patat:\n      eval:\n        figlet:\n
  \         command: figlet\n          fragment: false\n          replace: true\n
  \   ...\n\n    ```figlet\n    Fancy Font\n    ```\n\nThis feature works by simply
  by:\n\n1.  Spawn a process with the provided command\n2.  Write the contents of
  the code block to the `stdin` of the process\n3.  Wait for the process to exit\n4.
  \ Render the `stdout` of the process\n\n### Speaker Notes\n\n`patat` supports comments
  which can be used as speaker notes.\n\n```markdown\n---\ntitle: This is my presentation\nauthor:
  Jane Doe\n...\n\n# Chapter 1\n\n<!--\nNote: I should not bore the audience with
  my thoughts on powerpoint but\njust get straight to the point.\n-->\n\nSlide contents.
  \ Yay.\n\n<!-- TODO: Finish the rest of the presentation. -->\n```\n\nYou can also
  configure `patat` to write the speaker notes for the current slide\nto a file whenever
  the slide changes:\n\n```yaml\npatat:\n  speakerNotes:\n    file: /tmp/notes.txt\n```\n\nThen,
  you can display these in a second terminal (presumably on a second\nmonitor) by
  just displaying this file whenever it changes.  [entr] is one\nway to do that:\n\n[entr]:
  http://eradman.com/entrproject/\n\n```bash\necho /tmp/notes.txt | entr -s 'clear;
  cat /tmp/notes.txt'\n```\n\nAlternatively, just use a second `patat` instance with
  `--watch` enabled:\n\n```bash\npatat -w /tmp/notes.txt\n```\n\nNote that speaker
  notes should not start with `<!--config:`, since then they\nwill be parsed as [configuration](#configuration)
  blocks.  They are allowed\nto start with `<!-- config:`; the lack of whitespace
  matters.\n\n### Transitions\n\n`patat` supports transitions in between slides.  A
  relatively fast terminal\nemulator (e.g. [Alacritty], [Kitty], [iTerm2])\nis suggested
  when enabling this, to avoid too much flickering -- some\nflickering is unavoidable
  since we redraw the entire screen on each frame.\n\n```yaml\npatat:\n  transition:\n
  \   type: slideLeft\n```\n\nTo set transitions on specific slides, use `<!--config:`
  blocks, as detailed\nin the [configuration section](#configuration).  For example:\n\n```markdown\n#
  Slide one\n\nSlide one content.\n\n# Slide two\n\n<!--config:\ntransition:\n  type:
  slideLeft\n  duration: 2\n-->\n\nSlide two content.\n```\n\nSupported transitions
  `type`s:\n\n -  `slideLeft`: slides the new slide in from right to left.\n -  `dissolve`:
  changes characters over time.\n\nAll transitions currently take these arguments:\n\n
  -  `frameRate`: number of frames per second.  Defaults to 24.\n -  `duration`: duration
  of the animation in seconds.  Defaults to 1.\n\n#### Random transitions\n\nYou can
  set `type` to `random` to randomly pick a transition effect.\n\n```yaml\npatat:\n
  \ transition:\n    type: random\n    items:\n    - type: dissolve\n      duration:
  3\n    - type: slideLeft\n      frameRate: 10\n```\n\nYou can optionally set `items`
  to a non-empty list of transition effects to\nrandomly sample from.  If `items`
  is not set, `patat` will simply sample from\nall transition effects using their
  respective default settings.\n\nTrivia\n------\n\n_\"Patat\"_ is the Flemish word
  for a simple potato.  Dutch people also use it to\nrefer to French Fries but I don't
  really do that -- in Belgium we just call\nfries _\"Frieten\"_.\n\nThe idea of `patat`
  is largely based upon [MDP] which is in turn based upon\n[VTMC].  I wanted to write
  a clone using Pandoc because I ran into a markdown\nparsing bug in MDP which I could
  not work around.  A second reason to do a\nPandoc-based tool was that I would be
  able to use [Literate Haskell] as well.\nLastly, I also prefer not to install Node.js
  on my machine if I can avoid it.\n\n[MDP]: https://github.com/visit1985/mdp\n[VTMC]:
  https://github.com/jclulow/vtmc\n[Literate Haskell]: https://wiki.haskell.org/Literate_programming\n\n[Alacritty]:
  https://alacritty.org/\n[iTerm2]: https://iterm2.com/\n[Kitty]: https://sw.kovidgoyal.net/kitty/\n"
license-name: GPL-2.0-only
