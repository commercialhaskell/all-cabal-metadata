all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
author: Daniel Firth
basic-deps:
  base: '>=4.7 && <5'
  path: '>=0'
changelog: |
  # Changelog for path-like

  ## (v0.2.0.0)

  * Revert ConstraintKinds mess.

  ## (v0.1.1.0)

  * Add 'PathLike` superclass to `FileLike` and `DirLike`.

  ## (v0.1.0.0)

  * Add `FileLike` and `DirLike` type class for using stricter types as `Path b File` and `Path b Dir` respectively.
  * Add `(/>)` combinator for producing a `Path` from a `DirLike` and a `FileLike Rel`.
changelog-type: markdown
description: |
  # path-like - Type classes for the Path library.

  This library exports type classes `PathLike`, `FileLike` and `DirLike` which serve as a
  common interface for compiling types down to `Path b File` and `Path b Dir`.
  The only contract that should be respected is that your type should be at least
  as strict as the `Path` type itself, i.e no String/FilePath instances. This is
  the case with the [within](https://hackage.haskell.org/package/within) type.

  This library also exports a concatenation function `(/>)` which defers to the
  underlying `(</>)` function in `Path`, but works for any `DirLike` and
  `PathLike Rel`. This may change to shadow the existing definition if these
  classes turn out to be generally useful. They tend to be particularly useful for
  generalising file IO, but you may find you need to cast more when you first
  construct a `Path` using TemplateHaskell.

  For more information see the [path](https://hackage.haskell.org/package/path)
  library documentation.
description-type: markdown
hash: 14410b4465f09885c35d34ca16312867733b810cf3f9fa0a372feb57ebaf2fba
homepage: ''
latest: 0.2.0.2
license-name: MIT
maintainer: dan.firth@homotopic.tech
synopsis: PathLike, FileLike and DirLike type classes for the Path library.
test-bench-deps: {}
