homepage: https://github.com/j-mie6/ParsleyHaskell/tree/master/parsley-core
changelog-type: markdown
hash: f8048cafada04a2b5e413b3fc7dca7ba90a2a4a34b5ccba04c8b0c7ccbcbfc74
test-bench-deps:
  base: '>=4.10 && <5'
  containers: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  parsley-core: -any
maintainer: Jamie Willis <j.willis19@imperial.ac.uk>
synopsis: A fast parser combinator library backed by Typed Template Haskell
changelog: "# Revision history for `parsley-core`\n\n## 1.0.0.0 -- 2021-06-12\n\n*
  First version. Released on an unsuspecting world.\n* Core factored out of the main
  `parsley` package\n\n## 1.0.1.0 -- 2021-06-26\n\n* Introduced `Lam` to the API and
  conversion functions for `Core.Defunc`\n* Extra type ascriptions added to generated
  code\n\n## 1.0.1.1 -- 2021-06-27\n\n* Added input factoring to `try p <|> q` and
  also forms with `f <$> try p <|> q` and `try p $> x <|> q`\n\n## 1.1.0.0 -- 2021-07-01\n\n*
  Switched both backends to make use of `Lam` instead of `Core.Defunc`, reducing burden
  on GHC\n* Added duplication avoidance optimisation when value to be duplicated is
  `Lam.Var True`\n\n## 1.2.0.0 -- 2021-07-01\n\n* For GHC 8.10+, leveraged the static
  structure of functions:\n  * Handlers are now static functions, reducing the beta-reduction
  required by GHC, `fatal` now generates better code\n  * Return continuations are
  also static functions, reducing beta-reduction required by GHC, `halt` generates
  better code\n  * Recursive calls are also static functions, removing a lot of junk
  with the conversion from iterators to recursion\n* Registers are now bound once
  for recursive parsers, which close over their free-registers\n* Strictness has been
  updated to reflect the reduced burden on GHC to optimise: now strictness is for
  performance, and\n  not to coax GHC to optimise at the cost of performance\n* Removed
  the \"bad\" binding for `Sat`, handlers are always bound on creation, so the binding
  is basically meaningless\n* Performance on 8.10+ is anywhere from 10-20% faster
  than 1.1.0.0\n\n## 1.2.0.1 -- 2021-07-03\n\n* Added Jump-Elision optimisation to
  the code generator.\n\n## 1.3.0.0 -- 2021-07-03\n\n* Improved the `Lam` reduction
  algorithm\n* Preliminary support for `if true` reduction from `item` and `const
  True`\n* Introduced `_if` and `ap` in `Machine.Defunc`, removed `genDefunc1`\n\n##
  1.4.0.0 -- 2021-07-22\nNOTE: The API exposed to `parsley` has changed, however,
  the changed types match up\nand the underlying types are not exposed. This means
  that `parsley` cannot write\nthe type down to begin with, so the API change does
  not _actually_ result in any\nbackward incompatiblity _unless_ the `Parsley.Internal.*`
  modules are imported:\nthis meets requirements for internal major change.\n\n* Removed
  an `unsafeCoerce` from register creation, using more existentials.\n* Changed `CharList`'s
  `more` check to test for `[]` and not length (faster!)\n* Added static information
  to offset in the machine\n* Leveraged static information to refine handlers at compile
  time, offering up\n  to 20% performance improvement\n* Code restructuring and refactoring\n*
  Added copious amounts of documentation\n\n## 1.5.0.0 -- 2021-08-12\nInfrastructure
  for improved handler analysis:\n\n* Refactored `LetBinding` to include more generic
  metadata.\n* Added metadata to `StaSubroutine` and introduced `StaSubroutine#` and
  associated functions.\n* Fed metadata through `letRec`'s `genBinding` and into `buildRec`.\n*
  Added an `Amount` to `Offset`, which also takes into account a multiplicity, used
  to track unknown\n  but non-zero quantities.\n* Added `callCC` and modified the
  API for `suspend` to allow for abstracted `Offset` creation. The\n  `callCC` operation
  promises to utilise static input consumption from the subroutine to refine the\n
  \ input to the return continuation (making use of the multiplicity above).\n* Refactored
  the `CombinatorAnalyser` into an `Analysis.Cut` module (and moved `Dependencies`
  there too)\n* Refactored the `InstructionAnalyser` into an `Analysis.Coins` and
  `Analysis.Relevancy` modules\n* More documentation\n\nInput Reclamation:\n\n* Added
  `Machine.Types.Coins`, which separates coins for length checks from input reclamation.\n*
  `Analysis.Coins` now deals wiith the `Coins` type, as do the instructions.\n* Added
  `Common.RewindQueue` to handle rewindable input caching.\n* Added `Common.QueueLike`
  to abstract both queue's common operations.\n* Moved the implementation of `Queue`
  into a `Queue.Impl` submodule, for `RewindQueue` and testing.\n* Added `GiveBursary`
  instruction to implement a variant of `RefundCoins`.\n* Added `PrefetchChar` instruction
  for future prefetching on branches.\n* Added `canAfford` to `Context` and removed
  the broken `liquidate`.\n* Improved the input factoring for join points.\n\nMisc:\n\n*
  Removed the unneeded `genDefuncX` operations in `Core.Defunc`, and `ap`, hid others.\n*
  Added type to `next` in `CharList`.\n* Added auxilliary information parameter to
  `sat`.\n* Added `fetch` and broke it out of `sat`.\n\n## 1.6.0.0 -- 2021-08-13\nFix
  for issue #27\n\n* Added `BlockCoins` instruction and `CutImmune` node.\n* Changed
  how cut compliance is determined, and stopped some incorrect factoring.\n* Removed
  unneeded flags for analysis.\n\n## 1.7.0.0 -- TBD\n\n* Added fields to the handlers
  to signify if they should generate a binding or not.\n* Added two `Inliner` modules
  to handle inlining in front- and back-ends.\n* Removed field from `Let` which contains
  the body, it was a wart.\n* Refactored the internal representation of static handlers,
  making them more uniform.\n* Added basic eta-reduction capabilities to the low-level
  generators: this can be improved and expanded!\n* Renamed `buildIterAlways` and
  `buildIterSame` to `bindIterAlways` and `bindIterSame`.\n* Renamed `StaHandler`
  to `AugmentedStaHandler`\n* "
basic-deps:
  bytestring: '>=0.10.8 && <0.12'
  dependent-sum: '>=0.7.1 && <0.8'
  base: '>=4.10 && <4.16'
  unordered-containers: '>=0.2.13 && <0.3'
  text: '>=1.2.3 && <1.3'
  dependent-map: '>=0.4.0 && <0.5'
  array: '>=0.5.2 && <0.6'
  containers: '>=0.6 && <0.7'
  pretty-terminal: '>=0.1.0 && <0.2'
  ghc-prim: '>=0.5.3 && <1'
  mtl: '>=2.2.1 && <2.3'
  hashable: '>=1.2.7.0 && <1.4'
  template-haskell: '>=2.14 && <3'
all-versions:
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
- 1.3.0.0
- 1.4.0.0
- 1.5.0.0
- 1.6.0.0
- 1.7.0.0
author: Jamie Willis, Parsley Contributors
latest: 1.7.0.0
description-type: markdown
description: |-
  # Parsley Internals

  This package contains the internals for the [`parsley`](https://hackage.haskell.org/package/parsley) library.

  The version policy adheres to the regular Haskell PVP, but the two major versions are distinguished:
  the first is the _Public API_ major version, which represents backwards incompatible changes
  in the regular PVP sense that effect the `parsley` package itself and its users; the second version is the
  _Internal API_ major version, which would only effect users who use part of the internal parsley
  modules. As such, for people that are **not** explicitly importing anything from `Parsley.Internal`, or
  its submodules, the second major version does not matter: `0.2.0.0` and `0.3.0.0` would be compatible,
  for instance.
license-name: BSD-3-Clause
