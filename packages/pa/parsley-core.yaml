homepage: https://github.com/j-mie6/ParsleyHaskell/tree/master/parsley-core
changelog-type: markdown
hash: 2d869d308fc9ad1d03ffc589941be1ab16bafb9fdea477aedef4de0b2ce37c28
test-bench-deps: {}
maintainer: Jamie Willis <j.willis19@imperial.ac.uk>
synopsis: A fast parser combinator library backed by Typed Template Haskell
changelog: |-
  # Revision history for `parsley-core`

  ## 1.0.0.0 -- 2021-06-12

  * First version. Released on an unsuspecting world.
  * Core factored out of the main `parsley` package

  ## 1.0.1.0 -- 2021-06-26

  * Introduced `Lam` to the API and conversion functions for `Core.Defunc`
  * Extra type ascriptions added to generated code

  ## 1.0.1.1 -- 2021-06-27

  * Added input factoring to `try p <|> q` and also forms with `f <$> try p <|> q` and `try p $> x <|> q`

  ## 1.1.0.0 -- 2021-07-01

  * Switched both backends to make use of `Lam` instead of `Core.Defunc`, reducing burden on GHC
  * Added duplication avoidance optimisation when value to be duplicated is `Lam.Var True`

  ## 1.2.0.0 -- 2021-07-01

  * For GHC 8.10+, leveraged the static structure of functions:
    * Handlers are now static functions, reducing the beta-reduction required by GHC, `fatal` now generates better code
    * Return continuations are also static functions, reducing beta-reduction required by GHC, `halt` generates better code
    * Recursive calls are also static functions, removing a lot of junk with the conversion from iterators to recursion
  * Registers are now bound once for recursive parsers, which close over their free-registers
  * Strictness has been updated to reflect the reduced burden on GHC to optimise: now strictness is for performance, and
    not to coax GHC to optimise at the cost of performance
  * Removed the "bad" binding for `Sat`, handlers are always bound on creation, so the binding is basically meaningless
  * Performance on 8.10+ is anywhere from 10-20% faster than 1.1.0.0

  ## 1.2.0.1 -- 2021-07-03

  * Added Jump-Elision optimisation to the code generator.

  ## 1.3.0.0 -- 2021-07-03

  * Improved the `Lam` reduction algorithm
  * Preliminary support for `if true` reduction from `item` and `const True`
  * Introduced `_if` and `ap` in `Machine.Defunc`, removed `genDefunc1`

  ## 1.4.0.0 -- 2021-07-22
  NOTE: The API exposed to `parsley` has changed, however, the changed types match up
  and the underlying types are not exposed. This means that `parsley` cannot write
  the type down to begin with, so the API change does not _actually_ result in any
  backward incompatiblity _unless_ the `Parsley.Internal.*` modules are imported:
  this meets requirements for internal major change.

  * Removed an `unsafeCoerce` from register creation, using more existentials.
  * Changed `CharList`'s `more` check to test for `[]` and not length (faster!)
  * Added static information to offset in the machine
  * Leveraged static information to refine handlers at compile time, offering up
    to 20% performance improvement
  * Code restructuring and refactoring
  * Added copious amounts of documentation
basic-deps:
  bytestring: '>=0.10.8 && <0.12'
  dependent-sum: '>=0.7.1 && <0.8'
  base: '>=4.10 && <4.16'
  unordered-containers: '>=0.2.13 && <0.3'
  text: '>=1.2.3 && <1.3'
  dependent-map: '>=0.4.0 && <0.5'
  array: '>=0.5.2 && <0.6'
  containers: '>=0.6 && <0.7'
  pretty-terminal: '>=0.1.0 && <0.2'
  ghc-prim: '>=0.5.3 && <1'
  mtl: '>=2.2.1 && <2.3'
  hashable: '>=1.2.7.0 && <1.4'
  template-haskell: '>=2.14 && <3'
all-versions:
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
- 1.3.0.0
- 1.4.0.0
author: Jamie Willis, Parsley Contributors
latest: 1.4.0.0
description-type: markdown
description: "# Parsley Internals\n\nThis package contains the internals for the [`parsley`](https://hackage.haskell.org/package/parsley-core)
  library. \n\nThe version policy adheres to the regular Haskell PVP, but the two
  major versions are distinguished: \nthe first is the _Public API_ major version,
  which represents backwards incompatible changes\nin the regular PVP sense that effect
  the `parsley` package itself and its users; the second version is the\n_Internal
  API_ major version, which would only effect users who use part of the internal parsley\nmodules.
  As such, for people that are **not** explicitly importing anything from `Parsley.Internal`,
  or\nits submodules, the second major version does not matter: `0.2.0.0` and `0.3.0.0`
  would be compatible,\nfor instance."
license-name: BSD-3-Clause
