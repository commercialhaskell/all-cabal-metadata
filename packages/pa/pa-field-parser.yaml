all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.3.1.0
author: ''
basic-deps:
  aeson: '>=0'
  aeson-better-errors: '>=0'
  attoparsec: '>=0'
  base: <5
  case-insensitive: '>=0'
  containers: '>=0'
  pa-error-tree: '>=0'
  pa-prelude: '>=0.2.0.0'
  scientific: '>=0'
  semigroupoids: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  time: '>=0'
changelog: |
  # Revision history for pa-field-parser

  ## 0.3.1.0 -- 2024-09-04

  - Improve `boundedScientificIntegral`

  ## 0.3.0.0 -- 2023-10-15

  - rename `jsonParser` to `toJsonParser`
  - add `utcTimeLenient`

  ## 0.2.0.0 -- 2023-07-28

  - Add a few parsers
  - Add `literal` for literal TH parser splices

  ## 0.1.0.0 -- 2023-05-19

  - First version
changelog-type: markdown
description: |
  # pa-field-parser

  A small library for “vertical parsing” of values.

  Traditional parsers are “horizontal” parsers, they take a flat list of tokens and produce structure:

  <pre><code>
  [  token1 token2 token3 token4 token5 ]
  ----> horizontal parser

  result:

  - token1
  |
  `-- token2
  |
  `-- token3
    |
    `-- token 4 -- token 5
  </code></pre>

  A `FieldParser` is a “vertical” parser. Once you have some low-level type in hand, usually you want to do some more checks, to “upgrade” it so to say:

  <pre><code>
    Integer
      ^
      | signedDecimal
      |
     Text
      ^
      | utf8
      |
  ByteString
  </code></pre>

  As a `FieldParser`, this would look like:

  ```haskell
  utf8 :: FieldParser ByteString Text
  signedDecimal :: FieldParser Text Integer

  (utf8 >>> signedDecimal) :: FieldParser ByteString Integer
  ```

  `>>>` is from `Control.Category`, but `Profunctor` is also available to map over the left and right arguments.

  When run, this produces either a value or a helpful error message.

  They can be freely combined with other libraries, and act as a nice adapter between them. For example, the JSON-related functions integrate with `aeson-better-errors` and any `FieldParser Value a` can be converted to a `FromJSON` instance for `aeson`. `attoparsec` is also available to easily turn bytes or text parsers into `FieldParser`s.

  You can use this library as-is, but the design is easily adaptable to your codebase, the idea is very simple. Feel free to copy and paste what you need.
description-type: markdown
hash: 4e79c1a7aa89c8237c9f41c2665e1815315c525e40eec113a8af147fcf3fd215
homepage: https://github.com/possehl-analytics/pa-hackage
latest: 0.3.1.0
license-name: BSD-3-Clause
maintainer: Philip Patsch <philip.patsch@possehl-analytics.com>
synopsis: “Vertical” parsing of values
test-bench-deps: {}
