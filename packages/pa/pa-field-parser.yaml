homepage: https://github.com/possehl-analytics/pa-hackage
changelog-type: markdown
hash: ec31187fb4104c0b0cdb9e81e34a414d0d4ef0b11fcdd1bf0eac9b0453668855
test-bench-deps: {}
maintainer: Philip Patsch <philip.patsch@possehl-analytics.com>
synopsis: “Vertical” parsing of values
changelog: |
  # Revision history for pa-field-parser

  ## 0.1.0.0 -- 2023-05-19

  - First version
basic-deps:
  semigroupoids: -any
  pa-error-tree: -any
  case-insensitive: -any
  base: <5
  text: -any
  pa-prelude: -any
  containers: -any
  aeson-better-errors: -any
  attoparsec: -any
  scientific: -any
  aeson: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: ''
latest: 0.1.0.1
description-type: markdown
description: |
  # pa-field-parser

  A small library for “vertical parsing” of values.

  Traditional parsers are “horizontal” parsers, they take a flat list of tokens and produce structure:

  <pre><code>
  [  token1 token2 token3 token4 token5 ]
  ----> horizontal parser

  result:

  - token1
  |
  `-- token2
  |
  `-- token3
    |
    `-- token 4 -- token 5
  </code></pre>

  A `FieldParser` is a “vertical” parser. Once you have some low-level type in hand, usually you want to do some more checks, to “upgrade” it so to say:

  <pre><code>
    Integer
      ^
      | signedDecimal
      |
     Text
      ^
      | utf8
      |
  ByteString
  </code></pre>

  As a `FieldParser`, this would look like:

  ```haskell
  utf8 :: FieldParser ByteString Text
  signedDecimal :: FieldParser Text Integer

  (utf8 >>> signedDecimal) :: FieldParser ByteString Integer
  ```

  `>>>` is from `Control.Category`, but `Profunctor` is also available to map over the left and right arguments.

  When run, this produces either a value or a helpful error message.

  They can be freely combined with other libraries, and act as a nice adapter between them. For example, the JSON-related functions integrate with `aeson-better-errors` and any `FieldParser Value a` can be converted to a `FromJSON` instance for `aeson`. `attoparsec` is also available to easily turn bytes or text parsers into `FieldParser`s.

  You can use this library as-is, but the design is easily adaptable to your codebase, the idea is very simple. Feel free to copy and paste what you need.
license-name: BSD-3-Clause
