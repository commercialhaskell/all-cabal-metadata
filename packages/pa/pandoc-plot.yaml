homepage: https://github.com/LaurentRDC/pandoc-plot#readme
changelog-type: markdown
hash: 6ae4980cc1f866f52bfd92af9e1e6f787c92414e7d9d40b49c180aea027fa8e5
test-bench-deps:
  base: '>=4.11 && <5'
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  criterion: '>=1.0 && <2'
  pandoc-types: '>=1.20 && <=2'
  containers: -any
  pandoc-plot: -any
  tasty-hunit: -any
  tasty: -any
  template-haskell: '>2.7 && <3'
  hspec-expectations: -any
  directory: -any
maintainer: Laurent P. RenÃ© de Cotret
synopsis: A Pandoc filter to include figures generated from code blocks using your
  plotting toolkit of choice.
changelog: "# Change log\n\npandoc-plot uses [Semantic Versioning](http://semver.org/spec/v2.0.0.html)\n\n##
  Release 1.5.0\n\n* Added support for [Sage](https://www.sagemath.org/) (#44).\n*
  Fixed an issue where the parsing of default save format from configuration was overly
  restrictive (#42).\n* Linux and Windows executables now built with GHC 9.2.\n\n##
  Release 1.4.1\n\n* Don't automatically defer javascript scripts when creating interactive
  figures (#39).\n\n## Release 1.4.0\n\n* The executable `pandoc-plot` now uses pandoc
  2.17. Pandoc 2.11+ are still supported.\n* Added support for `aeson` 2+.\n\n## Release
  1.3.0\n\n* The executable `pandoc-plot` is now aware of final conversion format.\n*
  Added a new function, `plotFilter`, which is aware of the pandoc's final conversion
  format. This allows for better defaults and error messages.\n* Deprecated `plotTransform`
  in favour of `plotFilter`. `plotTransform` will be removed in the next major update
  (v2+).\n* Save formats incompatible with toolkits will now show an appropriate error.\n*
  The build system is now based on `cabal-install` rather than `stack`.\n* Fixed an
  issue where some types of PlantUML diagrams (e.g. Gantt charts) would not be exported
  correctly (#30).\n\n## Release 1.2.3\n\n* Fixed an issue where MATLAB figures were
  not being saved in the right location (#27).\n* Releases are now completely taken
  care of via Github actions.\n\n## Release 1.2.2\n\n* Executables are now built using
  GHC 9.0.1\n* The executables are now built with Pandoc 2.14. Pandoc 2.11, 2.12,
  and 2.13 are still supported.\n\n## Release 1.2.1\n\n* Added the ability to save
  plots as LaTeX directly from the GNUplot toolkit. To do this, simply set the output
  format to `latex`. The figure content will be embedded in the output document, which
  only makes sense for final conversion to LaTeX. For example:\n\n  ````markdown\n
  \   ```{.gnuplot format=latex caption=\"This is a test.\"}\n    ...\n    ```\n  ````\n
  \ This patch was contributed by Saku Laesvuori.\n\n## Release 1.2.0\n\n* Fixed an
  issue where code blocks nested in other structures were detected properly. For example,
  in the following LaTeX snippet, plots would not be detected properly:\n```latex\n\\begin{column}\n
  \ \\begin{minted}[]{matplotlib}\n  ...\n  \\end{minted}\n\\end{column}\n```\nNested
  figures are not correctly identified.\n\n* The executables are now built with Pandoc
  2.13. Pandoc 2.11 and Pandoc 2.12 are still supported.\n\n## Release 1.1.1\n\n*
  Error messages now include the source script and line numbers.\n* The executables
  are now built with Pandoc 2.12. Pandoc 2.11 is still supported.\n\n## Release 1.1.0\n\n*
  Added the [PlantUML](https://plantuml.com) toolkit (#18). Diagrams can be generated
  like so:\n\n  ````markdown\n\n  ```{.plantuml}\n  @startuml\n  Bob->Alice : hello\n
  \ @enduml\n  ```\n\n  ````\n* Changed versioning scheme to match more common Major.Minor.Bugfix.\n\n##
  Release 1.0.2.1\n\n* `pandoc-plot` will now only render at most `N` figures in parallel,
  where `N` is the number of available CPU cores.\n* Fixed an issue where error message
  would get mangled in strict-mode.\n\n## Release 1.0.2.0\n\n* Added the ability to
  run `pandoc-plot` in **strict mode**. By default, `pandoc-plot` leaves code blocks
  unchanged if a figure fails to be rendered.  In strict mode, `pandoc-plot` will
  immediately halt if it encounters a problem, such as a missing toolkit. You can
  activate strict mode via configuration:\n\n```yaml\nstrict: true\n```\n\n* Added
  the ability to set command-line arguments for interpreters via configuration. For
  example, if you want to run the Matplotlib toolkit with all warnings shown:\n\n```yaml\n#
  Possible parameters for the Matplotlib toolkit\nmatplotlib:\n  executable: python\n
  \ command_line_arguments: -Wa\n```\n\nOr if you want `julia` to use more than one
  thread:\n\n```yaml\n# Possible parameters for the Plotsjl toolkit\nplotsjl:\n  executable:
  julia\n  command_line_arguments: --threads auto --optimize=0\n```\n\n* Fixed an
  issue where invoking the `plotsjl` toolkit on Windows would sometimes fail with
  the error: Unknown system error 50.\n* Fixed an issue with R-based toolkits on Windows
  not being detected properly.\n\n## Release 1.0.1.0\n\n* Added the ability to change
  the \"Source code\" label to other languages via configuration.\n* Added syntax
  highlighting to the linked source code.\n* Fixed an issue where code blocks with
  unicode symbols (e.g. greek letters) would trip up pandoc-plot (#16).\n\n## Release
  1.0.0.0\n\n* Added support for Pandoc 2.11. Unfortunately, there is no way to support
  prior versions of Pandoc at the same time.\n* With release 1.0.0.0, `pandoc-plot`
  has stabilized. The Haskell library API will not change until version 2+. \n\n##
  Release 0.9.4.0\n\n* Fixed an issue where the current working directory was changed.
  This prevented users from referring to files in scripts with relative paths (#2).\n\n##
  Release 0.9.3.0\n\n* Added executable caching: repeated usage of a particular toolkit
  will be faster because executables are only looked-for once.\n* Reverting the change
  from 0.8.1.0: internal machinery of `pandoc-plot` has been moved to the `Text.Pandoc.Filter.Plot.Internal`
  module, where there is no guarantee of backwards-compatibility after 1.0.0.\n* Removed
  the `makePlot` function, which could not take advantage of multithreading and other
  key features of `pandoc-plot`.\n* Fixed an issue where files required for tests
  were missing from source tarballs (#13).\n\n## Release 0.9.2.0\n\n* Fixed an issue
  where executables located on paths with spaces would not be invoked correctly (#12).\n*
  Fixed an issue where R-paths were not normalized correctly.\n* Fixed an issue where
  executables specified in configuration that did not exist would crash `pandoc-plot`.\n*
  Fixed an issue where some R-based toolkits appeared to be available, but were not.\n\n##
  Release 0.9.1.0\n\n* Added the `file` parameter, which allows the user to read figure
  content from a file instead of using the code block content in documents. This is
  especially useful for complex figures, where you might want to have the help of
  your tooling in an IDE, for instance. Here's an example:\n\n````markdown\n\n```{.matplotlib
  file=myplot.py}\n```\n\n````\n* Better error messages when specifying logger verbosity.\n*
  Cleaning output directories with `pandoc-plot clean` now follows configuration values
  for logging. \n* Fixed an issue where configuration in metadata did not get parsed
  properly.\n\n## Release 0.9.0.0\n\n* The `bokeh` toolkit now supports exporting
  plots as SVGs (#8).\n* Interactive plots relying on javascript scripts will now
  defer loading the scripts (#9). \n* Added the `dependencies` argument, which tells
  `pandoc-plot` what files are important to a particular figure (#10). If a file listed
  in `dependencies` changes (for example, a data file), `pandoc-plot` will re-render
  the associated figure.\n* Better heuristic to determine what `bokeh` plot to save.
  This allows the user to export plots like the [`bokeh.layouts` module](https://docs.bokeh.org/en/latest/docs/user_guide/layout.html#creating-layouts).\n*
  Added support for the `dpi` parameter in `graphviz` and `mathematica`.\n* Added
  support for MATLAB's new `exportgraphics` function introduced in MATLAB 2020a. Older
  versions fallback to using `saveas`.\n\n## Release 0.8.1.0\n\n* The module `Text.Pandoc.Filter.Plot.Internal`
  is no longer exposed; instead, everything relevant is exposed by the `Text.Pandoc.Filter.Plot`
  module.\n* Fixed an issue where script errors would be logged as debug messages.\n*
  Interactive plots are now embedded directly in output (#7).\n\n## Release 0.8.0.0\n\n*
  Added a new output format, HTML, to produce interactive plots. Not all renderers
  support it. You can try with Plotly/Python and Plotly/R as follows:\n\n````markdown\n\n```{.plotly_python
  format=html}\nimport plotly.express as px\ndf = px.data.election()\nfig = px.scatter_ternary(df,
  a=\"Joly\", b=\"Coderre\", c=\"Bergeron\")\n```\n\n````\n\n* Added a new toolkit,
  [`bokeh`](https://bokeh.org/). This toolkit can take advantage of the new HTML interactive
  output.\n* Added a new toolkit, [`plotsjl`](http://docs.juliaplots.org/latest/).\n*
  Separated the detailed information from `README.md` and into a proper `MANUAL.md`.
  This is now the information which will be shown with `pandoc-plot --manual`.\n*
  Exposed the `pandoc-plot` version via `Text.Pandoc.Filter.Plot.pandocPlotVersion`.\n\n##
  Release 0.7.2.1\n\n* Fixed an issue where the `pandoc` version was not parsed properly,
  giving rise to errors when running `pandoc-plot`.\n* Fixed an issue where logging
  errors were not always displayed.\n\n## Release 0.7.2.0\n\n* Removed dependency
  on `open-browser` package.\n* Starting with this version, `pandoc` 2.8 and 2.9 are
  **no longer supported** due to a breaking API change in `pandoc` 2.10.\n* Executables
  are now built with GHC 8.10.1.\n\n## Release 0.7.1.0\n\n* Better multi-threaded
  logging. Only one thread (the logging thread) performs IO on the log file. This
  prevents hang-ups when working on large documents. \n\n## Release 0.7.0.0\n\n* Added
  documentation on using `pandoc-plot` with LaTeX documents as well.\n* Added preliminary
  support for logging to `pandoc-plot`. You can turn on this feature in the configuration
  as follows:\n\n````yaml\nlogging:\n    # Possible verbosity values: debug, error,
  warning, info, silent\n    # debug level shows all messages\n    # error level shows
  all but debug messages, etc.\n    verbosity: info\n    \n    # OPTIONAL: log to
  file\n    # Remove line below to log to stderr\n    filepath: log.txt\n````\n\n*
  Removed dependencies `turtle`, `temporary`, `deepseq`, and `data-default-class`,
  resulting in improved build times by ~10%, and makes the executable smaller by 15-20%!\n\n##
  Release 0.6.1.0\n\n* Made the functions `availableToolkits` and `unavailableToolkits`
  public.\n* Minor documentation fixes.\n* Executables are now built with GHC 8.8.3.\n\n##
  Release 0.6.0.0\n\nNew toolkits:\n* Added support for the Plotly/R plotting library.\n*
  Added support for Graphviz.\n\nOther changes:\n* The determination of which figures
  to re-render or not has been improved. For example, changing the caption will not
  trigger a re-render of a figure anymore.\n* `pandoc-plot` will look for executables
  more thoroughly.\n* `pandoc-plot toolkits` will now show the exact executable that
  is being used, if possible.\n* Added a check when running the filter that the Pandoc
  version is at least 2.8. This is easier to understand that the default Pandoc warning
  on API incompatibility.\n* Added the ability to write the example configuration
  to an arbitrary file using `pandoc-plot write-example-config`.\n* Added the possibility
  to specify the configuration file via metadata. For example, in Markdown:\n\n    ```markdown\n
  \   ---\n    title: My document\n    author: John Doe\n    plot-configuration: /path/to/file.yml\n
  \   ---     \n    ```\n\nor on the command line:\n\n```bash\npandoc --filter pandoc-plot
  -M plot-configuration=/path/to/file.yml ...\n```\n* Added the ability to specify
  configuration file to the `pandoc-plot clean` and `pandoc-plot toolkits` commands.\n\n##
  Release 0.5.0.0\n\n* The `pandoc-plot` executable will now process documents in
  parallel. This should dramatically speed up processing of large documents with lots
  of figures. \nThis happens automatically through the function `plotTransform`.\n*
  Added a benchmarking suite.\n* Added `defaultConfiguration` so that people don't
  have to install the `data-default` package to get access to default configuration
  values. \n* Added a check for the `matplotlib` toolkit, preventing users from using
  `matplotlib.pyplot.show` in figures. This would halt `pandoc-plot`.\n\n## Release
  0.4.0.1\n\n* Fixed an issue where the `pandoc-plot` executable could not be built
  outside of its git repository.\n\n## Release 0.4.0.0\n\n* Updated documentation.\n*
  Added a `--full-version` flag to the executable, which includes which version of
  pandoc/pandoc-types was used, as well as the git revision.\n* Added the `clean`
  command to the executable. This can be used to clean-up output files produced by
  pandoc-plot.\n* Changed the flag `--write-example-config` to the command `write-example-config`.\n*
  Added the top-level function `cleanOutputDir` to clean output of pandoc-plot. This
  is only accessible if `pandoc-plot` is used as a library.\n* Added a distinction
  between failure to render a figure because of a mistake, and failing to render a
  figure because the toolkit is not installed. `pandoc-plot` will give better error
  messages in the latter case.\n\n## Release 0.3.0.0\n\n* Added more examples.\n*
  Added MacOS binaries built via Azure pipelines.\n* BREAKING CHANGE: Parsing captions
  based on source file was not working. Captions format can be specified in the configuration
  file. This unfortunately changes the type signature of a few high-level functions.\n\n##
  Release 0.2.2.0\n\n* Fixed an issue where paths with spaces would not work (issue
  #2).\n* Added Linux binaries built via Azure pipelines.\n\n## Release 0.2.1.0\n\n*
  Improved documentation.\n\n## Release 0.2.0.0\n\n* Added support for gnuplot.\n*
  Added more tests for all toolkits.\n\n* Fixed an issue where the package could not
  be installed because a source file was not included in the cabal file.\n\n## Release
  0.1.0.0\n\n* Initial release\n"
basic-deps:
  shakespeare: '>=2.0 && <3'
  bytestring: -any
  unix: '>=2.4 && <2.8'
  base: '>=4.11 && <5'
  text: '>=1 && <3'
  filepath: '>=1.4 && <2'
  gitrev: '>=1 && <2'
  lifted-base: '>=0.2 && <1'
  data-default: -any
  pandoc-types: ==1.22.*
  containers: -any
  pandoc: '>=2.10 && <3'
  typed-process: '>=0.2.1 && <1'
  pandoc-plot: -any
  mtl: '>=2.2 && <3'
  lifted-async: '>=0.10 && <1'
  hashable: '>=1 && <2'
  optparse-applicative: '>=0.14 && <1'
  tagsoup: '>=0.14 && <1'
  aeson: '>=2 && <3'
  template-haskell: '>2.7 && <3'
  yaml: '>=0.8 && <1'
  directory: '>=1.2.7 && <2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.1
- 0.8.0.0
- 0.8.1.0
- 0.9.0.0
- 0.9.1.0
- 0.9.2.0
- 0.9.3.0
- 0.9.4.0
- 1.0.0.0
- 1.0.1.0
- 1.0.2.0
- 1.0.2.1
- 1.1.0
- 1.1.1
- 1.2.0
- 1.2.1
- 1.2.2
- 1.2.3
- 1.3.0
- 1.4.0
- 1.4.1
- 1.5.0
author: Laurent P. RenÃ© de Cotret
latest: 1.5.0
description-type: markdown
description: "# pandoc-plot \n\n## A Pandoc filter to generate figures from code blocks
  in documents\n\n[![license](https://img.shields.io/badge/license-GPLv2+-lightgray.svg)](https://www.gnu.org/licenses/gpl.html)
  \n\n`pandoc-plot` turns code blocks present in your documents (Markdown, LaTeX,
  etc.) into embedded figures, using your plotting toolkit of choice, including Matplotlib,
  ggplot2, MATLAB, Mathematica, and more.\n\n## Overview\n\nThis program is a [Pandoc](https://pandoc.org/)
  filter. It can therefore\nbe used in the middle of conversion from input format
  to output format,\nreplacing code blocks with figures.\n\nThe filter recognizes
  code blocks with classes that match plotting\ntoolkits. For example, using the `matplotlib`
  toolkit:\n\n```` markdown\n# My document\n\nThis is a paragraph.\n\n```{.matplotlib}\nimport
  matplotlib.pyplot as plt\n\nplt.figure()\nplt.plot([0,1,2,3,4], [1,2,3,4,5])\nplt.title('This
  is an example figure')\n```\n````\n\nPutting the above in `input.md`, we can then
  generate the plot and embed\nit in an HTML page:\n\n``` bash\npandoc --filter pandoc-plot
  input.md --output output.html\n```\n\nThe resulting `output.html` looks like this:\n\n```html\n<h1
  id=\"my-document\">My document</h1>\n\n<p>This is a paragraph.</p>\n\n<figure>\n<img
  src=\"plots\\9671478262050082276.png\" />\n</figure>\n```\n\n## Supported toolkits\n\n`pandoc-plot`
  currently supports the following plotting toolkits\n(**installed separately**):\n\n
  \ - `matplotlib`: plots using the [matplotlib](https://matplotlib.org/)\n    Python
  library;\n  - `plotly_python` : plots using the\n    [plotly](https://plotly.com/python/)
  Python library;\n  - `plotly_r`: plots using the [plotly](https://plotly.com/r/)
  R\n    library\n  - `matlabplot`: plots using [MATLAB](https://www.mathworks.com/);\n
  \ - `mathplot` : plots using\n    [Mathematica](https://www.wolfram.com/mathematica/);\n
  \ - `octaveplot`: plots using [GNU\n    Octave](https://www.gnu.org/software/octave/);\n
  \ - `ggplot2`: plots using [ggplot2](https://ggplot2.tidyverse.org/);\n  - `gnuplot`:
  plots using [gnuplot](http://www.gnuplot.info/);\n  - `graphviz`: graphs using [Graphviz](http://graphviz.org/);\n
  \ - `bokeh`: plots using the [Bokeh](https://bokeh.org/) visualization library;\n
  \ - `plotsjl`: plots using the [Julia `Plots.jl`](https://docs.juliaplots.org/latest/)
  package;\n  - `plantuml`: diagrams using the [PlantUML](https://plantuml.com/) software
  suite;\n  - `sageplot`: plots using the [Sage](https://www.sagemath.org/) software
  system.\n\nTo know which toolkits are useable on *your machine* (and which ones
  are\nnot available), you can check with the `toolkits` command:\n\n``` bash\npandoc-plot
  toolkits\n```\n\n**Wish your plotting toolkit of choice was available? Please [raise
  an\nissue](https://github.com/LaurentRDC/pandoc-plot/issues)\\!**\n\n## Documentation\n\nYou
  can find more information in the documentation, available either in the\nsource
  repository file `MANUAL.md`, on the [webpage](https://laurentrdc.github.io/pandoc-plot/MANUAL.html),
  or via the command `pandoc-plot --manual`.\n\n## Installation\n\n### Binaries and
  Installers\n\n[![Latest release](https://img.shields.io/github/v/release/LaurentRDC/pandoc-plot)](https://github.com/LaurentRDC/pandoc-plot/releases)\n\nWindows,
  Linux, and Mac OS binaries are available on the [GitHub release\npage](https://github.com/LaurentRDC/pandoc-plot/releases).
  There are\nalso Windows installers.\n\n### conda\n\n[![Conda Version](https://anaconda.org/conda-forge/pandoc-plot/badges/version.svg)](https://anaconda.org/conda-forge/pandoc-plot)\n\nLike
  `pandoc`, `pandoc-plot` is available as a package installable with\n[`conda`](https://docs.conda.io/en/latest/).
  [Click here to see the\npackage page](https://anaconda.org/conda-forge/pandoc-plot).\n\nTo
  install in the current environment:\n\n``` sh\nconda install -c conda-forge pandoc-plot\n```\n\n###
  Homebrew \n\n[![homebrew version](https://img.shields.io/homebrew/v/pandoc-plot)](https://formulae.brew.sh/formula/pandoc-plot)\n\n`pandoc-plot`
  is available as a package via [`Homebrew`](https://brew.sh/). [Click here to see
  the package page](https://formulae.brew.sh/formula/pandoc-plot#default). \n\nTo
  install:\n\n```sh\nbrew install pandoc-plot\n```\n\n### winget\n\nYou can install
  `pandoc-plot` from the [Windows Package\nManager](https://github.com/microsoft/winget-cli)
  `winget` (just like\n`pandoc`). To install:\n\n``` sh\nwinget install pandoc-plot\n```\n\n###
  Arch Linux\n\n[![AUR version](https://img.shields.io/aur/version/pandoc-plot-bin)](https://aur.archlinux.org/packages/pandoc-plot-bin/)\n\nYou
  can install `pandoc-plot` from the [archlinux user repository](https://aur.archlinux.org/packages/pandoc-plot-bin/)
  as `pandoc-plot-bin`. You can install using e.g. `yay`:\n\n```sh\nyay -S pandoc-plot-bin\n```\n\n###
  From Hackage/Stackage\n\n[![Hackage version](https://img.shields.io/hackage/v/pandoc-plot.svg)](http://hackage.haskell.org/package/pandoc-plot)\n\n`pandoc-plot`
  is available on\n[Hackage](http://hackage.haskell.org/package/pandoc-plot) and\n[Stackage](https://www.stackage.org/nightly/package/pandoc-plot).
  Using\nthe [`cabal-install`](https://www.haskell.org/cabal/) tool:\n\n``` bash\ncabal
  update\ncabal install\n```\n\n### From source\n\nBuilding from source can be done
  using [`cabal`](https://www.haskell.org/cabal/):\n\n``` bash\ngit clone https://github.com/LaurentRDC/pandoc-plot\ncd
  pandoc-plot\ncabal install # Alternatively, `stack install`\n```\n"
license-name: GPL-2.0-or-later
