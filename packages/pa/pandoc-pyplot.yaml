all-versions:
- 2.0.0.0
- 2.0.1.0
- 2.1.0.0
- 2.1.0.1
- 2.1.1.1
- 2.1.2.0
- 2.1.3.0
- 2.1.4.0
- 2.1.5.0
- 2.1.5.1
- 2.2.0.0
- 2.3.0.0
- 2.3.0.1
author: Laurent P. RenÃ© de Cotret
basic-deps:
  base: '>=4 && <5'
  containers: '>=0'
  data-default-class: '>=0.1.2'
  deepseq: '>=0'
  directory: '>=0'
  filepath: '>=1.4 && <2'
  hashable: '>=1 && <2'
  mtl: '>=2.2 && <2.3'
  open-browser: '>=0.2.1.0'
  optparse-applicative: '>=0.14 && <1'
  pandoc: '>=2.8 && <3'
  pandoc-pyplot: '>=0'
  pandoc-types: '>=1.20 && <1.30'
  shakespeare: '>=2.0 && <3'
  template-haskell: '>2.7 && <3'
  temporary: '>=0'
  text: '>=1 && <2'
  typed-process: '>=0.2.1 && <1'
  yaml: '>=0.8 && <1'
changelog: "# Change log\r\n\r\npandoc-pyplot uses [Semantic Versioning](http://semver.org/spec/v2.0.0.html)\r\n\r\nRelease
  2.3.0.1\r\n---------------\r\n\r\n* Re-licensed package and library to GPL-2, same
  as pandoc. The previous license (MIT) was not compatible with pandoc's license.\r\n*
  Fixed an issue where plotly plots would not handle filenames correctly.\r\n\r\nRelease
  2.3.0.0\r\n---------------\r\n\r\n* Added support for pandoc 2.8 and pandoc-types
  1.20 (fixes #9). Because of breaking changes in pandoc-types 1.20, pandoc-pyplot
  2.3.0.0+ only supports pandoc 2.8+. \r\n\r\nRelease 2.2.0.0\r\n---------------\r\n\r\n*
  Added support for rendering figures via the Plotly library.\r\n\r\nRelease 2.1.5.1\r\n---------------\r\n\r\n*
  Fixed an issue where setting the configuration option `transparent: true`  left
  high-resolution figures difficult to see. Therefore, the option `transparent: true`
  does not affect high-resolution figures anymore.\r\n\r\nRelease 2.1.5.0\r\n---------------\r\n\r\n*
  Added support for two new configuration values: `tight_bbox: true|false` and `transparent:
  true|false`. These values are only supported via configuration files `.pandoc-pyplot.yml`.\r\n\r\nRelease
  2.1.4.0\r\n---------------\r\n\r\n* Added examples and documentation on how to use
  `pandoc-pyplot` on LaTeX documents.\r\n* Allowed raw LaTeX macros in figure captions.
  This is required to label figures in LaTeX. E.g.:\r\n  \r\n  ```latex\r\n  \\begin{minted}[caption=myCaption\\label{myfig}]{pyplot}\r\n
  \ \r\n  \\end{minted}\r\n  ```\r\n\r\n* `with-links` key changed to `links`. I'm
  sorry. Pandoc doesn't support LaTeX tokens with `-`.\r\n\r\nRelease 2.1.3.0\r\n---------------\r\n\r\n*
  Switched to using [optparse-applicative](https://github.com/pcapriotti/optparse-applicative#arguments)
  for command-line argument parsing.\r\n* Added a command-line options, \"--write-example-config\",
  which will write a config file \".pandoc-pyplot.yml\" to show all available configuration
  options.\r\n* Links to source code and high-res images can be suppressed using `{.pyplot
  with-links=false ...}` (or via the configuration file with `with-links: false`).
  This is to get cleaner output in technical documentation (e.g. PDF). Example:\r\n\r\n
  \ ```markdown\r\n    ```{.pyplot caption=\"This is a caption\" with-links=false}\r\n
  \   import matplotlib.pyplot as plt\r\n    plt.figure()\r\n    plt.plot([1,2,3,4,5],[1,2,3,4,5])\r\n
  \   ```\r\n  ```\r\n* Added automated builds on macOS and Linux via Azure-Pipelines.
  Windows build will stay on Appveyor for now.\r\n\r\nRelease 2.1.2.0\r\n---------------\r\n\r\n*
  Added the \"flags\" configuration option, which allows to pass command-line flags
  to the Python interpreter. For example, warnings can be suppressed using the `-Wignore`
  flag.\r\n* Refactoring of the script check mechanism. It will be much easier to
  extend in the future.\r\n* Updated the command-line help with an example combining
  pandoc-pyplot and pandoc-crossref\r\n* Default Python interpreter is now \"python\"
  on Windows and __\"python3\" otherwise__.\r\n\r\nRelease 2.1.1.1\r\n---------------\r\n\r\n*
  Fixed a critical bug where pandoc-pyplot would interpret input from pandoc as a
  malformed command-line flag.\r\n\r\nRelease 2.1.1.0\r\n---------------\r\n\r\n*
  Added a command-line option to open the HTML manual in the default web browser.\r\n*
  Added documentation regarding compatibility with pandoc-crossref. This was always
  supported but not explicitly documented.\r\n\r\nRelease 2.1.0.1\r\n---------------\r\n\r\n*
  Fixed outdated documentation (referencing \"target\" parameter)\r\n* Fixed types
  required to build Configuration values that were not exported (SaveFormat, PythonScript)\r\n\r\nRelease
  2.1.0.0\r\n---------------\r\n\r\n* Added support for config files \".pandoc-pyplot.yml\",
  which specify different default values. This is mirrored in the new `Configuration`
  type and new functions, `makePlotWithConfig` and `plotTransformWithConfig`.\r\n*
  Added the ability to specify a different Python interpreter to use.\r\n* Added support
  for GIF and TIF files.\r\n* Added the \"-f\"/\"--formats\" command to show supported
  output figure formats.\r\n* Added support for GHC 8.2\r\n* Moved internal modules
  to `Text.Pandoc.Filter.Pyplot.Internal` module.\r\n\r\nRelease 2.0.1.0\r\n---------------\r\n\r\n*
  Support for Markdown formatting in figure captions, including LaTeX math.\r\n\r\nRelease
  2.0.0.0\r\n---------------\r\n\r\nMany **breaking changes** in this release:\r\n\r\n*
  `pandoc-pyplot` will now determine the filename based on hashing the figure content.
  Therefore, figures will only be re-generated if necessary.\r\n* Removed the ability
  to control the filename and format directly using the `plot_target=...` attribute.\r\n*
  Added the ability to control the directory in which figures will be saved using
  the `directory=...` attribute.\r\n* Added the possibility to control the figures
  dots-per-inch (i.e. pixel density) with the `dpi=...` attribute.\r\n* Added the
  ability to control the figure format with the `format=...` attribute. Possible values
  are currently `\"png\"`, `\"svg\"`, `\"pdf\"`, `\"jpg\"`/`\"jpeg\"` and `\"eps\"`.\r\n*
  The confusing `plot_alt=...` attribute has been renamed to `caption=...` for obvious
  reasons.\r\n* The `plot_include=...` attribute has been renamed to `include=...`.\r\n*
  Added the generation of a higher resolution figure for every figure `pandoc-pyplot`
  understands.\r\n\r\nRelease 1.1.0.0\r\n---------------\r\n\r\n* Added the ability
  to include Python files before code using the `plot_include=script.py` attribute.\r\n*
  Added a test suite.\r\n\r\nRelease 1.0.3.0\r\n---------------\r\n\r\n* Fixed an
  issue where `pandoc-pyplot` would not build with base < 4.9 (#1)\r\n\r\nRelease
  1.0.2.0\r\n---------------\r\n\r\n* Added support for captions using the `plot_alt=...`
  attribute. For example:\r\n\r\n  ```markdown\r\n    ```{plot_target=test.png plot_alt=\"This
  is a caption\"}\r\n    import matplotlib.pyplot as plt\r\n    plt.figure()\r\n    plt.plot([1,2,3,4,5],[1,2,3,4,5])\r\n
  \   ```\r\n  ```\r\n\r\nRelease 1.0.1.0\r\n---------------\r\n\r\n* Added `plotTransform
  :: Pandoc -> IO Pandoc` function to transform entire documents. This makes it easier
  to integrate `pandoc-pyplot` into Hakyll-based sites!\r\n\r\nRelease 1.0.0.1\r\n---------------\r\n\r\n*
  Updated README with fixes and warnings\r\n* Added top-level package documentation
  compatible with Haddock\r\n* Added Unsafe language extension, as this filter will
  run arbitrary Python scripts.\r\n\r\nRelease 1.0.0.0\r\n---------------\r\n\r\nInitial
  release.\r\n\r\nSee documentation on [Hackage](https://hackage.haskell.org/package/pandoc-pyplot)\r\n"
changelog-type: markdown
description: "# pandoc-pyplot - A Pandoc filter to generate Matplotlib/Plotly figures
  directly in documents\r\n\r\n[![Hackage version](https://img.shields.io/hackage/v/pandoc-pyplot.svg)](http://hackage.haskell.org/package/pandoc-pyplot)
  [![Stackage version (LTS)](http://stackage.org/package/pandoc-pyplot/badge/lts)](http://stackage.org/nightly/package/pandoc-pyplot)
  [![Windows Build status](https://ci.appveyor.com/api/projects/status/qbmq9cyks5jup48e?svg=true)](https://ci.appveyor.com/project/LaurentRDC/pandoc-pyplot)
  [![macOS and Linux Build Status](https://dev.azure.com/laurentdecotret/pandoc-pyplot/_apis/build/status/LaurentRDC.pandoc-pyplot?branchName=master)](https://dev.azure.com/laurentdecotret/pandoc-pyplot/_build/latest?definitionId=2&branchName=master)
  \r\n![GitHub](https://img.shields.io/github/license/LaurentRDC/pandoc-pyplot.svg)\r\n\r\n`pandoc-pyplot`
  turns Python code present in your documents into embedded figures via Matplotlib
  or Plotly.\r\n\r\n* [Usage](#usage)\r\n    * [Markdown](#markdown)\r\n    * [LaTeX](#latex)\r\n
  \   * [Examples](#examples)\r\n* [Features](#features)\r\n    * [Captions](#captions)\r\n
  \   * [Link to source code and high-resolution\r\n      figure](#link-to-source-code-and-high-resolution-figure)\r\n
  \   * [Including scripts](#including-scripts)\r\n    * [Multiple backends](#multiple-backends)\r\n
  \   * [No wasted work](#no-wasted-work)\r\n    * [Compatibility with\r\n      pandoc-crossref](#compatibility-with-pandoc-crossref)\r\n
  \   * [Configurable](#configurable)\r\n        * [Configuration-only parameters](#configuration-only-parameters)\r\n*
  [Installation](#installation)\r\n* [Running the filter](#running-the-filter)\r\n*
  [Usage as a Haskell library](#usage-as-a-haskell-library)\r\n    * [Usage with Hakyll](#usage-with-hakyll)\r\n*
  [Warning](#warning)\r\n\r\n## Usage\r\n\r\n### Markdown\r\n\r\nThe filter recognizes
  code blocks with the `.pyplot` or `.plotly`  classes present in Markdown documents.
  It will run the script in the associated code block in a Python interpreter and
  capture the generated Matplotlib/Plotly figure.\r\n\r\nHere is a basic example using
  the scripting `matplotlib.pyplot` API:\r\n\r\n~~~markdown\r\n```{.pyplot}\r\nimport
  matplotlib.pyplot as plt\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4], [1,2,3,4,5])\r\nplt.title('This
  is an example figure')\r\n```\r\n~~~\r\n\r\nPutting the above in `input.md`, we
  can then generate the plot and embed it:\r\n\r\n```bash\r\npandoc --filter pandoc-pyplot
  input.md --output output.html\r\n```\r\n\r\nor\r\n\r\n```bash\r\npandoc --filter
  pandoc-pyplot input.md --output output.pdf\r\n```\r\n\r\nor any other output format
  you want.\r\n\r\n### LaTeX\r\n\r\nThe filter works slightly differently in LaTeX
  documents. In LaTeX, the `minted` environment must be used, with the `pyplot` class.
  \r\n\r\n```latex\r\n\\begin{minted}{pyplot}\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n\\end{minted}\r\n```\r\n\r\nNote
  that __you do not need to have `minted` installed__.\r\n\r\n### Examples\r\n\r\nThere
  are more examples in the [source repository](https://github.com/LaurentRDC/pandoc-pyplot),
  in the `\\examples` directory.\r\n\r\n## Features\r\n\r\n### Captions\r\n\r\nYou
  can also specify a caption for your image. This is done using the optional `caption`
  parameter.\r\n\r\n__Markdown__:\r\n\r\n~~~markdown\r\n```{.pyplot caption=\"This
  is a simple figure\"}\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n~~~\r\n\r\n__LaTex__:\r\n\r\n```latex\r\n\\begin{minted}[caption=This
  is a simple figure]{pyplot}\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n\\end{minted}\r\n```\r\n\r\nCaption
  formatting is either plain text or Markdown. LaTeX-style math is also support in
  captions (using dollar signs $...$).\r\n\r\n### Link to source code and high-resolution
  figure\r\n\r\nIn case of an output format that supports links (e.g. HTML), the embedded
  image generated by `pandoc-pyplot` will be a link to the source code which was used
  to generate the file. Therefore, other people can see what Python code was used
  to create your figures. A high resolution image will be made available in a caption
  link.\r\n\r\n(*New in version 2.1.3.0*) For cleaner output (e.g. PDF), you can turn
  this off via the `links=false` key:\r\n\r\n__Markdown__:\r\n\r\n~~~markdown\r\n```{.pyplot
  links=false}\r\n...\r\n```\r\n~~~\r\n\r\n__LaTex__:\r\n\r\n```latex\r\n\\begin{minted}[links=false]{pyplot}\r\n...\r\n\\end{minted}\r\n```\r\n\r\nor
  via a [configuration file](#Configurable).\r\n\r\n### Including scripts\r\n\r\nIf
  you find yourself always repeating some steps, inclusion of scripts is possible
  using the `include` parameter. For example, if you want all plots to have the [`ggplot`](https://matplotlib.org/tutorials/introductory/customizing.html#sphx-glr-tutorials-introductory-customizing-py)
  style, you can write a very short preamble `style.py` like so:\r\n\r\n```python\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n```\r\n\r\nand include it
  in your document as follows:\r\n\r\n~~~markdown\r\n```{.pyplot include=style.py}\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n~~~\r\n\r\nWhich
  is equivalent to writing the following markdown:\r\n\r\n~~~markdown\r\n```{.pyplot}\r\nimport
  matplotlib.pyplot as plt\r\nplt.style.use('ggplot')\r\n\r\nplt.figure()\r\nplt.plot([0,1,2,3,4],
  [1,2,3,4,5])\r\nplt.title('This is an example figure')\r\n```\r\n~~~\r\n\r\nThe
  equivalent LaTeX usage is as follows:\r\n\r\n```latex\r\n\\begin{minted}[include=style.py]{pyplot}\r\n\r\n\\end{minted}\r\n```\r\n\r\nThis
  `include` parameter is perfect for longer documents with many plots. Simply define
  the style you want in a separate script! You can also import packages this way,
  or define functions you often use.\r\n\r\nCustomization of figures beyond what is
  available in `pandoc-pyplot` can also be done through the `include` script. For
  example, if you wanted to figures with a black background, you can do so via `matplotlib.pyplot.rcParams`:\r\n```python\r\nimport
  matplotlib.pyplot as plt\r\n\r\nplt.rcParams['savefig.facecolor'] = 'k'\r\n...\r\n```\r\nYou
  can take a look at all available `matplotlib` parameters [here](https://matplotlib.org/users/customizing.html).\r\n\r\n###
  Multiple backends\r\n\r\n(*new in version 2.2.0.0*) Both Matplotlib and Plotly are
  supported!\r\n\r\nTo render Plotly figures in Markdown:\r\n\r\n~~~markdown\r\n```{.plotly
  caption=\"This is a Plotly figure\"}\r\nimport plotly.graph_objects as go\r\nfigure
  = go.Figure(\r\n    data=[go.Bar(y=[2, 1, 3])],\r\n)\r\n~~~\r\n\r\nHere is the LaTeX
  equivalent:\r\n\r\n```latex\r\n\\begin{minted}[caption=This is a Plotly figure]{plotly}\r\nimport
  plotly.graph_objects as go\r\nfigure = go.Figure(\r\n    data=[go.Bar(y=[2, 1, 3])],\r\n)\r\n\\end{minted}\r\n```\r\n\r\n`pandoc-pyplot`
  will render and capture your figure automagically. \r\n\r\n### No wasted work\r\n\r\n`pandoc-pyplot`
  minimizes work, only generating figures if it absolutely must. Therefore, you can
  confidently run the filter on very large documents containing dozens of figures
  --- like a book or a thesis --- and only the figures which have changed will be
  re-generated.\r\n\r\n### Compatibility with pandoc-crossref\r\n\r\n[`pandoc-crossref`](https://github.com/lierdakil/pandoc-crossref)
  is a pandoc filter that makes it effortless to cross-reference objects in Markdown
  documents. \r\n\r\nYou can use `pandoc-crossref` in conjunction with `pandoc-pyplot`
  for the ultimate figure-making pipeline. You can combine both in a figure like so:\r\n\r\n~~~markdown\r\n```{#fig:myexample
  .pyplot caption=\"This is a caption\"}\r\n# Insert figure script here\r\n```\r\n\r\nAs
  you can see in @fig:myexample, ...\r\n~~~\r\n\r\nIf the above source is located
  in file `myfile.md`, you can render the figure and references by applying `pandoc-pyplot`
  **first**, and then `pandoc-crossref`. For example:\r\n\r\n```bash\r\npandoc --filter
  pandoc-pyplot --filter pandoc-crossref -i myfile.md -o myfile.html\r\n```\r\n\r\n###
  Configurable\r\n\r\n(*New in version 2.1.0.0*) To avoid repetition, `pandoc-pyplot`
  can be configured using simple YAML files. `pandoc-pyplot` will look for a `.pandoc-pyplot.yml`
  file in the current working directory:\r\n\r\n```yaml\r\n# You can specify any or
  all of the following parameters\r\ninterpreter: python36\r\ndirectory: mydirectory/\r\ninclude:
  mystyle.py\r\nformat: jpeg\r\nlinks: false\r\ndpi: 150            # Matplotlib only\r\ntight_bbox:
  true    # Matplotlib only\r\ntransparent: false  # Matplotlib only\r\nflags: [-O,
  -Wignore]\r\n```\r\n\r\nThese values override the default values, which are equivalent
  to:\r\n\r\n```yaml\r\n# Defaults if no configuration is provided.\r\n# Note that
  the default interpreter name on MacOS and Unix is 'python3'\r\n# and 'python' on
  Windows.\r\ninterpreter: python\r\nflags: []\r\ndirectory: generated/\r\nformat:
  png\r\nlinks: true\r\ndpi: 80\r\ntight_bbox: false\r\ntransparent: false\r\n```\r\n\r\nUsing
  `pandoc-pyplot --write-example-config` will write the default configuration to a
  file `.pandoc-pyplot.yml`, which you can then customize.\r\n\r\n#### Configuration-only
  parameters\r\n\r\nThere are a few parameters that are __only__ available via the
  configuration file `.pandoc-pyplot.yml`: \r\n\r\n* `interpreter` is the name of
  the interpreter to use. For example, `interpreter: python36`;\r\n* `flags` is a
  list of strings, which are flags that are passed to the python interpreter. For
  example, `flags: [-O, -Wignore]`;\r\n* (*New in version 2.1.5.0*) `tight_bbox` is
  a boolean that determines whether to use `bbox_inches=\"tight\"` or not when saving
  Matplotlib figures. For example, `tight_bbox: true`. See [here](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html)
  for details. This is ignored for Plotly figures.\r\n* (*New in version 2.1.5.0*)
  `transparent` is a boolean that determines whether to make Matplotlib figure background
  transparent or not. This is useful, for example, for displaying a plot on top of
  a colored background on a web page. High-resolution figures are not affected. For
  example, `transparent: true`. This is ignored for Plotly figures.\r\n\r\n## Installation\r\n\r\n###
  Binaries\r\n\r\nWindows binaries are available on [GitHub](https://github.com/LaurentRDC/pandoc-pyplot/releases).
  Place the executable in a location that is in your PATH to be able to call it.\r\n\r\nIf
  you can show me how to generate binaries for other platform using e.g. Azure Pipelines,
  let me know!\r\n\r\n### Installers (Windows)\r\n\r\nWindows installers are made
  available thanks to [Inno Setup](http://www.jrsoftware.org/isinfo.php). You can
  download them from the [release page](https://github.com/LaurentRDC/pandoc-pyplot/releases/latest).\r\n\r\n###
  From Hackage/Stackage\r\n\r\n`pandoc-pyplot` is available on Hackage. Using the
  [`cabal-install`](https://www.haskell.org/cabal/) tool:\r\n\r\n```bash\r\ncabal
  update\r\ncabal install pandoc-pyplot\r\n```\r\n\r\nSimilarly, `pandoc-pyplot` is
  available on Stackage:\r\n\r\n```bash\r\nstack update\r\nstack install pandoc-pyplot\r\n```\r\n\r\n###
  From source\r\n\r\nBuilding from source can be done using [`stack`](https://docs.haskellstack.org/en/stable/README/)
  or [`cabal`](https://www.haskell.org/cabal/):\r\n\r\n```bash\r\ngit clone https://github.com/LaurentRDC/pandoc-pyplot\r\ncd
  pandoc-pylot\r\nstack install # Alternatively, `cabal install`\r\n```\r\n\r\n##
  Running the filter\r\n\r\n### Requirements\r\n\r\nThis filter requires a Python
  interpreter and at least [Matplotlib](https://matplotlib.org/) or [Plotly](https://plot.ly/python/)
  installed. The name of the Python interpreter to use can be specified in a `.pandoc-pyplot.yml`
  file; by default, `pandoc-pyplot` will use the `\"python\"` name on Windows, and
  `\"python3\"` otherwise.\r\n\r\nUse the filter with Pandoc as follows:\r\n\r\n```bash\r\npandoc
  --filter pandoc-pyplot input.md --output output.html\r\n```\r\n\r\nin which case,
  the output is HTML. Another example with PDF output:\r\n\r\n```bash\r\npandoc --filter
  pandoc-pyplot input.md --output output.pdf\r\n```\r\n\r\nPython exceptions will
  be printed to screen in case of a problem.\r\n\r\n`pandoc-pyplot` has a limited
  command-line interface. Take a look at the help available using the `-h` or `--help`
  argument:\r\n\r\n```bash\r\npandoc-pyplot --help\r\n```\r\n\r\n## Usage as a Haskell
  library\r\n\r\nTo include the functionality of `pandoc-pyplot` in a Haskell package,
  you can use the `makePlot :: Block -> IO Block` function (for single blocks) or
  `plotTransform :: Pandoc -> IO Pandoc` function (for entire documents). Variations
  of these functions exist for more advanced configurations. [Take a look at the documentation
  on Hackage](https://hackage.haskell.org/package/pandoc-pyplot).\r\n\r\n### Usage
  with Hakyll\r\n\r\nThis filter was originally designed to be used with [Hakyll](https://jaspervdj.be/hakyll/).
  In case you want to use the filter with your own Hakyll setup, you can use a transform
  function that works on entire documents:\r\n\r\n```haskell\r\nimport Text.Pandoc.Filter.Pyplot
  (plotTransform)\r\n\r\nimport Hakyll\r\n\r\n-- Unsafe compiler is required because
  of the interaction\r\n-- in IO (i.e. running an external Python script).\r\nmakePlotPandocCompiler
  :: Compiler (Item String)\r\nmakePlotPandocCompiler =\r\n  pandocCompilerWithTransformM\r\n
  \   defaultHakyllReaderOptions\r\n    defaultHakyllWriterOptions\r\n    (unsafeCompiler
  . plotTransform)\r\n```\r\n\r\nThe `plotTransformWithConfig` is also available for
  a more configurable set-up.\r\n\r\n## Warning\r\n\r\nDo not run this filter on unknown
  documents. There is nothing in `pandoc-pyplot` that can stop a Python script from
  performing **evil actions**.\r\n"
description-type: markdown
hash: d23adbfa61a9024d3fae9ab0cc836624a1c4035184b980680552e09d19013541
homepage: https://github.com/LaurentRDC/pandoc-pyplot#readme
latest: 2.3.0.1
license-name: GPL-2.0-only
maintainer: Laurent P. RenÃ© de Cotret
synopsis: A Pandoc filter to include figures generated from Python code blocks
test-bench-deps:
  base: '>=4 && <5'
  data-default-class: '>=0.1.2'
  directory: '>=0'
  filepath: '>=0'
  hspec: '>=0'
  hspec-expectations: '>=0'
  mtl: '>=2.2 && <2.3'
  pandoc-pyplot: '>=0'
  pandoc-types: '>=1.12 && <=2'
  tasty: '>=0'
  tasty-hspec: '>=0'
  tasty-hunit: '>=0'
  temporary: '>=0'
  text: '>=0'
