homepage: https://github.com/haskell/parsec
changelog-type: markdown
hash: a162d4cc8884014ba35192545cad293af0529fe11497aad8834bbaaa3dfffc26
test-bench-deps:
  base: -any
  parsec: -any
  mtl: -any
  tasty-hunit: '>=0.10 && <0.11'
  tasty: '>=1.4 && <1.5'
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>, Herbert Valerio Riedel <hvr@gnu.org>
synopsis: Monadic parser combinators
changelog: |
  ### 3.1.15.0

  - Add `INLINABLE` pragmas to most overloaded combinators
  - Support recent versions of dependencies
  - Fix memory leak in `>>=` https://github.com/haskell/parsec/issues/127

  ### 3.1.14.0

  - Add `parseFromFile` to `Text.Parsec.Text.Lazy` and `Text.Parsec.Text` (#103, #104).

  - Clarify Haddock documentation in various places (#105,#101,#102).

  - Add support for `base-4.13`.

  ### 3.1.13.0

  - Add official support for [`SafeHaskell`](http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/safe_haskell.html)

      **NOTE**: This is the first version whose `SafeHaskell` properties
      have become an intentional part of the API contract; previous
      versions were merely accidentally safe-inferred (or not depending
      on various factors; in other words, this was a fragile
      property). If you rely on `SafeHaskell` to consider module imports
      from `parsec` *safe*, this is the first version of `parsec` which
      actually guarantees a well-defined state; you can declare this
      requirement by either specifying

          build-depends: parsec >= 3.1.13.0 && < 3.2

      or, starting with `cabal-version:2.0`, via

          build-depends: parsec ^>= 3.1.13.0

  - Drop support for GHC 7.0, GHC 7.2, and GHC 7.4.1; support window
    starts with GHC 7.4.2.

  ### 3.1.12.0

  - Support limited to GHC 7.0 & GHC 7.2 only

  - Add `MonadFail` instance for `ParsecT`
  - Add `Semigroup`/`Monoid` instances for `ParsecT` (#80,#82)
  - Fix space leak in Applicative/Monad interface (#37)
  - Add `parserTrace` and `parserTraced` combinators for debugging.

  ### 3.1.11

  - Include `README.md` in package.

  ### 3.1.10

  - Most types now have a `Typeable` instance. Some instances are dropped from
    older versions of GHC (sorry about that!).
  - The token-parser now rejects Unicode numeric escape sequences for characters
    outside the Unicode range.
  - The token-parser now loses less precision when parsing literal doubles.
  - Documentation fixes and corrections.
  - We no longer test parsec builds on GHC 7.4.

  ### 3.1.9

  - Many and various updates to documentation and package description (inlcuding
    the homepage links).
  - Add an `Eq` instance for `ParseError`
  - Fixed a regression from 3.1.6: `runP` is again exported from module
    Text.Parsec.

  ### 3.1.8

  - Fix a regression from 3.1.6 related to exports from the main module.

  ### 3.1.7

  - Fix a regression from 3.1.6 related to the reported position of error messages.
    See bug #9 for details.
  - Reset the current error position on success of `lookAhead`.

  ### 3.1.6

  - Export `Text` instances from Text.Parsec
  - Make Text.Parsec exports more visible
  - Re-arrange Text.Parsec exports
  - Add functions `crlf` and `endOfLine` to Text.Parsec.Char for handling
    input streams that do not have normalized line terminators.
  - Fix off-by-one error in Token.charControl

  ### 3.1.4

  - Relax dependency on `text`

  ### 3.1.5

  - Relax dependency on `text`

  ### 3.1.3

  - Fix a regression introduced in 3.1.2 related to positions reported by error messages.
basic-deps:
  bytestring: '>=0.9.2.1 && <0.12'
  base: '>=4.5.0 && <4.17'
  text: (>=0.11.3.1 && <0.12) || (>=1.0.0.0 && <1.3) || (>=2.0 && <2.1)
  mtl: '>=1.1.1 && <2.3'
all-versions:
- '2.0'
- 2.0.0.1
- 2.1.0.0
- 2.1.0.1
- 3.0.0
- 3.0.1
- 3.1.0
- 3.1.1
- 3.1.2
- 3.1.3
- 3.1.4
- 3.1.5
- 3.1.6
- 3.1.7
- 3.1.8
- 3.1.9
- 3.1.10
- 3.1.11
- 3.1.12.0
- 3.1.13.0
- 3.1.14.0
- 3.1.15.0
author: Daan Leijen <daan@microsoft.com>, Paolo Martini <paolo@nemail.it>, Antoine
  Latter <aslatter@gmail.com>
latest: 3.1.15.0
description-type: markdown
description: |
  Parsec [![Build Status](https://travis-ci.org/haskell/parsec.svg?branch=master)](https://travis-ci.org/haskell/parsec)
  ======

  **Please refer to the [package description on Hackage](https://hackage.haskell.org/package/parsec#description) for more information.**

  A monadic parser combinator library, written by Daan Leijen. Parsec is designed
  from scratch as an industrial-strength parser library. It is simple, safe, well
  documented, has extensive libraries, good error messages, and is fast.

  Some links:

  * [Parsec on Hackage](https://hackage.haskell.org/package/parsec),
    contains the generated documentation.
  * The 2001 paper written by Daan Leijen, some what outdated
    ([PDF](https://web.archive.org/web/20140528151730/http://legacy.cs.uu.nl/daan/download/parsec/parsec.pdf),
    [HTML](https://web.archive.org/web/20140528151730/http://legacy.cs.uu.nl/daan/download/parsec/parsec.html),
    thanks to [archive.org](http://web.archive.org);
    and [PDF](https://research.microsoft.com/en-us/um/people/daan/download/parsec/parsec.pdf),
    thanks to Microsoft Research).
  * [Using Parsec](http://book.realworldhaskell.org/read/using-parsec.html),
    chapter 16 of [Real World Haskell](http://book.realworldhaskell.org/).
  * [An introduction to the Parsec library](http://kunigami.wordpress.com/2014/01/21/an-introduction-to-the-parsec-library)
    on Kunigami's blog.
  * [An introduction to parsing text in Haskell with Parsec](http://unbui.lt/#!/post/haskell-parsec-basics) on Wilson's blog.
  * Differences between Parsec and
    [Attoparsec](http://hackage.haskell.org/package/attoparsec)
    (Haskell's other prominent parser library) as explained in
    [an answer on StackExchange](http://stackoverflow.com/a/19213247).
  * Differences between Parsec and [Happy](http://www.haskell.org/happy)
    (Haskell's parser generator) as explained in two
    answers on separate StackExchange questions
    ([1](http://stackoverflow.com/a/7270904),
    [2](http://stackoverflow.com/a/14775331)).
  * Differences between Parsec and
    [Megaparsec](http://hackage.haskell.org/package/megaparsec)
    (an advanced fork of Parsec) as explained in
    [Megaparsec's README](https://github.com/mrkkrp/megaparsec#megaparsec-vs-parsec).


  By analyzing [Parsec's reverse dependencies on Hackage](http://packdeps.haskellers.com/reverse/parsec)
  we can find open source project that make use of Parsec.  For example
  [bibtex](http://hackage.haskell.org/package/bibtex),
  [ConfigFile](http://hackage.haskell.org/package/ConfigFile),
  [csv](http://hackage.haskell.org/package/csv) and
  [hjson](http://hackage.haskell.org/package/hjson).


  ## Getting started

  This requires a working version of `cabal` and `ghci`, which are part of
  any modern installation of Haskell, such as
  [Haskell Platform](https://www.haskell.org/platform).

  First install Parsec.

      cabal install parsec

  Below we show how a very simple parser that tests matching parentheses
  was made from GHCI (the interactive GHC environment), which we started
  with the `ghci` command).

  ```
  Prelude> :m +Text.Parsec
  Prelude Text.Parsec> let parenSet = char '(' >> many parenSet >> char ')' :: Parsec String () Char
  Loading package transformers-0.3.0.0 ... linking ... done.
  Loading package array-0.5.0.0 ... linking ... done.
  Loading package deepseq-1.3.0.2 ... linking ... done.
  Loading package bytestring-0.10.4.0 ... linking ... done.
  Loading package mtl-2.1.3.1 ... linking ... done.
  Loading package text-1.1.1.3 ... linking ... done.
  Loading package parsec-3.1.5 ... linking ... done.
  Prelude Text.Parsec> let parens = (many parenSet >> eof) <|> eof
  Prelude Text.Parsec> parse parens "" "()"
  Right ()
  Prelude Text.Parsec> parse parens "" "()(())"
  Right ()
  Prelude Text.Parsec> parse parens "" "("
  Left (line 1, column 2):
  unexpected end of input
  expecting "(" or ")"
  ```

  The `Right ()` results indicate successes: the parentheses matched.
  The `Left [...]` result indicates a parse failure, and is detailed
  with an error message.

  For a more thorough introduction to Parsec we recommend the links at
  the top of this README file.


  ## Contributing

  Issues (bugs, feature requests or otherwise feedback) may be reported in
  [the Github issue tracker for this project](https://github.com/haskell/parsec/issues).

  Pull-requests are also welcome.


  ## License

  See the [LICENSE](https://github.com/haskell/parsec/blob/master/LICENSE)
  file in the repository.
license-name: BSD-2-Clause
