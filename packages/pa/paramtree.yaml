homepage: https://github.com/merijn/paramtree
changelog-type: ''
hash: d63d40dcfec434c858af32327c1ca77c3230a3861796659b2b4d81834f5c4977
test-bench-deps:
  bytestring: '>=0.10 && <0.13'
  base: -any
  tasty-golden: '>=2.0 && <2.4'
  paramtree: -any
  tasty-hunit: '>=0.9 && <0.11'
  temporary: '>=1.2 && <1.4'
  tasty: '>=0.11 && <1.5'
maintainer: Merijn Verstraaten <merijn@inconsistent.nl>
synopsis: Generate labelled test/benchmark trees from sets of parameters
changelog: ''
basic-deps:
  base: '>=4.9 && <5'
  containers: '>=0.4 && <0.7'
all-versions:
- 0.1.1
- 0.1.1.1
- 0.1.2
author: Merijn Verstraaten
latest: 0.1.2
description-type: markdown
description: |
  ParamTree
  =========
  [![BSD3](https://img.shields.io/badge/License-BSD-blue.svg)](https://en.wikipedia.org/wiki/BSD_License)
  [![Hackage](https://img.shields.io/hackage/v/paramtree.svg)](https://hackage.haskell.org/package/paramtree)
  [![hackage-ci](https://matrix.hackage.haskell.org/api/v2/packages/paramtree/badge)](https://matrix.hackage.haskell.org/#/package/paramtree)
  [![Build Status](https://travis-ci.org/merijn/paramtree.svg)](https://travis-ci.org/merijn/paramtree)

  **ParamTree** library for generating labelled test/benchmark trees from sets of
  parameters. Example usecases include criterion benchmark trees or tasty test
  trees.

  Example
  -------

  ```haskell
  import Test.Tasty
  import Test.Tasty.HUnit

  genTestCase :: Int -> Bool -> Char -> String -> TestTree
  genTestCase i b c name = testCase name $ {- your code here -}

  params = simpleParam "Int" [1,2]
         . simpleParam "Bool" [True]
         . simpleParam "Char" "xyz"

  main :: IO ()
  main = defaultMain $ testTree genTestCase params
    where
      testTree = growTree (Just "/") testGroup "my tests"
  ```

  This generates a tasty TestTree with all combinations of values passed to
  `genTestCase`. If the `Maybe String` argument is provided like in the above
  example, groups with a single entry, such as "Bool" get collapsed into their
  parent groups. So instead of a "1 Int" group containing a "True Bool" group
  they get collapsed into a single "1 Int/True Bool" group, where the "/"
  separator is the one specified by `Just "/"`.
license-name: BSD-3-Clause
