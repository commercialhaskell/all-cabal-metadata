homepage: https://github.com/j-mie6/parsley-garnish
changelog-type: markdown
hash: 1b4eb890e15afba128571c6940777bb32dc3efba8391c574614d6e16789e3e1b
test-bench-deps: {}
maintainer: Jamie Willis <j.willis19@imperial.ac.uk>
synopsis: A collection of GHC plugins to work with parsley
changelog: |-
  # Revision history for `parsley-garnish`

  ## 0.1.0.0 -- 2021-06-10

  * First version. Released on an unsuspecting world.

  ## 0.1.0.1 -- 2021-06-11

  * Support for GHC 9.0 in place.

  ## 1.0.0.0 -- 2021-06-12

  * Switched to support `parsley-core` as the base
  * Introduced the `Parsley.Internal.Bridge` module to provide functions for the plugin to latch onto
basic-deps:
  ghc: '>=8.6 && <9.2'
  base: '>=4.10 && <5'
  syb: '>=0.7 && <0.8'
  ghc-tcplugins-extra: '>=0.3 && <0.5'
  parsley-core: '>=1 && <2'
  template-haskell: '>=2.14 && <3'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 1.0.0.0
author: Jamie Willis, Garnish Contributors
latest: 1.0.0.0
description-type: markdown
description: "# Parsley Garnish ![GitHub release](https://img.shields.io/github/v/release/j-mie6/parsley-garnish)
  [![GitHub license](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://github.com/j-mie6/parsley-garnish/blob/master/LICENSE)
  ![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/j-mie6/parsley-garnish/latest)
  [![Hackage Version](https://img.shields.io/hackage/v/parsley-garnish)](https://hackage.haskell.org/package/parsley-garnish)
  ![Dependent repos (via libraries.io)](https://img.shields.io/librariesio/dependent-repos/hackage/parsley-garnish)\nThis
  repo houses the `parsley`-specific GHC plugins to help make writing \nparsers with
  `parsley` take less boilerplate.\n\nEach plugin here will in some way interact to
  produce values of either \ntype `Parsley.WQ` or `Parsley.Defunctionalized.Defunc`.
  These datatypes \nare how `parsley`'s API interacts with user-land functions.\n\nBy
  default, the user can produce values of these types by using the \n`makeQ` function:\n\n```hs\nmakeQ
  :: Quapplicative q => a -> Code a -> q a\n```\n\nWhere both `WQ` and `Defunc` are
  instances of `Quapplicative`. However, \nthis can be tedious to do by hand.\n\n##
  `OverloadedQuotes`\nThe first plugin found in the garnish hijacks the regular Haskell
  syntax \nfor _Untyped_ Template Haskell (UTH). Since `parsley` uses _Typed_ \nTemplate
  Haskell (TTH), it is unlikely that a user of the library will \nneed to be using
  UTH in the same file (with the possible exception of \ntop-level splices, or quotes
  other than the basic `[|x|]`). This plugin \nwill transform every UTH quote in a
  file so that it represents a value of \n`Quapplicative q => q a`. This transformation
  is as follows:\n\n```hs\nqsucc :: Quapplicative q => q Int -> q Int\nqsucc qx =
  [|$(qx) + 1|]\n-- goes to:\nqsucc qx = makeQ (_val qx + 1) [||$$(_code qx) + 1||]\n```\n\nValues
  of `Defunc` can also be spliced in directly:\n\n```hs\ndiffcons :: Defunc a -> Defunc
  ([a] -> [a]) -> Defunc ([a] -> [a])\ndiffcons qx qdxs = [| $(COMPOSE) ($(CONS) $(qx))
  $(qdxs) |]\n```\n\nAnd lambda abstraction works too (along with any other syntax):\n\n```hs\ndiffcons'
  :: Defunc (a -> ([a] -> [a]) -> [a] -> [a])\ndiffcons' = [|\\x dxs -> $(diffcons
  [|x|] [|dxs|])|]\n```\n\nThe disadvantage to this plugin _currently_ is that it
  does not make any \nattempt to  leverage the specialised parts of `Defunc` to improve
  the code \ngeneration and inspectibility. The user would be left to use this manually."
license-name: BSD-3-Clause
