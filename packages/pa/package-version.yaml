all-versions:
- 0.1.0.0
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
author: Thomas Bidne
basic-deps:
  base: '>=4.14.1.0 && <4.22'
  bytestring: '>=0.10.10.0 && <0.13'
  deepseq: '>=1.4.4.0 && <1.6'
  template-haskell: '>=2.16.0.0 && <2.24'
  text: '>=1.2.3.2 && <2.2'
changelog: |
  # Revision history for package-version

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## [0.4.1] -- 2025-07-17
  ### Changed
  * Doctests use cabal external command, hence no longer part of test suite.
    Therefore `--enable-tests` will no longer incur a GHC dependency.

  ## [0.4] -- 2024-08-13
  ### Removed
  * `Pretty` instances removed as these were not very useful.
  * `Read` instance removed as it was of dubious utility (`fromText` is better).

  ### Changed
  * Internal representation now uses `NonEmpty Word` instead of `[Int]`.
  * Because the representation now preserves the desired invariants (non-empty
    and non-negative), the type is now fully exposed from the non-internal
    module. In particular, the original data constructor `UnsafePackageVersion`
    is replaced with `MkPackageVersion`.

  ### Added
  * Updated bounds on `base`, `bytestring`, and `template-haskell`.
  * Added `HasCallStack` to `unsafePackageVersion`.

  ## [0.3] -- 2022-10-21
  ### Changed
  * Minimum length is now 1, not 2. This is due to cabal allowing package
    versions with a single digit.
  * Accordingly, `mempty` is now `[0]`, not `[0,0]`.
  * The `ValidationErrorTooShort` data constructor renamed to `ValidationErrorEmpty`.
  * Field `unPackageVersion` removed as it allows unsafe construction via record
    update syntax. This is now an ordinary function.

  ### Added
  * GHC 9.4 support.

  ## [0.2] -- 2022-07-25
  ### Changed
  * Renamed error data constructors to improve consistency.
  * Modified errors' `Exception` instances to use `pretty` over default `show`.

  ### Added
  * Added `Generic` instance to `PackageVersion`.

  ### Fixed
  * Used `bytestring` for reading file over bespoke function.

  ## [0.1.0.0] -- 2021-12-19

  * First version. Released on an unsuspecting world.

  [0.4.1]: https://github.com/tbidne/package-version/compare/0.4..0.4.1
  [0.4]: https://github.com/tbidne/package-version/compare/0.3..0.4
  [0.3]: https://github.com/tbidne/package-version/compare/0.2..0.3
  [0.2]: https://github.com/tbidne/package-version/compare/0.1.0.0..0.2
  [0.1.0.0]: https://github.com/tbidne/package-version/releases/tag/0.1.0.0
changelog-type: markdown
description: |-
  <div align="center">

  # Package Version


  [![Hackage](https://img.shields.io/hackage/v/package-version)](https://hackage.haskell.org/package/package-version)
  [![ci](http://img.shields.io/github/actions/workflow/status/tbidne/package-version/ci.yaml?branch=main)](https://github.com/tbidne/package-version/actions/workflows/ci.yaml)
  [![BSD-3-Clause](https://img.shields.io/github/license/tbidne/package-version?color=blue)](https://opensource.org/licenses/BSD-3-Clause)

  </div>

  # Package Description

  This package defines a `PackageVersion` type that represents [PVP](https://pvp.haskell.org/) version numbers. We provide functionality for reading these numbers from cabal files at both runtime and compile-time, the latter being useful when implementing `--version` options in executables. See the haddocks on hackage for more information.

  ## Alternatives

  Reading the cabal version can also be achieved by utilizing the generated `Paths_<pkg-name>` module. For instance, for a package named `foo`, we first add the generated module to our list of modules in `foo.cabal`:

  ```cabal
  cabal-version:      2.4
  name:               foo
  version:            0.1

  ...

  library
    other-modules:   Paths_foo
    autogen-modules: Paths_foo
  ```

  Then we can reference this in our code:

  ```haskell
  import Data.List (intercalate)
  import Data.Version (Version(versionBranch))
  import Paths_foo qualified as Paths

  vsn :: String
  vsn = intercalate "." $ fmap show $ versionBranch Paths.version
  ```

  See the [documentation](https://cabal.readthedocs.io/en/3.10/cabal-package.html#accessing-data-files-from-package-code) for more details.
description-type: markdown
hash: e2184b20fc078988acc00ac5efe814354a67c6254b398a482998145bc0ce9e41
homepage: https://github.com/tbidne/package-version/
latest: 0.4.1
license-name: BSD-3-Clause
maintainer: tbidne@protonmail.com
synopsis: A package for retrieving a package's version number.
test-bench-deps:
  base: '>=0'
  hedgehog: '>=1.0.2 && <1.6'
  package-version: '>=0'
  tasty: '>=1.1.0.3 && <1.6'
  tasty-hedgehog: '>=1.0.0.2 && <1.5'
  tasty-hunit: '>=0.9 && <0.11'
  text: '>=0'
