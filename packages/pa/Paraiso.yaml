all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.1.5
author: Takayuki Muranushi
basic-deps:
  array: '>=0.2'
  base: '>=4 && <5'
  containers: '>=0.4.0'
  directory: '>=1.0'
  failure: '>=0.1.0'
  fgl: '>=5.4.2'
  filepath: '>=1.2.0'
  mtl: '>=2.0.1'
  numeric-prelude: '>=0.2'
  random: '>=1.0.0'
  text: '>=0.11.1'
  typelevel-tensor: '>=0.1 && <1'
  vector: '>=0.7.1'
changelog: ''
changelog-type: ''
description: |-
  The purpose of this project is to design a high-level language
  for implementing explicit partial-differential equations solvers
  on supercomputers as well as today’s advanced personal
  computers.
  A language to describe the knowledge on algebraic concepts,
  physical equations, integration algorithms, optimization
  techniques, and hardware designs --- all the necessaries of the
  simulations in abstract, modular, re-usable and combinable forms.

  > How to use

  The module "Language.Paraiso.OM.Builder" contains the
  @Builder@ monad, its typeclass instance declarations and
  functions that can be used to build Paraiso
  programs. Reserved words are @load@, @store@, @imm@,
  @loadIndex@, @loadSize@, @shift@, @reduce@ and
  @broadcast@.

  Paraiso frontend uses "Data.Tensor.Typelevel"
  <http://hackage.haskell.org/package/typelevel-tensor>,
  the library for tensor calculus of
  arbitrary rank and dimension. @Vector@ and @Axis@ are two main
  concepts. The type @Vector@ represents rank-1 tensor, and tensors
  of higher ranks are recursively defined as @Vector@ of
  @Vector@s. With @Axis@ you can refer to the components of
  @Vector@s, compose them, or contract them. See the wiki
  <http://www.paraiso-lang.org/wiki/> and the paper
  <http://arxiv.org/abs/1204.4779> for more detail. Examples
  are in <https://github.com/nushio3/Paraiso/tree/master/examples>.

  * 0.3.1.5 : Catch up to stack lts-3.16/ghc 7.10.2, thanks to Justus Sagemüller's patch!

  * 0.3.0.0 /Doughnut/ : refined interface and support for cyclic boundary conditions.

  * 0.2.0.0 /Companion/ : genetic algorithm support for automated tuning.

  * 0.1.0.0 /Binary/ : enhanced backend, code generator for OpenMP and CUDA

  * 0.0.0.0 /Atmosphere/ : code generator for single CPU
description-type: haddock
hash: 5b9b0a5685c4534607c0dedaf2c3d37a0068c0c9571c9c1b55f19cbee8f51ca8
homepage: http://www.paraiso-lang.org/wiki/index.php/Main_Page
latest: 0.3.1.5
license-name: BSD-3-Clause
maintainer: muranushi@gmail.com
synopsis: a code generator for partial differential equations solvers.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=2'
  array: '>=0.2'
  base: '>=4 && <5'
  containers: '>=0.4.0'
  directory: '>=1.0'
  fgl: '>=5.4.2'
  filepath: '>=1.2.0'
  mtl: '>=2.0.1'
  numeric-prelude: '>=0.2'
  process: '>=0'
  random: '>=1.0.0'
  repa: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  test-framework-quickcheck2: '>=0'
  text: '>=0.11.1'
  typelevel-tensor: '>=0.1.1 && <1'
  vector: '>=0.7.1'
