homepage: https://github.com/pandoc/pandoc-lua-marshal
changelog-type: markdown
hash: 78bca3331a7bae584026ce120c00290cdeeb5b834fd70098f7f42be8a08616e8
test-bench-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.12'
  hslua-marshalling: '>=2.1 && <2.3'
  base: '>=4.12 && <5'
  text: '>=1.1.1.0 && <1.3'
  lua: '>=2.1 && <2.3'
  pandoc-types: '>=1.22.1 && <1.23'
  containers: '>=0.6 && <0.7'
  pandoc-lua-marshal: -any
  tasty-quickcheck: '>=0.8 && <0.11'
  tasty-hunit: '>=0.9'
  tasty: '>=0.11'
  QuickCheck: '>=2.4 && <2.15'
  hslua: '>=2.1 && <2.3'
  tasty-lua: '>=1.0'
  safe: '>=0.3 && <0.4'
maintainer: Albert Krewinkel <albert@zeitkraut.de>
synopsis: Use pandoc types in Lua
changelog: "# Changelog\n\n`pandoc-lua-marshal` uses [PVP Versioning][].\n\n## 0.1.6\n\nReleased
  2022-06-03.\n\n-   Fix `applyFully`: the function always traversed the document\n
  \   type-wise, never topdown.\n\n-   Avoid shadowing of a function name that was
  added in\n    hslua-2.2.\n\n-   Support concatenating of Pandoc values with the
  `..` operator.\n\n## 0.1.5.1\n\nReleased 2022-02-19.\n\n-   Relax upper bound for
  lua and hslua.\n\n## 0.1.5\n\nReleased 2022-02-17.\n\n-   Allow any type of callable
  object as argument to List\n    functions `filter`, `map`, and `find_if`. These
  previously\n    required the argument to be of type `function`, which was too\n
  \   restrictive.\n    \n-   Inline: the type of Image captions is now `Inlines`
  instead\n    of `List`.\n\n## 0.1.4\n\nReleased 2022-01-29.\n\n-   Export AttributeList
  type and marshaling functions from\n    `Text.Pandoc.Marshal.Attr`, namely `typeAttributeList`,\n
  \   `peekAttributeList`, and `pushAttributeList`.\n\n-   Update to hslua 2.1, making
  use of the new utility functions.\n\n## 0.1.3.1\n\nReleased 2022-01-14.\n\n-   Fixed
  a bug in `List.include` that was causing the Lua stack\n    to overflow when the
  function was applied to long lists.\n\n## 0.1.3\n\nReleased 2021-12-23.\n\n### Lua
  changes\n\n-   The traversal order of filters can now be selected by setting\n    the
  key `traverse` to either `'topdown'` or `'typewise'`; the\n    default remains `'typewise'`.\n\n
  \   Topdown traversals can be cut short by returning `false` as a\n    second value
  from the filter function. No child-element of\n    the returned element is processed
  in that case.\n\n-   All types can be compared. Previously, comparing values of\n
  \   different types would lead to errors in a number of cases.\n\n-   Lists now
  have an `__eq` metamethod. List equality is checked\n    by comparing both lists
  element-wise. Two lists are equal if\n    they have the same type and have equal
  elements.\n\n-   If start indices in `List:find` and `List:find_if` are\n    negative
  the start index is relative to the list length.\n\n-   TableFoot, TableHead, and
  Row values are marshaled as\n    userdata objects.\n\n### Haskell code\n\n-   Text.Pandoc.Lua.Marshal.Filter
  exports the new type\n    `WalkingOrder`. The type `Filter` now contains the the\n
  \   traversal specifier as a field.\n\n-   New modules for TableFoot, TableHead,
  and Row, defining the\n    usual marshaling methods and constructor functions for
  these\n    types.\n\n## 0.1.2\n\nReleased 2021-12-10.\n\n-   Restored backward compatible
  retrieval of Rows. Cells can be\n    either a userdata value or a table.\n\n## 0.1.1\n\nReleased
  2021-12-10.\n\n### Behavior of Lua objects\n\n-   Lists of Inline values and lists
  of Block values are now\n    pushed with their own metatables (named \"Inlines\"
  and\n    \"Blocks\").\n\n-   The types `Block`, `Blocks`, `Inline`, `Inlines`, and\n
  \   `Pandoc` now all have a method `walk` that applies a filter\n    to the document
  subtree.\n\n-   Changed behavior for *Cell* values: these are now pushed as\n    userdata;
  the old table-based structure is still accepted\n    when retrieving a Cell from
  the stack.\n\n### Haskell code\n\n-   Module Text.Pandoc.Lua.Marshal.Cell exports
  the constructor\n    function `mkCell`, the type definition `typeCell` and the\n
  \   fuzzy peeker `peekCellFuzzy`.\n\n-   Added a new module `Text.Pandoc.Lua.Marshal.Filter`
  that\n    handles Lua filters.\n\n-   Added functions for filtering:\n\n    -   Module
  Text.Pandoc.Lua.Marshal.Block:\n        -   `walkBlockSplicing`: walk an AST element,
  applying a\n            filter on each Block and splicing the result back\n            into
  the list.\n        -   `walkBlocks`: walk an AST element, modifying lists of\n            Block
  elements by applying the `Blocks` filter\n            function.\n    -   Module
  Text.Pandoc.Lua.Marshal.Inline:\n        -   `walkInlineSplicing`: walk an AST element,
  applying a\n            filter on each Inline and splicing the result back\n            into
  the list.\n        -   `walkInlines`: walk an AST element, modifying lists\n            of
  Inline elements by applying the `Inlines` filter\n            function.\n\n    -
  \  Module Text.Pandoc.Lua.Marshal.Pandoc:\n        -   `applyFully`: fully apply
  a filter on a Pandoc\n            document.\n\n-   New internal modules:\n\n    -
  \  Text.Pandoc.Lua.SpliceList: defines a helper type used to\n        walk a list
  of elements in a way that replaces the\n        element by splicing the function
  result back into the\n        list.\n\n        The module is a slight rewrite of
  pandoc’s\n        `SingletonsList`.\n\n    -   Text.Pandoc.Lua.Walk: handles walking
  of the document\n        tree while modifying elements via filter functions. This\n
  \       is a re-implementation of large parts of pandoc’s\n        T.P.Lua.Filter
  module.\n\n    -   Text.Pandoc.Lua.Marshal.Shared: provides helper functions\n        used
  in multiple Lua type definitions.\n\n## 0.1.0.1\n\nReleased 2021-11-28.\n\n-   Added
  test-simpletable.lua to the list of extra-source-files.\n\n## 0.1.0\n\nReleased
  2021-11-28.\n\n-   Released into the wild. May it live long and prosper.\n\n  [PVP
  Versioning]: https://pvp.haskell.org\n"
basic-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.12'
  hslua-marshalling: '>=2.1 && <2.3'
  base: '>=4.12 && <5'
  text: '>=1.1.1.0 && <1.3'
  lua: '>=2.1 && <2.3'
  pandoc-types: '>=1.22.1 && <1.23'
  containers: '>=0.6 && <0.7'
  hslua: '>=2.1 && <2.3'
  safe: '>=0.3 && <0.4'
all-versions:
- 0.1.0
- 0.1.0.1
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.4
- 0.1.5
- 0.1.5.1
- 0.1.6
author: Albert Krewinkel, John MacFarlane
latest: 0.1.6
description-type: markdown
description: |
  # pandoc-lua-marshal

  [![GitHub CI][]][1]
  [![Hackage][]][2]
  [![Stackage Lts][]][3]
  [![Stackage Nightly][]][4]
  [![MIT license]][5]

  Use pandoc types in Lua.

  [GitHub CI]: https://github.com/tarleb/pandoc-lua-marshal/workflows/CI/badge.svg
  [1]: https://github.com/tarleb/pandoc-lua-marshal/actions
  [Hackage]: https://img.shields.io/hackage/v/pandoc-lua-marshal.svg?logo=haskell
  [2]: https://hackage.haskell.org/package/pandoc-lua-marshal
  [Stackage Lts]: http://stackage.org/package/pandoc-lua-marshal/badge/lts
  [3]: https://stackage.org/lts/package/pandoc-lua-marshal
  [Stackage Nightly]: https://stackage.org/package/pandoc-lua-marshal/badge/nightly
  [4]: https://stackage.org/nightly/package/pandoc-lua-marshal
  [MIT license]: https://img.shields.io/badge/license-MIT-blue.svg
  [5]: LICENSE

  ## Description

  This package provides functions to marshal and unmarshal pandoc
  document types to and from Lua.

  The values of most types are pushed to pandoc as "userdata"
  objects that wrap a stable pointer to the Haskell value; these
  objects come with methods to access and modify their properties.

  Sequences are pushed as normal Lua tables, but are augmented with
  convenience functions.
license-name: MIT
