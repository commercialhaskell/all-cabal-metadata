homepage: https://github.com/pandoc/pandoc-lua-marshal
changelog-type: markdown
hash: 5798ccad9949c95f366f729a9ec816c88a656d086b8685f32882ae6a47b28130
test-bench-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.12'
  hslua-marshalling: '>=2.0.1 && <2.1'
  base: '>=4.12 && <5'
  text: '>=1.1.1.0 && <1.3'
  lua: '>=2.0.2 && <2.1'
  pandoc-types: '>=1.22.1 && <1.23'
  containers: '>=0.6 && <0.7'
  pandoc-lua-marshal: -any
  tasty-quickcheck: '>=0.8 && <0.11'
  tasty-hunit: '>=0.9'
  tasty: '>=0.11'
  QuickCheck: '>=2.4 && <2.15'
  hslua: '>=2.0.1 && <2.1'
  tasty-lua: '>=1.0'
  safe: '>=0.3 && <0.4'
maintainer: Albert Krewinkel <albert@zeitkraut.de>
synopsis: Use pandoc types in Lua
changelog: |
  # Changelog

  `pandoc-lua-marshal` uses [PVP Versioning][].

  ## 0.1.3.1

  Released 2022-01-14.

  -   Fixed a bug in `List.include` that was causing the Lua stack
      to overflow when the function was applied to long lists.

  ## 0.1.3

  Released 2021-12-23.

  ### Lua changes

  -   The traversal order of filters can now be selected by setting
      the key `traverse` to either `'topdown'` or `'typewise'`; the
      default remains `'typewise'`.

      Topdown traversals can be cut short by returning `false` as a
      second value from the filter function. No child-element of
      the returned element is processed in that case.

  -   All types can be compared. Previously, comparing values of
      different types would lead to errors in a number of cases.

  -   Lists now have an `__eq` metamethod. List equality is checked
      by comparing both lists element-wise. Two lists are equal if
      they have the same type and have equal elements.

  -   If start indices in `List:find` and `List:find_if` are
      negative the start index is relative to the list length.

  -   TableFoot, TableHead, and Row values are marshaled as
      userdata objects.

  ### Haskell code

  -   Text.Pandoc.Lua.Marshal.Filter exports the new type
      `WalkingOrder`. The type `Filter` now contains the the
      traversal specifier as a field.

  -   New modules for TableFoot, TableHead, and Row, defining the
      usual marshaling methods and constructor functions for these
      types.

  ## 0.1.2

  Released 2021-12-10.

  -   Restored backward compatible retrieval of Rows. Cells can be
      either a userdata value or a table.

  ## 0.1.1

  Released 2021-12-10.

  ### Behavior of Lua objects

  -   Lists of Inline values and lists of Block values are now
      pushed with their own metatables (named "Inlines" and
      "Blocks").

  -   The types `Block`, `Blocks`, `Inline`, `Inlines`, and
      `Pandoc` now all have a method `walk` that applies a filter
      to the document subtree.

  -   Changed behavior for *Cell* values: these are now pushed as
      userdata; the old table-based structure is still accepted
      when retrieving a Cell from the stack.

  ### Haskell code

  -   Module Text.Pandoc.Lua.Marshal.Cell exports the constructor
      function `mkCell`, the type definition `typeCell` and the
      fuzzy peeker `peekCellFuzzy`.

  -   Added a new module `Text.Pandoc.Lua.Marshal.Filter` that
      handles Lua filters.

  -   Added functions for filtering:

      -   Module Text.Pandoc.Lua.Marshal.Block:
          -   `walkBlockSplicing`: walk an AST element, applying a
              filter on each Block and splicing the result back
              into the list.
          -   `walkBlocks`: walk an AST element, modifying lists of
              Block elements by applying the `Blocks` filter
              function.
      -   Module Text.Pandoc.Lua.Marshal.Inline:
          -   `walkInlineSplicing`: walk an AST element, applying a
              filter on each Inline and splicing the result back
              into the list.
          -   `walkInlines`: walk an AST element, modifying lists
              of Inline elements by applying the `Inlines` filter
              function.

      -   Module Text.Pandoc.Lua.Marshal.Pandoc:
          -   `applyFully`: fully apply a filter on a Pandoc
              document.

  -   New internal modules:

      -   Text.Pandoc.Lua.SpliceList: defines a helper type used to
          walk a list of elements in a way that replaces the
          element by splicing the function result back into the
          list.

          The module is a slight rewrite of pandoc’s
          `SingletonsList`.

      -   Text.Pandoc.Lua.Walk: handles walking of the document
          tree while modifying elements via filter functions. This
          is a re-implementation of large parts of pandoc’s
          T.P.Lua.Filter module.

      -   Text.Pandoc.Lua.Marshal.Shared: provides helper functions
          used in multiple Lua type definitions.

  ## 0.1.0.1

  Released 2021-11-28.

  -   Added test-simpletable.lua to the list of extra-source-files.

  ## 0.1.0

  Released 2021-11-28.

  -   Released into the wild. May it live long and prosper.

    [PVP Versioning]: https://pvp.haskell.org
basic-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.12'
  hslua-marshalling: '>=2.0.1 && <2.1'
  base: '>=4.12 && <5'
  text: '>=1.1.1.0 && <1.3'
  lua: '>=2.0.2 && <2.1'
  pandoc-types: '>=1.22.1 && <1.23'
  containers: '>=0.6 && <0.7'
  hslua: '>=2.0.1 && <2.1'
  safe: '>=0.3 && <0.4'
all-versions:
- 0.1.0
- 0.1.0.1
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
author: Albert Krewinkel, John MacFarlane
latest: 0.1.3.1
description-type: markdown
description: |
  # pandoc-lua-marshal

  [![GitHub CI][]][1]
  [![Hackage][]][2]
  [![Stackage Lts][]][3]
  [![Stackage Nightly][]][4]
  [![MIT license]][5]

  Use pandoc types in Lua.

  [GitHub CI]: https://github.com/tarleb/pandoc-lua-marshal/workflows/CI/badge.svg
  [1]: https://github.com/tarleb/pandoc-lua-marshal/actions
  [Hackage]: https://img.shields.io/hackage/v/pandoc-lua-marshal.svg?logo=haskell
  [2]: https://hackage.haskell.org/package/pandoc-lua-marshal
  [Stackage Lts]: http://stackage.org/package/pandoc-lua-marshal/badge/lts
  [3]: https://stackage.org/lts/package/pandoc-lua-marshal
  [Stackage Nightly]: https://stackage.org/package/pandoc-lua-marshal/badge/nightly
  [4]: https://stackage.org/nightly/package/pandoc-lua-marshal
  [MIT license]: https://img.shields.io/badge/license-MIT-blue.svg
  [5]: LICENSE

  ## Description

  This package provides functions to marshal and unmarshal pandoc
  document types to and from Lua.

  The values of most types are pushed to pandoc as "userdata"
  objects that wrap a stable pointer to the Haskell value; these
  objects come with methods to access and modify their properties.

  Sequences are pushed as normal Lua tables, but are augmented with
  convenience functions.
license-name: MIT
