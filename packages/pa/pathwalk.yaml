all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
author: Christine Dodrill
basic-deps:
  base: '>=3 && <5'
  directory: '>=1.2'
  filepath: '>=1.3'
  transformers: '>=0.3.0.0'
changelog: ''
changelog-type: ''
description: |-
  "System.Directory.PathWalk" is an implementation of Python's excellent
  os.walk function.  Given a root directory, it recursively scans all
  subdirectories, calling a callback with directories and files it finds.
  Importantly, it calls the callback as soon as it finishes scanning each
  directory to allow the caller to begin processing results immediately.

  Maximum memory usage is O(N+M) where N is the depth of the tree and M
  is the maximum number of entries in a particular directory.

  > import System.Directory.PathWalk
  >
  > pathWalk "some/directory" $ \root dirs files -> do
  >   forM_ files $ \file ->
  >     when (".hs" `isSuffixOf` file) $ do
  >       putStrLn $ joinPath [root, file]
description-type: haddock
hash: e12cc53b1f4d19e96afc22a9d8607862f41c6bef638101f4c0a16065443df43f
homepage: https://github.com/Xe/pathwalk
latest: 0.3.1.2
license-name: MIT
maintainer: xena@yolo-swag.com
synopsis: Path walking utilities for Haskell programs
test-bench-deps:
  base: '>=0'
  pathwalk: '>=0'
