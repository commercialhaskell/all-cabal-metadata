homepage: https://github.com/commercialhaskell/pantry#readme
changelog-type: markdown
hash: 43c3a42eff128814a3bae33c257692e8e45ea72f83add4c0fc1ae5f8fc19aef1
test-bench-deps:
  http-client: -any
  static-bytes: -any
  exceptions: -any
  rio: -any
  zip-archive: -any
  internal: -any
  bytestring: -any
  unliftio: -any
  Cabal: '>=3 && <3.11'
  path: -any
  base: '>=4.10 && <5'
  time: -any
  persistent: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  persistent-template: -any
  rio-orphans: -any
  pantry: -any
  generic-deriving: -any
  aeson-warning-parser: '>=0.1.1'
  unix-compat: -any
  hedgehog: -any
  casa-types: -any
  conduit: -any
  rio-prettyprint: '>=0.1.7.0'
  crypton-conduit: -any
  hackage-security: -any
  http-download: '>=0.2.1.0'
  conduit-extra: -any
  memory: -any
  containers: -any
  tar-conduit: '>=0.4.0'
  ansi-terminal: -any
  casa-client: '>=0.0.2'
  text-metrics: -any
  http-client-tls: '>=0.3.6.2'
  raw-strings-qq: -any
  network-uri: -any
  mtl: -any
  crypton: -any
  filelock: -any
  digest: -any
  transformers: -any
  QuickCheck: -any
  http-conduit: -any
  resourcet: -any
  http-types: -any
  companion: -any
  persistent-sqlite: '>=2.9.3'
  aeson: -any
  path-io: -any
  primitive: -any
  yaml: -any
  vector: -any
  hpack: '>=0.35.3'
maintainer: michael@snoyman.com
synopsis: Content addressable Haskell package management
changelog: "# Changelog for pantry\r\n\r\n## v0.9.3.1\r\n\r\n* Depend on `aeson-warning-parser-0.1.1`.\r\n\r\n##
  v0.9.3\r\n\r\n* Add error S-628 (`LocalNoArchiveFileFound`).\r\n* Depend on `rio-prettyprint-0.1.7.0`.\r\n\r\n##
  v0.9.2\r\n\r\n* `defaultCasaRepoPrefix` references https://casa.stackage.org, instead
  of\r\n  https://casa.fpcomplete.com.\r\n* Depend on `crypton` instead of `cryptonite`.\r\n*
  Depend on `tar-conduit-0.4.0`, which will tolerate long filenames and\r\n  directory
  names in archives created by `git archive`.\r\n\r\n## v0.9.1\r\n\r\n* Expose module
  `Pantry.SQLite`.\r\n\r\n## v0.9.0\r\n\r\n* Remove module `Pantry.Internal.AesonExtended`
  and depend on\r\n  `aeson-warning-parser` package.\r\n* Remove module `Pantry.Internal.Companion`
  and depend on `companion` package.\r\n* Remove module `Pantry.Internal.StaticBytes`
  and depend on `static-bytes`\r\n  package.\r\n* Remove module `Pantry.Internal`,
  previously exposed only for testing.\r\n* Update Hackage bootstrap root key set.\r\n\r\n##
  v0.8.3\r\n\r\n* Expose `withPantryConfig'`, which allows for optional use of Casa.\r\n
  \ `NoCasaConfig` is now a data constructor of `PantryException`.\r\n* `withRepo`,
  in the case of Git, will now, if necessary, fetch the specific\r\n  commit. (For
  example, GitHub repositories include the commits of unmerged pull\r\n  requests
  but these are not fetched when the repository is cloned.)\r\n\r\n## v0.8.2.2\r\n\r\n*
  Add error S-395 (`NoLocalPackageDirFound`).\r\n\r\n## v0.8.2.1\r\n\r\n* On Windows,
  avoid fatal `tar: Cannot connect to C: resolve failed` bug when\r\n  archiving repository
  submodules.\r\n\r\n## v0.8.2\r\n\r\n* `PantryException` is now an instance of the\r\n
  \ `Text.PrettyPrint.Leijen.Extended.Pretty` class (provided by the\r\n  `rio-prettyprint`
  package).\r\n* Module `Pantry` now exports `FuzzyResults`, `Mismatch` and `SafeFilePath`
  (and\r\n  `mkSafeFilePath`), used in data constructors of `PantryException`.\r\n\r\n##
  v0.8.1\r\n\r\n* Support `hpack-0.35.1`, and prettier `HpackLibraryException` error
  messages.\r\n\r\n## v0.8.0\r\n\r\n* `findOrGenerateCabalFile`, `loadCabalFilePath`,
  `loadCabalFile` and\r\n  `loadCabalFileRaw` no longer assume that the program name
  used by Hpack (the\r\n  library) is \"stack\", and take a new initial argument of
  type `Maybe Text` to\r\n  specify the desired program name. The default is \"hpack\".\r\n\r\n##
  v0.7.1\r\n\r\n* To support the Haskell Foundation's\r\n  [Haskell Error Index](https://errors.haskell.org/)
  initiative, all Pantry\r\n  error messages generated by Pantry itself begin with
  an unique code in the\r\n  form `[S-nnn]`, where `nnn` is a three-digit number.\r\n\r\n##
  v0.7.0\r\n\r\n* Change `defaultHackageSecurityConfig` such that field\r\n  `hscIgnoreExpiry
  = True`, to be consistent with the defaults of the\r\n  `WithJSONWarnings HackageSecurityConfig`
  instance of `FromJSON`.\r\n\r\n## v0.6.0\r\n\r\n* Rename `HackageSecurityConfig`
  as `PackageIndexConfig`,\r\n  `defaultHackageSecurityConfig` as `defaultPackageIndexConfig`,
  and\r\n  `pcHackageSecurity` field of `PantryConfig` as `pcPackageIndex`.\r\n* Expose
  new `HackageSecurityConfig` and `defaultHackageSecurityConfig`. The\r\n  former
  represents Hackage Security configurations (only - no download prefix).\r\n* Change
  the data constructor of `PackageIndexConfig` to have fields for a\r\n  download
  prefix (type `Text`) and of type `HackageSecurityConfig`.\r\n* The `WithJSONWarnings
  PackageIndexConfig` instance of `FromJSON` now assigns\r\n  default value `defaultHackageSecurityConfig`
  if the `hackage-security` key is\r\n  absent from the JSON object.\r\n* Expose `defaultDownloadPrefix`,
  for the official Hackage server.\r\n\r\n## v0.5.7\r\n\r\n* Expose `loadAndCompleteSnapshotRaw'`
  and `loadAndCompleteSnapshot'`, which\r\n  allow the toggling of the debug output
  of the raw snapshot layer. See\r\n  [#55](https://github.com/commercialhaskell/pantry/pull/55).\r\n*
  Support GHC 9.4.\r\n\r\n## v0.5.6\r\n\r\n* Remove operational and mirror keys from
  bootstrap key set. See\r\n  [#53](https://github.com/commercialhaskell/pantry/pull/53).\r\n\r\n##
  v0.5.5\r\n\r\n* Support `Cabal-3.6.0.0`.\r\n\r\n## v0.5.4\r\n\r\n* Support `aeson-2.0.0.0`.\r\n\r\n##
  v0.5.3\r\n\r\n* improve and expose `fetchRepos`/`fetchReposRaw`.\r\n\r\n## v0.5.2.3\r\n\r\n*
  Support for GHC 9.0. See\r\n  [#39](https://github.com/commercialhaskell/pantry/pull/39).\r\n\r\n##
  v0.5.2.2\r\n\r\n* Support for `Cabal-3.4.0.0`. See\r\n  [#38](https://github.com/commercialhaskell/pantry/pull/38).\r\n\r\n##
  v0.5.2.1\r\n\r\n* Support `persistent-2.13.0.0`. See\r\n  [#35](https://github.com/commercialhaskell/pantry/issues/35).\r\n\r\n##
  v0.5.2\r\n\r\n* Fall back to BSD tar when type cannot be detected. See\r\n  [#33](https://github.com/commercialhaskell/pantry/issues/33).\r\n\r\n##
  v0.5.1.5\r\n* Switch back to `hackage.haskell.org`. See\r\n  [#30](https://github.com/commercialhaskell/pantry/pull/30).\r\n*
  Pass through basic auth credentials specified in URLs. See\r\n  [#32](https://github.com/commercialhaskell/pantry/pull/32).\r\n\r\n##
  v0.5.1.4\r\n\r\n* Allow building with `persistent-2.11.0.0`. See\r\n  [#28](https://github.com/commercialhaskell/pantry/pull/28).\r\n\r\n##
  v0.5.1.3\r\n\r\n* Handle case where tree exists in cache by blobs are missing. See\r\n
  \ [#27](https://github.com/commercialhaskell/pantry/issues/27).\r\n\r\n## v0.5.1.2\r\n\r\n*
  Skip a test for issue\r\n  [#26](https://github.com/commercialhaskell/pantry/issues/26).\r\n\r\n##
  v0.5.1.1\r\n\r\n* Fix to allow multiple relative path of symlink.\r\n\r\n## v0.5.1.0\r\n\r\n*
  Catch all exceptions from Casa calls and recover.\r\n\r\n## v0.5.0.0\r\n\r\n* Make
  the location of LTS/Nightly snapshots configurable.\r\n\r\n## v0.4.0.1\r\n\r\n*
  Removed errant log message.\r\n\r\n## v0.4.0.0\r\n\r\n* Add a deprecation warning
  when using a repo/archive without a Cabal file, see\r\n  Stack issue [#5210](https://github.com/commercialhaskell/stack/issues/5210).\r\n*
  Do not include repo/archive dependencies which do not include Cabal files in\r\n
  \ lock files.\r\n* Remove some no longer used functions.\r\n\r\n## v0.3.0.0\r\n\r\n*
  Upgrade to `Cabal-3.0.0.0`.\r\n\r\n## v0.2.0.0\r\n\r\nBug fixes:\r\n\r\n* Don't
  compare the hashes of Cabal files. Addresses bugs such as Stack issue\r\n  [#5045](https://github.com/commercialhaskell/stack/issues/5045).
  Data type\r\n  changes: removed the `pmCabal` and `rpmCabal` fields.\r\n\r\n## v0.1.1.2\r\n\r\nBug
  fixes:\r\n\r\n* Module mapping insertions into the database are now atomic. Previously,
  if\r\n  you SIGTERMed at the wrong time while running a script, you could end up
  with\r\n  an inconsistent database state.\r\n\r\n## v0.1.1.1\r\n\r\nOther changes:\r\n\r\n*
  Support building with `persistent-template-2.7.0`.\r\n\r\n## v0.1.1.0\r\n\r\n**Changes
  since 0.1.0.0**\r\n\r\nBug fixes:\r\n\r\n* Fix to allow dependencies on specific
  versions of local git repositories. See\r\n  Stack pull request\r\n  [#4862](https://github.com/commercialhaskell/stack/pull/4862).\r\n\r\nBehavior
  changes:\r\n\r\n* By default, do not perform expiry checks in Hackage Security.
  See Stack issue\r\n  [#4928](https://github.com/commercialhaskell/stack/issues/4928).\r\n\r\nOther
  changes:\r\n\r\n* Rename `pantry-tmp` package back to `pantry`, now that we have
  gained\r\n  maintainership (which had been used by someone else for a candidate-only
  test\r\n  that made it look like the name was free but prevented uploading a real\r\n
  \ package).\r\n\r\n\r\n## 0.1.0.0\r\n\r\n* Initial release.\r\n"
basic-deps:
  http-client: -any
  static-bytes: -any
  rio: -any
  zip-archive: -any
  internal: -any
  bytestring: -any
  unliftio: -any
  Cabal: '>=3 && <3.11'
  path: -any
  base: '>=4.10 && <5'
  time: -any
  persistent: -any
  unordered-containers: -any
  text: -any
  persistent-template: -any
  rio-orphans: -any
  pantry: -any
  generic-deriving: -any
  aeson-warning-parser: '>=0.1.1'
  unix-compat: -any
  casa-types: -any
  conduit: -any
  rio-prettyprint: '>=0.1.7.0'
  crypton-conduit: -any
  hackage-security: -any
  http-download: '>=0.2.1.0'
  conduit-extra: -any
  memory: -any
  containers: -any
  tar-conduit: '>=0.4.0'
  ansi-terminal: -any
  casa-client: '>=0.0.2'
  text-metrics: -any
  http-client-tls: '>=0.3.6.2'
  network-uri: -any
  mtl: -any
  crypton: -any
  filelock: -any
  digest: -any
  transformers: -any
  optparse-applicative: -any
  http-conduit: -any
  resourcet: -any
  http-types: -any
  companion: -any
  persistent-sqlite: '>=2.9.3'
  aeson: -any
  path-io: -any
  primitive: -any
  yaml: -any
  vector: -any
  hpack: '>=0.35.3'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.5.0.0
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.5.1.4
- 0.5.1.5
- 0.5.2
- 0.5.2.1
- 0.5.2.2
- 0.5.2.3
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.6
- 0.5.7
- 0.6.0
- 0.7.0
- 0.7.1
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.2.1
- 0.8.2.2
- 0.8.3
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.3.1
author: Michael Snoyman
latest: 0.9.3.1
description-type: markdown
description: "# pantry\r\n\r\n[![Build Status](https://dev.azure.com/commercialhaskell/pantry/_apis/build/status/commercialhaskell.pantry?branchName=master)](https://dev.azure.com/commercialhaskell/pantry/_build/latest?definitionId=6&branchName=master)\r\n\r\nContent
  addressable Haskell package management, providing for secure,\r\nreproducible acquisition
  of Haskell package contents and metadata.\r\n\r\n## What is Pantry\r\n\r\n* A Haskell
  library, storage specification, and network protocol\r\n* Intended for content-addressable
  storage of Haskell packages\r\n* Allows non-centralized package storage\r\n* Primarily
  for use by Stackage and Stack, hopefully other tools as well\r\n\r\n## Goals\r\n\r\n*
  Efficient, distributed package storage for Haskell\r\n* Superset of existing storage
  mechanisms\r\n* Security via content addressable storage\r\n* Allow more Stackage-style
  snapshots to exist\r\n* Allow authors to bypass Hackage for uploads\r\n* Allow Stackage
  to create forks of packages on Hackage\r\n\r\n__TODO__\r\n\r\nContent below needs
  to be updated.\r\n\r\n* Support for hpack in PackageLocationImmutable?\r\n\r\n##
  Package definition\r\n\r\nPantry defines the following concepts:\r\n\r\n* __Blob__:
  a raw byte sequence, identified by its key (SHA256 of the\r\n  contents)\r\n* __Tree
  entry__: contents of a single file (identified by blob key)\r\n  and whether or
  not it is executable.\r\n    * NOTE: existing package formats like tarballs support
  more\r\n      sophisticated options. We explicitly do not support those. If\r\n
  \     such functionality is needed, fallback to those mechanism is\r\n      required.\r\n*
  __Tree__: mapping from relative path to a tree entry. Some basic\r\n  sanity rules
  apply to the paths: no `.` or `..` directory\r\n  components, no newlines in filepaths,
  does not begin with `/`, no\r\n  `\\\\` (we normalize to POSIX-style paths). A tree
  is identified by a\r\n  tree key (SHA256 of the tree's serialized format).\r\n*
  __Package__: a tree key for the package contents, package name,\r\n  version number,
  and cabal file blob key. Requirements: there must be\r\n  a single file with a `.cabal`
  file extension at the root of the\r\n  tree, and it must match the cabal file blob
  key. The cabal file must\r\n  be located at `pkgname.cabal`. Each tree can be in
  at most one\r\n  package, and therefore tree keys work as package keys too.\r\n\r\nNote
  that with the above, a tree key is all the information necessary\r\nto uniquely
  identify a package. However, including additional\r\ninformation (package name,
  version, cabal key) in config files may be\r\nuseful for optimizations or user friendliness.
  If such extra\r\ninformation is ever included, it must be validated to concur with
  the\r\npackage contents itself.\r\n\r\n### Package location\r\n\r\nPackages will
  optionally be sourced from some location:\r\n\r\n* __Hackage__ requires the package
  name, version number, and revision\r\n  number. Each revision of a package will
  end up with a different tree\r\n  key.\r\n* __Archive__ takes a URL pointing to
  a tarball (gzipped or not) or a\r\n  ZIP file. An implicit assumption is that archives
  remain immutable\r\n  over time. Use tree keys to verify this assumption. (Same
  applies to\r\n  Hackage for that matter.)\r\n* __Repository__ takes a repo type
  (Git or Mercurial), URL, and\r\n  commit. Assuming the veracity of the cryptographic
  hashes on the\r\n  repos, this should guarantee a unique set of files.\r\n\r\nIn
  order to deal with _megarepos_ (repos and archives containing more\r\nthan one package),
  there is also a subdirectory for the archive and\r\nrepository cases. An empty subdir
  `\"\"` would be the case for a\r\nstandard repo/archive.\r\n\r\nIn order to meet
  the rules of a package listed above, the following\r\nlogic is applied to all three
  types above:\r\n\r\n* Find all of the files in the raw location, and represent as
  `Map\r\n  FilePath TreeEntry` (or equivalent).\r\n* Remove a wrapper directory.
  If _all_ filepaths in that `Map` are\r\n  contained within the same directory, strip
  it from all of the\r\n  paths. For example, if the paths are `foo/bar` and `foo/baz`,
  the\r\n  paths will be reduced to `bar` and `baz`.\r\n* After this wrapper is removed,
  then subdirectory logic is applied,\r\n  essentially applying `stripPrefix` to the
  filepaths. If the subdir\r\n  is `yesod-bin` and files exist called `yesod-core/yesod-core.cabal`\r\n
  \ and `yesod-bin/yesod-bin.cabal`, the only file remaining after\r\n  subdir stripping
  would be `yesod-bin.cabal`. Note that trailing\r\n  slashes must be handled appropriately,
  and that an empty subdir\r\n  string results in this step being a noop.\r\n\r\nThe
  result of all of this is that, given one of the three package\r\nlocations above,
  we can receive a tree key which will provide an\r\ninstallable package. That tree
  key will remain immutable.\r\n\r\n### How tooling refers to packages\r\n\r\nWe'll
  get to the caching mechanism for Pantry below. However, the\r\nrecommended approach
  for tooling is to support some kind of composite\r\nof the Pantry keys, parsed info,
  and raw package location. This allows\r\nfor more efficient lookups when available,
  with a fallback when\r\nmirrors don't have the needed information.\r\n\r\nAn example:\r\n\r\n```yaml\r\nextra-deps:\r\n-
  name: foobar\r\n  version: 1.2.3.4\r\n  pantry: deadbeef # tree key\r\n  cabal-file:
  12345678 # blob key\r\n  archive: https://example.com/foobar-1.2.3.4.tar.gz\r\n```\r\n\r\nIt
  is also recommended that tooling provide an easy way to generate\r\nsuch complete
  information from, e.g., just the URL of the tarball, and\r\nthat upon reading information,
  hashes, package names, and version\r\nnumbers are all checked for correctness.\r\n\r\n##
  Pantry caching\r\n\r\nOne simplistic option for Pantry would be that, every time
  a piece of\r\ndata is needed, Pantry downloads the necessary tarball/Git\r\nrepo/etc.
  However, this would in practice be highly wasteful, since\r\ndownloading Git repos
  and archives just to get a single cabal file\r\n(for plan construction purposes)
  is overkill. Instead, here's the\r\nbasic idea for how caching works:\r\n\r\n* All
  data for Pantry can be stored in a SQL database. Local tools\r\n  like Stack will
  use an SQLite database. Servers will use PostgreSQL.\r\n* We'll define a network
  protocol (initially just HTTP, maybe\r\n  extending to something more efficient
  if desired) for querying blobs\r\n  and trees.\r\n* When a blob or tree is needed,
  it is first checked for in the local\r\n  SQLite cache. If it's not available there,
  a request to the Pantry\r\n  mirrors (configurable) will be made for the data. Since
  everything\r\n  is content addressable, it is safe to use untrusted mirrors.\r\n*
  If the data is not available in a mirror, and a location is\r\n  provided, the location
  will be downloaded and cached locally.\r\n\r\nWe may also allow these Pantry mirrors
  to provide some kind of query\r\ninterface to find out, e.g., the latest version
  of a package on\r\nHackage. That's still TBD.\r\n\r\n## Example: resolving a package
  location\r\n\r\nTo work through a full example, the following three stanzas are
  intended to\r\nhave equivalent behavior:\r\n\r\n```yaml\r\n- archive: https://example.com/foobar-1.2.3.4.tar.gz\r\n\r\n-
  name: foobar\r\n  version: 1.2.3.4\r\n  pantry: deadbeef # tree key\r\n  cabal-file:
  12345678 # blob key\r\n  archive: https://example.com/foobar-1.2.3.4.tar.gz\r\n\r\n-
  pantry: deadbeef\r\n\r\n```\r\n\r\nThe question is: how does the first one (presumably
  what a user would want to\r\nenter) be resolved into the second and third? Pantry
  would follow this set of\r\nsteps:\r\n\r\n* Download the tarball from the given
  URL\r\n* Place each file in the tarball into its store as a blob, getting a blob
  key\r\n  for each. The tarball is now represented as `Map FilePath BlobKey`\r\n*
  Perform the root directory stripping step, removing a shared path\r\n* Since there's
  no subdirectory: no subdirectory stripping would be performed\r\n* Serialize the
  `Map FilePath BlobKey` to a binary format and take its hash to\r\n  get a tree key\r\n*
  Store the tree in the store referenced by its tree key. In our example: the\r\n
  \ tree key is `deadbeef`.\r\n* Ensure that the tree is a valid package by checking
  for a single cabal file\r\n  at the root. In our example, that's found in `foobar.cabal`
  with blob key\r\n  `12345678`.\r\n* Parse the cabal file and ensure that it is a
  valid cabal file, and that its\r\n  package name is `foobar`. Grab the version number
  (1.2.3.4).\r\n* We now know that tree key `deadbeef` is a valid package, and can
  refer to it\r\n  by tree key exclusively. However, including the other information
  allows us\r\n  to verify our assumptions, provide user-friendly readable data, and
  provide a\r\n  fallback if the package isn't in the Pantry cache.\r\n\r\n## More
  advanced content discovery\r\n\r\nThere are three more advanced cases to consider:\r\n\r\n*
  Providing fall-back locations for content, such as out of concern for a\r\n  single
  URL being removed in the future\r\n* Closed corporate setups, where access to the
  general internet may either be\r\n  impossible or undesirable\r\n* Automatic discovery
  of missing content by hash\r\n\r\nThe following extensions are possible to address
  these cases:\r\n\r\n* Instead of a single package location, provide a list of package
  locations\r\n  with fallback semantics.\r\n* Corporate environments will be encouraged
  to run a local Pantry mirror, and\r\n  configure clients like Stack to speak to
  these mirrors instead of the default\r\n  ones (or in addition to).\r\n* Provide
  some kind of federation protocol for Pantry where servers can\r\n  registry with
  each other and requests for content can be pinged to each\r\n  other.\r\n\r\nProviding
  override at the client level for Pantry mirror locations is a\r\n__MUST__. Making
  it easy to run in a corporate environment is a __SHOULD__.\r\nProviding the fallback
  package locations seems easy enough that we should\r\ninclude it initially, but
  falls under a __SHOULD__. The federated protocol\r\nshould be added on-demand.\r\n"
license-name: BSD-3-Clause
