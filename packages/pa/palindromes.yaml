all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.2.1
- 0.2.2.2
- '0.3'
- 0.3.1
- 0.3.2
- '0.4'
- '1.0'
author: Utrecht University (Department of Information and Computing Sciences) and
  Johan Jeuring
basic-deps:
  base: '>=4.17 && <5'
  conduit: '>=1.3 && <1.4'
  directory: '>=1.3 && <1.4'
  palindromes: '>=0'
  vector: '>=0.13 && <0.14'
changelog: "Release history:\r\n\r\n--------\r\n19062025 Version 1.0\r\n--------\r\nFeatures:\r\n-
  Add approximate palindrome algorithm. \r\n- Add benchmarking and profiling.\r\n-
  Optimizations to the finding algorithms.\r\n- Add --details and --ranges flags.\r\n-
  Directory can now be input.\r\n- Add progress bar.\r\n\r\nFixes:\r\n- Support odd
  gapped palindromes for DNA.\r\n- Seperate executable from library.\r\n- Improved
  flag names.\r\n- Remove maxLength option.\r\n- Rename 'Complexity' datatype to 'Algorithms'\r\n\r\n--------\r\n07042025
  Version 0.5\r\n--------\r\nDoes a big clean up of the whole package:\r\n- Generalize
  the input data type. Any abstract data type of the PalEq class, with the (=:=) operator,
  can be the input for the palindrome finding algorithms.\r\n- Define a new output
  type. This can be found in src\\Data\\Algorithms\\Palindromes\\Palindrome.hs.\r\n-
  Rewrite functions to be clearer.\r\n- Split the package into more modules.\r\n-
  Split the pre- and post-processing from the algorithms themselves. This allows for
  adding more pre- and postprocessing easily in the future.\r\n- Add Haddock documentation.
  Every function has a Haddock-style comment, allowing Haddock to make automatic documentation
  for the package.\r\n- Add support for word palindromes.\r\n- Change the way punctuation
  palindromes are found. Every punctuation palindrome is a substring of the maximal
  palindrome at the same center. So, we find punctuation palindromes easily by shrinking
  maximal palindromes until we have a punctuation palindrome, solving this problem
  with a post-processing solution.\r\n- Add many unit tests.\r\n- Add QuickCheck generators
  for texts with (large) palindromes and properties for palindromes.\r\n\r\n--------\r\n08072012
  Version 0.4\r\n--------\r\nCleaned up the options, to make them available for other
  kinds\r\nof palindromes besides DNA palindromes. Code size has been reduced\r\nby
  more than 40% by using higher-order functions and laziness to\r\nproperly deal with
  variability.\r\n\r\n--------\r\n08072012 Version 0.3.2\r\n--------\r\nOnly maximal
  palindromes are shown by the maximalEvenPalindromesLengthBetweenDNA\r\nfunction.\r\n\r\n--------\r\n03072012
  Version 0.3.1\r\n--------\r\nAlso showing length in DNA palindromes.\r\n\r\n--------\r\n01072012
  Version 0.3\r\n--------\r\nUses Data.Bytestring instead of String\r\nIncludes functionality
  for determining palindromes in DNA\r\nAdded many flags for determining the length
  of the palindromes returned\r\n\r\n--------\r\n19032012 Version 0.2.2.2\r\n--------\r\nCorrects
  a non-critical error in finalWordCentres\r\n\r\n--------\r\n19032012 Version 0.2.2.1\r\n--------\r\nCorrects
  a link\r\n\r\n--------\r\n17032012 Version 0.2.2\r\n--------\r\nCorrects the word
  palindromes solution\r\n\r\n--------\r\n26122011 Version 0.2.1\r\n--------\r\nUpdates
  base dependency from <=4 to <5\r\nUses latin1 character set for input files\r\n\r\n--------\r\n10012010
  Version 0.2\r\n--------\r\nReads from standard input, via the flag -i\r\nMore flexible
  flag handling\r\nReads multiple files\r\nSpecifies minimum length of palindromes
  returned, via the flag -m int\r\n\r\n--------\r\n07092009 Version 0.1.1\r\n--------\r\nCorrects
  two errors in the flags\r\n\r\n--------\r\n06092009 Version 0.1\r\n--------\r\nFirst
  version of the package\r\n\r\n\r\nThis program has been developed by students from
  the bachelor Computer Science at Utrecht\r\nUniversity within the Software Project
  course.\r\n\r\nÂ© Copyright Utrecht University (Department of Information and Computing
  Sciences) and Johan Jeuring"
changelog-type: markdown
description: "# Palindromes\r\n\r\nPalindromes is a package for finding palindromes
  in files.\r\n\r\n## Features\r\n\r\nPalindromes includes three algorithms: a linear
  complexity algorithm, a quadratic time complexity algorithm and another quadratic
  time algorithm for finding approximate palindromes.\r\n\r\nAll three algorithms
  support the following features:\r\n- Finding plain palindromes\r\n- Finding text
  palindromes,\r\n  ignoring spaces, case of characters, and punctuation\r\n  symbols.\r\n-
  Finding palindromes in DNA.\r\n- Finding word palindromes,\r\n  palindromes made
  up of words instead of characters.\r\n\r\nNow follows an overview of features the
  individual algorithms support. \r\nThere is some overlap between these features,
  these are mentioned twice. \r\nWe also mention advantages and disadvantages of the
  algorithms.\r\n\r\nThe linear algorithm further support:\r\n- Finding punctuation
  palindromes,\r\n  text palindromes surrounded by (if at all) non-letters.\r\n  This
  requires a quadratic postprocessing step.\r\n- When there is many very large palindromes
  in the text, this algorithm is the fastest.  \r\n\r\nThe quadratic algorithm further
  supports:\r\n- Finding punctuation palindromes,\r\n  text palindromes surrounded
  by (if at all) non-letters.\r\n  This requires a quadratic postprocessing step.\r\n-
  Finding palindromes with substitution errors,\r\n  in which a limited number of
  symbols may be substituted by other symbols to get palindromes. \r\n  Like 'river',
  which is a perfect palindrome if the 'i' is substituted for an 'e'. \r\n- Finding
  (approximate) palindromes with\r\n  gaps in the center.\r\n- This algorithm is faster
  than the approximate algorithm. It is also the fastest for most regular texts. \r\n\r\nThe
  approximate palindrome algorithm further supports:\r\n- Finding approximate palindromes
  with insertion, deletion and substitution errors,\r\n  in which a limited number
  of insertion, deletion or substitution operations on the 'left arm' of the approximate
  palindrome results in a palindrome. A simple example is 'levels', which is a palindrome
  if you insert one 's' at the start of the word. \r\n- Finding (approximate) palindromes
  with\r\n  gaps in the center.\r\n\r\nThe algorithms search for maximal palindromes
  but use different definitions of maximal. \r\nFor the linear and quadratic algorithm
  a maximal palindrome is the possible palindrome from a center (a position on a letter
  or inbetween two letters), from which the palindrome is extended on both sides.
  This means the algorithm will find a palindrome for each center. In approximate
  algorithm a maximal palindrome is any substring which cannot be extended on one
  or both sides without exceeding the allowed amount of insertions, deletions or substitions.
  \r\n\r\nFor more information on the different algorithms and the different kinds
  of palindromes, see the tutorial on [our website](https://palindromes.science.uu.nl/smallsites/tutorial.html).\r\n\r\n##
  Requirements\r\n\r\nPalindromes has the following requirements:\r\n\r\n- [GHC] version
  9.4.8 or later - It has been tested with version 9.4.8 and 9.8.2\r\n- [Cabal] library
  version 3.12.1 or later - It has been tested with this version\r\n\r\n[GHC]: http://www.haskell.org/ghc/\r\n[Cabal]:
  http://www.haskell.org/cabal/\r\n\r\n## Download & Installation of the executable\r\n\r\n_If
  you have [cabal-install]_, you should use that to install the package,\r\nbecause
  it will handle everything for you.\r\n\r\n    cabal install exe:palindromes\r\n\r\n_If
  you don't have cabal-install_, you must download the [Palindromes package]\r\nfrom
  HackageDB and install it manually. Get the `tar.gz` file and decompress it.\r\n\r\nOnce
  downloaded, use the following commands for configuring, building, and\r\ninstalling
  the library.\r\n\r\n    runghc Setup.lhs configure\r\n    runghc Setup.lhs build\r\n
  \   runghc Setup.lhs install\r\n\r\nFor more details on the general options available,
  refer to the [Cabal User's\r\nGuide].\r\n\r\n[Palindromes package]: http://hackage.haskell.org/package/palindromes\r\n[cabal-install]:
  http://www.haskell.org/haskellwiki/Cabal-Install\r\n[Cabal User's Guide]: http://www.haskell.org/cabal/users-guide/\r\n\r\n##
  Usage of the executable\r\n\r\nrun the following commands, with changing `<path-to-file-or-directory>`
  to the file or directory of files containing the input, and `<options>` with the
  flags you want enabled\r\n```\r\n    palindromes <path-to-file-or-directory> -<options>\r\n```\r\nHere
  are some examples of working flags, provided input.txt is a file in the same directory
  as the palindromes.cabal file:\r\n\r\n```\r\n    palindromes input.txt\r\n    palindromes
  input.txt --quadratic --punctuation\r\n    palindromes input.txt -Q\r\n    palindromes
  input.txt -Q3+0\r\n    palindromes input.txt -L --longest\r\n    palindromes input.txt
  -A0+2 --all --details --minlength=6\r\n    palindromes -i --dna\r\n```\r\n\r\nTo
  see all the options run one of these:\r\n\r\n```\r\n    palindromes\r\n    palindromes
  -h\r\n    palindromes --help\r\n```\r\n\r\nIf you want to see unicode characters
  in the output in a PowerShell terminal on Windows, try to use the following commands
  in the terminal:\r\n```\r\n    $OutputEncoding = [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8\r\n```\r\n\r\nWhen
  working on the package in a code editor you can use:\r\n```\r\n    cabal run palindromes
  --\r\n```\r\nInstead of \r\n```\r\n    palindromes\r\n```\r\n\r\n## Usage of the
  library\r\nIf you want to use the palindromes library in your code, you probably
  want to use the finder functions in the Finder module. \r\nThese functions, like
  findPalindromes, return the found palindromes using the algorithms based on your
  arguments. \r\n\r\nIf your datatype does not use the standard Eq relation for 'palindrome
  equality', you can define an instance of PalEq for\r\nyour datatype. For example,
  this is used for DNA, where A matches with T and G matches with C. \r\nIf you do
  not explicitly define a PalEq instance for your datatype, but you do define an Eq
  instance, the Eq instance is used.   \r\n\r\n## Documentation\r\n\r\nThe API is
  documented using [Haddock] and available per module on Hackage\r\nsite.\r\n\r\n[Haddock]:
  http://hackage.haskell.org/package/haddock\r\n[Palindromes package]: http://hackage.haskell.org/package/palindromes\r\n\r\n##
  Licensing\r\n\r\nPalindromes is licensed under the so-called [BSD3 license]. See
  the included\r\n`LICENSE` file.\r\n\r\n[BSD3 license]: http://www.opensource.org/licenses/bsd-license.php\r\n\r\n##
  Credits\r\n\r\nPalindromes is based on the functional program developed by [Johan
  Jeuring].\r\n\r\nThe current authors and maintainer of palindromes is [Johan Jeuring].\r\n\r\n[Johan
  Jeuring]: http://www.jeuring.net/\r\n\r\n## Copyright \r\nThis program has been
  developed by students from the bachelor Computer Science at Utrecht\r\nUniversity
  within the Software Project course.\r\n\r\nÂ© Copyright Utrecht University (Department
  of Information and Computing Sciences) and Johan Jeuring"
description-type: markdown
hash: a1b82e313a3be565950a6f11f1fbb08138068dc775db31b5a8903c7a109c54ca
homepage: ''
latest: '1.0'
license-name: BSD-3-Clause
maintainer: johan@jeuring.net
synopsis: Finding palindromes in strings
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  QuickCheck: '>=2.14 && <3.0'
  base: '>=4.17 && <5'
  criterion: '>=1.6 && <1.7'
  deepseq: '>=1.5 && <1.6'
  directory: '>=1.3 && <1.4'
  filepath: '>=1.5 && <1.6'
  levenshtein: '>=0.2 && <0.3'
  palindromes: '>=0'
  strict: '>=0.3 && <0.6'
  vector: '>=0.13 && <0.14'
