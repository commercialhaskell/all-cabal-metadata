homepage: https://obsidian.systems
changelog-type: markdown
hash: 0840a9f4f2ef620869975574834d9661157df59927bb3f2b0644c21210c75f47
test-bench-deps:
  hlint: (<2.1 || >=2.2.2) && <3.3
  filemanip: -any
  base: -any
  filepath: -any
  hedgehog: -any
  patch: -any
  HUnit: -any
  containers: -any
  directory: -any
maintainer: maintainer@obsidian.systems
synopsis: Data structures for describing changes to other data structures.
changelog: |
  # Revision history for patch

  ## 0.0.5.2 - 2022-01-09

  * Correct field order of `PatchMapWithMove.NodeInfo`.

    When we this was reimplemented as a pattern synonym wrapper in 0.0.5.0, we
    accidentally flipped the argument order. Reversing it now to match 0.0.4.0
    and restore compatibility. The previous releases in the 0.0.5.\* series will
    correspondingly be deprecated.

  ## 0.0.5.1 - 2021-12-28

  * New dep of `base-orphans` for old GHC to get instances honestly instead of
    via `monoidal-containers`.

  ## 0.0.5.0 - 2021-12-17

  * `Additive` now lives in `Data.Semigroup.Additive`, but is still reexported
    from `Data.Patch` for compatability.

  * Rewrite `PatchMapWithMove` in terms of `PatchMapWithPatchingMove`.
    Care is taken to make this not a breaking change.
    In particular, `PatchMapWithMove` is a newtype of `PatchMapWithPatchingMove`, as is the `NodeInfo` and `From` of `PatchMapWithPatchingMove`'s versions of those.
    There are complete constructor and field patterns too, and everything is
    exported under the newtype as real constructors and fields would be.

  ## 0.0.4.0 - 2021-04-20

  * Enable PolyKinds

  ## 0.0.3.2 - 2020-11-06

  * Update version bounds

  ## 0.0.3.1 - 2020-02-05

  * Replace `fromJust` with something easier to debug.

  ## 0.0.3.0 - 2020-02-05

  * Create `PatchMapWithPatchingMove` variant which supports moves with a patch.

  * Create `DecidablyEmpty` subclass of `Monoid`.

  ## 0.0.2.0 - 2020-01-17

  * Consistently provide:

     - `Wrapped` instances

     - `*WithIndex` instances

     - `un*` newtype unwrappers

    for `PatchMap`, `PatchIntMap`, and `PatchMapWithMove`.

  ## 0.0.1.0 - 2020-01-09

  * Support older GHCs with `split-these` flag.

  * Additional instances for the `Group` class for basic types.

  ## 0.0.0.1 - 2020-01-08

  * Remove unneeded dependencies

  ## 0.0.0.0 - 2020-01-08

  * Extract patching functionality from Reflex.
basic-deps:
  semigroupoids: '>=4.0 && <6'
  semialign: '>=1 && <1.2'
  these: '>=1 && <1.2'
  dependent-sum: '>=0.6 && <0.8'
  witherable: '>=0.3 && <0.5'
  monoidal-containers: '>=0.6 && <0.7'
  constraints-extras: '>=0.3 && <0.4'
  base: '>=4.9 && <4.15'
  dependent-map: '>=0.3 && <0.5'
  base-orphans: '>=0.8 && <0.9'
  containers: '>=0.6 && <0.7'
  lens: '>=4.7 && <5'
  transformers: '>=0.5.6.0 && <0.6'
all-versions:
- 0.0.0.1
- 0.0.1.0
- 0.0.2.0
- 0.0.3.1
- 0.0.3.2
- 0.0.4.0
- 0.0.5.2
author: Ryan Trinkle
latest: 0.0.5.2
description-type: markdown
description: |
  # patch

  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/patch.svg)](https://hackage.haskell.org/package/patch) [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/patch/badge)](https://matrix.hackage.haskell.org/#/package/patch) [![Travis CI](https://api.travis-ci.org/reflex-frp/patch.svg?branch=develop)](https://travis-ci.org/reflex-frp/patch) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/reflex-frp/patch/LICENSE)

  Data structures for describing changes to other data structures.

  A `Patch` type represents a kind of change made to a data structure.

  ```haskell
  class Patch p where
    type PatchTarget p :: *
    -- | Apply the patch p a to the value a.  If no change is needed, return
    -- 'Nothing'.
    apply :: p -> PatchTarget p -> Maybe (PatchTarget p)
  ```

  ## Patching Maps
  For example, `Data.Patch.Map` defines the `PatchMap` type which can be used to patch `Map`s. A `PatchMap` represents updates to a `Map` that can insert, remove, or replace items in the `Map`. In this example, the `Map` is the `PatchTarget` and the `PatchMap` is the `Patch`. Keep in mind that there are many other possible `Patch`es that can be applied to a `Map` (i.e., `Map` can be the `PatchTarget` for many different `Patch` instances).

  `PatchMap` is defined as:

  ```haskell
  newtype PatchMap k v = PatchMap { unPatchMap :: Map k (Maybe v) }
  ```

  The `Maybe` around the value is used to represent insertion/updates or deletion of the element at a given key.

  Its `Patch` instance begins with:

  ```haskell
  instance Ord k => Patch (PatchMap k v) where
    type PatchTarget (PatchMap k v) = Map k v
    ...
  ```

  When a `PatchMap` is applied to its `PatchTarget`, the following changes can occur:

  - If the key is present in the `Patch` and the `PatchTarget`...

    - And the `Patch` value at that key is `Nothing`: delete that key from the `PatchTarget`.

    - And the `Patch` value at that key is `Just x`: update the value at that key in the `PatchTarget` to `x`.

  - If the key is present in the `Patch` and not present in the `PatchTarget`...

    - And the `Patch` value at that key is `Nothing`: do nothing because we're trying to delete a key that doesn't exist in the target in the first place.

    - And the `Patch` value at that key is `Just x`: insert the key and the value `x` into the `PatchTarget`

  - If the key is *not* present in the `Patch` but present in the `PatchTarget`: do nothing.

  There are, of course, more complicated ways of patching maps involving, for example, moving values from one key to another. You can find the code for that in `Data.Patch.PatchMapWithMove`. Note that the `PatchTarget` type associated with the `PatchMapWithMove` patch instance is still `Map k v`!
license-name: BSD-3-Clause
