all-versions:
- 0.0.1.0
author: Michael Xavier, Winterland
basic-deps:
  base: '>=4 && <5'
  bytestring: '>=0.10.2.0'
  cereal: '>=0.5 && <0.6'
  io-streams: '>=1.2'
changelog: ''
changelog-type: ''
description: "cereal-streams \n==============\n\n[![Hackage](https://img.shields.io/hackage/v/cereal-streams.svg?style=flat)](http://hackage.haskell.org/package/cereal-streams)\n[![Build
  Status](https://travis-ci.org/winterland1989/cereal-streams.svg)](https://travis-ci.org/winterland1989/cereal-streams)\n\nUse
  [cereal](http://hackage.haskell.org/package/cereal) to encode/decode [io-streams](http://hackage.haskell.org/package/io-streams),
  io-streams provided strict bytestring chunk streams, which makes cereal the perfect
  chocie to do encoding/decoding works. It's an alternative to encode/decode with
  binary/lazy bytestring.\n\nThis package is rewritten from [cereal-io-streams](https://github.com/Soostone/cereal-io-streams),
  here's benchmark result against [cereal-conduit](http://hackage.haskell.org/package/cereal-conduit):\n\n```\nbenchmarking
  decode one element from cereal-streams/1000 items\ntime                 135.8 ns
  \  (134.6 ns .. 137.2 ns)\n                     0.999 R²   (0.999 R² .. 0.999 R²)\nmean
  \                136.6 ns   (135.2 ns .. 138.2 ns)\nstd dev              5.147 ns
  \  (4.239 ns .. 6.413 ns)\nvariance introduced by outliers: 57% (severely inflated)\n\nbenchmarking
  decode one element cereal-conduit/1000 items\ntime                 340.1 ns   (337.0
  ns .. 343.6 ns)\n                     0.999 R²   (0.998 R² .. 0.999 R²)\nmean                 339.9
  ns   (335.6 ns .. 344.6 ns)\nstd dev              13.68 ns   (10.59 ns .. 18.03
  ns)\nvariance introduced by outliers: 58% (severely inflated)\n\nbenchmarking decode
  1000 elements from cereal-streams/1000 items\ntime                 112.5 μs   (111.6
  μs .. 113.4 μs)\n                     0.999 R²   (0.998 R² .. 0.999 R²)\nmean                 112.8
  μs   (111.4 μs .. 114.4 μs)\nstd dev              4.735 μs   (3.522 μs .. 6.811
  μs)\nvariance introduced by outliers: 43% (moderately inflated)\n\nbenchmarking
  decode 1000 elements cereal-conduit/1000 items\ntime                 204.4 μs   (201.9
  μs .. 206.9 μs)\n                     0.995 R²   (0.990 R² .. 0.997 R²)\nmean                 220.7
  μs   (209.5 μs .. 271.0 μs)\nstd dev              66.92 μs   (9.094 μs .. 152.6
  μs)\nvariance introduced by outliers: 98% (severely inflated)\n```\n\n\n"
description-type: markdown
hash: c931aa23949eea4a44bcd6a0a28a9ccc0f6b173203fff9921e8f908c64e48373
homepage: ''
latest: 0.0.1.0
license-name: BSD-3-Clause
maintainer: michael.xavier@soostone.com, winterland1989@gmail.com
synopsis: Use cereal to encode/decode io-streams.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  cereal: '>=0'
  cereal-conduit: '>=0'
  cereal-streams: '>=0'
  conduit: '>=0'
  conduit-extra: '>=0'
  criterion: '>=1.0.2.0'
  derive: '>=0'
  io-streams: '>=0'
  mtl: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  transformers: '>=0'
