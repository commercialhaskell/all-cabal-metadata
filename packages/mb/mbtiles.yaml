all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.6.0.0
author: Joe Canero
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  directory: '>=0'
  monad-control: '>=0'
  mtl: '>=0'
  resource-pool: '>=0'
  sqlite-simple: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
changelog: ''
changelog-type: ''
description: |-
  # mbtiles

  Haskell library for interfacing with MapBox [MBTiles](https://github.com/mapbox/mbtiles-spec) files.

  Documentation available on [Hackage](https://hackage.haskell.org/package/mbtiles).

  ## Functionality
  * Getting tiles by zoom, x, and y.
  * Writing new tiles by zoom, x, and y.
  * Updating existing tiles by zoom, x, and y.
  * Accessing metadata from the mbtiles file.

  ## Basic Usage

  Reading, writing, and updating tiles:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import qualified Data.ByteString.Lazy as BL
  import           Database.Mbtiles

  main = do
    let myData = "myTileData" :: BL.ByteString
    runMbtiles "my/path/to/file.mbtiles" $ do
      maybeTileData <- getTile (Z 0) (X 0) (Y 0)
      case maybeTileData of
        Nothing  -> writeTile (Z 0) (X 0) (Y 0) myData
        (Just d) -> updateTile (Z 0) (X 0) (Y 0) $ BL.init d
  ```

  Getting metadata:

  ```haskell

  import Control.Monad.IO.Class
  import Database.Mbtiles

  main = do
    runMbtiles "my/path/to/file.mbtiles" $ do
      liftIO . print =<< getName
      liftIO . print =<< getType
      liftIO . print =<< getFormat

  ```

  ## Future Work
  * Improve database error handling.
  * Investigate usage as a performant tile server.
  * Add tests.
description-type: markdown
hash: 763f23b6683dbc712490274dbce1d377ac0c3765926d0d7a3e102b8de1332c7b
homepage: https://github.com/caneroj1/mbtiles#readme
latest: 0.6.0.0
license-name: BSD-3-Clause
maintainer: jmc41493@gmail.com
synopsis: Haskell MBTiles client.
test-bench-deps:
  HUnit: '>=0'
  base: '>=0'
  mbtiles: '>=0'
