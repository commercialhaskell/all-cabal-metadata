homepage: https://github.com/dschrempf/circular#readme
changelog-type: markdown
hash: 940c7367050788a4911859f308012940dfc47b605df3f4062b931e415a144537
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: -any
  criterion: -any
  quickcheck-instances: -any
  QuickCheck: -any
  aeson: -any
  primitive: -any
  circular: -any
  vector: -any
maintainer: dominik.schrempf@gmail.com
synopsis: Circular fixed-sized mutable vectors
changelog: |2+

  # Revision history for circular


  ## Unreleased changes


  ## 0.4.0.0

  -   Do not export data constructors nor record fields.
  -   `fromVectorWith`.


  ## 0.3.1.1

  Cabal changes, versioning changes.


  ## 0.3.1

  -   Change monadic folds so that commutativity is not anymore required.
  -   Provide `foldKM`, a fold over the last k elements on the stack.


  ## 0.3.0

  -   Bugfix `take`.
  -   Make functions more consistent (`fromVector` and `toVector` now both work on
      mutable stacks).
  -   Sort functions.
  -   Improve documentation.


  ## 0.2.0

  -   Complete rewrite using mutable vectors. A monadic interface is required now,
      but it is much cleaner in every other sense.


  ## 0.1.1

  -   Remove `mean`.
  -   Add benchmark.
  -   Many small improvements.

basic-deps:
  base: '>=4.7 && <5'
  aeson: -any
  primitive: -any
  vector: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.1.1
- 0.4.0.0
author: Dominik Schrempf
latest: 0.4.0.0
description-type: markdown
description: |2+

  # Circular

  <p align="center"><img src="https://travis-ci.org/dschrempf/circular.svg?branch=master"/></p>

  Circular stacks of fixed size.

  Circular stacks are just normal vectors with a pointer to the last element.

  Circular stacks may not be what you need because:

  -   You need all values at a later time anyways.
  -   You don't want a monadic work flow, because circular stacks use mutable
      vectors.

  Circular stacks are useful to you because:

  -   They have a fixed size and consequently have constant memory usage. Constant
      memory usage is important if values are gathered continuously but only a
      specific number of values is needed at a later time.
  -   They are fast, especially when summary statistics need to be computed across
      the stack.

  Elements pushed on a circular stack replace the oldest (deepest) elements on the
  stack. QuickCheck and unit tests with HSpec give promising results &#x2014; have a
  look yourself.

  I use circular stacks, for example, as the data type for traces of Markov
  chains. In this case, lists cannot be used reliably, because the space
  requirement increases linearly with the chain length.

  `Circular` is actively developed and functions may be removed, renamed, or
  changed. Ideas are welcome!

license-name: BSD-3-Clause
