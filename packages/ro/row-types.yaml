all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.0.1.2
author: Daniel Winograd-Cort, Matthew Farkas-Dyck
basic-deps:
  base: '>=2 && <6'
  constraints: '>=0.11'
  deepseq: '>=1.4'
  generic-lens: '>=1.0.0.0'
  hashable: '>=1.2'
  profunctors: '>=5.0'
  text: '>=0'
  unordered-containers: '>=0.2'
changelog: "## 1.0.1.2 [2021-09-10]\n- Update Stack to use GHC 8.10.7\n- Fix a few
  warnings\n- Minor updates to support GHC 9.0.1\n\n\n## 1.0.1.1 [2021-09-09]\n- Improved
  type checking performance on Diff and Merge ([Thanks ak3n!](https://github.com/target/row-types/pull/77))\n\n\n##
  1.0.1.0 [2021-05-06]\n- Fixed a critical bug in certain values in `Dictionaries`
  that could cause segfaults.\n- Reimplemented and simplified `Subset`.\n- Adjusted
  basic type families to better handle simple cases (affected families are `.\\`,
  `Extend`, `.+`, `.\\/`, `.//`).\n- Export `mapSingleA` in `Data.Row.Variants`.\n-
  Improved kind polymorphism and simplify a few constraints ([Thanks Strake!](https://github.com/target/row-types/pull/73)).\n-
  Improved type checking performance ([Thanks UlfNorell!](https://github.com/target/row-types/pull/71))\n\n\n##
  1.0.0.0 [2020-09-12]\nThis release has many breaking changes, specifically to `metamorph`
  and some functions related to `Variant`, hence the major version bump to `1.0`.
  \ However, users that only use basic features of records may not notice a difference.\n\n-
  Removed `metamorph'` and `biMetamorph'` in favor of generalizing `metamorph` over
  choice of bifunctor.\n- Removed \"unsafe\" functions (`unsafeRemove` and `unsafeInjectFront`
  from `Records` and `unsafeMarkVar` and `unsafeInjectFront` from `Variants`).\n-
  Removed `Switch` class, reimplementing the `switch` function using `BiForall`.\n-
  Swap the order of the result of calling `trial`, `multiTrial`, and `split`.\n- Added
  new functions to `Records`: `lazyRemove`, `curryRec`, `(.$)`, `zipTransform`, `zipTransform'`,
  `traverse`, `traverseMap`, `distribute`, and `coerceRec`.\n- Added new functions
  to `Variants`: `fromLabelsMap`, `traverse`, `traverseMap`, and `coerceVar`.\n- Added
  `Dictionaries` module, full of axioms that are helpful for using `metamorph`.  Moved
  axioms from `Internal` to `Dictionaries` (in some cases, the type variable order
  has changed).\n- Added `ApSingle` type family as well as `eraseSingle`, `mapSingle`,
  and `eraseZipSingle` (thanks Jordan Woehr!).\n- Improved error messages.\n\nNote:
  GHC 8.4 and earlier are no longer officially supported in row-types 1.0.0.0.\n\n\n##
  0.4.0.0 [2020-05-20]\n- Renamed `toNative` to `toNativeGeneral` and `toNativeExact`
  to `toNative` for records and likewise for `fromNative` for variants.\n- Added a
  type family `NativeRow` which, when given any generic type that can go through `fromNative`,
  is equal to the row-type of the resulting record/variant.  Note that `NativeRow`
  is defined separately (and differently!) for records vs variants, so it is exported
  at the `Data.Row.Records`/`Variants` level but not at `Data.Row`.\n- Added `coerceRec`
  and `coerceVar` to coerce the row-types of records and variants respectively.\n-
  Exposed `BiForall` in `Data.Row`, `Data.Row.Records`, and `Data.Row.Variants`\n-
  (Internal) Rewrote internal `Generic` code to use an associated type family instead
  of a standalone one.\n\nNote: GHC 8.2 and earlier are no longer officially supported
  in row-types 0.4.0.0.\n\n## 0.3.1.0 [2020-01-29]\n- Added \"native\" classes as
  exports for `Records` and `Variants` (e.g., `ToNative`, `FromNative`)\n- Added more
  example hs files.\n\n## 0.3.0.0 [2019-05-28]\n- Added `HasField` and `AsConstructor`
  instances (from generic-lens) for `Rec` and `Var` respectively.\n- Added record-overwrite
  function `.//`.\n- Added `Generic` instances for Rec and Var.\n- Added mapHas entailment
  connecting `Map f r .! l` to `r .! l`.\n- Changed `Forall2` to `BiForall`.\n  -
  Added `BiConstraint` type class for use  with `BiForall`.\n- Added `Ap` type family
  that functions as `ap` over rows using zipping.\n  - Added `mapF` to map a function
  over a record with an `Ap` row.\n- Added `toDynamicMap` and `fromDynamicMap` as
  functions to convert between `Rec`s and  `HashMap Text Dynamic`s.\n- Added `toNativeExact`
  to convert a `Rec` to a native Haskell type without losing any fields.\n- Added
  `toNative`, `fromNative`, and `fromNativeExact` for `Var`s.\n- Added `unSingleton`
  for `Var`s.\n  - Removed `unSingleton` from `Data.Row` export list.\n- Tightened
  the type signatures of `focus` (for both `Rec` and `Var`) to improve type inference
  when using `focus` in lens-like situations.\n\n## 0.2.3.1 [2018-07-11]\n- Fix a
  bug in the `Show` instance for `Rec`.\n\n## 0.2.3.0 [2018-07-02]\n- Update the `Show`
  instance for `Rec` to render valid code.\n- Add `toNative` and `fromNative` functions
  for records to easily convert between Haskell records and row-types records.\n-
  Make type families in `Data.Row.Internal` polykinded ([Thanks James Yu!](https://github.com/target/row-types/pull/20))\n\n##
  0.2.1.0 [2018-03-20]\n- Bug Fix: The type of `update` for both `Rec` and `Var` now
  enforce the newly inserted type is correct.\n- New: Add `restrict` and `split` for
  `Var`s.  \n  - Removed `restrict` from `Data.Row` export list.\n- New: Added support
  for universally quantified rows: `mapForall` and `uniqueMap`.\n- Added very simple
  test suite.\n\n## 0.2.0.0 [2018-02-12]\n- Initial Release\n"
changelog-type: markdown
description: |
  Row-Types
  =======

  [![Build Status](https://github.com/target/row-types/actions/workflows/.github/workflows/ci.yml/badge.svg)](https://github.com/target/row-types/)
  [![Hackage](https://img.shields.io/hackage/v/row-types.svg)](https://hackage.haskell.org/package/row-types)

  Row-types is a library of open records and variants for Haskell using closed
  type families and type literals (among other things...).
  See [examples/Examples.lhs](https://raw.githubusercontent.com/target/row-types/master/examples/Examples.lhs)
  for a literate Haskell file that functions as an overview of how this library can be used,
  and check out [the website](https://target.github.io/row-types/) for further examples.

  Available on [Hackage](https://hackage.haskell.org/package/row-types).

  This work is a branch from CTRex [1,2] with other inspiration from data-diverse [3].
  My thanks to the authors and contributors of those libraries!


  [1] https://wiki.haskell.org/CTRex \
  [2] https://hackage.haskell.org/package/CTRex/docs/Data-OpenRecords.html \
  [3] https://hackage.haskell.org/package/data-diverse
description-type: markdown
hash: 4d4c7cb95d06a32b28ba977852d52a26b4c1f695ef083a6fd874ab6d79933b64
homepage: https://github.com/dwincort/row-types
latest: 1.0.1.2
license-name: MIT
maintainer: dwincort@gmail.com
synopsis: Open Records and Variants
test-bench-deps:
  base: '>=2 && <6'
  deepseq: '>=1.4'
  gauge: '>=0.2.0'
  generic-lens: '>=1.1.0.0'
  row-types: '>=0'
