all-versions:
- 0.0.3
- 0.0.4
- 0.0.4.1
- 0.0.4.2
- 0.0.4.3
- 0.0.4.4
- 0.0.4.5
author: Athan Clark
basic-deps:
  QuickCheck: '>=2.9.2'
  base: '>=4.11 && <5.0'
  containers: '>=0'
  deepseq: '>=0'
  hashable: '>=0'
  mtl: '>=0'
  quickcheck-instances: '>=0'
  semigroupoids: '>=0'
  semigroups: '>=0'
  sets: '>=0.0.5'
  unordered-containers: '>=0'
  witherable: '>=0.2'
changelog: ''
changelog-type: ''
description: |
  [![Stories in Ready](https://badge.waffle.io/athanclark/rose-trees.png?label=ready&title=Ready)](https://waffle.io/athanclark/rose-trees)
  rose-trees
  ==========

  A simple class for making the construction of rose trees look prettier. I've also
  made an implementation of a left-child right-sibling binary tree-based rose tree,
  and one that uses `Data.Set` internally as a forest.
description-type: markdown
hash: ce82d1b5a2283f6fc675c83cd07986eba1e3b11b29ec66e934aa99cf291430a2
homepage: https://github.com/athanclark/rose-trees#readme
latest: 0.0.4.5
license-name: BSD-3-Clause
maintainer: athan.clark@gmail.com
synopsis: Various trie implementations in Haskell
test-bench-deps:
  QuickCheck: '>=2.9.2'
  base: '>=4.11 && <5.0'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  hashable: '>=0'
  mtl: '>=0'
  quickcheck-instances: '>=0'
  rose-trees: '>=0'
  semigroupoids: '>=0'
  semigroups: '>=0'
  sets: '>=0.0.5'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  unordered-containers: '>=0'
  witherable: '>=0.2'
