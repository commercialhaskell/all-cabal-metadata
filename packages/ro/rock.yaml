homepage: https://github.com/ollef/rock#readme
changelog-type: markdown
hash: 9df391b2d9e8ef9fb992c86f49b5d77c40a9990ddedfd1b96d89f8967417b14d
test-bench-deps:
  dependent-sum: -any
  dependent-hashmap: -any
  constraints-extras: -any
  base: '>=4.7 && <5'
  rock: -any
  unordered-containers: -any
  hedgehog: -any
  constraints: -any
  mtl: -any
  hashable: -any
maintainer: fredriksson.olle@gmail.com
synopsis: A build system for incremental, parallel, and demand-driven computations
changelog: |
  # Unreleased

  # 0.3.1.2

  - Add docs about query params, mention Eclair in README
  - Add note about IO actions
  - Fix template stages to build with GHC 9.2.2
  - Fix build errors with GHC 9.6.2
  - Add CI in GitHub Actions Workflow

  # 0.3.1.1

  - Fix a concurrency bug in `memoiseWithCycleDetection`, where a race condition meant that it could sometimes throw a `Cyclic` exception when there weren't actually cycles

  # 0.3.1.0

  - Add `MonadFix` instance to `Task`

  # 0.3.0.0

  - Add `memoiseWithCycleDetection` and `Cycle`, enabling cycle detection
  - Implement `Task` using `ReaderT`, improving performance
  - Make buildable with GHC 8.2.2 through 8.8.3
  - Switch from the `dependent-map` package to the `dependent-hashmap` for caches
  - Remove support for Haxl-style automatic parallelisation
    * Remove strategy parameter from `runTask`
    * Add `MonadBaseControl`, which allows manual parallelisation using e.g. lifted-async
    * Remove `Sequential` type
  - Use `IORef`s instead of `MVar`s
  - Add `trackM` function
  - Remove `invalidateReverseDependencies` in favour of `reachableReverseDependencies`
  - Generalise `verifyTraces` to verify using user-supplied data

  # 0.2.0.0

  - Stop using hashes when verifying traces (gets rid of the `Rock.HashTag` and `Rock.Hashed` modules)
  - Add reverse dependency tracking

  # 0.1.0.1

  - Fix base-4.12 compatibility

  # 0.1.0.0

  - Initial release
basic-deps:
  dependent-sum: '>=0.7.2 && <0.8'
  dependent-hashmap: '>=0.1.0 && <0.2'
  constraints-extras: '>=0.4.0 && <0.5'
  dependent-sum-template: -any
  base: '>=4.7 && <5'
  deriving-compat: '>=0.6.5 && <0.7'
  rock: -any
  unordered-containers: '>=0.2.19 && <0.3'
  monad-control: '>=1.0.3 && <1.1'
  lifted-base: '>=0.2.3 && <0.3'
  mtl: '>=2.3.1 && <2.4'
  hashable: '>=1.4.3 && <1.5'
  transformers-base: '>=0.4.6 && <0.5'
  transformers: '>=0.6.1 && <0.7'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
author: Olle Fredriksson
latest: 0.3.1.2
description-type: markdown
description: "# rock \n[![Build Status](https://travis-ci.com/ollef/rock.svg?branch=master)](https://travis-ci.com/ollef/rock)
  \n[![CI Status](https://github.com/ollef/rock/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/ollef/rock/actions/workflows/ci.yml)\n[![Hackage](https://img.shields.io/hackage/v/rock.svg)](https://hackage.haskell.org/package/rock)\n\n\n\nA
  build system inspired by [Build systems Ã  la carte](https://www.microsoft.com/en-us/research/publication/build-systems-la-carte/).\n\nUsed
  in [Sixten](https://github.com/ollef/sixten),\n[Sixty](https://github.com/ollef/sixty)
  and\n[Eclair](https://github.com/luc-tielen/eclair-lang) to achieve incremental
  and\nquery driven compiler architectures.\n\n## Example\n\n```haskell\n{-# language
  FlexibleInstances #-}\n{-# language GADTs #-}\n{-# language StandaloneDeriving #-}\n{-#
  language TemplateHaskell #-}\n\nimport Control.Monad.IO.Class\nimport Data.GADT.Compare.TH
  (deriveGEq)\nimport Data.Hashable\nimport Data.Some\nimport Data.IORef\nimport qualified
  Rock\n\ndata Query a where\n  A :: Query Integer\n  B :: Query Integer\n  C :: Query
  Integer\n  D :: Query Integer\n\nderiving instance Show (Query a)\nderiveGEq ''Query\n\ninstance
  Hashable (Query a) where\n  hashWithSalt salt query =\n    case query of\n      A
  -> hashWithSalt salt (0 :: Int)\n      B -> hashWithSalt salt (1 :: Int)\n      C
  -> hashWithSalt salt (2 :: Int)\n      D -> hashWithSalt salt (3 :: Int)\n\ninstance
  Hashable (Some Query) where\n  hashWithSalt salt (Some query) = hashWithSalt salt
  query\n\nrules :: Rock.Rules Query\nrules key = do\n  liftIO $ putStrLn $ \"Fetching
  \" <> show key\n  case key of\n    A -> pure 10\n    B -> do\n      a <- Rock.fetch
  A\n      pure $ a + 20\n    C -> do\n      a <- Rock.fetch A\n      pure $ a + 30\n
  \   D ->\n      (+) <$> Rock.fetch B <*> Rock.fetch C\n\nmain :: IO ()\nmain = do\n
  \ do\n    liftIO $ putStrLn \"Running\"\n    result <- Rock.runTask rules (Rock.fetch
  D)\n    print result\n  do\n    liftIO $ putStrLn \"Running with memoisation\"\n
  \   memoVar <- newIORef mempty\n    result <- Rock.runTask (Rock.memoise memoVar
  rules) (Rock.fetch D)\n    liftIO $ print result\n```\n\nPrints\n\n```\nRunning\nFetching
  D\nFetching B\nFetching A\nFetching C\nFetching A\n70\nRunning with memoisation\nFetching
  D\nFetching B\nFetching A\nFetching C\n70\n```\n\nNote: Besides pure computations
  as shown above, the `Task` data type implements\n`MonadIO`, so you can lift IO actions
  into the `Task` monad by using\n`liftIO`!\n\n## Query parameters\n\nIf you need
  to parametrize your queries (e.g. typechecking one specific file),\nyou can do this
  by adding additional arguments to your `Query` datatype:\n\n```haskell\ndata Query
  a where\n  Parse :: FilePath -> Query AST\n  Typecheck :: FilePath -> Query (Either
  TypeError TypedAST)\n\nrules :: Rock.Rules Query\nrules key = case key of\n  Parse
  file -> do\n    _ -- parse the file..\n  Typecheck file -> do\n    ast <- Rock.fetch
  (Parse file)\n    _ -- typecheck file..\n```\n\n## Related projects\n\n* [Shake](http://hackage.haskell.org/package/shake)\n*
  [Salsa](https://crates.io/crates/salsa)\n\n## Contributions\n\n... are very welcome,
  especially in the areas of documentation and examples.\n"
license-name: BSD-3-Clause
