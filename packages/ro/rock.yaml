homepage: https://github.com/ollef/rock#readme
changelog-type: markdown
hash: 8eb0840eae3b7cd4d577f597de9f477042ec25c9b624d6bfdc52fe8a489b0624
test-bench-deps:
  dependent-sum: -any
  dependent-hashmap: -any
  constraints-extras: -any
  base: '>=4.7 && <5'
  rock: -any
  unordered-containers: -any
  hedgehog: -any
  constraints: -any
  mtl: -any
  hashable: -any
maintainer: fredriksson.olle@gmail.com
synopsis: A build system for incremental, parallel, and demand-driven computations
changelog: |
  # Unreleased

  # 0.3.1.0

  - Add `MonadFix` instance to `Task`

  # 0.3.0.0

  - Add `memoiseWithCycleDetection` and `Cycle`, enabling cycle detection
  - Implement `Task` using `ReaderT`, improving performance
  - Make buildable with GHC 8.2.2 through 8.8.3
  - Switch from the `dependent-map` package to the `dependent-hashmap` for caches
  - Remove support for Haxl-style automatic parallelisation
    * Remove strategy parameter from `runTask`
    * Add `MonadBaseControl`, which allows manual parallelisation using e.g. lifted-async
    * Remove `Sequential` type
  - Use `IORef`s instead of `MVar`s
  - Add `trackM` function
  - Remove `invalidateReverseDependencies` in favour of `reachableReverseDependencies`
  - Generalise `verifyTraces` to verify using user-supplied data

  # 0.2.0.0

  - Stop using hashes when verifying traces (gets rid of the `Rock.HashTag` and `Rock.Hashed` modules)
  - Add reverse dependency tracking

  # 0.1.0.1

  - Fix base-4.12 compatibility

  # 0.1.0.0

  - Initial release
basic-deps:
  dependent-sum: '>=0.6'
  dependent-hashmap: '>=0.1'
  constraints-extras: '>=0.3'
  dependent-sum-template: -any
  base: '>=4.7 && <5'
  deriving-compat: '>=0.5'
  rock: -any
  unordered-containers: '>=0.2'
  monad-control: '>=1.0'
  lifted-base: '>=0.2'
  mtl: '>=2.2'
  hashable: '>=1.3'
  transformers-base: '>=0.4'
  transformers: '>=0.5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
author: Olle Fredriksson
latest: 0.3.1.0
description-type: markdown
description: |
  # rock [![Build Status](https://travis-ci.com/ollef/rock.svg?branch=master)](https://travis-ci.com/ollef/rock) [![Hackage](https://img.shields.io/hackage/v/rock.svg)](https://hackage.haskell.org/package/rock)

  A build system inspired by [Build systems Ã  la carte](https://www.microsoft.com/en-us/research/publication/build-systems-la-carte/).

  Used in [Sixten](https://github.com/ollef/sixten) and
  [Sixty](https://github.com/ollef/sixty) to achieve incremental and query driven
  compiler architectures.

  # Example

  ```haskell
  {-# language FlexibleInstances #-}
  {-# language GADTs #-}
  {-# language StandaloneDeriving #-}
  {-# language TemplateHaskell #-}

  import Control.Monad.IO.Class
  import Data.GADT.Compare.TH (deriveGEq)
  import Data.Hashable
  import Data.Some
  import Data.IORef
  import qualified Rock

  data Query a where
    A :: Query Integer
    B :: Query Integer
    C :: Query Integer
    D :: Query Integer

  deriving instance Show (Query a)
  deriveGEq ''Query

  instance Hashable (Query a) where
    hashWithSalt salt query =
      case query of
        A -> hashWithSalt salt (0 :: Int)
        B -> hashWithSalt salt (1 :: Int)
        C -> hashWithSalt salt (2 :: Int)
        D -> hashWithSalt salt (3 :: Int)

  instance Hashable (Some Query) where
    hashWithSalt salt (Some query) = hashWithSalt salt query

  rules :: Rock.Rules Query
  rules key = do
    liftIO $ putStrLn $ "Fetching " <> show key
    case key of
      A -> pure 10
      B -> do
        a <- Rock.fetch A
        pure $ a + 20
      C -> do
        a <- Rock.fetch A
        pure $ a + 30
      D ->
        (+) <$> Rock.fetch B <*> Rock.fetch C

  main :: IO ()
  main = do
    do
      liftIO $ putStrLn "Running"
      result <- Rock.runTask rules (Rock.fetch D)
      print result
    do
      liftIO $ putStrLn "Running with memoisation"
      memoVar <- newIORef mempty
      result <- Rock.runTask (Rock.memoise memoVar rules) (Rock.fetch D)
      liftIO $ print result
  ```

  Prints

  ```
  Running
  Fetching D
  Fetching B
  Fetching A
  Fetching C
  Fetching A
  70
  Running with memoisation
  Fetching D
  Fetching B
  Fetching A
  Fetching C
  70
  ```

  # Related projects

  * [Shake](http://hackage.haskell.org/package/shake)
  * [Salsa](https://crates.io/crates/salsa)

  # Contributions

  ... are very welcome, especially in the areas of documentation and examples.
license-name: BSD-3-Clause
