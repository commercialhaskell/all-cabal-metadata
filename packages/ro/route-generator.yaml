all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- '0.5'
- '0.6'
- 0.6.1
author: Stephen Paul Weber <singpolyma@singpolyma.net>
basic-deps:
  attoparsec: '>=0.10.0.0'
  base: '>=4 && <5'
  network: '>=0'
  text: '>=0.7'
  yesod-routes: '>=0'
changelog: ''
changelog-type: ''
description: |
  Most of the defacto Haskell web routing libraries are either linear
  in complexity, or require lots of extra extensions, like Template
  Haskell.

  Luckily, yesod-routes has Yesod.Routes.Dispatch, which is a very clean,
  efficient, and extension-free router.  Writing routes out in code can,
  however, be quite verbose.  This utility is a code generator to produce
  routes compatible with Yesod.Routes.Dispatch from a nice input format.

  Example:

  > GET /       => home
  > GET /post/: => showPost
  > PUT /*      => updateSomething

  > ./routeGenerator -r -m SomeModule routes.txt

  Will generate routes that map the correct HTTP verb (which you should
  pass as a prepended "path segment" to your Dispatch) and path to
  functions imported from the module specified in the second parameter.

  A colon matches any path segment, and passes the matched segment
  through to the specified function, passing each match segment in order.
  The expected type of the segment is inferred from the type of the
  function.  If the segment cannot be parsed as that type, the path does
  not match.  Parsing is done with Web.PathPieces.fromPathPiece.

  An asterisk at the end of the path causes rhHasMulti to be set to True,
  meaning that any path segments after what has been specified will be
  allowed.
description-type: text
hash: 39f181a2da0b2bd1c7ca1aba2ec106c96a8e5f518dba6758915ee29086b8a8f9
homepage: http://github.com/singpolyma/route-generator
latest: 0.6.1
license-name: LicenseRef-OtherLicense
maintainer: Stephen Paul Weber <singpolyma@singpolyma.net>
synopsis: Utility to generate routes for use with yesod-routes
test-bench-deps: {}
