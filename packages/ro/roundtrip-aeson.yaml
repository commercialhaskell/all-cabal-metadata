all-versions:
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.2
author: Thomas Sutton <me@thomas-sutton.id.au>, Christian Marie <christian@ponies.io>
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0.5 && <0.6'
  lens: '>=0'
  lens-aeson: '>=0'
  roundtrip: '>=0.2 && <0.3'
  scientific: '>=0'
  text: '>=1.2 && <1.3'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: |
  Tue Oct  9 20:06:26 AEDT 2018

  Fixed build under ghc-8.2.2 and nix

  Wed Oct 10 13:09:40 AEDT 2018

  Fixed demo.hs for new prelude

  Sun Oct 14 18:49:46 AEDT 2018
  Rename Json JSON
changelog-type: text
description: |
  Roundtrip Aeson
  ===============

  [![Build Status][6]][7]

  [roundtrip][1] allows you to write [invertible syntax descriptions][2] -- or,
  to put it another way, a parser and pretty printer combined -- for String or
  XML data. This package extends this to support constructing and destructing
  JSON documents.

  Example
  -------

  Using `roundtrip-aeson` is relatively straightforward:

  1. Define your data type;

  2. Define [partial isomorphisms][3] for the constructors (probably using the
  [template haskell][4]);

  2. Describe the syntax of its JSON representation; and

  3. Use that representation to build and parse JSON.

  ````{.haskell}
  import Data.Aeson.RoundTrip

  data Invoice
      = Unpaid Bool Integer Bool
      | Paid Double
    deriving (Show)

  defineIsomorphisms ''Invoice

  invoiceSyntax :: JsonSyntax s => s Invoice
  invoiceSyntax =
      unpaid
          <$> jsonField "overdue" jsonBool
          <*> jsonField "total"   jsonIntegral
          <*> jsonField "warned"  jsonBool
      <|> paid
          <$> jsonField "total"   jsonRealFrac

  main :: IO ()
  main = do
      -- Build a JSON representation.
      let Right x = runBuilder invoiceSyntax $ Unpaid False 40 [False]
      L.putStrLn $ encode x
      -- Parse a JSON representation.
      print $ runParser invoiceSyntax x
  ````

  See [tests/demo.hs][5] for the complete source of this example.

  [1]: https://hackage.haskell.org/package/roundtrip
  [2]: http://scholar.google.com/scholar?cluster=14145973580303258649
  [3]: https://hackage.haskell.org/package/roundtrip/docs/Control-Isomorphism-Partial-Iso.html
  [4]: https://hackage.haskell.org/package/roundtrip/docs/Control-Isomorphism-Partial-TH.html
  [5]: https://github.com/anchor/roundtrip-aeson/blob/master/tests/demo.hs
  [6]: https://travis-ci.org/anchor/roundtrip-aeson.svg?branch=master
  [7]: https://travis-ci.org/anchor/roundtrip-aeson
description-type: markdown
hash: 2a2bf572b33db639aa7cf20a7fcd050e5884f5999f287146981b13554f69c92a
homepage: https://github.com/christian-marie/roundtrip-aeson
latest: 0.3.0.2
license-name: BSD-3-Clause
maintainer: Christian Marie
synopsis: Un-/parse JSON with roundtrip invertible syntax definitions.
test-bench-deps:
  aeson: '>=0'
  base: '>=4.7'
  bytestring: '>=0'
  lens-aeson: '>=0'
  roundtrip: '>=0'
  roundtrip-aeson: '>=0'
  text: '>=0'
  vector: '>=0'
