all-versions:
- '0.1'
author: Joey Adams
basic-deps:
  base: '>=4 && <5'
  stm: '>=0'
changelog: ''
changelog-type: ''
description: |-
  This package provides a FIFO channel for STM supporting a size limit.  When
  this limit is reached, older entries are discarded to make way for newer
  entries.

  The motivation for this is logging.  If log entries are written to a plain
  @TChan@, the program will use a lot of memory if it produces log entries
  faster than they can be processed.  If log entries are written to a bounded
  channel where writes block (e.g. the @stm-chans@ package), the program may
  deadlock if the log channel fills up.  With 'Data.STM.RollingQueue', old
  entries will be discarded instead.

  Possible improvements (not available in 'Data.STM.RollingQueue') include:

  * Discard lower-priority entries first.

  * Discard every other entry, so some of the older entries will still be
  available.
description-type: haddock
hash: 9283b4267a60f98652ec69d24dda6028e164c37c84e4ee8519379a02dc3876aa
homepage: https://github.com/joeyadams/haskell-rolling-queue
latest: '0.1'
license-name: BSD-3-Clause
maintainer: joeyadams3.14159@gmail.com
synopsis: Bounded channel for STM that discards old entries when full
test-bench-deps: {}
