all-versions:
- 0.1.0
- 0.2.0
author: Sean Hess
basic-deps:
  base: '>=4.16 && <5'
  bytestring: '>=0.11 && <0.13'
  casing: '>0.1.3.0 && <0.2'
  containers: '>=0.6 && <1'
  effectful-core: '>=2.3 && <3'
  file-embed: '>=0.0.10 && <0.1'
  html-entities: '>=1.1.4.7 && <1.2'
  http-types: '>=0.12 && <0.13'
  text: '>=1.2 && <3'
changelog: |
  # Revision history for atomic-css

  ## atomic-css 0.2.0

  * Added Html.Tag
  * refactored overflow, whiteSpace, instead of clip and scroll
  * maxWidth, maxHeight
  * raw is inline
  * change default exports

  ## atomic-css 0.1.0

  Renamed library to atomic-css with a focus on css utilities. View, Url and other Hyperbole-specific types moved to Hyperbole. Still provides an Html monad

  Major rewrite of Library and API
    * New interface with operators: (@) for attributes, (~) to utilities
    * Defining custom CSS selectors and new utilities is more intuitive

  ## web-view 0.7.0

  * stack, popup, offset, layer - more intuitive interface
  * added Web.View.Url.renderPath
  * Style class
  * added code, lists

  ## web-view 0.6.0

  * stack - layout children on top of each other
  * ChildCombinator: apply styles to direct children
  * `Mod` is now `Mod context`, allowing for type-safe `Mod`s
  * fixed: escaping in auto-generated `<style>`
  * Refactored: selectors and rendering

  ## web-view 0.5.0

  * Rendering improvements
  * extClass to add external css class
  * inline elements
  * Url: no longer lowercases automatically. Show/Read instance

  ## web-view 0.4.0

  * Added new Mods. Length type. Improved Url type

  ## web-view 0.3.1

  * Cleanup. Refactored Mods

  ## web-view 0.2.3 -- 2023-11-27

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "Atomic CSS\n============\n\n[![Hackage](https://img.shields.io/hackage/v/atomic-css.svg)][hackage]\n\nType-safe,
  composable CSS utility functions. Inspired by Tailwindcss and Elm-UI\n\n\n### Write
  Haskell instead of CSS\n\nStyle your html with composable CSS utility functions:\n\n```haskell\nel
  ~ bold . pad 8 $ \"Hello World\"\n```\n\nThis renders as the following HTML with
  embedded CSS utility classes:\n\n```html\n<style type='text/css'>\n.bold { font-weight:bold
  }\n.p-8 { padding:0.500rem }\n</style>\n\n<div class='bold p-8'>Hello World</div>\n```\n\nInstead
  of relying on the fickle cascade, factor and compose styles with the full power
  of Haskell functions!\n\n```haskell\nheader = bold\nh1 = header . fontSize 32\nh2
  = header . fontSize 24\npage = flexCol . gap 10 . pad 10\n\nexample = el ~ page
  $ do\n  el ~ h1 $ \"My Page\"\n  el ~ h2 $ \"Introduction\"\n  el \"lorem ipsum...\"\n```\n\nThis
  approach is inspired by Tailwindcss' [Utility Classes](https://tailwindcss.com/docs/styling-with-utility-classes)\n\n\n###
  Intuitive Flexbox Layouts\n\nCreate complex layouts with `row`, `col`, `grow`, and
  `space`\n\n```haskell\nholygrail = do\n  col ~ grow $ do\n    row \"Top Bar\"\n
  \   row ~ grow $ do\n      col \"Left Sidebar\"\n      col ~ grow $ \"Main Content\"\n
  \     col \"Right Sidebar\"\n    row \"Bottom Bar\"\n```\n\n### Stateful Styles\n\nWe
  can apply utilities when certain states apply. For example, to change the background
  on hover:\n\n```haskell\nbutton ~ bg Primary . hover (bg PrimaryLight) $ \"Hover
  Me\"\n```\n\nMedia states allow us to create responsive designs\n\n```haskell\nel
  ~ width 100 . media (MinWidth 800) (width 400) $ do\n  \"Big if window > 800\"\n```\n\n\n###
  Embedded CSS\n\nOnly the utilities used in a given html fragment are rendered:\n\n
  \   >>> renderText $ el ~ bold $ \"Hello\"\n    \n    <style type='text/css'>.bold
  { font-weight:bold }</style>\n    <div class='bold'>Hello</div>\n\n\n### Try Example
  Project with Nix\n\nIf you want to get a feel for atomic-css without cloning the
  project run `nix run github:seanhess/atomic-css` to run the example webserver locally\n\nImport
  Flake\n------------\n\nYou can import this flake's overlay to add `atomic-css` to
  `overriddenHaskellPackages` and which provides a ghc966 and ghc982 package set that
  satisfy `atomic-css`'s dependencies.\n\n```nix\n{\n  inputs = {\n    nixpkgs.url
  = \"github:nixos/nixpkgs/nixpkgs-unstable\";\n    atomic-css.url = \"github:seanhess/atomic-css\";
  # or \"path:/path/to/cloned/atomic-css\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n
  \ };\n\n  outputs = { self, nixpkgs, atomic-css, flake-utils, ... }:\n    flake-utils.lib.eachDefaultSystem
  (\n      system:\n      let\n        pkgs = import nixpkgs {\n          inherit
  system;\n          overlays = [ atomic-css.overlays.default ];\n        };\n        haskellPackagesOverride
  = pkgs.overriddenHaskellPackages.ghc966.override (old: {\n          overrides =
  pkgs.lib.composeExtensions (old.overrides or (_: _: { })) (hfinal: hprev: {\n            #
  your overrides here\n          });\n        });\n      in\n      {\n        devShells.default
  = haskellPackagesOverride.shellFor {\n          packages = p: [ p.atomic-css ];\n
  \       };\n      }\n    );\n}\n```\n\nLocal Development\n-----------------\n\n###
  Recommended ghcid command\n\nIf you want to work on both the atomic-css library
  and example code, this `ghcid` command will run and reload the examples server as
  you change any non-testing code.\n\n```\nghcid --command=\"cabal repl exe:example
  lib:atomic-css\" --run=Main.main --warnings --reload=./embed/preflight.css\n```\n\nIf
  you want to work on the test suite, this will run the tests each time any library
  code is changed.\n\n```\nghcid --command=\"cabal repl test lib:atomic-css\" --run=Main.main
  --warnings --reload=./embed/preflight.css\n```\n\n### Nix\n\n- `nix flake check`
  will build the library, example executable and devShell with ghc-9.8.2 and ghc-9.6.6\n
  \   - This is what the CI on GitHub runs\n- `nix run` or `nix run .#ghc982-example`
  to start the example project with GHC 9.8.2\n    - `nix run .#ghc966-example` to
  start the example project with GHC 9.6.6\n- `nix develop` or `nix develop .#ghc982-shell`
  to get a shell with all dependencies installed for GHC 9.8.2. \n    - `nix develop
  .#ghc966-shell` to get a shell with all dependencies installed for GHC 9.6.6. \n-
  `nix build`, `nix build .#ghc982-atomic-css` and `nix build .#ghc966-atomic-css`
  builds the library with the `overriddenHaskellPackages`\n    - If you want to import
  this flake, use the overlay\n- `nix flake update nixpkgs` will update the Haskell
  package sets and development tools\n\n### Common Nix Issues\n\n#### Not Allowed
  to Refer to GHC\n\nIf you get an error like:\n\n```\nerror: output '/nix/store/64k8iw0ryz76qpijsnl9v87fb26v28z8-my-haskell-package-1.0.0.0'
  is not allowed to refer to the following paths:\n         /nix/store/5q5s4a07gaz50h04zpfbda8xjs8wrnhg-ghc-9.6.3\n```\n\nFollow
  these [instructions](https://nixos.org/manual/nixpkgs/unstable/#haskell-packaging-helpers)\n\n####
  Dependencies Incorrect\n\nYou will need to update the overlay, look for where it
  says `\"${packageName}\" = hfinal.callCabal2nix packageName src { };` and add a
  line like `Diff = hfinal.callHackage \"Diff\" \"0.5\" { };` with the package and
  version you need.\n\n#### Missing Files\n\nCheck the `include` inside the `nix-filter.lib`
  to see if all files needed by cabal are there.\n\nLearn More\n----------\n\nView
  Documentation on [Hackage][hackage]\n* https://hackage.haskell.org/package/atomic-css\n\nView
  on Github\n* https://github.com/seanhess/atomic-css\n\nView [Examples](https://github.com/seanhess/atomic-css/blob/latest/example/app/Main.hs)\n\n\n[hackage]:
  https://hackage.haskell.org/package/atomic-css\n\n\nContributors\n------------\n\n*
  [Sean Hess](https://github.com/seanhess)\n* [Kamil Figiela](https://github.com/kfigiela)\n*
  [Pfalzgraf Martin](https://github.com/Skyfold)\n\n"
description-type: markdown
hash: 7a546465724689e55c9b9cad64da7c361f2de728430f994a73f906985b164c09
homepage: https://github.com/seanhess/atomic-css
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: seanhess@gmail.com
synopsis: Type-safe, composable CSS utility functions. Inspired by Tailwindcss and
  Elm-UI
test-bench-deps:
  atomic-css: '>=0'
  base: '>=4.16 && <5'
  bytestring: '>=0.11 && <0.13'
  casing: '>0.1.3.0 && <0.2'
  containers: '>=0.6 && <1'
  effectful-core: '>=2.3 && <3'
  file-embed: '>=0.0.10 && <0.1'
  html-entities: '>=1.1.4.7 && <1.2'
  http-types: '>=0.12 && <0.13'
  skeletest: '>=0'
  text: '>=1.2 && <3'
