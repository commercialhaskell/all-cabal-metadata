homepage: ''
changelog-type: markdown
hash: 933893a7a82df09491a169bf912ecbc7a548e510f8488127d588342d1465947a
test-bench-deps: {}
maintainer: vamchale@gmail.com
synopsis: A build tool for ATS
changelog: |
  # ats-pkg

  ## 3.5.0.2

    * Compat with Dhall >= 1.35.0

  ## 3.5.0.1

    * Bump config files

  ## 3.5.0.0

    * Remove `packageCompiler`

  ## 3.4.0.8

    * Drop `.bz2` decompression; support GHC 8.8.1

  ## 3.4.0.5

    * Pin Dhall package
    * More sensible verbosity flag

  ## 3.4.0.3

    * Support shake 0.18.4

  ## 3.4.0.1

    * Install manpages to `/usr/local/share/man/man1` on Mac
    * Disable optimizations when running `--debug`

  ## 3.4.0.0

    * Add `--debug` flag to `test` and `build` subcommands

  ## 3.3.0.6

    * Only run `./autogen.sh` when installing the compiler if
      `automake`/`autoconf` exist

  ## 3.3.0.5

    * Only run `cmake` when it exists

  ## 3.3.0.4

    * Fixes for Mac

  ## 3.3.0.3

    * Update manpages

  ## 3.3.0.1

    * Add `bench` subcommand to CLI

  ## 3.3.0.0

    * Add `bench` field to `Pkg` type

  ## 3.2.6.4

    * Upgrade to latest `dhall`

  ## 3.2.6.3

    * Better `clean` command

  ## 3.2.6.1

    * Display `language-ats` version when `--version` flag is passed

  ## 3.2.6.0

    * Add `license` and `changelog` field to `Debian` type
    * `lintian` doesn't object to debianizations anymore

  ## 3.2.5.14

    * Update for new Dhall library

  ## 3.2.5.13

    * Use new compiler in `atslib.dhall`

  ## 3.2.5.12

    * Use old Dhall prelude

  ## 3.2.5.11

    * Set UTF8 encoding in all cases

  ## 3.2.5.10

    * Use better URL

  ## 3.2.5.6

    * Use `libarchive` instead of `tar`
    * Change URL for compilers
    * Remove hidden `pack` command
    * Remove `packageCompiler` function
    * Update latest Dhall libraries

  ## 3.2.4.6

    * Bump Dhall libraries again

  ## 3.2.4.5

    * Bump Dhall libraries for new default compiler

  ## 3.2.4.4

    * Fix bug where `gc` version could not be constrained
    * Slightly improved behavior around C package versioning (allow package
      reinstalls)

  ## 3.2.4.2

    * Update `.dhall` files

  ## 3.2.4.0

    * Update to use `cpphs` again

  ## 3.2.3.0

    * Update to not use `cpphs`

  ## 3.2.2.4

    * Fix `dhall/atslib.dhall` file that is embedded into the binary

  ## 3.3.2.0

    * Update `Debian` type and adjust prelude accordingly
    * Allow Debian packages built to include header files and libraries.
    * Bug fixes related to Debian packaging.

  ## 3.2.1.8

    * Update Dhall prelude

  ## 3.2.1.2

  Bug Fixes:

    * Don't default to 4 processors
    * Use `getAppUserDirectory` for better portability

  Breaking Changes:

    * Only build C sources when sensible to do so
basic-deps:
  http-client: -any
  quaalude: -any
  shake: '>=0.18.4'
  zip-archive: -any
  ats-pkg: -any
  bytestring: -any
  ansi-wl-pprint: -any
  shake-c: '>=0.4.0.0'
  archive-libarchive: '>=1.0.0.0'
  Cabal: '>=2.2.0.0'
  base: '>=4.10 && <5'
  dhall: '>=1.27.0'
  text: -any
  shake-ext: '>=3.1.1.0'
  unix-compat: -any
  process: -any
  language-ats: '>=1.7.4.0'
  containers: -any
  cli-setup: -any
  dependency: '>=1.2.0.0'
  shake-ats: '>=1.10.2.0'
  archive-sig: '>=1.0.1.0'
  lzma: -any
  http-client-tls: -any
  zlib: -any
  mtl: -any
  parallel-io: -any
  file-embed: '>=0.0.9'
  temporary: -any
  optparse-applicative: -any
  microlens: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.1
- 0.3.0.2
- 1.0.0.0
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.0.3
- 1.2.0.0
- 1.2.0.1
- 1.2.0.2
- 1.2.0.3
- 1.2.0.4
- 1.2.0.5
- 1.2.0.6
- 1.2.0.7
- 1.2.0.8
- 1.2.1.0
- 1.2.1.3
- 1.3.0.0
- 1.4.0.0
- 1.4.0.1
- 1.4.0.3
- 1.4.0.6
- 2.0.0.2
- 2.0.0.4
- 2.0.0.6
- 2.0.0.7
- 2.0.0.8
- 2.0.0.9
- 2.0.0.10
- 2.0.0.11
- 2.0.0.12
- 2.0.0.13
- 2.1.0.0
- 2.1.0.3
- 2.1.0.5
- 2.1.0.6
- 2.1.0.7
- 2.1.0.8
- 2.1.0.9
- 2.1.0.10
- 2.2.0.0
- 2.2.0.1
- 2.2.0.2
- 2.2.0.5
- 2.2.0.6
- 2.2.0.7
- 2.2.0.8
- 2.2.0.11
- 2.2.0.15
- 2.2.0.16
- 2.2.0.17
- 2.2.0.18
- 2.2.1.0
- 2.2.1.1
- 2.3.0.0
- 2.3.0.3
- 2.3.0.6
- 2.4.0.0
- 2.4.0.3
- 2.4.0.6
- 2.4.1.0
- 2.4.1.6
- 2.4.2.0
- 2.4.2.7
- 2.4.2.8
- 2.4.2.9
- 2.4.2.18
- 2.4.2.19
- 2.5.0.3
- 2.6.0.0
- 2.6.0.1
- 2.6.0.2
- 2.6.0.3
- 2.6.1.0
- 2.6.1.1
- 2.6.1.2
- 2.6.1.3
- 2.6.1.11
- 2.6.1.16
- 2.7.0.10
- 2.7.0.22
- 2.7.1.0
- 2.7.1.1
- 2.7.1.2
- 2.8.0.0
- 2.8.0.8
- 2.9.0.0
- 2.9.0.1
- 2.9.0.2
- 2.10.0.0
- 2.10.0.2
- 2.10.0.8
- 2.10.0.11
- 2.10.0.17
- 2.10.0.20
- 2.10.1.5
- 2.10.1.8
- 2.10.2.0
- 2.10.2.2
- 2.10.2.5
- 2.11.0.1
- 2.11.0.7
- 2.11.0.8
- 2.11.0.9
- 2.11.0.10
- 3.0.0.0
- 3.0.0.1
- 3.0.0.2
- 3.0.0.4
- 3.0.0.10
- 3.0.0.11
- 3.1.0.2
- 3.1.0.6
- 3.1.0.12
- 3.2.1.2
- 3.2.1.8
- 3.2.2.0
- 3.2.2.2
- 3.2.2.3
- 3.2.3.0
- 3.2.4.0
- 3.2.4.2
- 3.2.4.4
- 3.2.4.5
- 3.2.4.6
- 3.2.5.3
- 3.2.5.6
- 3.2.5.10
- 3.2.5.11
- 3.2.5.12
- 3.2.5.13
- 3.2.5.16
- 3.2.5.17
- 3.2.5.18
- 3.2.6.0
- 3.2.6.1
- 3.2.6.2
- 3.2.6.3
- 3.2.6.4
- 3.3.0.0
- 3.3.0.1
- 3.3.0.4
- 3.3.0.5
- 3.3.0.6
- 3.3.0.7
- 3.4.0.0
- 3.4.0.1
- 3.4.0.3
- 3.4.0.4
- 3.4.0.5
- 3.4.0.8
- 3.5.0.0
- 3.5.0.1
- 3.5.0.2
- 3.5.0.3
author: Vanessa McHale
latest: 3.5.0.3
description-type: markdown
description: |
  # ATSPackage

  [![Build Status](https://travis-ci.org/vmchale/atspkg.svg?branch=master)](https://travis-ci.org/vmchale/atspkg)
  [![Windows build status](https://ci.appveyor.com/api/projects/status/github/vmchale/atspkg?svg=true)](https://ci.appveyor.com/project/vmchale/atspkg)
  [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/ats-pkg/badge)](https://matrix.hackage.haskell.org/package/ats-pkg)
  [![Hackage](https://img.shields.io/hackage/v/ats-pkg.svg)](http://hackage.haskell.org/package/ats-pkg)
  [![Dependencies of latest version on Hackage](https://img.shields.io/hackage-deps/v/ats-pkg.svg)](https://hackage.haskell.org/package/ats-pkg)

  This is a build system for ATS written in Haskell and configured with Dhall. It
  is not fully working, but the configuration format is now stable.

  `atspkg` works quite well as a build system, and acceptably well as a package manager.

  - [Features & Non-Features](#features-&-non-features)
    - [Example](#example)
  - [Installation](#installation)
    - [Script](#script)
    - [Source](#source)
  - [Quick Start](#quick-start)
  - [Examples](#examples)
  - [Global Configuration](#global-configuration)


  ## Features & Non-Features

  Things that `atspkg` will do for you:

    * Dramatically simplify CI for ATS projects
    * Simplify distribution of your project
    * Enable Haskell builds that depend on ATS code
    * Enable ATS builds that depend on Haskell code
    * Track all file dependencies
    * Make contributing to your projects easier
    * Run builds in parallel (like `make`)
    * Install `patscc` and other ATS tooling
    * Install manual pages and shell completions
    * Install ATS libraries
    * Dependency resolution

  Things that `atspkg` will not do for you:

    * Give you the full flexibility of the C/ATS ecosystem
    * Integrate with other ecosystems
    * Provide a centralized package repository
    * Cache builds (like `nix` or `cabal new-build`)

  ### Example

  As an example, the following will install `polyglot`:

  ```bash
  atspkg remote https://github.com/vmchale/polyglot/archive/master.zip
  ```

  As you can see, this greatly simplifies distribution and testing of programs
  written in ATS.

  ## Installation

  ### Script

  The easiest way to install is via a script, viz.

  ```bash
  curl -sSl https://raw.githubusercontent.com/vmchale/atspkg/master/bash/install.sh | sh -s
  ```

  Thereafter, you can run

  ```bash
  atspkg upgrade
  ```

  to upgrade to the latest release.

  ### Source

  If that doesn't work, you can download
  [Cabal](https://www.haskell.org/cabal/download.html) and
  [GHC](https://www.haskell.org/ghc/download.html) and install with

  ```bash
  cabal update
  cabal new-install ats-pkg --symlink-bindir ~/.local/bin --happy-options='-gcsa' --alex-options='-g'
  ```

  Note that `$HOME/.local/bin` will need to be on your `PATH`.

  ## Quick Start

  Install [pi](http://github.com/vmchale/project-init) with

  ```
  curl -LSfs https://japaric.github.io/trust/install.sh | sh -s -- --git vmchale/project-init
  ```

  Initialize an ATS project with

  ```
  pi new ats project
  ```

  Then build & run it:

  ```
  cd project
  atspkg run
  ```

  ## Examples

  You can find several examples with explanation
  [here](https://github.com/vmchale/atspkg/blob/master/ats-pkg/EXAMPLES.md).

  ## Global Configuration


  `atspkg` is configured via a file in `$HOME/.config/atspkg/config.dhall`. You can
  set a custom package set as follows:

  ```
  let version = "master"
  in

  let cfg =
    { defaultPkgs = "https://raw.githubusercontent.com/vmchale/atspkg/${version}/ats-pkg/pkgs/pkg-set.dhall"
    , path = ([] : Optional Text)
    , githubUsername = "vmchale"
    , filterErrors = False
    }
  in cfg
  ```

  I recommend setting `version` to whichever branch your version of `atspkg` was
  built from.
license-name: BSD-3-Clause
