homepage: https://github.com/Yuras/pdf-toolbox
changelog-type: markdown
hash: 9f3a9eea11420982f4f84addda9994d6ee756e9c9ed5c1691214ab0fcc80b6c0
test-bench-deps:
  bytestring: -any
  base: -any
  unordered-containers: -any
  hspec: -any
  pdf-toolbox-core: -any
  io-streams: -any
  attoparsec: -any
  vector: -any
maintainer: Yuras Shumovich <shumovichy@gmail.com>
synopsis: A collection of tools for processing PDF files.
changelog: |
  unreleased

  0.1.1

  * rework API
  * support ghc from 8.0 to 8.10 and drop older versions
  * interpret unknown xref stream entry type as reference to null object
  * support 1- and 2-digit escapes sequence in literal string

  0.0.3.0

  * add Functor and Applicative instances to fix AMP warnings
  * fix attoparsec module deprication warnings
  * add scientific dependency
    latest attoparsec uses it for numbers
basic-deps:
  bytestring: '>=0.10.4 && <0.12'
  base: '>=4.9 && <5'
  unordered-containers: -any
  cipher-rc4: -any
  crypto-api: -any
  containers: -any
  io-streams: -any
  cipher-aes: -any
  hashable: -any
  base16-bytestring: '>=1'
  attoparsec: '>=0.12'
  scientific: -any
  vector: -any
  cryptohash: -any
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.2.0
- 0.0.2.1
- 0.0.3.0
- 0.0.3.1
- 0.0.3.2
- 0.0.3.3
- 0.0.4.0
- 0.0.4.1
- 0.1.1
author: Yuras Shumovich
latest: 0.1.1
description-type: haddock
description: |-
  Low level tools for processing PDF files.

  Level of abstraction: cross reference, trailer, indirect object, object

  The API is based on random access input streams, and is designed to be memory efficient.
  We don't need to parse the entire PDF file and store it in memory when you need just one page or two.
  Usually it is also leads to time efficiency, but we don't try optimize performance
  by e.g. maintaining xref or object cache. Higher level layers should take care of it.

  The library is low level. It may mean that you need to be familiar with PDF file internals to
  actually use it.
license-name: BSD-3-Clause
