all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
author: Vladimir Kalnitsky <klntsky@gmail.com>
basic-deps:
  ansi-terminal: '>=0'
  base: '>=4.12 && <5'
  bytestring: '>=0'
  dhall: '>=0'
  directory: '>=0'
  dzen-dhall: '>=0'
  file-embed-lzma: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  hourglass: '>=0'
  http-conduit: '>=0'
  http-types: '>=0'
  megaparsec: '>=0'
  microlens: '>=0'
  microlens-th: '>=0'
  network-uri: '>=0'
  optparse-applicative: '>=0'
  parsec: '>=0'
  parsers: '>=0'
  pipes: '>=0'
  prettyprinter: '>=0'
  prettyprinter-ansi-terminal: '>=0'
  process: '>=0'
  random: '>=0'
  text: '>=0'
  transformers: '>=0'
  unix: '>=0'
  unordered-containers: '>=0'
  utf8-string: '>=0'
  vector: '>=0'
changelog: |
  # Revision history for dzen-dhall

  ## 1.0.2 -- 2020-18-02

  ### Changes
  - Updated Dhall version to 1.28.0

  ### Fixed
  - stdout/stderr handles for spawned processes were not being closed, resulting in `too many open files` errors when using plugins that emit events a lot (#9)

  ## 1.0.1 -- 2019-08-29

  ### Changes
  - Add a small delay between dzen2 startups to preserve the ordering of bars (#6)

  ### Fixed
  - Validation for `#XXXXXX`-formatted colors (#5)
  - Padding (#4)

  ## 1.0.0 -- 2019-08-26

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# dzen-dhall\n\n[![Build Status](https://travis-ci.com/dzen-dhall/dzen-dhall.svg?branch=master)](https://travis-ci.com/dzen-dhall/dzen-dhall/)\n![Hackage](https://img.shields.io/hackage/v/dzen-dhall)\n\n[Dzen](https://github.com/robm/dzen)
  is a general purpose messaging, notification and menuing program for X11. It features
  rich in-text formatting & control language, allowing to create GUIs by piping output
  of arbitrary executables to the `dzen2` binary. There are plenty of good usage examples
  on [r/unixporn](https://www.reddit.com/r/unixporn/search/?q=dzen&restrict_sr=1).\n\nUnfortunately,
  combining outputs of multiple executables before feeding them to `dzen2`, which
  is usually done by custom shell scripts, is a tedious and error-prone task. Consider
  the following problems:\n\n### Use of newlines\n\nBy default, dzen2 only renders
  the last line of its input, so newlines must be handled somehow by the user.\n\n###
  Complexity of dynamic text formatting\n\nIf one wants each program's output to appear
  on its own fixed position on the screen, trimming and padding the output of each
  executable is required, to make sure that the text will not jitter when combined.\n\n###
  High delays\n\nSome output sources (shell scripts or commands used to provide the
  data) take too long to produce the output, some change their outputs rarely, but
  some are expected to update very frequently (like those that output current time
  or volume indicators on your screen). It means that the `while true; do ...; done
  | dzen2` pattern is not ideal. Some clever scheduling should be done to avoid delays
  and excessive resource waste. Output sources should be ran in parallel with their
  own update intervals.\n\n### No code reuse\n\nIt is hard to share pieces of code
  used to produce output in `dzen2` markup format because of the need to adapt the
  code. Ideally, there should be a \"plugin system\" allowing to import reusable configurations
  with a single command.\n\n### Non-trivial markup is hard\n\n[Dzen in-text format
  and control language](https://github.com/robm/dzen/blob/488ab66019f475e35e067646621827c18a879ba1/README#L382)
  is quite rich: it features almost-arbitrary text positioning, text coloring, drawing
  simple shapes, loading XBM images and even allows to define clickable areas. However,
  these control structures are too low-level: implementing UI elements we want to
  use (for example, [marquee](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee)-like
  blocks with arbitrary content) would require too much effort. Besides, one more
  problem with this markup language is that nested tags are not supported.\n\nTo fill
  the *abstraction gap*, a new [DSL](https://en.wikipedia.org/wiki/Domain-specific_language)
  should be introduced. This language should allow its users to abstract away from
  markup-as-text and focus on markup-as-[syntax-tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree)
  instead - no need to say, tree structures are more suitable for the purpose of defining
  UIs. It is also way easier to process tree representations programmatically.\n\n##
  The solution\n\n[Dhall](https://dhall-lang.org/) is a statically-typed [total](https://en.wikipedia.org/wiki/Total_functional_programming)
  functional programming language. These properties make it a good choice for dealing
  with complex user-defined configurations: static typing allows to catch typos and
  errors early, and totality guarantees that a configuration program will always terminate.\n\nThis
  repository contains data type and function definitions in Dhall that form a DSL
  for creating almost arbitrary Dzen UIs, called \"bars\", and a Haskell program capable
  of reading bar definitions and producing input for `dzen2` binary based on them.\n\nIn
  effect, `dzen-dhall` introduces a new approach to desktop scripting/customization
  with Dzen. Basically, it provides solutions for all of the aforementioned problems.
  `dzen-dhall` is smart when formatting text, handles newlines gracefully, runs output
  sources in parallel, and its [plugin system](#installing-plugins) solves the problem
  of code reuse.\n\n### A quick example\n\nThe essence of the DSL can be illustrated
  by the following excerpt from [the default config file](dhall/config.dhall) (with
  additional comments):\n\n```dhall\n-- A bar that shows how much memory is used:\nlet
  memoryUsage\n-- ^ `let` keyword introduces a new binding\n\t: Bar\n\t-- ^ Colon
  means \"has type\". `memoryUsage` is a `Bar`\n\t= bashWithBinaries\n\t  -- ^ Call
  to a function named `bashWithBinaries` with three arguments:\n\t  [ \"free\", \"grep\",
  \"awk\" ]\n\t  -- ^ A list of binaries required to run the script (used to exit
  early if\n\t  -- some of them are not present).\n\t  5000\n\t  -- ^ Update interval
  in milliseconds\n\t  ''\n\t  free -b | grep Mem | awk '{ printf(\"%.0f\\n\", $3
  * 100 / $2) }';\n\t  ''\n\t  -- ^ The script itself\n\n-- A bar that shows how much
  swap is used:\nlet swapUsage\n\t: Bar\n\t= bashWithBinaries\n\t  [ \"free\", \"grep\",
  \"awk\" ]\n\t  5000\n\t  ''\n\t  free -b | grep Swap | awk '{ printf(\"%.0f\\n\",
  $3 * 100 / $2) }';\n\t  ''\n\n-- A bar that shows current date:\nlet date\n\t: Bar\n\t=
  bashWithBinaries [ \"date\" ] 1000 \"date +'%d.%m.%Y'\"\n\n-- A bar that shows current
  time:\nlet time\n\t: Bar\n\t= bashWithBinaries [ \"date\" ] 1000 \"date +'%H:%M'\"\n\n--
  A function that colorizes a given `Bar`:\nlet accent : Bar â†’ Bar = fg \"white\"\n\nin\tseparate\n
  \   -- ^ a function that inserts |-separators between nearby elements of a list\n\t[
  join [ text \"Mem: \", accent memoryUsage, text \"%\" ]\n\t-- ^ `join` concatenates
  multiple `Bar`s\n\t, join [ text \"Swap: \", accent swapUsage, text \"%\" ]\n\t\t
  \ -- ^ `text` is used to convert a text value to a `Bar`\n\t, join [ date, text
  \" \", accent time ]\n\t] : Bar\n```\n\nThis definition results in the following
  Dzen output:\n\n![Example 1](img/example1.png)\n\n## Getting started\n\n### Building\n\n####
  Using [stack](https://docs.haskellstack.org/en/stable/README/)\n\n```\nstack build\n```\n\n####
  Using [Nix](https://nixos.org/nix/)\n\n```\nnix-build --attr dzen-dhall\n```\n\nTo
  use pinned version of nixpkgs, pass `--arg usePinned true`.\n\n### Installing\n\n[Binary
  releases](https://github.com/dzen-dhall/dzen-dhall/releases) are available.\n\n####
  Using [stack](https://docs.haskellstack.org/en/stable/README/)\n\n```\nstack install\n```\n\n####
  Using [Nix](https://nixos.org/nix/)\n\n```\nnix-env --file default.nix --install
  dzen-dhall\n```\n\nTo use pinned version of nixpkgs, pass `--arg usePinned true`.\n\n###
  Running\n\nTo create a default configuration, run:\n\n```\ndzen-dhall init\n```\n\n`dzen-dhall`
  will put some files to `~/.config/dzen-dhall/`\n\nFiles in `types/` and `utils/`
  subdirectories are set read-only by default - the user should not edit them, since
  they contain the implementation. They are still exposed to simplify learning and
  debugging. `prelude/` directory contains a copy of [Dhall prelude](https://github.com/dhall-lang/dhall-lang/tree/cf263a128d4e2e25afb3187cb8b243e7e68af9fb/Prelude).\n\n##
  Installing plugins\n\n`dzen-dhall` comes with a plugin system capable of pulling
  pieces of Dhall code with metadata either from a [curated set of plugins](https://github.com/dzen-dhall/plugins)
  or from third-party sources.\n\nFor example, let's install [a plugin named `tomato`](https://github.com/dzen-dhall/plugins#tomato),
  which is a countdown timer with interactive UI.\n\nRunning `dzen-dhall plug tomato`
  will result in fetching the plugin source from [this file](https://github.com/dzen-dhall/plugins/blob/master/tomato/plugin.dhall)
  and pretty-printing it to the terminal for review. You will be prompted for confirmation,
  and if you confirm the installation, you will see the following output:\n\n```\nNew
  plugin \"tomato\" can now be used as follows:\n\nlet tomato = (./plugins/tomato.dhall).main\n\nin
  \ plug\n  ( tomato\n        ''\n        notify-send --urgency critical \" *** Time
  is up! *** \"\n        ''\n  )\n```\n\nThis is a message the author left for you,
  to demonstrate how to actually use their plugin.\n\nNavigate to your [`config.dhall`](https://github.com/dzen-dhall/dzen-dhall/blob/master/dhall/config.dhall),
  find a comment saying `You can add new plugins right here` and insert the expression
  from above instead of the comment (don't forget to also add a leading comma).\n\nAfter
  running `dzen-dhall` again, you should be able to see the output of the newly installed
  plugin.\n\n## Modifying configuration\n\nThis chapter describes `dzen-dhall` DSL
  in depth. It's best to read the [Dhall wiki](https://github.com/dhall-lang/dhall-lang/wiki)
  to become familiar with Dhall syntax before you proceed.\n\n### [Bars](dhall/types/Bar.dhall)\n\nThe
  most important concept of the DSL is `Bar`. Essentially, `Bar` is a tree data structure
  containing text, images, shapes, etc. in its leaves. [Default config file](dhall/config.dhall)
  exposes some functions for working with `Bar`s:\n\n<big><pre>\n-- [Text primitives](#text-primitives):\nlet
  text : Text â†’ Bar\nlet markup : Text â†’ Bar\n\n-- Used to combine multiple Bars into
  one.\nlet join : List Bar â†’ Bar\n\n-- [Primitives of Dzen markup language](#primitives):\nlet
  [fg](#coloring) : Color â†’ Bar â†’ Bar\nlet [bg](#coloring) : Color â†’ Bar â†’ Bar\nlet
  [i](#drawing-images) : Image â†’ Bar\nlet [r](#drawing-shapes) : Natural â†’ Natural
  â†’ Bar\nlet [ro](#drawing-shapes) : Natural â†’ Natural â†’ Bar\nlet [c](#drawing-shapes)
  : Natural â†’ Bar\nlet [co](#drawing-shapes) : Natural â†’ Bar\nlet [p](#relative-positioning)
  : Position â†’ Bar â†’ Bar\nlet [pa](#absolute-positioning) : AbsolutePosition â†’ Bar
  â†’ Bar\nlet [ca](#clickable-areas) : Button â†’ Shell â†’ Bar â†’ Bar\nlet [ib](#ignoring-background-color)
  : Bar â†’ Bar\n\n-- [Animations](#animations)\nlet [slider](#sliders) : Slider â†’ List
  Bar â†’ Bar\nlet [marquee](#marquees) : Marquee â†’ Bar â†’ Bar\n\n-- Other\nlet [pad](#padding-text)
  : Natural â†’ Padding â†’ Bar â†’ Bar\nlet [trim](#trimming-text) : Natural â†’ Direction
  â†’ Bar â†’ Bar\nlet [source](#sources) : Source â†’ Bar\nlet [plug](#plugins) : Plugin
  â†’ Bar\nlet [automaton](#automata) : Text â†’ StateTransitionTable â†’ [StateMap](#state-maps)
  Bar â†’ Bar\nlet [check](#assertions) : List [Check](#assertions) â†’ Bar\nlet [define](#variables)
  : Variable â†’ Text â†’ Bar\nlet [scope](#scopes) : Bar â†’ Bar\n</pre></big>\n\n### Text
  primitives\n\n`text` is used to create `Bar`s containing static, escaped pieces
  of text. `markup`, on the contrary, does not escape its input, so that if it does
  contain markup, it will be interpreted by dzen2.\n\n### Primitives\n\nVarious primitives
  of dzen2 markup language (`^fg()`, `^bg()`, `^i()`, etc. - see [dzen2 README](https://github.com/robm/dzen)
  for details on them) are represented by corresponding `Bar` constructors (`fg`,
  `bg`, `i`, etc.).\n\n#### Coloring\n\nBackground and foreground colors can be set
  using `bg` and `fg`. A color can be one of the following:\n\n- [X11 color name](https://en.wikipedia.org/wiki/X11_color_names);\n-
  `#XXX`-formatted hex number;\n- `#XXXXXX`-formatted hex number.\n\n`fg` can also
  be used to set colors of [XBM bitmaps](#drawing-images).\n\n`dzen-dhall` color blocks
  can be nested (unlike when using plain dzen2 markup). `^fg(red) red ^fg(pink) pink
  ^fg() red ^fg()` will be rendered by dzen2 as ![](img/nested-colors1.png). But `dzen-dhall`
  will process `fg \"red\" (join [ text \"red \", fg \"pink\" (text \"pink\"), text
  \" red\" ])` as ![](img/nested-colors2.png).\n\n#### Ignoring background color\n\n`ib`
  can be used to completely disable background coloring for a region of output. Background
  coloring can't be enabled again from within a child `Bar`.\n\nFor example, this:\n\n```dhall\nbg\n(\"#F00\")\n(
  join\n[ text \"...\"\n, ib\n  ( join\n\t[ text \"background color is \"\n\t, bg
  (\"#0F0\") (text \"completely\")\n\t, text \"ignored\"\n\t]\n  )\n, text \"...\"\n]\n)\n```\n\nresults
  in the following output:\n\n![Ignore background preview](img/ib.png)\n\n#### Drawing
  images\n\n[XBM bitmaps](https://www.fileformat.info/format/xbm/egff.htm) can be
  loaded using `i` function.\n\n`i` accepts both filenames and raw image contents
  (XBM images are just pieces of C code):\n\nFor example,\n\n```dhall\ni\n''\n#define
  smiley_width 15\n#define smiley_height 15\nstatic unsigned char smiley_bits[] =
  {\n   0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0xcc, 0x00, 0x4c, 0x00, 0x48, 0x00,\n
  \  0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x04, 0x04, 0x3c, 0x07, 0xe0, 0x01,\n   0x00,
  0x00, 0x00, 0x00, 0x00, 0x00 };\n''\n```\n\nwill be rendered as ![smiley](img/xbm_smiley.png).\n\nTo
  edit/create XBM images, use [GIMP](https://www.gimp.org/).\n\n#### Drawing shapes\n\nFour
  types of shapes are supported:\n\n| Function | Meaning           |\n|----------|-------------------|\n|
  `r`      | Rectangle         |\n| `ro`     | Rectangle outline |\n| `c`      | Circle
  \           |\n| `co`     | Circle outline    |\n\n#### Relative positioning\n\nRelative
  positioning (`p`) allows to shift by some number of pixels in any direction, reset
  vertical position, lock or unlock horizontal position, or move to one of the four
  edges of the screen:\n\n```dhall\nlet Position\n\t: Type\n\t= < XY :\n\t\t  { x
  : Integer, y : Integer }\n\t  | _RESET_Y\n\t  | _LOCK_X\n\t  | _UNLOCK_X\n\t  |
  _LEFT\n\t  | _RIGHT\n\t  | _TOP\n\t  | _CENTER\n\t  | _BOTTOM\n\t  >\n```\n\nFor
  example, `(p (Position.XY { x = +10, y = -5 }) (text \"Relative position\"))`.\n\n####
  Absolute positioning\n\nWith `pa` function, it is possible to specify absolute position
  of a bar, relative to the top-left corner of the screen.\n\n`AbsolutePosition` is
  defined as:\n\n```dhall\nlet AbsolutePosition : Type = { x : Integer, y : Integer
  }\n```\n\nExample:\n\n```dhall\n(pa { x = +0, y = +0 } (text \"Absolute position\"))\n```\n\n####
  Clickable areas\n\nExample:\n\n```dhall\n(ca Button.Left \"notify-send hello!\"
  (text \"Click me!\"))\n```\n\n`dzen2` does not allow a command in `^ca()` tag to
  contain closing parentheses, because `)` is used to indicate the end of the command.
  `dzen-dhall` bypasses this limitation:\n\n```dhall\n(ca Button.Left \"notify-send
  '(even with parentheses)'\" (text \"Click me!\"))\n```\n\n##### Buttons\n\n`Button`
  is defined as:\n\n```dhall\nlet Button : Type = < Left | Middle | Right | ScrollUp
  | ScrollDown | ScrollLeft | ScrollRight >\n```\n\n### Animations\n\nSome built-in
  animations are available. More may be added in the future.\n\n#### Sliders\n\nSliders
  change their outputs, variating between `Bar`s from a given list. Transitions are
  rendered smoothly.\n\nE.g., the following piece:\n\n\n```dhall\nlet fadeIn : Fade
  = mkFade VerticalDirection.Up 5 16\n       -- How many frames to spend on switching
  ^\n\nlet fadeOut : Fade = mkFade VerticalDirection.Down 5 16\n    -- How many pixels
  up or down to move the output ^\n\nin\tslider\n\t(mkSlider fadeIn fadeOut 3000)\n
  \               -- Delay, ms ^\n\n\t[ join [ text \"Mem: \", accent memoryUsage,
  text \"%\" ]\n\t, join [ text \"Swap: \", accent swapUsage, text \"%\" ]\n\t]\n\t:
  Bar\n```\n\n[[view complete example]](test/dhall/configs/sliders.dhall)\n\nresults
  in this output:\n\n![Slider preview](img/slider.gif)\n\n\n#### Marquees\n\nMarquee
  animation type is inspired by the [deprecated marquee HTML tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee).\n\nThis
  example with multiple marquees shows how various settings affect appearance:\n\n```dhall\nseparate\n[
  marquee\n  (mkMarquee 5 15 False)\n          -- ^ Number of animation frames per
  character.\n  ( text\n    \"The most annoying HTML code in the history of HTML codes.\"\n
  \ )\n\n  , marquee\n  (mkMarquee 0 32 True)\n            -- ^ Number of characters
  to show.\n  ( text\n    \"The most annoying HTML code in the history of HTML codes.\"\n
  \ )\n\n  , marquee (mkMarquee 3 10 True) (text \"test...\")\n                         --
  ^ Whether to repeat the input indefinitely\n                         -- if it is
  too short, or just pad it with spaces\n  , marquee (mkMarquee 3 10 False) (text
  \"test...\")\n\n  -- A demo with colors:\n  , marquee\n  (mkMarquee 8 15 False)\n
  \ ( join\n    [ text \"The \"\n    , fg \"white\" (text \"most \")\n    , text \"annoying
  \"\n    , fg \"white\" (text \"HTML \")\n    , text \"code \"\n    , fg \"white\"
  (text \"in \")\n    , text \"the \"\n    , fg \"white\" (text \"history \")\n    ,
  text \"of \"\n    , fg \"white\" (text \"HTML \")\n    , text \"codes. \"\n    ]\n
  \ )\n]\n```\n\n[[view complete example]](test/dhall/configs/marquees.dhall)\n\nThe
  output:\n\n![Marquee preview](img/marquees.gif)\n\nObviously, marquees and sliders
  can be nested within each other.\n\n### Padding text\n\nPaddings allow to make sure
  that the width of a piece of text is no less than some number of characters.\n\n```dhall\nlet
  Padding : Type = < Left | Right | Sides >\n```\n\nExample:\n\n```dhall\n(pad 30
  Padding.Sides (text \"...\")) : Bar\n```\n\n### Trimming text\n\n`trim` function
  allows to cut a given `Text` to desired width, removing excessive characters from
  either left or right.\n\nTrim direction is defined as follows:\n\n```dhall\nlet
  Direction = < Left | Right >\n```\n\nExample:\n\n```dhall\n(trim 5 Direction.Right
  (text \"Some long text...\"))\n```\n\n### Sources\n\nSources are arbitrary commands
  that generate text output for `dzen-dhall`.\n\n```dhall\nlet Source : Type =\n  {
  command : List Text\n  , input : Text\n  , updateInterval : Optional Natural\n  ,
  escape : Bool\n  }\n```\n\nFor example, a simple clock plugin can be created as
  follows:\n\n```dhall\nlet clocks : Source =\n  { updateInterval = Some 1000\n  ,
  command = [\"date\", \"+%H:%M\"]\n  , input = \"\"\n  , escape = True\n  }\n```\n\n`updateInterval`
  specifies *minimum* update interval: new source command will not be spawned if a
  previous one is still running (this is done to avoid race conditions). Actual time
  intervals between source command invocations are adjusted to be as close to specified
  `updateInterval`s as possible. For example, if running a command takes 100ms and
  `updateInterval` is set to `1000`, the real delay between command's exit and startup
  will be 900ms. And if it takes more than 1000ms, then the real delay will be zero.\n\nIf
  `updateInterval` is not specified (i.e. set to `None Natural`), the command will
  run once. It may continue generating output indefinitely, line-by-line, or exit
  - in the latter case, the last line of the output will be shown forever.\n\nNote
  that in most cases it's better to use `bash` or `bashWithBinaries` functions instead
  of constructing sources by hand.\n\n### Variables\n\n[Sources](#sources), [hooks](#hooks)
  and [clickable areas](#clickable-areas) can access and modify [scope-local](#scopes)
  variables, using `mkVariable`, `define`, `set` and `get` functions.\n\n```dhall\nlet
  mkVariable : Text â†’ Variable\nlet define : Variable â†’ Text â†’ Bar\nlet get : Variable
  â†’ Shell\nlet set : Variable â†’ Shell â†’ Shell\n```\n\nThe last two don't actually
  do anything with variables, they rather construct shell commands that do. `dzen-dhall`
  works like a template engine for bash scripts.\n\nFor example, let's see how a simple
  stateful counter can be implemented:\n\n```dhall\nlet var = mkVariable \"MyVariable\"\n\nin\tjoin\n
  \ [ define var \"0\"\n  -- ^ set a default value (optional)\n\n  , ca\n\tButton.Left\n\t''\n\tshellVar=${get
  var}\n\t${set var \"$(( shellVar - 1 ))\"}\n\t''\n\t(text \"-\")\n  -- ^ a button
  that decreases the value\n\n  , bash 500\n    ''\n    echo \" ${get var} \"\n    ''\n
  \ -- ^ a bar that prints the value\n\n  , ca\n\tButton.Left\n\t''\n\tshellVar=${get
  var}\n\t${set var \"$(( shellVar + 1 ))\"}\n\t''\n\t(text \"+\")\n  -- ^ a button
  that increases the value\n\n  ]\n```\n\n[[view complete example]](test/dhall/configs/variables.dhall)\n\nAt
  run time, it will look like this: ![](img/counter.png).\n\n### Scopes\n\nScopes
  are used for encapsulation. `dzen-dhall` guarantees that automata from different
  scopes are unable to communicate with each other, and that there are no variable
  collisions between scopes. Parent scopes are completely isolated from child scopes
  and vice versa.\n\nFor example, let's revisit our [counter example](#variables)
  from README section about variables.\n\nWhat if we wanted multiple counters to be
  present on the screen at the same time? Just inserting many of them is not enough:
  they will be using the same variable.\n\nBut wrapping them into separate scopes
  helps:\n\n```dhall\nlet counter =\n\t  join\n\t  [ define var \"0\"\n\t  , ca\n\t\tButton.Left\n\t\t''\n\t\tshellVar=${get
  var}\n\t\t${set var \"\\$(( shellVar - 1 ))\"}\n\t\t''\n\t\t(text \"-\")\n\t  ,
  bash 500 \"echo \\\" ${get var} \\\"\"\n\t  , ca\n\t\tButton.Left\n\t\t''\n\t\tshellVar=${get
  var}\n\t\t${set var \"\\$(( shellVar + 1 ))\"}\n\t\t''\n\t\t(text \"+\")\n\t  ]\n\nin\tjoin
  [ scope counter, scope counter ]\n```\n\n[[view complete example]](test/dhall/configs/scopes.dhall)\n\n###
  Automata\n\nEach [Bar](#bars) is essentialy a finite-state automaton. States are
  tagged by `Text` labels, and transitions are triggered by [events](#events) (very
  much like in some functional reactive programming frameworks). In the trivial case,
  a bar has only one state: you can think of any static `Bar` as of an automaton with
  a single state, the name of which is implicit.\n\nA bar with more than one state
  can be defined by its state transition function (in a form of a list of transitions),
  a mapping from state labels to `Bar`s (`StateMap`), which specifies visual representation
  of the automaton for various states, and a special identifier (`Address`) used to
  query the state of the automaton from the outside world.\n\nFor example, this code
  snippet defines a bar that switches between two states, `ON` and `OFF`:\n\n```dhall\nlet
  OFF : State = mkState \"\"\n                       -- ^ Empty label means that this
  state is initial.\nlet ON : State = mkState \"ON\"\n\nlet Toggle : Event = mkEvent
  \"Toggle\"\n\nlet address : Address = mkAddress \"MY_AUTOMATON\"\n\nlet stateTransitionTable\n\t:
  List Transition\n\t= [ mkTransition Toggle ON OFF, mkTransition Toggle OFF ON ]\n\n--
  Defines which output to render depending on the state:\nlet stateMap : StateMap
  Bar\n\t= [ { state = OFF, bar = text \"Switcher is OFF\" }\n\t  , { state = ON,
  \ bar = text \"Switcher is ON\" }\n\t  ]\n\n-- A clickable area that reacts to left-clicks
  by emitting `Toggle` events:\nin\tca\n\tButton.Left\n\t(emit Toggle)\n\t(automaton
  address stateTransitionTable stateMap)\n```\n\n#### [State maps](dhall/types/StateMap.dhall)\n\n`StateMap`s
  are used to define mappings from states to bars, i.e. they determine what to show
  depending on the state.\n\n```dhall\nlet StateMap : Type â†’ Type = Î»(Bar : Type)
  â†’ List { state : Text, bar : Bar }\n\nin  StateMap\n```\n\nNote that `StateMap`
  is parametrized by the `Bar` type.\n\nAlso note that unlike in traditional reactive
  frameworks, current state of an automaton only determines which `Bar` is *shown*,
  not *present in the tree*. See [this section](#deduplication) for more context.\n\n####
  [Events](dhall/types/Event.dhall)\n\nEvents can be emitted from within [hooks](#hooks),
  [sources](#sources) and [clickable areas](#clickable-areas). The only way to react
  to some event is to use an automaton.\n\n```dhall\nlet mkEvent : Text â†’ Event\n\nlet
  emit : Event â†’ Shell\n```\n\n#### [Hooks](dhall/types/Hook.dhall)\n\nHooks allow
  to execute arbitrary commands before state transitions of automata. When a hook
  exits with non-zero code, it prevents its corresponding state transition from happening.
  So, generally, hooks should only contain commands that exit fast, to prevent excessive
  delays.\n\nRelevant bindings include:\n\n```dhall\nlet Hook\n\t: Type\n\t= { command
  :\n\t\t  List Text\n\t  , input :\n\t\t  Text\n\t  }\n\nlet mkBashHook\n\t: Shell
  â†’ Hook\n\nlet addHook\n\t: Hook â†’ Transition â†’ Transition\n\nlet getEvent : Shell\n\nlet
  getCurrentState : Shell\n\nlet getNextState : Shell\n```\n\nFor example, The following
  hook will succeed only if a certain file exists:\n\n```dhall\nlet myHook : Hook
  =\n  { command = \"bash\"\n  , input = \"[ -f ~/some-file ]\"\n  }\n```\n\nHooks
  can also [emit events](#events) themselves (this may lead to event storm, so the
  user should be really careful).\n\nA special value, `getEvent`, allows to get the
  name of the event that triggered the hook. Similarly, `getCurrentState` and `getNextState`
  contain values from the corresponding row of a state transition table.\n\nFor example,
  a hook that inspects current event and both states can be added to all transitions
  of a state transition table from the [automata example](#automata):\n\n```dhall\nlet
  withInspect\n\t: Transition â†’ Transition\n\t= addHook (mkBashHook \"notify-send
  \\\"${getEvent}: ${getCurrentState} -> ${getNextState}\\\"\")\n\nlet stateTransitionTable\n\t:
  List Transition\n\t= prelude.List.map\n\t  Transition\n\t  Transition\n      --
  ^ Type parameters like these are always explicit in Dhall\n\t  withInspect\n\t  [
  mkTransition Toggle ON OFF, mkTransition Toggle OFF ON ]\n```\n\n[[view complete
  example]](test/dhall/configs/getEvent.dhall)\n\n### Assertions\n\nStartup-time assertions
  allow to make sure that some condition is true before proceeding to the execution.
  It is possible to assert that some binary is in `$PATH` or that some arbitrary shell
  command exits successfully:\n\n```dhall\nlet Assertion = < BinaryInPath : Text |
  SuccessfulExit : Text >\n```\n\nA `message` will be printed to the console on assertion
  failure. Assertions, when used wisely, greatly reduce debugging time.\n\nFor example,
  this assertion fails if there's no `something` binary in `$PATH`:\n\n```dhall\ncheck\n
  \ \"Did you miss something?\"\n  (Assertion.BinaryInPath \"something\")\n```\n\nAnd
  this assertion fails on weekends:\n\n```dhall\ncheck\n  \"Not going to work!\"\n
  \ (Assertion.SuccessfulExit \"[[ \\$(date +%u) -lt 6 ]]\")\n```\n\n[[view complete
  example]](test/dhall/configs/assertions.dhall)\n\n## Code structure overview\n\nThe
  image below contains an import tree for `config.dhall`. It was generated using `dhall
  resolve --dot`.\n\n[![](img/graph.png)](https://raw.githubusercontent.com/dzen-dhall/dzen-dhall/master/img/graph.png)\n\n##
  Naming conventions\n\nThese conventions are enforced by `dzen-dhall` as an attempt
  to lower cognitive noise for users and plugin maintainers.\n\n- [Event](#events)
  names and [variables](#variables) should be written camel-cased, first letter capitalized:
  `TimeHasCome`, `ButtonClicked`, etc.\n- [Automata](#automata) addresses should contain
  only capital letters, numbers and `_`.\n\n## Troubleshooting\n\nThis section is
  dedicated to fixing problems with your `dzen-dhall` configurations.\n\n### Getting
  more info about errors\n\nPass `--explain` flag to turn on verbose error reporting.\n\n###
  Marquee jittering\n\nJittering may appear if the value of `fontWidth` field in your
  settings is inadequate. It can be fixed by specifying the width manually:\n\n```dhall\n[
  { bar = ...\n  , settings = defaults.settings â«½ { fontWidth = 10 }\n  }\n]\n```\n\nAfter
  a few guesses, you should be able to get rid of jittering.\n\nAnother possible source
  of this problem is a non-monospace font being used. Non-monospace fonts are not
  supported and will never be.\n\n### Embedding shell scripts in Dhall\n\nThe most
  straightforward way is to use [`./file.sh as Text` construct](https://github.com/dhall-lang/dhall-lang/wiki/Cheatsheet#programming)
  to embed a file as `Text` literal into the configuration. However, it is not possible
  when creating reusable plugins, since it is a requirement that each plugin is encapsulated
  in a single file, and using string interpolation with `as Text` is impossible too.\n\nSo,
  the following rules apply:\n\n1. Use `\\` to escape `${` `}` in a single-line (`\"`-quoted)
  string.\n\n2. Use `''` to escape `${` `}` in a multiline (`''`-quoted) string. (That
  is, `''` serves as both an escape sequence and a quote symbol).\n\nFor example,
  bash array expansion expression `${arr[ ix ]}` should be written as `\"\\${arr[
  ix ]}\"` in a double-quoted string or as `'' ''${arr[ ix ]} ''` in a multiline string.\n\nSee
  [the specification](https://github.com/dhall-lang/dhall-lang/blob/master/standard/multiline.md)
  for details.\n\n### Running multiple `dzen2`s simultaneously\n\nIt is possible to
  do so by adding another `Bar` (some code duplication is hardly avoidable) and adding
  another entry to the configuration list:\n\n```dhall\nmkConfigs\n\t  [ { bar = defaultBar,
  settings = defaults.settings }\n\t  , { bar =\n\t\t    anotherBar\n\t\t, settings
  =\n\t\t\t-- `-xs` dzen2 argument specifies monitor number:\n\t\t\tdefaults.settings
  â«½ { extraArgs = [ \"-xs\", \"1\" ] }\n\t\t}\n\t  ]\n```\n\n## Implementation details\n\nRead
  this section if you want to understand how `dzen-dhall` works. It is not required
  if you want to just use the program.\n\n### Data encoding\n\nDhall does not support
  recursive ADTs (which are obviously required to construct tree-like statusbar configurations),
  but there is a [trick](https://github.com/dhall-lang/dhall-lang/wiki/How-to-translate-recursive-code-to-Dhall)
  to bypass that, called [Boehm-Berarducci encoding](http://okmij.org/ftp/tagless-final/course/Boehm-Berarducci.html).\n\nWe
  use this method in a slightly modified variant: [`Carrier`](dhall/types/Carrier.dhall)
  type is introduced to hide all the constructors in a huge record.\n\nEssentially,
  [our definition of `Bar`](dhall/types/Bar.dhall) is equivalent to something like
  the following, which is a direct Boehm-Berarducci encoding:\n\n```dhall\nlet Bar
  =\n      âˆ€(Bar : Type)\n    â†’ âˆ€(text : Text â†’ Bar)\n    â†’ âˆ€(markup : Text â†’ Bar)\n
  \   â†’ âˆ€(join : List Bar â†’ Bar)\n    -- ... some constructors omitted\n    â†’ âˆ€(check
  : List Check â†’ Bar)\n    â†’ Bar\n```\n\nDuring the stage of [config](dhall/config.dhall)
  processing, `Bar`s are converted to a type called [Plugin](dhall/types/Plugin.dhall),
  which is a list of [Token](dhall/types/Token.dhall)s (in fact, `List` is the only
  recursive data type in Dhall). These tokens can be marshalled into Haskell, and
  then [parsed back](src/DzenDhall/Parser.hs) into a tree structure ([DzenDhall.Data.Bar](src/DzenDhall/Data.hs)).\n\nAfter
  that, `dzen-dhall` [spawns some threads](src/DzenDhall/App/StartingUp.hs) for each
  output source and processes the outputs as specified in the configuration.\n\n###
  Deduplication\n\nThis is a really tricky part: identical-by-definition sources or
  automata within the same scope are always treated as a single one, no matter how
  many times they appear in a `Bar` tree.\n\nA simplest example that makes deduplication
  observable can be found [here](test/dhall/configs/deduplication.dhall).\n\nDeduplication
  was introduced to handle gracefully the situation where we have an automaton with
  a `StateMap` of multiple states, some of which contain the same sources and/or automata.
  Do we want to create these duplicating things for each possible state? Of course,
  not: this is like saying no to performance from the start. The chosen solution was
  to just remove these duplicates from runtime.\n\nThe reason why we have to deal
  with this problem at all (while normal reactive frameworks don't have to) is because
  all sources in a `StateMap` are being run at the same time in background (no matter
  in which state the automaton is), but the user is only able to observe the output
  corresponding to exactly one state. This may seem strange, but in fact this approach
  has its own benefits. For example, output is always available immediately after
  a state change. And the implementation is much simpler, because there is no need
  to kill output sources and launch them anew.\n\nIf you want \"normal\" behavior,
  it's not hard to define an automaton that does not contain sources in its `StateMap`
  at all, and define a single output source that queries the state of this automaton
  and switches between various outputs. Of course, you may ask, \"what if I want to
  render complex markup that changes depending on the state?\". The answer is that
  you just have to put your automaton back in a `StateMap` wherever you want it to
  appear, possibly duplicating it multiple times in various contexts - and at runtime
  it will be deduplicated!\n"
description-type: markdown
hash: c1a354ad8b35e9d4a42373acd668e09dee7c67b334d2513660d8f2ba3139bb5d
homepage: https://github.com/dzen-dhall/dzen-dhall#readme
latest: 1.0.2
license-name: BSD-3-Clause
maintainer: Vladimir Kalnitsky <klntsky@gmail.com>
synopsis: Configure dzen2 bars in Dhall language
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  dhall: '>=0'
  dzen-dhall: '>=0'
  filepath: '>=0'
  generic-random: '>=0'
  hspec: '>=0'
  microlens: '>=0'
  network-uri: '>=0'
  optparse-applicative: '>=0'
  parsec: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
