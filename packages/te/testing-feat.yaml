homepage: https://github.com/size-based/testing-feat
changelog-type: markdown
hash: b0bc3cf1d9306e5c9b2f76b6330f8acf7f98f008cd8be2fe9d2a95981a641b3c
test-bench-deps: {}
maintainer: byorgey@gmail.com
synopsis: Functional Enumeration of Algebraic Types
changelog: |
  * 1.1.1.0 (17 May 2022)

      - Test with GHC 8.6 through 9.2
      - Update maintainer and source repository information
basic-deps:
  base: '>=4.5 && <5'
  testing-type-modifiers: <0.2
  QuickCheck: '>2 && <3'
  size-based: <0.2
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.0.1
- '0.4'
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 1.0.0.0
- 1.0.1.0
- 1.1.0.0
- 1.1.1.0
author: Jonas DuregÃ¥rd
latest: 1.1.1.0
description-type: haddock
description: |-
  Feat (Functional Enumeration of Algebraic Types) provides
  enumerations as functions from natural numbers to values
  (similar to @toEnum@ but for any algebraic data type). This
  can be used for SmallCheck-style systematic testing,
  QuickCheck style random testing, and hybrids of the two.

  The enumerators are defined in a very boilerplate manner
  and there is a Template Haskell script for deriving the
  class instance for most types.
  "Test.Feat" contain a subset of the other modules that
  should be sufficient for most test usage. There
  are some small and large example in the tar
  ball.

  The generators are provided by the size-based package. This means other libraries that implement the Sized class can use the same generator definitions. One such is the
  <https://hackage.haskell.org/package/lazy-search lazy-search package>, that uses laziness to search for values and test properties. This is typically a lot faster than Feat for properties that have preconditions (logical implication), but can not be used for random selection of values.
license-name: BSD-3-Clause
