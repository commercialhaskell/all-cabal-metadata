all-versions:
- 0.1.0.0
- 0.1.0.1
author: Akshay Mankar
basic-deps:
  aeson: '>=0'
  base: '>=4.14 && <5'
  bytestring: '>=0'
  directory: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  optparse-generic: '>=0'
  servant: '>=0'
  servant-server: '>=0'
  shelly: '>=0'
  terraform-http-backend-pass: '>=0'
  text: '>=0'
  warp: '>=0'
changelog: |
  # Revision history for terraform-http-backend-pass

  ## Unreleased changes

  ## 0.1.0.1 -- 2023-05-29

  * GetState: Fix existence check.

  ## 0.1.0.0 -- 2021-02-28

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# Terraform HTTP Backend Pass\n\n**Catchy name! What does it do?**\n\nAccording
  to [terraform\ndocs](https://www.terraform.io/docs/language/settings/backends/index.html):\n\n>
  Each Terraform configuration can specify a backend, which defines where and\n> how
  operations are performed, where state snapshots are stored, etc.\n\nThere are a
  few backends which terraform provides, none of which are very\ncustomizable. The
  [http\nbackend](https://www.terraform.io/docs/language/settings/backends/http.html),\nhowever,
  provides a way to define where (and how) state snapshots are stored. It\nadditionally
  allows for a locking the state while some operation is being\nperfomed.\n\nThis
  project aims to provide a backend to store the terraform state in a git\nrepository.
  As the state can contain sensitive information, it should be\nencrypted before storing,
  for which [`pass`](https://www.passwordstore.org/) is\nused.\n\n## How to use\n\n1.
  Install the backend in one of these ways:\n   - Using [Stack](https://docs.haskellstack.org/en/stable/README/):\n
  \    ```bash\n     stack install terraform-http-backend-pass\n     ```\n   - Using
  [Cabal](https://www.haskell.org/cabal/):\n     ```bash\n     cabal install terraform-http-backend-pass\n
  \    ```\n   - Using [nix](https://nixos.org/):\n     ```bash\n     nix registry
  add terraform-http-backend-pass git+https://git.coop/akshay/terraform-http-backend-pass\n
  \    nix build 'terraform-http-backend-pass#' --profile $HOME/.nix-profile\n     ```\n2.
  Create a pass repository:\n   ```bash\n   export PASSWORD_STORE_DIR=/desired/path/to/store\n
  \  pass init <gpg-keys>\n   pass git init\n   ```\n3. Push the repository somewhere,
  set push upstream:\n   ```bash\n   export PASSWORD_STORE_DIR=/desired/path/to/store\n
  \  pass git remote add origin <remote-url>\n   pass git push -u origin master\n
  \  ```\n4. Start the backend:\n   ```bash\n   terraform-http-backend-pass --repositoryPath
  /desired/path/to/store --port 8888 \n   ```\n5. Setup terraform with backend information:\n
  \  ```tf\n   terraform {\n     backend \"http\" {\n       # Or, something else if
  the server is not running on localhost\n       address = \"http://localhost:8888\"\n
  \    }\n   }\n   ```\n   The address can also be specified dynamically using the
  `-backend-config`\n   option while running `terraform init`\n6. Use terraform as
  usual:\n   ```bash\n   terraform init\n   terraform apply\n   ```\n"
description-type: markdown
hash: 5f1be4c7057550aeb3b081853b587bd1bae05b2c944aab075d3c53e9f67415d8
homepage: https://github.com/akshaymankar/terraform-http-backend-pass#readme
latest: 0.1.0.1
license-name: LicenseRef-AGPL
maintainer: itsakshaymankar@gmail.com
synopsis: HTTP backend to store terraform state using pass and git
test-bench-deps: {}
