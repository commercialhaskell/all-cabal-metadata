all-versions:
- 0.1.0.0
author: Hans-JÃ¼rgen Guth
basic-deps:
  base: <5
  containers: '>=0.5'
  directory: '>=1.2 && <1.4'
  fgl: '>=5.5 && <6.0'
  graphviz: '>=2999.17 && <2999.21'
  interpolatedstring-perl6: '>=0'
  mtl: '>=2.2 && <3'
  process: '>=1.2'
  text: '>=1.2 && <1.3'
changelog: ''
changelog-type: ''
description: "README\n------\n\nTestExplode -- let the set of your test cases explode
  !\n\n\nMotivation and what the heck this module does\n-----------------------------------------------\n\n\"DRY,
  Don't repeat yourself\" is not valid, if you write testcases.\nEvery time you use
  the same sort of code, with different values\nfor variables or another function
  at one place.\nCopy & paste is your friend.\n\nThat need not to be!\nThis module
  shall enable you to write the structure of whole test sets.\n\nYou have two building
  blocks:\n\n1. variables that can change. Every testcase uses another combination\nof
  variables. For defining the set of variables you can use the\nlist-comprehension
  of haskell.\n\n2. Define the structure of your testcases as directed graphs with
  one\nbegin and one end.\nEvery path of the graph forms one testcase. And this testcase
  is\ngenerated with all the variable-combinations, that you have defined \nwith the
  method of 1.)\n\nAdditionally:\n\n3. Why not combine existing testcases with new
  testcases ?\nYou can import another testgraphs. You must only cast the types of
  \nvariables that the imported testgraph uses.\n\n4. Defining what the testcase shall
  do is one thing, defining what the\nexpected outcome of the testcase is is the other.\nTo
  every snippet of the testcase you can add the state of the system \nunder test,
  using the input testdata and the state of the system under\ntest before that snippet.
  The state you can use in defining\nthe result of the test.\n\nThe module combines
  texts, that you write. This texts are snippets\nof the testcase. So in the text
  you can use whatever language you want,\nthe resulting testcase is in this language.\n\nTo
  make the testcase well commented, you must say, what the \ncomment-chars of your
  text/programming language are. If you write\npython or perl this are \"# \", in
  haskell \"-- \".\n\nThe official modules of this package generate you a sequence
  of\nTexts. Every text is a testcase. To make files out of the text, with a\nheader
  and a footer and a nice name, the module FinalIO.hs in the \ndoc/examples-directory
  can be used. Because the module is not so\nmodular, and every user wants a bit other
  header and footers,\nit is not an official module. But it works for me.\nFeel free
  to change it.\n\nFor the same reasons the module VizViews.hs is not an official
  module\nand included in the directory docs/examples.\nThis module defines attributes
  for graphviz. By that we come to the \nnext feature of TextExplode: Visualization
  of the testgraph.\n\nThe testgraph is a graph and can be printed with graphviz.\nSubgraphs
  can be hidden in a node and with a click on the node you\ncome to the subgraph.
  This modules use graphviz and interpret the\ntestgraphs, so that they can be printed
  with graphviz.\n\nInstallation\n-------------\n\n    mkdir TestExplode\n    cd TestExplode\n
  \   cabal sandbox init\n    cabal install TestExplode\n\nshould do the job.\n\nAdditionally
  install graphviz with your package manager or on windows \nwith the instructions
  at http://graphviz.org/\n\n\nUsage\n------\n\nThere are examples in the directory
  doc/examples.\nI recommend Te_LA.hs as a starting point.\nAfter you have understood
  the design of a testcase, you can go further\nand understand, how testcses are iported
  with the example Te52.hs.\n\nOf course the most complete docu is the haddock documentation
  of this\nmodule.\n\nThe command for generating the testcases out of Te_LA.hs is:\n\n
  \   runghc Te_LA.hs\n\nThe resulting testcases can be found in Te_LA/*.rb.\nThe
  resulting Testgraph can be found under Te_LA/Te_LA.svg.\n\nThe subgraphs can be
  found under subgraphs/.\n\n\nMuch fun and I like getting mails about the usage of
  the module.\nWrite me, if you like!\n\n\n\n\n\n\n \n\n"
description-type: markdown
hash: cb8066b161c3e2394bffb12b8d4c6bb85c9df7895abd4d93e6955bb608f2c654
homepage: 'https://github.com/testexplode/testexplode        '
latest: 0.1.0.0
license-name: LGPL-3.0-only
maintainer: juergen.software@freea2a.de
synopsis: Generates testcases from program-snippets
test-bench-deps: {}
