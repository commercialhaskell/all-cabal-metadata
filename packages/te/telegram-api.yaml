homepage: http://github.com/klappvisor/haskell-telegram-api#readme
changelog-type: markdown
hash: aa302098b1dae75addd6a05d99b4d185262457e663f34c83968c1ecd90648cd7
test-bench-deps:
  http-client: '>=0.5 && <0.6'
  telegram-api: -any
  ansi-wl-pprint: -any
  base: -any
  servant-client: '>=0.12 && <0.13'
  hspec: -any
  text: -any
  servant-client-core: '>=0.12 && <0.13'
  filepath: -any
  servant: '>=0.12 && <0.13'
  utf8-string: -any
  hjpath: -any
  http-client-tls: -any
  transformers: -any
  optparse-applicative: -any
  random: -any
  http-types: -any
  aeson: '>=1.0 && <1.3'
maintainer: alex.rodiontsev@gmail.com
synopsis: Telegram Bot API bindings
changelog: "## 0.7.1.0\n\n* Added support up to Bot API v3.5: sticker sets, chats
  administration, live location, etc\n* Added `runTelegramClient` with different than
  in `runClient` order of arguments. Now possible to write `runTelegramClient token
  manager $ do`\n* Stop adding request specific responses\n* Stop adding IO calls,
  use functions with `M` suffix, for example `runClient getWebhookInfoM`\n\n## 0.7.0.0\n\n*
  Upgraded to servant-0.11 \n\n## 0.6.3.0\n\n* New fields *gif_duration* in `InlineQueryResultGif`
  and *mpeg4_duration* in `InlineQueryResultMpeg4Gif`.\n* Replaced the field *new_chat_member*
  in `Message` with *new_chat_members* (the old field will still be available for
  a while for compatibility purposes).\n* The `User` object now may have a *language_code*
  field that contains the IETF language tag of the user's language.\n* Added the `sendVideoNote`
  method, the new field *video_note* to `Message`, the fields `RecordVideoNote* or
  *UploadVideoNote* to `sendChatAction`.\n* Added a new type of button, the pay button
  to `InlineKeyboardButton`.\n* Updated dependencies\n\n## 0.6.2.0\n\n* Added new
  kinds of updates, *shipping_query* and *pre_checkout_query*, and new types of message
  content, *invoice* and *successful_payment*.\n* Added new methods for payments:
  `sendInvoiceM`, `answerShippingQueryM`, and `answerPreCheckoutQueryM`.\n\n## 0.6.1.1\n\nBugfixes:\n\n*
  Migration to `Int64` to represent chat id and fix integer overflow issue\n\n## 0.6.1.0\n\n*
  Added `ChatId` data type since it can be integer or string starting from `@`, f.e.
  `@channelusername`\n* Changes in `getUpdates` and `getUpdateM` function\n\n## 0.6.0.1\n\n*
  Bump aeson upper bound to include 1.1.*\n\n## 0.6.0.0\n\n* Added `TelegramClient`,
  see example of usage in README.md\n* Changes from December update of Telegram Bot
  API\n* `TelegramBotAPI` splitted in separate sub-types  \n\n## 0.5.2.0\n\nFeatures:\n\n*
  Added webhook methods such as getWebhookInfo, deleteWebhook, etc.\n* Changes to
  update api\n* Added sendGame  \n\n## 0.5.1.1\n\nUpdated to use servant-0.9 and aeson-1.0\n\n##
  0.5.0.0 [Breaking]\n\nFeatures:\n\n* **[Breaking]** Changed `Response` data record
  to be generic\n* Added certificate upload to set web-hook method for self-signed
  certificates\n\nBugfixes:\n\n* Removed `O2` tag from cabal file\n\n## 0.4.3.1\n\nBugfixes:\n\n*
  Exposed `MessageEntity`\n\n## 0.4.3.0\n\nFeatures:\n\n* Added Inline Keyboard to
  messages\n\n## 0.4.2.0\n\nFeatures:\n\n* Bot-2.1 support\n  * Added new methods:
  `getChat`, `leaveChat`, `getChatAdministrators`, `getChatMember`, `getChatMembersCount`.\n
  \ * Added support for edited messages and new mentions from Telegram v.3.9. New
  fields: `edited_message` in `Update`, `edit_date` in `Message, user in `MessageEntity`.
  New value `text_mention` for the type field in `MessageEntity`.\n\n## 0.4.1.0\n\nFeatures:\n\n*
  Implemented file uploading for audio, voice, sticker, video and documents\n\nBugfixes:\n\n*
  Exposed constrictors for inline edit requests\n\n## 0.4.0.1\n\nBugfixes:\n\n* Parsing
  issue with answer callback query response\n\n## 0.4.0.0 [Breaking]\n\nFeatures:\n\n*
  Bot-2.0 API support is almost complete. Everything from [announce](https://core.telegram.org/bots/2-0-intro)
  is on place except file upload (works for photo BTW).\n  * Inline keyboards\n  *
  Updating messages\n  * Send Location and Phone number\n  * Inline Bots 2.0\n  *
  Group Admins\n  * and many others\n* Added new and more convenient way to create
  request data records avoiding many optional parameters.\n* migrated to servant 0.7.*\n\n##
  0.3.1.0\n\nFeatures:\n\n* Added possibility to upload and send photo\n\n## 0.3.0.0\n\nBugfixes:\n\n*
  *[Breaking]* Changed User to be optional in `from` field of the `Message` data record
  since sender can be empty for messages sent to channels\n\n## 0.2.1.1\n\nBugfixes:\n\n*
  Minor fix of chat action deserialization code\n\n## 0.2.1.0\n\nFeatures:\n\n* Added
  reply keyboard\n\n## 0.2.0.0\n\nFeatures:\n\n* Main functionality is on place except
  content upload.\n* Inline mode added\n"
basic-deps:
  http-client: '>=0.5 && <0.6'
  bytestring: -any
  base: '>=4.9 && <5'
  servant-client: '>=0.12 && <0.13'
  text: -any
  http-api-data: -any
  servant-client-core: '>=0.12 && <0.13'
  servant: '>=0.12 && <0.13'
  containers: '>=0.5 && <0.6'
  mime-types: -any
  mtl: '>=2.2 && <2.3'
  transformers: -any
  string-conversions: -any
  http-types: -any
  aeson: '>=1.0 && <1.3'
  http-media: -any
all-versions:
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.4.3.1
- 0.5.0.0
- 0.5.0.1
- 0.5.1.1
- 0.5.1.2
- 0.5.2.0
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
- 0.6.1.0
- 0.6.1.1
- 0.6.2.0
- 0.6.3.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
author: Alexey Rodiontsev
latest: 0.7.2.0
description-type: markdown
description: |
  # telegram-api

  [![Join the chat at https://gitter.im/klappvisor/haskell-telegram-api](https://badges.gitter.im/klappvisor/haskell-telegram-api.svg)](https://gitter.im/klappvisor/haskell-telegram-api?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

  ![Build Status](https://img.shields.io/circleci/project/klappvisor/haskell-telegram-api.svg)
  ![Hackage](https://img.shields.io/hackage/v/telegram-api.svg)
  ![Hackage Dependencies](https://img.shields.io/hackage-deps/v/telegram-api.svg)
  ![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)
  ![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)

  High-level bindings to the [Telegram Bot API][telegram-bot-api] based on [servant][servant] library.
  Both `getUpdates` request or webhook can be used to receive updates for your bot.
  Inline mode is supported.
  Uploading stickers, documents, video, etc is not supported yet, but you can send items which are already uploaded on the Telegram servers.

  **Support of [Bot-3.5 API][bot-api]**

  ## Usage

  There are two ways of using Telegram Bot API. First and original way is to run IO directly for every Telegram servers request, another one is based on `TelegramClient` which is just `ReaderT`.

  ### Use `TelegramClient`

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import           Network.HTTP.Client      (newManager)
  import           Network.HTTP.Client.TLS  (tlsManagerSettings)
  import           Web.Telegram.API.Bot

  main :: IO ()
  main = do
    let token = Token "bot<token>" -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
    manager <- newManager tlsManagerSettings
    result <- runTelegramClient token manager $ do
      info <- getWebhookInfoM
      let request = setWebhookRequest' "https://example.com/hook"
      isSet <- setWebhookM request
      getMeM
    print result
    print "done!"
  ```

  ### Running IO directly (planning to depricate this option)
  :warning: This method to interact with a Telegram bot is about to be depricated and all new API calls will only have their `M` versions. You can run them using `runTelegramClient` function, for example `runTelegramClient token manager $ sendMessageM message` or in example below replace `getMe token manager` with `runTelegramClient token manager getMeM` to get the same behavior.

  `getMe` example

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import           Network.HTTP.Client      (newManager)
  import           Network.HTTP.Client.TLS  (tlsManagerSettings)
  import           Web.Telegram.API.Bot

  main :: IO ()
  main = do
    manager <- newManager tlsManagerSettings
    res <- getMe token manager
    case res of
      Left e -> do
        putStrLn "Request failed"
        print e
      Right Response { result = u } -> do
        putStrLn "Request succeded"
        print $ user_first_name u
    where token = Token "bot<token>" -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
  ```

  `sendMessage` example

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import           Network.HTTP.Client      (newManager)
  import           Network.HTTP.Client.TLS  (tlsManagerSettings)
  import           Web.Telegram.API.Bot

  main :: IO ()
  main = do
    manager <- newManager tlsManagerSettings
    let request = sendMessageRequest chatId message
    res <- sendMessage token request manager
    case res of
      Left e -> do
        putStrLn "Request failed"
        print e
      Right Response { result = m } -> do
        putStrLn "Request succeded"
        print $ message_id m
        print $ text m
    where token = Token "bot<token>" -- entire Token should be bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11
          chatId = ChatId <chat_id> -- use ChatId 10231 or ChatChannel "<@channelusername>"
          message = "text *bold* _italic_ [github](github.com/klappvisor/haskell-telegram-api)"
  ```

  #### Note on requests:

  Many request data records have a lot of optional parameters which are usually redundant.
  There are two ways to create requests:

  With data type constructor:
  ```haskell
  let request = SendMessageRequest (ChatId int64_chatId) "text" Nothing (Just True) Nothing Nothing Nothing
  ```
  Using default instance:

  ```haskell
  let request = sendMessageRequest (ChatId int64_chatId) "text" -- only with required fields
  ```

  ```haskell
  let request = (sendMessageRequest ChatId int64_chatId) "text") {
    message_disable_notification = Just True -- with optional fields
  }
  ```

  ## Contribution

  Contributions are welcome!

  1. Fork repository
  2. Do some changes
  3. Create pull request
  4. Wait for CI build and review
  5. ??????
  6. PROFIT

  Bear in mind that the CI build won't run integration test suite against your pull request since the necessary environment
  variables (`$BOT_TOKEN`, `$STRIPE_TOKEN`, `$CHAT_ID` and `$BOT_NAME`) aren't exported when a fork
  starts the build (for security reasons). If you do want to run them before creating RP, you can setup integration of your fork
  with CircleCI.

  You can use `stack` to build project

  ```
  stack build
  ```

  To run test you have to create your own bot. Go to [BotFather](https://telegram.me/botfather) and create the bot. As the result you will have private bot's access token. Keep it safe!

  ```
  stack test --test-arguments "--integration -c CHAT_ID -b BOT_NAME -- HSPEC_ARGS"
  ```

  where

  * `BOT_TOKEN` is the token obtained from BotFather and must be defined as environment variable
  * `PAYMENT_TOKEN` is the token obtained from BotFather and must be defined as environment variable
  * `CHAT_ID` can be id of your chat with your bot. Send some messages to this chat in Telegram and do `curl "https://api.telegram.org/bot<replace_with_token>/getUpdates"`, you'll have to parse some JSON with your brain ;-) or any other suitable tool and you will find chat id there.
  * `BOT_NAME` is the name of your bot
  * `HSPEC_ARGS` are the normal `hspec` arguments you can find [here][hspec-args]

  The help option is available for the tests and for hspec:

  ```
  stack test --test-arguments "-h"
  stack test --test-arguments "--integration -c CHAT_ID -b BOT_NAME -- -h"
  ```

  Note: Inline Spec is disabled for now...

  If everything is fine after running the tests you will receive a few new messages from your bot.

  [telegram-bot-api]: https://core.telegram.org/bots/api
  [servant]: https://haskell-servant.github.io/
  [hspec-args]: https://hspec.github.io/running-specs.html
  [bot-api]: https://core.telegram.org/bots/api
license-name: BSD-3-Clause
