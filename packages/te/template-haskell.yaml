homepage: ''
changelog-type: markdown
hash: 652035b6aacf28859fd798d224b05a587e8ca75d5fc888dc535d28c990d1eda8
test-bench-deps: {}
maintainer: libraries@haskell.org
synopsis: Support library for Template Haskell
changelog: "# Changelog for [`template-haskell` package](http://hackage.haskell.org/package/template-haskell)\n\n##
  2.21.0.0\n\n  * Shipped with GHC 9.8.1\n\n  * Record fields now belong to separate
  `NameSpace`s, keyed by the parent of\n    the record field. This is the name of
  the first constructor of the parent type,\n    even if this constructor does not
  have the field in question.  \n\n    This change enables TemplateHaskell support
  for `DuplicateRecordFields`.\n\n  * Add support for generating typed splices and
  brackets in untyped Template Haskell\n    Introduces `typedSpliceE :: Quote m =>
  m Exp -> m Exp` and\n    `typedBracketE :: Quote m => m Exp -> m Exp`\n\n  * Add
  `BndrVis` to support invisible binders\n    in type declarations (GHC Proposal #425).\n\n
  \ * The binder flag type in `plainTV` and `kindedTV` is generalized from `()`\n
  \   to any data type with a `DefaultBndrFlag` instance, including `()`,\n    `Specificity`,
  and `BndrVis`.\n\n## 2.20.0.0\n\n  * The `Ppr.pprInfixT` function has gained a `Precedence`
  argument. \n  * The values of named precedence levels like `Ppr.appPrec` have changed.\n\n
  \ * Add `TypeDataD` constructor to the `Dec` type for `type data`\n    declarations
  (GHC proposal #106).\n  * Add `instance Lift (Fixed a)`\n\n## 2.19.0.0\n\n  * Add
  `DefaultD` constructor to support Haskell `default` declarations.\n\n  * Add support
  for Overloaded Record Dot.\n    Introduces `getFieldE :: Quote m => m Exp -> String
  -> m Exp` and\n    `projectionE :: Quote m => [String] -> m Exp`.\n  * Add `instance
  Lift ByteArray`.\n\n  * Add `PromotedInfixT` and `PromotedUInfixT`, which are analogs
  to `InfixT`\n    and `UInfixT` that ensure that if a dynamically bound name (i.e.
  a name\n    with `NameFlavour` `NameS` or `NameQ`; the flavours produced by `mkName`)\n
  \   is used as operator, it will be bound to a promoted data constructor rather\n
  \   than a type constructor, if both are in scope.\n\n  * Add a `vendor-filepath`
  Cabal flag to the `template-haskell` package. If\n    this flag is set then `template-haskell`
  will not depend on the `filepath`\n    package and will instead use  some modules
  from `filepath` that have been\n    copied into the  `template-haskell` source tree.\n\n##
  2.18.0.0\n  * The types of `ConP` and `conP` have been changed to allow for an additional
  list\n    of type applications preceding the argument patterns.\n\n  * Add support
  for the `Char` kind (#11342): we extend the `TyLit` data type with\n    the constructor
  `CharTyLit` that reflects type-level characters.\n\n  * Add `putDoc` and `getDoc`
  which allow Haddock documentation to be attached\n    to module headers, declarations,
  function arguments and instances, as well\n    as queried. These are quite low level
  operations, so for convenience there\n    are several combinators that can be used
  with `Dec`s directly, including\n    `withDecDoc`/`withDecsDoc` as well as `_doc`
  counterparts to many of the\n    `Dec` helper functions.\n\n  * Add `newDeclarationGroup`
  to document the effect of visibility while\n    reifying types and instances.\n\n##
  2.17.0.0\n  * Typed Quotations now return a value of type `Code m a` (GHC Proposal
  #195).\n    The main motiviation is to make writing instances easier and make it
  easier to\n    store `Code` values in type-indexed maps.\n\n  * Implement Overloaded
  Quotations (GHC Proposal #246). This patch modifies a\n    few fundamental things
  in the API. All the library combinators are generalised\n    to be in terms of a
  new minimal class `Quote`. The types of `lift`, `liftTyped`,\n    and `liftData`
  are modified to return `m Exp` rather than `Q Exp`. Instances\n    written in terms
  of `Q` are now disallowed. The types of `unsafeTExpCoerce`\n    and `unTypeQ` are
  also generalised in terms of `Quote` rather than specific\n    to `Q`.\n\n  * Implement
  Explicit specificity in type variable binders (GHC Proposal #99).\n    In `Language.Haskell.TH.Syntax`,
  `TyVarBndr` is now annotated with a `flag`,\n    denoting the additional argument
  to its constructors `PlainTV` and `KindedTV`.\n    `flag` is either the `Specificity`
  of the type variable (`SpecifiedSpec` or\n    `InferredSpec`) or `()`.\n\n  * Fix
  Eq/Ord instances for `Bytes`: we were comparing pointers while we should\n    compare
  the actual bytes (#16457).\n\n  * Fix Show instance for `Bytes`: we were showing
  the pointer value while we\n    want to show the contents (#16457).\n\n  * Add `Semigroup`
  and `Monoid` instances for `Q` (#18123).\n\n  * Add `MonadFix` instance for `Q`
  (#12073).\n\n  * Add support for QualifiedDo. The data constructors `DoE` and `MDoE`
  got a new\n    `Maybe ModName` argument to describe the qualifier of do blocks.\n\n
  \ * The argument to `TExpQ` can now be levity polymorphic.\n\n## 2.16.0.0 *Jan 2020*\n\n
  \ * Bundled with GHC 8.10.1\n\n  * Add support for tuple sections. (#15843) The
  type signatures of `TupE` and\n    `UnboxedTupE` have changed from `[Exp] -> Exp`
  to `[Maybe Exp] -> Exp`.\n    The type signatures of `tupE` and `unboxedTupE` remain
  the same for\n    backwards compatibility.\n\n  * Introduce a `liftTyped` method
  to the `Lift` class and set the default\n    implementations of `lift` in terms
  of `liftTyped`.\n\n  * Add a `ForallVisT` constructor to `Type` to represent visible,
  dependent\n    quantification.\n\n  * Introduce support for `Bytes` literals (raw
  bytes embedded into the output\n    binary)\n\n  * Make the `Lift` typeclass levity-polymorphic
  and add instances for unboxed\n    tuples, unboxed sums, `Int#`, `Word#`, `Addr#`,
  `Float#`, and `Double#`.\n\n  * Introduce `reifyType` to reify the type or kind
  of a thing referenced by\n    `Name`.\n\n## 2.15.0.0 *May 2019*\n\n  * Bundled with
  GHC 8.8.1\n\n  * In `Language.Haskell.TH.Syntax`, `DataInstD`, `NewTypeInstD`, `TySynEqn`,\n
  \   and `RuleP` now all have a `Maybe [TyVarBndr]` argument, which contains a\n
  \   list of quantified type variables if an explicit `forall` is present, and\n
  \   `Nothing` otherwise. `DataInstD`, `NewTypeInstD`, `TySynEqn` also now use\n
  \   a single `Type` argument to represent the left-hand-side to avoid\n    malformed
  type family equations and allow visible kind application.\n\n    Correspondingly,
  in `Language.Haskell.TH.Lib.Internal`, `pragRuleD`,\n    `dataInstD`, `newtypeInstD`,
  and `tySynEqn` now all have a\n    `Maybe [TyVarBndrQ]` argument. Non-API-breaking
  versions of these\n    functions can be found in `Language.Haskell.TH.Lib`. The
  type signature\n    of `tySynEqn` has also changed from `[TypeQ] -> TypeQ -> TySynEqnQ`
  to\n    `(Maybe [TyVarBndrQ]) -> TypeQ -> TypeQ -> TySynEqnQ`, for the same reason\n
  \   as in `Language.Haskell.TH.Syntax` above. Consequently, `tySynInstD` also\n
  \   changes from `Name -> TySynEqnQ -> DecQ` to `TySynEqnQ -> DecQ`.\n\n  * Add
  `Lift` instances for `NonEmpty` and `Void`\n\n  * `addForeignFilePath` now support
  assembler sources (#16180).\n\n## 2.14.0.0 *September 2018*\n\n  * Bundled with
  GHC 8.6.1\n\n  * Introduce an `addForeignFilePath` function, as well as a corresponding\n
  \   `qAddForeignFile` class method to `Quasi`. Unlike `addForeignFile`, which\n
  \   takes the contents of the file as an argument, `addForeignFilePath` takes\n
  \   as an argument a path pointing to a foreign file. A new `addForeignSource`\n
  \   function has also been added which takes a file's contents as an argument.\n\n
  \   The old `addForeignFile` function is now deprecated in favor of\n    `addForeignSource`,
  and the `qAddForeignFile` method of `Quasi` has been\n    removed entirely.\n\n
  \ * Introduce an `addTempFile` function, as well as a corresponding\n    `qAddTempFile`
  method to `Quasi`, which requests a temporary file of\n    a given suffix.\n\n  *
  Add a `ViaStrategy` constructor to `DerivStrategy`.\n\n  * Add support for `-XImplicitParams`
  via `ImplicitParamT`,\n    `ImplicitParamVarE`, and `ImplicitParamBindD`.\n\n  *
  Add support for `-XRecursiveDo` via `MDoE` and `RecS`.\n\n## 2.13.0.0 *March 2018*\n\n
  \ * Bundled with GHC 8.4.1\n\n  * `Language.Haskell.TH.FamFlavour`, which was deprecated
  in 2.11,\n    has been removed.\n\n  * Add support for overloaded labels. Introduces
  `labelE :: String -> ExpQ`.\n\n  * Add `KindQ`, `TyVarBndrQ`, and `FamilyResultSigQ`
  aliases to\n    `Language.Haskell.TH.Lib`.\n\n  * Add `Language.Haskell.TH.Lib.Internal`
  module, which exposes some\n    additional functionality that is used internally
  in GHC's integration\n    with Template Haskell. This is not a part of the public
  API, and as\n    such, there are no API guarantees for this module from version
  to version.\n\n  * `MonadIO` is now a superclass of `Quasi`, `qRunIO` has a default\n
  \   implementation `qRunIO = liftIO`\n\n  * Add `MonadIO Q` instance\n\n## 2.12.0.0
  *July 2017*\n\n  * Bundled with GHC 8.2.1\n\n  * Add support for pattern synonyms.
  This introduces one new constructor to\n    `Info` (`PatSynI`), two new constructors
  to `Dec` (`PatSynD` and\n    `PatSynSigD`), and two new data types (`PatSynDir`
  and `PatSynArgs`),\n    among other changes. (#8761)\n\n  * Add support for unboxed
  sums. (#12478)\n\n  * Add support for visible type applications. (#12530)\n\n  *
  Add support for attaching deriving strategies to `deriving` statements\n    (#10598)\n\n
  \ * Add support for `COMPLETE` pragmas. (#13098)\n\n  * `unboxedTupleTypeName` and
  `unboxedTupleDataName` now work for unboxed\n    0-tuples and 1-tuples (#12977)\n\n
  \ * `Language.Haskell.TH` now reexports all of `Language.Haskell.TH.Lib`.\n    (#12992).
  This causes `Language.Haskell.TH` to export more types and\n    functions that it
  did before:\n    - `TExp`, `BangQ`, and `FieldExpQ`\n    - `unboxedTupP`, `unboxedTupE`
  and `unboundVarE`\n    - `infixLD`, `infixRD`, and `infixND`\n    - `unboxedTupleT`
  and `wildCardT`\n    - `plainTV` and `kindedTV`\n    - `interruptible` and `funDep`\n
  \   - `valueAnnotation`, `typeAnnotation`, and `moduleAnnotation`\n\n  * Add support
  for overloaded labels.\n\n## 2.11.0.0  *May 2016*\n\n  * Bundled with GHC 8.0.1\n\n
  \ * The compiler can now resolve infix operator fixities in types on its own.\n
  \   The `UInfixT` constructor of `Type` is analoguous to `UInfixE` for expressions\n
  \   and can contain a tree of infix type applications which will be reassociated\n
  \   according to the fixities of the operators. The `ParensT` constructor can be\n
  \   used to explicitly group expressions.\n\n  * Add `namePackage` and `nameSpace`\n\n
  \ * Make `dataToQa` and `dataToExpQ` able to handle `Data` instances whose\n    `toConstr`
  implementation relies on a function instead of a data\n    constructor (#10796)\n\n
  \ * Add `Show` instances for `NameFlavour` and `NameSpace`\n\n  * Remove `FamilyD`
  and `FamFlavour`.  Add `DataFamilyD` and `OpenTypeFamilyD`\n    as the representation
  of data families and open type families\n    respectively. (#6018)\n\n  * Add `TypeFamilyHead`
  for common elements of `OpenTypeFamilyD` and\n    `ClosedTypeFamilyD` (#10902)\n\n
  \ * The `Strict` datatype was split among different datatypes: three for\n    writing
  the strictness information of data constructors' fields as denoted\n    in Haskell
  source code (`SourceUnpackedness` and `SourceStrictness`, as\n    well as `Bang`),
  and one for strictness information after a constructor is\n    compiled (`DecidedStrictness`).
  `Strict`, `StrictType` and `VarStrictType`\n    have been deprecated in favor of
  `Bang`, `BangType` and `VarBangType`.\n    (#10697)\n\n  * Add `reifyConStrictness`
  to query a data constructor's `DecidedStrictness`\n    values for its fields (#10697)\n\n
  \ * The `ClassOpI`, `DataConI`, and `VarI` constructors no longer have a\n    `Fixity`
  field. Instead, all `Fixity` information for a given `Name` is\n    now determined
  through the `reifyFixity` function, which returns `Just` the\n    fixity if there
  is an explicit fixity declaration for that `Name`, and\n    `Nothing` otherwise
  (#10704 and #11345)\n\n  * Add `MonadFail Q` instance for GHC 8.0 and later (#11661)\n\n
  \ * Add support for OVERLAP(S/PED/PING) pragmas on instances\n\n\n## 2.10.0.0  *Mar
  2015*\n\n  * Bundled with GHC 7.10.1\n  * Remove build-dependency on `containers`
  package\n  * Make `Pred` a type synonym of `Type`, and deprecate `classP`/`equalP`
  (#7021)\n  * Add support for `LINE` pragma via `prageLineD` and `LineP`\n  * Replace
  `Int#` with `!Int` in `NameFlavour` constructors\n  * Derive `Generic` for TH types
  (#9527)\n  * Add `standaloneDerivD` (#8100)\n  * Add support for generic default
  signatures via `defaultSigD` (#9064)\n  * Add `Lift` instances for `()` and `Rational`\n
  \ * Derive new `Show` and `Data` instances for `Loc`\n  * Derive `Eq` instances
  for `Loc`, `Info`, and `ModuleInfo`\n  * Make calling conventions available in template
  haskell consistent\n    with those from GHC (#9703)\n  * Add support for `-XStaticValues`
  via `staticE`\n  * Add `Ord` instances to TH types\n  * Merge some instances from
  `th-orphans` (`Ppr` instances for `Lit`\n    and `Loc` as well as `Lift` instances
  for numeric types\n  * Put parens around `(ty :: kind)` when pretty-printing TH
  syntax\n"
basic-deps:
  base: '>=4.11 && <4.20'
  ghc-prim: -any
  ghc-boot-th: ==9.8.1
  pretty: ==1.1.*
all-versions:
- 2.2.0.0
- 2.3.0.0
- 2.3.0.1
- 2.4.0.0
- 2.4.0.1
- 2.5.0.0
- 2.6.0.0
- 2.7.0.0
- 2.8.0.0
- 2.9.0.0
- 2.10.0.0
- 2.11.0.0
- 2.11.1.0
- 2.12.0.0
- 2.13.0.0
- 2.14.0.0
- 2.15.0.0
- 2.16.0.0
- 2.17.0.0
- 2.18.0.0
- 2.19.0.0
- 2.20.0.0
- 2.21.0.0
author: ''
latest: 2.21.0.0
description-type: haddock
description: |-
  This package provides modules containing facilities for manipulating
  Haskell source code using Template Haskell.

  See <http://www.haskell.org/haskellwiki/Template_Haskell> for more
  information.
license-name: BSD-3-Clause
