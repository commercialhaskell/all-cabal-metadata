all-versions:
- 0.1.0.0
- 0.2.0.0
author: Lars Petersen
basic-deps:
  async: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  exceptions: '>=0.10.0'
  prettyprinter: '>=0'
  stm: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: |
  # Changelog for terminal

  ## 0.2.0.0 Lars Petersen <info@lars-petersen.net> 2019-02-10

  * Fixes several inconsistencies and improves the API
    (heavily breaks previous API)

  ## 0.1.0.0 Lars Petersen <info@lars-petersen.net> 2019-01-22

  * Initial release
changelog-type: markdown
description: "terminal [![Hackage](https://img.shields.io/github/release/lpeterse/haskell-terminal.svg)](https://github.com/lpeterse/haskell-terminal/releases)
  [![Travis](https://img.shields.io/travis/lpeterse/haskell-terminal.svg)](https://travis-ci.org/lpeterse/haskell-terminal)\n=======================\n\n_terminal_
  is a driver library for ANSI terminals like _xterm_.\n\n## Features\n\n  - Abstract
  monadic interfaces for different concerns: Write code that is only allowed to print\n
  \   to the screen using the `MonadColorPrinter m => m ()` constraint!\n  - A monad
  transformer `TerminalT` which implements all of the interfaces.\n    Either use
  it directly or include it in your monad transformer stack and lift/derive\n    the
  functions you need.\n  - Unicode support by design (assuming all terminals understand
  UTF-8; Windows support is implemented separately). \n  - Supports the `Text` instead
  of `String` movement without being to radical about it.\n  - Windows support:\n
  \     - Windows 10 finally supports ANSI escape sequences and the _Windows Console_
  now essentially\n        behaves like an _xterm_.\n      - Windows 8, Windows 7
  and older is not supported. Windows 7's support officially ended in 2015 and\n        the
  extended support will end in 2020. As this is a hobby project aiming at\n        enthusiasts,
  I have no intention to bloat this code base with all the quirks necessary\n        to
  make it work on older versions of Windows.\n      - Unicode is fully supported on
  Windows for input and output and independant of unreliably\n        hacks like changing
  the code page. A Unicode compatible console font needs to be configured.\n  - A
  very small set of dependencies, most of which are likely to be included\n    in
  every Haskell project anyway.\n  - No dependency on terminfo (see below).\n  - Rich
  event handling (partly inspired by _vty_):\n      - Keyboard events (all control
  codes and escape sequences are mapped to a useful set of keys and modifiers).\n
  \     - Mouse events (TODO on Linux).\n      - Screen resize events.\n      - Window
  focus events.\n      - Interrupt events.\n      - Event handling is implemented
  using [STM](https://hackage.haskell.org/package/stm) instead of `IO`\n        which
  makes it very easy to wait for several events simultaneously or combine it\n        with
  custom or external events like timeouts.        \n  - Proper signal handling (Ctrl+C):\n
  \     - When using the standard terminal, the library will hook the\n        interrupt
  signal (or something equivalent e.g. on Windows).\n        Incoming interrupts are
  passed to the application code and can be\n        dispatched and processed. A supervisor
  thread assures that the application\n        gets killed on a second interrupt when
  the application is non-responsive.\n        This resembles the default behavior
  of GHC's RTS and a lot of work has been\n        invested to make this mechanism
  work reliably.\n  - Integrates the relatively new [prettyprinter](https://hackage.haskell.org/package/prettyprinter)\n
  \   library. Nicely formatted and colorful output requires nothing more than a few
  combinators.\n\n## To use or not to use _terminfo_\n\nThe [terminfo](https://hackage.haskell.org/package/terminfo)
  library is a binding to\n[libtinfo](https://en.wikipedia.org/wiki/Terminfo).\n\n_libtinfo_
  is a library that queries a database (usually below `/usr/share/terminfo`)\nto determine
  the specifica and necessary control codes for interacting with a given\nterminal.\n\nUnfortunately,
  it is a reocurring source of issues:\n\n- https://github.com/commercialhaskell/stack/issues/1012\n-
  https://github.com/purescript/purescript/issues/2176\n- https://ghc.haskell.org/trac/ghc/ticket/8746?cversion=0&cnum_hist=2\n-
  https://ghc.haskell.org/trac/ghc/ticket/13210\n\nArguments in favor of _terminfo_:\n\n
  \ - Would allow to support all terminals in existence.\n  - It's \"the standard\".\n\nArguments
  against _terminfo_:\n\n  - Static linking and stand-alone binaries:\n    Apart from
  eventual linking issues, _terminfo_ has a runtime dependency on the\n    terminfo
  database. This might be an issue when the environment is restricted\n    (`chroot`
  environment or if the process shall not be allowed to interact with the file\n    system
  for security reasons).\n  - _terminfo_ offers more than 500 capabilities. Only a
  very small part of it\n    is actually needed and since there is no legacy code
  to support there is no\n    real reason to expose more than a small subset of capabilities
  that is supported\n    by all terminals (-> ANSI sequences).\n  - Claim: All relevant
  terminals support and understand the relevant ANSI escape sequences\n    and/or
  try to behave like _xterm_. Terminals that don't are not relevant.\n  - Is it really
  necessary to support something like _tvi925_ (Televideo 925, around 1982)?\n    I
  honor that _terminfo_ takes the burden to maintain the definition files\n    for
  such historical hardware, but I doubt that anyone would miss it if we decide not\n
  \   to support it.\n\nFor now, I decided to not use _terminfo_ and see how well
  it works.\nThis decision might be revised in the future. The API won't be affected
  by it. \n\n## How _terminal_ compares to..\n\n### ansi-terminal\n\n  - [ansi-terminal](https://hackage.haskell.org/package/ansi-terminal)\n
  \   offers very similar primitives for printing to the terminal\n    and controlling
  the cursor.\n  - It also achieves doing this in portable way (very good Windows
  support,\n    no _terminfo_ requirement on Linux/Posix).\n  - It doesn't offer mechanisms
  for event processing.\n  - Its operations live in `IO` (control code output is possible
  as well)\n    and assume that the terminal is either connected to `stdin/stdout`
  or\n    to a handle.\n\n### ansi-wl-pprint\n\n  - [ansi-wl-pprint](https://hackage.haskell.org/package/ansi-wl-pprint)
  is an\n    extension library to _ansi-terminal_. It offers a Wadler-Leyen pretty-printer\n
  \   adapted to the needs of terminal screens (colors and text formatting).\n  -
  _terminal_ has a dependency on the more generic\n    [prettyprinter](https://hackage.haskell.org/package/prettyprinter)
  in order\n    to offer the same features and make pretty and colorful terminal output\n
  \   the default rather than an exception.\n \n### Haskeline\n\n  - [haskeline](https://hackage.haskell.org/package/haskeline)
  is a pure-Haskell\n    [readline](https://en.wikipedia.org/wiki/GNU_Readline) replacement.\n
  \ - Its primary job is offering a line editing interface and it does this very well.\n
  \ - Like _terminal_ it offers a monad transformer interface to the user (`InputT`).\n
  \ - It does signal handling (Ctrl+C, Ctrl+D).\n  - It has a dependency on _terminfo_
  in order to support a broad range of terminals\n    (especially those that are non-ANSI).\n
  \ - It offers operations for printing to the terminal which pass control codes\n
  \   unescaped.\n  - It might be interesting to investigate whether _terminal_ could
  be used\n    as an alternative backend for _haskeline_.\n\n### vty\n\n  - [vty](https://hackage.haskell.org/package/vty)
  is a library that serves\n    as a foundation for _curses_-like applications (full-screen
  terminal applications\n    like `vim` or `htop`).\n  - It is very similar to `terminal`
  (especially the event processing has been inspired\n    by _vty_): It completely
  abstracts away the details and quirks of\n    communication with different terminals
  and offers a canonical interface to the user.\n  - Its scope is wider than that
  of _terminal_:\n    - _vty_ has the concept of `Images` that can be assembled and
  manipulated by the user.\n      The library keeps track of the changes and computes
  minimal changesets which it\n      then transmits to the terminal.\n  - Compared
  to _terminal_ it (currently) has the following shortcomings:\n    - Lack of Windows
  support (there has been\n      [a call to arms](https://www.reddit.com/r/haskell/comments/7tutxa/vty_needs_your_help_supporting_windows/)
  recently;\n      I'd be happy if my findings with _terminal_ could help improve
  the situation with _vty_).\n    - Dependency on `terminfo`.\n    - No proper signal
  handling.\n\n### brick\n\n  - [brick](https://hackage.haskell.org/package/brick)
  is library on top of _vty_. Its\n    scope is different from what _terminal_ does.\n\n"
description-type: markdown
hash: de6770ecaae3197c66ac1f0db5a80cf5a5b1d3b64a66a05b50f442de5ad39570
homepage: https://github.com/lpeterse/haskell-terminal#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: info@lars-petersen.net
synopsis: Portable terminal interaction library
test-bench-deps:
  async: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  exceptions: '>=0.10.0'
  prettyprinter: '>=0'
  stm: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  terminal: '>=0'
  text: '>=0'
  transformers: '>=0'
