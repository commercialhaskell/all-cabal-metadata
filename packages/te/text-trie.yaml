all-versions:
- 0.2.5.0
author: wren gayle romano, michael j. klein
basic-deps:
  base: '>=4.5 && <4.13'
  binary: '>=0.5.1 && <0.8.7'
  text: '>=1.2.3 && <1.2.4'
changelog: |
  0.2.5.0 (2019.04.02):
  - Fixed things to compile with stack lts-13.15
  - Modified ByteString cases to use Text
  - Modified tests to use Text Trie (e.g. change `Ord` instance to the one produced by `toList16`)
  - Modified functions that accept/return built `Text` to use `Data.Text.Lazy`
changelog-type: text
description: "text-trie\n===============\n[![Hackage version](https://img.shields.io/hackage/v/bytestring-trie.svg?style=flat)](https://hackage.haskell.org/package/text-trie)
  \n[![TravisCI Build Status](https://img.shields.io/travis/michaeljklein/bytestring-trie.svg?style=flat)](https://travis-ci.org/michaeljklein/text-trie)
  \n\nThe `text-trie` package is a lightweight adaptation of `bytestring-trie` to
  `Text`.\n\nFor the differences in performance, see [bench.md](https://github.com/michaeljklein/text-trie/blob/text-trie/bench.md).\n\n\n##
  bytestring-trie\n\nThe [bytestring-trie](https://github.com/wrengr/bytestring-trie)
  package provides an efficient implementation\nof tries mapping `ByteString` to values.
  \ The implementation is\nbased on Okasaki's big-endian patricia trees, Ã  la `IntMap`.
  \ We\nfirst trie on the elements of `ByteString` and then trie on the\nbig-endian
  bit representation of those elements.  Patricia trees\nhave efficient algorithms
  for union and other merging operations,\nbut they're also quick for lookups and
  insertions.\n\nIf you are only interested in being able to associate individual\n`ByteString`s
  to values, then you may prefer the `hashmap` package\nwhich is faster for those
  only needing a map-like structure.  This\npackage is intended for those who need
  the extra capabilities that\na trie-like structure can offer (e.g., structure sharing
  to reduce\nmemory costs for highly redundant keys, taking the submap of all\nkeys
  with a given prefix, contextual mapping, extracting the minimum\nand maximum keys,
  etc.)\n\n\n## Install\n\nThis is a simple package and should be easy to install.
  \ You should\nbe able to use one of the following standard methods to install it.\n\n```bash\n
  \   -- With stack and without the source:\n    $> stack install text-trie\n    \n
  \   -- With stack and with the source already:\n    $> cd text-trie\n    $> stack
  install\n    \n```\n\n\n## Portability\n\nThe implementation only relies on a few
  basic\nlanguage extensions and `DeriveGeneric`. The complete list of extensions
  used is:\n\n* `CPP`\n* `MagicHash`\n* `NoImplicitPrelude`\n* `StandaloneDeriving`\n*
  `DeriveGeneric`\n\n\n## Links\n\n- [Hackage](http://hackage.haskell.org/package/text-trie)\n-
  [GitHub](https://github.com/michaeljklein/text-trie)\n\n- `bytestring-trie`\n  *
  [Website](http://wrengr.org/)\n  * [Blog](http://winterkoninkje.dreamwidth.org/)\n
  \ * [Twitter](https://twitter.com/wrengr)\n  * [Hackage](http://hackage.haskell.org/package/bytestring-trie)\n
  \ * [GitHub](https://github.com/wrengr/bytestring-trie)\n\n"
description-type: markdown
hash: 8064c70e67dd3db1a04f3fc002b130d167fbc4da4101919fbb0da4484a917ca5
homepage: http://github.com/michaeljklein/text-trie
latest: 0.2.5.0
license-name: BSD-3-Clause
maintainer: lambdamichael@gmail.com
synopsis: An efficient finite map from Text to values, based on bytestring-trie.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=4.5 && <4.13'
  binary: '>=0.5.1 && <0.8.7'
  bytestring: '>=0.9.2 && <0.11'
  bytestring-trie: '>=0.2.5 && <0.2.6'
  microbench: '>=0'
  silently: '>=1.2.5 && <1.2.6'
  smallcheck: '>=0'
  text: '>=1.2.3 && <1.2.4'
  text-trie: '>=0'
