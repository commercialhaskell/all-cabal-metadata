all-versions:
- 0.2.1.2
- 0.2.1.4
author: WonderBear
basic-deps:
  aeson: '>=2.1.2.1 && <2.2'
  base: '>=4.7 && <5'
  data-default: '>=0.7.1.1 && <0.8'
  data-default-instances-containers: '>=0.0.1 && <0.1'
  effectful-core: '>=2.3.0.1 && <2.4'
  extra: '>=1.7.14 && <1.8'
  generic-lens: '>=2.2.2.0 && <2.3'
  haskell-src-meta: '>=0.8.13 && <0.9'
  http-types: '>=0.12.4 && <0.13'
  insert-ordered-containers: '>=0.2.5.3 && <0.3'
  lens: '>=5.2.3 && <5.3'
  megaparsec: '>=9.5.0 && <9.6'
  mtl: '>=2.3.1 && <2.4'
  opaleye: '>=0.10.3.0 && <0.11'
  openapi3: '>=3.2.4 && <3.3'
  persistent: '>=2.14.6.1 && <2.15'
  postgresql-simple: '>=0.7.0.0 && <0.8'
  product-profunctors: '>=0.11.1.1 && <0.12'
  profunctors: '>=5.6.2 && <5.7'
  raw-strings-qq: '>=1.1 && <1.2'
  resource-pool: '>=0.4.0.0 && <0.5'
  tagged: '>=0.8.8 && <0.9'
  tedious-web: '>=0'
  template-haskell: '>=2.20.0.0 && <2.21'
  text: '>=2.0.2 && <2.1'
  time: '>=1.12.2 && <1.13'
  tuple: '>=0.3.0.2 && <0.4'
  unordered-containers: '>=0.2.20 && <0.3'
  webgear-core: '>=1.3.0 && <1.4'
changelog: |
  # Changelog for `tedious-web`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.2.1.1 - 2024-07-19

  * Write ABNF rules for the parser.

  ## 0.2.1.2 - 2024-07-19

  * Added ABNF definition for tedious QuasiQuote.
changelog-type: markdown
description: "# tedious-web\n\nA user-friendly web development tool that can easily
  define multiple interrelated data types, automatically generate common type class
  instances, provide some convenience for web development.\n\n## Pros & Cons\n\n###
  Pros:\n* Can easily define multiple interrelated data types.\n* Instances of Show,
  Eq, Generic, Default ([data-default](https://hackage.haskell.org/package/data-default)),
  ToJSON ([aeson](https://hackage.haskell.org/package/aeson)), FromJSON ([aeson](https://hackage.haskell.org/package/aeson)),
  ToSchema ([openapi](https://hackage.haskell.org/package/openapi3)) are created by
  default.\n* The table definition of the data type in the style of [opaleye](https://hackage.haskell.org/package/opaleye)
  will be created easily.\n* Database migration statements based on [persistent](https://hackage.haskell.org/package/persistent)
  can also be easily generated.\n* Field types support type variables.\n\n### Cons:\n*
  Do not support sum type.\n* Do not support complex requirements.\n\n## Example\n\n```haskell\n[tedious|\n\nPerson
  table t_persion deriving Exception -- optional comment of type\n  id `ID` Int64
  (Maybe (Field SqlInt8), Field SqlInt8) PersonToUpd\n  firstName `first name` Text
  `John` (\"first_name\", Field SqlText) !UniquePersonName PersonToAdd PersonToUpd?\n
  \ lastName `second name` Text `Smith` (\"first_name\", Field SqlText) !UniquePersonName
  PersonToAdd PersonToUpd?\n  age Int `10` (Field SqlInt4) PersonToAdd -- optional
  comment of field A\n  address `home address` Text? (Maybe (Field SqlText), Field
  SqlText) PersonToAdd\n  profession Text? `teacher` (\"profes\", Maybe (Field SqlText),
  Field SqlText) PersonToAdd\n  hobby Text? (Maybe (Field SqlText), Field SqlText)
  PersonToAdd PersonToUpd?\n  score `(English, Mathematic)` ((Int, Int))\n  other
  a\n\n|]\n```\n\nwill generate:\n\n```haskell\ndata Person\n  = Person {  _personId
  :: Int64,\n              _personFirstName :: Text,\n              _personLastName
  :: Text,\n              _personAge :: Int,\n              _personAddress :: (Maybe
  Text),\n              _personProfession :: (Maybe Text),\n              _personHobby
  :: (Maybe Text),\n              _personScore :: (Int, Int)\n            }\n\nderiving
  instance Exception Person\nderiving stock instance Show Person\nderiving stock instance
  Eq Person\nderiving stock instance Generic Person\nderiving instance Default Person\ninstance
  ToJSON Person where ...\ninstance FromJSON Person where ...\ninstance ToSchema Person
  where ...\n\ndata PersonToAdd\n  = PersonToAdd { _personToAddFirstName :: Text,\n
  \                 _personToAddLastName :: Text,\n                  _personToAddAge
  :: Int,\n                  _personToAddAddress :: (Maybe Text),\n                  _personToAddProfession
  :: (Maybe Text),\n                  _personToAddHobby :: (Maybe Text)\n                }\n\nderiving
  instance Exception PersonToAdd\nderiving stock instance Show PersonToAdd\nderiving
  stock instance Eq PersonToAdd\nderiving stock instance Generic PersonToAdd\nderiving
  instance Default PersonToAdd\ninstance ToJSON PersonToAdd where ...\ninstance FromJSON
  PersonToAdd where ...\ninstance ToSchema PersonToAdd where ...\n\ndata PersonToUpd\n
  \ = PersonToUpd { _personToUpdId :: Int64,\n                  _personToUpdFirstName
  :: (Maybe Text),\n                  _personToUpdLastName :: (Maybe Text),\n                  _personToUpdHobby
  :: (Maybe Text)\n                }\n\nderiving instance Exception PersonToUpd\nderiving
  stock instance Show PersonToUpd\nderiving stock instance Eq PersonToUpd\nderiving
  stock instance Generic PersonToUpd\nderiving instance Default PersonToUpd\ninstance
  ToJSON PersonToUpd where ...\ninstance FromJSON PersonToUpd where ...\ninstance
  ToSchema PersonToUpd where ...\n\npersonTable :: Table  ( Maybe (Field SqlInt8),
  \n                        Field SqlText, \n                        Field SqlText,
  \n                        Field SqlInt4, \n                        Maybe (Field
  SqlText), \n                        Maybe (Field SqlText), \n                        Mayb(Field
  SqlText)\n                      ) \n                      ( Field SqlInt8,\n                        Field
  SqlText,\n                        Field SqlText,\n                        Field
  SqlInt4,\n                        Field SqlText,\n                        Field
  SqlText,\n                        Field SqlText\n                      )\npersonTable
  = ...\n\ntediousPersistString :: String\ntediousPersistString = ...\n```\n\nYou
  can use tediousPersistString to do migration in another module like this:\n\n```haskell\nshare
  [mkPersist sqlSettings, mkMigrate \"migrateAll\"] $(quoteExp persistUpperCase tediousPersistString)\n```"
description-type: markdown
hash: 9b8041b798eb2ccc6e19626cfd62b731b1038ffaa328e2db5f3d37cc0738ff8d
homepage: https://github.com/xiongxiong/tedious-web#readme
latest: 0.2.1.4
license-name: BSD-3-Clause
maintainer: ximengwuheng@163.com
synopsis: Easily define multiple interrelated data types
test-bench-deps:
  aeson: '>=2.1.2.1 && <2.2'
  base: '>=4.7 && <5'
  data-default: '>=0.7.1.1 && <0.8'
  data-default-instances-containers: '>=0.0.1 && <0.1'
  effectful-core: '>=2.3.0.1 && <2.4'
  extra: '>=1.7.14 && <1.8'
  generic-lens: '>=2.2.2.0 && <2.3'
  haskell-src-meta: '>=0.8.13 && <0.9'
  hspec: '>=2.11.8 && <2.12'
  http-types: '>=0.12.4 && <0.13'
  insert-ordered-containers: '>=0.2.5.3 && <0.3'
  lens: '>=5.2.3 && <5.3'
  megaparsec: '>=9.5.0 && <9.6'
  mtl: '>=2.3.1 && <2.4'
  opaleye: '>=0.10.3.0 && <0.11'
  openapi3: '>=3.2.4 && <3.3'
  persistent: '>=2.14.6.1 && <2.15'
  postgresql-simple: '>=0.7.0.0 && <0.8'
  product-profunctors: '>=0.11.1.1 && <0.12'
  profunctors: '>=5.6.2 && <5.7'
  resource-pool: '>=0.4.0.0 && <0.5'
  tagged: '>=0.8.8 && <0.9'
  tedious-web: '>=0'
  template-haskell: '>=2.20.0.0 && <2.21'
  text: '>=2.0.2 && <2.1'
  time: '>=1.12.2 && <1.13'
  tuple: '>=0.3.0.2 && <0.4'
  unordered-containers: '>=0.2.20 && <0.3'
  webgear-core: '>=1.3.0 && <1.4'
