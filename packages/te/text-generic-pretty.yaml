all-versions:
- 1.2.1
author: Razvan Ranca
basic-deps:
  QuickCheck: '>=0'
  base: '>=4.8 && <5'
  containers: '>=0'
  ghc-prim: '>=0'
  groom: '>=0'
  ixset-typed: '>=0'
  protolude: '>=0'
  string-conversions: '>=0'
  text: '>=0'
  time: '>=1.5'
  unordered-containers: '>=0'
  wl-pprint-text: <1.2
changelog: ''
changelog-type: ''
description: "*******************************************************************************\n*
  \    GenericPretty\n*     A Generic, Derivable, Haskell Pretty Printer\n*******************************************************************************\n\n===============================================================================\n==========================
  Description ========================================\n===============================================================================\n\nGenericPretty
  is a Haskell library that supports automatic\nderivation of pretty printing functions
  on user defined data\ntypes.\n\nThe form of geenrics used is based on that introduced
  in the paper:\nMagalhaes, Dijkstra, Jeuring, and Loh,\nA Generic Deriving Mechanism
  for Haskell,\n3'rd ACM Symposium on Haskell, pp. 37-48, September 2010,\n  http://dx.doi.org/10.1145/1863523.1863529.\nChanges
  from the original paper in the GHC implementation\nare described here:\n  http://www.haskell.org/haskellwiki/GHC.Generics#Changes_from_the_paper.\n\nThis
  package requires the use of the new GHC.Generics features:\n  http://www.haskell.org/haskellwiki/GHC.Generics\npresent
  from GHC 7.2.\nUse of these features is indicated by the DeriveGeneric pragma\nor
  the flag -XDeriveGeneric.\n\nPretty printing produces values of type Text.PrettyPrint.Doc,
  using\nthe Text.PrettyPrint library\n  http://www.haskell.org/ghc/docs/latest/html/libraries/pretty-1.1.1.0/Text-PrettyPrint.html.\n
  \ \nThe output provided is a pretty printed version of that provided by\nPrelude.show.
  \ That is, rendering the document provided by this pretty\nprinter yields an output
  identical to that of Prelude.show, except\nfor extra whitespace.\n\nThe generics
  mechanism works on all haskell datatypes except for \nconstrained datatypes.\nThat
  is to say, datatypes which have a context will fail. \nFor instance,\n  data (Eq
  a) => Constr a = Constr a  deriving (Generic)\nwill fail because of the (Eq a) context.\n
  \ \n===============================================================================\n=====================
  Installation Instructions ===============================\n===============================================================================\n\nThe
  package is installed in the same way as any other package. \nIf you have cabal,
  you can simply do:\n  $ cabal update\n  $ cabal install GenericPretty\n\nOtherwise,
  the steps are:\n  0. Make sure you have a version of ghc >= 7.4 installed and that
  you can \n     use the 'runhaskell' command from the command line.\n  1. Download
  and unpack \"GenericPretty-1.2.0.tar.gz\"\n  2. Move to the correct directory:\n
  \     $ cd GenericPretty-1.2.0\n  3. Run the following haskell commands to install
  the library globally:\n      $ runhaskell Setup configure \n      $ runhaskell Setup
  build\n      $ runhaskell Setup install\n     \n     The last command requires root
  access, so you might need to run is as:\n      $ sudo runhaskell Setup install\n
  \ \nIf something went wrong, you can check this page for more info, \nlook at manual
  installation: \n  http://www.haskell.org/haskellwiki/Cabal/How_to_install_a_Cabal_package\n\n===============================================================================\n==============================
  Basic Example ==================================\n===============================================================================\n\nHere
  is a haskell source file, called 'SimpleTest.hs'\n----------------------------------------------------\n{-#
  LANGUAGE DeriveGeneric #-}\n\nimport Text.PrettyPrint.GenericPretty\n\ndata Tree
  a = Leaf a | Node (Tree a) (Tree a) deriving (Generic)\n\ninstance (Out a) => Out
  (Tree a)\n\ntree1 :: Tree Int\ntree1 = Node (Node (Leaf 333333) (Leaf (-555555)))(Node
  (Node(Node(Leaf 888888) \n\t\t(Leaf 57575757))(Leaf (-14141414)))(Leaf 7777777))\n\t\t\t\nmain
  = pp tree1\n------------------------------------------------\nThe flag DeriveGeneric
  must be given to GHC. This can be done as above, \nin a 'LANGUAGE' pragma, or manually
  by compiling with 'ghc -XDeriveGeneric'.\n\nAs can be seen, to use the library you
  must simply import it, derive Generic\non the custom data type by typing\n  \"deriving
  (Generic)\"\nand writing an empty instance of Out.\n\nThen you can use the pretty
  printing functions, such as 'pp' and 'pretty'.\n\nCompiling and running the file
  is simple and gives the following result.\n-----------------------------\n$ ghc
  SimpleTest.hs\n$ SimpleTest\n\nNode (Node (Leaf 333333) (Leaf (-555555)))\n     (Node
  (Node (Node (Leaf 888888) (Leaf 57575757))\n                 (Leaf (-14141414)))\n
  \          (Leaf 7777777))\n---------------------------\nIf we replaced the main
  function with 'main = ppLen 30 tree1', \nthe result would instead be:\n-----------------------------\nNode
  (Node (Leaf 333333)\n           (Leaf (-555555)))\n     (Node (Node (Node (Leaf
  888888)\n                       (Leaf 57575757))\n                 (Leaf (-14141414)))\n
  \          (Leaf 7777777))\n-------------------------------\nIn this case the output
  tries to remain under 30 characters/line, \nif possible, while always maintaining
  correct indentation.\n\n===============================================================================\n=================
  The 'ppStyle' and 'prettyStyle' functions ===================\n===============================================================================\n\nThe
  'ppStyle' function lets you further customize the output\nby giving a 'Style' which
  consists of the line length, the number of ribbons \nper line and the mode to use.\n\nThe
  'prettyStyle' function does the same thing except it outputs a String\ninstead of
  an IO() operation.\n\nA ribbon length is the maximum length of non-indentation text
  per line.\nSo if I used a line length of 80 and 2 ribbons per line than I would
  have a\nmaximum of 40 non-indentation characters on any line.\n\nThe mode tells
  'Pretty' how to render the result. There are 4 options:\n  1. PageMode - the default
  rendering\n  2. ZigZagMode - zig-zag cuts\n  3. LeftMode - there is no indentation
  and no maximum line length\n  4. OneLineMode - everything is put on one line\t\n\nThe
  most interesting one is the ZigZagMode. \nModifying the running example we get:\n--------------------------------------\n{-#
  LANGUAGE DeriveGeneric #-}\n\nimport Text.PrettyPrint.GenericPretty\nimport Text.PrettyPrint\n\ndata
  Tree a = Leaf a | Node (Tree a) (Tree a) deriving (Generic)\n\ninstance (Out a)
  => Out (Tree a)\n\ntree1 :: Tree Int\ntree1 = Node (Node (Leaf 333333) (Leaf (-555555)))(Node
  (Node(Node(Leaf 888888) \n\t\t(Leaf 57575757))(Leaf (-14141414)))(Leaf 7777777))\n\t\t\t\nzigStyle
  :: Style\nzigStyle = Style {mode = ZigZagMode, lineLength = 30, ribbonsPerLine =
  1.5}\n\nmain = ppStyle zigStyle tree1\n--------------------------------------\nWe
  import \"Text.PrettyPrint\" to gain access to the \"Style\" functionality.\nThen
  we proceed to define the 'zigStyle' using a maximum line length of 30,\n1.5 ribbonsPerLine
  and the ZigZagMode.\n\nRunning the program, we get:\n-------------------------------------\nNode
  (Node (Leaf 333333)\n\n/////\n      (Leaf (-555555)))\n(Node (Node (Node (Leaf 888888)\n\n/////\n
  \            (Leaf 57575757))\n       (Leaf (-14141414)))\n (Leaf 7777777))\n-------------------------------------\nNotice
  that the \"/\" show us the direction in which the rows below have been \nmoved (left
  in this case) and the number of \"/\"s indicate the number of \ncharacters that
  the rows were moved(in this case 5 characters to the left).\n  \nSo the last 3 lines
  are 10 characters to the left compared to where they \nwould be if we had no maximum
  line length.\n\n===============================================================================\n=======================
  Full Customization Example ============================\n===============================================================================\n\nWhile
  the previous approach provides us some with some options as to the \nformat of the
  pretty printed result, sometimes you need even more control.\n\nFully customizing
  the pretty printed results is straightforward, as in the\nfollowing example called
  'CustomTest.hs'\n----------------------------\n{-# LANGUAGE DeriveGeneric #-}\n\nimport
  Text.PrettyPrint.GenericPretty\nimport Text.PrettyPrint\n\ndata Tree a = Leaf a
  | Node (Tree a) (Tree a) deriving (Generic)\n\ninstance (Out a) => Out (Tree a)
  where\n  doc (Leaf a) =  parens $ text \"customLeaf\" <+> doc a\n  doc (Node a b)
  = parens $ text \"customNode\" $$ nest 1 (doc a) \n                                                    $$
  nest 1 (doc b)\n  docPrec _ = doc\n  \ntree1 :: Tree Int\ntree1 = Node (Node (Leaf
  333333) (Leaf (-555555)))(Node (Node(Node(Leaf 888888) \n\t\t(Leaf 57575757))(Leaf
  (-14141414)))(Leaf 7777777))\n\t\t\t\nmain = pp tree1\n------------------------------\nHere
  we import the library 'Text.PrettyPrint' and use it directly to define doc.\nWe
  then define 'docPrec' in terms of 'doc', ignoring the precedence parameter.\nWe
  could have manually defined 'docList' as well if we wanted. As it is now,\n'docList'
  is inferred from 'doc'.\n\n*****Note*****\nAs opposed to the 'Show' class, 'doc'
  and 'docPrec' are NOT defined in term \nof one another. This means that even after
  giving a custom definition for\none of them, the other will retain the default behaviour.
  \nIf both are to be used, then custom definitions must be provided for both.\n\nFor
  instance, in the above example, if we had ommited 'docPrec's definition,\nthe result
  would have been identical to that of 'SimpleTest.hs'.\n\nBy running the above custom
  definition we get a tree with little indentation:\n-----------------------------------\n(customNode\n
  \ (customNode\n    (customLeaf 333333)\n    (customLeaf -555555))\n  (customNode\n
  \   (customNode\n      (customNode\n        (customLeaf 888888)\n        (customLeaf
  57575757))\n      (customLeaf -14141414))\n    (customLeaf 7777777)))\n-----------------------------------\nThe
  details of the syntax used above can be found in the \nText.PrettyPrint library:\n
  \ http://www.haskell.org/ghc/docs/latest/html/libraries/pretty-1.1.1.0/Text-PrettyPrint.html\n\n===============================================================================\n=========================
  Further Info ========================================\n===============================================================================\n\nThe
  above 'Tree' examples can be found in 'TestSuite/SimpleTest.hs',\n'TestSuite.ZigZagTest.hs'
  and 'TestSuite/CustomTest.hs'. More involved \nexamples integrated with QuickCheck
  can be found in 'TestSuite/Tests.hs'.\n\nFurther information can be found in the
  API:\n  http://hackage.haskell.org/packages/archive/GenericPretty/latest/doc/html/Text-PrettyPrint-GenericPretty.html\nand
  in the source code itself.\n\n===============================================================================\n============================
  Contact ==========================================\n===============================================================================\n\nPlease
  send any questions/suggestions/issues to:\n  Razvan Ranca - ranca.razvan@gmail.com"
description-type: text
hash: bf2ffe6b6f4417c2fedeb94df078a993dfeab0bc0b048f4570e6135e9a15a1d4
homepage: https://github.com/joe9/GenericPretty
latest: 1.2.1
license-name: BSD-3-Clause
maintainer: joe9mail@gmail.com
synopsis: A generic, derivable, haskell pretty printer.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  containers: '>=0'
  protolude: '>=0'
  string-conversions: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text-generic-pretty: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
