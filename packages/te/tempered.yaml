all-versions:
- 0.1.0.0
- 0.2.0
author: Chris Penner
basic-deps:
  base: '>=4.9 && <5'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  parsec: '>=0'
  process: '>=0'
  tempered: '>=0'
  yaml: '>=0'
changelog: ''
changelog-type: ''
description: "Tempered\n======\n\n[![Hackage](https://img.shields.io/badge/hackage-latest-green.svg)](https://hackage.haskell.org/package/tempered)\n\nA
  dead-simple templating utility for simple shell interpolation.\nUse at your own
  risk and only on trusted templates.\n\n```bash\n$ tempered --help\nTempered - Templating
  engine based on shell interpolation\n\nUsage: tempered [templates]\n  Interpolate
  templates to stdout\n\nAvailable options:\n  templates                The templates
  to interpolate\n  -h,--help                Show this help text\n```\n\nHere's a
  simple use-case:\n\n```md\n{{ # inside \"post.md\" }}\n# My Blog Post\n\nby {{ echo
  $AUTHOR }}\nPublished on {{ date +'%B %d, %Y' }}\n\nHere's my blog post!\n\n---\n{{
  cat ./footer.md | tr 'a-z' 'A-Z' }}\n```\n\n```md\n{{ # inside \"footer.md\" }}\nCopyright
  2017 Chris Penner\nCheck me out on twitter @chrislpenner!\nSee you next time!\n```\n\nThen
  we can render the template with `tempered ./post.md` to get:\n\n```\n# My Blog Post\n\nby
  Chris Penner\nPublished on April 22, 2017\n\nHere's my blog post!\n\n---\nCOPYRIGHT
  2017 CHRIS PENNER\nCHECK ME OUT ON TWITTER @CHRISLPENNER!\nSEE YOU NEXT TIME!\n```\n\nIf
  you want you can add a shebang to the top of your template and just run it\nas an
  executable, tempered will strip the shebang for you automagically:\n\n> test.txt\n```\n#!/path/to/tempered\ninterpolate
  {{ echo $THIS }}\n```\n\n```bash\n$ chmod +x test.txt\n$ export THIS=\"that\"\n$
  ./test.txt\ninterpolate that\n```\n\n[**Examples Here**](https://github.com/ChrisPenner/tempered/tree/master/examples)\n\nInstallation\n============\n\nMac
  and Linux binaries are provided [HERE](https://github.com/ChrisPenner/tempered/releases/latest);\n\n###
  Homebrew On Mac\n\n```\nbrew update\nbrew install ChrisPenner/tools/tempered\n```\n\n###
  Stack\nIf you're familiar with Haskell Stack:\n\n```\nstack update && stack install
  tempered\n```\n\nFAQ\n=====\n\nThere's really not much to it; parses the file and
  runs anything\ninside `{{  }}` as a shell expression and pipes stdout into its spot.\nIf
  you're clever you can do pretty much anything you want with this.\n\n### Variables?\n\nSure;
  It's bash.\n\n```bash\nHello, my name is {{echo $USER}}\n```\n\nYou can set up environment
  overrides in `env.yaml`, tempered looks up through\nthe file-system to find an `env.yaml`
  from the cwd NOT the template location.\n\nHere's an example env.yaml; we can do
  simple strings or commands here; just make\nsure to quote any entries that start
  with `{{` or the YAML parser gets mad.\n\n> env.yaml\n```yaml\nPROJECT: Tempered\nDATE:
  \"{{ date +'%B %d, %Y' }}\"\n```\n\nThen you can use them just like normal variables.\n\n###
  For Loops? \n\nIt's bash; go for it:\n```bash\n{{ for i in 99 98 97 ; do\n    cat
  <<EOF\n$i bottles of beer on the wall\nEOF\ndone }}\n```\n\n> output:\n```\n99 bottles
  of beer on the wall\n98 bottles of beer on the wall\n97 bottles of beer on the wall\n```\n\n###
  \\_\\_: command not found?\n\nChances are you're forgetting to echo an env-var;\n`{{
  $TITLE }}` will try to run the contents of `$TITLE` as a command, you want\n`{{
  echo \"$TITLE\" }}`.\n\n### Isn't this whole thing a security risk?\n\nProbably.\n"
description-type: markdown
hash: 807a03f27fe7a86b1255ba5c94b42df94801c162426a07cb64b7c8ee71441cae
homepage: https://github.com/ChrisPenner/tempered#readme
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: christopher.penner@gmail.com
synopsis: A dead-simple shell interpolation templating utility
test-bench-deps:
  base: '>=0'
  tempered: '>=0'
