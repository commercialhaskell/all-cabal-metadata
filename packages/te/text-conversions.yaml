homepage: https://github.com/cjdev/text-conversions#readme
changelog-type: markdown
hash: a6906543b5bd781a3c409812a7fe251430db8ce5f82936487ec277ac5b4d2abf
test-bench-deps:
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  text-conversions: -any
maintainer: lexi.lambda@gmail.com
synopsis: Safe conversions between textual types
changelog: |
  # Changelog

  ## 0.3.1 (September 29th, 2020)

  - Added support for `base16-bytestring-1.0`.

  ## 0.3.0 (June 9, 2016)

  ### New Features

  - The `Base16` and `Base64` newtypes are now provided for managing safe conversions between binary data and Base16 and Base64 textual encodings of that data.

  ## 0.2.0 (May 25, 2016)

  ### Breaking Changes

  - The `ConvertText` typeclass has been split into two simpler functions, `convertText` and `decodeConvertText`. This means the vision of a unified function for converting between *any* two textual datatypes is no longer implemented, but the original attempt had too many problems to really be worth the cost. Specifically, instances like `FromText (Maybe Foo)` would cause problems due to the overlapping instances, which have now been removed.

  ## 0.1.0 (May 24, 2016)

  - Initial release
basic-deps:
  bytestring: <1
  base: '>=4.7 && <5'
  base64-bytestring: <2
  text: <3
  base16-bytestring: <2
  errors: <3
all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
- 0.3.1
author: Alexis King
latest: 0.3.1
description-type: markdown
description: |
  # text-conversions [![Build Status](https://travis-ci.org/cjdev/text-conversions.svg?branch=master)](https://travis-ci.org/cjdev/text-conversions)

  This is a small library to ease the pain when converting between the many different string types in Haskell. Unlike some other libraries that attempt to solve the same problem, text-conversions is:

    - **Safe.** This library treats binary data (aka `ByteString`) like binary data, and it does not assume a particular encoding, nor does it ever throw exceptions when failing to decode. It does, however, provide failable conversions between binary data and textual data.

    - **Extensible.** It’s easy to add or derive your own instances of the typeclasses to use your own types through the same interface.

  Here’s an example of using text-conversions to convert between textual types:

  ```haskell
  > convertText ("hello" :: String) :: Text
  "hello"
  ```

  And here’s an example of converting from UTF-8 encoded binary data to a textual format:

  ```haskell
  > decodeConvertText (UTF8 ("hello" :: ByteString)) :: Maybe Text
  Just "hello"
  > decodeConvertText (UTF8 ("\xc3\x28" :: ByteString)) :: Maybe Text
  Nothing
  ```

  [For more details, see the documentation on Hackage.][hackage]

  [hackage]: https://hackage.haskell.org/package/text-conversions
license-name: ISC
