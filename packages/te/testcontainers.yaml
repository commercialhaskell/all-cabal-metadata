all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.5.0.0
author: Alex Biehl
basic-deps:
  aeson: '>=1.4.6 && <3'
  aeson-optics: '>=1.1 && <2'
  async: '>=0'
  base: '>=4.12 && <5'
  bytestring: '>=0.10.8 && <0.12'
  directory: '>=1.3.6 && <2'
  exceptions: '>=0.10.4 && <0.11'
  http-client: '>=0.5.14 && <1'
  http-types: '>=0.12.3 && <1'
  mtl: '>=2.2.2 && <3'
  network: '>=3.1.2.0 && <3.2'
  optics-core: '>=0.1 && <0.5'
  process: '>=1.6.5 && <1.7'
  random: '>=1.2 && <2'
  resourcet: '>=1.2.4 && <1.4'
  tasty: '>=1.0 && <1.5'
  text: '>=1.2.3 && <3'
  unliftio-core: '>=0.1.0 && <0.3'
changelog: |
  # Revision history for testcontainer-hs

  ## 0.5.0.0 -- 2023-02-20

  * BREAKING: Refined lifecycle management. testcontainers is now using testcontainers/ryuk resource reaper to cleanup containers, networks and volumes. Release keys for containers are deprecated. (@alexbiehl, https://github.com/testcontainers/testcontainers-hs/pull/33)

  * BREAKING: Ports can be passed as both numbers as well as strings ala "80/tcp" or "9423/udp" (@alexbiehl, https://github.com/testcontainers/testcontainers-hs/pull/31)

  * BREAKING: Introduce TestContainer monad (@alexbiehl, https://github.com/testcontainers/testcontainers-hs/pull/29)

  * Control container naming (@blackheaven, https://github.com/testcontainers/testcontainers-hs/pull/18)

  * Ability to use Docker networks (@alexbiehl, https://github.com/testcontainers/testcontainers-hs/pull/32)

  * Better handling of running testcontainers from within Docker (@michivi, https://github.com/testcontainers/testcontainers-hs/pull/22)

  * Ability to wait for particular HTTP routes to become available with waitforHttp (@michivi, https://github.com/testcontainers/testcontainers-hs/pull/24)

  * Some internal module reorganization (@alexbiehl, https://github.com/testcontainers/testcontainers-hs/pull/32)

  * Refined timeout handling for WaitUntilReady (@alexbiehl, https://github.com/testcontainers/testcontainers-hs/pull/30)

  * Moved repository under the [testcontainers](https://github.com/testcontainers) organization

  ## 0.2.0.0 -- 2020-08-07

  * Dependency rework (@blackheaven, https://github.com/alexbiehl/testcontainers-hs/pull/3)

  ## 0.1.0.0 -- 2020-08-06

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # About

  Testcontainers is a Haskell library that provides a friendly API to run Docker
  containers. It is designed to create a runtime environment to use during your
  integration tests

  # Example

  ``` haskell
  {-# LANGUAGE FlexibleContexts  #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE RecordWildCards   #-}
  module Main where

  import qualified Test.Tasty           as Tasty
  import qualified Test.Tasty.HUnit     as Tasty
  import qualified TestContainers.Tasty as TC


  data Endpoints = Endpoints
    {
      redisHost :: String
    , redisPort :: Int
    }


  -- | Sets up and runs the containers required for this test suite.
  setupContainers :: TC.MonadDocker m => m Endpoints
  setupContainers = do

    -- Launch the container based on the redis:5.0.0 image.
    redisContainer <- TC.run $ TC.containerRequest (TC.fromTag "redis:5.0.0")
      -- Expose the port 6379 from within the container. The respective port
      -- on the host machine can be looked up using `containerPort` (see below).
      TC.& TC.setExpose [ 6379 ]
      -- Wait until the container is ready to accept requests. `run` blocks until
      -- readiness can be established.
      TC.& TC.setWaitingFor (TC.waitUntilMappedPortReachable 6379)

    pure $ Endpoints
      {
        redisHost = "0.0.0.0"
      , redisPort =
          -- Look up the corresponding port on the host machine for the exposed
          -- port 6379.
          TC.containerPort redisContainer 6379
      }


  main :: IO ()
  main =
    Tasty.defaultMain $
    -- Use `withContainers` to make the containers available in the closed over
    -- tests. Due to how Tasty handles resources `withContainers` passes down
    -- an IO action `start` to actually start up the containers. `start` can be
    -- invoked multiple times, Tasty makes sure to only start up the containrs
    -- once.
    --
    -- `withContainers` ensures the started containers are shut down correctly
    -- once execution leaves its scope.
    TC.withContainers setupContainers $ \start ->
      Tasty.testGroup "Some test group"
        [
          Tasty.testCase "Redis test" $ do
            -- Actually start the containers!!
            Endpoints {..} <- start
            -- ... assert some properties
            pure ()

        , Tasty.testCase "Another Redis test" $ do
            -- Invoking `start` twice gives the same Endpoints!
            Endpoints {..} <- start
            -- ... assert some properties
            pure ()
        ]
  ```
description-type: markdown
hash: d7007ec5b9f592fad9c5723aeb4397896524c1d98d8d3efd712a430f876b9da6
homepage: ''
latest: 0.5.0.0
license-name: MIT
maintainer: alex.biehl@gmail.com
synopsis: Docker containers for your integration tests.
test-bench-deps:
  base: '>=0'
  hspec: '>=2.0 && <3.0'
  tasty: '>=0'
  tasty-discover: '>=4.2.1 && <4.3'
  tasty-hspec: '>=0'
  tasty-hunit: '>=0'
  testcontainers: '>=0'
  text: '>=0'
