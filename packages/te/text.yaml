all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- 0.7.0.1
- 0.7.1.0
- 0.7.2.1
- 0.8.0.0
- 0.8.1.0
- 0.9.0.0
- 0.9.0.1
- 0.9.1.0
- 0.10.0.0
- 0.10.0.1
- 0.10.0.2
- 0.11.0.0
- 0.11.0.1
- 0.11.0.2
- 0.11.0.3
- 0.11.0.4
- 0.11.0.5
- 0.11.0.6
- 0.11.0.7
- 0.11.0.8
- 0.11.1.0
- 0.11.1.1
- 0.11.1.2
- 0.11.1.3
- 0.11.1.5
- 0.11.1.6
- 0.11.1.7
- 0.11.1.8
- 0.11.1.9
- 0.11.1.10
- 0.11.1.11
- 0.11.1.12
- 0.11.1.13
- 0.11.2.0
- 0.11.2.1
- 0.11.2.2
- 0.11.2.3
- 0.11.3.0
- 0.11.3.1
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
- 1.1.0.1
- 1.1.1.0
- 1.1.1.1
- 1.1.1.2
- 1.1.1.3
- 1.1.1.4
- 1.2.0.0
- 1.2.0.2
- 1.2.0.3
- 1.2.0.4
- 1.2.0.5
- 1.2.0.6
- 1.2.1.0
- 1.2.1.1
- 1.2.1.2
- 1.2.1.3
- 1.2.2.0
- 1.2.2.1
- 1.2.2.2
- 1.2.3.0
- 1.2.3.1
- 1.2.3.2
- 1.2.4.0
- 1.2.4.1
- 1.2.5.0
- '2.0'
- 2.0.1
- 2.0.2
- '2.1'
- 2.1.1
- 2.1.2
- 2.1.3
author: Bryan O'Sullivan <bos@serpentine.com>
basic-deps:
  array: '>=0.3 && <0.6'
  base: '>=4.11 && <5'
  binary: '>=0.5 && <0.9'
  bytestring: '>=0.10.4 && <0.13'
  data-array-byte: '>=0.1 && <0.2'
  deepseq: '>=1.1 && <1.6'
  ghc-prim: '>=0.2 && <0.15'
  template-haskell: '>=2.5 && <2.25'
changelog: "### 2.1.3 - 2025-08-01\r\n\r\n* [Fix CRLF handling in IO functions](https://github.com/haskell/text/pull/649)\r\n\r\n*
  [Change `utf8LengthByLeader` to a branching implementation](https://github.com/haskell/text/pull/635)\r\n\r\n*
  [Define `stimes 0` for lazy text](https://github.com/haskell/text/pull/641)\r\n\r\n*
  [Add implementation of `sconcat` and `stimes` for strict `Text`](https://github.com/haskell/text/pull/580)
  and [Fix `stimes` for strict text when size wraps around `Int`](https://github.com/haskell/text/pull/639)\r\n\r\n*
  [Allow list fusion for `unpack` over both strict and lazy `Text`](https://github.com/haskell/text/pull/629)\r\n\r\n###
  2.1.2\r\n\r\n* [Update case mappings for Unicode 16.0](https://github.com/haskell/text/pull/618)\r\n\r\n*
  [Add type synonym for lazy builders. Deprecated `StrictBuilder` for `StrictTextBuilder`](https://github.com/haskell/text/pull/581)\r\n\r\n*
  [Add `initsNE` and `tailsNE`](https://github.com/haskell/text/pull/558)\r\n\r\n*
  [Add `foldlM'`](https://github.com/haskell/text/pull/543)\r\n\r\n* [Add `Data.Text.Foreign.peekCString`](https://github.com/haskell/text/pull/599)\r\n\r\n*
  [Add `Data.Text.show` and `Data.Text.Lazy.show`](https://github.com/haskell/text/pull/608)\r\n\r\n*
  [Add pattern synonyms `Empty`, `(:<)`, and `(:>)`](https://github.com/haskell/text/pull/619)\r\n\r\n*
  [Improve precision of `Data.Text.Read.rational`](https://github.com/haskell/text/pull/565)\r\n\r\n*
  [`Data.Text.IO.Utf8`: use `B.putStrLn` instead of `B.putStr t >> B.putStr \"\\n\"`](https://github.com/haskell/text/pull/579)\r\n\r\n*
  [`Data.Text.IO` and `Data.Text.Lazy.IO`: Make `putStrLn` more atomic with line or
  block buffering](https://github.com/haskell/text/pull/600)\r\n\r\n* [Integrate UTF-8
  `hPutStr` to standard `hPutStr`](https://github.com/haskell/text/pull/589)\r\n\r\n*
  [Serialise `Text` without going through `ByteString`](https://github.com/haskell/text/pull/617)\r\n\r\n*
  [Make `splitAt` strict in its first argument, even if input is empty](https://github.com/haskell/text/pull/575)\r\n\r\n*
  [Improve lazy performance of `Data.Text.Lazy.inits`](https://github.com/haskell/text/pull/572)\r\n\r\n*
  [Implement `Data.Text.unpack` and `Data.Text.toTitle` directly, without streaming](https://github.com/haskell/text/pull/611)\r\n\r\n*
  [Make `fromString` `INLINEABLE` instead of `INLINE`](https://github.com/haskell/text/pull/571)
  to reduce the size of generated code.\r\n\r\n### 2.1.1\r\n\r\n* Add pure Haskell
  implementations as an alternative to C-based ones,\r\n  suitable for JavaScript
  backend.\r\n\r\n* [Add type synonyms for lazy and strict text flavours](https://github.com/haskell/text/pull/547)\r\n\r\n*
  [Share empty `Text` values](https://github.com/haskell/text/pull/493)\r\n\r\n* [Fix
  bug in `isValidUtf8ByteArray`](https://github.com/haskell/text/pull/553)\r\n\r\n*
  [Optimize the implementation of `Data.Text.concat`](https://github.com/haskell/text/pull/551)\r\n\r\n*
  [Fix `filter/filter` rules for `Text` and lazy `Text`](https://github.com/haskell/text/pull/560)\r\n\r\n###
  2.1\r\n\r\n* [Switch `Data.Text.Array` to `Data.Array.Byte`](https://github.com/haskell/text/pull/474)\r\n\r\n*
  [Add `Text.IO.Utf8` module](https://github.com/haskell/text/pull/503)\r\n\r\n* [Expose
  UTF-8 validation functions from internal module](https://github.com/haskell/text/pull/483)\r\n\r\n*
  [Fix handling of incomplete input in stream decoders](https://github.com/haskell/text/pull/527)\r\n\r\n*
  [Fix handling of invalid bytes in stream decoders](https://github.com/haskell/text/pull/528)\r\n\r\n*
  [Make Lift Text work under RebindableSyntax](https://github.com/haskell/text/pull/534)\r\n\r\n###
  2.0.2\r\n\r\n* [Add decoding functions in `Data.Text.Encoding` that allow\r\n  more
  control for error handling and for how to allocate text](https://github.com/haskell/text/pull/448).
  Thanks to David Sledge!\r\n  * `decodeASCIIPrefix`\r\n  * `decodeUtf8Chunk`\r\n
  \ * `decodeUtf8More`\r\n  * `Utf8ValidState`\r\n  * `startUtf8ValidState`\r\n  *
  `StrictBuilder`\r\n  * `strictBuilderToText`\r\n  * `textToStrictBuilder`\r\n  *
  `validateUtf8Chunk`\r\n  * `validateUtf8More`\r\n\r\n* [Fix quadratic slowdown when
  decoding invalid UTF-8 bytestrings](https://github.com/haskell/text/issues/495)\r\n\r\n*
  [Add `isAscii :: Text -> Bool`](https://github.com/haskell/text/issues/497)\r\n\r\n*
  [Add `decodeASCII' :: ByteString -> Maybe Text`](https://github.com/haskell/text/issues/499)\r\n\r\n*
  Add internal module `Data.Text.Internal.StrictBuilder`\r\n\r\n* Add internal module
  `Data.Text.Internal.Encoding`\r\n\r\n* Add `Data.Text.Internal.Encoding.Utf8.updateDecoderState`
  and export `utf8{Accept,Reject}State` from the same module.\r\n\r\n* [Speed up case
  conversions](https://github.com/haskell/text/pull/460)\r\n\r\n* [Reduce code bloat
  for literal strings](https://github.com/haskell/text/pull/468)\r\n\r\n* [Remove
  support for GHC 8.0](https://github.com/haskell/text/pull/485)\r\n\r\n### 2.0.1\r\n\r\n*
  Improve portability of C and C++ code.\r\n* [Make `Lift` instance more efficient](https://github.com/haskell/text/pull/413)\r\n*
  [Make `toCaseFold` idempotent](https://github.com/haskell/text/pull/402)\r\n* [Add
  `fromPtr0`](https://github.com/haskell/text/pull/423)\r\n* [Add `Data.Text.foldr'`](https://github.com/haskell/text/pull/436)\r\n*
  [Add `withCString`](https://github.com/haskell/text/pull/431)\r\n* [Add `spanM`
  and `spanEndM`](https://github.com/haskell/text/pull/437)\r\n\r\n### 2.0\r\n\r\n*
  [Switch internal representation of text from UTF-16 to UTF-8](https://github.com/haskell/text/pull/365):\r\n
  \ * Functions in `Data.Text.Array` now operate over arrays of `Word8` instead of
  `Word16`.\r\n  * Rename constructors of `Array` and `MArray` to `ByteArray` and
  `MutableByteArray`.\r\n  * Rename functions and types in `Data.Text.Foreign` to
  reflect switch\r\n    from `Word16` to `Word8`.\r\n  * Rename slicing functions
  in `Data.Text.Unsafe` to reflect switch\r\n    from `Word16` to `Word8`.\r\n  *
  Rename `Data.Text.Internal.Unsafe.Char.unsafeChr` to `unsafeChr16`.\r\n  * Change
  semantics and order of arguments of `Data.Text.Array.copyI`:\r\n    pass length,
  not end offset.\r\n  * Extend `Data.Text.Internal.Encoding.Utf8` to provide more
  UTF-8 related routines.\r\n  * Extend interface of `Data.Text.Array` with more utility
  functions.\r\n  * Add `instance Show Data.Text.Unsafe.Iter`.\r\n  * Add `Data.Text.measureOff`.\r\n
  \ * Extend `Data.Text.Unsafe` with `iterArray` and `reverseIterArray`.\r\n  * Export
  `Data.Text.Internal.Lazy.equal`.\r\n  * Export `Data.Text.Internal.append`.\r\n
  \ * Add `Data.Text.Internal.Private.spanAscii_`.\r\n  * Replacement characters in
  `decodeUtf8With` are no longer limited to Basic Multilingual Plane.\r\n* [Disable
  implicit fusion rules](https://github.com/haskell/text/pull/348)\r\n* [Add `Data.Text.Encoding.decodeUtf8Lenient`](https://github.com/haskell/text/pull/342)\r\n*
  [Remove `Data.Text.Internal.Unsafe.Shift`](https://github.com/haskell/text/pull/343)\r\n*
  [Remove `Data.Text.Internal.Functions`](https://github.com/haskell/text/pull/354)\r\n*
  [Bring type of `Data.Text.Unsafe.reverseIter` in line with `iter`](https://github.com/haskell/text/pull/355)\r\n*
  [Add `instance Bounded FPFormat`](https://github.com/haskell/text/pull/355)\r\n*
  [Add HasCallStack to partial functions](https://github.com/haskell/text/pull/388)\r\n\r\n###
  1.2.5.0\r\n\r\n* [Support sized primitives from GHC 9.2](https://github.com/haskell/text/pull/305)\r\n*
  [Allow `template-haskell-2.18.0.0`](https://github.com/haskell/text/pull/320)\r\n*
  [Add `elem :: Char -> Text -> Bool` to `Data.Text` and `Data.Text.Lazy`](https://github.com/haskell/text/pull/274)\r\n*
  [Replace surrogate code points in `Data.Text.Internal.Builder.{singleton,fromString}`](https://github.com/haskell/text/pull/281)\r\n*
  [Use `unsafeWithForeignPtr` when available](https://github.com/haskell/text/pull/325)\r\n*
  [Use vectorized CPU instructions for decoding and encoding](https://github.com/haskell/text/pull/302)\r\n*
  [Regenerate case mapping in accordance to Unicode 13.0](https://github.com/haskell/text/pull/334)\r\n*
  [Fix UTF-8 decoding of lazy bytestrings](https://github.com/haskell/text/pull/333)\r\n\r\n###
  1.2.4.1\r\n\r\n* Support `template-haskell-2.17.0.0`\r\n* Support `bytestring-0.11`\r\n*
  Add `take . drop` related RULE\r\n\r\n### 1.2.4.0\r\n\r\n* Add TH `Lift` instances
  for `Data.Text.Text` and `Data.Text.Lazy.Text` (gh-232)\r\n\r\n* Update Haddock
  documentation to better reflect fusion eligibility; improve fusion\r\n  rules for
  `takeWhileEnd` and `length` (gh-241, ghc-202)\r\n\r\n* Optimise `Data.Text.replicate`.
  Rather than calling `memcpy` `n` times,\r\n  call it only `O(log n)` times on chunks
  of increasing size. The total\r\n  asymptotic complexity remains `O(nm)`. (gh-209)\r\n\r\n*
  Support `base-4.13.0.0`\r\n\r\n### 1.2.3.1\r\n\r\n* Make `decodeUtf8With` fail explicitly
  for unsupported non-BMP\r\n  replacement characters instead silent undefined behaviour
  (gh-213)\r\n\r\n* Fix termination condition for file reads via `Data.Text.IO`\r\n
  \ operations (gh-223)\r\n\r\n* A serious correctness issue affecting uses of `take`
  and `drop` with\r\n  negative counts has been fixed (gh-227)\r\n\r\n* A bug in the
  case-mapping functions resulting in unreasonably large\r\n  allocations with large
  arguments has been fixed (gh-221)\r\n\r\n### 1.2.3.0\r\n\r\n* Spec compliance: `toCaseFold`
  now follows the Unicode 9.0 spec\r\n  (updated from 8.0).\r\n\r\n* Bug fix: the
  lazy `takeWhileEnd` function violated the\r\n  [lazy text invariant](https://github.com/bos/text/blob/1.2.3.0/Data/Text/Internal/Lazy.hs#L51)\r\n
  \ (gh-184).\r\n\r\n* Bug fix: Fixed usage of size hints causing incorrect behavior
  (gh-197).\r\n\r\n* New function: `unsnoc` (gh-173).\r\n\r\n* Reduce memory overhead
  in `encodeUTF8` (gh-194).\r\n\r\n* Improve UTF-8 decoder error-recovery (gh-182).\r\n\r\n*
  Minor documentation improvements (`@since` annotations, more\r\n  examples, clarifications).\r\n\r\n####
  1.2.2.2\r\n\r\n* The `toTitle` function now correctly handles letters that\r\n  immediately
  follow punctuation. Before, `\"there's\"` would turn into\r\n  `\"There'S\"`. Now,
  it becomes `\"There's\"`.\r\n\r\n* The implementation of unstreaming is faster,
  resulting in operations\r\n  such as `map` and `intersperse` speeding up by up to
  30%, with\r\n  smaller code generated.\r\n\r\n* The optimised length comparison
  function is now more likely to be\r\n  used after some rewrite rule tweaking.\r\n\r\n*
  Bug fix: an off-by-one bug in `takeEnd` is fixed.\r\n\r\n* Bug fix: a logic error
  in `takeWord16` is fixed.\r\n\r\n#### 1.2.2.1\r\n\r\n* The switch to `integer-pure`
  in 1.2.2.0 was apparently mistaken.\r\n  The build flag has been renamed accordingly.
  \ Your army of diligent\r\n  maintainers apologizes for the churn.\r\n\r\n* Spec
  compliance: `toCaseFold` now follows the Unicode 8.0 spec\r\n  (updated from 7.0)\r\n\r\n*
  An STG lint error has been fixed\r\n\r\n### 1.2.2.0\r\n\r\n* The `integer-simple`
  package, upon which this package optionally\r\n  depended, has been replaced with
  `integer-pure`.  The build flag has\r\n  been renamed accordingly.\r\n\r\n* Bug
  fix: For the `Binary` instance, If UTF-8 decoding fails during a\r\n  `get`, the
  error is propagated via `fail` instead of an uncatchable\r\n  crash.\r\n\r\n* New
  function: `takeWhileEnd`\r\n\r\n* New instances for the `Text` types:\r\n    * if
  `base` >= 4.7: `PrintfArg`\r\n    * if `base` >= 4.9: `Semigroup`\r\n\r\n#### 1.2.1.3\r\n\r\n*
  Bug fix: As it turns out, moving the literal rewrite rules to simplifier\r\n  phase
  2 does not prevent competition with the `unpack` rule, which is\r\n  also active
  in this phase. Unfortunately this was hidden due to a silly\r\n  test environment
  mistake. Moving literal rules back to phase 1 finally\r\n  fixes GHC Trac #10528
  correctly.\r\n\r\n#### 1.2.1.2\r\n\r\n* Bug fix: Run literal rewrite rules in simplifier
  phase 2.\r\n  The behavior of the simplifier changed in GHC 7.10.2,\r\n  causing
  these rules to fail to fire, leading to poor code generation\r\n  and long compilation
  times. See\r\n  [GHC Trac #10528](https://ghc.haskell.org/trac/ghc/ticket/10528).\r\n\r\n####
  1.2.1.1\r\n\r\n* Expose unpackCString#, which you should never use.\r\n\r\n### 1.2.1.0\r\n\r\n*
  Added Binary instances for both Text types. (If you have previously\r\n  been using
  the text-binary package to get a Binary instance, it is\r\n  now obsolete.)\r\n\r\n####
  1.2.0.6\r\n\r\n* Fixed a space leak in UTF-8 decoding\r\n\r\n#### 1.2.0.5\r\n\r\n*
  Feature parity: repeat, cycle, iterate are now implemented for lazy\r\n  Text, and
  the Data instance is more complete\r\n\r\n* Build speed: an inliner space explosion
  has been fixed with toCaseFold\r\n\r\n* Bug fix: encoding Int to a Builder would
  infinite-loop if the\r\n  integer-simple package was used\r\n\r\n* Deprecation:
  OnEncodeError and EncodeError are deprecated, as they\r\n  are never used\r\n\r\n*
  Internals: some types that are used internally in fusion-related\r\n  functions
  have moved around, been renamed, or been deleted (we don't\r\n  bump the major version
  if .Internal modules change)\r\n\r\n* Spec compliance: toCaseFold now follows the
  Unicode 7.0 spec\r\n  (updated from 6.3)\r\n\r\n#### 1.2.0.4\r\n\r\n* Fixed an incompatibility
  with base < 4.5\r\n\r\n#### 1.2.0.3\r\n\r\n* Update formatRealFloat to correspond
  to the definition in versions\r\n  of base newer than 4.5 (https://github.com/bos/text/issues/105)\r\n\r\n####
  1.2.0.2\r\n\r\n* Bumped lower bound on deepseq to 1.4 for compatibility with the\r\n
  \ upcoming GHC 7.10\r\n\r\n#### 1.2.0.1\r\n\r\n* Fixed a buffer overflow in rendering
  of large Integers\r\n  (https://github.com/bos/text/issues/99)\r\n\r\n## 1.2.0.0\r\n\r\n*
  Fixed an integer overflow in the replace function\r\n  (https://github.com/bos/text/issues/81)\r\n\r\n*
  Fixed a hang in lazy decodeUtf8With\r\n  (https://github.com/bos/text/issues/87)\r\n\r\n*
  Reduced codegen bloat caused by use of empty and single-character\r\n  literals\r\n\r\n*
  Added an instance of IsList for GHC 7.8 and above\r\n\r\n### 1.1.1.0\r\n\r\n* The
  Data.Data instance now allows gunfold to work, via a virtual\r\n  pack constructor\r\n\r\n*
  dropEnd, takeEnd: new functions\r\n\r\n* Comparing the length of a Text against
  a number can now\r\n  short-circuit in more cases\r\n\r\n#### 1.1.0.1\r\n\r\n* streamDecodeUtf8:
  fixed gh-70, did not return all unconsumed bytes\r\n  in single-byte chunks\r\n\r\n##
  1.1.0.0\r\n\r\n* encodeUtf8: Performance is improved by up to 4x.\r\n\r\n* encodeUtf8Builder,
  encodeUtf8BuilderEscaped: new functions,\r\n  available only if bytestring >= 0.10.4.0
  is installed, that allow\r\n  very fast and flexible encoding of a Text value to
  a bytestring\r\n  Builder.\r\n\r\n  As an example of the performance gain to be
  had, the\r\n  encodeUtf8BuilderEscaped function helps to double the speed of JSON\r\n
  \ encoding in the latest version of aeson! (Note: if all you need is a\r\n  plain
  ByteString, encodeUtf8 is still the faster way to go.)\r\n\r\n* All of the internal
  module hierarchy is now publicly exposed.  If a\r\n  module is in the .Internal
  hierarchy, or is documented as internal,\r\n  use at your own risk - there are no
  API stability guarantees for\r\n  internal modules!\r\n\r\n#### 1.0.0.1\r\n\r\n*
  decodeUtf8: Fixed a regression that caused us to incorrectly\r\n  identify truncated
  UTF-8 as valid (gh-61)\r\n\r\n# 1.0.0.0\r\n\r\n* Added support for Unicode 6.3.0
  to case conversion functions\r\n\r\n* New function toTitle converts words in a string
  to title case\r\n\r\n* New functions peekCStringLen and withCStringLen simplify\r\n
  \ interoperability with C functions\r\n\r\n* Added support for decoding UTF-8 in
  stream-friendly fashion\r\n\r\n* Fixed a bug in mapAccumL\r\n\r\n* Added trusted
  Haskell support\r\n\r\n* Removed support for GHC 6.10 (released in 2008) and older\r\n"
changelog-type: markdown
description: |
  # text [![Hackage](http://img.shields.io/hackage/v/text.svg)](https://hackage.haskell.org/package/text) [![Stackage LTS](http://stackage.org/package/text/badge/lts)](http://stackage.org/lts/package/text) [![Stackage Nightly](http://stackage.org/package/text/badge/nightly)](http://stackage.org/nightly/package/text)

  Haskell library for space- and time-efficient operations over Unicode text.

  # Get involved!

  Please report bugs via the
  [github issue tracker](https://github.com/haskell/text/issues).

  The main repo:

  ```bash
  git clone https://github.com/haskell/text
  ```

  To run benchmarks please clone and unpack test files:

  ```bash
  cd text
  git clone https://github.com/haskell/text-test-data benchmarks/text-test-data
  make -Cbenchmarks/text-test-data
  ```

  # Authors

  The base code for this library was originally written by Tom Harper,
  based on the stream fusion framework developed by Roman Leshchinskiy,
  Duncan Coutts, and Don Stewart.

  The core library was fleshed out, debugged, and tested by Bryan
  O'Sullivan. Transition from UTF-16 to UTF-8 is by Andrew Lelechenko.
description-type: markdown
hash: 1907e0f6914e376df3a3a1fbc5a04e49c729d333de34babba4da30075048c60f
homepage: https://github.com/haskell/text
latest: 2.1.3
license-name: BSD-2-Clause
maintainer: Haskell Text Team <andrew.lelechenko@gmail.com>, Core Libraries Committee
synopsis: An efficient packed Unicode text type.
test-bench-deps:
  QuickCheck: '>=2.12.6 && <2.17'
  base: <5
  binary: '>=0'
  bytestring: '>=0.10.4'
  containers: '>=0'
  data-array-byte: '>=0.1 && <0.2'
  deepseq: '>=0'
  directory: '>=0'
  filepath: '>=0'
  ghc-prim: '>=0'
  tasty: '>=0'
  tasty-bench: '>=0.2'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
