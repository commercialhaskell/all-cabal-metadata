homepage: https://github.com/juhp/hkgr
changelog-type: markdown
hash: 40e21129233d151bc3aa39a07d91f827287a5d69ee5e7f7f5098516e8199cabb
test-bench-deps: {}
maintainer: Jens Petersen <juhpetersen@gmail.com>
synopsis: Simple Hackage release workflow for package maintainers
changelog: |
  # Changelog

  ## 0.4 (2022-03-27)
  - template.cabal: use cabal 2.0 and define hs-source-dirs
  - 'tagdist --existing-tag' replaces 'dist' command
  - 'upload': add --existing-tag for dist rather than tagdist
  - 'new': stack init with lts-17
  - 'rename': experimental command to rename a project
  - add '--no-hlint' option to skip running hlint
    (also hlint is no longer run for 'publish')

  ## 0.3 (2020-05-07)
  - only read Hackage username/password if not in ~/.cabal/config
  - 'upload': show newer untagged commits
  - 'dist': new command for a manually tagged release
  - fix the check for package version committed

  ## 0.2.7 (2020-02-27)
  - Main.hs: explicitly export main and add SPDX-License-Identifier
  - move Main.hs to src/
  - handle git submodules (not --recursive yet)
  - use typed-process to interleave IO to display auth errors
  - check name and .cabal filename consistent
  - put tarballs in .hkgr/
  - upload: error if tag no longer on branch
  - publish: only push up to tag

  ## 0.2.6.1 (2020-07-30)
  - upload: do not hide output since it conceals any error
  - new: improvements to work better with cabal-3.0 init

  ## 0.2.6 (2020-06-11)
  - tagdist: include existing tag in error message
  - experimental 'new' project command with user template file
    `~/.config/hkgr/template.cabal`
  - switch to cabal v2-sdist
  - upload: display error correctly
  - upload: add --force switch - to refresh tag and tarball

  ## 0.2.5.2 (2020-02-29)
  - no hlint summary
  - fix published message

  ## 0.2.5.1 (2020-02-29)
  - improve output for hlint and uploaded url
  - also check for staged changes

  ## 0.2.5 (2020-02-29)
  - check that package version is committed
  - use quiet cabal v1-configure and v1-sdist commands
  - make cabal upload quiet

  ## 0.2.4.1 (2020-02-11)
  - assert that cabal-install installed
  - run hlint in git checkout instead of working tree

  ## 0.2.4 (2019-10-05)
  - git push before publishing
  - only push up to tag

  ## 0.2.3 (2019-09-30)
  - push git tag
  - hlint is now a warning not an error
  - prefix version tags with v
  - surround git diff output with quote lines
  - catch exception for sdist

  ## 0.2.2 (2019-07-06)
  - run hlint before git tag
  - relax force sdist when no existing tarball
  - show git diff to warn project dirty

  ## 0.2.1 (2019-06-24)
  - fix creation of published symlink lockfile
  - tagdist before `cabal upload` if no tarball

  ## 0.2 (2019-06-24)
  - merge tag and dist commands into tagdist
  - if sdist fails then reset tag
  - drop push-tags command

  ## 0.1 (2019-06-24)
  - add published lock file: prevents tagging/dist/upload after publish
  - tag before sdist if no tag
  - push tag after publishing

  ## 0.0 (2019-06-08)
  * Initially created.
basic-deps:
  xdg-basedir: -any
  bytestring: -any
  extra: -any
  base: <5
  simple-cmd-args: '>=0.1.6'
  filepath: -any
  typed-process: -any
  simple-cabal: '>=0.1.0'
  directory: '>=1.3.1.0'
all-versions:
- '0.0'
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.3.2
- 0.2.3.3
- 0.2.4
- 0.2.4.1
- 0.2.5
- 0.2.5.1
- 0.2.5.2
- 0.2.6
- 0.2.6.1
- 0.2.7
- '0.3'
- '0.4'
author: Jens Petersen <juhpetersen@gmail.com>
latest: '0.4'
description-type: markdown
description: |
  # Hkgr

  [![Hackage](https://img.shields.io/hackage/v/hkgr.svg)](https://hackage.haskell.org/package/hkgr)
  [![GPL-3 license](https://img.shields.io/badge/license-GPL--3-blue.svg)](LICENSE)
  [![GitHub CI](https://github.com/juhp/hkgr/workflows/build/badge.svg)](https://github.com/juhp/hkgr/actions)

  `hkgr` (pronounced "hackager") is a tool for making releases of
  Haskell packages on Hackage.

  It uses a cautious stepped iterative approach to releases.

  ## Example usage

  Here is an example of doing a release of hkgr itself.

  After committing the latest changes for the release, create a tag and tarball:

  ```
  $ hkgr tagdist
  v0.2.5
  No errors or warnings could be found in the package.
  Running hlint
  ./Main.hs:107:28: Warning: Redundant do
  Found:
    do void $ cmdBool "hlint" ["."]
  Perhaps:
    void $ cmdBool "hlint" ["."]
  Resolving dependencies...
  Configuring hkgr-0.2.5...
  Building source dist for hkgr-0.2.5...
  Preprocessing executable 'hkgr' for hkgr-0.2.5..
  Source tarball created: dist/hkgr-0.2.5.tar.gz
  ```

  After fixing up, retag a new tarball:

  ```
  $ hkgr tagdist -f
  Updated tag 'v0.2.5' (was 55b69db)
  No errors or warnings could be found in the package.
  Running hlint
  Resolving dependencies...
  Configuring hkgr-0.2.5...
  Building source dist for hkgr-0.2.5...
  Preprocessing executable 'hkgr' for hkgr-0.2.5..
  Source tarball created: dist/hkgr-0.2.5.tar.gz
  ```

  Alternatively if you had manually tagged the release with `v0.2.5`
  you can use `hkgr tagdist --existing-tag` to create a dist tarball.

  The tarball can now be uploaded to Hackage as a candidate release:
  ```
  $ hkgr upload

  Uploaded to https://hackage.haskell.org/package/hkgr-0.2.5/candidate
  ```

  One can continue to `tagdist -f` and `upload` until
  everything looks good and CI passed etc.

  Note that `tagdist -f` and `upload`, can be combined as `upload -f`.
  If one wants to check the candidate upload quickly,
  it is faster just to run `upload` followed by `upload -f` if needed.

  Then it is time to push the final tag and publish the release:

  ```
  $ hkgr publish
  Everything up-to-date
  Total 0 (delta 0), reused 0 (delta 0)
  To github.com:juhp/hkgr.git
   * [new tag]         v0.2.5 -> v0.2.5

  Published at https://hackage.haskell.org/package/hkgr-0.2.5
  ```

  ## Details

  ### tagdist
  `hkgr tagdist` makes a dist tarball from a git tag:

  The `tagdist` command first reads the current package version
  (from the `.cabal` file in the current directory), and uses that to `git tag`.
  It then runs `cabal sdist` from a temporary pristine checkout of the tag
  to generate the dist tarball.

  Note that hkgr is lenient: it allows making a release with uncommitted changes
  in the working tree, but it will show the uncommitted changes.
  However the version must be committed.

  If the tag already exists (eg if you already ran `tagdist` earlier),
  and you need to add commits to the release
  you can use `--force` to move the tag to the latest commit
  and generate a new tarball off that,
  otherwise `tagdist` refuses to run again to prevent accidently overwriting
  the tag and dist tarball.

  One should not be able to `tagdist` on an already published
  (ie released) version made with hkgr.

  If sdist fails for some reason then hkgr tries to reset the tag.

  Alternatively if you have already manually tagged a release with 'v' prefix
  you can use `--existing-tag` to create a dist tarball.

  ### upload
  `hkgr upload` uploads the tarball to Hackage as a candidate release.
  Like `hkgr tagdist -f`, `hkgr upload -f` can be repeated.

  Haddock draft documentation can also be uploaded once if desired
  with `hkgr upload-haddock`.

  If you have an existing version tag (starting with `v`) you can use
  the `--existing-tag` option to skip the tagging step (like for `tagdist`).

  ### publish
  `hkgr publish` releases the tarball to Hackage.

  If it succeeds then hkgr creates a "published lockfile" in `dist/`,
  and the git tag is pushed to origin.

  (Then hkgr will refuse to do further commands on the released version.)

  Optionally one can publish haddock docs with `hkgr publish-haddock`.

  ### new
  `hkgr new` creates a new project.

  If you don't pass a name it will try to check the current directory.

  It uses `cabal init` to setup various files but replaces the .cabal file
  with a template stored in `~/.config/hkgr/template.cabal` which the user
  can freely customize.

  A `stack.yaml` file and git repo is also set up.

  One can use `gh repo create` etc to create the project repo on Github.

  ## Requirements
  hkgr uses `cabal-install` >=2, `git`, and also `hlint` if available.
license-name: GPL-3.0-only
