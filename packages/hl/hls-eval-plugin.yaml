homepage: ''
changelog-type: ''
hash: 794703f05b7d781a2d11a91765b11e0bca3242147045da75d71ef82b0b6b4327
test-bench-deps:
  lsp-test: -any
  extra: -any
  base: -any
  text: -any
  filepath: -any
  hls-test-utils: ^>=1.0
  lens: -any
  hls-eval-plugin: -any
  aeson: -any
  lsp-types: -any
  directory: -any
maintainer: https://github.com/haskell/haskell-language-server/contributors
synopsis: Eval plugin for Haskell Language Server
changelog: ''
basic-deps:
  shake: -any
  ghc: -any
  lsp: -any
  unliftio: -any
  extra: -any
  base: '>=4.12 && <5'
  time: -any
  parser-combinators: -any
  Diff: ^>=0.4.0
  unordered-containers: -any
  text: -any
  safe-exceptions: -any
  megaparsec: '>=9.0'
  filepath: -any
  dlist: -any
  containers: -any
  ghcide: ^>=1.2
  lens: -any
  ghc-paths: -any
  mtl: -any
  pretty-simple: -any
  hashable: -any
  transformers: -any
  temporary: -any
  deepseq: -any
  QuickCheck: -any
  ghc-boot-th: -any
  hls-plugin-api: ^>=1.1
  aeson: -any
  lsp-types: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.2.0.0
- 1.0.0.0
- 1.1.0.0
author: https://github.com/haskell/haskell-language-server/contributors
latest: 1.1.0.0
description-type: markdown
description: "# Eval plugin for the [Haskell Language Server](https://github.com/haskell/haskell-language-server#readme)\r\n\r\nThe
  Eval plugin evaluates code inserted in comments.\r\n\r\nThis is mainly useful to
  test and document functions and to quickly evaluate small expressions.\r\n\r\nEvery
  line of code to be evaluated is introduced by __>>>__\r\n\r\nA quick calculation:\r\n\r\n```\r\n--
  >>> 2**4.5/pi\r\n-- 7.202530529256849\r\n```\r\n\r\nA little test for the `double`
  function:\r\n\r\n```\r\n{- |\r\nA doubling function.\r\n\r\n>>> double 11\r\n22\r\n-}\r\ndouble
  = (2*)\r\n```\r\n\r\n# Demo\r\n\r\n![Eval](demo.gif)\r\n\r\n# Test Structure\r\n\r\nA
  test is composed by a sequence of contiguous lines, the result of their evaluation
  is inserted after the test body:\r\n\r\n```\r\n>>> \"AB\" ++ \"CD\"\r\n>>> \"CD\"
  ++ \"AB\"\r\n\"ABCD\"\r\n\"CDAB\"\r\n```\r\n\r\nYou execute a test by clicking on
  the _Evaluate_ code lens that appears above it (or _Refresh_, if the test has been
  run previously).\r\n\r\nAll tests in the same comment block are executed together.\r\n\r\n\r\nTests
  can appear in all kind of comments:\r\n* plain comments (both single and multi line)\r\n```\r\n{-\r\n>>>
  \"ab\" ++ \"c\"\r\n\"abc\"\r\n-}\r\n\r\n-- >>> \"ab\" ++ \"c\"\r\n-- \"abc\"\r\n```\r\n*
  Haddock commands (both single and multi line, forward and backward)\r\n```\r\n{-\r\n>>>
  \"ab\" ++ \"c\"\r\n\"abc\"\r\n-}\r\n\r\n-- >>> \"ab\" ++ \"c\"\r\n-- \"abc\"\r\n\r\ndouble
  a = a + a\r\n-- ^ A doubling function\r\n-- >>> double 11\r\n-- 22\r\n```\r\n\r\nModules
  that use CPP and Literate Haskell (Bird-style only) modules are also supported (for
  GHC >= 8.8).\r\n\r\n# Test Components\r\n\r\nIn general, a test is a sequence of:\r\n*
  imports\r\n* directives\r\n* statements\r\n* expressions\r\n* properties\r\n\r\nin
  no particular order, with every line introduced by __>>>__ (or __prop>__ in the
  case of properties).\r\n\r\n### Imports\r\n\r\n```\r\n>>> import Data.List\r\n>>>
  import GHC.TypeNats\r\n```\r\n\r\nFrom any package in scope but currently NOT from
  modules in the same source directory.\r\n\r\n### Language Extensions\r\n\r\n```\r\n>>>
  :set -XScopedTypeVariables -XStandaloneDeriving -XDataKinds -XTypeOperators -XExplicitNamespaces\r\n```\r\n\r\n###
  Statements and Declarations\r\n\r\nFunction declarations (optionally introduced
  by __let__):\r\n\r\n```\r\n>>> let tuple x = (x,x)\r\n>>> let one=1;two=2\r\n>>>
  triple x = (x,x,x)\r\n```\r\n\r\nAny other declaration:\r\n\r\n```\r\n>>> data TertiumDatur
  = Truly | Falsely | Other deriving Show\r\n>>> class Display a where display ::
  a -> String\r\n>>> instance Display TertiumDatur where display = show\r\n```\r\n\r\nDefinitions
  are available to following tests in the __same__ comment:\r\n\r\n```\r\n{-\r\n>>>
  two = 2\r\n\r\n>>> two\r\n2\r\n-}\r\n\r\n-- >>> two\r\n-- Variable not in scope:
  two\r\n```\r\n\r\nIf you want definitions to be available to all tests in the module,
  define a setup section:\r\n\r\n```\r\n-- $setup\r\n-- >>> eleven = 11\r\n\r\n{-\r\neleven
  is now available to any test:\r\n\r\n>>> eleven*2\r\n22\r\n-}\r\n```\r\n\r\n\r\n###
  Type and Kind directives\r\n\r\n```\r\n>>> :type Truly\r\nTruly :: TertiumDatur\r\n\r\n>>>
  :kind TertiumDatur\r\nTertiumDatur :: *\r\n\r\n>>> :type 3\r\n3 :: forall p. Num
  p => p\r\n\r\n>>> :type +d 3\r\n3 :: Integer\r\n\r\n>>> type N = 1\r\n>>> type M
  = 40\r\n>>> :kind! N + M + 1\r\nN + M + 1 :: Nat\r\n= 42\r\n```\r\n\r\n### Expressions\r\n\r\n```\r\n>>>
  tuple 2\r\n>>> triple 3\r\n>>> display Other\r\n(2,2)\r\n(3,3,3)\r\n\"Other\"\r\n```\r\n\r\nIO
  expressions can also be evaluated but their output to stdout/stderr is NOT captured:\r\n\r\n```\r\n>>>
  print \"foo\"\r\n()\r\n```\r\n\r\n### Properties\r\n\r\n```\r\nprop> \\(l::[Int])
  -> reverse (reverse l) == l\r\n+++ OK, passed 100 tests.\r\n```\r\n\r\n# Haddock
  vs Plain Comments\r\n\r\nThere is a conceptual difference between Haddock and plain
  comments:\r\n* Haddock comments constitute the external module's documentation,
  they state the contract between the implementor and the module users (API)\r\n*
  Plain comments are internal documentation meant to explain how the code works (implementation).\r\n\r\nThis
  conceptual difference is reflected in the way tests results are refreshed by the
  Eval plugin.\r\n\r\nSay that we have defined a `double` function as:\r\n\r\n```\r\ndouble
  = (*2)\r\n```\r\n\r\nAnd, in an Haddock comment, we run the test:\r\n\r\n```\r\n{-
  |\r\n>>> double 11\r\n22\r\n-}\r\n```\r\n\r\nWe then change the definition to:\r\n\r\n```\r\ndouble
  = (*3)\r\n```\r\n\r\nWhen we refresh the test, its current result is compared with
  the previous one and differences are displayed (as they change the API):\r\n\r\n```\r\n{-
  |\r\n>>> double 11\r\nWAS 22\r\nNOW 33\r\n-}\r\n```\r\n\r\nOn the contrary, if the
  test were into a plain comment, the result would simply be replaced:\r\n\r\n```\r\n{-\r\n>>>
  double 11\r\n33\r\n-}\r\n```\r\n\r\n# Multiline Output\r\n\r\nBy default, the output
  of every expression is returned as a single line.\r\n\r\nThis is a problem if you
  want, for example, to pretty print a value (in this case using the [pretty-simple](https://hackage.haskell.org/package/pretty-simple)
  package):\r\n\r\n```\r\n>>> import Text.Pretty.Simple\r\n>>> pShowNoColor [1..3]\r\n\"[
  1\\n, 2\\n, 3\\n]\"\r\n```\r\n\r\nWe could try to print the pretty-print output,
  but stdout is not captured so we get just a ():\r\n\r\n```\r\n>>> print $ pShowNoColor
  [1..7]\r\n()\r\n```\r\n\r\nTo display it properly, we can exploit the fact that
  the output of an error is displayed as a multi-line text:\r\n\r\n```\r\n>>> import
  qualified Data.Text.Lazy as TL\r\n>>> import Text.Pretty.Simple\r\n>>> prettyPrint
  v = error (TL.unpack $ pShowNoColor v) :: IO String\r\n>>> prettyPrint [1..3]\r\n[
  1\r\n, 2\r\n, 3\r\n]\r\n```\r\n\r\n# Differences with doctest\r\n\r\nThough the
  Eval plugin functionality is quite similar to that of [doctest](https://hackage.haskell.org/package/doctest),
  some doctest's features are not supported.\r\n\r\n### Capturing Stdout\r\n\r\nOnly
  the value of an IO expression is spliced in, not its output:\r\n\r\n```\r\n>>> print
  \"foo\"\r\n()\r\n```\r\n\r\n### Pattern Matching\r\n\r\nThe arbitrary content matcher
  __...__ is unsupported.\r\n\r\n### Missing lambda abstractions in property tests\r\n\r\nVariables
  are not automatically introduced:\r\n\r\n```\r\nprop> reverse (reverse l) == (l::[Int])\r\nVariable
  not in scope: l :: [Int]\r\n```\r\n\r\nThis works:\r\n\r\n```\r\nprop> \\(l::[Int])
  -> reverse (reverse l) == l\r\n+++ OK, passed 100 tests.\r\n```\r\n\r\n### Multiline
  Expressions\r\n\r\n```\r\n >>> :{\r\n  let\r\n    x = 1\r\n    y = 2\r\n  in x +
  y + multiline\r\n :}\r\n```\r\n\r\n# Acknowledgments\r\n\r\nDesign/features derived
  from:\r\n\r\n* [GHCi](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html)\r\n\r\n*
  [Haddock's](https://www.haskell.org/haddock/doc/html/ch03s08.html#idm140354810775744)
  Examples and Properties\r\n\r\n* [Doctest](https://hackage.haskell.org/package/doctest)\r\n\r\n*
  the REPLoid feature of [Dante](https://github.com/jyp/dante)\r\n\r\n"
license-name: Apache-2.0
