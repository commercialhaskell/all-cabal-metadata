all-versions:
- 0.2.1
- 0.2.2
author: Alexandre Termier, Simon Marlow, Satnam Singh
basic-deps:
  array: '>=0.2'
  base: '>=3 && <4'
  bytestring: '>=0'
  bytestring-csv: '>=0'
  containers: '>=0.3'
  haskell98: '>=0'
  parallel: '>=2.2'
changelog: ''
changelog-type: ''
description: "HLCM, the parallel closed frequent itemset miner in Haskell.\n(c) 2010,
  Alexandre Termier\n\nIntroduction\n------------\n\nDiscovering frequent itemsets
  consists in finding patterns that are \noften repeated in data. \nThe data is a
  list of transactions, and each transaction is composed of items.\nIt is easier to
  see with the \"supermarket\" analogy : \n - an item is a product that a customer
  buys\n - a transaction is the list of products bought by a customer. \n\nA transaction
  database will then be the list of purchases at a supermarket.\nThe frequent itemsets
  will then be the products that are often bought together by customers.\nFinding
  those can lead to important insights about the data. \nIn the supermarket case,
  the goal is to better understand the buying habits of customers. \n\nClosed frequent
  itemsets is a subset of frequent itemsets, without information loss.\nI.e., knowing
  the closed frequent itemsets is sufficient to recompute all the frequent itemsets.
  \nBasically, there are lots of redundancies in frequent itemsets, and these redundancies
  are \neliminated in closed frequent itemsets.\nAlgorithms for computing closed frequent
  itemsets are orders of magnitude faster than traditional\nalgorithms to discover
  frequent itemsets such as Apriori, and are thus heavily recommanded.\n\nLCM is the
  fastest of those algorithms. It has been proposed in 2004 by Takeaki Uno and Hiroki
  Arimura.\nHLCM allows Haskell users to benefit from this excellent algorithm, either
  as a library\nor as a standalone program.\n\nInstallation : \n--------------\n\nrunhaskell
  Setup configure --user\nrunhaskell Setup build\n\nRecommanded but not mandatory:
  runhaskell Setup haddock --executable\n(builds the HTML documentation)\n\nrunhaskell
  Setup install\n\n\nYou can also use cabal with : cabal install hlcm  (XXX VERIFY
  THIS)\n\nSample datasets :\n-----------------\n\nSeveral datasets are given in the
  Data directory.\nYou first have to decompress them :\n\ncd Data\ntar xvzf datasets.tgz\n\nThe
  toy datasets are : \n\n * simple.csv : a csv file with 3 transactions that could
  come from a grocery store\n * simple.num : same as simple.csv, but items are represented
  by integers\n * mushroom_expanded.csv : a dataset about mushrooms, where the items
  are long strings.\n   More infos here : http://archive.ics.uci.edu/ml/datasets/Mushroom\n\nSee
  the haddock documentation of hlcm for examples on how to mine these datasets.\n\n\nBenchmarking
  parallel runtime :\n-------------------------------\n\nOne of the purposes of HLCM
  is to be a real-world benchmark for the Haskell RTS when using only semi-implicit
  parallelism.\n\nThe benchmark datasets provided are :\n * mushroom.dat : a small
  size dataset, with around 8000 transactions. \n   A support threshold of 6000 gives
  very few items, whereas a support \n   thresold of 100 should give more work to
  the processors.\n * connect.dat : a complex dataset, with around 60000 transactions.\n
  \  A support threshold of 15000  will run in a few minutes and allow \n   to have
  a good estimate of speedup. \n\n\nMore datasets can be found here : http://fimi.cs.helsinki.fi/data/\nThese
  dataset can be directly used by HLCM with any preprocessing.\n\nBe warned that currently,
  HLCM is not very efficient at loading data files, and does so sequentially (no parallelism
  here).\nHuge datasets such as kosarak can be handled, but loading time only will
  take several minutes.\n\nYou can tinker with parallel strategy and parameters by
  using benchHLCM. \nSee the haddock documentation for explanations on parameters.\n\n"
description-type: text
hash: a37b71257a4348102f80e82deff3aacd0031753b5752e0227794310f82b4a1fb
homepage: http://membres-liglab.imag.fr/termier/HLCM/hlcm.html
latest: 0.2.2
license-name: BSD-3-Clause
maintainer: Alexandre.Termier@imag.fr
synopsis: Fast algorithm for mining closed frequent itemsets
test-bench-deps: {}
