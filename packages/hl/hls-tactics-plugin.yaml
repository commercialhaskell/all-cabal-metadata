homepage: https://haskellwingman.dev
changelog-type: ''
hash: 93582a62e7a24cf1219356b50d983a1fa38f2eb50309980800deafe687d95a3b
test-bench-deps:
  ghc: -any
  base: -any
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  hls-test-utils: ==2.0.0.1
  containers: -any
  ghcide: -any
  lens: -any
  mtl: -any
  hls-tactics-plugin: -any
  tasty-hunit: -any
  deepseq: -any
  QuickCheck: -any
  hls-plugin-api: -any
  aeson: -any
  lsp-types: -any
  hspec-expectations: -any
  directory: -any
maintainer: sandy@sandymaguire.me
synopsis: Wingman plugin for Haskell Language Server
changelog: ''
basic-deps:
  hls-refactor-plugin: -any
  ghc: -any
  lsp: -any
  fingertree: -any
  extra: '>=1.7.8'
  base: '>=4.12 && <5'
  parser-combinators: -any
  unordered-containers: -any
  text: -any
  megaparsec: '>=8 && <10'
  syb: -any
  ghc-exactprint: -any
  filepath: -any
  hls-graph: -any
  containers: -any
  ghcide: ==2.0.0.1
  lens: -any
  hyphenation: -any
  retrie: '>=0.1.1.0'
  mtl: -any
  unagi-chan: -any
  ghc-source-gen: ^>=0.4.1
  refinery: ^>=0.4
  generic-lens: -any
  prettyprinter: -any
  transformers: -any
  deepseq: -any
  ghc-boot-th: -any
  hls-plugin-api: ==2.0.0.1
  aeson: -any
  directory: -any
all-versions:
- 0.5.1.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.3.0.0
- 1.4.0.0
- 1.5.0.0
- 1.5.0.1
- 1.6.0.0
- 1.6.1.0
- 1.6.2.0
- 1.7.0.0
- 1.8.0.0
- 1.8.1.0
- 2.0.0.0
- 2.0.0.1
author: Sandy Maguire, Reed Mullanix
latest: 2.0.0.1
description-type: markdown
description: "<p align=\"center\">\n<img src=\"https://haskellwingman.dev/wingman.png\"
  height=\"256\" alt=\"Wingman for Haskell\" title=\"Wingman for Haskell\">\n</p>\n\n<p>&nbsp;</p>\n\n#
  Wingman for Haskell\n\n[![Hackage](https://img.shields.io/hackage/v/hls-tactics-plugin.svg?logo=haskell&label=hls-tactics-plugin)](https://hackage.haskell.org/package/hls-tactics-plugin)\n\n\"Focus
  on the important stuff; delegate the rest\"\n\n\n## Dedication\n\n> There's a lot
  of automation that can happen that isn't a replacement of\n> humans, but of mind-numbing
  behavior.\n>\n> --Stewart Butterfield\n\n\n## Overview\n\nWingman writes the boring,
  auxiliary code, so you don't have to. Generate\nfunctions from type signatures,
  and intelligently complete holes.\n\n\n## Getting Started\n\nWingman for Haskell
  is enabled by default in all [official release of Haskell\nLanguage Server.][hls]
  Just hover over a typed hole, run the \"Attempt to\nfill hole\" code action, *et
  voila!*\n\n[hls]: https://github.com/haskell/haskell-language-server/releases\n\n\n##
  Usage\n\nWhen enabled, Wingman for Haskell will remove HLS support for hole-fit
  code\nactions. These code actions are provided by GHC and make typechecking extremely\nslow
  in the presence of typed holes. Because Wingman relies so heavily on typed\nholes,
  these features are in great tension.\n\nThe solution: we just remove the hole-fit
  actions. If you'd prefer to use these\nactions, you can get them back by compiling
  HLS without the Wingman plugin.\n\n\n## Editor Configuration\n\n### Enabling Jump
  to Hole\n\nSet the `haskell.plugin.tactics.config.hole_severity` config option to
  `4`, or\n`hint` if your editor uses a GUI for its configuration. This has the potential\nto
  negatively impact performance --- please holler if you notice any appreciable\nslowdown
  by enabling this option.\n\n\n### coc.nvim\n\nThe following vimscript maps Wingman
  code-actions to your leader key:\n\n```viml\n\" use [h and ]h to navigate between
  holes\nnnoremap <silent> [h :<C-U>call CocActionAsync('diagnosticPrevious', 'hint')<CR>\nnnoremap
  <silent> ]h :<C-U>call <SID>JumpToNextHole()<CR>\n\n\" <leader>d to perform a pattern
  match, <leader>n to fill a hole\nnnoremap <silent> <leader>d  :<C-u>set operatorfunc=<SID>WingmanDestruct<CR>g@l\nnnoremap
  <silent> <leader>n  :<C-u>set operatorfunc=<SID>WingmanFillHole<CR>g@l\nnnoremap
  <silent> <leader>r  :<C-u>set operatorfunc=<SID>WingmanRefine<CR>g@l\nnnoremap <silent>
  <leader>c  :<C-u>set operatorfunc=<SID>WingmanUseCtor<CR>g@l\nnnoremap <silent>
  <leader>a  :<C-u>set operatorfunc=<SID>WingmanDestructAll<CR>g@l\n\n\nfunction!
  s:JumpToNextHole()\n  call CocActionAsync('diagnosticNext', 'hint')\nendfunction\n\nfunction!
  s:GotoNextHole()\n  \" wait for the hole diagnostics to reload\n  sleep 500m\n  \"
  and then jump to the next hole\n  normal 0\n  call <SID>JumpToNextHole()\nendfunction\n\nfunction!
  s:WingmanRefine(type)\n  call CocAction('codeAction', a:type, ['refactor.wingman.refine'])\n
  \ call <SID>GotoNextHole()\nendfunction\n\nfunction! s:WingmanDestruct(type)\n  call
  CocAction('codeAction', a:type, ['refactor.wingman.caseSplit'])\n  call <SID>GotoNextHole()\nendfunction\n\nfunction!
  s:WingmanDestructAll(type)\n  call CocAction('codeAction', a:type, ['refactor.wingman.splitFuncArgs'])\n
  \ call <SID>GotoNextHole()\nendfunction\n\nfunction! s:WingmanFillHole(type)\n  call
  CocAction('codeAction', a:type, ['refactor.wingman.fillHole'])\n  call <SID>GotoNextHole()\nendfunction\n\nfunction!
  s:WingmanUseCtor(type)\n  call CocAction('codeAction', a:type, ['refactor.wingman.useConstructor'])\n
  \ call <SID>GotoNextHole()\nendfunction\n```\n\n### Emacs\n\nWhen using Emacs, wingman
  actions should be available out-of-the-box and\nshow up e.g. when using `M-x helm-lsp-code-actions
  RET` provided by \n[helm-lsp](https://github.com/emacs-lsp/helm-lsp) or as popups
  via\n[lsp-ui-sideline](https://emacs-lsp.github.io/lsp-ui/#lsp-ui-sideline).\n\nAdditionally,
  if you want to bind wingman actions directly to specific\nkeybindings or use them
  from Emacs Lisp, you can do so like this:\n\n``` emacs-lisp\n;; will define elisp
  functions for the given lsp code actions, prefixing the\n;; given function names
  with \"lsp\"\n(lsp-make-interactive-code-action wingman-fill-hole \"refactor.wingman.fillHole\")\n(lsp-make-interactive-code-action
  wingman-case-split \"refactor.wingman.caseSplit\")\n(lsp-make-interactive-code-action
  wingman-refine \"refactor.wingman.refine\")\n(lsp-make-interactive-code-action wingman-split-func-args
  \"refactor.wingman.spltFuncArgs\")\n(lsp-make-interactive-code-action wingman-use-constructor
  \"refactor.wingman.useConstructor\")\n\n;; example key bindings\n(define-key haskell-mode-map
  (kbd \"C-c d\") #'lsp-wingman-case-split)\n(define-key haskell-mode-map (kbd \"C-c
  n\") #'lsp-wingman-fill-hole)\n(define-key haskell-mode-map (kbd \"C-c r\") #'lsp-wingman-refine)\n(define-key
  haskell-mode-map (kbd \"C-c c\") #'lsp-wingman-use-constructor)\n(define-key haskell-mode-map
  (kbd \"C-c a\") #'lsp-wingman-split-func-args)\n```\n\n### Other Editors\n\nPlease
  open a PR if you have a working configuration!\n\n\n## Features\n\n* [Type-directed
  code synthesis][auto], including pattern matching and recursion\n* [Automatic case-splitting][case]
  --- just run the \"Case split on <x>\" code action\n* [Smart next actions][next],
  for those times it can't read your mind\n\n[auto]: https://haskellwingman.dev/foldr.gif\n[case]:
  https://haskellwingman.dev/case-split.gif\n[next]: https://haskellwingman.dev/intros.gif\n\n\n##
  Support\n\nPlease consider [pledging on Patreon][patreon] to support the project
  and get\naccess to cutting-edge features.\n\n[patreon]: https://www.patreon.com/wingman_for_haskell\n\n"
license-name: Apache-2.0
