homepage: https://haskellwingman.dev
changelog-type: ''
hash: f75666d41bca724ec512f38857d5e7b5f9f8c5217b849d6a3dde9ef510384dd0
test-bench-deps:
  lsp-test: -any
  ghc: -any
  bytestring: -any
  checkers: -any
  base: -any
  tasty-golden: -any
  tasty-expected-failure: -any
  hspec: -any
  text: -any
  megaparsec: -any
  filepath: -any
  data-default: -any
  hie-bios: -any
  containers: -any
  ghcide: '>=0.7.5.0'
  lens: -any
  mtl: -any
  hls-tactics-plugin: -any
  tasty-hunit: -any
  tasty-rerun: -any
  tasty: -any
  deepseq: -any
  QuickCheck: -any
  hls-plugin-api: -any
  aeson: -any
  lsp-types: -any
  hspec-expectations: -any
  tasty-ant-xml: '>=1.1.6'
  directory: -any
maintainer: sandy@sandymaguire.me
synopsis: Wingman plugin for Haskell Language Server
changelog: ''
basic-deps:
  shake: '>=0.17.5'
  ghc: -any
  lsp: -any
  fingertree: -any
  extra: -any
  base: '>=4.12 && <5'
  text: -any
  syb: -any
  ghc-exactprint: -any
  filepath: -any
  data-default: -any
  containers: -any
  ghcide: '>=1.0.0.0 && <1.1'
  lens: -any
  retrie: '>=0.1.1.0'
  mtl: -any
  hls-tactics-plugin: -any
  ghc-source-gen: -any
  refinery: ^>=0.3
  generic-lens: -any
  transformers: -any
  deepseq: -any
  ghc-boot-th: -any
  hls-plugin-api: '>=1.0.0.0 && <1.1'
  aeson: -any
  directory: -any
all-versions:
- 0.5.1.0
- 1.0.0.0
author: Sandy Maguire, Reed Mullanix
latest: 1.0.0.0
description-type: markdown
description: |+
  <p align="center">
  <img src="https://haskellwingman.dev/wingman.png" height="256" alt="Wingman for Haskell" title="Wingman for Haskell">
  </p>

  <p>&nbsp;</p>

  # Wingman for Haskell

  [![Hackage](https://img.shields.io/hackage/v/hls-tactics-plugin.svg?logo=haskell&label=hls-tactics-plugin)](https://hackage.haskell.org/package/hls-tactics-plugin)

  "Focus on the important stuff; delegate the rest"


  ## Dedication

  > There's a lot of automation that can happen that isn't a replacement of
  > humans, but of mind-numbing behavior.
  >
  > --Stewart Butterfield


  ## Overview

  Wingman writes the boring, auxiliary code, so you don't have to. Generate
  functions from type signatures, and intelligently complete holes.


  ## Getting Started

  Wingman for Haskell is enabled by default in all [official release of Haskell
  Language Server.][hls] Just hover over a typed hole, run the "Attempt to
  fill hole" code action, *et voila!*

  [hls]: https://github.com/haskell/haskell-language-server/releases


  ## Features

  * [Type-directed code synthesis][auto], including pattern matching and recursion
  * [Automatic case-splitting][case] --- just run the "Case split on <x>" code action
  * [Smart next actions][next], for those times it can't read your mind

  [auto]: https://haskellwingman.dev/foldr.gif
  [case]: https://haskellwingman.dev/case-split.gif
  [next]: https://haskellwingman.dev/intros.gif


  ## Support

  Please consider [pledging on Patreon][patreon] to support the project and get
  access to cutting-edge features.

  [patreon]: https://www.patreon.com/wingman_for_haskell

license-name: Apache-2.0
