homepage: http://hledger.org
changelog-type: markdown
hash: 7c639d6a3f3efc2d94529942d17ff3f75e6576564b79b1996ee456727eeeadab
test-bench-deps:
  microlens-th: '>=0.4'
  hledger-lib: -any
  bytestring: -any
  doclayout: ==0.3.*
  extra: '>=1.6.3'
  base: '>=4.11 && <4.17'
  time: '>=1.5'
  blaze-markup: '>=0.5.1'
  parser-combinators: '>=0.4.0'
  aeson-pretty: -any
  unordered-containers: '>=0.2'
  text: '>=1.2'
  megaparsec: '>=7.0.0 && <9.3'
  filepath: -any
  doctest: '>=0.18.1'
  data-default: '>=0.5'
  array: -any
  containers: '>=0.5.9'
  ansi-terminal: '>=0.9'
  cassava: -any
  utf8-string: '>=0.3.5'
  hashtables: '>=1.2.3.1'
  regex-tdfa: -any
  mtl: '>=2.2.1'
  cmdargs: '>=0.10'
  uglymemo: -any
  pretty-simple: '>4 && <5'
  tabular: '>=0.2'
  tasty-hunit: '>=0.10.0.2'
  timeit: -any
  file-embed: '>=0.0.10'
  transformers: '>=0.2'
  tasty: '>=1.2.3'
  Decimal: '>=0.5.1'
  microlens: '>=0.4'
  Glob: '>=0.9'
  aeson: '>=1'
  template-haskell: -any
  call-stack: -any
  safe: '>=0.3.18'
  cassava-megaparsec: -any
  directory: -any
maintainer: Simon Michael <simon@joyful.com>
synopsis: A reusable library providing the core functionality of hledger
changelog: "<!--\n _ _ _     \n| (_) |__  \n| | | '_ \\ \n| | | |_) |\n|_|_|_.__/
  \n           \n-->\nInternal/api/developer-ish changes in the hledger-lib (and hledger)
  packages.\nFor user-visible changes, see the hledger package changelog.\n\n# a98e6125f\n\nImprovements\n\n-
  hledger-lib now builds with GHC 9.2 and newer libs (#1774).\n\n- Renamed: CommodityLayout
  to Layout.\n  (Stephen Morgan)\n\n# 1.24.1 2021-12-10\n\nImprovements\n\n- Added:
  filterQueryOrNotQuery.\n\n# 1.24 2021-12-01\n\nImprovements\n\n- The Semigroup instance
  of PeriodicReportRow and PeriodicReport now\n  preserves the first prrName, rather
  than the second.\n  (Stephen Morgan)\n\n- PeriodicReport and PeriodicReportRow now
  have Bifunctor instances.\n  (Stephen Morgan)\n\n- Move posting rendering functions
  into Hledger.Data.Posting.\n  This produces slightly different output for showPosting,
  in particular\n  it no longer displays the transaction date. However, this has been\n
  \ marked as ‘for debugging only’ for a while.\n  (Stephen Morgan)\n\n- Drop postingDateOrDate2,
  transactionDateOrDate2; rename\n  whichDateFromOpts to whichDate. (#1731)\n\n- Added
  new helper functions journalValueAndFilterPostings(With) to make\n  valuation and
  filtration less error prone.\n  (Stephen Morgan)\n\n- Avoid deprecation warnings
  with safe 0.3.18+. \n  (Stephen Morgan)\n\n- Drop base-compat-batteries dependency.
  \n  (Stephen Morgan)\n\n- Allow megaparsec 9.2.\n\n# 1.23 2021-09-21\n\n- Require
  base >=4.11, prevent red squares on Hackage's build matrix.\n\nMuch code cleanup
  and reorganisation, such as:\n\n- Introduce lenses for many types. (Stephen Morgan)\n\n-
  The now-obsolete normaliseMixedAmount and\n  normaliseMixedAmountSquashPricesForDisplay
  functions have been\n  dropped. (Stephen Morgan)\n\n- GenericSourcePos has been
  dropped, replaced by either SourcePos or\n  (SourcePos, SourcePos), simplifying
  module structure. (Stephen Morgan)\n\n- Functions related to balancing (both transaction
  balancing and journal balancing)\n  have been moved to Hledger.Data.Balancing, reducing
  module size and reducing the risk\n  of import cycles.\n  (Stephen Morgan)\n\n-
  `ReportOptions{infer_value_}` has been renamed to `infer_prices_`,\n  for more consistency
  with the corresponding CLI flag.\n  And `BalancingOpts{infer_prices_}` is now `infer_transaction_prices_`.\n\n-
  JournalParser and ErroringJournalParser have moved to\n  Hledger.Data.Journal. (Stephen
  Morgan)\n\n- MixedAmounts now have a more predictable Ord instance / sort order.\n
  \ They are compared in each commodity in turn, with\n  alphabetically-first commodity
  symbols being most significant.\n  Missing commodities are assumed to be zero. \n
  \ As a consequence, all the ways of representing zero with a MixedAmount ([],\n
  \ [A 0], [A 0, B 0, ...]) are now Eq-ual (==), whereas before they were\n  not.
  We have not been able to find anything broken by this change.\n  ([#1563](https://github.com/simonmichael/hledger/issues/1563),
  \n  [#1564](https://github.com/simonmichael/hledger/issues/1564), \n  Stephen Morgan)\n\n-
  HUnit's testCase and testGroup are now used directly instead of\n  having test and
  tests aliases. (Stephen Morgan)\n\n- The codebase now passes many hlint checks\n\n-
  Dropped modules:\n  Hledger.Utils.Color,\n  Hledger.Data.Commodity,\n  Hledger.Utils.UTF8IOCompat,\n
  \ Hledger.Utils.Tree module.\n  (Stephen Morgan)\n\n- Drop the deprecated old-time
  lib.\n  A small number type signatures have changed:\n  journalSetLastReadTime,
  maybeFileModificationTime and Journal\n  now use POSIXTime instead of ClockTime.\n
  \ Hledger.Cli.Utils.utcTimeToClockTime has been removed, \n  as it is now equivalent
  to utcTimeToPOSIXSeconds from Data.Time.Clock.POSIX.\n  To get the current system
  time, you should now use getPOSIXTime \n  from Data.Time.Clock.POSIX instead of
  getClockTime.\n  ([#1650](https://github.com/simonmichael/hledger/issues/1650),
  Stephen Morgan)\n\n- modifyTransactions now takes a Map of commodity styles, and
  will style amounts according to that argument. journalAddForecast and journalTransform
  now return an Either String Journal. (Stephen Morgan)\n  This improves efficiency,
  as we no longer have to restyle all amounts in\n  the journal after generating auto
  postings or periodic transactions.\n  Changing the return type of journalAddForecast
  and journalTransform\n  reduces partiality.\n  To get the previous behaviour for
  modifyTransaction, use modifyTransaction mempty.\n\n- Refactor journalFinalise to
  clarify flow. (Stephen Morgan)\n  The only semantic difference is that we now apply\n
  \ journalApplyCommodityStyles before running journalCheckAccountsDeclared\n  and
  journalCheckCommoditiesDeclared.\n\n- Introduce lenses for ReportOpts and ReportSpec.
  (Stephen Morgan)\n\n- Rename the fields of ReportSpec. (Stephen Morgan)\n\n  This
  is done to be more consistent with future field naming conventions,\n  and to make
  automatic generation of lenses simpler. See discussion in\n  [#1545](https://github.com/simonmichael/hledger/issues/1545).\n\n
  \     rsOpts      -> _rsReportOpts\n      rsToday     -> _rsDay\n      rsQuery     ->
  _rsQuery\n      rsQueryOpts -> _rsQueryOpts\n\n- Remove aismultiplier from Amount.
  (Stephen Morgan)\n\n  In Amount, aismultiplier is a boolean flag that will always
  be False,\n  except for in TMPostingRules, where it indicates whether the posting\n
  \ rule is a multiplier. It is therefore unnecessary in the vast majority\n  of cases.
  This posting pulls this flag out of Amount and puts it into\n  TMPostingRule, so
  it is only kept around when necessary.\n\n  This changes the parsing of journals
  somewhat. Previously you could\n  include an * before an amount anywhere in a Journal,
  and it would\n  happily parse and set the aismultiplier flag true. This will now
  fail\n  with a parse error: * is now only acceptable before an amount within an\n
  \ auto posting rule.\n\n  Any usage of the library in which the aismultiplier field
  is read or set\n  should be removed. If you truly need its functionality, you should\n
  \ switch to using TMPostingRule.\n\n  This changes the JSON output of Amount, as
  it will no longer include\n  aismultiplier.\n\n- For accountTransactionsReport,
  generate the overall reportq from the ReportSpec, rather than being supplied as
  a separate option. (Stephen Morgan)\n\n  This is the same approach used by the other
  reports, e.g. EntryReport,\n  PostingReport, MultiBalanceReport. This reduces code
  duplication, as\n  previously the reportq had to be separately tweaked in each of
  5\n  different places.\n\n  If you call accountTransactionreport, there is no need
  to separately\n  derive the report query.\n\n- Remove unused TransactionReport.
  Move the useful utility functions to AccountTransactionsReport. (Stephen Morgan)\n\n
  \ If you use transactionsReport, you should either use entryReport if you\n  don't
  require a running total, or using accountTransactionsReport with\n  thisacctq as
  Any or None (depending on what you want included in the\n  running total).\n\n-
  Some balance report types have been renamed for clarity and to sync with docs:\n\n
  \     ReportType -> BalanceCalculation\n       ChangeReport -> CalcChange\n       BudgetReport
  -> CalcBudget\n       ValueChangeReport -> CalcValueChange\n\n      BalanceType
  -> BalanceAccumulation\n       PeriodChange -> PerPeriod\n       CumulativeChange
  -> Cumulative\n       HistoricalBalance -> Historical\n\n      ReportOpts:\n       reporttype_
  -> balancecalc_\n       balancetype_ -> balanceaccum_\n\n      CompoundBalanceCommandSpec:\n
  \      cbctype -> cbcaccum\n\n      Hledger.Reports.ReportOptions:\n       balanceTypeOverride
  -> balanceAccumulationOverride\n\n# 1.22.2 2021-08-07\n\n- forecast_ has moved from
  ReportOpts to InputOpts. (Stephen Morgan)\n\n- Generate forecast transactions at
  journal finalisation, rather than as a postprocessing step.\n  This allows us to
  have a uniform procedure for balancing transactions,\n  whether they are normal
  transactions or forecast transactions, including\n  dealing with balance assignments,
  balance assertions, and auto postings.\n  ([#1638](https://github.com/simonmichael/hledger/issues/1638),
  Stephen Morgan)\n\n# 1.22.1 2021-08-02\n\n- Allow megaparsec 9.1\n\n- journalEndDate's
  behaviour has been clarified, journalLastDay has\n  been added.\n\n- transactionCheckBalanced
  is now exported. (#1596)\n\n# 1.22 2021-07-03\n\n- GHC 9.0 is now officially supported,
  and GHC 8.0, 8.2, 8.4 are not;\n  building hledger now requires GHC 8.6 or greater.\n\n-
  Added now-required lower bound on containers. (#1514)\n\n- Added useColor, colorOption
  helpers usable in pure code, eg for debug output.\n\n- Added a Show instance for
  AmountDisplayOpts and WideBuilder, for debug logging.\n\nMany internal refactorings/improvements/optimisations
  by Stephen Morgan,\nincluding:\n\n- Don't infer a txn price with same-sign amounts.
  (#1551)\n\n- Clean up valuation functions, and make clear which to use where. (#1560)\n\n-
  Replace journalSelectingAmountFromOpts with journalApplyValuationFromOpts.\n  This
  also has the effect of allowing valuation in more reports, for\n  example the transactionReport.\n\n-
  Refactor to eliminate use of printf.\n\n- Remove unused String, Text utility functions.\n\n-
  Replace concat(Top|Bottom)Padded with textConcat(Top|Bottom)Padded.\n\n- Export
  Text.Tabular from Text.Tabular.AsciiWide, clean up import lists.\n\n- When matching
  an account query against a posting, don't try to match\n  against the same posting
  twice, in cases when poriginal is Nothing.\n\n- Create mixedAmountApplyValuationAfterSumFromOptsWith
  for doing any\n  valuation needed after summing amounts.\n\n- Create journalApplyValuationFromOpts.
  This does costing and\n  valuation on a journal, and is meant to replace most direct
  calls of\n  costing and valuation. The exception is for reports which require\n
  \ amounts to be summed before valuation is applied, for example a\n  historical
  balance report with --value=end.\n\n- Remove unused (amount|mixedAmount|posting|transaction)ApplyCostValuation
  functions.\n\n- Remove unnecessary normalisedMixedAmount.\n\n- Remove `showAmounts*B`
  functions, replacing them entirely with\n  `showMixedAmount*B` functions.\n\n- Pull
  \"show-costs\" option used by the Close command up into ReporOpts.\n\n- Add more
  efficient toEncoding for custom ToJSON declarations.\n\n- Fix ledgerDateSpan, so
  that it considers both transaction and\n  posting dates. (#772)\n\n- Move reportPeriodName
  to Hledger.Reports.ReportOptions, use it for\n  HTML and CSV output for compound
  balance reports.\n\n- Simplify the JSON representation of AmountPrecision. It now
  uses the\n  same JSON representation as Maybe Word8. This means that the JSON\n
  \ serialisation is now broadly compatible with that used before the\n  commit f6fa76bba7530af3be825445a1097ae42498b1cd,
  differing only in\n  how it handles numbers outside Word8 and that it can now produce\n
  \ null for NaturalPrecision.\n\n- A number of AccountName and Journal functions
  which are supposed to\n  produce unique sorted results now use Sets internally to
  be slightly\n  more efficient. There is also a new function journalCommodities.\n\n-
  More efficiently check whether Amounts are or appear to be zero.\n  Comparing two
  Quantity (either with == or compare) does a lot of\n  normalisation (calling roundMax)
  which is unnecessary if we're\n  comparing to zero. Do things more directly to save
  work.\n  For `reg -f examples/10000x10000x10.journal`, this results in\n\n  - A
  12% reduction in heap allocations, from 70GB to 62GB\n  - A 14% reduction in (profiled)
  time, from 79s to 70s\n\n  Results for bal -f examples/10000x10000x10.journal are
  of the same\n  order of magnitude.\n\n- In sorting account names, perform lookups
  on HashSets and HashMaps,\n  rather than lists. This is probably not an enormous
  performance sink\n  in real situations, but it takes a huge amount of time and memory
  in\n  our benchmarks (specifically 10000x10000x10.journal). For \n  `bal -f examples/10000x10000x10.journal`,
  this results in\n\n  - A 23% reduction in heap allocation, from 27GiB to 21GiB\n
  \ - A 33% reduction in (profiled) time running, from 26.5s to 17.9s\n\n- Minor refactor,
  using foldMap instead of asum . map . toList.\n\n- Do not call showAmount twice
  for every posting. For print -f\n  examples/10000x10000x10.journal, this results
  in a 7.7% reduction in\n  heap allocations, from 7.6GB to 7.1GB.\n\n- Some efficiency
  improvements in register reports.\n  Use renderRow interface for Register report.\n\n
  \ For `reg -f examples/10000x10000x10.journal`, this results in:\n\n  - Heap allocations
  decreasing by 55%, from 68.6GB to 31.2GB\n  - Resident memory decreasing by 75%,
  from 254GB to 65GB\n  - Total (profiled) time decreasing by 55%, from 37s to 20s\n\n-
  Split showMixedAmountB into showMixedAmountB and showAmountsB, the\n  former being
  a simple wrapper around the latter. This removes the\n  need for the showNormalised
  option, as showMixedAmountB will always\n  showNormalised and showAmountsB will
  never do so.\n\n- Change internal representation of MixedAmount to use a strict
  Map\n  instead of a list of Amounts. No longer export Mixed constructor, to\n  keep
  API clean. (If you really need it, you can import it directly\n  from Hledger.Data.Types).
  We also ensure the JSON representation of\n  MixedAmount doesn't change: it is stored
  as a normalised list of\n  Amounts.\n  \n  This commit improves performance. Here
  are some indicative results:\n\n      hledger reg -f examples/10000x1000x10.journal\n
  \     - Maximum residency decreases from 65MB to 60MB (8% decrease)\n      - Total
  memory in use decreases from 178MiB to 157MiB (12% decrease)\n\n      hledger reg
  -f examples/10000x10000x10.journal\n      - Maximum residency decreases from 69MB
  to 60MB (13% decrease)\n      - Total memory in use decreases from 198MiB to 153MiB
  (23% decrease)\n\n      hledger bal -f examples/10000x1000x10.journal\n      - Total
  heap usage decreases from 6.4GB to 6.0GB (6% decrease)\n      - Total memory in
  use decreases from 178MiB to 153MiB (14% decrease)\n\n      hledger bal -f examples/10000x10000x10.journal\n
  \     - Total heap usage decreases from 7.3GB to 6.9GB (5% decrease)\n      - Total
  memory in use decreases from 196MiB to 185MiB (5% decrease)\n\n      hledger bal
  -M -f examples/10000x1000x10.journal\n      - Total heap usage decreases from 16.8GB
  to 10.6GB (47% decrease)\n      - Total time decreases from 14.3s to 12.0s (16%
  decrease)\n\n      hledger bal -M -f examples/10000x10000x10.journal\n      - Total
  heap usage decreases from 108GB to 48GB (56% decrease)\n      - Total time decreases
  from 62s to 41s (33% decrease)\n\n  If you never directly use the constructor Mixed
  or pattern match against\n  it then you don't need to make any changes. If you do,
  then do the\n  following:\n\n  - If you really care about the individual Amounts
  and never normalise\n    your MixedAmount (for example, just storing `Mixed amts`
  and then\n    extracting `amts` as a pattern match, then use should switch to using\n
  \   [Amount]. This should just involve removing the `Mixed` constructor.\n  - If
  you ever call `mixed`, `normaliseMixedAmount`, or do any sort of\n    amount arithmetic
  (+), (-), then you should replace the constructor\n    `Mixed` with the function
  `mixed`. To extract the list of Amounts, use\n    the function `amounts`.\n  - Any
  remaining calls to `normaliseMixedAmount` can be removed, as that\n    is now the
  identity function.\n\n- Create a new API for MixedAmount arithmetic. This should
  supplant\n  the old interface, which relied on the Num typeclass. MixedAmount\n
  \ did not have a very good Num instance. The only functions which were\n  defined
  were fromInteger, (+), and negate. Furthermore, it was not\n  law-abiding, as 0
  + a /= a in general. Replacements for used\n  functions are:\n\n      0 -> nullmixedamt
  / mempty\n      (+) -> maPlus / (<>)\n      (-) -> maMinus\n      negate -> maNegate\n
  \     sum -> maSum\n      sumStrict -> maSum\n\n  Also creates some new constructors
  for MixedAmount:\n\n      mixedAmount :: Amount -> MixedAmount\n      maAddAmount
  :: MixedAmount -> Amount -> MixedAmount\n      maAddAmounts :: MixedAmount -> [Amount]
  -> MixedAmount\n\n  Add Semigroup and Monoid instances for MixedAmount.\n  Ideally
  we would remove the Num instance entirely.\n\n  The only change needed have nullmixedamt/mempty
  substitute for 0\n  without problems was to not squash prices in\n  mixedAmount(Looks|Is)Zero.
  This is correct behaviour in any case.\n\n\n# 1.21 2021-03-10\n\n- Building Hledger.Data.Journal
  no longer fails if the monad-extras\n  package is installed.\n\n- Many parts of
  the hledger-lib and hledger APIs have become more\n  Text-ified, expecting or returning
  Text instead of String, reducing\n  hledger's time and resident memory requirements
  by roughly 10%.\n  Some functions now use WideBuilder (a text \"builder\" which
  keeps track\n  of width), to concatenate text more efficiently. There are some\n
  \ helpers for converting to and from WideBuilder (wbUnpack, wbToText..)\n  showAmountB/showMixedAmountB
  are new amount-displaying functions\n  taking an AmountDisplayOpts. These will probably
  replace the old\n  show(Mixed)Amount* functions. (#1427, Stephen Morgan)\n\n- AtThen
  valuation is now implemented for all report types.\n  amountApplyValuation now takes
  the posting date as an argument.\n  (transaction/posting)ApplyValuation's valuation
  type and\n  transaction/posting arguments have been reordered like\n  amountApplyValuation's.
  (Stephen Morgan)\n\n- Amount, AmountPrice, AmountStyle, DigitGroupStyle fields are
  now\n  strict. (Stephen Morgan)\n\n- Amount prices are now stored with their sign,
  so negative prices can\n  be represented. (They seem to have always worked, but
  now the\n  internal representation is more accurate.) (Stephen Morgan)\n \n- normaliseMixedAmount
  now combines Amounts with TotalPrices in the\n  same commodity. (Stephen Morgan)\n\n-
  normaliseMixedAmount now uses a strict Map for combining amounts\n  internally,
  closing a big space leak. (Stephen Morgan)\n\n- (multiply|divide)(Mixed)?Amount
  now also multiply or divide the\n  TotalPrice if it is present, and the old\n  (multiply|divide)(Mixed)?AmountAndPrice
  functions are removed. (Stephen Morgan)\n\n- (amount|mixedAmount)(Looks|Is)Zero
  functions now check whether both\n  the quantity and the cost are zero. This is
  usually what you want,\n  but if you do only want to check whether the quantity
  is zero, you\n  can run mixedAmountStripPrices (or similar) before this. (Stephen
  Morgan)\n\n- commodityStylesFromAmounts now consumes the list immediately,\n  reducing
  the maximum heap size per thread from ~850K to ~430K in a\n  real-world register
  report. (Stephen Morgan)\n\n- *ApplyValuation functions take two less arguments,
  and\n  *ApplyCostValuation functions have been added, performing both\n  costing
  and valuation. (Stephen Morgan)\n\n- traceAtWith now has a level argument and works
  properly.\n\n- API changes include:\n  ```\n  Hledger.Data.Amount:\n   setAmountPrecision
  -> amountSetPrecision\n   setFullPrecision -> amountSetFullPrecision\n   setMixedAmountPrecision
  -> mixedAmountSetPrecision\n   showMixed -> showMixedAmountB\n   showMixedLines
  -> showMixedAmountLinesB\n  -mixedAmountSetFullPrecision\n\n  Hledger.Data.Journal:\n
  \  mapJournalTransactions -> journalMapTransactions\n   mapJournalPostings -> journalMapPostings\n
  \ -mapTransactionPostings\n  +journalPayeesUsed\n  +journalPayeesDeclaredOrUsed\n\n
  \ Hledger.Data.Transaction:\n  +transactionFile\n  +transactionMapPostings\n\n  Hledger.Data.Valuation:\n
  \ -valuationTypeIsCost\n  -valuationTypeIsDefaultValue\n  -ValuationType's AtDefault
  constructor\n\n  Hledger.Query:\n  +matchesDescription\n  +matchesPayeeWIP\n\n  Hledger.Utils.Text:\n
  \ +textConcatBottomPadded\n  +wbToText\n  +wbUnpack\n\n  Text.Tabular.AsciiWide:\n
  \  alignCell -> textCell\n  ```\n# 1.20.4 2021-01-29\n\n- See hledger.\n\n# 1.20.3
  2021-01-14\n\n- See hledger.\n\n# 1.20.2 2020-12-28\n\n- Fix the info manuals' node
  structure.\n\n- Drop unused parsec dependency.\n\n# 1.20.1 2020-12-15\n\n- renamed:
  updateReportSpecFromOpts -> updateReportSpec[With]\n\n# 1.20 2020-12-05\n\n- added:
  journalApplyAliases, transactionApplyAliases, postingApplyAliases\n\n- a new more
  robust price lookup implementation, fgl library dropped (#1402)\n\n- Reverted a
  stripAnsi change in 1.19.1 that caused a 3x slowdown of amount rendering \n  in
  terminal reports. (#1350)\n\n- Amount and table rendering has been improved, so
  that stripAnsi is no longer needed.\n  This speeds up amount rendering in the terminal,
  speeding up some reports by 10% or more since 1.19.\n  (Stephen Morgan)\n\n- global
  commodity display styles can now be set in InputOpts or Journal,\n  overriding all
  others (declared or inferred). This is used by the import\n  command and probably
  command-line options in future.\n\n- Journal keeps a new piece of parsing state,
  a decimal mark character,\n  which can optionally be set to force the number format
  expected by all\n  amount parsers.\n\n- Remove Empty Query constructor, which does
  nothing and has done so for a very long time. (Stephen Morgan)\n\n- In ReportOpts,
  store query terms term-by-term in a list in querystring_. (Stephen Morgan)\n  This
  helps deal with tricky quoting issues, as we no longer have to make\n  sure everything
  is quoted properly before merging it into a string.\n\n- Implement concat(Top|Bottom)Padded
  in terms of renderRow, allowing them to be width aware. (Stephen Morgan)\n\n- Expand
  Tabular.AsciiWide to allow multiline, custom-width,\n  vertically/horizontally-aligned
  cells, and optional table borders.\n  (Stephen Morgan)\n\n- Introduce showMixed*Unnormalised,
  eliminate most direct calls of strWidth. (Stephen Morgan)\n\n- showMixedAmountElided
  now makes better use of space, showing as many\n  Amounts possible as long as they
  and the elision string fit within\n  32 characters. (Stephen Morgan)\n\n- Add Functor
  instance for CompoundPeriodicReport. (Stephen Morgan)\n\n- Generalise CBCSubreportSpec
  to allow more subreport control. (Stephen Morgan)\n\n- Export some MultiBalanceReport
  helper functions. (Stephen Morgan)\n\n- Make Default instances clearer, remove Default
  instance for Bool. (Stephen Morgan)\n\n- Many ReportOpts-related changes, such as
  the addition of ReportSpec, aimed\n  at preventing runtime errors (from parsing:
  regexps, dates, format strings;\n  from not having today's date set; etc.)\n  ReportSpec
  holds a ReportOpts, the day of the report, and the Query generated from these.\n\n-
  StringFormat now takes an optional overline width, which is\n  currently only used
  by defaultBalanceLineFormat. (Stephen Morgan)\n\n- quoteIfNeeded should not escape
  the backslashes in unicode code points. (Stephen Morgan)\n\n- Export OrdPlus and
  constructors. (Stephen Morgan)\n\n- Debug output now uses pretty-simple instead
  pretty-show.\n  This hopefully gives overall nicer debug output (eg in colour),
  \n  including for values which don't have Read-able Show output.\n  This means that
  we can start removing custom Show instances \n  that were a workaround for pretty-show.
  Eg account names\n  in debug output no longer show their colons as underscores.\n\n
  \ Here's some old pretty-show output:\n\n   CsvRules\n     { rdirectives = [ ( \"skip\"
  , \"1\" ) ]\n     , rcsvfieldindexes = [ ( \"date\" , 1 ) , ( \"amount\" , 2 ) ]\n
  \    , rassignments = [ ( \"amount\" , \"%2\" ) , ( \"date\" , \"%1\" ) ]\n     ,
  rconditionalblocks = []\n     }\n\n  And the new pretty-simple output:\n\n   CsvRules\n
  \    { rdirectives=\n       [ ( \"skip\", \"1\" ) ]\n     , rcsvfieldindexes=\n
  \      [ ( \"date\", 1 ), ( \"amount\", 2 ) ]\n     , rassignments=\n       [ (
  \"amount\", \"%2\" ), ( \"date\", \"%1\" ) ]\n     , rconditionalblocks= []\n     }\n\n
  \ We require pretty-simple 4.0.0.0 to get this compact output.\n  It's a little
  less compact than pretty-show, but not too bad.\n  Non-compact pretty-simple output
  would be:\n\n   CsvRules\n       { rdirectives=\n           [\n               (
  \"skip\"\n               , \"1B\"\n               )\n           ]\n       , rcsvfieldindexes=\n
  \          [\n               ( \"date\"\n               , 1\n               )\n
  \          ,\n               ( \"amount\"\n               , 2\n               )\n
  \          ]\n       , rassignments=\n           [\n               ( \"amount\"\n
  \              , \"%2\"\n               )\n           ,\n               ( \"date\"\n
  \              , \"%1\"\n               )\n           ]\n       , rconditionalblocks=[]\n
  \      }\n\n\n# 1.19.1 2020-09-07\n\n- Allow megaparsec 9\n\n- stripAnsi: correctly
  strip ansi sequences with no\n  numbers/semicolons. (Stephen Morgan)\n\n- Added
  case-insensitive accountNameToAccountRegexCI,\n  accountNameToAccountOnlyRegexCI,
  made the default account type\n  queries case insensitive again. (#1341)\n\n# 1.19
  2020-09-01\n\n- Added a missing lower bound for aeson, making cabal installs more\n
  \ reliable. (#1268)\n\n- The Regex type alias has been replaced by the Regexp ADT,
  which\n  contains both the compiled regular expression (so is guaranteed to\n  be
  usable at runtime) and the original string (so can be serialised,\n  printed, compared,
  etc.) A Regexp also knows whether is it case\n  sensitive or case insensitive. The
  Hledger.Utils.Regex API has\n  changed. (#1312, #1330).\n\n- Typeable and Data instances
  are no longer derived for hledger's\n  data types; they were redundant/no longer
  needed.\n\n- NFData instances are no longer derived for hledger's data types.\n
  \ This speeds up a full build by roughly 7%. But it means we can't\n  deep-evaluate
  hledger values, or time hledger code with Criterion.\n  https://github.com/simonmichael/hledger/pull/1330#issuecomment-684075129\n
  \ has some ideas on this.\n\n- Query no longer has a custom Show instance\n\n- Hledger.Utils.String:
  quoteIfNeeded now actually escapes quotes in\n  strings. escapeQuotes was dropped.
  (Stephen Morgan)\n\n- Hledger.Utils.Tree: dropped some old utilities\n\n- Some fromIntegral
  calls have been replaced with safer code, removing\n  some potential for integer
  wrapping bugs (#1325, #1326)\n\n- Parsing numbers with more than 255 decimal places
  now gives an error\n  instead of silently misparsing (#1326)\n\n- Digit groups are
  now limited to at most 255 digits each. (#1326)\n\n- Exponents are parsed as Integer
  rather than Int.\n  This means exponents greater than 9223372036854775807 or less
  than\n  -9223372036854775808 are now parsed correctly, in theory. (In\n  practice,
  very large exponents will cause hledger to eat all your\n  memory, so avoid them
  for now.) (#1326)\n\n- AmountStyle's asprecision is now a sum type with Word8, instead
  of\n  an Int with magic values.\n\n- DigitGroupStyle uses Word8 instead of Int.\n\n-
  Partial helper function parsedate has been dropped, use fromGregorian instead.\n\n-
  Partial helper function mkdatespan has been dropped.\n\n- Helper function transaction
  now takes a Day instead of a date string. (Stephen Morgan)\n\n- Old CPP directives
  made redundant by version bounds have been\n  removed. (Stephen Morgan)\n\n- Smart
  dates are now represented by the SmartDate type, and are\n  always well formed.
  (Stephen Morgan)\n\n- accountTransactionsReport (used for hledger aregister and\n
  \ hledger-ui/hledger-web registers) now filters transactions more\n  thoroughly,
  so eg transactions dated outside the report period will\n  not be shown. Previously
  the transaction would be shown if it had\n  any posting dated inside the report
  period. Possibly some other\n  filter criteria now get applied that didn't before.
  I think on\n  balance this will give slightly preferable results.\n\n- The old BalanceReport
  code has been dropped at last, replaced by\n  MultiBalanceReport so that all balance
  reports now use the same\n  code. (Stephen Morgan, #1256).\n\n  - The large multiBalanceReport
  function has been split up and refactored\n    extensively.\n  - Tabular data formerly
  represented as [[MixedAmount]] is now HashMap\n    AccountName (Map DateSpan Account).
  Reports with many columns are now faster.\n  - Calculating starting balances no
  longer calls the whole balanceReport,\n    just the first few functions.\n  - displayedAccounts
  is completely rewritten. Perhaps one subtle thing to\n    note is that in tree mode
  it no longer excludes nodes with zero inclusive\n    balance unless they also have
  zero exclusive balance.\n  - Simon's note: \"I'll mark the passing of the old multiBalanceReport,
  into\n    which I poured many an hour :). It is in a way the heart (brain ?) of\n
  \   hledger - the key feature of ledgerlikes (balance report) and a key\n    improvement
  introduced by hledger (tabular multiperiod balance reports)\n    ...\n    Thanks
  @Xitian9, great work.\"\n\n# 1.18.1 2020-06-21\n\n- fix some doc typos (Martin Michlmayr)\n\n#
  1.18 2020-06-07\n\n- added: getHledgerCliOpts', takes an explicit argument list\n\n-
  added: toJsonText\n\n- changed: isNegativeMixedAmount now gives an answer for\n
  \ multi-commodity amounts which are all negative\n\n- changed: multiBalanceReport
  now gets the query from ReportOpts (Dmitry Astapov)\n\n- renamed:\n  isZeroAmount
  \               -> amountLooksZero\n  isReallyZeroAmount          -> amountIsZero\n
  \ isZeroMixedAmount           -> mixedAmountLooksZero\n  isReallyZeroMixedAmount
  \    -> mixedAmountIsZero\n  isReallyZeroMixedAmountCost dropped\n\n- renamed: finaliseJournal
  -> journalFinalise\n\n- renamed: fixedlotpricep -> lotpricep, now also parses non-fixed
  lot prices\n\n- dropped: transactionPostingBalances\n\n- dropped: outputflags no
  longer exported by Hledger.Cli.CliOptions\n\n- fixed: documentation for journalExpenseAccountQuery
  (Pavan Rikhi)\n\n# 1.17.1 2020-03-19\n\n- require newer Decimal, math-functions
  libs to ensure consistent\n  rounding behaviour, even when built with old GHCs/snapshots.
  \n  hledger uses banker's rounding (rounds to nearest even number, eg\n  0.5 displayed
  with zero decimal places is \"0\").\n\n- added: debug helpers traceAt, traceAtWith\n\n-
  Journal is now a Semigroup, not a Monoid (since <> is right-biased). (Stephen Morgan)\n\n#
  1.17.0.1 2020-03-01\n\n- fix org heading comments and doctest setup comment that
  were\n  breaking haddock (and in some cases, installation)\n\n# 1.17 2020-03-01\n\n-
  Reader-finding utilities have moved from Hledger.Read to\n  Hledger.Read.JournalReader
  so the include directive can use them.\n\n- Reader changes:\n  - rExperimental flag
  removed\n  - old rParser renamed to rReadFn\n  - new rParser field provides the
  actual parser.\n    This seems to require making Reader a higher-kinded type, unfortunately.\n\n-
  Hledger.Tabular.AsciiWide now renders smoother outer borders in\n  pretty (unicode)
  mode.\n  Also, a fix for table edges always using single-width intersections\n  and
  support for double horizontal lines with single vertical lines. (Eric Mertens)\n\n-
  Hledger.Utils.Parse: restofline can go to eof also\n\n- Hledger.Read cleanup\n\n-
  Hledger.Read.CsvReader cleanup\n  Exports added: CsvRecord, CsvValue, csvFileFor.\n
  \ Exports removed: expandIncludes, parseAndValidateCsvRules, transactionFromCsvRecord\n\n-
  more cleanup of amount canonicalisation helpers (#1187)\n  Stop exporting journalAmounts,
  overJournalAmounts, traverseJournalAmounts.\n  Rename journalAmounts helper to journalStyleInfluencingAmounts.\n\n-
  export mapMixedAmount\n\n- Don't store leaf name in PeriodReport. (Stephen Morgan)\n
  \ Calculate at the point of consumption instead.\n\n- Generalise PeriodicReport
  to be polymorphic in the account labels. (Stephen Morgan)\n\n- Use records instead
  of tuples in PeriodicReport. (Stephen Morgan)\n\n- Use PeriodicReport in place of
  MultiBalanceReport. (Stephen Morgan)\n\n- Calculate MultiReportBalance columns more
  efficiently. (Stephen Morgan)\n  Only calculate posting date once for each posting,
  and calculate their\n  columns instead of checking each DateSpan separately.\n\n-
  Moved JSON instances from hledger-web to hledger-lib (Hledger.Data.Json),\n  and
  added ToJSON instances for all (?) remaining data types, up to Ledger.\n\n- Dropped
  nullassertion's \"assertion\" alias, fixing a warning.\n  Perhaps we'll stick with
  the null* naming convention. \n\n\n# 1.16.2 2020-01-14\n\n- add support for megaparsec
  8 (#1175)\n\n# 1.16.1 2019-12-03\n\n- Drop unnecessary mtl-compat dependency\n\n-
  Fix building with GHC 8.0, 8.2\n\n# 1.16 2019-12-01\n\n- drop support for GHC 7.10,
  due to MonadFail hassles in JournalReader.hs\n\n- add support for GHC 8.8, base-compat
  0.11 (#1090)\n\n  We are now using the new fail from the MonadFail class, which
  we\n  always import qualified as Fail.fail, from base-compat-batteries\n  Control.Monad.Fail.Compat
  to work with old GHC versions. If old fail\n  is needed (shouldn't be) it should
  be imported qualified as\n  Prelude.Fail, using imports such as:\n\n      import
  Prelude hiding (fail)\n      import qualified Prelude (fail)\n      import Control.Monad.State.Strict
  hiding (fail)\n      import \"base-compat-batteries\" Prelude.Compat hiding (fail)\n
  \     import qualified \"base-compat-batteries\" Control.Monad.Fail.Compat as Fail\n\n-
  hledger and hledger-lib unit tests have been ported to tasty.\n\n- The doctest suite
  has been disabled for now since it doesn't run\n  well with cabal (#1139)\n  \n#
  1.15.2 2019-09-05\n\nChanges:\n\n- postingApplyValuation, mixedAmountApplyValuation,
  amountApplyValuation\n  take an argument, the report end date if one was specified.\n\n#
  1.15.1 2019-09-02\n\n- fix failing doctests\n\n# 1.15 2019-09-01\n\nRemovals include:\n\n-
  journalPrices\n- BalanceHistoryReport\n- postingValueAtDate\n\nAdditions include:\n\n-
  MarketPrice (more pure form of PriceDirective without the amount style information)\n-
  PriceOracle (efficient lookup of exchange rates)\n- ValuationType (ways to convert
  amount value)\n- aliasnamep (export)\n- setNaturalPrecisionUpTo\n- dbgNWith, ptraceAtWith\n-
  postingTransformAmount, postingToCost, postingValue\n- amountToCost, mixedAmountToCost\n-
  valueTypeFromOpts\n- mapJournalTransactions, mapJournalPostings, mapTransactionPostings\n-
  journalStartDate, journalEndDate\n- journalPriceOracle\n- marketPriceReverse\n-
  priceDirectiveToMarketPrice\n- mixedAmountApplyValuation\n- mixedAmountValueAtDate\n\nChanges
  include:\n\n- Price -> AmountPrice,  AKA \"transaction price\"\n- old MarketPrice
  -> PriceDirective\n- TransactionsReport/AccountTransactionsReport split into separate
  files\n- journalTransactionsReport -> transactionsReport\n- accountTransactionsReportItems:
  rewrite using catMaybes and mapAccumL (Henning Thielemann)\n- optionally save the
  current date in ReportOpts\n- Hledger.Cli tests now have correct prefix; add Cli.Utils
  tests\n- MultiBalanceReport now returns zero for row totals when in cumulative or
  historical mode (#329)\n\n\n# 1.14.1 2019-03-20\n\n- require easytest <0.3 to fix
  build issue\n\n# 1.14 2019-03-01\n\n- added:  \n  transaction, [v]post*, balassert*
  constructors, for tests etc.  \n\n- renamed:  \n  porigin -> poriginal  \n\n- refactored:
  \ \n  transaction balancing & balance assertion checking (#438)\n\n# 1.13.1 (2019/02/02)\n\n-
  stop depending on here to avoid haskell-src-meta/stackage blockage.\n\n# 1.13 (2019/02/01)\n\n-
  in Journal's jtxns field, forecasted txns are appended rather than prepended\n\n-
  API changes:\n\n  added:\n  +setFullPrecision\n  +setMinimalPrecision\n  +expectParseStateOn\n
  \ +embedFileRelative\n  +hereFileRelative\n\n  changed:\n  - amultiplier -> aismultiplier\n
  \ - Amount fields reordered for clearer debug output\n  - tpreceding_comment_lines
  -> tprecedingcomment, reordered\n  - Hledger.Data.TransactionModifier.transactionModifierToFunction
  -> modifyTransactions\n  - Hledger.Read.Common.applyTransactionModifiers -> Hledger.Data.Journal.journalModifyTransactions\n\n
  \ - HelpTemplate -> CommandDoc\n\n\n# 1.12 (2018/12/02)\n\n-   switch to megaparsec
  7 (Alex Chen)\n    We now track the stack of include files in Journal ourselves,
  since\n    megaparsec dropped this feature.\n\n-   add 'ExceptT' layer to our parser
  monad again (Alex Chen)\n    We previously had a parser type, 'type ErroringJournalParser
  = ExceptT\n    String ...' for throwing parse errors without allowing further\n
  \   backtracking. This parser type was removed under the assumption that it\n    would
  be possible to write our parser without this capability. However,\n    after a hairy
  backtracking bug, we would now prefer to have the option to\n    prevent backtracking.\n\n
  \   -   Define a 'FinalParseError' type specifically for the 'ExceptT' layer\n    -
  \  Any parse error can be raised as a \"final\" parse error\n    -   Tracks the
  stack of include files for parser errors, anticipating the\n        removal of the
  tracking of stacks of include files in megaparsec 7\n        -   Although a stack
  of include files is also tracked in the 'StateT\n            Journal' layer of the
  parser, it seems easier to guarantee correct\n            error messages in the
  'ExceptT FinalParserError' layer\n        -   This does not make the 'StateT Journal'
  stack redundant because the\n            'ExceptT FinalParseError' stack cannot
  be used to detect cycles of\n            include files\n\n-   more support for location-aware
  parse errors when re-parsing (Alex Chen)\n\n-   make 'includedirectivep' an 'ErroringJournalParser'
  (Alex Chen)\n\n-   drop Ord instance breaking GHC 8.6 build (Peter Simons)\n\n-
  \  flip the arguments of (divide\\|multiply)\\[Mixed\\]Amount\n\n-   showTransaction:
  fix a case showing multiple missing amounts\n    showTransaction could sometimes
  hide the last posting's amount even if\n    one of the other posting amounts was
  already implicit, producing invalid\n    transaction output.\n\n-   plog, plogAt:
  add missing newline\n\n-   split up journalFinalise, reorder journal finalisation
  steps (#893) (Jesse Rosenthal)\n    The `journalFinalise` function has been split
  up, allowing more granular\n    control.\n\n-   journalSetTime --> journalSetLastReadTime\n\n-
  \  journalSetFilePath has been removed, use journalAddFile instead\n\n# 1.11.1 (2018/10/06)\n\n-
  \  add, lib: fix wrong transaction rendering in balance assertion errors\n    and
  when using the add command\n\n# 1.11 (2018/9/30)\n\n-   compilation now works when
  locale is unset (#849)\n\n-   all unit tests have been converted from HUnit+test-framework
  to easytest\n\n-   doctests now run quicker by default, by skipping reloading between
  tests.\n    This can be disabled by passing --slow to the doctests test suite\n
  \   executable.\n\n-   doctests test suite executable now supports --verbose, which
  shows\n    progress output as tests are run if doctest 0.16.0+ is installed\n    (and
  hopefully is harmless otherwise).\n\n-   doctests now support file pattern arguments,
  provide more informative output.\n    Limiting to just the file(s) you're interested
  can make doctest start\n    much quicker. With one big caveat: you can limit the
  starting files,\n    but it always imports and tests all other local files those
  import.\n\n-   a bunch of custom Show instances have been replaced with defaults,\n
  \   for easier troubleshooting. These were sometimes obscuring\n    important details,
  eg in test failure output. Our new policy is:\n    stick with default derived Show
  instances as far as possible, but\n    when necessary adjust them to valid haskell
  syntax so pretty-show\n    can pretty-print them (eg when they contain Day values,
  cf\n    https://github.com/haskell/time/issues/101). By convention, when\n    fields
  are shown in less than full detail, and/or in double-quoted\n    pseudo syntax,
  we show a double period (..) in the output.\n\n-   Amount has a new Show instance.
  Amount's show instance hid\n    important details by default, and showing more details
  required\n    increasing the debug level, which was inconvenient. Now it has a\n
  \   single show instance which shows more information, is fairly\n    compact, and
  is pretty-printable.\n\n        ghci> usd 1\n        OLD:\n        Amount {acommodity=\"$\",
  aquantity=1.00, ..}\n        NEW:\n        Amount {acommodity = \"$\", aquantity
  = 1.00, aprice = NoPrice, astyle = AmountStyle \"L False 2 Just '.' Nothing..\",
  amultiplier = False}\n\n    MixedAmount's show instance is unchanged, but showMixedAmountDebug\n
  \   is affected by this change:\n\n        ghci> putStrLn $ showMixedAmountDebug
  $ Mixed [usd 1]\n        OLD:\n        Mixed [Amount {acommodity=\"$\", aquantity=1.00,
  aprice=, astyle=AmountStyle {ascommodityside = L, ascommodityspaced = False, asprecision
  = 2, asdecimalpoint = Just '.', asdigitgroups = Nothing}}]\n        NEW:\n        Mixed
  [Amount {acommodity=\"$\", aquantity=1.00, aprice=, astyle=AmountStyle \"L False
  2 Just '.' Nothing..\"}]\n\n-   Same-line & next-line comments of transactions,
  postings, etc.\n    are now parsed a bit more precisely (followingcommentp).\n    Previously,
  parsing no comment gave the same result as an empty\n    comment (a single newline);
  now it gives an empty string.\\\n    Also, and perhaps as a consequence of the above,
  when there's no\n    same-line comment but there is a next-line comment, we'll insert
  an\n    empty first line, since otherwise next-line comments would get moved\n    up
  to the same line when rendered.\n\n-   Hledger.Utils.Test exports HasCallStack\n\n-
  \  queryDateSpan, queryDateSpan' now intersect date AND'ed date spans\n    instead
  of unioning them, and docs are clearer.\n\n-   pushAccount -> pushDeclaredAccount\n\n-
  \  jaccounts -> jdeclaredaccounts\n\n-   AutoTransaction.hs -> PeriodicTransaction.hs
  & TransactionModifier.hs\n\n-   Hledger.Utils.Debug helpers have been renamed/cleaned
  up\n\n# 1.10 (2018/6/30)\n\n-   build cleanly with all supported GHC versions again
  (7.10 to 8.4)\n\n-   support/use latest base-compat (#794)\n\n-   support/require
  megaparsec 6.4+\n\n-   extensive refactoring and cleanup of parsers and related
  types and utilities\n\n-   readJournalFile(s) cleanup, these now use InputOpts\n\n-
  \  doctests now run a bit faster (#802)\n\n# 1.9.1 (2018/4/30)\n\n-   new generic
  PeriodicReport, and some report-related type aliases\n\n-   new BudgetReport\n\n-
  \  make (readJournal\\|tryReader)s?WithOpts the default api, dropping \"WithOpts\"\n\n-
  \  automated postings and command line account aliases happen earlier\n    in journal
  processing (see hledger changelog)\n\n# 1.9 (2018/3/31)\n\n-   support ghc 8.4,
  latest deps\n\n-   when the system text encoding is UTF-8, ignore any UTF-8 BOM
  prefix\n    found when reading files.\n\n-   CompoundBalanceReport amounts are now
  normally positive.\n    The bs/bse/cf/is commands now show normal income, liability
  and equity\n    balances as positive. Negative numbers now indicate a contra-balance\n
  \   (eg an overdrawn checking account), a net loss, a negative net worth,\n    etc.
  This makes these reports more like conventional financial\n    statements, and easier
  to read and share with others. (experimental)\n\n-   splitSpan now returns no spans
  for an empty datespan\n\n-   don't count periodic/modifier txns in Journal debug
  output\n\n-   lib/ui/web/api: move embedded manual files to extra-source-files\n\n-
  \  Use skipMany/skipSome for parsing spacenonewline (Moritz Kiefer)\n    This avoids
  allocating the list of space characters only to then\n    discard it.\n\n-   rename,
  clarify purpose of balanceReportFromMultiBalanceReport\n\n-   fix some hlint warnings\n\n-
  \  add some easytest tests\n\n# 1.5 (2017/12/31)\n\n-   -V/--value uses today's
  market prices by default, not those of last transaction date. #683, #648)\n\n-   csv:
  allow balance assignment (balance assertion only, no amount) in csv records (Nadrieril)\n\n-
  \  journal: allow space as digit group separator character, #330 (Mykola Orliuk)\n\n-
  \  journal: balance assertion errors now show line of failed assertion posting,
  #481 (Sam Jeeves)\n\n-   journal: better errors for directives, #402 (Mykola Orliuk)\n\n-
  \  journal: better errors for included files, #660 (Mykola Orliuk)\n\n-   journal:
  commodity directives in parent files are inherited by included files, #487 (Mykola
  Orliuk)\n\n-   journal: commodity directives limits precision even after -B, #509
  (Mykola Orliuk)\n\n-   journal: decimal point/digit group separator chars are now
  inferred from an applicable commodity directive or default commodity directive.
  #399, #487 (Mykola Orliuk)\n\n-   journal: numbers are parsed more strictly (Mykola
  Orliuk)\n\n-   journal: support Ledger-style automated postings, enabled with --auto
  flag (Dmitry Astapov)\n\n-   journal: support Ledger-style periodic transactions,
  enabled with --forecast flag (Dmitry Astapov)\n\n-   period expressions: fix \"nth
  day of {week,month}\", which could generate wrong intervals (Dmitry Astapov)\n\n-
  \  period expressions: month names are now case-insensitive (Dmitry Astapov)\n\n-
  \  period expressions: stricter checking for invalid expressions (Mykola Orliuk)\n\n-
  \  period expressions: support \"every 11th Nov\" (Dmitry Astapov)\n\n-   period
  expressions: support \"every 2nd Thursday of month\" (Dmitry Astapov)\n\n-   period
  expressions: support \"every Tuesday\", short for \"every <n>th day of week\" (Dmitry
  Astapov)\n\n-   remove upper bounds on all but hledger* and base (experimental)\n
  \   It's rare that my deps break their api or that newer versions must\n    be avoided,
  and very common that they release new versions which I\n    must tediously and promptly
  test and release hackage revisions for\n    or risk falling out of stackage. Trying
  it this way for a bit.\n\n# 1.4 (2017/9/30)\n\n-   add readJournalFile\\[s\\]WithOpts,
  with simpler arguments and support\n    for detecting new transactions since the
  last read.\n\n-   query: add payee: and note: query terms, improve description/payee/note
  docs (Jakub Zárybnický, Simon Michael, #598, #608)\n\n-   journal, cli: make trailing
  whitespace significant in regex account aliases\n    Trailing whitespace in the
  replacement part of a regular expression\n    account alias is now significant.
  Eg, converting a parent account to\n    just an account name prefix: --alias '/:acct:/=:acct'\n\n-
  \  timedot: allow a quantity of seconds, minutes, days, weeks, months\n    or years
  to be logged as Ns, Nm, Nd, Nw, Nmo, Ny\n\n-   csv: switch the order of generated
  postings, so account1 is first.\n    This simplifies things and facilitates future
  improvements.\n\n-   csv: show the \"creating/using rules file\" message only with
  --debug\n\n-   csv: fix multiple includes in one rules file\n\n-   csv: add \"newest-first\"
  rule for more robust same-day ordering\n\n-   deps: allow ansi-terminal 0.7\n\n-
  \  deps: add missing parsec lower bound, possibly related to #596, fpco/stackage#2835\n\n-
  \  deps: drop oldtime flag, require time 1.5+\n\n-   deps: remove ghc < 7.6 support,
  remove obsolete CPP conditionals\n\n-   deps: fix test suite with ghc 8.2\n\n# 1.3.1
  (2017/8/25)\n\n-   Fix a bug with -H showing nothing for empty periods (#583, Nicholas
  Niro)\n    This patch fixes a bug that happened when using the -H option on\n    a
  period without any transaction. Previously, the behavior was no\n    output at all
  even though it should have shown the previous ending balances\n    of past transactions.
  (This is similar to previously using -H with -E,\n    but with the extra advantage
  of not showing empty accounts)\n\n-   allow megaparsec 6 (#594)\n\n-   allow megaparsec-6.1
  (Hans-Peter Deifel)\n\n-   fix test suite with Cabal 2 (#596)\n\n# 1.3 (2017/6/30)\n\njournal:
  The \"uncleared\" transaction/posting status, and associated UI flags\nand keys,
  have been renamed to \"unmarked\" to remove ambiguity and\nconfusion. This means
  that we have dropped the `--uncleared` flag,\nand our `-U` flag now matches only
  unmarked things and not pending\nones. See the issue and linked mail list discussion
  for more\nbackground. (#564)\n\ncsv: assigning to the \"balance\" field name creates
  balance\nassertions (#537, Dmitry Astapov).\n\ncsv: Doubled minus signs are handled
  more robustly (fixes #524, Nicolas Wavrant, Simon Michael)\n\nMultiple \"status:\"
  query terms are now OR'd together. (#564)\n\ndeps: allow megaparsec 5.3.\n\n# 1.2
  (2017/3/31)\n\n## journal format\n\nA pipe character can optionally be used to delimit
  payee names in\ntransaction descriptions, for more accurate querying and pivoting
  by\npayee. Eg, for a description like `payee name | additional notes`,\nthe two
  parts will be accessible as pseudo-fields/tags named `payee`\nand `note`.\n\nSome
  journal parse errors now show the range of lines involved, not just the first.\n\n##
  ledger format\n\nThe experimental `ledger:` reader based on the WIP ledger4 project
  has\nbeen disabled, reducing build dependencies.\n\n## Misc\n\nFix a bug when tying
  the knot between postings and their parent transaction, reducing memory usage by
  about 10% (#483) (Mykola Orliuk)\n\nFix a few spaceleaks (#413) (Moritz Kiefer)\n\nAdd
  Ledger.Parse.Text to package.yaml, fixing a potential build failure.\n\nAllow megaparsec
  5.2 (#503)\n\nRename optserror -> usageError, consolidate with other error functions\n\n#
  1.1 (2016/12/31)\n\n## journal format\n\n-   balance assignments are now supported
  (#438, #129, #157, #288)\n\n    This feature also brings a slight performance drop
  (\\~5%);\n    optimisations welcome.\n\n-   also recognise `*.hledger` files as
  hledger journal format\n\n## ledger format\n\n-   use ledger-parse from the ledger4
  project as an alternate reader for C++ Ledger journals\n\n    The idea is that some
  day we might get better compatibility with Ledger files this way.\n    Right now
  this reader is not very useful and will be used only if you explicitly select it
  with a `ledger:` prefix.\n    It parses transaction dates, descriptions, accounts
  and amounts, and ignores everything else.\n    Amount parsing is delegated to hledger's
  journal parser, and malformed amounts might be silently ignored.\n\n    This adds
  at least some of the following as new dependencies for hledger-lib:\n    parsers,
  parsec, attoparsec, trifecta.\n\n## misc\n\n-   update base lower bound to enforce
  GHC 7.10+\n\n    hledger-lib had a valid install plan with GHC 7.8, but currently
  requires GHC 7.10 to compile.\n    Now we require base 4.8+ everywhere to ensure
  the right GHC version at the start.\n\n-   Hledger.Read api cleanups\n\n-   rename
  dbgIO to dbg0IO, consistent with dbg0, and document a bug in dbg*IO\n\n-   make
  readJournalFiles \\[f\\] equivalent to readJournalFile f (#437)\n\n-   more general
  parser types enabling reuse outside of IO (#439)\n\n# 1.0.1 (2016/10/27)\n\n-   allow
  megaparsec 5.0 or 5.1\n\n# 1.0 (2016/10/26)\n\n## timedot format\n\n-   new \"timedot\"
  format for retroactive/approximate time logging.\n\n    Timedot is a plain text
  format for logging dated, categorised\n    quantities (eg time), supported by hledger.
  It is convenient\n    for approximate and retroactive time logging, eg when the\n
  \   real-time clock-in/out required with a timeclock file is too\n    precise or
  too interruptive. It can be formatted like a bar\n    chart, making clear at a glance
  where time was spent.\n\n## timeclock format\n\n-   renamed \"timelog\" format to
  \"timeclock\", matching the emacs package\n\n-   sessions can no longer span file
  boundaries (unclocked-out\n\n    sessions will be auto-closed at the end of the
  file).\n\n-   transaction ids now count up rather than down (#394)\n\n-   timeclock
  files no longer support default year directives\n\n-   removed old code for appending
  timeclock transactions to journal transactions.\n\n    A holdover from the days
  when both were allowed in one file.\n\n## csv format\n\n-   fix empty field assignment
  parsing, rule parse errors after megaparsec port (#407) (Hans-Peter Deifel)\n\n##
  journal format\n\n-   journal files can now include timeclock or timedot files (#320)\n\n
  \   (but not yet CSV files).\n\n-   fixed an issue with ordering of same-date transactions
  included from other files\n\n-   the \"commodity\" directive and \"format\" subdirective
  are now supported, allowing\n\n    full control of commodity style (#295) The commodity
  directive's\n    format subdirective can now be used to override the inferred\n
  \   style for a commodity, eg to increase or decrease the\n    precision. This is
  at least a good workaround for #295.\n\n-   Ledger-style \"apply account\"/\"end
  apply account\" directives are now used to set a default parent account.\n\n-   the
  Ledger-style \"account\" directive is now accepted (and ignored).\n\n-   bracketed
  posting dates are more robust (#304)\n\n    Bracketed posting dates were fragile;
  they worked only if you\n    wrote full 10-character dates. Also some semantics
  were a bit\n    unclear. Now they should be robust, and have been documented\n    more
  clearly. This is a legacy undocumented Ledger syntax, but\n    it improves compatibility
  and might be preferable to the more\n    verbose \"date:\" tags if you write posting
  dates often (as I do).\n    Internally, bracketed posting dates are no longer considered
  to\n    be tags. Journal comment, tag, and posting date parsers have\n    been reworked,
  all with doctests.\n\n-   balance assertion failure messages are clearer\n\n-   with
  --debug=2, more detail about balance assertions is shown.\n\n## misc\n\n-   file
  parsers have been ported from Parsec to Megaparsec \\o/ (#289, #366) (Alexey Shmalko,
  Moritz Kiefer)\n\n-   most hledger types have been converted from String to Text,
  reducing memory usage by 30%+ on large files\n\n-   file parsers have been simplified
  for easier troubleshooting (#275).\n\n    The journal/timeclock/timedot parsers,
  instead of constructing\n    opaque journal update functions which are later applied
  to build\n    the journal, now construct the journal directly by modifying the\n
  \   parser state. This is easier to understand and debug. It also\n    rules out
  the possibility of journal updates being a space\n    leak. (They weren't, in fact
  this change increased memory usage\n    slightly, but that has been addressed in
  other ways). The\n    ParsedJournal type alias has been added to distinguish\n    \"being-parsed\"
  journals and \"finalised\" journals.\n\n-   file format detection is more robust.\n\n
  \   The Journal, Timelog and Timedot readers' detectors now check\n    each line
  in the sample data, not just the first one. I think the\n    sample data is only
  about 30 chars right now, but even so this\n    fixed a format detection issue I
  was seeing.\n    Also, we now always try parsing stdin as journal format (not just
  sometimes).\n\n-   all file formats now produce transaction ids, not just journal
  (#394)\n\n-   git clone of the hledger repo on windows now works (#345)\n\n-   added
  missing benchmark file (#342)\n\n-   our stack.yaml files are more compatible across
  stack versions (#300)\n\n-   use newer file-embed to fix ghci working directory
  dependence (<https://github.com/snoyberg/file-embed/issues/18>)\n\n-   report more
  accurate dates in account transaction report when postings have their own dates\n\n
  \   (affects hledger-ui and hledger-web registers).\n    The newly-named \"transaction
  register date\" is the date to be\n    displayed for that transaction in a transaction
  register, for\n    some current account and filter query. It is either the\n    transaction
  date from the journal (\"transaction general date\"),\n    or if postings to the
  current account and matched by the\n    register's filter query have their own dates,
  the earliest of\n    those posting dates.\n\n-   simplify account transactions report's
  running total.\n\n    The account transactions report used for hledger-ui and -web\n
  \   registers now gives either the \"period total\" or \"historical\n    total\",
  depending strictly on the --historical flag. It doesn't\n    try to indicate whether
  the historical total is the accurate\n    historical balance (which depends on the
  user's report query).\n\n-   reloading a file now preserves the effect of options,
  query arguments etc.\n\n-   reloading a journal should now reload all included files
  as well.\n\n-   the Hledger.Read.* modules have been reorganised for better reuse.\n\n
  \   Hledger.Read.Utils has been renamed Hledger.Read.Common\n    and holds low-level
  parsers & utilities; high-level read\n    utilities are now in Hledger.Read.\n\n-
  \  clarify amount display style canonicalisation code and terminology a bit.\n\n
  \   Individual amounts still have styles; from these we derive\n    the standard
  \"commodity styles\". In user docs, we might call\n    these \"commodity formats\"
  since they can be controlled by the\n    \"format\" subdirective in journal files.\n\n-
  \  Journal is now a monoid\n\n-   expandPath now throws a proper IO error\n\n-   more
  unit tests, start using doctest\n\n0.27 (2015/10/30)\n\n-   The main hledger types
  now derive NFData, which makes it easier to\n    time things with criterion.\n\n-
  \  Utils has been split up more.\n\n-   Utils.Regex: regular expression compilation
  has been memoized, and\n    memoizing versions of regexReplace\\[CI\\] have been
  added, since\n    compiling regular expressions every time seems to be quite\n    expensive
  (#244).\n\n-   Utils.String: strWidth is now aware of multi-line strings (#242).\n\n-
  \  Read: parsers now use a consistent p suffix.\n\n-   New dependencies: deepseq,
  uglymemo.\n\n-   All the hledger packages' cabal files are now generated from\n
  \   simpler, less redundant yaml files by hpack, in principle. In\n    practice,
  manual fixups are still needed until hpack gets better,\n    but it's still a win.\n\n0.26
  (2015/7/12)\n\n-   allow year parser to handle arbitrarily large years\n-   Journal's
  Show instance reported one too many accounts\n-   some cleanup of debug trace helpers\n-
  \  tighten up some date and account name parsers (don't accept leading spaces; hadddocks)\n-
  \  drop regexpr dependency\n\n0.25.1 (2015/4/29)\n\n-   support/require base-compat
  >0.8 (#245)\n\n0.25 (2015/4/7)\n\n-   GHC 7.10 compatibility (#239)\n\n0.24.1 (2015/3/15)\n\n-
  \  fix JournalReader \"ctx\" compilation warning\n-   add some type signatures in
  Utils to help make ghci-web\n\n0.24 (2014/12/25)\n\n-   fix combineJournalUpdates
  folding order\n-   fix a regexReplaceCI bug\n-   fix a splitAtElement bug with adjacent
  separators\n-   mostly replace slow regexpr with regex-tdfa (fixes #189)\n-   use
  the modern Text.Parsec API\n-   allow transformers 0.4*\n-   regexReplace now supports
  backreferences\n-   Transactions now remember their parse location in the journal
  file\n-   export Regexp types, disambiguate CsvReader's similarly-named type\n-
  \  export failIfInvalidMonth/Day (fixes #216)\n-   track the commodity of zero amounts
  when possible\n    (useful eg for hledger-web's multi-commodity charts)\n-   show
  posting dates in debug output\n-   more debug helpers\n\n0.23.3 (2014/9/12)\n\n-
  \  allow transformers 0.4*\n\n0.23.2 (2014/5/8)\n\n-   postingsReport: also fix
  date sorting of displayed postings (#184)\n\n0.23.1 (2014/5/7)\n\n-   postingsReport:
  with disordered journal entries, postings before the\n    report start date could
  get wrongly included. (#184)\n\n0.23 (2014/5/1)\n\n-   orDatesFrom -> spanDefaultsFrom\n\n0.22.2
  (2014/4/16)\n\n-   display years before 1000 with four digits, not three\n-   avoid
  pretty-show to build with GHC < 7.4\n-   allow text 1.1, drop data-pprint to build
  with GHC 7.8.x\n\n0.22.1 (2014/1/6) and older: see http://hledger.org/release-notes
  or doc/CHANGES.md.\n"
basic-deps:
  microlens-th: '>=0.4'
  bytestring: -any
  doclayout: ==0.3.*
  extra: '>=1.6.3'
  base: '>=4.11 && <4.17'
  time: '>=1.5'
  blaze-markup: '>=0.5.1'
  parser-combinators: '>=0.4.0'
  aeson-pretty: -any
  unordered-containers: '>=0.2'
  text: '>=1.2'
  megaparsec: '>=7.0.0 && <9.3'
  filepath: -any
  data-default: '>=0.5'
  array: -any
  containers: '>=0.5.9'
  ansi-terminal: '>=0.9'
  cassava: -any
  utf8-string: '>=0.3.5'
  hashtables: '>=1.2.3.1'
  regex-tdfa: -any
  mtl: '>=2.2.1'
  cmdargs: '>=0.10'
  uglymemo: -any
  pretty-simple: '>4 && <5'
  tabular: '>=0.2'
  tasty-hunit: '>=0.10.0.2'
  timeit: -any
  file-embed: '>=0.0.10'
  transformers: '>=0.2'
  tasty: '>=1.2.3'
  Decimal: '>=0.5.1'
  microlens: '>=0.4'
  Glob: '>=0.9'
  aeson: '>=1'
  template-haskell: -any
  call-stack: -any
  safe: '>=0.3.18'
  cassava-megaparsec: -any
  directory: -any
all-versions:
- '0.9'
- '0.10'
- '0.11'
- 0.11.1
- '0.12'
- 0.12.1
- '0.13'
- '0.14'
- '0.15'
- 0.15.2
- '0.16'
- 0.16.1
- '0.17'
- '0.18'
- 0.18.1
- 0.18.2
- '0.19'
- 0.19.1
- 0.19.3
- '0.20'
- 0.20.0.1
- '0.21'
- 0.21.1
- 0.21.2
- 0.21.3
- '0.22'
- 0.22.1
- 0.22.2
- '0.23'
- 0.23.1
- 0.23.2
- 0.23.3
- '0.24'
- 0.24.1
- '0.25'
- 0.25.1
- '0.26'
- '0.27'
- 0.27.1
- '1.0'
- 1.0.1
- '1.1'
- '1.2'
- '1.3'
- 1.3.1
- 1.3.2
- '1.4'
- '1.5'
- 1.5.1
- '1.9'
- 1.9.1
- '1.10'
- '1.11'
- 1.11.1
- '1.12'
- '1.13'
- 1.13.1
- '1.14'
- 1.14.1
- '1.15'
- 1.15.1
- 1.15.2
- '1.16'
- 1.16.1
- 1.16.2
- '1.17'
- 1.17.0.1
- 1.17.1
- '1.18'
- 1.18.1
- '1.19'
- 1.19.1
- '1.20'
- 1.20.1
- 1.20.2
- 1.20.3
- 1.20.4
- '1.21'
- '1.22'
- 1.22.1
- 1.22.2
- '1.23'
- '1.24'
- 1.24.99
author: Simon Michael <simon@joyful.com>
latest: 1.24.99
description-type: markdown
description: |
  # hledger-lib

  A reusable library containing hledger's core functionality.
  This is used by most hledger* packages so that they support the same
  common file formats, command line options, reports etc.

  See also:
  the [project README](https://hledger.org/README.html)
  and [home page](https://hledger.org).
license-name: GPL-3.0-only
