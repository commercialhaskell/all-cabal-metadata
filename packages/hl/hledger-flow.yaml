all-versions:
- 0.11.0.0
- 0.11.1.0
- 0.11.1.1
- 0.11.1.2
- 0.11.2.0
- 0.11.3.0
- 0.12.0.0
- 0.12.1.0
- 0.12.2.0
- 0.12.2.1
- 0.12.3.0
- 0.12.3.1
- 0.12.4.0
- 0.13.0.0
- 0.13.1.0
- 0.13.2.0
- 0.14.0.0
- 0.14.1.0
- 0.14.2.0
- 0.14.3.0
- 0.14.4
- 0.16.1
author: Andreas Pauley <hledger-flow@pauley.org.za>
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  exceptions: '>=0'
  filepath: '>=0'
  foldl: '>=0'
  gitrev: '>=0'
  hledger-flow: '>=0'
  optparse-applicative: '>=0'
  path: '>=0'
  path-io: '>=0'
  stm: '>=0'
  text: '>=0'
  time: '>=0'
  turtle: '>=0'
changelog: |
  # Changelog for [hledger-flow](https://github.com/apauley/hledger-flow)

  ## 0.16.1

  - Fix documentation URL: https://github.com/apauley/hledger-flow/tree/master/docs#feature-reference

  ## 0.16.0

  - Switched back to `hledger print` during statement import [#126](https://github.com/apauley/hledger-flow/issues/126)
  - Move feature reference to https://github.com/apauley/hledger-flow/docs
  - Fix preprocessing logic for CSV files [#123](https://github.com/apauley/hledger-flow/issues/123)
  - Add --ascii-reports flag [#115](https://github.com/apauley/hledger-flow/pull/115)

  Other changes:
   - Switched to Stackage lts-24.8 (GHC 9.10.2)

  ## 0.15.0

  Made some changes that will result in formatting changes of generated files:

   - Removed the obsolete exclamation mark from the `include` directive
   - Switched from `hledger print` to `hledger import` during statement import.

     `hledger import` uses your preferred commodity styles from your
     [directives.journal](https://github.com/apauley/hledger-flow#hledger-directives) to generate journals.

  Other changes:

   - Switched to GHC 9.0.1

  ## 0.14.4

  Add an option to process files in batches.

  If the number of input files processed by `hledger-flow` grows large, and you have resource-intensive processing scripts, your system resources can be overwhelmed.

  With this change the input files will be processed in batches, by default 200 at a time. The batch size can be set from the command-line.

  https://github.com/apauley/hledger-flow/issues/93

  https://github.com/apauley/hledger-flow/pull/94

  ## 0.14.3

  Ensure that generated include files only contain files ending with .journal

  Fixes [#92](https://github.com/apauley/hledger-flow/issues/92)

  ## 0.14.2

  Add an optional `--start-year` command-line option for imports:

  Import only from the specified year and onwards,
  ignoring previous years. Valid values include a 4-digit
  year or 'current' for the current year.

  An implementation for [this feature request](https://github.com/apauley/hledger-flow/issues/81)

  ## 0.14.1

  - Make `--enable-future-rundir` the default, and deprecate the command-line option. To be removed in a future release.
  - Ensure that the deepest rundir is the account directory, because the program doesn't generate include files correctly in directories below the account level.

  ## 0.14.0

  - Add a new performance-related command-line option to import: `--new-files-only`. [PR #89](https://github.com/apauley/hledger-flow/pull/89)

    Don't regenerate transaction files if they are
    already present. This applies to hledger journal
    files as well as files produced by the preprocess and
    construct scripts.

  - Generate monthly versions of the income statement in reports. A contribution by [Max Linke](https://github.com/apauley/hledger-flow/pull/88)

  - Switch some usages of system-filepath over to [path](https://github.com/apauley/hledger-flow/pull/87)

    hledger-flow started as a collection of bash scripts that I translated into Haskell with the help of [Turtle](https://hackage.haskell.org/package/turtle).

    Turtle uses the now deprecated [system-filepath](https://hackage.haskell.org/package/system-filepath) to represent all paths.

    I've had many filepath-related issues in hledger-flow.
    They were related to issues such as that 2 instances of the same directory would not be treated as equal, because one could have a trailing slash and the other not.
    Another issue that popped up was knowing wether a path is a file or a directory, and if it is absolute or relative.

    All of these issues are articulated in the `path` library:
    https://github.com/commercialhaskell/path


  ## 0.13.2

  Improve support for importing a subset of journals: start importing only from the directory given as argument,
  or the current directory, and generate only the relevant include files.

  This is a behavioural change and (for now) it needs to be enabled with the --enable-future-rundir switch.
  This will become the default behaviour in 0.14.x, at which time the switch will be removed.

  Reports:
  Use the LEDGER_FILE env var (if set) when generating reports.
  Default to the top-level all-years.journal if not set.

  Build with Stackage Nightly 2020-03-10 (ghc-8.8.3)

  ## 0.13.1

  - Automatically add [include lines for yearly price files](https://github.com/apauley/hledger-flow/#price-files) if they are present on disk.
  - Minor report changes - do not assume too many extra options for default reports.

  ## 0.13.0

  - Add an experimental rundir option for imports

  The experimental rundir is an attempt to restrict hledger-flow into processing just a subset of files, primarily to quickly get feedback/failures while adding new accounts to an existing set of accounts.

  The use case has been described in [issue 64](https://github.com/apauley/hledger-flow/issues/64).

  It is experimental, because the only problem it currently solves is getting hledger-flow to fail fast.
  One of the current side effects of doing so is that the generated include files are then written to only
  include the subset of files that were processed.

  But as soon as you do a full run again, the include files will be correctly re-generated as before.

  ## 0.12.4.0

  - Update usage of hledger to reflect updated command-line flags of hledger version 1.15
    https://github.com/apauley/hledger-flow/issues/73
  - Compile with stackage lts-14.9

  ## 0.12.3.1

  Fixed a bug where:

  Given:
  - A run of `hledger-flow import`

  When:
  - specifying a relative import base directory
  - but specifically without any relative prefixes such as `./` or `../`

  Then:
  - the account-level include files pointing to the real journal entries would have incorrect paths

  https://github.com/apauley/hledger-flow/issues/65

  ## 0.12.3

  Add more reports:

  - Balance Sheet per owner per year, and for all owners per year
  - Unknown transactions per owner per year
  - A transfer balance overview per year

  ## 0.12.2.1

  Fix resolver extraction and hledger-flow --version in release-tarball script

  ## 0.12.2

  Slightly smarter reporting.

  - Get the available report years for each individual owner. Only generate reports for those years.
  - Create uniform output directories.
  - Add system info to version output

  ## 0.12.1

  Generate some reports per owner.

  Report generation is still a work-in-progress.

  https://github.com/apauley/hledger-flow/pull/57

  ## 0.12.0

  - Re-organised the command-line interface:
    moved various command-line options out of subcommands, into the top-level.
  - Added a [contributor's agreement](https://github.com/apauley/hledger-flow/blob/master/CONTRIBUTING.org)
    after receiving some more valued contributions from
    [jecaro](https://github.com/apauley/hledger-flow/pull/42)

  ## 0.11.3

  - Detect the hledger-flow base directory correctly, even when in a subdirectory. Similar to how git behaves.
  - Change the version subcommand into a flag - thanks to [jecaro](https://github.com/apauley/hledger-flow/pull/38) for the contribution.

  ## 0.11.2

  - Improved display of external process output

  ## 0.11.1.2

  - Exit with an error code when any external script fails - https://github.com/apauley/hledger-flow/issues/28
  - Capture external process output when doing parallel processing, in order to better prevent mangled concurrent output.
  - Allow users to specify a path to an hledger executable
  - Display a user-friendly error message if hledger cannot be found - https://github.com/apauley/hledger-flow/issues/22

  ## 0.11.1.1

  - Support input files from the year 2011 - https://github.com/apauley/hledger-flow/issues/27
    Use a more specific input-file pattern, so as not to match 2011-include.journal
  - Print command-line options if requested - https://github.com/apauley/hledger-flow/issues/11
  - Use the channel output functions consistently to avoid concurrency issues.

  ## 0.11.1

  - Create statically linked executables on Linux - https://github.com/apauley/hledger-flow/releases
  - Add an option to disable parallel processing
  - Log the exit status of shell commands.
  - Upgrade to LTS 13.16 for GHC 8.6.4.

  ## 0.11

  - Change the name from `hledger-makeitso` to `hledger-flow`.

  ## 0.10

  - Add a `version` subcommand.
    Create [issue #15](https://github.com/apauley/hledger-flow/issues/15)
    to change it into a `--version` flag later.
  - Fix a minor issue where yearly include files were generated at the top-level
    of the directtory structure, even though the same content was available in the
    `import` directory.
    The top-level `all-years.journal` now just includes the years within the
    `import` directory.
  - Upgrade to LTS 13.15 for GHC 8.6.4
  - Add CircleCI and TravisCI build instructions. Switch the README.org to a
    README.md in order to better support CI status badges.


  ## 0.9.0.1

  First hackage release. Minor changes to fix `stack sdist` warnings and errors, in preperation of
  the hackage upload.

  1bf817c "Merge pull request #9 from apauley/hackage-upload" Mar 31 21:51:38 2019 +0200

  ## 0.9

  Process all statements in parallel.

  This has a significant speed improvement on multi-processor machines when dealing with lots of input files.
  a906bb5 "Merge pull request #8 from apauley/parallel-import" 2019-03-27 22:45:23 +0200

  ## 0.8

  Generate an all-years.journal on each level which includes all the available years for that level. Replace the old makeitso.journal with the top-level version of this:

  06f2127 "Merge pull request #5 from apauley/all-years-includes" 2019-03-22 00:09:27 +0200

  ## 0.7

  Change the way include files are aggregated.

  It used to be by owner/bank/account, now each of those levels (owner/bank/account) are aggregated per year:
  eb17fed "Merge pull request #3 from apauley/annual-includes" 2019-03-12 23:09:17 +0200

  ## 0.6

  61c71d6 "Upgrade to lts-13.9 (GHC 8.6.3)" 2019-03-01 11:31:23 +0200

  ## 0.5

  3a7a39e "Upgrade to lts-13.6 (GHC 8.6.3)" 2019-02-16 09:54:49 +0200

  ## 0.4

  213552d "Upgrade to lts-12.16 (GHC 8.4.4)" 2018-11-03 20:00:21 +0200

  ## 0.3

  5e2d45f "Update from lts-12.1 to lts-12.11" 2018-10-01 23:07:21 +0200

  ## 0.2

  First support for the construct script, when it was confusingly named an import script:

  24ac4c7 "Support a fully custom import script" 2018-09-16 16:11:53 +0200

  ## 0.1

  The first semi-useful version, replacing a previous bash script:

  131f8af "Write journal" 2018-07-23 16:08:44 +0200
changelog-type: markdown
description: |
  #+STARTUP: showall

  * hledger-flow
    :PROPERTIES:
    :CUSTOM_ID: hledger-flow
    :END:

  ** Project Status

  I haven't been able to spend much time on this project in the last few years,
  and looking at my current responsibilities this is likely to remain the case.

  I do still try to respond to bug reports as they happen.

  ** What is it?
    :PROPERTIES:
    :CUSTOM_ID: what-is-it
    :END:

  =hledger-flow= is a command-line program that gives you a guided [[https://hledger.org/][Hledger]]
  workflow. It is important to note that most of the heavy lifting is done by the
  upstream =hledger= project. For example, =hledger-flow= cares about where you
  put your files for long-term maintainability, but the actual conversion to
  classified accounting journals is done by =hledger=.

  =hledger-flow= focuses on automated processing of electronic statements as much as possible,
  as opposed to manually adding your own hledger journal entries. Manual entries
  are still possible, it just saves time in the long run to automatically process
  a statement whenever one is available.

  Within =hledger-flow= you will keep your original bank statements around
  permanently as input, and generate (h)ledger journals each time
  you run the program. The classification is done with [[https://hledger.org/csv.html][hledger's rules files]],
  and/or your own script hooks.

  Keeping the original statements means that you never have to worry too
  much about "am I doing this accounting thing right?" or "what happens if
  I make a mistake?". If you want to change your mind about some
  classification, or if you made a mistake, you just change your
  classification rules, and run the program again.

  It started when I realized that the scripts I wrote while playing around with
  [[https://github.com/adept/full-fledged-hledger/wiki][adept's Full-fledged Hledger]] aren't really specific to my own finances, and can
  be shared.

  ** Overview of the Basic Workflow
    :PROPERTIES:
    :CUSTOM_ID: overview-of-the-basic-workflow
    :END:

  1. Save an input transaction file (typically CSV) to a [[#input-files][specific directory]].
  2. Add an hledger [[#rules-files][rules file]].
     Include some classification rules if you want.
  3. Run =hledger-flow import=

  Add all your files to your favourite version control system.

  The generated journal that you most likely want to use as your
  =LEDGER_FILE= is called =all-years.journal=. This has include directives
  to all the automatically imported journals, as well as includes for your
  own manually managed journal entries.

  In a typical software project we don't add generated files to version
  control, but in this case I think it is a good idea to add all the
  generated files to version control as well - when you inevitably change
  something, e.g. how you classify transactions in your rules file, then
  you can easily see if your change had the desired effect by looking at a
  diff.

  ** Who should use this?
    :PROPERTIES:
    :CUSTOM_ID: who-should-use-this
    :END:

  =hledger-flow= is intended for you if:

  - You want a way to organise your finances into a structure that will be
    maintainable over the long term.
  - You like the idea of treating your source transactions (typically CSV files)
    as input, and having your hledger journals (mostly) being generated as output.
  - You want to automate as much as possible when dealing with your
    financial life.
  - You don't mind writing some scripts when needed, as long as it saves
    you time over the long term.

  ** How do I install it?
    :PROPERTIES:
    :CUSTOM_ID: how-do-i-install-it
    :END:

  If you can compile it yourself, please do so by following the [[https://github.com/apauley/hledger-flow/blob/master/CONTRIBUTING.org#build-the-project][build instructions]].

  Otherwise download [[https://github.com/apauley/hledger-flow/releases][the latest release]] for your OS (Linux or Mac OS X), and copy the =hledger-flow= executable to a directory in your PATH.

  On Linux you should just be able to run the executable.
  On Mac you may see a warning.

  ** Windows Support

  Currently =hledger-flow= does not work on Windows.

  This [[https://github.com/apauley/hledger-flow/issues?q=is%3Aissue+is%3Aopen+label%3Awindows][list of issues]] describes some of the details of what doesn't work.

  I believe it wouldn't take too much effort to fix those issues, but I'm going to leave Windows support
  for other contributors.

  Please send me some pull requests if you would like =hledger-flow= to work on Windows.

  ** Getting Started
    :PROPERTIES:
    :CUSTOM_ID: getting-started
    :END:

  Have a look at the [[file:step-by-step/README.org][detailed step-by-step instructions]] and the [[file:docs/README.org][feature reference]].

  You can see the example imported financial transactions as it was
  generated by the step-by-step instructions here:

  [[https://github.com/apauley/hledger-flow-example][https://github.com/apauley/hledger-flow-example]]

  ** Compatibility with hledger

  =hledger-flow= should work with any recent version of =hledger=.

  The most recent version that it was tested with is [[https://hledger.org/relnotes.html#2025-09-03-hledger-150][hledger-1.50]] (September 2025).

  Note to future readers: if you are using =hledger-flow= with a more recent version of =hledger= than mentioned above,
  please submit a small pull request with the updated version of =hledger=.

  ** Compatibility with ledger-cli
    :PROPERTIES:
    :CUSTOM_ID: compatibility-with-ledger
    :END:

  =hledger-flow= uses =hledger= to produce journal's, so this page about [[https://hledger.org/ledger.html][hledger and Ledger]] should be relevant for all =hledger-flow= users.

  That said, here are some observations that are specifically relevant to =hledger-flow=:

  When writing out the journal include files, =hledger-flow= sorts the
  include statements by filename.

  [[https://www.ledger-cli.org/][Ledger]] fails any balance assertions
  when the transactions aren't included in chronological order.

  An easy way around this is to name your input files so that March's
  statement is listed before December's statement.

  Another option is to add =--permissive= to any
  [[https://www.ledger-cli.org/][ledger]] command.

  So you should easily be able to use both =ledger= and =hledger= on these
  journals if you take care to [[https://hledger.org/faq.html#how-is-hledger-different-from-ledger-][avoid the few incompatibilities]] which exists
  (eg in your rules files or manual journals).

  ** Project Goals
    :PROPERTIES:
    :CUSTOM_ID: project-goals
    :END:

  My =hledger= files started to collect a bunch of supporting code that
  weren't really specific to my financial situation.

  I want to extract and share as much as possible of that supporting code.

  [[https://github.com/adept/full-fledged-hledger/wiki][Adept's]] goals
  also resonated with me:

  - Tracking expenses should take as little time, effort and manual work
    as possible
  - Eventual consistency should be achievable: even if I can't record
    something precisely right now, maybe I would be able to do it later,
    so I should be able to leave things half-done and pick them up later
  - Ability to refactor is a must. I want to be able to go back and change
    the way I am doing things, with as little effort as possible and
    without fear of irrevocably breaking things.


  * Contributing to hledger-flow

  Have a look at the [[file:CONTRIBUTING.org][contribution guidelines]].

  * FAQ
    :PROPERTIES:
    :CUSTOM_ID: faq
    :END:

  ** How do you balance transfers between 2 accounts when you have statements for both accounts?
     :PROPERTIES:
     :CUSTOM_ID: transfer-2-accounts
     :END:

  *** The Problem

  In your primary bank account you've happily been classifying transfers to a
  secondary account as just =Expenses:OtherAccount=.

  But you've recently started processing the statements from the second account as
  well so that you can classify those expenses more accurately.

  And now the balances of these two accounts are all wrong when the statements of
  each account deals with money transferred between these two accounts.

  In =bank1.journal=, imported from =bank1.csv=:
  #+BEGIN_EXAMPLE
  2018/11/09 Transfer from primary account to secondary account
      Assets:Bank1:Primary    $-200
      Assets:Bank2:Secondary
  #+END_EXAMPLE

  In =bank2.journal=, imported from =bank2.csv=:
  #+BEGIN_EXAMPLE
  2018/11/09 Transfer from primary account to secondary account
      Assets:Bank2:Secondary  $200
      Assets:Bank1:Primary
  #+END_EXAMPLE

  *** The Solution

  As soon as you start importing statements for both accounts you will have to
  introduce an intermediate account for classification between these two accounts.

  I use =Assets:Transfers:*=.

  And we may have reports looking at these transfers accounts at some point, you
  should consider using the same names.

  The above example then becomes as follows.

  In =bank1.journal=, imported from =bank1.csv=:
  #+BEGIN_EXAMPLE
  2019-05-18 Transfer from primary account to secondary account
      Assets:Bank1:Primary         $-200
      Assets:Transfers:Bank1Bank2
  #+END_EXAMPLE

  In =bank2.journal=, imported from =bank2.csv=:
  #+BEGIN_EXAMPLE
  2019-05-18 Transfer from primary account to secondary account
      Assets:Bank2:Secondary       $200
      Assets:Transfers:Bank1Bank2
  #+END_EXAMPLE

  Any posting to =Assets:Transfers:*= indicates an in "in-flight" amount.
  You would expect the balance of =Assets:Transfers= to be zero most of the time.
  Whenever it isn't zero it means that you either don't yet have the other side of
  the transfer, or that something is wrong in your rules.

  You could theoretically just use =Assets:Transfers= without any subaccounts, but
  I found it useful to use subaccounts. Because then the subaccounts can show me
  where I should look for any missing transfer transaction.

  I typically use sorted names as the subaccount (Python code sample):

  #+BEGIN_SRC python
      "Assets:Transfers:" + "".join(sorted(["Bank2", "Bank1"]))
  #+END_SRC

  *** External references

      This approach is based on what is described in Full-fledged hledger:
      [[https://github.com/adept/full-fledged-hledger/wiki/Adding-more-accounts#lets-make-sure-that-transfers-are-not-double-counted]]

      The question was first asked in [[https://github.com/apauley/hledger-flow/issues/51][issue #51]].
description-type: text
hash: 9eb4c80c86c4d8e9cfb9467bb748a03af6da57f851279079b536309b4d14f41a
homepage: https://github.com/apauley/hledger-flow#readme
latest: 0.16.1
license-name: GPL-3.0-only
maintainer: Andreas Pauley <hledger-flow@pauley.org.za>
synopsis: An hledger workflow focusing on automated statement import and classification.
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  foldl: '>=0'
  hledger-flow: '>=0'
  path: '>=0'
  path-io: '>=0'
  stm: '>=0'
  text: '>=0'
  turtle: '>=0'
