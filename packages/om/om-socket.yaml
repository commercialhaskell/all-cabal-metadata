all-versions:
- 0.11.0.3
- 0.11.0.4
author: Rick Owens
basic-deps:
  aeson: '>=2.0.3.0 && <2.3'
  base: '>=4.15.1.0 && <4.20'
  binary: '>=0.8.8.0 && <0.9'
  binary-conduit: '>=1.3.1 && <1.4'
  bytestring: '>=0.10.12.1 && <0.13'
  conduit: '>=1.3.4.3 && <1.4'
  conduit-extra: '>=1.3.6 && <1.4'
  containers: '>=0.6.4.1 && <0.7'
  exceptions: '>=0.10.4 && <0.11'
  megaparsec: '>=9.2.2 && <9.7'
  monad-logger: '>=0.3.37 && <0.4'
  network: '>=3.1.2.7 && <3.2'
  om-show: '>=0.1.2.6 && <0.2'
  stm: '>=2.5.0.0 && <2.6'
  text: '>=1.2.5.0 && <2.2'
  time: '>=1.9.3 && <1.10'
  tls: '>=1.5.8 && <1.10'
changelog: ''
changelog-type: ''
description: "# om-socket\n\n- [Overview](#overview)\n- [Examples](#examples)\n    -
  [Open an Ingress service](#open-an-ingress-service)\n    - [Open an Egress connection](#open-an-egress-connection)\n
  \   - [Start a server process](#start-a-server-process)\n    - [Connect a client
  to a server](#connect-a-client-to-a-server)\n\n## Overview\n\nThis package provides
  some utilities for Haskell programs to communicate raw\nbinary messages over the
  network. It includes:\n\n* Opening an \"Ingress\" service.\n  It provides a way
  for a program to open a socket and accept a\n  stream of messages without responding
  to any of them.\n\n* Open an \"Egress\" socket.\n  It provides a way to connect
  to an \"Ingress\" service and dump a stream of\n  messages to it.\n\n* Open a bidirectional
  \"server\".\n  It provides a way to open a \"server\", which provides your program
  with a\n  stream of requests paired with a way to respond to each request. Responses
  are\n  allowed to be supplied in an order different than that from which the\n  corresponding
  requests were received.\n\n* Open a client to a bidirectional \"server\".\n  It
  provides a way to connect to an open server and provides a convenient\n  `(request
  -> IO response)` interface to talk to the server.\n\n## Examples\n\n### Open an
  Ingress service\n\n```haskell\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE DeriveGeneric
  #-}\n{-# LANGUAGE DerivingStrategies #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule
  Main (main) where\n\nimport Conduit ((.|), awaitForever, runConduit)\nimport Control.Monad.IO.Class
  (MonadIO(liftIO))\nimport Data.Binary (Binary)\nimport GHC.Generics (Generic)\nimport
  OM.Socket (openIngress)\n\n{- | The messages that arrive on the socket. -}\ndata
  Msg\n  = A\n  | B\n  deriving stock (Generic)\n  deriving anyclass (Binary)\n\nmain
  :: IO ()\nmain =\n  runConduit $\n    openIngress \"localhost:9000\"\n    .| awaitForever
  (\\msg ->\n         case msg of\n           A -> liftIO $ putStrLn \"Got A\"\n           B
  -> liftIO $ putStrLn \"Got B\"\n       )\n```\n\n  \n### Open an Egress connection\n\n```haskell\n{-#
  LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE DerivingStrategies
  #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Main (main) where\n\nimport Conduit
  ((.|), runConduit, yield)\nimport Data.Binary (Binary)\nimport GHC.Generics (Generic)\nimport
  OM.Socket (openEgress)\n\n{- | The messages that arrive on the socket. -}\ndata
  Msg\n  = A\n  | B\n  deriving stock (Generic)\n  deriving anyclass (Binary)\n\nmain
  :: IO ()\nmain =\n  runConduit $\n    mapM_ yield [A, B, B, A, A, A, B]\n    .|
  openEgress \"localhost:9000\"\n\n```\n\n### Start a server process\n\n\n```haskell\n{-#
  LANGUAGE DerivingStrategies #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main (main) where\n\nimport Conduit ((.|),
  awaitForever, runConduit)\nimport Control.Monad.Logger (runStdoutLoggingT)\nimport
  Control.Monad.Trans.Class (MonadTrans(lift))\nimport Data.Binary (Binary)\nimport
  OM.Socket (openServer)\n\n{- | The requests accepted by the server. -}\nnewtype
  Request = EchoRequest String\n  deriving newtype (Binary, Show)\n\n\n{- | The response
  sent back to the client. -}\nnewtype Responsee = EchoResponse String\n  deriving
  newtype (Binary, Show)\n\n\n{- | Simple echo resposne server. -}\nmain :: IO ()\nmain
  =\n  runStdoutLoggingT . runConduit $\n    pure ()\n    .| openServer \"localhost:9000\"
  Nothing\n    .| awaitForever (\\(EchoRequest str, respond) ->\n        {-\n          You
  don't necessarily have to respond right away if you don't\n          want to. You
  can cache the responder away in some state and\n          get back to it at some
  later time if you like.\n        -}\n        lift $ respond (EchoResponse str)\n
  \   )\n\n```\n\n### Connect a client to a server\n\n```haskell\n{-# LANGUAGE DerivingStrategies
  #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Main (main) where\n\nimport Control.Monad.Logger (runStdoutLoggingT)\nimport
  Data.Binary (Binary)\nimport OM.Socket (connectServer)\n\n{- | The requests accepted
  by the server. -}\nnewtype Request = EchoRequest String\n  deriving newtype (Binary,
  Show)\n\n\n{- | The response sent back to the client. -}\nnewtype Responsee = EchoResponse
  String\n  deriving newtype (Binary, Show)\n\n\n{- | Simple echo resposne client.
  -}\nmain :: IO ()\nmain = do\n  client <-\n    runStdoutLoggingT $\n      connectServer
  \"localhost:9000\" Nothing\n  putStrLn =<< client (EchoRequest \"hello\")\n  putStrLn
  =<< client (EchoRequest \"world\")\n```\n"
description-type: markdown
hash: a25b67c719ff976b44680339f55846f9ccef8a6fe9bae4c39ba8f041e7dfddd8
homepage: https://github.com/owensmurray/om-socket
latest: 0.11.0.4
license-name: MIT
maintainer: rick@owensmurray.com
synopsis: Socket utilities.
test-bench-deps:
  aeson: '>=2.0.3.0 && <2.3'
  base: '>=4.15.1.0 && <4.20'
  binary: '>=0.8.8.0 && <0.9'
  binary-conduit: '>=1.3.1 && <1.4'
  bytestring: '>=0.10.12.1 && <0.13'
  conduit: '>=1.3.4.3 && <1.4'
  conduit-extra: '>=1.3.6 && <1.4'
  containers: '>=0.6.4.1 && <0.7'
  exceptions: '>=0.10.4 && <0.11'
  megaparsec: '>=9.2.2 && <9.7'
  monad-logger: '>=0.3.37 && <0.4'
  network: '>=3.1.2.7 && <3.2'
  om-show: '>=0.1.2.6 && <0.2'
  om-socket: '>=0'
  stm: '>=2.5.0.0 && <2.6'
  text: '>=1.2.5.0 && <2.2'
  time: '>=1.9.3 && <1.10'
  tls: '>=1.5.8 && <1.10'
  transformers: '>=0.5.6.2 && <0.7'
