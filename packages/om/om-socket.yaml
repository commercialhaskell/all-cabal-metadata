all-versions:
- 0.11.0.3
- 0.11.0.4
- 0.11.0.5
- 1.0.0.0
- 1.0.0.1
- 1.0.0.3
author: Rick Owens
basic-deps:
  aeson: '>=2.0.3.0 && <2.3'
  base: '>=4.15.1.0 && <4.21'
  binary: '>=0.8.8.0 && <0.9'
  bytestring: '>=0.10.12.1 && <0.13'
  containers: '>=0.6.4.1 && <0.8'
  exceptions: '>=0.10.4 && <0.11'
  megaparsec: '>=9.2.2 && <9.7'
  monad-logger: '>=0.3.37 && <0.4'
  network: '>=3.1.2.7 && <3.3'
  om-fork: '>=0.7.1.9 && <0.8'
  om-show: '>=0.1.2.6 && <0.2'
  stm: '>=2.5.0.0 && <2.6'
  streaming: '>=0.2.4.0 && <0.3'
  streaming-binary: '>=0.3.0.1 && <0.4'
  streaming-bytestring: '>=0.3.2 && <0.4'
  text: '>=1.2.5.0 && <2.2'
  tls: '>=1.5.8 && <2.2'
  unliftio-core: '>=0.2.1.0 && <0.3'
changelog: ''
changelog-type: ''
description: "# om-socket\n\n- [Overview](#overview)\n- [Examples](#examples)\n    -
  [Open an Ingress service](#open-an-ingress-service)\n    - [Open an Egress connection](#open-an-egress-connection)\n
  \   - [Start a server process](#start-a-server-process)\n    - [Connect a client
  to a server](#connect-a-client-to-a-server)\n\n## Overview\n\nThis package provides
  some utilities for Haskell programs to communicate raw\nbinary messages over the
  network. It includes:\n\n* Opening an \"Ingress\" service.\n  It provides a way
  for a program to open a socket and accept a\n  stream of messages without responding
  to any of them.\n\n* Open an \"Egress\" socket.\n  It provides a way to connect
  to an \"Ingress\" service and dump a stream of\n  messages to it.\n\n* Open a bidirectional
  \"server\".\n  It provides a way to open a \"server\", which provides your program
  with a\n  stream of requests paired with a way to respond to each request. Responses
  are\n  allowed to be supplied in an order different than that from which the\n  corresponding
  requests were received.\n\n* Open a client to a bidirectional \"server\".\n  It
  provides a way to connect to an open server and provides a convenient\n  `(request
  -> IO response)` interface to talk to the server.\n\n## Examples\n\n### Open an
  Ingress service\n\n```haskell\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE DeriveGeneric
  #-}\n{-# LANGUAGE DerivingStrategies #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule
  Ingress (main) where\n\nimport Control.Monad.IO.Class (MonadIO(liftIO))\nimport
  Data.Binary (Binary)\nimport Data.Function ((&))\nimport GHC.Generics (Generic)\nimport
  OM.Fork (runRace)\nimport OM.Socket (openIngress)\nimport Prelude (($), IO, putStrLn)\nimport
  qualified Streaming.Prelude as Stream\n\n{- |\n  The messages that arrive on the
  socket.\n\n  This type would typically be shared by both the Ingress and Egress
  side,\n  or at least the binary encoding must be identical.\n-}\ndata Msg\n  = A\n
  \ | B\n  deriving stock (Generic)\n  deriving anyclass (Binary)\n\n\nmain :: IO
  ()\nmain =\n  runRace $\n    openIngress \"localhost:9000\"\n    & Stream.mapM_\n
  \      (\\msg ->\n           case msg of\n             A -> liftIO $ putStrLn \"Got
  A\"\n             B -> liftIO $ putStrLn \"Got B\"\n         )\n```\n\n  \n### Open
  an Egress connection\n\n```haskell\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE
  DeriveGeneric #-}\n{-# LANGUAGE DerivingStrategies #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Egress (main) where\n\nimport Data.Binary (Binary)\nimport Data.Function
  ((&))\nimport GHC.Generics (Generic)\nimport OM.Socket (openEgress)\nimport Prelude
  (IO)\nimport qualified Streaming.Prelude as Stream\n\n{- |\n  The messages that
  arrive on the socket.\n\n  This type would typically be shared between the client
  and the server,\n  or at least the binary representation must be identical (as,
  for\n  example, if the client is not written in Haskell).\n-}\ndata Msg\n  = A\n
  \ | B\n  deriving stock (Generic)\n  deriving anyclass (Binary)\n\n\nmain :: IO
  ()\nmain =\n  Stream.each [A, B, B, A, A, A, B]\n  & openEgress \"localhost:9000\"\n\n```\n\n###
  Start a server process\n\n\n```haskell\n{-# LANGUAGE DerivingStrategies #-}\n{-#
  LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE OverloadedStrings #-}\n\n\nmodule
  Server (main) where\n\nimport Control.Monad.Logger (runStdoutLoggingT)\nimport Data.Binary
  (Binary)\nimport Data.Function ((&))\nimport OM.Fork (runRace)\nimport OM.Socket
  (openServer)\nimport Prelude (Maybe(Nothing), ($), IO, Show, String)\nimport qualified
  Streaming.Prelude as Stream\n\n\n{-|\n  The requests accepted by the server.\n\n
  \ This type would typically be shared between client and server.\n-}\nnewtype Request
  = EchoRequest String\n  deriving newtype (Binary, Show)\n\n\n{-|\n  The response
  sent back to the client.\n\n  This type would typically be shared between client
  and server.\n-}\nnewtype Responsee = EchoResponse String\n  deriving newtype (Binary,
  Show)\n\n\n{-| Simple echo resposne server. -}\nmain :: IO ()\nmain =\n  runRace\n
  \ $ runStdoutLoggingT\n  $ (\n      openServer \"localhost:9000\" Nothing\n      &
  Stream.mapM_\n          (\\ (EchoRequest str, respond) ->\n            {-\n              You
  don't necessarily have to respond right away if\n              you don't want to.
  You can cache the responder away in\n              some state and get back to it
  at some later time if you\n              like. `openServer` and `connectServer`
  have a mechnamism\n              for handling out of order responses.\n            -}\n
  \           respond (EchoResponse str)\n          )\n    )\n```\n\n### Connect a
  client to a server\n\n```haskell\n{-# LANGUAGE DerivingStrategies #-}\n{-# LANGUAGE
  GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Client
  (main) where\n\nimport Control.Monad.Logger (runStdoutLoggingT)\nimport Data.Binary
  (Binary)\nimport OM.Socket (connectServer)\n\n{-|\n  The requests accepted by the
  server.\n\n  This would typically need to be shared between the client and the\n
  \ server. Certainly the binary encoding must be identical.\n-}\nnewtype Request
  = EchoRequest String\n  deriving newtype (Binary, Show)\n\n\n{-|\n  The response
  sent back to the client.\n\n  Likewise, this would be shared between client and
  server.\n-}\nnewtype Responsee = EchoResponse String\n  deriving newtype (Binary,
  Show)\n\n\n{-| Simple echo resposne client. -}\nmain :: IO ()\nmain = do\n  client
  <-\n    runStdoutLoggingT $\n      connectServer \"localhost:9000\" Nothing\n  putStrLn
  =<< client (EchoRequest \"hello\")\n  putStrLn =<< client (EchoRequest \"world\")\n```\n"
description-type: markdown
hash: 0c261e7dc7ab4de9a4d698e8ede323b64dfc6547a3beabdb515491027ed65ca8
homepage: https://github.com/owensmurray/om-socket
latest: 1.0.0.3
license-name: MIT
maintainer: rick@owensmurray.com
synopsis: Socket utilities.
test-bench-deps:
  base: '>=4.15.1.0 && <4.21'
  binary: '>=0.8.8.0 && <0.9'
  exceptions: '>=0.10.4 && <0.11'
  hspec: '>=2.11.1 && <2.12'
  monad-logger: '>=0.3.37 && <0.4'
  om-fork: '>=0.7.1.9 && <0.8'
  om-show: '>=0.1.2.6 && <0.2'
  om-socket: '>=0'
  streaming: '>=0.2.4.0 && <0.3'
  text: '>=1.2.5.0 && <2.2'
  unliftio-core: '>=0.2.1.0 && <0.3'
