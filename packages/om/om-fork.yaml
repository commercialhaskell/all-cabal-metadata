all-versions:
- 0.7.1.6
- 0.7.1.7
- 0.7.1.8
- 0.7.1.9
author: Rick Owens
basic-deps:
  aeson: '>=2.0.3.0 && <2.3'
  base: '>=4.15.1.0 && <4.20'
  exceptions: '>=0.10.4 && <0.11'
  ki: '>=1.0.0 && <1.1'
  monad-logger: '>=0.3.36 && <0.4'
  om-show: '>=0.1.2.6 && <0.2'
  text: '>=1.2.5.0 && <2.2'
  unliftio: '>=0.2.22.0 && <0.3'
changelog: ''
changelog-type: ''
description: "# om-fork\n\nThis package provides some concurrency abstractions.\n\n-
  [Structured concurrency](#structured-concurrency)\n    - [Motivation](#motivation)\n
  \   - [Example](#example)\n- [Actor model](#actor-model)\n    - [Motivation](#motivation)\n
  \   - [Example](#example)\n\n## Structured concurrency\n\nThis package provides
  some very limited tools for structured concurrency. These\ntools are \"limited\"
  in the sense that they target a very specific use case:\nmaking sure that if any
  one of a group of cooperating threads ends for any\nreason, then they all end. For
  a more complete treatment of structured\nconcurrency, see the [ki](https://hackage.haskell.org/package/ki)
  package.\n\n### Motivation\n\nIf you are using the actor model (see below) and one
  of your actors dies for\nwhatever reason, you probably want to crash completely
  instead of ending up in\nsome kind of \"half-crashed\" zombie state.\n\n### Example\n\n```haskell\n{-#
  LANGUAGE NumericUnderscores #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE
  TypeApplications #-}\n\nmodule Main (main) where\n\nimport Control.Concurrent (threadDelay)\nimport
  Control.Exception (SomeException, try)\nimport Control.Monad (void)\nimport Control.Monad.IO.Class
  (MonadIO(liftIO))\nimport Control.Monad.Logger (runStdoutLoggingT)\nimport OM.Fork
  (race, runRace, wait)\n\nmain :: IO ()\nmain =\n  void . try @SomeException $\n
  \   runStdoutLoggingT $ do\n      runRace $ do\n        race \"loop1\" $ loop1\n
  \       race \"loop2\" $ loop2\n        race \"loopThatCrashes\" $ loopThatCrashes\n
  \       wait\n\nloop1 :: (MonadIO m) => m void\nloop1 = do\n  liftIO $ do\n    threadDelay
  1_000_000\n    putStrLn \"loop1 cycle\"\n  loop1\n  \nloop2 :: (MonadIO m) => m
  void\nloop2 = do\n  liftIO $ do\n    threadDelay 200_000\n    putStrLn \"loop2 cycle\"\n
  \ loop2\n\nloopThatCrashes :: (MonadIO m) => m void\nloopThatCrashes = do\n  liftIO
  $ do\n    threadDelay 5_000_000\n    putStrLn \"loopThatCrashes about to crash\"\n
  \ error \"crash\"\n```\n\n## Actor model\n\nThis package provides an abstraction
  over the \"actor model\". In\nparticular, the main thing of value is a way get heterogeneously
  typed\nblocking responses from the actor, using `call`.\n\n### Motivation\n\nThe
  actor model isn't suitable for every concurrency problem, but\nmaybe you've been
  programming in Erlang and you have a problem which\nsits easily in your mind as
  an Actor Model problem. A full motivation\nof the actor model is beyond the scope
  of this package.\n\nAnyway, you probably want a way to interact with your \"actor\"
  in a type\nsafe way. This package provides convenient tools and patterns to do so.\n\n\n###
  Example\n \n\n```haskell\n{-# LANGUAGE LambdaCase #-}\n\nmodule Main (main) where\n\nimport
  Control.Concurrent (Chan, forkIO, newChan, readChan)\nimport Control.Monad (void)\nimport
  OM.Fork (Responder, call, cast, respond)\n\n\n{- | Messages that can be sent to
  the actor. -}\ndata MyMsg\n  = ReverseEcho String (Responder String)\n    {- ^ A
  blocking message. Responds with a String -}\n  | Print String\n    {- ^ A non-blocking
  message. -}\n  | GetState (Responder Int)\n    {- ^ Another blocking message. Responds
  with an Int -}\n\n\n{- | The \"state\" is just a count of how many messages we've
  seen so far. -}\nactorLoop :: Int -> Chan MyMsg -> IO void\nactorLoop state chan
  = do\n  readChan chan >>= \\case\n      ReverseEcho str responder ->\n        void
  $ respond responder (reverse str)\n      Print str ->\n        putStrLn (\"Printeded
  in background by actor thread: \" <> str)\n      GetState responder ->\n        void
  $ respond responder state\n  actorLoop (succ state) chan\n\n\nmain :: IO ()\nmain
  = do\n  {- `Chan a` is an instance of `Actor` -}\n  chan <- newChan\n  void . forkIO
  $ actorLoop 0 chan\n\n  {- | Notice that the result of this `call` is a String.
  -}\n  putStrLn =<< call chan (ReverseEcho \"hello world\")\n  cast chan (Print \"foo\")\n\n
  \ {- | Notice that the result of this `call` is an Int. -}\n  actorState <- call
  chan GetState\n  print (actorState * 2)\n```\n"
description-type: markdown
hash: 57bbf5cd341ba42746731e95d4da895d23890bc00df52a0c8b8007bb23f3e198
homepage: https://github.com/owensmurray/om-fork
latest: 0.7.1.9
license-name: MIT
maintainer: rick@owensmurray.com
synopsis: Concurrency utilities.
test-bench-deps:
  aeson: '>=2.0.3.0 && <2.3'
  base: '>=4.15.1.0 && <4.20'
  exceptions: '>=0.10.4 && <0.11'
  ki: '>=1.0.0 && <1.1'
  monad-logger: '>=0.3.36 && <0.4'
  om-fork: '>=0'
  om-show: '>=0.1.2.6 && <0.2'
  text: '>=1.2.5.0 && <2.2'
  unliftio: '>=0.2.22.0 && <0.3'
