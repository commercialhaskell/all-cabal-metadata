homepage: https://github.com/nikita-volkov/refined
changelog-type: markdown
hash: 79ff6e5eeb185706711ec0690daae0c7a1bada1d692853af4679be5933afff6c
test-bench-deps:
  base: -any
  doctest: '>=0.10'
  refined: -any
  QuickCheck: -any
maintainer: chessai <chessai1996@gmail.com>
synopsis: Refinement types with static and runtime checking
changelog: "# Changelog\nAll notable changes to this project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand
  this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).\n\n##
  [0.6.2] - 2021-01-31\n### Changed\n- `strengthen` no longer returns an `Either`,
  since the proof\n  that it should always succeed is in its constraints.\n- correct
  `success` documentation \n\n## [0.6.1] - 2020-08-02\n### Changed\n- upper bound
  on QuickCheck: <2.14 -> <2.15\n\n## [0.6] - 2020-07-21\n### Changed\n- `validate`
  now takes a `Proxy` as its first argument.\n- All uses of prettyprinter are now
  just `Text`\n\n### Removed\n- Refined.These module\n- Dependency on `prettyprinter`\n\n###
  Fixed\n- bug in `sized` internal helper that caused formatting issues\n  in sized
  predicate errors\n\n## [0.5.1] - 2020-07-14\n### Changed\n- `refineTH_` is now implemented
  in terms of `refineTH`\n- Fix pretty-printing of `RefineException`s during compile-time\n\n##
  [0.5] - 2020-07-11\n### Added\n- sized Predicate instances for `Text`\n- sized Predicate
  instances for strict and lazy `ByteString`\n- INLINABLE pragmas on `refine_` `reifyPredicate`
  \n- `NFData` instance for `Refined`\n- RefineSomeException constructor. Enables
  recovering\n  specific validation exceptions.\n  Thanks to @haroldcarr for adding
  this.\n- RefineXorException constructor.\n- `Empty` and `NotEmpty` predicates.\n-
  `NaN` and `Infinite` predicates for floating-point numbers.\n- @since pragmas to
  EVERYTHING.\n\n### Changed\n- lower bound on mtl to 2.2.2 due to use of liftEither.
  \n  Thanks to @k0ral for reporting this\n- Generalize sized predicates\n- Allow
  newer template-haskell (< 0.16 ==> < 0.17)\n- Allow newer aeson (< 1.5 ==> < 1.6)\n
  \ Thanks to @locallycompact for this change.\n\n### Removed\n- `Refined.Internal`
  module\n  Thanks to @nikita-volkov for pushing me to do this.\n- Orphan modules\n
  \ Thanks to @symbiont-sam-halliday for pointing out the\n  silliness of these modules.\n-
  `RefineT`. It was a needless abstraction that just made the\n  library harder to
  learn and use, providing little benefit\n  over `Maybe RefineException`.\n  Thanks
  to @nikita-volkov for helping me see the light.\n\n### Deprecated\n- Refined.These
  module in favour of Data.These from these-skinny\n\n## [0.4.4] - 2019-10-18\n###
  Added\n- `refine_`\n- `refineTH_`\n- test suite: unit tests for compiling.\n###
  Changed\n- Allow newer `template-haskell` and `QuickCheck`.\n\n## [0.4.2.3] - 2019-09-17\n###
  Added\n- `reifyPredicate`\n### Fixed\n- `Arbitrary` instance for `Refined` should
  now always terminate.\n   Thanks to @symbiont-joseph-kachmar for reporting this.\n\n##
  [0.4.2.2] - 2019-07-19\n### Added\n- `exceptRefine`, `strengthen`, and `strengthenM`\n\n##
  [0.4.2.1] - 2019-05-31\n### Fixed\n- Documentation fix for `DivisibleBy`\n### Changed\n-
  Re-export `DivisibleBy`, `Even`, and `Odd` from module `Refined`.\n- Re-export all
  constructors from module `Refined`.\n\n## [0.4.2] - 2019-05-30\n### Removed\n- Re-removed
  dependency of `these` package.\n### Added\n- `Even`, `Odd`, and `DivisibleBy` predicates.\n-
  doctests for all predicates.\n### Changed\n- Make all predicates unary data constructors,
  instead of nullary,\n  and export those newly added constructors.\n\n## [0.4.1]
  - 2019-04-15\n### Fixed\n- Serious regression where `Not p` ~ `p`. Thanks to @k0ral
  who reported this.\n\n## [0.4] - 2019-03-18\n### Added\n- 'NegativeFromTo', a Predicate
  that ensures a numeric value is within a range [a,b],\n  where a < 0 and b >= a.\n
  \ Thanks to github.com/futtetennista for this change.\n### Changed\n- `RefinedNotException`
  now has a child (it should have had one in v2. This was an oversight.)\n- `displayRefineException`
  no longer uses tabs, instead 2 spaces.\n- make implementation of `displayRefineException`
  more clear via formatting.\n\n## [0.3.0.0] - 2018-09-26\n### Added\n- Internal module,
  and Unsafe modules, making sure to take care w.r.t.\n  the scope of coercions related
  to the use of the 'Refined' constructor.\n- 'IdPred' predicate, predicate that never
  fails.\n- Generic instances for all predicates.\n- `reallyUnsafeRefine`, `reallyUnsafeUnderlyingRefined`,
  `reallyUnsafeAllUnderlyingRefined`,\n  functions that allow one to use 'Coercion's
  to manually prove things about 'Refined'\n  values.\n### Changed\n- Type role of
  Refined from 'phantom Representational' to 'nominal nominal'.\n  With the old type
  role, one can use `coerce` to prove `Q x` given any `P x`.\n  The second parameter
  should also be nominal because of interactions with something\n  like `GreaterThan`
  and `Data.Ord.Down`.\n  Thanks to David Feuer for pointing this out.\n- Change docs
  to point users to 'Refined.Unsafe' module instead of recommending\n  'Unsafe.Coerce.unsafeCoerce'.\n-
  'Ascending' and 'Descending' predicates now use 'Foldable' instead of 'IsList'.\n-
  Lowered the lower bound on 'exceptions'; it was too strict for the support window.\n###
  Removed\n- Dependency of the 'these' package. It brings in some very\n  heavy transitive
  dependencies, even though the datatype\n  in `refined` is used to the most minimal
  extent.\n  This is a breaking change because\n  this change is exposed to the end
  user via 'RefineAndException'.\n  It is exported from a module called 'Refined.These'.
  Users\n  wishing to interact with such exceptions can either just\n  use the datatype
  constituting a minimal API there, or depend\n  on the 'these' package.\n\n## [0.2.3.0]
  - 2018-06-01\n### Added\n- back in the 'Foldable' instance for 'Refined'. It is
  safe.\n\n## [0.2.2.0] - 2018-05-31\n### Removed\n- Unsafe typeclass instances that
  could break the 'Refined' invariant.\n  These should not have been added.\n\n##
  [0.2.1.0] - 2018-05-31\n### Removed\n- Unsafe typeclass instances that could break
  the 'Refined' invariant.\n  These should not have been added.\n\n## [0.2.0.0] -
  2018-05-30\n### Changed\n- Radical rewrite of the library, centred around 'RefineException'\n
  \ and the 'RefineT' monad transformer.\n  'validate' now has the type signature\n
  \ validate :: (Predicate p x, Monad m) => p -> x -> RefineT m ()\n### Added\n- More
  predicates\n"
basic-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10 && <0.11'
  these-skinny: '>=0.7.4 && <0.8'
  base: '>=4.11 && <4.15'
  text: '>=1.2 && <1.3'
  mtl: '>=2.2.2 && <2.3'
  deepseq: '>=1.4 && <1.5'
  QuickCheck: '>=2.1 && <2.15'
  aeson: '>=0.9 && <1.6'
  template-haskell: '>=2.9 && <2.17'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2
- 0.1.2.1
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
- 0.4.1
- 0.4.2
- 0.4.2.1
- 0.4.2.2
- 0.4.3
- 0.4.4
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- 0.6.2
author: Nikita Volkov <nikita.y.volkov@mail.ru>
latest: 0.6.2
description-type: markdown
description: |
  # refined

  [![Build Status](https://travis-ci.org/nikita-volkov/refined.svg?branch=master)](https://travis-ci.org/nikita-volkov/refined)

  In type theory, a refinement type is a type endowed
  with a predicate which is assumed to hold for any element
  of the refined type.

  This library allows one to capture the idea of a refinement type
  using the `Refined` type. A `Refined` `p` `x` wraps a value
  of type `x`, ensuring that it satisfies a type-level predicate `p`.

  A simple introduction to this library can be found here: http://nikita-volkov.github.io/refined/
license-name: MIT
