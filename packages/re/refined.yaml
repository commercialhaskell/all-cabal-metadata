all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2
- 0.1.2.1
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
- 0.4.1
- 0.4.2
- 0.4.2.1
- 0.4.2.2
- 0.4.3
- 0.4.4
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- '0.7'
- '0.8'
- 0.8.1
author: Nikita Volkov <nikita.y.volkov@mail.ru>
basic-deps:
  QuickCheck: '>=2.1 && <2.15'
  aeson: '>=0.9 && <2.2'
  base: '>=4.11 && <4.19'
  bytestring: '>=0.10 && <0.12'
  deepseq: '>=1.4 && <1.5'
  exceptions: '>=0.8 && <0.11'
  hashable: '>=1.0 && <1.5'
  mtl: '>=2.2.2 && <2.4'
  template-haskell: '>=2.9 && <2.21'
  text: '>=1.2 && <2.1'
  these-skinny: '>=0.7.5 && <0.8'
changelog: "# Changelog\r\nAll notable changes to this project will be documented
  in this file.\r\n\r\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\r\nand
  this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).\r\n\r\n##
  [0.8.1] - 2023-04-05\r\n### Added\r\n- `Weaken` instances for `SizeGreaterThan`,
  `SizeLessThan`.\r\n- `weakenAndLeft`, `weakenAndRight`, `weakenOrLeft`, `weakenOrRight`\r\n
  \ type inference helper functions.\r\n\r\n### Changed\r\n- bump `base`: \"< 4.18\"
  -> \"< 4.19\"\r\n- bump `mtl`: \"< 2.3\" -> \"< 2.4\"\r\n- bump `template-haskell`:
  \"< 2.20\" -> \"< 2.21\"\r\n\r\n## [0.8] - 2022-10-09\r\n### Changed\r\n- on GHC
  >=9, make `refineTH` and `refineTH_` work in any monad\r\n  `(Quote m, MonadFail
  m)`.\r\n- bump `base`: \"< 4.17\" -> \"< 4.18\"\r\n- bump `template-haskell`: \"<
  2.19\" -> \"< 2.20\"\r\n- bump `aeson`: \"< 2.1\" -> \"< 2.2\"\r\n\r\n## [0.7] -
  2022-07-01\r\n### Changed\r\n- make `Refined` predicate type `p` kind polymorphic
  (`p :: Type` -> `p :: k`)\r\n\r\n## [0.6.3] - 2022-01-14\r\n### Added\r\n- `Hashable`
  instance for `Refined`\r\n- `FromJSONKey` instance for `Refined`\r\n- `ToJSONKey`
  instance for `Refined`\r\n- `shrink` for `Refined`'s `Arbitrary` instance.\r\n-
  `refineEither` function\r\n\r\n### Changed\r\n- improved efficiency of `strengthen`\r\n-
  bump multiple dependency upper bounds\r\n\r\n## [0.6.2] - 2021-01-31\r\n### Changed\r\n-
  `strengthen` no longer returns an `Either`, since the proof\r\n  that it should
  always succeed is in its constraints.\r\n- correct `success` documentation\r\n\r\n##
  [0.6.1] - 2020-08-02\r\n### Changed\r\n- upper bound on QuickCheck: <2.14 -> <2.15\r\n\r\n##
  [0.6] - 2020-07-21\r\n### Changed\r\n- `validate` now takes a `Proxy` as its first
  argument.\r\n- All uses of prettyprinter are now just `Text`\r\n\r\n### Removed\r\n-
  Refined.These module\r\n- Dependency on `prettyprinter`\r\n\r\n### Fixed\r\n- bug
  in `sized` internal helper that caused formatting issues\r\n  in sized predicate
  errors\r\n\r\n## [0.5.1] - 2020-07-14\r\n### Changed\r\n- `refineTH_` is now implemented
  in terms of `refineTH`\r\n- Fix pretty-printing of `RefineException`s during compile-time\r\n\r\n##
  [0.5] - 2020-07-11\r\n### Added\r\n- sized Predicate instances for `Text`\r\n- sized
  Predicate instances for strict and lazy `ByteString`\r\n- INLINABLE pragmas on `refine_`
  `reifyPredicate`\r\n- `NFData` instance for `Refined`\r\n- RefineSomeException constructor.
  Enables recovering\r\n  specific validation exceptions.\r\n  Thanks to @haroldcarr
  for adding this.\r\n- RefineXorException constructor.\r\n- `Empty` and `NotEmpty`
  predicates.\r\n- `NaN` and `Infinite` predicates for floating-point numbers.\r\n-
  @since pragmas to EVERYTHING.\r\n\r\n### Changed\r\n- lower bound on mtl to 2.2.2
  due to use of liftEither.\r\n  Thanks to @k0ral for reporting this\r\n- Generalize
  sized predicates\r\n- Allow newer template-haskell (< 0.16 ==> < 0.17)\r\n- Allow
  newer aeson (< 1.5 ==> < 1.6)\r\n  Thanks to @locallycompact for this change.\r\n\r\n###
  Removed\r\n- `Refined.Internal` module\r\n  Thanks to @nikita-volkov for pushing
  me to do this.\r\n- Orphan modules\r\n  Thanks to @symbiont-sam-halliday for pointing
  out the\r\n  silliness of these modules.\r\n- `RefineT`. It was a needless abstraction
  that just made the\r\n  library harder to learn and use, providing little benefit\r\n
  \ over `Maybe RefineException`.\r\n  Thanks to @nikita-volkov for helping me see
  the light.\r\n\r\n### Deprecated\r\n- Refined.These module in favour of Data.These
  from these-skinny\r\n\r\n## [0.4.4] - 2019-10-18\r\n### Added\r\n- `refine_`\r\n-
  `refineTH_`\r\n- test suite: unit tests for compiling.\r\n### Changed\r\n- Allow
  newer `template-haskell` and `QuickCheck`.\r\n\r\n## [0.4.2.3] - 2019-09-17\r\n###
  Added\r\n- `reifyPredicate`\r\n### Fixed\r\n- `Arbitrary` instance for `Refined`
  should now always terminate.\r\n   Thanks to @symbiont-joseph-kachmar for reporting
  this.\r\n\r\n## [0.4.2.2] - 2019-07-19\r\n### Added\r\n- `exceptRefine`, `strengthen`,
  and `strengthenM`\r\n\r\n## [0.4.2.1] - 2019-05-31\r\n### Fixed\r\n- Documentation
  fix for `DivisibleBy`\r\n### Changed\r\n- Re-export `DivisibleBy`, `Even`, and `Odd`
  from module `Refined`.\r\n- Re-export all constructors from module `Refined`.\r\n\r\n##
  [0.4.2] - 2019-05-30\r\n### Removed\r\n- Re-removed dependency of `these` package.\r\n###
  Added\r\n- `Even`, `Odd`, and `DivisibleBy` predicates.\r\n- doctests for all predicates.\r\n###
  Changed\r\n- Make all predicates unary data constructors, instead of nullary,\r\n
  \ and export those newly added constructors.\r\n\r\n## [0.4.1] - 2019-04-15\r\n###
  Fixed\r\n- Serious regression where `Not p` ~ `p`. Thanks to @k0ral who reported
  this.\r\n\r\n## [0.4] - 2019-03-18\r\n### Added\r\n- 'NegativeFromTo', a Predicate
  that ensures a numeric value is within a range [a,b],\r\n  where a < 0 and b >=
  a.\r\n  Thanks to github.com/futtetennista for this change.\r\n### Changed\r\n-
  `RefinedNotException` now has a child (it should have had one in v2. This was an
  oversight.)\r\n- `displayRefineException` no longer uses tabs, instead 2 spaces.\r\n-
  make implementation of `displayRefineException` more clear via formatting.\r\n\r\n##
  [0.3.0.0] - 2018-09-26\r\n### Added\r\n- Internal module, and Unsafe modules, making
  sure to take care w.r.t.\r\n  the scope of coercions related to the use of the 'Refined'
  constructor.\r\n- 'IdPred' predicate, predicate that never fails.\r\n- Generic instances
  for all predicates.\r\n- `reallyUnsafeRefine`, `reallyUnsafeUnderlyingRefined`,
  `reallyUnsafeAllUnderlyingRefined`,\r\n  functions that allow one to use 'Coercion's
  to manually prove things about 'Refined'\r\n  values.\r\n### Changed\r\n- Type role
  of Refined from 'phantom Representational' to 'nominal nominal'.\r\n  With the old
  type role, one can use `coerce` to prove `Q x` given any `P x`.\r\n  The second
  parameter should also be nominal because of interactions with something\r\n  like
  `GreaterThan` and `Data.Ord.Down`.\r\n  Thanks to David Feuer for pointing this
  out.\r\n- Change docs to point users to 'Refined.Unsafe' module instead of recommending\r\n
  \ 'Unsafe.Coerce.unsafeCoerce'.\r\n- 'Ascending' and 'Descending' predicates now
  use 'Foldable' instead of 'IsList'.\r\n- Lowered the lower bound on 'exceptions';
  it was too strict for the support window.\r\n### Removed\r\n- Dependency of the
  'these' package. It brings in some very\r\n  heavy transitive dependencies, even
  though the datatype\r\n  in `refined` is used to the most minimal extent.\r\n  This
  is a breaking change because\r\n  this change is exposed to the end user via 'RefineAndException'.\r\n
  \ It is exported from a module called 'Refined.These'. Users\r\n  wishing to interact
  with such exceptions can either just\r\n  use the datatype constituting a minimal
  API there, or depend\r\n  on the 'these' package.\r\n\r\n## [0.2.3.0] - 2018-06-01\r\n###
  Added\r\n- back in the 'Foldable' instance for 'Refined'. It is safe.\r\n\r\n##
  [0.2.2.0] - 2018-05-31\r\n### Removed\r\n- Unsafe typeclass instances that could
  break the 'Refined' invariant.\r\n  These should not have been added.\r\n\r\n##
  [0.2.1.0] - 2018-05-31\r\n### Removed\r\n- Unsafe typeclass instances that could
  break the 'Refined' invariant.\r\n  These should not have been added.\r\n\r\n##
  [0.2.0.0] - 2018-05-30\r\n### Changed\r\n- Radical rewrite of the library, centred
  around 'RefineException'\r\n  and the 'RefineT' monad transformer.\r\n  'validate'
  now has the type signature\r\n  validate :: (Predicate p x, Monad m) => p -> x ->
  RefineT m ()\r\n### Added\r\n- More predicates\r\n"
changelog-type: markdown
description: "# refined\r\n\r\n[![Build Status](https://travis-ci.org/nikita-volkov/refined.svg?branch=master)](https://travis-ci.org/nikita-volkov/refined)\r\n\r\nIn
  type theory, a refinement type is a type endowed\r\nwith a predicate which is assumed
  to hold for any element\r\nof the refined type.\r\n\r\nThis library allows one to
  capture the idea of a refinement type\r\nusing the `Refined` type. A `Refined` `p`
  `x` wraps a value\r\nof type `x`, ensuring that it satisfies a type-level predicate
  `p`.\r\n\r\nA simple introduction to this library can be found here: http://nikita-volkov.github.io/refined/\r\n"
description-type: markdown
hash: 68bde689caa49d5e45886e01ccefb581372a86f2b1bf9a61fd4d45657f2ab69f
homepage: https://github.com/nikita-volkov/refined
latest: 0.8.1
license-name: MIT
maintainer: chessai <chessai1996@gmail.com>
synopsis: Refinement types with static and runtime checking
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  refined: '>=0'
