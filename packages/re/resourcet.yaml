homepage: http://github.com/snoyberg/conduit
changelog-type: markdown
hash: adb4c564a42546b7fc0d9d08a48f57a4700584b4e7de585cbbea8e519c30d34b
test-bench-deps:
  exceptions: -any
  base: -any
  hspec: '>=1.3'
  transformers: -any
  resourcet: -any
maintainer: michael@snoyman.com
synopsis: Deterministic allocation and freeing of scarce resources.
changelog: |
  # ChangeLog for resourcet


  ## 1.2.4.3

  * Fix a space leak when using `forever` with `ResourceT`. [#470](https://github.com/snoyberg/conduit/pull/470)

  ## 1.2.4.2

  * Mask exceptions in `Acquire` allocation action

  ## 1.2.4.1

  * Document risk of using `forkIO` within a `ResourceT` [#441](https://github.com/snoyberg/conduit/pull/441)

  ## 1.2.4

  * Add `allocate_` [#437](https://github.com/snoyberg/conduit/pull/437)

  ## 1.2.3

  * Support `unliftio-core` 0.2.0.0

  ## 1.2.2

  * Add `MonadFail` instance for `ResourceT`.

  ## 1.2.1

  * Support `exceptions-0.10`.

  ## 1.2.0

  * Drop `monad-control` and `mmorph` dependencies
  * Change behavior of `runResourceT` to match `runResourceTChecked`

  ## 1.1.11

  * `runResourceTChecked`, which checks if any of the cleanup actions
    threw exceptions and, if so, rethrows them. __NOTE__ This is
    probably a much better choice of function than `runResourceT`, and
    in the next major version release, will become the new behavior of
    `runResourceT`.

  ## 1.1.10

  * Added `MonadUnliftIO` instances and `UnliftIO.Resource`

  ## 1.1.9

  * Add generalized version of resourceForkIO

  ## 1.1.8.1

  * Allocation actions should be masked

  ## 1.1.8

  * Add `instance MonadFix ResourceT`
    [#281](https://github.com/snoyberg/conduit/pull/281)

  ## 1.1.7.5

  * Inline the tutorial from SoH

  ## 1.1.7.4

  * Make test suite slightly more robust

  ## 1.1.7.3

  * Doc tweak

  ## 1.1.7.2

  * Remove upper bound on transformers [#249](https://github.com/snoyberg/conduit/issues/249)

  ## 1.1.7.1

  * transformers-compat 0.5

  ## 1.1.7

  * Canonicalise Monad instances [#237](https://github.com/snoyberg/conduit/pull/237)

  ## 1.1.6

  * Safe/Trustworthy for resourcet [#220](https://github.com/snoyberg/conduit/pull/220)

  ## 1.1.5

  *  Add pass-through instances for Alternative and MonadPlus [#214](https://github.com/snoyberg/conduit/pull/214)

  ## 1.1.4.1

  * Allow older `exceptions` version again

  ## 1.1.4

  * Add `MonadResource ExceptT` instance [#198](https://github.com/snoyberg/conduit/pull/198)

  ## 1.1.3.2

  monad-control-1.0 support [#191](https://github.com/snoyberg/conduit/pull/191)

  ## 1.1.3

  Provide the `withEx` function to interact nicely with the exceptions package.
basic-deps:
  exceptions: (==0.8.* || ==0.10.*)
  base: '>=4.9 && <5'
  containers: -any
  unliftio-core: '>=0.1.1.0'
  mtl: '>=2.0 && <2.3'
  transformers: '>=0.4'
  primitive: -any
all-versions:
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.3.2.2
- 0.3.3
- 0.3.3.1
- 0.4.0
- 0.4.0.1
- 0.4.0.2
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.7.1
- 0.4.7.2
- 0.4.8
- 0.4.9
- 0.4.10
- 0.4.10.1
- 0.4.10.2
- 1.1.0
- 1.1.0.1
- 1.1.1
- 1.1.2
- 1.1.2.1
- 1.1.2.2
- 1.1.2.3
- 1.1.3
- 1.1.3.1
- 1.1.3.2
- 1.1.3.3
- 1.1.4
- 1.1.4.1
- 1.1.5
- 1.1.6
- 1.1.7
- 1.1.7.1
- 1.1.7.2
- 1.1.7.3
- 1.1.7.4
- 1.1.7.5
- 1.1.8
- 1.1.8.1
- 1.1.9
- 1.1.10
- 1.1.11
- 1.2.0
- 1.2.1
- 1.2.2
- 1.2.3
- 1.2.4
- 1.2.4.1
- 1.2.4.2
- 1.2.4.3
author: Michael Snoyman
latest: 1.2.4.3
description-type: markdown
description: "## resourcet\n\nProper exception handling, especially in the presence
  of asynchronous\nexceptions, is a non-trivial task. But such proper handling is
  absolutely vital\nto any large scale application. Leaked file descriptors or database
  connections\nwill simply not be an option when writing a popular web application,
  or a high\nconcurrency data processing tool. So the question is, how do you deal
  with it?\n\nThe standard approach is the bracket pattern, which appears throughout
  much of\nthe standard libraries. `withFile` uses the bracket pattern to safely wrap
  up\n`openFile` and `closeFile`, guaranteeing that the file handle will be closed
  no\nmatter what. This approach works well, and I highly recommend using it.\n\nHowever,
  there's another approach available: the [resourcet\npackage](https://www.stackage.org/package/resourcet).
  \ If the bracket pattern\nis so good, why do we need another one? The goal of this
  post is to answer that\nquestion.\n\n## What is ResourceT\n\nResourceT is a monad
  transformer which creates a region of code where you can safely allocate resources.
  Let's write a simple example program: we'll ask the user for some input and pretend
  like it's a scarce resource that must be released. We'll then do something dangerous
  (potentially introducing a divide-by-zero error). We then want to immediately release
  our scarce resource and perform some long-running computation.\n\n```haskell\n#!/usr/bin/env
  stack\n{- stack\n     --resolver lts-9.0\n     --install-ghc\n     runghc\n     --package
  resourcet\n-}\n\nimport Control.Monad.Trans.Resource\nimport Control.Monad.IO.Class\n\nmain
  :: IO ()\nmain = runResourceT $ do\n    (releaseKey, resource) <- allocate\n        (do\n
  \           putStrLn \"Enter some number\"\n            readLn)\n        (\\i ->
  putStrLn $ \"Freeing scarce resource: \" ++ show i)\n    doSomethingDangerous resource\n
  \   liftIO $ putStrLn $ \"Going to release resource immediately: \" ++ show resource\n
  \   release releaseKey\n    somethingElse\n\ndoSomethingDangerous :: Int -> ResourceT
  IO ()\ndoSomethingDangerous i =\n    liftIO $ putStrLn $ \"5 divided by \" ++ show
  i ++ \" is \" ++ show (5 `div` i)\n\nsomethingElse :: ResourceT IO ()    \nsomethingElse
  = liftIO $ putStrLn\n    \"This could take a long time, don't delay releasing the
  resource!\"\n\n```\n\nTry entering a valid value, such as 3, and then enter 0. Notice
  that in both cases the \"Freeing scarce resource\" message is printed. \n\n``` shellsession\n~
  $ stack code.hs\nEnter some number\n3\n5 divided by 3 is 1\nGoing to release resource
  immediately: 3\nFreeing scarce resource: 3\nThis could take a long time, don't delay
  releasing the resource!\n\n~ $ stack code.hs\nEnter some number\n0\n5 divided by
  0 is Freeing scarce resource: 0\ncode.hs: divide by zero\n```\n\nAnd by using `release`
  before `somethingElse`, we guarantee that the resource is freed *before* running
  the potentially long process.\n\nIn this specific case, we could easily represent
  our code in terms of bracket with a little refactoring.\n\n```haskell\nimport Control.Exception
  (bracket)\n\nmain :: IO ()\nmain = do\n    bracket\n        (do\n            putStrLn
  \"Enter some number\"\n            readLn)\n        (\\i -> putStrLn $ \"Freeing
  scarce resource: \" ++ show i)\n        doSomethingDangerous\n    somethingElse\n\ndoSomethingDangerous
  :: Int -> IO ()\ndoSomethingDangerous i =\n    putStrLn $ \"5 divided by \" ++ show
  i ++ \" is \" ++ show (5 `div` i)\n\nsomethingElse :: IO ()\nsomethingElse = putStrLn\n
  \   \"This could take a long time, don't delay releasing the resource!\"\n```\n\nIn
  fact, the `bracket` version is cleaner than the resourcet version. If so, why bother
  with resourcet at all? Let's build up to the more complicated cases.\n\n## bracket
  in terms of ResourceT\n\nThe first thing to demonstrate is that `ResourceT` is strictly
  more powerful than `bracket`, in the sense that:\n\n1. `bracket` can be implemented
  in terms of `ResourceT`.\n2. `ResourceT` cannot be implemented in terms of `bracket`.\n\nThe
  first one is pretty easy to demonstrate:\n\n```haskell\n#!/usr/bin/env stack\n{-
  stack\n     --resolver lts-9.0\n     --install-ghc\n     runghc\n     --package
  resourcet\n-}\n\n{-# LANGUAGE FlexibleContexts #-}\n\nimport Control.Monad.Trans.Resource\nimport
  Control.Monad.Trans.Class\nimport Control.Monad.IO.Class (MonadIO)\n\nbracket ::\n
  \ (MonadThrow m, MonadBaseControl IO m,\n   MonadIO m) =>\n  IO t -> (t -> IO ())
  -> (t -> m a) -> m a\nbracket alloc free inside = runResourceT $ do\n  (releaseKey,
  resource) <- allocate alloc free\n  lift $ inside resource\n\nmain :: IO ()\nmain
  = bracket\n       (putStrLn \"Allocating\" >> return 5)\n       (\\i -> putStrLn
  $ \"Freeing: \" ++ show i)\n       (\\i -> putStrLn $ \"Using: \" ++ show i)\n```\n\nNow
  let's analyze why the second statement is true.\n\n## What ResourceT adds\n\nThe
  `bracket` pattern is designed with nested resource allocations. For example, consider
  the following program which copies data from one file to another. We'll open up
  the source file using `withFile`, and then nest within it another `withFile` to
  open the destination file, and finally do the copying with both file handles.\n\n```haskell\n{-#
  START_FILE main.hs #-}\nimport System.IO\nimport qualified Data.ByteString as S\n\nmain
  = do\n    withFile \"input.txt\" ReadMode $ \\input ->\n      withFile \"output.txt\"
  WriteMode $ \\output -> do\n        bs <- S.hGetContents input\n        S.hPutStr
  output bs\n    S.readFile \"output.txt\" >>= S.putStr\n{-# START_FILE input.txt
  #-}\nThis is the input file.\n```\n\nBut now, let's tweak this a bit. Instead of
  reading from a single file, we want to read from two files and concatenate them.
  We could just have three nested `withFile` calls, but that would be inefficient:
  we'd have two `Handle`s open for reading at once, even though we'll only ever need
  one. We could restructure our program a bit instead: put the `withFile` for the
  output file on the outside, and then have two calls to `withFile` for the input
  files on the inside.\n\nBut consider a more complicated example. Instead of just
  a single destination file, let's say we want to break up our input stream into chunks
  of, say, 50 bytes each, and write each chunk to successive output files. We now
  need to __interleave__ allocations and freeings of both the source and destination
  files, and we cannot statically know exactly how the interleaving will look, since
  we don't know the size of the files at compile time.\n\nThis is the kind of situation
  that `resourcet` solves well (we'll demonstrate in the next section). As an extension
  of this, we can write library functions which allow user code to request arbitrary
  resource allocations, and we can guarantee that they will be cleaned up. A prime
  example of this is in WAI (Web Application Interface). The user application may
  wish to allocate some scarce resources (such as database statements) and use them
  in the generation of the response body. Using `ResourceT`, the web server can guarantee
  that these resources will be cleaned up.\n\n\n## Interleaving with conduit\n\nLet's
  demonstrate the interleaving example described above. To simplify the code, we'll
  use the conduit package for the actual chunking implementation. Notice when you
  run the program that there are never more than two file handles open at the same
  time.\n\n```haskell\n#!/usr/bin/env stack\n{- stack\n     --resolver lts-10.0\n
  \    --install-ghc\n     runghc\n     --package resourcet\n     --package conduit\n
  \    --package directory\n-}\n\n{-#LANGUAGE FlexibleContexts#-}\n{-#LANGUAGE RankNTypes#-}\n\nimport
  \          Control.Monad.IO.Class (liftIO)\nimport           Control.Monad.Trans.Resource
  (runResourceT, ResourceT, MonadResource)\nimport           Data.Conduit           (Producer,
  Consumer,addCleanup, (.|))\nimport           Conduit (runConduitRes)\nimport           Data.Conduit.Binary
  \   (isolate, sinkFile, sourceFile)\nimport           Data.Conduit.List      (peek)\nimport
  \          Data.Conduit.Zlib      (gzip)\nimport           System.Directory       (createDirectoryIfMissing)\nimport
  qualified Data.ByteString as B\n\n-- show all of the files we'll read from\ninfiles
  :: [String]\ninfiles = map (\\i -> \"input/\" ++ show i ++ \".bin\") [1..10]\n\n--
  Generate a filename to write to\noutfile :: Int -> String\noutfile i = \"output/\"
  ++ show i ++ \".gz\"\n\n-- Modified sourceFile and sinkFile that print when they
  are opening and\n-- closing file handles, to demonstrate interleaved allocation.\nsourceFileTrace
  :: (MonadResource m) => FilePath -> Producer m B.ByteString\nsourceFileTrace fp
  = do\n    liftIO $ putStrLn $ \"Opening: \" ++ fp\n    addCleanup (const $ liftIO
  $ putStrLn $ \"Closing: \" ++ fp) (sourceFile fp)\n\nsinkFileTrace :: (MonadResource
  m) => FilePath -> Consumer B.ByteString m ()\nsinkFileTrace fp = do\n    liftIO
  $ putStrLn $ \"Opening: \" ++ fp\n    addCleanup (const $ liftIO $ putStrLn $ \"Closing:
  \" ++ fp) (sinkFile fp)\n\n-- Monad instance of Producer allows us to simply mapM_
  to create a single Source\n-- for reading all of the files sequentially.\nsource
  :: (MonadResource m) => Producer m B.ByteString\nsource = mapM_ sourceFileTrace
  infiles\n\n-- The Sink is a bit more complicated: we keep reading 30kb chunks of
  data into\n-- new files. We then use peek to check if there is any data left in
  the\n-- stream. If there is, we continue the process.\nsink :: (MonadResource m)
  => Consumer B.ByteString m ()\nsink =\n    loop 1\n  where\n    loop i = do\n        isolate
  (30 * 1024) .| sinkFileTrace (outfile i)\n        mx <- peek\n        case mx of\n
  \           Nothing -> return ()\n            Just _ -> loop (i + 1)\n\nfillRandom
  :: FilePath -> IO ()\nfillRandom fp = runConduitRes $ \n                sourceFile
  \"/dev/urandom\" \n                .| isolate (50 * 1024) \n                .| sinkFile
  fp\n\n-- Putting it all together is trivial. ResourceT guarantees we have exception\n--
  safety.\ntransform :: IO ()\ntransform = runConduitRes $ source .| gzip .| sink\n--
  /show\n\n-- Just some setup for running our test.\nmain :: IO ()\nmain = do\n    createDirectoryIfMissing
  True \"input\"\n    createDirectoryIfMissing True \"output\"\n    mapM_ fillRandom
  infiles\n    transform\n```\n\n## resourcet is not conduit\n\nresourcet was originally
  created in the process of writing the conduit package.\nAs a result, many people
  have the impression that these two concepts are\nintrinsically linked. In fact,
  this is not true: each can be used separately\nfrom the other. The canonical demonstration
  of resourcet combined with conduit\nis the file copy function:\n\n```haskell\n#!/usr/bin/env
  stack\n{- stack\n     --resolver lts-10.0\n     --install-ghc\n     runghc\n     --package
  conduit\n     --package resourcet\n-}\n\n{-#LANGUAGE FlexibleContexts#-}\n\nimport
  Data.Conduit\nimport Data.Conduit.Binary\n\nfileCopy :: FilePath -> FilePath ->
  IO ()\nfileCopy src dst = runConduitRes $ sourceFile src .| sinkFile dst\n\nmain
  :: IO ()\nmain = do\n  writeFile \"input.txt\" \"Hello\"\n  fileCopy \"input.txt\"
  \"output.txt\"\n  readFile \"output.txt\" >>= putStrLn\n```\n\nHowever, since this
  function does not actually use any of ResourceT's added functionality, it can easily
  be implemented with the bracket pattern instead:\n\n```haskell\n#!/usr/bin/env stack\n{-
  stack\n     --resolver lts-10.0\n     --install-ghc\n     runghc\n     --package
  conduit\n-}\n\nimport Data.Conduit\nimport Data.Conduit.Binary\nimport System.IO\n\nfileCopy
  :: FilePath -> FilePath -> IO ()\nfileCopy src dst = withFile src ReadMode $ \\srcH
  ->\n                   withFile dst WriteMode $ \\dstH ->\n                   sourceHandle
  srcH $$ sinkHandle dstH\n\nmain :: IO ()\nmain = do\n    writeFile \"input.txt\"
  \"Hello\"\n    fileCopy \"input.txt\" \"output.txt\"\n    readFile \"output.txt\"
  >>= putStrLn\n```\n\nLikewise, resourcet can be freely used for more flexible resource
  management without touching conduit. In other words, these two libraries are completely
  orthogonal and, while they complement each other nicely, can certainly be used separately.\n\n##
  Conclusion\n\nResourceT provides you with a flexible means of allocating resources
  in an exception safe manner. Its main advantage over the simpler bracket pattern
  is that it allows interleaving of allocations, allowing for more complicated programs
  to be created efficiently. If your needs are simple, stick with bracket. If you
  have need of something more complex, resourcet may be your answer. For understanding
  how it works under the hood, refer [here](https://www.fpcomplete.com/blog/2017/06/understanding-resourcet).\n"
license-name: BSD-3-Clause
