all-versions:
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.8.1
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.1.4
- 0.4.0
author: Alberto GÃ³mez Corona
basic-deps:
  base: '>=4 && <5'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  hashtables: '>=0'
  stringsearch: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Read, Show and Binary instances do not check for internal data references to the same address.
  As a result, the data is duplicated when serialized. This is a waste of space in the filesystem
  and  also a waste of serialization time. but the worst consequence is that, when the serialized data is read,
  it allocates multiple copies for the same object when referenced multiple times. Because multiple referenced
  data is very typical in a pure language such is Haskell, this means that the resulting data loose the beatiful
  economy of space and processing time that referential transparency permits.

  In this release:

  Compatibility with older versions of bytestring that have no 'toStrict' call

  deserialization is much, much faster by using the stringsearch package

  See "Data.RefSerialize" for details
description-type: haddock
hash: 737485e162605317027b036f3f3c43abfb38c43d3ce610fc1b2a4214f4990bd0
homepage: ''
latest: 0.4.0
license-name: BSD-3-Clause
maintainer: agocorona@gmail.com
synopsis: Write to and read from ByteStrings maintaining internal memory references
test-bench-deps: {}
