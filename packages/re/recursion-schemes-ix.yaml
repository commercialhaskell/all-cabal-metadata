all-versions:
- 0.1.0.0
author: Skye Soss
basic-deps:
  base: '>=4.12 && <4.15'
  singlethongs: ==0.1
changelog: |+
  # Changelog for recursion-schemes-ix

  ## 0.0.1.0

  Initial release

  Multiple last-minute changes:

  * Switched from `singletons` to `singlethongs`
    - `singletons` has unnecessary dependencies, and is unable to compile
      with the current `ghcjs` version.
  * Removed QuantifiedConstraints extension usage throughout
    - Allowed the removal of UndecidableInstances in most files
  * Added the `ITraversable` class and monadic recursion-schemes
    - TODO: determine if `IFunctor` should just be removed,
      ie. determine if there are any `IFunctor`s that are not `ITraversable`

changelog-type: markdown
description: |2+

  # recursion-schemes-ix

  ## Recursion schemes over indexed datatypes

  Heavily inspired by `multirec`, this library uses `PolyKinds`
  and `SingI` constraints to achieve the same dependent typing as `multirec`.

  This library defines the `IFunctor` typeclass and recursion-schemes
  on `IFunctor`s.

  Goals:
  * Minimal dependencies
    - This library depends only on `singlethongs`, which in turn only depends
      on `template-haskell`. As a result, it should be easy to include in
      any project
  * GHCJS compatibility
    - This package is used in a compiler that I want to be able to run in the
      browser
  * Ease of use
    - Once everything is set-up, writing a recursion-scheme should not be
      overly complex (looking at you, `mulrirec`)

  Non-Goals:
  * Eliminating boilerplate
    - This library requires hand-written `IShow`, `IRead`, `IEq`, `IOrd`, `ITraversable` instances.
      I also recommend writing pattern synonyms to remove the `IFix` constructor.
      Writing these can be a pain, but its only required once for the main data structure,
      and one `IFunctor` instance whenever you write a dependent recursion-scheme.
  * Speed
    - The code in the library mimics the `recurion-schemes` library almost directly,
      simply lifting everything up from `*` to `k -> *`. In a future release,
      `INLINE` pragmas will be added and possibly benchmarked.

  ## Documentation

  Not written, but haddocks on the github user site.

description-type: markdown
hash: 9e99f27a38af741a0620eb44590e24fe90377f2bc70c686bbd3e8bdbd774dc55
homepage: https://github.com/Skyb0rg007/recursion-schemes-ix#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: skyler.soss@gmail.com
synopsis: Recursion schemes over indexed Functors
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.12 && <4.15'
  containers: '>=0'
  hspec: '>=0'
  mtl: '>=0'
  recursion-schemes-ix: '>=0'
  singlethongs: ==0.1
