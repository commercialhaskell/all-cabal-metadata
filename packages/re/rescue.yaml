all-versions:
- 0.2.0
- 0.2.1
- 0.3.0
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.2.1
author: Brooklyn Zelenka
basic-deps:
  base: <5
  exceptions: '>=0'
  ghc: '>=0'
  mtl: '>=0'
  text: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
  world-peace: '>=0'
changelog: ''
changelog-type: ''
description: "# \U0001F692âœ¨ Rescue\n## More Understandable Error Handling\n\n![Continuous
  Integration](https://github.com/fission-suite/fission/workflows/Continuous%20Integration/badge.svg)\n![License](https://img.shields.io/github/license/expede/rescue)\n\n`rescue`
  is an experimental error handling library for Haskell.\n\nThe standard library approach
  to error handling is to use an existential type to\n_subclass_ any error as `SomeException`.
  This is very convenient \n(requires nealy zero set up), and matches what  developers
  expect coming from \nother ecosystems.\n\nA core goal of `rescue` is to give the
  programmer clarity about which execptions\nare possible at any given point in the
  code. We achieve this by using (open) variants\nfor compositon rather than inheritance.
  We hide the detail as much as posisble,\nand attempt to make this work in a flexible,
  constraint-driven style as much \nas possible.\n\nPerhaps there is some value in
  treating these more separately. \nThere is an old distinction that mirrors the above
  as errors (irrecoverable) \nvs exceptions (recoverable).\n\n`rescue` breaks the
  problem into synchronous and asynchoronous exceptions.\nThis distinction allows
  us to express our assumptions about the error \nenvironment, separate modes of handling
  for the same monadic stack, \nand even different errors.\n\n# Goals\n\nOur goals
  are to have:\n\n* Clarity of what errors can be raised by some code\n* Not need
  a large tree of error types for our application (set-like)\n* Way to declare assumptions
  about which errrors are available\n  * e.g. \"can raise X, Y, and Z\", or \"raises
  exactly X and Y but none others\"\n* Extensible\n* Ability to call code that raises
  some subset of errors\n* Handle (and eliminate) exceptions from the context\n\n#
  Approach\n\nThe closest approach is `MonadError`, except that our implementation
  uses \ntype-level lists for flexiblity,  and hides the exception parameter from
  the \nclass constraint as a type family.  `rescue` also splits `raise` and `attempt`
  \ninto separate classes to help us more granularly express the effects available
  \nin the current context. \n\n## Class Heirarchy\n\n1. `MonadRaise` -- roughly `MonadThrow`\n2.
  `MonadRescue` -- roughly `MonadCatch`\n3. `MonadCleanup` -- roughly `MonadBracket`\n\n`Monad
  m => MonadRaise m => MonadRescue m => MonadCleanup m`\n\n## Errors / Asynchronous
  Exceptions\n\nAn asynchronous error (e.g. coming from another thread)\ncomes with
  a lot more uncertainty. We may not be aware of the type of error\nbeing thrown to
  us, or when it's thrown (since the runtime will interrupt).\nThe purpose of this
  scenraio is typically to cleanup some resource \nand immeditely rethrow.\n\nWhile
  a more structured, type-driven style would be appreciated here, this is\nfundamentally
  how the runtime works. As such, we do need to contend \nwith `SomeAsyncException`s.\n\nThe
  good news is that we're not expected to do much with them. Essentially all\nwe care
  about is:\n\n* _That_ an async exception interrupted our flow, \n* We should not
  attempt recovery\n* The error should be rethrown\n\nCleanup is also a use case for
  synchronous exceptions. If something is thrown\ninside a context with an open resource,
  we should clean that up.\n\nThe basic flow for an async execption is then:\n\n1.
  An async exception is raised\n2. Convert it to a synchronous exception \n3. Run
  the normal cleanup\n4. Rethrow the original asynchronous error\n\nThis means that
  any instacne of MonadAsyncCleanup needs a MonadCleanup and `Raises m SomeAsyncException`\n\n#
  FAQ\n\n## Why another typeclass?\n\nIt's true that MonadThrow is totally pervasive.
  However, not trying to \n\nThere's also nothing stopping us from writing a function
  of the type\n\n```haskell\nfromThrow :: (MonadCatch m, MonadRaise n) => m a -> n
  a\n```\n\n...though the conversion from `SomeException` would take a bit of care.\n\n##
  Why avoid `SomeException`?\n\n`SomeException` is typesafe, but very difficult to
  track by hand.\nIn fact, with async exceptions, you may need to handle an error
  interrupting\nyour execution _even if you don't have a `MonadThrow`_ in your context.\n\nBy
  treating exceptions as something visible and tarckable (though hidden\nwhen you
  don't need it), we gain a lot of ability to reason about our program,\nand avoid
  writing lots of nested `Either`s.\n\n## Does this do async exception handling?\n\nIt
  does! `MonadCleanup` is the typeclass, and it has very few instances.\nIt's essentially
  [`MonadBracket`](https://www.fpcomplete.com/blog/2017/02/monadmask-vs-monadbracket/),\nbut
  with explicit errors.\n\nThis separation of the `SomeException` and `OpenUnion`
  can help determine the\nintention of the exception. `SomeException` (and `SomeAsyncException`)
  are really\nmore like errors -- things that should fail and not be recovered from.
  In a world\nwith async exceptions, the cleanest way to respond to an error is to
  stop\nour execution, cleanup any resources, and propogate the error.\n\n## Are there
  other packages attempting to solve this problem?\n\nYep! For instance, [`safe-exceptions`](https://hackage.haskell.org/package/safe-exceptions).\nThey
  distinguish between three kinds of exceptions:\n\n> We're going to define three
  different versions of exceptions. Note that these definitions are based on how the
  exception is thrown, not based on what the exception itself is:\n>\n>    **Synchronous**
  exceptions are generated by the current thread. What's important about these is
  that we generally want to be able to recover from them. For example, if you try
  to read from a file, and the file doesn't exist, you may wish to use some default
  value instead of having your program exit, or perhaps prompt the user for a different
  file location.\n>\n>    **Asynchronous** exceptions are thrown by either a different
  user thread, or by the runtime system itself. For example, in the async package,
  race will kill the longer-running thread with an asynchronous exception. Similarly,
  the timeout function will kill an action which has run for too long. And the runtime
  system will kill threads which appear to be deadlocked on MVars or STM actions.\n>\n>
  \   In contrast to synchronous exceptions, we almost never want to recover from
  asynchronous exceptions. In fact, this is a common mistake in Haskell code, and
  from what I've seen has been the largest source of confusion and concern amongst
  users when it comes to Haskell's runtime exception system.\n\n>    **Impure** exceptions
  are hidden inside a pure value, and exposed by forcing evaluation of that value.
  Examples are error, undefined, and impureThrow. Additionally, incomplete pattern
  matches can generate impure exceptions. Ultimately, when these pure values are forced
  and the exception is exposed, it is thrown as a synchronous exception.\n>\n>    Since
  they are ultimately thrown as synchronous exceptions, when it comes to handling
  them, we want to treat them in all ways like synchronous exceptions. Based on the
  comments above, that means we want to be able to recover from impure exceptions.\n\n...along
  with some general guidance...\n\n>   All synchronous exceptions should be recoverable\n>
  \  All asynchronous exceptions should not be recoverable\n>   In both cases, cleanup
  code needs to work reliably\n\nRescue is primarily focused on deligering a great
  experince when dealing with \nsynchronous excpetions, though touches on async ones
  as well. \n"
description-type: markdown
hash: 53256f87722af6f91e9e4ed18741c5e2515a0432ae7e94b16e3edf73931ec0c3
homepage: https://github.com/expede/rescue#readme
latest: 0.4.2.1
license-name: Apache-2.0
maintainer: hello@brooklynzelenka.com
synopsis: More understandable exceptions
test-bench-deps:
  Glob: '>=0'
  QuickCheck: '>=0'
  base: <5
  criterion: '>=0'
  directory: '>=0'
  directory-tree: '>=0'
  doctest: '>=0'
  exceptions: '>=0'
  ghc: '>=0'
  hlint: '>=0'
  hspec: '>=0'
  hspec-core: '>=0'
  hspec-expectations: '>=0'
  lens-aeson: '>=0'
  mtl: '>=0'
  quickcheck-instances: '>=0'
  rescue: '>=0'
  rio: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  tasty-hunit: '>=0'
  tasty-rerun: '>=0'
  tasty-smallcheck: '>=0'
  text: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
  world-peace: '>=0'
  yaml: '>=0'
