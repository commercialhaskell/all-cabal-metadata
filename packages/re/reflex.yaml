homepage: https://reflex-frp.org
changelog-type: markdown
hash: 2ea3db2ed15b83eed6b15f7c1aaceeda9e783b611ac530032f6aeaf0d33b8ef0
test-bench-deps:
  hlint: (<2.1 || >=2.2.2) && <4
  semialign: -any
  these: -any
  dependent-sum: -any
  witherable: -any
  monoidal-containers: -any
  constraints-extras: -any
  split: -any
  stm: -any
  filemanip: -any
  base: -any
  time: -any
  hspec: -any
  text: -any
  dependent-map: -any
  filepath: -any
  criterion: -any
  process: -any
  patch: -any
  ref-tf: -any
  constraints: -any
  loch-th: -any
  containers: -any
  lens: -any
  bifunctors: -any
  mtl: -any
  reflex: -any
  proctest: -any
  transformers: -any
  deepseq: -any
  these-lens: -any
  primitive: -any
  directory: -any
maintainer: ryan.trinkle@gmail.com
synopsis: Higher-order Functional Reactive Programming
changelog: |
  # Revision history for reflex

  ## 0.8.2.0

  * Add `matchResponseMapWithRequests`, which it similar to `matchResponsesWithRequests` but allows processing of multiple responses at once.

  ## 0.8.1.1

  * Allow newer hlint for older GHCs, and add upper bound for newer GHCs

  ## 0.8.1.0

  * Add support for GHC 8.10
  * Drop support for GHC < 8.4

  ## 0.8.0.0

  * Replace 0.7.2.0 with 0.8.0.0 to reflect the `MonadHold` interface change. Deprecates 0.7.2.0.

  ## 0.7.2.0 -- *Deprecated*

  * ([#416](https://github.com/reflex-frp/reflex/pull/416)) Add `now :: m (Event t ())` to `MonadHold`.
  * Extend some dependency version bounds
  * Fix HLint 3 test

  ## 0.7.1.1

  *Backport release*.
  Changes do not carry forward to 0.7.2.0.

  * Add support for GHC 8.10
  * Drop support for GHC < 8.4
  * Extend some dependency version bounds
  * Fix HLint 3 test

  ## 0.7.1.0

  * ([#413](https://github.com/reflex-frp/reflex/pull/413), [#417](https://github.com/reflex-frp/reflex/pull/417)) Add `Reflex.Host.Headless` module which provides `runHeadlessApp` as an easy way to run a Reflex network in a "headless" environment.
  * ([#420](https://github.com/reflex-frp/reflex/pull/420)) Add a [`Data.Zip.Unzip`](https://hackage.haskell.org/package/semialign-1.1/docs/Data-Zip.html#t:Unzip) instance for `Event`.
  * ([#419](https://github.com/reflex-frp/reflex/pull/419)) Add `distributeIntMapOverDynPure` and `joinDynThroughIntMap` as convenience functions for working with `Dynamic` `IntMap`s.


  ## 0.7.0.0

  * Add lifting instances for most classes to `Reflex.Profiled.Profiled`. ([#398](https://github.com/reflex-frp/reflex/pull/398))
  * Class `MonadQuery t q m` now has a `Monad m` superclass constraint. ([#400](https://github.com/reflex-frp/reflex/pull/400))
  * **(Breaking change)** Rename class `MonadBehaviorWriter` -> `BehaviorWriter` for consistency with `EventWriter`/`DynamicWriter`. ([#401](https://github.com/reflex-frp/reflex/pull/401))
  * Introduce deprecated alias `MonadBehaviorWriter = BehaviorWriter`. ([#401](https://github.com/reflex-frp/reflex/pull/401))
  * Fix bug in spider where event subscriptions would be prematurely finalized due to over-aggressive inlining. ([#409](https://github.com/reflex-frp/reflex/pull/409))
  * Add instances of `PerformEvent` and `TriggerEvent` for `MaybeT`. ([#395](https://github.com/reflex-frp/reflex/pull/395))

  ## 0.6.4.1

  * Fix a bug in the Reflex Profiled transformer where
    `Reflex.Class.mergeIncrementalG` and
    `Reflex.Class.mergeIncrementalWithMoveG` implementations referenced
    itself instead of the inner transformed timeline, causing an
    infinite loop.

  ## 0.6.4

  * Support GHC 8.8

  * Add `Reflex.Query.Base.mapQueryT`. See that module for documentation

  * The `Reflex.Patch.*` modules were moved to the `patch` library.
    They are `Data.Patch.*` there, but reexported under their old names for backwards compatability here.

  * Additional instances for `Query` classes for basic types.

  * Add cabal flags `debug-propagation` and `debug-event-cycles` to build in debugging
    code for performance and for cyclic dependencies between events

  ## 0.6.3

  * `Data.WeakBag.traverse` and `Data.FastWeakBag.traverse` have been deprecated.
    They are replaced with `Data.WeakBag.traverse_` and `Data.FastWeakBag.traverse_`, respectively.

  * Fixes a bug in `Reflex.Patch.MapWithMove.patchThatSortsMapWith` that was producing invalid `PatchMapWithMove`.

  * Add missing `NotReady` instances:
     - `instance NotReady (SpiderTimeline x) (SpiderHost x)`
     - `instance HasSpiderTimeline x => NotReady (SpiderTimeline x) (PerformEventT (SpiderTimeline x) (SpiderHost x))`

  ## 0.6.2.4

  * Update to monoidal-containers 0.6

  ## 0.6.2.3

  * Add an upper-bound to witherable

  ## 0.6.2.2

  * Support these >= 1. Add `split-these` flag to control whether to use new these/semialign combination or not.

  * Update version bounds to fix some CI failures

  * Add travis CI configuration

  ## 0.6.2.1

  * Generalize `fan` to `fanG` to take a `DMap` with non-`Identity`
    functor:
      * `fan` to `fanG`
      * `EventSelectorG` for `fanG` result selector.

  * Reduce the amount of unsafeCoerce in coercing newtypes under Event/Dynamic/Behavior.
      * Add fused ReaderIO for the purpose of coercion (ReaderT's third argument has nominal role preventing automated coerce)
      * Add incrementalCoercion/coerceIncremental to go with dynamicCoercion/coerceDynamic

  * Generalize merging functions:
    `merge` to `mergeG`,
    `mergeIncremental` to `mergeIncrementalG`,
    `mergeIncrementalWithMove` to `mergeIncrementalWithMoveG`.

  * Generalize distribute function:
      `distributeDMapOverDynPure` to `distributeDMapOverDynPureG`,

  ## 0.6.2.0

  * Fix `holdDyn` so that it is lazy in its event argument
    These produce `DMap`s  whose values needn't be `Identity`.

  * Stop using the now-deprecated `*Tag` classes (e.g., `ShowTag`).

  * Fix `holdDyn` so that it is lazy in its event argument.

  ## 0.6.1.0

  * Re-export all of `Data.Map.Monoidal`

  * Fix `QueryT` and `RequesterT` tests

  ## 0.6.0.0 -- 2019-03-20

  * Deprecate `FunctorMaybe` in favor of `Data.Witherable.Filterable`. We still export `fmapMaybe`, `ffilter`, etc., but they all rely on `Filterable` now.

  * Rename `MonadDynamicWriter` to `DynamicWriter` and add a deprecation for the old name.

  * Remove many deprecated functions.

  * Add a `Num` instance for `Dynamic`.

  * Add `matchRequestsWithResponses` to make it easier to use `Requester` with protocols that don't do this matching for you.

  * Add `withRequesterT` to map functions over the request and response of a `RequesterT`.

  * Suppress nil patches in `QueryT` as an optimization. The `Query` type must now have an `Eq` instance.

  * Add `throttleBatchWithLag` to `Reflex.Time`. See that module for details.
basic-deps:
  semigroupoids: '>=4.0 && <6'
  semialign: '>=1 && <1.2'
  these: '>=1 && <1.2'
  dependent-sum: '>=0.6 && <0.8'
  reflection: ==2.1.*
  witherable: '>=0.3 && <0.4'
  monoidal-containers: '>=0.6 && <0.7'
  constraints-extras: '>=0.3 && <0.4'
  stm: '>=2.4 && <2.6'
  exception-transformers: ==0.4.*
  base: '>=4.11 && <4.15'
  time: '>=1.4 && <1.10'
  comonad: '>=5.0.4 && <5.1'
  dependent-map: '>=0.3 && <0.5'
  prim-uniq: '>=0.1.0.1 && <0.3'
  syb: '>=0.5 && <0.8'
  unbounded-delays: '>=0.1.0.0 && <0.2'
  monad-control: '>=1.0.1 && <1.1'
  patch: '>=0.0.1 && <0.1'
  ref-tf: ==0.4.*
  constraints: '>=0.10 && <0.14'
  data-default: '>=0.5 && <0.8'
  containers: '>=0.6 && <0.7'
  haskell-src-exts: '>=1.16 && <1.24'
  lens: '>=4.7 && <5'
  bifunctors: '>=5.2 && <5.6'
  mtl: '>=2.1 && <2.3'
  mmorph: '>=1.0 && <1.2'
  MemoTrie: ==0.6.*
  transformers: '>=0.5.6.0 && <0.6'
  random: ==1.1.*
  haskell-src-meta: '>=0.6 && <0.9'
  template-haskell: '>=2.9 && <2.17'
  primitive: '>=0.5 && <0.8'
  profunctors: '>=5.3 && <5.7'
all-versions:
- 0.0.1
- 0.1.0
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.4.0
- 0.4.0.1
- '0.5'
- 0.5.0.1
- '0.6'
- 0.6.1
- 0.6.2.4
- 0.6.3
- 0.6.4
- 0.6.4.1
- 0.7.0.0
- 0.7.1.0
- 0.7.1.1
- 0.8.0.0
- 0.8.1.0
- 0.8.1.1
- 0.8.2.0
author: Ryan Trinkle
latest: 0.8.2.0
description-type: markdown
description: |
  # [Reflex](https://reflex-frp.org/)

  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/reflex.svg)](https://hackage.haskell.org/package/reflex) [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/reflex/badge)](https://matrix.hackage.haskell.org/#/package/reflex) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/reflex-frp/reflex/blob/master/LICENSE)

  Interactive programs without callbacks or side-effects. Functional Reactive Programming (FRP) uses composable events and time-varying values to describe interactive systems as pure functions. Just like other pure functional code, functional reactive code is easier to get right on the first try, maintain, and reuse.

  Reflex is a fully-deterministic, higher-order Functional Reactive Programming interface and an engine that efficiently implements that interface.

  **Visit https://reflex-frp.org for more information, tutorials, documentation and [examples](https://examples.reflex-frp.org/).**

  ## Resources

  * [Official Website](https://reflex-frp.org)
  * [Quick Reference](Quickref.md)
  * [Reflex-DOM](https://github.com/reflex-frp/reflex-dom): A framework built on Reflex that facilitates the development of web pages, including highly-interactive single-page apps.
  * [Obelisk](https://github.com/obsidiansystems/obelisk#obelisk): A framework built on Reflex and Reflex-DOM for functional reactive web and mobile applications, with batteries included.
  * [Get started with Reflex](https://github.com/reflex-frp/reflex-platform)
  * [/r/reflexfrp](https://www.reddit.com/r/reflexfrp)
  * [irc.freenode.net #reflex-frp](http://webchat.freenode.net?channels=%23reflex-frp&uio=d4)

  ## Hacking

  From the root of a [Reflex Platform](https://github.com/reflex-frp/reflex-platform) checkout, run `./scripts/hack-on haskell-overlays/reflex-packages/dep/reflex`. This will check out the reflex source code into the `haskell-overlays/reflex-packages/dep/reflex` directory. You can then point that checkout at your fork, make changes, etc. Use the `./try-reflex` or `./scripts/work-on` scripts to start a shell in which you can test your changes.
license-name: BSD-3-Clause
