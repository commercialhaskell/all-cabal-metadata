all-versions:
- 0.0.1
- 0.1.0
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.4.0
- 0.4.0.1
- '0.5'
- 0.5.0.1
- '0.6'
- 0.6.1
- 0.6.2.4
- 0.6.3
- 0.6.4
- 0.6.4.1
- 0.7.0.0
- 0.7.1.0
- 0.7.1.1
- 0.8.0.0
- 0.8.1.0
- 0.8.1.1
- 0.8.2.0
- 0.8.2.1
- 0.8.2.2
- 0.9.0.0
- 0.9.0.1
- 0.9.1.0
- 0.9.2.0
- 0.9.3.0
- 0.9.3.1
- 0.9.3.2
- 0.9.3.3
- 0.9.3.4
- 0.9.4.0
author: Ryan Trinkle
basic-deps:
  MemoTrie: '>=0.6 && <0.7'
  base: '>=4.11 && <4.22'
  bifunctors: '>=5.2 && <5.7'
  commutative-semigroups: '>=0.1 && <0.3'
  comonad: '>=5.0.4 && <5.1'
  constraints: '>=0.10 && <0.15'
  constraints-extras: '>=0.3 && <0.5'
  containers: '>=0.6 && <0.8'
  data-default: '>=0.5 && <0.9'
  dependent-map: '>=0.3 && <0.5'
  dependent-sum: '>=0.6 && <0.8'
  exception-transformers: '>=0.4 && <0.5'
  exceptions: '>=0.10 && <0.11'
  haskell-src-exts: '>=1.16 && <1.24'
  haskell-src-meta: '>=0.6 && <0.9'
  mmorph: '>=1.0 && <1.3'
  monad-control: '>=1.0.1 && <1.1'
  monoidal-containers: '>=0.6.2.0 && <0.7'
  mtl: '>=2.1 && <2.4'
  patch: '>=0.0.7 && <0.1'
  prim-uniq: '>=0.1.0.1 && <0.3'
  primitive: '>=0.5 && <0.10'
  profunctors: '>=5.3 && <5.7'
  random: '>=1.1 && <1.4'
  ref-tf: '>=0.4 && <0.6'
  reflection: '>=2.1 && <2.2'
  semialign: '>=1 && <1.4'
  semigroupoids: '>=4.0 && <7'
  stm: '>=2.4 && <2.6'
  syb: '>=0.5 && <0.8'
  template-haskell: '>=2.9 && <2.24'
  these: '>=1 && <1.3'
  time: '>=1.4 && <1.15'
  transformers: '>=0.5 && <0.7'
  unbounded-delays: '>=0.1.0.0 && <0.2'
  witherable: '>=0.4 && <0.6'
changelog: |
  # Revision history for reflex

  ## 0.9.4.0

  * Add note about `requesting` semantics by @LightAndLight in https://github.com/reflex-frp/reflex/pull/508
  * Dropped lens by @ilyakooo0 in https://github.com/reflex-frp/reflex/pull/463
  * Build with ghc(js) 9.8.2 + 9.10.1 + 9.12.2 by @ymeister in https://github.com/reflex-frp/reflex/pull/502
  * headless: Add MonadThrow (Performable m) by @ali-abrar in https://github.com/reflex-frp/reflex/pull/523
  * Don't check in newSubscriberCoincidenceInner whether occRef is already set by @parenthetical in https://github.com/reflex-frp/reflex/pull/496
  * Always enable Template Haskell by @Ericson2314 in https://github.com/reflex-frp/reflex/pull/484

  ## 0.9.3.4

  * Support random 1.3

  ## 0.9.3.3

  * Add support for GHC 9.12
  * Loosen version bounds

  ## 0.9.3.2

  * Add support for witherable 0.5

  ## 0.9.3.1

  * Add support for GHC 9.8 and 9.10

  ## 0.9.3.0

  * Headless Host: Generalize to allow returning arbitrary types

  ## 0.9.2.0

  * Add MonadMask, MonadCatch, MonadThrow instances

  ## 0.9.1.0

  * Headless Host: Add some MonadSample, MonadHold, and MonadFix instances

  ## 0.9.0.1

  * Add support for ghc-9.6

  ## 0.9.0.0

  * Breaking Change: Filter updates to `listWithKey` child widgets so that changes to the input Map don't cause spurious updates to unaffected children. This imposes an `Eq` constraint on the child values.
  * Expose all Requester internals in Reflex.Requester.Base.Internal
  * [Add EventWriter instance for RequesterT #469](https://github.com/reflex-frp/reflex/pull/469)

  ## 0.8.2.2

  * Require witherable >= 0.4 and, hence, a newer monoidal-containers
  * Support newer constraints-extras (0.4)

  ## 0.8.2.1

  * Fix build for GHC 9.2
  * Require patch >= 0.0.7.0

  ## 0.8.2.0

  * Add `matchResponseMapWithRequests`, which it similar to `matchResponsesWithRequests` but allows processing of multiple responses at once.

  ## 0.8.1.1

  * Allow newer hlint for older GHCs, and add upper bound for newer GHCs

  ## 0.8.1.0

  * Add support for GHC 8.10
  * Drop support for GHC < 8.4

  ## 0.8.0.0

  * Replace 0.7.2.0 with 0.8.0.0 to reflect the `MonadHold` interface change. Deprecates 0.7.2.0.

  ## 0.7.2.0 -- *Deprecated*

  * ([#416](https://github.com/reflex-frp/reflex/pull/416)) Add `now :: m (Event t ())` to `MonadHold`.
  * Extend some dependency version bounds
  * Fix HLint 3 test

  ## 0.7.1.1

  *Backport release*.
  Changes do not carry forward to 0.7.2.0.

  * Add support for GHC 8.10
  * Drop support for GHC < 8.4
  * Extend some dependency version bounds
  * Fix HLint 3 test

  ## 0.7.1.0

  * ([#413](https://github.com/reflex-frp/reflex/pull/413), [#417](https://github.com/reflex-frp/reflex/pull/417)) Add `Reflex.Host.Headless` module which provides `runHeadlessApp` as an easy way to run a Reflex network in a "headless" environment.
  * ([#420](https://github.com/reflex-frp/reflex/pull/420)) Add a [`Data.Zip.Unzip`](https://hackage.haskell.org/package/semialign-1.1/docs/Data-Zip.html#t:Unzip) instance for `Event`.
  * ([#419](https://github.com/reflex-frp/reflex/pull/419)) Add `distributeIntMapOverDynPure` and `joinDynThroughIntMap` as convenience functions for working with `Dynamic` `IntMap`s.


  ## 0.7.0.0

  * Add lifting instances for most classes to `Reflex.Profiled.Profiled`. ([#398](https://github.com/reflex-frp/reflex/pull/398))
  * Class `MonadQuery t q m` now has a `Monad m` superclass constraint. ([#400](https://github.com/reflex-frp/reflex/pull/400))
  * **(Breaking change)** Rename class `MonadBehaviorWriter` -> `BehaviorWriter` for consistency with `EventWriter`/`DynamicWriter`. ([#401](https://github.com/reflex-frp/reflex/pull/401))
  * Introduce deprecated alias `MonadBehaviorWriter = BehaviorWriter`. ([#401](https://github.com/reflex-frp/reflex/pull/401))
  * Fix bug in spider where event subscriptions would be prematurely finalized due to over-aggressive inlining. ([#409](https://github.com/reflex-frp/reflex/pull/409))
  * Add instances of `PerformEvent` and `TriggerEvent` for `MaybeT`. ([#395](https://github.com/reflex-frp/reflex/pull/395))

  ## 0.6.4.1

  * Fix a bug in the Reflex Profiled transformer where
    `Reflex.Class.mergeIncrementalG` and
    `Reflex.Class.mergeIncrementalWithMoveG` implementations referenced
    itself instead of the inner transformed timeline, causing an
    infinite loop.

  ## 0.6.4

  * Support GHC 8.8

  * Add `Reflex.Query.Base.mapQueryT`. See that module for documentation

  * The `Reflex.Patch.*` modules were moved to the `patch` library.
    They are `Data.Patch.*` there, but reexported under their old names for backwards compatability here.

  * Additional instances for `Query` classes for basic types.

  * Add cabal flags `debug-propagation` and `debug-event-cycles` to build in debugging
    code for performance and for cyclic dependencies between events

  ## 0.6.3

  * `Data.WeakBag.traverse` and `Data.FastWeakBag.traverse` have been deprecated.
    They are replaced with `Data.WeakBag.traverse_` and `Data.FastWeakBag.traverse_`, respectively.

  * Fixes a bug in `Reflex.Patch.MapWithMove.patchThatSortsMapWith` that was producing invalid `PatchMapWithMove`.

  * Add missing `NotReady` instances:
     - `instance NotReady (SpiderTimeline x) (SpiderHost x)`
     - `instance HasSpiderTimeline x => NotReady (SpiderTimeline x) (PerformEventT (SpiderTimeline x) (SpiderHost x))`

  ## 0.6.2.4

  * Update to monoidal-containers 0.6

  ## 0.6.2.3

  * Add an upper-bound to witherable

  ## 0.6.2.2

  * Support these >= 1. Add `split-these` flag to control whether to use new these/semialign combination or not.

  * Update version bounds to fix some CI failures

  * Add travis CI configuration

  ## 0.6.2.1

  * Generalize `fan` to `fanG` to take a `DMap` with non-`Identity`
    functor:
      * `fan` to `fanG`
      * `EventSelectorG` for `fanG` result selector.

  * Reduce the amount of unsafeCoerce in coercing newtypes under Event/Dynamic/Behavior.
      * Add fused ReaderIO for the purpose of coercion (ReaderT's third argument has nominal role preventing automated coerce)
      * Add incrementalCoercion/coerceIncremental to go with dynamicCoercion/coerceDynamic

  * Generalize merging functions:
    `merge` to `mergeG`,
    `mergeIncremental` to `mergeIncrementalG`,
    `mergeIncrementalWithMove` to `mergeIncrementalWithMoveG`.

  * Generalize distribute function:
      `distributeDMapOverDynPure` to `distributeDMapOverDynPureG`,

  ## 0.6.2.0

  * Fix `holdDyn` so that it is lazy in its event argument
    These produce `DMap`s  whose values needn't be `Identity`.

  * Stop using the now-deprecated `*Tag` classes (e.g., `ShowTag`).

  * Fix `holdDyn` so that it is lazy in its event argument.

  ## 0.6.1.0

  * Re-export all of `Data.Map.Monoidal`

  * Fix `QueryT` and `RequesterT` tests

  ## 0.6.0.0 -- 2019-03-20

  * Deprecate `FunctorMaybe` in favor of `Data.Witherable.Filterable`. We still export `fmapMaybe`, `ffilter`, etc., but they all rely on `Filterable` now.

  * Rename `MonadDynamicWriter` to `DynamicWriter` and add a deprecation for the old name.

  * Remove many deprecated functions.

  * Add a `Num` instance for `Dynamic`.

  * Add `matchRequestsWithResponses` to make it easier to use `Requester` with protocols that don't do this matching for you.

  * Add `withRequesterT` to map functions over the request and response of a `RequesterT`.

  * Suppress nil patches in `QueryT` as an optimization. The `Query` type must now have an `Eq` instance.

  * Add `throttleBatchWithLag` to `Reflex.Time`. See that module for details.
changelog-type: markdown
description: |
  # [Reflex](https://reflex-frp.org/)

  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/reflex.svg)](https://hackage.haskell.org/package/reflex) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/reflex-frp/reflex/blob/master/LICENSE)

  Interactive programs without callbacks or side-effects. Functional Reactive Programming (FRP) uses composable events and time-varying values to describe interactive systems as pure functions. Just like other pure functional code, functional reactive code is easier to get right on the first try, maintain, and reuse.

  Reflex is a fully-deterministic, higher-order Functional Reactive Programming interface and an engine that efficiently implements that interface.

  **Visit https://reflex-frp.org for more information, tutorials, documentation and [examples](https://examples.reflex-frp.org/).**

  ## Resources

  * [Official Website](https://reflex-frp.org)
  * [Quick Reference](Quickref.md)
  * [Reflex-DOM](https://github.com/reflex-frp/reflex-dom): A framework built on Reflex that facilitates the development of web pages, including highly-interactive single-page apps.
  * [Obelisk](https://github.com/obsidiansystems/obelisk#obelisk): A framework built on Reflex and Reflex-DOM for functional reactive web and mobile applications, with batteries included.
  * [Get started with Reflex](https://github.com/reflex-frp/reflex-platform)
  * [#reflex-frp:matrix.org](https://matrix.to/#/#reflex-frp:matrix.org): Official Matrix room
  * [/r/reflexfrp](https://www.reddit.com/r/reflexfrp)
  * [irc.freenode.net #reflex-frp](http://webchat.freenode.net?channels=%23reflex-frp&uio=d4)

  ## Hacking

  From the root of a [Reflex Platform](https://github.com/reflex-frp/reflex-platform) checkout, run `./scripts/hack-on haskell-overlays/reflex-packages/dep/reflex`. This will check out the reflex source code into the `haskell-overlays/reflex-packages/dep/reflex` directory. You can then point that checkout at your fork, make changes, etc. Use the `./try-reflex` or `./scripts/work-on` scripts to start a shell in which you can test your changes.
description-type: markdown
hash: 0d290f8c56492002bc1d95e49a68c3f5813d76189b7f3a680fa02617de6b1470
homepage: https://reflex-frp.org
latest: 0.9.4.0
license-name: BSD-3-Clause
maintainer: ryan.trinkle@gmail.com
synopsis: Higher-order Functional Reactive Programming
test-bench-deps:
  base: '>=4.11 && <4.22'
  bifunctors: '>=0'
  commutative-semigroups: '>=0'
  constraints: '>=0'
  constraints-extras: '>=0'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  dependent-map: '>=0'
  dependent-sum: '>=0'
  directory: '>=0'
  filemanip: '>=0'
  filepath: '>=0'
  hlint: (<2.1 || >=2.2.2) && <3.5
  hspec: '>=0'
  lens: '>=0'
  loch-th: '>=0'
  monoidal-containers: '>=0'
  mtl: '>=0'
  patch: '>=0'
  primitive: '>=0'
  process: '>=0'
  ref-tf: '>=0'
  reflex: '>=0'
  semialign: '>=0'
  split: '>=0'
  stm: '>=0'
  text: '>=0'
  these: '>=0'
  these-lens: '>=0'
  time: '>=0'
  transformers: '>=0'
  witherable: '>=0'
