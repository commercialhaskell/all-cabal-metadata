all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
author: Silk
basic-deps:
  base: '>=4 && <5'
  hxt: '>=9.2 && <9.4'
  regular: '>=0.2 && <0.4'
  text: '>=0'
changelog: |
  0.1.2 -> 0.2
    - Upgrade to hxt 9.2/9.3.
    - Allow missing data for Maybe fields in records.
    - Add instances for Text in addition to String.
    - More lenient Bool parsing.
    - Better error reporting in Bool parsing.
    - Strip leading and trailing underscores from element names.
    - Only lowercase first character of element names.
    - Add pickler for Either.
    - Fixed recursive schema generation.
    - Move from typLAB to Silk.
changelog-type: text
description: |
  This package allows you to automatically derive hxt picklers
  (conversions to and from xml) using the regular generics package.

  A simple example:

  ```Haskell
  {-# LANGUAGE TemplateHaskell
             , EmptyDataDecls
             , TypeFamilies
             #-}

  import Generics.Regular (deriveAll, PF)
  import Text.XML.HXT.Arrow.Pickle (XmlPickler (..))
  import Generics.Regular.XmlPickler (gxpickle)

  data User = User
    { name  :: String
    , admin :: Bool
    }

  -- Derive Regular instance.
  deriveAll ''User "PFUser"
  type instance PF User = PFUser

  -- Define generic pickler instance.
  instance XmlPickler User where
    xpickle = gxpickle
  ```

  Now you can use the functionality from `Text.XML.HXT.Arrow.Pickle`.
  For example:

  ```
  > showPickled [] (User "Simon" True)

  "<user><name>Simon</name><admin>true</admin></user>"

  > unpickleDoc xpickle $ head $ xread "<user><name>Simon</name><admin>true</admin></user>" :: Maybe User

  Just (User {name = "Simon", admin = True})
  ```
description-type: markdown
hash: 96e6bb416f0550d814450e27db266930447f504d3949b92c75e963c55f0c8bbc
homepage: http://github.com/silkapp/regular-xmlpickler
latest: '0.2'
license-name: BSD-3-Clause
maintainer: code@silk.co
synopsis: Generic generation of HXT XmlPickler instances using Regular.
test-bench-deps: {}
