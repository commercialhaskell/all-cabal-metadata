all-versions:
- 1.0.0.0
- 1.0.3.0
- 1.1.0.0
author: |-
  - Anton Gushcha
  - Aminion
  - Vladimir Krutkin
  - Levon Oganyan
basic-deps:
  base: '>=4.5 && <4.15'
  containers: '>=0'
  raw-strings-qq: '>=0'
  reflex: '>=0.4 && <0.10'
  reflex-dom: '>=0.6 && <0.10'
  reflex-localize: '>=1.0 && <1.3'
  reflex-localize-dom: '>=0'
  text: '>=0'
changelog: "# 1.1.0.0\n\n* Bump versions for new reflex. \n\n# 1.0.3.0\n\n* Allow
  `reflex-localize-1.1`\n\n# 1.0.2.0\n\n* Remove warnings\n\n# 1.0.1.0\n\n* Add two
  new helper functions: ``localizedDyn`` and ``localizedDynText``\n\n# 1.0.0.0\n\n*
  Initial release\n"
changelog-type: markdown
description: |
  # reflex-localize-dom

  Dom extensions for [reflex-localize](../reflex-localize/README.md). Library
  provides helpers for dynamic strings that depends on current selected language.

  # How to use

  Build example with `cabal new-build -f examples`.

  First, you should define which languages your app supports:
  ``` haskell
  module App.Language(
      Language(..)
    , module Reflex.Localize
    ) where

  import Reflex.Localize
  import Reflex.Localize.Language

  data instance Language
    = English
    | Russian
  ```

  Second, define enumeration for strings ids.

  ``` haskell
  module App.Localization(
      module App.Localization
    , module App.Language
    ) where

  import App.Language

  data AboutPageStrings =
      AboutTitle
    | AboutVersion
    | AboutLicence
    | AboutHomepage
    | AboutDevelopers

  instance LocalizedPrint AboutPageStrings where
    localizedShow l v = case l of
      English -> case v of
        AboutTitle      -> "About"
        AboutVersion    -> "Version"
        AboutLicence    -> "Licence"
        AboutHomepage   -> "Homepage"
        AboutDevelopers -> "Developers"
      Russian -> case v of
        AboutTitle      -> "О продукте"
        AboutVersion    -> "Версия"
        AboutLicence    -> "Лицензия"
        AboutHomepage   -> "Сайт"
        AboutDevelopers -> "Разработчики"
  ```

  You can either collect all strings to one data sum or split strings for each
  widget.

  And finally you should implement `MonadLocalized` type class in you application monad.
  We suggest using monad transformer `LocalizeT` via `runLocalize` function:

  ``` haskell
  runLocalize :: (Reflex t, TriggerEvent t m, MonadIO m) => Language -> LocalizeT t m a -> m a
  ```

  Finally, you can define widgets with localization like following:
  ``` haskell
  buttonClass :: (DomBuilder t m, PostBuild t m, MonadLocalized t m, LocalizedPrint lbl)
    => Dynamic t Text -> lbl -> m (Event t ())
  buttonClass classValD lbl = mkButton "button" [("onclick", "return false;")] classValD . dynText =<< localized lbl

  mkButton :: (DomBuilder t m, PostBuild t m) => Text -> Map Text Text -> Dynamic t Text -> m a -> m (Event t a)
  mkButton eltp attrs classValD ma = do
    let classesD = do
          classVal <- classValD
          pure $ attrs <> [("class", classVal)]
    (e, a) <- elDynAttr' eltp classesD ma
    return $ a <$ domEvent Click e
  ```
description-type: markdown
hash: e94ef99fab5371f8cd1a0214354f38958a92050389fb305a94600644132b6368
homepage: https://github.com/hexresearch/ergvein
latest: 1.1.0.0
license-name: MIT
maintainer: |-
  - Anton Gushcha <ncrashed@gmail.com>
  - Aminion <>
  - Vladimir Krutkin <krutkinvs@gmail.com>
  - Levon Oganyan <lemarwin42@protonmail.com>
synopsis: Helper widgets for reflex-localize
test-bench-deps: {}
