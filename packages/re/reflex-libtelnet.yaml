homepage: https://git.sr.ht/~jack/reflex-libtelnet
changelog-type: markdown
hash: d55c3f2c2999c1ac367dd5191e17f8644638a5eb9b7b914a0bd1032e1b2ead77
test-bench-deps: {}
maintainer: jack@jackkelly.name
synopsis: Reflex bindings for libtelnet
changelog: |
  # Revision history for reflex-libtelnet

  ## 0.2.0.0 -- 2022-05-21

  * Remove `instance Reflex t => Default (TelnetConfig t)`; use
    `newTelnetConfig` instead.

  * New instances:
    - `instance Generic (TelnetConfig t)`
    - `instance Generic (TelnetEvents t)`

  * Remove the dependency on `lens`:
    - As GHC is now better at dealing with duplicate record fields, we
      can give them nice unprefixed names.
    - Use
      [`generic-lens`](https://hackage.haskell.org/package/generic-lens)
      or
      [`generic-optics`](https://hackage.haskell.org/package/generic-optics)
      to get lenses for your preferred flavour of optic. Make sure to
      use the `field' @"fieldName"` version (i.e. not `#fieldName` or
      un-primed `field`), otherwise GHC will struggle to infer the type
      of `t` when setting fields in `ReflexConfig t`.

  ## 0.1.0.0 -- 2019-12-03

  * First version. Released on an unsuspecting world.
basic-deps:
  bytestring: '>=0.10.8.2 && <0.12'
  dependent-sum: '>=0.6.2.0 && <=0.8'
  dependent-sum-template: ^>=0.1
  base: '>=4.11 && <4.16'
  dependent-map: '>=0.3 && <0.5'
  libtelnet: ^>=0.1
  reflex: '>=0.5 && <0.9'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Jack Kelly
latest: 0.2.0.0
description-type: markdown
description: |
  # Reflex Bindings to libtelnet

  This is a [reflex](https://reflex-frp.org/) wrapper around
  [libtelnet](https://git.sr.ht/~jack/libtelnet-haskell), which lets you
  describe data flows through the telnet state tracker using reflex
  `Event`s.

  This library thinly wraps the libtelnet functions, so you should read
  [the libtelnet
  documentation](http://hackage.haskell.org/package/libtelnet) alongside
  the haddocks for this package.

  ## Quick Start

  1. Assemble a `config :: TelnetConfig t`, which holds the event
     streams that feed into a telnet state tracker. The easiest way to
     do this is to call `newTelnetConfig` and overwrite the fields you
     care about using record updates or lenses. You will almost
     certainly want to overwrite `recv` to be the stream of incoming
     data from a socket, and `send` to be the stream of outgoing data
     from your application.

     * If you want to use lenses, use the
       [`generic-lens`](https://hackage.haskell.org/package/generic-lens)
       or
       [`generic-optics`](https://hackage.haskell.org/package/generic-optics)
       to get your preferred flavour of optic. Make sure to use the
       `field' @"fieldName"` version (i.e. not `#fieldName` or un-primed
       `field`), otherwise GHC will struggle to infer the type of `t`
       when setting fields in `ReflexConfig t`.

  2. Call `telnet config`, and save the resulting `TelnetEvents t`. This
     structure holds the output event streams from a single telnet state
     tracker.

  3. Wire the output events into your application.

  ## Other Resources

  * A [telnet echo
    server](https://git.sr.ht/~jack/reflex-libtelnet/tree/master/reflex-libtelnet-example/src/Main.hs)
    exists in the [`reflex-libtelnet`
    repo](https://git.sr.ht/~jack/reflex-libtelnet), outside this
    package. It is packaged separately so that it can be licensed more
    permissively, and to minimise `reflex-libtelnet`'s dependency
    footprint.

  * Questions should go to the
    [reflex-libtelnet-discuss](https://lists.sr.ht/~jack/reflex-libtelnet-discuss)
    mailing list.

  * Bug reports should go to the
    [bug tracker](https://todo.sr.ht/~jack/reflex-libtelnet).
license-name: GPL-3.0-or-later
