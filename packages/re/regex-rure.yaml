all-versions:
- 0.1.0.3
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 1.0.0.0
author: Vanessa McHale
basic-deps:
  base: '>=4.10.0.0 && <5'
  bytestring: '>=0.11.0.0'
changelog: "# 1.0.0.0\n\n  * `RureFlags` via c2hs macro-as-enum capability\n\n# 0.1.2.1\n\n
  \ * Restyle\n\n# 0.1.2.0\n\n  * Add some higher-level functions for dealing with
  captures\n\n# 0.1.1.0\n\n  * Add missing low-level functions\n\n# 0.1.0.3\n\n  *
  Use `unsafe` for FFI\n\n# 0.1.0.2\n\n  * Add `cross` flag to ease cross-compilation\n\n#
  0.1.0.1\n  \n  * Bundle `rure.h`\n\n# 0.1.0.0\n\n  * Initial release\n"
changelog-type: markdown
description: |
  Bindings to Rust's [regular expression library](https://github.com/rust-lang/regex). See [here](https://github.com/rust-lang/regex/tree/master/regex-capi#c-api-for-rusts-regex-engine) for installation instructions. You'll need to put `librure.so` or `librure.dylib` etc. where libraries go on your system.

  Lower-level bindings are exhaustive; higher-level bindings do not include
  capture groups.

  # Performance

  As of 0.1.0.3:

  ```
  benchmarking rure/matches
  time                 334.6 ns   (334.1 ns .. 335.2 ns)
                       1.000 R²   (1.000 R² .. 1.000 R²)
  mean                 333.8 ns   (333.5 ns .. 334.2 ns)
  std dev              1.247 ns   (1.058 ns .. 1.649 ns)

  benchmarking tdfa/matches
  time                 1.180 μs   (1.180 μs .. 1.181 μs)
                       1.000 R²   (1.000 R² .. 1.000 R²)
  mean                 1.179 μs   (1.179 μs .. 1.180 μs)
  std dev              2.029 ns   (1.607 ns .. 2.851 ns)
  ```
description-type: markdown
hash: 3bb3a96cee041666b23367d8c23ad5836fdf07daf03a8fe2f538dbf33f0189ef
homepage: ''
latest: 1.0.0.0
license-name: AGPL-3.0-only
maintainer: vamchale@gmail.com
synopsis: Bindings to Rust's regex library
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  regex-rure: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
