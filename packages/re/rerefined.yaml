all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.5.1
author: Ben Orchard
basic-deps:
  QuickCheck: '>=2.14 && <2.16'
  base: '>=4.18 && <5'
  mono-traversable: '>=1.0.17.0 && <1.1'
  template-haskell: '>=2.19.0.0 && <2.23'
  text: '>=2.0 && <2.2'
  text-builder-linear: '>=0.1.2 && <0.2'
  type-level-show: '>=0.2.1 && <0.4'
changelog: |
  ## 0.5.1 (2024-06-11)
  * add `Via` predicate

  ## 0.5.0 (2024-05-26)
  * add tentative operator versions of predicates
  * clear up WIP normalization story

  ## 0.4.0 (2024-05-11)
  * add `Eq`, `Ord`, `Arbitrary` instances
  * simplify modules (fewer)
  * add `reifyPredicate`, `reifyPredicate1` for reifying predicates to `a -> Bool`

  ## 0.3.0 (2024-05-07)
  * refactor predicate names: now handled with a sort of type-level `Show`. no
    `Typeable`, lots of custom prettiness (infix operators!)
  * refactor logical predicates, keeping them together doesn't help
  * define relational operators using `Ordering` and logical `Or`
  * add missing `Foldable`, `Traversable` instances to `Refined1`
  * general cleanup

  ## 0.2.0 (2024-05-01)
  * add missing `Show` instance to `RefineFailure`
  * add missing `Functor` instance to `Refined1`
  * general cleanup

  ## 0.1.0 (2024-04-30)
  Initial release.

  * rewrite of Nikita Volkov's refined library
changelog-type: markdown
description: |
  # rerefined
  [refined-nv-gh]:      https://github.com/nikita-volkov/refined
  [refined-nv-hackage]: https://hackage.haskell.org/package/refined
  [strongweak-hackage]: https://hackage.haskell.org/package/strongweak
  [binrep-hackage]:     https://hackage.haskell.org/package/binrep
  [refined1-hackage]:   https://hackage.haskell.org/package/refined1

  Rewrite of Nikita Volkov's [refined][refined-nv-hackage] library.

  * same concept
  * same performance
  * more instances
  * better ergonomics (no insidious `Typeable` constraints)
  * internals: fewer dependencies (no `aeson`), better errors, more concise

  ## Why?
  I used the original [refined][refined-nv-hackage] library fairly extensively to
  power other libraries (see [strongweak][strongweak-hackage],
  [binrep][binrep-hackage]), though I moved to a fork [refined1][refined1-hackage]
  some time ago to provide a feature I needed. I think the library has some flaws
  and I want to contribute, but my tiny tweaks are still pending after a few
  years. A good excuse to rewrite from the ground up.

  All source code is original.

  ## Major changes from original refined
  ### Simplified errors
  refined encoded the logical predicates in its error type. This doesn't enable
  any further analysis, just turns a non-sum type into a sum type and complicates
  consumption. Furthermore, this error type is first transformed into another
  recursive ADT, which is then pretty printed. This is unnecessary (even mentioned
  in the code).

  rerefined has a single-constructor error type which can be easily and
  efficiently turned into a string-like in a single pass.

  ### No insidious `Typeable` contexts
  See [refined#101](https://github.com/nikita-volkov/refined/issues/101).
  `Typeable` is useful, but the way it is used brings lots of `Typeable` contexts.

  rerefined asks that you do a bit more work upfront, but gives you tools and
  grants much more power. Predicates declare their "predicate name" explicitly as
  a type-level `Symbol`. Precedence is supported and infix operators are welcomed.
  (For now, the logical operators primarily look like their propositional logic
  counterparts.)

  ### Cleaner design
  What do `LessThan`, `GreaterThan`, `EqualTo` etc. have in common? They're all
  relational binary operators where one value is a pre-filled `Natural`. rerefined
  packs all of these into a single predicate that takes a type-level relational
  operator. Only one instance for the same amount of code, and much easier to
  reason about.

  We take this even further and allow passing a type-level sign, to enable
  comparing negative values.

  We take this _even_ further and use the same relational operator definitions to
  define length comparisons, where the other value is taken from the input's
  length (rather than its numeric value). This does not take a sign, since length
  must be non-negative.

  ### More instances
  You know that length comparison predicate above? It has a _single instance_ for
  each of `Refined1` and `Refined`:

  ```haskell
  -- | Compare the length of a 'Foldable' to a type-level 'Natural' using the
  --   given 'RelOp'.
  instance (KnownNat n, Foldable f, ReifyRelOp op)
    => Refine1 (CompareLength op n) f where
      validate1 p = validateCompareLength p . length

  -- | Compare the length of a 'MonoFoldable' to a type-level 'Natural' using the
  --   given 'RelOp'.
  instance (KnownNat n, MonoFoldable a, ReifyRelOp op)
    => Refine (CompareLength op n) a where
      validate p = validateCompareLength p . olength
  ```

  We get a ton more instances for a ton less code. (Note that mono-foldable has a
  surprisingly small footprint, as most of its transitive dependencies are core
  libraries.)

  ## License
  Provided under the MIT license. See `LICENSE` for license text.
description-type: markdown
hash: 6808c1b56fe3c42e2fe9df674d536de552083dc24bd7924cb41751b9696cfb96
homepage: https://github.com/raehik/rerefined#readme
latest: 0.5.1
license-name: MIT
maintainer: Ben Orchard <thefirstmuffinman@gmail.com>
synopsis: Refinement types, again
test-bench-deps: {}
