homepage: https://github.com/chrbauer/reflex-dom-th
changelog-type: markdown
hash: 5eddd8c25570f794bb80d4dcdb2b019b8fbba2140eb19e2a60ac12b87477b70b
test-bench-deps:
  bytestring: -any
  reflex-dom-th: -any
  stm: -any
  base: '>=4 && <5'
  tasty-golden: -any
  hspec: -any
  megaparsec: -any
  tasty-hspec: -any
  filepath: -any
  tasty: -any
maintainer: mail@christoph-bauer.net
synopsis: reflex-dom-th transpiles HTML templates to haskell code for reflex-dom
changelog: "# Revision history for reflex-dom-th\n\n## 0.3.4\n* support self-closing
  tags like <div />\n\n## 0.3.3\n* gettext-th support\n\n## 0.3.2\n* ghc 8.10 support
  \n\n\n## 0.3.01\n* pre sorting and packing of attribute maps to text\n** this solves
  a problem with empty attributes like in <tag attr=\"\">\n\n\n## 0.3.00 -- 2022-03-02\n\n*
  support for dynamic attributes\n* parser accepts space between last attribute and
  >\n\n## 0.2.0.0 -- 2022-02-20\n\n* specialization to el-variants\n* parse widgets
  inside texts\n* allow refs to widgets\n* dash '-' is now valid in attribute names\n\t\n\n\n##
  0.1.0.0 -- 2022-02-18\n\n* First version. Released on an unsuspecting world.\n"
basic-deps:
  gettext-th: -any
  base: ==4.*
  text: -any
  megaparsec: -any
  array: -any
  th-lift-instances: -any
  containers: -any
  reflex-dom-core: -any
  mtl: -any
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.2
- 0.3.3
- 0.3.4
author: Christoph Bauer
latest: 0.3.4
description-type: markdown
description: "# reflex-dom-th\nDo you develop for the web? And you know functional
  reactive programming is the way to go. So you must use Reflex-DOM.\nBut how can
  you integrate all these HTML snippet, which you found. You are tired in converting
  everything to to el, elAttr' etc, right?\n\nFrom this day on this reflex-dom-th
  library will automate the task of converting your HTML templates to Reflex-Dom.\n\n#
  Examples\n\nThe basic example\n\n```\n[dom|<div>hello</div>|]\n```\n\nis equivalent
  to\n\n```\nel \"div\" $ text \"hello\"\n```\n\nYou can also put the html in a external
  file and include it with\n\n```\n$(domFile \"template.html\")\n```\n\nIt it possible
  to have multiple elements and attributes\n\n```\n[dom|<ul class=\"list\">\n       <li>Item1</div>\n
  \      <li>Item1</div>\n     </ul> |]\n```     \n\nDynamic content can be injected
  between two curly braces. It will reference an unbound variable. It is not a haskell
  expression. Keeping haskell out of the template will give you better error messages.\n\n```\n[dom|<ul
  class=\"list\">\n      <li>{{item1}}</div>\n      <li>{{item2}}</div>\n    </ul>
  |]\n  where item1, item2 :: MonadWidget t m =>  m ()\n        item1 = text \"Item1\"\n
  \       item2 = text \"Item2\"\n```\n\nIt is also possible to bind additionally
  a `Dynamic t (Map Text Text)' to the attributes\n\n```\ndivWithAttrs :: MonadWidget
  t m => Dynamic t (Map Text Text) -> m ()\ndivWithAttrs dynAttrs = [dom|<div class=\"list\"
  {{attr}}></div> |]\n```\n\n\nTo bind events to the elements it is possible to extract
  get the elements as a result. The reference number is the position in the result
  tuple.\n\n```\n(li1, li2, ul, w) <- [dom|<ul #2 class=\"list\">\n                           <li
  #0>Item1</div>\n                           <li #1>Item1</div>\n\t                   <li>{{widget
  #3}}</div>\n                          </ul> |]\n```\t\t       \n\n\nThere is also
  support for translatable text from [gettext-th](https://hackage.haskell.org/package/gettext-th).
  \n\nTo add translatable text in a template File (see domFile) \n\n```\n<div>[__|Hello
  world|]</div>\n```\n"
license-name: BSD-3-Clause
