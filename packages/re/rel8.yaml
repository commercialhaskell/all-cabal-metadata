all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
- 1.2.0.0
- 1.2.1.0
- 1.2.2.0
- 1.3.0.0
- 1.3.1.0
- 1.4.0.0
- 1.4.1.0
- 1.5.0.0
- 1.6.0.0
- 1.7.0.0
author: Oliver Charles
basic-deps:
  aeson: '>=0'
  attoparsec: '>=0'
  base: '>=4.16 && <4.22'
  base-compat: '>=0.11 && <0.15'
  base16: '>=1.0'
  bifunctors: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  comonad: '>=0'
  containers: '>=0'
  contravariant: '>=0'
  hasql: '>=1.8 && <1.10'
  iproute: ^>=1.7
  opaleye: ^>=0.10.2.1
  pretty: '>=0'
  product-profunctors: '>=0'
  profunctors: '>=0'
  scientific: '>=0'
  semialign: '>=0'
  semigroupoids: '>=0'
  text: '>=0'
  these: '>=0'
  time: '>=0'
  transformers: '>=0'
  utf8-string: '>=0'
  uuid: '>=0'
  vector: '>=0'
changelog: "\n<a id='changelog-1.7.0.0'></a>\n# 1.7.0.0 — 2025-07-31\n\n## Removed\n\n-
  Removed support for `network-ip`. We still support `iproute`.\n\n## Added\n\n- Add
  support for prepared statements. To use prepared statements, simply use `prepare
  run` instead of `run` with a function that passes the parameters to your statement.\n\n-
  Added new `Encoder` type with three members: `binary`, which is the Hasql binary
  encoder, `text` which encodes a type in PostgreSQL's text format (needed for nested
  arrays) and `quote`, which is the does the thing that the function we previously
  called `encode` does (i.e., `a -> Opaleye.PrimExpr`).\n\n- Support hasql-1.9\n\n-
  Add `elem` and `elem1` to `Rel8.Array` for testing if an element is contained in
  `[]` and `NonEmpty` `Expr`s.\n\n## Changed\n\n- Several changes to `TypeInformation`:\n\n
  \ * Changed the `encode` field of `TypeInformation` to be `Encoder a` instead of
  `a -> Opaleye.PrimExpr`.\n\n  * Moved the `delimiter` field of `Decoder` into the
  top level of `TypeInformation`, as it's not \"decoding\" specific, it's also used
  when \"encoding\".\n\n  * Renamed the `parser` field of `Decoder` to `text`, to
  mirror the `text` field of the new `Encoder` type.\n\n  All of this will break any
  downstream code that uses a completely custom `DBType` implementation, but anything
  that uses `ReadShow`, `Enum`, `Composite`, `JSONBEncoded` or `parseTypeInformation`
  will continue working as before (which should cover all common cases).\n\n- Stop
  exporting `Decoder` and `Encoder` from the `Rel8` module. These can now be found
  in `Rel8.Decoder` and `Rel8.Encoder`.\n\n- Some changes were made to the `DBEnum`
  type class:\n\n  * `Enumable` was removed as a superclass constraint. It is still
  used to provide the default implementation of the `DBEnum` class.\n  * A new method,
  `enumerate`, was added to the `DBEnum` class (with the default implementation provided
  by `Enumable`).\n\n  This is unlikely to break any existing `DBEnum` instances,
  it just allows some instances that weren't possible before (e.g., for types that
  are not `Generic`).\n\n<a id='changelog-1.6.0.0'></a>\n# 1.6.0.0 — 2024-12-13\n\n##
  Removed\n\n- Remove `Table Expr b` constraint from `materialize`. ([#334](https://github.com/circuithub/rel8/pull/334))\n\n##
  Added\n\n- Support GHC-9.10. ([#340](https://github.com/circuithub/rel8/pull/340))\n\n-
  Support hasql-1.8 ([#345](https://github.com/circuithub/rel8/pull/345))\n\n- Add
  `aggregateJustTable`, `aggregateJustTable` aggregator functions. These provide another
  way to do aggregation of `MaybeTable`s than the existing `aggregateMaybeTable` function.
  ([#333](https://github.com/circuithub/rel8/pull/333))\n\n- Add `aggregateLeftTable`,
  `aggregateLeftTable1`, `aggregateRightTable` and `aggregateRightTable1` aggregator
  functions. These provide another way to do aggregation of `EitherTable`s than the
  existing `aggregateEitherTable` function. ([#333](https://github.com/circuithub/rel8/pull/333))\n\n-
  Add `aggregateThisTable`, `aggregateThisTable1`, `aggregateThatTable`, `aggregateThatTable1`,
  `aggregateThoseTable`, `aggregateThoseTable1`, `aggregateHereTable`, `aggregateHereTable1`,
  `aggregateThereTable` and `aggregateThereTable1` aggregation functions. These provide
  another way to do aggregation of `TheseTable`s than the existing `aggregateTheseTable`
  function. ([#333](https://github.com/circuithub/rel8/pull/333))\n\n- Add `rawFunction`,
  `rawBinaryOperator`, `rawAggregateFunction`, `unsafeCoerceExpr`, `unsafePrimExpr`,
  `unsafeSubscript`, `unsafeSubscripts` — these give more options for generating SQL
  expressions that Rel8 does not support natively. ([#331](https://github.com/circuithub/rel8/pull/331))\n\n-
  Expose `unsafeUnnullify` and `unsafeUnnullifyTable` from `Rel8`. ([#343](https://github.com/circuithub/rel8/pull/343))\n\n-
  Expose `listOf` and `nonEmptyOf`. ([#330](https://github.com/circuithub/rel8/pull/330))\n\n-
  Add `NOINLINE` pragmas to `Generic` derived default methods of `Rel8able`. This
  should speed up\n  compilation times. If users wish for these methods to be `INLINE`d,
  they can override with a\n  pragma in their own code. ([#346](https://github.com/circuithub/rel8/pull/346))\n\n##
  Fixed\n\n- `JSONEncoded` should be encoded as `json` not `jsonb`. ([#347](https://github.com/circuithub/rel8/pull/347))\n\n-
  Disallow NULL characters in Hedgehog generated text values. ([#339](https://github.com/circuithub/rel8/pull/339))\n\n-
  Fix fromRational bug. ([#338](https://github.com/circuithub/rel8/pull/338))\n\n-
  Fix regex match operator. ([#336](https://github.com/circuithub/rel8/pull/336))\n\n-
  Fix some documentation formatting issues. ([#332](https://github.com/circuithub/rel8/pull/332)),
  ([#329](https://github.com/circuithub/rel8/pull/329)), ([#327](https://github.com/circuithub/rel8/pull/327)),
  and ([#318](https://github.com/circuithub/rel8/pull/318))\n\n\n<a id='changelog-1.5.0.0'></a>\n#
  1.5.0.0 — 2024-03-19\n\n## Removed\n\n- Removed `nullaryFunction`. Instead `function`
  can be called with `()`. ([#258](https://github.com/circuithub/rel8/pull/258))\n\n##
  Added\n\n- Support PostgreSQL's `inet` type (which maps to the Haskell `NetAddr
  IP` type). ([#227](https://github.com/circuithub/rel8/pull/227))\n\n- `Rel8.materialize`
  and `Rel8.Tabulate.materialize`, which add a materialization/optimisation fence
  to `SELECT` statements by binding a query to a `WITH` subquery. Note that explicitly
  materialized common table expressions are only supported in PostgreSQL 12 an higher.
  ([#180](https://github.com/circuithub/rel8/pull/180)) ([#284](https://github.com/circuithub/rel8/pull/284))\n\n-
  `Rel8.head`, `Rel8.headExpr`, `Rel8.last`, `Rel8.lastExpr` for accessing the first/last
  elements of `ListTable`s and arrays. We have also added variants for `NonEmptyTable`s/non-empty
  arrays with the `1` suffix (e.g., `head1`). ([#245](https://github.com/circuithub/rel8/pull/245))\n\n-
  Rel8 now has extensive support for `WITH` statements and data-modifying statements
  (https://www.postgresql.org/docs/current/queries-with.html#QUERIES-WITH-MODIFYING).\n\n
  \ This work offers a lot of new power to Rel8. One new possibility is \"moving\"
  rows between tables, for example to archive rows in one table into a log table:\n\n
  \ ```haskell\n  import Rel8\n\n  archive :: Statement ()\n  archive = do\n    deleted
  <-\n      delete Delete\n        { from = mainTable\n        , using = pure ()\n
  \       , deleteWhere = \\foo -> fooId foo ==. lit 123\n        , returning = Returning
  id\n        }\n\n    insert Insert\n      { into = archiveTable\n      , rows =
  deleted\n      , onConflict = DoNothing\n      , returning = NoReturninvg\n      }\n
  \ ```\n\n  This `Statement` will compile to a single SQL statement - essentially:\n\n
  \ ```sql\n  WITH deleted_rows (DELETE FROM main_table WHERE id = 123 RETURNING *)\n
  \ INSERT INTO archive_table SELECT * FROM deleted_rows\n  ```\n\n  This feature
  is a significant performant improvement, as it avoids an entire roundtrip.\n\n  This
  change has necessitated a change to how a `SELECT` statement is ran: `select` now
  will now produce a `Rel8.Statement`, which you have to `run` to turn it into a Hasql
  `Statement`. Rel8 offers a variety of `run` functions depending on how many rows
  need to be returned - see the various family of `run` functions in Rel8's documentation
  for more.\n\n  [#250](https://github.com/circuithub/rel8/pull/250)\n\n- `Rel8.loop`
  and `Rel8.loopDistinct`, which allow writing `WITH .. RECURSIVE` queries. ([#180](https://github.com/circuithub/rel8/pull/180))\n\n-
  Added the `QualifiedName` type for named PostgreSQL objects (tables, views, functions,
  operators, sequences, etc.) that can optionally be qualified by a schema, including
  an `IsString` instance. ([#257](https://github.com/circuithub/rel8/pull/257)) ([#263](https://github.com/circuithub/rel8/pull/263))\n\n-
  Added `queryFunction` for `SELECT`ing from table-returning functions such as `jsonb_to_recordset`.
  ([#241](https://github.com/circuithub/rel8/pull/241))\n\n- `TypeName` record, which
  gives a richer representation of the components of a PostgreSQL type name (name,
  schema, modifiers, scalar/array). ([#263](https://github.com/circuithub/rel8/pull/263))\n\n-
  `Rel8.length` and `Rel8.lengthExpr` for getting the length `ListTable`s and arrays.
  We have also added variants for `NonEmptyTable`s/non-empty arrays with the `1` suffix
  (e.g., `length1`). ([#268](https://github.com/circuithub/rel8/pull/268))\n\n- Added
  aggregators `listCat` and `nonEmptyCat` for folding a collection of lists into a
  single list by concatenation. ([#270](https://github.com/circuithub/rel8/pull/270))\n\n-
  `DBType` instance for `Fixed` that would map (e.g.) `Micro` to `numeric(1000, 6)`
  and `Pico` to `numeric(1000, 12)`. ([#280](https://github.com/circuithub/rel8/pull/280))\n\n-
  `aggregationFunction`, which allows custom aggregation functions to be used. ([#283](https://github.com/circuithub/rel8/pull/283))\n\n-
  Add support for ordered-set aggregation functions, including `mode`, `percentile`,
  `percentileContinuous`, `hypotheticalRank`, `hypotheticalDenseRank`, `hypotheticalPercentRank`
  and `hypotheticalCumeDist`. ([#282](https://github.com/circuithub/rel8/pull/282))\n\n-
  Added `index`, `index1`, `indexExpr`, and `index1Expr` functions for extracting
  individual elements from `ListTable`s and `NonEmptyTable`s. ([#285](https://github.com/circuithub/rel8/pull/285))\n\n-
  Rel8 now supports GHC 9.8. ([#299](https://github.com/circuithub/rel8/pull/299))\n\n##
  Changed\n\n- Rel8's API regarding aggregation has changed significantly, and is
  now a closer match to Opaleye.\n\n  The previous aggregation API had `aggregate`
  transform a `Table` from the `Aggregate` context back into the `Expr` context:\n\n
  \ ```haskell\n  myQuery = aggregate do\n    a <- each tableA\n    return $ liftF2
  (,) (sum (foo a)) (countDistinct (bar a))\n  ```\n\n  This API seemed convenient,
  but has some significant shortcomings. The new API requires an explicit `Aggregator`
  be passed to `aggregate`:\n\n  ```haskell\n  myQuery = aggregate (liftA2 (,) (sumOn
  foo) (countDistinctOn bar)) do\n    each tableA\n  ```\n\n  For more details, see
  [#235](https://github.com/circuithub/rel8/pull/235)\n\n- `TypeInformation`'s `decoder`
  field has changed. Instead of taking a `Hasql.Decoder`, it now takes a `Rel8.Decoder`,
  which itself is comprised of a `Hasql.Decoder` and an `attoparsec` `Parser`. This
  is necessitated by the fix for [#168](https://github.com/circuithub/rel8/issues/168);
  we generally decode things in PostgreSQL's binary format (using a `Hasql.Decoder`),
  but for nested arrays we now get things in PostgreSQL's text format (for which we
  need an `attoparsec` `Parser`), so must have both. Most `DBType` instances that
  use `mapTypeInformation` or `ParseTypeInformation`, or `DerivingVia` helpers like
  `ReadShow`, `JSONBEncoded`, `Enum` and `Composite` are unaffected by this change.
  ([#243](https://github.com/circuithub/rel8/pull/243))\n\n- The `schema` field from
  `TableSchema` has been removed and the name field changed from `String` to `QualifiedName`.
  ([#257](https://github.com/circuithub/rel8/pull/257))\n\n- `nextval`, `function`
  and `binaryOperator` now take a `QualifiedName` instead of a `String`. ([#262](https://github.com/circuithub/rel8/pull/262))\n\n-
  `function` has been changed to accept a single argument (as opposed to variadic
  arguments). ([#258](https://github.com/circuithub/rel8/pull/258))\n\n- `TypeInformation`'s
  `typeName` parameter from `String` to `TypeName`. ([#263](https://github.com/circuithub/rel8/pull/263))\n\n-
  `DBEnum`'s `enumTypeName` method from `String` to `QualifiedName`. ([#263](https://github.com/circuithub/rel8/pull/263))\n\n-
  `DBComposite`'s `compositeTypeName` method from `String` to `QualifiedName`. ([#263](https://github.com/circuithub/rel8/pull/263))\n\n-
  Changed `Upsert` by adding a `predicate` field, which allows partial indexes to
  be specified as conflict targets. ([#264](https://github.com/circuithub/rel8/pull/264))\n\n-
  The window functions `lag`, `lead`, `firstValue`, `lastValue` and `nthValue` can
  now operate on entire rows at once as opposed to just single columns. ([#281](https://github.com/circuithub/rel8/pull/281))\n\n##
  Fixed\n\n- Fixed a bug with `catListTable` and `catNonEmptyTable` where invalid
  SQL could be produced. ([#240](https://github.com/circuithub/rel8/pull/240))\n\n-
  A fix for [#168](https://github.com/circuithub/rel8/issues/168), which prevented
  using `catListTable` on arrays of arrays. To achieve this we had to coerce arrays
  of arrays to text internally, which unfortunately isn't completely transparent;
  you can oberve it if you write something like `listTable [listTable [10]] > listTable
  [listTable [9]]`: previously that would be `false`, but now it's `true`. Arrays
  of non-arrays are unaffected by this.\n\n- Fixes [#228](https://github.com/circuithub/rel8/issues/228)
  where it was impossible to call `nextval` with a qualified sequence name.\n\n- Fixes
  [#71](https://github.com/circuithub/rel8/issues/71).\n\n- Fixed a typo in the documentation
  for `/=.`. ([#312](https://github.com/circuithub/rel8/pull/312))\n\n- Fixed a bug
  where `fromRational` could crash with repeating fractions. ([#309](https://github.com/circuithub/rel8/pull/309))\n\n-
  Fixed a typo in the documentation for `min`. ([#306](https://github.com/circuithub/rel8/pull/306))\n\n#
  1.4.1.0 (2023-01-19)\n\n## New features\n\n* Rel8 now supports window functions.
  See the \"Window functions\" section of the `Rel8` module documentation for more
  details. ([#182](https://github.com/circuithub/rel8/pull/182))\n* `Query` now has
  `Monoid` and `Semigroup` instances. ([#207](https://github.com/circuithub/rel8/pull/207))\n*
  `createOrReplaceView` has been added (to run `CREATE OR REPLACE VIEW`). ([#209](https://github.com/circuithub/rel8/pull/209)
  and [#212](https://github.com/circuithub/rel8/pull/212))\n* `deriving Rel8able`
  now supports more polymorphism. ([#215](https://github.com/circuithub/rel8/pull/215))\n*
  Support GHC 9.4 ([#199](https://github.com/circuithub/rel8/pull/199))\n\n## Bug
  fixes\n\n* Insertion of `DEFAULT` values has been fixed. ([#206](https://github.com/circuithub/rel8/pull/206))\n*
  Avoid some exponential SQL generation in `Rel8.Tabulate.alignWith`. ([#213](https://github.com/circuithub/rel8/pull/213))\n*
  `nextVal` has been fixed to work with case-sensitive sequence names. ([#217](https://github.com/circuithub/rel8/pull/217))\n\n##
  Other\n\n* Correct the documentation for \"Supplying `Rel8able` instances\" ([#200](https://github.com/circuithub/rel8/pull/200))\n*
  Removed some redundant internal code ([#202](https://github.com/circuithub/rel8/pull/202))\n*
  Rel8 is now less dependant on the internal Opaleye API. ([#204](https://github.com/circuithub/rel8/pull/204))\n\n#
  1.4.0.0 (2022-08-17)\n\n## Breaking changes\n\n* The behavior of `greatest`/`least`
  has been corrected, and was previously flipped. ([#183](https://github.com/circuithub/rel8/pull/183))\n\n##
  New features\n\n* `NullTable`/`HNull` have been added. This is an alternative to
  `MaybeTable` that doesn't use a tag columns. It's less flexible (no `Functor` or
  `Applicative` instance) and is meaningless when used with a table that has no non-nullable
  columns (so nesting `NullTable` is redundant). But in situations where the underlying
  `Table` does have non-nullable columns, it can losslessly converted to and from
  `MaybeTable`. It is useful for embedding into a base table when you don't want to
  store the extra tag column in your schema. ([#173](https://github.com/circuithub/rel8/pull/173))\n*
  Add `fromMaybeTable`. ([#179](https://github.com/circuithub/rel8/pull/179))\n* Add
  `alignMaybeTable`. ([#196](https://github.com/circuithub/rel8/pull/196))\n\n## Improvements\n\n*
  Optimize implementation of `AltTable` for `Tabulation` ([#178](https://github.com/circuithub/rel8/pull/178))\n\n##
  Other\n \n* Documentation improvements for `HADT`. ([#177](https://github.com/circuithub/rel8/pull/177))\n*
  Document example usage of `groupBy`. ([#184](https://github.com/circuithub/rel8/pull/184))\n*
  Build with and require Opaleye >= 0.9.3.3. ([#190](https://github.com/circuithub/rel8/pull/190))\n*
  Build with `hasql` 1.6. ([#195](https://github.com/circuithub/rel8/pull/195))\n\n#
  1.3.1.0 (2022-01-20)\n\n## Other\n\n* Rel8 now requires Opaleye >= 0.9.1. ([#165](https://github.com/circuithub/rel8/pull/165))\n\n#
  1.3.0.0 (2022-01-31)\n\n## Breaking changes\n\n* `div` and `mod` have been changed
  to match Haskell semantics. If you need the PostgreSQL `div()` and `mod()` functions,
  use `quot` and `rem`. While this is not an API change, we feel this is a breaking
  change in semantics and have bumped the major version number. ([#155](https://github.com/circuithub/rel8/pull/155))\n\n##
  New features\n\n* `divMod` and `quotRem` functions have been added, matching Haskell's
  `Prelude` functions. ([#155](https://github.com/circuithub/rel8/pull/155))\n* `avg`
  and `mode` aggregation functions to find the mean value of an expression, or the
  most common row in a query, respectively. ([#152](https://github.com/circuithub/rel8/pull/152))\n*
  The full `EqTable` and `OrdTable` classes have been exported, allowing for instances
  to be manually created. ([#157](https://github.com/circuithub/rel8/pull/157))\n*
  Added `like` and `ilike` (for the `LIKE` and `ILIKE` operators). ([#146](https://github.com/circuithub/rel8/pull/146))\n\n##
  Other\n\n* Rel8 now requires Opaleye 0.9. ([#158](https://github.com/circuithub/rel8/pull/158))\n*
  Rel8's test suite supports Hedgehog 1.1. ([#160](https://github.com/circuithub/rel8/pull/160))\n*
  The documentation for binary operations has been corrected. ([#162](https://github.com/circuithub/rel8/pull/162))\n\n#
  1.2.2.0 (2021-11-21)\n\n## Other\n\n* Support GHC 9.2 ([#145](https://github.com/circuithub/rel8/pull/145))\n*
  Correct the documentation for `except` ([#147](https://github.com/circuithub/rel8/pull/147))\n*
  Support `hasql` 1.5 ([#149](https://github.com/circuithub/rel8/pull/149))\n\n# 1.2.1.0
  (2021-11-21)\n\n## New features\n\n* `castTable` has been added, which casts all
  columns selected from in `Query` according to the types of columns. This can occasionally
  be useful when using `many`/`some` on older PostgreSQL versions. ([#137](https://github.com/circuithub/rel8/pull/137))\n\n*
  Added `<:`, `<=:`, `>:`, `>=:`, `greatest` and `least`, which sort all columns in
  a table lexicographically. These operators are like the `<.` operators which operate
  on `Expr`s, but the `<:` operate on entire tables. ([#139](https://github.com/circuithub/rel8/pull/139))\n\n##
  Other\n\n* Support opaleye-0.8 ([#142](https://github.com/circuithub/rel8/pull/142))\n\n#
  1.2.0.0 (2021-10-22)\n\n## New features\n\n* New `$*` and `$+` operators for projecting
  out of `ListTable` and `NonEmptyTable` respectively (analogous to the existing `$?`
  for `MaybeTable`). ([#125](https://github.com/circuithub/rel8/pull/125))\n\n## Bug
  fixes\n\n* Fix `UPSERT` support (and add tests), which was broken due to a typo
  inside Rel8 that made it impossible to construct `Projection`s which are needed
  by `UPSERT`. ([#134](https://github.com/circuithub/rel8/pull/134))\n\n* Remove `DBMin`
  and `DBMax` instances for `Bool`, which are invalid as far as Postgres is concerned.
  `and` and `or` can be used to achieve the same thing. ([#126](https://github.com/circuithub/rel8/pull/126))\n\n*
  Fix `aggregateMaybeTable`, `aggregateEitherTable` and `aggregateTheseTable`, which
  generated invalid SQL previously. ([#127](https://github.com/circuithub/rel8/pull/127))\n\n##
  Breaking changes\n\n* `rebind` now takes an additional argument for the \"name\"
  of the binding. ([#128](https://github.com/circuithub/rel8/pull/128))\n\n# 1.1.0.0
  (2021-07-16)\n\n## New features\n\n* You can derive `Rel8able` for \"vanilla\" higher-kinded
  data types - data types that don't use the `Column` type family. For example, the
  following is now possible:\n\n  ```haskell\n  data MyTable f = MyTable\n    { myTableX
  :: f Int32\n    , myTableY :: f Text\n    } deriving (Generic, Rel8able)\n  ```\n\n*
  The `Projectable` and `Biprojectable` type classes have been introduced. These classes
  model a type of functors and bifunctors (respectively) on tables, where the mapping
  function is only able to rearrange columns. For example, the following is now possible:\n\n
  \ ```haskell\n  x <- project myTableX <$> many ...\n  ```\n\n* `Insert`'s `onConflict`
  field now has a new option - `DoUpdate`. This maps to PostgreSQL's `ON CONFLICT
  DO UPDATE` syntax, which provides upsert support. ([#85](https://github.com/circuithub/rel8/pull/85))\n\n*
  `Insert`, `Update` and `Delete` has all been expanded to work with `Query`s. In
  particular:\n\n  * `Delete` now supports a `USING` sub-query\n  * `Update` now supports
  a `FROM` sub-query\n  * `Insert` can delete the result of any arbitrary `Query`
  (providing the types match)\n\n* The new `Rel8.Tabulate` module has been added,
  which gives a `Map`-esque interface to writing and composing queries. ([#70](https://github.com/circuithub/rel8/pull/70))\n\n*
  The new `indexed` `Query -> Query` function was added. This function augments each
  row in a query with it's 0-based index. ([#117](https://github.com/circuithub/rel8/pull/117))\n\n##
  Breaking changes\n\n* `Insert`, `Delete` and `Update` have all changed. In particular,
  for `Insert` users should now replace `rows = xs` with `rows = values xs`. ([#85](https://github.com/circuithub/rel8/pull/85))\n\n*
  Rename `whereExists` and `whereNotExists` to `present` and `absent` respectively.
  ([#57](https://github.com/circuithub/rel8/pull/57))\n\n* Simplify `evaluate` to
  run directly inside the `Query` monad, rendering the `Evaluate` monad unnecessary.
  ([#56](https://github.com/circuithub/rel8/pull/56))\n\n* The `Labelable` type class
  has been removed as it's no longer necessary. This class was mostly internal, though
  was visible in some public API functions. ([#76](https://github.com/circuithub/rel8/pull/76))\n\n*
  `EitherTable`, `ListTable`, `MaybeTable`, `NonEmptyTable` and `TheseTable` now all
  have an extra parameter which tracks the context of the table. If you manually specified
  any types before, you need to provide this parameter - usually `Expr` will be the
  correct choice. ([#101](https://github.com/circuithub/rel8/pull/101))\n\n* We've
  done a lot of work to simplify the internals of Rel8, but some of these are breaking
  changes. However, most of these API changes shouldn't affect users as they are mostly
  types used in type inference, or affect classes where users don't need to define
  their own instances.\n\n  * The kind of a `Rel8able` is now `(Type -> Type) -> Type`.
  Previously it was `(X -> Type) -> Type`.\n  * `Table` has a new associated type
  - `FromExprs`. This was previously an open type family.\n  * `Table` has a new associated
  type - `Transpose` - and `Recontextualise` has been renamed to `Transposes`. This
  `Transposes` class now operates in terms of `Transpose`.\n\n* `select`, `insert`,
  `update` and `delete` now produce Hasql `Statement`s, rather than actually running
  the statement as IO. This allows Rel8 to be used with transaction/connection-managing
  monads like [`hasql-transaction`](https://hackage.haskell.org/package/hasql-transaction).
  ([#94](https://github.com/circuithub/rel8/pull/94))\n\n## Bug fixes\n\n* Fixes a
  bug where cartesian products of queries using `catListTable`, `catNonEmptyTable`,
  `catList` and `catNonEmpty` would incorrectly be zipped instead. ([#61](https://github.com/circuithub/rel8/pull/61))\n\n*
  Require Opaleye 0.7.3.0. This version has better support for lateral queries, which
  can improve query plans, especially in `optional`/`LEFT JOIN` ([#72](https://github.com/circuithub/rel8/pull/72))\n\n*
  Rel8 now compiles with GHC 9. ([#97](https://github.com/circuithub/rel8/pull/97))\n\n##
  Other changes\n\n* `exists` is now implemented in terms of the SQL `EXISTS` keyword.
  ([#69](https://github.com/circuithub/rel8/pull/69))\n\n* `alignBy` no longer requires
  `Table`s. ([#67](https://github.com/circuithub/rel8/pull/67))\n\n\n# 1.0.0.1 (2021-06-21)\n\nThis
  release contains various fixes for documentation.\n\n# 1.0.0.0 (2021-06-18)\n\n*
  Initial release.\n"
changelog-type: markdown
description: |
  # Welcome!

  Welcome to Rel8! Rel8 is a Haskell library for interacting with PostgreSQL databases, built on top of the fantastic Opaleye library.

  The main objectives of Rel8 are:

  * *Conciseness*: Users using Rel8 should not need to write boiler-plate code. By using expressive types, we can provide sufficient information for the compiler to infer code whenever possible.

  * *Inferrable*: Despite using a lot of type level magic, Rel8 aims to have excellent and predictable type inference.

  * *Familiar*: writing Rel8 queries should feel like normal Haskell programming.

  Rel8 was presented at ZuriHac 2021. If you want to have a brief overview of what Rel8 is, and a tour of the API - check out the video below:

  [![Rel8 presentation at ZuriHac 2021](https://img.youtube.com/vi/3uwrtjxiq6E/hqdefault.jpg)](http://www.youtube.com/watch?v=3uwrtjxiq6E)

  For more details, check out the [official documentation](https://rel8.readthedocs.io/en/latest/).
description-type: markdown
hash: 8007f7aa1173fee39c3dc54b45c3f22bcfaf0b1db8c09176c96b24dce232ac06
homepage: https://github.com/circuithub/rel8
latest: 1.7.0.0
license-name: BSD-3-Clause
maintainer: ollie@ocharles.org.uk
synopsis: Hey! Hey! Can u rel8?
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  containers: '>=0'
  hasql: '>=0'
  hasql-transaction: '>=0'
  hedgehog: '>=1.0 && <1.6'
  iproute: '>=0'
  mmorph: '>=0'
  rel8: '>=0'
  scientific: '>=0'
  tasty: '>=0'
  tasty-hedgehog: '>=0'
  text: '>=0'
  these: '>=0'
  time: '>=0'
  tmp-postgres: '>=1.34 && <1.36'
  transformers: '>=0'
  uuid: '>=0'
  vector: '>=0'
