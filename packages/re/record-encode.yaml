all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
author: Marco Zocca
basic-deps:
  base: '>=4.7 && <5'
  generics-sop: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "# record-encode\n\n## Encoding categorical variables\n\n[![Build Status](https://travis-ci.org/ocramz/record-encode.png)](https://travis-ci.org/ocramz/record-encode)\n[![Hackage](https://img.shields.io/hackage/v/record-encode.svg)](https://hackage.haskell.org/package/record-encode)\n\nThis
  library provides generic machinery to encode values of some algebraic type as points
  in a vector space.\n\nValues of a sum type (e.g. enumerations) are also called \"categorical\"
  variables in statistics, because they encode a choice between a number of discrete
  categories.\n\nOn the other hand, many data science / machine learning algorithms
  rely on a purely numerical representation of data; the conversion code from values
  of a static type is often \"boilerplate\", i.e. largely repeated and not informative.\n\nThe
  `encodeOneHot` function provided here is a generic utility function (i.e. defined
  once and for all) to compute the one-hot representation of any sum type. \n\n# Usage
  example\n\n```\n    {-# language DeriveGeneric -#}\n\n    import qualified GHC.Generics
  as G\n    import qualified Generics.SOP as SOP\n    \n    import Data.Record.Encode\n\n
  \   data X = A | B | C deriving (G.Generic)\n    instance SOP.Generic X\n```\n\n```\n
  \   > encodeOneHot B\n    OH {oDim = 3, oIx = 1}\n```\n\nPlease refer to the documentation
  of Data.Record.Encode for more examples and details.\n\n\n# Acknowledgements\n\nGagandeep
  Bhatia (@gagandeepb) for his Google Summer of Code 2018 work on [`Frames-beam`](https://github.com/gagandeepb/Frames-beam),
  Mark Karpov (@mrkkrp) for his Template Haskell tutorial, Anthony Cowley (@acowley)
  for [`Frames`](https://hackage.haskell.org/package/Frames), @mniip on Freenode #haskell
  for helping me better understand what can be done with generic programming."
description-type: markdown
hash: 92000c8a285159c1f23ed733b464ffdf6cf9161a7621414bbf9b7c806f708d2f
homepage: https://github.com/ocramz/record-encode
latest: 0.2.3
license-name: BSD-3-Clause
maintainer: ocramz fripost org
synopsis: Generic encoding of records
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  doctest: '>=0'
  generics-sop: '>=0'
  hspec: '>=0'
  record-encode: '>=0'
  vector: '>=0'
