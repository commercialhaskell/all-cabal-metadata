homepage: https://github.com/raehik/refined-with#readme
changelog-type: markdown
hash: e14ed1f1c4fe4ea03fdca94cae70045bfce0668545e5e74b0414bfac2fc7fa77
test-bench-deps: {}
maintainer: Ben Orchard <thefirstmuffinman@gmail.com>
synopsis: Refinement types with an "refinement applied" switch.
changelog: |
  ## 0.3.0 (2022-04-23)
    * use more consistently useful type variable order across definitions

  ## 0.2.1 (2022-04-23)
    * add `unsafeWithRefine :: forall p ps a. a -> WithRefine ps p a`

  ## 0.2.0 (2022-04-23)
    * rename `unWithRefine` to `withoutRefine`
    * reorder `reallyUnsafeEnforce` typevars for visible type application
      convenience

  ## 0.1.0 (2022-04-22)
  Initial release.

    * extracted from gtvm-hs
basic-deps:
  base: '>=4.14 && <5'
  refined: '>=0.6.3 && <0.7'
  hashable: ==1.4.*
  deepseq: ==1.4.*
  aeson: ==2.0.*
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.3.0
author: Ben Orchard
latest: 0.3.0
description-type: markdown
description: |
  # refined-with
  Layer on top of Nikita Volkov's
  [refined](https://hackage.haskell.org/package/refined) library to allow
  annotating data types with refinements, and a flag that indicates whether that
  refinement has been "applied".

  See the Hackage documentation for details.
license-name: MIT
