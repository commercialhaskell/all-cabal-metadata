homepage: ''
changelog-type: markdown
hash: 6790d7bd7972590bba3b37e103766a4b4a6844fa13f3a66737fe5de54dbc6dee
test-bench-deps:
  bytestring: -any
  dependent-sum: -any
  unix: -any
  base: -any
  hspec: -any
  process: -any
  async: -any
  ref-tf: -any
  containers: -any
  mtl: -any
  reflex: -any
  reflex-process: -any
  primitive: -any
maintainer: maintainer@obsidian.systems
synopsis: Reflex FRP interface for running system processes
changelog: |
  # Revision history for reflex-process

  ## 0.3.1.2

  * Update readme example to support reflex-vty 0.3

  ## 0.3.1.1

  * Update readme example to use reflex-vty 0.2

  ## 0.3.1.0

  * Support reflex 0.8
  * Fix a handle leak (#23) and a thread leak (#24)

  ## 0.3.0.0

  * ([#15](https://github.com/reflex-frp/reflex-process/pull/15), [#13](https://github.com/reflex-frp/reflex-process/pull/13)) **(Breaking change)** Introduce `SendPipe` type for encoding when an input stream should send EOF. Change `createProcess` to take a `ProcessConfig t (SendPipe ByteString)` so that sending EOF is possible.
    * **IMPORTANT**: For `createProcess` messages to `stdin` must now be wrapped in `SendPipe_Message` *and* have a `"\n"` manually appended to regain the old behavior. Previously `createProcess` implicitly added a `"\n"` to all messages sent to the process. This has been removed and *you must now manually add any necessary new lines to your messages.* This change allows `createProcess` to work with processes in a encoding-agnostic way on `stdin`.
  * ([#17](https://github.com/reflex-frp/reflex-process/pull/17)) Deprecate `createRedirectedProcess` in favor of a new, scarier name: `unsafeCreateProcessWithHandles`. This was done to communicate that it does not enforce necessary guarantees for the process to be handled correctly.
  * ([#11](https://github.com/reflex-frp/reflex-process/pull/11)) Add `createProcessBufferingInput` for buffering input to processes and change `createProcess` to use an unbounded buffer instead of blocking the FRP network when the process blocks on its input handle.
  * ([#11](https://github.com/reflex-frp/reflex-process/pull/11), [#14](https://github.com/reflex-frp/reflex-process/pull/14)) `ProcessConfig` now includes a `_processConfig_createProcess` field for customizing how the process is created.
  * ([#13](https://github.com/reflex-frp/reflex-process/pull/13)) Fix race condition between process completion `Event`s and process `stdout`/`stderr` `Event`s. Process completion is now always the very last `Event` to fire for a given `Process`.
  * ([#17](https://github.com/reflex-frp/reflex-process/pull/17)) Add `defProcessConfig` to avoid forcing users to depend on `data-default`.


  ## 0.2.1.0

  * `createProcess`: Ensure that handle is open before attempting to check whether it is readable

  ## 0.2.0.0

  * Breaking change: Generalise input and output parameters of createRedirectedProcess. Existing programs should replace `Process t` with `Process t ByteString ByteString` and `ProcessConfig t` with `ProcessConfig t ByteString`.

  ## 0.1.0.1

  * Loosen reflex-vty version bounds

  ## 0.1.0.0

  * Initial release. The core of the interface is `Reflex.Process.createProcess`, which runs a `System.Process.CreateProcess` command, taking `Event`s of input and producing `Event`s of output.
basic-deps:
  bytestring: '>=0.10 && <0.12'
  unix: '>=2.7 && <2.9'
  base: '>=4.12 && <4.19'
  text: '>=1.2.3 && <2.1'
  vty: -any
  process: '>=1.6.4 && <1.7'
  async: '>=2 && <3'
  data-default: '>=0.2 && <0.8'
  containers: '>=0.5 && <0.7'
  reflex: '>=0.7.1 && <1'
  reflex-process: -any
  reflex-vty: '>=0.2 && <0.5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
author: Obsidian Systems LLC
latest: 0.3.1.2
description-type: text
description: |+
  reflex-process
  ==============

  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/reflex-process.svg)](https://hackage.haskell.org/package/reflex-process) [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/reflex-process/badge)](https://matrix.hackage.haskell.org/#/package/reflex-process) [![Travis CI](https://api.travis-ci.org/reflex-frp/reflex-process.svg?branch=develop)](https://travis-ci.org/reflex-frp/reflex-process) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/reflex-frp/reflex-process/blob/master/LICENSE)

  Functional-reactive system processes
  ------------------------------------

  Run and interact with system processes from within a [Reflex FRP](https://reflex-frp.org/) application.

  Example
  -------

  The following example uses [reflex-vty](https://github.com/reflex-frp/reflex-vty) to run a terminal application that calls a shell command and displays the result:

  ```haskell
  > {-# LANGUAGE OverloadedStrings #-}
  > import Reflex
  > import Reflex.Process
  > import Reflex.Vty
  >
  > import Control.Monad ((<=<))
  > import Data.Default (def)
  > import qualified Data.Set as Set
  > import qualified Data.Text as T
  > import qualified Data.Text.Encoding as T
  > import qualified Graphics.Vty.Input as V
  > import qualified System.Process as P
  >
  > cmd :: P.CreateProcess
  > cmd = P.proc "ls" ["-a"]
  >
  > main :: IO ()
  > main = mainWidget $ initManager_ $ col $ do
  >   exit <- keyCombos $ Set.singleton (V.KChar 'c', [V.MCtrl])
  >   p <- createProcess cmd def
  >   stdout <- foldDyn (flip mappend) "" $ _process_stdout p
  >   grout flex $ boxStatic def $ col $ do
  >     grout (fixed 3) $ boxStatic def $ text "reflex-process"
  >     grout (fixed 3) $ text "Press Ctrl-C to exit."
  >     grout (fixed 2) $ text $ pure $ "Running command: " <> case P.cmdspec cmd of
  >       P.ShellCommand s -> T.pack s
  >       P.RawCommand p args -> T.intercalate " " $ T.pack <$> (p : args)
  >     grout (fixed 1) $ text "stdout:"
  >     grout flex $ text $ T.decodeUtf8 <$> current stdout
  >   pure $ () <$ exit
  ```

  Developer environment
  ---------------------

  You can get `ghcid` running for working on the code with the command:

  ```bash
  nix-shell -E '((import ./reflex-platform {}).ghc.callCabal2nix "reflex-process" ./. {}).env' --run ghcid
  ```

license-name: BSD-3-Clause
