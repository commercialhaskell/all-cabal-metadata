all-versions:
- 1.0.0.0
- 1.0.1.0
- 1.0.2.0
- 1.0.3.0
- 1.2.0.0
- 1.2.1.0
- 1.2.2.0
- 1.4.0.0
- 1.4.1.0
- 1.4.2.0
- 1.4.4.0
- 1.4.5.0
- 1.5.0.0
author: James Brock <jamesbrock@gmail.com>
basic-deps:
  attoparsec: '>=0.4 && <1.0'
  base: '>=4.0 && <5.0'
  bytestring: '>=0.2 && <1.0'
  text: '>=0.2 && <3.0'
changelog: |+
  # Revision history for replace-attoparsec

  ## 1.5.0.0 -- 2023-05-30

  Upgrade to GHC v9.4.4, text v2.0.1

  Text does not work with GHC v9.4.3

  Test
  * exitcode-stdio-1.0 instead of detailed-0.9
  * HSpec instead of Cabal Distribution.TestSuite

  ## 1.4.5.0 -- 2021-07-29

  Add Replace.Attoparsec.Text.Lazy

  ## 1.4.4.0 -- 2021-01-08

  Deprecate `findAll` and `findAllCap`.

  ## 1.4.2.0 -- 2020-09-28

  Bugfix sepCap backtracking when sep fails

  See [replace-megaparsec/issues/33](https://github.com/jamesdbrock/replace-megaparsec/issues/33)

  ## 1.4.0.0 -- 2020-05-06

  __Running Parsers__: Add `splitCap` and `breakCap`.

  __Parser Combinators__: Add `anyTill`.

  ## 1.2.0.0 -- 2019-10-31

  Benchmark improvements

  Specializations of the `sepCap` function, guided by
  [replace-benchmark](https://github.com/jamesdbrock/replace-benchmark).

  ### New benchmarks

  | Program                                           | dense     | sparse   |
  | :---                                              |      ---: |     ---: |
  | `Replace.Attoparsec.ByteString.streamEdit`        | 394.12ms  | 41.13ms  |
  | `Replace.Attoparsec.Text.streamEdit`              | 515.26ms  | 46.10ms  |

  ### Old benchmarks

  | Program                                           | dense     | sparse   |
  | :---                                              |      ---: |     ---: |
  |  `Replace.Attoparsec.ByteString.streamEdit`       | 537.57ms  | 407.33ms |
  |  `Replace.Attoparsec.Text.streamEdit`             | 549.62ms  | 280.96ms |

  Also don't export `getOffset` anymore. It's too complicated to explain
  what it means for `Text`. If users want to know positional parsing information
  then they should use Megaparsec.

  ## 1.0.0.0 -- 2019-09-10

  * First version.

changelog-type: markdown
description: "# replace-attoparsec\n\n[![Hackage](https://img.shields.io/hackage/v/replace-attoparsec.svg?style=flat)](https://hackage.haskell.org/package/replace-attoparsec)\n[![Stackage
  Nightly](http://stackage.org/package/replace-attoparsec/badge/nightly)](http://stackage.org/nightly/package/replace-attoparsec)\n[![Stackage
  LTS](http://stackage.org/package/replace-attoparsec/badge/lts)](http://stackage.org/lts/package/replace-attoparsec)\n\n*
  [Usage Examples](#usage-examples)\n* [In the Shell](#in-the-shell)\n* [Alternatives](#alternatives)\n*
  [Benchmarks](#benchmarks)\n* [Hypothetically Asked Questions](#hypothetically-asked-questions)\n\n__replace-attoparsec__
  is for finding text patterns, and also\nreplacing or splitting on the found patterns.\nThis
  activity is traditionally done with regular expressions,\nbut __replace-attoparsec__
  uses\n[__attoparsec__](http://hackage.haskell.org/package/attoparsec)\nparsers instead
  for the pattern matching.\n\n__replace-attoparsec__ can be used in the same sort
  of “pattern capture”\nor “find all” situations in which one would use Python\n[`re.findall`](https://docs.python.org/3/library/re.html#re.findall)\nor\nPerl
  [`m//`](https://perldoc.perl.org/functions/m.html),\nor\nUnix [`grep`](https://www.gnu.org/software/grep/).\n\n__replace-attoparsec__
  can be used in the same sort of “stream editing”\nor “search-and-replace” situations
  in which one would use Python\n[`re.sub`](https://docs.python.org/3/library/re.html#re.sub),\nor\nPerl
  [`s///`](https://perldoc.perl.org/functions/s.html),\nor Unix\n[`sed`](https://www.gnu.org/software/sed/manual/html_node/The-_0022s_0022-Command.html),\nor\n[`awk`](https://www.gnu.org/software/gawk/manual/gawk.html).\n\n__replace-attoparsec__
  can be used in the same sort of “string splitting”\nsituations in which one would
  use Python\n[`re.split`](https://docs.python.org/3/library/re.html#re.split)\nor
  Perl\n[`split`](https://perldoc.perl.org/functions/split.html).\n\nSee [__replace-megaparsec__](https://hackage.haskell.org/package/replace-megaparsec)\nfor
  the\n[__megaparsec__](http://hackage.haskell.org/package/megaparsec)\nversion.\n\n##
  Why would we want to do pattern matching and substitution with parsers instead of
  regular expressions?\n\n* Haskell parsers have a nicer syntax than\n  [regular expressions](https://en.wikipedia.org/wiki/Regular_expression),\n
  \ which are notoriously\n  [difficult to read](https://en.wikipedia.org/wiki/Write-only_language).\n\n*
  Regular expressions can do “group capture” on sections of the matched\n  pattern,
  but they can only return stringy lists of the capture groups. Parsers\n  can construct
  typed data structures based on the capture groups, guaranteeing\n  no disagreement
  between the pattern rules and the rules that we're using\n  to build data structures
  based on the pattern matches.\n\n  For example, consider\n  scanning a string for
  numbers. A lot of different things can look like a number,\n  and can have leading
  plus or minus signs, or be in scientific notation, or\n  have commas, or whatever.
  If we try to parse all of the numbers out of a string\n  using regular expressions,
  then we have to make sure that the regular expression\n  and the string-to-number
  conversion function agree about exactly what is\n  and what isn't a numeric string.
  We can get into an awkward situation in which\n  the regular expression says it
  has found a numeric string but the\n  string-to-number conversion function fails.
  A typed parser will perform both\n  the pattern match and the conversion, so it
  will never be in that situation.\n  [Parse, don't validate.](https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/)\n\n*
  Regular expressions are only able to pattern-match\n  [regular](https://en.wikipedia.org/wiki/Chomsky_hierarchy#The_hierarchy)\n
  \ grammers.\n  Attoparsec parsers are able pattern-match context-free grammers.\n\n*
  The replacement expression for a traditional regular expression-based\n  substitution
  command is usually just a string template in which\n  the *Nth* “capture group”
  can be inserted with the syntax `\\N`. With\n  this library, instead of a template,
  we get\n  an `editor` function which can perform any computation, including IO.\n\n#
  Usage Examples\n\nTry the examples in `ghci` by\nrunning `cabal v2-repl` in the
  `replace-attoparsec/`\nroot directory.\n\nThe examples depend on these imports and
  `LANGUAGE OverloadedStrings`.\n\n```haskell\n:set -XOverloadedStrings\nimport Replace.Attoparsec.Text\nimport
  Data.Attoparsec.Text as AT\nimport qualified Data.Text as T\nimport Control.Applicative\nimport
  Data.Either\nimport Data.Char\n```\n\n## Split strings with `splitCap`\n\n### Find
  all pattern matches, capture the matched text and the parsed result\n\nSeparate
  the input string into sections which can be parsed as a hexadecimal\nnumber with
  a prefix `\"0x\"`, and sections which can't. Parse the numbers.\n\n```haskell\nlet
  hexparser = string \"0x\" *> hexadecimal :: Parser Integer\nsplitCap (match hexparser)
  \"0xA 000 0xFFFF\"\n```\n```haskell\n[Right (\"0xA\",10), Left \" 000 \", Right
  (\"0xFFFF\",65535)]\n```\n\n### Pattern match balanced parentheses\n\nFind groups
  of balanced nested parentheses. This is an example of a\n“context-free” grammar,
  a pattern that can't be expressed by a regular\nexpression. We can express the pattern
  with a recursive parser.\n\n```haskell\nimport Data.Functor (void)\nimport Data.Bifunctor
  (second)\nlet parens :: Parser ()\n    parens = do\n        char '('\n        manyTill\n
  \           (void parens <|> void anyChar)\n            (char ')')\n        pure
  ()\n\nsecond fst <$> splitCap (match parens) \"(()) (()())\"\n```\n```haskell\n[Right
  \"(())\",Left \" \",Right \"(()())\"]\n```\n\n## Edit text strings with `streamEdit`\n\nThe
  following examples show how to search for a pattern in a string of text\nand then
  edit the string of text to substitute in some replacement text\nfor the matched
  patterns.\n\n### Pattern match and replace with a constant\n\nReplace all carriage-return-newline
  occurances with newline.\n\n```haskell\nstreamEdit (string \"\\r\\n\") (const \"\\n\")
  \"1\\r\\n2\\r\\n\"\n```\n```haskell\n\"1\\n2\\n\"\n```\n\n### Pattern match and
  edit the matches\n\nReplace alphabetic characters with the next character in the
  alphabet.\n\n```haskell\nstreamEdit (AT.takeWhile isLetter) (T.map succ) \"HAL 9000\"\n```\n```haskell\n\"IBM
  9000\"\n```\n\n### Pattern match and maybe edit the matches, or maybe leave them
  alone\n\nFind all of the string sections *`s`* which can be parsed as a\nhexadecimal
  number *`r`*,\nand if *`r≤16`*, then replace *`s`* with a decimal number. Uses the\n[`match`](https://hackage.haskell.org/package/attoparsec/docs/Data-Attoparsec-Text.html#v:match)\ncombinator.\n\n```haskell\nlet
  hexparser = string \"0x\" *> hexadecimal :: Parser Integer\nstreamEdit (match hexparser)
  (\\(s,r) -> if r <= 16 then T.pack (show r) else s) \"0xA 000 0xFFFF\"\n```\n```haskell\n\"10
  000 0xFFFF\"\n```\n\n### Pattern match and edit the matches with IO with `streamEditT`\n\nFind
  an environment variable in curly braces and replace it with its\nvalue from the
  environment.\n\n```haskell\nimport System.Environment (getEnv)\nstreamEditT (char
  '{' *> manyTill anyChar (char '}')) (fmap T.pack . getEnv) \"- {HOME} -\"\n```\n```haskell\n\"-
  /home/jbrock -\"\n```\n\n### Pattern match, edit the matches, and count the edits
  with `streamEditT`\n\nFind and capitalize no more than three letters in a string,
  and return the \nedited string along with the number of letters capitalized. To
  enable the\neditor function to remember how many letters it has capitalized, we'll
  \nrun `streamEditT` in the `State` monad from the `mtl` package. Use this\ntechnique
  to get the same functionality as Python\n[`re.subn`](https://docs.python.org/3/library/re.html#re.subn).\n\n```haskell\nimport
  qualified Control.Monad.State.Strict as MTL\nimport Control.Monad.State.Strict (get,
  put, runState)\nimport Data.Char (toUpper)\n\nlet editThree :: Char -> MTL.State
  Int T.Text\n    editThree x = do\n        i <- get\n        if i<3\n            then
  do\n                put $ i+1\n                pure $ T.singleton $ toUpper x\n
  \           else pure $ T.singleton x\n\nflip runState 0 $ streamEditT (satisfy
  isLetter) editThree \"a a a a a\"\n```\n```haskell\n(\"A A A a a\",3)\n```\n\n\n#
  In the Shell\n\nIf we're going to have a viable `sed` replacement then we want to
  be able\nto use it easily from the command line. This\n[Stack script interpreter](https://docs.haskellstack.org/en/stable/GUIDE/#script-interpreter)\nscript
  will find decimal numbers in a stream and replace them with their double.\n\n```haskell\n#!/usr/bin/env
  stack\n{- stack\n  script\n  --resolver lts-16\n  --package attoparsec\n  --package
  text\n  --package text-show\n  --package replace-attoparsec\n-}\n-- https://docs.haskellstack.org/en/stable/GUIDE/#script-interpreter\n\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport qualified Data.Text as T\nimport qualified
  Data.Text.IO as T\nimport TextShow\nimport Data.Attoparsec.Text\nimport Replace.Attoparsec.Text\n\nmain
  = T.interact $ streamEdit decimal (showt . (* (2::Integer)))\n```\n\nIf you have\n[The
  Haskell Tool Stack](https://docs.haskellstack.org/en/stable/README/)\ninstalled
  then you can just copy-paste this into a file named `doubler.hs` and\nrun it. (On
  the first run Stack may need to download the dependencies.)\n\n```bash\n$ chmod
  u+x doubler.hs\n$ echo \"1 6 21 107\" | ./doubler.hs\n2 12 42 214\n```\n\n\n# Alternatives\n\nSome
  libraries that one might consider instead of this one.\n\n<http://hackage.haskell.org/package/regex-applicative>\n\n<http://hackage.haskell.org/package/pcre-heavy>\n\n<http://hackage.haskell.org/package/lens-regex-pcre>\n\n<http://hackage.haskell.org/package/regex>\n\n<http://hackage.haskell.org/package/pipes-parse>\n\n<http://hackage.haskell.org/package/stringsearch>\n\n<http://hackage.haskell.org/package/substring-parser>\n\n<http://hackage.haskell.org/package/pcre-utils>\n\n<http://hackage.haskell.org/package/template>\n\n<https://github.com/RaminHAL9001/parser-sed-thing>\n\n<http://hackage.haskell.org/package/attosplit>\n\n#
  Benchmarks\n\nThese benchmarks are intended to measure the wall-clock speed\nof
  *everything except the actual pattern-matching*. Speed of the\npattern-matching
  is the responsibility of the\n[__megaparsec__](http://hackage.haskell.org/package/megaparsec)
  and\n[__attoparsec__](http://hackage.haskell.org/package/attoparsec)\nlibraries.\n\nThe
  benchmark task is to find all of the one-character patterns `x` in a\ntext stream
  and replace them by a function which returns the constant\nstring `oo`. So, like
  the regex `s/x/oo/g`.\n\nWe have two benchmark input cases, which we call __dense__
  and __sparse__.\n\nThe __dense__ case is one megabyte of alternating spaces and
  `x`s\nlike\n\n```\nx x x x x x x x x x x x x x x x x x x x x x x x x x x x\n```\n\nThe
  __sparse__ case is one megabyte of spaces with a single `x` in the middle\nlike\n\n```\n
  \                        x\n```\n\nEach benchmark program reads the input from `stdin`,
  replaces `x` with `oo`,\nand writes the result to `stdout`. The time elapsed is
  measured by `perf stat`,\nand the best observed time is recorded.\n\nSee [replace-benchmark](https://github.com/jamesdbrock/replace-benchmark)\nfor
  details.\n\n| Program                                           | dense *ms*  |
  sparse *ms* |\n| :---                                              |      ---: |
  \    ---:  |\n| Python 3.10.9 [`re.sub`](https://docs.python.org/3/library/re.html#re.sub)
  *repl* function | 557.22 | 35.47 |\n| Perl  v5.36.0 [`s///ge`](https://perldoc.perl.org/functions/s.html)
  function | 1208.66 | 12.61 |\n| [`Replace.Megaparsec.streamEdit`](https://hackage.haskell.org/package/replace-megaparsec/docs/Replace-Megaparsec.html#v:streamEdit)
  `String` | 2921.25 | 2911.81 |\n| [`Replace.Megaparsec.streamEdit`](https://hackage.haskell.org/package/replace-megaparsec/docs/Replace-Megaparsec.html#v:streamEdit)
  `ByteString` | 3743.25 | 757.21 |\n| [`Replace.Megaparsec.streamEdit`](https://hackage.haskell.org/package/replace-megaparsec/docs/Replace-Megaparsec.html#v:streamEdit)
  `Text` | 3818.47 | 881.69 |\n| [`Replace.Attoparsec.ByteString.streamEdit`](https://hackage.haskell.org/package/replace-attoparsec/docs/Replace-Attoparsec-ByteString.html#v:streamEdit)
  | 3006.38 | 179.66 |\n| [`Replace.Attoparsec.Text.streamEdit`](https://hackage.haskell.org/package/replace-attoparsec/docs/Replace-Attoparsec-Text.html#v:streamEdit)
  | 3062.43 | 300.13 |\n| [`Replace.Attoparsec.Text.Lazy.streamEdit`](https://hackage.haskell.org/package/replace-attoparsec/docs/Replace-Attoparsec-Text-Lazy.html#v:streamEdit)
  | 3102.15 | 241.58 |\n| [`Text.Regex.Applicative.replace`](http://hackage.haskell.org/package/regex-applicative/docs/Text-Regex-Applicative.html#v:replace)
  `String` | 13875.25 | 4330.52 |\n| [`Text.Regex.PCRE.Heavy.gsub`](http://hackage.haskell.org/package/pcre-heavy/docs/Text-Regex-PCRE-Heavy.html#v:gsub)
  `Text` | ∞ | 113.27 |\n| [`Control.Lens.Regex.ByteString.match`](https://hackage.haskell.org/package/lens-regex-pcre/docs/Control-Lens-Regex-ByteString.html#v:match)
  | ∞ | 117.05 |\n| [`Control.Lens.Regex.Text.match`](https://hackage.haskell.org/package/lens-regex-pcre/docs/Control-Lens-Regex-Text.html#v:match)
  | ∞ | 35.97 |\n\n\n# Hypothetically Asked Questions\n\n1. *Could we write this library
  for __parsec__?*\n\n   No, because the\n   [`match`](https://hackage.haskell.org/package/attoparsec/docs/Data-Attoparsec-Text.html#v:match)\n
  \  combinator doesn't exist for __parsec__. (I can't find it anywhere.\n   [Can
  it be written?](http://www.serpentine.com/blog/2014/05/31/attoparsec/#from-strings-to-buffers-and-cursors))\n\n2.
  *Is this a good idea?*\n\n   You may have\n   [heard it suggested](https://stackoverflow.com/questions/57667534/how-can-i-use-a-parser-in-haskell-to-find-the-locations-of-some-substrings-in-a/57712672#comment101804063_57667534)\n
  \  that monadic parsers are better for pattern-matching when\n   the input stream
  is mostly signal, and regular expressions are better\n   when the input stream is
  mostly noise.\n\n   The premise of this library is that monadic parsers are great
  for finding\n   small signal patterns in a stream of otherwise noisy text.\n\n   Our
  reluctance to forego the speedup opportunities afforded by restricting\n   ourselves
  to regular grammars is an old superstition about\n   opportunities which\n   [remain
  mostly unexploited anyway](https://swtch.com/~rsc/regexp/regexp1.html).\n   The
  performance compromise of allowing stack memory allocation (a.k.a. pushdown\n   automata,
  a.k.a. context-free grammar) was once considered\n   [controversial for *general-purpose*
  programming languages](https://vanemden.wordpress.com/2014/06/18/how-recursion-got-into-programming-a-comedy-of-errors-3/).\n
  \  I think we\n   can now resolve that controversy the same way for pattern matching
  languages.\n\n"
description-type: markdown
hash: e55d71780b0922479996d4884ff944d92654e9a2861168c4690c97921f042f58
homepage: https://github.com/jamesdbrock/replace-attoparsec
latest: 1.5.0.0
license-name: BSD-2-Clause
maintainer: James Brock <jamesbrock@gmail.com>
synopsis: Find, replace, split string patterns with Attoparsec parsers (instead of
  regex)
test-bench-deps:
  HUnit: '>=1.1 && <2.0'
  attoparsec: '>=0'
  base: '>=4.0 && <5.0'
  bytestring: '>=0'
  hspec: '>=2.0.0 && <3.0.0'
  parsers: '>=0.1 && <1.0'
  replace-attoparsec: '>=0'
  text: '>=0.2 && <3.0'
