all-versions:
- '0.0'
- '0.2'
- '0.3'
- '0.5'
- 0.5.0.1
- 0.8.3
- 0.8.6
- 0.8.8
- 0.9.0
- 0.9.1
- 0.9.3
- 0.9.4
- 0.9.5
- 0.9.6
- 0.9.7
- 0.9.8
- 0.9.9
- 0.9.10
- 0.10.0
- 0.10.1
- 0.10.2
- 0.10.3
- 0.10.4
- 0.10.5
- 0.10.7
- '0.11'
- 0.11.2
- 0.11.3
- 0.11.4
- 0.11.5
author: Conal Elliott
basic-deps:
  QuickCheck: '>=2.1.0.2'
  Stream: '>=0.3.1'
  TypeCompose: '>=0.8.0'
  base: '>=4 && <5'
  category-extras: '>=0.53.5'
  checkers: '>=0.2.3'
  old-time: '>=0'
  random: '>=0'
  unamb: '>=0.1.5'
  vector-space: '>=0.5'
changelog: |
  == Version 0 ==

  === Version 0.8 ===

  === Version 0.8.1 ===

  * Adding QuickCheck tests.

  ''Fill in missing versions''


  === Version 0.3 ===

  * Commented out LANGUAGE pragmas and added OPTIONS_GHC -fglasgow-exts for ghc-6.6 compatibility.

  === Version 0.2 ===

  * Fixed <hask>switcher</hask>.  Didn't terminate.  Thanks to Ivan Tomac for the bug report.

  === Version 0.1 ===

  * Added <hask>Never</hask> constructor for Future.  Allows optimizations, including a huge improvement for <hask>(>>=)</hask> on <hask>Event</hask> (which had been piling up <hask>never</hask>s).
  * removed <code>-threaded</code> comment
  * added <hask>traceR</hask> (reactive value tracing)
  * use idler in <code>src/Examples.hs</code> (for single-threaded use of wxHaskell)

  === Version 0.0 ===

  * New project.
changelog-type: text
description: |
  _Reactive_ [1] is a simple foundation for programming reactive systems
  functionally.  Like Fran/FRP, it has a notions of (reactive) behaviors and
  events.  Like DataDriven [2], Reactive has a data-driven implementation.

  The inspiration for Reactive was Mike Sperber's Lula [3] implementation of
  FRP.  Mike used blocking threads, which I had never considered for FRP.
  While playing with the idea, I realized that I could give a very elegant
  and efficient solution to caching, which DataDriven doesn't do.  (For an
  application "f <*> a" of a varying function to a varying argument, caching
  remembers the latest function to apply to a new argument and the last
  argument to which to apply a new function.)

  The theory and implementation of Reactive are described in the paper
  "Push-pull functional reactive programming" [4].

  Note that cabal[5], version 1.4.0.1 or greater is required for installation.

  You can configure, build, and install all in the usual way with Cabal
  commands.

    runhaskell Setup.lhs configure
    runhaskell Setup.lhs build
    runhaskell Setup.lhs install


  References:

  [1] http://haskell.org/haskellwiki/Reactive
  [2] http://haskell.org/haskellwiki/DataDriven
  [3] http://www-pu.informatik.uni-tuebingen.de/lula/deutsch/publications.html
  [4] http://conal.net/papers/push-pull-frp/
  [5] http://www.haskell.org/cabal/download.html
description-type: text
hash: 9a3f5445cf166c2c05523b615263cdcb397907c3edfb77c4158b081844f58e7e
homepage: http://haskell.org/haskellwiki/reactive
latest: 0.11.5
license-name: LicenseRef-OtherLicense
maintainer: conal@conal.net
synopsis: Push-pull functional reactive programming
test-bench-deps: {}
