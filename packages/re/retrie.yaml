homepage: https://github.com/facebookincubator/retrie
changelog-type: markdown
hash: 892a772705ca900487ab127f0adc3ba08f0f05554be71f30d2e3552a817d8c06
test-bench-deps:
  exceptions: -any
  ghc: -any
  base: -any
  unordered-containers: -any
  text: -any
  syb: -any
  ghc-exactprint: -any
  filepath: -any
  process: -any
  data-default: -any
  HUnit: -any
  containers: -any
  haskell-src-exts: -any
  ghc-paths: -any
  retrie: -any
  mtl: -any
  tasty-hunit: -any
  temporary: -any
  optparse-applicative: -any
  tasty: -any
  deepseq: -any
  directory: -any
maintainer: Andrew Farmer <anfarmer@fb.com>
synopsis: A powerful, easy-to-use codemodding tool for Haskell.
changelog: "\n1.2.0.0 (December 12, 2021)\n\n* Early support for GHC 9.2.1 (thanks
  to Alan Zimmerman) \n* Dropped support for GHC <9.2 (might readd it later)\n\n1.1.0.0
  (November 13, 2021)\n* Remove dependency on xargs (#31)\n* Allow rewrite elaboration\n\n1.0.0.0
  (April 9, 2021)\n\n* Added --adhoc-type flag (#13)\n* Added --adhoc-pattern, --pattern-forward,
  --pattern-backward (#15)\n* Speed up file search when large number of files match.\n*
  Removed support for GHC 8.4 and 8.8\n* Added support for GHC 9.0.1\n\n0.1.1.1 (June
  1, 2020)\n\n* Remove dependency on haskell-src-exts from library (#9)\n* Support
  additional pattern syntax when generating fold/unfold rewrites (#8)\n* Limit partial-application
  rewrite variants to irrefutible patterns (#7)\n* Fix handling of qualified names
  during substitution (#5)\n* Fix self-recursion check for do-syntax binds (#5)\n*
  Fix bug in grep invocation for relative target paths (#5)\n\n0.1.1.0 (May 8, 2020)\n\n*
  Support GHC 8.10.1\n\n0.1.0.1 (April 1, 2020)\n\n* Don't fail if 'git' or 'hg' commands
  cannot be found.\n* Better error message when syntax support needs to be extended.\n*
  Add support for following type syntax: lists, tuples, constraints,\n  unboxed sums,
  and forall.\n\n0.1.0.0 (March 16, 2020)\n\nInitial release\n"
basic-deps:
  ghc: '>=9.2 && <9.7'
  bytestring: '>=0.10.8 && <0.12'
  base: '>=4.11 && <4.18'
  unordered-containers: '>=0.2.10 && <0.3'
  text: '>=1.2.3 && <2.1'
  syb: '>=0.7.1 && <0.8'
  ghc-exactprint: '>=1.5.0 && <1.8'
  list-t: '>=1.0.4 && <1.1'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.3 && <1.7'
  async: '>=2.2.2 && <2.3'
  data-default: '>=0.7.1 && <0.8'
  random-shuffle: '>=0.0.4 && <0.1'
  containers: '>=0.5.11 && <0.7'
  haskell-src-exts: '>=1.23.0 && <1.24'
  ansi-terminal: '>=0.10.3 && <0.12'
  ghc-paths: -any
  retrie: -any
  mtl: '>=2.2.2 && <2.4'
  transformers: '>=0.5.5 && <0.7'
  optparse-applicative: '>=0.15.1 && <0.18'
  directory: '>=1.3.1 && <1.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
- 1.2.1
- 1.2.1.1
- 1.2.2
author: Andrew Farmer <anfarmer@fb.com>
latest: 1.2.2
description-type: markdown
description: "Retrie is a powerful, easy-to-use codemodding tool for Haskell. \n\n#
  Install\n\n```\ncabal update\ncabal install retrie\n```\n\n# Example\n\nAssume you
  have some code, including functions like `foo`:\n\n```haskell\nmodule MyModule where\n\nfoo
  :: [Int] -> [Int]\nfoo ints = map bar (map baz ints)\n```\n\nSomeone points out
  that traversing the list `ints` twice is slower than doing it once. You could fix
  the code by hand, or you could rewrite it with retrie:\n\n```bash\nretrie --adhoc
  \"forall f g xs. map f (map g xs) = map (f . g) xs\"\n```\n\nRetrie applies the
  equation as a rewrite to all the Haskell modules it finds in the current directory:\n\n```diff\n
  module MyModule where\n\n foo :: [Int] -> [Int]\n-foo ints = map bar (map baz ints)\n+foo
  ints = map (bar . baz) ints\n```\n\nOf course, now you might find this code more
  difficult to understand. You also learn that GHC will do this sort of optimization
  automatically, so you decide to undo your rewrite:\n\n```bash\nretrie --adhoc \"forall
  f g xs. map (f . g) xs = map f (map g xs)\"\n```\n\nNow you have your original code
  back.\n\n# Other Sources Of Equations\n\n* The `--adhoc` flag, above, admits anything
  you can specify in a `RULES` pragma.\n* You can apply actual `RULES` pragmas, in
  either direction, with `--rule-forward` and `--rule-backward`.\n* Since definitions
  in Haskell are themselves equations, you can unfold (or inline) function definitions
  with `--unfold`. You can also fold a function definition with `--fold`, replacing
  an instance of the function's body with a call to that function.\n* Type synonyms
  are also equations. You can apply type synonyms in either direction using `--type-forward`
  and `--type-backward`.\n\nTo try some examples, put the following into `MyModule2.hs`:\n\n```haskell\nmodule
  MyModule2 where\n\nmaybe :: b -> (a -> b) -> Maybe a -> b\nmaybe d f mb = case mb
  of\n  Nothing -> d\n  Just x -> f x\n\ntype MyMaybe = Maybe Int\n\n{-# RULES \"myRule\"
  forall x. maybe Nothing Just x = x #-}\n\nfoo :: Maybe Int\nfoo = maybe Nothing
  Just (Just 5)\n```\n\nThen try the following rewrites and check the contents of
  the module after each step:\n\n```bash\nretrie --type-backward MyModule2.MyMaybe\n```\n\n```diff\n
  module MyModule2 where\n\n maybe :: b -> (a -> b) -> Maybe a -> b\n maybe d f mb
  = case mb of\n   Nothing -> d\n   Just x -> f x\n\n type MyMaybe = Maybe Int\n\n
  {-# RULES \"myRule\" forall x. maybe Nothing Just x = x #-}\n\n-foo :: Maybe Int\n+foo
  :: MyMaybe\n foo = maybe Nothing Just (Just 5)\n```\n\n```bash\nretrie --unfold
  MyModule2.maybe\n```\n\n```diff\n module MyModule2 where\n\n maybe :: b -> (a ->
  b) -> Maybe a -> b\n maybe d f mb = case mb of\n   Nothing -> d\n   Just x -> f
  x\n\n type MyMaybe = Maybe Int\n\n-{-# RULES \"myRule\" forall x. maybe Nothing
  Just x = x #-}\n+{-# RULES \"myRule\" forall x. case x of\n+            Nothing
  -> Nothing\n+            Just x1 -> Just x1 = x #-}\n\n foo :: MyMaybe\n-foo = maybe
  Nothing Just (Just 5)\n+foo = case Just 5 of\n+  Nothing -> Nothing\n+  Just x ->
  Just x\n```\n\n```bash\nretrie --fold MyModule2.maybe\n```\n\n```diff\n module MyModule2
  where\n\n maybe :: b -> (a -> b) -> Maybe a -> b\n maybe d f mb = case mb of\n   Nothing
  -> d\n   Just x -> f x\n\n type MyMaybe = Maybe Int\n\n-{-# RULES \"myRule\" forall
  x. case x of\n-            Nothing -> Nothing\n-            Just x1 -> Just x1 =
  x #-}\n+{-# RULES \"myRule\" forall x. maybe Nothing Just x = x #-}\n\n foo :: MyMaybe\n-foo
  = case Just 5 of\n-  Nothing -> Nothing\n-  Just x -> Just x\n+foo = maybe Nothing
  Just (Just 5)\n```\n\n```bash\nretrie --rule-forward MyModule2.myRule\n```\n\n```diff\n
  module MyModule2 where\n\n maybe :: b -> (a -> b) -> Maybe a -> b\n maybe d f mb
  = case mb of\n   Nothing -> d\n   Just x -> f x\n\n type MyMaybe = Maybe Int\n\n
  {-# RULES \"myRule\" forall x. maybe Nothing Just x = x #-}\n\n foo :: MyMaybe\n-foo
  = maybe Nothing Just (Just 5)\n+foo = Just 5\n```\n\n```bash\nretrie --type-forward
  MyModule2.MyMaybe\n```\n\n```diff\n module MyModule2 where\n\n maybe :: b -> (a
  -> b) -> Maybe a -> b\n maybe d f mb = case mb of\n   Nothing -> d\n   Just x ->
  f x\n\n type MyMaybe = Maybe Int\n\n {-# RULES \"myRule\" forall x. maybe Nothing
  Just x = x #-}\n\n-foo :: MyMaybe\n+foo :: Maybe Int\n foo = Just 5\n```\n\n# Motivation\n\nRefactoring
  tools fall on a spectrum. At one end is simple string replacement (`grep` and `sed`).
  At the other is parsing an abstract-syntax tree (AST) and directly manipulating
  it. Broadly, the tradeoffs are:\n\n* String manipulation\n  * Hard to write: Essentially
  need to hand-roll a parser using a regular expression.\n  * Limited power: Find
  and replace.\n  * Fast.\n\n* AST manipulation\n  * Hard to write: Requires extensive
  domain knowledge about language/parser.\n  * Very powerful.\n  * Slow: Parsing and
  traversing large codebases is expensive.\n\nRetrie finds a middle ground:\n\n* Easy
  to write: Equations are defined using syntax of target language.\n* Powerful:\n
  \ * Equations are more powerful than regular expressions.\n  * Rewrites can be scripted
  and enforce side-conditions (see below).\n* Fast: Search space is narrowed using
  `grep` before parsing. Time is (morally) proportional to the number of matches,
  not the number of target files.\n\n# Features\n\n* Power\n  * Can rewrite expressions,
  types, and patterns.\n  * Matching is up to alpha-equivalence.\n  * Rewrites are
  equational: a quantifier that appears twice in the left-hand side must match the
  same expression (up to alpha-equivalence).\n  * Inserts imports. (As specified by
  the user, and automatically in some cases.)\n  * Rewrites can be scripted and have
  side conditions.\n  * Uses GHC's parser, so supports all of the *de facto* Haskell
  language.\n* Correctness\n  * Local scoping is respected. (Will not introduce shadowing/capture
  bugs.)\n  * Impossible to match/rewrite an incomplete expression fragment.\n  *
  Parentheses are automatically removed/inserted as needed.\n* Whitespace\n  * Whitespace
  is ignored when matching. No fiddling with `\\s`.\n  * Whitespace is preserved in
  resulting expression.\n* Will not rewrite in comments. Existing comments are preserved.\n*
  Respects git/hg ignore files.\n\nSee `retrie --help` for a complete list of options.\n\n#
  Scripting and Side Conditions\n\nRetrie can be used as a library to tackle more
  complex rewrites.\n\nConsider the task of changing the argument type of a function
  from `String` to an enumeration:\n\n```haskell\nfooOld :: String -> IO ()\n\ndata
  FooArg = Foo | Bar\n\nfooNew :: FooArg -> IO ()\n```\n\nRetrie provides a small
  monadic DSL for scripting the application of rewrites. It also allows you to intercept
  and manipulate the result of matching the left-hand side of an equation. Putting
  those two together, you could implement the following refactoring:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nmodule Main where\n  \nimport Retrie\n  \nmain ::
  IO ()\nmain = runScript $ \\opts ->\n  [rewrite] <- parseRewrites opts [Adhoc \"forall
  arg. fooOld arg = fooNew arg\"]\n  return $ apply [setRewriteTransformer stringToFooArg
  rewrite]\n  \nargMapping :: [(FastString, String)]\nargMapping = [(\"foo\", \"Foo\"),
  (\"bar\", \"Bar\")]\n  \nstringToFooArg :: MatchResultTransformer\nstringToFooArg
  _ctxt match\n  | MatchResult substitution template <- match\n  , Just (HoleExpr
  expr) <- lookupSubst \"arg\" substitution\n  , L _ (HsLit _ (HsString _ str)) <-
  astA expr = do\n    newExpr <- case lookup str argMapping of\n      Nothing ->\n
  \       parseExpr $ \"error \\\"invalid argument: \" ++ unpackFS str ++ \"\\\"\"\n
  \     Just constructor -> parseExpr constructor\n    return $\n      MatchResult
  (extendSubst substitution \"arg\" (HoleExpr newExpr)) template\n  | otherwise =
  return NoMatch\n```\n\nRunning this program would create the following diff:\n\n```diff\n
  module MyModule3 where\n  \n baz, bar, quux :: IO ()\n-baz = fooOld \"foo\"\n+baz
  = fooNew Foo\n \n-bar = fooOld \"bar\"\n+bar = fooNew Bar\n\n-quux = fooOld \"quux\"\n+quux
  = fooNew (error \"invalid argument: quux\")\n```\n\nDefining the `stringToFooArg`
  function requires knowledge of both the Retrie library and GHC's internal AST types.
  You'll find haddock/hoogle invaluable for both.\n\n# Reporting Bugs/Submitting Patches\n\nTo
  report a bug in the result of a rewrite, please create a test case ([example](tests/inputs/Adhoc.test))
  and submit it as an issue or merge request.\n\nTo report other bugs, please create
  a GitHub issue.\n\n[![Build Status](https://travis-ci.com/facebookincubator/retrie.svg?branch=master)](https://travis-ci.com/facebookincubator/retrie)\n\n#
  License\n\nRetrie is MIT licensed, as found in the [LICENSE](LICENSE) file.\n\n"
license-name: MIT
