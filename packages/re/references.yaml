all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.3.0
- 0.3.3.1
author: Boldizsar Nemeth
basic-deps:
  array: '>=0.5 && <1'
  base: '>=4.9 && <5'
  containers: '>=0.5 && <1'
  directory: '>=1.2 && <2'
  either: '>=4.3 && <6'
  filepath: '>=1.3 && <2'
  instance-control: '>=0.1 && <1'
  mtl: '>=2.2 && <3'
  template-haskell: '>=2.8 && <3'
  text: '>=1.1 && <2'
  transformers: '>=0.4 && <1'
  uniplate: '>=1.6 && <2'
changelog: "\r\nVersion 0.2.0.0:\r\n\r\n * Exact reference types are now bound by
  operators.\r\n \r\n * New system of operators\r\n \r\n * Standardized generic and
  strict reference types (Lens, Partial, ...).\r\n \r\n * New predefined references.\r\n
  \r\nVersion 0.3.0.0:\r\n\r\n * New, simpler operator interface\r\n \r\n * Instead
  of using Template Haskell, a new type-level calculation based method is used for
  generating transitive type instances."
changelog-type: markdown
description: "References are data accessors that can read, write or update the accessed
  infromation through their context.\r\nThey are first-class values, can be passed
  in functions, transformed, combined.\r\nReferences generalize lenses, folds and
  traversals for haskell (see: https://hackage.haskell.org/package/lens).\r\n\r\nReferences
  are more general than field selectors in traditional languages.\r\n * References
  are first-class values. If there is a struct in C, for example, with an `int` field
  `fl`, then fl can only be used as part of an expression. One can not generalize
  a function to take a field selector and transform the selected data or use it in
  other ways.\r\n * They can have different meanings, while field accessors can only
  represent data-level containment. They can express uncertain containment (like field
  selectors of C unions), different viewpoints of the same data, and other concepts.\r\n\r\nReferences
  are more potent than lenses, folds and traversals:\r\n * References can cooperate
  with monads, for example IO. This opens many new applications.\r\n * References
  can be added using the `&+&` operator, to create new lenses more easily.\r\n\r\nBasic
  idea taken from the currently not maintained package https://hackage.haskell.org/package/yall.
  \r\n\r\nAn example use of the references (a logger application that spawns new threads
  to update a global log):\r\n\r\n```haskell\r\nlogger =\r\n  (forever $ do\r\n     log
  <- logChan ^? chan&logRecord    -- Extract the log record from the received log
  message\r\n     thrId <- forkIO (do time <- getTime\r\n                         ioref&lastLogTime
  != time $ logDB     -- Update the last logging time mutable log database\r\n                         let
  logMsg = senderThread .- show     -- Transform the thread id to a string and\r\n
  \                                       $ loggingTime .= time  -- update the time\r\n
  \                                       $ log                  -- inside the log
  message\r\n                         ioref&debugInfos !~ addLogEntry log $ logDB
  \ -- update the table of log entries\r\n                         mvar !- (+1) $
  count )\r\n     mvar !- (thrId:) $ updaters                               -- Record
  the spawned thread\r\n    ) `catch` stopUpdaters updaters\r\n  where stopUpdaters
  updaters ThreadKilled =    \r\n          mvar&traverse !| killThread $ updaters
  \              -- Kill all spawned threads before stopping\r\n```\r\n\r\nThere are
  a number of predefined references for datatypes included in standard libraries.\r\n\r\nNew
  references can be created in several ways:\r\n * From getter, setter and updater,
  using the `reference` function.\r\n * From getter and setter, using one of the simplified
  functions (`lens`, `simplePartial`, `partial`, ...).\r\n * Using the `Data.Traversal`
  instance on a datatype to generate a traversal of each element.\r\n * Using lenses
  from `Control.Lens` package. There are a lot of packages defining lenses, folds
  and traversals for various data structures, so it is very useful that all of them
  can simply be converted into a reference.\r\n * Generating references for newly
  defined datatypes using the `makeReferences` Template Haskell function.\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/references.svg?maxAge=2592000)]()\r\n\r\n"
description-type: markdown
hash: 1f8e4568d345e5e1482d8c9fca9c48b6ca1b04db6b02edd1023a9c33a2b8a5a2
homepage: https://github.com/lazac/references
latest: 0.3.3.1
license-name: BSD-3-Clause
maintainer: nboldi@elte.hu
synopsis: Selectors for reading and updating data.
test-bench-deps:
  HUnit: '>=0'
  array: '>=0'
  base: '>=0'
  containers: '>=0'
  directory: '>=0'
  either: '>=0'
  filepath: '>=0'
  instance-control: '>=0'
  lens: '>=0'
  mtl: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
  uniplate: '>=0'
