all-versions:
- 0.1.0.0
author: Gabriel Aumala
basic-deps:
  base: '>=4.7 && <5'
changelog: ''
changelog-type: ''
description: "# red-black-tree\n\n[![Build Status](https://travis-ci.org/GAumala/red-black-tree.svg?branch=master)](https://travis-ci.org/GAumala/red-black-tree)\n\n[Red
  Black Tree](https://en.wikipedia.org/wiki/Red%E2%80%93black_tree) data structure
  implemented in Haskell.\n\nThe goal of this project is to provide an efficient generic
  structure that can insert and find elements in O(log(n)) time.\n\n## Usage\n\n###
  Implement `BinaryTreeNode`\n\nTo insert values to a `RedBlackTree`, their type must
  have an instance of `BinaryTreeNode`. Members of this typeclass must implement `Ord`,
  and consequently `Eq`, so that values can be compared and sorted within the tree.
  Since inserting duplicate values can corrupt the tree, this typeclass provides the
  following function:\n\n``` Haskell\n  mergeNodes :: a -> a -> a\n```\n\nThis function
  takes two `BinaryTreeNode` values and returns a new \"merged\" node. It is only
  called when a value is about to be inserted, but the tree already contains another
  value that is equal to it. This new \"merged\" node replaces the existing one without
  doing any further modifications to the tree.\n\nIf you want to ignore duplicate
  nodes, you can just return the first parameter, since that one is guaranteed to
  be the one that is already **in** the tree, whereas the second parameter is the
  node that we are are trying to insert. On the other hand, if you want to replace
  older nodes with newer ones then you can return the second parameter. If your use
  case is completely different then you can create a new node with the best parts
  from each node and return that. Implementing `mergeNodes` is all you need to do
  to get a working `BinaryTreeNode` instance.\n\n### The API\n\nTo use this data structure
  you only need to know about these three functions\nexposed by the `Data.RedBlackTree`
  module:\n\n``` Haskell\nemptyRedBlackTree :: RedBlackTree a\n\ninsert :: (BinaryTreeNode
  a) => RedBlackTree a -> a -> RedBlackTree a\n\nfind :: (BinaryTreeNode a) => RedBlackTree
  a -> a -> Maybe a\n```\n\n`emptyRedBlackTree` is pretty self explanatory, you can
  use this as a constructor.\n\n`insert` takes an existing tree and a new value and
  returns a new tree that contains the new value.\n\n`find` takes an existing tree
  and a target value and returns the value inside that tree that is equal to the target.
  Returns `Nothing` if no such value is found.\n\n\n## Example\n\nSuppose we wanted
  to store our app's users on a `RedBlackTree`. For simplicity, let's assume that
  we only know two things about the user: the user's email address, a string guaranteed
  to be unique for each user, and the user's name. The type `User` could look like
  this:\n\n``` Haskell\ndata User = User {\n  userEmail :: String,\n  userName ::
  String\n} deriving Show\n```\n\nSince e-mail adresses are guaranteed to be unique,
  we don't care about duplicates so the `User` instances for `Eq`, `Ord` and `BinaryTreeNode`
  would look like this:\n\n``` Haskell\ninstance Eq User where\n  (==) leftNode rightNode
  = userEmail leftNode == userEmail rightNode\n\ninstance Ord User where\n  (<=) leftNode
  rightNode = userEmail leftNode <= userEmail rightNode\n\ninstance BinaryTreeNode
  User where\n  mergeNodes leftNode _ = leftNode\n```\n\nThe final step is to write
  a small program that inserts 8 users, and then looks\nup the name of the user whose
  address is \"frank@gmail.com\".\n\n``` Haskell\n\nimport Data.List (foldl')\nimport
  Data.RedBlackTree\nimport Data.User -- This module defines our User type\n\nmain
  = do\n-- create users to insert\nlet users = [\n              User \"gabriel@hotmail.com\"
  \"Gabriel\",\n              User \"jimmy@live.com\" \"Jimmy\",\n              User
  \"paul@yahoo.com\" \"Paul\",\n              User \"george@aol.com\" \"George\",\n
  \             User \"frank@gmail.com\" \"Frank\",\n              User \"david@hotmail.com\"
  \"David\",\n              User \"bryan@live.com\" \"Bryan\",\n              User
  \"john@yahoo.com\" \"John\"\n            ]\n\n-- insert one by one            \nlet
  treeWithOneUser = insert emptyRedBlackTree (User \"gabriel@hotmail.com\" \"gabriel\")\nlet
  treeWithTwoUsers = insert treeWithOneUser (User \"jimmy@live.com\" \"jimmy\")\n\n--
  insert the whole list with foldl'\nlet userTree = foldl' insert emptyRedBlackTree
  users\n\n-- find the username with address \"frank@gmail.com\". The Eq instance
  of User only\n-- checks for email address, so we can leave the username empty in
  the target value\nlet targetNode1 = User \"frank@gmail.com\" \"\"\nprint $ fmap
  userName (find userTree targetNode1)\n-- should print \"Just frank\"\n\n-- find
  the username with address \"frank@aol.com\"\nlet targetNode2 = User \"frank@aol.com\"
  \"\"\nprint $ fmap userName (find userTree targetNode2)\n-- should print Nothing\n```\n\n##
  Limitations\n\nCurrently the only operations supported are `find` and `insert`.
  There is no `remove` at the moment.\n\n## Development\n\nTo build this library,
  clone this repo and use Stack.\n\n``` bash\ngit clone https://github.com/GAumala/red-black-tree\nstack
  setup\nstack build\n```\n\nTo run unit tests with RSpec:\n\n``` bash\nstack test\n```\n"
description-type: markdown
hash: 62ef8200e8945d21afcc53a015779a27d6578d79d0e2d4dc6e8b3bcf9dabc8d4
homepage: https://github.com/GAumala/red-black-tree
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: gabriel@criptext.com
synopsis: Red Black Trees implemented in Haskell
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  hspec: '>=0'
  red-black-tree: '>=0'
