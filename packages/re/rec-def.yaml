homepage: https://github.com/nomeata/haskell-rec-def
changelog-type: markdown
hash: df1582859055ac14b9fa1e36e190713bc01be3ae135bed33aae360b202aae24d
test-bench-deps:
  base: '>=4.9 && <5'
  doctest: -any
  containers: '>=0.5.11 && <0.7'
  tasty-dejafu: ^>=2.1.0.0
  concurrency: ^>=1.11.0.2
  random: -any
  tasty: -any
  QuickCheck: -any
  rec-def: -any
  template-haskell: -any
  dejafu: ^>=2.4.0.3
maintainer: mail@joachim-breitner.de
synopsis: Recursively defined values
changelog: |
  # Revision history for rec-def

  ## 0.2 -- 2022-09-22

  * The naive propagator does not use `(==)` to detect changes, but a custom
    operator, to allow faster and less restricted operators.
  * Module structure refactoring
  * No more `R` type constructor, instead individual `RBool` etc. types
  * Addition of `Data.Recursive.Map`
  * A space leak is fixed

  ## 0.1 -- 2022-09-03

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.9 && <5'
  containers: '>=0.5.11 && <0.7'
all-versions:
- '0.1'
- '0.2'
author: Joachim Breitner
latest: '0.2'
description-type: markdown
description: |
  rec-def - Pure recursive definition
  ===================================

  This library provides safe APIs that allow you to define and calculate values
  recursively, and still get a result out:

      >>> :{
        let s1 = RS.insert 23 s2
            s2 = RS.insert 42 s1
        in RS.get s1
       :}
      fromList [23,42]

  See the [`examples.hs`](examples.hs) file for more examples.

  It also provides (unsafe) building blocks to build such APIs, see
  `Data.Propagator.Purify`.

  Related work
  ------------

  * Edward Kmett's [`Data.Propagator.Prop` module](https://github.com/ekmett/propagators/blob/master/src/Data/Propagator/Prop.hs) achieves something similar, and allows to construct more the graphs more flexibly, but requires a stricter phase control akin to `runST`.

  * Jeannin, Kozen and Silva’s work on [“CoCaml: Functional Programming with
  Regular Coinductive
  Types”](https://www.cs.cornell.edu/~kozen/Papers/CoCaml.pdf) in Ocaml even goes
  a step further and not only allow the recursive definitions to be written down
  as here, but even allows functions _consume_ regular recursive values, and
  still produces something that can be solved.
license-name: BSD-2-Clause
