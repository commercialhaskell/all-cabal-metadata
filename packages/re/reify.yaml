all-versions:
- '0.1'
- 0.1.1
author: Bernie Pope <bjpop@csse.unimelb.edu.au>
basic-deps:
  base: '>=0'
  ghc: ==6.5
changelog: ''
changelog-type: ''
description: "This is a library for reifying Haskell data structures in GHC.\n\nHaskell
  values are mapped into representations that we call\ngraphs (for want of a better
  name). The representations are\nencoded in the Haskell type Graph, which is just
  an ordinary\nalgebraic data type.\n\nThe method for reification is:\n\n   reify
  :: a -> IO Graph\n\nNote that it can take _any_ value as its argument, there are\nno
  constraints on that type.\n\nThe result is returned in the IO monad because the
  Graph \nthat it returns depends on the state of evaluation of the \nunderlying value.
  To do otherwise would not be pure.\n\nThe reification is conservative (or lazy).
  It will not cause any\nfurther evaluation of the value being observed. So you can
  safely\napply reify to lazy data structures etc.\n\nreify also detects cycles in
  the heap representation of a value.\nThe cycles are visible in the resulting Graph.
  If a value has\na finite heap representation, then reify will return a finite\nGraph!
  Each node in the Graph structure is tagged with a unique\nlabel that can be used
  to identify nodes and re-construct cycles.\n\nreify does not observe other forms
  of sharing within a value \n(sharing that does not lead to cycles).\n\nA method
  for pretty printing Graphs is provided by the module \nPrettyGraph.\n\nSadly, all
  functions are represented by the same Graph, and\nare pretty printed just as \"<Function>\".\n\nreify
  also knows a little bit about exceptions and other slightly\nweird things inside
  GHC, but it is not yet exhaustive (GHC has many\nheap object types).\n\nUnfortunately,
  we need to turn on profiling in order to get GHC to\nkeep the names of data constructors
  around on the heap. This is\nan ugly hack, and I hope that one day it can be avoided
  (perhaps\nwith some help from the compiler team).\n\nIf you make any modifications
  please contribute them back to me.\nThanks.\n\nBernie: bjpop@cs.mu.oz.au\n"
description-type: text
hash: 2f0f94e03581d04967853b422cc56f7cc0ed1636470faea74741b810e9836bab
homepage: http://www.cs.mu.oz.au/~bjpop/code.html
latest: 0.1.1
license-name: LicenseRef-GPL
maintainer: None
synopsis: Serialize data
test-bench-deps: {}
