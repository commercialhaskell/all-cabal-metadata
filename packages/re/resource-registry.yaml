all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
author: IOG Engineering Team
basic-deps:
  base: '>=4.14 && <4.22'
  bimap: ^>=0.5
  containers: '>=0.6.7 && <0.8'
  io-classes: ^>=1.8
  mtl: ^>=2.3
  nothunks: ^>=0.2
changelog: |
  # Revision history of `resource-registry`

  ## 0.2.0.0 — 2025-10-23

  * Define `transferRegistry` for moving all resources from one registry to a
    different one.

  * Cancel registered threads in the registry before closing the registry. This
    prevents race conditions where the registry gets closed but the running async
    thread still tries to allocate something in the registry before being
    cancelled, which would result in an exception.

  * Expose `allocateThread` to register another thread in a registry, such that it
    is cancelled before closing the registry, even if it belongs to a separate
    registry.

  * Add the label of the thread to `Context`.

  ## 0.1.1.0 — 2025-05-15

  * Use `io-classes-1.8`.

  ## 0.1.0.0 — 2024-10-22

  - First release, extracted from [`ouroboros-consensus`](https://github.com/IntersectMBO/ouroboros-consensus).
changelog-type: markdown
description: |-
  # `resource-registry`

  In some cases, the lifetime of a resource is not suitable for CPS and hence
  can't use `bracket`-like functions, for example, the resource might be tracked
  inside some other data structure. In this case, the container data structure can
  be allocated in a resource registry together with the resources so that an
  exception will deallocate the resources in a proper order.
description-type: markdown
hash: d272dbd668edd24cbe83b23fcbfcff91d86f7b3a3983e466ee0fd7ddbcf66959
homepage: ''
latest: 0.2.0.0
license-name: Apache-2.0
maintainer: operations@iohk.io
synopsis: Track allocated resources
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  containers: '>=0'
  generics-sop: '>=0'
  io-classes: '>=0'
  mtl: '>=0'
  quickcheck-state-machine: '>=0'
  resource-registry: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  tree-diff: '>=0'
