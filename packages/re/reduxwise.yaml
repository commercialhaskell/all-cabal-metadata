all-versions:
- 0.1.0.0
author: Theo M. Bulut
basic-deps:
  aeson: '>=2.0 && <2.3'
  async: '>=2.2 && <2.3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.6 && <0.8'
  directory: '>=1.3 && <1.4'
  filepath: '>=1.4 && <1.6'
  mtl: '>=2.2 && <2.4'
  optparse-applicative: '>=0.16 && <0.19'
  reduxwise: '>=0'
  regex-tdfa: '>=1.3 && <1.4'
  text: '>=1.2 && <2.2'
  time: '>=1.9 && <1.15'
  yaml: '>=0.11 && <0.12'
changelog: |
  # Changelog for `reduxwise`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: |
  <h1 align="center"><img src="art/reduxwise-banner-painted.png"/></h1>
  <div align="center">
   <strong>
      Reduxwise: Static analysis tool for real-time embedded system scheduling in Rust.
      Analyzes IO operations, computations, and complexity for real-time scheduling.
   </strong>
  </div>

  <br />

  ## Build

  ```bash
  stack build
  ```

  ## Install

  ```bash
  stack install
  ```

  Binary installed to `~/.local/bin/reduxwise-exe`

  ## Usage

  ```bash
  # Analyze a Rust project
  reduxwise-exe /path/to/rust/project -o analysis.json

  # With verbose output
  reduxwise-exe /path/to/rust/project -v -o report.json

  # Exclude directories
  reduxwise-exe ./project --exclude "vendor,build" -o analysis.json
  ```

  ## Options

  ```
  reduxwise-exe PROJECT_PATH [OPTIONS]

  Options:
    -o, --output FILE       Output JSON file (default: analysis.json)
    -e, --exclude DIRS      Comma-separated directories to exclude
    -v, --verbose           Verbose output
    -h, --help              Show help
  ```

  ## Output

  JSON report with:
  - Function complexity scores
  - IO operations (I2C, SPI, Flash, UART, Network, ADC, GPIO)
  - Yield points (`.await`, `yield_now()`)
  - Computations (loops, branches, arithmetic)
  - Function classification (IO-bound vs CPU-bound)

  ## Example

  ```bash
  reduxwise-exe ~/my-embedded-project -v -o analysis.json
  cat analysis.json | jq '.summary'
  ```

  Output:
  ```json
  {
    "total_functions": 390,
    "io_bound_functions": 4,
    "cpu_bound_functions": 362
  }
  ```

  ## Requirements

  - Stack (Haskell build tool)
  - Rust project with `Cargo.toml`

  ## License

  See LICENSE file.
description-type: markdown
hash: 70edc4a56c1f86e469e0bb306706564f2b2c05098c58ac7fd63081b0c126a898
homepage: https://github.com/vertexclique/reduxwise
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: vertexclique@gmail.com
synopsis: Static analysis tool for Rust embedded systems complexity
test-bench-deps:
  aeson: '>=2.0 && <2.3'
  async: '>=2.2 && <2.3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.6 && <0.8'
  directory: '>=1.3 && <1.4'
  filepath: '>=1.4 && <1.6'
  mtl: '>=2.2 && <2.4'
  optparse-applicative: '>=0.16 && <0.19'
  reduxwise: '>=0'
  regex-tdfa: '>=1.3 && <1.4'
  text: '>=1.2 && <2.2'
  time: '>=1.9 && <1.15'
  yaml: '>=0.11 && <0.12'
