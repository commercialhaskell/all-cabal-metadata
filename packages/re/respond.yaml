all-versions:
- 0.2.0.0
- 1.0.0
- 1.1.0
author: aidan coyne
basic-deps:
  HList: '>=0.3 && <0.4'
  aeson: '>=0.8 && <0.9'
  base: '>=4.7 && <4.8'
  bifunctors: '>=4.1 && <=4.3'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.5.5 && <0.5.6'
  data-default-class: '>=0'
  exceptions: '>=0.6 && <0.7'
  fast-logger: '>=2 && <3'
  formatting: '>=5.0 && <6.0'
  http-media: '>=0.4 && <0.5'
  http-types: '>=0.8 && <0.9'
  lens: '>=4.6 && <4.7'
  monad-control: '>=0.3 && <1.1'
  monad-logger: '>=0.3.8 && <0.4'
  mtl: '>=2.2 && <2.3'
  path-pieces: '>=0.1 && <=0.2'
  respond: '>=0'
  safe: '>=0.3 && <0.4'
  scientific: '>=0.3.1 && <0.4'
  template-haskell: '>=2.9 && <2.10'
  text: '>=1.2 && <1.3'
  time: '>=1.4 && <1.5'
  transformers: '>=0.4 && <0.5'
  transformers-base: '>=0.4 && <0.5'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.10 && <0.11'
  wai: '>=3.0 && <4.0'
  wai-extra: '>=3.0 && <4.0'
  warp: '>=3.0 && <4.0'
changelog: |
  changelog
  =========
  this library will attempt to maintain conformance to the rules of [semantic versioning](http://semver.org/).

  1.1.0
  -------

  * add a method to MonadRespond to run an inner route with a different Request value
  * implement MonadRespond instances lifted that lift over transformers
  * implement MTL interface instances that lift over RespondT
  * add compatibility for new version of monad-control.

  1.0.0
  -------
  initial true release

  0.2.0.0
  -------
  experimental release.
changelog-type: markdown
description: "# respond\na Haskell library built on top of WAI for processing and
  routing HTTP requests\nand generating responses.\n\n## motivation\nyou might wonder
  why I went to the trouble of building respond when there are,\nat this point, plenty
  of libraries etc for HTTP routing in Haskell. (i could say\nthat when I started,
  there weren't as many, but no one's going to believe that!)\nI have three justifications
  for developing this library.\n\n* some HTTP APIs will be best represented using
  a nested routing structure. this\n  is, in fact, the primary reason i wrote respond
  - while working on a different\n  project, i found that the nested routes in the
  API specification for that\n  project were not well served by other libraries. respond
  should serve in those\n  situations, where groups of routes repeatedly need the
  same shared routing\n  filters.\n* type-safe path matching and parameter extraction
  is useful, and respond has\n  it.\n* it's fairly simple - the core of it is a newtype
  wrapper for a ReaderT, and\n  the rest of the library contains convenience functions
  that interact with the\n  monadic interface that RespondT implements. if you want
  to interact directly\n  with the request, or build and send your own responses,
  the core interface\n  will let you do that.\n\n## using respond\nyou'll probably
  want to look at the haddock documentation\n([available on Hackage](http://hackage.haskell.org/package/respond))
  while\nyou're reading this guide.\nlet's get started with a brief overview of how
  to use this library.\n\n### a brief overview\nbuilding an app using respond should
  hopefully be straightforward, and familiar \nto anyone who has used other WAI-based
  web service libraries (e.g. scotty).\n* first, you integrate the `RespondT` monad
  transformer into your monad stack. you \n  can also use `RespondM` if you don't
  need a more involved stack.\n* use various routing tools (defined in terms of `MonadRespond`)
  to match various \n  aspects of the request\n* produce responses from inside your
  routing, either by building them directly, \n  or by using one of the tools for
  building responses\n* convert your routing stack into a WAI app and run it in a
  WAI compatible \n  server; this library provides a default warp setup you can use.\n\n###
  the monad transformer and monadic interface\nMonadRespond is the monadic interface
  that most of the tools this library \nprovides build on top of. it defines a core
  set of actions:\n* `respond` is the WAI 3.0 `Application` continuation lifted into
  `MonadRespond`. \n  whenever you see the type `ResponseReceived`, a call to respond
  is involved.\n* `getRequest` gets the request that's currently being handled. if
  you ever \n  find yourself using this directly, get in touch; there's probably an
  \n  opportunity to add a new tool to the library or improve the existing ones!\n*
  `getHandlers` gets out the `FailureHandlers`. these define the responding\n  action
  to use when request matching or processing fails.\n* `withHandlers` runs the inner
  `MonadRespond` action with a modified set of\n  handlers; you can use this to add
  code to be run after the actual response is\n  sent, or to change the response entirely.\n*
  `getPath` gets the current `PathConsumer`.\n* `withPath` runs the passed `MonadRespond`
  action with a modified `PathConsumer`\n  value. this and the previous function will
  be explained further in the\n  discussion of path routing.\n\nthe WAI `Application`
  type specifies that both the passed continuation and the\nreturned value are in
  `IO`; because MonadRespond specifies a wrapping of that\ncontinuation, any instance
  of `MonadRespond` must be an instance of `MonadIO`.\n\n`RespondT` is the monad transformer
  that implements the `MonadRespond` class (as\nlong as it is stacked on top of a
  `MonadIO`); it's basically a newtype for a\n`ReaderT` that contains a record type
  containing the relevant components. there is\na simple `RespondM` type alias defined
  in the `Web.Respond.Run` module; this\nalias stacks `RespondT` directly on `IO`,
  i.e.\n\n```haskell\ntype RespondM a = RespondT IO a \n```\n\n\n### running the app\nthere
  are several functions in `Web.Respond.Run` that you can use. the key ones\nbuild
  a WAI application from a `RespondT` route (i.e. a value of type `RespondT m\nResponseReceived`);
  note that these functions (`respondApp` and `respondAppDefault`)\nrequire a function
  to run the rest of the monadic stack to an `IO` value.\n(the `RespondM` functions,
  of course, do not require this run function - running\nthe `RespondT` already produces
  the necessary `IO` value.)\n\nthe default handlers used by the \\*Default functions
  are contained in\n`Web.Respond.DefaultHandlers`; the default warp server setup used
  by the serve\\*\nfunctions are contained in `Web.Respond.DefaultServer`.\n\n###
  request processing and routing\na number of tools are provided for (hopefully) convenient
  request processing and\nrouting.\n\n#### matching methods\n`Web.Respond.Method`
  defines the type `MethodMatcher`, which is just a newtype\naround a Map from `StandardMethod`
  to some value. the module provides an\n`onMethod` function that takes a `StandardMethod`
  and a value and provide a\n`MethodMatcher` for just that method. functions are provided
  that apply\n`onMethod` to each `StandardMethod`. using the monoid instance of\n`MethodMatcher`,
  you can combine matchers to map different methods to different\nactions. for example:\n\n```haskell\n--
  | do something\nact1 :: MonadRespond m => m ResponseReceived\nact1 = ...\n\n-- |
  do something else\nact2 :: MonadRespond m => m ResponseReceived\nact2 = ...\n\ngetOrPutActions
  ::  MonadRespond m => MethodMatcher (m ResponseReceived)\ngetOrPutActions = onGET
  act1 <> onPOST act2\n```\n\n`matchMethod` takes a `MethodMatcher` that will produce
  an appropriate responding\naction for each mapped HTTP method, and chooses the action
  that handles the\ncurrent request's method. \n\n```haskell\n-- continuing from before
  ...\nroute :: MonadRespond m => m ResponseReceived\nroute = matchMethod $ \n    onGET
  act1 <>\n    onPOST act2\n```\n\nin this example, route will use act1 if the request
  method is GET, act2 if the\nmethod is POST, and will call `handleUnsupportedMethod`
  for any other method\n(including ones that are not in `StandardMethod`). \nwhat
  \ `handleUnsupportedMethod` does from there will be explained in the section\non
  error handling below.\n\n#### matching paths\n`PathMatcher a` is a newtype for functions
  that take `PathConsumer`s and produce\n`Maybe a`s. the `matchPath` function uses
  these to choose the responding action\nbased on the current path state.\n\n`PathMatcher`
  is a functor, which lets you do things like wrap inner actions\nwith other routing
  logic;\n```haskell\n-- this is provided in the module, though with a simpler definition\n--
  whatever action the original matcher would perform is now only performed if\n--
  the method matches.\nmatchPathWithMethod :: MonadRespond m => StdMethod -> PathMatcher
  (m ResponseReceived) -> PathMatcher (m ResponseReceived)\nmatchPathWithMethod method
  matcher = (matchMethod . onMethod method) <$> matcher\n```\n\n`PathMatcher` is also
  an instance of Applicative and, more importantly,\nAlternative. the Alternative
  instance is what allows you to choose different\nactions for different request paths,
  for instance\n\n```haskell\n-- for now, suppose this is at the top level of the
  API\npathExample0 :: RespondM ResponseReceived\npathExample0 = matchPath $\n    --
  if the request is to e.g. http://localhost:3000/, rootAction will produce the response\n
  \   pathEndOrSlash rootAction <|>\n    -- however, if the request is to e.g. http://localhost:3000/one/
  or http://localhost:3000/one, actionOne will get to respond\n    pathLastSeg \"one\"
  actionOne\n```\n\nif the request is to none of those paths, then `handleUnmatchedPath`
  will get\ncalled (see further on).\n\n##### path extraction\nobviously, we want
  to do more advanced matching on paths, and often we want to\nget parameters out
  of paths. this is supported by the use of `PathExtractor`,\nwhich is newtype wrapper
  around a somewhat fearsome-looking stack of monads. you\nshould look at the definition,
  but to summarize, it is meant to track\n`PathConsumer` state , and possibly produce
  a value.\n\na `PathConsumer`, defined in `Web.Respond.Types.Path`, can be thought
  of as a\npair of the path segments that have been consumed and the path segments
  that\nhave not been consumed.\neach field within the consumer keeps the segments
  in order, so it is possible to\nrebuild the original request path using `getFullPath`.
  \n`pcConsumeNext` produces a new consumer with the first segment in the previous\nunconsumed
  segment list appended to the consumed sequence (if there is no next\nsegment, i.e.
  `pcGetNext` produces nothing, `pcConsumeNext` should produce an\nidentical consumer).\n\nthe
  path extractor produced by `seg \"whatever\"` does the following when run\nagainst
  a `PathMatcher` (e.g. by using the function `pathExtract`)\n* it pulls out the current
  `PathConsumer` state\n* if there is a next segment, and it matches the string \"whatever\",
  then it\n  produces an empty value (`HList0`)\n* it then updates the state with
  the result of applying `pcConsumeNext` to the\n  old state.\n\nthese extractors
  can then be sequenced using the `(</>)` combinator, which takes\nadvantage of the
  Applicative instance of `PathExtractor` to put them together.\n(now, if you happen
  to be looking at the documentation for this function, you\nmight be wondering what
  all this HList stuff is about. we'll get to that soon.)\n\nnow you can use the `path`
  function to combine extractors and inner actions to\nproduce path matchers to use
  with `matchPath`. for example\n\n```haskell\npathExample1 :: RespondM ResponseReceived\npathExample1
  = matchPath $\n    path (seg \"one\" </> seg \"two\" </> endOrSlash) someAction\n```\n\nand
  someAction will only get run if the request is to e.g.\n`http://localhost:3000/one/two/`\n\nit
  wouldn't make sense to call it `PathExtractor` if it couldn't extract values;\nthis
  is where HLists come in. a simple example is the `value` PathExtractor; it\nproduces
  a single value from a single segment if it can successfully be\nextracted using
  the `PathPiece` instance. \nwhen multiple value extractors are chained, they build
  an HList of those types\n(since `(</>)` appends each side's HList).\nthe `path`
  function's second parameter expects a function that takes the types\nof the constructed
  HList and produces a MonadRespond action.\nin fact, that is all that `HListElim`
  is; a function that has a type signature\nthat matches up with the types of an HList
  - the function `hListUncurry`\nuncurries such a function against a conforming HList.
  putting this all together,\nyou can do something like\n\n```haskell\npathInnerAction1
  :: Integer -> Text -> Text -> RespondM ResponseReceived\npathInnerAction1 num t1
  t2 = ... -- does whatever\n\npathExample2 :: RespondM ResponseReceived\npathExample2
  = matchPath $\n    path (seg \"id\" </> value </> seg \"params\" </> value </> value)
  pathInnerAction1\n```\n\nand e.g. a GET against `http://localhost:3000/id/42/params/one/two`
  would lead\nto whatever response the action `pathInnerAction1 42 \"one\" \"two\"`
  produces.\n\n##### path route nesting\nan important point about the `path` function
  is that it runs the inner action\nwith a modified `PathConsumer` - specifically,
  the consumer produced by running\nthe `PathExtractor`. this is accomplished by building
  on the `withPath` function\nspecified by the the `MonadRespond` class. this lets
  you nest routing in a\nsensible and hopefully pleasant way:\n\n```haskell\nidAction
  :: Text -> Integer -> RespondM ResponseReceived\nidAction t i = --whatever\n\npathInnerRouting1
  :: Text -> RespondM ResponseReceived\npathInnerRouting1 text = matchPath $\n    pathEndOrSlash
  (innerRootAction text) <|>\n    path (seg \"id\" </> value </> endOrSlash) (\\v
  -> idAction text v)\n\npathExample3 :: RespondM ResponseReceived\npathExample3 =
  matchPath $\n    pathEndOrSlash outerRootAction <|>\n    path (seg \"loc\" </> value)
  pathInnerRouting1\n```\n\nwhich handles requests to e.g.\n* `http://localhost:3000/`
  with `outerRootAction`\n* `http://localhost:3000/seg/loc` with `handleUnmatchedPath`\n*
  `http://localhost:3000/seg/loc/here` with `pathInnerRouting1 \"here\"`, which in\n
  \ turn uses `innerRootAction \"here\"`.\n* `http://localhost:3000/seg/loc/here/id/55`
  with `pathInnerRouting1 \"here\"`, which in\n  turn uses `idAction \"here\" 55`.\n\n####
  extracting request body values\nrespond defines the `FromBody` typeclass; instances
  of this class implement a\nfunction that either extracts a value of the instance
  type out of a lazy\nbytestring or produces an error value (see below for ReportableError).\n\n#####
  provided instances\nseveral newtype wrappers with FromBody instances have been provided
  for\nconvenience.\n* `TextBody` is a wrapper around a lazy Text value. it decodes
  the bytestring\n  body as utf-8. it fails with a UnicodeException.\n* `TextBodyS`
  is like TextBody except that it converts lazy Text into strict Text\n  after decoding.\n*
  `Json` is a wrapper around a JSON Value. it uses Aeson's `eitherDecode` for\n  lazy
  conversion and wraps up a failure message with `JsonParseError`.\n* `JsonS` is also
  a wrapper around a JSON Value - it works much the same way as\n  the previous wrapper
  except that it uses `eitherDecode'` to perform immediate\n  conversion.\n\n#####
  getting the request body - lazy vs strict IO\nin `Web.Respond.Request`, there are
  6 functions for extracting the request body\nas a `MonadRespond` action.\n* `getBodyLazy`
  uses Wai's `lazyRequestBody` function to lazily load the request\n  body. this may
  or may not be safe for your purposes.\n* `getBodyStrict` uses Wai's `strictRequestBody`
  function instead.\n* `extractBodyLazy` and `extractBodyStrict` build on `getBodyLazy`
  and\n  `getBodyStrict`, and apply the `getBody` method for the desired instance
  of\n  `FromBody`.\n* `withRequiredBody` and `withRequiredBody'` use `extractBodyLazy`
  and\n  `extractBodyStrict` and then run the passed continuation if a value was\n
  \ successfully extracted. otherwise, they run `handleBodyParseFailure` to report\n
  \ the error (see section on error reporting).\n\n#### authentication and authorization
  tools\nthere are several functions that run inner actions based on passed values
  - the\nmain difference between the authenticate and authorize functions is that
  when\na failure is indicated, the former call `handleAuthFailed` and the latter
  call\n`handleAccessDenied`.\n\n### generating responses\nthe `ToResponseBody` typeclass
  is defined to allow you to choose how a type\nbeing used a response value should
  be rendered based on content negotiation.\nthis is accomplished by having the Accept
  header of the request be passed into\nthe `toResponseBody` function. various utilities
  for matching on this header are\nprovided, built on top of the http-media library.\n\nas
  an example, let's say you have a type `ExDocument` that you want to use as a\nresponse
  body, and various ways of rendering it.\n\n```haskell\nimport qualified Data.Text
  as T\nimport Network.HTTP.Media\n\ndata ExDocument = ...\n\n-- you have the following
  ways of rendering it defined appropriately ...\n\ninstance ToJSON ExDocument where\n
  \   toJSON doc = undefined \n\nrenderDocPlaintext :: ExDocument -> T.Text\nrenderDocPlaintext
  doc = undefined \n\nrenderDocHTML :: ExDocument -> T.Text\nrenderDocHTML doc = undefined\n\n--
  you can then use these rendering tools based on the Accept header\n-- by defining
  a ToResponseBody instance.\ninstance ToResponseBody ExDocument where\n    toResponseBody
  = matchToContentTypes [\n        textUtf8 \"text/html\" renderDocHTML,\n        jsonMatcher,\n
  \       textUtf8 \"text/plain\" renderDocPlaintext\n    ]\n```\n\nas this example
  hopefully illustrates, you do not have to handle the\ninterpretation of the Accept
  header value yourself - you can rely on the\nhttp-media library and the provided
  convenience functions to select the\nappropriate encoding function. let's break
  down what they do:\n* `matchToContentTypes` takes a list of `MediaTypeMatcher`s,
  \"prepares\" them,\n  and uses the first one that matches (if any) to produce a
  ResponseBody. it is\n  defined so that it can be easily used to implement `toResponseBody`
  - you give\n  it the matcher list and it gives you the implementation.\n* `ResponseBody`
  is a pair of the value to use as the content type header and\n  the bytestring to
  use as the body.\n* a `MediaTypeMatcher` is a pair of a media type value and a function
  that\n  produces a bytestring for a value.\n* `prepareMediaTypeMatcher` is a function
  that `matchToContentTypes` uses to\n  construct a pair of media type and response
  body out of a value and a media\n  type matcher.\n* `textUtf8` takes a media type
  and a Text based renderer, and produces a\n  `MediaTypeMatcher` that will render
  the value to Text and then encode it as\n  utf-8; it will also add the parameter
  specifying the encoding to the media\n  type you pass in.\n* jsonMatcher is a MediaTypeMatcher
  for any instance of `ToJSON`;\n  unsurprisingly, it matches the media type `application/json`.\n\nonce
  you have an instance of `ToResponseBody` for a type, you can use the functions in\n`Web.Respond.Response`
  to send responses for that type. for instance, let's say\nyour app monad has a way
  to fetch a document from the database ...\n\n```haskell\nlookupDocument :: ExampleAppMonad
  m => DocId -> m ExDocument\nlookupDocument id = undefined\n\ndocLookupRoute  ::
  (MonadRespond m, ExampleAppMonad m) -> DocId -> m ResponseReceived\ndocLookupRoute
  id = do\n    doc <- lookupDocument id\n    respondOk doc\n```\n\nnow, you may be
  wondering what happens if the request's Accept header can't be\nmatched; e.g. someone
  made a request into docLookupRoute but specified the\nheader `Accept: text/xml`
  but ExDocument doesn't render to XML. all of the\nfunctions built on `respondWith`
  use `respondUnacceptable` if `toResponseBody`\nproduces `Nothing`; this sends back
  a `406 Unacceptable` response with an empty\nbody and no content type.\n\nif you
  know that a set of inner routes will only produce certain content types,\nyou can
  handle those early on using the `checkAccepts` function, which takes a\nlist of
  media types that the inner route can produce, and uses\n`respondUnacceptable` if
  the request's Accept header doesn't match any of them.\n\nalso, it is worth keeping
  in mind that the respond library will default to `*/*`\nif the request does not
  set an Accept header explicitly.\n\n#### ErrorReport and ReportableError\nAn ErrorReport
  is a container for information about errors that occur during\nrequest processing.
  it has a ReportableError instance that defaults to rendering\nthe error report as
  HTML with the status code as a header, and also renders to\nplain text and JSON.\n\nReportableError
  is similar to ToResponseBody except that it must choose a\ndefault rendering if
  it can't match the Accept header. it is also given the\nstatus code that will be
  sent in the response so it may render the status in the\nbody.\n\nif you want to
  make other errors into ReportableErrors, you may find it\nconvenient to define a
  function to convert values of your error type into an\nappropriate ErrorReport value
  and then define the ReportableError instance using\n`reportAsErrorReport`.\n\n####
  handling failures and errors during request processing\nvarious routing failures
  are handled by using the appropriate handle\\* function.\nthese functions get the
  appropriate function from the current\n`FailureHandlers` value and run it against
  the arguments.\n\nit should be possible to modify these functions at any point during
  routing -\ninstalling a new function for a particular handler can allow you to modify
  how\nthe inner route will respond if it fails in a way that uses the modified\nhandler,
  and it should allow you to perform other actions, such as any sort of\ncleanup you
  might need. \n\ncurrently, exception handling is a particularly weak part of the
  respond\nlibrary - `catchRespond` only works on specific exception types, so there
  is no\ntop level exception handling.\n"
description-type: markdown
hash: 4ddaef1e5c0355846a3b828e8340bdef218a3295dbb0b73692584193cfc0b9d9
homepage: https://github.com/raptros/respond
latest: 1.1.0
license-name: BSD-3-Clause
maintainer: coynea90@gmail.com
synopsis: process and route HTTP requests and generate responses on top of WAI
test-bench-deps: {}
