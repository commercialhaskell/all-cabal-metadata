all-versions:
- 1.0.0.0
- 1.0.1.0
- 1.0.2.0
- 1.1.0.0
- 1.2.0.0
author: |-
  - Anton Gushcha
  - Aminion
  - Vladimir Krutkin
  - Levon Oganyan
basic-deps:
  base: '>=4.5 && <4.15'
  commutative-semigroups: '>=0'
  jsaddle: '>=0'
  mtl: '>=0'
  reflex: '>=0.4 && <0.10'
  reflex-external-ref: '>=0'
  text: '>=0'
changelog: |
  # 1.2.0.0

  * Raise bounds for `reflex-0.9`

  # 1.1.0.0

  * Added instance for `LocalizedPrint ()`

  # 1.0.4.0

  * Remove warnings

  # 1.0.3.0

  * Allow `reflex-0.8`

  # 1.0.2.0

  * Add CPP to language extensions

  # 1.0.1.0

  * Add ifdef for GHCJS compilation

  # 1.0.0.0

  * Initial release
changelog-type: markdown
description: |
  # reflex-localize

  Library provides helpers for dynamic strings that depends on current selected
  language.

  # How to use

  First, you should define which languages your app supports:
  ``` haskell
  module App.Language(
      Language(..)
    , module Reflex.Localize
    ) where

  import Reflex.Localize
  import Reflex.Localize.Language

  data instance Language
    = English
    | Russian
  ```

  Second, define enumeration for strings ids.

  ``` haskell
  module App.Localization(
      module App.Localization
    , module App.Language
    ) where

  import App.Language

  data AboutPageStrings =
      AboutTitle
    | AboutVersion
    | AboutLicence
    | AboutHomepage
    | AboutDevelopers

  instance LocalizedPrint AboutPageStrings where
    localizedShow l v = case l of
      English -> case v of
        AboutTitle      -> "About"
        AboutVersion    -> "Version"
        AboutLicence    -> "Licence"
        AboutHomepage   -> "Homepage"
        AboutDevelopers -> "Developers"
      Russian -> case v of
        AboutTitle      -> "О продукте"
        AboutVersion    -> "Версия"
        AboutLicence    -> "Лицензия"
        AboutHomepage   -> "Сайт"
        AboutDevelopers -> "Разработчики"
  ```

  You can either collect all strings to one data sum or split strings for each
  widget.

  Finally, you should implement `MonadLocalized` type class in you application monad.
  We suggest using monad transformer `LocalizeT` via `runLocalize` function:

  ``` haskell
  runLocalize :: (Reflex t, TriggerEvent t m, MonadIO m) => Language -> LocalizeT t m a -> m a
  ```
description-type: markdown
hash: 0301351b42666338855fb12efca75894bb3a4bca129276313f452061eb000e61
homepage: https://github.com/hexresearch/ergvein
latest: 1.2.0.0
license-name: MIT
maintainer: |-
  - Anton Gushcha <ncrashed@gmail.com>
  - Aminion <>
  - Vladimir Krutkin <krutkinvs@gmail.com>
  - Levon Oganyan <lemarwin42@protonmail.com>
synopsis: Localization library for reflex
test-bench-deps: {}
