homepage: ''
changelog-type: markdown
hash: 49c2cf84a07fa6499c5ac180cc08f711420c78843fd0f783001200390b4f9010
test-bench-deps:
  base: -any
  require-callstack: -any
maintainer: parsonsmatt@gmail.com
synopsis: Propagate HasCallStack with constraints
changelog: "# Revision history for require-callstack\n\n## 0.2.0.0\n\n* [#2](https://github.com/parsonsmatt/require-callstack/pull/2)
  \n    * A simpler and safer implementation\n\n## 0.1.0.0 \n\n* First version. Released
  on an unsuspecting world.\n"
basic-deps:
  base: '>=4.12 && <5'
  ghc-prim: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
author: parsonsmatt
latest: 0.2.0.0
description-type: markdown
description: "# `require-callstack`\n\nHaskell has opt-in call stacks through the
  use of the `HasCallStack` constraint. \nOne unfortunate aspect of this design is
  that the resulting `CallStack` can be truncated if any function in the call list
  omits the constraint.\n\n```haskell\nfoo :: HasCallStack => Int -> String\nfoo =
  error \"oh no\"\n\nbar :: HasCallStack => Int -> String\nbar = foo . negate\n\nbaz
  :: Int -> String\nbaz = bar . (* 2)\n\nmain :: IO ()\nmain = do\n    print $ baz
  5\n```\n\nRunning this code will fail with an `ErrorCall \"oh no\"` exception.\nThe
  attached `CallStack` will only mention `foo` and `bar` - `baz` *will not* be present,
  nor will `main`.\nA truncated `CallStack` isn't nearly as useful as you might like.\n\nOne
  solution is the [`annotated-exception`](https://www.stackage.org/lts-21.1/package/annotated-exception-0.2.0.4)
  library, which can attach `CallStack` to any thrown exception, and `catch` is guaranteed
  to add a stack frame at the catch-site for any exception that passes through.\nHowever,
  it's *still* nice to have `HasCallStack` entries on functions - then you get the
  name of the function, which makes diagnosing an error report easier.\n\nThis library
  introduces a type `RequireCallStack`. \nUnlike `HasCallStack`, this isn't automagically
  solved - if you call a function that has `RequireCallStack` in the constraint, you
  must either call `provideCallStack` to discharge the constraint, or add `RequireCallStack`
  to the signature of the function you're defining.\n\n```haskell\npanic :: RequireCallStack
  => String -> a\npanic = error\n\nfoo :: RequireCallStack => Int -> String\nfoo =
  panic \"oh no\"\n\nbar :: RequireCallStack => Int -> String\nbar = foo . negate\n\nbaz
  :: Int -> String\nbaz = bar . (* 2)\n\nmain :: IO ()\nmain = do\n    print $ baz
  5\n```\n\nThis code will fail with a compile-time error:\n\n> ```\n> /home/matt/Projects/require-callstack/test/Main.hs:30:5:
  error: [GHC-39999]\n>     • No instance for ‘RequireCallStack.Internal.Add_RequireCallStack_ToFunctionContext_OrUse_provideCallStack’\n>
  \        arising from a use of ‘bar’\n>         ....\n>    |        \n> 30 |     bar
  . (* 2)\n>    |     ^^^\n> ```\n\nThe error message, read carefully, will tell you
  how to solve the issue.\nIf we then write:\n\n```haskell\npanic :: RequireCallStack
  => String -> a\npanic = error\n\nfoo :: RequireCallStack => Int -> String\nfoo =
  panic \"oh no\"\n\nbar :: RequireCallStack => Int -> String\nbar = foo . negate\n\nbaz
  :: RequireCallStack => Int -> String\nbaz = bar . (* 2)\n\nmain :: IO ()\nmain =
  provideCallStack $ do\n    print $ baz 5\n```\n\nThen the code compiles and works
  as expected.\n"
license-name: MIT
