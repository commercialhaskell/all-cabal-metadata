all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Kyle Beechly
basic-deps:
  base: '>=4.12.0.0 && <=4.20.0.1'
  mtl: '>=2.2.2 && <2.4'
  primes: '>=0.2.1 && <0.3'
  random: '>=1.2.1 && <1.3'
  real-dice: '>=0.1 && <0.2'
changelog: |
  # Revision history for real-dice

  ## 0.1.0.0 -- 2024-05-16

  * First version. Released to an eager world!

  ## 0.1.0.1 -- 2024-05-17

  * Fixes initial bugs and mistakes in documentation

  ## 0.1.0.2 -- 2024-05-18

  * Adds wider dependency and version support

  * Adds to documentation

  ## 0.1.0.3 -- 2024-06-13

  * Adjusts dependency versioning to add to Stackage

  ## 0.1.0.4 -- 2024-10-21

  * Supports extra-1.8

  * Supports Haskell2010

  * Updates CI
changelog-type: markdown
description: "# Real\\* Dice\\* [![Hackage](https://img.shields.io/hackage/v/real-dice.svg)](https://hackage.haskell.org/package/real-dice)\n\nRandom
  number generation using real dice and other media that I actually touched!\n\n##
  Introduction\n\nSometimes the digital world can feel cold and sterile compared to
  the messy and unpredictable nature of our physical environment. Purely functional
  languages like Haskell are, for better and for worse, particularly susceptible to
  this digital de-messification\n\nIn celebration of Haskell's determinative nature,
  this package provides random data from my interaction with the physical world as
  well as utilities to leverage this data for random number generation and other RNG-based
  tasks\n\nThis package can be used to bring a human touch to our digital world\n\n##
  Use\n\nThe API of the Coin, Die, and RNG modules more or less match the API of System.Random's
  `random` and `randomR` functions, but with each function handling a specific type
  and domain. For example, `flipCoin` returns Boolean values and `roll1d n` returns
  Integers in the range [1, n]\n\nRunning the executable will produce the standard
  randomized data as defined in the Generate modules (see `app/Generate/` and `src/RealDice/Generate/`).
  If valid seed data exists in the `data-seed/` directory, this will be randomized
  with the Real\\*Dice\\* data to generate custom balanced data in the `data-generated/`
  directory (Coming Soon!)\n\n## FAQ\n\n### How does Real\\*Dice\\* work?\n\nCheck
  the source, [Hackage](https://hackage.haskell.org/package/real-dice), or Hoogle
  for documentation! \n\nThe RNG system itself is a basic randomized table lookup.
  If it's good enough for [the most perfect software ever written](https://www.youtube.com/watch?v=pq3x1Jy8pYM&t=32s),
  it's good enough for me!\n\n### What changes are planned?\n\nCheck the [issues](https://github.com/kaBeech/real-dice/issues`)
  and `TODO.md`!\n\n### I encountered a bug or have a cool feature idea!\n\nPlease
  [open an issue](https://github.com/kaBeech/real-dice/issues/new) or [submit a PR](https://github.com/kaBeech/real-dice/compare)!\n\n###
  Why are there asterisks in \"Real\\*Dice\\*\"?\n\n[Ce ne sont pas des dÃ©s](https://en.wikipedia.org/wiki/The_Treachery_of_Images)\n\nData
  contained in this project was generated with physical dice, but the project itself
  is not a physical object\n\nAdditionally, not all of the gathered data comes from
  rolling dice. Most of it comes from drawing poker chips, which can be much faster.
  Methodology for gathering the data is documented in `src/RealDice/Generate/RawData.hs`\n\n###
  ...but why? On the whole thing?\n\nBecause it's cool.\n\nThe interaction between
  the digital world and the physical world fascinates me. Musicians love to talk about
  warmth and saturation in audio signals - see [Variety Of Sound](https://varietyofsound.wordpress.com/blog/)
  for some mind-blowing information and audio plugins. This warmth traditionally comes
  from signal imperfections springing from physical components. This package doesn't
  scratch the surface of this kind of signal theory, but it's an attempt to use the
  physical world to influence the digital one\n\nPlus, we all know that observer interaction
  affects quantum systems, so it seems fun to have some random data touched by a human
  \U0001F638\n"
description-type: markdown
hash: 678369e250834924db79c19bc935a5ca71bbb52266149aeb7fa320c0142f7776
homepage: https://github.com/kaBeech/real-dice
latest: 0.1.0.4
license-name: MIT
maintainer: contact@kaBeech.com
synopsis: Random number generation based on physical media touched by humans
test-bench-deps:
  QuickCheck: '>=2.14.3 && <2.16'
  base: '>=0'
  extra: '>=1.7.15 && <1.9'
  mtl: '>=0'
  primes: '>=0'
  real-dice: '>=0'
