all-versions:
- 0.1.0.0
- 0.1.0.1
author: Kyle Beechly
basic-deps:
  base: '>=4.18.2.0 && <=4.19.1.0'
  mtl: '>=2.3.1 && <2.4'
  primes: '>=0.2.1 && <0.3'
  random: '>=1.2.1 && <1.3'
  real-dice: '>=0'
changelog: |
  # Revision history for real-dice

  ## 0.1.0.0 -- 2024-05-16

  * First version. Released to an eager world!


  ## 0.1.0.1 -- 2024-05-17

  * Fix initial bugs and mistakes in documentation
changelog-type: markdown
description: "# Real\\*Dice\\*\n\nRandom number generation using real dice and other
  media that I actually touched!\n\n## Introduction\n\nIn celebration of Haskell's
  determinative nature, this package provides random data from my interaction with
  the physical world as well as utilities to leverage this data for random number
  generation and other RNG-based tasks\n\nSometimes the digital world can feel cold
  and sterile compared to the messy and unpredictable nature of our physical environment.
  Purely functional languages like Haskell are, for better and for worse, particularly
  susceptible to this digital de-messification\n\nThis package can be used to bring
  some analog warmth and a human touch to our digital world\n\n## Use\n\nThe API of
  the Coin, Die, and RNG modules more or less match the API of System.Random's `random`
  and `randomR` functions, but with each function handling a specific type and domain.
  For example, `flipCoin` returns Boolean values and `roll1d n` returns Integers in
  the range [1, n]\n\nRunning the executable will produce the standard randomized
  data as defined in the Generate modules (see `app/Generate/` and `src/RealDice/Generate/`).
  If valid seed data exists in the `data-seed/` directory, this will be randomized
  with the Real\\*Dice\\* data to generate custom balanced data in the `data-generated/`
  directory (Coming Soon!)\n\n## FAQ\n\n### How does Real\\*Dice\\* work?\n\nCheck
  the source or Hoogle for documentation! (Coming Soon!)\n\nThe RNG system itself
  is a basic randomized table lookup. If it's good enough for [the most perfect software
  ever written](https://www.youtube.com/watch?v=pq3x1Jy8pYM&t=32s), it's good enough
  for me!\n\n### What changes are planned?\n\nCheck the [issues](https://github.com/kaBeech/real-dice/issues`)
  and `TODO.md`!\n\n### I encountered a bug or have a cool feature idea!\n\nPlease
  [open an issue](https://github.com/kaBeech/real-dice/issues/new) or [submit a PR](https://github.com/kaBeech/real-dice/compare)!\n\n###
  Why are there asterisks in \"Real\\*Dice\\*\"?\n\n[Ce ne sont pas des dÃ©s](https://en.wikipedia.org/wiki/The_Treachery_of_Images)\n\nData
  contained in this project was generated with physical dice, but the project itself
  is not a physical object\n\nAdditionally, not all of the gathered data comes from
  rolling dice. Most of it comes from drawing poker chips, which can be much faster.
  Methodology for gathering the data is documented in `src/RealDice/Generate/RawData.hs`\n\n###
  ...but why? On the whole thing?\n\nBecause it's cool.\n\nThe interaction between
  the digital world and the physical world fascinates me. Musicians love to talk about
  warmth and saturation in audio signals - see [Variety Of Sound](https://varietyofsound.wordpress.com/blog/)
  for some mind-blowing information and audio plugins. This warmth traditionally comes
  from signal imperfections springing from physical components. This package doesn't
  scratch the surface of this kind of signal theory, but it's an attempt to use the
  physical world to influence the digital one\n\nPlus, we all know that observer interaction
  affects quantum systems, so it seems fun to have some random data touched by a human
  \U0001F638\n"
description-type: markdown
hash: 9dd140753867a8669f2cb6919cecbdb90aa1d89577e0082d3cf4dec587d8a801
homepage: https://github.com/kaBeech/real-dice
latest: 0.1.0.1
license-name: MIT
maintainer: contact@kaBeech.com
synopsis: Random number generation based on physical media touched by humans
test-bench-deps:
  QuickCheck: '>=2.15 && <2.16'
  base: '>=0'
  extra: '>=1.7.15 && <1.8'
  mtl: '>=0'
  primes: '>=0'
  real-dice: '>=0'
