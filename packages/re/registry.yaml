all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.2.5
- 0.1.2.6
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.3.3
- 0.1.3.4
- 0.1.3.5
- 0.1.3.6
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.5.0
- 0.1.5.1
- 0.1.5.2
- 0.1.5.3
- 0.1.5.4
- 0.1.5.5
- 0.1.6.0
- 0.1.6.1
- 0.1.6.2
- 0.1.6.3
- 0.1.7.0
- 0.1.7.1
- 0.1.8.0
- 0.1.9.0
- 0.1.9.1
- 0.1.9.3
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
- 0.3.0.5
- 0.3.0.6
- 0.3.0.7
- 0.3.0.8
- 0.3.0.9
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.3.0
- 0.3.3.1
- 0.3.3.2
- 0.3.3.3
- 0.3.3.4
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.3.0
- 0.6.3.1
- 0.6.3.2
- 0.6.3.3
author: ''
basic-deps:
  base: '>=4.14 && <5'
  containers: '>=0.5 && <1.0'
  exceptions: '>=0.8 && <0.11'
  hashable: '>=1.2 && <2.0'
  mmorph: '>=1.0 && <2'
  mtl: '>=2.0 && <3'
  multimap: '>=1.0 && <2'
  protolude: '>=0.2 && <0.4'
  resourcet: '>=1.1 && <2'
  semigroupoids: '>=5.0 && <7'
  semigroups: '>=0.15 && <0.30'
  template-haskell: '>=2.13 && <3.0'
  text: '>=1.1 && <3'
  transformers-base: '>=0.4 && <0.5'
  unliftio: '>=0.2 && <1'
changelog: ''
changelog-type: ''
description: |
  # Registry [![Hackage](https://img.shields.io/hackage/v/registry.svg)](https://hackage.haskell.org/package/registry) [![Build Status](https://github.com/etorreborre/registry/workflows/ci/badge.svg)](https://github.com/etorreborre/registry/actions)

  ##### *It's functions all the way down* <img src="https://raw.githubusercontent.com/etorreborre/registry/main/doc/images/unboxed-bottomup.jpg" border="0"/>

  #### Presentation

  This library provides a data structure, a "Registry", to control the creation of functions from other functions. You can use this technique to:

   - create applications out of software components ("dependency injection")
   - fine tune encoders/decoders (see the [`registry-aeson`][registry-aeson] and the [`registry-messagepack`][registry-messagepack] projects)
   - create composable data generators for nested datatypes (see the [`registry-hedgehog`][registry-hedgehog] and the [`registry-hedgehog-aeson`][registry-hedgehog-aeson] projects)

  You can watch a video presenting the main ideas behind the library [here](https://www.youtube.com/watch?v=xKgII4ggo-4).

  The following sections introduce in more details the problem that this library is addressing, the concepts behind the solution and various use-cases which can arise on real projects:

   1. [what is the problem?][motivation]
   2. the concept of a [Registry][registry] and the resolution algorithm
   3. how does this [compare to monad transformers and effects](https://github.com/etorreborre/effects)?

  #### Tutorials

   1. tutorial: use a `Registry` to create [applications][tutorial] and define components
   1. use a `Registry` to compose [Hedgehog generators][generators]
   1. [workshop][workshop]: implement your own simplified registry and understand the basic concepts behind it

  #### How-tos

   1. how to [install this library][install]?
   1. how to do [mocking][mocking]?
   1. how to [specialize some values in some contexts][specialize]?
   1. how to [control effects][caching] occurring when creating a component (like a connection pool)?
   1. how to [allocate resources][resources] which must be finalized?
   1. how to [extract a dot graph from the registry][dot] in an application?
   1. how to [interact with a library using monad transformers](https://github.com/etorreborre/registry/blob/master/test/Test/Data/Registry/MonadRandomSpec.hs)?
   1. how to [remove boilerplate][boilerplate] due to parameter passing?
   1. how to [create a typeclass from a record of functions][typeclass]?
   1. how to [read type errors][errors]?

  #### Reference guides

   1. [main operators and functions][reference]
   1. [implementation notes][implementation]


  [motivation]: http://github.com/etorreborre/registry/blob/main/doc/motivation.md
  [registry]: http://github.com/etorreborre/registry/blob/main/doc/registry.md
  [tutorial]: http://github.com/etorreborre/registry/blob/main/doc/tutorial.md
  [applications]: http://github.com/etorreborre/registry/blob/main/doc/applications.md
  [mocking]: http://github.com/etorreborre/registry/blob/main/doc/applications.md#integration
  [install]: http://github.com/etorreborre/registry/blob/main/doc/install.md
  [specialize]: http://github.com/etorreborre/registry/blob/main/doc/applications.md#context-dependent-configurations
  [caching]: http://github.com/etorreborre/registry/blob/main/doc/applications.md#caching
  [resources]: http://github.com/etorreborre/registry/blob/main/doc/applications.md#resources
  [dot]: http://github.com/etorreborre/registry/blob/main/doc/dot.md
  [boilerplate]: http://github.com/etorreborre/registry/blob/main/doc/boilerplate.md
  [typeclass]: http://github.com/etorreborre/registry/blob/main/doc/typeclass.md
  [generators]: http://github.com/etorreborre/registry-hedgehog/blob/main/doc/tutorial.md
  [registry-hedgehog]: http://github.com/etorreborre/registry-hedgehog
  [registry-messagepack]: http://github.com/etorreborre/registry-messagepack
  [registry-aeson]: http://github.com/etorreborre/registry-aeson
  [registry-hedgehog-aeson]: http://github.com/etorreborre/registry-hedgehog-aeson
  [reference]: http://github.com/etorreborre/registry/blob/main/doc/reference.md
  [implementation]: http://github.com/etorreborre/registry/blob/main/doc/implementation.md
  [errors]: http://github.com/etorreborre/registry/blob/main/doc/errors.md
  [workshop]: https://github.com/etorreborre/registry-workshop
description-type: markdown
hash: 30c46812f68208291eb1758cbc2acf5c4b9937d11e2364098122feea88920098
homepage: ''
latest: 0.6.3.3
license-name: MIT
maintainer: etorreborre@yahoo.com
synopsis: data structure for assembling components
test-bench-deps:
  MonadRandom: <1
  async: <2.3
  base: '>=4.14 && <5'
  bytestring: <0.13
  containers: '>=0.5 && <1.0'
  directory: <1.4
  exceptions: '>=0.8 && <0.11'
  generic-lens: '>=1.0 && <3.0'
  hashable: '>=1.2 && <2.0'
  hedgehog: '>=1.0 && <3.0'
  io-memoize: <1.2
  mmorph: '>=1.0 && <2'
  mtl: '>=2.0 && <3'
  multimap: <2
  protolude: '>=0.2 && <0.4'
  random: <2.0
  registry: '>=0'
  resourcet: '>=1.1 && <2'
  semigroupoids: '>=5.0 && <7'
  semigroups: <0.30
  tasty: <1.6
  tasty-discover: <6
  tasty-hedgehog: '>=1.2 && <2.0'
  tasty-th: <0.2
  template-haskell: '>=2.13 && <3.0'
  text: <3
  transformers-base: '>=0.4 && <0.5'
  unliftio: '>=0.2 && <1'
