homepage: ''
changelog-type: ''
hash: ef4a5f8589d91e4630e8faca888536e660407cf4c59fcf2bd58e9075fef43ece
test-bench-deps:
  semigroupoids: '>=5.0 && <5.4'
  exceptions: '>=0.8 && <0.11'
  io-memoize: <1.2
  bytestring: <0.12
  tasty-th: <0.2
  MonadRandom: <0.6
  base: '>=4.7 && <5'
  multimap: <1.3
  tasty-hedgehog: '>=1.0 && <1.2'
  tasty-discover: <4.3
  text: <2
  universum: <2
  hedgehog: '>=1.0 && <2.0'
  async: <2.3
  protolude: '>=0.2 && <0.4'
  semigroups: <0.20
  containers: '>=0.5 && <0.7'
  mtl: '>=2.0 && <3'
  registry: -any
  mmorph: '>=1.0 && <2'
  hashable: '>=1.2 && <1.5'
  transformers-base: ==0.4.*
  generic-lens: '>=1.0 && <3.0'
  random: <2.0
  tasty: <1.5
  resourcet: '>=1.1 && <1.3'
  template-haskell: '>=2.13 && <3.0'
  directory: <1.4
maintainer: etorreborre@yahoo.com
synopsis: data structure for assembling components
changelog: ''
basic-deps:
  semigroupoids: '>=5.0 && <5.4'
  exceptions: '>=0.8 && <0.11'
  base: '>=4.7 && <5'
  text: '>=1.1 && <2'
  protolude: '>=0.2 && <0.4'
  semigroups: '>=0.15 && <0.20'
  containers: '>=0.5 && <0.7'
  mtl: '>=2.0 && <3'
  mmorph: '>=1.0 && <2'
  hashable: '>=1.2 && <1.5'
  transformers-base: ==0.4.*
  resourcet: '>=1.1 && <1.3'
  template-haskell: '>=2.13 && <3.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.2.5
- 0.1.2.6
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.3.3
- 0.1.3.4
- 0.1.3.5
- 0.1.3.6
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.5.0
- 0.1.5.1
- 0.1.5.2
- 0.1.5.3
- 0.1.5.4
- 0.1.5.5
- 0.1.6.0
- 0.1.6.1
- 0.1.6.2
- 0.1.6.3
- 0.1.7.0
- 0.1.7.1
- 0.1.8.0
- 0.1.9.0
- 0.1.9.1
- 0.1.9.3
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.1.0
- 0.3.0.0
author: ''
latest: 0.3.0.0
description-type: markdown
description: |
  # Registry [![Hackage](https://img.shields.io/hackage/v/registry.svg)](https://hackage.haskell.org/package/registry) [![Build Status](https://github.com/etorreborre/registry/workflows/CI/badge.svg)](https://github.com/etorreborre/registry/actions)


  [![Join the chat at https://gitter.im/etorreborre/registry](https://badges.gitter.im/etorreborre/registry.svg)](https://gitter.im/etorreborre/registry?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

  ##### *It's functions all the way down* <img src="doc/images/unboxed-bottomup.jpg" border="0"/>

  #### Presentation

  This library provides a data structure, a `Registry`, to control the creation of functions from other functions. You can use this technique to:

   - create applications out of software components ("dependency injection")
   - fine tune encoders/decoders (see the [`registry-aeson](http://github.com/etorreborre/registry-aeson) and the [`registry-messagepack](http://github.com/etorreborre/registry-messagepack) projects)
   - create composable data generators for nested datatypes (see the [`registry-hedgehog](http://github.com/etorreborre/registry-hedgehog) and the [`registry-hedgehog-aeson](http://github.com/etorreborre/registry-hedgehog-aeson) projects)

  You can watch a video presenting the main ideas behind the library [here](https://skillsmatter.com/skillscasts/12299-wire-once-rewire-twice).

  The following sections introduce in more details the problem that this library is addressing, the concepts behind the solution and various use-cases which can arise on real projects:

   1. [what is the problem?](doc/motivation.md)
   1. the concept of a [Registry](doc/registry.md) and the resolution algorithm
   1. how does this [compare to monad transformers and effects](https://github.com/etorreborre/effects)?

  #### Tutorials

   1. tutorial: use a `Registry` to create [applications](doc/tutorial.md) and define components
   1. use a `Registry` to compose [Hedgehog generators](https://github.com/etorreborre/registry-hedgehog/doc/generators.md)

  #### How-tos

   1. how to [install this library](doc/install.md)?
   1. how to do [mocking](doc/applications.md#integration)?
   1. how to [specialize some values in some contexts](doc/applications.md#context-dependent-configurations)?
   1. how to [control effects](doc/applications.md#memoization) occurring when creating a component (like a connection pool)?
   1. how to [allocate resources](doc/applications.md#resources) which must be finalized?
   1. how to [extract a dot graph from the registry](doc/dot.md) in an application?
   1. how to [interact with a library using monad transformers](https://github.com/etorreborre/registry/blob/master/test/Test/Data/Registry/MonadRandomSpec.hs)?
   1. how to [remove boilerplate](doc/boilerplate.md) due to parameter passing?
   1. how to [create a typeclass from a record of functions](doc/typeclass.md)?

  #### Reference guides

   1. [main operators and functions](doc/reference.md)
   1. [implementation notes](doc/implementation.md)
license-name: MIT
