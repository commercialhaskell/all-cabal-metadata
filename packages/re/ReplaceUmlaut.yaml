homepage: https://github.com/andrewufrank/u4blog.git#readme
changelog-type: markdown
hash: b55b9aeabcca961d2c7ed2b54ddd20ae4ff30169edddb0b606f4f9924ab2af69
test-bench-deps:
  HTF: -any
  uniform-cmdLineArgs: -any
  dir-traverse: -any
  base: '>=4.7 && <5'
  text: -any
  uniform-fileio: -any
  ReplaceUmlaut: -any
  transformers: -any
  optparse-applicative: -any
  uniform-pandoc: -any
  uniformBase: -any
  uniform-json: '>=0.1.5'
maintainer: Andrew U. Frank <andrewufrank@gmail.com>
synopsis: converting text to properly encoded german umlauts
changelog: "ChangeLog for replaceUmlaut  \n\n0.1.5.1 base \n0.1.5.2 changes to integrate
  into daino and ghc 9.4.4.\n0.1.5.3 report changes  \n     removed dependency completeMeta
  \ \n     removed the mapp (merged with other)\n     updated readme etc. "
basic-deps:
  uniform-cmdLineArgs: -any
  dir-traverse: -any
  base: '>=4.7 && <5'
  text: -any
  uniform-fileio: -any
  ReplaceUmlaut: -any
  transformers: -any
  optparse-applicative: -any
  uniform-pandoc: -any
  uniformBase: '>=0.1.5'
  uniform-json: '>=0.1.5'
all-versions:
- 0.1.5.3
author: Andrew Frank
latest: 0.1.5.3
description-type: markdown
description: "\n---\n# Replacement of ae oe ue by the UTF-8 umlaut-glyph ä ö ü\n\nReplaceUmlaut
  processes a `txt` or `md` file (or all `md` files in a directory) and replaces the
  umlaut to its proper form (possibly capitalized). It uses an extensible list to
  avoid replacements which are not appropriate.\n\n## The file nichtUmlaut.txt lists
  exceptions\nAn extensible list of parts of words which contain character \ncombinations
  which should not be replaced; for example, Koeffizient. The list needs only contain
  parts of words (i.e. koeff) not a complete list of all words with non-replaceable
  combinations. \n\n## Command Line Use \nThe command `replaceUmlaut filepath` processes
  just the file and returns the changed file (the original is renamed with extension
  `bak`). \nSwitches: \n    - `-m directory` processes all `md` files in the directory.\n
  \   - `-d` is a debug option; files are not changed, but a changed version is returned
  with extension `new`. \n\n## Function \n\nThe function `procMd1` is useful to process
  a single `md` file in a program. The list of permitted combinations must be passed
  as an argument. It returns True if the file is changed.\nTypical use is \n\n````haskell\n
  \   changed <- header\n        then  do \n            erl1 <- readErlaubt  fnErlaubt\n
  \           let addErl = dyDoNotReplace . meta1 $ doc1\n                -- allow
  additions to the list in the YAML header\n                erl2 = addErl -- add erl1\n
  \           changed1 <- applyReplace debugReplace erl2   fnin \n            return
  changed1\n````\n\n\n<!-- ## Source: \n### in app is Main.hs\nthis is the main for
  the utility which converts all md files for myHomepage. it looks at the value of
  *language* and converts only files which have *de_AT*, *de_CH*, or *de_DE*. \nconversion
  of test in the yaml header is not converted!\n\n### Lib contains \n- ProcTxt.hs
  \n- ProcWord.hs\nwhich are the actual conversion routines -->\n\n"
license-name: LicenseRef-GPL
