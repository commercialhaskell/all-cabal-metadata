all-versions:
- 0.9.0.2
- 0.9.0.3
- 0.9.0.4
- 0.9.0.5
- 0.9.0.6
- 0.9.0.7
- '0.10'
- 0.10.0.1
- 0.10.0.2
- 0.10.0.3
- 0.10.0.4
- '0.11'
- '0.13'
- 0.13.1
- 0.13.1.1
- 0.13.1.2
- '0.14'
- 0.14.1
- 0.14.2
- 0.14.2.1
- '0.15'
- 0.15.0.1
- 0.15.0.2
- '0.16'
- 0.16.0.1
- 0.16.0.2
- 0.16.0.3
- 0.16.0.4
- 0.16.1
- 0.16.1.1
- 0.16.1.2
- 0.16.1.3
- 0.16.1.4
- 0.16.1.5
- 0.16.1.6
- 0.16.1.7
- 0.16.1.8
- 0.17.0.0
- 0.17.0.1
- 0.17.0.2
- 0.17.0.3
- 0.17.0.4
- 0.17.0.5
- 0.17.0.6
- 0.17.1
- 0.17.1.1
- 0.17.1.2
- 0.17.1.3
- 0.18.0.0
- 0.19.0.0
- 0.19.0.1
- 0.19.0.2
- 0.19.0.3
- 0.20.0.0
- 0.20.0.1
- 0.20.0.2
- 0.20.0.3
author: ''
basic-deps:
  Cabal: '>=1.16 && <2.2'
  HStringTemplate: '>=0.6 && <0.9'
  aeson: '>=0.7 && <1.4'
  base: '>=4.5 && <4.12'
  base-compat: '>=0.8 && <0.10'
  blaze-html: '>=0.5 && <0.10'
  code-builder: '>=0.1 && <0.2'
  directory: '>=1.1 && <1.4'
  fclabels: '>=1.0.4 && <2.1'
  filepath: '>=1.2 && <1.5'
  hashable: '>=1.1 && <1.3'
  haskell-src-exts: '>=1.20 && <1.21'
  hxt: '>=9.2 && <9.4'
  json-schema: '>=0.6 && <0.8'
  pretty: '>=1.0 && <1.2'
  process: '>=1.0 && <1.7'
  rest-core: '>=0.38 && <0.40'
  safe: '>=0.2 && <0.4'
  scientific: '>=0.3.2 && <0.4'
  semigroups: '>=0.5 && <0.19'
  split: '>=0.1 && <0.3'
  text: '>=0.11 && <1.3'
  uniplate: '>=1.6.12 && <1.7'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.10 && <0.13'
changelog: "# Changelog\n\n## 0.20.0.0\n\n* Upgrade to `haskell-src-exts 1.18.*`\n\n####
  0.19.0.4\n\n* Fix encoding issue with String inputs in generated clients.\n  Non-ASCII
  characters would be mangled. Regenerate your client code\n  to fix this. Newly generated
  code with String inputs needs to depend\n  on rest-client >= 0.5.2, or it will fail
  to build.\n\n#### 0.19.0.3\n\n* Allow rest-core-0.39.\n\n#### 0.19.0.2\n\n* Upgrade
  to `rest-core 0.38` to add support for `RawJson(AndXml)(I/O)`.\n\n#### 0.19.0.1\n\n*
  Allow `haskell-src-exts 1.17.*`.\n\n## 0.19.0.0\n\n* Don't call global `Q` if available.
  This was an experimental\n  feature, and didn't work well in practice, since it
  would fail if\n  there was something else called `Q` on the window. We're not aware\n
  \ of anyone depending on `Q`, but if you do, you need to wrap the\n  results of
  all API calls in a call to Q.\n\n## 0.18.0.0\n\n* Javascript: postfix reserved words
  with an underscore. This is a\n  breaking change for javascript clients, since the
  generated API code\n  will change, so callers might have to be updated. All functions
  that\n  match one of the reserved words from [this\n  list](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords)\n
  \ will have to be updated with a trailing underscore.\n* (revision) Allow `aeson-0.10.*`.\n\n####
  0.17.1.3\n\n* Javascript: generate new API instance every time. Some properties\n
  \ were written to the prototype of the API object, and in Node,\n  importing it
  again could cause mixups of this data. Now every\n  instantiation of the API is
  a new object. This should have no impact\n  on user code, unless you're checking
  the API type with `instanceof`,\n  in which case it will now always return false.\n\n####
  0.17.1.2\n\n* Javascript: fix rare crash in error path.\n* Allow `HUnit 1.3.*`\n*
  Allow `process 1.3.*`.\n\n#### 0.17.1.1\n\n* JavaScript/NodeJS: Use the received
  content-type instead of the accept header to decide whether to parse json.\n* Allow
  `vector 0.11.*`\n\n### 0.17.1\n\n* Expose `Rest.Gen.Base.ActionInfo.Ident`\n\n####
  0.17.0.6\n\n* Fix linking of documentation resources (thanks Jan-Philip Loos)\n\n####
  0.17.0.5\n\n* Allow `aeson 0.9.*`\n\n#### 0.17.0.4\n\n* Allow `rest-core 0.36.*`\n\n####
  0.17.0.3\n\n* Allow `tagged 0.8.*`\n\n#### 0.17.0.2\n\n* Allow `filepath 1.4.*`.\n\n####
  0.17.0.1\n\n* Allow `blaze-html 0.8.*`.\n\n## 0.17.0.0\n\n* Docs: More exhaustive
  examples of JSON messages showing each possible node in the schema at least once.\n*
  Docs: Make example popup scrollable.\n\n#### 0.16.1.8\n\n* Remove dependency on
  hslogger.\n\n#### 0.16.1.7\n\n* Allow base 4.8 and HStringTemplate 0.8 for GHC 7.10
  compatibility.\n\n#### 0.16.1.6\n\n* Bump `rest-core`.\n\n#### 0.16.1.5\n\n* Haskell:
  Escape special characters in parameter names\n\n#### 0.16.1.4\n\n* Allow Cabal 1.22.*.\n\n####
  0.16.1.3\n\n* Allow semigroups 0.16.*\n\n#### 0.16.1.2\n\n* JavaScript: Add support
  for webpack (and any other preprocessor that tries to import all `require` function
  calls)\n\n#### 0.16.1.1\n\n* Haskell: Fixes a bug where client generation for end
  points without defined output or errors would default to parsing errors as XML even
  though the accept header was text/json. It now parses the response as json.\n\n###
  0.16.1\n\n##### JavaScript\n\n* When instantiating API object you can now optionally
  pass a `modifyRequest` argument of type `RequestObject -> RequestObject` which is
  called before every request.\n\n* NodeJS: The `cookieJar` instance member is no
  longer available on sub resources, it can now only be accessed from the top-level
  api object. This is a breaking change for generated clients. It was a bad idea to
  use this to begin with since the cookie jar is shared across the entire api object.\n\n####
  0.16.0.4\n\n* JavaScript: Minor simplification in the template.\n\n#### 0.16.0.3\n\n*
  JavaScript/node.js: Each instance of a client now uses its own cookie jar automatically.
  You no longer need to depend on the `request` library to use generated clients.
  If you want access to the cookie jar use `api.cookieJar`.\n\n#### 0.16.0.2\n\n*
  Allow haskell-src-exts 1.16.*\n\n#### 0.16.0.1\n\n* Fix a bug where the generated
  Haskell client for a resource with a\n  name that was a Haskell keyword would contain
  invalid code.\n* Relax bounds on semigroups.\n\n## 0.16\n\nYou don't have to regenerate
  clients for this release, but it is strongly recommended!\n\n* Accept headers are
  now sent based on both the output and errors of an endpoint, previously none of
  the clients would handle an end point with different inputs and outputs properly.\n\n*
  JavaScript/node.js: Error objects now contain a JSON `response` property if the
  error response is valid JSON.\n\n#### 0.15.0.3\n\n* Bump `rest-types` and `rest-core`\n\n####
  0.15.0.2\n\n* Allow `json-schema 0.7.*`\n\n#### 0.15.0.1\n\n* JavaScript/node.js:
  Fixed error handling for `ECONNREFUSED` and other \"top level\" errors\n\n## 0.15\n\n*
  JavaScript/node.js: Clients now use and require Q promises\n* JavaScript/web: Will
  now use Q if available, and otherwise return the normal jQuery objects\n\nBugfixes:\n*
  JavaScript: Fix propagation of URLs to secure end points\n\n### 0.14.2\n\n* Generated
  JavaScript now also works as a Node module\n* JavaScript constructors are now named
  properly instead of \"constrWrapper\"\n* Now generates valid Ruby code again\n\n###
  0.14.1\n\n* Expose modules Rest.Gen.Base.ActionInfo and Rest.Gen.Base.ApiTree\n
  \ again.\n* Make test cases compile again.\n\n##### Revisions\n\n* Allow `Cabal
  == 1.16.*`\n\n## 0.14\n\n* Abstracted generated code into rest-client, you should
  regenerate haskell clients\n* haskell code generation is now done using `haskell-src-exts`\n*
  When using module name rewrites their qualification are now also rewritten.\n* Add
  `hs-source-dirs` and `build-depends` when generating cabal files\n* Moved `Rest.Gen.Docs.Happstack`
  to `rest-happstack:Rest.Driver.Happstack.Docs`\n* Expose `Rest.Gen.Base`\n* Flattened
  module hierarchy, `Rest.Gen.Haskell.Generate` is now `Rest.Gen.Haskell` etc.\n\n####
  0.13.1.2\n\n* Use `json-schema 0.5.*` and add `showExample` cases for `Map` and
  `Any`\n\n#### 0.13.1.1\n\n* Allow `attoparsec 0.12.*`\n\n### 0.13.1\n\n* Derive
  `Eq, Show` for all types in `Rest.Gen.Types`\n* Haskell: Nub generated imports\n\n##
  0.13\n\nBreaking changes:\n* Un-exposes internal modules so we don't have to major
  bump on every change.\n* `gen` Now accepts AST-like types instead of just strings
  to make it more obvious how to use it, see types in `Rest.Gen.Types`\n\nBugfixes:\n*
  Make sure Identifiers are always imported when needed. This is a further improvement
  on the bugfix in rest-gen-0.11.\n* rest-gen-0.12\tdid not always take arguments
  in generated methods into account, so the renamed qualification has been reverted
  for now.\n\n## 0.12\n\n* Haskell: Module rewrites such as `Data.Text.Internal` ->
  `Data.Text` now produces qualified imports `import qualified Data.Text as Data.Text`
  instead of `import qualified Data.Text as Data.Text.Lazy`. This prevents building
  against different versions of the same package that may have moved the internal
  module (as is the case with `text`) from generating different clients.\n\n## 0.11\n\n*
  Bugfix: Haskell: Resources without a getter now generate identifier arguments for
  other end points\n* Shuffles some internal (but exposed) functions around\n\n####
  0.10.0.4\n\n* Drops `aeson-utils` dependency in favor of `scientific >= 0.3.2`\n\n####
  0.10.0.3\n\n* Allow `mtl == 2.2.*`\n\n#### 0.10.0.1\n\n* Bump `Cabal` upper bound
  to `< 1.22`\n\n## 0.10\n\n* Generate documentation, Javascript and Haskell code
  for multi-delete\n  handlers. The name of the generated functions is `removeMany`
  or\n  `removeManyBy<id>`.\n* Escape reserved names in Haskell code generation.\n"
changelog-type: markdown
description: Documentation and client generation from rest definition.
description-type: haddock
hash: 9195de5acb788a64534e76374cf792977eba3dd6da5963583a2001b9f1f048fb
homepage: ''
latest: 0.20.0.3
license-name: BSD-3-Clause
maintainer: code@silk.co
synopsis: Documentation and client generation from rest definition.
test-bench-deps:
  HUnit: '>=1.2 && <1.7'
  base: '>=4.5 && <4.12'
  fclabels: '>=1.0.4 && <2.1'
  haskell-src-exts: '>=1.15.0 && <1.21'
  rest-core: '>=0.38 && <0.40'
  rest-gen: '>=0'
  test-framework: '>=0.8 && <0.9'
  test-framework-hunit: '>=0.3 && <0.4'
