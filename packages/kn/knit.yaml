all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
author: Philip Kamenarsky
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  hashtables: '>=0'
  knit: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for knit

  ## Unreleased changes
changelog-type: markdown
description: "# knit\n\n[![CircleCI](https://circleci.com/gh/pkamenarsky/knit.svg?style=svg)](https://circleci.com/gh/pkamenarsky/knit)\n\n`knit`
  ties the knot on data structures that reference each other by unique keys. Above
  all it aims to be easy to use - boilerplate is kept to a minimum and its API is
  as simple as it gets.\n\n## Example\n\n```haskell\ndata Person model m = Person\n
  \ { name        :: Id model m String\n  , loves       :: ForeignId model m \"persons\"
  \"name\" --\n  , isPresident :: Bool                               --\n  } deriving
  (Generic, KnitRecord Model)              --\n                                                      --
  \ndata Model m = Model                                  --\n  { persons :: Table
  Model m Person -- <----------------\n  } deriving (Generic, KnitTables)\n```\n\nLet's
  break that down: when defining a domain type, like `Person`, we'll need two additional
  type parameters that will determine the final shape of that type: the `model` `Person`
  belongs to (it may belong to multiple models), and its \"mode\" (`m`) - whether
  it's *resolved* or *unresolved*. Additionally, we need to derive `KnitRecord` for
  every domain type, supplying it with a concrete `model` type.\n\n`Id model m t`
  will define a key this type is referenced by (multiple keys are possible).\n\n`ForeignId`
  is where the magic happens - in addition to the two generic parameters from above
  it takes a \"table\" name (which is just a field in the `model`) and a field name
  in the referenced domain type; the final type of the `ForeignId` field (both resolved
  and unresolved) can then be inferred from this information alone!\n\nTo define a
  `model`, wrap each domain type with a `Table` and autoderive the `KnitTables` typeclass.\n\nLet's
  take a look:\n\n```haskell\nalice :: Person Model 'Unresolved\nalice = Person\n
  \ { name        = Id \"Alice\"\n  , loves       = ForeignId \"Bob\"  -- this must
  be a String, since Model.persons.name is a String!\n  , isPresident = False\n  }\n\nbob
  :: Person Model 'Unresolved\nbob = Person\n  { name        = Id \"Bob\"\n  , loves
  \      = ForeignId \"Alice\"\n  , isPresident = False\n  }\n\nmodel :: Model 'Unresolved\nmodel
  = Model\n  { persons = [alice, bob]  -- `Table` is just a regular list\n  }\n```\n\nSo
  far so good. Resolving an unresolved model is just a matter of calling `knit`:\n\n```haskell\nknitModel
  :: Model Resolved\nknitModel = case knit model of\n  Right resolved -> resolved\n
  \ Left e -> error (show e)\n```\n\n(`knit` may fail due to invalid or duplicate
  keys). If all goes well, we'll get the following *resolved* model, if we were to
  do it by hand:\n\n```haskell\nmanualAlice :: Person Model 'Resolved\nmanualAlice
  = Person\n  { name        = \"Alice\"\n  , loves       = Lazy manualBob\n  , isPresident
  = False\n  }\n\nmanualBob :: Person Model 'Resolved\nmanualBob = Person\n  { name
  \       = \"Bob\"\n  , loves       = Lazy manualAlice\n  , isPresident = False\n
  \ }\n\nmanualModel :: Model 'Resolved\nmanualModel = Model\n  { persons = [manualAlice,
  manualBob]\n  }\n```\n\n`Lazy` is just a simple wrapper with a `get` field:\n\n```haskell\ndata
  Lazy a = { get :: a }\n```\n\nAnd here it is, a nicely knit model:\n\n```haskell\nname
  $ get $ loves (persons knitModel !! 0) -- \"Bob\"\n```\n\nThe `test` directory contains
  more examples, with multiple domain types.\n\n## Cascading deletes\n\nBy supplying
  a `Remove` key instead the regular `Id` a record is marked for deletion:\n\n```haskell\nalice
  :: Person Model 'Unresolved\nalice = Person\n  { name        = Remove \"Alice\"
  \ -- mark the record for deletion\n  , loves       = ForeignId \"Bob\"\n  , isPresident
  = False\n  }\n```\n\nThis will remove the record from the resolved result, as well
  as *all other records that depend transitively on it*. Invalid keys (i.e. `ForeignId`s
  that reference non-existent `Id`s) will still throw an error when `knit`-ting a
  model.\n"
description-type: markdown
hash: d49bf1f88e230bb4fcda0fbb1e6b23fb1d486489fac95e7c7d52b824bda786b4
homepage: https://github.com/pkamenarsky/knit#readme
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: p.kamenarsky@gmail.com
synopsis: Ties the knot on data structures that reference each other by unique keys.
test-bench-deps:
  base: '>=4.7 && <5'
  knit: '>=0'
