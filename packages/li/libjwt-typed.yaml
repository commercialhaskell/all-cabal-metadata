all-versions:
- '0.1'
- '0.2'
author: Marcin RzeÅºnicki
basic-deps:
  base: '>=4.13.0.0 && <4.15'
  bytestring: ^>=0.10.10.0
  case-insensitive: '>=1.2.0.0'
  casing: ^>=0.1.4.1
  data-default: '>=0.2 && <1.0'
  either: ^>=5.0.1.1
  exceptions: ==0.10.4
  extra: ^>=1.7
  monad-time: '>=0.3 && <0.4'
  proxied: '>=0.3 && <0.4'
  text: '>=1.2.3.2 && <1.2.5'
  time: '>=1.9 && <1.10'
  transformers: ^>=0.5.6.2
  unordered-containers: ^>=0.2.10.0
  utf8-string: ^>=1.0.1.1
  uuid: '>=1.3'
changelog: |
  # Changelog

  `libjwt-typed` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.2

  New features

  * Ability to **use public keys only if you do not intend to sign tokens**. This feature is backwards incompatible:
    * Function `signJwt` has been removed in favor of `sign` and `sign'`
    * Signing and decoding functions now depend on the new `Algorithm k` type and their contexts have been extended to accomodate new key classes (`SigningKey` and `DecodingKey` respectively)
    * JWT header `alg` is now an enumeration, handling of all key data has been moved to `Algorithm`


  ## 0.1

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/marcin-rzeznicki/libjwt-typed/releases
changelog-type: markdown
description: "# libjwt-typed\n\n[![Build status](https://travis-ci.com/marcin-rzeznicki/libjwt-typed.svg?branch=master)](https://travis-ci.org/marcin-rzeznicki/libjwt-typed)\n[![Hackage](https://img.shields.io/hackage/v/libjwt-typed.svg?logo=haskell)](https://hackage.haskell.org/package/libjwt-typed)\n[![Stackage
  Lts](http://stackage.org/package/libjwt-typed/badge/lts)](http://stackage.org/lts/package/libjwt-typed)\n[![Stackage
  Nightly](http://stackage.org/package/libjwt-typed/badge/nightly)](http://stackage.org/nightly/package/libjwt-typed)\n[![MPL-2.0
  license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](LICENSE)\n\nA
  Haskell implementation of [JSON Web Token (JWT)](https://jwt.io).\n\n1. [Key features](#key-features)\n
  \  1. [Type-safety](#type-safety)\n   1. [Speed and robustness](#speed-and-robustness)\n
  \  1. [Ease of use](#ease-of-use)\n1. [Installation](#installation)\n1. [Supported
  algorithms](#supported-algorithms)\n   1. [Example usage](#example-usage)\n      1.
  [With secrets (HS256, HS384, HS512)](#with-secrets-hs256-hs384-hs512)\n      1.
  [With keys](#with-keys)\n1. [Usage](#usage)\n   1. [Create a payload](#create-a-payload)\n
  \     1. [Namespaces](#namespaces)\n   1. [Signing a token](#signing-a-token)\n
  \  1. [Decoding a token](#decoding-a-token)\n1. [Supported types](#supported-types)\n
  \  1. [Flags](#flags)\n1. [Benchmarks](#benchmarks)\n   1. [Signing](#signing)\n
  \  1. [Decoding](#decoding)\n1. [Not implemented](#not-implemented)\n1. [Idea](#idea)\n\n##
  Key features\n\n### Type-safety\n\nAbove Haskell standard type-safety, the library
  keeps track of public and private claim names and types. There are no user-facing
  `HashMap`s in this library! A type of a JWT token might be: `Jwt\n       '[\"user_name\"
  ->> Text, \"is_root\" ->> Bool, \"user_id\" ->> UUID, \"created\" ->> UTCTime, \"accounts\"
  ->> NonEmpty (UUID, Text)]\n       ('SomeNs \"https://example.com\")`.\n\nFrom information
  encoded with precise types, it automatically derives encoders and decoders. It can
  also work with generic representations such as records.\n\n### Speed and robustness\n\n`libjwt-typed`
  uses [libjwt](https://github.com/benmcollins/libjwt) for low-level functionality.
  `libjwt` delegates cryptographic work to either `GnuTLS` or `OpenSSL`. This way,
  not only the most performance-sensitive features work lightning fast, they are also
  extremely reliable.\nBesides, the library does not depend on any JSON library like
  `aeson`, but it implements the necessary JSON processing in C via [jsmn](https://github.com/zserge/jsmn)
  - which makes it even faster.\n[Benchmarking](#benchmarks) shows that it can be
  over 10 times faster than other Haskell JWT libraries.\n\n### Ease of use\n\nThe
  library is designed for frictionless use. It can be easily extended, e.g. to add
  support for new types or to use custom JSON encodings compatible with other libraries
  you may already use in your project. Most instances can be derived automatically.
  The compilation errors are designed to be informational, i.e. you get `Claim \"user_name\"
  does not exist in this claim set` from GHC, not some 3 page long instance resolution
  output.\n\n## Installation\n\n`libjwt-typed` is available on [Hackage](http://hackage.haskell.org/package/libjwt-typed)\n\nYou
  must have `libjwt`  (preferrably the latest version) installed on your system and
  visible to the linker. `libjwt-typed` links to it at compile time. You can configure
  `libjwt` with `GnuTLS` or `OpenSSL` (it doesn't matter for `lbjwt-typed` which one
  you chose)\n\n## Supported algorithms\n\n|  JWS  | Algorithm | Description                        |\n|
  :---: | :-------: | :--------------------------------- |\n| HS256 |  HMAC256  |
  HMAC with SHA-256                  |\n| HS384 |  HMAC384  | HMAC with SHA-384                  |\n|
  HS512 |  HMAC512  | HMAC with SHA-512                  |\n| RS256 |  RSA256   |
  RSASSA-PKCS1-v1_5 with SHA-256     |\n| RS384 |  RSA384   | RSASSA-PKCS1-v1_5 with
  SHA-384     |\n| RS512 |  RSA512   | RSASSA-PKCS1-v1_5 with SHA-512     |\n| ES256
  | ECDSA256  | ECDSA with curve P-256 and SHA-256 |\n| ES384 | ECDSA384  | ECDSA
  with curve P-384 and SHA-384 |\n| ES512 | ECDSA512  | ECDSA with curve P-521 and
  SHA-512 |\n\n\n### Example usage\n\n#### With secrets (HS256, HS384, HS512)\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport Web.Libjwt\n\nhmac512 :: Algorithm Secret\nhmac512
  =\n  HMAC512\n    \"MjZkMDY2OWFiZmRjYTk5YjczZWFiZjYzMmRjMzU5NDYyMjMxODBjMTg3ZmY5OTZjM2NhM2NhN2Mx\\\n
  \   \\YzFiNDNlYjc4NTE1MjQxZGI0OWM1ZWI2ZDUyZmMzZDlhMmFiNjc5OWJlZTUxNjE2ZDRlYTNkYjU5\\\n
  \   \\Y2IwMDZhYWY1MjY1OTQgIC0K\"\n```\n\nA key of the same size as the hash output
  (for instance, 256 bits for\n   \"HS256\") or larger MUST be used with these algorithms.\n\n####
  With keys \n\nObtaining or reading keys is beyond the scope of this library. It
  accepts PEM-encoded RSA/ECDSA keys as `ByteString`s\n\n```haskell\nimport           Web.Libjwt\n\nimport
  qualified Data.ByteString.Char8         as C8\n\nrsa2048KeyPair :: RsaKeyPair\nrsa2048KeyPair
  =\n  let private = C8.pack $ unlines\n        [ \"-----BEGIN RSA PRIVATE KEY-----\"\n
  \       , \"MIIEpgIBAAKCAQEAwCXp2P+qboao0tjUyU+D3YI+sgBn8dkGaxOvPFLBFQMNkhbL\"\n
  \       -- ... \n        , \"-----END RSA PRIVATE KEY-----\"\n        ]\n      public
  = C8.pack $ unlines\n        [ \"-----BEGIN PUBLIC KEY-----\"\n        , \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCXp2P+qboao0tjUyU+D\"\n
  \       -- ...\n        , \"-----END PUBLIC KEY-----\"\n        ]\n  in  FromRsaPem
  { privKey = private, pubKey = public }\n\nrsa512 :: Algorithm RsaKeyPair\nrsa512
  = RSA512 rsa2048KeyPair\n\necP521KeyPair :: EcKeyPair\necP521KeyPair =\n  let private
  = C8.pack $ unlines\n        [ \"-----BEGIN EC PRIVATE KEY-----\"\n        , \"MIHcAgEBBEIAIWLn8LIw+NC3gZJIFemY/Ku5QNNncVjNZiQdICh7KzgHPrjCrdQk\"\n
  \       -- ...\n        , \"-----END EC PRIVATE KEY-----\"\n        ]\n      public
  = C8.pack $ unlines\n        [ \"-----BEGIN PUBLIC KEY-----\"\n        , \"MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBoCA7tBSz6R9DTQM5aq0VtyApXMUm\"\n
  \       -- ...\n        , \"-----END PUBLIC KEY-----\"\n        ]\n  in  FromEcPem
  { ecPrivKey = private, ecPubKey = public }\n\necdsa512 :: Algorithm EcKeyPair\necdsa512
  = ECDSA512 ecP521KeyPair\n```\n\nA key of size 2048 bits or larger MUST be used
  for RSA algorithms.\n\nThe [specification](https://tools.ietf.org/html/rfc7518)
  defines \"the use of ECDSA with the P-256 curve [secp256k1 or prime256v1] and\n
  \  the SHA-256 cryptographic hash function, ECDSA with the P-384 curve [secp384r1]\n
  \  and the SHA-384 hash function, and ECDSA with the P-521 curve [secp521r1] and
  the\n   SHA-512 hash function.\"\n\nAs of version **0.2**, you do not need private
  keys as long as you only decode tokens. This is obviously a type-safe feature, so
  you cannot pass a public-key to the signing function.\nType system checks it for
  you.\n\n```haskell\nimport           Web.Libjwt\n\nimport qualified Data.ByteString.Char8
  \        as C8\n\nrsaPub :: RsaPubKey\nrsaPub =\n  let public = C8.pack $ unlines\n
  \       [ \"-----BEGIN PUBLIC KEY-----\"\n        , \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCXp2P+qboao0tjUyU+D\"\n
  \       -- ...\n        , \"-----END PUBLIC KEY-----\"\n        ]\n  in  FromRsaPub
  { rsaPublicKey = public }\n\nrsa512 :: Algorithm RsaPubKey\nrsa512 = RSA512 rsaPub\n```\n\n##
  Usage \n\n### Create a payload\n\nAssuming\n\n```haskell\n{-# LANGUAGE DerivingStrategies
  #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE NoMonomorphismRestriction #-}
  -- just for sweet and short examples\n{-# LANGUAGE OverloadedLabels #-}\n{-# LANGUAGE
  OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards #-}\n\nimport           Web.Libjwt\n\nimport
  \          Data.ByteString                ( ByteString )\nimport           Data.Default\nimport
  \          Data.List.NonEmpty             ( NonEmpty(..) )\nimport           Data.Text
  \                     ( Text )\nimport           Data.Time.Clock                (
  UTCTime )\nimport           Data.UUID                      ( UUID )\nimport           GHC.Generics\n\nimport
  \          Prelude                 hiding ( exp )\n\ndata UserClaims = UserClaims
  { userId :: UUID\n                             , userName :: Text\n                             ,
  isRoot :: Bool\n                             , createdAt :: UTCTime\n                             ,
  accounts :: NonEmpty UUID\n                             }\n  deriving stock (Eq,
  Show, Generic)\n```\n\n* Direct style\n```haskell\n\nmkPayload UserClaims {..} currentTime
  =\n  let now = fromUTC currentTime\n  in  def\n        { iss           = Iss (Just
  \"myApp\")\n        , aud           = Aud [\"https://myApp.com\"]\n        , iat
  \          = Iat (Just now)\n        , exp           = Exp (Just $ now `plusSeconds`
  300)\n        , privateClaims = toPrivateClaims\n                            ( #user_name
  ->> userName\n                            , #is_root ->> isRoot\n                            ,
  #user_id ->> userId\n                            , #created ->> createdAt\n                            ,
  #accounts ->> accounts\n                            )\n        }\n\n{-\nÎ»> :t mkPayload\nmkPayload\n
  \ :: UserClaims\n     -> UTCTime\n     -> Payload\n          '[\"user_name\" ->>
  Text, \"is_root\" ->> Bool, \"user_id\" ->> UUID,\n            \"created\" ->> UTCTime,
  \"accounts\" ->> NonEmpty UUID]\n          'NoNs \n-}\n\n```\n\n* Builder (monoidal)
  style\n```haskell\n\nmkPayload' UserClaims {..} = jwtPayload\n  (withIssuer \"myApp\"
  <> withRecipient \"https://myApp.com\" <> setTtl 300)\n  ( #user_name ->> userName\n
  \ , #is_root ->> isRoot\n  , #user_id ->> userId\n  , #created ->> createdAt\n  ,
  #accounts ->> accounts\n  )\n\n{-\nÎ»> :t mkPayload'\nmkPayload'\n  :: MonadTime
  m =>\n     UserClaims\n     -> m (Payload\n             '[\"user_name\" ->> Text,
  \"is_root\" ->> Bool, \"user_id\" ->> UUID,\n               \"created\" ->> UTCTime,
  \"accounts\" ->> NonEmpty UUID]\n             'NoNs)\n-}\n\n```\n\n* Generic style\n```haskell\n\ninstance
  ToPrivateClaims UserClaims\n\nmkPayload'' = jwtPayload\n  (withIssuer \"myApp\"
  <> withRecipient \"https://myApp.com\" <> setTtl 300)\n  UserClaims { userId    =
  read \"5a7c5cdd-3909-456b-9dd2-6ba84bfeeb25\"\n             , userName  = \"JohnDoe\"\n
  \            , isRoot    = False\n             , createdAt = read \"2020-07-31 11:45:00
  UTC\"\n             , accounts  = read \"0bdf91cc-48bb-47f5-b633-920c34bd2352\"
  :| []\n             }\n\n```\n\n#### Namespaces\n\nTo ensure that private do not
  collide with claims from other resources, it is recommended to give them globally
  unique names . This is often done through _namespacing_, i.e. prefixing the names
  with the URI of a resource you control. In `libjwt-typed` this is handled entirely
  at the type-level, and you don't need to write any code to handle this case. As
  you may have noticed, `Payload` types have a component of the type `NoNs`. It tracks
  the namespace assigned to private claims within this payload. If you change the
  last example to:\n\n```haskell\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE DataKinds
  #-}\n\nmkPayload''' =\n  jwtPayload\n      (withIssuer \"myApp\" <> withRecipient
  \"https://myApp.com\" <> setTtl 300)\n    $ withNs\n        (Ns @\"https://myApp.com\")\n
  \       UserClaims\n          { userId    = read \"5a7c5cdd-3909-456b-9dd2-6ba84bfeeb25\"\n
  \         , userName  = \"JohnDoe\"\n          , isRoot    = False\n          ,
  createdAt = read \"2020-07-31 11:45:00 UTC\"\n          , accounts  = read \"0bdf91cc-48bb-47f5-b633-920c34bd2352\"
  :| []\n          }\n```\n\n, you'll notice that the type has changed to accomodate
  the namespace (becoming `Payload '[...] ('SomeNs \"https://myApp.com\")`). Consequently,
  in the generated token `\"userId\"` becomes `\"https://myApp.com/userId\"` etc\n\n###
  Signing a token\n\n```haskell\n\ntoken :: IO ByteString -- or any other MonadTime
  instance\ntoken = getToken . sign hmac512 <$> mkPayload''\n\n{-\nÎ»> token\n\"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50cyI6WyIwYmRmOTFjYy00OGJiLTQ3ZjUtYjYzMy05MjBjMzRiZDIzNTIiXSwiYXVkIjpbImh0dHBzOi8vbXlBcHAuY29tIl0sImNyZWF0ZWRBdCI6IjIwMjAtMDctMzFUMTE6NDU6MDBaIiwiZXhwIjoxNTk5NDk5MDczLCJpYXQiOjE1OTk0OTg3NzMsImlzUm9vdCI6ZmFsc2UsImlzcyI6Im15QXBwIiwidXNlcklkIjoiNWE3YzVjZGQtMzkwOS00NTZiLTlkZDItNmJhODRiZmVlYjI1IiwidXNlck5hbWUiOiJKb2huRG9lIn0.KH4YSODoTxuNLPYCyz0lmoVDHYJpvL8k6fccFugqs-6VcpctXeR4OYyWOZJDi294r6njCqRP15eqYpwrrzKKrQ\"
  \n-}\n\n```\n\nTip: you can inspect the above token in the [JWT debugger](https://jwt.io)\n\n`sign`
  is a pure function, we only need `Monad` for the `currentTime` used to construct
  the payload.\n\n### Decoding a token\n\n```haskell\n\n{-# LANGUAGE TypeOperators
  #-}\n{-# LANGUAGE DataKinds #-}\n\ntype MyJwt\n  = Jwt\n      '[\"userId\" ->> UUID,
  \"userName\" ->> Text, \"isRoot\" ->> Bool, \"createdAt\" ->> UTCTime, \"accounts\"
  ->> NonEmpty UUID]\n      'NoNs\n\ndecodeDoNotUse :: IO (Decoded MyJwt)\ndecodeDoNotUse
  = decodeByteString hmac512 =<< token\n\n{-\nÎ»> decode_do_not_use\nMkDecoded {getDecoded
  = Jwt {header = Header {alg = HS512 (MkSecret {reveal = \"MjZkMDY2OWFiZmRjYTk5YjczZWFiZjYzMmRjMzU5NDYyMjMxODBjMTg3ZmY5OTZjM2NhM2NhN2MxYzFiNDNlYjc4NTE1MjQxZGI0OWM1ZWI2ZDUyZmMzZDlhMmFiNjc5OWJlZTUxNjE2ZDRlYTNkYjU5Y2IwMDZhYWY1MjY1OTQgIC0K\"}),
  typ = JWT}, payload = ClaimsSet {iss = Iss (Just \"myApp\"), sub = Sub Nothing,
  aud = Aud [\"https://myApp.com\"], exp = Exp (Just (NumericDate {secondsSinceEpoch
  = 1599501809})), nbf = Nbf Nothing, iat = Iat (Just (NumericDate {secondsSinceEpoch
  = 1599501509})), jti = Jti Nothing, privateClaims = (#userId ->> 5a7c5cdd-3909-456b-9dd2-6ba84bfeeb25,
  #userName ->> \"JohnDoe\", #isRoot ->> False, #createdAt ->> 2020-07-31 11:45:00
  UTC, #accounts ->> (0bdf91cc-48bb-47f5-b633-920c34bd2352 :| []))}}}\n-}\n\n```\n\nWhile
  the structure of the JWT can be inferred when signing - this obviously is not the
  case when decoding. `decodeByteString` can't possibly know what you are going to
  extract from the token, so you need to give it the expected type. It can simply
  be _type-alias_ like in the example above. Based on this, the correct decoder is
  dervied. If something goes wrong an exception will be thrown, which you can catch
  and inspect. \n\nThe result of this function is an instance of `Decoded` type. The
  JWT stucture wrapped in this type is guaranteed to be correct representation of
  the requested type with its signature checked according to your algorithm and secret/key.\n\n**IMPORTANT:
  Your program should always require an instance of the `Validated` type (see below).
  `Decoded` only means that the signature and the representation are correct, but
  does not verify that the token has not expired or is not intended for you etc.**\n\nTo
  return decoded **and** validated structure it is better to do\n\n```haskell\n\ndecodeAndValidate
  :: IO (ValidationNEL ValidationFailure (Validated MyJwt))\ndecodeAndValidate = jwtFromByteString
  settings mempty hmac512 =<< token\n  where settings = Settings { leeway = 5, appName
  = Just \"https://myApp.com\" }\n\n{-\nÎ»> decodeAndValidate \nSuccess (MkValid {getValid
  = Jwt {header = Header {alg = HS512 (MkSecret {reveal = \"MjZkMDY2OWFiZmRjYTk5YjczZWFiZjYzMmRjMzU5NDYyMjMxODBjMTg3ZmY5OTZjM2NhM2NhN2MxYzFiNDNlYjc4NTE1MjQxZGI0OWM1ZWI2ZDUyZmMzZDlhMmFiNjc5OWJlZTUxNjE2ZDRlYTNkYjU5Y2IwMDZhYWY1MjY1OTQgIC0K\"}),
  typ = JWT}, payload = ClaimsSet {iss = Iss (Just \"myApp\"), sub = Sub Nothing,
  aud = Aud [\"https://myApp.com\"], exp = Exp (Just (NumericDate {secondsSinceEpoch
  = 1599504161})), nbf = Nbf Nothing, iat = Iat (Just (NumericDate {secondsSinceEpoch
  = 1599503861})), jti = Jti Nothing, privateClaims = (#userId ->> 5a7c5cdd-3909-456b-9dd2-6ba84bfeeb25,
  #userName ->> \"JohnDoe\", #isRoot ->> False, #createdAt ->> 2020-07-31 11:45:00
  UTC, #accounts ->> (0bdf91cc-48bb-47f5-b633-920c34bd2352 :| []))}}})\n -}\n\n```\n\nJWT
  validation is a monoid. You can append additional validations based on public and
  private claims, for example `checkIssuer \"myApp\" <> checkClaim (== True) #isRoot`.
  You will certainly like the fact that private claims' types are fullly known, so
  you can operate on type-safe Haskell values (`checkClaim ( > 0) #isRoot` will not
  compile). The `mempty` validation (the default validation) checks (according to
  [the rules in the RFC](https://tools.ietf.org/html/rfc7519#section-4.1) ) whether:\n*
  token has not expired (`exp` claim),\n* token is ready to use (`nbf` claim),\n*
  token is intended for you (`aud` claim)\n  \nTime-based validations (all predefined
  validations for `exp`, `nbf` and `iat` claims) allow for some small leeway (e.g.
  `leeway = 5` means that the token expired less than 5 seconds ago is still considered
  to be valid), which can be set in `ValidationSettings`.\n\nFull example with error-handling
  might look like:\n```haskell\n{-# LANGUAGE ScopedTypeVariables #-}\n\nimport           Control.Arrow
  \                 ( left )\nimport           Control.Exception              ( catch\n
  \                                               , displayException\n                                                )\nimport
  \          Data.Either.Validation         ( validationToEither )\n\ndecodeAndValidateFull
  :: IO (Either String UserClaims)\ndecodeAndValidateFull =\n  (   left ((\"Token
  not valid: \" ++) . show)\n    .   fmap toUserClaims\n    .   validationToEither\n
  \   <$> decodeAndValidate\n    )\n    `catch` onError\n where\n  toUserClaims =
  fromPrivateClaims . privateClaims . payload . getValid\n  onError (e :: SomeDecodeException)
  =\n    return $ Left $ \"Cannot decode token \" ++ displayException e\n\n{-\nÎ»>
  decodeAndValidateFull \nRight (UserClaims {userId = 5a7c5cdd-3909-456b-9dd2-6ba84bfeeb25,
  userName = \"JohnDoe\", isRoot = False, createdAt = 2020-07-31 11:45:00 UTC, accounts
  = 0bdf91cc-48bb-47f5-b633-920c34bd2352 :| []})\n-}\n\n```\n\n## Supported types\n\nThe
  following types are currently supported:\n  * ByteString\n  * String\n  * Text\n
  \ * Libjwt.ASCII (for marking strings as ASCII only)\n  * Libjwt.JsonByteString
  (for working with pure JSON)\n  * Bool\n  * Libjwt.NumericDate (POSIX timestamps)\n
  \ * Libjwt.Flag (for simple sum types)\n  * Int\n  * UUID\n  * UTCTime, ZonedTime,
  LocalTime, Day\n  * Maybes of the above types\n  * lists of the above types and
  lists of tuples created from them\n  * NonEmpty lists of the above types\n  \n###
  Flags\n\nFlags provide a way to automatically encode and decode simple sum types.\n\n```haskell\ndata
  Scope = Login | Extended | UserRead | UserWrite | AccountRead | AccountWrite\n  deriving
  stock (Show, Eq, Generic)\n\ninstance AFlag Scope\n```\n\nNow, you can use `Flag
  Scope` in JWT claims, e.g.\n\n```haskell\nmkPayload' UserClaims {..} = jwtPayload\n
  \ (withIssuer \"myApp\" <> withRecipient \"https://myApp.com\" <> setTtl 300)\n
  \ ( #user_name ->> userName\n  , #is_root ->> isRoot\n  , #user_id ->> userId\n
  \ , #created ->> createdAt\n  , #accounts ->> accounts\n  , #scope ->> Flag Login\n
  \ )\n```\n\n## Benchmarks\n\nFull result sets (graphical HTML reports) are available
  [here](https://github.com/marcin-rzeznicki/libjwt-typed/tree/master/bench/results).
  \n\nCode can be found [here](https://github.com/marcin-rzeznicki/libjwt-typed/tree/master/bench).
  Benchmarking is undoubtedly hard - if you think something can be improved, please
  make a PR.\n\nThe Benchmarks compare `libjwt-typed` to `jose` in different hopefully
  real-world use cases. All the results below were obtained on a 6-Core Intel Core
  i7-9750H; 32 GB RAM; GHC 8.10.1 (compiled with -O2; RTS options: -N -ki2k -A512m
  -n32m); libjwt built with GnuTLS using GCC 10.2.0\n\n### Signing\n\nMeasuring going
  from data to a fully signed, ready to send over-the-wire token\n\nWhen signing an
  \"empty\" token using `SHA-512` i.e. something like\n```json\n{\n  \"iat\": 1599531131,\n
  \ \"nbf\": 1599531131,\n  \"exp\": 1599531431,\n  \"sub\": \"c5caab61-3ee4-49ab-86e6-b6ac292901f7\",\n
  \ \"aud\": [\"https://example.com\"],\n  \"iss\": \"benchmarks\"\n}\n```\n\n| what
  \ |          libjwt          |         jose         | speedup |\n| :---: | :----------------------:
  | :------------------: | :-----: |\n| mean  | **9.05 Î¼s**   (Â± 278 ns) | 166 Î¼s
  \  (Â± 5.74 Î¼s) |   18x   |\n\nFor more complex tokens i.e. something like\n```json\n{\n
  \ \"iat\": 1599531131,\n  \"nbf\": 1599531131,\n  \"exp\": 1599531431,\n  \"sub\":
  \"c5caab61-3ee4-49ab-86e6-b6ac292901f7\",\n  \"aud\": [\"https://example.com\"],\n
  \ \"iss\": \"benchmarks\",\n  \"user_name\": \"E\\\\129057~[lzR64FhhdhrlUMH0A\",\n
  \ \"is_root\": true,\n  \"client_id\": \"b659f842-5d78-4da1-9891-8aaa4ac3983b\",\n
  \ \"created\": \"2020-09-08 02:12:11.099106573 UTC\",\n  \"accounts\": [\n    [\"8aa634fb-8cc4-44cb-84ec-9eb6c78834e1\",
  \"k\"],\n    [\"da8b0ff6-a32c-43d0-bd89-1a63273945e0\", \")`\"],\n    [\"219f30da-c474-4f23-af6a-495b1034e02f\",
  \"J\"]\n  ],\n  \"emails\": [\"0g(B@example.com\", \"eo@example.com\"]\n}\n```\n\n|
  what  |          libjwt           |         jose         | speedup |\n| :---: |
  :-----------------------: | :------------------: | :-----: |\n| mean  | **35.4 Î¼s**
  \  (Â± 89.9 ns) | 525 Î¼s   (Â± 9.94 Î¼s) |   14x   |\n\n\nWhen signing using elliptic-curve
  cryptography: `ECDSA256` \n\n|      what      |          libjwt          |         jose
  \         | speedup |\n| :------------: | :----------------------: | :-------------------:
  | :-----: |\n| mean (simple)  | **77.3 Î¼s**   (Â± 833 ns) | 1.18 ms   (Â± 21.6 Î¼s)
  |   15x   |\n| mean (complex) | **112 Î¼s**   (Â± 1.17 Î¼s) | 1.54 ms   (Â± 22.0 Î¼s)
  |   13x   |\n\nand `ECDSA512`\n\n|      what      |          libjwt          |         jose
  \         | speedup |\n| :------------: | :----------------------: | :-------------------:
  | :-----: |\n| mean (simple)  | **270 Î¼s**   (Â± 4.74 Î¼s) | 3.94 ms   (Â± 40.7 Î¼s)
  |   14x   |\n| mean (complex) | **305 Î¼s**   (Â± 4.19 Î¼s) | 4.31 ms   (Â± 55.5 Î¼s)
  |   14x   |\n\nAnd finally using the `RSA (RSASSA-PKCS1-v1_5 using SHA-512)`\n\n|
  \     what      |        libjwt         |           jose            | speedup |\n|
  :------------: | :-------------------: | :-----------------------: | :-----: |\n|
  mean (simple)  | 1.40 ms   (Â± 13.2 Î¼s) | **1.03 ms**   (Â± 11.9 Î¼s) |  0.7x   |\n|
  mean (complex) | 1.44 ms   (Â± 15.0 Î¼s) | **1.37 ms**   (Â± 15.8 Î¼s) |  0.9x   |\n\nThis
  is the only time `jose` is faster (congrats!). `libjwt-typed` is slower probably
  because it doesn't store private key parameters. This is something thaht needs to
  be improved.\n\n### Decoding\n\nHere going from a `ByteString` token back to the
  data is measured. When I say \"to the data\" I mean user-types, not `aeson` values.
  This is where `libjwt-typed` has considerable leverage as it doesn't use any intermediate
  form, but I think it is fair as users will eventually have to parse data anyway.\n\nUsing
  `HMAC512`\n\n|      what      |          libjwt          |         jose         |
  speedup |\n| :------------: | :----------------------: | :------------------: |
  :-----: |\n| mean (simple)  | **9.29 Î¼s**   (Â± 143 ns) | 128 Î¼s   (Â± 3.40 Î¼s) |
  \  13x   |\n| mean (complex) | **60.0 Î¼s**   (Â± 691 ns) | 390 Î¼s   (Â± 6.12 Î¼s) |
  \  6x    |\n\nUsing `ECDSA256`\n\n|      what      |          libjwt          |
  \        jose          | speedup |\n| :------------: | :----------------------:
  | :-------------------: | :-----: |\n| mean (simple)  | **189 Î¼s**   (Â± 1.49 Î¼s)
  | 1.26 ms   (Â± 14.4 Î¼s) |   6x    |\n| mean (complex) | **244 Î¼s**   (Â± 3.14 Î¼s)
  | 1.54 ms   (Â± 15.4 Î¼s) |   6x    |\n\nUsing `ECDSA512`\n\n|      what      |          libjwt
  \         |         jose          | speedup |\n| :------------: | :----------------------:
  | :-------------------: | :-----: |\n| mean (simple)  | **749 Î¼s**   (Â± 8.66 Î¼s)
  | 4.45 ms   (Â± 75.4 Î¼s) |   5x    |\n| mean (complex) | **804 Î¼s**   (Â± 9.67 Î¼s)
  | 4.71 ms   (Â± 53.8 Î¼s) |   5x    |\n\nAnd finally `RSA`\n\n|      what      |          libjwt
  \         |         jose         | speedup |\n| :------------: | :----------------------:
  | :------------------: | :-----: |\n| mean (simple)  | **39.4 Î¼s**   (Â± 618 ns)
  | 138 Î¼s   (Â± 3.23 Î¼s) |   3x    |\n| mean (complex) | **93.5 Î¼s**   (Â± 777 ns)
  | 399 Î¼s   (Â± 6.33 Î¼s) |   4x    |\n\n## Not implemented\n\n* JWT header can only
  contain `alg` and `typ` (everything else is ignored). This decision is partly because
  of the belief that you rarely need to complicate the header, and partly because
  of the limiation of `libjwt` which prevents the header from being checked before
  decoding (this is done in one step). For this reason, things like selecting keys
  based on the header cannot be easily implemented.\n\n## Idea\n\nThe idea for this
  lib comes from my talk [\"Building a web library using super hard Haskell\"](https://www.youtube.com/watch?v=icgl9FuPxKA)
  at the Haskell Love Conference"
description-type: markdown
hash: b7762f6d6c380c0fcddaff119714dcb885e4c57d21ecdf0700e75e694e37c312
homepage: https://github.com/marcin-rzeznicki/libjwt-typed
latest: '0.2'
license-name: MPL-2.0
maintainer: Marcin RzeÅºnicki <marcin.rzeznicki@gmail.com>
synopsis: A Haskell implementation of JSON Web Token (JWT)
test-bench-deps:
  QuickCheck: '>=2.13.2 && <2.15'
  aeson: '>=0'
  base: '>=4.13.0.0 && <4.15'
  bytestring: '>=0.10.10.0 && <0.11'
  containers: '>=0'
  criterion: '>=0'
  data-default: '>=0.2 && <1.0'
  deepseq: '>=1.4.4.0'
  either: '>=5.0.1.1 && <5.1'
  exceptions: ==0.10.4
  extra: '>=1.7 && <1.8'
  hspec: '>=2.7 && <2.8'
  hspec-core: '>=2.7 && <2.8'
  jose: '>=0.8.3'
  jwt: '>=0.10.0'
  lens: '>=0'
  libjwt-typed: '>=0'
  monad-time: '>=0.3 && <0.4'
  quickcheck-instances: '>=0.3.14'
  text: '>=1.2.3.2 && <1.2.5'
  time: '>=1.9 && <1.10'
  transformers: '>=0.5.6.2 && <0.6'
  unordered-containers: '>=0'
  uuid: '>=1.3'
