homepage: https://github.com/tweag/linear-base#README
changelog-type: markdown
hash: 6cdb3bd2c7fbdcd06f949e1b34cb3f8bb3b8290c21ff81a71938804ad874b284
test-bench-deps:
  MonadRandom: -any
  base: -any
  tasty-hedgehog: '>=1.2'
  storable-tuple: -any
  linear-base: -any
  unordered-containers: -any
  text: -any
  hedgehog: -any
  random-shuffle: -any
  gauge: -any
  containers: -any
  hashtables: -any
  linear-generics: -any
  inspection-testing: -any
  mmorph: -any
  hashable: -any
  random: -any
  tasty: -any
  deepseq: -any
  tasty-inspection-testing: -any
  vector: -any
maintainer: arnaud.spiwack@tweag.io
synopsis: Standard library for linear types.
changelog: "# Change Log\n\n## [v0.3.0](https://github.com/tweag/linear-base/tree/v0.3.0)
  (2022-10-26)\n\n[Full Changelog](https://github.com/tweag/linear-base/compare/v0.2.0...v0.3.0)\n\n###
  Headline changes\n\n- Support GHC 9.4 in addition to GHC 9.2 and GHC 9.0 (GHC 9.0
  is no longer tested though) [\\#427](https://github.com/tweag/linear-base/pull/427)
  ([matthew-healy](https://github.com/matthew-healy))\n  - Update `shell.nix` to enable
  building with GHC 9.4.1 [\\#429](https://github.com/tweag/linear-base/pull/429)
  ([matthew-healy](https://github.com/matthew-healy))\n- Improvement of the resource-aware
  `IO` (`RIO`) monad's interface\n  - Add some `Handle` operations to `RIO` [\\#425](https://github.com/tweag/linear-base/pull/425)
  ([endgame](https://github.com/endgame))\n  - The `Handle` type is now transparent,
  to make extensions of the API possible [\\#428](https://github.com/tweag/linear-base/pull/428)
  ([aspiwack](https://github.com/aspiwack))\n\n### Miscellaneous\n\n- `Monoid (Maybe
  a)` requires only `Semigroup a`, not `Monoid a` [\\#409](https://github.com/tweag/linear-base/pull/409)
  ([treeowl](https://github.com/treeowl))\n- Add `evalState(T)` [\\#411](https://github.com/tweag/linear-base/pull/411)
  ([andreasabel](https://github.com/andreasabel))\n- Add `Movable` instances for several
  primitive types, as well as (non-linear) `Applicative`, `Foldable`, `Traversable`
  instances for `V`. [\\#416](https://github.com/tweag/linear-base/pull/416) ([sellout](https://github.com/sellout))\n-
  Fix typo in comment: resrouce -\\> resource [\\#421](https://github.com/tweag/linear-base/pull/421)
  ([undergroundquizscene](https://github.com/undergroundquizscene))\n- Fix haddock
  hyperlink reference \\(minor typo\\) [\\#420](https://github.com/tweag/linear-base/pull/420)
  ([undergroundquizscene](https://github.com/undergroundquizscene))\n- Fix haddock
  links in `Data.Replicator.Linear` [\\#423](https://github.com/tweag/linear-base/pull/423)
  ([undergroundquizscene](https://github.com/undergroundquizscene))\n- Add `CONTRIBUTING.md`
  [\\#426](https://github.com/tweag/linear-base/pull/426) ([tbagrel1](https://github.com/tbagrel1))\n\n###
  Internal\n\n- Upgrade GHC to 9.2 [\\#414](https://github.com/tweag/linear-base/pull/414)
  ([aspiwack](https://github.com/aspiwack))\n  - Don't use deprecated `testProperty`
  from tasty-hedgehog [\\#415](https://github.com/tweag/linear-base/pull/415) ([aspiwack](https://github.com/aspiwack))\n\n##
  [v0.2.0](https://github.com/tweag/linear-base/tree/v0.2.0) - 2022-03-25\n\n[Full
  Changelog](https://github.com/tweag/linear-base/compare/v0.1.0...v0.2.0)\n\n###
  Breaking changes\n\n- Remove `Prelude.Linear.asTypeOf` [\\#397](https://github.com/tweag/linear-base/pull/397)
  ([tbagrel1](https://github.com/tbagrel1))\n- Add (and use) linear generics for many
  classes [\\#394](https://github.com/tweag/linear-base/pull/394) ([treeowl](https://github.com/treeowl))\n
  \ - `Control.Functor.Linear.Functor`, `Data.Functor.Linear.{Functor,Applicative}`
  can now be derived through `Generically1`\n  - `Data.Functor.Linear.Traversable`
  cannot be derived directly, but one can get `genericTraverse` for a `Generic1` type
  and then set `traverse = genericTraverse`\n  - `Data.Unrestricted.Linear.{Consumable,Dupable,Movable}`
  can be derived through `Generically`\n- Rework `Data.Monoid.Linear` module (affects
  linear `Semigroup` and `Monoid`) [\\#314](https://github.com/tweag/linear-base/pull/314)
  ([sjoerdvisscher](https://github.com/sjoerdvisscher)), [\\#381](https://github.com/tweag/linear-base/pull/381)
  ([tbagrel1](https://github.com/tbagrel1))\n  - **Remove superclass constraint**
  on `Prelude.{Semigroup,Monoid}` for `Data.Monoid.Linear.{Semigroup,Monoid}`. `Data.Monoid.Linear.Monoid`
  instances now have to define `mempty`\n  - Add many missing instances of `Data.Monoid.Linear.{Semigroup,Monoid}`\n
  \ - Deprecate `Data.Monoid.Linear.{Adding,Multiplying,getAdded,getMultiplied}` in
  favor of `Data.Semigroup.{Sum,Product}` (reexported under `Data.Monoid.Linear`)
  which now have linear `Semigroup` and `Monoid` instance. `Sum` and `Product` inner
  values can be extracted linearly with pattern-matching\n  - **`Data.Semigroup` is
  no longer reexported as a whole under `Data.Monoid.Linear`**. Instead, only newtypes
  with a linear `Semigroup` instance are reexported\n- Add missing fixity declarations
  for every operator of `linear-base` [\\#386](https://github.com/tweag/linear-base/pull/386),
  ([tbagrel1](https://github.com/tbagrel1))\n  - **Unchanged** (already present):<br/>`infixr
  0 $`, `infixl 1 &`, `infixr 2 ||`, `infixr 3 &&`,<br/> `infix 4 ==, /=, <=, <, >,
  >=`, `infixr 5 :>`\n  - Add: ```infixr 0 `lseq`, `seq`, $!```\n  - Add: `infixl
  1 <&>, >>=, >>, &`\n  - Add: `infixr 3 ***`\n  - Add: ```infix 4 `compare`, `elem`
  ```\n  - Add: `infixl 4 <$>, <$, <*>, <*`\n  - Add: `infixr 5 ++`\n  - Add: `infixr
  6 <>`\n  - Add: `infixl 6 +, -`\n  - Add: `infixl 7 *`\n  - Add: `infixr 9 #., .>,
  .`\n  - **Previously missing fixity declarations defaulted to `infixl 9`, so some
  code might subtly break when updating to v0.2.0**\n- Improve consistency of module
  naming [\\#383](https://github.com/tweag/linear-base/pull/383) ([tbagrel1](https://github.com/tbagrel1))\n
  \ - **`System.IO.Resource` -> `System.IO.Resource.Linear`**\n- Rework `Data.V.Linear`
  API [\\#360](https://github.com/tweag/linear-base/pull/360) ([tbagrel1](https://github.com/tbagrel1))\n
  \ - `Data.Functor.Linear.Applicative` instance\n  - `empty :: forall a. V 0 a`\n
  \ - `consume :: V 0 a %1 -> ()`\n  - `cons :: forall n a. a %1 -> V (n - 1) a %1
  -> V n a`\n  - `uncons# :: 1 <= n => V n a %1 -> (# a, V (n - 1) a #)`\n  - `uncons
  :: 1 <= n => V n a %1 -> (a, V (n - 1) a)`\n  - `elim :: forall (n :: Nat) a b f.
  IsFunN a b f => f %1 -> V n a %1 -> b`\n  - `make :: forall (n :: Nat) a f. IsFunN
  a (V n a) f => f`\n  - `fromReplicator :: forall n a. KnownNat n => Replicator a
  %1 -> V n a`\n  - `theLength :: forall n. KnownNat n => Prelude.Int`\n  - **`dupV`
  is now part of `Data.V.Linear`:**<br/>\n    `dupV :: forall n a. (KnownNat n, Dupable
  a) => a %1 -> V n a`\n- Replace `dupV` in the minimal definition of `Data.Unrestricted.Linear.Dupable`
  with `dupR :: a %1 -> Replicator a` [\\#360](https://github.com/tweag/linear-base/pull/360)
  ([tbagrel1](https://github.com/tbagrel1)) [\\#365](https://github.com/tweag/linear-base/pull/365)
  ([facundominguez](https://github.com/facundominguez))\n  - Introduce a new data
  type `Data.Replicator.Linear.Replicator`, which represents an infinite linear stream
  producing values of type `a`, with a stream-like API and a `Data.Functor.Linear.Applicative`
  instance\n  - `Data.Unrestricted.Linear.Dupable` no longer depends on `Data.V.Linear`\n
  \ - Add `dup3`, `dup4`, `dup5`, `dup6`, `dup7`\n- Polymorphise the type of some
  `Prelude.Linear` functions in levity and multiplicity [\\#353](https://github.com/tweag/linear-base/pull/353)
  ([treeowl](https://github.com/treeowl))\n  - `($) :: forall {rep} a (b :: TYPE rep)
  p q. (a %p-> b) %q-> a %p-> b`\n  - `(&) :: forall {rep} a (b :: TYPE rep) p q.
  a %p-> (a %p-> b) %q-> b`\n  - `($!) :: forall {rep} a (b :: TYPE rep) p q. (a %p->
  b) %q-> a %p-> b`\n  - `(.) :: forall {rep} b (c :: TYPE rep) a q m n. (b %1-> c)
  %q-> (a %1-> b) %m-> a %n-> c`\n  - `forget :: forall {rep} a (b :: TYPE rep). (a
  %1-> b) %1-> a -> b`\n- Multiplicity-polymorphise the type of some `Prelude.Linear`
  functions [\\#319](https://github.com/tweag/linear-base/pull/319) ([aspiwack](https://github.com/aspiwack))\n
  \ - `id :: a %q-> a`\n  - `const :: a %q-> b -> a`\n  - `asTypeOf :: a %q-> a ->
  a`\n  - `seq :: a -> b %q-> b`\n  - `curry :: ((a, b) %p-> c) %q-> a %p-> b %p->
  c`\n  - `uncurry :: (a %p-> b %p-> c) %q-> (a, b) %p-> c`\n  - `runIdentity' ::
  Identity a %p-> a`\n- Remove `LinearArrow` usage in `Control.Optics.Linear` and
  use `FUN 'One` instead [\\#308](https://github.com/tweag/linear-base/pull/308) ([sjoerdvisscher](https://github.com/sjoerdvisscher))\n
  \ - This change add a `Data.Profunctor.Linear.Profunctor` instance to `FUN 'One`\n-
  Add `.Linear.Internal` modules (and only export parts of them in publicly-exposed
  `.Linear` modules) [\\#306](https://github.com/tweag/linear-base/pull/306) ([ekmett](https://github.com/ekmett))\n
  \ - `Data.Array.Destination[.Internal]`\n  - `Data.Array.Mutable.Linear[.Internal]`\n
  \ - `Data.HashMap.Mutable.Linear[.Internal]`\n  - `Data.Set.Mutable.Linear[.Internal]`\n
  \ - `Data.Vector.Mutable.Linear[.Internal]`\n  - `Foreign.Marshal.Pure[.Internal]`\n
  \ - `System.IO.Resource.Linear.[.Internal]`\n  - This principle has been applied
  for newly-created modules in the subsequent PRs\n\n### New additions\n\n- Add `Data.Arity.Linear`
  module containing type-level helpers to deal with n-ary linear functions and type-level
  structural integers [\\#390](https://github.com/tweag/linear-base/pull/390) ([aspiwack](https://github.com/aspiwack)),
  [\\#391](https://github.com/tweag/linear-base/pull/391) ([tbagrel1](https://github.com/tbagrel1))\n-
  Add `void` function to consume `Control.Functor.Linear.Functor` inner value [\\#387](https://github.com/tweag/linear-base/pull/387)
  ([tbagrel1](https://github.com/tbagrel1))\n- Add inspection tests to check inlining
  of `Data.Replicator.Linear.elim` and `Data.V.Linear.{make,elim}` [\\#367](https://github.com/tweag/linear-base/pull/367)
  ([tbagrel1](https://github.com/tbagrel1))\n- Add `genericTraverse` to `Data.Functor.Linear`
  for `Generics.Linear.Generic1` types [\\#366](https://github.com/tweag/linear-base/pull/366)
  ([tbagrel1](https://github.com/tbagrel1)), [\\#384](https://github.com/tweag/linear-base/pull/384)
  ([aspiwack](https://github.com/aspiwack)), [\\#385](https://github.com/tweag/linear-base/pull/385)
  ([treeowl](https://github.com/treeowl)) \n- Add `Unsafe.toLinearN` (and narrow the
  scope of some coercions in the module internals) [\\#346](https://github.com/tweag/linear-base/pull/346)
  ([treeowl](https://github.com/treeowl))\n- Add newtype `Data.Unrestricted.Linear.AsMovable`
  to derive `Consumable` and `Dupable` from `Movable` [\\#357](https://github.com/tweag/linear-base/pull/357)
  ([tbagrel1](https://github.com/tbagrel1))\n- Add `Data.Unrestricted.Linear.{Consumable,Dupable,Moveable}`
  instances for all Word and Int types [\\#352](https://github.com/tweag/linear-base/pull/352)
  ([googleson78](https://github.com/googleson78))\n- Add benchmarks for `Data.HashMap.Linear`
  [\\#338](https://github.com/tweag/linear-base/pull/338) ([utdemir](https://github.com/utdemir))\n-
  Add benchmarks for `Data.Array.Mutable.Linear` [\\#331](https://github.com/tweag/linear-base/pull/331)
  ([utdemir](https://github.com/utdemir))\n- Add `Data.Unrestricted.Linear.{Consumable,Dupable}`
  instances to `Data.V.Linear.V` [\\#324](https://github.com/tweag/linear-base/pull/324)
  ([aspiwack](https://github.com/aspiwack))\n- Add `Data.Unrestricted.Linear.UrT`,
  the unrestricted monad transformer [\\#304](https://github.com/tweag/linear-base/pull/304)
  ([sjoerdvisscher](https://github.com/sjoerdvisscher))\n\n### Code improvements\n\n-
  Add robustness improvements to `Data.Replicator.Linear.elim` and `Data.V.Linear.{make,elim}`
  [\\#364](https://github.com/tweag/linear-base/pull/364) ([tbagrel1](https://github.com/tbagrel1)),
  [\\#382](https://github.com/tweag/linear-base/pull/382) ([tbagrel1](https://github.com/tbagrel1)),
  [\\#390](https://github.com/tweag/linear-base/pull/390) ([aspiwack](https://github.com/aspiwack)),
  [\\#391](https://github.com/tweag/linear-base/pull/391) ([tbagrel1](https://github.com/tbagrel1))\n-
  Add various optimisations for `Data.HashMap.Linear` [\\#337](https://github.com/tweag/linear-base/pull/337)
  ([utdemir](https://github.com/utdemir))\n- Improve `Data.Array.Mutable.Unlifted.Linear.map`
  performance [\\#334](https://github.com/tweag/linear-base/pull/334) ([utdemir](https://github.com/utdemir))\n-
  Remove one `unsafeCoerce` use from `Unsafe.coerce` [\\#330](https://github.com/tweag/linear-base/pull/330)
  ([utdemir](https://github.com/utdemir))\n- Improve `Prelude.Linear.seq` performance
  [\\#329](https://github.com/tweag/linear-base/pull/329) ([utdemir](https://github.com/utdemir))\n-
  Use safer `Vector.fromArray` in `Data.Array.Mutable.Linear` internals [\\#327](https://github.com/tweag/linear-base/pull/327)
  ([utdemir](https://github.com/utdemir))\n- Remove some incomplete pattern matches
  in `Data.List.Linear.{scanr,scanr1}` [\\#299](https://github.com/tweag/linear-base/pull/299)
  ([utdemir](https://github.com/utdemir))\n\n### CI/Tooling improvements\n\n- Move
  CI tests from the `cabal` job to the `stack` job [\\#398](https://github.com/tweag/linear-base/pull/398)
  ([tbagrel1](https://github.com/tbagrel1))\n- Set warnings for `ghcide` in the cabal
  file [\\#378](https://github.com/tweag/linear-base/pull/378) ([aspiwack](https://github.com/aspiwack))\n-
  Disable all `hlint` hints except those related to pragmas [\\#362](https://github.com/tweag/linear-base/pull/362)
  ([tbagrel1](https://github.com/tbagrel1))\n- Enable doctesting through `cabal-docspec`
  in the CI [\\#361](https://github.com/tweag/linear-base/pull/361) ([andreabedini](https://github.com/andreabedini))\n-
  Format the codebase with [`ormolu`](https://github.com/tweag/ormolu) and add an
  `ormolu` check to the CI [\\#355](https://github.com/tweag/linear-base/pull/355)
  ([tbagrel1](https://github.com/tbagrel1)), [\\#358](https://github.com/tweag/linear-base/pull/358)
  ([tbagrel1](https://github.com/tbagrel1))\n- CI and `shell.nix` overhaul [\\#322](https://github.com/tweag/linear-base/pull/322)
  ([aspiwack](https://github.com/aspiwack)), [\\#323](https://github.com/tweag/linear-base/pull/323)
  ([aspiwack](https://github.com/aspiwack)), [\\#325](https://github.com/tweag/linear-base/pull/325)
  ([utdemir](https://github.com/utdemir)), [\\#332](https://github.com/tweag/linear-base/pull/332)
  ([utdemir](https://github.com/utdemir)), [\\#348](https://github.com/tweag/linear-base/pull/348)
  ([aspiwack](https://github.com/aspiwack)), [\\#355](https://github.com/tweag/linear-base/pull/355)
  ([tbagrel1](https://github.com/tbagrel1)), [\\#359](https://github.com/tweag/linear-base/pull/359)
  ([tbagrel1](https://github.com/tbagrel1))\n  - Bump `nixpkgs` and `stackage` pinned
  versions to recent `unstable`/`nightly` ones\n  - Move CI from *Buildkite* to *Github
  Action*\n  - Automatically run the CI on pull requests\n  - Add `stack`/Nix integration
  when `stack` is provided by `nix-shell`/`shell.nix` (the project still builds with
  a globally installed `stack`)\n- Force resolving test dependencies on `cabal` [\\#342](https://github.com/tweag/linear-base/pull/342)
  ([utdemir](https://github.com/utdemir))\n- Remove `cabal-docspec` reference from
  `Setup.hs` [\\#335](https://github.com/tweag/linear-base/pull/335) ([facundominguez](https://github.com/facundominguez))\n-
  Start using upstream `nixpkgs` (instead of our own fork) [\\#302](https://github.com/tweag/linear-base/pull/302)
  ([utdemir](https://github.com/utdemir))\n\n### Documentation improvements\n\n- Change
  relative links for absolute ones in the README [\\#401](https://github.com/tweag/linear-base/pull/401)
  ([tbagrel1](https://github.com/tbagrel1))\n- Add comparison table between `Prelude`
  and `Prelude.Linear` classes [\\#368](https://github.com/tweag/linear-base/pull/368)
  ([tbagrel1](https://github.com/tbagrel1))\n- Add Hackage and Stackage badges [\\#336](https://github.com/tweag/linear-base/pull/336)
  ([utdemir](https://github.com/utdemir))\n- Hide internal modules from `haddock`
  documentation [\\#326](https://github.com/tweag/linear-base/pull/326) ([utdemir](https://github.com/utdemir)),
  [\\#363](https://github.com/tweag/linear-base/pull/363) ([tbagrel1](https://github.com/tbagrel1))\n-
  Add a note that GHC 9.2 fixes linear `case` in the user guide [\\#320](https://github.com/tweag/linear-base/pull/320)
  ([monoidal](https://github.com/monoidal))\n- Replace `#->` with `%1 ->` in the documentation
  [\\#315](https://github.com/tweag/linear-base/pull/315) ([sjoerdvisscher](https://github.com/sjoerdvisscher))\n-
  Fix rendering in `Data.Unrestricted.Linear.Ur` documentation [\\#303](https://github.com/tweag/linear-base/pull/303)
  ([sjoerdvisscher](https://github.com/sjoerdvisscher))\n- Fix a typo in `Data.Array.Mutable.Linear.unsafeWrite`
  documentation [\\#301](https://github.com/tweag/linear-base/pull/301) ([daig](https://github.com/daig))\n-
  Add a list of introduction talks about linear types in the README [\\#300](https://github.com/tweag/linear-base/pull/300)
  ([aspiwack](https://github.com/aspiwack))\n- Improve developer documentation in
  `Data.Array.Polarized.Push` [\\#294](https://github.com/tweag/linear-base/pull/294)
  ([Divesh-Otwani](https://github.com/Divesh-Otwani))\n\n\n## [v0.1.0](https://github.com/tweag/linear-base/tree/v0.1.0)
  - 2021-02-09\n\n* Initial release\n"
basic-deps:
  base: '>=4.15 && <5'
  storable-tuple: -any
  text: -any
  containers: -any
  ghc-prim: -any
  linear-generics: '>=0.2'
  hashable: -any
  transformers: -any
  primitive: -any
  vector: '>=0.12.2'
all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
author: Tweag
latest: 0.3.0
description-type: markdown
description: |
  # Linear base

  [![License MIT](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://github.com/tweag/linear-base/blob/master/LICENSE)
  [![Build status](https://badge.buildkite.com/5b60ab93dadba234a95e04e6568985918552dcc9e7685ede0d.svg?branch=master)](https://buildkite.com/tweag-1/linear-base)
  [![Hackage](https://img.shields.io/hackage/v/linear-base.svg?style=flat&color=brightgreen)][hackage-pkg]
  [![Stackage](https://stackage.org/package/linear-base/badge/nightly)][stackage-pkg]

  Linear base is a standard library for developing applications with linear
  types. It is named `linear-base` to be an analog to the original [`base`]
  package that ships with GHC.

  The purpose of `linear-base` is to provide the minimal facilities you need to
  write _practical_ Linear Haskell code, i.e., Haskell code that uses the
  `-XLinearTypes` language extension.

  ## Motivation

  _Why do you need `linear-base` to write linear projects?_

  1. Data types, functions and classes in `base` are not linear types
    aware. For instance, if `n` is a linearly-bound `Int`, the RHS of
    a definition cannot write `n + 1` — this will not type check. We
    need linear variants of `Num`, `Functor`s, `Monad`s, `($)`, etc.

  2. This library exports new abstractions that leverage linear types
    for resource safety or performance. For example, there are new APIs
    for file and socket I/O as well as for safe in-place mutation of
    arrays.

  ## Getting started

  `-XLinearTypes` is released with GHC 9, and `linear-base` is released
  on [Hackage][hackage-pkg] and [Stackage][stackage-pkg].

  All source files with linear types need a language extension pragma at
  the top:

  ```
  {-# LANGUAGE LinearTypes #-}
  ```

  ## User Guide

  If you already know what `-XLinearTypes` does and what the linear
  arrow `a %1-> b` means, then read the [User Guide] and explore the
  [`examples/`](https://github.com/tweag/linear-base/blob/master/examples) folder to know how to use `linear-base`.

  You can also find a table comparing `base` and `linear-base` typeclasses
  [here](https://github.com/tweag/linear-base/blob/master/docs/CLASS_TABLE.md).

  ## Learning about `-XLinearTypes`

  If you're a Haskeller who hasn't written any Linear Haskell code, don't fear!
  There are plenty of excellent resources and examples to help you.

  ### Tutorials and examples

   * See the [`examples/`](https://github.com/tweag/linear-base/blob/master/examples) folder.
   * [Linear examples on watertight 3D models](https://github.com/gelisam/linear-examples)

  ### Reading material

    * There is a [wiki page](https://gitlab.haskell.org/ghc/ghc/-/wikis/linear-types).
    * Key Blog posts
      * [Predictable performance](https://www.tweag.io/posts/2017-03-13-linear-types.html) (the first blog post from Tweag on this)
      * [IO State Transitions](https://www.tweag.io/posts/2017-08-03-linear-typestates.html)
      * [Streaming](https://www.tweag.io/posts/2018-06-21-linear-streams.html)
      * See [here](https://www.tweag.io/blog/tags/linear-types/) for all of Tweag's blog posts on linear types.
    * [Here is the paper](https://arxiv.org/pdf/1710.09756.pdf) behind `-XLinearTypes`.

  ### Talks
  –
   * [Distributed Programming with Linear Types – Haskell Exchange 2017](https://skillsmatter.com/skillscasts/10637-distributed-programming-with-linear-types)
   * [Practical Linearity in a higher-order polymorphic language – POPL 2018](https://www.youtube.com/watch?v=o0z-qlb5xbI)
   * [Practical Linearity in a higher-order polymorphic language – Curry on 2018](https://www.youtube.com/watch?v=t0mhvd3-60Y)
   * [Practical Linearity in a higher-order polymorphic language – Haskell Exchange 2018](https://skillsmatter.com/skillscasts/11067-keynote-linear-haskell-practical-linearity-in-a-higher-order-polymorphic-language)
   * [Implementing Linear Haskell](https://www.youtube.com/watch?v=uxv62QQajx8)
   * [In-place array update with linear types – ZuriHac 2020](https://www.youtube.com/watch?v=I7-JuVNvz78)
   * [Typecheck Your Memory Management with Linear Types – Haskell Exchange 2017](https://skillsmatter.com/skillscasts/14896-typecheck-your-memory-management-with-linear-types)

  ## Contributing

  Linear base is maintained by [Tweag].

  To contribute please see the [Design Document] for instructions and advice on
  making pull requests.

  ## Licence

  See the [Licence file](https://github.com/tweag/linear-base/blob/master/LICENSE).

  Copyright © Tweag Holding and its affiliates.

  [Tweag]: https://www.tweag.io/
  [`base`]: https://hackage.haskell.org/package/base
  [User Guide]: https://github.com/tweag/linear-base/blob/master/docs/USER_GUIDE.md
  [Design Document]: https://github.com/tweag/linear-base/blob/master/docs/DESIGN.md
  [hackage-pkg]: https://hackage.haskell.org/package/linear-base
  [stackage-pkg]: https://www.stackage.org/nightly/package/linear-base
license-name: MIT
