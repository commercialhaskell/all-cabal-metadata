all-versions:
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.1
- 0.4.1.0
author: Profpatsch
basic-deps:
  aeson: '>=1.0.0.0'
  base: '>=4.9 && <5.0'
  bytestring: '>=0'
  deepseq: '>=0'
  errors: '>=2.2.0'
  filepath: '>=0'
  mtl: '>=0'
  process: '>=0'
  text: '>=0'
changelog: |
  # libnix

  ## 0.4.1.0 -- 2021-11-23

  * Add `executables` to the `RunOptions`. Backwards compatible if you use `defaultRunOptions`.

  ## 0.4.0.1 -- 2021-11-19

  * Fix `Prefetch.url`. The constructed command was missing flags for `urlUnpack = True`.

  ## 0.4.0.0 -- 2021-11-19

  * Allow setting a log function when running a nix action, which can log command invocations.
  * Add an `m` attribute to `NixAction` to make it into a proper `MonadTrans`.
  * Reexport `Types` from the other modules, so that explicit import is not required.

  ## 0.3.0.0 -- 2021-11-16

  * Remove `Eq` instance from `NixExpr` (not sensible)
  * Replace the `NixAction` tuple with a more semantic `NixActionError`
  * Update to 2021 and remove dependency on protolude

  ## 0.2.0.0 -- 2018-08-12

  * First released version.
changelog-type: markdown
description: |
  # libnix

  Haskell bindings to the [nix package manager][nix]

  This project aims to provide an interface to call [nix][nix] functionality from
  the safe haven that is Haskell. As much type safety as possible should be
  guaranteed to the user.

  The project consists of two broad steps:

  1. bindings to the command line tools
  2. bindings to the nix libraries themselves

  At the moment, an beta version of 1. is implemented, together with a small
  number of tests to check for possible changes in the interface,
  which consists mainly of three functions:

  ```haskell
  parseNixExpr :: Text                 -> NixAction ParseError NixExpr
  instantiate  :: NixExpr              -> NixAction InstantiateError (StorePath Derivation)
  realize      :: StorePath Derivation -> NixAction RealizeError (StorePath Realized)
  ```

  which do what you’d expect; and two helper functions

  ```haskell
  eval             :: NixExpr -> NixAction InstantiateError ()
  parseInstRealize :: Text    -> NixAction NixError (StorePath Realized)
  ```

  where `parseInstRealize` performs all three steps at once.

  [nix]: https://github.com/NixOS/nix


  ## Nix Prefetch Wrappers

  We implement an additional module that creates nicely typed wrappers
  for `nix-prefetch-X` tools, please see the module documentation what
  is supported exactly.

  ```haskell
  url :: UrlOptions -> NixAction PrefetchError (Sha256, StorePath Realized)
  git :: GitOptions -> NixAction PrefetchError GitOutput
  ```


  ## C++ bindings

  The second steps would be to directly bind into the C++ library. That could
  either mean writing a C wrapper and using Haskell’s native FFI, or generating
  bindings with [Hoppy][hoppy], which we’d prefer. Hoppy would need to be able to
  [handle C++ exceptions][exc] first, though.

  [hoppy]: http://khumba.net/projects/hoppy/
  [exc]: https://gitlab.com/khumba/hoppy/issues/10

  ## Other nix libraries on hackage

  - [cabal2nix](https://hackage.haskell.org/package/cabal2nix): the executable at the base of nix haskell support
  - [language-nix](https://hackage.haskell.org/package/language-nix): library cabal2nix uses to generate its nix files
  - [hnix](https://hackage.haskell.org/package/hnix): a project to implement the nix expression language in haskell
  - [nix-eval](https://hackage.haskell.org/package/nix-eval): runtime eval of Haskell code using nix
  - [simple-nix](https://hackage.haskell.org/package/simple-nix): looks like a nix parser, but not entirely sure

  It doesn’t look like the scope of libnix collides with any of these packages.
description-type: markdown
hash: 37c599a62306ac257a632e241b17e3d9f1af76639fcb390817bb720bc375fca2
homepage: https://github.com/Profpatsch/libnix-haskell#readme
latest: 0.4.1.0
license-name: GPL-3.0-only
maintainer: mail@profpatsch.de
synopsis: Bindings to the nix package manager
test-bench-deps:
  base: '>=0'
  directory: '>=0'
  errors: '>=0'
  libnix: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
