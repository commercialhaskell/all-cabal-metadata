homepage: https://github.com/fjvallarino/libmdbx-hs#readme
changelog-type: markdown
hash: 6c80e8272900ebad96a952b97d158bd0f710c3b63405b69a2e157ae26868c603
test-bench-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.12 && <5'
  hspec: '>=2.4 && <3.0'
  text: ==1.2.*
  data-default: '>=0.5 && <0.8'
  HUnit: ==1.6.*
  libmdbx: -any
  binary: '>=0.8 && <0.11'
  store: '>=0.5 && <0.8'
  mtl: '>=2.1 && <2.3'
  transformers: '>=0.5 && <0.7'
  store-core: ==0.4.*
  directory: ==1.3.*
maintainer: fjvallarino@gmail.com
synopsis: Bindings for libmdbx, an embedded key/value store
changelog: |
  ### 0.2.1.0

  * Add proper transaction handling for Database module (commit on success but
    also abort on exception).
  * Add `getBounds` function to retrieve minimum and maximum key/pairs on a given
    range of keys.

  ### 0.2.0.0

  * Add support for setting database geometry.
  * Add `delRange` to remove a range of keys.
  * Add `getRangePairs` to retrieve the keys alongside the values.
  * Add `NullByteString` and `NullText` types. The `Binary` and `Store` instances
    for these types are encoded as NULL terminated strings, which allows for using
    them in custom key types with libmdbx. This is not possible with `ByteString`
    and `Text`, since their `Binary` and `Store` instances are serialized with the
    size field first. Given that libmdbx compares keys as an unstructured sequence
    of bytes, this can cause issues since longer strings are considered _greater
    than_ shorter ones, even if their content indicates otherwise.
  * Since the library now provides `Store` instances for `NullByteString` and
    `NullText`, [Store](https://hackage.haskell.org/package/store) was made a
    dependency for the library itself and not just for the examples.
  * The same happens with [Binary](https://hackage.haskell.org/package/binary). It
    is also marked as the recommended serialization library for keys since it
    uses big endian for encoding, eliminating issues when comparing keys with
    libmdbx's comparison function.
  * Make `Database` module Strict. Recommend making user types strict.
  * Update to latest version of libmdbx.
  * Add test cases.

  ### 0.1.0.4

  * Require base 4.12 (deriving via is only available since GHC 8.6).
  * Remove dependency on string-interpolate.

  ### 0.1.0.1 - 0.1.0.3

  * Fixing Hackage deployment.

  ### 0.1.0.0

  * Initial release.
  * Low level API.
  * High level API.
basic-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.12 && <5'
  text: ==1.2.*
  data-default: '>=0.5 && <0.8'
  libmdbx: -any
  binary: '>=0.8 && <0.11'
  store: '>=0.5 && <0.8'
  mtl: '>=2.1 && <2.3'
  transformers: '>=0.5 && <0.7'
  store-core: ==0.4.*
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
- 0.2.1.0
author: Francisco Vallarino
latest: 0.2.1.0
description-type: markdown
description: |
  # libmdbx-hs

  A [libmdbx](https://github.com/erthink/libmdbx) wrapper, providing low level
  access to its API plus a set of high level functions for common operations.

  Excerpt from libmdbx's [documentation](https://github.com/erthink/libmdbx):

  _**libmdbx** is an extremely fast, compact, powerful, embedded,
  transactional [key-value database](https://en.wikipedia.org/wiki/Key-value_database),
  with permissive license._

  _Historically, **libmdbx** is a deeply revised and extended descendant of the amazing
  [Lightning Memory-Mapped Database](https://en.wikipedia.org/wiki/Lightning_Memory-Mapped_Database).
  **libmdbx** inherits all benefits from _LMDB_, but resolves some issues and adds a set of improvements._

  ## Usage

  ### Low level interface

  Using libmdbx's low level interface involves the following steps:

  - Opening an environment. This is the equivalent of a database.
  - Opening a database. This is the equivalent of a table.
  - Creating a transaction.
  - Performing CRUD operations, or using a cursor.
  - Committing or aborting the transaction.

  See [Hackage](https://hackage.haskell.org/package/libmdbx-hs/Mdbx-API.html) for
  the low level interface or [libmdbx's](https://erthink.github.io/libmdbx)
  documentation for more details on internals.

  ### High level interface

  Alternatively you can use the high level interface which, although providing
  a limited set of operations, takes care of transaction handling and makes the
  common use cases really simple.

  ```haskell
  data User = User {
    _username :: !Text,
    _password :: !Text
  } deriving (Eq, Show, Generic, Store)

  deriving via (MdbxItemStore User) instance MdbxItem User

  openEnvDbi :: IO MdbxEnv
  openEnvDbi = envOpen "./test.db" def [MdbxNosubdir, MdbxCoalesce, MdbxLiforeclaim]

  userKey :: User -> Text
  userKey user = "user-" <> _username user

  main :: IO ()
  main = bracket openEnvDbi envClose $ \env -> do
    db <- dbiOpen env Nothing []

    putItem env db (userKey user1) user1
    putItem env db (userKey user2) user2

    getItem env db (userKey user2) >>= print @(Maybe User)
    getRange env db (userKey user1) (userKey user2) >>= print @[User]
    where
      user1 = User "john" "secret"
      user2 = User "mark" "password"
  ```

  For the high level interface see [Hackage](https://hackage.haskell.org/package/libmdbx-hs/Mdbx-Database.html)
  or the sample application [here](app/Main.hs).

  ### Common

  In both scenarios, you will want to check [Hackage](https://hackage.haskell.org/package/libmdbx-hs/Mdbx-Types.html)
  for information on how to make your data types compatible with libmdbx-hs.

  It is recommended that your serializable data types have strict fields, to avoid
  issues related to lazy IO. The library loads data from pointers that are valid
  only during a transaction; delaying the operation may cause an invalid read and
  consequently a crash.

  Write operations should always be performed from the same OS thread.

  ## Dependencies

  Source code for libmdbx is included in the repository and built with the rest of
  the project, to avoid requiring a separate library install.

  ## License

  libmdbx is licensed under the [The OpenLDAP Public License](https://github.com/erthink/libmdbx/blob/master/LICENSE).

  libmdbx-hs is licensed under the [BSD-3 License](LICENSE).
license-name: BSD-3-Clause
