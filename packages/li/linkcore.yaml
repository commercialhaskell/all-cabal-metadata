all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
author: Tim Chevalier
basic-deps:
  base: '>=3 && <5'
  containers: '>=0'
  extcore: '>=0'
  filepath: '>=0'
  process: '>=0'
changelog: ''
changelog-type: ''
description: "The 'linkcore' program transforms a single Haskell module to a single,
  closed\nExternal Core module.\n\nPrevious versions used the GHC API to automatically
  trace dependencies and\nbuild External Core on demand for any intra-package dependencies
  of\nthe given Haskell module. This was overly complicated (requiring\nmultiple coexisting
  builds of GHC) and in version 0.4, I eliminated\nthe dependency on the GHC API.\n\nAs
  of version 0.4, this program is a very simple wrapper around the\nDependencies and
  Merge modules of the External Core library. It\nexecutes a GHC command, which you
  can provide as a configure option\nand which defaults to \"ghc\", to regenerate
  Core code if\nnecessary. (Note that as of version 6.10.4, GHC's recompilation\nchecker
  won't generate .hcr files if the source is older than the .o\nand .hi files but
  the .hcr files don't exist. On the other hand,\nyou can pass the --ghc-flag=-fforce-recomp
  option to linkcore to\nforce GHC to recompile unconditionally.)\n\n===== Prerequisites
  ====\n\nFor the Core Linker to be useful, you will at least need to have built External\nCore
  for all the GHC libraries. For more details, see the HOWTO file\nin this package
  (henceforth \"HOWTO\").\n\nYou also need to install the extcore package from:\nhttp://hackage.haskell.org/package/extcore\n(or
  using cabal-install).\n\nThe extcore package includes a patch for the GHC libraries
  (see the README file\nin the extcore package.)\n\nThere are two ways to proceed:\n(1)
  Build GHC from source, applying the patches described in HOWTO.\n(2) Use a plain
  old installed version of GHC.\n\nOption (1) will allow you to run the stand-alone
  External Core interpreter on some\nvery simple examples, and will illustrate how
  you can add an appropriate set of\nprimops so that you can implement your own External
  Core back-end.\n\nOption (2) will probably not allow you to execute any Core code,
  but will still\nallow running the Core linker so you can see what it does.\n\nThe
  instructions that follow assume you've done (1).\n\n===== Building =====\n\nSuppose
  your GHC build tree that contains External Core for the GHC libraries lives under:\n$TOP/ghc\n\nThen
  you do:\nrunhaskell configure --configure-option=--with-ghc=$TOP/ghc\n\nAt this
  stage you can specify zero or more command-line flags to be\npassed to GHC (when
  generating Core). After running the configure\ncommand, you can look at Config.hs
  to see the list of flags that was\ngenerated. You can also pass extra GHC flags
  to linkcore itself on the\ncommand line.\n\nFor example, the command line I would
  use to configure linkcore is:\nrunhaskell Setup configure --configure-option=--with-ghc=$TOP/ghc/ghc/stage1-inplace/ghc
  \\\n--configure-option=--ghc-flag=-O2 --configure-option=--ghc-flag=-DSLOW \\\n--configure-option=--ghc-flag=-funfolding-creation-threshold=10
  \\\n--configure-option=--ghc-flag=-funfolding-use-threshold=10 \\\n--configure-option=--ghc-flag=-v0\n
  \nAfter that, you do:\nrunhaskell Setup build\nrunhaskell Setup install\n\nlike
  usual. This installs an executable called \"linkcore\", wherever your Cabal installs
  executables.\n\n====== Running =====\n\n$ cat > hello.hs\nmodule Main where\n  main
  = putStrLn \"hello world!\"\n^D\n\n$ linkcore --package-root=$TOP/ghc/libraries
  --package-root=$TOP/ghc/libraries/base/dist/build --package-root=$TOP/ghc/libraries/integer-gmp
  \\\n    hello.hs -o hello_out.hcr\n\nWhat are all these flags doing? They're telling
  the Core linker to look for External Core source code in the library\ntrees you
  compiled to External Core in an earlier step. Also, the -o flag tells the linker
  to put the Core output in hello.hcr.\n\nIf I want to add another GHC flag, I could
  say, for example:\n\n$ linkcore --ghc-flag=-O0 --package-root=$TOP/ghc/libraries
  --package-root=$TOP/ghc/libraries/base/dist/build \\\n   --package-root=$TOP/ghc/libraries/integer-gmp
  hello.hs -o hello_out.hcr\n\nThis step may be slow. On my machine, reading in all
  the GHC library files (even just the 61 imported implicitly\nby the \"hello world\"
  program) takes several seconds.\n\nNow you can look at the output file hello_out.hcr,
  manipulate it with the External Core library, etc.\n\n====== More detailed instructions
  ======\n\nSee the HOWTO file in this distribution.\n\n====== Bugs ======\n\nAlmost
  certainly. Please direct bug reports or questions to:\nTim Chevalier <chevalier@alum.wellesley.edu>"
description-type: text
hash: 839fd1b0794d8ebb09cf4a59aa916054c251e3134ff1b21b012c555d7203f6dd
homepage: ''
latest: 0.4.1
license-name: BSD-3-Clause
maintainer: chevalier@alum.wellesley.edu
synopsis: Combines multiple GHC Core modules into a single module
test-bench-deps: {}
