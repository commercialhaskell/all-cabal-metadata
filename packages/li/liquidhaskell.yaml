all-versions:
- '0.1'
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.1.1
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.5
- 0.8.2.0
- 0.8.2.2
- 0.8.2.3
- 0.8.2.4
- 0.8.6.0
- 0.8.6.2
- 0.8.10.1
- 0.8.10.2
- 0.8.10.7
- 0.9.0.2.1
- 0.9.2.5.0
- 0.9.2.8.0
- 0.9.4.7.0
- 0.9.6.3
author: Ranjit Jhala, Niki Vazou, Eric Seidel
basic-deps:
  base: '>=4.11.1.0 && <5'
  bytestring: ==0.11.5.2
  containers: ==0.6.7
  ghc-bignum: '>=0'
  ghc-prim: '>=0'
  liquidhaskell-boot: ==0.9.6.3
changelog: "# Changes\n\n## Next\n\n## 0.9.6.3 (2024-01-29)\n\n- Set support for GHC
  9.6.3\n\n## 0.9.4.7.0\n\n- Set support for GHC 9.4.7\n\n## 0.9.2.8.0\n\n- Support
  for GHC 9.2.8\n- Fix A normalization when type binder and lets are mixed in the
  input (#2236)\n- Move KMeansHelper from liquid-prelude to tests\n\n## 0.9.2.5\n\n-
  Introduce package liquidhaskell-boot and eliminate wrapper packages for boot libraries\n-
  List all definitions used from the GHC API\n- Allow LH to verify modules in parallel
  (remove withArgs call)\n- Remove some calls to HashMap.toList which caused some
  non-determinisms in different machines\n- Implement a Haskell script to plot performance
  without gnuplot\n\n## 0.9.0.2\n\n- **breaking change** Remove the implicit types
  mechanism and corresponding tests\n- **breaking change** Remove the `decrease` keyword
  and mechanism in favor of the terminating expressions syntax (`/ [a,b]`)\n\n## 0.8.10.1\n\n-
  Support for GHC 8.10.1\n- LiquidHaskell is now available as a GHC Plugin\n\n## 0.8.6.0\n\n-
  Automatically check (transitive) dependencies\n- Built with GHC 8.6.4\n- Structural
  termination checker (on by default)\n- Support for specifying class-laws and that
  they hold on instances\n- Bug fixes for PLE\n- Need to run LH on imported libs (with
  source) first; can use `--compile-spec` to avoid checking.\n\n## 0.8.4.0\n\n- Support
  for GHC 8.4.3\n- Significant restructuring of `Bare` front-end to shrink dependency
  on GHC-API\n\n## 0.8.2.2\n\n- Support for GHC 8.2.2\n\n- Support for GADTs and TypeFamilies,
  see\n\t- `tests/{pos,neg}/ExactGADT*.hs`\n\n- Add support for Bags/Multisets, see\n\t-
  `tests/pos/bag.hs`\n\t- `tests/neg/bag.hs`\n\t- `tests/pos/ListISort-bag.hs`\n\n-
  Add support for *inductive predicates* see\n\t- `tests/pos/IndEven.hs`\n\t- `tests/pos/IndPerm.hs`\n\t-
  `tests/pos/IndStar.hs`\n\n## 0.8.0.1\n\n- Support for GHC 8.0.2\n\n## 0.7.0.1\n\n-
  **DELETED** the gsDcons and generally carrying DataConP beyond Bare; this _may_
  cause\n  problems with `target` as I removed the `dconEnv` field in `TargetState`.
  Is it live?\n  To restore: have to apply the substitution syms/su in Bare.hs ALSO
  to gsDconsP (after\n  restoring the gsDconsP field to [(DataCon, DataConP)])\n\n\n-
  **breaking change** Remove the `Bool` vs. `Prop` distinction. This means that:\n\n
  \   * signatures that use(d) `Prop` as a type, e.g.\n      `foo :: Int -> Prop`
  should just be `foo :: Int -> Bool`.\n\n    * refinements that use(d) `Prop v` e.g.\n
  \     `isNull :: xs:[a] -> {v:Bool | Prop v <=> len xs > 0}`\n      should just
  be `isNull :: xs:[a] -> {v:Bool | v <=> len xs > 0}`.\n\n- Add `--eliminate={none,
  some, all}`. Here\n  * `none` means don't use eliminate at all, use qualifiers everywhere
  (old-style)\n  * `some` which is the **DEFAULT**  -- means eliminate all the **non-cut**
  variables\n  * `all`  means eliminate where you can, and solve *cut* variables to
  `True`.\n\n- Change `--higherorder` so that it uses *only* the qualifiers obtained
  from\n  type aliases (e.g. `type Nat = {v:Int | ... }`) and nothing else. This\n
  \ requires `eliminate=some`.\n\n- Add a `--json` flag that runs in quiet mode where
  all output is\n  suppressed and only the list of errors is returned as a JSON object
  to be\n  consumed by an editor.\n\n- Add `--checks` flag (formerly `--binders`),
  which checks a given binder's\n  definition, assuming specified types for all callees
  (but inferring types for\n  callees without signatures.)\n\n- Add `--time-binds`
  which is like the above, but checks all binders in a module\n  and prints out time
  taken for each.\n\n## 0.5.0.1\n\n- Fixed a bug in the specification for `Data.Traversable.sequence`\n-
  Make interpreted mul and div the default, when `solver = z3`\n- Use `--higherorder`
  to allow higher order binders into the fixpoint environment\n\n## 0.5.0.0\n\n- Added
  support for building with `stack`\n\n- Added support for GHC 7.10 (in addition to
  7.8)\n\n- Added '--cabaldir' option that will automatically find a .cabal file in
  the ancestor\n  path from which the target file belongs, and then add the relevant
  source and dependencies\n  to the paths searched for by LiquidHaskell.\n\n  This
  means we don't have to manually do `-i src` etc. when checking large projects,\n
  \ which can be tedious e.g. within emacs.\n\n\n## 0.4.0.0\n\n- Bounds as an alternative
  for logical constraints see `benchmarks/icfp15/pos/Overview.lhs`\n\n## 0.3.0.0\n\n-
  Logical constraints: add extra subtyping constraints to signatures, e.g.\n\n    {-@\n
  \   (.) :: forall <p :: b -> c -> Prop, q :: a -> b -> Prop, r :: a -> c -> Prop>.\n
  \          {x::a, w::b<q x> |- c<p w> <: c<r x>}\n           (y:b -> c<p y>)\n        ->
  (z:a -> b<q z>)\n        ->  x:a -> c<r x>\n    @-}\n    (.) f g x = f (g x)\n\n-
  Inlining haskell functions as predicates and expressions, e.g.\n\n    {-@ inline
  max @-}\n    max x y = if x >= y then x else y\n\n- Refining class instances. For
  example\n\n    {-@ instance Compare Int where\n        cmax :: Odd -> Odd -> Odd
  @-}\n\n- Major restructuring of internal APIs\n\n## 0.2.1.0\n- Experimental support
  for lifting haskell functions to measures\nIf you annotate a Haskell function `foo`
  with {-@ measure foo @-}, LiquidHaskell will attempt to derive an equivalent measure
  from `foo`'s definition. This should help eliminate some boilerplate measures that
  used to be required.\n\n## 0.2.0.0\n\n- Move to GHC-7.8.3\nLiquidHaskell now *requires*
  ghc-7.8.3.\n\n- Termination\nLiquidHaskell will now attempt to prove all recursive
  functions terminating. It tries to prove that some parameter (or combination thereof)
  decreases at each recursive callsite. By default, this will be the first parameter
  with an associated size measure (see Size Measures), but can be overridden with
  the `Decreases` annotation or a termination expression (see Termination Expressions).\n\nIf
  proving termination is too big of burden, it can be disabled on a per-module basis
  with the `--no-termination` flag, or on a per-function basis with the `Lazy` annotation.\n\n-
  Size Measures\nData declarations now optionally take a *size measure*, which LiquidHaskell
  will use to prove termination of recursive functions. The syntax is:\n\n    {-@
  data List a [len] = Nil | Cons a (List a) @-}\n\n- Termination Expressions\nTermination
  Expressions can be used to specify the decreasing metric of a recursive function.
  They can be any valid LiquidHaskell expression and must be placed after the function's
  LiquidHaskell type, e.g.\n\n    {-@ map :: (a -> b) -> xs:[a] -> [a] / [len xs]
  @-}\n\n- Type Holes\nTo reduce the annotation burden, LiquidHaskell now accepts
  `_` as a placeholder for types and refinements. It can take the place of any base
  Haskell type and LiquidHaskell will query GHC to fill in the blanks, or it can take
  the place of a refinement predicate, in which case LiquidHaskell will infer an appropriate
  refinement. For example,\n\n    {-@ add :: x:_ -> y:_ -> {v:_ | v = x + y} @-}\n
  \   add x y = x + y\n\nbecomes\n\n    {-@ add :: Num a => x:a -> y:a -> {v:a | v
  = x + y} @-}\n    add x y = x + y\n\n- Assumed Specifications\nThe `assume` annotation
  now works as you might expect it to, i.e. LiquidHaskell will *not* verify that the
  implementation is correct. Furthermore, `assume` can be used to locally override
  the type of an imported function.\n\n- Derived Measure Selectors\nGiven a data definition\n\n
  \   {-@ data Foo = Foo { bar :: Int, baz :: Bool } @-}\n\nLiquidHaskell will automatically
  derive measures\n\n    {-@ measure bar :: Foo -> Int @-}\n    {-@ measure baz ::
  Foo -> Bool @-}\n\n- Type-Class Specifications\nLiquidHaskell can now verify prove
  that type-class instances satisfy a specification. Simply use the new `class` annotation\n\n
  \   {-@ class Num a where\n          (+) :: x:a -> y:a -> {v:a | v = x + y}\n          (-)
  :: x:a -> y:a -> {v:a | v = x - y}\n          ...\n      @-}\n\nand LiquidHaskell
  will attempt to prove at each instance declaration that the implementations satisfy
  the class specification.\n\nWhen defining type-class specifications you may find
  the need to use overloaded measures, to allow for type-specific definitions (see
  Type-Indexed Measures).\n\n- Type-Indexed Measures\nLiquidHaskell now accepts measures
  with *type-specific* definitions, e.g. a measure to describe the size of a value.
  Such measures are defined using the `class measure` syntax\n\n    {-@ class measure
  size :: forall a. a -> Int @-}\n\nand instances can be defined using the `instance
  measure` syntax, which mirrors the regular measure syntax\n\n    {-@ instance measure
  size :: [a] -> Int\n        size ([])   = 0\n        size (x:xs) = 1 + size xs\n
  \     @-}\n    {-@ instance measure size :: Tree a -> Int\n        size (Leaf)       =
  0\n        size (Node l x r) = 1 + size l + size r\n      @-}\n\n- Parsing\nWe have
  greatly improved our parser to require fewer parentheses! Yay!\n\n- Emacs/Vim Support\nLiquidHaskell
  now comes with syntax checkers for [flycheck](https://github.com/flycheck/flycheck)
  in Emacs and [syntastic](https://github.com/scrooloose/syntastic) in Vim.\n\n- Incremental
  Checking\nLiquidHaskell has a new `--diffcheck` flag that will only check binders
  that have changed since the last run, which can drastically improve verification
  times.\n\n- Experimental Support for Z3's theory of real numbers with the `--real`
  flag.\n"
changelog-type: markdown
description: |+
  ![LiquidHaskell](/resources/logo.png)


  [![Hackage](https://img.shields.io/hackage/v/liquidhaskell.svg)](https://hackage.haskell.org/package/liquidhaskell) [![Hackage-Deps](https://img.shields.io/hackage-deps/v/liquidhaskell.svg)](http://packdeps.haskellers.com/feed?needle=liquidhaskell) [![Build Status](https://img.shields.io/circleci/project/ucsd-progsys/liquidhaskell/master.svg)](https://circleci.com/gh/ucsd-progsys/liquidhaskell)

  This is the **development** site of the LiquidHaskell formal verification tool.

  If you're a LiquidHaskell **user** (or just curious), you probably want to go to [the documentation website](https://ucsd-progsys.github.io/liquidhaskell/) instead.

  # Contributing

  This is an open-source project, and we love getting feedback (and patches)!

  ## Reporting a Bug

  If something doesn't work as it should, please consider opening a [github issue](https://github.com/ucsd-progsys/liquidhaskell/issues)
  to let us know. If possible, try to:

  * Try to use a descriptive title;
  * State as clearly as possible what is the problem you are facing;
  * Provide a small Haskell file producing the issue;
  * Write down the expected behaviour vs the actual behaviour;
  * Please, let us know which liquidhaskell version you are using.

  ## Your first Pull Request

  We are thrilled to get PRs! Please follow these guidelines, as doing so will increase the chances of
  having your PR accepted:

  * The main LH repo [lives here](https://github.com/ucsd-progsys/liquidhaskell)
  * Please create pull requests against the `develop` branch.
  * Please be sure to include test cases that illustrate the effect of the PR
      - e.g. show new features that that are supported or how it fixes some previous issue
  * If you're making user-visible changes, please also add documentation
      - e.g. [options.md](docs/mkDocs/docs/options.md), [specifications.md](docs/mkDocs/docs/specifications.md), the [main tutorial](https:///github.com/ucsd-progsys/intro-refinement-types) (as relevant)

  Pull requests don't just have to be about code: documentation can often be improved too!

  ## Ask for Help

  If you have further questions or you just need help, you can always reach out on our [slack channel](https://join.slack.com/t/liquidhaskell/shared_invite/enQtMjY4MTk3NDkwODE3LTFmZGFkNGEzYWRkNDJmZDQ0ZGU1MzBiZWZiZDhhNmY3YTJiMjUzYTRlNjMyZDk1NDU3ZGIxYzhlOTIzN2UxNWE), [google groups mailing list](https://groups.google.com/forum/#!forum/liquidhaskell), [GitHub issue tracker](https://github.com/ucsd-progsys/liquidhaskell/issues), or by emailing [Ranjit Jhala](https://github.com/ranjitjhala), [Niki Vazou](https://github.com/nikivazou).

  # General Development Guide

  For those diving into the implementation of LiquidHaskell, here are a few tips:

  ## Fast (re)compilation

  When working on the `liquidhaskell-boot` library, usually all we want is to make changes and quickly recompile
  only the bare minimum, to try out new ideas. Using a fully-fledged GHC plugin doesn't help in this sense,
  because packages like `liquidhaskell` or `liquid-prelude` have a direct dependency on `liquidhaskell-boot`, and
  therefore every time the latter changes, an expensive rebuild of those packages is triggered, which
  might become tedious overtime. To mitigate this, we offer a faster, "dev-style" build mode which is based
  on the assumption that most changes to the `liquidhaskell` library do not alter the validity of
  already-checked libraries, and therefore things like `liquid-prelude` can be considered
  "static assets", avoiding the need for a recompilation. In other terms, we explicitly disable recompilation
  of any of the `liquid-*` ancillary library in dev mode, so that rebuilds only affect the
  `liquidhaskell-boot` library.

  ### Usage and recommended workflow

  This is how you can use this:

  * To begin with, perform a **full** build of **all** the libraries, by doing either `cabal v2-build` or `stack build`,
    **without** specifying any extra environment variables from the command line. This is needed to ensure that
    things like `liquid-prelude` or `liquidhaskell` are compiled at least once, as we would need the
    refinements they contain to correctly checks other downstream programs;

  * At this point, the content of the `liquid-*` packages is considered "trusted" and "frozen", until you won't
    force another full, _non-dev_ build;

  * In order to quickly test changes to the `liquidhaskell-boot` library without recompiling the `liquid-*` packages,
    we need to start a build passing the `LIQUID_DEV_MODE` env var as part of the build command. Examples:

  #### Stack

  ```
  LIQUID_DEV_MODE=true stack build
  ```

  If on NixOS

  ```
  LIQUID_DEV_MODE=true stack --no-nix-pure build
  ```

  With the above, `stack` will unregister and re-register the libraries,
  but hopefully it won't rebuild any modules.

  #### Cabal

  ```
  LIQUID_DEV_MODE=true cabal v2-build
  ```

  It's also possible (but not recommended) to add `LIQUID_DEV_MODE` to .bashrc or similar, but this would
  permanently disable building the `liquid-*` packages, and this might silently mask breaking changes to the
  `liquidhaskell` library that would manifest only when compiling these other packages.

  If you wish to force building all the libraries again, it's sufficient to issue the same builds commands
  without the `LIQUID_DEV_MODE`.

  ## How To Run Regression Tests

  For documentation on the `test-driver` executable itself, please refer to the
  `README.md` in `tests/` or run `cabal run tests:test-driver -- --help` or `stack
  run test-driver -- --help`

  You can run *all* the tests by

      $ ./scripts/test/test_plugin.sh

  You can run a bunch of particular test-groups instead by

      $ LIQUID_DEV_MODE=true ./scripts/test/test_plugin.sh <test-group-name1> <test-group-name2> ...

  and you can list all the possible test options with

      $ LIQUID_DEV_MODE=true ./scripts/test/test_plugin.sh --help

  or get a list of just the test groups, one per line, with

      $ LIQUID_DEV_MODE=true ./scripts/test/test_plugin.sh --show-all

  To pass in specific parameters, you can invoke cabal directly with

      $ LIQUID_DEV_MODE=true cabal build tests:<test-group-name> --ghc-options=-fplugin-opt=LiquidHaskell:--no-termination

  For example:

      $ LIQUID_DEV_MODE=true cabal build tests:unit-neg --ghc-options=-fplugin-opt=LiquidHaskell:--no-termination

  Or your favorite number of threads, depending on cores etc.

  You can directly extend and run the tests by modifying the files in

      tests/harness/

  ### Parallelism in Tests

  Tests run in parallel, unless the flag `--measure-timings` is specified to `test_plugin.sh`.

  ## How to create performance comparison charts

  When `liquidhaskell` tests run, we can collect timing information with

      $ ./scripts/test/test_plugin.sh --measure-timings

  Measures will be collected in `.dump-timings` files under `dist-newstyle` directory. These can be
  converted to json data with

  ```bash
  cabal v2-build ghc-timings
  cabal v2-exec ghc-timings dist-newstyle
  ```

  which will produce `tmp/*.json` files.

  Then a csv report can be generated from this json files with
  ```
  cabal v2-run benchmark-timings -- tmp/*.json --phase LiquidHaskell -o summary.csv
  ```
  On each line, the report will contain the time taken by each test.

  Comparison charts in `svg` format can be generated by invoking

  ```
  cabal v2-run plot-performance -- -b path_to_before_summary.csv -a path_to_after_summary.csv -s 50 -f "benchmark"
  ```

  This will generate three files `filtered.svg` (a subset of tests with a `benchmark` prefix, enabled by the `-f` option),
  `top.svg` and `bot.svg` (top 50 speedups and slowdowns over the entire test set, both enabled by the `-s` option) in the
  current directory. The `-f` and `-s` options can be used/omitted independently. If both are omitted, a single `perf.svg`
  will be produced covering the full input test set. Additionally, their effects can be combined by providing a third `-c`
  option (this  will produce 2 files `filtered-top.svg` and `filtered-bot.svg` instead of 3). An optional key `-o` can be
  supplied to specify an output directory for the generated files.

  There is also a legacy script `scripts/plot-performance/chart_perf.sh` that can be used to generate comparison charts
  in both `svg` and `png` formats. It requires [gnuplot](http://www.gnuplot.info/) to run and assumes both files contain
  the same test set. The following command will produce two files `perf.svg` and `perf.png` in the current directory.

      $ scripts/plot-performance/chart_perf.sh path_to_before_summary.csv path_to_after_summary.csv

  The current formatting is optimized for comparing some subsets of the full test run, typically just the benchmarks alone.
  If one wishes to save time or is not interested in top speedups/slowdowns, the benchmark subset can be obtained by running

      $ scripts/test/test_plugin.sh \
          benchmark-stitch-lh \
          benchmark-bytestring \
          benchmark-vector-algorithms \
          benchmark-cse230 \
          benchmark-esop2013 \
          benchmark-icfp15-pos \
          benchmark-icfp15-neg

  ## Miscelaneous tasks

  * **Profiling** See the instructions in [scripts/profiling-driver/ProfilingDriver.hs](scripts/profiling-driver/ProfilingDriver.hs).
  * **Getting stack traces on exceptions** See `-xc` flag in the [GHC user's guide][ghc-users-guide].
  * **Working with submodules** See `man gitsubmodules` or the [git documentation site][git-documentation].

  [ghc-users-guide]: https://downloads.haskell.org/ghc/latest/docs/users_guide/
  [git-documentation]: https://git-scm.com/doc

  ## Releasing on Hackage

  *NOTE: The following section is relevant only for few developers, i.e. the ones which are directly involved
  in the release process. Most contributors can skip this section.*

  We provide a convenience script to upload all the `liquid-*` packages (**including** `liquid-fixpoint`) on
  Hackage, in a lockstep fashion. To do so, it's possible to simply run the `scripts/release_to_hackage.sh`
  Bash script. The script doesn't accept any argument and it tries to determine the packages
  to upload by scanning the `$PWD` for packages named appropriately. It will ask the user for confirmation
  before proceeding, and `stack upload` will be used under the hood.

  ## GHC support policy

  LH supports only one version of GHC at any given time. This is because LH depends heavily on the `ghc` library
  and there is currently no distinction between public API's and API's internal to GHC. There are currently no
  release notes for the `ghc` library and breaking changes happen without notice and without deprecation
  periods. Supporting only one GHC version saves developer time because it obviates the need for `#ifdef`'s
  throughout the codebase, or for an compatibility layer that becomes increasingly difficult to write as we
  attempt to support more GHC versions. Porting to newer GHC versions takes less time, the code is easier to
  read and there is less code duplication.

  Users of older versions of GHC can still use older versions of LH.

  ## The GHC.API module

  In order to minimize the effort in porting LH to new releases of GHC, we need a way to abstract over breaking
  changes in the `ghc` library, which might change substantially with every major GHC release. This is
  accomplished by the [GHC.API][] module. The idea is that **rather than importing multiple `ghc` modules,
  LH developers must import this single module in order to write future-proof code**. This is especially
  important for versions of the compiler greater than 9, where the module hierarchy changed substantially,
  and using the [GHC.API][] makes it easier to support new versions of GHC when they are released.

  ### Fragile import strategy

  ```haskell
  import Predicate
  import TyCoRep

  ...

  -- This will break if 'isEqPrimPred' is (re)moved or the import hierarchy changes.
  foo :: Type -> Bool
  foo = isEqPrimPred
  ```

  ### Recommended import strategy

  ```haskell
  import qualified Language.Haskell.Liquid.GHC.API as GHC

  ...

  foo :: GHC.Type -> Bool
  foo = GHC.isEqPrimPred -- OK.
  ```

  # GHC Plugin Development Guide

  This code commentary describes the current architecture for the GHC [Plugin][] that enables LiquidHaskell
  to check files as part of the normal compilation process. For the sake of this commentary, we refer to
  the code provided as part of the `release/0.8.10.2` branch, commit `9a2f8284c5fe5b18ed0410e842acd3329a629a6b`.

  ## GHC.Interface vs GHC.Plugin

  The module [GHC.Plugin][] is the main entrypoint for all the plugin functionalities. Whenever possible, this
  module is reusing common functionalities from the [GHC.Interface][], which is the original module used to
  interface LH with the old executable. Generally speaking, the [GHC.Interface][] module is considered "legacy"
  and it's rarely what one wants to modify. It will probably be removed at some point.

  ## Plugin architecture

  Broadly speaking, the Plugin is organised this way: In the [typechecking phase][], we typecheck and desugar
  each module via the GHC API in order to extract the unoptimised [core binds][] that are needed by
  LH to work correctly. This is due to a tension in the design space; from one side LH needs access to the
  "raw" core binds (binds where primitives types are not unboxed in the presence of a PRAGMA annotation,
  for example) but yet the user can specify any arbitrary optimisation settings during compilation and we do
  not want to betray the principle of least expectation by silently compiling the code with `-O0`. Practically
  speaking, this introduces some overhead and is far from ideal, but for now it allows us to iterate quickly.
  This phase is also responsible for:

  * Extracting the [BareSpec][]s associated to any of the dependent modules;
  * Producing the [LiftedSpec][] for the currently-compiled module;
  * Storing the [LiftedSpec][] into an interface annotation for later retrieval;
  * Checking and verifying the module using LH's existing API.

  The reason why we do everything in the [typechecking phase][] is also to allow integrations with tools like
  [ghcide][]. There are a number of differences between the plugin and the operations performed as part of the
  [GHC.Interface][], which we are going to outline in the next section.

  ## Differences with the GHC.Interface

  - The [GHC.Interface][] pre-processes the input files and calls into [configureGhcTargets][] trying to
    build a dependency graph by discovering dependencies the target files might require. Then, from this
    list any file in the include directory is filtered out, as well as any module which has
    a "fresh" `.bspec` file on disk, to save time during checking. In the [GHC.Plugin][] module though
    we don't do this and for us, essentially, each input file is considered a target, where we exploit the
    fact GHC will skip recompilation if unnecessary. This also implies that while the [GHC.Interface][] calls
    into [processTargetModule][] only for target files, the [GHC.Plugin][] has a single, flat function simply
    called [processModule][] that essentially does the same as `GHC.Interface.processModule` and
    `GHC.Interface.processTargetModule` fused together.

  - While the [GHC.Interface][] sometimes "assembles" a [BareSpec][] by `mappend`ing the `commSpec` (i.e. comment spec)
    with the [LiftedSpec][] fetched from disk, if any, the Plugin doesn't do this but rather piggybacks on the
    [SpecFinder][] (described later) to fetch dependencies' specs.

  - There is a difference in how we process LIQUID pragmas. In particular, for the executable they seems to
    be accumulated "in bulk" i.e. if we are refining a *target* module `A` that depends on `B`, `B` seems to
    inherit whichever flags we were using in the *target* module `A`. Conversely, the source plugin is "stateless"
    when it comes to LIQUID options, i.e. it doesn't have memory of _past_ options, what it counts when compiling
    a module `B` is the _global_ options and _any_ option this module defines. The analogy is exactly the
    same as with GHC language extensions, they have either global scope (i.e. `default-extensions` in the
    cabal manifest) or local scope (i.e. `{-# LANGUAGE ... #-}`).

  ## Finding specs for existing modules

  This is all done by a specialised module called the [SpecFinder][]. The main exported function is
  [findRelevantSpecs][] which, given a list of `Module`s, tries to retrieve the `LiftedSpec`s associated with
  them. Typically this is done by looking into the interface files of the input modules, trying to deserialise
  any `LiftedSpec` from the interface file's annotations.

  # General Development FAQs

  ## A new version of GHC is out. How do I support it?

  Typically the first thing you might want to do is to run a "clean" `cabal v2-build` or `stack build` using
  the latest compiler and "check the damage". If you are lucky, everything works out of the box, otherwise
  compilation might fail with an error, typically because some `ghc` API function has been removed/moved/renamed.
  The way to fix it is to modify the [GHC.API][] shim module and perform any required change, likely by
  conditionally compiling some code in a `CPP` block. For minor changes, it's usually enough to perform small
  changes, but for more tricky migrations it might be necessary to backport some GHC code, or create some
  patter synonym to deal with changes in type constructors.

  ## Is there a way to run the testsuite for different versions of GHC?

  Currently, no. Only one version of GHC is supported and that is the one
  that can be tested with `./scripts/test/test_plugin.sh`.

  [GHC.API]:             liquidhaskell-boot/src-ghc/Liquid/GHC/API.hs
  [Plugin]:              liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Plugin.hs
  [GHC.Plugin]:          liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Plugin.hs
  [GHC.Interface]:       liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Interface.hs
  [SpecFinder]:          liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Plugin/SpecFinder.hs
  [LiftedSpec]:          liquidhaskell-boot/src/Language/Haskell/Liquid/Types/Specs.hs#L559
  [TargetSrc]:           liquidhaskell-boot/src/Language/Haskell/Liquid/Types/Specs.hs#L158
  [typechecking phase]:  liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Plugin.hs#L211-L226
  [ghcide]:              https://github.com/haskell/ghcide
  [findRelevantSpecs]:   liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Plugin/SpecFinder.hs#L65
  [core binds]:          https://hackage.haskell.org/package/ghc-9.6.3/docs/GHC-Core.html#t:CoreBind
  [configureGhcTargets]: liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Interface.hs#L254
  [processTargetModule]: liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Interface.hs#L483
  [processModule]:       liquidhaskell-boot/src/Language/Haskell/Liquid/GHC/Plugin.hs#L509

description-type: markdown
hash: bdfa5021c4461f6985b20781b23e3ae9ef2c843104eaf0df117602925551521a
homepage: https://github.com/ucsd-progsys/liquidhaskell
latest: 0.9.6.3
license-name: BSD-3-Clause
maintainer: Ranjit Jhala <jhala@cs.ucsd.edu>
synopsis: Liquid Types for Haskell
test-bench-deps: {}
