homepage: https://github.com/RyanGlScott/lift-generics
changelog-type: markdown
hash: 061cc212ffacb2a7daa4496ee5440645c7325a91261b9eb41e3afaed70dcd4e0
test-bench-deps:
  base: '>=4.3 && <5'
  th-compat: '>=0.1 && <0.2'
  hspec: '>=2 && <3'
  lift-generics: -any
  generic-deriving: '>=1.9 && <2'
  th-lift-instances: '>=0.1 && <0.2'
  containers: '>=0.1 && <0.7'
  base-compat: '>=0.8.2 && <1'
  mtl: '>=2.1 && <2.4'
  template-haskell: '>=2.4 && <2.19'
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: GHC.Generics-based Language.Haskell.TH.Syntax.lift implementation
changelog: |
  ## 0.2.1 [2021.09.16]
  * The lifting functions have been modified to reduce splice
    time for constructors with many fields from quadratic to
    linear. This probably only has a modest impact on total
    compilation time.

  * `genericLift`, `genericLiftTyped`, `genericLiftTypedExp`, and
    `genericLiftTypedCompat` functions now work for GHC 7.4 and above
    for types that derive `Typeable`.

  * `genericLiftWithPkgFallback`, `genericLiftTypedWithPkgFallback`,
    `genericLiftTypedExpWithPkgFallback`, and
    `genericLiftTypedCompatWithPkgFallback` functions have been added that take
    advantage of `Typeable` instances for GHC 7.4 and above but also take a
    user-provided package name for earlier versions.

  ## 0.2 [2020.09.30]
  * `genericLiftTyped` and `genericLiftTypedWithPkg` now return a `Code` instead
    of a `TExp` to reflect the type of `liftTyped` changing in
    `template-haskell-2.17.0.0`. New functions `genericLiftTypedTExp` and
    `genericLiftTypedTExpWithPkg` have been added for those who wish to return
    `TExp` specifically. In addition, the functions `genericLiftTypedCompat` and
    `genericLiftTypedCompatWithPkg` have been introduced which return a `Code`
    on `template-haskell-2.17.0.0` or later, but a `TExp` on older versions of
    `template-haskell`. These functions are most useful for implementing
    `liftTyped` in a `Lift` instance in a backwards-compatible way.

    The `th-compat` library is used to backport the `Code` data type back to
    versions of `template-haskell` that do not define it.
  * The functions in `Language.Haskell.TH.Lift.Generics` are now generalized to
    work over any `Quote` instance instead of hardcoding `Q`. Again, the
    `th-compat` library is used to backport `Quote` to old versions of
    `template-haskell` that do not define it.
  * Make `genericLift` work properly for empty data types.

  ### 0.1.3 [2019.11.26]
  * Add `genericLiftTyped` and `genericLiftTypedWithPkg`.

  ### 0.1.2
  * Add a case for `V1` (i.e., empty data types), which diverges in the way
    you'd expect.

  ### 0.1.1
  * Fix test suite on GHC 8.0

  ## 0.1
  * Initial commit
basic-deps:
  base: '>=4.3 && <5'
  th-compat: '>=0.1 && <0.2'
  generic-deriving: '>=1.9 && <2'
  ghc-prim: -any
  template-haskell: '>=2.4 && <2.19'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- '0.2'
- 0.2.1
author: Ryan Scott
latest: 0.2.1
description-type: markdown
description: |
  # `lift-generics`

  [![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]
  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/lift-generics.svg)](http://packdeps.haskellers.com/reverse/lift-generics)
  [![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]
  [![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal: BSD3]
  [![Build Status](https://github.com/RyanGlScott/lift-generics/workflows/Haskell-CI/badge.svg)](https://github.com/RyanGlScott/lift-generics/actions?query=workflow%3AHaskell-CI)

  [Hackage: lift-generics]:
    http://hackage.haskell.org/package/lift-generics
      "lift-generics package on Hackage"
  [Haskell.org]:
    http://www.haskell.org
    "The Haskell Programming Language"
  [tl;dr Legal: BSD3]:
    https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29
    "BSD 3-Clause License (Revised)"

  This package provides a `GHC.Generics`-based `genericLiftWithPkg` function (intended for GHC 7.10 and earlier), as well as a `genericLift` function (only available on GHC 8.0 and later), both of which can be used for providing a `Language.Haskell.TH.Syntax.lift` implementation. See the documentation in the `Language.Haskell.TH.Lift.Generics` module to get started.

  Credit goes to Matthew Pickering for [suggesting this idea](https://ghc.haskell.org/trac/ghc/ticket/1830#comment:12).

  Note that due to API limitations, `GHC.Generics` wasn't powerful enough to come up with the entirety of a `lift` implementation prior to GHC 8.0. For this reason, `genericLiftWithPkg` requires you to produce the package name yourself, which proves to be no small feat (see the documentation for more info).

  Luckily, you don't have to jump through as many hoops on GHC 8.0 and later: simply use the `genericLift` function, and life is good.
license-name: BSD-3-Clause
