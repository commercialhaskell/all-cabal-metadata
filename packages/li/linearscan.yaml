homepage: http://github.com/jwiegley/linearscan
changelog-type: ''
hash: e39175bfe5e10fef95a2d6e21545400c2d3b2bc8d52d7938a3ad72c981a1c5d8
test-bench-deps: {}
maintainer: johnw@newartisans.com
synopsis: Linear scan register allocator, formally verified in Coq
changelog: ''
basic-deps:
  base: '>=4.7 && <5.0'
  containers: -any
  ghc-prim: -any
  mtl: -any
  transformers: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.7.0
- 0.8.0
- 0.9.0
- 0.10.0
- 0.10.1
- 0.10.2
- '0.11'
- 0.11.1
- 1.0.0
author: John Wiegley
latest: 1.0.0
description-type: haddock
description: |-
  The @linearscan@ library is an implementation -- in Coq, extracted to
  Haskell -- of a register allocation algorithm developed by Christian Wimmer.
  It is described in detail in his Masters thesis, which can be found at
  <http://www.christianwimmer.at/Publications/Wimmer04a/Wimmer04a.pdf>.  A
  Java implementation of this same algorithm, by that author, is used in
  Oracle's Graal project. It has also been implemented in C++ by Mozilla.

  This version of the algorithm was written and verified in Coq, containing
  over 231 proved lemmas, at over 10K LOC. It was funded as a research project
  by BAE Systems (<http://www.baesystems.com>), to be used in an in-house
  compiler written in Haskell.

  In order for the Coq code to be usable from Haskell, it is first extracted
  from Coq as a Haskell library, during which many of Coq's fundamental types
  are mapped directly onto counterparts in the Haskell Prelude.

  Note that not every conceivable property of this library has been proven.
  For some of the lower layers this is true, because the algebraic constraints
  on these components could be exhaustively described in the context of their
  use. However, higher-level components represent a great variety of use
  cases, and not every one of these cases has been proven correct. This
  represents an ongoing effort, with the hope that proofs will entirely
  replace the necessity for ad hoc unit testing, and that at some point we can
  know that any allocation produced by this library must either fail, or be
  mathematically sound. In the absence of some complete coverage, this version
  of the library provides an optional, runtime verifier to confirm
  expectations of correctness, since it is easier to prove the validity of
  generated data, than of how it was generated.

  This library's sole entry point is the function 'LinearScan.allocate', which
  takes a list of basic blocks, and a functional characterization of those
  blocks, and produces a new list, with register allocations applied to their
  component operations.
license-name: BSD-3-Clause
