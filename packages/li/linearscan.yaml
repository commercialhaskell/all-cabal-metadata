all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.7.0
- 0.8.0
- 0.9.0
- 0.10.0
- 0.10.1
- 0.10.2
- '0.11'
- 0.11.1
- 1.0.0
author: John Wiegley
basic-deps:
  base: '>=4.7 && <5.0'
  containers: '>=0'
  ghc-prim: '>=0'
  mtl: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: |-
  The @linearscan@ library is an implementation -- in Coq, extracted to
  Haskell -- of a register allocation algorithm developed by Christian Wimmer.
  It is described in detail in his Masters thesis, which can be found at
  <http://www.christianwimmer.at/Publications/Wimmer04a/Wimmer04a.pdf>.  A
  Java implementation of this same algorithm, by that author, is used in
  Oracle's Graal project. It has also been implemented in C++ by Mozilla.

  This version of the algorithm was written and verified in Coq, containing
  over 231 proved lemmas, at over 10K LOC. It was funded as a research project
  by BAE Systems (<http://www.baesystems.com>), to be used in an in-house
  compiler written in Haskell.

  In order for the Coq code to be usable from Haskell, it is first extracted
  from Coq as a Haskell library, during which many of Coq's fundamental types
  are mapped directly onto counterparts in the Haskell Prelude.

  This library's sole entry point is the function 'LinearScan.allocate', which
  takes a list of basic blocks, and a functional characterization of those
  blocks, and produces a new list, with register allocations applied to their
  component operations.
description-type: haddock
hash: e39175bfe5e10fef95a2d6e21545400c2d3b2bc8d52d7938a3ad72c981a1c5d8
homepage: http://github.com/jwiegley/linearscan
latest: 1.0.0
license-name: BSD-3-Clause
maintainer: johnw@newartisans.com
synopsis: Linear scan register allocator, formally verified in Coq
test-bench-deps: {}
