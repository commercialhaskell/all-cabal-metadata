homepage: ''
changelog-type: markdown
hash: febe888e6665ed159d3b469a79046e0be562670db75f23520aaac7dc18541cb9
test-bench-deps:
  string-interpolate: -any
  base: ==4.*
  data-default: -any
  lima: -any
  optparse-applicative: -any
  aeson: -any
  yaml: -any
maintainer: Danila Danko
synopsis: (Haskell or Literate Haskell) <-> Markdown converter
changelog: |
  # Revision history for LiterateMarkdown

  ## 0.1.0.1 -- 2020-08-29

  * code maintainability improvements and update to newer `base` version

  ## 0.1.0.0 -- 2020-04-11

  * First version. Released on an unsuspecting world.
basic-deps:
  base: ==4.*
  data-default: -any
  lima: -any
  optparse-applicative: -any
  aeson: -any
  yaml: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
author: Fabian Schneider
latest: 0.1.0.6
description-type: markdown
description: "# lima\n\nConvert between\n\n- `Haskell` (`.hs`) and `GitHub Flavored
  Markdown` (`.md`)\n- `Literate Haskell` (`.lhs`) and `GitHub Flavored Markdown`
  (`.md`).\n\nIt is usually possible to make conversion abide the [roundtrip property](https://jesper.sikanda.be/posts/quickcheck-intro.html).
  In other words, make conversions `file.lhs` -> `file.lhs.md` -> `file.lhs.md.lhs`
  or `file.hs` -> `file.hs.md` -> `file.hs.md.hs` and get `file.lhs = file.lhs.md.lhs`
  and `file.hs = file.hs.md.hs` in terms of their contents.\n\n## Demo\n\n![demo](https://github.com/deemp/flakes/blob/main/lima/README/demo.png?raw=true)\n\n##
  Alternatives\n\n- [LiterateMarkdown](https://github.com/haskie-lambda/LiterateMarkdown).
  `lima` is a fork of this (abandoned?) project. Initially, I just wanted to fix some
  bugs, but then realized that I can't conveniently use `Haskell Language Server`
  with `.lhs` files so I added the `.hs` -> `.md` conversion.\n\n- [IHaskell](https://github.com/IHaskell/IHaskell)
  - create `Jupyter` notebooks with `Haskell` code cells and `GitHub Flavored Markdown`
  text cells and do much more!\n\n## Conversion\n\n### .hs -> .md\n\n#### Examples\n\n1.
  [hs](./testdata/hs/input0.hs) -> [hs.md](./testdata/hs/input0.hs.md) -> [hs.md.hs](./testdata/hs/input0.hs.md.hs)\n\n####
  Rules\n\n- **Multiline comments**:\n  - Become text blocks.\n  - Should be written:\n
  \   - in `GitHub Flavored Markdown`;\n    - on one line: `{- <COMMENTS> -}`;\n    -
  on many lines: `{-\\n<COMMENTS>\\n-}`.\n  - Split `Haskell` code in `.md`.\n- **Special
  comments**:\n  - Become comments in `.md`.\n  - Can be supplied in a config via
  `lima --config <your config path>` ([sample config](./testdata/config/))\n  - Should
  be written on a single line: `{- <COMMENTS> -}`\n  - `{- LIMA_INDENT N -}` increases
  the indentation of snippets by `N`\n  - `{- LIMA_DEDENT -}` sets the indentation
  of snippets to `0`\n  - `{- LIMA_DISABLE -}` starts copying the following lines
  verbatim\n  - `{- LIMA_ENABLE -}` stops copying the following lines verbatim\n-
  **Code and single-line comments**:\n  - Become `hs` snippets in `.md`\n\n### .lhs
  -> .md\n\n#### Examples\n\n1. [hs](./testdata/lhs/input0.lhs) -> [hs.md](./testdata/lhs/input0.lhs.md)
  -> [hs.md.hs](./testdata/lhs/input0.lhs.md.lhs)\n1. [hs](./testdata/lhs/input1.lhs)
  -> [hs.md](./testdata/lhs/input1.lhs.md) -> [hs.md.hs](./testdata/lhs/input1.lhs.md.lhs)\n\n####
  Rules\n\n- **Text**:\n  - As `.lhs` doesn't support `#` (heading) or `>` (quotation
  start) at a line beginning, write ` #` and ` >` instead. `lhs` -> `lhs.md` -> `lhs.md.lhs`:\n\n
  \   - <code>&nbsp;#</code> -> `#` -> <code>&nbsp;#</code>\n    - <code>&nbsp;></code>
  -> `>` -> <code>&nbsp;></code>\n- **Snippets**:\n\n  - `>` is for `Haskell` code.
  There should be an empty line before and after the block with `Haskell` code\n  -
  `<` is for any other code. Such code will be converted into code blocks of type
  `console` in `.md`\n  - Snippets in <code>\\`\\`\\`</code> become <code>\\`\\`\\`console</code>
  and then `<`.\n    - The round-trip property is not guarranteed\n\n## Command-line
  tool\n\n### From Hackage\n\n1. Install via cabal\n\n    ```console\n    cabal update\n
  \   cabal install lima\n    ```\n\n### From sources\n\n1. Clone this repo and install
  `lima`.\n\n    ```console\n    git clone https://github.com/deemp/flakes\n    cd
  flakes/lima\n    cabal update\n    cabal install .\n    ```\n\n### Nix\n\n1. [Install
  Nix](https://github.com/deemp/flakes/blob/main/README/InstallNix.md)\n\n1. Get `lima`
  on `PATH`.\n\n    ```console\n    nix flake lock github:deemp/flakes?dir=lima\n
  \   nix shell github:deemp/flakes?dir=lima\n    lima --help\n    ```\n\n### Windows\n\nWarning:
  took it from [LiterateMarkdown](https://github.com/haskie-lambda/LiterateMarkdown).\n\nTo
  install the executable on `Windows`, if you can't convince cabal to use [`--bindir-method=copy`](https://github.com/haskell/cabal/issues/5748)
  you can build the project locally and copy the built executable to `C:/Users/username/AppData/Roaming/cabal/bin`
  and ensure that this directory is in your `PATH`.\n\n## build-tool-depends\n\nYou
  can use `lima` to generate your docs, e.g., via `cabal test docs`. Just provide
  such a test with a script that converts (and, possibly, combines) files. As you'll
  use `lima` in a script, you should add it to that test's [build-tool-depends](https://cabal.readthedocs.io/en/3.8/cabal-package.html#pkg-field-build-tool-depends):\n\n
  \ ```cabal\n  build-tool-depends:\n      lima:lima ==0.1.*\n  ```\n\n### Nix flake\n\n1.
  Add `lima` to inputs:\n  \n  ```nix\n  inputs.lima.url = \"github:deemp/flakes?dir=lima\";\n
  \ ```\n\n1. Add `lima` to the override of your package\n\n  ```nix\n  override =
  {\n    overrides = self: super: {\n      myPackage = overrideCabal\n        (super.callCabal2nix
  myPackageName ./. { })\n        (x: {\n          testHaskellDepends = [\n            (super.callCabal2nix
  \"lima\" \"${lima.outPath}/lima\" { })\n          ] ++ (x.testHaskellDepends or
  [ ]);\n        });\n    };\n  };\n  ```\n\n1. Use `cabal v1-test` so that `cabal`
  uses the supplied `lima`.\n\n## Contribute\n\nClone this repo and enter `lima`\n\n```console\ngit
  clone https://github.com/deemp/flakes\ncd flakes/lima\n```\n\n### cabal\n\nBuild
  as usually\n\n```console\ncabal update\ncabal build\n```\n\n### nix\n\n1. [Install](https://github.com/deemp/flakes/blob/main/README/InstallNix.md)
  `Nix`.\n\n1. Run a devshell and build `lima`:\n\n    ```console\n    nix develop
  nix-dev/\n    cabal build\n    ```\n\n1. Optionally, start `VSCodium`:\n\n    ```console\n
  \   nix run nix-dev/#writeSettings\n    nix run nix-dev/#codium .\n    ```\n\n1.
  Open a `Haskell` file there, hover over a term and wait until `HLS` shows hints.\n\n1.
  [Troubleshoot](https://github.com/deemp/flakes/blob/main/README/Troubleshooting.md)
  if necessary.\n"
license-name: MIT
