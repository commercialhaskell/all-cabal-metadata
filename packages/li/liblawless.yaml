all-versions:
- 0.13.0
- 0.13.1
- 0.13.2
- 0.13.3
- 0.14.0.1
- 0.14.0.2
- 0.14.0.3
- 0.14.0.4
- 0.16.0
- 0.16.1
- 0.17.0
- 0.17.1
- 0.17.2
- 0.17.3
- 0.18.0
- 0.18.2
- 0.18.3
- 0.19.0
- 0.19.1
- 0.19.2
- 0.19.3
- 0.19.4
- 0.19.5
- 0.20.1
- 0.20.2
- 0.21.0
- 0.21.1
- 0.21.2
- 0.21.3
- 0.23.0
- 0.23.1
- 0.24.0
- 0.25.2
- 0.26.0
author: Evan Cofsky
basic-deps:
  QuickCheck: '>=2.8 && <2.10'
  aeson: '>=0.11.2 && <0.12'
  base: '>=4.9 && <5'
  base-unicode-symbols: '>=0.2.2 && <0.3'
  binary: '>=0.8.3 && <0.9'
  boomerang: '>=1.4.5.2 && <1.5'
  bytestring: '>=0.10.8 && <0.11'
  containers: '>=0.5.7 && <0.6'
  containers-unicode-symbols: '>=0.3.1 && <0.4'
  contravariant: '>=1.4 && <1.5'
  data-textual: '>=0.3.0 && <0.4'
  dns: '>=2.0.8 && <2.1'
  exceptions: '>=0.8.3 && <0.9'
  hjsonschema: '>=1.6.2 && <1.9'
  lawless-concurrent-machines: '>=0.2.3.3 && <0.5'
  lens: '>=4.14 && <4.16'
  lifted-async: '>=0.9.1.1 && <0.10'
  lifted-base: '>=0.2.3 && <0.3'
  machines: '>=0.6.1 && <0.7'
  managed: '>=1.0.5 && <1.1'
  monad-control: '>=1.0.1.0 && <1.1'
  mtl: '>=2.2.1 && <2.3'
  network: '>=2.6.3.1 && <2.7'
  network-ip: '>=0.3 && <0.4'
  parsers: '>=0.12.4 && <0.13'
  pathtype: '>=0.8 && <0.9'
  protolude: '>=0.1.10 && <0.4'
  random: '>=1.1 && <1.2'
  semigroups: '>=0.18.2 && <0.19'
  stm: '>=2.4.4 && <2.5'
  stm-chans: '>=3.0.0.4 && <3.1'
  stm-containers: '>=0.2.15 && <0.3'
  temporary: '>=1.2.0 && <1.3'
  text: '>=1.2.2 && <1.3'
  text-printer: '>=0.4 && <0.5'
  time: '>=1.6.0 && <1.9'
  transformers: '>=0.5.2 && <0.6'
  transformers-base: '>=0.4.4 && <0.5'
  zippers: '>=0.2.2 && <0.3'
changelog: "2017-03-06  Evan Cofsky  <evan@theunixman.com>\n\n\t* liblawless.cabal
  (0.17.3): 0.17.3\n\t* Source/Path.hs: Export more pathtype functions.\n\n\t* liblawles.cabal
  (0.17.2): 0.17.2\n\t* Source/Path.hs: Export the path operators.\n\t* test.sh: Build
  and run tests.\n\t* hackage.sh: Upload tagged package to hackage.\n\n2016-12-17
  \ Evan Cofsky  <evan@theunixman.com>\n\n\t* liblawless.cabal: Add new tests and
  Arbitrary module.\n\n\t* Tests/TestAesonEncoding.hs: Tests for the JSON field encoding\n\tlogic.\n\n\t*
  Source/Arbitrary.hs: Instances of Arbitrary for various useful\n\ttypes.\n\n\t*
  Tests: Use new Arbitrary instances.\n\n2016-12-16  Evan Cofsky  <evan@theunixman.com>\n\n\t*
  liblawless.cabal (0.14.0.3):\n\tUse dns-2.0.8 which is available in Debian.\n\tUpdate
  location information for this release.\n\n\t* Examples/ZFS/zpools.yaml: Rename from
  zpool.yaml.\n\n\t* liblawless.cabal: Uncomment ZFS example build.\n\n\t* Source/Yaml.hs:
  Import and export Generics here, too.\n\n\t* Examples/ZFS: Create Types, use optics,
  add Main.hs.\n\n\t* Source/Aeson.hs: Rename molude to lawless.\n\n\t* Tests/TestAeson.hs:
  Rename molude to lawless.\n\n\t* liblawless.cabal (0.14.0): Adding Networking library,
  clearing\n\tup NFC Text, focusing more on examples and tests.\n\n\t* Source/Text.hs:
  Clearer notion of NFC optics vs regular Lens\n\toptics.\n\n\t* Source/Networking.hs:
  Created this file to start composing\n\tvarious network libraries together.\n"
changelog-type: text
description: |
  # liblawless: An Effectful Foundation

  ## Overview
  [liblawless][liblawless] is a replacement for the
  standard [Prelude][prelude]. It targets [GHC 8.0][ghc80] and
  newer. It's core is building a fine-grained but readily accessible
  Effect model to move more type checking of code that changes its
  environment out of plain IO.

  [prelude]: http://hackage.haskell.org/package/base
  [liblawless]: https://www.lambdanow.us/wiki/LearningProjects/liblawless
  [ghc80]: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/index.html

  ## Pure vs Effectful Functions
  Pure functions don't affect the anything outside of the function. A
  Pure function will run a calculation on the given values, and return a
  result. If you pass in the same parameters, you'll always get the same
  result no matter how many times you call the function.

  Effectful functions are functions that do affect the program outside
  the function, and often the environment outside the computer running
  them. Even with the same parameters, Effectful Functions can return
  different results. In many cases they can even return signals that
  completing their task wasn't possible. In many languages these are
  called "Side Effects", and aren't modeled in the type system at
  all. Haskell comes with a simple Effect model in its type system,
  the [io][IO monad].

  [io]: http://hackage.haskell.org/package/base-4.9.0.0/docs/System-IO.html#t:IO

  ## Kinds of Effects
  The [io][IO monad] models Effects a function has on the world outside
  the program. There are other, more limited Effects as well, and there
  are libraries for managing these as well. The two most common are:

  - [transformers][Transformers]
  - [mtl][The MTL]

  [transformers]: http://hackage.haskell.org/package/transformers Transformers
  [mtl]: http://hackage.haskell.org/package/mtl

  These model Effects that only apply to the current program, while the
  IO monad models ''all other effects'' on the world. That's a really
  broad brush. Most bugs in Haskell code are in the IO monad.

  This project is implementing several extra types of Effects that
  affect the world. Instead of treating them all the same, though, it
  breaks them up into much smaller kinds of Effects. For example, for
  accessing files, it's possible to:

  - read bytes from a file
  - write bytes to a file
  - read lines of text from a file
  - write lines of text from a file
  - read arbitrary data from a file, operate on these data items, and
    write them to a network stream
  - many other simple and complex operations

  We are building them on top of the [machines][Machines] library. This
  library offers a composable model for connecting strongly-typed
  streams together. It also implements provisions for arbitrary effects,
  and connecting Effectful functions with Pure functions into streams of
  computations. When combined with the [async][Async] library, these
  streams, and even individual nodes in these streams, can be run
  concurrently and safely, making full use of multicore systems.

  [machines]: http://hackage.haskell.org/package/machines
  [async]: http://hackage.haskell.org/package/async
description-type: markdown
hash: 5e67383ff63e9d270b9b1eeded2f59d819b8266fe73fded2f2f9e2549ed4d692
homepage: https://gitlab.com/theunixman/liblawless
latest: 0.26.0
license-name: GPL-3.0-only
maintainer: evan@theunixman.com
synopsis: Prelude based on protolude for GHC 8 and beyond.
test-bench-deps:
  QuickCheck: '>=2.8 && <2.10'
  aeson: <1.0
  base: '>=4.9 && <5'
  binary: '>=0.7.5.0'
  bytestring: '>=0'
  exceptions: '>=0.8.3'
  filepath: '>=1.4.0.0'
  liblawless: '>=0'
  temporary: '>=1.2.0.4'
  test-framework: '>=0'
  test-framework-quickcheck2: '>=0'
  test-framework-th: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0.4.2.0'
