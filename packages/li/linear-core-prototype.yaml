all-versions:
- 0.1.0.0
author: Rodrigo Mesquita
basic-deps:
  base: '>=4.18 && <5'
  bytestring: '>=0.11 && <0.13'
  containers: '>=0.6 && <0.8'
  ghc: '>=9.6 && <9.12'
  mtl: '>=2.2 && <3'
  template-haskell: '>=2.21 && <2.24'
  text: '>=2.0 && <2.2'
changelog: |
  # Revision history for linear-core-prototype

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "Overview\n===\n\nLinear Core is a type system that understands linearity
  in the presence of\nlaziness, unlike traditional type systems which fail to see
  linearity when\nnon-strictness makes it less apparent (e.g. by aliasing).\n\nThis
  interaction arises naturally in languages with both linearity and\nnon-strictness,
  or in linear strict languages with lazy features.\n\nThat said, our primary motivation
  is the intermediate language of the Glasgow\nHaskell Compiler, called Core -- a
  language which not only combines linearity\nwith laziness, but also aggressively
  transforms these programs during the\noptimisation passes.\n\nIn fact, Core's linear
  type system cannot understand linearity soon after\noptimisations start being applied
  because they transform the program in a way\nwhich makes linearity no longer syntactic,
  but still valid. The compiler\noptimisations should never turn a linear program
  into a non-linear one, and\nbeing able to validate linearity throughout the optimisation
  pipeline, like it\ndoes types, is invaluable as a sanity-check to identify and prevent
  bugs.\nAt the moment, the linearity information is simply thrown away before\noptimisations.\n\nClaims\n===\n\nOur
  artifact contains a prototype implementation of Linear Core as a plugin for\nthe
  Glasgow Haskell Compiler (GHC). The plugin validates the linearity, according to\nLinear
  Core, at the start of every optimisation pass, of every intermediate\nprogram. It
  will never interrupt compilation, simply printing FAILED when an\nintermediate program
  is not accepted by our implementation of Linear Core.\n\nWe believe Linear Core
  is a good target for the intermediate language of GHC\nbecause, while being an extension
  of the existing intermediate language, can\nreconcile linearity and laziness in
  a way robust to all optimisations carried\nout by GHC. Our prototype displayed this
  in practice by accepting almost every\nprogram produced by the GHC pipeline, while
  rejecting very few -- including\nidentifying programs which are truly invalid.\n\nWe
  claim our prototype accepts the vast majority of programs produced by the\ncompiler
  when compiling linearity-heavy Haskell libraries (over 99% of\nintermediate programs
  from the libraries we tested it on).\n\nInstallation\n===\n\nInstallation requires
  an installation of GHC 9.10. We recommend downloading it using [GHCup](https://www.haskell.org/ghcup/):\n```\nexport
  BOOTSTRAP_HASKELL_GHC_VERSION=9.10.3\ncurl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org
  | sh\n```\n\nMake sure it succeeded and that cabal packages are up to date by running:\n```\nghc
  --version\ncabal --version\ncabal update\n```\n\nSecond, we need to download the
  packages we want to test using the `linear-core-prototype` plugin.\nWe tested the
  plugin on the largest open linear Haskell packages we found: [`linear-base`](https://github.com/tweag/linear-base),
  [`priority-sesh`](https://github.com/wenkokke/priority-sesh), [linear-smc](https://github.com/jyp/linear-smc)\n\nHow
  to reproduce the plugin results\n===\n\nLet's reproduce the results individually
  for the three packages. Note: the\nnumbers will not match exactly due to changes
  in the compiler since the numbers\nwere first produced, but the vast majority of
  intermediate programs should be\naccepted and only few rejected.\n\n### linear-base\n\n1.
  Fetch the source\n\n```\ncabal get linear-base-0.5.0\ncd linear-base-0.5.0\n```\n\n2.
  Add the plugin to `linear-base.cabal`:\n```diff\ndiff --git a/linear-base.cabal
  b/linear-base.cabal\nindex efab84d..4f7a57e 100644\n--- a/linear-base.cabal\n+++
  b/linear-base.cabal\n@@ -144,6 +144,8 @@ library\n         transformers,\n         vector
  >=0.12.2,\n         primitive\n+    build-depends: linear-core-prototype == 0.1.0.0\n+
  \   ghc-options: -fplugin=Linear.Core.Plugin\n \n library examples\n     import:
  build-opts\n```\n\n3. Build the package and pipe to `output`:\n\n```\ncabal build
  linear-base 2>&1 | tee output\n```\n\n4. Compute the metrics:\n```\necho \"TOTAL
  REJECTED:\"\ncat output | grep -A1 FAILED | grep -e '^  ' | wc -l\n\necho \"UNIQUE
  REJECTED:\"\ncat output | grep -A1 FAILED | grep -e '^  ' | sort | uniq | wc -l\n\necho
  \"TOTAL ACCEPTED\"\ngrep SUCCESS output | awk '{print $2}' | tr '\\n' '+' | sed
  's/+$//' | bc\n```\n\n### linear-smc\n\nAs above, but for a different package:\n\n1.
  Fetch the source\n```\ncabal get linear-smc-2.2.3\ncd linear-smc-2.2.3\n```\n\n2.
  Add the plugin to `linear-base.cabal`:\n```diff\ndiff --git a/linear-smc.cabal b/linear-smc.cabal\nindex
  d3d3226..f76eae3 100644\n--- a/linear-smc.cabal\n+++ b/linear-smc.cabal\n@@ -83,6
  +83,8 @@ library\n     build-depends: constraints >= 0.13.4 && < 666\n     build-depends:
  array >= 0.5 && < 666\n     build-depends:    base >=4.16.4.0 && < 666\n+    build-depends:
  linear-core-prototype == 0.1.0.0\n+    ghc-options: -fplugin=Linear.Core.Plugin\n
  \n     -- Directories containing source files.\n     hs-source-dirs:   .\n```\n\n3.
  Build the package and pipe to `output`:\n```\ncabal build linear-smc 2>&1 | tee
  output\n```\n\n4. Compute the metrics:\n```\necho \"TOTAL REJECTED:\"\ncat output
  | grep -A1 FAILED | grep -e '^  ' | wc -l\n\necho \"UNIQUE REJECTED:\"\ncat output
  | grep -A1 FAILED | grep -e '^  ' | sort | uniq | wc -l\n\necho \"TOTAL ACCEPTED\"\ngrep
  SUCCESS output | awk '{print $2}' | tr '\\n' '+' | sed 's/+$//' | bc\n```\n\n###
  priority-sesh\n\n1. Fetch sources\n```\ngit clone https://github.com/wenkokke/priority-sesh.git\ncd
  priority-sesh\n```\n\n2. Add the plugin\n```diff\ndiff --git a/priority-sesh.cabal
  b/priority-sesh.cabal\nindex 28b51ac..12b3aba 100644\n--- a/priority-sesh.cabal\n+++
  b/priority-sesh.cabal\n@@ -40,6 +40,8 @@ library\n                     , Data.Type.Priority\n
  \                    , System.IO.Linear.Cancellable\n   hs-source-dirs:     src\n+
  \ build-depends: linear-core-prototype == 0.1.0.0\n+  ghc-options: -fplugin=Linear.Core.Plugin\n
  \n test-suite test-priority-sesh\n   import:             common-depends\n```\n\n3.
  Build the package\n```\ncabal build priority-sesh --allow-newer=linear-base 2>&1
  | tee output\n```\n\n4. Compute the metrics with the same commands as above\n\nHow
  to reproduce the plugin results in its general form:\n===\n\n1. Add `linear-core-prototype`
  to the `build-depends` of the package you want to\n   validate\n2. Add `-fplugin=Linear.Core.Plugin`
  to the `ghc-options` field of the package\n   you want to validate\n\n1. Output
  `cabal build` into a file `output`, e.g. `cabal build lib:linear-base -j1 2>&1 |
  tee output`\n2. Print out total number of failures\n    ```\n    cat output | grep
  -A1 FAILED | grep -e '^  ' | wc -l\n    ```\n2. Print out number of unique failures\n
  \   ```\n    cat output | grep -A1 FAILED | grep -e '^  ' | sort | uniq | wc -l\n
  \   ```\n3. Print out total number of successes\n    ```\n    grep SUCCESS output
  | awk '{print $2}' | tr '\\n' '+' | sed 's/+$//' | bc\n    ```\n\n"
description-type: markdown
hash: 0bc2d132c79dc9d2f4b3657b433b24f498ed8dfc285ea57cc9057c1b0da3cd35
homepage: ''
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: rodrigo.m.mesquita@gmail.com
synopsis: Linear core validates optimizations wrt linearity
test-bench-deps:
  base: '>=4.18 && <5'
  bytestring: '>=0.11 && <0.13'
  containers: '>=0.6 && <0.8'
  ghc: '>=9.6 && <9.12'
  linear-core-prototype: '>=0'
  mtl: '>=2.2 && <3'
  tasty: <1.5
  tasty-hunit: <0.11
  template-haskell: '>=2.21 && <2.24'
  text: '>=2.0 && <2.2'
