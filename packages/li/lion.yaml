homepage: ''
changelog-type: markdown
hash: 4dfe29dcdbec0aef1dee6c29e6e212fcc7ab8472f4504c48a66c601c70120585
test-bench-deps: {}
maintainer: dopamane <standard.semiconductor@gmail.com>
synopsis: RISC-V Core
changelog: |
  # Revision history for lion

  ## 0.2.0.0 -- 2021-03-27

  * Update core/memory/peripheral interface
  * Configurable ALU: choose between SB_MAC16 or generic (+) and (-)
  * Optimize branch path for better fMax

  ## 0.1.0.0 -- 2021-02-28

  * First version.
  * RV32I (no FENCE, ECALL, EBREAK)
basic-deps:
  clash-prelude: '>=1.2.5 && <1.5'
  Cabal: -any
  base: '>=4.13 && <4.15'
  ghc-typelits-knownnat: -any
  ghc-typelits-natnormalise: -any
  ghc-typelits-extra: -any
  lens: '>=4.19 && <5.1'
  generic-monoid: '>=0.1 && <0.2'
  mtl: '>=2.2 && <2.3'
  ice40-prim: '>=0.3 && <0.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: dopamane <standard.semiconductor@gmail.com>
latest: 0.2.0.0
description-type: markdown
description: "# Where Lions Roam: RISC-V on the VELDT\n\n[![Haskell CI](https://github.com/standardsemiconductor/lion/actions/workflows/haskell.yml/badge.svg?branch=main)](https://github.com/standardsemiconductor/lion/actions/workflows/haskell.yml)\n[![Hackage][hackage-badge]][hackage]\n[![Hackage
  Dependencies][hackage-deps-badge]][hackage-deps]\n\nLion is a formally verified,
  5-stage pipeline [RISC-V](https://riscv.org) core. Lion targets the [VELDT FPGA
  development board](https://standardsemiconductor.com) and is written in Haskell
  using [Clash](https://clash-lang.org).\n\nThis repository contains four parts:\n
  \ 1. The Lion library: a pipelined RISC-V core.\n  2. [lion-formal](https://github.com/standardsemiconductor/lion/tree/main/lion-formal):
  formally verify the core using [riscv-formal](https://github.com/standardsemiconductor/riscv-formal/tree/lion).\n
  \ 3. [lion-soc](https://github.com/standardsemiconductor/lion/tree/main/lion-soc):
  a System-on-Chip demonstrating usage of the Lion core on the VELDT.\n  4. [lion-metric](https://github.com/standardsemiconductor/lion/tree/main/lion-metric):
  Observe Yosys synthesis metrics on the Lion Core.\n\n## Lion library\n### Usage:\n1.
  Add `lion` to build depends section of Cabal file\n2. import module in source files
  `import Lion.Core`\n\nWhen connecting the `core` to memory and peripherals, ensure
  single cycle latency.\n\n## Clone the repository\n1. `git clone https://github.com/standardsemiconductor/lion.git`\n2.
  `cd lion`\n3. `git submodule update --init`\n\n## Features\n### Current Support\n*
  Architecture: RV32I (no FENCE, ECALL, EBREAK)\n* Configurable ALU adder and subtractor:
  use a generic (+) and (-) or SB_MAC16 hard IP\n\n### Future Support \n**All features
  will be added in a configurable manner extending the base RV32I configuration noted
  above**\n* Zicsr, Control and Status Register (CSR) Instructions\n* CSR registers\n*
  RV32IM\n\nCheck out the [Lion Development project](https://github.com/standardsemiconductor/lion/projects/1)
  to see which features are in progress.\n\n[hackage]:            <https://hackage.haskell.org/package/lion>\n[hackage-badge]:
  \     <https://img.shields.io/hackage/v/lion.svg?color=success>\n[hackage-deps-badge]:
  <https://img.shields.io/hackage-deps/v/lion.svg>\n[hackage-deps]:       <http://packdeps.haskellers.com/feed?needle=lion>\n"
license-name: BSD-3-Clause
