all-versions:
- '0.1'
- '0.2'
- 0.2.1
author: Remi Turk
basic-deps:
  base: '>=3 && <5'
  bytestring: '>=0'
changelog: "## 0.2.1 [2022.09.24]\r\n* Add `sizeAndAlignmentOfCType` to `Foreign.LibFFI.Base`,
  which can be used to\r\n  retrieve the size and alignment of a `CType`.\r\n\r\n##
  0.2 [2022.08.11]\r\n* The `libffi` library now uses `bracket` internally and should
  now be\r\n  exception-safe.\r\n* There is a now a `ghc-bundled-libffi` `cabal` flag
  that makes this library\r\n  statically link against GHC's bundled copy of `libffi`
  rather than attempt to\r\n  link against the system `libffi`. On the vast majority
  of GHCs, this is the\r\n  most reasonable option, as linking against the system
  `libffi` is inherently\r\n  fragile. As a result, `+ghc-bundled-libffi` is now the
  defalut setting. See\r\n  the [`README`](https://github.com/remiturk/libffi/blob/master/README.md#notes-on-ghcs-bundling-of-libffi)\r\n
  \ for more discussion on this point.\r\n* The definition of `Arg` has changed:\r\n\r\n
  \ ```diff\r\n  -newtype Arg = Arg { unArg :: IO (Ptr CType, Ptr CValue, IO ()) }\r\n
  \ +newtype Arg = Arg { unArg :: forall a. (Ptr CType -> Ptr CValue -> IO a) -> IO
  a }\r\n  ```\r\n* The definition of `RetType` has changed:\r\n  ```diff\r\n  -data
  RetType a = RetType (Ptr CType) ((Ptr CValue -> IO ()) -> IO a)\r\n  +newtype RetType
  a = RetType { unRetType :: (Ptr CType -> Ptr CValue -> IO ()) -> IO a }\r\n  ```\r\n\r\n##
  0.1 [2009.03.17]\r\n* Initial release.\r\n"
changelog-type: markdown
description: "# `libffi`\r\n[![Hackage](https://img.shields.io/hackage/v/libffi.svg)][Hackage:
  libffi]\r\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/libffi.svg)](http://packdeps.haskellers.com/reverse/libffi)\r\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\r\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\r\n[![Linux build](https://github.com/remiturk/libffi/workflows/Haskell-CI/badge.svg)](https://github.com/remiturk/libffi/actions?query=workflow%3AHaskell-CI)\r\n\r\n[Hackage:
  libffi]:\r\n  http://hackage.haskell.org/package/libffi\r\n  \"libffi package on
  Hackage\"\r\n[Haskell.org]:\r\n  http://www.haskell.org\r\n  \"The Haskell Programming
  Language\"\r\n[tl;dr Legal: BSD3]:\r\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\r\n
  \ \"BSD 3-Clause License (Revised)\"\r\n\r\nA binding to `libffi`, allowing C functions
  of types only known at runtime to be called from Haskell.\r\n\r\n# Notes on GHC's
  bundling of `libffi`\r\n\r\nThis library makes a somewhat unusual choice: by default,
  it does not\r\nexplicitly declare a dependency against the `libffi` C library. This
  is because\r\nmost binary distributions of GHC—that is, GHCs configured without
  the\r\n`--with-system-libffi` option—bundle their own copies of `libffi`. One of
  these\r\ncopies is statically linked, and another of these copies is dynamically
  linked.\r\nMoreover, whenever GHC compiles an executable, it will always pass the\r\nnecessary
  flags to link against its static copy of `libffi`, as the GHC runtime\r\nsystem
  depends on it.\r\n\r\nWhen GHC bundles its own copies of `libffi`, if you were to
  declare, say, an\r\n`extra-libraries: ffi` dependency, then it would not behave
  in the way that you\r\nwould expect. This is because:\r\n\r\n1. The linker flags
  to link against GHC's static copy of `libffi` always come\r\n   first in the final
  linking step when compiling an executable. As a result,\r\n   declaring an `extra-libraries:
  ffi` dependency won't make much of a\r\n   difference, since GHC will always statically
  link against its own copy of\r\n   `libffi` anyway due to the order of linker flags.\r\n\r\n2.
  Moreover, declaring an `extra-libraries: ffi` dependency can have the\r\n   unfortunate
  side effect of declaring an _unused_ dynamic dependency against\r\n   `libffi`.
  Even worse is the fact that the version of dynamically linked\r\n   `libffi` that
  comes with your operating system may differ from the version\r\n   of dynamically
  linked `libffi` that GHC bundles. When the version numbers\r\n   differ, this can
  lead to the compiled executable failing at runtime with\r\n   mysterious errors
  such as:\r\n\r\n   ```\r\n   error while loading shared libraries: libffi.so.7:
  cannot open shared object file: No such file or directory\r\n   ```\r\n\r\n   For
  more information on this point, see\r\n   [GHC#15397](https://gitlab.haskell.org/ghc/ghc/-/issues/15397).\r\n\r\nObservation
  (2) means that when GHC is configured with `--with-system-libffi`,\r\nit is inherently
  fragile to use `extra-libraries: ffi`. This is an unfortunate\r\nsituation, but
  there is not much that one can do about this short of fixing\r\nGHC#15397 upstream.
  A workaround would be to configure GHC with\r\n`--with-system-libffi`, but practically
  speaking, the vast majority of GHC\r\nbinary distributions do not configure this
  way. This includes all versions of\r\nGHC that `ghcup` distributes, so unless we
  want to exclude most GHC users, we\r\nneed some kind of workaround for this issue.\r\n\r\nOur
  workaround is to rely on observation (1). That is, because GHC always\r\npasses
  flags to the linker to link against its own static copy of `libffi`, we\r\ncan always
  assume that GHC will handle the `libffi` dependency for us. As a\r\nresult, the
  default behavior for this library is to enable the\r\n`+ghc-bundled-libffi` flag,
  which means that the library will not declare an\r\nexternal dependency on `libffi`
  at all. This is rather unusual, but then again,\r\nGHC bundling its own copies of
  `libffi` is also unusual. (To our knowledge,\r\nthis is the _only_ C library that
  GHC bundles in this fashion.)\r\n\r\nWe have tested out `+ghc-bundled-libffi` on
  Windows, macOS, and Linux, and it\r\nworks as expected. If you encounter any linking
  oddities with\r\n`+ghc-bundled-libffi`, please file an issue.\r\n\r\nIt is worth
  re-emphasizing that `+ghc-bundled-libffi` will only work if you are\r\nusing a binary
  distribution of GHC that was not configured with the\r\n`--with-system-libffi` option.
  If you _are_ using such a GHC, then you will\r\nneed to use `-ghc-bundle-libffi`
  (note the minus sign) to disable the flag and\r\nlink against your operating system's
  copy of `libffi`. Unfortunately, `cabal`\r\ndoes not provide a way to detect whether
  GHC was configured with\r\n`--with-system-libffi` or not, so the burden is on users
  to enable or disable\r\n`ghc-bundle-libffi` as appropriate.\r\n"
description-type: markdown
hash: 72b41cefb799f3d3509c6cec8ecbf5023cf442c53a601aaaacee5872c722908b
homepage: http://haskell.org/haskellwiki/Library/libffi
latest: 0.2.1
license-name: BSD-3-Clause
maintainer: remi.turk@gmail.com
synopsis: A binding to libffi
test-bench-deps: {}
