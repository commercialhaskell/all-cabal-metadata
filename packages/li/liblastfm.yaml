all-versions:
- 0.0.1.0
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.0.3.1
- 0.0.3.2
- 0.0.3.3
- 0.0.3.4
- 0.0.3.5
- 0.0.3.6
- 0.0.3.7
- 0.0.3.8
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.2.0.0
- 0.3.0.0
- 0.3.2.0
- 0.4.0.0
- 0.4.1.0
- 0.5.0
- 0.5.1
- 0.6.0
- 0.7.0
author: Matvey Aksenov, Dmitry Malikov
basic-deps:
  aeson: '>=0'
  base: '>=4 && <5'
  bytestring: '>=0'
  cereal: '>=0'
  containers: '>=0.5'
  cryptonite: '>=0.7'
  http-client: '>=0.5'
  http-client-tls: '>=0.2'
  network-uri: '>=0'
  profunctors: '>=0'
  semigroups: '>=0'
  text: '>=0'
  transformers: '>=0'
  xml-conduit: '>=1.1'
changelog: |
  0.7.0
  =====

  0.6.1
  =====

    * Set default schema to 'https' (issue #27 fixed).

  0.6.0
  =====

    * Stopped using the deprecated stuff from http-client.

    * Removed `N.L.Response.closeConnection` as it's become a no-op.

    * Removed the "Network" prefix from the modules' names.

    * Set default schema to 'http', since ws.audioscrobbler.com has no proper SSL support (issue #27).

  0.5.1
  =====

    * Updated documentation to reflect the changes in `0.5.0`.

    * Dropped `void` and `contravariant` dependencies

  0.5.0
  =====

    * Fixed `http-client`'s `Manager` misuse: every call to `lastfm*` takes a
      `Connection` parameter now and multiple calls should share it.

  0.4.1.0
  =======

    * Updated `lens` dependency

    * Switched to `network-uri` package

  0.4.0.0
  =======

    * `http-conduit` exceptions aren't propagate further into user code anymore

    * XML responses are parsed into `Document` type from `xml-conduit`

  0.3.2.0
  =======

    * Fixed `auth.getMobileSession` API method

    * Provided `lastfm_` function for making requests without parsing response. That is most useful for `POST` requests like `N.L.Track.love`

  0.3.0.0
  =======

    * Supported batch operations for `N.L.Track.scrobble`, `N.L.Library.{addAlbum,addArtist}`

  0.2.0.0
  =======

    * Vastly simplified internal representations leading to simpler library interface
changelog-type: markdown
description: |
  liblastfm
  =========
  [![Hackage](https://budueba.com/hackage/liblastfm)](https://hackage.haskell.org/package/liblastfm)
  [![Build Status](https://secure.travis-ci.org/supki/liblastfm.png?branch=master)](https://travis-ci.org/supki/liblastfm)

  Complete API interface to [last.fm][last.fm] service.
  Documentation is available in two flavours:

    * original [API reference][last.fm/api]

    * liblastfm [haddocks][liblastfm/haddocks]

  Introduction
  ------------
  liblastfm provides Applicative interface for constructing requests. Also, it handles all machinery needed to prepare request for sending:

    * [signing][last.fm/sign]

    * url-encoding

    * miscellaneous stuff like choosing correct HTTP method, etc

  Once request is ready, liblastfm can send it and get you back a response.
  Response format might be:

    * [aeson][aeson] `Value` for json queries

    * [xml-conduit][xml-conduit] `Document` for xml queries

  Installation
  ------------
  To install either use hackage:

      % cabal install liblastfm

  Or git:

      % git clone git@github.com:supki/liblastfm
      % cd liblastfm
      % cabal install

  Usage
  -----
  Suppose, you need to use [`tag.search`][last.fm/api-usage] API method.
  First find it in liblastfm: `Tag` would be the name of the module and `search` would be the name of function. [Here it is][liblastfm/haddocks-usage].
  So import a couple of modules:

      >>> import           Lastfm            -- a bunch of useful utilities
      >>> import qualified Lastfm.Tag as Tag -- for Tag.search

  Now you may use applicative `<*>` for required and `<*` or `*>` for optional parameters to construct
  desired request:

      Tag.search <*> tag "russian-folk" <* limit 3 <*> apiKey "29effec263316a1f8a97f753caaa83e0" <* json

  To send constructed request use `lastfm`:

      >>> con <- newConnection
      >>> lastfm con $ Tag.search <*> tag "russian-folk" <* limit 10 <*> apiKey "29effec263316a1f8a97f753caaa83e0" <* json
      Right (Object (fromList [("results",Object (fromList [("tagmatches", ...

  [Wiki][liblastfm/wiki] describes how to parse responses.

  FAQ
  ---

  **Q: I'm getting the following error. How do I fix it?**

  ```
  >>> Artist.getInfo <*> artist "Pink Floyd" <*> apiKey "29effec263316a1f8a97f753caaa83e0"

  <interactive>:8:27:
      Couldn't match expected type `Data.Text.Lazy.Internal.Text'
                  with actual type `[Char]
  ```

  A: This means you haven't OverloadedStrings extension enabled.
  To enable it (either one works):

    * type in `:set -XOverloadedStrings` while in ghci session.

    * add `{-# LANGUAGE OverloadedStrings #-}` to the top of the file

    * compile with `-XOverloadedStrings` switch

  **Q: I'm getting the following error. How do I fix it?**

  ```
  >>> lastfm (Artist.getInfo <*> artist "Pink Floyd" <*> apiKey "29effec263316a1f8a97f753caaa83e0")

  <interactive>:13:1:
      No instance for (Show (IO (Either LastfmError r0)))
        arising from a use of `print'
      Possible fix:
        add an instance declaration for (Show (IO (Either LastfmError r0)))
      In the first argument of `print', namely `it'
      In a stmt of an interactive GHCi command: print it
  ```

  A: This error message indicates that GHC cannot infer response format for the `Request`.
  To fix it, add use `json` or `xml` helpers, depending on your needs

  A note on testing
  -----------------

  To test Lastfm API compatibility (`api` test suite)—specifically, authentication requiring
  examples—you will need to set `HASKELL_LIBLASTFM_APIKEY`, `HASKELL_LIBLASTFM_SESSIONKEY`,
  and `HASKELL_LIBLASTFM_SECRET` environment variables to your api key, session key, and
  secret respectively; for example (bash):

  ```bash
  export HASKELL_LIBLASTFM_APIKEY="__API_KEY__"
  export HASKELL_LIBLASTFM_SESSIONKEY="__SESSION_KEY__"
  export HASKELL_LIBLASTFM_SECRET="__SECRET__"
  ```

  Please, consult Lastfm API documentation and  `example/*-authentication.hs`
  examples if you don't know where to get your credentials.

   [last.fm]: http://www.last.fm/
   [last.fm/api]: http://www.last.fm/api/intro
   [last.fm/api-usage]: http://www.last.fm/api/show/tag.search
   [last.fm/sign]: http://www.last.fm/api/authspec#8
   [liblastfm/haddocks]: http://supki.github.io/liblastfm/
   [liblastfm/haddocks-usage]: http://supki.github.com/liblastfm/Network-Lastfm-Tag.html#v:search
   [liblastfm/wiki]: https://github.com/supki/liblastfm/wiki/How-to-parse-JSON-response
   [aeson]: https://hackage.haskell.org/package/aeson
   [xml-conduit]: https://hackage.haskell.org/package/xml-conduit
description-type: markdown
hash: 364452826204a5ea8994c1a42cf40f1c213ac201a381573992412fca8aac3d96
homepage: ''
latest: 0.7.0
license-name: MIT
maintainer: Matvey Aksenov <matvey.aksenov@gmail.com>
synopsis: Lastfm API interface
test-bench-deps:
  HUnit: '>=0'
  aeson: '>=0'
  base: '>=4 && <5'
  bytestring: '>=0'
  cereal: '>=0'
  containers: '>=0'
  cryptonite: '>=0'
  hspec: '>=0'
  hspec-expectations-lens: '>=0.3.0.0'
  http-client: '>=0'
  http-client-tls: '>=0'
  lens: '>=4.4'
  lens-aeson: '>=1.0.0.1'
  liblastfm: '>=0'
  network-uri: '>=0'
  profunctors: '>=0'
  text: '>=0'
  transformers: '>=0'
  xml-conduit: '>=0'
  xml-html-conduit-lens: '>=0.3'
