all-versions:
- 0.1.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
author: Amos Robinson
basic-deps:
  base: '>=4.9 && <5'
  containers: '>=0.5 && <0.7'
changelog: |
  0.3.2.3, 2018/11/13:
    * Fix pretty-printing bug: printed programs did not include final 'End' line, so cbc could not parse the programs
    * Relax the upper bound for containers dependency (contributed by @fumieval)
    * Update test dependencies
    * Update package description

  0.3.2.2, 2018/06/04:
    * Build -Wall clean with GHC 8.4.3
    * Relax the upper bound for base dependency
    * Add missing semigroup instances (contributed by @fumieval)

  0.3.2.1, 2015/07/21:
    * Naive implementations of two solving algorithms:
      * Branch-and-bound algorithm for mixed programs
      * Simplex algorithm for relaxed (real) programs
    * Add tests to package description

  0.3.2.0, 2014/11/02:
    * Error handling for simplifier

  0.3.1.0, 2014/09/19:
    * Simplifier for Canon programs
    * Pretty-printer for Canon programs

  0.3.0.0, 2014/09/03:
    * Simplify Canonical representation
    * Add evaluator for Program representation

  0.1.0.0, 2014/06/04:
    * Initial release
changelog-type: text
description: |+
  limp
  ====

  This package provides two representations for linear programs: "Numeric.Limp.Program", which is what I expect end-users to use, and
  "Numeric.Limp.Canon", which is simpler, but would be less nice for writing linear programs.
  You can convert programs from the Program representation to the Canon representation using "Numeric.Limp.Canon.Convert", and then pretty-print the program using "Numeric.Limp.Canon.Pretty".

  There is a very simple branch-and-bound solver in "Numeric.Limp.Solve.Branch.Simple", and a simplex solver for relaxed (real only) programs in "Numeric.Limp.Solve.Simplex.Maps".
  See the limp-cbc package for a simple external solver.

description-type: markdown
hash: d2802905557ebabe27f2146b0e4e7695998a8d5a170bfa5ab34a7a5ecc0148db
homepage: https://github.com/amosr/limp
latest: 0.3.2.3
license-name: MIT
maintainer: amos.robinson@gmail.com
synopsis: representation of Integer Linear Programs
test-bench-deps:
  QuickCheck: '>=0'
  base: <5
  containers: '>=0.5 && <0.7'
  limp: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0.8'
  tasty-th: '>=0.1 && <0.2'
