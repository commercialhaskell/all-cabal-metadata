all-versions:
- 0.2025.9.9
- 0.2025.9.10
author: ''
basic-deps:
  base: ^>=4.20 || ^>=4.21
changelog: |
  # Change log

  Literally follows the [Package Versioning Policy](https://pvp.haskell.org).
  You can find release notes [on GitHub](https://github.com/tfausak/literally/releases).
changelog-type: markdown
description: "# Literally\n\n[![CI](https://github.com/tfausak/literally/actions/workflows/ci.yml/badge.svg)](https://github.com/tfausak/literally/actions/workflows/ci.yml)\n\nLiterally
  is a minimal Haskell library that converts type literals into values. It provides
  type-safe literal conversion functionality using Haskell's advanced type system.\n\n##
  Overview\n\nThe `literally` library allows you to convert compile-time type literals
  (numbers, strings, characters, etc.) into runtime values in a type-safe manner.
  This is accomplished through a single `literal` function that leverages type-level
  programming to ensure correctness at compile time.\n\n## Installation\n\nAdd `literally`
  to your project's dependencies:\n\n```yaml\n# In your package.yaml\ndependencies:\n
  \ - literally\n```\n\nOr in your `.cabal` file:\n\n```cabal\nbuild-depends: literally\n```\n\n##
  Usage\n\nImport the module and use the `literal` function with type annotations:\n\n```haskell\n{-#
  LANGUAGE RequiredTypeArguments #-}\nimport Literally\n\n-- Convert numeric literals\nnumber
  :: Integer\nnumber = literal 42\n\nnaturalNum :: Natural  \nnaturalNum = literal
  123\n\n-- Convert string literals\ngreeting :: String\ngreeting = literal \"hello\"\n\n--
  Convert character literals\nletter :: Char\nletter = literal 'x'\n\n-- Convert boolean
  literals\ntruth :: Bool\ntruth = literal 'True\n\nfalsehood :: Bool  \nfalsehood
  = literal 'False\n\n-- Convert unit type\nunit :: ()\nunit = literal ()\n\n-- Works
  with tuples too\npair :: (Integer, String)\npair = literal (42, \"hello\")\n```\n\n##
  How It Works\n\nThe library uses the `FromType` type class:\n\n- `FromType`: Defines
  how to convert from a type literal to a value, with an associated `KnownType` constraint\n\n"
description-type: markdown
hash: 71f34e7c85d1fa1610c6d6ffe133eee8f8c5b4e40cb9773d92179144c4aded92
homepage: ''
latest: 0.2025.9.10
license-name: 0BSD
maintainer: Taylor Fausak
synopsis: Type-safe conversion of type literals into runtime values.
test-bench-deps: {}
