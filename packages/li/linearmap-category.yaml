all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.1
- 0.3.2.0
- 0.3.4.0
- 0.3.5.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
author: Justus Sagemüller
basic-deps:
  MemoTrie: <0.7
  QuickCheck: '>=2.15 && <2.16'
  base: '>=4.8 && <5'
  call-stack: <0.5
  constrained-categories: '>=0.3 && <0.5'
  containers: <0.9
  data-default-class: <0.3
  free-vector-spaces: '>=0.1.4 && <0.3'
  ghc-typelits-natnormalise: '>=0.7 && <0.8'
  hashable: <1.6
  ieee754: '>=0.7 && <0.9'
  lens: <5.4
  linear: <1.24
  manifolds-core: '>=0.6.1.0 && <0.7'
  semigroups: <0.21
  singletons: '>=3.0 && <3.3'
  singletons-base: '>=3.0 && <3.5'
  tagged: <0.9
  template-haskell: '>=2.12 && <2.24'
  th-abstraction: '>=0.4 && <0.8'
  transformers: <0.7
  type-natural: '>=1.0 && <1.4'
  vector: '>=0.12 && <0.14'
  vector-space: '>=0.11 && <0.20'
changelog: ''
changelog-type: ''
description: |-
  The term /numerical linear algebra/ is often used almost
  synonymous with /matrix modifications/. However, what's interesting
  for most applications are really just /points in some vector space/
  and linear mappings between them, not matrices (which represent
  points or mappings, but inherently depend on a particular choice
  of basis / coordinate system).

  This library implements the crucial LA operations like solving
  linear equations and eigenvalue problems, without requiring
  that the vectors are represented in some particular basis.
  This appoach offers:
  1. conceptual elegance (only operations that are actually
  geometrically sensible will typecheck – this is far stronger than
  just confirming that the dimensions match, as some other libraries
  do)
  2. opportunity to type tensors more expressively. E.g. instead of
  having a tensor with many dimensions that can easily be confused,
  one can have e.g. a space of images and take the tensor product
  with a linear batch space, etc..
  3. it opens up optimisation possibilities: the vectors can be
  unboxed, use dedicated sparse compression, possibly carry out the
  computations on accelerated hardware (GPU etc.). The spaces can in
  principle even be infinite-dimensional (e.g. function spaces).

  The linear algebra algorithms in this package only require the
  vectors to support fundamental operations like addition, scalar
  products, double-dual-space coercion and tensor products. These
  are expressed by a hierarchy of type classes, none of which requires
  a basis representation.
  Basis representations are optional to allow storage in matrix-based
  backends, but this too is done in a way that allows e.g. taking the
  tensor product of a lazy function space with a static-dimensional
  matrix space with a low-dimensional channels space, and then only
  the inner dimensions will be stored in a packed format.
description-type: haddock
hash: 7432aca14634047ddbcd7674169688aed0da100083dff75d7c693f464bd22839
homepage: https://github.com/leftaroundabout/linearmap-family
latest: 0.6.0.2
license-name: GPL-3.0-only
maintainer: (@) jsag $ hvl.no
synopsis: Native, complete-ish, matrix-free linear algebra.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  constrained-categories: '>=0'
  linear: '>=0'
  linearmap-category: '>=0'
  manifolds-core: '>=0'
  tasty: <1.6
  tasty-quickcheck: <0.12
  vector: '>=0'
  vector-space: '>=0'
