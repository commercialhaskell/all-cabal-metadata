homepage: https://github.com/leftaroundabout/linearmap-family
changelog-type: ''
hash: 9e80d97d290607e5ab5a730ebfaf6a8e2035b70605c9ec49ae48f98eb2109cb0
test-bench-deps:
  linearmap-category: -any
  manifolds-core: -any
  base: -any
  vector-space: -any
  linear: -any
  tasty-quickcheck: -any
  tasty: -any
  QuickCheck: -any
  constrained-categories: -any
maintainer: (@) jsag $ hvl.no
synopsis: Native, complete, matrix-free linear algebra.
changelog: ''
basic-deps:
  manifolds-core: '>=0.5.1.0 && <0.7'
  free-vector-spaces: '>=0.1.4 && <0.3'
  base: '>=4.8 && <5'
  data-default-class: -any
  vector-space: '>=0.11 && <0.18'
  semigroups: -any
  th-abstraction: '>=0.4 && <0.5'
  tagged: -any
  containers: -any
  lens: -any
  ieee754: '>=0.7 && <0.9'
  linear: -any
  hashable: -any
  MemoTrie: -any
  transformers: -any
  QuickCheck: '>=2.11 && <2.15'
  constrained-categories: '>=0.3 && <0.5'
  template-haskell: '>=2.12 && <2.19'
  call-stack: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.1
- 0.3.2.0
- 0.3.4.0
- 0.3.5.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.5.0.0
author: Justus Sagemüller
latest: 0.5.0.0
description-type: haddock
description: |-
  The term /numerical linear algebra/ is often used almost
  synonymous with /matrix modifications/. However, what's interesting
  for most applications are really just /points in some vector space/
  and linear mappings between them, not matrices (which represent
  points or mappings, but inherently depend on a particular choice
  of basis / coordinate system).

  This library implements the crucial LA operations like solving
  linear equations and eigenvalue problems, without requiring
  that the vectors are represented in some particular basis. Apart
  from conceptual elegance (only operations that are actually
  geometrically sensible will typecheck – this is far stronger than
  just confirming that the dimensions match, as some other libraries
  do), this also opens up good optimisation possibilities: the
  vectors can be unboxed, use dedicated sparse compression, possibly
  carry out the computations on accelerated hardware (GPU etc.).
  The spaces can even be infinite-dimensional (e.g. function spaces).

  The linear algebra algorithms in this package only require the
  vectors to support fundamental operations like addition, scalar
  products, double-dual-space coercion and tensor products; none of
  this requires a basis representation.
license-name: GPL-3.0-only
