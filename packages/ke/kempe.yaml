all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.0.6
- 0.2.0.7
- 0.2.0.8
- 0.2.0.9
- 0.2.0.10
- 0.2.0.11
- 0.2.0.12
- 0.2.0.13
- 0.2.0.14
author: Vanessa McHale
basic-deps:
  base: '>=0'
  bytestring: '>=0'
  kempe: '>=0'
  optparse-applicative: '>=0'
  prettyprinter: '>=1.7.0'
  text: '>=0'
changelog: "# kempe\n\n## 0.2.0.14\n\n  * Catch-up with `base`\n\n## 0.2.0.13\n\n
  \ * Update for latest `alex` templates\n\n## 0.2.0.12\n\n  * Typechecker is \U0001D716
  faster\n  \n## 0.2.0.11\n\n  * Fix bug in typechecker\n\n## 0.2.0.10\n\n  * Fix
  bug in typechecking against inferred signatures.\n  * Fix bug in prelude\n\n## 0.2.0.9\n\n
  \ * Add `armabi` method of exporting Kempe functions, so that `kc` generates\n    suitable
  code for M1 darwin.\n  * Add `cdecl` subcommand to generate C headers for exported
  functions\n\n## 0.2.0.8\n\n  * More efficient IR generation; don't copy bytes from
  a source to the same\n    destination\n  * Fix bugs in `case` IR generation\n\n##
  0.2.0.7\n\n  * Fix bug in unification\n  * Fix bug so that `and` and `or` instructions
  print correctly for x86 assembler\n  * Add lints for `dip(+) +` to `+ +`, (associative
  dip) `dup and` to `id`, etc.\n  * Add lints for `swap swap` and `1 drop` etc.\n
  \ * Add `join` for `Maybe` and `Either`\n  * Last branch of case statement always
  falls through (more efficient code)\n\n## 0.2.0.6\n\n  * Add `absInt` and `chocie`
  functions to prelude.\n  * Add lints for `swap >`, `swap *` &c.\n  * Fix bug in
  typing `>=`, `>`, `!=`\n\n## 0.2.0.5\n\n  * Fix bug in arm control-flow analysis\n
  \ * Fix bugs in IR optimization pass\n  * Improve IR optimization\n  * Add `fromMaybe`
  and `fromRight` functions\n\n## 0.2.0.4\n\n  * Kind-check external function declarations\n
  \ * Fix bug in inliner where functions within `dip(...)`s were not inlined\n  *
  Fix unification bug where solved constraints were not back-substituted correctly.\n\n##
  0.2.0.3\n\n  * GHC 8.0.2 and 8.2.2\n\n## 0.2.0.2\n\n  * Improve performance + generated
  code\n  * Fix bug in monomorphization of patterns\n\n## 0.2.0.1\n\n  * Performance
  improvements when assembling x86\n  * Fix pattern match exhaustiveness checker\n
  \ * More lenient command-line parser\n\n## 0.2.0.0\n\n  * Add aarch64 backend\n
  \ * Change type of shifts, they no longer take an `Int8` as the second argument.\n\n##
  0.1.1.3\n\n  * Tweak some RTS flags for faster performance\n  * `lib/gaussian.kmp`
  has `mult` function\n  * A couple inefficiencies under the hood\n\n## 0.1.1.2\n\n
  \ * Case statements with a single branch are plain and efficient.\n  * Add `safeDiv`
  and `safeMod` to `prelude/arith.kmp`\n\n## 0.1.1.1\n\n  * Performance improvements
  under the hood (use `IntSet`s for liveness\n    analysis)\n\n## 0.1.1.0\n\n  * Fix
  internal pretty-printer (exposed as hidden `fmt` subcommand)\n  * Optimize IR cases\n
  \ * Fix padding\n  * Fix bug in lexer (for C foreign calls)\n  * Support down to
  GHC 8.0.2\n  * Unification no longer takes pathologically long time\n  * Add test
  files so source distribution passes\n  * Some sort of imports now supported.\n\n##
  0.1.0.2\n\n  * Add optimizations (simplify code so that liveness analysis is quicker)\n
  \ * Fix major bug in kind-checker\n  * Fix bug in type assignment\n\n## 0.1.0.1\n\n
  \ * Better debug pretty-printer\n  * Pattern match exhaustiveness checker so that
  pattern matches don't do\n    something heinous at runtime\n\n## 0.1.0.0\n\nInitial
  release\n"
changelog-type: markdown
description: |
  # Kempe

  Kempe is a stack-based language and toy compiler for x86_64 and aarch64. It requires the
  [nasm](https://nasm.us/) assembler when targeting x86_64.

  Inspiration is primarily from [Mirth](https://github.com/mirth-lang/mirth).

  See manual
  [here](http://hackage.haskell.org/package/kempe/src/docs/manual.pdf). There is
  also a tour of the compiler available
  [here](http://vmchale.com/static/original/compiler.pdf).

  ## Installation

  Installation is via [cabal-install](https://www.haskell.org/cabal/):

  ```
  cabal install kempe
  ```

  For shell completions put the following in your `~/.bashrc` or
  `~/.bash_profile`:

  ```
  eval "$(kc --bash-completion-script kc)"
  ```

  ## Defects

    * Errors don't have position information
    * Monomorphization fails on recursive polymorphic functions

      Hopefully this isn't too sinful; I can't think of any examples of recursive
      polymorphic functions
    * Can't export or call C functions with more than 6 arguments; can't call or
      export large arguments (i.e. structs) passed by value.

      This is less of an impediment than it sounds like.
    * Cyclic imports are not detected
    * Imports are kind of defective

  ### Comparison

  You may wish to use [Mirth](https://github.com/mirth-lang/mirth/) or
  [Factor](https://factorcode.org/) instead. Mirth is statically typed (similar to
  Kempe) but less mature.
description-type: markdown
hash: b65db3755e763db20486a447aca0e19fa485f74008266151b3d549e94b328a9c
homepage: ''
latest: 0.2.0.14
license-name: BSD-3-Clause
maintainer: vamchale@gmail.com
synopsis: Kempe compiler
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  composition-prelude: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  extra: '>=0'
  filepath: '>=0'
  kempe: '>=0'
  prettyprinter: '>=1.7.0'
  process: '>=0'
  tasty: '>=0'
  tasty-golden: '>=0'
  tasty-hunit: '>=0'
  temporary: '>=0'
  text: '>=0'
