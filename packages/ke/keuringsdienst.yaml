homepage: ''
changelog-type: text
hash: 1966c058020dbf7beba794b70dd73ff2d3b4ede2c6697f63a5f82449a034beb6
test-bench-deps:
  HTF: <=0.15.0.1
  base: -any
  text: <=2.0.2
  keuringsdienst: -any
  containers: <=0.6.7
  aeson: <=2.2.0.0
maintainer: Josep Bigorra
synopsis: Data validation in Haskell made easy.
changelog: |
  * Changelog for `keuringsdienst`

  All notable changes to this project will be documented in this file.

  The format is based on Keep a Changelog - https://keepachangelog.com/en/1.0.0/, and this project adheres to the Haskell Package Versioning Policy - https://pvp.haskell.org/.

  ** v0.1.0.2
  - First stable API release
basic-deps:
  base: '>=4.5 && <5'
  text: <=2.0.2
  containers: <=0.6.7
  aeson: <=2.2.0.0
all-versions:
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
author: Josep Bigorra
latest: 0.1.0.5
description-type: text
description: "#+author: Josep Bigorra\n#+email: jjbigorra@gmail.com\n#+options: toc:nil\n\n*
  Keuringsdienst (van Waarde)\n\n[[https://git.sr.ht/~teutonicjoe/honeybadger/blob/master/dist/haskell.png]]
  [[https://git.sr.ht/~teutonicjoe/honeybadger/blob/master/dist/gnu-gpl-v3.png]]\n\nIf
  you know, you know. Data validation in Haskell that is composable, made easy and
  clean.\n\nLicensed under the GNU General Public License v3 or later.\n\nData validation
  rules that are easy to write and serve as documentation of your data as well. Therefore,
  data validations *SHOULD* live next to your data models.\n\n\n** Context and motivation\n\nThere
  exist many data validation packages, in Haskell and other languages, but so far
  I have never found something that was flexible but powerful enough for my needs.\n\nI
  based myself on ~Semigroup~ and ~Monoid~ operations, and attempted to make validation
  rules that are easy to write, read, compose and maintain.\n\nSee an example, from
  my music website WikiMusic.\n\n#+begin_src haskell\n  validateEntity x =\n    (identifier
  x) |?| isTextOfLength 36\n    <> (displayName x) |?| (isNonEmptyText <> isTextSmallerThanOrEqual
  120)\n#+end_src\n\nImagine a simple data model (record) for a music artist:\n\n#+begin_src
  haskell\n  data Artist = Artist\n  { identifier :: Text,\n    displayName :: Text,\n
  \   createdBy :: Text,\n    visibilityStatus :: Int,\n    approvedBy :: Maybe Text,\n
  \   createdAt :: UTCTime,\n    lastEditedAt :: Maybe UTCTime,\n    artworks :: Map
  Text ArtistArtwork,\n    comments :: Map Text ArtistComment,\n    opinions :: Map
  Text ArtistOpinion,\n    spotifyUrl :: Maybe Text\n  }\n  deriving (Eq, Show, Generic)\n#+end_src\n\n**
  Defining validations\n      \nOf course for all this to work, you need some imports:\n#+begin_src
  haskell\n  import Keuringsdienst\n  import Keuringsdienst.Helpers\n#+end_src\n\nYou
  can define a validation function for ~Artist~ by composing validation results and
  rules. Validation results are the result of applying rules to certain data and can
  be composed with ~<>~ since they are ~Monoid~. Rules can also be composed (~AND~)
  with ~<>~ since they are also ~Monoid~ and can be ~OR~'ed with the ~*||*~ operator,
  a.k.a ~ofDitOfDat~.\n\n#+begin_src haskell\n  validateArtist :: Artist -> ValidationResult\n
  \ validateArtist x =\n    (identifier x) |?| isTextOfLength 36\n      <> (displayName
  x) |?| (isNonEmptyText <> isTextSmallerThanOrEqual 120)\n      <> (createdBy x)
  |?| isTextOfLength 36\n      <> (visibilityStatus x) |?| isPositiveOrZero\n      <>
  (approvedBy x) |??| isTextOfLength 36\n      <> (spotifyUrl x) |??| isNonEmptyText\n#+end_src\n\n**
  What is a ValidationResult\n\n#+begin_src haskell\n  type ErrMsg = Text\n\n  data
  Validation err\n    = Success\n    | Failure err\n    deriving (Eq, Show, Generic,
  FromJSON, ToJSON)\n\n  type ValidationResult = Validation [ErrMsg]\n#+end_src\n\n**
  Optics / Lenses\n\nIf you like ~Optics~ and lenses as I do, you are fully free to
  use it:\n\n#+begin_src haskell\n  validateArtist :: Artist -> ValidationResult\n
  \ validateArtist x =\n    (x ^. #identifier) |?| isTextOfLength 36\n      <> (x
  ^. #displayName) |?| (isNonEmptyText <> isTextSmallerThanOrEqual 120)\n      <>
  (x ^. #createdBy) |?| isTextOfLength 36\n      <> (x ^. #visibilityStatus) |?| isPositiveOrZero\n
  \     <> (x ^. #approvedBy) |??| isTextOfLength 36\n      <> (x ^. #spotifyUrl)
  |??| isNonEmptyText\n#+end_src\n\n\n"
license-name: GPL-3.0-only
