homepage: http://www.yesodweb.com/
changelog-type: markdown
hash: bf6f75367821d9fbf80d54c2bbcc69573fbc87543b66acdebef7af296d6201b3
test-bench-deps:
  bytestring: -any
  unix: -any
  base: -any
  keter: -any
  hspec: '>=1.3'
  conduit: -any
  HUnit: -any
  transformers: -any
maintainer: michael@snoyman.com
synopsis: Web application deployment manager, focusing on Haskell web frameworks
changelog: "## 1.8.2 \n\n+ Fix XSS issue in the default response.\n  (special thanks
  to Max @ulidtko for spotting and fixing this)\n\n## 1.8.1\n\n+ Fix haddock build\n\n##
  1.8\n\n+ Add NixOS support\n+ Describe debug port in readme.\n+ Improve ensure alive
  error message due to \n  https://github.com/snoyberg/keter/issues/236\n+ Add `missing-host-response-file`
  and `unknown-host-response-file`\n  to the global keter config, which replace the
  default responses.\n+ All missing-host responses will now fill the requested host
  in the\n  `X-Forwarded-Host: HOSTNAME` header, where HOSTNAME is the requested host.\n
  \ This is done because the default response fills in the hostname.\n  Now javascript
  could potentially fix that by making another request\n  to itself.\n+ Document missing
  configuration options in `etc/keter-config.yaml`\n\n## 1.7\n\n* Add support Aeson
  2.*\n* Add `Data.Aeson.KeyHelper.hs` in cabal file.\n* And use the module where
  Aeson has changed how to handle Key and KeyMap.\n\n## 1.6\n* Make keter more chatty
  on boot.\n  This allows you to figure out in code where things go wrong.\n* Add
  opt-in debug CLI, allowing you to inspect keters' internal state.\n  You can activate
  it by specifying a cli-port.\n* Emit which pid is being killed by keter.\n  This
  helps with process leakage issues,\n  for example if the user launches from a bash
  script without using `exec`.\n\n## 1.5\n\n* Builds with `process` 1.6\n* add dependency
  for `tls-session-manager`\n* Add show instance for App\n* Add ensure alive timeout
  config\n* Add `nc` example in incoming\n* Change to github actions because travis
  ci stopped working.\n* Fix hackage issues in cabal file\n* Fix breaking changes
  with warp-tls.\n\n## 1.4.3.1\n\n* Add cabal flag `system-filepath` for compatibility
  with older versions of fsnotify.\n\n## 1.4.3\n\n* Update fsnotify dependency version
  and remove system-filepath.\n\n## 1.4.2.1\n\nBug fix: Change default connection
  time bound from 5 sec to 5 minutes [#107](https://github.com/snoyberg/keter/pull/107)\n\n##
  1.4.1\n\n* Add configurable timeouts [#93](https://github.com/snoyberg/keter/pull/93)\n\n##
  1.4.0.1\n\n* Avoid infinite loop traversing incoming directory [#96](https://github.com/snoyberg/keter/issues/96)\n\n##
  1.4.0\n\n* Drop system-filepath\n\n## 1.3.10\n\n* Configurable time bound [#92](https://github.com/snoyberg/keter/pull/92)\n\n##
  1.3.9.2\n\n* Lower case PostgreSQL names [#88](https://github.com/snoyberg/keter/pull/88)\n\n##
  1.3.9.1\n\n* Allow blaze-builder 0.4\n\n## 1.3.9\n\n* Support chain certificates
  in credentials [#82](https://github.com/snoyberg/keter/pull/82)\n\n## 1.3.7.1\n\nBug
  fix: catch exceptions during reload [#64](https://github.com/snoyberg/keter/issues/64)\n\n##
  1.3.7\n\n* Add ability to use middleware [#63](https://github.com/snoyberg/keter/pulls/63)\n\n##
  1.3.6\n\nSupport the `forward-env` setting.\n\n## 1.3.5.3\n\nMore correct/complete
  solution for issue #44. Allows looking up hosts either with or without port numbers.\n\n##
  1.3.5.2\n\nPartial workaround for keter.yaml files that give a port with the hostname.\n\n##
  1.3.5.1\n\nFix bug where the cleanup process would remain running.\n\n## 1.3.5\n\nAll
  stanzas may have the `requires-secure` property to force redirect to HTTPS. You
  can set additional environment variables in your global Keter config file.\n\n##
  1.3.4\n\nSupport for overriding external ports. Support for keter.yml in addition
  to keter.yaml. Case insensitive hostname lookups.\n\n## 1.3.3\n\nSet the X-Forwarded-Proto
  header\n\n## 1.3.2\n\nEnable GZIP middleware\n\n## 1.3.1\n\nUpgrade to WAI 3.0\n\n##
  1.3.0\n\nUpgrade to conduit 1.1\n\n## 1.0.1\n\nPermit use of wildcard subdomains
  and exceptions to wildcards. Convert internal strings to use Data.Text in more places.
  (Although internationalized domain names are not supported unless entered in punycode
  in configuration files.)\n\n## 1.0.0\n\nSignificant overhaul. We now support monitoring
  of much more arbitrary jobs (e.g., background tasks), have a proper plugin system
  (PostgreSQL is no longer a required component), and have a much better system for
  tracking hostname mapping changes.\n\n## 0.4.0\n\nSwitch to fsnotify to get cross-platform
  support. No longer using raw proxies, but instead WAI proxies.\n\n## 0.3.7\n\nSending
  a HUP signal reloads the list of deployed apps. This is useful for circumstances
  where inotify does not work correctly, such as on file systems which do not support
  it.\n\n## 0.3.5\n\nYou can now create Keter bundles without any applications. These
  can contain static hosts and redirects.\n"
basic-deps:
  warp: -any
  http-client: -any
  http-reverse-proxy: '>=0.4.2 && <0.7'
  bytestring: -any
  wai: '>=3.2.2'
  case-insensitive: -any
  unix: '>=2.5'
  stm: '>=2.4'
  base: ==4.*
  keter: -any
  time: -any
  indexed-traversable: -any
  unordered-containers: -any
  text: -any
  tls: '>=1.4'
  unix-compat: '>=0.3 && <0.6'
  filepath: -any
  process: '>=1.4.3 && <1.7'
  network: -any
  async: -any
  lifted-base: -any
  conduit: '>=1.1'
  data-default: -any
  array: -any
  conduit-extra: '>=1.1'
  containers: -any
  blaze-builder: '>=0.3 && <0.5'
  tar: '>=0.4'
  regex-tdfa: '>=1.1'
  warp-tls: '>=3.0.3 && <3.4.0'
  zlib: -any
  mtl: -any
  attoparsec: '>=0.10'
  wai-extra: '>=3.0.3 && <3.2'
  transformers: -any
  optparse-applicative: -any
  random: -any
  http-conduit: '>=2.1'
  fsnotify: '>=0.3'
  http-types: -any
  wai-app-static: '>=3.1 && <3.2'
  aeson: -any
  tls-session-manager: -any
  template-haskell: -any
  yaml: '>=0.8.4 && <0.12'
  vector: -any
  directory: -any
all-versions:
- '0.1'
- 0.1.0.1
- 0.2.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.3.0
- 0.3.0.1
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.4.1
- 0.3.4.2
- 0.3.5
- 0.3.5.1
- 0.3.5.2
- 0.3.5.3
- 0.3.5.4
- 0.3.6
- 0.3.6.1
- 0.4.0
- 1.0.1
- 1.0.1.1
- 1.0.1.2
- 1.1.0
- 1.1.0.1
- 1.2.0
- 1.2.1
- 1.3.0
- 1.3.1
- 1.3.2
- 1.3.3
- 1.3.4
- 1.3.5
- 1.3.5.1
- 1.3.5.2
- 1.3.5.3
- 1.3.6
- 1.3.7
- 1.3.7.1
- 1.3.8
- 1.3.9
- 1.3.9.1
- 1.3.9.2
- 1.3.10
- 1.3.10.1
- 1.4.0
- 1.4.0.1
- 1.4.1
- 1.4.2.1
- 1.4.3
- 1.4.3.1
- 1.4.3.2
- '1.5'
- '1.6'
- '1.7'
- '1.8'
- 1.8.1
- 1.8.2
author: Michael Snoyman
latest: 1.8.2
description-type: markdown
description: "[![Githbu actions build status](https://img.shields.io/github/workflow/status/snoyberg/keter/Stack)](https://github.com/snoyberg/keter/actions)\n\n\nDeployment
  system for web applications, originally intended for hosting Yesod\napplications.
  Keter does the following actions for your application:\n\n* Binds to the main port
  (usually port 80) and reverse proxies requests to your application based on virtual
  hostnames.\n* Provides SSL support if requested.\n* Automatically launches applications,
  monitors processes, and relaunches any processes which die.\n* Provides graceful
  redeployment support, by launching a second copy of your application, performing
  a health check[1], and then switching reverse proxying to the new process.\n* Management
  of log files.\n\nKeter provides many more advanced features and extension points.
  It allows\nconfiguration of static hosts, redirect rules, management of PostgreSQL\ndatabases,
  and more. It supports a simple bundle format for applications which\nallows for
  easy management of your web apps.\n\n[1]: The health check happens trough checking
  if a port is opened.\n     If your app doesn't open a port after 30 seconds it's
  presumed\n     not healthy and gets a term signal.\n\n## Quick Start\n\nTo get Keter
  up-and-running quickly for development purposes, on an Ubuntu system (not on your
  production server), run:\n\n    wget -O - https://raw.githubusercontent.com/snoyberg/keter/master/setup-keter.sh
  | bash\n\n(Note: This assumes you already have keter installed via cabal.)\n(Note:
  you may need to run the above command twice, if the shell exits after\n`apt-get`
  but before running the rest of its instructions.) This will download\nand build
  Keter from source and get it running with a\ndefault configuration. By default Keter
  will be set up to support HTTPS and\nwill require you to provide a key and certificate
  in `/opt/keter/etc`. You can\ndisable HTTPS in `/opt/keter/etc/keter-config.yaml`
  by commenting the certificate\nand key lines.\n\n_This approach is not recommended
  for a production system_. We do not recommend\ninstalling a full GHC toolchain on
  a production server, nor running such ad-hoc\nscripts. This is intended to provide
  a quick way to play with Keter, especially\nfor temporary virtual machines. For
  a production system, we recommend building\nthe `keter` binary on a separate system,
  and tracking it via a package manager\nor similar strategy.\n\n## Bundling your
  app for Keter\n\n1.  Modify your web app to check for the `PORT` environment variable,
  and have\n    it listen for incoming HTTP requests on that port. Keter automatically\n
  \   assigns arbitrary ports to each web app it manages. When building an app\n    based
  on the Yesod Scaffold, it may be necessary to change the `port`\n    variable in
  `config/settings.yaml` from `YESOD_PORT` to `PORT` for\n    compatibility with Keter.\n\n2.
  \ Create a file `config/keter.yaml`. The minimal file just has two settings:\n\n
  \   ```yaml\n    exec: ../path/to/executable\n    host: mydomainname.example.com\n
  \   ```\n\n    See the bundles section below for more available settings.\n\n3.
  \ Create a gzipped tarball with the `config/keter.yaml` file, your\n    executable,
  and any other static resources you would like available to your\n    application.
  This file should be given a `.keter` file extension, e.g.\n    `myapp.keter`.\n\n4.
  \ Copy the `.keter` file to `/opt/keter/incoming`. Keter will monitor this\n    directory
  for file updates, and automatically redeploy new versions of your\n    bundle.\n\nExamples
  are available in the [incoming](https://github.com/snoyberg/keter/tree/master/incoming)\ndirectory.\n\n##
  Setup\n\n### Building keter for Debian, Ubuntu and derivatives\n\nEventually, I
  hope to provide a PPA for this (please contact me if you would\nlike to assist with
  this). For now, the following steps should be sufficient:\n\nFirst, install PostgreSQL:\n\n
  \   sudo apt-get install postgresql\n\nSecond, build the `keter` binary and place
  it at `/opt/keter/bin`. To do so,\nyou'll need to install the Haskell Platform,
  and can then build with `cabal`.\nThis would look something like:\n\n    sudo apt-get
  install haskell-platform\n    cabal update\n    cabal install keter\n    sudo mkdir
  -p /opt/keter/bin\n    sudo cp ~/.cabal/bin/keter /opt/keter/bin\n\nThird, create
  a Keter config file. You can view a sample at\nhttps://github.com/snoyberg/keter/blob/master/etc/keter-config.yaml.\n\nOptionally,
  you may wish to change the owner on the `/opt/keter/incoming`\nfolder to your user
  account, so that you can deploy without `sudo`ing.\n\n    sudo mkdir -p /opt/keter/incoming\n
  \   sudo chown $USER /opt/keter/incoming\n\n### Building keter for Redhat and derivatives
  (Centos, Fedora, etc)\n\nFirst, install PostgreSQL:\n\n    sudo dnf install postgresql\n\nSecond,
  build the `keter` binary and place it at `/opt/keter/bin`. To do so,\nyou'll need
  to install the Haskell Platform, and can then build with `cabal`.\nThis would look
  something like:\n\n    sudo dnf install haskell-platform\n    cabal update\n    cabal
  install keter\n    sudo mkdir -p /opt/keter/bin\n    sudo cp ~/.cabal/bin/keter
  /opt/keter/bin\n\nThird, create a Keter config file. You can view a sample at\nhttps://github.com/snoyberg/keter/blob/master/etc/keter-config.yaml.\n
  \   \n### Configuring startup\n\nFor versions of Ubuntu and derivatives 15.04 or
  greater and Redhat and derivatives (Centos, Fedora, etc) use systemd\n\n```\n# /etc/systemd/system/keter.service\n[Unit]\nDescription=Keter\nAfter=network.service\n\n[Service]\nType=simple\nExecStart=/opt/keter/bin/keter
  /opt/keter/etc/keter-config.yaml\n\n[Install]\nWantedBy=multi-user.target\n```\n\nFinally,
  enable and start the unit (Note: You may need to disable SELinux):\n\n    sudo systemctl
  enable keter\n    sudo systemctl start keter\n\nVerify that it's actually running
  with:\n\n    sudo systemctl status keter\n\nOptionally, you may wish to change the
  owner on the `/opt/keter/incoming`\nfolder to your user account, so that you can
  deploy without `sudo`ing.\n\n    sudo mkdir -p /opt/keter/incoming\n    sudo chown
  $USER /opt/keter/incoming\n---    \nFor versions of Ubuntu and derivatives less
  than 15.04, configure an Upstart job.\n\n```\n# /etc/init/keter.conf\nstart on (net-device-up
  and local-filesystems and runlevel [2345])\nstop on runlevel [016]\nrespawn\n\n#
  NB: keter writes logs to /opt/keter/log, but some exceptions occasionally\n# escape
  to standard error. This ensures they show up in system logs.\nconsole output\n\nexec
  /opt/keter/bin/keter /opt/keter/etc/keter-config.yaml\n```\n\nFinally, start the
  job for the first time:\n\n    sudo start keter\n\n\n### NixOS \nAdd a nix file
  `keter.nix` that fetches this repository and imports\nthe module file:\n```nix\nlet\n
  \ owner = \"snoyberg\";\n  repo = \"keter\";\n  rev = \"be4e3132e988519dacd0f9b40a47e23d33865b76\";\n\n
  \ src = builtins.fetchTarball {\n    url = \"https://github.com/${owner}/${repo}/archive/${rev}.tar.gz\";\n
  \   };\nin\nimport \"${src}/nix/module.nix\"\n```\nMake sure to update rev to the
  latest commit!\nNow you can import this as an ordinary module\nin your `configuration.nix`:\n```nix\nimports
  = [\n  ./keter.nix\n];\n```\n\nNow you can configure keter in the same `configuration.nix`:\n```nix\nservices.keter
  = {\n  enable = true;\n  keterPackage = pkgs.keter;\n  bundle = {\n    domain =
  \"example.com\";\n    secretScript = env.secretScript;\n    publicScript = env.publicScript;\n
  \   package = myWebAppDerivation;\n    executable = \"exe\";\n  };\n};\n```\n\nsecretScript
  is used to load environment varialbes, for example:\n```\nMY_AWS_KEY=$(cat /run/keys/AWS_ACCESS_KEY_ID)\n```\nPublic
  script does the same but emits the loading to the logs.\nwhich isn't good for secrets.\n\nFor
  the full option list available see `nix/module.nix`.\nThis should load most webapps
  but PR's for improved support are welcome.\nNote that the default expects keter
  to be run behind nginx.\n    \n## Bundles\n\nAn application needs to be set up as
  a keter bundle. This is a GZIPed tarball\nwith a `.keter` filename extension and
  which has one special file:\n`config/keter.yaml`. A sample file is available at\nhttps://github.com/snoyberg/keter/blob/master/incoming/foo1_0/config/keter.yaml.\n\nKeter
  also supports wildcard subdomains and exceptions, as in this\nexample configuration:\n\n```yaml\nexec:
  ../com.example.app\nargs:\n    - Hello\n    - World\n    - 1\nhost: www.example.com\nextra-hosts:\n
  \   - \"*.example.com\"\n    - foo.bar.example.com\nstatic-hosts:\n    - host: static.example.com\n
  \     root: ../static\nredirects:\n    - from: example.com\n      to: www.example.com\n```\n\nDue
  to YAML parsing, wildcard hostnames will need to be quoted as above.\nWildcard hostnames
  are not recursive, so `foo.bar.example.com` must be\nexplicitly added as an extra
  hostname in the above example, or\nalternatively, `*.*.example.com` would cover
  all host names two levels\ndeep. It would not cover host names only one level deep,
  such as\n`qux.example.com`. In this manner, wildcard hostnames correspond to the\nmanner
  in which SSL certificates are handled per RFC2818. Wildcards may\nbe used in only
  one level of a hostname, as in `foo.*.example.com`.\n\nFull RFC2818 compliance is
  not present - `f*.example.com` will not be\nhandled as a wildcard with a prefix.\n\nA
  sample Bash script for producing a Keter bundle is:\n\n```bash\n#!/bin/bash -ex\n\ncabal
  build\nstrip dist/build/yesodweb/yesodweb\nrm -rf static/tmp\ntar czfv yesodweb.keter
  dist/build/yesodweb/yesodweb config static\n```\n\nFor users of Yesod, The `yesod`
  executable provides a `keter` command for\ncreating the bundle, and the scaffolded
  site provides a `keter.yaml` file.\n\n## Deploying\n\nIn order to deploy, you simply
  copy the keter bundle to `/opt/keter/incoming`.\nTo update an app, copy in the new
  version. The old process will only be\nterminated after the new process has started
  answering requests. To stop an\napplication, delete the file from incoming.\n\n##
  PostgreSQL support\n\nKeter ships by default with a PostgreSQL plugin, which will
  handle\nmanagement of PostgreSQL databases for your application. To use this,\nmake
  the following changes:\n\n* Add the following lines to your `config/keter.yaml`
  file:\n\n```yaml\nplugins:\n  postgres: true\n```\n\n* Keter can be configured to
  connect to a remote postgres server using the following syntax:\n```yaml\nplugins:\n
  \ postgres: \n     - server: remoteServerNameOrIP\n       port: 1234\n```\n\nDifferent
  webapps can be configured to use different servers using the above syntax.\nIt should
  be noted that keter will prioritize it's own postgres.yaml record for an app. \nSo
  if moving an existing app from a local postgres server to a remote one (or \nswitching
  remote servers), the postgres.yaml file will need to be updated manually. \n\nKeter
  will connect to the remote servers using the `postgres` account. This setup \nassumes
  the remote server's `pg_hba.conf` file has been configured to allow connections\nfrom
  the keter-server IP using the `trust` method. \n\n(Note: The `plugins` configuration
  option was added in v1.0 of the\nketer configuration syntax. If you are using v0.4
  then use `postgres: true`.\nThe remote-postgres server syntax was added in v1.4.2.)\n\n*
  Modify your application to get its database connection settings from the following
  environment variables:\n    * `PGHOST`\n    * `PGPORT`\n    * `PGUSER`\n    * `PGPASS`\n
  \   * `PGDATABASE`\n\n* The Yesod scaffold site is already equipped to read these
  environment\n  variables when they are set.\n\n## Known issues\n\n*   There are
  reports of Keter not working behind an nginx reverse proxy. From\n    the reports,
  this appears to be a limitation in nginx's implementation, not a\n    problem with
  Keter. Keter works fine behind other reverse proxies, including\n    Apache and
  Amazon ELB.\n\n    One possible workaround is to add the following lines to your
  nginx configuration:\n\n        proxy_set_header Connection \"\";\n        proxy_http_version
  1.1;\n\n    This has not yet been confirmed to work in production. If you use this,\n
  \   please report either its success or failure back to me.\n    \n    Additionally,
  to make sure that nginx does not reset the `Host` header \n    (which keter uses
  to choose the right target), you will need to add:\n\n        proxy_set_header Host
  $host;\n\n*   Keter does not handle password-protected SSL key files well.  When
  provided\n    with such a key file, unlike Apache and Nginx, Keter will not pause
  to ask\n    for the password.  Instead, your https connections will merely stall.\n\n
  \   To get around this, you need to create a copy of the key without password\n
  \   and deploy this new key:\n\n        openssl rsa -in original.key -out new.key\n\n
  \   (Back up the original key first, just in case.)\n\n## Stanza-based config files\n\nStarting
  with Keter 1.0, there is an alternate format for application Keter\nconfig files,
  which allows much more flexibility in defining multiple\nfunctionality for a single
  bundle (e.g., more than one web app, multiple\nredirects, etc). This README will
  eventually be updated to reflect all various\noptions. In the meanwhile, please
  see the following examples of how to use this\nfile format:\n\n* https://github.com/yesodweb/yesod-scaffold/blob/postgres/config/keter.yml\n*
  https://github.com/snoyberg/keter/blob/master/incoming/foo1_0/config/keter.yaml\n\n##
  Multiple SSL Certificates\n\nKeter is able to serve different certificates for different
  hosts,\nallowing for the deployment of distinct domains using the same\nserver.
  An example `keter-config.yaml` would look like::\n\n```\nroot: ..\nlisteners:\n
  \ - host: \"*4\" # Listen on all IPv4 hosts\n    port: 80\n  - host: 127.0.0.1\n
  \   key: key.pem\n    certificate: certificate1.pem\n  - host: 127.0.0.2\n    key:
  key.pem\n    certificate: certificate2.pem\n```\n\n\nAn alternative way to make
  this possible is adding the following `ssl:` argument\nto the `keter.yaml` file
  in your Yesod app's `config folder` as follows:\n\n```\nstanzas:\n    - type: webapp\n
  \     exec: ../yourproject\n      ssl:\n        key: /opt/keter/etc/cert/yourproject.key\n
  \       certificate: /opt/keter/etc/cert/yourproject.crt\n        chain-certificates:
  []\n```\n\nIf you don't have your certificates bundled in one `.crt` file, you should
  add\nthe other certificates in the following order\n\n```\n      ssl:\n        [..]\n
  \       chain-certificates:\n          - /opt/keter/etc/middle.crt\n          -
  /opt/keter/etc/root.crt\n```\n\nThis way you can designate certificates per Yesod
  App while still having one SSL certificate\nin your main `/opt/keter/etc/keter-config.yaml`
  for your other Yesod apps to default to\nif they don't have this `ssl:` argument
  in their `config/keter.yaml`.\n\nNOTE: If you get an error that a Bool was expected
  instead of an Object when adding the `ssl:`\nargument, then for this to work you
  might need to build Keter from Github, because at the time\nof writing the version
  of Keter on Hackage does not have this functionality. Just clone or \ndownload this
  repository and build it using stack.\n\n\n## FAQ\n\n*   Keter spawns multiple failing
  process when run with `sudo start keter`.\n    *   This may be due to Keter being
  unable to find the SSL certificate and key.\n        Try to run `sudo /opt/keter/bin/keter
  /opt/keter/etc/keter-config.yaml`.\n        If it fails with `keter: etc/certificate.pem:
  openBinaryFile: does not exist`\n        or something like it, you may need to provide
  valid SSL certificates and keys\n        or disable HTTPS, by commenting the key
  and certificate lines from\n        `/opt/keter/etc/keter-config.yaml`.\n\n\n##
  Debugging\nThere is a debug port option available in the global keter config:\n```yaml\ncli-port
  = 1234\n```\n\nThis allows you to attach netcat to that port, and introspect\nwhich
  processes are running within keter:\n```bash\nnc localhost 1234\n```\nThen type
  `--help` for options, currently it can only list\nthe apps, but this approach is
  easily extensible\nif you need additional debug information.\n\nThis option is disabled
  by default, but can be useful to\nfigure out what keter is doing.\n\n## Contributing\n\nIf
  you are interested in contributing, see\nhttps://github.com/snoyberg/keter/blob/master/incoming/README.md
  for a\ncomplete testing workflow. If you have any questions, you can open an\nissue
  in the issue tracker, ask on the #yesod freenode irc channel, or\nsend an email
  to yesodweb@googlegroups.com.\n"
license-name: MIT
