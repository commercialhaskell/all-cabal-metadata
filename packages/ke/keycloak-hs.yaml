homepage: https://github.com/cdupont/keycloak-hs#readme
changelog-type: markdown
hash: 19152e227419c888acfa170eee8242b351caad9aedc9840c7c02c3856012468f
test-bench-deps: {}
maintainer: corentin.dupont@gmail.com
synopsis: ''
changelog: |
  # Changelog for keycloak-hs

  ## Unreleased changes
basic-deps:
  http-client: '>=0.5 && <0.7'
  exceptions: '>=0.10 && <0.11'
  bytestring: '>=0.10 && <0.11'
  lens-aeson: '>=1.1 && <1.2'
  aeson-casing: '>=0.1 && <0.3'
  base: '>=4.9.1.0 && <5'
  base64-bytestring: '>=1.0 && <1.2'
  unordered-containers: '>=0.2 && <0.3'
  text: '>=1.2 && <1.3'
  http-api-data: '>=0.4 && <0.5'
  keycloak-hs: -any
  jose: '>=0.8 && <0.9'
  word8: '>=0.1 && <0.2'
  wreq: '>=0.5 && <0.6'
  monad-time: '>=0.3 && <0.4'
  containers: '>=0.6 && <0.7'
  lens: '>=4.17 && <4.20'
  hslogger: '>=1.2 && <1.4'
  mtl: '>=2.2 && <2.3'
  hashable: '>=1.1 && <1.4'
  string-conversions: '>=0.4 && <0.5'
  http-types: '>=0.12 && <0.13'
  aeson: '>=1.4 && <1.6'
  safe: '>=0.3 && <0.4'
all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.1.0.0
- 0.1.1
- 0.2.0
- 1.0.0
- 1.0.1
- 1.1.0
- 1.1.1
- 2.0.0
- 2.0.1
- 2.0.2
- 2.0.3
- 2.1.0
- 3.0.0
author: Corentin Dupont
latest: 3.0.0
description-type: markdown
description: "Keycloak-hs\n===========\n[![Build status](https://github.com/cdupont/keycloak-hs/actions/workflows/ci.yml/badge.svg)](https://github.com/cdupont/keycloak-hs/actions/workflows/ci.yml)\n\nKeycloak-hs
  is an Haskell library for connecting to [Keycloak](https://www.keycloak.org/).\nKeycloak
  allows to authenticate and manage users and to protect API resources.\nThis library
  allows you to retrieve and analyse Keycloak authentication tokens, and to protect
  resources in your API.\n\nInstall\n=======\n\nInstallation follows the standard
  approach to installing Stack-based projects.\n\n1. Install the [Haskell `stack`
  tool](http://docs.haskellstack.org/en/stable/README).\n2. Run `stack install --fast`
  to install this package.\n\nTutorial\n========\n\nIn this tutorial, we'll configure
  Keycloak for running our [small example](./examples/Main.hs).\nFirst you should
  install and run Keycloak: [follow this tutorial](https://www.keycloak.org/docs/latest/getting_started/index.html).\n\nThe
  example is compiled and run this way:\n```\n$ stack install\n$ example\n```\n\nBut
  before running it, we should create a Client in Keycloak and retrieve the adapter
  config file.\nIn Keycloak admin panel, create the following:\n- a realm named \"demo\"\n-
  a client named \"demo\".\n\nThis file is now downloadable in your Client/Installation
  tab (JSON format).\nPlace it in this folder.\n\nAuthentication\n--------------\n\nAuthentication
  with Keycloak is based on [JWTs](https://jwt.io/).\n\nIn Keycloak, create a user
  named \"demo\" with password \"demo\". \nMake sure that your user is enable, email
  verified, and the password is not temporary.\nAt this point, you should be able
  to retrieve tokens from Keycloak, verify them using this library, and extract a
  User from the tokens.\n\nAdditionaly, you can add attributes to your user. In Keycloak
  UI, go in the User Attributes tab and add an attribute, such as \"phone\".\nIn order
  for this attribute to appear in the token claims, we should also add a client \"mapper\".\nIn
  the client \"demo\", click on \"Mappers\"/\"add mappers\".\nFill the name=\"phone\",
  Mapper Type=User attribute, Token Claim Name=\"phone\", Claim JSON Type=String,
  and save.\n\nAuthorizations\n--------------\n\nKeycloak can also manage your resources
  and related access policies.\nThe idea is that, each time a user makes a request
  on your application, you will ask Keycloak \"Can he really do that??\".\n\nIn the
  client \"demo\":\n- change \"Access Type\" to confidential\n- turn \"Authorization
  Enabled\" ON.\n\nA new \"Authorization\" tab should appear.\n\nLet's set up some
  authorization policies in order to demonstrate the capacity of Keycloak-hs.\nWe
  want to authorize our user \"demo\" to \"view\" any resource.\nFirst go in the new
  \"Authorization\" tab that appeared.\nFlip ON \"Remote Resource Management\".\n\nCreate
  a new Scope in the \"Authorization Scopes\" tab:\n- Name it \"view\".\n\nCreate
  a new \"User\" policy in the \"Policies\" tab with the following settings:\n- Name
  it \"Demo user have access\".\n- Select user \"demo\" in the drop box.\n- Logic
  should be positive.\n\nCreate a new scope-based permission in the \"Permissions\"
  tab:\n- Name it \"View resources\".\n- Select \"view\" in Scopes.\n- Select your
  previous policy \"Demo user have access\" in \"Apply Policy\".\n\nThat's it for
  the confguration of Keycloak.\nYou are now able to play with the \"Authorization\"
  part of the example.\nKeycloak is very complex, so you'll have fun exploring all
  the possibilities ;)\n\nEnjoy!\n"
license-name: BSD-3-Clause
