all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.2
- 0.2.0.3
- 0.3.0.0
- 0.5.0.0
- 0.7.0.0
- 0.7.0.1
author: Obsidian Systems LLC
basic-deps:
  aeson: '>=1.4.4.0 && <2.3'
  aeson-pretty: '>=0.8.7 && <0.9'
  base: '>=4.12.0.0 && <4.19'
  bytestring: '>=0.10.8.2 && <0.12'
  cli-extras: '>=0.2.1.0 && <0.3'
  cli-git: '>=0.2.0.0 && <0.3'
  cli-nix: '>=0.2.0.0 && <0.3'
  containers: '>=0.6.0.1 && <0.7'
  cryptonite: '>=0.25 && <0.31'
  data-default: '>=0.7.1.1 && <0.8'
  directory: '>=1.3.3.0 && <1.4'
  either: '>=5.0.1.1 && <5.1'
  exceptions: '>=0.10.3 && <0.11'
  extra: '>=1.6.18 && <1.8'
  filepath: '>=1.4.2.1 && <1.5'
  github: '>=0.25 && <0.30'
  here: '>=1.2.13 && <1.3'
  lens: '>=4.17.1 && <5.4'
  logging-effect: '>=1.3.4 && <1.5'
  megaparsec: '>=7.0.5 && <9.7'
  memory: '>=0.14 && <0.19'
  modern-uri: '>=0.3.1.0 && <0.4'
  monad-logger: '>=0.3.30 && <0.4'
  mtl: '>=2.2.2 && <2.4'
  nix-thunk: '>=0'
  optparse-applicative: '>=0.14.3.0 && <0.17'
  temporary: '>=1.3 && <1.4'
  text: '>=1.2.3.1 && <1.3'
  time: '>=1.8.0.2 && <1.12'
  unix: '>=2.7.2.2 && <2.8'
  which: '>=0.2 && <0.3'
  yaml: '>=0.11.1.2 && <0.12'
changelog: "# Revision history for nix-thunk\n\n## 0.7.0.1\n\n* Support GHC 9.6\n\n##
  0.7.0.0\n\n* Caching now works\n* [#42](https://github.com/obsidiansystems/nix-thunk/pull/42)
  Thunk read errors are now presented in a more informative manner.\n* [#43](https://github.com/obsidiansystems/nix-thunk/pull/43)
  `nix-thunk` will now ensure that any `git` processes invoked during its execution
  have a clean configuration. \n  This prevents `nix-thunk` crashing when e.g. the
  user's configuration `git` is valid only in a version newer than what `nix-thunk`
  links against, and works towards making thunks more reproducible by ensuring that
  thunk URIs are resolvable independently of the user's environment.\n\n## 0.6.1.0\n\n*
  [#36](https://github.com/obsidiansystems/nix-thunk/pull/36) Expose the internals
  of the `nix-thunk` library.\n\n## 0.6.0.0\n\n* [#34](https://github.com/obsidiansystems/nix-thunk/pull/34)
  Fix an\n  issue where thunks could not be fetched without `nix-thunk` (or one of\n
  \ its dependents, e.g. `obelisk`) being installed. Please update all\n  your thunks
  to use the new v8 thunk spec.\n\n  Updating your thunk can be done by running `nix-thunk
  unpack $path; nix-thunk pack $path`.\n\n* [#35](https://github.com/obsidiansystems/nix-thunk/pull/35)
  Determine remote using git-config when `branch.<name>.merge` option is set\n  (Fixes
  [obelisk#792](https://github.com/obsidiansystems/obelisk/issues/792).)\n\n## 0.5.1.0\n\n*
  Bump to cli-nix 0.2.0.0; This ensures that `nix-prefetch-git` can always be found.\n\n##
  0.5.0.0\n\n* Fix a critical bug where v6 thunks can not be used to fetch non-GitHub
  repositories. Please update all your thunks to use the new v7 thunk spec.\n  Updating
  your thunk can be done by running `nix-thunk unpack $path; nix-thunk pack $path`.\n*
  Building a functional `nix-thunk` _must_ be done using the included Nix derivation.\n\n##
  0.4.0.0\n\n* The default thunk specification (\"v6\") now uses a pinned version
  of nixpkgs, rather than the magic `<nixpkgs>`, for fetching thunks. This ensures
  that thunks can be fetched even in an environment where `NIX_PATH` is unset.\n\n##
  0.3.0.0\n\n* Fix readThunk when thunk is checked out [#4](https://github.com/obsidiansystems/nix-thunk/pull/4)\n*
  Fix removal of .git from default destination [#10](https://github.com/obsidiansystems/nix-thunk/pull/10)\n\n##
  0.2.0.3\n\n* Default to GHC 8.8.4 and update dependency bounds\n\n## 0.2.0.2\n*
  Add support for GHC 8.8.4.\n\n## 0.2.0.1\n* Fix parsing of --rev arguments\n\n##
  0.2.0.0\n* Add nix-thunk create.  This caused some minor breakage to the Haskell
  library API, but not the Nix or command line interfaces.\n\n## 0.1.0.0\n* Initial
  release.  Extracted the Nix part of this code from https://github.com/obsidiansystems/reflex-platform
  and the Haskell part from https://github.com/obsidiansystems/obelisk\n"
changelog-type: markdown
description: |
  nix-thunk
  =========
  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/nix-thunk.svg)](https://hackage.haskell.org/package/nix-thunk) [![Github CI](https://github.com/obsidiansystems/nix-thunk/workflows/github-action/badge.svg)](https://github.com/obsidiansystems/nix-thunk/actions) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/obsidiansystems/nix-thunk/blob/master/LICENSE)

  nix-thunk is a lightweight Nix dependency manager, focused on making it easy to contribute improvements back to libraries you depend on.

  nix-thunk does this by creating and managing "thunks" - directories that stand in for full git repositories.  Like git submodules, they pin a specific commit of the target repository, but unlike git submodules, you don't have to clone them to use them.  nix-thunk makes them "transparent" to Nix scripts, so any script that calls `import path/to/some/thunk` will work the same on the thunk as it does on the original repository.

  * [Installation](#installation)
  * [Command Usage](#command-usage)
    * [Create a dependency](#create-a-dependency)
    * [Work on a dependency](#work-on-a-dependency)
    * [Update a dependency](#update-a-dependency)
  * [Nix Usage](#nix-usage)
  * [Contributing](#contributing)
  * [License](#license)

  ## Installation

  ```bash
  nix-env -f https://github.com/obsidiansystems/nix-thunk/archive/master.tar.gz -iA command
  ```

  **WARNING**: It is _not_ possible to compile `nix-thunk` without Nix. To ensure that packed thunks are buildable even in environments where diamond paths are unavailable (specifically `<nixpkgs>`), `nix-thunk` _must_ be built with knowledge of a known-good nixpkgs, _and_ for `nix-thunk` to be able to manipulate these thunks, it must _always_ be the same version of nixpkgs.

  ## Command Usage

  ### Create a dependency

  ```bash
  nix-thunk create https://example.com/some-dep
  ```

  If you have already cloned the dependency as a git repository, you can just `pack` it instead:

  ```bash
  nix-thunk pack some-dep
  ```

  ### Work on a dependency

  If you discover a bug fix or improvement that your dependency needs, you can use `nix-thunk unpack path/to/your/dependency` to turn the thunk back into a full checkout of the repository.  Your Nix scripts should continue working, and you can modify the dependency's source code, push it to a branch or a fork, send a pull request, and then use `nix-thunk pack path/to/your/dependency` to pack it back up into a thunk.  When the dependency accepts your pull request, you can easily update the thunk.

  ```bash
  nix-thunk unpack some-dep
  # Improve some-dep and push your work to a branch
  nix-thunk pack some-dep
  ```

  ### Update a dependency

  For routine updates, you can run `nix-thunk update path/to/your/dependency` to point the thunk at the latest version of the dependency without needing to do a `nix-thunk unpack` or a `git clone`.

  ```bash
  nix-thunk update some-dep
  ```

  ## Nix Usage

  The [`default.nix`](default.nix) file in this repository also defines the nix function, `thunkSource`. This can be used in your nix files to access the contents of thunks. In the following example, a thunk is used in place of the source location argument to `callCabal2nix`. `thunkSource` works whether the thunk is packed or unpacked, making it convenient to run nix commands with modified thunks.

  ```nix
    haskellPackages = pkgs.haskell.packages.ghc865.override {
      overrides = self: super: {
        which = self.callCabal2nix "which" (thunkSource ./dep/which) {};
      };
    };
  ```

  You can also represent in nix all the thunks of a given directory
  ```nix
  let sources = nix-thunk.mapSubdirectories nix-thunk.thunkSource ./dep;
  ```
  ```nix
  { which = self.callCabal2nix "which" sources.which {}; }
  ```

  You can also access subfolders of a thunk. For example:

  ```nix
  {
    imports = [ "${builtins.fetchTarball <some-tar-url>}/path/to/subfolder" ];
  }
  ```
  becomes
  ```
  {
    imports = [ "${nix-thunk.thunkSource <thunk-location>}/path/to/subfolder>" ];
  }
  ```

  ## Contributing
  Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. See the [contribution guide](CONTRIBUTING.md) for more details.

  ## License
  [BSD3](./LICENSE)

  ***

  ![Obsidian Systems](https://obsidian.systems/static/images/ObsidianSystemsLogo.svg)
description-type: markdown
hash: 5defb198e95326e94d1777734d5b90810dc32aa2a8db328413c542bd3d01c756
homepage: ''
latest: 0.7.0.1
license-name: BSD-3-Clause
maintainer: maintainer@obsidian.systems
synopsis: Lightweight dependency management with Nix
test-bench-deps: {}
