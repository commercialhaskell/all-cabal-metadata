homepage: ''
changelog-type: markdown
hash: 0591b4c09c8c3f2126719aa1dddc4c63a78443e3769f3bb48056a261f77ce4fd
test-bench-deps: {}
maintainer: maintainer@obsidian.systems
synopsis: Lightweight dependency management with Nix
changelog: |
  # Revision history for nix-thunk

  ## 0.4.0.0

  * The default thunk specification ("v6") now uses a pinned version of nixpkgsk, rather than the magic `<nixpkgs>`, for fetching thunks. This ensures that thunks can be fetched even in an environment where `NIX_PATH` is unset.

  ## 0.3.0.0

  * Fix readThunk when thunk is checked out [#4](https://github.com/obsidiansystems/nix-thunk/pull/4)
  * Fix removal of .git from default destination [#10](https://github.com/obsidiansystems/nix-thunk/pull/10)

  ## 0.2.0.3

  * Default to GHC 8.8.4 and update dependency bounds

  ## 0.2.0.2
  * Add support for GHC 8.8.4.

  ## 0.2.0.1
  * Fix parsing of --rev arguments

  ## 0.2.0.0
  * Add nix-thunk create.  This caused some minor breakage to the Haskell library API, but not the Nix or command line interfaces.

  ## 0.1.0.0
  * Initial release.  Extracted the Nix part of this code from https://github.com/obsidiansystems/reflex-platform and the Haskell part from https://github.com/obsidiansystems/obelisk
basic-deps:
  modern-uri: '>=0.3.1.0 && <0.4'
  exceptions: '>=0.10.3 && <0.11'
  either: '>=5.0.1.1 && <5.1'
  bytestring: '>=0.10.8.2 && <0.11'
  here: '>=1.2.13 && <1.3'
  extra: '>=1.6.18 && <1.8'
  unix: '>=2.7.2.2 && <2.8'
  base: '>=4.12.0.0 && <4.15'
  time: '>=1.8.0.2 && <1.12'
  aeson-pretty: '>=0.8.7 && <0.9'
  text: '>=1.2.3.1 && <1.3'
  megaparsec: '>=7.0.5 && <9.1'
  filepath: '>=1.4.2.1 && <1.5'
  nix-thunk: -any
  data-default: '>=0.7.1.1 && <0.8'
  cli-git: '>=0.1.0.1 && <0.2'
  memory: '>=0.14 && <0.16'
  logging-effect: '>=1.3.4 && <1.4'
  containers: '>=0.6.0.1 && <0.7'
  lens: '>=4.17.1 && <4.20'
  cli-nix: '>=0.1.0.1 && <0.2'
  cli-extras: '>=0.1.0.1 && <0.2'
  which: '>=0.2 && <0.3'
  cryptonite: '>=0.25 && <0.30'
  mtl: '>=2.2.2 && <2.3'
  github: '>=0.25 && <0.28'
  monad-logger: '>=0.3.30 && <0.4'
  temporary: '>=1.3 && <1.4'
  optparse-applicative: '>=0.14.3.0 && <0.17'
  aeson: '>=1.4.4.0 && <1.6'
  yaml: '>=0.11.1.2 && <0.12'
  directory: '>=1.3.3.0 && <1.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.2
- 0.2.0.3
- 0.3.0.0
- 0.4.0.0
author: Obsidian Systems LLC
latest: 0.4.0.0
description-type: markdown
description: |
  nix-thunk
  =========
  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/nix-thunk.svg)](https://hackage.haskell.org/package/nix-thunk) [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/nix-thunk/badge)](https://matrix.hackage.haskell.org/#/package/nix-thunk) [![Github CI](https://github.com/obsidiansystems/nix-thunk/workflows/github-action/badge.svg)](https://github.com/obsidiansystems/nix-thunk/actions) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/obsidiansystems/nix-thunk/blob/master/LICENSE)

  nix-thunk is a lightweight Nix dependency manager, focused on making it easy to contribute improvements back to libraries you depend on.

  nix-thunk does this by creating and managing "thunks" - directories that stand in for full git repositories.  Like git submodules, they pin a specific commit of the target repository, but unlike git submodules, you don't have to clone them to use them.  nix-thunk makes them "transparent" to Nix scripts, so any script that calls `import path/to/some/thunk` will work the same on the thunk as it does on the original repository.

  * [Installation](#installation)
  * [Command Usage](#command-usage)
    * [Create a dependency](#create-a-dependency)
    * [Work on a dependency](#work-on-a-dependency)
    * [Update a dependency](#update-a-dependency)
  * [Nix Usage](#nix-usage)
  * [Contributing](#contributing)
  * [License](#license)

  ## Installation

  ```bash
  nix-env -f https://github.com/obsidiansystems/nix-thunk/archive/master.tar.gz -iA command
  ```

  ## Command Usage

  ### Create a dependency

  ```bash
  nix-thunk create https://example.com/some-dep
  ```

  If you have already cloned the dependency as a git repository, you can just `pack` it instead:

  ```bash
  nix-thunk pack some-dep
  ```

  ### Work on a dependency

  If you discover a bug fix or improvement that your dependency needs, you can use `nix-thunk unpack path/to/your/dependency` to turn the thunk back into a full checkout of the repository.  Your Nix scripts should continue working, and you can modify the dependency's source code, push it to a branch or a fork, send a pull request, and then use `nix-thunk pack path/to/your/dependency` to pack it back up into a thunk.  When the dependency accepts your pull request, you can easily update the thunk.

  ```bash
  nix-thunk unpack some-dep
  # Improve some-dep and push your work to a branch
  nix-thunk pack some-dep
  ```

  ### Update a dependency

  For routine updates, you can run `nix-thunk update path/to/your/dependency` to point the thunk at the latest version of the dependency without needing to do a `nix-thunk unpack` or a `git clone`.

  ```bash
  nix-thunk update some-dep
  ```

  ## Nix Usage

  The [`default.nix`](default.nix) file in this repository also defines the nix function, `thunkSource`. This can be used in your nix files to access the contents of thunks. In the following example, a thunk is used in place of the source location argument to `callCabal2nix`. `thunkSource` works whether the thunk is packed or unpacked, making it convenient to run nix commands with modified thunks.

  ```nix
    haskellPackages = pkgs.haskell.packages.ghc865.override {
      overrides = self: super: {
        which = self.callCabal2nix "which" (thunkSource ./dep/which) {};
      };
    };
  ```

  You can also represent in nix all the thunks of a given directory
  ```nix
  let sources = nix-thunk.mapSubdirectories nix-thunk.thunkSource ./dep;
  ```
  ```nix
  { which = self.callCabal2nix "which" sources.which {}; }
  ```

  ## Contributing
  Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. See the [contribution guide](CONTRIBUTING.md) for more details.

  ## License
  [BSD3](./LICENSE)

  ***

  ![Obsidian Systems](https://obsidian.systems/static/images/ObsidianSystemsLogo.svg)
license-name: BSD-3-Clause
