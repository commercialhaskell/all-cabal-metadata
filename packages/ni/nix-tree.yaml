all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.9
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
- 0.4.1
- 0.5.0
- 0.6.0
- 0.6.1
author: Utku Demir
basic-deps:
  aeson: '>=0'
  async: '>=0'
  base: '>=4.11 && <5'
  brick: '>=2.1'
  bytestring: '>=0'
  clock: '>=0'
  containers: '>=0'
  directory: '>=0'
  dot: '>=0'
  filepath: '>=0'
  hrfsize: '>=0'
  microlens: '>=0'
  optparse-applicative: '>=0'
  relude: '>=0'
  terminal-progress-bar: '>=0'
  text: '>=0'
  typed-process: '>=0'
  unordered-containers: '>=0'
  vty: '>=0'
changelog: "# Changelog\n\n## 0.6.1 - 2025-01-25:\n\n* chore: Relax brick upper bound
  to work with newer Stackage snapshot\n\n## 0.6.0 - 2025-01-11:\n\n* feat: Show signatures
  of store paths (thanks @caspervk, PR: [#107])\n* fix: Fix default nix-tree invocation
  not working when one of the default directories is not a store path (thanks @sg-qwt,
  @GrigorenkoPV, issue [#106], pr [#109], [#110])\n\n[#107]: https://github.com/utdemir/nix-tree/pull/107\n[#106]:
  https://github.com/utdemir/nix-tree/issues/106\n[#109]: https://github.com/utdemir/nix-tree/pull/109\n[#110]:
  https://github.com/utdemir/nix-tree/pull/110\n\n## 0.5.0 - 2024-10-06:\n\n* feat:
  Add `--file` to run nix-tree against attributes from a file. (thanks @blackheaven,
  PR: [#103])\n* fix: Fix a spurious warning when running `nix-tree` as an untrusted
  user (thanks @Schweber & @bryango, issue [#99], PR: [#100])\n* chore: Add an example
  for running `nix-tree` on a NixOS configuration flake reference (thanks @thenbe,
  PR: [#97])\n\n[#103]: https://github.com/utdemir/nix-tree/pull/103\n[#99]: https://github.com/utdemir/nix-tree/issues/99\n[#100]:
  https://github.com/utdemir/nix-tree/pull/100\n[#97]: https://github.com/utdemir/nix-tree/pull/97\n\n##
  0.4.1 - 2024-04-07:\n\n* fix: Restore terminal state properly after exiting (thanks
  @Atemu, issue: [#88])\n\n[#88]: https://github.com/utdemir/nix-tree/issues/88\n\n##
  0.4.0 - 2024-01-21:\n\n* feat: Allow passing `--store` for alternative nix store
  (e.g. remote binary cache) (thanks @bryango, PR: [#79][])\n* feat: Graphviz export
  via `--dot` flag (thanks @SomeoneSerge, issue: [#59][])\n\n[#79]: https://github.com/utdemir/nix-tree/pull/79\n[#59]:
  https://github.com/utdemir/nix-tree/issues/59\n\n## 0.3.3 - 2024-01-17:\n\n* chore:
  Update 'brick' & 'optparse-applicative' library to work with the newer Stackage
  snapshot (thanks @ncfavier, PR: [#78][]) \n\n[#78]: https://github.com/utdemir/nix-tree/issues/78\n\n##
  0.3.2 - 2023-11-28:\n\n* fix: Support new path-info syntax introduced in nix 2.19
  (thanks @SuperSandro2000, @GrigorenkoPV9, issue: [#67][], PR: [#68][])\n\n[#67]:
  https://github.com/utdemir/nix-tree/issues/67\n[#68]: https://github.com/utdemir/nix-tree/issues/68\n\n##
  0.3.1 - 2022-12-10:\n\n* fix: Update 'brick' library (thanks @ncfavier, PR: [#47][])
  \n\n[#47]: https://github.com/utdemir/nix-tree/issues/47\n\n## 0.3.0 - 2022-11-26:\n\n*
  feat: Improved help text.\n* feat: Allow passing '--impure' flag to Nix (issue:
  [#40][]) \n* fix: Use -O1 instead of -O2 to save on compile times.\n\n[#40]: https://github.com/utdemir/nix-tree/issues/40\n\n##
  0.2.1 - 2022-10-24:\n\n* fix: Fix excessive memory use when using why-depends on
  large dependency graphs (issue: [#31][])\n\n[#31]: https://github.com/utdemir/nix-tree/issues/31\n\n##
  0.2.0 - 2022-01-02:\n\n* feat: Support passing flake references (issue: [#27][])\n
  \ * Try `nix-tree nixpkgs#hello'\n* change: `nix-tree` now requires an explicit
  `--derivation` flag to work on store derivations rather than their outputs.\n  *
  This is to be more consistent `nix path-info`.\n* fix: Fix timeout when running
  external command for the 'yank' functionality (issue: [#25][])\n\n[#27]: https://github.com/utdemir/nix-tree/issues/27\n\n##
  0.1.9 - 2021-11-08:\n\n* fix: Automatically enable the required 'nix-command' experimental
  feature on Nix >= 2.4\n* fix: Do not refresh screen periodically unless necessary\n\n##
  0.1.8 - 2021-09-06:\n\n* fix: Reduce idle CPU use (issue: [#22][])\n* fix: Put a
  timeout on yank command (issue: [#25][])\n* fix: Various performance improvements\n\n[#22]:
  https://github.com/utdemir/nix-tree/issues/22\n[#25]: https://github.com/utdemir/nix-tree/issues/25\n\n##
  0.1.7 - 2021-03-28\n\n* feat: Ability to yank selected store path to clipboard (shortcut:
  'y')\n* fix: Try to respect terminals color scheme (thanks @kanashimia, PR: [#20][])\n\n[#20]:
  https://github.com/utdemir/nix-tree/issues/20\n\n## 0.1.6 - 2021-03-12\n\n* feat:
  Support non standard Nix store locations (issue: [#17][])\n* feat: Horizontal scrolling
  on why-depends window (issue: [#18][])\n\n[#17]: https://github.com/utdemir/nix-tree/issues/17\n[#18]:
  https://github.com/utdemir/nix-tree/issues/18\n\n## 0.1.5 - 2021-03-03\n\n* feat:
  Add sort order toggle.\n* fix: Search now does not contain false-positives.\n\n##
  0.1.4 - 2021-02-23\n\n* feat: Make search case insensitive.\n* fix: Can close the
  help modal now.\n\n## 0.1.3.1 - 2021-01-07\n\n* fix: Correctly pass --derivation
  flag to Nix >= 2.4\n\n## 0.1.3.0 - 2020-12-22\n\n* feat: Ability to work on .drv
  files.\n\n## 0.1.2.0 - 2020-09-15\n\n* feat: Add --version flag\n* fix: Can search
  the letter 'q' without closing the search modal. (issue: [#21][])\n\n[#21]: https://github.com/utdemir/nix-tree/issues/21\n\n##
  0.1.1.0 - 2020-08-23\n\n* feat: Seach functionality.\n"
changelog-type: markdown
description: |
  # nix-tree

  ![Build Status](https://github.com/utdemir/nix-tree/workflows/nix-build/badge.svg)
  [![Packaging status](https://repology.org/badge/vertical-allrepos/haskell:nix-tree.svg?exclude_unsupported=1)](https://repology.org/project/haskell:nix-tree/versions)

  Interactively browse dependency graphs of Nix derivations.

  [![asciicast](https://asciinema.org/a/cnilbmPXW51g97hdNJZcM5F6h.svg)](https://asciinema.org/a/cnilbmPXW51g97hdNJZcM5F6h)

  ## Installation

  `nix-tree` is on `nixpkgs` since `20.09`, so just use your preferred method for adding packages to your system, eg:

  ```
  nix-env -iA nix-tree
  ```

  Or, for flake enabled systems:

  ```
  nix profile install 'nixpkgs#nix-tree'
  ```

  To run the current development version:

  ```
  nix run github:utdemir/nix-tree -- --help
  ```

  ## Usage

  ```console
  $ nix-tree --help
  Usage: nix-tree [INSTALLABLE] [--store STORE] [--file FILE] [--version] [--derivation] [--impure] [--dot]

    Interactively browse dependency graphs of Nix derivations.

  Available options:
    INSTALLABLE              A store path or a flake reference.
                             Paths default to "~/.nix-profile" and "/var/run/current-system"
    --store STORE            The URL of the Nix store, e.g. "daemon" or "https://cache.nixos.org"
                             See "nix help-stores" for supported store types and settings.
    --file FILE              Interpret installables as attribute paths relative to the Nix expression stored in file.
    --version                Show the nix-tree version
    --derivation             Operate on the store derivation rather than its outputs
    --impure                 Allow access to mutable paths and repositories
    --dot                    Print the dependency graph in dot format
    -h,--help                Show this help text

  Keybindings:
    hjkl/Arrow Keys : Navigate
    w               : Open why-depends modal
    /               : Open search modal
    s               : Change sort order
    y               : Yank selected path to clipboard
    ?               : Show help
    q/Esc           : Quit / close modal
  ```

  ### Glossary

  * **NAR Size**: Size of the store path itself.
  * **Closure size**: Total size of the store path and all its transitive dependencies.
  * **Added size**:  Size of the store path, and all its _unique_ transitive
    dependencies. In other words, the cost of having that store path on top
    of all other paths. See [issue #14] for a better explanation.

  [issue #14]: https://github.com/utdemir/nix-tree/issues/14

  ### Tips

  `nix-build` prints built paths to stdout, which can be piped conveniently
  with `| xargs -o nix-tree`. Examples:

  ```bash
  # Output of a local derivation
  nix-build . --no-out-link | xargs -o nix-tree

  # Build time dependencies (passing a `.drv` path)
  nix-instantiate . | xargs -o nix-tree --derivation

  # Dependencies from shell.nix
  nix-build shell.nix -A inputDerivation | xargs -o nix-tree

  # All outputs of a derivation in nixpkgs
  nix-build '<nixpkgs>' -A openssl.all --no-out-link | xargs -o nix-tree
  ```

  `nix-tree` also supports flake references:

  ```bash
  # Build time dependencies of a flake on the current directory
  nix-tree --derivation '.#'

  # Same thing works for any flake reference
  nix-tree --derivation 'nixpkgs#asciiquarium'
  ```

  Run `nix-tree` on your current nixos system:

  ```bash
  nix-tree /nix/var/nix/profiles/system
  ```

  Run `nix-tree` on a flake reference of a nixosConfiguration:

  ```bash
  nix build --print-out-paths --no-link '.#nixosConfigurations.foo.config.system.build.toplevel'
  nix-tree '.#nixosConfigurations.foo.config.system.build.toplevel'
  ```

  Query the binary cache before download, with the `--store` option:

  ```bash
  # Query the runtime dependency of `stellarium` (2 GiB closure) without download
  nix eval --raw 'nixpkgs#stellarium.outPath' | xargs -o nix-tree --store https://cache.nixos.org
  ```

  For valid `--store` options, see [`nix help-stores`](https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-help-stores). For example,

  ```bash
  # Build in a temporary chroot store and examine the output
  nix build --store /tmp/chroot-store 'nixpkgs#hello' --print-out-paths | xargs -o nix-tree --store /tmp/chroot-store
  ```

  ## Contributing

  All contributions, issues and feature requests are welcome.

  To hack on it, simply run `nix-shell` and use `cabal` as usual. Please run `./format.sh` before sending a PR.

  ## Related tools

  * [nix-du](https://github.com/symphorien/nix-du): Visualise which gc-roots to delete to free some space in your nix store
  * [nix-melt](https://github.com/nix-community/nix-melt): A ranger-like flake.lock viewer
  * [nix-query-tree-viewer](https://github.com/cdepillabout/nix-query-tree-viewer): GTK viewer for the output of `nix-store --query --tree`
  * [nix-visualize](https://github.com/craigmbooth/nix-visualize): Uses the Nix package manager to visualize the dependencies of a given package
description-type: markdown
hash: 9fd0aa479810c96b55fed3804a09f9cc27192f3f43188fa9872f7f0d6fba78cb
homepage: https://github.com/utdemir/nix-tree
latest: 0.6.1
license-name: BSD-3-Clause
maintainer: Utku Demir
synopsis: Interactively browse a Nix store paths dependencies
test-bench-deps:
  aeson: '>=0'
  base: '>=4.11 && <5'
  brick: '>=2.1'
  bytestring: '>=0'
  clock: '>=0'
  containers: '>=0'
  directory: '>=0'
  dot: '>=0'
  filepath: '>=0'
  hedgehog: '>=0'
  hrfsize: '>=0'
  microlens: '>=0'
  optparse-applicative: '>=0'
  relude: '>=0'
  text: '>=0'
  typed-process: '>=0'
  unordered-containers: '>=0'
  vty: '>=0'
