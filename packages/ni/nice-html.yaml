all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 0.2.0
- 0.3.0
- 0.4.0
- 0.4.1
author: Mike Ledger
basic-deps:
  base: '>=4.9 && <5'
  bifunctors: '>=5.1'
  blaze-markup: '>=0.5'
  bytestring: '>=0.10'
  containers: '>=0.5'
  data-default-class: '>=0'
  deepseq: '>=0'
  free: '>=4.5'
  lens: '>=4.15'
  recursion-schemes: '>=5.0.1'
  template-haskell: '>=2.11'
  text: '>=1.2'
  transformers: '>=0'
  vector: '>=0.5'
changelog: ''
changelog-type: ''
description: "# A nice HTML templating library\n\nThis is a library for HTML templating
  in the same vein as `blaze-html`, `lucid`,\nor `type-of-html`, which all provide
  HTML EDSLs for Haskell.\n\n## Overview\nWIP. Check out `Text.Html.Nice.Writer` for
  the simplest, most recommendedest,\nmonadic interface.\n\n## Example\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nmodule TodoList where\nimport           Data.Text
  \                  (Text)\nimport           Text.Html.Nice              ((:$) (..),
  Attr (..), Builder,\n                                              FastMarkup, Render
  (..))\nimport           Text.Html.Nice.Writer\nimport           Text.Html.Nice.Writer.Html5\n\ndata
  Todo = Todo\n  { todoDate :: Text\n  , todoText :: Text\n  }\n\ntodos :: [Todo]\ntodos
  =\n  [ Todo \"october 25 2017\" \"write todo list <html>asdf</html>\" -- escaped\n
  \ , Todo \"october 26 2017\" \"write another todo list\"\n  ]\n\ntemplate :: FastMarkup
  ([Todo] -> FastMarkup Text)\ntemplate = compile $ do\n  doctype_\n  html_ $ do\n
  \   head_ $ title_ \"Todo list\"\n    body_ $ do\n      h1_ \"Todo list\"\n      stream
  $ div_ ! \"class\" := \"todo-item\" $ do\n        text \"\\n<script></script>\\n\"
  -- this gets escaped\n        b_ (dynamic todoText)\n        \" (\"\n        dynamic
  todoDate\n        \")\"\n\ntest :: Monad m => m Builder\ntest = r (template :$ todos)\n```\n\n##
  Comparison\n\n1. Unlike `blaze-html` and `lucid`: `nice-html` has a distinct template\n
  \  compilation phase, with a different type for compiled markup.\n\n2. Unlike `type-of-html`:
  this compilation is done explicitly at runtime. This\n   increases runtime, but
  enables more complex transformations. Namely\n   `nice-html` can compile escaped
  text. `nice-html` also makes no attempt to\n   ensure correct HTML.\n\n3. Unlike
  each of them, `nice-html` parameterises its templating type with the\n   type for
  the data you use in the template. This enables `nice-html` to compile\n   the static
  parts of the dynamic parts of a template instead of just the \n   top-level stuff.\n
  \  \n4. Like `lucid`, `nice-html` has a valid `Monad` interface (actually, two).\n\n5.
  Unlike `lucid`, `nice-html` does not have a monad transformer. The only state\n
  \  that `nice-html` can currently keep track of is an increasing `Int` counter,\n
  \  intended to be used to keep track of the `id` of elements for use with\n   JavaScript.
  But even this doesn't really work, because it doesn't support\n   repeated elements
  (e.g. produced by `stream`).\n   \n   This makes it harder to write templates for
  `nice-html`, because you \n   generally can't/shouldn't use the familiar `mapM_`
  etc. for dynamic data as \n   you might if you were using `lucid` or `blaze`.\n
  \  \n\n## Benchmark results (as of 0.3.0)\n\n### Memory (includes memory overhead
  compilation... I think)\n\n```\nnice-html-0.3.0: benchmarks\nRunning 2 benchmarks...\nBenchmark
  mem: RUNNING...\nOK: nice = blaze\nOK: nice = lucid\nOK: lucid = blaze\n\nCase         Allocated
  \ GCs\n10/blaze       562,152    1\n10/nice        297,544    0\n10/lucid       230,304
  \   0\n100/blaze    4,520,016    8\n100/nice     2,952,184    5\n100/lucid    1,855,256
  \   3\n1000/blaze  44,096,616   85\n1000/nice   29,500,096   57\n1000/lucid  18,071,008
  \  32\nBenchmark mem: FINISH\n```\n\n### Runtime\n\n```\nBenchmark perf: RUNNING...\nbenchmarking
  10/blaze\ntime                 80.13 μs   (79.59 μs .. 80.73 μs)\n                     1.000
  R²   (1.000 R² .. 1.000 R²)\nmean                 80.41 μs   (80.08 μs .. 80.83
  μs)\nstd dev              1.166 μs   (951.2 ns .. 1.531 μs)\n\nbenchmarking 10/nice\ntime
  \                34.09 μs   (33.88 μs .. 34.28 μs)\n                     1.000 R²
  \  (1.000 R² .. 1.000 R²)\nmean                 34.08 μs   (33.93 μs .. 34.25 μs)\nstd
  dev              542.8 ns   (477.2 ns .. 619.9 ns)\nvariance introduced by outliers:
  12% (moderately inflated)\n\nbenchmarking 10/lucid\ntime                 57.40 μs
  \  (57.03 μs .. 57.75 μs)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean
  \                57.44 μs   (57.15 μs .. 57.67 μs)\nstd dev              856.7 ns
  \  (763.9 ns .. 960.4 ns)\n\nbenchmarking 100/blaze\ntime                 660.8
  μs   (657.2 μs .. 664.9 μs)\n                     1.000 R²   (1.000 R² .. 1.000
  R²)\nmean                 661.6 μs   (659.1 μs .. 664.3 μs)\nstd dev              8.748
  μs   (7.441 μs .. 10.24 μs)\n\nbenchmarking 100/nice\ntime                 336.9
  μs   (334.7 μs .. 338.9 μs)\n                     1.000 R²   (0.999 R² .. 1.000
  R²)\nmean                 334.3 μs   (333.2 μs .. 336.1 μs)\nstd dev              4.685
  μs   (3.229 μs .. 7.873 μs)\n\nbenchmarking 100/lucid\ntime                 514.4
  μs   (509.5 μs .. 519.7 μs)\n                     0.999 R²   (0.999 R² .. 1.000
  R²)\nmean                 507.1 μs   (504.6 μs .. 510.4 μs)\nstd dev              9.897
  μs   (7.573 μs .. 14.83 μs)\nvariance introduced by outliers: 11% (moderately inflated)\n\nbenchmarking
  1000/blaze\ntime                 6.355 ms   (6.324 ms .. 6.380 ms)\n                     1.000
  R²   (1.000 R² .. 1.000 R²)\nmean                 6.424 ms   (6.400 ms .. 6.453
  ms)\nstd dev              79.56 μs   (62.81 μs .. 106.2 μs)\n\nbenchmarking 1000/nice\ntime
  \                3.356 ms   (3.348 ms .. 3.366 ms)\n                     1.000 R²
  \  (1.000 R² .. 1.000 R²)\nmean                 3.376 ms   (3.369 ms .. 3.385 ms)\nstd
  dev              24.95 μs   (20.64 μs .. 29.55 μs)\n\nbenchmarking 1000/lucid\ntime
  \                4.885 ms   (4.850 ms .. 4.921 ms)\n                     1.000 R²
  \  (1.000 R² .. 1.000 R²)\nmean                 4.868 ms   (4.857 ms .. 4.881 ms)\nstd
  dev              36.95 μs   (31.34 μs .. 43.37 μs)\n\nBenchmark perf: FINISH\n```\n"
description-type: markdown
hash: 1b4ec51b63856b4d31aa681fb46637a37f00ec907753ae5ebcb0e860250c21b1
homepage: https://github.com/mikeplus64/nice-html#readme
latest: 0.4.1
license-name: MIT
maintainer: mike@quasimal.com
synopsis: A fast and nice HTML templating library with distinct compilation/rendering
  phases.
test-bench-deps:
  base: '>=4.9'
  blaze-html: '>=0'
  blaze-markup: '>=0'
  bytestring: '>=0'
  criterion: '>=0'
  lucid: '>=0'
  nice-html: '>=0'
  pretty-show: '>=0'
  shakespeare: '>=0'
  text: '>=0'
  transformers: '>=0'
  type-of-html: '>=0'
  weigh: '>=0'
