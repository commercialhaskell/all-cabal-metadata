all-versions:
- 1.0.0.0
- 1.1.0.0
- 1.3.0.0
- 1.4.0.0
- 1.7.1.0
- 1.8.0.0
- 1.9.0.0
- 1.9.1.0
author: Greg Horn
basic-deps:
  Chart: '>=1.3.3'
  Chart-gtk: '>=1.3.3'
  Plot-ho-matic: '>=0.6.0.0'
  aeson: '>=0'
  base: '>=4.6 && <5'
  binary: '>=0'
  bytestring: '>=0'
  casadi-bindings: '>=2.4.1.4'
  casadi-bindings-core: '>=2.4.1.0'
  cereal: '>=0'
  cmdargs: '>=0'
  colour: '>=0'
  containers: '>=0.5'
  data-default-class: '>=0'
  directory: '>=0'
  distributive: '>=0'
  dynobud: '>=0'
  generic-accessors: '>=0.5.0.0'
  hmatrix: '>=0.17.0.1'
  hmatrix-gsl: '>=0.17.0.0'
  jacobi-roots: '>=0.2 && <0.3'
  lens: '>=0'
  linear: '>=1.3.1.1'
  mtl: '>=2.2.1'
  mwc-random: '>=0'
  not-gloss: '>=0.7.4.0'
  process: '>=0'
  reflection: '>=1.3.2'
  semigroups: '>=0'
  spatial-math: '>=0.2.1.0'
  stm: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
  vector: '>=0.10'
  vector-binary-instances: '>=0'
  zeromq4-haskell: '>=0'
changelog: ''
changelog-type: ''
description: |
  ## dynobud - your dynamic optimization buddy

  [![Build Status](https://secure.travis-ci.org/ghorn/dynobud.png?branch=master)](http://travis-ci.org/ghorn/dynobud)

  This library has a few distinct features, which may later be broken into separate packages:
  * high-level, strongly-typed interface to CasADi
  * NLP modeling/solving (examples/EasyNlp.hs, examples/BasicNlp.hs, examples/SofaExpando.hs)
  * OCP modeling/solving (examles/Glider.hs, examples/DaeColl.hs, examples/Rocket.hs, etc)
  * toy OCP solver interface (examples/ToyOcp.hs)
  * proof of concept monadic NLP modeling DSL (examples/NlpDsl.hs)
  * live plotter for OCP solving (examples/Dynoplot.hs)

  This package is built on top of CasADi (www.casadi.org).
  You will have to install the CasADi C++ libraries and the casadi-bindings haskell package.
  See http://hackage.haskell.org/package/casadi-bindings for instructions.
  Installing ipopt is also highly recommended if you want to solve NLPs (`apt-get install coinor-libipopt-dev` if you're lucky)

  Please keep in mind that this library is continually evolving as my PhD progresses and I expect it to be very unstable.
  The API is also very messy as the library is evolving fast and it's unclear which parts are internal and external.
  Nevertheless, I have started making hackage releases so that my few users have some snapshots to version-constrain against.
  The library is tested on travis-ci, so the unit tests pass and the examples build.

  To install:

      >> cabal update
      >> cabal install dynobud

  casadi-bindings will probably fail, re-read casadi-bindings instructions

  To install dependencies, you may need to do something like this:

      >> cabal install alex
      >> cabal install happy
      >> cabal install gtk2hs-buildtools

      >> sudo apt-get install coinor-libipopt-dev liblapack-dev libblas-dev libglpk-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev libzmq3-dev libglib2.0-dev libcairo2-dev libpango1.0-dev libgtk2.0-dev libgsl0-dev

  To build dynobud from source

      >> git clone git://github.com:ghorn/dynobud.git
      >> cd dynobud
      >> cabal install --only-dependencies            # without examples
      >> cabal install --only-dependencies -fexamples # with examples
      >> cabal configure
      >> cabal build

  Try running the examples in dynobud/examples.

      >> cabal configure -fexamples
      >> cabal build
      >> dist/build/rocket/rocket

  Known issues:

      "user error: out of memory"

  If you get this ^ error on OSX while using the plotting tools, your
  cairo/pango/gtk may be linked to an XQuartz library.
  Add "extra-lib-dirs=/usr/local/lib" (or wherever the correct libraries are)
  to your .cabal/config and re-install haskell bindings to cairo/pango/gtk/etc
description-type: markdown
hash: 8f9542c89d0e821674f112456b78a0319c7170857adc9b6f59e79dabb701caf5
homepage: ''
latest: 1.9.1.0
license-name: LGPL-3.0-only
maintainer: gregmainland@gmail.com
synopsis: your dynamic optimization buddy
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=2'
  base: '>=4.6 && <5'
  binary: '>=0'
  casadi-bindings: '>=0'
  cereal: '>=0'
  containers: '>=0'
  doctest: '>=0.8'
  dynobud: '>=0'
  hmatrix: '>=0'
  hmatrix-gsl: '>=0'
  linear: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  test-framework-quickcheck2: '>=0'
  vector: '>=0'
