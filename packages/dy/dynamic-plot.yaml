all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
author: Justus SagemÃ¼ller
basic-deps:
  JuicyPixels: '>3 && <4'
  MemoTrie: '>=0'
  base: '>=4.5 && <6'
  colour: '>=2 && <3'
  colour-space: '>=0.2'
  constrained-categories: '>=0.2'
  containers: '>=0'
  data-default: '>=0'
  deepseq: '>=0'
  diagrams-cairo: '>=0'
  diagrams-core: '>=0'
  diagrams-gtk: '>=0'
  diagrams-lib: '>=1.3 && <1.5'
  free-vector-spaces: '>=0.1 && <0.3'
  glib: '>=0'
  gtk: '>0.10 && <0.16'
  lens: <6.0
  linearmap-category: '>=0.3.5'
  manifold-random: '>=0'
  manifolds: '>=0.4.2 && <0.7'
  mtl: '>=0'
  process: '>=0'
  random: '>=0'
  random-fu: '>=0'
  semigroups: '>=0'
  tagged: '>=0'
  time: '>=0'
  transformers: '>=0'
  vector: '>=0'
  vector-space: '>=0.8'
changelog: ''
changelog-type: ''
description: |-
  Haskell excels at handling data like continuous functions
  in a nice way, i.e. without discretising anything to finite arrays as
  is typically done in languages like Matlab. Instead, you can simply pass
  around functions or infinite data structures (or /very/ high-resolution data
  that would be infeasible to handle in a strict language).

  However when you want to /view/ the data, it will eventually need to be exported out of Haskell
  in some finite form. The purpose of this library is to delay this discretisation
  as long as possible: it implements an interactive plotting window that accepts continuous/recursive
  data and only &#x201c;flattens&#x201d; it according to the specific view configuration.
  You can then zoom in to a shown diagram and it will automatically calculate
  the features more detailedly, or zoom out and discover previosly unexpected
  features. You don't need to worry about specifying the range and/or resolution beforehand:
  the program will try to find a suitable default view based on /all/ data you're displaying,
  and you can always still zoom, resize or move later.

  <http://projects.haskell.org/diagrams> are used as the &#x201c;pre-rendered&#x201d; type. This
  makes the output usable in a very wide range of applications, though at the moment only the GTK
  window view is implemented.
description-type: haddock
hash: cc1d84e01672e32e0ef925c7a24ab8345cf2d57ff1ded988eca0c47efedb72c7
homepage: https://github.com/leftaroundabout/dynamic-plot
latest: 0.4.2.0
license-name: GPL-3.0-only
maintainer: (@) jsag $ hvl.no
synopsis: Interactive diagram windows
test-bench-deps: {}
