homepage: http://github.com/willdonnelly/dyre
changelog-type: markdown
hash: 4b5aeb17e5e62c025568e006ab04678ae56a0baa496abe2ab8af9a1b350fc8f3
test-bench-deps:
  dyre: -any
  base: -any
  process: -any
  directory: '>=1.2.0.0'
maintainer: Fraser Tweedale <frase@frase.id.au>
synopsis: Dynamic reconfiguration in Haskell
changelog: |
  # 0.9.0

  - `realMain` can now **return arbitrary types**.  To support this
    change, `Params` got a new type variable.

    ```haskell
    -- before
    data Params cfgType
    wrapMain :: Params cfgType -> cfgType -> IO ()

    -- after
    data Params cfgType a
    wrapMain :: Params cfgType a -> cfgType -> IO a
    ```

  - `defaultParams`, which contains `undefined` fields, has been
    **deprecated** in favour of the new function `newParams`:

    ```haskell
    -- here be bottoms
    defaultParams :: Params cfg a

    -- celestial music playing
    newParams
      :: String                 -- ^ 'projectName'
      -> (cfg -> IO a)          -- ^ 'realMain' function
      -> (cfg -> String -> cfg) -- ^ 'showError' function
      -> Params cfg a
    ```

    `newParams` takes values for the three required fields, so program
    authors can clearly see what they have to do and are less likely
    to make a mistake.

  - **Cabal store support**: Users can add extra include dirs via the
    `includeDirs` field of `Params`.  The program author just has to
    put the package's library directory in the new `includeDirs`
    field:

    ```haskell
    import Config.Dyre
    import Paths_myapp (getLibDir)

    realMain  = …
    showError = …

    myapp cfg = do
      libdir <- getLibDir
      let params = (newParams "myapp" realMain showError)
            { includeDirs = [libdir] }
      wrapMain params cfg
    ```

    If an include dir appears to be in a Cabal store and matches the
    `projectName`, Dyre adds the corresponding `-package-id` option.
    As a result, recompilation works for programs installed via `cabal
    install`.

  - **Stack support**: if Dyre detects a `stack.yaml` alongside the
    custom configuration, it will use Stack to compile the program.
    Credit to *Jaro Reinders* for this feature.

  - Dyre compiles the custom executable with **`-threaded`** when the
    main executable uses the threaded RTS.  This means one less thing
    for program authors to remember (or forget) to do.

  - Dyre now **requires GHC >= 7.10**.

  - Improved **documentation**.

  - The **test suite** was expanded, and can now be executed via
    `cabal test`.

  - Dyre **cleans up** better after compilation (successful or
    unsuccesful), and behaves better when the custom configuration is
    removed.

  - Some versions of GHC write to standard error, even during a
    successful compilation.  Dyre no longer treats this as a
    compilation failure, instead relying solely on GHC's exit status.

  - Dyre recognises the **`HC` environment variable**.  If set, it
    will compile the program using the specified compiler.

  - Fixes for **Windows**, including working with recent versions of
    the *process* package.
basic-deps:
  xdg-basedir: -any
  unix: -any
  io-storage: -any
  base: '>=4.8 && <5'
  time: -any
  executable-path: -any
  filepath: -any
  process: -any
  binary: -any
  directory: '>=1.2.0.0'
all-versions:
- '0.4'
- '0.5'
- '0.6'
- 0.6.1
- 0.6.2
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.8.0
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.8.7
- 0.8.8
- 0.8.9
- 0.8.10
- 0.8.11
- 0.8.12
- 0.9.0
author: Will Donnelly
latest: 0.9.0
description-type: haddock
description: |-
  Dyre implements dynamic reconfiguration facilities after the
  style of Xmonad. Dyre aims to be as simple as possible without
  sacrificing features, and places an emphasis on simplicity of
  integration with an application.
  A full introduction with a complete example project can be found
  in the documentation for 'Config.Dyre'
license-name: BSD-3-Clause
