all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Alex Lang, Jasper Van der Jeugt
basic-deps:
  QuickCheck: '>=0'
  base: '>=4.8 && <5'
  containers: '>=0.3 && <0.7'
  criterion: '>=0'
  deepseq: '>=0'
  dynamic-graphs: '>=0'
  hashable: '>=1.0 && <1.3'
  hashtables: '>=1.2 && <1.3'
  mwc-random: '>=0.12 && <0.15'
  primitive: '>=0.5 && <0.7'
  semigroups: '>=0.18 && <0.19'
  text: '>=0'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.10 && <0.13'
changelog: |
  # CHANGELOG

  - 0.1.0.3 (2019-01-23)
      * Add semigroups to test dependencies

  - 0.1.0.2 (2019-01-12)
      * Fix build issues with GHC 8.6 and GHC 7.10

  - 0.1.0.1 (2019-01-11)
      * Restrict dependency versions somewhat

  - 0.1.0.0 (2019-01-11)
      * First version.  Basic versions of dynamic connectivity.  This blogpost has
        some more information:
        <https://jaspervdj.be/posts/2019-01-11-dynamic-graphs.html>
changelog-type: markdown
description: |
  # dynamic-graphs

  ## Summary

  A Haskell library for dealing with the _dynamic connectivity_ problem.  Consider
  an undirected graph, where edges may be added and removed.  This library allows
  you to answer the question "are the nodes X and Y connected" at any point in
  time.

  This blogpost has some more information about this library:
  <https://jaspervdj.be/posts/2019-01-11-dynamic-graphs.html>.

  ## Installation

  `dynamic-graphs` is available on
  [hackage](https://hackage.haskell.org/package/dynamic-graphs).  You can install
  it using Stack, Cabal, Nix, or whichever tool you prefer.

  ## Example

  ```haskell
  import qualified Data.Graph.Dynamic.Levels as GD
  import qualified Data.Tree as T

  main :: IO ()
  main = do
      graph <- GD.empty'
      mapM_ (GD.insert_ graph) ["Akanu", "Kanoa", "Kekoa", "Kaiwi", "Onakea"]
      GD.link_ graph "Akanu" "Kanoa"
      GD.link_ graph "Akanu" "Kaiwi"
      GD.link_ graph "Akanu" "Onakea"
      GD.link_ graph "Kaiwi" "Onakea"
      GD.link_ graph "Onakea" "Kanoa"
      GD.link_ graph "Kanoa" "Kekoa"

      GD.connected graph "Kaiwi" "Kekoa" >>= print
      GD.cut_ graph "Kaiwi" "Akanu"
      GD.cut_ graph "Onakea" "Akanu"
      GD.cut_ graph "Onakea" "Kanoa"
      GD.connected graph "Kaiwi" "Kekoa" >>= print
      GD.link_ graph "Akanu" "Kaiwi"
      GD.connected graph "Kaiwi" "Kekoa" >>= print
  ```
description-type: markdown
hash: 55a1d279c2954c36965aa574a432f08b4b9f2cc38cbf20932ca3525ceebf9e6c
homepage: http://github.com/alang9/dynamic-graphs
latest: 0.1.0.3
license-name: BSD-3-Clause
maintainer: me@alang.ca
synopsis: Dynamic graph algorithms
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  dynamic-graphs: '>=0'
  hashable: '>=0'
  mwc-random: '>=0'
  primitive: '>=0'
  semigroups: '>=0'
  test-framework: '>=0'
  test-framework-quickcheck2: '>=0'
  test-framework-th: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
