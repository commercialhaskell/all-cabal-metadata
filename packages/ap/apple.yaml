all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
author: Vanessa McHale
basic-deps:
  QuickCheck: '>=0'
  apple: '>=0'
  array: '>=0'
  base: '>=4.17 && <5'
  bytestring: '>=0'
  composition-prelude: '>=1.1.0.1'
  containers: '>=0.6.0.1'
  criterion: '>=0'
  deepseq: '>=0'
  directory: '>=0'
  dom-lt: '>=0'
  extra: '>=1.7.4'
  filepath: '>=0'
  haskeline: '>=0'
  libffi: '>=0'
  microlens: '>=0'
  microlens-mtl: '>=0.1.8.0'
  mtl: '>=2.2.2'
  optparse-applicative: '>=0.14.0.0'
  prettyprinter: '>=1.7.0'
  split: '>=0.2.0.0'
  text: '>=0'
  transformers: '>=0'
  unix: '>=0'
changelog: |
  # apple

  # 0.3.0.0

    * Display dimension information in REPL results
    * Fix bugs
    * Rotate (⊖), head, last more polymorphic (work on arrays).
    * More cases in the mid-end
    * Lifting constants out of loops works again
    * REPL no longer fails when being unable to monomorphize unused binds
    * Type signatures behave like an infix operator; more sensible
    * Building library no longer requires jacinda; prefer ripgrep/awk
    * Add function composition, `∴`
    * Implement equality on arrays
    * Add unicode fraction literals ⅚ &c.

  ## 0.2.0.0

    * Add `:delete` to REPL
    * Some cases no longer crash the compiler
    * Fix `free` insertion in branches
    * Implement filter (`§`) and 'indices of' (`⩪`)
    * Add `{:?` (tailM) and `}:?` (initM)
    * Existentials are handled better

  ## 0.1.0.0

  Initial release
changelog-type: markdown
description: "# Apple Array System\n\nSome cases are not implemented. This is provided
  as an artefact.\n\nSee [Apple by Example](https://vmchale.github.io/apple/) for
  a demonstration of capabilities.\n\nThe compiler will bail out with arcane error
  messages rather than\nproduce an incorrect result, except that the Python/R extension
  modules do not\nenforce type safety and thus may mysteriously segfault or produce
  unpredictable corrupt results.\n\nSpilling (during register allocation) is not implemented
  for Arm. Also\nfloating-point registers aren't spilled on x86.\n\n## Compiler-As-a-Library\n\nRather
  than an environment-based interpreter or a compiler invoked on the\ncommand line
  and generating object files, one calls a library function which\nreturns assembly
  or machine code from a source string.\n\nThus the same implementation can be used
  interpreted, compiled, or called from\nanother language.\n\n```\n > [((+)/x)%ℝ(:x)]\\`7
  (frange 1 10 10)\nArr (4) [4.0, 5.0, 6.0, 7.0]\n```\n\n```python\n>>> import apple\n>>>
  import numpy as np\n>>> sliding_mean=apple.jit('([((+)/x)%(ℝ(:x))]\\`7)')\n>>> apple.f(sliding_mean,np.arange(0,10,dtype=np.float64))\narray([3.,
  4., 5., 6.])\n```\n\n```R\n> source(\"R/apple.R\")\n> sliding_mean<-jit(\"([((+)/x)%ℝ(:x)]\\\\`7)\")\n>
  run(sliding_mean,seq(0,10,1.0))\n[1] 3 4 5 6 7\n```\n\nThe JIT'ed moving average
  in Apple happens to be faster than the rolling mean from\nthe [zoo package](https://cran.r-project.org/web/packages/zoo/index.html).\n\n##
  Dimension As a Functor\n\nThis is based on J (and APL?). Looping is replaced by
  functoriality (rerank).\n\nTo supply a zero-cells (scalars) as the first argument
  to `⊲` (cons) and 1-cells as the second:\n\n```\n(⊲)`{0,1}\n```\n\nWe can further
  specify that the cells should be selected along some axis, e.g.\nto get vector-matrix
  multiplication:\n\n```\nλA.λx.\n{\n  dot ⇐ [(+)/((*)`x y)];\n  (dot x)`{1∘[2]} (A::Arr
  (i`Cons`j`Cons`Nil) float)\n}\n```\n\nThe `2` means \"iterate over the second axis\"
  i.e. columns.\n\n## Installation\n\nUse [ghcup](https://www.haskell.org/ghcup/)
  to install [cabal](https://www.haskell.org/cabal/) and GHC. Then:\n\n```\nmake install\n```\n\nto
  install `arepl` (the REPL).\n\nRun\n\n```\nmake\nsudo make install-lib\n```\n\nTo
  install the shared library.\n\n### Python\n\nTo install the Python module:\n\n```\nmake
  install-py\n```\n\n### R\n\nInstall `libappler.so` on your system like so:\n\n```\nmake
  -C Rc\nsudo make install-r\n```\n\nThen:\n\n```\nsource(\"R/apple.R\")\n```\n\nto
  access the functions.\n\n## Documentation\n\nType `\\l` in the REPL to show the
  reference card:\n\n```\n > \\l\nΛ             scan                     √             sqrt\n⋉
  \            max                      ⋊             min\n⍳             integer range
  \           ⌊             floor\nℯ             exp                      ⨳ {m,n}
  \      convolve\n\\~            successive application   \\`n           dyadic infix\n_.
  \           log                      'n            map\n`             zip                      `{i,j∘[k,l]}
  \ rank\n\U0001D4BB             range (real)             \U0001D70B             pi\n_
  \            negate                   :             size\n\U0001D4C9             dimension
  \               }.?           last\n->n           select                   **            power\ngen.
  \         generate                 \U0001D4D5             fibonacci\nre:           repeat
  \                  }.            typesafe last\n⊲             cons                     ⊳
  \            snoc\n^:            iterate                  %.            matmul\n⊗
  \            outer product            |:            transpose\n{.?           head
  \                    {.            typesafe head\n}.?           last                     }:
  \           typesafe init\n⟨z,w⟩         array literal            ?p,.e1,.e2    conditional\n...\n```\n\nEnter
  `:help` in REPL:\n\n```\n > :help\n:help, :h                    Show this help\n:ty
  \           <expression>  Display the type of an expression\n...\n```\n"
description-type: markdown
hash: 7bde02aad4fb6eb1c34f71e1db648477da81eec26a31afe4059260b81433166c
homepage: ''
latest: 0.3.0.0
license-name: AGPL-3.0-only
maintainer: vamchale@gmail.com
synopsis: Apple array language compiler
test-bench-deps:
  QuickCheck: '>=0'
  apple: '>=0'
  base: '>=0'
  bytestring: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  directory: '>=0'
  erf: '>=0'
  fast-arithmetic: '>=0'
  filepath: '>=0'
  hypergeometric: '>=0.1.4.0'
  process: '>=0'
  statistics: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  temporary: '>=0'
  text: '>=0'
