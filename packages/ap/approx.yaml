homepage: https://github.com/n-kishaloy/approx#readme
changelog-type: markdown
hash: 9a149f96173e8d5692ae1db35f9195e329b8da987ff97d75923658589f0b7844
test-bench-deps:
  base: '>=4.7 && <5'
  time: <=1.11.1.1
  unordered-containers: <=0.2.13.0
  text: <=1.2.4.1
  containers: <=0.6.4.1
  approx: -any
  hashable: <=1.3.0.0
  QuickCheck: -any
  vector: <=0.12.2.0
maintainer: nkishaloy@yahoo.com
synopsis: Easy-to-use reasonable way of emulating approximate in Haskell.
changelog: "# Changelog for approx\n\n## 0.1.0.1 \n\nSome refactoring. API remains
  same. \nAdded functions, **inRange**, **safeInRange** and **inTol**\n"
basic-deps:
  base: '>=4.7 && <5'
  time: <=1.11.1.1
  unordered-containers: <=0.2.13.0
  text: <=1.2.4.1
  containers: <=0.6.4.1
  approx: -any
  hashable: <=1.3.0.0
  vector: <=0.12.2.0
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Kishaloy Neogi
latest: 0.1.0.1
description-type: markdown
description: "# approx\n\n## Motivation\n\nThe library is created to allow for a easy-to-use
  reasonable way of emulating approx in *Haskell*. The codes are all in *pure* Haskell.
  The idea is to have a natural feel in writing mathematical code, with operators
  which just works when working with **Double** and **Float** and their composite
  types like lists, vectors etc. \n\nThe **Approx** module defines 2 operators **=~**
  and **/~**, which are for checking *nearly equal to* and *not nearly equal to* respectively.
  \n\n## Features\nBoth the operators **=~** and **/~** are put under the class **Approx**.
  \n\nAt least one of the operators have to be defined and the other gets automatically
  defined. \n\nThe library already defines the functions for some of the basic / common
  types. \n\nFor types where **Eq** is defined like **Char, Bool, Int, Day, Text**
  the approx is simply replaced with **==**. \n\nFor **Float** and **Double**, the
  following formula is used,\n\n```\nif max ( |x|, |y| ) < epsilon_Zero\nthen True\nelse
  \n  if |x - y| / max ( |x|, |y| ) < epsilon_Eq\n  then True\n  else False\n```\n\nThe
  motivation for defining Approx for classes for which Eq is also defined is to allow
  for composite types where both Eq and Approx would be present. For example, the
  following code evaluates to True, even though the tuple is of type **```(Int,Double,Text,[Int],[[Char]],[Double])```**.\n\n```\n((2,5.35,\"happ\",[1,2],[\"ret\",\"we\"],[6.78,3.5])
  \n    :: (Int,Double,Text,[Int],[[Char]],[Double])) \n    \n    =~ (2,5.35,\"happ\",[1,2],[\"ret\",\"we\"],[6.78,3.5])\n
  \ ```\n\nFor UTCTime, the approx operator checks for equality to the nearest minute.
  The following expression evaluates to **True**.\n\n```\n(parseTimeM True defaultTimeLocale
  \"%Y-%m-%d %H:%M:%S\" \"2020-01-15 15:02:15\" \n    :: Maybe UTCTime)\n\n    =~
  parseTimeM True defaultTimeLocale \"%Y-%m-%d %H:%M:%S\" \"2020-01-15 15:01:50\"\n```\n\n\nThe
  library also provides approx for Complex and common structures like list, boxed
  and unboxed vector, hashmap, tuples and Maybe. For all lists, tuples, hashmaps and
  vectors, the approximation is checked right down to the elements and the order for
  lists and vectors are important. \n\nFor lists, only finite lists are supported.
  Any use of infinite lists would cause a runtime error. \n\nThere are addtional functions
  **inRange**, **safeInRange** and **inTol**, which checks for values within Ranges
  either *explictily* defined as in **inRange** and **safeInRange** or through tolerances
  as in **inTol**.\n\n## Code examples\nThe following all expressions evaluate as
  True\n```\n(1.0e+7 :: Double) =~ 10000000.05\n\n((1.2, 3.4) :: (Double, Double))
  =~ (1.20000008, 3.399999999)\n((1.2, 3.5) :: (Double, Double)) /~ (1.20000008, 3.399999999)\n\n([1.2,
  3.4, 5.6] :: [Double]) /~ [1.2, 3.4, 5.65]\n\n(\"star\"::Text) =~ (\"star\"::Text)\n(\"star\"::Text)
  /~ (\"start\"::Text)\n\nJust (10.00000000000007 :: Double) =~ Just 10.0\nJust (10
  :: Double) /~ Just 1.0\n\n```\n\n\n## Installation\nAdd the library in build-depends
  and ```import Data.Approx```. \n\n## Author(s)\nKishaloy Neogi\n\n## License\nThe
  library is distributed under the MIT License.\n\nCopyright (c) 2021 Kishaloy Neogi\n\nPermission
  is hereby granted, free of charge, to any person obtaining a copy\nof this software
  and associated documentation files (the \"Software\"), to deal\nin the Software
  without restriction, including without limitation the rights\nto use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and
  to permit persons to whom the Software is\nfurnished to do so, subject to the following
  conditions:\n\nThe above copyright notice and this permission notice shall be included
  in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED
  \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE
  AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE
  FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
  OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
  OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
license-name: MIT
