all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 1.0.0
- 1.1.0
- 1.1.1
author: Aleksey Uimanov
basic-deps:
  base: '>=4.6 && <5'
  bifunctors: '>=0'
  dlist: '>=0'
  mtl: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
changelog: |
  # CHANGELOG

  ## 1.1.1
  ### Changed
  * upper base constraints relaxed

  ## 1.1.0

  ### Added

  * `mapFailTBase` - map inner monad (e.g. lift)
  * `mapFailTFail` - map error type

  ## 1.0.0

  ### Added

  * Module `Control.Monad.Fail` containing monadic version of
    `Control.Applicative.Fail`
  * Tests added: all properties (Monad, Applicative, Monoid laws) are
    prooved with QuickCheck and package `checkers`
  * `runFail` and `runDLFail`: functions to unwrap `Fail`
  * dependencies added: `dlist`, `mtl`, `transformers`

  ### Removed

  * `fsucc`: use `return` / `pure` instead
  * `bindFail` and `composeFail`: use monadic fail instead

  ### Changed

  * `ffail` and `fwarn` renamed to `afail` and `awarn`
  * `afail` and `awarn` are more generic now
  * documentation strictly improoved

  ## 0.0.3

  First usable version
changelog-type: markdown
description: |
  # What is it for?

  Assume you have some type

  ```haskell
  data Animal = Animal
      { species :: String
      , weight  :: Double
      , age     :: Int
      } deriving (Show)

  ```

  And you would like to produce this value from some data (e.g. query
  parameters). There can be some warnigns or value can not be produced
  at all. It would be great to have some simple tool to notify about
  warnings and/or fail computation.

  Like that:

  ```haskell
  let spc = "Parastratiosphecomyia stratiosphecomyioides"
      w = 100
      a = 27234
      animal :: Fail [String] Animal
      animal = Animal
               <$> (if length spc > 20
                    then awarn "Name is too long" spc
                    else if spc == ""
                         then afail "Name can not be empty"
                         else pure spc)
               <*> (if w < 0
                    then afail "Weight can not be negative"
                    else pure w)
               <*> (if a < 0
                    then afail "Age can not be negative"
                    else pure a)
  ```

  Now you can inspect the value we have got

  ```haskell
  >>> animal
  Fail ["Name is too long"] (Just (Animal {species = "Parastratiosphecomyia stratiosphecomyioides", weight = 100.0, age = 27234}))

  >>> getSucc animal
  Just (Animal {species = "Parastratiosphecomyia stratiosphecomyioides", weight = 100.0, age = 27234})

  >>> getFail animal
  Just ["Name is too long"]
  ```

  Now this example can be rewritten with monadic syntax inside field
  checkers using module `Control.Monad.Fail`:

  ```haskell
  let animal :: Fail [String] Animal
      animal = Animal
               <$> (runFailI $ do
                            when (length spc > 20) $ mwarn "Name is too long"
                            when (spc == "") $ mfail "Name can not be empty"
                            return spc)
               <*> (runFailI $ do
                            when (w < 0) $ mfail "Weight can not be negative"
                            return w)
               <*> (runFailI $ do
                            when (a < 0) $ mfail "Age can not be negative"
                            return a)
  ```
description-type: markdown
hash: 69d06000fb2924499d3decd12742653bdc0a0ba7fa98c8b9a4deee1ad543a871
homepage: https://bitbucket.org/s9gf4ult/applicative-fail
latest: 1.1.1
license-name: BSD-3-Clause
maintainer: s9gf4ult@gmail.com
synopsis: Applicative functor and monad which collects all your fails
test-bench-deps:
  QuickCheck: '>=0'
  applicative-fail: '>=0'
  base: '>=3 && <5'
  checkers: '>=0'
  mtl: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
