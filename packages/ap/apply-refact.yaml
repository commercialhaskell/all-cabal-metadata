homepage: https://github.com/mpickering/apply-refact
changelog-type: text
hash: 1bd6cc239931640acf7c6bc185bb83c5c968239c61e313b4a77a27911a610ada
test-bench-deps:
  ghc: -any
  extra: -any
  filemanip: -any
  base: -any
  tasty-golden: -any
  tasty-expected-failure: -any
  syb: -any
  ghc-exactprint: -any
  unix-compat: -any
  filepath: -any
  process: -any
  uniplate: -any
  containers: -any
  silently: -any
  ghc-paths: -any
  refact: -any
  transformers: -any
  optparse-applicative: -any
  tasty: -any
  ghc-boot-th: -any
  directory: -any
maintainer: matthewtpickering@gmail.com
synopsis: Perform refactorings specified by the refact library.
changelog: "v0.13.0.0\n  * #137, support GHC 9.6 (@9999years)\n\nv0.12.0.0\n  * #134,
  Make libdir a parameter instead of using GHC.Paths.libdir (@fendor)\n\nv0.11.0.0\n
  \ * support GHC 9.4\n\nv0.10.0.0\n  * support GHC 9.2; drop support for GHC <= 9.0
  (@alanz)\n\nv0.9.3.0\n\n  * #113, Fix Annotation when context parens are removed\n\nv0.9.2.0\n\n
  \ * #110, Support GHC 9.0.1\n\nv0.9.1.0\n\n  * #109, Use the correct DynFlags when
  parsing refactoring templates\n\nv0.9.0.0\n\n  * #106, expose Refact.Internal\n
  \ * #104, ensure space between \"do\" and the next identifier\n  * support GHC 8.10.3\n
  \ * #101, do not apply a refactoring if it drops comments\n  * #100, add applyRefactorings',
  which is like applyRefactoring, but takes a parsed module and annotations, rather
  than a FilePath to parse\n  * #98, make applyRefactoring take a list of GHC extensions\n
  \ * #97, fix a bug where backquotes surrounding substitution variables are dropped
  after substitution\n  * #85, show actual type (if any) if expected type is not found\n
  \ * #84, improve error message of findGen\n  * #81, remove hint description from
  the input of applyRefactorings\n  * #79, improve error message when neither target
  nor refact file is specified\n  * #78, remove some exported functions in Refact.Apply
  that are only relevant to runPipe\n\nv0.8.2.1\n\n  * support GHC 8.8.4\n  * remove
  dependency on mtl\n\nv0.8.2.0\n\n  * #75, support refactoring for Eta reduce\n\nv0.8.1.0\n\n
  \ * #68, support GHC 8.6\n  * #63, support GHC 8.8\n  * #64, add LANGUAGE pragmas
  to DynFlag\n  * #62, fix a bug where \"y = f(x)\" is refactored into \"y = fx\"\n
  \ * #61, fix a bug where \"x < -2 * 3\" is printed as \"x < 2 * 3\"\n  * #51, fix
  a bug where [1,2..5] is printed as [12..5]\n  * #59, do not process the target file
  if there's no hint\n\nv0.8.0.0\n\n  * 8.10 release compatability\n\n\nv0.7.0.0\n\n
  \ * 8.8 release compatability\n  * Specify language extensions using -X\n\nv0.6.0.0\n\n
  \ * 8.6 release compatibility\n\nv0.5.0.0\n\n  * 8.4 release compatibility\n\nv0.4.1.0\n\n\t*
  8.2 release compatibility\n\nv0.4.0.0\n\n\t* 8.2rc2 compatibility\n\nv0.3.0.1\n\n\t*
  Version bound tweaking to build with optparse-applicative 0.13\n\nv0.3\n\n\t* GHC
  8.0 compatibility\n\nv0.2\n\n  * API refactoring to make the tool usable as a library.\n\nv0.1\n\n
  \ * Initial Release\n"
basic-deps:
  ghc: -any
  extra: '>=1.7.3'
  filemanip: '>=0.3.6.3 && <0.4'
  base: '>=4.16 && <5'
  syb: '>=0.7.1'
  ghc-exactprint: '>=1.5.0 && <1.6 || >=1.6.0 && <1.7 || >=1.7.0 && <1.8'
  unix-compat: '>=0.5.2'
  filepath: -any
  process: '>=1.6'
  uniplate: '>=1.6.13'
  containers: '>=0.6.0.1 && <0.7'
  ghc-paths: -any
  refact: '>=0.2'
  transformers: '>=0.5.6.2 && <0.7'
  optparse-applicative: '>=0.15.1.0'
  ghc-boot-th: -any
  directory: '>=1.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.1.0
- 0.8.2.0
- 0.8.2.1
- 0.9.0.0
- 0.9.1.0
- 0.9.2.0
- 0.9.3.0
- 0.10.0.0
- 0.11.0.0
- 0.12.0.0
- 0.13.0.0
author: Matthew Pickering
latest: 0.13.0.0
description-type: markdown
description: |
  `apply-refact` applies refactorings specified by the
  [`refact`](https://hackage.haskell.org/package/refact) package. It is currently
  integrated into [HLint](https://github.com/ndmitchell/hlint) to enable the automatic application of suggestions.

  apply-refact 0.13.x supports GHC 9.2 through 9.6; 0.12.x and 0.11.x support GHC 9.2 and 9.4; 0.10.x supports GHC 9.2; 0.9.x supports GHC 8.6 through 9.0.

  # Install

  ```shell
  cabal install apply-refact
  ```

  Alternatively, clone the repo and run `cabal install`.

  You can also install from Nix:

  ```shell
  nix-env -iA nixpkgs.haskellPackages.apply-refact
  ```

  Executable name is `refactor`.

  #### Hlint Integration example

  ```shell
  hlint src/Main.hs --refactor --refactor-options="--inplace"
  ```

  # Example Usage

  <img src="http://i.imgur.com/7YXoVft.gif">

  ```
  # test.hs

  foo = (x)

  # hlint.refact -- produced by hlint --serialise
  [("test.hs:1:7: Warning: Redundant bracket\nFound:\n  (x)\nWhy not:\n
  x\n",[Replace {rtype = Expr, pos = SrcSpan {startLine = 1, startCol = 7, endLine
  = 1, endCol = 10}, subts = [("x",SrcSpan {startLine = 1, startCol = 8, endLine =
  1, endCol = 9})], orig = "x"}])]

  > refactor test.hs --refact-file hlint.refact
  foo = x
  ```

  One of either the input file or `--refact-file` must be specified on the command
  line. If an input file is specified but not `--refact-file` then `refactor` will
  accept refactorings from stdin and vice versa.

  The `-i` option can be specified to perform the refactoring inplace overwriting
  the input file. This option is ignored when input is read from stdin.

  The `-s` option can be specified to perform a stepwise evaluation of the refact
  file. The user is prompted whether to perform each hint before it is performed.

  The `--pos` option is intended to be used by tooling in order to specify which
  specific hint should be performed.

  Multiple `-X` options may be provided to specify additional default language pragmas which might affect parsing, such as `-XLambdaCase` or `-XRankNTypes`.

  ## Refact Files

  Refact files should be the result of `show` on a value of type `[(String,
  [Refactoring SrcSpan])]`. The string is a description of the refactoring, one
  description can have many associated refactoring steps.


  ## Library Structure

  The executable is provide so that libraries can use `apply-refact` without depending on the package.
  The implementation relies on `ghc-exactprint` which depends itself on GHC. A
  transitive dependancy that most developers wish to avoid!


  # Reporting Bugs

  If the program produces a syntactically incorrect result then this is a bug.
  Please open an issue on the issue tracker with precise instructions about how to
  reproduce it.

  1. The input file
  2. The refact file
  3. The command used to invoke `refactor`

  There are some known problems with CPP processing. If your library contains CPP
  directives other than `#ifdef` it is quite likely that the result will be
  unexpected.

  # Debugging

  There are also two hidden flags which can be useful for debugging.

  #### `--debug`

  Outputs the GHC AST.

  #### `--roundtrip`

  Performs no refactoring operations on the file but is useful to test whether
  unexpected formatting is due to `ghc-exactprint` or the refactoring.

  # Contributing

  Contributions are welcome. You can run the tests via `cabal test`.
license-name: BSD-3-Clause
