all-versions:
- 0.1.0.0
- 0.1.1.0
author: Preetham Gujjula
basic-deps:
  base: '>=4.16 && <4.17 || >=4.17 && <4.18 || >=4.18 && <4.19 || >=4.19 && <4.20'
  containers: '>=0.6 && <0.7'
  pqueue: '>=1.4 && <1.5 || >=1.5 && <1.6'
  reflection: '>=2.1 && <2.2'
changelog: |
  <!--
  SPDX-FileCopyrightText: Copyright Preetham Gujjula
  SPDX-License-Identifier: BSD-3-Clause
  -->

  # Changelog for apply-merge

  ## 0.1.0.1

  ### Added
  * Implementation of `applyMergeOn`
    ([#1](https://github.com/pgujjula/apply-merge/issues/1)) and `applyMergeBy`
    ([#3](https://github.com/pgujjula/apply-merge/issues/3)).
  * Implementation of `applyMerge` for `NonEmpty`
    ([#2](https://github.com/pgujjula/apply-merge/issues/2)).
  * Comprehensive benchmark suite for `applyMerge`
    ([#8](https://github.com/pgujjula/apply-merge/issues/8)).

  ### Changed
  * Switched from falsify to QuickCheck in the test suite, allowing the
    project to be used in Stackage
    ([link](https://github.com/well-typed/falsify/issues/71)).
  * CI configured to test GHC 9.2.8, 9.4.8, 9.6.5, 9.8.2.

  ## 0.1.0.0

  ### Added
  * Implementation of `applyMerge`.
  * A tasty-based test suite for `applyMerge`.
  * A tasty-bench benchmark suite for `applyMerge`.
  * Haddock documentation for `applyMerge`.
  * Support for GHC 9.2, 9.4, 9.6, 9.8.
  * CI testing for GHC 9.2.8, 9.4.8, 9.6.4.
  * Documentation of the library in `README.md` and `docs/ALGORITHM.md`, with
    feedback from _meeeow_ on Haskell Discourse
    ([link](https://discourse.haskell.org/t/apply-merge-lift-a-binary-increasing-function-onto-ordered-lists-and-produce-ordered-output/9269/4)).
changelog-type: markdown
description: |
  <!--
  SPDX-FileCopyrightText: Copyright Preetham Gujjula
  SPDX-License-Identifier: BSD-3-Clause
  -->

  # apply-merge

  ![CI](https://github.com/pgujjula/apply-merge/actions/workflows/ci.yml/badge.svg?branch=main)
  ![REUSE status](https://api.reuse.software/badge/github.com/pgujjula/apply-merge)
  ![Hackage Version](https://img.shields.io/hackage/v/apply-merge?style=flat&color=blue)

  Lift a binary, non-decreasing function onto ordered lists and order the output

  ## Overview

  This library provides a function

  ```haskell
  applyMerge :: Ord c => (a -> b -> c) -> [a] -> [b] -> [c]
  ```

  If `f` is a binary function that is non-decreasing in both arguments, and `xs`
  and `ys` are (potentially infinite) ordered lists, then `applyMerge f xs ys` is
  an ordered list of all `f x y`, for each `x` in `xs` and `y` in `ys`.

  Producing $n$ elements of `applyMerge f xs ys` takes $O(n \log n)$ time and
  $O(\sqrt{n})$ auxiliary space, assuming that `f` and `compare` take $O(1)$ time.
  See <!-- Relative link doesn't work here for some reason, see issue #17 -->
  [docs/ALGORITHM.md#note-about-memory-usage](https://github.com/pgujjula/apply-merge/blob/main/docs/ALGORITHM.md#note-about-memory-usage)
  for caveats.

  ## Examples

  With `applyMerge`, we can implement a variety of complex algorithms succinctly.
  For example, the Sieve of Erastosthenes[^1] to generate prime numbers:

  ```haskell
  primes :: [Int]
  primes = 2 : ([3..] `minus` composites)    -- `minus` from data-ordlist

  composites :: [Int]
  composites = applyMerge (*) primes [2..]
  ```

  3-smooth numbers ([Wikipedia](https://en.wikipedia.org/wiki/Smooth_number)):

  ```haskell
  smooth3 :: [Integer]
  smooth3 = applyMerge (*) (iterate (*2) 1) (iterate (*3) 1)
  ```

  Gaussian integers, ordered by norm ([Wikipedia](https://en.wikipedia.org/wiki/Gaussian_integer)):

  ```haskell
  zs :: [Integer]
  zs = 0 : concatMap (\i -> [i, -i]) [1..]

  gaussianIntegers :: [GaussianInteger]      -- `GaussianInteger` from arithmoi
  gaussianIntegers = map snd (applyMerge (\x y -> (norm (x :+ y), x :+ y)) zs zs)
  ```

  Square-free integers ([Wikipedia](https://en.wikipedia.org/wiki/Square-free_integer)):

  ```haskell
  squarefrees :: [Int]
  squarefrees = [1..] `minus` applyMerge (*) (map (^2) primes) [1..]
  ```

  ## Naming

  The name `applyMerge` comes from the idea of applying `f` to each `x` and `y`,
  and merging the results into one sorted output. I'm still thinking of the ideal
  name for this function. Other options include `sortedLiftA2`/`orderedLiftA2`,
  from the idea that this function is equivalent to `sort (liftA2 f xs ys)` when
  `xs` and `ys` are finite. If you have any ideas on the naming, let me know!

  ## Further reading

  See [docs/ALGORITHM.md](docs/ALGORITHM.md) for a full exposition of the
  `applyMerge` function and its implementation.

  ## Licensing

  This project licensed under BSD-3-Clause (except for `.gitignore`, which is
  under CC0-1.0), and follows [REUSE](https://reuse.software) licensing
  principles.

  [^1]: Note that this is really the Sieve of Erastosthenes, as defined in the classic [The Genuine Sieve of Eratosthenes](https://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf). Constrast this to other simple prime generation implementations, such as <pre> primes = sieve [2..] where sieve (p : xs) = p : sieve [x | x <- xs, x \`rem\` p > 0]</pre> which is actually trial division and not a faithful implementation of the Sieve of Erastosthenes.
description-type: markdown
hash: 44ed8586d06f2aa63d048c7debb4a59c17efc1d2740126800d09e022bdeac89b
homepage: https://github.com/pgujjula/apply-merge#readme
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: Preetham Gujjula <libraries@mail.preetham.io>
synopsis: Lift a binary, non-decreasing function onto ordered lists and order the
  output
test-bench-deps:
  base: '>=4.16 && <4.20'
  containers: '>=0.6 && <0.7'
  data-ordlist: '>=0.4 && <0.5'
  pqueue: '>=1.4 && <1.6'
  reflection: '>=2.1 && <2.2'
  tasty: '>=1.4 && <1.5 || >=1.5 && <1.6'
  tasty-bench: '>=0.3 && <0.4'
  tasty-expected-failure: '>=0.12 && <0.13'
  tasty-hunit: '>=0.10 && <0.11'
  tasty-quickcheck: '>=0.10 && <0.11'
  transformers: '>=0.5 && <0.7'
  vector: '>=0.12 && <0.14'
