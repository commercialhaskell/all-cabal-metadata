all-versions:
- 0.0.0
- 0.1.0
- 0.1.1
- 0.1.2
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
author: Chris Done
basic-deps:
  base: '>=4.9.0.0 && <5'
  template-haskell: '>=0'
changelog: "0.3.1:\n\t* Export Labels class.\n\n0.3.1:\n\t* Add Subset class.\n\n0.3.0:\n\t*
  Put labels in its own class.\n\t* Change type of labels to take a Proxy.\n\n0.2.0:\n\t*
  Add \"reflect\" and \"labels\" functions.\n\t* Drop support for GHC <8.\n\n0.1.2:\n\t*
  Add docs for \"project\" function.\n\n0.1.1:\n\t* Add \"project\" function.\n\n0.1.0:\n\t*
  Drop the convenience accessor #foo. Must use get #foo\n\n0.0.0:\n\t* First version\n"
changelog-type: text
description: |
  # labels

  Declare and access tuple fields with labels

  This package is experimental, exploring the design space opened up by
  the implemented and to-be-implemented work on extensible records in GHC.

  *Note: You need GHC 8.0.1.*

  ## Basic examples

  The [haddock docs are here.](https://chrisdone.github.io/labels/)

  Enable these extensions:

  * In GHCi: `:set -XOverloadedLabels -XTypeOperators -XDataKinds -XFlexibleContexts`

  * In a module: `{-# LANGUAGE OverloadedLabels, TypeOperators, DataKinds, FlexibleContexts #-}`

  Let's use GHCi:

  ``` haskell
  > import Labels
  > :set -XOverloadedLabels -XTypeOperators -XDataKinds -XFlexibleContexts
  ```

  <table>
  <tr><td>Construct a record</td><td><pre lang="haskell">
  > (#foo := "hi", #bar := 123)
  (#foo := "hi",#bar := 123)
  </pre></td></tr>
  <tr><td>Get fields of a record</td><td><pre lang="haskell">
  > get #bar (#foo := "hi", #bar := 123)
  123
  </pre></td></tr>
  <tr><td>Set fields of a record</td><td><pre lang="haskell">
  > set #bar 66 (#foo := "hi", #bar := 123)
  (#foo := "hi",#bar := 66)
  </pre></td></tr>
  <tr><td>Modify fields of a record</td><td><pre lang="haskell">
  > modify #mu (*0.1) (#bar := "hi", #mu := 123)
  (#bar := "hi",#mu := 12.3)
  </pre></td></tr>
  <tr><td>Add fields to a record</td><td><pre lang="haskell">
  > cons (#mu := [1,2,3]) (#foo := "hi", #bar := 123)
  (#mu := [1,2,3],#foo := "hi",#bar := 123)
  </pre></td></tr>
  <tr><td>Abstraction</td><td><pre lang="haskell">
  > let double field record = set field (get field record * 2) record
  > double #mu (#bar := "hi", #mu := 123)
  (#bar := "hi",#mu := 246)
  </pre></td></tr>
  </table>
description-type: markdown
hash: 65218090b15662b7845c355eb97bacb28a95aa2805b95987563b9b90f30d88a7
homepage: https://github.com/chrisdone/labels#readme
latest: 0.3.3
license-name: BSD-3-Clause
maintainer: chrisdone@gmail.com
synopsis: Anonymous records via named tuples
test-bench-deps: {}
