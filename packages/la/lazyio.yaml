homepage: http://www.haskell.org/haskellwiki/Lazy_IO
changelog-type: text
hash: a7a7552257632e159d52b917cb8a1a40b02a22b84e0b664389ccd8017f5b7bcd
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Run IO actions lazily while respecting their order
changelog: |
  0.1

  * System.IO.Lazy.T: remove MonadIO instance

    liftIO did not satisfy MonadIO laws.
    You must use the new function LazyIO.interleave instead.
    A positive side-effect is that you do not need
    to depend explicitly on 'transformers' anymore.
basic-deps:
  unsafe: '>=0.0 && <0.1'
  base: '>=2 && <5'
  transformers: '>=0.2 && <0.7'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.3.1
- 0.0.3.2
- 0.0.3.3
- '0.1'
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.1.0.4
description-type: haddock
description: |-
  Run IO actions lazily while respecting their order.
  Running a value of the LazyIO monad in the IO monad is like starting a thread
  which is however driven by its output.
  That is, the LazyIO action is only executed as far as necessary
  in order to provide the required data.

  The package may help you to avoid stack overflows in @mapM@.
  Say you have

  > mapM f xs

  where @xs@ is a long list. When run, you may encounter a stack overflow.
  To prevent it, write instead:

  > import qualified System.IO.Lazy as LazyIO
  >
  > LazyIO.run $ mapM (LazyIO.interleave . f) xs

  The stack overflow is gone.
license-name: BSD-3-Clause
