all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.1.0.0
author: Chris Martin
basic-deps:
  base: ^>=4.15 || ^>=4.16 || ^>=4.17 || ^>=4.18
  exceptions: ^>=0.10.4
  lifted-async: ^>=0.10.2
  monad-control: ^>=1.0.3
  stm: ^>=2.5
  transformers: ^>=0.5.6 || ^>=0.6
  transformers-base: ^>=0.4.6
changelog: |
  ### 1.1.0.0 (2023-06-23)

  Support GHC 9.6

  Remove `rank2classes` dependency and the `memoizeRank2` function

  ### 1.0.0.2 (2023-01-10)

  Support GHC 9.4

  ### 1.0.0.1 (2022-02-25)

  Support GHC 9.2

  ### 1.0.0.0 (2021-07-27)

  Initial release
changelog-type: markdown
description: |
  Sometimes we have a bunch of `IO` actions that do things like read files, make
  HTTP requests, or query a database. Some of the information that these actions
  produce might not end up being needed, depending on the breaks. In the interest
  of avoiding unnecessary effort, we don't want to simply run all the actions and
  collect their results upfront. We also don't want to simply run an action right
  before its result is needed, because it might be needed in more than one place,
  which opens the possibility of unnecessarily running the same action more than
  once. In situations like these, we use `LazyAsync`.

  Under the hood, an `IO` action is turned into a `LazyAsync` by constructing two
  things: An `Async` (from the [async] package), and a `TVar Bool` (from the [stm]
  package). The `TVar`, initialized to `False`, indicates whether the action is
  wanted yet. The asynchronous thread waits until the `TVar` turns `True` and then
  runs the action.

    [async]: https://hackage.haskell.org/package/async

    [stm]: https://hackage.haskell.org/package/stm
description-type: markdown
hash: 0c0fe12463d65703896ee3ed89694fad484bb53e246dfb51acf464e22868a6a4
homepage: https://github.com/typeclasses/lazy-async
latest: 1.1.0.0
license-name: MIT
maintainer: Chris Martin, Julie Moronuki
synopsis: Asynchronous actions that don't start right away
test-bench-deps:
  base: ^>=4.15 || ^>=4.16 || ^>=4.17 || ^>=4.18
  exceptions: ^>=0.10.4
  hedgehog: ^>=1.0.5 || ^>=1.1 || ^>=1.2
  lazy-async: '>=0'
  lifted-async: ^>=0.10.2
  monad-control: ^>=1.0.3
  optics-core: ^>=0.4.1
  optics-th: ^>=0.4.1
  stm: ^>=2.5
  transformers: ^>=0.5.6 || ^>=0.6
  transformers-base: ^>=0.4.6
