all-versions:
- 0.1.0.0
author: Matthieu Court
basic-deps:
  base: '>=4.7 && <5'
changelog: ''
changelog-type: ''
description: "<p align=\"center\">\n  <img src=\"pix/layoutz-demo.png\" width=\"700\">\n</p>\n\n#
  <img src=\"../pix/layoutz.png\" width=\"60\"> layoutz\n\n**Simple, beautiful CLI
  output for Haskell \U0001FAB6**\n\nBuild declarative and composable sections, trees,
  tables, dashboards for your Haskell applications.\n\n## Features\n- Zero dependencies,
  use `Layoutz.hs` like a header file\n- Rich text formatting: alignment, underlines,
  padding, margins\n- Lists, trees, tables, charts, banners...\n\n## Installation\n\nAdd
  to your `package.yaml` or `.cabal` file:\n```yaml\ndependencies:\n  - layoutz\n```\n\nOr
  install directly:\n```bash\ncabal install layoutz\n```\n\nAll you need:\n```haskell\nimport
  Layoutz\n```\n\n## Quickstart\n\nBeautiful, compositional text layouts:\n\n```haskell\nimport
  Layoutz\n\ndemo = layout\n  [ center $ row [text \"Layoutz\", underline' \"ˆ\" $
  text \"DEMO\"]\n  , br\n  , row\n    [ statusCard \"Users\" \"1.2K\"\n    , statusCard'
  DoubleBorder \"API\" \"UP\"\n    , statusCard' ThickBorder \"CPU\" \"23%\"\n    ,
  table' RoundBorder [\"Name\", \"Role\", \"Status\"] \n        [ [text \"Alice\",
  text \"Engineer\", text \"Online\"]\n        , [text \"Eve\", text \"QA\", text
  \"Away\"]\n        ]\n    , section \"Pugilists\" [kv [(\"Kazushi\", \"Sakuraba\"),
  (\"Jet\", \"Li\")]]\n    ]\n  ]\n\nputStrLn $ render demo\n```\n\n```\n                                Layoutz
  DEMO\n                                        ˆˆˆˆ\n\n┌─────────┐ ╔═══════╗ ┏━━━━━━━┓
  ╭───────┬──────────┬────────╮ === Pugilists ===\n│ Users   │ ║ API   ║ ┃ CPU   ┃
  │ Name  │ Role     │ Status │ Kazushi: Sakuraba\n│ 1.2K    │ ║ UP    ║ ┃ 23%   ┃
  ├───────┼──────────┼────────┤ Jet:     Li\n└─────────┘ ╚═══════╝ ┗━━━━━━━┛ │ Alice
  │ Engineer │ Online │\n                                │ Eve   │ QA       │ Away
  \  │\n                                ╰───────┴──────────┴────────╯\n```\n\n## Core
  concepts\n- Every piece of content is an `Element`\n- Elements are **immutable**
  and **composable** - build complex layouts by combining simple elements\n- A `layout`
  arranges elements **vertically**:\n```haskell\nlayout [elem1, elem2, elem3]  --
  Joins with \"\\n\"\n```\nCall `render` on any element to get a string\n\nThe power
  comes from **uniform composition** - since everything has the `Element` typeclass,
  everything can be combined.\n\n## Elements\n\n### Text\n```haskell\ntext \"Simple
  text\"\n```\n```\nSimple text\n```\n\n### Line Break\nAdd line breaks with `br`:\n```haskell\nlayout
  [text \"Line 1\", br, text \"Line 2\"]\n```\n```\nLine 1\n\nLine 2\n```\n\n### Section:
  `section`\n```haskell\nsection \"Config\" [kv [(\"env\", \"prod\")]]\nsection' \"-\"
  \"Status\" [kv [(\"health\", \"ok\")]]\nsection'' \"#\" \"Report\" 5 [kv [(\"items\",
  \"42\")]]\n```\n```\n=== Config ===\nenv: prod\n\n--- Status ---\nhealth: ok\n\n#####
  Report #####\nitems: 42\n```\n\n### Layout (vertical): `layout`\n```haskell\nlayout
  [text \"First\", text \"Second\", text \"Third\"]\n```\n```\nFirst\nSecond\nThird\n```\n\n###
  Row (horizontal): `row`\n```haskell\nrow [text \"Left\", text \"Middle\", text \"Right\"]\n```\n```\nLeft
  Middle Right\n```\n\n### Horizontal rule: `hr`\n```haskell\nhr\nhr' \"~\"\nhr''
  \"-\" 10\n```\n```\n──────────────────────────────────────────────────\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n----------\n```\n\n###
  Key-value pairs: `kv`\n```haskell\nkv [(\"name\", \"Alice\"), (\"role\", \"admin\")]\n```\n```\nname:
  Alice\nrole: admin\n```\n\n### Table: `table`\nTables automatically handle alignment
  and borders:\n```haskell\ntable [\"Name\", \"Age\", \"City\"] \n  [ [text \"Alice\",
  text \"30\", text \"New York\"]\n  , [text \"Bob\", text \"25\", text \"\"]  --
  Missing values handled\n  , [text \"Charlie\", text \"35\", text \"London\"]\n  ]\n```\n```\n┌─────────┬─────┬─────────┐\n│
  Name    │ Age │ City    │\n├─────────┼─────┼─────────┤\n│ Alice   │ 30  │ New York│\n│
  Bob     │ 25  │         │\n│ Charlie │ 35  │ London  │\n└─────────┴─────┴─────────┘\n```\n\n###
  Unordered Lists: `ul`\nClean unordered lists with automatic nesting:\n```haskell\nul
  [text \"Feature A\", text \"Feature B\", text \"Feature C\"]\n```\n```\n• Feature
  A\n• Feature B\n• Feature C\n```\n\nNested lists with auto-styling:\n```haskell\nul
  [ text \"Backend\"\n   , ul [text \"API\", text \"Database\"]\n   , text \"Frontend\"\n
  \  , ul [text \"Components\", ul [text \"Header\", ul [text \"Footer\"]]]\n   ]\n```\n```\n•
  Backend\n  ◦ API\n  ◦ Database\n• Frontend\n  ◦ Components\n    ▪ Header\n      •
  Footer\n```\n\n### Underline: `underline`\nAdd underlines to any element:\n```haskell\nunderline
  $ text \"Important Title\"\nunderline' \"=\" $ text \"Custom\"\n```\n```\nImportant
  Title\n───────────────\n\nCustom\n══════\n```\n\n### Box: `box`\nWith title:\n```haskell\nbox
  \"Summary\" [kv [(\"total\", \"42\")]]\n```\n```\n┌──Summary───┐\n│ total: 42  │\n└────────────┘\n```\n\nWithout
  title:\n```haskell\nbox \"\" [kv [(\"total\", \"42\")]]\n```\n```\n┌────────────┐\n│
  total: 42  │\n└────────────┘\n```\n\n### Status card: `statusCard`\n```haskell\nstatusCard
  \"CPU\" \"45%\"\n```\n```\n┌───────┐\n│ CPU   │\n│ 45%   │\n└───────┘\n```\n\n###
  Progress bar: `inlineBar`\n```haskell\ninlineBar \"Download\" 0.75\n```\n```\nDownload
  [███████████████─────] 75%\n```\n\n### Tree: `tree`\n```haskell\ntree \"Project\"
  \n  [ branch \"src\" \n      [ leaf \"main.hs\"\n      , leaf \"test.hs\"\n      ]\n
  \ , branch \"docs\"\n      [ leaf \"README.md\"\n      ]\n  ]\n```\n```\nProject\n├──
  src\n│   ├── main.hs\n│   └── test.hs\n└── docs\n    └── README.md\n```\n\n### Chart:
  `chart`\n```haskell\nchart [(\"Web\", 10), (\"Mobile\", 20), (\"API\", 15)]\n```\n```\nWeb
  \   │████████████████████ 10\nMobile │████████████████████████████████████████ 20\nAPI
  \   │██████████████████████████████ 15\n```\n\n### Padding: `pad`\nAdd uniform padding
  around any element:\n```haskell\npad 2 $ text \"content\"\n```\n```\n        \n
  \       \n  content  \n        \n        \n```\n\n### Centering: `center`\nSmart
  auto-centering and manual width:\n```haskell\ncenter $ text \"Auto-centered\"     --
  Uses layout context\ncenter' 20 $ text \"Manual width\"  -- Fixed width\n```\n```\n
  \       Auto-centered        \n\n    Manual width    \n```\n\n### Margin: `margin`\nUse
  `margin` for colorful \"compiler-style\" prefixes:\n\n```haskell\nlayout\n  [ marginError
  [text \"Type error: expected Int, got String\"]\n  , marginWarn [text \"Unused variable
  'temp'\"] \n  , marginSuccess [text \"Build completed successfully\"]\n  , marginInfo
  [text \"Pro tip: Use layoutz for beautiful output\"]\n  ]\n```\n```\n[error] Type
  error: expected Int, got String\n[warn] Unused variable 'temp'\n[success] Build
  completed successfully\n[info] Pro tip: Use layoutz for beautiful output\n```\n\n##
  Border Styles\nElements like `box`, `table`, and `statusCard` support different
  border styles:\n\n**NormalBorder** (default):\n```haskell\nbox \"Title\" [text \"content\"]\n```\n```\n┌──Title──┐\n│
  content │\n└─────────┘\n```\n\n**DoubleBorder**:\n```haskell\nstatusCard' DoubleBorder
  \"API\" \"UP\"\n```\n```\n╔═══════╗\n║ API   ║\n║ UP    ║\n╚═══════╝\n```\n\n**ThickBorder**:\n```haskell\ntable'
  ThickBorder [\"Name\"] [[text \"Alice\"]]\n```\n```\n┏━━━━━━━┓\n┃ Name  ┃\n┣━━━━━━━┫\n┃
  Alice ┃\n┗━━━━━━━┛\n```\n\n**RoundBorder**:\n```haskell\nbox' RoundBorder \"Info\"
  [text \"content\"]\n```\n```\n╭──Info───╮\n│ content │\n╰─────────╯\n```\n\n## REPL\n\nDrop
  into GHCi to experiment:\n```bash\ncabal repl\n```\n\n```haskell\nλ> import Layoutz\nλ>
  putStrLn $ render $ center $ box \"Hello\" [text \"World!\"]\n┌──Hello──┐\n│ World!
  \ │\n└─────────┘\nλ> putStrLn $ render $ table [\"A\", \"B\"] [[text \"1\", text
  \"2\"]]\n┌───┬───┐\n│ A │ B │\n├───┼───┤\n│ 1 │ 2 │\n└───┴───┘\n```\n\n## Inspiration\n-
  Original Scala [layoutz](https://github.com/mattlianje/layoutz)\n"
description-type: markdown
hash: 830694bd9b11f0105c0fd8e7a603784f2bd4faccc155328314ea577aa454f07d
homepage: https://github.com/mattlianje/layoutz
latest: 0.1.0.0
license-name: Apache-2.0
maintainer: matthieu.court@protonmail.com
synopsis: Simple, beautiful CLI output for Haskell
test-bench-deps:
  base: '>=4.7 && <5'
  layoutz: '>=0'
  tasty: '>=1.4'
  tasty-hunit: '>=0.10'
