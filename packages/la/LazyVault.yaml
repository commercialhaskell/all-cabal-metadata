homepage: https://github.com/kwrooijen/lazyvault
changelog-type: ''
hash: 3327e6b0fdb5c0d81cc225b94797f790f0c27a24e09682e70f580657b0b5e2fb
test-bench-deps: {}
maintainer: kevin.van.rooijen@gmail.com
synopsis: A simple sandboxing tool for Haskell packages.
changelog: ''
basic-deps:
  unix: ==2.5.*
  base: ==4.5.*
  filepath: ==1.3.*
  directory: ==1.1.*
all-versions:
- '0.0'
- 0.0.1
author: Kevin van Rooijen
latest: 0.0.1
description-type: markdown
description: |-
  # LazyVault

  LazyVault is a simple sandboxing tool for managing your cabal packages.

  # Note

  At the moment LazyVault is only supported under Unix / Gnu systems and has only been tested by me on Gnu/Linux.

  # About

  LazyVault lets you create new global cabal sandboxes on your system. Instead of creating a sandbox inside your project, a new sandbox is created in the LazyVault directory for global use. You can switch between sandboxes, create, delete and store your existing cabal environment.

  # Installation

  For a clean start I recommend you delete (or move) your current .cabal and .ghc directories and install LazyVault in a fesh .cabal dir.

      # git clone git@github.com:AtticHacker/LazyVault
      # cd LazyVault
      # cabal install

  You have now installed LazyVault in your current cabal directory, make sure you add $HOME/.cabal/bin to your $PATH in order to access the executable.

  # Usage

  Once you're done, store your currently used cabal / ghc directories with the following command

      #LazyVault store LazyVault

  This will store your current cabal environment as a sandbox and name it LazyVault.

  Add this piece of code to your .bashrc / .bashprofile / .zshrc to include all the bin directories to your $PATH

      source $HOME/.lazyVault/binPaths

  You can now access the LazyVault executable even though it's stored as a sandbox.

  ### To list your sanboxes issue this command:

      # LazyVault list
      Available sandboxes:
      none **
      LazyVault

  Here you see that no sandbox is selected, but LazyVault is available. We can leave the LazyVault sandbox as it is, since we only need to access the binary. Let's install the `random` package in a new sandbox.

  ### Create a sandbox:

      LazyVault create Random

  Check your sandbox list again:

      # LazyVault list
      Available sandboxes:
      none **
      Random
      LazyVault

  Random has been added, but none is still selected. Let's set Random as our current cabal environment:

      # LazyVault set Random

  Check the list again:

      # LazyVault list
      Random **
      LazyVault

  As we can see, Random is now selected. We can now proceed in installing the random package.

      # cabal update ; cabal install random

  `random` has now been installed in the `Random` sandbox, and is accessible globally if Random is set.
license-name: GPL-3.0-only
