all-versions:
- 0.0.1.0
- 0.0.2.0
author: tushar
basic-deps:
  aeson: '>=2 && <3'
  async: <3
  base: '>=4.7 && <5'
  bytestring: '>=0.10'
  conduit: '>=1.2 && <1.4'
  containers: '>=0.6 && <0.9'
  directory: '>=1.3.6 && <1.4'
  filepath: <2
  http-conduit: '>=2 && <3'
  http-types: '>=0.11 && <0.13'
  ollama-haskell: '>=0'
  parsec: <4
  pdf-toolbox-document: ==0.1.4
  tagsoup: <0.15
  text: '>=1.2 && <3'
  vector: <0.14
changelog: "# Changelog for `langchain-hs`\n\nAll notable changes to this project
  will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  this project adheres to the\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\n\n##
  Unreleased\n\n## 0.0.2.0 - 2025-05-04\n\n### Added\n\n- Added `OpenAI` LLM integration.\n-
  Added `DirectoryLoader` for loading Documents from a directory.\n- Added `HuggingFace`
  LLM integration.\n- Added docusaurus documentation.\n- Added `OpenAI` embeddings
  integration.\n- Added GHC CI matrix build.\n- Added `TokenBufferMemory` Memory integration.\n-
  Added `RetrievalQA` chain.\n- Added `CalculatorTool` tool.\n\n### Fixed \n\n- Fixed
  `loadAndSplit` function for `PdfLoader`.\n- Minor documentation fixes.\n- Fixed
  `WebScraper` to only scrape textual content.\n- Made langchain-hs buildable till
  stack-lts-19.33\n- Fixed `React` agent.\n\n### Changed\n\n- Generalized LLMParams
  to accept different type per LLM. "
changelog-type: markdown
description: "# \U0001F99C️\U0001F517LangChain Haskell\n\n⚡ Building applications
  with LLMs through composability in Haskell! ⚡\n\n<div style=\"text-align: center;\">\n<img
  src=\"./docs/static/img/langchain_haskell.jpg\" alt=\"logo image\" height=\"300\"/>\n</div>\n\n##
  Introduction\n\nLangChain Haskell is a robust port of the original [LangChain](https://github.com/langchain-ai/langchain)
  library, bringing its powerful natural language processing capabilities to the Haskell
  ecosystem. This library enables developers to build applications powered by large
  language models (LLMs) with ease and flexibility.\n\n### [Documentation](https://tusharad.github.io/langchain-hs/docs/)\n###
  [Hackage API reference](https://hackage.haskell.org/package/langchain-hs)\n\n\n##
  Features\n\n- **LLM Integration**: Seamlessly interact with various language models,
  including OpenAI's GPT series and others.\n- **Prompt Templates**: Create and manage
  dynamic prompts for different tasks.\n- **Memory Management**: Implement conversational
  memory to maintain context across interactions.\n- **Agents and Tools**: Develop
  agents that can utilize tools to perform complex tasks.\n- **Document Loaders**:
  Load and process documents from various sources for use in your applications.\n-
  **Text Splitter**: Components for splitting text into smaller chunks for processing.\n-
  **Output Parser**: Components for parsing and processing the output of LLMs.\n-
  **VectorStore and Retriever**: Mechanism for storing and retrieving document embeddings.\n-
  **Embeddings**: Components for generating vector representations of text.\n\n##
  Current Supported Providers\n\n  - Ollama\n  - OpenAI\n  - Huggingface\n  - More
  to come...\n\n## Installation\n\nTo use LangChain Haskell in your project, add it
  to your package dependencies. \nIf you're using Stack, include it in your `package.yaml`:\n\n```yaml\ndependencies:\n
  \ - base < 5\n  - langchain-hs\n```\nThen, run the build command for your respective
  build tool to fetch and compile the dependency.\n\n## Quickstart\n\nHere's a simple
  example demonstrating how to use LangChain Haskell to interact with an LLM:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nmodule Main (main) where\n\nimport Langchain.LLM.Ollama\nimport
  Langchain.LLM.Core\nimport Langchain.PromptTemplate\nimport Langchain.Callback\nimport
  qualified Data.Map.Strict as Map\nimport qualified Data.Text as T\n\nmain :: IO
  ()\nmain = do \n  let ollamaLLM = Ollama \"llama3.2\" [stdOutCallback]\n      prompt
  = PromptTemplate \"Translate the following English text to French: {text}\"\n      input
  = Map.fromList [(\"text\", \"Hello, how are you?\")]\n      \n  case renderPrompt
  prompt input of\n    Left e -> putStrLn $ \"Error: \" ++ e\n    Right renderedPrompt
  -> do\n      eRes <- generate ollamaLLM renderedPrompt Nothing\n      case eRes
  of\n        Left err -> putStrLn $ \"Error: \" ++ err\n        Right response ->
  putStrLn $ \"Translation: \" ++ (T.unpack response)\n```\n\n## Contributing\n\nContributions
  are welcome! If you'd like to contribute, please fork the repository and submit
  a pull request. \nFor major changes, please open an issue first to discuss what
  you'd like to change.\n\n## License\n\nThis project is licensed under the MIT License.
  See the [LICENSE](LICENSE) file for details.\n\n## Acknowledgements\n\nThis project
  is inspired by and builds upon the original [LangChain](https://github.com/langchain-ai/langchain)
  library and its various ports in other programming languages. \nSpecial thanks to
  the developers of those projects for their foundational work.\n"
description-type: markdown
hash: 2958a994bc78143b5f72f2c5343644544b3a5dc6225053720ebdc34e58dae063
homepage: https://github.com/tusharad/langchain-hs#readme
latest: 0.0.2.0
license-name: MIT
maintainer: tusharadhatrao@gmail.com
synopsis: Haskell implementation of Langchain
test-bench-deps:
  aeson: '>=2 && <3'
  async: <3
  base: '>=4.7 && <5'
  bytestring: '>=0.10'
  conduit: '>=1.2 && <1.4'
  containers: '>=0.6 && <0.9'
  directory: '>=1.3.6 && <1.4'
  filepath: '>=0'
  http-conduit: '>=2 && <3'
  http-types: '>=0.11 && <0.13'
  langchain-hs: '>=0'
  ollama-haskell: '>=0'
  parsec: <4
  pdf-toolbox-document: ==0.1.4
  tagsoup: <0.15
  tasty: '>=0'
  tasty-hunit: '>=0'
  temporary: '>=0'
  text: '>=0'
  vector: <0.14
