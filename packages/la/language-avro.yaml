all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
author: Flavio Corpa
basic-deps:
  avro: '>=0.5.1'
  base: '>=4.12 && <5'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  megaparsec: '>=0'
  text: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: |
  # avro-parser-haskell

  [![Actions Status](https://github.com/higherkindness/avro-parser-haskell/workflows/Haskell%20CI/badge.svg)](https://github.com/higherkindness/avro-parser-haskell/actions)
  [![Hackage](https://img.shields.io/hackage/v/language-avro.svg?logo=haskell)](https://hackage.haskell.org/package/language-avro)
  [![Stackage Nightly](http://stackage.org/package/language-avro/badge/nightly)](http://stackage.org/nightly/package/language-avro)
  [![Stackage LTS](http://stackage.org/package/language-avro/badge/lts)](http://stackage.org/lts/package/language-avro)
  ![Hackage-Deps](https://img.shields.io/hackage-deps/v/language-avro?style=flat)
  [![ormolu](https://img.shields.io/badge/styled%20with-ormolu-blueviolet)](https://github.com/tweag/ormolu)

  Language definition and parser for AVRO (`.avdl`) files.

  ## Example

  ```haskell
  #!/usr/bin/env stack
  -- stack --resolver lts-18.19 script --package language-avro,pretty-simple

  module Main where

  import Language.Avro.Parser (readWithImports)
  import Text.Pretty.Simple (pPrint)

  main :: IO ()
  main =
    readWithImports "test" "PeopleService.avdl"
      >>= either putStrLn pPrint
  -- λ>
  -- Protocol
  --   { ns = Just
  --       ( Namespace
  --           [ "example"
  --           , "seed"
  --           , "server"
  --           , "protocol"
  --           , "avro"
  --           ]
  --       )
  --   , pname = "PeopleService"
  --   , imports = [ IdlImport "People.avdl" ]
  --   , types =
  --       [ Record
  --           { name = "Person"
  --           , aliases = []
  --           , doc = Nothing
  --           , order = Nothing
  --           , fields =
  --               [ Field
  --                   { fldName = "name"
  --                   , fldAliases = []
  --                   , fldDoc = Nothing
  --                   , fldOrder = Nothing
  --                   , fldType = String { logicalTypeS = Nothing }
  --                   , fldDefault = Nothing
  --                   }
  --               , Field
  --                   { fldName = "age"
  --                   , fldAliases = []
  --                   , fldDoc = Nothing
  --                   , fldOrder = Nothing
  --                   , fldType = Int { logicalTypeI = Nothing }
  --                   , fldDefault = Nothing
  --                   }
  --               ]
  --           }
  --       , Record
  --           { name = "NotFoundError"
  --           , aliases = []
  --           , doc = Nothing
  --           , order = Nothing
  --           , fields =
  --               [ Field
  --                   { fldName = "message"
  --                   , fldAliases = []
  --                   , fldDoc = Nothing
  --                   , fldOrder = Nothing
  --                   , fldType = String { logicalTypeS = Nothing }
  --                   , fldDefault = Nothing
  --                   }
  --               ]
  --           }
  --       , Record
  --           { name = "DuplicatedPersonError"
  --           , aliases = []
  --           , doc = Nothing
  --           , order = Nothing
  --           , fields =
  --               [ Field
  --                   { fldName = "message"
  --                   , fldAliases = []
  --                   , fldDoc = Nothing
  --                   , fldOrder = Nothing
  --                   , fldType = String { logicalTypeS = Nothing }
  --                   , fldDefault = Nothing
  --                   }
  --               ]
  --           }
  --       , Record
  --           { name = "PeopleRequest"
  --           , aliases = []
  --           , doc = Nothing
  --           , order = Nothing
  --           , fields =
  --               [ Field
  --                   { fldName = "name"
  --                   , fldAliases = []
  --                   , fldDoc = Nothing
  --                   , fldOrder = Nothing
  --                   , fldType = String { logicalTypeS = Nothing }
  --                   , fldDefault = Nothing
  --                   }
  --               ]
  --           }
  --       , Record
  --           { name = "PeopleResponse"
  --           , aliases = []
  --           , doc = Nothing
  --           , order = Nothing
  --           , fields =
  --               [ Field
  --                   { fldName = "result"
  --                   , fldAliases = []
  --                   , fldDoc = Nothing
  --                   , fldOrder = Nothing
  --                   , fldType = Union
  --                       { options =
  --                           [ NamedType "Person"
  --                           , NamedType "NotFoundError"
  --                           , NamedType "DuplicatedPersonError"
  --                           ]
  --                       }
  --                   , fldDefault = Nothing
  --                   }
  --               ]
  --           }
  --       ]
  --   , messages =
  --       [ Method
  --           { mname = "getPerson"
  --           , args =
  --               [ Argument
  --                   { atype = NamedType "example.seed.server.protocol.avro.PeopleRequest"
  --                   , aname = "request"
  --                   }
  --               ]
  --           , result = NamedType "example.seed.server.protocol.avro.PeopleResponse"
  --           , throws = Null
  --           , oneway = False
  --           }
  --       ]
  --   }
  ```

  ⚠️ Warning: `readWithImports` only works right now if the import type is `"idl"`!
description-type: markdown
hash: fbf621615b9f1d072caea6780bfbb4faff522dc1e1c698cafe54ca498de8b818
homepage: https://github.com/kutyel/avro-parser-haskell#readme
latest: 0.1.4.0
license-name: Apache-2.0
maintainer: flaviocorpa@gmail.com
synopsis: Language definition and parser for AVRO files.
test-bench-deps:
  avro: '>=0.5.1'
  base: '>=4.12 && <5'
  hspec: '>=0'
  hspec-megaparsec: '>=0'
  language-avro: '>=0'
  megaparsec: '>=0'
  text: '>=0'
  vector: '>=0'
