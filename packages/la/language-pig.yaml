all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
- 0.3.0.1
author: Elise Huard
basic-deps:
  Cabal: '>=1.16.0'
  base: '>=4.6 && <4.7'
  containers: '>=0'
  parsec: '>=3.1.3'
  pretty-tree: '>=0'
changelog: ''
changelog-type: ''
description: |
  # language-pig #

  Parser and pretty printer for the Apache Pig scripting language (http://pig.apache.org/). The current version is implemented using Parsec parser combinators.

  # Install #

  Cabal project, now on hackage, so the usual

  ```
  cabal install language-pig
  ```

  Or from source

  ```
  git clone ...
  cd language-pig
  cabal install
  ```

  # Use #

  Parse an expression:

  ```
  parseString :: [Char] -> Root
  ```

  Returns an AST (type Root is the root node).

  Parse a file:
  ```
  parseFile :: FilePath -> IO PigFile
  ```
  PigFile contains the Root (of AST) and the file name. If you want just the AST, parseFileForAST would do it.

  Pretty print the produced tree:
  ```
  putStrLn $ prettyPrint tree
  ```

  So to round it up, if you want to parse and pretty print the parsed AST of a Pig file (using Control.Applicative (<$>))

  ```
  prettyPrint <$> parseFileForAST "example.pig" >>= putStrLn
  ```
description-type: markdown
hash: e822ac6394ff9c1750a19aa2808356498fd5cfcfde68225f340cf06433a3d522
homepage: ''
latest: 0.3.0.1
license-name: MIT
maintainer: elise@jabberwocky.eu
synopsis: Pig parser in haskell.
test-bench-deps:
  Cabal: '>=1.16.0'
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=4.6 && <4.7'
  language-pig: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  test-framework-quickcheck2: '>=0'
  text: '>=0'
