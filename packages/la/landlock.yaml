all-versions:
- 0.2.0.1
- 0.2.1.0
- 0.2.1.1
author: Nicolas Trangez
basic-deps:
  base: '>=4.14.2.0 && <4.18'
  exceptions: '>=0.10.4 && <0.11'
  landlock: '>=0'
  optparse-applicative: '>=0.16.1.0 && <0.17 || ^>=0.17'
  unix: '>=2.7.2.2 && <2.9'
changelog: |
  # Revision history for landlock

  ## 0.2.1.1 -- 2023-02-28

  * Extend API documentation with links to man-pages.

  ## 0.2.1.0 -- 2023-02-22

  * Use vendored `linux/landlock.h` instead of system-provided header during
    build.

  * Support Landlock ABI v2 and `LANDLOCK_ACCESS_FS_REFER` as part of it.

  * Support Landlock ABI v3 and `LANDLOCK_ACCESS_FS_TRUNCATE` as part of it.

  * Support GHC 9.4.2 / `base ^>=4.17`.

  * Support `unix ^>=2.8`.

  * Add a new executable,`landlocked`, which permits to run a command in
    a sandboxed environment.

  * Add a flag, `landlocked`, which allows to not build the `landlocked`
    executable.

  * Use `capi` foreign imports instead of `ccall` using the `CApiFFI` language
    extension.

  * Add a Cabal flag, `werror`, to enable compiler `-Werror` and friends.

  ## 0.2.0.1 -- 2022-08-24

  * Code-wise the same as version 0.2.0.0, but said version was incorrectly
    published on Hackage, hence re-releasing.

  ## 0.2.0.0 -- 2022-08-24

  * Support `base ^>=4.15` and `base ^>=4.16`, tested in CI using GHC 9.0.2 and
    GHC 9.2.2.

  * Add a dependency on `psx` to avoid `setxid`-style security issues.

    See `test/ThreadedScenario.hs` for a scenario which triggers the
    aforementioned security issue, which needs a Glibc `setxid`-style
    work-around. This scenario is executed by the new `landlock-test-threaded`
    test-suite.

    See https://github.com/NicolasT/landlock-hs/issues/9 for more background.

  ## 0.1.0.0 -- 2022-08-18

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # landlock-hs: Haskell bindings for the Linux Landlock API

  This library exposes Haskell bindings for the Linux kernel Landlock API.

  The Linux kernel Landlock API provides unprivileged access control. The goal
  of Landlock is to enable to restrict ambient rights (e.g. global filesystem
  access) for a set of processes. Because Landlock is a stackable LSM, it makes
  possible to create safe security sandboxes as new security layers in addition
  to the existing system-wide access-controls. This kind of sandbox is expected
  to help mitigate the security impact of bugs or unexpected/malicious
  behaviors in user space applications. Landlock empowers any process,
  including unprivileged ones, to securely restrict themselves.

  For more information, see the [Landlock homepage](https://landlock.io/) and its
  [kernel documentation](https://docs.kernel.org/userspace-api/landlock.html).

  ## Example

  Here's a simple example, allowing read-only access to the user's SSH public
  key, full access to `tmp` and the ability to read and execute everything in
  `/usr`:

  ```haskell
  import System.Landlock (
        AccessFsFlag(..)
      , OpenPathFlags(..)
      , RulesetAttr(..)
      , abiVersion
      , accessFsFlags
      , accessFsFlagIsReadOnly
      , defaultOpenPathFlags
      , isSupported
      , landlock
      , pathBeneath
      , withOpenPath
      )

  import ReadmeUtils

  -- These tests run with a "fake" pre-populated rootfs
  -- All files and directories in it are created using the current user,
  -- readable, writable and (in case of scripts) executable, so without
  -- Landlock, there would be no permission errors.

  main :: IO ()
  main = withFakeRoot $ \root -> do
      -- Check whether Landlock is supported
      hasLandlock <- isSupported

      unless hasLandlock $
          fail "Landlock not supported"

      version <- abiVersion
      -- Find all FS access flags for the running kernel's ABI version
      allFlags <- lookupAccessFsFlags version
      let roFlags = filter accessFsFlagIsReadOnly allFlags

      let homeDir = root </> "home" </> "user"
          publicKey = homeDir </> ".ssh" </> "id_ed25519.pub"
          privateKey = homeDir </> ".ssh" </> "id_ed25519"
          tmpDir = root </> "tmp"

      -- Construct the sandbox, locking down everything by default
      landlock (RulesetAttr allFlags) [] [] $ \addRule -> do
          -- /tmp is fully accessible
          withOpenPath tmpDir defaultOpenPathFlags{ directory = True } $ \tmp ->
              addRule (pathBeneath tmp allFlags) []

          -- SSH public key is readable
          withOpenPath publicKey defaultOpenPathFlags $ \key ->
              addRule (pathBeneath key [AccessFsReadFile]) []

          -- (Real) /usr is fully accessible, but read-only (includes executable permissions)
          withOpenPath "/usr" defaultOpenPathFlags{ directory = True } $ \usr -> do
              addRule (pathBeneath usr roFlags) []

      -- Can create and write to files in tmp
      writeFile (tmpDir </> "program.log") "Success!"

      -- Can read SSH key
      _pubKey <- readFile publicKey

      -- Can execute things in /usr
      "Linux\n" <- readProcess ("/usr" </> "bin" </> "uname") ["-s"] ""

      -- Can't read SSH private key
      assertPermissionDenied $
          readFile privateKey

      -- Can't write to SSH public key
      assertPermissionDenied $
          withFile publicKey WriteMode $ \fd ->
              hPutStrLn fd "Oops, key gone!"

      -- Can't remove SSH public key
      assertPermissionDenied $
          removeFile publicKey

      -- Can't create files in homedir
      assertPermissionDenied $
          writeFile (homeDir </> "whoops.txt") "This file should not exist!"

      -- Can't read files from (real) /etc
      assertPermissionDenied $
          readFile ("/etc" </> "hosts")

    where
      lookupAccessFsFlags version = case lookup version accessFsFlags of
          -- In a production implementation, we'd lookup the "best matching" flag
          -- set, not require an exact match.
          Nothing -> fail "Unsupported ABI version"
          Just flags -> return flags

      assertPermissionDenied act = handleJust permissionDenied return $ do
          _ <- act
          fail "Expected permission error"
      permissionDenied e = if isPermissionError e then Just () else Nothing
  ```
description-type: markdown
hash: 10a46c89fc2a84783df795c650251152423e2900c1ba9296fba45d19f27e743f
homepage: https://github.com/NicolasT/landlock-hs
latest: 0.2.1.1
license-name: BSD-3-Clause
maintainer: ikke@nicolast.be
synopsis: Haskell bindings for the Linux Landlock API
test-bench-deps:
  QuickCheck: ^>=2.14.2
  async: '>=2.2.3 && <2.3'
  base: '>=4.14.2.0 && <4.18'
  directory: ^>=1.3.6.0
  filepath: '>=1.4.2.1 && <1.5'
  landlock: '>=0'
  process: '>=1.6.9.0 && <1.7'
  quickcheck-classes-base: ^>=0.6.2.0
  tasty: '>=1.4.1 && <1.5'
  tasty-hunit: '>=0.10.0.3 && <0.11'
  tasty-quickcheck: ^>=0.10.1.2
  temporary: '>=1.3 && <1.4'
