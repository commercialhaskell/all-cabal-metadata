homepage: https://wiki.haskell.org/Lambdabot
changelog-type: text
hash: 695c59e1f4c5297c04d2f874532de6d5e644393f9b1001612dc04477a113ca4a
test-bench-deps: {}
maintainer: Bertram Felgenhauer <int-e@gmx.de>
synopsis: Lambdabot is a development tool and advanced IRC bot
changelog: "lambdabot 5.3.1\n\t* support ghc-9.2\n\nlambdabot 5.3.0.1\n\t* support
  ghc-8.10 (#192)\n\t* support dependent-map 0.4 (#193)\n\nlambdabot 5.3\n\t* support
  ghc-8.8 (#186, #187)\n\t* fix Setup.hs files for Cabal 3.0 (#188, #189)\n\t* fix
  alpha renaming in @pl\n\t* fix variable capture in @unpl\n\nlambdabot 5.2\n\t* remove
  stats plugin (for network-3.0 support)\n\nlambdabot 5.1.0.4\n\t* support ghc-8.6
  (#174, #175)\n\t* @pl timeout works again (#173)\n\nlambdabot 5.1.0.2\n\t* support
  ghc-8.4\n\t* #155, #163, #164, #168, #169, #170\n\nlambdabot 5.1.0.1\n\t* support
  ghc-8.0\n\t* support haskell-src-exts 1.18+\n\t* better oeis output\n\t* #141, #149\n\nlambdabot
  5.1\n\t* support for dependent-sum 0.3 (#130)\n\t* IRC reconnect support (#125,
  by Nikolay Amiantov)\n\t* unmtl parsing fix (#129, by Daniel Wagner)\n\t* #131,
  #138, #139, #140, #142, #143\n\nlambdabot 5.0.3\n\t* compatibility with ghc-7.10:
  relax utf8-string upper bound\n\t* numerous bugfixes (#121, #122, #123, #117, #98)\n\nlambdabot
  5.0.2.2\n\t* update Changelog\n\nlambdabot 5.0.2.1\n\t* use QuickCheck-safe for
  @check command\n\t* ship ghc version specific Pristen.hs files\n\t* the dict plugin
  no longer looks up more than one word at a time\n\nlambdabot 5.0.1\n\t* update to
  monad-control-1.0\n\t* if ./State/ exists, then state files are stored there even
  if a\n\t  corresponding file exists in ~/.lambdabot/State\n"
basic-deps:
  lambdabot-irc-plugins: '>=5.3 && <5.4'
  lambdabot-novelty-plugins: '>=5.3 && <5.4'
  base: '>=3 && <5'
  lambdabot-haskell-plugins: '>=5.3 && <5.4'
  lambdabot-social-plugins: '>=5.3 && <5.4'
  lambdabot-reference-plugins: '>=5.3 && <5.4'
  mtl: '>=2'
  lambdabot-misc-plugins: '>=5.3 && <5.4'
  lambdabot-core: '>=5.3 && <5.4'
all-versions:
- '4.0'
- '4.1'
- 4.2.1
- 4.2.2
- 4.2.2.1
- 4.2.3.0
- 4.2.3.1
- 4.2.3.2
- 4.2.3.3
- '4.3'
- 4.3.0.1
- '5.0'
- 5.0.1
- 5.0.2.1
- 5.0.2.2
- 5.0.3
- '5.1'
- 5.1.0.1
- 5.1.0.2
- 5.1.0.4
- '5.2'
- '5.3'
- 5.3.0.1
- 5.3.0.2
- 5.3.1
author: James Cook
latest: 5.3.1
description-type: markdown
description: |
  # About Lambdabot

  Lambdabot is an IRC bot written over several years by those on the Libera's
  (formerly freenode's) `#haskell` IRC channel.

  It operates as a command line tool, embedded in an editor, embedded in GHCi,
  via internet relay chat and on the web.

  ## Installation

  The easiest way to install `lambdabot` is from hackage, by the following
  commands,

      cabal v1-install lambdabot
      hoogle data

  or, using v2 commands:

      cabal v2-install lambdabot hoogle misfortune mueval unlambda dice
      hoogle data
      cabal v2-install --lib lambdabot-trusted random mtl show

  The second command fetches the data for Lambdabot's `@hoogle` command, which
  is a thin wrapper around the [`hoogle`](https://www.haskell.org/hoogle/)
  command line tool. Invoking `lambdabot` will (hopefully) display a
  `lambdabot>` prompt.

  It is also possible to install lambdabot in a sandbox. In that case, use
  `cabal exec lambdabot` to launch lambdabot.

  ## Files

  Some lambdabot modules maintain state. The state is stored in `./State/`
  if that directory exits; otherwise, it will end up on `~/.lambdabot/State/`.
  State files of particular interest are:

   * `Pristine.hs` and `L.hs`: Environment for running Haskell code.
     The command `@let` adds new definitions to `L.hs`, whereas `@undefine`
     copies `Pristine.hs` to `L.hs`.
   * `offlinerc`: This file contains a history of commands typed into
     lambdabot's tty interface.

  ## Customization

  The state file `Pristine.hs` defines the environment in which Haskell code
  is run. To customize lambdabot's modules, unpack the lambdabot package

      cabal unpack lambdabot; cd lambdabot-<version>

  You can then edit `src/Modules.hs` to configure the loaded modules.

  ## Using Lambdabot

  Lambdabot has a number of modules, most of which provide several commands.
  Type `@listmodules` to obtain a list of module names, and then
  `@list <module>` to list a module's commands. Executing `@help command`
  displays a short description of the command.

  The following sample session demonstrates some useful lambdabot commands.

      lambdabot> > sum [1..10]
       55
      lambdabot> @let foo = 42
      lambdabot> > product [1..foo]
       1405006117752879898543142606244511569936384000000000
      lambdabot> @undefine
          Not in scope:‘foo’
          Perhaps you meant ‘Data.Traversable.for’ (imported from Data.Traversable)
      lambdabot> @type map
      (a -> b) -> [a] -> [b]
      lambdabot> @djinn (b -> c) -> (a -> b) -> a -> c
      f a b c = a (b c)
      lambdabot> @pl \x y z -> y z x
      flip flip
      lambdabot> @unpl flip flip
      (\ b c f -> c f b)
      lambdabot> @undo do x <- step1; step2; step3
      step1 >>= \ x -> step2 >> step3

  ## Further Information

  - [lambdabot](https://github.com/lambdabot/lambdabot) on github
  - [lambdabot](https://wiki.haskell.org/Lambdabot) on the Haskell wiki (outdated)
  - [GOA: GHCI integration](https://wiki.haskell.org/GHC/GHCi#GHCi_on_Acid) (Haskell Wiki)
license-name: LicenseRef-GPL
