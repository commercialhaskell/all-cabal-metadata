all-versions:
- 0.1.1
- 0.1.2
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Csaba Hruska, Gergely Patai
basic-deps:
  OpenGLRaw: '>=0'
  array: '>=0.2.0.0 && <1'
  base: '>=4.0.0.0 && <5'
  binary: '>=0.5.0.1 && <1'
  bitmap: '>=0.0.2 && <0.1'
  bytestring: '>=0.9.1.4 && <1'
  bytestring-trie: '>=0.2 && <0.3'
  containers: '>=0.2 && <1'
  directory: '>=1.0.0.2 && <2'
  filepath: '>=1.1.0.1 && <2'
  mtl: '>=2 && <3'
  stb-image: '>=0.2.1 && <0.3'
  uulib: '>=0.9.10 && <1'
  vect: '>=0.4.6 && <1'
  vector: '>=0'
  vector-algorithms: '>=0'
  xml: '>=1.3 && <2'
  zip-archive: '>=0.1.1.8 && <1'
changelog: |
  2011-10-29 - 0.2.3
  * fixed mkVMesh vertex buffer handling
  * added VMesh Binary instance and load support

  2011-07-02 - 0.2.2
  * fixed the handling of vertex colour attributes

  2011-06-23 - 0.2.1
  * complete overhaul

  2009-11-26 - 0.1.2
  * fixed cabal dependencies for stb-image

  2009-11-18 - 0.1.1
  * initial release
changelog-type: text
description: "This is all highly experimental. Check out the examples package and\nthe
  website for further details.\n\nThere is one important feature that none of the
  examples can use due\nto the way cabal deals with data files.  You can specify the
  paths to\nyour resources in an ini-style config file, which looks something like\nthis:\n\n#
  Comment\n[Section]\nZip=path/to/resources-1.zip\nZip=path/to/resources-2.zip\nFileSystem=path/to/more/resources/1\nFileSystem=path/to/more/resources/2\n...\n\nYou
  can use the addConfig function (found in comments in all the\nexamples) to load
  this file.\n\n\nInternals:\n    Internals overview:\n        ...\n    \n    render
  pipeline:\n        Scene       ->  FlattenScene    ->  RenderQueue     ->  RenderablePass\n
  \        |-> Light       |-> Light          (optimize            - setup light and
  pass\n         |-> Camera      |-> Camera          render              - render
  each RenderOperation (call RenderSystem's render function)\n         |-> Entity
  \     |-> RenderEntity    operations)\n         \n         for each RenderTarget\n
  \           renderViewport\n\n    data types:\n        - RenderSystem related typeclasses\n
  \           - HardwareBuffer\n            - HardwareVertexBuffer\n            -
  HardwareIndexBuffer\n            - Texture\n            - GpuProgram\n            -
  LinkedGpuProgram\n            - RenderSystemCapabilities\n        - World (top level
  data structure)\n            low level model data types:\n                - VertexData\n
  \               - IndexData\n                - VertexDeclaration\n                -
  VertexBufferBinding\n            high level model data types:\n                -
  SubMesh\n                - Mesh\n                - VectorVertexData\n            material
  data types:\n                - Material\n                - Technique\n                -
  Pass\n                - TextureUnitState\n            scene related data types:\n
  \               - FlattenScene\n                - SceneObject\n                  -
  Entity\n                        - SubEntity\n                    - Camera\n                    -
  Light\n                - SceneNode\n                - Scene\n                    -
  MkSceneObjectAction\n                    - MkNodeAction\n                - Frustum\n
  \           high level render related data types:\n                - Compositor\n
  \               - RenderTarget\n                - Viewport\n                - \n
  \           low level rendering related data types:\n                - Renderable
  (type class)\n                - RenderEntity\n                - RenderOperation\n
  \               - RenderablePass\n                - \n            resource related
  data types:\n                - ResourceLibrary\n                - \n\nUser Guide:\n
  \   - lambdacube is a rendering engine, does not care with window management and
  input handling.\n    - usage:\n        - create render system\n        - create
  world:\n            - init world with render system and resource paths and loaders\n
  \           - create the scene\n        - render loop:\n            - derive a world
  data for each new frame, with required world modifications\n"
description-type: text
hash: 0268a7aa603d28381bbda7ebe79c592db7b6abf15d40f68805e017a850d8b71a
homepage: http://www.haskell.org/haskellwiki/LambdaCubeEngine
latest: 0.2.4
license-name: BSD-3-Clause
maintainer: csaba (dot) hruska (at) gmail (dot) com
synopsis: 3D rendering engine written entirely in Haskell
test-bench-deps: {}
