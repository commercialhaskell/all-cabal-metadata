all-versions:
- 0.1.0
- 0.2.0
author: Awake Security
basic-deps:
  QuickCheck: '>=2.9 && <2.10'
  aeson: '>=1.0 && <1.3'
  aeson-pretty: '>=0.8 && <0.9'
  base: '>=4.8 && <5.0'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.5 && <0.6'
  deepseq: '>=1.4 && <1.5'
  flow: '>=1.0 && <1.1'
  hashable: '>=1.2 && <1.3'
  intern: '>=0.9 && <0.10'
  language-ninja: '>=0'
  lens: '>=4.15 && <4.16'
  megaparsec: '>=5.2 && <5.3'
  mtl: '>=2.2 && <2.3'
  optparse-generic: '>=1.1 && <1.2'
  semigroups: '>=0.18 && <0.19'
  smallcheck: '>=1.1 && <1.2'
  system-filepath: '>=0.4 && <0.5'
  text: '>=1.2 && <1.3'
  transformers: '>=0.4 && <0.6'
  unordered-containers: '>=0.2 && <0.3'
  versions: '>=3.1.1 && <3.2'
changelog: |
  # CHANGELOG

  ## Version 0.2.0

  - Removed dependency on `quickcheck-instances`.
  - It now compiles under GHC 7.10.3!

  ## Version 0.1.0

  This is the first release of `language-ninja`!
changelog-type: markdown
description: |
  # `language-ninja`

  [![Hackage][hackage-badge]][hackage-link]
  [![Stackage][stackage-badge]][stackage-link]
  [![License][license-badge]][license-link]

  `language-ninja` is a Haskell library for parsing, pretty-printing, and
  compiling the [Ninja build language](https://ninja-build.org).

  ## Motivation

  `language-ninja` was written as a part of Awake Security's efforts in creating
  incremental build infrastructure for the Nix package manager, and in particular
  for Haskell packages. This library is the basis for a tool, [ninja2nix][], that,
  given a Ninja file, will output a JSON file containing information that a Nix
  function can use to compute a derivation representing an incremental build
  using one derivation per build edge in the parsed Ninja build graph.

  In conjunction with an as-of-yet unwritten tool, [cabal2ninja][], that will
  generate a Ninja file based on information from `cabal` and `ghc -M`, we will
  have incremental builds for any Haskell package that uses a default `Setup.hs`
  file.

  Using Ninja as an intermediate representation has advantages here, since it
  means that [ninja2nix][] could be useful for building other projects that use
  a build system that can output Ninja, like the Linux kernel (with `kninja`),
  Chromium, any CMake project, any Bazel project, or some Make-based projects
  (with `kati`).

  ## Parsing

  Originally, `language-ninja` used the Ninja lexer/parser from Neil Mitchell's
  `shake` project. However, we now use a `megaparsec`-based lexer and a highly
  modified version of the old parser. There is still work to be done on improving
  the diagnostic data and pretty-printability of the AST from this parser.
  In my view, it is very important that a parser output an AST that can be
  pretty-printed exactly to same sequence of bytes that were in the parsed file,
  as this makes tests and diagnostics much easier to write.

  ## Pretty-printing

  Currently there is a rudimentary pretty-printer in `Language.Ninja.Pretty`.
  It simply outputs text such that if that text is parsed and the parsed data
  is pretty-printed again, the resulting text will be identical to the original
  text (this is tested on a variety of Ninja files in the test suite).

  ## Compiling

  The `Ninja` type from `Language.Ninja.IR.Ninja` contains precisely the data
  that must be acted on dynamically in a Ninja. In converting from the parsed
  AST to the intermediate representation using `Language.Ninja.Compile.compile`,
  you are eliminating all statically-dischargeable language features in Ninja,
  like variables. It also "monomorphizes" Ninja `rule`s, since rule-level `$out`
  references are a kind of parametric polymorphism. This IR is thus far more
  suitable for processing than the original parsed AST.

  ## Miscellaneous

  The `staging` branch is used for active development; i.e.: force pushes may
  happen on `staging` but will not happen on `master`.

  To build this, I recommend installing the Nix package manager and running
  `nix-build release.nix -A language-ninja`.

  [hackage-badge]:
      https://img.shields.io/hackage/v/language-ninja.svg?label=Hackage
  [hackage-link]:
      https://hackage.haskell.org/package/language-ninja
  [stackage-badge]:
      https://www.stackage.org/package/language-ninja/badge/lts?label=Stackage
  [stackage-link]:
      https://www.stackage.org/package/language-ninja
  [license-badge]:
      https://img.shields.io/badge/License-Apache%202.0-blue.svg
  [license-link]:
      https://spdx.org/licenses/Apache-2.0.html
  [ninja2nix]:
      https://github.com/awakesecurity/ninja2nix
  [cabal2ninja]:
      https://github.com/awakesecurity/cabal2ninja
description-type: markdown
hash: 7e173a207919d3b5fb00ad7c55c9e1548723458ef5b8d8721572ecbfb010f574
homepage: https://github.com/awakesecurity/language-ninja
latest: 0.2.0
license-name: Apache-2.0
maintainer: opensource@awakesecurity.com
synopsis: A library for dealing with the Ninja build language.
test-bench-deps:
  QuickCheck: '>=2.9 && <2.10'
  aeson: '>=1.0 && <1.3'
  base: '>=4.8 && <5.0'
  bytestring: '>=0.10 && <0.11'
  cabal-doctest: '>=1.0.2 && <1.1'
  containers: '>=0.5 && <0.6'
  doctest: '>=0.11 && <0.12'
  flow: '>=1.0 && <1.1'
  ghc: '>=7.4 && <8.4'
  haddock-api: '>=2.17 && <2.18'
  haddock-library: '>=1.4 && <1.5'
  hashable: '>=1.2 && <1.3'
  language-ninja: '>=0'
  lens: '>=4.15 && <4.16'
  monad-mock: '>=0.1 && <0.2'
  mtl: '>=2.2 && <2.3'
  quickcheck-instances: '>=0.3 && <0.4'
  semigroups: '>=0.18 && <0.19'
  smallcheck: '>=1.1 && <1.2'
  system-filepath: '>=0.4 && <0.5'
  tasty: '>=0.11 && <0.12'
  tasty-html: '>=0.4 && <0.5'
  tasty-hunit: '>=0.9 && <0.10'
  tasty-lens: '>=0.3 && <0.4'
  tasty-quickcheck: '>=0.8 && <0.9'
  tasty-smallcheck: '>=0.8 && <0.9'
  template-haskell: '>=2.10 && <2.12'
  text: '>=1.2 && <1.3'
  transformers: '>=0.4 && <0.6'
  turtle: '>=1.3 && <1.4'
  unordered-containers: '>=0.2 && <0.3'
  versions: '>=3.1.1 && <3.2'
