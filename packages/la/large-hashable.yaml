all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Stefan Wehr, Lukas Epple
basic-deps:
  aeson: '>=0'
  base: '>=4.8 && <5'
  base16-bytestring: '>=0'
  bytes: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  scientific: '>=0'
  strict: '>=0'
  template-haskell: <2.15
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  utf8-light: '>=0'
  vector: '>=0'
  void: '>=0'
changelog: |
  0.1.0.4: 2017-03-19
          * fixed build on `i686` related to non-fixed size integers

  0.1.0.2: 2016-10-10
          * fixed build problems because of TemplateHaskell 2.11

  0.1.0.1: 2016-08-10
          * fixed build issue: added bitfn.h to cabal file

  0.1.0.0: 2016-08-09
          * initial release
changelog-type: text
description: |
  # LargeHashable

  [![Build Status](https://travis-ci.org/factisresearch/large-hashable.svg?branch=master)](https://travis-ci.org/factisresearch/large-hashable)
  [![Hackage](https://img.shields.io/hackage/v/large-hashable.svg)](http://hackage.haskell.org/package/large-hashable)

  Efficiently hash Haskell values with MD5, SHA256, SHA512 and other
  hashing algorithms.

  ## Install

  * Using cabal: `cabal install large-hashable`
  * Using Stack: `stack install large-hashable`

  ### Building from git repository

  - clone the repository
  - Install the stack tool (http://haskellstack.org)
  - `stack build` builds the code
  - `stack test` builds the code and runs the tests
  - `run-benchmarks.sh` runs the benchmark suite
description-type: markdown
hash: 793d6e0b31aaa9103929bef38b2eec76d1f87865744b6d85ca326f9f8b11d4f5
homepage: https://github.com/factisresearch/large-hashable
latest: 0.1.0.4
license-name: BSD-3-Clause
maintainer: Stefan Wehr <wehr@cp-med.com>
synopsis: Efficiently hash (large) Haskell values
test-bench-deps:
  HTF: '>=0'
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=4.8 && <5'
  base16-bytestring: '>=0'
  byteable: '>=0'
  bytes: '>=0'
  bytestring: '>=0'
  cereal: '>=0'
  containers: '>=0'
  cryptohash: '>=0'
  deepseq: '>=0'
  hashable: '>=0'
  large-hashable: '>=0'
  safecopy: '>=0'
  scientific: '>=0'
  strict: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
