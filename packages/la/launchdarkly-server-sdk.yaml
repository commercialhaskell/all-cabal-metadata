homepage: https://github.com/launchdarkly/haskell-server-sdk#readme
changelog-type: markdown
hash: 7b8f93edfbdeb4bceb6ce52112a3bd72fa7a113612a700fb47239b617b1bdcdd
test-bench-deps:
  http-client: '>=0.6.4 && <0.8'
  exceptions: '>=0.10.2 && <0.11'
  pcre-light: '>=0.4.0.4 && <0.5'
  bytestring: '>=0.10.8.2 && <0.11'
  lrucache: '>=1.2.0.1 && <1.3'
  bytestring-conversion: '>=0.3.1 && <0.4'
  extra: '>=1.6.17 && <1.8'
  base: '>=4.7 && <5'
  time: '>=1.8.0.2 && <1.11'
  unordered-containers: '>=0.2.10.0 && <0.3'
  text: '>=1.2.3.1 && <1.3'
  uuid: '>=1.3.13 && <1.4'
  retry: '>=0.8.0.1 && <0.9'
  clock: ==0.8.*
  HUnit: -any
  containers: '>=0.6.0.1 && <0.7'
  lens: '>=4.17.1 && <4.20'
  hashtables: '>=1.2.3.4 && <1.3'
  iso8601-time: '>=0.1.5 && <0.2'
  http-client-tls: '>=0.3.5.3 && <0.4'
  semver: '>=0.3.4 && <0.5'
  mtl: '>=2.2.2 && <2.3'
  monad-logger: '>=0.3.30 && <0.4'
  base16-bytestring: '>=0.1.1.6 && <1.1'
  attoparsec: '>=0.13.2.2 && <0.14'
  generic-lens: '>=1.1.0.0 && <2.2'
  random: '>=1.1 && <1.3'
  scientific: '>=0.3.6.2 && <0.4'
  hedis: '>=0.12.7 && <0.15'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.4.4.0 && <1.6'
  vector: '>=0.12.0.3 && <0.13'
  cryptohash: '>=0.11.9 && <0.12'
maintainer: dev@launchdarkly.com
synopsis: Server-side SDK for integrating with LaunchDarkly
changelog: |
  # Change log

  All notable changes to the LaunchDarkly Haskell Server-side SDK will be documented in this file. This project adheres to [Semantic Versioning](http://semver.org).

  ## [2.2.0] - 2021-06-17
  ### Added:
  - The SDK now supports the ability to control the proportion of traffic allocation to an experiment. This works in conjunction with a new platform feature now available to early access customers.



  ## [2.1.1] - 2021-03-05
  ### Changed:
  - Updated dependency ranges. Thanks @dbaynard !

  ## [2.1.0] - 2021-02-04
  ### Added:
  - Added the `alias` function. This can be used to associate two user objects for analytics purposes by generating an alias event.

  ## [2.0.2] - 2020-10-13
  ### Fixed:
  - Removed unused legacy &#34;sel&#34; field from flag model.

  ## [2.0.1] - 2020-08-28
  ### Fixed:
  - Expanded dependency supported version range. Thanks @dbaynard!


  ## [2.0.0] - 2020-04-21
  ### Changed:
  - The function `userSetKey` is now takes `Text` instead of `Maybe Text` for the key. This originally existed for compatibility with an internal test suite.

  ### Removed:
  - The constructor `EvalErrorUserNotSpecified` has been removed from `EvalErrorKind`.

  ## [1.0.4] - 2020-04-06
  ### Fixed:
  - Widened time and lens dependency ranges. Thanks @nbouscal!

  ## [1.0.3] - 2020-03-31
  ### Fixed:
  - Standardize streaming retry behavior. Changed handling of status codes. Exponential back-off is now reset after 60 seconds of successful streaming.

  ## [1.0.2] - 2020-03-16
  ### Fixed:
  - Added a timeout on SSE reads to 5 minutes.
  - Fixed an issue where reading SSE streams would burn CPU in certain edge cases

  ## [1.0.1] - 2020-03-02
  ### Fixed:
  - Client initialization status is now correctly determined by checking the feature store instead of an always in memory value. This is particularly important for usage of daemon mode. In the current implementation daemon mode evaluation always returns the default fallback value because the client never becomes initialized.

  ## [1.0.0] - 2020-02-24
  ### Fixed:
  - Several haddock typos.
  - Added `configSetStoreTTL`, and `configSetUseLdd` to `LaunchDarkly.Server` export list.
  - Added `package.yaml` version constraints.

  ## [0.2.1] - 2020-02-21
  ### Fixed:
  - Added an event delivery retry mechanism. The SDK will now try to deliver events again after one second before dropping them.
  - Added a payload identity header for event delivery to prevent duplication in certain edge cases.
  - Made many fields strict for more deterministic memory usage.

  ## [0.2.0] - 2020-02-10
  ### Added:
  - Added support for utilizing external features stores. See `LaunchDarkly.Server.Store` for details on implementing a store. You can configure usage of a specific store with `configSetStoreBackend`.
  - Added support for Redis as an external feature store. See the `launchdarkly-server-sdk-redis` package for details.
  - Added support for LaunchDarkly daemon mode configurable with `configSetUseLdd`.
  ### Fixed:
  - Incorrect ToJSON instances for flag rules and operators.
  - Updated bucketing logic to fallback to last variation instead of producing an error.
  - Refactored streaming implementation.
  - Stopped sending empty event payloads.


  ## [0.1.1] - 2019-12-10
  ### Fixed
  - Corrected internal HTTP client user agent format.
basic-deps:
  http-client: '>=0.6.4 && <0.8'
  exceptions: '>=0.10.2 && <0.11'
  pcre-light: '>=0.4.0.4 && <0.5'
  bytestring: '>=0.10.8.2 && <0.11'
  lrucache: '>=1.2.0.1 && <1.3'
  bytestring-conversion: '>=0.3.1 && <0.4'
  extra: '>=1.6.17 && <1.8'
  base: '>=4.7 && <5'
  time: '>=1.8.0.2 && <1.11'
  unordered-containers: '>=0.2.10.0 && <0.3'
  text: '>=1.2.3.1 && <1.3'
  uuid: '>=1.3.13 && <1.4'
  retry: '>=0.8.0.1 && <0.9'
  clock: ==0.8.*
  containers: '>=0.6.0.1 && <0.7'
  lens: '>=4.17.1 && <4.20'
  hashtables: '>=1.2.3.4 && <1.3'
  iso8601-time: '>=0.1.5 && <0.2'
  http-client-tls: '>=0.3.5.3 && <0.4'
  semver: '>=0.3.4 && <0.5'
  mtl: '>=2.2.2 && <2.3'
  monad-logger: '>=0.3.30 && <0.4'
  base16-bytestring: '>=0.1.1.6 && <1.1'
  attoparsec: '>=0.13.2.2 && <0.14'
  generic-lens: '>=1.1.0.0 && <2.2'
  random: '>=1.1 && <1.3'
  scientific: '>=0.3.6.2 && <0.4'
  hedis: '>=0.12.7 && <0.15'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.4.4.0 && <1.6'
  vector: '>=0.12.0.3 && <0.13'
  cryptohash: '>=0.11.9 && <0.12'
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 2.0.0
- 2.0.1
- 2.0.2
- 2.1.0
- 2.1.1
- 2.2.0
author: LaunchDarkly
latest: 2.2.0
description-type: markdown
description: |
  # LaunchDarkly Server-side SDK for Haskell

  [![CircleCI](https://circleci.com/gh/launchdarkly/haskell-server-sdk.svg?style=svg)](https://circleci.com/gh/launchdarkly/haskell-server-sdk)

  The LaunchDarkly Server-side SDK for Haskell is designed primarily for use in multi-user systems such as web servers and applications. It follows the server-side LaunchDarkly model for multi-user contexts. It is not intended for use in desktop and embedded systems applications.

  ## LaunchDarkly overview

  [LaunchDarkly](https://www.launchdarkly.com) is a feature management platform that serves over 100 billion feature flags daily to help teams build better software, faster. [Get started](https://docs.launchdarkly.com/docs/getting-started) using LaunchDarkly today!

  [![Twitter Follow](https://img.shields.io/twitter/follow/launchdarkly.svg?style=social&label=Follow&maxAge=2592000)](https://twitter.com/intent/follow?screen_name=launchdarkly)

  ## Getting started

  Download a release archive from the [GitHub Releases](https://github.com/launchdarkly/haskell-server-sdk/releases) for use in your project. Refer to the [SDK documentation](https://docs.launchdarkly.com/docs/haskell-server-sdk-reference#section-getting-started) for complete instructions on getting started with using the SDK.

  ## Learn more

  Check out our [documentation](https://docs.launchdarkly.com) for in-depth instructions on configuring and using LaunchDarkly. You can also head straight to the [complete reference guide for this SDK](https://docs.launchdarkly.com/docs/haskell-server-sdk-reference).

  ## Testing

  We run integration tests for all our SDKs using a centralized test harness. This approach gives us the ability to test for consistency across SDKs, as well as test networking behavior in a long-running application. These tests cover each method in the SDK, and verify that event sending, flag evaluation, stream reconnection, and other aspects of the SDK all behave correctly.

  ## Contributing

  We encourage pull requests and other contributions from the community. Check out our [contributing guidelines](CONTRIBUTING.md) for instructions on how to contribute to this SDK.

  ## About LaunchDarkly

  * LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely. We allow you to easily flag your features and manage them from the LaunchDarkly dashboard.  With LaunchDarkly, you can:
      * Roll out a new feature to a subset of your users (like a group of users who opt-in to a beta tester group), gathering feedback and bug reports from real-world use cases.
      * Gradually roll out a feature to an increasing percentage of users, and track the effect that the feature has on key metrics (for instance, how likely is a user to complete a purchase if they have feature A versus feature B?).
      * Turn off a feature that you realize is causing performance problems in production, without needing to re-deploy, or even restart the application with a changed configuration file.
      * Grant access to certain features based on user attributes, like payment plan (eg: users on the ‘gold’ plan get access to more features than users in the ‘silver’ plan). Disable parts of your application to facilitate maintenance, without taking everything offline.
  * LaunchDarkly provides feature flag SDKs for a wide variety of languages and technologies. Check out [our documentation](https://docs.launchdarkly.com/docs) for a complete list.
  * Explore LaunchDarkly
      * [launchdarkly.com](https://www.launchdarkly.com/ "LaunchDarkly Main Website") for more information
      * [docs.launchdarkly.com](https://docs.launchdarkly.com/  "LaunchDarkly Documentation") for our documentation and SDK reference guides
      * [apidocs.launchdarkly.com](https://apidocs.launchdarkly.com/  "LaunchDarkly API Documentation") for our API documentation
      * [blog.launchdarkly.com](https://blog.launchdarkly.com/  "LaunchDarkly Blog Documentation") for the latest product updates
license-name: Apache-2.0
