all-versions:
- '5.0'
- 5.0.1
- 5.0.3
- '5.1'
- 5.1.0.1
- 5.1.0.2
- 5.1.0.4
- '5.2'
- '5.3'
- 5.3.0.1
- 5.3.0.2
- 5.3.1
- 5.3.1.1
- 5.3.1.2
author: Don Stewart
basic-deps:
  HTTP: '>=4000'
  SafeSemaphore: '>=0.9'
  base: '>=4.4 && <5'
  binary: '>=0.5'
  bytestring: '>=0.9'
  containers: '>=0.4'
  dependent-map: '>=0.2 && <0.5'
  dependent-sum: '>=0.7 && <0.8'
  dependent-sum-template: '>=0.1.0.2 && <0.3'
  directory: '>=1.1'
  edit-distance: '>=0.2'
  exceptions: '>=0.10 && <0.11'
  filepath: '>=1.3'
  haskeline: '>=0.7 && <0.9'
  hslogger: '>=1.2.1'
  lifted-base: '>=0.2'
  monad-control: '>=1.0'
  mtl: '>=2'
  network: '>=2.7 && <3.3'
  network-bsd: '>=2.7 && <2.9'
  parsec: '>=3'
  prim-uniq: '>=0.2 && <0.4'
  random: '>=1.2'
  random-fu: '>=0.3.0.0'
  regex-tdfa: '>=1.1 && <1.4'
  split: '>=0.2'
  syb: '>=0.3'
  template-haskell: '>=2.7'
  time: '>=1.4'
  transformers: '>=0.2'
  transformers-base: '>=0.4'
  unix: '>=2.5'
  utf8-string: '>=0.3'
  zlib: '>=0.5'
changelog: ''
changelog-type: ''
description: "lambdabot ![Build Status](https://travis-ci.org/lambdabot/lambdabot.png)\n===============\n\nLambdabot
  is an IRC bot written over several years by those on Libera's (formerly freenode's)
  #haskell [IRC channel](https://wiki.haskell.org/IRC_channel). It also operates in
  an offline mode as a Haskell development tool, and embedded as an extension to ghci.\n\nPREREQUISITES\n-------------\n\nYou'll
  need GHC >= 8.2.  cabal-install is highly recommended.\n\nExternal executable dependencies:\n\n-
  `aspell` for the \"spell\" spell-checking plugin.  This is not a Haskell program,
  but is available in pretty much all Linux, BSD and Mac OS package managers.\n- `bf`
  for interpreting brainfuck programs.  This is a provided by the \"brainfuck\" package
  on Hackage.\n- `djinn` for the \"djinn\" plugin, which tries to find Haskell functions
  matching arbitrary types.  Available on Hackage.\n- `ghc` and `mueval` for the \"eval\"
  plugin, which evaluates Haskell expressions in chat (when prefixed with \"> \";
  e.g. `> 1 + 1`).  GHC is available from haskell.org (the Haskell Platform is recommended).
  \ Mueval is available on Hackage.\n- `hoogle` for the \"hoogle\" plugin, which provides
  a command for searching Haskell APIs.  Available from Hackage.\n- GNU talk-filters
  (optional) for the \"filters\" plugin.  Available via most package managers, I believe.\n-
  `unlambda` for executing unlambda programs.  Available on Hackage.\n\nSome of these
  dependencies (those with corresponding hackage libraries) will be installed by cabal,
  but not all of them will.  In all cases, cabal does not actually track the executables
  so if they have previously been installed and deleted on your system (without unregistering
  the matching library), you will have to manually reinstall them.\n\nRUNNING\n=======\n\nLambdabot
  can be installed system-wide or per user, but currently the lambdabot binary makes
  certain assumptions about what directory it is being run in & where files it needs
  can be found. (This is the subject of future work.)\n\nYour best bet is currently
  to read the code and see what it does, and decide for yourself whether that's what
  you want.\n\nOFFLINE MODE\n------------\n\n    lambdabot\n\nCONNECTING\n----------\n\n
  \   lambdabot -e 'rc online.rc'\n\nSSL MODE (with stunnel)\n-----------------------\n\nappend
  the following to your stunnel.conf:\n\n    client = yes\n    [irc]\n    accept =
  6667\n    connect = ssl-irc-server.org:6667\n\nand edit online.rc to use localhost
  as server, then restart the stunnel\nserver and restart lambdabot with:\n\n    ./lambdabot
  -e 'rc online.rc'\n\nSCRIPTS\n-------\n\n    The scripts directory contains some
  shell scripts for Vim editor support\n    They are self-explanatory\n\nCONFIGURING\n===========\n\nLambdabot
  uses an extensible configuration system which allows plugins to define their own
  configuration variables.  The lambdabot core system defines several, listed in the
  module `Lambdabot.Config.Core`.  The default `lambdabot` executable provides a command-line
  interface to set some of the most common ones, but currently the only way to set
  others is to define your own executable (which you must currently do anyway to change
  the default set of modules).\n\nWhen doing so, configuration is passed in to the
  `lambdabotMain` function as a list of bindings.  Configuration variables are bound
  using the `:=>` operator (actually the data constructor of the `DSum` type), for
  example:\n\n    ghcBinary :=> \"ghc-8.10.5\"\n\nSo a typical custom lambdabot executable
  might look something like:\n\n    module MyBot where\n    \n    import Lambdabot.Main\n
  \   {- import your plugins here -}\n    \n    main = lambdabotMain myPlugins \n
  \       [ configKey  :=> value\n        , anotherKey :=> anotherValue\n        ]\n\nBUGS\n====\n\nBug
  reports, patches, new modules etc., open issues on GitHub or contact:\n\n        James
  Cook <mokus@deepbondi.net>\n        aka mokus on #haskell\n\nREPOSITORY\n==========\n\n
  \   git clone https://github.com/lambdabot/lambdabot\n\nCONTRIBUTING\n============\n\nSend
  pull requests to mokus0 on github. Add yourself to the AUTHORS\nfile if you haven't
  already.\n"
description-type: markdown
hash: 44437d50aaf5983070154b33c2597622c8f1688fc6b6f9ad3e910ce99cf6b256
homepage: https://wiki.haskell.org/Lambdabot
latest: 5.3.1.2
license-name: LicenseRef-GPL
maintainer: Na√Øm Favier <n@monade.li>
synopsis: Lambdabot core functionality
test-bench-deps: {}
