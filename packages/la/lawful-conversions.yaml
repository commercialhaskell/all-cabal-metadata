all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.2.2
author: Nikita Volkov <nikita.y.volkov@mail.ru>
basic-deps:
  QuickCheck: '>=2.13 && <3'
  base: '>=4.12 && <5'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.6 && <0.8'
  hashable: '>=1 && <2'
  primitive: '>=0.7 && <0.10'
  profunctors: '>=5 && <6'
  text: '>=1.2 && <2.2'
  unordered-containers: '>=0.2 && <0.3'
  uuid-types: '>=1.0 && <1.1'
  vector: '>=0.12 && <0.14'
changelog: ''
changelog-type: markdown
description: |-
  = Summary

  Lawful typeclasses capturing three patterns of bidirectional mapping and forming a layered hierarchy with an ascending strictness of laws.

  1. `IsSome`: Smart constructor

  2. `IsMany`: Lossy conversion

  3. `Is`: Isomorphism or lossless conversion

  = The conversion problem

  Have you ever looked for a @toString@ function? How often do you
  import @Data.Text.Lazy@ only to call its @fromStrict@? How
  about importing @Data.ByteString.Builder@ only to call its
  @toLazyByteString@ and then importing
  @Data.ByteString.Lazy@ only to call its @toStrict@?

  Those all are instances of one pattern. They are conversions between different
  representations of the same information. Codebases that don't attempt to
  abstract over this pattern tend to be sprawling with this type of
  boilerplate. It's noise to the codereader, it's a burden to the
  implementor and the maintainer.

  = Why another conversion library?

  Many libraries exist that approach the conversion problem. However most of
  them provide lawless typeclasses leaving it up to the author of the
  instance to define what makes a proper conversion. This results in
  inconsistencies across instances, their behaviour not being evident to
  the user and no way to check whether an instance is correct.

  This library tackles this problem with a lawful typeclass hierarchy, making it
  evident what any of its instances do and it provides property-tests for you
  to validate your instances.

  = Prior work and acknowledgements

  This library is a direct successor of the "[isomorphism-class](https://hackage.haskell.org/package/isomorphism-class)" library, expanding upon the patterns discovered there. It also shares some ideas with "[control-iso](https://hackage.haskell.org/package/control-iso)" and "[type-iso](https://hackage.haskell.org/package/type-iso)".
description-type: haddock
hash: 23fc4bd62507c14053c670520b29263b1f6fb34dbaa299336a69ec910a3a5115
homepage: https://github.com/nikita-volkov/lawful-conversions
latest: 0.1.2.2
license-name: MIT
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
synopsis: Lawful typeclasses for bidirectional conversion between types
test-bench-deps:
  QuickCheck: '>=2.13 && <3'
  bytestring: '>=0.11.1.0 && <0.13'
  lawful-conversions: '>=0'
  primitive: '>=0.7 && <0.10'
  quickcheck-instances: '>=0.3.32 && <0.4'
  rebase: '>=1.15 && <2'
  tasty: '>=1.2.3 && <2'
  tasty-quickcheck: '>=0.10.1 && <0.11'
  text: '>=1.2 && <3'
