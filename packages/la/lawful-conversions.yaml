all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.2.2
- 0.1.3
- 0.1.4
- 0.1.4.1
- 0.1.5
- 0.1.6
- 0.1.6.1
- 0.1.7
- '0.2'
- 0.2.0.1
- '0.3'
- 0.3.0.1
author: Nikita Volkov <nikita.y.volkov@mail.ru>
basic-deps:
  QuickCheck: '>=2.13 && <3'
  base: '>=4.12 && <5'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.6 && <0.8'
  hashable: '>=1 && <2'
  primitive: '>=0.7 && <0.10'
  profunctors: '>=5 && <6'
  text: '>=1.2 && <2.2'
  time: '>=1.9 && <2'
  unordered-containers: '>=0.2 && <0.3'
  uuid-types: '>=1.0 && <1.1'
  vector: '>=0.12 && <0.14'
changelog: |
  # v0.3

  ## Breaking

  - `from` of `IsMany` renamed to `onfrom`.
  - New `from` function added, which is an alias to `to` with type arguments flipped.

  # v0.2

  ## Breaking

  - Added more tests in `isManyProperties` and an `Arbitrary` constraint on its parameter `a`.
changelog-type: markdown
description: |-
  = Summary

  Lawful typeclasses capturing three patterns of bidirectional mapping and forming a layered hierarchy with an ascending strictness of laws.

  1. Smart constructor

  2. Canonicalization or lossy conversion

  3. Isomorphism or lossless conversion

  = The conversion problem

  Have you ever looked for a @toString@ function? How often do you
  import @Data.Text.Lazy@ only to call its @fromStrict@? How
  about importing @Data.ByteString.Builder@ only to call its
  @toLazyByteString@ and then importing
  @Data.ByteString.Lazy@ only to call its @toStrict@?

  Those all are instances of one pattern. They are conversions between different
  representations of the same information. Codebases that don't attempt to
  abstract over this pattern tend to be sprawling with this type of
  boilerplate. It's noise to the codereader, it's a burden to the
  implementor and the maintainer.

  = Why another conversion library?

  Many libraries exist that approach the conversion problem. However most of
  them provide lawless typeclasses leaving it up to the author of the
  instance to define what makes a proper conversion. This results in
  inconsistencies across instances, their behaviour not being evident to
  the user and no way to check whether an instance is correct.

  This library tackles this problem with a lawful typeclass hierarchy, making it
  evident what any of its instances do and it provides property-tests for you
  to validate your instances.

  The laws and the concepts are based on set and category theories.

  = Prior work and acknowledgements

  This library is an offspring of the "[isomorphism-class](https://hackage.haskell.org/package/isomorphism-class)" library, expanding upon the patterns discovered there. Both libraries are maintained letting their designs compete.

  Some ideas and concepts are also shared with the following libraries:

  - [control-iso](https://hackage.haskell.org/package/control-iso)
  - [type-iso](https://hackage.haskell.org/package/type-iso)
  - [injections](https://hackage.haskell.org/package/injections)
description-type: haddock
hash: 34488cb24ea0277a4d64431da4218099d35b1f1ef92843d908719d4671cfd29d
homepage: https://github.com/nikita-volkov/lawful-conversions
latest: 0.3.0.1
license-name: MIT
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
synopsis: Lawful typeclasses for bidirectional conversion between types
test-bench-deps:
  QuickCheck: '>=2.13 && <3'
  bytestring: '>=0.11.1.0 && <0.13'
  lawful-conversions: '>=0'
  primitive: '>=0.7 && <0.10'
  quickcheck-instances: '>=0.3.32 && <0.4'
  rebase: '>=1.15 && <2'
  tasty: '>=1.2.3 && <2'
  tasty-quickcheck: '>=0.11 && <0.12'
  text: '>=1.2 && <3'
