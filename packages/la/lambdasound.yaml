all-versions:
- 1.0.0
- 1.0.1
- '1.1'
- 1.2.0
- 1.2.1
author: Simon Reitinger
basic-deps:
  ansi-terminal: '>=1.0 && <1.2'
  base: '>=4.17.0.0 && <5'
  bytestring: '>=0.11.4 && <0.13'
  bytestring-to-vector: '>=0.3.0 && <0.4'
  deepseq: '>=1.4.8 && <1.6'
  directory: '>=1.3.7 && <1.4'
  dsp: '>=0.2.5.2 && <0.3'
  filepath: '>=1.4.2 && <1.6'
  hashable: '>=1.4.3 && <1.6'
  hashtables: '>=1.3.1 && <1.5'
  lambdasound: '>=0'
  massiv: '>=1.0.4 && <1.1'
  proteaaudio: '>=0.9.3 && <1.1'
  random: '>=1.2.1 && <1.4'
  text: '>=2.0.2 && <2.2'
  transformers: '>=0.5.6 && <0.7'
  vector: '>=0.13.0 && <0.14'
  wave: '>=0.2.0 && <0.3'
  zlib: '>=0.6.3 && <0.8'
changelog: |
  # Revision history for lambdasound

  ## 1.2.0 -- 2023-12-03

  * Switch to proteaaudio version which uses RTAudio
  * Update to GHC 9.6

  ## 1.1.0 -- 2023-10-16

  * Add an example to showcase `loadSound`
  * Support loading of wav and raw files as `Sound`
  * Fix pathological behavior for repeated cached sounds
  * Add `embedIO` to embed IO into sound generation

  ## 1.0.1 -- 2023-10-13

  * Add `withSampledSound` and `withSampledSoundPulse`
  * Fix incorrect memoization for sequential and parallel sounds

  ## 1.0.0 -- 2023-10-12

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# LambdaSound\n\nA Haskell libary for generating low-level sounds with
  high-level combinators.\n\nYou can create sounds as a list of floats and then manipulate
  them with \ncombinators like `parallel`, `sequentially` or `dropSound`.\n\n## Examples\n\n```haskell\n--
  An infinite 440hz sinus curve\nsound440Hz :: Sound I Pulse\nsound440Hz = sineWave
  440 \n\n-- Three infinite sounds in parallel\ntriad :: Sound I Pulse\ntriad = parallel
  $ fmap (asNote sineWave) [c4, e4, g4]\n\n-- Five sequential 1 second sounds \nascending
  :: Sound T Pulse\nascending = sequentially $\n  fmap (setDuration 1 . asNote sineWave)
  [c4,d4,e4,f4,g4]\n\n-- Cut apart sounds with takeSound and dropSound\nascendingPart
  :: Sound T Pulse\nascendingPart = takeSound 1 $ dropSound 1 ascending\n\n-- Add
  a quiet noise to a sound\nnoisyAscending :: Sound T Pulse\nnoisyAscending = parallel\n
  \ [ setDuration (getDuration ascending) (reduce 3 (noise 42)),\n    ascending\n
  \ ]\n\n-- Raise the frequency of a sound so it has a higher pitch\nascendingAnOctaveHigher
  :: Sound T Pulse\nascendingAnOctaveHigher = raise 8 ascending \n\n-- Reverse the
  samples in a sound\ndescending :: Sound T Pulse\ndescending = reverseSound ascending\n\n--
  Change the tempo the parts of a sound are played at\nspeedupDuringSound :: Sound
  d Pulse -> Sound d Pulse\nspeedupDuringSound = changeTempo $ \\progress -> progress
  ** 1.2\n\n-- Play sound with a sample rate of 44100\nmain :: IO ()\nmain = do\n
  \ let volume = 0.5\n      sampleRate = 44100\n  play sampleRate volume ascending\n```\n\nYou
  can also take a look at `example/Example1.hs` and `example/Example2.hs` for bigger
  examples and play them with:\n\n```haskell\ncabal run example1\ncabal run example2\n```\n\n##
  Feature Overview\n\n- Play sounds with RTAudio\n- Save sounds as WAV\n- Create raw
  audio samples by defining a vector of floats\n- Manipulate the duration of a sound\n-
  Combine sounds via `parallel`, `sequentially` or `zipSound`\n- Change volume\n-
  Modify the pitch\n- Create a sound and then map over its samples\n- Convolve sounds\n-
  IIR filters\n- Cut apart sounds with `takeSound` and `dropSound`\n- Scaling playing
  speed\n- Cache expensive to compute sounds in your XDG-cache directory\n- Loading
  wav files (with some caveats)\n- Embed IO into sounds\n\n## Building\n\n`lambdasound`
  can be built as usual with the `cabal` package manager. \n\n```\ngit clone https://github.com/Simre1/lambdasound\ncabal
  build lambdasound\n```\n\nYou can run the example with:\n\n```haskell\ncabal run
  example1\ncabal run example2\ncabal run example3\n```\n\n## Contributing\n\nFeel
  free to try out this library and add additional functionality.\n"
description-type: markdown
hash: cff4e694f8f46d967ed4b6bd23d1513c7725083026a67c3005369af0c1b2ea97
homepage: https://github.com/Simre1/lambdasound
latest: 1.2.1
license-name: MIT
maintainer: simre4775@gmail.com
synopsis: A libary for generating low-level sounds with high-level combinators
test-bench-deps:
  base: '>=4.17.0.0 && <5'
  falsify: '>=0.1.1 && <0.3'
  lambdasound: '>=0'
  massiv: '>=1.0.4 && <1.1'
  tasty: '>=1.4 && <1.5'
  tasty-bench: '>=0.3.5 && <0.5'
  tasty-hunit: '>=0.10.1 && <0.11'
