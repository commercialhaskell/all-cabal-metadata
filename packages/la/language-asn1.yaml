all-versions:
- 0.0.1
- '0.2'
- 0.2.1
- '0.5'
- '0.6'
author: Dmitry Astapov <dastapov@gmail.com>
basic-deps:
  base: '>=3 && <5'
  language-asn1: '>=0'
  parsec: '>=3.0.0'
  syb: '>=0'
changelog: ''
changelog-type: ''
description: "ASN.1 definitions parser for Haskell.\n\nShould cover a pretty large
  subset of standards \n  ITU-T Rec. X.680 -- X.683 | ISO/IEC 8824-1 -- 8824-4\n\nThis
  is unfinished work, so beware - there be dragons!\n\nTest code could be run like
  this:\n\n  TestASN1Parser LDAP.asn1\n\nConfigure with -ftest to build and install
  test suite (with code\ncoverage analysis)\n\nImplementation status\n=====================\nX.680-0207:
  DONE, medium test coverage. Restricted character strings\n            are done sloppily\nX.681-0207:
  DONE, poor test coverage. \"WITH SYNTAX\" is not implemented.\nX.682-0207: partially
  done, completeness not evaluated\nX.683-0207: partially done, completeness not evaluated\nTests:
  partially done, see comments in Testsuite.hs for status\nTest code coverage:\n 88%
  expressions used (4682/5279)\n 60% boolean coverage (3/5)\n      60% guards (3/5),
  2 always True\n     100% 'if' conditions (0/0)\n     100% qualifiers (0/0)\n 42%
  alternatives used (29/68)\n 33% local declarations used (32/96)\n 28% top-level
  declarations used (271/958)\n\nParser uses information about types when it is immediately
  available.\nFor example, when parsing value assignments (\"var SomeType ::= val\"),\nparser
  will accept only valid values of type \"SomeType\". Such\ntype-dependency is also
  used when parsing \"DEFAULT value\" constructs\nand constraints.\n\nOther than that,
  parser performs no validation/semantical analysis:\n* Values of enumerated/choice/sequences
  are not checked against\n  respective types. \n* References to types are not followed
  to find out the real type\n* Associates sequence types of REAL, EMBEDDED-PDV and
  others are not\n  taken into account\n* Type constraints are not taken into account
  when parsing values\n\nIn cases when no typing context is available, some values
  could not be\ndefinitively attributed to particular type. In this case, parser will\nproduce
  so-called ambiguous values:\n  * SomeNumber Double -- for values that could be either
  Integer or Real\n  * SomeNamedValueList ComponentValueList -- for SequenceRealValue,\n
  \   SequenceValue, SequenceOfValue (named values), SetValue,\n    SetOfValue (named
  values) \n  * SomeValueList [Value] -- for IdentifierListBitString,\n    SequenceOfValue
  (values only), SetOfValue (values only)\n  * SomeIdentifiedValue Identifier -- for
  Integer or Enumerated\n  * SomeOIDLikeValue OID -- for OID or RELATIVE-OID\n\nEven
  when module does not import external types, those values are not\nresolved to their
  more definitive forms. In order to do so, one would\nhave to do a multi-pass parsing,
  or move to GLR parsing with happy or\nuu-parsinglib suite (this is actually under
  consideration).\n\nImplementation notes\n====================\nThere are 24 ASN.1
  types (BuiltinType + ReferencedType in X.680\nterminology), represented by the \"BuiltinType\"
  Haskell datatype.\n\nSome of the ASN1 types have several distinct variants, which
  is why\n\"BuiltinType\" has more than 24 constructors.\n\nParsing of the ASN1 type
  declaration is handled by the parser\n\"theType\".\n\nFor each type there is a single
  value parser, used in contexts when\ntype information is easily available -- for
  example, when parsing\nright side of ValueAssignment one should use parser for values
  of the\ntype of the left-hand side (see \"valueOfType\").\n\nX.68[0-4] have several
  places that go like this \"here is non-terminal\nwith several alternatives. However,
  alternatives 1 and 4 are only\napplicable when ..., and alternatives 2 and 3 - when
  ..., otherwise,\nalternatives 5 and 6 are used\". All those places have to be re-checked\nwith
  care because I am not 100% sure that I have not missed one of\nthose.\n\nSomethimes,
  I decided to postpone implementation of such complex\nrules. Those places are marker
  in source code as TODO.\n\nAll major TODOs are marked with \"TODO\" in source code.\n"
description-type: markdown
hash: dc6a9a452ad196fed2aa2cd889dffc45e19ba0d3b4c9c5cc53ce4f89d5298529
homepage: https://github.com/adept/language-asn1
latest: '0.6'
license-name: BSD-3-Clause
maintainer: Dmitry Astapov <dastapov@gmail.com>
synopsis: Parsing of ASN1 definitions
test-bench-deps:
  HUnit: '>=0'
  base: '>=3 && <5'
  language-asn1: '>=0'
  parsec: '>=3.0.0'
  syb: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
