all-versions:
- 0.1.0.0
author: Daniel Diaz
basic-deps:
  base: '>=4.10.0.0 && <5'
  exceptions: ^>=0.10
changelog: "# Revision history for lazy-bracket\r\n\r\n## 0.1.0.0 -- YYYY-mm-dd\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n"
changelog-type: markdown
description: "# lazy-bracket\r\n\r\nSometimes, when `bracket`ing some piece of code,
  the\r\nresource acquired by the `bracket` won't be actually used:\r\n\r\n- Finding
  a result in an in-memory cache can mean that a database query is\r\navoided, and
  the database connection stays untouched. \r\n\r\n- You might be providing some resource
  (again, think database connection) to every\r\nREST endpoint handler in your API,
  even if some handlers don't make use of the\r\nresource, because treating these
  handlers as special cases would be tedious.\r\n\r\nIn order to be more frugal and
  avoid unnecessary resource acquisitions, one\r\npossible approach is to delay the
  acquisition to \r\n the first time the resource\r\nis actually used, if it's used
  at all. \r\n\r\nWhat's more, certain \"control\" operations\r\non the resource don't
  need to be applied immediately, and instead can wait\r\nuntil the resource is eventually
  acquired, or be omitted altogether if the resource isn't acquired:\r\n\r\n- It's
  wasteful to acquire a file handle just to perform `hSetBuffering`, if we are not
  going to write to the handle.\r\n\r\n- It's wasteful to acquire a database connection
  just to begin a transaction, if we aren't going to perform any query.\r\n\r\nThis
  package provides lazy versions of `bracket` for which resource acquisition\r\nis
  delayed until first use, and control operations are only applied once resources
  are acquired.\r\n\r\n## Links\r\n\r\n- The inspiration:\r\n[LazyConnectionDataSourceProxy](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.html)\r\nform
  Java's Spring Framework.\r\n\r\n  > Proxy for a target DataSource, fetching actual
  JDBC Connections lazily, i.e. not until first creation of a Statement. Connection
  initialization properties like auto-commit mode, transaction isolation and read-only
  mode will be kept and applied to the actual JDBC Connection as soon as an actual
  Connection is fetched (if ever). Consequently, commit and rollback calls will be
  ignored if no Statements have been created.\r\n\r\n  > This DataSource proxy allows
  to avoid fetching JDBC Connections from a pool unless actually necessary. JDBC transaction
  control can happen without fetching a Connection from the pool or communicating
  with the database; this will be done lazily on first creation of a JDBC Statement."
description-type: markdown
hash: be72b2b13fc906180ba12f78d0a2e5fe3a55a702fb4e545be84a3233a908b44a
homepage: ''
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: A bracket with lazy resource allocation.
test-bench-deps:
  base: '>=4.10.0.0 && <5'
  doctest: ^>=0.20
  exceptions: '>=0.10 && <0.11'
  lazy-bracket: '>=0'
  tasty: '>=1.3.1'
  tasty-hunit: '>=0.10.0.2'
