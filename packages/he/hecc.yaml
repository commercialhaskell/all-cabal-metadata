all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- '0.4'
- 0.4.0.1
- 0.4.1.0
- 0.4.1.1
author: Marcel Fourné
basic-deps:
  base: '>=4 && <5'
  cereal: '>=0'
  crypto-api: '>=0'
  hF2: '>=0'
changelog: ''
changelog-type: ''
description: "ECC\n---\nRSA just doesn't cut it anymore for fast public-key crypto.
  Keys are large for reasonable security making it quite slow...\nEnter elliptic curves:
  smaller numbers are necessary and everything is faster. Maybe this library is not
  for embedded system usage, but now people can experiment with ECC for those use-cases
  where some form of RSA would be chosen otherwise.\n\n\nHecc.Base\n-----------\nThis
  is the Haskell-Elliptic-Curve-Cryptography-library, or maybe more appropriately
  atm it is only the basic math for many ECC-algorithms the user of this library may
  wish to implement.\nAs an example the EC-variant of the Diffie-Hellman key-exchange
  is included which shows how the values can be computed with this library (a better
  variant will follow, this is just an example).\nAlso included is a basic speed-benchmarking-file
  (point multiplication) for example on the NIST Curve P-256 (the author wants some
  usage results and performance-numbers... so...).\n\n\nThe API\n-------\n...is not
  stable right now. If anybody wants to use the library in its current state for serious
  cryptographic uses, then by all means contact the author!\n\nThe Code began as a
  prototyped script and has since been polished, but this is best-effort work in progress.\n\n\npmul\n----\nPoint
  multiplication can be done by this library using one of two algorithms: double-and-add
  and mongomery ladder. The latter is the default and is intended to be mostly resistant
  to timing attacks, the former may be faster, depending on the number it multiplies
  by.\n\n\nTiming Attack Resistance\n------------------------\nThe point multiplication
  uses the montgomery ladder algorithm which should be timing attack resistant, but
  when mul by a number in binary form 1000..0 the operation gets strangely fast (us
  instead of ms) and 1000..0001 it is strangely slow (1.5 times), which hints to something
  fishy going on. More research will follow, but sidechannel-resistance is not totally
  out-of-focus. \nTesting has given me the idea that the following-zeroes-case massively
  benefits from branch-prediction and the trailing-one-case throws it totally off
  (will have to check that on other CPUs). \"More natural\" numbers are safer (tested),
  but I wouldn't dare to say that the matter is resolved.\nP.S.: 2^N-1 does not show
  the cache-problem, only long rows of zeroes.\n\n\nPlan\n----\nSome algorithms using
  these primitives will likely follow (ECDH, ECDSA, OpenPGP; also: better versions
  of the primitives).\nSpeed is a good goal, may have some more improvements in the
  future.\nA testing suite is on the list.\nHyperelliptic Curves... maybe.\n\n\nMotivation\n----------\nThis
  is a side-project from which other people may benefit. Due to time-constraints,
  I can't work as much on it as I would like. If you use/like it or want to make some
  criticism heard, please write me an email."
description-type: text
hash: 7d9b43abf61720e3b594bcff1941ab4b67a6e1f2499c4e42661978c665422321
homepage: ''
latest: 0.4.1.1
license-name: BSD-3-Clause
maintainer: Marcel Fourné (mail@marcelfourne.de)
synopsis: Elliptic Curve Cryptography for Haskell
test-bench-deps: {}
