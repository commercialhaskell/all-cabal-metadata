homepage: https://gitlab.com/ngua/heddit
changelog-type: text
hash: f96dc1fc52c8ec1420d5e456609f7ea8ddbab7d3267502547390c7b1a98425c3
test-bench-deps:
  bytestring: '>=0.9'
  unliftio: ^>=0.2
  base: '>=4.13 && <5'
  time: '>=1.9 && <1.13'
  hspec: '>=2.0 && <3.0'
  text: ^>=1.2
  containers: ==0.6.*
  microlens-ghc: ^>=0.4
  heddit: -any
  generic-lens: '>=1.1 && <2.3'
  microlens: ^>=0.4
  aeson: ==1.5.*
maintainer: rory.hayford@protonmail.com
synopsis: Reddit API bindings
changelog: |
  #+TITLE: CHANGELOG

  * 0.2
  + Add ~withReadOnly~ to run actions in a non-user context
  + Added to ~Network.Reddit.Me~ : ~getMyFriend~ to get a single ~Friend~, ~trustUser~ and ~distrustUser~, and ~setMySubredditSettings~
  + Added to ~Network.Reddit.User~ : ~getUserSubreddit~ and ~getUserModerated~
  + ~getMe~ will now throw an exception when called in a non-user context
  + When looking up a banned/shadow-banned user with ~getUser~, a ~UserIsBanned~ exception will now be thrown. This contains a ~BannedUser~ record with some details about the user in question
  + Add the pattern synonym ~DeletedUser~ and boolean test ~isUserDeleted~ to conveniently match "[deleted]" usernames
  + Add ~configureSubredditFlair~
  + The ~author~ field of a ~LiveUpdate~ is now just a ~Username~ instead of ~Maybe Username~. If the JSON value is ~null~, ~DeletedUser~ is used as a default

  * 0.1
  + Add actions for awarding/gilding items and gilding users
  + New module ~Network.Reddit.Types.Award~ exports ~Award~, ~AwardID~, ~Awarding~, and ~AwardingsSummary~ types; ~Trophy~ moved to this module as well
  + Add ~allAwardings~ field to ~Submission~ and ~Comment~
  + Document [[file:./doc/awards.org][a big list of different awards]]
  + Add ~InsufficientCoins~ to ~ErrorMessage~
  + Add ~getCommentByURL~
  + Rename ~JSONError~ to ~POSTError~
  + Remove redundant phantom type parameter from ~ItemOpts~
  + Added several more fields to ~Account~ and ~Subreddit~
  + ~Subredddit~ now supports the special user subreddit; the actions ~getMySubreddit~ and ~getMySubredditSettings~ were added for convenience

  * 0.0.3
  + Fixes to cabal release

  * 0.0.2
  + Add more documentation and example programs
  + Export ~Paginable~ class from ~Reddit.hs~
  + ~firstPage~ now gets the API limit of items (100)

  * 0.0.1
  + Initial release
basic-deps:
  http-client: '>=0.5 && <0.8'
  exceptions: ^>=0.10
  microlens-platform: ==0.4.*
  bytestring: '>=0.9'
  case-insensitive: '>=1.0 && <1.3'
  aeson-casing: ^>=0.2
  unliftio: ^>=0.2
  split: ^>=0.2
  base: '>=4.13 && <5'
  time: '>=1.9 && <1.13'
  unordered-containers: ^>=0.2
  text: ==1.2.*
  http-api-data: ==0.4.*
  filepath: ^>=1.4
  network: ^>=3.1
  conduit: ==1.3.*
  conduit-extra: ^>=1.3
  config-ini: ^>=0.2
  containers: '>=0.6'
  uri-bytestring: ^>=0.3
  microlens-ghc: ^>=0.4
  http-client-tls: ^>=0.3
  mtl: '>=2.2'
  hashable: ^>=1.3
  heddit: -any
  generic-lens: '>=1.1 && <2.3'
  random: '>=1.1'
  scientific: ^>=0.3
  http-conduit: ^>=2.3
  http-types: ^>=0.12
  microlens: ^>=0.4
  aeson: ==1.5.*
all-versions:
- 0.0.1
- 0.0.3
- '0.1'
- '0.2'
author: Rory Tyler Hayford
latest: '0.2'
description-type: text
description: |
  #+TITLE: heddit

  ~heddit~ is a Reddit API client library for Haskell. It aims to be (almost) as comprehensive as libraries such as  [[https://github.com/praw-dev/praw][praw]], from which it takes major inspiration. Although it is not quite there, it does offer access to various parts of the Reddit API, including:
   - comments and submissions
   - user accounts and private messages
   - subreddits, multireddits, wikis, collections, and sub emojis
   - live threads
   - moderation and various mod actions
   - ... and more!

  To start using ~heddit~, visit [[file:./doc/start.org][the (very) quick start guide]] or browse the haddocks in [[file:./src/Network][src/Network]]

  *WARNING*: ~heddit~ is /definitely/ alpha-quality at the moment. Expect bugs, instability, and incomplete documentation for now!

  * Table of Contents
  - [[Brief example]]
  - [[file:./doc/start.org][Quick start]]
  - [[file:./doc/auth.org][Authenticating]]
  - [[Caveats]]
  - [[Examples]]
  - [[Helpful libraries]]
  - [[Tests]]
  - [[License]]

  * Brief example
  We can briefly demonstrate what you can do with ~heddit~ by getting a list of r/haskell's moderators, printing out some information about them, and then finding out which mod has the highest link karma. You can also directly run this example with [[file:./examples/Mods.hs][the mods example program]] that contains the same code.

  #+begin_src haskell
  {-# LANGUAGE OverloadedLabels #-}

  import           Control.Monad.IO.Class    ( MonadIO(liftIO) )

  import           Data.Foldable             ( for_, maximumBy )
  import           Data.Generics.Labels      ()
  import           Data.Generics.Wrapped
  import           Data.Ord                  ( comparing )
  import qualified Data.Text.IO              as T

  import           Lens.Micro.Platform

  import           Network.Reddit
  -- This module is not exported by default from Network.Reddit, as it exports
  -- quite a large number of actions and types
  import           Network.Reddit.Moderation ( getModerators )

  -- This is a small example of how I would use the library. Note that I'm using
  -- @generic-lens@ and @microlens-platform@ for record access. This isn't entirely
  -- necessary, but I decided to hide record selectors by default. This library
  -- defines a lot of record types, and exporting all of the selectors would
  -- steal a lot of top-level names in calling code. If you want to use them,
  -- you can import the relevant modules directly. For this small example, if
  -- you didn't want to use the generic-lens-based approach I'm using, you
  -- would need to import Network.Reddit.Types.Account (Account(..))
  main :: IO ()
  main =
      -- First we'll use @loadClient@ to get a @Client@ by reading the auth
      -- details from an @auth.ini@ file either in the working directory or in
      -- $XDG_DATA_HOME/heddit. @Nothing@ indicates that we'll use the section
      -- marked @[DEFAULT]@ in the ini file.
      --
      -- @runReddit@ takes a @Client@ and a @RedditT@ action to run, which
      -- in this example is @modsInfo@ below
      loadClient Nothing >>= (`runReddit` modsKarmaInfo)
    where
      modsKarmaInfo = do
          mods <-
              -- First, we'll get a @Seq ModAccount@, which is like an
              -- @Account@ but has less information
              (getModerators =<< mkSubredditName "haskell")
              -- So we'll pipe each one into @getUser@ by extracting
              -- the username
              >>= traverse (getUser . (^. #username))
          -- Then, we can print the @linkKarma@ for each account
          -- (I'm using @wrappedTo@ from Data.Generics.Wrapped,
          -- which generically unwraps single-constructor types,
          -- to unwrap the @Username@ and get the @Text@ value)
          for_ mods $ \m -> liftIO . T.putStrLn
              $ mconcat [ m ^. #username & wrappedTo
                        , " has "
                        , m ^. #linkKarma . to show . packed
                        ]

          -- Finally, we can see which mod account has the most
          -- link karma by comparing the sequence of mods using
          -- the @topKarma@ function below
          liftIO . T.putStrLn
              $ mconcat [ "The mod with the most karma is "
                        , topKarma mods ^. #username & wrappedTo
                        ]

      topKarma = maximumBy (comparing (^. #linkKarma))

  #+end_src

  See the [[Examples]] section below for more.

  * Caveats
  There are some major caveats to using ~heddit~ that you may want to consider before deciding to use it, namely:
  - It is currently alpha quality. It needs more tests and users to work out some of the bugs that are assuredly lurking deep within. The exposed API is a little weird and may be difficult to work with.
  - The Reddit API seems overwhemlingly geared towards dynamic representations of data. This can cause obvious issues when decoding its JSON responses in Haskell. If an exception is thrown when trying to hit an endpoint, please let me know by opening an issue or PR!
  - ~heddit~ only supports authenticating via OAuth (see [[file:./doc/auth.org][Authenticating]]) and cannot access Reddit's old JSON API. This means that it is not possible to create a truly anonymous client. Instead, you must register all applications, even those without a user context.
  - At the moment, it doesn't build on GHC < 8.8.3, so if you are working with an older GHC version, ~heddit~ will not be suitable.
  - Currently, there is no capability to provide captcha IDs to solve captchas.

  * Examples
  Here are some executable examples using different features from ~heddit~ that hopefully illustrate how to use the library and accomplish different tasks. At the moment, the available example programs are:
  - The [[file:./examples/Mods.hs][mods example]] shown above
  - An [[file:./examples/Paginating.hs][example]] showing how to use ~Listing t a~ and ~Paginator t a~ to paginate through data returned from Reddit (or avoid it altogether).
  - Infinitely [[file:./examples/Streaming.hs][streaming]] paginable things as they are created
  - Getting an initial [[file:./examples/RefreshTokens.hs][refresh token]]

  All of the example programs live in the [[file:./examples][examples]] directory and can be run using, for example, ~cabal run exes:<name>~

  * Tests
  ~heddit~ has two test suites: a simple test of JSON decoding of API responses that runs by default, and the ~io-tests~ that are disabled by default behind a flag of the same name. If you wish to run the ~io-tests~, be aware that these make real requests against Reddit's API endpoints using the authenticated account. After enabling the tests, make sure to create an ~auth.ini~ and ~profile.json~ in the working directory or in ~$XDG_CONFIG_HOME/heddit~. See the ~io-tests~ modules for more info.

  * Helpful libraries
  There are some other libraries that you may wish to use with ~heddit~:
  - ~containers~, for ~Seq~
  - ~conduit~, if you wish to [[file:./src/Network/Reddit.hs::stream][stream]] Reddit actions
  - ~exceptions~, for ~MonadThrow~ and ~MonadCatch~
  - Possibly ~unliftio~, for the ~MonadUnliftIO~ constraint, although this is also exported by ~conduit~. This is really only needed for initializing a ~Client~, which you could just do at the top-level in IO anyway
  - ~generic-lens~ if you want to use the lens labels as demonstrated above. Also provides several other helpful lenses and functions for dealing with data generically. Note that the ~generic-lens~ labels are not used internally by ~heddit~, so it is safe to use with other libraries that rely on ~-XOverloadedLabels~
  - ~microlens-platform~, ~lens~, or another lens-compatible lib to use with ~generic-lens~, should you choose to use the latter

  * License
  ~heddit~ is distributed under a three-clause BSD license. See [[file:LICENSE][the license]] for details. Parts of this library are directly inspired by and/or adapted from ~praw~, which is distributed under a simplified BSD two-clause license. See [[https://github.com/praw-dev/praw/blob/master/LICENSE.txt]]
license-name: BSD-3-Clause
