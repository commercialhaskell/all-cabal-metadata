homepage: https://github.com/pepeiborra/hexml-lens#readme
changelog-type: ''
hash: 9372dab292fb364845c88bf557e528fc801cc9d695ba4c0ec72eba2dfaa012c3
test-bench-deps:
  bytestring: -any
  hexml-lens: -any
  base: '>=4.7 && <5'
  hspec: -any
  text: -any
  foundation: -any
  wreq: -any
  hexml: -any
  lens: -any
  contravariant: -any
  profunctors: -any
maintainer: pepeiborra@gmail.com
synopsis: Lenses for the hexml package
changelog: ''
basic-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  text: -any
  foundation: -any
  hexml: -any
  lens: -any
  contravariant: -any
  profunctors: -any
all-versions:
- 0.1.0.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
author: Jose Iborra
latest: 0.2.2
description-type: markdown
description: |
  # hexml-lens
  [![Hackage](https://img.shields.io/hackage/v/hexml-lens.svg)](https://hackage.haskell.org/package/hexml-lens)
  [![Stackage Nightly](http://stackage.org/package/hexml-lens/badge/nightly)](http://stackage.org/nightly/package/hexml-lens)
  [![GitHub CI](https://github.com/pepeiborra/hexml-lens/workflows/CI/badge.svg)](https://github.com/pepeiborra/hexml-lens/actions)

  Folds and getters for the Hexml `Node` type.
  ```haskell
  {-# LANGUAGE RecordWildCards #-}
  import Control.Lens hiding (children)
  import qualified Data.ByteString as B
  import qualified Data.ByteString.Lazy.Char8 as LB
  import Network.Wreq
  import Text.XML.Hexml
  import Text.XML.Hexml.Lens

  url :: [Char]
  url = "http://aiweb.cs.washington.edu/research/projects/xmltk/xmldata/data/courses/reed.xml"

  data Place s = Place { building :: s , room :: Int}
    deriving Show

  data Course s = Course { title, instructor :: s , place :: Place s}
    deriving Show

  main :: IO ()
  main = do
    r <- get url
    let stripDocType = LB.unlines . drop 2 . LB.lines
    let courses = take 10 $ r ^.. responseBody . to stripDocType . _XML . _children . folded . courseF
    print courses

  courseF :: Fold Node (Course B.ByteString)
  courseF = runFold $ do
    title <- Fold $ node "title" . textContents
    instructor <- Fold $ node "instructor" . textContents
    place <- Fold $ node "place" . placeF
    return $ Course{..}

  placeF :: Fold Node (Place B.ByteString)
  placeF = runFold $ do
    building <- Fold $ node "building" . textContents
    room     <- Fold $ node "room" . textContents . _Show
    return (Place building room)
  ```
license-name: BSD-3-Clause
