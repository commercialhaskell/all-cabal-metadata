all-versions:
- 0.0.0
- 0.1.0
- 0.2.0
- 0.3.0
author: Marco Zocca
basic-deps:
  base: '>4.9 && <5'
  boxes: '>=0.1.4'
  containers: '>=0.5.7.1'
  exceptions: '>=0.8.3'
  generics-sop: '>0.3.0'
  hashable: '>=1.2.6.1'
  heidi: '>=0'
  microlens: '>=0.4.8'
  microlens-th: '>=0.4.1'
  scientific: '>=0.3.5.1'
  text: '>=1.2.2.2'
  unordered-containers: '>0.2.8'
  vector: '>=0.12.0.1'
changelog: "# Change log\n\n0.3.0\n- incorporate generic-trie\n\n0.0.0 \n- release
  candidate (Oct 7, 2020)\n"
changelog-type: markdown
description: "# [heidi][]\n\n[![Build Status](https://travis-ci.com/ocramz/heidi.png?branch=master)](https://travis-ci.com/ocramz/heidi?branch=master)\n\n\n[heidi]:
  https://github.com/ocramz/heidi\n\n\n![alt text](https://github.com/ocramz/heidi/raw/master/img/heidi.jpg
  \"Heidi\")\n\n`heidi` : tidy data in Haskell\n\nThis library aims to bridge the
  gap between Haskell's precise but inflexible type discipline and the dynamic world
  of dataframes.\n\nMore specifically, `heidi` aims to make it easy to analyze collections
  of Haskell values; users `encode` their data (lists, maps and so on) into dataframes,
  and use functions provided by `heidi` for manipulation.\n\nIf this sounds interesting,
  read on!\n\n\n## Introduction\n\nA \"dataframe\" is conceptually a table of data
  that can be manipulated with a computer program; it potentially contains numbers,
  text and anything else that can be rendered as text.\n\nIn scientific practice,
  a \"tidy\" dataframe is a specific way of arranging the data in which each row represents
  a distinct observation (\"data point\") and each column a \"feature\" (i.e. some
  observable aspect) of the data. \n\nNowadays, data science is a very established
  practice and many software libraries offer excellent functionality for working with
  such dataframes. `R` has `tidyverse` , Python has `pandas`, and so on.\n\nWhat about
  Haskell?\n\nThe `Frames` [1] library offers rigorous type safety and good runtime
  performance, at the cost of some setup overhead. `Heidi`'s  main design goal instead
  is to have minimal overhead and possibly very low cognitive load to data science
  practitioners, at the cost of some type safety. \n\n## Quickstart\n\nThe following
  snippet demonstrates the minimal setup necessary to use `heidi` :\n\n```\n{-# language
  DeriveGeneric #-}   (1)\nmodule MyDataScienceTask where\nimport GHC.Generics    (2)\n\nimport
  Heidi\n\ndata Sales = Sales { item :: String, amount :: Int } deriving (Eq, Show,
  Generic)     (3)\ninstance Heidi Sales     (4)\n```\n\nAll datatypes that are meant
  to be used within dataframes must be in the `Heidi` typeclass, which in turn requires
  a `Generic` instance.\n\nThe `DeriveGeneric` language extension (1) enables the
  compiler to automatically write the correct incantations (3), as long as the user
  also imports the `GHC.Generics` module (2) from `base`.\n\nThe automatic dataframe
  encoding mechanism is made possible by the empty `Heidi` instance (4).\n\nIt is
  also convenient to use `DeriveAnyClass` to avoid writing the empty typeclass instance
  :\n\n```\n{-# language DeriveGeneric, DeriveAnyClass #-}\ndata Foo = Foo Int String
  deriving (Generic, Heidi)\n```\n\n\n## Rationale\n\n\nOut of the box, Haskell offers
  record types, e.g.\n\n```\ndata Row a = MkRow { column1 :: Int, column2 :: String
  } deriving (Eq, Show)\n```\n\nwhich is handy because in one declaration you get
  a constructor method `MkRow` and accessors `column1`, `column2`, so a simple \"data
  table\" could be constructed as a list of such records, simply enough.\n\nOne thing
  that the language doesn't natively support is lookup by accessor name. For example
  `column1 :: Row -> Int` can only access a value of type `Row`, since the `column1`
  name is globally unique (for a discussion on modern techniques to deal with this,
  see the Advanced section below).\n\nIn addition to lookup, many data tasks require
  relational operations across pairs of data tables; algorithmically, these require
  lookups both across rows and columns, and there's nothing in Haskell's implementation
  of records that supports this.\n\nThere are a number of additional tasks that are
  routine in data analysis such as plotting, rendering the dataset to various tabular
  formats (CSV, database ...), and this library aims to support those too with a convenient
  syntax.\n\n\n## Advanced\n\n\nHaskell offers a number of advanced workarounds for
  manipulating types, such as generic traversals, lookups, etc. A brief list of keywords
  is given in the following, for those inclined to dive into the rabbit hole.\n\n###
  Row polymorphism\n\nElm, Purescript etc.\n\n### OverloadedRecordFields\n\n[1]\n\n###
  Row types\n\nAs you might know, the \"row types\" problem is well understood and
  has been explored in practice; discussing the various tradeoffs between approaches
  would be lengthy and quite technical (and your humble author is not too qualified
  to do full justice to the topic either).\n\nIn Haskell , the Frames [2] library
  and related ecosystem stands out as a full-featured dataframe implementation that
  does not compromise on type safety. \n\nHeidi instead offers generic transformations
  from the source datatypes to uni-typed values (conceptually, each row is a `Map
  String T` where `data T = TInt Int | TChar Char` etc.), a domain in which it's convenient
  to perform lookups and similar operations.\n\nExploring further : vinyl [3], heterogeneous
  lists, sums-of-products ...\n\n\n\n\n## References\n\n[1] OverloadedRecordFields
  : https://downloads.haskell.org/ghc/latest/docs/html/users_guide/glasgow_exts.html#record-field-selector-polymorphism\n\n[2]
  Frames : https://hackage.haskell.org/package/Frames\n\n[3] vinyl : https://hackage.haskell.org/package/vinyl
  \n\n[4] generics-sop : https://hackage.haskell.org/package/generics-sop\n"
description-type: markdown
hash: e7ff4820273715b8b5969619b992d4a3680db3844d73e8c26d61067aa03e221f
homepage: https://github.com/ocramz/heidi#readme
latest: 0.3.0
license-name: MIT
maintainer: Marco Zocca
synopsis: Tidy data in Haskell
test-bench-deps:
  base: '>=0'
  criterion: '>=0'
  heidi: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  weigh: '>=0'
