all-versions:
- '0.0'
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
author: Christoph Bauer <ich@christoph-bauer.net>
basic-deps:
  HDBC: '>=0'
  HDBC-postgresql: '>=0'
  base: '>=4 && <5'
  filepath: '>=0'
  haskell-src: '>=0'
  hssqlppp: '>=0.1.0 && <0.2.0'
  parsec: '>=0'
changelog: ''
changelog-type: ''
description: "hesql - Haskell's embedded SQL\n\nhesql is a preprocessor. It reads
  a file (module) with\nSQL-like functions and translates it to Haskell source code.\nIt
  uses HDBC.\n\nThe result of a select statement is automatically converted\nto list
  of tuples. Also fromSql/toSql conversion are done.\n\nThe current implementation
  is just a proof of concept with narrow limits.\nIt sticks to a subset of PostgreSQL's
  variant of SQL. Don't expect too\nmuch, but please send me patches to improve hesql.\n\nAn
  example is found under example/Account.hesql. It works with this \ntables:\n\n\nCREATE
  TABLE Account\n  (AccountID SERIAL PRIMARY KEY,\n   Login TEXT NOT NULL,\n   Password
  TEXT NOT NULL,\n   RealName TEXT,\n   Email TEXT  NOT NULL,\n   LoggedIn BOOL DEFAULT
  FALSE NOT NULL,\n   Locked BOOL DEFAULT FALSE NOT NULL,\n   LastLogout TIMESTAMP,\n
  \  LastRequest TimeStamp DEFAULT 'now' NOT NULL,\n   Validated BOOL DEFAULT FALSE
  NOT NULL\n );\n\nCREATE UNIQUE INDEX AccountIdx ON Account(Lower(Login));\n\n\nA
  select query may return a list or just a maybe type. If you\njust want the maybe
  type, use\n   \n   maybe select a from t where e;\n\n\nIt is planned, that a prefix
  \"lazy\" should work in the same way. Then with\n\"lazy\", the lazy HBDC-fetchAllRows
  are used.\n   \n\nFor example:\n\nverifyLogin login password =\n  maybe select Accountid,
  Login, RealName, Email from Account\n     where (Password is null or Password  =
  md5(password)) and Lower(Login) = login\n           and not Locked;\n\nwill generate
  code for a Haskell-function with the type:\n\nverifyLogin :: Stmts -> String ->
  String -> IO (Maybe (Int, String, String, String))\n\n(To be honest, the type is
  simplified by me. hesql won't write any type annotation.)\n\nEach module will have
  a function\n\ninit :: Connection -> IO Stmts\n\nit prepares each statement for the
  later use.\n\n\nTODO\n  - add a separate TODO file\n  - parse group by, having,
  column/table aliases, subselects\n  - verify table and column names\n  - resolve
  column names in SELECT * FROM ...\n  - fix command line argument parsing\n  - improve
  documentation\n  - make backup of old .hs-File\n\n\nINSTALL\n  $ make\n  $ sudo
  make install\n\n\nUSAGE\n  $ createdb account\n  $ psql account\n\n  # create the
  account table from above\n\n  $ cd example/\n  $ hesql Account.hesql dbname=account\n
  \ $ less Account.hs\n\n\nDEPENDENCIES:\n\n  hesql depends on \n    - ghc\n    -
  postgresql\n    - HDBC with PostgreSQL backend\n    - haskell-src (to print the
  haskell code)\n    - parsec (for the SQL parser)\n    - do we have to call finish
  on Maybe-Statements?\n  \n"
description-type: text
hash: c2b48e8dd0465bffe3af44ab9c5fcf5b5b4cdc14ec8c3f38bcee980c12da371a
homepage: ''
latest: '0.8'
license-name: LicenseRef-GPL
maintainer: Christoph Bauer <ich@christoph-bauer.net>
synopsis: Haskell's embedded SQL
test-bench-deps: {}
