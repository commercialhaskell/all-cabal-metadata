all-versions:
- 0.1.0.0
author: Yamada Ryo <ymdfield@outlook.jp>
basic-deps:
  base: '>=4.16.4.0 && <4.17'
  classy-effects: '>=0.1 && <0.2'
  extensible: ^>=0.9
  extra: ^>=1.7.14
  ghc-typelits-knownnat: ^>=0.7
  heftia: '>=0.1 && <0.2'
  heftia-effects: '>=0'
  loglevel: ^>=0.1.0
  mtl: ^>=2.2.2
  text: ^>=1.2.5
  time: ^>=1.11.1
  transformers: ^>=0.5.6
changelog: |
  # Revision history for heftia-effects

  ## 0.1.0.0 -- 2023-09-18

  * Initial public release.
changelog-type: markdown
description: |
  # Heftia
  Heftia, a composition of hefty trees and co-Yoneda, is a higher-order effects
  version of Freer.

  The paper
  * Casper Bach Poulsen and Cas van der Rest. 2023. Hefty Algebras: Modular
      Elaboration of Higher-Order Algebraic Effects. Proc. ACM Program. Lang. 7,
      POPL, Article 62 (January 2023), 31 pages. <https://doi.org/10.1145/3571255>

  inspires this library.
  Hefty trees, proposed by the above paper, are extensions of free monads,
  allowing for a straightforward treatment of higher-order effects.

  This library offers Heftia monads and Freer monads, encoded into data
  types in several ways to enable tuning in pursuit of high performance.

  Additionally, it's designed to operate as a handler system based
  on [`classy-effects`](https://github.com/sayo-hs/classy-effects), which aims to
  standardize and unify the definitions of effects in Haskell.

  Compared to existing Effect System libraries in Haskell that handle higher-order effects, this
  library's approach allows for a more effortless and flexible handling of higher-order effects. Here
  are some examples:

  * Two interpretations of the `censor` effect for Writer

      Let's consider the following Writer effectful program:

      ```hs
      hello :: (Writer String m, Monad m) => m ()
      hello = do
          tell "Hello"
          tell " world!"

      censorHello :: (Writer String m, Monad m) => m ()
      censorHello =
          censor
              (\s -> if s == "Hello" then "Goodbye" else s)
              hello
      ```

      For `censorHello`, should the final written string be `"Goodbye world!"`? Or should it be `"Hello world!"`?
      With Heftia, you can freely choose either behavior depending on which higher-order effect interpreter (which we call an elaborator) you use.

      ```hs
      main :: IO ()
      main = runFreerEffects do
          (s :: String, _) <-
              interpretTell
                  . runElaborate' (elaborateWriterT @String)
                  $ censorHello

          (sTransactional :: String, _) <-
              interpretTell
                  . runElaborate' (elaborateWriterTransactionalT @String)
                  $ censorHello

          sendIns $ putStrLn $ "Normal: " <> s
          sendIns $ putStrLn $ "Transactional: " <> sTransactional
      ```

      Using the `elaborateWriterT` elaborator, you'll get "Goodbye world!", whereas with the `elaborateWriterTransactionalT` elaborator, you'll get "Hello world!".
      For more details, please refer to the [complete code](https://github.com/sayo-hs/heftia/blob/master/heftia-effects/Example/Writer/Main.hs) and the [implementation of the elaborator](https://github.com/sayo-hs/heftia/blob/master/heftia-effects/src/Control/Effect/Handler/Heftia/Writer.hs).

  * Extracting Multi-shot Delimited Continuations

      In handling higher-order effects, it's easy to work with multi-shot delimited continuations.
      This enables an almost complete emulation of "Algebraic Effects and Handlers".
      For more details, please refer to
      [Example 3 - Delimited Continuation](<https://github.com/sayo-hs/heftia/blob/master/docs/examples/03%20Delimited%20Continuation.md>) .

  Furthermore, the structure of Heftia is theoretically straightforward, with ad-hoc elements being
  eliminated.

  Heftia is the second objective of the [Sayo Project](https://github.com/sayo-hs).

  ## Documentation
  Examples with explanations can be found in the [docs/examples/](https://github.com/sayo-hs/heftia/tree/master/docs/examples) directory.

  ## Future Plans
  * Benchmarking
  * Enriching the documentation
  * Completing missing definitions such as
      * the Heftia monad transformer encoded in tree structure
      * handlers for the `Accum`, `Coroutine`, `Fresh`, `Input`, `Output` effect classes

      and others.

  ## License
  The license is MPL 2.0. Please refer to the [NOTICE](https://github.com/sayo-hs/heftia/blob/master/NOTICE).
  Additionally, this README.md and the documents under the `docs`/`docs-ja` directory are licensed
  under CC BY-SA 4.0.

  ## Your contributions are welcome!
  Please see [CONTRIBUTING.md](https://github.com/sayo-hs/heftia/blob/master/CONTRIBUTING.md).
description-type: markdown
hash: c8fd2af72c8dae6d75409499e1bc99ecd48a8d24b46ea0ec11e740b11b7487b3
homepage: ''
latest: 0.1.0.0
license-name: MPL-2.0
maintainer: Yamada Ryo <ymdfield@outlook.jp>
synopsis: Handlers for standard effects using Heftia.
test-bench-deps:
  base: '>=0'
  classy-effects: '>=0'
  heftia: '>=0'
  heftia-effects: '>=0'
  tasty: ^>=1.4
  tasty-hunit: ^>=0.10
