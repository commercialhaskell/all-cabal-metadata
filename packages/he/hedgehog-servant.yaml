all-versions:
- 0.0.0.1
- 0.0.1.1
author: Felix Mulder
basic-deps:
  base: '>=4.9 && <5'
  bytestring: '>=0.10 && <0.11'
  case-insensitive: '>=1.2 && <1.3'
  hedgehog: '>=0.6 && <1.1'
  http-client: '>=0.5.14 && <0.7'
  http-media: '>=0.8 && <0.9'
  http-types: '>=0.12 && <0.13'
  servant: '>=0.16 && <0.19'
  servant-client: '>=0.16 && <0.19'
  servant-server: '>=0.16 && <0.19'
  string-conversions: '>=0.4 && <0.5'
  text: '>=1.2 && <1.3'
changelog: |
  # Revision history for hedgehog-servant

  ## 0.0.0.1 -- 2019-11-04

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  Hedgehog Servant
  ================
  ![](https://github.com/felixmulder/hedgehog-servant/workflows/Haskell%20CI/badge.svg)
  ![](https://img.shields.io/badge/Hackage-v0.0.0.1-blue.svg)

  Hedgehog servant will eat all your servant bugs.

  Basic Usage
  -----------
  Define your servant API endpoints and automatically derive request generators
  for them!

  This is accomplished using the `genRequest` and the heterogeneous list, called
  `GList`, that contains all the generators needed for your API.

  So, what do we actually need to do?

  1. Define our API (below `SimplestApi`).
  2. Define generators for each element that gets captured in the request.
  3. Call the function `genRequest` with a proxy for the API (`Proxy
     @SimplestApi`) and all generators needed in a generator list (`GList`)!

  In code this looks like:

  ```haskell
  -- POST /cats
  type SimplestApi =
    "my" :> "cats" :> ReqBody '[JSON] Cat :> Post '[JSON] ()

  -- Generate a request to the Cat API from a base URL
  catRequestGen :: BaseUrl -> Gen Request
  catRequestGen baseUrl =
    genRequest (Proxy @SimplestApi) (genCat :*: GNil) <&>
      \makeReq -> makeReq baseUrl
  ```

  We construct generator lists with `element1 :*: element2 :*: ... elementN :*: GNil`,
  where `GNil` denotes the end of the generator list. The `genRequest` function
  will derive a request from the generators in the list. This includes request
  bodies, headers and query parameters.

  Note: since the generator list may contain many generators for a specific type,
  the first one will be chosen. This means that for types that may collide (e.g.
  common types like `String`,`Integer` etc), you should define newtype wrappers.
description-type: markdown
hash: cc8bd20af7954523ac6065c968ab38ee4e972ab0f13358bdc4d7b59dfab4232c
homepage: ''
latest: 0.0.1.1
license-name: BSD-3-Clause
maintainer: felix.mulder@gmail.com
synopsis: Hedgehog property testing for Servant APIs
test-bench-deps:
  aeson: '>=1.4 && <1.5'
  base: '>=4.9 && <5'
  bytestring: '>=0.10 && <0.11'
  case-insensitive: '>=1.2 && <1.3'
  hedgehog: '>=0.6 && <1.1'
  hedgehog-servant: '>=0'
  http-client: '>=0.5.14 && <0.7'
  http-media: '>=0.8 && <0.9'
  http-types: '>=0.12 && <0.13'
  servant: '>=0.16 && <0.19'
  servant-client: '>=0.16 && <0.19'
  servant-server: '>=0.16 && <0.19'
  string-conversions: '>=0.4 && <0.5'
  text: '>=1.2 && <1.3'
