all-versions:
- 0.1.0
- 0.2.0
- 0.2.2
- 0.3.0
- 0.3.1
author: Scott Murphy <scottmurphy09@gmail.com>
basic-deps:
  base: '>=4 && <5'
  time: '>=0'
changelog: |
  # Revision history for kerf-time
  ## 0.3.1
  * fix `time` dependency to add ParseTime for 1.10 + still backwards compatabile
  ## 0.3.0
  * upgrade to ghc 8.2.2, lts-11.7

  ## 0.2.2
  * Added HerfedTime constraint to herfShow
  * Restricted exports in HerfTime module
  * exported Time through both HerfTime module and ZonedTime module (to cut down on necessary exports)

  ## 0.2.1
  Started using the changelog

  ## 0.2.0
  Fixed module exposed problem
  ## 0.1.0  -- Deprecated

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# herf-time\n\n[![Circle CI](https://circleci.com/gh/smurphy8/herf-time.svg?style=svg)](https://circleci.com/gh/smurphy8/herf-time)\n\nHaskell's
  time library is nice but I wanted to be able to do some of the operations in\nthe
  [Kerf](https://github.com/kevinlawler/kerf) programming language.\n\n\nBy creating
  a set of type classes: **HerfedTime** , **ToUTCHerfTime**, **FromUTCHerfTime**\nI
  think there is a nice mechanism to do just that.\n\nany instance of these 3 classes
  should satisfy the law:\n\n* **Path Independant** on all addtion \n* ``` addX a
  X  == unherf (addX (herf a) X )```\n  * where: ``` addX := {addYear , addMonth,
  addWeek ...}```\n\n\n# Tutorial \n[Herf Tutorial](http://blog.plowtech.net/posts/herf-time.html)\n\n##
  Usage\n\n\n### Add Intervals\n``` haskell\n>>> date 2016 01 01 `add` hour 3 `add`
  week 16 `add` month 3 :: UTCTime\nUTCHerfTime 2016-07-22 03:00:00 UTC\n```\n\n###
  Subtract Intervals\n``` haskell\n\n>>> date 2016 01 01 `add` hour (-3) `add` week
  (-16) `add` month (-3) :: UTCTime\nUTCHerfTime 2015-06-10 21:00:00 UTC\n```\n\n###
  Represent Time in Multiple Ways\n``` haskell\n\n>>> dateTime 2016 01 01 01 23 01
  `add` hour 3 `add` week 16 `add` month 3 :: UTCTime\nUTCHerfTime 2016-07-22 04:23:01
  UTC\n>>> dateTimePico 2016 01 01 01 23 01 01 `add` hour 3 `add` week 16 `add` month
  3 :: UTCTime\nUTCHerfTime 2016-07-22 04:23:01.000000000001 UTC\n```\n### Get Times
  in any HerfedTime format  (UTC for example)\n``` haskell\n>>> date 2016 01 01 `add`
  hour 3 `add` week 16 `add` month 3   :: UTCTime\n2016-07-22 03:00:00 UTC\n```\n\n###
  Use HerfTime.ZonedTime to convert easily between times\n(reherf $ ( dateTime 2016
  01 01 01 01 01 :: HerfZonedTime \"CST\")) :: HerfZonedTime \"PST\"\n2015-12-31T23:01:01:PST\n\n\n###
  Some fancier examples (Using HerfTime.ZonedTime)\n\n\n``` haskell\nλ> zt <- getZonedTime\nλ>
  herfShow zt\n\"2016-01-21T11:29:05:CST\"\nλ> reherfz zt :: HerfZonedTime \"PST\"\n2016-01-21T09:29:05:PST\nλ>
  reherfz zt :: HerfZonedTime \"+0600\"\n2016-01-21T23:29:05:+0600\nλ> reherfz zt
  :: HerfZonedTime \"CST\"\n2016-01-21T11:29:05:CST\nλ> (reherfz zt) `add` month 2
  :: HerfZonedTime \"CST\"\n2016-03-21T11:29:05:CST\n\n-- What time will it be exactly
  3 months from now in California?\nλ> (reherfz zt) `add` month 2 :: HerfZonedTime
  \"PST\"\n2016-03-21T09:29:05:PST\n```\n\n\n\n\n```\ncabal configure --enable-tests
  && cabal build && cabal test\n```\n\n\n"
description-type: markdown
hash: 2f4651f463f12c91e2e8ac2b10409f367b6e857a6b15336bcd6cb1c174887508
homepage: ''
latest: 0.3.1
license-name: BSD-3-Clause
maintainer: Scott Murphy <scottmurphy09@gmail.com>
synopsis: haskell time manipulation in a 'kerf like' style.
test-bench-deps:
  base: '>=0'
  doctest: '>=0'
  herf-time: '>=0'
