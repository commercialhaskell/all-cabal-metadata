all-versions:
- 0.0.0.0
author: Zankoku Okuno
basic-deps:
  base: '>=4.6 && <4.7'
  data-ref: '>=0'
  either: '>=4.1 && <4.2'
  mtl: '>=2.1 && <2.2'
  parsec: '>=3.1 && <3.2'
  transformers: '>=0.3 && <0.4'
changelog: ''
changelog-type: ''
description: |-
  H-expressions are a variant of S-expressions. Where s-expressions are atoms or nodes grouped into lists of length at least one, h-expressions, or hexprs, are grouped into lists of length two. This may seem very trivial, but this restriction makes it possible to treat parenthesis in the concrete syntax of hexprs merely as a manual override to the basic precedence rules, just as in mathematics. In particular, a suitable hexpr interpreter is capable of understanding eta-converted terms, which is quite unrealistic, if not impossible in an sexpr-based syntax. Thankfully, hexprs retain all the advantages of sexprs with respect to homoiconic syntax.
  Hexprs on their own are fairly unhelpful, so we also have also included a configurable hexpr parser based on parsec. I wasn't long before mission creep set in, and a series of tools were produced to aid in creating a frontend for hexpr-based languages. See the package 'hexpr-examples' for some examples of the framework in action.
  I think H could stand for many things: the greek letter eta, hierarchical, happy, next in the alphabet after f, or perhaps hexpr == hexpr-expression. Where it comes from is unimportant, what is important is that we can easily the next generation of homoiconic languages.
description-type: haddock
hash: 82017c93784a727f97ea31b81e0c0832da87bf41cd05997094f109d128d48309
homepage: https://github.com/Zankoku-Okuno/hexpr/
latest: 0.0.0.0
license-name: BSD-3-Clause
maintainer: zankoku.okuno@gmail.com
synopsis: A framework for symbolic, homoiconic languages.
test-bench-deps: {}
