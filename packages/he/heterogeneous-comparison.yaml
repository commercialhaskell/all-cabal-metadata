all-versions:
- 0.1.0.0
author: L. S. Leary
basic-deps:
  base: '>=4.18 && <5'
  deepseq: '>=1.1 && <1.6'
  hashable: '>=1.1.1 && <1.6'
  ord-axiomata: '>=0.1 && <0.2'
  primitive: '>=0.6.2 && <0.10'
  stm: '>=2.4 && <2.6'
changelog: |
  # Revision history for *heterogeneous-comparison*

  ## 0.1.0.0 â€” *August, 2025*

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # *heterogeneous-comparison*

  There are times when values need to be tested for equality or compared for ordering, even if they aren't statically known to be of equivalent types.
  Such a test, if successful, may allow that knowledge to be recovered.

  ## Prior Art

  *base* (on singletons):
   * `TestCoercion f` $\approx$ `(HetEq  f, Strength f ~ Representational)`
   * `TestEquality f` $\approx$ `(HetEq  f, Strength f ~ Nominal)`

  *some* (universally):
   * `GEq          f` $\cong$   `(HetEq  f, Strength f ~ Nominal)`
   * `GCompare     f` $\cong$   `(HetOrd f, Strength f ~ Nominal)`

  ## Improvements

  `HetEq` and `HetOrd` are generalised over the strength of evidence captured.
  This allows them to admit and combine a much broader range of instances, e.g.

  ```haskell
  instance Eq a => HetEq (Const a) where
    type Strength (Const a) = Phantom
    ...
  instance HetEq IORef where
    type Strength IORef = Representational
    ...
  instance HetEq TypeRep where
    type Strength TypeRep = Nominal
    ...

  type HetEq' f = (KnownRole (Strength f), HetEq f)

  instance (HetEq' f, HetEq' g) => HetEq (Product f g) where
    type Strength (Product f g) = Max (Strength f) (Strength g)
    ...
  instance (HetEq' f, HetEq' g) => HetEq (Sum     f g) where
    type Strength (Sum     f g) = Min (Strength f) (Strength g)
    ...
  ```

  Consequently, `Data.Hetero.Some` has much broader `Eq` and `Ord` instances than `Data.Some`:

  ```haskell
  instance HetEq  f => Eq  (Some f)
  instance HetOrd f => Ord (Some f)
  ```

  *dependent-map* could similarly broaden the range of key types by replacing `GCompare k` with `(HetOrd k, Strength k > Phantom)`, though the rare operations requiring `Has' _ k f` constraints might not come out on top.
description-type: markdown
hash: cf477b2efe7ada913ad7364daacbd29e919ace7062635c0a42e4abbc51275bbb
homepage: https://github.com/LSLeary/heterogeneous-comparison
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: L.S.Leary.II@gmail.com
synopsis: Comparison of distinctly typed values with evidence capture
test-bench-deps: {}
