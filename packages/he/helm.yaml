all-versions:
- 1.0.0
author: Zack Corr
basic-deps:
  base: '>=4 && <5'
  cairo: '>=0.13 && <0.14'
  containers: '>=0.5 && <1'
  elerea: '>=2.9 && <3'
  helm: '>=0'
  linear: '>=1 && <2'
  mtl: '>=2.1 && <3'
  pango: '>=0.13 && <0.14'
  random: '>=1 && <2'
  sdl2: '>2.1.1 && <3'
  stm: '>=2.4 && <3'
  text: '>=1.1.1.3 && <2'
  transformers: '>=0.3.0.0 && <0.6'
changelog: ''
changelog-type: ''
description: "<p align=\"center\">\n  <a href=\"http://helm-engine.org\" title=\"Homepage\"><img
  src=\"http://helm-engine.org/img/logo-alt.png\" /></a>\n  <br>\n  <br>\n  <a href=\"https://circleci.com/gh/z0w0/helm\"
  title=\"CircleCI\"><img src=\"https://circleci.com/gh/z0w0/helm.svg?style=svg\"
  /></a>\n</p>\n\n## Introduction\n\nHelm is a purely functional game engine written
  in Haskell and built with\nthe [Elerea functionally-reactive programming framework](https://github.com/cobbpg/elerea)\nand
  [SDL2](https://www.libsdl.org/). Helm was originally inspired by the\n[Elm programming
  language](http://elm-lang.org).\n\nIn Helm, every piece of input that can be gathered
  from a user (or the operating system)\nis contained in a subscription, which is
  essentially \nas a collection of input events changing over time mapped to game
  interactions.\n\nThink of it this way - when you hold down the w and a keys, two
  keyboard events are being captured at every moment.\nYou might want your game to
  move your character forward by pressing `w`.\nWhen you add a subscription to your
  game, you choose how to map these two input events\ninto a game action type (which
  you provide, the engine doesn't have any concept\nof how the action works). So if
  you mapped the `w` key to some game action variant (game\nactions are usually represented
  as a collection of data type variants), and the `w` key was held down,\nthen at
  every game tick the game would produce a `w` key press event and turn this into\nthe
  relevant game action.\n\nOn top of subscriptions, Helm has another core concept
  called commands.\nCommands are essentially IO-like monads that have context about
  the engine state.\nLike subscriptions, commands are mapped directly to game actions.
  This\nmeans that when interacting with IO through Helm, you directly\nspecify how
  the result maps to a game action and allows you to make logical\nconclusions about
  how certain monadic results should interact with your game.\n\nHelm provides a structure
  familiar to MVC-based framework developers.\nThere is a model (which represents
  the state of your game), \na view of the current model (i.e. what's actually shown
  on the screen) and a function similiar\nto a controller that folds the model forward
  based off of input actions (which are in turn\nmapped to from subscription events).\n\nThis
  presents a powerful paradigm shift for game development. Instead of writing event
  listeners,\nHelm treats input events as first-class citizens of the type system,
  and the actual interaction\nbetween the game state and input events becomes immediately
  clearer.\n\n## Features\n\n* Interactions between input and game logic is made clear
  by events and game actions being treated\n  first-class by the engine\n* Color composition
  via `Helm.Color`\n* 2D vector graphics rendering via `Helm.Graphics2D`\n  * Advanced
  text rendering via `Helm.Graphics2D.Text`\n  * Matrix-based 2D transformations (for
  advanced techniques like skewing) via `Helm.Graphics2D.Transform`\n* Keyboard event
  interactions via `Helm.Keyboard`\n* Mouse event interactions via `Helm.Mouse`\n*
  Command-related utilities such as batching via `Helm.Cmd`\n* Subscription-related
  utilities, such as batching and lifting IO-likes via `Helm.Sub`\n* Time-based event
  interactions via `Helm.Time`\n* Window event interactions and other utilities via
  `Helm.Window`\n* The base functionality of Helm is separate from the backend engine
  implementation, so\n  custom media frameworks (which generally handle rendering,
  input, etc.) can be integrated\n  with Helm quite easily. At the moment, the only
  available implementation is SDL2\n  (which is currently bundled with the game engine)
  however the plan is to have more options in the future.\n\n## Installing and Building\n\nBefore
  you can use Helm, you'll to follow the\n[Gtk2Hs installation guide](https://wiki.haskell.org/Gtk2Hs/Installation)\n(which
  is required for the Haskell Cairo bindings). Additionally, Helm\nrequires a GHC
  version of 7.6 or higher.\n\nUsing [Stack](https://haskellstack.org) when working
  with Helm is recommended.\nTo install Helm with Stack, use:\n\n```\nstack install
  helm\n```\n\nIt's best to add Helm as a dependency in your game's Cabal file rather\nthan
  installing it globally, however if you're new to the engine, installing\nit globally
  will let you run the example Helm games. See the next section.\n\n## Getting Started\n\nCheck
  out the `examples` directory for some examples; the `flappy` example is a particularly
  good start.\nUnfortunately, there's little to no example games yet, so if you end
  up making something cool and lightweight\nthat you'd think would be a good example,
  feel free to open a pull request!\n\nIf you have installed Helm globally using Stack,
  you can run the `flappy` example using:\n\n```\nstack exec helm-example-flappy\n```\n\n##
  Documentation\n\nAPI documentation for the latest stable version of Helm is available
  on [Hackage](http://hackage.haskell.org/package/helm).\nAlternatively, if you've
  cloned this repo, you can build the documentation manually using Haddock.\n\n##
  License\n\nHelm is licensed under the MIT license. See the LICENSE file for more
  details.\n\n## Contributing\n\nHelm would benefit from either of the following contributions:\n\n1.
  Try out the engine, reporting any issues or suggestions you have.\n2. Look through
  the source, get a feel for the code and then\n   contribute some features or fixes.
  If you plan on contributing\n   code, please follow\n   [Johan Tibell's Haskell
  style guide](https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md)\n
  \  with the following exceptions:\n   * Up to 120 characters per line are allowed
  (widescreens for life).\n   * Use a two space indent.\n   * Acronyms in all caps
  for identifiers (while maintaing camel-case), i.e. SDL or 2D/3D.\n   \n"
description-type: markdown
hash: d302a857ec4bfaf720ba5f2345fe2cc3df5d61d920173172ca092671340f700f
homepage: http://github.com/switchface/helm
latest: 1.0.0
license-name: MIT
maintainer: Zack Corr <zack@z0w0.me>
synopsis: A functionally reactive game engine.
test-bench-deps:
  base: '>=4 && <5'
  helm: '>=0'
  hspec: '>=2 && <3'
