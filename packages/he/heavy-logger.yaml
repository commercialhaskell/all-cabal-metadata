homepage: ''
changelog-type: markdown
hash: f117c45c325f95303e60eb66d44bff451b1fbbeb730b366ce589f34df7f0db2d
test-bench-deps: {}
maintainer: portnov84@rambler.ru
synopsis: Full-weight logging based on fast-logger
changelog: |+
  # Revision history for heavy-logger

  ## 0.1.0.0  -- 2017-10-15

  * First version. Released on an unsuspecting world.

  ## 0.2.0.0 -- 2017-10-16

  * Major rewrite of internal interfaces. Incompatible API changes.
    Was not released to Hackage.
  * Added the Shortcuts module.

  ## 0.3.0.0 -- 2017-10-24

  * Introduced parallel logging backend.
  * Introduced filtering logging backend.
  * Logging context stacks support introduced.
  * More flexible severity levels system. This is incompatible API change.
    Conversion functions are provided for integration with monad-logger's
    LogLevel type.
  * Internal modules rearrangement.
  * Added the TH module.
  * Added the IO module.
  * Introduced null logging backend.

  ## 0.3.1.0 -- 2017-10-30

  * Introduced Dynamic backend, which allows to change backend or its settings in runtime.
  * Introduced FilteringM backend, which allows to change filtering settings in runtime.

basic-deps:
  bytestring: '>=0.10.6'
  thread-local-storage: '>=0.1.1'
  stm: '>=2.4'
  base: '>=4.8 && <5.0'
  hsyslog: '>=5'
  text-format-heavy: '>=0.1.5.2'
  text: '>=1.2.2.1'
  monad-control: '>=1.0.1.0'
  lifted-base: '>=0.2.3'
  data-default: '>=0.7'
  fast-logger: '>=2.4.10'
  th-lift-instances: '>=0.1'
  containers: '>=0.5'
  mtl: '>=2.2.1'
  transformers-base: '>=0.4.4'
  monad-logger: '>=0.3.22'
  attoparsec: '>=0.13.1.0'
  th-lift: '>=0.7'
  template-haskell: '>=2.10.0'
all-versions:
- 0.1.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
author: Ilya Portnov
latest: 0.3.2.2
description-type: markdown
description: "heavy-logger README\n===================\n\nThis is Haskell logging
  library, which prefers functionality and extendability\nover light weight and simplicity.\nIt
  can use [fast-logger][1] as backend and is compatible with [monad-logger][2]\ninterface,
  so it can be used in projects that already use monad-logger.\nheavy-logger is integrated
  with [text-format-heavy][3] string formatting library.\n\nMost notable features
  of heavy-logger are:\n\n* Several backends and possibility to write your own backends.
  The provided\n  backends are:\n  * Fast-logger backend. It allows to write messages
  to stdout, stderr or\n    arbitrary file.\n  * Syslog backend.\n  * Chan backend.
  Writes messages to a Chan, so they can be read from the other\n    side.\n* Possiblity
  to write messages to several backends in parallel.\n* Logging backend settings can
  be defined dynamically; it is not necessary to\n  hardcode which backend you will
  use, you can load settings in runtime.\n* It is possible to change backend or it's
  settings in runtime (more precisely,\n  you can change underlying backend if you
  use `DynamicBackend` as a backend, \n  or you can change backend's filter if you
  use `FilteringM` as a backend).\n* Sane default set of logging message severity
  levels and possibility to define\n  custom severity levels.\n* Logging context stacks
  support (aka mapped diagnostic contexts, MDC). Each\n  logging context stack frame
  contains a set of named variables. These\n  variables can be writen to the log.\n*
  Possibility to define log message format in the output file. For example, do\n  you
  want to see event severity level first, and then time, or vice versa? It\n  is possible
  to use variables from logging context stack in the formatting\n  string.\n* Flexible
  events filtering mechanism. Messages are filtered based on message\n  source and
  severity level.  For example, you may want to write only Info\n  messages, but also
  Debug messages from one module.  Filtering can be\n  performed on two stages:\n
  \ * Before event is passed to backend. This stage is context-sensitive; for\n    example,
  you can enable logging only for events that happened during\n    transaction. Context-level
  filters also support negation; for example, it\n    is possible to explicitly forbid
  debug messages from one contexts, while\n    debug is enabled for the whole system.\n
  \ * In the backend. For example, you can forbid to write any debug into file,\n
  \   but allow to write all debug into syslog.\n* Text formatting library integration.
  Formatting of messages by\n  `text-format-heavy` is done lazily; so, you can issue
  a lot of debug\n  messages, that include data that take time to present as a string;
  the\n  formatting will be executed only in the case when debug output for this\n
  \ module is actually enabled by the filter.\n\nThis package is mostly writen with
  ideas of \"open architecture\". It exposes all\ninternal logical pieces, so they
  can be combined in other order in specific\napplications.\n\nAll functions provided
  by the package work within any monad, which should be an\ninstance of one of type
  classes defined by package: `HasLogger`, `HasLogBackend`,\n`HasLogContext`. Each
  function's signature declares only specific constraint, so\nif you do not need all
  functionality, you can implement instances only of that \nclasses that you actually
  need.\n\nThere are, in general, following ways to use this package:\n\n* Use `LoggingT`
  monad transformer. It can be the simplest, if you already have\n  monadic transformers
  stack of 1-2 transformers and you do not mind to add yet\n  another. With `LoggingT`,
  you do not need to write any adapter instances, since\n  `LoggingT` is already an
  instance of all required classes. This implementation\n  automatically solves all
  threading-related problems, since in fact it does not\n  have any shared state.\n*
  Use `System.Log.Heavy.IO` module. If you do not have monadic transformers at all,\n
  \ and your application works in pure IO, this may be the simplest way. However,\n
  \ this is a bit fragile, because you have to be sure that you always call logging\n
  \ functions only when logging state is initialized, i.e. within `withLoggingIO`\n
  \ call. This implementation stores required state in thread-local storage.\n* Implement
  required class instances for monadic stack that you already use in\n  your application.
  For example, if you already have something like\n  `ReaderT StateT ExceptT IO`,
  it will be probably better to add a couple of \n  fields to StateT's state to track
  logging state, than change your stack to\n  `ReaderT StateT LoggingT ExceptT IO`.
  If you wish to store logging state in some\n  kind of shared storage (global IORef
  or whatever), then you should think about\n  thread-safety by yourself.\n\nPlease
  refer to Haddock documentation and examples in the `examples/` directory\nfor more
  detailed information.\n\n[1]: https://hackage.haskell.org/package/fast-logger\n[2]:
  https://hackage.haskell.org/package/monad-logger\n[3]: https://hackage.haskell.org/package/text-format-heavy\n\n"
license-name: BSD-3-Clause
