all-versions:
- 0.1.0.0
- 0.1.0.1
author: TheMatten
basic-deps:
  base: ^>=4.14.1.0
  containers: ^>=0.6.2.1
  exceptions: ^>=0.10.4
  ghc-heap: ^>=8.10.2
  ghc-prim: ^>=0.6.1
  haskeline: ^>=0.8.1
  mtl: ^>=2.2.2
  show-combinators: ^>=0.2
changelog: |
  # Revision history for heap-console

  ## 0.1.0.0 -- 2020-11-20

  * First version. Released on an unsuspecting world.

  ## 0.1.0.1 -- 2020-11-21

  * Small fixes.
changelog-type: markdown
description: "# `heap-console` \U0001F50E\n\n> Debugging - the classic mystery game
  where you are the detective, the victim,\n> and the murderer!\n>\n> *Some poor developer*\n\nQuite
  a common approach in Haskell for debugging programs is to use\n`Debug.Trace` - problem
  is that what we often want to do is not to print random\nstrings, but to inspect
  the state of the program. Debuggers are meant for this,\nbut they can be tricky
  to set up, may require speicific graphical tools to be\nsomewhat convenient, and
  it's easy to forget to run your program through one\nwhile iterating through changes
  in code.\n\n`heap-console` let's you inspect your values at runtime using simple\ncombinators,
  resuming execution once you close it:\n\n```txt\n> import Heap.Console\n> inspect
  (42, 'a')\n[Entering heap-view - use `:help` for more information]\nheap-console>
  it\n(_, 'a')\nheap-console> !it\n(42, 'a')\nheap-console> it.1\n'a'\nheap-console>
  :exit\n[Exiting heap-view]\n(42, 'a')\n```\n\nIf you give it `Data` instance, it
  can recognize records too:\n\n```txt\n> :set -XDeriveDataTypeable\n> data Foo =
  Foo{ bar :: Int, baz :: String } deriving Data\n> inspectAD $ Foo 65 \"Hello World!\"\n[Entering
  heap-view - use `:help` for more information]\nheap-console> !it\nFoo {bar = 65,
  baz = \"Hello World!\"}\nheap-console> it.baz\n\"Hello World!\"\nheap-console> ^D\n[Exiting
  heap-view]\n```\n\nAnd you can bind values for inspection in random places, getting
  to them once\nit makes sense:\n\n```txt\n> evidenceD \"foo\" [1,2,3]\n> inspection\n[Entering
  heap-view - use `:help` for more information]\nheap-console> foo\n[1, 2, 3]\nheap-console>
  ^D\n[Exiting heap-view]\n```\n\nTo see more features, take a look at documentation,
  or simply try `:help`\ncommand.\n"
description-type: markdown
hash: cbc4672f8244d1d53cdfba9debd7bae200dc9cface7882abf14228817bd25dca
homepage: https://gitlab.com/thematten/heap-console
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: matten@tuta.io
synopsis: interactively inspect Haskell values at runtime
test-bench-deps:
  base: ^>=4.14.1.0
  heap-console: '>=0'
  hspec: ^>=2.7.4
