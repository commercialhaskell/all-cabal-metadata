all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.1
- 0.2.0.2
author: He-chien Tsai
basic-deps:
  base: <5
  containers: '>=0'
  deepseq: '>=0'
  parallel: '>=0'
  random: '>=0'
  text: '>=0'
changelog: ''
changelog-type: ''
description: |-
  It based on Data.Dynamic and tree container, so that Gene can represent both haskell functions and syntax trees by type connstructors. since it also supports higher order functions by multiple way type parsing, there's no need to have any variable in Gene's Tree structure.

  take a look at module AI.Heukarya.Center first

  AI.Heukarya.Gene : Abstract Gene manipulation and Typeclass for implementing data types under tree structure

  AI.Heukarya.Jungle : Operating Collections of Gene

  AI.Heukarya.Center : Module which wraps main functionality for library using


  AI.Heukarya.Gene.Dynamic : one of Gene's implementation. since it's impossible to save checkpoints if using Data.Dynamic directly, a symbolic wrapper around dynamic is provied inside

  AI.Heukarya.Gene.Dynamic.Double : a sample geneList of operators of Double precision numbers
description-type: haddock
hash: 53cba41f365611abfb499f6ad215b7f25df0393692c0ae3feb14060b61a79460
homepage: https://github.com/t3476/heukarya
latest: 0.2.0.2
license-name: BSD-3-Clause
maintainer: depot051@gmail.com
synopsis: A genetic programming based on tree structure.
test-bench-deps: {}
