homepage: https://github.com/informatikr/hedis
changelog-type: text
hash: 259fec9d5e733697c52b1b72d9e5ce35d5660f844113e264d26963f67c47ecde
test-bench-deps:
  test-framework-hunit: -any
  bytestring: '>=0.10'
  test-framework: -any
  stm: -any
  base: ==4.*
  time: '>=1.2'
  text: -any
  async: -any
  doctest: -any
  HUnit: -any
  mtl: '>=2.0 && <3'
  hedis: -any
maintainer: Kostiantyn Rybnikov <k-bx@k-bx.com>
synopsis: |-
  Client library for the Redis datastore: supports full command set,
  pipelining.
changelog: "# Changelog for Hedis\n\n## 0.15.1\n\n* PR #181. Add MonadUnliftIO instance\n\n##
  0.15.0\n\n* PR #174, Issue #173. Hedis fails to decode xstreamInfo response in case
  when the stream is empty\n\n## 0.14.3\n\n* PR #171. Support GHC 9\n\n## 0.14.2\n\n*
  PR #163. support for redis 6.0 COMMAND format\n* PR #164. remove invalid tests for
  Redis Cluster\n\n## 0.14.1\n\n* PR #162. Improved documentation for EVALSHA\n\n##
  0.14.0\n\n* PR #157. Clustering support\n\n## 0.13.1\n\n* PR #158. Upgrade to Redis
  6.0.9 & Fix auth test\n* PR #160. Fix GHC 8.0.1 compat\n\n## 0.13.0\n\n* PR #159.
  Issue #152. Make HSET return integer instead of bool\n\n## 0.12.15\n\n* PR #154.
  Implement Redis Sentinel support\n\n## 0.12.14\n\n* PR #153. Publicly expose ConnectTimeout
  exception\n\n## 0.12.13\n\n* PR #150, Issue #143. Leaking sockets when connection
  fails\n\n## 0.12.12\n\n* PR #149. Make withConnect friendly to transformer stack\n\n##
  0.12.11\n\n* Expose `withCheckedConnect`, `withConnect`\n\n## 0.12.9\n\n* Expose
  the `Database.Redis.Core.Internal` module (see https://github.com/informatikr/hedis/issues/144
  )\n\n## 0.12.8\n\n* PR #140. Added support of +/- inf redis argument\n\n## 0.12.7\n\n*
  PR #139.  fix MonadFail instance\n\n## 0.12.6\n\n* PR #138, Issue #137. Derive MonadFail
  for the Redis monad\n\n## 0.12.5\n\nIssue #136 fix slowlog parsing\n\n## 0.12.4\n\n*
  Add upper bound on network package\n\n## 0.12.3\n\n* Issue #135. Upper the base
  bound\n\n## 0.12.2\n\n* PR #134. Fix some asynchronous exception safety problems\n\n##
  0.12.1\n\n* PR #133. Fixes to stream commands\n\n## 0.12.0\n\n* PR #130. Bring back
  ability to connect via a Unix Socket\n\n## 0.11.1\n\n* PR #129. Fix tests\n\n##
  0.11.0\n\n* PR #126. Fixes for network 2.8 and 3.0\n\n## 0.10.10\n\n* Only disable
  warnings for GHC 8.6, fix build\n\n## 0.10.9\n\n* Remove deprecation warnings\n\n##
  0.10.8\n\n* PR #121. make xgroupCreate return Status\n\n## 0.10.7\n\n* PR #121.
  Fix streaming on redis 5.0.2\n* PR #121. Get rid of slave-thread\n\n## 0.10.6\n\n*
  PR #120. Add withConnect, withCheckedConnect\n\n## 0.10.5\n\n* PR #XXX Fix CI builds
  with updated Redis version\n\n## 0.10.4\n\n* PR #112. Implement streams commands\n\n##
  0.10.3\n\n* PR #110. Add disconnect which destroys all (idle) resources in the pool\n\n##
  0.10.2\n\n* PR #108. Add TLS support\n\n## 0.10.1\n\n* PR #104. Add a Semigroup
  instance (fix GHC 8.4)\n\n## 0.10.0\n\n* PR #102. Return list from srandmemberN\n*
  PR #103. Add spopN\n* PR #101. Add parseConnectInfo\n* PR #100, Issue #99. Throw
  error when AUTH or SELECT fails on connect\n\n## 0.9.12\n\n* PR #98. Added `connectTimeout`
  option\n\n## 0.9.11\n\n* PR #94. Refactor fix for issue #92 - (Connection to Unix
  sockets is broken)\n\n## 0.9.10\n\n* PR #93, Issue #92. Connection to Unix sockets
  is broken\n\n## 0.9.9\n\n* PR #90. set SO_KEEPALIVE option on underlying connection
  socket \n\n## 0.9.8\n\n* Fix syntax errors from redis when using scanOpts to specify
  match\n  pattern or count options (see PR #88)\n\n## 0.9.7\n\n* Expose returnDecode
  method of RedisCtx (see issue #83)\n\n## 0.9.6\n\n* Export Condition constructors
  (see PR #86)\n\n## 0.9.2\n\n* Added multithreaded pub/sub message processing (see
  PR #77)\n\n## 0.9.0\n\n* Merge in a fresh commands.json and a set of new commands\n
  \ implemented. See PR #52 for more info\n\n## 0.8.3\n\n* Export MonadRedis methods\n\n##
  0.8.1\n\n* Export unRedis/reRedis internalish functions which let you define\n  MonadCatch
  instance easily (see PR #73)\n\n## 0.8.0\n\n* Major speed improvement by using non-backtracking
  parser (PR #69)\n\n## 0.7.10\n\n* Improved performance (PR #64)\n\n## 0.7.7\n\n*
  Close connection handle on error\n\n## 0.7.2\n\n* Improve speed, rewrite internal
  logic (PR #56)\n\n## 0.7.1\n\n* Add NFData instances\n\n## 0.7.0\n\n* Enforce all
  replies being recieved in runRedis. Pipelining between runRedis \n  calls doesn't
  work now.\n\n## 0.6.10\n\n* Add HyperLogLog support\n\n## 0.6.4\n\n* New connection
  option to automatically SELECT a database.\n\n## 0.5 -> 0.6\n\n* Changed return
  type of HDEL from Bool to Integer.\n* Some documentation updates.\n\n## 0.5 -> 0.5.1\n\n*
  New commands: DUMP, RESTORE, BITOP, BITCOUNT.\n* Removed the dependency on stm.\n*
  Improved performance of Queued in long transactions.\n* Minor documentation updates.\n\n\n##
  0.4.1 -> 0.5\n\n* Added new Redis 2.6 commands, including Lua scripting support.\n*
  A transaction context is now created by using the 'multiExec' function.\n  The functions
  'multi', 'exec' and 'discard' are no longer available\n  individually.\n* Inside
  of a transaction, commands return their results wrapped in a\n  composable /future/,
  called 'Queued'.\n* The 'getType' command (the Redis TYPE command) now has a custom
  return\n  type 'RedisType'.\n* Minor improvements and fixes to the documentation.\n\n\n##
  0.3.2 -> 0.4.1\n\n* The following commands got a 'Maybe' added to their return type,
  to\n  properly handle Redis returning `nil`-replies: `brpoplpush`, `lindex`, `lpop`,\n
  \ `objectEncoding`, `randomkey`, `rpop`, `rpoplpush`, `spop`, `srandmember`,\n  `zrank`,
  `zrevrank`, `zscore`.\n* Updated dependencies on `bytestring-lexing` and `stm`.\n*
  Minor improvements and fixes to the documentation.\n"
basic-deps:
  exceptions: -any
  bytestring: '>=0.9'
  stm: -any
  base: '>=4.8 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  resource-pool: '>=0.2.2'
  tls: '>=1.3'
  network: '>=2 && <3.2'
  async: '>=2.1'
  containers: -any
  unliftio-core: -any
  network-uri: -any
  mtl: '>=2'
  HTTP: -any
  errors: -any
  deepseq: -any
  bytestring-lexing: '>=0.5'
  scanner: '>=0.2'
  vector: '>=0.9'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- '0.4'
- 0.4.1
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.6.6
- 0.6.7
- 0.6.8
- 0.6.9
- 0.6.10
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
- 0.7.10
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.4
- 0.9.5
- 0.9.6
- 0.9.7
- 0.9.8
- 0.9.9
- 0.9.10
- 0.9.11
- 0.9.12
- 0.10.0
- 0.10.1
- 0.10.2
- 0.10.3
- 0.10.4
- 0.10.6
- 0.10.8
- 0.10.9
- 0.10.10
- 0.11.0
- 0.11.1
- 0.12.0
- 0.12.1
- 0.12.2
- 0.12.3
- 0.12.4
- 0.12.5
- 0.12.6
- 0.12.7
- 0.12.8
- 0.12.9
- 0.12.10
- 0.12.11
- 0.12.12
- 0.12.13
- 0.12.14
- 0.12.15
- 0.13.0
- 0.13.1
- 0.14.0
- 0.14.1
- 0.14.2
- 0.14.3
- 0.14.4
- 0.15.0
- 0.15.1
author: Falko Peters <falko.peters@gmail.com>
latest: 0.15.1
description-type: haddock
description: |
  Redis is an open source, advanced key-value store. It is often referred to
  as a data structure server since keys can contain strings, hashes, lists,
  sets and sorted sets. This library is a Haskell client for the Redis
  datastore. Compared to other Haskell client libraries it has some
  advantages:

  [Compatibility with Latest Stable Redis:] Hedis is intended
  to be used with the latest stable version of Redis (currently 5.0).
  Most redis commands (<http://redis.io/commands>) are available as
  haskell functions, although MONITOR and SYNC are intentionally
  omitted. Additionally, a low-level API is
  exposed that  makes it easy for the library user to implement further
  commands, such as new commands from an experimental Redis version.

  [Automatic Optimal Pipelining:] Commands are pipelined
  (<http://redis.io/topics/pipelining>) as much as possible without any
  work by the user. See
  <http://informatikr.com/2012/redis-pipelining.html> for a
  technical explanation of automatic optimal pipelining.

  [Enforced Pub\/Sub semantics:] When subscribed to the Redis Pub\/Sub server
  (<http://redis.io/topics/pubsub>), clients are not allowed to issue
  commands other than subscribing to or unsubscribing from channels. This
  library uses the type system to enforce the correct behavior.

  [Connect via TCP or Unix Domain Socket:] TCP sockets are the default way to
  connect to a Redis server. For connections to a server on the same
  machine, Unix domain sockets offer higher performance than the standard
  TCP connection.

  For detailed documentation, see the "Database.Redis" module.
license-name: BSD-3-Clause
