homepage: https://github.com/githubuser/Flint2-Examples#readme
changelog-type: markdown
hash: 9f890124b21407978384a85692b85c0cb0a18b03b76a36765ca93338b295733f
test-bench-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.7 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  Flint2-Examples: -any
  timeit: ==2.0.*
  Flint2: '>=0.1.0.4 && <0.2.0.0'
  optparse-applicative: '>=0.18.1 && <0.19'
maintainer: hmonien@uni-bonn.de
synopsis: Examples for the Flint2 library
changelog: |
  # Changelog for `Flint2-Examples`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
basic-deps:
  gloss: '>=1.13.2 && <1.14'
  JuicyPixels: '>=3.3.8 && <3.4'
  base: '>=4.7 && <5'
  time: '>=1.12.2 && <1.13'
  filepath: '>=1.4.2 && <1.5'
  containers: '>=0.6.7 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  gloss-juicy: '>=0.2.3 && <0.3'
  timeit: ==2.0.*
  Flint2: '>=0.1.0.4 && <0.2.0.0'
  optparse-applicative: '>=0.18.1 && <0.19'
all-versions:
- 0.1.0.0
author: monien
latest: 0.1.0.0
description-type: markdown
description: "![examples of complex_plot](https://github.com/monien/Flint2-Examples/raw/main/docs/out.png)\n\n#
  Flint2-Examples\n\n## Introduction\n\nExamples for the [Flint2](https://hackage.haskell.org/package/Flint2)\nHaskell
  wrapper of the [Flint](https://flintlib.org) library.\n\nMost of these are directly
  \"translated\" from C to Haskell so they are\nwritten using \"imperative\" constructs
  in Haskell to demonstrate the\nuse of the Haskell wrapper (not intended as examples
  of \nelegant Haskell code). The structure of programs follows closely the\nstructure
  of the C code (with some exceptions:\ne.g. swinnerton_dyer_poly uses a different
  algorithm, logistic uses a\nmonad transformer instead of a for loop ...)\n\nThere
  are basic benchmarks in some of the programs. In some cases\nexperimental support
  of multithreading is available.  Checkout the\noptions by typing prog -h.\n\n##
  Installation\n\n- Install the C-library available from [Flint](https://flintlib.org).
  \n   There are packages available for various operating systems.\n\n- Install the
  Haskell interface with\n\n```bash\ncabal install Flint2 --lib\n```\n\n- Check that
  your Cabal default local bin directory does not contain any\n  conflicting names
  (see below for a list of binaries)!\n- Install the examples with \n\n```bash\ncabal
  install Flint2-Examples\n```\n'\n## Source code\n\nTo study the source code download
  the code from Github with. More\ndocumentation will hopefully available soon. Also
  check the flintlib site.\n\n```bash\ngit clone https://github.com/monien/Flint2-Examples.git\n```\n\n##
  Quick start\n\nA simple example would be the factorization of integers\n(factor_integers).
  To find out what options are available use -h:\n\n```bash\nfactor_integers -h\n```\n\nwhich
  prints\n\n```bash\nFactor integers.\n\nUsage: factor_integer INTEGER [-t|--threads
  THREADS] [--timing]\n\n  Factor integers.\n\nAvailable options:\n  INTEGER                  Integer
  given as expression (e.g. 2^64+1)\n  -t,--threads THREADS     number of threads\n
  \ --timing                 timing\n  -h,--help                Show this help text\n```\n\nNow
  typing \n\n```bash\nfactor_integer 2^256-1\n```\nreturns\n```bash\n[(3,1),(5,1),(17,1),(257,1),(641,1),(65537,1),(274177,1),(6700417,1),(67280421310721,1),(59649589127497217,1),(5704689200685129054721,1)]\n```\n\n##
  A more advanced example: complex_plot\nTry complex_plot by typing:\n\n```bash\ncomplex_plot\n```\nThis
  will plot  the phase of the *Klein invariant* in the upper half\nplane. \n\n<p align=\"center\">\n
  \ <img src=\"https://github.com/monien/Flint2-Examples/raw/main/docs/mj.png\" />\n</p>\n\nThe
  app complex_plot has many more options. Using the help option one obtains\n\n```bash\nPlotting
  special functions in the complex plane.\n\nUsage: complex_plot [--xa XA] [--xb XB]
  [--ya YA] [--yb YB] [--width WIDTH] \n                    [--height HEIGHT] [-c|--color-mode
  COLOR-MODE] \n                    [-f|--function FUNCTION] [-o|--output IMAGE-FILE]\n\n
  \ plotting special functions.\n\nAvailable options:\n  -c,--color-mode COLOR-MODE\n
  \                          possible values: 0 .. 6\n  -f,--function FUNCTION   possible
  values: agm, ai, barnesg, besseli, besselj,\n                           besselk,
  bessely, bi, digamma, ellipp, ellipsigma,\n                           ellipzeta,
  erf, fresnelc, fresnels, gamma, lgamma,\n                           modeta, modetaq,
  modj, modjq, modlambda, modlambdaq,\n                           zeta\n  -o,--output
  IMAGE-FILE   write output to IMAGE-FILE\n  -h,--help                Show this help
  tex\n```\n\n## Multithreading \n\nTo use the experimental support of multithreading
  it is most\nconvenient to set the number of cores available using the environment\nvariable
  GHCRTS (e.g. for 10 cores)\n\n```bash\nGHCRTS='-N10'\nexport GHCRTS\n```\n\n## List
  of available examples\n\n- bernoulli\n- binet\n- class_poly\n- complex_plot\n- crt\n-
  delta_qexp\n- dft\n- elementary\n- expression\n- factor_integer\n- fmpq_poly\n-
  fmpz_mod_poly\n- fmpz_mpoly_factor\n- fmpz_poly_factor_zassenhaus\n- fpwrap\n- fq_poly\n-
  function_benchmark\n- hilbert_matrix\n- hilbert_matrix_ca\n- integrals\n- keiper_li\n-
  l_central\n- l_values\n- logistic\n- machin\n- multi_crt\n- padic\n- partitions\n-
  pi_digits\n- poly_roots\n- primegen\n- qadic\n- radix\n- real_roots\n- stirling_matrix\n-
  swinnerton_dyer_poly\n- taylor_integrals\n- zeta_zeros\n"
license-name: GPL-2.0-only
