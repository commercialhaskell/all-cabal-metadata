homepage: ''
changelog-type: markdown
hash: 737e14adb81bcb84172a5e0618114116d744d1e904ad97bcf81bbd6139381136
test-bench-deps: {}
maintainer: tdbgamer@gmail.com
synopsis: Flink stateful functions SDK
changelog: |
  # Changelog for flink-statefulfun

  ## 0.1.1.0

  * Update cabal file
  * More docblocks

  ## 0.1.0.0

  * Initial release
basic-deps:
  warp: '>=3 && <3.4'
  either: '>=5 && <5.1'
  bytestring: '>=0.10 && <0.11'
  lens-family: '>=2 && <2.2'
  wai: '>=3 && <3.3'
  base: '>=4.0 && <4.15'
  time: ==1.9.3
  text: '>=1.0 && <1.3'
  uuid: ==1.3.15
  proto-lens-protobuf-types: '>=0.5 && <0.8'
  servant-server: '>=0.16 && <0.19'
  servant: '>=0.16 && <0.19'
  containers: '>=0.5 && <0.7'
  proto-lens: '>=0.5 && <0.8'
  mtl: '>=2 && <2.3'
  proto-lens-runtime: '>=0.5 && <0.8'
  http-types: '>=0.10 && <0.13'
  microlens: ==0.4.12.0
  aeson: '>=1.0 && <2.0'
  http-media: '>=0.7 && <0.9'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
author: Timothy Bess
latest: 0.4.0.0
description-type: markdown
description: "# Flink Stateful Functions Haskell SDK\n[![Hackage](https://img.shields.io/hackage/v/flink-statefulfun.svg)](https://hackage.haskell.org/package/flink-statefulfun)
  [![Build](https://img.shields.io/travis/tdbgamer/flink-statefulfun-hs.svg)](https://travis-ci.com/github/tdbgamer/flink-statefulfun-hs)
  [![Join the chat at https://gitter.im/tdbgamer/flink-statefulfun-hs](https://badges.gitter.im/tdbgamer/flink-statefulfun-hs.svg)](https://gitter.im/tdbgamer/flink-statefulfun-hs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nProvides
  a typed API for creating [flink stateful functions](https://flink.apache.org/news/2020/04/07/release-statefun-2.0.0.html).
  Greeter example is in [example/greeter/main/Main.hs](example/greeter/main/Main.hs)\n\n##
  How to run example\n\n```bash\ncd example\ndocker-compose build\ndocker-compose
  up -d\ndocker-compose logs -f event-generator\n```\n\n## How to compile locally\n\n1.
  [Install nix](https://nixos.org/download.html)\n2. [Install cachix](https://github.com/cachix/cachix#installation)\n3.
  Setup nix cache.\n```bash\ncachix use iohk\ncachix use static-haskell-nix\ncachix
  use flink-statefulfun\n```\n4. Compile inside a nix shell.\n```bash\nnix-shell\ncabal
  build\n```\n\n## Tutorial\n\n### Define our protobuf messages\n```protobuf\n// Example.proto\nsyntax
  = \"proto3\";\n\npackage example;\n\nmessage GreeterRequest {\n  string name = 1;\n}\n\nmessage
  GreeterResponse {\n  string greeting = 1;\n}\n```\n\n### Declare a function\n\n```haskell\nimport
  Network.Flink.Stateful\nimport qualified Proto.Example as EX\nimport qualified Proto.Example_Fields
  as EX\n\nprinter :: StatefulFunc () m => EX.GreeterResponse -> m ()\nprinter msg
  = liftIO $ print msg\n```\n\nThis declares a simple function that takes an `GreeterResponse`
  protobuf\ntype as an argument and simply prints it. `StatefulFunc` makes this a
  Flink\nstateful function with a state type of `()` (meaning it requires no state).\n\n###
  Declaring a function with state\n\n```haskell\nimport Data.Aeson (FromJSON, ToJSON)\nimport
  Data.Text (Text)\nimport qualified Data.Text as T\nimport GHC.Generics\n\nnewtype
  GreeterState = GreeterState\n  { greeterStateCount :: Int\n  }\n  deriving (Generic,
  Show)\n\ninstance ToJSON GreeterState\ninstance FromJSON GreeterState\n\ncounter
  :: StatefulFunc GreeterState m => EX.GreeterRequest -> m ()\ncounter msg = do\n
  \ newCount <- (+ 1) <$> insideCtx greeterStateCount\n  let respMsg = \"Saw \" <>
  T.unpack name <> \" \" <> show newCount <> \" time(s)\"\n\n  sendMsgProto (\"printing\",
  \"printer\") (response $ T.pack respMsg)\n  modifyCtx (\\old -> old {greeterStateCount
  = newCount})\n  where\n    name = msg ^. EX.name\n    response :: Text -> EX.GreeterResponse\n
  \   response greeting =\n      defMessage\n        & EX.greeting .~ greeting\n```\n\nThe
  `StatefulFunc` typeclass gives us access to the `GreeterState` that we are sending
  to and\nfrom Flink on every batch of incoming messages our function receives. For
  every message,\nthis function will calculate its new count, send a message to the
  printer function we\nmade earlier, then update its state with the new count.\n\nInternally
  this is batched over many events before sending state back to Flink for efficiency.\n\nNOTE:
  For JSON (or anything other than protobuf) messages, you must use `sendByteMsg`
  instead.\nWhen communicating with other SDKs, you'll likely want to use `sendMsg`
  and protobuf.\n\n### Serve HTTP API\n\n```haskell\nimport qualified Data.ByteString.Lazy.Char8
  as BSL\nimport qualified Data.Map as Map\nimport Network.Wai.Handler.Warp (run)\nimport
  Network.Wai.Middleware.RequestLogger\n\nmain :: IO ()\nmain = do\n  putStrLn \"http://localhost:8000/\"\n
  \ run 8000 (logStdout $ createApp functionTable)\n\nfunctionTable :: FunctionTable\nfunctionTable
  =\n  Map.fromList\n    [ ((FuncType \"greeting\" \"greeterEntry\"), flinkWrapper
  () (Expiration NONE 0) (greeterEntry . getProto)),\n      ((FuncType  \"greeting\"
  \"counter\"), flinkWrapper (JsonSerde (GreeterState 0)) (Expiration AFTER_CALL 5)
  (jsonState . counter . getProto))\n    ]\n```\n\nThe `FunctionTable` is a Map of
  `(namespace, functionType)` to `wrappedFunction`.\n`jsonState` is a helper to serialize
  your function state as `JSON` for storage in the flink\nbackend. `protoState` can
  also be used if that is your preference. `flinkWrapper` transforms\nyour function
  into one that takes arbitrary `ByteString`s so that every function in the\n`FunctionTable`
  Map is homogenous. `protoInput` indicates that the input message should be\ndeserialized
  as protobuf. `jsonInput` can be used instead to deserialize the messages as JSON.\n\n`createApp`
  is used to turn the `FunctionTable` into a `Warp` `Application` which can be served\nusing
  the `run` function provided by `Warp`.\n\nNOTE: JSON messages may not play nice
  with other SDKs, you'll probably want to stick with protobuf\nif you're communicating
  with another SDK without knowing too much Flink Statefun internals.\n\n### Create
  module YAML\n\nTo use the functions that are now served from the API, we now need
  to declare it in the `module.yaml`.\n\n```yaml\nversion: \"3.0\"\nmodule:\n  meta:\n
  \   type: remote\n  spec:\n    endpoints:\n      - endpoint:\n        meta: \n          kind:
  http\n        spec:\n          functions: greeting/*\n          urlPathTemplate:
  http://localhost:8000/statefun\n```\n\nFlink Statefun supports multiple states,
  but for simplicity the SDK just serializes the whole\nrecord and hard codes `flink_state`
  as the only state value it uses.\n"
license-name: MPL-2.0
