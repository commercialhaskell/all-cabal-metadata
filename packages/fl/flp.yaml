all-versions:
- 0.1.0.0
author: Karl Cronburg
basic-deps:
  array: '>=0.5.3.0 && <0.6'
  base: '>=4.7 && <5'
  containers: '>=0.6.0.1 && <0.7'
  deepseq: '>=1.4.4.0 && <1.5'
  flp: '>=0'
  haskell-src-meta: '>=0.8.3 && <0.9'
  pretty-simple: '>=2.2.0.1 && <2.3'
  prettyprinter: '>=1.2.1.1 && <1.3'
  template-haskell: '>=2.14.0.0 && <2.15'
  th-lift: '>=0.8.1 && <0.9'
  transformers: '>=0.5.6.2 && <0.6'
changelog: |
  # Changelog for flp

  ## Unreleased changes
changelog-type: markdown
description: |+
  # Floorplan compiler

  A language for specifying the layout of a one-dimensional address space, particularly
  for garbage collectors and manual memory managers written in Rust.

  ## Building and running

  Floorplan is written in Haskell and must be [built with stack](https://docs.haskellstack.org/en/stable/README/).
  Once you have stack installed on your system, you should be able to run the build
  command and everything should just work:

  ```bash
  $ stack build
  ...
  Completed 2 action(s).
  ```

  At which point you can compile the file `examples/immix/layout.flp` with
  the `build-immix` script:

  ```bash
  $ ./build-immix
  ...
     Compiling immix_rust v0.0.1 (/home/karl/w/flp/examples/immix)
     Finished dev [unoptimized + debuginfo] target(s) in 4.56s
  ```

  This script ensures the Floorplan compiler is built, installs it for your current
  user, and then builds the Immix project which itself invokes the Floorplan compiler
  to build the file `examples/immix/src/heap/layout.flp`.

  In order to run the compiler against some other `.flp` file, the compiler can
  be run directly as follows:

  ```bash
  stack exec flp [path/to/layout.flp] [path/to/generated.rs]
  ```

  Note that in order to subsequently build a Rust file generated in this manner,
  you must include the `flp-framework` to your Cargo dependencies, and `flp-compiler`
  to your cargo build-dependencies. The later is simply a wrapper for calling out
  to the (already stack-installed) flp compiler, and the framework crate contains
  necessary macros and address types that generated Rust code uses.

  The skeleton of a Rust cargo project is given in the `gen/` directory of this
  repo, which can be copied over and modified to support the needs of a memory
  manager other than immix-rust.

  ## Dependencies

  A customized version of the [language-rust](https://github.com/harpocrates/language-rust)
  package is included in the `deps/` directory of this repo, which adds support for
  directly splicing of host language expressions into quasiquoted Rust code. This is the
  mechanism by which Floorplan generates Rust code.

  ## Testing and contributing

  If you want to help maintain or contribute new code to this project, feel free to
  make a pull request or better yet start an issue in the the Issues tracker so that
  you can get our feedback along the way. A number of avenues for work on the compiler
  exist, including but not limited to:

  - More example Rust allocators implemented with a Floorplan layout.
  - Rust templates for allocating on alignment boundaries.
  - Extensively document the interfaces generated.
  - Better error messages.
  - Integrating the core semantics (`app/semantics.hs`) directly into the project
    `src/` hierarchy.
  - Calling out to a SMT library to verify alignment and size constraints.
  - Targeting both C and Rust.
  - Support for non-64-bit architectures.
  - Generating debugging assertions.
  - Dynamic tracking of type information for each piece of the heap.
  - Cleaning up the dependencies by integrating the Rust splicing support directly
    into [the upstream repository](https://github.com/harpocrates/language-rust),
    e.g. as a separate quasiquoter.
  - Generate cargo-based Rust documentation alongside generated functions, indicating
    why a certain function was generated and how it might be used.
  - Repairing the Coq proofs in the `proofs/*.v` files.
  - Better Rust integration and downstream crates.

description-type: markdown
hash: 1400c1daae05c82f6f49b79b06a544f6cb837b47caa0f361607e01c74d1240b0
homepage: https://github.com/RedlineResearch/floorplan#readme
latest: 0.1.0.0
license-name: MIT
maintainer: karl@cs.tufts.edu
synopsis: A layout spec language for memory managers implemented in Rust.
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  array: '>=0.5.3.0 && <0.6'
  base: '>=4.7 && <5'
  containers: '>=0.6.0.1 && <0.7'
  deepseq: '>=1.4.4.0 && <1.5'
  flp: '>=0'
  haskell-src-meta: '>=0.8.3 && <0.9'
  prettyprinter: '>=1.2.1.1 && <1.3'
  template-haskell: '>=2.14.0.0 && <2.15'
  test-framework: '>=0.8 && <0.9'
  test-framework-hunit: '>=0.3 && <0.4'
  th-lift: '>=0.8.1 && <0.9'
  transformers: '>=0.5.6.2 && <0.6'
