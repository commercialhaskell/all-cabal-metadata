homepage: http://quid2.org
changelog-type: text
hash: c6dde9f15935db97660012a196fd023c1800f9e62848af6c8116883cada33bb9
test-bench-deps:
  flat: -any
  bytestring: -any
  base: -any
  unordered-containers: -any
  text: -any
  quickcheck-text: -any
  filepath: -any
  dlist: -any
  array: -any
  containers: -any
  quickcheck-instances: -any
  ghc-prim: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
  QuickCheck: -any
  pretty: -any
  mono-traversable: -any
  vector: -any
maintainer: tittoassini@gmail.com
synopsis: Principled and efficient bit-oriented binary serialization.
changelog: "Significant and compatibility-breaking changes.\n\nVersion 0.4.4:\n\t-
  Added instances for Identity, Monoid.Dual/All/Any/Sum/Product/Alt, Semigroup.Min/Max/First/Last/Option
  \n\nVersion 0.4.2:\n\t- Fixed links in README.md\n\t- Added multiple stack.yaml
  files for different LTS\n\nVersion 0.4:\n    - Compatibility with ghc 8.8.3\n\t-
  Data.Seq.Seq is serialised as a List (previously was serialised as an Array)\n\t-
  Changed namespace from Data.Flat to Flat\n\t- Addtional Flat Instances for some
  common packages: array, base, bytestring, containers, dlist, text, unordered-containers,
  vector\n\t- Additional doctests, with a static version that can run without ghci
  and therefore also under ghcjs/eta (run it with stack test :doc-static)\n\t- Many
  minor changes\n\nVersion 0.3.4:\n\t- Redisegned Generics-based instance generation
  (Data.Flat.Class) to reduce compilation time and improve encoding and decoding performance\n\t-
  Fixed GHCJS Double bug and tested GHCJS with full test suite\n\nVersion 0.3.2:\n\t-
  Tested with ghc 8.2.1\n\t- Dropped dependencies on the 'cpu', 'derive' and 'tasty'
  packages to make it compatible with the Eta compiler (https://github.com/typelead/eta)\n\nVersion
  0.3:\n\t- Removed 'flatStrict' and 'unflatStrict' (use 'flat' and 'unflat' instead
  that also encode/decode strictly)\n\t- `unflatWith` now takes a decoder for the
  unpadded value (previously it expected a padded decoder) and decodes the padded
  value\n\t- Added some decoding primitives\n\t- Added Data.ByteString.Convert\n"
basic-deps:
  bytestring: '>=0.10.6'
  base: '>=4.8 && <4.16'
  unordered-containers: -any
  text: -any
  dlist: '>=0.6'
  semigroups: -any
  array: '>=0.5.1.0'
  containers: -any
  ghc-prim: -any
  hashable: -any
  deepseq: '>=1.4'
  pretty: '>=1.1.2'
  mono-traversable: -any
  primitive: -any
  vector: -any
all-versions:
- '0.2'
- 0.2.2
- '0.3'
- 0.3.2
- 0.3.4
- '0.4'
- 0.4.2
- 0.4.4
author: Pasqualino `Titto` Assini
latest: 0.4.4
description-type: markdown
description: |2-

  [![Build Status](https://travis-ci.org/Quid2/flat.svg?branch=master)](https://travis-ci.org/Quid2/flat)
  [![Hackage version](https://img.shields.io/hackage/v/flat.svg)](http://hackage.haskell.org/package/flat)
  [![Stackage Nightly](http://stackage.org/package/flat/badge/nightly)](http://stackage.org/nightly/package/model)
  [![Stackage LTS](http://stackage.org/package/flat/badge/lts)](http://stackage.org/lts/package/model)


  Haskell implementation of [Flat](http://quid2.org/docs/Flat.pdf), a principled, language-independent and efficient binary data format.

  ### Performance

  For some hard data, see this [comparison of the major haskell serialisation libraries](https://github.com/haskell-perf/serialization).

  Briefly:
   * Transfer time (serialisation time + transport time on the network + deserialisation at the receiving end): `flat` is usually faster for all but the highest network speeds
   * Size: `flat` produces significantly smaller binaries than all other libraries (3/4 times usually)
   * Serialization: `store`, `persist` and `flat` are faster
   * Deserialization: `store`, `flat`, `persist` and `cereal` are faster

  ### Documentation

  * [Tutorial](http://hackage.haskell.org/package/flat/docs/Flat-Tutorial.html)

  * [Hackage Package and Docs](http://hackage.haskell.org/package/flat)

  * [Flat Format Specification](http://quid2.org/docs/Flat.pdf)

  ### Installation

  Get the latest stable version from [hackage](https://hackage.haskell.org/package/flat).

  ### Other Stuff You Might Like

  #### [ZM - Language independent, reproducible, absolute types](https://github.com/Quid2/zm)

  To decode `flat` encoded data you need to know the type of the serialised data.

  This is ok for applications that do not require long-term storage and that do not operate in open distributed systems.

  For those who do, you might want to supplement `flat` with something like [ZM](https://github.com/Quid2/zm).

  #### Ports for other languages

  [TypeScript-JavaScript](https://github.com/Quid2/ts) and [Purescript](https://www.purescript.org/) ports are under development.

  Get in touch if you would like to help porting `flat` to other languages.
license-name: BSD-3-Clause
