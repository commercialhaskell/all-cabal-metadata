homepage: http://quid2.org
changelog-type: text
hash: 663804636ef874baf575048e40fe76f88c48e9d62cd6e1ffc0a9ddbcc45a60e6
test-bench-deps:
  flat: -any
  bytestring: -any
  base: -any
  unordered-containers: -any
  text: -any
  list-t: -any
  quickcheck-text: -any
  filepath: -any
  dlist: -any
  array: -any
  containers: -any
  ghc-prim: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  timeit: -any
  tasty: -any
  deepseq: -any
  QuickCheck: '>=2.14.2'
  pretty: -any
  mono-traversable: -any
  vector: -any
maintainer: tittoassini@gmail.com
synopsis: Principled and efficient bit-oriented binary serialization.
changelog: "Significant and compatibility-breaking changes.\n\nVersion 0.5:\n    -
  Compatibility with ghc 9.0.2 & 9.2.4 & 9.4.2\n    - Compatibility with text-2.0\n
  \   - Fixed https://github.com/Quid2/flat/issues/23 that could cause an encoding
  failure for non byte aligned Arrays \n    - Fixed https://github.com/Quid2/flat/pull/26
  that could cause the decoder to read beyond the end of the decoding buffer (causing
  a SEGFAULT on ghcjs)\n    - Merged https://github.com/Quid2/flat/pull/22 - fails
  correctly on invalid UTF-8 text \n    - Added a few ways to partially or incrementally
  decode values, see Flat.Repr and Flat.Decoder.Run.listTDecoder\n    - Moved strictDecoder
  from Flat.Decoder.Types to Flat.Decoder\n    - Removed Flat instance for Semigroup.Option
  from Flat.Instances.Base\n    - Moved overlapping/specialised Flat instance for
  [Char] to Flat.Instances.Extra\n    - Added a few extra functions\n\nVersion 0.4.4:\n\t-
  Added instances for Identity, Monoid.Dual/All/Any/Sum/Product/Alt, Semigroup.Min/Max/First/Last/Option
  \n\nVersion 0.4.2:\n\t- Fixed links in README.md\n\t- Added multiple stack.yaml
  files for different LTS\n\nVersion 0.4:\n    - Compatibility with ghc 8.8.3\n\t-
  Data.Seq.Seq is serialised as a List (previously was serialised as an Array)\n\t-
  Changed namespace from Data.Flat to Flat\n\t- Addtional Flat Instances for some
  common packages: array, base, bytestring, containers, dlist, text, unordered-containers,
  vector\n\t- Additional doctests, with a static version that can run without ghci
  and therefore also under ghcjs/eta (run it with stack test :doc-static)\n\t- Many
  minor changes\n\nVersion 0.3.4:\n\t- Redisegned Generics-based instance generation
  (Data.Flat.Class) to reduce compilation time and improve encoding and decoding performance\n\t-
  Fixed GHCJS Double bug and tested GHCJS with full test suite\n\nVersion 0.3.2:\n\t-
  Tested with ghc 8.2.1\n\t- Dropped dependencies on the 'cpu', 'derive' and 'tasty'
  packages to make it compatible with the Eta compiler (https://github.com/typelead/eta)\n\nVersion
  0.3:\n\t- Removed 'flatStrict' and 'unflatStrict' (use 'flat' and 'unflat' instead
  that also encode/decode strictly)\n\t- `unflatWith` now takes a decoder for the
  unpadded value (previously it expected a padded decoder) and decodes the padded
  value\n\t- Added some decoding primitives\n\t- Added Data.ByteString.Convert\n"
basic-deps:
  bytestring: '>=0.10.6'
  base: '>=4.8 && <5'
  unordered-containers: -any
  text: -any
  list-t: '>1'
  dlist: '>=0.6'
  array: '>=0.5.1.0'
  containers: -any
  ghc-prim: -any
  hashable: '>=1.4.0.2'
  deepseq: '>=1.4'
  pretty: '>=1.1.2'
  mono-traversable: -any
  primitive: -any
  vector: -any
all-versions:
- '0.2'
- 0.2.2
- '0.3'
- 0.3.2
- 0.3.4
- '0.4'
- 0.4.2
- 0.4.4
- '0.5'
author: Pasqualino `Titto` Assini
latest: '0.5'
description-type: markdown
description: "\n![Build Status](https://github.com/Quid2/flat/actions/workflows/haskell-ci.yml/badge.svg)\n\n[![Hackage
  version](https://img.shields.io/hackage/v/flat.svg)](http://hackage.haskell.org/package/flat)\n\n[![Stackage
  LTS 16](http://stackage.org/package/flat/badge/lts-16)](http://stackage.org/lts/package/flat)\n[![Stackage
  LTS 18](http://stackage.org/package/flat/badge/lts-18)](http://stackage.org/lts/package/flat)\n[![Stackage
  LTS 19](http://stackage.org/package/flat/badge/lts-19)](http://stackage.org/lts/package/flat)\n[![Stackage
  Nightly](http://stackage.org/package/flat/badge/nightly)](http://stackage.org/nightly/package/flat)\n\nHaskell
  implementation of [Flat](http://quid2.org/docs/Flat.pdf), a principled, portable
  and compact binary data format ([specs](http://quid2.org)).\n\n\n### How To Use
  It For Fun and Profit\n\n```haskell\n{-# LANGUAGE DeriveGeneric, DeriveAnyClass
  #-}\n```\n\n```haskell\nimport Flat\n```\n\n\n\n```haskell\ndata Direction = North
  | South | Center | East | West deriving (Show,Generic,Flat)\n```\n\nUse **flat**
  to encode: \n\n```haskell\nflat $ [North,South]\n-> \"\\149\"\n```\n\n\nand **unflat**
  to decode:\n\n```haskell\nunflat (flat $ [North,South]) :: Decoded [Direction]\n->
  Right [ North , South ]\n```\n\n\nAnd thanks to Flat's bit-encoding, this little
  list fits in a single byte (rather than the five that would be required by a traditional
  byte encoding):\n\n```haskell\nflatBits $ [North,South]\n-> \"10010101\"\n```\n\n\n\n###
  Performance\n\nFor some hard data, see this [comparison of the major haskell serialisation
  libraries](https://github.com/haskell-perf/serialization).\n\nBriefly:\n * Size:
  `flat` produces significantly smaller binaries than all other libraries (3/4 times
  usually)\n * Serialization time: `store`, `persist` and `flat` are faster\n * Deserialization
  time: `store`, `flat`, `persist` and `cereal` are faster\n * Transfer time (serialisation
  time + transport time on the network + deserialisation at the receiving end): `flat`
  is usually faster for all but the highest network speeds\n\n### Documentation\n\n*
  [Tutorial](http://hackage.haskell.org/package/flat/docs/Flat-Tutorial.html)\n\n*
  [Hackage Package and Docs](http://hackage.haskell.org/package/flat)\n\n* [Flat Format
  Specification](http://quid2.org/docs/Flat.pdf)\n\n\n### Installation\n\nGet the
  latest stable version from [hackage](https://hackage.haskell.org/package/flat).\n\n###
  Compatibility\n\nTested with:\n\n* [GHC](https://www.haskell.org/ghc/) 7.10.3 to
  9.4.2 (x64)\n\n\n* [GHCJS](https://github.com/ghcjs/ghcjs)\n\n  * Note: versions
  of `flat` prior to 0.33 encode `Double` values incorrectly when they are not aligned
  with a byte boundary.\n\n\n\n### Known Bugs and Infelicities\n\n* Data types with
  more than 512 constructors are currently unsupported\n\n* Longish compilation times\n\n
  \ * `flat` relies more than other serialisation libraries on extensive inlining
  for its good performance, this unfortunately leads to longer compilation times.
  \n\n    If you have many data types or very large ones this might become an issue.\n\n
  \   A couple of good practices that will eliminate or mitigate this problem are:\n\n
  \     * During development, turn optimisations off (`stack --fast` or `-O0` in the
  cabal file).\n\n      * Keep your serialisation code in a separate module or modules.\n\n*
  See also the [full list of open issues](https://github.com/Quid2/flat/issues).\n\n###
  Ports for other languages\n\n[Rust](https://www.rust-lang.org/) and [TypeScript-JavaScript](https://github.com/Quid2/ts)
  ports are under development.\n\n\nGet in touch if you would like to help porting
  `flat` to other languages.\n\n### Acknowledgements\n\n`flat` reuses ideas and readapts
  code from various packages, mainly: `store`, `binary-bits` and `binary` and includes
  bug fixes from a number of contributors.\n\n### Other Stuff You Might Like\n\nTo
  decode `flat` encoded data you need to know the type of the serialised data.\n\nThis
  is ok for applications that do not require long-term storage and that do not operate
  in open distributed systems.\n\nFor those who do, you might want to supplement `flat`
  with [ZM - Language independent, reproducible, absolute types](https://github.com/Quid2/zm).\n"
license-name: BSD-3-Clause
