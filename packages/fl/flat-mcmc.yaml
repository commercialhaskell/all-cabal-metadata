all-versions:
- 0.1.0.0
- 1.0.0
- 1.0.1
- 1.1.1
- 1.2.1
- 1.2.2
- 1.3.0
- 1.4.0
- 1.4.1
- 1.4.2
- 1.5.0
- 1.5.1
- 1.5.2
author: Jared Tobin
basic-deps:
  base: '>4 && <6'
  formatting: '>=6 && <8'
  mcmc-types: '>=1.0.1 && <2'
  monad-par: '>=0.3.4.7 && <1'
  monad-par-extras: '>=0.3.3 && <1'
  mwc-probability: '>=1.0.1 && <3'
  pipes: '>=4 && <5'
  primitive: '>=0.6 && <1'
  text: '>=1.2 && <2'
  transformers: '>=0.2 && <0.6'
  vector: '>=0.10 && <1'
changelog: ''
changelog-type: ''
description: |-
  flat-mcmc is a Haskell library for painless, efficient, general-purpose
  sampling from continuous distributions.

  flat-mcmc uses an ensemble sampler that is invariant to affine
  transformations of space.  It wanders a target probability distribution's
  parameter space as if it had been "flattened" or "unstretched" in some sense,
  allowing many particles to explore it locally and in parallel.

  In general this sampler is useful when you want decent performance without
  dealing with any tuning parameters or local proposal distributions.

  flat-mcmc exports an 'mcmc' function that prints a trace to stdout, as well
  as a 'flat' transition operator that can be used more generally.

  > import Numeric.MCMC.Flat
  > import qualified Data.Vector.Unboxed as U (unsafeIndex)
  >
  > rosenbrock :: Particle -> Double
  > rosenbrock xs = negate (5  * (x1 - x0 ^ 2) ^ 2 + 0.05 * (1 - x0) ^ 2) where
  >   x0 = U.unsafeIndex xs 0
  >   x1 = U.unsafeIndex xs 1
  >
  > origin :: Ensemble
  > origin = ensemble [
  >     particle [negate 1.0, negate 1.0]
  >   , particle [negate 1.0, 1.0]
  >   , particle [1.0, negate 1.0]
  >   , particle [1.0, 1.0]
  >   ]
  >
  > main :: IO ()
  > main = withSystemRandom . asGenIO $ mcmc 12500 origin rosenbrock
description-type: haddock
hash: e9965afe04c2476e0f8be60d95a6e272302e47fa4f1adfd3b05b09ca8931e47b
homepage: https://github.com/jtobin/flat-mcmc
latest: 1.5.2
license-name: MIT
maintainer: jared@jtobin.ca
synopsis: Painless general-purpose sampling.
test-bench-deps:
  base: '>=0'
  flat-mcmc: '>=0'
  vector: '>=0'
