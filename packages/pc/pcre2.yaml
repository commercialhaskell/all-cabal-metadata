homepage: https://github.com/sjshuck/hs-pcre2#readme
changelog-type: markdown
hash: 6d5b8eb9997794e9b1e3af3ce43a1d328a735d0d99f63e9b293d440db5747b70
test-bench-deps:
  microlens-platform: -any
  pcre-light: -any
  base: '>=4.9 && <5'
  hspec: -any
  text: -any
  criterion: -any
  containers: -any
  mtl: -any
  regex-pcre-builtin: -any
  pcre2: -any
  template-haskell: -any
maintainer: stevenjshuck@gmail.com
synopsis: Regular expressions via the PCRE2 C library (included)
changelog: |
  # Changelog and Acknowledgements

  ## 1.1.5
  * Fixed [#17](https://github.com/sjshuck/pcre2/17), where functions returning
    `Alternative` containers were not restricted to single results despite their
    documentation.
  * Minor improvements to docs and examples.

  ## 1.1.4
  * Fixed some incorrect foreign imports' safety.

  ## 1.1.3.1
  * Fixed a very minor issue where `pcreVersion` still reported "10.35" even
    though it in fact was using 10.36.

  ## 1.1.3
  * Made in-house streaming abstraction based on `streaming` and removed the
    latter as a dependency.
  * Updated PCRE2 to 10.36 (no API changes).
  * Docs fixes.

  ## 1.1.2
  * Refactored using the `streaming` library.  Fixed
    [#11](https://github.com/sjshuck/pcre2/11), where large global matches were
    very slow.

  ## 1.1.1
  * Fixed [#12](https://github.com/sjshuck/pcre2/4), where some functions returned
    too many match results.

  ## 1.1.0
  * Added global matching.
      * New functions `matchAll`, `matchAllOpt`, `capturesAll`, `capturesAllOpt`.
      * Changed all traversals from affine to non-affine.
  * Changed `capturesOptA` to `capturesAOpt` for naming consistency.

  ## 1.0.2
  * Fixed [#4](https://github.com/sjshuck/pcre2/4), where multiple named captures
    were not type-indexed correctly.
  * Established automated builds using Github Workflows.  Thanks amesgen!

  ## 1.0.1.1
  * Temporarily eliminate all dependency version bounds to get it building on
    Hackage.

  ## 1.0.1
  * Fixed [#1](https://github.com/sjshuck/pcre2/1), where building on Windows
    would succeed but not run.  Thanks Andrew!
  * Try to adjust dependency version bounds to get it building on Hackage.  Thanks
    snoyberg!

  ## 1.0.0
  * Initial release.
basic-deps:
  base: '>=4.9 && <5'
  text: -any
  containers: -any
  mtl: -any
  template-haskell: -any
all-versions:
- 1.0.0
- 1.0.1
- 1.0.1.1
- 1.0.2
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.3.1
- 1.1.4
- 1.1.5
author: Shlomo Shuck and contributors
latest: 1.1.5
description-type: markdown
description: "# pcre2\n\n![CI](https://github.com/sjshuck/hs-pcre2/workflows/CI/badge.svg)\n[![Hackage](https://img.shields.io/hackage/v/pcre2)](https://hackage.haskell.org/package/pcre2)\n\nRegular
  expressions for Haskell.  \n\n## Teasers\n```haskell\nembeddedLicensePlate :: Text
  -> Maybe Text\nembeddedLicensePlate = match \"[A-Z]{3}[0-9]{3,4}\"\n```\n```haskell\ncase
  \"The quick brown fox\" of\n    [regex|brown\\s+(?<animal>\\w+)|] -> Text.putStrLn
  animal\n    _                               -> error \"nothing brown\"\n```\n```haskell\nlet
  kv'd = lined . packed . [_regex|(?x)  # Extended PCRE2 syntax\n        ^\\s*          #
  Ignore leading whitespace\n        ([^=:\\s].*?)  # Capture the non-empty key\n
  \       \\s*           # Ignore trailing whitespace\n        [=:]          # Separator\n
  \       \\s*           # Ignore leading whitespace\n        (.*?)         # Capture
  the possibly-empty value\n        \\s*$          # Ignore trailing whitespace\n
  \   |]\n\nforMOf kv'd file $ execStateT $ do\n    k <- gets $ capture @1\n    v
  <- gets $ capture @2\n    liftIO $ Text.putStrLn $ \"found \" <> k <> \" set to
  \" <> v\n\n    case myMap ^. at k of\n        Just v' | v /= v' -> do\n            liftIO
  $ Text.putStrLn $ \"setting \" <> k <> \" to \" <> v'\n            _capture @2 .=
  v'\n        _ -> liftIO $ Text.putStrLn \"no change\"\n```\n\n## Features\n* Quiet
  functions with simple types&mdash;for the most part it's  \n`Text` _(pattern)_ `->
  Text` _(subject)_ `-> result`.\n* Use partial application to create performant,
  compile-once-match-many code.\n* Low cognitive overhead&mdash;there's just one custom
  datatype for both compile\n  and match options, the `Option` monoid.\n* `Text` everywhere
  for interop with both C and the broader Haskell ecosystem.\n* Match failures expressed
  via `Alternative` or pattern match failures.\n* Opt-in Template Haskell facilities
  for compile-time verification of patterns,\n  indexing captures, and memoizing inline
  regexes.\n* Opt-in `lens` support.\n* No failure monads to express compile errors,
  preferring pure functions and\n  throwing imprecise exceptions with pretty `Show`
  instances.  Write simple\n  code and debug it.  Or, don't, and use the Template
  Haskell features instead.\n  Both are first-class.\n* Vast presentation of PCRE2
  functionality.  We can even register Haskell\n  callbacks to run during matching!\n*
  Few dependencies.\n* Bundled, statically-linked UTF-16 build of up-to-date PCRE2
  (version 10.36),\n  with a complete, exposed Haskell binding.\n\n## Wishlist\n*
  Many performance optimizations.  Currently we are as much as 2&ndash;3&times;\n
  \ slower than other libraries for some operations, although things are\n  improving.
  \ (We are already faster than\n  [regex-base](https://hackage.haskell.org/package/regex-base)/[regex-pcre](https://hackage.haskell.org/package/regex-pcre)\n
  \ when working with `Text`.)  If it's really regex processing that's causing a\n
  \ bottleneck,\n  [pcre-light](https://hackage.haskell.org/package/pcre-light)/[-heavy](https://hackage.haskell.org/package/pcre-heavy)/[lens-regex-pcre](https://hackage.haskell.org/package/lens-regex-pcre)\n
  \ are recommended instead of this library for the very best performance.\n* Make
  use of DFA and JIT compilation.\n* Improve PCRE2 C compile time.\n* Add splitting
  support.\n\n## License\n[Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0.html).
  \ \nPCRE2 is distributed under the [3-clause BSD](https://www.pcre.org/licence.txt)
  license.\n\n## Main Author\n&copy;2020 Shlomo Shuck\n"
license-name: Apache-2.0
