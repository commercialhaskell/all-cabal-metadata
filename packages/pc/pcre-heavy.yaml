all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 1.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
author: Val Packett
basic-deps:
  base: '>=4.3.0.0 && <5'
  base-compat: '>=0.8.0'
  bytestring: '>=0'
  pcre-light: '>=0'
  string-conversions: '>=0'
  template-haskell: '>=2.16.0.0'
changelog: ''
changelog-type: ''
description: "[![Hackage](https://img.shields.io/hackage/v/pcre-heavy.svg?style=flat)
  ![](https://img.shields.io/endpoint?url=https://hackage-downloads-badge.deno.dev/pcre-heavy)](https://hackage.haskell.org/package/pcre-heavy)\n[![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](https://unlicense.org)\n[![Support
  me on Patreon](https://img.shields.io/badge/dynamic/json?logo=patreon&color=%23e85b46&label=support%20me%20on%20patreon&query=data.attributes.patron_count&suffix=%20patrons&url=https%3A%2F%2Fwww.patreon.com%2Fapi%2Fcampaigns%2F9395291)](https://www.patreon.com/valpackett)\n\n#
  pcre-heavy\n\nA Haskell regular expressions library with support for multiple matches
  and replacements:\n\n- based on [pcre-light], none of that regex-base complicated
  pluggable-backend stuff\n- takes and returns [ConvertibleStrings] everywhere, use
  any common string type (String, ByteString, Lazy ByteString, Text, Lazy Text) --
  but you need a bit more type annotations (or [ClassyPrelude]'s `asText`, `asString`,
  etc.) if you use `OverloadedStrings` which you probably can't live without\n- provides
  a QuasiQuoter for regexps that does compile time checking\n\n[pcre-light]: https://hackage.haskell.org/package/pcre-light\n[ConvertibleStrings]:
  https://hackage.haskell.org/package/string-conversions\n[ClassyPrelude]: https://hackage.haskell.org/package/classy-prelude\n\n##
  Usage\n\n```haskell\n{-# LANGUAGE QuasiQuotes, FlexibleContexts #-}\nimport           Text.Regex.PCRE.Heavy\n```\n\n###
  Checking\n\n```haskell\n>>> \"https://val.packett.cool\" =~ [re|^http.*|]\nTrue\n```\n\nFor
  `UnicodeSyntax` fans, it's also available as ≈ (U+2248 ALMOST EQUAL TO):\n\n```haskell\n>>>
  \"https://val.packett.cool\" ≈ [re|^http.*|]\nTrue\n```\n\n### Matching (Searching)\n\n(You
  can use any string type, not just String!)\n\n`scan` returns all matches as pairs
  like `(fullmatch, [group, group...])`.\n\n```haskell\n>>> scan [re|\\s*entry (\\d+)
  (\\w+)\\s*&?|] \" entry 1 hello  &entry 2 hi\" :: [(String, [String])]\n[\n  (\"
  entry 1 hello  &\", [\"1\", \"hello\"])\n, (\"entry 2 hi\",        [\"2\", \"hi\"])\n]\n```\n\nIt
  is lazy!\nIf you only need the first match, use `head` (or, much better, `headMay`
  from [safe]) -- no extra work will be performed!\n\n```haskell\n>>> headMay $ scan
  [re|\\s*entry (\\d+) (\\w+)\\s*&?|] \" entry 1 hello  &entry 2 hi\"\nJust (\" entry
  1 hello  &\", [\"1\", \"hello\"])\n```\n\n[safe]: https://hackage.haskell.org/package/safe\n\n###
  Replacement\n\n`sub` replaces the first match, `gsub` replaces all matches.\n\n```haskell\n--
  You can use a convertible string type `a` as the replacement...\n>>> gsub [re|\\d+|]
  \"!!!NUMBER!!!\" \"Copyright (c) 2015 The 000 Group\"\n\"Copyright (c) !!!NUMBER!!!
  The !!!NUMBER!!! Group\"\n\n-- or a ([a] -> a) function -- that will get the groups...\n>>>
  gsub [re|%(\\d+)(\\w+)|] (\\(d:w:_) -> \"{\" ++ d ++ \" of \" ++ w ++ \"}\" :: String)
  \"Hello, %20thing\"\n\"Hello, {20 of thing}\"\n\n-- or a (a -> a) function -- that
  will get the full match...\n>>> gsub [re|-\\w+|] (\\x -> \"+\" ++ (reverse $ drop
  1 x) :: String) \"hello -world\"\n\"hello +dlrow\"\n\n-- or a (a -> [a] -> a) function.\n--
  That will get both the full match and the groups.\n-- I have no idea why you would
  want to use that, but that's there :-)\n```\n\nNote that functions are the _only_
  way to use captured groups in the replacement. There is no \"in string\" syntax
  like in Perl or in Python.\n\n### Splitting\n\n`split`, well, splits.\n\n```haskell\n>>>
  split [re|%(begin|next|end)%|] \"%begin%hello%next%world%end%\"\n[\"\",\"hello\",\"world\",\"\"]\n```\n\n###
  Options\n\nYou can pass `pcre-light` options by using the `somethingO` variants
  of functions (and `mkRegexQQ` for compile time options):\n\n```haskell\n>>> let
  myRe = mkRegexQQ [multiline, utf8, ungreedy]\n>>> scanO [myRe|\\s*entry (\\d+) (\\w+)\\s*&?|]
  [exec_no_utf8_check] \" entry 1 hello  &entry 2 hi\" :: [[String]]\n>>> gsubO [myRe|\\d+|]
  [exec_notempty] \"!!!NUMBER!!!\" \"Copyright (c) 2015 The 000 Group\"\n```\n\n`utf8`
  is passed by default in the `re` QuasiQuoter.\n\n## Development\n\nUse [stack] to
  build.  \nUse ghci to run tests quickly with `:test` (see the `.ghci` file).\n\n```bash\n$
  stack build\n\n$ stack test && rm tests.tix\n\n$ stack ghci --ghc-options=\"-fno-hpc\"\n```\n\n[stack]:
  https://github.com/commercialhaskell/stack\n\n## License\n\nThis is free and unencumbered
  software released into the public domain.  \nFor more information, please refer
  to the `UNLICENSE` file or [unlicense.org](https://unlicense.org).\n"
description-type: markdown
hash: d106ea392c2921c8299774881f8930da7ba29bb42629cf3331f35c0ea586d43a
homepage: https://codeberg.org/valpackett/pcre-heavy
latest: 1.0.0.4
license-name: LicenseRef-PublicDomain
maintainer: val@packett.cool
synopsis: A regexp (regex) library on top of pcre-light you can actually use.
test-bench-deps: {}
