all-versions:
- 0.1.0.0
- 0.2.0.0
author: StÃ©phane Laurent
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.5.1 && <0.7'
  delaunayNd: '>=0.1.0.2 && <0.2'
  hspray: '>=0.1.0.0 && <0.5.3'
  numeric-prelude: '>=0.4.4 && <0.5'
  scubature: '>=1.1.0.0 && <1.2'
  vector: '>=0.12.3 && <0.14'
  vertexenum: '>=1.0.0.0 && <1.1'
changelog: "# Changelog for `pcubature`\r\n\r\n\r\n## 0.1.0.0 - 2023-11-20\r\n\r\nFirst
  release.\r\n\r\n\r\n## 0.2.0.0 - 2024-05-XX\r\n\r\nThe package does no longer depend
  on the 'hmatrix-glpk' package.\r\n"
changelog-type: markdown
description: "# pcubature\r\n\r\n<!-- badges: start -->\r\n[![Stack](https://github.com/stla/pcubature/actions/workflows/Stack-lts.yml/badge.svg)](https://github.com/stla/pcubature/actions/workflows/Stack-lts.yml)\r\n[![Stack](https://github.com/stla/pcubature/actions/workflows/Stack-nightly.yml/badge.svg)](https://github.com/stla/pcubature/actions/workflows/Stack-nightly.yml)\r\n<!--
  badges: end -->\r\n\r\n***Multiple integration over convex polytopes.***\r\n\r\n***Warning:***
  the package does not work in GHCi.\r\n\r\n___\r\n\r\nThis package allows to evaluate
  a multiple integral over a convex polytope. \r\nLet's consider for example the following
  integral:\r\n\r\n$$\\int_0^1\\int_0^1\\int_0^1 \\exp(x+y+z)\\,\\text{d}z\\,\\text{d}y\\,\\text{d}x
  = {(e-1)}^3 \\approx 5.07321411177285.$$\r\n\r\nThe domain of integration is the
  cube ${[0,1]}^3$. In order to use the package, \r\none has to provide the vertices
  of this cube:\r\n\r\n```haskell\r\nintegrateOnPolytope'\r\n    :: (Vector Double
  -> Double) -- ^ integrand\r\n    -> [[Double]]                -- ^ vertices of the
  polytope\r\n    -> Int                       -- ^ maximum number of evaluations\r\n
  \   -> Double                    -- ^ desired absolute error\r\n    -> Double                    --
  ^ desired relative error\r\n    -> Int                       -- ^ integration rule:
  1, 2, 3 or 4\r\n    -> IO Result                 -- ^ value, error estimate, evaluations,
  success\r\n```\r\n\r\nLet's go:\r\n\r\n```haskell\r\nmodule Main \r\n  where\r\nimport
  Numeric.Integration.PolyhedralCubature\r\nimport Data.Vector.Unboxed as V\r\n\r\nf
  :: Vector Double -> Double\r\nf v = exp (V.sum v)\r\n\r\ncube :: [[Double]]\r\ncube
  = [\r\n         [0, 0, 0]\r\n       , [0, 0, 1]\r\n       , [0, 1, 0]\r\n       ,
  [0, 1, 1]\r\n       , [1, 0, 0]\r\n       , [1, 0, 1]\r\n       , [1, 1, 0]\r\n
  \      , [1, 1, 1]\r\n       ]\r\n\r\nintegral :: IO Result\r\nintegral = integrateOnPolytope'
  f cube 10000 0 1e-6 3\r\n\r\nmain :: IO ()\r\nmain = do \r\n  i <- integral\r\n
  \ print i\r\n-- Result {\r\n--          value = 5.073214090351428\r\n--        ,
  errorEstimate = 2.8421152805879766e-6\r\n--        , evaluations = 710\r\n--        ,
  success = True\r\n--        }\r\n```\r\n\r\nThis cube is axis-aligned. So it may
  be better to use the **adaptive-cubature** \r\npackage here. The **pcubature** package
  allows to evaluate multiple integrals \r\nwhose bounds are (roughly speaking) linear
  combinations of the variables, \r\nsuch as:\r\n\r\n$$\\int_{-5}^4\\int_{-5}^{3-x}\\int_{-10}^{6-2x-y}
  f(x, y, z)\\,\\text{d}z\\,\\text{d}y\\,\\text{d}x.$$\r\n\r\nHere, the domain of
  integration is given by the set of linear inequalities:\r\n\r\n$$\\left\\{\\begin{matrix}
  -5  & \\leq & x & \\leq & 4 \\\\\\ -5  & \\leq & y & \\leq & 3-x \\\\\\ -10 & \\leq
  & z & \\leq & 6-2x-y \\end{matrix}\\right.$$\r\n\r\nEach of these linear inequalities
  defines a halfspace of $\\mathbb{R}^3$, and \r\nthe intersection of these six halfspaces
  is a convex polytope (a polyhedron).\r\n\r\nBut it is not easy to get the vertices
  of this polytope. This is why the \r\n**pcubature** package depends on the **vertexenum**
  package, whose purpose is \r\nto enumerate the vertices of a polytope given as above,
  with linear \r\ninequalities. Let's take as example the function $f(x,y,z) = x(x+1)
  - yz^2$:\r\n\r\n```haskell\r\nmodule Main\r\n  where\r\nimport Numeric.Integration.PolyhedralCubature\r\nimport
  Geometry.VertexEnum\r\nimport Data.VectorSpace     ( \r\n                              AdditiveGroup((^+^),
  (^-^))\r\n                            , VectorSpace((*^)) \r\n                            )\r\nimport
  Data.Vector.Unboxed  as V\r\n\r\nf :: Vector Double -> Double\r\nf v = x * (x+1)
  - y * z * z\r\n  where\r\n    x = v ! 0\r\n    y = v ! 1\r\n    z = v ! 2\r\n\r\npolytope
  :: [Constraint Double]\r\npolytope = [\r\n             x .>= (-5)         -- shortcut
  for `x .>=. cst (-5)`\r\n           , x .<=  4\r\n           , y .>= (-5)\r\n           ,
  y .<=. cst 3 ^-^ x -- we need `cst` here\r\n           , z .>= (-10)\r\n           ,
  z .<=. cst 6 ^-^ 2*^x ^-^ y \r\n           ]\r\n           where\r\n             x
  = newVar 1\r\n             y = newVar 2\r\n             z = newVar 3\r\n\r\nintegral
  :: IO Result\r\nintegral = integrateOnPolytope' f polytope 10000 0 1e-6 3\r\n\r\nmain
  :: IO ()\r\nmain = do \r\n  i <- integral\r\n  print i\r\n-- Result {\r\n--          value
  = 74321.77499999988\r\n--        , errorEstimate = 1.0533262499999988e-7\r\n--        ,
  evaluations = 330\r\n--        , success = True\r\n--        }\r\n```\r\n\r\nThe
  exact value of this integral is $74321.775$, as we shall see later.\r\n\r\nThe function
  $f$ of this example is polynomial. So we can use the function \r\n`integratePolynomialOnPolytope`
  to integrate it. This requires to define \r\nthe polynomial with the help of the
  **hspray** package; we also import some \r\nmodules of the **numeric-prelude** package,
  which allows to define a **hspray** \r\npolynomial more conveniently:\r\n\r\n```haskell\r\nmodule
  Main\r\n  where\r\nimport Numeric.Integration.PolyhedralCubature\r\nimport Geometry.VertexEnum\r\nimport
  Data.VectorSpace     ( \r\n                              AdditiveGroup((^+^), (^-^))\r\n
  \                           , VectorSpace((*^)) \r\n                            )\r\nimport
  Math.Algebra.Hspray  ( Spray, lone, (^**^) )\r\nimport Prelude hiding       ( (*),
  (+), (-) )\r\nimport qualified Prelude as P\r\nimport Algebra.Additive              \r\nimport
  Algebra.Module                \r\nimport Algebra.Ring\r\n\r\np :: Spray Double\r\np
  = x * (x + one) - (y * z^**^2) \r\n  where\r\n    x = lone 1 :: Spray Double\r\n
  \   y = lone 2 :: Spray Double\r\n    z = lone 3 :: Spray Double\r\n\r\npolytope
  :: [Constraint Double]\r\npolytope = [\r\n             x .>= (-5)         -- shortcut
  for `x .>=. cst (-5)`\r\n           , x .<=  4\r\n           , y .>= (-5)\r\n           ,
  y .<=. cst 3 ^-^ x -- we need `cst` here\r\n           , z .>= (-10)\r\n           ,
  z .<=. cst 6 ^-^ 2*^x ^-^ y \r\n           ]\r\n           where\r\n             x
  = newVar 1\r\n             y = newVar 2\r\n             z = newVar 3\r\n\r\nintegral
  :: IO Double\r\nintegral = integratePolynomialOnPolytope' p polytope\r\n\r\nmain
  :: IO ()\r\nmain = do \r\n  i <- integral\r\n  print i\r\n-- 74321.77499999967\r\n```\r\n\r\nThe
  function `integratePolynomialOnPolytope` implements an exact procedure. \r\nHowever
  we didn't get the exact result. That's because of (small) \r\nnumerical errors.
  The first numerical errors occur in the vertex enumeration \r\nperformed by the
  **vertexenum** package:\r\n\r\n```haskell\r\nmodule Main\r\n  where\r\nimport Geometry.VertexEnum\r\nimport
  Data.VectorSpace     ( \r\n                              AdditiveGroup((^+^), (^-^))\r\n
  \                           , VectorSpace((*^)) \r\n                            )\r\n\r\npolytope
  :: [Constraint Double]\r\npolytope = [\r\n             x .>= (-5)         \r\n           ,
  x .<=  4\r\n           , y .>= (-5)\r\n           , y .<=. cst 3 ^-^ x \r\n           ,
  z .>= (-10)\r\n           , z .<=. cst 6 ^-^ 2*^x ^-^ y \r\n           ]\r\n           where\r\n
  \            x = newVar 1\r\n             y = newVar 2\r\n             z = newVar
  3\r\n\r\nvertices :: IO [[Double]]\r\nvertices = vertexenum polytope Nothing\r\n\r\nmain
  :: IO ()\r\nmain = do \r\n  vs <- vertices\r\n  print vs\r\n-- [\r\n--   [-5.000000000000003,
  8.000000000000004, 8.000000000000004]\r\n-- , [-4.999999999999998, -4.999999999999996,
  20.999999999999993]\r\n-- , [3.999999999999999, -0.9999999999999997, -1.0]\r\n--
  , [3.999999999999999, -5.0, 3.0000000000000004]\r\n-- , [-5.0, -5.0, -10.0]\r\n--
  , [-5.0, 8.000000000000002, -10.0]\r\n-- , [4.0, -0.9999999999999999, -10.0]\r\n--
  , [4.0, -5.0, -10.0]\r\n-- ]\r\n```\r\n\r\nSince all coefficients of the linear
  inequalities are rational (they even are \r\nintegral), the vertices should be rational
  as well. \r\nUnfortunately, **vertexenum** only allows to get vertices with double
  \r\ncoordinates. So if we want to use `Rational`, we have to manually enter \r\nthe
  vertices:\r\n\r\n```haskell\r\nmodule Main\r\n  where\r\nimport Numeric.Integration.PolyhedralCubature\r\nimport
  Math.Algebra.Hspray  ( Spray, lone, (^**^) )\r\nimport Prelude hiding       ( (*),
  (+), (-) )\r\nimport qualified Prelude as P\r\nimport Algebra.Additive              \r\nimport
  Algebra.Module                \r\nimport Algebra.Ring\r\n\r\np :: Spray Rational\r\np
  = x * (x + one) - (y * z^**^2) \r\n  where\r\n    x = lone 1 :: Spray Rational\r\n
  \   y = lone 2 :: Spray Rational\r\n    z = lone 3 :: Spray Rational\r\n\r\npolytope
  :: [[Rational]]\r\npolytope = [\r\n             [-5, 8, 8]\r\n           , [-5,
  -5, 21]\r\n           , [4, -1, -1]\r\n           , [4, -5, 3]\r\n           , [-5,
  -5, -10]\r\n           , [-5, 8, -10]\r\n           , [4, -1, -10]\r\n           ,
  [4, -5, -10]\r\n           ]\r\n\r\nintegral :: IO Rational\r\nintegral = integratePolynomialOnPolytope
  p polytope\r\n\r\nmain :: IO ()\r\nmain = do \r\n  i <- integral\r\n  print i\r\n--
  2972871 % 40\r\n```\r\n\r\nWe get it, the exact value $74321.775$, as promised."
description-type: markdown
hash: 5a2586d7d9591843a72417ea6a01cbc500a653d9c293aebbcd463b715c5303ca
homepage: https://github.com/stla/pcubature#readme
latest: 0.2.0.0
license-name: GPL-3.0-only
maintainer: laurent_step@outlook.fr
synopsis: Integration over convex polytopes
test-bench-deps:
  base: '>=4.7 && <5'
  hspray: '>=0.1.0.0 && <0.5.3'
  pcubature: '>=0'
  tasty: '>=1.4 && <1.5'
  tasty-hunit: '>=0.10 && <0.11'
