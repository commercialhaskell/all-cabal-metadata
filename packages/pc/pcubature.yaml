homepage: https://github.com/stla/pcubature#readme
changelog-type: markdown
hash: 26a883e646bd5a344cf6457023439289bfeb37f108b90113daec675cb9d45f07
test-bench-deps: {}
maintainer: laurent_step@outlook.fr
synopsis: Integration over convex polytopes
changelog: |
  # Changelog for `pcubature`

  ## 0.1.0.0 - 2023-11-20

  First release.
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.2.1 && <0.8'
  delaunayNd: '>=0.1.0.2 && <0.2'
  scubature: '>=1.1.0.0 && <1.2'
  vertexenum: '>=0.1.1.0 && <0.2'
  hspray: '>=0.1.0.0 && <0.2'
  vector: '>=0.12.3 && <0.14'
  numeric-prelude: '>=0.4.4 && <0.5'
all-versions:
- 0.1.0.0
author: StÃ©phane Laurent
latest: 0.1.0.0
description-type: markdown
description: "# pcubature\n\n<!-- badges: start -->\n[![Stack](https://github.com/stla/pcubature/actions/workflows/Stack.yml/badge.svg)](https://github.com/stla/pcubature/actions/workflows/Stack.yml)\n<!--
  badges: end -->\n\n*Multiple integration over convex polytopes.*\n\n***Warning:***
  the package does not work in GHCi.\n\n***Info:*** the package indirectly depends
  on the **hmatrix-glpk** package; \nfollow [this link](https://github.com/haskell-numerics/hmatrix/blob/master/INSTALL.md)\nfor
  installation instructions.\n\n___\n\nThis package allows to evaluate a multiple
  integral over a convex polytope. \nLet's consider for example the following integral:\n\n$$\\int_0^1\\int_0^1\\int_0^1
  \\exp(x+y+z)\\,\\text{d}z\\,\\text{d}y\\,\\text{d}x = {(e-1)}^3 \\approx 5.07321411177285.$$\n\nThe
  domain of integration is the cube ${[0,1]}^3$. In order to use the package, \none
  has to provide the vertices of this cube:\n\n```haskell\nintegrateOnPolytope'\n
  \   :: (Vector Double -> Double) -- ^ integrand\n    -> [[Double]]                --
  ^ vertices of the polytope\n    -> Int                       -- ^ maximum number
  of evaluations\n    -> Double                    -- ^ desired absolute error\n    ->
  Double                    -- ^ desired relative error\n    -> Int                       --
  ^ integration rule: 1, 2, 3 or 4\n    -> IO Result                 -- ^ value, error
  estimate, evaluations, success\n```\n\nLet's go:\n\n```haskell\nmodule Main \n  where\nimport
  Numeric.Integration.PolyhedralCubature\nimport Data.Vector.Unboxed as V\n\nf ::
  Vector Double -> Double\nf v = exp (V.sum v)\n\ncube :: [[Double]]\ncube = [\n         [0,
  0, 0]\n       , [0, 0, 1]\n       , [0, 1, 0]\n       , [0, 1, 1]\n       , [1,
  0, 0]\n       , [1, 0, 1]\n       , [1, 1, 0]\n       , [1, 1, 1]\n       ]\n\nintegral
  :: IO Result\nintegral = integrateOnPolytope' f cube 10000 0 1e-6 3\n\nmain :: IO
  ()\nmain = do \n  i <- integral\n  print i\n-- Result {\n--          value = 5.073214090351428\n--
  \       , errorEstimate = 2.8421152805879766e-6\n--        , evaluations = 710\n--
  \       , success = True\n--        }\n```\n\nThis cube is axis-aligned. So it may
  be better to use the **adaptive-cubature** \npackage here. The **pcubature** package
  allows to evaluate multiple integrals \nwhose bounds are (roughly speaking) linear
  combinations of the variables, \nsuch as:\n\n$$\\int_{-5}^4\\int_{-5}^{3-x}\\int_{-10}^{6-2x-y}
  f(x, y, z)\\,\\text{d}z\\,\\text{d}y\\,\\text{d}x.$$\n\nHere, the domain of integration
  is given by the set of linear inequalities:\n\n$$\\left\\{\\begin{matrix} -5  &
  \\leq & x & \\leq & 4 \\\\\\ -5  & \\leq & y & \\leq & 3-x \\\\\\ -10 & \\leq &
  z & \\leq & 6-2x-y \\end{matrix}\\right.$$\n\nEach of these linear inequalities
  defines a halfspace of $\\mathbb{R}^3$, and \nthe intersection of these six halfspaces
  is a convex polytope (a polyhedron).\n\nBut it is not easy to get the vertices of
  this polytope. This is why the \n**pcubature** package depends on the **vertexenum**
  package, whose purpose is \nto enumerate the vertices of a polytope given as above,
  with linear \ninequalities. Let's take as example the function $f(x,y,z) = x(x+1)
  - yz^2$:\n\n```haskell\nmodule Main\n  where\nimport Numeric.Integration.PolyhedralCubature\nimport
  Geometry.VertexEnum\nimport Data.VectorSpace     ( \n                              AdditiveGroup((^+^),
  (^-^))\n                            , VectorSpace((*^)) \n                            )\nimport
  Data.Vector.Unboxed  as V\n\nf :: Vector Double -> Double\nf v = x * (x+1) - y *
  z * z\n  where\n    x = v ! 0\n    y = v ! 1\n    z = v ! 2\n\npolytope :: [Constraint
  Double]\npolytope = [\n             x .>= (-5)         -- shortcut for `x .>=. cst
  (-5)`\n           , x .<=  4\n           , y .>= (-5)\n           , y .<=. cst 3
  ^-^ x -- we need `cst` here\n           , z .>= (-10)\n           , z .<=. cst 6
  ^-^ 2*^x ^-^ y \n           ]\n           where\n             x = newVar 1\n             y
  = newVar 2\n             z = newVar 3\n\nintegral :: IO Result\nintegral = integrateOnPolytope'
  f polytope 10000 0 1e-6 3\n\nmain :: IO ()\nmain = do \n  i <- integral\n  print
  i\n-- Result {\n--          value = 74321.77499999988\n--        , errorEstimate
  = 1.0533262499999988e-7\n--        , evaluations = 330\n--        , success = True\n--
  \       }\n```\n\nThe exact value of this integral is $74321.775$, as we shall see
  later.\n\nThe function $f$ of this example is polynomial. So we can use the function
  \n`integratePolynomialOnPolytope` to integrate it. This requires to define \nthe
  polynomial with the help of the **hspray** package; we also import some \nmodules
  of the **numeric-prelude** package, which allows to define a **hspray** \npolynomial
  more conveniently:\n\n```haskell\nmodule Main\n  where\nimport Numeric.Integration.PolyhedralCubature\nimport
  Geometry.VertexEnum\nimport Data.VectorSpace     ( \n                              AdditiveGroup((^+^),
  (^-^))\n                            , VectorSpace((*^)) \n                            )\nimport
  Math.Algebra.Hspray  ( Spray, lone, (^**^) )\nimport Prelude hiding       ( (*),
  (+), (-) )\nimport qualified Prelude as P\nimport Algebra.Additive              \nimport
  Algebra.Module                \nimport Algebra.Ring\n\np :: Spray Double\np = x
  * (x + one) - (y * z^**^2) \n  where\n    x = lone 1 :: Spray Double\n    y = lone
  2 :: Spray Double\n    z = lone 3 :: Spray Double\n\npolytope :: [Constraint Double]\npolytope
  = [\n             x .>= (-5)         -- shortcut for `x .>=. cst (-5)`\n           ,
  x .<=  4\n           , y .>= (-5)\n           , y .<=. cst 3 ^-^ x -- we need `cst`
  here\n           , z .>= (-10)\n           , z .<=. cst 6 ^-^ 2*^x ^-^ y \n           ]\n
  \          where\n             x = newVar 1\n             y = newVar 2\n             z
  = newVar 3\n\nintegral :: IO Double\nintegral = integratePolynomialOnPolytope' p
  polytope\n\nmain :: IO ()\nmain = do \n  i <- integral\n  print i\n-- 74321.77499999967\n```\n\nThe
  function `integratePolynomialOnSimplex` implements an exact procedure. \nHowever
  we didn't get the exact result. That's because of (small) \nnumerical errors. The
  first numerical errors occur in the vertex enumeration \nperformed by the **vertexenum**
  package:\n\n```haskell\nmodule Main\n  where\nimport Geometry.VertexEnum\nimport
  Data.VectorSpace     ( \n                              AdditiveGroup((^+^), (^-^))\n
  \                           , VectorSpace((*^)) \n                            )\n\npolytope
  :: [Constraint Double]\npolytope = [\n             x .>= (-5)         \n           ,
  x .<=  4\n           , y .>= (-5)\n           , y .<=. cst 3 ^-^ x \n           ,
  z .>= (-10)\n           , z .<=. cst 6 ^-^ 2*^x ^-^ y \n           ]\n           where\n
  \            x = newVar 1\n             y = newVar 2\n             z = newVar 3\n\nvertices
  :: IO [[Double]]\nvertices = vertexenum polytope Nothing\n\nmain :: IO ()\nmain
  = do \n  vs <- vertices\n  print vs\n-- [\n--   [-5.000000000000003, 8.000000000000004,
  8.000000000000004]\n-- , [-4.999999999999998, -4.999999999999996, 20.999999999999993]\n--
  , [3.999999999999999, -0.9999999999999997, -1.0]\n-- , [3.999999999999999, -5.0,
  3.0000000000000004]\n-- , [-5.0, -5.0, -10.0]\n-- , [-5.0, 8.000000000000002, -10.0]\n--
  , [4.0, -0.9999999999999999, -10.0]\n-- , [4.0, -5.0, -10.0]\n-- ]\n```\n\nSince
  all coefficients of the linear inequalities are rational (they even are \nintegral),
  the vertices should be rational as well. \nUnfortunately, **vertexenum** only allows
  to get vertices with double \ncoordinates. So if we want to use `Rational`, we have
  to manually enter \nthe vertices:\n\n```haskell\nmodule Main\n  where\nimport Numeric.Integration.PolyhedralCubature\nimport
  Math.Algebra.Hspray  ( Spray, lone, (^**^) )\nimport Prelude hiding       ( (*),
  (+), (-) )\nimport qualified Prelude as P\nimport Algebra.Additive              \nimport
  Algebra.Module                \nimport Algebra.Ring\n\np :: Spray Rational\np =
  x * (x + one) - (y * z^**^2) \n  where\n    x = lone 1 :: Spray Rational\n    y
  = lone 2 :: Spray Rational\n    z = lone 3 :: Spray Rational\n\npolytope :: [[Rational]]\npolytope
  = [\n             [-5, 8, 8]\n           , [-5, -5, 21]\n           , [4, -1, -1]\n
  \          , [4, -5, 3]\n           , [-5, -5, -10]\n           , [-5, 8, -10]\n
  \          , [4, -1, -10]\n           , [4, -5, -10]\n           ]\n\nintegral ::
  IO Rational\nintegral = integratePolynomialOnPolytope p polytope\n\nmain :: IO ()\nmain
  = do \n  i <- integral\n  print i\n-- 2972871 % 40\n```\n\nWe get it, the exact
  value $74321.775$, as promised."
license-name: GPL-3.0-only
