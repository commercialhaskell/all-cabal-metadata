all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Shintaro Sakata
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10.4 && <0.11'
  text: '>=1.0 && <1.3'
  text-short: '>=0.1.1 && <0.1.4'
  utf8-string: '>=1.0 && <1.2'
changelog: |
  # Changelog for utf8-conversions

  #### 0.1.0.4

  Changed so that type synonyms around strings are not exported

  #### 0.1.0.3

  - Fixed test dependencies to upload to stackage.

  #### 0.1.0.2

  - Add a test.

  #### 0.1.0.1
  - Changed the conversion method between String and ShortByteString
  - Added type synonyms for documentation.


  #### 0.1.0.0
  - init package
changelog-type: markdown
description: |-
  # `utf8-conversions` A string conversion library that assumes utf8

  [![Build Status](https://travis-ci.org/chemirea/utf8-conversions.svg?branch=master)](https://travis-ci.org/chemirea/utf8-conversions)
  [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)

  This package provides aã€€Data.Convertible.Utf8 library for easy conversion of many string types in Haskell

  ## usage

  ```haskell
  import Data.Convertible.Utf8 (convert)

  string :: String
  string = "Hello world"

  bytestring :: ByteString
  bytestring = convert string

  text :: Text
  text = convert bytestring
  ```

  A typeclass that represents something that can be converted.
  A `Convertible a b` instance represents an `a` that can be converted to a `b`.

  ```haskell
  class Convertible a b where
    convert :: a -> b
  ```

  ## Support

  - String
  - ByteString
  - ByteStringBuilder
  - LazyByteString
  - ByteStringShort
  - Text
  - LazyText
  - TextBuilder
  - TextShort

  Supports type conversion between the above types.
  Byte string is assumed to be in utf-8 encoding.

  ## Why?

  String conversion in haskell is more difficult than in other languages and needs to be easier.

  In particular, the OverloadedStrings pragma does not work properly when creating a ByteString.

  So why not other conversion libraries?
  There are many other conversion libraries that use the Maybe type for safety or are not explicitly stated as utf8.

  Libraries that use maybe types are very labor intensive.
  Libraries that do not explicitly state UTF8 are insecure

  Therefore, this library clearly states that it assumes UTF8 and performs the conversion without using the MAYBE type, which is both safe and easy.


  ## Get involved!

  If there's a bug or a better way to convert, please report it!
description-type: markdown
hash: 1f3960a71f59458fa5a2f67cd658d7ec402448530fdd9b7138bd025fb7fbf46e
homepage: https://github.com/chemirea/utf8-conversions#readme
latest: 0.1.0.4
license-name: BSD-3-Clause
maintainer: shintaro.sakata.tokyo@gmail.com
synopsis: A string conversion library that assumes utf8
test-bench-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10.4 && <0.11'
  charsetdetect-ae: '>=1.0 && <1.2'
  hspec: '>=2.0 && <3.0'
  text: '>=1.0 && <1.3'
  text-short: '>=0.1.1 && <0.1.4'
  utf8-conversions: '>=0'
  utf8-string: '>=1.0 && <1.2'
