all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
author: Edward Z. Yang
basic-deps:
  base: '>=3 && <5'
  groom: '>=0'
  haskell-src-exts: '>=1.0.0'
changelog: ''
changelog-type: ''
description: |-
  Automatically derived Show instances are an easy way
  to inspect data in your program.  However, for large
  data-structures, the resulting output lacks
  whitespace, making it unreadable.  Groom offers an
  replacement to `show' called `groom' which attempts
  to pretty-print the output of `show'.  For example:

  > let x = parseExp "foobar 1 [1,2]"
  > in do
  >   putStrLn (show x)
  >   putStrLn (groom x)

  results in:

  > ParseOk (App (App (Var (UnQual (Ident "foobar"))) (Lit (Int 1))) (List [Lit (Int 1),Lit (Int 2)]))
  > ParseOk
  >   (App (App (Var (UnQual (Ident "foobar"))) (Lit (Int 1)))
  >      (List [Lit (Int 1), Lit (Int 2)]))

  Groom works only on Show instances that output valid
  Haskell code; if Groom can't understand its input,
  it will not make any changes.
description-type: haddock
hash: b3be67cea27ec403032d23649f9995048fecb39f885d6b62b42209ada0fda636
homepage: ''
latest: 0.1.2.1
license-name: BSD-3-Clause
maintainer: ezyang@mit.edu
synopsis: |-
  Pretty printing for well-behaved Show
  instances.
test-bench-deps: {}
