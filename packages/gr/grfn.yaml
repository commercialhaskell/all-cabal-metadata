all-versions:
- 1.0.0.0
author: Venkatesh Narayanan
basic-deps:
  arithmoi: '>=0.13.0 && <0.14'
  async: '>=2.2.5 && <2.3'
  base: '>=4.18.2 && <=4.20.0.1'
  grfn: '>=0'
  monad-loops: '>=0.4.3 && <3.3'
  parallel: '>=3.2.2 && <3.3'
  parallel-io: '>=0.3.5 && <0.4'
  protolude: ^>=0.3.4
  random: '>=1.2.1.2 && <1.3'
  text: '>=2.0.2 && <=2.1.1'
  time: '>=1.12.2 && <1.13'
  unamb: ^>=0.2.7
changelog: |
  # Changelog for `grfn`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# grfn\n![GitHub CI](https://img.shields.io/github/actions/workflow/status/threeeyedgod/GRFN/ci.yml)\n[![MPL-2.0
  license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/threeeyedgod/GRFN/blob/main/LICENSE)\n[![Stable
  Version](https://img.shields.io/github/v/tag/ThreeEyedGod/GRFN)](https://img.shields.io/github/v/tag/ThreeEyedGod/grfn)\n[![Latest
  Release](https://img.shields.io/github/v/release/ThreeEyedGod/GRFN?color=%233D9970)](https://img.shields.io/github/v/release/ThreeEyedGod/grfn?color=%233D9970)\n[![Hackage](https://img.shields.io/hackage/v/grfn.svg)](https://hackage.haskell.org/package/grfn)\n\nSynopsis\n---------\n\nImplementation
  of this paper [\"Get pre-factored random numbers easily\"](https://twitter.com/michael_nielsen/status/1724854680990486780?s=20).
  The full paper may be read [here](https://link.springer.com/content/pdf/10.1007/s00145-003-0051-5.pdf).
  \ A synopsis is available in Section 2 in this other [paper](https://math.dartmouth.edu/~carlp/kalai3.pdf)
  dealing with getting pre-factored random numbers for Gausian distributions.  A reference
  Python implemention is [here](https://www.johndcook.com/blog/2023/11/17/factored-random-numbers/).\n\nThe
  Adam Kalai algorithm itself is an easier (but less efficient) version of [Eric Bach's
  original algorithm](https://pages.cs.wisc.edu/~cs812-1/pfrn.pdf). \n\n### Notes\n**Parallelized
  / Concurrent** ; Property Testing (QuickCheck), [Stan](https://hackage.haskell.org/package/stan)
  for Static analysis\nhlint; github actions, IDE:Cursor+ormolu ; Haddock ; makefile;
  Benchmark (tasty) ; Verification using Refinement Types (LiquidHaskell) during development
  ; HPC code coverage enabled; cabal/stack profiling; Kleisli Applicative\n\n### Performance\nDevelopment
  on an entry level M1 ==> Ghc settings and usable cores (rtsopts as well) set to
  4.\n\n### Usage\n\n__Example:__ a single pre-factored number guaranteed with uniform
  probability may \nbe obtained by one of these 3 calls.  \n\n⚠️ Note: preFactoredNumOfBitSizePar
  is a concurrent \nparallized implementation and may offer performance benefits.\n\n
  \   >>> genARandomPreFactoredNumberLTEn 20 -- will give a pre-factored number less
  \n    than or equal to 20.\n    >>> Right (8,[2,2,2,1])\n\n    >>> preFactoredNumOfBitSize
  20 -- will give a pre-factored number in the \n    range [2^20, 2^21 - 1]\n    >>>
  Right (1695177,[17123,11,3,3,1])\n\n    >>> preFactoredNumOfBitSizePar 60 -- will
  give a pre-factored number in the \n    range [2^60, 2^61 - 1]\n    >>> Right (1245467344549977447,[332515759,233924281,179,19,3,3,1])\n\n"
description-type: markdown
hash: f9cd3e464ab1b10d0ffdf964510d29f54236abfb823ff41af3a1bac100b0455d
homepage: https://github.com/threeeyedgod/grfn#readme
latest: 1.0.0.0
license-name: BSD-3-Clause
maintainer: venkatesh.narayanan@live.in
synopsis: Uniformly-random pre-factored numbers (Kalai)
test-bench-deps:
  QuickCheck: '>=2.14.3'
  base: '>=0'
  grfn: '>=0'
  hspec: '>=2.11.7'
  hspec-core: '>=2.11.7'
  primes: '>=0'
  tasty: '>=1.5'
  tasty-bench: '>=0'
  text: '>=2.0.2 && <=2.1.1'
