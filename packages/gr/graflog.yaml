all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 1.0.0
- 2.0.0
- 3.0.0
- 4.0.0
- 5.0.0
- 6.0.0
- 6.1.0
- 6.1.1
- 6.1.2
- 6.1.3
- 6.1.4
- 6.1.5
author: Michael Adlai Arnold
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  mtl: '>=0'
  text: '>=0'
  text-conversions: '>=0'
changelog: ''
changelog-type: ''
description: |
  # Graflog

  Monadic correlated log events!

  ##To Use:

  - given a data type:
      ```
      data UserSpec = UserSpec
        { email :: Email
        , password :: Text
        , name :: Text
        } deriving (Eq, Show, Generic)
      ```

      we can create an instance of ToLog:
      ```
      instance ToLog UserSpec where
        toLog UserSpec{email, name} =
          dictionary
            [ pair "email" email
            , pair "password" Redacted
            , pair "name" name ]
      ```

      and derive JSON instances of that:
      ```
      deriveJSON defaultOptions ''UserSpec
      ```

      which can then be logged inside a monad:
      ```
      foo = do
        let jimbo = UserSpec (Email "jimbo@gmail.com" ...)
        logJSON $ Event (CorrelationId 0) (EventId 0) "User" (toLog jimbo)
        return jimbo
      ```

  - you must force stdout to flush after each line, or logs won't appear in a timely manner: call `Graflog.Console.enableStdoutLineBuffering` at the top of your main function.

  - CorrelationId and EventId generation are not yet supported, so you must create an event manually:
    - inside do notation: `let event = Event (CorrelationId 0) (EventId 0)`
    - followed at some point by: `logJSON $ event (Action "some kind of metadata") (toLog dataToLog)`

  ##To Do:

  - CorrelationId and EventId generation
  - Generic derivation of ToLog / ToJSON instances
  - Support for non-JSON logging?
description-type: markdown
hash: 936eb6da89e0aca0f9990b061acd79d317eab5baf29e6e25f10357f1f14358c1
homepage: https://github.com/m-arnold/graflog#readme
latest: 6.1.5
license-name: BSD-3-Clause
maintainer: marnold@cj.com
synopsis: Monadic correlated log events
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  containers: '>=0'
  graflog: '>=0'
  hspec: '>=0'
  mtl: '>=0'
  test-fixture: '>=0'
  text: '>=0'
