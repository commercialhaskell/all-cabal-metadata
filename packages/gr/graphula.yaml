all-versions:
- 2.0.0.1
- 2.0.0.2
- 2.0.0.3
- 2.0.0.4
- 2.0.0.5
- 2.0.1.0
- 2.0.1.1
- 2.0.2.1
- 2.0.2.2
- 2.1.0.0
author: ''
basic-deps:
  HUnit: '>=1.6.0.0'
  QuickCheck: '>=2.11.3'
  base: '>=4.11.1.0 && <5'
  containers: '>=0.5.11.0'
  directory: '>=1.3.1.5'
  generics-eot: '>=0.4'
  mtl: '>=2.2.2'
  persistent: '>=2.8.2'
  random: '>=1.1'
  semigroups: '>=0.18.5'
  temporary: '>=1.3'
  text: '>=1.2.3.1'
  unliftio: '>=0.2.9.0'
  unliftio-core: '>=0.1.2.0'
changelog: |
  ## [_Unreleased_](https://github.com/freckle/graphula/compare/v2.1.0.0...main)

  ## [v2.1.0.0](https://github.com/freckle/graphula/compare/v2.0.2.2...v2.1.0.0)

  - Some unnecessary `SafeToInsert` have been removed from `node` and `nodeKeyed`.
    - `node` only requires `SafeToInsert` when the `KeySource` is `SourceDefault`,
      not when the `KeySource` is `KeyArbitrary`.
    - `nodeKeyed` no longer ever requires `SafeToInsert`
  - `MonadGraphulaFrontend` has a new `insertKeyed` method.

  ## [v2.0.2.2](https://github.com/freckle/graphula/compare/v2.0.2.1...v2.0.2.2)

  - Add missing MonadUnliftIO instance to GraphulaLoggedT

  ## [v2.0.2.1](https://github.com/freckle/graphula/compare/v2.0.1.1...v2.0.2.1)

  - Support persistent-2.14

  ## [v2.0.1.1](https://github.com/freckle/graphula/compare/v2.0.0.5...v2.0.1.1)

  - Support GHCs 9.0 and 9.2

  ## [v2.0.1.0](https://github.com/freckle/graphula/compare/v2.0.0.5...v2.0.1.0)

  - Add/improve documentation
  - Re-organize previously-internal module

  ## [v2.0.0.5](https://github.com/freckle/graphula/compare/v2.0.0.4...v2.0.0.5)

  - Release without dependencies upper bounds

  ## [v2.0.0.4](https://github.com/freckle/graphula/compare/v2.0.0.3...v2.0.0.4)

  - Relax persistent packages' upper bounds

  ## [v2.0.0.3](https://github.com/freckle/graphula/compare/v2.0.0.2...v2.0.0.3)

  - Relax dependencies upper bounds

  ## [v2.0.0.2](https://github.com/freckle/graphula/compare/v2.0.0.1...v2.0.0.2)

  - Support GHC-8.10 and unliftio-core 2.0.0

  ## [v2.0.0.1](https://github.com/faktory/graphula/tree/v2.0.0.1)

  First tagged release.
changelog-type: markdown
description: |
  # Graphula

  [![Hackage](https://img.shields.io/hackage/v/graphula.svg?style=flat)](https://hackage.haskell.org/package/graphula)
  [![Stackage Nightly](http://stackage.org/package/graphula/badge/nightly)](http://stackage.org/nightly/package/graphula)
  [![Stackage LTS](http://stackage.org/package/graphula/badge/lts)](http://stackage.org/lts/package/graphula)
  [![CI](https://github.com/freckle/graphula/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/graphula/actions/workflows/ci.yml)

  Graphula is a simple interface for generating persistent data and linking its
  dependencies. We use this interface to generate fixtures for automated testing.


  <!--
  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE DeriveGeneric #-}
  {-# LANGUAGE DerivingStrategies #-}
  {-# LANGUAGE ExistentialQuantification #-}
  {-# LANGUAGE FlexibleContexts #-}
  {-# LANGUAGE FlexibleInstances #-}
  {-# LANGUAGE GeneralizedNewtypeDeriving #-}
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE QuasiQuotes #-}
  {-# LANGUAGE StandaloneDeriving #-}
  {-# LANGUAGE TemplateHaskell #-}
  {-# LANGUAGE TypeApplications #-}
  {-# LANGUAGE TypeFamilies #-}
  {-# LANGUAGE TypeOperators #-}
  {-# LANGUAGE UndecidableInstances #-}
  {-# OPTIONS_GHC -fno-warn-name-shadowing #-}
  {-# OPTIONS_GHC -fno-warn-orphans #-}

  module Main (module Main) where

  import Control.Monad.IO.Class
  import Control.Monad.IO.Unlift
  import Control.Monad.Logger (NoLoggingT)
  import Control.Monad.Trans.Reader (ReaderT)
  import Control.Monad.Trans.Resource (ResourceT)
  import Database.Persist.Sqlite
  import Database.Persist.TH
  import GHC.Generics (Generic)
  import Graphula
  import Test.Hspec
  import Test.QuickCheck
  import Test.QuickCheck.Arbitrary.Generic
  import Text.Markdown.Unlit ()

  instance (ToBackendKey SqlBackend a) => Arbitrary (Key a) where
    arbitrary = toSqlKey <$> arbitrary
  ```
  -->

  ## Arbitrary Data

  Graphula utilizes `QuickCheck` to generate random data. We need to declare
  `Arbitrary` instances for our models.

  ```haskell
  share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
  School
    name String
    deriving Show Eq Generic

  Teacher
    schoolId SchoolId
    name String
    deriving Show Eq Generic

  Course
    schoolId SchoolId
    teacherId TeacherId
    name String
    deriving Show Eq Generic

  Student
    name String
    deriving Show Eq Generic

  Question
    content String
    deriving Show Eq Generic

  Answer
    questionId QuestionId
    studentId StudentId
    yes Bool
    UniqueAnswer questionId studentId
    deriving Show Eq Generic
  |]

  instance Arbitrary School where
    arbitrary = genericArbitrary

  instance Arbitrary Teacher where
    arbitrary = genericArbitrary

  instance Arbitrary Course where
    arbitrary = genericArbitrary

  instance Arbitrary Student where
    arbitrary = genericArbitrary

  instance Arbitrary Question where
    arbitrary = genericArbitrary

  instance Arbitrary Answer where
    arbitrary = genericArbitrary
  ```

  ## Dependencies

  We declare dependencies via the `HasDependencies` typeclass and its associated
  type `Dependencies`. If a model does not have any dependencies, we only need to
  declare an empty instance.

  ```haskell
  instance HasDependencies School

  instance HasDependencies Student

  instance HasDependencies Question
  ```

  For single-dependency models, we use the `Only` type.

  ```haskell
  instance HasDependencies Teacher where
    type Dependencies Teacher = Only SchoolId
  ```

  Multi-dependency models use tuples. Declare these dependencies in the order they
  appear in the model's type definition. `HasDependencies` leverages generic
  programming to inject dependencies for you.

  ```haskell
  instance HasDependencies Course where
    type Dependencies Course = (SchoolId, TeacherId)

  instance HasDependencies Answer where
    type Dependencies Answer = (QuestionId, StudentId)
  ```

  ## Logging failures

  `runGraphulaLogged` will dump generated data to a temporary file. Or
  `runGraphulaLoggedWithFileT` can be used to pass an explicit path.

  ```haskell
  loggingSpec :: IO ()
  loggingSpec = do
    let
      logFile :: FilePath
      logFile = "test.graphula"

      failingGraph :: IO ()
      failingGraph = runGraphulaT Nothing runDB . runGraphulaLoggedWithFileT logFile $ do
        student <- node @Student () mempty
        question <- node @Question () mempty
        answer <- node @Answer
          (entityKey question, entityKey student)
          $ edit $ \a -> a { answerYes = True }

        -- Test failures will cause the graph to be logged (not any exception)
        liftIO $ answerYes (entityVal answer) `shouldBe` False

    failingGraph `shouldThrow` anyException

    n <- lines <$> readFile logFile
    n `shouldSatisfy` (not . null)
  ```

  ## Running It

  ```haskell
  simpleSpec :: IO ()
  simpleSpec =
    runGraphulaT Nothing runDB $ do
      school <- node @School () mempty
      teacher <- node @Teacher (Only $ entityKey school) mempty
      course <- node @Course (entityKey school, entityKey teacher) mempty
      student <- node @Student () $ edit $ \s -> s { studentName = "Pat" }
      question <- node @Question () mempty
      answer <- node @Answer
        (entityKey question, entityKey student)
        $ edit $ \a -> a { answerYes = True }

      liftIO $ do
        -- Typically, you would run some other function like "fetch correct
        -- answers at school" and assert you found the correct answers you
        -- generated. In this example we just assert some things about the data
        -- directly:
        teacherSchoolId (entityVal teacher) `shouldBe` entityKey school
        courseTeacherId (entityVal course) `shouldBe` entityKey teacher
        answerYes (entityVal answer) `shouldBe` True
  ```

  <!--
  ```haskell
  main :: IO ()
  main = hspec $
    describe "graphula" . parallel $ do
      it "generates and links arbitrary graphs of data" simpleSpec
      it "allows logging graphs" loggingSpec

  runDB :: MonadUnliftIO m => ReaderT SqlBackend (NoLoggingT (ResourceT m)) a -> m a
  runDB f = runSqlite "test.db" $ do
    runMigration migrateAll
    f
  ```
  -->
description-type: markdown
hash: 4552e060c86fe87d12ce493c987c932e98d80ec5da2714f688994e7ba7c43656
homepage: https://github.com/freckle/graphula#readme
latest: 2.1.0.0
license-name: MIT
maintainer: Freckle Education
synopsis: A simple interface for generating persistent data and linking its dependencies
test-bench-deps:
  QuickCheck: '>=2.11.3'
  base: '>=4.11.1.0 && <5'
  generic-arbitrary: '>=0.1.0'
  graphula: '>=0'
  hspec: '>=2.5.5'
  markdown-unlit: '>=0.5.0'
  monad-logger: '>=0.3.30'
  persistent: '>=2.8.2'
  persistent-sqlite: '>=2.8.2'
  resourcet: '>=1.2.2'
  transformers: '>=0.5.5.0'
  unliftio-core: '>=0.1.2.0'
