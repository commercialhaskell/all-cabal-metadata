all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
author: Chris Penner
basic-deps:
  adjunctions: '>=0'
  base: '>=4.7 && <5'
  comonad: '>=0'
  deepseq: '>=0'
  distributive: '>=0'
  singletons: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for grids

  ## 0.3.0.0
  - Huge changes to Grid types, Coord types.
  - Add Convolution combinators
  - Add Permutation combinators

  ## 0.2.0.0
  - Add docs
  - Initial release

  ## Unreleased changes
changelog-type: markdown
description: "# Grids\n\n[HACKAGE](http://hackage.haskell.org/package/grids)\n\n**Note**
  this lib is still pretty new and relatively experimental, as such it\ndoesn't have
  great performance characteristics. Maybe don't use it in\nperformance critical applications.\n\nGrids
  can have an arbitrary amount of dimensions, specified by a type-level\nlist of `Nat`s.\n\nEach
  grid has Functor, Applicative, and Representable instances making it easy\nto do
  **Matlab-style** matrix programming. The `Applicative` instance operates\npiecewise
  making it easy to do most math operations. There's a `Num` instance\nfor grids holding
  numbers, so piecewise addition is just `grid1 + grid2`, the\n`fromInteger` implementation
  allows things like `myGrid * 5` to perform\nmultiplication (although it's likely
  less efficient than using fmap!)\n\nBy combining with `Control.Comonad.Representable.Store`
  you can do context-wise\n**linear transformations** for things like **Image Processing**
  or **Cellular\nAutomata**.\n\nAll in a typesafe package!\n\nGrids backed by a single
  contiguous Vector and gain the\nassociated performance benefits. Currently only
  boxed immutable vectors are\nsupported, but let me know if you need other variants.\n\nHere's
  how we might represent a Tic-Tac-Toe board which we'll fill with\nalternating X's
  and O's:\n\n```haskell\ndata Piece = X | O deriving Show\ntoPiece :: Int -> Piece\ntoPiece
  n = if even n then X\n                      else O\n\nticTacToe :: Grid [3, 3] Piece\nticTacToe
  = generate toPiece\n```\n\nYou can collapse the grid down to nested lists! The output
  type of\n`toNestedLists` depends on your dimensions, e.g.:\n\n- `Grid [3, 3] Piece`
  will generate: `[[Piece]]`\n- `Grid [2, 2, 2] Char` will generate: `[[[Char]]]`\n-
  ...etc\n\n```haskell\nλ> toNestedLists ticTacToe\n[ [X,O,X]\n, [O,X,O]\n, [X,O,X]]\n```\n\nYou
  can even create a grid from nested lists! `fromNestedLists` returns a grid\nif possible,
  or `Nothing` if the provided lists don't match the structure of\nthe grid you specify:\n\n```haskell\nλ>
  fromNestedLists [[1, 2], [3, 4]] :: Maybe (Grid '[2, 2] Int)\nJust (Grid [[1,2]\n
  \          ,[3,4]])\nλ> fromNestedLists [[1], [2]] :: Maybe (Grid '[2, 2] Int)\nNothing\n```\n\nGrids
  are Representable Functors, Applicatives, Foldable, and are Traversable!\n\nYou
  can do things like piecewise addition using their applicative instance:\n\n```haskell\nλ>
  let g = generate id :: Grid '[2, 3] Int\nλ> g\n(Grid [[0,1,2]\n      ,[3,4,5]])\nλ>
  liftA2 (+) g g\n(Grid [[0,2,4]\n      ,[6,8,10]])\nλ> liftA2 (*) g g\n(Grid [[0,1,4]\n
  \     ,[9,16,25]])\n```\n\n## Indexing\n\nYou can index into a grid using the `Coord`
  type. The number of\ncoordinates you need depends on the shape of the grid. \n`Coord`
  is really just a wrapping over a list of integers. It's recommended that\nyou use
  `coord` to safely construct `Coord` values, but you can cheat and use \nthe `Coord`
  constructor or even `OverLoadedLists` if you want to.\n\nYou can get a value out
  of a grid for a particular index out using `index` from `Data.Functor.Rep`:\n\n```haskell\nλ>
  let g = generate id :: Grid '[2, 3] Int\nλ> g\n(Grid [[0,1,2]\n      ,[3,4,5]])\nλ>
  g `index` Coord [1 , 1]\n4\nλ> g `index` Coord [1, 0]\n3\nλ> g `index` Coord [0,
  \ 2]\n2\n```\n\nYou can also use the `cell` Lens from `Data.Grid.Lens` to access
  and mutate\nindices:\n\n```haskell\nλ> g ^. cell (Coord [0, 1])\n1\nλ> g & cell
  (Coord [0, 1]) *~ 1000\n(Grid [[0,1000,2]\n      ,[3,4,5]])\n```\n\n## Creation\n\nYou
  can generate a grid by providing a function over the integer position in the grid
  (`generate`) or by providing\na function over the coordinate position of the cell
  (`tabulate`). Or of course you can just use `pure`.\n\nYou can also use the `fromList`
  and `fromNestedLists` functions which return a\n`Maybe (Grid dims a)` depending
  on whether the input list is well formed.\n\n- `fromList :: [a] -> Maybe (Grid dims
  a)`\n- `fromNestedLists :: NestedLists dims a -> Maybe (Grid dims a)`\n- `generate
  :: (Int -> a) -> Grid dims a`\n- `tabulate :: (Coord dims -> a) -> Grid dims a`\n-
  `pure :: a -> Grid dims a`\n\n## Updating\n\nUse either the `cell` lens, or fmap,
  applicative, traversable.\nFor batch updates using the underlying Vector implementation
  use `(//)`\n\n- `(//) :: Grid dims a -> [(Coord dims, a)] -> Grid dims a`\n\n##
  Cellular Automata\nSee the [haddock docs](http://hackage.haskell.org/package/grids/docs/Data-Grid-Examples-Conway.html)
  \nfor a guide on building Conway's game of life in only a few lines.\n\n## Convolution\nComing
  soon\n"
description-type: markdown
hash: 1230e0e2249ce74ad092329410b1a87c5bcbeb88aa148f0131bdc43385ba3362
homepage: https://github.com/ChrisPenner/grids#readme
latest: 0.5.0.1
license-name: BSD-3-Clause
maintainer: christopher.penner@gmail.com
synopsis: ''
test-bench-deps:
  adjunctions: '>=0'
  base: '>=4.7 && <5'
  comonad: '>=0'
  deepseq: '>=0'
  distributive: '>=0'
  gauge: '>=0'
  grids: '>=0'
  hspec: '>=0'
  singletons: '>=0'
  vector: '>=0'
