all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
author: Sirui Lu, Rastislav BodÃ­k
basic-deps:
  QuickCheck: '>=2.14 && <2.16'
  array: '>=0.5.4 && <0.6'
  async: '>=2.2.2 && <2.3'
  base: '>=4.14 && <5'
  bytestring: '>=0.10.12 && <0.13'
  deepseq: '>=1.4.4 && <1.6'
  generic-deriving: '>=1.14.1 && <1.15'
  hashable: '>=1.2.3 && <1.5'
  hashtables: '>=1.2.3.4 && <1.4'
  intern: '>=0.9.2 && <0.10'
  loch-th: '>=0.2.2 && <0.3'
  mtl: '>=2.2.2 && <2.4'
  parallel: '>=3.2.2.0 && <3.3'
  prettyprinter: '>=1.5.0 && <1.8'
  sbv: '>=8.17 && <11'
  stm: '>=2.5 && <2.6'
  template-haskell: '>=2.16 && <2.23'
  text: '>=1.2.4.1 && <2.2'
  th-compat: '>=0.1.2 && <0.2'
  transformers: '>=0.5.6 && <0.7'
  unordered-containers: '>=0.2.11 && <0.3'
changelog: |
  # Changelog

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [Semantic
  Versioning](https://semver.org/spec/v2.0.0.html).

  ## [0.6.0.0]

  ### Added

  - Added solving procedures with solver handles.
    ([#198](https://github.com/lsrcz/grisette/pull/198))
  - Added `overestimateUnionValues`.
    ([#203](https://github.com/lsrcz/grisette/pull/203))
  - Added pretty printing for hashset and hashmaps.
    ([#205](https://github.com/lsrcz/grisette/pull/205))
  - Added support for refinement of solutions in CEGIS algorithm.
    ([#206](https://github.com/lsrcz/grisette/pull/206))
  - Added generation of globally unique identifier with `uniqueIdentifier`.
    ([#206](https://github.com/lsrcz/grisette/pull/206))
  - Added support for arbitrary precision floating point theory.
    ([#207](https://github.com/lsrcz/grisette/pull/207))

  ### Fixed

  - `withSolver` now forcifully terminate the solver when exiting the scope.
    ([#199](https://github.com/lsrcz/grisette/pull/199))
  - Fixed pretty printing for monad transformers.
    ([#205](https://github.com/lsrcz/grisette/pull/205))

  ### Changed

  - [Breaking] Equality test for `SomeBV` with different bit widths will now
    return false rather than crash.
    ([#200](https://github.com/lsrcz/grisette/pull/200))
  - [Breaking] More intuitive CEGIS interface.
    ([#201](https://github.com/lsrcz/grisette/pull/201))
  - [Breaking] Changed the low-level solver interface.
    ([#206](https://github.com/lsrcz/grisette/pull/206))
  - [Breaking] Changed the CEGIS interface.
    ([#206](https://github.com/lsrcz/grisette/pull/206))
  - Bumped the minimum supported sbv version to 8.17.
    ([#207](https://github.com/lsrcz/grisette/pull/207))

  ## [0.5.0.1] -- 2024-04-18

  ### Fixed

  - Fix an building error due to a GHC 9.8.1 regression
    (https://gitlab.haskell.org/ghc/ghc/-/issues/24084).
    ([#195](https://github.com/lsrcz/grisette/pull/195))

  ## [0.5.0.0] -- 2024-04-18

  ### Added

  - Added the creation of unparameterized bit vectors from run-time bit-widths.
    ([#168](https://github.com/lsrcz/grisette/pull/168),
    [#177](https://github.com/lsrcz/grisette/pull/177))
  - Added all the functions available for the exception transformer in
    `transformers` and `mtl` packages.
    ([#171](https://github.com/lsrcz/grisette/pull/171))
  - Improved the partial evaluation for bit vectors.
    ([#176](https://github.com/lsrcz/grisette/pull/176))
  - Added `symRotateNegated` and `symShiftNegated`.
    ([#181](https://github.com/lsrcz/grisette/pull/181))
  - Added `mrg` and `sym` variants for all reasonable operations from
    `Control.Monad`, `Control.Applicative`, `Data.Foldable`, `Data.List`, and
    `Data.Traversable`. ([#182](https://github.com/lsrcz/grisette/pull/182))
  - Added `mrgIfPropagatedStrategy`.
    ([#184](https://github.com/lsrcz/grisette/pull/184))
  - Added `freshString`. ([#188](https://github.com/lsrcz/grisette/pull/188))
  - Added `localFreshIdent`. ([#190](https://github.com/lsrcz/grisette/pull/190))
  - Added deriving for void types for builtin type classes.
    ([#191](https://github.com/lsrcz/grisette/pull/191))

  ### Fixed

  - Fixed the merging for safe division.
    ([#173](https://github.com/lsrcz/grisette/pull/173))
  - Fixed the behavior for safe `mod` and `rem` for signed, bounded concrete
    types. ([#173](https://github.com/lsrcz/grisette/pull/173))
  - Fixed merging in `mrg*` operations for monad transformers to ensure that they
    merge the results. ([#187](https://github.com/lsrcz/grisette/pull/187))

  ### Changed

  - [Breaking] Removed the `UnionLike` and `UnionPrjOp` interface, added the
    `TryMerge` and `PlainUnion` interface. This allows `mrg*` operations to be
    used with non-union programs.
    ([#170](https://github.com/lsrcz/grisette/pull/170))
  - [Breaking] Refined the safe operations interface using `TryMerge`.
    ([#172](https://github.com/lsrcz/grisette/pull/172))
  - [Breaking] Renamed `safeMinus` to `safeSub` to be more consistent.
    ([#172](https://github.com/lsrcz/grisette/pull/172))
  - [Breaking] Unifies the implementation for all symbolic non-indexed
    bit-vectors. The legacy types are now type and pattern synonyms.
    ([#174](https://github.com/lsrcz/grisette/pull/174),
    [#179](https://github.com/lsrcz/grisette/pull/179),
    [#180](https://github.com/lsrcz/grisette/pull/180))
  - [Breaking] Use functional dependency instead of type family for the `Function`
    class. ([#178](https://github.com/lsrcz/grisette/pull/178))
  - [Breaking] Added `Mergeable` constraints to some `mrg*` list operators
    ([#182](https://github.com/lsrcz/grisette/pull/182))
  - [Breaking] Refactored the `mrg*` constructor related template haskell code.
    ([#185](https://github.com/lsrcz/grisette/pull/185))
  - [Breaking] Dropped symbols with extra information.
    ([#188](https://github.com/lsrcz/grisette/pull/188))
  - [Breaking] The `FreshIdent` is removed. It is now changed to `Identifier` and
    `Symbol` types. ([#192](https://github.com/lsrcz/grisette/pull/192))
  - Changed the internal representation of the terms.
    ([#193](https://github.com/lsrcz/grisette/pull/193))
  - [Breaking] Refactored the project structures.
    ([#194](https://github.com/lsrcz/grisette/pull/194))

  ## [0.4.1.0] -- 2024-01-10

  ### Added

  - Added `cegisForAll` interfaces.
    ([#165](https://github.com/lsrcz/grisette/pull/165))

  ## [0.4.0.0] -- 2024-01-08

  ### Added

  - Added wrappers for state transformers.
    ([#132](https://github.com/lsrcz/grisette/pull/132))
  - Added `toGuardList` function.
    ([#137](https://github.com/lsrcz/grisette/pull/137))
  - Exported some previously hidden API (`BVSignConversion`, `runFreshTFromIndex`)
    that we found useful or forgot to export.
    ([#138](https://github.com/lsrcz/grisette/pull/138),
    [#139](https://github.com/lsrcz/grisette/pull/139))
  - Provided `mrgRunFreshT` to run `FreshT` with merging.
    ([#140](https://github.com/lsrcz/grisette/pull/140))
  - Added `Grisette.Data.Class.SignConversion.SignConversion` for types from
    `Data.Int` and `Data.Word`.
    ([#142](https://github.com/lsrcz/grisette/pull/142))
  - Added shift functions by symbolic shift amounts.
    ([#151](https://github.com/lsrcz/grisette/pull/151))
  - Added `apply` for uninterpreted functions.
    ([#155](https://github.com/lsrcz/grisette/pull/155))
  - Added `liftFresh` to lift a `Fresh` into `MonadFresh`.
    ([#156](https://github.com/lsrcz/grisette/pull/156))
  - Added a handle types for SBV solvers. This allows users to use SBV solvers
    without the need to wrap everything in the SBV monads.
    ([#159](https://github.com/lsrcz/grisette/pull/159))
  - Added a new generic CEGIS interface. This allows any verifier/fuzzer to be
    used in the CEGIS loop. ([#159](https://github.com/lsrcz/grisette/pull/159))

  ### Removed

  - [Breaking] Removed the `Grisette.Lib.Mtl` module.
    ([#132](https://github.com/lsrcz/grisette/pull/132))
  - [Breaking] Removed `SymBoolOp` and `SymIntegerOp`.
    ([#146](https://github.com/lsrcz/grisette/pull/146))
  - [Breaking] Removed `ExtractSymbolics` instance for `SymbolSet`.
    ([#146](https://github.com/lsrcz/grisette/pull/146))

  ### Fixed

  - Removed the quotation marks around the pretty printed results for string-like
    data types. ([#127](https://github.com/lsrcz/grisette/pull/127))
  - Fixed the `SOrd` instance for `VerificationConditions`.
    ([#131](https://github.com/lsrcz/grisette/pull/131))
  - Fixed the missing `SubstituteSym` instance for `UnionM`.
    ([#131](https://github.com/lsrcz/grisette/pull/131))
  - Fixed the symbolic generation order for `Maybe`.
    ([#131](https://github.com/lsrcz/grisette/pull/131))
  - Fixed the `toInteger` function for `IntN 1`.
    ([#143](https://github.com/lsrcz/grisette/pull/143))
  - Fixed the `abs` function for `WordN`.
    ([#144](https://github.com/lsrcz/grisette/pull/143))
  - Fixed the QuickCheck shrink function for `WordN 1` and `IntN 1`.
    ([#149](https://github.com/lsrcz/grisette/pull/149))
  - Fixed the heap overflow bug for `shiftL` for `WordN` and `IntN` by large
    numbers. ([#150](https://github.com/lsrcz/grisette/pull/150))

  ### Changed

  - Reorganized the files for `MonadTrans`.
    ([#132](https://github.com/lsrcz/grisette/pull/132))
  - [Breaking] Changed the name of `Union` constructors and patterns.
    ([#133](https://github.com/lsrcz/grisette/pull/133))
  - The `Union` patterns, when used as constructors, now merges the result.
    ([#133](https://github.com/lsrcz/grisette/pull/133))
  - Changed the symbolic identifier type from `String` to `Data.Text.Text`.
    ([#141](https://github.com/lsrcz/grisette/pull/141))
  - [Breaking] `Grisette.Data.Class.BitVector.BVSignConversion` is now
    `Grisette.Data.Class.SignConversion.SignConversion`.
    ([#142](https://github.com/lsrcz/grisette/pull/142))
  - [Breaking] Moved the `ITEOp`, `LogicalOp`, and `SEq` type classes to dedicated
    modules. ([#146](https://github.com/lsrcz/grisette/pull/146))
  - [Breaking] Moved `Grisette.Data.Class.Evaluate` to
    `Grisette.Data.Class.EvaluateSym`.
    ([#146](https://github.com/lsrcz/grisette/pull/146))
  - [Breaking] Moved `Grisette.Data.Class.Substitute` to
    `Grisette.Data.Class.SubstituteSym`.
    ([#146](https://github.com/lsrcz/grisette/pull/146))
  - [Breaking] Split the `Grisette.Data.Class.SafeArith` module to
    `Grisette.Data.Class.SafeDivision` and `Grisette.Data.Class.SafeLinearArith`.
    ([#146](https://github.com/lsrcz/grisette/pull/146))
  - [Breaking] Changed the API to `MonadFresh`.
    ([#156](https://github.com/lsrcz/grisette/pull/156))
  - [Breaking] Renamed multiple symbolic operators.
    ([#158](https://github.com/lsrcz/grisette/pull/158))
  - [Breaking] Changed the solver interface.
    ([#159](https://github.com/lsrcz/grisette/pull/159))
  - [Breaking] Changed the CEGIS solver interface.
    ([#159](https://github.com/lsrcz/grisette/pull/159))

  ## [0.3.1.1] -- 2023-09-29

  No user-facing changes.

  ## [0.3.1.0] -- 2023-07-19

  ### Added

  - Added support to `Data.Text`.
    ([#95](https://github.com/lsrcz/grisette/pull/95))
  - Added `Arbitrary` instances for bit vectors.
    ([#97](https://github.com/lsrcz/grisette/pull/97))
  - Added pretty printers for Grisette data types.
    ([#101](https://github.com/lsrcz/grisette/pull/101))
  - Added `ExtractSymbolics` instances for tuples longer than 2.
    ([#103](https://github.com/lsrcz/grisette/pull/103))

  ### Fixed

  - Fixed the `Read` instance for bit vectors.
    ([#99](https://github.com/lsrcz/grisette/pull/99),
    [#100](https://github.com/lsrcz/grisette/pull/100))

  ## [0.3.0.0] -- 2023-07-07

  ### Added

  - Added the conversion between signed and unsigned bit vectors.
    ([#69](https://github.com/lsrcz/grisette/pull/69))
  - Added the generation of `SomeSymIntN` and `SomeSymWordN` from a single `Int`
    for bit width. ([#73](https://github.com/lsrcz/grisette/pull/73))
  - Added the `FiniteBits` instance for `SomeSymIntN` and `SomeSymWordN`.
    ([#83](https://github.com/lsrcz/grisette/pull/83))
  - Added more flexible instances for symbolic generation for `Either`, `Maybe`
    and list types. ([#84](https://github.com/lsrcz/grisette/pull/84))
  - Added an experimental `GenSymConstrained` type class.
    ([#89](https://github.com/lsrcz/grisette/pull/89))

  ### Changed

  - Changed the operations for `SomeIntN` and `SomeWordN` to accepting dynamic
    runtime integers rather than compile-time integers.
    ([#71](https://github.com/lsrcz/grisette/pull/71))
  - Comparing the equality of `SomeIntN`/`SomeWordN`/`SomeSymIntN`/`SomeSymWordN`
    with different bit widths returns false rather than crash now.
    ([#74](https://github.com/lsrcz/grisette/pull/74))

  ### Fixed

  - Fixed the compatibility issue with sbv 10+.
    ([#66](https://github.com/lsrcz/grisette/pull/66))
  - Fixed build error with newer GHC.
    ([#70](https://github.com/lsrcz/grisette/pull/70))
  - Fixed the merging for `SomeSymIntN` and `SomeSymWordN`.
    ([#72](https://github.com/lsrcz/grisette/pull/72))

  ## [0.2.0.0] - 2023-04-13

  ### Added

  - Add term size count API. ([#48](https://github.com/lsrcz/grisette/pull/48),
    [#53](https://github.com/lsrcz/grisette/pull/53))
  - Add timeout to solver interface.
    ([#49](https://github.com/lsrcz/grisette/pull/49),
    [#50](https://github.com/lsrcz/grisette/pull/50))
  - Add parallel do-notation for parallel symbolic compilation.
    ([#51](https://github.com/lsrcz/grisette/pull/51))
  - Added some missing instances for symbolic values and bit vectors.
    ([#46](https://github.com/lsrcz/grisette/pull/46),
    [#61](https://github.com/lsrcz/grisette/pull/61))
  - Add missing instances for `MonadFresh` and `FreshT`.
    ([#59](https://github.com/lsrcz/grisette/pull/59))

  ### Changed

  - New safe operator interfaces.
    ([#56](https://github.com/lsrcz/grisette/pull/56))
  - Redesigned symbolic value interface.
    - `Sym Bool`/`Sym Integer`, etc., are no longer available and are replaced
      with `SymBool` and `SymInteger`.
      ([#41](https://github.com/lsrcz/grisette/pull/41))
    - New symbolic bit vector interface. Added unsized bit vector.
      ([#41](https://github.com/lsrcz/grisette/pull/41))

  ### Removed

  - Dropped merging cache for `UnionM`. This fixed some segmentation fault errors.
    ([#43](https://github.com/lsrcz/grisette/pull/43))

  ### Fixed

  - Fix CEGIS when no symbolic input is present.
    ([#52](https://github.com/lsrcz/grisette/pull/52))
  - Fix overlapping `ToSym` and `ToCon` instances.
    ([#54](https://github.com/lsrcz/grisette/pull/54))
  - Fix uninterpreted function lowering.
    ([#57](https://github.com/lsrcz/grisette/pull/57),
    [#58](https://github.com/lsrcz/grisette/pull/58))
  - Fix CEGIS crash when subsequent solver calls introduces new symbolic constant.
    ([#60](https://github.com/lsrcz/grisette/pull/60))

  ## [0.1.0.0] - 2023-01-20

  ### Added

  - Initial release for Grisette.

  [Unreleased]: https://github.com/lsrcz/grisette/compare/v0.6.0.0...HEAD
  [0.6.0.0]: https://github.com/lsrcz/grisette/compare/v0.5.0.1...v0.6.0.0
  [0.5.0.1]: https://github.com/lsrcz/grisette/compare/v0.5.0.0...v0.5.0.1
  [0.5.0.0]: https://github.com/lsrcz/grisette/compare/v0.4.1.0...v0.5.0.0
  [0.4.1.0]: https://github.com/lsrcz/grisette/compare/v0.4.0.0...v0.4.1.0
  [0.4.0.0]: https://github.com/lsrcz/grisette/compare/v0.3.1.1...v0.4.0.0
  [0.3.1.1]: https://github.com/lsrcz/grisette/compare/v0.3.1.0...v0.3.1.1
  [0.3.1.0]: https://github.com/lsrcz/grisette/compare/v0.3.0.0...v0.3.1.0
  [0.3.0.0]: https://github.com/lsrcz/grisette/compare/v0.2.0.0...v0.3.0.0
  [0.2.0.0]: https://github.com/lsrcz/grisette/compare/v0.1.0.0...v0.2.0.0
  [0.1.0.0]: https://github.com/lsrcz/grisette/tree/v0.1.0.0
changelog-type: markdown
description: "# Grisette\n\n[![Haskell Tests](https://github.com/lsrcz/grisette/actions/workflows/test.yml/badge.svg)](https://github.com/lsrcz/grisette/actions/workflows/test.yml)\n[![Hackage
  Version](https://img.shields.io/hackage/v/grisette)](https://hackage.haskell.org/package/grisette)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/grisette)](https://packdeps.haskellers.com/feed?needle=grisette)\n\nGrisette
  is a symbolic evaluation library for Haskell. By translating\nprograms into constraints,
  Grisette can help the development of program\nreasoning tools, including verification
  and synthesis.\n\nFor a detailed description of the system, please refer to our
  POPL'23 paper\n[Grisette: Symbolic Compilation as a Functional Programming Library](https://lsrcz.github.io/files/POPL23.pdf).\n\n##
  Features\n\n- **Multi-path** symbolic evaluation with efficient (customizable) state
  merging.\n- Symbolic evaluation is **purely functional**. The propagated symbolic
  value includes the assertion / error state of the execution, yet it is just a data
  structure. As a result, Grisette is a library that does not modify the Haskell compiler.\n-
  The separation of symbolic and concrete values is enforced with **static types**.
  These types help discover opportunities for partial evaluation as well as safe use
  of Haskell libraries.\n\n## Design and Benefits\n\n- Modular purely functional design,
  with a focus on composability.\n  - Allows for symbolic evaluation of user-defined
  data structures / data\n    structures from third-party libraries.\n  - Allows for
  symbolic evaluation of error-handling code with user-defined\n    error types.\n
  \ - Allows for memoization (tested and benchmarked) / parallelization (not\n    tested
  and benchmarked yet) of symbolic evaluation.\n- Core multi-path symbolic evaluation
  semantics modeled as a monad, allowing for\n  easy integration with other monadic
  effects, for example:\n  - error handling via `ExceptT`,\n  - stateful computation
  via `StateT`,\n  - unstructured control flow via `ContT`, etc.\n\n## Installation\n\n###
  Install Grisette\n\nGrisette is available via\n[Hackage](https://hackage.haskell.org/package/grisette).
  You can add it to your\nproject with `cabal`, and we also provided a stack template
  for quickly starting a\nnew project with Grisette.\n\n#### Manually writing cabal
  file\n\nGrisette is a library and is usually used as a dependency of other\npackages.
  You can add it to your project's `.cabal` file:\n\n```cabal\nlibrary\n  ...\n  build-depends:
  grisette >= 0.6 < 0.7\n```\n\n#### Quick start template with `stack new`\n\nYou
  can quickly start an stack-based Grisette project with `stack new`:\n\n```bash\n$
  stack new <projectname> github:lsrcz/grisette\n```\n\nYou can specify the resolver
  version with the parameters:\n\n```bash\n$ stack new a-new-project github:lsrcz/grisette
  -p \"resolver:lts-19.33\"\n```\n\nFor more details, please see the\n[template file](https://github.com/lsrcz/stack-templates/blob/main/grisette.hsfiles)
  and the\n[documentation for stack templates](https://docs.haskellstack.org/en/stable/templates_command/).\n\nYou
  can test your installation by running the following command:\n\n```bash\n$ stack
  run app\n```\n\nThe command assumes a working [Z3](https://github.com/Z3Prover/z3)
  available\nthrough `PATH`. You can install it with the instructions below.\n\n###
  Install SMT Solvers\n\nTo run the examples, you also need to install an SMT solver
  and make it\navailable through `PATH`. We recommend that you start with\n[Z3](https://github.com/Z3Prover/z3),
  as it supports all our examples and is\nusually easier to install.\n[Boolector](https://github.com/Boolector/boolector)
  is significantly more\nefficient on some examples, but it does not support all of
  the examples.\n\n#### Install Z3\n\nOn Ubuntu, you can install Z3 with:\n\n```bash\n$
  apt update && apt install z3\n```\n\nOn macOS, with [Homebrew](https://brew.sh/),
  you can install Z3 with:\n\n```bash\nbrew install z3\n```\n\nYou may also build
  Z3 from source, which may be more efficient on your system.\nPlease refer to the
  [Z3 homepage](https://github.com/Z3Prover/z3) for the build\ninstructions.\n\n####
  Install Boolector\n\nBoolector from major package managers are usually outdated
  or inexist. We\nrecommend that you build Boolector from source with the CaDiCaL
  SAT solver,\nwhich is usually more efficient on our examples.\nPlease refer to the
  [Boolector homepage](https://github.com/Boolector/boolector)\nfor the build instructions.\n\n##
  Example\n\nThe following example uses Grisette to build a synthesizer of arithmetic
  programs. Given the input-output pair (2,5), the synthesizer may output the program
  (\\x -> x+3). The example is adapted from [this blog\npost](https://www.cs.utexas.edu/~bornholt/post/building-synthesizer.html)
  by\nJames Bornholt.\n\nThe example has three parts:\n\n- We define the arithmetic
  language. The language is _symbolic_:\n  - its syntax tree represents a set of concrete
  syntax trees, and\n  - its interpreter accepts such symbolic syntax trees, and interprete
  at once all represented concrete syntax trees.\n- We define the candidate program
  space of the synthesizer by creating a particular symbolic syntax tree. The synthesizer
  will search the space of concrete trees for a solution.\n- We interpret the symbolic
  syntax tree and pass the resulting constraints to the solver. If a solution exists,
  the solver returns a concrete tree that agrees with the input-out example.\n\n###
  Defining the Arithmetic Language\n\nWe will synthesize single-input programs in
  this example.\nA single input program will be `\\x -> E`, where `E` is an expression
  defined by\nthe following grammar:\n\n```\nE -> c      -- constant\n   | x      --
  value for input variable\n   | E + E  -- addition\n   | E * E  -- multiplication\n```\n\nThe
  syntax defines how a concrete expression is represented. To synthesis a\nprogram,
  we need to define symbolic program spaces. This relies on the `UnionM`\ncontainer
  provided by the library to represent multiple ASTs compactly in a\nsingle value.\n\nTo
  make this expression space type work with Grisette, a set of type classes\nshould
  be derived. This includes `Mergeable`, `EvaluateSym`, etc.\nThe `Mergeable` type
  classes allows to represent multiple ASTs compactly in a\n`UnionM`, while the `EvaluateSym`
  type class allows to evaluate it given a model\nreturned by a solver to replace
  the symbolic holes inside to concrete values.\n\n```haskell\n{-# LANGUAGE DerivingVia
  #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE
  ScopedTypeVariables #-}\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Grisette\nimport
  GHC.Generics\n\ndata SExpr\n  -- `SConst` represents a constant in the syntax tree.\n
  \ --\n  -- `SConst 1` is the constant 1, while `SConst \"c1\"` is a symbolic constant,\n
  \ -- and the solver can be used to find out what the concrete value should be.\n
  \ = SConst SymInteger\n  -- `SInput` is very similar to the `SConst`, but is for
  inputs. We separate\n  -- these two mainly for clarity.\n  | SInput SymInteger\n
  \ -- `SPlus` and `SMul` represent the addition and multiplication operators.\n  --\n
  \ -- The children are **sets** of symbolic programs. Here `UnionM`s are such\n  --
  sets.\n  --\n  -- The solver will try to pick one concrete program from the set
  of programs.\n  | SPlus (UnionM SExpr) (UnionM SExpr)\n  | SMul (UnionM SExpr) (UnionM
  SExpr)\n  -- `Generic` helps us derive other type class instances for `SExpr`.\n
  \ deriving stock (Generic, Show)\n  -- Some type classes provided by Grisette for
  building symbolic evaluation\n  -- tools. See the documentation for more details.\n
  \ deriving (Mergeable, EvaluateSym)\n    via (Default SExpr)\n\n-- A template haskell
  procedure to help the construction of `SExpr` sets.\n--\n-- >>> SConst 1 :: SExpr\n--
  SConst 1\n-- >>> mrgSConst 1 :: UnionM SExpr\n-- {SConst 1}\nmkMergeConstructor
  \"mrg\" ''SExpr\n```\n\nThen we can define the program space.\nThe following code
  defines a program space `\\x -> x + {x, c}`. Some example\nprograms in this space
  are `\\x -> x + x`, `\\x -> x + 1`, and `\\x -> x + 2`.\nThe solver will be used
  to choose the right hand side of the addition. It may\nchoose to use the input variable
  `x`, or synthesize a constant `c`.\n\n```haskell\nspace :: SymInteger -> SExpr\nspace
  x = SPlus\n  (mrgSInput x)\n  (mrgIf \"choice\" (mrgSInput x) (mrgSConst \"c\"))\n```\n\nWe
  then need to convert this program space to its logical encoding, and we do this
  by writing an interpreter to interpret all the\nexpressions represented by an `SExpr`
  all at once. The interpreter looks very\nsimilar to a normal interpreter, except
  that the `onUnion` combinator is used\nto lift the interpreter to work on `UnionM`
  values.\n\n```haskell\ninterpret :: SExpr -> SymInteger\ninterpret (SConst x) =
  x\ninterpret (SInput x) = x\ninterpret (SPlus x y) = interpretU x + interpretU y\ninterpret
  (SMul x y) = interpretU x * interpretU y\n\n-- interpet a set of programs\ninterpretU
  :: UnionM SExpr -> SymInteger\ninterpretU = onUnion interpret\n```\n\nAnd we can
  compose the interpreter with the program space to get it executable.\n\n```haskell\nexecutableSpace
  :: Integer -> SymInteger\nexecutableSpace = interpret . space . toSym\n```\n\nThen
  we can do synthesis. We call the program space on the input 2, and construct the
  constraint that the result is equal to 5. We then call the solver with the `solve`
  function. The solver is able to find a solution, and it will return the assignments
  to the symbolic constants as a model.\n\nWe can then use the model to evaluate the
  program space, and get the synthesized program.\n\n```haskell\nexample :: IO ()\nexample
  = do\n  Right model <- solve (precise z3) $ executableSpace 2 .== 5\n  print $ evaluateSym
  False model (space \"x\")\n  -- result: SPlus {SInput x} {SConst 3}\n  let synthesizedProgram
  :: Integer -> Integer =\n        evaluateSymToCon model . executableSpace\n  print
  $ synthesizedProgram 10\n  -- result: 13\n```\n\nFor more details, please refer
  to [the Grisette examples](https://github.com/lsrcz/grisette-examples) (WIP).\n\n##
  Documentation\n\n- Haddock documentation at [grisette](https://hackage.haskell.org/package/grisette).\n-
  A tutorial to Grisette is in the [tutorials](tutorials) directory. They are\n  provided
  as jupyter notebooks with the [IHaskell](https://github.com/IHaskell/IHaskell) kernel.\n\n##
  License\n\nThe Grisette library is distributed under the terms of the BSD3 license.
  The\n[LICENSE](LICENSE) file contains the full license text.\n\n## Note\n\nGrisette
  currently supports boolean, uninterpreted functions, bitvector,\ninteger, and floating
  point theories. However, if you want to use the floating\npoint theory, please make
  sure that you have the latest libBF (>=0.6.8) and sbv \ninstalled (>=10.10.6). We've
  detected and fixed several bugs that would prevent\na sound reasoning for floating
  points.\n\n## Citing Grisette\n\nIf you use Grisette in your research, please use
  the following bibtex entry:\n\n```bibtex\n@article{10.1145/3571209,\nauthor = {Lu,
  Sirui and Bod\\'{\\i}k, Rastislav},\ntitle = {Grisette: Symbolic Compilation as
  a Functional Programming Library},\nyear = {2023},\nissue_date = {January 2023},\npublisher
  = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume
  = {7},\nnumber = {POPL},\nurl = {https://doi.org/10.1145/3571209},\ndoi = {10.1145/3571209},\nabstract
  = {The development of constraint solvers simplified automated reasoning about programs
  and shifted the engineering burden to implementing symbolic compilation tools that
  translate programs into efficiently solvable constraints. We describe Grisette,
  a reusable symbolic evaluation framework for implementing domain-specific symbolic
  compilers. Grisette evaluates all execution paths and merges their states into a
  normal form that avoids making guards mutually exclusive. This ordered-guards representation
  reduces the constraint size 5-fold and the solving time more than 2-fold. Grisette
  is designed entirely as a library, which sidesteps the complications of lifting
  the host language into the symbolic domain. Grisette is purely functional, enabling
  memoization of symbolic compilation as well as monadic integration with host libraries.
  Grisette is statically typed, which allows catching programming errors at compile
  time rather than delaying their detection to the constraint solver. We implemented
  Grisette in Haskell and evaluated it on benchmarks that stress both the symbolic
  evaluation and constraint solving.},\njournal = {Proc. ACM Program. Lang.},\nmonth
  = {jan},\narticleno = {16},\nnumpages = {33},\nkeywords = {State Merging, Symbolic
  Compilation}\n}\n```\n"
description-type: markdown
hash: 9e94b58d63ef199ae73fe9d1344bb80c657c03e18f0ef4e0db49406654024e43
homepage: https://github.com/lsrcz/grisette#readme
latest: 0.6.0.0
license-name: BSD-3-Clause
maintainer: Sirui Lu (siruilu@cs.washington.edu)
synopsis: Symbolic evaluation as a library
test-bench-deps:
  Glob: '>=0'
  HUnit: '>=1.6 && <1.7'
  QuickCheck: '>=2.14 && <2.16'
  array: '>=0.5.4 && <0.6'
  async: '>=2.2.2 && <2.3'
  base: '>=4.14 && <5'
  bytestring: '>=0.10.12 && <0.13'
  deepseq: '>=1.4.4 && <1.6'
  doctest: '>=0.18.2 && <0.23'
  generic-deriving: '>=1.14.1 && <1.15'
  grisette: '>=0'
  hashable: '>=1.2.3 && <1.5'
  hashtables: '>=1.2.3.4 && <1.4'
  intern: '>=0.9.2 && <0.10'
  loch-th: '>=0.2.2 && <0.3'
  mtl: '>=2.2.2 && <2.4'
  parallel: '>=3.2.2.0 && <3.3'
  prettyprinter: '>=1.5.0 && <1.8'
  sbv: '>=8.17 && <11'
  stm: '>=2.5 && <2.6'
  template-haskell: '>=2.16 && <2.23'
  test-framework: '>=0.8.2 && <0.9'
  test-framework-hunit: '>=0.3.0.2 && <0.4'
  test-framework-quickcheck2: '>=0.3.0.5 && <0.4'
  text: '>=1.2.4.1 && <2.2'
  th-compat: '>=0.1.2 && <0.2'
  transformers: '>=0.5.6 && <0.7'
  unordered-containers: '>=0.2.11 && <0.3'
