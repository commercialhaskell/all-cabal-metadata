all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.9.0.0
author: Sirui Lu, Rastislav BodÃ­k
basic-deps:
  QuickCheck: '>=2.14 && <2.16'
  array: '>=0.5.4 && <0.6'
  async: '>=2.2.2 && <2.3'
  atomic-primops: '>=0.8.3 && <0.9'
  base: '>=4.14 && <5'
  binary: '>=0.8.8.0 && <0.9'
  bytes: '>=0.17.1 && <0.18'
  bytestring: '>=0.10.12 && <0.13'
  cereal: '>=0.5.8.1 && <0.6'
  cereal-text: '>=0.1.0.2 && <0.2'
  containers: '>=0.4 && <0.8'
  deepseq: '>=1.4.4 && <1.6'
  generic-deriving: '>=1.14.1 && <1.15'
  hashable: '>=1.2.3 && <1.6'
  libBF: '>=0.6.3 && <0.7'
  loch-th: '>=0.2.2 && <0.3'
  mtl: '>=2.2.2 && <2.4'
  parallel: '>=3.2.2.0 && <3.3'
  prettyprinter: '>=1.5.0 && <1.8'
  sbv: '>=8.17 && <12'
  stm: '>=2.5 && <2.6'
  template-haskell: '>=2.16 && <2.23'
  text: '>=1.2.4.1 && <2.2'
  th-abstraction: '>=0.4 && <0.8'
  th-compat: '>=0.1.2 && <0.2'
  th-lift-instances: '>=0.1.16 && <0.2'
  transformers: '>=0.5.6 && <0.7'
  unordered-containers: '>=0.2.17 && <0.3'
  vector: '>=0.12.1.2 && <0.14'
changelog: "# Changelog\n\nAll notable changes to this project will be documented
  in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  this project adheres to [Semantic\nVersioning](https://semver.org/spec/v2.0.0.html).\n\n##
  [0.9.0.0] - 2024-11-07\n\n### Added\n- Added missing instances for concrete general
  and tabular functions.\n  ([#249](https://github.com/lsrcz/grisette/pull/249))\n-
  Added eval mode constraint on demand.\n  ([#250](https://github.com/lsrcz/grisette/pull/250))\n-
  Added support for uninterpreted functions in unified interfaces.\n  ([#250](https://github.com/lsrcz/grisette/pull/250))\n-
  Added instances for concrete `Ratio` type.\n  ([#251](https://github.com/lsrcz/grisette/pull/251))\n-
  Added serialization for the core constructs.\n  ([#253](https://github.com/lsrcz/grisette/pull/253))\n-
  Added partial evaluation for distinct.\n  ([#254](https://github.com/lsrcz/grisette/pull/254))\n\n###
  Changed\n- [Breaking] Moved the constraints for the general and tabular functions
  and\n  simplified their instances declaration.\n  ([#249](https://github.com/lsrcz/grisette/pull/249))\n-
  [Breaking] Renamed `EvalMode` to `EvalModeAll`, renamed `MonadWithMode` to \n  `MonadEvalModeAll`.\n
  \ ([#250](https://github.com/lsrcz/grisette/pull/250))\n- Improved parallel symbolic
  evaluation performance.\n  ([#252](https://github.com/lsrcz/grisette/pull/252))\n-
  [Breaking] Changed the metadata for identifiers from existential arguments to\n
  \ s-expressions. ([#253](https://github.com/lsrcz/grisette/pull/253))\n- [Breaking]
  Changed the solving/cegis results from maintaining the exception\n  themselves to
  maintaining a textual representation of them.\n  ([#253](https://github.com/lsrcz/grisette/pull/253))\n-
  [Breaking] Changed the 'VerifierResult' type for CEGIS to allow it report that\n
  \ the verifier cannot find a counter example.\n  ([#257](https://github.com/lsrcz/grisette/pull/257))\n\n###
  Fixed\n- Fixed memory leak within the term cache.\n  ([#252](https://github.com/lsrcz/grisette/pull/252))\n-
  Fixed printing of bv terms.\n  ([#255](https://github.com/lsrcz/grisette/pull/255))\n-
  Fixed solverGenericCEGIS and make it also return the last failing cex.\n  ([#256](https://github.com/lsrcz/grisette/pull/256))\n-
  `solverGenericCEGIS` will only rerun possible verifiers now. This will improve\n
  \ overall verification performance.\n  ([#258](https://github.com/lsrcz/grisette/pull/258))\n-
  Fixed a **critical** bug in the lowering/evalSym/extractSym where the\n  intermediate
  states are not properly memoized.\n  ([#259](https://github.com/lsrcz/grisette/pull/259))\n\n##
  [0.8.0.0] - 2024-08-13\n\n### Added\n- Added pretty printer for models.\n  ([#225](https://github.com/lsrcz/grisette/pull/225))\n-
  Added support for algebraic reals (`AlgReal` and `SymAlgReal`).\n  ([#228](https://github.com/lsrcz/grisette/pull/228),\n
  \  [#229](https://github.com/lsrcz/grisette/pull/229))\n- Added support for quantifiers.\n
  \ ([#230](https://github.com/lsrcz/grisette/pull/230))\n- Added `SafeFdiv`, `SafeLogBase`,
  `DivOr`, `FdivOr`, and `LogBaseOr`.\n  ([#228](https://github.com/lsrcz/grisette/pull/228),\n
  \  [#231](https://github.com/lsrcz/grisette/pull/231))\n- Added bitcast from and
  to `Bool`, `IntN`, `WordN`, `FP` and their symbolic\n  counterparts when appropriate.\n
  \ ([#232](https://github.com/lsrcz/grisette/pull/232))\n- Add `SymFromIntegral`.
  ([#233](https://github.com/lsrcz/grisette/pull/233))\n- Add operations for concrete
  floating point numbers. Add IEEE754-2019\n  `fpMinimum`, `fpMinimumNumber`, `fpMaximum`,
  and `fpMaximumNumber` operations.\n  ([#235](https://github.com/lsrcz/grisette/pull/235))\n-
  Add conversion from and to floating points.\n  ([#236](https://github.com/lsrcz/grisette/pull/236))\n-
  Add `SymFiniteBits`. ([#237](https://github.com/lsrcz/grisette/pull/237))\n- Add
  unified instances for all provided operations, including `FP` and\n  `AlgReal`.\n
  \ ([#239](https://github.com/lsrcz/grisette/pull/239),\n   [#240](https://github.com/lsrcz/grisette/pull/240),\n
  \  [#243](https://github.com/lsrcz/grisette/pull/243))\n- Allow the use of number
  literals for `SomeBV`.\n  ([#245](https://github.com/lsrcz/grisette/pull/245))\n-
  Add `symDistinct`.\n  ([#246](https://github.com/lsrcz/grisette/pull/246),\n   [#247](https://github.com/lsrcz/grisette/pull/247))\n\n###
  Fixed\n- Fixed model parsing for floating points.\n  ([#227](https://github.com/lsrcz/grisette/pull/227))\n-
  Allowed `mkUnifiedConstructor` to be used with types without modes or args.\n  ([#242](https://github.com/lsrcz/grisette/pull/242))\n\n###
  Changed\n- [Breaking] Changed the operand order for `liftPFormatPrec2` and\n  `liftPFormatList2`.\n
  \ ([#225](https://github.com/lsrcz/grisette/pull/225))\n- [Breaking] Changed the
  term representation with a compile-time tag for its\n  kind (`AnyKind` for all symbols
  and `ConstantKind` for symbols other than\n  uninterpreted functions). This also
  affects the 'ExtractSym'. A new\n  `extractSymMaybe` will regard this tag if not
  all symbols can be casted to\n  that tag. `extractSym` will always succeed, returning
  a set with `AnyKind`.\n  ([#230](https://github.com/lsrcz/grisette/pull/230))\n-
  [Breaking] `SafeDivision` renamed to `SafeDiv`.\n  ([#231](https://github.com/lsrcz/grisette/pull/231))\n-
  Refined the template-haskell-based derivation mechanism.\n  ([#238](https://github.com/lsrcz/grisette/pull/238))\n-
  [Breaking] `GetData` is made injective by giving `Identity` wrapped type for\n  concrete
  evaluation instead of the type itself.\n  ([#242](https://github.com/lsrcz/grisette/pull/242))\n-
  Changed pprint for `Identity` to not to print the constructor.\n  ([#242](https://github.com/lsrcz/grisette/pull/242))\n-
  Make `ToSym` requires the target type to be `Mergeable`. This enable us to\n  merge
  the results for converting from `Union a` to `Union b` again.\n  ([#244](https://github.com/lsrcz/grisette/pull/244))\n\n###
  Removed\n- Removed `fpMin` and `fpMax`, which is removed in IEEE754-2019.\n  ([#235](https://github.com/lsrcz/grisette/pull/235))\n-
  Dropped support for post-evaluation approximation.\n  ([#241](https://github.com/lsrcz/grisette/pull/241))\n
  \ \n\n## [0.7.0.0] - 2024-07-02\n\n### Added\n- Added `true` and `false` in `LogicalOp`.\n
  \ ([#211](https://github.com/lsrcz/grisette/pull/211))\n- Exported the `FP` constructs
  in the `Grisette` module.\n  ([#209](https://github.com/lsrcz/grisette/pull/209))\n-
  Added missing `AllSyms` instance for `WordN`, `IntN`, and `FP`.\n  ([#209](https://github.com/lsrcz/grisette/pull/209))\n-
  Added unified interfaces.\n  ([#210](https://github.com/lsrcz/grisette/pull/210),\n
  \  [#212](https://github.com/lsrcz/grisette/pull/212),\n   [#213](https://github.com/lsrcz/grisette/pull/213),\n
  \  [#214](https://github.com/lsrcz/grisette/pull/214),\n   [#215](https://github.com/lsrcz/grisette/pull/215),\n
  \  [#217](https://github.com/lsrcz/grisette/pull/217))\n- Added `IEEEFPRoundingMode`.\n
  \ ([#219](https://github.com/lsrcz/grisette/pull/219))\n- Added `Show` instance
  for `SomeSym`.\n  ([#219](https://github.com/lsrcz/grisette/pull/219))\n- Added
  incoherent conversions (`ToSym`, `ToCon`) from/to `Identity a` and `a`.\n  ([#221](https://github.com/lsrcz/grisette/pull/221))\n\n###
  Fixed\n- Fixed the printing of FP terms.\n  ([#219](https://github.com/lsrcz/grisette/pull/219))\n\n###
  Changed\n- [Breaking] Relaxed constraints for type classes, according to\n  https://github.com/haskell/core-libraries-committee/issues/10.
  One problem\n  this causes is that the instances for `Union` will no longer be able
  to always\n  merge the results. This is unfortunate, but should not be critical.\n
  \ ([#213](https://github.com/lsrcz/grisette/pull/213),\n   [#214](https://github.com/lsrcz/grisette/pull/214),\n
  \  [#221](https://github.com/lsrcz/grisette/pull/221))\n- [Breaking] Rewritten the
  generic derivation mechanism.\n  ([#213](https://github.com/lsrcz/grisette/pull/213),\n
  \  [#214](https://github.com/lsrcz/grisette/pull/214),\n   [#216](https://github.com/lsrcz/grisette/pull/216))\n-
  [Breaking] Changed the type class hierarchy for operations for functors, e.g.\n
  \ `SEq1`, as described in\n  https://github.com/haskell/core-libraries-committee/issues/10.\n
  \ ([#216](https://github.com/lsrcz/grisette/pull/216))\n- [Breaking] Renamed `UnionMergeable1`
  to `SymBranching`. Renamed `Union` to\n  `UnionBase`, and `UnionM` to `Union`.\n
  \ ([#214](https://github.com/lsrcz/grisette/pull/214),\n   [#217](https://github.com/lsrcz/grisette/pull/217))\n-
  [Breaking] Renamed `EvaluateSym` to `EvalSym`. Renamed `SubstituteSym` to\n  `SubstSym`.
  Renamed `ExtractSymbolics` to `ExtractSym`.\n  ([#217](https://github.com/lsrcz/grisette/pull/217))\n-
  [Breaking] Renamed `SEq` to `SymEq`. Renamed `SOrd` to `SymOrd`.\n  ([#217](https://github.com/lsrcz/grisette/pull/217))\n-
  [Breaking] Renamed `GPretty` to `PPrint`.\n  ([#217](https://github.com/lsrcz/grisette/pull/217),\n
  \  [#224](https://github.com/lsrcz/grisette/pull/224))\n- [Breaking] Discourage
  the use of approximation with `approx`. `precise` is now\n  the default and we do
  not require `precise` to be used everytime we call a\n  solver.\n  ([#218](https://github.com/lsrcz/grisette/pull/218))\n\n##
  [0.6.0.0] -- 2024-06-07\n\n### Added\n\n- Added solving procedures with solver handles.\n
  \ ([#198](https://github.com/lsrcz/grisette/pull/198))\n- Added `overestimateUnionValues`.\n
  \ ([#203](https://github.com/lsrcz/grisette/pull/203))\n- Added pretty printing
  for hashset and hashmaps.\n  ([#205](https://github.com/lsrcz/grisette/pull/205))\n-
  Added support for refinement of solutions in CEGIS algorithm.\n  ([#206](https://github.com/lsrcz/grisette/pull/206))\n-
  Added generation of globally unique identifier with `uniqueIdentifier`.\n  ([#206](https://github.com/lsrcz/grisette/pull/206))\n-
  Added support for arbitrary precision floating point theory.\n  ([#207](https://github.com/lsrcz/grisette/pull/207))\n\n###
  Fixed\n\n- `withSolver` now forcifully terminate the solver when exiting the scope.\n
  \ ([#199](https://github.com/lsrcz/grisette/pull/199))\n- Fixed pretty printing
  for monad transformers.\n  ([#205](https://github.com/lsrcz/grisette/pull/205))\n\n###
  Changed\n\n- [Breaking] Equality test for `SomeBV` with different bit widths will
  now\n  return false rather than crash.\n  ([#200](https://github.com/lsrcz/grisette/pull/200))\n-
  [Breaking] More intuitive CEGIS interface.\n  ([#201](https://github.com/lsrcz/grisette/pull/201))\n-
  [Breaking] Changed the low-level solver interface.\n  ([#206](https://github.com/lsrcz/grisette/pull/206))\n-
  [Breaking] Changed the CEGIS interface.\n  ([#206](https://github.com/lsrcz/grisette/pull/206))\n-
  Bumped the minimum supported sbv version to 8.17.\n  ([#207](https://github.com/lsrcz/grisette/pull/207))\n\n##
  [0.5.0.1] -- 2024-04-18\n\n### Fixed\n\n- Fix an building error due to a GHC 9.8.1
  regression\n  (https://gitlab.haskell.org/ghc/ghc/-/issues/24084).\n  ([#195](https://github.com/lsrcz/grisette/pull/195))\n\n##
  [0.5.0.0] -- 2024-04-18\n\n### Added\n\n- Added the creation of unparameterized
  bit vectors from run-time bit-widths.\n  ([#168](https://github.com/lsrcz/grisette/pull/168),\n
  \ [#177](https://github.com/lsrcz/grisette/pull/177))\n- Added all the functions
  available for the exception transformer in\n  `transformers` and `mtl` packages.\n
  \ ([#171](https://github.com/lsrcz/grisette/pull/171))\n- Improved the partial evaluation
  for bit vectors.\n  ([#176](https://github.com/lsrcz/grisette/pull/176))\n- Added
  `symRotateNegated` and `symShiftNegated`.\n  ([#181](https://github.com/lsrcz/grisette/pull/181))\n-
  Added `mrg` and `sym` variants for all reasonable operations from\n  `Control.Monad`,
  `Control.Applicative`, `Data.Foldable`, `Data.List`, and\n  `Data.Traversable`.
  ([#182](https://github.com/lsrcz/grisette/pull/182))\n- Added `mrgIfPropagatedStrategy`.\n
  \ ([#184](https://github.com/lsrcz/grisette/pull/184))\n- Added `freshString`. ([#188](https://github.com/lsrcz/grisette/pull/188))\n-
  Added `localFreshIdent`. ([#190](https://github.com/lsrcz/grisette/pull/190))\n-
  Added deriving for void types for builtin type classes.\n  ([#191](https://github.com/lsrcz/grisette/pull/191))\n\n###
  Fixed\n\n- Fixed the merging for safe division.\n  ([#173](https://github.com/lsrcz/grisette/pull/173))\n-
  Fixed the behavior for safe `mod` and `rem` for signed, bounded concrete\n  types.
  ([#173](https://github.com/lsrcz/grisette/pull/173))\n- Fixed merging in `mrg*`
  operations for monad transformers to ensure that they\n  merge the results. ([#187](https://github.com/lsrcz/grisette/pull/187))\n\n###
  Changed\n\n- [Breaking] Removed the `UnionLike` and `UnionPrjOp` interface, added
  the\n  `TryMerge` and `PlainUnion` interface. This allows `mrg*` operations to be\n
  \ used with non-union programs.\n  ([#170](https://github.com/lsrcz/grisette/pull/170))\n-
  [Breaking] Refined the safe operations interface using `TryMerge`.\n  ([#172](https://github.com/lsrcz/grisette/pull/172))\n-
  [Breaking] Renamed `safeMinus` to `safeSub` to be more consistent.\n  ([#172](https://github.com/lsrcz/grisette/pull/172))\n-
  [Breaking] Unifies the implementation for all symbolic non-indexed\n  bit-vectors.
  The legacy types are now type and pattern synonyms.\n  ([#174](https://github.com/lsrcz/grisette/pull/174),\n
  \ [#179](https://github.com/lsrcz/grisette/pull/179),\n  [#180](https://github.com/lsrcz/grisette/pull/180))\n-
  [Breaking] Use functional dependency instead of type family for the `Function`\n
  \ class. ([#178](https://github.com/lsrcz/grisette/pull/178))\n- [Breaking] Added
  `Mergeable` constraints to some `mrg*` list operators\n  ([#182](https://github.com/lsrcz/grisette/pull/182))\n-
  [Breaking] Refactored the `mrg*` constructor related template haskell code.\n  ([#185](https://github.com/lsrcz/grisette/pull/185))\n-
  [Breaking] Dropped symbols with extra information.\n  ([#188](https://github.com/lsrcz/grisette/pull/188))\n-
  [Breaking] The `FreshIdent` is removed. It is now changed to `Identifier` and\n
  \ `Symbol` types. ([#192](https://github.com/lsrcz/grisette/pull/192))\n- Changed
  the internal representation of the terms.\n  ([#193](https://github.com/lsrcz/grisette/pull/193))\n-
  [Breaking] Refactored the project structures.\n  ([#194](https://github.com/lsrcz/grisette/pull/194))\n\n##
  [0.4.1.0] -- 2024-01-10\n\n### Added\n\n- Added `cegisForAll` interfaces.\n  ([#165](https://github.com/lsrcz/grisette/pull/165))\n\n##
  [0.4.0.0] -- 2024-01-08\n\n### Added\n\n- Added wrappers for state transformers.\n
  \ ([#132](https://github.com/lsrcz/grisette/pull/132))\n- Added `toGuardList` function.\n
  \ ([#137](https://github.com/lsrcz/grisette/pull/137))\n- Exported some previously
  hidden API (`BVSignConversion`, `runFreshTFromIndex`)\n  that we found useful or
  forgot to export.\n  ([#138](https://github.com/lsrcz/grisette/pull/138),\n  [#139](https://github.com/lsrcz/grisette/pull/139))\n-
  Provided `mrgRunFreshT` to run `FreshT` with merging.\n  ([#140](https://github.com/lsrcz/grisette/pull/140))\n-
  Added `Grisette.Data.Class.SignConversion.SignConversion` for types from\n  `Data.Int`
  and `Data.Word`.\n  ([#142](https://github.com/lsrcz/grisette/pull/142))\n- Added
  shift functions by symbolic shift amounts.\n  ([#151](https://github.com/lsrcz/grisette/pull/151))\n-
  Added `apply` for uninterpreted functions.\n  ([#155](https://github.com/lsrcz/grisette/pull/155))\n-
  Added `liftFresh` to lift a `Fresh` into `MonadFresh`.\n  ([#156](https://github.com/lsrcz/grisette/pull/156))\n-
  Added a handle types for SBV solvers. This allows users to use SBV solvers\n  without
  the need to wrap everything in the SBV monads.\n  ([#159](https://github.com/lsrcz/grisette/pull/159))\n-
  Added a new generic CEGIS interface. This allows any verifier/fuzzer to be\n  used
  in the CEGIS loop. ([#159](https://github.com/lsrcz/grisette/pull/159))\n\n### Removed\n\n-
  [Breaking] Removed the `Grisette.Lib.Mtl` module.\n  ([#132](https://github.com/lsrcz/grisette/pull/132))\n-
  [Breaking] Removed `SymBoolOp` and `SymIntegerOp`.\n  ([#146](https://github.com/lsrcz/grisette/pull/146))\n-
  [Breaking] Removed `ExtractSymbolics` instance for `SymbolSet`.\n  ([#146](https://github.com/lsrcz/grisette/pull/146))\n\n###
  Fixed\n\n- Removed the quotation marks around the pretty printed results for string-like\n
  \ data types. ([#127](https://github.com/lsrcz/grisette/pull/127))\n- Fixed the
  `SOrd` instance for `VerificationConditions`.\n  ([#131](https://github.com/lsrcz/grisette/pull/131))\n-
  Fixed the missing `SubstituteSym` instance for `UnionM`.\n  ([#131](https://github.com/lsrcz/grisette/pull/131))\n-
  Fixed the symbolic generation order for `Maybe`.\n  ([#131](https://github.com/lsrcz/grisette/pull/131))\n-
  Fixed the `toInteger` function for `IntN 1`.\n  ([#143](https://github.com/lsrcz/grisette/pull/143))\n-
  Fixed the `abs` function for `WordN`.\n  ([#144](https://github.com/lsrcz/grisette/pull/143))\n-
  Fixed the QuickCheck shrink function for `WordN 1` and `IntN 1`.\n  ([#149](https://github.com/lsrcz/grisette/pull/149))\n-
  Fixed the heap overflow bug for `shiftL` for `WordN` and `IntN` by large\n  numbers.
  ([#150](https://github.com/lsrcz/grisette/pull/150))\n\n### Changed\n\n- Reorganized
  the files for `MonadTrans`.\n  ([#132](https://github.com/lsrcz/grisette/pull/132))\n-
  [Breaking] Changed the name of `Union` constructors and patterns.\n  ([#133](https://github.com/lsrcz/grisette/pull/133))\n-
  The `Union` patterns, when used as constructors, now merges the result.\n  ([#133](https://github.com/lsrcz/grisette/pull/133))\n-
  Changed the symbolic identifier type from `String` to `Data.Text.Text`.\n  ([#141](https://github.com/lsrcz/grisette/pull/141))\n-
  [Breaking] `Grisette.Data.Class.BitVector.BVSignConversion` is now\n  `Grisette.Data.Class.SignConversion.SignConversion`.\n
  \ ([#142](https://github.com/lsrcz/grisette/pull/142))\n- [Breaking] Moved the `ITEOp`,
  `LogicalOp`, and `SEq` type classes to dedicated\n  modules. ([#146](https://github.com/lsrcz/grisette/pull/146))\n-
  [Breaking] Moved `Grisette.Data.Class.Evaluate` to\n  `Grisette.Data.Class.EvaluateSym`.\n
  \ ([#146](https://github.com/lsrcz/grisette/pull/146))\n- [Breaking] Moved `Grisette.Data.Class.Substitute`
  to\n  `Grisette.Data.Class.SubstituteSym`.\n  ([#146](https://github.com/lsrcz/grisette/pull/146))\n-
  [Breaking] Split the `Grisette.Data.Class.SafeArith` module to\n  `Grisette.Data.Class.SafeDivision`
  and `Grisette.Data.Class.SafeLinearArith`.\n  ([#146](https://github.com/lsrcz/grisette/pull/146))\n-
  [Breaking] Changed the API to `MonadFresh`.\n  ([#156](https://github.com/lsrcz/grisette/pull/156))\n-
  [Breaking] Renamed multiple symbolic operators.\n  ([#158](https://github.com/lsrcz/grisette/pull/158))\n-
  [Breaking] Changed the solver interface.\n  ([#159](https://github.com/lsrcz/grisette/pull/159))\n-
  [Breaking] Changed the CEGIS solver interface.\n  ([#159](https://github.com/lsrcz/grisette/pull/159))\n\n##
  [0.3.1.1] -- 2023-09-29\n\nNo user-facing changes.\n\n## [0.3.1.0] -- 2023-07-19\n\n###
  Added\n\n- Added support to `Data.Text`.\n  ([#95](https://github.com/lsrcz/grisette/pull/95))\n-
  Added `Arbitrary` instances for bit vectors.\n  ([#97](https://github.com/lsrcz/grisette/pull/97))\n-
  Added pretty printers for Grisette data types.\n  ([#101](https://github.com/lsrcz/grisette/pull/101))\n-
  Added `ExtractSymbolics` instances for tuples longer than 2.\n  ([#103](https://github.com/lsrcz/grisette/pull/103))\n\n###
  Fixed\n\n- Fixed the `Read` instance for bit vectors.\n  ([#99](https://github.com/lsrcz/grisette/pull/99),\n
  \ [#100](https://github.com/lsrcz/grisette/pull/100))\n\n## [0.3.0.0] -- 2023-07-07\n\n###
  Added\n\n- Added the conversion between signed and unsigned bit vectors.\n  ([#69](https://github.com/lsrcz/grisette/pull/69))\n-
  Added the generation of `SomeSymIntN` and `SomeSymWordN` from a single `Int`\n  for
  bit width. ([#73](https://github.com/lsrcz/grisette/pull/73))\n- Added the `FiniteBits`
  instance for `SomeSymIntN` and `SomeSymWordN`.\n  ([#83](https://github.com/lsrcz/grisette/pull/83))\n-
  Added more flexible instances for symbolic generation for `Either`, `Maybe`\n  and
  list types. ([#84](https://github.com/lsrcz/grisette/pull/84))\n- Added an experimental
  `GenSymConstrained` type class.\n  ([#89](https://github.com/lsrcz/grisette/pull/89))\n\n###
  Changed\n\n- Changed the operations for `SomeIntN` and `SomeWordN` to accepting
  dynamic\n  runtime integers rather than compile-time integers.\n  ([#71](https://github.com/lsrcz/grisette/pull/71))\n-
  Comparing the equality of `SomeIntN`/`SomeWordN`/`SomeSymIntN`/`SomeSymWordN`\n
  \ with different bit widths returns false rather than crash now.\n  ([#74](https://github.com/lsrcz/grisette/pull/74))\n\n###
  Fixed\n\n- Fixed the compatibility issue with sbv 10+.\n  ([#66](https://github.com/lsrcz/grisette/pull/66))\n-
  Fixed build error with newer GHC.\n  ([#70](https://github.com/lsrcz/grisette/pull/70))\n-
  Fixed the merging for `SomeSymIntN` and `SomeSymWordN`.\n  ([#72](https://github.com/lsrcz/grisette/pull/72))\n\n##
  [0.2.0.0] - 2023-04-13\n\n### Added\n\n- Add term size count API. ([#48](https://github.com/lsrcz/grisette/pull/48),\n
  \ [#53](https://github.com/lsrcz/grisette/pull/53))\n- Add timeout to solver interface.\n
  \ ([#49](https://github.com/lsrcz/grisette/pull/49),\n  [#50](https://github.com/lsrcz/grisette/pull/50))\n-
  Add parallel do-notation for parallel symbolic compilation.\n  ([#51](https://github.com/lsrcz/grisette/pull/51))\n-
  Added some missing instances for symbolic values and bit vectors.\n  ([#46](https://github.com/lsrcz/grisette/pull/46),\n
  \ [#61](https://github.com/lsrcz/grisette/pull/61))\n- Add missing instances for
  `MonadFresh` and `FreshT`.\n  ([#59](https://github.com/lsrcz/grisette/pull/59))\n\n###
  Changed\n\n- New safe operator interfaces.\n  ([#56](https://github.com/lsrcz/grisette/pull/56))\n-
  Redesigned symbolic value interface.\n  - `Sym Bool`/`Sym Integer`, etc., are no
  longer available and are replaced\n    with `SymBool` and `SymInteger`.\n    ([#41](https://github.com/lsrcz/grisette/pull/41))\n
  \ - New symbolic bit vector interface. Added unsized bit vector.\n    ([#41](https://github.com/lsrcz/grisette/pull/41))\n\n###
  Removed\n\n- Dropped merging cache for `UnionM`. This fixed some segmentation fault
  errors.\n  ([#43](https://github.com/lsrcz/grisette/pull/43))\n\n### Fixed\n\n-
  Fix CEGIS when no symbolic input is present.\n  ([#52](https://github.com/lsrcz/grisette/pull/52))\n-
  Fix overlapping `ToSym` and `ToCon` instances.\n  ([#54](https://github.com/lsrcz/grisette/pull/54))\n-
  Fix uninterpreted function lowering.\n  ([#57](https://github.com/lsrcz/grisette/pull/57),\n
  \ [#58](https://github.com/lsrcz/grisette/pull/58))\n- Fix CEGIS crash when subsequent
  solver calls introduces new symbolic constant.\n  ([#60](https://github.com/lsrcz/grisette/pull/60))\n\n##
  [0.1.0.0] - 2023-01-20\n\n### Added\n\n- Initial release for Grisette.\n\n[Unreleased]:
  https://github.com/lsrcz/grisette/compare/v0.9.0.0...HEAD\n[0.9.0.0]: https://github.com/lsrcz/grisette/compare/v0.8.0.0...v0.9.0.0\n[0.8.0.0]:
  https://github.com/lsrcz/grisette/compare/v0.7.0.0...v0.8.0.0\n[0.7.0.0]: https://github.com/lsrcz/grisette/compare/v0.6.0.0...v0.7.0.0\n[0.6.0.0]:
  https://github.com/lsrcz/grisette/compare/v0.5.0.1...v0.6.0.0\n[0.5.0.1]: https://github.com/lsrcz/grisette/compare/v0.5.0.0...v0.5.0.1\n[0.5.0.0]:
  https://github.com/lsrcz/grisette/compare/v0.4.1.0...v0.5.0.0\n[0.4.1.0]: https://github.com/lsrcz/grisette/compare/v0.4.0.0...v0.4.1.0\n[0.4.0.0]:
  https://github.com/lsrcz/grisette/compare/v0.3.1.1...v0.4.0.0\n[0.3.1.1]: https://github.com/lsrcz/grisette/compare/v0.3.1.0...v0.3.1.1\n[0.3.1.0]:
  https://github.com/lsrcz/grisette/compare/v0.3.0.0...v0.3.1.0\n[0.3.0.0]: https://github.com/lsrcz/grisette/compare/v0.2.0.0...v0.3.0.0\n[0.2.0.0]:
  https://github.com/lsrcz/grisette/compare/v0.1.0.0...v0.2.0.0\n[0.1.0.0]: https://github.com/lsrcz/grisette/tree/v0.1.0.0\n"
changelog-type: markdown
description: "# Grisette\n\n[![Haskell Tests](https://github.com/lsrcz/grisette/actions/workflows/test.yml/badge.svg)](https://github.com/lsrcz/grisette/actions/workflows/test.yml)\n[![Hackage
  Version](https://img.shields.io/hackage/v/grisette)](https://hackage.haskell.org/package/grisette)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/grisette)](https://packdeps.haskellers.com/feed?needle=grisette)\n\nGrisette
  is a symbolic evaluation library for Haskell. By translating\nprograms into constraints,
  Grisette can help the development of program\nreasoning tools, including verification
  and synthesis.\n\nFor a detailed description of the system, please refer to our
  POPL'23 paper\n[Grisette: Symbolic Compilation as a Functional Programming Library](https://lsrcz.github.io/files/POPL23.pdf).\n\n##
  Features\n\n- **Multi-path** symbolic evaluation with efficient (customizable) state
  merging.\n- Symbolic evaluation is **purely functional**. The propagated symbolic
  value includes the assertion / error state of the execution, yet it is just a data
  structure. As a result, Grisette is a library that does not modify the Haskell compiler.\n-
  The separation of symbolic and concrete values is enforced with **static types**.
  These types help discover opportunities for partial evaluation as well as safe use
  of Haskell libraries.\n\n## Design and Benefits\n\n- Modular purely functional design,
  with a focus on composability.\n  - Allows for symbolic evaluation of user-defined
  data structures / data\n    structures from third-party libraries.\n  - Allows for
  symbolic evaluation of error-handling code with user-defined\n    error types.\n
  \ - Allows for memoization (tested and benchmarked) / parallelization (not\n    tested
  and benchmarked yet) of symbolic evaluation.\n- Core multi-path symbolic evaluation
  semantics modeled as a monad, allowing for\n  easy integration with other monadic
  effects, for example:\n  - error handling via `ExceptT`,\n  - stateful computation
  via `StateT`,\n  - unstructured control flow via `ContT`, etc.\n\n## Installation\n\n###
  Install Grisette\n\nGrisette is available via\n[Hackage](https://hackage.haskell.org/package/grisette).
  You can add it to your\nproject with `cabal`, and we also provided a stack template
  for quickly starting a\nnew project with Grisette.\n\n#### Manually writing cabal
  file\n\nGrisette is a library and is usually used as a dependency of other\npackages.
  You can add it to your project's `.cabal` file:\n\n```cabal\nlibrary\n  ...\n  build-depends:
  grisette >= 0.9 < 0.10\n```\n\n#### Quick start template with `stack new`\n\nYou
  can quickly start an stack-based Grisette project with `stack new`:\n\n```bash\n$
  stack new <projectname> github:lsrcz/grisette\n```\n\nYou can specify the resolver
  version with the parameters:\n\n```bash\n$ stack new a-new-project github:lsrcz/grisette
  -p \"resolver:lts-22.27\"\n```\n\nFor more details, please see the\n[template file](https://github.com/lsrcz/stack-templates/blob/main/grisette.hsfiles)
  and the\n[documentation for stack templates](https://docs.haskellstack.org/en/stable/templates_command/).\n\nYou
  can test your installation by running the following command:\n\n```bash\n$ stack
  run app\n```\n\nThe command assumes a working [Z3](https://github.com/Z3Prover/z3)
  available\nthrough `PATH`. You can install it with the instructions below.\n\n###
  Install SMT Solvers\n\nTo run the examples, you need to install an SMT solver and
  make it available\nthrough `PATH`. We recommend that you start with\n[Z3](https://github.com/Z3Prover/z3),
  as it supports all our examples and is\nusually easier to install. [Boolector](https://github.com/Boolector/boolector)\nand
  its successor [Bitwuzla](https://github.com/bitwuzla/bitwuzla) are usually\nsignificantly
  more efficient on bit vectors.\n\n#### Install Z3\n\nOn Ubuntu, you can install
  Z3 with:\n\n```bash\n$ apt update && apt install z3\n```\n\nOn macOS, with [Homebrew](https://brew.sh/),
  you can install Z3 with:\n\n```bash\nbrew install z3\n```\n\nYou may also build
  Z3 from source, which may be more efficient on your system.\nPlease refer to the
  [Z3 homepage](https://github.com/Z3Prover/z3) for the build\ninstructions.\n\n####
  Install Boolector/Bitwuzla\n\nBoolector/Bitwuzla from major package managers are
  usually outdated or inexist.\nWe recommend that you build them from source with
  the CaDiCaL SAT solver. Please\nrefer to the [Boolector homepage](https://github.com/Boolector/boolector)
  and\n[Bitwuzla homepage](https://github.com/bitwuzla/bitwuzla) for the build\ninstructions.\n\n##
  Example\n\nThe following example uses Grisette to build a synthesizer of arithmetic\nprograms.
  Given the input-output pair (2,5), the synthesizer can tell us that\nthe program
  `\\x -> x+3` has the desired behavior. The example is adapted from\n[this blog\npost](https://www.cs.utexas.edu/~bornholt/post/building-synthesizer.html)
  by\nJames Bornholt.\n\nThe example has three parts:\n\n- We define the arithmetic
  language. The language is _symbolic_:\n  - its syntax tree represents a set of concrete
  syntax trees (i.e.,\n    representing a program space), and\n  - its interpreter
  accepts such symbolic syntax trees (program spaces), and\n    interpret all represented
  concrete syntax trees to symbolic formulas.\n- We define the candidate program space
  of the synthesizer by creating a\n  particular symbolic syntax tree. The synthesizer
  will search the space of\n  concrete trees for a solution.\n- We interpret the symbolic
  syntax tree and pass the resulting constraints to\n  the solver. If a solution exists,
  the solver returns a concrete tree that\n  agrees with the input-output example.\n\n###
  Defining the Arithmetic Language\n\nWe will synthesize a single-input program `\\x
  -> E` in this example. Here the\n`E` is an expression type, and is defined by the
  following grammar.\n\n```\nE -> c      -- constant\n   | x      -- value for input
  variable\n   | E + E  -- addition\n   | E * E  -- multiplication\n```\n\nThe syntax
  defines how a concrete expression is represented. To synthesize a\nprogram, we need
  to define ***symbolic*** program spaces. We do this with the\n`Union` container
  provided by Grisette to represent choices within multiple ASTs\ncompactly in a single
  value.\n\n```haskell\ndata SymExpr\n  -- `SymConst` represents a constant in the
  syntax tree.\n  --\n  -- `SymConst 1` is the constant 1, while `SymConst \"c1\"`
  is a symbolic\n  -- constant, representing a hole in the expression. The solver
  can be used to\n  -- find out what the concrete value for a symbolic constant should
  be.\n  = SymConst SymInteger\n  -- `SymInput` is exactly the same as `SymConst`,
  but is for inputs. We\n  -- separate them just for clarity.\n  | SymInput SymInteger\n
  \ -- `SymAdd` and `SymMul` represent the addition and multiplication operators.\n
  \ --\n  -- The children are **choices** from some symbolic expressions, which is\n
  \ -- represented by the `Union` monadic container.\n  --\n  -- The solver will try
  to pick one choice from them.\n  | SymAdd (Union SymExpr) (Union SymExpr)\n  | SymMul
  (Union SymExpr) (Union SymExpr)\n  -- `Generic` helps us derive other type class
  instances for `SymExpr`.\n  deriving stock (Generic, Show)\n  -- Some type classes
  provided by Grisette for building symbolic evaluation\n  -- tools. See the documentation
  for more details.\n  deriving (Mergeable, EvalSym) via (Default SymExpr)\n\n-- The
  following template haskell procedures can also derive the instances we\n-- need.\n--
  derive ''SymExpr [''Generic, ''Show, ''Mergeable, ''EvalSym]\n-- deriveAllExcept
  ''SymExpr [''Ord]\n```\n\nSome smart constructors help us build program spaces.\n\n```haskell\n--
  A template haskell procedure generates smart constructors for\n-- `Union SymExpr`.\n--\n--
  >>> SymConst 1 :: SymExpr\n-- SymConst 1\n-- >>> mrgSymConst 1 :: Union SymExpr\n--
  {SymConst 1}\nmkMergeConstructor \"mrg\" ''SymExpr\n```\n\nThen, the following code
  defines a program space `\\x -> x + {x, c}`. Some\nexample programs in this space
  are `\\x -> x + x`, `\\x -> x + 1`, and `\\x -> x +\n2`. The solver will be used
  to choose the right hand side of the addition. It\nmay choose to use the input variable
  `x`, or synthesize a constant `c`.\n\n```haskell\nprogSpace :: SymInteger -> SymExpr\nprogSpace
  x =\n  SymAdd\n    (mrgSymInput x)\n    (mrgIf \"choice\" (mrgSymInput x) (mrgSymConst
  \"c\"))\n```\n\nWe can then convert this program space to its logical encoding and
  reason about\nit. This is done simply writing an interpreter to interpret all the
  expressions\nrepresented by an `SymExpr` all at once.\n\nThe interpreter is similar
  to a concrete interpreter, except that the `onUnion`\ncombinator is used to lift
  the interpreter to work on `Union` values (a space of\nexpressions).\n\n```haskell\ninterpret
  :: SymExpr -> SymInteger\ninterpret (SymConst x) = x\ninterpret (SymInput x) = x\ninterpret
  (SymAdd x y) = interpretSpace x + interpretSpace y\ninterpret (SymMul x y) = interpretSpace
  x * interpretSpace y\n\n-- interpret a program space\ninterpretSpace :: Union SymExpr
  -> SymInteger\ninterpretSpace = onUnion interpret\n```\n\nWe can then compose the
  interpreter with the program space to make it\nexecutable.\n\n```haskell\nexecutableSpace
  :: Integer -> SymInteger\nexecutableSpace = interpret . space . toSym\n```\n\nThen
  we can do synthesis. We call the program space on the input 2, and\nconstruct the
  constraint that the result is equal to 5. We then call the solver\nwith the `solve`
  function. The solver finds a solution such that the condition\nevaluates to true.
  It returns the solution as a *model*, which contains an\nassignment to the symbolic
  constants (holes).\n\nWe can then get the synthesized program by evaluating the
  program space with the\nmodel.\n\n```haskell\nexample :: IO ()\nexample = do\n  Right
  model <- solve z3 $ executableSpace 2 .== 5\n  -- result: SymPlus {SymInput x} {SymConst
  3}\n  print $ evalSym False model (progSpace \"x\")\n  let synthesizedProgram ::
  Integer -> Integer =\n        evalSymToCon model . executableSpace\n  -- result:
  13\n  print $ synthesizedProgram 10\n```\n\nThe complete code is at [examples/basic/Main.hs](examples/basic/Main.hs).
  More\nexamples are available in Grisette's [tutorials](tutorials).\n\n## Documentation\n\n-
  Haddock documentation at [grisette](https://hackage.haskell.org/package/grisette).\n-
  A tutorial to Grisette is in the [tutorials](tutorials) directory. They are\n  provided
  as jupyter notebooks with the [IHaskell](https://github.com/IHaskell/IHaskell) kernel.\n\n##
  License\n\nThe Grisette library is distributed under the terms of the BSD3 license.
  The\n[LICENSE](LICENSE) file contains the full license text.\n\n## Note\n\nGrisette
  is fully compatible with GHC 9.6+, and works in most cases with GHC\n8.10+.\n\n###
  CLC proposal #10\nAs the type classes provided by Grisette implements\n[CLC proposal
  #10](https://github.com/haskell/core-libraries-committee/issues/10),\nwhich requires
  `base-4.18.0.0` to work reliably, Grisette is fully compatible\nwith GHC 9.6.\nYou
  may experience instance resolution failure when using older GHCs in the\nclient
  code (Grisette itself is buildable against GHC 8.10+ with some tricks).\n\n### Quantifiers\n\nGrisette
  currently supports universal and existential quantifiers $\\forall$ and\n$\\exists$,
  but only when building with sbv >= 10.1. This also means that you\nneed to use GHC
  >= 9.2.\n\n### Floating-points\n\nGrisette currently supports boolean, uninterpreted
  functions, bitvector,\ninteger, and floating point theories. However, if you want
  to use the floating\npoint theory, please make sure that you have the latest libBF
  (>=0.6.8) and sbv \ninstalled (>=10.10.6). We've detected and fixed several bugs
  that would prevent\na sound reasoning for floating points.\n\n### Unified interfaces\n\nSince
  0.7.0.0, Grisette provides a [unified\ninterface](https://hackage.haskell.org/package/grisette/docs/Grisette-Unified.html)\nto
  symbolic and concrete evaluations. GHC 9.0 or earlier, without the\n[QuickLook](https://dl.acm.org/doi/10.1145/3408971)
  type inference algorithm for\nimpredicative types, may fail to resolve some constraints.
  You may need to\nprovide additional constraints in your code to help the compiler.\n\n##
  Citing Grisette\n\nIf you use Grisette in your research, please use the following
  bibtex entry:\n\n```bibtex\n@article{10.1145/3571209,\nauthor = {Lu, Sirui and Bod\\'{\\i}k,
  Rastislav},\ntitle = {Grisette: Symbolic Compilation as a Functional Programming
  Library},\nyear = {2023},\nissue_date = {January 2023},\npublisher = {Association
  for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {7},\nnumber
  = {POPL},\nurl = {https://doi.org/10.1145/3571209},\ndoi = {10.1145/3571209},\nabstract
  = {The development of constraint solvers simplified automated reasoning about programs
  and shifted the engineering burden to implementing symbolic compilation tools that
  translate programs into efficiently solvable constraints. We describe Grisette,
  a reusable symbolic evaluation framework for implementing domain-specific symbolic
  compilers. Grisette evaluates all execution paths and merges their states into a
  normal form that avoids making guards mutually exclusive. This ordered-guards representation
  reduces the constraint size 5-fold and the solving time more than 2-fold. Grisette
  is designed entirely as a library, which sidesteps the complications of lifting
  the host language into the symbolic domain. Grisette is purely functional, enabling
  memoization of symbolic compilation as well as monadic integration with host libraries.
  Grisette is statically typed, which allows catching programming errors at compile
  time rather than delaying their detection to the constraint solver. We implemented
  Grisette in Haskell and evaluated it on benchmarks that stress both the symbolic
  evaluation and constraint solving.},\njournal = {Proc. ACM Program. Lang.},\nmonth
  = {jan},\narticleno = {16},\nnumpages = {33},\nkeywords = {State Merging, Symbolic
  Compilation}\n}\n```\n"
description-type: markdown
hash: 525c01714fce8724a5831dabf0d035a50271088c9cc58f8ea6377d95355ae0b3
homepage: https://github.com/lsrcz/grisette#readme
latest: 0.9.0.0
license-name: BSD-3-Clause
maintainer: Sirui Lu (siruilu@cs.washington.edu)
synopsis: Symbolic evaluation as a library
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  QuickCheck: '>=2.14 && <2.16'
  array: '>=0.5.4 && <0.6'
  async: '>=2.2.2 && <2.3'
  atomic-primops: '>=0.8.3 && <0.9'
  base: '>=4.14 && <5'
  binary: '>=0.8.8.0 && <0.9'
  bytes: '>=0.17.1 && <0.18'
  bytestring: '>=0.10.12 && <0.13'
  cereal: '>=0.5.8.1 && <0.6'
  cereal-text: '>=0.1.0.2 && <0.2'
  containers: '>=0.4 && <0.8'
  deepseq: '>=1.4.4 && <1.6'
  doctest: '>=0.18.2 && <0.23'
  generic-deriving: '>=1.14.1 && <1.15'
  grisette: '>=0'
  hashable: '>=1.2.3 && <1.6'
  libBF: '>=0.6.3 && <0.7'
  loch-th: '>=0.2.2 && <0.3'
  mtl: '>=2.2.2 && <2.4'
  parallel: '>=3.2.2.0 && <3.3'
  prettyprinter: '>=1.5.0 && <1.8'
  sbv: '>=8.17 && <12'
  stm: '>=2.5 && <2.6'
  template-haskell: '>=2.16 && <2.23'
  test-framework: '>=0.8.2 && <0.9'
  test-framework-hunit: '>=0.3.0.2 && <0.4'
  test-framework-quickcheck2: '>=0.3.0.5 && <0.4'
  text: '>=1.2.4.1 && <2.2'
  th-abstraction: '>=0.4 && <0.8'
  th-compat: '>=0.1.2 && <0.2'
  th-lift-instances: '>=0.1.16 && <0.2'
  transformers: '>=0.5.6 && <0.7'
  unordered-containers: '>=0.2.17 && <0.3'
  vector: '>=0.12.1.2 && <0.14'
