all-versions:
- 0.0.1.0
author: A. Alonso Dominguez
basic-deps:
  aeson: '>=0'
  amazonka: '>=1.5.0 && <1.6'
  amazonka-autoscaling: '>=0'
  amazonka-core: '>=0'
  amazonka-ec2: '>=0'
  amazonka-ecs: '>=0'
  ansi-terminal: '>=0'
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  conduit: '>=0'
  conduit-combinators: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  free: '>=0'
  groot: '>=0'
  hashable: '>=0'
  http-conduit: '>=0'
  http-types: '>=0'
  ini: '>=0'
  lens: '>=0'
  lifted-base: '>=0'
  mmorph: '>=0'
  monad-control: '>=0'
  mtl: '>=2.2 && <2.3'
  optparse-applicative: '>=0'
  pptable: '>=0'
  prettyprinter: '>=0'
  prettyprinter-ansi-terminal: '>=0'
  prettyprinter-compat-ansi-wl-pprint: '>=0'
  resourcet: '>=0'
  stm: '>=0'
  stm-chans: '>=0'
  stm-conduit: '>=0'
  stm-delay: '>=0'
  text: '>=0'
  these: '>=0'
  time: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  uuid: '>=0'
  vector: '>=0'
  yaml: '>=0.8.20 && <0.9'
changelog: ''
changelog-type: ''
description: |
  # Groot

  [![Build Status](https://travis-ci.org/alonsodomin/groot.svg?branch=master)](https://travis-ci.org/alonsodomin/groot)
  [![Build status](https://ci.appveyor.com/api/projects/status/lljwg88fygttb28i?svg=true)](https://ci.appveyor.com/project/alonsodomin/groot)

  Groot is a command line application with the purpose of remote managing AWS ECS Clusters and
   their associated resources (Tasks, Instances, Services, etc.)

  ## Installing

  Head over to the [Releases](https://github.com/alonsodomin/groot/releases) and download the binaries for your OS. There are
   pre-built binaries for 64bits Linux, Mac OS and Windows. It gets downloaded as a single binary file, copy into your own machine
   and place it in a folder under your `PATH` environment variable.

  For example, for Linux machines:

  ```
  wget -O groot https://github.com/alonsodomin/groot/releases/download/v0.0.1.0/groot-linux
  mv groot /usr/local/bin/
  ```

  A more user friendly install process in on the works, someday I could get around to actually finish it.

  ## Building From Source

  You will need [Stack](http://haskellstack.org) installed in your local machine. Once youÂ´ve got that, then clone this
   repository and install the binaries using Stack:

  ```
  git clone https://github.com/alonsodomin/groot
  cd groot
  stack install
  ```

  Now step back, the whole of The Internet is going to be sucked into your machine.

  ## First Steps

  Now that you have it installed in your system, run it with the `-h` (or `--help`) command line
   option to get an idea of what you can do.

  ```
  groot -h
  ```

  Groot supports several sub-commands, use the same `-h` flag to get some help on what they can do,
   i.e.: `groot ls tasks -h`.

  ## Status

  Groot is a toy project started to further my knowledge of the Haskell programming language
   at the same time that I was solving a need for a proper tool to perform my most rutinary
   tasks when managing ECS resources.

  Don't expect here the best Haskell code (and I should probably write more tests), if it serves
   you then great, use it and feel free to contribute.

  ## License

  ### Apache License 2.0

  Copyright 2017 Antonio Alonso Dominguez

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
description-type: markdown
hash: 1072b55718d46c648a0dd0b8f3f55abba3f29b3cf990deb30ca97d4a6c831cd1
homepage: https://github.com/alonsodomin/groot#readme
latest: 0.0.1.0
license-name: Apache-2.0
maintainer: alonso.domin@gmail.com
synopsis: Command line utility to manage AWS ECS resources
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  amazonka: '>=1.5.0 && <1.6'
  amazonka-autoscaling: '>=0'
  amazonka-core: '>=0'
  amazonka-ec2: '>=0'
  amazonka-ecs: '>=0'
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  checkers: '>=0'
  conduit: '>=0'
  conduit-combinators: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  free: '>=0'
  groot: '>=0'
  hashable: '>=0'
  hspec: '>=0'
  http-conduit: '>=0'
  http-types: '>=0'
  lens: '>=0'
  lifted-base: '>=0'
  mmorph: '>=0'
  monad-control: '>=0'
  mtl: '>=2.2 && <2.3'
  quickcheck-text: '>=0'
  resourcet: '>=0'
  stm: '>=0'
  stm-chans: '>=0'
  stm-conduit: '>=0'
  stm-delay: '>=0'
  text: '>=0'
  these: '>=0'
  time: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  uuid: '>=0'
  vector: '>=0'
  yaml: '>=0.8.20 && <0.9'
