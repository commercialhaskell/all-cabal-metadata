all-versions:
- 0.1.0.0
author: Donnacha OisÃ­n Kidney
basic-deps:
  base: '>=4 && <5'
changelog: ''
changelog-type: ''
description: "[![Build Status](https://travis-ci.org/oisdk/groupBy.svg?branch=master)](https://travis-ci.org/oisdk/groupBy)\n\n#
  groupBy\n\nThis provides a drop-in replacement for [`Data.List.groupBy`](https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-List.html#v:groupBy),
  with benchmarks and tests.\n\nThe original `Data.List.groupBy` has (perhaps unexpected)
  behaviour, in that it compares elements to the first in the group, not adjacent
  ones. In other words, if you wanted to group into ascending sequences:\n\n```haskell\n>>>
  Data.List.groupBy (<=) [1,2,2,3,1,2,0,4,5,2]\n[[1,2,2,3,1,2],[0,4,5,2]]\n```\n\nThe
  replacement has three distinct advantages:\n\n1. It groups adjacent elements, allowing
  the example above to function as expected:\n\n   ```haskell\n   >>> Data.List.GroupBy.groupBy
  (<=) [1,2,2,3,1,2,0,4,5,2]\n   [[1,2,2,3],[1,2],[0,4,5],[2]]\n   ```\n\n2. It is
  a good producer and consumer, with rules similar to those for [`Data.List.scanl`](https://hackage.haskell.org/package/base-4.10.1.0/docs/src/GHC.List.html#scanl).
  The old version was defined in terms of [`span`](https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-List.html#v:span):\n\n
  \  ```haskell\n   groupBy                 :: (a -> a -> Bool) -> [a] -> [[a]]\n
  \  groupBy _  []           =  []\n   groupBy eq (x:xs)       =  (x:ys) : groupBy
  eq zs\n                              where (ys,zs) = span (eq x) xs\n   ```\n   \n
  \  Which prevents it from being a good producer/consumer.\n\n3. It is significantly
  faster than the original in most cases.\n   \n## Tests\n\nTests ensure that the
  function is the same as the original when the relation supplied is an equivalence,
  and that it performs the expected adjacent comparisons when the relation isn't transitive.\n\nThe
  tests also check that laziness is maintained, as defined by:\n\n```haskell\n>>>
  head (groupBy (==) (1:2:undefined))\n[1]\n\n>>> (head . head) (groupBy undefined
  (1:undefined))\n1\n\n>>> (head . head . tail) (groupBy (==) (1:2:undefined))\n2\n```\n\n##
  Benchmarks\n\nBenchmarks compare the function to three other implementations: the
  current [`Data.List.groupBy`](https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.OldList.html#groupBy),
  a [version](https://hackage.haskell.org/package/utility-ht-0.0.14/docs/Data-List-HT.html#v:groupBy)
  provided by the [utility-ht](https://hackage.haskell.org/package/utility-ht) package,
  and [a version provided by Brandon Simmons](http://brandon.si/code/an-alternative-definition-for-datalistgroupby/).\n\nThe
  benchmarks test functions that force the outer list:\n\n```haskell\nlength . groupBy
  eq\n```\n\nAnd functions which force the contents of the inner lists:\n\n```haskell\nsum'
  = foldl' (+) 0\n\nsum' . map sum' . groupBy eq\n```\n\nEach benchmark is run on
  lists where the groups are small, the groups are large, and where there is only
  one group. The default size is 10000, but other sizes can be provided with the `--size=[x,y,z]`
  flag to the benchmarks.\n\nThe new definition is slower than the old only when the
  size of the sublists is much larger than the size of the outer list. To make the
  newer definition faster in *that* case, you would simply force the pair (or use
  a strict pair) from the accumulator. However, this makes the new definition match
  the old speed in the other cases, which I would imagine are more common.\n"
description-type: markdown
hash: 9bd0c5e6bbfaf793f6e816a072bcb085dba1149bf282e998567eaaed8d0efec4
homepage: https://github.com/oisdk/groupBy#readme
latest: 0.1.0.0
license-name: MIT
maintainer: mail@doisinkidney.com
synopsis: Replacement definition of Data.List.GroupBy
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4 && <5'
  code-page: '>=0'
  criterion: '>=0'
  doctest: '>=0'
  groupBy: '>=0'
  optparse-applicative: '>=0'
  random: '>=0'
  utility-ht: '>=0'
