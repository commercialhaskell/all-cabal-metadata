homepage: https://github.com/blamario/grampa/tree/master/grammatical-parsers
changelog-type: markdown
hash: 5e65970877d84012b4fff4d82e68e8224589f3303fed68094636a0a03ba64676
test-bench-deps:
  rank2classes: '>=1.0.2 && <1.5'
  monoid-subclasses: -any
  grammatical-parsers: -any
  witherable: ==0.4.*
  checkers: '>=0.4.6 && <0.6'
  base: '>=4.9 && <5'
  text: '>=1.1'
  criterion: '>=1.0'
  doctest: '>=0.8'
  containers: '>=0.5.7.0 && <0.7'
  parsers: <0.13
  tasty-quickcheck: '>=0.7'
  tasty: '>=0.7'
  deepseq: '>=1.1'
  QuickCheck: '>=2 && <3'
maintainer: Mario Blažević <blamario@protonmail.com>
synopsis: parsers that combine into grammars
changelog: |
  Version 0.7
  ---------------

  * Reorganized the `LeftRecursive` modules and deprecated the old module names
  * Re-exposed the `Text.Grampa.ContextFree.Memoizing` module
  * Floated the `Rank2.Apply` constraint, which now may be necessary in calling contexts
  * Turned `FailureDescription` from sum to product
  * Added the `chainRecursive` & `chainLongestRecursive` methods
  * Added `autochain`
  * Improved performance by making `instance Semigroup ParseFailure` lazier
  * Improved performance by shortcutting non-left-recursive grammars
  * Improved the output of `TraceableParsing` instances
  * Fixed comments
  * Incremented dependency bounds
  * Factored out several internal utility functions
  * Updated code to compile with GHC 9.4.2
  * Updated GitHub actions

  Version 0.6
  ---------------
  * Updated code to compile with GHC 9.2.2
  * Added type `GrammarOverlay` and function `overlay`
  * Added the `someNonEmpty` combinator
  * Added the `CommittedParsing` class
  * The failure messages are now sorted
  * `<?>` preserves the erroneous messages
  * Fixed the `parsingResult` in Packrat
  * Fixed the use of `maxBound` on `Down` which flipped meaning in `base`
  * Turned `ParseFailure` into a record to work around an old Haddock bug
  * Unified the `FailureInfo` type with `ParseFailure`
  * Parameterized `ParseFailure` with a position type
  * Eliminated the `size-based` and `testing-feat` dependencies
  * Hid the `Text.Grampa.ContextFree.Memoizing` module

  Version 0.5.2
  ---------------
  * Switched from the deprecated `witherable-class` package to `witherable`
  * Deprecated the `ContextFree.Memoizing` module
  * Fixed and tested the `<<|>` instance of the `LeftRecursive` parser
  * Fixed and tested a with left-recursive monadic empty match
  * Fixed an infinite loop in the expected set closure calculation
  * Improved documentation
  * Added the `TraceableParsing` class for easier debugging, not exposed

  Version 0.5.1
  ---------------
  * Fixed the `skipAll` implementation for the `SortedMemoizing.Transformer` parser
  * Added the `Filterable` and `MonadFail` instances to all parser types
  * Added instances `Monad Ambiguous` and `Functor ParseFailure`
  * Generalized the types of `LeftRecursive.Transformer.tmap` and `tbind`
  * Incremented dependencies' upper bounds

  Version 0.5
  ---------------
  * Replaced `MonoidParsing` by `InputParsing`
  * Moved the `InputParsing` and `InputCharParser` classes into the `input-parsers` package
  * Added the `Expected` data type to eliminate the `Show` constraint on `string`
  * Fixed the signature of `scan` and `scanChars`
  * Deprecated `endOfInput` and `satisfyChar`
  * Replaced `Lexical g` with `LexicalParsing m`
  * Added modules `SortedMemoizing.Transformer` and `LeftRecursive.Transformer`
  * Added the `getAmbiguous` destructor

  Version 0.4.1.2
  ---------------
  * Fixed the doctests using cabal-doctest
  * Fixed a QuickCheck timeout, issue #20

  Version 0.4.1.1
  ---------------
  * Fixed the doctests after cabal get

  Version 0.4.1
  ---------------
  * Adjustments for monoid-subclasses-1.0

  Version 0.4.0.1
  ---------------
  * Added missing markdown-unlit dependency

  Version 0.4
  ---------------
  * Added `Position` and related functions
  * Renamed `showFailure` to `failureDescription`
  * Faster parsing at the cost of slower compilation
  * Replaced Word64 source positions by plain Int
  * Fixed Haddock-related compilation warnings

  Version 0.3.2
  ---------------
  * Improved error reporting
  * Updated test suite to work with testing-feat >= 1.1
  * Fixed the construction of `Ambiguous` results
  * Added Applicative and Traversable instances for Ambiguous

  Version 0.3.1
  ---------------
  * Added `Text.Parser.Combinators`
  * Improved `try/(<?>)` error reporting
  * Added `showFailure`

  Version 0.3
  ---------------
  * Eliminated `token` and `whiteSpace`
  * Added the `Lexical` class of grammars
  * Added `Semigroup` instances to fix compilation with GHC 8.4.1
  * More precise calculation of `(>>=)` descendants
  * Added the `Ambiguous` results and the `AmbiguousParsing` class
  * Added the `SortedMemoizing` module

  Version 0.2.2
  ---------------
  * Incremented dependency version bounds

  Version 0.2.1
  ---------------
  * Added the `ContextFree.Continued` module
  * Fixed `LeftRecursive.Parallel.concatMany`

  Version 0.2
  ---------------
  * Numerous performance and documentation improvements
  * Fixed the `endOfInput` implementation in `PEG.Backtrack`
  * Made `LeftRecursive.Parser` a type synonym, introduced `peg` and `longest`
  * Added the `notSatisfy[Char]` methods
  * Added `satisfyCharInput`
basic-deps:
  rank2classes: '>=1.4.6 && <1.5'
  monoid-subclasses: '>=1.0 && <1.3'
  grammatical-parsers: -any
  witherable: ==0.4.*
  base: '>=4.9 && <5'
  containers: '>=0.5.7.0 && <0.7'
  parsers: <0.13
  input-parsers: <0.4
  attoparsec: '>=0.13 && <0.15'
  transformers: '>=0.5 && <0.6'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- '0.3'
- 0.3.1
- 0.3.2
- '0.4'
- 0.4.0.1
- 0.4.1
- 0.4.1.1
- 0.4.1.2
- '0.5'
- 0.5.1
- 0.5.2
- '0.6'
- '0.7'
author: Mario Blažević
latest: '0.7'
description-type: markdown
description: |
  Grammatical Parsers
  ===================

  Behold, yet another parser combinator library in Haskell. Except this one is capable of working with grammars rather than mere parsers. A more in-depth description is available in the [paper](../Grampa.lhs.pdf) from Haskell Symposium 2017, what follows is a short tutorial.

  You can apply the usual
  [Applicative](http://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Applicative),
  [Alternative](http://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Alternative), and
  [Monad](http://hackage.haskell.org/package/base/docs/Control-Monad.html#t:Monad) operators to combine primitive parsers
  into larger ones. The combinators from the [parsers](http://hackage.haskell.org/package/parsers) library type classes
  are also available. Here are some typical imports you may need:

  ~~~ {.haskell}
  {-# LANGUAGE RecordWildCards, ScopedTypeVariables, TemplateHaskell #-}
  module README where
  import Control.Applicative
  import Data.Char (isDigit)
  import Data.Functor.Classes (Show1, showsPrec1)
  import Text.Grampa
  import Text.Grampa.ContextFree.Memoizing.LeftRecursive (Parser)
  import qualified Rank2
  import qualified Rank2.TH
  ~~~

  What puts this library apart from most is that these parsers are *grammatical*, just as the library name says. Instead
  of writing the parser definitions as top-level bindings, you can and should group them into a grammar record definition,
  like this:

  ~~~ {.haskell}
  arithmetic :: Rank2.Apply g => GrammarBuilder Arithmetic g Parser String
  arithmetic Arithmetic{..} = Arithmetic{
     sum= product
           <|> string "-" *> (negate <$> product)
           <|> (+) <$> sum <* string "+" <*> product
           <|> (-) <$> sum <* string "-" <*> product,
     product= factor
           <|> (*) <$> product <* string "*" <*> factor
           <|> div <$> product <* string "/" <*> factor,
     factor= read <$> number
             <|> string "(" *> sum <* string ")",
     number= takeCharsWhile1 isDigit <?> "number"}
  ~~~

  What on Earth for? One good reason is that these parser definitions can then be left-recursive, which is normally a
  death knell for parser libraries. There are other benefits like memoization and grammar composability, and the main
  downside is the obligation to declare the grammar record:

  ~~~ {.haskell}
  data Arithmetic f = Arithmetic{sum     :: f Int,
                                 product :: f Int,
                                 factor  :: f Int,
                                 number  :: f String}
  ~~~

  and to make it an instance of several rank 2 type classes:

  ~~~ {.haskell}
  $(Rank2.TH.deriveAll ''Arithmetic)
  ~~~

  Optionally, you may also be inclined to declare a proper ``Show`` instance, as it's often handy:

  ~~~ {.haskell}
  instance Show1 f => Show (Arithmetic f) where
     show Arithmetic{..} =
        "Arithmetic{\n  sum=" ++ showsPrec1 0 sum
             (",\n  product=" ++ showsPrec1 0 factor
             (",\n  factor=" ++ showsPrec1 0 factor
             (",\n  number=" ++ showsPrec1 0 number "}")))
  ~~~

  Once that's done, use [fixGrammar](http://hackage.haskell.org/package/grammatical-parsers/docs/Text-Grampa.html#v:fixGrammar) to, well, fix the grammar

  ~~~ {.haskell}
  grammar = fixGrammar arithmetic
  ~~~

  and then [parseComplete](http://hackage.haskell.org/package/grammatical-parsers/docs/Text-Grampa.html#v:parseComplete)
  or [parsePrefix](http://hackage.haskell.org/package/grammatical-parsers/docs/Text-Grampa.html#v:parsePrefix) to parse
  some input.

  ~~~ {.haskell}
  -- |
  -- >>> parseComplete grammar "42"
  -- Arithmetic{
  --   sum=Compose (Right [42]),
  --   product=Compose (Right [42]),
  --   factor=Compose (Right [42]),
  --   number=Compose (Right ["42"])}
  -- >>> parseComplete grammar "1+2*3"
  -- Arithmetic{
  --   sum=Compose (Right [7]),
  --   product=Compose (Left (ParseFailure {failurePosition = Down 4, expectedAlternatives = FailureDescription {staticDescriptions = ["end of input"], literalDescriptions = []}, errorAlternatives = []})),
  --   factor=Compose (Left (ParseFailure {failurePosition = Down 4, expectedAlternatives = FailureDescription {staticDescriptions = ["end of input"], literalDescriptions = []}, errorAlternatives = []})),
  --   number=Compose (Left (ParseFailure {failurePosition = Down 4, expectedAlternatives = FailureDescription {staticDescriptions = ["end of input"], literalDescriptions = []}, errorAlternatives = []}))}
  -- >>> parsePrefix grammar "1+2*3 apples"
  -- Arithmetic{
  --   sum=Compose (Compose (Right [("+2*3 apples",1),("*3 apples",3),(" apples",7)])),
  --   product=Compose (Compose (Right [("+2*3 apples",1)])),
  --   factor=Compose (Compose (Right [("+2*3 apples",1)])),
  --   number=Compose (Compose (Right [("+2*3 apples","1")]))}
  ~~~

  To see more grammar examples, go straight to the
  [examples](https://github.com/blamario/grampa/tree/master/grammatical-parsers/examples) directory that builds up several
  smaller grammars and combines them all together in the
  [Combined](https://github.com/blamario/grampa/blob/master/grammatical-parsers/examples/Combined.hs) module.

  For more conventional tastes there are monolithic examples of
  [Lua](https://github.com/blamario/language-lua2/blob/master/src/Language/Lua/Grammar.hs) and [Oberon](http://hackage.haskell.org/package/language-oberon) grammars as well.
license-name: BSD-3-Clause
