all-versions:
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.5
- 1.2.0
- 1.3.0
- 1.3.2
- 1.3.3
- 1.3.4
author: Jared Tobin
basic-deps:
  base: '>=4 && <6'
  kan-extensions: '>=5 && <6'
  lens: '>=4 && <6'
  mcmc-types: '>=1.0.1'
  mwc-probability: '>=2.0 && <3'
  pipes: '>=4 && <5'
  primitive: '>=0.5 && <1.0'
  transformers: '>=0.5 && <1.0'
changelog: ''
changelog-type: ''
description: |-
  Gradient-based traversal through parameter space.

  This implementation of HMC algorithm uses 'lens' as a means to operate over
  generic indexed traversable functors, so you can expect it to work if your
  target function takes a list, vector, map, sequence, etc. as its argument.

  If you don't want to calculate your gradients by hand you can use the
  handy <https://hackage.haskell.org/package/ad ad> library for automatic
  differentiation.

  Exports a 'mcmc' function that prints a trace to stdout, a 'chain' function
  for collecting results in memory, and a 'hamiltonian' transition operator
  that can be used more generally.

  > import Numeric.AD (grad)
  > import Numeric.MCMC.Hamiltonian
  >
  > target :: RealFloat a => [a] -> a
  > target [x0, x1] = negate ((x0 + 2 * x1 - 7) ^ 2 + (2 * x0 + x1 - 5) ^ 2)
  >
  > gTarget :: [Double] -> [Double]
  > gTarget = grad target
  >
  > booth :: Target [Double]
  > booth = Target target (Just gTarget)
  >
  > main :: IO ()
  > main = withSystemRandom . asGenIO $ mcmc 10000 0.05 20 [0, 0] booth
description-type: haddock
hash: 832587c823ee25f3da7645914f3aa126df6bb629bda51437ab7ca5dd62e563a6
homepage: http://github.com/jtobin/hasty-hamiltonian
latest: 1.3.4
license-name: MIT
maintainer: jared@jtobin.ca
synopsis: Speedy traversal through parameter space.
test-bench-deps:
  ad: '>=4 && <5'
  base: '>=4 && <6'
  hasty-hamiltonian: '>=0'
  mwc-probability: '>=2.0 && <3'
