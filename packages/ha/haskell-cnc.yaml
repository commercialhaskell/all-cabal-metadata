all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.3.200
author: Ryan Newton <rrnewton@gmail.com>
basic-deps:
  HSH: '>=0'
  HUnit: '>=0'
  MissingH: '>=0'
  array: '>=0'
  base: '>=3 && <5'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  extensible-exceptions: '>=0'
  ghc-prim: '>=0'
  mtl: '>=0'
  process: '>=0'
  random: '>=0'
  time: '>=0'
  unix: '>=0'
changelog: ''
changelog-type: ''
description: "\n\n Intel Concurrent Collections for Haskell\n ----------------------------------------\n
  Author: Ryan Newton, Copyright 2009-2010\n\n\nThis directory contains an implementation
  of the Intel Concurrent\nCollections programming model (CnC) for Haskell.  It works
  only with\nGHC.\n\nIf you are looking in this directory, you are probably not using
  this\npackage through cabal.  Currently, it contains a Makefile and other\nscripts
  that are redundant with the cabal file and will be removed in\nthe future.\n\nQuick
  Start:\n-----------------------------------------\n On Unix(ish) systems with a
  Bash shell, try this:\n\n  source install_environment_vars.sh\n  runcnc examples/primes.hs\n\nYou
  can also rerun the primes executable directly after that\n(primes.exe).  To run
  with a particular number of threads, say 8, try:\n  ./primes.exe +RTS -N8\n\n\n\n--------------------------------------------------------------------------------\nInstalling
  Haskell CnC \n--------------------------------------------------------------------------------\n\nYou
  need a working installation of \"ghc\" and \"cabal\".  The easiest way\nto accomplish
  this is with the Haskell Platform.  With those\nprerequisites you should be able
  to install Haskell CnC directly from\nthe web with:\n\n  cabal install haskell-cnc\n\nBuilding
  from source, including installing all dependencies:\n\n  git clone git://github.com/rrnewton/Haskell-CnC.git\n\n
  \ cd Haskell-CnC\n  cabal update\n  cabal install\n  \nThat will cause cabal to
  install a number of packages from \"Hackage\"\nand then build Haskell CnC.  If any
  of these dependencies break (don't\nbuild with your version of GHC).\n\nIf you are
  running as root you may have an easier time with:\n\n  cabal install --global\n\nOtherwise
  make sure that ~/.cabal/bin/ is in your path.\n\n\n  cabal install happy\n  cabal
  install \n\n          ------------------------------------\n          A GUIDE TO
  CABAL DEPENDENCY PROBLEMS\n          ------------------------------------\n\nBecause
  the Haskell CnC package exists in an ecosystem of\never-changing packages and compiler
  versions (cabal), and itself has\nmany dependencies.  Often these will get broken.
  \ However, the\nintrepid hacker can usually work around most problems.  Here, I
  will\ntry to make an account of the hacks that are needed to overcome\nobstacles.\n\n\n
  \ [2011.02.14] DRBG dependency broke on hackage due to tagged-0.2\n               Fixed
  now.\n  \n\n\n--------------------------------------------------------------------------------\nRunning
  Haskell CnC, Method (1): Normal method.\n--------------------------------------------------------------------------------\n\nCnC
  for Haskell can be used as a regular Haskell module.  \nLook at \"hello_world.hs\"
  in the examples directory.\n\n\n------------------------------------------------------------\nRunning
  Haskell CnC, Method (2): Inlined library.\n------------------------------------------------------------\n\nFor
  testing purposes, Haskell CnC can inline the library and enable\nthe user to choose
  between different scheduling options and runtime\nparameters statically.  Under
  this methodology the \"runcnc\" script is\nused to compile and execute CnC programs.
  \ The following environment\nvariable must be set:\n\n HASKELLCNC -- should be set
  to the install directory.\n            (Sourcing install_environment_vars.sh is
  one way to\n             accomplish this.)\n\n\nPreprocessor variables:\n\n MEMOIZE
  \   Turns on memoization of steps over tags.\n            This is frequently done
  on a per-program basis using\n            \"#define MEMOIZE\".\n\n REPEAT_PUT_ALLOWED
  \n            Are multiple put's into an item collection with\n            the same
  tag valid or an error?                       \n\n CNC_VARIANT     Which implementation?
  \ 'pure' or 'io'?\n CNC_SCHEDULER   Which scheduler within that implementation?
  (1-N)\n            These can also be set as environment variables when using\n            runcnc.\n\n
  INCLUDEMETHOD\n            ignore this, it's internal and is used for switching
  \n            between schedulers-as-modules or schedulers-as-includes\n\n\n\n------------------------------------------------------------\n
  \ Testing and Benchmarking\n------------------------------------------------------------\n\nNotes
  on running a full benchmark suite:\n\nTo compile with profiling support (for threadscope)\n\n
  \ GHC_DEFAULT_FLAGS=\"-eventlog\" NORUN=1 runcnc mandel.hs \n\nTo run and generate
  a .eventlog:\n\n  ./mandel.exe 300 300 80000 +RTS -ls -N31\n\nWill generate mandel.exe.eventlog\n\n\n\n"
description-type: text
hash: d0deb662053851bcb8d332802483786cf328fa448ab788fd2bbd68512f25d82c
homepage: http://software.intel.com/en-us/articles/intel-concurrent-collections-for-cc/
latest: 0.1.3.200
license-name: BSD-3-Clause
maintainer: Ryan Newton <rrnewton@gmail.com>
synopsis: Library for parallel programming in the Intel Concurrent Collections paradigm.
test-bench-deps: {}
