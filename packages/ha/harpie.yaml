all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
author: Tony Day
basic-deps:
  QuickCheck: '>=2.14 && <2.17'
  adjunctions: '>=4.0 && <5'
  base: '>=4.18 && <5'
  distributive: '>=0.4 && <0.7'
  first-class-families: '>=0.8.1 && <0.9'
  harpie: '>=0'
  prettyprinter: '>=1.7 && <1.8'
  quickcheck-instances: '>=0.3.31 && <0.4'
  random: '>=1.2 && <1.4'
  vector: '>=0.12.3 && <0.14'
  vector-algorithms: '>=0.9.0 && <0.10'
changelog: |+
  0.1
  ===

  - cleaved from numhask-array-0.11

changelog-type: markdown
description: "harpie\n===\n\n[![Hackage](https://img.shields.io/hackage/v/harpie.svg)](https://hackage.haskell.org/package/harpie)\n[![Build
  Status](https://github.com/tonyday567/harpie/workflows/build/badge.svg)](https://github.com/tonyday567/harpie/actions)
  <img src=\"https://static.wikia.nocookie.net/monster/images/2/28/Harpy.jpg\" alt=\"harpie\"
  width=\"100\"/>\n\nHaskell array programming, interface and environment (harpie).\n\n**harpie**
  is an array programming library written in Haskell. Features include:\n\n- **Rank
  polymorphism:** vectors, matrices, tensors and scalars all use the same API and
  functions and combine naturally, as the math gods intend.\n\n- **Both value- and
  type- level shapes:** consistent functionality for accessing and transforming shape
  is provided at both value-level and type-level.\n\n- **Dimensional agnosticism:**
  the granularity of an array is flexible with the same function able to be applied
  over rows, columns, over multiple dimensions at once, or at element-level.\n\n-
  **Pure Haskell:** promoting a higher-kinded, ergonomic style of array programming,
  in idiomatic Haskell style.\n\nThe library is experimental and educational (at least
  for the authors) and likely to remain so. Collaboration is most welcome.\n\nUsage\n===\n\nNaming
  conventions clash with the prelude and with each other, so importing should be qualified.\n\n```
  haskell\nimport qualified Harpie.Array as A\nimport qualified Harpie.Shape as S\nimport
  qualified Harpie.Fixed as F\n\n-- >>> a = F.range @[2,3,4]\n-- >>> F.shape a\n--
  [2,3,4]\n-- >>> pretty a\n-- [[[0,1,2,3],\n--   [4,5,6,7],\n--   [8,9,10,11]],\n--
  \ [[12,13,14,15],\n--   [16,17,18,19],\n--   [20,21,22,23]]]\n\n-- >>> a = A.range
  [2,3,4]\n-- >>> F.shape a\n-- [2,3,4]\n-- >>> pretty a\n-- [[[0,1,2,3],\n--   [4,5,6,7],\n--
  \  [8,9,10,11]],\n--  [[12,13,14,15],\n--   [16,17,18,19],\n--   [20,21,22,23]]]\n```\n\n\nDesign
  notes\n===\n\nHaskell utility\n---\n\nThe library attempts to be idiomatic Haskell
  and otherwise fit in with the language ecosystem. In particular, boxed Vectors are
  used as the array container to enforce immutability, permit lazy expression, and
  allow arbitrary element types.\n\nConsistency of type- and value- level list algorithms.\n---\n\nThe
  library is an attempt to provide a consistent approach to array programming whether
  or not array shape is held and computed at value-level or at type-level. \n\nThe
  Harpie.Shape module contains common list algorithms for value-level shapes (ie Int
  list operatorions) and type-level shapes (a type-level Nat list operations) that
  is as close to the same as possible. They cannot be identical because type and value
  programming in Haskell are very different languages. The [first-class-families](https://hackage.haskell.org/package/first-class-families)
  library was used to achieve this.\n\nIs it safe?\n---\n\nHarpie.Fixed arrays sit
  at around level 4.5 in [Justin Le's type safety heirarchy](https://blog.jle.im/entry/levels-of-type-safety-haskell-lists.html).
  They are designed with **static** type-safety in mind; a run-time error in shape
  or index computation is a bug. Typed shape information, however, is modelled on
  GHC.TypeNats with Nat and thus [Nat] being opaque types rather than inductively-structured.
  This makes compiler KnownNat and KnownNats discovery and proof witnessing problematic.\n\nInstead
  of dependently-typed approaches, the library leans into switching from fixed to
  untyped shape representation if shape is not known at runtime. \n\nIs it fast?\n---\n\nMaybe.
  Does [vector](https://hackage.haskell.org/package/vector) streaming lead to efficient
  code? If it does then harpie should be able to access this efficiency.\n\nIf you
  have a bunch of continguous data in need of strictly simple array processing then
  there are plenty of faster array programming options out there, in Haskell and elsewhere.
  If you need close-to-the-metal performance, try:\n\n- [hmatrix](https://hackage.haskell.org/package/hmatrix)
  provides bindings to [BLAS](https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms)
  and 45 years of Fortran tweaking.\n- [hasktorch](https://github.com/hasktorch/hasktorch)
  or [tensorflow](https://hackage.haskell.org/package/tensorflow) bindings to the
  might of the Python machince learning community.\n- [massive](https://hackage.haskell.org/package/massiv)
  or  [accelerate](https://hackage.haskell.org/package/accelerate) for homegrown Haskell
  speed.\n- [repa](https://hackage.haskell.org/package/repa) for archeology.\n- [orthotope](https://hackage.haskell.org/package/orthotope)
  for a more APL treatment of the problem domain, and for unboxed vector usage. \n\nbackpermute\n---\n\nAs
  computational complexity increases, either in array programmimg or in connectivity
  to other problem domains, harpie performance is (one-day) expected to come into
  her own. Backpermute fusion is the secret sauce.\n\nA canonical backpermute function
  is detailed in [Regular, Shape-polymorphic, Parallel Arrays in Haskell](https://benl.ouroborus.net/papers/2010-rarrays/repa-icfp2010.pdf)
  and would be implemented in harpie as:\n\n> repa_backpermute f a = tabulate (f (shape
  a)) (index a . f)\n\nThe harpie backpermute splits the function application into
  two parts, the macro-shape change and the pre-indexing operation:\n\n> harpie_backpermute
  f g a = tabulate (f (shape a)) (index a . g)\n\nThis, more general specification,
  should (one-day) allow more opportunities for the fusion rule to kick in:\n\n> forall
  f f' g g' (a :: forall a. Array a)). backpermute f g (backpermute f' g' a) == backpermute
  (f . f') (g . g') a\n\nType Ugliness\n===\n\nHarpies are monstrous beasties, fierce
  but not conventional or conventionally attractive:\n\n- type errors and information
  quickly explode in complexity and types can run to hundreds of lines. It's quite
  ugly.\n\n- Constraints cannot be encapsulated in the function they originate and
  thus have to be propogated in line with usage. Type-level programming in Haskell
  is a good idea in search of some composition.\n\n\n\n"
description-type: markdown
hash: f6ea141faa9d490b084c743c8e442b2a60ab611a90bcf7dea6f9b22b71f60248
homepage: https://github.com/tonyday567/harpie#readme
latest: 0.1.3.0
license-name: BSD-3-Clause
maintainer: tonyday567@gmail.com
synopsis: Haskell array programming.
test-bench-deps:
  base: '>=4.14 && <5'
  doctest-parallel: '>=0.3 && <0.5'
...
