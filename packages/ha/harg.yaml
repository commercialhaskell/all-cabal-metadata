homepage: https://github.com/alexpeits/harg
changelog-type: markdown
hash: 7e61638b8efeb6d500b72b29c6b191d14e3fc6eae843d6bc566469400b65f3d4
test-bench-deps:
  barbies: -any
  harg: -any
  base: -any
  higgledy: -any
  markdown-unlit: -any
  optparse-applicative: -any
  aeson: -any
maintainer: alexpeitsinis@gmail.com
synopsis: Haskell program configuration using higher kinded data
changelog: |
  # Changelog for harg

  ## 0.5.0.0 [2021.03.02]

  Library updates:

  - Add support for ghc >= 8.8 by updating `barbies` and `higgledy`. This means
    that **support is dropped** for ghc <= 8.2 (because of `barbies`)
  - Expose `HasX` classes from `Construct.hs`
  - Because of changes in `barbies`, `ApplicativeB` is exposed from `Options.Harg`
    instead of `ProductB`

  CI & development updates:

  - Update nix sources for using cached ghc v8.8.4 and dependencies
  - Add stack configuration for ghc v8.8.4 (lts-16.31 resolver)
  - Update github actions workflow to build both v8.8.4 and v8.6.5 with cabal and
    stack

  ## 0.4.2.1 [2020.08.01]

  Only cosmetic and functional changes, no library changes:

  - Minor CI tweaks
  - Format everything with ormolu

  ## 0.4.2.0 [2020.01.27]

  - Add explicit export and import lists
  - Some documentation fixes

  ## 0.4.1.0 [2019.12.22]

  - Parsers now stop immediately if a source error is encountered
  - Updated the JSON source to return a bytestring instead of an `aeson` `Value`
  - Fix broken deriving for `barbie` typeclasses by re-exporting `Rec`

  ## 0.4.0.0 [2019.09.16]

  - Fix wrong name in previous release (`HasDefaultValStr` -> `HasDefaultStr`)
  - Expose `fromSingle` and `fromNested` for when f ~ Identity
  - Expose classes `Build` and `Construct` from `higgledy`

  ## 0.3.0.0 [2019.09.16]

  - Remove `*With` variants of option constructors and make the `*With` variant
    behaviour the default (meaning now options are constructed using function
    composition and not `toOpt`)
  - Remove `opt` prefix from modifiers. Because `default` is a reserved keyword,
    this is now named `defaultVal` (to mirror `defaultStr`)

    NOTE: the above introduce breaking changes

  ## 0.2.0.0 [2019.09.06]

  - Trigger a parser failure when any option in the sources fails to parse

    NOTE: this introduces a breaking change, in that some parsers that failed
          silently and selected the default (if applicable) will now fail.

  ## 0.1.3.0 [2019.08.28]

  - Add `manyParser` to parse list of options separated by delimiter

  ## 0.1.2.0 [2019.08.19]

  - Add `optRequired` (renamed to `required` for 0.3.0.0) to mark option as
    required

  ## 0.1.1.0 [2019.08.16]

  - Add `optDefaultStr` (renamed to `defaultStr` for 0.3.0.0) to provide defaults
    as unparsed strings
  - Bump dependencies (`barbies` and `higgledy`)

  ## 0.1.0.1 [2019.07.19]

  - Minor documentation changes

  ## 0.1.0.0 [2019.07.18]

  - Initial release
basic-deps:
  barbies: '>=2.0.3 && <2.1'
  bytestring: '>=0.10.8 && <0.11'
  split: '>=0.2.3 && <0.3'
  base: '>=4.7 && <5'
  higgledy: '>=0.4.1 && <0.5'
  text: '>=1.2.3 && <1.3'
  optparse-applicative: '>=0.15.1 && <0.16'
  aeson: '>=1.4.2 && <1.5'
  yaml: '>=0.11.0 && <0.12'
  directory: '>=1.3.3 && <1.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.3.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.2.1
- 0.5.0.0
author: Alex Peitsinis
latest: 0.5.0.0
description-type: markdown
description: |
  # harg :nut_and_bolt:

  [![Build Status](https://github.com/alexpeits/harg/workflows/Build%20and%20test/badge.svg)](https://github.com/alexpeits/harg/actions)
  [![Hackage](https://img.shields.io/hackage/v/harg.svg)](https://hackage.haskell.org/package/harg)

  `harg` is a library for configuring programs by scanning command line arguments,
  environment variables, default values and more. Under the hood, it uses a subset
  of [`optparse-applicative`](https://hackage.haskell.org/package/optparse-applicative)
  to expose regular arguments, switch arguments and subcommands. The library
  relies heavily on the use of higher kinded data (HKD) thanks to the
  [`barbies`](https://hackage.haskell.org/package/barbies) library. Using
  [`higgledy`](https://hackage.haskell.org/package/higgledy) also helps reduce
  boilerplate code significantly.

  ## Documentation

  To find out more, check out the [docs](https://alexpeits.github.io/harg) or the
  package page on [hackage](https://hackage.haskell.org/package/harg). There is
  also an [example](https://github.com/alexpeits/harg/blob/master/Example.hs)
  module that serves as an extensive demonstration of the library.

  ## Roadmap

  - Better errors using `optparse-applicative`'s internals
  - Allow user to pass `optparse-applicative` preferences
  - Write tests

  ## Credits

  - [jcpetruzza](https://github.com/jcpetruzza)
  - [i-am-tom](https://github.com/i-am-tom)
  - [jmackie](https://github.com/jmackie)
license-name: BSD-3-Clause
