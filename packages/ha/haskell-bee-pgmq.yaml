all-versions:
- 0.1.0.0
author: Gargantext
basic-deps:
  aeson: '>=2.1 && <2.3'
  base: '>=4.17.2.0 && <5'
  bytestring: '>=0.11 && <0.13'
  containers: '>=0.6.7 && <0.8'
  deepseq: '>=1.0.0.0 && <1.7'
  haskell-bee: '>=0.1.0.0 && <0.2'
  haskell-bee-pgmq: '>=0'
  haskell-pgmq: '>=0.1.0.0 && <0.2'
  mtl: '>=2.2 && <2.4'
  postgresql-libpq: '>=0.10 && <=0.11'
  postgresql-simple: '>=0.6 && <0.8'
  safe: '>=0.3 && <0.4'
  safe-exceptions: '>=0.1.7 && <0.2'
  scientific: '>=0.3.7.0 && <0.4'
  text: '>=1.2 && <2.2'
  time: '>=1.10 && <1.15'
  units: '>=2.4 && <2.5'
  unix-time: '>=0.4.11 && <0.5'
changelog: ''
changelog-type: ''
description: "# haskell-bee-pgmq\n\nPostgreSQL/PGMQ broker implementation for [haskell-bee](https://github.com/garganscript/haskell-bee).\n\nThis
  package provides a PostgreSQL-backed message queue broker using [PGMQ](https://github.com/tembo-io/pgmq)
  (PostgreSQL Message Queue).\n\n## Database initialization\n\nNotice that upon broker
  initialization, this calls `PGMQ.initialize`\nwhich tries very hard to create the
  pgmq schema for you.\n\nIf you also want to pre-create the database itself, with
  some given\nuser, you can try something like this:\n\n```haskell\nimport Shelly
  qualified as SH\n\ncreateDBIfNotExists :: Text -> Text -> IO ()\ncreateDBIfNotExists
  connStr dbName = do\n  -- For the \\gexec trick, see:\n  -- https://stackoverflow.com/questions/18389124/simulate-create-database-if-not-exists-for-postgresql\n
  \ (_res, _ec) <- SH.shelly $ SH.silently $ SH.escaping False $ do\n    let sql =
  \"\\\"SELECT 'CREATE DATABASE \" <> dbName <> \"' WHERE NOT EXISTS (SELECT FROM
  pg_database WHERE datname = '\" <> dbName <> \"')\\\\gexec\\\"\"\n    result <-
  SH.run \"echo\" [sql, \"|\", \"psql\", \"-d\", \"\\\"\" <> connStr <> \"\\\"\"]\n
  \   (result,) <$> SH.lastExitCode\n    \n  return ()\n```\n"
description-type: markdown
hash: c342e68523a2b2e9a3017cdcc2ec00acdffcdfb5d0a50dbe707fbfcbeb8f0336
homepage: https://gitlab.iscpif.fr/gargantext/haskell-bee
latest: 0.1.0.0
license-name: AGPL-3.0-or-later
maintainer: gargantext@iscpif.fr
synopsis: PostgreSQL/PGMQ broker implementation for haskell-bee
test-bench-deps:
  aeson: '>=2.1 && <2.3'
  base: '>=4.17.2.0 && <5'
  containers: '>=0.6 && <0.8'
  haskell-bee: ^>=0.1.0.0
  haskell-bee-pgmq: '>=0'
  haskell-bee-tests: ^>=0.1.0.0
  hspec: '>=2.11 && <3'
  postgresql-simple: '>=0.6 && <0.8'
  random-strings: ==0.1.1.0
  tasty: '>=1.5 && <1.6'
  tasty-hspec: '>=1.2.0 && <2'
  text: '>=1.2 && <2.2'
