homepage: https://github.com/hgrano/HaXPath
changelog-type: markdown
hash: 1945743447d0f6c5b9006a5d0390c161b4ec99958491ffe6150548d6e5f24a7e
test-bench-deps:
  bytestring: '>=0.11.1.0'
  base: -any
  text: -any
  HUnit: -any
  HaXPath: -any
maintainer: huw.grano@gmail.com
synopsis: An XPath-generating embedded domain specific language.
changelog: |
  ## 0.3.0.1

  * Make documentation display on Hackage
  * Add mising Haddock

  ## 0.3.0.0

  * Remove dependency on `text`
  * Allow paths to be shown as any string-like type

  ## 0.2.0.0

  * Major refactor to simplify the API
  * Add axes contraints on schematic paths
  * This version was not published on Hackage

  ## 0.1.0.0

  * Initial experimental version
  * This version was not published on Hackage
basic-deps:
  base: '>=4.6 && <5'
  HList: '>=0.4.0.0 && <0.6.0.0'
all-versions:
- 0.3.0.0
- 0.3.0.1
author: Huw Grano
latest: 0.3.0.1
description-type: markdown
description: |
  # HaXPath
  HaXPath is a library and embedded domain-specifc language which uses strongly-typed Haskell expressions to represent
  XPaths.

  ## Motivation
  In many contexts when querying XML documents in Haskell we often need to use `String` values to represent the
  XPaths we want to use. These `String` expressions can quickly become hard to manage as they do not take advantage of
  Haskell's type system, particularly for more complex XPaths. We may not know until run-time whether the XPath is even
  syntactically valid. HaXPath does not have its own XPath engine to run the queries, rather it is expected to be used
  in combination with other libraries which have such functionality. Instead, we can simply convert the strongly-typed
  XPath expressions to `String` or `Text` and send them to our favourite APIs.

  ## HaXPath API
  HaXPath provides two core APIs: the standard API (`HaXPath` module) allows for expressing generic XPaths, while
  the schematic API (`HaXPath.Schematic` module) is a layer of abstraction built upon the standard API which constrains
  XPath expressions so they must follow a specifc document schema.

  ### Standard API
  `HaXPath` modules are expected to be imported qualified as otherwise you will get name conflicts with the Prelude. The
  operators however need not be qualified, and can conveniently be imported directly from `HaXPath.Operators`. All
  operators are suffixed with `.`, with the exception of the `#` operator.

  Some basic examples:

  https://github.com/hgrano/HaXPath/tree/master/examples/HaXPath/Examples.hs

  ### Schematic API
  The schematic API provides further constraints than the standard API by only allowing paths that are valid with respect
  to some custom schema. Take for example the following XML document for a restaurant menu:

  ```xml
  <?xml version="1.0" encoding="UTF-8"?>
  <menu>
    <item name="Belgian Waffles" price="$5.95"></item>
    <item name="Strawberry Waffles" price="$7.95"></item>
    <item name="French Toast" price="$4.50"></item>
  </menu>
  ```
  It should be fairly intuitive that there is an underlying schema to the above document. We can express this using the
  `HaXPath.Schematic` module:

  https://github.com/hgrano/HaXPath/tree/master/examples/HaXPath/Schematic/Examples.hs
license-name: BSD-3-Clause
