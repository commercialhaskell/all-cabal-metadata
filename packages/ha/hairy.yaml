all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
author: Taylor Fausak <taylor@fausak.me>
basic-deps:
  aeson: '>=0.7 && <0.9'
  base: '>=4 && <5'
  data-default: '>=0.5 && <0.6'
  hairy: '>=0'
  heroku: '>=0.1 && <0.2'
  http-types: '>=0.8 && <0.9'
  monad-logger: '>=0.3 && <0.4'
  mtl: '>=2 && <3'
  persistent: '>=2 && <3'
  persistent-postgresql: '>=2 && <3'
  persistent-template: '>=2 && <3'
  scotty: '>=0.9 && <0.10'
  text: '>=1 && <2'
  time: '>=1 && <2'
  transformers: '>=0.3 && <0.5'
  wai: '>=3 && <4'
  wai-extra: '>=3 && <4'
  warp: '>=3 && <4'
changelog: |
  # Changelog

  ## v0.1.3 (2014-10-15)

  - Added the ability to change the port using the `PORT` environment variable.
  - Added the ability to configure the database through the `DATABASE_URL`
    environment variable.

  ## v0.1.2 (2014-10-11)

  - Added support for GHC 7.6.
  - Added support for aeson 0.8, criterion 1.0, and transformers 0.4.

  ## v0.1.1 (2014-10-11)

  - Switched PostgreSQL username from "taylor" to "postgres".

  ## v0.1.0 (2014-10-11)

  - Initially released.

  ## v0.0.0 (2014-10-10)

  - Initially committed.
changelog-type: markdown
description: |
  # [Hairy][1]

  [![Package version][2]][3]
  [![Build status][4]][5]
  [![Dependency status][6]][7]

  Hairy is a JSON REST API built in Haskell. It uses Scotty to create a WAI
  application served by the Warp web server. The Aeson library handles encoding
  and decoding JSON, while Persistent manages the PostgreSQL database. Hairy
  features an Hspec test suite and Criterion benchmarks.

  The entire project is meant to be easy to build, understand, and use. It doesn't
  really do anything useful, but it shows how to do anything at all. Take a look
  at [the literate source][8] to see how it all works.

  - [Requirements](#requirements)
  - [Installation](#installation)
  - [Setup](#setup)
  - [Configuration](#configuration)

  ## Requirements

  Hairy works best with the latest [Haskell Platform][9], but it also supports GHC
  7.8 and 7.6. [PostgreSQL][10] 9.1 or later is also required.

  ## Installation

  Add it to your Cabal file:

  ```
  library
    build-depends:
      hairy ==0.1.*
  ```

  Or install it manually:

  ``` sh
  $ cabal update
  $ cabal install hairy-0.1.3
  ```

  This package uses [Semantic Versioning][11].

  ## Setup

  First create a database user for Hairy.

  ``` sh
  $ createuser --createdb postgres
  ```

  Then create databases for each environment.

  ``` sh
  $ psql --username postgres --command 'CREATE DATABASE hairy_development'
  $ psql --username postgres --command 'CREATE DATABASE hairy_production'
  $ psql --username postgres --command 'CREATE DATABASE hairy_test'
  ```

  Then just start the server!

  ``` sh
  $ hairy
  # => http://localhost:3000
  ```

  ## Configuration

  Hairy can be configured through environment variables.

  To configure the environment, use the `SCOTTY_ENV` environment variable.
  Possible environments include `Development`, `Production`, and `Test`.

  ``` sh
  $ env SCOTTY_ENV=Production hairy
  ```

  To configure the port, use the `PORT` environment variable.

  ``` sh
  $ env PORT=8080 hairy
  ```

  To configure the database, use the `DATABASE_URL` environment variable.

  ``` sh
  $ env DATABASE_URL=postgres://postgres:postgres@localhost:5432/hairy_development hairy
  ```

  [1]: https://github.com/tfausak/hairy
  [2]: https://img.shields.io/hackage/v/hairy.svg?style=flat
  [3]: https://hackage.haskell.org/package/hairy
  [4]: https://img.shields.io/travis/tfausak/hairy/master.svg?style=flat
  [5]: https://travis-ci.org/tfausak/hairy
  [6]: https://img.shields.io/hackage-deps/v/hairy.svg?style=flat
  [7]: http://packdeps.haskellers.com/feed?needle=hairy
  [8]: ./library/Hairy.lhs
  [9]: https://www.haskell.org/platform/
  [10]: http://www.postgresql.org
  [11]: http://semver.org/spec/v2.0.0.html
description-type: markdown
hash: e7d3312a24ed1276024137f0a298c1146765777237b85c867da64202d2906cfb
homepage: https://github.com/tfausak/hairy
latest: 0.1.3
license-name: MIT
maintainer: Taylor Fausak <taylor@fausak.me>
synopsis: A JSON REST API
test-bench-deps:
  base: '>=0'
  criterion: '>=0.8 && <2'
  hairy: '>=0'
  hspec: '>=1 && <2'
  http-types: '>=0'
  mtl: '>=0'
  persistent: '>=0'
  scotty: '>=0'
  time: '>=0'
  wai: '>=0'
  wai-extra: '>=0'
