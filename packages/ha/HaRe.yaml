all-versions:
- '0.6'
- 0.6.0.1
- 0.6.0.2
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.7.0.3
- 0.7.0.4
- 0.7.0.5
- 0.7.0.6
- 0.7.0.7
- 0.7.0.8
- 0.7.0.9
- 0.7.1.0
- 0.7.1.1
- 0.7.1.2
- 0.7.1.3
- 0.7.1.4
- 0.7.1.5
- 0.7.1.6
- 0.7.1.7
- 0.7.2.0
- 0.7.2.1
- 0.7.2.2
- 0.7.2.3
- 0.7.2.4
- 0.7.2.5
- 0.7.2.6
- 0.7.2.7
- 0.7.2.8
- 0.8.0.0
- 0.8.1.0
- 0.8.1.1
- 0.8.2.0
- 0.8.2.1
- 0.8.2.2
- 0.8.2.3
- 0.8.3.0
- 0.8.4.0
- 0.8.4.1
author: |-
  Chris Brown, Huiqing Li, Simon Thompson,
  Alan Zimmerman, Stephen Adams
basic-deps:
  Cabal: '>=0'
  HaRe: '>=0'
  Strafunski-StrategyLib: '>=0'
  base: '>=4.8.1.0 && <4.10'
  cabal-helper: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  ghc: '>=0'
  ghc-exactprint: '>=0.5.3.0'
  ghc-mod: '>=5.8.0 && <5.8.1'
  ghc-syb-utils: '>=0'
  gitrev: '>=1.1'
  hslogger: '>=0'
  monad-control: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0.13.2 && <0.13.3'
  optparse-simple: '>=0'
  syb: '>=0'
  syz: '>=0'
changelog: "2017-06-12 v0.8.4.1\n\t* Update for ghc-mod 5.8.0.0\n2017-02-11 v0.8.4.0\n\t*
  Update for GHC 8.0.2\n\t* Use ghc-mod version to 5.7\n\t* Add deleteDef refactoring
  to generalise a monadic function\n\tto use applicative (@SAdams601)\n\t* Add genapplicative
  refactoring to generalise a monadic function\n\tto use applicative (@SAdams601)\n2016-08-03
  v0.8.3.0\n\t* Update for GHC 8.0.1\n\t* Use ghc-mod version to 5.6 now it is released\n2016-01-20
  v0.8.2.3\n\t* Use ghc-mod version to 5.5 now it is released\n\t* Expose commands
  working in RefactGhc, so the ghc-mod session can\n\tbe shared in haskell-ide-engine.
  By @cocreature\n\t* Internal only, heavily clean up the ...Refactoring.Rename\n\tmodule.
  By @glittershark\n2016-01-07 v0.8.2.2\n\t* Lock ghc-mod version to 0.5.4 to prevent
  issues when 0.5.5 comes out\n\t* Set minimum bound on ghc-exactprint, the behaviour
  of layout has\n\tchanged for ifToCase. This will be re-done once ghc-exactprint
  is\n\tupdated for GHC 8.0.1\n\t* The constructors for ghc-mod `Options` are now
  re-exported too\n\tfor convenience.\n2015-11-08 v0.8.2.1\n\t* Set GHC-Opts to -O0
  for sane compile times\n\t* Make the ghc-hare depend on the library, rather than
  rebuilding\n\t* elisp no longer prompts to save modified dired buffers\n\tall of
  it.\n2015-10-07 v0.8.2.0\n\t* Work around a bug in GHC 7.10.2 that will not process
  pragmas\n\tafter a comment at the top of a file, when comments are returned\n\tfor
  ghc-exactprint processing.\n\t* Add parameters to all use sites in the original
  location when\n\tlifting a declaration.\n2015-10-05 v0.8.1.1\n\t* Move to new/old
  home at https://github.com/RefactoringTools/HaRe\n2015-10-05 v0.8.1.0\n\t* Reinstate
  processing of CPP directives as comments #36\n\t* Fix problem in renaming in a client
  module when the old name is\n\tnot in scope in the client module. #35\n\t* No longer
  mark a client module as refactored if no renaming\n\ttakes place in it.\n2015-10-04
  v0.8.0.0\n\t* Major rework, replacing haskell-token-utils with ghc-exactprint\n\t*
  Now supports GHC 7.10.2 and up. ONLY.\n\t* Functionally equivalent to v0.7.2.8\n2014-10-13
  v0.7.2.8\n\tlower bounds on parsec and haskell-token-utils\n2014-08-20 v0.7.2.7\n\tUpper
  bound on ghc-mod until 5.0 is released and stabilises\n2014-07-20 v0.7.2.6\n\ttokenise
  / basicTokenise moved to haskell-token-utils\n2014-07-16 v0.7.2.5\n\tFix incompatibility
  with haskell-token-utils 0.0.0.3, closing\n\tissue #14\n2014-07-03 v0.7.2.4\n\tRe-architect
  to split out haskell-token-utils as a separate\n\tpackage, usable with haskell-src-exts
  too\n2014-05-02 v0.7.2.3\n\t* Update for ghc-mod 4.1.0\n2014-04-03 v0.7.2.2\n\t*
  Fix renaming so that it also renames types in the export list of\n\ta module\n\t*
  revert to ghc-mod >= 4.0, with note that FFI exports can't\n\tcurrently be processed\n2014-04-01
  v0.7.2.1\n\t* limit ghc-mod to <= 3.1.7, new version 4.0 does not deal with\n\tFFI
  exports. This does not stop ghc-mod >= 4.0 being used in the\n\teditor, it is just
  the library linked into ghc-hare\n\t* Added disclaimer that API is subject to change
  without notice\n\t* liftToTopLevel now brings along an updated type signature,\n\tprovided
  there are no constraints on any of the types\n2014-03-23 v0.7.2.0\n\t* Reorganised
  package structure to have\n\tLanguage.Haskell.Refact.HaRe which provides all the
  functions\n\tneeded to call the refactorer from external code, and\n\tLanguage.Haskell.Refact.API
  which provides the interfaces to write\n\tnew refactorings\n\t* liftToMod of last
  local decl having preceding comment now removes 'where'\n\t* Correctly determine
  the location for a demoted decl\n2014-03-22 v0.7.1.7\n\t* Correctly determine what
  parameters to add when lifting a decl\n\t* Do not demote a decl if it is used in
  more than one match\n2014-03-19 v0.7.1.6\n\t* Do not treat single-line layout as
  a group, hence preserving\n\tlayout of adjacent let expressions when renaming.\n\t*
  Process Template Haskell expressions instead of blowing up\n2014-03-17 v0.7.1.5\n\t*
  Adding parameters to lifted declarations now works as expected\n2014-03-09 v0.7.1.4\n\t*
  Load and process files using TH and/or QuasiQuotes\n\t* Make loading of multiple
  targets from a cabal file more robust\n2014-03-06 v0.7.1.3\n\t* Various fixes for
  robustness based on real world trials\n\t* Rework the free and declared variable
  calculation to be more accurate\n\t* Extend the range of syntax elements that HaRe
  can handle when\n\treading a file.  Most bar parallel extensions are in place.\n\t*
  Make sure the refactored file retains its original extension, so\n\tthat syntax
  highlighting still works while the preview is being done.\n2014-01-28 v0.7.1.2\n\t*
  Ensure that the right target is activated for the primary file\n\twhen it belongs
  to a non-library target,not just for client\n\tmodules of it.\n2014-01-27 v0.7.1.1\n\t*
  The non-library targets were having the wrong path prepended\n2014-01-26 v0.7.1.0\n\t*
  Rework the module loading to load each target in turn, so that\n\tall exe, test,
  benchmark etc will be refactored in one go\n2013-12-18 v0.7.0.9\n\t* Tweaks to output
  stage based on real world use. Renaming seems\n\tstable, liftXXX, demote have issues\n\t*
  Removed deprecated hspec-discover dependency\n\t* added ghc-hare show command to
  the elisp as well to be able to\n\tcheck that it is using the correct cabal file\n2013-12-16
  v0.7.0.8\n\t* Major rewrite of the token output stage. It now makes use of a\n\tdual-tree
  structure to manage the maintenance of required vertical\n\tlayout while refactoring.\n2013-10-21
  v0.7.0.7\n\t* Bump the lower bound on Diff\n2013-10-01 v0.7.0.6\n\t* Sort out most
  of the do/in/let layout when renaming. Only nested\n\tlayout changes to be dealt
  with.\n\t* Updated to use the latest ghc-mod, with cabal 1.18.x sandbox\n\tsupport.\n\t*
  Updated to latest versions of Diff and hspec\n\t* When refactoring a CPP pre-processed
  file, read the preprocessor\n\tdirectives and non-compiled code as comments, so
  the source can be\n\tround-tripped. This allows refactoring of simple #if/#else/#endif\n\tcode.
  NOTE: no refactoring is done on code that is not live after\n\tthe preprocessor.\n2013-09-12
  \ v0.7.0.5\n\t* Now able to get tokens for a file pre-processed with CPP. But it\n\tis
  the pre-processed output, so the CPP directives are stripped\n\tout when writing
  out the refactored source.\n\n2013-09-11  v0.7.0.4\n\t* Correct Haddock compile
  error. Close #4\n\t* hsWithBndrs only exists for GHC > 7.4.x\n2013-09-10  v0.7.0.3\n\n\t*
  Fix elisp, would not commit refactoring due to missing methods\n\n2013-09-08  v0.7.0.2\n\n\t*
  Fix issue #3: ifToCase formatting\n\n2013-09-05  v0.7.0.1\n\n\t* Fix issue #2: elisp\n\n2013-09-04
  v0.7.0.0\n\n\t* Alpha release with new GHC API\n\n\n"
changelog-type: text
description: |
  A Haskell 2010 refactoring tool. HaRe supports the full
  Haskell 2010 standard, through making use of the GHC API.

  Version 0.7.2.8 supports up to GHC 7.6.3.

  There is no support for GHC 7.8.x. There will never be support for GHC 7.8.x

  From version 0.8.0.0, GHC 7.10.2 is supported.

  From version 0.8.3.0, GHC 8.0.1 is supported.

  From version 0.8.4.0, GHC 8.0.2 is supported.

  It is tested against GHC 7.10.3, GHC 8.0.1 and GHC 8.0.2 (via travis-ci.org)

  It currently only has emacs integration built in, community input
  welcome for others.

  HaRe attempts to operate in a safe way, by first writing new files with
  proposed changes, and only swapping these with the originals when the change
  is accepted. In the process the original file is renamed to have the current
  date/time as a suffix. Thus it should be possible to (manually) undo changes.

  Even so, it is strongly advised to back up any source files before
  refactoring, as we can make no promises as to the reliability of this tool.
  Use at your own risk.

  At the moment parsing of any file with FFI exports will fail.

  See Language.Haskell.Refact.HaRe for the current list of refactorings supported
description-type: haddock
hash: 17b0b7908bd980c5fe2e0562b1c8c586270808c9230115bef019a1c28d6bfa6b
homepage: https://github.com/RefactoringTools/HaRe/wiki
latest: 0.8.4.1
license-name: BSD-3-Clause
maintainer: Alan Zimmerman (alan.zimm@gmail.com)
synopsis: the Haskell Refactorer.
test-bench-deps:
  Diff: '>=0.3.0'
  HUnit: '>=0'
  HaRe: '>=0'
  attoparsec: '>=0'
  base: '>=4.8.1.0 && <5'
  base-prelude: '>=0'
  case-insensitive: '>=0'
  containers: '>=0'
  conversion: '>=0'
  conversion-case-insensitive: '>=0'
  conversion-text: '>=0'
  directory: '>=0'
  foldl: '>=0'
  ghc: '>=0'
  ghc-exactprint: '>=0.5.3.0'
  ghc-mod: '>=5.8.0 && <5.8.1'
  ghc-syb-utils: '>=0'
  hslogger: '>=0'
  hspec: '>=0'
  mtl: '>=0'
  parsec: '>=0'
  turtle: '>=1.3.0'
