all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.3
- 0.3.0.9
- 0.3.1.0
- 0.3.1.1
author: |-
  Klara Marntirosian,
  Gert-Jan Bottu,
  Ruben Pieters
basic-deps:
  base: '>=4.8 && <5'
  containers: '>=0.5.6'
  directory: '>=0'
  filepath: '>=1.4.1'
  parsec: '>=3.1.6'
  pretty: '>=1.1.3'
  process: '>=1.4'
changelog: "0.3.1.1\n - User manual added.\n\n0.3.1.0\n - Addition of two modules
  that support easy use of time-space constraints, based on the \"Geometrical\n   constraints
  for CRUD\", by N. Beldiceanu, E. Arafailova, R. Douence.\n - MiniZinc boolean, integer
  and floating point literals are now represented easily with\n   Haskell literals.
  Functions \"int\", \"bool\" and \"float\" are not necessary any more.\n - With the
  use of the OverloadedStrings option, a MiniZinc variable reference can be \n   represented
  easily with the name of that variable as a Haskell string.\n - Simpler declaration
  of variables and user-defined operations.\n\n0.3.0.0\n - Added support for annotations\n
  - Structural changes in the representational system of MiniZinc models\n - Module
  Interfaces.MZAST renamed to Interfaces.MZASTBase\n - Module Interfaces.MZAST used
  for a more human friendly interface for building \n   representations of MiniZinc
  models.\n - Module Interfaces.MZBuiltIns added. Contains haskelzinc represenatation
  of predefined MiniZinc \n   operators, functions, tests, predicates and annotations.\n
  - Module Interfaces.FZSolutionParser provides parsers useful for building custom
  solutions' \n   parsers, in case a MiniZinc output item alters the default format
  of the solutions.\n - Compatibility with GHC 8.0.1 tested (and passed)\n\n0.2.0.0\n
  - Added support for returning specified number of solutions\n - Interactive interface
  of iTestModel improved\n - Skips writing .mzn file\n - Parses solutions directly,
  instead of writing into and reading from a file\n"
changelog-type: text
description: "# Description\nThis package was created in the context of the [GRACeFUL
  project](https://www.graceful-project.eu/).\n\nThe haskelzinc library defines an
  interface to the MiniZinc constraint proramming language. It provides\n\n* a Haskell
  abstract syntax tree for the MiniZinc language, with which one can represent MiniZinc
  models in Haskell\n* a human-friendly DSL for building MiniZinc model representations\n*
  a pretty printer to print the representation of a MiniZinc model in MiniZinc\n*
  a parser that returns a representation of the solutions obtained by running the
  MiniZinc model\n* a set of functions useful for building a custom FlatZinc solutions
  parser.\n* a set of functions for constructing a model with time and space constraints,
  including cost related constraints.\n\nAn additional module gives the possibility
  to directly get the solutions of a MiniZinc finite domain model. \nOption for interactive
  interface is provided, as well as choice between two solvers: the G12/FD built-in
  \nsolver of FlatZinc and choco3.\n\n# Documentation\nAPI documentation is provided
  in [hackage](https://hackage.haskell.org/package/haskelzinc). Additionally, a \n[user
  manual](https://hackage.haskell.org/package/haskelzinc-0.3.1.0/src/haskelzinc_User_Guide.pdf)
  comes \ntogether with the installation of the package.\n\n# Installation\nThis library
  is [available](https://hackage.haskell.org/package/haskelzinc) on hackage. Use `cabal
  install`.\n\n## Requirements\n * GHC 7.10.3+ or 8\n * MiniZinc 2.0 or 2.1\n\n##
  Optional requirements\nTo use choco solver, also required:\n\n   - JDK 8+\n   -
  The following jar files (can be also found in the `choco/` directory of [the haskelzinc
  repo](https://github.com/GRACeFUL-project/haskelzinc))\n     - choco_solver (with
  dependencies) [http://choco-solver.org/Download?q=releases]\n     - choco_parser
  [https://oss.sonatype.org/content/repositories/releases/org/choco-solver/choco-parsers/3.3.3/]\n
  \    - ANTLR >4.5.2 java runtime binaries [http://www.antlr.org/download.html]\n\n#
  Configuration\n  1. Create a file `HZconf/conf.txt` in the same directory level
  where you want to run your code.\n  2. Fill in the corresponding paths by adding
  the equal sign (=) and the correct path.\n    * MINIZINC_DIR: the directory where
  `mzn2fzn` and `flatzinc` executables are located\n    * CHOCO_PARSER: the path of
  the choco parser java library\n    * CHOCO_SOLVER: the path of the choco solver
  java library\n    * ANTLR: the path of the antlr java library\n\nExample:\n\n> MINIZINC_DIR
  = path/to/dir\n\n# Not yet supported\n * MiniZinc enumerated types\n * Set constraints
  with the choco solver\n\n# Running a model\nConsider the `nineDigitArrangement`
  which can be found in `GExamples.hs` (root directory).\nOne needs to import module
  `Interfaces.MZinHaskell` to use the functions `iRunModel` or `runModel` which run
  a given representation of a MiniZinc model and return its solution(s).\n\n## Interactive\nTo
  run the model interactively, use `iRunModel` and follow the instructions. An example
  is given below. \n\n```\n> iRunModel nineDigitArrangement\nEnter working directory:\n/path/to/desired/directory\nEnter
  model's name: nine\nChoose a solver from the list below:\n        1. G12/FD\n        2.
  choco3\n\nInteger value associated with the solver: 1\nNumber of solutions to be
  returned: 1\nRight [[(\"A\",MInt 5),(\"B\",MInt 3),(\"C\",MInt 2),(\"D\",MInt 1),(\"E\",MInt
  4),(\"F\",MInt 7),(\"G\",MInt 6),(\"H\",MInt 9),(\"I\",MInt 8),(\"s\",MInt 7448)]]\n```\n\nThe
  script first asks for a working directory. This is where related files will be stored.
  Next, a name for the model should be given, which will be used for naming the files
  that will be stored in the working directory. After a name is chosen, the user is
  presented with a list of supported solvers from which (s)he can choose by entering
  the corresponding number of the solver. Last, the user is prompted to specify the
  desired number of solutions. The number of returned solutions will be at most of
  the user given number. They will be less in case there are no more solutions.\n\n##
  Noninteractive\nThe same functionality can be triggered in a noninteractive manner,
  with the use of `runModel`. The user input in `iRunModel` is entered as arguments
  (in the same order) of `runModel`. Make sure to escape special characters in the
  string of the working directory path. The example below returns the same results
  as the interactive example above.\n\n```\nrunModel nineDigitArrangement \"/path/to/desired/directory\"
  \"nine\" 1 1\n```\n"
description-type: markdown
hash: e7aee6dc8b5ab699e1d3e5ae82b0e7ddb8a48823bd7f3369f1223a79a027e427
homepage: ''
latest: 0.3.1.1
license-name: BSD-3-Clause
maintainer: |-
  klara.mar@cs.kuleuven.be,
  gertjan.bottu@kuleuven.be,
  ruben.pieters@cs.kuleuven.be
synopsis: 'CP in Haskell through MiniZinc '
test-bench-deps: {}
