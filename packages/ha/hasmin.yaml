all-versions:
- 0.3.0.1
- 0.3.1.3
- 0.3.2
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
- 0.3.2.4
- 0.3.3
- 0.3.3.1
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.2.1
- 1.0.3
author: Cristian Adrián Ontivero
basic-deps:
  attoparsec: '>=0.12 && <0.14'
  base: '>=4.10 && <5.0'
  bytestring: '>=0.10.2.0 && <0.11'
  containers: '>=0.5 && <0.7'
  gitrev: '>=1.0.0 && <1.4'
  hasmin: '>=0'
  hopfli: '>=0.2 && <0.4'
  matrix: '>=0.3.4 && <0.4'
  mtl: '>=2.2.1 && <2.3'
  numbers: '>=3000.2.0.0 && <3000.3'
  optparse-applicative: '>=0.11 && <0.16'
  parsers: '>=0.12.3 && <0.13'
  text: '>=1.2 && <1.3'
changelog: |
  # Changelog
  This project adheres to [PVP](https://pvp.haskell.org).

  ## 1.0.3
  ### Fixed
  * `overflow: visible hidden` minifying as `overflow:hidden`. Now it's left
    untouched. It's possible that there where other instances of this, which
    should now be fixed.
  * quickcheck-instances upper bound not admitting version 0.3.19
    ([#5](https://github.com/contivero/hasmin/issues/5))
  * Incorrect description for two flags in the usage info (when running `--help`).
    The descriptions for `-no-@kfsel-min` and `-no-transform-function-min` were
    swapped.

  ### Added
  * Minification for properties with a pair of values whose second one defaults to
    the first when missing. For example: `overflow: clip clip` is minified to
    `overflow: clip`. This also properly interacts with property traits, i.e.
    `overflow: visible visible` is properly minified to `overflow: unset` (since
    `visible visible` is equivalent to `visible`, and `visible` is the initial
    value and overflow doesn't inherit, thus `unset`).
    Among the properties for which this is now done are:

    - `border-bottom-left-radius`
    - `border-bottom-right-radius`
    - `border-top-left-radius`
    - `border-top-right-radius`
    - `overscroll-behavior`

  * Property traits for `overscroll-behavior` and its longhands,
    `overscroll-behavior-x` and `overscroll-behavior-y`.
  * Minification for `object-position`. This property's value is now parsed as a
    `<position>`, allowing to apply all the minifications a `<position>` allows.
  * Minification for `text-emphasis-position`. This property now correctly
    utilizes its traits, e.g. `text-emphasis-position: right over` minifies to
    `text-emphasis-position: unset`.

  ## 1.0.2.1
  ### Fixed
  * Parser choking on CSS variables. ([#3](https://github.com/contivero/hasmin/issues/3))

  ## 1.0.2
  ### Added
  * `caret-color` and `font-display` to the property traits table, enabling their minification.
  * `border-radius` minification.
  * Parsing and minification of `<basic-shape>`.

  ### Improved
  * Position minification

  ## 1.0.1

  ### Added

  * Removing `all` and `all and` in media query lists, since `all`
    is assumed when not present. In other words, the following
    rules are equivalent:
    ```css
    @media all {/*..*/}
    @media {/*..*/}
    ```
    and so are these:
    ```css
    @media all and (min-width: 500px) {/*..*/}
    @media (min-width: 500px) {/*..*/}
    ```
    Note that this applies to media query lists in at-import rules too.

  * Replacing the `url()` notation for a \<string> when used in the `@import`
    rule.

  * Four pseudoelement minifications:

    1. `:nth-of-type(1)` --> `:first-of-type`.
    2. `:nth-last-of-type(1)` --> `:last-of-type`.
    3. `:nth-child(1)` --> `:first-child`.
    4. `:nth-last-child(1)` --> `:last-child`.

  * `[class~=x]` to `.x` minification.

  ### Improved
  * \<position> parser, making hasmin around four times faster on stylesheets with
    many \<position> values.

  ### Fixed
  * Length's Eq instance, which would equate lengths with the same numerical
    value when one had an absolute unit, and the other relative, e.g. 1in and 1em.
  * Escaped character conversion: converting characters would crash the program
    when:

      1. The escaped character had more than 6 hexadecimal digits (6 is the specs
         maximum); E.g. `\aaaaaaa`.
      2. The escaped character's numerical representation was out of the unicode
         range.

    This is no longer the case.

  ## 1.0

  ### Added
  * `border-color-*`, `border-width-*` and `border-style-*` longhands are now
     replaced by their shorthand, when the four corresponding longhands are
     present in a rule.
  * Style rules merging: merges pairs of rules that either have all the
    same selectors, or all the same declarations. For it to be safe, it only does
    so whenever two conditions don't meet:
      1. There is a rule in between with the same specificity
      2. This rule has a declaration that "clashes" (interferes) with one of the
         declarations of the rules to be merged.

    By default it is enabled, but it can be disabled with `--no-rule-merging` (or
    using a `Config` with `MergeRulesOn`).

  ### Changed
  * Replaced `--no-property-sorting` for `--sort-properties`. Now Hasmin doesn't
    sort properties by default; sorting declarations became opt-in rather than
    opt-out. This is because:
      1. Whether lexicographical sorting of properties aids compression varies a
         lot from stylesheet to stylesheet, for some files it helps, for others it
         hurts.
      2. The current implementation doesn't take into account all the possible
         interactions between properties, making it unsafe.

  ### Fixed
  * Fixed non-exhaustive pattern bug introduced in 0.3.3
  * Fixed parser choking with rules that contained a semicolon but no
    declarations, e.g. `div { ; }`.

  ## 0.3.3 [YANKED]
  This version introduced a non-exhaustive pattern bug. Don't use it.

  ### Added
  * Simple merging of adjacent media queries (`@media` rules), e.g.:
  ```css
  @media all and (min-width: 24rem) {
    a { font-size: 1.2rem; }
  }
  @media all and (min-width: 24rem) {
    b { padding-left: .25rem; padding-right: .25rem; }
  }
  ```
  Gets merged into into:
  ```css
  @media all and (min-width: 24rem) {
    a { font-size: 1.2rem; }
    b { padding-left: .25rem; padding-right: .25rem; }
  }
  ```
  This closes [#2](https://github.com/contivero/hasmin/issues/2).

  ## 0.3.2.4
  * Relaxed doctest upper bound once more, see [stackage issue 2663](https://github.com/fpco/stackage/issues/2663#issuecomment-319880160).

  ## 0.3.2.3
  * Relaxed doctest upper bound.

  ## 0.3.2.2
  * Relaxed criterion upper bound.

  ## 0.3.2.1
  * Relaxed optparse-applicative upper bound.

  ## 0.3.2
  ### Fixed
  * Some dimensions minifying incorrectly.
  * Some Eq instances.
  * <An+B> values data type modified to disallow invalid values. This makes the
    data type safer, also simplifying the Quickcheck Arbitrary instance.
  ### Improved
  * Test coverage.

  ## 0.3.1.3
  ### Added
  * Support for `@supports` rules, and a slight minification for them: it
    removes adjacent negations, i.e.: @supports not (not ...) gets turn into
    @supports ....
  ### Fixed
  * A small bug with `:lang()` where spaces before the right parenthesis
    weren't being removed.
  ### Improved
  * Test coverage.

  ## 0.3.0.1
  Initial release
changelog-type: markdown
description: |
  Hasmin - A Haskell CSS Minifier
  ====
  [![Build Status](https://travis-ci.org/contivero/hasmin.svg?branch=master)](https://travis-ci.org/contivero/hasmin)
  [![Hackage](https://img.shields.io/hackage/v/hasmin.svg?style=flat)](http://hackage.haskell.org/package/hasmin)
  [![Hackage-Deps](https://img.shields.io/hackage-deps/v/hasmin.svg?style=flat)](http://packdeps.haskellers.com/specific?package=hasmin)
  [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)

  Aside from the usual techniques (e.g. whitespace removal, color minification,
  etc.), the idea was to explore new possibilities, by implementing things
  other minifiers weren't doing, or they were, but not taking full advantage of.

  Also, the minifier implements some techniques that do nothing for minified
  sizes, but attempt to improve post-compression sizes (at least when using
  DEFLATE, i.e. gzip).

  For a list of techniques, see [the wiki](https://github.com/contivero/hasmin/wiki).
  To use it as a library, see
  [below](https://github.com/contivero/hasmin#library).

  ## Building & Installing
  ### Stack
  The easiest and prefered way is using
  [stack](https://docs.haskellstack.org/en/stable/README/). To directly install, use the following one-liner:
  ```sh
  git clone git@github.com:contivero/hasmin.git && cd hasmin && stack install
  ```
  Stack installs inside `~/.local/bin` by default. If you'd rather just try hasmin
  out, replace `install` by `build`, and then use `stack exec hasmin` from inside
  the hasmin directory (keep in mind it has a slight additional delay at the
  beginning when run this way).

  ### Cabal
  Alternatively, you can use [cabal](https://www.haskell.org/cabal/):
  ```sh
  $ cd path/to/hasmin/repo
  $ cabal update                      # Make sure to have the latest package list
  $ cabal sandbox init                # Initialise a sandbox
  $ cabal install --only-dependencies # Install dependencies into the sandbox
  $ cabal build                       # Build hasmin inside the sandbox
  ```

  ## Minifier Usage
  Hasmin expects a path to the CSS file, and outputs the minified result to
  stdout. Say you have a `sheet.css` and want to minify it, and save it as
  `sheet.min.css`. Then, run:
  ```sh
  $ hasmin sheet.css > sheet.min.css
  ```

  Every technique is enabled by default, except for:
   1. Escaped character conversions (e.g. converting `\2714` into `✔`, enabled
      with `--convert-escaped-characters`).
   2. Dimension minifications (e.g. converting `12px` to `9pt`, enabled with
      `--dimension-min`, or just `-d`).
   3. Lexicographical sorting of declarations (enabled with
      `--sort-declarations`).

  The first two are disabled mainly because they are—on average, not
  always—detrimental for DEFLATE compression. As for declaration sorting, whether
  it benefits or hurts compression rates is very stylesheet-dependent, and the
  current implementation is quite naive, hence unsafe.

  When something needs to be disabled, use the appropriate flag. Not every
  technique can be toggled, but if there is any one in particular that you need to
  and can't, open an issue about it.

  Note: there is a problem in Windows when using the
  `--convert-escaped-characters` flag to enable the conversion of escaped
  characters. A workaround is changing the code page, which can be done by running
  `chcp 65001` in the terminal (whether cmd, or cygwin).

  ## Library
  The preferable way to use Hasmin as a library is to `import Hasmin`; a usage
  example can be seen in the [module's documentation](https://hackage.haskell.org/package/hasmin/docs/Hasmin.html).
  That is currently the only module that is sure to abide by
  [PVP](https://pvp.haskell.org/). Most other exposed modules are so because tests
  need it, and thus definitions there may be changed anytime. In case something
  internal is needed though, feel free to open an issue about it.

  ## Zopfli Integration
  Hasmin uses bindings to Google's
  [Zopfli library](https://en.wikipedia.org/wiki/Zopfli), allowing the
  possibility to compress the result.

  Since the output is a gzip file, it can be used for the web. It tipically
  produces files 3~8% smaller than zlib, at the cost of being around 80 times
  slower, so it is only a good idea if you don't need compression on the fly.


  Zopfli is [released under the Apache License, Version 2.0](https://github.com/google/zopfli/blob/master/COPYING).
description-type: markdown
hash: 9bf0a7ad1531407ee7940f204d4a33624b94dae6dd48d7d5c3ba6071e637b9a7
homepage: https://github.com/contivero/hasmin#readme
latest: 1.0.3
license-name: BSD-3-Clause
maintainer: Cristian Adrián Ontivero <cristianontivero@gmail.com>
synopsis: CSS Minifier
test-bench-deps:
  QuickCheck: '>=2.8 && <3.0'
  attoparsec: '>=0.12 && <0.14'
  base: '>=4.10 && <5.0'
  criterion: '>=0.11 && <1.6'
  directory: '>=1.3.0.0 && <1.4'
  doctest: '>=0.11 && <0.17'
  doctest-discover: '>=0.1.0.0 && <0.3'
  hasmin: '>=0'
  hspec: '>=2.2 && <3.0'
  hspec-attoparsec: '>=0.1.0.0 && <0.2'
  mtl: '>=2.2.1 && <2.3'
  quickcheck-instances: '>=0.3.16 && <0.4'
  text: '>=1.2 && <1.3'
