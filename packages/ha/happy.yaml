homepage: https://www.haskell.org/happy/
changelog-type: markdown
hash: 354c16f24c84750e42c104c14b0a3545742890791d34e106fe1dd526abd3dac4
test-bench-deps:
  base: -any
  process: -any
maintainer: Simon Marlow <marlowsd@gmail.com>
synopsis: Happy is a parser generator for Haskell
changelog: "## 1.21.0\n\nThe main focus of this release was revamping the build system
  and bootstrapping.\n\n* The release no longer contains generated source code. Instead
  of simply\n  requiring a pre-built bootstrap version of Happy in that event, we
  have a\n  parser-combination-based implementation of enough of Happy to bootstrap
  the\n  rest. (Currently, the bootstrap version is everything but attribute grammars,\n
  \ and thus sufficient for e.g. GHC, but this is subject to change.) The\n  bootstrap
  version of Happy is then sufficient to build Happy once again with\n  all features
  enabled.\n\n  Note, this means users of attribute grammars will have to modify the
  way\n  they build happy if they were previously building from Hackage relying on
  the\n  pre-generated sources.\n\n* Rather than creating many \"templates\" at build
  time, there is a single\n  combined template. Different implementations are chosen
  using CPP, as was\n  already done  within the templates before.\n\n* Some imports
  were tightened down, which may help building with newer versions\n  of `base`.\n\n##
  1.20.0\n\n* Fix #121: the -i flag produces an .info file even if the `%expect`\n
  \ pragma is violated\n* Fix #131: qualify uses of Prelude functions in generated
  code\n* Fix #161: drop fewer parse items when generating an .info file\n* Introduce
  the `%shift` directive to resolve shift/reduce conflicts\n  explicitly, useful in
  conjunction with `%expect 0`\n* Remove the deprecated build configuration flag `small_base`\n\n##
  1.19.12\n\n* Fix for building with GHC 8.8.x\n* Move custom Setup preprocessing
  steps into a separate executable, like\n  Alex\n\n## 1.19.11\n\n* Fix for building
  with GHC 8.6.x\n\n## 1.19.10\n\n* Fix polymorphic (rank-n) non-terminals\n* Fix
  for GHC 8.8.1\n\n\n## 1.19.9\n\n* Fix cabal warnings\n* Bump upper bounds\n* Fix
  build with GHC 8.4.1-alpha\n\n## 1.19.8\n\n* Fix issue #94 (some grammars don't
  compile due to new type signatures\n  introduced to allow overloading to be used)\n\n##
  1.19.7\n\n* Fix missing test suite files in the sdist\n\n## 1.19.6\n\n* Manually
  generate Parser.hs using Makefile before sdist, to fix\n  bootstrapping problems
  with cabal sandboxes & new-build\n* Documentation fixes\n* Fixed GLR support\n*
  New option `-p`/`--pretty` prints the grammar rules (only) to a file\n* Added generation
  of additional type signatures to enable use of\n  typeclasses in monadic parsers.\n\n##
  1.19.5\n\n* Fixes for GHC 7.10\n* Code cleanups (thanks Index Int <vlad.z.4096@gmail.com>)\n\n##
  1.19.4\n\n* Fix for GHC 7.10 (Applicative/Monad, #19, #21)\n\n## 1.19.3\n\n* Fix
  for GHC 7.2 (#16)\n\n## 1.19.2\n\n* Fixes for clang (XCode 5)\n\n## 1.19.1\n\n*
  Repackaged to build with GHC 7.7+\n\n## 1.19\n\n* Necessary changes to work with
  GHC 7.8\n\n## 1.18.10\n\n* Fix build with GHC 7.6\n\n## 1.18.8\n\n* Fix a packaging
  bug (cabal-install-0.10.2 didn't put the\n  Happy-generated files in the sdist)\n\n##
  1.18.7\n\n* Fix a bug in error handling when using `%monad` without `%lexer`\n\n##
  1.18\n\n* New feature: EBNF-style paramterized macros, thanks to\n  Iavor Diatchki.\n*
  Works with Cabal 1.2, 1.4 and 1.6\n* A few minor bugfixes\n\n## 1.17\n\n* Cabal
  1.2 is required\n* Works with upcoming GHC 6.8.1\n* Fix the `parE` bug (poor error
  message for errors in the grammar)\n* Some performance improvements to Happy itself\n\n##
  1.16\n\n* Switch to a Cabal build system: you need a recent version of Cabal\n  (1.1.6
  or later).  If you have GHC 6.4.2, then you need to upgrade\n  Cabal before building
  Happy.  GHC 6.6 is fine.\n\n* New `%error` directive\n\n* New production forms:
  `{%% .. }` and `{%^ .. }`\n\n* Added Attribute Grammar support, by Robert Dockins\n\n##
  1.15\n\n* New `%expect` directive\n* The list of tokens passed to happyError now
  includes the current\n  token (not `%lexer`).\n* Added support for ambiguous grammars
  via Generalized LR parsing\n* Added `%partial` to indicate a parser that can return
  a result\n  before EOF is reached.\n\n## 1.14\n\n* New meta-variable `$>` represents
  the rightmost token.\n\n* Happy's OPTIONS pragma is merged with an existing one
  in\n  the grammar file, if any.\n\n## 1.13\n\n* Support for newer versions of GHC
  (>= 5.04).\n\n* Addition of an experimental flag: `--strict`.\n\n## 1.11\n\n* Tokens
  no longer have a default precedence --- if you \n  want a token to have a precedence,
  you have to declare it.\n\n* Bugfix to templates for GHC on 64-bit platforms.\n\n##
  1.10\n\n* Bugfixes, and minor performance improvements,\n\n* Most of the examples
  work again.\n\n## 1.9\n\n* A grammar may now contain several entry points, allowing\n
  \ several parsers to share parts of the grammar.\n\n* Some bugfixes.\n\n## 1.8\n\n*
  Parser table compression, and more efficient table encoding when used\n  with GHC.
  \ Large grammars can now be compiled in much less time/space\n  than before using
  GHC.\n\n* Yacc-style operator precedence, thanks to patches from Hermann\n  Oliveira
  Rodrigues <hermann@dcc.ufmg.br> and Josef Svenningsson\n  <josefs@cs.chalmers.se>.\n\n*
  A debug option which causes the generated parser to print tracing\n  information
  at each step during parsing.\n\n## 1.6\n\n* Now written in, and generates, Haskell
  98.\n\n* Several bug fixes.\n\n* A new option, `-c`, generates parsers that use
  GHC's unsafeCoerce#\n  primitive to speed up parsing and cut down the binary size.
  \ The `-c`\n  option can only be used with the -g (GHC extensions) option.\n\n*
  Parsers generated with the -g option will compile to smaller binaries\n  now ---
  some sources of parser-bloat were identified and squished.\n\n* Happy has a new
  Open Source license, based on the BSD license.\n\n* A sample Haskell parser using
  Happy is included.\n\n## 1.5\n\n* Many bug fixes to the error recovery support,
  found by experimenting\n  with the Haskell grammar and layout.\n\n* Happy is about
  5 times faster on large examples, due to some\n  changes in the LALR(1) algorithms.\n\n##
  1.2\n\n* Supports Haskell 1.4\n\n* Lots of bugs fixed\n\n* Performance: the parser
  generator is at least 20% faster, and\n  generated parsers should be faster due
  to the replacement of a\n  data type with a newtype.\n\n* Simple error recovery:
  designed to be enough to implement the\n  Haskell layout rule.\n\n* Revamped monad
  support: the monad can now be threaded through\n  the lexer, enabling passing of
  state between the parser and the\n  lexer (handy for the Haskell layout rule), and
  consistent error\n  handling.\n\n* The `%newline` feature is removed, the same effect
  can be achieved\n  using the new monad support.\n\n## 0.9:\n\n* Happy should be
  much faster than before.\n\n* Generated parsers will be 5-10% smaller.\n\n* Happy
  now compiles with ghc-0.26.\n\n* Support for monadic parsers via `%monad` (see the
  documentation).\n\n* New syntax: previously\n\n  ```haskell\n  f :: { <type> }\n
  \ f : ...\n    | ...\n    etc.\n  ```\n\n  can now be written\n\n  ```haskell\n
  \ f :: { <type> }\n    : ...\n    | ...\n    etc.\n  ```\n\n  (i.e. omit the extra
  `f`.  It was always ignored anyway :-)\n\n* Miscellaneous bug fixes.\n"
basic-deps:
  base: <5
  array: -any
  containers: '>=0.4.2'
  mtl: '>=2.2.1'
all-versions:
- '1.18'
- 1.18.1
- 1.18.2
- 1.18.4
- 1.18.5
- 1.18.6
- 1.18.7
- 1.18.8
- 1.18.9
- 1.18.10
- 1.18.11
- 1.19.0
- 1.19.1
- 1.19.2
- 1.19.3
- 1.19.4
- 1.19.5
- 1.19.6
- 1.19.7
- 1.19.8
- 1.19.9
- 1.19.10
- 1.19.11
- 1.19.12
- 1.20.0
- 1.21.0
author: Andy Gill and Simon Marlow
latest: 1.21.0
description-type: markdown
description: |
  # Happy

  [![Build Status](https://github.com/simonmar/happy/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/simonmar/happy/actions)

  Happy is a parser generator for Haskell 98 (and later).

  * https://www.haskell.org/happy/
  * http://hackage.haskell.org/package/happy

  ## Build Instructions

  Happy is normal Cabal-packaged Haskell executable, except for the fact that a
  pre-built Happy is *required* to build the full version of Happy, which is the
  default.

  - If you *do* have an existing Happy executable on the PATH or in the default
    installation location (`~/.cabal/bin` for example), do regular
    ```
    $ cabal build
    ```
    like with any other project.

  - If you do *not* have an existing Happy executable, instead do
    ```
    $ cabal build -f -bootstrap
    ```

  - If you install that minimial, non-bootstrapped happy
    ```
    $ cabal install -f -bootstrap
    ```
    you can then build normally (with the bootstrap flag enabled).

  *We're sorry the bootstrap process is a bit tedious right now; we hope to
  improve it in the future. The ideal fix would be to make cabal-installer's
  cycle detector to be less pessimistic, per
  https://github.com/haskell/cabal/issues/7189, so that the build tool dependency
  can be properly expressed and everything works automatically.*

  ## Documentation & Examples

  Complete documentation can be found in the directory 'doc', in
  DocBook XML format.  To format the documentation, the DocBook-Tools
  suite (see https://github.com/docbook/wiki/wiki/DocBookTools)
  provides all the bits & pieces you need.  Alternatively, pre-formatted
  documentation is available from Happy's homepage (URL above).

  The directory 'examples' contains some example parsers that use Happy.

  For information on copying and distributing this program, see the file
  LICENSE in this directory.

  ## Contributing & Reporting Issues

  Bugs should be reported at: https://github.com/simonmar/happy/issues

  Happy Parsing!

  Simon.

  ## Current Maintainers

  - Vladislav Zavialov (@int-index)

  - John Ericson (@Ericson2314)

  - Simon Marlow (@simonmar)
license-name: BSD-2-Clause
