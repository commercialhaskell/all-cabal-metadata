homepage: https://github.com/Yvee1/hascard#readme
changelog-type: markdown
hash: 1a84afadb16c90183e0b22e11c0a4adf9c6e463674e9c0827b59fbd552a9d2d7
test-bench-deps:
  microlens-platform: '>=0.4.1 && <0.5'
  mwc-random: '>=0.14 && <0.15'
  split: '>=0.2.3 && <0.3'
  base: '>=4.7 && <5'
  text: '>=1.2.3 && <1.3'
  megaparsec: '>=8.0.0 && <10'
  vty: '>=5.28.2 && <5.33'
  strict: '>=0.3.2 && <0.5'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.5 && <1.7'
  hascard: -any
  ordered-containers: '>=0.2.2 && <0.3'
  containers: '>0.6.0 && <0.7'
  word-wrap: '>=0.4.1 && <0.5'
  tasty-quickcheck: '>=0.10.1 && <0.11'
  random-fu: '>=0.2.7 && <0.3'
  tasty-hunit: '>=0.10.0 && <0.11'
  optparse-applicative: '>=0.15.1 && <0.16'
  tasty: '>=1.2.1 && <1.3'
  microlens: '>=0.4.11 && <0.5'
  brick: '>=0.52.1 && <0.60'
  vector: '>=0.12.0 && <0.13'
  directory: '>=1.3.3 && <1.4'
maintainer: stevenvdb@live.nl
synopsis: A TUI for reviewing notes using 'flashcards' written with markdown-like
  syntax.
changelog: "# Changelog for hascard\n## 0.5.0.3\nNew:\n- Improved `hascard import`
  functionality: delimiters can be specified via CLI options (fixes issue #17).\n\nFixed
  bug:\n- Removed redundant newline after header\n\n## 0.5.0.2\nNew:\n- Setting for
  changing case sensitivity of open questions. Default behaviour is case sensitive,
  which was also the functionality before this setting was added.\n\nFixed bug:\n-
  When the open question was gotten right after the first try, it was still counted
  as correct in review mode\n\n## 0.5.0.1\nFixed bugs:\n- When generating new decks
  from correct or incorrect cards, 'Nothing' was added as the first line\n- When a
  gap was the last part of a sentence, the newline was not shown correctly\n\n## 0.5.0.0\nNew:\n-
  References to files can be added inside cards, such that the corresponding files
  opens when encountering that card. The file opens in a different window using the
  default application for opening files of that file type configured on your computer.
  This can be used to add images to questions. The syntax is described [here](https://github.com/Yvee1/hascard#including-files)
  in the readme.\n- LaTeX can be included in a card, which is first converted to a
  PDF and then opened with a PDF viewer. More info [here](https://github.com/Yvee1/hascard#latex)
  in the readme.\n\nUI updates to parameter selection:\n- Selecting the chunks in
  the parameter selection window is better\n- The deck size visible in the parameter
  selection window now correctly works together with the chunk option; i.e. the maximum
  number of cards represents the number of cards in the selected chunk, instead of
  the total number of cards in the entire deck.\n\nSome other UI updates, thanks to
  @g-w1:\n- When entering text in an answer Control-w will go back a word\n- In multiple
  choice, tab will also toggle the option\n- In the flashcard, the \"yes or no\" prompt
  can be navigated by 'l' and 'h' for a more vi like experience\n- Quitting can be
  done with 'q' in addition to 'ESC'\n\n## 0.4.0.0\nNew:\n- UI menu for setting the
  parameters like shuffling etc. The CLI options are no longer usable with `hascard`.
  The CLI options have been moved under `hascard run`. Directly providing a file is
  now also done with `hascard run`.\n- Convert TSV files to files compatible with
  hascard, using the `hascard import` command. (suggested by @g-w1)\n\nFixed bugs:\n-
  Focus cycling removed in settings menu for consistency with the other menus.\n-
  Better error for non-existing files\n- Allow | character in text\n- Allow lists
  with - in definition cards. Previously this was seen as a multiple choice question
  without any correct answers, and therefore gave an error.\n\n## 0.3.0.1\nFixed bugs:\n-
  Crash on empty recents list\n- Crash on any key other than Enter at FinalPopup\n\n##
  0.3.0.0\nNew:\n- When reviewing a deck, the amount of correctly and incorrectly
  answered cards are now displayed.\n- After answering a definition card a popup appears
  asking whether you answered it correctly or not.\n- After finishing a deck, there
  is an option to create new decks from either the correctly answered or incorrectly
  answered cards, or both. The correct cards of a file named `deck.txt` are stored
  in `deck+.txt` in the same folder, and the incorrect ones in the file `deck-.txt`.
  Make sure you do not have files of those names that you want to keep since these
  _will_ be overwritten.\n- The `--blank` or `-b` option was added to use the application
  without the changes listed above.\n- Files with the `.md` extension are also accepted
  by the application and shown in the filebrowser. \n\nFixed bugs:\n- Empty open question
  now takes up 1 row instead of 0 rows, so does not jump like before.\n- All parse
  errors now show a popup instead of crashing the application when reviewing a deck.\n\n##
  0.2.1.0\nNew:\n- A certain chunk of a deck of cards can be reviewed using the `-c
  i/n` CLI option. For example `hascard -c 3/5` will split the deck into 5 chunks,
  and review the 3rd one. These chunks can be used with the shuffle and amount options
  too.\n- Visual indicator in the deck selector menu for whether the deck is being
  shuffled or not.\n- Shuffling can be toggled inside the deck selector menu using
  the 's' key.\n- Most parsing error messages now show up as a pop-up box with nicer
  formattting than before.\n- The maximum number of recently selected decks stored
  and shown can now be changed in the settings menu.\n\nFixed bugs:\n- Flickering
  when switching between menus is gone. This was done by merging the seperate Brick
  applications into one.\n\n## 0.2.0.0\nNew:\n- A new type of card is available: reorder
  the elements. This could break previous definition or open question cards if they
  had the same format as the new reorder the elements card. In that case change the
  1. 2. etc. to something like 1), 2) which is not seen as a reorder type card.\n-
  For open question cards, if you don't know the answer you can click F1 which shows
  the correct answer\n\nFixed bugs:\n- Hinted definitions were not accurate because
  the carriage return character \\r was not seen as whitespace, but as content\n\n##
  0.1.4.0\nNew:\n- Deleted or moved files are also no longer shown in the recently
  selected files list\n\nFixed bugs:\n- A new line after the last seperator `---`
  caused the parsing to fail, now it does not\n- If the last card was an open question
  and there was no `---` at the end, it was shown as a definition card (issue #6,
  thanks @stemvork)\n\n## 0.1.3.0\nNew:\n- Add `-s` shuffle flag and `-a` amount option
  to CLI.\n- Add macOS binary and homebrew formula\n\n## 0.1.2.0\nNew:\n- Hidden files/directories
  (so starting with '.') are now hidden by default, and can be shown by pressing 'h'
  in the filebrowser\n\n\nFixed bugs:\n- Parsing now succeeds even if the text file
  does not end with ---\n- When passing a file to the CLI, the absolute path is saved
  instead of the relative one, preventing issues with the 'recently selected files'\n\n##
  0.1.1.0\nNew:\n- Add nix build support (by @srid)\n- Recently used decks are now
  ordered by most recent first\n- Recently used decks now have unique names. Previously
  only the filename was shown, but now path is shown up to unique name\n\nFixed bugs:\n-
  Failed parsing of settings file now results in default settings instead of error\n-
  After selecting a file from system, the card selector had to be refreshed before
  the file appeared in the recently selected decks list. The file is now present immediately\n-
  Directly selecting a card via the CLI now also adds it to the recents list\n- Selecting
  a card via the CLI now returns an error if it has a different filetype than '.txt'.
  If no filetype is given, '.txt' is assumed.\n\n\n## 0.1.0.0\nInitial release\n"
basic-deps:
  microlens-platform: '>=0.4.1 && <0.5'
  mwc-random: ==0.14.*
  split: '>=0.2.3 && <0.3'
  base: '>=4.7 && <5'
  text: '>=1.2.3 && <1.3'
  megaparsec: '>=8.0.0 && <10'
  vty: '>=5.28.2 && <5.33'
  strict: '>=0.3.2 && <0.5'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.5 && <1.7'
  hascard: -any
  ordered-containers: '>=0.2.2 && <0.3'
  containers: '>0.6.0 && <0.7'
  word-wrap: '>=0.4.1 && <0.5'
  tasty-quickcheck: '>=0.10.1 && <0.11'
  random-fu: '>=0.2.7 && <0.3'
  tasty-hunit: '>=0.10.0 && <0.11'
  optparse-applicative: '>=0.15.1 && <0.16'
  tasty: '>=1.2.1 && <1.3'
  microlens: '>=0.4.11 && <0.5'
  brick: '>=0.52.1 && <0.60'
  vector: '>=0.12.0 && <0.13'
  directory: '>=1.3.3 && <1.4'
all-versions:
- 0.1.1.0
- 0.1.2.0
- 0.1.4.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
author: Steven van den Broek
latest: 0.5.0.3
description-type: markdown
description: "# hascard\n[![Build Status]()](https://github.com/Yvee1/hascard/actions/workflows/build.yml/badge.svg)
  [![GitHub tag](https://img.shields.io/github/tag/Yvee1/hascard.svg)](https://github.com/Yvee1/hascard/releases)
  [![AUR](https://img.shields.io/aur/version/hascard)](https://aur.archlinux.org/packages/hascard/)
  [![Hackage](https://img.shields.io/hackage/v/hascard.svg)](https://hackage.haskell.org/package/hascard)\n\n\n\nA
  minimal commandline utility for reviewing notes. 'Flashcards' can be written in
  markdown-like syntax.\n\n<p align=\"center\">\n<img alt=\"a recording of example
  usage of the hascard application\" src=\"./recordings/recording.gif\">\n</p>\n\n##
  Contents\n- [Installation](#installation)\n- [Usage](#usage)\n- [Cards](#cards)\n
  \ - [Card Types](#card-types)\n    - [Definition](#definition)\n    - [Multiple
  choice](#multiple-choice)\n    - [Multiple answer](#multiple-answer)\n    - [Open
  question](#open-question)\n    - [Reorder question](#reorder-question)\n  - [Including
  files](#including-files)\n    - [LaTeX (experimental)](#latex-experimental)\n  \n-
  [Miscellaneous info](#miscellaneous-info)\n\n## Installation\nInstallation on Windows
  is not possible sadly, aside from WSL. This is because hascard depends on vty which
  only supports UNIX-like operating systems (this includes macOS).\n\n### Homebrew
  (for macOS)\nFor macOS users an installation using homebrew is provided via a custom
  tap. You can run \n```\nbrew update\nbrew install Yvee1/tools/hascard\n```\n\n###
  Binary\nUbuntu and macOS binaries are available under [releases](https://github.com/Yvee1/hascard/releases/).
  To be able to run it from any directory, it has to be added to the PATH. This can
  be done by copying it to e.g. the `/usr/local/bin` directory.\n\n### Arch Linux\nThanks
  to [loki7990](https://github.com/loki7990), hascard is also on the AUR: https://aur.archlinux.org/packages/hascard/.\n\n###
  Snapcraft\nHascard is also on [snapcraft](https://snapcraft.io/hascard). Installation
  instructions are on that site. If you already have snap installed you can just install
  hascard via `sudo snap install hascard`. By default snap applications are isolated
  from the system and run in a sandbox. This means that hascard does not have permission
  to read or write any files on the system aside from those under `%HOME/snap/hascard`.
  To be able to read cards also in other directories under the home directory, hascard
  makes use of the `home` interface which might need to be enabled manually using
  `sudo snap connect hascard:home :home`.\n\n**Note**: Because of problems with snap
  and terminfo, the snap installation does not work directly with somewhat non-standard
  terminals like st-256 and alacritty. This is because the snap environment does not
  have the necessary terminfo files for these terminals, but copying the terminfo
  file from the system is a workaround (see [this comment](https://github.com/Yvee1/hascard/issues/3#issuecomment-680699000)).\n\n###
  Install from source\nAnother option is to build hascard and install it from source.
  For this you can use the Haskell build tool called [stack](https://docs.haskellstack.org/en/stable/README/#how-to-install),
  or [nix](https://nixos.org/). Then for example clone this repository somewhere:\n```\ngit
  clone https://github.com/Yvee1/hascard.git\ncd hascard\n```\nand do `stack install
  hascard` or `nix-build` respectively.\n\n## Usage\nSimply run `hascard` to open
  the main application. Menu navigation can be done with the arrow keys or with the
  'j' and 'k' keys. The controls for the different cards can be found at the bottom
  of the screen by default. This, and a couple other things, can be changed in the
  settings menu. A deck of cards can be opened using the built-in filebrowser, and
  recently selected decks will appear in the selection menu. These decks of flashcards
  are written in plain text, this is explained in section [Cards](#cards). After selecting
  a deck, some options can be specified, like whether the deck should be shuffled
  or how many cards should be reviewed.\n\nAfter finishing a deck, there is an option
  to create new decks from the correctly answered or incorrectly answered cards, or
  both. The correct cards of a file named `deck.txt` are stored in `deck+.txt` in
  the same folder, and the incorrect ones in the file `deck-.txt`. Make sure you do
  not have files of those names that you want to keep since these _will_ be overwritten.\n\n###
  CLI\nThe CLI provides two commands, `run` and `import`. The `hascard run` is essentially
  the same as just `hascard`, but the `run` command can be given a file to run the
  application on directly. When run on a file directly, parameters like whether to
  shuffle the deck are specified via CLI options instead of in a menu.\n\nAs an example,
  say you have a file `deck.txt` with lots of cards in it and you want to review 5
  random ones, you can use `hascard run deck -s -a 5`. Here `-s` shuffles the deck
  and `-a 5` specifies we only want to look at 5 of them. For more info, see `hascard
  run --help`.\n\n#### Importing decks\nIf you have decks in a different format, you
  might want to convert them into files compatible with hascard. Currently, delimited
  text files can be converted to definition or open question cards. For example [Quizlet](https://quizlet.com/)
  decks can be exported to this format. As an example, the following file\n```\naussi\took\nen
  outre, de plus\tbovendien\nde même\tevenals\n```\nwill become\n```\n# ook\n_aussi_\n---\n#
  bovendien\n_en outre|de plus_\n---\n# evenals\n_de même_\n```\nwith the command
  `hascard import input.txt output.txt -r`. More info can be found in the help text
  at `hascard import --help`.\n\n## Cards\nDecks of cards are written in `.txt` or
  `.md` files. A deck contains multiple cards which are seperated with a line containing
  three dashes `---`. For examples, see the [`/cards`](https://github.com/Yvee1/hascard/tree/master/cards)
  directory. \n\n### Card Types\nIn this section the 5 different types of cards are
  listed, first the text representation is given and after a gif of it is represented
  in the application.\n\n#### Definition\nThis is the simplest card, it simply has
  a title and can be flipped to show the contents. For example the following card\n```\n#
  Word or question\nExplanation or definition of this word, or the answer to the question.\n```\nwill
  result in\n<p align=\"center\">\n  <img src=\"./recordings/definition.gif\"></img>\n</p>\n\n####
  Multiple choice\nThis is a typical multiple choice question. The question starts
  with a `#` and the choices follow. Only one answer is correct, and is indicated
  by a `*`, the other questions are preceded by a `-`. As an example, the following
  text\n\n```\n# Multiple choice question, (only one answer is right)\n- Choice 1\n*
  Choice 2 (this is the correct answer)\n- Choice 3\n- Choice 4\n```\n\ngets rendered
  as\n<p align=\"center\">\n  <img src=\"./recordings/multiple-choice.gif\"></img>\n</p>\n\n####
  Multiple answer\nMultiple choice questions with multiple possible answers are also
  available. Here again the question starts with `#` and the options follow. Preceding
  each option is a box `[ ]` that is filled with a `*` or a `x` if it is correct.
  For example\n\n```\n# Multiple answer question\n[*] Option 1 (this is a correct
  answer)\n[ ] Option 2\n[*] Option 3 (this is a correct answer)\n[ ] Option 4\n```\nresults
  in\n<p align=\"center\">\n  <img src=\"./recordings/multiple-answer.gif\"></img>\n</p>\n
  \                                                          \n\n#### Open question\nOpen
  questions are also supported. The words that have to be filled in should be surrounded
  by underscores `_`. Underscores can also be escaped by `\\_` if they are part of
  the text, like is done in [`cards/analysis3.txt`](https://github.com/Yvee1/hascard/blob/48b5c0751ac72df791402b88c033e05488c9350d/cards/analysis3.txt#L34-L37t).
  Multiple answer possibilities can also be given by seperating them with vertical
  bars `|`. As an example, the card\n\n```\n# Fill in the gaps\nThe symbol € is for
  the currency named _Euro_, and is used in the _EU|European Union_.\n```\nbehaves
  like this\n\n<p align=\"center\">\n  <img src=\"./recordings/gapped-question.gif\"></img>\n</p>\n\n####
  Reorder question\nThis is a question where you have to put the elements in the correct
  order. Each element is preceded by a number indicating their correct place. The
  elements are rendered in the same order as they are written. For example the card\n\n```\n#
  Order the letters in alphabetical order\n4. u\n1. l\n2. p\n3. s\n```\nwill look
  like\n<p align=\"center\">\n  <img src=\"./recordings/reordering.gif\"></img>\n</p>\n\n###
  Including files\nYou might want to include an image with a question. Rendering images
  in the terminal itself is not well supported, so instead an option is made available
  to let a file be opened automatically when a question is encountered. This can for
  example be used to include an image or pdf, which is then opened in the default
  application for that file type (internally the `xdg-open` command is used for linux,
  and the `open` command for mac). The syntax for including files is similar to how
  you include images in markdown, and should be placed directly under the header.
  For example:\n```\n# What type of fruit is this?\n![](pear.jpeg)\n- Apple\n* Pear\n-
  Orange\n- Banana\n```\nreferences the image `pear.jpeg` in the directory of the
  text file containing the cards. Files can be added to any of the previously listed
  card types. Text in the square brackets which in markdown is used for providing
  alt-text has no function at the moment.\n\n#### LaTeX (experimental)\nFor reviewing
  content with mathematical symbols, functionality is included such that LaTeX can
  be used. Because LaTeX cannot be rendered in the terminal directly, it is first
  converted to a pdf file with the `pdflatex` command (the pdf is placed in a temporary
  directory), and then opened in the default pdf viewer application as if the pdf
  were included directly like mentioned above. LaTeX can be written between three
  backticks, and should be placed right below the header. For example, the card\n``````\n#
  The l^p metric space\n```\nThe space $(\\ell^p, d)$ is a metric space, when $d:\\ell^p
  \\times \\ell^p \\rightarrow \\mathbb{R}$ is defined as\n$$d(x, y) = \\left(\\sum_{n=1}^\\infty
  |x_n-y_n|^p\\right)^{1/p}$$\n```\n``````\nis an empty definition card and just opens
  a pdf file containing the mathematical statement in another window.\n\nNote that
  no `\\begin{document}`, `\\end{document}` or `\\documentclass[]{}` should be specified;
  this is already done automatically. The LaTeX packages \"amsfonts\", and \"mathtools\"
  are currently the only ones that are loaded.\n\n## Miscellaneous info\nWritten in
  Haskell, UI built with [brick](https://github.com/jtdaugherty/brick) and parsing
  of cards done with [megaparsec](https://github.com/mrkkrp/megaparsec). Recordings
  of the terminal were made using [terminalizer](https://github.com/faressoft/terminalizer).
  The filebrowser widget was mostly copied from the brick [filebrowser demo program](https://github.com/jtdaugherty/brick/blob/master/programs/FileBrowserDemo.hs).
  Homebrew and Travis configurations were made much easier by [the tutorial from Chris
  Penner](https://chrispenner.ca/posts/homebrew-haskell).\n"
license-name: BSD-3-Clause
