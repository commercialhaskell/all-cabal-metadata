all-versions:
- 0.1.1.0
- 0.1.2.0
- 0.1.4.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.3.1
- 0.6.0.0
- 0.6.0.1
author: Steven van den Broek
basic-deps:
  base: '>=4.7 && <5'
  brick: '>=2.3.1 && <3.0'
  containers: '>0.6.0 && <0.8'
  directory: '>=1.3.3 && <1.4'
  extra: '>=1.7 && <1.8'
  filepath: '>=1.4.2 && <1.5'
  hascard: '>=0'
  megaparsec: '>=8.0.0 && <10'
  microlens: '>=0.4.11 && <0.5'
  microlens-platform: '>=0.4.1 && <0.5'
  mtl: '>=2.2 && <2.4'
  mwc-random: '>=0.14 && <0.16'
  optparse-applicative: '>=0.18.0 && <0.19'
  ordered-containers: '>=0.2.2 && <0.3'
  process: '>=1.6.5 && <1.7'
  random-fu: '>=0.2.7 && <0.4'
  split: '>=0.2.3 && <0.3'
  strict: '>=0.3.2 && <0.6'
  tasty: '>=1.2.1 && <1.5'
  tasty-hunit: '>=0.10.0 && <0.11'
  tasty-quickcheck: '>=0.10.1 && <0.11'
  text: '>=2.0 && <3.0'
  vector: '>=0.12.0 && <0.14'
  vty: '>=6.0 && <7.0'
  vty-crossplatform: '>=0.2 && <0.5'
  word-wrap: '>=0.4.1 && <0.6'
changelog: "# Changelog for hascard\r\n## 0.6.0.1\r\nFixes:\r\n- Change key for showing
  answer to open questions from F1 to Shift+Tab, which should cause fewer conflicts
  with existing keybindings (issue #31).\r\n\r\n## 0.6.0.0\r\nNew:\r\n- Windows support.\r\n-
  `export` CLI command for exporting hascard cards to delimited text files (issue
  #33).\r\n- Possibility to vertically scroll flashcards if they are long enough (issue
  #25).\r\n- Scrollbars for menus where scrolling is possible, which can be controlled
  by mouse if the terminal supports this.\r\n- Setting for shuffling answers to multiple
  choice/answer questions (issue #19).\r\n\r\nFixes:\r\n- Improved navigation of parameter
  selection menu.\r\n- An empty definition card does not need to be flipped.\r\n\r\n##
  0.5.0.3.1\r\nUpdate versions and information\r\n\r\n## 0.5.0.3\r\nNew:\r\n- Improved
  `hascard import` functionality: delimiters can be specified via CLI options (fixes
  issue #17).\r\n\r\nFixed bug:\r\n- Removed redundant newline after header\r\n\r\n##
  0.5.0.2\r\nNew:\r\n- Setting for changing case sensitivity of open questions. Default
  behaviour is case sensitive, which was also the functionality before this setting
  was added.\r\n\r\nFixed bug:\r\n- When the open question was gotten right after
  the first try, it was still counted as correct in review mode\r\n\r\n## 0.5.0.1\r\nFixed
  bugs:\r\n- When generating new decks from correct or incorrect cards, 'Nothing'
  was added as the first line\r\n- When a gap was the last part of a sentence, the
  newline was not shown correctly\r\n\r\n## 0.5.0.0\r\nNew:\r\n- References to files
  can be added inside cards, such that the corresponding files opens when encountering
  that card. The file opens in a different window using the default application for
  opening files of that file type configured on your computer. This can be used to
  add images to questions. The syntax is described [here](https://github.com/Yvee1/hascard#including-files)
  in the readme.\r\n- LaTeX can be included in a card, which is first converted to
  a PDF and then opened with a PDF viewer. More info [here](https://github.com/Yvee1/hascard#latex)
  in the readme.\r\n\r\nUI updates to parameter selection:\r\n- Selecting the chunks
  in the parameter selection window is better\r\n- The deck size visible in the parameter
  selection window now correctly works together with the chunk option; i.e. the maximum
  number of cards represents the number of cards in the selected chunk, instead of
  the total number of cards in the entire deck.\r\n\r\nSome other UI updates, thanks
  to @g-w1:\r\n- When entering text in an answer Control-w will go back a word\r\n-
  In multiple choice, tab will also toggle the option\r\n- In the flashcard, the \"yes
  or no\" prompt can be navigated by 'l' and 'h' for a more vi like experience\r\n-
  Quitting can be done with 'q' in addition to 'ESC'\r\n\r\n## 0.4.0.0\r\nNew:\r\n-
  UI menu for setting the parameters like shuffling etc. The CLI options are no longer
  usable with `hascard`. The CLI options have been moved under `hascard run`. Directly
  providing a file is now also done with `hascard run`.\r\n- Convert TSV files to
  files compatible with hascard, using the `hascard import` command. (suggested by
  @g-w1)\r\n\r\nFixed bugs:\r\n- Focus cycling removed in settings menu for consistency
  with the other menus.\r\n- Better error for non-existing files\r\n- Allow | character
  in text\r\n- Allow lists with - in definition cards. Previously this was seen as
  a multiple choice question without any correct answers, and therefore gave an error.\r\n\r\n##
  0.3.0.1\r\nFixed bugs:\r\n- Crash on empty recents list\r\n- Crash on any key other
  than Enter at FinalPopup\r\n\r\n## 0.3.0.0\r\nNew:\r\n- When reviewing a deck, the
  amount of correctly and incorrectly answered cards are now displayed.\r\n- After
  answering a definition card a popup appears asking whether you answered it correctly
  or not.\r\n- After finishing a deck, there is an option to create new decks from
  either the correctly answered or incorrectly answered cards, or both. The correct
  cards of a file named `deck.txt` are stored in `deck+.txt` in the same folder, and
  the incorrect ones in the file `deck-.txt`. Make sure you do not have files of those
  names that you want to keep since these _will_ be overwritten.\r\n- The `--blank`
  or `-b` option was added to use the application without the changes listed above.\r\n-
  Files with the `.md` extension are also accepted by the application and shown in
  the filebrowser. \r\n\r\nFixed bugs:\r\n- Empty open question now takes up 1 row
  instead of 0 rows, so does not jump like before.\r\n- All parse errors now show
  a popup instead of crashing the application when reviewing a deck.\r\n\r\n## 0.2.1.0\r\nNew:\r\n-
  A certain chunk of a deck of cards can be reviewed using the `-c i/n` CLI option.
  For example `hascard -c 3/5` will split the deck into 5 chunks, and review the 3rd
  one. These chunks can be used with the shuffle and amount options too.\r\n- Visual
  indicator in the deck selector menu for whether the deck is being shuffled or not.\r\n-
  Shuffling can be toggled inside the deck selector menu using the 's' key.\r\n- Most
  parsing error messages now show up as a pop-up box with nicer formattting than before.\r\n-
  The maximum number of recently selected decks stored and shown can now be changed
  in the settings menu.\r\n\r\nFixed bugs:\r\n- Flickering when switching between
  menus is gone. This was done by merging the seperate Brick applications into one.\r\n\r\n##
  0.2.0.0\r\nNew:\r\n- A new type of card is available: reorder the elements. This
  could break previous definition or open question cards if they had the same format
  as the new reorder the elements card. In that case change the 1. 2. etc. to something
  like 1), 2) which is not seen as a reorder type card.\r\n- For open question cards,
  if you don't know the answer you can click F1 which shows the correct answer\r\n\r\nFixed
  bugs:\r\n- Hinted definitions were not accurate because the carriage return character
  \\r was not seen as whitespace, but as content\r\n\r\n## 0.1.4.0\r\nNew:\r\n- Deleted
  or moved files are also no longer shown in the recently selected files list\r\n\r\nFixed
  bugs:\r\n- A new line after the last seperator `---` caused the parsing to fail,
  now it does not\r\n- If the last card was an open question and there was no `---`
  at the end, it was shown as a definition card (issue #6, thanks @stemvork)\r\n\r\n##
  0.1.3.0\r\nNew:\r\n- Add `-s` shuffle flag and `-a` amount option to CLI.\r\n- Add
  macOS binary and homebrew formula\r\n\r\n## 0.1.2.0\r\nNew:\r\n- Hidden files/directories
  (so starting with '.') are now hidden by default, and can be shown by pressing 'h'
  in the filebrowser\r\n\r\n\r\nFixed bugs:\r\n- Parsing now succeeds even if the
  text file does not end with ---\r\n- When passing a file to the CLI, the absolute
  path is saved instead of the relative one, preventing issues with the 'recently
  selected files'\r\n\r\n## 0.1.1.0\r\nNew:\r\n- Add nix build support (by @srid)\r\n-
  Recently used decks are now ordered by most recent first\r\n- Recently used decks
  now have unique names. Previously only the filename was shown, but now path is shown
  up to unique name\r\n\r\nFixed bugs:\r\n- Failed parsing of settings file now results
  in default settings instead of error\r\n- After selecting a file from system, the
  card selector had to be refreshed before the file appeared in the recently selected
  decks list. The file is now present immediately\r\n- Directly selecting a card via
  the CLI now also adds it to the recents list\r\n- Selecting a card via the CLI now
  returns an error if it has a different filetype than '.txt'. If no filetype is given,
  '.txt' is assumed.\r\n\r\n\r\n## 0.1.0.0\r\nInitial release\r\n"
changelog-type: markdown
description: "# hascard\r\n[![Build Status](https://github.com/Yvee1/hascard/actions/workflows/build.yml/badge.svg)](https://github.com/Yvee1/hascard/actions)
  [![GitHub tag](https://img.shields.io/github/tag/Yvee1/hascard.svg)](https://github.com/Yvee1/hascard/releases)
  [![AUR](https://img.shields.io/aur/version/hascard)](https://aur.archlinux.org/packages/hascard/)
  [![Hackage](https://img.shields.io/hackage/v/hascard.svg)](https://hackage.haskell.org/package/hascard)\r\n\r\n\r\n\r\nA
  minimal commandline utility for reviewing notes. 'Flashcards' can be written in
  markdown-like syntax.\r\n\r\n<p align=\"center\">\r\n<img alt=\"a recording of example
  usage of the hascard application\" src=\"./recordings/recording.gif\">\r\n</p>\r\n\r\n##
  Contents\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n- [Cards](#cards)\r\n
  \ - [Card Types](#card-types)\r\n    - [Definition](#definition)\r\n    - [Multiple
  choice](#multiple-choice)\r\n    - [Multiple answer](#multiple-answer)\r\n    -
  [Open question](#open-question)\r\n    - [Reorder question](#reorder-question)\r\n
  \ - [Including files](#including-files)\r\n    - [LaTeX (experimental)](#latex-experimental)\r\n
  \ \r\n- [Miscellaneous info](#miscellaneous-info)\r\n\r\n## Installation\r\nWindows,
  Linux and macOS are supported.\r\n\r\n### Homebrew (for macOS)\r\nFor macOS users
  an installation using homebrew is provided via a custom tap. You can run \r\n```\r\nbrew
  update\r\nbrew install Yvee1/tools/hascard\r\n```\r\n\r\n### Binary\r\nUbuntu, macOS,
  and Windows binaries are available under [releases](https://github.com/Yvee1/hascard/releases/).
  To be able to run it from any directory, it has to be added to the PATH. In Linux,
  this can be achieved, for example, by copying it to the `/usr/local/bin` directory.\r\n\r\n###
  Arch Linux\r\nThanks to [loki7990](https://github.com/loki7990), hascard is also
  on the AUR: https://aur.archlinux.org/packages/hascard/.\r\n\r\n### Snapcraft\r\nHascard
  is also on [snapcraft](https://snapcraft.io/hascard). Installation instructions
  are on that site. If you already have snap installed you can just install hascard
  via `sudo snap install hascard`. By default snap applications are isolated from
  the system and run in a sandbox. This means that hascard does not have permission
  to read or write any files on the system aside from those under `%HOME/snap/hascard`.
  To be able to read cards also in other directories under the home directory, hascard
  makes use of the `home` interface which might need to be enabled manually using
  `sudo snap connect hascard:home :home`.\r\n\r\n**Note**: Because of problems with
  snap and terminfo, the snap installation does not work directly with somewhat non-standard
  terminals like st-256 and alacritty. This is because the snap environment does not
  have the necessary terminfo files for these terminals, but copying the terminfo
  file from the system is a workaround (see [this comment](https://github.com/Yvee1/hascard/issues/3#issuecomment-680699000)).\r\n\r\n###
  Install from source\r\nAnother option is to build hascard and install it from source.
  For this you can use the Haskell build tool called [stack](https://docs.haskellstack.org/en/stable/README/#how-to-install),
  or [nix](https://nixos.org/). Then for example clone this repository somewhere:\r\n```\r\ngit
  clone https://github.com/Yvee1/hascard.git\r\ncd hascard\r\n```\r\nand do `stack
  install hascard` or `nix-build` respectively.\r\n\r\n## Usage\r\nSimply run `hascard`
  to open the main application. Menu navigation can be done with the arrow keys or
  with the 'j' and 'k' keys. The controls for the different cards can be found at
  the bottom of the screen by default. This, and a couple other things, can be changed
  in the settings menu. A deck of cards can be opened using the built-in filebrowser,
  and recently selected decks will appear in the selection menu. These decks of flashcards
  are written in plain text, this is explained in section [Cards](#cards). After selecting
  a deck, some options can be specified, like whether the deck should be shuffled
  or how many cards should be reviewed.\r\n\r\nAfter finishing a deck, there is an
  option to create new decks from the correctly answered or incorrectly answered cards,
  or both. The correct cards of a file named `deck.txt` are stored in `deck+.txt`
  in the same folder, and the incorrect ones in the file `deck-.txt`. Make sure you
  do not have files of those names that you want to keep since these _will_ be overwritten.\r\n\r\n###
  CLI\r\nThe CLI provides three commands, `run`, `import`, `export`. The `hascard
  run` command is essentially the same as just `hascard`, but the `run` command can
  be given a file to run the application on directly. When run on a file directly,
  parameters like whether to shuffle the deck are specified via CLI options instead
  of in a menu.\r\n\r\nAs an example, say you have a file `deck.txt` with lots of
  cards in it and you want to review 5 random ones, you can use `hascard run deck
  -s -a 5`. Here `-s` shuffles the deck and `-a 5` specifies we only want to look
  at 5 of them. For more info, see `hascard run --help`.\r\n\r\n#### Importing decks\r\nIf
  you have decks in a different format, you might want to convert them into files
  compatible with hascard. Currently, delimited text files can be converted to definition
  or open question cards. For example [Quizlet](https://quizlet.com/) decks can be
  exported to this format. As an example, the following file\r\n```\r\naussi\took\r\nen
  outre, de plus\tbovendien\r\nde même\tevenals\r\n```\r\nwill become\r\n```\r\n#
  ook\r\n_aussi_\r\n---\r\n# bovendien\r\n_en outre|de plus_\r\n---\r\n# evenals\r\n_de
  même_\r\n```\r\nwith the command `hascard import input.txt output.txt -r`. More
  info can be found in the help text at `hascard import --help`.\r\n\r\n#### Exporting
  decks\r\nSimilarly, one may want to convert hascard cards to delimited text files
  for use in other applications.\r\nThis functionality is provided by `hascard export`.
  For more info, see `hascard export --help`.\r\n\r\n## Cards\r\nDecks of cards are
  written in `.txt` or `.md` files. A deck contains multiple cards which are seperated
  with a line containing three dashes `---`. For examples, see the [`/cards`](https://github.com/Yvee1/hascard/tree/master/cards)
  directory. \r\n\r\n### Card Types\r\nIn this section the 5 different types of cards
  are listed, first the text representation is given and after a gif of it is represented
  in the application.\r\n\r\n#### Definition\r\nThis is the simplest card, it simply
  has a title and can be flipped to show the contents. For example the following card\r\n```\r\n#
  Word or question\r\nExplanation or definition of this word, or the answer to the
  question.\r\n```\r\nwill result in\r\n<p align=\"center\">\r\n  <img src=\"./recordings/definition.gif\"></img>\r\n</p>\r\n\r\n####
  Multiple choice\r\nThis is a typical multiple choice question. The question starts
  with a `#` and the choices follow. Only one answer is correct, and is indicated
  by a `*`, the other questions are preceded by a `-`. As an example, the following
  text\r\n\r\n```\r\n# Multiple choice question, (only one answer is right)\r\n- Choice
  1\r\n* Choice 2 (this is the correct answer)\r\n- Choice 3\r\n- Choice 4\r\n```\r\n\r\ngets
  rendered as\r\n<p align=\"center\">\r\n  <img src=\"./recordings/multiple-choice.gif\"></img>\r\n</p>\r\n\r\n####
  Multiple answer\r\nMultiple choice questions with multiple possible answers are
  also available. Here again the question starts with `#` and the options follow.
  Preceding each option is a box `[ ]` that is filled with a `*` or a `x` if it is
  correct. For example\r\n\r\n```\r\n# Multiple answer question\r\n[*] Option 1 (this
  is a correct answer)\r\n[ ] Option 2\r\n[*] Option 3 (this is a correct answer)\r\n[
  ] Option 4\r\n```\r\nresults in\r\n<p align=\"center\">\r\n  <img src=\"./recordings/multiple-answer.gif\"></img>\r\n</p>\r\n
  \                                                          \r\n\r\n#### Open question\r\nOpen
  questions are also supported. The words that have to be filled in should be surrounded
  by underscores `_`. Underscores can also be escaped by `\\_` if they are part of
  the text, like is done in [`cards/analysis3.txt`](https://github.com/Yvee1/hascard/blob/48b5c0751ac72df791402b88c033e05488c9350d/cards/analysis3.txt#L34-L37t).
  Multiple answer possibilities can also be given by seperating them with vertical
  bars `|`. As an example, the card\r\n\r\n```\r\n# Fill in the gaps\r\nThe symbol
  € is for the currency named _Euro_, and is used in the _EU|European Union_.\r\n```\r\nbehaves
  like this\r\n\r\n<p align=\"center\">\r\n  <img src=\"./recordings/gapped-question.gif\"></img>\r\n</p>\r\n\r\n####
  Reorder question\r\nThis is a question where you have to put the elements in the
  correct order. Each element is preceded by a number indicating their correct place.
  The elements are rendered in the same order as they are written. For example the
  card\r\n\r\n```\r\n# Order the letters in alphabetical order\r\n4. u\r\n1. l\r\n2.
  p\r\n3. s\r\n```\r\nwill look like\r\n<p align=\"center\">\r\n  <img src=\"./recordings/reordering.gif\"></img>\r\n</p>\r\n\r\n###
  Including files\r\nYou might want to include an image with a question. Rendering
  images in the terminal itself is not well supported, so instead an option is made
  available to let a file be opened automatically when a question is encountered.
  This can for example be used to include an image or pdf, which is then opened in
  the default application for that file type (internally the `xdg-open` command is
  used for linux, and the `open` command for mac). The syntax for including files
  is similar to how you include images in markdown, and should be placed directly
  under the header. For example:\r\n```\r\n# What type of fruit is this?\r\n![](pear.jpeg)\r\n-
  Apple\r\n* Pear\r\n- Orange\r\n- Banana\r\n```\r\nreferences the image `pear.jpeg`
  in the directory of the text file containing the cards. Files can be added to any
  of the previously listed card types. Text in the square brackets which in markdown
  is used for providing alt-text has no function at the moment.\r\n\r\n#### LaTeX
  (experimental)\r\nFor reviewing content with mathematical symbols, functionality
  is included such that LaTeX can be used. Because LaTeX cannot be rendered in the
  terminal directly, it is first converted to a pdf file with the `pdflatex` command
  (the pdf is placed in a temporary directory), and then opened in the default pdf
  viewer application as if the pdf were included directly like mentioned above. LaTeX
  can be written between three backticks, and should be placed right below the header.
  For example, the card\r\n``````\r\n# The l^p metric space\r\n```\r\nThe space $(\\ell^p,
  d)$ is a metric space, when $d:\\ell^p \\times \\ell^p \\rightarrow \\mathbb{R}$
  is defined as\r\n$$d(x, y) = \\left(\\sum_{n=1}^\\infty |x_n-y_n|^p\\right)^{1/p}$$\r\n```\r\n``````\r\nis
  an empty definition card and just opens a pdf file containing the mathematical statement
  in another window.\r\n\r\nNote that no `\\begin{document}`, `\\end{document}` or
  `\\documentclass[]{}` should be specified; this is already done automatically. The
  LaTeX packages \"amsfonts\", and \"mathtools\" are currently the only ones that
  are loaded.\r\n\r\n## Miscellaneous info\r\nWritten in Haskell, UI built with [brick](https://github.com/jtdaugherty/brick)
  and parsing of cards done with [megaparsec](https://github.com/mrkkrp/megaparsec).
  Recordings of the terminal were made using [terminalizer](https://github.com/faressoft/terminalizer).
  The filebrowser widget was mostly copied from the brick [filebrowser demo program](https://github.com/jtdaugherty/brick/blob/master/programs/FileBrowserDemo.hs).
  Homebrew and Travis configurations were made much easier by [the tutorial from Chris
  Penner](https://chrispenner.ca/posts/homebrew-haskell).\r\n"
description-type: markdown
hash: 84c0de2417507f677c5c4b3bd8b35e2208a18adfc95ae63d94b77e59dafc52c1
homepage: https://github.com/Yvee1/hascard#readme
latest: 0.6.0.1
license-name: BSD-3-Clause
maintainer: stevenvdb@live.nl
synopsis: A TUI for reviewing notes using 'flashcards' written with markdown-like
  syntax.
test-bench-deps:
  base: '>=4.7 && <5'
  brick: '>=2.3.1 && <3.0'
  containers: '>0.6.0 && <0.8'
  directory: '>=1.3.3 && <1.4'
  extra: '>=1.7 && <1.8'
  filepath: '>=1.4.2 && <1.5'
  hascard: '>=0'
  megaparsec: '>=8.0.0 && <10'
  microlens: '>=0.4.11 && <0.5'
  microlens-platform: '>=0.4.1 && <0.5'
  mtl: '>=2.2 && <2.4'
  mwc-random: '>=0.14 && <0.16'
  optparse-applicative: '>=0.18.0 && <0.19'
  ordered-containers: '>=0.2.2 && <0.3'
  process: '>=1.6.5 && <1.7'
  random-fu: '>=0.2.7 && <0.4'
  split: '>=0.2.3 && <0.3'
  strict: '>=0.3.2 && <0.6'
  tasty: '>=1.2.1 && <1.5'
  tasty-hunit: '>=0.10.0 && <0.11'
  tasty-quickcheck: '>=0.10.1 && <0.11'
  text: '>=2.0 && <3.0'
  vector: '>=0.12.0 && <0.14'
  vty: '>=6.0 && <7.0'
  vty-crossplatform: '>=0.2 && <0.5'
  word-wrap: '>=0.4.1 && <0.6'
