all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.5.0.0
- 0.5.1.0
- 2.0.0.0
- 2.0.1.0
- 2.0.1.1
- 2.1.2.0
- 2.3.0.0
- 2.4.0.0
- 2.5.1.0
author: Facebook, Inc.
basic-deps:
  aeson: '>=0.6 && <2.1'
  base: '>=4.10 && <5'
  binary: '>=0.7 && <0.10'
  bytestring: '>=0.9 && <0.12'
  containers: '>=0.5 && <0.7'
  deepseq: '>=0'
  exceptions: '>=0.8 && <0.11'
  filepath: '>=1.3 && <1.5'
  ghc-prim: '>=0'
  hashable: '>=1.2 && <1.5'
  hashtables: '>=1.2.3.1'
  haxl: '>=0'
  optparse-applicative: '>=0'
  pretty: '>=1.1 && <1.2'
  stm: '>=2.4 && <2.6'
  text: '>=1.2.1.0 && <1.3'
  time: '>=1.4 && <1.12'
  transformers: '>=0'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.10 && <0.13'
changelog: |
  # Changes in version 2.5.1.0
    * Add schedulerHintState method to DataSource

  # Changes in version 2.4.0.0
    * Added fetchBatchId to FetchStats
    * Profiling now tracks full stacks and links each label to memos/fetches
    * Adds FetchDataSourceStats used to log stats/profiling data returned
      from datasources. This is stored in statsRef like any other Stats.
    * Report flag was changed from sequential numbers to bitmask.
    * Add ReportExceptionLabelStack flag to include label stack in HaxlException.

  # Changes in version 2.3.0.0
    * Removed `FutureFetch`

  # Changes in version 2.2.0.0

    * Use BasicHashTable for the Haxl DataCache instead of HashMap
    * API Changes in: Haxl.Core.DataCache, Haxl.Core.Fetch
    * Removed support for GHC < 8.2

  # Changes in version 2.1.2.0

    * Add a callgraph reference to 'Env' to record the function callgraph during a
      computation. The callgraph is stored as an edge list in the Env through the
      use of `withCallGraph` and enables users to debug a Haxl computation.

  # Changes in version 2.1.1.0
    * Adds feature to track outgone datasource fetches. This is only turned on
      for report level greater than 1. The fetches are stored as a running Map
      in the env ('submittedReqsRef').

  # Changes in version 2.1.0.0

    * Add a new 'w' parameter to 'GenHaxl' to allow arbitrary writes during
      a computation. These writes are stored as a running log in the Env,
      and are memoized. This allows users to extract information from
      a Haxl computation which throws. Our advise is to limit these writes to
      monitoring and debugging logs.

    * A 'WriteTree' constructor to maintain log of writes inside the Environment.
      This is defined to allow O(1) mappend.

  # Changes in version 2.0.1.1

    * Support for GHC 8.6.1
    * Bugfixes

  # Changes in version 2.0.1.0

    * Exported MemoVar from Haxl.Core.Memo
    * Updated the facebook example
    * Fixed some links in the documentation
    * Bump some version bounds

  # Changes in version 2.0.0.0

    * Completely rewritten internals to support arbitrarily overlapping
      I/O and computation.  Haxl no longer runs batches of I/O in
      "rounds", waiting for all the I/O to complete before resuming the
      computation. In Haxl 2, we can spawn I/O that returns results in
      the background and computation fragments are resumed when the
      values they depend on are available.  See
      `tests/FullyAsyncTest.hs` for an example.

    * A new `PerformFetch` constructor supports the new concurrency
      features: `BackgroundFetch`. The data source is expected to call
      `putResult` in the background on each `BlockedFetch` when its
      result is ready.

    * There is a generic `DataSource` implementation in
      `Haxl.DataSource.ConcurrentIO` for performing each I/O operation
      in a separate thread.

    * Lots of cleanup and refactoring of the APIs.

    * License changed from BSD+PATENTS to plain BSD3.

  # Changes in version 0.5.1.0

    * 'pAnd' and 'pOr' were added
    * 'asyncFetchAcquireRelease' was added
    * 'cacheResultWithShow' was exposed
    * GHC 8.2.1 compatibility

  # Changes in version 0.5.0.0
    * Rename 'Show1' to 'ShowP' ([#62](https://github.com/facebook/Haxl/issues/62))

  # Changes in version 0.3.0.0

    * Some performance improvements, including avoiding quadratic
      slowdown with left-associated binds.

    * Documentation cleanup; Haxl.Core is the single entry point for the
      core and engine docs.

    * (>>) is now defined to be (*>), and therefore no longer forces
      sequencing.  This can have surprising consequences if you are
      using Haxl with side-effecting data sources, so watch out!

    * New function withEnv, for running a sub-computation in a local Env

    * Add a higher-level memoization API, see 'memo'

    * Show is no longer required for keys in cachedComputation

    * Exceptions now have `Eq` instances
changelog-type: markdown
description: |
  ![Haxl Logo](https://raw.githubusercontent.com/facebook/Haxl/main/logo.png)

  # Haxl

  [![Support Ukraine](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB)](https://opensource.fb.com/support-ukraine) [![Build Status](https://travis-ci.org/facebook/Haxl.svg?branch=master)](https://travis-ci.org/facebook/Haxl)

  Haxl is a Haskell library that simplifies access to remote data, such
  as databases or web-based services. Haxl can automatically

   * batch multiple requests to the same data source,
   * request data from multiple data sources concurrently,
   * cache previous requests,
   * memoize computations.

  Having all this handled for you behind the scenes means that your
  data-fetching code can be much cleaner and clearer than it would
  otherwise be if it had to worry about optimizing data-fetching. We'll
  give some examples of how this works in the pages linked below.

  There are two Haskell packages here:

   * `haxl`: The core Haxl framework
   * `haxl-facebook` (in [https://github.com/facebook/Haxl/tree/master/example/facebook](example/facebook)): An (incomplete) example data source for accessing the Facebook Graph API

  To use Haxl in your own application, you will likely need to build one or more
  *data sources*: the thin layer between Haxl and the data that you want
  to fetch, be it a database, a web API, a cloud service, or whatever.

  There is a generic datasource in "Haxl.DataSource.ConcurrentIO" that
  can be used for performing arbitrary IO operations concurrently, given
  a bit of boilerplate to define the IO operations you want to perform.

  The `haxl-facebook` package shows how we might build a Haxl data
  source based on the existing `fb` package for talking to the Facebook
  Graph API.

  ## Where to go next?

   * [The Story of Haxl](https://code.facebook.com/posts/302060973291128/open-sourcing-haxl-a-library-for-haskell/)
     explains how Haxl came about at Facebook, and discusses our
     particular use case.

   * [An example Facebook data source](https://github.com/facebook/Haxl/blob/master/example/facebook/readme.md) walks
     through building an example data source that queries the Facebook
     Graph API concurrently.

   * [Fun with Haxl (part 1)](https://simonmar.github.io/posts/2015-10-20-Fun-With-Haxl-1.html)
     Walks through using Haxl from scratch for a simple SQLite-backed
     blog engine.

   * [The N+1 Selects Problem](https://github.com/facebook/Haxl/blob/master/example/sql/readme.md) explains how Haxl
     can address a common performance problem with SQL queries by
     automatically batching multiple queries into a single query,
     without the programmer having to specify this behavior.

   * [Haxl Documentation](http://hackage.haskell.org/package/haxl) on
     Hackage.

   * [There is no Fork: An Abstraction for Efficient, Concurrent, and Concise Data Access](http://simonmar.github.io/bib/papers/haxl-icfp14.pdf), our paper on Haxl, accepted for publication at ICFP'14.

  ## Contributing

  We welcome contributions! See [CONTRIBUTING](https://github.com/facebook/Haxl/blob/master/CONTRIBUTING.md) for details on how to get started, and our [Code of Conduct](https://github.com/facebook/Haxl/blob/master/CODE_OF_CONDUCT.md).

  ## License

  Haxl uses the BSD 3-clause License, as found in the [LICENSE](https://github.com/facebook/Haxl/blob/master/LICENSE) file.
description-type: markdown
hash: 9ffb7701d862d80467ea5c70d13d6d5543143e0ec94e3f3e967730ec9c58285b
homepage: https://github.com/facebook/Haxl
latest: 2.5.1.0
license-name: BSD-3-Clause
maintainer: The Haxl Team <haxl-team@fb.com>
synopsis: |-
  A Haskell library for efficient, concurrent,
  and concise data access.
test-bench-deps:
  HUnit: '>=1.2 && <1.7'
  aeson: '>=0'
  base: '>=4.7 && <5'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  hashtables: '>=0'
  haxl: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  text: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
