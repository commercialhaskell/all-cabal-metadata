homepage: https://github.com/blitzcode/hackage-diff
changelog-type: ''
hash: 7623748c58e5154c66e7727af0bf610ee21e9c276dd583c8d09807706a03d10a
test-bench-deps: {}
maintainer: www.blitzcode.net
synopsis: Compare the public API of different versions of a Hackage library
changelog: ''
basic-deps:
  Cabal: '>=1.20.0.0 && <2.2'
  base: '>=4.8 && <5.0'
  text: '>=1.1.1.0'
  filepath: '>=1.3.0.0'
  process: '>=1.2.0.0'
  async: '>=2.0.1.5'
  haskell-src-exts: '>=1.15.0'
  ansi-terminal: '>=0.6.1.1'
  mtl: '>=2.2.1'
  cpphs: '>=1.18.5'
  HTTP: '>=4000.2.17'
  attoparsec: '>=0.12.1.0'
  directory: '>=1.2.0.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Tim C. Schroeder
latest: 0.1.0.1
description-type: haddock
description: |-
  Please see <https://github.com/blitzcode/hackage-diff github.com/blitzcode/hackage-diff> for a user's manual.

  Sample output

  > Downloading Hoogle DBs...
  > Parsing Hoogle DBs...
  > Comparing Hoogle DBs...
  >
  > --- Diff for | 0.2 → 0.3.5.2 | ---
  >
  > + Data.Serialize.IEEE754
  >   + getFloat32be :: Get Float
  >   + getFloat32le :: Get Float
  >   + getFloat64be :: Get Double
  >   + getFloat64le :: Get Double
  >   + putFloat32be :: Float -> Put
  >   + putFloat32le :: Float -> Put
  >   + putFloat64be :: Double -> Put
  >   + putFloat64le :: Double -> Put
  > × Data.Serialize
  >   + instance Serialize a => GSerialize (K1 i a)
  >   + instance GSerialize a => GSerialize (M1 i c a)
  >   + instance (GSerialize a, GSerialize b) => GSerialize (a :*: b)
  >   + instance GSerialize U1
  >   + instance GSerialize a => GetSum (C1 c a)
  >   + instance (GetSum a, GetSum b, GSerialize a, GSerialize b) => GetSum (a :+: b)
  >   + instance GSerialize a => PutSum (C1 c a)
  >   + instance (PutSum a, PutSum b, GSerialize a, GSerialize b) => PutSum (a :+: b)
  >   + instance SumSize (C1 c a)
  >   + instance (SumSize a, SumSize b) => SumSize (a :+: b)
  >   + decodeLazy :: Serialize a => ByteString -> Either String a
  >   + encodeLazy :: Serialize a => a -> ByteString
  >   - data Get a
  >   - type Put = PutM ()
  >   - type Putter a = a -> Put
  >   - getWord8 :: Get Word8
  >   - putWord8 :: Putter Word8
  > × Data.Serialize.Get
  >   + Done :: r -> ByteString -> Result r
  >   + instance Eq More
  >   + Fail :: String -> Result r
  >   + instance Functor Result
  >   + Partial :: (ByteString -> Result r) -> Result r
  >   + data Result r
  >   + instance Show r => Show (Result r)
  >   + ensure :: Int -> Get ByteString
  >   + runGetLazy :: Get a -> ByteString -> Either String a
  >   + runGetLazyState :: Get a -> ByteString -> Either String (a, ByteString)
  >   + runGetPartial :: Get a -> ByteString -> Result a
  >   × New: isolate :: Int -> Get a -> Get a
  >     Old: isolate :: String -> Int -> Get a -> Get a
  > × Data.Serialize.Put
  >   + runPutLazy :: Put -> ByteString
  >   + runPutMLazy :: PutM a -> (a, ByteString)
  > · Data.Serialize.Builder
  >
  > [+ Added] [- Removed] [× Modified] [· Unmodified]
license-name: MIT
