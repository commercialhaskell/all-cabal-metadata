all-versions:
- 0.1.0.0
author: Alexander Vershilov
basic-deps:
  QuickCheck: '>=2.0'
  base: ^>=4.14.3.0
  bytestring: <1
  hasql: '>=1.0'
  hspec: '>=0'
  profunctors: ^>=5.6
  tmp-postgres: '>=1.34'
changelog: |
  # Revision history for hasql-explain-tests

  ## 0.1.0.0 -- 2020-03-08

  * First version. Introduce basic explain tests.
changelog-type: markdown
description: "This library proves a test interface for [hasql](https://hackage.haskell.org/package/hasql)
  library.\nHasql is very performant Postgres client library for Haskell, that allows
  to write raw SQL queries.\nAbility to write raw queries allows to use the full set
  of the database engine features and easy\ndebug and analysis using external tools.
  \n\nHowever when writing raw queries it's very easy to make a mistake and this mistake\nwill
  not be checked by the compiler. This library tries to solve the problem by introducing\nhelpers
  to test queries.\n\n# Features\n\nThe library provides some basic tests of the database
  queries:\n\n   * `explain tests` - tests that checks that we can call explain on
  the query\n        this test will guarantee that the database can parse the query
  and run\n        it in the current schema. This test also automatically checks parameters\n
  \       encoding.\n\n# How to use the library.\n\nAt this moment there is no automation
  that would allow to gather all the queries across the\nproject. So usually the simplest
  way is to export all the queries from the module:\n\n```haskell\nmodule A \n  (
  ...\n  , queries\n  ) where\n\n\nqueries :: (String, SomeQuery)\nqueries =\n  [
  \"queryName\" =>> queryName \n  , \"anotherQuery\" =>> anotherQuery\n  ]\n```\n\nAnd
  use that function in the test suite:\n\n```haskell\nmodule Main (main) where\n\nimport
  Test.Tasty\nimport Test.Tasty.HUnit\nimport A qualified\n\nmain = defaultMain $\n
  \ withResource (startupPostgres) (teardownPostgres) $ mkDb ->\n    withResource
  (mkDb >>= allocateConnection) (freeConnection) $ conn ->\n      tests conn\n\ntests
  :: IO HC.Connection -> TestGroup\ntests mkConn = testGroup \"explain-tests\" $\n
  \ [ testGroup \"A\" $ A.queries <&> \\(name, SomeQuery q) ->\n      testCase name
  $ mkConn >>= explain q\n  ]\n```\n\n## Using the library with Nix\n\nThere are a
  plenty of the approaches that can allow to use the library with\nnix, but we prefer
  the following:\n  \n  1. Add the package to the `haskellPackages` set by any means\n
  \ 2. Write a wrapper that will add a dependency on the Postgres server of\n     the
  required version:\n\n    ```nix\n    { hpkgs   # haskell packages set\n    , haskell
  # haskell lib\n    , postgresql_11 # postgres version\n    }:\n    \n    haskell.lib.overrideCabal
  hpkgs.db-tests (drv: {\n      # Add postgres server to the tests dependencies:\n
  \     testDepends = (drv.testDepends or []) ++ [postgresql_11];\n      # have streaming
  logs, very useful for CI\n      testTarget = \"--show-details=streaming\";\n      doCheck
  = true;\n\n      # there can be any other modifications:\n      #\n      # enableSharedExecutables
  = false;\n      # enableSeparateDataOutput = true;\n      # enableSeparateDocOutput
  = true;\n      # enableLibraryProfiling = false;\n      # isLibrary = true;\n      #
  doHaddock = false;\n    })\n   ```\n\n\n# Tricks\n\n1. In order to substitute the
  parameters we require all the parameters to have\n`Arbitrary` instance, however
  it's not always possible as not all parameters may\nhave a sane instance. In such
  cases it worth mapping the query input. It can be\ndone by applying `lmap` from
  `profunctors` package:\n\n"
description-type: markdown
hash: 9ec3366fc243ecfb619171422c93bb99e638937d73b7710426f1ef4aace9dae0
homepage: https://github.com/cheopslab/hasql-explain-tests
latest: 0.1.0.0
license-name: MPL-2.0
maintainer: alexander.vershilov@sirius.online
synopsis: Hasql queries testing interface
test-bench-deps:
  base: ^>=4.14.3.0
  hasql: '>=0'
  hasql-explain-tests: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
