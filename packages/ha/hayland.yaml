all-versions:
- 0.1.0.0
- 0.1.0.1
author: Auke Booij
basic-deps:
  base: '>=4.7 && <4.8'
  data-flags: <0.1
  hayland: '>=0'
  process: '>=1.1 && <2'
  template-haskell: '>2 && <3'
  time: <1.5
  xml: '>=1.3 && <1.4'
changelog: ''
changelog-type: ''
description: "# Haskell Wayland bindings #\nUh... these are what you'd expect.\n\n>
  NOTE: obviously this thing is incomplete, and needs more documentation and stuff.
  I'm very happy to work on that, but please let me know what **you** think requires
  attention.\n\nRefer to `NOTES.md` for more notes on wayland terminology, how it
  works, and ways to shoot yourself in the foot.\n\n\n## Quick example ##\n\n> This
  paragraph is literate haskell.\n\n    In this example (available as the `wayland-list-globals`
  executable), we are going to list the objects that the server allows us to construct
  directly (ie. without a relevant parent object).\n\n    Let's start with some imports.
  We'll need to poll for a connection, so import Fd waiting tools.\n\n    > import
  Control.Concurrent (threadWaitRead)\n\n    We are going to write a Client-side program,
  so:\n\n    > import Graphics.Wayland.Client\n\n    > main = do\n\n    Let's connect
  to the display server (e.g.) weston. displayConnect takes no arguments and tries
  to connect to a server based on environment variables.\n\n    >   connect <- displayConnect\n
  \   >   let display = case connect of\n    >                   Just x -> x\n    >
  \                  Nothing -> error \"couldn't connect to a wayland server\"\n\n
  \   We'll need to poll for the status of the socket connection between this client
  and the server, so let's go ahead and store the file descriptor.\n\n    >   fd <-
  displayGetFd display\n    >   putStrLn $ \"Using file descriptor \" ++ show fd\n
  \   >   putStrLn $ \"Display at \" ++ show display\n\n    The \"registry\" is the
  entry point to get access to the server's useful objects.\n\n    >   registry <-
  displayGetRegistry display\n    >   putStrLn $ \"Registry at \"++ show registry\n\n
  \   You can't just arbitrarily create objects via wayland: the registry has to let
  you know that a certain \"global\" has become available for construction.\n\tIt
  does so by sending an \"event\" (ie. a message from the server to the client) that
  it has.\n\tSo let's go ahead and write code that can listen to such events.\n\tThe
  registry offers two events:\n\t- a \"global\" event indicating that an object has
  become available for construction, and\n\t- a \"global_remove\" event indicating
  that an object is no longer constructible.\n\n    >   let listener = RegistryListener
  {\n    >     registryGlobal = \\reg name ifacename version -> putStrLn $ \"Received
  global \" ++ show name ++ \" (\" ++ ifacename ++ \") version \" ++ show version,\n
  \   >     registryGlobalRemove = \\ _ _ -> return ()\n    >     }\n\n    Now we
  need to activate this listener.\n\tClient-side, you can only set a specific object's
  listener once, so this operation might fail if you already set one previously.\n\n
  \   >   errorCode <- registrySetListener registry listener\n    >   putStrLn $ \"Setting
  registry listener... \" ++ show errorCode\n\n\tWe are now ready to start receiving
  the \"global\" events.\n\tBefore reading, we need to let wayland know we want to
  read - essentially meaning we lock (in the sense of mutex) the reading mechanism.\n\n
  \   >   res <- displayPrepareRead display\n    >   putStrLn $ \"Preparing read...
  \" ++ show res\n\n    As long as you stick to the protocol rules (which, as far
  as I'm away, aren't formally laid down anywhere), wayland object construction is
  free from failure.\n\tThis allows the client to not have to wait for the server
  to do its part - it can just pretend everything worked and steam ahead.\n\tBut that
  means that the construction of the registry we did earlier might actually not have
  reached the server yet.\n\tSo before we do anything else, we should flush the write
  buffer.\n\n    >   flushed <- displayFlush display\n    >   putStrLn $ \"Flushed
  \" ++ show flushed\n\n    Now poll for the socket to have data available.\n\n    >
  \  putStrLn \"polling\"\n    >   threadWaitRead fd\n    >   putStrLn $ \"Ready to
  read.\"\n\n    We can now process the data that's waiting for us on the socket,
  and dispatch the event listeners.\n\tThe latter will call e.g. our registryGlobal
  function with the incoming event's parameters.\n\n    >   events <- displayReadEvents
  display\n    >   putStrLn $ \"Read display events: \" ++ show events\n    >   dispatched
  <- displayDispatchPending display\n    >   putStrLn $ \"Dispatched events: \" ++
  show dispatched\n\n    All wayland objects we constructed are automatically destroyed
  when we disconnect.\n\n    >   displayDisconnect display\n\n\n## API design and
  symbol naming ##\n\nThe majority of the Wayland API is based on an object-oriented
  event framework.\nThe objects have a type, which wayland calls an _interface_.\nA
  _protocol_ defines a list of such interfaces.\n\nHaskell renames these interfaces
  by, if possible, removing `wl_`, and, if possible, removing `<name of the protocol>_`,
  and then converting to CamelCase.\nFor example:\n\n- `wl_display` is called `Display`
  in haskell-wayland\n- `wl_registry` -> `Registry`\n- `xdg_shell` -> `XdgShell` (as
  of this writing, however, `xdg_shell` is not in the default wayland protocol - but
  you can access it by generating the haskell-wayland API using the corresponding
  protocol XML files)\n- `wl_text_input` (in the `text.xml` protocol) -> `Input` (which
  for semantic reasons should be placed in a Haskell module whose name makes it clear
  that it corresponds to text input)\n- ...\n\nWayland names the actions on these
  interfaces e.g. `wl_display_connect` or `wl_compositor_create_region`. haskell-wayland
  converts these names into camelCase, so that you would call `displayConnect` or
  `compositorCreateRegion`.\n\n\n## Splicing a different protocol XML file ##\n\nWayland
  has a \"core\" API (specified by `wayland-{client,server,util,egl,cursor}.h`, bound
  in `Graphics.Wayland.Internal.{Client,Server,...}`), and on top of that generates
  two header files (`wayland-{client,server}-protocol.h`) from an XML file detailing
  the wayland wire protocol.\nA wayland compositor might support several such protocols
  (e.g. as of this writing, weston supports the core `wayland.xml` protocol, as well
  as `desktop-shell.xml`, `fullscreen-shell.xml`, `input-method.xml`, `screenshooter.xml`,
  ...).\n\nThe program that generates these protocol header files is called a _scanner_,
  and wayland ships with `wayland-scanner`.\nFor haskell-wayland, you can find the
  equivalent in `Graphics.Wayland.Scanner`.\nIts purpose is to bind to the C wayland
  interface and marshall all values.\n\nTo have haskell-wayland generate a haskell
  API to other such XML files (the `wayland.xml` is always generated), you'll want
  to copy what I did in `Graphics.Wayland.Internal.SpliceClient`, `Graphics.Wayland.Internal.SpliceClientInternal`
  and `Graphics.Wayland.Internal.SpliceClientTypes` (but this might change to fix
  what symbols that are exposed to the user).\nOnly the first two are to be exported
  to the user (see `Graphics.Wayland.Client` and notice that `Graphics.Wayland.Internal.SpliceClientInternal`
  is absent).\n(Ditto for the Server-side.)\n\n## Value marshalling ##\n\nWherever
  possible, all C values are marshalled to Haskell equivalents.\nFor the protocol
  API, this is done by `Graphics.Wayland.Scanner.Marshall`, and for the fixed api
  manually (but that's mostly trivial).\n\nThe exceptions to this are e.g. the methods
  that give you access to the memory contained by a buffer (which as of writing I
  haven't implemented yet).\n\n\n## Technical notices ##\n\nIn theory, the symbols
  exposed by the C scanner (`wayland-scanner`) are off-limits for us: every language
  is supposed to only bind to the C library functions in `libwayland-client` and `libwayland-server`.
  In other words, the C library functions exposed in `wayland-{client,server,util,egl,cursor}.h`,
  plus the protocol XML files, should suffice to bind to all of wayland. However,
  in one occasion we do make us of them (binding a list of `struct wl_interface`s).\n\nSince
  Template Haskell doesn't yet support splicing the module statement, or otherwise
  dynamically specifying which symbols get exported, currently you can access some
  `_request_binding` functions and `_c_interface` values, e.g. `wl_data_offer_c_add_listener_request_binding`
  and `wl_keyboard_c_interface`. These should be internal, and one of these days I'll
  fix that.\n\nIn terms of safety, there are plenty of opportunities with this library
  to shoot yourself in the foot.\nFor the most part, on the client side you'll want
  to stick to C-style event loops with appropriate polls: an example is (somewhat)
  provided.\n\n\n## Debugging ##\n\nTry using [wayland-tracker](https://github.com/01org/wayland-tracker)
  if your code won't work at all: it is a program that can dump the connection between
  a server and a client.\n\n\n## TODO ##\n\n- prettify binding to wl_registry.bind
  (ie make more type-safe, add haskell documentation, etc)\n- fix exposed symbols\n-
  some kind of fancy FRP library binding?\n- write documentation strings from .protocol
  files into haddock???\n- allow easy building of other .protocol files into haskell
  bindings\n- protocol version checker function\n"
description-type: markdown
hash: 6ef1fec8bce7e4735b0ca79ab44a4edc00235f43ddead1d97158710ed6e80f91
homepage: ''
latest: 0.1.0.1
license-name: MIT
maintainer: auke@tulcod.com
synopsis: Haskell bindings for the C Wayland library.
test-bench-deps:
  base: '>=0'
  hayland: '>=0'
  process: '>=0'
  xml: '>=0'
