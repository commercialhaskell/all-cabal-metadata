all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.1.0
- 1.1.1
- 1.1.2
- 1.2.0
- 1.3.0
- 1.3.1
- 2.0.0
- 2.0.1
- 2.1.0
- 2.2.0
- 2.3.0
- 2.3.1
- 2.3.2
- 2.4.0
- 2.5.0
- 2.5.1
- 2.6.0
- 2.6.1
author: Julian Bruder
basic-deps:
  array: '>=0.5 && <1'
  attoparsec: '>=0.14.4 && <1'
  base: '>=4.17.2 && <5'
  bitvec: '>=1.1.5 && <2'
  bytestring: '>=0.11.5 && <1'
  containers: '>=0.6.7 && <1'
  data-default: '>=0.7.1 && <1'
  dependent-map: '>=0.4 && <1'
  finite-typelits: '>=0.1.0 && <1'
  lens: '>=5 && <6'
  mtl: '>=2.2.2 && <3'
  smtlib-backends: '>=0.4 && <0.5'
  smtlib-backends-process: '>=0.3 && <0.4'
  some: '>=1.0.6 && <1.1'
  text: '>=2.0.2 && <3'
  unordered-containers: '>=0.2.20 && <0.3'
  utf8-string: '>=1.0.2 && <2'
  vector-sized: '>=1 && <2'
changelog: |
  # Changelog

  All notable changes to the hasmtlib library will be documented in this
  file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [PVP versioning](https://pvp.haskell.org/).

  ## v2.6.1 _(2024-09-02)_

  ### Added
  - Added module 'Language.Hasmtlib.Type.Relation' for encoding binary relations
  - Added rich documentation and usage examples for all public modules

  ## v2.6.0 _(2024-08-27)_

  ### Added
  - Support for signed BitVec operations.
  - Added constructor `Rem` for `Expr t`.

  ### Changed
  - *(breaking change)* Enhanced the type of `BvSort Nat` to `BvSort BvEnc Nat` where `BvEnc = Unsigned | Signed`.
    Before, the API only allowed unsigned BitVec, therefore `BvSort n` now becomes `BvSort Unsigned n`.
    The promoted type `BvEnc` is phantom and only used for differentiating instances for `Num`, ...
  - Moved `Language.Hasmtlib.Internal.Bitvec` to `Language.Hasmtlib.Type.Bitvec`, exported API with `Language.Hasmtlib`
  - Removed constructors `StrLT` and `StrLTHE` from `Expr t`.
  - Fixed wrong implementation of Num for `Bitvec`. `(+)`, `(-)` and `(*)` had invalid definitions.

  ## v2.5.1 _(2024-08-26)_

  ### Added
  - Added `SharingMode = None | StableNames` in `Language.Hasmtlib.Internal.Sharing`. Defaults to `StableNames`.
  - Added function `setSharingMode` which allows you to change the `SharingMode`.

  ### Changed
  - `runSharing` in `Language.Hasmtlib.Internal.Sharing` now differentiates sharing behavior based on newly given argument of type `SharingMode`

  ## v2.5.0 _(2024-08-25)_

  ### Added
  - added instances `Eq`, `Ord`, `GEq` and `GCompare` for `Expr t`
  - added instances `Real` and `Enum` for `Expr IntSort`, `Expr RealSort` and `Expr (BvSort n)`
  - added instance `Integral` for `Expr IntSort` and `Expr (BvSort n)`
  - added instance `Bits` for `Expr BoolSort` and `Expr (BvSort n)`

  ### Changed
  - Removed `Language.Hasmtlib.Integraled`: use the added `Integral` instance instead
  - Removed redundant BitVec constructors from `Expr` and replaced usage in instances with the more generic existing ones.
  For example: Where `BvNot` was used previously, we now use `Not` which is already used for Expr BoolSort.
  Differentiation between such operations now takes place in `Language.Hasmtlib.Internal.Render#render` when rendering expressions,
  e.g. rendering `bvnot` for `BvSort` and `not` for `BoolSort`.
  Therefore there is no behavioral change for the solver.
  - Removed functions `bvRotL` and `bvRotR` from `Language.Hasmtlib.Type.Expr`: use the added `Bits` instance instead with `rotateL` and `rotateR`

  ## v2.4.0 _(2024-08-21)_

  ### Added
  - Added _**observable** sharing_ with `Language.Hasmtlib.Internal.Sharing`. Thank you fabeulous@github for the great help!
  - Added `Language.Hasmtlib.Internal.Uniplate1` for plating GADTs

  ### Changed
  - Deleted and moved `Language.Hasmtlib.Equatable`, `Language.Hasmtlib.Orderable`, `Language.Hasmtlib.Iteable` & `Language.Hasmtlib.Internal.Expr` into `Language.Hasmtlib.Type.Expr`

  ## v2.3.2 _(2024-08-17)_

  ### Changed
  - Internal replacement of `Prelude.liftA2` for backwards compatiblity
  - Fixed bug where `solveMaximizedDebug` would solve minimized instead of maximized

  ## v2.3.1 _(2024-08-16)_

  ### Changed
  - Instances for `Boolean`, `Num` & `Fractional` on `Expr` now use smart constructors

  ## v2.3.0 _(2024-08-12)_

  ### Added
  - Added full SMTLib2.6-standard support for sort String
  - Added module `Language.Hasmtlib.Lens` featuring `instance Plated (Expr t)` for rewriting

  ### Changed
  - Export constructors of `Expr t`
  - `instance Show (Expr t)` now displays expressions in SMTLib2-Syntax

  ## v2.2.0 _(2024-08-09)_

  ### Added
  - Added multiple basic instances for `Equatable`, `Orderable`, `Iteable`, `Variable` & `Codec`

  ### Changed
  - *(breaking change)* `Variable` & `Codec` now ship with a `Generic` default implementation instead of relying on `Applicative`. This will break your instances if the type does not have an instance for `Generic`.

  ## v2.1.0 _(2024-07-26)_

  ### Added
  - Added solver Bitwuzla
  - Added debugging capabilities for `Pipe` by introducing `debugInteractiveWith`

  ### Changed
  - Yices now uses flag `--incremental` by default
  - *(breaking change)* Removed functional dependency `m -> s` from `MonadIncrSMT s m`. This forces you to specify the underlying state when using `interactiveWith`. Therefore `interactiveWith cvc5Living $ do ...` now becomes `interactiveWith @Pipe cvc5Living $ do ...`.
  - *(breaking change)* Removed `newtype ProcessSolver` and replaced it with underlying `SMTLIB.Backends.Process.Config`. This may only affect you if you instantiated custom solvers.

  ## v2.0.1 _(2024-07-23)_

  ### Added
  - Added more documentation

  ### Changed
  - `(<==>)` now has `infixr 4`
  - `(<==)` now has `infixl 0`

  ## v2.0.0 _(2024-07-23)_

  ### Added
  - Arithmetic functions: `isIntSort`, `toIntSort` & `toRealSort`
  - Asserting maybe-formulas: `assertMaybe :: MonadSMT s m => Maybe (Expr BoolSort) -> m ()`
  - Logical equivalence `(<==>)` & reverse logical implication `(<==)`
  - Solvers: OpenSMT, OptiMathSAT
  - Iterative refinement optimizations utilizing incremental stack
  - Custom solver options via `Custom String String :: SMTOption`
  - Optimization Modulo Theories (OMT) / MaxSMT support with: `minimize`, `maximize` & `assertSoft`

  ### Changed
  - *(breaking change)* The functions `solver` and `debug` which create `Solver`s from `ProcessSolver`s are polymorph in the state `s` now.
  This requires you to annotate the mentioned functions with the targetted state.
  These are `SMT` and `OMT`.
  For example, `solverWith (solver cvc5) $ do ...` becomes `solverWith (solver @SMT cvc5) $ do ...`.
  - Prefix `xor` now has an `infix 4`

  ## v1.3.1 _(2024-07-12)_

  ### Added
  - Added `count` in `Language.Hasmtlib.Counting`

  ## v1.3.0 _(2024-07-12)_

  ### Added
  - Added cardinality constraints with `Language.Hasmtlib.Counting`

  ## v1.2.0 _(2024-07-11)_

  ### Added
  - Added n-ary comparisons `distinct` & `equal`

  ### Changed
  - *(breaking change)* When using `interactiveWith` the `SMTOption` `Incremental` is no longer set by default anymore

  ## v1.1.2 _(2024-07-02)_

  ### Changed
  - Minor internal changes

  ## v1.1.1 _(2024-06-25)_

  ### Added
  - Added this `CHANGELOG.md` file

  ## v1.1.0 _(2024-06-21)_

  ### Added
  - Added `ArraySort` and full support for its SMTLib2 standard specification
changelog-type: markdown
description: |
  [![Hackage](https://img.shields.io/hackage/v/hasmtlib.svg)](https://hackage.haskell.org/package/hasmtlib) ![Static Badge](https://img.shields.io/badge/Lang-GHC2021-blue) [![Haskell-CI](https://github.com/bruderj15/Hasmtlib/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/bruderj15/Hasmtlib/actions/workflows/haskell-ci.yml) [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)

  # Hasmtlib - Haskell SMTLib MTL Library

  Hasmtlib is a library with high-level-abstraction for generating SMTLib2-problems using a monad.
  It takes care of encoding your problem, marshaling the data to an external solver and parsing and interpreting the result into Haskell types.
  It is highly inspired by [ekmett/ersatz](https://github.com/ekmett/ersatz) which does the same for QSAT. Communication with external solvers is handled by [tweag/smtlib-backends](https://github.com/tweag/smtlib-backends).

  Building expressions with **type-level representations** of the **SMTLib2-Sorts** guarantees type-safety when communicating with external solvers.

  While **formula construction** is entirely **pure**, Hasmtlib - just like `ersatz` - makes use of _**observable sharing**_ for expressions.

  This allows you to use the much richer subset of Haskell than a purely monadic meta-language would, which ultimately results in extremely compact code.

  For instance, to define the addition of two `V3` containing Real-SMT-Expressions:
  ```haskell
  v3Add :: V3 (Expr RealSort) -> V3 (Expr RealSort) -> V3 (Expr RealSort)
  v3Add = liftA2 (+)
  ```
  Even better, the [Expr-GADT](https://github.com/bruderj15/Hasmtlib/blob/master/src/Language/Hasmtlib/Type/Expr.hs) allows a polymorph definition:
  ```haskell
  v3Add :: Num (Expr t) => V3 (Expr t) -> V3 (Expr t) -> V3 (Expr t)
  v3Add = liftA2 (+)
  ```
  This looks a lot like the [definition of Num](https://hackage.haskell.org/package/linear-1.23/docs/src/Linear.V3.html#local-6989586621679182277) for `V3 a`:
  ```haskell
  instance Num a => Num (V3 a) where
    (+) :: V3 a -> V3 a -> V3 a
    (+) = liftA2 (+)
  ```
  Hence, no extra definition is needed at all. We can use the existing instances:
  ```haskell
  {-# LANGUAGE DataKinds #-}

  import Language.Hasmtlib
  import Linear

  -- instances with default impl
  instance Codec a => Codec (V3 a)
  instance Variable a => Variable (V3 a)

  main :: IO ()
  main = do
    res <- solveWith @SMT (solver cvc5) $ do
      setLogic "QF_NRA"

      u :: V3 (Expr RealSort) <- variable
      v <- variable

      assert $ dot u v === 5

      return (u,v)

    print res
  ```
  May print: `(Sat,Just (V3 (-2.0) (-1.0) 0.0,V3 (-2.0) (-1.0) 0.0))`

  ## Features

  - [x] SMTLib2-Sorts in the Haskell-Type to guarantee well-typed expressions
    ```haskell
      data SMTSort =
          BoolSort
        | IntSort
        | RealSort
        | BvSort BvEnc Nat
        | ArraySort SMTSort SMTSort
        | StringSort
      data Expr (t :: SMTSort) where ...

      ite :: Expr BoolSort -> Expr t -> Expr t -> Expr t
    ```
  - [x] Full SMTLib 2.6 standard support for Sorts Bool, Int, Real, BitVec, Array & String
  - [x] Type-level length-indexed Bitvectors with type-level encoding (Signed/Unsigned) for BitVec
  - [x] Pure API with plenty common instances: `Num`, `Floating`, `Bounded`, `Bits`, `Ixed` and many more
  - [x] Add your own solvers via the [Solver type](https://github.com/bruderj15/Hasmtlib/blob/master/src/Language/Hasmtlib/Type/Solution.hs)
  - [x] Solvers via external processes: CVC5, Z3, Yices2-SMT, MathSAT, OptiMathSAT, OpenSMT & Bitwuzla
  - [x] Support for incremental solving
  - [x] Pure quantifiers `for_all` and `exists`
    ```haskell
      solveWith @SMT (solver z3) $ do
        setLogic "LIA"
        z <- var @IntSort
        assert $ z === 0
        assert $
          for_all $ \x ->
              exists $ \y ->
                x + y === z
        return z
    ```
  - [x] Optimization Modulo Theories (OMT) / MaxSMT
    ```haskell
      res <- solveWith @OMT (solver z3) $ do
        setLogic "QF_LIA"
        x <- var @IntSort

        assert $ x >? -2
        assertSoftWeighted (x >? -1) 5.0
        minimize x

        return x
    ```

  ## Related work
  - [ekmett/ersatz](https://hackage.haskell.org/package/ersatz):
  Huge inspiration for this library (some code stolen).
  We do for `SMT` what they do for `SAT`.
  - [hgoes/smtlib2](https://hackage.haskell.org/package/smtlib2):
  Their eDSL is highly expressive and focuses on well-typed SMT-expressions.
  But their approach is a little verbose and makes usage feel quite heavy.
  Their eDSL is also entirely monadic and therefore formula construction is painful.
  - [yav/simple-smt](https://hackage.haskell.org/package/simple-smt):
  They are lightweight but their types are weak and their API is barely embedded into Haskell.
  - [LevantErkok/sbv](https://hackage.haskell.org/package/sbv):
  While they "express properties about Haskell programs and automatically prove them using SMT",
  we instead use Haskell to simplify the encoding of SMT-Problems.
  They can do a whole lot (C-Code-Gen, Crypto-Stuff,...), which is cool, but adds weight.

  If you want highly specific implementations for different solvers, all their individual configurations and swallow the awkward typing,
  then use [hgoes/smtlib2](https://hackage.haskell.org/package/smtlib2).

  If you want to express properties about Haskell programs and automatically prove them using SMT,
  then use [LevantErkok/sbv](https://hackage.haskell.org/package/sbv).

  If you want to encode SMT-problems as lightweight and close to Haskell as possible, then use this library.
  I personally use it for scheduling/resource-allocation-problems.

  ## Examples
  There are some examples in [here](https://github.com/bruderj15/Hasmtlib/tree/master/src/Language/Hasmtlib/Example).

  ## Contact information
  Contributions, critics and bug reports are welcome!

  Please feel free to contact me through GitHub.
description-type: markdown
hash: 7a3d7f63d1b5d88e66339bd8515573de387b820f70e400fcf34461b643cf9c65
homepage: https://github.com/bruderj15/Hasmtlib
latest: 2.6.1
license-name: GPL-3.0-only
maintainer: julian.bruder@outlook.com
synopsis: A monad for interfacing with external SMT solvers
test-bench-deps: {}
