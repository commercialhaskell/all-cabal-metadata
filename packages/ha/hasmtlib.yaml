all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.1.0
- 1.1.1
- 1.1.2
- 1.2.0
author: Julian Bruder
basic-deps:
  attoparsec: '>=0.14.4 && <1'
  base: '>=4.17.2 && <5'
  bitvec: '>=1.1.5 && <2'
  bytestring: '>=0.11.5 && <1'
  containers: '>=0.6.7 && <1'
  data-default: '>=0.7.1 && <1'
  dependent-map: '>=0.4 && <1'
  finite-typelits: '>=0.1.0 && <1'
  lens: '>=5 && <6'
  mtl: '>=2.2.2 && <3'
  smtlib-backends: '>=0.4 && <0.5'
  smtlib-backends-process: '>=0.3 && <0.4'
  some: '>=1.0.6 && <1.1'
  text: '>=2.0.2 && <3'
  utf8-string: '>=1.0.2 && <2'
  vector-sized: '>=1 && <2'
changelog: |
  # Changelog

  All notable changes to the hasmtlib library will be documented in this
  file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [PVP versioning](https://pvp.haskell.org/).

  ## v1.2.0 _(2024-07-11)_

  ### Added
  - Added n-ary comparisons `distinct` & `equal`

  ### Changed
  - *(breaking change)* When using `interactiveWith` the `SMTOption` `Incremental` is no longer set by default anymore

  ## v1.1.2 _(2024-07-02)_

  ### Changed
  - Minor internal changes

  ## v1.1.1 _(2024-06-25)_

  ### Added
  - Added this `CHANGELOG.md` file

  ## v1.1.0 _(2024-06-21)_

  ### Added
  - Added `ArraySort` and full support for its SMTLib2 standard specification
changelog-type: markdown
description: "[![Hackage](https://img.shields.io/hackage/v/hasmtlib.svg)](https://hackage.haskell.org/package/hasmtlib)
  ![Static Badge](https://img.shields.io/badge/Lang-GHC2021-blue) [![Haskell-CI](https://github.com/bruderj15/Hasmtlib/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/bruderj15/Hasmtlib/actions/workflows/haskell-ci.yml)
  [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n#
  Hasmtlib\n\nHasmtlib is a library for generating SMTLib2-problems using a monad.\nIt
  takes care of encoding your problem, marshaling the data to an external solver and
  parsing and interpreting the result into Haskell types.\nIt is highly inspired by
  [ekmett/ersatz](https://github.com/ekmett/ersatz) which does the same for QSAT.
  Communication with external solvers is handled by [tweag/smtlib-backends](https://github.com/tweag/smtlib-backends).\n\nBuilding
  expressions with type-level representations of the SMTLib2-Types guarantees type-safety
  when communicating with external solvers.\n\nAlthough Hasmtlib does not yet make
  use of _observable_ sharing [(StableNames)](https://downloads.haskell.org/ghc/9.6.1/docs/libraries/base-4.18.0.0/System-Mem-StableName.html#:~:text=Stable%20Names,-data%20StableName%20a&text=An%20abstract%20name%20for%20an,makeStableName%20on%20the%20same%20object.)
  like Ersatz does, sharing in the API still allows for pure formula construction.\n\nTherefore,
  this allows you to use the much richer subset of Haskell than a purely monadic meta-language
  would, which the strong [hgoes/smtlib2](https://github.com/hgoes/smtlib2) is one
  of. This ultimately results in extremely compact code.\n\nFor instance, to define
  the addition of two `V3` containing Real-SMT-Expressions:\n```haskell\nv3Add ::
  V3 (Expr RealSort) -> V3 (Expr RealSort) -> V3 (Expr RealSort)\nv3Add = liftA2 (+)\n```\nEven
  better, the [Expr-GADT](https://github.com/bruderj15/Hasmtlib/blob/master/src/Language/Hasmtlib/Internal/Expr.hs)
  allows for a polymorph definition:\n```haskell\nv3Add :: Num (Expr t) => V3 (Expr
  t) -> V3 (Expr t) -> V3 (Expr t)\nv3Add = liftA2 (+)\n```\nThis looks a lot like
  the [definition of Num](https://hackage.haskell.org/package/linear-1.23/docs/src/Linear.V3.html#local-6989586621679182277)
  for `V3 a`:\n```haskell\ninstance Num a => Num (V3 a) where\n  (+) :: V3 a -> V3
  a -> V3 a\n  (+) = liftA2 (+)\n```\nHence, no extra definition is needed at all.
  We can use the existing instances:\n```haskell\n{-# LANGUAGE DataKinds #-}\n\nimport
  Language.Hasmtlib\nimport Linear\n\n-- instances with default impl\ninstance Codec
  a => Codec (V3 a)\ninstance Variable a => Variable (V3 a)\n\nmain :: IO ()\nmain
  = do\n  res <- solveWith (solver cvc5) $ do\n    setLogic \"QF_NRA\"\n\n    u ::
  V3 (Expr RealSort) <- variable\n    v <- variable\n\n    assert $ dot u v === 5\n\n
  \   return (u,v)\n\n  print res\n```\nMay print: `(Sat,Just (V3 (-2.0) (-1.0) 0.0,V3
  (-2.0) (-1.0) 0.0))`\n\n## Features\n\n### Supported\n- [x] SMTLib2-Sorts in the
  Haskell-Type\n  ```haskell\n    data SMTSort = BoolSort | IntSort | RealSort | BvSort
  Nat | ArraySort SMTSort SMTSort\n    data Expr (t :: SMTSort) where ...\n  \n    ite
  :: Expr BoolSort -> Expr t -> Expr t -> Expr t\n  ```\n- [x] Full SMTLib 2.6 standard
  support for Sorts Int, Real, Bool, unsigned BitVec & Array\n- [x] Type-level length-indexed
  Bitvectors for BitVec\n  ```haskell\n    bvConcat :: (KnownNat n, KnownNat m) =>
  Expr (BvSort n) -> Expr (BvSort m) -> Expr (BvSort (n + m))\n  ```\n- [x] Pure API
  with Expression-instances for Num, Floating, Bounded, ...\n  ```haskell\n    solveWith
  (solver yices) $ do\n      setLogic \"QF_BV\"\n      x <- var @(BvSort 16)\n      y
  <- var\n      assert $ x - (maxBound `mod` 8) === y * y \n      return (x,y)\n  ```\n-
  [x] Add your own solvers via the [Solver type](https://github.com/bruderj15/Hasmtlib/blob/master/src/Language/Hasmtlib/Type/Solution.hs)\n
  \ ```haskell\n    -- | Function that turns a state (SMT) into a result and a solution\n
  \   type Solver s m = s -> m (Result, Solution)\n  ```\n- [x] Solvers via external
  processes: CVC5, Z3, Yices2-SMT & MathSAT\n  ```haskell\n    (result, solution)
  <- solveWith (solver mathsat) $ do\n      setLogic \"QF_LIA\" \n      assert $ ...\n
  \ ```\n- [x] Incremental solving\n  ```haskell\n      cvc5Living <- interactiveSolver
  cvc5\n      interactiveWith cvc5Living $ do\n        setLogic \"QF_LIA\"    \n        setOption
  $ ProduceModels True\n        x <- var @IntSort\n        assert $ x === 42\n        result
  <- checkSat\n        push\n        assert $ x <? 0\n        (result, solution) <-
  solve\n        case result of\n          Sat   -> return solution\n          Unsat
  -> pop >> ...\n  ```\n- [x] Pure quantifiers `for_all` and `exists`\n  ```haskell\n
  \   solveWith (solver z3) $ do\n      setLogic \"LIA\"\n      z <- var @IntSort\n
  \     assert $ z === 0\n      assert $\n        for_all $ \\x ->\n            exists
  $ \\y ->\n              x + y === z\n      return z\n  ```\n\n### Coming\n- [ ]
  Observable sharing & access to the expression-tree (useful for rewriting, ...)\n-
  [ ] (Maybe) signed BitVec with corresponding encoding on the type-level (unsigned,
  ones-complement, twos-complement)\n- [ ] ...\n\n## Examples\nThere are some examples
  in [here](https://github.com/bruderj15/Hasmtlib/tree/master/src/Language/Hasmtlib/Example).\n\n##
  Contact information\nContributions, critics and bug reports are welcome!\n\nPlease
  feel free to contact me through GitHub.\n"
description-type: markdown
hash: c2d21d288c421ccfd161a3f63a81c949d518a374365cec3dce0d8ee12ba153cd
homepage: https://github.com/bruderj15/Hasmtlib
latest: 1.2.0
license-name: GPL-3.0-only
maintainer: julian.bruder@outlook.com
synopsis: A monad for interfacing with external SMT solvers
test-bench-deps: {}
