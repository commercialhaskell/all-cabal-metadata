homepage: https://github.com/nikita-volkov/hasql
changelog-type: markdown
hash: 1fde8e38a6044866f9ead24c9b6bf8638ffbbbb34a63a83501e9540067c05dc5
test-bench-deps:
  hasql: -any
  rerebase: ==1.*
  gauge: '>=0.2.5 && <0.3'
  quickcheck-instances: '>=0.3.11 && <0.4'
  tasty-quickcheck: '>=0.9 && <0.11'
  tasty-hunit: '>=0.9 && <0.11'
  tasty: '>=0.12 && <2'
  contravariant-extras: '>=0.3.5.2 && <0.4'
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
synopsis: An efficient PostgreSQL driver with a flexible mapping API
changelog: |
  # 1.6.3.1

  - Moved to "postgresql-libpq-0.10"

  # 1.6.3

  - Added `unknownEnum` encoder

  # 1.6.2

  - Added composite encoder
  - Added `oid` and `name` encoders

  # 1.6.1

  - Added `jsonLazyBytes` and `jsonbLazyBytes`

  # 1.6

  - Added position to `ServerError` (breaking change).
  - Disabled failure on empty query.

  # 1.5

  - Added column number to `RowError` (breaking change).
  - Added `MonadReader Connection` instance for Session.
basic-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.13 && <5'
  time: '>=1.9 && <2'
  bytestring-strict-builder: '>=0.4.5.1 && <0.5'
  postgresql-libpq: '>=0.9 && <0.11'
  text: '>=1 && <3'
  uuid: '>=1.3 && <2'
  dlist: '>=0.8 && <0.9 || >=1 && <2'
  postgresql-binary: '>=0.13.1 && <0.14'
  hashtables: '>=1.1 && <2'
  contravariant: '>=1.3 && <2'
  network-ip: '>=0.3.0.3 && <0.4'
  mtl: '>=2 && <3'
  hashable: '>=1.2 && <2'
  attoparsec: '>=0.10 && <0.15'
  transformers: '>=0.3 && <0.7'
  scientific: '>=0.3 && <0.4'
  aeson: '>=2 && <3'
  profunctors: '>=5.1 && <6'
  vector: '>=0.10 && <0.14'
  text-builder: '>=0.6.7 && <0.7'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.2.0
- 0.2.1
- 0.2.3
- 0.4.0
- 0.4.1
- 0.5.0
- 0.6.0
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.3.1
- 0.7.3.2
- 0.7.4
- 0.14.0.2
- 0.14.0.3
- 0.15.0.2
- 0.15.1
- 0.15.1.1
- 0.19.2
- 0.19.3
- 0.19.3.1
- 0.19.3.2
- 0.19.3.3
- 0.19.4
- 0.19.5
- 0.19.6
- 0.19.7
- 0.19.8
- 0.19.9
- 0.19.10
- 0.19.11
- 0.19.12
- 0.19.13
- 0.19.14
- 0.19.15
- 0.19.15.1
- 0.19.15.2
- 0.19.16
- 0.19.17
- 0.19.17.1
- 0.19.18
- 0.19.18.1
- 0.19.18.2
- '0.20'
- 0.20.0.1
- 0.20.1
- '1'
- '1.1'
- 1.1.1
- '1.2'
- '1.3'
- 1.3.0.1
- 1.3.0.2
- 1.3.0.3
- 1.3.0.5
- 1.3.0.6
- '1.4'
- 1.4.0.1
- 1.4.1
- 1.4.2
- 1.4.3
- 1.4.4
- 1.4.4.1
- 1.4.4.2
- 1.4.4.3
- 1.4.5
- 1.4.5.1
- 1.4.5.2
- 1.4.5.3
- '1.5'
- 1.5.0.1
- 1.5.0.2
- 1.5.0.3
- 1.5.0.4
- 1.5.0.5
- '1.6'
- 1.6.0.1
- 1.6.1
- 1.6.1.1
- 1.6.1.2
- 1.6.1.3
- 1.6.1.4
- 1.6.2
- 1.6.3
- 1.6.3.1
- 1.6.3.2
- 1.6.3.3
author: Nikita Volkov <nikita.y.volkov@mail.ru>
latest: 1.6.3.3
description-type: markdown
description: "# Summary\n\nHasql is a highly efficient PostgreSQL driver for Haskell
  with a typesafe yet flexible mapping API. It targets both the users, who need maximum
  control, and the users who face the typical tasks of DB-powered applications, providing
  them with higher-level APIs. Currently it is known to be [the fastest driver](https://nikita-volkov.github.io/hasql-benchmarks/)
  in the Haskell ecosystem.\n\n> [!IMPORTANT]\n> Hasql is one of the supported targets
  of the [pGenie](https://pgenie.io) code generator, which empowers it with schema
  and query validation, and relieves you from boilerplate.\n\n# Status\n\n[![Hackage](https://img.shields.io/hackage/v/hasql.svg)](https://hackage.haskell.org/package/hasql)\n\nHasql
  is production-ready, actively maintained and the API is pretty stable. It's used
  by many companies and most notably by the [Postgrest](https://postgrest.org/) project.\n\n#
  Ecosystem\n\nHasql is not just a single library, it is a granular ecosystem of composable
  libraries, each isolated to perform its own task and stay simple.\n\n* [\"hasql\"](https://github.com/nikita-volkov/hasql)
  - the root of the ecosystem, which provides the essential abstraction over the PostgreSQL
  client functionality and mapping of values. Everything else revolves around that
  library.\n\n* [\"hasql-th\"](https://github.com/nikita-volkov/hasql-th) - Template
  Haskell utilities, providing compile-time syntax checking and easy statement declaration.
  \n* [\"hasql-transaction\"](https://github.com/nikita-volkov/hasql-transaction)
  - an STM-inspired composable abstraction over database transactions providing automated
  conflict resolution.\n\n* [\"hasql-dynamic-statements\"](https://github.com/nikita-volkov/hasql-dynamic-statements)
  - a toolkit for generating statements based on the parameters.\n\n* [\"hasql-cursor-query\"](https://github.com/nikita-volkov/hasql-cursor-query)
  - a declarative abstraction over cursors.\n\n* [\"hasql-cursor-transaction\"](https://github.com/nikita-volkov/hasql-cursor-transaction)
  - a lower-level abstraction over cursors, which however allows to fetch from multiple
  cursors simultaneously. Generally though \"hasql-cursor-query\" is the recommended
  alternative.\n\n* [\"hasql-pool\"](https://github.com/nikita-volkov/hasql-pool)
  - a Hasql-specialized abstraction over the connection pool.\n\n* [\"hasql-migration\"](https://github.com/tvh/hasql-migration)
  - A port of postgresql-simple-migration for use with hasql.\n\n* [\"hasql-listen-notify\"](https://github.com/awkward-squad/hasql-listen-notify)
  / [\"hasql-notifications\"](https://github.com/diogob/hasql-notifications) - Support
  for PostgreSQL asynchronous notifications.\n\n* [\"hasql-optparse-applicative\"](https://github.com/sannsyn/hasql-optparse-applicative)
  - \"optparse-applicative\" parsers for Hasql.\n\n* [\"hasql-implicits\"](https://github.com/nikita-volkov/hasql-implicits)
  - implicit definitions, such as default codecs for standard types.\n\n* [\"hasql-interpolate\"](https://github.com/awkward-squad/hasql-interpolate)
  - a QuasiQuoter that supports interpolating Haskell expressions into Hasql queries.\n\n###
  Benefits of being an ecosystem\n\n* **Simplicity.** Each library in isolation provides
  a simple API, which is hopefully easier to comprehend.\n\n* **Flexibility and composability.**
  The user picks and chooses the features, thus precisely matching the level of abstraction
  that he needs for his task.\n\n* **Much more stable and more descriptive semantic
  versioning.** E.g., a change in the API of the \"hasql-transaction\" library won't
  affect any of the other libraries and it gives the user a more precise information
  about which part of his application he needs to update to conform.\n\n* **Interchangeability
  and competition of the ecosystem components.** E.g., [not everyone will agree](https://github.com/nikita-volkov/hasql/issues/41)
  with the restrictive design decisions made in the \"hasql-transaction\" library.
  However those decisions are not imposed on the user, and instead of having endless
  debates about how to abstract over transactions, another extension library can simply
  be released, which will provide a different interpretation of what the abstraction
  over transactions should be.\n\n* **Horizontal scalability of the ecosystem.** Instead
  of posting feature- or pull-requests, the users are encouraged to release their
  own small extension-libraries, with themselves becoming the copyright owners and
  taking on the maintenance responsibilities. Compare this model to the classical
  one, where some core-team is responsible for everything. One is scalable, the other
  is not.\n\n# Tutorials\n\n- [Organization of Hasql code in a dedicated library](https://github.com/nikita-volkov/hasql-tutorial1)\n\n#
  Short Example\n\nFollowing is a complete application, which performs some arithmetic
  in Postgres using Hasql.\n\n```haskell\n{-# LANGUAGE OverloadedStrings, QuasiQuotes
  #-}\nimport Prelude\nimport Data.Int\nimport Data.Functor.Contravariant\nimport
  Hasql.Session (Session)\nimport Hasql.Statement (Statement(..))\nimport qualified
  Hasql.Session as Session\nimport qualified Hasql.Decoders as Decoders\nimport qualified
  Hasql.Encoders as Encoders\nimport qualified Hasql.Connection as Connection\n\n\nmain
  :: IO ()\nmain = do\n  Right connection <- Connection.acquire connectionSettings\n
  \ result <- Session.run (sumAndDivModSession 3 8 3) connection\n  print result\n
  \ where\n    connectionSettings = Connection.settings \"localhost\" 5432 \"postgres\"
  \"\" \"postgres\"\n\n\n-- * Sessions\n-- \n-- Session is an abstraction over the
  database connection and all possible errors.\n-- It is used to execute statements.\n--
  It is composable and has a Monad instance.\n-- \n-- It's recommended to define sessions
  in a dedicated 'Sessions'\n-- submodule of your project.\n-------------------------\n\nsumAndDivModSession
  :: Int64 -> Int64 -> Int64 -> Session (Int64, Int64)\nsumAndDivModSession a b c
  = do\n  -- Get the sum of a and b\n  sumOfAAndB <- Session.statement (a, b) sumStatement\n
  \ -- Divide the sum by c and get the modulo as well\n  Session.statement (sumOfAAndB,
  c) divModStatement\n\n\n-- * Statements\n-- \n-- Statement is a definition of an
  individual SQL-statement,\n-- accompanied by a specification of how to encode its
  parameters and\n-- decode its result.\n-- \n-- It's recommended to define statements
  in a dedicated 'Statements'\n-- submodule of your project.\n-------------------------\n\nsumStatement
  :: Statement (Int64, Int64) Int64\nsumStatement = Statement sql encoder decoder
  True where\n  sql = \"select $1 + $2\"\n  encoder =\n    (fst >$< Encoders.param
  (Encoders.nonNullable Encoders.int8)) <>\n    (snd >$< Encoders.param (Encoders.nonNullable
  Encoders.int8))\n  decoder = Decoders.singleRow (Decoders.column (Decoders.nonNullable
  Decoders.int8))\n\ndivModStatement :: Statement (Int64, Int64) (Int64, Int64)\ndivModStatement
  = Statement sql encoder decoder True where\n  sql = \"select $1 / $2, $1 % $2\"\n
  \ encoder =\n    (fst >$< Encoders.param (Encoders.nonNullable Encoders.int8)) <>\n
  \   (snd >$< Encoders.param (Encoders.nonNullable Encoders.int8))\n  decoder = Decoders.singleRow
  row where\n    row =\n      (,) <$>\n      Decoders.column (Decoders.nonNullable
  Decoders.int8) <*>\n      Decoders.column (Decoders.nonNullable Decoders.int8)\n```\n\nFor
  the general use-case it is advised to prefer declaring statements using the \"hasql-th\"
  library, which validates the statements at compile-time and generates codecs automatically.
  So the above two statements could be implemented the following way:\n\n```haskell\nimport
  qualified Hasql.TH as TH -- from \"hasql-th\"\n\nsumStatement :: Statement (Int64,
  Int64) Int64\nsumStatement =\n  [TH.singletonStatement|\n    select ($1 :: int8
  + $2 :: int8) :: int8\n    |]\n\ndivModStatement :: Statement (Int64, Int64) (Int64,
  Int64)\ndivModStatement =\n  [TH.singletonStatement|\n    select\n      (($1 ::
  int8) / ($2 :: int8)) :: int8,\n      (($1 :: int8) % ($2 :: int8)) :: int8\n    |]\n```\n"
license-name: MIT
