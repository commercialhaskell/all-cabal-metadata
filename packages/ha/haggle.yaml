homepage: https://github.com/travitch/haggle
changelog-type: markdown
hash: f902d52f69e38496c04eae141ca081c6a90a1b474ca8c11d3b3241989a8ed27d
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: '>=4.5'
  test-framework-quickcheck2: -any
  HUnit: -any
  containers: -any
  fgl: '>=5.8.1.1'
  haggle: -any
  QuickCheck: '>2.4'
maintainer: tristan@ravit.ch
synopsis: A graph library offering mutable, immutable, and inductive graphs
changelog: |
  0.3 (2023-08-20)
  ----------------

  - Add `Functor` instances for `PatriciaTree` and `Ctx` (@RyanGlScott)
  - Support building with vector-0.13.* (@RyanGlScott)
  - Remove an unused dependency on monad-primitive (@RyanGlScott)
  - Add `replaceLabeledVertex` to the `InductiveGraph` interface (@kquick)
  - Fixed a bug in the dominators calculation (@kquick)

  0.2 (2022-05-08)
  ----------------

  - Exported the `vertexId` function to project an `Int` from a `Vertex`, which is useful for conversions to other formats (e.g., graphviz) (@benjaminselfridge)
  - Fixed a bug in the `BiDigraph` that prevented parallel edges from being added to the graph (@benjaminselfridge)
  - Added `Unbox` instances for `Vertex` and `Edge` (@bielr)
  - Added a `Bifunctor` instance for the `PatriciaTree` (@kquick)


  0.1.0.0 (2019-12-18)
  --------------------

  - Initial release
basic-deps:
  base: '>=4.5 && <5'
  ref-tf: '>=0.4 && <0.6'
  containers: '>=0.4'
  hashable: '>=1.2 && <1.5'
  deepseq: '>=1 && <2'
  vector-th-unbox: '>=0.2.1.3 && <0.3'
  primitive: '>=0.4 && <0.9'
  vector: '>=0.9 && <0.14'
all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
- '0.3'
author: Tristan Ravitch
latest: '0.3'
description-type: markdown
description: |
  # Overview
  ![Github Actions status](https://github.com/travitch/haggle/actions/workflows/haskell-ci.yml/badge.svg)

  Haggle is a graph library for Haskell.  It aims to support large graphs
  efficiently and compactly.  It differs from
  [fgl](http://hackage.haskell.org/package/fgl) in a few ways:
  - There are no partial functions in the API
  - There are multiple graph representations included
  - Mutable graphs can be constructed in IO or ST
  - Labels for both nodes and edges are optional

  The API is based on typeclasses to allow programs to be written generically and
  support multiple graph representations when possible.  Graphs can be mutable,
  immutable, or inductive.

  The mutable graph support is designed to allow graphs to be efficiently
  constructed in a mutable context and then frozen into a pure immutable form.
  There are multiple representations of mutable and immutable graphs to support
  different use cases (simple graphs, directed graphs, and bidirectional directed
  graphs).  The different representations allow users to make decisions on time
  and space tradeoffs based on their algorithmic needs.

  Inductive graphs (the fgl style) are also supported, while sharing some of the
  API with the compact immutable graphs.

  See the haddocks in Data.Graph.Haggle for information and examples on using the
  API.

  # TODO
  - Reach feature parity with the algorithms in fgl
  - Explore more graph representations
  - Explore graph serialization (the use of the opaque `Vertex` type makes it a bit tricky)
license-name: BSD-3-Clause
