homepage: https://github.com/stackbuilders/hapistrano
changelog-type: markdown
hash: 0b8a43083232f4cd08a746433d4df77a869fda3e8e9fd6d6de27a4e9a8849630
test-bench-deps:
  path: '>=0.5 && <0.7.1'
  base: '>=4.8 && <5.0'
  hapistrano: -any
  hspec: '>=2.0 && <3.0'
  filepath: '>=1.2 && <1.5'
  process: '>=1.4 && <1.7'
  silently: '>=1.2 && <1.3'
  mtl: '>=2.0 && <3.0'
  temporary: '>=1.1 && <1.4'
  QuickCheck: '>=2.5.1 && <3.0'
  path-io: '>=1.2 && <1.7'
  yaml: '>=0.8.16 && <0.12'
  directory: '>=1.2.5 && <1.4'
maintainer: jpaucar@stackbuilders.com
synopsis: A deployment library for Haskell applications
changelog: |
  ## 0.4.1.3
  ### Changed
  * Allow formatting-7.0

  ## 0.4.1.2
  ### Changed
  * Allow optparse-applicative-0.16.0.0

  ## 0.4.1.1
  ### Changed
  * Allow `ansi-terminal` 0.11

  ## 0.4.1.0
  ### Added
  * Support for GHC 8.10
  * Support for aeson-1.5

  ## 0.4.0.1
  ### Changed
  * Allow `time` 1.10
  * Correct the package to reenable Hapistrano in Stackage

  ## 0.4.0.0
  ### Added
  * Copy a directory's contents with `local_directory` instead of using _git_ with `repo` and `revision`.

  ### Changed
  * Update upper bounds for `path` and `path-io` packages.

  ## 0.3.10.1
  ### Added
  * Update Dockerfile and maintainer.

  ## 0.3.10.0
  ### Added
  * Colorize the output in the terminal.

  ## 0.3.9.4
  ### Added
  * Support for GHC 8.8
  * Support for ssh args in the config file.

  ## 0.3.9.3
  ### Changed
  * Support for optparse-applicative-0.15
  * Replace deprecated function "withProcess" to "withProcessTerm"
    and add the version of "typed-process-0.2.6.0" as extra dependency.

  ## 0.3.9.2
  ### Changed
  * Update Docker base image from alpine:3.7 to alpine:3.9

  ## 0.3.9.1
  ### Added
  * Add timestamp to output commands:
  ```
  [16:29:58,  2019-01-23 (-05)] INFO -- : $ find /tmp/hapistrano/releases/ -maxdepth 1 -type d
  /tmp/hapistrano/releases/
  /tmp/hapistrano/releases/20190123212933
  ```

  ## 0.3.9.0
  ### Added
  * Support to deploy to a host that has default `zsh` shell.
  * Support to deploy using a different shell. Currently supported: `zsh` and `bash`.
  * `linked_files` and `linked_dirs` to link files and directories located in the
  `{deploy_path}/shared/` directory.

  ## 0.3.8.0
  ### Added
  * `execWithInheritStdout` was added to `System.Hapistrano.Core` to stream output children's
  to the parent's `stdout`.

  ### Changed
  * `playScript` and `playScriptLocally` use `execWithInheritStdout` to stream children's
  stdout to parent's stdout.

  ## 0.3.7.0
  * Read `release-format` and `keep-releases` from the configuration file.

  ## 0.3.6.1
  * Loose upper bound for yaml 0.11

  ## 0.3.6.0
  * Add support to interpolate ENV variables in a configuration file.
  * Add support for GHC 8.6.1
  * Loose constraint for stm-2.5.0.0

  ## 0.3.5.10
  * Updated upper bound for yaml 0.10

  ## 0.3.5.9
  * Loose upper bound for path-io 1.4

  ## 0.3.5.8
  * Loose upper bound for yaml 0.9

  ## 0.3.5.7
  * Loose upper bound for aeson 1.4

  ## 0.3.5.6
  * Add Dockerfile

  ## 0.3.5.5
  * Adding tested compatibility with GHC 8.4

  ## 0.3.5.4
  * Support for temporary 1.3

  ## 0.3.5.3
  * Support for aeson 1.3

  ## 0.3.5.2
  * Loose uppers bounds for async

  ## 0.3.5.1
  * Standarize style
  * When showing version information also show git branch and commit

  ## 0.3.5.0
  * Add support for deploying to other Unix systems, besides GNU/Linux which
    didn't supported all the flags that Hapistrano was using. See issue #63

  ## 0.3.4.0
  * Use `git checkout` instead of `git reset` to set the release revision

  ## 0.3.3.0

  * Correct bounds for base. GHC support for versions older than 7.10 was dropped on 0.3.0.0
  * Add `run_locally` to run user defined commands locally before deployment. Thanks to Sibi (GitHub: psibi) for this contribution

  ## 0.3.2.4

  * Allow time 1.8
  * Allow process 1.6

  ## 0.3.2.3

  * Allow path-io 1.3

  ## 0.3.2.2

  * Allow optparse-applicative 0.14

  ## 0.3.2.1

  * Add support for help in subcommands. Thanks to Vanessa McHale (GitHub: vmchale) for this contribution

  ## 0.3.2.0

  * Fix `-v` switch for hap. Thanks to Sibi (GitHub: psibi) for this contribution
  * Add `vc_action` to control version control related tasks. Thanks to Sibi (GitHub: psibi) for this contribution

  ## 0.3.1.0

  * Fixed a bug with repos not being fetched properly.
  * Implemented concurrent deployment to multiple hosts.
  * Now completion tokens are dropped automatically like old releases.

  ## 0.3.0.1

  * Reduced verbosity of some commands to make reading logs easier.
  * Restart command is now invoked after activation of new release (as it
    should).
  * Fix a typo in flag that specifies SSH port for `scp`.
  * Ensure that containing directories for files and directories to copy
    exist before invoking `scp`.

  ## 0.3.0.0

  * Add proper set of dependency version constraints.
  * Use `optparse-applicative` to parse arguments.
  * Allow to specify non-standard SSH port.
  * Drop support for GHCs older than 7.10 (because Chris Done's `path` does
    not compile with them, see: https://github.com/chrisdone/path/issues/46).
  * Now Hapistrano uses `hap.yaml` file for all its configuration.
  * Added the ability to copy arbitrary files and directories verbatim from
    local machine to target host.

  ## 0.2.1.2

  * Add change log (#23).
  * Add `README.md` to extra source files.
  * Handle missing environment variables more graciously.
  * Allow GHC 8 and base 4.9.

  ## 0.2.1.1

  * Fix tests (#31).

  ## 0.2.1

  * Use Stack (#17).
  * Clean up package (#20).
  * Fix tests (#25).

  ## 0.2.0.2

  * GHC 7.10 support.

  ## 0.2.0.1

  * Refactoring and documentation improvements.

  ## 0.2.0.0

  * Various refactoring and relaxed dependency constraints.

  ## 0.1.0.2

  * Print error messages to `stderr`, return non-zero exit code on failure.

  ## 0.1.0.1

  * Initial release.
basic-deps:
  stm: '>=2.4 && <2.6'
  path: '>=0.5 && <0.8'
  base: '>=4.8 && <5.0'
  time: '>=1.5 && <1.11'
  hapistrano: -any
  filepath: '>=1.2 && <1.5'
  gitrev: '>=1.2 && <1.4'
  process: '>=1.4 && <1.7'
  async: '>=2.0.1.6 && <2.4'
  ansi-terminal: '>=0.9 && <0.12'
  formatting: '>=6.2 && <8.0'
  typed-process: '>=0.2 && <0.3'
  mtl: '>=2.0 && <3.0'
  transformers: '>=0.4 && <0.6'
  optparse-applicative: '>=0.11 && <0.17'
  aeson: '>=0.11 && <1.6'
  path-io: '>=1.2 && <1.7'
  yaml: '>=0.8.16 && <0.12'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.1
- 0.2.0.2
- 0.2.1
- 0.2.1.1
- 0.2.1.2
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
- 0.3.2.4
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
- 0.3.5.1
- 0.3.5.2
- 0.3.5.3
- 0.3.5.4
- 0.3.5.5
- 0.3.5.6
- 0.3.5.7
- 0.3.5.8
- 0.3.5.9
- 0.3.5.10
- 0.3.6.0
- 0.3.6.1
- 0.3.7.0
- 0.3.8.0
- 0.3.9.0
- 0.3.9.1
- 0.3.9.2
- 0.3.9.3
- 0.3.9.4
- 0.3.10.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.1.1
- 0.4.1.2
- 0.4.1.3
author: Justin Leitgeb
latest: 0.4.1.3
description-type: markdown
description: "[![Build Status](https://travis-ci.org/stackbuilders/hapistrano.svg?branch=master)](https://travis-ci.org/stackbuilders/hapistrano)\n[![Hackage
  version](https://img.shields.io/hackage/v/hapistrano.svg)](http://hackage.haskell.org/package/hapistrano)\n[![Docker
  Hub](https://img.shields.io/docker/build/stackbuilders/hapistrano.svg?style=flat)](https://hub.docker.com/r/stackbuilders/hapistrano)\n\n#
  Table of Contents\n\n * [Hapistrano](#hapistrano)\n * [Purpose](#purpose)\n * [How
  it Works](#how-it-works)\n * [Usage](#usage)\n    * [Environment Variables](#environment-variables)\n
  * [What to do when compiling on server is not viable](#what-to-do-when-compiling-on-server-is-not-viable)\n
  * [Deploying to multiple machines concurrently](#deploying-to-multiple-machines-concurrently)\n
  * [Docker](#docker)\n * [Nix](#nix)\n * [License](#license)\n * [Contributing](#contributing)\n
  \n \n# Hapistrano\n\nHapistrano is a deployment library for Haskell applications
  similar to\nRuby's [Capistrano](http://capistranorb.com/).\n\n## Purpose\n\nWe created
  Hapistrano because:\n\n* Deploys should be simple, but as close to atomic as possible
  (eg,\n  they shouldn't require much application downtime).\n* Rollback should be
  trivial to achieve to bring the application back\n  to the last-deployed state.\n*
  Deploys shouldn't fail because of dependency problems.\n\n## How it Works\n\nHapistrano
  (like Capistrano for Ruby) deploys applications to a new\ndirectory marked with
  a timestamp on the remote host. It creates this\nnew directory quickly by placing
  a git repository for caching purposes\non the remote server.\n\nWhen the build process
  completes, it switches a symlink to the `current`\nrelease directory, and optionally
  restarts the web server.\n\nBy default, Hapistrano keeps the last five releases
  on the target host\nfilesystem and deletes previous releases to avoid filling up
  the disk.\n\n## Usage\n\nHapistrano 0.4.0.0 looks for a configuration file called
  `hap.yaml` that\ntypically looks like this:\n\n```yaml\ndeploy_path: '/var/projects/my-project'\nhost:
  myserver.com\nport: 2222\n# To perform version control operations\nrepo: 'https://github.com/stackbuilders/hapistrano.git'\nrevision:
  origin/master\n# To copy the contents of the directory\nlocal_directory: '/tmp/my-project'\nbuild_script:\n
  \ - stack setup\n  - stack build\nrestart_command: systemd restart my-app-service\n```\n\nThe
  following parameters are required:\n\n* `deploy_path` — the root of the deploy target
  on the remote host.\n* Related to the `source` of the repository, you have the following
  options:\n  - _Git repository_ **default** — consists of two parameters. When these
  are set,\n    hapistrano will perform version control related operations.\n    **Note:**
  Only GitHub is supported.\n    * `repo` — the origin repository.\n    * `revision`
  — the SHA1 or branch to deploy. If a branch, you will need to\n      specify it
  as `origin/branch_name` due to the way that the cache repo is\n      configured.\n
  \ * `local_directory` — when this parameter is set, hapistrano will copy the\n    contents
  of the directory.\n\nThe following parameters are *optional*:\n\n* `host` — the
  target host, if missing, `localhost` will be assumed (which\n  is useful for testing
  and playing with `hap` locally).\n* `port` — SSH port number to use. If missing,
  22 will be used.\n* `shell` — Shell to use. Currently supported: `zsh` ans `bash`.
  If missing, `Bash` will be used.\n* `ssh_args` — Optional ssh arguments. Only `-p`
  is passed via the `port` variable.\n* `build_script` — instructions how to build
  the application in the form of\n  shell commands.\n* `restart_command` — if you
  need to restart a remote web server after a\n  successful rollback, specify the
  command that you use in this variable. It\n  will be run after both deploy and rollback.\n*
  `vc_action` - Controls if version control related activity should\n  take place.
  It defaults to true. When you don't want activity like\n  cloning, fetching etc.
  to take place, set this to `false`.\n* `linux` - Specify, whether or not, the target
  system where Hapistrano will\n  deploy to is a GNU/Linux or other UNIX (g.e. BSD,
  Mac). This is set to `true`\n  by default so unless the target system is not GNU/Linux,
  this should not be\n  necessary. The platform where Hapistrano is running won't
  affect the\n  available options for commands (g.e. A Mac deploying to a Ubuntu machine,\n
  \ doesn't need this flag)\n* `release_format` - The release timestamp format, the\n
  \ '--release-format' argument passed via the CLI takes precedence over this\n  value.
  If neither CLI or configuration file value is specified, it defaults\n  to 'short'\n*
  `keep_releases` - The number of releases to keep, the\n  '--keep-releases' argument
  passed via the CLI takes precedence over this\n  value. If neither CLI or configuration
  file value is specified, it defaults\n  to '5'\n* `linked_files:`- Listed files
  that will be symlinked from the `{deploy_path}/shared` folder\ninto each release
  directory during deployment. Can be used for configuration files\nthat need to be
  persisted (e.g. dotenv files).  **NOTE:** The directory structure _must_\nbe similar
  in your release directories in case you need to link a file inside a\nnested directory
  (e.g. `shared/foo/file.txt`).\n* `linked_dirs:`- Listed directories that will be
  symlinked from the `{deploy_path}/shared` folder\ninto each release directory during
  deployment. Can be used for data directories\nthat need to be persisted (e.g. upload
  directories). **NOTE:** Do not add a slash `/`\nat the end of the directory (e.g.
  `foo/`) because we use `parseRelFile` to create\nthe symlink.\n* `run_locally:`-
  Instructions to run locally on your machine in the\n  form of shell commands. Example:\n\n```\nrun_locally:\n
  \ - pwd\n  - bash deploy.sh\n```\n\nNote how we are even able to execute a bash
  script named `deploy.sh`\nabove. Be sure to use `set -e` in your bash script to
  avoid\nheadaches. Hapistrano will stop the execution on non zero exit\ncodes. Without
  the usage of `set -e`, there is a possiblity that your\nbash script may return a
  zero exit code even if your intermediate\ncommand resulted in an error.\n\nAfter
  creating a configuration file as above, deploying is as simple as:\n\n```bash\n$
  hap deploy\n```\n\nRollback is also trivial:\n\n```bash\n$ hap rollback # to rollback
  to previous successful deploy\n$ hap rollback -n 2 # go two deploys back in time,
  etc.\n```\n\n### Environment Variables\n\nConfiguration files are parsed using\n[loadYamlSettings](http://hackage.haskell.org/package/yaml-0.10.2.0/docs/Data-Yaml-Config.html#v:loadYamlSettings),\ntherefore,
  variable substitution is supported. Considering the following configuration file:\n\n```yaml\nrevision:
  \"_env:HAPISTRANO_REVISION:origin/master\n...\n```\n\nThe `revision` value could
  be overwritten as follows:\n\n```sh\nHAPISTRANO_REVISION=origin/feature_branch hap
  deploy\n```\n\n## What to do when compiling on server is not viable\n\nSometimes
  the target machine (server) is not capable of compiling your\napplication because
  e.g. it has not enough memory and GHC exhausts it all.\nYou can copy pre-compiled
  files from local machine or CI server using\n`copy_files` and `copy_dirs` parameters:\n\n```haskell\ncopy_files:\n
  \ - src: '/home/stackbuilders/my-file.txt'\n    dest: 'my-file.txt'\ncopy_dirs:\n
  \ - src: .stack-work\n    dest: .stack-work\n```\n\n`src` maybe absolute or relative,
  it's path to file or directory on local\nmachine, `dest` may only be relative (it's
  expanded relatively to cloned\nrepo) and specifies where to put the files/directories
  on target machine.\nDirectories and files with clashing names will be overwritten.
  Directories\nare copied recursively.\n\n## Deploying to multiple machines concurrently\n\nBeginning
  with Hapistrano 0.3.1.0 it's possible to deploy to several\nmachines concurrently.
  The only things you need to do is to adjust your\nconfiguration file and use `targets`
  parameter instead of `host` and `port`,\nlike this:\n\n```haskell\ntargets:\n  -
  host: myserver-a.com\n    port: 2222\n  - host: myserver-b.com\n# the rest is the
  same…\n```\n\nA few things to note here:\n\n* `host` item is required for every
  target, but `port` may be omitted and\n  then it defaults to `22`.\n\n* The deployment
  will run concurrently and finish when interactions with all\n  targets have finished
  either successfully or not. If at least one\n  interaction was unsuccessful, the
  `hap` tool will exit with non-zero exit\n  code.\n\n* The log is printed in such
  a way that messages from several machines get\n  intermixed, but it's guaranteed
  that they won't overlap (printing itself\n  is sequential) and the headers will
  tell you exactly which machine was\n  executing which command.\n\nIf you don't specify
  `host` and `targets`, `hap` will assume `localhost` as\nusually, which is mainly
  useful for testing.\n\n## Docker\n\nIf you would like to use Docker, there is a
  lightweight image\navailable on [Docker Hub](https://hub.docker.com/r/stackbuilders/hapistrano/).\n\n##
  Nix\n\nIf you want to use Nix for building Hapistrano, the required release.nix
  and default.nix are available.\n\nFor installing the hap binary in your local path:\n```bash\nnix-env
  -i hapistrano -f release.nix\n```\nFor developing Hapistrano with Nix, you can create
  a development environment using:\n```bash\nnix-shell --attr env release.nix\n```\n\nFor
  just building Hapistrano, you just:\n```bash\nnix-build release.nix\n```\n\n\n##
  License\n\nMIT, see [the LICENSE file](LICENSE).\n\n## Contributing\n\nPull requests
  for modifications to this program are welcome. Fork and\nopen a PR. Feel free to
  [email me](mailto:justin@stackbuilders.com) if\nyou have questions about what may
  be accepted before working on a PR.\n\nIf you're looking for a place to start, you
  may want to check the\n[open issue](https://github.com/stackbuilders/hapistrano/issues).\n"
license-name: MIT
