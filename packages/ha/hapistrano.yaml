homepage: https://github.com/stackbuilders/hapistrano
changelog-type: markdown
hash: ff645120791180ebebe3807d5519f9dc79359f53b7f7a94e42631c0bcc826102
test-bench-deps:
  path: '>=0.5 && <0.9'
  base: '>=4.9 && <5.0'
  hapistrano: -any
  hspec: '>=2.0 && <3.0'
  filepath: '>=1.2 && <1.5'
  process: '>=1.4 && <1.7'
  silently: '>=1.2 && <1.3'
  mtl: '>=2.0 && <3.0'
  temporary: '>=1.1 && <1.4'
  QuickCheck: '>=2.5.1 && <3.0'
  path-io: '>=1.2 && <1.7'
  yaml: '>=0.8.16 && <0.12'
  directory: '>=1.2.5 && <1.4'
maintainer: hackage@stackbuilders.com
synopsis: A deployment library for Haskell applications
changelog: |
  ## 0.4.5.0
  ### Added
  * New commands that let you enable/disable a maintenance mode
  * New configuration variables:
    *  `maintenance_directory:`- The name of the directory on which the maintenance file will be placed. `{deploy_path}/{maintenance_directory}`. The default directory name is `maintenance`
    * `maintenance_filename:`- The name of the file that is going to be created in the maintenance_directory. It has to have the `.html` extension to be seen in the browser. `{deploy_path}/{maintenance_directory}/{maintenance_filename}`. The default filename is `maintenance.html`

  ## 0.4.4.0
  ### Added
  * Ability to keep all failed releases or just one ([issue #154](https://github.com/stackbuilders/hapistrano/issues/154))
    * Config Option: `keep_one_failed`
    * CLI Option: `--keep-one-failed`

  ### Modified
  * Some types and functions were modified to support the new features (e.g. `Hapistrano`, `runHapistrano`, etc.)

  ## 0.4.3.1
  ### Added
  * Add support for aeson 2.0

  ## 0.4.3.0
  ### Added
  * Add support for GHC 9.0
  * Docker image is built on a newer compiler, cabal and alpine version
  ### Removed
  * Official support for GHC versions older than 8.6

  ## 0.4.2.0
  ### Added
  * Add support for working directory

  ### Removed
  * GHC support for versions older than 8.0. Bounds for base corrected

  ## 0.4.1.4
  ### Changed
  * Bump path version upper constraint to 0.9

  ## 0.4.1.3
  ### Changed
  * Allow formatting-7.0

  ## 0.4.1.2
  ### Changed
  * Allow optparse-applicative-0.16.0.0

  ## 0.4.1.1
  ### Changed
  * Allow `ansi-terminal` 0.11

  ## 0.4.1.0
  ### Added
  * Support for GHC 8.10
  * Support for aeson-1.5

  ## 0.4.0.1
  ### Changed
  * Allow `time` 1.10
  * Correct the package to reenable Hapistrano in Stackage

  ## 0.4.0.0
  ### Added
  * Copy a directory's contents with `local_directory` instead of using _git_ with `repo` and `revision`.

  ### Changed
  * Update upper bounds for `path` and `path-io` packages.

  ## 0.3.10.1
  ### Added
  * Update Dockerfile and maintainer.

  ## 0.3.10.0
  ### Added
  * Colorize the output in the terminal.

  ## 0.3.9.4
  ### Added
  * Support for GHC 8.8
  * Support for ssh args in the config file.

  ## 0.3.9.3
  ### Changed
  * Support for optparse-applicative-0.15
  * Replace deprecated function "withProcess" to "withProcessTerm"
    and add the version of "typed-process-0.2.6.0" as extra dependency.

  ## 0.3.9.2
  ### Changed
  * Update Docker base image from alpine:3.7 to alpine:3.9

  ## 0.3.9.1
  ### Added
  * Add timestamp to output commands:
  ```
  [16:29:58,  2019-01-23 (-05)] INFO -- : $ find /tmp/hapistrano/releases/ -maxdepth 1 -type d
  /tmp/hapistrano/releases/
  /tmp/hapistrano/releases/20190123212933
  ```

  ## 0.3.9.0
  ### Added
  * Support to deploy to a host that has default `zsh` shell.
  * Support to deploy using a different shell. Currently supported: `zsh` and `bash`.
  * `linked_files` and `linked_dirs` to link files and directories located in the
  `{deploy_path}/shared/` directory.

  ## 0.3.8.0
  ### Added
  * `execWithInheritStdout` was added to `System.Hapistrano.Core` to stream output children's
  to the parent's `stdout`.

  ### Changed
  * `playScript` and `playScriptLocally` use `execWithInheritStdout` to stream children's
  stdout to parent's stdout.

  ## 0.3.7.0
  * Read `release-format` and `keep-releases` from the configuration file.

  ## 0.3.6.1
  * Loose upper bound for yaml 0.11

  ## 0.3.6.0
  * Add support to interpolate ENV variables in a configuration file.
  * Add support for GHC 8.6.1
  * Loose constraint for stm-2.5.0.0

  ## 0.3.5.10
  * Updated upper bound for yaml 0.10

  ## 0.3.5.9
  * Loose upper bound for path-io 1.4

  ## 0.3.5.8
  * Loose upper bound for yaml 0.9

  ## 0.3.5.7
  * Loose upper bound for aeson 1.4

  ## 0.3.5.6
  * Add Dockerfile

  ## 0.3.5.5
  * Adding tested compatibility with GHC 8.4

  ## 0.3.5.4
  * Support for temporary 1.3

  ## 0.3.5.3
  * Support for aeson 1.3

  ## 0.3.5.2
  * Loose uppers bounds for async

  ## 0.3.5.1
  * Standarize style
  * When showing version information also show git branch and commit

  ## 0.3.5.0
  * Add support for deploying to other Unix systems, besides GNU/Linux which
    didn't supported all the flags that Hapistrano was using. See issue #63

  ## 0.3.4.0
  * Use `git checkout` instead of `git reset` to set the release revision

  ## 0.3.3.0

  * Correct bounds for base. GHC support for versions older than 7.10 was dropped on 0.3.0.0
  * Add `run_locally` to run user defined commands locally before deployment. Thanks to Sibi (GitHub: psibi) for this contribution

  ## 0.3.2.4

  * Allow time 1.8
  * Allow process 1.6

  ## 0.3.2.3

  * Allow path-io 1.3

  ## 0.3.2.2

  * Allow optparse-applicative 0.14

  ## 0.3.2.1

  * Add support for help in subcommands. Thanks to Vanessa McHale (GitHub: vmchale) for this contribution

  ## 0.3.2.0

  * Fix `-v` switch for hap. Thanks to Sibi (GitHub: psibi) for this contribution
  * Add `vc_action` to control version control related tasks. Thanks to Sibi (GitHub: psibi) for this contribution

  ## 0.3.1.0

  * Fixed a bug with repos not being fetched properly.
  * Implemented concurrent deployment to multiple hosts.
  * Now completion tokens are dropped automatically like old releases.

  ## 0.3.0.1

  * Reduced verbosity of some commands to make reading logs easier.
  * Restart command is now invoked after activation of new release (as it
    should).
  * Fix a typo in flag that specifies SSH port for `scp`.
  * Ensure that containing directories for files and directories to copy
    exist before invoking `scp`.

  ## 0.3.0.0

  * Add proper set of dependency version constraints.
  * Use `optparse-applicative` to parse arguments.
  * Allow to specify non-standard SSH port.
  * Drop support for GHCs older than 7.10 (because Chris Done's `path` does
    not compile with them, see: https://github.com/chrisdone/path/issues/46).
  * Now Hapistrano uses `hap.yaml` file for all its configuration.
  * Added the ability to copy arbitrary files and directories verbatim from
    local machine to target host.

  ## 0.2.1.2

  * Add change log (#23).
  * Add `README.md` to extra source files.
  * Handle missing environment variables more graciously.
  * Allow GHC 8 and base 4.9.

  ## 0.2.1.1

  * Fix tests (#31).

  ## 0.2.1

  * Use Stack (#17).
  * Clean up package (#20).
  * Fix tests (#25).

  ## 0.2.0.2

  * GHC 7.10 support.

  ## 0.2.0.1

  * Refactoring and documentation improvements.

  ## 0.2.0.0

  * Various refactoring and relaxed dependency constraints.

  ## 0.1.0.2

  * Print error messages to `stderr`, return non-zero exit code on failure.

  ## 0.1.0.1

  * Initial release.
basic-deps:
  stm: '>=2.4 && <2.6'
  path: '>=0.5 && <0.9'
  base: '>=4.9 && <5.0'
  time: '>=1.5 && <1.11'
  hapistrano: -any
  filepath: '>=1.2 && <1.5'
  gitrev: '>=1.2 && <1.4'
  process: '>=1.4 && <1.7'
  async: '>=2.0.1.6 && <2.4'
  ansi-terminal: '>=0.9 && <0.12'
  formatting: '>=6.2 && <8.0'
  typed-process: '>=0.2 && <0.3'
  mtl: '>=2.0 && <3.0'
  transformers: '>=0.4 && <0.6'
  optparse-applicative: '>=0.11 && <0.17'
  aeson: '>=2.0 && <3.0'
  path-io: '>=1.2 && <1.7'
  yaml: '>=0.11.7 && <0.12'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.1
- 0.2.0.2
- 0.2.1
- 0.2.1.1
- 0.2.1.2
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
- 0.3.2.4
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
- 0.3.5.1
- 0.3.5.2
- 0.3.5.3
- 0.3.5.4
- 0.3.5.5
- 0.3.5.6
- 0.3.5.7
- 0.3.5.8
- 0.3.5.9
- 0.3.5.10
- 0.3.6.0
- 0.3.6.1
- 0.3.7.0
- 0.3.8.0
- 0.3.9.0
- 0.3.9.1
- 0.3.9.2
- 0.3.9.3
- 0.3.9.4
- 0.3.10.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.1.1
- 0.4.1.2
- 0.4.1.3
- 0.4.1.4
- 0.4.2.0
- 0.4.3.0
- 0.4.4.0
- 0.4.5.0
author: Justin Leitgeb
latest: 0.4.5.0
description-type: markdown
description: |
  [![CI](https://github.com/stackbuilders/hapistrano/actions/workflows/ci.yml/badge.svg)](https://github.com/stackbuilders/hapistrano/actions/workflows/ci.yml)
  [![Docker](https://github.com/stackbuilders/hapistrano/actions/workflows/docker.yml/badge.svg)](https://github.com/stackbuilders/hapistrano/actions/workflows/docker.yml)
  [![Hackage version](https://img.shields.io/hackage/v/hapistrano.svg)](http://hackage.haskell.org/package/hapistrano)

  # Hapistrano

   * [Description](#description)
   * [Purpose](#purpose)
   * [How it Works](#how-it-works)
   * [Usage](#usage)
      * [Environment Variables](#environment-variables)
   * [What to do when compiling on server is not viable](#what-to-do-when-compiling-on-server-is-not-viable)
   * [Deploying to multiple machines concurrently](#deploying-to-multiple-machines-concurrently)
   * [Docker](#docker)
   * [Nix](#nix)
   * [Notes](#notes)
   * [License](#license)
   * [Contributing](#contributing)


  # Description

  Hapistrano is a deployment library for Haskell applications similar to
  Ruby's [Capistrano](http://capistranorb.com/).

  ## Purpose

  We created Hapistrano because:

  * Deploys should be simple, but as close to atomic as possible (eg,
    they shouldn't require much application downtime).
  * Rollback should be trivial to achieve to bring the application back
    to the last-deployed state.
  * Deploys shouldn't fail because of dependency problems.

  ## How it Works

  Hapistrano (like Capistrano for Ruby) deploys applications to a new
  directory marked with a timestamp on the remote host. It creates this
  new directory quickly by placing a git repository for caching purposes
  on the remote server.

  When the build process completes, it switches a symlink to the `current`
  release directory, and optionally restarts the web server.

  By default, Hapistrano keeps the last five releases on the target host
  filesystem and deletes previous releases to avoid filling up the disk.

  ## Usage

  Hapistrano 0.4.0.0 looks for a configuration file called `hap.yaml` that
  typically looks like this:

  ```yaml
  deploy_path: '/var/projects/my-project'
  host: myserver.com
  port: 2222
  # To perform version control operations
  repo: 'https://github.com/stackbuilders/hapistrano.git'
  revision: origin/master
  # To copy the contents of the directory
  local_directory: '/tmp/my-project'
  build_script:
    - stack setup
    - stack build
  restart_command: systemd restart my-app-service
  ```

  The following parameters are required:

  * `deploy_path` — the root of the deploy target on the remote host.
  * Related to the `source` of the repository, you have the following options:
    - _Git repository_ **default** — consists of two parameters. When these are set,
      hapistrano will perform version control related operations.
      **Note:** Only GitHub is supported.
      * `repo` — the origin repository.
      * `revision` — the SHA1 or branch to deploy. If a branch, you will need to
        specify it as `origin/branch_name` due to the way that the cache repo is
        configured.
    * `local_directory` — when this parameter is set, hapistrano will copy the
      contents of the directory.

  The following parameters are *optional*:

  * `host` — the target host, if missing, `localhost` will be assumed (which
    is useful for testing and playing with `hap` locally).
  * `port` — SSH port number to use. If missing, 22 will be used.
  * `shell` — Shell to use. Currently supported: `zsh` ans `bash`. If missing, `Bash` will be used.
  * `ssh_args` — Optional ssh arguments. Only `-p` is passed via the `port` variable.
  * `build_script` — instructions how to build the application in the form of
    shell commands.
  * `restart_command` — if you need to restart a remote web server after a
    successful rollback, specify the command that you use in this variable. It
    will be run after both deploy and rollback.
  * `vc_action` - Controls if version control related activity should
    take place. It defaults to true. When you don't want activity like
    cloning, fetching etc. to take place, set this to `false`.
  * `linux` - Specify, whether or not, the target system where Hapistrano will
    deploy to is a GNU/Linux or other UNIX (g.e. BSD, Mac). This is set to `true`
    by default so unless the target system is not GNU/Linux, this should not be
    necessary. The platform where Hapistrano is running won't affect the
    available options for commands (g.e. A Mac deploying to an Ubuntu machine,
    doesn't need this flag)
  * `release_format` - The release timestamp format, the
    '--release-format' argument passed via the CLI takes precedence over this
    value. If neither CLI nor configuration file value is specified, it defaults
    to 'short'
  * `keep_releases` - The number of releases to keep, the
    '--keep-releases' argument passed via the CLI takes precedence over this
    value. If neither CLI nor configuration file value is specified, it defaults
    to '5'
  * `keep_one_failed` - A boolean specifying whether to keep all failed releases
    or just one (the latest failed release), the '--keep-one-failed' flag passed via
    the CLI takes precedence over this value. If neither CLI nor configuration file value is specified,
    it defaults to false (i.e. keep all failed releases).
  * `linked_files:`- Listed files that will be symlinked from the `{deploy_path}/shared` folder
  into each release directory during deployment. Can be used for configuration files
  that need to be persisted (e.g. dotenv files).  **NOTE:** The directory structure _must_
  be similar in your release directories in case you need to link a file inside a
  nested directory (e.g. `shared/foo/file.txt`).
  * `linked_dirs:`- Listed directories that will be symlinked from the `{deploy_path}/shared` folder
  into each release directory during deployment. Can be used for data directories
  that need to be persisted (e.g. upload directories). **NOTE:** Do not add a slash `/`
  at the end of the directory (e.g. `foo/`) because we use `parseRelFile` to create
  the symlink.
  * `run_locally:`- Instructions to run locally on your machine in the
    form of shell commands. Example:

  ```
  run_locally:
    - pwd
    - bash deploy.sh
  ```

  Note how we are even able to execute a bash script named `deploy.sh`
  above. Be sure to use `set -e` in your bash script to avoid
  headaches. Hapistrano will stop the execution on non-zero exit
  codes. Without the usage of `set -e`, there is a possibility that your
  bash script may return a zero exit code even if your intermediate
  command resulted in an error.

  After creating a configuration file as above, deploying is as simple as:

  ```bash
  $ hap deploy
  ```

  Rollback is also trivial:

  ```bash
  $ hap rollback # to rollback to previous successful deploy
  $ hap rollback -n 2 # go two deploys back in time, etc.
  ```
  * `maintenance_directory:`- The name of the directory on which the maintenance file will be placed. `{deploy_path}/{maintenance_directory}`. The default directory name is `maintenance`
  * `maintenance_filename:`- The name of the file that is going to be created in the maintenance_directory. It has to have the `.html` extension to be seen in the browser. `{deploy_path}/{maintenance_directory}/{maintenance_filename}`. The default filename is `maintenance.html`

  ### Environment Variables

  Configuration files are parsed using
  [loadYamlSettings](http://hackage.haskell.org/package/yaml-0.10.2.0/docs/Data-Yaml-Config.html#v:loadYamlSettings),
  therefore, variable substitution is supported. Considering the following configuration file:

  ```yaml
  revision: "_env:HAPISTRANO_REVISION:origin/master
  ...
  ```

  The `revision` value could be overwritten as follows:

  ```sh
  HAPISTRANO_REVISION=origin/feature_branch hap deploy
  ```

  ## What to do when compiling on server is not viable

  Sometimes the target machine (server) is not capable of compiling your
  application because e.g. it has not enough memory and GHC exhausts it all.
  You can copy pre-compiled files from local machine or CI server using
  `copy_files` and `copy_dirs` parameters:

  ```haskell
  copy_files:
    - src: '/home/stackbuilders/my-file.txt'
      dest: 'my-file.txt'
  copy_dirs:
    - src: .stack-work
      dest: .stack-work
  ```

  `src` maybe absolute or relative, it's path to file or directory on local
  machine, `dest` may only be relative (it's expanded relatively to cloned
  repo) and specifies where to put the files/directories on target machine.
  Directories and files with clashing names will be overwritten. Directories
  are copied recursively.

  ## Deploying to multiple machines concurrently

  Beginning with Hapistrano 0.3.1.0 it's possible to deploy to several
  machines concurrently. The only things you need to do is to adjust your
  configuration file and use `targets` parameter instead of `host` and `port`,
  like this:

  ```haskell
  targets:
    - host: myserver-a.com
      port: 2222
    - host: myserver-b.com
  # the rest is the same…
  ```

  A few things to note here:

  * `host` item is required for every target, but `port` may be omitted and
    then it defaults to `22`.

  * The deployment will run concurrently and finish when interactions with all
    targets have finished either successfully or not. If at least one
    interaction was unsuccessful, the `hap` tool will exit with non-zero exit
    code.

  * The log is printed in such a way that messages from several machines get
    intermixed, but it's guaranteed that they won't overlap (printing itself
    is sequential) and the headers will tell you exactly which machine was
    executing which command.

  If you don't specify `host` and `targets`, `hap` will assume `localhost` as
  usually, which is mainly useful for testing.

  ## Docker

  Docker images hosted on [Docker
  Hub](https://hub.docker.com/r/stackbuilders/hapistrano) are **no longer up to
  date**, newer versions are published to [GitHub's Docker
  Registry](https://github.com/stackbuilders/hapistrano/pkgs/container/hapistrano).

  ## Nix

  If you want to use Nix for building Hapistrano, the required release.nix and default.nix are available.

  For installing the hap binary in your local path:
  ```bash
  nix-env -i hapistrano -f release.nix
  ```
  For developing Hapistrano with Nix, you can create a development environment using:
  ```bash
  nix-shell --attr env release.nix
  ```

  For just building Hapistrano, you just:
  ```bash
  nix-build release.nix
  ```
  ## Enable/disable maintenance mode

  Present a maintenance page to visitors. Disables your application's web interface by writing a {maintenance_filename} file to each web server. The servers must be configured to detect the presence of this file, and if it is present, always display it instead of performing the request.

  The maintenance page will just say the site is down for maintenance, and will be back shortly.

  To enable maintenance mode run:
  ```bash
  hapistrano maintenance enable
  ```
  Disabling maintenance mode will remove the file from the {maintenance_directory} it can be done with the following command:

  ```bash
  hapistrano maintenance disable
  ```

  ## Notes

  * Hapistrano is not supported on Windows. Please check: [Issue #96](https://github.com/stackbuilders/hapistrano/issues/96).

  ## License

  MIT, see [the LICENSE file](LICENSE).

  ## Contributing

  Pull requests for modifications to this program are welcome. Fork and
  open a PR. Feel free to [email me](mailto:justin@stackbuilders.com) if
  you have questions about what may be accepted before working on a PR.

  If you're looking for a place to start, you may want to check the
  [open issue](https://github.com/stackbuilders/hapistrano/issues).
license-name: MIT
