homepage: https://github.com/twesterhout/halide-haskell
changelog-type: markdown
hash: 7745cdd8348be5aec08741a7fb34e8330e9a840370a5088e0ffaa6dbf7a9304f
test-bench-deps:
  halide-haskell: -any
  inline-c: -any
  base: '>=4.16.0.0 && <5'
  hspec: -any
  text: -any
  HUnit: -any
  inline-c-cpp: -any
  QuickCheck: -any
  vector: -any
maintainer: Tom Westerhout <14264576+twesterhout@users.noreply.github.com>
synopsis: Haskell bindings to Halide
changelog: |
  # Changelog

  `halide-haskell` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/twesterhout/halide-haskell/releases
basic-deps:
  halide-haskell: -any
  bytestring: '>=0.11.1.0 && <0.12'
  inline-c: '>=0.9.1.6 && <0.10'
  unix: '>=2.7.2.2 && <3.0'
  base: '>=4.16.0.0 && <5'
  text: '>=1.2.5.0 && <3.0'
  filepath: '>=1.4.2.1 && <2.0'
  constraints: '>=0.13.4 && <0.14'
  inline-c-cpp: '>=0.5.0.0 && <0.6'
  temporary: '>=1.3 && <2.0'
  template-haskell: '>=2.18.0.0 && <3.0'
  primitive: '>=0.7.3.0 && <0.8'
  vector: '>=0.12.3.0 && <0.13'
all-versions:
- 0.0.1.0
author: Tom Westerhout
latest: 0.0.1.0
description-type: markdown
description: "# halide-haskell\n\n[![GitHub CI](https://github.com/twesterhout/halide-haskell/actions/workflows/ci.yml/badge.svg)](https://github.com/twesterhout/halide-haskell/actions/workflows/ci.yml)\n[![Hackage](https://img.shields.io/hackage/v/halide-haskell.svg?logo=haskell)](https://hackage.haskell.org/package/halide-haskell-0.0.1.0/candidate)\n[![BSD-3-Clause
  license](https://img.shields.io/badge/license-BSD--3--Clause-blue.svg)](LICENSE)\n\n[Halide](https://halide-lang.org/)
  is a programming language designed to make\nit easier to write high-performance
  image and array processing code on modern\nmachines. Rather than being a standalone
  programming language, Halide is\nembedded in C++. This means you write C++ code
  that builds an in-memory\nrepresentation of a Halide pipeline using Halide's C++
  API. You can then\ncompile this representation to an object file, or JIT-compile
  it and run it in\nthe same process.\n\n**This package provides Haskell bindings
  that allow to write Halide embedded in\nHaskell without C++** \U0001F60B.\n\n  -
  [Tutorials](https://github.com/twesterhout/halide-haskell/tree/master/tutorials)\n
  \ - [Reference documentation](https://hackage.haskell.org/package/halide-haskell-0.0.1.0)\n\n##
  \U0001F680 Getting started\n\nAs a simple example, here's how you could implement
  array addition with halide-haskell:\n\n```haskell\n{-# LANGUAGE AllowAmbiguousTypes,
  DataKinds, OverloadedStrings #-}\nimport Language.Halide\n\n-- The algorithm\nmkArrayPlus
  = compile $ \\a b -> do\n  -- Create an index variable\n  i <- mkVar \"i\"\n  --
  Define the resulting function. We call it \"out\".\n  -- In pseudocode it's equivalent
  to the following: out[i] = a[i] + b[i]\n  out <- define \"out\" i $ a ! i + b !
  i\n  -- Perform a fancy optimization and use SIMD: we split the loop over i into\n
  \ -- an inner and an outer loop and then vectorize the inner loop\n  inner <- mkVar
  \"inner\"\n  split TailAuto i (i, inner) 4 out >>= vectorize inner\n\n-- Example
  usage of our Halide pipeline\nmain :: IO ()\nmain = do\n  let a, b :: [Float]\n
  \     a = [1, 2, 3, 4, 5]\n      b = [6, 7, 8, 9, 10]\n  -- Compile the code\n  arrayPlus
  <- mkArrayPlus\n  -- We tell Halide to treat our list as a one-dimensional buffer\n
  \ withHalideBuffer @1 @Float a $ \\a' ->\n    withHalideBuffer b $ \\b' ->\n      --
  allocate a temporary buffer for the output\n      allocaCpuBuffer [length a] $ \\out'
  -> do\n        -- execute the kernel -- it is a normal function call!\n        arrayPlus
  a' b' out'\n        -- print the result\n        print =<< peekToList out'\n```\n\nFor
  more examples, have a look a the [tutorials](https://github.com/twesterhout/halide-haskell/tree/master/tutorials).\n\n##
  \U0001F528 Contributing\n\nCurrently, the best way to get started is to use Nix:\n\n```sh\nnix
  develop\n```\n\nThis will drop you into a shell with all the necessary tools to
  build the code such that you can do\n\n```sh\ncabal build\n```\n\nand\n\n```sh\ncabal
  test\n```\n"
license-name: BSD-3-Clause
