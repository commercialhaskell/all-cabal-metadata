all-versions:
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.4
- 0.3.2
- 0.3.3
- 0.4.1
- 0.4.2
- 0.5.0
- 0.5.1
- 0.6.0
- 0.6.1
author: Sergey S Lymar <sergey.lymar@gmail.com>
basic-deps:
  base: '>=4.4 && <4.11'
  blaze-builder: <0.5
  bytestring: <0.11
  containers: <0.6
  directory: <1.4
  filepath: <1.5
  hastache: '>=0'
  ieee754: <0.9
  mtl: '>=2 && <2.3'
  process: <1.7
  syb: <0.8
  text: <1.2.5.0
  transformers: <0.6
changelog: |
  # 0.6.1

  - Fixing documentation typos
  - Implementing basic context merging (see
    <https://github.com/lymar/hastache/issues/31>)
  - `mkGenericContext'` takes an additional `(String -> String)`
    argument which is applied to record field names, much like aeson's
    `fieldLabelModifier`
  - Removing unnecessary `utf8-string` dependency
  - Implementing the generic context creation for `Maybe` (see
    <https://github.com/lymar/hastache/issues/38> and
    `nestedPolyGenericContextTest` test), `Either`, `()`, and `Version`.
  - `mkReadme` is now officially an executable
  - Big change: custom extensions for generic contexts (should solve
    #30). See the documentation for `Text.Hastache.Context` and the
    `genericCustom.hs` example.
  - Making Hastache work with new base-4.8 (see #41)

  Thanks to: Tobias Florek, Edsko de Vries, Janne Hellsten, @clinty,
  Stefan Kersten, Herbert Valerio Riedel, and others

  # 0.6.0

  - Switching from lazy ByteString to lazy Text
  - Support for multiple constructors in generic contexts (issue #16)
  - Additional `MuVar` instances (`Maybe`, `Either`, `()`)
changelog-type: text
description: "# Hastache\n\nHaskell implementation of [Mustache templates](http://mustache.github.com/)\n\n##
  Installation\n\n    cabal update\n    cabal install hastache\n\n## Usage\n\nRead
  [Mustache documentation](http://mustache.github.com/mustache.5.html) for template
  syntax.\n\nSee [Hastache hackage page](http://hackage.haskell.org/package/hastache).\n\n###
  Examples\n\n#### Variables\n\n```haskell\nimport Text.Hastache \nimport Text.Hastache.Context
  \nimport qualified Data.Text.Lazy.IO as TL\n\nmain = hastacheStr defaultConfig (encodeStr
  template) (mkStrContext context)\n    >>= TL.putStrLn\n\ntemplate = \"Hello, {{name}}!\\n\\nYou
  have {{unread}} unread messages.\" \n\ncontext \"name\" = MuVariable \"Haskell\"\ncontext
  \"unread\" = MuVariable (100 :: Int)\n```\n\n```\nHello, Haskell!\n\nYou have 100
  unread messages.\n```\n\nWith Generics\n\n```haskell\n{-# LANGUAGE DeriveDataTypeable
  #-}\nimport Text.Hastache \nimport Text.Hastache.Context \nimport qualified Data.Text.Lazy.IO
  as TL \nimport Data.Data \nimport Data.Generics \n\nmain = hastacheStr defaultConfig
  (encodeStr template) context\n    >>= TL.putStrLn\n\ndata Info = Info { \n    name
  \   :: String, \n    unread  :: Int \n    } deriving (Data, Typeable)\n\ntemplate
  = \"Hello, {{name}}!\\n\\nYou have {{unread}} unread messages.\"\ncontext = mkGenericContext
  $ Info \"Haskell\" 100\n```\n\n#### Lists\n\n```haskell\ntemplate = concat [ \n
  \   \"{{#heroes}}\\n\", \n    \"* {{name}} \\n\", \n    \"{{/heroes}}\\n\"] \n\ncontext
  \"heroes\" = MuList $ map (mkStrContext . mkListContext) \n    [\"Nameless\",\"Long
  Sky\",\"Flying Snow\",\"Broken Sword\",\"Qin Shi Huang\"]\n    where\n    mkListContext
  name = \\\"name\" -> MuVariable name\n```\n\n```\n* Nameless \n* Long Sky \n* Flying
  Snow \n* Broken Sword \n* Qin Shi Huang\n```\n\nWith Generics\n\n```haskell\ndata
  Hero = Hero { name :: String } deriving (Data, Typeable)\ndata Heroes = Heroes {
  heroes :: [Hero] } deriving (Data, Typeable)\n\ntemplate = concat [ \n    \"{{#heroes}}\\n\",
  \n    \"* {{name}} \\n\", \n    \"{{/heroes}}\\n\"] \n\ncontext = mkGenericContext
  $ Heroes $ map Hero [\"Nameless\",\"Long Sky\",\n    \"Flying Snow\",\"Broken Sword\",\"Qin
  Shi Huang\"]\n```\n\nAnother Generics version\n\n```haskell\ndata Heroes = Heroes
  { heroes :: [String] } deriving (Data, Typeable)\n\ntemplate = concat [ \n    \"{{#heroes}}\\n\",
  \n    \"* {{.}} \\n\", \n    \"{{/heroes}}\\n\"] \n\ncontext = mkGenericContext
  $ Heroes [\"Nameless\",\"Long Sky\",\"Flying Snow\", \n    \"Broken Sword\",\"Qin
  Shi Huang\"]\n```\n\nList item by index\n\n```haskell\nmain = mapM_ (\\(template,context)
  ->\n    hastacheStr defaultConfig (encodeStr template) context >>= TL.putStrLn)
  \n        [(template1, mkStrContext context1),\n         (template1, context2),\n
  \        (template3, context3)]\n\nnames = [\"Nameless\",\"Long Sky\",\"Flying Snow\",\"Broken
  Sword\",\"Qin Shi Huang\"]\n\ntemplate1 = concat [\n    \"{{heroes.1.name}}\\n\",\n
  \   \"{{heroes.0.name}}\\n\"]\n\n-- Context as function\ncontext1 \"heroes\" = MuList
  $ map (mkStrContext . mkListContext) names\n    where\n    mkListContext name =
  \\\"name\" -> MuVariable name\ncontext1 _ = MuNothing\n\n-- With Generics\ndata
  Hero = Hero { name :: String } deriving (Data, Typeable)\ndata Heroes = Heroes {
  heroes :: [Hero] } deriving (Data, Typeable)\n\ncontext2 = mkGenericContext $ Heroes
  $ map Hero names\n\n-- With Generics (another way)\ntemplate3 = concat [\n    \"{{heroName.3}}\\n\",\n
  \   \"{{heroName.2}}\\n\"]\n\ndata HeroesStr = HeroesStr { heroName :: [String]
  } deriving (Data, Typeable)\n\ncontext3 = mkGenericContext $ HeroesStr names\n```\n\n```\nLong
  Sky\nNameless\n\nLong Sky\nNameless\n\nBroken Sword\nFlying Snow\n```\n\n#### Conditional
  evaluation\n\nBoolean\n\n```haskell\ntemplate = \"{{#boolean}}true{{/boolean}}{{^boolean}}false{{/boolean}}\"\ncontext
  \"boolean\" = MuBool False\n```\n```\nfalse\n```\n\nList\n\n```haskell\ntemplate
  = \"{{^messages}}No new messages{{/messages}}\"\ncontext \"messages\" = MuList []\n```\n```\nNo
  new messages\n```\n\nNumber\n\n```haskell\nmain = mapM_ (\\ctx ->\n    hastacheStr
  defaultConfig (encodeStr template) (mkStrContext ctx)\n    >>= TL.putStrLn) [context1,context2]\n\ntemplate
  = \"{{#msg}}{{msg}}{{/msg}}{{^msg}}No{{/msg}} new messages.\"\n\ncontext1 \"msg\"
  = MuVariable (100 :: Int)\ncontext2 \"msg\" = MuVariable (0 :: Int)\n```\n```\n100
  new messages.\nNo new messages.\n```\n\nMultiple constructors (in generic context)\n\n```haskell\n#!/usr/local/bin/runhaskell\n--
  | Multiple constructors in generic contexts\n{-# LANGUAGE DeriveDataTypeable #-}\n{-#
  LANGUAGE OverloadedStrings  #-}\nimport           Data.Data\nimport           Data.Monoid\nimport
  \          Data.Typeable                 ()\n\nimport qualified Data.Text.Lazy    as
  TL\nimport qualified Data.Text.Lazy.IO as TL\nimport           Text.Hastache\nimport
  \          Text.Hastache.Context\n\ndata Hero = SuperHero { name      :: String\n
  \                     , powers    :: [String]\n                      , companion
  :: String\n                      }\n          | EvilHero  { name   :: String\n                      ,
  minion :: String\n                      }\n          deriving (Show, Data, Typeable)\n\ntemplate
  :: String\ntemplate = mconcat [\n    \"{{#SuperHero}}\\n\",\n    \"Hero: {{name}}\\n\",\n
  \   \" * Powers: {{#powers}}\\n\",\n    \"\\n   - {{.}}{{/powers}} \\n\",\n    \"
  * Companion: {{companion}}\\n\",\n    \"{{/SuperHero}}\\n\",\n    \"{{#EvilHero}}\\n\",\n
  \   \"Evil hero: {{name}}\\n\",\n    \" * Minion: {{minion}}\\n\",\n    \"{{/EvilHero}}\"]\n\nrender
  :: Hero -> IO TL.Text\nrender = hastacheStr defaultConfig (encodeStr template)\n
  \      . mkGenericContext\n\nmain :: IO ()\nmain = do let batman = SuperHero \"Batman\"
  [\"ht\",\"ht\"] \"Robin\"\n          let doctorEvil = EvilHero \"Doctor Evil\" \"Mini-Me\"\n
  \         render batman >>= TL.putStrLn\n          render doctorEvil >>= TL.putStrLn\n```\n```\nHero:
  Batman\n * Powers: \n   - ht\n   - ht \n * Companion: Robin\n\nEvil hero: Doctor
  Evil\n * Minion: Mini-Me\n```\n\n#### Functions\n\n```haskell\ntemplate = \"Hello,
  {{#reverse}}world{{/reverse}}!\" \n\ncontext \"reverse\" = MuLambda (reverse . decodeStr)\n```\n\n```\nHello,
  dlrow!\n```\n\n#### Monadic functions\n\n```haskell\n{-# LANGUAGE FlexibleContexts
  #-}\nimport Text.Hastache \nimport Text.Hastache.Context\nimport qualified Data.Text.Lazy
  as TL \nimport qualified Data.Text.Lazy.IO as TL \nimport Control.Monad.State \n\nmain
  = run >>= TL.putStrLn\n\nrun = evalStateT stateFunc \"\"\n\nstateFunc :: StateT
  String IO TL.Text\nstateFunc = \n    hastacheStr defaultConfig (encodeStr template)
  (mkStrContext context) \n\ntemplate = \"{{#arg}}aaa{{/arg}} {{#arg}}bbb{{/arg}}
  {{#arg}}ccc{{/arg}}\"\n\ncontext \"arg\" = MuLambdaM $ arg . decodeStr\n\narg ::
  MonadState String m => String -> m String\narg a = do    \n    v <- get\n    let
  nv = v ++ a\n    put nv\n    return nv\n```\n\n```\naaa aaabbb aaabbbccc\n```\n\n####
  Custom queries and field renaming\n\n```haskell\n{-# LANGUAGE DeriveDataTypeable
  #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-#
  LANGUAGE StandaloneDeriving #-}\n{-# LANGUAGE TypeSynonymInstances #-}\n\n-- Custom
  extension function for types that are not supported out of\n-- the box in generic
  contexts\nimport Text.Hastache \nimport Text.Hastache.Context \n\nimport qualified
  Data.Text.Lazy as TL \nimport qualified Data.Text.Lazy.IO as TL \n\nimport Data.Data
  (Data, Typeable)\nimport Data.Decimal\nimport Data.Generics.Aliases (extQ)\n\ndata
  DecimalOrInf = Inf | Dec Decimal deriving (Data, Typeable)\nderiving instance Data
  Decimal\ndata Test = Test {n::Int, m::DecimalOrInf} deriving (Data, Typeable)\n\n\nval1
  :: Test\nval1 = Test 1 (Dec $ Decimal 3 1500)\n\nval2 :: Test\nval2 = Test 2 Inf\n\nquery
  :: Ext\nquery = defaultExt `extQ` f\n  where f Inf = \"+inf\"\n        f (Dec i)
  = show i\n\nr \"m\" = \"moo\"\nr x   = x\n\nexample :: Test -> IO TL.Text\nexample
  v = hastacheStr defaultConfig\n                        (encodeStr template)\n                        (mkGenericContext'
  r query v)\n\ntemplate = concat [ \n     \"An int: {{n}}\\n\",\n     \"{{#moo.Dec}}A
  decimal number: {{moo.Dec}}{{/moo.Dec}}\",\n     \"{{#moo.Inf}}An infinity: {{moo.Inf}}{{/moo.Inf}}\"\n
  \    ] \n\nmain = do\n  example val1 >>= TL.putStrLn\n  example val2 >>= TL.putStrLn\n```\n\n```\nAn
  int: 1\nA decimal number: 1.500\nAn int: 2\nAn infinity: +inf\n```\n\n\n#### Generics
  big example\n\n```haskell\ndata Book = Book { \n    title           :: String, \n
  \   publicationYear :: Integer \n    } deriving (Data, Typeable) \n \ndata Life
  = Life { \n    born            :: Integer, \n    died            :: Integer \n    }
  deriving (Data, Typeable) \n     \ndata Writer = Writer { \n    name            ::
  String, \n    life            :: Life, \n    books           :: [Book]\n    } deriving
  (Data, Typeable) \n     \ntemplate = concat [ \n    \"Name: {{name}} ({{life.born}}
  - {{life.died}})\\n\", \n    \"{{#life}}\\n\", \n        \"Born: {{born}}\\n\",
  \n        \"Died: {{died}}\\n\", \n    \"{{/life}}\\n\", \n    \"Bibliography:\\n\",
  \n    \"{{#books}}\\n\", \n    \"    {{title}} ({{publicationYear}})\\n\", \n    \"{{/books}}\\n\"\n
  \   ]\n\ncontext = mkGenericContext Writer { \n    name = \"Mikhail Bulgakov\",
  \n    life = Life 1891 1940, \n    books = [ \n        Book \"Heart of a Dog\" 1987,
  \n        Book \"Notes of a country doctor\" 1926, \n        Book \"The Master and
  Margarita\" 1967]\n    }\n```\n\n```\nName: Mikhail Bulgakov (1891 - 1940)\nBorn:
  1891\nDied: 1940\nBibliography:\n    Heart of a Dog (1987)\n    Notes of a country
  doctor (1926)\n    The Master and Margarita (1967)\n```\n\n#### More examples\n\n
  * [Hastache test](https://github.com/lymar/hastache/blob/master/tests/test.hs)\n
  * Real world example: [README.md file generator](https://github.com/lymar/hastache/blob/master/mkReadme.hs)\n
  * [examples/ directory](https://github.com/lymar/hastache/tree/master/examples)"
description-type: markdown
hash: a1f4acc52258526a7a5de636d4917100ae6b19337fcd481295d0b7fda8322ab5
homepage: http://github.com/lymar/hastache
latest: 0.6.1
license-name: BSD-3-Clause
maintainer: Daniil Frumin <dan at covariant.me>
synopsis: Haskell implementation of Mustache templates
test-bench-deps:
  HUnit: '>=0'
  base: '>=0'
  bytestring: '>=0'
  directory: '>=0'
  hastache: '>=0'
  mtl: '>=0'
  syb: '>=0'
  text: '>=0'
