homepage: http://github.com/haskoin/haskoin-store#readme
changelog-type: markdown
hash: 7e23a8127d6e0476f663739803e22a86f93bc944808c0136d61c3427851457ff
test-bench-deps:
  http-client: '>=0.6.4.1'
  cereal: '>=0.5.8.1'
  haskoin-core: '>=0.19.0'
  bytestring: '>=0.10.10.0'
  base: '>=4.9 && <5'
  unordered-containers: '>=0.2.10'
  hspec: '>=2.7.1'
  text: '>=1.2.3.0'
  network: '>=3.1.1.1'
  data-default: '>=0.7.1.1'
  haskoin-store-data: -any
  wreq: '>=0.5.3.2'
  containers: '>=0.6.2.1'
  lens: '>=4.18.1'
  binary: '>=0.8.8.0'
  mtl: '>=2.2.2'
  hashable: '>=1.3.0.0'
  deepseq: '>=1.4.4.0'
  QuickCheck: '>=2.13.2'
  string-conversions: '>=0.4.0.1'
  scotty: '>=0.11.5'
  http-types: '>=0.12.3'
  aeson: '>=1.4.7.1'
  bytes: '>=0.17'
maintainer: jprupp@protonmail.ch
synopsis: Data for Haskoin Store
changelog: "# Changelog\nAll notable changes to this project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand
  this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html)\n\n##
  0.52.0\n### Changed\n- Remove unnecessary performance optimisations.\n\n### Fixed\n-
  Reduce balance retrievals for xpubs.\n- Hack UTXO ordering to avoid unwanted behaviours.\n-
  Do not merge conduits when there are too many.\n\n## 0.51.0\n### Fixed\n- Data type
  for RequestTooLarge was missing.\n\n## 0.50.3\n### Added\n- Log HTTP request bodies.\n\n###
  Removed\n- Remove web request timeout.\n\n### Fixed\n- Do not ignore unknown start
  tx anchors in conduits.\n- Use fast transaction counting in cache.\n\n### Changed\n-
  Use WAI middlewares to manage stats.\n\n## 0.50.2\n### Fixed\n- Do not use lazy
  parsers for incoming data that may throw exceptions.\n\n## 0.50.1\n### Fixed\n-
  Do not allow incoming POST requests of unlimited body size.\n\n## 0.50.0\n### Added\n-
  Limit number of simultaneous xpubs being cached.\n\n## 0.49.0\n### Changed\n- Improve
  conduit merging algorithm.\n\n## 0.48.0\n### Added\n- Timeouts and token bucket
  for web requests.\n- Configurable price fetch interval.\n\n## 0.47.6\n### Fixed\n-
  Fix web.all stat.\n\n## 0.47.5\n### Changed\n- Simplify stats.\n\n## 0.47.4\n###
  Added\n- Implement Blockchain.info block height.\n- Implement Blockchain.info raw
  address.\n- Implement Blockchain.info balances.\n\n### Fixed\n- Make Blockchain.info
  unspent endpoint more efficient.\n- Make Blockchain.info xpubs endpoint more efficient.\n\n###
  Changed\n- Use compact JSON serialization by default everywhere.\n\n## 0.47.3\n###
  Fixed\n- Fix serialization bug with unspents.\n\n## 0.47.2\n### Fixed\n- Fix serialization
  bug for health check.\n\n## 0.47.1\n### Fixed\n- Fix serialization bugs for web
  data types.\n\n## 0.47.0\n### Added\n- Support for legacy block endpoints.\n\n###
  Changed\n- Serialization now uses bytes library and does interleaved IO.\n\n## 0.46.6\n###
  Added\n- Allow comma-separated values in multiaddr.\n\n## 0.46.5\n### Changed\n-
  Throw error when offset exceeded instead of truncating it.\n\n## 0.46.4\n### Fixed\n-
  Do not compute balances separately for loose addresses when part of an xpub.\n\n###
  Changed\n- Do not fetch entire transaction list for loose addresses.\n- Transaction
  count in wallet object is just a synonym for filtered tx count.\n- Use conduits
  to prevent over-fetching transactions from database.\n\n## 0.46.3\n### Fixed\n-
  Make hex value encoding compatible with Java BigInteger decoder.\n\n## 0.46.2\n###
  Changed\n- Allow negative confirmations for compatibility with old API.\n\n## 0.46.1\n###
  Added\n- Filters for transactions in multiaddr endpoint.\n\n## 0.46.0\n### Fixed\n-
  Release to fix unintentional upload.\n\n## 0.45.0\n### Added\n- Using a tx_index
  that results in a txid conflict returns a 409 - Conflict.\n\n## 0.44.0\n### Changed\n-
  Numeric txid now 53 bits long and doesn't return transactions when hashes collide.\n\n##
  0.43.1\n### Fixed\n- Do not overcount statistics.\n\n## 0.43.0\n### Changed\n- Transaction
  index now simply encodes txid as a long number (sorry JS users).\n\n## 0.42.4\n###
  Changed\n- Optimise encoding of JSON data for Blockchain.info API.\n\n## 0.42.3\n###
  Changed\n- Narrow down the balance for transactions to onlyShow set.\n\n## 0.42.2\n###
  Changed\n- Make unspent algorithm more efficient.\n\n## 0.42.1\n### Added\n- Support
  for Blockchain.info API unspent endpoint.\n\n### Fixed\n- Fix RBF transactions on
  Blockchain.info API.\n\n## 0.42.0\n### Removed\n- No more pruning of old mempool
  transactions.\n\n## 0.41.4\n### Fixed\n- Correct error computing wallet balances.\n\n##
  0.41.3\n### Changed\n- Use whole active set when computing results for multiaddr.\n-
  Compute correct count of transactions for wallet.\n\n## 0.41.2\n### Changed\n- Caching
  mempool is not much slower when pruning, so reversing that change.\n\n## 0.41.1\n###
  Changed\n- Only prune mempool every ten minutes or so.\n\n## 0.41.0\n### Removed\n-
  No more cache eviction endpoint.\n\n## 0.40.22\n### Added\n- More metrics for cache.\n\n##
  0.40.21\n### Added\n- Support HTTP GET for multiaddr endpoint.\n\n## 0.40.20\n###
  Added\n- Prefix 'app.' in statsd when using Nomad variables.\n\n## 0.40.19\n###
  Added\n- Statsd support and pleny of statistics.\n\n### Removed\n- Removed use of
  sync lock for importing xpubs in cache due to volume.\n\n## 0.40.18\n### Added\n-
  New options to control cache lock retry count and delay.\n\n### Changed\n- Cache
  xpubs asyncrhonously.\n- Mempool syncs fully every refresh cycle.\n\n## 0.40.17\n###
  Changed\n- Delete more than 1000 xpubs from Redis if needed.\n- Attempt to get lock
  ten times in order to index a new xpub.\n\n## 0.40.16\n### Fixed\n- Fix best block
  not set.\n\n## 0.40.15\n### Fixed\n- Do not update cache best block if it is higher.\n\n##
  0.40.14\n### Fixed\n- Always respond to cache pings to avoid getting stuck.\n\n##
  0.40.13\n### Added\n- Be more careful about importing blocks to the cache.\n\n###
  Removed\n- Reduce excessive cache logging.\n\n## 0.40.12\n### Fixed\n- Correct bad
  arithmetics in cache cooldown.\n\n## 0.40.11\n### Added\n- Debug log cache cooldown.\n\n###
  Fixed\n- Unlimited retry lock acquisition now works.\n- Make locking tighter\n\n##
  0.40.10\n### Changed\n- Reduce the number of things that cache do when pinged.\n\n##
  0.40.9\n### Fixed\n- Avoid filling the cache actor mailbox with pings.\n\n## 0.40.8\n###
  Fixed\n- Correct a typo in cache code.\n\n## 0.40.7\n### Changed\n- Improve cache
  mempool sync algorithm.\n\n## 0.40.6\n### Changed\n- Make cache cooldown a number.\n\n##
  0.40.5\n### Added\n- Log every non-successful query.\n\n## 0.40.4\n### Fixed\n-
  Use Redis TTL for cache cooldown.\n\n## 0.40.3\n### Fixed\n- Mempool no longer gets
  saved in cache when node is not in sync.\n\n## 0.40.2\n### Changed\n- Change source
  of price data to https://blockchain.info/ticker.\n\n## 0.40.1\n### Removed\n- Do
  not expose Paths_haskoin_store module explicitly.\n\n## 0.40.0\n### Added\n- Blockchain.info
  API compatibility for multiaddr and rawtx endpoints.\n\n### Changed\n- Segwit fields
  are no longer omitted on incompatible networks.\n\n## 0.39.0\n### Changed\n- Upgrade
  Haskoin Core to support higher version on witness addresses.\n\n## 0.38.4\n### Fixed\n-
  Fix block search by timestamp.\n\n## 0.38.3\n### Changed\n- Disable low latency
  garbage collector by default.\n\n## 0.38.2\n### Changed\n- Use GHC 8.10 and its
  low latency garbage collector.\n\n## 0.38.1\n### Changed\n- Optimise algorithm for
  fork safety check.\n\n## 0.38.0\n### Added\n- Support for Bitcoin Cash hard fork.\n\n##
  0.37.5\n### Added\n- Configurable cache refresh time.\n\n## 0.37.4\n### Fixed\n-
  Now request mempool when connecting even if already in sync.\n\n### Changed\n- Add
  a delay to mempool sync to allow for block headers to catch up.\n- Attempt to sync
  mempool whenever syncing is done or a new peer connects.\n\n## 0.37.3\n### Changed\n-
  Correct logic error when deleting superseded transactions.\n\n## 0.37.2\n### Changed\n-
  Simplify multiple algorithms to hopefully solve corruption bug.\n- Allow to disable
  mempool transaction indexing via command line.\n\n## 0.37.1\n### Changed\n- Better
  locking around caching operations.\n- Have a global cooldown on cache mempool updates.\n\n###
  Fixed\n- Fix address unspent retrieval using correct column family.\n\n## 0.37.0\n###
  Added\n- Add support for column families and prefixes breaking database backwards
  compatibility.\n\n## 0.36.2\n### Fixed\n- Fix another place where mempool sorting
  was wrong.\n\n## 0.36.1\n### Fixed\n- Fix wrong sorting of mempool transactions
  in database.\n\n## 0.36.0\n### Changed\n- Do not use STM transactions because it
  is impossible to reason about preloading.\n- Make importing blocks after mempool
  is populated faster.\n\n## 0.35.2\n### Changed\n- Reduce frequency of cache mempool
  updates.\n\n## 0.35.1\n### Changed\n- Remove cache lock retries.\n- Do not use lock
  when caching a new xpub.\n\n## 0.35.0\n### Changed\n- Use new RocksDB Haskell bindings.\n-
  Make headers - blocks diff configurable in health check.\n- Simplify locking in
  cache.\n\n## 0.34.8\n### Changed\n- Minor refactoring.\n- Only send one mempool
  message ever.\n\n## 0.34.7\n### Changed\n- Fix block heights endpoint URL.\n\n##
  0.34.6\n### Removed\n- Remove asynchronous database retrieval permanently due to
  instability.\n\n## 0.34.5\n### Added\n- Preload memory before freeing outputs.\n\n##
  0.34.4\n### Added\n- Asynchronous preloading only for blocks.\n\n## 0.34.3\n###
  Removed\n- Disable asynchronous preloading to prevent segmentation fault error.\n\n##
  0.34.2\n### Removed\n- No more upper limit for mempool call.\n\n### Fixed\n- Health
  check uses minimum between last block and mempool tx.\n\n## 0.34.1\n### Added\n-
  Pending mempool transactions health check.\n\n### Removed\n- No more upper limit
  for mempool call.\n\n## 0.34.0\n### Changed\n- New format for health check.\n\n##
  0.33.1\n### Changed\n- Upload with updated Cabal files.\n\n## 0.33.0\n### Fixed\n-
  Fix outputs showing up as both spent and unspent.\n\n### Changed\n- Simplify data
  structures used to hold uncommitted changes.\n- Split StoreRead class in two.\n-
  Improve pre-loading algorithms.\n\n## 0.32.3\n### Fixed\n- Fix command line argument
  mappings to env vars.\n\n## 0.32.2\n### Fixed\n- Do not complain when deleting non-existent
  unconfirmed txs.\n\n## 0.32.1\n### Fixed\n- Fix corruption bug when deleting transactions
  during some reorgs.\n- Fix tests on data package.\n- Rename upstream address string
  functions.\n\n## 0.32.0\n### Changed\n- Concurrently load dependencies when importing
  transaction data.\n- Import each transaction using STM.\n- Rework logging.\n- Refactor
  all block chain importing algorithms.\n- Use peer locking when importing data.\n-
  Change license to MIT.\n\n### Added\n- Make max peer count configurable.\n\n###
  Fixed\n- Prevent premature peer timeouts when importing blocks.\n\n## 0.31.0\n###
  Added\n- Add Haskell web client code to data library.\n- Use type-safe definitions
  for web paths and parameters.\n- Support JSON pretty encoding and enable by default
  for some endpoints.\n- Allow environment variables for configuration.\n\n### Changed\n-
  Change command-line arguments to better fit GNU style.\n- Refactor code to manipulate
  address balances.\n- Improve logging.\n- Rate-limit mempool importing.\n- Do not
  add xpubs to cache if node not in sync.\n- Do not import transactions to cache if
  no xpubs in cache.\n- Refactor transaction importing logic extremely.\n- Refactor
  memory database and writer.\n\n### Fixed\n- Fix BTC double-count transaction bug.\n-
  Add missing xpub derive parameter to xpub evict documentation.\n\n## 0.30.1\n###
  Changed\n- Limit mempool API endpoint list.\n\n## 0.30.0\n### Changed\n- Raw JSON
  values are now wrapped in an object with a result property.\n- Better logging when
  importing transactions into mempool.\n\n### Fixed\n- Transaction limit by block
  height works now.\n\n## 0.29.3\n### Changed\n- Revert concurrent retrieval changes
  from 0.29.1 and 0.29.0 to solve stability\n  issues.\n- Bitcoin Cash (BCH) replaces
  BTC as default network in CLI.\n- Peer discovery enabled automatically if no peers
  specified in CLI.\n- Use separate Stack configuration file for data package.\n\n##
  0.29.2\n### Changed\n- Increase timeouts for manager and chain health checks.\n\n##
  0.29.1\n### Added\n- Perform xpub operations concurrently.\n\n## 0.29.0\n### Changed\n-
  BlockTx renamed to TxRef.\n- Remove unnecessary monad transformers to simplify import
  code.\n\n### Added\n- Retrieve balances and unspent outputs concurrently when importing.\n-
  Coin instance for Unspent in data package.\n\n## 0.28.0\n### Changed\n- Change the
  way that limits, start, and offset values are handled.\n\n### Fixed\n- Fix incorrect
  limit responses.\n\n## 0.27.0\n### Added\n- Complete support for offset.\n\n###
  Changed\n- Improve monad stack for cache.\n\n## 0.26.6\n### Added\n- Support for
  offset in all endpoints where it makes sense.\n\n## 0.26.5\n### Fixed\n- Sort after
  using the nub function or use Data.List.nub in exceptional cases.\n\n## 0.26.4\n###
  Changed\n- Don't do certain validity checks on confirmed transactions.\n\n### Fixed\n-
  Do not crash when syncing the blockchain from scratch on a populated cache.\n\n##
  0.26.3\n### Changed\n- Replace nub function everywhere with faster version written
  using hash sets.\n\n### Fixed\n- Fix shared cache locking.\n\n## 0.26.2\n### Changed\n-
  Simplify cache block import code.\n- Improve cache import performance.\n\n## 0.26.1\n###
  Fixed\n- Do not call zadd or zrem in Redis with incorrect argument count.\n\n###
  Changed\n- Do not use slow Transaction type in Logic.\n- Improve logging while importing
  blocks.\n- Better transaction import algorithm.\n\n## 0.26.0\n### Changed\n- Add
  information to some binary types for feature parity with JSON.\n\n## 0.25.4\n###
  Changed\n- Hide segwit data on non-segwit networks.\n\n### Fixed\n- Fix work which
  now always serialises as a number literal.\n\n## 0.25.3\n### Changed\n- Fix version
  display on health check.\n\n## 0.25.2\n### Changed\n- Fix wrong version of Haskoin
  Store Data dependency.\n\n## 0.25.1\n### Changed\n- Improve code organisation.\n-
  Split data definitions and serialisation into its own package.\n\n## 0.24.0\n###
  Changed\n- Use mocking to simulate peers instead of connecting to the network while
  testing.\n- Depend on latest version of Haskoin Core for faster JSON serialisation.\n-
  Clean up confusing JSON encoding/decoding codebase.\n\n## 0.23.24\n### Changed\n-
  Implement faster JSON encoding using toEncoding from the Aeson library.\n\n## 0.23.23\n###
  Changed\n- Do not read full mempool so often from cache code.\n\n## 0.23.22\n###
  Changed\n- Depend on latest Haskoin Node that fixes debugging regression.\n\n##
  0.23.21\n### Changed\n- Reduce non-debug log verbosity.\n\n## 0.23.20\n### Changed\n-
  Better Haskoin Node logging.\n\n## 0.23.19\n### Changed\n- Use set peer timeout
  instead of constant in block store. \n\n## 0.23.18\n### Changed\n- Allow setting
  peer timeouts in command line.\n\n### Fixed\n- Bump Haskoin Node dependency to fix
  another premature timeout condition.\n\n## 0.23.17\n### Fixed\n- Touch syncing peer
  whenever we process one of its blocks to avoid premature timeout.\n\n## 0.23.16\n###
  Changed\n- Better algorithm to avoid importing transaction multiple times in cache.\n-
  Depend on latest Haskoin Node.\n\n## 0.23.15\n### Changed\n- Do not storm the cache
  with mempool transactions.\n\n## 0.23.13\n### Fixed\n- Do not ignore deleted incoming
  transactions.\n\n## 0.23.12\n### Fixed\n- Do not do RBF checks when replacing a
  mempool transaction with a confirmed one.\n\n## 0.23.11\n### Fixed\n- Streamline
  mempool transaction importing.\n\n## 0.23.10\n### Fixed\n- Fix transactions not
  recorded in cache mempool set.\n- Fix transactions being downloaded multiple times.\n\n###
  Removed\n- Do not store orphan transactions in database.\n\n### Changed\n- Use sets
  for incoming transactions instead of lists.\n- Do not do anything to the cache if
  there are no xpubs in it.\n\n## 0.23.9\n### Fixed\n- Wiping mempool fixed.\n\n##
  0.23.8\n### Added\n- Chunk transactions to be deleted from mempool.\n\n## 0.23.7\n###
  Added\n- Mempool improvements.\n\n## 0.23.6\n### Added\n- Ability to wipe mempool
  at start.\n- Improvements to mempool processing code.\n\n## 0.23.5\n### Changed\n-
  Tighten the locking loop to avoid slow cache building.\n\n## 0.23.5\n### Fixed\n-
  Wrong error in cache when acquiring lock.\n\n## 0.23.4\n### Added\n- Add extra debug
  logging for cache code.\n\n### Fixed\n- Fix a bug with xpub growing algorithm.\n\n###
  Changed\n- Use locks instead of transactions to update cache.\n\n## 0.23.3\n###
  Fixed\n- Reduce contention when many instances of Haskoin Store share a cache.\n\n##
  0.23.2\n### Added\n- Allow retrieving xpub data without using cache.\n\n## 0.23.1\n###
  Added\n- Allow xpub eviction from cache via API.\n- Clarify cache address addition
  code.\n\n### Fixed\n- Balances were incorrectly computed in cache when new transactions
  arrived.\n\n## 0.23.0\n### Added\n- Support for Redis transactions.\n- Use a smaller
  initial gap for empty xpubs.\n\n### Changed\n- Remove custom JSON encoding class.\n-
  Refactor and code simplification.\n\n## 0.22.5\n### Fixed\n- Cache was being completely
  pruned.\n\n## 0.22.4\n### Fixed\n- Cache now prunes correctly.\n\n## 0.22.3\n###
  Fixed\n- Bug was making cache get stuck when pruning.\n\n## 0.22.2\n### Changed\n-
  More efficient algorithms for caching and cache misses.\n- Better debug logging
  of cache hits and misses.\n\n## 0.22.1\n### Added\n- More debug logging for cache
  hits.\n\n### Fixed\n- Bug using maximum against empty list.\n\n## 0.22.0\n### Changed\n-
  Extreme code refactoring.\n- Move all code to Haskoin and drop Network from modules.\n\n###
  Added\n- Use Redis pipelining when importing multiple transactions into cache.\n-
  Implement configurable LRU for Redis cache.\n- Import xpubs directly into cache
  from web worker thread when a key is requested.\n\n### Removed\n- Only expose a
  few modules to external API.\n\n## 0.21.7\n### Changed\n- Improve build configuration.\n\n###
  Fixed\n- Use minimum used addresses instead of minimum index for xpub cache decision.\n\n##
  0.21.6\n### Fixed\n- Fix missing xpub unspent outputs when using cache.\n\n## 0.21.5\n###
  Added\n- Only store xpubs in cache if they have more than a threshold addresses
  used.\n\n## 0.21.4\n### Fixed\n- Fix shared cache case where head is set beyond
  header chain by another node.\n\n## 0.21.3\n### Fixed\n- Fix bug where best head
  was not being registered in cache.\n- Fix best head in cache being decoded incorrectly.\n\n##
  0.21.2\n### Added\n- Complete support for Redis xpub cache.\n\n## 0.21.1\n### Fixed\n-
  Latest version of secp256k1-haskell works with Debian 9.\n\n## 0.21.0\n### Fixed\n-
  Fix output of web API calls when issuing limits with offsets.\n\n### Changed\n-
  Massive refactoring of entire codebase.\n\n### Added\n- Work in progress Redis caching
  for extended public keys.\n\n## 0.20.2\n### Changed\n- Filter xpub address balances
  on web API to show only addresses that have been used.\n\n### Removed\n- Remove
  paths and addresses from xpub summary.\n\n## 0.20.1\n### Changed\n- Refactor code
  greatly.\n- Depend on new Haskoin Store package to avoid missing tx broadcasts.\n-
  Merge StoreStream class into StoreRead.\n- Move former streaming functions to use
  lists instead of conduits.\n- Remove excessively verbose debugging.\n\n## 0.20.0\n###
  Added\n- Set minimum version bounds for some dependencies.\n- Now compatible with
  GHC 8.8.\n- Extended key caching system using Redis.\n\n### Changed\n- Massively
  refactored codebase.\n- Less verbose debug logging.\n\n### Removed\n- Removed conduits
  for faster queries.\n\n## 0.19.6\n### Added\n- Use a parallel strategy to compute
  key derivations.\n\n### Fixed\n- Do not fail health check upon transaction timeout
  while syncing.\n\n### Changed\n- Do not use conduits for xpub balance streams.\n-
  Multiple minor refactorings.\n\n## 0.19.5\n### Changed\n- Minor refactor to block
  import code.\n\n### Fixed\n- Minor fix to transaction timeout check.\n\n## 0.19.4\n###
  Fixed\n- Clarify and correct health check algorithm.\n\n## 0.19.3\n### Changed\n-
  Add address transactions to cache.\n- Improve multi-address transaction retrieval
  algorithms.\n\n## 0.19.2\n### Removed\n- Cache-Control header turned out to be unnecessary.\n\n###
  Fixed\n- Fix some minor errors in web module.\n\n## 0.19.1\n### Added\n- Set Cache-Control
  header to no-cache.\n\n## 0.19.0\n### Changed\n- Store mempool in single key/value
  pair.\n\n## 0.18.11\n### Changed\n- Do not stream mempool.\n\n## 0.18.10\n### Removed\n-
  Disable timeout checks for testnets.\n\n## 0.18.9\n### Added\n- Endpoint to locate
  a block by unix timestamp.\n\n### Removed\n- No more persistence for peers due to
  dependency on newest haskoin-node.\n\n## 0.18.8\n### Added\n- Transaction and block
  timeouts for health check.\n- Raw blocks.\n\n## 0.18.7\n### Fixed\n- Missing tranasctions
  on xpub listings.\n\n## 0.18.6\n### Removed\n- Follow Stack advise removing `-O2`
  GHC option.\n\n## 0.18.5\n### Added\n- Compatibility with SegWit on extended public
  key endpoints.\n\n### Changed\n- Fix syncing peer not reset after timeout.\n- Use
  simpler monad for streaming data.\n\n## 0.18.4\n### Changed\n- Bump Haskoin Node
  to fix peers not stored and excessively verbose logging.\n\n## 0.18.3\n### Changed\n-
  Configurable HTTP request logging. Disabled by default.\n\n## 0.18.2\n### Changed\n-
  Fix for memory leak.\n\n## 0.18.1\n### Removed\n- Remove transaction count from
  xpub summary object.\n\n## 0.18.0\n### Changed\n- Simplified limits and start point
  handling on web API.\n- Made transaction streaming algorithm faster for xpub transactions.\n-
  Extended public key summary output contains all addresses that have received transactions.\n\n###
  Added\n- Fine-grained control for maximum limits via command line options.\n- Transaction
  hash as starting point.\n- Block hash as starting point.\n- Timestamp as starting
  point.\n- Configurable xpub gap limit.\n- Transaction count added to xpub summary.\n-
  UTXO count added to xpub summary.\n\n### Removed\n- Mempool endpoint now has no
  limits or offsets and always returns full list.\n- Extended public key summary output
  no longer includes any transactions.\n- Offsets not allowed for transaction lists
  involving multiple addresses or xpubs.\n- Confusing block position parameter no
  longer part of web API.\n\n## 0.17.2\n### Changed\n- Stream address balances and
  unspent outputs.\n- Add configurable max value for limit and offset which defaults
  at 10000.\n\n## 0.17.1\n### Changed\n- When posting a transaction to the network,
  timeout is now five seconds.\n- Improve error message when transaction post timeout
  reached.\n- Remove obsolete `not found` error for transaction post.\n- Endpoints
  for retrieving blocks now do streaming for better performance.\n- Improve Swagger
  API documentation.\n\n## 0.17.0\n### Added\n- Endpoints for retrieving block transactions.\n-
  Endpoint for retrieving set of latest blocks.\n\n### Changed\n- Use standardized
  JSON and binary serialization schemes for raw transaction endpoints.\n\n## 0.16.6\n###
  Changed\n- Now logging info messages too by default.\n- Consolidated web logging
  in middleware.\n\n### Removed\n- UUIDs for web requests.\n\n## 0.16.5\n### Removed\n-
  Remove concurrency from xpub balance requests to prevent RocksDB segfaults.\n\n##
  0.16.4\n### Removed\n- Remove concurrency from requests using iterators to prevent
  RocksDB from segfaulting.\n\n## 0.16.3\n### Added\n- Debugging information for web
  API.\n\n## 0.16.2\n### Changed\n- Debugging disabled by default (use `--debug` to
  enable).\n\n## 0.16.1\n### Added\n- Cache mempool transactions.\n- Improve initial
  syncing performance.\n\n## 0.16.0\n### Added\n- Orphan transaction support.\n- Full
  address balance cache in RocksDB.\n- Full unspent output cache in RocksDB.\n\n###
  Changed\n- Significantly refactor code.\n- Move web stuff to its own module.\n-
  Change types related to databases.\n- Make xpub balance, transaction and unspent
  queries fetch data in parallel.\n\n## 0.15.2\n### Added\n- Internal data types to
  support orphan transactions.\n\n### Changed\n- Do not spam block actor with pings.\n-
  Fix balance/unspent cache not reverting when importing fails.\n- Fix transaction
  sorting algorithm not including transaction position information.\n- Fix conflicting
  mempool transaction preventing block from importing.\n\n## 0.15.1\n### Changed\n-
  Fix duplicate coinbase transaction id bug.\n\n## 0.15.0\n### Removed\n- Removed
  `PreciseUnixTime` data type.\n\n### Changed\n- Use 64 bits for Unix time representation.\n-
  Data model now uses simplified Unix time representation.\n\n## 0.14.9\n### Added\n-
  Last external/change index information to xpub summary object.\n\n## 0.14.8\n###
  Added\n- Endpoint for xpub summaries.\n- Endpoints for full transactions.\n- Ability
  to query by offset/limit.\n- More API documentation.\n\n## 0.14.7\n### Added\n-
  Debug information for `publishTx`.\n\n### Changed\n- Transaction publishing no longer
  requests mempool.\n- Fixed serialization for `TxId` freezing the entire program
  by infinitely recursing.\n\n## 0.14.6\n### Changed\n- Enable full threading again
  as it was deemed not responsible for the freezing behaviour.\n\n## 0.14.5\n### Changed\n-
  Enable threading but leave it at a single thread to be able to open more than 1024
  files.\n\n## 0.14.4\n### Changed\n- Target LTS Haskell 13.20 and disable threading
  in new attempt to fix freezing bug.\n\n## 0.14.3\n### Changed\n- Remove `-O2`.\n\n##
  0.14.2\n### Changed\n- Target LTS Haskell 12.26 to attempt to fix freezing bug.\n\n##
  0.14.1\n### Added\n- Extra debugging around code that freezes.\n\n### Changed\n-
  Bump dependency on `haskoin-node`.\n\n## 0.14.0\n### Removed\n- Dump slow protobuf
  serialization.\n\n### Added\n- Add custom serialization.\n- Extra debug logging.\n\n###
  Changed\n- Bump `haskoin-core` and `haskoin-node`.\n\n## 0.13.1\n### Changed\n-
  Bump `haskoin-node` in `stack.yaml`.\n- Do not send empty `getdata` messages.\n\n##
  0.13.0\n### Added\n- Primitive content negotiation for web exceptions.\n- Protobuf
  support for errors.\n- Protobuf support for tranasction ids.\n\n### Changed\n- Protobuf
  format changed in non-backwards-compatible manner for transaction ids.\n\n## 0.12.0\n###
  Added\n- Support for binary serialization using Protocol Buffers.\n- New endpoints
  for binary raw transactions (not hex-encoded).\n\n### Changed\n- Services field
  now a hex string instead of a number to avoid overflowing signed 64-bit integer.\n-
  Flatten list of block data objects when responding to request for multiple block
  heights.\n- Errors now reported in plain text without container JSON object.\n-
  Transaction broadcasts are responded to with transaction id in plaintext hex (no
  JSON).\n- Remove database snapshots to improve performance.\n\n## 0.11.2\n### Changed\n-
  Fix duplicate mempool transaction announcements in event stream.\n\n## 0.11.1\n###
  Removed\n- Removed latest block time check.\n\n## 0.11.0\n### Changed\n- Improve
  post transactions endpoint.\n\n## 0.10.1\n### Changed\n- Fix bug where transaction
  lists from multiple addresses would sort incorrectly.\n- Address gap reduced to
  20.\n\n## 0.10.0\n### Removed\n- Remove addresses from transaction lists.\n- No
  longer use container objects for xpub transactions.\n\n## 0.9.3\n### Added\n- Permissive
  CORS headers to allow queries from any domain.\n- Improved documentation using real-world
  examples from the BCH testnet.\n\n## 0.9.2\n### Added\n- HTTP JSON API switch to
  turn off transaction list when retrieving blocks.\n\n## 0.9.1\n### Added\n- Total
  block fees.\n- Total block outputs.\n- Block subsidy.\n\n### Changed\n- Do not consider
  the blocks less one block away from headers as out of sync in health check.\n- Health
  check now returns HTTP 503 when not OK or out of sync.\n\n## 0.9.0\n### Added\n-
  Version to health check output.\n- Block weight for segwit.\n- Transaction weight
  for segwit.\n\n## 0.8.1\n### Added\n- Health check endpoint.\n\n## 0.8.0\n### Added\n-
  Limits and skips.\n- Add timestamps to transactions.\n- Add transaction count to
  address balance object.\n- Add Merkle root to block data.\n- Total funds received
  by an address now shows up in balance.\n- Balances for any address that ever had
  funds show up in xpub endpoints.\n\n### Changed\n- Data model update.\n- Performance
  improvement for xpub calls.\n- Transactions are returned in reverse mempool/block
  order (highest or most recent first).\n- Balance objects do not get deleted from
  database ever.\n\n## 0.6.9\n### Changed\n- Reduce number of coinbase checks to 10,000
  ancestors.\n\n## 0.6.8\n### Changed\n- Further optimize coinbase after height checks.\n\n##
  0.6.7\n### Changed\n- Impose restrictions on recursion for coinbase after height
  checks.\n\n## 0.6.6\n### Added\n- Check whether a transaction can be traced back
  to a coinbase after certain height.\n\n## 0.6.5\n### Changed\n- Delete transactions
  in reverse topological order when reverting a block.\n\n## 0.6.4\n### Changed\n-
  Do not fail silently when importing orphan transactions into the mempool.\n\n##
  0.6.3\n### Changed\n- Dummy release to bump haskoin-node in stack.yaml.\n\n## 0.6.2\n###
  Changed\n- Correct bug where coinbase transactions weren't properly flagged.\n\n##
  0.6.1\n### Changed\n- Compatibility with Bitcoin Cash hard fork.\n- Various bug
  fixes.\n\n## 0.6.0\n### Added\n- Address balance cache in memory.\n\n### Changed\n-
  Simplify data model further.\n- Fix bug importing outputs with UTXO cache.\n- Unspent
  balances cannot be negative.\n\n## 0.5.0\n### Added\n- Add UTXO cache in memory.\n-
  Get transactions with witness data in segwit networks.\n\n### Changed\n- Paths for
  derivations in xpubs is a list and no longer a string.\n- Various bug fixes.\n\n##
  0.4.2\n### Removed\n- Remove extended public key itself from output of relevant
  endpoints to save bandwidth.\n\n## 0.4.1\n### Changed\n- Fix bug when deleting coinbase
  transactions.\n- Extended public key API support.\n\n## 0.4.0\n### Changed\n- Generate
  events for mempool transactions.\n- Respond with entire block data when querying
  blocks by height.\n\n## 0.3.1\n### Changed\n- Do not import transactions to mempool
  while not synced.\n- Only sync mempool against a single peer.\n- Allow duplicate
  transactions to fix re-introduced sync bug.\n\n## 0.3.0\n### Added\n- Update dependencies.\n-
  Keep orphan blocks and deleted transactions in database.\n- Add a `mainchain` field
  for block data and a `deleted` field for transactions.\n- Stream records for performance.\n-
  Show witness data for transaction inputs in SegWit network.\n- Support RBF in SegWit
  network.\n\n### Changed\n- Refactor all data access code away from actor.\n- Refactor
  import logic away from actor.\n- Abstract data access using typeclasses.\n- Implement
  data access using clean layered architecture.\n- Make most of import logic code
  pure.\n- Database now in `db` as opposed to `blocks` directory.\n- Use latest `haskoin-node`.\n\n###
  Removed\n- Remove some data from peer information output.\n- Remove full transaction
  from address transaction data.\n- Remove limits from address transaction data.\n-
  Remove block data from previous output.\n- Remove spender from JSON response when
  output not spent.\n- Remove block hash from block reference.\n\n## 0.2.3\n### Removed\n-
  Do not send transaction notifications if a block is being imported.\n\n## 0.2.2\n###
  Added\n- Peer information endpoint.\n\n### Changed\n- Update `haskoin-node`.\n\n##
  0.2.1\n### Changed\n- Fix tests\n\n## 0.2.0\n### Added\n- Documentation everywhere.\n-
  Ability to retrieve address transactions.\n\n### Changed\n- New versions of NQE
  and Haskoin Node upstream.\n- Improve and simplify API.\n- Multi-element endpoints
  return arrays of arrays.\n- Database snapshots for all queries are now mandatory.\n\n###
  Removed\n- Retrieving unspent and spent outputs for an address.\n- Redundant API
  endpoints for multiple elements.\n\n## 0.1.3\n### Changed\n- Fix a bug with transaction
  notifications.\n- Improve handling orphan transactions.\n\n## 0.1.2\n### Changed\n-
  Specify dependencies better.\n\n## 0.1.1\n### Changed\n- Dependency `secp256k1`
  is now `secp256k1-haskell`.\n\n## 0.1.0\n### Added\n- New `CHANGELOG.md` file.\n-
  Bitcoin (BTC) and Bitcoin Cash (BCH) compatibility.\n- RocksDB database.\n- Mempool
  support.\n- HTTP streaming for events.\n- CashAddr support.\n- Bech32 support.\n-
  Rate limits.\n\n### Changed\n- Split out of former `haskoin` repository.\n- Use
  hpack and `package.yaml`.\n\n### Removed\n- Removed Stylish Haskell configuration
  file.\n- Remvoed `haskoin-core` and `haskoin-wallet` packages from this repository.\n"
basic-deps:
  http-client: '>=0.6.4.1'
  cereal: '>=0.5.8.1'
  haskoin-core: '>=0.19.0'
  bytestring: '>=0.10.10.0'
  base: '>=4.9 && <5'
  unordered-containers: '>=0.2.10'
  text: '>=1.2.3.0'
  network: '>=3.1.1.1'
  data-default: '>=0.7.1.1'
  wreq: '>=0.5.3.2'
  containers: '>=0.6.2.1'
  lens: '>=4.18.1'
  binary: '>=0.8.8.0'
  mtl: '>=2.2.2'
  hashable: '>=1.3.0.0'
  deepseq: '>=1.4.4.0'
  string-conversions: '>=0.4.0.1'
  scotty: '>=0.11.5'
  http-types: '>=0.12.3'
  aeson: '>=1.4.7.1'
  bytes: '>=0.17'
all-versions:
- 0.25.0
- 0.25.1
- 0.25.2
- 0.25.3
- 0.25.4
- 0.26.0
- 0.26.1
- 0.26.2
- 0.26.3
- 0.26.4
- 0.26.5
- 0.26.6
- 0.27.0
- 0.28.0
- 0.29.0
- 0.29.1
- 0.29.3
- 0.30.0
- 0.30.1
- 0.31.0
- 0.32.0
- 0.32.1
- 0.32.2
- 0.32.3
- 0.33.0
- 0.33.1
- 0.34.0
- 0.34.1
- 0.34.2
- 0.34.3
- 0.34.4
- 0.34.5
- 0.34.6
- 0.34.7
- 0.35.0
- 0.35.1
- 0.35.2
- 0.36.0
- 0.36.2
- 0.36.4
- 0.37.0
- 0.37.1
- 0.37.2
- 0.37.3
- 0.37.4
- 0.37.5
- 0.38.0
- 0.38.1
- 0.40.0
- 0.40.2
- 0.41.0
- 0.41.3
- 0.42.1
- 0.43.0
- 0.44.0
- 0.45.0
- 0.46.1
- 0.46.2
- 0.46.3
- 0.46.4
- 0.46.6
- 0.47.0
- 0.47.1
- 0.47.2
- 0.47.3
- 0.47.4
- 0.48.0
- 0.49.0
- 0.50.1
- 0.51.0
- 0.52.0
author: Jean-Pierre Rupp
latest: 0.52.0
description-type: markdown
description: |
  # Haskoin Store

  Block chain store and index featuring:

  - Persistent storage using [RocksDB](https://rocksdb.org/).
  - [Bitcoin Cash (BCH)](https://www.bitcoincash.org/) support.
  - [Bitcoin Core (BTC)](https://bitcoin.org/) support.
  - Indices for address balances, transactions, and unspent outputs (UTXO).
  - Persistent mempool.
  - Replace Bitcoin Core (BTC) RBF transactions by default.
  - Query transactions, balances and UTXO on extended keys (xpub).
  - Optional accelerated xpub cache using Redis.
  - RESTful API with JSON and binary serialization.
  - High performance concurrent architecture.

  ## Quick Install with Nix Anywhere

  * Get [Nix](https://nixos.org/nix/).

  ```sh
  nix-env --install stack
  git clone https://github.com/haskoin/haskoin-store.git
  cd haskoin-store
  stack --nix build --copy-bins
  ~/.local/bin/haskoin-store --help
  ```

  ## Install on Ubuntu 20.04 or Debian 10

  * Get [Stack](https://haskellstack.org/)

  ```sh
  apt install git libsecp256k1-dev librocksdb-dev pkg-config
  git clone https://github.com/haskoin/haskoin-store.git
  cd haskoin-store
  stack build --copy-bins
  ~/.local/bin/haskoin-store --help
  ```

  ## Non-Haskell Dependencies

  * [libsecp256k1](https://github.com/Bitcoin-ABC/secp256k1)
  * [RocksDB](https://github.com/facebook/rocksdb/)

  ## API Documentation

  * [Swagger API Documentation](https://api.haskoin.com/).
license-name: MIT
