all-versions:
- '1.1'
- 1.1.1
- '1.2'
- 1.2.1
- 1.2.2
- 1.2.4
- 1.2.5
- 1.2.6
author: João Saraiva
basic-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>4 && <5'
  mtl: '>=0'
changelog: ''
changelog-type: ''
description: "HaLeX\n=====\n\n\n  HaLeX: A Haskell Library to Model, \n                              Manipulate
  and \n                              Visualize Regular Languages\n\n        http://www.di.uminho.pt/~jas/Research/HaLeX\n\nCopyright
  João Saraiva\n          Department of Computer Science,\n          University of
  Minho, \n          Braga, Portugal\n          saraiva@di.uminho.pt\n\n\nVersion:
  1.2.6 (January, 2017)\n\n\n1- What is HaleX\n----------------\n\nHaLeX is a library
  of datatypes and functions implemented in Haskell\nthat allows us to model, manipulate
  and animate regular languages.\n\nThis library was developed in the context of a
  programming methodology\ncourse for undergraduate students, and as a consequence,
  it was\ndefined mainly for educational purposes.\n\n\n2- Features of the Library\n--------------------------\n\nThe
  library provides the following features:\n\n  - The definition of deterministic
  finite automata, non-deterministic\n  finite automata, and regular expressions directly
  and\n  straightforwardly in Haskell.\n\n  - The definition of the acceptance functions
  for all those models.\n\n  - The transformation from regular expressions into non-deterministic\n
  \ finite automata (NDFA) and from NDFA into deterministic finite\n  automata (DFA).\n\n
  \ - The transformation from NDFA and DFA into regular expressions\n\n  - The minimization
  of the number of states of deterministic finite\n  automata.\n\n  - The equivalence
  of regular expressions and finite automata.\n\n  - The graphical representation
  of finite automata.\n\n  - The definition of reactive finite automata.\n\n  - The
  automatic animation of the acceptance function of finite automata.\n\n       The
  animations are produced in an external tool: the\n       high-quality graph visualization
  system GraphViz. Thus, to be\n       able to visualize and animate regular languages,
  you have to\n       install GraphViz tool.\n\n       The GraphViz system is public
  domain and it is available at:\n\n            http://www.research.att.com/sw/tools/graphviz/\n\n\n3-
  The HaLeX Library\n--------------------\n\n   The library consists of the following
  modules:\n\n   - RegExp.hs             -> Regular Expressions\n   - Dfa.hs                ->
  Deterministic Finite Automata (DFA)\n   - Ndfa.hs               -> Non Deterministic
  Finite Automata (NDFA)\n   - RegExp2Fa.hs          -> Converts Regular expressions
  into Finite Automata\n   - RegExpAsDiGraph.hs    -> Graphic Representation of Regular
  Expressions\n   - FaAsDiGraph.hs        -> Graphic Representation of Finite Automata\n
  \                               (using GraphViz language/tools)\n   - FaOperations.hs
  \      -> Operations on Finite Automata\n                                (ndfa2dfa
  , dfa2ndfa, unions , concats, etc)\n   - FaClasses.hs          -> Type Classes to
  overload operations\n   - Minimize.hs           -> Minimization of the number of
  states \n   - Equivalence.hs        -> Equivalence of Regular Expressions/Automata\n
  \  - ReactiveDfa.hs        -> Reactive Finite Automata\n   - Dfa2MDfa.hs           ->
  Produces a Reactive Dfa from a DFA\n   - RegExpParser.hs       -> Simple Parser
  for Concrete Regular Expressions\n                                (Unix like notation)\n
  \  - Parser.hs             -> Basic Parser Combinators\n\n   - Main.hs               ->
  The Main Module of halex Tool (see next section)\n   - MainAnim.hs           ->
  The Main Fomule to run Animations\n\n   - faAnin.lefty          -> A script written
  in lefty (one of GraphViz tools)\n                              that animates the
  acceptance function\n\n\n4- Using HaLeX: The halex Tool\n------------------------------\n\nThe
  HaLeX library includes a useful tool to manipulate and vizualize\nregular languages:
  the halex tool. This is a batch tool that can be\nused in Unix pipes. It accepts
  as input a regular expression and it\nproduces Haskell or graphic representations
  (graphviz) based on finite\nautomata.\n\nTo install the halex tool, just compile
  the library modules using a\nHaskell compiler (see file INSTALL).\n\n\n4.1 The synopsis
  of halex is:\n----------------------------\n\nUsage: halex options [file] ...\n\nList
  of options:\n  -N, -n                --NDFA                       generate Non-Deterministic
  Finite Automaton\n  -D, -d                --DFA                        generate
  Deterministic Finite Automaton\n  -M, -m                --MinDfa                     generate
  Minimized Deterministic Finite Automaton\n  -E, -e                --Dfa with Effects
  \          generate Reactive Deterministic Finite Automaton\n  -G, -g                --graph
  \                     generate GraphViz input file\n  -S, -s                --Sync
  State                 include a Synk State In the Graph Representation\n  -R string,
  -r string  --regular expression=string  specify regular expression\n  -o file               --output=file
  \               specify output file\n  -h, -?                --help                       output
  a brief help message\n\n\n4.2 Running halex: some Examples\n--------------------------------\n\n
  \ - Generating a Haskell-based NDFA\n\n       halex -N -R\"('+'|'-')?d*('.')?d+\"\n\n\n
  \ - Producing the postscript of the graphic representation of a NDFA\n\n       halex
  -N -G -R\"('+'|'-')?d*('.')?d+\" | dot -Tps\n\n\n  - DFA with minimal number of
  states, visualized with dotty (one of\n    GraphViz tools)\n\n       halex -D -M
  -G -R\"('+'|'-')?d*('.')?d+\" | dotty -\n\n\n  - Proving one law of the algebra
  of regular expressions\n\n       halex -R\"a*\" -R\"(a+)?\"\n\n\n4.2.1 Running one
  Animation\n--------------------------\n\n    - First, we have to configure the path
  in the makefile\n    Make_Animation (subdirectory scripts) that produces the executable\n
  \   for the animation. Update the variable HaLeX_DIR with the location\n    of the
  HaLeX library oin your machine.\n\n    - The above makefile, uses the Haskell main
  module MainAnim.hs\n    (subdirectory src) which calls the GraphViz tool lefty with
  the\n    script that animates the finite automata (file faAnim.lefty in\n    subdirectory
  scripts). Edit that module and update the path of\n    lefty_tool constant function.\n\n\n
  \   - After that we are able to produce and run the animations. For\n    example,
  we can produce the reactive finite automata as\n    follows\n\n          halex -E
  -M -R\"('+'|'-')?d*('.')?d+\"\n\n      which generates the automaton (in this case,
  the minimized\n      automaton, due to the use of the -M option) in the file\n      GenMDfa.hs.\n\n
  \   - The Haskell module MainAnim is the main module to run the animations.\n      It
  imports the previouly generated GenMDfa and it produces the\n      animations.\n\n
  \     Its main function accepts as argument the sentence to be\n      accepted/animated
  by the acceptance function and calls the lefty\n      tool.\n\n    - The lefty tool
  interprets the lefty script (faAnim.lefty), which\n      produces the animations.
  Lefty provides the text view of the\n      script. To start running the animation
  we have to call the\n      functions provided in the lefty script:\n\n            -
  fa.init()\n            - fa.main()\n\n      which initialize the lefty tool and
  the animation. Write these\n      functions in the top frame followed by return.
  At this moment, a\n      new window will be displayed that contains the graphic\n
  \     representation of the input. The right button of the mouse\n      provides
  a set of operations to run the animation\n      (forwards/backwards, adjusting the
  speed, tracking the path,\n      etc)\n\n\n6- Lecture/Exercise Notes\n-------------------------\n\nI
  have started developing the HaLeX library in 2000 in the context of\na third year
  course on programming methodology. This course has a\nworking load of 24 hours of
  theoretical classes and another 24 hours\nof laboratory classes, running for 12
  weeks (\\ie, a semester). The\ntheoretical classes introduce the basic concepts
  of regular\nexpressions, finite automata and context-free languages. HaLeX is\nused
  to support such classes. In the laboratory (a two hour class per\nweek) the students
  have to solve exercises using a computer. \n\nI have defined eleven exercise sets
  (one per week), using literate\nHaskell, that the students have to complete. Each
  set of exercises\ndefines a module of the \\HaLeX\\ library. Thus, at the end of
  the\ncourse the students have a complete documentation of all the exercises\nand
  topics covered in the course, and, also, of the HaLeX library.\n\nThe Exercise Notes
  are (still in Portuguese...) avaliable at the HaLeX\nhomepage.\n\n\n"
description-type: markdown
hash: 25ab6a4854d5416564aa094ce8947680420781e8bebd9d8e1d586f8f8372b4cd
homepage: http://www.di.uminho.pt/~jas/Research/HaLeX/HaLeX.html
latest: 1.2.6
license-name: LicenseRef-PublicDomain
maintainer: João Saraiva <saraiva@di.uminho.pt>
synopsis: HaLeX enables modelling, manipulation and visualization of regular languages
test-bench-deps: {}
