all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
author: Malvin Gattinger
basic-deps:
  QuickCheck: '>=2.4 && <2.15'
  base: '>=4.8 && <5'
  directory: <1.4
  process: '>=1.1 && <1.7'
changelog: |
  # HasCacBDD Changelog

  ## v0.3.0.1 (2025-10-22)

  - let `svgGraph` try to find the `dot` executable in multiple common locations. This should make it work on non-Linux systems. (Thanks to @MitchBoontjes for the original patch.)
  - add tests for `Data.HasCacBDD.Visuals` module.

  ## v0.3.0.0 (2025-01-01)

  - add `optimalOrder`
  - fix segfault on Apple M1 and ARM aarch64
  - minor improvements of documentation and tests

  ## v0.2.0.0 (2023-11-23)

  - rename `forall` (soon a keyword in GHC) to `forall_` and `exists` to `exists_`

  ## v0.1.0.4 (2023-02-03)

  Maintenance release.

  - Faster subsOf and sizeOf.

  ## v0.1.0.3 (2020-06-30)

  Maintenance release.

  - fix an error which caused `svgGraph` to hang on long outputs.
  - add `Read` and `Eq` classes for BddTree.
  - a few more tests.

  ## v0.1.0.2 (2019-06-19)

  Correction to extra library paths defined in custom `Setup.hs`. This should fix problems when HasCacBDD is used as a dependency in projects with recent stack versions.

  ## v0.1.0.1 (2019-01-24)

  - new functions: `relabelFun`, `substit`, `substitSimul`
  - simplified test suite
  - improve documentation and hints to get started

  ## v0.1.0.0 (2017-03-09)

  First complete release, also available on hackage.
changelog-type: markdown
description: |
  HasCacBDD
  =========

  [![Release](https://img.shields.io/github/release/m4lvin/HasCacBDD.svg)](https://github.com/m4lvin/HasCacBDD/releases)
  [![Hackage](https://img.shields.io/hackage/v/HasCacBDD.svg)](https://hackage.haskell.org/package/HasCacBDD)
  [![GitLab CI](https://gitlab.com/m4lvin/HasCacBDD/badges/main/pipeline.svg)](https://gitlab.com/m4lvin/HasCacBDD/-/pipelines)
  [![Test Coverage](https://gitlab.com/m4lvin/HasCacBDD/badges/main/coverage.svg)](https://gitlab.com/m4lvin/HasCacBDD/-/jobs/artifacts/main/file/hpc/combined/all/hpc_index.html?job=test)

  Haskell bindings for CacBDD, a Binary Decision Diagram (BDD) package with dynamic cache management.

  Original C++ code from <http://kailesu.net/CacBDD> and a C wrapper are included.


  # Getting Started

  1. Install C compilers and stack if necessary:

         apt install build-essential git
         curl -sSL https://get.haskellstack.org/ | sh

  2. Download, build and load the lastest version:

         git clone https://github.com/m4lvin/HasCacBDD.git
         cd HasCacBDD
         stack setup
         stack build
         stack exec ghci

      Note: `stack ghci` apparently does not work with the shared library.
      You really need `stack build` and then `stack exec ghci`.

      To use cabal instead of stack: `cabal build`, then `cabal exec ghci` and then `:set -package HasCacBDD`.

  3. Now you can play with Boolean functions :-)

         位> import Data.HasCacBDD
         位> var 5
         Var 5 Top Bot
         位> neg (var 5)
         Var 5 Bot Top
         位> dis (neg (var 3)) (var 3)
         Top

  For further documentation, see <https://hackage.haskell.org/package/HasCacBDD/docs/Data-HasCacBDD.html>
description-type: markdown
hash: a28bb12458612db8f2a107ecb95f5025cc60402cf7ca1d4713b7b477b97de81a
homepage: https://github.com/m4lvin/HasCacBDD
latest: 0.3.0.1
license-name: GPL-2.0-only
maintainer: malvin@w4eg.de
synopsis: Haskell bindings for CacBDD
test-bench-deps:
  HasCacBDD: '>=0'
  QuickCheck: '>2.4'
  base: '>=4.8'
  hspec: <2.12
