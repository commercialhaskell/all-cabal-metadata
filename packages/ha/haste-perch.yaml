all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
author: Alberto G. Corona
basic-deps:
  base: '>4.0 && <5'
  haste-compiler: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "Perch\r\n=================\r\n![perch](http://www.designboom.com/history/wirehangers/whnew.gif)\r\n\r\nPerch
  defines builder elements (perchs) for Haste.DOM elements that are appendable, so
  that dynamic HTML can be created in the client in a natural way, like textual HTML,
  but programmatically and with the advantage of static type checking. It can be ported
  to other haskell-js compilers\r\n\r\nHaste is a compiler that generates Javascript
  code from Haskell.\r\n\r\nhttps://github.com/valderman/haste-compiler\r\n\r\nThe
  Haste.DOM module define a thin layer over the JavaScript DOM. The DOM is a low level
  HTML tree manipulation API. That makes the creation and manipulation of DOM elements
  almost as painful as in JavaScript.\r\n\r\nThis package makes the creation of DOM
  elements easy with a syntax  similar to other haskell HTML generators, using monoids
  and monads, such is the case of the package blaze-html.\r\n\r\nhttp://hackage.haskell.org/package/blaze-html\r\n\r\nThis
  is an example. `withElem`  is a Haste.DOM call that give the DOM object whose id
  is \"idelem\", that has been created \"by hand\" in Main.hs. The program takes this
  element and add content to it:\r\n\r\n```haskell\r\nimport Haste.Perch\r\nimport
  Haste\r\nimport Prelude hiding (div)\r\n\r\nmain :: IO ()\r\nmain = do\r\n  withElem
  \"idelem\" $ build $ do\r\n    div $ do\r\n      addEvent this OnClick $ \\_ _ ->
  alert \"hello, world!\"\r\n      div $ do\r\n        p \"hello\"\r\n        p !
  atr \"style\" \"color:red\" $ \"world\"\r\n  return ()\r\n```\r\n\r\nCreates these
  element:\r\n\r\n```html\r\n<div id=\"idelem\">  <!-- was already in the HTNL -->\r\n
  \ <div>\r\n    <div>\r\n      <p>hello</p>\r\n      <p style=\"color:red\">world</p>\r\n
  \   </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nThis other example modifies the previosly
  created elements when the event is raised using jQuery-like wildcards to modify
  all the elements of the class \".modify\":\r\n\r\n```haskell\r\nimport Haste.Perch\r\nimport
  Haste\r\nimport Prelude hiding (div)\r\n\r\nmain= do\r\n  body <- getBody\r\n  (flip
  build) body $ do\r\n      div ! atr \"class\" \"modify\" $ \"click\"\r\n      div
  $ \"not changed\"\r\n      div ! atr \"class\" \"modify\" $ \"here\"\r\n      \r\n
  \     addEvent this OnClick $ \\_ _ -> do\r\n          forElems' \".modify\" $ this
  ! style \"color:red\" `child` \" modified\"\r\n```\r\n\r\nThe  monoid expression
  can also be used, by concatenating elements with the operator <>\r\n\r\n        ...
  term1 <> term2 ...\r\n\r\n\r\nIs equivalent to\r\n\r\n    do ...\r\n       term1\r\n
  \      term2\r\n       ...\r\n\r\nHow to run\r\n----------\r\n\r\n### Docker file\r\n\r\n\r\nhttps://registry.hub.docker.com/u/agocorona/tryhplay/\r\n\r\nContains
  everything necessary to use haste-perch\r\n\r\n### install from scratch\r\n\r\ninstall
  the ghc compiler\r\n\r\ninstall Haste:\r\n\r\n    >cabal install haste-compiler\r\n\r\nboot
  Haste:\r\n\r\n    >haste-boot\r\n\r\nclone haste-perch\r\n\r\n    >git clone http://github.com/agocorona/haste-perch.git\r\n\r\ninstall
  perch\r\n\r\n    >cd haste-perch\r\n    >haste-inst install\r\n\r\ncompile the main
  program\r\n\r\n    >hastec Main.hs\r\n\r\nbrowse the Main.html file. In windows
  simply execute it in the command line:\r\n\r\n    >Main.html\r\n\r\nExecute it in
  the same directory where Main.js is, since it references it assuming that it is
  in the current folder\r\n\r\nPerch not only is for creating HTML.DOM elements, it
  also can be used to navigate the tree, search\r\netc.\r\n\r\n\r\nHow it works\r\n------------\r\n\r\nThe
  basic element is a \"builder\" that has a \"hole\" parameter and a IO action which
  creates the DOM element. The hole will receive the parent (Elem) of the element/s
  that will be created by the builder. So a builder can be considered like a perch
  that has other perchs that hang from it. Either a no one or an entire tree.\r\n\r\nthe
  call `nelem` (new element) is a perch that creates a single DOM element. Upon created,
  it  is added to the parent and return itself as parent of the next elements that
  can be hooked from it if `child` is used. When appending two elements, both are
  added to the parent.\r\n\r\nThe Monad instance is there in order to use the do notation,
  that add a new level of syntax, in the style of the package blaze-html. This monad
  invokes the same appending mechanism.\r\n\r\nA perch is a generalization of a list
  and it is handled in the same way.\r\n\r\nWhile a list is an unary tree, perch create
  n-ary trees. While in a list the monoid instance add child nodes\r\ndown in the
  only direction that it can grow, the perch monoid add childs at the same level,
  horizontally.\r\nIs the `child` primitive the one that creates branches down.\r\n"
description-type: markdown
hash: 472d781b871ad234623206fa8151c704f85c6d5a300a0be0caa2d2f872c23231
homepage: https://github.com/agocorona/haste-perch
latest: 0.1.0.9
license-name: GPL-3.0-only
maintainer: agocorona@gmail.com
synopsis: Create, navigate and modify the DOM tree with composable syntax, with the
  haste compiler
test-bench-deps: {}
