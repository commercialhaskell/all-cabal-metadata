all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Benno F端nfst端ck
basic-deps:
  base: '>=4.4 && <5'
  containers: '>=0'
  haskell-src-exts: '>=0'
  template-haskell: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "haskell-generate\n================\n\n[![Build Status](https://secure.travis-ci.org/bennofs/haskell-generate.png?branch=master)](http://travis-ci.org/bennofs/haskell-generate)\n\n##
  Introduction\n\nIf you want to generate haskell source code, you could build up
  haskell-src-exts AST and then pretty print it. But that's easy to screw up, because
  haskell-src-exts doesn't include tag it's AST with a type. This library aims to
  fill the gap, adding type information to haskell-src-exts expressions and also managing
  imports for you.\n\n## Getting started\n\nFirst, you need to import this library:\n\n```haskell\nimport
  Language.Haskell.Generate\n```\n\nThis module reexports `Language.Haskell.Exts.Syntax`,
  because haskell-generate builds on top of that.\n\nThere are two main types in haskell-generate.
  The first is the monad `Generate` and the type alias `ExpG`. The `Generate` monad
  is used to track required imports. It also allows to generate unique names. `ExpG
  t` is just an action in the `Generate` monad that returns an expression of type
  `t`.\n\nHow do you build expressions? There is a number of predefined expressions
  for the functions in the\nPrelude. This allows you to just use these and combine
  them to new expressions. For example, let's define a expression that reads a file
  called \"names\":\n\n```haskell \nreadNamesFile' :: ExpG (IO String)\nreadNamesFile'
  = readFile' <>$ expr \"names\"\n```\n\nHere we use `(<>$)` to apply the `readFile'`
  expression to the string `names`. `readFile'` is one of the expressions already
  provided by haskell-generate. All expressions that are provided by haskell-generate
  end with an apostrophe. You can find more of them in the module `Language.Haskell.Generate.PreludeDef`.
  The `expr` function is used to lift the string `names` into an expression of type
  `ExpG String`.\n\nNow that we have an expression, we need to bind it to a name in
  a module. For this job, we use another monad, the `ModuleM` monad. It allows you
  to bind expressions to names and then generate\na module with those names.\n\nHere's
  how we generate our module:\n\n```haskell\nmyModule :: ModuleG\nmyModule = do\n
  \ d <- addDecl (Ident \"main\") $ applyE2 bind' readNamesFile' putStrLn'\n  return
  $ Just [exportFun d]\n```\n\n`ModuleG` is again a type synonym for an action in
  the `ModuleM` monad. It must either return Nothing (which omits the export list)
  or an export list. In this case, we export the \"main\" function, which we previously
  defined using `addDecl`.\n\nThe only thing left to do is to generate the actual
  source code for the module, for which we\nuse the `generateModule` function, which
  takes the module name as an argument:\n\n```haskell\nmain :: IO ()\nmain = putStrLn
  $ generateModule myModule \"Main\"\n```\n\nIf you run the program, you'll get the
  following output:\n\n```haskell\nmodule Main (main) where\nimport qualified GHC.Base\nimport
  qualified System.IO\nmain\n  = (GHC.Base.>>=) (System.IO.readFile ['n', 'a', 'm',
  'e', 's'])\n      System.IO.putStrLn\n```\n\nIf you run this code, you'll get the
  contents of the \"names\" file. The code is a bit ugly and uses\nqualified imports
  to avoid name clashes, but it works.\n\n## Importing functions\n\nUntil now, we've
  only used the predefined expressions from `Language.Haskell.Generate.PreludeDef`,
  but often you'll want to use definitions from other modules that you might want
  to use.\n\nYou can do that using the `useValue` from haskell-generate. Let's look
  at the type of `useValue`:\n\n```haskell\nuseValue :: String -> Name -> ExpG t\n```\n\n`useValue`
  takes a module name in which the function is defined and the name of the function.
  It returns an expression of any type you which. This function is unsafe, because
  it cannot check that the returned type is actually the type of the function. That's
  why you usually given `useValue` an explicit type signature.\n\nFor example, suppose
  we want to use the function `permutations` from Data.List. We write the following
  definition for it:\n\n```haskell\npermutations' :: ExpG ([a] -> [[a]]) -- Here we
  given an explicit type for permutations'. This is not checked, so make sure it's
  actually right!\npermutations' = useValue \"Data.List\" (Ident \"permutations\")
  -- \"permutations\" is an identifier, not a symbol, so we use the \"Ident\" constructor.\n```\n\n##
  Using TH to automagically import functions\n\nIf the function you want to import
  is already available at compile time, you can use the template haskell code from
  `Language.Haskell.Generate.TH` to generate the expression definitions. This is the
  approach we use for the Prelude, as an example.\n\nUsing the example from the previous
  section, we could also import the `permutations` function like this:\n\n```haskell\n--
  at the top of the file:\n{-# LANGUAGE TemplateHaskell #-} -- Enable template haskell\nimport
  Data.List (permutations) -- The function needs to be available at compile time\n\ndeclareFunction
  'permutations -- This generates the same code as above, but is more type-safe because
  you don't have to specify the type yourself.\n```\n\n\n## Contributing\n\nIf you
  have an idea, a question or a bug report, open an issue on github. You can also
  find me on freenode in the #haskell channel, my nick is bennofs.\n"
description-type: markdown
hash: 09d5595395bdd4181017e48836fed9339dfd399ab169192e08a7f52d05116c44
homepage: http://github.com/bennofs/haskell-generate/
latest: 0.2.4
license-name: BSD-3-Clause
maintainer: Benno F端nfst端ck <benno.fuenfstueck@gmail.com>
synopsis: Typesafe generation of haskell source code
test-bench-deps:
  base: '>=0'
  directory: '>=1.0'
  doctest: '>=0.9.1'
  filepath: '>=0'
