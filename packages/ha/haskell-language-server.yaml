homepage: https://github.com/haskell/haskell-language-server#readme
changelog-type: markdown
hash: 6e9208c48d120f83f2716cb91dfe8da2a70f8abc9cb055c05605627392236143
test-bench-deps:
  lsp-test: ==0.13.0.0
  lsp: -any
  bytestring: -any
  extra: -any
  stm: -any
  base: '>=4.12 && <5'
  tasty-golden: -any
  blaze-markup: -any
  tasty-expected-failure: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  megaparsec: -any
  hspec-core: -any
  filepath: -any
  process: -any
  data-default: -any
  hie-bios: -any
  containers: -any
  ghcide: -any
  lens: -any
  hslogger: -any
  tasty-hunit: -any
  tasty-rerun: -any
  transformers: -any
  temporary: -any
  tasty: -any
  deepseq: -any
  hls-plugin-api: '>=1.0.0.0 && <1.1'
  aeson: -any
  yaml: -any
  hspec-expectations: -any
  tasty-ant-xml: '>=1.1.6'
  directory: -any
maintainer: alan.zimm@gmail.com
synopsis: LSP server for GHC
changelog: "# Changelog for haskell-language-server\r\n\r\n## 1.0.0\r\n\r\nThis is
  the celebratory release of Haskell Language Server 1.0.0!\r\nThis release includes
  a lot of internal changes, bug fixes, leaks plugged, and performance improvements,
  thanks to all our contributors.\r\nAmong others,\r\n- We added the support for GHC
  8.10.4, and removed the support for GHC 8.10.1\r\n    Afterward, we will support
  upmost 3 patch versions for each minor version of GHC, if no special situation happens.\r\n-
  As by hie-bios >= 0.7.3, we use (`${XDG_CACHE_HOME}`)[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html]`/hie-bios/...`
  (or similar depends on OS) as a build directory for Cabal.\r\n- Now Eval plugin
  uses the parsing mechanism of GHC and becomes more stable.\r\n- We supports a code
  action to disambiguate the same identifiers from multiple imports.\r\n    ![gif](https://user-images.githubusercontent.com/21860/106387152-bfd16d80-641b-11eb-9394-c553fad5794b.gif)\r\n-
  We supports a code action to hide shadowed identifiers from import.\r\n    ![gif](https://user-images.githubusercontent.com/26041945/107199055-e05b8200-6a30-11eb-9198-448ab8604cc0.gif)\r\n-
  HIE DB is now integrated. This means we now support `find-references`, `workspace-symbol`.
  `find-definition` is also improved in a project with multiple components.\r\n- Brittany
  and Stylish-haskell plugins now load language extensions from the ghc session.\r\n-
  Tactic plugin supports eta-reduction and Agda-like split tactic and can create a
  function with piecewise definitions.\r\n    ![gif](https://user-images.githubusercontent.com/307223/107991243-0af68f00-6f8b-11eb-9ff9-3e9a7363ba5f.gif)\r\n\r\n###
  Pull requests merged for 1.0.0\r\n\r\n- Correctly split non-varpats in tactics\r\n([#1427](https://github.com/haskell/haskell-language-server/pull/1427))
  by @isovector\r\n- Move tactics tests to be standalone\r\n([#1425](https://github.com/haskell/haskell-language-server/pull/1425))
  by @isovector\r\n- Fix the handling of default HLS config again\r\n([#1419](https://github.com/haskell/haskell-language-server/pull/1419))
  by @pepeiborra\r\n- Patch pre-commit-hook to work with GHCIDE/hls-plugin-api codes\r\n([#1418](https://github.com/haskell/haskell-language-server/pull/1418))
  by @Ailrun\r\n- Refactor pragmas plugin\r\n([#1417](https://github.com/haskell/haskell-language-server/pull/1417))
  by @berberman\r\n- Add a test for #1376\r\n([#1414](https://github.com/haskell/haskell-language-server/pull/1414))
  by @pepeiborra\r\n- Reenable HLS example benchmark\r\n([#1412](https://github.com/haskell/haskell-language-server/pull/1412))
  by @pepeiborra\r\n- Fix pre-commit-hook\r\n([#1411](https://github.com/haskell/haskell-language-server/pull/1411))
  by @Ailrun\r\n- Plugin Config: Add maxCompletions to JSON instance\r\n([#1407](https://github.com/haskell/haskell-language-server/pull/1407))
  by @andys8\r\n- Remove custom 'trim' implementation\r\n([#1406](https://github.com/haskell/haskell-language-server/pull/1406))
  by @fendor\r\n- Update to hie-bios 0.7.4\r\n([#1405](https://github.com/haskell/haskell-language-server/pull/1405))
  by @fendor\r\n- Prepare 1.0.0 release\r\n([#1402](https://github.com/haskell/haskell-language-server/pull/1402))
  by @Ailrun\r\n- Fix install script after hlint fixes\r\n([#1400](https://github.com/haskell/haskell-language-server/pull/1400))
  by @jhrcek\r\n- Use last with-utf8 to fix #1372\r\n([#1399](https://github.com/haskell/haskell-language-server/pull/1399))
  by @jneira\r\n- Implement Tactic Featuresets\r\n([#1398](https://github.com/haskell/haskell-language-server/pull/1398))
  by @isovector\r\n- Update hie-bios\r\n([#1397](https://github.com/haskell/haskell-language-server/pull/1397))
  by @Ailrun\r\n- Bump plugins versions\r\n([#1392](https://github.com/haskell/haskell-language-server/pull/1392))
  by @pepeiborra\r\n- Split main Tactics module\r\n([#1391](https://github.com/haskell/haskell-language-server/pull/1391))
  by @isovector\r\n- Prepare ghcide release 0.7.5\r\n([#1389](https://github.com/haskell/haskell-language-server/pull/1389))
  by @pepeiborra\r\n- Disable HLS benchmark example\r\n([#1388](https://github.com/haskell/haskell-language-server/pull/1388))
  by @pepeiborra\r\n- Fix GenChangelog script format\r\n([#1387](https://github.com/haskell/haskell-language-server/pull/1387))
  by @Ailrun\r\n- Tone down some logInfos to logDebug\r\n([#1385](https://github.com/haskell/haskell-language-server/pull/1385))
  by @pepeiborra\r\n- Add a pre commit hook for code formatting\r\n([#1384](https://github.com/haskell/haskell-language-server/pull/1384))
  by @Ailrun\r\n- remove unsafePerformIO\r\n([#1383](https://github.com/haskell/haskell-language-server/pull/1383))
  by @pepeiborra\r\n- Use object code for TH+UnboxedTuples/Sums\r\n([#1382](https://github.com/haskell/haskell-language-server/pull/1382))
  by @wz1000\r\n- Update stack resolvers 8.10.3/8.10.4\r\n([#1380](https://github.com/haskell/haskell-language-server/pull/1380))
  by @jneira\r\n- Agda-style case splitting for tactics\r\n([#1379](https://github.com/haskell/haskell-language-server/pull/1379))
  by @isovector\r\n- Configuration for initial ghc lib dir\r\n([#1378](https://github.com/haskell/haskell-language-server/pull/1378))
  by @pepeiborra\r\n- Use lsp-1.1.1\r\n([#1377](https://github.com/haskell/haskell-language-server/pull/1377))
  by @wz1000\r\n- use implicit-hie cradle from setInitialDynFlags\r\n([#1375](https://github.com/haskell/haskell-language-server/pull/1375))
  by @wz1000\r\n- Add test for multi-component goto def and make runLanguageServer
  responsible for hiedb\r\n([#1373](https://github.com/haskell/haskell-language-server/pull/1373))
  by @wz1000\r\n- Show window message when auto extending import lists\r\n([#1371](https://github.com/haskell/haskell-language-server/pull/1371))
  by @berberman\r\n- Another extension that Brittany cannot parse\r\n([#1369](https://github.com/haskell/haskell-language-server/pull/1369))
  by @pepeiborra\r\n- Clean dependency data structures and speed up GetDependencies\r\n([#1368](https://github.com/haskell/haskell-language-server/pull/1368))
  by @pepeiborra\r\n- Catch GHC errors in listing module names\r\n([#1367](https://github.com/haskell/haskell-language-server/pull/1367))
  by @berberman\r\n- Lose the ghc-lib flag\r\n([#1366](https://github.com/haskell/haskell-language-server/pull/1366))
  by @pepeiborra\r\n- Make StylishHaskell plugin recognize extensions from DynFlags\r\n([#1364](https://github.com/haskell/haskell-language-server/pull/1364))
  by @Ailrun\r\n- Pass language extensions to Brittany\r\n([#1362](https://github.com/haskell/haskell-language-server/pull/1362))
  by @pepeiborra\r\n- Sanitize the setup of the default Ide.Config\r\n([#1361](https://github.com/haskell/haskell-language-server/pull/1361))
  by @pepeiborra\r\n- Fix completion snippets on DuplicateRecordFields\r\n([#1360](https://github.com/haskell/haskell-language-server/pull/1360))
  by @berberman\r\n- Index files on first open\r\n([#1358](https://github.com/haskell/haskell-language-server/pull/1358))
  by @wz1000\r\n- Make find-definition work better with multi-components\r\n([#1357](https://github.com/haskell/haskell-language-server/pull/1357))
  by @wz1000\r\n- Construct record datacons in tactics\r\n([#1356](https://github.com/haskell/haskell-language-server/pull/1356))
  by @isovector\r\n- Don't insert parentheses for top-level tactics holes\r\n([#1352](https://github.com/haskell/haskell-language-server/pull/1352))
  by @isovector\r\n- Simplify extracts after running tactics\r\n([#1351](https://github.com/haskell/haskell-language-server/pull/1351))
  by @isovector\r\n- Fix code actions regression\r\n([#1349](https://github.com/haskell/haskell-language-server/pull/1349))
  by @pepeiborra\r\n- Refactor the hypothesis type in hls-tactics-plugin\r\n([#1347](https://github.com/haskell/haskell-language-server/pull/1347))
  by @isovector\r\n- Fix the Eval plugin sporadic exceptions\r\n([#1345](https://github.com/haskell/haskell-language-server/pull/1345))
  by @pepeiborra\r\n- Eval Plugin: Proper handling of flags in `:set`\r\n([#1343](https://github.com/haskell/haskell-language-server/pull/1343))
  by @konn\r\n- Cancel earlier queued benchmarks\r\n([#1339](https://github.com/haskell/haskell-language-server/pull/1339))
  by @pepeiborra\r\n- Default main for ghcide \r\n([#1338](https://github.com/haskell/haskell-language-server/pull/1338))
  by @pepeiborra\r\n- Fix duplication of code actions for adding NamedFieldPuns\r\n([#1334](https://github.com/haskell/haskell-language-server/pull/1334))
  by @berberman\r\n- Bump explicit-imports plugin\r\n([#1333](https://github.com/haskell/haskell-language-server/pull/1333))
  by @pepeiborra\r\n- Add support for ghc-8.10.4 and drop it for ghc-8.10.1\r\n([#1331](https://github.com/haskell/haskell-language-server/pull/1331))
  by @jneira\r\n- Prepare ghcide v0.7.4 release\r\n([#1328](https://github.com/haskell/haskell-language-server/pull/1328))
  by @pepeiborra\r\n- Add a new benchmark example to characterise multi-component
  performance\r\n([#1326](https://github.com/haskell/haskell-language-server/pull/1326))
  by @pepeiborra\r\n- [shake-bench] extract project dependencies action (for the HEAD
  binary)\r\n([#1325](https://github.com/haskell/haskell-language-server/pull/1325))
  by @pepeiborra\r\n- [shake-bench] collect eventlogs\r\n([#1324](https://github.com/haskell/haskell-language-server/pull/1324))
  by @pepeiborra\r\n- [benchmark] add warmups\r\n([#1323](https://github.com/haskell/haskell-language-server/pull/1323))
  by @pepeiborra\r\n- Add code action for hiding shadowed identifiers from imports\r\n([#1322](https://github.com/haskell/haskell-language-server/pull/1322))
  by @berberman\r\n- Parallelize benchmark CI\r\n([#1320](https://github.com/haskell/haskell-language-server/pull/1320))
  by @pepeiborra\r\n- Fix space leak on cradle reloads\r\n([#1316](https://github.com/haskell/haskell-language-server/pull/1316))
  by @pepeiborra\r\n- [benchmarks] speed up CI\r\n([#1315](https://github.com/haskell/haskell-language-server/pull/1315))
  by @pepeiborra\r\n- [benchmark] check digests for input files only\r\n([#1314](https://github.com/haskell/haskell-language-server/pull/1314))
  by @pepeiborra\r\n- Add link to hackage package to readme\r\n([#1313](https://github.com/haskell/haskell-language-server/pull/1313))
  by @expipiplus1\r\n- Splice Plugin: preparatory version bump for the next (not 0.9.0)
  HLS release\r\n([#1312](https://github.com/haskell/haskell-language-server/pull/1312))
  by @konn\r\n- hls-splice-plugin-0.3.0.0-prepare\r\n([#1311](https://github.com/haskell/haskell-language-server/pull/1311))
  by @konn\r\n- Trigger extending import only when the item is not in scope\r\n([#1309](https://github.com/haskell/haskell-language-server/pull/1309))
  by @berberman\r\n- Bum up hls-eval-plugin to 0.2\r\n([#1305](https://github.com/haskell/haskell-language-server/pull/1305))
  by @jneira\r\n- Don't extend import list with child if the parent has been imported
  as (..)\r\n([#1302](https://github.com/haskell/haskell-language-server/pull/1302))
  by @berberman\r\n- Prepare hls hlint plugin 0.2.0\r\n([#1296](https://github.com/haskell/haskell-language-server/pull/1296))
  by @jneira\r\n- Import disambiguation: Corrects handling of fully-applied and one-sided
  sectioned operators in qualifying strategy\r\n([#1294](https://github.com/haskell/haskell-language-server/pull/1294))
  by @konn\r\n- hls-splice-plugin-0.2.0.0\r\n([#1293](https://github.com/haskell/haskell-language-server/pull/1293))
  by @konn\r\n- Bump haddock comments plugin to 0.1.1\r\n([#1292](https://github.com/haskell/haskell-language-server/pull/1292))
  by @berberman\r\n- FindImports typo (minor)\r\n([#1291](https://github.com/haskell/haskell-language-server/pull/1291))
  by @andys8\r\n- Bump up hls-plugin-api to 0.7.0\r\n([#1290](https://github.com/haskell/haskell-language-server/pull/1290))
  by @jneira\r\n- Prepare ghcide v0.7.3 release\r\n([#1289](https://github.com/haskell/haskell-language-server/pull/1289))
  by @pepeiborra\r\n- hls-retrie-plugin 0.1.1.0\r\n([#1288](https://github.com/haskell/haskell-language-server/pull/1288))
  by @pepeiborra\r\n- Upgrade to lsp-1.0\r\n([#1284](https://github.com/haskell/haskell-language-server/pull/1284))
  by @wz1000\r\n- Update IRC Name in README\r\n([#1275](https://github.com/haskell/haskell-language-server/pull/1275))
  by @fendor\r\n- Restore code actions order\r\n([#1273](https://github.com/haskell/haskell-language-server/pull/1273))
  by @pepeiborra\r\n- Prepare 0.9.0\r\n([#1271](https://github.com/haskell/haskell-language-server/pull/1271))
  by @jneira\r\n- Reenable auto extend imports and drop snippets for infix completions\r\n([#1266](https://github.com/haskell/haskell-language-server/pull/1266))
  by @pepeiborra\r\n- ghcide: Implements a CodeAction to disambiguate ambiguous symbols\r\n([#1264](https://github.com/haskell/haskell-language-server/pull/1264))
  by @konn\r\n-  Doctest comment parsing using module annotations in Eval Plugin\r\n([#1232](https://github.com/haskell/haskell-language-server/pull/1232))
  by @konn\r\n- Apply some hlint suggestions, silence some others.\r\n([#1227](https://github.com/haskell/haskell-language-server/pull/1227))
  by @peterwicksstringfield\r\n- References via `hiedb`\r\n([#704](https://github.com/haskell/haskell-language-server/pull/704))
  by @wz1000\r\n- Use default config on missing configuration section\r\n([#459](https://github.com/haskell/haskell-language-server/pull/459))
  by @aufarg\r\n\r\n## 0.9.0\r\n\r\nThis release includes lot of refactorings and
  bug fixes over existing features, hlint and eval plugins among others.\r\nIt contains
  a fix for a bug in ghcide involving stale diagnostics (#1204).\r\n\r\nThe list of
  contributors continues to show healthy growth, many thanks to you all!\r\n\r\nAnd
  remember, we have a new brand logo, courtesy of @Ailrun :slightly_smiling_face:\r\n\r\n![haskell-language-server](https://github.com/haskell/haskell-language-server/raw/master/docs/logos/logo-256.png)\r\n\r\n###
  Pull requests merged for 0.9.0\r\n\r\n- Do not error out on failed rewrite\r\n([#1269](https://github.com/haskell/haskell-language-server/pull/1269))
  by @pepeiborra\r\n- Tighten dependency on apply-refact\r\n([#1268](https://github.com/haskell/haskell-language-server/pull/1268))
  by @hololeap\r\n- Add the new logos\r\n([#1267](https://github.com/haskell/haskell-language-server/pull/1267))
  by @Ailrun\r\n- Fix a bug in completions\r\n([#1265](https://github.com/haskell/haskell-language-server/pull/1265))
  by @pepeiborra\r\n- Produce heap profiles the old fashioned way, from .hp files\r\n([#1261](https://github.com/haskell/haskell-language-server/pull/1261))
  by @pepeiborra\r\n- Break down ghcide functionality in HLS plugins\r\n([#1257](https://github.com/haskell/haskell-language-server/pull/1257))
  by @pepeiborra\r\n- Enforce max completions over all plugins\r\n([#1256](https://github.com/haskell/haskell-language-server/pull/1256))
  by @pepeiborra\r\n- Reorder code actions to put remove redundant imports first\r\n([#1255](https://github.com/haskell/haskell-language-server/pull/1255))
  by @pepeiborra\r\n- Update bench.yml to include all the relevant artifacts\r\n([#1254](https://github.com/haskell/haskell-language-server/pull/1254))
  by @pepeiborra\r\n- Benchmarks: generate heap profiles\r\n([#1253](https://github.com/haskell/haskell-language-server/pull/1253))
  by @pepeiborra\r\n- Add gh workflows badges\r\n([#1251](https://github.com/haskell/haskell-language-server/pull/1251))
  by @jneira\r\n- Add dynamic linking common issue\r\n([#1249](https://github.com/haskell/haskell-language-server/pull/1249))
  by @jneira\r\n- Add license for hls-tactics-plugin\r\n([#1248](https://github.com/haskell/haskell-language-server/pull/1248))
  by @isovector\r\n- Use exact print to extend import lists\r\n([#1246](https://github.com/haskell/haskell-language-server/pull/1246))
  by @berberman\r\n- Test apply-refact with TypeApplications\r\n([#1244](https://github.com/haskell/haskell-language-server/pull/1244))
  by @jneira\r\n- Add non reversable pragma completion\r\n([#1243](https://github.com/haskell/haskell-language-server/pull/1243))
  by @Ailrun\r\n- Delete redundant \"category: Development\".\r\n([#1241](https://github.com/haskell/haskell-language-server/pull/1241))
  by @peterwicksstringfield\r\n- Complete the No- variants of language extensions
  and Strict extension\r\n([#1238](https://github.com/haskell/haskell-language-server/pull/1238))
  by @mrBliss\r\n- Add code actions for disabling a warning in the current file\r\n([#1235](https://github.com/haskell/haskell-language-server/pull/1235))
  by @georgefst\r\n- Change packages metadata and rename tactics subfolder\r\n([#1234](https://github.com/haskell/haskell-language-server/pull/1234))
  by @jneira\r\n- Fix the bug that generating comments would duplicate existing comments\r\n([#1233](https://github.com/haskell/haskell-language-server/pull/1233))
  by @berberman\r\n- Delete global hie.yaml config\r\n([#1230](https://github.com/haskell/haskell-language-server/pull/1230))
  by @jneira\r\n- Easy hlint fixes\r\n([#1226](https://github.com/haskell/haskell-language-server/pull/1226))
  by @peterwicksstringfield\r\n- Use the runtime ghc libdir for ghc-exactprint\r\n([#1225](https://github.com/haskell/haskell-language-server/pull/1225))
  by @jneira\r\n- Add note in README/Tutorial regarding CPP support\r\n([#1224](https://github.com/haskell/haskell-language-server/pull/1224))
  by @tittoassini\r\n- Test and fix for issue 1213\r\n([#1223](https://github.com/haskell/haskell-language-server/pull/1223))
  by @tittoassini\r\n- Add traces for HLS providers\r\n([#1222](https://github.com/haskell/haskell-language-server/pull/1222))
  by @pepeiborra\r\n- Use exact print for suggest missing constraint code actions\r\n([#1221](https://github.com/haskell/haskell-language-server/pull/1221))
  by @pepeiborra\r\n- Fix changelog dates\r\n([#1220](https://github.com/haskell/haskell-language-server/pull/1220))
  by @pepeiborra\r\n- Ignore .shake folder\r\n([#1219](https://github.com/haskell/haskell-language-server/pull/1219))
  by @pepeiborra\r\n- Limit completions to top 40\r\n([#1218](https://github.com/haskell/haskell-language-server/pull/1218))
  by @pepeiborra\r\n- Parenthesise type operators when extending import lists\r\n([#1212](https://github.com/haskell/haskell-language-server/pull/1212))
  by @mrBliss\r\n- Expose shake options used\r\n([#1209](https://github.com/haskell/haskell-language-server/pull/1209))
  by @pepeiborra\r\n- Prepare ghcide release v0.7.1\r\n([#1207](https://github.com/haskell/haskell-language-server/pull/1207))
  by @pepeiborra\r\n- Documentation for the Eval Plugin\r\n([#1206](https://github.com/haskell/haskell-language-server/pull/1206))
  by @tittoassini\r\n- Stale diagnostics fix\r\n([#1204](https://github.com/haskell/haskell-language-server/pull/1204))
  by @pepeiborra\r\n- Extract Development.IDE.GHC.ExactPrint\r\n([#1203](https://github.com/haskell/haskell-language-server/pull/1203))
  by @pepeiborra\r\n- Fix bug in Retrie \"fold/unfold in local file\" commands\r\n([#1202](https://github.com/haskell/haskell-language-server/pull/1202))
  by @pepeiborra\r\n- Minor eval plugin fixes\r\n([#1199](https://github.com/haskell/haskell-language-server/pull/1199))
  by @tittoassini\r\n- Disable win 8.6.4 job\r\n([#1198](https://github.com/haskell/haskell-language-server/pull/1198))
  by @jneira\r\n- Add custom cache layer for session loading\r\n([#1197](https://github.com/haskell/haskell-language-server/pull/1197))
  by @fendor\r\n- Use completionSnippetsOn flag\r\n([#1195](https://github.com/haskell/haskell-language-server/pull/1195))
  by @takoeight0821\r\n- Remove runs dropped by #1173\r\n([#1194](https://github.com/haskell/haskell-language-server/pull/1194))
  by @jneira\r\n- Remove undefined exports suggestions\r\n([#1193](https://github.com/haskell/haskell-language-server/pull/1193))
  by @kderme\r\n- Update nixpkgs to ghc 8.10.3\r\n([#1191](https://github.com/haskell/haskell-language-server/pull/1191))
  by @pepeiborra\r\n- Do not disable parallel GC\r\n([#1190](https://github.com/haskell/haskell-language-server/pull/1190))
  by @pepeiborra\r\n- Switch module outline to useWtihStale\r\n([#1189](https://github.com/haskell/haskell-language-server/pull/1189))
  by @pepeiborra\r\n- Fix sticky diagnostics\r\n([#1188](https://github.com/haskell/haskell-language-server/pull/1188))
  by @pepeiborra\r\n- Fix class plugin cabal\r\n([#1186](https://github.com/haskell/haskell-language-server/pull/1186))
  by @Ailrun\r\n- Update package description of haddock comments plugin\r\n([#1185](https://github.com/haskell/haskell-language-server/pull/1185))
  by @berberman\r\n- Installation from Hackage - add README section\r\n([#1183](https://github.com/haskell/haskell-language-server/pull/1183))
  by @pepeiborra\r\n- Preparation for Uploading Splice Plugin to Hackage\r\n([#1182](https://github.com/haskell/haskell-language-server/pull/1182))
  by @konn\r\n- Preparation for uploading `hls-exactprint-utils`\r\n([#1181](https://github.com/haskell/haskell-language-server/pull/1181))
  by @konn\r\n- Complete hls-hlint-plugin package metadata\r\n([#1180](https://github.com/haskell/haskell-language-server/pull/1180))
  by @jneira\r\n- Benchmark improvements\r\n([#1178](https://github.com/haskell/haskell-language-server/pull/1178))
  by @pepeiborra\r\n- Make adding missing constraint work in presence of 'forall'
  (fixes #1164)\r\n([#1177](https://github.com/haskell/haskell-language-server/pull/1177))
  by @jhrcek\r\n- Prepare for Hackage\r\n([#1176](https://github.com/haskell/haskell-language-server/pull/1176))
  by @pepeiborra\r\n- Test only last ghc minor version and fix windows cache\r\n([#1173](https://github.com/haskell/haskell-language-server/pull/1173))
  by @jneira\r\n- Fix toMethodName bug of the Class plugin\r\n([#1170](https://github.com/haskell/haskell-language-server/pull/1170))
  by @Ailrun\r\n- Quick fix for #1158\r\n([#1166](https://github.com/haskell/haskell-language-server/pull/1166))
  by @Ailrun\r\n- Suggest adding pragmas for parse errors too\r\n([#1165](https://github.com/haskell/haskell-language-server/pull/1165))
  by @mrBliss\r\n- Fix wrong component name of splice plugin in hie.yaml\r\n([#1162](https://github.com/haskell/haskell-language-server/pull/1162))
  by @berberman\r\n- Revert \"Auto cancel redundant workflows (attempt #2)\"\r\n([#1156](https://github.com/haskell/haskell-language-server/pull/1156))
  by @pepeiborra\r\n- Auto cancel redundant workflows (attempt #2)\r\n([#1154](https://github.com/haskell/haskell-language-server/pull/1154))
  by @pepeiborra\r\n- Prepare 0.8.0 (versions)\r\n([#1153](https://github.com/haskell/haskell-language-server/pull/1153))
  by @jneira\r\n- Streamline CircleCI jobs\r\n([#1152](https://github.com/haskell/haskell-language-server/pull/1152))
  by @pepeiborra\r\n- Mergify: create configuration\r\n([#1151](https://github.com/haskell/haskell-language-server/pull/1151))
  by @jneira\r\n- Bump haskell-lsp to 0.23\r\n([#1146](https://github.com/haskell/haskell-language-server/pull/1146))
  by @berberman\r\n- Remove no longer needed git submodule update\r\n([#1145](https://github.com/haskell/haskell-language-server/pull/1145))
  by @jhrcek\r\n- Enable more tests\r\n([#1143](https://github.com/haskell/haskell-language-server/pull/1143))
  by @peterwicksstringfield\r\n- Update links to issues/PRs in ghcide tests.\r\n([#1142](https://github.com/haskell/haskell-language-server/pull/1142))
  by @peterwicksstringfield\r\n- Fix #723 (Instance declarations in hs-boot files
  result in GHC errors)\r\n([#781](https://github.com/haskell/haskell-language-server/pull/781))
  by @nitros12\r\n- Also suggest importing methods without parent class\r\n([#766](https://github.com/haskell/haskell-language-server/pull/766))
  by @mrBliss\r\n- Delete unused utilities for controlling logging.\r\n([#764](https://github.com/haskell/haskell-language-server/pull/764))
  by @peterwicksstringfield\r\n- Delete unused testdata\r\n([#763](https://github.com/haskell/haskell-language-server/pull/763))
  by @peterwicksstringfield\r\n- Fix suggestAddTypeAnnotation regex\r\n([#760](https://github.com/haskell/haskell-language-server/pull/760))
  by @kderme\r\n- Splice Plugin: expands TH splices and QuasiQuotes\r\n([#759](https://github.com/haskell/haskell-language-server/pull/759))
  by @konn\r\n- Haddock comments plugin\r\n([#673](https://github.com/haskell/haskell-language-server/pull/673))
  by @berberman\r\n- Leverage last apply-refact improvements in hlint plugin (include
  getParsedModuleWithComments in ghcide)\r\n([#635](https://github.com/haskell/haskell-language-server/pull/635))
  by @jneira\r\n\r\n## 0.8.0\r\n\r\n- This version adds support for ghc-8.10.3\r\n-
  `hls-plugin-api` has been bumped to 0.6.0.0 and `ghcide` has been bumped from 0.6.0.1
  to 0.7.0.0.\r\n- It has a new brand plugin: hls-class-plugin, which helps to write
  class instances\r\n\r\n![gif](https://user-images.githubusercontent.com/12473268/103059293-af071f80-4572-11eb-963a-7e76b45f28b9.gif)\r\n\r\n-
  The eval plugin has been revamped, adding these new features:\r\n  - Tests in both
  plain comments and Haddock comments\r\n  - For Haddock comments: shows differences
  between latest and previous result\r\n  - Setup section, executed before every test\r\n
  \ - Execution of a section/group of tests at the time\r\n  - Property testing\r\n
  \ - Setup of GHC extensions\r\n- A new tactic to generate automatically `Arbitrary`
  instances has been added to tactic plugin\r\n- There had been lot of internal changes:\r\n
  \ - ghcide lives now directly in this repository\r\n  - the test suite has been
  cleaned and improved (continuing the work done in 0.7.0)\r\n\r\n\r\nThanks to all
  contributors and happy new year!\r\n\r\n### Pull requests merged for 0.8.0\r\n\r\n-
  Ci fixes\r\n([#783](https://github.com/haskell/haskell-language-server/pull/783))
  by @pepeiborra\r\n- Fix extend imports regression\r\n([#769](https://github.com/haskell/haskell-language-server/pull/769))
  by @pepeiborra\r\n- Cleanup format testfiles\r\n([#765](https://github.com/haskell/haskell-language-server/pull/765))
  by @peterwicksstringfield\r\n- Retry a failed cradle if the cradle descriptor changes\r\n([#762](https://github.com/haskell/haskell-language-server/pull/762))
  by @pepeiborra\r\n- Perform memory measurement on SIGUSR1\r\n([#761](https://github.com/haskell/haskell-language-server/pull/761))
  by @pepeiborra\r\n- Add ghc-8.10.3 support after merging ghcide repo\r\n([#721](https://github.com/haskell/haskell-language-server/pull/721))
  by @jneira\r\n- Merge ghcide repository (replacing the submodule)\r\n([#702](https://github.com/haskell/haskell-language-server/pull/702))
  by @pepeiborra\r\n- Invert the dependency between hls-plugin-api and ghcide\r\n([#701](https://github.com/haskell/haskell-language-server/pull/701))
  by @pepeiborra\r\n- Move eval plugin to hls-eval-plugin\r\n([#700](https://github.com/haskell/haskell-language-server/pull/700))
  by @tittoassini\r\n- Fix and enable progress message tests.\r\n([#698](https://github.com/haskell/haskell-language-server/pull/698))
  by @peterwicksstringfield\r\n- Add a known tactic for writing arbitrary instances\r\n([#695](https://github.com/haskell/haskell-language-server/pull/695))
  by @isovector\r\n- Introduce generic config for plugins\r\n([#691](https://github.com/haskell/haskell-language-server/pull/691))
  by @alanz\r\n- Enable get type definition tests\r\n([#690](https://github.com/haskell/haskell-language-server/pull/690))
  by @peterwicksstringfield\r\n- Fix ghc version for windows 8.10.2.2 in github build
  workflow\r\n([#688](https://github.com/haskell/haskell-language-server/pull/688))
  by @jneira\r\n- Add plugins conditionally at compile time\r\n([#687](https://github.com/haskell/haskell-language-server/pull/687))
  by @jneira\r\n- Implement basic Class plugin\r\n([#661](https://github.com/haskell/haskell-language-server/pull/661))
  by @Ailrun\r\n- Extended Eval Plugin\r\n([#438](https://github.com/haskell/haskell-language-server/pull/438))
  by @tittoassini\r\n\r\n## 0.7.1\r\n\r\n- This is a minor bug fix release:\r\n  -
  It fixes an issue that removed accidentally desugarer warnings (#676).\r\n  - It
  disables auto extend import lists in completions, see #679.\r\n\r\n### Pull requests
  merged for 0.7.1\r\n\r\n- Disable auto extend import lists in completions. It fixes
  #679.\r\n([#685](https://github.com/haskell/haskell-language-server/pull/685)) by
  @pepeiborra\r\n- Restore kick (#676). It fixes #676.\r\n([#677](https://github.com/haskell/haskell-language-server/pull/677))
  by @wz1000\r\n- README: Remove instructions to execute data target\r\n([#675](https://github.com/haskell/haskell-language-server/pull/675))
  by @andys8\r\n- Add hlint tests over cpp, extensions and ignore hints\r\n([#674](https://github.com/haskell/haskell-language-server/pull/674))
  by @jneira\r\n\r\n## 0.7.0\r\n\r\n- This version contains mainly refactors and updates
  of upstream packages\r\n- It bumps up some formatter versions:\r\n  - ormolu is
  0.1.4.1\r\n  - fourmolu is 0.3.0.0\r\n  - brittany is 0.13.1.0\r\n- It uses last
  implicit-hie-cradle-0.3.0.2, with some [bug](https://github.com/Avi-D-coder/implicit-hie/issues/29)
  [fixes](https://github.com/Avi-D-coder/implicit-hie/issues/30)\r\n- It uses last
  ghcide-0.6.0.1 with [improvements and bug fixes](https://github.com/haskell/ghcide/blob/master/CHANGELOG.md#060-2020-12-06):\r\n
  \ - Do not enable every \"unnecessary\" warning by default\r\n  - Improvements over
  completions:\r\n    - record fields\r\n    - identifiers not in explicit import
  lists\r\n    - extend explicit import list automatically\r\n\r\nThanks to all haskell-language-server,
  ghcide and other upstream packages contributors (the list continue growing healthy)
  for make this release possible.\r\n\r\n### Pull requests merged for 0.7.0\r\n\r\n-
  Miscellanous fixes: correct tactic plugin package metadata and cabal.hie.yaml/stack.hie.yaml\r\n([#672](https://github.com/haskell/haskell-language-server/pull/672))
  by @berberman\r\n- Remove unnecessary pluginId setting and user Better Map functions
  in tactics plugin\r\n([#669](https://github.com/haskell/haskell-language-server/pull/669))
  by @jhrcek\r\n- Do not suggest explicitly disabled pragmas\r\n([#666](https://github.com/haskell/haskell-language-server/pull/666))
  by @berberman\r\n- fixed hie.yaml.stack\r\n([#664](https://github.com/haskell/haskell-language-server/pull/664))
  by @tittoassini\r\n- Add pragmas completions\r\n([#662](https://github.com/haskell/haskell-language-server/pull/662))
  by @gdevanla\r\n- Enable code completion tests\r\n([#657](https://github.com/haskell/haskell-language-server/pull/657))
  by @peterwicksstringfield\r\n- Enable highlight unittests\r\n([#656](https://github.com/haskell/haskell-language-server/pull/656))
  by @peterwicksstringfield\r\n- Fix document symbols unit tests.\r\n([#655](https://github.com/haskell/haskell-language-server/pull/655))
  by @peterwicksstringfield\r\n- Delete duplicate cabal clause for applyrefact2\r\n([#654](https://github.com/haskell/haskell-language-server/pull/654))
  by @peterwicksstringfield\r\n- Add extra-source-files for split plugins\r\n([#650](https://github.com/haskell/haskell-language-server/pull/650))
  by @berberman\r\n- [nix-shell] Actually use gitignore\r\n([#649](https://github.com/haskell/haskell-language-server/pull/649))
  by @pepeiborra\r\n- idempotent command and code cleanup\r\n([#648](https://github.com/haskell/haskell-language-server/pull/648))
  by @tittoassini\r\n- Split the Imports and Retrie plugins\r\n([#647](https://github.com/haskell/haskell-language-server/pull/647))
  by @pepeiborra\r\n- Simplify and Bump implicit-hie version constraints\r\n([#645](https://github.com/haskell/haskell-language-server/pull/645))
  by @Avi-D-coder\r\n- Fix and enable disabled code action unit tests, fix fallback
  handler\r\n([#643](https://github.com/haskell/haskell-language-server/pull/643))
  by @peterwicksstringfield\r\n- Add Ghcide hie.yaml instruction for Stack users\r\n([#641](https://github.com/haskell/haskell-language-server/pull/641))
  by @Sir4ur0n\r\n- Upgrade the Nix build system\r\n([#639](https://github.com/haskell/haskell-language-server/pull/639))
  by @pepeiborra\r\n- No longer needed to build once for Stack\r\n([#637](https://github.com/haskell/haskell-language-server/pull/637))
  by @Sir4ur0n\r\n- Preserve the last empty comment line after eval plugin\r\n([#631](https://github.com/haskell/haskell-language-server/pull/631))
  by @expipiplus1\r\n- Update fourmolu to 0.3.0.0\r\n([#624](https://github.com/haskell/haskell-language-server/pull/624))
  by @gwils\r\n- Add hspec-discover to build-tool-depends in tactics plugin\r\n([#623](https://github.com/haskell/haskell-language-server/pull/623))
  by @gwils\r\n- Add build to ghc-8.10.2 and windows\r\n([#619](https://github.com/haskell/haskell-language-server/pull/619))
  by @jneira\r\n- Module Name Plugin: Treat modules starting with lowercase as Main
  module\r\n([#616](https://github.com/haskell/haskell-language-server/pull/616))
  by @konn\r\n- Bump ormolu to 0.1.4.1\r\n([#614](https://github.com/haskell/haskell-language-server/pull/614))
  by @AlistairB\r\n- Fix fourmolu plugin inconsistent formatting\r\n([#599](https://github.com/haskell/haskell-language-server/pull/599))
  by @zweimach\r\n- Hlint: bring over idea2Message for formatting\r\n([#598](https://github.com/haskell/haskell-language-server/pull/598))
  by @alanz\r\n- Makes dictionary argument exclusion logic in Tactic plugin more robust\r\n([#508](https://github.com/haskell/haskell-language-server/pull/508))
  by @konn\r\n\r\n## 0.6.0\r\n\r\n0.6.0 includes two brand new plugins!\r\n\r\n- [Hlint
  Plugin](https://github.com/haskell/haskell-language-server/pull/166): it integrates
  hlint diagnostics and lets you apply suggestions to fix them.\r\n\r\n![hls-hlint-demo](https://user-images.githubusercontent.com/54035/98731058-6ff38500-239d-11eb-8176-e4f69ef76fc2.gif)\r\n\r\n-
  [Module Name Plugin](https://github.com/haskell/haskell-language-server/pull/480):
  it makes easier create new modules and modify them, suggesting the appropiate module
  name as a code lens.\r\n\r\n![module-name-demo](https://user-images.githubusercontent.com/54035/98731198-a7623180-239d-11eb-8af0-73bd32b9b0b2.gif)\r\n\r\nThis
  release also includes many improvements and bug fixes for the tactic plugin (see
  pull requests authored by @isovector for more details).\r\n\r\nWe have updated two
  essential tools used by the ide:\r\n\r\n- `implicit-hie`: [to fix a bug](https://github.com/haskell/haskell-language-server/issues/498)
  present when loading cabal based projects with executables containing `other-modules`\r\n\r\n-
  `ghcide`: the ide uses [the just released version 0.5](https://github.com/haskell/ghcide/blob/master/CHANGELOG.md#050-2020-10-08)
  with many bug fixes and improvements, including:\r\n  - code action to remove *all*
  redundant imports\r\n  - improved support for Template Haskell\r\n  - emit desugarer
  warnings\r\n\r\n### Pull requests merged for 0.6.0\r\n\r\n- Fix tasty rerun\r\n([#570](https://github.com/haskell/haskell-language-server/pull/570))
  by @jneira\r\n- Bump up ghcide submodule to version 0.5.0\r\n([#568](https://github.com/haskell/haskell-language-server/pull/568))
  by @jneira\r\n- Refactor tactics to track hypothesis provenance\r\n([#557](https://github.com/haskell/haskell-language-server/pull/557))
  by @isovector\r\n- Use bash shell to allow its idioms\r\n([#552](https://github.com/haskell/haskell-language-server/pull/552))
  by @jneira\r\n- Ignore flakey tactics test\r\n([#546](https://github.com/haskell/haskell-language-server/pull/546))
  by @isovector\r\n- Better scoring metric for deriving safeHead\r\n([#545](https://github.com/haskell/haskell-language-server/pull/545))
  by @isovector\r\n- Discover skolems in the hypothesis, not just goal\r\n([#542](https://github.com/haskell/haskell-language-server/pull/542))
  by @isovector\r\n- [retrie] Fix code action title\r\n([#538](https://github.com/haskell/haskell-language-server/pull/538))
  by @pepeiborra\r\n- Tactics support for using given constraints\r\n([#534](https://github.com/haskell/haskell-language-server/pull/534))
  by @isovector\r\n- Add missing tactic subpackage in default stack.yaml\r\n([#529](https://github.com/haskell/haskell-language-server/pull/529))
  by @jneira\r\n- Use implicit-hie-0.1.2.0\r\n([#528](https://github.com/haskell/haskell-language-server/pull/528))
  by @jneira\r\n- Wait for diagnostics in tactics tests\r\n([#525](https://github.com/haskell/haskell-language-server/pull/525))
  by @isovector\r\n- Fix a bug in tactics preventing split of split\r\n([#520](https://github.com/haskell/haskell-language-server/pull/520))
  by @isovector\r\n- Use infix notation for destructing and splitting infix data cons\r\n([#519](https://github.com/haskell/haskell-language-server/pull/519))
  by @isovector\r\n- Retry the build three times\r\n([#518](https://github.com/haskell/haskell-language-server/pull/518))
  by @jneira\r\n- Separate tactics into its own package\r\n([#516](https://github.com/haskell/haskell-language-server/pull/516))
  by @isovector\r\n- Add a Troubleshooting section to the README\r\n([#507](https://github.com/haskell/haskell-language-server/pull/507))
  by @michaelpj\r\n- Add GitHub Actions CI for testing\r\n([#504](https://github.com/haskell/haskell-language-server/pull/504))
  by @bubba\r\n- Fix stack build for ghc-8.8.3 failing on some machines\r\n([#503](https://github.com/haskell/haskell-language-server/pull/503))
  by @luntain\r\n- Expand explanation of how to configure HLS\r\n([#497](https://github.com/haskell/haskell-language-server/pull/497))
  by @michaelpj\r\n- Module Name Plugin\r\n([#480](https://github.com/haskell/haskell-language-server/pull/480))
  by @tittoassini\r\n- Allow hole filling to deal with recursion\r\n([#472](https://github.com/haskell/haskell-language-server/pull/472))
  by @isovector\r\n- Restrict editor config to Haskell file, to avoid affecting Makefiles
  or other tab-based formats\r\n([#442](https://github.com/haskell/haskell-language-server/pull/442))
  by @tittoassini\r\n- Hlint plugin using ghc-lib\r\n([#166](https://github.com/haskell/haskell-language-server/pull/166))
  by @jneira\r\n\r\n## 0.5.1\r\n\r\n0.5.1 is a minor bug fix release, mainly fixing
  an issue with the eval plugin\r\nas well as upgrading the ormolu and stylish-haskell
  dependencies.\r\n\r\n### Pull requests merged for 0.5.1\r\n\r\n- Minimal fix for
  eval regression\r\n([#488](https://github.com/haskell/haskell-language-server/pull/488))
  by @pepeiborra\r\n- Bump stylish-haskell to 0.12.2.0\r\n([#482](https://github.com/haskell/haskell-language-server/pull/482))
  by @maksbotan\r\n- Improve the emacs instructions a little\r\n([#479](https://github.com/haskell/haskell-language-server/pull/479))
  by @michaelpj\r\n- Update README: HLS is no longer in *very* early stage\r\n([#475](https://github.com/haskell/haskell-language-server/pull/475))
  by @Anrock\r\n- Tactic plugin: Excludes Dictionary arguments in GADTs in Destruct
  Tactic\r\n([#474](https://github.com/haskell/haskell-language-server/pull/474))
  by @konn\r\n- Update doom emacs install instructions in README\r\n([#470](https://github.com/haskell/haskell-language-server/pull/470))
  by @iyefrat\r\n- Add ghc-8.10.2 to circleci\r\n([#464](https://github.com/haskell/haskell-language-server/pull/464))
  by @jneira\r\n- Bump ormolu to 0.1.3.0\r\n([#422](https://github.com/haskell/haskell-language-server/pull/422))
  by @AlistairB\r\n\r\n## 0.5.0\r\n\r\n0.5.0 comes with a new tactics plugin which
  provides case splitting, homomorphic case splitting, and lambda introduction:\r\n\r\n![Case
  splitting](https://user-images.githubusercontent.com/307223/92657198-3d4be400-f2a9-11ea-8ad3-f541c8eea891.gif)\r\n\r\nIt
  can even attempt to fully fill a hole!\r\n\r\n![Attempt to fill in hole code action](https://user-images.githubusercontent.com/307223/94743611-82a18580-032c-11eb-9f13-8f46bc45f928.gif)\r\n\r\nThe
  imports lens plugin also learnt a new code action to make all imports explicit:\r\n\r\n![Explicit
  imports code action](https://user-images.githubusercontent.com/2488460/94994815-1a53dd80-0592-11eb-8a12-ec704ae92385.gif)\r\n\r\nThere's
  also plenty of bug fixes, improvements and updates to the underlying tools, including
  Fourmolu, implicit-hie-cradle and ghcide. [Some of the improvements from ghcide](https://github.com/haskell/ghcide/releases/tag/v0.4.0)
  include:\r\n\r\n- The entire project is typechecked on load\r\n- Reverse dependencies
  of a module are typechecked upon saving\r\n- Code completion includes local terms\r\n-
  Import code actions now also suggest open imports\r\n- Documentation on hover shows
  for symbols defined in the same module\r\n\r\nIf you're eager to try all this out,
  haskell-language-server is now also installable via [ghcup](https://www.haskell.org/ghcup/):\r\n\r\n```shell\r\n$
  ghcup install hls\r\n```\r\n\r\n### Pull requests merged for 0.5.0\r\n\r\n- Update
  GHC version 8.12 to 9.0 in README\r\n([#460](https://github.com/haskell/haskell-language-server/pull/460))
  by @maralorn\r\n- Update Fourmolu to 0.2\r\n([#455](https://github.com/haskell/haskell-language-server/pull/455))
  by @georgefst\r\n- Generate .gz tars of all the binaries for macOS and Linux in
  GitHub Actions\r\n([#454](https://github.com/haskell/haskell-language-server/pull/454))
  by @bubba\r\n- install: create hls hardlinks instead of copies except on Windows\r\n([#451](https://github.com/haskell/haskell-language-server/pull/451))
  by @juhp\r\n- wrapper: cd to --cwd earlier\r\n([#448](https://github.com/haskell/haskell-language-server/pull/448))
  by @ocharles\r\n- Update README.md\r\n([#446](https://github.com/haskell/haskell-language-server/pull/446))
  by @moodmosaic\r\n- Upate Emacs setup notes\r\n([#440](https://github.com/haskell/haskell-language-server/pull/440))
  by @gdevanla\r\n- Use ghcide master and prepare hls-plugin-api-0.4.1.0\r\n([#439](https://github.com/haskell/haskell-language-server/pull/439))
  by @jneira\r\n- Add a code action to make all imports explicit\r\n([#436](https://github.com/haskell/haskell-language-server/pull/436))
  by @pepeiborra\r\n- Add docs on how to choose a formatter\r\n([#432](https://github.com/haskell/haskell-language-server/pull/432))
  by @googleson78\r\n- Implement 'Attempt to fill hole' code action\r\n([#431](https://github.com/haskell/haskell-language-server/pull/431))
  by @TOTBWF\r\n- Clarify that eval is a lens\r\n([#428](https://github.com/haskell/haskell-language-server/pull/428))
  by @Anrock\r\n- Use implicit-hie-cradle-0.2.0.1\r\n([#427](https://github.com/haskell/haskell-language-server/pull/427))
  by @jneira\r\n- [retrie] Fix uris in workspace edit\r\n([#424](https://github.com/haskell/haskell-language-server/pull/424))
  by @pepeiborra\r\n- Separate paragraphs\r\n([#423](https://github.com/haskell/haskell-language-server/pull/423))
  by @jneira\r\n- Include .editorconfig in the contributing section\r\n([#420](https://github.com/haskell/haskell-language-server/pull/420))
  by @jneira\r\n- Mention the copy of executables wit ghc version\r\n([#419](https://github.com/haskell/haskell-language-server/pull/419))
  by @jneira\r\n- Eval plugin: proper multilined results handling and command-name
  abbreviations\r\n([#413](https://github.com/haskell/haskell-language-server/pull/413))
  by @konn\r\n- Retrie - calculate imports in the command handler\r\n([#408](https://github.com/haskell/haskell-language-server/pull/408))
  by @pepeiborra\r\n- Progress reporting for Eval plugin\r\n([#398](https://github.com/haskell/haskell-language-server/pull/398))
  by @pepeiborra\r\n- bump ghcide submodule\r\n([#396](https://github.com/haskell/haskell-language-server/pull/396))
  by @wz1000\r\n- Fix cradles\r\n([#393](https://github.com/haskell/haskell-language-server/pull/393))
  by @pepeiborra\r\n- Case splitting and lambda introduction\r\n([#391](https://github.com/haskell/haskell-language-server/pull/391))
  by @isovector\r\n- Use stale data in explicit imports lens\r\n([#383](https://github.com/haskell/haskell-language-server/pull/383))
  by @pepeiborra\r\n- Create hls-plugin-api and move plugins to exe\r\n([#379](https://github.com/haskell/haskell-language-server/pull/379))
  by @jneira\r\n- Rebase on ghcide HEAD\r\n([#378](https://github.com/haskell/haskell-language-server/pull/378))
  by @pepeiborra\r\n- README clarify how exactly to use code evaluation\r\n([#377](https://github.com/haskell/haskell-language-server/pull/377))
  by @DunetsNM\r\n- Revise README.md\r\n([#374](https://github.com/haskell/haskell-language-server/pull/374))
  by @gihyeonsung\r\n\r\n## 0.4.0\r\n\r\n0.4.0 introduces the import lens plugin,
  which can convert your import statements into qualified imports, or into an explicit
  import list:\r\n\r\n![Imports code lens](https://imgur.com/pX9kvY4.gif)\r\n\r\nThe
  eval plugin has also learnt two new commands, `:type` and `:kind`:\r\n\r\n```haskell\r\n{-#
  LANGUAGE TypeApplications #-}\r\nfoo :: Show a => a -> String\r\nfoo = show\r\n\r\n--
  >>> :type foo @Int\r\n-- foo @Int :: Int -> String\r\n\r\n-- >>> :type +v foo @Int\r\n--
  foo @Int :: Show Int => Int -> String\r\n```\r\n\r\n```haskell\r\n-- >>> type N
  = 1\r\n-- >>> type M = 40\r\n-- >>> :kind N + M + 1\r\n-- N + M + 1 :: Nat\r\n\r\n--
  >>> type N = 1\r\n-- >>> type M = 40\r\n-- >>> :kind N + M + 1\r\n-- N + M + 1 ::
  Nat\r\n```\r\n\r\nThere is now also support for GHC 8.10.2, and a new `haskell-language-server
  --probe-tools` command to help debug what version of each tool HLS is using.\r\n\r\n```shell\r\n$
  haskell-language-server --probe-tools\r\nhaskell-language-server version: 0.3.0.0
  (GHC: 8.10.1) (PATH: /Users/luke/.cabal/store/ghc-8.10.1/hskll-lngg-srvr-0.3.0.0-7c6d48c3/bin/haskell-language-server)\r\nTool
  versions found on the $PATH\r\ncabal:  3.2.0.0\r\nstack:  2.3.3\r\nghc:    8.10.2\r\n```\r\n\r\n###
  Pull requests merged for 0.4.0\r\n\r\n- Bring over a [tutorial about how to add
  hls plugins](https://github.com/pepeiborra/hls-tutorial)\r\n([#372](https://github.com/haskell/haskell-language-server/pull/372))
  by @bubba\r\n- Update the ghcide upstream to be in haskell/ghcide\r\n([#370](https://github.com/haskell/haskell-language-server/pull/370))
  by @alanz\r\n- Add ISSUE_TEMPLATE for github\r\n([#305](https://github.com/haskell/haskell-language-server/pull/305))
  by @fendor\r\n- Add use-package to the list of emacs packages\r\n([#343](https://github.com/haskell/haskell-language-server/pull/343))
  by @rgleichman\r\n- Implements `:type [+v/+d]` in Eval Plugin\r\n([#361](https://github.com/haskell/haskell-language-server/pull/361))
  by @konn\r\n- Bump bounds of hie-bios to 0.7.0\r\n([#357](https://github.com/haskell/haskell-language-server/pull/357))
  by @maralorn\r\n- Fix ImportLens plugin to work with GHC 8.10\r\n([#356](https://github.com/haskell/haskell-language-server/pull/356))
  by @Ailrun\r\n- Add single file rewrites and ignore unknown files\r\n([#321](https://github.com/haskell/haskell-language-server/pull/321))
  by @pepeiborra\r\n- Do not suggest explicit import lists for qualified imports\r\n([#354](https://github.com/haskell/haskell-language-server/pull/354))
  by @expipiplus1\r\n- Explicit imports lens (as seen on Twitter)\r\n([#310](https://github.com/haskell/haskell-language-server/pull/310))
  by @pepeiborra\r\n- Adds `:kind` and `:kind!` commands to Eval Plugin\r\n([#345](https://github.com/haskell/haskell-language-server/pull/345))
  by @konn\r\n- tech(nix): update niv and remove allowbroken\r\n([#350](https://github.com/haskell/haskell-language-server/pull/350))
  by @willbush\r\n- Update VS Code Haskell URL/repo\r\n([#338](https://github.com/haskell/haskell-language-server/pull/338))
  by @Sir4ur0n\r\n- doc(hack): Add explanation to hack and test HLS\r\n([#329](https://github.com/haskell/haskell-language-server/pull/329))
  by @Sir4ur0n\r\n- Apply the module pragmas for evaluation\r\n([#322](https://github.com/haskell/haskell-language-server/pull/322))
  by @pepeiborra\r\n- Copy working stack-8.6.5.yaml to stack.yaml\r\n([#332](https://github.com/haskell/haskell-language-server/pull/332))
  by @jneira\r\n- tech(nix): Allow broken as retrie is marked as broken\r\n([#331](https://github.com/haskell/haskell-language-server/pull/331))
  by @Sir4ur0n\r\n- feat(git): Add install/hie.yaml to gitignore\r\n([#328](https://github.com/haskell/haskell-language-server/pull/328))
  by @Sir4ur0n\r\n- Replace wrong occurrences of \"engine\" by \"server\"\r\n([#319](https://github.com/haskell/haskell-language-server/pull/319))
  by @tchoutri\r\n- Simplify coc.nvim instructions\r\n([#315](https://github.com/haskell/haskell-language-server/pull/315))
  by @oblitum\r\n- Coc config file requires a {} nesting everything\r\n([#317](https://github.com/haskell/haskell-language-server/pull/317))
  by @hyiltiz\r\n- Restrict opentelemetry version for stack builds\r\n([#312](https://github.com/haskell/haskell-language-server/pull/312))
  by @jneira\r\n- Add support for ghc-8.10.2\r\n([#308](https://github.com/haskell/haskell-language-server/pull/308))
  by @jneira\r\n- Return nothing if tool is not on the PATH\r\n([#309](https://github.com/haskell/haskell-language-server/pull/309))
  by @fendor\r\n- Probe tools cli\r\n([#306](https://github.com/haskell/haskell-language-server/pull/306))
  by @fendor\r\n- Add fourmolu plugin (attempt 2) and add Brittany for ghc-8.10.1\r\n([#264](https://github.com/haskell/haskell-language-server/pull/264))
  by @georgefst\r\n\r\n## 0.3.0\r\n\r\n0.3.0 comes with two new plugins, retrie and
  fourmolu, provides binaries for\r\nGHC 8.8.4, and comes with a host of bug fixes.\r\n\r\nThe
  retrie plugin supports RULES, functions and type synonyms which can be\r\naccessed
  through contextual code actions.\r\n\r\nFourmolu can be used to format your code
  by setting the\r\n`haskell.formattingProvider` field in your LSP configuration to\r\n\r\n```json\r\n{\r\n
  \ \"haskell\": {\r\n    \"formattingProvider\": \"fourmolu\"\r\n  }\r\n}\r\n```\r\n\r\nThe
  Brittany formatter is now also available on GHC 8.10.1.\r\n\r\n### Pull requests
  merged\r\n\r\n- Fix haddock parse error in install.hs\r\n([#255](https://github.com/haskell/haskell-language-server/pull/255))
  by @georgefst\r\n- Ormolu flags\r\n([#246](https://github.com/haskell/haskell-language-server/pull/246))
  by @pepeiborra\r\n- Ormolu fix\r\n([#257](https://github.com/haskell/haskell-language-server/pull/257))
  by @sureyeaah\r\n- Remove redundant CircleCI steps\r\n([#259](https://github.com/haskell/haskell-language-server/pull/259))
  by @bubba\r\n- Slow down Tasty by limiting it to -j1\r\n([#261](https://github.com/haskell/haskell-language-server/pull/261))
  by @bubba\r\n- Remove hspec-expectations\r\n([#260](https://github.com/haskell/haskell-language-server/pull/260))
  by @bubba\r\n- Remove a redundant caching step\r\n([#262](https://github.com/haskell/haskell-language-server/pull/262))
  by @Ailrun\r\n- add hie.yaml to coc configuration\r\n([#267](https://github.com/haskell/haskell-language-server/pull/267))
  by @sureyeaah\r\n- Initial Retrie plugin\r\n([#266](https://github.com/haskell/haskell-language-server/pull/266))
  by @pepeiborra\r\n- Add exe extension to win executables\r\n([#284](https://github.com/haskell/haskell-language-server/pull/284))
  by @jneira\r\n- Use wz1000/hls-3 ghcide branch\r\n([#275](https://github.com/haskell/haskell-language-server/pull/275))
  by @alanz\r\n- Fix rename capability being declared\r\n([#285](https://github.com/haskell/haskell-language-server/pull/285))
  by @bubba\r\n- Add CI job for 8.8.4\r\n([#287](https://github.com/haskell/haskell-language-server/pull/287))
  by @bubba\r\n- Make the AGPL flag manual in cabal\r\n([#250](https://github.com/haskell/haskell-language-server/pull/250))
  by @fendor\r\n- Bring in doc URL fix for Windows\r\n([#289](https://github.com/haskell/haskell-language-server/pull/289))
  by @bubba\r\n- Bring in fix for libm on Linux static binaries\r\n([#293](https://github.com/haskell/haskell-language-server/pull/293))
  by @bubba\r\n- Add fourmolu plugin (attempt 2) and add Brittany for ghc-8.10.1\r\n([#264](https://github.com/haskell/haskell-language-server/pull/264))
  by @georgefst\r\n- Trying new hls-3 branch\r\n([#300](https://github.com/haskell/haskell-language-server/pull/300))
  by @alanz\r\n\r\n## 0.2.2\r\n\r\nThis changes the configuration section from \"languageServerHaskell\"
  to \"haskell\"\r\nto align it with vscode-haskell-1.0.0. Whilst the old section
  is still\r\nsupported for now, you should update your LSP configuration (which varies
  per\r\nclient) from\r\n\r\n```json\r\n{\r\n  \"languageServerHaskell\": {\r\n    \"formattingProvider\":
  \"stylish-haskell\"\r\n  }\r\n}\r\n```\r\n\r\nto\r\n\r\n```json\r\n{\r\n  \"haskell\":
  {\r\n    \"formattingProvider\": \"stylish-haskell\"\r\n  }\r\n}\r\n```\r\n\r\n###
  Pull requests merged for 0.2.2\r\n\r\n- Mention docs on hover feature in README\r\n([#209](https://github.com/haskell/haskell-language-server/pull/209))
  by @georgefst\r\n- Add static binaries for ghc-8.8.4\r\n([#224](https://github.com/haskell/haskell-language-server/pull/224))
  by @bubba\r\n- Rename the configuration section from languageServerHaskell => haskell\r\n([#227](https://github.com/haskell/haskell-language-server/pull/227))
  by @bubba\r\n- Use -haddock for cabal and stack\r\n([#214](https://github.com/haskell/haskell-language-server/pull/214))
  by @jneira\r\n- slightly better shell.nix for local development\r\n([#235](https://github.com/haskell/haskell-language-server/pull/235))
  by @pepeiborra\r\n- Shell nix further steps\r\n([#240](https://github.com/haskell/haskell-language-server/pull/240))
  by @pepeiborra\r\n- Add numeric-version option for wrapper and server\r\n([#241](https://github.com/haskell/haskell-language-server/pull/241))
  by @fendor\r\n- Accept the legacy \"languageServerHaskell\" config name\r\n([#243](https://github.com/haskell/haskell-language-server/pull/243))
  by @bubba\r\n- Fix for Eval plugin: Error from tests not reported\r\n([#244](https://github.com/haskell/haskell-language-server/pull/244))
  by @tittoassini\r\n- Rename binaries before uploading\r\n([#248](https://github.com/haskell/haskell-language-server/pull/248))
  by @bubba\r\n\r\n## 0.2.1\r\n\r\nThis release includes a new eval plugin that allows
  Haddock code examples to be\r\nevaluated through a code lens. For example, the code
  below will now offer to\r\nevaluate `intercalate \" \" example`, and will insert
  the output in the line\r\nbelow.\r\n\r\n```haskell\r\nexample :: [String]\r\nexample
  = [\"This is an example\", \"of\", \"interactive\", \"evaluation\"]\r\n\r\n-- >>>
  intercalate \" \" example\r\n-- \"This is an example of interactive evaluation\"\r\n--\r\n```\r\n\r\nThis
  is also the first release to have binaries distributed alongside it. Some\r\nbehind
  the scene changes include the GHC library directory now being obtained on\r\nthe
  fly, so either `ghc`, `cabal` or `stack` will need to be present on your\r\nPATH
  depending on your project. See `docs/releases.md` for more information. If\r\nyou
  find any issues with this, please let us know!\r\n\r\n### Pull requests merged for
  0.2.1\r\n\r\n- Bump ormolu to 0.1.2.0\r\n([#189](https://github.com/haskell/haskell-language-server/pull/189))
  by @AlistairB\r\n- Remove dependency on Cabal\r\n([#195](https://github.com/haskell/haskell-language-server/pull/195))
  by @bubba\r\n- Fix extraneous extra-dep in stack-8.6.4.yaml\r\n([#199](https://github.com/haskell/haskell-language-server/pull/199))
  by @bubba\r\n- Fix install script stack targets\r\n([#203](https://github.com/haskell/haskell-language-server/pull/203))
  by @jneira\r\n- Add support for ghc-8.8.4\r\n([#206](https://github.com/haskell/haskell-language-server/pull/206))
  by @jneira\r\n- Simple Eval plugin\r\n([#191](https://github.com/haskell/haskell-language-server/pull/191))
  by @pepeiborra\r\n- Distributable binaries\r\n([#165](https://github.com/haskell/haskell-language-server/pull/165))
  by @bubba\r\n\r\n## 0.2\r\n\r\n- Use cabal-plan from Hackage\r\n([#185](https://github.com/haskell/haskell-language-server/pull/185))
  by @georgefst\r\n- Bump ghcide to wz1000 hls-2 branch\r\n([#184](https://github.com/haskell/haskell-language-server/pull/184))
  by @alanz\r\n- doc(preprocessor): Document the preprocessor limitation\r\n([#177](https://github.com/haskell/haskell-language-server/pull/177))
  by @Sir4ur0n\r\n- Use shell.nix from Haskell-IDE-Engine\r\n([#169](https://github.com/haskell/haskell-language-server/pull/169))
  by @fendor\r\n- Remove last occurrences of shake.yaml\r\n([#163](https://github.com/haskell/haskell-language-server/pull/163))
  by @fendor\r\n- Use an unique install/stack.yaml\r\n([#154](https://github.com/haskell/haskell-language-server/pull/154))
  by @jneira\r\n- Introduce golden testing\r\n([#152](https://github.com/haskell/haskell-language-server/pull/152))
  by @Ailrun\r\n- Revert \"Use bullet as separator instead of HR\"\r\n([#150](https://github.com/haskell/haskell-language-server/pull/150))
  by @alanz\r\n- feat(hie-bios): Multi-cradle, ignore directories\r\n([#147](https://github.com/haskell/haskell-language-server/pull/147))
  by @Sir4ur0n\r\n- [Plugin] stylish-haskell formatter\r\n([#146](https://github.com/haskell/haskell-language-server/pull/146))
  by @Ailrun\r\n- Separate ghcide tests and disable them for now\r\n([#137](https://github.com/haskell/haskell-language-server/pull/137))
  by @jneira\r\n- Convert private lib in common stanza\r\n([#136](https://github.com/haskell/haskell-language-server/pull/136))
  by @jneira\r\n- Add zlibc to readme\r\n([#134](https://github.com/haskell/haskell-language-server/pull/134))
  by @Sir4ur0n\r\n- Complete editor integrations\r\n([#132](https://github.com/haskell/haskell-language-server/pull/132))
  by @jneira\r\n- Remove inexistent component from hie.yaml.stack\r\n([#131](https://github.com/haskell/haskell-language-server/pull/131))
  by @jneira\r\n- Bump to new mpickering/ghcide\r\n([#130](https://github.com/haskell/haskell-language-server/pull/130))
  by @alanz\r\n- Update ghc-lib-parser version\r\n([#129](https://github.com/haskell/haskell-language-server/pull/129))
  by @jneira\r\n- Remove redundant import\r\n([#128](https://github.com/haskell/haskell-language-server/pull/128))
  by @bubba\r\n- Default the number of Shake threads to 0 (automatic)\r\n([#127](https://github.com/haskell/haskell-language-server/pull/127))
  by @bubba\r\n- Added kakoune integration instructions\r\n([#125](https://github.com/haskell/haskell-language-server/pull/125))
  by @414owen\r\n- Fix install script dev target\r\n([#124](https://github.com/haskell/haskell-language-server/pull/124))
  by @jneira\r\n- Add plugin support for Rename providers\r\n([#123](https://github.com/haskell/haskell-language-server/pull/123))
  by @pepeiborra\r\n- Add jobs for stack and cabal using ghc-8.10.1\r\n([#120](https://github.com/haskell/haskell-language-server/pull/120))
  by @jneira\r\n- Add lower bound to tasty-ant-xml\r\n([#119](https://github.com/haskell/haskell-language-server/pull/119))
  by @jneira\r\n- Fix build using brittany revision\r\n([#117](https://github.com/haskell/haskell-language-server/pull/117))
  by @jneira\r\n- Use floskell released version 0.10.3\r\n([#116](https://github.com/haskell/haskell-language-server/pull/116))
  by @jneira\r\n- Add emacs/doom-emacs integration sub-section\r\n([#115](https://github.com/haskell/haskell-language-server/pull/115))
  by @yuanw\r\n- Port hie README partially\r\n([#112](https://github.com/haskell/haskell-language-server/pull/112))
  by @jneira\r\n- Use cabal-helper-1.1, add stack-8.10.1.yaml and unify cabal.project's\r\n([#108](https://github.com/haskell/haskell-language-server/pull/108))
  by @jneira\r\n- [#87] Fix completion via ghcide's `getCompletionsLSP`\r\n([#107](https://github.com/haskell/haskell-language-server/pull/107))
  by @korayal\r\n- Create specific project file for ghc-8.10.\r\n([#106](https://github.com/haskell/haskell-language-server/pull/106))
  by @jneira\r\n- Issue 5 - Move HIE Tests and convert to Tasty\r\n([#105](https://github.com/haskell/haskell-language-server/pull/105))
  by @jeffwindsor\r\n- Hls update latest hie bios\r\n([#100](https://github.com/haskell/haskell-language-server/pull/100))
  by @fendor\r\n- Update extra-deps to use latest fork version of shake\r\n([#98](https://github.com/haskell/haskell-language-server/pull/98))
  by @fendor\r\n- Activate typechecking in non-lsp mode\r\n([#95](https://github.com/haskell/haskell-language-server/pull/95))
  by @jneira\r\n- Fix haddock parsing errors\r\n([#92](https://github.com/haskell/haskell-language-server/pull/92))
  by @jneira\r\n- Update for haskell-lsp 0.22\r\n([#89](https://github.com/haskell/haskell-language-server/pull/89))
  by @alanz\r\n- Get building with ghc-8.10\r\n([#83](https://github.com/haskell/haskell-language-server/pull/83))
  by @bubba\r\n\r\n## 0.1\r\n\r\n### In this version\r\n\r\n- cabal to 2020-05-02T10:11:15Z\r\n-
  stack-8.8.3 to lts-15.10\r\n- stack to nightly-2020-05-01\r\n\r\n### Changes\r\n\r\nThis
  is the initial version, so too many to list individually.\r\n\r\nThe key point is
  that is now supports multi-component cradles, and has been in\r\ndaily use by the
  developers for some time.\r\n\r\nIt still does not have feature parity with `haskell-ide-engine`,
  but it is\r\ncurrently useful.\r\n"
basic-deps:
  shake: '>=0.17.5'
  ghc: -any
  lsp: -any
  cryptohash-sha1: -any
  bytestring: -any
  brittany: '>=0.13.1.0'
  extra: -any
  hiedb: -any
  base: '>=4.12 && <5'
  sqlite-simple: -any
  unordered-containers: -any
  text: -any
  with-utf8: -any
  hls-class-plugin: ^>=1.0.0.0
  safe-exceptions: -any
  hls-retrie-plugin: ^>=1.0.0.0
  hls-explicit-imports-plugin: ^>=1.0.0.0
  filepath: -any
  gitrev: -any
  process: -any
  haskell-language-server: -any
  async: -any
  data-default: -any
  hie-bios: -any
  containers: -any
  ghcide: '>=1.0.0.0 && <1.1'
  lens: -any
  ghc-paths: -any
  binary: -any
  hslogger: -any
  regex-tdfa: -any
  fuzzy: -any
  hls-haddock-comments-plugin: ^>=1.0.0.0
  fourmolu: ^>=0.3
  mtl: -any
  hls-tactics-plugin: ^>=1.0.0.0
  optparse-simple: -any
  hashable: -any
  hls-eval-plugin: ^>=1.0.0.0
  floskell: ^>=0.10
  base16-bytestring: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  deepseq: -any
  ghc-boot-th: -any
  hls-splice-plugin: ^>=1.0.0.0
  hls-plugin-api: '>=1.0.0.0 && <1.1'
  ormolu: ^>=0.1.2
  aeson: -any
  hls-hlint-plugin: ^>=1.0.0.0
  stylish-haskell: ^>=0.12
  directory: -any
all-versions:
- 0.8.0.0
- 0.9.0.0
- 1.0.0.0
author: The Haskell IDE Team
latest: 1.0.0.0
description-type: markdown
description: "# haskell-language-server\r\n\r\n![haskell-language-server][logo]\r\n\r\n[![Hackage][badge-hackage]][hackage]\r\n[![License
  Apache 2.0][badge-license]][license]\r\n[![CircleCI][badge-circleci]][circleci]\r\n![Github
  Testing Workflow](https://github.com/haskell/haskell-language-server/workflows/Testing/badge.svg)\r\n![Github
  Nix Workflow](https://github.com/haskell/haskell-language-server/workflows/Nix/badge.svg)\r\n\r\n[logo]:
  ./docs/logos/logo-256.png\r\n[badge-license]: https://img.shields.io/badge/license-Apache2-green.svg?dummy\r\n[license]:
  https://github.com/haskell/haskell-language-server/blob/master/LICENSE\r\n[badge-circleci]:
  https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg\r\n[circleci]:
  https://circleci.com/gh/haskell/haskell-language-server/\r\n[badge-hackage]: https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell\r\n[hackage]:
  https://hackage.haskell.org/package/haskell-language-server\r\n\r\nIntegration point
  for [ghcide](https://github.com/haskell/ghcide) and [haskell-ide-engine](https://github.com/haskell/haskell-ide-engine).
  One IDE to rule\r\nthem all. Read the [project's\r\nbackground](https://neilmitchell.blogspot.com/2020/01/one-haskell-ide-to-rule-them-all.html).\r\n\r\n-
  [Haskell Language Server (HLS)](#haskell-language-server)\r\n  - [Features](#features)\r\n
  \ - [Installation](#installation)\r\n    - [Prerequisites](#prerequisites)\r\n    -
  [ghcup](#ghcup)\r\n    - [Visual Studio Code](#visual-studio-code)\r\n    - [Pre-built
  binaries](#pre-built-binaries)\r\n    - [Installation from source](#installation-from-source)\r\n
  \     - [Common pre-requirements](#common-pre-requirements)\r\n      - [Linux-specific
  pre-requirements](#linux-specific-pre-requirements)\r\n      - [Windows-specific
  pre-requirements](#windows-specific-pre-requirements)\r\n      - [Download the source
  code](#download-the-source-code)\r\n      - [Building](#building)\r\n        - [Install
  via cabal](#install-via-cabal)\r\n        - [Install specific GHC Version](#install-specific-ghc-version)\r\n
  \   - [Installation from Hackage](#installation-from-hackage)\r\n  - [Configuring
  haskell-language-server](#configuring-haskell-language-server)\r\n  - [Configuring
  your project build](#configuring-your-project-build)\r\n  - [Configuring your editor](#configuring-your-editor)\r\n
  \   - [VS Code](#using-haskell-language-server-with-vs-code)\r\n    - [Sublime Text](#using-haskell-language-server-with-sublime-text)\r\n
  \   - [Vim or Neovim](#using-haskell-language-server-with-vim-or-neovim)\r\n    -
  [Atom](#using-haskell-language-server-with-atom)\r\n    - [Emacs](#using-haskell-language-server-with-emacs)\r\n
  \   - [Kakoune](#using-haskell-language-server-with-kakoune)\r\n  - [Known limitations](#known-limitations)\r\n
  \   - [Preprocessor](#preprocessor)\r\n  - [Troubleshooting](#troubleshooting)\r\n
  \ - [Contributing](#contributing)\r\n    - [Building haskell-language-server](#building-haskell-language-server)\r\n
  \     - [Using Cabal](#using-cabal)\r\n      - [Using Stack](#using-stack)\r\n      -
  [Introduction tutorial](#instructions-tutorial)\r\n      - [Test your hacked HLS
  in your editor](#test-your-hacked-hls-in-your-editor)\r\n\r\n## Features\r\n\r\n-
  Code evaluation codelens ([Tutorial](plugins/hls-eval-plugin/README.md)):\r\n\r\n
  \  ![Eval Demo](plugins/hls-eval-plugin/demo.gif)\r\n\r\n- Type information and
  documentation on hover. Note that currently, in order for docs to be displayed for
  dependencies, they must have been built with GHC's `-haddock` flag:\r\n\r\n  - For
  cabal:\r\n      - Add to your global config file (e.g. `~/.cabal/config`):\r\n        ```\r\n
  \       program-default-options\r\n          ghc-options: -haddock\r\n        ```\r\n
  \     - Or, for a single project, run `cabal configure --ghc-options=-haddock`\r\n\r\n
  \ - For stack, add to global `$STACK_ROOT\\config.yaml`, or project's `stack.yaml`:\r\n
  \   ```\r\n    ghc-options:\r\n      \"$everything\": -haddock\r\n    ```\r\n\r\n
  \ This will cause compilation errors if a dependency contains invalid Haddock markup,
  though from GHC version 9.0, [these will be demoted to warnings](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/2377).\r\n\r\n
  - Integration with [retrie](https://hackage.haskell.org/package/retrie)\r\n\r\n
  \  ![Retrie](https://i.imgur.com/Ev7B87k.gif)\r\n\r\n - Code lenses for explicit
  import lists\r\n\r\n   ![Imports code lens](https://imgur.com/pX9kvY4.gif)\r\n\r\n
  - Many more (TBD)\r\n\r\n## Installation\r\n\r\n### Prerequisites\r\n\r\n- For standalone
  `.hs`/`.lhs` files, [ghc](https://www.haskell.org/ghc/) must be installed and on
  the PATH. The easiest way to install it is with [ghcup](https://www.haskell.org/ghcup/)
  or [Chocolatey](https://www.haskell.org/platform/windows.html) on Windows.\r\n-
  For Cabal based projects, both ghc and [cabal-install](https://www.haskell.org/cabal/)
  must be installed and on the PATH. It can also be installed with [ghcup](https://www.haskell.org/ghcup/)
  or [Chocolatey](https://www.haskell.org/platform/windows.html) on Windows.\r\n-
  For Stack based projects, [stack](http://haskellstack.org) must be installed and
  on the PATH.\r\n\r\n### ghcup\r\n\r\nIf you are using [`ghcup`](https://www.haskell.org/ghcup/)
  to manage your installations, you can install the latest version of `haskell-language-server`
  with\r\n```\r\nghcup install hls\r\n```\r\n\r\n### Visual Studio Code\r\n\r\nIf
  you are using Visual Studio Code, the [Haskell extension](https://marketplace.visualstudio.com/items?itemName=haskell.haskell)
  will automatically download and install `haskell-language-server` for you.\r\n\r\n###
  Pre-built binaries\r\n\r\nThere are pre-built binaries available from the [releases
  page](https://github.com/haskell/haskell-language-server/releases) for Linux, Windows
  and macOS.\r\nTo install, download the `haskell-language-server-wrapper` executable
  for your platform as well as any `haskell-language-server` executables for the GHC
  versions you plan on working with, and either put them on your PATH or point your
  client to them.\r\n\r\n### Installation from source\r\n\r\n#### Common pre-requirements\r\n\r\n-
  `stack` or `cabal` must be in your PATH\r\n  - You need stack version >= 2.1.1 or
  cabal >= 2.4.0.0\r\n- `git` must be in your PATH\r\n- The directory where `stack`or
  `cabal` put the binaries must be in you PATH:\r\n  - For stack you can get it with
  `stack path --local-bin`\r\n  - For cabal it is by default `$HOME/.cabal/bin` in
  linux and `%APPDATA%\\cabal\\bin` in windows.\r\n\r\nTip: you can quickly check
  if some command is in your path by running the command.\r\nIf you receive some meaningful
  output instead of \"command not found\"-like message\r\nthen it means you have the
  command in PATH.\r\n\r\n#### Linux-specific pre-requirements\r\n\r\nOn Linux you
  will need install a couple of extra libraries:\r\n- [Unicode (ICU)](http://site.icu-project.org/)\r\n-
  [NCURSES](https://www.gnu.org/software/ncurses/)\r\n- [Zlib](https://zlib.net/)\r\n\r\n**Debian
  9/Ubuntu 18.04 or earlier**:\r\n\r\n```bash\r\nsudo apt install libicu-dev libtinfo-dev
  libgmp-dev zlib1g-dev\r\n```\r\n\r\n**Debian 10/Ubuntu 18.10 or later**:\r\n\r\n```bash\r\nsudo
  apt install libicu-dev libncurses-dev libgmp-dev zlib1g-dev\r\n```\r\n\r\n**Fedora**:\r\n\r\n```bash\r\nsudo
  dnf install libicu-devel ncurses-devel zlib-devel\r\n```\r\n\r\n#### Windows-specific
  pre-requirements\r\n\r\nIn order to avoid problems with long paths on Windows you
  can do either one of the following:\r\n\r\n1. Clone the `haskell-language-server`
  to a short path, for example the root of your logical drive (e.g. to\r\n   `C:\\hls`).
  Even if you choose `C:\\haskell-language-server` you could hit the problem. If this
  doesn't work or you want to use a longer path, try the second option.\r\n\r\n2.
  If the `Local Group Policy Editor` is available on your system, go to: `Local Computer
  Policy -> Computer Configuration -> Administrative Templates -> System -> Filesystem`
  set `Enable Win32 long paths` to `Enabled`. If you don't have the policy editor
  you can use regedit by using the following instructions [here](https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#enable-long-paths-in-windows-10-version-1607-and-later).
  You also need to configure git to allow longer paths by using unicode paths. To
  set this for all your git repositories use `git config --system core.longpaths true`
  (you probably need an administrative shell for this) or for just this one repository
  use `git config core.longpaths true`.\r\n\r\nIn addition make sure `haskell-language-server.exe`
  is not running by closing your editor, otherwise in case of an upgrade the executable
  can not be installed.\r\n\r\n#### Download the source code\r\n\r\n```bash\r\ngit
  clone https://github.com/haskell/haskell-language-server --recurse-submodules\r\ncd
  haskell-language-server\r\n```\r\n\r\n#### Building\r\n\r\nNote, on first invocation
  of the build script with stack, a GHC is being installed for execution.\r\nThe GHC
  used for the `install.hs` can be adjusted in `./install/stack.yaml` by using a different
  resolver.\r\n\r\nAvailable commands can be seen with:\r\n\r\n```bash\r\nstack ./install.hs
  help\r\n```\r\n\r\nRemember, this will take time to download a Stackage-LTS and
  an appropriate GHC for build\r\nhaskell-language-server the first time.\r\n\r\n#####
  Install via cabal\r\n\r\nThe install-script can be invoked via `cabal` instead of
  `stack` with the command\r\n\r\n```bash\r\ncabal v2-run ./install.hs --project-file
  install/shake.project <target>\r\n```\r\n\r\nor using the existing alias script\r\n\r\n```bash\r\n./cabal-hls-install
  <target>\r\n```\r\n\r\nRunning the script with cabal on windows requires a cabal
  version greater or equal to `3.0.0.0`.\r\n\r\nFor brevity, only the `stack`-based
  commands are presented in the following sections.\r\n\r\n##### Install specific
  GHC Version\r\n\r\nThe script will install the executables `haskell-language-server-wrapper`
  and `haskell-language-server`.\r\n\r\nIt will copy the latter appending the used
  ghc version, needed by the wrapper to choose the suitable version\r\nfor the project
  at hand.\r\n\r\nSo installing the executables directly with `stack install` or `cabal
  v2-install` may not be enough\r\nfor it to work properly.\r\n\r\nInstall haskell-language-server
  for the latest available and supported GHC version (and hoogle docs):\r\n\r\n```bash\r\nstack
  ./install.hs hls\r\n```\r\n\r\nInstall haskell-language-server for a specific GHC
  version (and hoogle docs):\r\n\r\n```bash\r\nstack ./install.hs hls-8.8.3\r\n```\r\n\r\n`hls-8.8.3`
  target will build the project and install `haskell-language-server-wrapper`,\r\n`haskell-language-server`,
  `haskell-language-server-8.8.3` and `haskell-language-server-8.8`\r\nexecutables.\r\n\r\nThe
  Haskell Language Server can also be built with `cabal v2-build` instead of `stack
  build`.\r\nThis has the advantage that you can decide how the GHC versions have
  been installed.\r\nTo see what GHC versions are available, the command `cabal-hls-install
  ghcs` can be used.\r\nIt will list all *supported* GHC versions that are on the
  path for build with their respective installation directory.\r\nIf you think, this
  list is incomplete, you can try to modify the PATH variable, such that the executables
  can be found.\r\nNote, that the targets `hls` and `data` depend on the found GHC
  versions.\r\n\r\nAn example output is:\r\n\r\n```bash\r\n> ./cabal-hls-install ghcs\r\n******************************************************************\r\nFound
  the following GHC paths:\r\nghc-8.6.5: /opt/bin/ghc-8.6.5\r\nghc-8.8.3: /opt/bin/ghc-8.8.3\r\n\r\n******************************************************************\r\n```\r\n\r\nIf
  your desired ghc has been found, you use it to install haskell-language-server.\r\n\r\n```bash\r\n./cabal-hls-install
  hls-8.6.5\r\n```\r\n\r\n### Installation from Hackage\r\n\r\nDirect installation
  from Hackage, while possible via `cabal install haskell-language-server`, is not
  recommended for most people.\r\nSaid command builds the `haskell-language-server`
  binary and installs it in the default Cabal binaries folder,\r\nbut the binary will
  only work with projects that use the same GHC version that built it.\r\n\r\nThe
  package can be found here on Hackage: https://hackage.haskell.org/package/haskell-language-server\r\n\r\n##
  Configuring `haskell-language-server`\r\n\r\nLanguage servers like `haskell-language-server`
  expose most of their configuration via the client (i.e. the editor).\r\nThat means
  that the way in which you configure the settings will depend on the client.\r\n\r\nMost
  clients (editors) already have an opinion about how settings should be configured!\r\nFor
  example, in VS Code you use the graphical Settings tab or `settings.json`, whereas
  in Emacs you use customization variables.\r\nIn the [editor configuration section](#configuring-your-editor)
  we give some pointers for popular editors, but you should consult the documentation
  for your specific editor if you have trouble.\r\n\r\nHowever, we can say some high-level
  things about the kinds of configuration `haskell-language-server` uses, and how
  to use them.\r\nThis can sound a bit confusing, but ultimately the client should
  present you with these options in a user-friendly way that makes sense for that
  editor.\r\n\r\n### Generic server options\r\n\r\nThe LSP protocol is designed to
  support many useful server configuration options generically.\r\nThese are sent
  to the server by the client, and can be controlled without reference to a specific
  language.\r\n\r\nFor example, there are protocol methods for highlighting matching
  identifiers throughout a document.\r\nThis is a capability which any server can
  implement, so the client can decide generically whether to ask the server to do
  it or not.\r\nSo your editor can provide a setting to turn this on or off globally,
  for any language server you might use.\r\n\r\nSettings like this are typically provided
  by the generic LSP client support for your editor, for example in Emacs by `lsp-mode`.\r\n\r\n###
  Generic editor options\r\n\r\nYour editor may provide some settings that affect
  how the information from the language server is used.\r\nFor example, whether popups
  are shown, or whether code lenses appear by default.\r\n\r\nSettings like this are
  typically provided by the generic LSP client support for your editor, for example
  in Emacs by `lsp-mode`.\r\n\r\n### Language-specific server options\r\n\r\nA specific
  language server can also have its own configuration options.\r\nThese are still
  sent to the server by the client, but they can only be controlled by a specific
  client that knows about those options.\r\n\r\nFor example, `haskell-language-server`
  allows you to choose the formatting provider which will be used for formatting Haskell
  source.\r\nThis option obviously would not make sense for language servers for other
  languages, or even for other Haskell language servers (which need not even support
  formatting).\r\n\r\nHere is a list of the additional settings currently supported
  by `haskell-language-server`, along with their setting key (you may not need to
  know this) and default:\r\n- Formatting provider (`haskell.formattingProvider`,
  default `ormolu`): what formatter to use; one of `floskell`, `ormolu`, `fourmolu`,
  `stylish-haskell`, or `brittany` (if compiled with AGPL)\r\n- Format on imports
  (`haskell.formatOnImportOn`, default true): whether to format after adding an import\r\n-
  Maximum number of problems to report (`haskell.maxNumberOfProblems`, default 100):
  the maximum number of problems the server will send to the client\r\n- Diagnostics
  on change (`haskell.diagnosticsOnChange`, default true): (currently unused)\r\n-
  Completion snippets (`haskell.completionSnippetsOn`, default true): whether to support
  completion snippets\r\n- Liquid Haskell (`haskell.liquidOn`, default false): whether
  to enable Liquid Haskell support (currently unused until the Liquid Haskell support
  is functional again)\r\n- Hlint (`haskell.hlintOn`, default true): whether to enable
  Hlint support\r\n- Max completions (`haskell.maxCompletions`, default 40): maximum
  number of completions sent to the LSP client.\r\n\r\nSettings like this are typically
  provided by the language-specific LSP client support for your editor, for example
  in Emacs by `lsp-haskell`.\r\n\r\n### Client options\r\n\r\nA particular client
  might also have some options of its own, for example to control how the server executable
  is started.\r\n\r\nSettings like this are typically be provided by the language-specific
  LSP client support for your editor, for example in Emacs by `lsp-haskell`.\r\n\r\n##
  Configuring your project build\r\n\r\n`haskell-language-server` has to compile your
  project in order to give you diagnostics, which means that it needs to know how
  to do so.\r\nThis is handled by the [`hie-bios`](https://github.com/mpickering/hie-bios)
  project.\r\n\r\n**For a full explanation of how `hie-bios` determines the project
  build configuration, and how to configure it manually, refer to the [`hie-bios`
  README](https://github.com/mpickering/hie-bios/blob/master/README.md).**\r\n\r\nAt
  the moment, `haskell-language-server` has some limited support to automatically
  detect your project build configuration.\r\nThe plan is to improve it to handle
  most use cases.\r\n\r\nHowever, for now, the most reliable way is to manually configure
  `hie-bios` using a `hie.yaml` file in the root of the workspace.\r\nA `hie.yaml`
  file **explicitly** describes how to setup the environment to compile the various
  parts of your project.\r\nFor that you need to know what *components* your project
  has, and the path associated with each one.\r\nSo you will need some knowledge about\r\n[stack](https://docs.haskellstack.org/en/stable/build_command/#components)
  or [cabal](https://cabal.readthedocs.io/en/latest/cabal-commands.html?#cabal-v2-build)
  components.\r\n\r\nYou also can use [this utility](https://github.com/Avi-D-coder/implicit-hie)
  to automatically generate `hie.yaml` files for\r\nthe most common stack and cabal
  configurations\r\n\r\nFor example, to state that you want to use `stack` then the
  configuration file\r\nwould look like:\r\n\r\n```yaml\r\ncradle:\r\n  stack:\r\n
  \   component: \"haskell-language-server:lib\"\r\n```\r\n\r\nIf you use `cabal`
  then you probably need to specify which component you want\r\nto use.\r\n\r\n```yaml\r\ncradle:\r\n
  \ cabal:\r\n    component: \"lib:haskell-language-server\"\r\n```\r\n\r\nIf you
  have a project with multiple components, you can use a cabal-multi\r\ncradle:\r\n\r\n```yaml\r\ncradle:\r\n
  \ cabal:\r\n    - path: \"./test/functional/\"\r\n      component: \"haskell-language-server:func-test\"\r\n
  \   - path: \"./test/utils/\"\r\n      component: \"haskell-language-server:hls-test-utils\"\r\n
  \   - path: \"./exe/Main.hs\"\r\n      component: \"haskell-language-server:exe:haskell-language-server\"\r\n
  \   - path: \"./exe/Wrapper.hs\"\r\n      component: \"haskell-language-server:exe:haskell-language-server-wrapper\"\r\n
  \   - path: \"./src\"\r\n      component: \"lib:haskell-language-server\"\r\n    -
  path: \"./ghcide/src\"\r\n      component: \"ghcide:lib:ghcide\"\r\n    - path:
  \"./ghcide/exe\"\r\n      component: \"ghcide:exe:ghcide\"\r\n```\r\n\r\nEquivalently,
  you can use stack:\r\n\r\n```yaml\r\ncradle:\r\n  stack:\r\n    - path: \"./test/functional/\"\r\n
  \     component: \"haskell-language-server:func-test\"\r\n    - path: \"./exe/Main.hs\"\r\n
  \     component: \"haskell-language-server:exe:haskell-language-server\"\r\n    -
  path: \"./exe/Wrapper.hs\"\r\n      component: \"haskell-language-server:exe:haskell-language-server-wrapper\"\r\n
  \   - path: \"./src\"\r\n      component: \"haskell-language-server:lib\"\r\n    -
  path: \"./ghcide/src\"\r\n      component: \"ghcide:lib:ghcide\"\r\n    - path:
  \"./ghcide/exe\"\r\n      component: \"ghcide:exe:ghcide\"\r\n```\r\n\r\nOr you
  can explicitly state the program which should be used to collect\r\nthe options
  by supplying the path to the program. It is interpreted\r\nrelative to the current
  working directory if it is not an absolute path.\r\n\r\n```yaml\r\ncradle:\r\n  bios:\r\n
  \   program: \".hie-bios\"\r\n```\r\n\r\nThe complete configuration is a subset
  of\r\n\r\n```yaml\r\ncradle:\r\n  cabal:\r\n    component: \"optional component
  name\"\r\n  stack:\r\n    component: \"optional component name\"\r\n  bios:\r\n
  \   program: \"program to run\"\r\n    dependency-program: \"optional program to
  run\"\r\n  direct:\r\n    arguments: [\"list\",\"of\",\"ghc\",\"arguments\"]\r\n
  \ default:\r\n  none:\r\n\r\ndependencies:\r\n  - someDep\r\n```\r\n\r\n## Configuring
  your editor\r\n\r\nMost editors provide a Haskell-specific extension that provides
  support for launching `haskell-language-server` and talking to it, as well as [exposing
  configuration options](#configuring-haskell-language-server).\r\n\r\nEditors typically
  assume that you have already installed `haskell-language-server` (see above) and
  that the installation script put the `haskell-language-server` and `haskell-language-server-wrapper`
  binaries in your `PATH` (usually `~/.local/bin` or `~/.cabal/bin` on Linux and macOS,
  `%APPDATA%\\local\\bin` or `%APPDATA%\\cabal\\bin` on Windows).\r\nThe exception
  is VS Code, which can automatically install the binaries if they are not installed
  already.\r\n\r\n### Using Haskell Language Server with VS Code\r\n\r\nInstall from\r\n[the
  VSCode marketplace](https://marketplace.visualstudio.com/items?itemName=haskell.haskell),
  or manually from the repository [vscode-haskell](https://github.com/haskell/vscode-haskell).\r\nThe
  `haskell-language-server` and `haskell-language-server-wrapper` binaries will be
  automatically downloaded on an ad-hoc basis, but if you have them already installed
  on your PATH then it will just use them instead.\r\n\r\nConfiguration is done via
  the \"Haskell\" section of \"Settings\".\r\n\r\n### Using Haskell Language Server
  with Sublime Text\r\n\r\n- Install [LSP](https://packagecontrol.io/packages/LSP)
  using [Package Control](https://packagecontrol.io/)\r\n- From Sublime Text, go to
  Preferences and search for LSP Settings\r\n- Paste in these settings. Make sure
  to change the command path to your `haskell-language-server-wrapper`\r\n\r\n```json\r\n{\r\n
  \ \"clients\": {\r\n    \"haskell-language-server\": {\r\n      \"command\": [\"haskell-language-server-wrapper\",
  \"--lsp\"],\r\n      \"scopes\": [\"source.haskell\"],\r\n      \"syntaxes\": [\"Packages/Haskell/Haskell.sublime-syntax\"],\r\n
  \     \"languageId\": \"haskell\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNow open a
  Haskell project with Sublime Text and enable Language Server in the project.\r\nYou
  should have these features available:\r\n\r\n1. Errors are underlined in red\r\n2.
  LSP: Show Diagnostics will show a list of hints and errors\r\n3. LSP: Format Document
  will prettify the file\r\n\r\n### Using Haskell Language Server with Vim or Neovim\r\n\r\nYou
  can use [Coc](https://github.com/neoclide/coc.nvim), [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\r\nor
  any other Vim Language server protocol client.\r\nCoc is recommend since it is the
  only complete LSP implementation for Vim and Neovim and offers snippets and floating
  documentation out of the box.\r\n\r\n#### Coc\r\n\r\nFollow Coc's [installation
  instructions](https://github.com/neoclide/coc.nvim).\r\nThen issue `:CocConfig`
  and add the following to your Coc config file.\r\n\r\n```json\r\n{\r\n  \"languageserver\":
  {\r\n    \"haskell\": {\r\n      \"command\": \"haskell-language-server-wrapper\",\r\n
  \     \"args\": [\"--lsp\"],\r\n      \"rootPatterns\": [\"*.cabal\", \"stack.yaml\",
  \"cabal.project\", \"package.yaml\", \"hie.yaml\"],\r\n      \"filetypes\": [\"haskell\",
  \"lhaskell\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### LanguageClient-neovim\r\n\r\n#####
  vim-plug\r\n\r\nIf you use [vim-plug](https://github.com/junegunn/vim-plug), then
  you can do this by e.g.,\r\nincluding the following line in the Plug section of
  your `init.vim` or `~/.vimrc`:\r\n\r\n```text\r\nPlug 'autozimu/LanguageClient-neovim',
  {\r\n    \\ 'branch': 'next',\r\n    \\ 'do': 'bash install.sh'\r\n    \\ }\r\n```\r\n\r\nand
  issuing a `:PlugInstall` command within Neovim or Vim.\r\n\r\n##### Clone the LanguageClient-neovim
  repo\r\n\r\nAs an alternative to using [vim-plug](https://github.com/junegunn/vim-plug)
  shown above, clone [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\r\ninto
  `~/.vim/pack/XXX/start/`, where `XXX` is just a name for your \"plugin suite\".\r\n\r\n#####
  Configuration and sample `~/.vimrc` sections\r\n\r\n```vim\r\nset rtp+=~/.vim/pack/XXX/start/LanguageClient-neovim\r\nlet
  g:LanguageClient_serverCommands = { 'haskell': ['haskell-language-server-wrapper',
  '--lsp'] }\r\n```\r\n\r\nYou'll probably want to add some mappings for common commands:\r\n\r\n```vim\r\nnnoremap
  <F5> :call LanguageClient_contextMenu()<CR>\r\nmap <Leader>lk :call LanguageClient#textDocument_hover()<CR>\r\nmap
  <Leader>lg :call LanguageClient#textDocument_definition()<CR>\r\nmap <Leader>lr
  :call LanguageClient#textDocument_rename()<CR>\r\nmap <Leader>lf :call LanguageClient#textDocument_formatting()<CR>\r\nmap
  <Leader>lb :call LanguageClient#textDocument_references()<CR>\r\nmap <Leader>la
  :call LanguageClient#textDocument_codeAction()<CR>\r\nmap <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>\r\n```\r\n\r\nUse
  <kbd>Ctrl+x</kbd><kbd>Ctrl+o</kbd> (`<C-x><C-o>`) to open up the auto-complete menu,\r\nor
  for asynchronous auto-completion, follow the setup instructions on\r\n[LanguageClient](https://github.com/autozimu/LanguageClient-neovim).\r\n\r\nIf
  you'd like diagnostics to be highlighted, add a highlight group for `ALEError`/`ALEWarning`/`ALEInfo`,\r\nor
  customize `g:LanguageClient_diagnosticsDisplay`:\r\n\r\n```vim\r\nhi link ALEError
  Error\r\nhi Warning term=underline cterm=underline ctermfg=Yellow gui=undercurl
  guisp=Gold\r\nhi link ALEWarning Warning\r\nhi link ALEInfo SpellCap\r\n```\r\n\r\nIf
  you're finding that the server isn't starting at the correct project root,\r\nit
  may also be helpful to also specify root markers:\r\n\r\n```vim\r\nlet g:LanguageClient_rootMarkers
  = ['*.cabal', 'stack.yaml']\r\n```\r\n\r\nFurther configuration can be done by pointing
  the [`g:LanguageClient_settingsPath`](https://github.com/autozimu/LanguageClient-neovim/blob/0e5c9546bfddbaa2b01e5056389c25aefc8bf989/doc/LanguageClient.txt#L221)\r\nvariable
  to the file in which you want to keep your LSP settings.\r\n\r\n### Using Haskell
  Language Server with Atom\r\n\r\nInstall the two Atom packages [atom-ide-ui](https://atom.io/packages/atom-ide-ui)
  and [haskell](https://atom.io/packages/haskell),\r\n\r\n```bash\r\n$ apm install
  language-haskell atom-ide-ui haskell\r\n```\r\n\r\n### Using haskell-language-server
  with Emacs\r\n\r\nEmacs support is provided by a combination of the following packages:\r\n\r\n[lsp-mode](https://github.com/emacs-lsp/lsp-mode)\r\n[lsp-ui](https://github.com/emacs-lsp/lsp-ui)\r\n[lsp-haskell](https://github.com/emacs-lsp/lsp-haskell)\r\n\r\nYou
  can install these manually if you are using plain Emacs; instructions for some specific
  flavours\r\nare included below.\r\n\r\nMake sure to check the READMEs of each of
  these packages, which explain how to configure the\r\nvarious parts of the Emacs
  integration.\r\nIn particular, `lsp-haskell` provides customization options for
  the `haskell-language-server`-specific parts,\r\nsuch as the path to the server
  executable.\r\n\r\n#### Using haskell-language-server with [doom-emacs](https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/haskell#module-flags)\r\n\r\nManual
  installation of packages is not required.\r\nEnable the lsp module and the haskell
  lang module with lsp flag in `.doom.d/init.el`:\r\n\r\n``` emacs-lisp\r\n:tools\r\nlsp\r\n;;
  ...\r\n:lang\r\n(haskell +lsp)\r\n```\r\n\r\nthen do `$HOME/.emacs.d/bin/doom sync`\r\n\r\n####
  Using haskell-language-server with [Spacemacs](https://github.com/syl20bnr/spacemacs)\r\n\r\nManual
  installation of packages is not required.\r\nEnable the `haskell` layer and the
  `lsp` layer in your Spacemacs config file:\r\n\r\n```emacs-lisp\r\ndotspacemacs-configuration-layers\r\n
  \ '(\r\n    haskell\r\n    lsp\r\n    ;; ...\r\n  )\r\n```\r\n\r\n### Using haskell-language-server
  with [Kakoune](https://github.com/mawww/kakoune)\r\n\r\n1. Grab a copy of [kak-lsp](https://github.com/ul/kak-lsp),
  and follow the setup instructions.\r\n2. Point your `kak-lsp.toml` to `haskell-language-server-wrapper`.\r\n\r\n```toml\r\n[language.haskell]\r\nfiletypes
  = [\"haskell\"]\r\nroots = [\"Setup.hs\", \"stack.yaml\", \"*.cabal\"]\r\ncommand
  = \"haskell-language-server-wrapper\"\r\nargs = [\"--lsp\"]\r\n```\r\n\r\n## Known
  limitations\r\n\r\n### Preprocessor\r\nHLS is not yet able to find project preprocessors,
  which may result in `could not execute: <preprocessor>` errors. This problem is\r\ntracked
  in https://github.com/haskell/haskell-language-server/issues/176 and originally
  comes from https://github.com/mpickering/hie-bios/issues/125\r\n\r\nAs a workaround,
  you need to ensure the preprocessor is available in the path (install globally with
  Stack or Cabal, provide in `shell.nix`, etc.).\r\n\r\nExample with `tasty-discover`:\r\n```haskell\r\n{-#
  OPTIONS_GHC -F -pgmF tasty-discover #-}\r\n```\r\nThis returns an error in HLS if
  'tasty-discover' is not in the path: `could not execute: tasty-discover`.\r\n\r\n##
  Troubleshooting\r\n\r\n### Common issues\r\n\r\n#### Difficulties with Stack and
  `Paths_` modules\r\n\r\nThese are known to be somewhat buggy at the moment: https://github.com/haskell/haskell-language-server/issues/478.\r\nThis
  issue should be fixed in Stack versions >= 2.5.\r\n\r\n#### Problems with dynamic
  linking\r\n\r\nAs haskell-language-server prebuilt binaries are statically linked,
  they don't play well with projects using dynamic linking.\r\nAn usual symptom is
  the presence of errors containing `unknown symbol` and it is typical in arch linux,
  where a dynamically linked version of ghc is used. \r\n\r\nThe workaround is to
  use a version of haskell-language-server compiled from source with `-dynamic` enabled`.
  See more details [here](https://github.com/haskell/haskell-language-server/issues/1160#issuecomment-756566273).\r\n\r\n###
  Troubleshooting the server\r\n\r\n#### Diagnostic mode\r\n\r\nThe `haskell-language-server`
  executable can be run in diagnostic mode, where it will just try to load modules
  from your project, printing all of its output to stdout.\r\nThis makes it much easier
  to see what's going on and to diagnose build-related problems.\r\n\r\nTo do this,
  simply run the executable directly from your shell in the project root.\r\nYou can
  either run it without an argument, in which case it will load random modules, or
  with a path, in which case it will load modules in that file or directory.\r\n\r\n####
  Examining the log\r\n\r\nMost clients will launch `haskell-language-server` with
  `--logfile` to make it write a log file.\r\nPlease consult the documentation for
  your client to find out where this is (or how to set it).\r\n\r\nThe log will contain
  all the messages that are sent to the server and its responses.\r\nThis is helpful
  for low-level debugging: if you expect a certain action to happen, you can look
  in the log to see if the corresponding messages are\r\nsent, or if there are any
  errors.\r\n\r\nTo get a more verbose, also pass `--debug` to the executable.\r\n\r\n###
  Troubleshooting the client\r\n\r\nMany clients provide diagnostic information about
  a LSP session.\r\nIn particular, look for a way to get the status of the server,
  the server stderr, or a log of the messages that the client has sent to the server.\r\nFor
  example, `lsp-mode` provides all of these (see its [troubleshooting page](https://emacs-lsp.github.io/lsp-mode/page/troubleshooting/)
  for details).\r\n\r\nThe most common client-related problem is the client simply
  not finding the server executable, so make sure that you have the right `PATH` and
  you have configured\r\nit to look for the right executable.\r\n\r\n## Contributing\r\n\r\n:heart:
  The Haskell tooling dream is near, we need your help! :heart:\r\n\r\n- Join [our
  IRC channel](https://webchat.freenode.net/?channels=haskell-language-server) at
  `#haskell-language-server` on `freenode`.\r\n- Fork this repo and [ghcide](https://github.com/haskell/ghcide)
  and hack as much as you can.\r\n\r\n### Style guidelines\r\n\r\nThe project includes
  a [`.editorconfig`](https://editorconfig.org) [file](https://github.com/haskell/haskell-language-server/blob/master/.editorconfig)
  with the editor basic settings used by the project.\r\nHowever, most editors will
  need some action to honour those settings automatically.\r\nFor example vscode needs
  to have installed a specific [extension](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig).\r\nPlease,
  try to follow those basic settings to keep the codebase as uniform as possible.\r\n\r\n###
  Building haskell-language-server\r\n\r\nThe project can be built with both `cabal
  build` and `stack build`.\r\n\r\nhaskell-language-server can also be used with itself.
  We provide preset samples of `hie.yaml` for Cabal and Stack.\r\n\r\nNote: the `./install/`
  folder is not directly tied to the project so it has dedicated `./install/hie.yaml.[cbl|stack]`\r\ntemplates.\r\n\r\n####
  Using Cabal\r\n\r\n```shell\r\n$ cp hie-cabal.yaml hie.yaml\r\n$ cp install/hie-cabal.yaml
  install/hie.yaml\r\n```\r\n\r\n#### Using Stack\r\n\r\n```shell\r\n$ cp hie-stack.yaml
  hie.yaml\r\n$ cp install/hie-stack.yaml install/hie.yaml\r\n$ cp ghcide/hie-stack.yaml
  ghcide/hie.yaml\r\n$ stack build --test --no-run-tests\r\n$ cd install\r\n$ stack
  build\r\n```\r\n\r\n#### Using Nix\r\n\r\nThe instructions below show how to set
  up a Cachix binary cache and open a nix shell for local development.\r\n\r\n```shell\r\n$
  cachix use haskell-language-server\r\n$ nix-shell\r\n$ cabal update\r\n$ cabal build\r\n```\r\n\r\nIf
  you are looking for a Nix expression to create haskell-language-server binaries,
  see https://github.com/haskell/haskell-language-server/issues/122\r\n\r\n#### Introduction
  tutorial\r\nPepeiborra [wrote an tutorial](https://github.com/pepeiborra/hls-tutorial)
  on writing a plugin in HLS.\r\n\r\n#### Test your hacked HLS in your editor\r\nIf
  you want to test HLS while hacking on it, follow the steps below.\r\n\r\nTo do once:\r\n-
  Open some codebase on which you want to test your hacked HLS in your favorite editor\r\n-
  Configure this editor to use your custom HLS executable\r\n  - With Cabal:\r\n    -
  On Unix systems: `cabal exec which haskell-language-server`\r\n    - On Windows:
  `cabal exec where haskell-language-server`\r\n  - With Stack: `$(stack path --dist-dir)/build/haskell-language-server/haskell-language-server`\r\n\r\nTo
  do every time you changed code and want to test it:\r\n- Build HLS\r\n  - With Cabal:
  `cabal build exe:haskell-language-server`\r\n  - With Stack: `stack build haskell-language-server:exe:haskell-language-server`\r\n-
  Restart HLS\r\n  - With VS Code: `Haskell: Restart Haskell LSP Server`\r\n\r\n###
  Adding support for a new editor\r\n\r\nAdding support for new editors is fairly
  easy if the editor already has good support for generic LSP-based extensions.\r\nIn
  that case, there will likely be an editor-specific support system for this (like
  `lsp-mode` for Emacs).\r\nThis will typically provide instructions for how to support
  new languages.\r\n\r\nIn some cases you may need to write a small bit of additional
  client support, or expose a way for the user to set the server's [configuration
  options](#configuring-haskell-language-server) and\r\nfor them to configure how
  the server is started.\r\n"
license-name: Apache-2.0
