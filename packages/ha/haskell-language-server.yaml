homepage: https://github.com/haskell/haskell-language-server#readme
changelog-type: markdown
hash: 11e137365ea94847dd7cedfd3f1a2d13644b7ddfe7d377da16b535ed5520f81d
test-bench-deps:
  lsp-test: -any
  bytestring: -any
  extra: -any
  base: '>=4.12 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  data-default: -any
  hls-test-utils: '>=1.0.0.0 && <1.1'
  containers: -any
  ghcide: -any
  lens: -any
  hls-plugin-api: -any
  aeson: -any
  lsp-types: -any
  hspec-expectations: -any
  directory: -any
maintainer: alan.zimm@gmail.com
synopsis: LSP server for GHC
changelog: |
  # Changelog for haskell-language-server

  ## 1.1.0

  Haskell Language Server 1.1.0 has finally come! Many thanks to all contributors -- since the last release, we have merged over 100 PRs!
  As always, there are many internal bug fixes and performance improvements in ghcide. Apart from that,

  * Wingman gets many enhancements, thanks to @isovector for this epic work!
    * Wingman actions can now be bound to editor hotkeys
    * Experimental support for "jump to next unsolved hole"
    * Improved layout algorithm --- don't reflow instances, or break do-blocks
    * Wingman can now deal with GADTs, rank-n types and pattern synonyms
    * Wingman now respects user-written bindings on the left side of the equals sign
    * Significantly more-natural synthesized code when dealing with newtypes, infix operators, records and strings
    * Improved user experience --- less waiting, and friendly errors for when things go wrong
  * hlint plugin not working in some cases gets fixed
  * annoying log message "haskell-lsp:incoming message parse error" gets fixed in `lsp-1.2`
  * eval plugin now supports `it` variable, like GHCi
  * verbose message "No cradle found for ... Proceeding with implicit cradle" is GONE
  * type lenses plugin now has its custom config `mode` (enum) [`always`] to control its working mode:
    * `always`: always displays type signature lenses of global bindings
    * `exported`: similar to `always`, but only displays for exported global bindings
    * `diagnostics`: follows diagnostic messages produced by GHC
  * top-level LSP option `completionSnippetsOn` and `maxNumberOfProblems` are deprecated
  * completions plugin now has its custom config:
    * `autoExtendOn` (boolean) [`true`]: whether to enable auto extending import lists
    * `snippetsOn` (boolean) [`true`]: wheter to enable completion snippets, taking the place of `completionSnippetsOn`
  * Wingman has its custom config:
    * `timeout_duration` (integer) [`2`]: the timeout for Wingman actions, in seconds
    * `features` (string) [`""`]: feature set used by Wingman (See [the README of Wingman](https://github.com/haskell/haskell-language-server/tree/master/plugins/hls-tactics-plugin#readme))
    * `max_use_ctor_actions` (integer) [`5`]: maximum number of `Use constructor <x>` code actions that can appear
    * `hole_severity` (enum) [`none`]: the severity to use when showing hole diagnostics
  * LSP symbols of typeclass and type families are more appropriate
  * test suite of plugins are reorganized, which no longer need to be run with `test-server` executable
  * two new packages `hls-test-utils` and `hls-stylish-haskell-plugin` are extracted

  This version uses `lsp-1.2.0`, `hls-plugin-api-1.1.0`, and `ghcide-1.2.0.2`.

  ### Pull requests merged for 1.1.0

  - Restore compat. with haddock-library 1.8
  ([#1717](https://github.com/haskell/haskell-language-server/pull/1717)) by @pepeiborra
  - Don't suggest destruct actions for already-destructed terms
  ([#1715](https://github.com/haskell/haskell-language-server/pull/1715)) by @isovector
  - Add keybindings and jump to hole to the Wingman README
  ([#1712](https://github.com/haskell/haskell-language-server/pull/1712)) by @isovector
  - Bracketing for snippet completions
  ([#1709](https://github.com/haskell/haskell-language-server/pull/1709)) by @OliverMadine
  - Prepare ghcide 1.2.0
  ([#1707](https://github.com/haskell/haskell-language-server/pull/1707)) by @berberman
  - Adjust bounds
  ([#1701](https://github.com/haskell/haskell-language-server/pull/1701)) by @berberman
  - Update nix
  ([#1699](https://github.com/haskell/haskell-language-server/pull/1699)) by @berberman
  - Wingman: "Destruct all" only on ADTs
  ([#1695](https://github.com/haskell/haskell-language-server/pull/1695)) by @isovector
  - Fix ghcide and HLS enter lsp mode by default
  ([#1692](https://github.com/haskell/haskell-language-server/pull/1692)) by @berberman
  - Decrease Wingman timeout from 3.3 minutes to 2 seconds (configurable)
  ([#1688](https://github.com/haskell/haskell-language-server/pull/1688)) by @isovector
  - Wrap test suite of tactics plugin into tasty test tree
  ([#1676](https://github.com/haskell/haskell-language-server/pull/1676)) by @berberman
  - Wingman: Use infix notation for operator applications
  ([#1675](https://github.com/haskell/haskell-language-server/pull/1675)) by @isovector
  - Ignore ghcide tests by paths
  ([#1673](https://github.com/haskell/haskell-language-server/pull/1673)) by @jneira
  - Ignore nix job steps by path
  ([#1672](https://github.com/haskell/haskell-language-server/pull/1672)) by @jneira
  - Intelligent derivations of Semigroup and Monoid for Wingman
  ([#1671](https://github.com/haskell/haskell-language-server/pull/1671)) by @isovector
  - optimize ambiguity import suggestions
  ([#1669](https://github.com/haskell/haskell-language-server/pull/1669)) by @July541
  - Replace Barrier with MVar in lsp main
  ([#1668](https://github.com/haskell/haskell-language-server/pull/1668)) by @berberman
  - ghcide - enable ApplicativeDo everywhere
  ([#1667](https://github.com/haskell/haskell-language-server/pull/1667)) by @pepeiborra
  - support custom Ide commands
  ([#1666](https://github.com/haskell/haskell-language-server/pull/1666)) by @pepeiborra
  - Add bounds for Diff
  ([#1665](https://github.com/haskell/haskell-language-server/pull/1665)) by @berberman
  - Update shake bounds of install script
  ([#1664](https://github.com/haskell/haskell-language-server/pull/1664)) by @berberman
  - Avoid creating IsFileOfInterest keys for non workspace files
  ([#1661](https://github.com/haskell/haskell-language-server/pull/1661)) by @pepeiborra
  - additional .gitignore entries
  ([#1659](https://github.com/haskell/haskell-language-server/pull/1659)) by @pepeiborra
  - Skip tracing unless eventlog is enabled
  ([#1658](https://github.com/haskell/haskell-language-server/pull/1658)) by @pepeiborra
  - Fix a wingman bug caused by mismanaged stale data
  ([#1657](https://github.com/haskell/haskell-language-server/pull/1657)) by @isovector
  - Fix ignore paths
  ([#1656](https://github.com/haskell/haskell-language-server/pull/1656)) by @jneira
  - Shut the Shake session on exit, instead of restarting it
  ([#1655](https://github.com/haskell/haskell-language-server/pull/1655)) by @pepeiborra
  - Emit holes as diagnostics
  ([#1653](https://github.com/haskell/haskell-language-server/pull/1653)) by @isovector
  - log exceptions before killing the server
  ([#1651](https://github.com/haskell/haskell-language-server/pull/1651)) by @pepeiborra
  - Do not override custom commands
  ([#1650](https://github.com/haskell/haskell-language-server/pull/1650)) by @pepeiborra
  - Fix importing type operators
  ([#1644](https://github.com/haskell/haskell-language-server/pull/1644)) by @berberman
  - Add haskell-language-server-bin to Arch Linux section
  ([#1642](https://github.com/haskell/haskell-language-server/pull/1642)) by @marcin-rzeznicki
  - Update ISSUE_TEMPLATE.md
  ([#1640](https://github.com/haskell/haskell-language-server/pull/1640)) by @Ailrun
  - Civilized indexing progress reporting
  ([#1633](https://github.com/haskell/haskell-language-server/pull/1633)) by @pepeiborra
  - Update to lsp-1.2
  ([#1631](https://github.com/haskell/haskell-language-server/pull/1631)) by @wz1000
  - Avoid reordering plugins
  ([#1629](https://github.com/haskell/haskell-language-server/pull/1629)) by @pepeiborra
  - Run plugins' test suites with server in the same process
  ([#1628](https://github.com/haskell/haskell-language-server/pull/1628)) by @berberman
  - Remove ignored paths
  ([#1623](https://github.com/haskell/haskell-language-server/pull/1623)) by @jneira
  - Update formatting hooks to not include Wingman
  ([#1622](https://github.com/haskell/haskell-language-server/pull/1622)) by @Ailrun
  - Add CPP Options for Stylish Haskell & Brittany Formatters
  ([#1620](https://github.com/haskell/haskell-language-server/pull/1620)) by @prikhi
  - Use custom config for completions plugin
  ([#1619](https://github.com/haskell/haskell-language-server/pull/1619)) by @berberman
  - Configurable I/O handles
  ([#1617](https://github.com/haskell/haskell-language-server/pull/1617)) by @pepeiborra
  - Add installation instructions for Arch Linux
  ([#1616](https://github.com/haskell/haskell-language-server/pull/1616)) by @berberman
  - Properly pass argFiles into defaultMain
  ([#1613](https://github.com/haskell/haskell-language-server/pull/1613)) by @mpickering
  - Migrate tests of plugins
  ([#1612](https://github.com/haskell/haskell-language-server/pull/1612)) by @berberman
  - Allow for customizable Haskell views of Property types
  ([#1608](https://github.com/haskell/haskell-language-server/pull/1608)) by @isovector
  - Extract hls-test-utils
  ([#1606](https://github.com/haskell/haskell-language-server/pull/1606)) by @berberman
  - Add test data files to extra-source-files
  ([#1605](https://github.com/haskell/haskell-language-server/pull/1605)) by @jneira
  - Extract stylish-haskell plugin into a standalone package
  ([#1604](https://github.com/haskell/haskell-language-server/pull/1604)) by @berberman
  - Eval plugin: evaluate expressions as statements
  ([#1603](https://github.com/haskell/haskell-language-server/pull/1603)) by @berberman
  - Bump haddock-library to 1.10.0
  ([#1598](https://github.com/haskell/haskell-language-server/pull/1598)) by @berberman
  - Relax ghcides upper bound on base16-bytestring
  ([#1595](https://github.com/haskell/haskell-language-server/pull/1595)) by @maralorn
  - Use CiInterface/SkInterface for typeclass symbols
  ([#1592](https://github.com/haskell/haskell-language-server/pull/1592)) by @fwcd
  - Avoid duplicating known targets and import paths
  ([#1590](https://github.com/haskell/haskell-language-server/pull/1590)) by @pepeiborra
  - Add ability for plugins to handle file change notifications
  ([#1588](https://github.com/haskell/haskell-language-server/pull/1588)) by @pepeiborra
  - Ensure eval plugin Print class doesn't rely on Prelude being in scope
  ([#1587](https://github.com/haskell/haskell-language-server/pull/1587)) by @akrmn
  - Give a canonical ordering for destructing terms in Wingman
  ([#1586](https://github.com/haskell/haskell-language-server/pull/1586)) by @isovector
  - Try a homomorphic destruct before a standard destruct
  ([#1582](https://github.com/haskell/haskell-language-server/pull/1582)) by @isovector
  - Update homepage and other urls for ghcide
  ([#1580](https://github.com/haskell/haskell-language-server/pull/1580)) by @felixonmars
  - Regularize custom config of plugins
  ([#1576](https://github.com/haskell/haskell-language-server/pull/1576)) by @berberman
  - Cleanup the TacticProviders interface
  ([#1572](https://github.com/haskell/haskell-language-server/pull/1572)) by @isovector
  - Add custom code action kinds for import related code actions
  ([#1570](https://github.com/haskell/haskell-language-server/pull/1570)) by @berberman
  - bump retrie plugin version
  ([#1569](https://github.com/haskell/haskell-language-server/pull/1569)) by @pepeiborra
  - Use ConLikes instead of DataCons
  ([#1568](https://github.com/haskell/haskell-language-server/pull/1568)) by @isovector
  - Remove max number of problems config option
  ([#1567](https://github.com/haskell/haskell-language-server/pull/1567)) by @jneira
  - Prepare ghcide 1.1.0
  ([#1566](https://github.com/haskell/haskell-language-server/pull/1566)) by @pepeiborra
  - Use string literals to synthesize the empty string
  ([#1564](https://github.com/haskell/haskell-language-server/pull/1564)) by @isovector
  - Add wingman branding to code actions
  ([#1555](https://github.com/haskell/haskell-language-server/pull/1555)) by @isovector
  - Use TextEdit to insert new imports
  ([#1554](https://github.com/haskell/haskell-language-server/pull/1554)) by @berberman
  - Introduce strict versions of modifyVar to improve contention
  ([#1553](https://github.com/haskell/haskell-language-server/pull/1553)) by @pepeiborra
  - Improve how wingman uses evidence
  ([#1549](https://github.com/haskell/haskell-language-server/pull/1549)) by @isovector
  - Review early cutoff fingerprints
  ([#1547](https://github.com/haskell/haskell-language-server/pull/1547)) by @pepeiborra
  - Improve thread contention around diagnostics
  ([#1546](https://github.com/haskell/haskell-language-server/pull/1546)) by @pepeiborra
  - Be much more intelligent about splitting matches
  ([#1543](https://github.com/haskell/haskell-language-server/pull/1543)) by @isovector
  - Update nixpkgs to ghc 8.10.4
  ([#1538](https://github.com/haskell/haskell-language-server/pull/1538)) by @berberman
  - Log a warning for every diagnostic received when doDiagnostics=False
  ([#1537](https://github.com/haskell/haskell-language-server/pull/1537)) by @pepeiborra
  - Fix missing parens of auto extending imports
  ([#1526](https://github.com/haskell/haskell-language-server/pull/1526)) by @berberman
  - Change Wingman module structure, address -Wall
  ([#1519](https://github.com/haskell/haskell-language-server/pull/1519)) by @isovector
  - Pull Wingman's method hypotheses directly from in-scope dicts
  ([#1517](https://github.com/haskell/haskell-language-server/pull/1517)) by @isovector
  - Avoid redundant work in diagnostics pass
  ([#1514](https://github.com/haskell/haskell-language-server/pull/1514)) by @pepeiborra
  - Add an option to control progress reporting
  ([#1513](https://github.com/haskell/haskell-language-server/pull/1513)) by @pepeiborra
  - Package ghcide code actions
  ([#1512](https://github.com/haskell/haskell-language-server/pull/1512)) by @berberman
  - Demote implicit cradle warn to logging
  ([#1511](https://github.com/haskell/haskell-language-server/pull/1511)) by @jneira
  - Set all plugin flags to manual
  ([#1510](https://github.com/haskell/haskell-language-server/pull/1510)) by @jneira
  - Avoid always rerunning GetModificationTime for interface files too
  ([#1506](https://github.com/haskell/haskell-language-server/pull/1506)) by @pepeiborra
  - Let Wingman's apply tactic run endomorphisms
  ([#1505](https://github.com/haskell/haskell-language-server/pull/1505)) by @isovector
  - Make Wingman produce user-facing error messages
  ([#1502](https://github.com/haskell/haskell-language-server/pull/1502)) by @isovector
  - Disable HLS benchmarks
  ([#1501](https://github.com/haskell/haskell-language-server/pull/1501)) by @wz1000
  - Add kind and preferred flag for all Wingman code actions
  ([#1499](https://github.com/haskell/haskell-language-server/pull/1499)) by @isovector
  - Organize Wingman tests
  ([#1498](https://github.com/haskell/haskell-language-server/pull/1498)) by @isovector
  - Register IDE configuration when called via the command line
  ([#1495](https://github.com/haskell/haskell-language-server/pull/1495)) by @wz1000
  - Haddock upper bound
  ([#1492](https://github.com/haskell/haskell-language-server/pull/1492)) by @jneira
  - Make type lenses plugin configurable
  ([#1491](https://github.com/haskell/haskell-language-server/pull/1491)) by @berberman
  - Context-aware ExactPrint grafting for HsExpr
  ([#1489](https://github.com/haskell/haskell-language-server/pull/1489)) by @isovector
  - Drive GetModificationTime using watched file events
  ([#1487](https://github.com/haskell/haskell-language-server/pull/1487)) by @pepeiborra
  - Faster ModSummary fingerprints
  ([#1485](https://github.com/haskell/haskell-language-server/pull/1485)) by @pepeiborra
  - Revert all changes to hie-compat since 11b5c2e
  ([#1484](https://github.com/haskell/haskell-language-server/pull/1484)) by @wz1000
  - Fix non-determinism in boot-def test
  ([#1483](https://github.com/haskell/haskell-language-server/pull/1483)) by @wz1000
  - Hackage needs autogen-modules
  ([#1481](https://github.com/haskell/haskell-language-server/pull/1481)) by @jneira
  - Ignore ci for some subdirectories and files
  ([#1480](https://github.com/haskell/haskell-language-server/pull/1480)) by @jneira
  - Split plugin tests into two cabal projects
  ([#1479](https://github.com/haskell/haskell-language-server/pull/1479)) by @wz1000
  - Less aggressive refine tactic
  ([#1475](https://github.com/haskell/haskell-language-server/pull/1475)) by @isovector
  - Enable hls-tactics-plugin tests in CI
  ([#1474](https://github.com/haskell/haskell-language-server/pull/1474)) by @isovector
  - Generate a more robust top-level binding Provenance
  ([#1473](https://github.com/haskell/haskell-language-server/pull/1473)) by @isovector
  - Add new variables to the extract when doing intros
  ([#1472](https://github.com/haskell/haskell-language-server/pull/1472)) by @isovector
  - Bump up hlint plugin version
  ([#1469](https://github.com/haskell/haskell-language-server/pull/1469)) by @jneira
  - Make sure split respects GADT equalities
  ([#1466](https://github.com/haskell/haskell-language-server/pull/1466)) by @isovector
  - Add "Split all function arguments" code action
  ([#1464](https://github.com/haskell/haskell-language-server/pull/1464)) by @isovector
  - Add "Refine hole" code action
  ([#1463](https://github.com/haskell/haskell-language-server/pull/1463)) by @isovector
  - Implement "use constructor" code action
  ([#1461](https://github.com/haskell/haskell-language-server/pull/1461)) by @isovector
  - Remove tactics src-dir from func-test
  ([#1460](https://github.com/haskell/haskell-language-server/pull/1460)) by @isovector
  - Make sure to give the correct DynFlags to the recompilation checker
  ([#1459](https://github.com/haskell/haskell-language-server/pull/1459)) by @pepeiborra
  - Don't use record notation for single-field datacons in tactics
  ([#1456](https://github.com/haskell/haskell-language-server/pull/1456)) by @isovector
  - update IRC channel name in plugin tutorial
  ([#1455](https://github.com/haskell/haskell-language-server/pull/1455)) by @shapr
  - Update readme and cabal for Wingman
  ([#1454](https://github.com/haskell/haskell-language-server/pull/1454)) by @isovector
  - Remove recursion tracking from TacticState
  ([#1453](https://github.com/haskell/haskell-language-server/pull/1453)) by @isovector
  - Use runtime ghc libdir for ghc-exactprint and ghc-8.10
  ([#1451](https://github.com/haskell/haskell-language-server/pull/1451)) by @jneira
  - Simplify tactics state structure
  ([#1449](https://github.com/haskell/haskell-language-server/pull/1449)) by @isovector
  - Extract the qualified name from already imported module
  ([#1445](https://github.com/haskell/haskell-language-server/pull/1445)) by @berberman
  - Correct megaparsec lower bound
  ([#1441](https://github.com/haskell/haskell-language-server/pull/1441)) by @jneira
  - Reformat all files
  ([#1439](https://github.com/haskell/haskell-language-server/pull/1439)) by @Ailrun
  - Customize the unitId used for the fake internal component
  ([#1435](https://github.com/haskell/haskell-language-server/pull/1435)) by @pepeiborra
  - Minor performance optimizations
  ([#1432](https://github.com/haskell/haskell-language-server/pull/1432)) by @pepeiborra

  ## 1.0.0

  This is the celebratory release of Haskell Language Server 1.0.0!
  This release includes a lot of internal changes, bug fixes, leaks plugged, and performance improvements, thanks to all our contributors.
  Among others,
  - We added the support for GHC 8.10.4, and removed the support for GHC 8.10.1
      Afterward, we will support upmost 3 patch versions for each minor version of GHC, if no special situation happens.
  - As by hie-bios >= 0.7.3, we use (`${XDG_CACHE_HOME}`)[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html]`/hie-bios/...` (or similar depends on OS) as a build directory for Cabal.
  - Now Eval plugin uses the parsing mechanism of GHC and becomes more stable.
  - We supports a code action to disambiguate the same identifiers from multiple imports.
      ![gif](https://user-images.githubusercontent.com/21860/106387152-bfd16d80-641b-11eb-9394-c553fad5794b.gif)
  - We supports a code action to hide shadowed identifiers from import.
      ![gif](https://user-images.githubusercontent.com/26041945/107199055-e05b8200-6a30-11eb-9198-448ab8604cc0.gif)
  - HIE DB is now integrated. This means we now support `find-references`, `workspace-symbol`. `find-definition` is also improved in a project with multiple components.
  - Brittany and Stylish-haskell plugins now load language extensions from the ghc session.
  - Tactic plugin supports eta-reduction and Agda-like split tactic and can create a function with piecewise definitions.
      ![gif](https://user-images.githubusercontent.com/307223/107991243-0af68f00-6f8b-11eb-9ff9-3e9a7363ba5f.gif)

  ### Pull requests merged for 1.0.0

  - Correctly split non-varpats in tactics
  ([#1427](https://github.com/haskell/haskell-language-server/pull/1427)) by @isovector
  - Move tactics tests to be standalone
  ([#1425](https://github.com/haskell/haskell-language-server/pull/1425)) by @isovector
  - Fix the handling of default HLS config again
  ([#1419](https://github.com/haskell/haskell-language-server/pull/1419)) by @pepeiborra
  - Patch pre-commit-hook to work with GHCIDE/hls-plugin-api codes
  ([#1418](https://github.com/haskell/haskell-language-server/pull/1418)) by @Ailrun
  - Refactor pragmas plugin
  ([#1417](https://github.com/haskell/haskell-language-server/pull/1417)) by @berberman
  - Add a test for #1376
  ([#1414](https://github.com/haskell/haskell-language-server/pull/1414)) by @pepeiborra
  - Reenable HLS example benchmark
  ([#1412](https://github.com/haskell/haskell-language-server/pull/1412)) by @pepeiborra
  - Fix pre-commit-hook
  ([#1411](https://github.com/haskell/haskell-language-server/pull/1411)) by @Ailrun
  - Plugin Config: Add maxCompletions to JSON instance
  ([#1407](https://github.com/haskell/haskell-language-server/pull/1407)) by @andys8
  - Remove custom 'trim' implementation
  ([#1406](https://github.com/haskell/haskell-language-server/pull/1406)) by @fendor
  - Update to hie-bios 0.7.4
  ([#1405](https://github.com/haskell/haskell-language-server/pull/1405)) by @fendor
  - Prepare 1.0.0 release
  ([#1402](https://github.com/haskell/haskell-language-server/pull/1402)) by @Ailrun
  - Fix install script after hlint fixes
  ([#1400](https://github.com/haskell/haskell-language-server/pull/1400)) by @jhrcek
  - Use last with-utf8 to fix #1372
  ([#1399](https://github.com/haskell/haskell-language-server/pull/1399)) by @jneira
  - Implement Tactic Featuresets
  ([#1398](https://github.com/haskell/haskell-language-server/pull/1398)) by @isovector
  - Update hie-bios
  ([#1397](https://github.com/haskell/haskell-language-server/pull/1397)) by @Ailrun
  - Bump plugins versions
  ([#1392](https://github.com/haskell/haskell-language-server/pull/1392)) by @pepeiborra
  - Split main Tactics module
  ([#1391](https://github.com/haskell/haskell-language-server/pull/1391)) by @isovector
  - Prepare ghcide release 0.7.5
  ([#1389](https://github.com/haskell/haskell-language-server/pull/1389)) by @pepeiborra
  - Disable HLS benchmark example
  ([#1388](https://github.com/haskell/haskell-language-server/pull/1388)) by @pepeiborra
  - Fix GenChangelog script format
  ([#1387](https://github.com/haskell/haskell-language-server/pull/1387)) by @Ailrun
  - Tone down some logInfos to logDebug
  ([#1385](https://github.com/haskell/haskell-language-server/pull/1385)) by @pepeiborra
  - Add a pre commit hook for code formatting
  ([#1384](https://github.com/haskell/haskell-language-server/pull/1384)) by @Ailrun
  - remove unsafePerformIO
  ([#1383](https://github.com/haskell/haskell-language-server/pull/1383)) by @pepeiborra
  - Use object code for TH+UnboxedTuples/Sums
  ([#1382](https://github.com/haskell/haskell-language-server/pull/1382)) by @wz1000
  - Update stack resolvers 8.10.3/8.10.4
  ([#1380](https://github.com/haskell/haskell-language-server/pull/1380)) by @jneira
  - Agda-style case splitting for tactics
  ([#1379](https://github.com/haskell/haskell-language-server/pull/1379)) by @isovector
  - Configuration for initial ghc lib dir
  ([#1378](https://github.com/haskell/haskell-language-server/pull/1378)) by @pepeiborra
  - Use lsp-1.1.1
  ([#1377](https://github.com/haskell/haskell-language-server/pull/1377)) by @wz1000
  - use implicit-hie cradle from setInitialDynFlags
  ([#1375](https://github.com/haskell/haskell-language-server/pull/1375)) by @wz1000
  - Add test for multi-component goto def and make runLanguageServer responsible for hiedb
  ([#1373](https://github.com/haskell/haskell-language-server/pull/1373)) by @wz1000
  - Show window message when auto extending import lists
  ([#1371](https://github.com/haskell/haskell-language-server/pull/1371)) by @berberman
  - Another extension that Brittany cannot parse
  ([#1369](https://github.com/haskell/haskell-language-server/pull/1369)) by @pepeiborra
  - Clean dependency data structures and speed up GetDependencies
  ([#1368](https://github.com/haskell/haskell-language-server/pull/1368)) by @pepeiborra
  - Catch GHC errors in listing module names
  ([#1367](https://github.com/haskell/haskell-language-server/pull/1367)) by @berberman
  - Lose the ghc-lib flag
  ([#1366](https://github.com/haskell/haskell-language-server/pull/1366)) by @pepeiborra
  - Make StylishHaskell plugin recognize extensions from DynFlags
  ([#1364](https://github.com/haskell/haskell-language-server/pull/1364)) by @Ailrun
  - Pass language extensions to Brittany
  ([#1362](https://github.com/haskell/haskell-language-server/pull/1362)) by @pepeiborra
  - Sanitize the setup of the default Ide.Config
  ([#1361](https://github.com/haskell/haskell-language-server/pull/1361)) by @pepeiborra
  - Fix completion snippets on DuplicateRecordFields
  ([#1360](https://github.com/haskell/haskell-language-server/pull/1360)) by @berberman
  - Index files on first open
  ([#1358](https://github.com/haskell/haskell-language-server/pull/1358)) by @wz1000
  - Make find-definition work better with multi-components
  ([#1357](https://github.com/haskell/haskell-language-server/pull/1357)) by @wz1000
  - Construct record datacons in tactics
  ([#1356](https://github.com/haskell/haskell-language-server/pull/1356)) by @isovector
  - Don't insert parentheses for top-level tactics holes
  ([#1352](https://github.com/haskell/haskell-language-server/pull/1352)) by @isovector
  - Simplify extracts after running tactics
  ([#1351](https://github.com/haskell/haskell-language-server/pull/1351)) by @isovector
  - Fix code actions regression
  ([#1349](https://github.com/haskell/haskell-language-server/pull/1349)) by @pepeiborra
  - Refactor the hypothesis type in hls-tactics-plugin
  ([#1347](https://github.com/haskell/haskell-language-server/pull/1347)) by @isovector
  - Fix the Eval plugin sporadic exceptions
  ([#1345](https://github.com/haskell/haskell-language-server/pull/1345)) by @pepeiborra
  - Eval Plugin: Proper handling of flags in `:set`
  ([#1343](https://github.com/haskell/haskell-language-server/pull/1343)) by @konn
  - Cancel earlier queued benchmarks
  ([#1339](https://github.com/haskell/haskell-language-server/pull/1339)) by @pepeiborra
  - Default main for ghcide
  ([#1338](https://github.com/haskell/haskell-language-server/pull/1338)) by @pepeiborra
  - Fix duplication of code actions for adding NamedFieldPuns
  ([#1334](https://github.com/haskell/haskell-language-server/pull/1334)) by @berberman
  - Bump explicit-imports plugin
  ([#1333](https://github.com/haskell/haskell-language-server/pull/1333)) by @pepeiborra
  - Add support for ghc-8.10.4 and drop it for ghc-8.10.1
  ([#1331](https://github.com/haskell/haskell-language-server/pull/1331)) by @jneira
  - Prepare ghcide v0.7.4 release
  ([#1328](https://github.com/haskell/haskell-language-server/pull/1328)) by @pepeiborra
  - Add a new benchmark example to characterise multi-component performance
  ([#1326](https://github.com/haskell/haskell-language-server/pull/1326)) by @pepeiborra
  - [shake-bench] extract project dependencies action (for the HEAD binary)
  ([#1325](https://github.com/haskell/haskell-language-server/pull/1325)) by @pepeiborra
  - [shake-bench] collect eventlogs
  ([#1324](https://github.com/haskell/haskell-language-server/pull/1324)) by @pepeiborra
  - [benchmark] add warmups
  ([#1323](https://github.com/haskell/haskell-language-server/pull/1323)) by @pepeiborra
  - Add code action for hiding shadowed identifiers from imports
  ([#1322](https://github.com/haskell/haskell-language-server/pull/1322)) by @berberman
  - Parallelize benchmark CI
  ([#1320](https://github.com/haskell/haskell-language-server/pull/1320)) by @pepeiborra
  - Fix space leak on cradle reloads
  ([#1316](https://github.com/haskell/haskell-language-server/pull/1316)) by @pepeiborra
  - [benchmarks] speed up CI
  ([#1315](https://github.com/haskell/haskell-language-server/pull/1315)) by @pepeiborra
  - [benchmark] check digests for input files only
  ([#1314](https://github.com/haskell/haskell-language-server/pull/1314)) by @pepeiborra
  - Add link to hackage package to readme
  ([#1313](https://github.com/haskell/haskell-language-server/pull/1313)) by @expipiplus1
  - Splice Plugin: preparatory version bump for the next (not 0.9.0) HLS release
  ([#1312](https://github.com/haskell/haskell-language-server/pull/1312)) by @konn
  - hls-splice-plugin-0.3.0.0-prepare
  ([#1311](https://github.com/haskell/haskell-language-server/pull/1311)) by @konn
  - Trigger extending import only when the item is not in scope
  ([#1309](https://github.com/haskell/haskell-language-server/pull/1309)) by @berberman
  - Bum up hls-eval-plugin to 0.2
  ([#1305](https://github.com/haskell/haskell-language-server/pull/1305)) by @jneira
  - Don't extend import list with child if the parent has been imported as (..)
  ([#1302](https://github.com/haskell/haskell-language-server/pull/1302)) by @berberman
  - Prepare hls hlint plugin 0.2.0
  ([#1296](https://github.com/haskell/haskell-language-server/pull/1296)) by @jneira
  - Import disambiguation: Corrects handling of fully-applied and one-sided sectioned operators in qualifying strategy
  ([#1294](https://github.com/haskell/haskell-language-server/pull/1294)) by @konn
  - hls-splice-plugin-0.2.0.0
  ([#1293](https://github.com/haskell/haskell-language-server/pull/1293)) by @konn
  - Bump haddock comments plugin to 0.1.1
  ([#1292](https://github.com/haskell/haskell-language-server/pull/1292)) by @berberman
  - FindImports typo (minor)
  ([#1291](https://github.com/haskell/haskell-language-server/pull/1291)) by @andys8
  - Bump up hls-plugin-api to 0.7.0
  ([#1290](https://github.com/haskell/haskell-language-server/pull/1290)) by @jneira
  - Prepare ghcide v0.7.3 release
  ([#1289](https://github.com/haskell/haskell-language-server/pull/1289)) by @pepeiborra
  - hls-retrie-plugin 0.1.1.0
  ([#1288](https://github.com/haskell/haskell-language-server/pull/1288)) by @pepeiborra
  - Upgrade to lsp-1.0
  ([#1284](https://github.com/haskell/haskell-language-server/pull/1284)) by @wz1000
  - Update IRC Name in README
  ([#1275](https://github.com/haskell/haskell-language-server/pull/1275)) by @fendor
  - Restore code actions order
  ([#1273](https://github.com/haskell/haskell-language-server/pull/1273)) by @pepeiborra
  - Prepare 0.9.0
  ([#1271](https://github.com/haskell/haskell-language-server/pull/1271)) by @jneira
  - Reenable auto extend imports and drop snippets for infix completions
  ([#1266](https://github.com/haskell/haskell-language-server/pull/1266)) by @pepeiborra
  - ghcide: Implements a CodeAction to disambiguate ambiguous symbols
  ([#1264](https://github.com/haskell/haskell-language-server/pull/1264)) by @konn
  -  Doctest comment parsing using module annotations in Eval Plugin
  ([#1232](https://github.com/haskell/haskell-language-server/pull/1232)) by @konn
  - Apply some hlint suggestions, silence some others.
  ([#1227](https://github.com/haskell/haskell-language-server/pull/1227)) by @peterwicksstringfield
  - References via `hiedb`
  ([#704](https://github.com/haskell/haskell-language-server/pull/704)) by @wz1000
  - Use default config on missing configuration section
  ([#459](https://github.com/haskell/haskell-language-server/pull/459)) by @aufarg

  ## 0.9.0

  This release includes lot of refactorings and bug fixes over existing features, hlint and eval plugins among others.
  It contains a fix for a bug in ghcide involving stale diagnostics (#1204).

  The list of contributors continues to show healthy growth, many thanks to you all!

  And remember, we have a new brand logo, courtesy of @Ailrun :slightly_smiling_face:

  ![haskell-language-server](https://github.com/haskell/haskell-language-server/raw/master/docs/logos/logo-256.png)

  ### Pull requests merged for 0.9.0

  - Do not error out on failed rewrite
  ([#1269](https://github.com/haskell/haskell-language-server/pull/1269)) by @pepeiborra
  - Tighten dependency on apply-refact
  ([#1268](https://github.com/haskell/haskell-language-server/pull/1268)) by @hololeap
  - Add the new logos
  ([#1267](https://github.com/haskell/haskell-language-server/pull/1267)) by @Ailrun
  - Fix a bug in completions
  ([#1265](https://github.com/haskell/haskell-language-server/pull/1265)) by @pepeiborra
  - Produce heap profiles the old fashioned way, from .hp files
  ([#1261](https://github.com/haskell/haskell-language-server/pull/1261)) by @pepeiborra
  - Break down ghcide functionality in HLS plugins
  ([#1257](https://github.com/haskell/haskell-language-server/pull/1257)) by @pepeiborra
  - Enforce max completions over all plugins
  ([#1256](https://github.com/haskell/haskell-language-server/pull/1256)) by @pepeiborra
  - Reorder code actions to put remove redundant imports first
  ([#1255](https://github.com/haskell/haskell-language-server/pull/1255)) by @pepeiborra
  - Update bench.yml to include all the relevant artifacts
  ([#1254](https://github.com/haskell/haskell-language-server/pull/1254)) by @pepeiborra
  - Benchmarks: generate heap profiles
  ([#1253](https://github.com/haskell/haskell-language-server/pull/1253)) by @pepeiborra
  - Add gh workflows badges
  ([#1251](https://github.com/haskell/haskell-language-server/pull/1251)) by @jneira
  - Add dynamic linking common issue
  ([#1249](https://github.com/haskell/haskell-language-server/pull/1249)) by @jneira
  - Add license for hls-tactics-plugin
  ([#1248](https://github.com/haskell/haskell-language-server/pull/1248)) by @isovector
  - Use exact print to extend import lists
  ([#1246](https://github.com/haskell/haskell-language-server/pull/1246)) by @berberman
  - Test apply-refact with TypeApplications
  ([#1244](https://github.com/haskell/haskell-language-server/pull/1244)) by @jneira
  - Add non reversable pragma completion
  ([#1243](https://github.com/haskell/haskell-language-server/pull/1243)) by @Ailrun
  - Delete redundant "category: Development".
  ([#1241](https://github.com/haskell/haskell-language-server/pull/1241)) by @peterwicksstringfield
  - Complete the No- variants of language extensions and Strict extension
  ([#1238](https://github.com/haskell/haskell-language-server/pull/1238)) by @mrBliss
  - Add code actions for disabling a warning in the current file
  ([#1235](https://github.com/haskell/haskell-language-server/pull/1235)) by @georgefst
  - Change packages metadata and rename tactics subfolder
  ([#1234](https://github.com/haskell/haskell-language-server/pull/1234)) by @jneira
  - Fix the bug that generating comments would duplicate existing comments
  ([#1233](https://github.com/haskell/haskell-language-server/pull/1233)) by @berberman
  - Delete global hie.yaml config
  ([#1230](https://github.com/haskell/haskell-language-server/pull/1230)) by @jneira
  - Easy hlint fixes
  ([#1226](https://github.com/haskell/haskell-language-server/pull/1226)) by @peterwicksstringfield
  - Use the runtime ghc libdir for ghc-exactprint
  ([#1225](https://github.com/haskell/haskell-language-server/pull/1225)) by @jneira
  - Add note in README/Tutorial regarding CPP support
  ([#1224](https://github.com/haskell/haskell-language-server/pull/1224)) by @tittoassini
  - Test and fix for issue 1213
  ([#1223](https://github.com/haskell/haskell-language-server/pull/1223)) by @tittoassini
  - Add traces for HLS providers
  ([#1222](https://github.com/haskell/haskell-language-server/pull/1222)) by @pepeiborra
  - Use exact print for suggest missing constraint code actions
  ([#1221](https://github.com/haskell/haskell-language-server/pull/1221)) by @pepeiborra
  - Fix changelog dates
  ([#1220](https://github.com/haskell/haskell-language-server/pull/1220)) by @pepeiborra
  - Ignore .shake folder
  ([#1219](https://github.com/haskell/haskell-language-server/pull/1219)) by @pepeiborra
  - Limit completions to top 40
  ([#1218](https://github.com/haskell/haskell-language-server/pull/1218)) by @pepeiborra
  - Parenthesise type operators when extending import lists
  ([#1212](https://github.com/haskell/haskell-language-server/pull/1212)) by @mrBliss
  - Expose shake options used
  ([#1209](https://github.com/haskell/haskell-language-server/pull/1209)) by @pepeiborra
  - Prepare ghcide release v0.7.1
  ([#1207](https://github.com/haskell/haskell-language-server/pull/1207)) by @pepeiborra
  - Documentation for the Eval Plugin
  ([#1206](https://github.com/haskell/haskell-language-server/pull/1206)) by @tittoassini
  - Stale diagnostics fix
  ([#1204](https://github.com/haskell/haskell-language-server/pull/1204)) by @pepeiborra
  - Extract Development.IDE.GHC.ExactPrint
  ([#1203](https://github.com/haskell/haskell-language-server/pull/1203)) by @pepeiborra
  - Fix bug in Retrie "fold/unfold in local file" commands
  ([#1202](https://github.com/haskell/haskell-language-server/pull/1202)) by @pepeiborra
  - Minor eval plugin fixes
  ([#1199](https://github.com/haskell/haskell-language-server/pull/1199)) by @tittoassini
  - Disable win 8.6.4 job
  ([#1198](https://github.com/haskell/haskell-language-server/pull/1198)) by @jneira
  - Add custom cache layer for session loading
  ([#1197](https://github.com/haskell/haskell-language-server/pull/1197)) by @fendor
  - Use completionSnippetsOn flag
  ([#1195](https://github.com/haskell/haskell-language-server/pull/1195)) by @takoeight0821
  - Remove runs dropped by #1173
  ([#1194](https://github.com/haskell/haskell-language-server/pull/1194)) by @jneira
  - Remove undefined exports suggestions
  ([#1193](https://github.com/haskell/haskell-language-server/pull/1193)) by @kderme
  - Update nixpkgs to ghc 8.10.3
  ([#1191](https://github.com/haskell/haskell-language-server/pull/1191)) by @pepeiborra
  - Do not disable parallel GC
  ([#1190](https://github.com/haskell/haskell-language-server/pull/1190)) by @pepeiborra
  - Switch module outline to useWtihStale
  ([#1189](https://github.com/haskell/haskell-language-server/pull/1189)) by @pepeiborra
  - Fix sticky diagnostics
  ([#1188](https://github.com/haskell/haskell-language-server/pull/1188)) by @pepeiborra
  - Fix class plugin cabal
  ([#1186](https://github.com/haskell/haskell-language-server/pull/1186)) by @Ailrun
  - Update package description of haddock comments plugin
  ([#1185](https://github.com/haskell/haskell-language-server/pull/1185)) by @berberman
  - Installation from Hackage - add README section
  ([#1183](https://github.com/haskell/haskell-language-server/pull/1183)) by @pepeiborra
  - Preparation for Uploading Splice Plugin to Hackage
  ([#1182](https://github.com/haskell/haskell-language-server/pull/1182)) by @konn
  - Preparation for uploading `hls-exactprint-utils`
  ([#1181](https://github.com/haskell/haskell-language-server/pull/1181)) by @konn
  - Complete hls-hlint-plugin package metadata
  ([#1180](https://github.com/haskell/haskell-language-server/pull/1180)) by @jneira
  - Benchmark improvements
  ([#1178](https://github.com/haskell/haskell-language-server/pull/1178)) by @pepeiborra
  - Make adding missing constraint work in presence of 'forall' (fixes #1164)
  ([#1177](https://github.com/haskell/haskell-language-server/pull/1177)) by @jhrcek
  - Prepare for Hackage
  ([#1176](https://github.com/haskell/haskell-language-server/pull/1176)) by @pepeiborra
  - Test only last ghc minor version and fix windows cache
  ([#1173](https://github.com/haskell/haskell-language-server/pull/1173)) by @jneira
  - Fix toMethodName bug of the Class plugin
  ([#1170](https://github.com/haskell/haskell-language-server/pull/1170)) by @Ailrun
  - Quick fix for #1158
  ([#1166](https://github.com/haskell/haskell-language-server/pull/1166)) by @Ailrun
  - Suggest adding pragmas for parse errors too
  ([#1165](https://github.com/haskell/haskell-language-server/pull/1165)) by @mrBliss
  - Fix wrong component name of splice plugin in hie.yaml
  ([#1162](https://github.com/haskell/haskell-language-server/pull/1162)) by @berberman
  - Revert "Auto cancel redundant workflows (attempt #2)"
  ([#1156](https://github.com/haskell/haskell-language-server/pull/1156)) by @pepeiborra
  - Auto cancel redundant workflows (attempt #2)
  ([#1154](https://github.com/haskell/haskell-language-server/pull/1154)) by @pepeiborra
  - Prepare 0.8.0 (versions)
  ([#1153](https://github.com/haskell/haskell-language-server/pull/1153)) by @jneira
  - Streamline CircleCI jobs
  ([#1152](https://github.com/haskell/haskell-language-server/pull/1152)) by @pepeiborra
  - Mergify: create configuration
  ([#1151](https://github.com/haskell/haskell-language-server/pull/1151)) by @jneira
  - Bump haskell-lsp to 0.23
  ([#1146](https://github.com/haskell/haskell-language-server/pull/1146)) by @berberman
  - Remove no longer needed git submodule update
  ([#1145](https://github.com/haskell/haskell-language-server/pull/1145)) by @jhrcek
  - Enable more tests
  ([#1143](https://github.com/haskell/haskell-language-server/pull/1143)) by @peterwicksstringfield
  - Update links to issues/PRs in ghcide tests.
  ([#1142](https://github.com/haskell/haskell-language-server/pull/1142)) by @peterwicksstringfield
  - Fix #723 (Instance declarations in hs-boot files result in GHC errors)
  ([#781](https://github.com/haskell/haskell-language-server/pull/781)) by @nitros12
  - Also suggest importing methods without parent class
  ([#766](https://github.com/haskell/haskell-language-server/pull/766)) by @mrBliss
  - Delete unused utilities for controlling logging.
  ([#764](https://github.com/haskell/haskell-language-server/pull/764)) by @peterwicksstringfield
  - Delete unused testdata
  ([#763](https://github.com/haskell/haskell-language-server/pull/763)) by @peterwicksstringfield
  - Fix suggestAddTypeAnnotation regex
  ([#760](https://github.com/haskell/haskell-language-server/pull/760)) by @kderme
  - Splice Plugin: expands TH splices and QuasiQuotes
  ([#759](https://github.com/haskell/haskell-language-server/pull/759)) by @konn
  - Haddock comments plugin
  ([#673](https://github.com/haskell/haskell-language-server/pull/673)) by @berberman
  - Leverage last apply-refact improvements in hlint plugin (include getParsedModuleWithComments in ghcide)
  ([#635](https://github.com/haskell/haskell-language-server/pull/635)) by @jneira

  ## 0.8.0

  - This version adds support for ghc-8.10.3
  - `hls-plugin-api` has been bumped to 0.6.0.0 and `ghcide` has been bumped from 0.6.0.1 to 0.7.0.0.
  - It has a new brand plugin: hls-class-plugin, which helps to write class instances

  ![gif](https://user-images.githubusercontent.com/12473268/103059293-af071f80-4572-11eb-963a-7e76b45f28b9.gif)

  - The eval plugin has been revamped, adding these new features:
    - Tests in both plain comments and Haddock comments
    - For Haddock comments: shows differences between latest and previous result
    - Setup section, executed before every test
    - Execution of a section/group of tests at the time
    - Property testing
    - Setup of GHC extensions
  - A new tactic to generate automatically `Arbitrary` instances has been added to tactic plugin
  - There had been lot of internal changes:
    - ghcide lives now directly in this repository
    - the test suite has been cleaned and improved (continuing the work done in 0.7.0)


  Thanks to all contributors and happy new year!

  ### Pull requests merged for 0.8.0

  - Ci fixes
  ([#783](https://github.com/haskell/haskell-language-server/pull/783)) by @pepeiborra
  - Fix extend imports regression
  ([#769](https://github.com/haskell/haskell-language-server/pull/769)) by @pepeiborra
  - Cleanup format testfiles
  ([#765](https://github.com/haskell/haskell-language-server/pull/765)) by @peterwicksstringfield
  - Retry a failed cradle if the cradle descriptor changes
  ([#762](https://github.com/haskell/haskell-language-server/pull/762)) by @pepeiborra
  - Perform memory measurement on SIGUSR1
  ([#761](https://github.com/haskell/haskell-language-server/pull/761)) by @pepeiborra
  - Add ghc-8.10.3 support after merging ghcide repo
  ([#721](https://github.com/haskell/haskell-language-server/pull/721)) by @jneira
  - Merge ghcide repository (replacing the submodule)
  ([#702](https://github.com/haskell/haskell-language-server/pull/702)) by @pepeiborra
  - Invert the dependency between hls-plugin-api and ghcide
  ([#701](https://github.com/haskell/haskell-language-server/pull/701)) by @pepeiborra
  - Move eval plugin to hls-eval-plugin
  ([#700](https://github.com/haskell/haskell-language-server/pull/700)) by @tittoassini
  - Fix and enable progress message tests.
  ([#698](https://github.com/haskell/haskell-language-server/pull/698)) by @peterwicksstringfield
  - Add a known tactic for writing arbitrary instances
  ([#695](https://github.com/haskell/haskell-language-server/pull/695)) by @isovector
  - Introduce generic config for plugins
  ([#691](https://github.com/haskell/haskell-language-server/pull/691)) by @alanz
  - Enable get type definition tests
  ([#690](https://github.com/haskell/haskell-language-server/pull/690)) by @peterwicksstringfield
  - Fix ghc version for windows 8.10.2.2 in github build workflow
  ([#688](https://github.com/haskell/haskell-language-server/pull/688)) by @jneira
  - Add plugins conditionally at compile time
  ([#687](https://github.com/haskell/haskell-language-server/pull/687)) by @jneira
  - Implement basic Class plugin
  ([#661](https://github.com/haskell/haskell-language-server/pull/661)) by @Ailrun
  - Extended Eval Plugin
  ([#438](https://github.com/haskell/haskell-language-server/pull/438)) by @tittoassini

  ## 0.7.1

  - This is a minor bug fix release:
    - It fixes an issue that removed accidentally desugarer warnings (#676).
    - It disables auto extend import lists in completions, see #679.

  ### Pull requests merged for 0.7.1

  - Disable auto extend import lists in completions. It fixes #679.
  ([#685](https://github.com/haskell/haskell-language-server/pull/685)) by @pepeiborra
  - Restore kick (#676). It fixes #676.
  ([#677](https://github.com/haskell/haskell-language-server/pull/677)) by @wz1000
  - README: Remove instructions to execute data target
  ([#675](https://github.com/haskell/haskell-language-server/pull/675)) by @andys8
  - Add hlint tests over cpp, extensions and ignore hints
  ([#674](https://github.com/haskell/haskell-language-server/pull/674)) by @jneira

  ## 0.7.0

  - This version contains mainly refactors and updates of upstream packages
  - It bumps up some formatter versions:
    - ormolu is 0.1.4.1
    - fourmolu is 0.3.0.0
    - brittany is 0.13.1.0
  - It uses last implicit-hie-cradle-0.3.0.2, with some [bug](https://github.com/Avi-D-coder/implicit-hie/issues/29) [fixes](https://github.com/Avi-D-coder/implicit-hie/issues/30)
  - It uses last ghcide-0.6.0.1 with [improvements and bug fixes](https://github.com/haskell/ghcide/blob/master/CHANGELOG.md#060-2020-12-06):
    - Do not enable every "unnecessary" warning by default
    - Improvements over completions:
      - record fields
      - identifiers not in explicit import lists
      - extend explicit import list automatically

  Thanks to all haskell-language-server, ghcide and other upstream packages contributors (the list continue growing healthy) for make this release possible.

  ### Pull requests merged for 0.7.0

  - Miscellanous fixes: correct tactic plugin package metadata and cabal.hie.yaml/stack.hie.yaml
  ([#672](https://github.com/haskell/haskell-language-server/pull/672)) by @berberman
  - Remove unnecessary pluginId setting and user Better Map functions in tactics plugin
  ([#669](https://github.com/haskell/haskell-language-server/pull/669)) by @jhrcek
  - Do not suggest explicitly disabled pragmas
  ([#666](https://github.com/haskell/haskell-language-server/pull/666)) by @berberman
  - fixed hie.yaml.stack
  ([#664](https://github.com/haskell/haskell-language-server/pull/664)) by @tittoassini
  - Add pragmas completions
  ([#662](https://github.com/haskell/haskell-language-server/pull/662)) by @gdevanla
  - Enable code completion tests
  ([#657](https://github.com/haskell/haskell-language-server/pull/657)) by @peterwicksstringfield
  - Enable highlight unittests
  ([#656](https://github.com/haskell/haskell-language-server/pull/656)) by @peterwicksstringfield
  - Fix document symbols unit tests.
  ([#655](https://github.com/haskell/haskell-language-server/pull/655)) by @peterwicksstringfield
  - Delete duplicate cabal clause for applyrefact2
  ([#654](https://github.com/haskell/haskell-language-server/pull/654)) by @peterwicksstringfield
  - Add extra-source-files for split plugins
  ([#650](https://github.com/haskell/haskell-language-server/pull/650)) by @berberman
  - [nix-shell] Actually use gitignore
  ([#649](https://github.com/haskell/haskell-language-server/pull/649)) by @pepeiborra
  - idempotent command and code cleanup
  ([#648](https://github.com/haskell/haskell-language-server/pull/648)) by @tittoassini
  - Split the Imports and Retrie plugins
  ([#647](https://github.com/haskell/haskell-language-server/pull/647)) by @pepeiborra
  - Simplify and Bump implicit-hie version constraints
  ([#645](https://github.com/haskell/haskell-language-server/pull/645)) by @Avi-D-coder
  - Fix and enable disabled code action unit tests, fix fallback handler
  ([#643](https://github.com/haskell/haskell-language-server/pull/643)) by @peterwicksstringfield
  - Add Ghcide hie.yaml instruction for Stack users
  ([#641](https://github.com/haskell/haskell-language-server/pull/641)) by @Sir4ur0n
  - Upgrade the Nix build system
  ([#639](https://github.com/haskell/haskell-language-server/pull/639)) by @pepeiborra
  - No longer needed to build once for Stack
  ([#637](https://github.com/haskell/haskell-language-server/pull/637)) by @Sir4ur0n
  - Preserve the last empty comment line after eval plugin
  ([#631](https://github.com/haskell/haskell-language-server/pull/631)) by @expipiplus1
  - Update fourmolu to 0.3.0.0
  ([#624](https://github.com/haskell/haskell-language-server/pull/624)) by @gwils
  - Add hspec-discover to build-tool-depends in tactics plugin
  ([#623](https://github.com/haskell/haskell-language-server/pull/623)) by @gwils
  - Add build to ghc-8.10.2 and windows
  ([#619](https://github.com/haskell/haskell-language-server/pull/619)) by @jneira
  - Module Name Plugin: Treat modules starting with lowercase as Main module
  ([#616](https://github.com/haskell/haskell-language-server/pull/616)) by @konn
  - Bump ormolu to 0.1.4.1
  ([#614](https://github.com/haskell/haskell-language-server/pull/614)) by @AlistairB
  - Fix fourmolu plugin inconsistent formatting
  ([#599](https://github.com/haskell/haskell-language-server/pull/599)) by @zweimach
  - Hlint: bring over idea2Message for formatting
  ([#598](https://github.com/haskell/haskell-language-server/pull/598)) by @alanz
  - Makes dictionary argument exclusion logic in Tactic plugin more robust
  ([#508](https://github.com/haskell/haskell-language-server/pull/508)) by @konn

  ## 0.6.0

  0.6.0 includes two brand new plugins!

  - [Hlint Plugin](https://github.com/haskell/haskell-language-server/pull/166): it integrates hlint diagnostics and lets you apply suggestions to fix them.

  ![hls-hlint-demo](https://user-images.githubusercontent.com/54035/98731058-6ff38500-239d-11eb-8176-e4f69ef76fc2.gif)

  - [Module Name Plugin](https://github.com/haskell/haskell-language-server/pull/480): it makes easier create new modules and modify them, suggesting the appropiate module name as a code lens.

  ![module-name-demo](https://user-images.githubusercontent.com/54035/98731198-a7623180-239d-11eb-8af0-73bd32b9b0b2.gif)

  This release also includes many improvements and bug fixes for the tactic plugin (see pull requests authored by @isovector for more details).

  We have updated two essential tools used by the ide:

  - `implicit-hie`: [to fix a bug](https://github.com/haskell/haskell-language-server/issues/498) present when loading cabal based projects with executables containing `other-modules`

  - `ghcide`: the ide uses [the just released version 0.5](https://github.com/haskell/ghcide/blob/master/CHANGELOG.md#050-2020-10-08) with many bug fixes and improvements, including:
    - code action to remove *all* redundant imports
    - improved support for Template Haskell
    - emit desugarer warnings

  ### Pull requests merged for 0.6.0

  - Fix tasty rerun
  ([#570](https://github.com/haskell/haskell-language-server/pull/570)) by @jneira
  - Bump up ghcide submodule to version 0.5.0
  ([#568](https://github.com/haskell/haskell-language-server/pull/568)) by @jneira
  - Refactor tactics to track hypothesis provenance
  ([#557](https://github.com/haskell/haskell-language-server/pull/557)) by @isovector
  - Use bash shell to allow its idioms
  ([#552](https://github.com/haskell/haskell-language-server/pull/552)) by @jneira
  - Ignore flakey tactics test
  ([#546](https://github.com/haskell/haskell-language-server/pull/546)) by @isovector
  - Better scoring metric for deriving safeHead
  ([#545](https://github.com/haskell/haskell-language-server/pull/545)) by @isovector
  - Discover skolems in the hypothesis, not just goal
  ([#542](https://github.com/haskell/haskell-language-server/pull/542)) by @isovector
  - [retrie] Fix code action title
  ([#538](https://github.com/haskell/haskell-language-server/pull/538)) by @pepeiborra
  - Tactics support for using given constraints
  ([#534](https://github.com/haskell/haskell-language-server/pull/534)) by @isovector
  - Add missing tactic subpackage in default stack.yaml
  ([#529](https://github.com/haskell/haskell-language-server/pull/529)) by @jneira
  - Use implicit-hie-0.1.2.0
  ([#528](https://github.com/haskell/haskell-language-server/pull/528)) by @jneira
  - Wait for diagnostics in tactics tests
  ([#525](https://github.com/haskell/haskell-language-server/pull/525)) by @isovector
  - Fix a bug in tactics preventing split of split
  ([#520](https://github.com/haskell/haskell-language-server/pull/520)) by @isovector
  - Use infix notation for destructing and splitting infix data cons
  ([#519](https://github.com/haskell/haskell-language-server/pull/519)) by @isovector
  - Retry the build three times
  ([#518](https://github.com/haskell/haskell-language-server/pull/518)) by @jneira
  - Separate tactics into its own package
  ([#516](https://github.com/haskell/haskell-language-server/pull/516)) by @isovector
  - Add a Troubleshooting section to the README
  ([#507](https://github.com/haskell/haskell-language-server/pull/507)) by @michaelpj
  - Add GitHub Actions CI for testing
  ([#504](https://github.com/haskell/haskell-language-server/pull/504)) by @bubba
  - Fix stack build for ghc-8.8.3 failing on some machines
  ([#503](https://github.com/haskell/haskell-language-server/pull/503)) by @luntain
  - Expand explanation of how to configure HLS
  ([#497](https://github.com/haskell/haskell-language-server/pull/497)) by @michaelpj
  - Module Name Plugin
  ([#480](https://github.com/haskell/haskell-language-server/pull/480)) by @tittoassini
  - Allow hole filling to deal with recursion
  ([#472](https://github.com/haskell/haskell-language-server/pull/472)) by @isovector
  - Restrict editor config to Haskell file, to avoid affecting Makefiles or other tab-based formats
  ([#442](https://github.com/haskell/haskell-language-server/pull/442)) by @tittoassini
  - Hlint plugin using ghc-lib
  ([#166](https://github.com/haskell/haskell-language-server/pull/166)) by @jneira

  ## 0.5.1

  0.5.1 is a minor bug fix release, mainly fixing an issue with the eval plugin
  as well as upgrading the ormolu and stylish-haskell dependencies.

  ### Pull requests merged for 0.5.1

  - Minimal fix for eval regression
  ([#488](https://github.com/haskell/haskell-language-server/pull/488)) by @pepeiborra
  - Bump stylish-haskell to 0.12.2.0
  ([#482](https://github.com/haskell/haskell-language-server/pull/482)) by @maksbotan
  - Improve the emacs instructions a little
  ([#479](https://github.com/haskell/haskell-language-server/pull/479)) by @michaelpj
  - Update README: HLS is no longer in *very* early stage
  ([#475](https://github.com/haskell/haskell-language-server/pull/475)) by @Anrock
  - Tactic plugin: Excludes Dictionary arguments in GADTs in Destruct Tactic
  ([#474](https://github.com/haskell/haskell-language-server/pull/474)) by @konn
  - Update doom emacs install instructions in README
  ([#470](https://github.com/haskell/haskell-language-server/pull/470)) by @iyefrat
  - Add ghc-8.10.2 to circleci
  ([#464](https://github.com/haskell/haskell-language-server/pull/464)) by @jneira
  - Bump ormolu to 0.1.3.0
  ([#422](https://github.com/haskell/haskell-language-server/pull/422)) by @AlistairB

  ## 0.5.0

  0.5.0 comes with a new tactics plugin which provides case splitting, homomorphic case splitting, and lambda introduction:

  ![Case splitting](https://user-images.githubusercontent.com/307223/92657198-3d4be400-f2a9-11ea-8ad3-f541c8eea891.gif)

  It can even attempt to fully fill a hole!

  ![Attempt to fill in hole code action](https://user-images.githubusercontent.com/307223/94743611-82a18580-032c-11eb-9f13-8f46bc45f928.gif)

  The imports lens plugin also learnt a new code action to make all imports explicit:

  ![Explicit imports code action](https://user-images.githubusercontent.com/2488460/94994815-1a53dd80-0592-11eb-8a12-ec704ae92385.gif)

  There's also plenty of bug fixes, improvements and updates to the underlying tools, including Fourmolu, implicit-hie-cradle and ghcide. [Some of the improvements from ghcide](https://github.com/haskell/ghcide/releases/tag/v0.4.0) include:

  - The entire project is typechecked on load
  - Reverse dependencies of a module are typechecked upon saving
  - Code completion includes local terms
  - Import code actions now also suggest open imports
  - Documentation on hover shows for symbols defined in the same module

  If you're eager to try all this out, haskell-language-server is now also installable via [ghcup](https://www.haskell.org/ghcup/):

  ```shell
  $ ghcup install hls
  ```

  ### Pull requests merged for 0.5.0

  - Update GHC version 8.12 to 9.0 in README
  ([#460](https://github.com/haskell/haskell-language-server/pull/460)) by @maralorn
  - Update Fourmolu to 0.2
  ([#455](https://github.com/haskell/haskell-language-server/pull/455)) by @georgefst
  - Generate .gz tars of all the binaries for macOS and Linux in GitHub Actions
  ([#454](https://github.com/haskell/haskell-language-server/pull/454)) by @bubba
  - install: create hls hardlinks instead of copies except on Windows
  ([#451](https://github.com/haskell/haskell-language-server/pull/451)) by @juhp
  - wrapper: cd to --cwd earlier
  ([#448](https://github.com/haskell/haskell-language-server/pull/448)) by @ocharles
  - Update README.md
  ([#446](https://github.com/haskell/haskell-language-server/pull/446)) by @moodmosaic
  - Upate Emacs setup notes
  ([#440](https://github.com/haskell/haskell-language-server/pull/440)) by @gdevanla
  - Use ghcide master and prepare hls-plugin-api-0.4.1.0
  ([#439](https://github.com/haskell/haskell-language-server/pull/439)) by @jneira
  - Add a code action to make all imports explicit
  ([#436](https://github.com/haskell/haskell-language-server/pull/436)) by @pepeiborra
  - Add docs on how to choose a formatter
  ([#432](https://github.com/haskell/haskell-language-server/pull/432)) by @googleson78
  - Implement 'Attempt to fill hole' code action
  ([#431](https://github.com/haskell/haskell-language-server/pull/431)) by @TOTBWF
  - Clarify that eval is a lens
  ([#428](https://github.com/haskell/haskell-language-server/pull/428)) by @Anrock
  - Use implicit-hie-cradle-0.2.0.1
  ([#427](https://github.com/haskell/haskell-language-server/pull/427)) by @jneira
  - [retrie] Fix uris in workspace edit
  ([#424](https://github.com/haskell/haskell-language-server/pull/424)) by @pepeiborra
  - Separate paragraphs
  ([#423](https://github.com/haskell/haskell-language-server/pull/423)) by @jneira
  - Include .editorconfig in the contributing section
  ([#420](https://github.com/haskell/haskell-language-server/pull/420)) by @jneira
  - Mention the copy of executables wit ghc version
  ([#419](https://github.com/haskell/haskell-language-server/pull/419)) by @jneira
  - Eval plugin: proper multilined results handling and command-name abbreviations
  ([#413](https://github.com/haskell/haskell-language-server/pull/413)) by @konn
  - Retrie - calculate imports in the command handler
  ([#408](https://github.com/haskell/haskell-language-server/pull/408)) by @pepeiborra
  - Progress reporting for Eval plugin
  ([#398](https://github.com/haskell/haskell-language-server/pull/398)) by @pepeiborra
  - bump ghcide submodule
  ([#396](https://github.com/haskell/haskell-language-server/pull/396)) by @wz1000
  - Fix cradles
  ([#393](https://github.com/haskell/haskell-language-server/pull/393)) by @pepeiborra
  - Case splitting and lambda introduction
  ([#391](https://github.com/haskell/haskell-language-server/pull/391)) by @isovector
  - Use stale data in explicit imports lens
  ([#383](https://github.com/haskell/haskell-language-server/pull/383)) by @pepeiborra
  - Create hls-plugin-api and move plugins to exe
  ([#379](https://github.com/haskell/haskell-language-server/pull/379)) by @jneira
  - Rebase on ghcide HEAD
  ([#378](https://github.com/haskell/haskell-language-server/pull/378)) by @pepeiborra
  - README clarify how exactly to use code evaluation
  ([#377](https://github.com/haskell/haskell-language-server/pull/377)) by @DunetsNM
  - Revise README.md
  ([#374](https://github.com/haskell/haskell-language-server/pull/374)) by @gihyeonsung

  ## 0.4.0

  0.4.0 introduces the import lens plugin, which can convert your import statements into qualified imports, or into an explicit import list:

  ![Imports code lens](https://imgur.com/pX9kvY4.gif)

  The eval plugin has also learnt two new commands, `:type` and `:kind`:

  ```haskell
  {-# LANGUAGE TypeApplications #-}
  foo :: Show a => a -> String
  foo = show

  -- >>> :type foo @Int
  -- foo @Int :: Int -> String

  -- >>> :type +v foo @Int
  -- foo @Int :: Show Int => Int -> String
  ```

  ```haskell
  -- >>> type N = 1
  -- >>> type M = 40
  -- >>> :kind N + M + 1
  -- N + M + 1 :: Nat

  -- >>> type N = 1
  -- >>> type M = 40
  -- >>> :kind N + M + 1
  -- N + M + 1 :: Nat
  ```

  There is now also support for GHC 8.10.2, and a new `haskell-language-server --probe-tools` command to help debug what version of each tool HLS is using.

  ```shell
  $ haskell-language-server --probe-tools
  haskell-language-server version: 0.3.0.0 (GHC: 8.10.1) (PATH: /Users/luke/.cabal/store/ghc-8.10.1/hskll-lngg-srvr-0.3.0.0-7c6d48c3/bin/haskell-language-server)
  Tool versions found on the $PATH
  cabal:  3.2.0.0
  stack:  2.3.3
  ghc:    8.10.2
  ```

  ### Pull requests merged for 0.4.0

  - Bring over a [tutorial about how to add hls plugins](https://github.com/pepeiborra/hls-tutorial)
  ([#372](https://github.com/haskell/haskell-language-server/pull/372)) by @bubba
  - Update the ghcide upstream to be in haskell/ghcide
  ([#370](https://github.com/haskell/haskell-language-server/pull/370)) by @alanz
  - Add ISSUE_TEMPLATE for github
  ([#305](https://github.com/haskell/haskell-language-server/pull/305)) by @fendor
  - Add use-package to the list of emacs packages
  ([#343](https://github.com/haskell/haskell-language-server/pull/343)) by @rgleichman
  - Implements `:type [+v/+d]` in Eval Plugin
  ([#361](https://github.com/haskell/haskell-language-server/pull/361)) by @konn
  - Bump bounds of hie-bios to 0.7.0
  ([#357](https://github.com/haskell/haskell-language-server/pull/357)) by @maralorn
  - Fix ImportLens plugin to work with GHC 8.10
  ([#356](https://github.com/haskell/haskell-language-server/pull/356)) by @Ailrun
  - Add single file rewrites and ignore unknown files
  ([#321](https://github.com/haskell/haskell-language-server/pull/321)) by @pepeiborra
  - Do not suggest explicit import lists for qualified imports
  ([#354](https://github.com/haskell/haskell-language-server/pull/354)) by @expipiplus1
  - Explicit imports lens (as seen on Twitter)
  ([#310](https://github.com/haskell/haskell-language-server/pull/310)) by @pepeiborra
  - Adds `:kind` and `:kind!` commands to Eval Plugin
  ([#345](https://github.com/haskell/haskell-language-server/pull/345)) by @konn
  - tech(nix): update niv and remove allowbroken
  ([#350](https://github.com/haskell/haskell-language-server/pull/350)) by @willbush
  - Update VS Code Haskell URL/repo
  ([#338](https://github.com/haskell/haskell-language-server/pull/338)) by @Sir4ur0n
  - doc(hack): Add explanation to hack and test HLS
  ([#329](https://github.com/haskell/haskell-language-server/pull/329)) by @Sir4ur0n
  - Apply the module pragmas for evaluation
  ([#322](https://github.com/haskell/haskell-language-server/pull/322)) by @pepeiborra
  - Copy working stack-8.6.5.yaml to stack.yaml
  ([#332](https://github.com/haskell/haskell-language-server/pull/332)) by @jneira
  - tech(nix): Allow broken as retrie is marked as broken
  ([#331](https://github.com/haskell/haskell-language-server/pull/331)) by @Sir4ur0n
  - feat(git): Add install/hie.yaml to gitignore
  ([#328](https://github.com/haskell/haskell-language-server/pull/328)) by @Sir4ur0n
  - Replace wrong occurrences of "engine" by "server"
  ([#319](https://github.com/haskell/haskell-language-server/pull/319)) by @tchoutri
  - Simplify coc.nvim instructions
  ([#315](https://github.com/haskell/haskell-language-server/pull/315)) by @oblitum
  - Coc config file requires a {} nesting everything
  ([#317](https://github.com/haskell/haskell-language-server/pull/317)) by @hyiltiz
  - Restrict opentelemetry version for stack builds
  ([#312](https://github.com/haskell/haskell-language-server/pull/312)) by @jneira
  - Add support for ghc-8.10.2
  ([#308](https://github.com/haskell/haskell-language-server/pull/308)) by @jneira
  - Return nothing if tool is not on the PATH
  ([#309](https://github.com/haskell/haskell-language-server/pull/309)) by @fendor
  - Probe tools cli
  ([#306](https://github.com/haskell/haskell-language-server/pull/306)) by @fendor
  - Add fourmolu plugin (attempt 2) and add Brittany for ghc-8.10.1
  ([#264](https://github.com/haskell/haskell-language-server/pull/264)) by @georgefst

  ## 0.3.0

  0.3.0 comes with two new plugins, retrie and fourmolu, provides binaries for
  GHC 8.8.4, and comes with a host of bug fixes.

  The retrie plugin supports RULES, functions and type synonyms which can be
  accessed through contextual code actions.

  Fourmolu can be used to format your code by setting the
  `haskell.formattingProvider` field in your LSP configuration to

  ```json
  {
    "haskell": {
      "formattingProvider": "fourmolu"
    }
  }
  ```

  The Brittany formatter is now also available on GHC 8.10.1.

  ### Pull requests merged

  - Fix haddock parse error in install.hs
  ([#255](https://github.com/haskell/haskell-language-server/pull/255)) by @georgefst
  - Ormolu flags
  ([#246](https://github.com/haskell/haskell-language-server/pull/246)) by @pepeiborra
  - Ormolu fix
  ([#257](https://github.com/haskell/haskell-language-server/pull/257)) by @sureyeaah
  - Remove redundant CircleCI steps
  ([#259](https://github.com/haskell/haskell-language-server/pull/259)) by @bubba
  - Slow down Tasty by limiting it to -j1
  ([#261](https://github.com/haskell/haskell-language-server/pull/261)) by @bubba
  - Remove hspec-expectations
  ([#260](https://github.com/haskell/haskell-language-server/pull/260)) by @bubba
  - Remove a redundant caching step
  ([#262](https://github.com/haskell/haskell-language-server/pull/262)) by @Ailrun
  - add hie.yaml to coc configuration
  ([#267](https://github.com/haskell/haskell-language-server/pull/267)) by @sureyeaah
  - Initial Retrie plugin
  ([#266](https://github.com/haskell/haskell-language-server/pull/266)) by @pepeiborra
  - Add exe extension to win executables
  ([#284](https://github.com/haskell/haskell-language-server/pull/284)) by @jneira
  - Use wz1000/hls-3 ghcide branch
  ([#275](https://github.com/haskell/haskell-language-server/pull/275)) by @alanz
  - Fix rename capability being declared
  ([#285](https://github.com/haskell/haskell-language-server/pull/285)) by @bubba
  - Add CI job for 8.8.4
  ([#287](https://github.com/haskell/haskell-language-server/pull/287)) by @bubba
  - Make the AGPL flag manual in cabal
  ([#250](https://github.com/haskell/haskell-language-server/pull/250)) by @fendor
  - Bring in doc URL fix for Windows
  ([#289](https://github.com/haskell/haskell-language-server/pull/289)) by @bubba
  - Bring in fix for libm on Linux static binaries
  ([#293](https://github.com/haskell/haskell-language-server/pull/293)) by @bubba
  - Add fourmolu plugin (attempt 2) and add Brittany for ghc-8.10.1
  ([#264](https://github.com/haskell/haskell-language-server/pull/264)) by @georgefst
  - Trying new hls-3 branch
  ([#300](https://github.com/haskell/haskell-language-server/pull/300)) by @alanz

  ## 0.2.2

  This changes the configuration section from "languageServerHaskell" to "haskell"
  to align it with vscode-haskell-1.0.0. Whilst the old section is still
  supported for now, you should update your LSP configuration (which varies per
  client) from

  ```json
  {
    "languageServerHaskell": {
      "formattingProvider": "stylish-haskell"
    }
  }
  ```

  to

  ```json
  {
    "haskell": {
      "formattingProvider": "stylish-haskell"
    }
  }
  ```

  ### Pull requests merged for 0.2.2

  - Mention docs on hover feature in README
  ([#209](https://github.com/haskell/haskell-language-server/pull/209)) by @georgefst
  - Add static binaries for ghc-8.8.4
  ([#224](https://github.com/haskell/haskell-language-server/pull/224)) by @bubba
  - Rename the configuration section from languageServerHaskell => haskell
  ([#227](https://github.com/haskell/haskell-language-server/pull/227)) by @bubba
  - Use -haddock for cabal and stack
  ([#214](https://github.com/haskell/haskell-language-server/pull/214)) by @jneira
  - slightly better shell.nix for local development
  ([#235](https://github.com/haskell/haskell-language-server/pull/235)) by @pepeiborra
  - Shell nix further steps
  ([#240](https://github.com/haskell/haskell-language-server/pull/240)) by @pepeiborra
  - Add numeric-version option for wrapper and server
  ([#241](https://github.com/haskell/haskell-language-server/pull/241)) by @fendor
  - Accept the legacy "languageServerHaskell" config name
  ([#243](https://github.com/haskell/haskell-language-server/pull/243)) by @bubba
  - Fix for Eval plugin: Error from tests not reported
  ([#244](https://github.com/haskell/haskell-language-server/pull/244)) by @tittoassini
  - Rename binaries before uploading
  ([#248](https://github.com/haskell/haskell-language-server/pull/248)) by @bubba

  ## 0.2.1

  This release includes a new eval plugin that allows Haddock code examples to be
  evaluated through a code lens. For example, the code below will now offer to
  evaluate `intercalate " " example`, and will insert the output in the line
  below.

  ```haskell
  example :: [String]
  example = ["This is an example", "of", "interactive", "evaluation"]

  -- >>> intercalate " " example
  -- "This is an example of interactive evaluation"
  --
  ```

  This is also the first release to have binaries distributed alongside it. Some
  behind the scene changes include the GHC library directory now being obtained on
  the fly, so either `ghc`, `cabal` or `stack` will need to be present on your
  PATH depending on your project. See `docs/releases.md` for more information. If
  you find any issues with this, please let us know!

  ### Pull requests merged for 0.2.1

  - Bump ormolu to 0.1.2.0
  ([#189](https://github.com/haskell/haskell-language-server/pull/189)) by @AlistairB
  - Remove dependency on Cabal
  ([#195](https://github.com/haskell/haskell-language-server/pull/195)) by @bubba
  - Fix extraneous extra-dep in stack-8.6.4.yaml
  ([#199](https://github.com/haskell/haskell-language-server/pull/199)) by @bubba
  - Fix install script stack targets
  ([#203](https://github.com/haskell/haskell-language-server/pull/203)) by @jneira
  - Add support for ghc-8.8.4
  ([#206](https://github.com/haskell/haskell-language-server/pull/206)) by @jneira
  - Simple Eval plugin
  ([#191](https://github.com/haskell/haskell-language-server/pull/191)) by @pepeiborra
  - Distributable binaries
  ([#165](https://github.com/haskell/haskell-language-server/pull/165)) by @bubba

  ## 0.2

  - Use cabal-plan from Hackage
  ([#185](https://github.com/haskell/haskell-language-server/pull/185)) by @georgefst
  - Bump ghcide to wz1000 hls-2 branch
  ([#184](https://github.com/haskell/haskell-language-server/pull/184)) by @alanz
  - doc(preprocessor): Document the preprocessor limitation
  ([#177](https://github.com/haskell/haskell-language-server/pull/177)) by @Sir4ur0n
  - Use shell.nix from Haskell-IDE-Engine
  ([#169](https://github.com/haskell/haskell-language-server/pull/169)) by @fendor
  - Remove last occurrences of shake.yaml
  ([#163](https://github.com/haskell/haskell-language-server/pull/163)) by @fendor
  - Use an unique install/stack.yaml
  ([#154](https://github.com/haskell/haskell-language-server/pull/154)) by @jneira
  - Introduce golden testing
  ([#152](https://github.com/haskell/haskell-language-server/pull/152)) by @Ailrun
  - Revert "Use bullet as separator instead of HR"
  ([#150](https://github.com/haskell/haskell-language-server/pull/150)) by @alanz
  - feat(hie-bios): Multi-cradle, ignore directories
  ([#147](https://github.com/haskell/haskell-language-server/pull/147)) by @Sir4ur0n
  - [Plugin] stylish-haskell formatter
  ([#146](https://github.com/haskell/haskell-language-server/pull/146)) by @Ailrun
  - Separate ghcide tests and disable them for now
  ([#137](https://github.com/haskell/haskell-language-server/pull/137)) by @jneira
  - Convert private lib in common stanza
  ([#136](https://github.com/haskell/haskell-language-server/pull/136)) by @jneira
  - Add zlibc to readme
  ([#134](https://github.com/haskell/haskell-language-server/pull/134)) by @Sir4ur0n
  - Complete editor integrations
  ([#132](https://github.com/haskell/haskell-language-server/pull/132)) by @jneira
  - Remove inexistent component from hie.yaml.stack
  ([#131](https://github.com/haskell/haskell-language-server/pull/131)) by @jneira
  - Bump to new mpickering/ghcide
  ([#130](https://github.com/haskell/haskell-language-server/pull/130)) by @alanz
  - Update ghc-lib-parser version
  ([#129](https://github.com/haskell/haskell-language-server/pull/129)) by @jneira
  - Remove redundant import
  ([#128](https://github.com/haskell/haskell-language-server/pull/128)) by @bubba
  - Default the number of Shake threads to 0 (automatic)
  ([#127](https://github.com/haskell/haskell-language-server/pull/127)) by @bubba
  - Added kakoune integration instructions
  ([#125](https://github.com/haskell/haskell-language-server/pull/125)) by @414owen
  - Fix install script dev target
  ([#124](https://github.com/haskell/haskell-language-server/pull/124)) by @jneira
  - Add plugin support for Rename providers
  ([#123](https://github.com/haskell/haskell-language-server/pull/123)) by @pepeiborra
  - Add jobs for stack and cabal using ghc-8.10.1
  ([#120](https://github.com/haskell/haskell-language-server/pull/120)) by @jneira
  - Add lower bound to tasty-ant-xml
  ([#119](https://github.com/haskell/haskell-language-server/pull/119)) by @jneira
  - Fix build using brittany revision
  ([#117](https://github.com/haskell/haskell-language-server/pull/117)) by @jneira
  - Use floskell released version 0.10.3
  ([#116](https://github.com/haskell/haskell-language-server/pull/116)) by @jneira
  - Add emacs/doom-emacs integration sub-section
  ([#115](https://github.com/haskell/haskell-language-server/pull/115)) by @yuanw
  - Port hie README partially
  ([#112](https://github.com/haskell/haskell-language-server/pull/112)) by @jneira
  - Use cabal-helper-1.1, add stack-8.10.1.yaml and unify cabal.project's
  ([#108](https://github.com/haskell/haskell-language-server/pull/108)) by @jneira
  - [#87] Fix completion via ghcide's `getCompletionsLSP`
  ([#107](https://github.com/haskell/haskell-language-server/pull/107)) by @korayal
  - Create specific project file for ghc-8.10.
  ([#106](https://github.com/haskell/haskell-language-server/pull/106)) by @jneira
  - Issue 5 - Move HIE Tests and convert to Tasty
  ([#105](https://github.com/haskell/haskell-language-server/pull/105)) by @jeffwindsor
  - Hls update latest hie bios
  ([#100](https://github.com/haskell/haskell-language-server/pull/100)) by @fendor
  - Update extra-deps to use latest fork version of shake
  ([#98](https://github.com/haskell/haskell-language-server/pull/98)) by @fendor
  - Activate typechecking in non-lsp mode
  ([#95](https://github.com/haskell/haskell-language-server/pull/95)) by @jneira
  - Fix haddock parsing errors
  ([#92](https://github.com/haskell/haskell-language-server/pull/92)) by @jneira
  - Update for haskell-lsp 0.22
  ([#89](https://github.com/haskell/haskell-language-server/pull/89)) by @alanz
  - Get building with ghc-8.10
  ([#83](https://github.com/haskell/haskell-language-server/pull/83)) by @bubba

  ## 0.1

  ### In this version

  - cabal to 2020-05-02T10:11:15Z
  - stack-8.8.3 to lts-15.10
  - stack to nightly-2020-05-01

  ### Changes

  This is the initial version, so too many to list individually.

  The key point is that is now supports multi-component cradles, and has been in
  daily use by the developers for some time.

  It still does not have feature parity with `haskell-ide-engine`, but it is
  currently useful.
basic-deps:
  shake: -any
  ghc: -any
  lsp: -any
  cryptohash-sha1: -any
  bytestring: -any
  hls-stylish-haskell-plugin: ^>=1.0.0.0
  extra: -any
  hiedb: -any
  base: '>=4.12 && <5'
  sqlite-simple: -any
  aeson-pretty: -any
  unordered-containers: -any
  text: -any
  hls-class-plugin: ^>=1.0.0.1
  safe-exceptions: -any
  hls-retrie-plugin: ^>=1.0.0.1
  hls-explicit-imports-plugin: ^>=1.0.0.1
  filepath: -any
  gitrev: -any
  process: -any
  haskell-language-server: -any
  async: -any
  data-default: -any
  hie-bios: -any
  containers: -any
  ghcide: ==1.2.*
  lens: -any
  ghc-paths: -any
  binary: -any
  hslogger: -any
  regex-tdfa: -any
  fuzzy: -any
  hls-haddock-comments-plugin: ^>=1.0.0.1
  fourmolu: ^>=0.3
  mtl: -any
  hls-tactics-plugin: ^>=1.1.0.0
  optparse-simple: -any
  hashable: -any
  hls-eval-plugin: ^>=1.1.0.0
  floskell: ^>=0.10
  base16-bytestring: -any
  transformers: -any
  temporary: -any
  optparse-applicative: -any
  deepseq: -any
  ghc-boot-th: -any
  hls-splice-plugin: ^>=1.0.0.1
  hls-plugin-api: ==1.1.*
  ormolu: ^>=0.1.2
  aeson: -any
  hls-hlint-plugin: ^>=1.0.0.2
  hls-brittany-plugin: ^>=1.0.0.1
  directory: -any
all-versions:
- 0.8.0.0
- 0.9.0.0
- 1.0.0.0
- 1.1.0.0
author: The Haskell IDE Team
latest: 1.1.0.0
description-type: markdown
description: |
  # haskell-language-server

  ![haskell-language-server][logo]

  [![Hackage][badge-hackage]][hackage]
  [![License Apache 2.0][badge-license]][license]
  [![CircleCI][badge-circleci]][circleci]
  ![Github Testing Workflow](https://github.com/haskell/haskell-language-server/workflows/Testing/badge.svg)
  ![Github Nix Workflow](https://github.com/haskell/haskell-language-server/workflows/Nix/badge.svg)

  [logo]: ./docs/logos/logo-256.png
  [badge-license]: https://img.shields.io/badge/license-Apache2-green.svg?dummy
  [license]: https://github.com/haskell/haskell-language-server/blob/master/LICENSE
  [badge-circleci]: https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg
  [circleci]: https://circleci.com/gh/haskell/haskell-language-server/
  [badge-hackage]: https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell
  [hackage]: https://hackage.haskell.org/package/haskell-language-server

  Integration point for [ghcide](https://github.com/haskell/ghcide) and [haskell-ide-engine](https://github.com/haskell/haskell-ide-engine). One IDE to rule
  them all. Read the [project's
  background](https://neilmitchell.blogspot.com/2020/01/one-haskell-ide-to-rule-them-all.html).

  - [haskell-language-server](#haskell-language-server)
    - [Features](#features)
    - [Installation](#installation)
      - [Prerequisites](#prerequisites)
      - [ghcup](#ghcup)
      - [Visual Studio Code](#visual-studio-code)
      - [Pre-built binaries](#pre-built-binaries)
      - [Arch Linux](#arch-linux)
      - [Installation from source](#installation-from-source)
        - [Common pre-requirements](#common-pre-requirements)
        - [Linux-specific pre-requirements](#linux-specific-pre-requirements)
        - [Windows-specific pre-requirements](#windows-specific-pre-requirements)
        - [Download the source code](#download-the-source-code)
        - [Building](#building)
          - [Install via cabal](#install-via-cabal)
          - [Install specific GHC Version](#install-specific-ghc-version)
      - [Installation from Hackage](#installation-from-hackage)
    - [Configuring `haskell-language-server`](#configuring-haskell-language-server)
      - [Generic server options](#generic-server-options)
      - [Generic editor options](#generic-editor-options)
      - [Language-specific server options](#language-specific-server-options)
      - [Client options](#client-options)
    - [Configuring your project build](#configuring-your-project-build)
    - [Configuring your editor](#configuring-your-editor)
      - [VS Code](#vs-code)
      - [Sublime Text](#sublime-text)
      - [Vim or Neovim](#vim-or-neovim)
        - [Coc](#coc)
        - [LanguageClient-neovim](#languageclient-neovim)
          - [vim-plug](#vim-plug)
          - [Clone the LanguageClient-neovim repo](#clone-the-languageclient-neovim-repo)
          - [Configuration and sample `~/.vimrc` sections](#configuration-and-sample-vimrc-sections)
      - [Atom](#atom)
      - [Emacs](#emacs)
        - [doom-emacs](#doom-emacs)
        - [Spacemacs](#spacemacs)
      - [Kakoune](#kakoune)
    - [Known limitations](#known-limitations)
      - [Preprocessor](#preprocessor)
    - [Troubleshooting](#troubleshooting)
      - [Common issues](#common-issues)
        - [Difficulties with Stack and `Paths_` modules](#difficulties-with-stack-and-paths_-modules)
        - [Problems with dynamic linking](#problems-with-dynamic-linking)
      - [Troubleshooting the server](#troubleshooting-the-server)
        - [Diagnostic mode](#diagnostic-mode)
        - [Examining the log](#examining-the-log)
      - [Troubleshooting the client](#troubleshooting-the-client)
    - [Contributing](#contributing)
      - [Style guidelines](#style-guidelines)
      - [Building haskell-language-server](#building-haskell-language-server)
        - [Using Cabal](#using-cabal)
        - [Using Stack](#using-stack)
        - [Using Nix](#using-nix)
        - [Introduction tutorial](#introduction-tutorial)
        - [Test your hacked HLS in your editor](#test-your-hacked-hls-in-your-editor)
      - [Adding support for a new editor](#adding-support-for-a-new-editor)

  ## Features

  - Code evaluation codelens ([Tutorial](plugins/hls-eval-plugin/README.md)):

     ![Eval Demo](plugins/hls-eval-plugin/demo.gif)

  - Type information and documentation on hover. Note that currently, in order for docs to be displayed for dependencies, they must have been built with GHC's `-haddock` flag:

    - For cabal:
        - Add to your global config file (e.g. `~/.cabal/config`):

          ```cabal
          program-default-options
            ghc-options: -haddock
          ```

        - Or, for a single project, run `cabal configure --ghc-options=-haddock`

    - For stack, add to global `$STACK_ROOT\config.yaml`, or project's `stack.yaml`:

      ```cabal
      ghc-options:
        "$everything": -haddock
      ```

    This will cause compilation errors if a dependency contains invalid Haddock markup, though from GHC version 9.0, [these will be demoted to warnings](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/2377).

   - Integration with [retrie](https://hackage.haskell.org/package/retrie)

     ![Retrie](https://i.imgur.com/Ev7B87k.gif)

   - Code lenses for explicit import lists

     ![Imports code lens](https://imgur.com/pX9kvY4.gif)

   - Many more (TBD)

  ## Installation

  ### Prerequisites

  - For standalone `.hs`/`.lhs` files, [ghc](https://www.haskell.org/ghc/) must be installed and on the PATH. The easiest way to install it is with [ghcup](https://www.haskell.org/ghcup/) or [Chocolatey](https://www.haskell.org/platform/windows.html) on Windows.
  - For Cabal based projects, both ghc and [cabal-install](https://www.haskell.org/cabal/) must be installed and on the PATH. It can also be installed with [ghcup](https://www.haskell.org/ghcup/) or [Chocolatey](https://www.haskell.org/platform/windows.html) on Windows.
  - For Stack based projects, [stack](http://haskellstack.org) must be installed and on the PATH.

  ### ghcup

  If you are using [`ghcup`](https://www.haskell.org/ghcup/) to manage your installations, you can install the latest version of `haskell-language-server` with
  ```
  ghcup install hls
  ```

  ### Visual Studio Code

  If you are using Visual Studio Code, the [Haskell extension](https://marketplace.visualstudio.com/items?itemName=haskell.haskell) will automatically download and install `haskell-language-server` for you.

  ### Pre-built binaries

  There are pre-built binaries available from the [releases page](https://github.com/haskell/haskell-language-server/releases) for Linux, Windows and macOS.
  To install, download the `haskell-language-server-wrapper` executable for your platform as well as any `haskell-language-server` executables for the GHC versions you plan on working with, and either put them on your PATH or point your client to them.

  ### Arch Linux

  The preferred method of installation for development purposes is to use the [haskell-language-server-bin](https://aur.archlinux.org/packages/haskell-language-server-bin) package from AUR.
  This package contains statically linked binaries for each supported GHC version and `haskell-language-server-wrapper` for automatic GHC version selection.
  It is updated regularly, requires no additional dependencies, and is independent of other haskell packages you may have on your system, including GHC.
  Its size is relatively large (approx. 900 MB), but if this is a problem for you, during installation you can disable the GHC versions you will not be using by editing the PKGBUILD file.

  Alternatively, if you want to use **dynamically linked** Haskell packages from `pacman`,
  you can install the latest pre-compiled version of `haskell-language-server` from [[community]](https://archlinux.org/packages/community/x86_64/haskell-language-server/):

  ```
  sudo pacman -S haskell-language-server
  ```

  In this case, `haskell-language-server` is compiled against the GHC distributed to Arch Linux, so you will need maintain a system wide Haskell development environment, and install GHC from `pacman` as well.
  See [ArchWiki](https://wiki.archlinux.org/index.php/Haskell) for the details of Haskell infrastructure on Arch Linux.

  ### Installation from source

  #### Common pre-requirements

  - `stack` or `cabal` must be in your PATH
    - You need stack version >= 2.1.1 or cabal >= 2.4.0.0
  - `git` must be in your PATH
  - The directory where `stack`or `cabal` put the binaries must be in you PATH:
    - For stack you can get it with `stack path --local-bin`
    - For cabal it is by default `$HOME/.cabal/bin` in linux and `%APPDATA%\cabal\bin` in windows.

  Tip: you can quickly check if some command is in your path by running the command.
  If you receive some meaningful output instead of "command not found"-like message
  then it means you have the command in PATH.

  #### Linux-specific pre-requirements

  On Linux you will need install a couple of extra libraries:

  - [Unicode (ICU)](http://site.icu-project.org/)
  - [NCURSES](https://www.gnu.org/software/ncurses/)
  - [Zlib](https://zlib.net/)

  **Debian 9/Ubuntu 18.04 or earlier**:

  ```bash
  sudo apt install libicu-dev libtinfo-dev libgmp-dev zlib1g-dev
  ```

  **Debian 10/Ubuntu 18.10 or later**:

  ```bash
  sudo apt install libicu-dev libncurses-dev libgmp-dev zlib1g-dev
  ```

  **Fedora**:

  ```bash
  sudo dnf install libicu-devel ncurses-devel zlib-devel
  ```

  #### Windows-specific pre-requirements

  In order to avoid problems with long paths on Windows you can do either one of the following:

  1. Clone the `haskell-language-server` to a short path, for example the root of your logical drive (e.g. to
     `C:\hls`). Even if you choose `C:\haskell-language-server` you could hit the problem. If this doesn't work or you want to use a longer path, try the second option.

  2. If the `Local Group Policy Editor` is available on your system, go to: `Local Computer Policy -> Computer Configuration -> Administrative Templates -> System -> Filesystem` set `Enable Win32 long paths` to `Enabled`. If you don't have the policy editor you can use regedit by using the following instructions [here](https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#enable-long-paths-in-windows-10-version-1607-and-later). You also need to configure git to allow longer paths by using unicode paths. To set this for all your git repositories use `git config --system core.longpaths true` (you probably need an administrative shell for this) or for just this one repository use `git config core.longpaths true`.

  In addition make sure `haskell-language-server.exe` is not running by closing your editor, otherwise in case of an upgrade the executable can not be installed.

  #### Download the source code

  ```bash
  git clone https://github.com/haskell/haskell-language-server --recurse-submodules
  cd haskell-language-server
  ```

  #### Building

  Note, on first invocation of the build script with stack, a GHC is being installed for execution.
  The GHC used for the `install.hs` can be adjusted in `./install/stack.yaml` by using a different resolver.

  Available commands can be seen with:

  ```bash
  stack ./install.hs help
  ```

  Remember, this will take time to download a Stackage-LTS and an appropriate GHC for build
  haskell-language-server the first time.

  ##### Install via cabal

  The install-script can be invoked via `cabal` instead of `stack` with the command

  ```bash
  cabal v2-run ./install.hs --project-file install/shake.project <target>
  ```

  or using the existing alias script

  ```bash
  ./cabal-hls-install <target>
  ```

  Running the script with cabal on windows requires a cabal version greater or equal to `3.0.0.0`.

  For brevity, only the `stack`-based commands are presented in the following sections.

  ##### Install specific GHC Version

  The script will install the executables `haskell-language-server-wrapper` and `haskell-language-server`.

  It will copy the latter appending the used ghc version, needed by the wrapper to choose the suitable version
  for the project at hand.

  So installing the executables directly with `stack install` or `cabal v2-install` may not be enough
  for it to work properly.

  Install haskell-language-server for the latest available and supported GHC version (and hoogle docs):

  ```bash
  stack ./install.hs hls
  ```

  Install haskell-language-server for a specific GHC version (and hoogle docs):

  ```bash
  stack ./install.hs hls-8.8.3
  ```

  `hls-8.8.3` target will build the project and install `haskell-language-server-wrapper`,
  `haskell-language-server`, `haskell-language-server-8.8.3` and `haskell-language-server-8.8`
  executables.

  The Haskell Language Server can also be built with `cabal v2-build` instead of `stack build`.
  This has the advantage that you can decide how the GHC versions have been installed.
  To see what GHC versions are available, the command `cabal-hls-install ghcs` can be used.
  It will list all *supported* GHC versions that are on the path for build with their respective installation directory.
  If you think, this list is incomplete, you can try to modify the PATH variable, such that the executables can be found.
  Note, that the targets `hls` and `data` depend on the found GHC versions.

  An example output is:

  ```bash
  > ./cabal-hls-install ghcs
  ******************************************************************
  Found the following GHC paths:
  ghc-8.6.5: /opt/bin/ghc-8.6.5
  ghc-8.8.3: /opt/bin/ghc-8.8.3

  ******************************************************************
  ```

  If your desired ghc has been found, you use it to install haskell-language-server.

  ```bash
  ./cabal-hls-install hls-8.6.5
  ```

  ### Installation from Hackage

  Direct installation from Hackage, while possible via `cabal install haskell-language-server`, is not recommended for most people.
  Said command builds the `haskell-language-server` binary and installs it in the default Cabal binaries folder,
  but the binary will only work with projects that use the same GHC version that built it.

  The package can be found here on Hackage: <https://hackage.haskell.org/package/haskell-language-server>

  ## Configuring `haskell-language-server`

  Language servers like `haskell-language-server` expose most of their configuration via the client (i.e. the editor).
  That means that the way in which you configure the settings will depend on the client.

  Most clients (editors) already have an opinion about how settings should be configured!
  For example, in VS Code you use the graphical Settings tab or `settings.json`, whereas in Emacs you use customization variables.
  In the [editor configuration section](#configuring-your-editor) we give some pointers for popular editors, but you should consult the documentation for your specific editor if you have trouble.

  However, we can say some high-level things about the kinds of configuration `haskell-language-server` uses, and how to use them.
  This can sound a bit confusing, but ultimately the client should present you with these options in a user-friendly way that makes sense for that editor.

  ### Generic server options

  The LSP protocol is designed to support many useful server configuration options generically.
  These are sent to the server by the client, and can be controlled without reference to a specific language.

  For example, there are protocol methods for highlighting matching identifiers throughout a document.
  This is a capability which any server can implement, so the client can decide generically whether to ask the server to do it or not.
  So your editor can provide a setting to turn this on or off globally, for any language server you might use.

  Settings like this are typically provided by the generic LSP client support for your editor, for example in Emacs by `lsp-mode`.

  ### Generic editor options

  Your editor may provide some settings that affect how the information from the language server is used.
  For example, whether popups are shown, or whether code lenses appear by default.

  Settings like this are typically provided by the generic LSP client support for your editor, for example in Emacs by `lsp-mode`.

  ### Language-specific server options

  A specific language server can also have its own configuration options.
  These are still sent to the server by the client, but they can only be controlled by a specific client that knows about those options.

  For example, `haskell-language-server` allows you to choose the formatting provider which will be used for formatting Haskell source.
  This option obviously would not make sense for language servers for other languages, or even for other Haskell language servers (which need not even support formatting).

  Here is a list of the additional settings currently supported by `haskell-language-server`, along with their setting key (you may not need to know this) and default:

  - Formatting provider (`haskell.formattingProvider`, default `ormolu`): what formatter to use; one of `floskell`, `ormolu`, `fourmolu`, `stylish-haskell`, or `brittany` (if compiled with the brittany plugin)
  - Format on imports (`haskell.formatOnImportOn`, default true): whether to format after adding an import
  - Diagnostics on change (`haskell.diagnosticsOnChange`, default true): (currently unused)
  - Completion snippets (`haskell.completionSnippetsOn`, default true): whether to support completion snippets
  - Liquid Haskell (`haskell.liquidOn`, default false): whether to enable Liquid Haskell support (currently unused until the Liquid Haskell support is functional again)
  - Hlint (`haskell.hlintOn`, default true): whether to enable Hlint support
  - Max completions (`haskell.maxCompletions`, default 40): maximum number of completions sent to the LSP client.

  Settings like this are typically provided by the language-specific LSP client support for your editor, for example in Emacs by `lsp-haskell`.

  ### Client options

  A particular client might also have some options of its own, for example to control how the server executable is started.

  Settings like this are typically be provided by the language-specific LSP client support for your editor, for example in Emacs by `lsp-haskell`.

  ## Configuring your project build

  `haskell-language-server` has to compile your project in order to give you diagnostics, which means that it needs to know how to do so.
  This is handled by the [`hie-bios`](https://github.com/mpickering/hie-bios) project.

  **For a full explanation of how `hie-bios` determines the project build configuration, and how to configure it manually, refer to the [`hie-bios` README](https://github.com/mpickering/hie-bios/blob/master/README.md).**

  At the moment, `haskell-language-server` has some limited support to automatically detect your project build configuration.
  The plan is to improve it to handle most use cases.

  However, for now, the most reliable way is to manually configure `hie-bios` using a `hie.yaml` file in the root of the workspace.
  A `hie.yaml` file **explicitly** describes how to setup the environment to compile the various parts of your project.
  For that you need to know what *components* your project has, and the path associated with each one.
  So you will need some knowledge about
  [stack](https://docs.haskellstack.org/en/stable/build_command/#components) or [cabal](https://cabal.readthedocs.io/en/latest/cabal-commands.html?#cabal-v2-build) components.

  You also can use [this utility](https://github.com/Avi-D-coder/implicit-hie) to automatically generate `hie.yaml` files for
  the most common stack and cabal configurations

  For example, to state that you want to use `stack` then the configuration file
  would look like:

  ```yaml
  cradle:
    stack:
      component: "haskell-language-server:lib"
  ```

  If you use `cabal` then you probably need to specify which component you want
  to use.

  ```yaml
  cradle:
    cabal:
      component: "lib:haskell-language-server"
  ```

  If you have a project with multiple components, you can use a cabal-multi
  cradle:

  ```yaml
  cradle:
    cabal:
      - path: "./test/functional/"
        component: "haskell-language-server:func-test"
      - path: "./test/utils/"
        component: "haskell-language-server:hls-test-utils"
      - path: "./exe/Main.hs"
        component: "haskell-language-server:exe:haskell-language-server"
      - path: "./exe/Wrapper.hs"
        component: "haskell-language-server:exe:haskell-language-server-wrapper"
      - path: "./src"
        component: "lib:haskell-language-server"
      - path: "./ghcide/src"
        component: "ghcide:lib:ghcide"
      - path: "./ghcide/exe"
        component: "ghcide:exe:ghcide"
  ```

  Equivalently, you can use stack:

  ```yaml
  cradle:
    stack:
      - path: "./test/functional/"
        component: "haskell-language-server:func-test"
      - path: "./exe/Main.hs"
        component: "haskell-language-server:exe:haskell-language-server"
      - path: "./exe/Wrapper.hs"
        component: "haskell-language-server:exe:haskell-language-server-wrapper"
      - path: "./src"
        component: "haskell-language-server:lib"
      - path: "./ghcide/src"
        component: "ghcide:lib:ghcide"
      - path: "./ghcide/exe"
        component: "ghcide:exe:ghcide"
  ```

  Or you can explicitly state the program which should be used to collect
  the options by supplying the path to the program. It is interpreted
  relative to the current working directory if it is not an absolute path.

  ```yaml
  cradle:
    bios:
      program: ".hie-bios"
  ```

  The complete configuration is a subset of

  ```yaml
  cradle:
    cabal:
      component: "optional component name"
    stack:
      component: "optional component name"
    bios:
      program: "program to run"
      dependency-program: "optional program to run"
    direct:
      arguments: ["list","of","ghc","arguments"]
    default:
    none:

  dependencies:
    - someDep
  ```

  ## Configuring your editor

  Most editors provide a Haskell-specific extension that provides support for launching `haskell-language-server` and talking to it, as well as [exposing configuration options](#configuring-haskell-language-server).

  Editors typically assume that you have already installed `haskell-language-server` (see above) and that the installation script put the `haskell-language-server` and `haskell-language-server-wrapper` binaries in your `PATH` (usually `~/.local/bin` or `~/.cabal/bin` on Linux and macOS, `%APPDATA%\local\bin` or `%APPDATA%\cabal\bin` on Windows).
  The exception is VS Code, which can automatically install the binaries if they are not installed already.

  ### VS Code

  Install from
  [the VSCode marketplace](https://marketplace.visualstudio.com/items?itemName=haskell.haskell), or manually from the repository [vscode-haskell](https://github.com/haskell/vscode-haskell).
  The `haskell-language-server` and `haskell-language-server-wrapper` binaries will be automatically downloaded on an ad-hoc basis, but if you have them already installed on your PATH then it will just use them instead.

  Configuration is done via the "Haskell" section of "Settings".

  ### Sublime Text

  - Install [LSP](https://packagecontrol.io/packages/LSP) using [Package Control](https://packagecontrol.io/)
  - From Sublime Text, go to Preferences and search for LSP Settings
  - Paste in these settings. Make sure to change the command path to your `haskell-language-server-wrapper`

  ```json
  {
    "clients": {
      "haskell-language-server": {
        "command": ["haskell-language-server-wrapper", "--lsp"],
        "scopes": ["source.haskell"],
        "syntaxes": ["Packages/Haskell/Haskell.sublime-syntax"],
        "languageId": "haskell"
      }
    }
  }
  ```

  Now open a Haskell project with Sublime Text and enable Language Server in the project.
  You should have these features available:

  1. Errors are underlined in red
  2. LSP: Show Diagnostics will show a list of hints and errors
  3. LSP: Format Document will prettify the file

  ### Vim or Neovim

  You can use [Coc](https://github.com/neoclide/coc.nvim), [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)
  or any other Vim Language server protocol client.
  Coc is recommend since it is the only complete LSP implementation for Vim and Neovim and offers snippets and floating documentation out of the box.

  #### Coc

  Follow Coc's [installation instructions](https://github.com/neoclide/coc.nvim).
  Then issue `:CocConfig` and add the following to your Coc config file.

  ```json
  {
    "languageserver": {
      "haskell": {
        "command": "haskell-language-server-wrapper",
        "args": ["--lsp"],
        "rootPatterns": ["*.cabal", "stack.yaml", "cabal.project", "package.yaml", "hie.yaml"],
        "filetypes": ["haskell", "lhaskell"]
      }
    }
  }
  ```

  #### LanguageClient-neovim

  ##### vim-plug

  If you use [vim-plug](https://github.com/junegunn/vim-plug), then you can do this by e.g.,
  including the following line in the Plug section of your `init.vim` or `~/.vimrc`:

  ```text
  Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'bash install.sh'
      \ }
  ```

  and issuing a `:PlugInstall` command within Neovim or Vim.

  ##### Clone the LanguageClient-neovim repo

  As an alternative to using [vim-plug](https://github.com/junegunn/vim-plug) shown above, clone [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)
  into `~/.vim/pack/XXX/start/`, where `XXX` is just a name for your "plugin suite".

  ##### Configuration and sample `~/.vimrc` sections

  ```vim
  set rtp+=~/.vim/pack/XXX/start/LanguageClient-neovim
  let g:LanguageClient_serverCommands = { 'haskell': ['haskell-language-server-wrapper', '--lsp'] }
  ```

  You'll probably want to add some mappings for common commands:

  ```vim
  nnoremap <F5> :call LanguageClient_contextMenu()<CR>
  map <Leader>lk :call LanguageClient#textDocument_hover()<CR>
  map <Leader>lg :call LanguageClient#textDocument_definition()<CR>
  map <Leader>lr :call LanguageClient#textDocument_rename()<CR>
  map <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
  map <Leader>lb :call LanguageClient#textDocument_references()<CR>
  map <Leader>la :call LanguageClient#textDocument_codeAction()<CR>
  map <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
  ```

  Use <kbd>Ctrl+x</kbd><kbd>Ctrl+o</kbd> (`<C-x><C-o>`) to open up the auto-complete menu,
  or for asynchronous auto-completion, follow the setup instructions on
  [LanguageClient](https://github.com/autozimu/LanguageClient-neovim).

  If you'd like diagnostics to be highlighted, add a highlight group for `ALEError`/`ALEWarning`/`ALEInfo`,
  or customize `g:LanguageClient_diagnosticsDisplay`:

  ```vim
  hi link ALEError Error
  hi Warning term=underline cterm=underline ctermfg=Yellow gui=undercurl guisp=Gold
  hi link ALEWarning Warning
  hi link ALEInfo SpellCap
  ```

  If you're finding that the server isn't starting at the correct project root,
  it may also be helpful to also specify root markers:

  ```vim
  let g:LanguageClient_rootMarkers = ['*.cabal', 'stack.yaml']
  ```

  Further configuration can be done by pointing the [`g:LanguageClient_settingsPath`](https://github.com/autozimu/LanguageClient-neovim/blob/0e5c9546bfddbaa2b01e5056389c25aefc8bf989/doc/LanguageClient.txt#L221)
  variable to the file in which you want to keep your LSP settings.

  ### Atom

  Install the two Atom packages [atom-ide-ui](https://atom.io/packages/atom-ide-ui) and [haskell](https://atom.io/packages/haskell),

  ```bash
  $ apm install language-haskell atom-ide-ui haskell
  ```

  ### Emacs

  Emacs support is provided by a combination of the following packages:

  [lsp-mode](https://github.com/emacs-lsp/lsp-mode)
  [lsp-ui](https://github.com/emacs-lsp/lsp-ui)
  [lsp-haskell](https://github.com/emacs-lsp/lsp-haskell)

  You can install these manually if you are using plain Emacs; instructions for some specific flavours
  are included below.

  Make sure to check the READMEs of each of these packages, which explain how to configure the
  various parts of the Emacs integration.
  In particular, `lsp-haskell` provides customization options for the `haskell-language-server`-specific parts,
  such as the path to the server executable.

  #### [doom-emacs](https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/haskell#module-flags)

  Manual installation of packages is not required.
  Enable the lsp module and the haskell lang module with lsp flag in `.doom.d/init.el`:

  ``` emacs-lisp
  :tools
  lsp
  ;; ...
  :lang
  (haskell +lsp)
  ```

  then do `$HOME/.emacs.d/bin/doom sync`

  #### [Spacemacs](https://github.com/syl20bnr/spacemacs)

  Manual installation of packages is not required.
  Enable the `haskell` layer and the `lsp` layer in your Spacemacs config file:

  ```emacs-lisp
  dotspacemacs-configuration-layers
    '(
      haskell
      lsp
      ;; ...
    )
  ```

  ### [Kakoune](https://github.com/mawww/kakoune)

  1. Grab a copy of [kak-lsp](https://github.com/ul/kak-lsp), and follow the setup instructions.
  2. Point your `kak-lsp.toml` to `haskell-language-server-wrapper`.

  ```toml
  [language.haskell]
  filetypes = ["haskell"]
  roots = ["Setup.hs", "stack.yaml", "*.cabal"]
  command = "haskell-language-server-wrapper"
  args = ["--lsp"]
  ```

  ## Known limitations

  ### Preprocessor
  HLS is not yet able to find project preprocessors, which may result in `could not execute: <preprocessor>` errors. This problem is
  tracked in https://github.com/haskell/haskell-language-server/issues/176 and originally comes from https://github.com/mpickering/hie-bios/issues/125

  As a workaround, you need to ensure the preprocessor is available in the path (install globally with Stack or Cabal, provide in `shell.nix`, etc.).

  Example with `tasty-discover`:

  ```haskell
  {-# OPTIONS_GHC -F -pgmF tasty-discover #-}
  ```

  This returns an error in HLS if 'tasty-discover' is not in the path: `could not execute: tasty-discover`.

  ## Troubleshooting

  ### Common issues

  #### Difficulties with Stack and `Paths_` modules

  These are known to be somewhat buggy at the moment: <https://github.com/haskell/haskell-language-server/issues/478>.
  This issue should be fixed in Stack versions >= 2.5.

  #### Problems with dynamic linking

  As haskell-language-server prebuilt binaries are statically linked, they don't play well with projects using dynamic linking.
  An usual symptom is the presence of errors containing `unknown symbol` and it is typical in arch linux, where a dynamically linked version of ghc is used.

  The workaround is to use a version of haskell-language-server compiled from source with `-dynamic` enabled`. See more details [here](https://github.com/haskell/haskell-language-server/issues/1160#issuecomment-756566273).

  ### Troubleshooting the server

  #### Diagnostic mode

  The `haskell-language-server` executable can be run in diagnostic mode, where it will just try to load modules from your project, printing all of its output to stdout.
  This makes it much easier to see what's going on and to diagnose build-related problems.

  To do this, simply run the executable directly from your shell in the project root.
  You can either run it without an argument, in which case it will load random modules, or with a path, in which case it will load modules in that file or directory.

  #### Examining the log

  Most clients will launch `haskell-language-server` with `--logfile` to make it write a log file.
  Please consult the documentation for your client to find out where this is (or how to set it).

  The log will contain all the messages that are sent to the server and its responses.
  This is helpful for low-level debugging: if you expect a certain action to happen, you can look in the log to see if the corresponding messages are
  sent, or if there are any errors.

  To get a more verbose, also pass `--debug` to the executable.

  ### Troubleshooting the client

  Many clients provide diagnostic information about a LSP session.
  In particular, look for a way to get the status of the server, the server stderr, or a log of the messages that the client has sent to the server.
  For example, `lsp-mode` provides all of these (see its [troubleshooting page](https://emacs-lsp.github.io/lsp-mode/page/troubleshooting/) for details).

  The most common client-related problem is the client simply not finding the server executable, so make sure that you have the right `PATH` and you have configured
  it to look for the right executable.

  ## Contributing

  :heart: The Haskell tooling dream is near, we need your help! :heart:

  - Join [our IRC channel](https://webchat.freenode.net/?channels=haskell-language-server) at `#haskell-language-server` on `freenode`.
  - Fork this repo and [ghcide](https://github.com/haskell/ghcide) and hack as much as you can.

  ### Style guidelines

  The project includes a [`.editorconfig`](https://editorconfig.org) [file](https://github.com/haskell/haskell-language-server/blob/master/.editorconfig) with the editor basic settings used by the project.
  However, most editors will need some action to honour those settings automatically.
  For example vscode needs to have installed a specific [extension](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig).
  Please, try to follow those basic settings to keep the codebase as uniform as possible.

  ### Building haskell-language-server

  The project can be built with both `cabal build` and `stack build`.

  haskell-language-server can also be used with itself. We provide preset samples of `hie.yaml` for Cabal and Stack.

  Note: the `./install/` folder is not directly tied to the project so it has dedicated `./install/hie.yaml.[cbl|stack]`
  templates.

  #### Using Cabal

  ```shell
  $ cp hie-cabal.yaml hie.yaml
  $ cp install/hie-cabal.yaml install/hie.yaml
  ```

  #### Using Stack

  ```shell
  $ cp hie-stack.yaml hie.yaml
  $ cp install/hie-stack.yaml install/hie.yaml
  $ cp ghcide/hie-stack.yaml ghcide/hie.yaml
  $ stack build --test --no-run-tests
  $ cd install
  $ stack build
  ```

  #### Using Nix

  The instructions below show how to set up a Cachix binary cache and open a nix shell for local development.

  ```shell
  $ cachix use haskell-language-server
  $ nix-shell
  $ cabal update
  $ cabal build
  ```

  If you are looking for a Nix expression to create haskell-language-server binaries, see https://github.com/haskell/haskell-language-server/issues/122

  #### Introduction tutorial

  Pepeiborra [wrote an tutorial](https://github.com/pepeiborra/hls-tutorial) on writing a plugin in HLS.

  #### Test your hacked HLS in your editor

  If you want to test HLS while hacking on it, follow the steps below.

  To do once:

  - Open some codebase on which you want to test your hacked HLS in your favorite editor
  - Configure this editor to use your custom HLS executable
    - With Cabal:
      - On Unix systems: `cabal exec which haskell-language-server`
      - On Windows: `cabal exec where haskell-language-server`
    - With Stack: `$(stack path --dist-dir)/build/haskell-language-server/haskell-language-server`

  To do every time you changed code and want to test it:

  - Build HLS
    - With Cabal: `cabal build exe:haskell-language-server`
    - With Stack: `stack build haskell-language-server:exe:haskell-language-server`
  - Restart HLS
    - With VS Code: `Haskell: Restart Haskell LSP Server`

  ### Adding support for a new editor

  Adding support for new editors is fairly easy if the editor already has good support for generic LSP-based extensions.
  In that case, there will likely be an editor-specific support system for this (like `lsp-mode` for Emacs).
  This will typically provide instructions for how to support new languages.

  In some cases you may need to write a small bit of additional client support, or expose a way for the user to set the server's [configuration options](#configuring-haskell-language-server) and
  for them to configure how the server is started.
license-name: Apache-2.0
