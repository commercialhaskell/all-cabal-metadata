all-versions:
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
author: Obsidian Systems LLC
basic-deps:
  base: '>=4.11.0 && <4.22'
  bytestring: '>=0.10 && <0.13'
  cryptonite: '>=0.24 && <0.31'
  data-default: '>=0.7.1 && <0.9'
  haveibeenpwned: '>=0'
  http-client: '>=0.5.13.1 && <0.8'
  http-client-tls: ^>=0.3.5
  http-types: ^>=0.12.1
  monad-logger: '>=0.3.29 && <0.4'
  mtl: '>=2.2.2 && <2.4'
  safe: ^>=0.3.17
  text: '>=1.2 && <2.2'
changelog: |
  # Revision history for haveibeenpwned

  ## 0.2.0.3

  * Support for GHC 9.12

  ## 0.2.0.2

  * Support for GHC 9.10

  ## 0.2.0.1

  * Add readme to extra-source-files so that it appears on hackage

  ## 0.2.0.0

  * Breaking change in order to make the API and the implementation more secure.
    * There is a new HaveIBeenPwnedResult_Secure constructor which signals that the given password was not found in any database.
    * The `HaveIBeenPwnedResult_Disclosed` constructor has been renamed to `HaveIBeenPwnedResult_Pwned`, as its behaviour changed. (Valid passwords are no longer signalled by this constructor.)
  * Also internally, a "not found in database" is no longer represented as a disclosed count of zero. This improves security in the case of an incorrect database entry, having a disclosed count of 0, which would make this library report that password as "secure", although it actually has been leaked.

  ## 0.1.0.0

  * Initial release
changelog-type: markdown
description: "haveibeenpwned\n======================\n[![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org)
  [![Hackage](https://img.shields.io/hackage/v/haveibeenpwned.svg)](https://hackage.haskell.org/package/haveibeenpwned)
  [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/haveibeenpwned/badge)](https://matrix.hackage.haskell.org/#/package/haveibeenpwned)
  \  [![Github CI](https://github.com/obsidiansystems/haveibeenpwned/workflows/github-action/badge.svg)](https://github.com/obsidiansystems/haveibeenpwned/actions)
  [![travis-ci](https://api.travis-ci.org/obsidiansystems/haveibeenpwned.svg?branch=develop)](https://travis-ci.org/obsidiansystems/haveibeenpwned)
  [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/obsidiansystems/haveibeenpwned/blob/master/LICENSE)\n\nA
  [haskell](https://haskell.org) library for checking passwords against the\n[haveibeenpwned.com](https://haveibeenpwned.com)
  database.\n\nBy means of this library you can do some basic strength check on new
  user\npasswords. Common weak passwords like many plain English words or also many\nstronger
  passwords which happen to have been leaked will likely be found in the\ndatabase
  and can thus be rejected.\n\nExample\n-------\n\nThe example below can be built
  and run using `cabal build exe:readme` or `cabal\nrepl exe:readme`.\n\n```haskell
  \n\n> {-# LANGUAGE OverloadedStrings #-}\n>\n> import Control.Monad.IO.Class (liftIO)\n>
  import Control.Monad.Logger (runStdoutLoggingT)\n> import Control.Exception (bracket_)\n>
  import Data.Text as T (pack)\n> import Network.HTTP.Client (newManager)\n> import
  Network.HTTP.Client.TLS (tlsManagerSettings)\n> import System.IO (hFlush, stdout,
  hGetEcho, stdin, hSetEcho)\n>\n> import HaveIBeenPwned\n>\n> -- | A really simple
  demo of the hibp functionality. Asks the user to enter\n> -- a password and then
  uses the hibp api to check whether that password has\n> -- been pwned.\n> consoleHaveIBeenPwned
  :: IO ()\n> consoleHaveIBeenPwned = do\n>   runStdoutLoggingT $ do\n>     mgr <-
  liftIO $ newManager tlsManagerSettings\n>     p <- liftIO $ getPassword\n>     let
  hibpEnv = HaveIBeenPwnedConfig mgr \"https://api.pwnedpasswords.com/range\"\n>     p'
  <- flip runPwnedT hibpEnv $ haveIBeenPwned $ T.pack p\n>     liftIO $ case p' of\n>
  \      HaveIBeenPwnedResult_Secure ->\n>         putStrLn \"Your password does not
  appear in any known breaches.  Practice good password hygene.\"\n>       HaveIBeenPwnedResult_Pwned
  p'' ->\n>         putStrLn $ \"You have been pwned! Your password has appeared in
  breaches \" ++ show p'' ++ \" times.\"\n>       HaveIBeenPwnedResult_Error ->\n>
  \        putStrLn \"Network Error, try again later\"\n>\n> getPassword :: IO String\n>
  getPassword = do\n>   putStr \"Password: \"\n>   hFlush stdout\n>   password <-
  withEcho False getLine\n>   putChar '\\n'\n>   return password\n>\n> withEcho ::
  Bool -> IO a -> IO a\n> withEcho echo action = do\n>   old <- hGetEcho stdin\n>
  \  bracket_ (hSetEcho stdin echo) (hSetEcho stdin old) action\n>\n> main :: IO ()\n>
  main = consoleHaveIBeenPwned\n\n```\n\n***\n![Obsidian Systems](https://obsidian.systems/static/images/ObsidianSystemsLogo.svg)\n"
description-type: markdown
hash: db61209c70bf4607166192c0bf2373554cbc1fa3b42696180acaf0e4f37cfe4c
homepage: ''
latest: 0.2.0.3
license-name: BSD-3-Clause
maintainer: maintainer@obsidian.systems
synopsis: Library for checking for weak/compromised passwords.
test-bench-deps: {}
