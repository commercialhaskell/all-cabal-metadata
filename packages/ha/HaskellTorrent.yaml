all-versions:
- '0.0'
- '0.1'
- 0.1.1
author: Jesper Louis Andersen
basic-deps:
  HTTP: '>=0'
  HUnit: '>=0'
  QuickCheck: '>=2'
  base: '>=3.0 && <=5.0'
  bytestring: '>=0'
  cereal: '>=0'
  cml: '>=0'
  containers: '>=0'
  directory: '>=0'
  hopenssl: '>=0'
  hslogger: '>=0'
  mtl: '>=0'
  network: '>=0'
  parsec: '>=0'
  pretty: '>=0'
  random: '>=0'
  random-shuffle: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  test-framework-quickcheck2: '>=0'
  time: '>=0'
changelog: ''
changelog-type: ''
description: "Haskell Torrent - a haskell bittorrent client.\n==========\n\nIntroduction\n----------\n\nThis
  is a Haskell bittorrent client. I am the introduction document\nand I need to be
  written by some generous soul!\n\nInstallation\n------------\n\nHere is what I do
  to install haskell torrrent locally on my machine:\n\n    cabal install --prefix=$HOME
  --user\n\nSince we are using the magnificient cabal, this is enough to install haskell\ntorrent
  in our $HOME/bin directory.\n\nUsage\n-----------------\n\nHaskell torrent can currently
  only do one very simple thing. If you call it with\n\n    HaskellTorrent foo.torrent\n\nthen
  it will begin downloading the file in foo.torrent to the current\ndirectory via
  the Bittorrent protocol. *Note:* Currently we have no support\nfor multifile torrents.\n\nProtocol
  support\n----------------\n\nCurrently haskell-torrent supports the following BEPs
  (See the\n[BEP Process](http://www.bittorrent.org/beps/bep_0000.html) document for
  an\nexplanation of these)\n\n   - 004, 020,\n\nHaskell-torrent is not supporting
  these BEPs, but strives to do so one day:\n\n   - 003, 005, 006, 007, 010, 012,
  015, 009, 023, 018, 021, 022, 024, 026, 027,\n     028, 029, 030, 031, 032\n\nHaskell-torrent
  will probably never support these BEPs:\n\n   - 016, 017, 019\n\nDebugging\n---------\n\nFor
  debugging, jlouis tends to use the following:\n\n    make conf build test\n\nThis
  builds HaskellTorrent with the *Debug* flag set and also builds the software with
  profiling\nby default so it is easy to hunt down performance regressions. It also
  runs the internal test-suite\nfor various values.\n\nReading material for hacking
  HaskellTorrent:\n--------------------------------------------\n\n   - [Protocol
  specification - BEP0003](http://www.bittorrent.org/beps/bep_0003.html):\n     This
  is the original protocol specification, tracked into the BEP\n     process. It is
  worth reading because it explains the general overview\n     and the precision with
  which the original protocol was written down.\n\n   - [Bittorrent Enhancement Process
  - BEP0000](http://www.bittorrent.org/beps/bep_0000.html)\n     The BEP process is
  an official process for adding extensions on top of\n     the BitTorrent protocol.
  It allows implementors to mix and match the\n     extensions making sense for their
  client and it allows people to\n     discuss extensions publicly in a forum. It
  also provisions for the\n     deprecation of certain features in the long run as
  they prove to be of\n     less value.\n\n   - [wiki.theory.org](http://wiki.theory.org/Main_Page)\n
  \    An alternative description of the protocol. This description is in\n     general
  much more detailed than the BEP structure. It is worth a read\n     because it acts
  somewhat as a historic remark and a side channel. Note\n     that there are some
  commentary on these pages which can be disputed\n     quite a lot.\n\n   - [\"Concurrent
  Programming in ML\" - John. H. Reppy](http://www.amazon.com/Concurrent-Programming-ML-John-Reppy/dp/0521480892)\n
  \    This book describes the CML system which HaskellTorrent uses. The basic\n     idea
  of CML is that of higher order events. That is, events which can\n     be abstractly
  manipulated before being synchronized on. For instance,\n     CML events are a Functor
  instance, though the code currently does not\n     reflect that. This also provisions
  for fair selective receives\n     with dynamic choice of which events may fire.\n\n
  \  - [\"A Concurrent ML library in Concurrent Haskell\" - Avik Chaudhuri, ICFP 2009](http://www.cs.umd.edu/~avik/projects/cmllch/)\n
  \    The paper behind the CML library which HaskellTorrent uses. It\n     describes
  a way to transform the first-order MVar and ForkIO structures\n     of concurrent
  haskell into a higher order CML language by use of a\n     clever matchmaking algorithm.\n\n
  \  - [\"Supervisor Behaviour\"](http://erlang.org/doc/design_principles/sup_princ.html)\n
  \    From the Erlang documentation. How the Erlang Supervisor behaviour\n     works.
  The Supervisor and process structure of HaskellTorrent is\n     somewhat inspired
  by the Erlang ditto.\n\nSource code Hierarchy\n---------------------\n\n   - **Data**:
  Data structures.\n      - **Queue**: Functional queues. Standard variant with two
  lists.\n\n   - **Process**: Process definitions for the different processes comprising
  Haskell Torrent\n      - **ChokeMgr**: Manages choking and unchoking of peers, based
  upon the current speed of the peer\n        and its current state. Global for multiple
  torrents.\n      - **Console**: Simple console process. Only responds to 'quit'
  at the moment.\n      - **FS**: Process managing the file system.\n      - **Listen**:
  Not used at the moment. Step towards listening sockets.\n      - **Peer**: Several
  process definitions for handling peers. Two for sending, one for receiving\n        and
  one for controlling the peer and handle the state.\n      - **PeerMgr**: Management
  of a set of peers for a single torrent.\n      - **PieceMgr**: Keeps track of what
  pieces have been downloaded and what are missing. Also hands\n        out blocks
  for downloading to the peers.\n      - **Status**: Keeps track of uploaded/downloaded/left
  bytes for a single torrent. Could be globalized.\n      - **Timer**: Timer events.\n
  \     - **Tracker**: Communication with the tracker.\n\n   - **Protocol**: Modules
  for interacting with the various bittorrent protocols.\n      - **BCode**: The bittorrent
  BCode coding. Used by several protocols.\n      - **Wire**: The protocol used for
  communication between peers.\n\n   - **Top Level**:\n      - **Digest**: SHA1 digests
  as used in the bittorrent protocol.\n      - **FS**: Low level Filesystem code.
  Interacts with files.\n      - **HaskellTorrent**: Main entry point to the code.
  Sets up processes.\n      - **Logging**: Logging interface.\n      - **LoggingTypes**:
  Types and instances used by the Logging framework.\n      - **PeerTypes**: Types
  used by peers.\n      - **Process**: Code for Erlang-inspired processes.\n      -
  **RateCalc**: Rate calculations for a network socket. We use this to keep track
  of the\n        current speed of a peer in one direction.\n      - **Supervisor**:
  Erlang-inspired Supervisor processes.\n      - **Torrent**: Various helpers and
  types for Torrents.\n      - **Version.hs.in**: Generates **Version.hs** via the
  configure script.\n      - **Test.hs**: Code for test-framework\n      - **TestInstance.hs**:
  Various helper instances not present in the test framework by default\n\nKnown bugs\n----------\n\n
  \   \"PieceMgrP\"(Fatal):\tProcess exiting due to ex: user error (P/Blk (655,Block
  {blockOffset = 81920, blockSize = 16384}) is in the HaveBlocks set)\n    \"ConsoleP\"(Info):\tProcess
  Terminated by Supervisor\n\n# vim: filetype=none tw=76 expandtab\n"
description-type: markdown
hash: dcaf546e15e6350a374118faefa4c31bb96af322ac9405c97d69b72ea4d215f9
homepage: ''
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: jesper.louis.andersen@gmail.com
synopsis: A concurrent bittorrent client
test-bench-deps: {}
