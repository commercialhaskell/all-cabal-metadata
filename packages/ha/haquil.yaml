all-versions:
- 0.1.7.5
- 0.2.1.5
- 0.2.1.14
author: Brian W Bush <code@functionally.io>
basic-deps:
  MonadRandom: '>=0.5.1'
  base: <5
  bv: '>=0.4.1'
  data-binary-ieee754: '>=0.4.4'
  data-default: '>=0.7.1'
  hTensor: '>=0.9.1'
  random: '>=1.1'
  vector: '>=0.12.0'
changelog: |
  # Revision history for quil

  ## 0.2.1.14  -- 2018-03-04

  * execution of Quil programs
  * additional test cases

  ## 0.2.0.0  -- 2017-12-19

  * added types for Quil

  ## 0.1.7.5  -- 2017-12-19

  * added example usage

  ## 0.1.7.3  -- 2017-12-18

  * added measurement

  ## 0.1.5.0  -- 2017-12-17

  * tested two- and three-qubit gates

  ## 0.1.4.0  -- 2017-12-16

  * renamed product operators
  * tested one-qubit gates

  ## 0.1.3.0  -- 2017-12-16

  * added Quil gates

  ## 0.1.2.0  -- 2017-12-16

  * added qubit types and operations

  ## 0.1.0.0  -- 2017-12-15

  * skeleton
changelog-type: markdown
description: "quil: An instruction set for quantum computing\n==============================================\n\nThis
  Haskell library implements the Quil language for quantum computing, as specified
  in \"A Practical Quantum Instruction Set Architecture\" <<https://arxiv.org/abs/1608.03355/>>,
  using the indexing conventions in <<https://arxiv.org/abs/1711.02086/>>.\n\nPlease
  report issues at <<https://bwbush.atlassian.net/projects/HQUIL/issues/>>.\n\n\nExample\n-------\n\nThis
  example creates a wavefunction for the [Bell state](https://en.wikipedia.org/wiki/Bell_state)
  and then performs a measurement on its highest qubit.\n\n\t> import Control.Monad.Random
  (evalRandIO)\n\t> import Data.Qubit ((^^*), groundState, measure)\n\t> import Data.Qubit.Gate
  (h, cnot)\n\t\n\t> -- Construct the Bell state.\n\t> let bell = [h 0, cnot 0 1]
  ^^* groundState 2\n\t> bell\n\t0.7071067811865475|00> + 0.7071067811865475|11> @
  [1,0]\n\t\n\t> -- Measure the Bell wavefunction.\n\t> bell' <- evalRandIO $ measure
  [1] bell\n\t> bell'\n\t([(1,0)],1.0|00> @ [1,0])\n\t\n\t> -- Measure it again.\n\t>
  evalRandIO $ measure [1] bell'\n\t([(1,0)],1.0|00> @ [1,0])\n\t\n\t> -- Measure
  another Bell wavefunction.\n\t> evalRandIO $ measure [1] bell\n\t([(1,0)],1.0|00>
  @ [1,0])\n\t\n\t> -- Measure another Bell wavefunction.\n\t> evalRandIO $ measure
  [1] bell\n\t([(1,1)],1.0|11> @ [1,0])\n"
description-type: markdown
hash: fd8b2d9b9f399b833c3e7a5c62ce4cdbf9b16927dd39308fa45d5b6c209c16e5
homepage: https://bitbucket.org/functionally/haquil
latest: 0.2.1.14
license-name: MIT
maintainer: Brian W Bush <code@functionally.io>
synopsis: A Haskell implementation of the Quil instruction set for quantum computing.
test-bench-deps:
  MonadRandom: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  bv: '>=0'
  data-binary-ieee754: '>=0'
  data-default: '>=0'
  hTensor: '>=0'
  random: '>=0'
  template-haskell: '>=0'
  vector: '>=0'
