all-versions:
- 0.1.0.0
author: Przemysław Kamiński
basic-deps:
  async: '>=2.2 && <2.3'
  base: ^>=4.17.2.0
  containers: '>=0.6 && <0.8'
  stm: '>=2.5 && <2.6'
  time: '>=1.14 && <2'
changelog: |
  # Revision history for haskell-trottle

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |-
  A [throttle](https://en.wikipedia.org/wiki/Rate_limiting)
  implementation using
  [Control.Concurrent.STM.TChan](https://hackage.haskell.org/package/stm-2.5.3.1/docs/Control-Concurrent-STM-TChan.html).

  == Rationale

  Current Haskell throttle implementations
  (e.g. [Data.Conduit.Throttle](https://hackage.haskell.org/package/conduit-throttle-0.3.1.0/docs/Data-Conduit-Throttle.html)
  or [io-throttle](https://hackage.haskell.org/package/io-throttle))
  work by just __slowing down__ incoming messages. However, sometimes we
  don't care about delivering __all__ messages, but just want to limit
  their rate. Hence this module is born.

  The main function is in
  [Control.Concurrent.Throttle](./src/Control/Concurrent/Throttle.hs):

    throttle :: (Ord id, Eq id, Show id) => Int -> TChan.TChan (id, a) -> (a -> IO ()) -> IO ()

  It takes as arguments:

  * resolution (in milliseconds)
  * a ``TChan`` where `(id, a)` tuples are sent
  * ``action`` which, for given ``a`` calls some ``IO`` action

  In the above we have 2 types:

  * ``a`` represents the incoming message which will be called with the supplied `action`
  * ``id`` represents some identifier associated with the message. By
    using this ``id`` we can perform grouping of messages and throttle
    them accordingly.

  The ``throttle`` function itself should be spawned in a separate
  thread. It then awaits for incoming messages on the given `TChan`.

  See [test directory](./test) for a sample usage.

  == Design

  Currently, the ``throttle`` function spawns a ``mapCleaner`` thread
  which, periodically, checks the internal ``TVar`` value for values to
  clean up and values to hold before the given delay happens.
description-type: haddock
hash: dd6e9141398ed450e4b5cfe3028a902722392409746a2bc90d554f4e9458cc69
homepage: ''
latest: 0.1.0.0
license-name: AGPL-3.0-or-later
maintainer: pk@intrepidus.pl
synopsis: A simple throttling library, which drops messages from same group.
test-bench-deps:
  async: '>=2.2 && <2.3'
  base: ^>=4.17.2.0
  containers: '>=0.6 && <0.8'
  haskell-trottle: '>=0'
  stm: '>=2.5 && <2.6'
  tasty: '>=1.5 && <1.6'
  tasty-hunit: '>=0.10 && <0.11'
  time: '>=1.14 && <2'
