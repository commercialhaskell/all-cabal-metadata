all-versions:
- 2009.4.20
- 2009.4.21
- 2009.4.22
- 2009.4.23
- 2009.4.25
- 2009.4.26
- 2009.4.27
- 2009.4.28
- 2009.4.29
- 2009.4.30
- 2009.4.51
- 2009.4.52
- 2009.5.19
- 2009.7.15
- 2009.10.30
- 2012.2.6
author: Wang, Jinjing
basic-deps:
  base: '>=3 && <5'
  bytestring: '>=0'
  data-default: '>=0.2'
changelog: |
  2009.10.30
  ----------

  ### Feature

  * add remoteHost field

  2009.7.15
  ---------

  ### Feature

  * new hackCache header using strict bytestrings

  2009.5.19
  ---------

  ### Feature

  * Use lazy bytestring for performance and hinting utf-8 encoding
  * remove some unused fields
  * use haskell naming convention

  2009.4.52
  ---------

  ### Feature

  * Remove useless type alias

  ### Fix

  * Default error stream should take utf8 string


  2009.4.51
  ---------

  ### Feature

  * add documentation

  2009.4.50
  ---------

  ### Feature

  * add version info in default

  2009.4.30
  ----------

  ### Feature

  * seperate handler from core module
  * seperate contrib from Hack.hs
  * now Hack.hs is only an interface file, where everything links to. This allows me to soft link handler in Hack.Contrib and Hack.Handler in development mode :)

  2009.4.29
  -----------

  ### Fix

  * -Wall clean


  2009.4.28
  -----------

  ### Fix

  * File return status code 200 on success

  2009.4.27
  ---------

  ### Fix

  * hyena handler show real message ( Safari won't work without this fix )

  2009.4.26
  ---------

  ### Fix

  * add hyena handler

  2009.4.25
  ---------

  ### Featuer

  * more middleware
  * hyena handler for simple use server

  2009.4.23
  ---------

  ### Feature

  * more middleware
      * ContentSize
      * SimpleAccessLogger

  * request helper

  2009.4.22
  ---------

  ### Feature

  * more middleware
    * ContentType
    * RawRouter
    * SimpleRouter

  2009.4.21
  ------------

  ### Feature

  * demo SimpleRoute middleware

  ### Fix

  * env for kibro adapter
  * homepage in hack.cabal

  2009.4.20
  -----------

  ### Feature

  * raw specification
  * shiny kibro hack handler
changelog-type: markdown
description: "Hack: a Haskell Webserver Interface\n========================================\n\nHack
  is a port of the Ruby's [Rack](http://rack.rubyforge.org/) webserver interface,
  which itself inspired by Python's [WSGI](http://wsgi.org/wsgi).\n\nVersion\n-------\n\n>
  2009.10.30\n\nIntroduction\n------------\n\n### Idea\n\nSeparation of concerns:\n\n*
  hack: interface spec\n* hack-middleware: building blocks\n* hack-handler: server
  backends\n\n### Design\n\n    type Application = Env -> IO Response\n\n### Demo\n\n
  \   import Hack\n    import Hack.Handler.Happstack\n    import Data.ByteString.Lazy.Char8
  (pack)\n\n    app :: Application\n    app = \\env -> return $\n      Response 200
  [ (\"Content-Type\", \"text/plain\") ] (pack \"Hello World\")\n\n    main = run
  app\n\nSpec\n----\n\n### The Environment\n\n* __requestMethod__: The HTTP request
  method, e.g. `GET`, `POST`.\n* __scriptName__: The initial portion of the request
  URL‘s “path” that corresponds to the application object, so that the application
  knows its virtual “location”. This may be an empty string, if the application corresponds
  to the “root” of the server.\n* __pathInfo__: The remainder of the request URL‘s
  “path”, designating the virtual “location” of the request‘s target within the application.
  This may be an empty string, if the request URL targets the application root and
  does not have a trailing slash. This value may be percent-encoded when I originating
  from a URL.\n* __queryString__: The portion of the request URL that follows the
  ?, if any. May be empty, but is always required!\n* __serverName, serverPort__:
  When combined with scriptName and pathInfo, these variables can be used to complete
  the URL. Note, however, that `Host` in http field, if present, should be used in
  preference to serverName for reconstructing the request URL. serverName and serverPort
  can never be empty, and so are always required.\n* __remoteHost__: The remote host
  of this request\n* __http__: Variables corresponding to the client-supplied HTTP
  request headers (e.g. \"Accept\"). The presence or absence of these variables should
  correspond with the presence or absence of the appropriate HTTP header in the request.
  \n* __hackVersion__: The list of `Int`, representing this version of Hack\n* __hackUrlScheme__:
  `HTTP` or `HTTPS`, depending on the request URL. \n* __hackInput__: The body of
  the request.\n* __hackErrors__: The error stream.\n* __hackHeaders__: None http
  headers, intended to be used by handlers and middleware.\n* __hackCache__: High
  performance cache, could be used by handlers and middleware.\n\n\n### The Response\n\n*
  __status__: This is an HTTP status. It must be greater than or equal to 100. \n*
  __headers__: The header must not contain a Status key, contain keys with : or newlines
  in their name, contain keys names that end in - or _, but only contain keys that
  consist of letters, digits, _ or - and start with a letter. The values of the header
  must be Strings, consisting of lines (for multiple header values) separated by “\\n”.
  The lines must not contain characters below 037.\n* __body__: The body of the response.\n\n###
  Properties\n\n* The __scriptName__, if non-empty, must start with /\n* The __pathInfo__,
  if non-empty, must start with /\n* One of __scriptName__ or __pathInfo__ must be
  set. __pathInfo__ should be / if __scriptName__ is empty. __scriptName__ never should
  be /, but instead be empty.\n\n1 minute tutorial\n-----------------\n\n### update
  cabal\n\n    cabal update\n    \n### install hack\n\n    cabal install hack\n\n###
  pick a backend\n\n    cabal install hack-handler-happstack\n\n### Create a Hack
  app\n\nput the following code in `src/Main.hs`\n\n    import Hack\n    import Hack.Handler.Happstack\n
  \   import Data.ByteString.Lazy.Char8 (pack)\n\n    app :: Application\n    app
  = \\env -> return $ Response \n        { status  = 200\n        , headers = [ (\"Content-Type\",
  \"text/plain\") ]\n        , body    = pack \"Hello World\"\n        }\n\n    main
  = run app\n\n\n### run\n\n    ghc --make -O2 Main.hs\n    ./Main\n\nIt should be
  running on [http://127.0.0.1:3000](http://127.0.0.1:3000) now.\n\nMiddleware\n-----------\n\n###
  demo usage of middleware\n\ninstall hack-contrib:\n\n    cabal install happy\n    cabal
  install hack-contrib\n\nput the following in `Main.hs`. This code uses the `URLMap`
  middleware to route both `/hello` and `/there` to the `hello` application.\n\n    import
  Hack\n    import Hack.Handler.Happstack\n    import Hack.Contrib.Utils\n    import
  Hack.Contrib.Middleware.URLMap\n    import Data.ByteString.Lazy.Char8 (pack)\n    import
  Data.Default\n    \n    hello :: Application\n    hello = \\env -> return $ def
  {body = pack $ show env, status = 200}\n\n    app :: Application\n    app = url_map
  [(\"/hello\", hello), (\"/there\", hello)] empty_app\n\n    main = run app\n\n###
  create a middleware\n\ninside Hack.hs:\n\n    type Middleware = Application -> Application\n\nsince
  Haskell has curry, middleware api can be of type\n\n    Anything -> Application
  -> Application\n\njust pass an applied middleware into a chain.\n\nfinally the source
  code of `Config.hs`:\n\n    module Hack.Contrib.Middleware.Config (config) where\n\n
  \   import Hack\n\n    config :: (Env -> Env) -> Middleware\n    config alter app
  = \\env -> app (alter env)\n\n\n### Use the middleware stack\n\nFrom `Hack.Contrib.Utils`:\n\n
  \   -- usage: use [content_type, cache] app\n    use :: [Middleware] -> Middleware\n
  \   use = reduce (<<<)\n\nHandlers\n--------\n\nOnce an application is written using
  Hack, it should work on any web server that provides a Hack handler.\n\nA handler
  should expose at least one function of type:\n\n    run :: Application -> IO ()\n\nUpgrade\n-------\n\nWith
  every new release, any library links to hack should be recompiled against the new
  version, usually it's simply as:\n\n    cabal install linked_lib --reinstall\n\nLinks\n-----\n\n###
  [Discuss](http://groups.google.com/group/hack-discuss)\n\n### [Wiki](http://wiki.github.com/nfjinjing/hack)\n\n"
description-type: markdown
hash: ad054a52019d59eb2eb6d56e698a16de2aa62ff1b282520eaacf05c4ca5bf866
homepage: http://github.com/nfjinjing/hack/tree/master
latest: 2012.2.6
license-name: BSD-3-Clause
maintainer: Wang, Jinjing <e .nfjinjing@gmail.com>
synopsis: a Haskell Webserver Interface
test-bench-deps: {}
