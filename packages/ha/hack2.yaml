all-versions:
- 2011.6.10
- 2011.6.19
- 2011.6.20
- 2012.1.19
- 2014.11.17
author: Jinjing Wang
basic-deps:
  base: '>=3 && <99'
  bytestring: '>=0'
  data-default: '>=0.2'
changelog: |-
  2011.6.10
  ---------

  * init
changelog-type: markdown
description: "Hack2: a Haskell Webserver Interface (V2)\n========================================\n\nHack2
  is a port of Ruby's [Rack](http://rack.rubyforge.org/) webserver interface.\n\nIntroduction\n------------\n\n###
  Idea\n\nSeparation of concerns:\n\n* hack2: interface spec\n* hack2-middleware:
  building blocks\n* hack2-handler: server backends\n\n### Design\n\n    type Application
  = Env -> IO Response\n\n### Demo\n\n    {-# LANGUAGE OverloadedStrings #-}\n\n    import
  Hack2\n    import Hack2.Contrib.Response (set_body_bytestring)\n    import Hack2.Handler.SnapServer\n\n
  \   app :: Application\n    app = \\env -> \n      return $ \n        Response \n
  \         200 [ (\"Content-Type\", \"text/plain\") ] \"Hello World\"\n\n    main
  = run app\n    \n\nSpec\n----\n\n### The Environment\n\n* __requestMethod__: The
  HTTP request method, e.g. `GET`, `POST`.\n* __scriptName__: The initial portion
  of the request URL‘s “path” that corresponds to the application object, so that
  the application knows its virtual “location”. This may be an empty string, if the
  application corresponds to the “root” of the server.\n* __pathInfo__: The remainder
  of the request URL‘s “path”, designating the virtual “location” of the request‘s
  target within the application. This may be an empty string, if the request URL targets
  the application root and does not have a trailing slash. This value may be percent-encoded
  when I originating from a URL.\n* __queryString__: The portion of the request URL
  that follows the ?, if any. May be empty.\n* __serverName, serverPort__: When combined
  with scriptName and pathInfo, these variables can be used to complete the URL. Note,
  however, that `Host` in http field, if present, should be used in preference to
  serverName for reconstructing the request URL. serverName and serverPort can never
  be empty, and so are always required.\n* __httpHeaders__: Variables corresponding
  to the client-supplied HTTP request headers (e.g. \"Accept\"). The presence or absence
  of these variables should correspond with the presence or absence of the appropriate
  HTTP header in the request. \n* __hackVersion__: The list of `Int`, representing
  this version of Hack\n* __hackUrlScheme__: `HTTP` or `HTTPS`, depending on the request
  URL. \n* __hackInput__: The body of the request, enumerator style.\n* __hackErrors__:
  The error stream.\n* __hackHeaders__: None standard http headers.\n\n\n### The Response\n\n*
  __status__: This is an HTTP status. It must be greater than or equal to 100. \n*
  __headers__: The header must not contain a Status key, contain keys with : or newlines
  in their name, contain keys names that end in - or _, but only contain keys that
  consist of letters, digits, _ or - and start with a letter. The values of the header
  must be Strings, consisting of lines (for multiple header values) separated by “\\n”.
  The lines must not contain characters below 037.\n* __body__: The body of the response,
  enumerator style.\n\n### Properties\n\n* The __scriptName__, if non-empty, must
  start with /\n* The __pathInfo__, if non-empty, must start with /\n* One of __scriptName__
  or __pathInfo__ must be set. __pathInfo__ should be / if __scriptName__ is empty.
  __scriptName__ never should be /, but instead be empty.\n\n\n1 minute tutorial\n-----------------\n\n###
  update cabal\n\n    cabal update\n    \n### install hack\n\n    cabal install hack2\n\n###
  install some hack helpers\n  \n    cabal install hack2-contrib\n\n### pick a backend\n\n
  \   cabal install hack2-handler-snap-server\n\n### Create a Hack app\n\nput the
  following code in `Main.hs`\n\n    {-# LANGUAGE OverloadedStrings #-}\n\n    import
  Hack2\n    import Hack2.Contrib.Response (set_body_bytestring)\n    import Hack2.Handler.SnapServer\n
  \   import Data.Default (def)\n\n    app :: Application\n    app = \\env -> \n      return
  $ \n        set_body_bytestring \"Hello World 2\" $ \n          def { headers =
  [ (\"Content-Type\", \"text/plain\") ] }\n\n    main = run app\n\n\n### run\n\n
  \   runghc Main.hs\n\nIt should be running on [http://127.0.0.1:3000](http://127.0.0.1:3000)
  now.\n\nMiddleware\n-----------\n\n### demo usage of middleware\n\nput the following
  in `Main.hs`. This code uses the `URLMap` middleware to route both `/hello` and
  `/there` to the `say` application.\n\n    {-# LANGUAGE OverloadedStrings #-}\n\n
  \   import Hack2\n    import Hack2.Contrib.Response (set_body_bytestring)\n    import
  Hack2.Handler.SnapServer\n    import Data.Default (def)\n\n    import Data.ByteString.Char8
  (pack)\n    import Hack2.Contrib.Utils (empty_app)\n    import Hack2.Contrib.Middleware.URLMap\n\n\n
  \   say :: Application\n    say = \\env -> return $ set_body_bytestring (pack $
  show env) def\n\n    app :: Application\n    app = url_map [(\"/hello\", say), (\"/there\",
  say)] empty_app\n\n    main = run app\n\n### create a middleware\n\ninside Hack2.hs:\n\n
  \   type Middleware = Application -> Application\n\nsince Haskell has curry, middleware
  api can be of type\n\n    Anything -> Application -> Application\n\njust pass an
  applied middleware into a chain.\n\nfinally the source code of `Config.hs`:\n\n
  \   module Hack2.Contrib.Middleware.Config (config) where\n\n    import Hack2\n\n
  \   config :: (Env -> Env) -> Middleware\n    config alter app = \\env -> app (alter
  env)\n\n\n### Use the middleware stack\n\nFrom `Hack2.Contrib.Utils`:\n\n    --
  usage: use [content_type, cache] app\n    use :: [Middleware] -> Middleware\n    use
  = reduce (<<<)\n\nHandlers\n--------\n\nOnce an application is written using Hack2,
  it should work on any web server that provides a Hack2 handler.\n\nA handler should
  expose at least one function of type:\n\n    run :: Application -> IO ()\n\nUpgrade\n-------\n\nWith
  every new release, any library links to Hack2 should be recompiled against the new
  version, usually as simple as:\n\n    cabal install linked_lib --reinstall\n\nLinks\n-----\n\n###
  [Discuss:Web programming with Haskell](http://www.haskell.org/mailman/listinfo/web-devel)\n\n\n"
description-type: markdown
hash: 6f5b7856e824db56b49c6385b272d7478473ef7431f7deb02ba28f8c1caac976
homepage: https://github.com/nfjinjing/hack2
latest: 2014.11.17
license-name: BSD-3-Clause
maintainer: Jinjing Wang <nfjinjing@gmail.com>
synopsis: a Haskell Webserver Interface (V2)
test-bench-deps: {}
