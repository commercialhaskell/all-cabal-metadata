all-versions:
- 0.1.0.0
- 0.1.0.1
author: Sebastian Galkin <paraseba@gmail.com>
basic-deps:
  base: '>=4.7 && <4.8'
  bytestring: ==0.10.4.0
  haskell-brainfuck: '>=0'
  mtl: ==2.1.3.1
  parsec: ==3.1.5
changelog: ''
changelog-type: ''
description: |
  # haskell-brainfuck

  Interpreter for the
  [brainfuck programming language](http://www.muppetlabs.com/~breadbox/bf/)

  [![Build Status](https://api.travis-ci.org/paraseba/haskell-brainfuck.svg?branch=master)](https://travis-ci.org/paraseba/haskell-brainfuck)

  haskel-brainfuck is distributed as a library, but it also includes an executable
  to run brainfuck programs. You can find haskell-brainfuck in
  [Hackage](https://hackage.haskell.org/package/haskell-brainfuck-0.1.0.0)

  ## Usage
  ### Library
  ```haskell
  import HaskBF.Eval
  import qualified Data.ByteString.Lazy as BS
  import Control.Monad.State

  main = do
    -- The following will evaluate the file using stdin and stdout for I/O.
    -- Evaluation results in an EvalResult

    file <- BS.readFile "/path/to/file.bf"
    (EvalSuccess _) <- evalBS defaultIOMachine file
    print "ok"


    -- The following will evaluate the file using the State monad and input
    -- provided by input

    let input  = []
        output = []
        result = execState (evalStr simulatorMachine "+.>-.") (SimState input output)
    print $ simStateOutput result == [1, -1]
  ```

  ### Executable
  ```bash
  brainfuck fib.bf
  ```

  ## Tests
  You can run the test suite with
  ```bash
  cabal test
  ```

  ## Documentation
  http://paraseba.github.io/haskell-brainfuck/
description-type: markdown
hash: 531bc702b7a4216cacb98165e5aa8fa13ba76af85b1b2ef7e676ed20fbe1c724
homepage: ''
latest: 0.1.0.1
license-name: MIT
maintainer: Sebastian Galkin <paraseba@gmail.com>
synopsis: BrainFuck interpreter
test-bench-deps:
  QuickCheck: ==2.7.5
  base: '>=4.7 && <4.8'
  bytestring: ==0.10.4.0
  haskell-brainfuck: '>=0'
  mtl: ==2.1.3.1
  tasty: ==0.8.1.3
  tasty-quickcheck: ==0.8.1
  tasty-th: ==0.1.2
