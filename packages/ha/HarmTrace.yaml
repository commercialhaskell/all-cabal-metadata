all-versions:
- '0.1'
- 0.1.1
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '1.0'
- '2.0'
- '2.1'
- 2.2.0
- 2.2.1
author: W. Bas de Haas and Jose Pedro Magalhaes
basic-deps:
  Diff: '>=0.1 && <0.2'
  HarmTrace-Base: <1.2
  ListLike: '>=3.0.1'
  array: '>=0'
  base: '>=4.2 && <5'
  binary: '>=0.6.4'
  cmdargs: '>=0.10.1'
  deepseq: '>=0'
  directory: '>=0'
  filepath: '>=0'
  ghc-prim: '>=0.2'
  instant-generics: '>=0.6'
  matrix: '>=0.3.4'
  mtl: '>=0'
  parallel: '>=3'
  process: '>=1.0'
  sox: '>=0.2.2.2'
  template-haskell: '>=2.4 && <2.11'
  uu-parsinglib: '>=2.7.4'
  vector: '>=0.7'
changelog: "# CHANGELOG\r\n\r\n2.2.1 \r\n\r\n * Made HarmTrace compile again using
  Stack. \r\n * updated README.md"
changelog-type: markdown
description: "# Introduction\r\n\r\nHarmTrace (Harmony Analysis and Retrieval of Music
  with Type-level \r\nRepresentations of Abstract Chords Entities) is a system for
  automatic harmony \r\nanalysis of music. It takes a sequence of chords as input
  and produces a harmony \r\nanalysis, which can be visualised as a tree. \r\n\r\n\r\nMusic
  theory has been essential in composing and performing music for centuries. \r\nWithin
  Western tonal music, from the early Baroque on to modern-day jazz and pop \r\nmusic,
  the function of chords within a chord sequence can be explained by \r\nharmony theory.
  Although Western tonal harmony theory is a thoroughly studied \r\narea, formalising
  this theory is a hard problem. \r\n\r\n\r\nWith HarmTrace we have developed a formalisation
  of the rules of tonal harmony \r\nas a Haskell (generalized) algebraic datatype.
  Given a sequence of chord labels, \r\nthe harmonic function of a chord in its tonal
  context is automatically derived. \r\nFor this, we use several advanced functional
  programming techniques, such as \r\ntype-level computations, datatype-generic programming,
  and error-correcting \r\nparsers. Our functional model of harmony offers various
  benefits: it can be used \r\nto define harmonic similarity measures and facilitate
  music retrieval, or it can \r\nhelp musicologists in batch-analysing large corpora
  of digitised scores, for \r\ninstance. \r\n\r\n\r\nHarmTrace is covered in depth
  in the following papers: \r\n\r\nde Haas, W. B., et al. \"Automatic Functional Harmonic
  Analysis.\" \r\n_[Computer Music Journal](http://www.mitpressjournals.org/doi/10.1162/COMJ_a_00209)_
  \r\n37.4 (2013): 37-53. \r\n([PDF](http://www.mitpressjournals.org/doi/pdf/10.1162/COMJ_a_00209))\r\n\r\nMagalhaes,
  J. P., & de Haas, W. B. (2011, September). Functional modelling of\r\nmusical harmony:
  an experience report. In \r\n_[ACM SIGPLAN Notices](http://dl.acm.org/citation.cfm?id=2034797&dl=ACM&coll=DL&CFID=792765209&CFTOKEN=90344854)_
  \r\n(Vol. 46, No. 9, pp. 156-162). ACM. \r\n([PDF](http://www.cs.uu.nl/groups/MG/multimedia/publications/art/icfp2011.pdf))\r\n\r\n#
  Installation\r\n\r\nBecause the main authors of HarmTrace are are no longer affiliated
  with \r\nacademic institutions and HarmTrace is only modestly maintained, installing
  \r\nHarmtrace can be a challenge. However, [Stack](\r\nhttps://docs.haskellstack.org/en/stable/README/)
  helps considerably. One of \r\nthe difficulties is that HarmTrace currently only
  build on a relatively old \r\nversion of GHC, namely 7.10. Provided that you have
  intalled a Haskell system \r\nand pulled this repository, Stack should take care
  of it:\r\n\r\n`stack init --solver --install-ghc`\r\n\r\n`stack build`\r\n\r\n#
  Running HarmTrace\r\n\r\nYou can use Stack to run HarmTrace:\r\n\r\n```\r\n>>> stack
  exec harmtrace\r\nharmtrace [COMMAND] ... [OPTIONS]\r\n  Harmonic Analysis and Retrieval
  of Music\r\n\r\nCommands:\r\n  parse      Parse files into harmonic analysis trees\r\n
  \ match      Harmonic similarity matching\r\n  recognise  Recognise chords from
  audio files\r\n\r\n  -r=file            File to read flags from\r\n  -?      --help
  \    Display help message\r\n  -V      --version  Print version information\r\n```\r\n\r\nAll
  modes have separate help pages:\r\n```\r\n>>> stack exec harmtrace parse -- --help\r\nparse
  [OPTIONS]\r\n  Parse files into harmonic analysis trees\r\n\r\n  -g      --grammar=string
  \   Grammar to use (jazz|pop)\r\n  -c      --chords=string     Input chord sequence
  to parse\r\n  -i      --file=filepath     Input file to parse\r\n  -d      --dir=filepath
  \     Input directory to parse all files within\r\n  -o      --out=filepath      Output
  binary file to write parse results to\r\n  -k      --key=filepath      Ground-truth
  key annotation file\r\n  -x      --key-dir=filepath  Ground-truth key annotation
  directory\r\n  -p      --print             Output a .png of the parse tree\r\n  -s
  \     --print-insertions  Show inserted nodes\r\n  -r=file                     File
  to read flags from\r\n  -?      --help              Display help message\r\n  -V
  \     --version           Print version information\r\n```\r\n\r\nYou can parse
  a chord sequence with `--chords` the chord should be in [Harte \r\nsyntax](http://ismir2005.ismir.net/proceedings/1080.pdf)
  suffixed with a \r\n`;INT` indicating the duration of the chord and separated by
  spaces. The \r\nfirst 'chord' represents a key signature. For instance:\r\n```\r\n>>>
  stack exec harmtrace parse -- --grammar=jazz --chords=\"C:maj D:min;1 G:7;2 C:maj;1\"\r\nparsed
  3 chords into 1 analysis tree(s)\r\n[Piece[PD[D_1_1[S_1par_1[IIm_1[D:min]]][D_2_1[V7_2[G:7]]]]][PT[T_1_1[I_1[C:maj]]]]]\r\n```\r\nIf
  you add `--print`, HarmTrace will render a .PNG image for you using \r\n[http://ironcreek.net/phpsyntaxtree/](http://ironcreek.net/phpsyntaxtree/)\r\n"
description-type: markdown
hash: 1907ca291de726944c613b6981b7c2812128f73dfa39a58ee2f0e46097813858
homepage: https://github.com/haas/harmtrace
latest: 2.2.1
license-name: GPL-3.0-only
maintainer: haskelldevelopers@chordify.net
synopsis: Harmony Analysis and Retrieval of Music
test-bench-deps: {}
