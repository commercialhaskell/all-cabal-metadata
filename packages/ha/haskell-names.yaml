all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- 0.2.1
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
- 0.3.2.4
- 0.3.2.5
- 0.3.2.6
- 0.3.2.7
- 0.3.2.8
- 0.3.3
- 0.3.3.1
- 0.3.3.2
- '0.4'
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.6.0
- 0.7.0
- 0.8.0
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.4
- 0.9.5
- 0.9.6
- 0.9.7
- 0.9.8
- 0.9.9
author: Philipp Schuster, Roman Cheplyaka, Lennart Augustsson
basic-deps:
  aeson: '>=0.8.0.2 && <1.6'
  base: '>=4 && <5'
  bytestring: '>=0.10.4.0 && <0.11'
  containers: '>=0.2 && <0.7'
  data-lens-light: '>=0.1.2.1 && <0.2'
  filepath: '>=1.1 && <1.5'
  haskell-src-exts: '>=1.21 && <1.24'
  mtl: '>=2.2.1 && <2.3'
  transformers: '>=0.4.2.0 && <0.6'
  traverse-with-class: '>=1.0.0.0 && <1.1'
  uniplate: '>=1.5.1 && <1.7'
changelog: "Changes\r\n=======\r\n\r\nVersion 0.9.1\r\n-------------\r\n\r\n* Use
  haskell-src-exts 1.20\r\n\r\nVersion 0.9.0\r\n-------------\r\n\r\n* Preliminary
  support for pattern synonyms\r\n* Relax bounds on aeson and haskell-src-exts\r\n*
  Fix bug with instance declarations where class is qualified\r\n* Fix bugs with record
  wildcards and record puns\r\n* Fix bug where we'd produce duplicate symbols in environment\r\n*
  Use traverse-with-class-1.0.0.0\r\n* haskell-names now requires GHC 8.0 or later\r\n\r\nVersion
  0.8.0\r\n------------\r\n\r\n* Relax bounds on aeson\r\n* Relax bounds on transformers\r\n*
  Bugfixes\r\n* Use haskell-src-exts 1.18\r\n\r\nVersion 0.7.0\r\n-------------\r\n\r\n*
  Improve annotation performance\r\n\r\nVersion 0.6.0\r\n-------------\r\n\r\n* Use
  haskell-src-exts 1.17\r\n* Remove dependency on haskell-packages\r\n\r\nVersion
  0.5.3\r\n------------\r\n\r\n* Compatibility with GHC 7.8.4\r\n\r\nVersion 0.5.2\r\n-------------\r\n\r\n*
  Handle more syntactic constructs\r\n\r\nVersion 0.5.1\r\n-------------\r\n\r\n*
  Resolve associated types\r\n* Resolve fixity declarations\r\n* Resolve classes and
  instances\r\n* Various bugfixes\r\n\r\nVersion 0.5.0\r\n-------------\r\n\r\n* Unify
  type-level and value-level symbols\r\n* Remove fixities from symbol type\r\n* Properly
  annotate classes and instances\r\n* Inline original name into symbol type\r\n* Remove
  original package from symbol type\r\n* Annotate symbol references with the way they
  are referenced\r\n\r\nVersion 0.4.1\r\n-------------\r\n\r\n* Export types defined
  by top level data family declarations\r\n* Update to haskell-src-exts 1.16\r\n\r\nVersion
  0.4\r\n-----------\r\n\r\nReplace `data-lens` with `data-lens-light`\r\n\r\nVersion
  0.3.3.2\r\n---------------\r\n\r\nRemove the upper version bound on Cabal\r\n\r\nVersion
  0.3.3.1\r\n---------------\r\n\r\nUpdate to work with haskell-src-exts 1.15\r\n\r\nVersion
  0.3.3\r\n-------------\r\n\r\n* Expose `Language.Haskell.Names.ModuleSymbols.getTopDecls`\r\n*
  Define a `Monoid` instance for `LocalSymbolTable.Table`\r\n* Support for parallel
  list comprehensions\r\n\r\nVersion 0.3.2.8\r\n---------------\r\n\r\nIntroduce a
  lower dependency bound on `tasty-golden` in the test suite\r\n\r\nVersion 0.3.2.7\r\n---------------\r\n\r\n`type-eq`
  is fixed; depend on the new version\r\n\r\nVersion 0.3.2.6\r\n---------------\r\n\r\nWork
  around a regression in `type-eq`\r\n\r\nVersion 0.3.2.5\r\n---------------\r\n\r\nRelax
  `pretty-show` version bound\r\n\r\nVersion 0.3.2.4\r\n---------------\r\n\r\nMake
  haskell-names build GHC 7.8\r\n\r\nVersion 0.3.2.3\r\n---------------\r\n\r\nInclude
  interfaces for `array`\r\n\r\nVersion 0.3.2.2\r\n---------------\r\n\r\nAllow `pretty-show-1.6.2`
  in the test suite\r\n\r\nVersion 0.3.2.1\r\n---------------\r\n\r\nUse `pretty-show-1.6.1`
  in the test suite\r\n\r\nVersion 0.3.2\r\n-------------\r\n\r\n* Export `getDeclHead`
  from `Language.Haskell.Names.SyntaxUtils`\r\n* Annotate `QName`s in export lists\r\n*
  Update the bundled library interfaces (they were broken in earlier 0.3.*\r\n  versions
  because of the interface format change)\r\n\r\nVersion 0.3.1\r\n-------------\r\n\r\n*
  Documentation improvements\r\n* Add `rfoldMap`\r\n* Relax Cabal dependency constraint
  to include Cabal-1.14\r\n\r\nVersion 0.3\r\n-----------\r\n\r\nThis release brings
  support for record puns and wildcards.\r\n\r\n### Interface file format changes\r\n\r\nFor
  field selectors, the new field `constructors` is added. It contains a list\r\nof
  constructors that contain that field.\r\n\r\n### API changes\r\n\r\n* The `sv_constructors`
  field is added to `SymSelector`\r\n* Add `Language.Haskell.Names.SyntaxUtils.stringToName`\r\n*
  The class `GetBound` is moved to a new module,\r\n  `Language.Haskell.Names.GetBound`.
  Its method, `getBound`, now has a new\r\n  argument, the global symbol table\r\n*
  `NameInfo` got two more constructors to annotate wildcards,\r\n  `RecPatWildcard`
  and `RecExpWildcard`\r\n* `Scope` now has a new field of type `WcNames`, which can
  be accessed\r\n  through the `wcNames` lens. This is needed for record wildcards\r\n
  \ resolution.\r\n* Add field selectors to `GName`\r\n* Don't export `GName` and
  `OrigName` from `GlobalSymbolTable`\r\n\r\n\r\nVersion 0.2.1\r\n-------------\r\n\r\n*
  Fix a bug where global symbols were annotated as local\r\n* Make the code compile
  with aeson-0.6.2.0\r\n\r\nVersion 0.2\r\n-------------\r\n\r\n* Proper annotations
  for types and binding sites. `NameContext` now has a few\r\n  new constructors.\r\n*
  Properly support n+k patterns\r\n* Expose the `Alg` datatype for open name resolution\r\n*
  Expose the `HasOrigName` class\r\n\r\nVersion 0.1.2\r\n-------------\r\n\r\nRestore
  compatibility with Cabal 1.16\r\n\r\nVersion 0.1.1\r\n-------------\r\n\r\nDummy
  release to force rebuild on hackage (now that haskell-src-exts 1.14 is\r\nreleased).\r\n"
changelog-type: markdown
description: "haskell-names [![Build Status](https://travis-ci.org/phischu/haskell-names.svg?branch=master)](https://travis-ci.org/phischu/haskell-names)\r\n=============\r\n\r\nhaskell-names
  does name and module resolution for haskell-src-exts AST.\r\n\r\nNamely, it can
  do the following:\r\n\r\n* For a list of modules, compute the list of symbols each
  module exports.\r\n  This is called `resolve`.\r\n* For each name in a module, figure
  out what it refers to â€” whether it's bound\r\n  locally (say, by a `where` clause)
  or globally (and then give its origin).\r\n  This is called `annotate`.\r\n\r\nInstallation\r\n------------\r\n\r\nIf
  you're building a development version, then you might also need to install\r\na
  development version of [haskell-src-exts][hse].\r\n\r\n[hse]: https://github.com/haskell-suite/haskell-src-exts\r\n\r\n\r\nEnvironments\r\n-----------------\r\n\r\nAn
  environment is a map from module name to list of symbols the module exports.\r\nSymbols
  are for example types, classes, functions etc. We persist these lists in\r\na JSON
  format.\r\nFor example, here are a couple of entries from `Prelude.names`:\r\n\r\n```
  json\r\n[\r\n  {\r\n    \"name\": \"map\",\r\n    \"entity\": \"value\",\r\n    \"module\":
  \"GHC.Base\"\r\n  },\r\n  {\r\n    \"name\": \"IO\",\r\n    \"entity\": \"newtype\",\r\n
  \   \"module\": \"GHC.Types\"\r\n  },\r\n  ...\r\n]\r\n```\r\n\r\nAs you see, each
  entity is annotated with the module where it was\r\noriginally defined. Additionally,
  class methods, field selectors, and data\r\nconstructors are annotated with the
  class or type they belong to.\r\n\r\n`haskell-names` provides functions `readSymbols`
  and `writeSymbols`\r\nto read and write interface files.\r\n\r\nName resolution\r\n---------------\r\n\r\nThe
  `annotate` function annotates the given module with scoping information.\r\n\r\nIts
  essence is described in the article [Open your name resolution][openrec].\r\n\r\n[openrec]:
  http://ro-che.info/articles/2013-03-04-open-name-resolution.html\r\n\r\n### Examples\r\n\r\nThe
  example in `examples/HeadUsage.hs` shows how you would find out if a\r\nHaskell
  modules given on stdin uses `Prelude.head`.\r\n\r\n```\r\n% cabal exec -- runghc
  examples/HeadUsages.hs\r\none = head [1]\r\n^D\r\nPrelude.head is used at stdin:
  (1:7) - (1:11)\r\n\r\n% cabal exec -- runghc examples/HeadUsages.hs\r\nimport Prelude
  hiding (head)\r\nimport Data.Text\r\n\r\nf = head (pack \"foo\")\r\n^D\r\nCongratulations!
  Your code doesn't use Prelude.head\r\n```\r\n\r\nThe example in `examples/ModuleExports.hs`
  shows how the `resolve` function\r\nbehaves. It expects to find `examples/moduleexports.Example.hs`
  and\r\n`examples/moduleexports/Example/Internal.hs`.\r\n\r\n```\r\n% cabal exec
  -- runghc examples/ModuleExports.hs\r\nOnly example: fromList [(ModuleName () \"Example\",[])]\r\nOnly
  internal: fromList [(ModuleName () \"Example.Internal\",[Value {symbolModule = ModuleName
  () \"Example.Internal\", symbolName = Ident () \"details\"}])]\r\nExample & Internal:
  fromList [(ModuleName () \"Example\",[Value {symbolModule = ModuleName () \"Example.Internal\",
  symbolName = Ident () \"details\"}]),(ModuleName () \"Example.Internal\",[Value
  {symbolModule = ModuleName () \"Example.Internal\", symbolName = Ident () \"details\"}])]\r\nInternal
  & Example: fromList [(ModuleName () \"Example\",[Value {symbolModule = ModuleName
  () \"Example.Internal\", symbolName = Ident () \"details\"}]),(ModuleName () \"Example.Internal\",[Value
  {symbolModule = ModuleName () \"Example.Internal\", symbolName = Ident () \"details\"}])]\r\nExample
  after Internal: fromList [(ModuleName () \"Example\",[Value {symbolModule = ModuleName
  () \"Example.Internal\", symbolName = Ident () \"details\"}]),(ModuleName () \"Example.Internal\",[Value
  {symbolModule = ModuleName () \"Example.Internal\", symbolName = Ident () \"details\"}])]\r\nInternal
  after Example: fromList [(ModuleName () \"Example\",[]),(ModuleName () \"Example.Internal\",[Value
  {symbolModule = ModuleName () \"Example.Internal\", symbolName = Ident () \"details\"}])]\r\n```\r\n\r\n\r\n###
  API documentation\r\n\r\nThe core module you need is [Language.Haskell.Names][]\r\n\r\nOther
  modules are more experimental, less documented, and you probably don't need\r\nthem
  anyway.\r\n\r\n[doc-index]: http://haskell-suite.github.io/docs/haskell-names/\r\n[Language.haskell.Names]:
  http://haskell-suite.github.io/docs/haskell-names/Language-Haskell-Names.html\r\n\r\n###
  Known issues\r\n\r\nSee the [list of all issues][issues].\r\n\r\n* haskell-names
  doesn't perform validation yet. If a module is not valid\r\n  Haskell, then the
  behaviour is undefined. See the issues marked as\r\n  [validation][].\r\n* Symbol
  fixities are not recorded ([#1][])\r\n* Type variables are not resolved ([#2][])\r\n*
  Arrows are not fully supported ([#8][])\r\n\r\n[issues]: https://github.com/haskell-suite/haskell-names/issues/\r\n[#1]:
  https://github.com/haskell-suite/haskell-names/issues/1\r\n[#2]: https://github.com/haskell-suite/haskell-names/issues/2\r\n[#8]:
  https://github.com/haskell-suite/haskell-names/issues/8\r\n[#32]: https://github.com/haskell-suite/haskell-names/issues/32\r\n[validation]:
  https://github.com/haskell-suite/haskell-names/issues?labels=validation&page=1&state=open\r\n\r\nMaintainers\r\n-----------\r\n\r\n[Philipp
  Schuster](https://github.com/phischu) is the primary maintainer.\r\n\r\n[Adam Bergmark](https://github.com/bergmark)
  is the backup maintainer. Please\r\nget in touch with him if the primary maintainer
  cannot be reached.\r\n\r\n"
description-type: markdown
hash: 8cd295ff72cbc87b330e4b9955eae3095a701b3e8b9a633c04cf150977e90d70
homepage: http://documentup.com/haskell-suite/haskell-names
latest: 0.9.9
license-name: BSD-3-Clause
maintainer: Philipp Schuster
synopsis: Name resolution library for Haskell
test-bench-deps:
  base: '>=4 && <5'
  containers: '>=0.2 && <0.7'
  filemanip: '>=0.3.6.3 && <0.4'
  filepath: '>=1.1 && <1.5'
  haskell-names: '>=0'
  haskell-src-exts: '>=1.21 && <1.24'
  mtl: '>=2.2.1 && <2.3'
  pretty-show: '>=1.6.1 && <1.11'
  tasty: '>=0.12 && <1.3'
  tasty-golden: '>=2.2.1 && <2.4'
  traverse-with-class: '>=1.0.0.0 && <1.1'
