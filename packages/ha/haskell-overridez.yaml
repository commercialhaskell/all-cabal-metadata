homepage: https://github.com/adetokunbo/haskell-overridez
changelog-type: ''
hash: da27a3c1c55d512e09494562fead71d11fd3b8271ef2f589443de7bd830ed36b
test-bench-deps: {}
maintainer: tim.emiola@gmail.com
synopsis: Manage nix overrides for haskell packages
changelog: ''
basic-deps:
  exceptions: ! '>=0.8.3'
  bytestring: ! '>=0.10.8 && <0.13'
  aeson-casing: ! '>=0.1 && <0.3'
  Cabal: ! '>=2.2.0.1'
  base: ! '>=4.2 && <5'
  managed: ! '>=1.0.6 && <1.2'
  text: ! '>=1.2.3 && <1.3'
  system-fileio: ==0.3.16.3
  turtle: ! '>=1.5.7 && <1.6'
  network-uri: ! '>=2.6.1.0 && <2.8'
  foldl: ! '>=1.4 && <1.5'
  attoparsec: ! '>=0.13.2 && <0.15'
  optparse-applicative: ! '>=0.14.2 && <0.16'
  system-filepath: ==0.4.14
  aeson: ! '>=1.2.4.0'
  neat-interpolation: ! '>=0.3.2 && <0.5'
all-versions:
- 0.10.0.1
- 0.10.1.0
- 0.10.1.1
- 0.10.2.0
- 0.10.3.0
author: Tim Emiola
latest: 0.10.3.0
description-type: markdown
description: ! "# haskell-overridez [![CircleCI](https://circleci.com/gh/adetokunbo/haskell-overridez.svg?style=svg)](https://circleci.com/gh/adetokunbo/haskell-overridez)\n\n__haskell-overridez__
  is a tool and library of nix functions that simplify the use of overrides while
  developing haskell projects with [nixpkgs](https://github.com/NixOS/nixpkgs).\n\n##
  Inspiration\n\n__haskell-overridez__ is inspired by the section on [Advanced Dependency
  Management](https://github.com/Gabriel439/haskell-nix/tree/master/project4) in [haskell-nix](https://github.com/Gabriel439/haskell-nix).\nThe
  idea is to turn the recommendations there into a tool that is itself installed into
  the nix environment.\n\n\n## Installation\n\nIt's assumed that you have already
  [installed nix](https://wiki.nixos.org/wiki/Nix_Installation_Guide).\n\nYou can then
  install `haskell-overridez` using `nix-env`:\n\n```bash\n\nnix-env --install -f
  https://github.com/adetokunbo/haskell-overridez/archive/v0.10.3.0.tar.gz\n\n```\n\n##
  Basic usage\n\nInstallation adds the executable `haskell-overridez` to the nix environment.\n\nIt
  writes the output of the other tools it uses to subdirectories of the development
  project.\n\nE.g,\n\n```bash\n$ cd my-nix-project\n\n# install an override using
  github json\n$ haskell-overridez -g reflex-frp/reflex-dom-contrib\n\n# install an
  override using cabal2nix\n$ haskell-overridez https://github.com/tathougies/beam
  -- --subpath beam-core\n```\n\nThere are various options for managing the overrides;
  to see them all, you can read the help message:\n\n```bash\n$ haskell-overridez
  -h\nhaskell-overridez - manage nix overrides for haskell packages\n...\n\n```\n\n###
  Project Layout\n\nGiven the previous example commands, `haskell-overridez` creates
  a project with the following layout:\n\n```\n├── default.nix\n│\n├── nix (1)\n│  
  │\n│   ├── haskell-overridez.nix (2)\n│   │\n│   ├── nix-expr (3)\n│   │   └── beam-core.nix\n│  
  │\n│   ├── git-json (3)\n│   │   └── reflex-dom-contrib.json\n```\n\n 1. There is
  a `nix` subdirectory of the main project directory.\n 2. There is a `haskell-overridez.nix`
  file that contains the nix expression used to load the accompanying nix expression
  library.\n 3. There are subdirectories (`nix-expr`, `git-json`) that contain the
  output from the tools.\n 4. The accompanying library functions use the contents
  of the subdirectories to generate a nix expression that combines all the overrides
  into a single nix overlay.\n\n### Using the library functions\n\nThe library functions
  can be used from `default.nix` by setting the `overlays` attribute.\n\n```nix\n\nlet\n
  \ overridez = import ./nix/haskell-overridez.nix;\n  overlays = [\n    (newPkgs:
  oldPkgs: {\n      haskellPackages = oldPkgs.haskellPackages.override {\n        overrides
  = overridez.allIn ./nix;\n      };\n    })\n  ];\n  pkgs = import <nixpkgs> { inherit
  overlays; };\n\nin\n  {}\n\n```\n\nor by setting the `packageOverrides` attribute
  of the config element.\n\n```nix\n\nlet\n  overridez = import ./nix/haskell-overridez.nix;\n
  \ config = {\n    packageOverrides = pkgs: {\n      haskellPackages = pkgs.haskellPackages.override
  {\n        overrides = overridez.allIn ./nix;\n      };\n    };\n  };\n  pkgs =
  import <nixpkgs> { inherit config; };\n\nin\n  {}\n\n```\n\nSome overrides can't
  be specified using the features of `haskell-overridez` and need to be specified
  directly. These direct overrides can be combined with the configured ones using
  `combineAllIn` instead of `allIn`:\n\n```nix\n\nlet\n  overridez = import ./nix/haskell-overridez.nix;\n
  \ myManualOverride = self: super: {};\n  myImportedOverrides = import /from/some/nix/file.nix;\n\n
  \ overlays = [\n    (newPkgs: oldPkgs: {\n      haskellPackages = oldPkgs.haskellPackages.override
  {\n        overrides = overridez.combineAllIn ./nix [myManualOverride myImportedOverrides];\n
  \     };\n    })\n  ];\n  pkgs = import <nixpkgs> { inherit overlays; };\n\nin\n
  \ {}\n\n\n```\n\n### Using the library functions in reflex-project-skeleton projects\n\nProjects
  developed using the [Reflex Platform](https://github.com/reflex-frp/reflex-platform)
  can benefit from adopting the layout in\n[reflex-project-skeleton](https://github.com/ElvishJerricco/reflex-project-skeleton).
  \ This allows them to share\nhaskell code between frontend and backend.  In these
  projects, `haskell-overridez` can be used as follows:\n\n```nix\n\nlet pkgs = import
  <nixpkgs> {};\n    overridez = import ./nix/haskell-overridez.nix;\nin\n\n{}:\n\n(import
  ../../repos/reflex-platform {}).project ({ pkgs, ... }: {\n  packages = {\n    common
  = ./common;\n    backend = ./backend;\n    frontend = ./frontend;\n  };\n\n  shells
  = {\n    ghc = [\"common\" \"backend\" \"frontend\"];\n    ghcjs = [\"common\" \"frontend\"];\n
  \ };\n\n  overrides = overridez.allIn ./nix;\n})\n\n```\n\n## Fetching shared configs\n\n`haskell-overridez`
  has a `fetch` subcommand that makes it easy to share the overrides it manages.  As
  long as the override config files are saved in a git repository, they can be fetched
  for use in other projects.\n`haskell-overridez fetch` copies the override configuration
  from a target git repo to a subdirectory of the current project's `nix` directory.\n\n###
  Sharing public projects\n\n- Use `haskell-overridez` to manage the `nix` overrides
  of a project\n- Publish the project to an online git repo, ensuring that the `nix`
  folder is a top-level directory in the repo\n- Use `haskell-overridez fetch <url-of-repo>`
  to clone the project's nix configs\n\n#### Fetch configs from private git clones\n\nTo
  fetch from local private git repos, use a [file url][] to the git directory.\n\n####
  Examples\n\n- [This example repo][] can have its configs fetched.\n- See the integration
  test fixtures for examples of [remote fetching][] and [local fetching][], and for
  usage of [a remote-fetched config][] and of [a local-fetched config][].\n\n[This
  example repo]: https://github.com/adetokunbo/example-fetched-haskell-overridez\n[file
  url]: https://en.wikipedia.org/wiki/File_URI_scheme\n[remote fetching]: https://github.com/adetokunbo/haskell-overridez/blob/8c18163683145f11fdf37b9ee85860452f2ea057/fixtures/ichibanme-no-yagai-purojekuto/setup_test.sh\n[local
  fetching]: https://github.com/adetokunbo/haskell-overridez/blob/8c18163683145f11fdf37b9ee85860452f2ea057/fixtures/sanbanme-no-yagai-purojekuto/setup_test.sh\n[a
  remote-fetched config]: https://github.com/adetokunbo/haskell-overridez/blob/8c18163683145f11fdf37b9ee85860452f2ea057/fixtures/ichibanme-no-yagai-purojekuto/default.nix\n[a
  local-fetched config]: https://github.com/adetokunbo/haskell-overridez/blob/8c18163683145f11fdf37b9ee85860452f2ea057/fixtures/sanbanme-no-yagai-purojekuto/default.nix\n\n##
  Contributions\n\nContributions are welcome! Please raise an [issue](https://github.com/adetokunbo/haskell-overridez/issues)
  to report any problems or [open a PR](https://github.com/adetokunbo/haskell-overridez/pulls)
  with fixes and improvements.\n\n## Versioning\n\n`haskell-overridez` uses [PVP][].
  \ While it does not provide a library, the package provides an executable and nixpkg
  functions.  Its __public API__ is defined as the documentation provided by `haskell-overridez
  -h` and all the nixpkgs functions exported by `default.nix`.\n\n[PVP]: http://pvp.haskell.org\n\n###
  Updating after releases\n\nEach 'version' tag (e.g, vN.N.N) in the repository is
  a release.  To update managed projects to a new release\n\n- re-install `haskell-overridez`\n-
  update the projects to use the releases's nixpkgs functions with `haskell-overridez
  -i`\n\n#### Newer projects\n\nThese are installed using a versioned archive file,
  so updating is optional.    If you don't upgrade, any existing projects will be
  unaffected.\n\n#### Older projects\n\nThese were installed with the original installation
  instructions that used an archive of the  master branch.  Unfortunately, after each
  new release, the hash of the master branch changes,  meaning that the hash specified
  in `/nix/haskell-overridez.nix` of these projects becomes incorrect, and derivations
  using the overrides will start to fail to load.  In these cases, you __must__ update
  `haskell-overridez` and the affected projects.\n\n\n## Road Map\n\n  1. Ask people
  to try it out to see if its useful ([reddit](https://www.reddit.com/r/haskell/comments/8k9g08/a_tool_that_helps_automate_the_installation_and/?ref=share&ref_source=link))\n
  \ 2. Iterate on any proposed feature requests (.. ongoing)\n  3. (??) Merge it into
  [nixpkgs](https://github.com/NixOS/nixpkgs) (later, if people think that's a good
  idea)\n\n## License\nBSD-3 clause\n"
license-name: BSD-3-Clause
