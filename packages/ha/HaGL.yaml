homepage: https://github.com/simeonkr/HaGL
changelog-type: markdown
hash: e3af78324412a55a8a73c95b5c9dfc5113c25c34ae9516e7adbd4cac672ae107
test-bench-deps:
  bytestring: -any
  GLUT: -any
  HaGL: -any
  base: -any
  HUnit: '>=1.6.2.0 && <1.7'
  directory: '>=1.3.3.0 && <1.4'
maintainer: skrastnikov@gmail.com
synopsis: Haskell-embedded OpenGL
changelog: |
  # Revision history for HaGL

  ## 0.1.0.0 -- 2023-06-10

  * Initial (pre-)release
basic-deps:
  bytestring: '>=0.11.4 && <0.12'
  OpenGL: '>=3.0.3 && <3.1'
  gl-capture: '>=0.1.0 && <0.2'
  GLUT: '>=2.7.0 && <2.8'
  base: '>=4.12 && <4.19'
  time: '>=1.8.0 && <1.14'
  unordered-containers: '>=0.2.19 && <0.3'
  cryptohash-md5: '>=0.11.100 && <0.12'
  matrix: '>=0.3.6 && <0.4'
  array: '>=0.5.3 && <0.6'
  containers: '>=0.6.0 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  hashable: '>=1.4.2 && <1.5'
  OpenGLRaw: '>=3.3.4 && <3.4'
  template-haskell: '>=2.14.0 && <2.21'
all-versions:
- 0.1.0.0
author: Simeon Krastnikov
latest: 0.1.0.0
description-type: markdown
description: "# HaGL: Haskell-embedded OpenGL\n\nHaGL (Haskell-embedded OpenGL, pronounced
  \"haggle\") aims to provide a simple,\nelegant, and modular way to create lightweight
  OpenGL visualizations in Haskell.\n\nBy unifying vertex, fragment, and uniform processing
  into an expressively\ntyped GLSL-like language consisting of pure, composable primitives,
  HaGL makes\nit easy to experiment with and prototype visual graphical demos.\n\nTo
  see it in action, please skip straight to the \n[\"Getting Started\" guide](https://github.com/simeonkr/HaGL/blob/master/doc/Overview.md).\n\n##
  Installation\n\nPlease make sure that you have installed the correct headers and
  static libraries \nfor OpenGL development on your system, as well as freeglut for
  running the GLUT\nbackend. (For example, in Debian/Ubuntu, ensure that the packages
  `libgl-dev`, \n`lib-glu1-mesa-dev`, and `freeglut3` are installed.)\n\nThen with
  the latest version of [Haskell Cabal](https://www.haskell.org/cabal/) installed:\n\n```\ncabal
  update\ncabal install HaGL\n```\n\nTo instead build locally from the sources, issue:\n```\ncabal
  build HaGL\n```\nfrom the top-level directory.\n\nThe supporting library and examples
  can be built using:\n```\ncabal build HaGL-lib\ncabal build HaGL-examples\n```\n\n(It
  is recommended that these packages be built not installed, as they are not\nyet
  stable and complete enough to be used without modifications.)\n\nTo check that all
  the packages have been installed correctly, run a single\nexample as follows:\n```\ncabal
  run hagl-example interactive_cube\n```\n\n## Usage\n\nTo learn how to use HaGL please
  refer to the \n[\"Getting Started\" guide](https://github.com/simeonkr/HaGL/blob/master/doc/Overview.md).\nThe
  complete documentation can be found on \n[Hackage](https://hackage.haskell.org/package/HaGL).\n\n##
  Running the Test Suite\n\nThe test suite can be run using:\n\n```\ncabal test\n```\n\nNote
  that since some tests require launching a graphical window, the test suite\ncannot
  be run on a non-GUI system.\n\n## Intended Use and Alternatives\n\nHaGL is best
  suited for the production of simple non-reactive visual animations; \nin this regard,
  its use-cases somewhat resemble those of the [VisPy](https://vispy.org/) \nand [Glumpy](https://glumpy.github.io/)
  Python libraries.\n\nAt the moment, the only way to interpret HaGL code is as a
  GLUT application but \nother backends will be added in the future, as well as a
  backend-agnostic interface.\n\nHaGL prioritizes approachability and simplicity over
  completeness and is likely \nunsuitable for use in a game engine. \nFor more advanced
  graphics programming consider using, for example, \n[LambdaCube 3D](http://lambdacube3d.com/),
  [FIR](https://gitlab.com/sheaf/fir),\nor the Haskell [OpenGL](https://hackage.haskell.org/package/OpenGL)
  bindings. \n\n## Scope of OpenGL Support\n\nHaGL models a simple OpenGL pipeline
  that supports basic vertex and fragment \nprocessing and exposes a generic API similar
  to that of GLSL that can be \nused for both shader programming and host numerical
  computation (of uniforms).\nIn addition, it provides various operations of its own
  to model certain \nimperative constructs in a functional manner.\n\nAn \"interpreter\"
  for running HaGL code is provided in the form of GLUT backend \nbuilt using the
  [OpenGL](https://hackage.haskell.org/package/OpenGL) and \n[GLUT](https://hackage.haskell.org/package/GLUT)
  bindings for Haskell. \n\nFeatures that are currently missing but could possibly
  be added in the future:\n\n* Texture mapping using sampler objects\n* Instanced
  rendering\n* Tessellation shading\n* Geometry shading\n* Compute shading\n* Non-GLUT
  backends and a backend-agnostic interface\n* Integration with an FRP framework such
  as [Yampa](https://hackage.haskell.org/package/Yampa)\n\n## Contributing\n\nContributions
  in the form of pull requests, suggestions, or feedback are welcome\nand appreciated.\n\nThe
  best way to keep the project alive is to demonstrate its usefulness through\na wide
  range of interesting examples and tutorials. Another potential area to\nexplore
  is the creation of high-level libraries for specific types of visual \napplications,
  as well as improving the supporting library that ships with HaGL.\n"
license-name: MIT
