homepage: https://github.com/jhmcstanton/hakyll-process#readme
changelog-type: markdown
hash: 0650ac0dfdc93b52d2b571b437ec8950cc34ee6b4767694a9c7fe84581c441e9
test-bench-deps: {}
maintainer: jim@jhmcstanton.com
synopsis: Hakyll compiler for arbitrary external processes.
changelog: |
  # Changelog

  All notable changes to this project will be documented here.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

  ## [0.0.3.0] - 2020-09-16
  ### Changed
  - Bumped `bytestring` dependency

  ## [0.0.2.0] - 2020-10-16
  ### Added
  - More docs
  - Exposed `unsafeExecCompiler`

  ## [0.0.1.0] - 2020-10-15
  ### Added

  - Initial implementation
    - Compiler that pipes hakyll items to other executables
    - Various helper functions
    - Simple example
basic-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.7 && <5'
  typed-process: '>=0.2.3 && <0.3'
  hakyll: '>=4.12 && <5'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
author: Jim McStanton
latest: 0.0.3.0
description-type: markdown
description: |
  # hakyll-process

  Hakyll compilers for passing Hakyll items to external processes. This is useful for tools that do not have
  Haskell bindings or may not make sense to have Haskell bindings, like Typescript or LaTex compilers.

  ## Common Usage

  There are a few main entry points for this library:

  - `execCompilerWith` is the most common. This allows the caller to declaratively run an external process
    and includes support for passing arguments.
  - `execCompiler` is an aliased version of `execCompilerWith` that provides no arguments to the external executable/process.
  - `unsafeExecCompiler` is the less type safe and more manual method to calling external executables. This provides
    no helper functionality but may be useful if you are already manually building out a compiler in your site generator.

  ### Example

  This example shows how this library can be used to include latex files in your
  site source and include the output pdf in your target site.

  ```haskell
  import qualified Data.ByteString.Lazy.Char8 as B
  import           Hakyll.Process

  main = do
    hakyll $ do
      match "resume/*.tex" $ do
        route   $ setExtension "pdf"
        compile $ execCompilerWith (execName "xelatex") [ProcArg "-output-directory=resume/", HakFilePath] (newExtOutFilePath "pdf")

      -- alternative, manual method, using unsafeExecCompiler
      match "resume/*.tex" $ do
        route   $ setExtension "pdf"
        compile $ do
          input <- getResourceFilePath
          let outputReader _ = B.readFile (newExtension "pdf" input)
          unsafeExecCompiler (execName "xelatex") ["-output-directory=resume/", input] outputReader
  ```
license-name: BSD-3-Clause
