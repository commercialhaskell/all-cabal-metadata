all-versions:
- '0.1'
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
author: Obsidian Systems LLC
basic-deps:
  base: '>=4.12.0 && <4.22'
  directory: '>=1.3.3 && <1.4'
  filelock: '>=0.1.1 && <0.2'
  filepath: '>=1.4.2 && <1.6'
  network: '>=2.6.0 && <3.3'
  process: '>=1.5.0 && <1.7'
  unix: '>=2.7.2 && <2.9'
changelog: |
  # Changelog for gargoyle

  ## 0.1.2.2

  * Support GHC 9.12

  ## 0.1.2.1

  * Support GHC 9.10

  ## 0.1.2.0

  * Fix a bug with shutting down on Apple Silicon

  ## 0.1.1.1

  * Add support for ghc 9.0.2

  ## 0.1.1

  * Bugfix: Error cases on opening file were non-exhaustive
  * Loosen version bounds

  ## 0.1

  * Initial release
changelog-type: markdown
description: |
  # gargoyle
  [![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org) [![Hackage](https://img.shields.io/hackage/v/gargoyle.svg)](https://hackage.haskell.org/package/gargoyle) [![Github CI](https://github.com/obsidiansystems/gargoyle/workflows/github-action/badge.svg)](https://github.com/obsidiansystems/gargoyle/actions) [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/obsidiansystems/gargoyle/blob/master/LICENSE)


  Gargoyle is a framework for managing daemons from Haskell. Currently, the only requirement is that the daemon be able to communicate over a Unix domain socket. See [gargoyle-postgresql](https://hackage.haskell.org/package/gargoyle-postgresql) for an example that uses gargoyle to manage postgresql.

  To use Gargoyle the client must:
  * Define a value of the 'Gargoyle' type which specifies how to administer the daemon.
  * Create an executable whose `main` is `gargoyleMain`. The name of this executable should match the executable name specified in the `_gargoyle_exec` field of the `Gargoyle`.
  * The client will run their code with `withGargoyle` to gain access to the daemon.

  # Importing into Haskell package set

  ```nix
  haskellPackages.override {
    overrides = self: super:
      let gargoylePkgs = import ./path/to/gargoyle-repo { haskellPackages = self; };
      in gargoylePkgs // {
        # .. your overrides
      };
  }
  ```

  By default `gargoyle-postgresql-nix` will use the `postgresql` of the `pkgs` used by your `haskellPackages`. To override this, pass `postgresql` by changing the above line to look more like

  ```nix
  gargoylePkgs = import ./path/to/gargoyle-repo { haskellPackages = self; postgresql = myCustomVersion; }
  ```

  # Hacking

  Do something like this:

  ```shell
  nix-shell -A gargoyle-postgresql.env --run 'cd gargoyle-postgresql && cabal new-repl'
  ```
description-type: markdown
hash: 7534fd9165e36e44b8e309291eba8c9f51fb842a552b42b399a4eb379dadbaa3
homepage: ''
latest: 0.1.2.2
license-name: BSD-3-Clause
maintainer: maintainer@obsidian.systems
synopsis: Automatically spin up and spin down local daemons
test-bench-deps: {}
