all-versions:
- '0.1'
- '0.2'
- '1.0'
author: Kenneth Hoste
basic-deps:
  base: '>=4 && <5'
  directory: '>=0'
  random: '>=0'
  transformers: '>=0'
changelog: "Changelog for GA, a Haskell library for working with genetic algorithms:\n------------------------------------------------------------------------\n\nv1.0
  (Sept. 27th 2011):\n\n* reorganize examples\n* minor code cleanup\n* support for
  user-defined:\n  - checking of progress (mustContinue)\n  - print progress per generation
  (showProgress)\n*  bug fixes:\n  - double pop/archive entities\n\nv0.2 (Sept. 19th
  2011):\n\n* fixed compilation warnings in GA module and examples\n* major API changes\n
  \ - generalized result type of evolve from IO a to Monad m => m a\n  - hist genRandom,
  crossover, mutation adn scores into genertic Monad m\n* introduced evolveVerbose
  which allows checkpointing, and prints\n  progress to stdout (requires liftIO)\n*
  implemented random search\n* code cleanup and reorganization\n\nv0.1 (Aug. 31st
  2011):\n\n* initial release\n* support for:\n\t- evolution of arbitrary entities
  (see Entity type class)\n\t- checkpointing between generations with automatic restore
  from checkpoint\n* two toy examples\n\n"
changelog-type: text
description: "GA, a Haskell library for working with genetic algorithms\n---------------------------------------------------------\n\nversion
  1.0, Sept. 2011, written by Kenneth Hoste (kenneth.hoste@gmail.com)\nsee http://hackage.haskell.org/package/GA\n\n*
  DESCRIPTION\n\nThis package provides a framework for working with genetic\nalgorithms.
  A genetic algorithm is an evolutionary technique, \ninspired by biological evolution,
  to evolve entities that perform\nas good as possible in terms of a predefined criterion
  (the scoring \nfunction). \nNote: lower scores are assumed to indicate better entities.\n\nThe
  GA module provides a type class for defining entities and the\nfunctions that are
  required by the genetic algorithm.\n\nCheckpointing in between generations is available,
  as is automatic\nrestoring from the last available checkpoint (see evolveChkpt).
  \n\n* BUILDING AND USING\n\nBuilding the supplied examples can be done by running
  'make'\nin the examples directory after the installation of the GA library.\n\nUsing
  the GA module should be clear after studying the examples.\n\n* EXAMPLES\n\nThis
  release includes two toy examples that show how to use the GA module.\n\nThe first
  example (see theNumber.hs) evolves an integer number that has\n8 integer divisors,
  and for which the sum of its divisors equals 96.\nAlthough using a genetic algorithm
  is probably not the best way to find \nsuch an integer (it would be easier/faster
  to just go over integer values\none by one starting from e.g. 8), but it serves
  well as a toy example.\n\nThis example shows how the pool and score data do not
  have to be used; it\nsuffices to supply '()' as values to the evolve function, and
  to simply ignore\nthe respective arguments passed to the Entity typeclass functions.\nWe
  use the score' function in this example, because the scoring itself\ndoesn't operate
  in a monad.\n\nA second example evolves the string \"Hello World!\". The string
  that the\ngenetic algorithm should generate is supplied by the user in this example,\nand
  is printed to a file where the GA will read it from during scoring.\nThis is of
  course not representative of a real world problem that could \nbe solved using genetic
  algorithms, but again, it does serve well as a toy \nexample.\n\nThe code in hello.hs
  illustrates how you can define the \"genRandom\", \n\"crossover\", \"mutation\"
  and \"score\" functions that are required to run \nthe genetic algorithm using the
  'evolveVerbose' function. It also shows\nan example of defining the \"isPerfect\"
  function to determine whether a\nperfect entity was observed (and thus evolution
  can stop).\n\nThis example demonstrates the use of a 'pool' that can be used to
  generate \nrandom entities (a list of characters, in this particular case), and
  \nuser-supplied data that can be used to evaluate the fitness of entities (in \nthis
  case, the name of the file where the target string was written to).\n\nIt also shows
  how the GA module support operating in a monad, in this case \nthe IO monad, and
  illustrates the usefulness of the 'randomSearch' function.\n"
description-type: text
hash: 27841fbfc401097da63562e6a7d1cdd2460e9888026c365d023329da6169605b
homepage: http://boegel.kejo.be
latest: '1.0'
license-name: BSD-3-Clause
maintainer: kenneth.hoste@gmail.com
synopsis: Genetic algorithm library
test-bench-deps: {}
