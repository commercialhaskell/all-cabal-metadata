all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
author: EO/Polystat Development Team
basic-deps:
  aeson: '>=0'
  aeson-pretty: '>=0'
  array: '>=0.5.5.0'
  base: '>=4.7 && <5'
  blaze-html: '>=0'
  blaze-markup: '>=0'
  directory: '>=0'
  eo-phi-normalizer: '>=0'
  file-embed: '>=0'
  filepath: '>=0'
  generic-lens: '>=0'
  lens: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  scientific: '>=0'
  string-interpolate: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  yaml: '>=0'
changelog: |
  # Changelog for `eo-phi-normalizer`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## v0.3.0 — 2024-03-26

  In this version the main executable has been renamed to `normalizer`
  and several commands have been implemented for normalization, dataization,
  and reporting.

  New:

  - Command Line Interface:
    - Add commands:
      - `normalizer transform` to perform normalization without executing any atoms (was default behavior before)
      - `normalizer metrics` to compute metrics of a given φ-expression (see [#153](https://github.com/objectionary/normalizer/pull/153))
      - `normalizer dataize` to run partial evaluation of φ-expressions with atoms (see [#187](https://github.com/objectionary/normalizer/pull/187))
      - `normalizer report` to generate report based on the results of testing against the EO compiler (see [#213](https://github.com/objectionary/normalizer/pull/213))
    - Add `--single` flag (see [#131](https://github.com/objectionary/normalizer/pull/131))
    - Add `--json` flag for machine-readable output format (see [#143](https://github.com/objectionary/normalizer/pull/143))
    - Add `--max-depth=N` and `--max-term-size=N` options to control limits for the normalizer (see [#173](https://github.com/objectionary/normalizer/pull/173))
    - Improve `--chain` option to provide better elaboration on the applied normalization rules and the dataization process (see [#195](https://github.com/objectionary/normalizer/pull/195))
  - Update rule set for φ-calculus (see [#152](https://github.com/objectionary/normalizer/pull/152) and some changes in [#136](https://github.com/objectionary/normalizer/pull/136) and [#166](https://github.com/objectionary/normalizer/pull/166))
  - Add property-based and regression tests for confluence (see [#136](https://github.com/objectionary/normalizer/pull/136) and [#166](https://github.com/objectionary/normalizer/pull/166))
  - Tests and metrics against the EO compiler and standard EO test suite (see [#98](https://github.com/objectionary/normalizer/pull/98), [#191](https://github.com/objectionary/normalizer/pull/191))

  Fixes:

  - Count metrics, including dataless objects, correctly (see [#142](https://github.com/objectionary/normalizer/pull/142), [#193](https://github.com/objectionary/normalizer/pull/193), [#211](https://github.com/objectionary/normalizer/pull/211))
  - Fix metavariables in context patterns (see [#174](https://github.com/objectionary/normalizer/pull/174))
  - Support empty Δ-bindings (see [#184](https://github.com/objectionary/normalizer/pull/184))

  Documentation has been improved (see [#134](https://github.com/objectionary/normalizer/pull/134), [#221](https://github.com/objectionary/normalizer/pull/221)).

  Maintenance:

  - Run CI on all pull requests (see [#156](https://github.com/objectionary/normalizer/pull/156))
  - Downgrade Stackage snapshot (see [#146](https://github.com/objectionary/normalizer/pull/146))
  - Add HLint to CI (see [#157](https://github.com/objectionary/normalizer/pull/157))

  ## v0.2.0 — 2024-02-16

  - Complete implementation of Yegor's rules (see [#109](https://github.com/objectionary/normalizer/pull/109), [#112](https://github.com/objectionary/normalizer/pull/112))
    - Support global counter in user-defined rules (see [#105](https://github.com/objectionary/normalizer/pull/105))
    - Context matching (global object and this object, see [#99](https://github.com/objectionary/normalizer/pull/99))
  - Fix grammar for $\varphi$-calculus (see [#97](https://github.com/objectionary/normalizer/pull/97) and [#127](https://github.com/objectionary/normalizer/pull/127))
  - Improve documentation:
    - Set up wesbite for documentation (see [#104](https://github.com/objectionary/normalizer/pull/104), [#124](https://github.com/objectionary/normalizer/pull/124), and [#128](https://github.com/objectionary/normalizer/pull/128))
    - Update CLI documentation (see [#113](https://github.com/objectionary/normalizer/pull/113))
  - Improve command line interface:
    - Support `--output`/`-o` command line option (see [#92](https://github.com/objectionary/normalizer/pull/92))
    - Remove logs from default output (see [#106](https://github.com/objectionary/normalizer/pull/106))
  - Allow collection of metrics for $\varphi$-terms (see [#121](https://github.com/objectionary/normalizer/pull/121))

  ## v0.1.0 - 2024-02-02

  First version of the normalizer.
changelog-type: markdown
description: "# eo-phi-normalizer\n\n[![`rzk` on Hackage](https://img.shields.io/hackage/v/eo-phi-normalizer)](http://hackage.haskell.org/package/eo-phi-normalizer)\n[![Haddock](<https://shields.io/badge/Haddock%20(master)-Code%20documentation-informational>)](https://www.objectionary.com/normalizer/haddock/)\n\nCommand
  line normalizer of \U0001D711-calculus expressions (as produced by the [EO compiler](https://github.com/objectionary/eo)).\n\nSee
  <https://github.com/objectionary/normalizer#readme>.\n"
description-type: markdown
hash: 70ffc0c903883eab804c17e9abc4b460eea12b75ffb4dfcf80bf74623a3adf3e
homepage: https://github.com/objectionary/eo-phi-normalizer#readme
latest: 0.3.0
license-name: BSD-3-Clause
maintainer: nickolay.kudasov@gmail.com
synopsis: "Command line normalizer of \U0001D711-calculus expressions."
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  array: '>=0.5.5.0'
  base: '>=4.7 && <5'
  blaze-html: '>=0'
  blaze-markup: '>=0'
  directory: '>=0'
  eo-phi-normalizer: '>=0'
  file-embed: '>=0'
  filepath: '>=0'
  generic-lens: '>=0'
  hspec: '>=0'
  hspec-discover: '>=0'
  lens: '>=0'
  mtl: '>=0'
  scientific: '>=0'
  string-interpolate: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  yaml: '>=0'
