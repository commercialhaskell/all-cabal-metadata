homepage: https://github.com/divipp/x86-64
changelog-type: markdown
hash: cbd0d136367e4587369359471abba8ec08498849367f40761f8b0244f6c3bca4
test-bench-deps:
  base: '>=4.8 && <4.17'
  monads-tf: '>=0.1 && <0.2'
  tardis: '>=0.4 && <0.5'
  deepseq: -any
  QuickCheck: '>=2.8 && <2.15'
  vector: '>=0.11 && <0.13'
maintainer: divipp@gmail.com
synopsis: Runtime code generation for x86 64 bit machine code
changelog: "# Version 0.4.5\n\n-   fix build with newer base\n\n# Version 0.4.4\n\n-
  \  export some useful data types \n\n# Version 0.4.3\n\n-   fixes to compile on
  GHC 7.10 and on Windows\n\n# Version 0.4.2\n\n-   fix OSX compilation\n\n# Version
  0.4.1\n\n-   fix a bug which caused segmentation fault if a compiled function was
  called multiple times\n\n# Version 0.4\n\n-   rewrite FFI\n-   support calling labels\n-
  \  speed up long code alignments\n-   bugfix: auto size calculation fix\n\n# Version
  0.3.1\n\n-   use multi-byte nop operations for padding\n-   `preBuild` operation
  (may speed up code generation)\n-   branch-predicition friendlier if-then-else\n-
  \  not-condition pattern: `N`  \n    usage example: `j (N E)` which is the same
  as `j NE`\n-   bugfix: fix if-then-else condition\n\n# Version 0.3\n\n-   simpler
  API for label handling  \n    (the idea of labels as De-Bruijn indices is abandoned)\n\n#
  Version 0.2\n\n-   simpler API for immediate values: `Add ax, 1`\n-   redesigned
  addressing API: `Add ax (addr $ rax + 4*rdi + 3)`\n-   support near jumps\n-   support
  automatic decision between short and near jumps (conditional jumps too)\n-   support
  more registers and instructions:\n    -   cmovCC instructions\n    -   SSE registers:
  xmm0 - xmm7\n    -   SSE instructions: movd, movq, movdqa, paddb, paddw, paddd,
  paddq, psubb, psubw, psubd, psubq, pxor\n    -   SSE instructions (partial support):
  psllw, pslld, psllq, pslldq, psrlw, psrld, psrlq, psrldq, psraw, psraq\n-   bugfixes\n
  \   -   throw an error if an immediate value does not fit\n    -   fix show instance
  of shift instructions\n\n# Version 0.1.4\n\n-   OS X operating system support (Balázs
  Kőműves)\n-   better show for db\n-   bugfix\n    -   save flags in traceReg\n\n#
  Version 0.1.3\n\n-   jmpq instruction support (George Stelle)\n-   support near
  conditional jumps\n-   support automatic decision between short and near conditional
  jumps for backward references\n-   support alternative condition names\n-   make
  possible to use labels as relative immediate values (not used yet)\n-   bugfix\n
  \   -   fail if a short jump is out of range\n\n# Version 0.1.2\n\n-   Windows operating
  system support (Balázs Kőműves)\n-   GHC 7.10 support\n-   TODO.md file added\n\n#
  Version 0.1.1.1\n\n-   change dependencies to reflect that the package compiles
  only with ghc 8\n-   add 'tested-with: GHC == 8.0.1' to the cabal file\n\n# Version
  0.1.1\n\n-   examples moved into the library\n-   more Haddock comments\n-   add
  cabal test suit\n-   bugfixes\n    -   fix code generation for alignments\n    -
  \  smaller code is generated now for 'add rax, 100' and similar instrcutions\n\n"
basic-deps:
  base: '>=4.8 && <4.17'
  monads-tf: '>=0.1 && <0.2'
  tardis: '>=0.4 && <0.5'
  deepseq: -any
  vector: '>=0.11 && <0.13'
all-versions:
- '0.1'
- 0.1.1
- 0.1.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.6.1
- 0.4.6.2
author: Péter Diviánszky
latest: 0.4.6.2
description-type: markdown
description: |+
  # x86-64

  The primary goal of x86-64 is to provide a lightweight assembler for machine generated 64 bit x86 assembly instructions.

  Features:

  -   The size of operands are statically checked. For example, exchanging `rax` with `eax` raises a compile time error rather than a code-generation time error. As a consequence, code generation is faster because the sizes are statically known.
  -   Quickcheck tests: You can quickcheck your x86 processor! Please report failures, there is a higher chance that the error is in this library rather than in your processor.
  -   Immediate values are automatically converted to smaller size if possible.
  -   Automatic calculation of short and near distances

  The package is available on HackageDB: http://hackage.haskell.org/package/x86-64bit

license-name: BSD-3-Clause
