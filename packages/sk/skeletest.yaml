all-versions:
- 0.1.0
author: Brandon Chinn <brandonchinn178@gmail.com>
basic-deps:
  Diff: '>=0.5'
  aeson: '>=0'
  aeson-pretty: '>=0'
  ansi-terminal: '>=0.4.0'
  base: <5
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  ghc: ^>=9.6 || ^>=9.8 || ^>=9.10
  hedgehog: '>=0'
  megaparsec: '>=0'
  ordered-containers: '>=0.2.4'
  parser-combinators: '>=0'
  pretty: '>=0'
  recover-rtti: '>=0'
  skeletest: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
  unliftio: '>=0.2.17'
changelog: |
  ## v0.1.0

  Initial release
changelog-type: markdown
description: "# Skeletest\n\nSkeletest is a batteries-included, opinionated test framework
  heavily inspired by [pytest](https://pytest.org) and [jest](https://jestjs.io).
  It's the built-in test framework for [Skelly](https://github.com/brandonchinn178/skelly),
  but it can be used as a standalone library as well.\n\nFeatures:\n* Seamless experience
  writing unit tests, property tests, and snapshot tests\n* Descriptive failure messages\n*
  Easy test selection from CLI\n* Automatic fixtures management\n* Rich plugin + hooks
  functionality\n\n## Example\n\n```haskell\nimport Skeletest\nimport qualified Skeletest.Predicate
  as P\nimport qualified Skeletest.Prop.Gen as Gen\nimport qualified Skeletest.Prop.Range
  as Range\n\nspec :: Spec\nspec = do\n  describe \"myFunc\" $ do\n    it \"returns
  the correct list\" $\n      myFunc 1 2 `shouldBe` [\"a\", \"b\", \"c\"]\n\n    it
  \"returns a list containing an element\" $\n      myFunc 1 2 `shouldSatisfy` P.any
  (P.eq \"a\")\n\n    it \"returns a list matching the given predicates\" $\n      myFunc
  1 2 `shouldSatisfy` P.list [P.eq \"a\", P.anything, P.anything]\n\n    prop \"myFunc
  0 x == []\" $ do\n      x <- gen $ Gen.int (Range.linear 0 100)\n      myFunc 0
  x `shouldBe` \"\"\n\n    prop \"myFunc x y == myFunc y x\" $ do\n      x <- gen
  $ Gen.int (Range.linear 0 100)\n      y <- gen $ Gen.int (Range.linear 0 100)\n
  \     myFunc x y `shouldBe` myFunc y x\n\n  -- top-level property that's not grouped
  under\n  -- either myFunc nor otherFunc\n  prop \"myFunc x . otherFunc === id\"
  $ do\n    x <- gen $ Gen.int (Range.linear 0 100)\n    let input = \n          Gen.list
  (Range.linear 0 10) $\n            Gen.string (Range.linear 0 100) Gen.unicode\n
  \   (myFunc x . otherFunc) P.=== id `shouldSatisfy` P.isoWith input\n\n  describe
  \"ioFunc\" $ do\n    it \"returns the correct string\" $ do\n      DbConnFixture
  conn <- getFixture\n      ioFunc conn 1 `shouldSatisfy` P.returns (P.eq \"hello
  world\")\n\n    it \"errors on bad input\" $ do\n      DbConnFixture conn <- getFixture\n
  \     ioFunc conn (-1) `shouldSatisfy` P.throws (P.eq MyException)\n\n    it \"returns
  the expected result\" $ do\n      DbConnFixture conn <- getFixture\n      ioFunc
  conn 100 `shouldSatisfy` P.matchesSnapshot\n\n  describe \"getUser\" $ do\n    it
  \"returns a matching user\" $ do\n      getUser \"user1\" `shouldSatisfy` P.con
  User{name = P.eq \"user1\", email = P.contains \"@\"}\n\nnewtype DbConnFixture =
  DbConnFixture Connection\n\ninstance Fixture DbConnFixture where\n  fixtureAction
  = do\n    conn <- initDBConn\n    setupTestTables conn\n    pure . withCleanup (DbConnFixture
  conn) $ do\n      destroyTestTables conn\n      closeConn conn\n```\n\n## Quickstart\n\n1.
  If you're using Skeletest as a standalone library, add the following to your cabal
  file:\n\n    ```cabal\n    test-suite my-tests\n      ghc-options: -F -pgmF=skeletest-preprocessor\n
  \     build-tool-depends: skeletest:skeletest-preprocessor\n    ```\n\n1. Add `Main.hs`:\n\n
  \   ```haskell\n    import Skeletest.Main\n    ```\n\n1. To test some module `MyLib.Foo`,
  add a new file `MyLib/FooSpec.hs`:\n\n    ```haskell\n    module MyLib.FooSpec (spec)
  where\n\n    import Skeletest\n    import qualified Skeletest.Predicate as P\n\n
  \   spec :: Spec\n    spec = do\n      describe \"myFunc\" $ do\n        it \"does
  a thing\" $ do\n          myFunc 1 `shouldBe` 2\n    ```\n\n## Guide\n\n### Defining
  tests\n\nTests should be defined in a `spec` identifier with the type `Spec`. A
  `Spec` is defined as a tree of tests, written using do-notation. The entire `Spec`
  is wrapped in an implicit `describe` containing the name of the module without the
  `Spec` suffix. The `describe` and `it` functions are intended to read nicely if
  you use types or function names as `describe` groups.\n\n```haskell\nspec :: Spec\nspec
  = do\n  -- A property test, grouped under the implicit module group.\n  -- See the
  \"Property tests\" section.\n  prop \"encodeUser . decodeUser === id\" $ do\n    ...\n\n
  \ describe \"encodeUser\" $ do\n    -- A unit test testing a particular aspect of
  the encodeUser function.\n    -- See the \"Unit tests\" section.\n    it \"encodes
  a user with a name\" $ do\n      ...\n\n    it \"encodes an empty user\" $ do\n
  \     ...\n```\n\nTests can also be marked as `xfail` or `skip`. `xfail` tests will
  succeed if the test fails, or fail if the test unexpectedly passes. `skip` tests
  will skip running the test entirely. Both `xfail` and `skip` require a message explaining
  the reason it; this is a good place to put links to the relevant ticket or issue.\n\n```haskell\n--
  xfail a single test\nxfail \"https://github.com/my-company/my-repo/issues/123\"
  . it \"does a thing\" $ do\n  ...\n\n-- xfail multiple tests\nxfail \"https://github.com/my-company/my-repo/issues/123\"
  $ do\n  it \"does a thing\" $ do\n    ...\n\n  it \"does another thing\" $ do\n
  \   ...\n\n-- skip a whole describe\nskip \"https://github.com/my-company/my-repo/issues/123\"
  . describe \"myFunc\" $ do\n  it \"does a thing\" $ do\n    ...\n```\n\n`markManual`
  marks tests in the given section as manual tests, which means they won't be run
  when no tests are selected (see the \"Test selection\" section).\n\n```haskell\nmarkManual
  $ do\n  ...\n```\n\n### Test selection\n\nTest targets are specified as plain positional
  arguments, with the following syntax:\n\n| Target | Explanation |\n|--------|-------------|\n|
  `*`                     | Selects all tests (useful to include manual tests) |\n|
  `[myFooFunc]`           | Tests including substring      |\n| `@fast`                 |
  Tests tagged with marker       |\n| `test/MyLib/FooSpec.hs` | Tests in file, relative
  to CWD |\n| `test/MyLib/FooSpec.hs[myFooFunc]` | Syntax sugar for `(test/MyLib/FooSpec.hs
  and [myFooFunc])` |\n| `[func1] and @fast`     | Tests matching both targets    |\n|
  `[func1] or @fast`      | Tests matching either target   |\n| `not [func1]`           |
  Tests not matching target      |\n\nSome more examples:\n* `test/MySpec.hs and ([myFooFunc]
  or [myBarFunc]) and @fast`\n* `[myFooFunc] or test/MySpec.hs[myBarFunc]`\n \nWhen
  multiple targets are specified, they are joined with `or`.\n\n### Assertions and
  Predicates\n\nAll assertions in Skeletest use the following functions:\n\n* `shouldSatisfy`\n*
  `shouldNotSatisfy` - equivalent to `shouldSatisfy` with `P.not`\n* `shouldBe` -
  equivalent to `shouldSatisfy` with `P.eq`\n* `shouldNotBe` - equivalent to `shouldNotSatisfy`
  with `P.eq`\n\n`shouldSatisfy` is the most general function, but the others are
  provided for convenience. `shouldSatisfy` takes in the value being tested on the
  left, and a predicate on the right. Predicates should be imported from `Skeletest.Predicate`,
  qualified as `P`.\n\nSome notable predicates are listed here. See the [Haddocks](https://hackage.haskell.org/package/aeson-schemas/docs/Skeletest-Predicate.html)
  for a full list of available predicates.\n\n* `P.eq 10`\n    * Satisfied when the
  actual value is equal to `10`.\n\n* `P.just (P.gt 10)`\n    * Satisfied when the
  actual value is a `Just` containing a value greater than `10`.\n\n* `P.tup (P.eq
  10, P.anything)`\n    * Satisfied when the actual value is a tuple where the first
  element is `10` and the second element is anything. `P.tup` works for any tuple
  up to 6 elements.\n\n* `P.con User{name = P.hasPrefix \"user_\"}`\n    * Satisfied
  when the actual value is a `User` whose `name` field starts with `user_`. Omitted
  fields are not checked and can contain anything. `P.con` also works for positional
  constructors, except all arguments must contain predicates.\n\n* `P.eq 10 P.<<<
  f`\n    * Satisfied when the actual value is equal to `10` after being applied to
  `f`.\n\n* `P.approx P.tol 0.5`\n    * Satisfied when the actual value is approximately
  equal to `0.5`. Useful for floating point values. See docs for an explanation of
  how to adjust the tolerance with `P.tol`.\n\n* `P.and [P.gt 0, P.lt 10]`\n    *
  Satisfied when the actual value satisfies all of the given predicates. For just
  two predicates, `P.&&` can be used. Also see: `P.or`, `P.||`\n\n* `P.returns (P.gt
  10)`\n    * Satisfied when the left hand side is an `IO` action that returns a value
  greater than `10`.\n\n* `P.throws MyException`\n    * Satisfied when the left hand
  side is an `IO` action that throws the given exception.\n\n### Unit and Integration
  tests\n\nUnit and integration tests are written with `it`, and run in `IO`.\n\n```haskell\ndescribe
  \"mkUser\" $ do\n  it \"creates a user with the given name\" $ do\n    let x = mkUser
  (Just \"alice\")\n    x `shouldBe` User{name = \"alice\"}\n\n    mkUser (Just \"alice\")
  `shouldBe` User{name = \"alice\"}\n\n  it \"creates a user with a default name\"
  $ do\n    mkUser Nothing `shouldSatisfy` P.con User{name = P.hasPrefix \"user_\"}\n\ndescribe
  \"addService\" $ do\n  it \"queries the addition service\" $ do\n    x <- addService
  1 2\n    x `shouldBe` 3\n\n    addService 1 2 `shouldSatisfy` P.returns (P.eq 3)\n```\n\n###
  Snapshot tests\n\n[Snapshot tests](https://ro-che.info/articles/2017-12-04-golden-tests)
  can be done in any kind of test, although it's usually done in unit tests. Snapshot
  tests are best suited for testing that behavior doesn't change; they aren't great
  for testing _correctness_.\n\nTo write a snapshot test, simply use the `P.matchesSnapshot`
  predicate.\n\n```haskell\nmyFunc 1 `shouldSatisfy` P.matchesSnapshot\n\n-- can also
  snapshot within a nested predicate\nfetchUserFromDb \"alice\" `shouldSatisfy` P.returns
  (P.just P.matchesSnapshot)\n```\n\nWhen running for the first time, or when the
  snapshot is changing, use the `-u`/`--update` flag. For a given test file `MyLib/FooSpec.hs`,
  snapshots are stored at `MyLib/__snapshots__/FooSpec.snap.md`. Snapshots are stored
  in a Markdown file that's easy to visually inspect in an editor or on GitHub.\n\nValues
  will be rendered via their internal heap representation; even if the type has a
  `Show` instance, it won't be used. To use the show instance, add the following to
  `Main.hs`:\n\n```haskell\nsnapshotRenderers =\n  [ renderWithShow @User\n  ]\n```\n\nYou
  can also specify a custom renderer by implementing a `SnapshotRenderer` yourself,
  probably using `plainRenderer`.\n\nCurrently, old snapshots are not cleaned up,
  so you'll have to manually clean up snapshots if you rename or remove a test. ([Issue
  #24](https://github.com/brandonchinn178/skeletest/issues/24))\n\n### Property tests\n\nProperty
  tests are written with `prop` and run in the `PropertyM` monad (`Property` is an
  alias for `PropertyM ()`). To write property tests, add the following imports:\n\n```haskell\nimport
  qualified Skeletest.Prop.Gen as Gen\nimport qualified Skeletest.Prop.Range as Range\n```\n\nProperty
  tests consist of two things: generating random data with `forAll` and checking properties
  using the usual `shouldSatisfy` assertions. See the [Haddocks](https://hackage.haskell.org/package/skeletest/docs/Skeletest-Prop-Gen.html)
  for the different ways to generate data.\n\n```haskell\nprop \"reverse does not
  change the length\" $ do\n  xs <- forAll $ Gen.list (Gen.range 0 10) Gen.int\n  length
  (reverse xs) `shouldBe` length xs\n```\n\nOne common usecase is to verify that two
  functions are isomorphic. This can be tested with the `P.===` operator:\n\n```haskell\nprop
  \"decodeUser . encodeUser === pure\" $ do\n  let genUser = User <$> Gen.text (Gen.range
  0 10) Gen.unicode\n  (decodeUser . encodeUser) P.=== pure `shouldSatisfy` P.isoWith
  genUser\n```\n\nIf a test fails, it'll say something like `Rerun with --seed=6430645105429331403:9929029875326664391
  to reproduce`. Rerunning with that flag will generate the same random value for
  debugging.\n\nTo ignore certain values, use `discard`:\n\n```haskell\nx <- Gen.int
  (Gen.range (-10) 10)\nwhen (x == 0) discard\n...\n```\n\nProperty tests can also
  be configured with the following functions. These must be called at the very beginning
  of the test, before any `forAll` calls. Values specified with CLI flags take precedence
  over the values in the code.\n\n* `setDiscardLimit`\n    * The max number of values
  to discard before reporting a failure\n    * Default: `100`\n\n* `setShrinkLimit`\n
  \   * The max number of shrinks before giving up\n    * Default: `1000`\n\n* `setShrinkRetries`\n
  \   * The number of times to re-run a test during shrinking. This is useful if you
  are testing something which fails non-deterministically and you want to increase
  the change of getting a good shrink. e.g. `10` means a test must pass 10 times before
  trying a different shrink\n    * Default: `0`\n\n* `setConfidence`\n    * The acceptable
  occurrence of false positives. e.g. `10^9` means accepting a false positive for
  1 in 10^9 tests\n    * Default: don't check confidence\n\n* `setVerifiedTermination`\n
  \   * Validate confidence is reached\n    * Default: disabled\n\n* `setTestLimit`\n
  \   * The number of tests to run before reporting success\n    * Default: `100`\n
  \   * CLI flag: `--prop-test-limit`\n\nInternally, Skeletest uses Hedgehog to run
  property tests, but the API is intended to stay the same, even if the underlying
  engine changes.\n\n### Fixtures\n\nFixtures are a useful way to reuse setup logic
  between tests. They're commonly used to initialize a database connection, set up
  users, etc. Fixtures can also use other fixtures. Fixtures are cached for the given
  scope and cleaned up when that scope is exited.\n\n```haskell\ndata DbConnFixture
  = DbConnFixture Connection\n\ninstance Fixture DbConnFixture where\n  -- defaults
  to per-test\n  fixtureScope = PerSessionFixture\n\n  fixtureAction = do\n    conn
  <- initDBConn\n    pure . withCleanup (DbConnFixture conn) $ do\n      closeConn
  conn\n\nspec :: Spec\nspec = do\n  it \"creates a user\" $ do\n    DbConnFixture
  conn <- getFixture\n    createUser conn \"alice\" `shouldSatisfy` P.not (P.throws
  P.anything)\n\n  it \"fetches a user\" $ do\n    -- reuses the same connection initialized
  in the first test\n    DbConnFixture conn <- getFixture\n    getUser conn \"alice\"
  `shouldSatisfy` P.just (P.con User{name = P.eq \"alice\"})\n```\n\n#### Built-in
  fixtures\n\nThe following fixtures are available out of the box:\n\n* `FixtureTmpDir`
  - Contains a temporary directory that is cleaned up between tests.\n\n    ```haskell\n
  \   FixtureTmpDir tmpDir <- getFixture\n    writeFile (tmpDir </> \"myfile.txt\")
  \"test\"\n    ````\n\n### Markers\n\nMarkers are a useful way to mark tests for
  selection (see \"Test selection\"). There are two ways to mark a test:\n\n1. With
  anonymous markers:\n\n    ```haskell\n    withMarkers [\"foo\", \"bar\"] $ do\n
  \     ...\n    ```\n\n    All tests in the given section will be marked with anonymous
  markers named \"foo\" and \"bar\", which can be selected with `@foo` and `@bar`,
  respectively.\n\n1. With typed markers:\n\n    ```haskell\n    data MyMarker = MyMarker
  Int\n    instance IsMarker MyMarker where\n      getMarkerName _ = \"my-marker\"\n\n
  \   withMarker (MyMarker 10) $ do\n      ...\n    ```\n\n    All tests in the given
  section will be marked with the given marker, which can be selected with `@my-marker`.
  You can see if a test has a marker with `findMarkers` (see the \"Hooks\" section).\n\n###
  Custom CLI flags\n\nTo register and use your own CLI flags, do the following:\n\n1.
  Create an instance of `IsFlag`\n\n1. In `Main.hs`, add the following:\n\n    ```haskell\n
  \   import TestUtils.Flags (MyFlag)\n\n    cliFlags =\n      [ flag @MyFlag\n      ]\n
  \   ```\n\n1. In a fixture or test, do the following:\n\n    ```haskell\n    MyFlag
  flagVal <- getFlag\n    ```\n\n### Hooks\n\nSkeletest lets you hook into specific
  parts of test execution. Skeletest currently supports the following hooks:\n\n*
  `hookRunTest` - Modify how/if a test is run. Takes the `TestInfo` of the currently
  running test. `TestInfo` contains `testInfoMarkers`, which you can query with `findMarker`
  or `hasMarkerNamed`.\n\n### Plugins\n\nSkeletest is fully pluggable; any configuration
  specified in `Main.hs` (e.g. `cliFlags` or `snapshotRenderer`) can be defined in
  a `Plugin` that you can import from another module or even another package.\n\n```haskell\nmodule
  TestUtils.Plugins (myPlugin) where\n\nimport Skeletest.Plugin\n\nmyPlugin :: Plugin\nmyPlugin
  =\n  defaultPlugin\n    { hooks =\n        defaultHooks\n          { hookRunTest
  = \\testInfo runTest -> do\n              putStrLn \"before test\"\n              result
  <- runTest\n              putStrLn \"after test\"\n              pure result\n          }\n
  \   }\n```\n\n```haskell\nimport TestUtils.Plugins (myPlugin)\n\nplugins =\n  [
  myPlugin\n  ]\n```\n"
description-type: markdown
hash: 24534ec178cafe80115ad09eae69cfedfafb56432befa0b53aff51f73bd57fd0
homepage: https://github.com/brandonchinn178/skeletest#readme
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: Brandon Chinn <brandonchinn178@gmail.com>
synopsis: Batteries-included, opinionated test framework
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  process: '>=0'
  skeletest: '>=0'
  text: '>=0'
  unliftio: '>=0'
