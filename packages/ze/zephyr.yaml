homepage: https://github.com/MaybeJustJames/zephyr#readme
changelog-type: markdown
hash: a86931d6860c5f7a6c9a742314b964b7ba147c4eeeb111b04559cc356bfb2256
test-bench-deps:
  base: '>=4.16.2 && <4.17'
  hspec: -any
  text: '>=1.2.5.0 && <1.3'
  hspec-core: <2.9.3
  process: ==1.6.13.1
  HUnit: -any
  containers: '>=0.6.5.1 && <0.7'
  zephyr: '>=0.5 && <0.6'
  language-javascript: ==0.7.0.0
  purescript: '>=0.15.4 && <0.16'
  mtl: '>=2.2.2 && <2.3'
  transformers: '>=0.5.6.2 && <0.6'
  optparse-applicative: ==0.17.0.0
  QuickCheck: '>=2.12.1'
  aeson: '>=2.0.3.0 && <2.1'
  directory: '>=1.3.6.2 && <1.4'
maintainer: James Collier <jhc_at_home@proton.me>
synopsis: Zephyr, tree-shaking for the PureScript language
changelog: |
  # ChangeLog
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)

  ## [Unreleased]

  ## [v0.5.3]
  ### Fixed
  - Dead-code elimination of foreign es-modules now works

  ## [v0.5.2]
  ### Fixed
  - Handling CoreFn generated by purescript since `0.15.3`
  - Handling of multibyte UTF-8 characters correctly in foreign imports

  ## [v0.5.0]
  ### Added
  - Update to PureScript 0.15 (#77 Thanks @i-am-the-slime)
  - Migrate tests to es-modules

  ## [v0.4.0]
  ### Added
  - Use purescript 0.14 for code generation

  ### Fixed
  - DCE of re-exported symbols for purescipt 0.14 modules

  ## [v0.3.2]
  - Copy foreign modules from source directories if they are not present in the
    `output` directory.

  [Unreleased]: https://github.com/MaybeJustJames/zephyr/compare/v0.5.3...HEAD
  [v0.5.2]: https://github.com/MaybeJustJames/zephyr/compare/v0.5.2...v0.5.3
  [v0.5.2]: https://github.com/MaybeJustJames/zephyr/compare/v0.5.0...v0.5.2
  [v0.5.0]: https://github.com/MaybeJustJames/zephyr/compare/v0.4.0...v0.5.0
  [v0.4.0]: https://github.com/MaybeJustJames/zephyr/compare/v0.3.2...v0.4.0
  [v0.3.2]: https://github.com/MaybeJustJames/zephyr/compare/v0.3.1...v0.3.2
basic-deps:
  bytestring: '>=0.11.3.1 && <0.12'
  ansi-wl-pprint: '>=0.6.9 && <0.7'
  base: '>=4.16.2 && <4.17'
  unordered-containers: ==0.2.19.1
  text: '>=1.2.5.0 && <1.3'
  filepath: '>=1.4.2.2 && <1.5'
  async: -any
  containers: '>=0.6.5.1 && <0.7'
  ansi-terminal: ==0.11.*
  zephyr: '>=0.5 && <0.6'
  language-javascript: ==0.7.0.0
  utf8-string: '>=1.0.2 && <1.1'
  formatting: -any
  purescript: '>=0.15.4 && <0.16'
  mtl: '>=2.2.2 && <2.3'
  transformers: '>=0.5.6.2 && <0.6'
  optparse-applicative: '>=0.17.0.0 && <0.18'
  boxes: '>=0.1.5 && <0.2'
  Glob: '>=0.10.2 && <0.11'
  aeson: '>=2.0.3.0 && <2.1'
  safe: '>=0.3.19 && <0.4'
  directory: '>=1.3.6.2 && <1.4'
all-versions:
- 0.1.1.0
- 0.1.4
- 0.2.0
- 0.2.1
- 0.3.1
- 0.3.2
- 0.5.3
author: Marcin Szamotulski <profunctor@pm.me>
latest: 0.5.3
description-type: markdown
description: |
  # zephyr
  [![Maintainer: MaybeJustJames](https://img.shields.io/badge/maintainer-MaybeJustJames-lightgrey.svg)](http://github.com/MaybeJustJames)
  ![zephyr](https://github.com/coot/zephyr/workflows/Haskell%20CI/badge.svg)

  A tree-shaking tool for [PureScript](https://github.com/purescript/purescript).
  `zephyr` takes root terms, finds all terms which are required to evaluate
  them, and generates code just for them.  This is done across all dependencies,
  and can substantially reduce the size of PureScript bundles.  `zephyr` can also
  evaluate some expressions (an experimental feature).

  # Installation
  The simplest option is to download the latest [release](https://github.com/coot/zephyr/releases) binary. You may also build from source (see "Build & Test" section below).

  # Usage
  ```sh
  # compile your project
  purs compile -g corefn bower_components/purescript-*/src/**/*.purs src/**/*.purs

  # run `zephyr`
  zephyr -f Main.main
  ```
  then you can bundle with `purs bundle` command:

  ```sh
  purs bundle -o app.js -m Main dce-output/**/*.js
  ```
  You can integrate it with other build tools, see
  [below](#Integration-with-build-tools).

  You can specify modules as entry points, which is the same as specifying all
  exported identifiers.

  ```sh
  # include all identifiers from Data.Eq module
  zephyr Data.Eq

  # as above
  zephyr module:Data.Eq

  # include Data.Eq.Eq identifier of Data.Eq module
  zephyr ident:Data.Eq.Eq

  # include 'Data.Eq.eq' identifier
  zephyr Data.Eq.eq
  ```

  `zephyr` reads corefn json representation from the `output` directory, removes
  non transitive dependencies of entry points and generates common js modules (or
  corefn representation) to `dce-output` directory.

  # Evaluation of literal expressions

  Zephyr can evaluate some literal expressions.
  ```purescript
  import Config (isProduction)

  a = if isProduction
    then "api/prod/"
    else "api/dev/"
  ```
  will be transformed to
  ```purescript
  a = "api/prod/"
  ```
  whenever `isProduction` is `true`.  This allows to have different
  development and production environments while still ship a minified code which
  only contains production code.  You may define `isProduction` in a module under
  a `src-prod` directory and include it when compiling production code with `pulp
  build -I src-prod` and to have another copy for your development environment
  under `src-dev` where `isProduction` is set to `false`.

  # Integration with build tools

  `zephyr` can be integrated with

  * [pulp](https://github.com/purescript-contrib/pulp): use
    `pulp build -- -g corefn` to compile, and `pulp browserify --skip-compile -o dce-output`
    to bundle `zephyr`'s output.
  * [parcel](https://github.com/parcel-bundler/parcel)
  * [spago](https://github.com/purescript/spago). See
    [this](https://github.com/thomashoneyman/purescript-halogen-realworld)
    example.  Use `spago build --purs-args '--codegen corefn,js'` to compile, using
    `spago bundle` is currently affected by
    [issue](https://github.com/purescript/spago/issues/216).

  # Build & Test

  ```sh
  cabal build exe:zephyr
  ```

  To run tests

  ```sh
  cabal run zephyr-test
  ```

  # C Libraries

  The released binaries are dynamically linked against `glibc`, so if your system is using `musl` (like Alpine Linux in `docker`) or another alternative C library, you will need to compile `zephyr` from source using `ghc` on that system.

  # Comments

  The `-f` switch is not 100% safe.  Upon running, `zephyr` will remove exports from
  foreign modules that seems to be not used: are not used in PureScript code and
  seem not to be used in the foreign module.  If you simply assign to `exports`
  using JavaScript dot notation then you will be fine, but if you use square
  notation `exports[var]` in a dynamic way (i.e. var is a true variable rather
  than a string literal), then `zephyr` might remove code that shouldn't be
  removed.
license-name: MPL-2.0
