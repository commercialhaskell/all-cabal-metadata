all-versions:
- 0.0.0.20190428
- 0.0.0.20190501
- 0.0.0.20190511
- 0.0.0.20190513
- 0.0.0.20190519
- 0.0.1.20190623
- 0.0.4.20190711
- 0.0.7.20190815
- 0.0.8.20191027
- 0.0.9.20191031
- 0.0.10.20191104
author: Julien Moutinho <julm+hjugement@autogeree.net>
basic-deps:
  aeson: '>=1.3'
  base: '>=4.6 && <5'
  base64-bytestring: '>=1.0'
  binary: '>=0.8'
  bytestring: '>=0.10'
  containers: '>=0.5'
  cryptonite: '>=0.25'
  deepseq: '>=1.4'
  memory: '>=0.14'
  random: '>=1.1'
  reflection: '>=2.1'
  text: '>=1.2'
  transformers: '>=0.5'
  unordered-containers: '>=0.2.8'
changelog: ''
changelog-type: ''
description: "# Voting protocol\n\n## Ballot\nBallots are encrypted using public-key
  cryptography\nsecured by the <i>Discrete Logarithm problem</i>:\nfinding `x` in
  <code>(g^x `mod` p)</code>, where `p` is a large prime\nand `g` a generator of `Gq`,
  the multiplicative subgroup of order `q`,\nin `Fp` (the finite prime field whose
  characteristic is `p`).\n\nHere, `p` is 2048-bit and `q` is 256-bit.\n\nThe signing
  (Schnorr-like), the encrypting (ElGamal-like)\nand the <i>Decisional Diffe Hellman</i>
  (DDH) assumption,\nall rely on the hardness of that problem.\n\n### Ballot signing\nThe
  <i>Schnorr protocol</i> is used to prove that a voter has knowledge\nof the secret
  key used to sign their votes.\n\n### Voter's credential\nA voter's credential is
  a secret key (the signing key)\nfrom which a public part can be derived (the verification
  key).\n\nThe association between the public part and the corresponding voter's identity\ndoes
  not need to be known, and actually should not be disclosed to satisfy\ne.g. the
  French requirements regarding voting systems.\nUsing credentials prevent the submission
  of duplicated ballots\n(because they are added as an additional input to the random
  oracle\nin the <i>non-interactive zero-knowledge</i> (NIZK) proofs for ciphertext
  well-formedness).\nThis allows a testing of duplicates which depends only on the
  size of the number of voters,\nand thus enables Helios-C to scale for larger elections
  while attaining correctness.\n\n## Tallying\nBallots are added without being decrypted\nbecause
  adding (multiplying actually) ciphertexts then decrypting,\nis like decrypting then
  adding plaintexts (<i>additive homomorphism</i>).\nWhich requires to solve the <i>Discrete
  Logarithm Problem</i>\nfor numbers in the order of the number of voters,\nwhich
  is not hard for small numbers (with a lookup table as here,\nor with Pollard’s rho
  algorithm for logarithms).\n\n## Verifying\nThe <i>Chaum-Pedersen protocol</i> (proving
  an equality of discrete logarithms)\nis used to prove that ciphertexts are well-formed\n(encrypting
  a 0 or a 1… or any expected natural) without decrypting them.\nWhich is known as
  a <i>Disjunctive Chaum-Pedersen</i> proof of partial knowledge.  \nSee: [Some ZK
  security proofs for Belenios](https://hal.inria.fr/hal-01576379).\n\nA <i>strong
  Fiat-Shamir transformation</i> is used\nto transform the <i>interactive zero-knowledge</i>
  (IZK) <i>Chaum-Pedersen protocol</i>\ninto a <i>non-interactive zero-knowledge</i>
  (NIZK) proof, using a SHA256 hash.  \nSee: [How not to Prove Yourself: Pitfalls
  of the Fiat-Shamir Heuristic and Applications to Helios](https://eprint.iacr.org/2016/771.pdf).\n\n##
  Public Key Infrastructure\n(TODO) A Pedersen's <i>distributed key generation</i>
  (DKG) protocol\ncoupled with ElGamal keys (under the DDH assumption),\nis used to
  have a fully distributed semantically secure encryption.\n"
description-type: markdown
hash: 904724b449058e4bca15f8d58741cbb6d9fb7964b85855ff29ea02f2e1e81339
homepage: ''
latest: 0.0.10.20191104
license-name: GPL-3.0-only
maintainer: Julien Moutinho <julm+hjugement@autogeree.net>
synopsis: A cryptographic protocol for the Majority Judgment.
test-bench-deps:
  QuickCheck: '>=2.11'
  aeson: '>=1.3'
  base: '>=4.6 && <5'
  containers: '>=0.5'
  criterion: '>=1.4'
  deepseq: '>=1.4'
  hjugement-protocol: '>=0'
  random: '>=1.1'
  tasty: '>=0.11'
  tasty-hunit: '>=0.9'
  tasty-quickcheck: '>=0'
  text: '>=1.2'
  transformers: '>=0.5'
