all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.1
- 1.2.0
- 1.3.0
- 1.4.0
- 1.5.0
author: Ian Grant Jeffries
basic-deps:
  aeson: '>=0.7 && <1.4'
  base: '>=4.9 && <5'
  hashable: '>=1.2 && <1.3'
  text: '>=1.2 && <1.3'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.10 && <0.13'
changelog: |
  # 1.5.0

  + Drop QuickCheck dependency (thanks @mmhat !).

  # 1.4.0

  + Enable GHC 8.4 (thanks @4e6 !).
  + Drop GHC 7.10.

  # 1.3.0

  + Test with GHC 8.2. Drop GHC 7.8.

  # 1.2.0

  + Track upper bounds in a Hackage revision instead of source code.

  # 1.1.1

  + Bump aeson.

  # 1.1.0.2

  + Raise test dep upper bounds.

  # 1.1.0.1

  + Bump `vector`.

  # 1.1.0.0

  + Rename the module to `JSONPointer`.
  + Bump aeson.
  + Derive `Semigroup` for `Pointer`.
  + Reorganize code.

  # 1.0.0.2

  + Bump hspec.

  # 1.0.0.1

  + Remove HUnit dep.

  # 1.0.0.0

  + Bump aeson.

  # 0.3.0.2

  + Switch to hspec for tests.

  # 0.3.0.1

  + Enable GHC 8.

  # 0.3.0.0

  + Rewrite.

  # 0.2

  + Fix mistake in `resolveRefTok`.
  + Split errors over two types.
  + Switch the order of pointer and value arguments for functions that take both. The pointer now comes first.

  # 0.1

  + Initial implementation.
changelog-type: markdown
description: |
  # Summary

  [JSON Pointer](http://tools.ietf.org/html/rfc6901) library for Haskell.

  [Hackage](https://hackage.haskell.org/package/hjsonpointer) / [GitHub](https://github.com/seagreen/hjsonpointer) / [Travis CI](https://travis-ci.org/seagreen/hjsonpointer)

  # Example

  ```haskell
  module Example where

  import           Control.Monad (unless)
  import           Data.Aeson
  import qualified JSONPointer   as JP

  main :: IO ()
  main = do
      -- JSON Pointers must either be empty or start with a /.
      pntr1 <- case JP.unescape "/foo/0" of
                   Left _     -> error "Failed to construct JSON Pointer."
                   Right pntr -> return pntr

      -- We can also write JSON Pointers in Haskell.
      let pntr2 = JP.Pointer [JP.Token "/"]
      -- When we do this we don't have to escape / or ~ characters
      -- (as ~1 and ~0 respectively) like we do in an escaped JSON
      -- Pointer string.
      unless (JP.unescape "/~1" == Right pntr2) (error "ohno!")

      print (JP.resolve pntr1 document)
      print (JP.resolve pntr2 document)

    where
      document :: Value
      document = object [ "foo" .= [String "bar", String "baz"]
                        , "/"   .= String "quux"
                        ]
  ```

  Output:
  ```
  Right (String "bar")
  Right (String "quux")
  ```
description-type: markdown
hash: a015fff349399e8526594788e1caf7cda715b23d7c5aa49ba6eec98916862ef9
homepage: https://github.com/seagreen/hjsonpointer
latest: 1.5.0
license-name: MIT
maintainer: ian@housejeffries.com
synopsis: JSON Pointer library
test-bench-deps:
  QuickCheck: <2.12
  aeson: <1.5
  base: <4.12
  hjsonpointer: '>=0'
  hspec: '>=2.2 && <2.6'
  http-types: '>=0.8 && <0.13'
  text: <1.3
  unordered-containers: <0.3
  vector: <0.13
