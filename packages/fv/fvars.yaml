all-versions:
- 1.0.0.0
author: Erick Gonzalez <erick@codemonkeylabs.de>
basic-deps:
  base: '>=4.7 && <5'
  exceptions: '>=0.10 && <0.11'
  monad-control: '>=1.0 && <1.1'
  mtl: '>=2.2.2 && <2.3'
  transformers: '>=0.5.5 && <0.6'
changelog: |
  # Changelog for rwlock

  ## Unreleased changes
changelog-type: markdown
description: "# FVar - Fast Vars for Haskell\nThis library implements an \"FVar\"
  or _fast Var_. The idea is that it allows concurrent readers\nto access shared data
  without locking, but the moment a writer performs a write it gets exclusive\naccess
  to the var. If there are readers currently accesing the data, it waits until they
  complete\nthe operation, blocks any further reads and then it performs the write.
  Once it is done, it\nreenables the stalled readers and lockless operation continues.\n\nThe
  implementation favours reads above writes. When reads are stalled to service a write,\nall
  read operations stalled waiting for the write to complete are allowed to be performed\nright
  after the one write is completed, regardless of whether there might be other writes\nalready
  waiting. After those pending reads are finished, another write will be allowed and
  \nthus new read requests will be blocked etc. This means the FVar lock is better
  suited for\napplications where data is read by multiple threads often but seldom
  written to.\n\n"
description-type: markdown
hash: 5c1728de3cacfaabd557ad44225d3312cface39838737d6e206e70cd6a948c9f
homepage: https://gitlab.com/codemonkeylabs/fvars#readme
latest: 1.0.0.0
license-name: BSD-3-Clause
maintainer: erick@codemonkeylabs.de
synopsis: Fast Mutable Vars
test-bench-deps:
  async: '>=0'
  base: '>=4.7 && <5'
  fvars: '>=0'
  hspec: '>=0'
