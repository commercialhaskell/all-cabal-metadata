all-versions:
- 0.8.0
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.4
- 0.9.5
- 0.9.6
- 0.9.7
- 0.9.8
- 0.9.9
- 0.9.10
author: ALeX Kazik
basic-deps:
  base: '>=4.8.2.0 && <5'
  binary: '>=0.7.5.0 && <0.9'
  bytestring: '>=0.10.6.0 && <0.12'
  case-insensitive: '>=1.2.0.5 && <1.3'
  containers: '>=0.5.6.2 && <0.7'
  dlist: '>=0.7.1.2 && <1.1'
  primitive: '>=0.6.1.0 && <0.10'
  text: '>=1.2.2.0 && <2.2'
  vector: '>=0.11.0.0 && <0.14'
changelog: |
  # Changelog for qrcode-core

  ## 0.9.10 -- 2024-09-29

  * Support for text-2.1

  ## 0.9.9 -- 2023-10-10

  * Support for primitive-0.9

  ## 0.9.8 -- 2023-04-30

  * Support for primitive-0.8

  ## 0.9.7 -- 2023-04-23

  * Support for vector-0.13

  ## 0.9.6 -- 2023-03-19

  * Support for text-2.0

  ## 0.9.5 -- 2022-03-16

  * Support for bytestring-0.11

  ## 0.9.4 -- 2020-07-19

  * Support for dlist-1.0

  ## 0.9.3 -- 2020-04-27

  * Adapt to base-4.13

  ## 0.9.2 -- 2019-12-19

  * Fix `toMatrix`

  ## 0.9.1 -- 2019-05-23

  * Support for primitive 0.7

  ## 0.9.0 -- 2019-02-16

  * Changed UTF-8 encoding: encoding a code point outside the unicode range will
    now fail the encoding, previously a replacement character was inserted
  * Removed a, internal only, partial function
  * Encoding empty data will result in an empty segment
  * Encoding an empty segment fails
  * Added functions to create an (non empty) segment without data
  * Remove StrictData

  ## 0.8.0 -- 2019-01-09

  * Initial release
changelog-type: markdown
description: |
  # qrcode

  QR code library in pure Haskell

  ## qrcode-core

  Basic functionality to create a QRCode.

  All modes are supported:
  - Numeric (digits only)
  - Alphanumeric (digits, letters and some other chars)
  - Binary / Text (ISO 8859-1 and UTF-8)
  - Kanji

  There are function to create those specifically and an auto-detect.

  The module `Codec.QRCode` has functions which creates an image out of the input.

  The module `Codec.QRCode.Intermediate` has functions to create segments of a
  QRCode, join them together and finally create the image.

  The core of the resulting image is an `Vector` of `Bool`s, each element
  describing a module ("pixel") where `False` is white and `True` is black.

  ## thanks

  Project Nayuki for https://github.com/nayuki/QR-Code-generator,
  which is the foundation of this package.
description-type: markdown
hash: 2b0ec01ed8eed344c3ed6885310016dc42113af79426ffbcca41ac384ca9db5c
homepage: https://github.com/alexkazik/qrcode#readme
latest: 0.9.10
license-name: MIT
maintainer: alex@kazik.de
synopsis: QR code library in pure Haskell
test-bench-deps: {}
