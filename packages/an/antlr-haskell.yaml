all-versions:
- 0.1.0.0
- 0.1.0.1
author: Karl Cronburg & Matthew Ahrens
basic-deps:
  base: '>=4.11 && <5'
  containers: '>=0.6 && <0.7'
  deepseq: '>=1.4 && <1.5'
  hashable: '>=1.2 && <1.4'
  haskell-src-meta: '>=0.8 && <0.9'
  mtl: '>=2.2 && <2.3'
  template-haskell: '>=2.14 && <2.16'
  text: '>=1.2 && <1.3'
  th-lift: '>=0.7.11 && <0.9'
  transformers: '>=0.5 && <0.6'
  unordered-containers: '>=0.2 && <0.3'
changelog: |+
  # Change Log

  * April 14, 2018: Moved to hpack's package.yaml format instead of native cabal
    file.

changelog-type: markdown
description: |+
  # antlr-haskell
  A Haskell implementation of ANTLR.

  In implementing ANTLR we referenced the behavior of the original Java version
  (ANTLR4):
  [The definitive ANTLR4 Reference.](https://pragprog.com/book/tpantlr2/the-definitive-antlr-4-reference)
  However we have taken much liberty in the design of this library compared to the
  workflow of the original Java version. In particular in implementing ANTLR for
  Haskell we have followed the following principles:

  - Parsing backends should be interchangeable
    - GLR, LR, SLR, LL, ALL(\*)
  - Code should be first class and declarative
    - The implementation of G4 is metacircular
    - Regular expressions are interpreted
  - Implement algorithms from first principles
    - Set notation is used in implementing LL and LR algorithms.
    - Pure functional implementations of parsing algorithms can eventually support
      embedding of arbitrary (including IO) actions without breaking the predictive
      parsing abstraction.

  More info can be found here:
  [https://www.cronburg.com/2018/antlr-haskell-project/](https://www.cronburg.com/2018/antlr-haskell-project/)

  ## Build instructions

  The library can be built with:

  ```bash
  stack build # stack version 2.3.3
  stack test :simple
  ```

  Or with cabal-3.0.1.0 like:

  ```bash
  cabal configure
  cabal install --only-dependencies --enable-tests
  cabal build
  cabal test sexpression
  ```

  Here's a good one to run when making changes to the library, and you're unsure
  of what may become affected by those changes:

  ```bash
  stack test :simple :atn :ll :lr :sexpression :allstar :c
  ```

  And then compare the results with that of this upstream branch. Some of the
  GLR features (incremental and partial tokenization, notably) are still experimental,
  and so there are known test cases which currently fail.

  ## Version History

  - September 25th, 2020. Released version 0.1.0.1: bug fixes, documentation, and
    library versioning updates.

description-type: markdown
hash: c89e6c4c73c6dcb5eb355fc7a375966be250176dbb610e02053bad017e35d3fe
homepage: https://github.com/cronburg/antlr-haskell#readme
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: karl@cs.tufts.edu
synopsis: A Haskell implementation of the ANTLR top-down parser generator
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  QuickCheck: '>=2.11 && <2.14'
  antlr-haskell: '>=0'
  base: '>=4.11 && <5'
  call-stack: '>=0.1 && <0.3'
  containers: '>=0.6 && <0.7'
  deepseq: '>=1.4 && <1.5'
  hashable: '>=1.2 && <1.4'
  haskell-src-meta: '>=0.8 && <0.9'
  mtl: '>=2.2 && <2.3'
  template-haskell: '>=2.14 && <2.16'
  test-framework: '>=0.8 && <0.9'
  test-framework-hunit: '>=0.3 && <0.4'
  test-framework-quickcheck2: '>=0.3 && <0.4'
  text: '>=1.2 && <1.3'
  th-lift: '>=0.7.11 && <0.9'
  transformers: '>=0.5 && <0.6'
  unordered-containers: '>=0.2 && <0.3'
