homepage: ''
changelog-type: ''
hash: 5efc3b335d09e9234f0854e8b1db362fb8937da97ea586445aeccd031e16c09c
test-bench-deps: {}
maintainer: GenuineGabriella@gmail.com
synopsis: Medium-level language that desugars to Morte
changelog: ''
basic-deps:
  base: ==4.*
  text: '>=0.11.1.0 && <1.3'
  annah: -any
  system-fileio: '>=0.2.1 && <0.4'
  array: '>=0.4.0.0 && <0.6'
  lens-family-core: '>=1.0.0 && <1.3'
  pipes: '>=4.0.0 && <4.2'
  transformers: '>=0.2.0.0 && <0.5'
  optparse-applicative: <0.13
  text-format: <0.4
  system-filepath: '>=0.3.1 && <0.5'
  Earley: '>=0.10.1.0 && <0.12'
  morte: '>=1.6.0 && <1.7'
all-versions:
- 1.0.0
author: Gabriella Gonzalez
latest: 1.0.0
description-type: haddock
description: |-
  Annah is a very simple statically typed and purely functional
  lambda calculus with built-in support for:

  * imports via embedding remote expressions

  * mutually recursive data types

  * let expressions

  * natural numbers

  * lists

  * free monads

  * free categories

  Annah is built on top of Morte (a minimalist calculus of constructions),
  meaning that all language features that Annah provides are desugared to
  a pure non-recursive lambda calculus.

  Read the "Annah.Tutorial" module to learn more about how to program using
  Annah.
license-name: BSD-3-Clause
