homepage: https://github.com/parsonsmatt/annotated-exception#readme
changelog-type: markdown
hash: 6bbc199b76c99aea3fa3c1a8c1272bd507f77704e04d42b39fa4b9d21bb702db
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: -any
  text: -any
  safe-exceptions: -any
  containers: -any
  unliftio-core: -any
  annotated-exception: -any
maintainer: parsonsmatt@gmail.com
synopsis: Exceptions, with checkpoints and context.
changelog: |
  # Changelog for located-exception

  ## Unreleased changes

  ## 0.1.2.1

  - [#8](https://github.com/parsonsmatt/annotated-exception/pull/8)
      - There was a bug where catching or trying to catch an exception of the
        wrong type would trigger an infinite loop as the `fromException` method
        kept digging and digging and would be unable to make things work out. The
        `fromException` code no longer tries to flatten out these exceptions.
        However, `toException` *does* flatten it, so all tests still pass.

  ## 0.1.2.0

  - [#6](https://github.com/parsonsmatt/annotated-exception/pull/6)
      - Add `Control.Exception.Annotated.UnliftIO` that uses `MonadUnliftIO`
        instead of `MonadCatch` and `MonadThrow`.
      - Actually expose `catches`

  ## 0.1.1.0

  - [#4](https://github.com/parsonsmatt/annotated-exception/pull/4)
      - Add `catches`
      - Replace `Control.Exception.Safe.try` with `try` that can get an
        `AnnotatedException e` or a regular, un-`Annotated` `e`.

  ## 0.1.0.0

  - Initial Release
basic-deps:
  base: '>=4.7 && <5'
  text: -any
  safe-exceptions: -any
  containers: -any
  unliftio-core: -any
all-versions:
- 0.1.2.1
author: Matt Parsons
latest: 0.1.2.1
description-type: markdown
description: |
  # `annotated-exception`

  This library provides a special `AnnotatedException` type which allows you to decorate Haskell exceptions with additional information.
  This decoration is totally transparent, and even works with exceptions thrown outside of your application code.

  To provide an annotation, you'd use the function `checkpoint`.
  This will attach the provided value to any exception that bubbles up through it.

  ```haskell
  import Control.Exception.Annotated

  data MyException = MyException
      deriving (Show, Exception)

  main :: IO ()
  main = do
      checkpoint "Foo" $ do
          throw MyException
  ```

  When this program crashes, it will crash with an `AnnotatedException` that contains the annotation `"Foo"`.

  ```
  λ> checkpoint "Foo" $ throw MyException
  *** Exception: AnnotatedException {annotations = ["Foo"], exception = MyException}
  ```

  These annotations survive, even if you catch and rethrow with a different exception.

  ```haskell
  data OtherException = OtherException
      deriving (Show, Exception)

  woah :: IO ()
  woah = do
      let
          checkpointed =
              checkpoint "Foo" (throw MyException)
          handler MyException =
              throw OtherException

      checkpointed
          `catch`
              handler

  ```

  Notice how the `checkpoint` call doesn't cover the `throw OtherException` - the exception `[Annotation]` lives on the thrown exception itself, and this library's `catch` function ensures that we don't lose that context.

  ```
  λ> (checkpoint "Foo" (throw MyException)) `catch` \MyException -> throw OtherException
  *** Exception: AnnotatedException {annotations = ["Foo"], exception = OtherException}
  ```

  You can also attach a `CallStack` to any exception using `throwWithCallStack`.

  Now, you're about to report your exceptions, up near `main`.
  We can use `try` in this module to always get the annotations.

  ```haskell
  main = do
      eresult <- try $ myProgram
      case eresult of
          Left (AnnotatedException annotations exception) ->
              reportException annotations exception
          Right a ->
              pure a
  ```
license-name: BSD-3-Clause
