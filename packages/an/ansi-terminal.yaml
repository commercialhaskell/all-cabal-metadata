all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.3.0
- 0.3.1
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.5.1
- '0.6'
- 0.6.1
- 0.6.1.1
- 0.6.2
- 0.6.2.1
- 0.6.2.2
- 0.6.2.3
- 0.6.3
- 0.6.3.1
- '0.7'
- 0.7.1
- 0.7.1.1
- '0.8'
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.8.1
- 0.8.2
- '0.9'
- 0.9.1
- '0.10'
- 0.10.1
- 0.10.2
- 0.10.3
- '0.11'
- 0.11.1
- 0.11.2
- 0.11.3
- 0.11.4
- 0.11.5
- '1.0'
- 1.0.2
author: Max Bolingbroke
basic-deps:
  ansi-terminal: '>=0'
  ansi-terminal-types: ==0.11.5
  base: '>=4.8.0.0 && <5'
  colour: '>=2.1.0'
changelog: "Changes\r\n=======\r\n\r\nVersion 1.0.2\r\n-------------\r\n\r\n* On Windows,
  fix linker error about a duplicate symbol `castUINTPtrToPtr`.\r\n\r\nVersion 1.0.1\r\n-------------\r\n\r\n*
  On Windows, the processing of \\'ANSI\\' control characters in output is enabled\r\n
  \ by default in Windows Terminal but is not enabled by default in ConHost\r\n  terminals.
  Additions have been made to allow support of users of ConHost\r\n  terminals.\r\n*
  Add `hNowSupportsANSI`. On Unix, the function is equivalent to\r\n  `hSupportsANSI`.
  On Windows, in Windows Terminal and ConHost terminals, the\r\n  action can try to
  enable the processing of \\'ANSI\\' control characters in\r\n  output.\r\n* In Windows
  Terminal and ConHost terminals, `hSupportsANSI` will yield `False`\r\n  if the the
  processing of \\'ANSI\\' control characters in output is not enabled.\r\n* Deprecated
  `hSupportsANSIWithoutEmulation` is now consistent with\r\n  `hNowSupportsANSI`.\r\n*
  Improvements to Haddock documentation.\r\n\r\nVersion 1.0\r\n-----------\r\n\r\n*
  On Windows, drop support for legacy Windows requiring emulation. The package\r\n
  \ assumes Windows Terminal has replaced ConHost terminals on supported versions\r\n
  \ of Windows. Functions that yield actions no longer enable (re-enable) the\r\n
  \ processing of \\'ANSI\\' control characters in output.\r\n* On Windows, the package
  no longer depends (directly or indirectly) on the\r\n  `Win32`, `array`,`containers`,
  `deepseq`, `filepath`, `ghc-boot-th`, `mintty`,\r\n  `pretty` or `template-haskell`
  packages.\r\n* `hSupportsANSI` no longer assumes that the given handle is writeable.\r\n*
  `hSupportsANSIWithoutEmulation` is deprecated.\r\n\r\nVersion 0.11.5\r\n--------------\r\n\r\n*
  Module `System.Console.ANSI.Types` spun out to new dependency package\r\n  `ansi-terminal-types-0.11.5`.\r\n*
  Drop support for GHC versions before GHC 7.10.1 (released March 2015).\r\n* Improvements
  to Haddock documentation.\r\n\r\nVersion 0.11.4\r\n--------------\r\n\r\n* Add `reportLayerColor`,
  `getReportedLayerColor` and `getLayerColor` for\r\n  querying the layer color on
  terminals that support the functionality.\r\n* Add `useAlternateScreenBuffer` and
  `useNormalScreenBuffer`, and support for\r\n  switching between the Alternate and
  Normal Screen Buffers.\r\n* When the argument is `0`, `cursorUpCode`, `cursorDownCode`,\r\n
  \ `cursorForwardCode`, `cursorBackwardCode`,`scrollPageUpCode` and\r\n  `scrollPageDownCode`
  now yield `\"\"`, and `cursorUpLineCode` and\r\n  `cursorDownLineCode` now yield
  the equivalent of `setCursorColumnCode 0`. This\r\n  is because, on some terminals,
  a `0` parameter for the underlying 'ANSI' code\r\n  specifies a default parameter
  of `1`.\r\n* Add `osc` as a utility function, for OSC sequences.\r\n* `setTitle`
  now uses the recommended STRING TERMINATOR (ST) of `\\ESC\\\\`, rather\r\n  than
  the legacy `\\BEL` (`\\007`), and filters the title of all non-printable\r\n  characters,
  not just `\\BEL`.\r\n* Improvements to Haddock documentation.\r\n\r\nVersion 0.11.3\r\n--------------\r\n\r\n*
  Add `hyperlink`, `hyperlinkWithId` and `hyperlinkWithParams`, and support for\r\n
  \ clickable hyperlinks.\r\n\r\nVersion 0.11.2\r\n--------------\r\n\r\n* On Windows,
  fix compatability with the Windows I/O Manager (WinIO) when\r\n  GHC >= 9.0.1 but
  `Win32` < 2.9.0.0.\r\n* Improvements to Haddock documentation.\r\n\r\nVersion 0.11.1\r\n--------------\r\n\r\n*
  On Windows, fix compatability with the Windows I/O Manager (WinIO) introduced\r\n
  \ in GHC 9.0.1, by incorporating changes made in package `Win32-2.13.2.0` in\r\n
  \ that regard.\r\n* Improvements to Haddock documentation.\r\n\r\nVersion 0.11\r\n------------\r\n\r\n*
  Remove deprecated `getCursorPosition0`. (Use `getCursorPosition` instead.)\r\n*
  On Unix-like operating systems, the temporary turning off of echoing is moved\r\n
  \ from `getReportedCursorPosition` to `hGetCursorPositon`.\r\n* On Unix-like operating
  systems, fix a bug in `getCursorPosition` and\r\n  `hGetCursorPosition`, where the
  console input stream was was not always\r\n  clear before the cursor position was
  emitted into it.\r\n\r\nVersion 0.10.3\r\n--------------\r\n\r\n* Add `getCursorPosition`
  as a synonym of `getCursorPosition0` and deprecate the\r\n  latter.\r\n\r\nVersion
  0.10.2\r\n--------------\r\n\r\n* `hGetTerminalSize` now assumes a terminal is no
  bigger than 9,999 by 9,999\r\n  (previously, no bigger than 999 by 999).\r\n* On
  Windows, fix a bug where emulated cursor movement functions differed from\r\n  Windows
  10 (movement bounded by the current viewport).\r\n\r\nVersion 0.10.1\r\n--------------\r\n\r\n*
  Add `hGetCursorPosition` and `hGetTerminalSize`.\r\n* On Unix-like operating systems,
  fix a bug where `getReportedCursorPosition`\r\n  could block indefinitely if no
  information was forthcoming on the console\r\n  input stream.\r\n* Improvements
  to Haddock documentation.\r\n\r\nVersion 0.10\r\n------------\r\n\r\n* Add support
  for setting the default color with new `SetDefaultColor`\r\n  constructor of the
  `SGR` type.\r\n* `getTerminalSize` now flushes the `stdout` channel, to ensure the
  cursor\r\n  position is unaffected.\r\n\r\nVersion 0.9.1\r\n-------------\r\n\r\n*
  Flag modules with GHC's 'Safe Haskell' language extensions (from GHC 7.2.1).\r\n*
  Improvements and corrections to Haddock documentation.\r\n\r\nVersion 0.9\r\n-----------\r\n\r\n*
  Add support for 256-color palettes with new `SetPaletteColor` constructor of\r\n
  \ the `SGR` type, and `xterm6LevelRGB`, `xterm24LevelGray` and `xtermSystem`.\r\n*
  Remove deprecated `getCursorPosition`. (Use `getCursorPosition0` instead.)\r\n*
  Add `hSupportsANSIColor`.\r\n* Add `getTerminalSize`.\r\n* Improvements to Haddock
  documentation.\r\n\r\nVersion 0.8.2\r\n-------------\r\n\r\n* Add `getCursorPosition0`
  and deprecate `getCursorPosition`. Any position\r\n  provided by the latter is 1-based.
  Any position provided by the former is\r\n  0-based, consistent with `setCursorColumn`
  and `setCursorPosition`.\r\n* Improvements to Haddock documentation in respect of
  0-based and 1-based\r\n  cursor positions.\r\n\r\nVersion 0.8.1\r\n-------------\r\n\r\n*
  Add `hSupportsANSIWithoutEmulation`. On Windows 10, if the handle is\r\n  identified
  as connected to a native terminal ('Command Prompt' or\r\n  'PowerShell'), the processing
  of 'ANSI' control characters will be enabled.\r\n\r\nVersion 0.8.0.4\r\n---------------\r\n\r\n*
  On Windows, `hSupportsANSI` now recognises if the handle is connected to a\r\n  'mintty'
  terminal.\r\n* Drop support for GHC versions before GHC 7.0.1 (released November
  2010)\r\n\r\nVersion 0.8.0.3\r\n---------------\r\n\r\n* On Windows, try to enable
  ANSI on ConHost terminals even if a TERM environment\r\n  variable exits (such as
  with the Hyper 2 terminal)\r\n* Minor improvements to Haddock documentation\r\n\r\nVersion
  0.8.0.2\r\n---------------\r\n\r\n* Improve README and Haddock documentation\r\n*
  On Windows, fix compatability with earlier GHC versions\r\n* Drop support for GHC
  versions before 6.12.1 (released December 2009)\r\n\r\nVersion 0.8.0.1\r\n---------------\r\n\r\n*
  On Windows, if the standard output channel is valid but not a ConHost\r\n  terminal,
  assume it is ANSI-enabled rather than failing\r\n* On Windows, output the improved
  error message to the standard error channel\r\n  rather than the standard output
  channel\r\n\r\nVersion 0.8\r\n-----------\r\n\r\n* Make the fields of `SGR` strict\r\n*
  Make compatible with GHC 8.2.2\r\n* Improve the error message on Windows when not
  ANSI-capable or ConHost\r\n* Recognise Appveyor build environment as ANSI-enabled\r\n\r\nVersion
  0.7.1.1\r\n---------------\r\n\r\n`getReportedCursorPosition`: don't let the cursor
  reporting code be echo'd\r\n\r\nVersion 0.7.1\r\n-------------\r\n\r\n* Allow saving,
  restoring, and querying the current cursor position\r\n* Fix a couple of issues
  with the Reset emulation on Windows\r\n\r\nVersion 0.7\r\n-----------\r\n\r\nAdd
  24-bit RGB color support\r\n\r\nVersion 0.6.3.1\r\n---------------\r\n\r\nFix Windows
  + ghc 7.8 compatibility\r\n\r\nVersion 0.6.3\r\n-------------\r\n\r\n* Add ANSI
  support for Windows\r\n* Add compatibility with Win32-2.5.0.0 and above\r\n\r\nVersion
  0.6.2.3\r\n---------------\r\n\r\nAdd an example to the haddocks\r\n\r\nVersion
  0.6.2.2\r\n---------------\r\n\r\nFix a GHC 7.10 warning\r\n\r\nVersion 0.6.2.1\r\n---------------\r\n\r\nRestore
  compatibility with GHC 7.4 and older\r\n\r\nVersion 0.6.2\r\n-------------\r\n\r\n*
  Add `hSupportsANSI`\r\n* Drop support for `base < 4`\r\n\r\nVersion 0.6.1.1\r\n---------------\r\n\r\nFix
  to build with GHC 7.8 on Windows\r\n\r\nVersion 0.6.1\r\n-------------\r\n\r\n*
  `BoldIntensity` no longer changes background color on Windows\r\n* `setSGR []` was
  not equivalent to `setSGR [Reset]` on Windows, even though it\r\n  should be according
  to the documentation. This is now fixed.\r\n"
changelog-type: markdown
description: |
  ansi-terminal [![GitHub CI](https://github.com/UnkindPartition/ansi-terminal/workflows/CI/badge.svg)](https://github.com/UnkindPartition/ansi-terminal/actions)
  =============

  A Haskell package providing support for 'ANSI' control character sequences for
  terminals on Unix-like operating systems and Windows

  Description
  -----------

  ['ANSI' terminal escape code](http://en.wikipedia.org/wiki/ANSI_escape_sequences)
  support for Haskell, which allows:
  -   Colored text output, with control over both foreground and background
      colors
  -   Clearing parts of a line or the screen
  -   Hiding or showing the cursor
  -   Moving the cursor around
  -   Reporting the position of the cursor
  -   Scrolling the screen up or down
  -   Switching between the Alternate and Normal Screen Buffers
  -   Clickable hyperlinks to URIs
  -   Changing the title of the terminal

  If you like this, you may be interested in
  [ansi-wl-pprint](http://github.com/batterseapower/ansi-wl-pprint), which
  provides a pretty-printer that can construct strings containing 'ANSI'
  colorisation.

  Not all 'ANSI' escape codes are suported by this library but most (if not
  all) of the popular ones that are well-supported by terminal software are,
  including:
  -   Select Graphic Rendition mode (colors and other attributes): `setSGR`
  -   Clearing parts of the screen: `clearFromCursorToScreenEnd`,
      `clearFromCursorToScreenBeginning`, `clearScreen`,
      `clearFromCursorToLineEnd`, `clearFromCursorToLineBeginning` and
      `clearLine`
  -   Cursor visibility changes: `hideCursor` and `showCursor`
  -   Cursor movement by character: `cursorUp`, `cursorDown`, `cursorForward` and
      `cursorBackward`
  -   Cursor movement by line: `cursorUpLine` and `cursorDownLine`
  -   Directly changing cursor position: `setCursorColumn` and `setCursorPosition`
  -   Saving, restoring and reporting cursor position: `saveCursor`,
      `restoreCursor` and `reportCursorPosition`
  -   Scrolling the screen: `scrollPageUp` and `scrollPageDown`
  -   Changing the title: `setTitle`

  Each supported escape code or family of codes has a corresponding
  function that comes in three variants:

  -   A straight `IO` variant that doesn't take a `Handle` and just applies the
      escape code to `stdout` and any terminal attached to it
  -   An `IO` variant similar to above, but which takes a `Handle` to which the
      escape code should be applied
  -   A `String` variant that returns a literal string that should be
      included to get the effect of the code.

  Example
  -------

  A full example is
  [available](https://github.com/UnkindPartition/ansi-terminal/blob/master/ansi-terminal/app/Example.hs),
  but for a taste of how the library works try the following code:

  ``` haskell
  import System.Console.ANSI
  import System.IO (stdout)

  main :: IO ()
  main = do
    stdoutSupportsANSI <- hNowSupportsANSI stdout
    if stdoutSupportsANSI
      then do
        setCursorPosition 5 0
        setTitle "ANSI Terminal Short Example"

        setSGR [ SetConsoleIntensity BoldIntensity
               , SetColor Foreground Vivid Red
               ]
        putStr "Hello"

        setSGR [ SetConsoleIntensity NormalIntensity
               , SetColor Foreground Vivid White
               , SetColor Background Dull Blue
               ]
        putStrLn "World!"
      else
        putStrLn "Standard output does not support 'ANSI' escape codes."
  ```

  ![](https://raw.githubusercontent.com/feuerbach/ansi-terminal/master/example.png)

  Documentation
  -------------

  Haddock documentation is [available at
  Hackage](http://hackage.haskell.org/packages/archive/ansi-terminal/latest/doc/html/System-Console-ANSI.html).

  Credits
  -------

  The library is originally written by [Max Bolingbroke](https://github.com/batterseapower)

  Maintainers
  -----------

  [Mike Pilgrem](https://github.com/mpilgrem) and [Roman Cheplyaka](https://github.com/UnkindPartition) are the primary maintainers.

  [Oliver Charles](https://github.com/ocharles) is the backup maintainer. Please
  get in touch with him if the primary maintainers cannot be reached.
description-type: markdown
hash: 1f90bb88e670ce63fbf2c9216d50857f2419582f1c6791e542c3eab97ecfd364
homepage: https://github.com/UnkindPartition/ansi-terminal
latest: 1.0.2
license-name: BSD-3-Clause
maintainer: Mike Pilgrem <public@pilgrem.com>, Roman Cheplyaka <roma@ro-che.info>
synopsis: Simple ANSI terminal support
test-bench-deps: {}
