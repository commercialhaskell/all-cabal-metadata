all-versions:
- 0.0.0
- 0.0.1
author: Joe Vargas
basic-deps:
  JuicyPixels: '>=0'
  aeson: '>=0'
  animate: '>=0'
  animate-frames: '>=0'
  async: '>=0'
  base: '>=4.5 && <5'
  bytestring: '>=0'
  containers: '>=0'
  pureMD5: '>=0'
  safe: '>=0'
  stm: '>=0'
  text: '>=0'
  vector: '>=0'
  yaml: '>=0'
changelog: |
  # Change log

  animate-frames uses [Semantic Versioning][].
  The change log is available through the [releases on GitHub][].

  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html
  [releases on GitHub]: https://github.com/githubuser/animate-frames/releases
changelog-type: markdown
description: "# animate-frames\n\n`animate-frames` is a workflow tool for converting
  sprite frames into a spritesheet and [`animate`](https://github.com/jxv/animate)
  compatible metadata files.\n\n```\nUsage:\n  animate-frames [--animation <key> <frame0.png>
  <frame1.png> ...] [--image <spritesheet.png>] [--metadata <target.json>] [--fps
  <int>] [--yaml]\n\nExample:\nanimate-frames \\\n  --animation Idle idle_0000.png
  idle_0001.png idle_0002.png \\\n  --animation Walk walk_0000.png walk_0001.png walk_0002.png
  \\\n  --spritesheet sprite.png \\\n  --metadata sprite.yaml \\\n  --image \"path/to/sprite.png\"
  \\\n  [--fps 60] \\ # default: 24fps\n  [--yaml] # default is JSON\n```\n\n## Workflow\n\nThis
  is an example workflow using Krita and animate to create sprites iteratively.\n\n###
  Krita\n\n[Krita](https://krita.org/en/) is a profesional level drawing and digital
  painting program.\nIt's also open source and works wonderfully with a drawing tablet.\nMost
  importantly, it allows for drawing animation with onion skinning.\n\nHere are the
  example stick figure animations -- walk and dance.\n\n[`walk.kra`](propaganda/walk.kra)\n\n![walk
  krita](propaganda/walk_krita.png)\n\n[`dance.kra`](propaganda/dance.kra)\n\n![dance
  krita](propaganda/dance_krita.png)\n\n### Generate individual animation frames\n\nIn
  order to represent the animation, each project file will renderer as frames with
  a postfix'ed number.\n\nDon't forget to change the `basename`.\n\n![walk render](propaganda/walk_render.png)\n\n![dance
  render](propaganda/dance_render.png)\n\nNow, there's a folder with all the frames.\n\n![frames](propaganda/frames.png)\n\nNotice
  that there are duplicates of frames.\nThis is because ech frame implictly attaches
  a unit of time.\nIn this case, each frame lasts for 1/24th second.\n\n### Use `animate-frames`
  for spritesheet and metadata file\n\nRemoving frame duplication, composing a spritesheet,
  and inferring metadata is the core of what `animate-frames` does.\nWhat cannot be
  inferred are required as arguments.\n\nHere's the script the find frames then generate
  the spritesheet and metadata files.\n\n[`compile-frames.sh`](propaganda/compile-frames.sh)\n\n```shell\n#!
  /bin/sh\n\nmatch() {\n\techo `find ./ -name \"$1\" -print0 | xargs -0 ls`\n}\n\nwalk=$(match
  \"walk_*.png\")\ndance=$(match \"dance_*.png\")\n\nanimate-frames \\\n\t--spritesheet
  figure.png \\\n\t--image \"data/figure.png\" \\\n\t--metadata figure.yaml \\\n\t--animation
  Walk $walk \\\n\t--animation Dance $dance \\\n\t--yaml \\ # JSON is default\n\t--fps
  24\n\n```\n\n__Generated files__\n\nA clip describes area of each frame on the spritesheet.\nAn
  animation is defined by a list of the clip indices and delays (in seconds).\n\n[`figure.yaml`](propaganda/figure.yaml)\n\n```yaml\nimage:
  \"data/figure.png\"\nalpha: null\nclips:\n- [0, 0, 91, 135, 58, 80] # 0\n- [91,
  0, 87, 135, 52, 78] # 1\n- [178, 0, 86, 134, 53, 76] # 2\n- [264, 0, 96, 131, 69,
  75] # 3\n- [0, 135, 77, 135, 60, 78] # 4\n- [77, 135, 79, 131, 66, 74] # 5\n- [156,
  135, 79, 130, 67, 74] # 6\n- [235, 135, 86, 132, 60, 75] # 7\n- [0, 270, 44, 143,
  26, 86] # 8\n- [44, 270, 40, 139, 19, 81] # 9\n- [84, 270, 61, 141, 38, 83] # 10\n-
  [145, 270, 71, 137, 41, 81] # 11\n- [216, 270, 53, 139, 29, 84] # 12\n- [269, 270,
  44, 137, 27, 83] # 13\n- [0, 413, 61, 139, 37, 83] # 14\n- [61, 413, 63, 141, 35,
  84] # 15\nanimations:\n  \"Dance\":\n  - [0, 0.2083]\n  - [1, 0.2083]\n  - [2, 0.2083]\n
  \ - [3, 0.2083]\n  - [4, 0.2083]\n  - [5, 0.2083]\n  - [6, 0.2083]\n  - [7, 0.2083]\n
  \ \"Walk\":\n  - [8, 0.2083]\n  - [9, 0.2083]\n  - [10, 0.2083]\n  - [11, 0.2083]\n
  \ - [12, 0.2083]\n  - [13, 0.2083]\n  - [14, 0.2083]\n  - [15, 0.2083]\n```\n\nAll
  the frames are collapsed into one spritesheet.\n\n[`figure.png`](propaganda/figure.png)\n\n![figure.png](propaganda/figure.png)\n\n###
  Preview animation\n\nUse [animate-preview](https://github.com/jxv/animate-preview)
  to preview the generated spritesheet and metadata files.\n\n\n```shell\nanimate-preview
  --target figure.yaml --image figure.png --high-dpi --watch\n```\n\n![animate preview](propaganda/animate-preview.png)\n\n###
  Build into game\n\nWhen building a game, you'll want to use the [`animate`](https://github.com/jxv/animate)
  and [`animate-sdl2`](https://github.com/jxv/animate-sdl2) libraries to load and
  draw the sprites. The [`animate`](https://github.com/jxv/animate) has functions
  to load the generated files.\n\n"
description-type: markdown
hash: 6c772d1e5ac8c0efce57ae8d3cf092bff171ac3faecd7986872b5626718ebd6f
homepage: https://github.com/jxv/animate-frames#readme
latest: 0.0.1
license-name: MIT
maintainer: Joe Vargas
synopsis: Convert sprite frames to animate files
test-bench-deps:
  animate-frames: '>=0'
  base: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
