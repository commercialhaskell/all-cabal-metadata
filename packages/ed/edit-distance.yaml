all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.2.0
- 0.2.1
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
- 0.2.2.1
author: Max Bolingbroke <batterseapower@hotmail.com>
basic-deps:
  array: '>=0.1'
  base: '>=4.5 && <5'
  containers: '>=0.1.0.1'
  random: '>=1.0'
changelog: ''
changelog-type: ''
description: |
  # Edit Distance Algorithms

  [![Build Status](https://travis-ci.org/phadej/edit-distance.svg?branch=master)](https://travis-ci.org/phadej/edit-distance)
  [![Hackage](https://img.shields.io/hackage/v/edit-distance.svg)](http://hackage.haskell.org/package/edit-distance)

  ## Installing

  To just install the library:

  ```
  cabal configure
  cabal build
  cabal install
  ```

  ## Description

  Edit distances algorithms for fuzzy matching. Specifically, this library provides:

  - [Levenshtein distance](http://en.wikipedia.org/wiki/Levenshtein_distance)
  - [Restricted Damerau-Levenshtein distance](http://en.wikipedia.org/wiki/Damerau-Levenshtein_distance)

  They have been fairly heavily optimized. Indeed, for situations where one of
  the strings is under 64 characters long we use a rather neat "bit vector"
  algorithm: see [the authors paper](http://www.cs.uta.fi/~helmu/pubs/psc02.pdf)
  and [the associated errata](http://www.cs.uta.fi/~helmu/pubs/PSCerr.html) for
  more information. The algorithms _could_ be faster, but they aren't yet slow
  enough to force us into improving the situation.

  ## Example

  ```hs
  Text.EditDistance> levenshteinDistance defaultEditCosts "witch" "kitsch"
  2
  ```


  ## Links

  - [Hackage](http://hackage.haskell.org/package/edit-distance)
  - [GitHub](http://github.com/phadej/edit-distance)
  - [Original gitHub](http://github.com/batterseapower/edit-distance)
description-type: markdown
hash: 4d33a49cd383d50af090f1b888642d10116e43809f9da6023d9fc6f67d2656ee
homepage: http://github.com/phadej/edit-distance
latest: 0.2.2.1
license-name: BSD-3-Clause
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Levenshtein and restricted Damerau-Levenshtein edit distances
test-bench-deps:
  QuickCheck: '>=2.4 && <2.10'
  array: '>=0.1'
  base: '>=4.5 && <5'
  containers: '>=0.1.0.1'
  criterion: '>=1.1'
  deepseq: '>=1.2'
  process: '>=1.0'
  random: '>=1.0'
  test-framework: '>=0.1.1'
  test-framework-quickcheck2: '>=0'
  time: '>=1.0'
  unix: '>=2.3'
