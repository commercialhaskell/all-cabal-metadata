all-versions:
- '1.0'
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
author: Thomas Sutton
basic-deps:
  base: '>=4.5 && <5.0'
  vector: '>=0.8'
changelog: |
  edit-distance-vector 1.0.0.4

      * Relax version bounds to support GHC 8.0

  edit-distance-vector 1.0.0.3

      * Relax version bounds to support GHC 7.6.3 and 7.4.2

  edit-distance-vector 1.0.0.2

      * Relax version bounds to support GHC 7.6.3 and 7.4.2

  edit-distance-vector 1.0.0.1

      * Relax version bounds to support GHC 7.10.1.

  edit-distance-vector 1.0

      * Initial release extracted from aeson-diff package and rewritten to use
        Data.Vector.
changelog-type: markdown
description: |
  Edit Distance: Vector
  =====================

  [![Build Status][badge]][status]

  This is a small library for calculating the edit distance and edit script
  between two vectors. It is generic enough that you should be able to use it
  with vectors containing *values* of any type you like, with *changes* described
  by any type you like, and with *costs* represented by any type you like (with a
  few restrictions).

  Installing
  ----------

  The `edit-distance-vector` package is a normal Haskell library and can be
  installed using the Cabal package management tool.

  ````{bash}
  cabal update
  cabal install edit-distance-vector
  ````

  `edit-distance-vector` is [automatically tested][status] on GHC versions 7.4.2,
  7.6.3, 7.8.3, 7.10.1, 8.0.2 using the Travis CI service.

  Usage
  -----

  The interface to `edit-distance-vector` is very small; just import
  `Data.Vector.Distance`, create a `Params` value with the correct operations to
  deal with your types, and pass this to `leastChanges` along with your
  `Vector`s.

  ````{haskell}
  import           Data.Monoid

  import qualified Data.Vector          as V
  import           Data.Vector.Distance

  -- | Editing vectors of 'Char' values, with '(String, Int, Char)' describing
  --   changes, and the additive monoid of 'Int' describing costs.
  str :: Params Char (String, Int, Char) (Sum Int)
  str = Params
      { equivalent = (==)
      , delete     = \i c    -> ("delete", i, c)
      , insert     = \i c    -> ("insert", i, c)
      , substitute = \i c c' -> ("replace", i, c')
      , cost = const (Sum 1)
      , positionOffset = \ (op, _, _) -> if op == "delete" then 0 else 1
      }

  main :: IO ()
  main = do
      print $ leastChanges str (V.fromList "I am thomas")
                               (V.fromList "My name is Thomas")
  ````

  (See `test/sample.hs` for a version of this code that is compiled
  by the automated test suite.)

  [badge]: https://travis-ci.org/thsutton/edit-distance-vector.svg?branch=master
  [status]: https://travis-ci.org/thsutton/edit-distance-vector
description-type: markdown
hash: 27c2b6d1e1a697431e3f533736a84474f3c3f9f29e347948ac909be753d40d31
homepage: https://github.com/thsutton/edit-distance-vector
latest: 1.0.0.4
license-name: BSD-3-Clause
maintainer: me@thomas-sutton.id.au
synopsis: Calculate edit distances and edit scripts between vectors.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  edit-distance-vector: '>=0'
  quickcheck-instances: '>=0'
  vector: '>=0'
