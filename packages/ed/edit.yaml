all-versions:
- 0.0.1.0
- 0.0.1.1
- 1.0.0.0
- 1.0.1.0
author: Varun Gandhi <theindigamer15@gmail.com>
basic-deps:
  QuickCheck: '>=2.10 && <2.13'
  base: '>=4.9 && <4.12'
  comonad: '>=0'
  deepseq: '>=1.1 && <1.5'
  transformers: '>=0.5 && <0.6'
changelog: |
  # Revision history for `edit`

  ## 1.0.1.0 -- 2018-09-03

  * `QuickCheck` version bump.

  ## 1.0.0.0 -- 2018-07-19

  * `QuickCheck` and `comonad` are enabled by default instead of being disabled
    by default. The flag names have been changed to reflect this.
changelog-type: markdown
description: |
  # Edit [![Hackage badge](https://img.shields.io/hackage/v/edit.svg?label=Hackage)](https://hackage.haskell.org/package/edit) [![Stackage badge](https://www.stackage.org/package/edit/badge/nightly?label=Stackage)](https://www.stackage.org/package/edit)

  The `Edit` monad allows you to easily bubble up whether a change was made or
  not when rewriting things. Some cases where this can be handy:

  1. You are making a sequence of transformations on some type and want to keep
     track of whether any of them changed it or not.
  2. You are rewriting a recursive type (or a garden of mutually recursive types!)
     and want to bubble up information whether something was changed or not.

  For example, Reddit user /u/p__bing [says](https://www.reddit.com/r/haskell/comments/8mrqfy/ann_edit_a_small_package_for_rewriting_things/e00jo8i/?utm_content=permalink&utm_medium=front&utm_source=reddit&utm_name=haskell)

  > [..] I work as an iOS developer and we have this same
  > exact idea implemented, as a monad, in Swift, to make our UI updates faster
  > (if a change goes through our model layer and comes out Clean, we donâ€™t bother
  > touching the UI).

  A small example:

  ```haskell
  >>> halveEvens x = if x `mod` 2 == 0 then (Dirty $ x `div` 2) else (Clean x)
  >>> traverse halveEvens [1, 2, 3]
  Dirty [1,1,3]
  >>> traverse halveEvens [1, 3, 5]
  Clean [1,3,5]
  ```

  More thorough documentation is available on [Hackage](https://hackage.haskell.org/package/edit)
  under the `Data.Edit` module. There is a tutorial too under `Data.Edit.Tutorial`.

  There is also a corresponding monad transformer `EditT` available under
  `Control.Monad.Trans.EditT`.

  # Contributing

  Please open an issue on the Github issue tracker to discuss missing documentation,
  API changes etc.
description-type: markdown
hash: 0bb937cee1c3b2eb9768d419139e7a1f7fbb4d6b6884abc8a0e3d734d81afe0a
homepage: https://github.com/theindigamer/edit
latest: 1.0.1.0
license-name: BSD-3-Clause
maintainer: Varun Gandhi <theindigamer15@gmail.com>
synopsis: A monad for rewriting things.
test-bench-deps:
  QuickCheck: '>=2.10 && <2.13'
  base: '>=0'
  comonad: '>=5.0 && <5.1'
  doctest: '>=0.13 && <0.17'
  edit: '>=0'
  tasty: '>=1.0 && <1.2'
  tasty-discover: '>=4.2 && <4.3'
  tasty-quickcheck: '>=0.9 && <0.11'
  uniplate: '>=1.6 && <1.7'
