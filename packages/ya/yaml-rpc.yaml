all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
author: Ilya V. Portnov
basic-deps:
  aeson: '>=0.7.0.3'
  base: '>=3 && <=5'
  bytestring: '>=0.10.0.2'
  containers: '>=0'
  http-client: '>=0.3.3.1'
  http-types: '>=0.8.5'
  lens: '>=4.1'
  template-haskell: '>=0'
  text: '>=1.1.1.3'
  th-lift: '>=0'
  transformers: '>=0.3.0.0'
  unordered-containers: '>=0.2.4.0'
  vector: '>=0.10.11.0'
  wreq: '>=0'
  yaml: '>=0'
changelog: ''
changelog-type: ''
description: "YAML-RPC README\n===============\n\nIlya V. Portnov <portnov84@rambler.ru>\n\nThe
  yaml-rpc package contains a small library to organize remote procedure call\n(RPC)
  over TCP/IP network, using JSON as data serialization format.\n\nRPC server should
  supply a set of \"RPC methods\", which are simply functions ::\na -> b -> ... ->
  IO c. Arguments must be of class ToJSON (defined in aeson package);\nresult must
  be of class FromJSON (defined in aeson package too). One can of\ncause use GHC Generics
  mechanism to derive needed instances. yaml-rpc package\nprovides a (TemplateHaskell)
  function Network.YAML.TH.Server.makeAPI to\ngenerate API description for server.
  Such API can be automatically written\nto file in simple YAML format by using function
  Network.YAML.TH.Server.writeAPI.\nIt is possible to write different servers, which
  will use generated API\ndescription and provide HTTP REST JSON services with that
  API. Currently there\nis only one implementation using scotty package; it is provided
  by\nyaml-rpc-scotty package. Please see yaml-rpc-scotty/Test/{Server.hs,\nTestAPIImpl.hs}
  files for example usage.\n\nRPC client calls that functions via HTTP REST JSON interface.
  So, it can be\nused either from Haskell or from any other environment. For example,
  \ it can be\neasily used from JavaScript with JQuery or another framework.\nFor
  Haskell, yaml-rpc package provides a function Network.YAML.Caller.call to\ncall
  any method via HTTP REST JSON interface. Moreover, a (TemplateHaskell)\nfunction
  Network.YAML.TH.Client.useAPI function will read API description from\nfile (in
  YAML format) and generate wrapper methods for calling respective\nremote methods.
  Please see Test/Client.hs for example usage.\n\nCurrently, only one-connection-per-call
  mode is supported by Caller module.\nThere are plans to implement persistent connection
  support.\n\nAPI description files can contain not only methods description, but
  also data\ntypes description. Types description can be also automagically generated
  from\nusual Haskell definitions and written to API description file. Then, when\nreading
  that API description file, usual Haskell data type definitions are\ngenerated.\n\nPlease
  see test.api file for example of API description format.\n\nOn the server side,
  usual workflow is as following:\n* Write some number of API data types and functions
  to be exposed. \n* Call makeAPI function to generate API description.\n* Call writeAPI
  function to write API description to file.\n* Call generateDispatcher function on
  generated API to generate function\n  dispatch :: Text -> Maybe (Value -> IO Value).
  This function will be used by\n  any server implementation.\n* Launch any server
  implementation and provide it by dispatch function.\n\nOn the client side, usual
  workflow is as following:\n* Receive API description file from service provider.\n*
  Call useAPI function on that file; it will generate data types definitions\n  and
  wrapper functions to call all methods declared in file.\n* Call generated wrappers.\n\nDepends:
  ghc >= 7.6, yaml, template-haskell, th-lift, wreq, lens, scotty.\n\n"
description-type: markdown
hash: 5b674ea2a5e0a2e602942e6a8ea01f6d17320bdae1c55dce8cf9cf9e1473366f
homepage: http://redmine.iportnov.ru/projects/yaml-rpc
latest: 1.0.3
license-name: BSD-3-Clause
maintainer: portnov84@rambler.ru
synopsis: Simple library for network (HTTP REST-like) YAML RPC
test-bench-deps: {}
