all-versions:
- 0.1.0
- 0.1.1
- 0.1.3
- 0.1.3.1
- 0.1.3.2
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
author: Kwanghoon Choi
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8 && <0.11'
  deepseq: '>=1.4.4.0'
  directory: '>=1.3.3 && <1.4'
  hashable: '>=1.3.0 && <1.4'
  hspec: '>=0'
  mtl: '>=0'
  network: '>=3.1.1 && <3.2'
  process: '>=1.6.5 && <1.7'
  regex-tdfa: '>=1.3.1 && <1.4'
  timeit: '>=2.0'
  transformers: '>=0'
  yapb: '>=0'
changelog: "# Changelog\nAll notable changes to this project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n##
  [0.1.0] - 2020-06-25\n### Added\n- Readme.md\n\n### Changed\n- Rename genlrparser
  into yapb\n- Write packages.yaml (generating yapb.cabal automatically) for making
  yapb available as a Hackage library\n\n### Fixed\n- Fixed hard-coded usage of genlrparser-exe
  in GenLRParserTable.hs\n\n### Removed\n- n/a\n\n\t\n"
changelog-type: markdown
description: "\n## YAPB: Yet Another Parser Builder\n\n### A programmable parser builder
  system\n- Allows to write LALR(1) parser specifications in Haskell\n- Provides an
  automatic syntax completion method\n\n### Library, tools, and examples\n- yapb:
  a library for a programmable parser builder system\n- yapb-exe: a wrapper interface
  to YAPB\n- conv-exe: a grammar format utility for conversion of a readable grammar
  (.lgrm) format into the Haskell data format (.grm)\n- Examples: \n  - parser-exe:
  an arithmetic parser\n  - ambiguous-exe: an arithmetic parser with the ambiguous
  grammar but backed by precedence attributes\n  - error-exe: a demo for error recovery
  by an interplay between a lexer and a parser through a monadic interface\n  - syncomp-exe:
  a syntax completion server for Emacs\n\n### Applications using YAPB:\n  - Microsoft
  SmallBasic parser: https://github.com/kwanghoon/sbparser\n  - Polyrmorphic RPC calculus
  parser: https://github.com/kwanghoon/polyrpc\n  - C11 parser: https://github.com/kwanghoon/c11parser\n
  \ - EOPL interpreters: https://github.com/kwanghoon/Lecture_EOPL_Exercise (Its solution
  Lecture_EOPL also available in private)\n\n### Download, build, and test\n~~~\n
  \ $ git clone https://github.com/kwanghoon/yapb\n  $ cd yapb\n  $ stack build\n
  \ $ stack test\n~~~\n\n### Tutorial\n- As a tutorial, the most up-to-date examples
  are available in app/{parser,ambiguous,error,syntaxcompletion}.\n- [For parser:
  Parser generators sharing LR automaton generators and accepting general purpose
  programming language-based specifications](http://swlab.jnu.ac.kr/paper/kiise202001.pdf)
  Written in Korean.\n- [For syntax complection with YAPB-0.1.2:  A text-based syntax
  completion method using LR parsing (PEPM 2021)](http://swlab.jnu.ac.kr/paper/pepm2021final.pdf).\n\n\n\n\n###
  Reference\n- [References](https://github.com/kwanghoon/yapb/blob/master/doc/Reference.md)\n\n"
description-type: markdown
hash: 405ffe6e007aa0f9cbe218edd132139ce7da79f80d6ca79873517da6731cebdf
homepage: https://github.com/kwanghoon/yapb#readme
latest: 0.2.7
license-name: BSD-3-Clause
maintainer: lazyswamp@gmail.com
synopsis: Yet Another Parser Builder (YAPB)
test-bench-deps:
  base: '>=4.7 && <5'
  deepseq: '>=1.4.4.0'
  hspec: '>=0'
  mtl: '>=0'
  process: '>=0'
  timeit: '>=2.0'
  transformers: '>=0'
  yapb: '>=0'
