all-versions:
- '0.0'
- '0.1'
- '0.2'
- 0.3.0
author: Ross Paterson <R.Paterson@city.ac.uk>
basic-deps:
  base: '>=4.18 && <5'
changelog: "-*-change-log-*-\n\n0.3: Ross Paterson <R.Paterson@city.ac.uk> Jul 2025\n\t*
  much finer grained classes\n\t* split out examples into yap-examples\n\n0.2.1: Ross
  Paterson <R.Paterson@city.ac.uk> Nov 2016\n\t* warning fixes\n\n0.2: Ross Paterson
  <R.Paterson@city.ac.uk> Feb 2012\n\t* Removed Eq and Show constraints from Num,
  following base-4.5.\n\n0.1: Ross Paterson <R.Paterson@city.ac.uk> Oct 2011\n\t*
  Moved fromRational back to Fractional, as it isn't well-behaved for all fields.
  Removed realToField.\n\n0.0: Ross Paterson <R.Paterson@city.ac.uk> Aug 2011\n\t*
  Initial version\n"
changelog-type: text
description: |-
  A simple refactoring of the Prelude numeric classes,
  aiming to escape from the restrictive bundling of
  operations in the standard numeric classes, while
  preserving backward compatibility for clients.
  This is done by adding algebraic classes as superclasses
  of the Haskell 2010 numeric classes, yielding the
  following class hierarchy (grey classes are unchanged):

  <<https://raw.githubusercontent.com/RossPaterson/yap/refs/heads/main/images/hierarchy.svg>>

  "Prelude.YAP" is an almost-compatible replacement
  for the standard Haskell Prelude, as long as you're
  not defining instances of the numeric classes (though
  defaulting will be affected).  When importing it, use

  @{-# LANGUAGE RebindableSyntax #-}@

  This will turn off the implicit @Prelude@ import and
  attach various syntax to the new definitions.

  "Data.YAP.Algebra" contains just the new classes;
  you'll need to import it if you want access to the
  new names, including to define instances.

  Other modules contain instances for the existing types
  @Complex@ and @Ratio@.
  Further examples are in the @yap-examples@ package.
description-type: haddock
hash: da9310d068c767d8a3fcc5ce60a414541fe24258613d0212bc0858dc8fb06c37
homepage: ''
latest: 0.3.0
license-name: BSD-3-Clause
maintainer: Ross Paterson <R.Paterson@city.ac.uk>
synopsis: |-
  yet another prelude - a simplistic refactoring with algebraic
  classes
test-bench-deps: {}
