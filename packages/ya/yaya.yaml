all-versions:
- 0.4.1.0
- 0.4.2.0
- 0.4.2.1
- 0.5.2.1
- 0.6.0.0
author: Greg Pfeil <greg@technomadic.org>
basic-deps:
  base: ^>=4.12.0 || ^>=4.13.0 || ^>=4.14.0 || ^>=4.15.0 || ^>=4.16.0 || ^>=4.17.0
    || ^>=4.18.0 || ^>=4.19.0
  comonad: ^>=5.0.7
  either: ^>=5
  foldable1-classes-compat: ^>=0.1
  free: ^>=5.1.5 || ^>=5.2
  kan-extensions: ^>=5.2
  lens: ^>=5 || ^>=5.1 || ^>=5.2
  profunctors: ^>=5.5.2 || ^>=5.6
  strict: ^>=0.4 || ^>=0.5
  template-haskell: ^>=2.14.0 || ^>=2.15.0 || ^>=2.16.0 || ^>=2.17.0 || ^>=2.18.0
    || ^>=2.19.0 || ^>=2.20.0 || ^>=2.21.0
  th-abstraction: ^>=0.4.1 || ^>=0.6.0
  transformers: ^>=0.5.5 || ^>=0.6.1
changelog: |
  # Changelog

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## 0.4.2.3 – 2024–01–11

  ### Changed

  - added CPP to support GHC 9.8

  ## 0.4.2.2 – 2023–12–21

  ### Changed

  - updated formatting for newer Ormolu
  - fixed a Haddock typo

  ## 0.4.2.1

  Unknown changes.

  ## 0.4.2.0

  Unknown changes.

  ## 0.4.1.0

  Unknown changes.

  ## 0.4.0.1 – 2020–12–08

  ### Changed

  - updated explanation of differences from `recursion-schemes`
  - updated comments and parameter names in metamorphisms

  ## 0.4.0.0 – 2020–12–08

  ### Added

  - more example algebras

  ### Changed

  - `while` is generalized and now called `definedOrInput`
  - `split` renamed to `diagonal`

  ## 0.3.2.0 – 2020–06–01

  ### Added

  - `zipAlgebraMs`

  ## 0.3.1.2 – 2020–05–18

  ### Added

  - `HFunctor` instances

  ## 0.3.1.1 – 2020–05–18

  ### Changed

  - Turned on StrictData

  ## 0.3.1.0 – 2020–05–18

  ### Added

  - Copied Kmett's auto-extraction of pattern functors

  ## 0.3.0.0 – 2020–05–14

  ### Changed

  - introduced minimal poly-kinding of type classes

  ## 0.2.1.3 – 2020–05–14

  ### Changed

  - enabled and fixed warnings

  ## 0.2.1.2 – 2019–11–08

  ### Changed

  - improved documentation

  ## 0.2.1.1 – 2019–11–08

  ### Added

  - documentation explaining limitations of `Mu`
  - tests for `law_cataCompose` (which bumps the yaya-hedgehog dependency for tests)

  ## 0.2.1.0 – 2019–01–08

  ### Added

  - exports of type class methods via `Yaya.Retrofit`

  ## 0.2.0.0 – 2019–01–08

  ### Added

  - `DFunctor` instances for `Mu` and `Nu`
  - lower bounds on internal yaya dependencies

  ### Changed

  - moved `DFunctor` and `HFunctor` to a new `Yaya.Functor` module
  - renamed `cursiveIso` to `steppableIso`

  ## 0.1.0.0 – 2019–01–04

  ### Added

  - everything (this is the initial release)
changelog-type: markdown
description: |
  # Yaya

  Yet another … yet another recursion scheme library for Haskell

  ## overview

  Recursion schemes allow you to separate _any_ recursion from your business logic, writing step-wise operations that can be applied in a way that guarantees termination (or, dually, progress).

  How's this possible? You can’t have totality _and_ Turing-completeness, can you? Oh, but [you can](https://pdfs.semanticscholar.org/e291/5b546b9039a8cf8f28e0b814f6502630239f.pdf) – there is a particular type, `Partial a` (encoded with a fixed-point) that handles potential non-termination, akin to the way that `Maybe a` handles exceptional cases. It can be folded into `IO` in your main function, so that the runtime can execute a Turing-complete program that was modeled totally.

  **NB**: The tests for this package are unfortunately included in `yaya-hedgehog` instead, to avoid a dependency cycle.

  ## organization

  This organization is intended to make this a lightly-opinionated library. You should only need to import one module (per package) into any module of yours.

  - `Pattern` – This is what you should use most of the time. It provides common pattern functors that aren’t found elsewhere as well as other operations that are useful when you’re defining your own algebras.
  - `Fold` – This (and its submodules) provides algebra transformers, fixed-point operators, and other things you use when applying folds.
  - `Retrofit` – Utilities for making your existing data types compatible with recursion schemes.
  - `Applied` – A number of commonly-useful utilities defined as folds. Intended both as examples and code that you can actually use in your projects.
  - `Zoo` – Names that you may have seen in the recursion scheme literature, but that we generally avoid using here. In general, prefer the right-hand side of these definitions, which shouldn’t require importing this module.

  ## Some (hopefully) helpful guidelines

  Greek characters (and names) for things can often add confusion, however, there are some that we’ve kept here because I think (with the right mnemonic) they're actually clarifying.

  - `φ` – an algebra – “phi” (pronounced /faɪ/)
  - `ψ` – a coalgebra – “psi” (pronounced /ˈ(p)saɪ/)

  These are the symbols used in “the literature”, but I think they also provide a good visual mnemonic – φ, like an algebra, is folded inward, while ψ, like a coalgebra, opens up. So, I find these symbols more evocative than `f` and `g` or `algebra` and `coalgebra`, or any other pair of names I’ve come across for these concepts.

  There are two other names, `Mu` and `Nu` (for the inductive and coinductive fixed-point operators), that I _don’t_ think have earned their place, but I just haven’t come up with something more helpful yet.

  ### Naming Conventions

  There's a set of conventions around the naming of the operations. There are many variants of each operation (and they're all ultimately variants of `cata` and `ana`), so understanding this convention should help make it easier to understand the myriad possibilities rather than learning them by rote. The general pattern is

  > [`e`][`g`]`operation`[`T`][`M`]

  #### `g`

  “Generalized” variant – This parameterizes the fold over some `DistributiveLaw` that generalizes the (co)algebra over some `Monad` or `Comonad`. This is normally only applied to the fundamental operations – `cata`, `ana`, and `hylo`, but there is also a `gapo` (dual to `zygo`) that really only coincidentally follows this naming pattern.

  Many of the other “well-known” named folds are specializations of this:

  - when specialized to `((,) T)`, it’s `para`;
  - when `((,) B)`, `zygo`;
  - when `Free f`, `futu`;
  - etc.

  #### `e`

  “Elgot” variant – Named after the form of coalgebra used in an “Elgot algebra”. If there is an operation that takes some `f (x a) -> a`, the Elgot variant takes `x (f a) -> a`, which often has similar but distinct properties from the original.

  As a mnemonic, you can read the `e` as “exterior” as with a regular generalized fold, the `x` is on the _inside_ of the `f`, while with the Elgot variant, it's on the _outside_ of the `f`.

  #### `T`

  “Transformer” variant – For some fold that takes an algebra like `f (x a) -> a`, and where `t` is the (monad or comonad) transformer of `x`, the transformer variant takes an algebra like `f (t m a) -> a`.

  #### `M`

  Kleisli (“monadic”) variant – This convention is much more widespread than simply recursion schemes. A fold that returns its result in a `Monad`, by applying a Kleisli algebra (that is, `f a -> m a` rather than `f a -> a`. The dual of this might be something like `anaW` (taking a seed value in a `Comonad`), but those are uninteresting. Having Kleisli variants of unfolds is unsafe, as it can force traversal of an infinite structure. If you’re looking for an operation like that, you are better off with an effectful streaming library.
description-type: markdown
hash: 1e31ee12eabaa364616291304f6d1a77b5f3745af2e3c1f18b0fcfd0072b2d98
homepage: https://github.com/sellout/yaya#readme
latest: 0.6.0.0
license-name: AGPL-3.0-or-later
maintainer: Greg Pfeil <greg@technomadic.org>
synopsis: Total recursion schemes.
test-bench-deps:
  base: ^>=4.12.0 || ^>=4.13.0 || ^>=4.14.0 || ^>=4.15.0 || ^>=4.16.0 || ^>=4.17.0
    || ^>=4.18.0 || ^>=4.19.0
  doctest: ^>=0.16.0 || ^>=0.18.1 || ^>=0.20.1 || ^>=0.21.1 || ^>=0.22.2
  yaya: '>=0'
