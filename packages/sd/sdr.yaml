homepage: https://github.com/adamwalker/sdr
changelog-type: ''
hash: dde2a2ab9c309f01dfa465e4bcc5206613c253da037bdf7280291e1038b8c18b
test-bench-deps:
  test-framework: '>=0.8 && <0.9'
  base: '>=4.6 && <5'
  storable-complex: ==0.2.*
  test-framework-quickcheck2: '>=0.3 && <0.4'
  criterion: '>=1.0 && <1.7'
  sdr: -any
  QuickCheck: '>=2.8 && <2.15'
  primitive: '>=0.5 && <0.9'
  vector: '>=0.11 && <0.14'
maintainer: adamwalker10@gmail.com
synopsis: A software defined radio library
changelog: ''
basic-deps:
  Chart: '>=1.3 && <1.10'
  cereal: '>=0.4 && <0.6'
  pango: '>=0.13 && <0.14'
  bytestring: '>=0.10 && <0.12'
  Chart-cairo: '>=1.3 && <1.10'
  mwc-random: '>=0.15 && <0.16'
  OpenGL: '>=2.11 && <3.1'
  fftwRaw: '>=0.1 && <0.2'
  base: '>=4.7 && <5'
  pipes-bytestring: '>=2.0 && <2.2'
  time: '>=1.4 && <1.13'
  storable-complex: '>=0.2 && <0.3'
  tuple: '>=0.2 && <0.4'
  cairo: '>=0.13 && <0.14'
  network: '>=3 && <4'
  array: '>=0.4 && <0.6'
  containers: '>=0.5 && <0.7'
  dynamic-graph: '>=0.1.0.12 && <0.2'
  pulse-simple: '>=0.1 && <0.2'
  rtlsdr: '>=0.1 && <0.2'
  pipes: '>=4.1 && <4.4'
  pipes-concurrency: '>=2.0 && <2.1'
  bytestring-to-vector: '>=0.3 && <0.5'
  GLFW-b: '>=1.4.8 && <4'
  colour: '>=2.3 && <2.4'
  transformers: '>=0.5 && <0.7'
  optparse-applicative: '>=0.11 && <0.19'
  Decimal: '>=0.4 && <0.6'
  primitive: '>=0.5 && <0.9'
  vector: '>=0.11 && <0.14'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.8
- 0.1.0.9
- 0.1.0.10
- 0.1.0.11
- 0.1.0.12
- 0.1.0.13
- 0.1.0.14
author: Adam Walker
latest: 0.1.0.14
description-type: markdown
description: "# SDR\n\nA Software Defined Radio library written in Haskell\n\nSee
  the [blog post](https://adamwalker.github.io/Introducing-SDR/).\n\n# Features\n*
  Write software defined radio applications in Haskell\n* Signal processing blocks
  can be chained together using the [Pipes](https://hackage.haskell.org/package/pipes)
  library\n* Zero copy design\n* Signal processing functions are implemented in both
  Haskell and C:\n    * Optimised C implementations of signal processing functions
  that utilise SIMD instructions\n    * Performance of Haskell signal processing functions
  within a factor of 2 of C (without SIMD) thanks to the vector library, stream fusion
  and ghc's LLVM backend\n* Can filter, decimate and resample\n* Helper functions
  for FIR filter design using window functions and plotting of the frequency response
  \n* FFTs using [FFTW](http://www.fftw.org)\n* Line and waterfall plots using OpenGL\n*
  FM demodulation\n* PulseAudio sound sink\n* [rtl-sdr](http://sdr.osmocom.org/trac/wiki/rtl-sdr)
  and [BladeRF](https://nuand.com/) based radio sources/sinks supported and other
  sources are easily added\n* Extensive benchmark and test suites of signal processing
  functions\n\nSee [sdr-apps](https://github.com/adamwalker/sdr-apps) for a collection
  of simple apps built on the library, [sdr-demo](https://github.com/adamwalker/sdr-demo)
  for a demo application and [bladerf-sdr-apps](https://github.com/adamwalker/bladerf-sdr-apps)
  to get started with the BladeRF.\n\n# Screenshot\nA chunk of the FM broadcast spectrum.
  Captured with an RTLSDR device and drawn as a waterfall using the [Plot](https://github.com/adamwalker/sdr/blob/master/hs_sources/SDR/Plot.hs)
  module.\n\n![Screenshot](https://raw.githubusercontent.com/adamwalker/sdr/screenshots/screenshots/screenshot.png?raw=true)\n\n\n#
  Getting Started\n\n## Installation\n\nThis library will only build and run on 64
  bit x86 Linux systems.\n\nYou can install it from [Hackage](https://hackage.haskell.org/package/sdr):\n```\ncabal
  install sdr\n```\n\nIf you want to use the BladeRF, you will also need [bladerf-pipes](https://github.com/adamwalker/bladerf-pipes)
  and [hlibBladeRF](https://github.com/victoredwardocallaghan/hlibBladeRF). \n\n##
  Example Applications\n\nA collection of simple apps can be found [here](https://github.com/adamwalker/sdr-apps).
  These include an FM radio receiver, an OpenGL waterfall plotter and an AM radio
  receiver that can be used to listen to [Airband](https://en.wikipedia.org/wiki/Airband).\n\nClone
  and build:\n\n```\ngit clone https://github.com/adamwalker/sdr-apps  \ncd sdr-apps\ncabal
  install\n```\n\nTo run the FM receiver:\n\n(Assuming cabal-built binaries are in
  your path)\n```\nfm -f <your favourite station, e.g. 90.2M>  \n```\n\nTo run the
  waterfall plot:\n```\nwaterfall -f <center frequency, e.g. 90.2M> -r <sample rate,
  e.g. 1280M>\n```\n\nTo run the AM receiver:\n```\nam -f <center frequency, e.g.
  124.4M> \n```\n\n# Usage\n\nDocumentation is available on [Hackage](https://hackage.haskell.org/package/sdr).\n\nAn
  FM receiver:\n\n```haskell\nimport           Control.Monad.Trans.Either\nimport
  \          Data.Vector.Generic        as VG \nimport           Pipes\nimport qualified
  Pipes.Prelude              as P\n\n\nimport SDR.Filter \nimport SDR.RTLSDRStream\nimport
  SDR.Util\nimport SDR.Demod\nimport SDR.Pulse\nimport SDR.CPUID\n\n--The filter coefficients
  are stored in another module\nimport Coeffs\n\nsamples    = 8192\nfrequency  = 105700000\n\nmain
  = eitherT putStrLn return $ do\n\n    info <- lift getCPUInfo\n\n    str  <- sdrStream
  (defaultRTLSDRParams frequency 1280000) 1 (fromIntegral samples * 2)\n\n    lift
  $ do\n\n        sink <- pulseAudioSink\n\n        deci <- fastDecimatorC info 8
  coeffsRFDecim \n        resp <- fastResamplerR info 3 10 coeffsAudioResampler\n
  \       filt <- fastFilterSymR info coeffsAudioFilter\n\n        runEffect $   str\n
  \                 >-> P.map (interleavedIQUnsignedByteToFloatFast info)\n                  >->
  firDecimator deci samples \n                  >-> fmDemod\n                  >->
  firResampler resp samples \n                  >-> firFilter filt samples\n                  >->
  P.map (VG.map (* 0.2)) \n                  >-> sink\n```\n\n# Disclaimer\nI started
  this project to learn about signal processing. I still have no idea what I'm doing.\n\nOnly
  tested on Arch Linux.\n\nIf you actually use this library for anything, let me know:
  adamwalker10@gmail.com\n\n"
license-name: BSD-3-Clause
