all-versions:
- '0.1'
- 0.2.0
- 0.2.0.1
- 0.2.1.1
author: Jan Bracker <jan.bracker@googlemail.com>
basic-deps:
  base: '>=4.8 && <5'
  containers: '>=0.5 && <0.6'
  fgl: '>=5.5 && <6.0'
  ghc: '>=7.10.1 && <8.5'
  mtl: '>=2.2 && <3'
  transformers: '>=0.4 && <0.6'
changelog: "# Supermonads package changelog\n\n## 0.2.0.1\n\n* Additional examples
  of supermonads and superapplicatives.\n* Reference the papers explaining supermonads
  and -applicatves \n  in the readme.\n\n## 0.2.0\n\n* Introduced super-applicatives
  through the `Applicative` class.\n  This is a natural broadening of our approach.\n*
  Renamed the constrained `CFunctor` to `Functor` so it can act as a \n  drop in replacement
  for the standard functor type class.\n* Introduced support for superarrows through
  the `ArrowArr`, `ArrowSequence`,\n  `ArrowSelect` and `ArrowCombine` type classes.\n
  \ * Added `ebba` examples that uses superarrows.\n* Restructure modules to put common
  plugin code into a module that is not \n  associated with supermonad or superarrows
  specifically. The old modules\n  are still provided so that people coming from the
  paper can still rely on\n  those instructions.\n* Fixed effect monad examples by
  using the new version of the `effect-monad`\n  package that supports GHC 8+.\n*
  Generalized and fixed issue with the constrained `WrappedMonad` instances.\n\n##
  0.1\n\n* Initial release.\n"
changelog-type: markdown
description: "# Supermonads and superapplicatives for GHC\n\nImplementation of supermonads
  for GHC. See the \n[Supermonads: One Notion to Bind Them All](http://jbracker.de/publications/2016-BrackerNilsson-Supermonads.pdf)
  \npaper for detailed explanation of version 0.1.\nAn [updated version of the paper](http://jbracker.de/publications/2017-BrackerNilsson-SupermonadsAndSuperapplicatives-UnderConsideration.pdf)
  \nthat also explains superapplicatives has been submitted to JFP.\n\n## Supermonads\n\nThe
  library offers two definitions for supermonads. The version \nin `Control.Super.Monad`
  does not have support for constrained\nmonads. The version in `Control.Super.Monad.Constrained`
  has \nsupport for constrained monads. The different versions are \nprovided, because
  working with the additional constraints \nrequired for constrained monads can be
  cumbersome sometimes.\nWe want to offer people a possibility to experiment with
  supermonads \nwithout having to bother with these constraints, if they don't need
  \nconstrained monads. If you have any feedback or suggestions for \nimprovement
  from you usage of supermonads, please leave them on\nthe GitHub bug tracker or write
  an email to the maintainer.\nThese parallel structures will not be maintained indefinitely
  and\nat some point we will probably only offer supermonads with support\nfor constrained
  monads.\n\n## Superapplicatives\n\nSupport for generalized applicatives was added
  in version 0.2.\nFor users this does not change anything. \n\n## Build Status\n\n`master`
  | `dev`\n---------|---------\n[![build status master][TravisBuildMaster]](https://travis-ci.org/jbracker/supermonad)
  | [![build status dev][TravisBuildDev]](https://travis-ci.org/jbracker/supermonad)\n\n##
  GHC Version\n\nThe implementation has been tested with GHC in version 7.10.3, 8.0.2
  and 8.2.1.\n\nVersions of GHC prior to version 7.10.1 will most certainly not work,\nbecause
  the plugin mechanism was still in development.\n\nNewer version of GHC may work.
  If you encounter problems with a newer version\nof GHC, please file a bug report
  so it can be fixed.\n\n## Usage\n\nTo use supermonads in a module you need to do
  the following:\n\n* Enable `RebindableSyntax` in your module by using the `LANGUAGE`
  pragma:\n  \n  ```{-# LANGUAGE RebindableSyntax #-}```\n  \n* Enable the plugin
  in that modules using the the `OPTIONS_GHC` pragma:\n  \n  ```{-# OPTIONS_GHC -fplugin
  Control.Super.Monad.Plugin #-}```\n  \n* Import the supermonad prelude `Control.Super.Monad.Prelude`.\n
  \ If you choose to work with constrained monads you will need to\n  import `Control.Super.Monad.Constrained.Prelude`
  instead.\n* Make sure to compile the module with the `-dynamic` flag.\n  This is
  required for GHC's plugin mechanism to work properly.\n\n## Bug Reports\n\nIf you
  file a bug report, please always include the version of GHC \nyou are working with
  and a minimal example that shows the problem.\n\n## Examples\n\nExamples for the
  use of the plugin with different kinds of monad generalizations \nare provided in
  the `examples` directory. All examples have their own separate \ncabal file and
  offer a version of the code with and without the use of supermonads.\n\nA minimal
  example of how to use supermonads can be found under `examples/monad/minimal`.\nIt
  is a good entry point to play around with supermonads.\n\n\n[TravisBuildMaster]:
  https://travis-ci.org/jbracker/supermonad.svg?branch=master\n[TravisBuildDev]: https://travis-ci.org/jbracker/supermonad.svg?branch=dev\n"
description-type: markdown
hash: 3b33ed7f76f7753ae71404ef7d27faa8cc18090171c574534115719594eeae8d
homepage: ''
latest: 0.2.1.1
license-name: BSD-3-Clause
maintainer: Jan Bracker <jan.bracker@googlemail.com>
synopsis: Plugin and base library to support supermonads in Haskell
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.8 && <5'
  containers: '>=0.5 && <0.6'
  ghc: '>=7.10.1 && <8.5'
