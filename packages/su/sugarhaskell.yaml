all-versions:
- '0.1'
author: Sebastian Erdweg
basic-deps:
  base: '>=4 && <5'
  process: '>=0'
changelog: ''
changelog-type: ''
description: "SugarJ Eclipse plugin (recommended)\n===================================\n\nVisit
  the SugarJ web site http://sugarj.org\n\nInstallation\n------------\n\n1. Install
  Eclipse (follow instructions on eclipse.org).\n2. Start Eclipse.\n3. In Eclipse,
  select 'Install New Software' in the 'Help' menu.\n4. In the 'work with' field,
  copy the SugarJ update site\n   http://update.sugarj.org and hit enter.\n5. Be sure
  to deselect the 'Group items by category' checkbox on the bottom of\n   the window.\n6.
  Select the latest instance of Sugarclipse and click continue. This will\n   install
  the SugarJ compiler, Spoofax and the Sugarclipse plugin.\n\n\nIn addition, please
  ensure enough stack space (about 4-16 MB) is available for\nthe SDF parser. You
  can set the stack space of your Java runtime using the\n-Xss16m command line argument
  when starting Eclipse or setting -Xss16m in your\neclipse.ini file.\n\n\nSetting
  up a SugarJ project\n---------------------------\n\n1. Create a new Java project.\n2.
  As for now, we need to register the SugarJ builder for this project by hand:\n   Open
  your project's '.project' file in any text editor and replace the Java\n   build
  command by the following code:\n     <buildCommand>\n       <name>org.sugarj.editor.SugarJBuilder</name>\n
  \      <arguments></arguments>\n     </buildCommand> \n3. We're ready to go. Note:
  SugarJ source files must have the file extension\n   \".sugj\".\n\n\n\nSugarJ standalone
  compiler\n==========================\n\n\nInstalling SugarJ\n-----------------\n\nThe
  SugarJ compiler is almost self-contained and only requires an installation\nof a
  Java runtime version 6 or higher. Download `sugarj.zip` and\nextract it to a location
  of your choice. The directory structure of\nthe archive is as follows.\n\n    sugarj/\n
  \     bin/              Scripts to invoke SugarJ\n        sugarj          Compiler
  for *nix\n        sugarj.bat      Compiler for Windows\n        sugh            Alias
  of `sugarj -l haskell` for *nix\n        sugh.bat        Alias of `sugarj -l haskell`
  for Windows\n        sugj            Alias of `sugarj -l java` for *nix\n        sugj.bat
  \       Alias of `sugarj -l java` for Windows\n      case-studies/     Sample SugarJ
  projects\n      lib/              The back end\n      README.md         This file\n\nAdding
  `sugarj/bin` to the `PATH` environmental variable of your\nplatform will allow invocation
  of SugarJ scripts without prefixing\nthem by a location.\n\n\nInvoking SugarJ\n---------------\n\nIf
  the current directory is your working directory containing the source files,\ncalling
  SugarJ is very easy:\n\n    bin/sugarj -l java closures/Test.sugj\n\nThe `-l` flag
  is necessary to specify your host language of choice. Currently,\nwe support Haskell,
  Java, and Prolog.\n\nIf your source files are located in `case-studies/closure/src`,
  you can invoke\nthe compiler like this on *nix:\n\n    bin/sugarj -l java                       \\\n
  \     --sourcepath case-studies/closures/src \\\n      -d           case-studies/closures/bin
  \\\n      concretesyntax/Test.sugj               # file(s) to compile relative\n
  \                                            # to sourcepath\n\nOn Windows:\n\n
  \   bin\\sugarj -l java                       ^\n      --sourcepath case-studies/closures/src
  ^\n      -d           case-studies/closures/bin ^\n      concretesyntax\\Test.sugj\n\nThe
  generated `Test.class` may be executed thus:\n\n    java -cp case-studies/closures/bin
  concretesyntax.Test\n\n\nCompiler options\n----------------\n\n    --atomic-imports
  \        Parse all import statements simultaneously.\n    --cache <arg>            Specifiy
  a directory for caching.\n    --cache-info             Show where files are cached\n
  \   -cp,--buildpath <arg>    Specify where to find compiled files. Multiple\n                               paths
  can be given separated by ':'.\n    -d <arg>                 Specify where to place
  compiled files\n    --full-command-line      Show all arguments to subprocesses\n
  \   --gen-files              Generate files?\n    --help                   Print
  this synopsis of options\n    -l,--language <arg>      Specify a language library
  to activate.\n    --no-checking            Do not check resulting SDF and Stratego
  files.\n    --read-only-cache        Specify the cache to be read-only.\n    --silent-execution
  \      Try to be silent\n    --sourcepath <arg>       Specify where to find source
  files. Multiple\n                               paths can be given separated by
  ':'.\n    --sub-silent-execution   Do not display output of subprocesses\n    -v,--verbose
  \            Show verbose output\n    --write-only-cache       Specify the cache
  to be write-only.\n"
description-type: markdown
hash: be1c859f1ad934ae1182e8e958e3c44ca5d5bef5ed2598056afce1c5246fbf4b
homepage: http://sugarj.org
latest: '0.1'
license-name: LicenseRef-GPL
maintainer: seba at informatik uni-marburg de
synopsis: Library-based syntactic extensibility for Haskell
test-bench-deps: {}
