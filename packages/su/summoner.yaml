all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.1.0
- 1.1.0.1
- 1.2.0
- 1.3.0
- 1.3.0.1
- 1.4.0.0
- 2.0.0.0
- 2.0.1.0
- 2.0.1.1
author: Veronika Romashkina, Dmitrii Kovanikov
basic-deps:
  aeson: '>=1.2.4.0 && <1.6'
  base: '>=4.11 && <4.15'
  colourista: ^>=0.1
  containers: ^>=0.6
  directory: ^>=1.3.0.2
  filepath: ^>=1.4.1.2
  generic-data: ^>=0.8.0.0
  gitrev: ^>=1.3.1
  neat-interpolation: ^>=0.3.2.2
  optparse-applicative: ^>=0.15
  process: ^>=1.6.1.0
  relude: '>=0.7.0.0 && <0.8'
  shellmet: ^>=0.0.3.0
  summoner: '>=0'
  text: ^>=1.2.3.0
  time: '>=1.8 && <1.11'
  tomland: ^>=1.3.0.0
  validation-selective: '>=0.0.0.0 && <0.2'
changelog: "# Changelog\n\n`summoner` uses [PVP Versioning][1].\nThe changelog is
  available [on GitHub][2].\n\n## 2.0.1.1 — May 29, 2020\n\n* [#467](https://github.com/kowainik/summoner/issues/467):\n
  \ Allow `aeson-1.5.0.0`.\n* [#469](https://github.com/kowainik/summoner/issues/469):\n
  \ __#TUI__ Allow `brick-0.54`.\n\n## 2.0.1.0 — May 21, 2020\n\n* [#443](https://github.com/kowainik/summoner/issues/443):\n
  \ Support GHC-8.10.1 for `Summoner` project.\n* [#459](https://github.com/kowainik/summoner/issues/459):\n
  \ Bump up `tomland` version to `1.3.0.0`.\n* [#460](https://github.com/kowainik/summoner/issues/460):\n
  \ Bump up `relude` version to `0.7.0.0`.\n  Remove `Summoner.Template.Mempty` as
  `memptyIfFalse` is imported from\n  `Relude`.\n* [#455](https://github.com/kowainik/summoner/issues/455):\n
  \ Allow `validation-selective` version `0.1.0.0`.\n* [#452](https://github.com/kowainik/summoner/issues/452):\n
  \ Bump up `colourista` version to `0.1.0.0`. Remove the\n  `Summoner.Ansi` module.\n*
  __#TUI__ Bump up `brick` upper bound to allow `0.53`.\n* __#CLI__ Bump up `time`
  upper bound to allow `1.10`.\n\n## 2.0.0.0 – Mar 28, 2020\n\n* [#246](https://github.com/kowainik/summoner/issues/246):\n
  \ Put common fields into the `common-options` [common stanza](https://vrom911.github.io/blog/common-stanzas).\n
  \ (by [@vrom911](https://github.com/vrom911))\n* [#351](https://github.com/kowainik/summoner/issues/351),\n
  \ [#395](https://github.com/kowainik/summoner/issues/395),\n  [#398](https://github.com/kowainik/summoner/issues/398):\n
  \ __#CLI__ __#TUI__\n  Add GitHub Actions CI check as an option for the generated\n
  \ project.\n\n  * Add `-a` or `--actions` CLI option for GitHub actions.\n  * Add
  `GitHub Actions` entry into interactive CLI mode.\n  * Add `GitHub Actions` button
  into TUI.\n  * Add `githubActions` to the TOML configs.\n\n  (by [@patrickt](https://github.com/patrickt),
  [@vrom911](https://github.com/vrom911), [@chshersh](https://github.com/chshersh))\n*
  [#401](https://github.com/kowainik/summoner/issues/401),\n  [#429](https://github.com/kowainik/summoner/issues/429):\n
  \ Support GHC-8.8.3 in the project.\n  Make GHC-8.8.3 default for the generated
  projects.\n  Upgrade Stack LTS to `15.5`.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#418](https://github.com/kowainik/summoner/issues/418):\n  Bump default `cabal`
  version to `2.4` in the generated project.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#114](https://github.com/kowainik/summoner/issues/114):\n  __#CLI__ __#TUI__\n
  \ Implement non-interactive mode with `-n | --non-interacive` command-line option.\n
  \ (by [@vrom911](https://github.com/vrom911))\n* [#70](https://github.com/kowainik/summoner/issues/70):\n
  \ __#CLI__ __#TUI__\n  Implement `summon config` command. This command will generate
  the\n  default TOML configuration file with helpful comments.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#361](https://github.com/kowainik/summoner/issues/361):\n  Always put all default
  warnings in `ghc-options` inside common\n  stanza under cabal conditionals on the
  `GHC` version. Now they look\n  like this:\n\n  ```haskell\n  if impl(ghc >= 8.4)\n
  \   ghc-options:       -Wmissing-export-lists\n                       -Wpartial-fields\n
  \ if impl(ghc >= 8.8)\n    ghc-options:       -Wmissing-deriving-strategies\n  ```\n\n
  \ (by [@chshersh](https://github.com/chshersh))\n* [#345](https://github.com/kowainik/summoner/issues/345):\n
  \ Apply `mixins` approach for using alternative preludes instead of\n  the `base-noprelude`
  trick. Now it looks like this in the `.cabal`\n  file:\n\n  ```haskell\n  mixins:
  \             base hiding (Prelude)\n                     , relude (Relude as Prelude)\n
  \ ```\n  (by [@chshersh](https://github.com/chshersh))\n* [#251](https://github.com/kowainik/summoner/issues/251):\n
  \ Update LICENSE names for `.cabal` files in generated projects.\n  Add `ISC` to
  the list of the accepted licenses.\n  (by [@vrom911](https://github.com/vrom911))\n*
  __#CLI__ __#TUI__\n  Customise outputted LICENSE text for `summon show license LICENSE_NAME`
  command\n  (by [@vrom911](https://github.com/vrom911))\n* [#399](https://github.com/kowainik/summoner/issues/399):\n
  \ Add Haddock header to library module.\n\n  ```haskell\n  {- |\n  Copyright: (c)
  2020 FULL_NAME\n  SPDX-License-Identifier: LICENSE_NAME\n  Maintainer: NAME <email@email.com>\n\n
  \ Project description\n  -}\n  ```\n  (by [@vrom911](https://github.com/vrom911))\n*
  Improve `maintainer` field in the generated `.cabal` file.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#430](https://github.com/kowainik/summoner/issues/430):\n  Instead of not including
  old GHCs for Stack check at Travis,\n  those versions are added to the `allow_failures`
  section of matrix.\n  (by [@vrom911](https://github.com/vrom911))\n\n  _Note:_ For
  the Stack failure reasons see [this issue](https://github.com/commercialhaskell/stack/issues/4488).\n*
  [#394](https://github.com/kowainik/summoner/issues/394):\n  Do not crush when `hub`
  is not installed. Instead, print descriptive warning\n  message.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#34](https://github.com/kowainik/summoner/issues/34):\n  Print helpful error message
  when `hub` fails (for example, if the\n  password is incorrect).\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#281](https://github.com/kowainik/summoner/issues/281):\n  Add more example projects
  and golden tests for various scaffolding\n  configurations.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#375](https://github.com/kowainik/summoner/issues/375):\n  Remove deprecated `stylish`
  and `contributing` fields in the configurations.\n  Use `files` instead.\n  (by
  [@vrom911](https://github.com/vrom911))\n* Use `--silent` and `--fail` options with
  `curl` commands.\n  (by [@chshersh](https://github.com/chshersh))\n* Upgrade GHC-8.6.5
  LTS to `14.27`.\n  (by [@vrom911](https://github.com/vrom911))\n* __#TUI__ Allow
  `brick-0.52`.\n  (by [@vrom911](https://github.com/vrom911))\n* [#363](https://github.com/kowainik/summoner/issues/363):\n
  \ Move from `generic-deriving` to `generic-data`.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#434](https://github.com/kowainik/summoner/issues/434):\n  Move to `validation-selective`.\n
  \ (by [@vrom911](https://github.com/vrom911))\n* Use `colourista` for pretty terminal
  formatting.\n  (by [@chshersh](https://github.com/chshersh))\n\n## 1.4.0.0 – Dec
  25, 2019 \U0001F385\n\n* [#339](https://github.com/kowainik/summoner/issues/339):\n
  \ Support GHC `8.8.1` in generated projects.\n  __Note:__ Stack projects will use
  `nightly` resolver as the stable one is not\n  out at the moment of this issue is
  implemented.\n  (by [@vrom911](https://github.com/vrom911))\n* Add `-Wmissing-deriving-strategies`
  option to GHC version `8.8.1` and upper\n  in the generated projects.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#314](https://github.com/kowainik/summoner/issues/314):\n  __#CLI__ __#TUI__ Improve
  `summon(-tui) show ghc` output.\n  (by [@gableh](https://github.com/gableh), [@vrom911](https://github.com/vrom911))\n*
  [#316](https://github.com/kowainik/summoner/issues/316):\n  Add logos to README
  bagdes in the generated projects.\n  (by [@vrom911](https://github.com/vrom911))\n*
  Generate project of version `0.0.0.0` instead of `0.0.0`.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#322](https://github.com/kowainik/summoner/issues/322):\n  Run HLint check before
  project build in `.travis.yml` file for\n  the generated projects.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#382](https://github.com/kowainik/summoner/issues/382):\n  Improve error logging
  when fetching the license from GitHub while generating\n  the project.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#255](https://github.com/kowainik/summoner/issues/255):\n  __#CLI__ __#TUI__ Autofill
  prelude module name when package name is typed.\n  (by [@yigitozkavci](https://github.com/yigitozkavci))\n*
  [#354](https://github.com/kowainik/summoner/issues/354):\n  __#CLI__ __#TUI__ Validate
  prelude package name and module name in config file, CLI, TUI.\n  (by [@yigitozkavci](https://github.com/yigitozkavci),
  [@vrom911](https://github.com/vrom911))\n* [#315](https://github.com/kowainik/summoner/issues/315):\n
  \ Remove `-fhide-source-paths` from generated `stack.yaml` file\n  as it is implied
  by the newer version of Stack.\n  (by [@bangng](https://github.com/chshersh), [@chshersh](https://github.com/chshersh))\n*
  Add `stack.yaml.lock` to `.gitignore` file in the generated project.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#318](https://github.com/kowainik/summoner/issues/318):\n  Support GHC `8.6.5`
  in generated projects.\n  (by [@vrom911](https://github.com/vrom911))\n* Remove
  support of GHC `8.6.4`, `8.6.3`, `8.4.3`. Leave only the latest\n  versions of each
  major release for generated projects.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#333](https://github.com/kowainik/summoner/issues/333):\n  Introduce `files` option
  in the TOML configuration which allows to specify\n  custom files. Deprecate `stylish`
  and `contributing` options.\n  (by [@chshersh](https://github.com/chshersh))\n\n
  \ _Migration guide:_ Instead of\n\n  ```toml\n  stylish.url = \"some url\"\n  contributing.link
  = \"some link\"\n  ```\n\n  specify them like this:\n\n  ```toml\n  files =\n      [
  { path = \".stylish-haskell.yaml\"\n        , url  = \"some url\"\n        }\n      ,
  { path = \"CONTRIBUTING.md\"\n        , link = \"some link\"\n        }\n      ]\n
  \ ```\n* [#374](https://github.com/kowainik/summoner/issues/374):\n  Remove `warnings`
  field in the TOML configuration which was deprecated in the previous release.\n
  \ (by [@chshersh](https://github.com/chshersh))\n\n  _Migration guide:_ Rename `warnings`
  field to `ghc-options` instead.\n* [#367](https://github.com/kowainik/summoner/issues/367):\n
  \ Add `raw` type of custom extra files in the TOML configuration.\n  Remove `link`
  type of file.\n  (by [@chshersh](https://github.com/chshersh))\n\n  _Migration guide:_
  Replace `link` with `raw` and specify any custom text you\n  want.\n* Rename `file`
  config field of `source` to `local` in the TOML configuration.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#327](https://github.com/kowainik/summoner/issues/327):\n  Better AppVeyor CI configuration
  for both `cabal` and `stack` in the generated\n  project.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#253](https://github.com/kowainik/summoner/issues/253):\n  __#TUI__ Fix new line
  in the Description field of the form.\n  (by [@yigitozkavci](https://github.com/yigitozkavci))\n*
  [#385](https://github.com/kowainik/summoner/issues/385):\n  Add golden tests for
  `summon show ghc` command's output.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#384](https://github.com/kowainik/summoner/issues/384):\n  Test golden project
  build's success.\n  (by [@chshersh](https://github.com/chshersh))\n* [#318](https://github.com/kowainik/summoner/issues/318):\n
  \ Build Summoner multipackage project with GHC `8.6.5`.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#338](https://github.com/kowainik/summoner/issues/338):\n  Build Summoner multipackage
  project with GHC-8.8.1.\n  (by [@vrom911](https://github.com/vrom911))\n* [#360](https://github.com/kowainik/summoner/issues/360):\n
  \ Use mixins with `base` and `relude` in Summoner. Drop `base-noprelude` trick.\n
  \ (by [@vrom911](https://github.com/vrom911))\n* [#329](https://github.com/kowainik/summoner/issues/329):\n
  \ Bump up to `optparse-applicative-0.15`, use custom `ParserPrefs`.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#328](https://github.com/kowainik/summoner/issues/328):\n  Upgrade `tomland` bounds
  to allow `1.1.0.0`.\n  (by [@vrom911](https://github.com/vrom911))\n* [#373](https://github.com/kowainik/summoner/issues/373):\n
  \ Bump up to `tomland-1.2.1.0`.\n  (by [@vrom911](https://github.com/vrom911))\n*
  Bump up to `relude-0.6.0.0`.\n  (by [@vrom911](https://github.com/vrom911))\n* [#337](https://github.com/kowainik/summoner/issues/337):\n
  \ Allow `generic-deriving-1.13`.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#341](https://github.com/kowainik/summoner/issues/341):\n  Allow `ansi-terminal-0.10`.\n
  \ (by [@mpilgrem](https://github.com/mpilgrem))\n* [#323](https://github.com/kowainik/summoner/issues/323):\n
  \ Allow `tree-diff-0.1`.\n  (by [@vrom911](https://github.com/vrom911))\n* [#320](https://github.com/kowainik/summoner/issues/320):\n
  \ Allow `hedgehog-1.0`.\n  (by [@vrom911](https://github.com/vrom911))\n\n## 1.3.0.1
  — Apr 10, 2019\n\n* Include golden test files into `extra-source-files`.\n\n## 1.3.0
  (TUI: 0.1.0) — Apr 9, 2019\n\n* [#285](https://github.com/kowainik/summoner/issues/285):\n
  \ __#CLI__ __#TUI__ Implement `summon script` command.\n* [#151](https://github.com/kowainik/summoner/issues/151),\n
  \ [#295](https://github.com/kowainik/summoner/issues/295):\n  Add support for GHC-8.6.
  Make GHC-8.6.4 default.\n* [#269](https://github.com/kowainik/summoner/issues/269):\n
  \ __Important:__ Introduce `ghc-options` configuration parameter. Deprecate\n  `warnings`
  field in the TOML configuration.\n\n  _Migration guide:_ Please, rename `warnings`
  field if you use one, it will be\n  removed in the very next release. Use `ghc-options`
  instead.\n* [#303](https://github.com/kowainik/summoner/issues/303):\n  Add option
  `noUpload` to the TOML configuration.\n* __Important:__ Summoner doesn't add old
  GHC versions into Travis matrix for\n  Stack anymore. See this Stack issue for reasoning:\n
  \     https://github.com/commercialhaskell/stack/issues/4488\n* [#280](https://github.com/kowainik/summoner/issues/280):\n
  \ Support build with `cabal-install` on the AppVeyor CI.\n\n  __#TUI__ AppVeyor
  CI checkbox is no longer disabled when only `cabal` build tool is\n  selected.\n*
  [#272](https://github.com/kowainik/summoner/issues/272):\n  Simplify Travis config
  for Cabal in the generated project.\n* [#275](https://github.com/kowainik/summoner/issues/275):\n
  \ Simplify Travis settings/installation process for Stack in the generated\n  project.\n*
  [#261](https://github.com/kowainik/summoner/issues/261):\n  Guess author login,
  name and email from `.gitconfig`.\n* [#268](https://github.com/kowainik/summoner/issues/268):\n
  \ __#CLI__ Simplify process of adding custom prelude in the interactive mode.\n*
  [#282](https://github.com/kowainik/summoner/issues/282):\n  Allow users to extend
  the `.gitignore` file.\n* [#286](https://github.com/kowainik/summoner/issues/286),\n
  \ [#288](https://github.com/kowainik/summoner/issues/288),\n  [#304](https://github.com/kowainik/summoner/issues/304):\n
  \ Bump up to `tomland-1.0.0`, `relude-0.5.0`, `shellmet-0.0.1`.\n* Drop support
  for GHC-8.6.3 on CI. Support GHC-8.6.4 on CI.\n* __#TUI__ Upgrade to `summoner-1.3.0`.\n*
  [#297](https://github.com/kowainik/summoner/issues/297):\n  __#TUI__ Strip project
  description.\n* [#304](https://github.com/kowainik/summoner/issues/304):\n  __#TUI__
  Bump up to `brick-0.47`.\n\n## 1.2.0 (TUI: 0.0.0) — Nov 30, 2018\n\n* [#208](https://github.com/kowainik/summoner/issues/208):\n
  \ __#TUI__ Implement initial TUI for `summoner`.\n* Make `cabal-version: 2.0` default
  in generated projects.\n* [#11](https://github.com/kowainik/summoner/issues/11):\n
  \ Support offline mode.\n* [#199](https://github.com/kowainik/summoner/issues/199):\n
  \ Add `None` license with no `LICENSE` file generation.\n  Add licenses short descriptions
  text during the interactive mode.\n  Patch `summon show license` command to show
  short description about\n  each license.\n* [#197](https://github.com/kowainik/summoner/issues/197)\n
  \ Build with `stack` lts-12.20, and support `GHC` 8.4.4 in\n  project generation.
  Make GHC-8.4.4 the default one for generated project.\n* [#37](https://github.com/kowainik/summoner/issues/37):\n
  \ Add HLint check on Travis CI in generatd projects.\n* [#142](https://github.com/kowainik/summoner/issues/142):\n
  \ Add version bounds to `base` in the generated `.cabal` file.\n* [#239](https://github.com/kowainik/summoner/issues/239):\n
  \ Make categories not mandatory.\n* Use `defaultDescription` for project description
  if not specified.\n* [#185](https://github.com/kowainik/summoner/issues/185):\n
  \ Add golden tests.\n* [#184](https://github.com/kowainik/summoner/issues/184)\n
  \ Add `--no-upload` option.\n* [#169](https://github.com/kowainik/summoner/issues/169):\n
  \ Make AppVeyor use the 64bits version of stack and build for 64 bits.\n* [#154](https://github.com/kowainik/summoner/issues/154):\n
  \ Add `Link` constructor to `Source` data type.\n* [#178](https://github.com/kowainik/summoner/issues/178):\n
  \ Remove unnecessary new lines and trailing spaces in most places.\n* [#168](https://github.com/kowainik/summoner/issues/168):\n
  \ Upgrade `stack` `intall-cabal` option's version to `2.2.0.1` in\n  the generated
  Travis file.\n* [#195](https://github.com/kowainik/summoner/issues/195):\n  Update
  prompt questions for CLI.\n* Add more documentation to the functions.\n* [#155](https://github.com/kowainik/summoner/issues/155):\n
  \ Bump up to `tomland-0.5.0`.\n* [#202](https://github.com/kowainik/summoner/issues/202):\n
  \ Bump up to `relude-0.4.0`.\n* Remove `tasty` dependencies from tests.\n* Drop
  support for GHC-8.6.1 on CI. Support GHC-8.6.2 on CI.\n* Drop support for GHC-8.4.3
  on CI. Build with GHC-8.4.4 on CI.\n* Use `defaultDescription` for project description
  if not specified.\n\n## 1.1.0.1 – Sep 10, 2018\n\n* Bump up `relude` version to
  `0.3.0`.\n* [#146](https://github.com/kowainik/summoner/issues/146):\n  Migrate
  to `base-noprelude`.\n* Add -Werror to build option in generated .travis.yml\n\n##
  1.1.0\n\n* [#128](https://github.com/kowainik/summoner/issues/128):\n  __Important:__
  Replace `summon` with `summon new` command.\n  To create a project now the following
  command should be used:\n  ```\n  summon new my-project\n  ```\n* [#82](https://github.com/kowainik/summoner/issues/82):\n
  \ Add stackage badges.\n* [#109](https://github.com/kowainik/summoner/issues/109):\n
  \ Fix travis cache directories.\n* [#117](https://github.com/kowainik/summoner/issues/117):\n
  \ Step into created project properly\n* [#110](https://github.com/kowainik/summoner/issues/110):\n
  \ Print executing command.\n* [#91](https://github.com/kowainik/summoner/issues/91):\n
  \ Add warning fields for ghc.\n* [#90](https://github.com/kowainik/summoner/issues/90):\n
  \ Add TOML test.\n* [#120](https://github.com/kowainik/summoner/issues/120):\n  Bump
  up dependencies.\n* [#58](https://github.com/kowainik/summoner/issues/58):\n  Make
  `Licence` type safer.\n* [#124](https://github.com/kowainik/summoner/issues/124):\n
  \ Print directories bold.\n* [#130](https://github.com/kowainik/summoner/issues/130):\n
  \ Show git revision version under `--version` command.\n* [#63](https://github.com/kowainik/summoner/issues/63):\n
  \ Add `show ghc`, `show license` and `show license <LICENSE_NAME>` commands.\n*
  [#122](https://github.com/kowainik/summoner/issues/122):\n  Remove github link from
  CHANGELOG when github is not chosen.\n* [#35](https://github.com/kowainik/summoner/issues/35):\n
  \ Add config option to add `.stylish-haskell.yaml` to your project\n  (via URL or
  file path).\n* Bump up `tomland` version to `0.4.0`.\n* [#138](https://github.com/kowainik/summoner/issues/138):\n
  \ Remove traces of GitHub from `.cabal` file when GitHub integration is disabled.\n*
  [#31](https://github.com/kowainik/summoner/issues/31):\n  Add config option to add
  `CONTRIBUTING.md` to your project\n  (via URL or file path).\n* [#27](https://github.com/kowainik/summoner/issues/27):\n
  \ Remove `b` script.\n\n## 1.0.6\n\n* Use `relude` instead of `universum`.\n* [#105](https://github.com/kowainik/summoner/issues/105):\n
  \ Add `--ignore-config` option.\n\n## 1.0.5\n\n* [#100](https://github.com/kowainik/summoner/issues/100):\n
  \ Bump up to `ghc-8.4.3`. Add support for `Ghc843` in code\n  and make it default.\n*
  Make CI badges in README be shown depending on the chosen options.\n* [#99](https://github.com/kowainik/summoner/issues/99):\n
  \ UseTravis-specific env variable `TRAVIS_BUILD_DIR` in created travis file.\n*
  [#97](https://github.com/kowainik/summoner/issues/97):\n  Add cabal to created travis
  file.\n* [#96](https://github.com/kowainik/summoner/issues/96):\n  Add option to
  choose `cabal`, `stack` or both.\n\n## 1.0.4\n\n* Bump up `tomland` to version `0.3`.\n\n##
  1.0.3\n\n* [#92](https://github.com/kowainik/summoner/issues/92):\n  Remove -fhide-source-paths
  from generated stack yaml files for\n  GHC < 8.2\n\n## 1.0.2\n\n* [#87](https://github.com/kowainik/summoner/issues/87):\n
  \ Fix Travis matrix for not default `ghc` versions.\n\n## 1.0.1\n\n* [#85](https://github.com/kowainik/summoner/issues/85):\n
  \ Remove `base-noprelude` from dependencies.\n\n## 1.0.0\n\n* __Important:__ Rename
  `hs-init` to `summoner`. Transform the script into the package.\n* [#54](https://github.com/kowainik/summoner/issues/54):\n
  \  Rename `on` and `off` commands to `with` and `without`.\n* [#48](https://github.com/kowainik/summoner/issues/48):\n
  \ - Add ability to write configurations file. Remove `Targets` data type.\n    Use
  `Config` instead for default, file and CLI configurations.\n* [#60](https://github.com/kowainik/summoner/issues/60):\n
  \ Use custom prelude `universum`.\n* [#39](https://github.com/kowainik/summoner/issues/39):\n
  \ Add option to use custom prelude in CLI and in `.toml` configuration.\n* [#38](https://github.com/kowainik/summoner/issues/38):\n
  \ Add option to add default extensions to `.toml` config.\n* [#62](https://github.com/kowainik/summoner/issues/62):\n
  \ Make some parts of output not only colorful, but also bold. This makes output
  prettier.\n* [#67](https://github.com/kowainik/summoner/issues/67):\n  Add `Aswer`
  data type to handle yes-no CLI questions.\n* [#61](https://github.com/kowainik/summoner/issues/61):\n
  \ Add CLI `--version` option.\n* [#73](https://github.com/kowainik/summoner/issues/73):\n
  \ Make custom prelude be table in toml.\n* [#74](https://github.com/kowainik/summoner/issues/74):\n
  \ Print hierarchy tree for the created project.\n\n# hs-init\n\n## 0.0.4\n\n* Now
  works on windows systems as well\n* Add powershell install script for Windows\n\n\n##
  0.0.3\n\n* [#45](https://github.com/vrom911/hs-init/issues/45):\n  Support AppVeyor
  CI for created projects.\n\n## 0.0.2\n\n* Use metavar for on-off commands.\n* Upgrade
  `lts` to `10.3`, use `ghc 8.2.2` as default value.\n\n## 0.0.1\n\n* [#36](https://github.com/vrom911/hs-init/issues/36):\n
  \ Add option for creating private repositories — `-p | --private`.\n\n[1]: https://pvp.haskell.org\n[2]:
  https://github.com/kowainik/summoner/releases\n"
changelog-type: markdown
description: "# \U0001F52E Summoner\n\n![wizard](https://user-images.githubusercontent.com/8126674/44388234-320aac00-a55a-11e8-879d-5dca68512031.png)\n[![GitHub
  CI](https://github.com/kowainik/summoner/workflows/CI/badge.svg)](https://github.com/kowainik/summoner/actions)\n[![Build](https://img.shields.io/travis/kowainik/summoner.svg?logo=travis)](http://travis-ci.org/kowainik/summoner)\n[![Windows
  build](https://ci.appveyor.com/api/projects/status/github/kowainik/summoner?branch=master&svg=true)](https://ci.appveyor.com/project/kowainik/summoner)\n[![Hackage](https://img.shields.io/hackage/v/summoner.svg?logo=haskell)](https://hackage.haskell.org/package/summoner)\n[![MPL-2.0
  license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/kowainik/summoner/blob/master/LICENSE)\n\n>
  _So many of our dreams at first seem impossible, then they seem improbable, and\n>
  then, when we summon the will, they soon become inevitable._\n>\n> Christopher Reeve\n\nSummoner
  is a tool for scaffolding fully configured batteries-included production-level Haskell
  projects.\n\nDo you want to create a library that is to be uploaded to Hackage/Stackage,
  that builds with both Cabal and Stack and supports the latest three major GHC versions?\nOr
  are you building a production application which uses a custom prelude and has CI
  with  GitHub Actions or Travis Linux and AppVeyors Windows checks?\nMaybe do you
  want to play with your idea in a single module without introducing the whole complexity
  of the Haskell projects?\nSummoner can help you do all that with minimal effort
  from you - it can even upload the project to GitHub if you wish!\n\nBy the way,
  Summoner operates as either CLI or TUI application, so you can choose what you are
  more comfortable with and install only the required one.\n\n## Structure\n\n* [Demo](#demo)\n
  \   + [TUI demo](#tui-demo)\n    + [CLI demo](#cli-demo)\n    + [Examples](#examples)\n*
  [Features](#features)\n* [Get started](#get-started)\n    + [Prerequisites](#prerequisites)\n
  \   + [Installation](#installation)\n        + [Summon-TUI](#summon-tui)\n          +
  [TUI: download binary](#tui-download-binary)\n          + [TUI: Homebrew](#tui-homebrew)\n
  \         + [TUI: Ubuntu](#tui-ubuntu)\n          + [TUI: from Hackage/Stackage](#tui-from-hackagestackage)\n
  \         + [TUI: from source](#tui-from-source)\n        + [Summon-CLI](#summon-cli)\n
  \         + [CLI: download binary](#cli-download-binary)\n          + [CLI: Homebrew](#cli-homebrew)\n
  \         + [CLI: Ubuntu](#cli-ubuntu)\n          + [CLI: from Hackage/Stackage](#cli-from-hackagestackage)\n
  \         + [CLI: from source](#cli-from-source)\n    + [Setup](#setup)\n* [Usage](#usage)\n
  \   + [Command-line arguments](#command-line-arguments)\n    + [File configuration](#file-configuration)\n
  \   + [TUI](#tui)\n    + [CLI](#cli)\n* [FAQ](#faq)\n* [For Developers](#for-developers)\n
  \   + [Build](#build)\n    + [Test](#test)\n    + [Run](#run)\n* [Acknowledgments](#acknowledgments)\n\n##
  Demo\n\n[[Back to the Table of Contents] ↑](#structure)\n\n### TUI demo\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\n[![TUI demo](https://asciinema.org/a/314375.png)](https://asciinema.org/a/314375)\n\n###
  CLI demo\n\n[[Back to the Table of Contents] ↑](#structure)\n\n[![CLI demo](https://asciinema.org/a/314374.png)](https://asciinema.org/a/314374)\n\n###
  Examples\n\n[[Back to the Table of Contents] ↑](#structure)\n\nYou can also see
  complete examples in the following folder:\n\n* [`summon-cli/examples/`: Examples
  of scaffolded projects](https://github.com/kowainik/summoner/tree/master/summoner-cli/examples/)\n\nThe
  directory contains the following examples:\n\n* [`cabal-minimal`](https://github.com/kowainik/summoner/tree/master/summoner-cli/examples/cabal-minimal):\n
  \ Minimal Haskell project with the Cabal-only support, default\n  settings and all
  of the integrations disabled.\n* [`cabal-full`](https://github.com/kowainik/summoner/tree/master/summoner-cli/examples/cabal-full):\n
  \  Cabal-only project with all integrations enabled.\n* [`stack-full`](https://github.com/kowainik/summoner/tree/master/summoner-cli/examples/stack-full):\n
  \ Stack-only project with all integrations enabled.\n* [`full-batteries`](https://github.com/kowainik/summoner/tree/master/summoner-cli/examples/full-batteries):\n
  \ All batteries-included project which supports both build tools and\n  shows every
  Summoner feature.\n\n## Features\n\n[[Back to the Table of Contents] ↑](#structure)\n\nSummoner
  is a tool that combines predefined configurations, command-line arguments and a
  chosen interface.\n\nTo fully understand the power in your hands with the help of
  Summoner, please read this section.\n\nBelow you can see highlighted features in
  different categories.\n\n### Project\n\n[[Back to the Table of Contents] ↑](#structure)\n\nFeatures
  related to the structure and content of the generated projects.\n\n+ Support for
  Cabal and Stack build tools.\n+ Ability to pick stanzas (library, executable, test-suite,
  benchmark).\n+ Usage of [common stanza](https://vrom911.github.io/blog/common-stanzas)
  to reduce `.cabal` file's boilerplate.\n+ Option to include an alternative prelude,
  if desired. The project would then\n  use the [`mixins` technique](https://www.reddit.com/r/haskelltil/comments/9qa366/easy_way_to_replace_default_prelude_with_the/).\n+
  Whole Hackage-upload checklist support (exhaustive `.cabal` file, PVP versioning,
  GHC options, conventional meta files).\n+ Support for multiple GHC versions, with
  thoughtful reflection on project meta, base versions (e.g. `base >= 4.9 && < 4.13`),
  etc.\n+ Ability to create runnable Haskell scripts.\n+ Different license support:
  MIT, BSD-2-Clause, BSD-3-Clause, GPL-2.0, GPL-3.0, LGPL-2.1, LGPL-3.0, AGPL-3.0,
  Apache-2.0, MPL-2.0, ISC, None (without file).\n+ Creation of the `CHANGELOG.md`
  file with [PVP versioning policy](https://pvp.haskell.org).\n+ Ability to include
  any custom files (including `.stylish-haskell.yaml`, `CONTRIBUTING.md`, `CODEOWNERS`,
  `FUNDING.yml` etc.).\n+ Usage of the `ghc-options` field with sensible defaults.\n\n
  \ If `ghc-options` are not explicitly stated in the configuration file, then the
  following list of GHC flags is added to all stanzas:\n\n  ```\n  -Wall\n  -Wcompat\n
  \ -Widentities\n  -Wincomplete-uni-patterns\n  -Wincomplete-record-updates\n  -Wredundant-constraints
  \      (GHC ⩾ 8.0)\n  -fhide-source-paths           (GHC ⩾ 8.2)\n  -Wmissing-export-lists
  \       (GHC ⩾ 8.4)\n  -Wpartial-fields              (GHC ⩾ 8.4)\n  -Wmissing-deriving-strategies
  (GHC ⩾ 8.8)\n  ```\n\n  Besides, the following GHC options are added to the executable,
  tests and benchmark stanzas:\n\n  ```\n  -threaded\n  -rtsopts\n  -with-rtsopts=-N\n
  \ ```\n\n### GitHub\n\n[[Back to the Table of Contents] ↑](#structure)\n\n+ Initialisation
  of the git repository inside the project folder.\n+ Initial commit creation.\n+
  Uploading the repository to GitHub.\n+ Exhaustive `.gitignore` file.\n+ Formation
  of the `README` file with Hackage, Stackage and CI badges.\n+ Linking to the GitHub
  repository in the `.cabal` file.\n+ Ability to include your custom GitHub meta files:
  `CONTRIBUTING.md`, `CODEOWNERS`, `.github/pull_request_template.md`, etc.\n+ Guessing
  user credentials from the local `.gitconfig` file.\n\n### CI\n\n[[Back to the Table
  of Contents] ↑](#structure)\n\n+ Generation of the `.travis.yml` file that runs
  build and tests on CI under Linux using\n  [Dead simple Haskell Travis Settings
  for Cabal and Stack](https://chshersh.github.io/posts/2019-02-25-haskell-travis).\n+
  Generation of the `appveyor.yaml` file which runs build and tests on CI under Windows.\n+
  Generation of the `.github/workflows/ci.yml` file that runs build and tests on\n
  \ GitHub Actions CI under Linux using Cabal.\n+ Configuration matrix on CI to build
  with multiple GHC versions and various build tools.\n+ `-Werror` is enabled on CI
  not to miss any warnings.\n+ Run HLint checks on CI.\n\n### Others\n\n[[Back to
  the Table of Contents] ↑](#structure)\n\n+ Carefully collected Haskell project best
  practices gathered in your projects' scaffold.\n+ Generate beginner-friendly default
  configuration using the `summon config` command.\n+ Ability to create a project
  in the offline mode.\n+ Ability to check GHC-specific versions of the corresponding
  `base` library\n  and Stackage snapshot resolver via `summon show ghc` command.\n\n###
  Project structure example\n\n[[Back to the Table of Contents] ↑](#structure)\n\nThis
  is an example of the project hierarchy you can get if you are running Summoner's
  `new` command with all options enabled:\n\n```\nproject-name/\n├── app/\n│   └──
  Main.hs\n├── benchmark/\n│   └── Main.hs\n├── src/\n│   ├── ProjectName.hs\n│  
  └── Prelude.hs\n├── test/\n│   └── Spec.hs\n├── CHANGELOG.md\n├── CONTRIBUTING.md\n├──
  LICENSE\n├── project-name.cabal\n├── README.md\n├── Setup.hs\n├── stack.yaml\n├──
  stack-8.6.5.yaml\n├── appveyor.yml\n├── .git\n├── .gitignore\n├── .stylish-haskell.yaml\n└──
  .travis.yml\n```\n\n## Get started\n\n[[Back to the Table of Contents] ↑](#structure)\n\n###
  Prerequisites\n\n[[Back to the Table of Contents] ↑](#structure)\n\nTo start using
  Summoner make sure that you have the following tools installed on your machine:\n\n*
  [`git`](https://git-scm.com) – to initialize the GitHub repo.\n* [`hub`](https://github.com/github/hub)
  – to upload the project to GitHub.\n* [`curl`](https://curl.haxx.se) – to download
  licenses.\n\nWe also have minimal version requirements for build tools:\n\n* [Cabal
  ⩾ 2.4](https://www.haskell.org/cabal/)\n* [Stack ⩾ 2.1.3](http://haskellstack.org)\n\nHowever,
  it is always recommended to use the newest versions of build tools.\n\n### Installation\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nSummon contains two executables:\n\n*
  `summon`: scaffold projects using interactive CLI mode.\n* `summon-tui`: scaffold
  projects using TUI.\n\nBelow you can find the description of how to install each
  of them so you can choose the one you want.\n\n#### Summon-TUI\n\n[[Back to the
  Table of Contents] ↑](#structure)\n\n> **NOTE:** `summon-tui` is not supported on
  Windows. See [this issue](https://github.com/jtdaugherty/vty/pull/1).\n\n##### TUI:
  download binary\n\n[[Back to the Table of Contents] ↑](#structure)\n\nYou can download
  binary directly [from GitHub releases](https://github.com/kowainik/summoner/releases).\n\nAfter
  downloading binary, make it executable and copy it under convenient location, for
  example:\n\n```shell\nchmod +x summon-cli-linux\nmv summon-cli-linux ~/.local/bin/summon\n```\n\n#####
  TUI: Homebrew\n\n[[Back to the Table of Contents] ↑](#structure)\n\nIf you are on
  MacOS, you can get Summoner using Homebrew Kowainik's Tap.\n\nYou need to run the
  following command for that:\n\n```shell\n$ brew install kowainik/tap/summoner-tui\n```\n\n#####
  TUI: Ubuntu\n\n[[Back to the Table of Contents] ↑](#structure)\n\nIf you are on
  Ubuntu, you can get Summoner from Kowainik's PPA.\n\nYou need to run the following
  commands for that:\n\n```shell\n$ sudo add-apt-repository ppa:kowainik/summoner-tui\n$
  sudo apt update\n$ sudo apt install summoner-tui\n```\n\n##### TUI: from Hackage/Stackage\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nUsing `cabal`:\n\n```shell\ncabal v2-update\ncabal
  v2-install summoner-tui\n```\n\nUsing `stack`:\n\n```shell\nstack install summoner-tui\n```\n\n#####
  TUI: from source\n\n[[Back to the Table of Contents] ↑](#structure)\n\nFetch the
  repo using `cabal`:\n\n```shell\ncabal get -s summoner\n```\n\nor clone the directory
  from GitHub:\n\n```shell\ngit clone https://github.com/kowainik/summoner.git\n```\n\nStep
  into the directory:\n\n```haskell\ncd summoner\n```\n\nBuild and install using `cabal`:\n\n```shell\ncabal
  v2-install summoner-tui:exe:summon-tui\n```\n\nBuild and install using `stack`:\n\n```shell\nstack
  install summoner-tui:exe:summon-tui\n```\n\n#### Summon-CLI\n\n[[Back to the Table
  of Contents] ↑](#structure)\n\n##### CLI: download binary\n\n[[Back to the Table
  of Contents] ↑](#structure)\n\nYou can download binary directly [from GitHub releases](https://github.com/kowainik/summoner/releases).\n\nAfter
  downloading binary, make it executable and copy it under convenient location, for
  example:\n\n```shell\nchmod +x summon-cli-linux\nmv summon-cli-linux ~/.local/bin/summon\n```\n\n#####
  CLI: Homebrew\n\n[[Back to the Table of Contents] ↑](#structure)\n\nIf you are on
  MacOS, you can get Summoner using Homebrew Kowainik's Tap.\n\nYou need to run the
  following command for that:\n\n```shell\n$ brew install kowainik/tap/summoner-cli\n```\n\n#####
  CLI: Ubuntu\n\n[[Back to the Table of Contents] ↑](#structure)\n\nIf you are on
  Ubuntu, you can get Summoner from Kowainik's PPA.\n\nYou need to run the following
  commands for that:\n\n```shell\n$ sudo add-apt-repository ppa:kowainik/summoner-cli\n$
  sudo apt update\n$ sudo apt install summoner-cli\n```\n\n##### CLI: from Hackage/Stackage\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nUsing `cabal`:\n\n```shell\ncabal v2-update\ncabal
  v2-install summoner\n```\n\nUsing `stack`:\n\n```shell\nstack install summoner\n```\n\n#####
  CLI: from source\n\n[[Back to the Table of Contents] ↑](#structure)\n\nFetch the
  repo using `cabal`:\n\n```shell\ncabal get -s summoner\n```\n\nor clone the directory
  from GitHub:\n\n```shell\ngit clone https://github.com/kowainik/summoner.git\n```\n\nStep
  into the directory:\n\n```haskell\ncd summoner\n```\n\nBuild and install using `cabal`:\n\n```shell\ncabal
  v2-install summoner-cli:exe:summon\n```\n\nBuild and install using `stack`:\n\n```shell\nstack
  install summoner:exe:summon\n```\n\n### Setup\n\n[[Back to the Table of Contents]
  ↑](#structure)\n\nYou can turn on bash auto-completion by running the following
  command:\n\n```shell\nsource <(summon --bash-completion-script `which summon`)\n```\n\n##
  Usage\n\n[[Back to the Table of Contents] ↑](#structure)\n\nTo start `summon`ing
  projects nothing additional is required. However, to tweak your settings further,
  you can use additional configuration settings.\nThere are several options you can
  use to set particular configurations for new projects (in increasing order of priority):\n\n1.
  Default configuration file (`~/.summoner.toml`).\n2. Fields `user.login`, `user.name`
  and `user.email` from `~/.gitconfig`.\n3. Explicitly specified configuration file
  by `--file FILENAME` option (used instead of the default one if specified).\n4.
  Options that are stated by CLI arguments.\n5. User input. It could be\n    * **TUI**
  – User data specified in the window of `summon-tui`.\n    * **CLI** – Interactively
  inputted answers during execution of the `summon` command (for the options that
  were not specified on previous steps).\n\nTo cut a long story short, the configuration
  uses [Partial Options Monoid Pattern](https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67).\n\n###
  File configuration\n\n[[Back to the Table of Contents] ↑](#structure)\n\nHere is
  the list of the options that can be configured to suit your needs. If options are
  not specified, they are asked interactively (or some sensible defaults are used).\n\n|
  Field            | Type    | Description                                                                                                                                                          |\n|------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|
  `cabal`          | Bool    | Add Cabal support?                                                                                                                                                   |\n|
  `stack`          | Bool    | Add Stack support?                                                                                                                                                   |\n|
  `owner`          | Text    | GitHub login.                                                                                                                                                        |\n|
  `fullName`       | Text    | Full name.                                                                                                                                                           |\n|
  `email`          | Text    | E-mail address.                                                                                                                                                      |\n|
  `license`        | License | One of: `MIT`, `BSD2`, `BSD3`, `GPL-2`, `GPL-3`, `LGPL-2.1`,
  `LGPL-3`, `AGPL-3`, `Apache-2.0`, `MPL-2.0`, `None`.                                                    |\n|
  `ghcVersions`    | [GHC]   | `summoner` uses default `GHC-8.8.3`. However, additionally
  you can specify other versions. For each version `x.y.z` the `stack-x.y.z.yaml`
  will be created.          |\n| `github`         | Bool    | Turn on `GitHub` integration
  by default?                                                                                                                             |\n|
  `gitignore`      | [Text]  | List of files you want added to the default `.gitignore`.
  (Ignored if `github = false`)                                                                              |\n|
  `noUpload`       | Bool    | Do not upload to GitHub, but create all GitHub related
  files if specified (Ignored if `github = false`)                                                              |\n|
  `private`        | Bool    | Create private repository by default? (Ignored if `github
  = false`)                                                                                                  |\n|
  `githubActions`  | Bool    | Turn on `GitHub Actions` integration by default?  (Currently
  working with `Cabal` only. Ignored if `github = false`)                                                 |\n|
  `travis`         | Bool    | Turn on `Travis` integration by default?  (Ignored
  if `github = false`)                                                                                              |\n|
  `appveyor`       | Bool    | Turn on `AppVeyor` integration by default?  (Ignored
  if `github = false`)                                                                                            |\n|
  `lib`            | Bool    | Create `src` folder with simple `ProjectName.hs` file
  and library target?                                                                                            |\n|
  `exe`            | Bool    | Create `app` folder with simple `Main.hs` file and
  executable target?                                                                                                |\n|
  `test`           | Bool    | Create `test` folder with simple `Spec.hs` file and
  test target?                                                                                                     |\n|
  `bench`          | Bool    | Create `benchmark` folder with `Main.hs` file with
  [`gauge`](https://hackage.haskell.org/package/gauge) library usage example?                                       |\n|
  `extensions`     | [Text]  | List of the default extensions to add into `default-extensions`
  section in the `.cabal`.                                                                             |\n|
  `ghc-options`    | [Text]  | List of the default GHC options to add into `ghc-options`
  section in the `.cabal`.                                                                                   |\n|
  `files`          | Map FilePath Source  | Custom mapping of files to their sources.
  Represented as a list of inline tables in TOML in a format like `files = [ { path
  = \"foo\", url = \"https://...\" }, ... ]`. Supported file types: `url`, `local`,
  `raw`. |\n|`[prelude]`       |         |                                                                                                                                                                      |\n|
  `package`        | Text    | The package name of the custom prelude you'd like to
  use in the project (doesn't work without `module` field).                                                       |\n|
  `module`         | Text    | The module name of the custom prelude you'd like to
  use in the project (doesn't work without `package` field).                                                       |\n\nYou
  can create default configuration using the `summon config`\ncommand. See [the default
  content here](summoner-cli/test/golden/summoner-default.toml).\n\nFor a real-life
  example of the configuration, see [the configuration for projects of the `Kowainik`
  organization](https://github.com/kowainik/org/blob/master/.summoner.toml).\n\n###
  Command line arguments\n\n[[Back to the Table of Contents] ↑](#structure)\n\nAvailable
  commands:\n\n```\nUsage:\n  summon COMMAND\n      Set up your own Haskell project\n\nAvailable
  commands:\n  new                      Create a new Haskell project\n  script                   Create
  a new Haskell script\n  show                     Show available licenses or ghc
  versions\n  config                   Create default TOML configuration for summoner\n\nAvailable
  global options:\n  -h, --help               Show this help text\n  -v, --version
  \           Show summoner's version\n```\n\n#### **summon new** command:\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\n```\nUsage:\n  summon new PROJECT_NAME
  [--ignore-config] [--no-upload] [--offline]\n             [-f|--file FILENAME]\n
  \            [--cabal]\n             [--stack]\n             [--prelude-package
  PACKAGE_NAME]\n             [--prelude-module MODULE_NAME]\n             [with    [OPTIONS]]\n
  \            [without [OPTIONS]]\n\nAvailable options:\n  -h, --help               Show
  this help text\n  --ignore-config          Ignore configuration file\n  --no-upload
  \             Do not upload to GitHub. Special case of the '--offline' flag.\n  --offline
  \               Offline mode: create project with 'All Rights Reserved' license\n
  \                          and without uploading to GitHub.\n  --cabal                  Cabal
  support for the project\n  --stack                  Stack support for the project\n
  \ -f, --file FILENAME      Path to the toml file with configurations. If not\n                           specified
  '~/.summoner.toml' will be used by default\n  --prelude-package PACKAGE_NAME\n                           Name
  for the package of the custom prelude to use in\n                           the
  project\n  --prelude-module MODULE_NAME\n                           Name for the
  module of the custom prelude to use in\n                           the project\n\nAvailable
  commands:\n  with                     Specify options to enable\n  without                  Specify
  options to disable\n\nAvailable command options:\n  -h, --help               Show
  this help text\n  -g, --github             Github integration\n  -p, --private            Create
  private GitHub repository\n  -a, --actions            GitHub Actions CI integration\n
  \ -c, --travis             Travis CI integration\n  -w, --app-veyor          AppVeyor
  CI integration\n  -l, --library            Library target\n  -e, --exec               Executable
  target\n  -t, --test               Tests\n  -b, --benchmark          Benchmarks\n```\n\n####
  **summon script** command:\n\n[[Back to the Table of Contents] ↑](#structure)\n\n```\nUsage:\n
  \ summon script BUILD_TOOL [-g|--ghc GHC_VERSION] [-n|--name FILE_NAME]\n      Create
  a new Haskell script\n\nAvailable options:\n  -h,--help                Show this
  help text\n  -g,--ghc GHC_VERSION     Version of the compiler to be used for script\n
  \ -n,--name FILE_NAME      Name of the script file\n```\n\n#### **summon show**
  command:\n\n[[Back to the Table of Contents] ↑](#structure)\n\n```\nUsage:\n  summon
  show COMMAND\n      Show supported licenses or ghc versions\n\nAvailable commands:\n
  \ ghc                      Show available ghc versions\n  license                  Show
  available licenses\n  license [LICENSE_NAME]   Show specific license text\n\nAvailable
  options:\n  -h, --help               Show this help text\n```\n\nFor example, the
  following command preconfigures the project settings with the\ncustom prelude `relude`,
  included library, executable, test stanzas (but without\nbenchmarks), creates a
  private repository on GitHub with the GitHub Actions CI,\nTravis CI and AppVeyor
  CI integrated.\n\n```shell\nsummon new my-project with -letgcpwa without -b --prelude-package
  relude --prelude-module Relude\n```\n\n#### **summon config** command:\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\n```\nUsage: summon config [-f|--file=FILENAME]\n
  \ Create a default TOML configuration file for summoner\n\nAvailable options:\n
  \ -h,--help                Show this help text\n  -f,--file=FILENAME       Path
  to the toml file with configurations. If not\n                           specified
  '~/.summoner.toml' will be used by default\n```\n\nThis command will generate a
  TOML configuration file with the default settings\nthat can be used to scaffold
  future Haskell packages. It contains all\noptions supported by Summoner with comments
  and examples. Though, all\noptions would be turned off by default and to use them
  one will need\nto uncomment the correspoding lines.\nSee [the default content here](summoner-cli/test/golden/summoner-default.toml).\n\nPossible
  command usages:\n\n```shell\nsummon config\nsummon config --file ~/.summoner-demo.toml\n```\n\n###
  TUI\n\n[[Back to the Table of Contents] ↑](#structure)\n\n#### TUI new command\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\n![summon new TUI](https://user-images.githubusercontent.com/8126674/49283553-fc684e00-f4cc-11e8-8411-f173f5f19a71.png)\n\n>
  **Section 1** – The main section where user inputs data or changes the configurations.\n\n>
  **Section 2** – The structure of the project that is going to be created with the
  current configurations. This tree changes on-the-fly.\n\n> **Section 3** – Hints,
  project status, or current errors in the configurations.\n\n> **Section 4** – Useful
  hotkeys.\n\nThe TUI window opens with the pre-filled information received from a
  config file and command-line arguments. However, it's possible to change any field
  as per your needs.\n\nIn the screenshot you can see that you'll be given a few text
  fields to fill in or some checkboxes that represent boolean values of the configurations.
  To help you fill in the correct input, there are some ⓘ info messages in the `Status`
  section, which give additional details about the current field.\n\nTo help you navigate
  between the form fields here are the available hotkeys:\n\n| Key                               |
  Action                                                                               |\n|-----------------------------------|--------------------------------------------------------------------------------------|\n|
  <kbd>Esc</kbd>                    | Abort `summoner`                                                                     |\n|
  <kbd>Enter</kbd>                  | If input is valid go to the Confirm window                                           |\n|
  <kbd>Tab</kbd>                    | Change the focus to the next active field                                            |\n|
  <kbd>Shift</kbd> + <kbd>Tab</kbd> | Change the focus to the previous active field
  \                                       |\n| <kbd>Space</kbd>                  |
  Enable/disable current checkbox or radio button                                      |\n|
  <kbd>Ctrl</kbd> + <kbd>d</kbd>    | Delete the input of the current text field                                           |\n|
  <kbd>Ctrl</kbd> + <kbd>u</kbd>    | Delete the input of the current text field from
  the cursor position to the beginning |\n| <kbd>Ctrl</kbd> + <kbd>k</kbd>    | Delete
  the input of the current text field from the cursor position to the end       |\n|
  <kbd>Ctrl</kbd> + <kbd>a</kbd>    | Move the cursor to the beginning of the current
  input field                          |\n| <kbd>Ctrl</kbd> + <kbd>e</kbd>    | Move
  the cursor to the end of the current input field                                |\n|
  <kbd>Up</kbd>/<kbd>Down</kbd>     | Scroll license list when focused                                                     |\n\nNote
  that the form should be valid in order to be able to go to the Confirm window. If
  there are some errors in the input, you could see details about these errors in
  the `Status` section of the form.\n\n#### TUI script command\n\n[[Back to the Table
  of Contents] ↑](#structure)\n\nSee [CLI description](#cli-script-command-) of the
  `summon script` command.\n\n#### TUI show command\n\n[[Back to the Table of Contents]
  ↑](#structure)\n\nThese commands display the list of supported GHC versions or Licenses.
  Also, when the license name is specified the window with the scrollable content
  of the License text is shown.\n\n### CLI\n\n[[Back to the Table of Contents] ↑](#structure)\n\n####
  CLI new command\n\n[[Back to the Table of Contents] ↑](#structure)\n\nIn CLI mode
  of operation Summoner asks about every project setting. Most of the questions contain
  a default value, so you can press <kbd>Enter</kbd> to choose the default value.\nIf
  some option is specified via a configuration file or CLI arguments, then the question
  is skipped and the predefined value is used.\n\n#### CLI script command\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nThis command creates minimal `cabal`
  or `stack` script file which allows you to save some keystrokes and eliminates the
  need to remember magic words for scripts.\n\n**Cabal example:** `summon script cabal
  -n Main.hs` generates executable file `Main.hs` with the following content:\n\n```haskell\n#!/usr/bin/env
  cabal\n{- cabal:\nbuild-depends:\n  , base ^>= 4.13.0.0\n-}\n\nmain :: IO ()\nmain
  = putStrLn \"Hello, World!\"\n```\n\n**Stack example:** `summon script stack -n
  Main.hs` generates executable file `Main.hs` with the following content:\n\n```haskell\n#!/usr/bin/env
  stack\n{- stack\n  --resolver lts-15.5\n  script\n  --package base\n-}\n\nmain ::
  IO ()\nmain = putStrLn \"Hello, World!\"\n```\n\n#### CLI show command\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nThese commands display the list of supported
  GHC versions, or Licenses. Also, when the license name is specified, the content
  of the License is outputted to the terminal.\n\n## FAQ\n\n[[Back to the Table of
  Contents] ↑](#structure)\n\n> I want to use HTTPS remote for the created GitHub
  project, but it creates SSH one. How should I fix this?\n\nWe are using `hub` tool
  to create the projects at GitHub. It uses SSH so that you would get the remote links
  in the following format:\n\n```\ngit@github.com:user/repo.git\n```\n\nWe can not
  change or configure this behaviour, but there are several workarounds in case you
  _need_ to use HTTPS link for the remote.\n\n1. Change the remote of the repository
  after its creation:\n   ```\n   git remote set-url origin https://github.com/user/repo.git\n
  \  ```\n2. Change `hub` configurations globally. Simply run the following command:\n
  \  ```shell\n   git config --global hub.protocol https\n   ```\n3. Alternatively,
  change `hub` configurations for a single session:\n   ```\n   export HUB_PROTOCOL=\"https\"\n
  \  ```\n\n<hr>\n\n> Why some of the Stack checks on my TravisCI matrix are marked
  as \"This job is\n> allowed to fail\"?\n\nDue to the Stack problem of working with
  older versions of Cabal, the build can\nfail with Stack for some older GHCs. We
  are adding these checks into\n`allow_failures` section, as this is a known issue,
  and there is no need for the\nwhole build to fail because of that.\n\nFor more information
  about the issue and some workarounds from Stack developers,\nsee the following ticket:\n\n
  \ * [commersialhaskell/stack issue](https://github.com/commercialhaskell/stack/issues/4488)\n\n##
  For Developers\n\n[[Back to the Table of Contents] ↑](#structure)\n\nIf you'd like
  to take part in the development processes, here are a few things to keep in mind:\n\n*
  Summoner is a multi-package project which has two packages inside: `summoner-cli`
  and `summoner-tui`. We are supporting the same functionality in both of them, so,
  if it's possible, you should add/change the code in both of the packages.\n* Summoner
  uses the custom prelude [`relude`](https://github.com/kowainik/relude).\n* We are
  using the [Kowainik style guide](https://github.com/kowainik/org/blob/master/style-guide.md#haskell-style-guide).\n*
  To sum up, [here is the Contributing guide](https://github.com/kowainik/.github/blob/master/CONTRIBUTING.md#contributing-to-the-kowainik-repositories)
  we use across the repositories.\n* This project is contributor-friendly, so be kind
  to other people working on the project.\n\n### Dependencies\n\n[[Back to the Table
  of Contents] ↑](#structure)\n\nOn Linux, to build the `summoner-tui` you'll need
  to have `libtinfo` installed. The easiest way to get this is from your system's
  package manager and is usually available as the package `libtinfo-dev`.\n\n### Build\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nTo build the project you can use the
  following commands:\n\n```shell=\ncabal v2-build all\n```\n\nfor Cabal and\n\n```shell=\nstack
  build\n```\n\nfor Stack.\n\n### Test\n\n[[Back to the Table of Contents] ↑](#structure)\n\nSummoner
  uses the golden tests technique for assuring the correctness of the generated files.
  For this purpose, we have [the `golden` folder](https://github.com/kowainik/summoner/tree/master/summoner-cli/test/golden)
  with two sample projects to test against.\n\nTo actually run tests you need to run:\n\n```shell\ncabal
  v2-test all\n```\n\nor, if using Stack\n\n```shell\nstack test\n```\n\n### Run\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nBuilding Summoner with the recommended
  method creates two executables: `summon` and `summon-tui`. To run the compiled executable
  you can use the following commands:\n\n```shell\ncabal v2-exec summon -- SOME_COMMAND\ncabal
  v2-exec summon-tui -- SOME_COMMAND\n```\n\nor, if using Stack\n\n```shell\nstack
  exec summon -- SOME_COMMAND\nstack exec summon-tui -- SOME_COMMAND\n```\n\n## Acknowledgments\n\n[[Back
  to the Table of Contents] ↑](#structure)\n\nThis project was inspired by [Aelve/new-hs](https://github.com/aelve/new-hs#readme),\nwhich
  is the tool with the same goal but it's only for creating cabal projects.\n\nIcons
  made by [Nikita Golubev](https://www.flaticon.com/authors/nikita-golubev)\nfrom
  [Flaticon](https://www.flaticon.com/) is licensed by\n[CC 3.0 BY](http://creativecommons.org/licenses/by/3.0/).\n"
description-type: markdown
hash: 8ced26ff256e012447e2c6a49a20102511adbea605624f00a059e1e85c366719
homepage: https://github.com/kowainik/summoner
latest: 2.0.1.1
license-name: MPL-2.0
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Tool for scaffolding fully configured batteries-included production-level
  Haskell projects.
test-bench-deps:
  base: '>=4.11 && <4.15'
  directory: '>=0'
  filepath: '>=0'
  hedgehog: '>=0.5.3 && <1.1'
  hspec: '>=2.4.8'
  hspec-hedgehog: ^>=0.0.1.1
  neat-interpolation: '>=0'
  relude: ^>=0.7.0.0
  summoner: '>=0'
  text: '>=0'
  tomland: '>=0'
  tree-diff: '>=0.0.2 && <0.2'
  validation-selective: '>=0'
