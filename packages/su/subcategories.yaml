all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
author: Hiromi ISHII
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  data-default: '>=0'
  foldl: '>=0'
  hashable: '>=0'
  mono-traversable: '>=0'
  pointed: '>=0'
  primitive: '>=0'
  reflection: '>=0'
  semialign: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  these: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  vector-algorithms: '>=0'
  vector-builder: '>=0'
changelog: "# Changelog for subcategories\n\n## 0.2.1.1\n\n* Supports GHC 9.10\n  \n##
  0.2.1.0\n\n* Supports GHC 9.8\n* Drops support for GHC <9\n\n## 0.2.0.1\n\n* Supports
  GHC 9.6\n\n## 0.2.0.0\n\n* Supports GHC >= 9.2.\n* As base >= 4.16 removes Data.Semigroup.Option,
  this package\n  drops instance for Option accordingly for GHC >= 9.2.\n  It seems
  that PVP demands us to bump the major version.\n\n## 0.1.1.0\n\n* Support GHC >=
  9.0\n\n## 0.1.0.0\n\n* Initial Release\n"
changelog-type: markdown
description: |-
  # The `subcategories` package

  ![Haskell CI](https://github.com/konn/subcategories/workflows/Haskell%20CI/badge.svg)
  ![Hackage](https://img.shields.io/hackage/v/subcategories)
  ![Hackage-Deps](https://img.shields.io/hackage-deps/v/subcategories)

  This package provides variants of functor-like structures,
  with domain types are constrained.
  In particular, this package provides an abstraction for functorial
  containers, which can be expressed as a functor from a *full-subcategory*
  of **Hask** to **Hask** itself [^1].

  For example:

  - We can treat `Set` as if it is a `Fuctor`, `Foldable`, `Applicative`,
    with their domain restricted to full-subcategory **Ord** of `Ord` instances
    of **Hask**.
  - For `MonoFoldable` or `MonoTraversable` types (from `mono-traversable` package),
    we provide `WrapMono` wrapper with zero-cost coercion. Such `mono`s can be
    regarded as a functorial structure from the full subcategory consisting of just a single object,
    say `Element mono`.

  [^1]: Strictly speaking, `CFoldable`, a constrained counterpart of `Foldable`, doesn't require a functoriality as with the original `Foldable`.

  ## Optimisation
  This library is designed to keep the abstraction runtime overhead as minimum as possible.

  Some notes:

  - If a constrained term such as `cmap` or `czipWith` has concrete type, it must have exactly the same representation as the corresponding operation modulo (zero-cost) coercion.
    * The same still holds if the set of required constraints coincides.
    * Although the constructor of `WrapMono mono a` is hidden, its just a `newtype`-wrapper around `mono`;
      hence, constrained operators must have the same representations as the corresponding combinators
      in `mono-traversable` package.
  - OTOH, for a polymorphic term, like `cmap :: (Ord a, Ord b) => (a -> b) Set a -> Set b`
    and `Set.map`, they can have different representations; indeed, `Set.map` doesn't require `a` to be `Ord`-instance and therefore the implementation of `cmap` discards the dictionary for `Ord a` to call `Set.map`.
description-type: markdown
hash: ca3f072617f75cf65f11af4ded68ef6317e85c6df5955e221cb2615b180dfc58
homepage: https://github.com/konn/subcategories#readme
latest: 0.2.1.2
license-name: BSD-3-Clause
maintainer: konn.jinro _at_ gmail.com
synopsis: Subcategories induced by class constraints
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  data-default: '>=0'
  foldl: '>=0'
  hashable: '>=0'
  inspection-testing: '>=0'
  mono-traversable: '>=0'
  pointed: '>=0'
  primitive: '>=0'
  reflection: '>=0'
  semialign: '>=0'
  subcategories: '>=0'
  tasty: '>=0'
  tasty-expected-failure: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  these: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  vector-algorithms: '>=0'
  vector-builder: '>=0'
