all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
- 0.3.1
author: Hong Minhee
basic-deps:
  base: '>=4.7 && <5'
  cmark: '>=0.5.6 && <0.6.0'
  optparse-applicative: '>=0.13.2.0 && <0.17.0.0'
  regex-tdfa: '>=1.3.1.2 && <1.4'
  submark: '>=0'
  text: '>=1 && <2'
changelog: |
  `submark` changelog
  ===================

  Version 0.3.1
  -------------

  Released on Match 15, 2022.

   -  Added `dahlia/submark` action for GitHub Actions.  [[#6]]
   -  Added `dahlia/submark/setup` action for GitHub Actions.  [[#6]]

  [#6]: https://github.com/dahlia/submark/issues/6


  Version 0.3.0
  -------------

  Released on March 11, 2022.

   -  Added options from `--h1-regex` to `--h6-regex`.  [[#2]]
   -  Added `Text.CommonMark.Sub.HeadingPattern` type.  [[#2]]
   -  Added `Text.CommonMark.Sub.HeadingTitlePattern` type.  [[#2]]
   -  The signature of `Text.CommonMark.Sub.extractSection` function was changed
      from `Level -> (Text -> Text -> Bool) -> Text -> Node -> Node` to
      `HeadingPattern -> Node -> Node`.  [[#2]]
   -  The signature of `Text.CommonMark.Sub.matchesHeading` function was changed
      from `Level -> (Text -> Text -> Bool) -> Text -> Node -> Bool` to
      `HeadingPattern -> Node -> Bool`.  [[#2]]

  [#2]: https://github.com/dahlia/submark/issues/2


  Version 0.2.0
  -------------

  Released on November 6, 2017.

   -  Added `-i`/`--ignore-case` option for case insensitive match.

   -  Wordwrap became turned off by default unless `-c`/`--columns` option is
      present.

   -  The signature of `Text.CommonMark.Sub.extractSection` function was changed
      from `Level -> Text -> Node -> Node` to
      `Level -> (Text -> Text -> Bool) -> Text -> Node -> Node`; the second
      parameter, a predicate for text equality, was added.

   -  The signature of `Text.CommonMark.Sub.matchesHeading` function was changed
      from `Level -> Text -> Node -> Bool` to
      `Level -> (Text -> Text -> Bool) -> Text -> Node -> Bool`; the second
      parameter, a predicate for text equality, was added.


  Version 0.1.0
  --------------

  Initial release.  Released on September 24, 2017.
changelog-type: markdown
description: |
  `submark`: Extract a part from CommonMark/Markdown docs
  =======================================================

  [![GitHub Actions][gh-actions-badge]][gh-actions]
  [![Hackage][hackage-badge]][hackage]
  [![GitHub releases][gh-downloads-badge]][GitHub releases]
  [![Container images][gh-containers-badge]][gh-containers]

  `submark` is a CLI program (and GitHub action) to extract some particular
  section from a given CommonMark/Markdown document.  I use it for myself to
  extract the latest version section from the *CHANGELOG.md* file, and then reuse
  the text for the corresponding release note on GitHub releases, during automated
  release process which is run on CI/CD.

  [gh-actions-badge]: https://github.com/dahlia/submark/actions/workflows/build.yaml/badge.svg
  [gh-actions]: https://github.com/dahlia/submark/actions/workflows/build.yaml
  [hackage-badge]: https://img.shields.io/hackage/v/submark.svg
  [hackage]: https://hackage.haskell.org/package/submark
  [gh-downloads-badge]: https://img.shields.io/github/downloads/dahlia/submark/total
  [gh-containers-badge]: https://img.shields.io/github/v/tag/dahlia/submark?color=blue&label=container&logo=docker&sort=semver
  [gh-containers]: https://github.com/dahlia/submark/pkgs/container/submark


  GitHub action: `dahlia/submark`
  -------------------------------

  Although it's a standalone CLI program, you can use it through a handy GitHub
  action `dahlia/submark`:

  ~~~ yaml
  - id: extract-changelog
    uses: dahlia/submark@0.3.1
    with:
      input-file: CHANGELOG.md
      heading-level: 2
      heading-title-text: version ${{ github.ref_name }}
      ignore-case: true
      omit-heading: true

  # The output-file refers to the path of the temporary file which contains
  # the only extracted part:
  - run: cat ${{ steps.extract-changelog.output.output-file }}

  # The output-text contains the text of the extracted part.
  - run: echo $CHANGELOG
    env:
      CHANGELOG: ${{ steps.extract-changelog.output.output-text }}
  ~~~

  ### Input parameters

   -  `input-text`:  The input CommonMark/Markdown text.  Mutually exlclusive with
      the `input-file` parameter.
   -  `input-file`:  The input CommonMark/Markdown file path.  Mutually exlclusive
      with the `input-text` parameter.
   -  `heading-level`:  The heading level of the section to extract.
   -  `heading-title-text`:  Extract the section with the exact this
      `heading-title-text` (and the `heading-level`).  Note that it tries to match
      to the heading title with no markup, which means `heading-title-text:
      "foo bar"` matches to both `# foo bar` and `# _foo_ **bar**`.  Mutually
      exclusive with the `heading-title-regex` parameter.
   -  `heading-title-regex`:  Similar to the `heading-title-text` parameter except
      that it takes a regular expression.  Note that it tries to match to
      the heading title with no markup, which means `heading-title-regex:
      "fo+ ba[rz]"` matches to both `# foo bar` and `# _foooo_ **baz**`.
      Mutually exclusive with the `heading-title-text` parameter.
   -  `ignore-case`:  Ignore case distinctions.  (Default: `false`.)
   -  `omit-heading`:  Omit a leading heading.  (Default: `false`.)
   -  `columns`:  Limit the maximum characters per line of the output.
      No limit by default.

  ### Output parameters

   -  `output-text`:  The text of the extracted part.
   -  `output-file`:  The path to the temporary file which contains the only
      extracted part.


  Download & installation
  -----------------------

  First of all, if you need to manually invoke `submark` on GitHub Actions,
  [`dahlia/submark/setup`](./setup/) action is the easiest way to install it.

  On the other CI/CD products, use the officially distributed executables.
  Prebuilt binaries for the following platforms and architectures are available on
  [GitHub releases]:

   -  Linux (x86_64)
   -  macOS (x86_64)
   -  Windows (win64)

  For other platforms and architectures, you need to build it by yourself.
  It's written in Haskell, so you need to install [Haskell Stack] first.
  It can be built in the same way other Haskell programs are:

  ~~~~~~~~ bash
  $ stack setup && stack install
  ~~~~~~~~

  [GitHub releases]: https://github.com/dahlia/submark/releases
  [Haskell Stack]: https://haskellstack.org/


  Usage examples
  --------------

  The following examples use [John Gruber's original Markdown introduction][1]:

  ~~~~~~~~ bash
  $ wget https://daringfireball.net/projects/markdown/index.text
  ~~~~~~~~

  Extracting an H3 heading *Command-Line*:

  ~~~~~~~~ bash
  $ submark --h3 "Command-Line" index.text
  ### Command-Line

  Use the `--html4tags` command-line switch to produce HTML output from a
  Unix-style command line. E.g.:

      % perl Markdown.pl --html4tags foo.text

  Type `perldoc Markdown.pl`, or read the POD documentation within the
  Markdown.pl source code for more information.
  ~~~~~~~~

  Note that its textual style differ from the original text.
  Since ``submark`` internally builds an abstract syntax tree from the given input
  text and then render again the result tree, it doesn't maintain trivial styles
  (e.g., whitespaces, ATX vs. Setext headings) but only the semantics.

  There are options from `--h1` to `--h6`:

  ~~~~~~~~ bash
  $ submark --h2 "Download" index.text
  ## Download

  [Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)
  (18 KB) -- 17 Dec 2004
  ~~~~~~~~

  Options from `--h1-regex` to `--h6-regex` take a regular expression instead of
  an exact heading text:

  ~~~~~~~~ bash
  $ submark --h2-regex "^(Down|Up)load$" index.text
  ## Download

  [Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)
  (18 KB) -- 17 Dec 2004
  ~~~~~~~~

  The leading heading can be omitted:

  ~~~~~~~~ bash
  $ submark --h2 "Download" --omit-heading index.text
  [Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)
  (18 KB) -- 17 Dec 2004
  ~~~~~~~~

  Matching is case sensitive by default, but case can be ignored using the option
  `-i`/`--ignore-case`:

  ~~~~~~~~ bash
  $ submark --h2 "DOWNload" index.text

  $ submark --h2 "DOWNload" --ignore-case index.text
  ## Download

  [Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)
  (18 KB) -- 17 Dec 2004
  ~~~~~~~~

  By Unix convention, `-` means pipe:

  ~~~~~~~~ bash
  $ submark --h2 "Download" - < index.text
  ## Download

  [Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)
  (18 KB) -- 17 Dec 2004
  ~~~~~~~~

  There's `-o`/`--out-file` option as well:

  ~~~~~~~~ bash
  $ submark -o download.md --h2 "Download" index.text
  ~~~~~~~~

  [1]: https://daringfireball.net/projects/markdown/index.text


  Software license
  ----------------

  This software is distributed under [GPL 3].

  [GPL 3]: https://www.gnu.org/licenses/gpl-3.0.html
description-type: markdown
hash: 4c774941217fce915d9c5b5f5dcf4194d9c721c3540cb5cba060eb6360a6191d
homepage: https://github.com/dahlia/submark#readme
latest: 0.3.1
license-name: GPL-3.0-only
maintainer: hong.minhee@gmail.com
synopsis: Extract a part from CommonMark/Markdown docs
test-bench-deps:
  base: '>=4.7 && <5'
  cmark: '>=0.5.6 && <0.6.0'
  hlint: '>=2.0.9 && <4'
  hspec: '>=2.4.4 && <3.0.0'
  submark: '>=0'
  template-haskell: '>=2.5'
  text: '>=1 && <2'
