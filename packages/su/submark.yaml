homepage: https://github.com/dahlia/submark#readme
changelog-type: markdown
hash: c9d19b7f1937ba84216e8c1efee0e8089fd3e28862efdea40187469990f3c158
test-bench-deps:
  hlint: '>=2.0.9 && <3'
  base: '>=4.7 && <5'
  hspec: '>=2.4.4 && <3.0.0'
  text: ==1.*
  cmark: '>=0.5.6 && <0.6.0'
  submark: -any
  template-haskell: '>=2.5'
maintainer: hong.minhee@gmail.com
synopsis: Extract a part from CommonMark/Markdown docs
changelog: |
  `subtoml` changelog
  ===================

  Version 0.2.0
  -------------

  Released on November 6, 2017.

   -  Added `-i`/`--ignore-case` option for case insensitive match.

   -  Wordwrap became turned off by default unless `-c`/`--columns` option is
      present.

   -  The signature of `Text.CommonMark.Sub.extractSection` function was changed
      from `Level -> Text -> Node -> Node` to
      `Level -> (Text -> Text -> Bool) -> Text -> Node -> Node`; the second
      parameter, a predicate for text equality, was added.

   -  The signature of `Text.CommonMark.Sub.matchesHeading` function was changed
      from `Level -> Text -> Node -> Bool` to
      `Level -> (Text -> Text -> Bool) -> Text -> Node -> Bool`; the second
      parameter, a predicate for text equality, was added.


  Version 0.1.0
  --------------

  Initial release.  Released on September 24, 2017.
basic-deps:
  base: '>=4.7 && <5'
  text: ==1.*
  cmark: '>=0.5.6 && <0.6.0'
  submark: -any
  optparse-applicative: '>=0.13.2.0 && <0.15.0.0'
all-versions:
- 0.1.0
- 0.2.0
author: Hong Minhee
latest: 0.2.0
description-type: markdown
description: "`submark`: Extract a part from CommonMark/Markdown docs\n=======================================================\n\n[![CircleCI][circleci-badge]][circleci]\n[![Hackage][hackage-badge]][hackage]\n\n`submark`
  is a CLI program to extract some particular section from\na given CommonMark/Markdown
  document.  I use it for myself to extract\nthe latest version section from the CHANGELOG.md
  file, and then reuse the text\nfor the corresponding release note on GitHub releases,
  during automated release\nprocess which is run on CI.\n\n[circleci-badge]: https://circleci.com/gh/dahlia/submark.svg?style=shield\n[circleci]:
  https://circleci.com/gh/dahlia/submark\n[hackage-badge]: https://img.shields.io/hackage/v/submark.svg\n[hackage]:
  https://hackage.haskell.org/package/submark\n\n\nDownload & installation\n-----------------------\n\nFor
  Linux x86_64, executable binaries are available on [GitHub releases][].\nEach file
  is a single executable, and statically linked so that it's executable\nas a standalone
  without dependencies.\n\nFor other platforms, you need to build it by yourself.
  \ It's written in Haskell,\nso you need to install [Haskell Stack][] first.  It
  can be built in the same\nway other Haskell programs are:\n\n~~~~~~~~ bash\n$ stack
  setup && stack install\n~~~~~~~~\n\nI'm going to officially support executable binaries
  for other platforms\nif anyone asks.  (I thought `submark` wouldn't be useful on
  other than Linux\nsince the most of CI machines are Linux, but it might be wrong.)\n\n[GitHub
  releases]: https://github.com/dahlia/submark/releases\n[Haskell Stack]: https://haskellstack.org/\n\n\nUsage
  examples\n--------------\n\nThe following examples use [John Gruber's original Markdown
  introduction][1]:\n\n~~~~~~~~ bash\n$ wget https://daringfireball.net/projects/markdown/index.text\n~~~~~~~~\n\nExtracting
  an H3 heading *Command-Line*:\n\n~~~~~~~~ bash\n$ submark --h3 \"Command-Line\"
  index.text\n### Command-Line\n\nUse the `--html4tags` command-line switch to produce
  HTML output from a\nUnix-style command line. E.g.:\n\n    % perl Markdown.pl --html4tags
  foo.text\n\nType `perldoc Markdown.pl`, or read the POD documentation within the\nMarkdown.pl
  source code for more information.\n~~~~~~~~\n\nNote that its textual style differ
  from the original text.\nSince ``submark`` internally builds an abstract syntax
  tree from the given input\ntext and then render again the result tree, it doesn't
  maintain trivial styles\n(e.g., whitespaces, ATX vs. Setext headings) but only the
  semantics.\n\nThere are options from `--h1` to `--h6`:\n\n~~~~~~~~ bash\n$ submark
  --h2 \"Download\" index.text\n## Download\n\n[Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)\n(18
  KB) -- 17 Dec 2004\n~~~~~~~~\n\nThe leading heading can be omitted:\n\n~~~~~~~~
  bash\n$ submark --h2 \"Download\" --omit-heading index.text\n[Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)\n(18
  KB) -- 17 Dec 2004\n~~~~~~~~\n\nMatching is case sensitive by default, but case
  can be ignored using the option\n`-i`/`--ignore-case`:\n\n~~~~~~~~ bash\n$ submark
  --h2 \"DOWNload\" index.text\n\n$ submark --h2 \"DOWNload\" --ignore-case index.text\n##
  Download\n\n[Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)\n(18
  KB) -- 17 Dec 2004\n~~~~~~~~\n\nBy Unix convention, `-` means pipe: \n\n~~~~~~~~
  bash\n$ submark --h2 \"Download\" - < index.text\n## Download\n\n[Markdown 1.0.1](http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip)\n(18
  KB) -- 17 Dec 2004\n~~~~~~~~\n\nThere's `-o`/`--out-file` option as well:\n\n~~~~~~~~
  bash\n$ submark -o download.md --h2 \"Download\" index.text\n~~~~~~~~\n\n[1]: https://daringfireball.net/projects/markdown/index.text\n"
license-name: GPL-3.0-only
