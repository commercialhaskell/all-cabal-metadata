all-versions:
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 1.0.0
- 1.0.1
- 1.0.2
author: Mark Karpov
basic-deps:
  HCodecs: '>=0.5 && <0.6'
  QuickCheck: '>=2.8.2 && <3.0'
  aeson: '>=0.7 && <0.12'
  base: '>=4.8 && <5.0'
  containers: '>=0.5.5.1 && <0.6'
  data-default: '>=0.5.3 && <0.8'
  exceptions: '>=0.8 && <0.9'
  file-embed: '>=0.0.9'
  filepath: '>=1.3.0.2 && <1.5'
  formatting: '>=6.2 && <7.0'
  haskeline: '>=0.7.1.3 && <0.8'
  megaparsec: '>=5.0 && <6.0'
  mida: '>=1.0.2'
  mtl: '>=2.1.3.1 && <3.0'
  optparse-applicative: '>=0.11.0.2 && <0.13'
  path: '>=0.5.3 && <0.6'
  path-io: '>=0.3.1 && <2.0'
  process: '>=1.2 && <1.5'
  random: '>=0'
  text: '>=1.2.0.4 && <1.3'
  tf-random: '>=0.5 && <1.0'
  transformers: '>=0.2.0.0 && <0.6'
  yaml: '>=0.8.15 && <0.9'
changelog: |
  ## MIDA 1.0.2

  * Refactoring, switch to Hspec for testing and Megaparsec 5.

  ## MIDA 1.0.1

  * Fixed issues with `directory` package. Please use `directory-1.2.3.0` or
    newer. `stack.yaml` file is updated accordingly, if you clone the
    repository.

  ## MIDA 1.0.0

  * Use the `path-io` library.

  * Use YAML files for configuration.

  * Cosmetic changes in the interface.

  ## MIDA 0.4.6

  * Support for Stack and other maintenance stuff;

  * Refactoring, more type-safe code and better libraries used.

  ## MIDA 0.4.5

  * Various cosmetic changes;

  * Make the executable Cabal-installable.

  ## MIDA 0.4.4

  * Cosmetic corrections in source code;

  * Switch to better libraries.

  ## MIDA 0.4.3

  * Various corrections and cosmetic changes;

  * Improved printing of syntax trees;

  * Allow more flexible looping expressions.

  ## MIDA 0.4.2

  * Introduced simplifications on the level of internal language;

  * Changed default values of some parameters;

  * Some characters have been replaced with pretty Unicode symbols;

  * Improved manual.

  ## MIDA 0.4.1

  * Dramatically improved efficiency, now very long compositions can be
    quickly rendered;

  * Lexer: changed style of comments, shell-like comments adopted;

  * Changed alias of notes: dièse is written now as `s` not as `#`, so middle
    octave is: `c5`, `cs5`, `d5`, `ds5`, `e5`, etc.;

  * Now there are alias for all supported (in MIDI) pitches from 0 to 127,
    that is: from `c0` to `g10` (alias `c10` -- `g10` added);

  * Changed alias of modulation signs, reason for such change is purely
    technical -- all alias now are predefined definitions, rather than
    syntactic sugar, so all alias must be valid identifiers;

  * Identifiers can contain underline sign (`_`);

  * Arbitrary number of files can be specified for loading (from command line,
    as well as from interactive REPL);

  * Many purely technical changes that are difficult to explain concisely, but
    they should be mentioned, most important being addition of test suite and
    ability to generate source files from syntax trees;

  * Added command line options: `--license` and `--version`.

  ## MIDA 0.4.0

  * Fixed bug in batch mode;

  * Added tab completion based on contents of current input line, including
    completion of file names for some commands;

  * Detection and rejection of recursive definitions;

  * Improved interface;

  * Wholly refactored (and sometimes rewritten) code (it's finally
    sufficiently elegant);

  * More intuitive logic of evaluation in some corner cases;

  * Optional displaying of simplified principles (for debug and educational
    purposes);

  * Ability to set tempo and program for preview;

  * Improved documentation.

  ## MIDA 0.3.0

  * Improved interface and parsing;

  * Added `:prv` and `:load` special commands;

  * Added additional parameters: modulation, breath, aftertouch, and pitch
    bend;

  * Fixed minor bugs.

  ## MIDA 0.2.0

  * Better command line experience: history, auto-completion and more;

  * Fixed bug with infinite translation of scores that consist of elements
    which have zero duration;

  * Introduced conception of sections;

  * All operations have become fully polymorphic.

  ## MIDA 0.1.0

  * Initial release.
changelog-type: markdown
description: |
  # MIDA

  [![License GPL 3](https://img.shields.io/badge/license-GPL_3-green.svg)](http://www.gnu.org/licenses/gpl-3.0.txt)
  [![Hackage](https://img.shields.io/hackage/v/mida.svg?style=flat)](https://hackage.haskell.org/package/mida)
  [![Build Status](https://travis-ci.org/mrkkrp/mida.svg?branch=master)](https://travis-ci.org/mrkkrp/mida)

  MIDA is a minimalistic declarative language for algorithmic generation of
  MIDI files. MIDA is not interactive in sense that you cannot control result
  of its activity in real time, it is intended for producers and should be
  used with a DAW. MIDA can help you create variative elements in your music
  in a very simple way. Since MIDI can control a lot of different instruments,
  power of MIDA is truly great.

  Main reason for MIDA development is to create software tool that can
  be used in such a way that does not change established workflow, so
  people could use familiar plugins and software instruments.

  Currently MIDA can be used to translate source files into `.mid` files, and
  also in interactive mode that will help you to understand how MIDA language
  works.

  MIDA is a
  [member of Linux Audio consortium](http://linuxaudio.org/members.html).

  ## Installation

  1. Install the [Haskell Tool Stack](http://haskellstack.org).

  2. Add `~/.local/bin` directory to your `PATH`, like this:

     ```
     # in .bashrc or similar
     export PATH=$HOME/.local/bin:$PATH
     ```

  3. Clone the repo, `cd` into it, and let `stack` do its thing:

     ```
     $ git clone https://github.com/mrkkrp/mida.git
     $ cd mida
     $ stack build --copy-bins
     ```

  4. Check it out:

     ```
     $ mida --version
     MIDA 1.0.0
     ```

  ## Example

  Here is a simple example of MIDA program that demonstrates syntax and
  declarative nature of the language.

  ```
  #
  # Example of MIDA program
  # Tempo ≈ 50
  #

  dur0   = 6
  dur1   = dur0
  dur2   = dur0
  dur3   = {96 $ 2, 24}
  pch0   = c5 {e5 d5 [a5 a5]} $ 2, g5
  pch1   = pch0
  pch2   = {c2 c3}
  pch3   = {c6 d6 e6 f6 g6 a6 b6 c7 e7}
  quiet  = {40..80}
  normal = quiet + 30
  vel0   = quiet
  vel1   = quiet
  vel2   = 0, normal $ 2, 0
  vel3   = normal
  ```

  See [MIDA Manual](https://mrkkrp.github.io/mida/) for more information.

  ## How to control other things?

  If you're into this sort of thing, you may like my another project, called
  [ALGA](https://github.com/mrkkrp/alga). It allows to control automation
  natively in various DAWs.

  ## License

  Copyright © 2014–2016 Mark Karpov

  Distributed under GNU GPL, version 3.
description-type: markdown
hash: 7bbd847698b60c43bed6391db7e3e730659dcf902f045ecdefd0662f0af8761d
homepage: https://github.com/mrkkrp/mida
latest: 1.0.2
license-name: GPL-3.0-only
maintainer: Mark Karpov
synopsis: Language for algorithmic generation of MIDI files
test-bench-deps:
  HCodecs: '>=0.5 && <0.6'
  QuickCheck: '>=2.8.2 && <3.0'
  base: '>=4.8 && <5.0'
  containers: '>=0.5.5.1 && <0.6'
  hspec: '>=2.0 && <3.0'
  megaparsec: '>=5.0 && <6.0'
  mida: '>=1.0.2'
  mtl: '>=2.1.3.1 && <3.0'
  random: '>=0'
  text: '>=1.2.0.4 && <1.3'
  tf-random: '>=0.5 && <1.0'
  transformers: '>=0.2.0.0 && <0.6'
