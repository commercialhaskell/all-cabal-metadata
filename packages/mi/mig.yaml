homepage: https://github.com/anton-k/mig#readme
changelog-type: ''
hash: ee0467b92eae131d9cbe4e2030789726190fa719304aa79f37c88aa38f2ba929
test-bench-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  hspec: -any
  text: -any
  http-api-data: -any
  mig: -any
  containers: -any
  openapi3: -any
  mtl: -any
  http-types: -any
  aeson: -any
maintainer: anton.kholomiov@gmail.com
synopsis: Build lightweight and composable servers
changelog: ''
basic-deps:
  insert-ordered-containers: -any
  exceptions: -any
  bytestring: -any
  lrucache: -any
  case-insensitive: -any
  extra: -any
  base: '>=4.7 && <5'
  text: -any
  http-api-data: -any
  filepath: -any
  containers: -any
  lens: -any
  openapi3: -any
  mtl: -any
  blaze-html: -any
  transformers: -any
  http-types: -any
  aeson: -any
  safe: -any
  http-media: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.2.0.0
- 0.2.0.1
author: Anton Kholomiov
latest: 0.2.0.1
description-type: markdown
description: |
  ## Core mig library

  Core mig library provides tools to build HTTP servers and APIs.
  With this library we can build lightweight and composable servers.
  It is sort of servant for Simple/Boring haskell.

  We build servers with type-safe DSL and we can convert a server
  to low-level server representation and to OpenApi schema.

  Servers can be rendered to low level representation of `ServerFun`:

  ```haskell
  type ServerFun m = Request -> m (Maybe Response)
  ```

  There is library `mig-wai` that can convert `ServerFun` to `Wai.Application`
  and we can run it with `warp` (see library `mig-server` for that).

  The HTTP Api can be converted to `OpenApi` value defined in `openapi3` library.
license-name: BSD-3-Clause
