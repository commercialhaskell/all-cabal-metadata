all-versions:
- '1'
- 1.0.1
- 1.0.1.1
- 1.0.1.2
- 1.0.2
- 1.0.2.1
- 1.0.2.2
- 1.0.2.3
author: Mark Karpov <markkarpov@openmailbox.org>, Oleg Grenrus <oleg.grenrus@iki.fi>
basic-deps:
  aeson: '>=0.11 && <1.6 || >=2.0.0.0 && <2.3'
  base: '>=4.5 && <4.20'
  containers: '>=0.4.2.1 && <0.7'
  deepseq: '>=1.3.0.0 && <1.6'
  directory: '>=1.1.0.2 && <1.4'
  filepath: '>=1.3.0.0 && <1.5'
  parsec: '>=3.1.11 && <3.2'
  text: '>=1.2.3.0 && <1.3 || >=2.0 && <2.2'
  transformers: '>=0.3.0.0 && <0.7'
  unordered-containers: '>=0.2.5 && <0.3'
  vector: '>=0.11 && <0.14'
changelog: |
  ## microstache 1.0.2.3

  - Support `parsec-3.1.16.*`

  ## microstache 1.0.2.1

  - Support `transformers-0.6`

  ## microstache 1.0.2

  - Support `aeson-2.0.0.0`

  ## microstache 1.0.1.2

  - Drop `bytestring` dependency (there weren't direct one)

  ## microstache 1.0.1.1

  - Fix build against `transformers-0.3`

  ## microstache 1.0.1

  - Add `renderMustacheW`

  ## microstache 1

  Initial release, corresponding to `stache-0.2.2`.
changelog-type: markdown
description: |
  # microstache

  Based on [`stache`](http://hackage.haskell.org/package/stache) library, which uses `megaparsec`.
  This library uses `parsec`, thus the name: `microstache`.

  This is a Haskell implementation of Mustache templates. The implementation
  conforms to the version 1.1.3 of official [Mustache specification]
  (https://github.com/mustache/spec). It is extremely simple and
  straightforward to use with minimal but complete API — three functions to
  compile templates (from directory, from file, and from lazy text) and one to
  render them.

  For rendering you only need to create Aeson's `Value` where you put the data
  to interpolate. Since the library re-uses Aeson's instances and most data
  types in Haskell ecosystem are instances of classes like
  `Data.Aeson.ToJSON`, the whole process is very simple for end user.

  One feature that is not currently supported is lambdas. The feature is
  marked as optional in the spec and can be emulated via processing of parsed
  template representation. The decision to drop lambdas is intentional, for
  the sake of simplicity and better integration with Aeson.

  ## Differences from `stache`

  - Instead of `megaparsec`, `parsec` is used. Error message quality is most likely degraded.
  - There are no TemplateHaskell used; yet there are no helpers provided.
  - Support for GHC-7.4.2 &ndash; GHC-8.2.1

  ## Quick start

  Here is an example of basic usage:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main (main) where

  import Data.Aeson
  import Data.Text
  import Text.Microstache
  import qualified Data.Text.Lazy.IO as TIO

  main :: IO ()
  main = do
    let res = compileMustacheText "foo"
          "Hi, {{name}}! You have:\n{{#things}}\n  * {{.}}\n{{/things}}\n"
    case res of
      Left err -> putStrLn (show err)
      Right template -> TIO.putStr $ renderMustache template $ object
        [ "name"   .= ("John" :: Text)
        , "things" .= ["pen" :: Text, "candle", "egg"]
        ]
  ```

  If I run the program, it prints the following:

  ```
  Hi, John! You have:
    * pen
    * candle
    * egg
  ```

  For more information about Mustache templates the following links may be
  helpful:

  * The official Mustache site: https://mustache.github.io/
  * The manual: https://mustache.github.io/mustache.5.html
  * The specification: https://github.com/mustache/spec
  * Stack Builders Stache tutorial: https://www.stackbuilders.com/tutorials/haskell/mustache-templates/

  ## License

  Copyright © 2016–2017 Stack Builders, 2017 Oleg Grenrus

  Distributed under BSD 3 clause license.
description-type: markdown
hash: 71d743c3c912228a49a7adf7625edc76f0963d8bbb408e3de561dc52bd22882e
homepage: https://github.com/haskellari/microstache
latest: 1.0.2.3
license-name: BSD-3-Clause
maintainer: Oleg Grenrus<oleg.grenrus@iki.fi>
synopsis: Mustache templates for Haskell
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  base-orphans: '>=0.8.7 && <0.10'
  bytestring: '>=0'
  containers: '>=0'
  microstache: '>=0'
  parsec: '>=0'
  tasty: '>=1.4.0.1 && <1.6'
  tasty-hunit: '>=0.10.0.3 && <0.11'
  text: '>=0'
