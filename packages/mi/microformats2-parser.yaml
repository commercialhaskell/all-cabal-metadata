all-versions:
- 0.1.0
- 0.1.1
- 1.0.0
- 1.0.1
- 1.0.1.1
- 1.0.1.2
- 1.0.1.3
- 1.0.1.4
- 1.0.1.5
- 1.0.1.6
- 1.0.1.7
- 1.0.1.8
- 1.0.1.9
- 1.0.2.0
- 1.0.2.1
- 1.0.2.2
author: Val Packett
basic-deps:
  aeson: '>=0'
  aeson-qq: '>=0'
  attoparsec: '>=0'
  base: '>=4.7.0.0 && <5'
  base-compat: '>=0.8.0'
  blaze-markup: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  containers: '>=0'
  data-default: '>=0'
  either: '>=0'
  errors: '>=0'
  html-conduit: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  network-uri: '>=0'
  pcre-heavy: '>=0'
  safe: '>=0'
  tagsoup: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  xml-lens: '>=0'
  xss-sanitize: '>=0'
changelog: ''
changelog-type: ''
description: "[![Hackage](https://img.shields.io/hackage/v/microformats2-parser.svg?style=flat)](https://hackage.haskell.org/package/microformats2-parser)\n[![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](https://unlicense.org)\n\n#
  microformats2-parser\n\n[Microformats 2] parser for Haskell! [#IndieWeb]\n\n- parses
  `items`, `rels`, `rel-urls`\n- resolves relative URLs (with support for the `<base>`
  tag), including inside of `html` for `e-*` properties\n- parses the [value-class-pattern](http://microformats.org/wiki/value-class-pattern),
  including date and time normalization\n- handles malformed HTML (the actual HTML
  parser is [tagstream-conduit])\n- also can convert to [JF2]\n- high performance\n-
  extensively tested\n\nAlso check out [http-link-header] because you often need to
  read links from the Link header!\n\n[Microformats 2]: http://microformats.org/wiki/microformats2\n[#IndieWeb]:
  https://indieweb.org\n[tagstream-conduit]: https://hackage.haskell.org/package/tagstream-conduit\n[JF2]:
  https://www.w3.org/TR/jf2/\n[http-link-header]: https://codeberg.org/valpackett/http-link-header\n\n##
  [DEMO PAGE](https://unrelenting.technology/mf2/)\n\n## Usage\n\nLook at the API
  docs [on Hackage](https://hackage.haskell.org/package/microformats2-parser) for
  more info, here's a quick overview:\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n\nimport Data.Microformats2.Parser\nimport Data.Default\nimport Network.URI\n\nparseMf2
  def $ documentRoot $ parseLBS \"<body><p class=h-entry><h1 class=p-name>Yay!</h1></p></body>\"\n\nparseMf2
  (def { baseUri = parseURI \"https://where.i.got/that/page/from/\" }) $ documentRoot
  $ parseLBS \"<body><base href=\\\"base/\\\"><link rel=micropub href='micropub'><p
  class=h-entry><h1 class=p-name>Yay!</h1></p></body>\"\n```\n\nThe `def` is the [default](https://hackage.haskell.org/package/data-default-class-0.0.1/docs/Data-Default-Class.html)
  configuration.\n\nThe configuration includes:\n- `htmlMode`, an HTML parsing mode
  (`Unsafe` | `Escape` | **`Sanitize`**)\n- `baseUri`, the `Maybe URI` that represents
  the address you retrieved the HTML from, used for resolving relative addresses --
  you should set it\n\n`parseMf2` will return an Aeson [Value](https://hackage.haskell.org/package/aeson-0.8.0.2/docs/Data-Aeson-Types.html#t:Value)
  structured like [canonical microformats2 JSON](http://microformats.org/wiki/microformats2).\n[lens-aeson](https://hackage.haskell.org/package/lens-aeson)
  is a good way to navigate it.\n\n## Development\n\nUse [stack] to build.  \nUse
  ghci to run tests quickly with `:test` (see the `.ghci` file).\n\n```bash\n$ stack
  build\n\n$ stack test\n\n$ stack ghci\n```\n\n[stack]: https://github.com/commercialhaskell/stack\n\n##
  License\n\nThis is free and unencumbered software released into the public domain.
  \ \nFor more information, please refer to the `UNLICENSE` file or [unlicense.org](https://unlicense.org).\n"
description-type: markdown
hash: 8f1f79da46e2562d21896a5781873ca3e613e7acb3e234e21062995a10c81c72
homepage: https://codeberg.org/valpackett/microformats2-parser
latest: 1.0.2.2
license-name: LicenseRef-PublicDomain
maintainer: val@packett.cool
synopsis: A Microformats 2 parser.
test-bench-deps:
  aeson-qq: '>=0'
  base: '>=4.7.0.0 && <5'
  base-compat: '>=0.8.0'
  bytestring: '>=0'
  data-default: '>=0'
  hspec: '>=0'
  hspec-expectations-pretty-diff: '>=0'
  html-conduit: '>=0'
  microformats2-parser: '>=0'
  mtl: '>=0'
  network-uri: '>=0'
  raw-strings-qq: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  time: '>=0'
  xml-lens: '>=0'
