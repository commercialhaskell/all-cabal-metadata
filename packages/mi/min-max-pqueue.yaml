all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Ziyang Liu <free@cofree.io>
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.5.11 && <0.7'
changelog: |
  # Changelog for min-max-pqueue

  ## 0.1.0.2

  - Update version upper bound of random

  ## 0.1.0.1

  - Fix cabal build

  ## 0.1.0.0

  - Initial release
changelog-type: markdown
description: "# min-max-pqueue\n\nA min-max priority queue provides efficient access
  to both its least element\nand its greatest element. Also known as\n[double-ended
  priority queue](https://en.wikipedia.org/wiki/Double-ended_priority_queue).\n\nThis
  library provides two variants of min-max priority queues:\n\n- [`MinMaxQueue prio
  a`](https://hackage.haskell.org/package/min-max-pqueue/docs/Data-MinMaxQueue.html),
  a general-purpose min-max priority queue.\n- [`IntMinMaxQueue a`](https://hackage.haskell.org/package/min-max-pqueue/docs/Data-IntMinMaxQueue.html),
  a min-max priority queue where priority values are integers.\n\nA min-max priority
  queue can be configured with a maximum size. Each time an insertion\ncauses the
  queue to grow beyond the size limit, the greatest element\nwill be automatically
  removed (rather than rejecting the insertion).\n\nTheir implementations are backed
  by `Map prio (NonEmpty a)` and\n`IntMap (NonEmpty a)`, respectively. This means\nthat
  certain operations are asymptotically more expensive than\nimplementations [backed
  by mutable arrays](https://dl.acm.org/citation.cfm?id=6621),\ne.g., `peekMin` and
  `peekMax` is *O(n* log *n)* vs. *O(n)*, `fromList` is\nalso *O(n* log *n)* vs. *O(n)*.
  In a pure language like Haskell, a\nmutable array based implementation would be
  impure\nand need to operate inside monads. And in many applications, regardless\nof
  language, the additional time complexity would be a small or negligible\nprice to
  pay to avoid destructive updates anyway.\n\nIf you only access one end of the queue
  (i.e., you need a regular\npriority queue), an implementation based on a kind of
  heap that is more\namenable to purely functional implementations, such as binomial
  heap\nand pairing heap, is *potentially* more efficient. But always benchmark\nif
  performance is important; in my experience `Map` *always* wins, even for\nregular
  priority queues.\n\n## Advantages over Using Maps Directly\n\n- `size` is *O(1)*,
  vs. *O(n)* for maps. Note that `Data.Map.size` is *O(1)* but it\n  returns the number
  of keys, which is not the same as the number of elements in\n  the queue. `Data.IntMap.size`,
  on the other hand, is *O(k)* where *k* is\n  the number of keys.\n- A queue can
  have a size limit, and it is guaranteed that its size\n  does not grow beyond the
  limit.\n- Many useful operations, such as `takeMin`, `dropMin`, are non-trivial
  to\n  implement with `Map prio (NonEmpty a)` and `IntMap (NonEmpty a)`.\n- The queue's
  fold operations operate on individual elements, as opposed to\n  `NonEmpty a`.\n\n\n##
  Alternative Implementation\n\nIn Haskell, an alternative to the mutable array based
  implementation is\nto use immutable, general purpose arrays such as `Seq`. This
  would achieve\n*O(1)* `peekMin` and `peekMax`, but since `lookup` and `update` for
  `Seq`\ncost *O(n* log  *n)*, the cost of `insert`, `deleteMin` and `deleteMax` would\nbecome
  *O(n* log<sup>2</sup> *n)*.\n\n[A `Seq`-based implementation](https://github.com/zliu41/min-max-pqueue/blob/master/benchmark/SeqQueue.hs)
  is provided for benchmarking purposes, which,\nas shown below, is more than an order
  of magnitude slower than the `Map`-based implementation\nfor enqueuing and dequeuing
  200,000 elements, proving that the improved\ntime complexity of `peekMin` and `peekMax`
  is not worth the cost. In fact,\nif you perform `peekMin` and `peekMax` much more
  often than enqueuing and\ndequeuing operations, which means you perform `peekMin`
  and `peekMax` many times\non the same queue, you should simply memoize the results.\n\n##
  Benchmarks\n\nBenchmarking was done on my laptop in which 200,000 elements (which
  are\nintegers) are inserted into the queue and subsequently removed one after\nanother.\n\n-
  `pq`, `intpq` and `sq` represents `MinMaxQueue`, `IntMinMaxQueue` and\n  `SeqQueue`.\n-
  `asc`, `desc` and `rand` represents inserting the elements in ascending,\n  descending
  and random order.\n- `min` and `max` represents removing elements from the min-end
  and max-end.\n\nAs seen in the following result, `IntMinMaxQueue` is twice as fast
  as\n`MinMaxQueue` for integer keys, whereas `SeqQueue` is more than an order\nof
  magnitude slower.\n\n```\nbenchmarking intpq-asc-min          \ntime                 27.15
  ms   (23.85 ms .. 29.31 ms)\n                     0.972 R²   (0.927 R² .. 0.997
  R²)\nmean                 30.84 ms   (29.67 ms .. 35.07 ms)\nstd dev              4.308
  ms   (1.160 ms .. 7.915 ms)\nvariance introduced by outliers: 57% (severely inflated)\n\nbenchmarking
  intpq-desc-max         \ntime                 29.70 ms   (29.23 ms .. 30.41 ms)\n
  \                    0.998 R²   (0.995 R² .. 1.000 R²)\nmean                 30.62
  ms   (30.29 ms .. 31.02 ms)\nstd dev              803.7 μs   (548.0 μs .. 1.190
  ms)\n\nbenchmarking intpq-rand-min         \ntime                 31.00 ms   (29.10
  ms .. 33.05 ms)\n                     0.985 R²   (0.973 R² .. 0.994 R²)\nmean                 28.39
  ms   (27.43 ms .. 29.46 ms)\nstd dev              2.216 ms   (1.968 ms .. 2.591
  ms)\nvariance introduced by outliers: 32% (moderately inflated)\n\nbenchmarking
  intpq-rand-max         \ntime                 30.96 ms   (28.98 ms .. 32.96 ms)\n
  \                    0.987 R²   (0.976 R² .. 0.996 R²)\nmean                 33.66
  ms   (32.71 ms .. 34.49 ms)\nstd dev              1.820 ms   (1.473 ms .. 2.388
  ms)\nvariance introduced by outliers: 18% (moderately inflated)\n\nbenchmarking
  pq-asc-min             \ntime                 69.02 ms   (61.94 ms .. 72.95 ms)\n
  \                    0.988 R²   (0.968 R² .. 0.997 R²)\nmean                 71.41
  ms   (68.99 ms .. 74.35 ms)\nstd dev              4.799 ms   (3.401 ms .. 6.974
  ms)\nvariance introduced by outliers: 17% (moderately inflated)\n\nbenchmarking
  pq-desc-max            \ntime                 80.90 ms   (78.68 ms .. 85.06 ms)\n
  \                    0.997 R²   (0.994 R² .. 0.999 R²)\nmean                 83.20
  ms   (80.91 ms .. 89.15 ms)\nstd dev              5.853 ms   (2.234 ms .. 9.957
  ms)\nvariance introduced by outliers: 19% (moderately inflated)\n\nbenchmarking
  pq-rand-min            \ntime                 65.80 ms   (60.01 ms .. 69.62 ms)\n
  \                    0.987 R²   (0.965 R² .. 0.996 R²)\nmean                 74.17
  ms   (70.93 ms .. 79.86 ms)\nstd dev              7.495 ms   (4.557 ms .. 12.39
  ms)\nvariance introduced by outliers: 35% (moderately inflated)\n\nbenchmarking
  pq-rand-max            \ntime                 68.29 ms   (65.07 ms .. 70.84 ms)\n
  \                    0.997 R²   (0.995 R² .. 1.000 R²)\nmean                 74.03
  ms   (71.64 ms .. 77.51 ms)\nstd dev              5.016 ms   (3.110 ms .. 7.556
  ms)\nvariance introduced by outliers: 17% (moderately inflated)\n\nbenchmarking
  sq-asc-min             \ntime                 1.954 s    (1.369 s .. 2.838 s)\n
  \                    0.971 R²   (NaN R² .. 1.000 R²)\nmean                 1.733
  s    (1.592 s .. 1.861 s)\nstd dev              160.1 ms   (28.78 ms .. 203.2 ms)\nvariance
  introduced by outliers: 22% (moderately inflated)\n\nbenchmarking sq-rand-min            \ntime
  \                2.889 s    (2.000 s .. 3.658 s)\n                     0.989 R²
  \  (0.959 R² .. 1.000 R²)\nmean                 2.915 s    (2.828 s .. 3.054 s)\nstd
  dev              130.7 ms   (442.1 μs .. 159.9 ms)\nvariance introduced by outliers:
  19% (moderately inflated)\n```\n"
description-type: markdown
hash: 793bebc49af26aef91956601b850cf7d359c79adc722db4050d51455cc1a501b
homepage: https://github.com/zliu41/min-max-pqueue
latest: 0.1.0.2
license-name: BSD-3-Clause
maintainer: Ziyang Liu <free@cofree.io>
synopsis: Double-ended priority queues.
test-bench-deps:
  base: '>=4.7 && <5'
  containers: '>=0.5.11 && <0.7'
  criterion: '>=1.4.1 && <1.6'
  hedgehog: '>=1.0 && <2'
  integer-logarithms: '>=1.0.2.2 && <1.1'
  min-max-pqueue: '>=0'
  random: '>=1.1 && <1.3'
