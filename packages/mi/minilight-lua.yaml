all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: myuon
basic-deps:
  base: '>=4.13.0.0 && <4.14'
  bytestring: '>=0.10'
  containers: '>=0'
  exceptions: '>=0.10'
  hslua: '>=1.1'
  lens: '>=0'
  linear: '>=1.20'
  minilight: '>=0.5.0'
  minilight-lua: '>=0'
  mtl: '>=2.2'
  sdl2: '>=2.4 && <2.5'
  sdl2-ttf: '>=0'
  text: '>=1.2'
  unix-time: '>=0.4'
changelog: |
  # Revision history for minilight-lua

  ## 0.2.1.0 -- 2020-05-16

  * Support table type for useState

  ## 0.2.0.0 -- 2020-05-13

  * Some hooks supported:
    * mouse state: useMouseMove, useMousePressed, useMouseReleased
    * extra utility: useState

  ## 0.1.0.0 -- 2020-05-10

  * First version.
  * Supports only limited API: translate, clip, text, picture
changelog-type: markdown
description: |
  # minilight-lua

  [![Hackage](http://img.shields.io/hackage/v/minilight-lua.svg)](https://hackage.haskell.org/package/minilight-lua) [![MIT license](http://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)

  A binding library of [minilight](https://github.com/myuon/minilight) for Lua language.

  *NB: This package is in the very early stage.*

  ## What's this?

  - [minilight](http://hackage.haskell.org/package/minilight) is a SDL2-based graphics library, equipped with component system.
  - [Lua](https://www.lua.org) is a lightweight interpreted language.

  With this library, you can write a minilight component in Lua language.

  ## Getting Started

  See [example](https://github.com/myuon/minilight-lua/tree/master/example) directory. `Main.hs` is an entrypoint for minilight engine.

  ```hs
  mainFile = "example/main.lua"

  main :: IO ()
  main = runLightT $ runMiniloop
    (defConfig { hotConfigReplacement = Just "example", appConfigFile = Just "" })
    initial
    (const mainloop)
   where
    initial = do
      comp <- registerComponent mainFile newLuaComponent
      reload mainFile

      return ()

    mainloop :: MiniLoop ()
    mainloop = do
      ref <- view _events
      evs <- liftIO $ tryReadMVar ref

      let notifys = case evs of
            Just evs -> mapMaybe asNotifyEvent evs
            _        -> []
      unless (null notifys) $ reload mainFile
  ```

  Some notes here:

  - When you pass `hotConfigReplacement` field, minilight will watch the given directory and emits *file changed/created/delete* events during the mainloop.
  - For `registerComponent` you need to pass the filename like `example/main.lua`. The path is relative where you run `cabal run`.
  - In `mainloop`, watches any events and `reload` the component. The `reload` function will load the lua file again and swap the component dynamically (code swapping).

  ```lua
  local minilight = require("minilight")

  function onDraw()
      print("[LUA OUTPUT] hello")

      return {
          minilight.translate(50, 50, minilight.picture("example/example.png")),
          minilight.translate(100, 100, minilight.text("こんにちは世界",
                                                       {0, 0, 0, 0})),
          minilight.translate(30, 50,
                              minilight.text("Hello, World!", {255, 0, 0, 0}))
      }
  end

  _G.onDraw = onDraw
  ```

  For lua part:

  - Require `minilight` library. This will be implicitly loaded by minilight-lua.
  - You need to export `onDraw : () -> Array<minilight.Figure>` function globally. This function will be called from Haskell and the returned array will be rendered in the component.
description-type: markdown
hash: fc8dc16883558c559df6f178c0f3cdecffaca9d7bd703df4379df02c2d26e150
homepage: ''
latest: 0.2.1.0
license-name: MIT
maintainer: ioi.joi.koi.loi@gmail.com
synopsis: A binding library of minilight for Lua langauge.
test-bench-deps: {}
