all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.3.0
- 0.7.4.0
- 0.7.5.0
- 0.7.6.0
- 0.7.7.0
- 0.7.8.0
- 0.8.0.0
- 0.9.0.0
- 0.10.0.0
- 0.11.0.0
- 0.12.0.0
- 0.13.0.0
- 0.14.0.0
- 0.15.0.0
- 0.16.0.0
- 0.17.0.0
- 0.18.0.0
- 0.19.0.0
- 0.20.0.0
- 0.20.1.0
- 0.21.0.0
- 0.21.1.0
- 0.21.2.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.3.0.0
- 1.4.0.0
- 1.5.0.0
- 1.5.1.0
- 1.5.2.0
- 1.6.0.0
- 1.7.0.0
- 1.7.1.0
- 1.8.0.0
- 1.8.1.0
- 1.8.2.0
- 1.8.3.0
- 1.8.4.0
- 1.8.5.0
author: David M. Johnson <code@dmj.io>
basic-deps:
  aeson: '>=0'
  base: <5
  bytestring: '>=0'
  containers: '>=0'
  file-embed: '>=0'
  http-api-data: '>=0'
  http-types: '>=0'
  jsaddle: '>=0'
  lucid: '>=0'
  network-uri: '>=0'
  servant: '>=0'
  servant-lucid: '>=0'
  tagsoup: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "<h1 align=\"center\">miso</h1>\n<p align=\"center\">\n\n<a href=\"https://haskell-miso.org\">\n
  \ <img width=10% src=\"https://em-content.zobj.net/thumbs/240/apple/325/steaming-bowl_1f35c.png\">\n
  \  </a>\n<p align=\"center\">A <i>tasty</i> <a href=\"https://www.haskell.org/\"><strong>Haskell</strong></a>
  front-end framework</p>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://join.slack.com/t/haskell-miso/shared_invite/zt-1w80x404h-AF2Be_BDQixNMadzadnUNg\">\n<img
  src=\"https://img.shields.io/badge/slack-miso-E01563.svg?style=flat-square\" alt=\"Miso
  Slack\">\n  </a>\n  <a href=\"https://haskell.org\">\n\t<img src=\"https://img.shields.io/badge/language-Haskell-orange.svg?style=flat-square\"
  alt=\"Haskell\">\n  </a>\n  <a href=\"https://miso-haskell.cachix.org\">\n\t<img
  src=\"https://img.shields.io/badge/build-cachix-yellow.svg?style=flat-square\" alt=\"Cachix\">\n
  \ </a>\n  <a href=\"https://github.com/dmjio/miso/actions\">\n    <img src=\"https://github.com/dmjio/miso/workflows/test%20matrix/badge.svg\"
  alt=\"GitHub Actions\">\n  </a>\n  <a href=\"http://hackage.haskell.org/package/miso\">\n\t<img
  src=\"https://img.shields.io/hackage/v/miso.svg?style=flat-square\" alt=\"Hackage\">\n
  \ </a>\n  <a href=\"https://www.irccloud.com/invite?channel=%23haskell-miso&amp;hostname=irc.libera.chat&amp;port=6697&amp;ssl=1\">\n\t<img
  src=\"https://img.shields.io/badge/irc-%23haskell--miso-1e72ff.svg?style=flat-square\"
  alt=\"IRC #haskell-miso\">\n  </a>\n  <a href=\"https://github.com/dmjio/miso/blob/master/LICENSE\">\n\t<img
  src=\"http://img.shields.io/badge/license-BSD3-blueviolet.svg?style=flat-square\"
  alt=\"LICENSE\">\n  </a>\n</p>\n\n**Miso** is a small, production-ready, \"[isomorphic](http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/)\"
  [Haskell](https://www.haskell.org/) front-end framework for quickly building highly
  interactive single-page web applications. It features a virtual-dom, recursive diffing
  / patching algorithm, attribute and property normalization, event delegation, event
  batching, SVG, Server-sent events, Websockets, type-safe [servant](https://haskell-servant.github.io/)-style
  routing and an extensible Subscription-based subsystem. Inspired by [Elm](http://elm-lang.org/),
  [Redux](http://redux.js.org/) and [Bobril](http://github.com/bobris/bobril). **Miso**
  is pure by default, but side effects (like `XHR`) can be introduced into the system
  via the `Effect` data type. **Miso** makes heavy use of the [GHCJS](https://github.com/ghcjs/ghcjs)
  FFI and therefore has minimal dependencies. **Miso** can be considered a shallow
  [embedded domain-specific language](https://wiki.haskell.org/Embedded_domain_specific_language)
  for modern web programming.\n\n## Table of Contents\n- [Quick Start](#quick-start)\n
  \ - [Begin](#begin)\n  - [Nix](#nix)\n  - [Architecture](#architecture)\n- [Examples](#examples)\n
  \ - [TodoMVC](#todomvc)\n  - [Flatris](#flatris)\n  - [2048](#2048)\n  - [Snake](#snake)\n
  \ - [Mario](#mario)\n  - [Miso Plane (Flappy Birds)](#miso-plane-flappy-birds)\n
  \ - [Websocket](#websocket)\n  - [SSE](#sse)\n  - [XHR](#xhr)\n  - [Router](#router)\n
  \ - [SVG](#svg)\n  - [Canvas 2D](#canvas-2d)\n  - [ThreeJS](#threejs)\n  - [Simple](#simple)\n
  \ - [File Reader](#file-reader)\n  - [WebVR](#webvr)\n  - [Pixel Card Wars](#pixel-card-wars)\n
  \ - [Currency Converter](#currency-converter)\n- [Haddocks](#haddocks)\n  - [GHC](#ghc)\n
  \ - [GHCJS](#ghcjs)\n- [Sample Application](#sample-application)\n- [Transition
  Application](#transition-application)\n- [Live reload with JSaddle](#live-reload-with-jsaddle)\n-
  [Docker](#docker)\n- [Building examples](#building-examples)\n- [Coverage](#coverage)\n-
  [Isomorphic](#isomorphic)\n- [Pinning nixpkgs](#pinning-nixpkgs)\n- [Binary cache](#binary-cache)\n-
  [Benchmarks](#benchmarks)\n- [Maintainers](#maintainers)\n- [Commercial Users](#commercial-users)\n-
  [Contributing](#contributing)\n- [Contributors](#contributors)\n- [License](#license)\n\n##
  Quick start\nTo get started quickly building applications, we recommend using the
  [`nix`](https://nixos.org/nix) package manager with miso's binary cache provided
  by [`cachix`](https://miso-haskell.cachix.org/). It is possible to use [`stack`](https://docs.haskellstack.org/en/stable/README/)
  to build GHCJS projects, but support for procuring `GHCJS` has been removed [as
  of stack 2.0](https://github.com/commercialhaskell/stack/issues/4086). `nix` is
  used to procure a working version of `GHCJS`. If you're using `cabal` we assume
  you have [obtained `GHCJS`](https://github.com/ghcjs/ghcjs#installation) by other
  means. All source code depicted below for the quick start app is available [here](https://github.com/dmjio/miso/tree/master/sample-app).\n\n###
  Begin\nTo build the sample-app with `nix`, execute the commands below:\n\n```bash\n#
  optional use of cache\nnix-env -iA cachix -f https://cachix.org/api/v1/install\n#
  optional use of cache\ncachix use miso-haskell\ngit clone https://github.com/dmjio/miso\ncd
  miso/sample-app\nnix-build\nopen ./result/bin/app.jsexe/index.html\n```\n\nThe above
  commands will add miso's binary cache to your nix installation (support for both
  Linux and OSX).\n`nix-build` will fetch the dependencies from miso's cache and build
  the sample application.\n\n### Nix\n`Nix` is a more powerful option for building
  web applications with `miso` since it encompasses development workflow, configuration
  management, and deployment. The source code for [`haskell-miso.org`](https://github.com/dmjio/miso/tree/master/examples/haskell-miso.org)
  is an example of this.\n\nIf unfamiliar with `nix`, we recommend [@Gabriella439](https://github.com/Gabriella439)'s
  [\"Nix and Haskell in production\"](https://github.com/Gabriella439/haskell-nix)
  guide.\n\nTo begin, make the following directory layout:\n```bash\n➜  mkdir app
  && touch app/{Main.hs,app.cabal,default.nix} && tree app\napp\n|-- Main.hs\n|--
  app.cabal\n`-- default.nix\n```\n\nAdd a `cabal` file\n```bash\n➜  cat app/*.cabal\nname:
  \               app\nversion:             0.1.0.0\nsynopsis:            First miso
  app\ncategory:            Web\nbuild-type:          Simple\ncabal-version:       >=1.10\n\nexecutable
  app\n  main-is:             Main.hs\n  ghcjs-options:\n    -dedupe\n  build-depends:
  \      base, miso\n  default-language:    Haskell2010\n```\n\nWrite a `default.nix`
  (this will fetch a recent version of `miso`). `miso` will provide you with a working
  `nixpkgs` named `pkgs`. `callCabal2nix` will automatically produce a nix expression
  that builds your cabal file.\n\n```nix\nwith (import (builtins.fetchGit {\n  url
  = \"https://github.com/dmjio/miso\";\n  ref = \"refs/tags/1.8\";\n}) {});\npkgs.haskell.packages.ghcjs.callCabal2nix
  \"app\" ./. {}\n```\n\nAdd the source from [Sample Application](#sample-application)
  to `app/Main.hs`\n\nBuild the project\n```\nnix-build\n```\n\nOpen the result\n```\nopen
  ./result/bin/app.jsexe/index.html\n```\n\nFor development with `nix`, it can be
  nice to have `cabal` present for building. This command will make it available in
  your `PATH`.\n```\nnix-env -iA cabal-install -f '<nixpkgs>'\n```\n\nTo be put into
  a shell w/ `GHCJS` and all the dependencies for this project present, use `nix-shell`.\n```\nnix-shell
  -A env\n```\n\nTo view the dependencies for your project, call `ghcjs-pkg list`
  when inside the shell.\n```\nnix-shell -A env --run 'ghcjs-pkg list'\n```\n\nTo
  build the project with `cabal` after entering the `nix-shell`\n```\nnix-shell -A
  env --run 'cabal configure --ghcjs && cabal build'\n```\n\nFor incremental development
  inside of the `nix-shell` we recommend using a tool like [`entr`](http://eradman.com/entrproject/)
  to automatically rebuild on file changes, or roll your own solution with `inotify`.\n```\nag
  -l | entr sh -c 'cabal build'\n```\n\n### Architecture\nFor constructing client
  and server applications, we recommend using one `cabal` file with two executable
  sections, where the `buildable` attribute set is contingent on the compiler. An
  example of this layout is [here](https://github.com/dmjio/miso/blob/master/examples/haskell-miso.org/haskell-miso.cabal#L16-L60).
  For more info on how to use `stack` with a `client`/`server` setup, see this [link](https://docs.haskellstack.org/en/stable/ghcjs/#project-with-both-client-and-server).
  For more information on how to use `nix` with a `client`/`server` setup, see the
  [nix scripts](https://github.com/dmjio/miso/blob/master/examples/haskell-miso.org/default.nix)
  for [https://haskell-miso.org](https://haskell-miso.org).\n\n## Examples\n\n###
  TodoMVC\n  - [Link](https://todo-mvc.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/todo-mvc/Main.hs)\n\n###
  Flatris\n  - [Link](https://flatris.haskell-miso.org/) / [Source](https://github.com/ptigwe/hs-flatris/)\n\n###
  2048\n  - [Link](https://2048.haskell-miso.org/) / [Source](https://github.com/ptigwe/hs2048/)\n\n###
  Snake\n  - [Link](https://snake.haskell-miso.org/) / [Source](https://github.com/lbonn/miso-snake)\n\n###
  Mario\n  - [Link](https://mario.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/mario/Main.hs)\n\n###
  Miso Plane (Flappy Birds)\n  - [Link](http://miso-plane.haskell-miso.org) / [Source](https://github.com/Lermex/miso-plane)\n\n###
  Websocket\n  - [Link](https://websocket.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/websocket/Main.hs)\n\n###
  SSE\n  - [Link](http://sse.haskell-miso.org/) / [Client](https://github.com/dmjio/miso/blob/master/examples/sse/client/Main.hs)
  / [Server](https://github.com/dmjio/miso/blob/master/examples/sse/server/Main.hs)\n\n###
  XHR\n  - [Link](https://xhr.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/xhr/Main.hs)\n\n###
  Router\n  - [Link](https://router.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/router/Main.hs)\n\n###
  SVG\n  - [Link](https://svg.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/svg/Main.hs)\n\n###
  Canvas 2D\n  - [Link](https://canvas.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/canvas2d/Main.hs)\n\n###
  ThreeJS\n  - [Link](https://threejs.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/three/Main.hs)\n\n###
  Simple\n  - [Link](https://simple.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/simple/Main.hs)\n\n###
  File Reader\n  - [Link](https://file-reader.haskell-miso.org/) / [Source](https://github.com/dmjio/miso/blob/master/examples/file-reader/Main.hs)\n\n###
  WebVR\n  - [Link](http://fizruk.github.io/fpconf-2017-talk/miso-aframe-demo/dist/demo.jsexe/index.html)
  / [Source](https://github.com/fizruk/miso-aframe)\n\n### Pixel Card Wars\n  - [Link](https://smelc3.itch.io/pixel-card-wars)
  / [Source](https://github.com/smelc/miso-darkcraw)\n\n### Currency Converter\n  -
  [Link](https://functora.github.io/apps/currency-converter) / [Source](https://github.com/functora/functora.github.io/tree/master/ghcjs/currency-converter)\n\n##
  Haddocks\n\n### GHCJS\n  - [Link](https://haddocks.haskell-miso.org/)\n\n### GHC\n
  \ - [Link](http://hackage.haskell.org/package/miso)\n\n## Sample application\n```haskell\n--
  | Haskell language pragma\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards
  #-}\n\n-- | Haskell module declaration\nmodule Main where\n\n-- | Miso framework
  import\nimport Miso\nimport Miso.String\n\n-- | Type synonym for an application
  model\ntype Model = Int\n\n-- | Sum type for application events\ndata Action\n  =
  AddOne\n  | SubtractOne\n  | NoOp\n  | SayHelloWorld\n  deriving (Show, Eq)\n\n--
  | Entry point for a miso application\nmain :: IO ()\nmain = startApp App {..}\n
  \ where\n    initialAction = SayHelloWorld -- initial action to be executed on application
  load\n    model  = 0                    -- initial model\n    update = updateModel
  \         -- update function\n    view   = viewModel            -- view function\n
  \   events = defaultEvents        -- default delegated events\n    subs   = []                   --
  empty subscription list\n    mountPoint = Nothing          -- mount point for application
  (Nothing defaults to 'body')\n    logLevel = Off                -- used during prerendering
  to see if the VDOM and DOM are in sync (only applies to `miso` function)\n\n-- |
  Updates model, optionally introduces side effects\nupdateModel :: Action -> Model
  -> Effect Action Model\nupdateModel action m =\n  case action of\n    AddOne\n      ->
  noEff (m + 1)\n    SubtractOne\n      -> noEff (m - 1)\n    NoOp\n      -> noEff
  m\n    SayHelloWorld\n      -> m <# do consoleLog \"Hello World\" >> pure NoOp\n\n--
  | Constructs a virtual DOM from a model\nviewModel :: Model -> View Action\nviewModel
  x = div_ [] [\n   button_ [ onClick AddOne ] [ text \"+\" ]\n , text (ms x)\n ,
  button_ [ onClick SubtractOne ] [ text \"-\" ]\n ]\n```\n\n## Transition application\n\nAn
  alternative, more powerful interface for constructing `miso` applications is using
  the `Transition` interface.\n`Transition` is based on the `StateT` monad transformer,
  and can be used to construct components. It also works\nvery nicely with lenses
  based on `MonadState` (i.e. `(.=)`, `(%=)`,`(+=)`,`(-=)`).\n\n\n```haskell\n-- |
  Haskell language pragma\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE RecordWildCards
  \  #-}\n\n-- | Haskell module declaration\nmodule Main where\n\n-- | Miso framework
  import\nimport Miso\nimport Miso.String\n\n-- | Lens import\nimport Control.Lens\n\n--
  | Type synonym for an application model\ndata Model\n  = Model\n  { _counter ::
  Int\n  } deriving (Show, Eq)\n\ncounter :: Lens' Model Int\ncounter = lens _counter
  $ \\record field -> record { _counter = field }\n\n-- | Sum type for application
  events\ndata Action\n  = AddOne\n  | SubtractOne\n  | NoOp\n  | SayHelloWorld\n
  \ deriving (Show, Eq)\n\n-- | Entry point for a miso application\nmain :: IO ()\nmain
  = startApp App {..}\n  where\n    initialAction = SayHelloWorld -- initial action
  to be executed on application load\n    model  = Model 0              -- initial
  model\n    update = fromTransition . updateModel -- update function\n    view   =
  viewModel            -- view function\n    events = defaultEvents        -- default
  delegated events\n    subs   = []                   -- empty subscription list\n
  \   mountPoint = Nothing          -- mount point for application (Nothing defaults
  to 'body')\n    logLevel = Off                -- used during prerendering to see
  if the VDOM and DOM are in sync (only applies to `miso` function)\n\n-- | Updates
  model, optionally introduces side effects\nupdateModel :: Action -> Transition Action
  Model ()\nupdateModel action =\n  case action of\n    AddOne\n      -> counter +=
  1\n    SubtractOne\n      -> counter -= 1\n    NoOp\n      -> pure ()\n    SayHelloWorld\n
  \     -> scheduleIO_ (consoleLog \"Hello World\")\n\n-- | Constructs a virtual DOM
  from a model\nviewModel :: Model -> View Action\nviewModel x = div_ [] [\n   button_
  [ onClick AddOne ] [ text \"+\" ]\n , text . ms $ x^.counter\n , button_ [ onClick
  SubtractOne ] [ text \"-\" ]\n ]\n```\n\n## Live reload with JSaddle\n\nIt is possible
  to build `miso` applications with `ghcid`, `jsaddle` that allow live reloading of
  your application in reponse to changes in application code. See the [README](https://github.com/dmjio/miso/blob/master/sample-app-jsaddle/README.md)
  in the `sample-app-jsaddle` folder for more information.\n\n## Docker\n\nDeveloping
  miso applications inside a Docker container is supported (allows applications to
  be built on Windows). See the [README](https://github.com/dmjio/miso/blob/master/docker/README.md)
  in the `docker` folder for more information.\n\n## Building examples\n\nThe easiest
  way to build the examples is with the [`nix`](https://nixos.org/nix/) package manager\n```\ngit
  clone https://github.com/dmjio/miso && cd miso && nix-build --arg examples true\n```\n\nThis
  will build all examples and documentation into a folder named `result`\n```\n➜  miso
  git:(master) ✗ tree -d ./result/bin\n./result/bin\n|-- canvas2d.jsexe\n|-- compose-update.jsexe\n|--
  file-reader.jsexe\n|-- mario.jsexe\n|   `-- imgs\n|-- mathml.jsexe\n|-- router.jsexe\n|--
  simple.jsexe\n|-- svg.jsexe\n|-- tests.jsexe\n|-- threejs.jsexe\n|-- todo-mvc.jsexe\n|--
  websocket.jsexe\n`-- xhr.jsexe\n```\n\nTo see examples, we recommend hosting them
  with a webserver\n\n```\ncd result/bin/todo-mvc.jsexe && nix-shell -p python --run
  'python -m SimpleHTTPServer'\nServing HTTP on 0.0.0.0 port 8000 ...\n```\n\n## Coverage\n\nThe
  core algorithmic component of miso is [diff.js](https://github.com/dmjio/miso/blob/master/jsbits/diff.js).
  It is responsible for all DOM manipulation that occurs in a miso application and
  has [100% code coverage](http://coverage.haskell-miso.org). Tests and coverage made
  possible using [jsdom](https://github.com/jsdom/jsdom) and [jest](https://github.com/facebook/jest).\n\nTo
  run the tests and build the coverage report:\n\n```bash\ncd miso/tests\nnpm i\nnpm
  run test\n## Or by using `yarn` instead of `npm`:\n# yarn\n# yarn test\n```\n\n##
  Isomorphic\n\n[Isomorphic javascript](https://en.wikipedia.org/wiki/Isomorphic_JavaScript)
  is a technique for increased SEO, code-sharing and perceived page load times. It
  works in two parts. First, the server sends a pre-rendered HTML body to the client's
  browser. Second, after the client javascript application loads, the pointers of
  the pre-rendered DOM are copied into the virtual DOM, and the application proceeds
  as normal. All subsequent page navigation is handled locally by the client, avoiding
  full-page postbacks as necessary.\n\nThe `miso` function is used to perform the
  pointer-copying behavior client-side.\n\nFor more information on how `miso` handles
  isomorphic javascript, we recommend [this tutorial](https://github.com/FPtje/miso-isomorphic-example).\n\n##
  Pinning nixpkgs\n\nBy default `miso` uses a known-to-work, pinned version of [`nixpkgs`](https://github.com/dmjio/miso/blob/master/nix/nixpkgs.json).\n\n##
  Binary cache\n\n`nix` users on a Linux or OSX distro can take advantage of a [binary
  cache](https://miso-haskell.cachix.org) for faster builds. To use the binary cache
  follow the instructions on [cachix](https://miso-haskell.cachix.org/).\n\n```bash\ncachix
  use miso-haskell\n```\n\n## Benchmarks\n\n[According to benchmarks](https://krausest.github.io/js-framework-benchmark/current.html),
  `miso` is among the fastest functional programming web frameworks, second only to
  [Elm](http://elm-lang.org).\n\n<a target=\"_blank\" href=\"https://krausest.github.io/js-framework-benchmark/current.html\"><img
  src=\"https://cdn-images-1.medium.com/max/1600/1*6EjJTf1mhlTxd4QWsygCwA.png\" width=\"500\"
  height=\"600\" /></a>\n\n## Maintainers\n\n[@dmjio](https://github.com/dmjio)\n\n##
  Commercial Users\n  - [Polimorphic](https://www.polimorphic.com)\n  - [LumiGuide](https://lumi.guide/en/)\n
  \ - [Clovyr](https://clovyr.io)\n\n## Contributing\n\nFeel free to dive in! [Open
  an issue](https://github.com/dmjio/miso/issues/new) or submit [PRs](https://github.com/dmjio/miso/pulls).\n\nSee
  [CONTRIBUTING](https://github.com/dmjio/miso/blob/master/CONTRIBUTING.md) for more
  info.\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks
  to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/dmjio/miso/graphs/contributors\"><img
  src=\"https://opencollective.com/miso/contributors.svg?width=890&button=false\"
  /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help
  us sustain our community. [[Contribute](https://opencollective.com/miso/contribute)]\n\n####
  Individuals\n\n<a href=\"https://opencollective.com/miso\"><img src=\"https://opencollective.com/miso/individuals.svg?width=890\"></a>\n\n####
  Organizations\n\nSupport this project with your organization. Your logo will show
  up here with a link to your website. [[Contribute](https://opencollective.com/miso/contribute)]\n\n<a
  href=\"https://opencollective.com/miso/organization/0/website\"><img src=\"https://opencollective.com/miso/organization/0/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/1/website\"><img src=\"https://opencollective.com/miso/organization/1/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/2/website\"><img src=\"https://opencollective.com/miso/organization/2/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/3/website\"><img src=\"https://opencollective.com/miso/organization/3/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/4/website\"><img src=\"https://opencollective.com/miso/organization/4/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/5/website\"><img src=\"https://opencollective.com/miso/organization/5/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/6/website\"><img src=\"https://opencollective.com/miso/organization/6/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/7/website\"><img src=\"https://opencollective.com/miso/organization/7/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/8/website\"><img src=\"https://opencollective.com/miso/organization/8/avatar.svg\"></a>\n<a
  href=\"https://opencollective.com/miso/organization/9/website\"><img src=\"https://opencollective.com/miso/organization/9/avatar.svg\"></a>\n\n##
  License\n\n[BSD3](LICENSE) © David Johnson\n"
description-type: markdown
hash: fea8ab5b151775986528ab426648fa2a7e962d290537a2689c18ec5fc9c1fca3
homepage: http://github.com/dmjio/miso
latest: 1.8.5.0
license-name: BSD-3-Clause
maintainer: David M. Johnson <code@dmj.io>
synopsis: A tasty Haskell front-end framework
test-bench-deps: {}
