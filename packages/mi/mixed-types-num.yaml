homepage: https://github.com/michalkonecny/mixed-types-num#readme
changelog-type: markdown
hash: ba891ea1612591d263c18964ccfbf855c57ab3f127e7bfbba2bf2c68de0c7174
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=2.1'
  collect-errors: '>=0.1.1'
  smallcheck: '>=1.1'
  mixed-types-num: -any
  QuickCheck: '>=2.7'
  hspec-smallcheck: '>=0.3'
maintainer: mikkonecny@gmail.com
synopsis: Alternative Prelude with numeric and logic expressions typed bottom-up
changelog: |
  # mixed-types-num change log

  * v 0.5.4 2021-05-21
    * remove Kleeneans (move them to aern2-mp)
  * v 0.5.3 2021-05-15
    * export clearPotentialErrors (from collect-errors)
  * v 0.5.2 2021-05-14
    * add OrdGenericBool
  * v 0.5.1 2021-05-12
    * if-then-else for CN-wrapped (see collect-errors) condition
    * Documentation now in README
  * v 0.5.0 2021-04-13
    * use package collect-errors with a much simpler CN wrapper
    * replace Maybe Bool by Kleenean (a new type)
    * remove very long type constraints in specifications using PartialTypeSignatures
  * v 0.4.1 2021-01-21
    * add hasErrorCE and hasErrorCN for testing if CE/CN values contain errors
  * v 0.4.0.2 2020-08-02
    * remove smallcheck version upper bound
    * update to cabal-version >= 1.10
  * v 0.4.0.1 2019-04-11
    * fix infinite loop in some conversions
  * v 0.4.0 2019-04-10
    * eliminated dependency on convertible, improving ghcjs compatibility
  * v 0.3.2 2019-01-08
    * added divI and mod
    * added enforceRange
    * used enforceRange in exp tests
  * v 0.3.1.5 2018-11-14
    * improved documentation
  * v 0.3.1.4 2017-12-06
    * removed upper bounds for dependencies
  * v 0.3.1.3 2017-08-22
    * fixed bound on base in test suite
  * v 0.3.1.2 2017-08-15
    * provided compatible versions of take, drop, length, replicate, splitAt
    * added missing mixed-type subtraction combination to Ring etc.

  * v 0.3.0.1 2017-08-01
    * improve package documentation in module MixedTypesNumPrelude

  * v 0.3 2017-08-01
    * renamed the main module to MixedTypesNumPrelude
    * much faster compilation
    * Ring and Field are now classes, not synonyms for large sets of constraints
    * many fixes in collect-error framework and its use in division and power
    * Overloaded if-then-else via -XRebindableSyntax
    * compiling with ghc 8.2.1

  * v 0.2.0.1
    * fix compilation bug in test suite
    * minor doc improvements
    * fix Complex instances of error-throwing division (/!)

  * v 0.2
    * new CollectErrors wrapper
    * CN, specialisation of CollectErrors to NumErrors
    * numerical partial operators (eg division) return a CN type
    * instances for Data.Complex

  * v 0.1
    * first release
basic-deps:
  base: '>=4.7 && <5'
  hspec: '>=2.1'
  collect-errors: '>=0.1.1'
  smallcheck: '>=1.1'
  mtl: -any
  QuickCheck: '>=2.7'
  template-haskell: -any
  hspec-smallcheck: '>=0.3'
all-versions:
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.1.4
- 0.3.1.5
- 0.3.2
- 0.4.0.1
- 0.4.0.2
- 0.4.1
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.1.0
- 0.5.2.0
- 0.5.3.0
- 0.5.3.1
- 0.5.4.0
author: Michal Konecny
latest: 0.5.4.0
description-type: markdown
description: "# mixed-types-num <!-- omit in toc -->\n\nThis package provides a version
  of Prelude where\nunary and binary operations such as `not`, `+`, `==`\nhave their
  result type derived from the parameter type(s)\nand thus supports mixed-type arithmetic
  and comparisons such as:\n\n```Text\n> a = [1..10]; b = [1..11]\n> length a > 2^((length
  b)/3)\n{?(prec 36): CertainFalse}\n```\n\nPartial operations such as division, sqrt
  and power\ndo not throw exceptions even when errors such as division by zero\noccur.
  \ Instead, these errors are propagated bottom-up in\na bespoke error-accumulating
  functor from package collect-errors.\n\nThis library (as well as collect-errors)
  arose while developing the\n[AERN2](https://github.com/michalkonecny/aern2) library
  for interval and exact real computation.\nCertain aspects are specifically tailored
  for interval or exact real arithmetics,\nincluding three-valued numerical comparisons
  and distinguishing potential and certain errors.\n\nAPI documentation available
  on the [Hackage page](https://hackage.haskell.org/package/mixed-types-num).\n\n##
  Table of contents <!-- omit in toc -->\n\n- [1. Examples](#1-examples)\n  - [1.1.
  Main idea](#11-main-idea)\n  - [1.2. Dealing with numerical errors](#12-dealing-with-numerical-errors)\n
  \ - [1.3. The generalised power operator](#13-the-generalised-power-operator)\n
  \ - [1.4. Undecided comparisons](#14-undecided-comparisons)\n  - [1.5. Fuzzy if-then-else](#15-fuzzy-if-then-else)\n-
  [2. Type classes](#2-type-classes)\n- [3. Testable specifications](#3-testable-specifications)\n-
  [4. Limitations](#4-limitations)\n- [5. Credits](#5-credits)\n\n## 1. Examples\n\nTo
  replicate the examples included below, start ghci as follows:\n\n```Text\n$ stack
  ghci mixed-types-num:lib --no-load --ghci-options MixedTypesNumPrelude\n*MixedTypesNumPrelude>\n```\n\n###
  1.1. Main idea\n\nLiterals have a fixed type:\n\n```Text\n...> :t 1\n... Integer\n\n...>
  :t 1.0\n... Rational\n\n...> 1 :: Rational\n... Couldn't match type ‘Integer’ with
  ‘GHC.Real.Ratio Integer’ ...\n```\n\nOperations permit operands of mixed types,
  types inferred bottom-up:\n\n```Text\n...> :t 1/2\n... :: Rational\n\n...> :t 1.5
  * (length [[]])\n... :: Rational\n```\n\n### 1.2. Dealing with numerical errors\n\nTo
  avoid runtime exceptions, it is recommended to use the CN error-collecting wrapper
  from package [collect-errors](https://hackage.haskell.org/package/collect-errors).
  \ \n\nAll arithmetic operations have been extended so that it is possible to have
  expressions that operate exclusively on CN-wrapped types:\n\n```Text\n...> f (n
  :: CN Integer) = 1/(1/(n-1) + 1/n) :: CN Rational\n...> f (cn 0)\n{{ERROR: division
  by 0}}\n...> f (cn 1)\n{{ERROR: division by 0}}\n...> f (cn 2)\n2 % 3\n```\n\nNote
  that the errors printed above are not exceptions, but special values.  See the [collect-errors](https://hackage.haskell.org/package/collect-errors)
  documentation for more details.\n\n### 1.3. The generalised power operator\n\n```Text\n...>
  :t 2^(-2)\n... :: Rational\n\n...> :t 2^2\n... :: Rational\n\n...> :t round (2^2)\n...
  :: Integer\n\n...> :t (double 2)^(1/2)\n... :: Double\n```\n\nThe following examples
  require also package [aern2-real](https://hackage.haskell.org/package/aern2-real).\nTo
  get access to this via stack, you can start ghci eg as follows:\n\n```Text\n$ stack
  ghci aern2-real:lib --no-load --ghci-options AERN2.Real\nAERN2.Real> import MixedTypesNumPrelude\n\n...>
  :t pi\n...  :: CReal\n\n...> :t sqrt 2\n...  :: CReal\n\n...> :t 2^(1/2)\n... ::
  CReal\n```\n\n### 1.4. Undecided comparisons\n\nComparisons involving intervals
  are undecided when the intervals overlap:\n\n```Text\n> pi10 = pi ? (bits 10)\n>
  pi10\n[3.1416015625 ± ~9.7656e-4 ~2^(-10)]\n\n> pi10 > 0\nCertainTrue\n\n> pi10
  == pi10\nTrueOrFalse\n```\n\nThe above equality cannot be decided since `pi10` is
  not a single number but a set of numbers spanning the interval and the comparison
  operator cannot tell if the two operands sets represent the same number or a different
  number.\n\nComparison involving real numbers are semi-decidable.  The result of
  such a comparison is a lazy Kleenean, ie an infinite sequence of Kleeneans.\nPlease
  see package [aern2-real](https://github.com/michalkonecny/aern2) for further details.\n\n###
  1.5. Fuzzy if-then-else\n\nThis package generalises the Haskell if-then-else statement
  so that it admits Kleenean and lazy Kleenean conditions:\n\n```Text\n...> abs1 x
  = max 0 (if x < 0 then -x else x)\n...> abs1 (pi10 - pi10)\n[0.0009765625 ± ~9.7656e-4
  ~2^(-10)]\n```\n\nAlthough the condition `x < 0` cannot be decided for the interval\n`pi10-pi10
  = [0 ± ~1.9531e-3 ~2^(-9)]`, the if-then-else statement is resolved by computing
  both branches and unifying the resulting intervals.  This makes sense only if both
  branches compute the same number whenever the condition cannot be decided, ie when
  `x = 0` in this case, making the function continuous.\n\nIf we try to define a discontinuous
  function this way, we get an error as soon as it is detected:\n\n```Text\n...> bad1
  x = if x < 0 then 1-x else x\n...> bad1 (pi10 - pi10)\n[0.5 ± ~0.5020 ~2^(-1)]{{ERROR:
  numeric error: union of enclosures: not enclosing the same value}}\n```\n\nThe generalised
  if-then-else works also for real numbers with lazy Kleenean comparisons:\n\n```Text\n...>
  abs1 (pi - pi)\n{?(prec 36): [0.00000000001455191522836685... ± ~1.4552e-11 ~2^(-36)]}\n```\n\n##
  2. Type classes\n\nMixed-type arithmetic operations are provided via multi-parameter
  type classes\nand the result type is given by associated\ntype families. For example:\n\n```Haskell\n(+)
  :: (CanAddAsymmetric t1 t2) => t1 -> t2 -> AddType t1 t2\n```\n\nThe constraint
  `CanAdd t1 t2` is a shortcut for both\n`CanAddAsymmetric t1 t2` and `CanAddAsymmetric
  t2 t1`.\n\nFor convenience there are other aggregate type constraints such as\n`CanAddThis
  t1 t2`, which implies that the result is of type `t1`,\nand `CanAddSameType t`,
  which is a shortcut for `CanAddThis t t`.\n\nNotably, there are convenience classes
  `Ring` and `Field` as well as `OrderedRing` and `OrderedField`.\n\nFor types that
  instantiate Prelude classes such as `Num`, one can\ndefine instances of the new
  classes using the default implementation, eg:\n\n```Haskell\n{-# LANGUAGE GeneralizedNewtypeDeriving
  #-}\nimport MixedTypesPrelude\nimport qualified Prelude as P\n\nnewtype II = II
  Integer deriving (P.Eq, P.Ord, P.Num) \ninstance CanAddAsymmetric II II\n```\n\nConversely,
  if one defines instances such as `CanAddAsymmetric T T`,\none can then trivially
  define also instances `Num T` etc:\n\n```Haskell\ninstance P.Num T where\n  (+)
  = (+)\n  ...\n```\n\n## 3. Testable specifications\n\nThe arithmetic type classes
  are accompanied by generic hspec test suites,\nwhich are specialised to concrete
  instance types for their testing.\nThese test suites include the expected algebraic
  properties of operations,\nsuch as commutativity and associativity of addition.\n\n##
  4. Limitations\n\n- Not all numerical operations are supported yet.\n  Eg `tan`,
  `atan` are missing at the moment.\n\n- Not all Prelude numerical types are supported
  yet.\n  Eg `Natural` and `Float` are not supported at present,\n  but `Double` is
  supported.\n\n- Many common operations such as `fromEnum`, `threadDelay` give or
  require\n  an `Int` value, which means we sometimes need to convert:\n\n  ```Text\n
  \ threadDelay (int 1000000)\n  integer (fromEnum True)\n  ```\n\n  Prelude functions
  such as `take`, `!!` and `length` that use `Int` in Prelude\n  are shadowed in MixedTypesNumPrelude
  with more compatible/flexible versions.\n  Beware that `Data.List.length` clashes
  with `length` in MixedTypesNumPrelude.\n\n- Inferred types can be very large. Eg
  for `f a b c = sqrt (a + b * c + 1)` the inferred type is:\n\n    ```Haskell\n    f
  :: (CanSqrt (AddType (AddType t2 (MulType t3 t4)) Integer),\n        CanAddAsymmetric
  (AddType t2 (MulType t3 t4)) Integer,\n        CanAddAsymmetric t2 (MulType t3 t4),
  CanMulAsymmetric t3 t4) =>\n        t2\n        -> t3\n        -> t4\n        ->
  SqrtType (AddType (AddType t2 (MulType t3 t4)) Integer)\n    ```\n\n## 5. Credits\n\nThe
  idea of having numeric expressions in Haskell with types\nderived bottom-up was
  initially suggested and implemented by Pieter Collins.\nThis version is a fresh
  rewrite by Michal Konečný.\n"
license-name: BSD-3-Clause
