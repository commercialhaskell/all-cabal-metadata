all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.1.0
- 1.2.0
- 2.0.0
author: Jared Tobin
basic-deps:
  base: '>=4 && <6'
  kan-extensions: '>=5 && <6'
  mcmc-types: '>=1.0.1'
  mwc-probability: '>=1.0.1'
  pipes: '>=4 && <5'
  primitive: '>=0.6 && <1.0'
  transformers: '>=0.5 && <1.0'
changelog: ''
changelog-type: ''
description: |-
  The classic Metropolis algorithm.

  Wander around parameter space according to a simple spherical Gaussian
  distribution.

  Exports a 'mcmc' function that prints a trace to stdout, a 'chain' function
  for collecting results in-memory, and a 'metropolis' transition operator that
  can be used more generally.

  > import Numeric.MCMC.Metropolis
  >
  > rosenbrock :: [Double] -> Double
  > rosenbrock [x0, x1] = negate (5  *(x1 - x0 ^ 2) ^ 2 + 0.05 * (1 - x0) ^ 2)
  >
  > main :: IO ()
  > main = withSystemRandom . asGenIO $ mcmc 10000 1 [0, 0] rosenbrock
description-type: haddock
hash: 0d97141389077346326a684d929f31c31e6306c5f48e6b9197676366bd08049e
homepage: http://github.com/jtobin/mighty-metropolis
latest: 2.0.0
license-name: MIT
maintainer: jared@jtobin.ca
synopsis: The Metropolis algorithm.
test-bench-deps:
  base: '>=4 && <6'
  containers: '>=0.5 && <0.7'
  foldl: '>=0'
  hspec: '>=0'
  mcmc-types: '>=0'
  mighty-metropolis: '>=0'
  mwc-probability: '>=1.0.1'
  mwc-random: '>=0'
