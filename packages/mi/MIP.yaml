all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
author: Masahiro Sakai
basic-deps:
  OptDir: '>=0'
  aeson: '>=1.4.2.0'
  base: '>=4.12 && <5'
  bytestring: '>=0'
  bytestring-encoding: '>=0'
  case-insensitive: '>=0'
  containers: '>=0.5.0'
  data-default-class: '>=0'
  extended-reals: '>=0.1 && <1.0'
  filepath: '>=0'
  hashable: '>=1.2.7.0 && <1.6.0.0'
  intern: '>=0.9.1.2 && <1.0.0.0'
  lattices: '>=0'
  megaparsec: '>=7 && <10'
  mtl: '>=2.1.2 && <2.4'
  process: '>=1.1.0.2'
  scientific: '>=0'
  stm: '>=2.3'
  temporary: '>=1.2'
  text: '>=1.1.0.0'
  xml-conduit: '>=0'
  zlib: '>=0'
changelog: "# Changelog for MIP\n\n## Unreleased changes\n\n## 0.2.0.0 (2025-02-03)\n\n*
  `Problem` type\n  * Merge `varType` and `varBounds` fields into `varDomains` field
  \n  * Rename `varType` into `varTypes` and deprecate `varType`\n  * Represent `Expr
  c` as `Seq (Term c)` instead of `[Term c]`\n  * Change `Var` into `newtype`\n* Add
  `Tol` data type and `Eval` type class\n* Add `continuousVariables :: Problem c ->
  Set Var`\n* Add `binaryVariables :: Problem c -> Set Var`\n* File I/O\n  * Allow
  CRLF in parsers\n  * Fix to print the right-hand side of indicators as integers
  when possible in LP files\n  * Accept numbers other than 0 or 1 as the right-hand
  side of indicators in LP files\n  * Add `optMPSWriteObjSense` to `FileOptions`\n
  \ * Add `optMPSWriteObjName` to `FileOptions`\n* Solver supports\n  * Add omitted
  zeroes to solutions (thanks to @dpvanbalen)\n  * Allow passing arguments solver
  executables\n  * Support printemps solver\n  * Support HiGHS solver\n  * Add `solveTol`
  field to `SolveOptions`\n* Dependencies\n  * Require `base >=4.12` (i.e. GHC `>=8.6`)\n
  \ * Require `megaparsec >=7`\n  * Support `mtl-2.3`\n\n## 0.1.1.0\n\n* re-export
  the `Default` class from `Numeric.Optimization.MIP`.\n* fix to work with recent
  versions of CBC\n* generalizethe  type of `parseLPString` and `parseMPSString`\n\n##
  0.1.0.0\n\n* Separated from toysolver package\n  https://github.com/msakai/toysolver/tree/7096038ece0a5f860a951567689ef9a03ac0355d\n"
changelog-type: markdown
description: |
  # MIP

  [![Hackage](https://img.shields.io/hackage/v/MIP.svg)](https://hackage.haskell.org/package/MIP)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/MIP.svg)](https://packdeps.haskellers.com/feed?needle=MIP)
  [![License: BSD 3-Clause](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)

  Library for using Mixed Integer Programming (MIP) in Haskell.
  This library contains functions like:

  * Reading / Writing MIP problem files (e.g. `LP` file or `MPS` file),
  * Invokling MIP solvers like Gurobi, CPLEX, CBC, GLPK, lp_solve,
  * Reading solution files of those solvers.

  ## Examples

  ### Convert LP file into MPS file

  ```haskell
  import qualified Numeric.Optimization.MIP as MIP

  main :: IO ()
  main = do
    prob <- MIP.readFile MIP.def "samples/lp/test.lp"
    MIP.writeFile MIP.def "test.mps" prob
  ```

  ### Solve LP file using the CbC solver


  ```haskell
  import Control.Monad
  import qualified Data.Map.Lazy as Map
  import qualified Data.Text as T

  import qualified Numeric.Optimization.MIP as MIP
  import Numeric.Optimization.MIP.Solver

  main :: IO ()
  main = do
    prob <- MIP.readFile MIP.def "samples/lp/test.lp"
    sol <- solve cbc MIP.def{ solveTimeLimit = Just 10.0 } prob
    print $ MIP.solStatus sol
    putStrLn $ "Objective Value: " ++ show (MIP.solObjectiveValue sol)
    forM_ (MIP.variables prob) $ \v -> do
      putStrLn $ T.unpack (MIP.varName v) ++ " = " ++ show (MIP.solVariables sol Map.! v)
  ```

  ### Construcing a problem instance and solving it using the CbC solver

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  import Control.Monad
  import qualified Data.Map.Lazy as Map
  import qualified Data.Text as T

  import qualified Numeric.Optimization.MIP as MIP
  import Numeric.Optimization.MIP ((.<=.))
  import Numeric.Optimization.MIP.Solver

  -- Example from https://en.wikipedia.org/wiki/Integer_programming
  main :: IO ()
  main = do
    let [x, y] = map MIP.varExpr ["x", "y"]
        prob =
          MIP.def
          { MIP.objectiveFunction =
              MIP.def
              { MIP.objDir = MIP.OptMax
              , MIP.objExpr = y
              }
          , MIP.constraints =
              [ - x +   y .<=. 1
              , 3*x + 2*y .<=. 12
              , 2*x + 3*y .<=. 12
              ]
          , MIP.varDomains =
              Map.fromList
              [ ("x", (MIP.IntegerVariable, (0, MIP.PosInf)))
              , ("y", (MIP.IntegerVariable, (0, MIP.PosInf)))
              ]
          }

    sol <- solve cbc MIP.def{ solveTimeLimit = Just 10.0 } prob
    print $ MIP.solStatus sol
    putStrLn $ "Objective Value: " ++ show (MIP.solObjectiveValue sol)
    forM_ (MIP.variables prob) $ \v -> do
      putStrLn $ T.unpack (MIP.varName v) ++ " = " ++ show (MIP.solVariables sol Map.! v)
  ```
description-type: markdown
hash: badc69dc1a72453af332175f998a6ba91f03844dea1fd2d4841852e8dcee6ca3
homepage: https://github.com/msakai/haskell-MIP#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: masahiro.sakai@gmail.com
synopsis: Library for using Mixed Integer Programming (MIP)
test-bench-deps:
  HUnit: '>=0'
  MIP: '>=0'
  base: '>=4.12 && <5'
  containers: '>=0.5.0'
  data-default-class: '>=0'
  filepath: '>=0'
  lattices: '>=0'
  quickcheck-instances: '>=0.3.19 && <0.4'
  tasty: '>=0.10.1'
  tasty-hunit: '>=0.9 && <0.11'
  tasty-quickcheck: '>=0.8 && <0.12'
  tasty-th: '>=0'
  temporary: '>=0'
