homepage: ''
changelog-type: ''
hash: 11933c44b25426f3db96000d98bc5019a0b0cdaed17696786ac4bb0e2fc796fb
test-bench-deps: {}
maintainer: lennart@augustsson.net
synopsis: A compiler for a subset of Haskell
changelog: ''
basic-deps:
  base: '>=4.10 && <4.20'
  time: '>=1.1 && <1.15'
  process: '>=1.6 && <1.8'
  containers: '>=0.5 && <0.8'
  ghc-prim: '>=0.5 && <0.12'
  mtl: '>=2.0 && <2.4'
  deepseq: '>=1.1 && <1.6'
  pretty: '>=1.0 && <1.2'
  directory: '>=1.2 && <1.5'
all-versions:
- '0.8'
- 0.8.1.0
author: lennart@augustsson.net
latest: 0.8.1.0
description-type: markdown
description: "# Micro Haskell\nThis directory contains an implementation of a small
  subset of Haskell.\nIt uses combinators for the runtime execution.\n\nThe compiler
  can compile itself.\n\n## Compiling MicroHs\nThere are two different ways to compile
  MicroHs\n* Using GHC with standard `Prelude` and libraries. `Makefile` target `bin/gmhs`\n*
  Using the included combinator file and runtime.  `Makefile` target `bin/mhs`\n\nThese
  different ways of compiling need slightly different imports etc.\nTo accomodate
  this each source file is preprocessed for the first target.\nWhen compiling with
  GHC the string `--X` is removed from the source file.\nThis way anything special
  needed with GHC is just treated as comments by mhs.\n\nCompiling MicroHs is really
  best done using `make`, but there is also a `MicroHs.cabal` file\nfor use with `cabal`.
  \ This only builds what corresponds to the first target.\n\nAlso note that there
  is no need to have a Haskell compiler to run MicroHs.\nAll you need is a C compiler,
  and MicroHs can bootstrap, given the included combinator file.\n\nTo install `mhs`
  use `make install`.  You also need to set the environment variable `MHSDIR`.\n\n##
  Language\nThe language is an extended subset of Haskell-98.\n\nDifferences:\n *
  Top level definitions must have a type signature.\n * Type variables need an explicit
  `forall`.\n * Type variables without a kind annotation are assumed to have kind
  `Type`.\n * There is no prefix negation.\n * There is no `Read` class.\n * There
  is no deriving.\n * The `Prelude` has to be imported explicitly.\n * Polymorphic
  types are never inferred; use a type signature if you need it.\n * A module must
  have an export list.\n * Always enabled extension:\n   * ConstraintKinds\n   * EmptyDataDecls\n
  \  * ExtendedDefaultRules\n   * FlexibleContexts\n   * FlexibleInstance\n   * ForeignFunctionInterface\n
  \  * IncoherentInstances\n   * KindSignatures\n   * MonoLocalBinds\n   * MultiParamTypeClasses\n
  \  * NegativeLiterals\n   * NoMonomorphismRestriction\n   * OverlappingInstances\n
  \  * RankNTypes\n   * QualifiedDo\n   * ScopedTypeVariables\n   * StarIsType\n   *
  TupleSections\n   * TypeSynonymInstances\n   * UndecidableInstances\n   * UndecidableSuperClasses\n
  * In the works\n   * FunctionalDependencies\n   * ExistentialQuantification\n *
  `main` in the top module given to `mhs` serves at the program entry point.\n * Many
  things that should be an error (but which are mostly harmless) are not reported.\n
  * More differences that I don't remember right now.\n\n## Example\nThe file `Example.hs`
  contains the following:\n```Haskell\nmodule Example(main) where\nimport Prelude\n\nfac
  :: Int -> Int\nfac 0 = 1\nfac n = n * fac(n-1)\n\nmain :: IO ()\nmain = do\n  let\n
  \   rs = map fac [1,2,3,10]\n  putStrLn \"Some factorials\"\n  print rs\n```\n\nFirst,
  make sure the compiler is built by doing `make`.\nThen compile the file by `bin/mhs
  Example -oEx` which produces `Ex`.\nFinally, run the binary file by `./Ex`.\nThis
  should produce\n```\nSome factorials\n[1,2,6,3628800]\n```\n\n## Libraries\nThere
  are a number of libraries that have some of the standard Haskell functions.\nBut
  in general, the `Prelude` contains less.\n\n## Types\nThere are some primitive data
  types, e.g `Int`, `IO`, `Ptr`, and `Double`.\nThese are known by the runtime system
  and various primitive operations work on them.\nThe function type, `->`, is (of
  course) also built in.\n\nAll other types are defined with the language.  They are
  converted to lambda terms using\nthe Scott encoding.   The runtime system knows
  how lists and booleans are encoded.\n\n\n## Compiler\nThe compiler is written in
  Micro Haskell.\nIt takes a name of a module and compiles to a target (see below).\nThis
  module should contain the function `main` of type `IO ()` and\nit will be the entry
  point to the program.\n\n### Compiler flags\n* `-iDIR` add `DIR` to search path
  for modules\n* `-oFILE` output file.  If the `FILE` ends in `.comb` it will produce
  a textual combinator file.  If `FILE` ends in `.c` it will produce a C file with
  the combinators.  For all other `FILE` it will compiler the combinators together
  with the runtime system to produce a regular executable.\n* `-r` run directly (does
  not work if compiled with GHC)\n* `-v` be more verbose, flag can be repeated\n\nWith
  the `-v` flag the processing time for each module is reported.\nE.g.\n  ```\n  importing
  done MicroHs.Exp, 284ms (91 + 193)\n  ```\nwhich means that processing the module
  `MicroHs.Exp` took 284ms,\nwith parsing taking 91ms and typecheck&desugar taking
  193ms.\n\n### Environment variables\n* `MHSDIR` the directory where `lib/` and `src/`
  are expected to be.  Defaults to `./`.\n* `MHSCC` command use to compile C file
  to produce binaries.  Look at the source for more information.\n\n### Compiler modules\n\n*
  `Compile`, top level compiler.  Maintains a cache of already compiled modules.\n*
  `Desugar`, desugar full expressions to simple expressions.\n* `Exp`, simple expression
  type, combinator abstraction and optimization.\n* `Expr`, parsed expression type.\n*
  `Graph`, strongly connected component algorithm.\n* `Ident`, identifiers and related
  types.\n* `IdentMap`, map from identifiers to something.\n* `Interactive`, top level
  for the interactive REPL.\n* `Lex`, lexical analysis and indentation processing.\n*
  `Main`, the main module.  Decodes flags, compiles, and writes result.\n* `MakeCArray`,
  generate a C version of the combinator file.\n* `Parse`, parse and build and abstract
  syntax tree.\n* `StateIO`, state + IO monad.\n* `TCMonad`, type checking monad.\n*
  `Translate`, convert an expression tree to its value.\n* `TypeCheck`, type checker.\n\n##
  Interactive mode\nIf no module name is given the compiler enters interactive mode.\nYou
  can enter expressions to be evaluated, or top level definitions (including `import`).\nSimple
  line editing is available.\n\nAll definitions are saved in the file `Interactive.hs`
  and all input\nlines as saved in `.mhsi`.  The latter file is read on startup so\nthe
  command history is persisted.\n\nAvailable commands:\n\n* `:quit` Quit the interactive
  system\n* `:clear` Get back to start state\n* `:del STR` Delete all definitions
  that begin with `STR`\n* `:reload` Reload all modules\n* `expr` Evaluate expression.\n*
  `defn` Add definition (can also be an `import`)\n\n***NOTE*** When you `import`
  a module it is cached.\nIf the file changes and you import it again it will not
  reload.\nYou can use `:clear` (or `:reload`) to get back to an empty cache.\nThis
  is a bug.\n\n## Runtime\nThe runtime system is written in C and is in `src/runtime/eval.c`.\nIt
  uses combinators for handling variables, and has primitive operations\nfor built
  in types and for executing IO operations.\nThere is a also a simple mark-scan garbage
  collector.\nThe runtime system is written in a reasonably portable C code.\n\n###
  Runtime flags\nRuntime flags are given between the flags `+RTS` and `-RTS`.\nBetween
  those the runtime decodes the flags, everything else is available to\nthe running
  program.\n\n* `-HSIZE` set heap size to `SIZE` cells, can be suffixed by `k`, `M`,
  or `G`, default is `50M`\n* `-KSIZE` set stack size to `SIZE` entries, can be suffixed
  by `k`, `M`, or `G`, default is`100k`\n* `-rFILE` read combinators from `FILE`,
  instead of `out.comb`\n* `-v` be more verbose, flag can be repeated\n\nFor example,
  `bin/mhseval +RTS -H1M -v -RTS hello` runs `out.comb` and the program gets the argument
  `hello`,\nwhereas the runtime system sets the heap to 1M cells and is verbose.\n\n###
  FFI\nMicroHs supports calling C functions, but all such functions must be in a table
  in the runtime system.\n\n### Features\nThe runtime system can serialize and deserialize
  any expression\nand keep its graph structure (sharing and cycles).\nThe only exceptions
  to this are C pointers file handles, which cannot be serialized (except for `stdin`,
  `stdout`, and `stderr`).\n\n### Memory layout\nMemory allocation is based on cells.
  \ Each cell has room for two pointers (i.e., two words, typically 16 bytes),\nso
  it can represent an application node.  One bit is used to indicate if\nthe cell
  is an application or something else.  If it is something else one\nword is a tag
  indicating what it is, e.g., a combinator or an integer.\nThe second word is then
  used to store any payload, e.g., the number itself for an integer node.\n\nMemory
  allocation has a bitmap with one bit per cell.\nAllocating a cell consists of finding
  the next free cell using the bitmap,\nand then marking it as used.  The garbage
  collector first clears the bitmap\nand then (recursively) marks every used cell
  in the bitmap.\nThere is no explicit scan phase since that is baked into the allocation.\nAllocation
  is fast assuming the CPU has some kind of FindFirstSet instruction.\n\nIt is possible
  to use smaller cells by using 32 bit \"pointers\" instead of 64 bit pointers.\nThis
  has a performance penalty, though.\n\n### Portability\nThe C code for the evaluator
  does not use any special features, and should be\nportable to many platforms.  It
  has mostly been test with MacOS and Linux,\nand somewhat with Windows.\n\nThe code
  has only been tested on 64 bit platforms, so again, there are lurking problems\nwith
  other word sizes, but they should be easy to fix.\n\nThe `src/runtime/` directory
  contains configuration files for different platform.\nEdit `src/runtime/eval.c`
  to `#include` the right one.\n\n## Bootstrapping\nThe compiler can compile itself.
  \ To replace `bin/mhs` with a new version,\ndo `make bootstrap`.  This will recompile
  the compiler twice and compare\nthe outputs to make sure the new compiler still
  works.\n\n\n# FAQ\n* \n  * Q: When will it get _insert feature_?\n  * A: Maybe some
  time, maybe never.\n* \n  * Q: Why are the error messages so bad?\n  * A: Error
  messages are boring.\n* \n  * Q: Why is the so much source code?\n  * A: I wonder
  this myself.  7000+ lines of Haskell seems excessive.\n       2500+ lines of C is
  also more than I'd like for such a simple system.\n* \n  * Q: Why are the binaries
  so big?\n  * A: The combinator file is rather verbose.  The combinator file\n       for
  the compiler shrinks from 350kB to 75kB when compressed with upx.\n       The evaluator
  alone is about 70kB (26kB compressed with upx).\n"
license-name: Apache-2.0
