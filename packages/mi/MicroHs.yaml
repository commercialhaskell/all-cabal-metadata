all-versions:
- '0.8'
- 0.8.1.0
- 0.8.2.0
- 0.8.2.1
- 0.8.2.2
- 0.8.3.0
- 0.8.4.0
- 0.8.5.0
- 0.9.1.0
- 0.9.2.0
- 0.9.3.0
- 0.9.5.0
- 0.9.8.0
- 0.9.11.0
- 0.9.12.0
- 0.9.13.0
- 0.9.14.0
- 0.9.15.0
- 0.9.16.0
- 0.9.17.0
- 0.9.18.0
- 0.10.3.0
- 0.10.4.0
- 0.10.4.1
- 0.10.5.0
- 0.10.7.0
- 0.11.4.0
author: lennart@augustsson.net
basic-deps:
  base: '>=4.10 && <4.30'
  deepseq: '>=1.1 && <1.8'
  directory: '>=1.2 && <1.6'
  filepath: '>=1.1 && <1.8'
  ghc-prim: '>=0.5 && <0.15'
  haskeline: '>=0.8 && <0.10'
  process: '>=1.6 && <1.10'
  text: '>=2.0 && <2.5'
  time: '>=1.1 && <1.20'
changelog: ''
changelog-type: ''
description: "# Micro Haskell\nThis repository contains an implementation of an extended
  subset of Haskell.\nIt uses combinators for the runtime execution.\n\nThe runtime
  system has minimal dependencies, and can be compiled even for micro-controllers.\nThe
  `boards/` directory contains some samples, e.g., some sample code for an STM32F407G-DISC1
  board.\n\nThe compiler can compile itself.\n\n## Presentation\nYou can find my [presentation
  from the Haskell Symposium 2024](https://docs.google.com/presentation/d/1WsSiSwypNVTm0oZ3spRYF8gA59wyteOsIkPRjCUAZec/edit?usp=sharing),
  [video](https://m.youtube.com/watch?v=uMurx1a6Zck&t=36m).\nThere is also a short
  paper in `doc/hs2024.pdf`.\n\n## Compiling MicroHs\nThere are two different ways
  to compile MicroHs:\n* Using GHC. `Makefile` target `bin/gmhs`\n* Using the included
  combinator file and runtime.  `Makefile` target `bin/mhs`\n\nThese different ways
  of compiling need slightly different imports etc.\nThis happens by GHC looking in
  the `ghc/` subdirectory first for any extras/overrides.\n\nCompiling MicroHs is
  really best done using `make`, but there is also a `MicroHs.cabal` file\nfor use
  with `cabal`/`mcabal`.  This only builds what corresponds to the first target.\nDoing
  `cabal install` will install the compiler.\nNote that `mhs` built with ghc does
  not have all the functionality.\n\nAlso note that there is no need to have a Haskell
  compiler to run MicroHs.\nAll you need is a C compiler, and MicroHs can bootstrap,
  given the included combinator file.\n\nTo install `mhs` use `make minstall`.  This
  will install `mhs` in `~/.mcabal` in the same\nway as `mcabal` (MicroCabal) would
  have.  It will install a compiler binary and a compiled base package.\nYou will
  have to add `~/.mcabal/bin` to your `PATH`.\n\nAlternatively, to install `mhs` use
  `make oldinstall`.  By default this copies the files to `/usr/local`,\nbut this
  can be overridden by `make PREFIX=dir oldinstall`.\nYou also need to set the environment
  variable `MHSDIR`.\n\nTo compile on Windows make sure `cl` is in the path, and then
  use `nmake` with `Makefile.windows`.\n\nThe compiler can also be used with emscripten
  to produce JavaScript/WASM.\n\n## Language\nThe language is an extended subset of
  Haskell-2010.\n\nDifferences:\n * There is only deriving for `Bounded`, `Enum`,
  `Eq`, `Ord`, `Show`, and `Typeable`.\n * Kind variables need an explicit `forall`.\n
  * Always enabled extension:\n   * BangPatterns\n   * BinaryLiterals\n   * ConstraintKinds\n
  \  * DefaultSignatures\n   * DoAndIfThenElse\n   * DuplicateRecordFields\n   * EmptyCase\n
  \  * EmptyDataDecls\n   * ExistentialQuantification\n   * ExplicitNamespaces\n   *
  ExtendedDefaultRules\n   * FlexibleContexts\n   * FlexibleInstance\n   * ForeignFunctionInterface\n
  \  * FunctionalDependencies\n   * GADTs\n   * GADTsyntax\n   * ImportShadowing\n
  \  * ImportQualifiedPost\n   * IncoherentInstances\n   * KindSignatures\n   * LambdaCase\n
  \  * MonoLocalBinds\n   * MultilineStrings\n   * MultiParamTypeClasses\n   * MultiWayIf\n
  \  * NamedDefaults\n   * NamedFieldPuns\n   * NegativeLiterals\n   * NoMonomorphismRestriction\n
  \  * NoStarIsType\n   * NumericUnderscores\n   * OrPatterns\n   * OverlappingInstances\n
  \  * OverloadedRecordDot\n   * OverloadedRecordUpdate\n   * OverloadedStrings\n
  \  * PatternSynonyms\n   * PolyKinds\n   * PolymorphicComponents\n   * RankNTypes\n
  \  * RecordWildCards\n   * QualifiedDo\n   * ScopedTypeVariables\n   * StandaloneDeriving\n
  \  * StandaloneKindSignatures\n   * TupleSections (only pairs right now)\n   * TypeApplications\n
  \  * TypeLits\n   * TypeSynonymInstances\n   * UndecidableInstances\n   * UndecidableSuperClasses\n
  \  * ViewPatterns\n * The only extension that is not always on is `CPP`.\n * `main`
  in the top module given to `mhs` serves at the program entry point.\n * Many things
  that should be an error (but which are mostly harmless) are not reported.\n * Text
  file I/O uses UTF8, but the source code does not allow Unicode.\n * The `BangPatterns`
  extension is parsed, but only effective at the a top level `let`/`where`.\n * More
  differences that I don't remember right now.\n\nMutually recursive modules are allowed
  the same way as with GHC, using `.hs-boot` files. \n\n## Example\nThe file `Example.hs`
  contains the following:\n```Haskell\nmodule Example(main) where\n\nfac :: Int ->
  Int\nfac 0 = 1\nfac n = n * fac(n-1)\n\nmain :: IO ()\nmain = do\n  let rs = map
  fac [1,2,3,10]\n  putStrLn \"Some factorials\"\n  print rs\n```\n\nFirst, make sure
  the compiler is built by doing `make`.\nThen compile the file by `bin/mhs Example
  -oEx` which produces `Ex`.\nFinally, run the binary file by `./Ex`.\nThis should
  produce\n```\nSome factorials\n[1,2,6,3628800]\n```\n\n## Libraries\nThe `Prelude`
  contains the functions from the Haskell Report and a few extensions,\nwith the notable
  exception that `Foldable` and `Traversable` are not part of the `Prelude`.\nThey
  can be imported separately, though.\n\n## Types\nThere are some primitive data types,
  e.g `Int`, `IO`, `Ptr`, and `Double`.\nThese are known by the runtime system and
  various primitive operations work on them.\nThe function type, `->`, is (of course)
  also built in.\n\nAll other types are defined with the language.  They are converted
  to lambda terms using\nan encoding.\nFor types with few constructors (< 5) it uses
  Scott encoding, otherwise it is a pair with\nan integer tag and a tuple (Scott encoded)
  with all arguments.\nThe runtime system knows how lists and booleans are encoded.\n\n\n##
  Compiler\nThe compiler is written in Micro Haskell.\nIt takes a name of a module
  (or a file name) and compiles to a target (see below).\nThis module should contain
  the function `main` of type `IO ()` and\nit will be the entry point to the program.\n\n###
  Compiler flags\n* `--version` show version number\n* `-i` set module search path
  to empty\n* `-iDIR` append `DIR` to module search path\n* `-oFILE` output file.
  \ If the `FILE` ends in `.comb` it will produce a textual combinator file.  If `FILE`
  ends in `.c` it will produce a C file with the combinators.  For all other `FILE`
  it will compile the combinators together with the runtime system to produce a regular
  executable.\n* `-r` run directly\n* `-v` be more verbose, flag can be repeated\n*
  `-CW` write compilation cache to `.mhscache` at the end of compilation\n* `-CR`
  read compilation cache from `.mhscache` at the start of compilation\n* `-C` short
  for `-CW` and `-CR`\n* `-T` generate dynamic function usage statistics\n* `-z` compress
  combinator code generated in the `.c` file\n* `-l` show every time a module is loaded\n*
  `-s` show compilation speed in lines/s\n* `-XCPP` run `cpphs` on source files\n*
  `-Dxxx` passed to `cpphs`\n* `-Ixxx` passed to `cpphs`\n* `-tTARGET` select target\n*
  `-a` set package search path to empty\n* `-aDIR` prepend `DIR` to package search
  path\n* `-PPKG` create package `PKG`\n* `-L[FILE]` list all modules in a package\n*
  `-Q FILE [DIR]` install package\n*  `--` marks end of compiler arguments\n\nWith
  the `-v` flag the processing time for each module is reported.\nE.g.\n  ```\n  importing
  done MicroHs.Exp, 284ms (91 + 193)\n  ```\nwhich means that processing the module
  `MicroHs.Exp` took 284ms,\nwith parsing taking 91ms and typecheck&desugar taking
  193ms.\n\nWith the `-C` flag the compiler writes out its internal cache of compiled
  modules to the file `.mhscache`\nat the end of compilation.  At startup it reads
  this file if it exists, and then validates the contents\nby an MD5 checksum for
  all the files in the cache.\nThis can make compilation much faster since the compiler
  will not parse and typecheck a module if it is in\nthe cache.\nDo **NOT** use `-C`
  when you are changing the compiler itself; if the cached data types change the compiler
  will probably just crash.\n\n### Targets\nThe configuration file `targets.conf`
  (in the installation directory) defines how to compile for\ndifferent targets.  As
  distributed it contains the targets `default` and `emscripten`.\nThe first is the
  normal target to run on the host.\nThe `emscripten` target uses `emcc` to generate
  JavaScript/WASM.\nIf you have `emcc` and `node` installed you can do\n  ```\n  mhs
  -temscripten Example -oout.js; node out.js\n  ```\nto compile and run the JavaScript.
  \ The generated JavaScript file has some regular JavaScript,\nand also the WASM
  code embedded as a blob.  Running via JavaScript/WASM is almost as fast as running
  natively.\n\n### Environment variables\n* `MHSDIR` the directory where `lib/` and
  `src/` are expected to be.  Defaults to `./`.\n* `MHSCC` command use to compile
  C file to produce binaries.  Look at the source for more information.\n* `MHSCPPHS`
  command to use with `-XCPP` flag.  Defaults to `cpphs`.\n* `MHSCONF` which runtime
  to use, defaults to `unix-32/64` depending on your host's word size\n* `MHSEXTRACCFLAGS`
  extra flags passed to the C compiler\n\n### Compiler modules\n\n* `Abstract`, combinator
  bracket abstraction and optimization.\n* `Compile`, top level compiler.  Maintains
  a cache of already compiled modules.\n* `CompileCache`, cache for compiled modules.\n*
  `Deriving`, do deriving for various type classes.\n* `Desugar`, desugar full expressions
  to simple expressions.\n* `EncodeData`, data type encoding.\n* `Exp`, simple expression
  type.\n* `ExpPrint`, serialize `Exp` for the runtime system.\n* `Expr`, parsed expression
  type.\n* `FFI`, generate C wrappers for FFI.\n* `Fixity`, resolve operator fixities.\n*
  `Flags`, compiler flags.\n* `Graph`, strongly connected component algorithm.\n*
  `Ident`, identifiers and related types.\n* `IdentMap`, map from identifiers to something.\n*
  `Interactive`, top level for the interactive REPL.\n* `Lex`, lexical analysis and
  indentation processing.\n* `Main`, the main module.  Decodes flags, compiles, and
  writes result.\n* `MakeCArray`, generate a C version of the combinator file.\n*
  `Parse`, parse and build and abstract syntax tree.\n* `StateIO`, state + IO monad.\n*
  `SymTab`, symbol table manipulation.\n* `TCMonad`, type checking monad.\n* `Translate`,
  convert an expression tree to its value.\n* `TypeCheck`, type checker.\n\n## Interactive
  mode\nIf no module name is given the compiler enters interactive mode.\nYou can
  enter expressions to be evaluated, or top level definitions (including `import`).\nSimple
  line editing is available.\n\nAll definitions are saved in the file `Interactive.hs`
  and all input\nlines as saved in `.mhsi`.  The latter file is read on startup so\nthe
  command history is persisted.\n\nAvailable commands:\n\n* `:quit` Quit the interactive
  system\n* `:clear` Get back to start state\n* `:del STR` Delete all definitions
  that begin with `STR`\n* `:reload` Reload all modules\n* `:type EXPR` Show type
  of `EXPR`\n* `:kind TYPE` Show kind of `TYPE`\n* `expr` Evaluate expression.\n*
  `defn` Add definition (can also be an `import`)\n\n## MHS as a cross compiler\nWhen
  `mhs` is built, targets.conf is generated. It will look something like this:\n```ini\n[default]\ncc
  = \"cc\"\nconf = \"unix-64\"\n```\n\nYou can add other targets to this file, changing
  which compiler command is used and which runtime is\nselected and then use the `-t`
  argument to select which target you would like.\n\n## Packages\nTo avoid compiling
  everything from source all the time there is a notion of a precompiled package.\nA
  package is simply a set of modules that are compiled together and that can then
  be installed in\na known place (typically `~/.mcabal/mhs-VERSION/packages/`).\nPackages
  can depend on already installed packages.\n\nThere is a search path for installed
  packages, controlled by the `-a` flag.\n\nThere is no need for any extra flags to
  `mhs` to use installed packages, they are all visible at all times.\nWhen compiling
  to a binary only the used parts of a package will be included in the binary.\n\n###
  Compiling a package\nTo compile a package use the command `mhs -Ppackage-name.pkg
  modules...` where `modules...`\nare all the modules you wish to expose from the
  package.  If other modules are needed they will\nautomatically be included in the
  package.\nYou typically also want to use the `-o` flag to give the package a sensible
  name.\n\n### Installing a package\nTo install a package use the command `mhs -Q
  package-name.pkg [install-dir]`.\nIf the `install-dir` is left out the package is
  installed in the default place.\n\n### MicroCabal (`mcabal`)\nNormally a package
  is downloaded from hackage and it will have a `.cabal` file\nthat describes the
  package contents.  To install a downloaded package simply\ndo `mcabal install`.
  \ The `mcabal` program is included in the MicroHs download.\nYou can also do `mcabal
  install PKG` to download an install a package.\n\n### Installed package organization\nThe
  packages are typically installed in `~/.mcabal/` and it has the following\nlayout:\n*
  `.mcabal/bin/` installed binaries, initially `mhs`, `cpphs`, and `mcabal`\n* `.mcabal/mhs-VER/`
  installed files for the given `mhs` version\n* `.mcabal/mhs-VER/packages/` for each
  library package a `PKG.pkg` file (the binary blob for the package)\n  and also (maybe)
  a directory `PKG/` that contains `data/`, `include/`, and `cbits/` for the package.\n*
  `.mcabal/.../MODULE.txt` a file for each installed module, it contains the name
  of the package the contains that module.\n\nFor example, after installing `mhs`
  version 0.10.5.0 we will have something like this:\n```\n.mcabal/\n        bin/cpphs\n
  \           mcabal\n            mhs\n        mhs-0.10.5.0/Control/Applicative.txt
  \  -- contains \"base-0.10.5.0.pkg\"\n                             ...\n                             Monad/Fail.txt
  \   -- contains \"base-0.10.5.0.pkg\"\n                                   ...\n
  \                            ...\n                     Data/\n                     ...\n
  \                    Prelude.txt               -- contains \"base-0.10.5.0.pkg\"\n
  \       packages/base-0.10.5.0.pkg\n                 mhs-0.10.5.0/data/src/runtime/eval.c\n
  \                                              ...\n```\n\n\nA (maybe) short-coming
  of the package system is that there can only be one version of a\npackage installed
  at a time.  If you need multiple version, you have to use different directories
  for them\nand use `-a` to control it.  There is absolutely no checks for consistency
  among packages.\nThere is also no compatibility between packages compiled with different
  versions of the compiler.\n\n### Hackage\nHackage is full of great packages, unfortunately
  most of them contain some GHC specific code.\nThere is a handful packages that works
  with mhs out of the box, or have been converted:\n* `containers`\n* `cpphs`\n* `hscolour`\n*
  `mtl` changes not merged yet, use [github.com/augustss/mtl](https://github.com/augustss/mtl)\n*
  `parsec` changes not merged yet, use [github.com/augustss/aprsec](https://github.com/augustss/parsec)\n*
  `polyparse`\n* `pretty`\n* `time`\n* `transformers`\n\nSome of these might not have
  be released on hackage yet, but the github repo works.\n\nContributions to this
  list are very welcome.\n\n## Files\nThere is a number of subdirectories:\n* `Tools/`
  a few useful tools for compressions etc.\n* `bin/` executables are put here\n* `generated/`
  this contains the (machine generated) combinator file for the compiler.\n* `lib/`
  this contains the `Prelude` and other base library file.\n* `src/MicroHs/` the compiler
  source\n* `src/runtime/` the runtime source\n* `tests/` some tests\n\n## Runtime\nThe
  runtime system is written in C and is in `src/runtime/eval.c`.\nIt uses combinators
  for handling variables, and has primitive operations\nfor built in types and for
  executing IO operations.\nThere is a also a simple mark-scan garbage collector.\nThe
  runtime system is written in a reasonably portable C code.\n\n### Runtime flags\nRuntime
  flags are given between the flags `+RTS` and `-RTS`.\nBetween those the runtime
  decodes the flags, everything else is available to\nthe running program.\n\n* `-HSIZE`
  set heap size to `SIZE` cells, can be suffixed by `k`, `M`, or `G`, default is `50M`\n*
  `-KSIZE` set stack size to `SIZE` entries, can be suffixed by `k`, `M`, or `G`,
  default is`100k`\n* `-rFILE` read combinators from `FILE`, instead of `out.comb`\n*
  `-v` be more verbose, flag can be repeated\n* `-T` generate profiling stats (if
  compiled with `-T` as well)\n* `-oFILE` just read the input, run garbage collection,
  and write out the resulting graph to file.\n\nFor example, `bin/mhseval +RTS -H1M
  -v -RTS hello` runs `out.comb` and the program gets the argument `hello`,\nwhereas
  the runtime system sets the heap to 1M cells and is verbose.\n\n### FFI\nMicroHs
  supports calling C functions.\nWhen running the program directly (using `-r`) or
  when generating a `.comb` file only the functions in the table built\ninto `src/runtime/eval.c`
  can be used.  When generating a `.c` file or an executable any C function can be
  called.\n\nThere is a lot of missing FFI functionality compared to GHC.\n\n### Records\nMicroHs
  implements the record dot extensions.\nSo accessing a field `a` in record `r` is
  written `r.a`, as well as the usual `a r`.\nThe former is overloaded and can access
  any `a` field, whereas the latter is the usual monomorphic field selector.\nUpdating
  a field has the usual Haskell syntax `r{ a = e }`, but the type is overloaded so
  this can update the `a` field in any record.\nThe typeclasses `HasField` and `SetField`
  capture this.\n`HasField \"name\" rec ty` expresses that the record type `rec` has
  a field `name` with type `ty` that can be extracted with `getField`.\n`SetField
  \"name\" rec ty` expresses that the record type `rec` has a field `name` with type
  `ty` that can be set `setField`.\n\nRecord updates can also update nested fields,
  e.g., `r{ a.b.c = e }`.  Note that this will not easily work in GHC, since GHC does
  not\nfully implement `OverloadedRecordUpdate`.  When GHC decides how to do it, MicroHs
  will follow suit.\n\nNote that record updates cannot change the type of polymorphic
  fields.\n\n### Serialization\nThe runtime system can serialize and deserialize any
  expression\nand keep its graph structure (sharing and cycles).\nThe only exceptions
  to this are C pointers (e.g., file handles),\nwhich cannot be serialized (except
  for `stdin`, `stdout`, and `stderr`).\n\n### Memory layout\nMemory allocation is
  based on cells.  Each cell has room for two pointers (i.e., two words, typically
  16 bytes),\nso it can represent an application node.  One bit is used to indicate
  if\nthe cell is an application or something else.  If it is something else one\nword
  is a tag indicating what it is, e.g., a combinator or an integer.\nThe second word
  is then used to store any payload, e.g., the number itself for an integer node.\n\nMemory
  allocation has a bitmap with one bit per cell.\nAllocating a cell consists of finding
  the next free cell using the bitmap,\nand then marking it as used.  The garbage
  collector first clears the bitmap\nand then (recursively) marks every used cell
  in the bitmap.\nThere is no explicit scan phase since that is baked into the allocation.\nAllocation
  is fast assuming the CPU has some kind of FindFirstSet instruction.\n\nIt is possible
  to use smaller cells by using 32 bit \"pointers\" instead of 64 bit pointers.\nThis
  has a performance penalty, though.\n\n### Portability\nThe C code for the evaluator
  does not use any special features, and should be\nportable to many platforms.  It
  has mostly been tested with MacOS and Linux,\nand somewhat with Windows.\n\nThe
  code has been tested on 64- and 32-bit little-endian platforms.\n\nThe `src/runtime/`
  directory contains configuration files for different platform.\nUse the appropriate
  `src/runtime/eval-`*platform*`.c`.\n\n## Bootstrapping\nThe compiler can compile
  itself.  To replace `bin/mhs` with a new version,\ndo `make bootstrap`.  This will
  recompile the compiler twice and compare\nthe outputs to make sure the new compiler
  still works.\n\n### Bootstrapping with Hugs\nIt is also possible to bootstrap MicroHs
  using Hugs.  That means that\nMicroHs can be built from scratch in the sense of
  [bootstrappable.org](https://bootstrappable.org/).\nTo compile with Hugs you need
  [a slightly patched version of Hugs](https://github.com/augustss/hugs98-plus-Sep2006)\nand
  also the [hugs branch of MicroHs](https://github.com/augustss/MicroHs/tree/hugs).\n\n##
  Using GMP for `Integer`\nThe default implementation of the `Integer` type is written
  is Haskell and is quite slow.\nIt is possible to use GMP [GNU Multi Precision](https://gmplib.org/)
  instead.\nTo use GMP you need to uncomment the first few line in the `Makefile`,
  and also\nmodify the definition that directs the C compiler where to find GMP.\n\n***NOTE***
  To switch between using and not using GMP you need to do `make clean`.\nYou might
  also need to do `make USECPPHS=cpphs bootstrapcpphs` if there are complaints.\n\n#
  Preprocessor\nSadly, compiling a lot of Haskell packages needs the C preprocessor.\nTo
  this end, the distribution contains the combinator code for `cpphs`.\nDoing `make
  bin/cpphs` will create the binary for the preprocessor.\n\nTo bootstrap `cpphs`
  you can do `make bootstrapcpphs`.\nThis assumes that you have `git` to download
  the needed packages.\nAt the moment, the downloaded packages are forks of the original
  to\nmake it compile with `mhs`.\n\nTo identify that it is MicroHs that is the compiler
  it defines the symbol `__MHS__`.\n\n# FAQ\n* \n  * Q: When will it get _insert feature_?\n
  \ * A: Maybe some time, maybe never.  But it doesn't hurt to ask for it.\n* \n  *
  Q: Why are the error messages so bad?\n  * A: Error messages are boring.\n* \n  *
  Q: Why is the so much source code?\n  * A: I wonder this myself.  10000+ lines of
  Haskell seems excessive.\n       6000+ lines of C is also more than I'd like for
  such a simple system.\n"
description-type: markdown
hash: 8fa6004747babd6decfe448564e70425e15ddb45105fd4c007e5c2ef8fa5b95e
homepage: ''
latest: 0.11.4.0
license-name: Apache-2.0
maintainer: lennart@augustsson.net
synopsis: A small compiler for Haskell
test-bench-deps: {}
