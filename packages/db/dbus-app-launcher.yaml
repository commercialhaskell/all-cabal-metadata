all-versions:
- 0.1.0.0
- 0.1.1.0
author: DaniÃ«l van de Giessen
basic-deps:
  base: '>=4.12 && <5'
  containers: '>=0.6 && <0.7'
  dbus: '>=1.3 && <1.4'
  extra: '>=1.7 && <1.8'
  regex-tdfa: '>=1.3 && <1.4'
  shellwords: '>=0.1.3.2 && <0.2'
  unix: '>=2.8 && <2.9'
changelog: |
  # Changelog

  ## v0.1.1.0

  Added shell-style parsing of the command to make it easier to pass arguments and
  environment variables.

  ## v0.1.0.0

  Initial version.
changelog-type: markdown
description: |
  # dbus-app-launcher

  A simple service that allows executing a program via D-Bus.

  Note: Allowing D-Bus clients to execute arbitrary programs may pose a security
  risk. Use carefully.

  ## Installation

  There is a number of ways to install. Choose one and follow the given steps.

  The following installation options provide a complete package which already
  include a D-Bus service configuration file, so require no extra steps after
  installing:

  - Install from the Arch User Repository (AUR):
    [`dbus-app-launcher`](https://aur.archlinux.org/packages/dbus-app-launcher)

  The following installation options only provide you with the executable and
  leave it up to you to set up the D-Bus service configuration file, for which
  you will need to follow the steps in the section below:

  - Download a static binary from the
    [releases page](https://github.com/DvdGiessen/dbus-app-launcher/releases).
  - Install from Hackage:
    [`dbus-app-launcher`](https://hackage.haskell.org/package/dbus-app-launcher)

  If none of the above options work for you, you can also follow the instructions
  below to build the executable from source yourself.

  ### Building from source

  To build the code, you will need Haskell and the `stack` command line utility.
  Get them [here](https://docs.haskellstack.org/en/stable/).

  To build and install, run `stack install`. This will build the code and copy the
  executable to `~/.local/bin`.

  Next, follow the steps to set up the D-Bus service.

  ### Build a static executable using Docker

  To build a static executable (the same as made available on the releases page),
  you can use the following Docker command:

  ```sh
  docker run -v $PWD:/dbus-app-launcher --rm benz0li/ghc-musl:9.8.4 sh -c "cd /dbus-app-launcher && exec stack --allow-different-user build --no-install-ghc --system-ghc --ghc-options='-static -optl-static'"
  ```

  This will start a [`ghc-musl`](https://github.com/benz0li/ghc-musl) container,
  mount the current directory (where you've checked out the code) into it, and
  build a statically linked version of the service which should be able to run on
  any system with the same CPU architecture.

  When the build succeeded, the executable can be found at the following path:
  `.stack-work/dist/x86_64-linux/ghc-9.8.4/build/dbus-app-launcher/dbus-app-launcher`

  ### Setting up the D-Bus service configuration

  To set up a D-Bus service description that will automatically launch the new
  service whenever it is accessed, create the following file:

  `~/.local/share/dbus-1/services/nl.dvdgiessen.dbusapplauncher.service`

  ```ini
  [D-BUS Service]
  Name=nl.dvdgiessen.dbusapplauncher
  Exec=/home/USERNAME/.local/bin/dbus-app-launcher
  ```

  Replace the path in `Exec=` with the actual location of the executable.

  ## Using the D-Bus service from your own code

  The service currently exports one interface, `Exec`. Calling any of the methods
  of this interface will start the program using the `exec()` syscall.

  - Service name: `nl.dvdgiessen.dbusapplauncher`
  - Object path: `/nl/dvdgiessen/DBusAppLauncher`
  - Interface: `nl.dvdgiessen.dbusapplauncher.Exec`
  - Methods:
    - `Cmd(String cmd)`
    - `CmdArgs(String cmd, List<String> args)`
    - `CmdArgsEnv(String cmd, List<String> args, Map<String,String> env)`

  ## Issues and contributing

  This is my first Haskell program, so there's probably plenty that could be
  improved upon. Feel free to fork it or open pull requests if you find a bug.

  I might add more functionality in the future, for example for running programs
  and returning their exit code and stdout/stderr output. Currently my own use
  case for this program is for starting applications from KWin scripts (see
  [kwin-toggleterminal](https://github.com/DvdGiessen/kwin-toggleterminal) if
  you're interested in that sort of thing), so adding more functionality probably
  won't be a priority until I have a need for it myself.

  ## License

  `dbus-app-launcher` is freely distributable under the terms of the
  [MIT license](https://github.com/DvdGiessen/dbus-app-launcher/blob/master/LICENSE).
description-type: markdown
hash: 34df40e526d5b970c52e1368867ac141259f60718e47790c0c3692a140d18999
homepage: https://github.com/DvdGiessen/dbus-app-launcher#readme
latest: 0.1.1.0
license-name: MIT
maintainer: daniel@dvdgiessen.nl
synopsis: Simple app launcher for D-Bus
test-bench-deps: {}
