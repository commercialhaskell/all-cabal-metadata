homepage: https://github.com/rblaze/haskell-dbus#readme
changelog-type: ''
hash: ffe974e90a1d642598faea3803828bb83f887c0433853608da5686ae146f0251
test-bench-deps:
  cereal: <0.6
  bytestring: <0.12
  extra: <1.8
  unix: <2.8
  base: ==4.*
  text: <2.1
  filepath: <1.5
  criterion: <1.7
  process: <1.7
  network: '>=3.1.2.1 && <3.2'
  parsec: <3.2
  containers: <0.7
  tasty-quickcheck: <0.11
  tasty-hunit: <0.11
  dbus: -any
  transformers: <0.6
  random: <1.3
  tasty: <1.5
  QuickCheck: <2.15
  resourcet: <1.4
  vector: <0.14
  directory: <1.4
maintainer: Andrey Sverdlichenko <blaze@ruddy.ru>
synopsis: A client library for the D-Bus IPC system.
changelog: ''
basic-deps:
  exceptions: <0.11
  cereal: <0.6
  bytestring: <0.12
  unix: <2.8
  split: <0.3
  xml-conduit: '>=1.9.0.0 && <1.10.0.0'
  base: '>=4.16 && <5'
  text: <2.1
  filepath: <1.5
  network: '>=3.1.2.1 && <3.2'
  parsec: <3.2
  conduit: '>=1.3.0 && <1.4'
  containers: <0.7
  lens: <5.3
  xml-types: <0.4
  transformers: <0.6
  random: <1.3
  deepseq: <1.5
  th-lift: <0.9
  template-haskell: '>=2.18 && <2.20'
  vector: <0.14
all-versions:
- '0.10'
- 0.10.1
- 0.10.2
- 0.10.3
- 0.10.4
- 0.10.5
- 0.10.6
- 0.10.7
- 0.10.8
- 0.10.9
- 0.10.9.1
- 0.10.9.2
- 0.10.10
- 0.10.11
- 0.10.12
- 0.10.13
- 0.10.14
- 0.10.15
- 1.0.0
- 1.0.1
- 1.1.0
- 1.1.1
- 1.2.1
- 1.2.2
- 1.2.3
- 1.2.4
- 1.2.5
- 1.2.6
- 1.2.7
- 1.2.8
- 1.2.9
- 1.2.10
- 1.2.11
- 1.2.12
- 1.2.13
- 1.2.14
- 1.2.15.1
- 1.2.16
- 1.2.17
- 1.2.18
- 1.2.19
- 1.2.21
- 1.2.22
- 1.2.23
- 1.2.24
- 1.2.25
- 1.2.26
- 1.2.27
author: John Millikin <john@john-millikin.com>
latest: 1.2.27
description-type: haddock
description: |-
  D-Bus is a simple, message-based protocol for inter-process
  communication, which allows applications to interact with other parts of
  the machine and the user's session using remote procedure calls.

  D-Bus is a essential part of the modern Linux desktop, where it replaces
  earlier protocols such as CORBA and DCOP.

  This library is an implementation of the D-Bus protocol in Haskell. It
  can be used to add D-Bus support to Haskell applications, without the
  awkward interfaces common to foreign bindings.

  Example: connect to the session bus, and get a list of active names.

  @
  &#x7b;-\# LANGUAGE OverloadedStrings \#-&#x7d;

  import Data.List (sort)
  import DBus
  import DBus.Client

  main = do
  &#x20;   client <- connectSession
  &#x20;
  &#x20;   -- Request a list of connected clients from the bus
  &#x20;   reply <- call_ client (methodCall \"\/org\/freedesktop\/DBus\" \"org.freedesktop.DBus\" \"ListNames\")
  &#x20;       &#x7b; methodCallDestination = Just \"org.freedesktop.DBus\"
  &#x20;       &#x7d;
  &#x20;
  &#x20;   -- org.freedesktop.DBus.ListNames() returns a single value, which is
  &#x20;   -- a list of names (here represented as [String])
  &#x20;   let Just names = fromVariant (methodReturnBody reply !! 0)
  &#x20;
  &#x20;   -- Print each name on a line, sorted so reserved names are below
  &#x20;   -- temporary names.
  &#x20;   mapM_ putStrLn (sort names)
  @

  >$ ghc --make list-names.hs
  >$ ./list-names
  >:1.0
  >:1.1
  >:1.10
  >:1.106
  >:1.109
  >:1.110
  >ca.desrt.dconf
  >org.freedesktop.DBus
  >org.freedesktop.Notifications
  >org.freedesktop.secrets
  >org.gnome.ScreenSaver
license-name: Apache-2.0
