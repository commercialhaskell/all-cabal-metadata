all-versions:
- 0.1.0.0
- 0.1.0.2
- 0.1.2.0
author: Ilya Portnov
basic-deps:
  base: '>=4.7 && <5'
  cmdargs: '>=0'
  containers: '>=0.5'
  dbus: '>=0.10'
  dbus-th: '>=0.1.2.0'
  template-haskell: '>=2.9'
changelog: ''
changelog-type: ''
description: "\nThis package is aimed to simplify writing bindings for DBus interfaces
  by using\nDBus introspection and dbus-th package.\n\nThe synopsis is:\n\ndbus-introspect-hs
  [OPTIONS] [SERVICE.NAME] [/PATH/TO/OBJECT] [INTERFACE.NAME]\n  Introspect specified
  DBus object/interface and generate TemplateHaskell\n  source for calling all functions
  from Haskell\n\nCommon flags:\n  -m --module=NAME --modulename  Haskell module name\n
  \ -o --output=FILE --outputfile  Output file\n  -s --system                    Use
  system bus instead of sesion bus\n  -d --dynamic --dynamicobject   If specified
  - generated functions will get\n                                 object path as
  2nd argument\n\nIf service name is not provided, the program will generate bindings
  for all\nservices available (Warning: you can receive a very large file). If object
  \npath is not provided, the program will generate bindings for all objects\nprovided
  by specified service. Similarly, if interface name is not proviced,\nthe program
  will generate bindings for all interfaces provided by speciifed\nobject.\n\nIf -d
  option is specified, the program will generate bindings by using\n\"interface'\"
  instead of \"interface\"; so, all generated functions will get\nobject path as their
  second argument.\n\nFor example, one may run\n\n    $ dbus-introspect-hs --dynamic
  --session -m Session \\\n      org.freedesktop.login1 /org/freedesktop/login1/session/self
  \\\n      org.freedesktop.login1.Session\n\nand receive:\n\n    {-# LANGUAGE TemplateHaskell
  #-}\n    module Session where\n\n    import DBus.TH\n    import DBus.TH.Introspection\n\n
  \   -- Service BusName \"org.freedesktop.login1\"\n    -- Interface org.freedesktop.login1.Session\n
  \   interface' \"org.freedesktop.login1\" Nothing \"org.freedesktop.login1.Session\"
  Nothing [\n        \"Terminate\" =:: Return ''(),\n        \"Activate\" =:: Return
  ''(),\n        \"Lock\" =:: Return ''(),\n        \"Unlock\" =:: Return ''(),\n
  \       \"SetIdleHint\" =:: ''Bool :-> Return ''(),\n        \"Kill\" =:: ''String
  :-> ''Int32 :-> Return ''(),\n        \"TakeControl\" =:: ''Bool :-> Return ''(),\n
  \       \"ReleaseControl\" =:: Return ''(),\n        -- Error: method TakeDevice:
  Method TakeDevice has more than one out parameter,\n        \"ReleaseDevice\" =::
  ''Word32 :-> ''Word32 :-> Return ''(),\n        \"PauseDeviceComplete\" =:: ''Word32
  :-> ''Word32 :-> Return ''()\n      ]\n\nAfter \"import Session\", the functions
  like activate :: Client -> String -> IO ()\nwill be available.\n\nNote that many
  DBus services provide one interface for many objects; and \nin one interface, there
  could be several functions with the same name (but\nwith different signatures).
  In this case, the source generated by this\nprogram would not compile due to duplicated
  declaration names.\n\nSo, the sources generated by this program are primarily intended
  for \nhand inspection and editing (change declaration names, remove unneded or\nduplicated
  declarations); not for automatic compilation during some\npackage build process.\n\n"
description-type: text
hash: b1a0c7276789d6430c31e7e2be1c5304c940aa69c4db3c228b75227a6c5fbc8a
homepage: ''
latest: 0.1.2.0
license-name: BSD-3-Clause
maintainer: portnov84@rambler.ru
synopsis: Generate bindings for DBus calls by using DBus introspection and dbus-th
test-bench-deps: {}
