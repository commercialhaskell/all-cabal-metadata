all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- 0.1.4.4
- 0.1.4.5
- 0.1.4.6
- 0.1.5.0
- 0.1.6.0
- 0.1.6.1
- 0.1.7.0
author: Daniel Choi
basic-deps:
  aeson: '>=0.8.0.0'
  attoparsec: '>=0.12.0.0'
  base: '>=4.6 && <4.9'
  bytestring: '>=0'
  containers: '>=0'
  csv: '>=0.1.0'
  optparse-applicative: '>=0'
  scientific: '>=0'
  string-qq: '>=0'
  text: '>=1.0.0.0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "# jsontsv\n\nTransforms JSON objects into delimiter-separated line-oriented
  output, which is\nmore convenient for downstream processing with Unix tools like
  `grep`, `awk`,\n`diff`, etc. Also useful for converting JSON data into spreadsheet
  data: CSV-style\noutput is supported.\n\n## Synopsis\n\ninput:\n\n```json\n{\n  \"title\":
  \"Terminator 2: Judgment Day\",\n  \"year\": 1991,\n  \"stars\": [\n    {\n      \"name\":
  \"Arnold Schwarzenegger\"\n    },\n    {\n      \"name\": \"Linda Hamilton\"\n    }\n
  \ ],\n  \"ratings\": {\n    \"imdb\": 8.5\n  }\n}\n{\n  \"title\": \"Interstellar\",\n
  \ \"year\": 2014,\n  \"stars\": [\n    {\n      \"name\": \"Matthew McConaughey\"\n
  \   },\n    {\n      \"name\": \"Anne Hathaway\"\n    }\n  ],\n  \"ratings\": {\n
  \   \"imdb\": 8.9\n  }\n}\n```\n\nNote that this input is not actually JSON at the
  top-level. It is a stream of\nJSON objects. It can be fed into `jsontsv`:\n\n    jsontsv
  'title year stars.name ratings.imdb' < input\n\noutputs this tab-separated text:\n\n```tsv\nTerminator
  2: Judgment Day\t1991\tArnold Schwarzenegger,Linda Hamilton\t8.5\nInterstellar\t2014\tMatthew
  McConaughey,Anne Hathaway\t8.9\n```\n\nYou can pick off array elements using `[i]`
  syntax:\n\n    jsontsv 'title year stars[0].name' < input\n\noutputs \n\n```tsv\nTerminator
  2: Judgment Day     1991    Arnold Schwarzenegger\nInterstellar    2014    Matthew
  McConaughey\n```\n\nUse the `-H` flag to output the headers and the Unix tool `column`
  to align the\ncolumns for prettier output:\n\n    cat input | jsontsv -H 'title
  year stars.name ratings.imdb' | column -s $'\\t' -t\n\noutputs\n\n```\ntitle                       year
  \ stars.name                            ratings.imdb\nTerminator 2: Judgment Day
  \ 1991  Arnold Schwarzenegger,Linda Hamilton  8.5\nInterstellar                2014
  \ Matthew McConaughey,Anne Hathaway     8.9\n```\n\n## Mapping an array index getter
  over nested arrays\n\nAs of version 0.1.5.0, you can map an index getter over arrays,
  such as this\n\n    {\"id\":2,\"cast\":[[\"Michael Caine\",13473],[\"Demi Moore\",65231]]}\n\nwith
  this expression\n\n    jsontsv -a '|' 'id cast._[0]' < input\n\nThis results in:\n
  \   \n    2   Michael Caine|Demi Moore\n\n## Extracting 2-tuple values\n\nFrom version
  0.1.5.0, you can can access lists of pairs, e.g.\n\n    {\"menu\":[[\"dinner\",\"fish\"],[\"dessert\",\"pie\"]]}\n\nwith
  the expression `[\"KEY\"]`, e.g.:\n\n    jsontsv 'menu[\"dinner\"]'\n    # => fish\n\n
  \   jsontsv 'menu[\"dessert\"]'\n    # => pie\n\n    jsontsv 'menu[\"drink\"]'\n
  \   # => null\n\nThis is useful because Data.Aeson emits Haskell 2-tuples in this
  format:\n\n    ghci> encode [(\"dinner\", \"fish\"),(\"dessert\",\"pie\")]\n    \"[[\\\"dinner\\\",\\\"fish\\\"],[\\\"dessert\\\",\\\"pie\\\"]]\"\n\nMoreover,
  encoding 2-tuples is often preferable to encoding `Data.Map.Map` because \nencoding
  2-tuples preserves ordering, whereas encoding `Map` does not.\n\n## Installation\n\nAssuming
  you have a recent version of the [Haskell\nplatform](https://www.haskell.org/platform/)
  on your system, \n\n    cabal update\n    cabal install jsontsv\n\nAlternatively,
  \n\n    git clone git@github.com:danchoi/jsontsv.git\n    cd jsontsv\n    cabal
  sandbox init\n    cabal install \n    # Now copy .cabal-sandbox/bin/jsontsv to your
  PATH\n\n## Usage\n\n```\njsontsv\n\nUsage: jsontsv FIELDS [-a DELIM] ([-c|--csv]
  | [-d DELIM]) [-H]\n               [-n|--null-string STRING] [-t|--true-string STRING]\n
  \              [-f|--false-string STRING] [-N|--newline STRING] [--debug]\n  Transform
  JSON objects to TSV. On STDIN provide an input stream of\n  whitespace-separated
  JSON objects.\n\nAvailable options:\n  -h,--help                Show this help text\n
  \ -a DELIM                 Concatentated array elem delimiter. Defaults to\n                           comma.\n
  \ -c,--csv                 Output CSV\n  -d DELIM                 Output field delimiter.
  Defaults to tab.\n  -H                       Include headers\n  -n,--null-string
  STRING  String to represent null value. Default: 'null'\n  -t,--true-string STRING
  \ String to represent boolean true. Default: 't'\n  -f,--false-string STRING String
  to represent boolean false. Default: 'f'\n  -N,--newline STRING      String to replace
  newlines in field text. Default: '\n                           '\n  --debug                  Debug
  keypaths\n\nSee https://github.com/danchoi/jsontsv for more information.\n```\n\nInput
  should be a stream of JSON objects of the same or mostly similar shape,\nseparated
  by whitespace such as newlines. If the objects are wrapped in a JSON\narray at the
  top level or nested inside a top-level object, use the [jq][jq]\ntool by Stephan
  Dolan to extract an object stream, e.g.: \n\n[jq]:http://stedolan.github.io/jq/\n\n
  \   curl -s \"https://api.github.com/repos/rails/rails/issues\" | \n    jq -M '.[]'
  | \n    jsontsv -H 'number title user.login state repository.name labels.name' \n\noutputs\n\n```\nnumber\ttitle\tuser.login\tstate\trepository.name\tlabels.name\n17894\tAdd
  default value for `create_table_definition`\tkamipo\topen\tnull\t\n17893\tVendor/assets/images
  not being precompiled\trunephilosof\topen\tnull\t\n17891\tRemoved use of mocha in
  the info_controller tests\tprathamesh-sonpatki\topen\tnull\t\n17887\tWrong instance
  object passed to lambda on has_many :through\tharuska\topen\tnull\t\n17885\tUpdate
  postgresql_database_tasks.rb\tstarbelly\topen\tnull\t\n17884\tRoutes with {trailing_slash:
  true} do not match if referenced as non-named routes\tdreyks\topen\tnull\t\n17880\tFix
  humanize for already upcased acronyms\tmintuhouse\topen\tnull\tactivesupport\n17879\thumanize
  doesn't respect Infector acronyms\tmintuhouse\topen\tnull\tactivesupport\n17864\teager
  loading a has_many through association ignores order of through association\tjturkel\topen\tnull\t\n17859\tIncludes
  HABTM returns correct size now\tscambra\topen\tnull\t\n17858\ttest preloading a
  HABTM association with hash conditions\tscambra\topen\tnull\t\n17854\tBug when using
  find_in_batches and reverse_order\trobertjlooby\topen\tnull\tactiverecord\n17853\tRemove
  deprecated `reset_changes` and `reset_attribute!` methods.\tkaspth\topen\tnull\t\n17851\tSupport
  for any type primary key\tkamipo\topen\tnull\t\n17845\tDon't leak Object constants
  in core_ext/module/qualified_const\tgsamokovarov\topen\tnull\t\n17825\tFix Sidekiq
  ActiveJob integration setup\taripollak\topen\tnull\tactivejob\n17824\tAR::RecordNotSaved
  & RecordNotDestroyed from save!/destroy! should include an error message\tyuki24\topen\tnull\t\n17822\tRefactor
  `visit_ChangeColumnDefinition`\tkamipo\topen\tnull\t\n17820\tClear query cache on
  rollback\tfw42\topen\tnull\t\n17819\thandle_positional_args does not work properly
  in route with format: false option\tvevisystems\topen\tnull\tactionpack\n17817\tHide
  potentially sensitive ActiveJob params from logs\taripollak\topen\tnull\tactivejob\n17815\tRemove
  custom errors page section from the guides\tyuki24\topen\tnull\t\n17813\tChanged
  welcome#index page overall look and feel\twazery\topen\tnull\trailties\n17804\tNull
  values will still be passed to custom serializers.\txaviershay\topen\tnull\tactiverecord\n17797\tDon't
  remove mailer layouts files\ty-yagi\topen\tnull\t\n17795\tActiveRecord joins/includes
  bug\tdgobaud\topen\tnull\tactiverecord,regression\n17793\tFix undesirable RangeError
  by Type::Integer. Add Type::UnsignedInteger.\tkamipo\topen\tnull\tactiverecord\n17792\tallow
  'all' for :domain option in addition to :all\trockrep\topen\tnull\t\n17788\tIssue#17703
  Test case for tempfile attribute\tsivagollapalli\topen\tnull\t\n17787\trails runner
  does not respect subdirectory / how to specify subdirectory?\tdoits\topen\tnull\trailties\n```\n\nJSON
  leaf values are printed as follows: \n\n* Strings and numbers are copied to output.\n*
  Boolean values are output as `t` or `f`. You can changes this with the -t and -f
  options.\n* null is printed as `null`. You can change this with the -n option.\n*
  If the leaf value is an array, it is concatenated into a single\n  comma-separated
  string. This delimiter can be changed with the `-a` option.\n\n## Newlines in content\n\nIf
  a string field in the JSON contains a `\\n` or `\\r` character, these will be replaced
  \nby spaces by default. The replacement character can be changed with the `-N` option.\n\n##
  Column header aliases\n\nIf the default column headers using `-H` are too long,
  you can designate\naliases with the pattern `[keypath]:[alias]`. E.g., \n\n    curl
  -s \"https://api.github.com/repos/rails/rails/issues\" | \n    jq -M '.[]' | \n
  \   jsontsv -H 'number title user.login:login state repository.name:repo_name' \n\n\n##
  Known alternatives \n\n* [jsawk](https://github.com/micha/jsawk) Jsawk is like awk,
  but for JSON. (nodejs)\n* [json2csv](https://github.com/jehiah/json2csv) made with
  Go\n* [jq][jq] a lightweight and flexible command-line JSON processor\n* [jsoncsv](https://github.com/gradus/jsoncsv)
  a json to csv library in javascript/coffeescript\n* [json](https://github.com/konklone/json)
  A free, in-browser JSON to CSV converter\n* [tsvutils](https://github.com/brendano/tsvutils)
  utilities for processing tab-separated files\n\n## Related\n\n* [table](https://github.com/danchoi/table)\n*
  [jsonsql](https://github.com/danchoi/jsonsql)\n* [tsvsql](https://github.com/danchoi/tsvsql)\n*
  [jsonxlsx](https://github.com/danchoi/jsonxlsx)\n\n## Further reading\n\n* [Seven
  command line tools for data\n  science](http://jeroenjanssens.com/2013/09/19/seven-command-line-tools-for-data-science.html)
  by Jeroen Janssens.\n  A blog post surveying tools like this.\n* [Data Science at
  the Command Line: Facing the Future with Time-Tested Tools](http://shop.oreilly.com/product/0636920032823.do)\n
  \ by Jeroen Janssens. A book published in September 2014 by O'Reilly.\n* [jsontsv
  versus json2csv](https://github.com/jeroenjanssens/data-science-at-the-command-line/issues/26)
  \n"
description-type: markdown
hash: cb9e481ba9775440a77bf17c1820f27054a865069d9fea3aff5470d346757714
homepage: https://github.com/danchoi/jsontsv
latest: 0.1.7.0
license-name: MIT
maintainer: dhchoi@gmail.com
synopsis: JSON to TSV transformer
test-bench-deps: {}
