all-versions:
- 0.1.0.1
- 0.1.2.0
- 0.1.2.1
author: Daniel Choi
basic-deps:
  HUnit: '>=0'
  aeson: '>=0.8.0.1'
  attoparsec: '>=0.10.4.0'
  base: '>=4.6 && <4.8'
  bytestring: '>=0'
  containers: '>=0'
  optparse-applicative: '>=0'
  scientific: '>=0'
  string-qq: '>=0'
  text: '>=1.1.0.0'
  unordered-containers: '>=0'
  vector: '>=0.10.9.0'
changelog: ''
changelog-type: ''
description: "# jsonsql\n\nInterpolates JSON data into SQL strings from the command
  line. For generating\nSQL statements to pass to DB client programs like `psql`,
  `mysql`, and\n`sqlite3` via Unix pipelines or shell scripts. A faster, lighter-weight\nalternative
  to writing ad-hoc, monolithic programs with database and ORM\nlibraries. \n\nA template
  file with this interpolation syntax:\n\n    INSERT into titles (title, year, rating,
  created) \n    VALUES (:title, :year, :ratings.imdb, DEFAULT);\n\ncombined with
  this JSON stream on STDIN\n\n```json\n{\n  \"title\": \"Terminator 2: 'Judgment
  Day'\",\n  \"year\": 1991,\n  \"stars\": [\n    {\"name\": \"Arnold Schwarzenegger\"},\n
  \   {\"name\": \"Linda Hamilton\"}\n  ],\n  \"ratings\": {\n    \"imdb\": 8.5\n
  \ },\n  \"created\": \"2014-12-04T10:10:10Z\"\n  \n}\n{\n  \"title\": \"Interstellar\",\n
  \ \"year\": 2014,\n  \"stars\": [\n    {\"name\":\"Matthew McConaughey\"},\n    {\"name\":\"Anne
  Hathaway\"}\n  ],\n  \"ratings\": {\n    \"imdb\": 8.9\n  }\n}\n```\n\ngenerates
  this output:\n\n    INSERT into titles (title, year, rating, created)\n    VALUES
  ('Terminator 2: ''Judgment Day''', 1991, 8.5, DEFAULT);\n    INSERT into titles
  (title, year, rating, created)\n    VALUES ('Interstellar', 2014, 8.9, DEFAULT);\n\n##
  Install\n\n\n    cabal install jsonsql\n\n\n## Usage\n\n\n```\njsonsql\n\nUsage:
  jsonsql (TEMPLATE | -f FILE)\n  Inject JSON into SQL template strings\n\nAvailable
  options:\n  -h,--help                Show this help text\n  -f FILE                  Template
  file\n```\n\n## Array joining\n\nIf a key path evaluates to an array of values,
  specify a `<delimiter>` to have\nthe the values converted into strings, joined by
  the delimiter, and then\noutput as a string. \n\n```\nINSERT into titles (title,
  year, rating, stars<,>, created) \nVALUES (:title, :year, :ratings.imdb, :stars.name,
  DEFAULT);\n```\n\n```\nINSERT into titles (title, year, rating, stars, created)\nVALUES
  ('Terminator 2: ''Judgment Day''', 1991, 8.5, 'Arnold Schwarzenegger,Linda Hamilton',
  DEFAULT);\nINSERT into titles (title, year, rating, stars, created)\nVALUES ('Interstellar',
  2014, 8.9, 'Matthew McConaughey,Anne Hathaway', DEFAULT);\n```\n\n## JSON literal
  interpolation\n\nIf a key path terminates in a JSON object or array (without a array
  delimiter\nspecified), a JSON literal will be interpolated:\n\ntemplate:\n```\nINSERT
  into titles (title, stars) \nVALUES (:title, :stars);\n```\n\noutput:\n```\nINSERT
  into titles (title, stars)\nVALUES ('Terminator 2: ''Judgment Day''', '[{\"name\":\"Arnold
  Schwarzenegger\"},{\"name\":\"Linda Hamilton\"}]');\nINSERT into titles (title,
  stars) \nVALUES ('Interstellar', '[{\"name\":\"Matthew McConaughey\"},{\"name\":\"Anne
  Hathaway\"}]');\n```\n\nTo interpolate the base object as a literal JSON string,
  use `:.` as the keypath.\n\nDo NOT put quotes around the placeholder for a literal
  JSON interpolation.\n\n\n## Author\n\n* Daniel Choi <dhchoi@gmail.com>\n"
description-type: markdown
hash: 7ee0287fe6d5f291db01b526150e4b2576ed130867d519cbfec00e8cda752030
homepage: https://github.com/danchoi/jsonsql
latest: 0.1.2.1
license-name: MIT
maintainer: dhchoi@gmail.com
synopsis: Interpolate JSON object values into SQL strings
test-bench-deps: {}
