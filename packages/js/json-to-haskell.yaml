all-versions:
- 0.0.1.0
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
author: Chris Penner
basic-deps:
  aeson: '>=0'
  aeson-extra: '>=0'
  ansi-wl-pprint: '>=0'
  base: '>=4.7 && <5'
  bimap: '>=0'
  bytestring: '>=0'
  casing: '>=0'
  containers: '>=0'
  json-to-haskell: '>=0'
  microlens-platform: '>=0'
  mtl: '>=0'
  nonempty-containers: '>=0'
  optparse-applicative: '>=0'
  raw-strings-qq: '>=0'
  recursion-schemes: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for json-to-haskell

  ## 0.1.1.2
  - Fix including changelog in package

  ## 0.1.1.1
  - Only look at first element of lists when determining type

  ## Unreleased changes
changelog-type: markdown
description: "# json-to-haskell\n\n<!-- toc GFM -->\n\n* [Web interface](#web-interface)\n*
  [What is it?](#what-is-it)\n* [Installation](#installation)\n* [Usage](#usage)\n*
  [Help Wanted](#help-wanted)\n\n<!-- tocstop -->\n\n## Web interface\n\n[Click here
  for the web interface](http://json-to-haskell.chrispenner.ca/)\n[Web interface source
  code (Miso)](https://github.com/ChrisPenner/json-to-haskell-web)\n\n## What is it?\n\nIn
  goes JSON, out comes Haskell!\n\nA handy tool for quickly spec'ing out types for
  a given JSON type.\n\n**Note: This tool isn't perfect, but it should get you _most_
  of the way there.**\n\n```sh\n$ cat > company.json\n{ \"company\": \n { \"employees\":
  \n    [ {\"name\": \"Jon\", \"age\": 32} \n    , {\"name\": \"Alice\", \"age\":
  27} \n    ] \n , \"star_rating\": 4.7 \n } \n}\n```\n\n```haskell\n$ cat company.json
  | json-to-haskell\n{-# LANGUAGE DuplicateRecordFields #-}\n{-# LANGUAGE RecordWildCards
  #-}\n{-# LANGUAGE OverloadedStrings #-}\nmodule Model where\n\nimport Data.Aeson
  (ToJSON(..), FromJSON(..), Value(..), (.:), (.=), object)\nimport Data.Aeson.Types
  (prependFailure, typeMismatch)\nimport Data.Text (Text)\n\ndata Company = Company\n
  \ { companyStarRating :: Double\n  , companyEmployees :: [Employees]\n  } deriving
  (Show, Eq, Ord)\n\ndata Employees = Employees\n  { employeesAge :: Int\n  , employeesName
  :: Text\n  } deriving (Show, Eq, Ord)\n\ndata Model = Model\n  { modelCompany ::
  Company\n  } deriving (Show, Eq, Ord)\n\ninstance ToJSON Company where\n  toJSON
  Company{..} = object\n    [ \"star_rating\" .= companyStarRating\n    , \"employees\"
  .= companyEmployees\n    ]\n\ninstance ToJSON Employees where\n  toJSON Employees{..}
  = object\n    [ \"age\" .= employeesAge\n    , \"name\" .= employeesName\n    ]\n\ninstance
  ToJSON Model where\n  toJSON Model{..} = object\n    [ \"company\" .= modelCompany\n
  \   ]\n\ninstance FromJSON Company where\n  parseJSON (Object v) = do\n    companyStarRating
  <- v .: \"star_rating\"\n    companyEmployees <- v .: \"employees\"\n    pure $
  Company{..}\n  parseJSON invalid = do\n    prependFailure \"parsing Company failed,
  \"\n      (typeMismatch \"Object\" invalid)\n\ninstance FromJSON Employees where\n
  \ parseJSON (Object v) = do\n    employeesAge <- v .: \"age\"\n    employeesName
  <- v .: \"name\"\n    pure $ Employees{..}\n  parseJSON invalid = do\n    prependFailure
  \"parsing Employees failed, \"\n      (typeMismatch \"Object\" invalid)\n\ninstance
  FromJSON Model where\n  parseJSON (Object v) = do\n    modelCompany <- v .: \"company\"\n
  \   pure $ Model{..}\n  parseJSON invalid = do\n    prependFailure \"parsing Model
  failed, \"\n      (typeMismatch \"Object\" invalid)\n```\n\n## Installation\n\nTake
  your pick:\n\n```sh\ncabal install haskell-to-json\n# OR\nstack install haskell-to-json\n```\n\n##
  Usage\n\nThere's a web interface [here](http://json-to-haskell.chrispenner.ca/)
  if you prefer.\n\n\nOtherwise, install the cli and ask for help; the cli will have
  the most up to date help message:\n\n```sh\n$ json-to-haskell --help\nUsage: json-to-haskell
  [-t|--tab-stop ARG] [-n|--numbers ARG] [-s|--strings ARG]\n                       [-m|--maps
  ARG] [-l|--lists ARG] [--no-module-header]\n                       [--no-instances]
  [--no-prefix-record-fields] [--strict]\n\nAvailable options:\n  -t,--tab-stop ARG
  \       Number of spaces to indent each level.\n  -n,--numbers ARG         Type
  to use for numbers.\n\n                           'smart-floats':\n                               Use
  floats for numbers with decimals, Int for whole numbers.\n                           'smart-doubles':\n
  \                              Use floats for numbers with decimals, Int for whole
  numbers.\n                           'floats':\n                               Use
  floats for all numbers.\n                           'doubles':\n                               Use
  doubles for all numbers.\n                           'scientific':\n                               Use
  scientific for all numbers.\n\n  -s,--strings ARG         Type to use for strings.\n\n
  \                          'string':\n                             Use String for
  strings.\n                           'text':\n                             Use Text
  for strings.\n                           'bytestring':\n                             Use
  ByteString for strings.\n\n  -m,--maps ARG            Type to use for maps.\n\n
  \                          'map':\n                             Use Data.Map for
  maps.\n                           'hashmap':\n                             Use Data.HashMap
  for maps.\n\n  -l,--lists ARG           Type to use for lists.\n\n                           'list':\n
  \                            Use [] for lists.\n                           'vector':\n
  \                            Use Data.Vector for lists.\n\n  --no-module-header
  \      Omit the module header containing language extensions, module definition
  and imports.\n  --no-instances           Omit the ToJSON and FromJSON instances.\n
  \ --no-prefix-record-fields\n                           Omit record field prefixes.\n
  \ --strict                 Use strict record fields.\n  -h,--help                Show
  this help text\n```\n\n## Help Wanted\n\nWant to help out?\n\nI'd love to have a
  Purescript version of the app! It should be pretty easy to port, you'd just need
  to adapt the \"printer\" for the parsed data type.\nCheck out [Printer.hs](./src/JsonToHaskell/Internal/Printer.hs)
  .\n\nIt'd also be really nice to port the whole project to Purescript, the current
  miso build is difficult to set up locally.\n"
description-type: markdown
hash: 828ee0cdb61cbaf549bdb35d3f26ed5b540b04c538cb2fc500c0dad9372fad92
homepage: https://github.com/ChrisPenner/json-to-haskell#readme
latest: 0.1.1.2
license-name: BSD-3-Clause
maintainer: christopher.penner@gmail.com
synopsis: ''
test-bench-deps:
  aeson: '>=0'
  aeson-extra: '>=0'
  base: '>=4.7 && <5'
  bimap: '>=0'
  bytestring: '>=0'
  casing: '>=0'
  containers: '>=0'
  hspec: '>=0'
  json-to-haskell: '>=0'
  microlens-platform: '>=0'
  mtl: '>=0'
  nonempty-containers: '>=0'
  raw-strings-qq: '>=0'
  recursion-schemes: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
