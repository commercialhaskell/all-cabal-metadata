all-versions:
- 0.1.0.0
author: Marien Matser, Gerard van Schie, Jelle Teeuwissen
basic-deps:
  base: '>=4.14.3 && <5'
  containers: '>=0.6.5 && <0.7'
  mtl: '>=2.2.2 && <2.3'
changelog: |
  # Revision history for jsonlogic

  ## 0.1.0.0 -- 2022-04-06

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# Core\n\nThe core JsonLogic evaluation package.\nAllows for creating
  and adding custom operations to the evaluator in a pure and IO context.\nSee the
  example below for more information.\n\n## Example\n```hs\n\n-- | The main function\n--
  Perform simple power function\nmain :: IO ()\nmain = do\n  putStrLn \"First number:\"\n
  \ first <- getLine\n  putStrLn \"Second number:\"\n  second <- getLine\n  print
  $ evaluate (read first) (read second)\n\n-- | Evaluate two numbers with pow operation
  using json logic.\n-- The two numbers are placed into an data object and given to
  the evaluator with the following logic:\n-- {\"**\":[{\"var\":\"base\"}, {\"var\":\"exp\"}]}\n--
  \n-- >>> evaluate (read \"3\") (read \"4\")\n-- Right 81.0\nevaluate :: Json ->
  Json -> Result Json\nevaluate base expo = applyWithPow (read \"{\\\"**\\\":[{\\\"var\\\":\\\"base\\\"},
  {\\\"var\\\":\\\"exp\\\"}]}\") (JsonObject [(\"base\", base), (\"exp\", expo)])\n\n--
  | An evaluator that can evaluate operations with power (**).\napplyWithPow :: Rule
  -> Data -> Result Json\napplyWithPow = apply [powOperation]\n\n-- | The power operation.\n--
  Takes the power function and adds a name to it to create an operation.\npowOperation
  :: Operation\npowOperation = (\"**\", powFunction)\n\n-- | The power function.\n--
  Takes an subevaluator, function arguments (in this case just a list) and data to
  pass through.\n-- 1. tries to evaluate the arguments to double values\n--  (as they
  might be json logic evaluating to doubles, instead of direct numbers).\n-- 2. if
  successful, returns the result of the power operation\npowFunction :: Function Json\npowFunction
  evaluator (JsonArray [base', expo']) vars = do\n  base <- evaluateDouble evaluator
  base' vars\n  expo <- evaluateDouble evaluator expo' vars\n  return $ JsonNumber
  $ base ** expo\npowFunction _ _ _ = throw \"Wrong number of arguments for **\"\n```\n"
description-type: markdown
hash: 79b5f48ef3f52d0b8c84cf6b7383a7bb5ffd97a15c2683b947335b370c4183aa
homepage: ''
latest: 0.1.0.0
license-name: MIT
maintainer: jelleteeuwissen@hotmail.nl
synopsis: JsonLogic Evaluation
test-bench-deps:
  base: '>=4.14.3.0'
  containers: '>=0'
  hedgehog: '>=1.1.1'
  jsonlogic: '>=0'
  tasty: '>=0'
  tasty-hedgehog: '>=1.2.0.0'
  tasty-hunit: '>=0.10.0.3'
