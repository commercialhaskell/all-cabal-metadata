homepage: https://github.com/byteverse/json-syntax
changelog-type: markdown
hash: f0ae2fb4d49c4f66ba9b85daa91191c8dfe3c0c0ce1be76c918d41ffcfc674c2
test-bench-deps:
  bytestring: -any
  text-short: -any
  base: '>=4.12.0.0 && <5'
  unordered-containers: -any
  text: '>=1.2'
  gauge: -any
  json-syntax: -any
  array-chunks: -any
  bytebuild: -any
  byteslice: '>=0.1.3'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty: '>=1.2.3 && <1.3'
  scientific: -any
  scientific-notation: '>=0.1.1'
  aeson: -any
  primitive: -any
  vector: -any
  neat-interpolation: '>=0.3.2'
maintainer: andrew.thaddeus@gmail.com
synopsis: High-performance JSON parser and encoder
changelog: |
  # Revision history for json-syntax

  ## 0.2.0.0 -- 2021-03-22

  * Switch from `Chunks` to `SmallArray` in the `Object` and `Array` data
    constructors. This makes the library simpler to use but it a breaking
    change.
  * Expose `emptyArray` and `emptyObject`.
  * Add `object(9|10|11|12)` as convenience helpers for construction.

  ## 0.1.2.0 -- 2020-11-18

  * Add infix pattern synonym for `Member`.
  * Add `object(1|2|3|4|5|6|7|8)` as convenience helpers for construction.

  ## 0.1.1.0 -- 2020-05-01

  * Add `encode`.

  ## 0.1.0.0 -- 2020-01-20

  * Initial release.
basic-deps:
  bytestring: '>=0.10.8 && <0.11'
  text-short: '>=0.1.3 && <0.2'
  base: '>=4.12 && <5'
  run-st: '>=0.1.1 && <0.2'
  array-chunks: '>=0.1.3 && <0.2'
  bytebuild: '>=0.3.4 && <0.4'
  byteslice: '>=0.1.3 && <0.3'
  array-builder: '>=0.1 && <0.2'
  scientific-notation: '>=0.1.2 && <0.2'
  primitive: '>=0.7 && <0.8'
  bytesmith: '>=0.3.2 && <0.4'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
author: Andrew Martin
latest: 0.2.0.0
description-type: haddock
description: |-
  This library parses JSON into a @Value@ type that is consistent with the
  ABNF described in [RFC 7159](https://tools.ietf.org/html/rfc7159). The
  parser is about six times faster than the parser that `aeson` provides.
  This parser is however, non-resumable, so if resumable parsing is
  important, `aeson` should be preferred.

  This library does not include any functions or typeclasses to help users
  marshal `Value` to their application-specific data types. Such functions
  and typeclasses are outside the scope of this library. If anyone writes a
  library that offers users these conveniences open a issue so that the
  @json-syntax@ documentation can point users to it.
license-name: BSD-3-Clause
