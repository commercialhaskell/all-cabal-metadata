all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
- 0.2.6.1
- 0.2.7.0
- 0.2.7.1
author: Andrew Martin
basic-deps:
  array-builder: '>=0.1 && <0.2'
  array-chunks: '>=0.1.3 && <0.2'
  base: '>=4.15 && <5'
  bytebuild: '>=0.3.10 && <0.4'
  byteslice: '>=0.2.9 && <0.3'
  bytesmith: '>=0.3.8 && <0.4'
  bytestring: '>=0.10.8 && <0.12'
  contiguous: '>=0.6 && <0.7'
  natural-arithmetic: '>=0.1.2 && <0.3'
  primitive: '>=0.7 && <0.10'
  run-st: '>=0.1.1 && <0.2'
  scientific-notation: '>=0.1.6 && <0.2'
  text: '>=2.0.2 && <2.1'
  text-short: '>=0.1.3 && <0.2'
  transformers: '>=0.5.6 && <0.6'
  word-compat: '>=0.0.6 && <0.1'
  zigzag: '>=0.0.1 && <0.1'
changelog: |
  # Revision history for json-syntax

  ## 0.2.7.1 -- 2024-01-29

  * Update package metadata.

  ## 0.2.7.0 -- 2023-10-05

  * Add `decodeNewlineDelimited`.
  * Add `toChunks`, `toBytes`, `toText`, `toShortText`, `toByteArray`.

  ## 0.2.6.1 -- 2023-07-28

  * Correct implementations of `object15` and `object16`.

  ## 0.2.6.0 -- 2023-07-26

  * Add `objectFromList` and `arrayFromList`.

  ## 0.2.5.0 -- 2023-07-25

  * Add `object(13|14|15|16|17)`.
  * Add `ToValue` instances for `Word`, `Text`, `Value`,
    `Scientific`, list (i.e. `[]`), the unit type (i.e. `()`),
  * Add `text` and `shortText` for value construction.


  ## 0.2.4.0 -- 2023-06-27

  * Add typeclass `ToValue` for encoding.
  * Add functions `int`, `(int|word)(8|16|32|64)`, `bool` for constructing
    objects.

  ## 0.2.3.0 -- 2022-03-22

  * Add `Json.Flatten` module.
  * Drop support for GHCs older than 9.0.
  * Replace integer-gmp with ghc-bignum.

  ## 0.2.2.0 -- 2022-07-15

  * Build with GHC 9.2.3.
  * Test suite now requires aeson >= 2.0 instead of < 2.0.

  ## 0.2.1.0 -- 2022-03-01

  * Support Jackson's SMILE format as an encode target.
  * Use `bytebuild`'s `rebuild` function for 2x perf improvement on encode.
  * Bump bytebuild for buffer overflow fix.

  ## 0.2.0.0 -- 2021-03-22

  * Switch from `Chunks` to `SmallArray` in the `Object` and `Array` data
    constructors. This makes the library simpler to use but it a breaking
    change.
  * Expose `emptyArray` and `emptyObject`.
  * Add `object(9|10|11|12)` as convenience helpers for construction.

  ## 0.1.2.0 -- 2020-11-18

  * Add infix pattern synonym for `Member`.
  * Add `object(1|2|3|4|5|6|7|8)` as convenience helpers for construction.

  ## 0.1.1.0 -- 2020-05-01

  * Add `encode`.

  ## 0.1.0.0 -- 2020-01-20

  * Initial release.
changelog-type: markdown
description: |-
  This library parses JSON into a @Value@ type that is consistent with the
  ABNF described in [RFC 7159](https://tools.ietf.org/html/rfc7159). The
  parser is about six times faster than the parser that `aeson` provides.
  This parser is however, non-resumable, so if resumable parsing is
  important, `aeson` should be preferred.

  This library does not include any functions or typeclasses to help users
  marshal `Value` to their application-specific data types. Such functions
  and typeclasses are outside the scope of this library. If anyone writes a
  library that offers users these conveniences open a issue so that the
  @json-syntax@ documentation can point users to it.
description-type: haddock
hash: ea08a5c5cbc88dac2425836277e5f122d4abda57e5b485a9de5af7cdd06061d2
homepage: https://github.com/byteverse/json-syntax
latest: 0.2.7.1
license-name: BSD-3-Clause
maintainer: amartin@layer3com.com
synopsis: High-performance JSON parser and encoder
test-bench-deps:
  QuickCheck: '>=2.14.2'
  aeson: '>=2.0.2'
  array-chunks: '>=0'
  base: '>=4.12.0.0 && <5'
  bytebuild: '>=0'
  byteslice: '>=0.1.3'
  bytestring: '>=0'
  containers: '>=0'
  gauge: '>=0'
  json-syntax: '>=0'
  neat-interpolation: '>=0.3.2'
  primitive: '>=0'
  scientific: '>=0'
  scientific-notation: '>=0.1.1'
  tasty: '>=1.2.3 && <1.3'
  tasty-golden: '>=2.0 && <2.4'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty-quickcheck: '>=0.10.1.2 && <0.11'
  text: '>=2.0.2 && <2.1'
  text-short: '>=0'
  vector: '>=0'
