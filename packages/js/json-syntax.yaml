homepage: https://github.com/byteverse/json-syntax
changelog-type: markdown
hash: 3229e45330d672912e0aa10b4c78798ba0b3c46c44e18db2ba70be1809d8b367
test-bench-deps:
  bytestring: -any
  text-short: -any
  base: '>=4.12.0.0 && <5'
  tasty-golden: '>=2.0 && <2.4'
  text: '>=1.2'
  gauge: -any
  containers: -any
  json-syntax: -any
  array-chunks: -any
  bytebuild: -any
  byteslice: '>=0.1.3'
  tasty-quickcheck: '>=0.10.1.2 && <0.11'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty: '>=1.2.3 && <1.3'
  scientific: -any
  QuickCheck: '>=2.14.2'
  scientific-notation: '>=0.1.1'
  aeson: '>=2.0.2'
  primitive: -any
  vector: -any
  neat-interpolation: '>=0.3.2'
maintainer: andrew.thaddeus@gmail.com
synopsis: High-performance JSON parser and encoder
changelog: "# Revision history for json-syntax\n\n## 0.2.6.0 -- 2023-07-26\n\n* Add
  `objectFromList` and `arrayFromList`.\n\n## 0.2.5.0 -- 2023-07-25\n\n* Add `object(13|14|15|16|17)`.\n*
  Add `ToValue` instances for `Word`, `Text`, `Value`,\n  `Scientific`, list (i.e.
  `[]`), the unit type (i.e. `()`),\n* Add `text` and `shortText` for value construction.\n
  \ \n\n## 0.2.4.0 -- 2023-06-27\n\n* Add typeclass `ToValue` for encoding.\n* Add
  functions `int`, `(int|word)(8|16|32|64)`, `bool` for constructing\n  objects.\n\n##
  0.2.3.0 -- 2022-03-22\n\n* Add `Json.Flatten` module.\n* Drop support for GHCs older
  than 9.0.\n* Replace integer-gmp with ghc-bignum.\n\n## 0.2.2.0 -- 2022-07-15\n\n*
  Build with GHC 9.2.3.\n* Test suite now requires aeson >= 2.0 instead of < 2.0.\n\n##
  0.2.1.0 -- 2022-03-01\n\n* Support Jackson's SMILE format as an encode target.\n*
  Use `bytebuild`'s `rebuild` function for 2x perf improvement on encode.\n* Bump
  bytebuild for buffer overflow fix.\n\n## 0.2.0.0 -- 2021-03-22\n\n* Switch from
  `Chunks` to `SmallArray` in the `Object` and `Array` data\n  constructors. This
  makes the library simpler to use but it a breaking\n  change.\n* Expose `emptyArray`
  and `emptyObject`.\n* Add `object(9|10|11|12)` as convenience helpers for construction.\n\n##
  0.1.2.0 -- 2020-11-18\n\n* Add infix pattern synonym for `Member`.\n* Add `object(1|2|3|4|5|6|7|8)`
  as convenience helpers for construction.\n\n## 0.1.1.0 -- 2020-05-01\n\n* Add `encode`.\n\n##
  0.1.0.0 -- 2020-01-20\n\n* Initial release.\n"
basic-deps:
  natural-arithmetic: '>=0.1.2 && <0.3'
  bytestring: '>=0.10.8 && <0.12'
  word-compat: '>=0.0.3'
  text-short: '>=0.1.3 && <0.2'
  base: '>=4.15 && <5'
  text: '>=1.2'
  run-st: '>=0.1.1 && <0.2'
  contiguous: '>=0.6 && <0.7'
  array-chunks: '>=0.1.3 && <0.2'
  bytebuild: '>=0.3.10 && <0.4'
  byteslice: '>=0.2.9 && <0.3'
  array-builder: '>=0.1 && <0.2'
  zigzag: '>=0.0.1'
  scientific-notation: '>=0.1.6 && <0.2'
  primitive: '>=0.7 && <0.10'
  bytesmith: '>=0.3.8 && <0.4'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
- 0.2.6.0
author: Andrew Martin
latest: 0.2.6.0
description-type: haddock
description: |-
  This library parses JSON into a @Value@ type that is consistent with the
  ABNF described in [RFC 7159](https://tools.ietf.org/html/rfc7159). The
  parser is about six times faster than the parser that `aeson` provides.
  This parser is however, non-resumable, so if resumable parsing is
  important, `aeson` should be preferred.

  This library does not include any functions or typeclasses to help users
  marshal `Value` to their application-specific data types. Such functions
  and typeclasses are outside the scope of this library. If anyone writes a
  library that offers users these conveniences open a issue so that the
  @json-syntax@ documentation can point users to it.
license-name: BSD-3-Clause
