all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
- 0.2.6.1
- 0.2.7.0
- 0.2.7.1
- 0.2.7.2
- 0.3.0.2
author: Andrew Martin
basic-deps:
  array-builder: '>=0.1 && <0.2'
  array-chunks: '>=0.1.3 && <0.2'
  base: '>=4.15 && <5'
  bytebuild: '>=0.3.12 && <0.4'
  byteslice: '>=0.2.9 && <0.3'
  bytesmith: '>=0.3.13 && <0.4'
  bytestring: '>=0.10.8 && <0.12'
  contiguous: '>=0.6 && <0.7'
  natural-arithmetic: '>=0.1.2 && <0.3'
  primitive: '>=0.7 && <0.10'
  run-st: '>=0.1.1 && <0.2'
  scientific-notation: '>=0.1.6 && <0.2'
  text: '>=2.1.2 && <2.2'
  text-short: '>=0.1.3 && <0.2'
  transformers: '>=0.5.6 && <0.7'
  zigzag: '>=0.0.1 && <0.1'
changelog: |
  # Revision history for json-syntax

  ## 0.3.0.2 -- 2025-07-14

  * Switch from ShortText to Text. In many cases, this makes it possible for the
    resulting Value to share the input byte array instead of allocating additional
    memory.
  * Get rid of word-compat. Require new GHC instead.
  * Optimize decoding. Time for `json/twitter/100/decode` drops from 190us to 150us.

  ## 0.2.7.2 -- 2024-02-07

  * Fix build with GHC 9.8.
  * Bumped upper bound on `transformers` to <0.7.
  * Bumped upper bound on `text` to <2.2.

  ## 0.2.7.1 -- 2024-01-29

  * Update package metadata.

  ## 0.2.7.0 -- 2023-10-05

  * Add `decodeNewlineDelimited`.
  * Add `toChunks`, `toBytes`, `toText`, `toShortText`, `toByteArray`.

  ## 0.2.6.1 -- 2023-07-28

  * Correct implementations of `object15` and `object16`.

  ## 0.2.6.0 -- 2023-07-26

  * Add `objectFromList` and `arrayFromList`.

  ## 0.2.5.0 -- 2023-07-25

  * Add `object(13|14|15|16|17)`.
  * Add `ToValue` instances for `Word`, `Text`, `Value`,
    `Scientific`, list (i.e. `[]`), the unit type (i.e. `()`),
  * Add `text` and `shortText` for value construction.


  ## 0.2.4.0 -- 2023-06-27

  * Add typeclass `ToValue` for encoding.
  * Add functions `int`, `(int|word)(8|16|32|64)`, `bool` for constructing
    objects.

  ## 0.2.3.0 -- 2022-03-22

  * Add `Json.Flatten` module.
  * Drop support for GHCs older than 9.0.
  * Replace integer-gmp with ghc-bignum.

  ## 0.2.2.0 -- 2022-07-15

  * Build with GHC 9.2.3.
  * Test suite now requires aeson >= 2.0 instead of < 2.0.

  ## 0.2.1.0 -- 2022-03-01

  * Support Jackson's SMILE format as an encode target.
  * Use `bytebuild`'s `rebuild` function for 2x perf improvement on encode.
  * Bump bytebuild for buffer overflow fix.

  ## 0.2.0.0 -- 2021-03-22

  * Switch from `Chunks` to `SmallArray` in the `Object` and `Array` data
    constructors. This makes the library simpler to use but it a breaking
    change.
  * Expose `emptyArray` and `emptyObject`.
  * Add `object(9|10|11|12)` as convenience helpers for construction.

  ## 0.1.2.0 -- 2020-11-18

  * Add infix pattern synonym for `Member`.
  * Add `object(1|2|3|4|5|6|7|8)` as convenience helpers for construction.

  ## 0.1.1.0 -- 2020-05-01

  * Add `encode`.

  ## 0.1.0.0 -- 2020-01-20

  * Initial release.
changelog-type: markdown
description: "# json-syntax\n\nThis library parses JSON into a `Value` type that is
  consistent with the\nABNF described in [RFC 7159](https://tools.ietf.org/html/rfc7159).
  The\nparser is about six times faster than the parser that `aeson` provides.\nThis
  parser is however, non-resumable, so if resumable parsing is\nimportant, `aeson`
  should be preferred. Results from the benchmark suite:\n\n    benchmarked json/twitter/100\n
  \   time                 208.6 μs   (207.1 μs .. 210.1 μs)\n                         1.000
  R²   (0.999 R² .. 1.000 R²)\n    mean                 211.8 μs   (210.7 μs .. 213.3
  μs)\n    std dev              4.493 μs   (3.299 μs .. 7.422 μs)\n    \n    benchmarked
  aeson/twitter/100\n    time                 1.284 ms   (1.267 ms .. 1.296 ms)\n
  \                        0.999 R²   (0.999 R² .. 1.000 R²)\n    mean                 1.282
  ms   (1.276 ms .. 1.292 ms)\n    std dev              26.07 μs   (17.87 μs .. 40.01
  μs)\n\nThis library does not include any functions or typeclasses to help users\nconvert
  data from `Value`, the RFC-7159-inspired syntax tree data type.\nSuch functions
  and typeclasses are outside the scope of this library. If\nanyone writes a library
  that helps users marshal their data in this way,\nopen a issue so that the `json-syntax`
  documentation can point users to it.\n"
description-type: markdown
hash: a568a3839279e88f79437bbce857aaf8502cf0aca9705e17f6d9354e0d26e2a7
homepage: https://github.com/byteverse/json-syntax
latest: 0.3.0.2
license-name: BSD-3-Clause
maintainer: amartin@layer3com.com
synopsis: High-performance JSON parser and encoder
test-bench-deps:
  QuickCheck: '>=2.14.2'
  aeson: '>=2.0.2'
  base: '>=4.12.0.0 && <5'
  bytebuild: '>=0'
  byteslice: '>=0.1.3'
  bytestring: '>=0'
  gauge: '>=0'
  json-syntax: '>=0'
  neat-interpolation: '>=0.3.2'
  primitive: '>=0'
  scientific: '>=0'
  scientific-notation: '>=0.1.1'
  tasty: '>=1.2.3'
  tasty-golden: '>=2.0'
  tasty-hunit: '>=0.10.0.2'
  tasty-quickcheck: '>=0.10.1.2'
  text: '>=2.0.2'
  text-short: '>=0'
