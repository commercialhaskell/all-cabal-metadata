all-versions:
- 0.1.0.0
author: Gareth Tan
basic-deps:
  Glob: '>=0.7.14 && <0.9'
  QuickCheck: '>=2.8.2 && <2.10'
  aeson: '>=0.11.3.0 && <1.2'
  aeson-pretty: '>=0.7.2 && <0.9'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.6.0 && <0.11'
  conduit: '>=1.2.10 && <1.3'
  conduit-combinators: '>=1.0.8.3 && <1.2'
  containers: '>=0.5.6.2 && <0.6'
  hjsonschema: '>=1.6.3 && <1.7'
  jsons-to-schema: '>=0'
  optparse-applicative: '>=0.12.1.0 && <0.14'
  protolude: '>=0.1.10 && <0.2'
  safe: '>=0.3.14 && <0.4'
  scientific: '>=0.3.4.9 && <0.4'
  semigroups: '>=0.18.2 && <0.19'
  text: '>=1.2.2.2 && <1.3'
  unordered-containers: '>=0.2.8.0 && <0.3'
  vector: '>=0.11.0.0 && <0.13'
changelog: ''
changelog-type: ''
description: "# JSONs to Schema\n\n**A JSON Schema Draft 4 Generator from JSON Instances**\n\nSuppose
  you have an API that produces complex and somewhat varied JSON. You'd like to be
  able to document that API in a standard format by observing only its output. [JSON
  Schema](http://json-schema.org/) is a reasonable format for that. But simply generating
  the schema for one document will lead to an incomplete description of the API since
  not all documents will have all the keys in the full document. This is where this
  library comes in.\n\n## CLI Overview\n\nJSONs to Schema can also be used on the
  command line. After locating the installed binary, run it with `--help` to get detailed
  usage instructions.\n\n## API Overview\n\nThe main API function is `jsonsToSchema`
  along with its configuration-taking equivalent, `jsonsToSchemaWithConfig`. This
  will transform a set of JSON documents into a single `Maybe` schema. \n\nOther helpful
  functions are `jsonToSchema`, which transforms a single document, and `schemasToSchema`,
  which performs the actual work of schema unification. \n\n## Properties\n\nThe schema
  generator should satisfy these properties:\n\n- An schema generated from a JSON
  document will always be able to validate that JSON document.\n- When a schema is
  merged with another schema, all objects that would validate under either schema,
  subject to the assumptions below, will validate under the merged schema regardless
  of merge order.\n\nUnlike other generators strictness is meant to be customizable.
  Whether to allow additional properties in schema objects is something that the user
  can turn on and off.\n\n### Assumptions\nWhen merging JSON documents the generator
  keeps track of only one possible underlying type for each primitive type. Thus,
  if there were two documents `{\"name\": \"x\"}` and `{\"cost\": 24}` they will be
  assumed to represent two different manifestations of a single document that has
  both the `name` and the `cost` keys, rather than two different documents.\n\nIf
  given an object and an array (or some other primitive type), however, the generator
  will be able to assume that the particular JSON document can be either an object
  or an array type. \n\n## Prior Art\n\nThis project was inspired by [GenSON](https://github.com/wolverdude/GenSON),
  a Python project that does much of the same, but aims to be more customizable, correct,
  and powerful. \n\nCertain features were also inspired by [schema-guru](https://github.com/snowplow/schema-guru),
  but this project aims to be more customizable and have a programmatic API. Schema
  Guru's enum and range detection features are planned to be matched by this library.
  \n\n## Future Plans\n- Option to autogenerate enumerations for fields with below
  a certain limit of values\n- Option to automatically detect ranges for integers,
  strings, arrays, and objects\n\n\n## Not Planned\n- Recognition of known JSON Schema
  formats (UUIDs and IP addresses, for example)\n- Support for JSON or JSON Schema
  extensions\n"
description-type: markdown
hash: 44e7c8b26404021af5d2e42afbe03c75152cc0f5165964215ef981ccf8079d5a
homepage: https://github.com/garetht/jsons-to-schema/README.md
latest: 0.1.0.0
license-name: MIT
maintainer: Gareth Tan
synopsis: JSON to JSON Schema
test-bench-deps:
  QuickCheck: '>=2.8.2 && <2.10'
  aeson: '>=0.11.3.0 && <1.2'
  aeson-pretty: '>=0.7.2 && <0.9'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.6.0 && <0.11'
  containers: '>=0.5.6.2 && <0.6'
  hjsonschema: '>=1.6.3 && <1.7'
  hspec: '>=2.2.4 && <2.5'
  jsons-to-schema: '>=0'
  neat-interpolation: '>=0.3.2.1 && <0.4'
  protolude: '>=0.1.10 && <0.2'
  quickcheck-instances: '>=0.3.12 && <0.4'
  scientific: '>=0.3.4.9 && <0.4'
  text: '>=1.2.2.2 && <1.3'
  uniplate: '>=1.6.12 && <1.7'
  unordered-containers: '>=0.2.8.0 && <0.3'
  vector: '>=0.11.0.0 && <0.13'
