all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
author: Paolo Veronelli
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  generics-sop: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  monoidal-containers: '>=0'
  protolude: '>=0'
  string-interpolate: '>=0'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-hspec: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
changelog: |
  # Changelog for jsop

  ## Unreleased changes
changelog-type: markdown
description: "# jsop, JSON record cherry picker \n\nJSOP is good for picking out a
  product type value  from nested json objects \n\nThe `jread`  memoize the keys path
  structure so `jread f g` should be curried to repeat on multiple values. The `Value`
  will be scanned only one time, despite the paths are always expressed from the root.
  Order is restored by a final lookup.\n\n## Example\n\nPreamble\n\n```haskell\n\n{-#
  LANGUAGE TypeFamilies #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE BlockArguments
  #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE
  TemplateHaskell #-}\n{-# LANGUAGE TypeApplications #-}\n\nimport Data.Aeson\nimport
  Data.Aeson.Lens\nimport Data.String.Interpolate\nimport qualified Data.Text as T\nimport
  Generics.SOP\nimport Generics.SOP.TH\nimport JSOP.Parse\nimport Protolude hiding
  (All, optional, (:*:))\nimport Data.Maybe (fromJust)\n```\n\nGiven we have a SOP
  encoding of the record (tuples are good). \n\n\n```haskell\ndata ABC = ABC Text
  Int Int deriving (Show, Eq)\n\nderiveGeneric ''ABC\n\n```\n\nThen we need a product
  of pickers with the same shape as our product type.\n\nIn this case I  choose to
  encode paths joining json keys with ` / `\n\n```haskell\ncherryPickABC :: NP (Parser
  Text) '[Text, Int, Int]\ncherryPickABC =\n  required \"object 1 / a string\" _String\n
  \   :* required \"object 2 / a number\" _Integral\n    :* optional \"object 4 /
  a number\" 42 _Integral\n    :* Nil\n``` \n\nGiven the next json structure\n\n```haskell\njsonWithABC
  :: Value\njsonWithABC = fromJust . decode $ [i| \n  {\n    \"object 1\": \n      {
  \"a string\": \"ciao\"\n      , \"ignore me\" : 34\n      }\n  , \"object 2\": \n
  \     { \"a number\": 2\n      , \"object 3\": {}\n      }\n  , \"object 4\": {\n
  \     \"a plumber\" :43\n      } \n  }\n  |]\n``` \n\nWe can cherry pick the scattered
  `ABC` with\n\n```haskell \nabc :: ABC\nRight abc = jread (T.splitOn \" / \") cherryPickABC
  jsonWithAB\n```\n\nWe can also rewrite an ABC value in the json\n\nWriting optionals
  has an ad-hoc defined behaviour, in general writing is still to be thought in case
  of missing keys\n\n```haskell\njsonABC :: Value \njsonABC = jwrite (T.splitOn \"
  / \") cherryPickABC jsonWithABC (ABC \"mamma\" 44 103) \n```\n\n"
description-type: markdown
hash: eceb780a7886dd687cd71c72cd36b320a09c47bd7a4d473f2aa064a2b383a57b
homepage: ''
latest: 0.2.0.1
license-name: BSD-3-Clause
maintainer: paolo.veronelli@gmail.com
synopsis: Cherry picking in JSON objects
test-bench-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  generics-sop: '>=0'
  jsop: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  monoidal-containers: '>=0'
  protolude: '>=0'
  string-interpolate: '>=0'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-hspec: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
