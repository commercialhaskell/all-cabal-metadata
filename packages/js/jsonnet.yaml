all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.1.1
- 0.4.0.0
author: Alexandre Moreno
basic-deps:
  aeson: '>=2.2 && <2.3'
  base: '>=4.20 && <4.22'
  binary: '>=0.8.8 && <0.9'
  bytestring: '>=0.11 && <0.13'
  containers: '>=0.6.2 && <0.8'
  data-fix: '>=0.3.1 && <0.4'
  directory: '>=1.3.6 && <1.4'
  exceptions: '>=0.10.4 && <0.11'
  filepath: '>=1.4.2 && <1.6'
  jsonnet: '>=0'
  lens: '>=5.0.1 && <5.4'
  megaparsec: '>=9.5 && <9.8'
  mtl: '>=2.2.2 && <2.4'
  optparse-applicative: '>=0.16.1 && <0.19'
  parser-combinators: '>=1.2.1 && <1.4'
  prettyprinter: '>=1.7.0 && <1.8'
  scientific: '>=0.3.7 && <0.4'
  template-haskell: '>=2.16.0 && <2.23'
  text: '>=2.0 && <2.2'
  th-lift-instances: '>=0.1.18 && <0.2'
  th-utilities: '>=0.2.4.2 && <0.3'
  transformers-compat: '>=0.6.6 && <0.8'
  unbound-generics: '>=0.4.3 && <0.5'
  unordered-containers: '>=0.2.14 && <0.3'
  vector: '>=0.12.3 && <0.14'
changelog: |
  # Changelog for jsonnet

  ## Unreleased changes
changelog-type: markdown
description: "# haskell-jsonnet\n\n[![Actions Status](https://github.com/moleike/haskell-jsonnet/workflows/build/badge.svg)](https://github.com/moleike/haskell-jsonnet/actions)\n[![Hackage](https://img.shields.io/hackage/v/jsonnet.svg?logo=haskell)](https://hackage.haskell.org/package/jsonnet)\n\nA
  full-fledged Haskell implementation of the [Jsonnet][jsonnet] spec.\nFor an introduction
  to the language itself, see the [tutorial][tutorial] or language [reference][reference].\nWe
  are using the same test suite used in the offical [C++][cpp-jsonnet] and [Go][go-jsonnet]
  implementation (which is fairly comprehensive).\n\n## Progress\n\nHere is the implementation
  status of the main language features:\n\n- [X] array and object comprehension (but
  see https://github.com/moleike/haskell-jsonnet/issues/46)\n- [X] array slices\n-
  [X] Python-style string formatting\n- [X] text blocks\n- [X] verbatim strings\n-
  [X] object-level locals\n- [ ] object-level asserts (https://github.com/moleike/haskell-jsonnet/issues/39)\n-
  [X] keyword parameters\n- [X] default arguments\n- [ ] top-level arguments (https://github.com/moleike/haskell-jsonnet/issues/24)\n-
  [X] external variables (by Berk Özkütük)\n- [X] hidden fields (by Cristhian Motoche)\n-
  [X] tailstrict annotation\n- [X] outermost object reference `$`\n- [X] mixin inheritence
  and open recursion (operator `+` with `self` and `super`)\n- [X] field composition
  (operator `+:`)\n- [ ] multiple file output (https://github.com/moleike/haskell-jsonnet/issues/32)\n-
  [X] verbatim imports (by Berk Özkütük)\n\n## Build\n\nUsing the [stack][stack] build
  tool:\n\n```console\n% git clone github.com/moleike/haskell-jsonnet.git\n% cd haskell-jsonnet\n%
  stack build\n```\n\n## Install\n\n```console\n% stack install # to install\n```\n\n##
  Usage\n\n```console\n% hs-jsonnet --help\nUsage: hs-jsonnet [-v|--version] [-e|--exec]
  [<filename>] \n                  [-o|--output-file <filename>] [-S|--string] \n
  \                 [-V|--ext-str VAR=VALUE] [--ext-str-file FILE] \n                  [--ext-code
  VAR=EXPR] [--ext-code-file FILE]\n\nAvailable options:\n  -v,--version             Print
  version of the program\n  -h,--help                Show this help text\n  -e,--exec
  \               Treat filename as code\n  <filename>               Jsonnet source
  file or stdin\n  -o,--output-file <filename>\n                           Write to
  the output file rather than stdout\n  -S,--string              Expect a string,
  manifest as plain text\n  -V,--ext-str VAR=VALUE   External string variable\n  --ext-str-file
  FILE      External string variable as file\n  --ext-code VAR=EXPR      External
  code variable\n  --ext-code-file FILE     External code variable as file\n```\n\n##
  Output formats\n\nBy default Jsonnet programs evaluate to a JSON document, serialized
  using `aeson`. \n\nThe `std` library provides several methods to output other formats,
  e.g. \nto generate a Yaml stream instead:\n\n``` console\n% hs-jsonnet -S -e \"std.manifestYamlStream(['a',
  1, []])\"\n---\n\"a\"\n---\n1\n---\n[]\n...\n```\n\nNote the we need to use the
  option `-S` to output a verbatim string, instead of default JSON.\n\nSimilarly,
  to output prettified JSON: \n\n``` console\n% cat pretty.jsonnet \nstd.manifestJsonEx(\n{\n
  \   x: [1, 2, 3, true, false, null,\n        \"string\\nstring\"],\n    y: { a:
  1, b: 2, c: [1, 2] },\n}, \"    \")\n\n% hs-jsonnet -S pretty.jsonnet\n{\n    \"x\":
  [\n        1,\n        2,\n        3,\n        true,\n        false,\n        null,\n
  \       \"string\\nstring\"\n    ],\n    \"y\": {\n        \"a\": 1,\n        \"b\":
  2,\n        \"c\": [\n            1,\n            2\n        ]\n    }\n}\n```\n\nSee
  the Standard library [documentation][stdlib] for more details.\n\n\n[//]: # \"Implementation
  overview\"\n\n## Benchmarks\n\nPreliminary [results][benchmark-gist] using the benchmarks
  [here][cpp-benchmarks] \nfor comparison.\n\n## Contributing\n\nSee [CONTRIBUTING.md][contributing].\n\n##
  Acknowledgments\n\nI took inspiration from [Expresso][Expresso], [hnix][hnix], [fixplate][fixplate],
  [Disco][disco], \nand numerous other libraries. Thanks to their authors.\n\n## License\n\nSee
  [LICENSE][license].\n\nCopyright © 2020–present Alexandre Moreno\n\n[jsonnet]: https://jsonnet.org/\n[tutorial]:
  https://jsonnet.org/learning/tutorial.html\n[reference]: https://jsonnet.org/ref/language.html\n[stack]:
  https://docs.haskellstack.org/en/stable/README\n[Expresso]: https://github.com/willtim/Expresso\n[hnix]:
  https://github.com/haskell-nix/hnix\n[fixplate]: https://hackage.haskell.org/package/fixplate\n[disco]:
  https://github.com/disco-lang/disco\n[contributing]: https://github.com/moleike/haskell-jsonnet/blob/master/CONTRIBUTING.md\n[license]:
  https://github.com/moleike/haskell-jsonnet/blob/master/LICENSE\n[cpp-jsonnet]: https://github.com/google/jsonnet\n[cpp-benchmarks]:
  https://github.com/google/jsonnet/tree/master/benchmarks\n[go-jsonnet]: https://github.com/google/go-jsonnet\n[benchmark-gist]:
  https://gist.github.com/moleike/17d5de15be06b05ddad317fe1fcf95a5\n[stdlib]: https://jsonnet.org/ref/stdlib.html\n"
description-type: markdown
hash: 9d937ff544cc4ba4fb23055a7c02e2d857a4bf57390ece92117a17d1785d4bc8
homepage: https://github.com/moleike/haskell-jsonnet#readme
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: alexmorenocano@gmail.com
synopsis: Jsonnet implementaton in pure Haskell
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  data-fix: '>=0'
  filepath: '>=0'
  hedgehog: '>=0'
  jsonnet: '>=0'
  prettyprinter: '>=0'
  tasty: '>=0'
  tasty-bench: '>=0'
  tasty-golden: '>=0'
  tasty-hedgehog: '>=0'
  text: '>=0'
