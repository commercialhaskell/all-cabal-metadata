homepage: https://github.com/moleike/haskell-jsonnet#readme
changelog-type: markdown
hash: 663204ada68f516c67df6b824a56f0e0539c09605a5e2e7debaed17e5befb5b3
test-bench-deps:
  jsonnet: -any
  bytestring: -any
  ansi-wl-pprint: -any
  base: -any
  tasty-golden: -any
  text: -any
  filepath: -any
  tasty-bench: -any
  mtl: -any
  tasty-hunit: -any
  tasty: -any
maintainer: alexmorenocano@gmail.com
synopsis: Jsonnet implementaton in pure Haskell
changelog: |
  # Changelog for jsonnet

  ## Unreleased changes
basic-deps:
  semigroupoids: '>=5.3.5 && <5.4'
  exceptions: '>=0.10.4 && <0.11'
  th-utilities: ==0.2.4.2
  jsonnet: -any
  bytestring: '>=0.10.12 && <0.11'
  ansi-wl-pprint: '>=0.6.9 && <0.7'
  data-fix: '>=0.3.1 && <0.4'
  base: '>=4.15.0 && <4.16'
  parser-combinators: '>=1.3.0 && <1.4'
  deriving-compat: '>=0.5.10 && <0.6'
  unordered-containers: '>=0.2.14 && <0.3'
  text: '>=1.2.4 && <1.3'
  megaparsec: '>=9.0.1 && <9.1'
  filepath: '>=1.4.2 && <1.5'
  containers: '>=0.6.4 && <0.7'
  lens: '>=5.0.1 && <5.1'
  mtl: '>=2.2.2 && <2.3'
  hashable: '>=1.3.2 && <1.4'
  optparse-applicative: '>=0.16.1 && <0.17'
  scientific: '>=0.3.7 && <0.4'
  unbound-generics: '>=0.4.1 && <0.5'
  aeson: '>=1.5.6 && <1.6'
  template-haskell: '>=2.17.0 && <2.18'
  transformers-compat: '>=0.6.6 && <0.7'
  vector: '>=0.12.3 && <0.13'
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
author: Alexandre Moreno
latest: 0.3.0.0
description-type: markdown
description: "# haskell-jsonnet\n\n[![Actions Status](https://github.com/moleike/haskell-jsonnet/workflows/build/badge.svg)](https://github.com/moleike/haskell-jsonnet/actions)\n[![Hackage](https://img.shields.io/hackage/v/jsonnet?style=flat)](https://hackage.haskell.org/package/jsonnet)\n\n\nA
  full-fledged Haskell implementation of the [Jsonnet][jsonnet] spec.\nFor an introduction
  to the language itself, see the [tutorial][tutorial] or language [reference][reference].\nWe
  are using the same test suite used in the offical [C++][cpp-jsonnet] and [Go][go-jsonnet]
  implementation (which is fairly comprehensive).\n\n## Progress\n\nHere is the implementation
  status of the main language features:\n\n- [X] array and object comprehension\n-
  [X] array slices\n- [X] Python-style string formatting\n- [X] text blocks\n- [X]
  verbatim strings\n- [X] object-level locals\n- [ ] object-level asserts\n- [X] keyword
  parameters\n- [X] default arguments\n- [ ] top-level arguments\n- [ ] external variables\n-
  [X] hidden fields ([@CristhianMotoche](https://github.com/CristhianMotoche)) \n-
  [X] tailstrict annotation\n- [X] outermost object reference `$`\n- [X] mixin inheritence
  (operator `+` with `self` and `super`)\n- [X] field composition (operator `+:`)\n-
  [ ] multiple file output\n\n## Build\n\nUsing the [stack][stack] build tool:\n\n```console\n%
  git clone github.com/moleike/haskell-jsonnet.git\n% cd haskell-jsonnet\n% stack
  build\n```\n\n## Install\n\n```console\n% stack install # to install\n```\n\n##
  Usage\n\n```console\n% hs-jsonnet --help\nUsage: hs-jsonnet [-v|--version] [-e|--exec]
  [<filename>] \n                  [-o|--output-file <filename>] [-S|--string]\n\nAvailable
  options:\n  -v,--version             Print version of the program\n  -h,--help                Show
  this help text\n  -e,--exec                Treat filename as code\n  <filename>
  \              Jsonnet source file or stdin\n  -o,--output-file <filename>\n                           Write
  to the output file rather than stdout\n  -S,--string              Expect a string,
  manifest as plain text\n```\n\n## Output formats\n\nBy default Jsonnet programs
  evaluate to a JSON document, serialized using `aeson`. \n\nThe `std` library provides
  several methods to output other formats, e.g. \nto generate a Yaml stream instead:\n\n```
  console\n% hs-jsonnet -S -e \"std.manifestYamlStream(['a', 1, []])\"\n---\n\"a\"\n---\n1\n---\n[]\n...\n```\n\nNote
  the we need to use the option `-S` to output a verbatim string, instead of default
  JSON.\n\nSimilarly, to output prettified JSON: \n\n``` console\n% cat pretty.jsonnet
  \nstd.manifestJsonEx(\n{\n    x: [1, 2, 3, true, false, null,\n        \"string\\nstring\"],\n
  \   y: { a: 1, b: 2, c: [1, 2] },\n}, \"    \")\n\n% hs-jsonnet -S pretty.jsonnet\n{\n
  \   \"x\": [\n        1,\n        2,\n        3,\n        true,\n        false,\n
  \       null,\n        \"string\\nstring\"\n    ],\n    \"y\": {\n        \"a\":
  1,\n        \"b\": 2,\n        \"c\": [\n            1,\n            2\n        ]\n
  \   }\n}\n```\n\nSee the Standard library [documentation][stdlib] for more details.\n\n\n[//]:
  # \"Implementation overview\"\n\n## Benchmarks\n\nPreliminary [results][benchmark-gist]
  using the benchmarks [here][cpp-benchmarks] \nfor comparison.\n\n## Contributing\n\nSee
  [CONTRIBUTING.md][contributing].\n\n## Acknowledgments\n\nI took inspiration from
  [Expresso][Expresso], [hnix][hnix], [fixplate][fixplate], [Disco][disco], \nand
  numerous other libraries. Thanks to their authors.\n\n## License\n\nSee [LICENSE][license].\n\nCopyright
  © 2020–present Alexandre Moreno\n\n[jsonnet]: https://jsonnet.org/\n[tutorial]:
  https://jsonnet.org/learning/tutorial.html\n[reference]: https://jsonnet.org/ref/language.html\n[stack]:
  https://docs.haskellstack.org/en/stable/README\n[Expresso]: https://github.com/willtim/Expresso\n[hnix]:
  https://github.com/haskell-nix/hnix\n[fixplate]: https://hackage.haskell.org/package/fixplate\n[disco]:
  https://github.com/disco-lang/disco\n[contributing]: https://github.com/moleike/haskell-jsonnet/blob/master/CONTRIBUTING.md\n[license]:
  https://github.com/moleike/haskell-jsonnet/blob/master/LICENSE\n[cpp-jsonnet]: https://github.com/google/jsonnet\n[cpp-benchmarks]:
  https://github.com/google/jsonnet/tree/master/benchmarks\n[go-jsonnet]: https://github.com/google/go-jsonnet\n[benchmark-gist]:
  https://gist.github.com/moleike/17d5de15be06b05ddad317fe1fcf95a5\n[stdlib]: https://jsonnet.org/ref/stdlib.html\n"
license-name: BSD-3-Clause
