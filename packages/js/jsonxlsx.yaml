all-versions:
- 0.1.0.0
- 0.1.0.1
author: Daniel Choi
basic-deps:
  HUnit: '>=0'
  aeson: '>=0.8.0.1'
  attoparsec: '>=0'
  base: '>=4.6 && <5'
  bytestring: '>=0'
  containers: '>=0'
  old-time: '>=0'
  optparse-applicative: '>=0'
  scientific: '>=0.3.3'
  string-qq: '>=0'
  text: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  xlsx: ==0.4.1
changelog: ''
changelog-type: ''
description: "# jsonxlsx\n\nTransforms a standard JSON format to a Excel xlsx document.\n\nThis
  project is experimental; jsonxlsx's xlsx output has not been tested with\nExcel,
  only with OpenOffice.\n\n## Install\n\nYou must have a recent version of the Haskell
  Platform on your system.\n\nA prerequisite is a the xlsx fork at https://github.com/danchoi/xlsx,
  which \nmust be added to the cabal sandbox before building `jsonxlsx`.  Here are
  the steps\n\n    git clone git@github.com/danchoi/xlsx\n    git clone git@github.com/danchoi/jsonxlsx\n
  \   cd jsonxlsx\n    cabal update\n    cabal sandbox init\n    cabal sandbox add-source
  ../xlsx\n    cabal install --only-dependencies\n    cabal build\n\n    # Now copy
  dist/build/jsonxlsx/jsonxlsx to a location on your PATH\n\n## Usage\n\n```\njsonxlsx\n\nUsage:
  jsonxlsx [-a DELIM] FIELDS OUTFILE [--debug]\n  Transform JSON object steam to XLSX.
  On STDIN provide an input stream of\n  newline-separated JSON objects.\n\nAvailable
  options:\n  -h,--help                Show this help text\n  -a DELIM                 Concatentated
  array elem delimiter. Defaults to\n                           comma.\n  FIELDS                   JSON
  keypath expressions\n  OUTFILE                  Output file to write to. Use '-'
  to emit binary xlsx\n                           data to STDOUT.\n  --debug                  Debug
  keypaths\n```\n\n## Example: \n\nThis is the input JSON object stream:\n\nsample.json:\n\n```json\n{\n
  \ \"title\": \"Terminator 2: Judgement Day\",\n  \"year\": 1991,\n  \"stars\": [\n
  \   {\n      \"name\": \"Arnold Schwarzenegger\"\n    },\n    {\n      \"name\":
  \"Linda Hamilton\"\n    }\n  ],\n  \"ratings\": {\n    \"imdb\": 8.5\n  }\n}\n{\n
  \ \"title\": \"Interstellar\",\n  \"year\": 2014,\n  \"stars\": [\n    {\n      \"name\":
  \"Matthew McConaughey\"\n    },\n    {\n      \"name\": \"Anne Hathaway\"\n    }\n
  \ ],\n  \"ratings\": {\n    \"imdb\": 8.9\n  }\n}\n```\n\nThis is the command to
  turn this stream into an XLSX file:\n\n```\n< sample.json jsonxlsx \\\n  'title:\"Movie
  Title\" year stars.name:\"Movie Actors\" ratings.imdb:\"IMDB Score\"' \\\n  movies.xlsx
  \n```\n\nThis is the output (movies.xlsx):\n\n![screen](https://raw.githubusercontent.com/danchoi/jsonxlsx/master/jsonxlsxscreen.png)\n\nSee
  the [README for jsontsv](https://github.com/danchoi/jsontsv#usage) to see how to
  use `jq` \nto generate JSON object streams from nested JSON data structures.\n\n\n##
  Future improvements\n\nThe [xlsx](https://github.com/danchoi/xlsx/blob/master/src/Codec/Xlsx/Types.hs)\nlibrary
  that  `jsonxlsx` uses to generate Excel output seems to have ways to control\nthe
  column widths and other characteristics of the Excel spreadsheet.\nContributors
  are welcome to add ways of controlling these parameters to `jsonxlsx`.\n\n## Related\n\n*
  [jsontsv](https://github.com/danchoi/jsontsv)\n* [table](https://github.com/danchoi/table)\n*
  [jsonsql](https://github.com/danchoi/jsonsql)\n* [tsvsql](https://github.com/danchoi/tsvsql)\n\n
  \n"
description-type: markdown
hash: e90b5b3d20ab96a1dc5df83e949802fc0d40b6eea509cdf8197725a1245cbc86
homepage: https://github.com/mackeyrms/jsonxlsx#readme
latest: 0.1.0.1
license-name: MIT
maintainer: Mackey RMS
synopsis: json to xlsx converter
test-bench-deps: {}
