all-versions:
- 0.1.0.0
author: Daniel Choi
basic-deps:
  aeson: '>=0'
  attoparsec: '>=0'
  base: <5
  bytestring: '>=0'
  containers: '>=0'
  monads-tf: '>=0'
  optparse-applicative: '>=0'
  process: '>=0'
  scientific: '>=0'
  string-qq: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "# jsonextfilter\n\nApplies external unix filters to specified key paths
  of a JSON object stream.\n\n## Example\n\nexample.json:\n\n```json\n{\n  \"title\":
  \"Terminator 2: Judgment Day\",\n  \"year\": 1991,\n  \"stars\": [\n    {\"name\":
  \"Arnold Schwarzenegger\"},\n    {\"name\": \"Linda Hamilton\"}\n  ],\n  \"ratings\":
  {\n    \"imdb\": 8.5\n  },\n  \"description\":\"<p>Some <strong>HTML</strong></p>\"\n\n}\n{\n
  \ \"title\": \"Interstellar\",\n  \"year\": 2014,\n  \"stars\": [\n    {\"name\":\"Matthew
  McConaughey\"},\n    {\"name\":\"Anne Hathaway\"}\n  ],\n  \"ratings\": {\n    \"imdb\":
  8.9\n  },\n  \"description\":\"<p>Some <strong>more HTML</strong></p>\"\n}\n```\n\nWe
  want to transform the \"description\" fields from HTML to plain text:\n\n```bash\njsonextfilter
  'elinks -dump'  'description' < example.json  | jq -M '.' \n```\n\nOutput:\n\n```json\n{\n
  \ \"ratings\": {\n    \"imdb\": 8.5\n  },\n  \"stars\": [\n    {\n      \"name\":
  \"Arnold Schwarzenegger\"\n    },\n    {\n      \"name\": \"Linda Hamilton\"\n    }\n
  \ ],\n  \"year\": 1991,\n  \"title\": \"Terminator 2: Judgment Day\",\n  \"description\":
  \"   Some HTML\\n\"\n}\n{\n  \"ratings\": {\n    \"imdb\": 8.9\n  },\n  \"stars\":
  [\n    {\n      \"name\": \"Matthew McConaughey\"\n    },\n    {\n      \"name\":
  \"Anne Hathaway\"\n    }\n  ],\n  \"year\": 2014,\n  \"title\": \"Interstellar\",\n
  \ \"description\": \"   Some more HTML\\n\"\n}\n```\n\nMore than one keypath can
  be specified in the keypaths argument string. Separate keypaths with spaces. The
  external filter will be applied to all of them, e.g.\n\n```bash\njsonextfilter 'elinks
  -dump'  'description review' < example.json  | jq -M '.' \n```\n\nCurrently only
  ONE external filter command can be given. If you want to apply a pipeline of commands,
  wrap it in a bash script.\n\nThe external filter will only be applied to STRING
  values. Number and boolean values are untouched.\n\n## Preconditions\n\nYou can
  designate a pre-filter to determine whether the main filter should run\ndepending
  on the exit code of the pre-filter:\n\n```bash\njsonextfilter -p 'grep -q more'
  'elinks -dump' description  < example.json   | jq '.' -M\n```\n\nThis causes `elinks
  -dump` to be applied only to \"description\" values that contain the string \"more\":\n\n```json\n{\n
  \ \"ratings\": {\n    \"imdb\": 8.5\n  },\n  \"stars\": [\n    {\n      \"name\":
  \"Arnold Schwarzenegger\"\n    },\n    {\n      \"name\": \"Linda Hamilton\"\n    }\n
  \ ],\n  \"year\": 1991,\n  \"title\": \"Terminator 2: Judgment Day\",\n  \"description\":
  \"<p>Some <strong>HTML</strong></p>\"\n}\n{\n  \"ratings\": {\n    \"imdb\": 8.9\n
  \ },\n  \"stars\": [\n    {\n      \"name\": \"Matthew McConaughey\"\n    },\n    {\n
  \     \"name\": \"Anne Hathaway\"\n    }\n  ],\n  \"year\": 2014,\n  \"title\":
  \"Interstellar\",\n  \"description\": \"   Some more HTML\\n\"\n}\n```\n\n"
description-type: markdown
hash: 937bc4a821e434d99388cf66ebfe382593089835cfe96b507f4ea5a217d13eae
homepage: https://github.com/mackeyrms/jsonextfilter#readme
latest: 0.1.0.0
license-name: MIT
maintainer: MackeyRMS
synopsis: Filter select values in JSON objects to unix programs
test-bench-deps: {}
