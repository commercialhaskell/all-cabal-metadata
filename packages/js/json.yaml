all-versions:
- 0.3.3
- 0.3.6
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- 0.9.1
- 0.9.2
- 0.9.3
- '0.10'
- '0.11'
author: Galois Inc.
basic-deps:
  array: '>=0'
  base: '>=4.9 && <5'
  bytestring: '>=0'
  containers: '>=0'
  mtl: '>=0'
  parsec: '>=0'
  pretty: '>=0'
  syb: '>=0.3.3'
  text: '>=0'
changelog: "Version 0.11\n  * Limit floating-point range to that of Double to avoid
  allocation\n    overflows when constructing Rationals\n\nVersion 0.10\n  * Use MonadFail,
  so that it works with GHC 8.8\n\nVersion 0.9.1\n  * Merge-in contributions from
  Neil Mitchell to support GHC 7.10\n\nVersion 0.9\n  * Merge-in contributions from
  Neil Mitchell to accomodate working with HEAD.\n\nVersion 0.8\n  * Add `Applicative`
  instance for `GetJSON`\n\nVersion 0.4.4: released 2009-01-17; changes from 0.4.2\n\n
  \ * Fixes handling of unterminated strings.\n\nVersion 0.4.3: released 2009-01-17;
  changes from 0.4.2\n\n  * optimize some common cases..string and int literals.\n
  \   Reduces parse times by > 2x on larger dict inputs containing\n    both kinds
  of lits.\n\nVersion 0.4.2: released 2009-01-17; changes from 0.4.1\n\n  * fixed
  Cabal build issues with various versions of 'base' and Data.Generic\n  * fixed whitespace-handling
  bug in Parsec-based frontend.\n\nVersion 0.4.1: released 2009-01-12; changes from
  0.3.6\n\n  * Addition of extra JSON instances:\n       - IntMap, Set, Array, IntSet\n
  \      \n  * Dropped initial letter case-lowering for constructors: \n       - Maybe's
  constructors are mapped to \"Nothing\",\"Just\".\n       - Either's constructors
  are mapped to \"Left\", \"Right\".\n\n  * Ordering's are represented by their constructor
  names (was\n    funky int-mapping.)\n\n  * JSON.Text.Result is now an instance of
  MonadError; contributed\n    by Andy Gimblett.\n\n  * Included Lennart Augustsson's
  contributed generic JSON encoder,\n    in Text.JSON.Generic\n\n  * Optional JSON
  dict-mapping for Data.Map and Data.IntMap\n\n"
changelog-type: text
description: |-
  JSON (JavaScript Object Notation) is a lightweight data-interchange
  format. It is easy for humans to read and write. It is easy for
  machines to parse and generate.  It is based on a subset of the
  JavaScript Programming Language, Standard ECMA-262 3rd Edition -
  December 1999.

  This library provides a parser and pretty printer for converting
  between Haskell values and JSON.
description-type: haddock
hash: 3afa37628415992fe648da6f002672f5a0119aa5d49022bf928d10a927c29318
homepage: ''
latest: '0.11'
license-name: BSD-3-Clause
maintainer: Iavor S. Diatchki (iavor.diatchki@gmail.com)
synopsis: Support for serialising Haskell to and from JSON
test-bench-deps: {}
