homepage: https://github.com/owensmurray/json-spec-openapi
changelog-type: ''
hash: 71f8a649a3071966ff3eb850bc6d85ee8a22cf3ddc238208a6659bb485a778eb
test-bench-deps:
  bytestring: '>=0.11.4.0 && <0.12'
  base: '>=4.17 && <4.18'
  time: '>=1.12.2 && <1.13'
  hspec: '>=2.11.1 && <2.12'
  text: '>=2.0.2 && <2.1'
  json-spec-openapi: -any
  lens: '>=5.2.2 && <5.3'
  openapi3: '>=3.2.3 && <3.3'
  json-spec: '>=0.2.0.0 && <0.3'
  scientific: '>=0.3.7.0 && <0.4'
  aeson: '>=2.1.2.1 && <2.2'
maintainer: rick@owensmurray.com
synopsis: json-spec-openapi
changelog: ''
basic-deps:
  base: '>=4.17 && <4.18'
  text: '>=2.0.2 && <2.1'
  lens: '>=5.2.2 && <5.3'
  openapi3: '>=3.2.3 && <3.3'
  json-spec: '>=0.2.0.0 && <0.3'
  aeson: '>=2.1.2.1 && <2.2'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Rick Owens
latest: 0.1.0.2
description-type: markdown
description: |
  # json-spec-openapi

  This package provides a way to produce
  [`openapi3`](https://hackage.haskell.org/package/openapi3) documentation from a
  [`json-spec`](https://hackage.haskell.org/package/json-spec-0.1.0.0)
  specification.

  ## Example

  Given this data type:

  ```haskell
  data User = User
    {      name :: Text
    , lastLogin :: UTCTime
    }
    deriving ToSchema via (EncodingSchema User) -- <-- ToSchema instance defined here
  instance HasJsonEncodingSpec User where
    type EncodingSpec User =
      JsonObject
        '[ '("name", JsonString)
         , '("last-login", JsonDateTime)
         ]
    toJSONStructure user =
      (Field @"name" (name user),
      (Field @"last-login" (lastLogin user),
      ()))
  ```

  Calling `Data.Aeson.encode (Data.OpenApi3.toSchema (Proxy :: Proxy User))`
  will produce the following Schema:

  ```json
  {
    "additionalProperties": false,
    "properties": {
      "last-login": {
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "required": [
      "name",
      "last-login"
    ],
    "type": "object"
  }
  ```
license-name: MIT
