all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
author: Rick Owens
basic-deps:
  aeson: '>=2.2.1.0 && <2.3'
  base: '>=4.19.0.0 && <4.21'
  insert-ordered-containers: '>=0.2.5.3 && <0.3'
  json-spec: '>=0.5.0.0 && <1.1'
  lens: '>=5.2.3 && <5.4'
  openapi3: '>=3.2.4 && <3.3'
  text: '>=2.1 && <2.2'
changelog: ''
changelog-type: ''
description: |
  # json-spec-openapi

  This package provides a way to produce
  [`openapi3`](https://hackage.haskell.org/package/openapi3) documentation from a
  [`json-spec`](https://hackage.haskell.org/package/json-spec-0.1.0.0)
  specification.

  ## Example

  Given this data type:

  ```haskell
  data User = User
    {      name :: Text
    , lastLogin :: Maybe UTCTime
    }
    deriving ToSchema via (EncodingSchema User) -- <-- ToSchema instance defined here
  instance HasJsonEncodingSpec User where
    type EncodingSpec User =
      JsonObject
        '[ Required "name" JsonString
         , Optional "last-login" JsonDateTime
         ]
    toJSONStructure user =
      (Field @"name" (name user),
      (fmap (Field @"last-login") (lastLogin user),
      ()))
  ```

  Calling `Data.Aeson.encode (Data.OpenApi3.toSchema (Proxy :: Proxy User))`
  will produce the following Schema:

  ```json
  {
    "additionalProperties": false,
    "properties": {
      "last-login": {
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  }
  ```
description-type: markdown
hash: 370920b2594a97fa0e23f01efa3a8ed86664317241bae80aace07f9bce584ee7
homepage: https://github.com/owensmurray/json-spec-openapi
latest: 0.3.1.2
license-name: MIT
maintainer: rick@owensmurray.com
synopsis: json-spec-openapi
test-bench-deps:
  aeson: '>=2.2.1.0 && <2.3'
  base: '>=4.19.0.0 && <4.21'
  hspec: '>=2.11.1 && <2.12'
  insert-ordered-containers: '>=0.2.5.3 && <0.3'
  json-spec: '>=0.5.0.0 && <1.1'
  json-spec-openapi: '>=0'
  lens: '>=5.2.3 && <5.4'
  openapi3: '>=3.2.4 && <3.3'
  text: '>=2.1 && <2.2'
  time: '>=1.12.2 && <1.13'
