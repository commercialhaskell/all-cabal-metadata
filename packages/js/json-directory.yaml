all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Luke Clifton
basic-deps:
  aeson: '>=2.2.2.0'
  attoparsec-aeson: '>=2.2.2.0'
  base: '>=4.11 && <5.0'
  bytestring: '>=0'
  directory: '>=0'
  filepath: '>=0'
  json-directory: '>=0'
  mtl: '>=0'
  process: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
changelog: |
  # Revision history for json-directory

  ## 0.1.0.1 -- 2020-06-02

  * Add rules engine to specify how to interpret a file

  ## 0.1.0.0 -- 2019-12-17

  * Initial version
changelog-type: markdown
description: |+
  # JSON Directory

  [![](https://img.shields.io/hackage/v/json-directory.svg?colorB=%23999&label=json-directory)](http://hackage.haskell.org/package/json-directory)
  [![](https://builds.sr.ht/~lukec/json-directory/commits/nix.yml.svg)](https://builds.sr.ht/~lukec/json-directory/commits/nix.yml)

  Provides utilities for reading JSON structures out of directories. Directory
  entries become keys in a map, and the values are sourced from the contets of
  each entry.

  By default

   * Directories are recured into
   * Files ending with `.json` are read as JSON values
   * Everything else is interpreted as a string

  However, these can be modified with rules, that allow for interpreting
  any sort of file as JSON.

  The [example](./example) directory in this repository would result in
  the following JSON value.

  ```json
  {
    "empty": {},
    "a": "This is files will have its contents written into a JSON string.\n",
    "d": {
      "example": "Sometimes it's convenient to embed some raw JSON"
    },
    "b": 42,
    "c": {
      "nested": "You can nest directories to create a tree structure.\n"
    }
  }
  ```

  ## `jsondir`

  This package also includes an executable for turning directories into JSON
  blobs.

  ```
  jsondir [--help] [--rule <SUFFIX> <FILTER> ...]
          [--[no-]default{s,-json,-text}] <ROOT> ...

    Turn a directory structure into a JSON value

   --rule <SUFFIX> <FILTER>     Filter the contents of files with the given
                                SUFFIX with FILTER. The default rules use .json
                                files as is, and treat everything else as strings.
                                Can be specified multiple times. Rule are tried in
                                the order specified.
   --[no-]defaults              Enable or disable the default rules. Default on.
   --[no-]default-json          Enable or disable the .json file rule
   --[no-]default-text          Enable or disable the raw file to JSON string rule.
   <ROOT>                       Directory root to turn into a JSON value

   EXAMPLE
    jsondir --rule '.yml' yaml2json ./my-dir
  ```

description-type: markdown
hash: ae9e2cc68a8fa8785ace1e2bbde3dee233512e1e970d3a80a7f90c1a31ba2d66
homepage: ''
latest: 0.1.0.3
license-name: BSD-3-Clause
maintainer: lukec@themk.net
synopsis: Load JSON from files in a directory structure
test-bench-deps: {}
