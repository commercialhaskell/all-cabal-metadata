all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.2.0
- 0.0.3.0
author: Taku Terao
basic-deps:
  aeson: '>=0.11'
  base: '>=4.10 && <5'
  containers: '>=0.5 && <0.6'
  ghc-prim: '>=0.5 && <0.6'
  hashable: '>=1.2.7 && <1.2.8'
  microlens: '>0.4.0'
  microlens-ghc: '>0.4.0'
  mtl: '>=2.2 && <2.3'
  template-haskell: '>=2.11'
  text: '>=1.2.2'
  transformers: '>=0.5 && <0.6'
  unordered-containers: '>=0.2.8'
changelog: |2+

  ## [0.0.3] - 2018-5-11
  - Handle changes of ``GHC.OverloadedLabels`` in ``base`` library.

changelog-type: markdown
description: "# json-tracer\nType-safe polymorphic json-structured tracing library\n\n[hackage](https://hackage.haskell.org/package/json-tracer)\n\nThis
  library provides two modules\n- `Data.PolyDict`: type-safe, polymorphic, and json-structured
  dictionary\n- `Control.Monad.CTrace`: a monad that enables contextual tracing\n\n#
  PolyDict\nPolyDict is a hash dict like JSON, but it is typed.\n`Dict n` is a dictinary
  whose fields are typed accoding to `Assoc n`. \nThat is, each field has type `Key
  k` (which is a proxy of type-level symbol `k`) and \n`Assoc n k` is the type of
  values associated with the key. \n\nBasically, users define a `data` that represents
  the namespace of the `Dict`.\nFor example:\n```haskell\ndata Main\n```\n\nThen,
  one can define the type of `Dict n` by adding rules for type family `Assoc n k`
  like this:\n```haskell\ntype instance Assoc Main \"elapsed_time\" = NominalDiffTime\ntype
  instance Assoc Main \"tag\" = String\n```\n\nThe RHS type of the `Assoc n k` must
  satisfy the `DictValue v` constraint.\n```hakell\ntype family DictValue v :: Constraint
  where\n    DictValue v = (Eq v, Show v, ToJSON v)\n```\nAs far as the author knows,
  any `ToJSON v` value satisfy this constraint.\n\nNote: `Dict n` is allowed as the
  RHS type as `Dict n` satisfies the `DictValue` constraint. Hence recursive structures
  can be handled.\n\nSince the definition of type family is open, users don't have
  to define all rules at the same module.\nIt's totally free to add other fields on
  demand, as long as there are no conflicting keys.\nWhen such confliction occurs,
  the compiler reports it as an error.\n```haskell\ntype instance Assoc Main \"tag\"
  = Int \n-- this would be compile error because the key \"tag\" is conflicting to
  the previous definition.\n```\n\nValues in `Dict` are obtained and updated by `lookup`
  and `insert` function.\n```haskell\nlookup :: (KnownSymbol k, DictValue v, Assoc
  n k ~ v) => Key k -> Dict n -> Maybe v\ninsert :: (KnownSymbol k, DictValue v, Assoc
  n k ~ v) => Key k -> v -> Dict n -> Dict n\n```\nWith the `OverloadedLabels` extention,
  user can write `#foo` as the key for the field `\"foo\"`.\n\n## Examples\n```haskell\nghci>
  let v = insert #tag \"sample\" empty \nghci> v\n{\"tag\": \"sample\"}\nghci> lookup
  #tag v\nJust \"sample\"\nghci> lookup #elapsed_time v\nNothing\n```\n\nInstead,
  lenses can be used to access thouse fields with `access` function.\n```haskell\naccess
  \ :: forall n k v. (KnownSymbol k, DictValue v, Assoc n k ~ v) => Key k -> Lens'
  (Dict n) (Maybe v)\naccess' :: forall n k v. (KnownSymbol k, DictValue v, Assoc
  n k ~ v) => Key k -> v -> Lens' (Dict n) v\n```\n\n## Examples\n```haskell\nghci>
  let v = empty & access #tag ?~ \"sample\"\nghci> v\n{\"tag\": \"sample\"}\nghci>
  v ^. access #tag\nJust \"sample\"\n```\n\n# Tracer Monad\n`TracerT c m a` is the
  type of a monad transformer that enables contextual tracing.\n`update` and `zoom`
  operations can be performed in this monad transformer.\n\n`update` is the action
  to modifies the value of context.\n```haskell\nupdate :: Monad m => (c -> c) ->
  TracerT c m ()\n```\nFor example, you can count the number of calls of function
  `f` \nby inserting `update succ :: TracerT Int m ()` for each call of `f`.\n\nNote:
  although you can modify the value, you cannot get the current value in this monad.
  \nThis is intentional, to make it easy to disable tracing.\n\n`zoom` is the action
  to change the context of tracing.\n```haskell\nzoom :: ASetter' c c' -> TracerT
  c' m a -> TracerT c m a\n```\n\n# Complete Example\n```haskell\n{-# LANGUAGE TypeFamilies,
  DataKinds, OverloadedLabels #-}\nimport Data.PolyDict\nimport Control.Monad.CTrace\nimport
  Lens.Micro\nimport Control.Monad\n\ndata Main\ndata Sub\n\ntype instance Assoc Main
  \"sub\" = Dict Sub\ntype instance Assoc Sub  \"count\" = Int\n\nsubFunc :: Monad
  m => Int -> TracerT (Dict Sub) m ()\nsubFunc n = replicateM_ n (update (access'
  #count 0 %~ succ))\n\nmainFunc :: Monad m => TracerT (Dict Main) m ()\nmainFunc
  = zoom (access' #sub empty) (subFunc 42)\n\nmain :: IO ()\nmain = do\n    (_,d)
  <- ioTracerT empty mainFunc\n    print d\n-- > {\"sub\": {\"count\": 42}}\n```\n"
description-type: markdown
hash: 8a8bfa5114661a62b25df35e160bd028d8b224f01208c32e81e91024d7bdc297
homepage: https://github.com/autotaker/json-tracer#readme
latest: 0.0.3.0
license-name: BSD-3-Clause
maintainer: autotaker@gmail.com
synopsis: A polymorphic, type-safe, json-structured tracing library
test-bench-deps:
  aeson: '>=0'
  aeson-pretty: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  hspec: '>=2.2'
  hspec-core: '>=2.2'
  hspec-discover: '>=0'
  hspec-expectations: '>=0.7'
  json-tracer: '>=0'
  microlens: '>=0'
  mtl: '>=0'
  time: '>=0'
