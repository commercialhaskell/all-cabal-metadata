all-versions:
- 4.0.0
author: Michal J. Gajda
basic-deps:
  GenericPretty: '>=0'
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=4.0.0 && <5.0'
  bytestring: '>=0'
  containers: '>=0'
  data-default: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  json-to-type: '>=0'
  lens: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  pretty: '>=0'
  process: '>=0'
  run-haskell-module: '>=0'
  scientific: '>=0'
  smallcheck: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  uniplate: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  yaml: '>=0'
changelog: "Changelog\n=========\n    4.0.0  Mar 2022\n        * fork from json-to-type,
  merge json-alt. rename json-to-type.\n          delete stack. add flake.\n          Set
  module paths according to package name.\n\n      \n    3.1.3  Mar 2022\n        *
  Relaxed bounds, fixes #47.\n\n    3.1.2  Apr 2020\n        * Future-proof nested
  code gen interface\n          with parametric `CodeFrag`ment that can\n          refer
  to thing that is not a type.\n\n    3.1.1  Apr 2020\n        * Expose JsonToType.Nested\n\n
  \   3.1.0  Apr 2020\n        * New, experimental interface for nesting\n          generated
  types by other code generators.\n\n    3.0.5  Mar 2020\n        * Using package
  import from `run-haskell-module` by default.\n        * Expose commonly used functions
  for:\n            - normalizing Haskell type names,\n            - formatting JSON
  Autotype types in Haskell\n\n    3.0.4  Mar 2020\n        * Do not try to test compilation
  when module is written to stdout.\n        * Update lens dependency bounds\n\n    3.0.3
  \ Mar 2020\n        * Separate running Haskell modules in `run-haskell-module` package.\n\n
  \   3.0.2  Sep 2019\n        * Relax `lens`, `hashable` version bounds for GHC 8.8.1
  update.\n\n    3.0.0  Nov 2018\n        * Distinguishing integers and floats.\n
  \       * Hide all API beside Alternative (as unused outside generator).\n        *
  Add fixity for alt (#20)\n        * Use `eitherDecode` instead of `decode` to get
  better error messages.\n        * Split JsonToType.Alternative to `json-alt`.\n\n
  \   2.0.2  Nov 2018\n        * Clean up the tests.\n        * Remove compatibility
  with Aeson versions earlier than 1.2.1.\n        * Removed all CPP macros\n        *
  Add --version\n\n    2.0.1  Nov 2018\n        * Better error reporting when parsing
  JSON.\n\n    2.0.0  Jun 2018\n        * Elm support completed with untagged unions\n
  \       * Add HaskellStrict option for running tests with -Werror, -Wall by default.\n
  \       * Make random tests run with -Werror, -Wall by default\n        * Update
  dependencies to Aeson ranged between 1.2.1-1.4\n\n    1.1.2  Mar 2018\n        *
  Fixed maintainer list.\n\n    1.1.1  Mar 2018\n        * Fixed test builds (for
  Haskell).\n\n    1.1.0  Mar 2018\n        * Partial support Elm code generation.\n\n
  \   1.0.19  Nov 2017\n        * Allow to have a custom name for toplevel data type.\n\n
  \   1.0.18  Nov 2017\n        * Fixed unit tests.\n        * Fixed import for inclusion
  in Stackage.\n\n    1.0.17  Nov 2017\n        * Fixed build and test issues.\n\n
  \   1.0.16  Nov 2017\n        * Dependencies updated to resolve #12, #15.\n        *
  Fixed orphan Generic for Aeson >= 1.2.1 (#14).\n        * Cleaned option parsing
  code.\n        * Qualify GHC.Generics import.\n        * Switch to optparse-applicative\n
  \       * Option to explicitly unify selected entries\n\n    1.0.15  Dec 2016\n
  \       * Support YAML input.\n\n    1.0.14  May 2016\n        * Update to latest
  lens.\n\n    1.0.13  Mar 2016\n        * Bumped up hint upper bound for v0.5.\n\n
  \   1.0.12  Mar 2016\n\n        * Fixed issue #8 - misrepresenting Double as Int.\n
  \       * Fixed issue #9 - efficient formatting with new Aeson-0.10 builder (toEncoding.)\n\n
  \   1.0.11  Mar 2016\n\n        * Updated to GHC 8.0\n\n    1.0.10  Sep 2015\n\n
  \       *Â Fixed bug appeared with aeson 0.10 breaking change:\n\thttps://github.com/bos/aeson/issues/287\n\n
  \   1.0.8  Sep 2015\n\n        * Dependency bump for lens 4.13 and aeson 0.10.\n\n
  \   1.0.7  Jul 2015\n\n        * Dependency bump for lens and vector.\n\n    1.0.6
  \ Jun 2015\n\n        * Make lens and aeson versions consistent in the *.cabal file.\n\n
  \   1.0.3-1.0.5  Jun 2015\n\n        * Bumped Aeson dependency up.\n        * Tiny
  docs corrections.\n\n    1.0.2  Jun 2015\n\n        * Relaxed dependency for lens-4.11.\n\n
  \   1.0.1  Apr 2015\n\n        * Relaxed dependency to lens-4.10.\n\n    1.0  Apr
  2015\n\n        * First stable release.\n\n    0.5  Apr 2015\n\n        * Reduced
  name space pollution when generating code.\n          Now all valid JSON test examples
  do work.\n        * Corrected build failure on GHC 7.8.4\n\n    0.4  Apr 2015\n\n
  \       * Release candidate for current functionality.\n\n    0.3  Apr 2015\n\n
  \       * Passed all smallcheck/quickcheck tests.\n        * Approaching release
  candidate.\n\n    0.2.5.13  Apr 2015\n\n        * Correctly handling lone option,
  not yet union with optionality.\n          Fixed: #3.\n\n    0.2.5.12  Apr 2015\n\n
  \       * Added typechecking before and after type unification.\n        * Added
  shrink for more informative QuickCheck testing.\n        * Tested mostly using GHC
  7.10.\n\n    0.2.5.11  Mar 2015\n\n        * Add short versions of command line
  flags: -o, -d, and -t.\n\n    0.2.5.10  Mar 2015\n\n        * Bump up lens dependency.\n\n
  \   0.2.5.8  Mar 2015\n\n        * Updated tests and build config.\n\n    0.2.5.7
  \ Mar 2015\n\n        * Fixed documentation anchors, and unit test classification
  for failures.\n\n    0.2.5.6  Mar 2015\n\n        * Relaxed upper bounds for lens
  4.8.\n\n    0.2.5.5  Mar 2015\n\n        * (Skipped this version number by mistake.)\n\n
  \   0.2.5.4  Dec 2014\n\n        * Relaxed upper bounds for new lens.\n\n    0.2.5.3
  \ Dec 2014\n\n        * Relaxed upper bounds again.\n\n    0.2.5.2  Dec 2014\n\n
  \       * Updated metainfo, relaxed upper bounds for GHC 7.10.\n\n    0.2.5.0  Nov
  2014\n\n        * Nicer union type syntax in JsonToType.Alternative.\n\n    0.2.4.0
  \ Nov 2014\n\n        * To assure proper treatment of unions,\n          I make
  them with JsonToType.Alternative type instead of Either.\n\n    0.2.3.0  Nov 2014\n\n
  \       * Explicit JSON parser generation to avoid conflicts between Haskell keywords
  and field names.\n        * Renaming of Haskell field names with a prefix of object
  name (data type.)\n\n    0.2.2.0  Nov 2014\n\n        * GenerateJSONParser may now
  take multiple input samples to produce single parser.\n        * Fixed automated
  testing for all example files.\n\n    0.2.1.4  Oct 2014\n\n        * Added examples
  to the package distribution.\n\n    0.2.1.3  Oct 2014\n\n        * Cleaned up package.\n
  \       * Changelog in markdown format.\n\n    0.2.1  Oct 2014\n\n        * Added
  option to use it as a filter ('-' is accepted input name.)\n\n    0.2.0  Oct 2014\n\n
  \       * First release to Hackage.\n        * Handling of proper unions, and most
  examples.\n        * Automatically tested on a wide range of example documents (see\n
  \       tests/)\n        * Initial documentation in README.md.\n\n    0.1.0  July
  2014\n\n\t* First experiments uploaded to GitHub, and discussed to\n\tHackerSpace.SG.\n"
changelog-type: markdown
description: |
  json-to-type
  =============
  Fork of [json-autotype](https://github.com/migamake/json-autotype).
  It just builds and such.

  Takes a JSON format input, and generates automatic Haskell type declarations.

  Parser and printer instances are derived using [Aeson](http://hackage.haskell.org/package/aeson).

  The program uses union type unification to trim output declarations. The types of same attribute tag and similar attribute set, are automatically unified using recognition by attribute set matching. (This option can be optionally turned off, or a set of unified types may be given explicitly.) `:|:` alternatives (similar to `Either`) are used to assure that all `JSON` inputs seen in example input file are handled correctly.

  Details on official releases are on [Hackage](https://hackage.haskell.org/package/json-to-type)
  We currently support code generation to [Haskell](https://www.haskell.org), and [Elm](https://elm-lang.org).

  USAGE:
  ======
  After installing with `cabal install json-to-type`, you might generate stub code for the parser:

  ```
      json-to-type input1.json ... inputN.json -o MyFormat.hs
  ```

  Then you might test the parser by running it on an input file:

  ```
      runghc MyFormat.hs input.json
  ```

  At this point you may see data structure generated automatically for you.
  The more input files you give to the inference engine `json-to-type`,
  the more precise type description will be.

  Algorithm will also suggest which types look similar, based on a set of attribute names,
  and unify them unless specifically instructed otherwise.

  The goal of this program is to make it easy for users of big JSON APIs to generate entries from
  example data.

  Occasionally you might find a valid JSON for which `json-to-type` doesn't generate a correct parser.
  You may either edit the resulting file _and_ send it to the author as a test case for future release.

  Patches and suggestions are welcome.

  You can run [with Docker](https://hub.docker.com/r/migamake/json-to-type/):
  ```
  docker run -it migamake/json-to-type
  ```

  EXAMPLES:
  =========

  The most simple example:
  ```
      {
          "colorsArray":[{
                  "colorName":"red",
                  "hexValue":"#f00"
              },
              {
                  "colorName":"green",
                  "hexValue":"#0f0"
              },
              {
                  "colorName":"blue",
                  "hexValue":"#00f"
              }
          ]
      }
  ```

  It will produce the module with the following datatypes and TH calls for JSON parser derivations:
  ```
      data ColorsArray = ColorsArray {
          colorsArrayHexValue    :: Text,
          colorsArrayColorName :: Text
        } deriving (Show,Eq)

      data TopLevel = TopLevel {
          topLevelColorsArray :: ColorsArray
        } deriving (Show,Eq)
  ```
  Note that attribute names match the names of JSON dictionary keys.

  Another example with ambiguous types:
  ```
      {
          "parameter":[{
                  "parameterName":"apiVersion",
                  "parameterValue":1
              },
              {
                  "parameterName":"failOnWarnings",
                  "parameterValue":false
              },
              {
                  "parameterName":"caller",
                  "parameterValue":"site API"
              }]
      }
  ```
  It will produce quite intuitive result (plus extra parentheses, and class derivations):

  ```
      data Parameter = Parameter {
          parameterParameterValue :: Bool :|: Int :|: Text,
          parameterParameterName :: Text
        }

      data TopLevel = TopLevel {
          topLevelParameter :: Parameter
        }
  ```

  Real-world use case examples are provided in the package [source repository](https://github.com/mgajda/json-to-type/tree/master/test).

  Methodology:
  ============
  1. Json-To-Type uses its own [union type system](https://github.com/mgajda/json-to-type/blob/master/JsonToType/Type.hs) to derive types from JSON documents as the first step.
  2. Then it finds all those records that have 90% of the same key names, and suggest them as similar enough to merit treating as instances of the same type. (Note that this is optional, and can be tuned manually.)
  3. Last step is to derive unique-ish type names - we currently do it by concatenating the name of the container and name of the key. (Please open PR, if you want something fancy about that - initial version used just key name, when it was unique.)
  4. Finally it generates [Haskell](https://www.haskell.org/) or [Elm](http://elm-lang.org/) code for the type.

  Combination of robust [*union type system*](https://github.com/mgajda/json-to-type/blob/master/JsonToType/Type.hs), and heuristic makes this system extremely reliable.
  Main test is QuickCheck-based generation of random JSON documents, and checking that they are all correctly parsed by resulting parser.

  More details are described in [Haskell.SG meetup presentation](https://engineers.sg/video/json-to-type-1-0-haskell-sg--429).

  Other approaches:
  =================

  * There is a [TypeScript type provider](https://jvilk.com/MakeTypes/), and [PLDI 2016 paper](https://dl.acm.org/citation.cfm?id=2908115) on solving this problem using <em>preferred type shapes</em> instead of union types.
  One can think about it as a alternative theory that gives very similar results, with more complicated exposition. It also does not tackle the problem of tagged records. It also does not attempt to <em>guess</em> unification candidates in order to reduce type complexity.
  * There *was* a [json-sampler](https://maxs.io/generating-types-from-json-samples/) that allows to make simpler data structure from JSON examples, but doesn't seem to perform unification, nor is it suitable for big APIs.

  * [PADS project](https://www.cs.princeton.edu/~dpw/papers/padsml06.pdf) is another attempt to automatically infer types to treat <em>arbitrary</em> data formats (not just JSON). It mixes type declarations, with parsing/printing information in order to have a consistent view of both. It does not handle automatic type inference though.
  * [JSON Schema generator](https://www.newtonsoft.com/jsonschema/help/html/GenerateSchema.htm) uses .NET types to generate JSON Schema instead (in opposite direction.) Similar schema generation is [used here](https://sixgun.wordpress.com/2012/02/09/using-json-net-to-generate-jsonschema/)
  * Microsoft Developer Network advocates use of [Data Contracts](https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/using-data-contracts) instead to constrain possible input data.
  * [QuickType](https://github.com/quicktype/quicktype) uses [Markov chains heuristic](https://blog.quicktype.io/markov/) instead of theory
description-type: markdown
hash: db59301147904b6ea842bf52c3ded24d620ee3a70325c9d5f0852e51ce203ab3
homepage: https://github.com/jappeace/json-to-type.git#readme
latest: 4.0.0
license-name: BSD-3-Clause
maintainer: |-
  simons@cryp.to,
  mjgajda@gmail.com
synopsis: Automatic type declaration for JSON input data
test-bench-deps:
  GenericPretty: '>=0'
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=4.0.0 && <5.0'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  json-to-type: '>=0'
  lens: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  pretty: '>=0'
  process: '>=0'
  scientific: '>=0'
  smallcheck: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  uniplate: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
