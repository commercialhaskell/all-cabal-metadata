homepage: https://github.com/fumieval/objective
changelog-type: markdown
hash: 4210f670ad02e83b53c9b1d3a1b0f8066255f01949a39b32145ad3413377bd6a
test-bench-deps: {}
maintainer: Fumiaki Kinoshita <fumiexcel@gmail.com>
synopsis: Composable objects
changelog: |
  1.3
  ----
  * Supported GHC 9.0
  * Removed `unfoldOM`
  * Removed `apprisesOf`
  * Removed `withBuilder`
  * Trimmed unnecessary dependencies

  1.2
  ----

  * Removed `iterObject` and `iterative`
  * Removed `Data.Functor.Request`

  1.1.2
  ----

  * Removed `either` dependency

  1.1
  ----
  * Removed `HProfunctor`, `(..-)`, `invokeOnSTM`, `newSTM`, `snapshot`
  * Added `(?-)`

  1.0.5
  ----
  * Added `filterO` and `filteredO`
  * Renamed `announcesOf` to `invokesOf`
  * Added `invokes`
  * Added `(@!=)`
  * Shaved unnecessary `Monoid r` off in `apprisesOf`

  1.0.4
  ----
  * Simplified `Instance`
  * Added `snapshot`
  * Added `cascade`, `cascadeObject`
  * Added `announcesOf`
  * Added `(@||@)`
  * Safe Haskell

  1.0.3
  ----
  * Added `apprisesOf`
  * Added `(@~)`

  1.0.2
  ----
  * Made `(.-)` exception-safe

  1.0.1
  ----
  * Switched to use TMVar for instances
  * Added atomic operations
  * Add `apprises`
  * Re-added `accept`
  * Added `(>~~>)`
  * Added `accumulator`

  1.0
  ----
  * No longer support `extensible`, `elevator`, and `minioperational`
  * Removed `Data.Functor.PushPull`
  * Removed `Control.Object.Process`
  * Removed `Control.Object.Stream`
  * Removed `Control.Monad.Objective`
  * Added `apprise`
  * Generalized `(^>>@)` and `(@>>^)` so that they also work on instances

  0.6.5
  ----
  * Supported `elevator >= 0.2`.

  0.6.3.1
  ----
  * Reverted the fixity.

  0.6.3
  ----
  * Added `Variable`, an alias for `variable` objects.
  * Added `Mortal`.
  * Increased fixity of invocation operators to 5.
  * Added stream connection operators.
  * Added `transit` and `animate`.

  0.6.2
  ----
  * Added `announce`, `announceMaybe` and `announceMaybeT` which invoke a method for every objects in a container.
  * Added `(@**@)` and `(@||@)`.
  * Renamed `(.>>.)` to `(@>>@)`, `.|>.` to `(@|>@)` for consistency.
  * Added `filterPush`, `bipush`, `bipull`.
  * Added `iterObject`, `iterTObject`, `iterative`, `iterativeT` for free monads.
  * Renamed `runSequential` to `(@!)`.
  * Added combinators for `ReifiedProgramT`: `(@!!)` and `sequentialT`.
  * Changed the semantics of `variable` to accept `StateT`.
  * Added `flyweight'` that relies on HashMap.
  * Added `MonadObjective` constraint

  0.6.1
  -----
  * Fixed the wrong constraints of `request`

  0.6
  -----
  * `PushPull` has more `Floors`
  * Added `Applicative` instance for `Request`
  * Reformed around Control.Monad.Objective
    * Instance f g m ==> Inst m f g
    * `invoke` takes two transformations for lifting
    * Added lifted versions of `new`: `newIO` and `newST`

  0.5.2
  -----
  * Added Process
  * Added `runSequential`, `sequential` for operational monad
  * Added `flyweight`

  0.5.1
  -----
  * Added PushPull functor
  * Removed `sequential`

  0.5
  -----
  * Lift has gone
  * Use elevator instead of Lift
  * Moved Request to a separate module

  0.4
  -----
  * Added Request functor along with Lift
  * Supported "extensible" objects using open unions
  * AccessT is now obsolete
basic-deps:
  exceptions: '>=0.8'
  witherable: ^>=0.4
  base: '>=4.9 && <5'
  monad-skeleton: '>=0.1.1 && <0.3'
  transformers: '>=0.3 && <0.6'
all-versions:
- '0.0'
- 0.0.1
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.2.1
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.3.2
- 0.6.3.3
- 0.6.5
- 0.6.5.1
- '1'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- '1.1'
- 1.1.1
- 1.1.2
- '1.2'
- '1.3'
author: Fumiaki Kinoshita
latest: '1.3'
description-type: markdown
description: |
  objective
  ====

  [![Hackage](https://img.shields.io/hackage/v/objective.svg)](https://hackage.haskell.org/package/objective) [![Build Status](https://secure.travis-ci.org/fumieval/objective.png?branch=master)](http://travis-ci.org/fumieval/objective)

  Paper: https://fumieval.github.io/papers/en/2015-Haskell-objects.html

  This package provides composable objects and instances.

  Introduction
  ----

  The primal construct, `Object`, models _object-oriented_ objects. `Object f g` represents an object.

  ```haskell
  newtype Object f g = Object { runObject :: forall x. f x -> g (x, Object f g) }
  ```

  An object interprets a message `f a` and returns the result `a` and the next object `Object f g`, on `g`.

  ```haskell
  data Counter a where
    Increment :: Counter ()
    Print :: Counter Int

  counter :: Int -> Object Counter IO
  counter n = Object $ \case
    Increment -> return ((), counter (n + 1))
    Print -> print n >> return (n, counter n)
  ```

  `new :: Object f g -> IO (Instance f g)` creates an instance of an object.

  `(.-) :: (MonadIO m, MonadMask m) => Instance f m -> f a -> m a` sends a message to an instance. This can be used to handle instances in the typical OOP fashion.

  ```haskell
  > i <- new (counter 0)
  > i .- Increment
  > i .- Print
  1
  > i .- Increment
  > i .- Print
  2
  ```

  Interestingly, `Object (Skeleton t) m` and `Object t m` are isomorphic (`Skeleton` is an operational monad). `cascading` lets objects to handle an operational monad.
license-name: BSD-3-Clause
