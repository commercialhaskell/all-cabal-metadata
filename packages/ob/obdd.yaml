homepage: https://github.com/jwaldmann/haskell-obdd
changelog-type: ''
hash: 3a09d54e9746b16771d445cab23eb6dc33aecd1e01f22fb1cb5e722678131bc6
test-bench-deps:
  base: -any
  text: -any
  array: -any
  containers: -any
  obdd: -any
maintainer: Johannes Waldmann
synopsis: Ordered Reduced Binary Decision Diagrams
changelog: ''
basic-deps:
  process-extras: -any
  base: ==4.*
  text: -any
  ersatz: -any
  array: -any
  containers: '>=0.5'
  mtl: -any
  random: -any
all-versions:
- '0.2'
- 0.2.3
- 0.2.5
- 0.2.7
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.8.1
- 0.8.2
- 0.8.4
author: Johannes Waldmann
latest: 0.8.4
description-type: haddock
description: |-
  Construct, combine and query OBDDs;
  an efficient representation for formulas in propositional logic.

  This is mostly educational.
  The BDDs do not share nodes (there is no persistent BDD base) and this might introduce inefficiencies.

  An important (for me, in teaching) feature is
  that I can immediately draw the BDD to an X11 window (via graphviz).
  For example, to show the effect of different variable orderings,
  try this in ghci (type 'q' to close the drawing windows).

  > import Prelude hiding (not,(&&),(||),and,or,any,all)
  > import OBDD
  > let f [] = false; f (x:y:zs) = x && y || f zs
  > display $ f $ map variable [1,2,3,4,5,6]
  > display $ f $ map variable [1,4,2,5,3,6]

  'OBDD' implements 'Ersatz.Boolean' which re-defines
  Boolean operations from the Prelude. The recommended way of using this
  is shown in the previous example.

  If you want better performance, use a library with a persistent BDD base,
  e.g., <http://vlsi.colorado.edu/%7Efabio/CUDD/ CUDD>
  <https://hackage.haskell.org/package/cudd Haskell bindings>,
  see <https://gitlab.imn.htwk-leipzig.de/waldmann/min-comp-sort this example>.
license-name: LicenseRef-GPL
