all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Yoshikuni Jujo
basic-deps:
  base: '>=4.7 && <5'
  template-haskell: <3
changelog: |
  # Changelog for `swizzle`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# swizzle\n\n```haskell\nimport Data.Tuple\nimport Data.Swizzle qualified
  as Swz\nimport Data.Swizzle.TH\n\nnums :: (Int, Int, Int, Int, Int, Int, Int, Int,
  Int, Int)\nnums = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nfoo :: (Int, Int, Int, Int)\nfoo
  = Swz.zyxw nums -- (2, 1, 0, 3)\n\nfoo2, foo3, foo4, foo5, foo9 :: Int\nfoo2 = Swz.z
  nums -- 2\nfoo3 = Swz.w nums -- 3\nfoo4 = Swz.v nums -- 4\nfoo5 = Swz.u nums --
  5\nfoo9 = Swz.q nums -- 9\n\nswizzle \"\" \"wyvyuqztuwurqsq\"\n\nbar = wyvyuqztuwurqsq
  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t-- (3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7,
  9)\n```\n\n```haskell\nimport GHC.Generics\nimport Data.Tuple\nimport Data.Swizzle
  qualified as Swz\nimport Data.Swizzle.Class\n\nnewtype Red = Red Double deriving
  Show\nnewtype Green = Green Double deriving Show\nnewtype Blue = Blue Double deriving
  Show\nnewtype Alpha = Alpha Double deriving Show\n\ndata Argb = Argb Alpha Red Green
  Blue deriving (Show, Generic)\n\ninstance Swizzle1 Argb where type X Argb = Alpha\ninstance
  Swizzle2 Argb where type Y Argb = Red\ninstance Swizzle3 Argb where type Z Argb
  = Green\ninstance Swizzle4 Argb where type W Argb = Blue\n\nsample :: Argb\nsample
  = Argb (Alpha 0.5) (Red 0.9) (Green 0.3) (Blue 0.2)\n\nred :: Red\nred = Swz.y sample\n\nalphaGreen
  :: (Alpha, Green)\nalphaGreen = Swz.xz sample\n\nrgba :: (Red, Green, Blue, Alpha)\nrgba
  = Swz.yzwx sample\n```\n\n```haskell\nimport Data.Curry\nimport Data.Swizzle qualified
  as Swz\n\nflip13 :: (a -> b -> c -> r) -> c -> b -> a -> r\nflip13 f = crr3 $ unc3
  f . Swz.zyx\n\nfoo :: Int -> Int -> Int -> Int -> String\nfoo x y z w = show x ++
  show y ++ show z ++ show w\n\nbar :: String\nbar = flip13 foo 1 2 3 4 -- \"3214\"\n```\n\n```haskell\nimport
  Data.Swizzle.TH\n\nswizzle \"get\" \"yywu\"\n\nsample :: (Int, Int, Int, Int)\nsample
  = getYywu (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) -- (2, 2, 4, 6)\n```\n"
description-type: markdown
hash: a1a30c4adb2b29f50be8b9e7fa4a535cbf92d83141c0fa2a97c326a9b2c60dbb
homepage: https://github.com/YoshikuniJujo/swizzle#readme
latest: 0.1.0.4
license-name: BSD-3-Clause
maintainer: yoshikuni.jujo@gmail.com
synopsis: Swizzle functions
test-bench-deps:
  base: '>=4.7 && <5'
  swizzle: '>=0'
  template-haskell: <3
