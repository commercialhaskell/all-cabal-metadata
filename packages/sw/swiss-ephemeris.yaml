homepage: https://github.com/lfborjas/swiss-ephemeris#readme
changelog-type: markdown
hash: e3af6625549c2494b3d05477983c8dd247469c6416d6239646a6f0ed3e071bbf
test-bench-deps:
  base: '>=4.10 && <4.16'
  hspec: ==2.7.*
  swiss-ephemeris: -any
  QuickCheck: '>=2.12 && <=2.15'
  directory: ==1.3.*
maintainer: swiss-ephemeris@lfborjas.com
synopsis: Haskell bindings for the Swiss Ephemeris C library
changelog: "# Changelog for swiss-ephemeris\n\n## v1.3.0.0 (2021-06-18)\n\n* **Drops
  support for base < 4.10**, which effectively excludes GHC versions less\n  than
  or equal to 8.0.2. Supporting older haskells gets more cumbersome with each\n  addition.
  Please submit a patch with all the preprocessor magic if you _really_\n  want old
  haskell support.\n* Add `ChartUtils` namespace, with a couple of convenience functions
  for chart drawing.\n* Upgrade to swiss ephemeris 2.10.01.\n* **Update LICENSE to
  AGPL** -- it changed in the C library, too.\n* [dev] Fix QuickCheck test dependency,
  to hopefully be copacetic in NixOS builds.\n* [dev] add optional `nix` scripts.\n*
  [dev] a whole buncha hlint + autoformat fixes.\n\n## v1.2.1.1 (2021-03-14)\n\n*
  Bump upper bound for `base`, to work with newer haskells.\n\n## v1.2.1.0 (2020-11-14)\n\n*
  Introduces `gregorianDateTime`, which is the reverse of `julianDay`: given a JD,
  return\n  a tuple with `(year, month, day, decimalHour)`.\n\n## v1.2.0.0 (2020-09-14)\n\n**BREAKING
  CHANGE:** `splitDegrees` now takes options that reflect the options in the underlying
  library.\n\n* Constructors for `JulianTime` and `SiderealTime` are now exposed.\n*
  Introduce `SplitDegreesOption` enum for all options one can split degrees with;
  amends `splitDegrees` to take\n  said options as the first argument.\n* `splitDegreesZodiac`
  is unchanged, though a mere veneer for the now more powerful `splitDegrees`.\n*
  Since `splitDegreesZodiac` goes the extra enum-mile to provide human-readable zodiac
  names, and the underlying\n  library can also split on Nakshatras, we now include
  the `NakshatraName` enum. Names are from wikipedia\n  and I saw some variants, so
  please forgive any mispellings!\n\n## v1.1.0.0 (2020-09-12)\n\n**BREAKING CHANGE:**
  the `Coordinates` type has been retired, in favor of the more specific\n`GeographicPosition`
  and `EclipticPosition`. `calculateCoordinates` is now `calculateEclipticPosition`,\nand
  the `calculateCusps*` family now takes a `GeographicPosition` as part of its inputs.\n\n*
  Introduces an `Internal` module with types and helpers that this library introduces,\n
  \ which are not native to the underlying C library. Import at your own risk! (the
  \"curated\"/\n  \"stable\" ones are re-exported by the main module.)\n  - Deprecates
  the `Coordinates` type, in favor of `EclipticPosition`.\n* Introduces functions
  to `calculateEquatorialPosition` and `calculateObliquity` at a given time,\n  as
  well as types that better convey the different types of positions (`EquatorialPosition`,
  `ObliquityInformation`).\n* Some astrology helpers: convert between equatorial and
  ecliptic (and vice-versa,)\n  obtain the Delta Time effective at a given moment,
  obtain the house position of a given body.\n  (**Note:** the `calculateHousePosition`
  function is more useful for working near the polar circles or for bodies\n  off
  of the ecliptic -- the ARMC and obliquity need to be calculated or provided, it's
  simpler\n  if you already have the cusps: just check which cusps a given longitude
  falls between -- no need for\n  this function!)\n\n\n## v1.0.0.0 (2020-09-07)\n\n*
  Refactor the `calculateCusps` function:\n  - Return a simple list of cusps. This
  allows for future implementations of exotic systems\n    that have more (or fewer?)
  cusps, and hews closer to regular usage (which iterates over the cusps.)\n  - The
  house system comes first, to allow for more ergonomic partial application for uses
  where one system is\n    the \"default\" (e.g. `traditionalCusps = calculateCusps
  Placidus`.)\n* Cleans up haddocks, adds many links to the original docs (and notes
  the headings, since updates to those\n  seem to break hyperlinking?)\n\n## v0.3.1.0\n\n*
  Fixes occasional segmentation fault (caught most often in the more memory-strapped
  CI server than in my computer,)\n  caused by using [`alloca`](https://hackage.haskell.org/package/base-4.14.0.0/docs/Foreign-Marshal-Alloc.html#v:alloca)
  for the error string and, when no error string was populated, ending with undefined\n
  \ behavior. Now we explicitly allocate the 256 `char`s that the documentation and
  C sources recommend, which seems to be always\n  freed by Haskell, vs. leaving a
  hole somewhere when the underlying library fails to terminate the string.\n\n##
  v0.3.0.0\n\n**Breaking fixes to `calculateCusps` and `calculateCoordinates`**\n\n*
  Upgrades to v2.09.03 of the C library, to incorporate some bug fixes that seem marginally
  related\n  to random breakage I've seen; read more at: https://www.astro.com/swisseph/swephprg.htm#_Toc49847971\n*
  Introduces `withoutEphemerides` which sets the ephe path to `NULL` (via the also
  new `setNoEphemeridesPath`)\n  and takes care of calling `closeEphemerides`. Use
  this or `withEphemerides` for memory safety,\n  only call the functions directly
  if you _really_ know what you're doing (i.e setting/closing ephemerides\n  in some
  other manner.)\n* Both calculation functions are now `IO` computations, to reflect
  the fact that they may interact\n  with ephemeris data and allocate memory that
  `closeEphemerides` _has_ to free.\n* More closely reflects the underlying behavior
  for calculating cusps: it _may_ return\n  cusps in the `Porphyrius` system if given
  a point for which the chosen system fails. To\n  more explicitly reflect this, we
  now have `calculateCuspsStrict` which returns a `Left` value\n  if the requested
  house system couldn't be used. `calculateCuspsLenient`  always returns a calculation,\n
  \ and is aliased to `calculateCusps` as the \"default\" method.\n* Since the calculation
  may have changed the house system, we now return a `systemUsed` entry\n  in the
  `CuspsCalculation` record.\n\n\n## v0.2.0.0\n\n* Introduces `withEphemerides` for
  bracketed access to the ephemeris directory.\n* Changes the signature of `calculateCusps`
  to return a `Left` value if the underlying library\n  is unable to calculate the
  cusps.\n* Introduces \"monadic\" versions of the calculations that work with instances
  of `MonadFail`:\n  `calculateCuspsM` and `calculateCoordinatesM`\n* Improves test
  coverage with property testing.\n\n## v0.1.0.0 - 0.1.0.2(2020-08-12)\n\n* Bundles
  the C code for v2.09.01 of [Swiss\n  Ephemerides](https://www.astro.com/swisseph/swephinfo_e.htm)
  -- refer to that\n  page and related documentation for other possible additions
  to this package! \n* First release with basic bindings to calculate the coordinates
  of bodies\n  between the Sun and Chiron, plus cusps and major angles --\n`calculateCoordinates`
  and `calculateCusps`, respectively.\n* The functions `setEphemeridesPath` and `closeEphemerides`
  are provided to\n  initialize (important) and release (less important) resources
  related to\n  caching calculations and locating the data files for ephemerides.\n"
basic-deps:
  base: '>=4.10 && <4.16'
all-versions:
- 0.1.0.2
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.2.1.0
- 1.2.1.1
- 1.3.0.0
author: Luis Borjas Reyes
latest: 1.3.0.0
description-type: markdown
description: "# swiss-ephemeris\n\n![build](https://github.com/lfborjas/swiss-ephemeris/workflows/Haskell%20CI/badge.svg)\n\n\nHaskell
  bindings for the [Swiss Ephemeris](https://www.astro.com/swisseph/swephinfo_e.htm)
  library.\n\nSee the tests in the `spec` folder for thorough example usage, but here's
  a simple \"main\" that demonstrates the current abilities, inspired by the [sample
  program in the official library](https://www.astro.com/swisseph/swephprg.htm#_Toc46406771):\n\n**NOTE:**
  this library is under very active development, as such, most releases in v1.x will
  probably show a fastly evolving API, which is reflected by the fact that new versions
  have been increasing the major version numbers (in [PVP](https://pvp.haskell.org/),
  unlike semver, the first _two_ components of the version correspond to the major
  version.)\n\n```haskell\nimport SwissEphemeris\n\nmain :: IO\nmain = do \n  -- location
  of your ephemeris directory. We bundle a sample one in `swedist`.\n  withEphemerides
  \"./swedist/sweph_18\" $ do\n    let time = julianDay 1989 1 6 0.0\n        place
  = GeographicPosition {geoLat = 14.0839053, geoLng = -87.2750137}\n  \n    -- locate
  all bodies between the Sun and Chiron\n    forM_ [Sun .. Chiron] $ \\planet -> do\n
  \     -- if no ephemerides data is available for the given planetary body, a `Left`
  value\n      -- will be returned.\n      coord <- calculateEclipticPosition time
  planet\n      putStrLn $ show planet <> \": \" <> show coord\n   \n    -- Calculate
  cusps for the given time and place, preferring the `Placidus` system.\n    -- note
  that the underlying library may decide to use the `Porphyrius` system if it can't\n
  \   -- calculate cusps (happens for the Placidus and Koch systems in locations near
  the poles.)\n    cusps <- calculateCusps Placidus time place\n    putStrLn $ \"Cusps:
  \" <> show cusps\n```\nThe above should print the ecliptic latitude and longitude
  (plus some velocities) for all planets, and then the cusps and other major angles
  (ascendant, mc, ARMC, alternative angles.)\n\nThere's `withEphemerides` to run calculations
  using a particular ephemerides directory and then close any used\nsystem resources,
  and `withoutEphemerides` to use the default ephemerides (\"Moshier.\")\n\nTo see
  actual results and more advanced usage, check out the tests. For some more advanced
  examples, see `swetest.c` and `swemini.c` in the `csrc` directory: they're the test/example
  programs provided by the original authors. You can also play around with the C library
  via [the authors' test page](https://www.astro.com/swisseph/swetest.htm).\n\n\n##
  Notes\n\nAll the code in the `csrc` folder comes directly from the [latest official
  tarball (as of June 2021:) v2.10.01](https://www.astro.com/ftp/swisseph/). \n\nThe
  `swedist` folder includes the original documentation from the tarball in PDF (see
  the `doc`) folder, and a copy of ephemeris data files.\n\nFor other formats of the
  original documentation, see: https://www.astro.com/ftp/swisseph/doc/\n\nThe authors
  also host HTML versions of the manuals. Two are provided, a general reference and
  a programming reference. Both are very useful to get\nacquainted with the functionality
  and implementation details.\n\n* [General Reference](https://www.astro.com/swisseph/swisseph.htm)\n*
  [Programmer's Reference](https://www.astro.com/swisseph/swephprg.htm)\n\n### Ephemerides
  files\n\nAs noted in the [original documentation](https://www.astro.com/swisseph/swisseph.htm)
  you can omit the `setEphemerides` call (or use `setNoEphemerides`, or the `withoutEphemerides`
  bracket function) and calculations will use a built-in analytical\nephemeris (\"Moshier\")
  which:\n\n> provides \"only\" a precision of 0.1 arc seconds for the planets and
  3\" for the Moon. No asteroids will be available, and no barycentric option can
  be used.\n\n\nNote that if you're interested in the asteroid `Chiron` (which is
  common in astrological practice these days,) you'll have to procure Ephemerides
  files and shouldn't use the default ephemerides. \n\nFor convenience, we bundle
  a few ephemerides files in this repository (see `swedist`) for the time range `1800
  AD – 2399 AD`. If you were born before that, or plan to code e.g. transits for after
  that (!) or \nyou'd prefer even more precision, you can [download more ephemerides
  files from the astro.com downloads page](https://www.astro.com/ftp/swisseph/ephe/)\n\nI
  chose the bundled files due to this comment in the official docs:\n\n> If the [JPL]
  file is too big, then you can download the files sepl_18.se1 and semo_18.se1 from
  here: http://www.astro.com/ftp/swisseph/ephe/\n\nFor a full explanation of the files
  available, see the [Description of the Ephemerides](https://www.astro.com/swisseph/swisseph.htm#_Toc46391649)
  section of the original manual, also of\ninterest is the [comparison between the
  Swiss Ephemeris and the raw NASA JPL\ndata](https://www.astro.com/swisseph/swisseph.htm#_Toc46391741).\n\n##
  Contributing\n\nI've only made available the types and functions that are useful
  for my own, traditional, horoscope calculations.\nFeel free to add more! See the
  [astro.com documentation](https://www.astro.com/swisseph/swisseph.htm) for ideas.\n\n###
  Releasing\n\nI use `stack` for this project, so releasing it should just be a matter
  of running `stack sdist`.\n"
license-name: AGPL-3.0-only
