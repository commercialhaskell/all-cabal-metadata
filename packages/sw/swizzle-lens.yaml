all-versions:
- 0.1.0.0
author: Yoshikuni Jujo
basic-deps:
  base: '>=4.7 && <5'
  swizzle: <1
  swizzle-set: <1
  template-haskell: <3
changelog: |
  # Changelog for `swizzle-lens`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# swizzle-lens\n\n```haskell\n{-# LANGUAGE ImportQualifiedPost #-}\n{-#
  LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE FlexibleContexts #-}\n\nmodule Lib where\n\nimport
  Control.Lens\nimport Data.SwizzleLens qualified as SwzL\nimport Data.SwizzleLens.TH\n\nfoo
  :: (Int, Int, Int)\nfoo = (0, 1, 2, 3, 4, 5, 6, 7, 8) ^. SwzL.ywv\t-- (1, 3, 4)\n\nbar
  :: (Int, Int, Char, Int, String, Int, Int, Int, Int)\nbar = (0, 1, 2, 3, 4, 5, 6,
  7, 8) & SwzL.zv .~ ('c', \"hello\")\n\t-- (0, 1, 'c', 3, \"hello\", 5, 6, 7, 8)\n\nswizzleLens
  \"\" \"ywtr\"\n\nbaz :: (Int, Int, Int, Int)\nbaz = (0, 1, 2, 3, 4, 5, 6, 7, 8)
  ^. ywtr\t-- (1, 3, 6, 8)\n\nqux :: (Int, Bool, Int, String, Int, Int, Char, Int,
  ())\nqux = (0, 1, 2, 3, 4, 5, 6, 7, 8) & ywtr .~ (False, \"hello\", 'c', ())\n\t--
  (0, False, 2, \"hello\", 4, 5, 'c', 7, ())\n```\n\n```haskell\n{-# LANGUAGE ImportQualifiedPost
  #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-#
  LANGUAGE DeriveGeneric #-}\n{-# OPTIONS_GHC -Wall -fno-warn-tabs #-}\n\nmodule Try.Color
  where\n\nimport GHC.Generics\nimport Control.Lens\n\nimport Data.SwizzleLens as
  SwzL\nimport Data.Swizzle.Class qualified as Swz\nimport Data.SwizzleSet.Class qualified
  as SwzS\n\nnewtype Alpha = Alpha Double deriving Show\nnewtype Red = Red Double
  deriving Show\nnewtype Green = Green Double deriving Show\nnewtype Blue = Blue Double
  deriving Show\n\ndata Argb = Argb Alpha Red Green Blue deriving (Show, Generic)\n\ninstance
  Swz.Swizzle1 Argb where type X Argb = Alpha\ninstance Swz.Swizzle2 Argb where type
  Y Argb = Red\ninstance Swz.Swizzle3 Argb where type Z Argb = Green\ninstance Swz.Swizzle4
  Argb where type W Argb = Blue\n\ninstance SwzS.SwizzleSet1 Argb Alpha where type
  X Argb Alpha = Argb\ninstance SwzS.SwizzleSet2 Argb Red where type Y Argb Red =
  Argb\ninstance SwzS.SwizzleSet3 Argb Green where type Z Argb Green = Argb\ninstance
  SwzS.SwizzleSet4 Argb Blue where type W Argb Blue = Argb\n\nsample :: Argb\nsample
  = Argb (Alpha 0.8) (Red 0.3) (Green 0.8) (Blue 0.1)\n\nfoo :: (Red, Blue)\nfoo =
  sample ^. SwzL.yw\n\nbar :: Argb\nbar = sample & SwzL.xz .~ (Alpha 0.5, Green 0.9)\n```\n\n```haskell\n{-#
  LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# OPTIONS_GHC
  -Wall -fno-warn-tabs #-}\n\nmodule Try.Prefix where\n\nimport Control.Lens\nimport
  Data.SwizzleLens.TH\n\nswizzleLens \"lens\" \"wtsq\"\n\nfoo :: (Int, Int, Int, Int)\nfoo
  = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) ^. lensWtsq\t-- (3, 6, 7, 9)\n\nbar :: (Int, Int,
  Int, Char, Int, Int, Bool, String, Int, ())\nbar = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
  & lensWtsq .~ ('c', True, \"hello\", ())\n\t-- (0, 1, 2, 'c', 4, 5, True, \"hello\",
  8, ())\n```\n"
description-type: markdown
hash: 7c00ab4bcabfb359d27ec62d3a981bf9bd42016f6033acc6b6b678d36d21860d
homepage: https://github.com/YoshikuniJujo/swizzle-lens#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: yoshikuni.jujo@gmail.com
synopsis: Swizzle lens functions
test-bench-deps:
  base: '>=4.7 && <5'
  swizzle: <1
  swizzle-lens: '>=0'
  swizzle-set: <1
  template-haskell: <3
