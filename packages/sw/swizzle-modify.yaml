all-versions:
- 0.1.0.0
author: Yoshikuni Jujo
basic-deps:
  base: '>=4.7 && <5'
  swizzle: <1
  swizzle-set: <1
  template-haskell: <3
changelog: |
  # Changelog for `swizzle-modify`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# swizzle-modify\n\n```haskell\n{-# LANGUAGE ImportQualifiedPost #-}\n{-#
  LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# OPTIONS_GHC
  -Wall -fno-warn-tabs #-}\n\nmodule Lib where\n\nimport Data.SwizzleModify qualified
  as SwzM\nimport Data.SwizzleModify.TH\n\nnums :: (Int, Int, Int, Int, Int, Int,
  Int, Int, Int, Int)\nnums = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nfoo :: (Int, Int,
  Int, Int, Int, Int, Int, Int, Int, Int)\nfoo = SwzM.ywv ((* 100), (* 200), (* 300))
  nums -- (0, 100, 2, 600, 1200, 5, 6, 7, 8, 9)\n\nbar :: (Int, Int, String, String,
  Int, Int, Int, Int, Int, Int)\nbar = SwzM.zw (show, show) nums -- (0, 1, \"2\",
  \"3\", 4, 5, 6, 7, 8, 9)\n\nswizzleModify \"\" \"ztsq\"\n\nbaz :: (Int, Int, String,
  Int, Int, Int, Int, String, Int, Char)\nbaz = ztsq (show, (* 100), (`replicate`
  'c'), const 'q') nums\n\t-- (0, 1, \"2\", 3, 4, 5, 600, \"ccccccc\", 8, 'q')\n```\n\n```haskell\n{-#
  LANGUAGE ImportQualifiedPost #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE MultiParamTypeClasses
  #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving, DeriveGeneric #-}\n{-# OPTIONS_GHC
  -Wall -fno-warn-tabs #-}\n\nmodule Try.Color where\n\nimport GHC.Generics\nimport
  Data.SwizzleModify qualified as SwzM\nimport Data.Swizzle.Class qualified as Swz\nimport
  Data.SwizzleSet.Class qualified as SwzS\n\nnewtype Alpha = Alpha Double deriving
  (Show, Num, Fractional)\nnewtype Red = Red Double deriving (Show, Num, Fractional)\nnewtype
  Green = Green Double deriving (Show, Num, Fractional)\nnewtype Blue = Blue Double
  deriving (Show, Num, Fractional)\n\ndata Argb = Argb Alpha Red Green Blue deriving
  (Show, Generic)\n\ninstance Swz.Swizzle1 Argb where type X Argb = Alpha\ninstance
  Swz.Swizzle2 Argb where type Y Argb = Red\ninstance Swz.Swizzle3 Argb where type
  Z Argb = Green\ninstance Swz.Swizzle4 Argb where type W Argb = Blue\n\ninstance
  SwzS.SwizzleSet1 Argb Alpha where type X Argb Alpha = Argb\ninstance SwzS.SwizzleSet2
  Argb Red where type Y Argb Red = Argb\ninstance SwzS.SwizzleSet3 Argb Green where
  type Z Argb Green = Argb\ninstance SwzS.SwizzleSet4 Argb Blue where type W Argb
  Blue = Argb\n\nsample :: Argb\nsample = Argb 0.5 0.2 0.8 0.1\n\nfoo :: Argb\nfoo
  = SwzM.yw ((* 0.8), (* 0.6)) sample\n\t-- Argb (Alpha 0.5) (Red 0.16) (Green 0.8)
  (Blue 0.06)\n```\n\n```haskell\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE FlexibleContexts
  #-}\n\nmodule Try.Prefix where\n\nimport Data.SwizzleModify.TH\n\nswizzleModify
  \"modify\" \"wvtrq\"\n\nfoo :: (Int, Int, Int, Int, Int, Int, String, Int, String,
  Char)\nfoo = modifyWvtrq ((* 100), (* 200), show, (`replicate` 'c'), const 'q')\n\t(0,
  1, 2, 3, 4, 5, 6, 7, 8, 9)\n\t-- (0, 1, 2, 300, 800, 5, \"6\", 7, \"cccccccc\",
  'q')\n```\n"
description-type: markdown
hash: 6ee7efe76e49637a90f777447c3e07051715b763f746f1003c03153cedf6c8e5
homepage: https://github.com/YoshikuniJujo/swizzle-modify#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: yoshikuni.jujo@gmail.com
synopsis: Swizzle modify functions
test-bench-deps:
  base: '>=4.7 && <5'
  swizzle: <1
  swizzle-modify: '>=0'
  swizzle-set: <1
  template-haskell: <3
