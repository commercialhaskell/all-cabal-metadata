all-versions:
- 0.5.0.1
- 0.5.0.2
author: Ross Paterson <ross@soi.city.ac.uk>
basic-deps:
  array: '>=0'
  base: '>=4.4 && <5.0'
  containers: '>=0'
  haskell-src: '>=0'
changelog: ''
changelog-type: ''
description: "A prototype preprocessor for arrow notation.\n\nRoss Paterson <ross@soi.city.ac.uk>\n\nNote
  that recent versions of GHC support this notation directly, and\ngive better error
  messages to boot.\n\nRUNNING THE ARROW PREPROCESSOR\n\nThe program supports the
  following options:\n\n\t--pretty=STYLE\tpretty print in STYLE\n\t\t\t[offside|semicolon|inline|none]
  (default = offside)\n\t--help\t\tdisplay usage information\n\nTypically you create
  a Haskell module using the extended syntax, and\ncall it Foo.as (for arrow script).
  \ To convert this into a corresponding\nHaskell module, you say\n\n\tarrowp Foo.as
  >Foo.hs\nor\n\tarrowp Foo.as Foo.hs\n\nand then use Foo.hs with your favourite Haskell
  implementation.\nYou can also run it with no arguments at all:\n\n\tarrowp <Foo.as
  >Foo.hs\n\nbut then it won't have a file name to put in the error messages.\nSometimes
  the input has already been preprocessed, e.g. with unlit\n(from the GHC distribution).
  \ For this situation, you can specify both\nthe original file name (for error messages)
  and the input file name, as\nwell as the output file name (which is obligatory in
  this situation), e.g.\n\n\tunlit Foo.las Foo.as\n\tarrowp Foo.las Foo.as Foo.hs\n\nor
  equivalently as\n\n\tunlit Foo.las - | arrowp Foo.las - Foo.hs\n\n(both unlit and
  arrowp allow filename arguments of \"-\", meaning standard\ninput or output as appropriate.)\n\nWARNING:
  if you give the program 2 (or 3) arguments, the last one will\nbe overwritten.\n\nDIAGNOSING
  ERRORS IN YOUR CODE\n\nSyntax errors will be detected by the preprocessor, and the
  position in\nthe source where they were detected is reported.  (As usual, the actual\nerror
  may occur earlier.)  The preprocessor understands Haskell 98 plus\nmultiparameter
  type classes and the arrow extensions, but not some of\nthe other extensions supported
  by various Haskell implementations.\nThe preprocessor doesn't handle operator precedence,
  so it may copy\nsome erroneous expressions like `x == y == z'.  Otherwise, the output\nof
  the preprocessor should not generate any syntax errors -- if it does,\nplease report
  it.\n\nSemantic errors are more difficult for simple preprocessors like this one.\nThey
  will be detected by your Haskell implementation, whether they occur\nin the Haskell
  part or the arrows part, and are thus rather hard to\ntrace back to the original
  source.  If you use --pretty=none and feed\nthe output to GHC, the error it reports
  will refer to the first line\nof the declaration containing the error.  But if you
  need to read the\npreprocessor output to find the problem, omit the --pretty option.\n\nYou
  can reduce the above problems by putting the parts of your program\nthat need arrow
  syntax (and thus the preprocessor) in separate modules.\n\nBUGS\n\n- there is no
  type checking until the output is compiled,\n  resulting in incomprehensible error
  messages.\n- failable patterns are not handled as promised yet.\n  (And I'm starting
  to think they shouldn't be.)\n\nSOURCE NOTES\n\nThis is based on hsparser, by Sven
  Panne, Simon Marlow and Noel Winstanley.\nIt is now the haskell-src package distributed
  with GHC.\n\nMy changes are\n\n\tLexer -- a few lines adding extra symbols (all
  marked)\n\tParser -- a few marked lines and several rules at the end,\n\t\tmostly
  modified versions of existing rules.\n\tArrSyn, ArrCode, Utils -- new modules for
  arrow syntax.\n\nThe parser gives 2 shift/reduce conflicts, inherited from the original.\n\nThere
  was a reduce/reduce conflict:\n\n\tqual -> 'let' declist .\n\tqualA -> 'let' declist
  .\n\nbut I've kludged the grammar (see stmtA) to avoid it.\n"
description-type: text
hash: ad4bca07e61f24598ab76862a061be5cd65d499ac4a335938895944718ac4956
homepage: http://www.haskell.org/arrows/
latest: 0.5.0.2
license-name: LicenseRef-GPL
maintainer: Ross Paterson <ross@soi.city.ac.uk>
synopsis: preprocessor translating arrow notation into Haskell 98
test-bench-deps: {}
