all-versions:
- '0.1'
- '0.2'
- 0.2.0.1
author: Doug Beardsley
basic-deps:
  HUnit: '>=1.5 && <1.7'
  base: '>=4.6 && <4.16'
  bytestring: '>=0.10 && <0.12'
  containers: '>=0.5 && <0.7'
  directory: '>=1.2 && <1.4'
  filepath: '>=1.4 && <1.5'
  hashable: '>=1.3 && <1.4'
  lens: '>=4.16 && <5.1'
changelog: |
  # Revision history for armor

  ## 0.2      -- 2021-05-06

  * Widen version bounds
  * Support and test through GHC 9
  * Expose more customizable test function
  * Change default mechanics of FilePath generation

  WARNING: Depending on how you use armor this is a potentially
  backwards-incompatible change!  As a precaution we are doing a major version
  bump even though the change would only technically need a C bump.

  The best way to upgrade your app is to upgrade armor in a commit by itself
  with no other changes to your app.  That way, if there armor has test case
  failures, you know that they are innocuous because no part of the rest of your
  app changed functionaly.  So you can simple delete the failing golds,
  regenerate them, and check the new ones into source control.

  ## 0.1      -- 2018-03-14

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # Armor

  [![Build Status](https://travis-ci.org/mightybyte/armor.svg?branch=master)](https://travis-ci.org/mightybyte/armor)

  Armor yourself against backwards-incompatible serializations once and for all.

  See the
  [ChangeLog](https://github.com/mightybyte/armor/blob/master/ChangeLog.md) for
  information about changes between versions.

  ## Motivation

  As almost everyone with significant experience managing production software
  systems knows, backwards compatibility is incredibly important for any data that
  is persisted by an application. If you make a change to a data structure that is
  not backwards compatible with the existing serialized formats, your app will
  break as soon as it encounters the existing format. Even if you have 100% test
  coverage, your tests still might not catch this problem because it's not a
  problem with your app at any single point in time, but a problem with how your
  app evolves over time.

  More subtly, if you deploy a backwards incompatible migration, your app may
  persist some data in the new format before it crashes on the old format. This
  can leave your system in the horrible state where not only will it not work with
  the new code, but rolling back to the old code will also break because the old
  code doesn't support the new serialized format! You have two incomptable
  serializations active at the same time!

  Proper migration systems can reduce the chances of this problem occurring, but
  if your system has any kind of queueing system or message bus, your migrations
  might not be applied to in-flight messages. Clearly we need something to help us
  protect against this problem.  Enter `armor`.

  For an overview of how to use this package, check out the [literate Haskell
  tutorial in the test suite](test/AppA.lhs).

  ## Credits

  Inspiration for this package came from [Soostone's safecopy-hunit package](https://github.com/Soostone/safecopy-hunit).

  Details were refined in production at [Formation](http://formation.ai/)
  (previously Takt).
description-type: markdown
hash: 1d0b340b4c1803fc5dbc46fd1bee08e157913733497deb58a63749c800e94c85
homepage: https://github.com/mightybyte/armor
latest: 0.2.0.1
license-name: BSD-3-Clause
maintainer: mightybyte@gmail.com
synopsis: Prevent serialization backwards compatibility problems using golden tests
test-bench-deps:
  HUnit: '>=0'
  aeson: '>=1.0 && <1.6'
  armor: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  hspec: '>=2.4 && <2.8'
  lens: '>=0'
  text: '>=1.2 && <1.3'
