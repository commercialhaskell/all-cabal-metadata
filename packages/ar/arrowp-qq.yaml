all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.0.1
- 0.2.1
- 0.2.1.1
- 0.3.0
author: Jose Iborra <pepeiborra@gmail.com>
basic-deps:
  NoHoed: '>=0.1.1 && <0.2'
  arrowp-qq: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0.6.0 && <0.7'
  data-default: '>=0.7.1 && <0.8'
  haskell-src-exts: '>=1.22.0 && <1.23'
  haskell-src-exts-util: '>=0.2.5 && <0.3'
  haskell-src-meta: '>=0.8.5 && <0.9'
  template-haskell: '>=2.14.0 && <2.15'
  transformers: '>=0.5.6 && <0.6'
  uniplate: '>=1.6.12 && <1.7'
changelog: ''
changelog-type: ''
description: "[![Hackage](https://img.shields.io/hackage/v/arrowp-qq.svg)](https://hackage.haskell.org/package/arrowp-qq)\n[![Stackage
  Nightly](http://stackage.org/package/arrowp-qq/badge/nightly)](http://stackage.org/nightly/package/arrowp-qq)\n[![Travis
  Build Status](https://travis-ci.org/pepeiborra/arrowp-qq.svg)](https://travis-ci.org/pepeiborra/arrowp-qq)\n\narrowp-qq\n==========\nA
  preprocessor (aka syntax-desugarer) for arrow notation \nbased on the original `arrowp`
  developed by Ross Paterson <ross@soi.city.ac.uk>.\n\n`arrowp-qq` extends the original
  `arrowp` in three dimensions:\n1. It replaces the `haskell-src` based parser with
  one based on `haskell-src-exts`, which handles most of GHC 8.0.2 Haskell syntax.\n2.
  It provides not only a preprocessor but also a quasiquoter, which is a better option
  in certain cases.\n3. It extends the desugaring to handle static conditional expressions.
  See the semantics section below for more details.\n\nNote: `arrowp-qq` provides
  an enhanced superset of the original `arrowp`'s functionality. One should have no
  reason to install both. Considering `arrowp` no longer builds under modern versions
  of GHC and Cabal/Stack, `arrowp-qq` should clearly be the more optimum package to
  install.\n\nBoth `arrowp` and `arrowp-qq` were originally developed during the days
  when GHC's `Arrows` extension was not fully mature--a time when `proc` syntax was
  not the norm. Of course, recent versions of GHC now support this notation directly,
  and give better error messages to boot. Unfortunately, GHC's `proc` notation desugarer
  is in some cases not as good as it could be. As such, `arrowp-qq`'s quasi-quoter
  can still be useful in producing slightly more optimized desugaring for performance-critical,
  arrowized applications.\n\nThe modern use cases of `arrowp-qq` are as follows:\n-
  Viewing how your `proc` blocks (roughly) look like after desugaring for debugging/profiling
  purposes.\n  - Via the `arrowp` executable.\n  - NOTE: `arrowp-qq` is NOT guaranteed
  to produce the same desugaring as GHC (see limitations & semantics below).\n- Optimizing
  the performance of your `proc` blocks via smarter desugaring.\n  - Either through
  the `arrowp` executable OR (preferably) the provided quasiquoter.\n\nLimitations\n------\n\nThe
  parser cannot handle banana brackets for\ncontrol operators in arrow notation (the
  **proc** keyword in the original paper), \ndue to a [limitation](https://github.com/haskell-suite/haskell-src-exts/issues/45)
  \nin `haskell-src-exts`. In order to use banana brackets, the recommendation\nis
  to fall back to the GHC Arrows parser.\n\nSupport for GHC Haskell notation inside
  arrow blocks is not complete, e.g.\nmulti-way-if and lambda case are unlikely to
  work as expected. If you run into \none of these, please open an issue or vote for
  an existing one, as I plan to extend\nthe support on demand.\n\nInstallation\n------------\n`arrowp-qq`
  is now compatible with Cabal v3's Nix-style local builds & installs:\n\n`cabal install
  arrowp-qq`\n\nUsage \n-----\n### Viewing desugared `proc` syntax\n```sh\narrowp
  myfile.hs | less\n```\n### Optimization\n#### Via the `proc` quasiquoter\n\n```\naddA
  :: Arrow a => a b Int -> a b Int -> a b Int\naddA f g = [proc| x -> do\n\t\ty <-
  f -< x\n\t\tz <- g -< x\n\t\treturnA -< y + z |]\n```\n\n#### Via the **arrowp**
  preprocessor\nAdd the following GHC pragma to the top of the source file:\n```\n{-###
  \ OPTIONS -F -pgmF arrowp ### -}\n```\nThis can be useful for preserving compatibility
  with vanilla `proc` notation, at the cost of flexibility; that is to say, all `proc`
  blocks within the source file will be desugared via `arrowp-qq`.\n\nDesugaring Semantics\n-----------------------\n###
  Static conditional expression optimization\nAs mentioned previously, `arrowp-qq`
  extends the original `arrowp`'s desugaring to handle static conditional expressions.
  Given:\n```\nproc inputs -> do\n  results <- processor -< inputs\n  if outputResultsArg\n
  \   then outputSink -< results\n    else returnA -< ()\n  returnA -< results\n```\nThe
  standard `arrowp` (and GHC) desugaring for this code is:\n```\n  = ((processor >>>
  arr (\\ results -> (results, results))) >>>\n       (first\n          (arr\n             (\\
  results -> if outputResultsArg then Left results else Right ())\n             >>>
  (outputSink ||| returnA))\n          >>> arr (\\ (_, results) -> results)))\n```\nThis
  requires an `ArrowChoice`, but there is a more efficient desugaring which \nperforms
  the choice at compile time and thus an `Arrow` suffices:\n```\n((processor >>> arr
  (\\ results -> (results, results))) >>>\n       (first\n          (if outputResultsArg
  then outputSink else arr (\\ results -> ()))\n          >>> arr (\\ (_, results)
  -> results)))\n```\n\n### `first` call optimization\nThe GHC desugarer does not
  do a very good job of minimizing the number of\n`first` calls inserted. In certain
  `Arrow` instances, this can have a material effect\non performance. Example:\n```\ntrivial
  = proc inputs -> do\n   chunked <- chunk -< inputs\n   results <- process -< chunked\n
  \  returnA -< results\n```\nThis code ought to desugar to a chain of arrows, and
  indeed, both arrowp and\narrowp-qq desugar this to:\n```\ntrivial = chunk >>> process\n```\nHowever
  GHC will produce (approximately) the following code:\n```\n  arr(\\inputs -> (inputs,inputs))
  >>> first chunk >>> first process >>> arr fst\n```\n"
description-type: markdown
hash: ab092060f508d9500222096a837ce5608f6cdcca97a8f95b6984c9eaccb5f0c3
homepage: https://github.com/pepeiborra/arrowp
latest: 0.3.0
license-name: LicenseRef-GPL
maintainer: John 'Ski <riuga@tuta.io>
synopsis: A preprocessor and quasiquoter for translating arrow notation
test-bench-deps:
  arrowp-qq: '>=0'
  arrows: '>=0'
  base: '>=0'
  template-haskell: '>=0'
