all-versions:
- 0.1.0.0
author: Donnacha Oisín Kidney
basic-deps:
  base: '>=4.9 && <5'
changelog: ''
changelog-type: ''
description: |
  # arity-generic-liftA

  There's a family of functions in
  [Control.Applicative](https://hackage.haskell.org/package/base-4.11.0.0/docs/Control-Applicative.html)
  which follow the pattern `liftA2`, `liftA3`, etc. Using some
  tricks from Richard Eisenberg's thesis we can write them all at once. This
  package does exactly that, providing a function (`lift`) which is an
  arity-generic version of the `liftAn`.

  ```haskell
  >>> lift (\x y z -> x ++ y ++ z) (Just "a") (Just "b") (Just "c")
  Just "abc"
  ```

  [Eisenberg, Richard A. “Dependent Types in Haskell: Theory and Practice.” University of Pennsylvania, 2016.](https://github.com/goldfirere/thesis/raw/master/built/thesis.pdf)
description-type: markdown
hash: a921290710c2a2a84113f8c1f97fcdfa68fd318640b8256570b2ada31ba15d35
homepage: https://github.com/oisdk/arity-generic-liftA#readme
latest: 0.1.0.0
license-name: MIT
maintainer: mail@doisinkidney.com
synopsis: Provides an arity-generic version of the liftA2, liftA3... liftAn functions.
test-bench-deps:
  arity-generic-liftA: '>=0'
  base: '>=4.9 && <5'
  doctest: '>=0.3.0'
