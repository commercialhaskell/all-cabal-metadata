homepage: https://github.com/berberman/arch-hs
changelog-type: markdown
hash: 70bc8610dec84f3ca87e2b27015ddaed65c686833fcde8be512e532db18f6b3e
test-bench-deps: {}
maintainer: berberman <berberman@yandex.com>
synopsis: Distribute hackage packages to archlinux
changelog: |
  # Changelog

  `arch-hs` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.11.0.0

  - Add `arch-hs-rdepcheck`

  - Support Cabal 3.6

  - Fix datasubdir generation

  - Update dependency versions

  - Update name preset

  ## 0.10.2.0

  - Don't treat special licenses as custom licenses

  - Add `--datasubdir` to template

  ## 0.10.1.0

  - Always generate `-f` or `-f-` for each flag in PKGBUILD

  - Better prompt for missing packages

  - Fix the bug that resolved targets were not filtered out correctly when processing sub-libraries

  - Update name preset

  ## 0.10.0.0

  - Add `arch-hs-sync list` to list Haskell packages in [community]

  - Remove generating meta package

  - Add `--install-deps` to call pacman to install all dependencies of a target

  - Fix the list of packages to be packed is not consistent

  - Add `--no-skip-missing` to consider abnormal dependencies in packaging

  - Update dependency versions

  - Update name preset

  ## 0.9.1.0

  - Support Cabal 3.4

  - Use the version of [`haskell-ghc`](https://archlinux.org/packages/community/x86_64/ghc/) to evaluate condition trees

  - Fix the bug that sub-lib components appear wrongly in results

  ## 0.9.0.0

  - Remove `arch-hs-submit` executable

  - Add `arch-hs-sync` executable, which has two commands:

    - `arch-hs-sync submit` - the same as `arch-hs-submit` previously
    - `arch-hs-sync check` - check version inconsistencies between [community] and Hackage

  - Improve CLI options:

    - values of `--skip` and `--flag` are no longer separated by comma
    - the options can be set many times, for example: `arch-hs -f packageA:flagA:true -f packageB:flagB:false`

  - Update name preset

  ## 0.8.0.0

  - Fix the bug that unable to run with dependency-free packages

  - Do not generate PKGBUILDs for missing dependencies of the target

  - Support resolving sub-libraries in `arch-hs-diff`

  - Remove `falseList`, which `arch-hs-submit` no longer uses

  ## 0.7.1.0

  - Bump ghc version to 8.10.4

  - Fix some output formats

  ## 0.7.0.0

  - Support dumping output of `arch-hs` to JSON

  - Support resolving setup dependencies in `arch-hs-diff`

  - Fix wrong concatenation direction of differentiating dependencies in `arch-hs-diff`

  - Replace `req` with [`arch-web`](https://github.com/berberman/arch-web) and `http-client`

  - Make `getLatestSHA256` become total function

  ## 0.6.2.0

  - Use `Doc` to print prompt messages

  - Fix wrong line feeds in `arch-hs-diff`

  ## 0.6.1.0

  - Show dependens and makedepends in `arch-hs-diff` even if there is no difference between two target versions

  - Bump ghc version to 8.10.3

  - Fix an alignment error in `arch-hs-submit`

  ## 0.6.0.0

  - Adopt [prettyprinter](https://hackage.haskell.org/package/prettyprinter)

  - Support resolving `pkgconfigDepends` and `extraLibs` using pacman files db

  - Support resolving custom-setup dependencies

  - Add an option to force `arch-hs` to run even if the target is in [community]

  - Adopt [Diff](https://hackage.haskell.org/package/Diff) in `arch-hs-diff` and `arch-hs-submit`

  - Fix the bug that `ghc` is missing in depends

  - Fix typo ([#35](https://github.com/berberman/arch-hs/pull/35))

  - Update dependencies ([#34](https://github.com/berberman/arch-hs/pull/34))

  ## 0.5.0.0

  - Add `TargetDisappearException` to complain if target is clearly not reachable

  - Warn abnormal dependencies

  - Clear trace file if is not empty

  - Collect test dependencies recursively

  - Drop meaningless `alpm_errno_t`

  - Update name preset ([#30](https://github.com/berberman/arch-hs/pull/30) [#32](https://github.com/berberman/arch-hs/pull/32))

  - Fix a typo ([#29](https://github.com/berberman/arch-hs/pull/29))

  ## 0.4.0.0

  - [Alpm](https://www.archlinux.org/pacman/libalpm.3.html) support

  - Fix sub-libraries handling ([#22](https://github.com/berberman/arch-hs/issues/22))

  - Fix missing build tools ([#24](https://github.com/berberman/arch-hs/issues/24))

  - Fix flag comparison in diff ([#25](https://github.com/berberman/arch-hs/issues/25))

  - Fix pretty printing of flags

  - Update name preset ([#26](https://github.com/berberman/arch-hs/pull/26))

  ## 0.3.0.0

  - Update name preset

  - Add check in submit

  ## 0.2.0.0

  - More accurate naming conversion between hackage representation and archlinux representation, according to [NAME_PRESET.json](https://github.com/berberman/arch-hs/blob/master/data/NAME_PRESET.json)

  - Clearer project structure

  - More reasonable exceptions

  - Provide versions of haskell packages in archlinux community

  - Add `arch-hs-submit` executable

  ## 0.1.1.0

  - Add uusi option

  ## 0.1.0.0

  - Support sub-libraries ([#16](https://github.com/berberman/arch-hs/issues/16))

  - Split `arch-hs-uusi` into [`uusi`](https://github.com/berberman/uusi)

  - Better performance in dependency resolving

  - Fix recommended package order

  - Trace for dependency resolving

  - More reasonable PKGBUILD template ([#17](https://github.com/berberman/arch-hs/issues/16) [#18](https://github.com/berberman/arch-hs/issues/16) [#19](https://github.com/berberman/arch-hs/issues/16) [#20](https://github.com/berberman/arch-hs/issues/16))

  - Fix indentation of flags' pretty printing

  ## 0.0.0.0

  - Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/berberman/arch-hs/releases
basic-deps:
  http-client: -any
  microlens-th: '>=0.4.3 && <0.5'
  bytestring: -any
  split: '>=0.2.3 && <0.3'
  Cabal: '>=3.2 && <3.7'
  base: '>=4.12 && <5'
  Diff: '>=0.4.0 && <0.5'
  servant-client: '>=0.18.2 && <0.20'
  text: -any
  megaparsec: '>=9.0.0 && <9.1 || >=9.1.0 && <9.2 || >=9.2.0 && <9.3 || >=9.3.0 &&
    <9.4'
  filepath: '>=1.4.2 && <1.5'
  conduit: '>=1.3.2 && <1.4'
  arch-hs: -any
  conduit-extra: '>=1.3.5 && <1.4'
  hackage-db: '>=2.1.0 && <2.2'
  containers: -any
  tar-conduit: '>=0.3.2 && <0.4'
  http-client-tls: -any
  arch-web: '>=0.1.1 && <0.2'
  optparse-simple: '>=0.1.1.3 && <0.2'
  polysemy: '>=1.5.0 && <1.10'
  prettyprinter: '>=1.7.0 && <1.8'
  deepseq: '>=1.4.4 && <1.5'
  algebraic-graphs: '>=0.5 && <0.8'
  microlens: '>=0.4.11 && <0.5'
  aeson: '>=1.5.4 && <2.2'
  template-haskell: '>=2.16.0 && <2.17 || >=2.17.0 && <2.18 || >=2.18.0 && <2.19'
  prettyprinter-ansi-terminal: '>=1.1.2 && <1.2'
  neat-interpolation: '>=0.5.1 && <0.6'
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.7.0.0
- 0.7.1.0
- 0.8.0.0
- 0.9.0.0
- 0.9.1.0
- 0.10.0.0
- 0.10.1.0
- 0.10.2.0
- 0.11.0.0
author: berberman
latest: 0.11.0.0
description-type: markdown
description: "# arch-hs\n\n[![Hackage](https://img.shields.io/hackage/v/arch-hs.svg?logo=haskell)](https://hackage.haskell.org/package/arch-hs)\n[![Dependency](https://img.shields.io/hackage-deps/v/arch-hs)](https://packdeps.haskellers.com/feed?needle=arch-hs)\n[![MIT
  license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\n| Env              |
  CI                                                                                                                        |\n|
  ---------------- | -------------------------------------------------------------------------------------------------------------------------
  |\n| pacman (-f alpm) | [![ArchLinux](https://github.com/berberman/arch-hs/actions/workflows/archlinux.yml/badge.svg)](https://github.com/berberman/arch-hs/actions/workflows/archlinux.yml)
  |\n| cabal-install    | [![CI](https://github.com/berberman/arch-hs/actions/workflows/ci.yml/badge.svg)](https://github.com/berberman/arch-hs/actions/workflows/ci.yml)
  \    |\n\nA program generating PKGBUILD for hackage packages. Special thanks to
  [felixonmars](https://github.com/felixonmars/).\n\n**Notice that `arch-hs` will
  always support only the latest GHC version used by Arch Linux.**\n\n\n## Introduction\n\nGiven
  the name of a package in hackage, `arch-hs` can generate PKGBUILD files, not only
  for the package\nwhose name is given, but also for all dependencies missing in [[community]](https://www.archlinux.org/packages/).\n`arch-hs`
  has a naive built-in dependency solver, which can fetch those dependencies and find
  out which are required to be packaged.\nDuring the dependency calculation, all version
  constraints will be discarded due to the arch haskell packaging strategy,\nthus
  there is no guarantee of dependencies' version consistency.\n\n## Prerequisite\n\n`arch-hs`
  is a PKGBUILD text file generator, which is not integrated with `pacman`(See [Alpm
  Support](#Alpm-Support)), depending on nothing than:\n\n* Pacman databases (`community.db`,
  `community.files`, `core.files`, and `extra.files`)\n\n* Hackage index tarball (`01-index.tar`,
  or `00-index.tar` previously) -- usually provided by `cabal-install`\n\n## Installation\n\n`arch-hs`
  is portable, which means it's not restricted to Arch Linux.\nHowever, `arch-hs`
  can use libalpm to load pacman database on Arch Linux,\nand if you want to run on
  other systems, you have to build it from source.\n\n### Install the latest release\n\n```\n#
  pacman -S arch-hs\n```\n\n`arch-hs` is available in [[community]](https://www.archlinux.org/packages/community/x86_64/arch-hs/),
  so you can install it using `pacman`.\n\n### Install the development version\n\n```\n#
  pacman -S arch-hs-git\n```\n\nThe `-git` version is available in [[archlinuxcn]](https://github.com/archlinuxcn/repo),
  following the latest git commit.\n\n## Build\n\n```\n$ git clone https://github.com/berberman/arch-hs\n```\n\nThen
  build it via stack or cabal.\n\n#### Stack\n```\n$ stack build\n```\n\n#### Cabal
  (dynamic)\n```\n$ cabal configure --disable-library-vanilla --enable-shared --enable-executable-dynamic
  --ghc-options=-dynamic \n$ cabal build\n```\n\n## Usage\n\nJust run `arch-hs` in
  command line with options and a target. Here is an example:\nwe will create the
  archlinux package of [gi-gdk](https://hackage.haskell.org/package/gi-gdk).\n\n<details
  open>\n<summary>\nOutput:\n</summary>\n\n```\n$ arch-hs -o ~/test --alpm gi-gdk
  \nⓘ Loading hackage from /home/berberman/.cabal/packages/hackage.haskell.org/01-index.tar\nⓘ
  Loading community.db from libalpm\nⓘ Start running...\nⓘ Solved:\n...\ngi-gdk                                      ✘\n
  ├─Cabal (Setup)                            ✔ [community]\n ├─bytestring (Lib)                         ✔
  [community]\n ├─containers (Lib)                         ✔ [community]\n ├─gi-cairo
  (Lib, Setup)                    ✔ [community]\n ├─gi-gdkpixbuf (Lib, Setup)                ✘\n
  ├─gi-gio (Lib, Setup)                      ✘\n ├─gi-glib (Lib, Setup)                     ✘\n
  ├─gi-gobject (Lib, Setup)                  ✘\n ├─gi-pango (Lib, Setup)                    ✘\n
  ├─haskell-gi (Lib, Setup)                  ✔ [community]\n ├─haskell-gi-base (Lib)
  \                   ✔ [community]\n ├─haskell-gi-overloading (Lib)             ✔
  [community]\n ├─text (Lib)                               ✔ [community]\n └─transformers
  (Lib)                       ✔ [community]\ngi-gdkpixbuf                                ✘\n
  ├─Cabal (Setup)                            ✔ [community]\n ├─bytestring (Lib)                         ✔
  [community]\n ├─containers (Lib)                         ✔ [community]\n ├─gi-gio
  (Lib, Setup)                      ✘\n ├─gi-glib (Lib, Setup)                     ✘\n
  ├─gi-gobject (Lib, Setup)                  ✘\n ├─haskell-gi (Lib, Setup)                  ✔
  [community]\n ├─haskell-gi-base (Lib)                    ✔ [community]\n ├─haskell-gi-overloading
  (Lib)             ✔ [community]\n ├─text (Lib)                               ✔ [community]\n
  └─transformers (Lib)                       ✔ [community]\ngi-gio                                      ✘\n
  ├─Cabal (Setup)                            ✔ [community]\n ├─bytestring (Lib)                         ✔
  [community]\n ├─containers (Lib)                         ✔ [community]\n ├─gi-glib
  (Lib, Setup)                     ✘\n ├─gi-gobject (Lib, Setup)                  ✘\n
  ├─haskell-gi (Lib, Setup)                  ✔ [community]\n ├─haskell-gi-base (Lib)
  \                   ✔ [community]\n ├─haskell-gi-overloading (Lib)             ✔
  [community]\n ├─text (Lib)                               ✔ [community]\n └─transformers
  (Lib)                       ✔ [community]\ngi-glib                                     ✘\n
  ├─Cabal (Setup)                            ✔ [community]\n ├─bytestring (Lib)                         ✔
  [community]\n ├─containers (Lib)                         ✔ [community]\n ├─haskell-gi
  (Lib, Setup)                  ✔ [community]\n ├─haskell-gi-base (Lib)                    ✔
  [community]\n ├─haskell-gi-overloading (Lib)             ✔ [community]\n ├─text
  (Lib)                               ✔ [community]\n └─transformers (Lib)                       ✔
  [community]\ngi-gobject                                  ✘\n ├─Cabal (Setup)                            ✔
  [community]\n ├─bytestring (Lib)                         ✔ [community]\n ├─containers
  (Lib)                         ✔ [community]\n ├─gi-glib (Lib, Setup)                     ✘\n
  ├─haskell-gi (Lib, Setup)                  ✔ [community]\n ├─haskell-gi-base (Lib)
  \                   ✔ [community]\n ├─haskell-gi-overloading (Lib)             ✔
  [community]\n ├─text (Lib)                               ✔ [community]\n └─transformers
  (Lib)                       ✔ [community]\ngi-harfbuzz                                 ✘\n
  ├─Cabal (Setup)                            ✔ [community]\n ├─bytestring (Lib)                         ✔
  [community]\n ├─containers (Lib)                         ✔ [community]\n ├─gi-glib
  (Lib, Setup)                     ✘\n ├─gi-gobject (Lib, Setup)                  ✘\n
  ├─haskell-gi (Lib, Setup)                  ✔ [community]\n ├─haskell-gi-base (Lib)
  \                   ✔ [community]\n ├─haskell-gi-overloading (Lib)             ✔
  [community]\n ├─text (Lib)                               ✔ [community]\n └─transformers
  (Lib)                       ✔ [community]\ngi-pango                                    ✘\n
  ├─Cabal (Setup)                            ✔ [community]\n ├─bytestring (Lib)                         ✔
  [community]\n ├─containers (Lib)                         ✔ [community]\n ├─gi-glib
  (Lib, Setup)                     ✘\n ├─gi-gobject (Lib, Setup)                  ✘\n
  ├─gi-harfbuzz (Lib, Setup)                 ✘\n ├─haskell-gi (Lib, Setup)                  ✔
  [community]\n ├─haskell-gi-base (Lib)                    ✔ [community]\n ├─haskell-gi-overloading
  (Lib)             ✔ [community]\n ├─text (Lib)                               ✔ [community]\n
  └─transformers (Lib)                       ✔ [community]\n...\n\nⓘ Recommended package
  order:\n1. gi-glib\n2. gi-gobject\n3. gi-harfbuzz\n4. gi-pango\n5. gi-gio\n6. gi-gdkpixbuf\n7.
  gi-gdk\n\nⓘ Detected pkgconfig or extraLib from target(s):\ngi-gdk:      gtk4.pc\ngi-gdkpixbuf:gdk-pixbuf-2.0.pc\ngi-gio:
  \     gio-2.0.pc\ngi-glib:     glib-2.0.pc\ngi-gobject:  gobject-2.0.pc\ngi-harfbuzz:
  harfbuzz.pc, harfbuzz-gobject.pc\ngi-pango:    pango.pc\n\nⓘ Now finding corresponding
  system package(s) using files db:\nⓘ Loading [core] files from libalpm\nⓘ Loading
  [extra] files from libalpm\nⓘ Done:\ngtk4.pc               ⇒   gtk4\ngdk-pixbuf-2.0.pc
  \    ⇒   gdk-pixbuf2\ngio-2.0.pc            ⇒   glib2\nglib-2.0.pc           ⇒   glib2\ngobject-2.0.pc
  \       ⇒   glib2\nharfbuzz.pc           ⇒   harfbuzz\nharfbuzz-gobject.pc   ⇒   harfbuzz\npango.pc
  \             ⇒   pango\n\nⓘ Write file: /home/berberman/test/haskell-gi-gdk/PKGBUILD\nⓘ
  Write file: /home/berberman/test/haskell-gi-gdkpixbuf/PKGBUILD\nⓘ Write file: /home/berberman/test/haskell-gi-gio/PKGBUILD\nⓘ
  Write file: /home/berberman/test/haskell-gi-glib/PKGBUILD\nⓘ Write file: /home/berberman/test/haskell-gi-gobject/PKGBUILD\nⓘ
  Write file: /home/berberman/test/haskell-gi-harfbuzz/PKGBUILD\nⓘ Write file: /home/berberman/test/haskell-gi-pango/PKGBUILD\n✔
  Success!\n```\n</details>\n\nThis output tells us that in order to package `gi-gdk`,
  we must package its dependencies\nlisted in package order, which are not present
  in [community] repo. Particularly, `gi-gdk`\nrequires external system dependencies,
  so `arch-hs` can map them to system packages using files db.\n\n```\n$ tree ~/test\n/home/berberman/test\n├──
  haskell-gi-gdk\n│   └── PKGBUILD\n├── haskell-gi-gdkpixbuf\n│   └── PKGBUILD\n├──
  haskell-gi-gio\n│   └── PKGBUILD\n├── haskell-gi-glib\n│   └── PKGBUILD\n├── haskell-gi-gobject\n│
  \  └── PKGBUILD\n├── haskell-gi-harfbuzz\n│   └── PKGBUILD\n└── haskell-gi-pango\n
  \   └── PKGBUILD\n```\n\n`arch-hs` generates PKGBUILD for each package. Let's see
  what we have in `./haskell-gi-harfbuzz/PKGBUILD`:\n\n``` bash\n# This file was generated
  by https://github.com/berberman/arch-hs, please check it manually.\n# Maintainer:
  Your Name <youremail@domain.com>\n\n_hkgname=gi-harfbuzz\npkgname=haskell-gi-harfbuzz\npkgver=0.0.3\npkgrel=1\npkgdesc=\"HarfBuzz
  bindings\"\nurl=\"https://github.com/haskell-gi/haskell-gi\"\nlicense=(\"LGPL2.1\")\narch=('x86_64')\ndepends=('ghc-libs'
  'haskell-gi-glib' 'haskell-gi-gobject' 'haskell-gi' 'haskell-gi-base' 'haskell-gi-overloading'
  'harfbuzz')\nmakedepends=('ghc')\nsource=(\"https://hackage.haskell.org/packages/archive/$_hkgname/$pkgver/$_hkgname-$pkgver.tar.gz\")\nsha256sums=('5f61c7b07427d0b77f867c3bc560043239c6184f98921295ce28fc8c9ce257e5')\n\nbuild()
  {\n  cd $_hkgname-$pkgver\n\n  runhaskell Setup configure -O --enable-shared --enable-executable-dynamic
  --disable-library-vanilla \\\n    --prefix=/usr --docdir=/usr/share/doc/$pkgname
  --enable-tests \\\n    --dynlibdir=/usr/lib --libsubdir=\\$compiler/site-local/\\$pkgid
  \\\n    --ghc-option=-optl-Wl\\,-z\\,relro\\,-z\\,now \\\n    --ghc-option='-pie'\n\n
  \ runhaskell Setup build\n  runhaskell Setup register --gen-script\n  runhaskell
  Setup unregister --gen-script\n  sed -i -r -e \"s|ghc-pkg.*update[^ ]* |&'--force'
  |\" register.sh\n  sed -i -r -e \"s|ghc-pkg.*unregister[^ ]* |&'--force' |\" unregister.sh\n}\n\npackage()
  {\n  cd $_hkgname-$pkgver\n\n  install -D -m744 register.sh \"$pkgdir\"/usr/share/haskell/register/$pkgname.sh\n
  \ install -D -m744 unregister.sh \"$pkgdir\"/usr/share/haskell/unregister/$pkgname.sh\n
  \ runhaskell Setup copy --destdir=\"$pkgdir\"\n  install -D -m644 LICENSE -t \"$pkgdir\"/usr/share/licenses/$pkgname/\n
  \ rm -f \"$pkgdir\"/usr/share/doc/$pkgname/LICENSE\n}\n```\n\n`arch-hs` will collect
  the information from hackage db, and apply it into a fixed template after some processing
  steps\nincluding renaming, matching license, and filling out dependencies etc.\nHowever,
  packaging haven't been done so far.\n`arch-hs` can't guarantee that this package
  can be built by ghc with the latest dependencies;\nhence some patches may be required
  in `prepare()`, such as [uusi](#Uusi).\n\n\n## Options\n\n### Output\n\n```\n$ arch-hs
  -o ~/test TARGET\n```\n\nUsing `-o` can generate a series of PKGBUILD including
  `TARGET` with its dependencies into the output dir. If you don't pass it, only dependency
  calculation will occur.\n\n### Flag Assignments\n```\n$ arch-hs -f TARGET:FLAG_A:true
  TARGET\n```\n\nUsing `-f` can pass flags, which may affect the results of resolving.
  \ \n\n### AUR Searching\n\n```\n$ arch-hs -a TARGET\n```\n\nWith `-a`, `arch-hs`
  will regard AUR as another package provider, and it will try to search missing packages
  in AUR as well.\n\n### Skipping Components\n\n```\n$ arch-hs -s COMPONENT_A TARGET\n```\n\nUsing
  `-s` can force skip runnable components in dependency resolving.\nThis is useful
  when a package doesn't provide flag to disable its runnables, which will be built
  by default but are trivial in system level packaging.\nNotice that this only makes
  sense in the lifetime of `arch-hs`, whereas generated PKGBUILD and actual build
  processes will not be affected.\n\n### Extra Cabal Files\n\n```\n$ arch-hs -e ~/TARGET
  TARGET\n```\n\n**For Testing Purposes Only**\n\nUsing `-e` can include extra `.cabal`
  files as supplementary.\nUseful when the `TARGET` hasn't been released to hackage.\n\n###
  Trace\n\n```\n$ arch-hs --trace TARGET\n```\n\nWith `--trace`, `arch-hs` can print
  the process of dependency resolving into stdout.\n\n```\n$ arch-hs --trace-file
  foo.log TARGET\n```\n\nSimilar to `--trace`, but the log will be written into a
  file.\n\n### Uusi\n\n```\n$ arch-hs -o ~/test --uusi TARGET\n```\n\nWith `--uusi`,
  `arch-hs` will generate following snippet for each package:\n\n```bash\nprepare()
  {\n  uusi $_hkgname-$pkgver/$_hkgname.cabal\n}\n```\n\nSee [uusi](https://hackage.haskell.org/package/uusi)
  for details.\n\n### Alpm\n\nSee [Alpm Support](#Alpm-Support).\n\n### Force\n\n```\n$
  arch-hs --force TARGET\n```\n\nWith `--force`, `arch-hs` will try to package even
  if the target is provided.\n\n### Json\n\n```\n$ arch-hs --json ./output.json TARGET\n```\n\nWith
  `--json`, `arch-hs` will dump information presented in stdout to file as JSON format,
  including:\n  * abnormal dependencies\n  * solved packages\n  * recommended package
  order\n  * system dependencies\n  * flags\n\n### No skip missing\n\n```\n$ arch-hs
  --no-skip-missing TARGET\n```\n\nWith `--no-skip-missing`, `arch-hs` will try to
  package if the dependent of this package exist whereas this package does not.\n\n##
  [Name preset](https://github.com/berberman/arch-hs/blob/master/data/NAME_PRESET.json)\n\nTo
  distribute a haskell package to archlinux, the name of package should be changed
  according to the naming convention:\n\n* for haskell libraries, their names must
  have `haskell-` prefix\n\n* for programs, it depends on circumstances\n\n* names
  should always be in lower case\n\nHowever, it's not enough to prefix the string
  with `haskell-` and transform to lower case; in some special situations, the hackage
  name\nmay have `haskell-` prefix already, or the case is irregular, thus we have
  to a name preset manually. Once a package distributed to archlinux,\nwhose name
  conform to above-mentioned situation, the name preset should be upgraded correspondingly.\n\n##
  Diff\n\n`arch-hs` also provides a component called `arch-hs-diff`. `arch-hs-diff`
  can show the differences of package description between two versions of a package,\nand
  remind us if some required packages in community repo can't satisfy the version
  constraints, or they are non-existent.\nThis is useful in the subsequent maintenance
  of a package. For example:\n\n```\n$ arch-hs-diff --alpm comonad 5.0.6 5.0.7\nⓘ
  Loading community.db from libalpm\nⓘ Start running...\nⓘ Downloading cabal file
  from https://hackage.haskell.org/package/comonad-5.0.6/revision/0.cabal...\nⓘ Downloading
  cabal file from https://hackage.haskell.org/package/comonad-5.0.7/revision/0.cabal...\nPackage:
  comonad\nVersion: 5.0.6  ⇒  5.0.7\nSynopsis: Comonads\nURL: http://github.com/ekmett/comonad/\nDepends:\n
  \ base  >=4 && <5\n  containers  >=0.3 && <0.7\n  distributive  >=0.2.2 && <1\n
  \ tagged  >=0.7 && <1\n  transformers  >=0.2 && <0.6\n  transformers-compat  >=0.3
  && <1\n--------------------------------------\n  base  >=4 && <5\n  containers  >=0.3
  && <0.7\n  distributive  >=0.2.2 && <1\n  indexed-traversable  >=0.1 && <0.2\n  tagged
  \ >=0.7 && <1\n  transformers  >=0.2 && <0.6\n  transformers-compat  >=0.3 && <1\n
  \nMakeDepends:\n  base  -any\n  doctest  >=0.11.1 && <0.17\n--------------------------------------\n
  \ base  -any\n  doctest  >=0.11.1 && <0.18\n\"doctest\" is required to be in range
  (>=0.11.1 && <0.17), but [community] provides (0.17). \nFlags:\n  comonad\n    ⚐
  test-doctests:\n        description:\n          \n        default: True\n        isManual:
  True\n    ⚐ containers:\n        description:\n          You can disable the use
  of the `containers` package using `-f-containers`.\n\n          Disabing this is
  an unsupported configuration, but it may be useful for accelerating builds in sandboxes
  for expert users.\n        default: True\n        isManual: True\n    ⚐ distributive:\n
  \       description:\n          You can disable the use of the `distributive` package
  using `-f-distributive`.\n\n          Disabling this is an unsupported configuration,
  but it may be useful for accelerating builds in sandboxes for expert users.\n\n
  \         If disabled we will not supply instances of `Distributive`\n\n        default:
  True\n        isManual: True\n--------------------------------------\n  comonad\n
  \   ⚐ test-doctests:\n        description:\n          \n        default: True\n
  \       isManual: True\n    ⚐ containers:\n        description:\n          You can
  disable the use of the `containers` package using `-f-containers`.\n\n          Disabing
  this is an unsupported configuration, but it may be useful for accelerating builds
  in sandboxes for expert users.\n        default: True\n        isManual: True\n
  \   ⚐ distributive:\n        description:\n          You can disable the use of
  the `distributive` package using `-f-distributive`.\n\n          Disabling this
  is an unsupported configuration, but it may be useful for accelerating builds in
  sandboxes for expert users.\n\n          If disabled we will not supply instances
  of `Distributive`\n\n        default: True\n        isManual: True\n    ⚐ indexed-traversable:\n
  \       description:\n          You can disable the use of the `indexed-traversable`
  package using `-f-indexed-traversable`.\n\n          Disabling this is an unsupported
  configuration, but it may be useful for accelerating builds in sandboxes for expert
  users.\n\n          If disabled we will not supply instances of `FunctorWithIndex`\n\n
  \       default: True\n        isManual: True\n✔ Success!\n```\n\n`arch-hs-diff`
  does not require hackage db, it downloads cabal files from hackage server instead.
  \n\n## Sync\n\nFor hackage distribution maintainers only, see `arch-hs-sync --help`
  for details.\n\n## Limitations\n\n* `arch-hs` will run into error, if solved targets
  contain cycle. Indeed, circular dependency lies ubiquitously in hackage because
  of tests,\nbut basic cycles are resolved manually in [community] by maintainers.
  So after the provider simplification, `arch-hs` can eliminate these cycles.\nNevertheless,
  if the target introduces new cycle or it dependens on a package in an unknown cycle,
  `arch-hs` will throw `CyclicExist` exception.\n\n* `arch-hs` is not able to handle
  with complicated situations: the libraries of a package partially exist in hackage,
  some libraries include external sources, etc. \n\n* `arch-hs`'s functionality is
  limited to dependency processing, whereas necessary procedures like\nfile patches,
  version range processes, etc. They need to be done manually, so **DO NOT** give
  too much trust in generated PKGBUILD files.\n\n## Alpm Support\n\n[alpm](https://www.archlinux.org/pacman/libalpm.3.html)
  is Arch Linux Package Management library.\nWhen running on Arch Linux, loading `community.db`
  and files dbs through this library is slightly faster than using the internal parser
  of `arch-hs`.\nThus, `arch-hs` provides a flag `alpm` to enable this feature:\n\n```\ncabal
  build -f alpm\n```\n\nThis flag is enabled by default in `arch-hs` Arch Linux package.\nCompiled
  with `alpm`, `arch-hs` uses alpm to load pacman databases by default.\nIn this case,
  the CLI flag `--no-alpm-community` and `--no-alpm-files` can be used to disable
  this feature.\n> When `alpm` is enabled, `arch-hs` will lose the capability of specifying
  the path of `community.db` and directory of files db.\n\n\n## Contributing\n\nIssues
  and PRs are always welcome. **\\_(:з」∠)\\_**\n"
license-name: MIT
