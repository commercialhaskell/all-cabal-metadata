homepage: http://arbtt.nomeata.de/
changelog-type: ''
hash: ac8502512f562e13813abc3d23321181da6a2170efc3456a39e86b52a3e0adce
test-bench-deps:
  pcre-light: -any
  bytestring: -any
  process-extras: '>=0.2 && <0.8'
  unix: -any
  base: '>=4.7 && <5'
  tasty-golden: '>=2.2.0.2 && <=2.3.4'
  time: '>=1.5'
  parsec: ==3.*
  containers: '>=0.5 && <0.7'
  binary: '>=0.5'
  utf8-string: -any
  mtl: -any
  tasty-hunit: '>=0.2 && <0.11'
  transformers: -any
  tasty: '>=0.7 && <1.5'
  deepseq: -any
  directory: -any
maintainer: Joachim Breitner <mail@joachim-breitner.de>
synopsis: Automatic Rule-Based Time Tracker
changelog: ''
basic-deps:
  exceptions: '>=0.8'
  pcre-light: -any
  bytestring: -any
  unix: -any
  base: '>=4.7 && <5'
  time: '>=1.5'
  text: -any
  X11: '>=1.9'
  strict: -any
  filepath: -any
  parsec: ==3.*
  conduit: '>=1.2 && <1.4'
  array: '>=0.4 && <0.6'
  containers: '>=0.5 && <0.7'
  unliftio-core: -any
  binary: '>=0.5'
  utf8-string: -any
  bytestring-progress: -any
  mtl: -any
  terminal-progress-bar: '>=0.4 && <0.5'
  attoparsec: ==0.13.*
  transformers: -any
  deepseq: -any
  resourcet: '>=1.2'
  aeson: '>=0.10 && <1.6'
  directory: -any
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.2.0
- 0.3.0
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.5.1
- '0.5'
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.4
- 0.6.4.1
- '0.7'
- '0.8'
- 0.8.1
- 0.8.1.1
- 0.8.1.2
- 0.8.1.3
- 0.8.1.4
- '0.9'
- 0.9.0.1
- 0.9.0.2
- 0.9.0.3
- 0.9.0.4
- 0.9.0.5
- 0.9.0.6
- 0.9.0.7
- 0.9.0.8
- 0.9.0.9
- 0.9.0.10
- 0.9.0.11
- 0.9.0.12
- 0.9.0.13
- '0.10'
- 0.10.0.1
- 0.10.0.2
- 0.10.1
- 0.10.2
- 0.10.3
- 0.10.4
- '0.11'
author: Joachim Breitner <mail@joachim-breitner.de>
latest: '0.11'
description-type: markdown
description: "arbtt, the Automatic Rule-Based Time Tracker\n============================================\n\n©
  2009 Joachim Breitner <mail@joachim-breitner.de>\n\nThe Automatic Rule-Based Time
  Tracker is a desktop daemon that runs in the\nbackground and, every minute, records
  what windows are open on your\ndesktop, what their titles are, which one is active.
  The accompanied\nstatistics program lets you derive information from this log file,
  i.e.\nwhat how much of your time have you been spending with e-mail, or what\nprojects
  are your largest time wasters. The mapping from the raw window\ntitles to sensible
  \"tags\" is done by a configuration file with an powerful\nsyntax.\n\nInstallation\n------------\n\nSee
  <http://arbtt.nomeata.de/#install>\n\nYou also need to make sure that `arbtt-capture`
  is started with your X\nsession:\n- If you use GNOME or KDE, you can copy the file\n
  \ `arbtt-capture.desktop` to `~/.config/autostart/`. You might need to put the\n
  \ full path to `arbtt-capture` in the `Exec` line there, if you did not do a\n  system
  wide installation.\n- If you use macOS, you can use `launchd` for this.\n  Create
  a `.plist` file like the following\n  (with the path changed to match where arbtt-capture
  is located in your system):\n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
  \ <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n
  \ <plist version=\"1.0\">\n      <dict>\n          <key>Label</key>\n          <string>de.nomeata.arbtt</string>\n
  \         <key>Program</key>\n          <string>/path/to/arbtt-capture</string>\n
  \         <key>RunAtLoad</key>\n          <true/>\n          <key>KeepAlive</key>\n
  \         <true/>\n      </dict>\n  </plist>\n  ```\n  and place it in `~/Library/LaunchAgents/de.nomeata.arbtt.plist`.\n
  \ This will ensure `arbtt-capture` is started whenever you log in.\n  To start the
  service without needing a new login,\n  you can run `launchctl load ~/Library/LaunchAgents/de.nomeata.arbtt.plist`.\n\nIf
  you want to record samples at a different rate than one per minute, you\nwill have
  to pass the `--sample-rate` parameter to arbtt-capture.\n\nDocumentation\n------------\n\nFull
  documentation is now provided in the user manual in the [doc/](doc/)\ndirectory.
  If you have the docbook xsl toolchain installed, you can\ngenerate the HTML documentation
  by entering \"make\" in that directory.\nOtherwise, you can use the\n[online version
  of the User’s Guide](http://arbtt.nomeata.de/doc/users_guide/index.html).\nBeware
  that this will also reflect the latest development version.\n\nDevelopment\n-----------\n\nYou
  are very welcome to help the developement of arbtt. You can find the\nlatest source
  at the git repository at\n<https://github.com/nomeata/arbtt> or\n<https://bitbucket.org/nomeata/arbtt>.\n\nThe
  issue tracker is hosted on bitbucket:\n  <https://bitbucket.org/nomeata/arbtt/issues>\nWhy
  Bitbucket and not GitHub? Why not, and we need diversitiy even in the\ncloud! (Don’t
  worry, you can use your GitHub account there.)\n\nSome of my plans or ideas include:\n\n
  * A graphical viewer that allows you to expore the tags in an appealing,\n   interactive
  way. Possibly based on the Charts haskell library.\n * Looking forward and backwards
  in time when writing rules. (Information\n   is already passed to the categorizing
  function, but not exposed to the\n   syntax).\n * `$total_idle` time, which is the
  maximum idle time until it is reset. This\n   would allow the user to catch the
  idle times more exactly.\n * Rules based on time of day, to create tags for worktime,
  weekend, late\n   at night. (Partially done)\n * Storing the current timezone in
  the tags, for the prevoius entry to be\n   more to be more useful.\n * Storing the
  hostname, in case a user has several. \n * Statistics based on time, to visualize
  trends.\n * Possibly more data sources?\n\nAny help cleaning, documenting or testing
  the current code is appreciated\nas well.\n\nCreating the Windows Installer\n------------------------------\n\nThe
  file `setup.iss` contains an installer script for Inno Setup and can be used\nto
  create the windows installer for arbtt. It can be used under wine. To build\narbtt
  under Windows, you need to install the Haskell Platform. Because the\nHaskell Platform
  ships an older version of the w32api package from mingw, you\nalso need to download
  `w32api-3.14-mingw32-dev.tar.gz` and copy at least the files\n`include/psapi.h`
  and `lib/libpsapi.a` over the files installed by the Haskell\nPlatform. For the
  `pcre-light` package, you need to install the `pcre` library.\nUnless you run a
  German version of Windows, you’ll need to adjust the path to\nthe `pcre3.dll` file
  in `setup.iss`. Install `Inno Setup`. Create the documentation\n(`make -C doc`)
  and configure arbtt with the `--with-ISCC-flag`:\n\n    $ wine runhaskell Setup.hs
  configure --with-ISCC='C:\\Programme\\Inno Setup 5\\ISCC.exe'\n\nagain adjusting
  the path if you do not have a German version of Windows. This\nwill put the version
  name into `setup.iss` and create the output file as\n`dist/arbtt-setup-<version>.exe.`\n\nDownload
  links:\n\n * http://hackage.haskell.org/platform/2009.2.0.2/HaskellPlatform-2009.2.0.2-setup.exe\n
  * http://sourceforge.net/projects/mingw/files/MinGW%20API%20for%20MS-Windows/\n
  * http://gnuwin32.sourceforge.net/downlinks/pcre.php\n * http://www.jrsoftware.org/download.php/is-unicode.exe\n\n"
license-name: GPL-2.0-only
