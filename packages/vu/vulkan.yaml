homepage: https://github.com/expipiplus1/vulkan#readme
changelog-type: markdown
hash: 7dec045771ad4c100df22f87112dcf3633cefc24eef7d3ca2cc3470013ada7a1
test-bench-deps:
  inline-c: -any
  base: -any
  containers: -any
  tasty-hunit: -any
  tasty: -any
  vulkan: -any
  template-haskell: -any
maintainer: Ellie Hermaszewska <live.long.and.prosper@monoid.al>
synopsis: Bindings to the Vulkan graphics API.
changelog: |
  # Change Log

  ## WIP

  ## [3.14.2] - 2021-12-07
  - Bump API version to v1.2.202

  ## [3.14.1] - 2021-12-01
  - Bump API version to v1.2.201

  ## [3.14] - 2021-11-25
  - Bump API version to v1.2.200

  ## [3.13.4] - 2021-11-17
  - Support ghc-9.3.20211111
  - No more warnings under 9.2

  ## [3.13.3] - 2021-11-17
  - Bump API version to v1.2.199

  ## [3.13.2] - 2021-11-09
  - Bump API version to v1.2.198

  ## [3.13.1] - 2021-11-03
  - Bump API version to v1.2.197

  ## [3.13] - 2021-10-14
  - Bump API version to v1.2.196

  ## [3.12.2] - 2021-08-18
  - Bump API version to v1.2.189

  ## [3.12.1] - 2021-08-12
  - Bump API version to v1.2.188

  ## [3.12] - 2021-08-12
  - Bump API version to v1.2.188

  ## [3.11.5] - 2021-08-03
  - Bump API version to v1.2.187

  ## [3.11.4.1] - 2021-07-30
  - Documentation fixes

  ## [3.11.4] - 2021-07-27
  - Bump API version to v1.2.186

  ## [3.11.3] - 2021-07-21
  - Bump API version to v1.2.185

  ## [3.11.2] - 2021-07-07
  - Bump API version to v1.2.184

  ## [3.11.1] - 2021-06-28
  - Bump API version to v1.2.183

  ## [3.11.0.2] - 2021-06-26
  - Tweak cabal file to please `cabal check`

  ## [3.11.0.1] - 2021-06-26
  - Use allocaBytes over allocaBytesAligned where possible

  ## [3.11] - 2021-06-21
  - Bump API version to v1.2.182

  ## [3.10.4] - 2021-06-14
  - Bump API version to v1.2.181

  ## [3.10.3] - 2021-06-07
  - Bump API version to v1.2.180

  ## [3.10.2] - 2021-06-05
  - Bump API version to v1.2.179

  ## [3.10.1] - 2021-03-31
  - Bump API version to v1.2.174
  - Fix https://github.com/expipiplus1/vulkan/issues/266

  ## [3.10] - 2021-02-18
  - Bump API version to v1.2.170

  ## [3.9.1] - 2021-02-06
  - Bump API version to v1.2.169
  - Add `COMPLETE` pragma to `MAKE_VERSION` pattern
    https://github.com/expipiplus1/vulkan/issues/256

  ## [3.10] - 2021-01-09
  - Make zero instance for `TransformMatrixKHR` return identity matrix. See
    https://github.com/expipiplus1/vulkan/issues/240
  - Remove explicit 'count' field in AccelerationStructureBuildGeometryInfoKHR.
    See https://github.com/expipiplus1/vulkan/issues/239
  - Do not bother poking empty vectors for zero pokes
  - Use `0` for spec version requirements for SPIRV Requirements, See
    https://github.com/expipiplus1/vulkan/issues/249

  ## [3.8.3] - 2021-01-04
  - Bump API version to v1.2.166

  ## [3.8.2] - 2020-12-14
  - Bump API version to v1.2.165

  ## [3.8.1] - 2020-12-08
  - Bump API version to v1.2.164

  - Add cabal flag trace-calls to enable calling traceEventIO before and after
    every Vulkan command

  ## [3.8] - 2020-11-30

  - Bump API version to v1.2.163
  - Add `Vulkan.Requirement`, a module for specifying requirements for `Device`s
    and `Instance`s
  - Expose SPIR-V Extensions and Capabilities in `Vulkan.SPIRVRequirements`
  - Expose extension dependencies in `Vulkan.Extensions.Dependencies`
  - Squash some warnings

  Thanks to @sheaf for their help with this release!

  ## [3.7] - 2020-11-24
  - Bump API version to v1.2.162
    - This is a breaking change to anyone using VK_KHR_ray_tracing (which no
      longer exists)
  - Add bracketing functions for `withRayTracingPipelinesKHR` and
    `withRayTracingPipelinesNV`
  - Add all possible storable instances for Vulkan structs
  - Remove tuples from the constructors of `ClearColorValue`
  - Unpack top level tuple in `TransformMatrixKHR`, the `matrix` record accessor
    has been split into `matrixRow0`, `matrixRow1`, and `matrixRow2`
  - Add extension documentation to extension modules.
  - Tweak ordering of documentation in Haddocks to make it more user-friendly

  ## [3.6.15] - 2020-11-16
  - Bump API version to v1.2.161

  ## [3.6.14] - 2020-11-15

  - Add `FiniteBits` instance for Flags
  - Fix getting function pointers for functions which have aliases (those which
    have been promoted to core versions mostly)

  ## [3.6.13] - 2020-11-09
    - Bump API version to v1.2.160

  ## [3.6.12] - 2020-11-03

    - Bump API version to v1.2.159
    - Include enum aliases defined in `<enums>` sections, until now only those
      enum aliases in `features` or `extensions` were used.

  ## [3.6.11.1] - 2020-11-01

  - Raise bound on base

  ## [3.6.11] - 2020-10-27
    - Bump API version to v1.2.158

  ## [3.6.10] - 2020-10-12
    - Bump API version to v1.2.157

  ## [3.6.9] - 2020-10-07
    - Bump API version to v1.2.156

  ## [3.6.8] - 2020-09-28
    - Bump API version to v1.2.155

  ## [3.6.7] - 2020-09-25
    - Bump API version to v1.2.154

  ## [3.6.6] - 2020-08-27
    - Bump API version to 1.2.152
    - NoDuplicateRecordFields for Vulkan.Dynamic

  ## [3.6.5] - 2020-08-17
    - Bump API version to 1.2.151

  ## [3.6.4] - 2020-08-11
    - Bump API version to 1.2.150

  ## [3.6.3] - 2020-08-05
    - Bump API version to 1.2.149

  ## [3.6.2] - 2020-07-21
    - Bump API version to 1.2.148

  ## [3.6.1] - 2020-07-14
    - Bump API version to 1.2.147

  ## [3.6] - 2020-07-05
    - Bump API version to 1.2.146

  ## [3.5] - 2020-06-22
    - Bump API version to 1.2.145
    - Bump API version to 1.2.143
    - Bump API version to 1.2.144
      - Only documentation and version number changes

  ## [3.4] - 2020-06-03
    - Bump API version to 1.2.142
      - The spec includes specific locations for types, so we use them
      - BaseType -> FundamentalTypes
    - Add `withSomeStruct` helper

  ## [3.3.1] - 2020-05-18
    - Bump API version to 1.2.141
    - Generate haddocks for command parameters, #92
    - Eq instances for some simple structs, #94
    - Generate safe FFI versions of blocking functions (Those with "wait" in the
      name or which can return "TIMEOUT"), #96
    - Add cabal flag for enable deriving Generic for structs, #99
    - Add `complete` pragmas for `::&` and `:&`

  ## [3.3] - 2020-05-07
    - Move package from `Graphics.Vulkan` to just `Vulkan`, #60
    - Bump API version to 1.2.140
    - Make the continuation the last argument to 'bracket' functions, discussion
      on #49
    - Begin/End bracket pairs are now called 'useXXX' rather than 'withXXX', #66
    - Begin/End bracket pairs where it's not necessary to 'End' on an exception
      have a simplified type, discussion on #49
    - Clarify optional vector lengths by preserving the length member, #71
    - Infer lengths of preserved length members when they are 0
    - Throw an exception when trying to call a null function pointer, #42
    - Implement HasObjectType class to automate getting VkObjectType, #54
    - Add constraints to check that structs are correctly extended
    - Simplify type of `withDescriptorSets`, it no longer requires the user
      specifying the `DescriptorPool` twice, #81
    - Wrap with SomeStruct extensible structs in Vector arguments to commands, #82

    Thanks to @dpwiz for helping with this release!

  ## [3.2.0.0] - 2020-05-02
    - Update API version 1.2.139
    - Bracket functions now take as an argument a function to consume a pair of
      begin/end actions
    - Change `Either Word32 vec` to `vec` where the non-empty length is
      constrained to be the length of another known vector
    - Move `Counter` prefix on `PerformanceCounterResult` to be a suffix
    - Drop dependency on `vector-sized`, it was only used internally

  ## [3.1.0.0] - 2020-03-10
    - Commands are now in MonadIO
    - Improved documentation
    - More `bracket` functions for `cmd`s
    - Add `:&` and `::&` pattern synonyms for extensible struct construction

  ## [3.0.0.0] - 2020-02-29
    - Rewrite, bindings are now much more idiomatic Haskell
    - Add `sdl-triangle` and `info` examples

  ## [2.1.0.0] - 2018-04-22
    - Expose dynamic loader from Graphics.Vulkan.Dymamic
    - Turn on platform specific features by default
    - Make all foreign imports unsafe
    - Add option for enabling safe calls

  ## [2.0.0.1] - 2018-04-21
    - Improved documentation (links, tables, math)
    - Use cpphs for preprocessing

  ## [2.0.0.0] - 2018-04-20
    - Total rewrite of the generator
    - All extensions are in here
    - Split into core versions
    - Documentation on most things

  ## [1.7.0.0] - 2016-04-13
    - Fix struct member names containing digits being erroneously truncated

  ## [1.6.0.0] - 2016-03-30
    - Add DebugReport, Display, DisplaySwapchain and Swapchain extension modules

  ## [1.5.1.0] - 2016-03-07
   - Add enumeration values for VkCompositeAlphaFlagsKHR and VkSurfaceTransformFlagsKHR

  ## [1.5.0.0] - 2016-03-01
   - Remove VK_NULL_HANDLE
   - Remove Vulkan.Graphics.HeaderBoilerplate

  ## [1.3.2.0] - 2016-02-29
   - Add type signatures to version functions

  ## [1.3.1.0] - 2016-02-29
   - Add version information and generator to Graphics.Vulkan.Version

  ## [1.3.0.0] - 2016-02-29
   - Add Read and Show instances for bitmasks

  ## [1.2.0.0] - 2016-02-29
   - Add Read and Show instances for enumerations

  ## [1.0.0.0] - 2016-02-25
   - Split the interface up into many modules.

  ## [0.2.0.0] - 2016-02-22
   - Make wildcard matches lazy for `sizeof` and `alignment`

  ## [0.1.0.0] - 2016-02-21
   - Initial release targeting Vulkan 1.0.3 Core
basic-deps:
  bytestring: -any
  base: <5
  transformers: -any
  vector: -any
all-versions:
- 2.0.0.0
- 2.0.0.1
- 2.1.0.0
- 3.0.0.0
- 3.1.0.0
- 3.2.0.0
- '3.3'
- 3.3.1
- '3.4'
- '3.5'
- '3.6'
- 3.6.1
- 3.6.2
- 3.6.3
- 3.6.4
- 3.6.5
- 3.6.6
- 3.6.7
- 3.6.8
- 3.6.9
- 3.6.10
- 3.6.11
- 3.6.11.1
- 3.6.12
- 3.6.13
- 3.6.14
- 3.6.15
- '3.7'
- '3.8'
- 3.8.1
- 3.8.2
- 3.8.3
- '3.9'
- 3.9.1
- '3.10'
- 3.10.1
- 3.10.2
- 3.10.3
- 3.10.4
- '3.11'
- 3.11.0.2
- 3.11.1
- 3.11.2
- 3.11.3
- 3.11.4
- 3.11.4.1
- 3.11.5
- '3.12'
- 3.12.1
- 3.12.2
- '3.13'
- 3.13.1
- 3.13.2
- 3.13.3
- 3.13.4
- '3.14'
- 3.14.1
- 3.14.2
author: ''
latest: 3.14.2
description-type: markdown
description: "# vulkan\n\nSlightly high level Haskell bindings to the Vulkan graphics
  API.\n\nJoin us on Matrix at\n[#vulkan:monoid.al](https://matrix.to/#/#vulkan:monoid.al?via=monoid.al&via=matrix.org&via=nordgedanken.dev)\n\nThese
  bindings present an interface to Vulkan which looks like more idiomatic\nHaskell
  and which is much less verbose than the C API. Nevertheless, it retains\naccess
  to all the functionality. If you find something you can do in the C\nbindings but
  not in these high level bindings please raise an issue.\n\nPractically speaking
  this means:\n\n- No fiddling with `vkGetInstanceProcAddr` or\n  `vkGetDeviceProcAddr`
  to get function pointers, this is done automatically on\n  instance and device creation<sup>[1](#fun-ptr)</sup>.\n\n-
  No setting the `sType` member, this is done automatically.\n\n- No passing length/pointer
  pairs for arrays, `Vector` is used\n  instead<sup>[2](#opt-vec)</sup>.\n\n- No passing
  pointers for return values, this is done for you and multiple\n  results are returned
  as elements of a tuple.\n\n- No checking `VkResult` return values for failure, a
  `VulkanException` will be\n  thrown if a Vulkan command returns an error `VkResult`.\n\n-
  No manual memory management for command parameters or Vulkan structs. You'll\n  still
  have to manage buffer and image memory yourself however.\n\n## Package structure\n\nTypes
  and functions are placed into modules according to the `features` and\n`extensions`
  portions of the specification. As these sections only mention\nfunctions, a best
  guess has to be made for types. Types and constants are drawn\nin transitively according
  to the dependencies of the functions.\n\nIt should be sufficient to import `Vulkan.CoreXX`
  along with\n`Vulkan.Extensions.{whatever extensions you want}`. You might want to
  import\n`Vulkan.Zero` too.\n\nThese bindings are intended to be imported qualified
  and do not feature the\n`Vk` prefixes on commands, structures, members or constants.\n\n##
  Things to know\n\n- Documentation is included more or less verbatim from the Vulkan
  C API\n  documentation. The parameters it references might not map one-to-one with\n
  \ what's in these bindings. It should be obvious in most cases what it's trying\n
  \ to say. If part of the documentation is misleading or unclear with respect to\n
  \ these Haskell bindings please open an issue and we can special case a fix.\n  -
  The haddock documentation can be browsed on Hackage or\n    [here](http://expipiplus1.github.io/vulkan/)\n\n-
  Parameters are named with the `:::` operator where it would be useful; this\n  operator
  simply ignores the string on the left.\n\n- There exists a `Zero` type class defined
  in\n  [Vulkan.Zero](src/Vulkan/Zero.hs). This is a class for initializing values\n
  \ with all zero contents and empty arrays. It's very handy when initializing\n  structs
  to use something like `zero { only = _, members = _, i = _, care = _,\n  about =
  _ }`.\n\n- The library is compiled with `-XStrict` so expect all record members
  to be\n  strict (and unboxed when they're small)\n\n- Calls to Vulkan are marked
  as `unsafe` by default to reduce FFI overhead.\n  - This can be changed by setting
  the `safe-foreign-calls` flag.\n  - It means that Vulkan functions are unable to
  safely call Haskell code. See\n    the [Haskell\n    wiki](https://wiki.haskell.org/Foreign_Function_Interface#Unsafe_calls)
  for\n    more information. This is important to consider if you want to write\n
  \   allocation or debug callbacks in Haskell.\n  - It's also means that the garbage
  collector will not run while these calls\n    are in progress. For some blocking
  functions (those which can return\n    `VK_TIMEOUT` and those with `wait` in the
  name) a `safe` version is also\n    provided with the `Safe` suffix.\n\n- As encouraged
  by the Vulkan user guide, commands are linked dynamically (with\n  the sole exception
  of `vkGetInstanceProcAddr`).\n  - The function pointers are attached to any dispatchable
  handle to save you\n    the trouble of passing them around.\n  - The function pointers
  are retrieved by calling `vkGetInstanceProcAddr` and\n    `vkGetDeviceProcAddr`.
  \ These are stored in two records `InstanceCmds` and\n    `DeviceCmds` which store
  instance level and device level commands\n    respectively. These tables can be
  initialized with the `initInstanceCmds`\n    and `initDeviceCmds` found in [Vulkan.Dynamic](src/Vulkan/Dynamic.hs).\n\n-
  There are nice `Read` and `Show` instances for the enums and bitmasks. These\n  will,
  where possible, print and parse the pattern synonyms. For example one\n  can do
  the following:\n\n    ```haskell\n    > read @COMPARE_OP \"COMPARE_OP_LESS\"\n    COMPARE_OP_LESS\n
  \   ```\n\n- Make sure that all the functions you're going to use are not `nullPtr`
  in\n  `InstanceCmds` or `DeviceCmds` before calling them or the command will throw\n
  \ an `IOException`. The `*Cmds` records can be found inside any dispatchable\n  handle.\n\n###
  Minor things\n\n- To prevent a name clash between the constructors of\n  `VkClearColorValue`
  and `VkPerformanceCounterResultKHR` the latter have had\n  `Counter` suffixed.\n\n-
  To prevent a name clash between the constructors of\n  `DeviceOrHostAddressKHR`
  and `DeviceOrHostAddressConstKHR` the latter have\n  had `Const` suffixed.\n\n##
  How the C types relate to Haskell types\n\nThese bindings take advantage of the
  meta information present in the\nspecification detailing the validity of structures
  and arguments.\n\n- `Vector` is used in place of pointers to arrays with associated
  length\n  members/parameters. When interfacing with Vulkan these bindings automatically\n
  \ set the length member/parameter properly. If the vector is optional but the\n
  \ length is not then the length member/parameter is preserved, but will be\n  inferred
  if the vector is present and the length is 0.\n\n- If a struct member or command
  parameters in the specification is a optional\n  pointer (it may be null) this is
  replaced with a `Maybe` value.\n\n- If a struct has a member which can only have
  one possible value (the most\n  common example is the `sType` member, then this
  member is elided.\n\n- C strings become `ByteString`. This is also the case for
  fixed length C\n  strings, the library will truncate overly long strings in this
  case.\n\n- Pointers to `void` accompanied by a length in bytes become `ByteString`\n\n-
  Shader code is represented as `ByteString`\n\n- `VkBool32` becomes `Bool`\n\n- Some
  Vulkan commands or structs take several arrays which must be the same\n  length.
  These are currently exposed as several `Vector` arguments which must\n  be the same
  length. If they are not the same length an exception is thrown.\n\n- Vulkan structs
  with bitfields have them split into their component parts in\n  the Haskell record.
  Then marshalling to and from C the masking *and shifting*\n  takes place automatically.\n\nIf
  anything is unclear please raise an issue. The marshaling to and from\nHaskell and
  C is automatically generated and I've not checked every single\nfunction. It's possible
  that there are some commands or structs which could be\nrepresented better in Haskell,
  if so please also raise an issue.\n\n### Vulkan errors\n\nIf a Vulkan command has
  the `VkResult` type as a return value, this is checked\nand a `VulkanException`
  is thrown if it is not a success code. If the only\nsuccess code a command can return
  is `VK_SUCCESS` then this is elided from the\nreturn type. If a command can return
  other success codes, for instance\n`VK_EVENT_SET` then the success code is exposed.\n\n###
  Bracketing commands\n\nThere are certain sets commands which must be called in pairs,
  for instance the\n`create` and `destroy` commands for using resources. In order
  to facilitate\nsafe use of these commands, (i.e. ensure that the corresponding `destroy`\ncommand
  is always called) these bindings expose similarly named commands\nprefixed with
  `with` (for `Create`/`Destroy` and `Allocate`/`Free` pairs) or\n`use` for (`Begin`/`End`
  pairs). If the command is used in command buffer\nbuilding then it is additionally
  prefixed with `cmd`.\n\nThese are higher order functions which take as their last
  argument a consumer\nfor a pair of `create` and `destroy` commands.  Values which
  fit this hole\ninclude `Control.Exception.bracket`, `Control.Monad.Trans.Resource.allocate`\nand
  `(,)`.\n\nAn example is `withInstance` which calls `createInstance` and\n`destroyInstance`.
  Notice how the `AllocationCallbacks` parameter is\nautomatically passed to the `createInstance`
  and `destroyInstance` command.\n\n```haskell\ncreateInstance\n  :: forall a m\n
  \  . (PokeChain a, MonadIO m)\n  => InstanceCreateInfo a\n  -> Maybe AllocationCallbacks\n
  \ -> m Instance\n\ndestroyInstance\n  :: forall m\n   . MonadIO m\n  => Instance\n
  \ -> Maybe AllocationCallbacks\n  -> m ()\n\nwithInstance\n  :: forall a m r\n   .
  (PokeChain a, MonadIO m)\n  => InstanceCreateInfo a\n  -> Maybe AllocationCallbacks\n
  \ -> (m Instance -> (Instance -> m ()) -> r)\n  -> r\n```\n\nExample usage:\n\n```haskell\nimport
  Control.Monad.Trans.Resource (runResourceT, allocate)\n-- Create an instance and
  print its value\nmain = runResourceT $ do\n  (instanceReleaseKey, inst) <- withInstance
  zero Nothing allocate\n  liftIO $ print inst\n\n-- Begin a render pass, draw something
  and end the render pass\ndrawTriangle =\n  cmdUseRenderPass buffer renderPassBeginInfo
  SUBPASS_CONTENTS_INLINE bracket_\n    $ do\n        cmdBindPipeline buffer PIPELINE_BIND_POINT_GRAPHICS
  graphicsPipeline\n        cmdDraw buffer 3 1 0 0\n```\n\nThese pairs of commands
  aren't explicit in the specification, so\na list of them is maintained in the generation
  code, if you see something\nmissing please open an issue (these pairs are generated
  in `VK/Bracket.hs`).\n\n### Dual use commands\n\nCertain commands, such as `vkEnumerateDeviceLayerProperties`
  or\n`vkGetDisplayModePropertiesKHR`, have a dual use. If they are not given a\npointer
  to return an array of results then they instead return the total number\nof possible
  results, otherwise they return a number of results. There is an\nidiom in Vulkan
  which involves calling this function once with a null pointer\nto get the total
  number of queryable values, allocating space for querying that\nmany values and
  they calling the function again to get the values. These\nbindings expose commands
  which automatically return all the results. As an\nexample `enumeratePhysicalDevices`
  has the type `MonadIO m => Instance -> m\n(Result, Vector PhysicalDevice)`.\n\n###
  Structure chains\n\nMost structures in Vulkan have a member called `pNext` which
  can be a pointer\nto another Vulkan structure containing additional information.
  In these high\nlevel bindings the head of any struct chain is parameterized over
  the rest of\nthe items in the chain. This allows for using *type inference* for
  getting\nstruct chain return values out of Vulkan, for example:\n`getPhysicalDeviceFeatures2
  :: (PokeChain a, PeekChain a) => PhysicalDevice ->\nIO (PysicalDeviceFeatures2 a)`;
  here the variable `a :: [Type]` represents the\nstructures present in the chain
  returned from `vkGetPhysicalDeviceFeatures2`.\n\nThere exists a GADT `SomeStruct`
  which captures the case of an unknown tail in\nthe struct chain. This is also used
  for nested chains inside structs.\n\nStruct chains inside records are represented
  as nested tuples: `next ::\n(Something, (SomethingElse, (AThirdThing, ())))`\n\nThere
  are two pattern synonyms exposed in `Vulkan.CStruct.Extends` which help\nin constructing
  and deconstructing struct chains.\n\n- `h ::& t` which appends the tail `t` to the
  struct `h`\n- `t :& ts` which constructs a struct extending tail comprising struct
  `t` and\n  structs `ts`. Note that you must terminate the list with `()`.\n\nFor
  example, to create an instance with a `debugUtilsMessenger` and the\nvalidation
  layer's best practices output enabled:\n\n```haskell\nmakeInst = do\n  let debugCreateInfo
  = _ :: DebugUtilsMessengerCreateInfoEXT\n      validationFeatures = ValidationFeaturesEXT
  [VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT] []\n      instanceCreateInfo = zero
  ::& debugCreateInfo :& validationFeatures :& ()\n  createInstance instanceCreateInfo
  Nothing\n```\n\nAnd to deconstruct a return value with a struct tail, for example
  to find out\nif a physical device supports Timeline Semaphores:\n\n```haskell\nhasTimelineSemaphores
  phys = do\n  _ ::& PhysicalDeviceTimelineSemaphoreFeatures hasTimelineSemaphores
  :& () <-\n    getPhysicalDeviceFeatures2 phys\n  pure hasTimelineSemaphores\n\n--
  If you don't have a MonadFail instance you'll have to avoid pattern matching\n--
  using do notation because of https://gitlab.haskell.org/ghc/ghc/-/issues/15681\nhasTimelineSemaphores
  phys = do\n  feats <- getPhysicalDeviceFeatures2 phys\n  let _ ::& PhysicalDeviceTimelineSemaphoreFeatures
  hasTimelineSemaphores :& ()\n       = feats\n  pure hasTimelineSemaphores\n```\n\n##
  Building\n\nThis package requires GHC 8.6 or higher due to the use of the\n`QuantifiedConstraints`
  language extension.\n\nMake sure you have initialized the `VulkanMemoryAllocator`
  submodule if you\nintend to build the `VulkanMemoryAllocator` package.\n\nIf you
  provision `libvulkan.so` (the Vulkan loader) with nix and you're not on\nNixOS,
  you'll have to use [NixGL](https://github.com/guibou/nixGL) to run your\nprograms.
  For this reason it's recommended to use the system-provided\n`libvulkan.so`.\n\nFor
  instructions on how to regenerate the bindings see [the readme in\n./generate-new](./generate-new/readme.md).\n\nTo
  build the example programs. You'll need to supply the following system\npackages:\n\n-
  `vulkan-loader` (for `libvulkan.so`)\n- `vulkan-headers` (for `vulkan.h`)\n- `pkg-config`
  and `SDL2` to build the Haskell `sdl2` package.\n- `glslang` (for the `glslangValidator`
  binary, to build the shaders)\n\nJonathan Merritt has made an excellent video detailing
  how to set up everything \nnecessary for running the examples on macOS \n[here](https://www.youtube.com/watch?v=BaBt-CNBfd0).\n\n###
  Building using Nix\n\nHere is some generally useful information for using the `default.nix`
  files in\nthis repo.\n\n`default.nix { forShell = false; }` evaluates to an attribute
  set with one\nattribute for each of the following packages:\n\n- `vulkan`, the main
  package of this repository\n- `VulkanMemoryAllocator`, bindings to VMA\n- `vulkan-utils`,
  a small selection of utility functions for using `vulkan`\n- `vulkan-examples`,
  some examples, this package is dependency-heavy\n- `generate-new`, the program to
  generate the source of `vulkan` and\n  `VulkanMemoryAllocator`, also quite dependency-heavy
  (this only build with\n  ghc 8.8).\n\nYou may want to pass your `<nixpkgs>` as `pkgs`
  to `default.nix` to avoid\nrebuilding a parallel set of haskell packages based on
  the pegged nixpkgs\nversion in `default.nix`. It should probably work with a wide
  range of\nnixpkgss, however some overrides in `default.nix` may need tweaking,\n\nAlternatively
  you could use the Cachix repo\nhttps://app.cachix.org/cache/vulkan-haskell which
  contains the latest closure\nfor the packages in this repo.\n\n`nix-build -A vulkan`
  is probably not terribly useful for using the library as\nit just builds the Haskell
  library.\n\n`nix-build -A vulkan-examples` will produce a path with several examples,\nhowever
  to run these on a non-NixOS platform you'll need to use the\n[`NixGL`](https://github.com/guibou/nixGL)
  project (or something similar) to\nrun these. This isn't something tested very often
  so may be a little fragile.\nI'd suggest for non-NixOS platforms compiling without
  using Nix (or better yet\nget reliable instructions for using `NixGL` and open a
  PR).\n\nThis library is currently up to date on nixpkgs master (as of\nhttps://github.com/NixOS/nixpkgs/commit/af9608d6d133ad9b6de712418db52603bbc8531c\n2020-06-23),
  so if you're just a consumer it might be best to just use\n`haskellPackages.vulkan`
  from a recent version there.\n\nFor using this repository, I have two workflows:\n\n-
  For building and running examples\n  - I navigate to the examples directory and
  use the `default.nix` expression\n    in there to provision a shell with the correct
  dependencies for the\n    examples.\n  - I also make a `cabal.project` containing
  `packages: ./`, the reason for\n    this little dance instead of just using the
  root's `default.nix` is so that\n    nix builds the hoogle database for the dependencies
  and HIE's completion\n    and indexing works much better for external dependencies
  instead of using a\n    multi-package project as is the root.\n  - This will override
  nixpkgs's `vulkan` and `VulkanMemoryAllocator` libraries\n    with the ones in the
  repo, as well as building `vulkan-utils`.\n\n- For modifying the generation program
  I navigate to the `generate-new`\n  directory and run `nix-shell ..` to use `default.nix`
  in the repo's root to\n  provision a shell with:\n  - The dependencies for running
  the generator\n  - And the dependencies for compiling the `vulkan` source it spits
  out.\n  - I run the generator with `ghci $(HIE_BIOS_OUTPUT=/dev/stdout ./flags.sh
  $(pwd)/vk/Main.hs) vk/Main.hs +RTS -N16`\n\nFor using the source in this package
  externally it may be easiest to do\nwhatever you do to get a haskell environment
  with nix and simply override the\nsource to point to this repo, the dependencies
  haven't changed for a while, so\nany version of nixpkgs from the last 3 months should
  do the trick.\n\n### Building on Windows with Cabal\n\n- Clone this repo\n- Install
  GHC and Cabal\n  - I downloaded the GHC binary package from\n    [here](https://www.haskell.org/ghc/download_ghc_8_8_4.html),
  extracted it\n    and added the `bin` directory to `PATH`.\n  - I downloaded the
  cabal-install binary package from [here](https://www.haskell.org/cabal/download.html)\n-
  Make sure your graphics driver has installed `vulkan-1.dll` in `C:/windows/system32`\n-
  Install the LunarG Vulkan SDK\n  - https://vulkan.lunarg.com/sdk/home#windows\n
  \ - Remember the installation directory, use in place of `C:/VulkanSDK/1.2.135.0`
  below\n  - We will link against `vulkan-1.lib` from this installation\n  - We will
  use the `glslangValidator` from this installation, make sure it's\n    in your `PATH`
  or otherwise made available to `ghc`\n- Install `pkg-config` or `pkg-config-lite`
  (for the `sdl2` package), perform any one of:\n  - Install using chocolatey: `choco
  install pkgconfiglite`\n  - Install from SourceForge: Download from\n    [here](https://sourceforge.net/projects/pkgconfiglite/files/)
  and put the\n    binary in your `PATH`\n  - Install by following the instructions\n
  \   [here](https://stackoverflow.com/questions/1710922/how-to-install-pkg-config-in-windows)\n
  \ - Patch SDL2 to not require pkg-config with [this\n    patch](https://gist.github.com/anonymous/9d1060281ed7127a54d2)\n-
  Install SDL2 (condensed instructions from\n  [here](https://gist.github.com/anonymous/9d1060281ed7127a54d2)):\n
  \ - Navigate to <https://www.libsdl.org/download-2.0.php>\n  - Download the Mingw64
  development library\n  - Extract the `x86_64-w64-mingw32` directory somwhere, I
  installed it as `~/AppData/Roaming/local/SDL2`\n  - Copy the `lib/pkgconfig/sdl2.pc`
  file to `~/AppData/Roaming/local/lib/pkgconfig/sdl2.pc`\n- Inform Cabal about header
  and library locations by adding the following to\n  `cabal.project.local`, changed
  accodingly for your install paths for SDL2 and\n  the Vulkan SDK.\n  \n    ```\n
  \   package sdl2\n      extra-lib-dirs: C:/Users/ms/AppData/Roaming/local/SDL2/lib/\n
  \     extra-include-dirs: C:/Users/ms/AppData/Roaming/local/SDL2/include/SDL2/\n\n
  \   package vulkan\n      extra-lib-dirs: C:/VulkanSDK/1.2.135.0/lib/\n\n    package
  vulkan-utils\n      extra-include-dirs: C:/VulkanSDK/1.2.135.0/Include/\n\n    package
  VulkanMemoryAllocator\n      extra-include-dirs: C:/VulkanSDK/1.2.135.0/Include/\n
  \   ```\n\n- Run `cabal build examples` to build the examples\n- Run `cabal run
  resize` to run the `resize` example.\n\n### Building on Windows with Stack\n\nStack
  is currently (2020-11-02) bundled with an msys2 installation which is\ntoo old to
  use the package repositories (see\nhttps://github.com/commercialhaskell/stack/issues/5300)
  so installing the\nVulkan SDK, `SDL2` and `pkg-config` is not possible with the
  bundled package\nmanager.\n\nNevertheless, it should be possible to use Stack by
  adding the following to\n`stack.yaml` (changed appropriately according to SDL2 and
  VulkanSDK install\nlocations) and building after following the instructions above.\n\n```yaml\nextra-lib-dirs:\n-
  C:/Users/ms/AppData/Roaming/local/SDL2/lib/\n- C:/VulkanSDK/1.2.135.0/lib/\n\nextra-include-dirs:\n-
  C:/Users/ms/AppData/Roaming/local/SDL2/include/SDL2/\n- C:/VulkanSDK/1.2.135.0/Include/\n```\n\n##
  Examples\n\nThere exists a package to build some example programs in the\n[`examples`](./examples)
  directory.\n\n## Current Status\n\nAll the core Vulkan 1.0, 1.1, and 1.2 functionality
  is here as well as all the\nextensions (except the video ones).\n\nThis is currently
  a 64 bit only library.\n\n## See also\n\nThe [VulkanMemoryAllocator\npackage](https://hackage.haskell.org/package/VulkanMemoryAllocator)
  (source in\nthe [VulkanMemoryAllocator directory](./VulkanMemoryAllocator)) has
  similarly\nstyled bindings to the [Vulkan Memory\nAllocator](https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator)\nlibrary.\n\nThe
  [vulkan-utils](https://hackage.haskell.org/package/vulkan-utils) (source in\nthe
  [utils directory](./utils)) includes a few utilities for writing programs\nusing
  these bindings.\n\nFor an alternative take on Haskell bindings to Vulkan see the\n[vulkan-api](https://github.com/achirkin/vulkan#readme)
  package. `vulkan-api`\nstores Vulkan structs in their C representation as `ByteArray#`
  whereas this\nlibrary allocates structs on the stack and keeps them alive for just
  the\nlifetime of any Vulkan command call.\n\n--------\n\n<a name=\"fun-ptr\">1</a>:
  Note that you'll still have to request any required\n  extensions for the function
  pointers belonging to that extension to be\n  populated. An exception will be thrown
  if you try to call a function pointer\n  which is null.\n\n<a name=\"opt-vec\">2</a>:
  The exception is where the spec allows the application\n  to pass `NULL` for the
  vector with a non-zero count. In these cases it was\n  deemed clearer to preserve
  the \"count\" member and allow the Haskell\n  application to pass a zero-length
  vector to indicate `NULL`.\n\n<a name=\"sdl-load\">3</a>: <https://github.com/spurious/SDL-mirror/blob/6b6170caf69b4189c9a9d14fca96e97f09bbcc41/src/video/windows/SDL_windowsvulkan.c#L50-L54>\n"
license-name: BSD-3-Clause
