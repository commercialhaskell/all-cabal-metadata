all-versions:
- 0.0.0.1
- 0.1.0.0
author: |-
  Artem Leshchev,
  Aleksey Uimanov,
  Herbert Valerio Riedel
basic-deps:
  base: '>=4.5.0.0 && <4.20'
  bytestring: '>=0.9.2.0 && <0.12'
  cryptohash-sha1: '>=0.11.100.1 && <0.12'
  cryptohash-sha256: '>=0.11.100.1 && <0.12'
  cryptohash-sha512: '>=0.11.100.1 && <0.12'
  time: '>=1.4 && <1.13'
changelog: |
  ## 0.1.0.0

  * Major API rewrite ([#3](https://github.com/hvr/OTP/pull/3))
  * Add support for SHA256 and SHA512 besides SHA-1 ([#1](https://github.com/hvr/OTP/pull/1))
  * Provide support via cabal flag for using pure Haskell [SHA](http://hackage.haskell.org/package/SHA) implementation

  ## 0.0.0.1

  Initial version of `OTP`
changelog-type: markdown
description: |
  # `OTP`: HMAC-Based and Time-Based One-Time Passwords (HOTP & TOTP)  [![Hackage](https://img.shields.io/hackage/v/OTP.svg)](https://hackage.haskell.org/package/OTP) [![Build Status](https://travis-ci.org/haskell-hvr/OTP.svg)](https://travis-ci.org/haskell-hvr/OTP)

  **Please refer to the [package description](https://hackage.haskell.org/package/OTP#description) for an overview of `OTP`.**

  ## Usage examples

  ### Generating one-time passwords

  If you need to generate HOTP password described in RFC4226, then use

  ```haskell
  >>> hotp SHA1 "1234" 100 6
  317569

  >>> hotp SHA512 "1234" 100 6
  134131
  ```

  Or

  ```haskell
  >>> totp SHA1 "1234" (read "2010-10-10 00:01:00 UTC") 30 8
  43388892
  ```

  to generate TOTP password described in RFC6238.

  ### Checking one-time passwords

  ```haskell
  hotpCheck :: HashAlgorithm      -- ^ Hashing algorithm
            -> Secret             -- ^ Shared secret
            -> (Word8, Word8)     -- ^ how much counters to take lower and higher than ideal
            -> Word64             -- ^ ideal (expected) counter value
            -> Word8              -- ^ Number of digits in password
            -> Word32             -- ^ Password entered by user
            -> Bool               -- ^ True if password acceptable
  ```

  ```haskell
  >>> hotpCheck SHA1 "1234" (0,0) 10 6 50897
  True

  >>> hotpCheck SHA1 "1234" (0,0) 9 6 50897
  False

  >>> hotpCheck SHA1 "1234" (0,1) 9 6 50897
  True
  ```

  Here almost the same aguments as for `hotp` function, but there is
  also `(0, 0)` tuple. This tuple describes range of counters to check
  in case of desynchronisation of counters between client and
  server. I.e. if you specify `(1, 1)` and ideal counter will be `10`
  then function will check passwords for `[9, 10, 11]` list of
  counters.

  Here is the same for TOTP:

  ```haskell
  >>> totpCheck SHA1 "1234" (0, 0) (read "2010-10-10 00:00:00 UTC") 30 6 778374
  True

  >>> totpCheck SHA1 "1234" (0, 0) (read "2010-10-10 00:00:30 UTC") 30 6 778374
  False

  >>> totpCheck SHA1 "1234" (1, 0) (read "2010-10-10 00:00:30 UTC") 30 6 778374
  True
  ```
description-type: markdown
hash: af4b3c80771079b0a914503fe802ab81964b2f0a0afa47a65999ea54710fbe03
homepage: https://github.com/hvr/OTP
latest: 0.1.0.0
license-name: MIT
maintainer: hvr@gnu.org
synopsis: HMAC-Based and Time-Based One-Time Passwords (HOTP & TOTP)
test-bench-deps:
  OTP: '>=0'
  base: '>=0'
  bytestring: '>=0'
  tasty: '>=1.1 && <1.2'
  tasty-hunit: '>=0.10 && <0.11'
  time: '>=0'
