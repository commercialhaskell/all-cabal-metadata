all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
author: Justin Le
basic-deps:
  aeson: '>=0'
  base: '>=4.10 && <5'
  base-compat: '>=0.10'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  cryptonite: '>=0'
  dependent-sum: '>=0'
  filepath: '>=0'
  h-gpgme: '>=0'
  haskeline: '>=0'
  megaparsec: '>=7.0'
  microlens: '>=0'
  optparse-applicative: '>=0'
  otp-authenticator: '>=0'
  sandi: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unix: '>=0'
  uri-encode: '>=0'
  vinyl: '>=0.10'
  yaml: '>=0.8.31'
changelog: |
  Version 0.1.2.0
  ================

  *January 15, 2024*

  <https://github.com/mstksg/uncertain/releases/tag/v0.1.2.0>

  *   Json output for view command

  Version 0.1.1.0
  ================

  <https://github.com/mstksg/uncertain/releases/tag/v0.1.1.0>

  *   Major cleanup of dependencies and underlying implementation
  *   Fix bug based on dependencies that caused codes to generate improperly.

  Version 0.1.0.1
  ================

  <https://github.com/mstksg/uncertain/releases/tag/v0.1.0.1>

  *   Added documentation.
  *   Minor cleanup in implementation.

  Version 0.1.0.0
  ================

  <https://github.com/mstksg/uncertain/releases/tag/v0.1.0.0>

  *   Initial release.
changelog-type: markdown
description: |
  # otp-authenticator

  Simple tool for keeping track of your one-time pad two-factor authentication
  keys; basically a command-line version of the canonical [Google Authenticator
  App][gauth].

  [gauth]: https://github.com/google/google-authenticator

  The library uses GnuPG (through *h-gpgme*) to safely encrypt your secret keys.
  The first time you use it, it asks for a fingerprint to use for encryption.
  Currently *GnuPG 1.x* has some issues with *h-gpgme* when asking for keys, so
  *GPG 2.x* is recommended.  Keys are stored, encrypted, at `~/.otp-auth.vault`
  by default.

  Instructions are available through `--help`, but the basics are:

  ```bash
  # interactively add a new key
  otp-auth add

  # interactively add a new key by entering the secret key uri
  #   (following the otpauth protocol)
  otp-auth add --uri

  # view all time-based codes and cached counter-based codes
  otp-auth view

  # list accounts, do not display codes
  otp-auth view --list

  # generate a new counter-based code
  otp-auth gen ID

  # edit the metadata and delete codes
  otp-auth edit ID
  otp-auth delete ID

  # dump all stored data as json (and as yaml)
  otp-auth dump
  otp-auth dump --yaml
  ```

  You can edit configuration at `~/.otp-auth.yaml`, the basic schema is:

  ```yaml
  fingerprint: ABCDEF12
  vault: /home/robert/.otp-auth.vault
  ```
description-type: markdown
hash: 42f61efa23a82e004c82643f2ceee13e8367546cb659cf35c3547c40a056ae48
homepage: https://github.com/mstksg/otp-authenticator#readme
latest: 0.1.2.0
license-name: BSD-3-Clause
maintainer: justin@jle.im
synopsis: OTP Authenticator (a la google) command line client
test-bench-deps: {}
