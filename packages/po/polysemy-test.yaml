homepage: ''
changelog-type: markdown
hash: 414e964d83eb16e8eb5508980334807505420d7f17b9243e1ec75a1a26665807
test-bench-deps:
  path: -any
  base: '>=4.12 && <5'
  text: -any
  polysemy-test: -any
  hedgehog: -any
  polysemy: -any
  tasty: -any
maintainer: haskell@tryp.io
synopsis: Polysemy Effects for Testing
changelog: |
  # 0.3.1.0

  * Add Hedgehog assertion combinators for the difference between numeric values.
  * Add `assertEq` / `assertNeq` as prefix synonyms for `(===)` / `(/==)`.

  # 0.3.0.0

  * Add type parameter for the monad used by `TestT` to `Hedgehog`
  * Interpret `Hedgehog` with Polysemy counterparts to `TestT`'s monad stack.
  * Add `evalError`, which converts a Polysemy `Error` effect into an assertion.

  # 0.1.0.0

  * initial release
basic-deps:
  either: -any
  path: '>=0.7'
  base: '>=4.12 && <5'
  tasty-hedgehog: '>=1.0.0.2'
  text: -any
  hedgehog: '>=1.0.2'
  containers: -any
  relude: '>=0.7'
  polysemy: '>=1.3'
  transformers: -any
  tasty: '>=1.1'
  path-io: '>=0.2'
all-versions:
- 0.3.1.2
- 0.3.1.3
- 0.3.1.4
- 0.3.1.5
- 0.3.1.6
- 0.3.1.7
- 0.3.1.8
- 0.3.1.9
author: Torsten Schmits
latest: 0.3.1.9
description-type: markdown
description: |
  # About

  This package provides utilities for testing [Polysemy] programs:

  * An effect, `Test`, that gives access to temporary files and fixtures
  * An effect, `Hedgehog`, for lifted [Hedgehog] assertions

  # Example

  ```haskell
  import Path (relfile)
  import Polysemy.Test
  import Test.Tasty (defaultMain)

  test_fixture :: UnitTest
  test_fixture =
    runTestAuto do
      fixContent1 <- fixtureLines fixRel
      fixPath <- Test.fixturePath fixRel
      fixContent2 <- Text.lines <$> embed (Text.readFile (toFilePath fixPath))
      fixContent1 === fixContent2
      fixContent1 === ["file", "content"]
    where
      fixRel =
        [relfile|files/file1|]

  main :: IO ()
  main =
    defaultMain (unitTest test_fixture)
  ```

  # Fixtures

  Any file that is located below the subdirectory `fixtures` inside the test
  directory can be accessed using the constructors `Test.fixturePath`,
  `Test.fixture` and `Text.fixtureLines`.

  You can override the path used to look for the `fixtures` directory by using
  `runTest` instead of `runTestAuto`.
  The latter analyzes the call stack to determine the test directory.

  # Temp Files

  The constructors `Test.tempDir`, `Test.tempFile`, `Test.tempFileContent` and
  `Test.tempFileLines` allow you to create and read files in the `temp` directory
  within the test directory.

  # Paths

  All paths are of type `Path` from the package [path].

  You can construct them using the quasiquoters `reldir`, `absdir` etc. or the
  functions `parseRelDir`, `parseAbsDir` etc.

  [Polysemy]: https://hackage.haskell.org/package/polysemy
  [Hedgehog]: https://hackage.haskell.org/package/hedgehog
  [path]: https://hackage.haskell.org/package/path
license-name: BSD-2-Clause-Patent
