all-versions:
- 0.2.1.2
- 0.2.1.3
- 0.2.1.4
- 0.2.1.6
- 0.2.1.7
- 0.2.1.8
author: Andreas Meingast <ameingast@gmail.com>
basic-deps:
  base: '>=4.9 && <5'
  base64-bytestring: '>=1.0 && <1.3'
  bytestring: '>=0.10 && <0.13'
  cryptohash-md5: '>=0.11 && <0.12'
  directory: '>=1.2 && <1.4'
  filepath: '>=1.4.1.0 && <1.6'
  postgresql-migration: '>=0'
  postgresql-simple: '>=0.4 && <0.8'
  text: '>=1.2 && <2.2'
  time: '>=1.4 && <1.14'
changelog: "# Changelog\n\n## Unreleased\n* Switch from deprecated cryptohash dependency
  to cryptohash-md5 \n* Relaxed version bounds for postgresql-simple to include 0.7\n\n##
  0.2.1.0\n * Forked & renamed to postgresql-migration\n * Support for changing the
  schema_migration table name \n * Support custom logging\n * API option to control
  how transactions are used\n * Support for older GHC versions dropped\n\n## 0.1.15.0\n*
  Bumped dependencies\n\n## 0.1.14.0\n* Bumped dependencies\n\n## 0.1.13.1\n* Bumped
  dependencies\n\n## 0.1.13.0\n* Bumped dependencies\n\n## 0.1.12.0\n* Support for
  GHC 8.4\n\n## 0.1.11.0\n* Improved documentation\n* Fixed exists_table\n\n## 0.1.10.1\n*
  Fixed hackage warnings\n\n## 0.1.10.0\n* Relaxed time bounds\n\n## 0.1.9.0\n* Bumped
  dependencies\n\n## 0.1.8.0\n* Added MigrationCommands allowing sequencing of migrations
  in the Haskell API\n* Derived more datatypes for MigrationResult\n* Bumped dependencies\n\n##
  0.1.7.0\n* Propagate migration and validation result to application exit code\n\n##
  0.1.6.0\n* Support for GHC 8\n\n## 0.1.5.0\n* Bumped dependencies\n\n## 0.1.4.0\n*
  Improved error logging in standalone binary\n\n## 0.1.3.0\n* Better transaction
  handling\n* Improved documentation\n\n## 0.1.2.0\n* Moved Util module\n* Improved
  documentation\n\n## 0.1.1.0\n* Support for schema validations.\n* Improved Haskell
  API\n\n## 0.1.0.0\n* Support for file-based and Haskell migrations.\n"
changelog-type: markdown
description: "# PostgreSQL Migrations for Haskell\n\nForked from [postgresql-simple-migration](https://github.com/ameingast/postgresql-simple-migration)
  created by [Andreas Meingast](https://github.com/ameingast/postgresql-simple-migration)\n\n[![Haskell-CI](https://github.com/andrevdm/postgresql-simple-migration/actions/workflows/haskell-ci.yml/badge.svg?branch=master)](https://github.com/andrevdm/postgresql-simple-migration/actions/workflows/haskell-ci.yml)\n\n\nWelcome
  to postgresql-migrations, a tool for helping you with\nPostgreSQL schema migrations.\n\nThis
  project is an open-source database migration tool. It favors simplicity\nover configuration.\n\nIt
  is implemented in Haskell and uses the (excellent) postgresql-simple\nlibrary to
  communicate with PostgreSQL.\n\nIt comes in two flavors: a library that features
  an easy to use Haskell\nAPI and as a standalone application.\n\nDatabase migrations
  can be written in SQL (in this case PostgreSQL-sql)\nor in Haskell.\n\n## Why?\nDatabase
  migrations should not be hard. They should be under version control\nand documented
  both in your production systems and in your project files.\n\n## What?\nThis library
  executes SQL/Haskell migration scripts and keeps track of their\nmeta information.\n\nScripts
  are executed exactly once and any changes to scripts will cause\na run-time error
  notifying you of a corrupted database.\n\nThe meta information consists of:\n* an
  MD5 checksum of the executed script to make sure already existing\n  scripts cannot
  be modified in your production system.\n* a time-stamp of the date of execution
  so you can easily track when a change\n  happened.\n\nThis library also supports
  migration validation so you can ensure (some)\ncorrectness before your application
  logic kicks in.\n\n## How?\nThis utility can be used in two ways: embedded in your
  Haskell program or as\na standalone binary.\n\n### Standalone\nThe standalone program
  supports file-based migrations. To execute all SQL-files\nin a directory $BASE\\_DIR,
  execute the following command to initialize the database\nin a first step.\n\n```bash\nCON=\"host=$host
  dbname=$db user=$user password=$pw\"\ncabal run migrate -- init $CON\ncabal run
  migrate -- migrate $CON $BASE_DIR\n```\n\nTo validate already executed scripts,
  execute the following:\n```bash\nCON=\"host=$host dbname=$db user=$user password=$pw\"\ncabal
  run migrate -- init $CON\ncabal run migrate -- validate $CON $BASE_DIR\n```\n\nFor
  more information about the PostgreSQL connection string, see:\n[libpq-connect](http://www.postgresql.org/docs/9.3/static/libpq-connect.html).\n\n###
  Library\nThe library supports more actions than the standalone program.\n\nInitializing
  the database:\n\n```haskell\nmain :: IO ()\nmain = do\n    let url = \"host=$host
  dbname=$db user=$user password=$pw\"\n    con <- connectPostgreSQL (BS8.pack url)\n
  \   runMigration con defaultOptions MigrationInitialization\n```\n\nFor file-based
  migrations, the following snippet can be used:\n\n```haskell\nmain :: IO ()\nmain
  = do\n    let url = \"host=$host dbname=$db user=$user password=$pw\"\n    let dir
  = \".\"\n    con <- connectPostgreSQL (BS8.pack url)\n    runMigration con defaltOptions
  $ MigrationDirectory dir\n```\n\nTo run Haskell-based migrations, use this:\n\n```haskell\nmain
  :: IO ()\nmain = do\n    let url = \"host=$host dbname=$db user=$user password=$pw\"\n
  \   let name = \"my script\"\n    let script = \"create table users (email varchar
  not null)\";\n    con <- connectPostgreSQL (BS8.pack url)\n    runMigration con
  defaultOptions $ MigrationScript name script\n```\n\nValidations wrap _MigrationCommands_.
  This means that you can re-use all\nMigrationCommands to perform a read-only validation
  of your migrations.\n\nTo perform a validation on a directory-based migration, you
  can use the\nfollowing code:\n\n```haskell\nmain :: IO ()\nmain = do\n    let url
  = \"host=$host dbname=$db user=$user password=$pw\"\n    con <- connectPostgreSQL
  (BS8.pack url)\n    runMigration con default Options $ MigrationValidation (MigrationDirectory
  dir)\n```\n\n### Transactions\n\nDatabase migrations should always be performed
  in a transactional context.\n\nThe standalone binary and the API default to using
  a new transaction for the \nentire set of migrations.\n\nUsing the `-t` argument
  to the binary will change this to using a new transaction\nper migration step (script).\n\nWhen
  using the library you have full control over the behaviour of transactions\nby setting
  `optTransactionControl` on the `MigrationOptions` record.\n\nThere are three options\n\n
  1) No new transaction: you manage the transaction, e.g. if you want to run multiple
  migrations in a single transaction\n 2) Transaction per run: This is the default.
  New transaction for the entire migration\n 3) Transaction per step\n\nThe tests
  make use `TransactionPerRun`, after executing all migration-tests, the\ntransaction
  is rolled back.\n\n\n### Options\n\nThe `runMigration` and `runMigrations` functions
  take an options record that let you\nset the following\n\n - `optVerbose`: Is verbose
  logging enabled or not\n - `optLogWriter`: The function used to write log messages.
  Defaults to `stdout` for info and `stderr` for errors\n - `optTableName`: The name
  for the migrations table. This defaults to `schema_migrations`.\n - `optTransactionControl`:
  How transactions should be hanbled\n\n\n## Compilation and Tests\nThe program can
  be built with _cabal_ or _stack_ build systems. \n\nThe following command builds
  the library, the standalone binary and the test package with _cabal_\n\n```bash\ncabal
  configure --enable-tests && cabal build -j\n```\n\nTo execute the tests, you need
  a running PostgreSQL server. You need to set the correct\nenvironment varaiables
  for the psql connection.\n\nTests are executed through cabal as follows:\n\n```bash\ncabal
  configure --enable-tests \nPGHOST=localhost PGDATABASE=test make cabal-test\n```\n\nTo
  build with stack use the following command\n\n```bash\nstack build\n```\n\nTo run
  the tests with stack use the following command\n\n```bash\nPGHOST=localhost PGDATABASE=test
  make stack-test\n```\n\nNB note that the **psql** test argument must be set for
  the test suite to run. This is so that other CI environments like\nstackage or nix
  that won't have a running test psql instance will not fail on these tests\n\n\n#
  Changes from the original postgresql-simple-migration (version 0.1)\n\n**postgresql-migration**
  is fork of *postgresql-simple-migration* created when the original *postgresql-simple-migration*
  project was archived.\n\n**postgresql-migration** version 0.2.x introduces some
  new features that will require some minor changes if you were using a 0.1.x version
  before\n\nThe new features are\n\n - Support for custom logging (original PR from
  https://github.com/ameingast/postgresql-simple-migration/pull/36. Thanks @unclechu)\n
  - Custom migrations table name (original PR from https://github.com/ameingast/postgresql-simple-migration/pull/30)\n
  - Transaction control from the API (original request from https://github.com/ameingast/postgresql-simple-migration/issues/40)
  \n\n\nThere are two ways to move to **postgresql-migration**\n\n\n## Compatability
  layer - the simple way, but no new features\n\n 1) Replace `postgresql-simple-migration`
  with `postgresql-migration` in your .cabal file\n 2) Import `Database.PostgreSQL.Simple.Migration.V1Compat`
  rather than `Database.PostgreSQL.Simple.Migration`\n\nAll your existing code should
  work as is\n\n\n## Porting to version 2\n\nThe most obvious code change is that
  you now use a `MigrationOptions` rather than a `MigrationContext`. \n\n\n_Version
  0.1.x_\n\nThis what you would have had\n\n```haskell\n withTransaction con . runMigration
  $ MigrationContext Pgm.MigrationInitialization True con\n```\n\n\n_Version 0.2.x_\n\nVersion
  2 with the defaultOptions\n\n```haskell\n runMigration con defaultOptions Pgm.MigrationInitialization\n```\n\nor
  if you want to change the default options\n\n```haskell\n let options = defaultOptions
  { optTransactionControl = TransactionPerRun, optVerbosity = Verbose }\n runMigration
  con options Pgm.MigrationInitialization\n```\n\nThat is all that needs to change.
  Your migrations scripts etc all remain as is.\n"
description-type: markdown
hash: 61a4127f6e74c80d57fafe1b2f6b728157a1c1c34ca61c6e6f6d0de09a3f12e5
homepage: https://github.com/andrevdm/postgresql-migration
latest: 0.2.1.8
license-name: BSD-3-Clause
maintainer: Andre Van Der Merwe <andre@andrevdm.com>
synopsis: PostgreSQL Schema Migrations
test-bench-deps:
  base: '>=4.9 && <5'
  bytestring: '>=0.10 && <0.13'
  hspec: '>=2.2 && <2.12'
  postgresql-migration: '>=0'
  postgresql-simple: '>=0.4 && <0.8'
