homepage: ''
changelog-type: markdown
hash: 081bdffa02b7d164bdda32d2ab79d681818bb71f3ecd14d83d60bca0f1585be1
test-bench-deps:
  bytestring: -any
  case-insensitive: -any
  base: -any
  tasty-golden: -any
  postgresql-libpq: -any
  text: -any
  cryptohash-md5: '>=0.11.100.1 && <0.12'
  filepath: -any
  HUnit: -any
  time-compat: -any
  containers: -any
  postgresql-simple: -any
  inspection-testing: '>=0.4.1.1 && <0.6'
  tasty-hunit: -any
  base16-bytestring: -any
  tasty: -any
  aeson: -any
  vector: -any
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Mid-Level PostgreSQL client library
changelog: "### Version 0.6.4 (2021-01-06)\n\n  * Add foldCopyData helper function\n
  \   Thanks to SebastiÃ¡n Estrella for the implementation\n    https://github.com/haskellari/postgresql-simple/pull/56\n
  \ * Implement support for postgresql 'interval' type\n    Thanks to Andre Marques
  Lee for the implementation\n    https://github.com/haskellari/postgresql-simple/pull/60\n
  \ * Depend on `time-compat` to provide uniform `time` related interface.\n\n###
  Version 0.6.3 (2020-11-15)\n\n  * Add `fromFieldJSONByteString`\n    Thanks to tomjaguarpaw
  for the implementation\n    https://github.com/haskellari/postgresql-simple/pull/47\n
  \ * Add `attoFieldParser`\n    Thanks to Victor Nawothnig for the implementation\n
  \   https://github.com/haskellari/postgresql-simple/pull/45\n  * Add `Identity`
  and `Const` instance\n    Thanks to Cary Robbins for the implementation\n    https://github.com/haskellari/postgresql-simple/pull/46\n
  \ * Add `withTransactionModeRetry'`, a variant of `withTransactionModeRetry`\n    for
  all exception types.\n    Thanks to Elliot Cameron for the implementation\n    https://github.com/haskellari/postgresql-simple/pull/42\n
  \ * Fix spurious aborts when retrying transactions\n    Thanks to Elliot Cameron
  for the implementation\n    https://github.com/haskellari/postgresql-simple/pull/34\n
  \ * Add `Database.PostgreSQL.Simple.Newtypes` module\n    with `Aeson` newtype.\n
  \   https://github.com/haskellari/postgresql-simple/pull/55\n\n### Version 0.6.2
  (2019-04-26)\n  \n  * Define `MonadFail Ok`.\n\n### Version 0.6.1 (2019-03-04)\n\n
  \ * Escape double '??' to a literal '?\n    Thanks to Felix Paulusma for the implementation.\n
  \   https://github.com/phadej/postgresql-simple/pull/5\n\n  * Mention GHC Generics
  support in the documentation.\n    Thanks to Gabriel Gonzalez for the implementation.\n
  \   https://github.com/phadej/postgresql-simple/pull/6\n\n  * Better error message
  for \"Query resulted in a command response\n    Thanks to Max Amanshauser for the
  implementation.\n    https://github.com/phadej/postgresql-simple/pull/7\n\n  * fromJSONField:
  Include JSONPath on JSON parse errors\n    Thanks to Simon Hengel for the implementation.\n
  \   https://github.com/phadej/postgresql-simple/pull/2\n\n  * No TH in implementation\n
  \   https://github.com/phadej/postgresql-simple/pull/4\n\n### Version 0.6 (2018-10-16)\n\n
  \ * *Breaking change*: Use `Only` package's `Only` for a common 1-tuple.\n\n    Consider
  a downstream library depending already both on\n    `Only` and `postgresql-simple`
  package. This library my define\n    a `MyClass` with instances for `Only.Only`
  and `PostgreSQL.Only`.\n    As now these types are the same, a library would break.\n
  \   Therefore I consider \"merging\" types a breaking change.\n\n    There are two
  ways for adopting this change in that scenario:\n\n    - Either CPP-guard `PostgreSQL.Only`
  instance with\n\n      ```haskell\n      #if !MIN_VERSION_postgresql_simple(0,6,0)\n
  \     instance MyClass (PostgreSQL.Only a) where ...\n      #endif\n      ```\n\n
  \   - or simply remove it and add `postgresql-simple >=0.6` lower bound,\n      making
  sure that there's only single `Only`.\n\n  * Add `ToField` instances for case-insensitive
  strict and lazy text.\n    Thanks to Max Tagher for the implementation.\n    https://github.com/lpsmith/postgresql-simple/pull/232\n\n
  \ * Add support to CockroachDB.\n    Thanks to Georte Steel.\n    https://github.com/lpsmith/postgresql-simple/pull/245\n\n
  \ * Add Generic ConnectInfo instance\n    Thanks to Dmitry Dzhus.\n    https://github.com/lpsmith/postgresql-simple/pull/235\n\n
  \ * Add `fromFieldRange :: Typeable a => FieldParser a -> FieldParser (PGRange a)`\n
  \   https://github.com/lpsmith/postgresql-simple/pull/221\n\n  * Add `fromFieldJSONByteString
  :: FieldParser ByteString`\n    https://github.com/lpsmith/postgresql-simple/pull/222/files\n\n
  \ * Fix off-by-one error in year builder.\n    Thanks to Nathan Ferris Hunter.\n
  \   https://github.com/lpsmith/postgresql-simple/pull/230\n\n  * Extend ToRow and
  FromRow to tuples of size 18\n    Thanks to Bardur Arantsson.\n    https://github.com/lpsmith/postgresql-simple/pull/229\n\n
  \ * Add `Vector` and `Vector.Unboxed` `query` variants.\n    These are more memory
  efficient\n    (especially, if you anyway will convert to some vector)\n    https://github.com/phadej/1\n\n
  \ * Documentation improvements\n    https://github.com/lpsmith/postgresql-simple/pull/227\n
  \   https://github.com/lpsmith/postgresql-simple/pull/236\n\n### Version 0.5.4.0
  (2018-05-23)\n  * Support GHC-8.4 (Semigroup/Monoid)\n\n### Version 0.5.3.0 (2017-05-15)\n
  \ * Refactored some rudimentary cursor handling code out of the\n    implementation
  of the fold operators,  into a new\n    `Database.PostgreSQL.Simple.Cursor` module,
  \ thanks to Bardur Arantsson.\n\n  * Made the `FromField` instance for `Char` compatible
  with\n    postgresql's `bpchar` type.  Thanks to Ivan Lazar Miljenovic for\n    reporting
  the issue.\n\n  * Added `Show` and `Eq` instances for `Notification`, thanks to\n
  \   Matvey Aksenov.\n\n  * Fixed some example code, thanks to Matvey Aksenov.\n\n
  \ * Fixed a problem with using `conversionError` to throw exceptions\n    of type
  `SomeException`.  Previously, the exception would be\n    wrapped in a second `SomeException`
  dynamic constructor which\n    would cause normal GHC typecase idioms over `SomeException`
  to fail.\n\n### Version 0.5.2.1 (2016-06-29)\n  * Bumped the lower bound for `base`
  to 4.6.   Thanks to Herbert\n    Valerio Riedel for reporting the issue.\n\n  *
  Added an `Eq` instance for `SqlError`, thanks to Chris Allen\n\n  * Fixed a bug
  where a all-caps `\"NULL\"` text value inside a\n    postgresql array would get
  parsed as the SQL null value.  Thanks\n    goes to Edgar Gomes and Silk for finding
  and fixing this mistake.\n\n  * Modified `withTransaction` and friends to ignore
  `IOError`s when\n    attempting to roll back the transaction.   This fixes a buggy\n
  \   interaction between `withTransaction` and async exceptions (e.g.\n    `System.Timeout`)
  on unix platforms.  Thanks goes to Erik\n    Hesselink and Silk for providing the
  test case that exposed this\n    issue.\n\n  * Added the `testTimeout` regression
  test for the problem above.\n\n### Version 0.5.2.0 (2016-05-25)\n  * Significantly
  improved the error reporting from\n    `Copy.putCopyData`, thanks to Ben Gamari.\n\n
  \ * Moved the test suite to use `tasty`,  with a big thanks\n    to Ben Gamari.\n\n
  \ * Added `FromField.optionalField`,  and updated the documentation\n    of `FromField.fromJSONField`,
  as inspired by an email conversation\n    with Ian Wagner.\n\n  * Updated all links
  in the haddocks to use https,  and added a link\n    to the documentation of `connectPostgreSQL`.\n\n
  \ * Added a truncated changelog to the source distribution.\n\n### Version 0.5.1.3
  (2016-04-30)\n  * Implemented the Monad of No Return proposal, future-proofing\n
  \   postgresql-simple against future releases of GHC.\n\n  * Fixed a rare and usually
  benign race condition where\n    `getNotification` could end up waiting on a newly
  reallocated\n    file descriptor index, potentially leading to deadlock if the\n
  \   descriptor does not become readable promptly.  This fix only\n    applies to
  GHC 7.8 or later, as it depends on `threadWaitReadSTM`.\n\n  * Tweaked the time
  parsers to accept times of day of the form `hh:mm`,\n    omitting seconds,  following
  changes made to aeson.\n\n  * Updated the documentation of the `In` type to point
  out a gotcha\n    when using the SQL fragment `... NOT IN ?` with `In []`.  Thanks\n
  \   goes to Simon Michael and Dan Haraj for bringing this issue to\n    my attention.\n\n###
  Version 0.5.1.2 (2015-12-14)\n  * The syntax generated for empty arrays was changed
  so that\n    postgresql's type inference would work better,  thanks to\n    Amit
  Levy.\n\n  * Further revision and expansion of the new Time documentation.\n\n###
  Version 0.5.1.1 (2015-12-02)\n  * This is a documentation-only release\n\n  * The
  documentation of the `Time` module has been completely\n    rewritten, and is far
  longer and more informative.  It contains\n    a brief overview of civil time, the
  semantics of postgresql's\n    time types,  and their relation to Haskell's time
  types via\n    postgresql-simple.\n\n  * The documentation of `connectPostgreSQL`
  has been modified to\n    mention the effects of environment variables on the connection\n
  \   string parameters.\n\n  * The documentation of `HStore.Internal` has been unhidden
  from\n    haddock.\n\n  * A typo in example code was fixed courtesy of Levi Notik.\n\n###
  Version 0.5.1.0 (2015-10-22)\n  * Optimized the implementation of the streaming
  operators to avoid\n    creating intermediate lists of rows,  thanks to Timo von
  Holtz.\n\n  * Added default instances for `ToRow` and `FromRow` that depend on\n
  \   Generics,  thanks to Alexey Khudyakov.\n\n  * Fixed support for bytestring-0.9
  and GHC 7.4.\n\n### Version 0.5.0.1 (2015-09-21)\n  * Fixed a bug when printing
  a `ZonedTime` with a negative offset\n    that is not a whole number of hours.\n\n###
  Version 0.5.0.0 (2015-09-19)\n  * Removed the deprecated `BuiltinTypes` module.\n\n
  \ * Modified the SQL quasiquoter so that it returns a `Query`,  not\n    an overloaded
  string,  and so that the `OverloadedStrings` language\n    extension is no longer
  necessary,  thanks to Mike Ledger.\n\n  * Moved away from `blaze-builder` in favor
  of `bytestring-builder`.  This\n    shouldn't affect very many people, but does
  reduce the transitive\n    dependencies.\n\n  * Rewrote the timestamp printers to
  use the new `Prim`\n    infrastructure in `bytestring-builder`.   The new printers
  should\n    be a fair bit faster.\n\n  * Added support for exclusion violations
  to the `ConstraintViolation`\n    type in the Errors module,  thanks to JoÃ£o CristÃ³vÃ£o.\n\n
  \ * Moved away from the `uuid` package in favor of the `uuid-types` package,\n    thanks
  to Bardur Arantsson.  This shouldn't affect anybody, but does\n    reduce the transitive
  dependencies.\n\n  * Postgresql-simple now explicitly assumes the UTF8 character
  encoding\n    for communication between the client and server.   All database encodings\n
  \   support UTF8 except for Mule Internal Code,  the Multilingual\n    Extensions
  for Emacs.   An exception should be raised upon\n    connecting to a database by
  the backend if the backend cannot\n    accomodate this requirement.\n\n  * Added
  `Eq` and `Typeable` instances for `Connection`.\n\n  * Added the `foldWith`, `forEachWith`,
  and `returningWith` families\n    of functions courtesy of Travis Staton.\n\n  *
  Support for Ranged types,  with thanks to Leonid Onokhov for his\n    contributions.\n\n
  \ * The `FromField` instance for JSON now allows for top-level values that\n    are
  not objects or arrays,  thanks to Sam Rijs.\n\n  * The timestamp parsers have been
  replaced with those now in Aeson.\n    Janne Hellsten adapted the old parsers from
  postgresql-simple for\n    inclusion in Aeson;  Bryan O'Sullivan rewrote those parsers
  to be\n    faster,  with some tweaks contributed by myself.   And now to\n    bring
  the effort full circle,  the result has been brought back to\n    postgresql-simple,
  \ with some adaptations.\n\n  * Fixed a bug in the typeinfo system where postgresql's
  `_record` type\n    was being reported as a basic type and not an array type.   Thanks
  to\n    Nickolay Kolev for helping to expose this issue.\n\n  * Fixed a bug with
  the `typeInfo` operator, thanks to Timmy Tofu.  In the\n    case of parsing subfields
  of arrays and composites,  it would fetch the\n    `TypeInfo` of the array or composite
  type and not the subtype.\n\n### Version 0.4.10.0 (2015-02-26)\n  * Added a blurb
  about SSL/TLS in the documentation for connectPostgreSQL\n\n  * Moved some functions
  into the Internal module,  courtesy of Aleksey\n    Uimanov.\n\n### Version 0.4.9.0
  (2014-12-27)\n  * Made the fromField method for PGArray available as pgArrayFieldParser,\n
  \   outside of the typeclass courtesy of Tom Ellis.\n\n  * Fixed a missing OverloadedStrings
  pragma in the documentation of SqlQQ.\n\n  * Fixed deprecation warnings, courtesy
  of Simon Hengel.\n\n### Version 0.4.8.0 (2014-11-24)\n  * Added support for postgresql's
  citext type extension via the\n    case-insensitive package.\n\n  * Added the function
  parseHStoreList to the HStore module.\n\n### Version 0.4.7.0 (2014-10-27)\n  * Added
  support for very old timestamps to UTCTime.   Depending on time\n    zone,  very
  old timestamps can be returned with a offset from UTC that\n    contains seconds.\n\n
  \   All timezones in the TZ database moved to a time standard offset an\n    integer
  number of minutes from UTC before 1973, almost all locations\n    moved before 1938,
  \ and a solid majority moved before 1921.\n\n    ZonedTime assumes offsets are a
  whole number of minutes,  and thus the\n    conversion to ZonedTime does not support
  these timestamps and will\n    still throw a conversion error.\n\n    Note that
  PostgreSQL's \"timestamp with time zone\" (or \"timestamptz\")\n    type is nearly
  universally misunderstood.  For an explanation, see:\n\n        https://github.com/lpsmith/postgresql-simple/issues/69\n\n
  \   Thanks to Michael Snoyman for his assistance with this issue.\n\n### Version
  0.4.6.0 (2014-10-07)\n  * Added an instance ToField NominalDiffTime.\n\n### Version
  0.4.5.0 (2014-09-26)\n  * Added support for retrieving NaN and Â±Infinity floating
  point values\n    from postgres to the FromField instances for Float, Double, and
  Rational.\n    The instance for Scientific is unchanged due to the fact it has no\n
  \   way of representing these special values.  Thanks goes to Tom Nielsen\n    for
  reporting the issue.\n\n### Version 0.4.4.1 (2014-09-07)\n  * Fixed a rather serious
  bug that prevented the COPY module from working\n    at all on unix clients since
  version 0.4.3.0.   Thanks goes to\n    Dmitry Dzhus for reporting the issue.\n\n
  \ * Added a regression test for the COPY module to the test suite.\n\n### Version
  0.4.4.0 (2014-08-26)\n  * Added the jsonb type debuting in PostgreSQL 9.4 to the
  TypeInfo.Static\n    and Builtin tables, and extended the out-of-box json instances
  to\n    be compatible with the new type.   Thanks to Tobias Florek for the\n    patch.\n\n
  \ * Ported some expanded documentation from mysql-simple,  and fixed\n    a documentation
  typo.\n\n### Version 0.4.3.0 (2014-07-10)\n  * connect and exec now use libpq asynchronously
  on non-Windows platforms.\n    This means we are using threadWaitRead and threadWaitWrite
  to\n    have GHC's IO manager schedule non-blocking C calls to libpq,\n    instead
  of using blocking C calls and having the OS kernel do the\n    scheduling.  Among
  other things, this now means that System.Timeout\n    will work with connect and
  exec on unix platforms.\n\n  * connect and exec now throw IOErrors instead of SQLErrors
  in\n    some cases.   The intention is for SQLErrors to represent\n    an error
  returned by the server,  and to use IOErrors for errors\n    that originate from
  client-side code.    However,  this goal\n    isn't perfectly achieved as of yet.\n\n###
  Version 0.4.2.3 (2014-06-04)\n  * This is strictly a documentation release,  with
  no code changes.\n\n  * Fixed several documentation typos,  thanks to Chris Allen
  and remdezx.\n\n  * Expanded the documentation of connectPostgreSQL,  including
  a short\n    overview of common use cases and two new links to the official Postgres\n
  \   documentation about the authentication process.\n\n  * De-emphasized connect
  and ConnectInfo in favor of connectPostgreSQL.\n\n### Version 0.4.2.2 (2014-05-15)\n
  \ * Fixed compatibility with scientific-0.3.\\*,  thanks to Adam Bergmark\n\n  *
  Improved documentation of the FromField module, as well as the fold,\n    foldWithOptions,
  executeMany,  and returning operators.\n\n### Version 0.4.2.1 (2014-03-27)\n  *
  Fixed bug in Values syntax generation\n\n  * Improved documentation,  including
  examples of multi-row update,\n    a better example for Values,  documenting the
  inaccuracies in reading\n    floating point numbers from the database,  and the
  IsString instance\n    for QualifiedIdentifier.\n\n### Version 0.4.2.0 (2014-03-22)\n
  \ * Added ToField and FromField instances for the scientific package\n\n  * Changed
  the Identifier and QualifiedIdentifier to use Text in\n    order to avoid encoding
  errors.  Technically this requires a\n    major verson bump, but let's pretend 0.4.1.0
  didn't happen.\n\n  * Removed non-exhaustive cases in the ToField instance for Values,\n
  \   and tweaked error messages.\n\n### Version 0.4.1.0 (2014-03-22)\n  * Fixed the
  parsing of arrays containing null values, courtesy of\n    Francesco Mazzoli\n\n
  \ * Added support for properly escaped identifiers,  courtesy of\n    Tobias Florek.
  \  See the new Identifier and QualifiedIdentifier\n    types inside Database.PostgreSQL.Simple.Types.\n\n
  \ * Added support for parameterized VALUES expressions.   This is\n    more general
  than executeMany and returning.   See the\n    Database.PostgreSQL.Simple.Types.Values
  data type.\n\n### Version 0.4.0.2 (2014-01-12)\n  * Tweaked C preprocessor directive
  to be more portable\n\n  * Tweaked testsuite for compatibility with aeson-0.7\n\n###
  Version 0.4.0.1 (2013-12-21)\n  * Relaxed dependency on aeson to >= 0.6\n\n  * Update
  the documentation of `fromField`\n\n### Version 0.4.0.0 (2013-12-21)\n  * Changed
  the calling code of `fromField` so that it always sends\n    a copy of the raw data.
  \ This should be a small but significant\n    performance bump for most people most
  of the time;  however it\n    may slow down retrieval of large values not converted
  directly\n    to ByteString,  such as large json, hstore, and array values.\n    See
  commit 8635f8 for more information.\n\n  * Added the PGArray type.  Thanks to Joey
  Adams for the suggestion\n\n  * Fixed JSON decoding,  which was almost entirely
  broken up until now,\n    due to bugs in the version of aeson currently available
  on Hackage.\n    Thanks to Amit Levy for the report.\n\n  * Added FromField instances
  for IORef, MVar, and IOVector.\n\n### Version 0.3.10.0 (2013-12-17)\n  * Added the
  queryWith function, courtesy of Leonid Onokhov\n\n  * Added the Default type,  for
  representing postgresql's default values\n\n### Version 0.3.9.1 (2013-10-28)\n  *
  Removed dependency on hashable\n\n### Version 0.3.9.0 (2013-10-27)\n  * Added FromField
  and ToField instances for the `uuid` package,\n    courtesy of Bas van Dijk.\n\n
  \ * Added instance FromRow (Maybe a) for most pre-packaged FromRow\n    instances.
  \ See issue #64 for some discussion.\n\n  * Added the fromBinary, fromHStoreMap,
  and fromHStoreList newtype\n    unwrapper functions, courtesy of Bas van Dijk.\n\n###
  Version 0.3.8.0 (2013-10-11)\n  * Fixed the example code in `FromField`, thanks
  to Adam Bergmark.\n\n  * Added `Notification.getBackendPID`.\n\n### Version 0.3.7.1
  (2013-09-12)\n  * Relaxed the dependency on bytestring-0.10 back to bytestring-0.9,\n
  \   courtesy of Michael Snoyman\n\n### Version 0.3.7.0 (2013-09-11)\n  * Added `aeson`
  as a dependency.\n\n  * Added ToField and FromField instances for aeson's JSON.Value
  type,\n    courtesy of Bas van Dijk.\n\n  * Added toJSONField and fromJSONField
  helper functions for declaring\n    FromField/ToField JSON instances to other Haskell
  types, courtesy\n    of Bas van Dijk.\n\n  * Added a FromField instance for (),
  corresponding to postgresql's void\n    type.\n\n  * Added liftConversion and liftRowParser
  functions to the Internal\n    module, for lifting IO actions into the respective
  monads.\n\n  * The SqlError predicates available in the Transaction module are now\n
  \   also exported from the Errors module.\n\n  * Various documentation fixes.\n\n###
  Version 0.3.6.0 (2013-08-19)\n  * Added the json type to BuiltinTypes and TypeInfo.Static,
  courtesy of\n    Manuel GÃ³mez.\n\n  * Removed the remaining internal dependencies
  on BuiltinTypes from\n    FromField.   Added the TypeInfo.Macro module as a result.\n\n
  \ * Deprecated the BuiltinTypes module,  which will be removed several\n    months
  from now.  Fixed the example code in FromField to reflect\n    this change.\n\n###
  Version 0.3.5.0 (2013-08-09)\n  * Added an FromRow instance for Vector,  semantically
  identical to the\n    existing FromRow instance for [],  courtesy of Doug Beardsley\n\n
  \ * Reworked the documentation for the Copy module,  and tweaked the\n    documentation
  for the LargeObjects module.\n\n### Version 0.3.4.0 (2013-07-23)\n  * Added direct
  support for COPY IN and COPY OUT,  without having\n    to use raw postgresql-libpq
  calls and postgresql-simple's Internal\n    module.\n\n  * Changed `getNotification`
  so that it throws a IOError (resource vanished)\n    exception instead of an ErrorCall
  exception when it fails to fetch\n    the connection's file descriptor from libpq.\n\n###
  Version 0.3.3.2 (2013-06-18)\n  * Optimized the definition of `mconcat` in the Monoid
  instance for\n    the Query type,  courtesy of Joey Adams.\n\n### Version 0.3.3.1
  (2013-06-06)\n  * `getNotification` now works on Windows,  albeit using a one-second\n
  \   polling loop,  courtesy of Joey Adams.\n\n### Version 0.3.3.0 (2013-05-29)\n
  \ * Fixed two issues with the fold operator:  fold would raise the wrong\n    exception,
  \ and gave the database cursor a static name preventing\n    folds from being nested.
  \ Thanks to Joey Adams for his\n    work on these issues.\n\n### Version 0.3.2.0
  (2013-05-20)\n  * Added a savepoint abstraction to the Transaction module, courtesy\n
  \   of Joey Adams\n\n### Version 0.3.1.2 (2013-04-29)\n  * Fixed hstore parser to
  not unnecessarily reverse the key-value pairs\n\n### Version 0.3.1.1 (2013-04-29)\n
  \ * Fixed hstore parser to recognize empty hstores, courtesy of Simon\n    Meier\n\n###
  Version 0.3.1.0 (2013-04-26)\n  * Added support for Range and Composite types to
  the TypeInfo system.\n\n  * Added support for hstore types in the Simple.HStore
  module.\n\n  * Improved documentation of the FromField module.\n\n### Version 0.3.0.1
  (2013-03-26)\n  * A large chunk of the documentation inside the FromField module
  had\n    silently failed to render in Haddock.\n\n### Version 0.3.0.0 (2013-03-25)\n
  \ * Added support for PostgreSQL's Array Types.  Thanks to Jason Dusek\n    for
  his work on this feature.\n\n  * Added a brand new TypeInfo system that gives FromField
  instances\n    convenient and efficient access to the pg_type metatable.   This\n
  \   replaced the older typename cache,  and was neccesary to properly\n    support
  postgres array types.   Thanks to Bas van Dijk for his\n    work on this feature.\n\n
  \ * Changed the type of the `fromField` and `fromRow` methods to allow\n    a restricted
  set of IO actions,  and stopped pre-calculating the type\n    name of every column.
  \   As a result,  the type of the `typename`\n    operator changed from `Field ->
  ByteString` to\n    `Field -> Conversion ByteString`,  where Conversion is the new
  monad\n    that conversion computations run inside.\n\n  * Improved the documentation
  of the FromField module.\n\n  * Added the Database.PostgreSQL.Simple.Errors module,
  \ which offers\n    some predicates and functions for interpreting SqlError values,
  courtesy\n    of Leonid Onokhov.\n\n  * Added a the name of a column and the associated
  table's object identifier\n    to ResultError exceptions,  courtesy of Jeff Chu.\n\n
  \ * Moved most of the more detailed transaction operators into the\n    Database.PostgreSQL.Simple.Transaction
  module.\n\n  * Changed withTransactionModeRetry to accept a predicate of which\n
  \   SqlErrors to retry,  due to the fact that serialization errors can\n    sometimes
  manifest themselves as constraint violations.   Thanks\n    to Oliver Charles for
  pointing this out and implementing the change.\n\n  * Added simple tests of the
  fold operator,  thanks to Joey Adams.\n\n  * Added simple tests of the array conversion
  code.\n\n  * Added recognition of -- comments in the quasiquoter,  which are\n    now
  stripped out.\n\n\n### Version 0.2.4.1 (2012-08-29)\n  * Fixed the documentation
  of `In`.   Thanks to rekado and dstcruz for\n    pointing this out.\n\n### Version
  0.2.4.0 (2012-08-23)\n  * Added the `withTransactionSerializable` and `withTransactionModeRetry`\n
  \   operators,  thanks to Joey Adams.\n\n### Version 0.2.3.0 (2012-08-09)\n  * Added
  the `returning` operator, thanks to Jason Dusek\n\n### Version 0.2.2.0 (2012-07-26)\n
  \ * Added a ToRow instance for the (:.) type, courtesy of Leonid Onokhov\n\n  *
  Added the type oid for PostgreSQL's `uuid` type to BuiltinTypes\n\n### Version 0.2.1.0
  (2012-07-23)\n  * Added the FromRow.fieldWith operator, thanks to Leonid Onokhov\n\n
  \ * Added a type synonym for FieldParser\n\n### Version 0.2.0.1 (2012-06-21)\n  *
  Fixed a compatibility problem with PostgreSQL 8.1,  which does not allow\n    clients
  to set their own value for `standard_conforming_strings`.  This\n    connection
  variable is still set to `on` for PostgreSQL 8.2 and later.\n\n### Version 0.2:
  (2012-06-19)\n  * Removed the conversion from `timestamp` to `UTCTime`.  Some code
  will be\n    broken even though it will still compile.\n\n  * Renamed a number of
  data constructors, mostly in the BuiltinTypes module.\n\n  * Exported ToRow/FromRow
  from Database.PostgreSQL.Simple\n\n\n### Version 0.1.4.3: (2012-06-10)\n  * Fix
  language extensions for compatibility with GHC 7.0\n\n### Version 0.1.4.2: (2012-06-10)\n
  \ * Fix a wayward dependency on Text.\n\n### Version 0.1.4.1: (2012-06-10)\n  *
  Added support for timezones with minutes in their UTC offset.\n\n### Version 0.1.4:
  (2012-06-10)\n  * Removed pcre-light dependency,  courtesy of Joey Adams.\n\n  *
  Reworked support for the Time types.\n\n      * The conversion from PostgreSQL's
  `timestamp` (without time zone) type\n        to Haskell's `UTCTime` type is deprecated
  and will be removed in 0.2.\n\n      * `Data.Time.LocalTime` now has `FromField`/`ToField`
  instances.  It is\n        now the preferred way of dealing with `timestamp` (without
  time zone).\n\n      * `Database.PostgreSQL.Simple.Time` is a new module that offers
  types\n        that accomodate PostgreSQL's infinities.\n\n      * All time-related
  `FromField`/`ToField` instances are now based on new,\n        higher-speed parsers
  and printers instead of those provided by the\n        time package included in
  GHC.\n\n  * Planned breaking changes for 0.2:\n\n      * Removing the conversion
  from `timestamp` to `UTCTime`.\n\n      * Renaming some of the type names in `BuiltinTypes`.\n\n\n###
  Version 0.1.3: (2012-05-30)\n  * Made ZonedTime an instance of FromField and ToField\n\n
  \ * Added getNotificationNonBlocking\n\n\n### Version 0.1.2: (2012-05-09)\n  * Switched
  to libpq-based escaping for bytea types;  Binary now works with\n    PostgreSQL
  8 courtesy of Joey Adams.\n\n  * postgresql-simple now sets standard_conforming_strings
  to \"on\".  This\n    per-connection variable is initialized according to the server\n
  \   configuration,  which defaults to \"off\" for PostgreSQL < 9,  and \"on\"\n
  \   for PostgreSQL >= 9.   You may need to adjust any string literals in\n    your
  SQL queries,  or set the variable yourself.\n\n  * Exported (:.) from Database.PostgreSQL.Simple\n\n\n###
  Version 0.1.1: (2012-05-06)\n  * Added some preliminary documentation for the Ok,
  Notification, and\n    LargeObjects modules\n\n  * Implemented the `fail` method
  for the monad instance for `Ok`.\n\n  * Fixed a bug relating to handling the transaction
  level\n\n\n### Version 0.1:   (2012-05-04)\n  * Renamed several modules, typeclasses,
  and functions:\n\n        QueryParams  (renderParams)   -> ToRow   (toRow)\n        QueryResults
  (convertResults) -> FromRow (fromRow)\n        Param  (render)  -> ToField   (toField)\n
  \       Result (convert) -> FromField (fromField)\n\n  * Added the `Database.PostgreSQL.Simple.Ok`
  module,  a variation of\n    `Either SomeException` that has an instance for `Alternative`
  and also\n    uses a list of exceptions to track the ways it has failed.\n\n  *
  Changed the return type of `fromField` and `fromRow` from\n    `Either SomeException`
  to `Ok`.\n\n  * Thanks to suggestions from Ozgun Ataman, the `FromRow` typeclass
  has been\n    massively improved.  The result is simpler definitions and better\n
  \   compositionality.  Also, user-defined instances need not be to be\n    concerned
  about forcing the converted results to WHNF.  Here is an\n    example comparing
  the old to the new:\n\n        instance (Result a, Result b) => QueryResults (a,b)
  where\n            convertResults [fa,fb] [va,vb] = do\n                !a <- convert
  fa va\n                !b <- convert fb vb\n                return (a,b)\n            convertResults
  fs vs  = convertError fs vs 2\n\n        instance (FromField a, FromField b) =>
  FromRow (a,b) where\n            fromRow = (,) <$> field <*> field\n\n  * Added
  `(:.)`, a pair that allows one to compose `FromRow` instances:\n\n        instance
  (FromRow a, FromRow b) => FromRow (a :. b) where\n            fromRow = (:.) <$>
  fromRow <*> fromRow\n\n  * Moved the contents `Field` module into the `FromField`
  module.\n\n  * Removed the `RawResult` type.\n\n  * Added `DefaultIsolationLevel`
  as a distinct `IsolationLevel` option\n    and   `DefaultReadWriteMode`  as a distinct
  `ReadWriteMode`.\n"
basic-deps:
  Only: '>=0.1 && <0.1.1'
  bytestring: '>=0.10.0.0 && <0.12'
  case-insensitive: '>=1.2.0.11 && <1.3'
  base: '>=4.6.0.0 && <4.17'
  postgresql-libpq: '>=0.9.4.3 && <0.10'
  text: '>=1.2.3.0 && <1.3 || >=2.0 && <2.1'
  time-compat: '>=1.9.5 && <1.12'
  containers: '>=0.5.0.0 && <0.7'
  hashable: '>=1.2.7.0 && <1.5'
  attoparsec: '>=0.13.2.2 && <0.15'
  transformers: '>=0.3.0.0 && <0.7'
  uuid-types: '>=1.0.3 && <1.1'
  scientific: '>=0.3.6.2 && <0.4'
  bytestring-builder: '>=0.10.8.1.0 && <0.11'
  aeson: '>=1.4.1.0 && <1.6 || >=2.0.0.0 && <2.2'
  template-haskell: '>=2.8.0.0 && <2.19'
  vector: '>=0.12.0.1 && <0.14'
all-versions:
- '0.0'
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- '0.2'
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.4.1
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.2.0
- 0.3.3.0
- 0.3.3.1
- 0.3.3.2
- 0.3.4.0
- 0.3.5.0
- 0.3.6.0
- 0.3.7.0
- 0.3.7.1
- 0.3.8.0
- 0.3.9.0
- 0.3.9.1
- 0.3.10.0
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.2.1
- 0.4.2.2
- 0.4.2.3
- 0.4.4.1
- 0.4.5.0
- 0.4.6.0
- 0.4.7.0
- 0.4.8.0
- 0.4.9.0
- 0.4.10.0
- 0.5.0.1
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.5.2.0
- 0.5.2.1
- 0.5.3.0
- 0.5.4.0
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
author: Bryan O'Sullivan, Leon P Smith
latest: 0.6.4
description-type: haddock
description: Mid-Level PostgreSQL client library, forked from mysql-simple.
license-name: BSD-3-Clause
