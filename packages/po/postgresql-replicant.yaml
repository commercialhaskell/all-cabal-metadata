homepage: https://github.com/agentultra/postgresql-replicant#readme
changelog-type: markdown
hash: 38ecb166e4991a0e13f3ba541e422207ed73a649c2afc75cb374af1537da8717
test-bench-deps:
  cereal: -any
  bytestring: -any
  base: '>=4.7 && <5'
  hspec: -any
  binary: -any
  postgresql-replicant: -any
maintainer: james@agentultra.com
synopsis: PostgreSQL logical streaming replication library
changelog: |
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

  ## [Unreleased]

  ## [0.2.0.0] - 2021-07-27

  This is a minor update that adds a replication connection type,
  updates the root module API with more types, and is just a better
  quality of life release.

  ### Added
  - ReplicantConnection
  - Connection handling functions to Replicant module
  - Message types to main Replicant module

  ## [0.1.0.1] - 2021-06-22

  This is a minor update to our experimental release, fixing some pretty
  major issues:

  ### Fixed
  - WalSender on the server hanging up because replicant wasn't sending
    updates
  - Minor cleanup, throw better errors instead of printing debug
    information

  ## [0.1.0.0] - 2021-05-04

  This is an experimental release to test out this library and get it
  ready and polished for 1.0!

  ### Added
  - Initial release!
  - `withLogicalStream`
  - Protocol types, serialzation instances, etc
  - Logical Replication Messages
  - Stream state handling
basic-deps:
  cereal: -any
  bits: -any
  bytestring: -any
  stm: -any
  base: '>=4.7 && <5'
  time: -any
  postgresql-libpq: -any
  text: -any
  async: -any
  containers: -any
  attoparsec: -any
  scientific: -any
  aeson: -any
  keep-alive: -any
  postgresql-replicant: -any
all-versions:
- 0.1.0.1
- 0.2.0.0
author: James King
latest: 0.2.0.0
description-type: markdown
description: |
  # postgresql-replicant

  A PostgreSQL streaming logical replication client for Haskell.

  React to database changes in real-time.

  This library is currently _EXPERIMENTAL_ and is not ready for
  production yet.  Developers are encouraged to test out the library,
  add issues, contribute and make it awesome.

  ## Setup

  In order to use a logical replication client you need to set the
  `wal_level` in Postgres to `logical`.  You can set that, for example,
  in your `postgres.conf` file:

      wal_level = logical

  Then restart your server, log in as `postgres` or another super user
  and check:

      SHOW wal_level

  It should show _logical_.

  You will also need a user who is
  [allowed](https://www.postgresql.org/docs/9.1/sql-alterrole.html
  "PostgreSQL user role documentation") to use replication features.

  Then add a database and your user with the `REPLICATION` trait to the
  database, grant all on it if you need to.

  We haven't added authorization support yet to the library so make sure
  in `pg_hba.conf` you `trust` local connections:

      host    all             all             127.0.0.1/32            trust

  Caveat emptor.

  You will also need to install the `wal2json` plugin for your
  PostgreSQL server.  For example in Ubuntu-like distributions you can:

      $ sudo apt install postgresql-12-wal2json

  Assuming you have installed PostgreSQL from the package repositories.

  You can then setup a basic "hello world" program using this library:

  ``` haskell
  module Main where

  import Control.Exception

  import Database.PostgreSQL.Replicant

  main :: IO ()
  main = do
    let settings = PgSettings "my-user" "my-database" "localhost" "5432" "testing"
    withLogicalStream settings $ \change -> do
      print change
      return $ changeNextLSN change
        `catch` \err ->
        print err
  ```

  Which should connect, create a `testing` replication slot, and start
  sending your callback the changes to your database as they arrive.

  The type of the callback to `withLogicalStream` is:

      Change -> IO LSN

  Note the return type.  The *LSN* or _Log Sequence Number_ is used by
  replicant after running your callback to update its internal stream
  state and tell PostgreSQL that you have consumed this change.  This
  means that if the connection fails and replicant reconnects to the
  _same_ slot it will restart the stream at the last *LSN* replicant was
  able to successfully send to the server.

  All you have to do is return `changeNextLSN change` at the end of your
  callback.

  ### WAL Output Plugins

  Presently we only support the `wal2json` WAL output plugin and only
  the v1 format.  Support for the v2 format is planned as are more
  output plugins.

  ## Example Program

  Included is a simple program, `replicant-example` which should help
  you test your connection settings and make sure that you can connect
  and receive WAL changes.

  You can change the connection settings through environment variables:

      PG_USER=myuser PG_DATABASE=mydb replicant-example

  The configuration settings are:

  - `PG_USER`: The replication user to connect as
  - `PG_DATABASE`: The database to connect to
  - `PG_HOST`: The host name of the database to connect to
  - `PG_PORT`: The port to connect on
  - `PG_SLOTNAME`: The replication slot to create or connect to
  - `PG_UPDATEDELAY`: The frequency (in _ms_) to update PostgreSQL on
    the stream status

  ## FAQ

  ### Why not use LISTEN/NOTIFY

  You don't have to set up triggers for each table with logical
  replication.  You also don't have the message size limitation.  That
  limitation often forces clients to perform a query for each message to
  fetch the data and can use more than one connection.  We only use one
  connection.

  ### What are the trade offs?

  This library uses logical replication slots.  If your program loses
  the connection to the database and cannot reconnect the server will
  hold onto WAL files until your program can reconnect and resume the
  replication stream.  On a busy database, depending on your
  configuration, this can eat up disk space quickly.

  It's a good idea to monitor your replication slots.  If
  `postgresql-replicant` cannot reconnect to the slot and resume the
  stream you may need to have a strategy for dropping the slot and
  recreating it once conditions return to normal.  Have a strategy.
license-name: BSD-3-Clause
