all-versions:
- 0.5.0.0
- 0.5.1.0
- 0.5.1.1
- 0.6.0.0
- 0.6.0.1
- 0.6.1.0
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.9.0.0
- 0.10.0.0
- 0.11.0.0
- 0.11.1.0
- 0.12.0.0
- 0.12.1.0
- 0.13.0.0
- 0.13.0.1
- 0.14.0.0
author: Torsten Schmits
basic-deps:
  async: '>=2.2.5 && <2.3'
  base: '>=4.17.2.1 && <4.20'
  incipit-core: '>=0.4.1.0 && <0.7'
  path: '>=0.9.1 && <0.10'
  path-io: '>=0.2.0 && <1.9'
  polysemy: '>=1.9.0.0 && <1.10'
  polysemy-conc: '>=0.14.0.0 && <0.15'
  polysemy-resume: '>=0.7.0.0 && <0.10'
  polysemy-time: '>=0.5.1.0 && <0.8'
  posix-pty: '>=0.2.2 && <0.3'
  process: '>=1.6.18.0 && <1.7'
  stm-chans: '>=2.0.0 && <3.1'
  typed-process: '>=0.2.4.1 && <0.3'
  unix: '>=2.7.3 && <2.9'
changelog: |
  # 0.14.0.0

  ## Breaking

  * Move `Interrupt` here from `polysemy-conc`.

  # 0.10.0.0

  * Add `oneshot` variants of `Process` interpreters that send `Stop` to the individual actions inside the scope, modeling
    a process that is expected to terminate.
  * Refactor interpreters to use `Scoped` as the basis and specialize unparameterized ones.
    Don't provide loads of specializations for I/O types, rather offer interpreters that handle `ProcessOutput` and
    `ProcessInput` only.
  * Add constructors for `SysProcConf` that use `Path` and `Text`.
  * Add the newtype `Pid` for `SystemProcess`.
  * Add `currentPid`.
  * Catch exceptions when starting a system process and send them to the scope.
  * Change the process config constructor expected by `interpretSystemProcessNative` to return `Either Text SysProcConf`,
    throwing the error as `SystemProcessScopeError`.

  # 0.9.0.0

  * Remove stderr from the `Process` abstraction so that stdout and stderr must be unified after parsing (potentially as
    `Either` to emulate the previous behaviour).
  * Make default `ProcessOutput` interpreters discard all stderr output.
  * Add re-interpreter from `Input`/`Output` to `Process`.
  * Add `interpretProcessOutputIncremental`, a stateful interpreter using a supplied parser that may produce partial
    results.
  * Add `interpretProcessCurrent` et al, treating the program's process's stdio as the (mirrored) stdio of an external
    process.
  * Add `interpretProcessOutputLeft` and `interpretProcessOutputRight`, lifting results of another interpreter into
    `Either`.

  # 0.8.0.0

  * Add `ProcessOptions`, replacing the primitive parameters of `Process` interpreters.
  * Add an option for `Process` that determines whether to kill the process after exiting the scope.

  # 0.6.0.0

  * Allow `Process` to emit custom chunks constructed by an interpreter of `ProcessOutput` instead of `ByteString`s
    containing whatever the `Handle` produced.
  * Rename stdio interpreters.
  * Add helper `resolveExecutable` that looks up names in `$PATH` and ensures the files are executable.
  * Add effect `Pty` for interacting with pseudo terminals.
  * Add low-level process abstraction effect, `SystemProcess`.

  # 0.5.0.0

  * Add the effect `Process`, wrapping `System.Process.Typed` using `Scoped`.
changelog-type: markdown
description: |
  # About

  This library provides [Polysemy] effects for system processes, signal handling and pseudo terminals.

  Please visit [Hackage] for documentation.

  [Polysemy]: https://hackage.haskell.org/package/polysemy
  [Hackage]: https://hackage.haskell.org/package/polysemy-process/docs/Polysemy-Process.html
description-type: markdown
hash: 8503e26263df4a7f515f958be471fc709d96e2a0ac12125143f922831c064d8f
homepage: https://github.com/tek/polysemy-conc#readme
latest: 0.14.0.0
license-name: BSD-2-Clause-Patent
maintainer: hackage@tryp.io
synopsis: Polysemy effects for system processes
test-bench-deps:
  async: '>=2.2.5 && <2.3'
  base: '>=4.17.2.1 && <4.20'
  incipit-core: '>=0.4.1.0 && <0.7'
  polysemy: '>=1.9.0.0 && <1.10'
  polysemy-conc: '>=0.14.0.0 && <0.15'
  polysemy-plugin: '>=0.4.4.0 && <0.5'
  polysemy-process: '>=0'
  polysemy-resume: '>=0.7.0.0 && <0.10'
  polysemy-test: '>=0.3.1.6 && <0.11'
  polysemy-time: '>=0.5.1.0 && <0.8'
  tasty: '>=1.4.2 && <1.5'
  tasty-expected-failure: '>=0.11.1.2 && <0.13'
  typed-process: '>=0.2.4.1 && <0.3'
  unix: '>=2.7.3 && <2.9'
