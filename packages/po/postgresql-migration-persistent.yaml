all-versions:
- 1.0.0
- 1.1.0
author: 'Jappie Klooster, Jean-Paul Calderone '
basic-deps:
  base: '>=4.9.1.0 && <5'
  mtl: <3
  persistent: <3
  persistent-postgresql: <3
  postgresql-migration: <0.3
  postgresql-simple: <1
  resource-pool: <0.5
  text: <3
changelog: "# Change log for postgresql-migration-persistent project\n\n## Version
  1.1.0\nDrop the migration table option,\nthis is already set by the underlying library.\nAdd
  more haddock linking.\n\n## Version 1.0.0\nimport the code\n\n\n## Version 0.0.0
  \n\nimport [template](https://github.com/jappeace/template).\n\n"
changelog-type: markdown
description: "\n> Don't you *ever* trust computers.\n> \n> \\- first rule of programist
  bible.\n\n\nThis library combines [`postgresql-migration`](https://hackage.haskell.org/package/postgresql-migration)
  and [`persistent`](https://hackage.haskell.org/package/persistent),\nfor the common
  use case of:\n1. Run my manually defined migrations.\n2. Check if the schema defined
  in persistent aligns with the database.\n3. If not, rollback and error with the
  migration plan persistent wants to do.\n\n## Usage\n\nIt could for example look
  something like this with katip logging:\n```haskell\nimport PostgreSQL.Migration.Persistent\nimport
  Database.Schema.User()\nimport Database.Schema.Company()\n\nmigrateAll :: Migration\nmigrateAll
  = migrateModels $(discoverEntities)\n\nmain :: IO ()\nmain = do\n  katipConfig <-
  mkKatipConfig \"server\" environment\n  let migDir = \"migrations/up\"\n  let migrationOptions
  = defaultOptions migDir $ \\case\n        Left errmsg -> runContext katipConfig
  $ $logTM AlertS $ logStr errmsg\n        Right infoMsg -> runContext katipConfig
  $ $logTM InfoS $ logStr infoMsg\n\n  result <- runMigrations migrationOptions migrateAll
  rawPool\n  runContext katipConfig $ case result of\n    MigrationConsistent -> $logTM
  InfoS \"migration consistent\"\n    MigrationRollbackDueTo rollback -> do\n      $logTM
  ErrorS $ logStr $ errorMessage rollback\n      error \"invalid migrations\"\n    MigrationLibraryError
  err' -> do\n      $logTM ErrorS $ logStr err'\n      error \"migration library error\"\n
  \   MigrationNotBackedByPg ->\n      error \"app expects pg backing for migrations
  to work\"\n      \n  runMyApp\n```\n\nBy default the migrations are applied in a
  large transaction,\nbut you can modify this behavior by overriding options record,\nfor
  example:\n\n```haskell\nimport Database.PostgreSQL.Simple.Migration qualified as
  Migration\n\nmain = do\n  ...\n  let migrationOptions = defaultOptions migDir $
  \\case\n        Left errmsg -> runContext katipConfig $ $logTM AlertS $ logStr errmsg\n
  \       Right infoMsg -> runContext katipConfig $ $logTM InfoS $ logStr infoMsg\n
  \ let overridenOptions = migrationOptions { pmoMigrationOptions = (pmoMigrationOptions
  migrationOptions ) {Migration.optTransactionControl = Migration.TransactionPerStep
  }}\n```\n\npretty much all options are exposed from the underlying postgresql-migration\nlibrary.\n\n###
  Tools\nEnter the nix shell.\n```\nnix develop\n```\nYou can checkout the makefile
  to see what's available:\n```\ncat makefile\n```\n\n### Running\n```\nmake run\n```\n\n###
  Fast filewatch which runs tests\n```\nmake ghcid\n```\n"
description-type: markdown
hash: 103c16fd865a06c4d71010c5df87501818cf3c875cdb30eab5380b73102f8e39
homepage: https://github.com/jappeace/postgresql-migration-persistent#readme
latest: 1.1.0
license-name: MIT
maintainer: hi@jappie.me
synopsis: A PostgreSQL persistent schema migration utility
test-bench-deps: {}
