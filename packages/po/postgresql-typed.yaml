all-versions:
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.2.1
- 0.4.2.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3.0
- '0.6'
- 0.6.0.1
- 0.6.1.0
- 0.6.1.1
- 0.6.1.2
- 0.6.2.0
- 0.6.2.1
- 0.6.2.2
- 0.6.2.3
- 0.6.2.4
- 0.6.2.5
author: Dylan Simon
basic-deps:
  HDBC: '>=2.2'
  aeson: '>=0.7 && <2.3'
  array: '>=0'
  attoparsec: '>=0.12 && <0.15'
  base: '>=4.8 && <5'
  binary: '>=0'
  bytestring: '>=0.10.2'
  containers: '>=0'
  crypton: '>=0'
  crypton-x509: '>=0'
  crypton-x509-store: '>=0'
  crypton-x509-validation: '>=0'
  data-default: '>=0'
  haskell-src-meta: '>=0'
  memory: '>=0.5'
  network: '>=0'
  old-locale: '>=0'
  postgresql-binary: '>=0.8'
  scientific: '>=0.3'
  template-haskell: '>=0'
  text: '>=1'
  time: '>=0'
  tls: '>=1.7'
  utf8-string: '>=0'
  uuid: '>=1.3'
changelog: ''
changelog-type: ''
description: |
  # Haskell PostgreSQL-typed

  A Haskell PostgreSQL interface that provides type-safety through compile-time (template Haskell) database access.
  See the [Haddock](http://hackage.haskell.org/package/postgresql-typed) documentation in [Database.PostgreSQL.Typed](http://hackage.haskell.org/package/postgresql-typed/docs/Database-PostgreSQL-Typed.html) or the [test cases](test/Main.hs) for simple examples.

  ## Getting started

  ### Installation

  Use your preferred package manager to install or add to your package dependencies:

  - `stack install postgresql-typed` or
  - `cabal install postgresql-typed`

  You'll also likely need to add `network` as a dependency.

  ### Enable ghc extensions

  Make sure you enable `TemplateHaskell`, `QuasiQuotes`, and `DataKinds` language extensions, either in your cabal `default-extensions` or in a `{-# LANGUAGE TemplateHaskell, QuasiQuotes, DataKinds #-}` pragma in your source.

  ### Setup compile-time database connection

  Either set the following environment variables:

  - `TPG_DB` the database name to use (default: same as user)
  - `TPG_USER` the username to connect as (default: `$USER` or `postgres`)
  - `TPG_PASS` the password to use (default: *empty*)
  - `TPG_HOST` the host to connect to (default: `localhost`)
  - `TPG_PORT` or `TPG_SOCK` the port number or local socket path to connect on (default port: `5432`)

  *Or* in your code call `Database.PostgreSQL.Typed.useTPGDatabase` with a database config as a top-level quote in each code file where you have SQL queries.
  It's often helpful to make your own utility function to do this:

  ```haskell
  -- |Call this at top-level at the beginning of every file (rather than 'useTPGDatabase')
  useMyTPGConfig :: Language.Haskell.TH.DecsQ
  useMyTPGConfig = useTPGDatabase PGDatabase{ ... } -- or load config from file
  ```

  ### Setup your database schema

  Your tables and other schema need to be created in your development (compile-time) database before you compile your code.
  No queries will actually be executed, so there does not need to be any data, but it will do query parsing with the database (prepare queries) so any referenced objects must exist.

  ### Setup run-time database connection

  Use `pgConnect` to connect to your database using a `PGDatabase` configuration.
  The run-time database does not need to be the same as the build-time database (though it can be), but it *must* have the same schema.
  It's recommended to use `bracket (pgConnect PGDatabase{..}) pgDisconnect`.
  If you need a pool of connections, consider `resource-pool` (while `PGConnection`s are mostly thread-safe, they can't be used for multiple queries simultaneously).

  ### Complete example

  schema.sql:
  ```sql
  CREATE TABLE thing (id SERIAL PRIMARY KEY, name TEXT NOT NULL);
  ```

  DBConfig.hs:
  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  module DBConfig where

  import qualified Database.PostgreSQL.Typed as PG
  import           Network.Socket (SockAddr(SockAddrUnix))

  myPGDatabase :: PG.PGDatabase
  myPGDatabase = PG.defaultPGDatabase
    { PG.pgDBAddr = if tcp then Left ("localhost", "5432") else Right (SockAddrUnix "/run/postgresql/.s.PGSQL.5432")
    , PG.pgDBUser = "user"
    , PG.pgDBName = "db"
    } where tcp = False
  ```

  Main.hs:
  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE QuasiQuotes #-}
  {-# LANGUAGE TemplateHaskell #-}

  import           Control.Exception (bracket)
  import           Control.Monad (void, unless)
  import           Data.Int (Int32)
  import           Data.Maybe (listToMaybe)
  import qualified Database.PostgreSQL.Typed as PG

  import DBConfig

  PG.useTPGDatabase myPGDatabase

  data Thing = Thing Int32 String
    deriving (Eq)

  createThing :: PG.PGConnection -> Thing -> IO ()
  createThing pg (Thing tid tname) =
    void $ PG.pgExecute pg [PG.pgSQL|INSERT INTO thing (id, name) VALUES (${tid}, ${tname})|]

  lookupThing :: PG.PGConnection -> Int32 -> IO (Maybe Thing)
  lookupThing pg tid = fmap (uncurry Thing) . listToMaybe <$>
    PG.pgQuery pg [PG.pgSQL|SELECT id, name FROM thing WHERE id = ${tid}|]

  main = bracket (PG.pgConnect myPGDatabase) PG.pgDisconnect $ \pg -> do
    let myt = Thing 1 "cat"
    createThing pg myt
    t <- lookupThing pg 1
    unless (t == Just myt) $ fail "wrong thing!"
  ```
description-type: markdown
hash: 8204ae5fc08342da438cc56d09822d181222e2b0a81299a16ce73cb302b5d5ce
homepage: https://github.com/dylex/postgresql-typed
latest: 0.6.2.5
license-name: BSD-3-Clause
maintainer: Dylan Simon <dylan-pgtyped@dylex.net>
synopsis: PostgreSQL interface with compile-time SQL type checking, optional HDBC
  backend
test-bench-deps:
  HDBC: '>=0'
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  convertible: '>=0'
  criterion: '>=0'
  network: '>=0'
  postgresql-typed: '>=0'
  time: '>=0'
  tls: '>=0'
