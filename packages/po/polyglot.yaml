homepage: https://github.com/albertprz/polyglot#readme
changelog-type: ''
hash: 8f302d16715f6fc7d747546b625f304c204f599989371f26828f1c5b55d14ff1
test-bench-deps: {}
maintainer: albertoperez1994@gmail.com
synopsis: Haskell to Purescript & Scala 3 transpiler
changelog: ''
basic-deps:
  bytestring: -any
  extra: '>=1.7.10 && <1.8'
  polyglot: -any
  base: '>=4.7 && <5'
  text: '>=2 && <2.1'
  filepath: '>=1.4.2.2 && <1.5'
  casing: '>=0.1.4.1 && <0.2'
  utility-ht: '>=0.0.16 && <0.1'
  containers: -any
  directory-tree: '>=0.12.1 && <0.13'
  optparse-applicative: '>=0.17.0 && <0.18'
  parallel: '>=3.2.2.0 && <3.3'
  fsnotify: '>=0.3.0.1 && <0.4'
  bookhound: '>=0.1.24 && <0.2'
  directory: '>=1.3.7.0 && <1.4'
all-versions:
- 0.1.1.0
author: Alberto Perez Lopez
latest: 0.1.1.0
description-type: markdown
description: "# polyglot\n\n## Description\n\nCLI tool to transpile Haskell modules
  to several target languages.\n\nThe CLI can convert individual Haskell files as
  well as recursively\nconvert directory trees (or entire projects).\n\nThere are
  a few options available to, for example, \nwatch a file / directory and reactively
  convert it whenever modified,\nas well as to format the output target language files.\n\nAt
  the moment, only parsing of Haskell 98 / 2010 standards along with a subset of GHC
  Syntax Extensions is supported (for example, there is currently no support for either
  Template Haskell or some of the GHC Syntax Extensions, such as GADTs and Type Families).\n\n##
  Usage\n\n```\nUsage: polyglot (-l|--language ARG) (-i|--input ARG) (-o|--output
  ARG) \n                [-f|--format] [-w|--watch] [--clear]\n\n  Compile Haskell
  file(s) into a target language.\n\nAvailable options:\n  -h,--help                Show
  this help text\n  -l,--language ARG        Target language\n  -i,--input ARG           Path
  of input Haskell file or directory\n  -o,--output ARG          Path of output file
  or directory\n  -f,--format              Apply formatter on output file(s)\n  -w,--watch
  \              Watch for changes and convert automatically\n  --clear                  Clear
  the output directory contents before conversion\n\nSupported languages: Purescript,
  Scala\n```\n\n## Details\n\nThis CLI tool aims to perform a one-to-one mapping between
  Haskell and target language constructs.\nThis can be done in most cases, because
  all of the available target languages support many of Haskell key features that
  are not necessarily available in other mainstream languages, such as Higher Kinded
  Types, Typeclasses, GADTs & Higher Rank Polymorphism.\n\nHowever, the conversion
  can be lossy, so some information can be lost in the process. At the same time,
  it can be necessary to provide some extra information in the target language version
  of the source file (most prominently (type / kind) signatures, due to less powerful
  type inference mechanisms than Hindley-Millner in the target language).\n\nThe resulting
  files will have a dependency on some kind of prelude library that will expose all
  of the usual functions, data types, type classes and instances included in the Haskell
  prelude.\n\nAlso, bear in mind that in some cases due to different call semantics
  (lazy or call-by-need vs strict) and also runtime support for features (such as
  tail call optimization), the resulting files in the target language will probably
  need on some cases to be manually adapted post conversion, to preserve or approximate
  to the original Haskell code runtime characteristics.\n\nIn any case, it can be
  helpful to check the output files and manually adapt them as desired, because many
  Haskell idioms may not be the best match in the target language (This can be specially
  the case for languages that are not in the ML family (such as Scala)). \n\n\n##
  Examples\n\n\nSample Haskell snippet:\n\n```haskell\n\ndata Language\n  = Purescript\n
  \ | Scala\n  deriving (Bounded, Enum, Eq, Ord, Show)\n\nparserOption :: Bookhound.Parser
  a -> Options.Applicative.Mod Options.Applicative.OptionFields a -> Parser a\nparserOption
  parser = option $ eitherReader $ reader\n  where\n    reader = mapLeft show . Bookhound.runParser
  parser . pack\n\n```\n\nConverted Purescript output (after formatting):\n\n```purescript\n\ndata
  Language\n  = Purescript\n  | Scala\nderive instance Bounded Language\nderive instance
  Enum Language\nderive instance Eq Language\nderive instance Ord Language\nderive
  instance Show Language\n\nparserOption :: forall a. Bookhound.Parser a -> Options.Applicative.Mod
  Options.Applicative.OptionFields a -> Parser a\nparserOption parser = option $ eitherReader
  $ reader\n  where\n    reader = mapLeft show <<< Bookhound.runParser parser <<<
  pack\n\n```\n\nSample Haskell snippet:\n\n```haskell\n\naction :: (ParseError ->
  IO ()) -> Opts -> IO ()\naction errorAction Opts{language, sourcePath, targetPath,
  autoFormat} =\n  readFileUtf8 sourcePath\n  >>= (pack <<$>>) . traverse format .
  toTargetLanguage language\n  >>= either errorAction createDirAndWriteFile\n\n  where\n
  \   createDirAndWriteFile x = createDirectoryIfMissing True finalDir *>\n                              writeFileUtf8
  finalPath x\n    finalDir                = takeDirectory finalPath\n    finalPath
  \              = pathToLanguage language targetPath'\n\n    targetPath' = if isDir
  targetPath then\n                    replaceFileName targetPath (takeFileName sourcePath)\n
  \                 else\n                    targetPath\n\n    format      = if autoFormat
  then\n                    readProcess (formatterExec language)\n                                [\"--stdin\",
  finalPath]\n                  else\n                    pure\n\n```\n\nConverted
  Scala output (after formatting):\n\n```scala\n\ndef action(x: ParseError => IO[Unit])(y:
  Opts): IO[Unit] =\n  (x, y) match\n    case (errorAction, Opts(language, sourcePath,
  targetPath, autoFormat)) =>\n      def createDirAndWriteFile =\n        createDirectoryIfMissing(true)(finalDir)
  *> writeFileUtf8(finalPath)(x)\n      def finalDir =\n        takeDirectory(finalPath)\n
  \     def finalPath =\n        pathToLanguage(language, targetPath$)\n      def
  targetPath$ =\n        if isDir(targetPath) then\n          replaceFileName(targetPath)(takeFileName(sourcePath))\n
  \       else targetPath\n      def format =\n        if autoFormat then\n          readProcess(formatterExec(language))(List(\"--stdin\",
  finalPath))\n        else pure\n\n      readFileUtf8(sourcePath)\n      >>= (pack
  <<&>> _) ^ traverse(format) ^ toTargetLanguage(language)\n      >>= either(errorAction)(createDirAndWriteFile)\n\n```\n\n\n##
  Supported GHC Syntax Extensions\n\n``` yaml\n\n# Syntax Sugar\n- LambdaCase\n- MultiWayIf\n-
  PostfixOperators\n\n# Types\n- RankNTypes\n- ExplicitForAll\n- ScopedTypeVariables\n\n#
  Records\n- DuplicateRecordFields\n- NoFieldSelectors\n- NamedFieldPuns\n- RecordWildCards\n-
  OverloadedRecordDot\n\n# Type Classes\n- ConstrainedClassMethods\n- MultiParamTypeClasses\n\n#
  Deriving \n- StandaloneDeriving\n- DerivingVia\n- NewTypeDeriving\n- AnyClassDeriving\n-
  DerivingStrategies\n\n```\n"
license-name: BSD-3-Clause
