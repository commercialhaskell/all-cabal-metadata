all-versions:
- '0.1'
author: Nikita Volkov <nikita.y.volkov@mail.ru>
basic-deps:
  QuickCheck: '>=2.14 && <2.16'
  charset: ^>=0.3.12
  containers: '>=0.6 && <0.9'
  megaparsec: '>=9.2.1 && <10.0'
  postgresql-connection-string: '>=0'
  text: '>=1.2 && <3'
  text-builder: '>=1 && <1.1'
changelog: |
  # 0.1.0.0

  Initial release of postgresql-connection-string as a standalone library.

  This library was extracted from the hasql project to provide a focused, reusable component for parsing and constructing PostgreSQL connection strings.

  ## Features

  - Parse PostgreSQL connection URIs (`postgresql://` and `postgres://` schemes)
  - Parse keyword/value format connection strings
  - Construct connection strings programmatically using composable combinators
  - Convert between URI and keyword/value formats
  - Support for multiple host specifications (for failover/load balancing)
  - Automatic percent-encoding/decoding of special characters
  - Type-safe representation with `ConnectionString` data type

  ## API

  ### Constructors
  - `hostAndPort` - Specify a host and optional port
  - `user` - Set the username
  - `password` - Set the password
  - `dbname` - Set the database name
  - `param` - Add a connection parameter

  ### Accessors
  - `toHosts` - Get list of hosts and ports
  - `toUser` - Get username
  - `toPassword` - Get password
  - `toDbname` - Get database name
  - `toParams` - Get parameter map

  ### Rendering
  - `toUrl` - Convert to URI format
  - `toKeyValueString` - Convert to keyword/value format

  ### Parsing
  - `parseText` - Parse from Text with error reporting
  - `parserOf` - Get the underlying Megaparsec parser

  ### Transformations
  - `interceptParam` - Extract and remove a parameter
changelog-type: markdown
description: "# postgresql-connection-string\n\n[![Hackage](https://img.shields.io/hackage/v/postgresql-connection-string.svg)](https://hackage.haskell.org/package/postgresql-connection-string)\n[![Continuous
  Haddock](https://img.shields.io/badge/haddock-master-blue)](https://nikita-volkov.github.io/postgresql-connection-string/)\n\nA
  Haskell library for parsing and constructing PostgreSQL connection strings.\n\n##
  Overview\n\nThis library provides a type-safe way to work with PostgreSQL connection
  strings, supporting both the URI format and the keyword/value format as specified
  in the [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).\n\n##
  Features\n\n- **URI Format Parsing**: Parse `postgresql://` and `postgres://` URIs\n-
  **Keyword/Value Format**: Convert to PostgreSQL's keyword/value connection string
  format\n- **Type-Safe Construction**: Build connection strings using composable
  constructors\n- **Percent-Encoding**: Automatic handling of special characters in
  connection string components\n- **Multiple Hosts**: Support for multiple host specifications
  (for failover/load balancing)\n- **Query Parameters**: Full support for connection
  parameters as query strings\n\n## Usage\n\n### Parsing Connection Strings\n\n```haskell\nimport
  PostgresqlConnectionString\n\n-- Parse a URI format connection string\ncase parseText
  \"postgresql://user:password@localhost:5432/mydb?application_name=myapp\" of\n  Left
  err -> putStrLn $ \"Parse error: \" <> err\n  Right connStr -> do\n    print $ toUser
  connStr        -- Just \"user\"\n    print $ toDbname connStr      -- Just \"mydb\"\n
  \   print $ toHosts connStr       -- [(\"localhost\", Just 5432)]\n```\n\n### Constructing
  Connection Strings\n\n```haskell\nimport PostgresqlConnectionString\n\n-- Build
  a connection string using combinators\nlet connStr = mconcat\n      [ user \"myuser\"\n
  \     , password \"secret\"\n      , hostAndPort \"localhost\" (Just 5432)\n      ,
  dbname \"mydb\"\n      , param \"application_name\" \"myapp\"\n      , param \"connect_timeout\"
  \"10\"\n      ]\n\n-- Convert to URI format\nprint $ toUrl connStr\n-- \"postgresql://myuser:secret@localhost:5432/mydb?application_name=myapp&connect_timeout=10\"\n\n--
  Convert to keyword/value format\nprint $ toKeyValueString connStr\n-- \"host=localhost
  port=5432 user=myuser password=secret dbname=mydb application_name=myapp connect_timeout=10\"\n```\n\n###
  Multiple Hosts\n\n```haskell\n-- Support for multiple hosts (failover/load balancing)\nlet
  connStr = mconcat\n      [ hostAndPort \"host1\" (Just 5432)\n      , hostAndPort
  \"host2\" (Just 5433)\n      , dbname \"mydb\"\n      ]\n\nprint $ toUrl connStr\n--
  \"postgresql://host1:5432,host2:5433/mydb\"\n```\n\n### Accessing Components\n\n```haskell\n--
  Extract individual components\ntoHosts :: ConnectionString -> [(Text, Maybe Word16)]\ntoUser
  :: ConnectionString -> Maybe Text\ntoPassword :: ConnectionString -> Maybe Text\ntoDbname
  :: ConnectionString -> Maybe Text\ntoParams :: ConnectionString -> Map Text Text\n```\n\n###
  Transforming Connection Strings\n\n```haskell\n-- Intercept and remove a parameter\ncase
  interceptParam \"application_name\" connStr of\n  Just (value, updatedConnStr) ->
  \n    -- value is the parameter value, updatedConnStr has it removed\n    processAppName
  value\n  Nothing -> \n    -- Parameter not found\n    useDefault\n```\n\n## Installation\n\nAdd
  to your `package.yaml` or `.cabal` file:\n\n```yaml\ndependencies:\n  - postgresql-connection-string\n```\n\nOr
  with cabal:\n\n```cabal\nbuild-depends:\n  postgresql-connection-string\n```\n\n##
  Requirements\n\n- GHC 8.10 or later\n- Standard Haskell dependencies (see cabal
  file)\n\n## Related Projects\n\nThis library was extracted from the [hasql](https://github.com/nikita-volkov/hasql)
  project to provide a standalone connection string parser and builder that can be
  used independently of the full hasql ecosystem.\n\n## License\n\nMIT License - see
  LICENSE file for details.\n\n## Contributing\n\nContributions are welcome! Please
  feel free to submit pull requests or open issues on GitHub.\n"
description-type: markdown
hash: f897f82fd54d8d2f8d77a686f7afa9a6b907a3a1968df2656f0a4dd12780ca05
homepage: https://github.com/nikita-volkov/postgresql-connection-string
latest: '0.1'
license-name: MIT
maintainer: Nikita Volkov <nikita.y.volkov@mail.ru>
synopsis: PostgreSQL connection string type, parser and builder
test-bench-deps:
  QuickCheck: '>=2.14 && <2.16'
  containers: '>=0.6 && <0.9'
  hspec: ^>=2.11.12
  postgresql-connection-string: '>=0'
  quickcheck-classes: '>=0.6.5 && <0.7'
  text: '>=1.2 && <3'
