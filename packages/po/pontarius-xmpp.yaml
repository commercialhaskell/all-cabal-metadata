all-versions:
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
- 0.0.5.0
- 0.0.6.0
- 0.0.7.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.1.0
- 0.4.2.0
- 0.4.2.1
- 0.4.2.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.6
- 0.5.6.1
- 0.5.6.2
- 0.5.6.3
- 0.5.6.4
- 0.5.6.5
- 0.5.6.6
- 0.5.6.7
- 0.5.6.8
- 0.5.7.0
- 0.5.7.1
author: Philipp Balzarek
basic-deps:
  attoparsec: '>=0.10.0.3'
  base: '>4 && <5'
  base64-bytestring: '>=0.1.0.0'
  binary: '>=0.4.1'
  bytestring: '>=0.9.1.9'
  conduit: '>=1.3 && <1.4'
  containers: '>=0.4.0.0'
  crypto-api: '>=0.9'
  cryptohash: '>=0.6.1'
  cryptohash-cryptoapi: '>=0.1'
  crypton-x509-system: '>=1.4'
  data-default: '>=0.2'
  dns: '>=3.0'
  exceptions: '>=0.6'
  hslogger: '>=1.1.0'
  iproute: '>=1.2.4'
  lens: '>=0'
  lens-family: '>=0'
  lifted-base: '>=0.1.0.1'
  mtl: '>=2.0.0.0'
  network: '>=2.3.1.0'
  profunctors: '>=4'
  pureMD5: '>=2.1.2.1'
  random: '>=1.0.0.0'
  resourcet: '>=0.3.0'
  split: '>=0.1.2.3'
  stm: '>=2.4'
  stringprep: '>=1.0.0'
  template-haskell: '>=2.5'
  text: '>=0.11.1.5'
  tls: '>=1.3.9'
  transformers: '>=0.3'
  unbounded-delays: '>=0.1'
  void: '>=0.5.5'
  xml-conduit: '>=1.1.0.7'
  xml-picklers: '>=0.3.3'
  xml-types: '>=0.3.1'
changelog: |
  # 0.5.1 to 0.6.0
  * Changed roster update callback to take RosterUpdate type
  * Added onrosterPushL lens
  * Removed legacy `crypto-random` (this caused issues when compiling with GHC 9.2.5)

  # 0.5.0 to 0.5.1
  * Fixed input logger choking on long non-ascii messages

  # 0.4.5 to 0.5.0
  * Support for the session element is now determined from stream features, the
    establishSession option was removed
  * The parser can now handle nonzas. Nonzas can be handled with a plugin
  * An initial roster can now be set with the initialRoster session configuration
    option
  * The JID parser can now handle "/" and "@" characters in the resource part
changelog-type: markdown
description: |
  Pontarius XMPP
  ==============

  Pontarius XMPP is a Haskell XMPP client library that implements the capabilities
  of [RFC 6120 ("XMPP CORE")](http://tools.ietf.org/html/rfc6120), [RFC 6121
  ("XMPP IM")](http://tools.ietf.org/html/rfc6121), and [RFC 6122 ("XMPP
  ADDR")](http://tools.ietf.org/html/rfc6122). Pontarius XMPP was part of the
  Pontarius project, an effort to produce free and open source, uncentralized, and
  privacy-aware software solutions.

  While in alpha, Pontarius XMPP works quite well and fulfills most requirements
  of the RFCs.

  Prerequisites
  -------------

  Pontarius XMPP requires GHC 7.0, or later.

  You will need the ICU Unicode library and it's header files in order to be able
  to build Pontarius XMPP. On Debian, you will need to install the *libicu-dev*
  package. In Fedora, the package is called *libicu-devel*.

  _Note to users of GHC 7.0 and GHC 7.2:_ You will need *cabal-install*, version
  *0.14.0* or higher, or the build will fail with an "unrecognized option:
  --disable-benchmarks" error. The versions *1.16.0* and higher might not build on
  your system; if so, install *0.14.0* with "cabal install cabal-install-0.14.0".

  _Note to users of GHC 7.2.1:_ Due to a bug, recent versions of the *binary*
  package wont build without running "ghc-pkg trust base".

  _Note to users of GHC 7.0.1:_ You will want to configure your Cabal environment
  (including *cabal-install*) for version *0.9.2.1* of *bytestring*.

  Getting started
  ---------------

  The latest release of Pontarius XMPP, as well as its module API pages, can
  always be found at [the Pontarius XMPP Hackage
  page](http://hackage.haskell.org/package/pontarius-xmpp/).

  _Note:_ Pontarius XMPP is still in its Alpha phase. Pontarius XMPP is not yet
  feature-complete, it may contain bugs, and its API may change between versions.

  The first thing to do is to import the modules that we are going to use. We are
  also using the OverloadedStrings LANGUAGE pragma in order to be able to type
  <code>Text</code> values like strings.

      {-# LANGUAGE OverloadedStrings #-}

      import Network.Xmpp

      import Control.Monad
      import Data.Default
      import System.Log.Logger

  Pontarius XMPP supports [hslogger](http://hackage.haskell.org/package/hslogger)
  logging. Start by enabling console logging.

      updateGlobalLogger "Pontarius.Xmpp" $ setLevel DEBUG

  When this is done, a <code>Session</code> object can be acquired by calling
  <code>session</code>. This object will be used for interacting with the library.

      result <- session
                   "example.com"
                    (Just (\_ -> ( [scramSha1 "username" Nothing "password"])
                                 , Nothing))
                    def

  The three parameters above are the XMPP server realm, a SASL handler (for
  authentication), and the session configuration settings (set to the default
  settings). <code>session</code> will perform the necessary DNS queries to find
  the address of the realm, connect, establish the XMPP stream, attempt to secure
  the stream with TLS, authenticate, establish a concurrent interface for
  interacting with the stream, and return the <code>Session</code> object.

  The return type of <code>session</code> is <code>IO (Either XmppFailure
  Session)</code>. As <code>XmppFailure</code> is an
  <code>Control.Monad.Error</code> instance, you can utilize the
  <code>ErrorT</code> monad transformer for error handling. A more simple way of
  doing it could be doing something like this:

      sess <- case result of
                  Right s -> return s
                  Left e -> error $ "XmppFailure: " ++ (show e)

  Next, let us set our status to Online.

      sendPresence def sess

  Here, <code>def</code> refers to the default <code>Presence</code> value, which
  is the same as <code>Presence Nothing Nothing Nothing Nothing Available
  []</code>.

  Now, let's say that we want to receive all message stanzas, and echo the stanzas
  back to the sender. This can be done like so:

      forever $ do
          msg <- getMessage sess
          case answerMessage msg (messagePayload msg) of
              Just answer -> sendMessage answer sess
              Nothing -> putStrLn "Received message with no sender."

  You don't need to worry about escaping your <code>Text</code> values - Pontarius
  XMPP (or rather, [xml-picklers](https://github.com/Philonous/xml-picklers)) will
  take care of that for you.

  Additional XMPP threads can be created using <code>dupSession</code> and
  <code>forkIO</code>.

  For a public domain example of a simple Pontarius XMPP (Cabal) project, refer to
  the examples/echoclient directory.
description-type: markdown
hash: 9c2d98cf418c67a6b8c8feb7ac35856da579ce39e347f611fbd46e2d11dcda14
homepage: https://github.com/l29ah/pontarius-xmpp/
latest: 0.5.7.1
license-name: BSD-3-Clause
maintainer: l29ah@cock.li
synopsis: An XMPP client library
test-bench-deps:
  Cabal: '>=0'
  HUnit: '>=0'
  QuickCheck: '>=0'
  async: '>=0'
  attoparsec: '>=0.10.0.3'
  base: '>4 && <5'
  base64-bytestring: '>=0.1.0.0'
  binary: '>=0.4.1'
  bytestring: '>=0.9.1.9'
  conduit: '>=1.3 && <1.4'
  configurator: '>=0'
  containers: '>=0.4.0.0'
  criterion: '>=0'
  crypto-api: '>=0.9'
  cryptohash: '>=0.6.1'
  cryptohash-cryptoapi: '>=0.1'
  crypton-x509-system: '>=1.4'
  data-default: '>=0.2'
  directory: '>=0'
  dns: '>=3.0'
  exceptions: '>=0.6'
  filepath: '>=0'
  generic-arbitrary: '>=0'
  hslogger: '>=1.1.0'
  hspec: '>=0'
  hspec-expectations: '>=0'
  iproute: '>=1.2.4'
  lens: '>=0'
  lens-family: '>=0'
  lifted-base: '>=0.1.0.1'
  mtl: '>=2.0.0.0'
  network: '>=2.3.1.0'
  pontarius-xmpp: '>=0'
  profunctors: '>=4'
  pureMD5: '>=2.1.2.1'
  quickcheck-instances: '>=0'
  random: '>=1.0.0.0'
  ranges: '>=0'
  resourcet: '>=0.3.0'
  smallcheck: '>=0'
  split: '>=0.1.2.3'
  stm: '>=2.4'
  stringprep: '>=1.0.0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  tasty-th: '>=0'
  template-haskell: '>=2.5'
  text: '>=0.11.1.5'
  tls: '>=1.3.9'
  transformers: '>=0.3'
  unbounded-delays: '>=0.1'
  void: '>=0.5.5'
  xml-conduit: '>=1.1.0.7'
  xml-picklers: '>=0.3.3'
  xml-types: '>=0.3.1'
