all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
- 0.2.1.0
author: Jonathan Fischoff
basic-deps:
  base: '>=4.7 && <5'
  network: '>=0'
changelog: |
  # Changelog for wait-on-port
  - 0.0.0.1 First version

  - 0.2.0.0 Rework internals and change `EventHandlers` to `EventHandlers m`. Fix bug if host could not be found. It would loop forever and now throws.
changelog-type: markdown
description: |-
  # port-utils

  ## openFreePort

  This is another version of `warp`'s `openFreePort` function. This function has fewer dependencies than the `warp` version.

  `openFreePort` returns a socket on a random port and the port it has been bound to.

  ```haskell
  openFreePort :: IO (Int, Socket)
  ```

  ## wait

  `wait` will attempt to connect to a host and port until it is successful. Between each unsuccessful attempt, it sleeps for 10 ms.

  Here is an example of the primary function:

  ```haskell
  import Network.Socket.Wait (wait)

  void $ forkIO $ Warp.run 7000 app
  -- Wait for the server to start listening on the socket
  wait "127.0.0.1" 7000
  -- Communicate with the server
  ...
  ```

  In bash one could write:

  ```bash
  while ! nc -z localhost 7000 ; do sleep 0.01 ; done
  ```

  The bash script above was copied from this stackoverflow answer https://stackoverflow.com/a/50008755
description-type: markdown
hash: 0e7cdb91e40cadedc528260bd5919414876c6f9eb250f9f54ace9fe7a12384ab
homepage: https://github.com/jfischoff/port-utils#readme
latest: 0.2.1.0
license-name: BSD-3-Clause
maintainer: jonathangfischoff@gmail.com
synopsis: Utilities for creating and waiting on ports
test-bench-deps:
  async: '>=0'
  base: '>=4.7 && <5'
  hspec: '>=0'
  network: '>=0'
  port-utils: '>=0'
  stm: '>=0'
  transformers: '>=0'
