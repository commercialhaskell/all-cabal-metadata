all-versions:
- 1.0.0
author: Jens-Ulrik Petersen
basic-deps:
  base: '>=0'
  directory: '>=0'
  haskell98: '>=0'
  unix: '>=0'
changelog: "2002-01-25  Jens Petersen  <juhp@01.246.ne.jp>\n\n\t* popenhs.spec.in:
  Tidied up.  Use rpm macros.\n\n\t* index.html: Update for new release.\n\n\t* README:
  Update for 1.00.0.\n\n\t* NEWS: Add entries for 1.00.0 and 0.00.1.\n\n\t* Makefile.am
  (bin_SCRIPTS): Use PACKAGE.\n\t(pkglibdir): Use automake vars.\n\t(EXTRA_DIST):
  Add spec file.\n\t(rpm, web): New rules from hsclock.  Use automake vars.\n\n\t*
  POpen.hs: Export popen and popenEnvDir now.\n\tImport hPutStr, hClose, fromJust,
  isJust and when.\n\t(popen): New wrapper function replacing popen2 and popen3 wrapper.\n\tMaybe
  takes additional arg for input string and no longer returns\n\tinput handle.\n\t(popenEnvDir):
  New function replacing popenOutErr and\n\tpopenInOutErr. Maybe takes additional
  arg for input string and no\n\tlonger returns input handle.  When there is input,
  create input\n\tpipe, write input string to it and close the pipe input handle.\n\tAfter
  forking, close pipe output fd in original process if there\n\twas input.  This fixes
  the problem reported by Uwe <> that popen3\n\twas hanging on input from a pipe with
  closed input.\n\t(doTheBusiness): Maybe takes input fd, and no longer returns input\n\thandle.
  \ dupTo instead of mayDup2, since we always redirect.  Only\n\tdup2 input when given
  input.  Replace code after execFile to keep\n\ttype-system happy with a error instead.\n\t(maybeDup2):
  Removed, since no longer needed.\n\n\t* configure.in: Up version to 1.00.0\n\n2001-10-05
  \ Jens Petersen  <juhp@01.246.ne.jp>\n\n\t* popen.spec.in: new file, based on gtk+hs.spec.in\n\n\t*
  configure.in: use autoconf\n\n\t* Makefile.in: from Makefile\n\n\t* Makefile.am:
  use automake\n\n\t* acinclude.m4: was aclocal.m4\n\n"
changelog-type: text
description: |
  popenhs is a small Haskell library that provides a
  convenient way of sending string input to a subprocess and
  reading output lazily.  The code is based on runProcess from
  the hslibs posix library.  (It is also an example of how to
  use automake in haskell packages.)

  It provides two functions popen and popenEnvDir.

  * popen gives lazy output and error streams from a
  subprocess command, and optionally can direct input from a
  string to the process.

  * popenEnvDir in addition lets specify environment and
  directory in which to run the subprocess command.


  Building should be straightforward.  See the generic INSTALL
  file and "./configure --help" for more details.

  * run "./configure"

  * then "make"

  * and "make install"

  For applications using popenhs, a helper program
  "popenhs-config" is provided that can be used in Makefile's
  for example to get the correct compile and link options.
  "popenhs-config --help" gives more information.
description-type: text
hash: e231effe5fcbe1af89f8f2c995e591ecad446bf895d78cd7cd3ade495bd47f8b
homepage: http://www.haskell.org/~petersen/haskell/popenhs/
latest: 1.0.0
license-name: LicenseRef-GPL
maintainer: Jens-Ulrik Petersen <juhp@01.246.ne.jp>
synopsis: popenhs is a popen-like library for Haskell.
test-bench-deps: {}
