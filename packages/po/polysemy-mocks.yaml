all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
author: Akshay Mankar
basic-deps:
  base: '>=4.7 && <5'
  polysemy: '>=1.7'
  template-haskell: '>=0'
changelog: |
  # Changelog for polysemy-mocks

  ## 0.3.1.0

  * Support template-haskell-2.18.0 (and so GHC 9.2).
  * Test compatibility with GHC 9.4.

  ## 0.3.0.0

  * Support template-haskell-2.17.0 (and so GHC 9.0).
  * Add 'HasCallStack' constraint to 'evalMocks', {run,eval,exec}Mock and default
    implementations for the "returns" functions (which throws error, by default).
    'RankNTypes' is now needed to use the TH mocks.

  ## 0.2.0.0

  * Support polysemy >= 1.7, drop support for older versions.

  ## 0.1.0.1

  * Better docs.

  ## 0.1.0.0

  * First release. Can mock effects.
changelog-type: markdown
description: |
  # Polysemy Mocks

  ## Overview

  `polysemy-mocks` aims to provide a structure to write all mocks for polysemy and to generate those.

  ## Example

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE FlexibleContexts #-}
  {-# LANGUAGE FlexibleInstances #-}
  {-# LANGUAGE GADTs #-}
  {-# LANGUAGE LambdaCase #-}
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE RankNTypes #-}
  {-# LANGUAGE ScopedTypeVariables #-}
  {-# LANGUAGE TemplateHaskell #-}
  {-# LANGUAGE TypeApplications #-}
  {-# LANGUAGE TypeFamilies #-}
  {-# LANGUAGE TypeOperators #-}

  module TeletypeSpec where

  import Data.Kind
  import Polysemy
  import Polysemy.Internal (send)
  import Test.Hspec
  import Test.Polysemy.Mock
  import Test.Polysemy.Mock.TH (genMock)
  import Prelude hiding (read)

  data Teletype (m :: Type -> Type) a where
    Read :: Teletype m String
    Write :: String -> Teletype m ()

  makeSem ''Teletype

  genMock ''Teletype

  program :: Member Teletype r => Sem r ()
  program = do
    write "Name: "
    name <- read
    write $ "Hello " <> name

  spec :: Spec
  spec =
    describe "program" $ do
      it "greets" $ runM @IO . evalMock $ do
        mockReadReturns (pure "Akshay")
        mock @Teletype @IO program
        writes <- mockWriteCalls
        embed $ writes `shouldBe` ["Name: ", "Hello Akshay"]
  ```
description-type: markdown
hash: 39662ab2b08ea8479a328d3bd575a9a834f9298271c7df301be4d96964144b87
homepage: https://github.com/akshaymankar/polysemy-mocks#readme
latest: 0.3.1.0
license-name: BSD-3-Clause
maintainer: itsakshaymankar@gmail.com
synopsis: Mocking framework for polysemy effects
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=0'
  polysemy: '>=1.7'
  polysemy-mocks: '>=0'
