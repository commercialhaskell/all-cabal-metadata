homepage: https://github.com/andrewthad/posix-api
changelog-type: markdown
hash: 6496045cd9862ca529823120031402a4349ef5c39815a802dca5308e3779186e
test-bench-deps:
  base: -any
  posix-api: -any
  primitive-unlifted: -any
  tasty-hunit: -any
  tasty: -any
  primitive: '>=0.7'
maintainer: andrew.thaddeus@gmail.com
synopsis: posix bindings
changelog: |
  # Changelog
  All notable changes to this project will be documented in this file.

  The format is inspired by [Keep a Changelog](http://keepachangelog.com/en/1.0.0/).
  This changelog deviates from the recommendation by not grouping changes into
  added, changed, deprecated, etc. subsections.

  This project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## [0.3.5.0] - 2020-??-??

  - Breaking: Start using pattern synonyms for macros.
  - Add dedicated modules for peeking at structures.
  - Make compatible with GHC 8.10 by changing the way ArrayArray# is handled
    on the C side of the FFI.
  - Add `uninterruptibleSetSocketOption`.
  - Add socket options `SO_BINDTODEVICE` and `SO_REUSEADDR`.

  ## [0.3.4.0] - 2020-03-09

  - Add `Posix.File`
  - Add lower bound for `hsc2hs` build tool

  ## [0.3.3.0] - 2019-12-18

  - Support several POSIX message queue functions.
  - Support Linux systemd functions.

  ## [0.3.2.0] - 2019-07-21

  - Add more functions.

  ## [0.3.1.0] - YYYY-MM-DD

  - Make the test suite build again.
  - Add `uninterruptibleSendByteArrays`.

  ## [0.1.0.0] - 2018-01-02
  - Initial release.
  - Includes a ton of sockets API stuff.
  - Includes the get working directory function.
basic-deps:
  primitive-addr: '>=0.1 && <0.2'
  base: '>=4.11.1 && <5'
  run-st: '>=0.1.1 && <0.2'
  primitive-offset: '>=0.2 && <0.3'
  primitive-unlifted: '>=0.1 && <0.2'
  byteslice: '>=0.1.3 && <0.3'
  primitive: '>=0.7 && <0.8'
  byte-order: '>=0.1.2 && <0.2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.2.0
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
author: Andrew Martin
latest: 0.3.5.0
description-type: markdown
description: |+
  # posix-api

  ## Objective

  This library provides minimal bindings to system calls for POSIX-compliant
  operating systems. All functions follow these design decisions:

  * `String` is not used anywhere. `ByteArray` (from `primitive`) is used for
    serialized data. It is also used in certain filesystem function variants
    used in contexts where the paths are only ever handed over to other
    filesystem functions. `Addr` (from `primitive`) is used for pointers to
    data whose type is unknown. `Ptr` is used for pointers to data whose type
    is known.
  * Functions should not throw errors. This library uses `IO (Either Errno a)`
    in places where some libraries would use `IO a`.
  * The numeric types from `Foreign.C.Types` and `System.Posix.Types` are
    used in the type signatures of functions so that a haskell function's
    type signature matches its underlying POSIX equivalent exactly.
  * Flags are newtypes over `CInt` (or whatever integral type matches the
    posix specification) rather than enumerations. The data constructors
    are exported, making the types extensible for operating system that
    have additional flags.
  * There is some platform-specific code in this library. POSIX-specified data
    structures do not have the same in-memory representation on all platforms.
    Consequently, some of the code to serialize data to its C-struct
    representation must be written differently on different platforms.
    This is seldom needed. A viable alternative would be using the FFI
    to perform this serialization. However, the approach of using
    per-platform haskell code lets the serialization code inline better.

  Pull requests that add bindings to POSIX APIs in a way that agrees
  with these guidelines will be accepted. Unfortunately, there is some
  grey area when it comes to what a "minimal binding" to a function
  is. Discussion may sometimes be necessary to refine the guidelines.

  ## Build Instructions

  This library relies on a currently-unreleased version of `hsc2hs` in
  order to build. In order to try out this library, try:

  ```
  ~/dev $ git clone https://github.com/haskell/hsc2hs
  ~/dev $ cd hsc2hs
  ~/dev/hsc2hs $ cabal install
  ~/dev/hsc2hs $ cd ..
  ~/dev $ git clone https://github.com/andrewthad/posix-api
  ~/dev $ cd posix-api
  ~/dev/posix-api $ cabal new-build --with-hsc2hs=~/.cabal/bin/hsc2hs
  ```

  This will build `posix-api` with the unreleased version of the `hsc2hs`
  tool.

  ## Infelicities

  This project currently includes some Linux-specific code. It in the
  the `Linux.Socket`. The plan is to eventually move the `Linux.Socket` module
  into its own library. Currently, a ton of POSIX APIs are missing.
  These should be included.

license-name: BSD-3-Clause
