homepage: https://github.com/andrewthad/posix-api
changelog-type: markdown
hash: 19d81057b136530446cf94e866c410dd6557a93e1e9a1f529933e8c8aafe4ae1
test-bench-deps:
  base: -any
  posix-api: -any
  primitive-unlifted: -any
  tasty-hunit: -any
  tasty: -any
  primitive: '>=0.7'
maintainer: andrew.thaddeus@gmail.com
synopsis: posix bindings
changelog: |
  # Changelog
  All notable changes to this project will be documented in this file.

  The format is inspired by [Keep a Changelog](http://keepachangelog.com/en/1.0.0/).
  This changelog deviates from the recommendation by not grouping changes into
  added, changed, deprecated, etc. subsections.

  This project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## [0.6.1.0] - 2023-08-14

  - Add `uninterruptibleWriteBytesCompletelyErrno`
  - Add `writeBytesCompletelyErrno`
  - Add `uninterruptibleAccept4_`

  ## [0.6.0.1] - 2023-07-13

  - Fix mistake in header file that caused builds to fail

  ## [0.6.0.0] - 2023-07-13

  - Use Int instead of CInt for all offsets into byte arrays

  ## [0.5.0.0] - 2023-07-13

  - Move Linux.Systemd to systemd-api library to make docs build on hackage.

  ## [0.4.0.1] - 2023-06-27

  - Build with GHC 9.4

  ## [0.4.0.0] - 2022-12-08

  - Add `writeMutableByteArray`
  - In the 0.3.5.0 release, the major version was supposed to be bumped.
    This is being done now instead.

  ## [0.3.5.0] - 2021-07-02

  - Breaking: Start using pattern synonyms for macros.
  - Add dedicated modules for peeking at structures.
  - Make compatible with GHC 8.10 by changing the way ArrayArray# is handled
    on the C side of the FFI.
  - Add `uninterruptibleSetSocketOption`.
  - Add socket options `SO_BINDTODEVICE` and `SO_REUSEADDR`.

  ## [0.3.4.0] - 2020-03-09

  - Add `Posix.File`
  - Add lower bound for `hsc2hs` build tool

  ## [0.3.3.0] - 2019-12-18

  - Support several POSIX message queue functions.
  - Support Linux systemd functions.

  ## [0.3.2.0] - 2019-07-21

  - Add more functions.

  ## [0.3.1.0] - YYYY-MM-DD

  - Make the test suite build again.
  - Add `uninterruptibleSendByteArrays`.

  ## [0.1.0.0] - 2018-01-02
  - Initial release.
  - Includes a ton of sockets API stuff.
  - Includes the get working directory function.
basic-deps:
  primitive-addr: '>=0.1 && <0.2'
  text-short: '>=0.1.5'
  base: '>=4.17.1 && <5'
  run-st: '>=0.1.1 && <0.2'
  primitive-offset: '>=0.2 && <0.3'
  primitive-unlifted: '>=2.0 && <2.2'
  byteslice: '>=0.2.10 && <0.3'
  primitive: '>=0.7 && <0.10'
  byte-order: '>=0.1.2 && <0.2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.2.0
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.6.0.1
- 0.6.1.0
author: Andrew Martin
latest: 0.6.1.0
description-type: markdown
description: |+
  # posix-api

  ## Objective

  This library provides minimal bindings to system calls for POSIX-compliant
  operating systems. All functions follow these design decisions:

  * `String` is not used anywhere. `ByteArray` (from `primitive`) is used for
    serialized data. It is also used in certain filesystem function variants
    used in contexts where the paths are only ever handed over to other
    filesystem functions. `Addr` (from `primitive`) is used for pointers to
    data whose type is unknown. `Ptr` is used for pointers to data whose type
    is known.
  * Functions should not throw errors. This library uses `IO (Either Errno a)`
    in places where some libraries would use `IO a`.
  * The numeric types from `Foreign.C.Types` and `System.Posix.Types` are
    used in the type signatures of functions so that a haskell function's
    type signature matches its underlying POSIX equivalent exactly.
  * Flags are newtypes over `CInt` (or whatever integral type matches the
    posix specification) rather than enumerations. The data constructors
    are exported, making the types extensible for operating system that
    have additional flags.
  * There is some platform-specific code in this library. POSIX-specified data
    structures do not have the same in-memory representation on all platforms.
    Consequently, some of the code to serialize data to its C-struct
    representation must be written differently on different platforms.
    This is seldom needed. A viable alternative would be using the FFI
    to perform this serialization. However, the approach of using
    per-platform haskell code lets the serialization code inline better.

  Pull requests that add bindings to POSIX APIs in a way that agrees
  with these guidelines will be accepted. Unfortunately, there is some
  grey area when it comes to what a "minimal binding" to a function
  is. Discussion may sometimes be necessary to refine the guidelines.

  ## Infelicities

  This project currently includes some Linux-specific code. It in the
  the `Linux.Socket`. The plan is to eventually move the `Linux.Socket` module
  into its own library. Currently, a ton of POSIX APIs are missing.
  These should be included.

license-name: BSD-3-Clause
