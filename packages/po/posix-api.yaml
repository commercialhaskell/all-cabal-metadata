all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.2.0
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.6.0.1
- 0.6.1.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.3.0
author: Andrew Martin
basic-deps:
  base: '>=4.16.3 && <5'
  byte-order: '>=0.1.2 && <0.2'
  byteslice: '>=0.2.10 && <0.3'
  primitive: '>=0.9 && <0.10'
  primitive-addr: '>=0.1 && <0.2'
  primitive-offset: '>=0.2 && <0.3'
  run-st: '>=0.1.1 && <0.2'
  text-short: '>=0.1.5'
changelog: |
  # Changelog
  All notable changes to this project will be documented in this file.

  The format is inspired by [Keep a Changelog](http://keepachangelog.com/en/1.0.0/).
  This changelog deviates from the recommendation by not grouping changes into
  added, changed, deprecated, etc. subsections.

  This project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## 0.7.3.0 -- 2025-05-28

  - Add support for `openat`

  ## 0.7.2.0 -- 2024-02-28

  - Add `socket` as alias for `uninterruptibleSocket`.
  - Add `withSocket`.
  - Removed `UNLIFTEDARRAYFUNCTIONS` flag and support for GHC < 9.4.

  ## 0.7.1.0 -- 2023-10-03

  - Add `uninterruptibleOpenModeUntypedFlags`.
  - Add `Posix.Struct.AddressInfo.Poke`.
  - Add `Posix.File.uninterruptibleReadMutableByteArray`.

  ## 0.7.0.0 -- 2023-08-30

  - For now, remove all of the functions that work on UnliftedArray. These
    will be added back later once hackage starts using GHC 9.4. They are
    now guarded by CPP, so if anyone was using them, build this library
    with the `UNLIFTEDARRAYFUNCTIONS` flag to get them back.
  - Add `uninterruptibleConnectPtr` for better compatibility with `network`.

  ## 0.6.1.0 -- 2023-08-14

  - Add `uninterruptibleWriteBytesCompletelyErrno`
  - Add `writeBytesCompletelyErrno`
  - Add `uninterruptibleAccept4_`

  ## 0.6.0.1 -- 2023-07-13

  - Fix mistake in header file that caused builds to fail

  ## 0.6.0.0 -- 2023-07-13

  - Use Int instead of CInt for all offsets into byte arrays

  ## 0.5.0.0 -- 2023-07-13

  - Move Linux.Systemd to systemd-api library to make docs build on hackage.

  ## 0.4.0.1 -- 2023-06-27

  - Build with GHC 9.4

  ## 0.4.0.0 -- 2022-12-08

  - Add `writeMutableByteArray`
  - In the 0.3.5.0 release, the major version was supposed to be bumped.
    This is being done now instead.

  ## 0.3.5.0 -- 2021-07-02

  - Breaking: Start using pattern synonyms for macros.
  - Add dedicated modules for peeking at structures.
  - Make compatible with GHC 8.10 by changing the way ArrayArray# is handled
    on the C side of the FFI.
  - Add `uninterruptibleSetSocketOption`.
  - Add socket options `SO_BINDTODEVICE` and `SO_REUSEADDR`.

  ## 0.3.4.0 -- 2020-03-09

  - Add `Posix.File`
  - Add lower bound for `hsc2hs` build tool

  ## 0.3.3.0 -- 2019-12-18

  - Support several POSIX message queue functions.
  - Support Linux systemd functions.

  ## 0.3.2.0 -- 2019-07-21

  - Add more functions.

  ## 0.3.1.0 -- YYYY-MM-DD

  - Make the test suite build again.
  - Add `uninterruptibleSendByteArrays`.

  ## 0.1.0.0 -- 2018-01-02
  - Initial release.
  - Includes a ton of sockets API stuff.
  - Includes the get working directory function.
changelog-type: markdown
description: |+
  # posix-api

  ## Objective

  This library provides minimal bindings to system calls for POSIX-compliant
  operating systems. All functions follow these design decisions:

  * `String` is not used anywhere. `ByteArray` (from `primitive`) is used for
    serialized data. It is also used in certain filesystem function variants
    used in contexts where the paths are only ever handed over to other
    filesystem functions. `Addr` (from `primitive`) is used for pointers to
    data whose type is unknown. `Ptr` is used for pointers to data whose type
    is known.
  * Functions should not throw errors. This library uses `IO (Either Errno a)`
    in places where some libraries would use `IO a`.
  * The numeric types from `Foreign.C.Types` and `System.Posix.Types` are
    used in the type signatures of functions so that a haskell function's
    type signature matches its underlying POSIX equivalent exactly.
  * Flags are newtypes over `CInt` (or whatever integral type matches the
    posix specification) rather than enumerations. The data constructors
    are exported, making the types extensible for operating system that
    have additional flags.
  * There is some platform-specific code in this library. POSIX-specified data
    structures do not have the same in-memory representation on all platforms.
    Consequently, some of the code to serialize data to its C-struct
    representation must be written differently on different platforms.
    This is seldom needed. A viable alternative would be using the FFI
    to perform this serialization. However, the approach of using
    per-platform haskell code lets the serialization code inline better.

  Pull requests that add bindings to POSIX APIs in a way that agrees
  with these guidelines will be accepted. Unfortunately, there is some
  grey area when it comes to what a "minimal binding" to a function
  is. Discussion may sometimes be necessary to refine the guidelines.

  ## Infelicities

  This project currently includes some Linux-specific code. It in the
  the `Linux.Socket`. The plan is to eventually move the `Linux.Socket` module
  into its own library. Currently, a ton of POSIX APIs are missing.
  These should be included.

description-type: markdown
hash: 3c49987c58a5cbd57dceb24217042a99842d13e5b5d40d3708e714062908d52e
homepage: https://github.com/byteverse/posix-api
latest: 0.7.3.0
license-name: BSD-3-Clause
maintainer: amartin@layer3com.com
synopsis: posix bindings
test-bench-deps:
  base: '>=0'
  posix-api: '>=0'
  primitive: '>=0.7'
  tasty: '>=0'
  tasty-hunit: '>=0'
