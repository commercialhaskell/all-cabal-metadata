homepage: https://github.com/kcsmnt0/polysemy-keyed-state#readme
changelog-type: markdown
hash: bf58f50a755ec6b2ee5ab7fc153bea1120c7dd029748963d7f0bff613828e08f
test-bench-deps:
  constraints-extras: '>=0.3.0.2 && <0.4'
  base: '>=4.12 && <4.15'
  hspec: '>=2.4.7 && <2.9'
  constraints: '>=0.11 && <0.14'
  some: '>=1.0.1 && <1.1'
  StateVar: ==1.2.*
  trivial-constraint: '>=0.3 && <0.8'
  polysemy: '>=1.3 && <1.6'
  QuickCheck: '>=2.11.3 && <2.15'
maintainer: Katie Casamento <kcsmnt0@gmail.com>
synopsis: Effect for a set of stateful values indexed by a type of keys
changelog: |
  0.1.1
  -----
  * Added `zoomAt`.

  0.1
  ---
  Initial release.
basic-deps:
  constraints-extras: '>=0.3.0.2 && <0.4'
  base: '>=4.12 && <4.15'
  constraints: '>=0.11 && <0.14'
  some: '>=1.0.1 && <1.1'
  StateVar: ==1.2.*
  trivial-constraint: '>=0.3 && <0.8'
  polysemy: '>=1.3 && <1.6'
all-versions:
- '0.1'
- 0.1.1
author: ''
latest: 0.1.1
description-type: markdown
description: |
  # polysemy-keyed-state

  ![build/test](https://github.com/kcsmnt0/polysemy-keyed-state/actions/workflows/haskell.yml/badge.svg)

  This package provides the `KeyedState` effect for use with [`polysemy`](https://hackage.haskell.org/package/polysemy). For any key type `k :: Type -> Type`, the `KeyedState k` effect provides access to a set of stateful values indexed by `k`, where a key of type `k a` can be used to access a stateful value of type `a`.

  In the most direct use case, the `KeyedState` effect can be used as an interface to low-level reference types like `IORef` and `STRef`: for example, `getAt` can be used with the type `Member (KeyedState IORef) r => IORef a -> Sem r a`.

  At a higher level, key types defined as GADTs can be used with `KeyedState` to represent sets of stateful variables in a single effect. For example, with the GADT definition of `K` below, the effect `KeyedState K` provides access to an `Int` value with key `X` and a `Bool` value with key `Y`.

  ```haskell
  data K a where
    X :: K Int
    Y :: K Bool
  ```

  By mapping high-level keys to low-level references, the `KeyedState` effect can be used to implement a high-level interface to a set of low-level variables.

  Some of the interpreters for `KeyedState` require instances of `Has` for certain typeclasses, which can be generated for most GADT key types with `deriveArgDict` from the [`constraints-extras`](https://hackage.haskell.org/package/constraints-extras) package.
license-name: BSD-3-Clause
