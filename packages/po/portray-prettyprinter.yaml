homepage: https://github.com/awpr/portray#readme
changelog-type: markdown
hash: 3f1873820860d9b80695df1472520c759fb6d50820d83572f78a81d434481907
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: '>=4.12 && <4.17'
  text: '>=0.1 && <2.1'
  portray-diff: ==0.1.*
  test-framework-quickcheck2: -any
  portray-prettyprinter: -any
  HUnit: -any
  prettyprinter: '>=1.2 && <1.8'
  QuickCheck: -any
  portray: -any
  prettyprinter-ansi-terminal: '>=1.1.1 && <1.2'
maintainer: Andrew Pritchard <awpritchard@gmail.com>
synopsis: Portray backend for prettyprinter
changelog: |
  # 0.2.1 (2022-09-24)

  * Update to `portray-0.3.0`.
  * Fix an alignment bug in list/tuple elements.
  * Support flexible configuration of floating-point literals.
  * Support configuration of numeric place separators.
  * Use lazy Text internally in `pp` and `ppd` to support large/infinite values.

  # 0.2.0 (2021-09-17)

  * Update to `portray-0.2.0`.
  * Add colorized pretty-printing for `pp` and `ppd`.
  * Fix records/lists/tuples putting initial elements on their own lines.
  * Flow string literals onto multiple lines, preferring to break after `\n`s.
  * Support configurable string escaping, to allow printing Unicode in strings.

  # 0.1.0 (2021-09-14)

  Initial version.
basic-deps:
  base: '>=4.12 && <4.17'
  text: '>=0.1 && <2.1'
  portray-diff: ==0.1.*
  prettyprinter: '>=1.2 && <1.8'
  portray: ==0.3.*
  prettyprinter-ansi-terminal: '>=1.1.1 && <1.2'
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
author: Andrew Pritchard <awpritchard@gmail.com>
latest: 0.2.1
description-type: haddock
description: |-
  This provides a
  <https://hackage.haskell.org/package/prettyprinter prettyprinter> backend for
  <https://hackage.haskell.org/package/portray portray> along with derivable
  'Pretty' instances for types with 'Portray' instances.

  This backend has largely superseded the original
  <https://hackage.haskell.org/package/portray-pretty portray-pretty>.  Because
  @prettyprinter@ gives more flexibility to documents at the cost of requiring
  more behavior to be specified explicitly, some formats are nicer with this
  backend, configurable syntax highlighting is supported, and unicode escaping
  is configurable.  However, as this backend is still newer, there are
  potentially more unnoticed formatting bugs.  Please do file bugs on the
  GitHub issue tracker if you find anything that seems obviously wrong!

  Try using 'pp' as the print function in GHCi:
  @:set -interactive-print=Data.Portray.Prettyprinter.pp@!
license-name: Apache-2.0
