homepage: https://github.com/google/hs-portray#readme
changelog-type: markdown
hash: a8621748ef5fe99eac36b782ac02515423d1c06f56f72fdc08f653de46e7ab1d
test-bench-deps:
  test-framework-hunit: -any
  test-framework: -any
  base: '>=4.12 && <4.16'
  text: '>=0.1 && <1.3'
  portray-diff: '>=0.1 && <0.2'
  test-framework-quickcheck2: -any
  portray-prettyprinter: -any
  HUnit: -any
  prettyprinter: '>=1.7 && <1.8'
  QuickCheck: -any
  portray: -any
  prettyprinter-ansi-terminal: '>=1.1.2 && <1.2'
maintainer: Andrew Pritchard <awpr@google.com>
synopsis: A portray backend using the prettyprinter package.
changelog: |
  # 0.1.0

  Initial version.

  # 0.2.0

  * Update to portray-0.2.0.
  * Add colorized pretty-printing for `pp` and `ppd`.
  * Fix records/lists/tuples putting initial elements on their own lines.
  * Flow string literals onto multiple lines, preferring to break after `\n`s.
  * Support configurable string escaping, to allow printing Unicode in strings.
basic-deps:
  base: '>=4.12 && <4.16'
  text: '>=0.1 && <1.3'
  portray-diff: '>=0.1 && <0.2'
  prettyprinter: '>=1.7 && <1.8'
  portray: '>=0.2 && <0.3'
  prettyprinter-ansi-terminal: '>=1.1.2 && <1.2'
all-versions:
- 0.1.0
- 0.2.0
author: Andrew Pritchard <awpr@google.com>
latest: 0.2.0
description-type: haddock
description: |-
  This provides a
  <https://hackage.haskell.org/package/prettyprinter prettyprinter> backend for
  <https://hackage.haskell.org/package/portray portray> along with derivable
  'Pretty' instances for types with 'Portray' instances.

  This started out as a fork of
  <https://hackage.haskell.org/package/portray-pretty portray-pretty>, and is
  still very similar.  However, @prettyprinter@ gives more flexibility to
  documents at the cost of requiring more behavior to be specified explicitly.
  As such, some formats are nicer with the @prettyprinter@ backend,
  configurable syntax highlighting is supported, and unicode escaping is
  configurable.  However, this backend is less mature and hasn't been used as
  much in practice, so there are likely more formatting bugs than in
  @portray-pretty@.  Please do file bugs on the GitHub issue tracker if you
  find anything that seems obviously wrong!

  Try using 'pp' as the print function in GHCi:
  @:set -interactive-print=Data.Portray.Prettyprinter.pp@!
license-name: Apache-2.0
