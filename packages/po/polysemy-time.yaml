all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.4.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
author: Torsten Schmits
basic-deps:
  aeson: '>=1.4'
  base: '>=4 && <5'
  incipit-core: '>=0.4 && <0.6'
  template-haskell: '>=0'
  time: '>=0'
  torsor: '>=0.1'
changelog: |
  # 0.6.0.1

  * Support GHC 9.6.

  # 0.6.0.0

  * Support GHC 9.4.

  # 0.5.1.0

  * Add `untilJust`, a combinator that repeatedly executes an action until it returns `Just`, sleeping in between.

  # 0.5.0.0
  * Change the behaviour of `interceptTimeConstantState` so that sleeping polls the current time until it has been
    adjusted further than the sleep duration.
  * Add `since`, a convenience combinator that diffs the current time against a reference instant.

  # 0.1.4.0
  * Add `secondsFrac`, a combinator that converts a unit into a fractional number of seconds.
  * Add combinators for repeatedly running an action with a sleep interval
  * Add interpreters that remain at a fixed instant

  # 0.1.3.0
  * Added `measure`, a combinator that returns the time span an action takes.

  # 0.1.1.0
  * Added `Time.Adjust`, an action that takes a time unit and adds it to the custom start time, if available.
  * Added `Fractional` instances for sub-second time units that treat literals as seconds.

  # 0.1.0.0
  * initial release
changelog-type: markdown
description: |
  # About

  This Haskell library provides a [Polysemy] effect for accessing the current time and date, and interpreters using
  [time].

  # Example

  ```haskell
  import Data.Time (UTCTime)
  import Polysemy (Members, runM)
  import qualified Polysemy.Time as Time
  import Polysemy.Time (MilliSeconds(MilliSeconds), Seconds(Seconds), Time, interpretTimeGhcAt, mkDatetime, year)

  prog ::
    Ord t =>
    Members [Time t d, Embed IO] r =>
    Sem r ()
  prog = do
    time1 <- Time.now
    Time.sleep (MilliSeconds 10)
    time2 <- Time.now
    print (time1 < time2)
    -- True

  testTime :: UTCTime
  testTime =
    mkDatetime 1845 12 31 23 59 59

  main :: IO ()
  main =
    runM do
      interpretTimeGhcAt testTime do
        Time.sleep (Seconds 1)
        time <- Time.now
        print (year time)
        -- Years { unYear = 1846 }
  ```

  # Effect

  The only effect contained in **polysemy-time** is:

  ```haskell
  data Time (time :: Type) (date :: Type) :: Effect where
    Now :: Time t d m t
    Today :: Time t d m d
    Sleep :: TimeUnit u => u -> Time t d m ()
    SetTime :: t -> Time t d m ()
    SetDate :: d -> Time t d m ()
  ```

  Interpreters are provided for the [time library](time) bundled with GHC.
  The project [polysemy-chronos] contains an alternative implementation for [chronos].

  The type parameters correspond to the representations in the implementation,
  like `Data.Time.UTCTime`/`Chronos.Time` and `Data.Time.Day`/`Chronos.Date`.

  `SetTime` and `SetDate` only have meaning when you're running in a testing context.

  A special interpreter variant suffixed with `At` exists for both
  implementations, with which the current time is overridden to be relative to
  the supplied override fixed at the start of interpretation.
  This is useful for testing.

  # Utilities

  A set of newtypes representing timespans are provided for convenience.
  Internally, the interpreters operate on `NanoSecond`s.

  The class `TimeUnit` ties those types, and the types `Chronos.Timespan` and
  `Data.Time.DiffTime`, together to allow you to convert between them with the
  function `convert`:

  ```haskell
  >>> convert (picosecondsToDiffTime 50000000) :: MicroSeconds
  MicroSeconds {unMicroSeconds = 50}

  >>> convert (Days 5) :: Timespan
  Timespan {getTimespan = 432000000000000}
  ```

  The class `Calendar` allows you to construct `UTCTime` and `Chronos.Datetime`
  from integers with the function `mkDatetime`, as demonstrated in the first
  example.

  [Polysemy]: https://hackage.haskell.org/package/polysemy
  [time]: https://hackage.haskell.org/package/time
  [chronos]: https://hackage.haskell.org/package/chronos
  [polysemy-chronos]: https://hackage.haskell.org/package/polysemy-chronos
description-type: markdown
hash: 0e719ae78639b5857835615b9d5423897111d5bdf084c6d0fcfc49b19cc0a143
homepage: https://github.com/tek/polysemy-time#readme
latest: 0.6.0.2
license-name: BSD-2-Clause-Patent
maintainer: hackage@tryp.io
synopsis: A Polysemy effect for time
test-bench-deps:
  base: '>=4 && <5'
  incipit-core: '>=0.4 && <0.6'
  polysemy-test: '>=0.6'
  polysemy-time: '>=0'
  tasty: '>=1.1'
  time: '>=0'
