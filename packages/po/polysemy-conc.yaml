homepage: https://github.com/tek/polysemy-conc#readme
changelog-type: markdown
hash: 6265a7690e576d51d6bfdbad313f793eb774ff7f92ee68981cfb23545809ebbe
test-bench-deps:
  polysemy-conc: -any
  unix: -any
  stm: -any
  base: ==4.*
  polysemy-test: -any
  unagi-chan: '>=0.4'
  polysemy-time: '>=0.1.2.1'
  polysemy: '>=1.5'
  tasty: -any
maintainer: tek@tryp.io
synopsis: Polysemy Effects for Concurrency
changelog: |
  # Unreleased

  # 0.3.0.0

  * Change `Race.timeout` to take a `Sem` for the fallback instead of a pure value.
  * Export all `Queue` constructors from `Polysemy.Conc.Queue`.
  * Export all `Sync` constructors from `Polysemy.Conc.Sync`.
  * Move all interpreters to `Polysemy.Conc.Interpreter`.

  # 0.2.0.0
  * Add `read*` constructors for `Sync`
  * Add `subscribeWhile`, a combinator that consumes events until a condition is met
  * Add looping combinators for `Queue`
  * Add `retry`, a combinator that runs an action repeatedly until it returns `Right` or a timeout is hit
  * Add `Scoped`, an effect for local resource scoping
  * Add `withAsync`, a bracketing combinator that runs an async action while the main action runs
  * Add `interpretAtomic`, a convenience interpreter for `AtomicState` that runs `runAtomicStateTVar`
basic-deps:
  string-interpolate: '>=0.2'
  unix: -any
  stm: -any
  base: ==4.*
  time: -any
  text: -any
  async: -any
  containers: -any
  relude: '>=0.7'
  unagi-chan: '>=0.4'
  polysemy-time: '>=0.1.2.1'
  stm-chans: '>=2'
  polysemy: '>=1.5'
  template-haskell: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
author: Torsten Schmits
latest: 0.3.0.0
description-type: markdown
description: |
  # About

  This library provides a few convenience [polysemy] effects for using STM queues, MVars, signal handling and racing.

  Please visit [hackage] for documentation.

  [polysemy]: https://hackage.haskell.org/package/polysemy
  [hackage]: https://hackage.haskell.org/package/polysemy-conc
license-name: BSD-2-Clause-Patent
