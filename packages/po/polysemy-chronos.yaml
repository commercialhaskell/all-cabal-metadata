homepage: ''
changelog-type: markdown
hash: 3c0adbae990772522e38aec9fe543924ea4aa60e14a826c2d9543dbad5569ec8
test-bench-deps:
  base: ==4.*
  polysemy-test: -any
  incipit-core: -any
  chronos: -any
  polysemy-time: -any
  tasty: -any
  polysemy-chronos: -any
maintainer: tek@tryp.io
synopsis: Polysemy-time Interpreters for Chronos
changelog: |
  # Unreleased

  # 0.2.0.2

  * Bugfix: Chronos treats months as zero-based, while `mkDate` uses 1-base.

  # 0.1.4.0
  * Add interpreters that remain at a fixed instant

  # 0.1.0.0
  * initial release
basic-deps:
  base: ==4.*
  incipit-core: '>=0.2'
  chronos: '>=1.1.1 && <1.2'
  polysemy-time: -any
all-versions:
- 0.1.0.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.4.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.3.0.0
- 0.4.0.0
author: Torsten Schmits
latest: 0.4.0.0
description-type: markdown
description: |
  # About

  This Haskell library provides interpreters for the `Time` effect from [polysemy-time].

  # Example

  ```haskell
  import Polysemy (Members, runM)
  import Polysemy.Chronos (ChronosTime, interpretTimeChronosConstantAt, interpretTimeChronos)
  import qualified Polysemy.Time as Time
  import Polysemy.Time (MilliSeconds(MilliSeconds), mkDatetime)

  startTime :: Chronos.Time
  startTime =
    Chronos.datetimeToTime (Time.mkDatetime 2020 01 01 0 0 0)

  prog ::
    Ord t =>
    Members [ChronosTime, Embed IO] r =>
    Sem r Bool
  prog = do
    Time.sleep (MilliSeconds 1)
    time <- Time.now
    pure (time == startTime)

  main :: IO ()
  main =
    runM do
      print =<< interpretTimeChronos prog -- False
      print =<< interpretTimeChronosConstantAt prog -- True
  ```

  [Polysemy]: https://hackage.haskell.org/package/polysemy
  [polysemy-time]: https://hackage.haskell.org/package/polysemy-time
  [chronos]: https://hackage.haskell.org/package/chronos
license-name: BSD-2-Clause-Patent
