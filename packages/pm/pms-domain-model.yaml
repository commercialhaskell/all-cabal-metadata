all-versions:
- 0.0.1.0
- 0.0.1.1
author: phoityne.hs@gmail.com
basic-deps:
  aeson: '>=0'
  base: ^>=4.21.0.0
  bytestring: '>=0'
  data-default: '>=0'
  fast-logger: '>=0'
  filepath: '>=0'
  lens: '>=0'
  monad-logger: '>=0'
  mtl: '>=0'
  safe-exceptions: '>=0'
  stm: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: |
  # Revision history for pms-domain-model

  ## 0.0.1.0 -- 2025-05-31

  * First version.
changelog-type: markdown
description: "# pms-domain-model\n\n## Positioning of pms-domain-model in the pty-mcp-server
  Project\n\n`pms-domain-model` is a core internal package within the [`pty-mcp-server`](https://github.com/phoityne/pty-mcp-server)
  project. It defines the essential domain types — such as value objects, identifiers,
  parameters, and domain-specific data structures — that precisely capture the semantics
  of the problem domain.\n\nThe package does **not** contain any implementation of
  behavior, business logic, or state management. Instead, it is strictly responsible
  for representing the domain context as **purely declarative data**. This clear separation
  ensures that domain semantics are explicitly encoded and remain stable, independent
  of application workflows or infrastructure concerns.\n\nThe **domain logic itself**
  — that is, the implementation of business rules, behaviors, and state transitions
  — is separated and encapsulated in the `domain-service` layer. This design enables
  a clean architectural separation where the `pms-domain-model` defines the core domain
  vocabulary and invariants, while the `domain-service` implements the operations
  and business processes that act upon this data.\n\nIn this architectural style,
  inspired by principles from Onion Architecture, Clean Architecture, and similar
  approaches, the domain model forms the innermost core and defines the **ubiquitous
  language** and **invariants** of the business domain. Application logic, state transitions,
  and side effects are implemented in outer layers, such as the domain service and
  application layers, which rely on these core types.\n\n---\n\n## Insights into Domain
  Modeling in Haskell from This Development\n\nDuring the development of `pty-mcp-server`,
  important insights were gained into how Haskell’s strong and expressive type system
  influences the conception and implementation of domain models:\n\n- The domain model
  is naturally represented as a set of **data types** that encode domain semantics
  precisely, **without embedding behavior or mutable state**.\n\n- The notion of domain
  context in Haskell goes beyond just data types. It includes **phantom types**, **newtypes**,
  and **tagged constructors** to express domain distinctions and constraints in a
  type-safe manner.\n\n- Application context — including configuration, resources,
  logging, and effect management — is captured through **monad stacks** and **typeclass-based
  capabilities**, enabling composable and testable implementations of operational
  concerns.\n\nThis results in a distinct architectural pattern where domain data
  (the core model) is strictly separated from behavior and side effects, while still
  fully driving the correctness of program construction.\n\n`pms-domain-model` thus
  acts as the **semantic center** of the system. Any computation in the application
  or domain service layers must align with and respect the data types and constraints
  defined here.\n\nThis approach effectively adapts architectural concepts inspired
  by Onion Architecture, Clean Architecture, and similar methodologies to Haskell.
  It leverages language-specific features such as strong static typing and monadic
  effects to maintain purity, testability, and maintainability.\n\nBy treating the
  **context** (implemented as monad stacks) as the bridge between domain data and
  application logic, this design achieves a clean separation of concerns and supports
  practical software development workflows in Haskell.\n\n---\n\n## Summary\n\npms-domain-model
  represents a Haskell-specific embodiment of architectural concepts inspired by Clean/Onion
  Architecture and similar approaches:  \na data-centric, behavior-agnostic core that
  precisely encodes the problem domain and provides the foundation for the system’s
  semantics, enabling robust, maintainable, and scalable application development.\n\nAdopting
  and adapting these architectural principles in Haskell aligns well with the language’s
  characteristics. Haskell’s strong static typing and pure functional nature naturally
  facilitate clear separation of concerns and enforcement of domain invariants at
  the type level. This alignment enhances testability, maintainability, and expressiveness
  of the domain model, making the approach both feasible and beneficial.\n\n---\n\n##
  Package Structure\n![Package Structure](https://raw.githubusercontent.com/phoityne/pms-domain-model/main/docs/51-1.png)\n\n---\n\n##
  Module Structure\n![Package Structure](https://raw.githubusercontent.com/phoityne/pms-domain-model/main/docs/51-2.png)\n\n---\n"
description-type: markdown
hash: aafbf40593149acfa42ad1c11dfbe117354691682d3143396a19c4e055b73a24
homepage: https://github.com/phoityne/pms-domain-model
latest: 0.0.1.1
license-name: Apache-2.0
maintainer: phoityne.hs@gmail.com
synopsis: pms-domain-model
test-bench-deps:
  aeson: '>=0'
  async: '>=0'
  base: ^>=4.21.0.0
  data-default: '>=0'
  hspec: '>=0'
  hspec-discover: '>=0'
  lens: '>=0'
  monad-logger: '>=0'
  pms-domain-model: '>=0'
  stm: '>=0'
  unix: '>=0'
