all-versions:
- '0.0'
author: Henning Thielemann <haskell@henning-thielemann.de>
basic-deps:
  QuickCheck: '>=2 && <3'
  base: '>=4.5 && <5'
  comfort-array: '>=0.5.4 && <0.6'
  deepseq: '>=1.3 && <1.6'
  guarded-allocation: '>=0.0.1 && <0.1'
  linear-programming: '>=0.0 && <0.1'
  non-empty: '>=0.3.2 && <0.4'
  storable-record: '>=0.0.5 && <0.1'
  transformers: '>=0.3 && <0.7'
  utility-ht: '>=0.0.16 && <0.1'
changelog: ''
changelog-type: ''
description: |-
  Simple interface to linear programming functions provided by HiGHS
  using the flexible Array shape framework from @comfort-array@.

  E.g. you can use @Shape.Tuple@ to convert safely
  between nested tuples and arrays with the same number of elements.

  > type X = Shape.Element
  > type PairShape = Shape.NestedTuple Shape.TupleIndex (X,X)
  >
  > case Shape.indexTupleFromShape (Shape.static :: PairShape) of
  >   (posIx,negIx) ->
  >     case fmap (mapSnd Array.toTuple) $ snd $
  >          LP.solve LP.choose [] [[1.*posIx, (-1).*negIx] ==. 314]
  >            (LP.Minimize,
  >             Array.fromTuple (23,42) :: Array PairShape Double)
  >       of
  >         Just (absol, (pos, neg)) ->
  >           printf "absol %f,  pos %f, neg %f\n" absol pos neg
  >         _ -> fail "HiGHS solver failed"

  Alternatives: @coinor-clp@, @comfort-glpk@, @hmatrix-glpk@, @glpk-hs@
description-type: haddock
hash: 5fe380cf45b4678274274a55578aaaebfc38fc93d74a3941b4aececbdd46b583
homepage: ''
latest: '0.0'
license-name: BSD-3-Clause
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Linear Programming using HiGHS and comfort-array
test-bench-deps:
  QuickCheck: '>=2.1 && <3'
  base: '>=4.5 && <5'
  comfort-array: '>=0'
  doctest-exitcode-stdio: '>=0.0 && <0.1'
  doctest-lib: '>=0.1 && <0.2'
  highs-lp: '>=0'
  linear-programming: '>=0.0.1'
  non-empty: '>=0'
  random: '>=1.0 && <1.3'
  transformers: '>=0'
  utility-ht: '>=0'
