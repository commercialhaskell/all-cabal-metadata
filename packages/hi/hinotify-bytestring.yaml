all-versions:
- 0.3.8.1
author: Lennart Kolmodin
basic-deps:
  base: '>=4.5.0.0 && <5'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  unix: '>=0'
changelog: |
  hinotify
  ======

  hinotify-0.3.8.1
  --------------

  - fork the library and use `ByteString` instead of `String` as filepath, see https://github.com/kolmodin/hinotify/issues/19 for more information
changelog-type: markdown
description: |
  hinotify-bytestring: inotify for Haskell using ByteString for filepaths
  =============================

  [![Build Status](https://api.travis-ci.org/hasufell/hinotify-bytestring.png?branch=master)](http://travis-ci.org/hasufell/hinotify-bytestring)

  About
  -----

  hinotify-bytestring, a library to [inotify] which has been part of the Linux kernel
  since 2.6.13.

  inotify provides file system event notification, simply add a watcher to
  a file or directory and get an event when it is accessed or modified.

  This module is named `hinotify-bytestring`.

  See example code in the `examples` directory, distributed with the source
  code.

  [inotify]: http://www.kernel.org/pub/linux/kernel/people/rml/inotify/

  News
  ----

  **hinotify 0.3.7**

  * Bug fix: When registerering a new watch on a path which is already watched,
    don't overwrite the event listener from the previous watch.

  **hinotify 0.3.2**

  * Make each `WatchDescriptor` contain its `INotify`. Changes to the function types:

  >      -removeWatch :: INotify -> WatchDescriptor -> IO ()
  >      +removeWatch :: WatchDescriptor -> IO ()

  * Fix typo in declaration of `Deleted` in `data Event`;

  >      - { isDirecotry :: Bool
  >      + { isDirectory :: Bool

  **hinotify 0.3.1**

  * Use `inotify.h` from `glibc` rather than from the linux headers, as
        recommended upstream.

  **hinotify 0.3**

  * Compiles with GHC 6.12, GHC 6.10.4, GHC 6.8.2 and GHC 6.6.1

  **hinotify 0.2**

  * Updates to the API
      - Function names is now in semiCamelCase
      - Restructure event parameters to make it more consistent
  * Small test suit in `tests/`
  * Compiles with GHC 6.8.2 and GHC 6.6.1
  * Requires Cabal 1.2

  **hinotify 0.1**
  :   Initial release

  API
  ---

  The API basically consists of:

  ```haskell
  initINotify :: IO INotify
  addWatch :: INotify
           -> [EventVariety]   -- different events to listen on
           -> ByteString       -- file/directory to watch
           -> (Event -> IO ()) -- event handler
           -> IO WatchDescriptor
  removeWatch :: WatchDescriptor -> IO ()
  ```

  A sample program:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import System.Posix.Env.ByteString
  import System.IO

  import System.INotify

  main :: IO ()
  main = do
    inotify <- initINotify
    print inotify
    home <- getEnvDefault "HOME" "/home"
    wd <- addWatch
            inotify
            [Open,Close,Access,Modify,Move]
            home
            print
    print wd
    putStrLn "Listens to your home directory. Hit enter to terminate."
    getLine
    removeWatch wd
  ```

  Download
  --------

  The code is available via the [homepage]:

      git clone https://github.com/hasufell/hinotify-bytestring.git

  The [API] is available online.

  I'm most grateful for feedback on the API, and what else you might have to
  suggest.

  Author
  ------

  Lennart Kolmodin

  `kolmodin at gmail.com`

  Legal
  -----

  This software is released under a BSD-style license. See LICENSE for
  more details.

  Copyright &copy; 2007-2012 Lennart Kolmodin

  [homepage]: https://github.com/hasufell/hinotify-bytestring.git

  [API]: http://hackage.haskell.org/packages/archive/hinotify-bytestring/latest/doc/html/System-INotify.html
description-type: markdown
hash: 068b5cc99dff7b6b44d489963f4b074e0450f71b2b27fb15744d0e719300d13f
homepage: https://github.com/hasufell/hinotify-bytestring.git
latest: 0.3.8.1
license-name: BSD-3-Clause
maintainer: Julian Ospald <hasufell@posteo.de>
synopsis: Haskell binding to inotify, using ByteString filepaths
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  directory: '>=0'
  hinotify-bytestring: '>=0'
  posix-paths: '>=0'
  unix: '>=0'
  utf8-string: '>=0'
