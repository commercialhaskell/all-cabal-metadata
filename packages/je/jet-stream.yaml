all-versions:
- 1.0.0.0
author: Daniel Diaz Carrete
basic-deps:
  async: ^>=2.2.3
  base: '>=4.11.0.0 && <5'
  bytestring: '>=0.10'
  conceit: ^>=0.5.0.0
  process: '>=1.4.3.0'
  stm: '>=2.4'
  stm-chans: ^>=3.0.0.0
  text: '>=1.2'
changelog: "# Revision history for jet-stream\r\n\r\n## 0.1.0.0 -- YYYY-mm-dd\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n"
changelog-type: markdown
description: "# jet-stream\r\n\r\nThis is yet another streaming library for Haskell,
  created to scratch the\r\nfollowing itches:\r\n\r\n- The main type is as simple
  as possible: the only type parameter is the type\r\n  of the yielded elements.\r\n\r\n-
  The `Monoid` / `Alternative` / `MonadPlus` methods perform concatenation,\r\n  just
  like with regular lists. The `Functor` `Applicative` and `Monad`\r\n  instances
  also resemble those of lists.\r\n\r\n- There are direct analogues of functions like
  `withFile`, `bracket`, `finally`\r\n  and `onError` that easy to integrate in a
  streaming pipeline, and behave\r\n  smartly when combined with functions like `take`.\r\n\r\n-
  Compatible with the [foldl](https://hackage.haskell.org/package/foldl)\r\n  library
  for collector-like terminal operations. (All self-respecting\r\n  streaming libraries
  must have this.)\r\n\r\nIn order to achieve those objectives, the following sacrifices
  have been made:\r\n\r\n- No flexibility in the underlying monad for the stream effects:
  it's always\r\n  `IO`.\r\n\r\n- No separate \"channels\" that return extra information
  at the end of the\r\n  stream. This means exceptions are the only way of signalling
  errors or\r\n  unexpected conditions.\r\n\r\n- Elements in a stream can't be \"extracted\"
  one by one in a pull-based way,\r\n  like you can do for example in\r\n  [streaming](https://hackage.haskell.org/package/streaming-0.2.3.0/docs/Streaming-Prelude.html#v:next).\r\n\r\n-
  There's `take` and `drop`, but not at proper `splitAt`. Also, grouping\r\n  operations
  are cumbersome and underpowered, especially compared to libraries\r\n  like\r\n
  \ [streaming]((https://hackage.haskell.org/package/streaming-0.2.3.0/docs/Streaming-Prelude.html#v:next))\r\n
  \ or\r\n  [streaming-bytestring](https://hackage.haskell.org/package/streaming-bytestring).\r\n\r\n##
  What about performance?\r\n\r\nI haven't run any benchmarks, but you can safely
  assume that this library will\r\nmove like a snail compared to\r\n[streamly](https://hackage.haskell.org/package/streamly)'s
  Ferrari.\r\n\r\n## Some close cousins\r\n\r\n- [turtle](https://hackage.haskell.org/package/turtle).
  The `Shell` type\r\n  resembles `Jet`. One possible difference is that `Shell` doesn't
  seem to\r\n  provide a way for the `Shell` consumer to signal that no further values
  are\r\n  needed, at least judging from the docs for\r\n  [limit](https://hackage.haskell.org/package/turtle-1.5.22/docs/Turtle-Prelude.html#v:limit).\r\n\r\n
  \ \\\"turtle\\\" also inspired the idea of having a separate type for lines.\r\n\r\n-
  [streamly](https://hackage.haskell.org/package/streamly). I might have\r\n  reinvented
  a subset of streamly ([but\r\n  worse](https://www.mcmillen.dev/language_checklist.html)).\r\n\r\n-
  [Z.IO.BIO](https://hackage.haskell.org/package/Z-IO-1.0.0.0/docs/Z-IO-BIO.html)\r\n
  \ from [Z-IO](https://hackage.haskell.org/package/Z-IO). Like `Jet`, uses a\r\n
  \ callback-transformation approach. \r\n\r\n- The\r\n  [Stream](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html)\r\n
  \ type from Java is somewhat similar to this library's `Jet`. (And the\r\n  [foldl](https://hackage.haskell.org/package/foldl)
  library would be\r\n  the analogue of\r\n  [Collectors](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html).)\r\n\r\n"
description-type: markdown
hash: 3d2bb10f754b0e8b79fb4462bdacc616d52298bdad560e412abff0200131f4a7
homepage: ''
latest: 1.0.0.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: Yet another streaming library.
test-bench-deps:
  async: '>=2.2.3 && <2.3'
  base: '>=4.11.0.0 && <5'
  bytestring: '>=0.10'
  conceit: '>=0.5.0.0 && <0.6'
  doctest: ^>=0.18.1
  foldl: ^>=1.4.12
  jet-stream: '>=0'
  process: '>=1.4.3.0'
  stm: '>=2.4'
  stm-chans: '>=3.0.0.0 && <3.1'
  tasty: ^>=1.3.1
  tasty-hunit: ^>=0.10.0.2
  text: '>=1.2'
  time: '>=1.9'
