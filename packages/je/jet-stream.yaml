all-versions:
- 1.0.0.0
- 1.1.0.0
author: Daniel Diaz Carrete
basic-deps:
  async: ^>=2.2.5
  base: '>=4.11.0.0 && <5'
  bytestring: '>=0.10.0 && <0.13'
  process: '>=1.6.0 && <1.7'
  stm: '>=2.5.0 && <2.6'
  stm-chans: ^>=3.0.0.0
  text: '>=2.0 && <2.2'
changelog: |
  # Revision history for jet-stream

  ## 1.1.0.0

  * Switch to GHC2021
  * Remove dependency on 'conceit' package.
  * Remove the use of LinearTypes.

  ## 1.0.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# jet-stream\n\nThis is yet another streaming library for Haskell, created
  to scratch the\nfollowing itches:\n\n- The main type is as simple as possible: the
  only type parameter is the type\n  of the yielded elements.\n\n- The `Monoid` /
  `Alternative` / `MonadPlus` methods perform concatenation,\n  just like with regular
  lists. The `Functor` `Applicative` and `Monad`\n  instances also resemble those
  of lists.\n\n- There are direct analogues of functions like `withFile`, `bracket`,
  `finally`\n  and `onError` that easy to integrate in a streaming pipeline, and behave\n
  \ smartly when combined with functions like `take`.\n\n- Compatible with the [foldl](https://hackage.haskell.org/package/foldl)\n
  \ library for collector-like terminal operations. (All self-respecting\n  streaming
  libraries must have this.)\n\nIn order to achieve those objectives, the following
  sacrifices have been made:\n\n- No flexibility in the underlying monad for the stream
  effects: it's always\n  `IO`.\n\n- No separate \"channels\" that return extra information
  at the end of the\n  stream. This means exceptions are the only way of signalling
  errors or\n  unexpected conditions.\n\n- Elements in a stream can't be \"extracted\"
  one by one in a pull-based way,\n  like you can do for example in\n  [streaming](https://hackage.haskell.org/package/streaming-0.2.3.0/docs/Streaming-Prelude.html#v:next).\n\n-
  There's `take` and `drop`, but not at proper `splitAt`. Also, grouping\n  operations
  are cumbersome and underpowered, especially compared to libraries\n  like\n  [streaming]((https://hackage.haskell.org/package/streaming-0.2.3.0/docs/Streaming-Prelude.html#v:next))\n
  \ or\n  [streaming-bytestring](https://hackage.haskell.org/package/streaming-bytestring).\n\n##
  What about performance?\n\nI haven't run any benchmarks, but you can safely assume
  that this library will\nmove like a snail compared to\n[streamly](https://hackage.haskell.org/package/streamly)'s
  Ferrari.\n\n## Some close cousins\n\n- [turtle](https://hackage.haskell.org/package/turtle).
  The `Shell` type\n  resembles `Jet`. One possible difference is that `Shell` doesn't
  seem to\n  provide a way for the `Shell` consumer to signal that no further values
  are\n  needed, at least judging from the docs for\n  [limit](https://hackage.haskell.org/package/turtle-1.5.22/docs/Turtle-Prelude.html#v:limit).\n\n
  \ \\\"turtle\\\" also inspired the idea of having a separate type for lines.\n\n-
  [streamly](https://hackage.haskell.org/package/streamly). I might have\n  reinvented
  a subset of streamly ([but\n  worse](https://www.mcmillen.dev/language_checklist.html)).\n\n-
  [Z.IO.BIO](https://hackage.haskell.org/package/Z-IO-1.0.0.0/docs/Z-IO-BIO.html)\n
  \ from [Z-IO](https://hackage.haskell.org/package/Z-IO). Like `Jet`, uses a\n  callback-transformation
  approach. \n\n- The\n  [Stream](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html)\n
  \ type from Java is somewhat similar to this library's `Jet`. (And the\n  [foldl](https://hackage.haskell.org/package/foldl)
  library would be\n  the analogue of\n  [Collectors](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html).)\n\n"
description-type: markdown
hash: 7e6e66b95a0d40916cf5fdb663a8c4c33d2648bf707883ad7eb7bfdc17ad98c5
homepage: ''
latest: 1.1.0.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: Yet another streaming library.
test-bench-deps:
  async: ^>=2.2.5
  base: '>=4.11.0.0 && <5'
  bytestring: '>=0.10.0 && <0.13'
  jet-stream: '>=0'
  process: '>=1.6.0 && <1.7'
  stm: '>=2.5.0 && <2.6'
  stm-chans: ^>=3.0.0.0
  tasty: '>=1.4.0'
  tasty-hunit: '>=0.10.0.2'
  text: '>=2.0 && <2.2'
  time: '>=1.9'
