homepage: https://hslua.org/
changelog-type: markdown
hash: 81c31670932cdbee9e6b8b1d1216fb5e734ab78b3c29d603e6d46a249ebd19cb
test-bench-deps:
  base: '>=4.8 && <5'
  lua: -any
  tasty-hunit: '>=0.9'
  tasty: '>=0.11'
maintainer: Albert Krewinkel <albert+hslua@zeitkraut.de>
synopsis: Lua, an embeddable scripting language
changelog: |
  # Changelog

  `lua` uses [PVP Versioning][1].

  ## lua 2.0.1

  Released 2021-11-03.

  - Added bindings to `lua_rotate` and `lua_version`.

  ## lua 2.0.0.1

  Released 2021-10-30.

  - Only install includes when using the Lua code shipped with the package
    (Ellie Hermaszewska). Cabal no longer tries to install the header
    files if a system-wide installation is used.

  ## lua 2.0.0

  Release 2021-10-21.

  - Module hierarchy moved from `Foreign.Lua.Raw` to `Lua`.

  - Documentation has been improved.

  - Added new function `withNewState` to run Lua operations.

  - New modules `Lua.Ersatz` containing all bindings to safe
    ersatz functions.

  - Higher level and enum types have been removed, only the
    low-level "code" types are kept in this package.

  - Constants are now represented as pattern synonyms like `LUA_OK`.

  - Provide bindings to more functions:
      + `lua_is...` type-checking functions;
      + `lua_pushstring` to push plain CStrings;
      + auxiliary functions
          * `luaL_loadfile`, and
          * `luaL_loadfilex`;
      + unsafe functions
          * `lua_gettable`,
          * `lua_settable`,
          * `lua_getglobal`, and
          * `lua_setglobal`.

  - The function `lua_pop` now expects a `CInt` instead of a
    `StackIndex`.

  - New StackIndex constructor functions `nthTop`, `nthBottom`,
    `nth`, and `top`.

  - Avoid unnecessary modification of HSFUN metatable.

  - Various cleanups and test improvements.

  ## lua 1.0.0

  Released 2021-02-18.

  - Initially created. Contains all modules in the `Foreign.Lua.Raw`
    hierarchy from `hslua-1.3`. Documentation has been improved.

  [1]: https://pvp.haskell.org
basic-deps:
  base: '>=4.8 && <5'
all-versions:
- 1.0.0
- 2.0.0
- 2.0.0.1
- 2.0.1
author: Albert Krewinkel
latest: 2.0.1
description-type: markdown
description: |
  # lua

  [![Build status][GitHub Actions badge]][GitHub Actions]
  [![AppVeyor Status]](https://ci.appveyor.com/project/tarleb/hslua-r2y18)
  [![Hackage]](https://hackage.haskell.org/package/lua)

  The *lua* package provides a Lua interpreter as well as bindings,
  wrappers and types to combine Haskell and Lua.

  [GitHub Actions badge]: https://img.shields.io/github/workflow/status/hslua/hslua/CI.svg?logo=github
  [GitHub Actions]: https://github.com/hslua/hslua/actions
  [AppVeyor Status]: https://ci.appveyor.com/api/projects/status/ldutrilgxhpcau94/branch/main?svg=true
  [Hackage]: https://img.shields.io/hackage/v/lua.svg


  Overview
  --------

  [Lua](https://lua.org) is a small, well-designed, embeddable
  scripting language. It has become the de-facto default to make
  programs extensible and is widely used everywhere from servers
  over games and desktop applications up to security software and
  embedded devices. This package provides Haskell bindings to Lua,
  enable coders to embed the language into their programs, making
  them scriptable.

  *Lua* ships with the official Lua interpreter, version 5.3.6.
  Cabal flags allow to compile against a system-wide Lua
  installation instead, if desired.

  Build flags
  -----------

  The following cabal build flags are supported:

  - `system-lua`: Use the locally installed Lua version instead of
    the version shipped as part of this package.

  - `pkg-config`: Use *pkg-config* to discover library and include
    paths. Setting this flag implies `system-lua`.

  - `allow-unsafe-gc`: Allow optimizations which make Lua's garbage
    collection potentially unsafe; enabling this should be safe if
    there are no callbacks into Haskell during Lua garbage
    collection cycles. The flag should be *disabled* if Lua objects
    can have Haskell finalizers, i.e., `__gc` metamethods that call
    Haskell function.

    The flag is *enabled* per default, as Haskell functions are
    rarely used in finalizers. It can help to disable the flag if
    there are issues related to Lua's garbage collection.

  - `apicheck`: Compile Lua with its API checks enabled.

  - `lua_32bits`: Compile Lua for a 32-bits system (e.g., i386,
    PowerPC G4).

  - `export-dynamic`: Add all symbols to dynamic symbol table;
    disabling this will make it possible to create fully static
    binaries, but renders loading of dynamic C libraries impossible.

  - `hardcode-reg-keys`: Don't use CAPI to determine the names of
    certain registry key names but use hard coded values instead.
    This flag is required when compiling against Lua 5.3.3 or
    earlier, as those versions do not expose the necessary
    information in the @lauxlib.h@ header file. Setting this flag
    should usually be unproblematic, except if the used Lua version
    has been patched heavily.

  ### Example: using a different Lua version

  To use a system-wide installed Lua when linking *lua* as a
  dependency, build/install your package using
  `--constraint="lua +system-lua"`. For example, you can
  install Pandoc with hslua that uses system-wide Lua like this:

  ``` sh
  cabal install pandoc --constraint="lua +system-lua"
  ```

  or with stack:

  ``` sh
  stack install pandoc --flag=lua:system-lua
  ```
license-name: MIT
