homepage: https://github.com/chrisdone/lucid
changelog-type: markdown
hash: 02cb54f048225784195287377073ef2d415819cdbd22b536407d8c737fa94e91
test-bench-deps:
  lucid: -any
  bytestring: -any
  base: -any
  hspec: -any
  text: -any
  criterion: -any
  parsec: -any
  HUnit: -any
  blaze-builder: -any
  bifunctors: -any
  mtl: -any
  transformers: -any
  deepseq: -any
maintainer: chrisdone@gmail.com, oleg.grenrus@iki.fi
synopsis: Clear to write, read and edit DSL for HTML
changelog: |
  ## 2.9.13

  * Change internal attributes representation from HashMap to Map. This
    introduces stable ordering, at a negligible performance cost for
    realistic element sizes. This may affect some test suites.
  * doctype no longer accepts attributes. You can use `with` with
    `doctypeHtml` now, if needed.

  ## 2.9.12.1

  * Allow different orderings of attributes in test-suite

  ## 2.9.12

  * Add MonadFix instance

  ## 2.9.11

  * Add GHC-8.6 support
  * row-fluid and container-fluid instead of camelCase

  ## 2.9.10

  * Drop GHC-7.8 and older (pre-AMP) support
  * Generalise type-signatures to require only `Applicative` or `Functor`,
    when that's enough

  ## 2.9.9

  * Add `commuteHtmlT` to commute `HtmlT m a` into `m (HtmlT n a)`.
  * Add `MonadError e m => MonadError e (HtmlT m)` and
    `MonadWriter w m => MonadWriter w (HtmlT m)` instances

  ## 2.9.8.1

  * Improve performance by adding `INLINE` pragmas to `Monad` etc. combinators.

  ## 2.9.8

  * Add `integrity_`, `crossorigin_` attributes
  * Add `classes_` smart attribute constructor
  * Add `ToHtml (HtmlT m a)` instance

  ## 2.9.7

  * Add `Semigroup (HtmlT m a)` instance
  * Add `MonadState` and `MonadReader` instances

  ## 2.9.6

  * Fix compilation of benchmarks
  * Add @athanclark's version of `relaxHtmlT`
  * Add a utility to generalize the underlying monad from Identity: `relaxHtmlT`

  ## 2.9.5

  * Add ToHtml instance for ByteString (both)
  * Add `MFunctor HtmlT` instance, i.e. `hoist` from @mmorph@.

  ## 2.9.1

  * Small performance tweaks.
  * Make svg_ an element.

  ## 2.6

  * Restrict monoid instance's a to ~ () (means you can use mempty
    without inference errors)

  ## 2.2

  * Export renderToFile from top-level Lucid module.

  ## 2.1

  * Add some extra HTML tags.

  ## 2.0

  * Use variadic HTML terms.
  * Add lazy Text instance for ToHtml.

  ## 1.0

  * Initial version.
basic-deps:
  bytestring: '>=0.10.6.0'
  base: '>=4.8 && <4.16'
  unordered-containers: '>=0.2.5.1'
  text: '>=1.2.0.2'
  containers: '>=0.5.6.2'
  blaze-builder: '>=0.4.0.0'
  mtl: '>=2.2'
  mmorph: '>=1.0.3'
  hashable: '>=1.2.3.2'
  transformers: '>=0.4.2.0'
all-versions:
- '0.0'
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '1.0'
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- '2.5'
- 2.6.0
- 2.6.1
- 2.7.0
- 2.8.0
- 2.8.1
- 2.9.0
- 2.9.1
- 2.9.2
- 2.9.3
- 2.9.4
- 2.9.5
- 2.9.6
- 2.9.7
- 2.9.8
- 2.9.8.1
- 2.9.9
- 2.9.10
- 2.9.11
- 2.9.12
- 2.9.12.1
- 2.9.13
- 2.10.0
author: Chris Done
latest: 2.10.0
description-type: markdown
description: |
  lucid [![Hackage](https://img.shields.io/hackage/v/lucid.svg?style=flat)](https://hackage.haskell.org/package/lucid) [![Build Status](https://travis-ci.org/chrisdone/lucid.png)](https://travis-ci.org/chrisdone/lucid)
  =====

  Clear to write, read and edit DSL for writing HTML

  [Documentation](http://chrisdone.github.io/lucid/)

  [lucid-from-html](https://github.com/dbaynard/lucid-from-html) will convert html to the `lucid` DSL, though it is experimental.

  ## Introduction

  HTML terms in Lucid are written with a postfix ‘`_`’ to indicate data
  rather than code. Some examples:

  `p_`, `class_`, `table_`, `style_`

  See `Lucid.Html5` for a complete list of Html5 combinators.

  Plain text is written using the `OverloadedStrings` and
  `ExtendedDefaultRules` extensions, and is automatically escaped:

  ``` haskell
  λ> "123 < 456" :: Html ()
  ```

  ``` html
  123 &lt; 456
  ```

  Elements nest by function application:

  ``` haskell
  λ> table_ (tr_ (td_ (p_ "Hello, World!"))) :: Html ()
  ```

  ``` html
  <table><tr><td><p>Hello, World!</p></td></tr></table>
  ```

  Elements are juxtaposed via monoidal append:

  ``` haskell
  λ> p_ "hello" <> p_ "sup" :: Html ()
  ```

  ``` html
  <p>hello</p><p>sup</p>
  ```

  Or monadic sequencing:

  ``` haskell
  λ> div_ (do p_ "hello"; p_ "sup") :: Html ()
  ```

  ``` html
  <div><p>hello</p><p>sup</p></div>
  ```

  Attributes are set by providing an argument list:

  ``` haskell
  λ> p_ [class_ "brand"] "Lucid Inc" :: Html ()
  ```

  ``` html
  <p class="brand">Lucid Inc</p>
  ```

  Here is a fuller example of Lucid:

  ``` haskell
  table_ [rows_ "2"]
         (tr_ (do td_ [class_ "top",colspan_ "2",style_ "color:red"]
                      (p_ "Hello, attributes!")
                  td_ "yay!"))
  ```

  ``` html
  <table rows="2">
    <tr>
      <td style="color:red" colspan="2" class="top">
        <p>Hello, attributes!</p>
      </td>
      <td>yay!</td>
    </tr>
  </table>
  ```

  ## Rendering

  For proper rendering you can easily run some HTML immediately with:

  ``` haskell
  λ> renderText (p_ "Hello!")
  ```

  ``` html
  "<p>Hello!</p>"
  ```

  Or to bytes:

  ``` haskell
  λ> renderBS (p_ [style_ "color:red"] "Hello!")
  ```

  ``` html
  "<p style=\"color:red\">Hello!</p>"
  ```

  For ease of use in GHCi, there is a `Show` instance, as
  demonstrated above.

  If the above rendering functions aren't suited for your purpose, you
  can run the monad directly via `execHtml` and use the more low-level
  blaze `Builder`, which has a plethora of output modes in
  Blaze.ByteString.Builder.

  See the documentation for the `Lucid` module for information about
  using it as a monad transformer.

  ## Transforming

  You can use `lift` to call parent monads.

  ``` haskell
  λ> runReader (renderTextT (html_ (body_ (do name <- lift ask
                                              p_ [class_ "name"] (toHtml name)))))
               ("Chris" :: String)
  ```
  ``` html
  "<html><body><p class=\"name\">Chris</p></body></html>"
  ```
license-name: BSD-3-Clause
