all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
- 0.3.6.0
- 0.3.7.0
- 0.3.8.0
- 0.3.9.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.5.3.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.3.0
- 0.6.3.1
- 0.7.1.0
- 0.7.2.0
- 0.7.3.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.8.1.2
- 0.8.2.0
- 1.0.0.0
- 1.1.0.0
author: Daniel Gr√∂ber <cabal-helper@dxld.at>
basic-deps:
  Cabal: '>=1.24.2.0 && <1.26 || >=2.0 && <2.5 || >=3.0 && <3.4'
  SHA: <1.7 && >=1.6.4.4
  base: '>=4.9.1.0 && <5'
  bytestring: '>=0.10.8.1 && <0.11'
  cabal-plan: <0.8 && >=0.5.0.0
  clock: <0.9 && >=0.7.2
  containers: '>=0.5.7.1 && <1'
  directory: '>=1.3.0.0 && <1.4'
  filepath: '>=1.4.1.1 && <1.5'
  ghc-prim: '>=0'
  mtl: <2.3 && >=2.0
  process: <1.7 && >=1.4.3.0
  semigroupoids: <5.4 && >=5.2
  semigroups: <0.19 && >=0.18
  template-haskell: <2.17 && >=2.11.1.0
  temporary: <1.4 && >=1.2.1
  text: <1.3 && >=1.0.0.0
  time: <1.10 && >=1.6.0.1
  transformers: <0.6 && >=0.5.2.0
  unix: '>=2.7.2.1 && <2.8'
  unix-compat: <0.6 && >=0.4.3.1
  utf8-string: <1.1 && >=1.0.1.1
changelog: ''
changelog-type: ''
description: "# The `cabal-helper` library\n[![build status](https://gitlab.com/dxld/cabal-helper/badges/master/pipeline.svg)](https://gitlab.com/dxld/cabal-helper/commits/master)\n\nThe
  purpose of the `cabal-helper` library is to give Haskell development\ntools access
  to the same environment which build tools such as\n[cabal](https://www.haskell.org/cabal)
  and\n[stack](https://www.haskellstack.org) normally provide to the compiler.\n\n##
  Introduction\n\nIn the Haskell ecosystem the most widely used [build system](#build-system)
  is\nthe [`Cabal` library](https://hackage.haskell.org/package/Cabal), not to be\nconfused
  with the `cabal` *build tool* which is usually refered to by it's\npackage-name:
  `cabal-install` to disambiguate.\n\nAll contemporary meta *build tools* such as
  `cabal` and `stack` as well as some\ncustom Haskell [build systems](#build-system)
  use the `Cabal` library as their\nfoundation. For example the Glasgow Haskell Compiler's
  bespoke GNU Make based\nbuild system also utilises the `Cabal` library at its core.\n\nWe
  capitalize on this fact by using build information `Cabal` writes to disk as\nthe
  common denominator between all Haskell *build tools*. This allows us to\neasily
  support a variety of *build tools* without incuring significant\nadditional complexity.\n\n##
  Technical Background\n\n### Haskell Packages and `Setup.hs`\n\nEssentially all Haskell
  packages implement\n[\"The Haskell Cabal\" (pdf)](https://www.haskell.org/cabal/proposal/pkg-spec.pdf)\npackaging
  specification. The `Cabal` library and `cabal-install` *build tool*\nare named after
  this specification. Yes we really love confusing naming in\nHaskell land.\n\nThe
  specification revolves around this `Setup.hs` script file you might\nhave seen before.
  Basically the idea is a Haskell source package consists\nof, at the very least,
  a `Setup.hs` file, which is a Haskell program that\nprovides a well defined command-line
  interface for configuring, building\nand installing it. Haskell developers can use
  *build tools*, such as\n`cabal`, which interface with `Setup.hs` and provide functionality
  on top\nit.\n\nNote that even though originally packages were meant to be free to\nimplement
  the `Setup.hs` interface however they like, this hasn't been\nsupported by build
  tools for a long time. In practice use of the `Cabal`\nlibrary in `Setup.hs` is
  mandatory.\n\nNow, the first step of building a package in \"The Haskell Cabal\"
  is to call\n`Setup.hs`'s `configure` command:\n\n    $ runhaskell Setup.hs configure\n\nWhen
  invoking `Setup.hs` the default behaviour of the `Cabal` library is to\nfirst read
  the `<pkg-name>.cabal` configuration file to determine how the\nproject is structured
  and what dependencies it has. In the case of\n`configure` it will then probe the
  system it's running on about:\n\n - the list of available Haskell packages,\n -
  system package dependencies (using pkg-config) and\n - Haskell compiler type, version
  and supported language extensions (among\n   other things).\n\nFinally Haskell package
  dependency resolution is also run.\n \n`Cabal` then writes all the gathered information
  on the concrete\nconfiguration of the package into a file called `setup-config`.
  Subsequent\nsteps, such as`runhaskell Setup.hs build`, will then read this state
  file\ninstead of `<package-name>.cabal` to avoid having to probe the system or\nrun
  dependency resolution again.\n\nIt is this file that `cabal-helper` is primarily
  concerned with reading and\npresenting in a usable manner. Reading this file essentially
  means that all\nthe complicated work has already been done for us and we can get
  straight\nto running the compiler.\n\n### Multi-package projects\n\nSo far so good.
  That's pretty much the end of the story for the traditional\n`cabal build` commands
  but what about `cabal new-build` and Stack I hear\nyou asking?\n\nWell, essentially
  both new-build and Stack simply build on top of the\ntraditional `Setup.hs` interface.
  So the `setup-config` file is still there\nin all it's glory, we just have to deal
  with more than one of it since both\nbuild-tools support multiple packages and `Setup.hs`
  only knows how to deal\nwith a single package at a time.\n\nTo support this cabal-helper
  has grown a representation of what a project\nis in it's API starting with the 1.0
  series. We currently support both\nnew-build and Stack. The API is designed to allow
  extending support to\ncustom build systems such as GHC's but we have not done this
  yet.\n\n### The \"Helper\" in cabal-helper\n\nIn the API docs you will find frequent
  mentions of \"the helper executable\"\nso I'll explain what that is here because
  it is quite fundamental to how\nthings work in the codebase.\n\nThe fundamental
  problem cabal-helper solves is the fact that in order to\naccess the data Cabal
  stores in the `setup-config` file we have to link\nagainst `lib:Cabal`. However
  the binary format of this file is unstable and\nthere is no backwards compatibility
  mechanism in the library. So to read a\n`setup-config` file produced by a certain
  version of Cabal we have to link\nagainst exactly that version.\n\nNot only that
  but usally the `cabal` commandline tool controls which Cabal\nlibrary version is
  used, so we really just have to deal with whatever we\nget.\n\nTo solve this problem
  the cabal-helper library builds a small executable at\nruntime who's only purpose
  is to link against `lib:Cabal`, read the\ncontents of `setup-config` and present
  the data there in a Cabal version\nindependent format for consumption by the cabal-helper
  library.\n\nRecently some work was merged into cabal to have `Setup.hs` to do this\nnatively
  (https://github.com/haskell/cabal/pull/5954), we're planning to\nuse this eventually
  to replace our \"helper\".\n\n## IRC\n\nIf you have any problems, suggestions, comments
  swing by\n[\\#ghc-mod (web client)](https://kiwiirc.com/client/irc.freenode.org/ghc-mod)
  on\nFreenode. If you're reporting a bug please also create an issue\n[here](https://github.com/DanielG/cabal-helper/issues)
  so we have a way to\ncontact you if you don't have time to stay.\n\nDo hang around
  for a while if no one answers and repeat your question if you\nstill haven't gotten
  any answer after a day or so. You're most likely to get an\nanswer during the day
  in GMT+1.\n"
description-type: markdown
hash: aeef8a5802742bf6c3e1119e3debfb28c34b4862bcc48e233419dc85efeede21
homepage: ''
latest: 1.1.0.0
license-name: Apache-2.0
maintainer: cabal-helper@dxld.at
synopsis: Give Haskell development tools access to Cabal project environment
test-bench-deps:
  Cabal: '>=1.24.2.0 && <1.26 || >=2.0 && <2.5 || >=3.0 && <3.4'
  SHA: '>=1.6.4.4 && <1.7'
  base: '>=4.9.1.0 && <5'
  bytestring: '>=0.10.8.1 && <0.11'
  cabal-plan: '>=0.5.0.0 && <0.8'
  clock: '>=0.7.2 && <0.9'
  containers: '>=0.5.7.1 && <1'
  directory: '>=1.3.0.0 && <1.4'
  filepath: '>=1.4.1.1 && <1.5'
  ghc: <8.11 && >=8.0.2
  mtl: '>=2.0 && <2.3'
  pretty-show: '>=1.8.1 && <1.9'
  process: '>=1.4.3.0 && <1.7'
  semigroupoids: '>=5.2 && <5.4'
  semigroups: '>=0.18 && <0.19'
  template-haskell: '>=2.11.1.0 && <2.17'
  temporary: '>=1.2.1 && <1.4'
  text: '>=1.0.0.0 && <1.3'
  time: '>=1.6.0.1 && <1.10'
  transformers: '>=0.5.2.0 && <0.6'
  unix: '>=2.7.2.1 && <2.8'
  unix-compat: '>=0.4.3.1 && <0.6'
  utf8-string: '>=1.0.1.1 && <1.1'
