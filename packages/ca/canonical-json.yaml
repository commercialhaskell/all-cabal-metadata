all-versions:
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.6.0.1
author: Duncan Coutts, Edsko de Vries
basic-deps:
  base: '>=4.5 && <5'
  bytestring: '>=0.10.4 && <0.13'
  containers: '>=0.4 && <0.8'
  deepseq: '>=1.2 && <1.6'
  parsec: '>=3.1 && <3.2'
  pretty: '>=1.0 && <1.2'
changelog: |
  # Revision history for canonical-json

  ## 0.6.0.1 2022-09-19

  * Support GHC 9.2 and 9.4, and bytestring 0.11.x

  * Support recent versions of QuickCheck and Aeson in the tests

  * Fix the domain of a property test `prop_aeson_canonical`

  * Add CI on github covering GHC versions 8.0, 8.2, 8.4, 8.6, 8.8, 8.10, 9.2

  ## 0.6.0.0 2019-07-31

  * Introduced JSString type rather than using String, for improved memory use.

  * Improved parser performance

  * Reduce stack space usage and introduce stack use tests

  * Added benchmarks

  ## 0.5.0.1 2018-10-26

  * ghc-8.4 compatibility.
  * Move the test suite from the hackage-security library

  ## 0.5.0.0 2017-09-06

  * Canonical JSON code extracted from hackage-security-0.5.2.2 into
    separate library.
changelog-type: markdown
description: |+
  An implementation of [Canonical JSON].

  The "canonical JSON" format is designed to provide repeatable hashes of
  JSON values. It is designed for applications that need to hash, sign
  or authenitcate JSON data structures., including embedded signatures.

  Canonical JSON is parsable with any full JSON parser, and it allows white
  space for pretty-printed human readable presentation, but it can be put into
  a canonical form which then has a stable serialised representation and thus a
  stable hash.

  The basic concept is that a file in the canonical JSON format can be read
  using `parseCanonicalJSON`. Note that this input file does *not* itself need
  to be in canonical form, it just needs to be in the canonical JSON format.
  Then the `renderCanonicalJSON` function is used to render into the canonical
  form. This is then the form that can be hashed or signed etc.

  The `prettyCanonicalJSON` is for convenience to render in a human readable
  style, since the canoncal form eliminates unnecessary white space which
  makes the output hard to read. This style is again suitable to read using
  'parseCanonicalJSON'. So this is suitable to use for producing output that
  has to be later hashed or otherwise checked.

  See the [API docs] on Hackage.

  This package has been extracted from the [hackage-security] package where
  canonical JSON is used for all the signed TUF files, such as the
  [root keys file], etc. As you can see from that, canoncal JSON allows keeping
  JSON files in a human readable pretty-printed form, and still allows verifying
  signatures. In particular this demonstrates the use of embedded signatures,
  where the `root.json` both contains a body value and multiple signatures of
  that body all within the same file. This is because canoncal JSON is about
  hashes for *JSON values, not serialised JSON text*.

  [Canonical JSON]: http://wiki.laptop.org/go/Canonical_JSON
  [API docs]: https://hackage.haskell.org/package/canonical-json
  [hackage-security]: https://hackage.haskell.org/package/hackage-security
  [root keys file]: https://hackage.haskell.org/root.json


  Known bugs limitations
  -----------------------

   * Decoding/encoding Unicode code-points beyond `U+00ff` is currently broken

description-type: markdown
hash: 48eaf084d542ca7a9d41b09f8670be9c5f9c14b188449d8a1c6ed3657f190ca0
homepage: https://github.com/well-typed/canonical-json
latest: 0.6.0.1
license-name: BSD-3-Clause
maintainer: duncan@well-typed.com, edsko@well-typed.com
synopsis: Canonical JSON for signing and hashing JSON values
test-bench-deps:
  QuickCheck: '>=2.11 && <2.16'
  aeson: '>=1.4 && <2.3'
  base: '>=0'
  bytestring: '>=0'
  canonical-json: '>=0'
  containers: '>=0'
  criterion: '>=1.1'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
