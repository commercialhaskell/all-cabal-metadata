all-versions:
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.11
- 0.1.12
- 0.1.13
- 0.1.14
- 0.1.15
- 0.1.16
- '0.2'
- 0.2.1
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.8.7
- 0.8.8
- 0.8.9
- '0.9'
- 0.9.2
- 0.9.3
- 0.9.4
- 0.9.5
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.4
- 1.0.5
- 1.1.0
- 1.2.0
- 1.3.0
- 1.4.0
- 1.5.0
- 1.6.0
- 2.0.0
- 2.2.1
- 2.3.0
- 2.4.0
- 2.5.0
author: Daniel Trstenjak
basic-deps:
  Cabal: '>=3.12 && <4.0'
  aeson: '>=1.2.3.0 && <2.3'
  base: '>=4.6.0.0 && <5'
  bytestring: '>=0.10.8.2 && <1.0'
  cabal-bounds: '>=0'
  cabal-lenses: '>=0.8.0 && <1.0'
  cmdargs: '>=0.10.5 && <0.11'
  directory: '>=1.2 && <1.4'
  filepath: '>=1.3 && <1.6'
  lens: '>=4.0.1 && <6.0'
  lens-aeson: '>=1.0.2 && <1.3'
  strict: '>=0.3.2 && <0.6'
  text: '>=1.1.0.1 && <2.2'
  transformers: '>=0.3.0.0 && <0.7'
  unordered-containers: '>=0.2.3.3 && <0.3'
changelog: |
  2.5.0
  -----
  * Support ghc 9.8.2

  2.4.0
  -----
  * Support Cabal 3.12
  * Tested with ghc 9.4.7

  2.3.0
  -----
  * Support Cabal 3.0
  * Tested with ghc 8.10.1

  2.2.1
  -----
  * First consider the cabal new style directory 'dist-newstyle' and then the old one 'dist'

  2.2.0
  ------------
  * Support Cabal 2.4 and ghc 8.6

  2.1.*
  -----
  Deprecated versions of cabal-bounds

  2.0.0
  -----
  * Migrate from EitherT to ExceptT

  1.6.0
  -----
  * Support Cabal 2.2
  * Tested with GHC 8.4.2
  * Added cabal-bounds command 'format', for just reformating the cabal file

  1.5.0
  -----
  * Support Cabal 2.1

  1.4.0
  -----
  * Don't ignore the 'base' library anymore
  * Bug fix parsing of 'cabal new-build' plan file

  1.3.0
  -----
  * Support 'cabal new-build'
  * Add 'libs' subcommand for outputing the libs used by an 'update' run
  * Bugfix for missing upper/lower bounds

  1.1.0
  -----
  * By default 'update' now only widens the lower and upper bounds.
    So it's easier to raise the upper bounds by just calling
    'cabal install --allow-newer' and then 'cabal-bounds update'.

  1.0.4
  -----
  * Raise upper bounds of dependencies
  * Support GHC 8.0.1

  1.0.2
  -----
  * Raise upper bounds of dependencies

  1.0.1
  -----
  * Make tests less dependent on the cabal/ghc version

  1.0.0
  -----
  * Automatically find the cabal and setup-config file
  * Ignore the base library by default
  * Add the only/ignore options to the 'dump' command

  0.9.5
  -----
  * Support Haskell Platform 7.10.2
  * Raise upper bounds of dependencies

  0.9.4
  -----
  * Fix misbehaving argument handling of 'dump' command

  0.9.3
  -----
  * Support GHC 7.10.1

  0.9.2
  -----
  * fix bugs introduced with 0.9.1

  0.9.1
  -----
  * Updates for Cabal 1.22.1
  * Ensure that cabal files end with a newline
  * Don't unnecessarly add '0' to lower bound versions

  0.9
  ---
  * Updates for Cabal 1.22

  0.8.8, 0.8.9
  ------------
  * Raise upper bounds of dependencies

  0.8.7
  -----
  * Fixing build failure of tasty 0.8.1.3

  0.8.6
  -----
  * Build/tested with GHC 7.8.3
  * Simplified implementation

  0.8.5
  -----
  * Raise upper bounds of dependencies

  0.8.2-0.8.4
  -----------
  * Minor changes regarding tests

  0.8.1
  -----
  * Automatically build the setup-config file for the tests

  0.8
  ---
  * Add command 'cabal-bounds dump'
  * Add option 'fromfile' to command 'cabal-bounds update'
  * Support Haskell Platform 2014.2.0.0
  * Bugfix for increasing the upper bounds version number
changelog-type: text
description: "cabal-bounds\n============\n\nA command line program for managing the
  bounds/versions of the dependencies in a cabal file.\n\n`cabal-bounds` is able to
  do these things with the bounds of the dependencies in the cabal file:\n* drop them\n*
  update them by the library versions of the current cabal build\n* update them by
  the library versions of a haskell platform release\n* update them by the library
  versions specified by a file\n* dump the libraries/dependencies and their lower
  bound versions from the cabal file(s) into a file\n\nExample: Initialize Bounds\n==========================\n\nIf
  you have started a new project, created a cabal file, added dependencies to it,\nbuild
  it, and now want to set the lower and upper bounds of the dependencies\naccording
  to the currently used versions of the build, then you can just call:\n\n    $> cabal-bounds
  update\n\nThis call will update the bounds of the dependencies of the cabal file
  in the working directory.\n\nExample: Raise the Upper Bounds\n===============================\n\nIf
  you have several cabalized projects, then it can be quite time consuming to keep
  the\nbounds of your dependencies up to date. Especially if you're following the
  [package versioning policy](<http://www.haskell.org/haskellwiki/Package_versioning_policy>),\nthen
  you want to raise your upper bounds from time to time, to allow the building with
  newer\nversions of the dependencies.\n\n`cabal-bounds` tries to automate this update
  process to some degree. So a typical update process might look like:\n\n    # update
  the version infos of all packages\n    $> cabal update\n      \n    # build the
  project and allow newer versions of the dependencies as specified in the cabal file\n
  \   $> cabal build --allow-newer='THE_PROJECT_NAME:*'\n\n    # update the upper
  bound of all dependencies in the cabal file, if their upper bound is lower\n    #
  than the version used by the build\n    $> cabal-bounds update --upper\n\nIf you're
  leaving out the `--upper` flag then `update` will widen the bounds on both directions.\nSo
  the upper bound will only be updated it it's lower and the lower bound only if it's
  greater.\n\nExample: Update Bounds by Haskell Platform\n==========================================\n\nEnsuring
  that your project builds with the current [haskell platform](<https://www.haskell.org/platform/>)
  - or\nperhaps the last two ones - can make it, especially for beginners, a lot easier
  to build your project.\n\n`cabal-bounds` supports the updating of the bounds by
  the library versions of a specific haskell platform release.\n\nTo update the bounds
  to the haskell platform `2013.2.0.0`:\n\n    $> cabal-bounds update --haskell-platform=2013.2.0.0\n\nThere're
  two additional symbolic names for specifying a haskell platform release: `current`
  and `previous`.\n\nSo one use case might be to initialize the bounds to library
  versions used by a haskell platform release,\ntest if your project builds and works
  with these, and then raise the upper bounds to the newest available versions:\n\n
  \   # intialize the bounds to the previous haskell platform release\n    $> cabal-bounds
  update --haskell-platform=previous\n\n    # build and test the project\n\n    #
  initialize the bounds not present in the haskell platform\n    $> cabal-bounds update\n\nExample:
  Update Bounds by File\n==============================\n\nIt's also possible to update
  the bounds by library versions specified in a file:\n\n    $> cabal-bounds update
  --fromfile=libs.hs\n\nThe `libs.hs` file has to be of the format:\n\n    [ (\"libA\",
  [0,2,1]), (\"libB\", [2,1]), (\"libC\", [1]) ]\n\nIf you specify a library file
  and a haskell platform release at once, then first the\nhaskell platform libraries
  and versions are considered and then the library file.\n\nThe library file can be
  created by the `dump` command:\n\n    $> cabal-bounds dump --output=libs.hs\n\nThe
  `dump` command will dump dependencies with their lower bound version. The command
  can take multiple cabal files.\nIf the same dependencies is present in multiple
  files, then the lowest lower bound version is taken.\n\nExample: Bound Changes\n======================\n\nThe
  `=>` shows what the result is of the operation for every dependency. Left is the
  dependency before\ncalling the command, right the one after calling.\n\n    $> cabal-bounds
  drop\n    lens >=4.0.1 && <4.1   =>   lens\n\n    $> cabal-bounds drop --upper\n
  \   lens >=4.0.1 && <4.1   =>   lens >=4.0.1\n\nIf the cabal build (the setup-config)
  uses `lens 4.1.2`, then the results of the `update` command would be:\n\n    $>
  cabal-bounds update\n    lens >=4.0.1 && <4.1   =>   lens >=4.0.1 && <4.2\n    lens
  \                  =>   lens >=4.1.2 && <4.2\n\n    $> cabal-bounds update --lower\n
  \   lens >=4.0.1 && <5     =>   lens >=4.0.1 && <5\n    lens >=4.0.1 && <4.1   =>
  \  lens >=4.0.1 && <4.1\n    lens <4.1              =>   lens >=4.1.2\n    lens
  \                  =>   lens >=4.1.2\n\n    $> cabal-bounds update --upper\n    lens
  >=4.0.1 && <4.1   =>   lens >=4.0.1 && <4.2\n    lens >=4.0.1           =>   lens
  >=4.0.1 && <4.2\n    lens                   =>   lens <4.2\n\nYou can also specify
  which component of the version number should be updated:\n\n    $> cabal-bounds
  update --lowercomp=major1\n    lens >=4.0.1 && <4.1   =>   lens >=4 && <4.1\n\n
  \   $> cabal-bounds update --uppercomp=minor\n    lens >=4.0.1 && <4.1   =>   lens
  >=4.0.1 && <4.1.3\n\n    $> cabal-bounds update --uppercomp=major2\n    lens >=4.0.1
  && <4.1   =>   lens >=4.0.1 && <4.2\n\n    $> cabal-bounds update --uppercomp=major1\n
  \   lens >=4.0.1 && <4.1   =>   lens >=4.0.1 && <5\n\nOptions\n=======\n\nYou can
  restrict the modification to certain sections in the cabal file by specifing the
  type and the name of the section:\n* `--library`\n* `--executable=name`\n* `--testsuite=name`\n*
  `--benchmark=name`\n\nIf you omit these options, then all sections are considered
  and modified.\n\nYou can also restrict the modification of dependencies by specifing
  which dependencies should only or shouldn't be modified:\n* `--only=name`\n* `--ignore=name`\n\nYou
  can also only update the dependencies without a bound by specifying the `--missing`
  flag.\nIf you omit these options, then all dependencies are considered and modified.\n\nAll
  options taking a name can be specified multiple times:\ne.g. `--executable=exe1
  --executable=exe2` or `--ignore=base --ignore=whatever`\n\nPlease consult `cabal-bounds
  --help` for a complete list of options.\n\nIssues\n======\n\nPerhaps the currently
  most annoying thing is, that you have to live with the reformating of your\n`cabal`
  file done by the pretty printer of the `Cabal` library.\n\nTo only reformat your
  `cabal` file you can call `cabal-bounds format`.\n"
description-type: markdown
hash: 2216f8fef782b5fa0b344895d160fb798d4fdcb712d74c66f635ac95c7ad8cb6
homepage: ''
latest: 2.5.0
license-name: BSD-3-Clause
maintainer: daniel.trstenjak@gmail.com
synopsis: A command line program for managing the dependency versions in a cabal file.
test-bench-deps:
  Glob: '>=0.7 && <0.11'
  base: '>=3 && <5'
  cabal-bounds: '>=0'
  directory: '>=1.2 && <1.4'
  filepath: '>=1.3 && <1.6'
  process: '>=1.1.0.2 && <1.7'
  tasty: '>=0.9.0.1 && <1.6'
  tasty-golden: '>=2.2.0.2 && <2.4'
