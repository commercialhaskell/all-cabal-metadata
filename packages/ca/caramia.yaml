all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.7.0.1
- 0.7.1.0
- 0.7.1.1
- 0.7.2.0
- 0.7.2.1
- 0.7.2.2
author: Mikko Juola
basic-deps:
  base: '>=4.7 && <5.0.0.0'
  bytestring: '>=0.10 && <1.0'
  containers: '>=0.5 && <1.0'
  exceptions: '>=0.6 && <1.0'
  gl: '>=0.7.3 && <1.0'
  lens: '>=4.6 && <5.0'
  linear: '>=1.18 && <2.0'
  mtl: '>=2.1 && <3.0'
  semigroups: '>=0.15 && <1.0'
  text: '>=0.9 && <2.0'
  transformers: '>=0.3 && <1.0'
  vector: '>=0.10 && <1.0'
changelog: |+
  0.7.2.1 -> 0.7.2.2
  -------------------

   - 'linear' dependency bumped to >=1.18.

   - 'sdl2' dependency in tests downgraded to 1.3 from 2.0.

changelog-type: markdown
description: |+
  [![Hackage](https://img.shields.io/hackage/v/caramia.svg)](https://hackage.haskell.org/package/caramia)
  [![Build Status](https://travis-ci.org/Noeda/caramia.svg?branch=master)](https://travis-ci.org/Noeda/caramia)

  This is a highish-level OpenGL bindings library for real-time graphics for
  Haskell, with minimum OpenGL version being 2.1.

  Requirements:

    * GHC 7.8+
    * OpenGL 2.1 (with some extensions)

  If the target system has OpenGL 3.3, then all features in this library should
  be available unless stated otherwise. OpenGL contexts with 3.x or later
  versions can be a core profile; this library does not care.

  You need to use `-threaded` flag in executables that use this library.

  Here are the most important features of this library:

    * Safe and automatic finalization of OpenGL resources, with optional prompt
      finalization.

    * No implicit state (that is, no glBind* mess or equivalent). There is a
      monad for mass-rendering that has implicit state but the state is localized
      to running of that monad. (see Caramia.Render).

  Here are some curious features that you might find useful.

    * This library plays nice with other OpenGL libraries. It does not mess up
      the implicit OpenGL state (except for aforementioned rendering monad).

    * This library does not create an OpenGL context. You can use whatever
      library you want to create an OpenGL context as long as it can get an
      OpenGL 2.1 (or any later version) context. You may be interested at looking
      at the tests in this package to see how to use this with the `sdl2`
      package.

    * Operations are generalized over `MonadIO`. Works on top of pure `IO` and
      also in your custom monad stacks, if they have `MonadIO` at bottom.

  (At least) the following OpenGL concepts are present in this library:

    * Buffer objects (you can do low-level mapping and use raw pointers)

    * Geometry, vertex and fragment shaders

    * Indexed and non-indexed rendering

    * Framebuffers

    * Textures (with many topologies, 1D, 2D, 3D, texture arrays, cube textures;
      we also have buffer textures and multisampling textures)

    * Vertex array objects

    * Blending, stencil, depth and cull tests

    * Instanced rendering

    * Synchronization objects

    * Query objects

  This library tries to avoid including obsolete or redundant features of OpenGL.

  Note that the library is in flux and API-breaking changes tend to happen
  often.

description-type: markdown
hash: 3ad5540f150ac5873305538082f25393d0ffd8f861bb7c9743d52f2778417818
homepage: https://github.com/Noeda/caramia/
latest: 0.7.2.2
license-name: MIT
maintainer: mikjuo@gmail.com
synopsis: High-level OpenGL bindings
test-bench-deps:
  HUnit: '>=1.2.5.2 && <2.0'
  base: '>=0'
  caramia: '>=0'
  containers: '>=0.5.5 && <1.0'
  linear: '>=1.18 && <2.0'
  sdl2: '>=1.3 && <2.0'
  test-framework: '>=0.8.1 && <1.0'
  test-framework-hunit: '>=0.3.0.1 && <1.0'
  test-framework-quickcheck2: '>=0.3.0.3 && <1.0'
  transformers: '>=0.3 && <1.0'
