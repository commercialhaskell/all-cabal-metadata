homepage: https://github.com/haskell-works/cabal-cache
changelog-type: ''
hash: 0ee9c14305a6f7d236b044619cb33eb2853f4c481d449be8fcd0b8c028b6c704
test-bench-deps:
  cabal-cache: -any
  bytestring: '>=0.10.8.2 && <0.12'
  base: '>=4.7 && <5'
  hspec: '>=2.4 && <3'
  text: '>=1.2.3.1 && <2.1'
  filepath: '>=1.3 && <1.5'
  hedgehog: '>=1.0 && <1.2'
  antiope-core: '>=7.4.4 && <8'
  lens: '>=4.17 && <6'
  raw-strings-qq: '>=1.1 && <2'
  network-uri: '>=2.6.4.1 && <2.8'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.4.2.0 && <2.1'
  hw-hspec-hedgehog: '>=0.1.0.4 && <0.2'
maintainer: newhoggy@gmail.com
synopsis: CI Assistant for Haskell projects
changelog: ''
basic-deps:
  http-client: '>=0.5.14 && <0.8'
  cabal-cache: -any
  amazonka: '>=1.6.1 && <1.7'
  exceptions: '>=0.10.1 && <0.11'
  bytestring: '>=0.10.8.2 && <0.12'
  unliftio: '>=0.2.10 && <0.3'
  stm: '>=2.5.0.0 && <3'
  base: '>=4.7 && <5'
  text: '>=1.2.3.1 && <2.1'
  stringsearch: '>=0.3.6.6 && <0.4'
  filepath: '>=1.3 && <1.5'
  process: '>=1.6.5.0 && <1.7'
  antiope-core: '>=7.4.4 && <8'
  antiope-optparse-applicative: '>=7.4.4 && <8'
  relation: '>=0.5 && <0.6'
  containers: '>=0.6.0.1 && <0.7'
  lens: '>=4.17 && <6'
  amazonka-core: '>=1.6.1 && <1.7'
  http-client-tls: '>=0.3 && <0.4'
  antiope-s3: '>=7.4.4 && <8'
  cryptonite: '>=0.25 && <1'
  network-uri: '>=2.6.4.1 && <2.8'
  mtl: '>=2.2.2 && <2.3'
  topograph: '>=1 && <2'
  generic-lens: '>=1.1.0.0 && <2.3'
  transformers: '>=0.5.6.2 && <0.7'
  temporary: '>=1.3 && <1.4'
  optparse-applicative: '>=0.14 && <0.18'
  deepseq: '>=1.4.4.0 && <1.5'
  resourcet: '>=1.2.2 && <1.3'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=1.4.2.0 && <2.1'
  amazonka-s3: '>=1.6.1 && <1.7'
  directory: '>=1.3.3.0 && <1.4'
all-versions:
- 0.2.0.2
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
- 1.0.0.5
- 1.0.0.6
- 1.0.0.7
- 1.0.0.8
- 1.0.0.9
- 1.0.0.10
- 1.0.0.11
- 1.0.0.12
- 1.0.1.0
- 1.0.1.1
- 1.0.1.2
- 1.0.1.3
- 1.0.1.4
- 1.0.1.5
- 1.0.1.6
- 1.0.1.7
- 1.0.1.8
- 1.0.1.9
- 1.0.2.0
- 1.0.2.1
- 1.0.3.0
- 1.0.4.0
- 1.0.5.0
author: John Ky
latest: 1.0.5.0
description-type: markdown
description: |+
  # cabal-cache
  [![master](https://circleci.com/gh/haskell-works/cabal-cache/tree/master.svg?style=svg)](https://circleci.com/gh/haskell-works/cabal-cache/tree/master)

  Tool for caching built cabal new-build packages.

  The tool is useful in development when you want to share your build haskell package dependencies of
  of a particular project with another developer and also in CI where caching is useful for reducing
  build times.

  `cabal-cache` supports syncing to an archive directory or to an S3 bucket.

  ## Installation

  Several installation methods are available.

  ### From source

  ```bash
  cabal new-install cabal-cache
  ```

  ### Ubuntu binaries

  Dowload Ubuntu binaries from https://github.com/haskell-works/cabal-cache/releases

  ### Using Homebrew on Mac OS X

  ```bash
  brew tap haskell-works/homebrew-haskell-works git@github.com:haskell-works/homebrew-haskell-works.git
  brew update
  brew install cabal-cache
  ```

  ## Example usage

  Syncing built packages with S3 requires you have an S3 bucket with AWS
  credentials stored in the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environent variables.
  You should also know the AWS region the bucket was created in.

  ### Sync to archive

  Change into your project directory.

  Build the project with `cabal v2-build`.  This will ensure your dependencies are built and
  will produce a `plan.json` file that is required for the `cabal-cache` tool to know which built
  packages to sync up.

  Run the following command to sync to S3.

  ```bash
  cabal-cache sync-to-archive --threads 16 --archive-uri s3://my-cabal-cache-bucket/archive --region Sydney
  ```

  Run the following command to sync to archive directory.

  ```bash
  cabal-cache sync-to-archive --threads 16 --archive-uri archive --region Sydney
  ```

  ### Sync from S3

  Change into your project directory.

  Build the project with `cabal v2-configure`.  This will product a `plan.json` file that is required
  for the `cabal-cache` tool to know which built packages to sync down.

  Run the following command to sync from S3.

  ```bash
  cabal-cache sync-from-archive --threads 16 --archive-uri s3://my-cabal-cache-bucket/archive --region Sydney
  ```

  Run the following command to sync from archive directory.

  ```bash
  cabal-cache sync-from-archive --threads 16 --archive-uri archive --region Sydney
  ```

  ### Multicloud

  To run against a different service, use something like:

  ```bash
  cabal-cache sync-to-archive --threads 16 --archive-uri s3://my-cabal-cache-bucket/archive --host-name-override=s3.us-west.some-service.com --host-port-override=443 --host-ssl-override=True
  ```

  ## The archive

  ### Archive tarball format

  Built packages are stored in tarballs which contain the following files:

  ```bash
  x ${compiler_id}/${package_id}/_CC_METADATA/store-path
  x ${compiler_id}/lib/libHS${package_id}-*.dylib
  x ${compiler_id}/${package_id}
  x ${compiler_id}/package.db/${package_id}.conf
  ```

  Aside from the files in the `_CC_METADATA` directory, everything else is copied verbatim from cabal
  store from the corresponding location.  This includes the `conf` file which may contain absolute paths
  that would cause the built package to be non-relocatable.

  As a work-around, the tarball also inclues the `_CC_METADATA/store-path`
  file which stores the cabal store path from which the cached package was derived.

  Upon unpacking, `cabal-cache` will rewrite the `conf` file to contain the new store path using the
  information store in the `_CC_METADATA/store-path` file.  `_CC_METADATA` directory and its contents
  will be additionally unpacked making it easy to recognise packages that have been restored using
  `cabal-cache`.

  ### Archive directory structure

  The archive contains files in the following locations:

  ```bash
  /Users/jky/moo-archive/${archive_version}/${compiler_id}/${package_id}.tar.gz
  /Users/jky/moo-archive/${archive_version}/${store_hash}/${compiler_id}/${package_id}.tar.gz
  ```

  Both tarballs are identical.  If they both exist then the first may be a symlink to the second
  when store on the filesystem.

  The direct subdirectories of the archive is the `${archive_verson}`, for example `v2`.  This is the
  version of the archive format.  This corresponds to the major version of the `cabal-cache` package.

  The next directory may be the `${store_hash}` or the `${compiler_id}`.  If it is the `${store_hash}`
  then the `${compiler_id}` will be a subdirectory of that.

  The `${store_hash}` is the hash of the store path from which the cached package originally came.

  `cabal-cache` will preferentially restore using this version if it is available and the `${store_hash}`
  matches the cabal store path that is being restore to.

  If the package matching the `${store_hash}` cannot be found, `cabal-cache` will fallback to the version
  without the `${store_hash}`.

  A version without a `${store-hash}` may not exist.  See [Caveats](#caveats) for more information.

  ## Caveats

  ### Packages that use absolute paths to the cabal store

  Packages sometimes do things that cause their built artefacts to contain absolute paths to the cabal
  store.  This unfortunately makes such built packages non-relocatable.

  It is recommended that you use a fixed cabal store path rather than the default `$HOME/.cabal/store`
  to avoid any potential issues.

  See https://github.com/haskell/cabal/issues/4097 for more information.

  Following are examples of how this might happen:

  #### Paths_$pkgname

  `Paths_$pkgname` modules have embedded within them the absolute path to the package in the cabal store
  which means that packages that use some features of this module are not relocatable depending on what
  they do.

  Packages may query this module to get access to the package's cabal store `share` directory which
  contains data files that the package can read at runtime.  Using `cabal-cache` for such packages
  could mean that the package will be unable to find such data files.

  To protect against this, `cabal-cache` will by default not sync packages down from the archive
  if the package's cabal store `share` directory contain unusual files or directories _unless_ the
  `${store_hash}` matches.  Currently it only considers the `doc` subdirectory to be usual.  More
  exceptions may be added later.

license-name: BSD-3-Clause
