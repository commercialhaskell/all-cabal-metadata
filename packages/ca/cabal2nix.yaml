homepage: https://github.com/nixos/cabal2nix#readme
changelog-type: markdown
hash: 420a100c3c3172b093d6a75a3224cc6b5fb78459ccf6a685e90c3219c35ea1bf
test-bench-deps:
  Cabal: -any
  base: -any
  tasty-golden: -any
  language-nix: -any
  filepath: -any
  process: '>1.2'
  containers: -any
  lens: -any
  cabal2nix: -any
  tasty: -any
  pretty: -any
  directory: -any
maintainer: sternenseemann <sternenseemann@systemli.org>
synopsis: Convert Cabal files into Nix build instructions.
changelog: |
  # Revision History for cabal2nix

  ## 2.18.0

  * Support GHC 9.0.x and Cabal 3.4.0.0,
    **API breaking change**
    (See [#503](https://github.com/NixOS/cabal2nix/pull/503))
  * Fix fetching remote _archives_: Previously they weren't properly
    unpacked, **API breaking change**
    (See [#455](https://github.com/NixOS/cabal2nix/pull/455))
  * Resolution of system dependency attribute names in nixpkgs
    * Update changed upstream attribute names, reflect deprecations
    * Fix hackage2nix not resolving certain attribute names if multiple
      attribute names referred to the same derivation.
      (See [#492](https://github.com/NixOS/cabal2nix/pull/492) and
      [distribution-nixpkgs#10](https://github.com/NixOS/distribution-nixpkgs/pull/10))
  * hackage2nix: accept multiple config files at the command
    line given by specifying `--config` more than once
    (See [#494](https://github.com/NixOS/cabal2nix/pull/494))
basic-deps:
  bytestring: -any
  monad-par: -any
  ansi-wl-pprint: -any
  split: -any
  Cabal: '>=3.0'
  base: '>4.11 && <5'
  time: -any
  text: -any
  language-nix: -any
  monad-par-extras: -any
  filepath: -any
  process: -any
  hackage-db: '>=2.0.1'
  containers: '>=0.5.9'
  lens: -any
  distribution-nixpkgs: '>=1.6'
  mtl: -any
  hopenssl: '>=2'
  cabal2nix: -any
  transformers: -any
  optparse-applicative: -any
  deepseq: '>=1.4'
  pretty: '>=1.1.2'
  aeson: '>1'
  yaml: -any
  hpack: '>=0.29.6'
  directory: -any
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
- '1.4'
- '1.5'
- '1.6'
- '1.7'
- '1.8'
- '1.9'
- '1.10'
- '1.11'
- '1.12'
- '1.13'
- '1.14'
- '1.15'
- '1.16'
- '1.17'
- '1.18'
- '1.19'
- '1.20'
- '1.21'
- '1.23'
- '1.24'
- '1.25'
- '1.26'
- '1.27'
- '1.28'
- '1.29'
- '1.30'
- '1.31'
- '1.32'
- '1.33'
- '1.34'
- '1.35'
- '1.37'
- '1.38'
- '1.39'
- '1.40'
- '1.41'
- '1.42'
- '1.43'
- '1.44'
- '1.45'
- '1.46'
- '1.47'
- '1.48'
- '1.49'
- '1.50'
- '1.51'
- '1.52'
- '1.53'
- '1.54'
- '1.55'
- '1.56'
- '1.57'
- '1.58'
- '1.59'
- '1.60'
- '1.61'
- '1.63'
- '1.64'
- '1.65'
- '1.66'
- '1.67'
- '1.68'
- '1.69'
- '1.70'
- '1.71'
- '1.72'
- '1.73'
- '2.0'
- 2.0.1
- 2.0.2
- 2.0.3
- 2.0.4
- '2.1'
- 2.1.1
- '2.2'
- 2.2.1
- '2.3'
- 2.3.1
- 2.4.1
- '2.5'
- '2.6'
- '2.7'
- 2.7.2
- '2.8'
- 2.8.1
- 2.8.2
- '2.9'
- 2.9.1
- 2.9.2
- 2.9.3
- 2.10.0
- 2.10.1
- 2.10.2
- '2.11'
- 2.11.1
- '2.12'
- '2.13'
- '2.14'
- 2.14.1
- 2.14.2
- 2.14.3
- 2.14.4
- 2.15.0
- 2.15.1
- 2.15.2
- 2.15.3
- 2.15.4
- 2.15.5
- 2.15.6
- 2.16.0
- 2.17.0
- 2.18.0
author: Peter Simons <simons@cryp.to>
latest: 2.18.0
description-type: markdown
description: |
  Cabal2nix
  =========

  [![hackage release](https://img.shields.io/hackage/v/cabal2nix.svg?label=hackage)](http://hackage.haskell.org/package/cabal2nix)
  [![stackage LTS package](http://stackage.org/package/cabal2nix/badge/lts)](http://stackage.org/lts/package/cabal2nix)
  [![stackage Nightly package](http://stackage.org/package/cabal2nix/badge/nightly)](http://stackage.org/nightly/package/cabal2nix)
  ![Continous Integration](https://github.com/NixOS/cabal2nix/workflows/Haskell-CI/badge.svg)

  `cabal2nix` converts a single Cabal file into a single Nix build expression.
  For example:

      $ cabal2nix cabal://mtl
      { mkDerivation, base, lib, transformers }:
      mkDerivation {
        pname = "mtl";
        version = "2.2.1";
        sha256 = "1icdbj2rshzn0m1zz5wa7v3xvkf6qw811p4s7jgqwvx1ydwrvrfa";
        libraryHaskellDepends = [ base transformers ];
        homepage = "http://github.com/ekmett/mtl";
        description = "Monad classes, using functional dependencies";
        license = lib.licenses.bsd3;
      }

  Cabal files can be referred to using the magic URL `cabal://NAME-VERSION`,
  which will automatically download the file from Hackage. Alternatively, a
  direct `http://host/path/pkg.cabal` URL can be provided, as well as a
  `file:///local/path/pkg.cabal` URI that doesn't depend on network access.
  However, if the source hash is not already in `cabal2nix`'s cache or provided
  using the `--sha256` option, `cabal2nix` still needs to download the source
  code to compute the hash, which still causes network traffic. Run the utility
  with `--help` to see the complete list of supported command-line flags.

  Detailed instructions on how to use those generated files with Nix can be found at
  https://haskell4nix.readthedocs.io/nixpkgs-users-guide.html#how-to-create-nix-builds-for-your-own-private-haskell-packages.

  `cabal2nix` can also build derivations for projects from other sources than
  Hackage. You only need to provide a URI that points to a cabal project. The
  most common use-case for this is probably to generate a derivation for a
  project on the local file system:

      $ cabal get mtl-2.2.1 && cd mtl-2.2.1
      $ cabal2nix .
      { mkDerivation, base, lib, transformers }:
      mkDerivation {
        pname = "mtl";
        version = "2.2.1";
        src = ./.;
        libraryHaskellDepends = [ base transformers ];
        homepage = "http://github.com/ekmett/mtl";
        description = "Monad classes, using functional dependencies";
        license = lib.licenses.bsd3;
      }

  This derivation will not fetch from hackage, but instead use the directory which
  contains the derivation as the source repository.

  `cabal2nix` currently supports the following repository types:

  * directory
  * source archive (zip, tar.gz, ...) from http or https URL or local file.
  * git, mercurial, svn or bazaar repository

  ## `hackage2nix`

  This repository also contains, in the [`hackage2nix/`](./hackage2nix) directory,
  the tool to update the Haskell packages in
  [nixpkgs](https://github.com/NixOS/nixpkgs). It has its own README there.

  ## Building

  `cabal2nix` is built using [`cabal-install`](https://www.haskell.org/cabal/),
  like you'd expect, and you are free to use your favourite way of setting up
  a Haskell development environment.

  Since `cabal2nix` is quite intertwined with the packages `distribution-nixpkgs`
  and `hackage-db`, we recommend setting up a shared development environment
  for the three packages like so:

  ```console
  $ mkdir /path/to/cabal2nix-root && cd /path/to/cabal2nix-root
  $ # clone repositories, note that you may need to checkout an
  $ # older tag for some depending on breaking changes on master.
  $ git clone https://github.com/NixOS/cabal2nix.git
  $ git clone https://github.com/NixOS/hackage-db.git
  $ git clone https://github.com/NixOS/distribution-nixpkgs.git
  $ # setup development environment with shellFor
  $ cat > shell.nix << EOF
  # assumes nix{os,pkgs}-unstable
  { pkgs ? import <nixpkgs> {} }:

  pkgs.haskellPackages.shellFor {
    packages = p: [
      p.cabal2nix-unstable
      p.distribution-nixpkgs
      p.hackage-db
    ];

    # for running doctests locally
    nativeBuildInputs = [
      pkgs.haskellPackages.doctest
    ];

    # set environment variable, so the development version of
    # distribution-nixpkgs finds derivation-attr-paths.nix
    distribution_nixpkgs_datadir = toString ./distribution-nixpkgs;
  }
  EOF
  $ # tell cabal about local packages
  $ cat > cabal.project << EOF
  packages: ./*/*.cabal
  EOF
  $ # test our new development environment
  $ nix-shell --run "cabal v2-build exe:cabal2nix exe:hackage2nix"
  ```
license-name: BSD-3-Clause
