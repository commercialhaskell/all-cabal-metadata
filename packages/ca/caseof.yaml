all-versions:
- 0.0.0
- 0.0.1
author: Chris Done
basic-deps:
  base: '>=4.7 && <5'
  template-haskell: '>=0'
changelog: ''
changelog-type: ''
description: |
  # caseof

  A simple way to query constructors, like cases but slightly more
  concise.

  Prisms from the lens package can also manage this, but this is a bit
  simpler.

  Aimed at sum types with many constructors:

  ``` haskell
  data Wiggle = Woo Int Char | Wibble Int deriving Show
  ```

  There is a case predicate:

  ``` haskell
  > $(isCaseOf 'Woo) (Woo 5 'a')
  True
  ```

  There is a `Maybe`-based matcher:

  ``` haskell
  > $(maybeCaseOf 'Woo) (Woo 1 'a')
  Just (1,'a')
  ```

  There is a "map" over a constructor:

  ``` haskell
  > $(mapCaseOf 'Left) succ (Left 3)
  Left 4
  ```

  There is a combinator which calls your function with n arguments, or
  passes the whole value to an "else" clause.

  ``` haskell
  > $(caseOf 'Woo) (\x y -> show x ++ show y) (const "") (Wibble 5)
  ""
  ```

  ## Use in your project

  In your stack.yaml, put:

  ```
  extra-deps:
  - git: https://github.com/chrisdone/caseof.git
    commit: 9a7f6bb
  ```
description-type: markdown
hash: 8e77189b88e003adb4b2e4f5fbf9bbaac703d0b0ceb9bf9ec7b3538afe24eebd
homepage: https://github.com/chrisdone/caseof#readme
latest: 0.0.1
license-name: BSD-3-Clause
maintainer: chrisdone@gmail.com
synopsis: Combinators for casing on constructors
test-bench-deps: {}
