all-versions:
- 0.4.0.0
- 0.6.0.0
author: diaz_carrete@yahoo.com
basic-deps:
  algebraic-graphs: ^>=0.7
  base: '>=4.18.0 && <5'
  bytestring: '>=0.10.0 && <0.13'
  cauldron: '>=0'
  containers: '>=0.5.0 && <0.8'
  text: '>=2.0 && <2.2'
changelog: "# Revision history for cauldron\n\n## 0.6.0.0\n\n* Remove sop-core dependency,
  incorporate just the needed functionality into the library.\n\n  Also make the internals
  of the library less dependent on n-ary tuples. Now\n  they are more of an added
  layer for convenience.\n\n* The `cook` family of functions don't return a `DependencyGraph`
  anymore. Instead, the \n  graph can be obtained at any moment using `getDependencyGraph`,
  even for non-wireable `Cauldron`s.\n\n* `BoiledBeans` is now just `Beans` and has
  its own module.\n\n* A new `Cauldron.Args` module which defines the `Args` applicative.\n\n*
  The way of creating `Constructor`s has been overhauled.\n\n  `Packer` and `pack`
  are gone, along with `value`, `eff` and similar functions. The old `Regs` type is
  gone.\n\n  To create `Constructor`s, now we should use `val` and `eff` along with
  `wire`.\n\n* The `Bean` record is now called `Recipe`. There's also a `SomeRecipe`
  that hides the bean type parameter.\n \n* New `ToRecipe` typeclass that helps treating
  single `Constructor`s as recipes-without-decos.\n\n* The `Decos` type is now just
  a `Seq` of constructors of the same type.\n\n* New `allowDepCycles` `Fire`.\n\n*
  Now `DependencyGraph` renders all the dependencies, even those that are ignored
  during plan construction to allow for dependency cycles.\n\n* New `Monoid` instance
  for `DependencyGraph`.\n\n* `BadBeans` is now `RecipeError`. It has now an `Exception`
  instance and a pretty function.\n\n* `exportToDot` is now `writeAsDot` and accepts
  a `RecipeError` to highlight problematic nodes.\n\n* Now `Constructor`s and `Recipe`s
  keep track of the `CallStack` of when they were created. This is used\n  by errors
  to print the relevant code locations.\n  Because now we have code locations, `PathToCauldron`
  is no longer useful and has been removed.\n\n## 0.4.0.0\n\n* `exportToDot` takes
  a new parameter to configure how to print the steps. Before, only the TyCon was
  printed. Now, the full type is printed by default.\n\n## 0.3.1.0 \n\n* Now the `MissingDependencies`
  only includes keys with actual missing dependencies.\n\n## 0.3.0.0 \n\n* Add `cookNonEmpty`
  and `cookTree` for cooking hierarchies of 'Cauldron's.\n* Rename `addLast` to `addOuter`
  and `addFirst` to `addInner`.\n* Add a copy of the `Managed` type from [\"managed\"](https://hackage.haskell.org/package/managed).\n*
  Change the nomenclature of the `pack-` related functions.\n* Add the `Packer` type.\n*
  Add `Fire` type to customize the handling of dependency cycles.\n\n## 0.2.0.0 \n\n*
  Decorators are no longer `Endo`s. They just take the decorated entity as a \n  regular
  parameter.\n\n* Remove the applicative wrappers.\n\n* Allow effectful constructors.\n\n##
  0.1.0.0 -- YYYY-mm-dd\n\n* First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "# cauldron\n\n> Double, double toil and trouble;\n>\n> Fire burn and
  caldron bubble.\n>\n> Fillet of a fenny snake,\n>\n> In the caldron boil and bake;\n\n**cauldron**
  is a library for performing dependency injection. It's an alternative to\nmanually
  wiring the constructors for the components (\"beans\") of your\napplication. \n\nIt
  expects the bean constructors to conform to a certain shape.\n\n**cauldron** should
  be used at the [composition root](https://stackoverflow.com/questions/6277771/what-is-a-composition-root-in-the-context-of-dependency-injection).
  Bean constructors shouldn't be aware that **cauldron** exists, or depend on its
  types.\n\n**cauldron** relies on dynamic typing and finds wiring errors at runtime,
  not compilation time.\n\n# Why you should(n't) use this library\n\nTo be honest,
  you probably shouldn't use this library. I have noticed that using\n**cauldron**
  is actually *more* verbose that manually doing the wiring yourself.\nPerhaps it
  would start to pay for complex beans with many dependencies, but\nI'm not sure.\n\nAnother
  possible objection to this library is that wiring errors are detected at\nruntime.
  I don't find that to be a problem though: the wiring happens at the\nvery beginning
  of the application, and it's easy to write an unit test for it.\n\nOn the plus side,
  this library lets you render the graph of dependencies between\nbeans, something
  which is difficult to do with naive manual wiring.\n\nAnother advantage is that
  you can easily modify an existing web of dependencies,\nbe it by inserting a new
  bean, overriding another, or adding a decorator.\n\n# The expected shape of constructors\n\n**cauldron**
  expects \"bean\" constructors to have a shape like:\n\n```\nmakeServer :: Logger
  -> Repository -> Server\n```\n\nWhere `Logger`, `Repository` and `Server` are [records-of-functions](https://www.iankduncan.com/articles/2024-01-26-records-of-effects).
  `Server` is\nthe component produced by this constructor, and it has `Logger` and
  `Repository`\nas dependencies.\n\nSometimes constructors are effectful because they
  must perform some\ninitialization (for example allocating some `IORef` for the internal
  `Server`\nstate). In that case the shape of the constructor becomes something like:\n\n```\nmakeServer
  :: Logger -> Repository -> IO Server\n```\n\nor even, for constructors which want
  to ensure that [resources are\ndeallocated](https://hackage.haskell.org/package/managed)
  after we are finished using the bean:\n\n```\nmakeServer :: Logger -> Repository
  -> Managed Server\n```\n\nHaving more than one constructor for the same bean type
  is disallowed. The\nwiring is *type-directed*, so there can't be any ambiguity about
  which bean\nconstructor to use.\n\n## Monoidally aggregated secondary beans\n\nMore
  complex constructors can return—besides a \"primary\" bean as seen in the\nprevious
  section—one or more \"secondary\" beans. For example:\n\n```\nmakeServer :: Logger
  -> Repository -> (Initializer, Inspector, Server)\n```\n\nor \n\n```\nmakeServer
  :: Logger -> Repository -> IO (Initializer, Inspector, Server)\n```\n\nThese secondary
  outputs of a constructor, like `Initializer` and `Inspector`,\nmust have `Monoid`
  instances. Unlike with the \"primary\" bean the constructor produces, they\n*can*
  be produced by more than one constructor. Their values will be aggregated\nacross
  all the constructors that produce them.\n\nConstructors can depend on the aggregated
  value of a secondary bean by taking\nthe bean as a regular argument. Here, `makeDebuggingServer`
  receives the\n`mappend`ed value of all the `Inspector`s produced by other constructors
  (or\n`mempty`, if no constructor produces them):\n\n```\nmakeDebuggingServer ::
  Inspector -> IO DebuggingServer\n```\n\n## Decorators\n\nDecorators are like normal
  constructors, but they're used to *modify* a primary\nbean, instead of *producing*
  it. Because of that, they usually take the bean\nthey decorate as an argument:\n\n```\nmakeServerDecorator
  :: Server -> Server\n```\n\nLike normal constructors, decorators can have their
  own dependencies (other than the\ndecorated bean), perform effects, and register
  secondary beans:\n\n```\nmakeServerDecorator :: Logger -> Server -> IO (Initializer,Server)\n```\n\n#
  Example code\n\nSee [this example application](/app/Main.hs) with dummy components.\n\nFor
  a slightly more realistic example, see [here](https://github.com/danidiaz/comments-project/blob/8206c50b9af2097e2246cec0992d489029b84686/comments/lib/Comments/Main.hs#L36).\n\n#
  Similarities with the [Java Spring framework IoC container](https://docs.spring.io/spring-framework/reference/core/beans.html)\n\nSome
  features of this library have loose analogues in how Java Spring handles\ndependency
  injection (although of course Spring has many more features).\n\nFirst, a big *difference*:
  there's no analogue here of annotations, or classpath\nscanning. Beans and decorators
  must be explicitly registered. \n\n- Java POJOs are Haskell [records-of-functions](https://www.iankduncan.com/articles/2024-01-26-records-of-effects),
  where the functions will usually\nbe closures which encapsulate access to some shared
  internal state (state like\nconfiguration values, or mutable references). Functions
  that return\nrecords-of-functions correspond to POJO constructors.\n\n- [@PostConstruct](https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/postconstruct-and-predestroy-annotations.html#page-title)
  roughly corresponds to effectful constructors.\n\n  Although I expect effectful
  constructors to be used comparatively more in this\n library than in Spring, because
  here they're required to initialize mutable\n references used by the beans.\n\n-
  [decorated self-invocations](https://docs.spring.io/spring-framework/reference/core/aop/proxying.html#aop-understanding-aop-proxies)
  correspond to constructors that\n  depend on the same bean that they produce.\n\n
  \ Note that this is different from decorators that depend on the bean they\n  modify.
  The constructor will receive the fully decorated bean \"from the\n  future\" (with
  the possibility of infinite loops if it makes use of it too\n  eagerly). In contrast,
  a decorator will receive either the bare \"undecorated\"\n  bean, or the in-construction
  result of applying the decorators that come\n  earlier in the decorator sequence.\n\n-
  [context hierachies](https://docs.spring.io/spring-framework/reference/testing/testcontext-framework/ctx-management/hierarchies.html)
  correspond to distributing the constructors into various sets organized in parent-child
  relationships, so that constructors in a child can see the beans of the parent,
  but not vice-versa. \n\n- [injecting all the beans that implement a certain interface
  as a list](https://twitter.com/NiestrojRobert/status/1746808940435042410) roughly
  corresponds to a constructor that takes a monoidally aggregated \"secondary bean\"
  as an argument. \n\nSome features I'm not yet sure how to mimic:\n\n- [bean scopes](https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html),
  like [request scope](https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-other-injection).
  [This Stack Overflow post](https://stackoverflow.com/a/77174979/1364288) gives some
  information about how they are implemented in Spring.\n\n  The SO post explains
  that in Spring the injection of request scoped beans into long-lived beans involves
  thread-local variables. I explored such a technique for Cauldron [here](https://discourse.haskell.org/t/i-got-rid-of-readert-and-now-my-application-is-hanging-by-a-thread/9330).\n\n#
  See also\n\n- [registry](https://hackage.haskell.org/package/registry) is a more
  mature and useable library for dependency injection in Haskell. See [this explanatory
  video](https://www.youtube.com/watch?v=fFCcvsbCrH8).\n"
description-type: markdown
hash: 295ce99ac0606a9b383561b1e38448f1e0bae00b05dc8968c3215b6b9cde7753
homepage: ''
latest: 0.6.0.0
license-name: BSD-3-Clause
maintainer: Daniel Díaz
synopsis: Dependency injection library
test-bench-deps:
  algebraic-graphs: '>=0.7 && <0.8'
  base: '>=4.18.0 && <5'
  cauldron: '>=0'
  containers: '>=0.5.0 && <0.8'
  tasty: '>=1.5 && <1.6'
  tasty-hunit: '>=0.10 && <0.11'
  text: '>=2.0 && <2.2'
  transformers: '>=0.5 && <0.7'
