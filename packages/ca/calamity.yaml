homepage: https://github.com/nitros12/calamity
changelog-type: markdown
hash: 2bc6853e87c6e208167c09bae841791c5babdfeb7c0cebb668a750f578e61fc3
test-bench-deps: {}
maintainer: ben@bensimms.moe
synopsis: A library for writing discord bots in haskell
changelog: |
  # Changelog for Calamity

  ## 0.1.25.0

  + Changed how `ModifyGuildMemberData`, and `ModifyGuildRoleData` are implemented
    to allow for the parameters to be optional and nullable.
  + Changed `EditMessage` to use `EditMessageData` instead of `Maybe Text -> Maybe
    Embed`, allowing for the parameters to be optional and nullable.

  ## 0.1.24.2

  + Add event handlers for voice state update events: `'VoiceStateUpdateEvt`
  + Apply some fixes for a few memory leaks

  ## 0.1.24.1

  + Fix some memory leaks

  ## 0.1.24.0

  + Switch from using Wreq to Req
  + The `session` parameter has been removed from `runBotIO'`
  + Add an `Upgradeable` instance for `Role`s
  + Add a command `Parser` instance for `Role`s

  ## 0.1.23.1

  + Fix some more json parsing issues

  ## 0.1.23.0

  + The `roles` field was incorrectly present on the `PresenceUpdate` type, that
    field has been removed.
  + The `game` field on `Presence` was changed to `activities :: [Activity]`

  ## 0.1.22.1

  + Bump some upper bounds
  + Fix parsing of members from GetGuildMember
  + Make game field in Presence correctly optional
  + Make roles field in Presence updates correctly optional (internal)

  ## 0.1.22.0

  * Update to gateway/http endpoint v8.
  * Updated the message types.
  * Added `defaultIntents`, which is all but the privileged intents, also a
    Data.Default instance.
  * `runBotIO` and `runBotIO'` now always take an `Intents` parameter.
  * Users are cached from messages, as well as member create events.
  * Fix `Overwrite`s having an incorrect `type_` field.

  ## 0.1.21.0

  * Fix ToJSON instance for `RawEmoji`

  ## 0.1.20.1

  * Documentation improvements.

  ## 0.1.20.0

  * Migrate do di-polysemy 0.2, runBotIO no longer handles the Log effect.

  ## 0.1.19.2

  * Fix broken `Float` parsing.

  ## 0.1.19.1

  * Fixed another missing activity type

  ## 0.1.19.0

  * Support hidden commands.

  ## 0.1.18.1

  * Fix custom presences failing to parse.

  ## 0.1.18.0

  * Add raw message events: `RawMessageUpdateEvt`, `RawMessageDeleteEvt`,
    `RawMessageDeleteBulkEvt`, `RawMessageReactionAddEvt`,
    `RawMessageReactionRemoveEvt`, `RawMessageReactionRemoveAllEvt`.

  * Fixed bulk message deletes firing a message delete per deleted message,
    instead of a bulk message delete event (I'm not sure how I did that).

  * Add `animated` field to `Partial Emoji`s.

  * Make show instances for `Partial Emoji` and `RawEmoji` show to their discord
    representation.

  ## 0.1.17.2

  *2020-07-04*

  * Drop GHC-8.6.5, it doesn't like strictdata

  * Use unboxing-vector instead of doing stuff ourselves

  ## 0.1.17.1

  *2020-06-29*

  * `waitUntil` and `waitUntilM` now correctly remove the temorary event handler
    they create if an exception is raised.

  ## 0.1.17.0

  *2020-06-28*

  * Allow the session used for http requests to be specified to the client.

  * Drop from using a Wreq fork to vanilla Wreq.

  * `TFile` now requires a filename parameter.

  ## 0.1.16.0

  * Change how commands should be manually invoked from code, instead of firing a
    `"invoke-command"` custom event, now the `handleCommands` function should be
    used, which returns information about if the command succeeded.

  * Added `fetchHandler` for retrieving the command handler inside a command DSL.

  ## 0.1.15.0

  * General cleanup of codebase

  * Enable StrictData by default

  ## 0.1.14.9

  *2020-06-22*

  * Support manually invoking commands.

  ## 0.1.14.8

  *2020-06-21*

  * Replace uses of withLowerToIO with interpretFinal (should be more performant)

  ## 0.1.14.7

  *2020-06-21*

  * Fix missing usage of GetAuditLogOptions in GetAuditLog

  ## 0.1.14.6

  *2020-06-18*

  * Add command parameter `Parser`s for `Int`, `Integer`, `Word`, `Natural`, and
    `Float`.

  ## 0.1.14.5

  *2020-06-18*

  * The `DecodeError` variant of the `RestError` type has been renamed to
    `InternalClientError` as all issues in the rest client now end up here.

  * We're now using `discord.com` instead of `discordapp.com`

  ## 0.1.14.4

  *2020-06-11*

  * Added `activity` to construct Activities

  * Added aliases for commands and groups, with new functions to create them
    (`commandA`, `groupA`, ...).

  * The built in help command now shows aliases and checks.

  ## 0.1.14.3

  *2020-06-10*

  * Fix some bugs in the gateway

  ## 0.1.14.2

  *2020-06-09*

  * Fix broken json decoding for DMs

  * Add `mentionChannels` to `Message`

  ## 0.1.14.1

  *2020-06-08*

  * Fix broken json decoding for member's

  ## 0.1.14.0

  *2020-06-08*

  * Unpacked the `user` field of `Member` into itself.

  * Add message formatting utilities (`Calamity.Utils.Message`).

  * Add support for allowed mentions in `Tellable`.

  * Change Snowflake's show instance to just show the numberic id.

  * Added parsers for RawEmoji and Either.

  ## 0.1.13.0

  *2020-06-06*

  * Changed event handlers to take tuples instead of being higher arity when there
    is more than one parameter to the callback.

  ## 0.1.12.0

  *2020-06-06*

  * Changed some events to take enums instead of booleans: `GuildCreateEvt` and
    `GuildDeleteEvt`.

  ## 0.1.11.2

  *2020-06-03*

  * Moved the internal `UpdatedMessage` from
    `Calamity.Types.Model.Channel.Message` into
    `Calamity.Types.Model.Channel.UpdatedMessage`.

  ## 0.1.11.0

  *2020-05-31*

  * Add command parameter parsers for channel/guild/emoji
  * Support allowed mentions
  * Support invite events
  * Support setting gateway intents
  * Add `Calamity.Types.Model.Guild.Permission` and `Calamity.Utils.Permissions`
    and change permissions fields from `Word64` to `Permissions`
  * Add `Calamity.Utils.Colour` and change color fields from `Word64` to
    `Data.Color.Color Double`

  ## 0.1.10.0

  *2020-05-27*

  * Renamed `Calamity.Commands.Parser.KleeneConcat` to
    `Calamity.Commands.Parser.KleeneStarConcat` and added
    `Calamity.Commands.Parser.KleenePlusConcat`

  * Added `Calamity.Types.Upgradeable`

  ## 0.1.9.2

  *2020-05-23*

  * Added a default help command, located in `Calamity.Commands.Help`.

  * Commands now have the list of parameters they take

  ## 0.1.9.1

  *2020-05-23*

  * Added `Calamity.Commands.Parser.Named` for parameters that have a name.

  * General improvements to parser errors

  ## 0.1.9.0

  *2020-05-22*

  * Added commands, located in `Calamity.Commands`, along with a DSL for declaring
    commands nicely.

  * Renamed `waitUntil` to `waitUntilM`, and introduced a variant with a pure
    check function that takes the original name of `waitUntil`.

  ## 0.1.8.0

  *2020-05-15*

  * Did a large rework of how event handlers are stored internally.
  * introduced `waitUntil`

  ## 0.1.4.0

  * Added back extra exports of `Calamity.Types.Partial` from
    `Calamity.Types.Model.Guild.Guild`, `Calamity.Type.Model.Guild.Emoji`, and
    `Calamity.Types.Model.Channel`. There is now way to export the constructor
    without also exporting Partial apparently?


  ## 0.1.3.0

  *2020-04-27*

  * Removed extra exports of `Calamity.Types.Partial` from
    `Calamity.Types.Model.Guild.Guild`, `Calamity.Type.Model.Guild.Emoji`, and
    `Calamity.Types.Model.Channel`

  * Added missing exports of `CreateGuildEmojiOptions` and
    `ModifyGuildEmojiOptions` from `Calamity.HTTP.Emoji`

  * Added missing exports of `CreateGuildData` and `ModifyGuildData` from
    `Calamity.HTTP.Guild`

  ## 0.1.2.0

  *2020-04-27*

  * Calamity.Client: runBotIO now has a `Polysemy.Fail` effect

  ## Unreleased changes
basic-deps:
  focus: '>=1.0 && <2'
  http-client: '>=0.5 && <0.8'
  polysemy-plugin: '>=0.2 && <0.3'
  exceptions: '>=0.10 && <0.11'
  fmt: '>=0.6 && <0.7'
  bytestring: '>=0.10 && <0.12'
  reflection: '>=2.1 && <3'
  lens-aeson: '>=1.1 && <2'
  stm: '>=2.5 && <3'
  base: '>=4.12 && <5'
  data-default-class: '>=0.1 && <0.2'
  time: '>=1.8 && <1.12'
  unordered-containers: '>=0.2 && <0.3'
  text: '>=1.2 && <2'
  deque: '>=0.4 && <0.5'
  safe-exceptions: '>=0.1 && <2'
  megaparsec: '>=8 && <10'
  di-polysemy: '>=0.2 && <0.3'
  di-core: '>=1.0.4 && <1.1'
  generic-override-aeson: '>=0.0.0.0 && <0.0.1'
  text-show: '>=3.8 && <4'
  tls: '>=1.4 && <2'
  async: '>=2.2 && <3'
  websockets: '>=0.12 && <0.13'
  req: '>=3.1 && <3.9'
  connection: '>=0.2.6 && <0.4'
  http-date: '>=0.0.8 && <0.1'
  containers: '>=0.6 && <0.7'
  lens: '>=4.18 && <5'
  concurrent-extra: '>=0.7 && <0.8'
  x509-system: '>=1.6.6 && <1.7'
  mime-types: '>=0.1 && <0.2'
  data-flags: '>=0.0.3 && <0.1'
  unboxing-vector: '>=0.2 && <0.3'
  mtl: '>=2.2 && <3'
  unagi-chan: '>=0.4 && <0.5'
  hashable: '>=1.2 && <2'
  generic-override: '>=0.0.0.0 && <0.0.1'
  stm-chans: '>=3.0 && <4'
  polysemy: '>=1.3 && <2'
  generic-lens: '>=2.0 && <3'
  colour: '>=2.3.5 && <2.4'
  deepseq: '>=1.4.4.0 && <2'
  df1: '>=0.3 && <0.5'
  scientific: '>=0.3 && <0.4'
  stm-containers: '>=1.1 && <2'
  http-types: '>=0.12 && <0.13'
  typerep-map: '>=0.3 && <0.4'
  aeson: '>=1.4 && <2'
  vector: '>=0.12 && <0.13'
all-versions:
- 0.1.0.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- 0.1.4.4
- 0.1.5.0
- 0.1.5.1
- 0.1.6.0
- 0.1.6.1
- 0.1.6.2
- 0.1.7.0
- 0.1.8.0
- 0.1.8.1
- 0.1.9.0
- 0.1.9.1
- 0.1.9.2
- 0.1.9.3
- 0.1.9.4
- 0.1.10
- 0.1.10.1
- 0.1.11.0
- 0.1.11.1
- 0.1.11.2
- 0.1.12.0
- 0.1.13.0
- 0.1.14.0
- 0.1.14.1
- 0.1.14.2
- 0.1.14.3
- 0.1.14.4
- 0.1.14.5
- 0.1.14.6
- 0.1.14.7
- 0.1.14.8
- 0.1.14.9
- 0.1.15.0
- 0.1.16.0
- 0.1.17.0
- 0.1.17.1
- 0.1.18.0
- 0.1.18.1
- 0.1.19.0
- 0.1.19.1
- 0.1.19.2
- 0.1.20.0
- 0.1.20.1
- 0.1.21.0
- 0.1.22.0
- 0.1.22.1
- 0.1.23.0
- 0.1.23.1
- 0.1.24.0
- 0.1.24.1
- 0.1.24.2
- 0.1.25.0
author: Ben Simms
latest: 0.1.25.0
description-type: markdown
description: |
  <h1 align="center">Calamity</h1>

  <p align="center">
    <a href="https://hackage.haskell.org/package/calamity"><img src="https://img.shields.io/hackage/v/calamity" alt="Hackage"></a>
    <a href="https://gitlab.com/nitros12/calamity/pipelines"><img src="https://img.shields.io/gitlab/pipeline/nitros12/calamity" alt="Gitlab pipeline status"></a>
    <a href="https://github.com/nitros12/calamity/blob/master/LICENSE"><img src="https://img.shields.io/github/license/nitros12/calamity" alt="License"></a>
    <a href="https://hackage.haskell.org/package/calamity"><img src="https://img.shields.io/hackage-deps/v/calamity" alt="Hackage-Deps"></a>
    <a href="https://discord.gg/NGCThCY"><img src="https://discord.com/api/guilds/754446998077178088/widget.png?style=shield" alt="Discord Invite"></a>
  </p>

  Calamity is a Haskell library for writing discord bots, it uses
  [Polysemy](https://hackage.haskell.org/package/polysemy) as the core library for
  handling effects, allowing you to pick and choose how to handle certain features
  of the library.

  The current customisable effects are:

  * Cache: The default cache handler keeps the cache in memory, however you could
    write a cache handler that stores cache in a database for example.

  * Metrics: The library has counters, gauges, and histograms installed to measure
    useful things, by default these are not used (and cost nothing), but could be
    combined with [Prometheus](https://hackage.haskell.org/package/prometheus). An
    example of using prometheus as the metrics handler can be found
    [here](https://github.com/nitros12/calamity-example).

  * Logging: The [di-polysemy](https://hackage.haskell.org/package/di-polysemy)
    library is used to allow the logging effect to be customized, or disabled.

  # Docs

  You can find documentation on hackage at: https://hackage.haskell.org/package/calamity

  # Examples

  Some example projects can be found at:
  <!-- - [nitros12/calamity-example](https://github.com/nitros12/calamity-example): An extended example of the snippet below, shows use of metrics. -->
  - [nitros12/calamity-bot](https://github.com/nitros12/calamity-bot): Uses a database, showing modularisation of groups/commands.

  ``` haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE FlexibleContexts #-}
  {-# LANGUAGE GADTs #-}
  {-# LANGUAGE LambdaCase #-}
  {-# LANGUAGE OverloadedLabels #-}

  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE PolyKinds #-}
  {-# LANGUAGE ScopedTypeVariables #-}
  {-# LANGUAGE TemplateHaskell #-}
  {-# LANGUAGE TypeApplications #-}

  {-# LANGUAGE TypeOperators #-}

  module Main where

  import           Calamity
  import           Calamity.Cache.InMemory
  import           Calamity.Commands
  import qualified Calamity.Commands.Context                  as CommandContext
  import           Calamity.Metrics.Noop

  import           Control.Concurrent
  import           Control.Concurrent.STM.TVar
  import           Control.Lens
  import           Control.Monad

  import           Data.Text.Lazy              ( Text, fromStrict )
  import           Data.Text.Strict.Lens

  import qualified Di
  import qualified DiPolysemy                  as DiP

  import qualified Polysemy                    as P
  import qualified Polysemy.Async              as P
  import qualified Polysemy.AtomicState        as P
  import qualified Polysemy.Embed              as P
  import qualified Polysemy.Fail               as P

  import           Prelude                     hiding ( error )

  import           TextShow

  data Counter m a where
    GetCounter :: Counter m Int

  P.makeSem ''Counter

  runCounterAtomic :: P.Member (P.Embed IO) r => P.Sem (Counter ': r) a -> P.Sem r a
  runCounterAtomic m = do
    var <- P.embed $ newTVarIO (0 :: Int)
    P.runAtomicStateTVar var $ P.reinterpret (\case
                                                GetCounter -> P.atomicState (\v -> (v + 1, v))) m

  handleFailByLogging m = do
    r <- P.runFail m
    case r of
      Left e -> DiP.error (e ^. packed)
      _      -> pure ()

  info, debug :: BotC r => Text -> P.Sem r ()
  info = DiP.info
  debug = DiP.info

  tellt :: (BotC r, Tellable t) => t -> Text -> P.Sem r (Either RestError Message)
  tellt t m = tell t $ L.toStrict m

  main :: IO ()
  main = do
    token <- view packed <$> getEnv "BOT_TOKEN"
    Di.new $ \di ->
      void . P.runFinal . P.embedToFinal . DiP.runDiToIO di . runCounterAtomic . runCacheInMemory . runMetricsNoop . useConstantPrefix "!"
        $ runBotIO (BotToken token) defaultIntents $ do
        addCommands $ do
          helpCommand
          command @'[User] "utest" $ \ctx u -> do
            void $ tellt ctx $ "got user: " <> showtl u
          command @'[Named "u" User, Named "u1" User] "utest2" $ \ctx u u1 -> do
            void $ tellt ctx $ "got user: " <> showtl u <> "\nand: " <> showtl u1
          command @'[L.Text, Snowflake User] "test" $ \ctx something aUser -> do
            info $ "something = " <> showt something <> ", aUser = " <> showt aUser
          command @'[] "hello" $ \ctx -> do
            void $ tellt ctx "heya"
          group "testgroup" $ do
            command @'[[L.Text]] "test" $ \ctx l -> do
              void $ tellt ctx ("you sent: " <> showtl l)
            command @'[] "count" $ \ctx -> do
              val <- getCounter
              void $ tellt ctx ("The value is: " <> showtl val)
            group "say" $ do
              command @'[KleenePlusConcat L.Text] "this" $ \ctx msg -> do
                void $ tellt ctx msg
          command @'[Snowflake Emoji] "etest" $ \ctx e -> do
            void $ tellt ctx $ "got emoji: " <> showtl e
          command @'[] "explode" $ \ctx -> do
            Just x <- pure Nothing
            debug "unreachable!"
          command @'[] "bye" $ \ctx -> do
            void $ tellt ctx "bye!"
            stopBot
          command @'[] "fire-evt" $ \ctx -> do
            fire $ customEvt @"my-event" ("aha" :: L.Text, ctx ^. #message)
          command @'[L.Text] "wait-for" $ \ctx s -> do
            void $ tellt ctx ("waiting for !" <> s)
            waitUntil @'MessageCreateEvt (\msg -> msg ^. #content == ("!" <> s))
            void $ tellt ctx ("got !" <> s)
        react @'MessageCreateEvt $ \msg -> handleFailByLogging $ case msg ^. #content of
          "!say hi" -> replicateM_ 3 . P.async $ do
            info "saying heya"
            Right msg' <- tellt msg "heya"
            info "sleeping"
            P.embed $ threadDelay (5 * 1000 * 1000)
            info "slept"
            void . invoke $ EditMessage (msg ^. #channelID) msg' (Just "lol") Nothing
            info "edited"
          _ -> pure ()
        react @('CustomEvt "command-error" (CommandContext.Context, CommandError)) $ \(ctx, e) -> do
          info $ "Command failed with reason: " <> showt e
          case e of
            ParseError n r -> void . tellt ctx $ "Failed to parse parameter: `" <> L.fromStrict n <> "`, with reason: ```\n" <> r <> "```"
        react @('CustomEvt "my-event" (L.Text, Message)) $ \(s, m) ->
          void $ tellt m ("Somebody told me to tell you about: " <> s)
  ```
license-name: MIT
