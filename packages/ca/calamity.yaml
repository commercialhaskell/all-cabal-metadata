homepage: https://github.com/simmsb/calamity
changelog-type: markdown
hash: 003276367ddbae5b3faaac18ca2a47255f3d4bd54c6c59cb0ef8e68da02fce51
test-bench-deps: {}
maintainer: ben@bensimms.moe
synopsis: A library for writing discord bots in haskell
changelog: "# Changelog for Calamity\n\n## 0.1.30.2\n\n+ Removed all the orphan instances
  from the library.\n+ Removed the export of `CalamityCommands.Handler` from `Calamity.Commands`.\n+
  Added the export of `Calamity.Commands.Types` from `Calamity.Commands`.\n+ Fixed
  some parameter parser instances causing type inference to fail\n  ([#48](https://github.com/simmsb/calamity/pull/48)).\n\n##
  0.1.30.1\n\n+ Removed the re-export of `CalamityCommands.ParsePrefix` from Calamity.Commands.\n+
  Added the `Calamity.Commands.Utils.useConstantPrefix` method.\n\n## 0.1.30.0\n\n+
  Removed the `Symbol` parameter of custom events, instead of `'CustomEvt\n  @\"command-error\"
  @(FullContext, CommandError)` it is now `'CustomEvt\n  (CtxCommandError FullContext)`,
  etc.\n+ Added `embedFooter`, `embedImage`, `embedThumbnail`, `embedAuthor`, and\n
  \ `embedField` utility functions.\n+ Added `Default` instances for `EmbedAuthor`.\n+
  Corrected the nullability of `EmbedImage`, `EmbedThumbnail`, `EmbedVideo`, and\n
  \ `EmbedProvider`.\n+ Changed the command parameter machinery to hold more info
  about parameters.\n+ Added a 'type cheatsheet' thing to command help in the default
  help command.\n+ Calamity now uses and re-exports the Calamity-Commands package
  instead of\n  having all the code duplicated.\n+ An extra effect now needs to be
  handled for commands: `ConstructContext`, this\n  also allows you to change which
  context your bot uses.\n+ `Calamity.Commands.Context.Context` has been removed,
  instead use\n  `FullContext`, `LightContext`, or make your own.\n  \n## 0.1.29.0\n\n+
  The minimum version of `base` has been upped to `4.13` as the library fails to\n
  \ build on ghc-8.6\n+ The minimum version of `polysemy` has been upped to 1.5\n+
  The upper bound of `lens` has been bumped to 6\n+ The library now compiles with
  ghc-9\n\n## 0.1.28.5\n\n+ Use the correct HTTP method for `ModifyChannel`\n\n##
  0.1.28.4\n\n+ Rework the route handling so that the bucket keys for emoji routes
  work\n  properly\n\n## 0.1.28.3\n\n+ Fix HTTP responses from discord that don't
  have ratelimit info being treated\n  as errors.\n\n## 0.1.28.2\n\n+ Correct the
  emoji HTTP endpoints to work with `CustomEmoji`s\n+ Rework the ratelimit implementation
  more\n\n## 0.1.28.1\n\n+ Rework the ratelimit implementation to use X-Ratelimit-Bucket\n+
  Fix incorrect interpretation of the retry-after for 429s\n\n## 0.1.28.0\n\n+ Added
  support for message types 19 (reply) and 20 (application command)\n+ Added the `MessageReference`
  type\n+ Changed the type of `Message.webhookID` to `Snowflake Webhook`\n+ Added
  the `activity`, `application`, `messageReference`, `flags`, `stickers`,\n  `referencedMessage`,
  and `interaction` fields to messages.\n+ Added `messageReference` as a parameter
  of `CreateMessageOptions`\n+ Added `repliedUser` as a parameter of `AllowedMentions`\n+
  Fixed `CreateMessage` not actually sending the `allowedMentions` key\n+ Added the
  `CrosspostMessage` route\n+ Added a `ToMessage` instance for `MessageReference`\n+
  Added a `reply` function to `Calamity.Types.Tellable` that replies to a given\n
  \ message in the same channel as the message\n+ Added an `asReference` function
  to `Calamity.Utils.Message`\n\n## 0.1.27.0\n\n+ Change the structure of `Reaction`
  to be `(count, me, emoji)`\n+ The previous structure of `Reaction` is now known
  as `ReactionEvtData`\n+ The type of `MessageReactionAddEvt` and `MessageReactionRemoveEvt`
  events has\n  been changed from `(Message, Reaction)` to `(Message, User, Channel,\n
  \ RawEmoji)`\n+ The type of `RawMessageReactionAddEvt` and `RawMessageReactionRemoveEvt`\n
  \ events has been changed from `Reaction` to `ReactionEvtData`\n+ More fixes to
  HTTP\n+ When parsing guilds, channels/members/ and presences that cannot be parsed
  are\n  (silently) ignored instead of causing parsing of the guild to fail.\n\n##
  0.1.26.1\n\n+ Quick fix of GetChannelMessages\n\n## 0.1.26.0\n\n+ `GetChannelMessages`
  now has an extra parameter to allow the `limit` option to\n  be applied at the same
  time as the other filters.\n+ `ChannelMessagesQuery` has been renamed to `ChannelMessagesFilter`.\n+
  The `ChannelMessagesLimit` type has been introduced.\n\n## 0.1.25.1\n\n+ Add `Upgradeable`
  instances for `VoiceChannnel`, `DMChannel`_, `GroupChannel`, \n  `TextChannel`,
  and `Category`.\n\n## 0.1.25.0\n\n+ Changed how `ModifyGuildMemberData`, and `ModifyGuildRoleData`
  are implemented\n  to allow for the parameters to be optional and nullable.\n+ Changed
  `EditMessage` to use `EditMessageData` instead of `Maybe Text -> Maybe\n  Embed`,
  allowing for the parameters to be optional and nullable.\n\n## 0.1.24.2\n\n+ Add
  event handlers for voice state update events: `'VoiceStateUpdateEvt`\n+ Apply some
  fixes for a few memory leaks\n\n## 0.1.24.1\n\n+ Fix some memory leaks\n\n## 0.1.24.0\n\n+
  Switch from using Wreq to Req\n+ The `session` parameter has been removed from `runBotIO'`\n+
  Add an `Upgradeable` instance for `Role`s\n+ Add a command `Parser` instance for
  `Role`s\n\n## 0.1.23.1\n\n+ Fix some more json parsing issues\n\n## 0.1.23.0\n\n+
  The `roles` field was incorrectly present on the `PresenceUpdate` type, that\n  field
  has been removed.\n+ The `game` field on `Presence` was changed to `activities ::
  [Activity]`\n\n## 0.1.22.1\n\n+ Bump some upper bounds\n+ Fix parsing of members
  from GetGuildMember\n+ Make game field in Presence correctly optional\n+ Make roles
  field in Presence updates correctly optional (internal)\n\n## 0.1.22.0\n\n* Update
  to gateway/http endpoint v8.\n* Updated the message types.\n* Added `defaultIntents`,
  which is all but the privileged intents, also a\n  Data.Default instance.\n* `runBotIO`
  and `runBotIO'` now always take an `Intents` parameter.\n* Users are cached from
  messages, as well as member create events.\n* Fix `Overwrite`s having an incorrect
  `type_` field.\n\n## 0.1.21.0\n\n* Fix ToJSON instance for `RawEmoji`\n\n## 0.1.20.1\n\n*
  Documentation improvements.\n\n## 0.1.20.0\n\n* Migrate do di-polysemy 0.2, runBotIO
  no longer handles the Log effect.\n\n## 0.1.19.2\n\n* Fix broken `Float` parsing.\n\n##
  0.1.19.1\n\n* Fixed another missing activity type\n\n## 0.1.19.0\n\n* Support hidden
  commands.\n\n## 0.1.18.1\n\n* Fix custom presences failing to parse.\n\n## 0.1.18.0\n\n*
  Add raw message events: `RawMessageUpdateEvt`, `RawMessageDeleteEvt`,\n  `RawMessageDeleteBulkEvt`,
  `RawMessageReactionAddEvt`,\n  `RawMessageReactionRemoveEvt`, `RawMessageReactionRemoveAllEvt`.\n\n*
  Fixed bulk message deletes firing a message delete per deleted message,\n  instead
  of a bulk message delete event (I'm not sure how I did that).\n\n* Add `animated`
  field to `Partial Emoji`s.\n\n* Make show instances for `Partial Emoji` and `RawEmoji`
  show to their discord\n  representation.\n\n## 0.1.17.2\n\n*2020-07-04*\n\n* Drop
  GHC-8.6.5, it doesn't like strictdata\n\n* Use unboxing-vector instead of doing
  stuff ourselves\n\n## 0.1.17.1\n\n*2020-06-29*\n\n* `waitUntil` and `waitUntilM`
  now correctly remove the temorary event handler\n  they create if an exception is
  raised.\n\n## 0.1.17.0\n\n*2020-06-28*\n\n* Allow the session used for http requests
  to be specified to the client.\n\n* Drop from using a Wreq fork to vanilla Wreq.\n\n*
  `TFile` now requires a filename parameter.\n\n## 0.1.16.0\n\n* Change how commands
  should be manually invoked from code, instead of firing a\n  `\"invoke-command\"`
  custom event, now the `handleCommands` function should be\n  used, which returns
  information about if the command succeeded.\n\n* Added `fetchHandler` for retrieving
  the command handler inside a command DSL.\n\n## 0.1.15.0\n\n* General cleanup of
  codebase\n\n* Enable StrictData by default\n\n## 0.1.14.9\n\n*2020-06-22*\n\n* Support
  manually invoking commands.\n\n## 0.1.14.8\n\n*2020-06-21*\n\n* Replace uses of
  withLowerToIO with interpretFinal (should be more performant)\n\n## 0.1.14.7\n\n*2020-06-21*\n\n*
  Fix missing usage of GetAuditLogOptions in GetAuditLog\n\n## 0.1.14.6\n\n*2020-06-18*\n\n*
  Add command parameter `Parser`s for `Int`, `Integer`, `Word`, `Natural`, and\n  `Float`.\n\n##
  0.1.14.5\n\n*2020-06-18*\n\n* The `DecodeError` variant of the `RestError` type
  has been renamed to\n  `InternalClientError` as all issues in the rest client now
  end up here.\n\n* We're now using `discord.com` instead of `discordapp.com`\n\n##
  0.1.14.4\n\n*2020-06-11*\n\n* Added `activity` to construct Activities\n\n* Added
  aliases for commands and groups, with new functions to create them\n  (`commandA`,
  `groupA`, ...).\n\n* The built in help command now shows aliases and checks.\n\n##
  0.1.14.3\n\n*2020-06-10*\n\n* Fix some bugs in the gateway\n\n## 0.1.14.2\n\n*2020-06-09*\n\n*
  Fix broken json decoding for DMs\n\n* Add `mentionChannels` to `Message`\n\n## 0.1.14.1\n\n*2020-06-08*\n\n*
  Fix broken json decoding for member's\n\n## 0.1.14.0\n\n*2020-06-08*\n\n* Unpacked
  the `user` field of `Member` into itself.\n\n* Add message formatting utilities
  (`Calamity.Utils.Message`).\n\n* Add support for allowed mentions in `Tellable`.\n\n*
  Change Snowflake's show instance to just show the numberic id.\n\n* Added parsers
  for RawEmoji and Either.\n\n## 0.1.13.0\n\n*2020-06-06*\n\n* Changed event handlers
  to take tuples instead of being higher arity when there\n  is more than one parameter
  to the callback.\n\n## 0.1.12.0\n\n*2020-06-06*\n\n* Changed some events to take
  enums instead of booleans: `GuildCreateEvt` and\n  `GuildDeleteEvt`.\n\n## 0.1.11.2\n\n*2020-06-03*\n\n*
  Moved the internal `UpdatedMessage` from\n  `Calamity.Types.Model.Channel.Message`
  into\n  `Calamity.Types.Model.Channel.UpdatedMessage`.\n\n## 0.1.11.0\n\n*2020-05-31*\n\n*
  Add command parameter parsers for channel/guild/emoji\n* Support allowed mentions\n*
  Support invite events\n* Support setting gateway intents\n* Add `Calamity.Types.Model.Guild.Permission`
  and `Calamity.Utils.Permissions`\n  and change permissions fields from `Word64`
  to `Permissions`\n* Add `Calamity.Utils.Colour` and change color fields from `Word64`
  to\n  `Data.Color.Color Double`\n\n## 0.1.10.0\n\n*2020-05-27*\n\n* Renamed `Calamity.Commands.Parser.KleeneConcat`
  to\n  `Calamity.Commands.Parser.KleeneStarConcat` and added\n  `Calamity.Commands.Parser.KleenePlusConcat`\n\n*
  Added `Calamity.Types.Upgradeable`\n\n## 0.1.9.2\n\n*2020-05-23*\n\n* Added a default
  help command, located in `Calamity.Commands.Help`.\n\n* Commands now have the list
  of parameters they take\n\n## 0.1.9.1\n\n*2020-05-23*\n\n* Added `Calamity.Commands.Parser.Named`
  for parameters that have a name.\n\n* General improvements to parser errors\n\n##
  0.1.9.0\n\n*2020-05-22*\n\n* Added commands, located in `Calamity.Commands`, along
  with a DSL for declaring\n  commands nicely.\n\n* Renamed `waitUntil` to `waitUntilM`,
  and introduced a variant with a pure\n  check function that takes the original name
  of `waitUntil`.\n\n## 0.1.8.0\n\n*2020-05-15*\n\n* Did a large rework of how event
  handlers are stored internally.\n* introduced `waitUntil`\n\n## 0.1.4.0\n\n* Added
  back extra exports of `Calamity.Types.Partial` from\n  `Calamity.Types.Model.Guild.Guild`,
  `Calamity.Type.Model.Guild.Emoji`, and\n  `Calamity.Types.Model.Channel`. There
  is now way to export the constructor\n  without also exporting Partial apparently?\n\n\n##
  0.1.3.0\n\n*2020-04-27*\n\n* Removed extra exports of `Calamity.Types.Partial` from\n
  \ `Calamity.Types.Model.Guild.Guild`, `Calamity.Type.Model.Guild.Emoji`, and\n  `Calamity.Types.Model.Channel`\n\n*
  Added missing exports of `CreateGuildEmojiOptions` and\n  `ModifyGuildEmojiOptions`
  from `Calamity.HTTP.Emoji`\n\n* Added missing exports of `CreateGuildData` and `ModifyGuildData`
  from\n  `Calamity.HTTP.Guild`\n\n## 0.1.2.0\n\n*2020-04-27*\n\n* Calamity.Client:
  runBotIO now has a `Polysemy.Fail` effect\n\n## Unreleased changes\n"
basic-deps:
  focus: '>=1.0 && <2'
  http-client: '>=0.5 && <0.8'
  polysemy-plugin: ==0.3.*
  exceptions: ==0.10.*
  bytestring: '>=0.10 && <0.12'
  calamity-commands: '>=0.1.2 && <0.2'
  reflection: '>=2.1 && <3'
  lens-aeson: '>=1.1 && <2'
  PyF: '>=0.9.0.2 && <0.10'
  stm: '>=2.5 && <3'
  base: '>=4.13 && <5'
  data-default-class: ==0.1.*
  time: '>=1.8 && <1.12'
  unordered-containers: ==0.2.*
  text: '>=1.2 && <2'
  deque: ==0.4.*
  safe-exceptions: '>=0.1 && <2'
  http-api-data: '>=0.4.3 && <0.5'
  megaparsec: '>=8 && <10'
  di-polysemy: ==0.2.*
  di-core: '>=1.0.4 && <1.1'
  text-show: '>=3.8 && <4'
  tls: '>=1.4 && <2'
  async: '>=2.2 && <3'
  websockets: ==0.12.*
  req: '>=3.1 && <3.10'
  connection: '>=0.2.6 && <0.4'
  http-date: '>=0.0.8 && <0.1'
  containers: ==0.6.*
  lens: '>=4.18 && <6'
  concurrent-extra: ==0.7.*
  x509-system: '>=1.6.6 && <1.7'
  mime-types: ==0.1.*
  data-flags: '>=0.0.3 && <0.1'
  unboxing-vector: ==0.2.*
  mtl: '>=2.2 && <3'
  unagi-chan: ==0.4.*
  hashable: '>=1.2 && <2'
  stm-chans: '>=3.0 && <4'
  polysemy: '>=1.5 && <2'
  generic-lens: '>=2.0 && <3'
  colour: '>=2.3.5 && <2.4'
  deepseq: '>=1.4.4.0 && <2'
  df1: ==0.4.*
  scientific: ==0.3.*
  stm-containers: '>=1.1 && <2'
  http-types: ==0.12.*
  typerep-map: ==0.3.*
  aeson: '>=1.4 && <2'
  vector: ==0.12.*
all-versions:
- 0.1.0.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- 0.1.4.4
- 0.1.5.0
- 0.1.5.1
- 0.1.6.0
- 0.1.6.1
- 0.1.6.2
- 0.1.7.0
- 0.1.8.0
- 0.1.8.1
- 0.1.9.0
- 0.1.9.1
- 0.1.9.2
- 0.1.9.3
- 0.1.9.4
- 0.1.10
- 0.1.10.1
- 0.1.11.0
- 0.1.11.1
- 0.1.11.2
- 0.1.12.0
- 0.1.13.0
- 0.1.14.0
- 0.1.14.1
- 0.1.14.2
- 0.1.14.3
- 0.1.14.4
- 0.1.14.5
- 0.1.14.6
- 0.1.14.7
- 0.1.14.8
- 0.1.14.9
- 0.1.15.0
- 0.1.16.0
- 0.1.17.0
- 0.1.17.1
- 0.1.18.0
- 0.1.18.1
- 0.1.19.0
- 0.1.19.1
- 0.1.19.2
- 0.1.20.0
- 0.1.20.1
- 0.1.21.0
- 0.1.22.0
- 0.1.22.1
- 0.1.23.0
- 0.1.23.1
- 0.1.24.0
- 0.1.24.1
- 0.1.24.2
- 0.1.25.0
- 0.1.25.1
- 0.1.26.0
- 0.1.26.1
- 0.1.27.0
- 0.1.28.0
- 0.1.28.1
- 0.1.28.2
- 0.1.28.3
- 0.1.28.4
- 0.1.28.5
- 0.1.29.0
- 0.1.30.0
- 0.1.30.1
- 0.1.30.2
author: Ben Simms
latest: 0.1.30.2
description-type: markdown
description: "<h1 align=\"center\">Calamity</h1>\n\n<p align=\"center\">\n  <a href=\"https://hackage.haskell.org/package/calamity\"><img
  src=\"https://img.shields.io/hackage/v/calamity\" alt=\"Hackage\"></a>\n  <a href=\"https://gitlab.com/simmsb/calamity/pipelines\"><img
  src=\"https://img.shields.io/gitlab/pipeline/simmsb/calamity\" alt=\"Gitlab pipeline
  status\"></a>\n  <a href=\"https://github.com/simmsb/calamity/blob/master/LICENSE\"><img
  src=\"https://img.shields.io/github/license/simmsb/calamity\" alt=\"License\"></a>\n
  \ <a href=\"https://hackage.haskell.org/package/calamity\"><img src=\"https://img.shields.io/hackage-deps/v/calamity\"
  alt=\"Hackage-Deps\"></a>\n  <a href=\"https://discord.gg/NGCThCY\"><img src=\"https://discord.com/api/guilds/754446998077178088/widget.png?style=shield\"
  alt=\"Discord Invite\"></a>\n</p>\n\nCalamity is a Haskell library for writing discord
  bots, it uses\n[Polysemy](https://hackage.haskell.org/package/polysemy) as the core
  library for\nhandling effects, allowing you to pick and choose how to handle certain
  features\nof the library.\n\nIf you're looking for something with a less complicated
  interface, you might\nwant to take a look at\n[discord-haskell](https://github.com/aquarial/discord-haskell).\n\nThe
  current customisable effects are:\n\n* Cache: The default cache handler keeps the
  cache in memory, however you could\n  write a cache handler that stores cache in
  a database for example.\n\n* Metrics: The library has counters, gauges, and histograms
  installed to measure\n  useful things, by default these are not used (and cost nothing),
  but could be\n  combined with [Prometheus](https://hackage.haskell.org/package/prometheus).
  An\n  example of using prometheus as the metrics handler can be found\n  [here](https://github.com/simmsb/calamity-example).\n\n*
  Logging: The [di-polysemy](https://hackage.haskell.org/package/di-polysemy)\n  library
  is used to allow the logging effect to be customized, or disabled.\n\n# Docs\n\nYou
  can find documentation on hackage at: https://hackage.haskell.org/package/calamity\n\nThere's
  also a good blog post that covers the fundamentals of writing a bot with\nthe library,
  you can read it here:\nhttps://morrowm.github.io/posts/2021-04-29-calamity.html\n\n#
  Examples\n\nHere's a list of projects that use calamity:\n<!-- - [simmsb/calamity-example](https://github.com/simmsb/calamity-example):
  An extended example of the snippet below, shows use of metrics. -->\n- [simmsb/calamity-bot](https://github.com/simmsb/calamity-bot):
  Uses a database, showing modularization of groups/commands.\n- [MorrowM/pandabot-discord](https://github.com/MorrowM/pandabot-discord):
  Uses a database, performs member role management, etc.\n- [MorrowM/calamity-tutorial](https://github.com/MorrowM/calamity-tutorial):
  A bare minimum bot.\n\n(Feel free to contact me via the discord server, or email
  me via\nben@bensimms.moe if you've written a bot using calamity, or don't want your\nproject
  listed here)\n\n``` haskell\n#!/usr/bin/env cabal\n{- cabal:\n  build-depends:\n
  \    base >= 4.13 && < 5\n     , calamity >= 0.1.30.1\n     , text >= 1.2 && < 2\n
  \    , lens >= 4.18 && < 5\n     , di-polysemy ^>= 0.2\n     , di >= 1.3 && < 2\n
  \    , df1 >= 0.3 && < 0.5\n     , di-core ^>= 1.0.4\n     , polysemy ^>= 1.5\n
  \    , polysemy-plugin ^>= 0.3\n     , stm ^>= 2.5\n     , text-show ^>= 3.9\n-}\n\n{-#
  OPTIONS_GHC -fplugin=Polysemy.Plugin #-}\n\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE
  FlexibleContexts #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE LambdaCase #-}\n{-# LANGUAGE
  OverloadedLabels #-}\n\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE PolyKinds
  #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-#
  LANGUAGE TypeApplications #-}\n\n{-# LANGUAGE BlockArguments #-}\n\n{-# LANGUAGE
  TypeOperators #-}\n\nmodule Main where\n\nimport           Calamity\nimport           Calamity.Cache.InMemory\nimport
  Calamity.Commands\nimport Calamity.Commands.Context (FullContext, useFullContext)\nimport
  \          Calamity.Metrics.Noop\n\nimport           Control.Concurrent\nimport
  \          Control.Concurrent.STM.TVar\nimport           Control.Lens\nimport           Control.Monad\n\nimport
  qualified Data.Text.Lazy as L\n\nimport qualified Di\nimport qualified DiPolysemy
  \                 as DiP\n\nimport qualified Polysemy                    as P\nimport
  qualified Polysemy.Async              as P\nimport qualified Polysemy.AtomicState
  \       as P\nimport qualified Polysemy.Embed              as P\nimport qualified
  Polysemy.Fail               as P\n\nimport           Prelude                     hiding
  ( error )\n\nimport           System.Environment          (getEnv)\n\nimport           TextShow\n\ndata
  Counter m a where\n  GetCounter :: Counter m Int\n\nP.makeSem ''Counter\n\nrunCounterAtomic
  :: P.Member (P.Embed IO) r => P.Sem (Counter ': r) a -> P.Sem r a\nrunCounterAtomic
  m = do\n  var <- P.embed $ newTVarIO (0 :: Int)\n  P.runAtomicStateTVar var $ P.reinterpret
  (\\case\n                                              GetCounter -> P.atomicState
  (\\v -> (v + 1, v))) m\n\nhandleFailByLogging m = do\n  r <- P.runFail m\n  case
  r of\n    Left e -> DiP.error $ L.pack e\n    _      -> pure ()\n\ninfo, debug ::
  BotC r => L.Text -> P.Sem r ()\ninfo = DiP.info\ndebug = DiP.info\n\ntellt :: (BotC
  r, Tellable t) => t -> L.Text -> P.Sem r (Either RestError Message)\ntellt t m =
  tell t $ L.toStrict m\n\ndata MyCustomEvt = MyCustomEvt L.Text Message\n\nmain ::
  IO ()\nmain = do\n  token <- L.pack <$> getEnv \"BOT_TOKEN\"\n  Di.new $ \\di ->\n
  \   void . P.runFinal . P.embedToFinal . DiP.runDiToIO di . runCounterAtomic \n
  \        . runCacheInMemory . runMetricsNoop . useConstantPrefix \"!\" . useFullContext\n
  \     $ runBotIO (BotToken token) defaultIntents $ do\n      addCommands $ do\n
  \       helpCommand\n        command @'[User] \"utest\" $ \\ctx u -> do\n          void
  $ tellt ctx $ \"got user: \" <> showtl u\n        command @'[Named \"u\" User, Named
  \"u1\" User] \"utest2\" $ \\ctx u u1 -> do\n          void $ tellt ctx $ \"got user:
  \" <> showtl u <> \"\\nand: \" <> showtl u1\n        command @'[L.Text, Snowflake
  User] \"test\" $ \\ctx something aUser -> do\n          info $ \"something = \"
  <> showtl something <> \", aUser = \" <> showtl aUser\n        command @'[] \"hello\"
  $ \\ctx -> do\n          void $ tellt ctx \"heya\"\n        group \"testgroup\"
  $ do\n          command @'[[L.Text]] \"test\" $ \\ctx l -> do\n            void
  $ tellt ctx (\"you sent: \" <> showtl l)\n          command @'[] \"count\" $ \\ctx
  -> do\n            val <- getCounter\n            void $ tellt ctx (\"The value
  is: \" <> showtl val)\n          group \"say\" $ do\n            command @'[KleenePlusConcat
  L.Text] \"this\" $ \\ctx msg -> do\n              void $ tellt ctx msg\n        command
  @'[Snowflake Emoji] \"etest\" $ \\ctx e -> do\n          void $ tellt ctx $ \"got
  emoji: \" <> showtl e\n        command @'[] \"explode\" $ \\ctx -> do\n          Just
  x <- pure Nothing\n          debug \"unreachable!\"\n        command @'[] \"bye\"
  $ \\ctx -> do\n          void $ tellt ctx \"bye!\"\n          stopBot\n        command
  @'[] \"fire-evt\" $ \\ctx -> do\n          fire . customEvt $ MyCustomEvt \"aha\"
  (ctx ^. #message)\n        command @'[L.Text] \"wait-for\" $ \\ctx s -> do\n          void
  $ tellt ctx (\"waiting for !\" <> s)\n          waitUntil @'MessageCreateEvt (\\msg
  -> msg ^. #content == (\"!\" <> s))\n          void $ tellt ctx (\"got !\" <> s)\n
  \     react @'MessageCreateEvt $ \\msg -> handleFailByLogging $ case msg ^. #content
  of\n        \"!say hi\" -> replicateM_ 3 . P.async $ do\n          info \"saying
  heya\"\n          Right msg' <- tellt msg \"heya\"\n          info \"sleeping\"\n
  \         P.embed $ threadDelay (5 * 1000 * 1000)\n          info \"slept\"\n          void
  . invoke $ EditMessage (msg ^. #channelID) msg' (editMessageContent $ Just \"lol\")\n
  \         info \"edited\"\n        _ -> pure ()\n      react @('CustomEvt (CtxCommandError
  FullContext)) \\(CtxCommandError ctx e) -> do\n        info $ \"Command failed with
  reason: \" <> showtl e\n        case e of\n          ParseError n r -> void . tellt
  ctx $ \"Failed to parse parameter: `\" <> L.fromStrict n <> \"`, with reason: ```\\n\"
  <> r <> \"```\"\n      react @('CustomEvt MyCustomEvt) $ \\(MyCustomEvt s m) ->\n
  \       void $ tellt m (\"Somebody told me to tell you about: \" <> s)\n```\n\n##
  Disabling library logging\n\nThe library logs on debug levels by default, if you
  wish to disable logging you\ncan do something along the lines of:\n\n``` haskell\nimport
  qualified Di\nimport qualified Df1\nimport qualified Di.Core\nimport qualified DiPolysemy\n\nfilterDi
  :: Di.Core.Di l Di.Path m -> Di.Core.Di l Di.Path m\nfilterDi = Di.Core.filter (\\_
  p _ -> Df1.Push \"calamity\" `notElem` p)\n\nDi.new $ \\di ->\n-- ...\n  . runDiToIO
  di\n  -- disable logs emitted by calamity\n  . DiPolysemy.local filterDi\n  . runBotIO\n
  \ -- ...\n```\n\n"
license-name: MIT
