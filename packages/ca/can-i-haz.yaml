all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
author: Georg Rudoy
basic-deps:
  base: '>=4.7 && <5'
  mtl: '>=0'
changelog: |
  # Changelog for can-i-haz

  ## 0.3.1.1

  * Fix certain warnings with newer GHC for cleaner builds.

  ## 0.3.1.0

  * Add `liftMaybe` utility function to `Control.Monad.Except.CoHas`.

  ## 0.3.0.0

  * Reexport `Control.Monad.Reader` from the `Control.Monad.Reader.Has` module with
    custom `ask`, `asks` and `reader` functions more compatible with the `Has` class.
  * Similarly for `Control.Monad.Except`, `CoHas` and `throwError`/`liftError` functions.

  ## 0.2.1.0

  * Added the `update` method to `Has` (yay lenses).
  * Fixed the documentation regarding the recursiveness of the search.

  ## 0.2.0.1

  * Less boilerplate for `Has` tuple instances and `CoHas` `Either` instance.
  * Out-of-the-box `Has` support for up to sextuples due to the reduced boilerplate.

  ## 0.2.0.0

  * Added `CoHas` class (dual to `Has`), allowing injecting values into sum types.

  ## 0.1.0.1

  * Added documentation.
  * Export the SearchSuccessful type which might aid hand-writing instances.

  ## 0.1.0.0

  Initial release.
changelog-type: markdown
description: |
  # can-i-haz

  [![Build Status][travis-badge]][travis]
  [![Hackage][hackage-badge]][hackage]
  [![Stackage LTS][stackage-lts-badge]][stackage-lts]
  [![Stackage Nightly][stackage-nightly-badge]][stackage-nightly]

  `Generic` implementation of the Has-pattern (mostly useful with `MonadReader` and `MonadState`)
  and its dual `CoHas` (mostly useful with `MonadError`).

  ## Motivation

  Assume there are two types representing the `MonadReader` environments
  for different parts of an app:
  ```haskell
  data DbConfig = DbConfig { .. }
  data WebConfig = WebConfig { .. }
  ```
  as well as a single type containing both of those:
  ```haskell
  data AppEnv = AppEnv
    { dbConfig :: DbConfig
    , webConfig :: WebConfig
    }
  ```

  What should be the `MonadReader` constraint of the DB module and web module respectively?
  1. It could be `MonadReader AppEnv m` for both, introducing unnecessary coupling.
  2. Or it could be `MonadReader DbConfig m` for the DB module
     and `MonadReader WebConfig m` for the web module respectively,
     but combining them becomes a pain.

  Or, it could be `MonadReader r m, Has DbConfig r` for the DB module,
  where `Has` class allows projecting `DbConfig` out of some `r`,
  and similarly for the web module!
  This approach keeps both modules decoupled, while allowing using them in the same monad stack.

  The only downside is that now one has to define the `Has` class
  and write tediuos instances for the `AppEnv` type
  (and potentially other types in case of tests).

  ## The solution

  This library saves you from this unnecessary boilerplate!
  The only thing you have to do is to append the `deriving`-clause:
  ```haskell
  data AppEnv = AppEnv
    { dbConfig :: DbConfig
    , webConfig :: WebConfig
    } deriving (Generic, Has DbConfig, Has WebConfig)
  ```
  and use `ask extract` instead of `ask` (but this is something you'd have to do anyway).

  ## Reversing the arrows: `CoHas`

  There is a dual (but arguably less frequent) problem of combining different parts of an application
  living in different `MonadError` environments.
  The duality is due to us now wanting to _inject_ values of a type _into_ a "wider" _sum_ type
  (as opposed to _projecting_ values _out_ of some _product_ type).
  The `CoHas` class serves exactly this purpose.

  ## Documentation

  Perhaps the best source is the [Haddock docs](http://hackage.haskell.org/package/can-i-haz/docs/Control-Monad-Reader-Has.html).

  ## Acknowledgements

  Thanks lyxia @ #haskell for the type families-based derivation of the `GHas` instance.

  [travis]:        <https://travis-ci.org/0xd34df00d/can-i-haz>
  [travis-badge]:  <https://travis-ci.org/0xd34df00d/can-i-haz.svg?branch=master>
  [hackage]:       <https://hackage.haskell.org/package/can-i-haz>
  [hackage-badge]: <https://img.shields.io/hackage/v/can-i-haz.svg>
  [stackage-lts-badge]: <http://stackage.org/package/can-i-haz/badge/lts>
  [stackage-nightly-badge]: <http://stackage.org/package/can-i-haz/badge/nightly>
  [stackage-lts]: <http://stackage.org/lts/package/can-i-haz>
  [stackage-nightly]: <http://stackage.org/nightly/package/can-i-haz>
description-type: markdown
hash: e858325fa488ebd2d8c180f00009311ef6bb3741ebf2df624c9fba539ddccda1
homepage: https://github.com/0xd34df00d/can-i-haz#readme
latest: 0.3.1.1
license-name: BSD-3-Clause
maintainer: 0xd34df00d@gmail.com
synopsis: Generic implementation of the Has and CoHas patterns
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.7 && <5'
  can-i-haz: '>=0'
  deepseq: '>=0'
  hspec: '>=0'
  mtl: '>=0'
