all-versions:
- 0.1.0.0
- 0.1.1.0
author: Michael Hatfield
basic-deps:
  base: '>=4 && <5'
  bytestring: '>=0'
  case-insensitive-match: '>=0'
  text: '>=0'
changelog: ''
changelog-type: text
description: "\n### case-insensitive-match 0.1.1.0\n\nHere is a simplified library
  for matching and comparing strings in a\ncase-insensitive manner. The only dependencies
  are `base`, `bytestring` and\n`text`.\n\nUsage is simple\n\n    -- normal string
  comparison\n    \"href\"    /=  \"HREF\"\n    \"apples\"  /=  \"oranges\"\n    \"Smith\"
  \  <   \"Jones\n\n    -- case-insensitive comparison\n    \"href\"    ^== \"HREF\"\n
  \   \"appples\" ^/= \"oranges\"\n    \"jones\"   ^<  \"Smith\"\n\n    -- sorting
  some data structurue\n    get_names p = (last_name p,first_name p)\n    sortBy (caseInsensitiveComparing
  get_names) people\n\n#### Benchmarks\n\nThe benchmarks are pretty comprehensive,
  offering comparisons with other\nalgorithms, including the `case-insensitive` package
  and simple case folding\nusing the `base` package. Before simply running the `bench-others`
  executable,\ncheck the source code or you'll end up with a long series of 360 benchmark\ntests.
  You'll want something like `bench-others -m glob ByteString/Short/*/*`,\nwhich runs
  _only_ 36 benchmarks. The heirarchy is\n`<data-type>/<string-length>/<match-type>/<algorithm>`.
  As usual, performance\ncomparisons depend heavily on use-cases, but for matching
  shorter strings that\nare often unequal this algorithm is clearly fastest.\n\nThere
  is also a real-world bench test that compares different algorithms while\nlooking
  for links in an HTML file with Text.HTML.TagSoup. This bench involves\na lot of
  work other than string comparison, so the differences between\nalgorithms is slim,
  but usually measurable. Build an run:\n\n    $ cabal build bench-tagsoup\n    ...\n\n
  \   $ curl -s 'https://hackage.haskell.org/packages/names' > sample/hackage-names.html\n
  \   $ dist/build/bench-tagsoup/bench-tagsoup < sample/hackage-names.html\n    ...\n\n\n####
  Testing\n\nIt would be quite involved to build a perfectly comprehensive testing
  module,\nbut the `test-basics` executable is tests multiple cases against all supported\ndata
  types.\n\n\n#### Sample\n\nHere is a sample:\n\n    {-# LANGUAGE OverloadedStrings
  #-}\n\n    module Main ( main ) where\n\n    import           Data.List\n    import
  \          Data.CaseInsensitive\n    import qualified Data.ByteString.Char8 as BS\n\n
  \   main = do\n        stdin <- BS.getContents\n        let sorted_names = map join_name
  $ sortBy caseInsensitiveCompare $ map split_name $ BS.lines stdin\n        mapM_
  BS.putStrLn sorted_names\n\n\n    split_name name = (last,BS.drop 2 first)\n        where
  (last,first) = BS.span (/= ',') name\n\n    join_name (last,first) = BS.concat [
  last , \", \" , first ]\n\n\nTry it with:\n\n    $ cabal build readme-sample\n    ...\n
  \   \n    $ dist/build/readme-sample/readme-sample < sample/declaration-signers.txt\n\n\n"
description-type: markdown
hash: 7ec680edcdaf70a09d51529fe7d6c54285e0d7e00d7b399f3908b064a15d73dc
homepage: https://github.com/mikehat/case-insensitive-match
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: github@michael-hatfield.com
synopsis: A simplified, faster way to do case-insensitive matching.
test-bench-deps:
  QuickCheck: '>=2 && <3'
  base: '>=4 && <5'
  bytestring: <1
  case-insensitive: '>=1 && <2'
  case-insensitive-match: '>=0'
  criterion: '>=0'
  mtl: '>=2 && <3'
  random-strings: <1.0
  tagsoup: '>=0'
  text: '>=1 && <2'
