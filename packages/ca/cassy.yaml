all-versions:
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.3.2
- '0.4'
- 0.4.0.1
- 0.5.1.0
- 0.5.2
- '0.6'
- 0.7.1
author: Ozgun Ataman
basic-deps:
  Thrift: '>=0.6'
  aeson: '>=0'
  async: '>=0'
  attoparsec: '>=0.10 && <0.13'
  base: '>=4 && <5'
  binary: '>=0'
  bytestring: '>=0'
  cassandra-thrift: '>=0.8'
  cereal: '>=0'
  conduit: '>=1.1 && <1.2'
  containers: '>=0'
  data-default: '>=0'
  errors: '>=0'
  exceptions: '>=0'
  mtl: '>=0'
  network: '>=0'
  resource-pool: '>=0'
  retry: '>=0.5 && <0.6'
  safecopy: '>=0'
  stm: '>=0'
  syb: '>=0'
  text: '>=0'
  time: '>=0'
  transformers-base: '>=0'
changelog: ''
changelog-type: ''
description: |-
  The objective is to completely isolate away the thrift layer, providing
  a more idiomatic and naruall Haskell experience working with Cassandra. Be sure
  to check out the README on Github for some more explanation and
  Release Notes, which is helpful in talking about what this library
  can do.

  Certain parts of the API was inspired by pycassa (Python client) and
  hscassandra (on Hackage).

  Please see the Github repository for more detailed documentation,
  release notes and examples.

  A brief explanation of modules:

  * /Database.Cassandra.Basic/: Contains a low level, simple
  implementation of Cassandra interaction using the thrift API
  underneath.

  * /Database.Cassandra.Marshall/: Intended to be the main high level
  module that you should use, Marshall allows you to pick the
  serialization strategy you would like to use at each function
  call. We recommend using 'casSafeCopy' due to its support for
  evolving data types, although casJSON maybe another popular
  choice.

  * /Database.Cassandra.JSON/: (Now deprecated; use Marshall instead)
  A higher level API that operates on values with ToJSON and
  FromJSON isntances from the /aeson/ library. This module has in
  part been inspired by Bryan O\'Sullivan\'s /riak/ client for
  Haskell.

  * /Database.Cassandra.Pool/: Handles a /pool/ of connections to
  multiple servers in a cluster, splitting the load among them.

  * /Database.Cassandra.Pack/: Handles column types that Cassandra
  recognizes and adds support for Composite Columns.

  * /Database.Cassandra.Types/: A common set of types used everywhere.

  Potential TODOs include:

  * Support for counters and batch mutators

  * Support for database admin operations
description-type: haddock
hash: b701cf7e801b373f6f17b1a092838d09de7ddf99e7cdd245834ea0727da38edb
homepage: http://github.com/ozataman/cassy
latest: 0.7.1
license-name: BSD-3-Clause
maintainer: ozataman@gmail.com
synopsis: A high level driver for the Cassandra datastore
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  Thrift: '>=0'
  base: '>=4 && <5'
  bytestring: '>=0'
  cassandra-thrift: '>=0'
  cassy: '>=0'
  containers: '>=0'
  derive: '>=0'
  network: '>=0'
  test-framework: '>=0.6'
  test-framework-hunit: '>=0.2.7'
  test-framework-quickcheck2: '>=0.2.12.2'
  text: '>=0'
  time: '>=0'
