homepage: https://github.com/domdere/cassava-conduit
changelog-type: markdown
hash: ffc2cc74758db9885dffb4d4af371465f8254ce27fb67ef5611b9cd7e8b4ae44
test-bench-deps:
  bytestring: ==0.11.*
  base: '>4 && <5'
  text: ==1.2.* || >=2.0 && <2.1
  criterion: '>=0.8'
  conduit: ==1.3.*
  cassava: ==0.5.*
  cassava-conduit: -any
  QuickCheck: ==2.12.*
maintainer: Dom De Re
synopsis: Conduit interface for cassava package
changelog: "# 0.6.1\n\n- Add `fromCsvStreamErrorNoThrow` and `fromNamedCsvStreamErrorNoThrow`,
  functions that also put halting errors on the conduit instead of throwing in `MonadError`.\n\n#
  0.6.0\n\n- `streamParser` and functions using it would swallow certain runaway errors.
  This is fixed.\n\n# 0.5.x\n\n## 0.4.0.2 -> 0.5.0\n\n- `EitherT` -> `ExceptT`\n\n#
  0.4.x\n\n## 0.4.0.1 -> 0.4.0.2\n\n- Bumped `conduit` to `1.3.*` (from `1.2.*`)\n-
  The `conduit-extra` dep was unecessary\n\n## 0.3.5.1 -> 0.4.0.0\n\n`cassava` was
  bumped from `0.4.*` to `0.5.*`.\n\nThere were some semantic changes going from cassava
  0.4.* -> 0.5.*, see here\n\nBut I don't think they muddle with any of the explicit
  cassava-conduit semantics:\n\n- `QuoteMinimal` semantics are not defined by `cassava-conduit`,
  so it will change behaviour, but \n- `cassava-conduit` won't compensate for it (hence
  the bump from `0.3` to `0.4`).\n- It doesn't use `foldl'`\n- cassava-conduit doesn't
  use `encodeByNamedWith` so the `encIncludeHeader` flag shouldn't have any effect.\n\n#
  0.3.x\n\n## 0.2.2 -> 0.3.0\n\nSome new error types, and error contain `T.Text` and
  not `String` now\n\n``` Haskell\ndata CsvParseError =\n        CsvParseError BS.ByteString
  T.Text\n    |   IncrementalError T.Text\n        deriving (Show, Eq)\n\n-- | When
  you want to include errors in the stream, this error type represents errors that
  halt the stream.\n-- They do not appear inside the conduit and will instead get
  returned from running the conduit.\n--\ndata CsvStreamHaltParseError = HaltingCsvParseError
  BS.ByteString T.Text -- ^ the remaining bytestring that was read in but not parsed
  yet, and the stringy error msg describing the fail.\n    deriving (Show, Eq)\n\n--
  | When you want to include errors in the stream, these are the errors that can be
  included in the stream,\n-- they are usually problems restricted to individual records,
  and streaming can resume from the next record\n-- you just have to decide on something
  sensible to do with the per record errors.\n--\ndata CsvStreamRecordParseError =
  CsvStreamRecordParseError T.Text deriving (Show, Eq) -- ^ The stringy error describing
  why this record could not be parsed.\n```\n\nNew error types are to separate out
  errors that stop streaming (and hence imply there are valid records that might be
  omitted) and errors that can be skipped, allowing valid records after to be processed...\n\n```
  Haskell\n-- |\n-- Same as `fromCsv` but allows for errors to be handled in the pipeline
  instead\n--\nfromCsvStreamError :: (FromRecord a, MonadError e m) => DecodeOptions
  -> HasHeader -> (CsvStreamHaltParseError -> e) -> Conduit BS.ByteString m (Either
  CsvStreamRecordParseError a)\nfromCsvStreamError opts h f = {-# SCC fromCsvStreamError_p
  #-} streamParser f $ decodeWith opts h\n\n-- |\n-- Like `fromNamedCsvStream` but
  allows for errors to be handled in the pipeline itself.\n--\nfromNamedCsvStreamError
  :: (FromNamedRecord a, MonadError e m) => DecodeOptions -> (CsvStreamHaltParseError
  -> e) -> Conduit BS.ByteString m (Either CsvStreamRecordParseError a)\nfromNamedCsvStreamError
  opts f = {-# SCC fromCsvStreamError_p #-} streamHeaderParser f $ decodeByNameWith
  opts\n```\n\n# 0.2.x\n\n## 0.1.0 -> 0.2.0\n\n``` Haskell\nfromCsvLiftError :: (FromRecord
  a, MonadError e m) => (CsvParseError -> e) -> DecodeOptions -> HasHeader -> Conduit
  BS.ByteString m a\nfromNamedCsvLiftError :: (FromNamedRecord a, MonadError e m)
  => (CsvParseError -> e) -> DecodeOptions -> Conduit BS.ByteString m a\n```\n\n#
  0.1.x\n\n## 0.0.1 -> 0.1.0\n\n``` Haskell\nfromNamedCsv :: (Show a, Monad m, FromNamedRecord
  a, MonadError CsvParseError m) => DecodeOptions -> Conduit BS.ByteString m a\nfromNamedCsvStreamError
  :: (Monad m, FromNamedRecord a) => DecodeOptions -> Conduit BS.ByteString m (Either
  CsvParseError a)\n```\n"
basic-deps:
  bytestring: ==0.11.*
  base: <5 && >=4
  text: ==1.2.* || >=2.0 && <2.1
  conduit: ==1.3.*
  array: '>=0.5.2 && <0.6'
  containers: '>=0.5.10 && <0.6'
  cassava: ==0.5.*
  bifunctors: '>=4.2 && <6'
  mtl: '>=2.2.1 && <2.4'
all-versions:
- 0.0.1
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.5.1
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.5.0
- 0.5.1
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
author: Dom De Re
latest: 0.6.4
description-type: markdown
description: |
  # cassava-conduit [![Build Status](https://img.shields.io/travis/domdere/cassava-conduit.svg?style=flat)](https://travis-ci.org/domdere/cassava-conduit) [![Hackage](https://img.shields.io/hackage/v/cassava-conduit.svg?style=flat)](https://hackage.haskell.org/package/cassava-conduit)

  Conduit interface for cassava package

  Streaming to CSV is not 100% complete at this stage, and doesn't support encoding to CSV with a header yet

  ## Example Usage

  ### The examples project

  There is a project containing some examples of the usage, but the gist is here:

  ``` Haskell

  import Data.Csv
  import Data.Conduit
  import Data.Csv.Conduit

  data InputRecord = ...

  instance FromRecord InputRecord where
      ...

  data OutputRecord = ...

  instance ToRecord OutputRecord where
      ...

  decodeOpts :: Word8 -> DecodeOptions

  encodeOpts :: Word8 -> EncodeOptions

  processInput :: InputRecord -> OutputRecord

  -- |
  --  A Conduit pipeline that streams from '../exampledata/sampleinput.psv', decodes it from a pipe seperated format,
  --  processes it with 'processInput' and the encodes it to pipe seperated format and streams it out to '../exampledata/sampleoutput.psv'
  --  The first time it encounters a parse error, it will stop streaming and return the error, dropping any decoded records that came through in that batch also...
  --
  conduitPipeline :: (MonadError CsvParseError m, MonadResource m) => m ()
  conduitPipeline = sourceFile "../exampledata/sampleinput.psv" $$ fromCsv (decodeOpts $ fromIntegral $ ord '|') HasHeader =$= map processInput =$= toCsv (encodeOpts $ fromIntegral $ ord '|') =$= sinkFile "../exampledata/sampleoutput.psv"

  main :: IO ()
  main = do
      res <- runEitherT $ bimapEitherT showError id $ runResourceT conduitPipeline
      either putStrLn return res
  ```

  #### Building the examples project

  ```
  $ cd examples
  $ cabal sandbox init
  $ cabal sandbox add-source ../
  $ cabal install --only-dependencies
  $ cabal build
  ```

  ## Building the project

  ``` Shell
  ./mafia build
  ```

  ## Running Unit Tests

  ``` Shell
  ./mafia test
  ```
license-name: BSD-3-Clause
