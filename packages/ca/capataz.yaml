all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
author: Roman Gonzalez
basic-deps:
  async: '>=2.1.1.1 && <2.3'
  base: '>=4 && <5'
  bytestring: '>=0.10.8'
  pretty-show: '>=1.6.13'
  prettyprinter: '>=1.1'
  rio: '>=0.1.2.0'
  teardown: '>=0.5.0.0'
  time: '>=1.6.0'
  uuid: '>=1.3'
changelog: "# Change log\n\ncapataz uses [Semantic Versioning][1].\nThe change log
  is available [on GitHub][2].\n\n[1]: http://semver.org/spec/v2.0.0.html\n[2]: https://github.com/roman/capataz/releases\n\n##
  v0.2.1.0\n\n* Support GHC-8.6.3.\n* Deprecate `buildLogWorkerSpec` in favour of
  `buildLogWorkerSpec1` which takes\n  `Natural` instead of `Int` for compatibility
  with `stm-2.5`.\n* Deprecate `buildLogWorkerOptions` in favour of `buildLogWorkerOptions1`
  which\n  takes `Natural` instead of `Int` for compatibility with `stm-2.5`.\n\n##
  v0.2.0.0 Bumblebee release\n\n**BREAKING CHANGES**\n\n* Allow the creation of Supervision
  Trees on Monad Transformer stacks \U0001F389\n* Move to latest stable stackage snapshot
  (lts-11.10)\n* Remove `protolude` in favor of `rio` (closes #9)\n* Add convinience
  module `Capataz`\n* Add `Control.Concurrent.Capataz.Util` which provide `ProcessSpec`
  for normal use-cases\n* Add `buildLogWorkerSpec` and `buildLogWorkerOptions` which
  create a dedicated supervised\n  thread that logs messages (sits on top of `rio`
  logger utilities)\n* Add `terminateCapataz` and `terminateCapataz_` , these functions
  replace the\n  re-exported `runTeardown`\n* Add re-export of `TeardownResult` from
  the `teardown` package\n* Update the `capataz-simple-example` project to use `typed-process`
  and `rio`\n* Add export for `WorkerName` and `SupervisorName` aliases\n* Add new
  dependency `prettyprinter`\n* Add new dependency `pretty-show` to prettify exceptions\n*
  Add `Pretty` instance for `CapatazEvent`\n* Add `Display` instance for `CapatazEvent`\n*
  Add `ProcessThreadId` newtype to better render `ThreadId` values\n* Add `buildWorkerOptions1`
  and `workerSpec1` (closes #17)\n* Move to CircleCI\n\n## v0.1.0.1\n\n* Bump bounds
  of `async` dependency\n\n## v0.1.0.0 Who supervises the supervisor?\n\n**BREAKING
  CHANGES**\n\n* Introduction of the `Process` type which is composed of both `Supervisor`
  and\n  `Worker` types\n* Replace `defWorkerSpec` in favor of `workerSpec` and `workerSpecWithDefaults`\n
  \ to build static workers\n* Replace of `defWorkerOptions` in favor of `buildWorkerOptions`
  and\n  `buildWorkerOptionsWithDefaults` to build dynamic workers\n* Replace `terminateWorker`
  in favor of `terminateProcess`\n* Add `supervisorSpec`, `supervisorSpecWithDefaults`
  to build static supervision\n  trees\n* Add `forkSupervisor`, `buildSupervisorOptions`
  and\n  `buildSupervisorOptionsWithDefaults` to build dynamic supervision trees\n*
  Replace usage of default records semantics in favor of Lenses\n* Add `joinCapatazThread`
  to avoid providing direct access to async of root\n  supervision tree\n* Add `getSupervisorProcessId`
  to access the `ProcessId` of a given `Supervisor`\n  record (for dynamic termination)\n*
  Add `getSupervisorAsync` to access the `Async ()` record of a supervisor\n  process
  thread\n* Add `getCapatazTeardown` to access the `Teardown` record of the capataz
  system\n* Move `CapatazEvent` records to new module `Control.Concurrent.Capataz.Event`\n
  \ to avoid requiring `DuplicateRecordFields` extension on API users\n* Remove `WorkerAction`
  alias as it is used for library development\n  documentation\n* Add capataz-repo-watcher
  example to showcase static supervision trees\n* Update capataz-simple-example unix-process
  example\n* `forkCapataz` signature now requires name for root supervisor\n\n## v0.0.0.2\n\n*
  Bump bounds of `tasty` dependency\n\n## v0.0.0.1\n\n* Bump bounds of `tasty` dependency\n*
  Bump bounds of `tasty-hunit` dependency\n\n## v0.0.0.0\n\n* First release of capataz\n*
  Support for supervising simple worker `IO ()` sub-routines\n"
changelog-type: markdown
description: |
  # Capataz

  > Our greatest glory is not in never failing, but in rising every time we fail.â€“ Confucius

  ## Table Of Contents

  * [Installation](#installation)
  * [Documentation](#documentation)
  * [Development](#development)

  ## Installation

  [![Hackage](https://img.shields.io/hackage/v/capataz.svg)](https://img.shields.io/hackage/v/capataz.svg)
  [![Stackage LTS](https://www.stackage.org/package/capataz/badge/lts)](http://stackage.org/lts/package/capataz)
  [![Stackage Nightly](https://www.stackage.org/package/capataz/badge/nightly)](http://stackage.org/nightly/package/capataz)

  Make sure you include the following entry on your [cabal file's
  dependecies](https://www.haskell.org/cabal/users-guide/developing-packages.html#build-information)
  section.

  ```cabal
  library:
    build-depends: capataz
  ```

  Or on your `package.yaml`

  ```
  dependencies:
  - capataz
  ```

  ## Documentation

  The documentation website can be found
  [here](https://romanandreg.gitbooks.io/capataz/content/). Some relevant links:

  * [Purpose](https://romanandreg.gitbooks.io/capataz/content/purpose.html)
  * [FAQ](https://romanandreg.gitbooks.io/capataz/content/FAQ.html)

  ## Development

  ![Build Status](https://circleci.com/gh/roman/Haskell-teardown.svg?style=svg)
  [![Github](https://img.shields.io/github/commits-since/roman/haskell-capataz/v0.2.0.0.svg)](https://img.shields.io/github/commits-since/roman/haskell-capataz/v0.2.0.0.svg)
  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/capataz.svg)](http://packdeps.haskellers.com/feed?needle=capataz)

  Follow the [developer guidelines](https://romanandreg.gitbooks.io/capataz/content/CONTRIBUTING.html)

  ## In future releases

  * Replace Protolude in favor of RIO
  * Documentation of performance analysis
  * Ensure unit tests always finish on all concurrent scenarios (dejafu experiment)
description-type: markdown
hash: 185b2456561f496ecfdcfc338fdbf0da78580f7d0116543c60ef3bf9f3a4415b
homepage: https://github.com/roman/Haskell-capataz#readme
latest: 0.2.1.0
license-name: MIT
maintainer: open-source@roman-gonzalez.info
synopsis: OTP-like supervision trees in Haskell
test-bench-deps:
  async: '>=2.1.1.1 && <2.3'
  base: '>=4 && <5'
  bytestring: '>=0.10.8'
  capataz: '>=0'
  pretty-show: '>=1.9.5'
  prettyprinter: '>=1.1'
  rio: '>=0.1.2.0'
  tasty: '>=1.2.2'
  tasty-hunit: '>=0.10.0.2'
  tasty-smallcheck: '>=0.8.1'
  teardown: '>=0.5.0.0'
  time: '>=1.6.0'
  uuid: '>=1.3'
