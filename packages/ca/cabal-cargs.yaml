all-versions:
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- '0.5'
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
- 0.7.10
- 0.7.11
- 0.7.12
- 0.8.0
- 0.8.1
- 0.9.0
- 0.9.1
- 1.0.0
- 1.1.0
- 1.2.0
- 1.3.0
- 1.4.0
- 1.5.0
author: Daniel Trstenjak
basic-deps:
  Cabal: '>=3.12 && <4.0'
  base: '>=3 && <5'
  bytestring: '>=0.9 && <0.13'
  cabal-cargs: '>=0'
  cabal-lenses: '>=0.13.0 && <1.0'
  cmdargs: '>=0.10.5 && <0.11'
  directory: '>=1.0 && <1.4'
  filepath: '>=1.0 && <1.5'
  lens: '>=4.0.1 && <6.0'
  system-fileio: '>=0.3.12 && <0.4'
  system-filepath: '>=0.4.9 && <0.5'
  text: '>=1.1.0.1 && <2.2'
  transformers: '>=0.3.0.0 && <0.7'
  unordered-containers: '>=0.2.3.3 && <0.3'
changelog: |
  1.5.0
  -----
  * Support ghc 9.8.2

  1.4.0
  -----
  * Support Cabal 3.12
  * Tested with ghc 9.4.7

  1.3.0
  -----
  * Support Cabal 3.0
  * Tested with ghc 8.10.1

  1.2.0
  -----
  * Support Cabal 2.4 and ghc 8.6

  1.1.0
  -----
  * New field 'root_dir' to output the root directory of the cabal project

  1.0.0
  -----
  * Migrate from EitherT to ExceptT

  0.9.1
  -----
  * Support Cabal 2.2
  * Tested with GHC 8.4.2

  0.9.0
  -----
  * Support cabal 2.0

  0.8.2
  -----
  * Update to cabal-lenses-0.5.0

  0.8.1
  -----
  * Fix tests

  0.8.0
  -----
  * Better handling of ghc databases, by ensuring that only the global database
    and the cabal sandbox database are available.

  0.7.10
  ------
  * Raise upper bounds of dependencies

  0.7.9
  -----
  * Raise upper bounds of dependencies

  0.7.8
  -----
  * Move several helper functions to cabal-lenses package

  0.7.7
  -----
  * Support GHC 7.10.1

  0.7.6
  -----
  * Raise upper bounds of lens and Cabal libs

  0.7.4, 0.7.5
  ------------
  * Raise upper bounds of dependencies

  0.7.3
  -----
  * Fixing build failure of tasty 0.8.1.3

  0.7.2
  -----
  * Build/tested with GHC 7.8.3

  0.7.1
  -----
  * Raise upper bounds of dependencies
changelog-type: text
description: "cabal-cargs\n===========\n\n`cabal-cargs` is a command line program
  for extracting compiler relevant\narguments from a cabal file and print them out
  formatted so that they're\ndirectly usable as arguments for `ghc` or `hdevtools`.\n\nThe
  main motivation for writing `cabal-cargs` was to get a mostly just working\ndefault,
  non modified `hdevtools`.\n\nExample: Cabal and Sandbox aware Hdevtools\n==========================================\n\nIf
  you want to call `hdevtools check` for a source file of a cabalized project and\nwould
  like to consider all compiler relevant arguments in the cabal file - like\n`hs-source-dirs`,
  `ghc-options`, `cpp-options` ... - and also the `cabal sandbox`,\nthen you could
  just use `cabal-cargs` the following way:\n\n    $> hdevtools check `cabal-cargs
  --format=hdevtools --sourcefile=Source.hs` Source.hs\n\nThis call of `cabal-cargs`
  will search for a cabal file starting at the directory\nof `Source.hs` upwards the
  directory tree. The cabal file is then searched for\na fitting section for the given
  source file. A section is considered fitting if\nthe source file is contained in
  a directory or sub-directory listed in `hs-source-dirs`. \n\nAt the end the fields
  of the found sections are printed out in the desired format.\n\nNormally you don't
  want to use `cabal-cargs` manually, but use it to initialize the\noptions of hdevtools.
  So in the case of the editor `vim` and the plugin `vim-hdevtools`\nyou could use
  something like:\n\n    function! s:CabalCargs(args)\n       let l:output = system('cabal-cargs
  ' . a:args)\n       if v:shell_error != 0\n          let l:lines = split(l:output,
  '\\n')\n          echohl ErrorMsg\n          echomsg 'args: ' . a:args\n          for
  l:line in l:lines\n             echomsg l:line\n          endfor\n          echohl
  None\n          return ''\n       endif\n       return l:output\n    endfunction\n
  \   \n    function! s:HdevtoolsOptions()\n        return s:CabalCargs('--format=hdevtools
  --sourcefile=' . shellescape(expand('%')))\n    endfunction\n    \n    autocmd Bufenter
  *.hs :call s:InitHaskellVars()\n    \n    function! s:InitHaskellVars()\n       if
  filereadable(expand('%'))\n          let g:hdevtools_options = s:HdevtoolsOptions()\n
  \      endif\n    endfunction\n\nTo see if `cabal-cargs` did the right thing you
  can verify the hdevtools options by\ncalling in the vim command line:\n\n    :let
  g:hdevtools_options\n\nExample: Compiler Arguments from Cabal File\n============================================\n\nInstead
  of searching for the cabal file by a source file the cabal file can be given explicitly:\n\n
  \   $> cabal-cargs --cabalfile=Some.cabal\n\nIf an additional source file is given,
  then the cabal file is searched for a fitting section.\n\nIf no cabal file nor a
  source file is given, then starting at the current directory a\ncabal file is searched
  upwards the directory tree.\n\nSections\n========\n\nIf you don't want any automatic
  finding of sections or only want to consider a\ncertain section, then you could
  do this by using the options:\n* `--library`\n* `--executable=name`\n* `--testsuite=name`\n*
  `--benchmark=name`\n* `--allsections`\n\nYou can use multiple of these options at
  once and even specify multiple\ne.g. executables at once: `--executable=exe1 --executable=exe2
  ...`.\n\nFields\n======\n\nBy default all fields of a section are printed out. You
  can constrain the\noutput by the options: `--only=name` or `--ignore=name`. These
  options can\nbe specified multiple times.\n\nThe allowed names are the field names
  from the cabal file, just the hyphen\nreplaced by an underscore e.g.: `hs-source-dirs`
  -> `hs_source_dirs`.\n\nCurrently supported cabal fields are:\n* `hs_source_dirs`\n*
  `ghc_options`\n* `default_extensions`\n* `default_language`\n* `cpp_options`\n*
  `c_sources`\n* `cc_options`\n* `extra_lib_dirs`\n* `extra_libraries`\n* `ld_options`\n*
  `include_dirs`\n* `includes`\n* `build_depends`\n\nThere are further some special
  fields:\n* `package_db`\n* `root_dir`\n* `autogen_hs_source_dirs`\n* `autogen_include_dirs`\n*
  `autogen_includes`\n* `hdevtools_socket`\n\nIt's not quite true, that all fields
  are printed out if not constrained, that's\nonly the case for the `pure` formatting
  option. For the other formatting options\ncurrently the fields `c_sources` and `ld_options`
  are ignored\nand additionally the `ghc` formatting option ignores the `hdevtools_socket`
  field.\n\nFlags\n=====\n\nThe conditional parts of the cabal file are respected
  by `cabal-cargs` by taking\nthe default values of the flags defined in the cabal
  file into account.\n\nYou can overwrite the default values of the flags with the
  options:\n* `--enable=FLAGNAME`\n* `--disable=FLAGNAME` \n\nIt's also possible to
  overwrite the `OS` and `Arch` values - which by default are\nthe ones the cabal
  library was build on - with the options:\n* `--os=OSNAME`\n* `--arch=ARCHNAME`\n\nFormatting\n==========\n\nBy
  default the fields are formatted for the `ghc` compiler. The available options\nfor
  `--format` are:\n* `ghc`\n* `hdevtools`\n* `pure`\n\n`pure` prints the values like
  they are present in the cabal file and is mostly\nonly useful in conjunction with
  `--only` to get the value of one cabal field.\n\nInstallation\n============\n\nIt's
  recommended to build `cabal-cargs` in a `cabal sandbox` with: `cabal install cabal-cargs`.\n"
description-type: markdown
hash: 368cad6ac06af5f532ec0a7270a9b638ee5bdd68f0101d5d78383b1fd1fad91c
homepage: ''
latest: 1.5.0
license-name: BSD-3-Clause
maintainer: daniel.trstenjak@gmail.com
synopsis: A command line program for extracting compiler arguments from a cabal file.
test-bench-deps:
  base: '>=3 && <5'
  cabal-cargs: '>=0'
  filepath: '>=1.3.0.1 && <1.5'
  tasty: '>=0.9.0.1 && <1.6'
  tasty-golden: '>=2.2.0.2 && <2.4'
