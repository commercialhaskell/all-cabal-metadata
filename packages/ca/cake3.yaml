all-versions:
- 0.1.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.6.0
- 0.6.4
- 0.6.5
author: Sergey Mironov
basic-deps:
  array: '>=0'
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  blaze-builder: '>=0'
  bytestring: '>=0'
  cake3: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  directory: '>=0'
  filepath: '>=0'
  haskell-src-meta: '>=0'
  mime-types: '>=0'
  monadloc: '>=0'
  mtl: '>=2.2.1'
  optparse-applicative: '>=0'
  parsec: '>=0'
  process: '>=0'
  syb: '>=0'
  system-filepath: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  text-format: '>=0'
  transformers: '>=0'
  utf8-string: '>=0'
changelog: |
  Version 0.5.1.0
  ---------------
  Fix urembed tool, change UrWeb.bin API, converts url's from the CSS to Ur/Web format

  Version 0.4
  -----------
  Autobuild 'clean' rule. genFile and genTmpFile functions allowing to embed text
  files into the Makefile.

  Version 0.3
  -----------
  API changes, improve documentation, improve UrWeb extension

  Version 0.2
  -----------
  Redesign (simplify) monadic interface, add support for prebuild/postbuild actions.

  Version 0.1
  -----------
  Initial release
changelog-type: text
description: "Cake3\n=====\n\nCake3 is a EDSL for building Makefiles, written in Haskell.
  With cake3,\ndeveloper can write their build logic in Haskell, obtain clean and
  safe Makefile\nand distribute it among the non-Haskell-aware users. Currenly, GNU
  Make is\nthe only backend supported.\n\nThe Goals\n---------\n\nMake is a build
  tool which was created more than 20 yesrs ago. It has a number\nof versions and
  dialects. Basic Makefiles are really easy to write and\nunderstand.  Unfortunately,
  it is hard to write real-world scale set of rules\ncorrectly due to tricky syntax
  and lots of pitfails. As of today, Make has\nautomatic, declarative and imperative
  variables, builtin rules, pattern-rules,\ndouble-colon rules, C-style ifdefs (which
  doesn't work well with declarative\nvariables) and lots of other strange things.
  Nevertheless, it is still widely\nused as a de-facto standard tool which everyone
  has access to.\n\nThe goals of Cake3 are to help the developer to:\n\n  * Stop overusing
  Make by writing complex logic in make-language\n  * Still have a correct Makefile
  which could be distributed among the end-users\n  * Practice some Haskell\n\nInstallation\n------------\n\nFrom
  Hackage:\n  \n    $ cabal install cake3\n\n\nFrom the Github:\n\n  1. Install [Haskell
  Platform](http://www.haskell.org/platform/)\n\n  2. Install dependencies\n    \n
  \        $ cabal install haskell-src-meta monadloc QuasiText\n\n  3. Build the thirdcake
  from Github\n\n         $ git clone http://github.com/grwlf/cake3\n         $ cd
  cake3\n         $ cabal configure && cabal install\n\nUsage\n-----\n\n  1. Create
  the Cakefile.hs in the root dir of your project\n\n        $ cake3 init\n\n  2.
  Edit Cakefile.hs, fill it with rules or other logic you need \n\n        $ vim Cakefile.hs\n\n
  \ 3. Debug your generator with\n\n        $ cake3 ghci\n        Prelude> :lo Cakefile.hs
  \n\n  3. Build the Makefile with cake3\n\n        $ cake3\n\n  4. Run GNU make as
  usual\n\nHow does it work\n----------------\n\nCake3 allows user to write Cakefile.hs
  in plain Haskell to define rules, targets\nand other things as usual. `cake3` executable
  compiles it into ./Cakegen\napplication which outputs your Makefile (ghc is required
  for that). GNU Make\nknows how to do the rest.\n\n### Example\n\nHere is the example
  of simple Cakefile.hs:\n\n    module Cakefile where\n\n    import Development.Cake3\n
  \   import Cakefile_P\n\n    main = writeMake (file \"Makefile\") $ do\n\n      selfUpdate\n\n
  \     cs <- return $ [file \"main.c\", file \"second.c\"]\n\n      d <- rule $ do\n
  \       shell [cmd|gcc -M $cs -MF @(file \"depend.mk\")|]\n\n      os <- forM cs
  $ \\c -> do\n        rule $ do\n          shell [cmd| gcc -c $(extvar \"CFLAGS\")
  -o @(c.=\"o\") $c |]\n\n      elf <- rule $ do\n        shell [cmd| gcc -o @(file
  \"main.elf\") $os |]\n\n      rule $ do\n        phony \"all\"\n        depend elf\n\n
  \     includeMakefile d\n\n  * Cakefile\\_P is an autogenerated module. It defines
  `file :: String -> File`\n    function plus some others.\n  * Main building blocks
  - `rule` functions - build Makefile rules one-to-one.\n    The prerequisites are
  computed based on it's actions.\n  * All actions live in Action monad (`A` Monad).
  `shell` is the most important\n    operation of this monad.\n  * Quasy-quotation
  is used to simplify writing of the shell code. `[cmd|..|]`\n    takes a string as
  an argument. The following antiquotations are supported:\n    *  $name antiquotes
  Hasell expressions `name` of type File, Variable, few\n       others. The name will
  be placed to the set of prerequisites of the rule.\n    *  @name antiquotes Hasell
  expressions `name` of type File. The name will be\n       placed to the set of rule's
  targets.\n    *  complex Haskell expressions inside antiquotations are supported
  with\n       $(foo bar) and @(bar baz) syntax.\n    *  $$ and @@ expands to $ and
  @.\n  * Rules appears in the Makefile in the reversed order. Normally, you want\n
  \   'all' rule to be defined at the bottom of Cakefile.hs.\n  * Starting from 0.4,
  cake3 outputs rule named 'clean' automatically. This rule\n    contains recipe which
  deletes all intermediate files with 'rm' command.\n  * `selfUpdate` call includes
  the self-updating dependencies. That means, that\n    Makefile will depend on Cakefile.hs
  and thus will require ghc to present in\n    the system. Removing `selfUpdate` call
  will make the Makefile fully\n    Haskell-independent.\n\n\nFeatures and limitations\n------------------------\n\nThirdcake
  follows Autoconf's path in a sence that it builds the program may do\nsome checks
  and tests and generates the Makefile. In the same time, the idea of\nthis EDSL is
  to move as much logic as possible in the final Makefile, to drop\nthe cake3 dependency
  at the build time.\n\nOf cause, it is possible up to some degree. For example, Cake3
  doe not provide a\nway to scan the project tree with Make's wildcards. But it is
  possible and may\nbe implemented in future.\n\nStill, some common patterns are supported
  so I hope that users would call\nresulting Makefiles safe and robust enough for,
  say, package maintainers.\n\n### Features\n\n  * *Cake3 generates the 'clean' rule
  automatically.*\n\n    But if you define your own 'clean', cake3 will take it as
  is.\n\n  * *Cake3 takes care of spaces inside the filenames.*\n  \n    Everyone
  knows that Makefiles don't like spaces in filenames. Cake3\n    carefully inserts
  '\\ ' to make make happy.\n\n  * *Cake3 rebuilds a rule's target when variable changes.*\n
  \ \n    Consider following antipattern:\n\n        # You often write rules like
  this, don't you?\n        program : program.c\n             gcc $(FLAGS) -o $@ $^\n\n
  \   Unfortunately, changes in FLAGS don't lead to rebuilding of the program.\n    Hardly-trackable
  bugs may appear if one part of a project was built with one\n    set of optimisation
  flags and another part was build with another set by\n    mistake.\n\n    Thirdcake
  implements the makevar checksum\n    [pattern](http://stackoverflow.com/a/17830736/1133157)
  from StackOverflow to\n    detect changes in variables and rebuild targets when
  nessesary.\n\n        rule $ do\n          shell [cmd|gcc $(extvar \"FLAGS\") -o
  @program $program_c |]\n\n    will rebuild `program` every time the FLAGS change\n
  \n  * *Rules may have more than one target.*\n    \n    It is not that simple to
  write a rule which has more than one target in\n    Makefile. Indeed,\n        \n
  \       out1 out2 : in1 in2\n            foo in1 in2 -o out1 -o out2\n\n    is not
  corret. Read this [Automake\n    article](http://www.gnu.org/software/automake/manual/html_node/Multiple-Outputs.html#Multiple-Outputs)\n
  \   if you are surprised. Cake3 implements [.INTERMEDIATE\n    pattern](http://stackoverflow.com/a/10609434/1133157)
  to deal with this\n    problem so `rule` like this\n\n        rule $ do\n          shell
  [cmd|foo $in1 $in2 -o @out1 -o @out2 |]\n\n    will always notice inputs changes
  and rebuild both outputs\n\n  * *Cake3 supports global prebuild\\postbuild actions*\n\n
  \   Common human-made Makefile with prebuild commands would support them for one\n
  \   rule, typically, \"all\". Other targets often stay uncovered. Cake3 makes sure\n
  \   that actions are executed for any target you call.\n\n  * *Cake3 lets user organize
  build hierarchy.*\n  \n    Say, we have a project A with subproject L. L has it's
  own Makefile and we\n    want to re-use it from our global A/Makefile. Make provides
  only two ways of\n    doing that. We could either include L/Makefile or call $(MAKE)
  -C L. First\n    solution is a pain because merging two Makefiles together is generally
  a\n    hard work. Second approach is OK, but only if we don't need to pass\n    additional
  paramters or depend on a specific rule from L.\n\n    Thirdcake's approach in this
  case is a compromise: since it employs\n    Haskell's module system, it is possible
  to write:\n\n        -- Project/lib/CakeLib.hs\n        import CakeLib_P.hs\n        librule
  = do\n          rule $ do\n            shell [cmd|build a lib|]\n\n        -- Project/Cakefile.hs\n
  \       import Cakefile_P.hs\n        import CakeLib.hs \n        -- ^ note the
  absence of lib folder here. cake3 will copy all Cake*hs to\n        --   the temp
  dir, then build them there.\n\n        all = do\n          lib <- librule\n          rule
  $ do\n            shell [cmd|build an app with $lib |]\n\n    A/Cakefile.hs and
  do whatever you want to. Resulting makefiles will always\n    be monolitic.\n\n
  \ * *Cake3 may generate different versions of Makefile at once*\n\n    We often
  want to generate developer's and end-user's makefiles. End-user\n    version may
  want treat several rules as pre-executed. Cake3 easily allows us\n    to do that
  by using 'slicing' utility. See ./Examples/GCC_SED/Cakefile.hs\n    for details.\n\n\n###
  Limitations\n\n#### Make syntax\n\nAs a summary - only a samll subset of Make syntax
  is supported.  For complex\nalgorithms Haskell looks more suitable so implement
  everything you need inside\nthe Cakefile.hs. In particular:\n\n  * Cake3 offers
  no way of detecting directory content chages at the moment. For\n    example, user
  has to rerun the ./Cakegen if they add/remove a source file.\n  * Cake3 doesn't
  check the contents of Makefile variables. It is user's\n    responsibility to keep
  them safe.\n  * DSL doesn't allow to place Make variables anywhere except the recipe.\n\n\n####
  General\n\n  * Resulting Makefile is actually a GNUMakefile. GNU extensions (shell
  function\n    and others) are needed to make various tricks to work. Also, posix\n
  \   environment with coreututils package is required. So, Linux, Probably Mac,\n
  \   Probably Windows+Cygwin are the platforms which run cake3.\n  * All Cakefiles
  across the project tree should have unique names in order to\n    be copied. Duplicates
  are found, the first one is used\n\nRandom implementation details\n-----------------------------\n\n
  \ 1. cake3 script copies all the Cake\\*hs files it found in the project tree to\n
  \    a single temporary directory before compiling the ./Cakegen application.\n
  \    That is why all the cakefiles in project should have different names.\n     Another
  consequence - cakefiles as Haskell modules may be imported by\n     filename regardles
  of their actual position in the project tree.\n\n  2. Cake3 creates ./Cake\\*\\_P.hs
  files for every Cake\\*hs. The \\_P files\n     contain paths information. In particular,
  they define `file` function for\n     the current directiory. `selfUpdate` function
  is also defined there.\n\n  3. All filepaths in the final Makefile are relative.\n\n
  \ 4. Cake3 uses it's own representation of files (File). Many filepath functions\n
  \    (takeDirectory, takeBaseName, dropExtensions, </>, etc) are defined for\n     File
  as members of FileLike typeclass. See System.FilePath.Wrapper for the\n     details.\n\n"
description-type: markdown
hash: eb5ff918a71b31fef70316bac009564f2fd8235b8eb9f38e2e758406c03eb7a2
homepage: https://github.com/grwlf/cake3
latest: 0.6.5
license-name: BSD-3-Clause
maintainer: grrwlf@gmail.com
synopsis: Third cake the Makefile EDSL
test-bench-deps: {}
