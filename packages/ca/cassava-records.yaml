all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Guru Devanla
basic-deps:
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  cassava: '>=0'
  foldl: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for cassava-records

  ## 0.1.0.2

  - Fix README.md

  ## 0.1.0.3

  - Remove Main.hs from uploaded distribution. Causes doc generation to fail

  ## 0.1.0.4

  - Add test/data folder for tests to pass. Needed to package library in Stackage
changelog-type: markdown
description: "# cassava-records\n\nA library extension for ```cassava``` (Haskell
  CSV parser library) that\nautomatically creates a Record data type given an columnar
  input file. eg\na CSV file.\n\n# What is this tool for?\n\nSay you are working on
  a project that involves processing a number of\ncomma separated or tab serparated
  files. Assuming, you are using\ncassava for loading the input files, here is a typical
  workflow you\nwould follow\n\na. Inspect the file that contains ```Salaries``` of
  ```Employees```.\n\nb. Create a ```Record``` data type called ```Salaries``` to
  reflect \nthe columns and types found in the file\n\nc. Create required instances
  of the ```Salaries``` data type that may be \nrequired to load the files with ```cassava```.\n\nNow,
  imagine this file you are inspecting to contains tens or hundreds\nof columns. Now,
  as a good Haskeller you will want to automate steps\n(a) and (b) to the extend possible.
  That is precisely, what this\nlibrary does.\n\n```cassava-records``` performs the
  following tasks. Given, a input file\n(command or tab-seperated for example), it
  reads the whole file,\ninfers some basic data types for each column and automatically
  creates\na ```Record``` of inferred data types using ```Template Haskell```.\n\n\n#
  Quick Start\n\n## Example 1 :\n\nUsing data/salaries_simple.csv\n\n```\nemp_no,name,salary,status,years\n1,John
  Doe,100.0,True,1\n2,Jill Doe, 200.10,False,2\n3,John Doe Sr,101.0,T,3\n4,Jill Doe
  Sr, 10101.10,f,4.2\n5,John Doe Jr,1010101.0,true,5.1\n6,Jill Doe Jr, 10101.10,false,6\n\n```\n\n```
  haskell\n\n{-#LANGUAGE TemplateHaskell#-}\n{-#LANGUAGE DeriveGeneric #-}\n\nimport
  Data.Cassava.Records\nimport Data.Csv\nimport qualified Data.ByteString.Lazy as
  BL\nimport Data.Vector as V\nimport Data.Text as DT\n\n$(makeCsvRecord \"Salaries\"
  \"data/salaries_simple.csv\" \"_\" commaOptions)\n\n```\n\nThe ```makeCsvRecord```
  function take 4 arguments,\n\n1. ```\"Salaries\"``` :  A ```String``` that will
  be used as name for\n   the ```Record```.\n2. ```data/salaries_simple.csv```: path
  to the input file\n3. ```\"_\"```: string to prefix each field. Useful, if we need
  to build lens\nfor this record\n4. ```commaOptions```: ```defaultDecodeOptions```
  defined\n   in ```cassava``` library\n\nIf you load this code in ```GHCi```, we
  will see\n\n``` haskell\n1 >:info Salaries\ndata Salaries\n  = Salaries {\n    _emp_no::
  Integer,\n    _name :: Text,\n    _salary :: Double,\n    _status :: Bool,\n    _years::
  Double}\n\n```\nNote that all column names are in lower case and \"_\" has been
  prefixed\nto the column names.\n\nTo be consistent, ```cassava-record``` converts
  all column headers to\nlower-case before created corresponding field names for each
  column\nheader. Therefore, if column headers were all upper-case, we need to\nprovide
  a field modifier while creating ```ToNamedRecord```\nand ```FromNamedRecord``` instances
  for ```cassava```.\n\nNote, that if the column headers are mixed case, it become\ntricky.
  Current version of the library does not work very well with\nmixed case column headers.\n\nThere
  is a convenience method called ```makeInstances``` that can create\nthe instances
  required for ```cassava```.The instances created use the\ndefault ```fieldModifieroptions```
  settings shown below.\n\n``` haskell\n\nfieldModifierOptions :: Options\nfieldModifierOptions
  = defaultOptions { fieldLabelModifier = rmUnderscore }\n  where\n    rmUnderscore
  ('_':str) = DT.unpack . DT.toUpper . DT.pack $ str\n    rmUnderscore str = str\n\n--
  the ToNamedRecord and FromNamedRecord are needed by Cassava since\n-- we prefix\ninstance
  ToNamedRecord Salaries where\n  toNamedRecord = genericToNamedRecord fieldModifierOptions\n\ninstance
  FromNamedRecord Salaries where\n  parseNamedRecord = genericParseNamedRecord fieldModifierOptions\n\nmain
  :: IO ()\nmain = do\n  v <- loadData \"data/salaries_simple.csv\":: IO (V.Vector
  Salaries)\n  putStrLn . show $ v\n```\n\nIn ```GHCi``` we see (formatted for clarity)\n\n```
  haskell\n2 >loadData \"data/salaries.csv\"\n[Salaries {_emp_no = 1, _name = \"John
  Doe\", _salary = 100.0, _status = False, _years = 1.0},\n Salaries {_emp_no = 2,
  _name = \"Jill Doe\", _salary = 200.1, _status = False, _years = 2.0},\n Salaries
  {_emp_no = 3, _name = \"John Doe Sr\", _salary = 101.0, _status = True, _years =
  3.0},\n Salaries {_emp_no = 4, _name = \"Jill Doe Sr\", _salary = 10101.1, _status
  = False, _years = 4.2},\n Salaries {_emp_no = 5, _name = \"John Doe Jr\", _salary
  = 1010101.0, _status = False, _years = 5.1},\n Salaries {_emp_no = 6, _name = \"Jill
  Doe Jr\", _salary = 10101.1, _status = False, _years = 6.0}]\n```\n\nNote, the type
  inference in the above example is as follows:\n\n1. If a column has values from
  the set {```true```, ```t```, ```false```, ```f```}\n   (ignoring case) then the
  inferred type is ```Bool```.\n2. If a column has values that are all numeric, then
  an ```Integer```\n   type is attempted, or else a ```Double``` is infered. For example\n
  \  for ```emp_no``` the infered type is a ```Integer``` whereas for ```years```
  the type is ```Double```.\n3. For all other cases, a ```Text``` type is inferred.\n\n#
  Example 2 (Missing Values)\n\nThe library also supports type inference when values
  are missing. For example in, data/salaries_mixed_input.csv\n\n```\nemp_no,name,salary,status,years\n1,John
  Doe,100.0,True,1\n2,Jill Doe, 200.10,False,2\n3,John Doe Sr,101.0,T,\n4,Jill Doe
  Sr,10101.10,,4.2\n5,John Doe Jr,,true,5.1\n6,, 10101.10,false,6\n```\n\nthe ```status```
  for Jill Doe Jr is missing and the ```salary``` for\nJohn Doe Sr is missing. In
  this case, the type as wrapped in a ```Maybe``` type.\n\nIn that case, the record
  instance we get will be as follows:\n\n``` haskell\n3 >:info Salaries\ndata Salaries\n
  \ = Salaries {\n    _emp_no:: Integer,\n    _name :: Maybe Text,\n    _salary ::
  Maybe Double,\n    _status :: Maybe Bool,\n    _years:: Maybe Double}\n```\n\nLoading
  this data, would produce the following output\n\n``` haskell\n{-#LANGUAGE TemplateHaskell#-}\n{-#LANGUAGE
  DeriveGeneric #-}\n\nimport Data.Cassava.Records\nimport Data.Csv\nimport qualified
  Data.ByteString.Lazy as BL\nimport Data.Vector as V\nimport Data.Text as DT\n\n$(makeCsvRecord
  \"SalariesMixed\" \"data/salaries_mixed_input.csv\" \"_\" commaOptions)\n$(makeInstance
  \"SalariesMixed\")\n-- ^ note that we can use this function instead of manually
  defining\n-- all instances required by Cassava\n\nmain :: IO ()\nmain = do\n  v
  <- loadData \"data/salaries_mixed_input.csv\":: IO (V.Vector SalariesMixed)\n  putStrLn
  . show $ v\n\n```\n\nThe output will be as follows:\n\n```\n[SalariesMixed {_emp_no
  = 1, _name = Just \"John Doe\", _salary = Just 100.0, _status = Just False, _years
  = Just 1.0},\n SalariesMixed {_emp_no = 2, _name = Just \"Jill Doe\", _salary =
  Just 200.1, _status = Just False, _years = Just 2.0},\n SalariesMixed {_emp_no =
  3, _name = Just \"John Doe Sr\", _salary = Just 101.0, _status = Just True, _years
  = Nothing},\n SalariesMixed {_emp_no = 4, _name = Just \"Jill Doe Sr\", _salary
  = Just 10101.1, _status = Nothing, _years = Just 4.2},\n SalariesMixed {_emp_no
  = 5, _name = Just \"John Doe Jr\", _salary = Nothing, _status = Just False, _years
  = Just 5.1},\n SalariesMixed {_emp_no = 6, _name = Nothing, _salary = Just 10101.1,
  _status = Just False, _years = Just 6.0}]\n```\n\nHere is a full working code that
  uses both the examples:\n\n``` haskell\n{-#LANGUAGE TemplateHaskell#-}\n{-#LANGUAGE
  DeriveGeneric #-}\n{-#LANGUAGE ScopedTypeVariables #-}\n{-#LANGUAGE DuplicateRecordFields
  #-}\n{-# LANGUAGE DeriveDataTypeable #-}\n\nmodule Main where\n\nimport Data.Cassava.Records\nimport
  Data.Csv\nimport qualified Data.ByteString.Lazy as BL\nimport Data.Vector as V\nimport
  Data.Text as DT\nimport qualified Text.PrettyPrint.Tabulate as T\nimport Language.Haskell.TH\n--
  import Control.Lens hiding (element)\n\n$(makeCsvRecord \"Salaries\" \"data/salaries_simple.csv\"
  \"_\" commaOptions)\n-- $(makeInstance \"Salaries\")\n\n$(makeCsvRecord \"SalariesMixed\"
  \"data/salaries_mixed_input.csv\" \"_\" commaOptions)\n$(makeInstance \"SalariesMixed\")\n\n--
  the following instance is not required, if $(makeInstance Salaries) statement\n--
  is spliced in (currently commented in the example)\nmyOptions :: Options\nmyOptions
  = defaultOptions { fieldLabelModifier = rmUnderscore }\n  where\n    rmUnderscore
  ('_':str) = DT.unpack . DT.toUpper . DT.pack $ str\n    rmUnderscore str = str\n\ninstance
  ToNamedRecord Salaries where\n  toNamedRecord = genericToNamedRecord myOptions\n\ninstance
  FromNamedRecord Salaries where\n  parseNamedRecord = genericParseNamedRecord myOptions\n\nmain
  :: IO ()\nmain = do\n  v <- loadData \"data/salaries_simple.csv\" :: IO (V.Vector
  Salaries)\n  v1 <- loadData \"data/salaries_mixed_input.csv\" :: IO (V.Vector SalariesMixed)\n
  \ putStrLn . show $ v\n  putStrLn . show $ v1\n\n```\n\n\n# Caveats (Or list of
  future enhancements)\n\n1. The columns names along with prefix(\"_\") should be
  a valid Haskell field\n   names. For example, column names cannot have spaces or
  other\n   characters not supported for use as ```field``` names of ```Record```
  data type.\n2. The library loads the whole file during compilation to infer\n   types.
  Given the size of the file, this will increase the compile\n   time. Alternative
  workflows, like stripping the file or dumping the\n   created slice into a file
  is recommended. In the future, the\n   makeCsvRecord function can take a parameter
  to specify the max\n   number of rows that can be used to infer the types.\n3. The
  inferred types are limited. Text, Bool, Integer, Double and the MayBe\n   variants
  of those. Future, support may include DateTime.\n4. Mixed case column headers not
  automatically supported. A more\n   complex form of ```fieldOptionModifiers``` needs
  to be provided.\n5. Currently there is no option to provide custom types.\n"
description-type: markdown
hash: 7fbce9a2310c432d0d0a4c451293239c1d4fe18a81b8c94d6fe8679ef82d9bf6
homepage: https://github.com/gdevanla/cassava-records#readme
latest: 0.1.0.4
license-name: BSD-3-Clause
maintainer: grdvnl@gmail.com
synopsis: Auto-generation of records data type.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  cassava: '>=0'
  cassava-records: '>=0'
  containers: '>=0'
  foldl: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
