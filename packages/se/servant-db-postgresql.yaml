all-versions:
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
author: Anton Gushcha
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.5 && <0.6'
  monad-logger: '>=0.3 && <0.4'
  postgresql-query: '>=3.0 && <3.2'
  postgresql-simple: '>=0.5 && <0.6'
  servant: '>=0.9 && <0.10'
  servant-db: '>=0.2 && <0.3'
  servant-db-postgresql: '>=0'
  text: '>=1.2 && <1.3'
  time: '>=0'
  transformers-base: '>=0.4 && <0.5'
changelog: |
  0.2.2.0
  =======

  * Push version for `postgresql-query`.

  0.2.1.0
  =======

  * Make instance `FromRow => FromRow (Maybe a)` overlappable.

  0.2.0.1
  =======

  * Fix haddocks for code blocks.

  0.2.0.0
  =======

  * Split `Arg` to `ArgNamed` and `ArgPos`.

  0.1.0.0
  =======

  * Initial release.
changelog-type: markdown
description: "servant-db-postgresql\n=====================\n\nAutomatic derive of
  [typed DB API](https://github.com/NCrashed/servant-db) based \non [postgresql-query](http://hackage.haskell.org/package/postgresql-query)
  package.\n\nHow to use:\n\n* Define your instances of `MonadLogger` and `HasPostgres`
  for your app\nmonad:\n``` haskell\nnewtype PostgresM a = PostgresM { runPostgresM
  :: PgMonadT (LoggingT IO) a }\n  deriving (Functor, HasPostgres, MonadLogger, Monad,
  Applicative, MonadBase IO)\n```\n\n* Define type level API:\n``` haskell\ntype UserId
  = Int\n\ndata RegisterUser = RegisterUser {\n  userRegName     :: String\n, userRegPassword
  :: String\n, userRegRegTime  :: Day\n} deriving (Eq)\n\nderiveToRow ''RegisterUser\n\ndata
  User = User {\n  userId       :: UserId\n, userName     :: String\n, userPassword
  :: String\n, userRegTime  :: Day\n} deriving (Eq)\n\nderiveFromRow ''User\nderiveToRow
  ''User\n\ntype UserAPI =\n       ArgNamed \"u\" (Composite RegisterUser)\n    :>
  Procedure \"postUser\" (Only Int)\n  :<|> ArgPos Int\n    :> Procedure \"getUser\"
  (Maybe User)\n  :<|> ArgPos Int\n    :> Procedure \"deleteUser\" ()\n  :<|> Procedure
  \"getUsers\" [User]\n```\n\n* Derive client functions from the API:\n\n``` haskell\npostUser
  :: Composite RegisterUser -> PostgresM (Only Int)\ngetUser :: Int -> PostgresM (Maybe
  User)\ndeleteUser :: Int -> PostgresM ()\ngetUsers :: PostgresM [User]\n(      postUser\n
  \ :<|> getUser\n  :<|> deleteUser\n  :<|> getUsers) = deriveDB (Proxy :: Proxy UserAPI)
  (Proxy :: Proxy PostgresM)\n```\n\n* Use them. The full example you can view at
  [example01/Main.hs](https://github.com/NCrashed/servant-db-postgresql/tree/master/example01/Main.hs)
  module. \nAnd to compile it run the:\n```\nstack build --flag servant-db-postgresql:examples\n```\n\nFeatures\n========\n\n*
  Call functions in schema with `:>` operator:\n``` haskell\ntype API = \"test\" :>
  ArgPos Int :> Procedure \"square\" (Only Int)\n```\nThat will call function `test.square(int)`.
  \n\n* Composite types are defined with `Composite a` wrapper:\n``` haskell\ntype
  API = ArgNamed \"u\" (Composite UserCreate) :> Procedure \"postUser\" (Only Int)\n```\n\n*
  Support for arrays:\n``` haskell\ntype API = ArgPos (PGArray Int) :> Procedure \"mleast\"
  (Maybe (Only Int))\n```\n\n* Support for variadic arguments:\n``` haskell\ntype
  API = ArgPos (Variadic Int) :> Procedure \"mleast\" (Maybe (Only Int))\n```\n\n*
  Support for default arguments with `newypte Default a = Default (Maybe a)`:\n```
  haskell\ntype API = ArgPos (Default Int) :> Procedure \"foo\" (Only Int)\n```\n"
description-type: markdown
hash: 9764ea5cfe78a4dc72c666882e4f4c73c9fcd0a08a79bc6495be60ac917a4ef9
homepage: https://github.com/NCrashed/servant-db-postgresql
latest: 0.2.2.0
license-name: BSD-3-Clause
maintainer: ncrashed@gmail.com
synopsis: Derive a postgres client to database API specified by servant-db
test-bench-deps:
  HUnit: '>=1.3 && <1.4'
  QuickCheck: '>=2.8 && <3.0'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.11'
  derive: '>=2.5 && <2.6'
  hspec: '>=2.2 && <2.4'
  monad-logger: '>=0.3 && <0.4'
  optparse-applicative: '>=0.12 && <0.13'
  postgresql-query: '>=3.0 && <3.1'
  quickcheck-instances: '>=0.3 && <0.4'
  servant-db: '>=0'
  servant-db-postgresql: '>=0'
  text: '>=1.2 && <1.3'
  time: '>=1.6 && <1.7'
  transformers-base: '>=0.4 && <0.5'
