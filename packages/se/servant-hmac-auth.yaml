homepage: https://github.com/holmusk/servant-hmac-auth
changelog-type: markdown
hash: 5e0560613642d1620402dda943909469f0626b4a386ce9d9982268a46efb993d
test-bench-deps:
  base: '>=4.11.1.0 && <4.15'
  servant-hmac-auth: -any
maintainer: tech@holmusk.com
synopsis: Servant authentication with HMAC
changelog: |
  # Changelog

  `servant-hmac-auth` uses [PVP Versioning][1].
  The change log is available [on GitHub][2].

  ## Unreleased: 0.1.0

  * Introduce whitelisted headers.
  * **Breaking change:** `HmacSettings` now containt post-sign hook for request.
    `hmacClientSign` function accepts `HmacSettings`.

    _Migration guide:_ use `defaultHmacSettings` for `runHmacClient` function.
  * Add `hmacAuthHandlerMap` function that allows to perform monadic actions on
    every incoming request for HMAC server.
  * [#28](https://github.com/Holmusk/servant-hmac-auth/issues/28):
    Added type alias `HmacAuthHandler` for `AuthHandler Wai.Request ()`
  * [#37](https://github.com/Holmusk/servant-hmac-auth/issues/37):
    Upgrade `servant-*` libraries to `0.16-*`
  * Use `Cabal-2.4`

  ## 0.0.0 â€” Sep 6, 2018

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/holmusk/servant-hmac-auth/releases
basic-deps:
  http-client: '>=0.6.4 && <0.8'
  bytestring: ^>=0.10
  wai: ^>=3.2.2.1
  case-insensitive: ^>=1.2
  base: '>=4.11.1.0 && <4.15'
  base64-bytestring: ^>=1.0
  servant-client: ^>=0.18
  servant-client-core: ^>=0.18
  servant-server: ^>=0.18
  servant: ^>=0.18
  memory: '>=0.15 && <0.17'
  containers: '>=0.5.7 && <0.7'
  binary: ^>=0.8
  cryptonite: '>=0.25 && <0.30'
  mtl: ^>=2.2.2
  transformers: ^>=0.5
  http-types: ^>=0.12
all-versions:
- 0.0.0
- 0.1.1
author: Holmusk
latest: 0.1.1
description-type: markdown
description: |
  # servant-hmac-auth

  [![Hackage](https://img.shields.io/hackage/v/servant-hmac-auth.svg)](https://hackage.haskell.org/package/servant-hmac-auth)
  [![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)
  [![Stackage Lts](http://stackage.org/package/servant-hmac-auth/badge/lts)](http://stackage.org/lts/package/servant-hmac-auth)
  [![Stackage Nightly](http://stackage.org/package/servant-hmac-auth/badge/nightly)](http://stackage.org/nightly/package/servant-hmac-auth)

  Servant authentication with HMAC

  ## Example

  In this section, we will introduce the client-server example.
  To run it locally you can:

  ```shell
  $ cabal new-build
  $ cabal new-exec readme
  ```

  So,it will run this on your machine.

  ### Setting up

  Since this tutorial is written using Literate Haskell, first, let's write all necessary pragmas and imports.

  ```haskell
  {-# LANGUAGE DataKinds                  #-}
  {-# LANGUAGE DeriveGeneric              #-}
  {-# LANGUAGE GeneralizedNewtypeDeriving #-}
  {-# LANGUAGE OverloadedStrings          #-}
  {-# LANGUAGE TypeApplications           #-}
  {-# LANGUAGE TypeOperators              #-}

  import Control.Concurrent (forkIO, threadDelay)
  import Data.Aeson (FromJSON, ToJSON)
  import Data.Proxy (Proxy (..))
  import GHC.Generics (Generic)
  import Network.HTTP.Client (defaultManagerSettings, newManager)
  import Network.Wai.Handler.Warp (run)
  import Servant.API ((:>), Get, JSON)
  import Servant.Client (BaseUrl (..), Scheme (..), ClientError, mkClientEnv)
  import Servant.Server (Application, Server, serveWithContext)

  import Servant.Auth.Hmac (HmacAuth, HmacClientM, SecretKey (..), defaultHmacSettings,
                            hmacAuthServerContext, hmacClient, runHmacClient, signSHA256)
  ```

  ### Server

  Let's define our `TheAnswer` data type with the necessary instances for it.

  ```haskell
  newtype TheAnswer = TheAnswer Int
      deriving (Show, Generic, FromJSON, ToJSON)

  getTheAnswer :: TheAnswer
  getTheAnswer = TheAnswer 42
  ```

  Now, let's introduce a very simple protected endpoint. The value of `TheAnswer`
  data type will be the value that our API endpoint returns. It our case we want
  it to return the number `42` for all signed requests.

  ```haskell
  type TheAnswerToEverythingUnprotectedAPI = "answer" :> Get '[JSON] TheAnswer
  type TheAnswerToEverythingAPI = HmacAuth :> TheAnswerToEverythingUnprotectedAPI
  ```

  As you can see this endpoint is protected by `HmacAuth`.

  And now our server:

  ```haskell
  server42 :: Server TheAnswerToEverythingAPI
  server42 = \_ -> pure getTheAnswer
  ```

  Now we can turn `server` into an actual webserver:

  ```haskell
  topSecret :: SecretKey
  topSecret = SecretKey "top-secret"

  app42 :: Application
  app42 = serveWithContext
      (Proxy @TheAnswerToEverythingAPI)
      (hmacAuthServerContext signSHA256 topSecret)
      server42
  ```

  ### Client

  Now let's implement client that queries our server and signs every request
  automatically.

  ```haskell
  client42 :: HmacClientM TheAnswer
  client42 = hmacClient @TheAnswerToEverythingUnprotectedAPI
  ```

  Now we need to write function that runs our client:

  ```haskell
  runClient :: SecretKey -> HmacClientM a -> IO (Either ClientError a)
  runClient sk client = do
      manager <- newManager defaultManagerSettings
      let env = mkClientEnv manager $ BaseUrl Http "localhost" 8080 ""
      runHmacClient (defaultHmacSettings sk) env client
  ```

  ### Main

  And we're able to run our server in separate thread and perform two quiries:

  * Properly signed
  * Signed with different key

  ```haskell
  main :: IO ()
  main = do
      _ <- forkIO $ run 8080 app42

      print =<< runClient topSecret client42
      print =<< runClient (SecretKey "wrong!") client42

      threadDelay $ 10 ^ (6 :: Int)
  ```
license-name: MIT
