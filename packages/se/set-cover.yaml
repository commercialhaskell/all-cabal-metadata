all-versions:
- '0.0'
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.5.1
- 0.0.6
- 0.0.7
- 0.0.8
- 0.0.9
- '0.1'
- 0.1.1
- 0.1.1.1
author: Henning Thielemann, Helmut Podhaisky
basic-deps:
  array: '>=0.4 && <0.6'
  base: '>=4 && <5'
  containers: '>=0.4 && <0.9'
  enummapset: '>=0.1 && <0.8'
  non-empty: '>=0.2 && <0.4'
  prelude-compat: '>=0 && <1'
  psqueues: '>=0.2 && <0.3'
  semigroups: '>=0.1 && <1.0'
  set-cover: '>=0'
  transformers: '>=0.2 && <0.7'
  utility-ht: '>=0.0.12 && <0.1'
changelog: |
  # Change log for the `set-cover` package

  ## 0.1

   * `SetCover.Exact.decisionTree`, `SetCover.Exact.Priority.decisionTree`:
     Allow the programmer to generate human-friendly solutions.

   * `SetCover.Cuboid`: `dx`, `dy`, `dz` -> `rotX`, `rotY`, `rotZ`

   * `SetCover.Bit`: method `complement` replaced by `difference`.
     This way, we do not need the cumbersome `SetCover.IntSet` module anymore.

   * `SetCover.BitMap` made private.

   * `SetCover.BitPriorityQueue` made public.

   * `SetCover.Exact.State.usedSubsets`: Only store labels, not assignments.
     This is consistent with `SetCover.Exact.Priority.State`.

   * `SetCover.Exact.minimize`: allow an empty list of available subsets
     `SetCover.Exact.step`, `SetCover.Exact.Priority.step`:
     They do not need to test for an empty `availableSubset` anymore.

   * `SetCover.Exact.step`: Require non-empty set of free elements.
     This is consistent with `SetCover.Exact.Priority.step`.
     Until now, `step` returned an empty list if the were no free elements.
     This is not very helpful
     since it will throw away already completed solutions.
     The test is also redundant when `step` is called from `search`.

  ## 0.0.8

   * `SetCover.Exact.Priority` implements the Algorithm X
     using a priority queue that registers the sets
     each element is contained in.
     This allows for drastic speedup of the `Nonogram` example.

  ## 0.0.7

   * `ESC.bitVectorFromSetAssigns` allows to turn sets
     into bit vectors without manual bit position gymnastics.

   * Use it in `Sudoku` and `Nonogram` examples.

  ## 0.0.6

   * Add `SetCover.Exact.Set` instances for `Map`, `Integer`, `IntSet`.

  ## 0.0.5.1

   * `example/Nonogram`: explore different encodings of the problem
changelog-type: markdown
description: |-
  Solver for exact set cover problems.
  Included examples:
  Sudoku, Nonogram, 8 Queens, Domino tiling, Mastermind, Alphametics,
  Soma Cube, Tetris Cube, Cube of L's,
  Logika's Baumeister puzzle, Lonpos pyramid, Conway's puzzle.
  The generic algorithm allows to choose between
  slow but flexible @Set@ from @containers@ package
  and fast but cumbersome bitvectors.

  For getting familiar with the package
  I propose to study the Queen8 example along with "Math.SetCover.Exact".

  The Sudoku and Nonogram examples also demonstrate
  how to interpret the set-cover solution in a human-friendly way.

  Build examples with @cabal install -fbuildExamples@.

  The package needs only Haskell 98.
  There is also an experimental implementation using LLVM and @knead@.
  Do not rely on that interface in released packages.
description-type: haddock
hash: 8309cef696b19f487801b3d2265511a15382d6fc4b5813de819d7e344993bb92
homepage: https://hub.darcs.net/thielema/set-cover/
latest: 0.1.1.1
license-name: BSD-3-Clause
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Solve exact set cover problems like Sudoku, 8 Queens, Soma Cube, Tetris
  Cube
test-bench-deps:
  QuickCheck: '>=2.5 && <3.0'
  array: '>=0.1 && <0.6'
  base: '>=0'
  containers: '>=0'
  enummapset: '>=0'
  random: '>=1.0 && <1.4'
  set-cover: '>=0'
  timeit: '>=0'
  transformers: '>=0.2 && <0.7'
  utility-ht: '>=0'
