all-versions:
- 0.1.0.0
- 0.2.0.0
author: Bellroy Tech Team <haskell@bellroy.com>
basic-deps:
  aeson: ^>=2.1.1.0 || ^>=2.2
  base: '>=4.14 && <4.22'
  bytestring: '>=0.10.12 && <0.13'
  containers: ^>=0.6 || ^>=0.7
  servant: '>=0.19 && <0.21'
  servant-server: '>=0.19 && <0.21'
  text: ^>=1.2 || >=2.0 && <=2.2
changelog: |
  # Revision history for servant-activeresource

  ## 0.2.0.0 -- 2025-06-24

  * `ResourceData` and `StoredResourceData` are now standalone type
    families. This is valuable if you want to split the definition of
    your API types from their implementation, for example if you're
    using [`servant-openapi3`](https://hackage.haskell.org/package/servant-openapi3)
    to generate OpenAPI documentation for your API, and you don't want
    to recompile the API modules every time you tweak an endpoint
    implementation.

  * The `Resource` typeclass no longer exists. Instead, a Haskell record
    `ResourceOperations` has been added, which holds the CRUDL
    operations on a resource.

    - Added `hoistResourceOperations` to apply a natural transformation
      to a `ResourceOperations`.

  * There is no longer any need for Template
    Haskell. `makeResourceServerT` has been replaced with
    `makeResourceRoutesT`, which is a non-TH function that operates on
    `ResourceOperations`.

  * Added `makeResourceRoutes`, a version of `makeResourceRoutesT`
    specialised to `Handler`.

  ## 0.1.0.0 -- 2024-07-05

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # servant-activeresource

  [ActiveResource](https://github.com/rails/activeresource) is a Rails
  library for representing resources from a RESTful API as Ruby objects,
  with a similar interface to the Rails ActiveRecord ORM.

  This library provides types for describing such APIs, and functions to
  help implement Servant-style servers that provide them.

  ```haskell
  import qualified Servant.ActiveResource as AR

  newtype MyResourceId = MyResourceId Int
  -- Type for new values or updates to existing values. Usually
  -- missing an `id` field.
  data MyResource = MyResource {...}
  -- Like MyResource, but returned from the database.
  data MyStoredResource = MyStoredResource {...}

  -- These type family instances associate your resource's ID type
  -- with the data types accepted and returned by your operations and
  -- by the servant-server API.
  type instance ResourceData MyResourceId = MyResource
  type instance StoredResourceData MyResourceId = MyStoredResource

  -- Record of routes, which can passed directly to
  -- 'Servant.Server.Generic.genericServe', or spliced into another
  -- record of routes via 'Servant.API.NamedRoutes'.
  --
  -- The exact monad used will depend on your program. Here, we just
  -- assume 'Handler' from package servant-server.
  routes :: AR.ResourceRoutes MyResourceId AsServer
  routes = AR.makeResourceRoutes ResourceOperations
    { listResources = ...
    , createResource = ...
    , readResource = ...
    , upsertResource = ...
    , deleteResource = ...
    }
  ```
description-type: markdown
hash: 444b8d2a04e4f9d451fc67f9b6e410810285d7315f29afc705686d3e251deeb0
homepage: https://github.com/bellroy/servant-activeresource
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: Bellroy Tech Team <haskell@bellroy.com>
synopsis: Servant endpoints compatible with Rails's ActiveResource
test-bench-deps:
  aeson: ^>=2.1.1.0 || ^>=2.2
  base: '>=4.14 && <4.22'
  bytestring: '>=0.10.12 && <0.13'
  containers: ^>=0.6 || ^>=0.7
  servant: '>=0.19 && <0.21'
  servant-activeresource: '>=0'
  servant-server: '>=0.19 && <0.21'
  text: ^>=1.2 || >=2.0 && <=2.2
