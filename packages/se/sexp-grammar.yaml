all-versions:
- 1.1.1
- 1.2.1
- 1.2.2
- 1.2.3
- 1.3.0
- 2.0.0
- 2.0.1
- 2.0.2
- 2.1.0
- 2.2.0
- 2.2.1
- 2.3.0
- 2.3.1
- 2.3.3
- 2.3.3.1
- 2.3.4.0
- 2.3.4.1
- 2.3.4.2
author: Yevhen Smolanka, Sergey Vinokurov
basic-deps:
  array: '>=0.5 && <0.6'
  base: '>=4.11 && <5.0'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.5.5 && <0.8'
  data-fix: '>=0.3 && <0.4'
  deepseq: '>=1.4.3 && <2.0'
  invertible-grammar: '>=0.1.3 && <0.2'
  prettyprinter: '>=1.7 && <1.8'
  recursion-schemes: '>=5.2 && <5.3'
  scientific: '>=0.3.3 && <0.4'
  semigroups: '>=0.16 && <0.21'
  text: '>=1.2 && <1.3 || >=2.0 && <2.2'
  utf8-string: '>=1.0 && <2.0'
changelog: ''
changelog-type: ''
description: |
  [![Build](https://github.com/esmolanka/sexp-grammar/actions/workflows/build.yml/badge.svg)](https://github.com/esmolanka/sexp-grammar/actions/workflows/build.yml)

  sexp-grammar
  ============

  Library of invertible parsing combinators for S-expressions. The
  combinators define primitive grammars and ways to compose them. A
  grammar constructed with these combinators can be run in two
  directions: parsing from S-expressions direction (forward) and
  serialising to S-expressions direction (backward).

  The approach used in `sexp-grammar` is inspired by the paper
  [Invertible syntax descriptions: Unifying parsing and pretty printing](http://www.informatik.uni-marburg.de/~rendel/unparse/)
  and a similar implementation of invertible grammar approach for JSON, library by
  Martijn van Steenbergen called [JsonGrammar2](https://github.com/MedeaMelana/JsonGrammar2).

  Let's have a look at `sexp-grammar` at work:

  ```haskell
  {-# LANGUAGE DeriveGeneric     #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE TypeOperators     #-}

  import GHC.Generics
  import Data.Text (Text)
  import Language.SexpGrammar
  import Language.SexpGrammar.Generic

  data Person = Person
    { pName    :: Text
    , pAddress :: Text
    , pAge     :: Maybe Int
    } deriving (Show, Generic)

  instance SexpIso Person where
    sexpIso = with $ \person ->  -- Person is isomorphic to:
      list (                           -- a list with
        el (sym "person") >>>          -- a symbol "person",
        el string         >>>          -- a string, and
        props (                        -- a property-list with
          "address" .:  string >>>     -- a keyword :address and a string value, and
          "age"     .:? int))  >>>     -- an optional keyword :age with int value.
      person
  ```

  We've just defined an isomorphism between S-expression representation
  and Haskell data record representation of the same information.

  ```haskell
  ghci> :set -XTypeApplications
  ghci> import Language.SexpGrammar
  ghci> import Data.ByteString.Lazy.Char8 (pack, unpack)
  ghci> person <- either error return . decode @Person . pack =<< getLine
  (person "John Doe" :address "42 Whatever str." :age 25)
  ghci> person
  Person {pName = "John Doe", pAddress = "42 Whatever str.", pAge = Just 25}
  ghci> putStrLn (either id unpack (encode person))
  (person "John Doe" :address "42 Whatever str." :age 25)
  ```

  See more [examples](https://github.com/esmolanka/sexp-grammar/tree/master/examples)
  in the repository.
description-type: markdown
hash: a319f31dd4ad33b5004cf23d020e16c1316bb12f5e713be40c3a5beeba877016
homepage: https://github.com/esmolanka/sexp-grammar
latest: 2.3.4.2
license-name: BSD-3-Clause
maintainer: Yevhen Smolanka <ys@polymorphic.me>
synopsis: Invertible grammar combinators for S-expressions
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  invertible-grammar: '>=0'
  prettyprinter: '>=0'
  scientific: '>=0'
  semigroups: '>=0'
  sexp-grammar: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
