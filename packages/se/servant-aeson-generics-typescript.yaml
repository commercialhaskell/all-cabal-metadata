homepage: ''
changelog-type: ''
hash: 0f9c98db2ceefdc23c4ca6d1cd25cccb6a16d17cce3c20a3c67883b3d3fb0d40
test-bench-deps: {}
maintainer: info@Platonic.Systems
synopsis: Generates a TypeScript client for Servant APIs
changelog: ''
basic-deps:
  warp: '>=3.3.30 && <3.4'
  bytestring: '>=0.11.5 && <0.12'
  string-interpolate: '>=0.3.2 && <0.4'
  split: '>=0.2.4 && <0.3'
  base: '>=4.17.2 && <4.18'
  time: '>=1.12.2 && <1.13'
  hspec: '>=2.11.7 && <2.12'
  text: '>=2.0.2 && <2.1'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.17 && <1.7'
  async: '>=2.2.4 && <2.3'
  servant-server: '>=0.20 && <0.21'
  servant: '>=0.20.1 && <0.21'
  containers: '>=0.6.7 && <0.7'
  servant-auth: '>=0.4.1 && <0.5'
  hspec-wai: '>=0.11.1 && <0.12'
  jose-jwt: '>=0.9.6 && <0.10'
  random: '>=1.2.1 && <1.3'
  aeson-generics-typescript: '>=0.0.0 && <0.1'
  QuickCheck: '>=2.14.3 && <2.15'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=2.1.2 && <2.2'
  directory: '>=1.3.7 && <1.4'
all-versions:
- 0.0.0.1
author: Platonic.Systems
latest: 0.0.0.1
description-type: markdown
description: |
  # Servant Aeson Generics TypeScript

  This project leveratges aeson-generics-typescript to generate type safe API bindings in TypeScript for a given Servant API.
  Included here are tests that round trip by compling the TypeScript with tsc, running the client in nodejs, and checking that request response round trips with the Servant server.

  ```haskell
  data Foo = ...
    deriving stock (Generic)
    deriving anyclass (ToJSON, FromJSON, TypeScriptDefinition)

  type API = "foo" :> Get '[JSON] Foo
  ```

  Is all it takes to have a TypeScript Definition, and TypeScript client. Now you can obtain the TypeScript client as a string like so.

  ```haskell
  client :: String
  client = gen @API
  ```

  ## Example

  You can see many examples in the tests. One provided here for documentation purposes:

  ```haskell
  data Foo = Foo { thang :: String, otherThang :: Int }
    deriving stock (Generic)
    deriving anyclass (ToJSON, FromJSON, TypeScriptDefinition)

  type API = "foo" :> Capture "bar" Int :> Post '[JSON] Foo

  client = tsClient @'[Foo] @API
  ```

  will generate

  ```typescript
  // Defined in Servant.Client.TypeScriptSpec of main
  interface Foo {
    // readonly tag: "Foo";
    readonly thang: string;
    readonly otherThang: number;
  }
  const API = {
    base: "",
    "/foo/:bar": (bar:number): Promise<Foo> => {
      const uri = `${API.base}/foo/${bar}`;
      return fetch(uri, {
        method: "POST"
      }).then(res => res.json());
    }
  };
  ```
license-name: BSD-3-Clause
