homepage: https://github.com/brandonchinn178/self-extract#readme
changelog-type: markdown
hash: e264084693fe198798bc96a30fe7a3189630d60e34e7fc6869420163e61459c3
test-bench-deps: {}
maintainer: Brandon Chinn <brandonchinn178@gmail.com>
synopsis: A Haskell library to make self-extracting executables
changelog: |
  ## self-extract 0.4.1

  Fixes:
  * Works with lts-13.*

  ## self-extract 0.4.0

  Fixes:
  * Works with lts-11.*

  ## self-extract 0.3.4

  Fixes:
  * Better error message if no archive was bundled

  ## self-extract 0.3.3

  Fixes:
  * Make bundling occur in same directory as exe
  * Use typed paths for `ztar`

  ## self-extract 0.3.2

  Fixes:
  * Use `GZip` instead of `Zip` (#14), thanks to ztar-0.1.1

  ## self-extract 0.3.1

  Other fixes:
  * Uses `Zip` instead of `GZip`, due to filename limits in tar (#14)

  ## self-extract 0.3.0

  Breaking fixes:
  * `bundle` now works standalone, without needing to be in a Cabal hook
  * Use `getExe` in Cabal hooks instead

  Other fixes:
  * Add tests
  * Add dev flag
  * Upgrade to ztar-0.1.0

  ## self-extract 0.2.0.0

  Fixed bug due to stripping the exes after bundling, which is only a problem when bundling multiple
  executables in a package.

  Major fixes:
  * Packages should use `bundle` in the `postCopy` hook, rather than the `postBuild` hook.

  Other fixes:
  * Updated documentation

  ## self-extract 0.1.0.0

  * Initial implementation
basic-deps:
  bytestring: '>=0.10.8'
  extra: '>=1.6'
  Cabal: '>=2.0'
  path: '>=0.6'
  base: '>=4.7 && <5'
  unix-compat: '>=0.5'
  self-extract: -any
  binary: '>=0.8.5'
  ztar: '>=1.0'
  file-embed: '>=0.0.10'
  path-io: '>=1.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.0
- 0.4.1
author: Brandon Chinn <brandonchinn178@gmail.com>
latest: 0.4.1
description-type: markdown
description: |
  # self-extract

  A Haskell library that can make an executable self-extracting.

  ## Usage

  ### Basic

  ```
  import Codec.SelfExtract (extractTo)
  import System.Environment (getArgs)

  main :: IO ()
  main = do
    dir <- head <$> getArgs
    extractTo dir
  ```

  ```
  $ stack ghc Example.hs
  $ mkdir artifacts && touch artifacts/hello.txt artifacts/world.txt
  $ stack build self-extract && stack exec -- self-bundle ./Example artifacts/
  $ ./Example dist
  $ ls dist
  hello.txt
  world.txt
  ```

  ### With Cabal hooks

  * Add `self-extract` to the Cabal file

  ```
  custom-setup
    setup-depends: base, Cabal, self-extract

  executable name-of-executable
    build-depends: self-extract
  ```

  * Call `bundle` in `Setup.hs`

  ```
  import Codec.SelfExtract (bundle)
  import Codec.SelfExtract.Distribution (getExe)
  import Distribution.Simple

  main = defaultMainWithHooks simpleUserHooks
    { postCopy = \args cf pd lbi -> do
        postCopy simpleUserHooks args cf pd lbi
        exe <- getExe lbi "name-of-executable"
        bundle exe "dir-to-bundle"
    }
  ```

  * Call `extractTo` in the executable

  ```
  import Codec.SelfExtract

  main = do
    -- will extract to $CWD/dir
    extractTo "dir"

    -- will extract to /usr/local/lib
    extractTo "/usr/local/lib"

    -- will extract to a temporary directory
    withExtractToTemp $ \dir -> ...
  ```

  ### Details

  The above instructions should be a black box, but here is an explanation of the implementation
  if you need to know the details of how it works.

  When the executable containing `extractTo` is built, some space will be allocated to contain the
  size of the binary.

  `bundle` will take the directory specified and run `tar` on it. It will also get the size of the
  given executable and write the size into the space allocated by `extractTo`. Then `bundle` will
  replace the executable with the executable itself concatenated with the tar archive.

  When `extractTo` is called, it will read the size of the executable that was written with `bundle`.
  After seeking to the size of the binary, the tar archive can be extracted to the desired directory.
license-name: BSD-3-Clause
