all-versions:
- 2007.6.14
- 2007.6.17
- 2007.6.18
- 2007.6.20
- 2007.7.15
- 2008.2.20
- 2008.2.22
- 2008.2.23
- 2008.2.28
- 2008.3.23
- 2008.3.24
- 2008.3.25
- 2008.3.29
- 2008.3.30
- 2008.4.2
- 2008.5.2
- 2008.5.6
- 2008.5.12
- 2008.6.17
- 2008.7.18
author: Matthew Sackman
basic-deps:
  base: '>=0'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  mtl: '>=0'
  network: '>=0'
changelog: "The most recent changes are at the top of this file.\n\n2008 07 18\n\n
  \ New multi receive variations:\n\n    plainMultiReceive takes a heterogeneous list
  of channel indexes\n    and a homogeneous list of functions. Basic operation is
  the same\n    as for multiReceive but should permit lists of channels which do\n
  \   not have a statically determined length to be used. The trade off\n    is that
  every channel that is used must be of the same type.\n\n    combinedMultiRecv combines
  both the normal multiReceive and the\n    plainMultiReceive. This means that you
  should be able to have an\n    unbounded list of channels all of the same type (say,
  workers) and\n    then a few other channels which are statically known (say,\n    producers)
  and then multi receive amongst them all.\n\n  withChannelRec : this forces that
  the type of the pid overall has\n  not changed. Ideally should not be necessary,
  but seems to be useful\n  in some cases.\n\n  mapChannelsRec : this is like mapM:
  you supply a function and a list\n  of channel indexes and it will run the function
  over them all and\n  cons up the result. Thus every channel indicated should be
  of a type\n  which is compatible with the function.\n\n2008 06 17\n\n  Multireceive
  now accepts channels where the next operation is offer.\n\n  Sends can be performed
  early - safely promoted over receives.\n\n  Support for testing asynchronously for
  non-blocking receives. Plus\n  with timeout options.\n\n2008 05 12\n\n  Fixed a
  horrible bug that had meant that lists of fragment tuples\n  where more than one
  fragment was notDual were unusable. Was due to a\n  nasty interaction between type
  families and fundeps. Sort of.\n\n  Also now support subtyping on Pids. So you can
  now ssend a pid which\n  has a richer set of session type fragments than is listed
  in the\n  sendPid construct in the session type itself. The Pid is\n  automatically
  converted and everything works - the receiving party\n  (srecv) is limited to only
  using the session types as listed in the\n  sendPid / recvPid construct as you'd
  expect. Thus the session types\n  can become narrower and more accurate.\n\n  Also,
  some support for real network operations starting to\n  appear. Have a look at Control.Concurrent.Sessions.Network.Socket
  if\n  you're interested, along with Tests.TestNetwork.\n\n2008 05 06\n\n  Added
  the Control.Concurrent.Session.SessionTypeMonad file that was\n  forgotten.\n\n2008
  05 02\n\n  Ensured that Pids carry around both dual and non-dual-ed session\n  types
  that they're prepared to start at. Before they were just\n  carrying non-dual-ed
  as this was all that was necessary for pairing\n  --> createSession.\n  \n  A new
  and wonderful way of describing session types. This gets rid\n  of the old horrible
  absolute indexes and results in visually more\n  appealing and comprehensible session
  types.\n\n  Support for higher-order channels: you can now send channels over\n
  \ channels, using sendChannel and recvChannel. Equivalent session type\n  descriptors
  are sendSession and recvSession.\n\n  Tidied up examples in Tests and Queens to
  demonstrate new features.\n\n2008 04 02\n\n  Added smapM, smapM_, sjoin and fixed
  up tests file\n\n2008 03 30\n\n  Added functions ssequence, ssequence_, withThenClose,\n
  \ createSessionThenClose, forkThenClose\n\n2008 03 29\n\n  Added scloseCh. Added
  additional type class constraints so that\n  creating, using and closing a channel
  doesn't alter the TyMaps.\n  Fixed a couple of other bugs. Pushed prog' into all
  Pids as well.\n\n2008 03 25\n\n  Multi-receive is in and works and is pretty useful.\n\n2008
  03 24\n\n  Bug fixes. The public channel stuff is much more robust and you\n  can't
  now promote sends or receives early, which has forced me to\n  fix other bugs too.
  All good.\n\n2008 03 23\n\n  Pid communication and the establishment of sessions
  based on known\n  Pids now works. This is basically public channels in and working.\n\n2008
  02 28\n\n  Interleaving appears. Type sigs get bigger. The night gets\n  darker.
  But it all works. One example so far using\n  interleaving. Need to deal properly
  with public channels and need to\n  write multi-recv.\n\n2008 02 23\n\n  Added better
  examples to the Tests.hs module, including the standard\n  and much loved \"calculator\".
  Altered 'run' and '~||~' so that they\n  automatically add the necessary 'sjump's.
  Corrected some\n  documentation mistakes. Also corrected the fixity of ~>> and ~>>=.\n\n2008
  02 20\n\n  Completed rewrite. New version released to Hackage. Works correctly\n
  \ in GHC 6.8.2. Now permits arbitrarily complex session types with\n  mixed branching
  and looping.\n"
changelog-type: text
description: |-
  Session Types for Haskell. Allows the specification of communication
  protocols and then validation that an implementation does not
  violate said protocol.
  Ignore the build failure for hackage - it's just haddock being
  rubbish.
description-type: haddock
hash: 786ee0bef2292548f171da192d96dd02a931a64c08f5b17e7b43ca2b1a263885
homepage: http://www.wellquite.org/sessions/
latest: 2008.7.18
license-name: LicenseRef-GPL
maintainer: matthew@wellquite.org
synopsis: Session Types for Haskell
test-bench-deps: {}
