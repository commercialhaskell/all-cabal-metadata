all-versions:
- 0.1.0.0
author: Anton Gushcha
basic-deps:
  aeson: '>=0.11 && <0.12'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.11'
  http-client: '>=0.4 && <0.6'
  http-client-tls: '>=0.2 && <0.4'
  mtl: '>=2.2 && <2.3'
  scientific: '>=0.3 && <0.4'
  servant: '>=0.7 && <0.9'
  servant-client: '>=0.7 && <0.9'
  text: '>=1.2 && <2'
  transformers: '>=0.4 && <0.6'
changelog: |-
  0.1.0.0
  =======

  * Initial release
changelog-type: markdown
description: "# servant-smsc-ru\n\n[![Build Status](https://travis-ci.org/NCrashed/servant-smsc-ru.svg?branch=master)](https://travis-ci.org/NCrashed/servant-smsc-ru)\n\nThese
  are bindings to https://smsc.ru service for sending SMS/MMS message to cell phones.\n\n#
  How to use\n\nThe general API is provided by `genericSmsSend` function, but it is
  too overengineered to be used\nas is. Thats why several simplified wrappers are
  presented.\n\nFirst, you need to provide `SmscConfig` value:\n\n``` haskell\ncfg
  <- defaultSmscConfig\nlet testSmscConfig = cfg {\n        smscLogin = \"mylogin\"\n
  \     , smscPassword = \"mypass\"\n      }\n```\n\nAfter that you can send a SMS:\n\n```
  haskell\nres <- simpleSmsSend testSmscConfig testPhone \"Test message\"\ncase res
  of \n  Left er -> printLn $ \"message sending: \" ++ show er\n  Right _ -> return
  ()\n```\n\nOr check how much it would cost to you:\n\n``` haskell\nres <- getSimpleSmsCost
  testSmscConfig testPhone \"Test message\"\ncase res of \n  Left er -> assertFailure
  $ \"message costing: \" <> show er\n  Right v -> putStrLn $ \"message cost: \" <>
  show v\n```"
description-type: markdown
hash: a2b46a95be006a97a8909e90a8c531654db976e00485be9236b079e74ea544ab
homepage: https://github.com/NCrashed/servant-smsc-ru#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: ncrashed@gmail.com
synopsis: Servant client for smsc.ru service for sending SMS to cell phones
test-bench-deps:
  HUnit: '>=1.3'
  QuickCheck: '>=2.8.2'
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  quickcheck-text: '>=0'
  servant-smsc-ru: '>=0'
  tasty: '>=0.11'
  tasty-hunit: '>=0.9'
  tasty-quickcheck: '>=0.8'
  text: '>=0'
