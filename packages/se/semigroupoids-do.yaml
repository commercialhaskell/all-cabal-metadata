homepage: https://github.com/kozross/semigroupoids-do
changelog-type: markdown
hash: 8cc1b3f2e72f9de647059ee0db8b460709cc92d4f3d8bb18beff4065a0c5c785
test-bench-deps: {}
maintainer: koz.ross@retro-freedom.nz
synopsis: Support for QualifiedDo with semigroupoids classes.
changelog: |
  # Revision history for semigroupoids-do

  ## 1.0 -- 2021-09-26

  * First version. Released on an unsuspecting world.
basic-deps:
  semigroupoids: ^>=5.3.5
  base: '>=4.15 && <5'
all-versions:
- '1.0'
author: Koz Ross
latest: '1.0'
description-type: markdown
description: "# `semigroupoids-do` \n\n## What is this thing?\n\nWith GHC 9, we finally
  got the\n[QualifiedDo](https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/qualified_do.html)\nextension,
  allowing us to overload do-notation in a convenient way. This has a\nrange of uses;
  in our case, we are interested in being able to use do-notation\nin a more general
  context than would normally be possible.\n\n[`semigroupoids`](https://hackage.haskell.org/package/semigroupoids)
  as a\npackage is designed to generalize certain common type classes, such as\n`Applicative`
  and `Monad`. This can be convenient: for example, something could \nbe an `Apply`
  or `Bind`, but not an `Applicative` or `Monad` if no sensible \ndefinition for `pure`
  exists. However, without the convenience of do-notation, \nsuch instances mean significantly
  less, as they are awkward to use. This is an \nunnecessary restriction at least
  in this example, as nothing about do-notation\nrequires `pure`.\n\nIn this package,
  we provide a set of definitions suitable for use with\n`QualifiedDo`, generalizing
  all the necessary operations to their\n`semigroupoids` equivalents. Specifically:\n\n*
  It is now possible to use do-notation when you only have a\n  [`Bind`](https://hackage.haskell.org/package/semigroupoids-5.3.5/docs/Data-Functor-Bind.html#t:Bind).\n*
  With `ApplicativeDo`, in some cases, you can use do-notation when you only\n  have
  an\n  [`Apply`](https://hackage.haskell.org/package/semigroupoids-5.3.5/docs/Data-Functor-Bind.html#t:Apply),\n
  \ subject to the same conditions as using `Applicative` for do-notation.\n* You
  can use refutable patterns when you only have\n  [`Plus`](https://hackage.haskell.org/package/semigroupoids-5.3.5/docs/Data-Functor-Plus.html#t:Plus).\n\n##
  What are the goals of this project?\n\nOur only goal is to provide `QualifiedDo`
  support for `semigroupoid`\ngeneralizations; no more, no less.\n\n## How do I use
  this?\n\n```haskell\n{-# LANGUAGE QualifiedDo #-}\n\nmodule MyModule where\n\nimport
  Data.Functor.Bind (Bind)\nimport qualified Semigroupoids.Do as S\n\nfoo :: (Bind
  m) => m a\nfoo = S.do\n  ...\n```\n\n## Wait, haven't I seen this somewhere before?\n\nYou
  are probably thinking of\n[`semigroupoids-syntax`](https://hackage.haskell.org/package/semigroupoids-syntax).\nIt
  is true that we take inspiration from it. However, we differ from it in a\ncouple
  of ways:\n\n* We only support the subset of syntax modification allowed by `QualifiedDo`;\n
  \ `semigroupoids-syntax` goes beyond this, supplying a range of\n  `RebindableSyntax`
  capabilities.\n* `semigroupoids-syntax` hasn't been updated since 2014.\n* `semigroupoids-syntax`
  has support going back to much older GHCs; we limit\n  ourselves only to GHCs that
  have `QualifiedDo`.\n\nIn short, this is a maintained, small, and simple package,
  to do only one task.\n\n## What does this run on?\n\nWe support (and CI check) only
  those versions of GHC which support\n`QualifiedDo`. Currently, that list is:\n\n*
  9.0.1\n\nWe check on the following platforms:\n\n* Windows\n* Linux\n* MacOS\n\n##
  What can I do with this?\n\nThe project is licensed Apache 2.0 (SPDX code\n[`Apache-2.0`](https://spdx.org/licenses/Apache-2.0.html)).
  For more details,\nplease see the `LICENSE.md` file.\n"
license-name: Apache-2.0
