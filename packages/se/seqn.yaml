all-versions:
- 0.1.0.0
- 0.1.1.0
author: Soumik Sarkar
basic-deps:
  base: '>=4.13.0.0 && <5'
  deepseq: '>=1.4.4.0 && <1.7'
  indexed-traversable: '>=0.1 && <0.2'
  primitive: '>=0.7.3.0 && <0.10'
  samsort: '>=0.1.0.0 && <0.2'
  transformers: '>=0.5.6.2 && <0.7'
changelog: |
  ### 0.1.1.0 -- 2024-07-12

  * New `MSeq` functions: `sliceSummaryMay`, `sliceSummary`,
    `foldlSliceSummaryComponents`.

  ### 0.1.0.0 -- 2024-06-16

  * First version.
changelog-type: markdown
description: |
  # seqn

  [![Hackage](https://img.shields.io/hackage/v/seqn?logo=haskell&color=blue)](https://hackage.haskell.org/package/seqn)
  [![Haskell-CI](https://github.com/meooow25/seqn/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/meooow25/seqn/actions/workflows/haskell-ci.yml)

  `seqn` offers two sequence types:

  * `Seq`, an immutable sequence supporting operations such as index, insert,
    delete, split, append, in logarithmic time. `Seq` is well-suited to use cases
    where there are frequent changes to the structure of the sequence.

  * `MSeq`, a sequence like `Seq`, which additionally supports constant time
    access to the accumulated "measure" of all its elements. See the documentation
    for `MSeq` for more about measures.

  `seqn` also offers a priority-queue structure, `PQueue`, with logarithmic time
  queue operations.

  ## Documentation

  Please find the documentation on Hackage: [seqn](https://hackage.haskell.org/package/seqn)

  ## Alternatives

  The following structures are similar to `Seq` and `MSeq`, but may be better
  suited to some use cases.

  * Alternatives to `Seq`:
    * [`Data.Sequence.Seq`](https://hackage.haskell.org/package/containers-0.7/docs/Data-Sequence.html#t:Seq)
      from `containers`
    * [`Data.RRBVector.Vector`](https://hackage.haskell.org/package/rrb-vector-0.2.1.0/docs/Data-RRBVector.html#t:Vector)
      from `rrb-vector`
  * Alternatives to `MSeq`:
    * [`Data.FingerTree.FingerTree`](https://hackage.haskell.org/package/fingertree-0.1.5.0/docs/Data-FingerTree.html#t:FingerTree)
      from `fingertree`

  For a detailed comparison, [see here](https://github.com/meooow25/seqn/tree/master/bench).

  ## Acknowledgements

  The interface and implementation of `seqn` is largely influenced by
  the libraries [`containers`](https://hackage.haskell.org/package/containers) and
  [`fingertree`](https://hackage.haskell.org/package/fingertree).

  ## Contributing

  Questions, bug reports, documentation improvements, code contributions welcome!
  Please [open an issue](https://github.com/meooow25/seqn/issues) as the first
  step.
description-type: markdown
hash: 11c421e709c9ef111be5e5c3b42ec5f8d014426925029df56acace21f411c91e
homepage: https://github.com/meooow25/seqn
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: soumiksarkar.3120@gmail.com
synopsis: Sequences and measured sequences
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  indexed-traversable: '>=0'
  quickcheck-classes-base: '>=0'
  seqn: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  transformers: '>=0'
