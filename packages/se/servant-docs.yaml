homepage: http://docs.servant.dev/
changelog-type: markdown
hash: 044e6af3e3527268efe073cd1a22834055e19bcadb876a10bf10fbc3e90eed38
test-bench-deps:
  servant-docs: -any
  base: -any
  tasty-golden: '>=2.3.2 && <2.4'
  servant: -any
  lens: -any
  base-compat: -any
  tasty-hunit: '>=0.10.0.1 && <0.11'
  transformers: '>=0.5.2.0 && <0.6'
  tasty: '>=1.1.0.4 && <1.5'
  string-conversions: -any
  aeson: -any
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: generate API docs for your servant webservice
changelog: |
  [The latest version of this document is on GitHub.](https://github.com/haskell-servant/servant/blob/master/servant-docs/CHANGELOG.md)
  [Changelog for `servant` package contains significant entries for all core packages.](https://github.com/haskell-servant/servant/blob/master/servant/CHANGELOG.md)

  0.12
  ----

  ### Significant changes

  - Generate sample cURL requests
    ([#1401](https://github.com/haskell-servant/servant/pull/1401/files)).
    Breaking change: requires sample header values to be supplied with `headers`.

  0.11.9
  ------

  ### Significant changes

  - Use Capture Description if available (#1423).

  ### Other changes

  - Support GHC-9.0.1.
  - Bump `bytestring` and `lens` dependencies.

  0.11.8
  ------

  ### Significant changes

  - Support `Fragment` combinator.

  0.11.7
  ------

  ### Significant changes

  - Add instance for ToSample NonEmpty

  ### Other changes

  - Bump "tested-with" ghc versions
  - Fix servant-docs code sample in README

  0.11.5
  ----


  - Add NoContentVerb [#1028](https://github.com/haskell-servant/servant/issues/1028) [#1219](https://github.com/haskell-servant/servant/pull/1219) [#1228](https://github.com/haskell-servant/servant/pull/1228)

    The `NoContent` API endpoints should now use `NoContentVerb` combinator.
    The API type changes are usually of the kind

    ```diff
    - :<|> PostNoContent '[JSON] NoContent
    + :<|> PostNoContent
    ```

    i.e. one doesn't need to specify the content-type anymore. There is no content.

  - `Capture` can be `Lenient` [#1155](https://github.com/haskell-servant/servant/issues/1155) [#1156](https://github.com/haskell-servant/servant/pull/1156)

    You can specify a lenient capture as

    ```haskell
    :<|> "capture-lenient"  :> Capture' '[Lenient] "foo" Int :> GET
    ```

    which will make the capture always succeed. Handlers will be of the
    type `Either String CapturedType`, where `Left err` represents
    the possible parse failure.

  - *servant-docs* Merge documentation from duplicate routes [#1240](https://github.com/haskell-servant/servant/issues/1240) [#1241](https://github.com/haskell-servant/servant/pull/1241)

    Servant supports defining the same route multiple times with different
    content-types and result-types, but servant-docs was only documenting
    the first of copy of such duplicated routes. It now combines the
    documentation from all the copies.

    Unfortunately, it is not yet possible for the documentation to specify
    multiple status codes.

  - *servant-docs* Prevent race-conditions in testing [#1194](https://github.com/haskell-servant/servant/pull/1194)

  0.11.4
  ------

  - Drop dependency on `control-monad-omega` in favor of `Data.Universe.Helpers` from `universe-base`.

  0.11.3
  ------

  - Support `servant-0.15`
     - Instances for 'Stream' and 'StreamBody'

  0.11.2
  ------

  * Allow `servant-0.13`:
    - Doesn't have instances for streaming.
    - Servant.API.Modifiers extra information isn't used.

  0.11.1
  ------

  * Export `DocAuthentication` and related lenses.
  * Make `defAction`'s documentation visible in Haddock documentation.
  * Add a markdown header for the Headers an endpoint is sensitive to.
  * Document the HTTP Method the parameters of an endpoint belong to
    (rather than assuming `GET` for all of them).
  * Content type of sample response body is also displayed.
  * Can now customise various aspects of how the document is produced
    using `markdownWith` and `RenderingOptions`:
      - How many content-types for each example are shown
      - Whether notes should be grouped together under their own header.

  0.11
  ----

  * changed the type of `rqbody`.

  0.10
  ----

  There are no changes. Released as a part of `servant` suite.

  0.7.1
  -----

  * Support GHC 8.0

  0.7
  ---

  * Use `throwError` instead of `throwE` in documentation

  0.5
  ----

  * Support for the `HttpVersion`, `IsSecure`, `RemoteHost` and `Vault` combinators
  * Support maximum samples setting with new `DocOptions` type (used by `docsWithOptions` and `docsWith`)
  * Remove redundant second parameter of ToSample
  * Add Generic-based default implementation for `ToSample` class
  * Add more `ToSamples` instances: `Bool`, `Ordering`, tuples (up to 7), `[]`, `Maybe`, `Either`, `Const`, `ZipList` and some monoids
  * Move `toSample` out of `ToSample` class
  * Add a few helper functions to define `toSamples`
  * Remove matrix params.
  * Added support for Basic authentication

  0.4
  ---
  * `Delete` now is like `Get`, `Post`, `Put`, and `Patch` and returns a response body
  * Allow for extra information to be added to the docs
  * Support content-type aware combinators of *servant-0.4*
  * Render endpoints in a canonical order (https://github.com/haskell-servant/servant-docs/pull/15)
  * Remove ToJSON superclass from ToSample
  * Split out Internal module
  * Add support for response headers
  * Allow `ToSample` to return a different type than it's arguments
  * Add Proxy argument to `ToSample`

  0.3
  ---

  * Add the ability to display multiple responses, with some accompanying `Text` to describe the context in which we get the corresponding JSON.
  * Expose the `headers` lens
  * Represent an endpoint's path as `[String]` (previously `String`), fixing a corner case where the leading `/` would be missing.
basic-deps:
  servant-docs: -any
  bytestring: '>=0.10.8.1 && <0.12'
  case-insensitive: '>=1.2.0.11 && <1.3'
  base: '>=4.9 && <4.16'
  universe-base: '>=1.1.1 && <1.2'
  aeson-pretty: '>=0.8.5 && <0.9'
  unordered-containers: '>=0.2.9.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  servant: '>=0.18 && <0.20'
  lens: '>=4.17 && <5.1'
  base-compat: '>=0.10.5 && <0.12'
  hashable: '>=1.2.7.0 && <1.4'
  string-conversions: '>=0.4.0.1 && <0.5'
  http-types: '>=0.12.2 && <0.13'
  aeson: '>=1.4.1.0 && <3'
  http-media: '>=0.7.1.3 && <0.9'
all-versions:
- '0.2'
- 0.2.1
- '0.3'
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.4
- 0.4.4.2
- 0.4.4.3
- 0.4.4.4
- 0.4.4.5
- 0.4.4.6
- 0.4.4.7
- '0.5'
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- '0.8'
- 0.8.1
- '0.9'
- 0.9.0.1
- 0.9.1
- 0.9.1.1
- '0.10'
- '0.11'
- 0.11.1
- 0.11.2
- 0.11.3
- 0.11.4
- 0.11.5
- 0.11.6
- 0.11.7
- 0.11.8
- 0.11.9
- '0.12'
author: Servant Contributors
latest: '0.12'
description-type: markdown
description: |
  # servant-docs

  ![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)

  Generate API docs for your _servant_ webservice. Feel free to also take a look at [servant-pandoc](https://github.com/mpickering/servant-pandoc) which uses this package to target a broad range of output formats using the excellent **pandoc**.

  ## Example

  See [here](https://github.com/haskell-servant/servant/blob/master/servant-docs/example/greet.md) for the output of the following program.

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE DeriveGeneric #-}
  {-# LANGUAGE FlexibleInstances #-}
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE PolyKinds #-}
  {-# LANGUAGE TypeFamilies #-}
  {-# LANGUAGE TypeOperators #-}

  import Data.Aeson (FromJSON, ToJSON)
  import Data.Proxy (Proxy (..))
  import Data.String.Conversions (cs)
  import Data.Text (Text)
  import GHC.Generics (Generic)
  import Servant.API
    ( (:<|>),
      (:>),
      Capture,
      Delete,
      Get,
      JSON,
      MimeRender,
      PlainText,
      Post,
      QueryParam,
      ReqBody,
      mimeRender,
    )
  import Servant.Docs
    ( API,
      DocCapture (..),
      DocQueryParam (..),
      ParamKind (..),
      ToCapture,
      ToParam,
      ToSample,
      docs,
      markdown,
      singleSample,
      toCapture,
      toParam,
      toSamples,
    )

  -- our type for a Greeting message
  data Greet = Greet { _msg :: Text }
    deriving (Generic, Show)

  -- we get our JSON serialization for free. This will be used by the default
  -- 'MimeRender' instance for 'JSON'.
  instance FromJSON Greet
  instance ToJSON Greet
  instance ToSample ()

  -- We can also implement 'MimeRender' explicitly for additional formats.
  instance MimeRender PlainText Greet where
      mimeRender Proxy (Greet s) = "<h1>" <> cs s <> "</h1>"

  -- we provide a sample value for the 'Greet' type
  instance ToSample Greet where
    toSamples _ = singleSample g
      where g = Greet "Hello, haskeller!"

  instance ToParam (QueryParam "capital" Bool) where
    toParam _ =
      DocQueryParam "capital"
                    ["true", "false"]
                    "Get the greeting message in uppercase (true) or not (false). Default is false."
                    Normal

  instance ToCapture (Capture "name" Text) where
    toCapture _ = DocCapture "name" "name of the person to greet"

  instance ToCapture (Capture "greetid" Text) where
    toCapture _ = DocCapture "greetid" "identifier of the greet msg to remove"

  -- API specification
  type TestApi =
         "hello" :> Capture "name" Text :> QueryParam "capital" Bool :> Get '[JSON,PlainText] Greet
    :<|> "greet" :> ReqBody '[JSON] Greet :> Post '[JSON] Greet
    :<|> "delete" :> Capture "greetid" Text :> Delete '[JSON] ()

  testApi :: Proxy TestApi
  testApi = Proxy

  -- Generate the Documentation's ADT
  greetDocs :: API
  greetDocs = docs testApi

  main :: IO ()
  main = putStrLn $ markdown greetDocs
  ```
license-name: BSD-3-Clause
