all-versions:
- 0.1.0.0
- 0.1.1.0
author: Frederick Pringle
basic-deps:
  aeson: '>=2.0 && <2.3'
  aeson-pretty: '>=0.8.8 && <0.9'
  base: '>=4.13 && <5'
  containers: '>=0.6 && <0.8'
  http-types: '>=0.12 && <0.13'
  microlens: '>=0.4.9 && <0.5'
  microlens-th: '>=0.4.3 && <0.5'
  servant: '>=0.17 && <0.21'
  text: '>=1.2 && <2.2'
changelog: |
  # Changelog

  All notable changes to `servant-routes` will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
  and this project adheres to [Haskell Package Versioning Policy](https://pvp.haskell.org).

  ## [Unreleased]

  ## [0.1.1.0] - 10.06.2025

  ### Added

  - A function to sort `Route`s before printing them to stdout. [#32](https://github.com/fpringle/servant-routes/pull/32)
  - More GHC versions in `tested-with`.
  - Add support for Servant's `Description` and `Summary` combinators. [#29](https://github.com/fpringle/servant-routes/pull/29)

  ### Fixed

  - Bug in the hand-rolled `Ord Param` instance. [#34](https://github.com/fpringle/servant-routes/pull/34)

  ## [0.1.0.0] - 03.05.2025

  ### Added

  - First edition of the package.
  - 100% documentation coverage.
  - Almost 100% test coverage.
  - Reasonably detailed README.
  - CI that builds and tests the package for each version of GHC in the `tested-with` field.

  [unreleased]: https://github.com/fpringle/servant-routes/compare/v0.1.1.0...HEAD
  [0.1.1.0]: https://github.com/fpringle/servant-routes/releases/tag/v0.1.1.0
  [0.1.0.0]: https://github.com/fpringle/servant-routes/releases/tag/v0.1.0.0
changelog-type: markdown
description: "# servant-routes\n\nThis package allows us to automatically convert
  type-level Servant representations of APIs to concrete term-level representations.\n\nSee
  `Servant.API.Routes` for in-depth documentation.\n\n## Contents\n\n* [Motivation](#motivation)\n*
  [Examples](#examples)\n    * [Basic usage with servant combinators](#basic-usage-with-servant-combinators)\n
  \   * [Same example using NamedRoutes](#same-example-using-namedroutes)\n    * [Writing
  HasRoutes instances for custom combinators](#writing-hasroutes-instances-for-custom-combinators)\n*
  [Back story](#back-story)\n\n\n## Motivation\n\nRefactoring Servant API types is
  quite error-prone, especially when you have to move\naround lots of `:<|>`s and
  `:>`s.  So it's very possible that the route structure could\nchange in that refactoring,
  _without being caught by the type-checker_.\n\nThe `HasRoutes` class could help
  as a \"golden test\" - run `getRoutes` before and after the refactor, and if they
  give the same\nresult you can be much more confident that the refactor didn't introduce
  difficult bugs.\n\nAnother use-case is in testing: some Haskellers use type families
  to modify Servant APIs, for example\nto add endpoints or authorisation headers.
  Types are hard to test, but terms are easy. Use `HasRoutes`\nand run your tests
  on `Routes`.\n\n\n## Examples\n\n#### Basic usage with `servant` combinators:\n\n```haskell\ntype
  ServantAPI =\n  \"users\"\n    :> ( \"list\" :> Get '[JSON] [User]\n          :<|>
  \"create\" :> ReqBody '[JSON] UserCreateData :> Post '[JSON] UserID\n          :<|>
  \"detail\"\n            :> QueryParam' '[Required] \"id\" UserID\n            :>
  Header' '[Required] \"x-api-key\" ApiKey\n            :> Get '[JSON] User\n       )\n
  \   :<|> \"transactions\"\n      :> ( Capture \"id\" TransactionID\n            :>
  Get '[JSON] (Headers '[Header \"x-request-id\" RequestID] Transaction)\n         )\n
  \   :<|> \"admin\"\n      :> BasicAuth \"admin\" User\n      :> ( \"users\" :> \"delete\"
  :> CaptureAll \"ids\" UserID :> Delete '[JSON] UserID\n         )\n```\n\n```haskell\nghci>
  printRoutes @ServantAPI\nGET /users/list\nPOST /users/create\nGET /users/detail?id=<UserID>\nGET
  /transactions/<TransactionID>\nDELETE /admin/users/delete/<[UserID]>\n\nghci> BL.putStrLn
  . encodePretty $ getRoutes @ServantAPI -- using aeson-pretty\n```\n\n<details>\n<summary>Click
  to see JSON output</summary>\n  \n```json\n[\n    {\n        \"auths\": [],\n        \"description\":
  null,\n        \"method\": \"GET\",\n        \"params\": [],\n        \"path\":
  \"/users/list\",\n        \"request_body\": null,\n        \"request_headers\":
  [],\n        \"response\": {\n            \"headers\": [],\n            \"type\":
  \"[User]\"\n        },\n        \"summary\": null\n    },\n    {\n        \"auths\":
  [],\n        \"description\": null,\n        \"method\": \"POST\",\n        \"params\":
  [],\n        \"path\": \"/users/create\",\n        \"request_body\": \"UserCreateData\",\n
  \       \"request_headers\": [],\n        \"response\": {\n            \"headers\":
  [],\n            \"type\": \"UserID\"\n        },\n        \"summary\": null\n    },\n
  \   {\n        \"auths\": [],\n        \"description\": null,\n        \"method\":
  \"GET\",\n        \"params\": [\n            {\n                \"name\": \"id\",\n
  \               \"param_type\": \"UserID\",\n                \"type\": \"SingleParam\"\n
  \           }\n        ],\n        \"path\": \"/users/detail\",\n        \"request_body\":
  null,\n        \"request_headers\": [\n            {\n                \"name\":
  \"x-api-key\",\n                \"type\": \"ApiKey\"\n            }\n        ],\n
  \       \"response\": {\n            \"headers\": [],\n            \"type\": \"User\"\n
  \       },\n        \"summary\": null\n    },\n    {\n        \"auths\": [],\n        \"description\":
  null,\n        \"method\": \"GET\",\n        \"params\": [],\n        \"path\":
  \"/transactions/<TransactionID>\",\n        \"request_body\": null,\n        \"request_headers\":
  [],\n        \"response\": {\n            \"headers\": [\n                {\n                    \"name\":
  \"x-request-id\",\n                    \"type\": \"RequestID\"\n                }\n
  \           ],\n            \"type\": \"Transaction\"\n        },\n        \"summary\":
  null\n    },\n    {\n        \"auths\": [\n            \"Basic admin\"\n        ],\n
  \       \"description\": null,\n        \"method\": \"DELETE\",\n        \"params\":
  [],\n        \"path\": \"/admin/users/delete/<[UserID]>\",\n        \"request_body\":
  null,\n        \"request_headers\": [],\n        \"response\": {\n            \"headers\":
  [],\n            \"type\": \"UserID\"\n        },\n        \"summary\": null\n    }\n]\n```\n\n</details>\n\n####
  Same example using `NamedRoutes`:\n\n```haskell\ndata UserAPI mode = UserAPI\n  {
  list :: mode :- \"list\" :> Get '[JSON] [User]\n  , create :: mode :- \"create\"
  :> ReqBody '[JSON] UserCreateData :> Post '[JSON] UserID\n  , detail ::\n      mode\n
  \       :- \"detail\"\n          :> QueryParam' '[Required] \"id\" UserID\n          :>
  Header' '[Required] \"x-api-key\" ApiKey\n          :> Get '[JSON] User\n  }\n  deriving
  (Generic)\n\nnewtype TransactionAPI mode = TransactionAPI\n  { get ::\n      Capture
  \"id\" TransactionID\n        :> Get '[JSON] (Headers '[Header \"x-request-id\"
  RequestID] Transaction)\n  }\n  deriving (Generic)\n\nnewtype AdminAPI mode = AdminAPI\n
  \ { deleteUsers ::\n      BasicAuth \"admin\" User\n        :> \"users\"\n        :>
  \"delete\"\n        :> CaptureAll \"ids\" UserID\n        :> Delete '[JSON] UserID\n
  \ }\n  deriving (Generic)\n\ndata ServantAPIWithNamedRoutes mode = ServantAPIWithNamedRoutes\n
  \ { users :: mode :- \"users\" :> NamedRoutes UserAPI\n  , transactions :: mode
  :- \"transactions\" :> NamedRoutes TransactionAPI\n  , admin :: mode :- \"admin\"
  :> NamedRoutes AdminAPI\n  }\n  deriving (Generic)\n```\n\n```haskell\nghci> printRoutes
  @(NamedRoutes ServantAPIWithNamedRoutes)\nGET /users/list\nPOST /users/create\nGET
  /users/detail?id=<UserID>\nGET /transactions/<TransactionID>\nDELETE /admin/users/delete/<[UserID]>\n\nghci>
  BL.putStrLn . encodePretty $ getRoutes @(NamedRoutes ServantAPIWithNamedRoutes)\n```\n\n<details>\n<summary>Click
  to see JSON output</summary>\n\nNote this is the same as above, so we know we refactored
  `ServantAPI` to `ServantAPIWithNamedRoutes` correctly!\n  \n```json\n[\n    {\n
  \       \"auths\": [],\n        \"description\": null,\n        \"method\": \"GET\",\n
  \       \"params\": [],\n        \"path\": \"/users/list\",\n        \"request_body\":
  null,\n        \"request_headers\": [],\n        \"response\": {\n            \"headers\":
  [],\n            \"type\": \"[User]\"\n        },\n        \"summary\": null\n    },\n
  \   {\n        \"auths\": [],\n        \"description\": null,\n        \"method\":
  \"POST\",\n        \"params\": [],\n        \"path\": \"/users/create\",\n        \"request_body\":
  \"UserCreateData\",\n        \"request_headers\": [],\n        \"response\": {\n
  \           \"headers\": [],\n            \"type\": \"UserID\"\n        },\n        \"summary\":
  null\n    },\n    {\n        \"auths\": [],\n        \"description\": null,\n        \"method\":
  \"GET\",\n        \"params\": [\n            {\n                \"name\": \"id\",\n
  \               \"param_type\": \"UserID\",\n                \"type\": \"SingleParam\"\n
  \           }\n        ],\n        \"path\": \"/users/detail\",\n        \"request_body\":
  null,\n        \"request_headers\": [\n            {\n                \"name\":
  \"x-api-key\",\n                \"type\": \"ApiKey\"\n            }\n        ],\n
  \       \"response\": {\n            \"headers\": [],\n            \"type\": \"User\"\n
  \       },\n        \"summary\": null\n    },\n    {\n        \"auths\": [],\n        \"description\":
  null,\n        \"method\": \"GET\",\n        \"params\": [],\n        \"path\":
  \"/transactions/<TransactionID>\",\n        \"request_body\": null,\n        \"request_headers\":
  [],\n        \"response\": {\n            \"headers\": [\n                {\n                    \"name\":
  \"x-request-id\",\n                    \"type\": \"RequestID\"\n                }\n
  \           ],\n            \"type\": \"Transaction\"\n        },\n        \"summary\":
  null\n    },\n    {\n        \"auths\": [\n            \"Basic admin\"\n        ],\n
  \       \"description\": null,\n        \"method\": \"DELETE\",\n        \"params\":
  [],\n        \"path\": \"/admin/users/delete/<[UserID]>\",\n        \"request_body\":
  null,\n        \"request_headers\": [],\n        \"response\": {\n            \"headers\":
  [],\n            \"type\": \"UserID\"\n        },\n        \"summary\": null\n    }\n]\n```\n\n</details>\n\n####
  Writing `HasRoutes` instances for custom combinators:\n\nFor the most part you'll
  be able to use `getRoutes` out of the box, without worrying about `HasRoutes` and
  other internals.\nBut sometimes you'll want to extend `servant` with your own custom
  combinators, writing `HasServer` or `HasClient` for them etc.\nThen you'll also
  need to write a `HasRoutes` instance.\n\nLet's write a `HasRoutes` instance for
  the `Replay` combinator in William Yao's\n[Writing servant combinators for fun and
  profit](https://williamyaoh.com/posts/2023-02-28-writing-servant-combinators.html#:~:text=Example%3A%20Returning%20a%20header%20with%20a%20%22replay%22%20path).\nThe
  `HasServer` instance tells us that the effect of `Replay :> api` is to inherit the
  behaviour of `api`, but add an `X-Replay-Path` header of type `ByteString` to the
  response.\n\nAs far as our `HasRoutes` instance is concerned, this means that we
  need to:\n\n1. Call `getRoutes` on `api` to get the list of un-modified routes\n2.
  Add a `HeaderRep` to the `responseHeaders` field of all the possible responses of
  each route, with name `X-Replay-Path` and type-rep `ByteString`.\n\n```haskell\ndata
  Replay\n\ninstance HasRoutes api => HasRoutes (Replay :> api) where\n  getRoutes
  =\n    let apiRoutes = getRoutes @api\n        replayHeader = mkHeaderRep @\"X-Replay-Path\"
  @ByteString\n        addHeader route = route & routeResponse . unResponses . traversed
  . responseHeaders %~ Set.insert replayHeader\n    in  addHeader <$> apiRoutes\n```\n\nWe
  can test the implementation on `ServantAPI` from above:\n\n```haskell\nghci> BL.putStrLn
  . encodePretty $ getRoutes @(Replay :> ServantAPI)\n```\n\n<details>\n<summary>Click
  to see JSON output</summary>\n\nNote that each route is the same as above, but with
  an extra `response.header` `{\"name\": \"X-Replay-Path\", \"type\": \"ByteString\"}`:\n
  \ \n```json\n[\n    {\n        \"auths\": [],\n        \"description\": null,\n
  \       \"method\": \"GET\",\n        \"params\": [],\n        \"path\": \"/users/list\",\n
  \       \"request_body\": null,\n        \"request_headers\": [],\n        \"response\":
  {\n            \"headers\": [\n                {\n                    \"name\":
  \"X-Replay-Path\",\n                    \"type\": \"ByteString\"\n                }\n
  \           ],\n            \"type\": \"[User]\"\n        },\n        \"summary\":
  null\n    },\n    {\n        \"auths\": [],\n        \"description\": null,\n        \"method\":
  \"POST\",\n        \"params\": [],\n        \"path\": \"/users/create\",\n        \"request_body\":
  \"UserCreateData\",\n        \"request_headers\": [],\n        \"response\": {\n
  \           \"headers\": [\n                {\n                    \"name\": \"X-Replay-Path\",\n
  \                   \"type\": \"ByteString\"\n                }\n            ],\n
  \           \"type\": \"UserID\"\n        },\n        \"summary\": null\n    },\n
  \   {\n        \"auths\": [],\n        \"description\": null,\n        \"method\":
  \"GET\",\n        \"params\": [\n            {\n                \"name\": \"id\",\n
  \               \"param_type\": \"UserID\",\n                \"type\": \"SingleParam\"\n
  \           }\n        ],\n        \"path\": \"/users/detail\",\n        \"request_body\":
  null,\n        \"request_headers\": [\n            {\n                \"name\":
  \"x-api-key\",\n                \"type\": \"ApiKey\"\n            }\n        ],\n
  \       \"response\": {\n            \"headers\": [\n                {\n                    \"name\":
  \"X-Replay-Path\",\n                    \"type\": \"ByteString\"\n                }\n
  \           ],\n            \"type\": \"User\"\n        },\n        \"summary\":
  null\n    },\n    {\n        \"auths\": [],\n        \"description\": null,\n        \"method\":
  \"GET\",\n        \"params\": [],\n        \"path\": \"/transactions/<TransactionID>\",\n
  \       \"request_body\": null,\n        \"request_headers\": [],\n        \"response\":
  {\n            \"headers\": [\n                {\n                    \"name\":
  \"X-Replay-Path\",\n                    \"type\": \"ByteString\"\n                },\n
  \               {\n                    \"name\": \"x-request-id\",\n                    \"type\":
  \"RequestID\"\n                }\n            ],\n            \"type\": \"Transaction\"\n
  \       },\n        \"summary\": null\n    },\n    {\n        \"auths\": [\n            \"Basic
  admin\"\n        ],\n        \"description\": null,\n        \"method\": \"DELETE\",\n
  \       \"params\": [],\n        \"path\": \"/admin/users/delete/<[UserID]>\",\n
  \       \"request_body\": null,\n        \"request_headers\": [],\n        \"response\":
  {\n            \"headers\": [\n                {\n                    \"name\":
  \"X-Replay-Path\",\n                    \"type\": \"ByteString\"\n                }\n
  \           ],\n            \"type\": \"UserID\"\n        },\n        \"summary\":
  null\n    }\n]\n```\n\n</details>\n\n\n## Back story\n\nThe scenario I described
  in [Motivation](#motivation) arose while I was working with @asheshambasta at [CentralApp](https://www.centralapp.com/),\none
  of my freelancing clients. The CentralApp backend is a distributed system comprising
  of 565 Servant endpoints across 7 different services\n(plus several more services
  that aren't using Servant). Many of these endpoints are deeply nested, and as anyone
  familiar with Servant knows, debugging\nerror messages can be very frustrating.
  The best solution to this problem is to use [NamedRoutes](https://hackage.haskell.org/package/servant/docs/Servant-API.html#t:NamedRoutes)\nand
  derive `HasServer` instances using `Generic`. I took on the task of refactoring
  _every one_ of those 565 endpoints to use `NamedRoutes` instead of\n`:<|>` and `:>`.\n\nNot
  only was this process fiddly and tedious, it was also potentially error-prone. The
  type-checker helps, of course, and will let you know if you accidentally\nswapped
  2 handler functions. However, what if you miss out or misspell a path part (e.g.
  `\"api\" :> ...`)? These have no effect on the `ServerT` instances, and thus\ncan't
  be caught by the type-checker. We wouldn't know if we made this kind of error until
  after deployment, when an endpoint would suddenly be at completely the wrong location,\nor
  expecting `QueryParam`s with the names switched round, or many other bugs caused
  by human error.\n\nHaving worked with [servant-openapi3](https://hackage.haskell.org/package/servant-openapi3),
  I got the idea for a much simpler version in order to solve the above problem.\nIf
  I could use a similar mechanism to convert API types to term-level values describing
  the shape and semantics of all the routes of the API, I could compare the\nrepresentation
  _before_ and _after_ the refactoring. If the lists of routes were identical, and
  assuming my representation of the routes was accurate and expressive enough,\nI
  could be confident that I wasn't introducing any subtle bugs.\n\nFortunately, this
  approach worked! After refactoring those 565 endpoints to use `NamedRoutes`, I ran
  `getRoutes` and compared the output to the output from the commit _before_\nthe
  refactor. I used [jdiff](https://github.com/networktocode/jdiff) to compare the
  outputs in JSON form. The comparison revealed that _one_ endpoint had a subtle bug:\nit
  was missing a path part, as described above. And the type-checker didn't catch the
  mistake, which confirmed the need for this package!\nHaving fixed the mistake, I
  deployed the refactoring without a single issue.\n"
description-type: markdown
hash: 1ea9089da4da253f249dd550efb8f93af97781e39273c01573e41ac91ed17a46
homepage: https://github.com/fpringle/servant-routes
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: freddyjepringle@gmail.com
synopsis: Generate route descriptions from Servant APIs
test-bench-deps:
  QuickCheck: '>=2.14 && <2.15'
  aeson: '>=2.0 && <2.3'
  aeson-pretty: '>=0.8.8 && <0.9'
  base: '>=4.13 && <5'
  containers: '>=0.6 && <0.8'
  hspec: '>=2.9 && <2.12'
  http-types: '>=0.12 && <0.13'
  microlens: '>=0.4.9 && <0.5'
  microlens-th: '>=0.4.3 && <0.5'
  servant: '>=0.17 && <0.21'
  servant-routes: '>=0'
  text: '>=1.2 && <2.2'
