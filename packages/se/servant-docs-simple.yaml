all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
author: kwannoel
basic-deps:
  aeson: '>=1.4.2 && <1.6'
  aeson-pretty: '>=0.8.7 && <0.9'
  base: '>=4.11.1.0 && <5'
  bytestring: '>=0.10.8.2 && <0.12'
  prettyprinter: '>=1.6 && <1.8'
  servant: '>=0.15 && <0.19'
  text: '>=1.2.3.1 && <1.3'
changelog: "# Changelog\n\n[The latest version of this document is on GitHub.](https://github.com/Holmusk/servant-docs-simple/blob/master/CHANGELOG.md)\n\n##
  0.1.0.0\n\n* Initially created.\n\n## 0.2.0.0\n\n* Use OMap as underlying representation
  for intermediate documentation structure. \n\n* Expose HasDocumentApi typeclass
  to allow custom API type combinator parsing.\n\n## 0.2.0.1\n\n* Update CHANGELOG,
  README\n\n## 0.3.0.0\n\n* Add markdown support\n\n* Update typeclass names in `Servant.Docs.Simple.Parse`:\n\n
  \ `HasParsable` -> `HasParsableApi`\n  \n  `HasDocumentApi` -> `HasParsableEndpoint`\n
  \ \n  `parse` -> `parseApi`\n\n## 0.4.0.0\n\n* Improve how type-level lists are
  rendered.\n    Instead of \"Format: ': * JSON ('[] *)\"\n    you'll get \"Format:
  [JSON]\"\n\n* Fix bug when any given API combinator would only be rendered once
  per endpoint\n\n* API change: removed `toDetails` function. Use `Details` constructor
  directly instead.\n"
changelog-type: markdown
description: "# servant-docs-simple\n\n[![Build status](https://github.com/holmusk/servant-docs-simple/workflows/CI/badge.svg)](https://github.com/holmusk/servant-docs-simple/actions)\n[![Hackage](https://img.shields.io/hackage/v/servant-docs-simple.svg?logo=haskell)](https://hackage.haskell.org/package/servant-docs-simple)\n[![Stackage
  Lts](http://stackage.org/package/servant-docs-simple/badge/lts)](http://stackage.org/lts/package/servant-docs-simple)\n[![Stackage
  Nightly](http://stackage.org/package/servant-docs-simple/badge/nightly)](http://stackage.org/nightly/package/servant-docs-simple)\n[![MIT
  license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\n# Introduction\n\nThis
  library uses [Data.Typeable](http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Typeable.html)\nto
  generate documentation for [Servant](https://hackage.haskell.org/package/servant)
  API types.\n\n\nIt relies on the `typeRep` of Servant's combinators and other datatypes
  used in\nthe API to generate the documentation.\n\n**Why do we need this?**\n\n\n1)
  We need the `API Format types` inside the documentation. They can be used as keys\n
  \  to look up examples, fields, and other miscellaneous details.\n\n2) We want to
  generate an overview of our endpoints from the information our\n   `API` type provides,
  without having to write instances.\n\n[**In-depth explanation here**](https://github.com/Holmusk/servant-docs-simple#faq)\n\n[**Tutorials**](https://github.com/Holmusk/servant-docs-simple#tutorials)\n\n#
  Example usage\n\n**Using this script**\n\n``` haskell\n-- stack runghc --package
  servant-docs-simple\n{-# LANGUAGE DataKinds        #-}\n{-# LANGUAGE TypeApplications
  #-}\n{-# LANGUAGE TypeOperators    #-}\n\n\nmodule Main where\n\nimport Servant.API
  ((:>), Post, ReqBody)\nimport Servant.Docs.Simple (writeDocsJson, rriteDocsPlainText)\n\n--
  Our API type\ntype API = \"hello\" :> \"world\" :> Request :> Response\ntype Request
  = ReqBody '[()] ()\ntype Response = Post '[()] ()\n\nmain :: IO ()\nmain = do\n
  \ -- Writes to the file $PWD/docs.json\n  writeDocsJson @API \"docs.json\"\n\n  --
  Writes to the file $PWD/docs.txt\n  writeDocsPlainText @API \"docs.txt\"\n\n```\n\n**Expected
  Output**\n\n*Files should be generated relative to `$PWD`*\n\n``` sh\n$ ls | grep
  docs\ndocs.json\ndocs.txt\n```\n\n*docs.json*\n\n``` json\n{\n    \"/hello/world\":
  {\n        \"Response\": {\n            \"Format\": \"[()]\",\n            \"ContentType\":
  \"()\"\n        },\n        \"RequestType\": \"'POST\",\n        \"RequestBody\":
  {\n            \"Format\": \"[()]\",\n            \"ContentType\": \"()\"\n        }\n
  \   }\n}\n```\n\n*docs.txt*\n\n``` text\n/hello/world:\nRequestBody:\n    Format:
  [()]\n    ContentType: ()\nRequestType: 'POST\nResponse:\n    Format: [()]\n    ContentType:
  ()\n```\n\n# Tutorials\n\n**Click on these links for tutorials**\n\n[Generating
  plaintext/JSON documentation from api types](https://github.com/Holmusk/servant-docs-simple/blob/master/examples/generate.hs)\n\n[Generating
  the intermediate documentation structure](https://github.com/Holmusk/servant-docs-simple/blob/master/examples/parse.hs)\n\n[Writing
  our own rendering format](https://github.com/Holmusk/servant-docs-simple/blob/master/examples/render.hs)\n\n[Parsing
  custom API combinators](https://github.com/Holmusk/servant-docs-simple/blob/master/examples/custom.hs)\n\n**To
  run tutorial scripts**\n\n``` sh\n# clone this repository\ngit clone git@github.com:Holmusk/servant-docs-simple.git\n\n#
  run the examples\nstack examples/<source file>\n```\n\n# FAQ\n\n**What's the usecase
  for this?**\n\n1) Lightweight documentation solution by providing an overview of
  endpoints.\n\n2) Keeping documentation for types in one place\n\n    Suppose we
  have a library of format types. These are shared between different\n    languages
  and formats. If we centralize all the information in this\n    library, we have
  one source of truth.\n\n    ``` haskell\n    --                                           ---
  Format Types ---\n    --                                          |                    |\n
  \   --                                          v                    v\n    type
  SingleAPI = \"hello\" :> ReqBody '[JSON] User :> POST '[JSON] Message\n    data
  User = User Name Password deriving Typeable \n    data Messsage = Message Id Content
  deriving Typeable\n\n    ```\n\n    We use these format types in our `API` as illustrated
  above.\n    Developers can use these format types to index the library, to find
  information\n    (examples, instances, ...) they need about the type.\n\n**What
  is required to achieve this?**\n\n1) We need documentation to be generated from
  the API type, without writing\nextra instances for each **format type** we use.\n\n
  \   We can do this with `typeRep` from `Data.Typeable`.\n\n    ``` sh\n    $ stack
  ghci\n    Prelude> import Data.Typeable\n    Prelude Data.Typeable> data Alignment
  = Good | Bad deriving Typeable\n    Prelude Data.Typeable> typeRep (Proxy :: Proxy
  Alignment)\n    Alignment\n    ```\n\n2) We need access to the API format types
  (`Email`, `Users`, ...) in documentation.\n\n   This is so we can index our library
  with these types to get the relevant\n   fields, examples for these.\n\n**How does
  our usecase differ from Servant.Docs?**\n\n1) `Servant.Docs` generates documentation
  only if `Format Types` have\n  implemented the necessary instances.\n\n    ``` haskell\n
  \   -- Instances for format types; they provide examples for format types\n\n    instance
  ToSample User where\n        toSamples _ = <some example>\n\n    instance ToSample
  Message where\n        toSamples _ = <some example>\n    ```\n\n    Hence, we cannot
  generate documentation solely from the `Format Type`.\n\n2) In documentation generated
  by `Servant.Docs`, the format types mentioned above (`User`,\n`Message`) are not
  included. This means we can't use them to index our library\nto look for the relevant
  information.\n\n**What are the trade-offs?**\n\n1) Currently `Servant.Docs.Simple`
  does not support as many formats as\n`Servant.Docs` (via `Servant.Docs.Pandoc`).\n\n2)
  Examples are not mandatory as you do not have to write instances for your format\ntypes.\n\n
  \   This means that **if developers don't provide examples**, the generated\n    documentation
  would be **without them**.\n\n    We can still provide these examples through:\n\n
  \   - The shared library of types\n\n    - Using `Servant combinators` such as `Summary`
  and `Description`.\n      These are generated as part of Documentation through `Servant.Docs.Simple`.\n"
description-type: markdown
hash: c4625bf5082a878f92886a4aa9e944180ee766c9298e334366550482b4857c60
homepage: https://github.com/Holmusk/servant-docs-simple
latest: 0.4.0.0
license-name: MIT
maintainer: Holmusk <tech@holmusk.com>
synopsis: Generate endpoints overview for Servant API
test-bench-deps:
  aeson: '>=1.4.2 && <1.6'
  base: '>=4.11.1.0 && <5'
  hspec: '>=2.7.1 && <2.9'
  hspec-core: '>=2.7.1 && <2.9'
  raw-strings-qq: '>=1.1 && <1.2'
  servant: '>=0.15 && <0.19'
  servant-docs-simple: '>=0'
