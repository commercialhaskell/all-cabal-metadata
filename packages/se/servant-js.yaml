all-versions:
- '0.5'
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- '0.8'
- 0.8.1
- '0.9'
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.3.1
- 0.9.3.2
- 0.9.4
- 0.9.4.1
- 0.9.4.2
author: Servant Contributors
basic-deps:
  aeson: '>=1.4.1.0 && <1.5'
  base: '>=4.9 && <4.20'
  base-compat: '>=0.10.5 && <0.14'
  charset: '>=0.3.7.1 && <0.4'
  filepath: '>=1'
  lens: '>=4.17 && <5.3'
  servant: '>=0.15 && <0.21'
  servant-foreign: '>=0.15 && <0.17'
  servant-js: '>=0'
  servant-server: '>=0'
  stm: '>=0'
  text: '>=1.2.3.0 && <1.3 || >=2.0 && <2.2'
  transformers: '>=0'
  warp: '>=0'
changelog: |
  0.9.4.2
  -------

  * relax version bounds (for support of ghc-8.10.1)

  0.9.4.1
  -------

  * `servant-0.15` support

  0.9.3
  -----

  * Remove check of responseType in vanilla backend
    ([#13](https://github.com/haskell-servant/servant-js/pull/13), [#14](https://github.com/haskell-servant/servant-js/issues/14))

  0.9.2
  -----

  * Fix code generation for query flag
    ([#11](https://github.com/haskell-servant/servant-js/issues/11))
  * Improve error handling in vanilla backend
    ([#9](https://github.com/haskell-servant/servant-js/pull/9))

  0.9.1
  -----

  * Fix javascript function name generation
  * Allow servant-0.10

  0.5
  ----

  * Extract javascript-obvlious types and helpers to *servant-foreign*
  * Use `text` package instead of `String`
  * Provide new targets for code generation along with the old jQuery one: vanilla Javascript and Angular.js
  * Greatly simplify usage of this library by reducing down the API to just 2 functions: `jsForAPI` and `writeJSForAPI` + the choice of a code generator
  * Support for the `HttpVersion`, `IsSecure`, `RemoteHost` and `Vault` combinators
  * Remove matrix params.

  0.4
  ---
  * `Delete` now is like `Get`, `Post`, `Put`, and `Patch` and returns a response body
  * Extend `HeaderArg` to support more advanced HTTP header handling (https://github.com/haskell-servant/servant-jquery/pull/6)
  * Support content-type aware combinators (but require that endpoints support JSON)
  * Add support for Matrix params (https://github.com/haskell-servant/servant-jquery/pull/11)
  * Add functions that directly generate the Javascript code from the API type without having to manually pattern match on the result.

  0.2.2
  -----

  * Fix an issue where toplevel Raw endpoints would generate a JS function with no name (https://github.com/haskell-servant/servant-jquery/issues/2)
  * Replace dots by _ in paths (https://github.com/haskell-servant/servant-jquery/issues/1)
changelog-type: markdown
description: |
  # servant-js

  ![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)

  This library lets you derive automatically Javascript functions that let you query each endpoint of a *servant* webservice.

  It contains a powerful system allowing you to generate functions for several frameworks (Angular, AXios, JQuery) as well as
  vanilla (framework-free) javascript code.

  ## Example

  Read more about the following example [here](https://github.com/haskell-servant/servant-js/tree/master/examples).

  ``` haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE TypeOperators #-}
  {-# LANGUAGE DeriveGeneric #-}
  {-# LANGUAGE GeneralizedNewtypeDeriving #-}

  import Control.Concurrent.STM
  import Control.Monad.IO.Class
  import Data.Aeson
  import Data.Proxy
  import GHC.Generics
  import Network.Wai.Handler.Warp (run)
  import Servant
  import Servant.JS
  import System.FilePath

  -- * A simple Counter data type
  newtype Counter = Counter { value :: Int }
    deriving (Generic, Show, Num)

  instance ToJSON Counter

  -- * Shared counter operations

  -- Creating a counter that starts from 0
  newCounter :: IO (TVar Counter)
  newCounter = newTVarIO 0

  -- Increasing the counter by 1
  counterPlusOne :: MonadIO m => TVar Counter -> m Counter
  counterPlusOne counter = liftIO . atomically $ do
    oldValue <- readTVar counter
    let newValue = oldValue + 1
    writeTVar counter newValue
    return newValue

  currentValue :: MonadIO m => TVar Counter -> m Counter
  currentValue counter = liftIO $ readTVarIO counter

  -- * Our API type
  type TestApi = "counter" :> Post '[JSON] Counter -- endpoint for increasing the counter
            :<|> "counter" :> Get  '[JSON] Counter -- endpoint to get the current value

  type TestApi' = TestApi -- The API we want a JS handler for
             :<|> Raw     -- used for serving static files

  -- this proxy only targets the proper endpoints of our API,
  -- not the static file serving bit
  testApi :: Proxy TestApi
  testApi = Proxy

  -- this proxy targets everything
  testApi' :: Proxy TestApi'
  testApi' = Proxy

  -- * Server-side handler

  -- where our static files reside
  www :: FilePath
  www = "examples/www"

  -- defining handlers
  server :: TVar Counter -> Server TestApi
  server counter = counterPlusOne counter     -- (+1) on the TVar
              :<|> currentValue counter       -- read the TVar

  server' :: TVar Counter -> Server TestApi'
  server' counter = server counter
               :<|> serveDirectory www         -- serve static files

  runServer :: TVar Counter -- ^ shared variable for the counter
            -> Int          -- ^ port the server should listen on
            -> IO ()
  runServer var port = run port (serve testApi' $ server' var)

  main :: IO ()
  main = do
    -- write the JS code to www/api.js at startup
    writeJSForAPI testApi jquery (www </> "api.js")

    -- setup a shared counter
    cnt <- newCounter

    -- listen to requests on port 8080
    runServer cnt 8080
  ```
description-type: markdown
hash: aa675b06e43c3182b6eb4efe44d0ab88334ce4fd89c31fec61582d2870893c16
homepage: http://haskell-servant.readthedocs.org/
latest: 0.9.4.2
license-name: BSD-3-Clause
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: Automatically derive javascript functions to query servant webservices.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  base-compat: '>=0'
  hspec: '>=2.6.0 && <2.12'
  hspec-expectations: '>=0'
  language-ecmascript: '>=0.16'
  lens: '>=0'
  servant: '>=0'
  servant-js: '>=0'
  text: '>=0'
