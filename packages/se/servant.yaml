all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.4
- 0.4.4.2
- 0.4.4.3
- 0.4.4.4
- 0.4.4.5
- 0.4.4.6
- 0.4.4.7
- '0.5'
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- '0.8'
- 0.8.1
- '0.9'
- 0.9.0.1
- 0.9.1
- 0.9.1.1
- '0.10'
- '0.11'
- '0.12'
- 0.12.1
- '0.13'
- 0.13.0.1
- '0.14'
- 0.14.1
- '0.15'
- '0.16'
- 0.16.0.1
- 0.16.1
- 0.16.2
- '0.17'
- '0.18'
- 0.18.1
- 0.18.2
- 0.18.3
- '0.19'
- 0.19.1
- '0.20'
- 0.20.1
- 0.20.2
author: Servant Contributors
basic-deps:
  QuickCheck: '>=2.12.6.1 && <2.16'
  aeson: '>=1.4.1.0 && <2.3'
  attoparsec: '>=0.13.2.2 && <0.15'
  base: '>=4.14 && <4.21'
  bifunctors: '>=5.5.3 && <5.7'
  bytestring: '>=0.10.8.1 && <0.13'
  case-insensitive: '>=1.2.0.11 && <1.3'
  constraints: '>=0.2'
  containers: '>=0.6 && <0.8'
  deepseq: '>=1.4.2.0 && <1.6'
  http-api-data: '>=0.4.1 && <0.7'
  http-media: '>=0.7.1.3 && <0.9'
  http-types: '>=0.12.2 && <0.13'
  mmorph: '>=1.1.2 && <1.3'
  mtl: ^>=2.2.2 || ^>=2.3.1
  network-uri: '>=2.6.1.0 && <2.7'
  singleton-bool: '>=0.1.4 && <0.2'
  sop-core: '>=0.4.0.0 && <0.6'
  text: '>=1.2.3.0 && <2.2'
  transformers: '>=0.5.2.0 && <0.7'
  vault: '>=0.3.1.2 && <0.4'
changelog: "[The latest version of this document is on GitHub.](https://github.com/haskell-servant/servant/blob/master/servant/CHANGELOG.md)\n\nPackage
  versions follow the [Package Versioning Policy](https://pvp.haskell.org/): in A.B.C,
  bumps to either A or B represent major versions.\n\n0.20.2\n----\n- Full query string
  helpers [#1604](https://github.com/haskell-servant/servant/pull/1604)\n\n  This
  PR introduces `DeepQuery`, a route combinator that implements a pattern commonly
  known as deep objects.\n  It builds upon the convention of using `[]` for a list
  of parameters: \n  `books?filter[search]=value&filter[author][name]=value`.\n  The
  corresponding type would be `DeepQuery \"filter\" BookQuery :> Get '[JSON] [Book]`.\n-
  Add IsIn instance for NamedRoutes [#1707](https://github.com/haskell-servant/servant/pull/1707)\n-
  Renamed `AtLeastOneFragment` type class to `AtMostOneFragment` [#1727](https://github.com/haskell-servant/servant/pull/1727)\n\n
  \ The previously named `AtLeastOneFragment` type class defined in the\n  `Servant.API.TypeLevel`
  module has been renamed to `AtMostOneFragment`,\n  since the previous name was misleading.\n-
  Use `Header'` in response headers. [#1697](https://github.com/haskell-servant/servant/pull/1697)\n\n
  \ Use `Header'` instead of `Header` in response, so it's possible to provide\n  `Description`,
  for example:\n\n  ```\n  type PaginationTotalCountHeader =\n    Header'\n      '[
  Description \"Indicates to the client total count of items in collection\"\n       ,
  Optional\n       , Strict\n       ]\n      \"Total-Count\"\n      Int\n  ```\n\n
  \ Note: if you want to add header with description you should use `addHeader'`\n
  \ or `noHeader'` which accepts `Header'` with all modifiers.\n\n\n0.20.1\n----\n\n-
  Support aeson-2.2 [#1695](https://github.com/haskell-servant/servant/pull/1695)\n\n0.20\n----\n\n-
  Headers support in UVerb responses [#1570](https://github.com/haskell-servant/servant/issues/1570)
  [#1571](https://github.com/haskell-servant/servant/pull/1571)\n- Generalize type
  of `Servant.Types.SourceT.source` to any foldable [#1593](https://github.com/haskell-servant/servant/pull/1593)\n-
  Make `Mime(Un)Render PlainText String` instances encode/decode UTF-8 [#1645](https://github.com/haskell-servant/servant/issues/1645)\n-
  Add HasStatus instance for Headers (that defers StatusOf to underlying value) [#1649](https://github.com/haskell-servant/servant/pull/1649)\n-
  Make fromSourceIO run in IO [#1661](https://github.com/haskell-servant/servant/pull/1661)\n\n
  \ Some streaming abstractions, like io-streams, require stateful\n  initialization.
  Since all actual call sites of `fromSourceIO`\n  are in a context where `IO` actions
  can be executed, these\n  streaming sources can be accomodated by having letting\n
  \ `fromSourceIO` run in `IO`.\n\n  To migrate your existing `FromSourceIO` instance,
  simply put\n  a `pure`/`return` in front of it.\n\n- Fix the handling of multiple
  headers with the same name. [#1666](https://github.com/haskell-servant/servant/pull/1666)\n\n0.19.1\n------\n\nCompatibility
  with GHC 9.4, see [PR #1592](https://github.com/haskell-servant/servant/pull/1592).\n\n0.19\n----\n\n###
  Significant changes\n\n- Drop support for GHC < 8.6.\n- Support GHC 9.0 (GHC 9.2
  should work as well, but isn't fully tested yet).\n- Support Aeson 2 ([#1475](https://github.com/haskell-servant/servant/pull/1475)),\n
  \ which fixes a [DOS vulnerability](https://github.com/haskell/aeson/issues/864)\n
  \ related to hash collisions.\n- Add `NamedRoutes` combinator, making support for
  records first-class in Servant\n  ([#1388](https://github.com/haskell-servant/servant/pull/1388)).\n
  \n  Users can now directly mark part as an API as defined by a record, instead of\n
  \ using `(:<|>)` to combine routes. Concretely, the anonymous:\n  \n  ```haskell\n
  \ type API = \n    \"version\" :> Get '[JSON] String :<|>\n    \"products\" :> Get
  '[JSON] [Product]\n  ```\n  \n  can be replaced with the explicitly-named:\n  \n
  \ ```haskell\n  type API = NamedRoutes NamedAPI\n  data NamedAPI mode = NamedAPI\n
  \   { version :: mode :- \"version\" :> Get '[JSON] String\n    , products :: mode
  :- \"products\" :> Get '[JSON] [Product]\n    }\n  ```\n \n  `NamedRoutes` builds
  upon `servant-generic`, but improves usability by freeing\n  users from the need
  to perform `toServant` / `fromServant` conversions\n  manually. Serving `NamedRoutes
  NamedAPI` is now done directly by providing a\n  record of handlers, and servant
  generates clients directly as records as well.\n  In particular, it makes it much
  more practical to work with nested hierarchies\n  of named routes.\n\n  Two convenience
  functions, `(//)` and `(/:)`, have been added to make the\n  usage of named route
  hierarchies more pleasant:\n  \n  ```haskell\n  rootClient :: RootApi (AsClientT
  ClientM)\n  rootClient = client (Proxy @API)\n\n  helloClient :: String -> ClientM
  String\n  helloClient name = rootClient // hello /: name\n\n  endpointClient ::
  ClientM Person\n  endpointClient = rootClient // subApi /: \"foobar123\" // endpoint\n\n
  \ type Api = NamedRoutes RootApi\n\n  data RootApi mode = RootApi\n    { subApi
  :: mode :- Capture \"token\" String :> NamedRoutes SubApi\n    , hello :: mode :-
  Capture \"name\" String :> Get '[JSON] String\n    , …\n    } deriving Generic\n\n
  \ data SubApi mode = SubApi\n    { endpoint :: mode :- Get '[JSON] Person\n    ,
  …\n    } deriving Generic\n  ```\n  \n- Add custom type errors for partially applied
  combinators\n  ([#1289](https://github.com/haskell-servant/servant/pull/1289),\n
  \ [#1486](https://github.com/haskell-servant/servant/pull/1486)).\n \n  For example,
  forgetting to document the expected type for a query parameter,\n  as in:\n \n  ```
  haskell\n  type API = QueryParam \"param\" :> Get '[JSON] NoContent\n  ```\n  \n
  \ will raise to the following error when trying to serve the API:\n\n  ```\n    •
  There is no instance for HasServer (QueryParam'\n                                            '[Optional,
  Strict] \"param\" :> ...)\n      QueryParam' '[Optional, Strict] \"1\" expects 1
  more arguments\n  ```\n  \n  As a consequence of this change, unsaturated types
  are now forbidden before `(:>)`.\n  \n- Add a `HeadNoContent` verb ([#1502](https://github.com/haskell-servant/servant/pull/1502)).\n\n-
  *servant-client* / *servant-client-core* / *servant-http-streams*:\n  Fix erroneous
  behavior, where only 2XX status codes would be considered\n  successful, irrelevant
  of the status parameter specified by the verb\n  combinator. ([#1469](https://github.com/haskell-servant/servant/pull/1469))\n\n-
  *servant-client* / *servant-client-core*: Fix `Show` instance for\n  `Servant.Client.Core.Request`.\n
  \n \n- *servant-client* / *servant-client-core*: Allow passing arbitrary binary
  data\n  in Query parameters.\n  ([#1432](https://github.com/haskell-servant/servant/pull/1432)).\n\n-
  *servant-docs*: Generate sample cURL requests\n  ([#1401](https://github.com/haskell-servant/servant/pull/1401/files)).\n\n
  \ Breaking change: requires sample header values to be supplied with `headers`.\n
  \ \n### Other changes\n\n- Various bit rotten cookbooks have been updated and re-introduced
  on\n  [docs.servant.dev](https://docs.servant.dev).\n\n- Various version bumps.\n\n0.18.3\n------\n\n###
  Significant changes\n\n- Add response header support to UVerb (#1420).\n- Use Capture
  Description if available (#1423).\n\n### Other changes\n\n- Support GHC-9.0.1.\n-
  Bump `bytestring`, `attoparsec`, `hspec` and `singleton-bool` dependencies.\n\n0.18.2\n------\n\n###
  Significant changes\n\n- Introduce `Fragment` combinator.\n- Fix `MimeRender` and
  `MimeUnrender` instances for `WithStatus`.\n\n0.18.1\n------\n\n### Significant
  changes\n\n- Union verbs\n\n### Other changes\n\n- Bump \"tested-with\" ghc versions\n-
  Allow newer dependencies\n\n0.18\n----\n\n### Significant changes\n\n- Support for
  ghc8.8 (#1318, #1326, #1327)\n\n- Configurable error messages for automatic errors
  thrown by servant,\n  like \"no route\" or \"could not parse json body\" (#1312,
  #1326, #1327)\n\n### Other changes\n\n- Witness that a type-level natural number
  corresponds to a HTTP\n  status code (#1310)\n\n- Improve haddocs (#1279)\n\n- Dependency
  management (#1269, #1293, #1286, #1287)\n\n\n0.17\n----\n\n### Significant changes\n\n-
  Add NoContentVerb [#1028](https://github.com/haskell-servant/servant/issues/1028)
  [#1219](https://github.com/haskell-servant/servant/pull/1219) [#1228](https://github.com/haskell-servant/servant/pull/1228)\n\n
  \ The `NoContent` API endpoints should now use `NoContentVerb` combinator.\n  The
  API type changes are usually of the kind\n\n  ```diff\n  - :<|> PostNoContent '[JSON]
  NoContent\n  + :<|> PostNoContent\n  ```\n\n  i.e. one doesn't need to specify the
  content-type anymore. There is no content.\n\n- `Capture` can be `Lenient` [#1155](https://github.com/haskell-servant/servant/issues/1155)
  [#1156](https://github.com/haskell-servant/servant/pull/1156)\n\n  You can specify
  a lenient capture as\n\n  ```haskell\n  :<|> \"capture-lenient\"  :> Capture' '[Lenient]
  \"foo\" Int :> GET\n  ```\n\n  which will make the capture always succeed. Handlers
  will be of the\n  type `Either String CapturedType`, where `Left err` represents\n
  \ the possible parse failure.\n\n- *servant-client* Added a function to create Client.Request
  in ClientEnv [#1213](https://github.com/haskell-servant/servant/pull/1213) [#1255](https://github.com/haskell-servant/servant/pull/1255)\n\n
  \ The new member `makeClientRequest` of `ClientEnv` is used to create\n  `http-client`
  `Request` from `servant-client-core` `Request`.\n  This functionality can be used
  for example to set\n  dynamic timeouts for each request.\n\n- *servant-server* use
  queryString to parse QueryParam, QueryParams and QueryFlag [#1249](https://github.com/haskell-servant/servant/pull/1249)
  [#1262](https://github.com/haskell-servant/servant/pull/1262)\n\n  Some APIs need
  query parameters rewriting, e.g. in order to support\n   for multiple casing (camel,
  snake, etc) or something to that effect.\n\n  This could be easily achieved by using
  WAI Middleware and modifying\n  request's `Query`. But QueryParam, QueryParams and
  QueryFlag use\n  `rawQueryString`. By using `queryString` rather then `rawQueryString`\n
  \ we can enable such rewritings.\n\n- *servant* *servant-server* Make packages `build-type:
  Simple` [#1263](https://github.com/haskell-servant/servant/pull/1263)\n\n  We used
  `build-type: Custom`, but it's problematic e.g.\n  for cross-compiling. The benefit
  is small, as the doctests\n  can be run other ways too (though not so conveniently).\n\n-
  *servant* Remove deprecated modules [1268#](https://github.com/haskell-servant/servant/pull/1268)\n\n
  \ - `Servant.Utils.Links` is `Servant.Links`\n  - `Servant.API.Internal.Test.ComprehensiveAPI`
  is `Servant.Test.ComprehensiveAPI`\n\n### Other changes\n\n- *servant-client* *servant-client-core*
  *servant-http-streams* Fix Verb with headers checking content type differently [#1200](https://github.com/haskell-servant/servant/issues/1200)
  [#1204](https://github.com/haskell-servant/servant/pull/1204)\n\n  For `Verb`s with
  response `Headers`, the implementation didn't check\n  for the content-type of the
  response. Now it does.\n\n- *servant-docs* Merge documentation from duplicate routes
  [#1240](https://github.com/haskell-servant/servant/issues/1240) [#1241](https://github.com/haskell-servant/servant/pull/1241)\n\n
  \ Servant supports defining the same route multiple times with different\n  content-types
  and result-types, but servant-docs was only documenting\n  the first of copy of
  such duplicated routes. It now combines the\n  documentation from all the copies.\n\n
  \ Unfortunately, it is not yet possible for the documentation to specify\n  multiple
  status codes.\n\n- Add sponsorship button [#1190](https://github.com/haskell-servant/servant/pull/1190)\n\n
  \ [Well-Typed](https://www.well-typed.com/) is a consultancy which could help you
  with `servant` issues\n  (See consultancies section on https://www.servant.dev/).\n\n-
  Try changelog-d for changelog management [#1230](https://github.com/haskell-servant/servant/pull/1230)\n\n
  \ Check the [CONTRIBUTING.md](https://github.com/haskell-servant/servant/blob/master/CONTRIBUTING.md)
  for details\n\n- CI and testing tweaks. [#1154](https://github.com/haskell-servant/servant/pull/1154)
  [#1157](https://github.com/haskell-servant/servant/pull/1157) [#1182](https://github.com/haskell-servant/servant/pull/1182)
  [#1214](https://github.com/haskell-servant/servant/pull/1214) [#1229](https://github.com/haskell-servant/servant/pull/1229)
  [#1233](https://github.com/haskell-servant/servant/pull/1233) [#1242](https://github.com/haskell-servant/servant/pull/1242)
  [#1247](https://github.com/haskell-servant/servant/pull/1247) [#1250](https://github.com/haskell-servant/servant/pull/1250)
  [#1258](https://github.com/haskell-servant/servant/pull/1258)\n\n  We are experiencing
  some bitrotting of cookbook recipe dependencies,\n  therefore some of them aren't
  build as part of our CI anymore.\n\n- New cookbook recipes [#1088](https://github.com/haskell-servant/servant/pull/1088)
  [#1171](https://github.com/haskell-servant/servant/pull/1171) [#1198](https://github.com/haskell-servant/servant/pull/1198)\n\n
  \ - [OIDC Recipe](#TODO)\n  - [MySQL Recipe](#TODO)\n\n- *servant-jsaddle* Progress
  on servant-jsaddle [#1216](https://github.com/haskell-servant/servant/pull/1216)\n-
  *servant-docs* Prevent race-conditions in testing [#1194](https://github.com/haskell-servant/servant/pull/1194)\n-
  *servant-client* *servant-http-streams* `HasClient` instance for `Stream` with `Headers`
  [#1170](https://github.com/haskell-servant/servant/issues/1170) [#1197](https://github.com/haskell-servant/servant/pull/1197)\n-
  *servant* Remove unused extensions from cabal file [#1201](https://github.com/haskell-servant/servant/pull/1201)\n-
  *servant-client* Redact the authorization header in Show and exceptions [#1238](https://github.com/haskell-servant/servant/pull/1238)\n-
  Dependency upgrades [#1173](https://github.com/haskell-servant/servant/pull/1173)
  [#1181](https://github.com/haskell-servant/servant/pull/1181) [#1183](https://github.com/haskell-servant/servant/pull/1183)
  [#1188](https://github.com/haskell-servant/servant/pull/1188) [#1224](https://github.com/haskell-servant/servant/pull/1224)
  [#1245](https://github.com/haskell-servant/servant/pull/1245) [#1257](https://github.com/haskell-servant/servant/pull/1257)\n-
  Documentation updates [#1162](https://github.com/haskell-servant/servant/pull/1162)
  [#1174](https://github.com/haskell-servant/servant/pull/1174) [#1175](https://github.com/haskell-servant/servant/pull/1175)
  [#1234](https://github.com/haskell-servant/servant/pull/1234) [#1244](https://github.com/haskell-servant/servant/pull/1244)
  [#1247](https://github.com/haskell-servant/servant/pull/1247)\n\n\n0.16.2\n------\n\n*
  `singleton-bool-0.1.5` (`SBool` is re-exported)\n    - Add `discreteBool :: Dec
  (a :~: b)` (GHC-7.8+)\n    - Add `Show`, `Eq`, `Ord` `SBool b` instances.\n* dependencies
  update\n\n0.16.1\n------\n\n* Add `Semigroup` and `Monoid` `SourceT` instances\n
  \ [#1158](https://github.com/haskell-servant/servant/pull/1158)\n  [#1159](https://github.com/haskell-servant/servant/pull/1159)\n*
  Use `http-api-data-0.4.1`\n  [#1181](https://github.com/haskell-servant/servant/pull/1181)\n*
  Allow newer dependencies\n\n0.16.0.1\n--------\n\n- Make tests work with `http-media-0.8`\n\n0.16\n----\n\n###
  Significant changes\n\n- Rename `ServantError` to `ClientError`, `ServantErr` to
  `ServerError`\n  [#1131](https://github.com/haskell-servant/servant/pull/1131)\n-
  *servant-client-core* Rearrange modules. No more `Internal` modules, whole\n  API
  is versioned.\n  [#1130](https://github.com/haskell-servant/servant/pull/1130)\n-
  *servant-http-streams* New package\n  [#1117](https://github.com/haskell-servant/servant/pull/1117)\n-
  *servant-client-core* `RequestBody` is now\n\n    ```haskell\n    = RequestBodyLBS
  LBS.ByteString\n    | RequestBodyBS BS.ByteString\n    | RequestBodySource (SourceIO
  LBS.ByteString)\n    ```\n\n  i.e. no more replicates `http-client`s API.\n  [#1117](https://github.com/haskell-servant/servant/pull/1117)\n\n-
  *servant-client-core* Keep structured exceptions in `ConnectionError`\n  constructor
  of `ClientError`\n  [#1115](https://github.com/haskell-servant/servant/pull/1115)\n\n
  \   ```diff\n    -| ConnectionError Text\n    +| ConnectionError SomeException\n
  \   ```\n\n- *servant-client-core* Preserve failing request in `FailureResponse`\n
  \ constructor of `ClientError`\n  [#1114](https://github.com/haskell-servant/servant/pull/1114)\n\n
  \   ```diff\n    -FailureResponse Response\n    +-- | The server returned an error
  response including the\n    +-- failing request. 'requestPath' includes the 'BaseUrl'
  and the\n    +-- path of the request.\n    +FailureResponse (RequestF () (BaseUrl,
  BS.ByteString)) Response\n    ```\n\n- *servant-client* Fix (implement) `StreamBody`
  instance\n  [#1110](https://github.com/haskell-servant/servant/pull/1110)\n\n###
  Other changes\n\n- *servant-client* Update CookieJar with intermediate request/responses
  (redirects)\n  [#1104](https://github.com/haskell-servant/servant/pull/1104)\n-
  *servant-server* Reorder HTTP failure code priorities\n  [#1103](https://github.com/haskell-servant/servant/pull/1103)\n-
  *servant-server* Re-organise internal modules\n  [#1139](https://github.com/haskell-servant/servant/pull/1139)\n-
  Allow `network-3.0`\n  [#1107](https://github.com/haskell-servant/servant/pull/1107)\n-
  Add `NFData NoContent` instance\n  [#1090](https://github.com/haskell-servant/servant/pull/1090)\n\n-
  Documentation updates\n  [#1127](https://github.com/haskell-servant/servant/pull/1127)\n
  \ [#1124](https://github.com/haskell-servant/servant/pull/1124)\n  [#1098](https://github.com/haskell-servant/servant/pull/1098)\n\n-
  CI updates\n  [#1123](https://github.com/haskell-servant/servant/pull/1123)\n  [#1121](https://github.com/haskell-servant/servant/pull/1121)\n
  \ [#1119](https://github.com/haskell-servant/servant/pull/1119)\n\n0.15\n----\n\n###
  Significant changes\n\n- Streaming refactoring.\n  [#991](https://github.com/haskell-servant/servant/pull/991)\n
  \ [#1076](https://github.com/haskell-servant/servant/pull/1076)\n  [#1077](https://github.com/haskell-servant/servant/pull/1077)\n\n
  \ The streaming functionality (`Servant.API.Stream`) is refactored to use\n  `servant`'s
  own `SourceIO` type (see `Servant.Types.SourceT` documentation),\n  which replaces
  both `StreamGenerator` and `ResultStream` types.\n\n  New conversion type-classes
  are `ToSourceIO` and `FromSourceIO`\n  (replacing `ToStreamGenerator` and `BuildFromStream`).\n
  \ There are instances for *conduit*, *pipes* and *machines* in new packages:\n  [servant-conduit](https://hackage.haskell.org/package/servant-conduit)\n
  \ [servant-pipes](https://hackage.haskell.org/package/servant-pipes) and\n  [servant-machines](https://hackage.haskell.org/package/servant-machines)\n
  \ respectively.\n\n  Writing new framing strategies is simpler. Check existing strategies
  for examples.\n\n  This change shouldn't affect you, if you don't use streaming
  endpoints.\n\n- *servant-client* Separate streaming client.\n  [#1066](https://github.com/haskell-servant/servant/pull/1066)\n\n
  \ We now have two `http-client` based clients,\n  in `Servant.Client` and `Servant.Client.Streaming`.\n\n
  \ Their API is the same, except for\n  - `Servant.Client` **cannot** request `Stream`
  endpoints.\n  - `Servant.Client` is *run* by direct\n    `runClientM :: ClientM
  a -> ClientEnv -> IO (Either ServantError a)`\n  - `Servant.Client.Streaming` **can**
  request `Stream` endpoints.\n  - `Servant.Client.Streaming` is *used* by CPSised\n
  \   `withClientM :: ClientM a -> ClientEnv -> (Either ServantError a -> IO b) ->
  IO b`\n\n  To access `Stream` endpoints use `Servant.Client.Streaming` with\n  `withClientM`;
  otherwise you can continue using `Servant.Client` with `runClientM`.\n  You can
  use both too, `ClientEnv` and `BaseUrl` types are same for both.\n\n  **Note:**
  `Servant.Client.Streaming` doesn't *stream* non-`Stream` endpoints.\n  Requesting
  ordinary `Verb` endpoints (e.g. `Get`) will block until\n  the whole response is
  received.\n\n  There is `Servant.Client.Streaming.runClientM` function, but it has\n
  \ restricted type. `NFData a` constraint prevents using it with\n  `SourceT`, `Conduit`
  etc. response types.\n\n  ```haskell\n  runClientM :: NFData a => ClientM a -> ClientEnv
  -> IO (Either ServantError a)\n  ```\n\n  This change shouldn't affect you, if you
  don't use streaming endpoints.\n\n- *servant-client-core* Related to the previous:\n
  \ `streamingResponse` is removed from `RunClient`.\n  We have a new type-class:\n\n
  \ ```haskell\n  class RunClient m =>  RunStreamingClient m where\n      withStreamingRequest
  :: Request -> (StreamingResponse -> IO a) ->  m a\n  ```\n\n- Drop support for GHC
  older than 8.0\n  [#1008](https://github.com/haskell-servant/servant/pull/1008)\n
  \ [#1009](https://github.com/haskell-servant/servant/pull/1009)\n\n- *servant* `ComprehensiveAPI`
  is a part of public API in `Servant.Test.ComprehensiveAPI` module.\n  This API type
  is used to verify that libraries implement all core combinators.\n  Now we won't
  change this type between major versions.\n  (This has been true for some time already).\n
  \ [#1070](https://github.com/haskell-servant/servant/pull/1070)\n\n- *servant* Remove
  `Servant.Utils.Enter` module\n  (deprecated in `servant-0.12` in favour of `hoistServer`)\n
  \ [#996](https://github.com/haskell-servant/servant/pull/996)\n\n- *servant-foreign*
  Add support so `HasForeign` can be implemented for\n  `MultipartForm` from [`servant-multipart`](http://hackage.haskell.org/package/servant-multipart)\n
  \ [#1035](https://github.com/haskell-servant/servant/pull/1035)\n\n### Other changes\n\n-
  *servant-client-core* Add `NFData (GenResponse a)` and `NFData ServantError` instances.\n
  \ [#1076](https://github.com/haskell-servant/servant/pull/1076)\n\n- *servant* NewlineFraming
  encodes newline after each element (i.e last)\n  [#1079](https://github.com/haskell-servant/servant/pull/1079)\n
  \ [#1011](https://github.com/haskell-servant/servant/issues/1011)\n\n- *servant*
  Add `lookupResponseHeader :: ... => Headers headers r -> ResponseHeader h a`\n  [#1064](https://github.com/haskell-servant/servant/pull/1064)\n\n-
  *servant-server* Add `MonadMask Handler`\n  [#1068](https://github.com/haskell-servant/servant/pull/1068)\n\n-
  *servant-docs* Fix markdown indentation\n  [#1043](https://github.com/haskell-servant/servant/pull/1043)\n\n-
  *servant* Export `GetHeaders'`\n  [#1052](https://github.com/haskell-servant/servant/pull/1052)\n\n-
  *servant* Add `Bitraversable` and other `Bi-` instances for `:<|>`\n  [#1032](https://github.com/haskell-servant/servant/pull/1032)\n\n-
  *servant* Add `PutCreated` method type alias\n  [#1024](https://github.com/haskell-servant/servant/pull/1024)\n\n-
  *servant-client-core* Add `aeson` and `Lift BaseUrl` instances\n  [#1037](https://github.com/haskell-servant/servant/pull/1037)\n\n-
  *servant* Add `ToSourceIO (NonEmpty a)` instance\n  [#988](https://github.com/haskell-servant/servant/pull/988)\n\n-
  Development process improvements\n    - Apply `stylish-haskell` to all modules\n
  \     [#1001](https://github.com/haskell-servant/servant/pull/1001)\n    - Amend
  `CONTRIBUTING.md`\n      [#1036](https://github.com/haskell-servant/servant/pull/1036)\n
  \   - `servant-docs` has golden tests for `ComprehensiveAPI`\n      [#1071](https://github.com/haskell-servant/servant/pull/1071)\n
  \   - Other\n      [#1039](https://github.com/haskell-servant/servant/pull/1039)\n
  \     [#1046](https://github.com/haskell-servant/servant/pull/1046)\n      [#1062](https://github.com/haskell-servant/servant/pull/1062)\n
  \     [#1069](https://github.com/haskell-servant/servant/pull/1069)\n      [#985](https://github.com/haskell-servant/servant/pull/985)\n\n-
  *Documentation* Tutorial and new recipes\n    - [Using free client](https://docs.servant.dev/en/latest/cookbook/using-free-client/UsingFreeClient.html)\n
  \     [#1005](https://github.com/haskell-servant/servant/pull/1005)\n    - [Generating
  mock curl calls](https://docs.servant.dev/en/latest/cookbook/curl-mock/CurlMock.html)\n
  \     [#1033](https://github.com/haskell-servant/servant/pull/1033)\n    - [Error
  logging with Sentry](https://docs.servant.dev/en/latest/cookbook/sentry/Sentry.html)\n
  \     [#987](https://github.com/haskell-servant/servant/pull/987)\n    - [Hoist
  Server With Context for Custom Monads](https://docs.servant.dev/en/latest/cookbook/hoist-server-with-context/HoistServerWithContext.html)\n
  \     [#1044](https://github.com/haskell-servant/servant/pull/1044)\n    - [How
  To Test Servant Applications](https://docs.servant.dev/en/latest/cookbook/testing/Testing.html)\n
  \     [#1050](https://github.com/haskell-servant/servant/pull/1050)\n    - `genericServeT`:
  using custom monad with `Servant.API.Generic`\n      in [Using generics](https://docs.servant.dev/en/latest/cookbook/generic/Generic.html)\n
  \     [#1058](https://github.com/haskell-servant/servant/pull/1058)\n    - Tutorial\n
  \     [#974](https://github.com/haskell-servant/servant/pull/974)\n      [#1007](https://github.com/haskell-servant/servant/pull/1007)\n
  \   - miscellanea: fixed typos etc.\n      [#1030](https://github.com/haskell-servant/servant/pull/1030)\n
  \     [#1020](https://github.com/haskell-servant/servant/pull/1020)\n      [#1059](https://github.com/haskell-servant/servant/pull/1059)\n\n-
  *Documentation* README\n  [#1010](https://github.com/haskell-servant/servant/pull/1010)\n\n-
  *servant-client-ghcjs* updates. **note** package is not released on Hackage\n  [#938](https://github.com/haskell-servant/servant/pull/938)\n\n0.14.1\n------\n\n-
  Merge in (and slightly refactor) `servant-generic`\n  (by [Patrick Chilton](https://github.com/chpatrick))\n
  \ into `servant` (`Servant.API.Generic`),\n  `servant-client-code` (`Servant.Client.Generic`)\n
  \ and `servant-server` (`Servant.Server.Generic`).\n\n- Deprecate `Servant.Utils.Links`,
  use `Servant.Links`.\n  [#998](https://github.com/haskell-servant/servant/pull/998)\n\n-
  *servant-server* Deprecate `Servant.Utils.StaticUtils`, use `Servant.Server.StaticUtils`.\n\n0.14\n----\n\n###
  Significant changes\n\n- `Stream` takes a status code argument\n\n  ```diff\n  -Stream
  method        framing ctype a\n  +Stream method status framing ctype a\n  ```\n\n
  \ ([#966](https://github.com/haskell-servant/servant/pull/966)\n   [#972](https://github.com/haskell-servant/servant/pull/972))\n\n-
  `ToStreamGenerator` definition changed, so it's possible to write an instance\n
  \ for conduits.\n\n  ```diff\n  -class ToStreamGenerator f a where\n  -   toStreamGenerator
  :: f a -> StreamGenerator a\n  +class ToStreamGenerator a b | a -> b where\n  +
  \  toStreamGenerator :: a -> StreamGenerator b\n  ```\n\n  ([#959](https://github.com/haskell-servant/servant/pull/959))\n\n-
  Added `NoFraming` streaming strategy\n  ([#959](https://github.com/haskell-servant/servant/pull/959))\n\n-
  *servant-client-core* Free `Client` implementation.\n  Useful for testing `HasClient`
  instances.\n  ([#920](https://github.com/haskell-servant/servant/pull/920))\n\n-
  *servant-client-core* Add `hoistClient` to `HasClient`.\n  Just like `hoistServer`
  allows us to change the monad in which request handlers\n  of a web application
  live, we also have `hoistClient` for changing the monad\n  in which *client functions*
  live.\n  Read [tutorial section for more information](https://docs.servant.dev/en/release-0.14/tutorial/Client.html#changing-the-monad-the-client-functions-live-in).\n
  \ ([#936](https://github.com/haskell-servant/servant/pull/936))\n\n  iF you have
  own combinators, you'll need to define a new method of\n  `HasClient` class, for
  example:\n\n  ```haskell\n  type Client m (MyCombinator :> api) = MyValue :> Client
  m api\n  hoistClientMonad pm _ nt cl = hoistClientMonad pm (Proxy :: Proxy api)
  nt . cl\n  ```\n\n- *servant* Add `safeLink' :: (Link -> a) -> ... -> MkLink endpoint
  a`,\n  which allows to create helpers returning something else than `Link`.\n  ([#968](https://github.com/haskell-servant/servant/pull/968))\n\n-
  *servant-server* File serving in polymorphic monad.\n  i.e. Generalised types of
  `serveDirectoryFileServer` etc functions in\n  `Servant.Utils.StaticFiles`\n  ([#953](https://github.com/haskell-servant/servant/pull/953))\n\n-
  *servant-server* `ReqBody` content type check is recoverable.\n  This allows writing
  APIs like:\n\n  ```haskell\n        ReqBody '[JSON] Int      :> Post '[PlainText]
  Int\n  :<|>  ReqBody '[PlainText] Int :> Post '[PlainText] Int\n  ```\n\n  which
  is useful when handlers are subtly different,\n  for example may do less work.\n
  \ ([#937](https://github.com/haskell-servant/servant/pull/937))\n\n- *servant-client*
  Add more constructors to `RequestBody`, including\n  `RequestBodyStream`.\n  *Note:*
  we are looking for http-library agnostic API,\n  so the might change again soon.\n
  \ Tell us which constructors are useful for you!\n  ([#913](https://github.com/haskell-servant/servant/pull/913))\n\n###
  Other changes\n\n- `GetHeaders` instances implemented without `OverlappingInstances`\n
  \ ([#971](https://github.com/haskell-servant/servant/pull/971))\n\n- Added tests
  or enabled tests\n  ([#975](https://github.com/haskell-servant/servant/pull/975))\n\n-
  Add [pagination cookbook recipe](https://docs.servant.dev/en/release-0.14/cookbook/pagination/Pagination.html)\n
  \ ([#946](https://github.com/haskell-servant/servant/pull/946))\n\n- Add [`servant-flatten`
  \"spice\" to the structuring api recipe](https://docs.servant.dev/en/release-0.14/cookbook/structuring-apis/StructuringApis.html)\n
  \ ([#929](https://github.com/haskell-servant/servant/pull/929))\n\n- Dependency
  updates\n  ([#900](https://github.com/haskell-servant/servant/pull/900)\n   [#919](https://github.com/haskell-servant/servant/pull/919)\n
  \  [#924](https://github.com/haskell-servant/servant/pull/924)\n   [#943](https://github.com/haskell-servant/servant/pull/943)\n
  \  [#964](https://github.com/haskell-servant/servant/pull/964)\n   [#967](https://github.com/haskell-servant/servant/pull/967)\n
  \  [#976](https://github.com/haskell-servant/servant/pull/976))\n\n- Documentation
  updates\n   [#963](https://github.com/haskell-servant/servant/pull/963)\n   [#960](https://github.com/haskell-servant/servant/pull/960)\n
  \  [#908](https://github.com/haskell-servant/servant/pull/908)\n   [#958](https://github.com/haskell-servant/servant/pull/958)\n
  \  [#948](https://github.com/haskell-servant/servant/pull/948)\n   [#928](https://github.com/haskell-servant/servant/pull/928)\n
  \  [#921](https://github.com/haskell-servant/servant/pull/921))\n\n- Development
  process improvements\n  ([#680](https://github.com/haskell-servant/servant/pull/680)\n
  \  [#917](https://github.com/haskell-servant/servant/pull/917)\n   [#923](https://github.com/haskell-servant/servant/pull/923)\n
  \  [#961](https://github.com/haskell-servant/servant/pull/961)\n   [#973](https://github.com/haskell-servant/servant/pull/973))\n\n###
  Note\n\n(VIM) Regular-expression to link PR numbers: `s/\\v#(\\d+)/[#\\1](https:\\/\\/github.com\\/haskell-servant\\/servant\\/pull\\/\\1)/`\n\n0.13.0.1\n--------\n\n-
  Support `base-compat-0.10`\n\n0.13\n----\n\n### Significant changes\n\n- Streaming
  endpoint support.\n  ([#836](https://github.com/haskell-servant/servant/pull/836))\n\n
  \ ```haskell\n  type StreamApi f = \"streamGetNewline\" :> StreamGet NewlineFraming
  JSON (f Person)\n  ```\n\n  See tutorial for more details\n  - [A web API as a type
  - StreamGet and StreamPost](http://docs.servant.dev/en/release-0.13/tutorial/ApiType.html#streamget-and-streampost)\n
  \ - [Serving an API - streaming endpoints](http://docs.servant.dev/en/release-0.13/tutorial/Server.html#streaming-endpoints)\n
  \ - [Querying an API - Querying Streaming APIs](http://docs.servant.dev/en/release-0.13/tutorial/Client.html#querying-streaming-apis)\n\n-
  *servant* Add `Servant.API.Modifiers`\n  ([#873](https://github.com/haskell-servant/servant/pull/873)\n
  \  [#903](https://github.com/haskell-servant/servant/pull/903))\n\n  `QueryParam`,
  `Header` and `ReqBody` understand modifiers:\n  - `Required` or `Optional` (resulting
  in `a` or `Maybe a` in handlers)\n  - `Strict` or `Lenient` (resulting in `a` or
  `Either String a` in handlers)\n\n  Also you can use `Description` as a modifier,
  but it doesn't yet work\n  with `servant-docs`, only `servant-swagger`. [There is
  an issue.](https://github.com/haskell-servant/servant/issues/902)\n\n- *servant-client*
  Support `http-client`’s `CookieJar`\n  ([#897](https://github.com/haskell-servant/servant/pull/897)\n
  \  [#883](https://github.com/haskell-servant/servant/pull/883))\n\n  `ClientM` preserves
  cookies between requests,\n  if given initial `CookieJar`.\n  To migrate from older
  code, change `ClientEnv` constructor\n  to `mkClientEnv` which makes `ClientEnv`
  without `CookieJar`.\n\n- *servant* Mono-kind-ise modifiers, resulting in better
  error messages.\n  ([#887](https://github.com/haskell-servant/servant/issues/887)\n
  \  [#890](https://github.com/haskell-servant/servant/pull/890))\n\n- *servant* Add
  `TypeError ... => HasServer`s instances in GHC-8.2 for\n  not saturated modifiers
  (`Capture \"foo\" :> ...`) or `->` in place of `:>`.\n  ([#893](https://github.com/haskell-servant/servant/pull/893))\n\n-
  *Cookbook* example projects at\n  http://docs.servant.dev/en/master/cookbook/index.html\n
  \ ([#867](https://github.com/haskell-servant/servant/pull/867)\n   [#892](https://github.com/haskell-servant/servant/pull/882))\n\n-
  *Experimental work* `servant-client-ghcjs`\n  ([#818](https://github.com/haskell-servant/servant/pull/818)\n
  \  [#869](https://github.com/haskell-servant/servant/pull/869))\n\n### Other changes\n\n-
  *servant* Links aren't double escaped\n  ([#878](https://github.com/haskell-servant/servant/pull/878))\n\n-
  Dependency updates\n  ([#900](https://github.com/haskell-servant/servant/pull/900)\n
  \  [#898](https://github.com/haskell-servant/servant/pull/898)\n   [#895](https://github.com/haskell-servant/servant/pull/895)\n
  \  [#872](https://github.com/haskell-servant/servant/pull/872))\n\n- Documentation
  updates\n  ([#875](https://github.com/haskell-servant/servant/pull/875)\n   [#861](https://github.com/haskell-servant/servant/pull/861))\n\n-
  Refactorings\n  ([#899](https://github.com/haskell-servant/servant/pull/899)\n   [#896](https://github.com/haskell-servant/servant/pull/896)\n
  \  [#889](https://github.com/haskell-servant/servant/pull/889)\n   [#891](https://github.com/haskell-servant/servant/pull/891)\n
  \  [#892](https://github.com/haskell-servant/servant/pull/892)\n   [#885](https://github.com/haskell-servant/servant/pull/885))\n\n0.12.1\n------\n\n###
  Bug fixes\n\n- Prevent double-escaping in link segments\n  ([#835](https://github.com/haskell-servant/servant/issues/835)\n
  \  [#878](https://github.com/haskell-servant/servant/pull/878))\n\n0.12\n---\n\n###
  Significant changes\n\n- *servant-client* *servant-client-core*\n  Factored out
  of `servant-client` all the functionality that was\n  independent of the `http-client`
  backend.\n  ([#803](https://github.com/haskell-servant/servant/pull/803)\n   [#821](https://github.com/haskell-servant/servant/issues/821))\n\n
  \ If you have own combinators, you'll need to add an additional `m` argument\n  in
  `HasClient`, `Client` and `clientWithRoute`:\n\n  ```diff\n  -class HasClient api\n
  \ -  type Client (api :: *) :: *\n  -  clientWithRoute :: Proxy api -> Req -> Client
  api\n  +class HasClient m api\n  +  type Client (m :: * -> *) (api :: *) :: *\n
  \ +  clientWithRoute :: Proxy m -> Proxy api -> Request -> Client m api\n  ```\n\n
  \ See https://github.com/haskell-servant/servant-auth/pull/67/commits/f777818e3cc0fa3ed2346baff8328e96d62b1790
  for a real world example.\n\n- *servant-server* Added `hoistServer` member to the
  `HasServer` class, which is `HasServer`\n  specific `enter`.\n  ([#804](https://github.com/haskell-servant/servant/pull/804)\n
  \  [#824](https://github.com/haskell-servant/servant/pull/824))\n\n  `enter` isn't
  exported from `Servant` module anymore. You can change\n  `enter` to `hoistServer`
  in a straight forward way.\n  Unwrap natural transformation and add an api type
  `Proxy`:\n\n  ```diff\n  -server = enter (NT nt) impl\n  +server = hoistServer (Proxy
  :: Proxy MyApi) nt impl\n  ```\n\n  If you have own combinators, you'll need to
  define a new method of\n  `HasServer` class, for example:\n\n  ```haskell\n  type
  ServerT (MyCombinator :> api) m = MyValue -> ServerT api m\n  hoistServerWithContext
  _ pc nt s = hoistServerWithContext (Proxy :: Proxy api) pc nt . s\n  ```\n\n  See
  https://github.com/haskell-servant/servant-auth/pull/67/commits/8ee3b6315247ac076516213fd7cfcdbfdb583ac9
  for a real world example.\n\n- Add `Description` and `Summary` combinators\n  ([#767](https://github.com/haskell-servant/servant/pull/767))\n\n
  \ It's possible to annotate endpoints with free form text.\n  This information is
  used by e.g. by `servant-swagger`, see screenshot in\n  https://github.com/phadej/servant-swagger-ui\n\n-
  Lower `:>` and `:<|>` infix precedence to 4 and 3 respectively\n  ([#761](https://github.com/haskell-servant/servant/issues/761))\n\n
  \ This shouldn't affect you, except if you define your own infix operators\n  for
  Servant type-level DSL.\n\n### Other changes\n\n- *servant-foreign* Derive `Data`
  for all types\n  ([#809](https://github.com/haskell-servant/servant/pull/809))\n-
  *servant-docs* Add authentication lenses\n  ([#787](https://github.com/haskell-servant/servant/pull/787))\n-
  *servant-docs* Generated markdown improvements\n  ([#813](https://github.com/haskell-servant/servant/pull/787)\n
  \  [#767](https://github.com/haskell-servant/servant/pull/767)\n   [#790](https://github.com/haskell-servant/servant/pull/790)\n
  \  [#788](https://github.com/haskell-servant/servant/pull/788))\n- Add `addLinks`
  to generate all links for unnested APIs.\n  ([#851](https://github.com/haskell-servant/servant/pull/851))\n-
  Allow newest dependencies\n ([#772](https://github.com/haskell-servant/servant/pull/772)\n
  \ [#842](https://github.com/haskell-servant/servant/pull/842))\n- Documentation
  improvements and typo fixes\n ([#757](https://github.com/haskell-servant/servant/pull/757)\n
  \ [#771](https://github.com/haskell-servant/servant/pull/771)\n  [#775](https://github.com/haskell-servant/servant/pull/775)\n
  \ [#790](https://github.com/haskell-servant/servant/pull/790)\n  [#791](https://github.com/haskell-servant/servant/pull/791)\n
  \ [#806](https://github.com/haskell-servant/servant/pull/806))\n- Development process
  improvements\n  ([#764](https://github.com/haskell-servant/servant/pull/764)\n   [#839](https://github.com/haskell-servant/servant/pull/839))\n\n0.11\n----\n\n###
  Breaking changes\n\n- `Enter` refactored\n  ([#734](https://github.com/haskell-servant/servant/issues/734)\n
  \ , [#736](https://github.com/haskell-servant/servant/pull/736))\n\n### Other changes\n\n-
  Add a type representing an empty API\n  ([#753](https://github.com/haskell-servant/servant/pull/753))\n-
  Add `linkURI'` and `Link` accessors\n  ([#745](https://github.com/haskell-servant/servant/pull/745)\n
  \ , [#717](https://github.com/haskell-servant/servant/pull/717)\n  , [#715](https://github.com/haskell-servant/servant/issues/715))\n-
  Prepare for GHC-8.2\n  ([#722](https://github.com/haskell-servant/servant/pull/722))\n-
  Add `HasLink AuthProtect` instance\n  ([#720](https://github.com/haskell-servant/servant/pull/720))\n-
  `AllCTRender [] ()` `TypeError` (use `NoContent`)\n  ([#671](https://github.com/haskell-servant/servant/pull/671))\n-
  Documentation improvements and typo fixes\n  ([#702](https://github.com/haskell-servant/servant/pull/702)\n
  \ , [#709](https://github.com/haskell-servant/servant/pull/709)\n  , [#716](https://github.com/haskell-servant/servant/pull/716)\n
  \ , [#725](https://github.com/haskell-servant/servant/pull/725)\n  , [#727](https://github.com/haskell-servant/servant/pull/727))\n\n0.10\n----\n\n###
  Breaking changes\n\n* Use `NT` from `natural-transformation` for `Enter`\n  ([#616](https://github.com/haskell-servant/servant/issues/616))\n\n*
  Change to `MkLink (Verb ...) = Link` (previously `URI`). To consume `Link`\n  use
  its `ToHttpApiData` instance or `linkURI`.\n  ([#527](https://github.com/haskell-servant/servant/issues/527))\n\n###
  Other changes\n\n* Add `Servant.API.TypeLevel` module with type families to work
  with API types.\n  ([#345](https://github.com/haskell-servant/servant/pull/345)\n
  \ , [#305](https://github.com/haskell-servant/servant/issues/305))\n\n* Default
  JSON content type change to `application/json;charset=utf-8`.\n  ([#263](https://github.com/haskell-servant/servant/issues/263))\n
  \ Related browser bugs:\n  [Chromium](https://bugs.chromium.org/p/chromium/issues/detail?id=438464)
  and\n  [Firefox](https://bugzilla.mozilla.org/show_bug.cgi?id=918742)\n\n* `Accept`
  class may accept multiple content-types. `MimeUnrender` adopted as well.\n  ([#613](https://github.com/haskell-servant/servant/pull/614)\n
  \ , [#615](https://github.com/haskell-servant/servant/pull/615))\n\n0.9.1\n------\n\n*
  Added 'noHeader' function for *not* adding response headers.\n\n0.9\n---\n\n* Added
  Eq, Show, Read, Generic and Ord instances to IsSecure\n* BACKWARDS INCOMPATIBLE:
  replace use of `ToFromByteString` with `To/FromHttpApiData` for `GetHeaders/BuildHeadersTo`\n*
  BACKWARDS INCOMPATIBLE: Moved `From/ToFormUrlEncoded` classes, which were renamed
  to `From/ToForm` to `http-api-data`\n\n0.8.1\n----\n\n* Add `CaptureAll` combinator.
  Captures all of the remaining segments in a URL.\n* Add `Servant.API.TypeLevel`
  module, with frequently used type-level\nfunctionaliy.\n\n0.8\n---\n\n* Minor fixes,
  documentation changes and cabal tweaks\n\n0.7.1\n-----\n\n* Add module `Servant.Utils.Enter`
  (https://github.com/haskell-servant/servant/pull/478)\n* Allow to set the same header
  multiple times in responses.\n\n0.5\n---\n\n* Add `WithNamedConfig` combinator.\n*
  Add `HttpVersion`, `IsSecure`, `RemoteHost` and `Vault` combinators\n* Fix safeLink,
  so Header is not in fact required.\n* Add more instances for (:<|>)\n* Use `http-api-data`
  instead of `Servant.Common.Text`\n* Remove matrix params.\n* Add PlainText String
  MimeRender and MimeUnrender instances.\n* Add new `Verbs` combinator, and make all
  existing and new verb combinators\ntype synonyms of it.\n* Add `BasicAuth` combinator
  to support Basic authentication\n* Add generalized authentication support\n\n0.4.2\n-----\n*
  Fix missing cases for `Patch` in `safeLink`\n\n0.4.1\n-----\n* Allow whitespace
  after parsing JSON\n* Stricter matching for `safeLink` for `Capture`\n\n0.4\n---\n*
  `Delete` now is like `Get`, `Post`, `Put`, and `Patch` and returns a response body\n*
  Multiple content-type/accept support for all the relevant combinators\n* Provide
  *JSON*, *PlainText*, *OctetStream* and *FormUrlEncoded* content types out of the
  box\n* Type-safe link generation to API endpoints\n* Support for the PATCH HTTP
  method\n* Removed the home-made QuasiQuote for writing API types in a more human-friendly
  format until we come up with a better design for it\n* Make most if not all of the
  haddock code examples run through doctest\n* Some general code cleanup\n* Add response
  headers\n"
changelog-type: markdown
description: |-
  A family of combinators for defining webservices APIs and serving them
  .
  You can learn about the basics in the <http://docs.servant.dev/en/stable/tutorial/index.html tutorial>.
  .
  <https://github.com/haskell-servant/servant/blob/master/servant/CHANGELOG.md CHANGELOG>
description-type: haddock
hash: a4613dc1caa40d1b8db7aff00417dc2d651a8d73a90add3d934218b1778df35c
homepage: http://docs.servant.dev/
latest: 0.20.2
license-name: BSD-3-Clause
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: A family of combinators for defining webservices APIs
test-bench-deps:
  QuickCheck: '>=2.12.6.1 && <2.16'
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  hspec: '>=2.6.0 && <2.12'
  http-media: '>=0'
  mtl: '>=0'
  quickcheck-instances: '>=0.3.19 && <0.4'
  servant: '>=0'
  text: '>=0'
