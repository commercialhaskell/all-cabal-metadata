all-versions:
- 0.1.0.0
- 0.1.1.0
author: Isaac Shapira
basic-deps:
  base: '>=4.18.2 && <5'
  bytestring: '>=0.11.5 && <0.12'
  containers: '>=0.6.7 && <0.7'
  safe-coloured-text: '>=0.2.0 && <0.3'
  servant: '>=0.20.1 && <0.21'
  servant-multipart: '>=0.12 && <0.13'
  servant-server: '>=0.20 && <0.21'
  text: '>=2.0.2 && <2.1'
changelog: "# Revision history for servant-lint\n\n## 0.1.1.0 -- 2025-01-16\n\n* **Enhanced
  duplicate detection**: Now catches routes that accept the same type multiple times
  across different combinators (e.g., `Capture \"id\" Int :> ReqBody '[JSON] Int`)\n*
  **QueryParam name validation**: Detects and prevents multiple QueryParam with the
  same name within a route\n* **Improved error messages**: More descriptive error
  messages that explain why duplicates are problematic and include precise emoji indicators
  (\U0001F448) pointing to problematic route components\n* **Comprehensive test coverage**:
  Added extensive tests for both type duplicates and QueryParam name duplicates\n*
  **Updated documentation**: README now includes examples of new duplicate detection
  features\n\n## 0.1.0.1 -- 2024-mm-dd\n\n* Bug fixes and stability improvements\n\n##
  0.1.0.0 -- 2024-mm-dd\n\n* First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "# Servant Lint\n\nIf you have worked with APIs, you have likely encountered
  ambiguous routes. These issues are painful to debug and can present as \"reality
  violations\". Questions like \"Why isn't my handler being called?\" and \"What is
  happening with type marshaling?\" often arise. Additionally, some APIs may promise
  a JSON parsable output while sending zero bytes, leading to further confusion. This
  project aims to detect these kinds of problems in Servant API types.\n\n## Rejections\n\n-
  Straighforward ambiguous overlaps\n- Ambiguous overlaps of Capture and CaptureAll
  with static\n- Ambiguous overlaps of Capture and CaptureAll\n- Ambiguous overlaps
  due to QueryParams\n- No ReqBody with GET requests\n- NoContent must be 204\n- ReqBody
  not adjacent to Verb\n- Duplicate combinator hints\n- 500 as a success response\n-
  Routes accepting the same type multiple times (argument order ambiguity)\n- Multiple
  QueryParam with the same name\n\n## Output Sample\n\n```haskell\ntype API =\n     =
  \"bar\" :> CaptureAll \"murf\" [Int] :> Get '[JSON] ()\n  :<|> \"bar\" :> \"5\"
  :> Get '[JSON] ()\n  :<|> \"bar\" :> Capture \"how\" Int :> Get '[JSON] ()\n  :<|>
  \"bar\" :> \"3\" :> \"2\" :> Get '[JSON] ()\n\nmain :: IO ()\nmain = lintAPI @API\n```\n\nProduces:\n\n>
  NOTE: Output will NOT exactly match your type definition\n\n```\n      Ambiguous
  with \"bar\" :> CaptureAll \"murf\" [Int] :> Verb 'GET 200 ():\n      \t\"bar\"
  :> CaptureAll \"murf\" [Int] :> Verb 'GET 200 () \U0001F448\n      \t\"bar\" :>
  \"5\" :> Verb 'GET 200 () \U0001F448\n      \t\"bar\" :> Capture \"how\" Int :>
  Verb 'GET 200 () \U0001F448\n      \t\"bar\" :> \"3\" :> \"2\" :> Verb 'GET 200
  () \U0001F448\n      \n      Ambiguous with \"bar\" :> \"5\" :> Verb 'GET 200 ():\n
  \     \t\"bar\" :> CaptureAll \"murf\" [Int] :> Verb 'GET 200 () \U0001F448\n      \t\"bar\"
  :> \"5\" :> Verb 'GET 200 () \U0001F448\n      \t\"bar\" :> Capture \"how\" Int
  :> Verb 'GET 200 () \U0001F448\n      \t\"bar\" :> \"3\" :> \"2\" :> Verb 'GET 200
  ()\n      \n      Ambiguous with \"bar\" :> Capture \"how\" Int :> Verb 'GET 200
  ():\n      \t\"bar\" :> CaptureAll \"murf\" [Int] :> Verb 'GET 200 () \U0001F448\n
  \     \t\"bar\" :> \"5\" :> Verb 'GET 200 () \U0001F448\n      \t\"bar\" :> Capture
  \"how\" Int :> Verb 'GET 200 () \U0001F448\n      \t\"bar\" :> \"3\" :> \"2\" :>
  Verb 'GET 200 ()\n      \n      Ambiguous with \"bar\" :> \"3\" :> \"2\" :> Verb
  'GET 200 ():\n      \t\"bar\" :> CaptureAll \"murf\" [Int] :> Verb 'GET 200 () \U0001F448\n
  \     \t\"bar\" :> \"5\" :> Verb 'GET 200 ()\n      \t\"bar\" :> Capture \"how\"
  Int :> Verb 'GET 200 ()\n      \t\"bar\" :> \"3\" :> \"2\" :> Verb 'GET 200 () \U0001F448\n```\n\n\nBut
  with fancy colors:\n\n<img src=\"ambiguous.png\" />\n\n## Duplicate Type Detection\n\nRoutes
  that accept the same type in multiple places can cause argument order confusion:\n\n```haskell\ntype
  BadAPI =\n     \"user\" :> Capture \"id\" Int :> ReqBody '[JSON] Int :> Post '[JSON]
  ()\n  :<|> \"search\" :> Capture \"userId\" String :> QueryParam \"name\" String
  :> Get '[JSON] ()\n\nmain :: IO ()\nmain = lintAPI @BadAPI\n```\n\nProduces:\n\n```\nRoute
  accepts the same type multiple times: Int. This doesn't guarantee argument order
  and can lead to ambiguous behavior:\n\t\"user\" :> Capture \"id\" Int \U0001F448
  :> ReqBody _ _ Int \U0001F448 :> Verb 'POST 200 ()\n\nRoute accepts the same type
  multiple times: [Char]. This doesn't guarantee argument order and can lead to ambiguous
  behavior:\n\t\"search\" :> Capture \"userId\" [Char] \U0001F448 :> QueryParam \"name\"
  [Char] \U0001F448 :> Verb 'GET 200 ()\n```\n\n## Duplicate QueryParam Names\n\nRoutes
  cannot have multiple QueryParam with the same name:\n\n```haskell\ntype BadQueryAPI
  =\n  \"search\" :> QueryParam \"filter\" Int :> QueryParam \"filter\" Bool :> Get
  '[JSON] ()\n\nmain :: IO ()\nmain = lintAPI @BadQueryAPI\n```\n\nProduces:\n\n```\nRoute
  has multiple QueryParam with the same name: filter. QueryParam names must be unique
  within a route:\n\t\"search\" :> QueryParam \"filter\" Int \U0001F448 :> QueryParam
  \"filter\" Bool \U0001F448 :> Verb 'GET 200 ()\n```\n\n## Usage\n\nServant Lint
  is best used in your test suite.\n"
description-type: markdown
hash: 71e01411b5ecbd7882364432219f7d516bf52ac72d78efb09ba7e4142ef6aeed
homepage: ''
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: isaac.shapira@platonic.systems
synopsis: Lint Servant Routes
test-bench-deps:
  base: '>=4.18.2 && <5'
  bytestring: '>=0.11.5 && <0.12'
  containers: '>=0.6.7 && <0.7'
  safe-coloured-text: '>=0.2.0 && <0.3'
  servant: '>=0.20.1 && <0.21'
  servant-multipart: '>=0.12 && <0.13'
  servant-server: '>=0.20 && <0.21'
  sydtest: '>=0'
  text: '>=2.0.2 && <2.1'
