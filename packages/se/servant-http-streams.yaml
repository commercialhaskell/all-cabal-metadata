homepage: http://docs.servant.dev/
changelog-type: markdown
hash: f31a1535a66d97e1aeab416827a6bd573eb4e604a3384d2728a823754f67a4ae
test-bench-deps:
  warp: -any
  tdigest: '>=0.2 && <0.3'
  bytestring: -any
  wai: -any
  stm: -any
  base: -any
  hspec: '>=2.6.0 && <2.9'
  text: -any
  markdown-unlit: -any
  http-api-data: -any
  kan-extensions: -any
  servant-client-core: -any
  entropy: '>=0.4.1.3 && <0.5'
  network: '>=2.8.0.0 && <3.2'
  HUnit: '>=1.6.0.0 && <1.7'
  servant-server: ==0.19.*
  servant: ==0.19.*
  base-compat: -any
  http-streams: -any
  mtl: -any
  transformers: -any
  deepseq: -any
  QuickCheck: '>=2.12.6.1 && <2.15'
  http-types: -any
  servant-http-streams: -any
  aeson: -any
  transformers-compat: -any
maintainer: haskell-servant-maintainers@googlegroups.com
synopsis: Automatic derivation of querying functions for servant
changelog: |2
    [The latest version of this document is on GitHub.](https://github.com/haskell-servant/servant/blob/master/servant-http-streams/CHANGELOG.md)
  [Changelog for `servant` package contains significant entries for all core packages.](https://github.com/haskell-servant/servant/blob/master/servant/CHANGELOG.md)

  0.18.4
  ------

  ### Significant changes

  - *servant-client* / *servant-client-core* / *servant-http-streams*:
    Fix erroneous behavior, where only 2XX status codes would be considered
    successful, irrelevant of the status parameter specified by the verb
    combinator. ([#1469](https://github.com/haskell-servant/servant/pull/1469))

  0.18.3
  ------

  ### Other changes

  - Support GHC-9.0.1.
  - Fix test suite running in CI.
  - Bump `bytestring` and `hspec` dependencies.

  0.18.2
  ------

  ### Significant changes

  - Support `servant-client-core` 0.18.2.

  0.18.1
  ------

  ### Significant changes

  - Union verbs

  ### Other changes

  - Bump "tested-with" ghc versions

  0.18
  ----

  ### Significant changes

  - Support for ghc8.8 (#1318, #1326, #1327)


  0.17
  ----

  ### Significant changes

  - Add NoContentVerb [#1028](https://github.com/haskell-servant/servant/issues/1028) [#1219](https://github.com/haskell-servant/servant/pull/1219) [#1228](https://github.com/haskell-servant/servant/pull/1228)

    The `NoContent` API endpoints should now use `NoContentVerb` combinator.
    The API type changes are usually of the kind

    ```diff
    - :<|> PostNoContent '[JSON] NoContent
    + :<|> PostNoContent
    ```

    i.e. one doesn't need to specify the content-type anymore. There is no content.

  - `Capture` can be `Lenient` [#1155](https://github.com/haskell-servant/servant/issues/1155) [#1156](https://github.com/haskell-servant/servant/pull/1156)

    You can specify a lenient capture as

    ```haskell
    :<|> "capture-lenient"  :> Capture' '[Lenient] "foo" Int :> GET
    ```

    which will make the capture always succeed. Handlers will be of the
    type `Either String CapturedType`, where `Left err` represents
    the possible parse failure.

  ### Other changes

  - *servant-client* *servant-client-core* *servant-http-streams* Fix Verb with headers checking content type differently [#1200](https://github.com/haskell-servant/servant/issues/1200) [#1204](https://github.com/haskell-servant/servant/pull/1204)

    For `Verb`s with response `Headers`, the implementation didn't check
    for the content-type of the response. Now it does.

  - *servant-client* *servant-http-streams* `HasClient` instance for `Stream` with `Headers` [#1170](https://github.com/haskell-servant/servant/issues/1170) [#1197](https://github.com/haskell-servant/servant/pull/1197)
  - *servant-client* Redact the authorization header in Show and exceptions [#1238](https://github.com/haskell-servant/servant/pull/1238)



  0.16.0.1
  --------

  - Allow `base-compat-0.11`

  0.16
  ----

  - Initial release
basic-deps:
  semigroupoids: '>=5.3.1 && <5.4'
  exceptions: '>=0.10.0 && <0.11'
  bytestring: '>=0.10.8.1 && <0.12'
  case-insensitive: -any
  base: '>=4.9 && <4.16'
  time: '>=1.6.0.1 && <1.10'
  text: '>=1.2.3.0 && <1.3'
  http-common: '>=0.8.2.0 && <0.8.3'
  kan-extensions: '>=5.2 && <5.3'
  servant-client-core: '>=0.18.3 && <0.20'
  monad-control: '>=1.0.2.3 && <1.1'
  servant: '>=0.18 && <0.20'
  containers: '>=0.5.7.1 && <0.7'
  base-compat: '>=0.10.5 && <0.12'
  io-streams: '>=1.5.0.1 && <1.6'
  bifunctors: '>=5.5.3 && <5.6'
  http-streams: '>=0.8.6.1 && <0.9'
  mtl: '>=2.2.2 && <2.3'
  transformers-base: '>=0.4.5.2 && <0.5'
  transformers: '>=0.5.2.0 && <0.6'
  deepseq: '>=1.4.2.0 && <1.5'
  http-types: '>=0.12.2 && <0.13'
  http-media: '>=0.7.1.3 && <0.9'
  transformers-compat: '>=0.6.2 && <0.7'
all-versions:
- '0.16'
- 0.16.0.1
- '0.17'
- '0.18'
- 0.18.1
- 0.18.2
- 0.18.3
- 0.18.4
author: Servant Contributors
latest: 0.18.4
description-type: markdown
description: |
  # servant-client

  ![servant](https://raw.githubusercontent.com/haskell-servant/servant/master/servant.png)

  This library lets you automatically derive Haskell functions that let you query each endpoint of a *servant* webservice.

  ## Example

  ``` haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE TypeOperators #-}

  import Data.Proxy
  import Data.Text
  import Servant.API
  import Servant.HttpStreams


  type Book = Text

  type MyApi = "books" :> Get '[JSON] [Book] -- GET /books
          :<|> "books" :> ReqBody '[JSON] Book :> Post '[JSON] Book -- POST /books

  myApi :: Proxy MyApi
  myApi = Proxy

  -- 'client' allows you to produce operations to query an API from a client.
  postNewBook :: Book -> ClientM Book
  getAllBooks :: ClientM [Book]
  (getAllBooks :<|> postNewBook) = client myApi

  -- the IOException happens already in withClientEnvIO
  main' :: IO ()
  main' = do
      let burl = BaseUrl Http "localhost" 8081 ""
      withClientEnvIO burl $ \env -> do
          res <- runClientM getAllBooks env
          case res of
              Left err -> putStrLn $ "Error: " ++ show err
              Right books -> print books

  main :: IO ()
  main = return ()
  ```
license-name: BSD-3-Clause
