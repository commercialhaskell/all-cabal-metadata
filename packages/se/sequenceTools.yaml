all-versions:
- 1.4.0.1
- 1.4.0.2
- 1.4.0.3
- 1.4.0.4
- 1.4.0.5
- 1.5.0
- 1.5.2
- 1.5.3.1
- 1.6.0.0
author: Stephan Schiffels
basic-deps:
  base: '>=4.18.2.1 && <5'
  bytestring: '>=0.11.5.3'
  foldl: '>=1.4.17'
  lens-family: '>=2.1.3'
  optparse-applicative: '>=0.18.1.0'
  pipes: '>=4.3.16'
  pipes-group: '>=1.0.12'
  pipes-ordered-zip: '>=1.2.1'
  pipes-safe: '>=2.3.5'
  prettyprinter: '>=1.7.1'
  random: '>=1.2.1.2'
  sequence-formats: '>=1.11.0.0'
  sequenceTools: '>=0'
  split: '>=0.2.5'
  text: '>=2.0.2'
  transformers: '>=0.6.1.0'
  vector: '>=0.13.1.0'
changelog: "# Changelog\n\n- V 1.6.0.0: \n    - pileupCaller now supports writing
  of VCF (Variant Call Format), via the standard output. See option --vcf and the
  Readme.\n- V 1.5.4.0:\n   - updated sequence-formats dependency allows more lenient
  parsing of pileup-data, now also allowing for arbitrary reference alleles (not just
  ACTGN). This won't affect calling (reads that support an allele that is not in the
  SNP-file input are treated as before), but will be less disruptive when parsing
  pileup-input, for example without a bed-file in samtools.\n   - improved error output
  for parsing problems with pileup-format data. Now only a small part of the problematic
  chunk is output, hopefully easing error interpretation in such cases\n   - output
  a useful error message if the number of samples passed in --sampleNames is inconsistent
  with the pileup-input\n   - `--samplePopName` now accepts multiple pop-names, separated
  by comma. The number of pop-names must then match the number of samples.\n- V 1.5.3.2:
  fixed a bug in vcf2eigenstrat that would fail on VCFs with missing Quality values.\n-
  V 1.5.3.1: updated to latest GHC pedantic compilation\n- V 1.5.3: Upgraded to sequence-formats
  1.7.0 introducing an option for plink popName encoding, and improved pileup-Parsing
  to allow for skip-reference characters\n- V 1.5.2: Fixed a bug with --samplePopName
  having to be entered after -p or -e. Fixed a bug in the sequence-formats dependency.\n-
  V 1.5.1: Added automatic building\n- V 1.5.0: Added support for Plink output\n-
  V 1.4.0.4:\n    * Fixed eigenstrat-output in pileupCaller to add a dot after the
  outputprefix before the file extensions.\n    * Updated haskell-stack wrapper scripts
  for EIGENSOFT and ADMIXTOOLS.\n    * Moved unmaintained scripts into unmaintained
  folder.\n- V 1.4.0.3: Updated to new sequence-formats version, now including reading
  of genetic position from eigenstrat files.\n- V 1.4.0.1: Improved README, fixed
  output bug in genoStats.hs\n- V 1.4.0: Added single strand mode, and new triallelic
  treatment.\n- V 1.3.1: Bumped dependency on sequence-formats to new sequence-formats-1.4.0,
  which includes strand-information in pileup data, as well as rsIds in freqSum to
  output the correct rsId, and an option to parse chromosomes X, Y and MT.\n- V 1.3.0:
  Lots of refactoring. Lots of testing. Removed some features in vcf2eigenstrat and
  in pileupCaller, including the option in pileupCaller to call without a SNP file.\n-
  V 1.2.4: normaliseBimWithVCF is ready.\n- V 1.2.3 : Adapted to newest sequence-formats.
  Had to change all the chromosome-related code to the newType Chrom datatype. Also
  started implementing normaliseBimWithVCF.\n\n"
changelog-type: markdown
description: "# SequenceTools\n\n[Install with Bioconda](https://anaconda.org/bioconda/sequencetools)\n\nThis
  repository contains some programs that I use for processing sequencing data.\n\n#
  Installation\n\n## Installation via precompiled executables\n\n* [Download the latest
  Executable](https://github.com/stschiff/sequenceTools/releases/latest) that best
  matches your platform.\n\nFor example, to install `pileupCaller` in Linux, you can
  run the following commands to get started:\n\n```bash\n# download the current stable
  release binary\nwget https://github.com/stschiff/sequenceTools/releases/latest/download/pileupCaller-linux\n#
  make it executable\nchmod +x pileupCaller-linux\n# run it\n./trident-linux -h\n```\n\n##
  Installation from source\n\n1. Clone the repository: `git clone https://github.com/stschiff/sequenceTools.git`\n2.
  Go into the repository: `cd sequenceTools`\n3. Compile the executables in the repository
  using `stack`: `stack install`\n\nThis last step will take a while, as it not only
  compiles the source, but also first downloads the correct version of the Haskell
  compiler.\n\n# PileupCaller\n\n## Overview\n\nThe main tool in this repository is
  the program `pileupCaller` to sample alleles from low coverage sequence data. The
  first step is to generate a “pileup” file at all positions you wish to genotype.
  To do that, here is a typical command line, which restricts to mapping and base
  quality of 30 and uses a predefined set of positions to generate the pileup for
  (optional, see below):\n\n    samtools mpileup -R -B -q30 -Q30 -l <list_of_positions.txt>
  \\\n        -f <reference_genome.fasta> \\\n        Sample1.bam Sample2.bam Sample3.bam
  > pileup.txt\n\nImportant Note: You should definitely use the `-B` flag, which disables
  base alignment quality recalibration. This mechanism is turned on by default and
  causes huge reference bias with low coverage ancient DNA data. This flag disables
  the mechanism.\n\nIn the above command line, if you use a positions-file, it should
  either contain positions (0-based) or a bed file (see samtools manual for details).
  The output is a simple text file with all positions that could be genotyped in the
  three samples.\n\nNext, you need to run pileupCaller, which you run like this:\n\n
  \   pileupCaller --randomHaploid --sampleNames Sample1,Sample2,Sample3 \\\n        --samplePopName
  MyPop -f <Eigenstrat.snp> \\\n        -e <My_output_prefix> < pileup.txt\n\nHere,
  options `--sampleNames` gives the names of the samples that is output in the Eigenstrat
  `*.ind` file, and and `-–samplePopName` is optional to also give the population
  names in that file (defaults to `Unknown`, you can also change it later in the output).
  Then, (required) option `-f` needs an Eigenstrat positions file. This is required
  for pileupCaller to know what is the reference and which the alternative allele
  in your reference dataset that you want to call. An Eigenstrat positions file is
  a line-based file format, where each line denotes a SNP position, and there are
  exactly six required columns, denoting in order i) SNP ID, ii) chromosome, iii)
  genetic position (can be set to zero), iv) physical position, v) reference allele,
  vi) alternate allele. Here is an example:\n\n    rs0000  11  0.000000    0   A   C\n
  \   rs1111  11  0.001000    100000  A   G\n    rs2222  11  0.002000    200000  A
  \  T\n    rs3333  11  0.003000    300000  C   A\n    rs4444  11  0.004000    400000
  \ G   A\n    rs5555  11  0.005000    500000  T   A\n    rs6666  11  0.006000    600000
  \ G   T\n\nFinally, the `-e` option specifies Eigenstrat as output format and gives
  the prefix for the `*.ind`, `*.pos` and `*.geno` files. Without the `-e` option,
  pileupCaller will output in FreqSum format,  described [here](https://rarecoal-docs.readthedocs.io/en/latest/rarecoal-tools.html#vcf2freqsum),
  which is useful for debugging your pipeline, since it's just a single file that
  is output into the terminal and can therefore easily be inspected.\n\nNote that
  you can also fuse the two steps above into one unix pipe:\n\n    samtools mpileup
  -R -B -q30 -Q30 \\\n        -f <reference_genome.fasta> \\\n        Sample1.bam
  Sample2.bam Sample3.bam | \\\n    pileupCaller --randomHaploid --sampleNames Sample1,Sample2,Sample3
  \\\n        --samplePopName MyPop -f <Eigenstrat.snp> \\\n        -e <My_output_prefix>\n\nHere,
  I omitted the positions-file in the samtools command, because pileupCaller itself
  will ensure filtering for the positions listed in the Eigenstrat-Positions file
  given via option `-f`. Note that `--randomHaploid` is only one way to call genotypes.
  If you need stricter calling, you may want to try `--majorityCall --downSampling
  --minDepth 3`, which calls genotypes only on sites with at least three reads, downsamples
  to three if there are more, and then calls whatever of the two alleles has the majority.
  This will reduce errors, but also yield less data in case of lower coverage.\n            \nYou
  will possibly encounter an issue: If you have aligned your read data to a version
  of the reference genome that uses `chr1`, `chr2` and so on as chromosome names,
  the resulting Eigenstrat file will be valid, but won't merge with other Eigenstrat
  datasets that use chromosome names `1`, `2` and so on. I would therefore recommend
  to strip the `chr` from your chromosome names if necessary. You can do that easily
  using a little UNIX filter using the `sed` tool. In the full pipeline, it looks
  like this:\n\n    samtools mpileup -R -B -q30 -Q30 \\\n        -f <reference_genome.fasta>
  \\\n        Sample1.bam Sample2.bam Sample3.bam | sed 's/chr//' | \\\n    pileupCaller
  --sampleNames Sample1,Sample2,Sample3 \\\n        --samplePopName MyPop -f <Eigenstrat.snp>
  \\\n        -o EigenStrat -e <My_output_prefix>\n\n## Options\n\nYou can see all
  options via `pileupCaller --help`, which outputs:\n\n```\nUsage: pileupCaller [--version]
  \n                    (--randomHaploid | --majorityCall [--downSampling] | \n                      --randomDiploid)
  [--keepIncongruentReads] \n                    [--seed <RANDOM_SEED>] [-d|--minDepth
  <DEPTH>] \n                    [--skipTransitions | --transitionsMissing | \n                      --singleStrandMode]
  (-f|--snpFile <FILE>) \n                    [(-e|--eigenstratOut <FILE_PREFIX>)
  [-z|----zip] | \n                      (-p|--plinkOut <FILE_PREFIX>) \n                      [--popNameAsPhenotype
  | --popNameAsBoth] [-z|----zip] |\n                      --vcf] \n                    (--sampleNames
  NAME1,NAME2,... | --sampleNameFile <FILE>) \n                    [--samplePopName
  POP(s)]\n\n  PileupCaller is a tool to create genotype calls from bam files using\n
  \ read-sampling methods. To use this tool, you need to convert bam files into\n
  \ the mpileup-format, specified at http://www.htslib.org/doc/samtools.html\n  (under
  \"mpileup\"). The recommended command line to create a multi-sample\n  mpileup file
  to be processed with pileupCaller is\n\n      samtools mpileup -B -q30 -Q30 -l <BED_FILE>
  -R -f <FASTA_REFERENCE_FILE>\n          Sample1.bam Sample2.bam Sample3.bam | pileupCaller
  ...\n\n  You can lookup what these options do in the samtools documentation. Note
  that\n  flag -B in samtools is very important to reduce reference bias in low coverage\n
  \ data.\n\n\n  This tool is part of sequenceTools version 1.6.0.0\n\nAvailable options:\n
  \ --version                Print version and exit\n  -h,--help                Show
  this help text\n  --randomHaploid          This method samples one read at random
  at each site,\n                           and uses the allele on that read as the
  one for the\n                           actual genotype. This results in a haploid
  call\n  --majorityCall           Pick the allele supported by the most reads at
  a\n                           site. If an equal numbers of alleles fulfil this,\n
  \                          pick one at random. This results in a haploid call.\n
  \                          See --downSampling for best practices for calling\n                           rare
  variants\n  --downSampling           When this switch is given, the MajorityCalling
  mode\n                           will downsample from the total number of reads
  a\n                           number of reads (without replacement) equal to the\n
  \                          --minDepth given. This mitigates reference bias in\n
  \                          the MajorityCalling model, which increases with\n                           higher
  coverage. The recommendation for rare-allele\n                           calling
  is --majorityCall --downsampling --minDepth 3\n  --randomDiploid          Sample
  two reads at random (without replacement) at\n                           each site
  and represent the individual by a diploid\n                           genotype constructed
  from those two random picks.\n                           This will always assign
  missing data to positions\n                           where only one read is present,
  even if minDepth=1.\n                           The main use case for this option
  is for estimating\n                           mean heterozygosity across sites.\n
  \ --keepIncongruentReads   By default, pileupCaller now removes reads with\n                           tri-allelic
  alleles that are neither of the two\n                           alleles specified
  in the SNP file. To keep those\n                           reads for sampling, set
  this flag. With this option\n                           given, if the sampled read
  has a tri-allelic allele\n                           that is neither of the two
  given alleles in the SNP\n                           file, a missing genotype is
  generated. IMPORTANT\n                           NOTE: The default behaviour has
  changed in\n                           pileupCaller version 1.4.0. If you want to
  emulate\n                           the previous behaviour, use this flag. I recommend\n
  \                          now to NOT set this flag and use the new behaviour.\n
  \ --seed <RANDOM_SEED>     random seed used for the random number generator. If\n
  \                          not given, use system clock to seed the random number\n
  \                          generator.\n  -d,--minDepth <DEPTH>    specify the minimum
  depth for a call. For sites with\n                           fewer reads than this
  number, declare Missing\n                           (default: 1)\n  --skipTransitions
  \       skip transition SNPs entirely in the output,\n                           resulting
  in a dataset with fewer sites.\n  --transitionsMissing     mark transitions as missing
  in the output, but do\n                           output the sites.\n  --singleStrandMode
  \      [THIS IS CURRENTLY AN EXPERIMENTAL FEATURE]. At C/T\n                           polymorphisms,
  ignore reads aligning to the forward\n                           strand. At G/A
  polymorphisms, ignore reads aligning\n                           to the reverse
  strand. This should remove post-mortem\n                           damage in ancient
  DNA libraries prepared with the\n                           non-UDG single-stranded
  protocol.\n  -f,--snpFile <FILE>      an Eigenstrat-formatted SNP list file for
  the\n                           positions and alleles to call. All positions in
  the\n                           SNP file will be output, adding missing data where\n
  \                          there is no data. Note that pileupCaller\n                           automatically
  checks whether alleles in the SNP file\n                           are flipped with
  respect to the human reference, and\n                           in those cases flips
  the genotypes accordingly. But\n                           it assumes that the strand-orientation
  of the SNPs\n                           given in the SNP list is the one in the
  reference\n                           genome used in the BAM file underlying the
  pileup\n                           input. Note that both the SNP file and the incoming\n
  \                          pileup data have to be ordered by chromosome and\n                           position,
  and this is checked. The chromosome order\n                           in humans
  is 1-22,X,Y,MT. Chromosome can generally\n                           begin with
  \"chr\". In case of non-human data with\n                           different chromosome
  names, you should convert all\n                           names to numbers. They
  will always considered to be\n                           numerically ordered, even
  beyond 22. Finally, I note\n                           that for internally, X is
  converted to 23, Y to 24\n                           and MT to 90. This is the most
  widely used encoding\n                           in Eigenstrat databases for human
  data, so using a\n                           SNP file with that encoding will automatically
  be\n                           correctly aligned to pileup data with actual\n                           chromosome
  names X, Y and MT (or chrX, chrY and\n                           chrMT, respectively).\n
  \ -e,--eigenstratOut <FILE_PREFIX>\n                           Set Eigenstrat as
  output format. Specify the\n                           filenames for the EigenStrat
  SNP, IND and GENO file\n                           outputs: <FILE_PREFIX>.snp, <FILE_PREFIX>.ind
  and\n                           <FILE_PREFIX>.geno. If not set, output will be\n
  \                          FreqSum (Default). Note that freqSum format,\n                           described
  at\n                           https://rarecoal-docs.readthedocs.io/en/latest/rarecoal-tools.html#vcf2freqsum,\n
  \                          is useful for testing your pipeline, since it's\n                           output
  to standard out\n  -z,----zip               GZip the output Eigenstrat or Plink
  genotype and SNP\n                           files. Filenames will be appended with
  '.gz'. To zip\n                           FreqSum or VCF output, just zip the standard
  output\n                           of this program, for example `pileupCaller ...
  --vcf\n                           | gzip -c > out.vcf.gz\n  -p,--plinkOut <FILE_PREFIX>\n
  \                          Set Plink as output format. Specify the filenames for\n
  \                          the Plink BIM, FAM and BED file outputs:\n                           <FILE_PREFIX>.bim,
  <FILE_PREFIX>.fam and\n                           <FILE_PREFIX>.bed. If not set,
  output will be FreqSum\n                           (Default). Note that freqSum
  format, described at\n                           https://rarecoal-docs.readthedocs.io/en/latest/rarecoal-tools.html#vcf2freqsum,\n
  \                          is useful for testing your pipeline, since it's\n                           output
  to standard out\n  --popNameAsPhenotype     Only valid for Plink Output: Write the
  population\n                           name into the last column of the fam file,
  as a\n                           Phenotype according to the Plink Spec. By default,\n
  \                          the population name is specified as the first column\n
  \                          only (family name in the Plink spec)\n  --popNameAsBoth
  \         Only valid for Plink Output: Write the population\n                           name
  into both the first and last column of the fam\n                           file,
  so both as Family-ID and as a Phenotype\n                           according to
  the Plink Spec. By default, the\n                           population name is specified
  only as the first column\n                           (family name in the Plink spec)\n
  \ -z,----zip               GZip the output Eigenstrat or Plink genotype and SNP\n
  \                          files. Filenames will be appended with '.gz'. To zip\n
  \                          FreqSum or VCF output, just zip the standard output\n
  \                          of this program, for example `pileupCaller ... --vcf\n
  \                          | gzip -c > out.vcf.gz\n  --vcf                    output
  VCF format to stdout\n  --sampleNames NAME1,NAME2,...\n                           give
  the names of the samples as comma-separated list\n                           (no
  spaces)\n  --sampleNameFile <FILE>  give the names of the samples in a file with
  one name\n                           per line\n  --samplePopName POP(s)   specify
  the population name(s) of the samples, which\n                           are included
  in the output *.ind.txt file in\n                           Eigenstrat output. This
  will be ignored if the output\n                           format is not Eigenstrat.
  If a single name is given,\n                           it is applied to all samples,
  if multiple are given,\n                           their number must match the the
  number of samples\n                           (default: Left \"Unknown\")\n```\n\n###
  SingleStrandMode\n\npileupCaller supports a special calling mode (`--singleStrandMode`)
  for sequencing data generated from single-stranded libraries (Gansauge, Marie-Theres,
  and Matthias Meyer. 2013. “Single-Stranded DNA Library Preparation for the Sequencing
  of Ancient or Damaged DNA.” Nature Protocols 8 (4): 737–48.). The idea is that at
  C/T SNPs, forward mapping reads are discarded, and at G/A SNPs, reverse mapping
  reads are discarded. This will get rid of post-mortem ancient DNA damage in a conservative
  way, i.e. it will remove more than necessary and make sure that the remainder of
  the data is clean of DNA damage, improving the overall calling quality.\n\nThere
  is an important catch: If you have data from paired-end sequencing, and you are
  using _unmerged_ reads, then this approach will fail, as it will then _not_ discard
  potentially damaged reads.\n\nSo there are two options if you have Paired-end sequencing
  data:\n1) Use only merged reads and `--singleStrandMode`\n2) Use all reads but do
  _not_ use `--singleStrandMode`. Instead, in such cases I recommend to trim reads
  from both ends to remove ancient DNA damage. Depending on the details of the library
  construction, you may have UDG-treated data, in which case fewer basepairs would
  have to be trimmed.\n\n### VCF output\nVCF output was added in version 1.6.0.0.
  The VCF format is specified in detail at https://samtools.github.io/hts-specs/VCFv4.5.pdf.
  I just mention two specifics. First, with calling modes `--randomHaploid` and `--majorityCall`,
  the output genotypes will be haploid. This means that instead of genotypes like
  `0/0`, `0/1`, `1/1` or `./.`, you will instead just see `0`, `1` or `.`. Second,
  I added some possibly useful filters and statistics to the output, which are described
  in the header of the VCF:\n\n```\n##fileformat=VCFv4.2\n##source=pileupCaller_v1.6.0.0\n##command_line=pileupCaller
  --randomHaploid -f 1240k_eigenstrat_snp_short.snp.txt --sampleNames 1,2,3,4 --vcf\n##group_names=Unknown,Unknown,Unknown,Unknown\n##INFO=<ID=NS,Number=1,Type=Integer,Description=\"Number
  of Samples With Data\">\n##INFO=<ID=DP,Number=1,Type=Integer,Description=\"Total
  Depth\">\n##INFO=<ID=AF,Number=A,Type=Float,Description=\"Allele Frequency\">\n##FILTER=<ID=s50,Description=\"Less
  than 50% of samples have data\">\n##FILTER=<ID=s10,Description=\"Less than 10% of
  samples have data\">\n##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n##FORMAT=<ID=DP,Number=1,Type=Integer,Description=\"Read
  Depth\">\n##FORMAT=<ID=DP8,Number=8,Type=Integer,Description=\"Nr of Reads supporting
  A,C,G,T in forward strand, followed by the same quartet in reverse strand\">\n```\n\nAs
  you can see, Info fields NS, DP and AF are added and defined, as well as two filters
  which might come in handy. Also, beyond the required genotype `GT` tag, I added
  two per-sample tags `DP` and `DP8` as defined in the header. \n\n### Summary Statistics\n\nPileupCaller
  automatically outputs a few lines of summary statistics, including the number of
  sites called for each sample, and the average read depth. These are output to the
  stderr, so do not affect stdout or file output.\n\n# vcf2eigenstrat\n\nSimple tool
  to convert a VCF file to an Eigenstrat file. Pretty self-explanatory. Please run
  `vcf2eigenstrat --help` to output some documentation.\n\n# genoStats\n\nA simple
  tool to get some per-individual statistics from an Eigenstrat or Freqsum-file. Run
  `genoStats --help` for documentation.\n\n# Scripts\nThis package also contains several
  haskell wrapper scripts for the following [ADMIXTOOLS and EIGENSOFT](https://reich.hms.harvard.edu/software)
  commands: convertf, mergeit, qp3Pop, qpDstat and smartPCA. The original tools require
  parameter files as input, which I find tedious to use in bioinformatics pipelines.
  I wrote those wrapper scripts to be able to start the tools with a simple command
  line option interface.\n\nIf you have `stack` installed your system (see above),
  you should be able to run those scripts on your machine without any difficult setup.
  Simply clone this repository, navigate to the `scripts` subfolder and invoke any
  script using standard bash execution, for example\n\n    ./convertf_wrapper.hs\n\nIf
  you start this the first time it may take a while, since `stack` downloads all dependencies
  and even the script interpreter for you, but after that it should start instantanious.
  If you want to use the scripts from your path, I suggest to put symbolic links into
  any folder that is already on your path (for example `~/.local/bin`).\n"
description-type: markdown
hash: 5c011a21536d2bf728977fcd5cb127721874f72ea9e8d028061d9c55507ab602
homepage: https://github.com/stschiff/sequenceTools
latest: 1.6.0.0
license-name: GPL-3.0-only
maintainer: stephan.schiffels@mac.com
synopsis: A package with tools for processing DNA sequencing data
test-bench-deps:
  base: '>=4.18.2.1'
  bytestring: '>=0.11.5.3'
  hspec: '>=2.11.10'
  pipes: '>=4.3.16'
  sequence-formats: '>=1.11.0.0'
  sequenceTools: '>=0'
  vector: '>=0.13.1.0'
