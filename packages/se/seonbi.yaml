homepage: https://github.com/dahlia/seonbi
changelog-type: markdown
hash: 44a73fd33a5404d6672f69e03880634fb3380ab6d278f086df68d3532c456324
test-bench-deps:
  seonbi: -any
  hlint: '>=2.1.7 && <3.3'
  bytestring: -any
  base: '>=4.12 && <5'
  Diff: '>=0.3.4 && <0.5'
  html-entities: ==1.*
  hspec: '>=2.4.8 && <3'
  text: -any
  filepath: ==1.*
  doctest: -any
  interpolatedstring-perl6: '>=1.0.1 && <2'
  unicode-show: -any
  containers: -any
  doctest-discover: -any
  random: '>=1.1 && <1.3'
  QuickCheck: -any
  hspec-discover: '>=2.4.8 && <3'
  aeson: '>=1.3.1 && <1.6'
  directory: ==1.*
maintainer: Hong Minhee <hong.minhee@gmail.com>
synopsis: SmartyPants for Korean language
changelog: |
  Seonbi changelog
  ================

  Version 0.3.1
  -------------

  Released on November 27, 2021.

   -  Added prebuilt executable binaries for Apple Silicon (macos-arm64).


  Version 0.3.0
  -------------

  Released on November 18, 2021.

   -  Since this version, it requires GHC 8.8.* at least, and supports GHC 9.0.*
      at most.

   -  Now supports several content types besides HTML/XHTML.  The below list
      shows all supported content types:  [[#18]]

       -  `text/html` (previously non-XHTML mode)
       -  `application/xhtml+xml` (previously XHTML mode)
       -  `text/plain` (added)
       -  `text/markdown` (added)

      The below Haskell APIs changed:

       -  Added `Text.Seonbi.ContentTypes` module.
       -  Added `contentType` field for `Configuration m a`.
       -  Removed `xhtml` field for `Configuration m a` in favor of
          new `contentType` field for the same type.

      The below CLI options changed:

       -  Added `-t`/`--content-type` option with the default value `text/html`.
       -  Removed Removed `-x`/`--xhtml` option in favor of new
          `-t`/`--content-type` option.  In order to use XHTML mode, give it
          `-t application/xhtml+xml` option.

      The below HTTP APIs changed:

       -  Added a mandatory field `"content"` to requests.
       -  Deprecated the `"sourceHtml"` field of requests in favor of the new
          `"content"` field.
       -  Added an optional field `"contentType"` with the default value
          `"text/html"` to requests.
       -  Deprecated the `"xhtml"` field of requests in favor of the new
          `"contentType"` field.  The legacy field will be gone in the next
          minor release.
          In order to use XHTML mode, configure `"contentType"` field with
          `"application/xhtml+xml"`.
       -  Added `"content"` field to responses.
       -  Deprecated the `"resultHtml"` field of responses in favor of the new
          `"content"` field.  The legacy field is not provided for non-HTML
          types, and will be gone in the next minor release.
       -  Added `"contentType"` field to responses.
       -  Added `"warnings"` field to responses.

   -  Added `Text.Seonbi.Html.Lang` module.

   -  Some transformations inappropriate for non-Korean contents are no more
      applied to elements written in other languages than Korean.  The below
      functions respect elements `lang` attributes:  [[#10]]

       -  `Text.Seonbi.Hanja.phoneticizeHanja`
       -  `Text.Seonbi.Punctuation.normalizeStops`

   -  Removed several functions from `Text.Seonbi.Trie` module:

       -  `toListBy`
       -  `lookupBy`
       -  `submap`
       -  `match`
       -  `matches`
       -  `alterBy`
       -  `adjust`
       -  `delete`
       -  `mapBy`
       -  `filterMap`

   -  `Text.Seonbi.Trie.Trie` type is not an instance of the following typeclasses
      anymore:

       -  `Generic a => Generic (Trie a)`
       -  `Binary a => Binary (Trie a)`
       -  `Generic1 Trie`
       -  `type Rep (Trie a)`
       -  `type Rep1 Trie`

   -  Added `Text.Seonbi.Html.Printer.printText` function.
   -  Added `Text.Seonbi.Html.Tag.headingLevel` function.
   -  Added `Text.Seonbi.Html.Tag.headingTag` function.
   -  Added `Text.Seonbi.Html.Tag.headingTag'` function.
   -  Added `Text.Seonbi.Html.TagStack.last` function.

  [#10]: https://github.com/dahlia/seonbi/issues/10
  [#18]: https://github.com/dahlia/seonbi/issues/18


  Version 0.2.3
  -------------

  Released on September 26, 2021.

   -  Fixed stops normalizer's bug where trailing spaces following stops had been
      trimmed after normalized.
   -  Fixed stops normalizer's buf where unnecessary trailing spaces following
      stops had been inserted after normalized.  In particular, unnecessary
      spaces between stops and closing parentheses/brackets are no more inserted.


  Version 0.2.2
  -------------

  Released on September 25, 2021.

   -  Fixed stops normalizer's bug where unnecessary trailing spaces following
      stops had been left even after normalized.
   -  Fixed stops normalizer's bug where commas followed by tag boundaries had
      been not normalized.


  Version 0.2.1
  -------------

  Released on September 23, 2021.

   -  Updated the *Standard Korean Language Dictionary* data
      (*data/ko-kr-stdict.tsv*) to the revision 2021-09.


  Version 0.2.0
  -------------

  Released on May 26, 2021.

   -  Added stops (periods/commas/interpuncts) normalizer.

      Haskell API-wise, the below types and functions were added:

       -  `Text.Seonbi.Punctuation.Stops` data type
       -  `Text.Seonbi.Punctuation.normalizeStops` function
       -  `Text.Seonbi.Punctuation.horizontalStops` function
       -  `Text.Seonbi.Punctuation.horizontalStopsWithSlashes` function
       -  `Text.Seonbi.Punctuation.verticalStops` function
       -  `Text.Seonbi.Facade.StopOption` data type
       -  `stop` field in `Text.Seonbi.Facade.Configuration` data constructor

      CLI-wise, the `-s`/`--stop` option was added.

      HTTP API-wise, the optional field `"stop"` was added.

   -  `Text.Seonbi.Punctuation.transformEllipsis` became aware of Chinese stops
      (`。。。`) besides Western stops (`...`).

   -  Added options to use horizontal/vertical corner brackets for quotes.

      Haskell API-wise, the below functions were added:

       -  `Text.Seonbi.Punctuation.verticalCornerBrackets` function
       -  `Text.Seonbi.Punctuation.horizontalCornerBrackets` function
       -  `Text.Seonbi.Punctuation.verticalCornerBracketsWithQ` function
       -  `Text.Seonbi.Punctuation.horizontalCornerBracketsWithQ` function
       -  `VerticalCornerBrackets` data constructor for
          `Text.Seonbi.Facade.QuoteOption` type
       -  `HorizontalCornerBrackets` data constructor for
          `Text.Seonbi.Facade.QuoteOption` type
       -  `VerticalCornerBracketsWithQ` data constructor for
          `Text.Seonbi.Facade.QuoteOption` type
       -  `HorizontalCornerBracketsWithQ` data constructor for
          `Text.Seonbi.Facade.QuoteOption` type

      CLI-wise, the `-q`/`--quote` option became to have the below new styles:

       -  `vertical-corner-brackets`
       -  `horizontal-corner-brakcets`
       -  `vertical-corner-brackets-with-q`
       -  `horizontal-corner-brakcets-with-q`

      HTTP API-wise, the optional field `"quote"` became to have the below new
      styles:

       -  `VerticalCornerBrackets`
       -  `HorizontalCornerBrackets`
       -  `VerticalCornerBracketsWithQ`
       -  `HorizontalCornerBracketsWithQ`

   -  The CLI option `-x`/`--xhtml` became usable with the `-p`/`--preset` option
      at a time.

   -  Updated the *Standard Korean Language Dictionary* data
      (*data/ko-kr-stdict.tsv*) to the revision 2021-05.


  Version 0.1.1
  -------------

  Released on October 7, 2019.

   -  Added the `embed-dictionary` flag to the Cabal package.
   -  Fixed a bug that *Standard Korean Language Dictionary* had not been
      included in executables if `flag(static)` is turned on.  [[#1]]

  [#1]: https://github.com/dahlia/seonbi/issues/1


  Version 0.1.0
  -------------

  Released on October 6, 2019.
basic-deps:
  warp: '>=3.2 && <3.4'
  seonbi: -any
  bytestring: -any
  cases: '>=0.1.3.2 && <0.1.5'
  wai: '>=3.2 && <3.4'
  case-insensitive: ==1.*
  base: '>=4.12 && <5'
  html-entities: ==1.*
  text: -any
  bytestring-trie: '>=0.2.5 && <0.3'
  filepath: ==1.*
  cmark: '>=0.6 && <1'
  data-default: '>=0.2 && <1'
  containers: -any
  cassava: ==0.5.*
  html-charset: ==0.1.*
  file-embed: '>=0.0.10 && <0.0.16'
  attoparsec: '>=0.12 && <1'
  optparse-applicative: '>=0.14 && <0.17'
  http-types: ==0.12.*
  aeson: '>=1.3.1 && <1.6'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.3.0
- 0.3.1
author: Hong Minhee <hong.minhee@gmail.com>
latest: 0.3.1
description-type: markdown
description: |
  Seonbi: SmartyPants for Korean language
  =======================================

  [![][releases-badge]][releases] [![][hackage-badge]][hackage] [![][dockerhub-badge]][dockerhub] [![][ci-status-badge]][ci]

  [![](https://dahlia.github.io/seonbi/showcase.svg)][demo web app]

  (TL;DR: See the [demo web app].)

  Seonbi (선비) is an HTML preprocessor that makes typographic adjustments
  to an HTML so that the result uses accurate punctuations according to
  the modern Korean orthography.
  (It's similar to what [SmartyPants] does for text written in English.)

  It also transforms `ko-Kore` text (國漢文混用; [Korean mixed script]) into
  `ko-Hang` text (한글전용; Hangul-only script).

  Seonbi provides a Haskell library, a CLI, and an HTTP API; any of them can
  perform the following transformations:

   -  All hanja words (e.g., `漢字`) into corresponding hangul-only words
      (e.g., `한자`)
   -  Straight quotes and apostrophes (`"` & `'`) into curly quotes HTML
      entities (`“`, `”`, `‘`, & `’`)
   -  Three consecutive periods (`...` or `。。。`) into an ellipsis entity (`…`)
   -  Classical (Chinese-style) stops (`。` & `、`) into modern (English-style)
      stops (`.` & `,`)
   -  Pairs of less-than and greater-than inequality symbols (`<` & `>`) into
      pairs of proper angle quotes (`〈` & `〉`)
   -  Pairs of two consecutive inequality symbols (`<<` & `>>`) into
      pairs of proper double angle quotes (`《` & `》`)
   -  A hyphen (`-`) or hangul vowel *eu* (`ㅡ`) surrounded by spaces, or
      two/three consecutive hyphens (`--` or `---`) into a proper em dash (`—`)
   -  A less-than inequality symbol followed by a hyphen or an equality
      symbol (`<-`, `<=`) into arrows to the left (`←`, `⇐`)
   -  A hyphen or an equality symbol followed by a greater-than inequality
      symbol (`->`, `=>`) into arrows to the right (`→`, `⇒`)
   -  A hyphen or an equality symbol wrapped by inequality symbols (`<->`, `<=>`)
      into bi-directional arrows (`↔`, `⇔`)

  Each transformations can be partially turned on and off, and some
  transformations have many options.

  All transformations work with both plain texts and rich text tree.
  In a similar way to SmartyPants, it does not modify characters within
  several sensitive HTML elements like `<pre>`/`<code>`/`<script>`/`<kbd>`.
  Chinese/Japanese stops or hanzi/kanji characters inside elements with
  `lang="zh"`/`lang="ja"`[^1] are never transformed.

  [^1]: Technically, only Korean contents and language-unspecified elements
        are transformed.  Elements having `lang` attribute with language tags
        referring to any Korean language are treated as Korean contents,
        e.g., `ko`, `ko-Hang`, `kor-KP`, `kor-Kore`.

  [releases]: https://github.com/dahlia/seonbi/releases
  [releases-badge]: https://img.shields.io/github/v/release/dahlia/seonbi
  [hackage]: https://hackage.haskell.org/package/seonbi
  [hackage-badge]: https://img.shields.io/hackage/v/seonbi
  [dockerhub]: https://hub.docker.com/r/dahlia/seonbi
  [dockerhub-badge]: https://img.shields.io/docker/v/dahlia/seonbi?label=docker%20image&sort=semver
  [ci]: https://github.com/dahlia/seonbi/actions
  [ci-status-badge]: https://github.com/dahlia/seonbi/workflows/build/badge.svg
  [demo web app]: https://dahlia.github.io/seonbi/
  [SmartyPants]: https://daringfireball.net/projects/smartypants/
  [Korean mixed script]: https://en.wikipedia.org/wiki/Korean_mixed_script


  End-user apps
  -------------

  Technically, Seonbi is basically exposed as a software component,
  which is also known as API (application programming interface), to be used
  as a module of other softwares.

  However, as these official interfaces are not for humans but machines, it's
  not easy to use for end-users whom haven't experienced software
  programming.  For such end-users, here's the list of end-user apps:

   -  [Demo web app]: The official web app.  Not that mobile-friendly
      (usable though).
   -  [Seonbi Translator] (선비 번역기): An iOS shortcut made by
      [Heechan Bak] ([@channprj]).
   -  [seonbi-webapp]: Probably aims to replace the official web app.
      Made by Lee Dogeon ([@moreal]).
   -  [seonbi-ext]: A browser extension made by Lee Dogeon ([@moreal]).

  [Seonbi Translator]: https://www.icloud.com/shortcuts/1e468a5dd0104fc5b69fe803952fc154
  [Heechan Bak]: https://chann.dev/
  [@channprj]: https://github.com/channprj
  [seonbi-webapp]: https://github.com/moreal/seonbi-webapp
  [@moreal]: https://github.com/moreal
  [seonbi-ext]: https://github.com/moreal/seonbi-ext


  Installation
  ------------

  Seonbi provides official executable binaries for Linux (x86_64), macOS,
  and Windows (64-bit).  You can download them from the [releases] page.

  It is also distributed as a [Docker image][dockerhub]:

      $ echo '訓民正音' | docker run -i dahlia/seonbi:latest seonbi
      훈민정음

  If you want to use it as a Haskell library install the [seonbi][hackage] package
  using Stack or Cabal.


  CLI
  ---

  The `seonbi` command basically takes the input HTML as standard input, and
  then transforms it into the output HTML as standard output:

      seonbi < input.html > output.html

  You could pass a filename as an argument instead (and it is `-` by default):

      seonbi input.html > output.html

  There is `-o`/`--output` option as well:

      seonbi -o output.html input.html

  Although it automatically detects text encoding of the input file,
  you could explicitly specify `-e`/`--encoding`:

      seonbi -e euc-kr -o output.html input.html

  Although there are several style options, e.g., `-q`/`--quote`, `-c`/`--cite`,
  `-r`/`--render-hanja`, in most cases, giving `-p`/`--preset` is enough:

      echo '平壤 冷麵' | seonbi -p ko-kr  # 평양 냉면
      echo '平壤 冷麵' | seonbi -p ko-kp  # 평양 랭면

  Read `-h`/`--help` for details:

      seonbi --help


  HTTP API
  --------

  The `seonbi-api` command starts an HTTP server that takes `POST` requests
  with an HTML source with transformation options, and responds with
  a transformed result HTML.  You can decide a hostname and a port number
  with `-H`/`--host` and `-p`/`--port` options:

      seonbi-api -H 0.0.0.0 -p 3800

  The following is an example request:

      POST / HTTP/1.1
      Content-Type: application/json
      Host: localhost:3800

      {
        "preset": "ko-kr",
        "contentType": "text/html",
        "sourceHtml": "<p>하늘과 바람과 별과 詩</p>"
      }

  The HTTP API server would respond like this:

      HTTP/1.1 200 OK
      Content-Type: application/json
      Server: Seonbi/0.3.0

      {
        "success": true,
        "contentType": "text/html",
        "resultHtml": "<p>하늘과 바람과 별과 시</p>"
      }

  If a web app needs to use the HTTP API server, [CORS] should be configured
  through `--allow-origin`/`-o` option:

      seonbi-api -o https://example.com

  To learn more about parameters interactively, try the [demo web app].

  [CORS]: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS


  Haskell API
  -----------

  All functions and types lie inside `Text.Seonbi` module and its submodules.
  The highest-level API is `Text.Seonbi.Facade` module.

  See also the [API docs] or [Hackage].

  [API docs]: https://dahlia.github.io/seonbi/docs/


  Deno API
  --------

  There is a simple client library for Deno as well.  See also
  the [scripts/deno/](scripts/deno/) directory.


  License
  -------

  Distributed under LGPL 2.1 or later.


  Etymology
  ---------

  *[Seonbi]* (선비) means a classical scholar during Joseon periods (14c–19c).
  Today there's a meme that calls a person who feels morally superior or has
  elitism *seonbi* in the Korean internet.  So *seonbi* and *smarty pants* have
  some things in common.

  [Seonbi]: https://en.wikipedia.org/wiki/Seonbi
license-name: LGPL-2.1-only
