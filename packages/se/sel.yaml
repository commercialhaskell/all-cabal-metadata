all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.1.0.0
author: HÃ©cate Moonlight, Koz Ross
basic-deps:
  base: '>=4.14 && <5'
  base16: ^>=1.0
  bytestring: '>=0.10 && <0.13'
  libsodium-bindings: ^>=0.0.3
  text: '>=1.2 && <2.2'
  text-builder-linear: ^>=0.1
  text-display: ^>=1.0
  transformers: ^>=0.6.0
changelog: |
  # CHANGELOG

  ## sel-0.1.0.0

  * Consistently rename ciphertext-related types and functions [#182](https://github.com/haskell-cryptography/libsodium-bindings/pull/182)
  * Add support for additional data (AD) in `Sel.SecretKey.Stream` [#183](https://github.com/haskell-cryptography/libsodium-bindings/pull/183)
  * Define some cryptographic functions in sel as pure [#189](https://github.com/haskell-cryptography/libsodium-bindings/pull/189)

  ## sel-0.0.3.0

  * Add constant time hex encoding [#176](https://github.com/haskell-cryptography/libsodium-bindings/pull/176)
  * Support `text-display` 1.0.0.0
  * Replace usages of `memcpy` with `Foreign.copyBytes` [#172](https://github.com/haskell-cryptography/libsodium-bindings/pull/172)
  * Add constant-time pointer comparison [#171](https://github.com/haskell-cryptography/libsodium-bindings/pull/171)
  * (Internal) Add constant-time Eq, use Scoped for internals [#169](https://github.com/haskell-cryptography/libsodium-bindings/pull/169)
  * Cleanup, allow more versions of `tasty` [#168](https://github.com/haskell-cryptography/libsodium-bindings/pull/168)
  * (Internal) Add `Scoped` for better readability of nested continuations [#167](https://github.com/haskell-cryptography/libsodium-bindings/pull/167)
  * Update hedgehog [#180](https://github.com/haskell-cryptography/libsodium-bindings/pull/180)

  ## sel-0.0.2.0

  * Add usages of `secureMain` in examples
  * Depends on libsodium-bindings-0.0.2.0
changelog-type: markdown
description: |
  # sel [![CI](https://github.com/haskell-cryptography/libsodium-bindings/actions/workflows/ci.yaml/badge.svg)](https://github.com/haskell-cryptography/libsodium-bindings/actions/workflows/ci.yaml) [![made with Haskell](https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&style=flat-square)](https://haskell.org)


  Sel is the library for casual users by the [Haskell Cryptography Group](https://haskell-cryptography.org).
  It builds on [Libsodium](https://doc.libsodium.org), a reliable and audited library for common operations.

  ## Hashing

  |                              Purpose                                 | Module                         |
  |----------------------------------------------------------------------|--------------------------------|
  | Hash passwords                                                       | [Sel.Hashing.Password](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-Hashing-Password.html)         |
  | Verify the integrity of files and hash large data                    | [Sel.Hashing](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-Hashing.html)                  |
  | Hash tables, bloom filters, fast integrity checking of short input   | [Sel.Hashing.Short](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-Hashing-Short.html)            |

  ## Secret key / Symmetric cryptography

  |                              Purpose                                 | Module                         |
  |----------------------------------------------------------------------|--------------------------------|
  | Authenticate a message with a secret key                             | [Sel.SecretKey.Authentication](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-SecretKey-Authentication.html) |
  | Encrypt and sign data with a secret key                              | [Sel.SecretKey.Cipher](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-SecretKey-Cipher.html)         |
  | Encrypt a stream of messages                                         | [Sel.SecretKey.Stream](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-SecretKey-Stream.html)         |

  ## Public and Secret key / Asymmetric cryptography

  |                              Purpose                                 | Module                         |
  |----------------------------------------------------------------------|--------------------------------|
  | Sign and encrypt with my secret key and my recipient's public key    | [Sel.PublicKey.Cipher](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-PublicKey-Cipher.html)         |
  | Sign and encrypt an anonymous message with my recipient's public key | [Sel.PublicKey.Seal](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-PublicKey-Seal.html)           |
  | Sign with a secret key and distribute my public key                  | [Sel.PublicKey.Signature](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-PublicKey-Signature.html)      |

  ## HMAC message authentication

  |                              Purpose                                 | Module                         |
  |----------------------------------------------------------------------|--------------------------------|
  | HMAC-256                                                             | [Sel.HMAC.SHA256](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-HMAC-SHA256.html)              |
  | HMAC-512                                                             | [Sel.HMAC.SHA512](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-HMAC-SHA512.html)              |
  | HMAC-512-256                                                         | [Sel.HMAC.SHA512_256](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-HMAC-SHA512_256.html)          |

  ## Legacy SHA2 constructs

  |                              Purpose                                 | Module                         |
  |----------------------------------------------------------------------|--------------------------------|
  | SHA-256                                                              | [Sel.Hashing.SHA256](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-Hashing-SHA256.html)           |
  | SHA-512                                                              | [Sel.Hashing.SHA512](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-Hashing-SHA512.html)           |
  | Scrypt                                                               | [Sel.Scrypt](https://hackage.haskell.org/package/sel-0.0.1.0/candidate/docs/Sel-Scrypt.html)                   |
description-type: markdown
hash: f8c49b7bfb682725cd9373aa96ca27442f1a164d4bd32b0ac7b9e2441db4e9cc
homepage: https://github.com/haskell-cryptography/libsodium-bindings
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: The Haskell Cryptography contributors
synopsis: Cryptography for the casual user
test-bench-deps:
  base: '>=0'
  base16: '>=0'
  bytestring: '>=0'
  hedgehog: '>=1.4'
  libsodium-bindings: '>=0'
  sel: '>=0'
  tasty: '>=1.4 && <1.6'
  tasty-hunit: ^>=0.10
  text: '>=0'
  text-display: '>=0'
