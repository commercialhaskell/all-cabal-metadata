homepage: https://github.com/mtonnberg/servant-gdp#readme
changelog-type: ''
hash: 7a905384a8704c6be07368547eb754e3eef8885d0e6c0899fef47ab3391b6c18
test-bench-deps: {}
maintainer: mikael@carboncloud.com
synopsis: Use Servant and GDP together to create expressive web API types
changelog: ''
basic-deps:
  base: '>=4.7 && <5'
  text: ==1.2.*
  servant-server: ==0.18.*
  gdp: <0.1
  aeson: ==1.5.*
all-versions:
- 0.0.1.2
author: Mikael Tönnberg
latest: 0.0.1.2
description-type: markdown
description: "# Servant ❤️ GDP\n\n## In a nutshell\nTo get more productive, produce
  high-quality web APIs and reduce the number of needed tests we can combine [Servant](https://haskell-servant.github.io/)
  (A web api framework) and [GDP](https://kataskeue.com/gdp.pdf) (Ghosts of Departed
  Proofs). This allows for quite expressive API declarations which leads to more [knowledge
  captured](https://carboncloud.com/2020/12/07/tech-knowledge-as-code/).\n[See a full
  example](https://github.com/mtonnberg/gdp-demo).\n\n```haskell\n-- http://localhost/div/10/5
  would return 2\ntype DivWebApi numerator denominator =\n  \"div\"\n    :> CaptureNamed
  (Int ~~ numerator \n                    ::: IsPositive numerator)\n    :> CaptureNamed
  (Int ~~ denominator\n                    ::: IsPositive denominator)\n    :> Get\n
  \        '[JSON]\n         ( Int ? IsEqualOrLessThan numerator\n         )\n```\nor\n```haskell\n--
  http://localhost/habitats/savanna/animals/3\n-- could return [\"lion\", \"elephant\"]\ntype
  GetAnimalsForHabitat user habitat pagesize =\n  AuthProtect \"normalUser\"\n    :>
  \"habitats\"\n    :> CaptureNamed (String ~~ habitat ::: IsNonEmpty habitat && IsTrimmed
  habitat)\n    :> \"animals\"\n    :> CaptureNamed (Int ~~ pagesize ::: IsPositive
  pagesize)\n    :> Get\n         '[JSON]\n         ( ( [String ? IsAValidatedAnimal
  habitat] ? HasAMaximumLengthOf pagesize\n           )\n             ::: user `HasAccessToHabitat`
  habitat\n         )\n```\n\nSee <https://github.com/mtonnberg/gdp-demo> for a full,
  working example.\n\n## How does it work\nAPI-input is captured as named variables,
  making the named contexts span the entire request.\nThis in turn, makes it possible
  to express a lot of domain knowledge/requirements  in the Servant API type.\n\n##
  Why does this exist?\nTo both make the API-capabilities clearer and to make it easier
  to implement.\n\nIt is often quite easy to identify domain rules, invariants and
  preconditions for the API but hard to capture that knowledge in the types. Instead
  a lot of domain rules and requirements are hidden in the implementation logic.\n\nMoving
  information to the types are in line with Knowledge-as-Code, read more about the
  benefits here: [Knowledge-as-Code](https://carboncloud.com/2020/12/07/tech-knowledge-as-code/)"
license-name: BSD-3-Clause
