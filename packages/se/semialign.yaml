all-versions:
- '1'
- '1.1'
- 1.1.0.1
- '1.2'
- 1.2.0.1
- '1.3'
- 1.3.1
author: C. McCann, Oleg Grenrus
basic-deps:
  base: '>=4.12.0.0 && <4.21'
  containers: '>=0.6.0.1 && <0.8'
  hashable: '>=1.4.4.0 && <1.5'
  indexed-traversable: '>=0.1.4 && <0.2'
  indexed-traversable-instances: '>=0.1.2 && <0.2'
  semigroupoids: '>=6.0.1 && <6.1'
  tagged: '>=0.8.8 && <0.9'
  these: '>=1.2.1 && <1.3'
  transformers: '>=0.5.6.2 && <0.7'
  unordered-containers: '>=0.2.8.0 && <0.3'
  vector: '>=0.13.0.0 && <0.14'
changelog: |
  # 1.3.1

  - Support GHC-8.6.5...GHC-9.10.1

  # 1.3

  - Depend on `bifunctor-classes-compat` instead of `bifunctors`
    See changelog note in `bifunctors-5.6`: https://hackage.haskell.org/package/bifunctors-5.6/changelog
    This is breaking change, but affects only GHC-8.0 and older users.
    In that case you should check various combinations of newer/older
    `bifunctors`, `these`, and `semialign` packages.

  # 1.2.0.1

  -  GHC-9.2 support

  # 1.2

  - Migrate `SemialignWithIndex` and `ZipWithIndex` to this package,
    using `FunctorWithIndex` from `indexed-traversable`.
  - Add `RepeatWithIndex` type-class.
  - Poly-kinded instances (notably `Tagged`)

  # 1.1.0.1

  - Drop `base-compat` dependency

  # 1.1

  - Split `Semialign` into `Semialign` and `Zip`.
  - Rename old `Zip` into `Repeat`
  - i.e. current main hierarchy is
  - Remove `malign`, use `salign` or `alignWith mappend` where `Monoid` is necessary.
  - Add `Option` instances

  ```haskell
  instance Functor f => Semialign f where
      alignWith :: (These a b -> c) -> f a -> f b -> f c

  instance Semialign f => Align f where
      nil :: f a

  instance Semialign f => Zip f where
      zipWith :: (a -> b -> c) -> f a -> f b -> f c

  instance Zip f => Repeat f where
      repeat :: a -> f a
  ```

  This biased choice, that `Semialign` is a super-class of `Zip` is motivated by the fact that
  - There's no `Semialign`-like class anywhere else, yet
  - `Zip` and `Repeat` are `Apply` (from `semigroupoids`) and `Applicative` with slightly more laws. I
    If you need only `Repeat` class, and your type isn't `Aling`able, maybe using `Applicative` is enough?

  # 1

  Split out of `these` package.
changelog-type: markdown
description: |-
  The major use of @These@ of this is provided by the @align@ member of
  @Semialign@ class, representing a generalized notion of "zipping with padding"
  that combines structures without truncating to the size of the smaller input.

  It turns out that @zip@ operation fits well the @Semialign@ class,
  forming lattice-like structure.
description-type: haddock
hash: 520364c94058b00b2411881a109206b5523ab66a7726fdb23e77e92d0b8b21b2
homepage: https://github.com/haskellari/these
latest: 1.3.1
license-name: BSD-3-Clause
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Align and Zip type-classes from the common Semialign ancestor.
test-bench-deps: {}
