homepage: http://github.com/ekmett/semigroupoids
changelog-type: markdown
hash: 3ca506912c2e1fe97930d1565a2eebb608de6bc7f49736119609d6a78058dc13
test-bench-deps: {}
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: 'Semigroupoids: Category sans id'
changelog: "6.0.0.1 [2023.03.16]\r\n--------------------\r\n* When building with GHC
  9.6, require `transformers >= 0.6.1` and\r\n  `containers >= 0.6.7`. This ensures
  that `semigroupoids` always provides\r\n  `Traversable1` instances for data types
  from `transformers` and `containers`\r\n  unconditionally.\r\n\r\n6 [2023.03.12]\r\n--------------\r\n*
  Drop support for GHC 7.10 and earlier.\r\n* The `Foldable1` and `Bifoldable1` classes
  have been migrated:\r\n  * When building with `base-4.18` or later, `semigroupoids`
  re-exports\r\n    `Foldable1` and `Bifoldable1` from `base`. (These classes were
  added to\r\n    `base-4.18` as a result of\r\n    [this Core Libraries proposal](haskell/core-libraries-committee#9).)\r\n
  \ * When building with older versions of `base`, `semigroupoids` re-exports\r\n
  \   `Foldable1` and `Bifoldable1` from the\r\n    [`foldable1-classes-compat`](https://github.com/haskell-compat/foldable1-classes-compat)\r\n
  \   compatibility package.\r\n\r\n  Note that the version of `Foldable1` that `semigroupoids`
  defined in previous\r\n  releases only had three class methods: `fold1`, `foldMap1`,
  and `toNonEmpty`.\r\n  Moreover, `foldMap1` had a default implementation in terms
  of a `Foldable`\r\n  constraint. `base`'s version of `Foldable1`, however, has some
  notable\r\n  differences:\r\n\r\n  1. It has many more methods than the three listed
  above, such as the\r\n     `foldrMap1` method.\r\n  2. `foldMap1` now has a default
  implementation in terms of `foldrMap1` instead\r\n     of in terms of a `Foldable`
  constraint.\r\n\r\n  To avoid (1) causing issues when upgrading to `semigroupoids-6`,\r\n
  \ `Data.Semigroup.Foldable` only re-exports the `fold1`, `foldMap1`, and\r\n  `toNonEmpty`
  methods, which reflects the API in previous `semigroupoids`\r\n  releases. If you
  want to use the other, new class methods of `Foldable1`,\r\n  consider importing
  it from `Data.Foldable1` (its home in `base`) instead.\r\n\r\n  Difference (2) is
  trickier, because it is possible that existing code that\r\n  defines valid `Foldable1`
  instances will need to be migrated. If you have an\r\n  instance like this:\r\n\r\n
  \ ```hs\r\n  import Data.Semigroup.Foldable\r\n\r\n  data T a = MkT a\r\n\r\n  instance
  Foldable T where\r\n    foldMap f (MkT x) = f x\r\n\r\n  instance Foldable1 T --
  Relying on Foldable-based defaults\r\n  ```\r\n\r\n  Then calling `foldMap1` on
  `T` will throw an error with `semigroupoids-6`, as\r\n  `foldMap1`'s default implementation
  no longer uses `Foldable`. To migrate this\r\n  code, change the instance to explicitly
  define `foldMap1`:\r\n\r\n  ```hs\r\n  instance Foldable1 T where\r\n    foldMap1
  f (MkT x) = f x\r\n  ```\r\n\r\n  This approach should be backwards-compatible with
  previous `semigroupoids`\r\n  releases.\r\n\r\n  Some other side effects of this
  migration include:\r\n\r\n  * The `Data.Semigroup.Foldable.Class` module has been
  deprecated. It no\r\n    longer serves a useful role, as it simply re-exports a
  limited subset of\r\n    the `Data.Foldable1` and `Data.Bifoldable1` API.\r\n  *
  All of the `Foldable1` and `Bifoldable1` instances that were previously\r\n    defined
  in `semigroupoids` have now been migrated to downstream libraries\r\n    (`base`,
  `bifunctors`, `containers`, `tagged`, and `transformers`), so it\r\n    is no longer
  strictly necessary to depend on `semigroupoids` to make use of\r\n    these instances.\r\n*
  Add `Generic1`-based functions for many classes, useful for writing instances:\r\n
  \ - `Data.Functor.Alt.(<!>)` -> `Data.Functor.Alt.galt`\r\n  - `Data.Functor.Apply.{liftF2,liftF3}`
  -> `Data.Functor.Apply.{gliftF2,gliftF3}`\r\n  - `Data.Functor.Bind.(>>-)` -> `Data.Functor.Bind.gbind`\r\n
  \ - `Data.Functor.Contravariant.Conclude.{conclude,concluded}` -> `Data.Functor.Contravariant.Conclude.{gconclude,gconcluded}`\r\n
  \ - `Data.Functor.Contravariant.Decide.{decide,decided}` -> `Data.Functor.Contravariant.Decide.{gdecide,gdecided}`\r\n
  \ - `Data.Functor.Contravariant.Divise.{divise,divised}` -> `Data.Functor.Contravariant.Divise.{gdivise,gdivised}`\r\n
  \ - `Data.Functor.Extend.{duplicated,extended}` -> `Data.Functor.Extend.{gduplicated,gextended}`\r\n
  \ - `Data.Functor.Plus.zero` -> `Data.Functor.Plus.gzero`\r\n  - `Data.Semigroup.Foldable.{fold1,foldMap1,toNonEmpty}`
  -> `Data.Semigroup.Foldable.{gfold1,gfoldMap1,gtoNonEmpty}`\r\n  - `Data.Semigroup.Traversable.{traverse1,sequence1}`
  -> `Data.Semigroup.Traversable.{gtraverse1,gsequence1}`\r\n\r\n5.3.7 [2022.01.09]\r\n------------------\r\n*
  Relax the `Bind` constraints in the following instances to `Functor`:\r\n\r\n  ```diff\r\n
  \ -instance (Bind f,    Monad f) => Alt  (MaybeT f)\r\n  -instance (Bind f,    Monad
  f) => Plus (MaybeT f)\r\n  +instance (Functor f, Monad f) => Alt  (MaybeT f)\r\n
  \ +instance (Functor f, Monad f) => Plus (MaybeT f)\r\n\r\n  -instance (Bind f,
  \   Monad f, Semigroup e)           => Alt  (ExceptT e f)\r\n  -instance (Bind f,
  \   Monad f, Semigroup e, Monoid e) => Plus (ExceptT e f)\r\n  +instance (Functor
  f, Monad f, Semigroup e)           => Alt  (ExceptT e f)\r\n  +instance (Functor
  f, Monad f, Semigroup e, Monoid e) => Plus (ExceptT e f)\r\n\r\n   -- If building
  with transformers-0.5.* or older\r\n  -instance (Bind f,    Monad f)          =>
  Alt  (ErrorT e f)\r\n  -instance (Bind f,    Monad f, Error e) => Plus (ErrorT e
  f\r\n  +instance (Functor f, Monad f)          => Alt  (ErrorT e f)\r\n  +instance
  (Functor f, Monad f, Error e) => Plus (ErrorT e f)\r\n  ```\r\n\r\n5.3.6 [2021.10.07]\r\n------------------\r\n*
  Allow building with GHC 9.2.\r\n* Allow building with `transformers-0.6.*`.\r\n*
  Add `Alt` instance for `Identity`.\r\n* Add `Conclude`, `Decide` and `Divise` type
  classes and instances.\r\n* Add `(<.*>)`, `(<*.>)`, and `traverseMaybe` functions,
  which make it easier\r\n  to defined `Traversable1` instances for data types that
  have fields with a\r\n  combination of `Traversable` and `Traversable1` instances.\r\n*
  Add `Semigroupoids.Do` module with overloads for use with `QualifiedDo`.\r\n* Add
  `Apply`, `Alt`, `Plus`, `Bind` and `BindTrans` instances for the CPS\r\n  versions
  of `WriterT` and `RWST`.\r\n* Add `psum` function to `Data.Functor.Plus`.\r\n* Add
  `Categorical` data type.\r\n\r\n5.3.5 [2020.12.31]\r\n------------------\r\n* The
  build-type has been changed from `Custom` to `Simple`.\r\n  To achieve this, the
  `doctests` test suite has been removed in favor of using\r\n  [`cabal-docspec`](https://github.com/phadej/cabal-extras/tree/master/cabal-docspec)\r\n
  \ to run the doctests.\r\n* Explicitly mark modules as `Safe`.\r\n\r\n5.3.4 [2019.11.26]\r\n------------------\r\n*
  Achieve forward compatibility with\r\n  [GHC proposal 229](https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0229-whitespace-bang-patterns.rst).\r\n\r\n5.3.3
  [2019.08.27]\r\n------------------\r\n* Add `Alt` and `Plus` instances for `HashMap`
  from the `unordered-containers`\r\n  package.\r\n\r\n5.3.2 [2019.01.04]\r\n------------------\r\n*
  Bump the lower bound on `semigroups` to 0.16.2, and avoid incurring\r\n  the dependency
  entirely on recent GHCs.\r\n* Fix the build on GHC 7.0 and 7.2.\r\n\r\n5.3.1 [2018.07.02]\r\n------------------\r\n*
  Fix a regression introduced in `semigroupoids-5.3` in which some modules\r\n  regressed
  from `Trustworthy` to `Unsafe`.\r\n\r\n5.3 [2018.07.02]\r\n----------------\r\n*
  Allow building with `containers-0.6`.\r\n* Add `Alt` instances for `First` and `Last`
  from `Data.Semigroup`, and\r\n  `Alt` and `Plus` instances for `First` and `Last`
  from `Data.Monoid`.\r\n* Add missing `Apply`, `Bind`, `Extend`, `Foldable1` and
  `Traversable1`\r\n  instances for `Data.Semigroups`, `Data.Monoid` and `GHC.Generics`.\r\n\r\n5.2.2
  [2018.01.18]\r\n------------------\r\n* Add `optional` to `Data.Functor.Alt` (analogous
  to the `optional` function\r\n  in `Control.Applicative`)\r\n* `liftF2` is now a
  class method of `Apply` (mirroring the fact that `liftA2`\r\n  is now a class method
  of `Applicative`). `liftF2` and `(<.>)` have default\r\n  definitions in terms of
  the other.\r\n* Allow building with GHC 8.4\r\n* `Apply` and `Bind` instances for
  `Q`, from the `template-haskell` package.\r\n  (As a consequence, `Data.Semigroup.Foldable`
  is no longer a `Trustworthy`\r\n  module.)\r\n* Add instances for `(:~:)` and `(:~~:)`
  from `Data.Type.Equality`, and\r\n  `Coercion` from `Data.Type.Coercion`\r\n\r\n5.2.1\r\n-----\r\n*
  Add the `toNonEmpty` method to `Foldable1`. Add `foldrM1` and `foldlM1`\r\n  functions
  to `Data.Semigroup.Foldable` that are defined in terms of `toNonEmpty`.\r\n* Add
  `Apply`, `Bind`, `Foldable1`, and `Traversable1` instances for `Complex`\r\n* Add
  `Apply` and `Bind` instances for `HashMap` from the `unordered-containers` package\r\n
  \ (on which `semigroupoids` now depends)\r\n* Add `Semigroupoid` instances for `Tagged`
  and `Const`\r\n\r\n5.2\r\n---\r\n* Revamp `Setup.hs` to use `cabal-doctest`. This
  makes it build\r\n  with `Cabal-1.25`, and makes the `doctest`s work with `cabal
  new-build` and\r\n  sandboxes.\r\n* Added instances to `Alt`, `Plus`, `Apply`, `Bind`
  and `Extend` for `GHC.Generics`, `Tagged` and `Proxy` where appropriate.\r\n\r\n5.1\r\n---\r\n*
  The remaining orphan instances in `Data.Traversable.Instances` have been replaced
  in favor of the orphan instances from `transformers-compat-0.5`.\r\n* The documentation
  now states laws that instances of `Apply` are expected to uphold.\r\n* `doctest-0.11`
  support\r\n* Fixed compilation of tests with `stack`\r\n\r\n5.0.1\r\n-------\r\n*
  `transformers-compat` 0.5 support\r\n* Removed some redundant constraints.\r\n*
  GHC 8 support\r\n\r\n5.0.0.4\r\n-------\r\n* `doctest` 0.10 support\r\n\r\n5.0.0.2\r\n-------\r\n*
  Bugfix for GHC 7.4. PolyKinds on 7.4 cause all sorts of haskell interface file errors.
  One of the #if guards that turned it off on 7.4 was missing and has been fixed.\r\n\r\n5.0.0.1\r\n-------\r\n*
  Added the CHANGELOG to the distribution so that `hackage` can link to it in the
  haddocks.\r\n\r\n5\r\n-\r\n* Absorbed `Data.Bifunctor.Apply`, `Data.Semigroup.Bifoldable`
  and `Data.Semigroup.Traversable` from `bifunctors`.\r\n* This caused us to pick
  up a dependency on `tagged`.\r\n* Exiled `Data.Semifunctor.*`, `Data.Semigroupoid.Product`
  and `Data.Semigroupoid.Coproduct` to `semigroupoid-extras`.\r\n* This let us open
  up to older versions of GHC again.\r\n* Set an explicit fixity for `-<-` and `->-`.\r\n\r\n4.5\r\n---\r\n*
  Major changes to the API to support PolyKinds and DataKinds. This necessarily shuts
  off GHC <= 7.4.\r\n* Orphan instances have moved upstream into a common `base-orphans`
  package.\r\n\r\n4.3.1\r\n-----\r\n* Added `asum1` to `Data.Semigroup.Foldable`.\r\n\r\n4.3.0.1\r\n-------\r\n*
  Support for 'ConstrainedClassMethods' is currently required for GHC HEAD.\r\n\r\n4.3\r\n-----\r\n*
  Added missing instances for `ExceptT`. Obtain it via `transformers-compat` if need
  be for old `transformers` versions.\r\n* Several `Bind` and `Apply` instances now
  require somewhat more minimal contexts.\r\n\r\n4.2\r\n---\r\n* Backported `Foldable`/`Traversable`
  instances from `lens`\r\n\r\n4.1\r\n---\r\n* `Foldable1`/`Traversable1` for tuples\r\n\r\n4.0.4\r\n-----\r\n*
  `contravariant` 1.0 support.\r\n\r\n4.0.3\r\n---\r\n* Added flags to provide unsupported
  cabal sandbox build modes.\r\n\r\n4.0.1\r\n-----\r\n* Fixed bitrot in the `Data.Functor.Extend`
  documentation.\r\n* Fixed warnings on GHC 7.8.1rc2 caused by importing `Control.Monad.Instances`.\r\n\r\n4.0\r\n---\r\n*
  Merged in the contents of the `groupoids` and `semigroupoid-extras` packages.\r\n\r\n3.1\r\n---\r\n*
  Added the [rectangular band](http://en.wikipedia.org/wiki/Band_(mathematics)#Rectangular_bands)
  `Semigroupoid` for `(,)`. Would that make it a Bandoid?\r\n\r\n3.0.3\r\n-----\r\n*
  Claim to be `Trustworthy` where necessary\r\n\r\n3.0.2\r\n-----\r\n* Tightened the
  upper bounds slightly to enable PVP compliance while retaining a flexible development
  cycle.\r\n* Raised the upper bound on `contravariant`.\r\n\r\n3.0.1\r\n-----\r\n*
  Removed upper bounds relative to my other packages\r\n* Refactored directory layout\r\n"
basic-deps:
  base: '>=4.9 && <5'
  comonad: '>=5.0.8 && <6'
  unordered-containers: '>=0.2.8.0 && <0.3'
  distributive: '>=0.5.2 && <1'
  foldable1-classes-compat: '>=0.1 && <0.2'
  base-orphans: '>=0.8.4 && <1'
  tagged: '>=0.8.7 && <1'
  containers: '>=0.5.7.1 && <0.7'
  bifunctors: '>=5.6 && <6'
  contravariant: '>=1.5.3 && <2'
  hashable: '>=1.2.7.0 && <1.5'
  transformers: '>=0.5 && <0.7'
  template-haskell: '>=0.2.11'
  transformers-compat: '>=0.6 && <0.8'
all-versions:
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.2.0
- 1.2.1
- 1.2.2
- 1.2.2.1
- 1.2.2.2
- 1.2.2.3
- 1.2.2.4
- 1.2.4
- 1.2.5
- 1.2.6
- 1.2.6.1
- 1.2.6.2
- '1.3'
- 1.3.1
- 1.3.1.1
- 1.3.1.2
- 1.3.2
- 1.3.2.1
- 1.3.3
- 1.3.4
- '3.0'
- 3.0.0.1
- 3.0.0.2
- 3.0.1
- 3.0.2
- 3.0.3
- '3.1'
- '4.0'
- 4.0.1
- 4.0.2
- 4.0.2.1
- 4.0.3
- 4.0.4
- '4.2'
- '4.3'
- '5'
- 5.0.0.1
- 5.0.0.2
- 5.0.0.3
- 5.0.0.4
- 5.0.1
- '5.1'
- '5.2'
- 5.2.1
- 5.2.2
- 5.3.1
- 5.3.2
- 5.3.3
- 5.3.4
- 5.3.5
- 5.3.6
- 5.3.7
- 6.0.0.1
author: Edward A. Kmett
latest: 6.0.0.1
description-type: markdown
description: "semigroupoids\r\n=============\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/semigroupoids.svg)](https://hackage.haskell.org/package/semigroupoids)
  [![Build Status](https://github.com/ekmett/semigroupoids/workflows/Haskell-CI/badge.svg)](https://github.com/ekmett/semigroupoids/actions?query=workflow%3AHaskell-CI)\r\n\r\nA
  semigroupoid is a `Category` without `id`. This package provides a range of \r\n`id`-free
  versions of type classes, as well as some supporting functions and\r\ndata types.\r\n\r\nField
  Guide\r\n-----------\r\n\r\nThe diagram below describes the relationships between
  the type classes defined\r\nin this package, and those from `base` (with some from
  `contravariant` as well). Thick-bordered\r\nnodes correspond to type classes defined
  in this package; thin-bordered ones are\r\nfrom elsewhere. Solid edges represent
  subclass relationships that actually\r\nexist; dashed edges are those which _should_
  exist in theory.\r\n\r\n![A diagram of the relationships between type classes defined
  in this package and elsewhere.](https://raw.github.com/ekmett/semigroupoids/master/img/classes.svg)\r\n\r\nWe
  also provide the following table. This is structured in superclass order -\r\nthus,
  for any type class `T`, all superclasses of `T` will be listed before `T`\r\nin
  the table.\r\n\r\n|**Name**|**Location**|**Superclass of**|**Ideally superclass
  of**|\r\n|--------|------------|-----------------|-------------------------|\r\n|`Functor`|`base`|`Alt`,
  `Apply`, `Traversable`||\r\n|`Foldable`|`base`|`Traversable`, `Foldable1`||\r\n|`Bifunctor`|`base`|`Biapply`||\r\n|`Contravariant`|`base`|`Divise`,
  `Decide`||\r\n|`Semigroupoid`|`semigroupoids`||`Category`|\r\n|`Alt`|`semigroupoids`|`Plus`||\r\n|`Apply`|`semigroupoids`|`Bind`|`Applicative`|\r\n|`Traversable`|`base`|`Traversable1`||\r\n|`Foldable1`|`semigroupoids`|`Traversable1`||\r\n|`Biapply`|`semigroupoids`|||\r\n|`Divise`|`semigroupoids`||`Divisible`|\r\n|`Decide`|`semigroupoids`|`Conclude`|`Decidable`|\r\n|`Category`|`base`|`Arrow`||\r\n|`Plus`|`semigroupoids`||`Alternative`|\r\n|`Applicative`|`base`|`Alternative`,
  `Monad`||\r\n|`Bind`|`semigroupoids`||`Monad`|\r\n|`Traversable1`|`semigroupoids`|||\r\n|`Divisible`|`contravariant`|||\r\n|`Conclude`|`semigroupoids`||`Decidable`|\r\n|`Arrow`|`base`|||\r\n|`Alternative`|`base`|`MonadPlus`||\r\n|`Monad`|`base`|`MonadPlus`||\r\n|`Decidable`|`contravariant`|||\r\n|`MonadPlus`|`base`|||\r\n\r\nWe
  omit some type class relationships from this diagram, as they are not\r\nrelevant
  for the purposes of this package.\r\n\r\nContact Information\r\n-------------------\r\n\r\nContributions
  and bug reports are welcome!\r\n\r\nPlease feel free to contact me through Github
  or on the #haskell IRC channel on\r\nLiberaChat.\r\n\r\n-Edward Kmett\r\n"
license-name: BSD-2-Clause
