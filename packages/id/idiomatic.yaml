all-versions:
- 0.1.0.0
- 0.1.1.0
author: Baldur Blöndal
basic-deps:
  base: '>=4 && <5'
  idiomatic: '>=0'
changelog: |
  # Revision history for idiomatic

  ## 0.1.1.0 -- 2022-04-16

  * Forgot to export `LeftBias` and `RightBias` from `Generic.Applicative`.
  * Added an examples directory: `cabal configure -f examples`.
  * Made explicit export lists.
  * Documentation.

  ## 0.1.0.0 -- 2022-04-09

  * Released `Idiomatically` to derive Applicative for sum types.
changelog-type: markdown
description: "Deriving Applicative sums... Idiomatically!\n==================================\n\n`Idiomatically`
  is used with `DerivingVia` to derive `Applicative` for\nsum types. It takes as an
  argument a list of sum constructors that it\nuses to tweak the generic representation
  of a type.\n\n```haskell\n{-# Language DataKinds          #-}\n{-# Language DeriveGeneric
  \     #-}\n{-# Language DerivingStrategies #-}\n{-# Language DerivingVia        #-}\n\nimport
  Generic.Applicative\n\ndata Maybe a = Nothing | Just a\n  deriving\n  stock Generic1\n\n
  \ deriving (Functor, Applicative)\n  via Idiomatically Maybe '[RightBias Terminal]\n```\n\nThis
  comes with two tagged newtypes over\n[`Sum`](https://hackage.haskell.org/package/base/docs/Data-Functor-Sum.html)\nthat
  are biased toward the left and right constructor.\n\n```haskell\nnewtype LeftBias
  \ tag l r a = LeftBias  (Sum l r a)\nnewtype RightBias tag l r a = RightBias (Sum
  l r a)\n```\n\n```haskell\n  pure = LeftBias  . InL . pure @l\n  pure = RightBias
  . InR . pure @r\n```\n\nand an extensible language for type-level _applicative morphisms_\n(`Idiom`)
  used to map away from the `pure` constructor.\n\n```haskell\n-- Applicative morphisms
  preserve the `Applicative` operations\n--\n--   idiom (pure @f a)           = pure
  @g a\n--   idiom (liftA2 @f (·) as bs) = liftA2 @g (·) (idiom as) (idiom bs)\n--\ntype
  \ Idiom :: t -> (Type -> Type) -> (Type -> Type) -> Constraint\nclass (Applicative
  f, Applicative g) => Idiom tag f g where\n  idiom :: f ~> g\n```\n\nThis means for
  `LeftBias tag l r` we map from the left-to-right and\nthat for `RightBias tag l
  r` we map from right-to-left.\n\n```haskell\ninstance Idiom tag l r => Applicative
  (LeftBias  tag l r)\ninstance Idiom tag r l => Applicative (RightBias tag l r)\n```\n\nFor
  example, the identity applicative morphism\n\n```haskell\ndata Id\ninstance f ~
  g => Idiom Id f g where\n  idiom :: f ~> f\n  idiom = id\n```\n\ncan be used to
  derive two different instances for the same datatype by\neither defecting from the
  the left constructor (`LPure`) or from the\nright constructor (`RPure`).\n\n```haskell\n--
  >> pure @L True\n-- LPure True\n-- >> liftA2 (+) (LPure 1) (L 100)\n-- L 101\ndata
  L a = LPure a | L a\n  deriving stock (Show, Generic1)\n\n  deriving (Functor, Applicative)\n
  \ via Idiomatically L '[LeftBias Id]\n\n-- >> pure @R False\n-- RPure False\n--
  >> liftA2 (+) (RPure 1) (R 100)\n-- R 101\ndata R a = R a | RPure a\n  deriving
  stock (Show, Generic1)\n\n  deriving (Functor, Applicative) \n  via Idiomatically
  R '[RightBias Id]\n```\n\nMore compliated descriptions are possible where we mediate
  between\nmultiple constructors:\n\n```haskell\n-- >> pure @Ok 10\n-- Ok1 10\n--
  >> liftA2 (+) (Ok1 10) (Ok5 20)\n-- Ok3 [Just 30]\n-- >> liftA2 (+) (Ok2 [1..4])
  (Ok5 20)\n-- Ok3 [Just 21,Just 22,Just 23,Just 24]\n-- >> liftA2 (+) (Ok2 [1..4])
  (Ok4 Nothing)\n-- Ok3 [Nothing,Nothing,Nothing,Nothing]\ndata Ok a = Ok1 a | Ok2
  [a] | Ok3 [Maybe a] | Ok4 (Maybe a) | Ok5 a\n  deriving\n  stock (Show, Generic1)\n\n
  \ deriving (Functor, Applicative) \n  via Idiomatically Ok\n    '[ LeftBias Initial
  \      -- Ok1 to Ok2: pure\n     , LeftBias Inner         -- Ok2 to Ok3: fmap pure\n
  \    , RightBias Outer        -- Ok4 to Ok3: pure\n     , RightBias Initial      --
  Ok5 to Ok4: pure\n     ]\n```\n\nRelationship to `Generically1`\n-----------\n\n`Generically1`
  was recently introduced to `GHC.Generics` (_base\n4.17.0.0_) with the ability to
  derive `Applicative` for generic type\nconstructors, among other things. Before
  it was added to _base_ it was\nfound in the\n[_generic-data_](https://hackage.haskell.org/package/generic-data-0.9.2.1/docs/Generic-Data-Internal-Generically.html#t:Generically1)\npackage.\n\nFor
  `Applicative` in particular it uses the underlying generic\nrepresentation of a
  type; if that representation has an `Applicative`\ninstance then `Applicative` can
  be derived.\n\n```haskell\nimport GHC.Generics (Generically1(..))\n\ndata F a =
  F a String a a [[[a]]] (Int -> Maybe a)\n  deriving stock Generic1\n\n  deriving
  (Functor, Applicative) via Generically1 F\n```\n\nThis works well for product types
  but it does not work for sum types\nsince there is no `Appliative (Sum f g)` or
  `Applicative (f :+: g)`\ninstance.\n\nIn this sense, `Generically1` can be recovered
  by passing an empty\nlist of sums to `Idiomatically`:\n\n```haskell\n  Generically1
  \ F\n= Idiomatically F '[]\n```\n\n`Idiomatically` is also defined in terms of `Generically1`:\n\n```haskell\ntype
  Idiomatically :: (k -> Type) -> [SumKind k] -> (k -> Type)\ntype Idiomatically f
  sums = Generically1 (NewSums (Served sums) f)\n```\n\nThe argument to `Generically1`
  is less important, what is basically\nhappening is that `NewSums` modifies the generic
  behaviour of `f`: it\ntraverses the generic representation `Rep1 f` and replace
  every sum\nwith an `Applicative` sum from type-level list.\n\nThis means we can
  define `Idiomatically` in terms of\n`Generically1`. There is an `Applicative` instance
  for `Generically1`\nif its representation is `Applicative`, by tweaking the representation\nof
  its argument we have thus managed to configure `Generically1` even\nthough it has
  no configuration parameter!\n\n"
description-type: markdown
hash: f10097a09bd257413665242f821d8ad583c5e7ef00ca2bae22ef32d4fe0b051b
homepage: https://github.com/Icelandjack/idiomatic
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: Baldur Blöndal
synopsis: Deriving Applicative for sum types.. Idiomatically.
test-bench-deps: {}
