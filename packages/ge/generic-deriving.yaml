homepage: https://github.com/dreixel/generic-deriving
changelog-type: markdown
hash: 8395764ff8bef9e688b9681dff3bcd0dbb324a22192e5981bcba10afa75b9ac4
test-bench-deps:
  base: '>=4.3 && <5'
  hspec: '>=2 && <3'
  generic-deriving: -any
  template-haskell: '>=2.4 && <2.21'
maintainer: generics@haskell.org
synopsis: Generic programming library for generalised deriving.
changelog: "# 1.14.4 [2023.04.30]\r\n* Allow building with GHC backends where `HTYPE_SIG_ATOMIC_T`
  is not defined,\r\n  such as the WASM backend.\r\n* Place `INLINE [1]` pragmas on
  `from` and `to` implementations when types\r\n  don't have too many constructors
  or fields, following the heuristics that GHC\r\n  9.2+ uses for `Generic` deriving.\r\n\r\n#
  1.14.3 [2023.02.27]\r\n* Support `th-abstraction-0.5.*`.\r\n\r\n# 1.14.2 [2022.07.23]\r\n*
  Fix a bug in which `deriveAll1` could generate ill kinded code when using\r\n  `kindSigOptions=False`,
  or when using GHC 8.0 or earlier.\r\n* Fix a bug in which `deriveAll1` would reject
  data types whose last type\r\n  variable has a kind besides `Type` or `k` on GHC
  8.2 or later.\r\n\r\n# 1.14.1 [2021.08.30]\r\n* Backport the `Generic(1)` instances
  introduced for tuples (8 through 15) in\r\n  `base-4.16`.\r\n* Make the test suite
  compile on GHC 9.2 or later.\r\n* Always import `Data.List` qualified to fix the
  build with recent GHCs.\r\n\r\n# 1.14 [2020.09.30]\r\n* Remove instances for `Data.Semigroup.Option`,
  which is deprecated as of\r\n  `base-4.15.0.0`.\r\n* Allow building with `template-haskell-2.17.0.0`
  (GHC 9.0).\r\n* Fix a bug in which `deriveAll1` would needlessly reject data types
  whose last\r\n  type parameter appears as an oversaturated argument to a type family.\r\n\r\n#
  1.13.1 [2019.11.26]\r\n* Backport the `Generic(1)` instances for `Kleisli` introduced
  in `base-4.14`.\r\n\r\n# 1.13 [2019.08.27]\r\n* Make `GSemigroup` a superclass of
  `GMonoid`. Similarly, make\r\n  `GSemigroup'` a superclass of `GMonoid'`.\r\n* In
  the instance `GMonoid (Maybe a)`, relax the constraint on `a` from\r\n  `GMonoid`
  to `GSemigroup`.\r\n\r\n# 1.12.4 [2019.04.26]\r\n* Support `th-abstraction-0.3.0.0`
  or later.\r\n\r\n# 1.12.3 [2019.02.09]\r\n* Support `template-haskell-2.15`.\r\n*
  Add a `gshowList` method to `GShow`, which lets us avoid the need for\r\n  `OverlappingInstances`
  in `Generics.Deriving.TH`. As a consequence, the\r\n  `GShow String` instance has
  been removed, as it is now fully subsumed by\r\n  the `GShow [a]` instance (with
  which it previously overlapped).\r\n* Functions in `Generics.Deriving.TH` now balance
  groups of `(:*:)` and `(:+:)`\r\n  as much as possible (`deriving Generic` was already
  performing this\r\n  optimization, and now `generic-deriving` does too).\r\n* Add
  a `Generics.Deriving.Default` module demonstrating and explaining\r\n  how and why
  to use `DerivingVia`. There is also a test suite with\r\n  further examples.\r\n\r\n#
  1.12.2 [2018.06.28]\r\n* Backport the `Generic(1)` instances for `Data.Ord.Down`,
  introduced in\r\n  `base-4.12`. Add `GEq`, `GShow`, `GSemigroup`, `GMonoid`, `GFunctor`,\r\n
  \ `GFoldable`, `GTraversable`, and `GCopoint` instances for `Down`.\r\n* Refactor
  internals using `th-abstraction`.\r\n* Adapt to `Maybe` moving to `GHC.Maybe` in
  GHC 8.6.\r\n\r\n# 1.12.1 [2018.01.11]\r\n* Remove a test that won't work on GHC
  8.4.\r\n\r\n# 1.12 [2017.12.07]\r\n* Adapt to the `EmptyDataDeriving` proposal (introduced
  in GHC 8.4):\r\n  * `Generics.Deriving.TH` now derives `to(1)` and `from(1)` implementations\r\n
  \   for empty data types that are strict in the argument.\r\n  * Introduce an `EmptyCaseOptions`
  field to `Options` in\r\n    `Generics.Deriving.TH`, which controls whether generated
  `from(1)`/`to(1)`\r\n    implementations for empty data types should use the `EmptyCase`
  extension\r\n    or not (as is the case in GHC 8.4).\r\n  * Add `mkFrom0Options`,
  `mkFrom1Options`, `mkTo0Options`, and `mkTo1Options`\r\n    functions to `Generics.Deriving.TH`,
  which take `EmptyCaseOptions` as\r\n    arguments.\r\n  * The backported instances
  for `V1` are now maximally lazy, as per\r\n    `EmptyDataDeriving`. (Previously,
  some instances would unnecessarily force\r\n    their argument, such as the `Eq`
  and `Ord` instances.)\r\n  * Add instances for `V1` in `Generics.Deriving.Copoint`,
  `.Eq`, `.Foldable`,\r\n    `.Functor`, `.Show`, and `.Traversable`.\r\n* Remove
  the bitrotting `simplInstance` function from `Generics.Deriving.TH`.\r\n\r\n# 1.11.2
  [2017.04.10]\r\n* Add `GEq`, `GShow`, `GEnum`, and `GIx` instances for the new data
  types\r\n  in `Foreign.C.Types` (`CBool`) and `System.Posix.Types` (`CBlkSize`,\r\n
  \ `CBlkCnt`, `CClockId`, `CFsBlkCnt`, `CFsFilCnt`, `CId`, `CKey`, and `CTimer`)\r\n
  \ introduced in `base-4.10.0.0`\r\n\r\n# 1.11.1 [2016.09.10]\r\n* Fix Template Haskell
  regression involving data families\r\n* Convert examples to test suite\r\n* Backport
  missing `Data` and `Typeable` instances for `Rec1`, `M1`, `(:*:)`,\r\n  `(:+:)`,
  and `(:.:)`\r\n\r\n# 1.11\r\n* The behavior of functions in `Generics.Deriving.TH`
  have changed with respect\r\n  to when type synonyms are generated for `Rep(1)`
  definitions. In particular:\r\n\r\n  * By default, `deriveRepresentable(1)` will
  no longer define its `Rep(1)`\r\n    type family instance in terms of the type synonym
  that has to be generated\r\n    with `deriveRep(1)`. Similarly, `deriveAll(1)` and
  `deriveAll0And1` will no\r\n    longer generate a type synonym. Instead, they will
  generate `Generic(1)`\r\n    instances that directly define the `Rep(1)` instance
  inline. If you wish\r\n    to revert to the old behavior, you will need to use the
  variants of those\r\n    functions suffixed with `-Options`.\r\n  * New functions
  `makeRep0Inline` and `makeRep1Inline` have been added which,\r\n    for most purposes,
  should replace uses of `makeRep0`/`makeRep0FromType`\r\n    and `makeRep1`/`makeRep1FromType`
  (but see the next bullet point for a\r\n    caveat).\r\n  * The use of `deriveRep(1)`,
  `makeRep0`/`makeRep0FromType`, and\r\n    `makeRep1`/`makeRep1FromType` are now
  discouraged, but those functions are\r\n    still available. The reason is that
  on GHC 7.0/7.2/7.4, it is impossible to use\r\n    `makeRep0Inline`/`makeRep1Inline`
  due to a GHC bug. Therefore, you must use\r\n    `makeRep0`/`makeRep1` and `deriveRep(1)`
  on GHC 7.0/7.2/7.4 out of necessity.\r\n\r\n  These changes make dealing with `Generic`
  instances that involve `PolyKinds`\r\n  and `TypeInType` much easier.\r\n* All functions
  suffixed in `-WithKindSigs` in `Generics.Deriving.TH` have been\r\n  removed in
  favor of a more sensible `-Options` suffixing scheme. The ability to\r\n  toggle
  whether explicit kind signatures are used on type variable binders has\r\n  been
  folded into `KindSigOptions`, which is an explicit argument to\r\n  `deriveRep0Options`/`deriveRep1Options`
  and also a field in the more general\r\n  'Options' data type.\r\n* Furthermore,
  the behavior of derived instances' kind signatures has changed.\r\n  By default,
  the TH code will now _always_ use explicit kind signatures\r\n  whenever possible,
  regardless of whether you're working with plain data types\r\n  or data family instances.
  This makes working with `TypeInType` less\r\n  surprising, but at the cost of making
  it slightly more awkward to work with\r\n  derived `Generic1` instances that constrain
  kinds to `*` by means of `(:.:)`.\r\n* Since `Generic1` is polykinded on GHC 8.2
  and later, the functions in\r\n  `Generics.Deriving.TH` will no longer unify the
  kind of the last type\r\n  parameter to be `*`.\r\n* Fix a bug in which `makeRep`
  (and similarly named functions) would not check\r\n  whether the argument type can
  actually have a well kinded `Generic(1)`\r\n  instance.\r\n* Backport missing `Foldable`
  and `Traversable` instances for `Rec1`\r\n\r\n# 1.10.7\r\n* Renamed internal modules
  to avoid using apostrophes (averting this bug:\r\n  https://github.com/haskell/cabal/issues/3631)\r\n\r\n#
  1.10.6\r\n* A new `base-4-9` Cabal flag was added to more easily facilitate installing\r\n
  \ `generic-deriving` with manually installed versions of `template-haskell`.\r\n\r\n#
  1.10.5\r\n* Apply an optimization to generated `to(1)`/`from(1)` instances that
  factors out\r\n  common occurrences of `M1`. See\r\n  http://git.haskell.org/ghc.git/commit/9649fc0ae45e006c2ed54cc5ea2414158949fadb\r\n*
  Export internal typeclass names\r\n* Fix Haddock issues with GHC 7.8\r\n\r\n# 1.10.4.1\r\n*
  Fix Haddock parsing issue on GHC 8.0\r\n\r\n# 1.10.4\r\n* Backported `MonadPlus`
  and `MonadZip` instances for `U1`, and made the\r\n  `Functor`, `Foldable`, `Traversable`,
  `Alternative`, and `Monad` instances\r\n  for `U1` lazier to correspond with `base-4.9`\r\n\r\n#
  1.10.3\r\n* Backported `Enum`, `Bounded`, `Ix`, `Functor`, `Applicative`, `Monad`,\r\n
  `MonadFix`, `MonadPlus`, `MonadZip`, `Foldable`, `Traversable`, and\r\n `Data` instances
  (introduced in `base-4.9`) for datatypes in the\r\n `Generics.Deriving.Base` module\r\n\r\n#
  1.10.2\r\n* Fix TH regression on GHC 7.0\r\n\r\n# 1.10.1\r\n* Added `Generics.Deriving.Semigroup`\r\n*
  Added `GMonoid` instance for `Data.Monoid.Alt`\r\n* Fixed a bug in the `GEnum` instances
  for unsigned `Integral` types\r\n* Added `Safe`/`Trustworthy` pragmas\r\n* Made
  instances polykinded where possible\r\n\r\n# 1.10.0\r\n* On GHC 8.0 and up, `Generics.Deriving.TH`
  uses the new type literal-based\r\n  machinery\r\n* Rewrote the Template Haskell
  code to be robust. Among other things, this fixes\r\n  a bug with deriving Generic1
  instances on GHC 7.8, and makes it easier to\r\n  derive Generic1 instances for
  datatypes that utilize GHC 8.0's `-XTypeInType`\r\n  extension.\r\n* Added `deriveAll0`
  and `makeRep0` for symmetry with `deriveAll1` and\r\n  `makeRep1`\r\n* Added`makeRep0FromType`
  and `makeRep1FromType` to make it easier to pass\r\n  in the type instance (instead
  of having to pass each individual type\r\n  variable, which can be error-prone)\r\n*
  Added functions with the suffix `-WithKindSigs` to allow generating type\r\n  synonyms
  with explicit kind signatures in the presence of kind-polymorphic\r\n  type variables.
  This is necessary for some datatypes that use\r\n  `-XTypeInType` to have derived
  `Generic(1)` instances, but is not turned on\r\n  by default since the TH kind inference
  is not perfect and would cause\r\n  otherwise valid code to be rejected. Use only
  if you know what you are doing.\r\n* Fixed bug where a datatype with a single, nullary
  constructor would generate\r\n  incorrect `Generic` instances\r\n* More sensible
  `GEnum` instances for fixed-size integral types\r\n* Added `GCopoint`, `GEnum`,
  `GEq`, `GFoldable`, `GFunctor`, `GMonoid`,\r\n  `GShow`, and `GTraversable` instances
  for datatypes introduced in GHC 8.0\r\n* Backported `Generic(1)` instances added
  in GHC 8.0. Specifically, `Generic`\r\n  instances for `Complex` (`base-4.4` and
  later) `ExitCode`, and `Version`; and\r\n  `Generic1` instances for `Complex` (`base-4.4`
  and later) and `Proxy`\r\n  (`base-4.7` and later). Added `GEnum`, `GEq`, `GFoldable`,
  `GFunctor`, `GIx`,\r\n  `GShow`, and `GTraversable` instances for these datatypes
  where appropriate.\r\n\r\n# 1.9.0\r\n* Allow deriving of Generic1 using Template
  Haskell\r\n* Allow deriving of Generic(1) for data families\r\n* Allow deriving
  of Generic(1) for constructor-less plain datatypes (but not\r\n  data families,
  due to technical restrictions)\r\n* Support for unboxed representation types on
  GHC 7.11+\r\n* More `GCopoint`, `GEnum`, `GEq`, `GFoldable`, `GFunctor`, `GIx`,
  `GMonoid`,\r\n  `GShow`, and `GTraversable` instances\r\n* The field accessors for
  the `(:+:)` type in `Generics.Deriving.Base` have\r\n  been removed to be consistent
  with `GHC.Generics`\r\n* Ensure that TH generates definitions for isNewtype and
  packageName, if a\r\n  recent-enough version of GHC is used\r\n* Ensure that TH-generated
  names are unique for a given data type's module and\r\n  package (similar in spirit
  to Trac #10487)\r\n* Allow building on stage-1 compilers\r\n"
basic-deps:
  base: '>=4.9 && <5'
  th-abstraction: '>=0.4 && <0.6'
  containers: '>=0.1 && <0.7'
  ghc-prim: <1
  template-haskell: '>=2.4 && <2.21'
all-versions:
- '0.3'
- 0.3.1
- '0.4'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.2.1
- 1.2.2
- 1.3.0
- 1.3.1
- 1.4.0
- 1.5.0
- '1.6'
- 1.6.1
- 1.6.2
- 1.6.3
- 1.7.0
- 1.8.0
- 1.9.0
- 1.10.0
- 1.10.2
- 1.10.3
- 1.10.4
- 1.10.4.1
- 1.10.5
- 1.10.6
- 1.10.7
- '1.11'
- 1.11.1
- 1.11.2
- '1.12'
- 1.12.1
- 1.12.2
- 1.12.3
- 1.12.4
- '1.13'
- 1.13.1
- '1.14'
- 1.14.1
- 1.14.2
- 1.14.3
- 1.14.4
author: José Pedro Magalhães
latest: 1.14.4
description-type: markdown
description: "## `generic-deriving`: Generic programming library for generalised deriving\r\n[![Hackage](https://img.shields.io/hackage/v/generic-deriving.svg)][Hackage:
  generic-deriving]\r\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/generic-deriving.svg)](http://packdeps.haskellers.com/reverse/generic-deriving)\r\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\r\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\r\n[![Build Status](https://github.com/dreixel/generic-deriving/workflows/Haskell-CI/badge.svg)](https://github.com/dreixel/generic-deriving/actions?query=workflow%3AHaskell-CI)\r\n\r\n[Hackage:
  generic-deriving]:\r\n  http://hackage.haskell.org/package/generic-deriving\r\n
  \ \"generic-deriving package on Hackage\"\r\n[Haskell.org]:\r\n  http://www.haskell.org\r\n
  \ \"The Haskell Programming Language\"\r\n[tl;dr Legal: BSD3]:\r\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\r\n
  \ \"BSD 3-Clause License (Revised)\"\r\n\r\nThis package provides functionality
  for generalising the deriving mechanism\r\nin Haskell to arbitrary classes. It was
  first described in the paper:\r\n\r\n* [A generic deriving mechanism for Haskell](http://dreixel.net/research/pdf/gdmh.pdf).\r\n
  \ Jose Pedro Magalhaes, Atze Dijkstra, Johan Jeuring, and Andres Loeh. Haskell'10.\r\n\r\nThe
  current implementation integrates with the new GHC Generics. See\r\nhttp://www.haskell.org/haskellwiki/GHC.Generics
  for more information.\r\nTemplate Haskell code is provided for supporting older
  GHCs.\r\n\r\nThis library is organized as follows:\r\n\r\n* `Generics.Deriving.Base`
  defines the core functionality for GHC generics,\r\n  including the `Generic(1)`
  classes and representation data types.\r\n  On modern versions of GHC, this simply
  re-exports `GHC.Generics` from\r\n  `base`. On older versions of GHC, this module
  backports parts of\r\n  `GHC.Generics` that were not included at the time, including
  `Generic(1)`\r\n  instances.\r\n\r\n* `Generics.Deriving.TH` implements Template
  Haskell functionality for\r\n  deriving instances of `Generic(1)`.\r\n\r\n* Educational
  code: in order to provide examples of how to define and use\r\n  `GHC.Generics`-based
  defaults, this library offers a number of modules\r\n  which define examples of
  type classes along with default implementations\r\n  for the classes' methods. Currently,
  the following modules are provided:\r\n\r\n  * `Generics.Deriving.Copoint`\r\n\r\n
  \ * `Generics.Deriving.ConNames`\r\n\r\n  * `Generics.Deriving.Enum`\r\n\r\n  *
  `Generics.Deriving.Eq`\r\n\r\n  * `Generics.Deriving.Foldable`\r\n\r\n  * `Generics.Deriving.Functor`\r\n\r\n
  \ * `Generics.Deriving.Monoid`\r\n\r\n  * `Generics.Deriving.Semigroup`\r\n\r\n
  \ * `Generics.Deriving.Show`\r\n\r\n  * `Generics.Deriving.Traversable`\r\n\r\n
  \ * `Generics.Deriving.Uniplate`\r\n\r\n  It is worth emphasizing that these modules
  are primarly intended for\r\n  educational purposes. Many of the classes in these
  modules resemble other\r\n  commonly used classes—for example, `GShow` from `Generics.Deriving.Show`\r\n
  \ resembles `Show` from `base`—but in general, the classes that\r\n  `generic-deriving`
  defines are not drop-in replacements. Moreover, the\r\n  generic defaults that `generic-deriving`
  provide often make simplifying\r\n  assumptions that may violate expectations of
  how these classes might work\r\n  elsewhere. For example, the generic default for
  `GShow` does not behave\r\n  exactly like `deriving Show` would.\r\n\r\n  If you
  are seeking `GHC.Generics`-based defaults for type classes in\r\n  `base`, consider
  using the\r\n  [`generic-data`](http://hackage.haskell.org/package/generic-data)
  library.\r\n\r\n* `Generics.Deriving.Default` provides newtypes that allow leveraging
  the\r\n  generic defaults in this library using the `DerivingVia` GHC language\r\n
  \ extension.\r\n\r\n* `Generics.Deriving` re-exports `Generics.Deriving.Base`,\r\n
  \ `Generics.Deriving.Default`, and a selection of educational modules.\r\n"
license-name: BSD-3-Clause
