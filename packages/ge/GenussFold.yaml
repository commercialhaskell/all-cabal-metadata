all-versions:
- 0.0.0.1
- 0.0.0.2
author: Christian Hoener zu Siederdissen, 2015
basic-deps:
  ADPfusion: '>=0.4.1.1 && <0.4.2'
  FormalGrammars: '>=0.2.1 && <0.2.2'
  GenussFold: '>=0'
  PrimitiveArray: '>=0.6.0 && <0.6.2'
  ansi-wl-pprint: '>=0.6.7 && <0.6.8'
  base: '>=4.7 && <4.9'
  bytestring: '>=0.10 && <0.11'
  cmdargs: '>=0.10 && <0.11'
  containers: '>=0'
  data-default: '>=0.5 && <0.6'
  lens: '>=4.0 && <5.0'
  mtl: '>=2.0 && <3.0'
  semigroups: '>=0.16 && <0.17'
  template-haskell: '>=0'
  text: '>=1.0 && <1.3'
  transformers: '>=0.3 && <0.5'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.10 && <0.11'
changelog: |+
  0.0.0.2
  -------

  - quickcheck tests for GenussFold

  0.0.0.1
  -------

  - initial checkin
  - preparing travis.yml
  - Pseudoknot-enabled Nussinov style RNA folding with basepair maximization.

changelog-type: markdown
description: "[![Build Status](https://travis-ci.org/choener/GenussFold.svg?branch=master)](https://travis-ci.org/choener/GenussFold)\n\n#
  GenussFold: RNA Pseudoknot Folding\n\n[*generalized Algebraic Dynamic Programming
  Homepage*](http://www.bioinf.uni-leipzig.de/Software/gADP/)\n\nThe implementation
  makes use of the *gADP* technique and provides a larger\nexample on how to implement
  algorithms that require interleaved, split\nsyntactic variables.\n\nFormal background
  can be found in this paper:\n\nMaik Riechert, Christian Höner zu Siederdissen, and
  Peter F. Stadler  \n*Algebraic dynamic programming for multiple context-free languages*
  \ \n2015, submitted  \n[preprint](http://www.bioinf.uni-leipzig.de/Software/gADP/preprints/rie-hoe-2015.pdf)
  \ \n\n\n\nAs an example, consider palindromic brackets `((()))`. Given two types
  of\nbrackets, these can be interleaved: `((( [[[ ))) ]]]`. Such interleaved,\nlong-range
  dependencies have been observed in human languages and, in\nparticular, in RNA bioinformatics.\n\nRNA
  structures may form so-called pseudoknots, where the RNA structure does not\nyield
  a planar structure (the canonical secondary structure) anymore, but\nrather forms
  graphs with crossing edges. Using the idea of interleaved brackets\nand given an
  input sequence `AAA CCC UUU GGG` (with artificial white space to\nmake this more
  clear), a pseudoknotted structure may be formed:\n\n```\nAAA CCC UUU GGG  \n[[[
  ((( ]]] )))\n```\n\nA formal grammar that parses such a structure requires the ability
  to denote\nthat a sub-structure has a \"hole\". We can write such a grammar as follows:\n\n```\nS
  \    -> U V U V  \n<U,U> -> [ε,ε]  \n<U,U> -> [S,-] [a,-] <U,U> [-,S] [-,u]  \n<V,V>
  -> [ε,ε]  \n<V,V> -> [S,-] [c,-] <V,V> [-,S] [-,g]\n```\n\nThe `PKN` grammar in
  GenussFold (for genus-1 structures, but much more\npleasurable to write) offers
  the required features:\n\n1. state that a syntactic variable is split between two
  regions `<U,U>`\n1. state that this split system is linearized and different symbols
  can be\n   interleaved: `U V U V`\n1. in addition, we allow syntactic variables
  of lower dimension (like `S`) to\n   be used in dimensional stacks of symbols (`[S,-]`).\n\nThis
  system allows writing monotone multiple context-free grammars with good\nperformance
  -- we are reasonably close to C in running time performance.\nReasonable means around
  a factor of 2 slower.\n\n\n\n#### Performance comparison\n\nC-code for running time
  performance comparison is available in the GenussFold\ngithub repository. The direct
  URL is:\n<https://github.com/choener/GenussFold/blob/master/C/genussfold.c>\n\n####
  Contact\n\nChristian Hoener zu Siederdissen  \nLeipzig University, Leipzig, Germany
  \ \nchoener@bioinf.uni-leipzig.de  \nhttp://www.bioinf.uni-leipzig.de/~choener/
  \ \n\n"
description-type: markdown
hash: 019c426b5f2bc563a1d85feb1ec037b0e787670d3d640a3e2b20a838b75c8a80
homepage: https://github.com/choener/GenussFold
latest: 0.0.0.2
license-name: GPL-3.0-only
maintainer: choener@bioinf.uni-leipzig.de
synopsis: MCFGs for Genus-1 RNA Pseudoknots
test-bench-deps:
  GenussFold: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  test-framework: '>=0.8 && <0.9'
  test-framework-quickcheck2: '>=0.3 && <0.4'
  test-framework-th: '>=0.2 && <0.3'
