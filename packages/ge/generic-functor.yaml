homepage: https://gitlab.com/lysxia/generic-functor
changelog-type: markdown
hash: 6d246b2ddcf718ff94b4fc2cca2c3762a31d9ae2d4fde2d77ce27e0ef1f024ac
test-bench-deps:
  base: -any
  transformers: -any
  generic-functor: -any
maintainer: lysxia@gmail.com
synopsis: Deriving generalized functors with GHC.Generics
changelog: "## 0.2.0.0\r\n\r\n- Add `gfoldMap`, `gtraverse`, `gbifoldMap`, `gbitraverse`
  `GFoldable`, `GFoldMap`, `GTraversable`, `GTraverse`, `GBiFoldable`, `GBifoldMap`,
  `GBitraversable`, `GBitraverse`\r\n- Rename `GBifunctor` to `GBimap`, and add new
  `GBifunctor` (class synonym for `GBimap`, `GFirst`, and `GSecond`)\r\n- Rename `DeriveFunctor`
  to `GenericFunctor`, and rename `DeriveBifunctor` to `GenericBifunctor`\r\n- Add
  instances for deriving-via `Foldable` and `Bifoldable`\r\n\r\n## 0.1.0.0\r\n\r\n-
  Add `gmultimap`, `multimap`, `(:+)`\r\n- Add `DeriveBifunctor`, `gbimap`, `gfirst`,
  `gsecond`\r\n\r\n## 0.0.1.1\r\n\r\n* Include README\r\n\r\n## 0.0.1.0\r\n\r\n* Create
  generic-functor\r\n"
basic-deps:
  base: '>=4.12 && <5'
  ap-normalize: -any
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.1.0.0
- 0.2.0.0
author: Li-yao Xia
latest: 0.2.0.0
description-type: markdown
description: "# Generic functors [![Hackage](https://img.shields.io/hackage/v/generic-functor.svg)](https://hackage.haskell.org/package/generic-functor)
  [![pipeline status](https://gitlab.com/lysxia/generic-functor/badges/main/pipeline.svg)](https://gitlab.com/lysxia/generic-functor/-/commits/main)\r\n\r\n\r\nImplementation
  of `Functor` instances and other functor-like structures\r\nusing `GHC.Generics`.\r\n\r\n##
  Functors not over the last type parameter\r\n\r\nThe standard `Functor` class only
  applies to types that are functors over their\r\nlast type parameter. For example,
  in `Either e r`, `fmap` maps only `r`.\r\n\r\nUsing this library, `fmap`-like functions
  can be derived over any type\r\nparameter of a `Generic` data type, all from the
  same definition `gsolomap`.\r\n\r\n```haskell\r\n{-# LANGUAGE DeriveGeneric #-}\r\n\r\nimport
  GHC.Generics (Generic)\r\nimport Generic.Functor (gsolomap)\r\n\r\ndata Result a
  r = Error a | Ok r   -- Another name for Either\r\n  deriving Generic\r\n\r\nmapError
  :: (a -> b) -> Result a r -> Result b r\r\nmapError = gsolomap\r\n\r\n-- This one
  is fmap\r\nmapOk :: (a -> b) -> Result e a -> Result e b\r\nmapOk = gsolomap\r\n\r\nmapBoth
  :: (a -> b) -> Result a a -> Result b b\r\nmapBoth = gsolomap\r\n```\r\n\r\n`gsolomap`
  is **unsafe**. Misuse will break your program.\r\nRead on for specifics.\r\n\r\n###
  Usage\r\n\r\n`gsolomap` should only be used to define **polymorphic** \"`fmap`-like
  functions\"\r\nfor `Generic` types.\r\n\r\nThe signature of `gsolomap` is:\r\n\r\n```haskell\r\ngsolomap
  :: (Generic x, Generic y, GSolomap a b x y) => (a -> b) -> (x -> y)\r\n```\r\n\r\nThe
  types `x` and `y` must be specializations of the same user-defined `data`\r\ntype
  which is an instance of `Generic`, with some type parameters equal to `a`\r\nor
  `b` respectively. At use sites of `gsolomap`, `a` and `b` must also be two\r\ndistinct
  universally quantified type variables, with no equality constraint\r\nrelating them
  with each other or any other type.\r\n\r\nThe guarantee is that `gsolomap` satisfies
  `gsolomap id = id`. Under the\r\ncondition that `a` and `b` are abstract, that equation
  uniquely determines the\r\nimplementation. (That uniqueness claim may be broken
  with GADTs and other\r\nexplicit uses of type equality constraints.)\r\n\r\nIn particular,
  `gsolomap` *must not* be specialized with types `a` and `b` that\r\nare equal. A
  function defined using `gsolomap` is safe to specialize once\r\nthe `GSolomap` constraint
  has been discharged.\r\n\r\nFor instance the three functions above, `mapError`,
  `mapOk`, `mapBoth` are\r\nsufficiently polymorphic.\r\nThey are each uniquely determined
  by their types and the equation `mapX id = id`.\r\n(Without that equation, `mapBoth`
  has four implementations of the same type.)\r\n\r\n## Compositions of functors\r\n\r\nHow
  many `fmap` do you need to map a function `a -> b` over\r\n`(t, Maybe [Either Bool
  a])`?\r\n\r\nYou only need one `solomap`:\r\n\r\n```haskell\r\ntype F t a = (t,
  Maybe [Either Bool a])\r\n\r\nmaps :: (a -> b) -> F t a -> F t b\r\nmaps = solomap\r\n```\r\n\r\n`solomap`
  can also see through bifunctors and there may be more than\r\none occurrence of
  the type parameter `a`.\r\n\r\n```haskell\r\ntype F a = ([a], Either a ())\r\n\r\nmaps2
  :: (a -> b) -> F a -> F b\r\nmaps2 = solomap\r\n```\r\n\r\n`solomap` is **unsafe**,
  subject to the same restrictions as `gsolomap`:\r\nwhere `solomap` is used, the
  type of its first argument `(a -> b)` must refer\r\nto two distinct universally
  quantified variables `a` and `b`.\r\nFunctions are safe to specialize only once
  the `Solomap` constraint is out of\r\ntheir contexts.\r\n\r\n```haskell\r\nsolomap
  :: Solomap a b x y => (a -> b) -> (x -> y)\r\n```\r\n\r\n## Functors of multiple
  parameters\r\n\r\nYou can also map with more than one function simultaneously.\r\nFor
  example with `a -> b` and `c -> d` over `(Maybe a, [(c, a)])`:\r\n\r\n```haskell\r\ntype
  F a c = (Maybe a, [(c, a)])\r\n\r\nbimaps :: (a -> b) -> (c -> d) -> F a c -> F
  b d\r\nbimaps f g = multimap (f :+ g :+ ())\r\n```\r\n\r\n`multimap` takes a list
  of functions separated by `(:+)` and terminated by `()`.\r\n\r\nThere is also a
  `gmultimap`, generalizing `gsolomap`.\r\n\r\n`gmultimap` and `multimap` are **unsafe**,
  similarly to `gsolomap` and `solomap`.\r\n\r\n## Deriving `Functor`\r\n\r\nThis
  library enables `DerivingVia` for the `Functor` class.\r\n\r\n```haskell\r\n{-#
  LANGUAGE DeriveGeneric, DerivingVia #-}\r\n\r\nimport GHC.Generics (Generic)\r\nimport
  Generic.Functor (GenericFunctor(..))\r\n\r\ndata Twice a = Twice (Either a a)\r\n
  \ deriving Generic\r\n  deriving Functor via (GenericFunctor Twice)\r\n```\r\n\r\nNote
  that there is already built-in support for deriving `Functor` in GHC with the\r\n`DeriveFunctor`
  extension instead. If that extension ever chokes on a type, this\r\nlibrary might
  have a chance at handling it. (Open an issue if it does not!)\r\n\r\nThe `Twice`
  example just above is not handled by the `DeriveFunctor` extension:\r\n\r\n```haskell\r\n{-#
  LANGUAGE DeriveFunctor #-}\r\n\r\ndata Twice a = Twice (Either a a) deriving Functor\r\n\r\n{-\r\n
  \ error:\r\n    • Can't make a derived instance of ‘Functor Twice’:\r\n        Constructor
  ‘Twice’ must use the type variable only as the last argument of a data type\r\n-}\r\n```\r\n\r\nThe
  [*generic-data*][generic-data] library also includes a generic implementation of
  `Functor`,\r\nbut only for instances of `Generic1`, which applies to much more restricted
  shapes\r\nof `data` than `Generic`.\r\n\r\n## Deriving `Bifunctor`\r\n\r\nSimilarly,
  we can use `DerivingVia` for the `Bifunctor` class\r\n(from *base*, module `Data.Bifunctor`).\r\n\r\n```haskell\r\n{-#
  LANGUAGE DeriveGeneric, DerivingVia #-}\r\n\r\nimport GHC.Generics (Generic)\r\nimport
  Generic.Functor (GenericFunctor(..), GenericBifunctor(..))\r\n\r\ndata Tree a b
  = Node a (Tree a b) (Tree a b) | Leaf b\r\n  deriving Generic\r\n  deriving Functor
  via (GenericFunctor (Tree a))\r\n  deriving Bifunctor via (GenericBifunctor Tree)\r\n```\r\n\r\nIn
  summary, the newtype `GenericFunctor` can be used for `DerivingVia`\r\nof the classes
  `Functor` and `Foldable`, and the newtype `GenericBifunctor`\r\nfor the classes
  `Bifunctor` and `Bifoldable`.\r\n\r\nDefault implementations for the above classes
  are also available as standalone\r\nfunctions (`gfmap`, `gfoldMap`, `gbimap`, `gbifoldMap`)
  and also for\r\n`Traversable` and `Bitraversable` (`gtraverse`, `gbitraverse`).\r\n\r\n---\r\n\r\n##
  Internal module policy\r\n\r\nThe public API is `Generic.Functor`. Don't use `Generic.Functor.Internal`.\r\n\r\n##
  Future work\r\n\r\n- Functors in arbitrary categories.\r\n\r\n## Related links\r\n\r\n-
  [*generic-data*][generic-data]: utilities for `GHC.Generics` and deriving for\r\n
  \ other standard classes.\r\n\r\n- [*generic-lens*][generic-lens]: the `params`
  traversal uses a very similar implementation.\r\n\r\n- [*one-liner*][one-liner].
  [*product-profunctors*][pp]\r\n\r\n- [*Deriving Bifunctors with Generics*](https://kcsongor.github.io/generic-deriving-bifunctor/),\r\n
  \ blogpost by Csongor Kiss,\r\n  describing the main idea for the implementation
  (using incoherent instances).\r\n\r\n[generic-data]: https://hackage.haskell.org/package/generic-data\r\n[generic-lens]:
  https://hackage.haskell.org/package/generic-lens\r\n[one-liner]: https://hackage.haskell.org/package/one-liner\r\n[pp]:
  https://hackage.haskell.org/package/product-profunctors\r\n"
license-name: MIT
