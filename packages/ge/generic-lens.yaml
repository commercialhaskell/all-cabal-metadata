homepage: https://github.com/kcsongor/generic-lens
changelog-type: markdown
hash: 9556581283668671a8436330676da45bb3294887d8eb00237d0bfe99a2dbfdf3
test-bench-deps:
  base: '>=4.11 && <5'
  doctest: -any
  HUnit: -any
  lens: -any
  inspection-testing: '>=0.2'
  generic-lens: -any
  profunctors: -any
maintainer: kiss.csongor.kiss@gmail.com
synopsis: Generically derive traversals, lenses and prisms.
changelog: "## generic-lens-2.2.1.0 (2022-01-22)\n- GHC 9.2 compatibility\n\n## generic-lens-2.2.0.0
  (2021-07-13)\n- GHC 9.0 compatibility\n\n## generic-lens-2.1.0.0 (2021-01-25)\n-
  Bump to generic-lens-core-2.1.0.0\n\n## generic-lens-2.0.0.0 (2020-02-11)\n- Drop
  support for GHC < 8.4\n- Better inference for `field'`\n- Param traversal now properly
  recurses deeply (#88)\n- Reorganise internals (see generic-lens-core)\n\n### Breaking
  API changes:\n- `HasTypesUsing` now takes 4 params\n- Removed `HasConstraints` traversal\n\n##
  generic-lens-1.2.0.1\n- Give HasAny/AsAny the same VTA behavior on 8.6 and 8.8 (Ryan
  Scott)\n\n## generic-lens-1.2.0.0\n- Add `HasTypesUsing` and `HasTypesCustom` for
  custom traversals (Lysxia)\n- Improve type errors when no Generic instance is defined\n-
  `types` now supports Text by default\n\n### Breaking API changes\n- `HasType` now
  includes a reflexive case so that every type 'contains' itself (Matt Parsons)\n-
  `AsSubtype` and `Subtype` now include a reflexive case so that every type is a subtype
  of itself\n\n## generic-lens-1.1.0.0\n- Fix regression in type inference for polymorphic
  optics\n- Add `HasField0`, `HasPosition0`, `AsConstructor0`, `HasField_`, `HasPositon_`,
  and `AsConstructor_` (Lysxia)\n- `types` now supports Data.Word and Data.Int (Lysxia)\n-
  Add `Wrapped` iso for newtypes (Isaac Elliott)\n- Expose internals through Data.GenericLens.Internal\n-
  Add labels for prisms (Daniel Winograd-Cort)\n\n## generic-lens-1.0.0.2\n- Fix compile-time
  performance regression\n\n## generic-lens-1.0.0.1\n- Remove dump-core dependency\n-
  Relax upper bound on criterion (#42)\n\n## generic-lens-1.0.0.0\n- Traversals (types,
  param, constraints)\n- Prisms are now optimal too\n- Monomorphic versions of lenses
  and prisms also included\n\n### Breaking API changes\n- `projectSub` now returns
  `Maybe sub` instead of `Either sup sub` (#21)\n\n## generic-lens-0.5.1.0\n- Infer
  input type from result type (#25)\n- Allow changing of multiple type parameters
  (#24)\n- Allow changing of type parameters that have kinds other than `*` (#23)\n-
  Fix error message in subtype lens\n\n## generic-lens-0.5.0.0\n\n- Lenses and prisms
  are now type-changing.\n- More informative error messages\n- More readable type
  signatures in type errors and when using `:t`\n- Use `doctest`\n- Include examples
  in Haddock\n\n### Breaking API changes\n\n- The type parameters of the classes have
  been changed to accommodate\n  the type-changing update:\n  \n  `class HasField
  name a s` -> `class HasField name s t a b` etc.\n  \n  Accordingly, `field :: Lens'
  s a` -> `field :: Lens s t a b`\n"
basic-deps:
  base: '>=4.11 && <5'
  text: '>=1.2 && <1.3 || >=2.0 && <2.1'
  generic-lens-core: ==2.2.1.0
  profunctors: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.1.0
- 1.0.0.2
- 1.1.0.0
- 1.2.0.1
- 2.0.0.0
- 2.1.0.0
- 2.2.0.0
- 2.2.1.0
author: Csongor Kiss
latest: 2.2.1.0
description-type: haddock
description: |-
  This library uses GHC.Generics to derive efficient optics (traversals, lenses and prisms) for algebraic data types in a type-directed way, with a focus on good type inference and error messages when possible.

  The library exposes a van Laarhoven interface. For an alternative interface, supporting an opaque optic type, see
  @<https://hackage.haskell.org/package/generic-optics generic-optics>@.
license-name: BSD-3-Clause
