homepage: ''
changelog-type: markdown
hash: bf8b1f0ddaaaa2f9173e1c43803e1467e2e848ad5c916be683642c5301f95a3a
test-bench-deps:
  base: '>=4.7 && <5'
  criterion: -any
  hedgehog: -any
  linear: -any
  geomancy: -any
  deepseq: -any
maintainer: aenor.realm@gmail.com
synopsis: Geometry and matrix manipulation
changelog: |
  # Changelog for geomancy

  ## 0.2.2.3

  + Add IVec and UVec 32-bit integer vectors.

  ## 0.2.2.2

  + Fixed using Transform.apply with projection inverses.

  ## 0.2.2.1

  + Add Vec2.
  + Add pattern synonyms to `Geomancy` re-exports.
  + Add Fractional instances.
  + Add conversions from tuples and lower-dimension vecs.

  ## 0.2.2.0

  + Add pattern synonym alternatives to `withVecN`.
  + Add Mat4 converstion from `Linear.M44`.
  - Hide `toList` and `toListTrans`.
  + Add `toList2d` and publish its element-order wrappers.

  ## 0.2.1.0

  Transform rewrite

  * Change perspective FoV to radians.
  + Add `infinitePerspective`.
  + Add `Transform.inverse`.
  - Hide `mat4`, `withMat4`.

  ## 0.2.0.0

  Mat4 rewrite

  + Add `rowMajor`, `withRowMajor`, `toListRowMajor`.
  + Add `colMajor`, `withColMajor`, `toListColMajor`.
  + Add `Mat4.inverse`.
  * Expose `matrixProduct`.
  + Add `scalarMultiply`.
  + Add `Mat4.(!*)` to use with `Vec4`.
  * Extract transformations to `Geomancy.Transform` and use column notation.
  + Add `Transform.(!.)` and `apply` to use with `Vec3`.
  * Rename `scale` to `scale3`.
  + Add uniform `scale`.
  + Add `scaleXY` for flat meshes.
  * Rename `mkTransformation` to `dirPos`.
  + Add `rotateQ` via `dirPos` with empty translation.
  + Add `Vec3.Packed` newtype without extra padding.

  ## 0.1.3.0

  * Update tests
  + Add `zipWith`
  * Rename `elementwise` to `pointwise`
  * Rename `colMajor` to `toList`
  * Rename `rowMajor` to `toListTrans`

  ## 0.1.2.1

  + Add Mat4 multiplication test via `linear`
  + Add `elementwise`, `colMajor`, `rowMajor`

  ## 0.1.2.0

  * Move projections and views to Vulkan namespace.

  ## 0.1.1.2

  * Fix bug in quaternion rotationBetween.

  ## 0.1.1.1

  * Add lookAtUp and rotationBetween.
basic-deps:
  base: '>=4.7 && <5'
  deepseq: -any
all-versions:
- 0.2.2.3
author: Alexander Bondarenko
latest: 0.2.2.3
description-type: markdown
description: |
  # Geomancy

  Linear is nice, but slow. Those are naughty, but a bit faster.

  * All data types are monomorphic, unpacked and specialized to `Float`.
  * `Mat4` is a `ByteArray#`.
  * `Mat4` multiplication with SSE.
  * Matrix construction states their element order.
  * Transforms don't require transposition for GLSL.

  ### The Numbers

  Storing a list of 1000 transformations (e.g. rendering instance data):

  ```
  benchmarking 4x4 poke/1000/geomancy
  time                 11.76 μs   (11.66 μs .. 11.92 μs)
                       0.999 R²   (0.998 R² .. 1.000 R²)
  mean                 11.75 μs   (11.69 μs .. 11.86 μs)
  std dev              283.4 ns   (199.0 ns .. 399.0 ns)
  variance introduced by outliers: 26% (moderately inflated)
  ```

  If you're willing to adjust your shaders, it's only 2.4 times slower.

  ```
  benchmarking 4x4 poke/1000/linear
  time                 28.29 μs   (28.21 μs .. 28.38 μs)
                       1.000 R²   (1.000 R² .. 1.000 R²)
  mean                 28.40 μs   (28.34 μs .. 28.50 μs)
  std dev              267.4 ns   (145.5 ns .. 419.9 ns)
  ```

  Keeping your shaders straight make the affair 6.1x slower.

  ```
  benchmarking 4x4 poke/1000/linear/T
  time                 73.70 μs   (73.06 μs .. 74.49 μs)
                       1.000 R²   (0.999 R² .. 1.000 R²)
  mean                 72.77 μs   (72.50 μs .. 73.22 μs)
  std dev              1.129 μs   (793.5 ns .. 1.580 μs)
  ```

  Folding down a `gloss`-style scene graph is where it is all started:

  ```
  benchmarking 4x4 multiply/1000/geomancy
  time                 20.79 μs   (20.77 μs .. 20.83 μs)
                       1.000 R²   (1.000 R² .. 1.000 R²)
  mean                 20.80 μs   (20.78 μs .. 20.83 μs)
  std dev              76.71 ns   (60.01 ns .. 99.06 ns)

  benchmarking 4x4 multiply/1000/linear
  time                 173.9 μs   (173.6 μs .. 174.4 μs)
                       1.000 R²   (1.000 R² .. 1.000 R²)
  mean                 173.5 μs   (173.2 μs .. 174.4 μs)
  std dev              1.733 μs   (727.8 ns .. 3.422 μs)
  ```

  Add that time to the poking that'll follow.

  Sure, it is in the lower microseconds range, but this budget can be used elsewhere.
license-name: BSD-3-Clause
