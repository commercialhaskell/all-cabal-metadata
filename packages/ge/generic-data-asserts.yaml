all-versions:
- 0.1.1
- 0.2.0
author: Ben Orchard
basic-deps:
  base: '>=4.14 && <5'
changelog: |
  ## 0.2.0 (2024-04-05)
  * split errors out into own module

  ## 0.1.1 (2024-04-04)
  Initial release.

    * extracted from generic-data-functions
changelog-type: markdown
description: |
  [gdf-hackage]: https://hackage.haskell.org/package/generic-data-functions

  # generic-data-asserts
  Structural assertions on the generic data representations (`GHC.Generic.Rep a`).

  Sometimes, we want to write generics that only work on certain data types with a
  certain shape e.g. non-sum types (single constructor). Achieving this is fairly
  straightforward if we add a `TypeError` constraint on the relevant generic
  representation unwrapping instance (here, the `(:+:)` constructor sum type).

  This library effectively pulls those checks out of generic code and runs them by
  separately. This way, we can simplify our generics, and make them more flexible
  (e.g. a user may choose whether to permit void types at compile time or not).

  This began as a minor feature in my [generic-data-functions][gdf-hackage]
  library.

  ## License
  Provided under the MIT license. See `LICENSE` for license text.
description-type: markdown
hash: e5f95c9ae79e0a69f29a09315708f185ac345adcb14071d195b7607b018d15a8
homepage: https://github.com/raehik/generic-rep-asserts#readme
latest: 0.2.0
license-name: MIT
maintainer: Ben Orchard <thefirstmuffinman@gmail.com>
synopsis: Structural assertions on generic data representations.
test-bench-deps:
  base: '>=4.14 && <5'
  generic-data-asserts: '>=0'
  type-spec: '>=0.4.0.0 && <0.5'
