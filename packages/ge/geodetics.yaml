all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.1.0
- 0.1.2
- 1.0.0
- 1.1.0
author: Paul Johnson <paul@cogito.org.uk>
basic-deps:
  Stream: '>=0.4.6 && <0.5'
  array: '>=0.1 && <0.6'
  base: '>=4.17 && <5'
  parsec: '>=3.1 && <3.2'
changelog: |
  Release Notes
  -------------

  Version 0.0.2: Tided up cabal file and removed spurious dependency on Parsec.

  Version 0.0.3: Updated for Haskell Platform 2014.2.0.0 and GHC 7.8.3. Fixed
     some minor documentation issues.

  Version 0.0.4: Updated for Dimensional 1.0.

  Version 0.0.5: Fixed bug in Monoid instance for Helmert. Created Semigroup
     instance for Helmert.

  Version 0.0.6: Prevent attempted building on GHC 7.8 (it doesn't work)
     and fix the build on 7.10 with a conditional semigroups dependency

  Version 0.1.0: Updated for Dimensional 1.3 and GHC 8.6.

  Version 0.1.1: Fixed bug #15: for a point p, groundDistance p p returned NaN

  Version 0.1.2: Fixed bugs #16 and #17: Unicode PRIME and DOUBLE PRIME now allowed in
     position strings, and the degree symbol is allowed for decimal degrees.

  ## Version 1.0.0

  * Removed dependency on Dimensional library. This is a breaking change:
     hence the major version bump.

  * Fixed bug #18 (and #19).

  ## Version 1.1.0

  * Dropped a redundant `Ellipsoid` constraint on `antipode`.

  * Added functions `showGeodeticLatLong`, `showGeodeticSignedDecimal`,
    `showGeodeticNSEWDecimal`, and `showGeodeticDDDMMSS`.

  * Fixed a few minor bugs in the `readGroundPosition` and the
    `Geodetics.LatLongParser`.

  * Added Universal Transverse Mercator (UTM) grid, with both UTM and MGRS grid references
changelog-type: markdown
description: |
  geodetics
  =========

  Haskell library of data types and calculations for positions on planet Earth

  This library provides "geodetic" positions. That is, latitude, longitude and altitude on a
  specified Terrestrial Reference Frame (TRF). The basic TRF is the WGS84, which is the
  one used by GPS and Google Earth. Others can be added by describing the underlying ellipsoid
  and the difference in angle and centre with WGS84, and a position in one TRF can be
  transformed into another. Given two points in the same TRF you can find the shortest distance
  between them and the bearing from one to the other.

  Once you have a geodetic position defined you can project it onto a flat plane, or Grid.
  At present Transverse Mercator and Oblique Stereographic grids are provided. More can be
  added by defining new instances of the Grid typeclass: see "AddingProjections.txt" for
  detais.

  The Paths module defines a path as a parametric function of distance that returns a
  position and a bearing. Given two paths you can find their intersection using a fast
  iterative algorithm.
description-type: markdown
hash: cb265287f66e51b9ab9210a266410013f661c6952f49f6c6ee312ab485cbb0ad
homepage: https://github.com/PaulJohnson/geodetics
latest: 1.1.0
license-name: BSD-3-Clause
maintainer: Paul Johnson <paul@cogito.org.uk>
synopsis: Terrestrial coordinate systems and geodetic calculations.
test-bench-deps:
  HUnit: '>=1.6'
  QuickCheck: '>=2.4'
  base: '>=4.6 && <5'
  checkers: '>=0'
  geodetics: '>=0'
  hspec: '>=2.11'
