all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
author: Frederick Pringle
basic-deps:
  base: '>=4 && <5'
  generics-sop: '>=0.4 && <0.6'
  sop-core: '>=0.4.0.1 && <0.6'
changelog: |
  # Changelog

  All notable changes to `generic-case` will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
  and this project adheres to [Haskell Package Versioning Policy](https://pvp.haskell.org).

  ## [Unreleased]

  ## [0.1.1.1] - 29.05.2025

  ### Added

  - Updated Readme + Changelog

  ## [0.1.1.0] - 08.04.2025

  ### Added

  - Implement `gcaseR`: functions before datatype in [#6](https://github.com/fpringle/generic-case/pull/6).

  ## [0.1.0.0] - 08.03.2025

  ### Added

  - First version. Released on an unsuspecting world.

  [unreleased]: https://github.com/fpringle/generic-case/compare/v0.1.1.1...HEAD
  [0.1.1.1]: https://github.com/fpringle/generic-case/releases/tag/v0.1.1.1
  [0.1.1.0]: https://github.com/fpringle/generic-case/releases/tag/v0.1.1.0
  [0.1.0.0]: https://github.com/fpringle/generic-case/releases/tag/v0.1.0.0
changelog-type: markdown
description: |
  [![Haskell CI](https://github.com/fpringle/generic-case/actions/workflows/haskell.yml/badge.svg)](https://github.com/fpringle/generic-case/actions/workflows/haskell.yml)

  # Generic case analysis functions

  "Case analysis" functions are those which take one function for each constructor of a sum type, examine a value of that type, and call the relevant function depending on which constructor was used to build that type. Examples include
  [maybe](https://hackage.haskell.org/package/base/docs/Data-Maybe.html#v:maybe),
  [either](https://hackage.haskell.org/package/base/docs/Data-Either.html#v:either) and
  [bool](https://hackage.haskell.org/package/base/docs/Data-Bool.html#v:bool). `generic-case` gives you these functions for any type which implements `Generic` from [generics-sop](https://hackage.haskell.org/package/generics-sop/docs/Generics-SOP.html#t:Generic).

  ```haskell
  maybe :: forall a r. r -> (a -> r) -> Maybe a -> r
  maybe = gcaseR @(Maybe a)
  ```

  For more detailed documentation, see [Generics.Case](https://hackage.haskell.org/package/generics-case/docs/Generics-Case.html).
description-type: markdown
hash: e9fe2090fe87e1b35c6a79c17dcf3300c68c5c7416a8065be7d66c28984585d2
homepage: https://github.com/fpringle/generic-case
latest: 0.1.1.1
license-name: BSD-3-Clause
maintainer: freddyjepringle@gmail.com
synopsis: Generic case analysis
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4 && <5'
  generic-case: '>=0'
  generics-sop: '>=0.4 && <0.6'
  hspec: '>=0'
  sop-core: '>=0.4.0.1 && <0.6'
