homepage: https://github.com/chrbauer/gettext-th
changelog-type: markdown
hash: 90efe2ba1ee5a409352789c759ca09094187a2ab7591f0cef534abf61b8867e2
test-bench-deps: {}
maintainer: mail@christoph-bauer.net
synopsis: gettext-th can internationalise a haskell program without runtime dependencies
changelog: |
  # Revision history for gettext-th

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  bytestring: -any
  base: '>=4 && <5'
  text: -any
  filepath: -any
  haskell-gettext: -any
  template-haskell: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Christoph Bauer
latest: 0.1.0.2
description-type: markdown
description: |+
  # gettext-th

  The [gettext](https://www.gnu.org/software/gettext/) project provides a library and tools for internationalization and localization of software. Haskell has already support for gettext. It is possible either to use the C-library with FFI ([hgettext](https://hackage.haskell.org/package/hgettext)) or to use a pure Haskell implementation ([haskell-gettext](https://hackage.haskell.org/package/haskell-gettext-0.1.2.0)).

  With gettext the executables and the translations are separated and the language strings are looked up at runtime. The [loadCatalog](https://hackage.haskell.org/package/haskell-gettext-0.1.2.0/docs/Data-Gettext.html) of gettext-haskell has to read the translations at runtime with IO.

  This is difficult if you transpile your haskell code to javascript, which runs in a browser. To close this gap gettext-th moves the lookup of messages to compile time. A similar approach was taken for [angular-i18n](https://angular.io/guide/i18n-overview) for performance reasons.
  This of course has some drawbacks (less flexible and one program per language) and some benefits (simple and performant).

  Theoretically gettext-th could also choose between runtime and compile time lookups.

  # Warning

  gettext-th will use IO at compile time and will write a file.

  # How to use it

  See for an example in example/hello.

  To use gettext-th in your app use it and compile it. It will fail, but it will create the file po/messages.pot.
  Run in the po folder:

  ```sh
  msginit
  msgfmt en_US.po
  ```

  With that the program compiles. And you can update en_US.po again.

  Now copy en_US.po to de_DE.po, translate the messages and run `msgfmt de_DE.po`.
  If you recompile (maybe run cabal clean first) the output of your app is in german.


license-name: BSD-3-Clause
