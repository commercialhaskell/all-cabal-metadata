homepage: https://github.com/NorfairKing/validity#readme
changelog-type: markdown
hash: 70df16cef796e509278b6076a3d7c0ded471ec1bf69ddcedc10493052f0ea118
test-bench-deps:
  base: '>=4.13 && <5'
  hspec: -any
  hspec-core: -any
  QuickCheck: -any
  genvalidity: -any
maintainer: syd@cs-syd.eu
synopsis: Testing utilities for the validity library
changelog: "# Changelog\n\n## [1.1.0.0] - 2022-08-30\n\n### Added\n\n* `genListOf1`\n*
  `genMaybe`\n* `shrinkMaybe`\n* `shrinkNonEmpty`\n* `shrinkTriple`\n* `shrinkQuadruple`\n\n###
  Changed\n\n* Sped up shrinking of `NonEmpty` lists by an order of magnitude.\n*
  Changed shrinking of `Ratio`s to be 10x faster.\n* Reimplemented `shrinkT2`, `shrinkT3`
  and `shrinkT4` in terms of `shrinkTuple`, `shrinkTriple` and `shrinkQuadruple`.\n\n##
  [1.0.0.1] - 2021-11-20\n\n### Changed\n\n* Added compatibility with `lts-18.16`\n\n##
  [1.0.0.0] - 2021-11-20\n\n### Changed\n\n* The default implementation of `GenValid`
  now uses `genValidStructurally` and `shrinkValidStructurally`.\n\n### Removed\n\n*
  `GenUnchecked`: It is no longer necessary after changing the default implementation
  of `GenValid`.\n* `GenInvalid`: It was a misfeature.\n* `GenRelativeValidity`: It
  was a misfeature. \n\n## [0.11.0.1] - 2021-06-20\n\n### Changed\n\nUpdated the base
  lower bound to be more accurate.\n\n## [0.11.0.1] - 2020-04-28\n\n### Changed\n\n*
  Got rid of some unnecessary extra special values in the generator for double\n\n##
  [0.11.0.0] - 2020-04-12\n\n### Changed\n\n* Changed the genUnchecked and shrinkUnchecked
  definitions for Word8, Word16, Word32 and Int8, Int16, Int32 according to their
  new validity instance in validity 0.10.0.0\n\n## [0.10.0.2] - 2020-03-18\n\n###
  Changed\n\n* Better lower bound for genvalidity\n\n## [0.10.0.1] - 2020-02-20\n\n###
  Changed\n\n* Fixed a bug where shrinking ratios of bounded types would crash if
  the minimum bound was in the numerator.\n\n## [0.10.0.0] - 2020-02-10\n\n### Added\n\n*
  `Data.GenValidity.Utils.genIntX`\n* `Data.GenValidity.Utils.genWordX`\n* `Data.GenValidity.Utils.genFloat`\n*
  `Data.GenValidity.Utils.genDouble`\n* `Data.GenValidity.Utils.genFloatX`\n* `Data.GenValidity.Utils.genInteger`\n\n\n###
  Changed\n\n* Improved the cabal file\n* Sped up the 'genValid' generators for the
  following types\n  * ()\n  * Bool\n  * Ordering\n  * Char\n  * Int, Int8, Int16,
  Int32, Int64\n  * Word, Word8, Word16, Word32, Word64\n  * Float, Double\n* Improved
  the generators of\n  * Int, Int8, Int16, Int32, Int64\n    Now also generates extreme
  values, but mostly uniform values.\n  * Word, Word8, Word16, Word32, Word64\n    Now
  also generates extreme values, but mostly uniform values.\n  * Float, Double\n    Now
  also generates values around the bounds, but mostly uniform values.\n  * Natural,
  Integer\n    Now also generates numbers larger than can be contained in a single
  Word/Int.\n  * Ratio\n    Fixed a bug: no longer generates invalid ratios for fixed-sized
  numerators\n* Removed a lot of shrinking tests\n\n## [0.9.1.0] - 2019-12-04\n\n###
  Added\n\n* `genSplit6`, `genSplit7`, `genSplit8`\n* `genNonEmptyOf`\n\n### Changed\n\n*
  Changed `arbPartition` to generate nicer partitions.\n  This influences `genListOf`
  and `genTreeOf` and the\n  instances for all collections as well.\n\n## [0.9.0.1]
  - 2019-09-27\n\n### Changed\n\n* Tests for `genUtf16SurrogateCodePoint`\n\n## [0.9.0.0]
  - 2019-09-23\n\n### Added\n\n* `genUtf16SurrogateCodePoint`\n\n### Changed\n\n*
  Changed `GenValid Char` to generate UTF16 surrogate codepoints 10% of the time\n*
  Changed `GenValid Char` to ignore sizes.\n\n## [0.8.0.0] - 2019-03-06\n\n### Added\n\n*
  'shrinkTuple'\n\n### Changed\n\n* Removed the 'GenUnchecked' constraint for 'GenValid'
  and 'GenInvalid'.\n\n## [0.7.0.2] - 2019-02-28\n\n### Added\n\n* 'shrinkT4'\n\n###
  Changed\n\n* Clearer docs\n\n## [0.7.0.1] - 2019-02-21\n\n### Changed\n\n* Sped
  up the shrinking test suite.\n\n## [0.7.0.0] - 2018-11-07\n\n### Changed\n\n* `genUnchecked`
  of `Double` and `Float` now generates `NaN`, `+Infinity`, `-Infinity` and `-0` according
  to the new version of `validity`.\n\n## [0.6.1.0] - 2018-10-06\n\n### Changed\n\n*
  Changed 'genValid`, `genUnchecked` and `genInvalid` for NonEmpty to better take
  the size into account.\n* Sped up `shrinkUnchecked` for `Maybe`\n* Sped up `shrinkValid`
  for `Maybe`\n* Sped up `shrinkUnchecked` for `Either`\n* Sped up `shrinkValid` for
  `Either`\n* Sped up `shrinkUnchecked` for `(,)`\n* Sped up `shrinkUnchecked` for
  `(,,)`\n* Sped up `shrinkUnchecked` for `(,,,)`\n* Sped up `shrinkValid` for lists\n*
  Sped up `shrinkValid` for `NonEmpty` lists\n\n## [0.6.0.0] - 2018-08-25\n\n### Added\n\n*
  `genValidStructurally` and `genValidStructurallyWithoutExtraChecking`\n* `shrinkValidStructurally`
  and `shrinkValidStructurallyWithoutExtraFiltering` with `structurallyValidRecursivelyShrink`
  and `structurallyValidSubterms`\n\n### Changed\n\n* `-0` is now a valid value for
  `Double` and `Float`.\n* `genUnchecked :: Gen Double` now also generates invalid
  values.\n* `arbPartition` now shuffles the partitions, which means that `genListOf`
  produces lists of elements with shuffled sizes.\n  This also fixes the same problem
  with `instance GenUnchecked a => GenUnchecked [a]`.\n\n## Older versions\n\nNo history
  before version 0.6.0.0\n\n"
basic-deps:
  base: '>=4.13 && <5'
  validity: '>=0.12'
  random: '>=1.1'
  QuickCheck: '>=2.13'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 0.4.0.4
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.1.0
- 0.6.1.0
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.8.0.0
- 0.9.0.0
- 0.9.0.1
- 0.9.1.0
- 0.10.0.0
- 0.10.0.1
- 0.10.0.2
- 0.11.0.0
- 0.11.0.2
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
author: Tom Sydney Kerckhove
latest: 1.1.0.0
description-type: haddock
description: |-
  Note: There are companion instance packages for this library:

  * <https://hackage.haskell.org/package/genvalidity-aeson genvalidity-aeson>

  * <https://hackage.haskell.org/package/genvalidity-bytestring genvalidity-bytestring>

  * <https://hackage.haskell.org/package/genvalidity-containers genvalidity-containers>

  * <https://hackage.haskell.org/package/genvalidity-path genvalidity-path>

  * <https://hackage.haskell.org/package/genvalidity-scientific genvalidity-scientific>

  * <https://hackage.haskell.org/package/genvalidity-text genvalidity-text>

  * <https://hackage.haskell.org/package/genvalidity-time genvalidity-time>

  * <https://hackage.haskell.org/package/genvalidity-unordered-containers genvalidity-unordered-containers>

  * <https://hackage.haskell.org/package/genvalidity-uuid genvalidity-uuid>

  * <https://hackage.haskell.org/package/genvalidity-vector genvalidity-vector>
license-name: MIT
