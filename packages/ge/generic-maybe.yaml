all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
author: Jonathan Fischoff
basic-deps:
  base: '>=4.5 && <4.8'
  ghc-prim: '>=0'
changelog: ''
changelog-type: ''
description: |-
  This module is a drop in replacement for 'Data.Maybe'. It generalizes
  the functions to any types that share the same \"sum of products\" view
  of 'Maybe'.

  To use the module for your type, enable GHC's DeriveGeneric extension and
  derive a Generic instance for your type.

  > import GHC.Generics
  >
  > data Result a = Success a | Fail
  >    deriving (Show, Generic)

  After which you can use the functions, like your type was 'Data.Maybe.Maybe'

  >> fromMaybe 'a' Fail
  >'a'

  >> fromMaybe 'a' $ Success 'b'
  >'b'
description-type: haddock
hash: fd9ea5f5cbaf095a3fdd1dcb333af06eaf85339a821b713d77cc04f5bcf054e3
homepage: https://github.com/jfischoff/generic-maybe
latest: 0.3.0.4
license-name: BSD-3-Clause
maintainer: jonathangfischoff@gmail.com
synopsis: A generic version of Data.Maybe
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  directory: '>=1.0'
  doctest: '>=0.9.1'
  filepath: '>=0'
  generic-deriving: '>=0'
  hlint: '>=1.7'
  mtl: '>=0'
  nats: '>=0'
  parallel: '>=0'
  semigroups: '>=0.9'
  simple-reflect: '>=0.3.1'
  split: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
