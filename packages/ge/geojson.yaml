all-versions:
- 4.1.0
- 4.1.1
author: Dom De Re
basic-deps:
  aeson: '>=2.0.1.0 && <3'
  base: '>=4.9 && <5'
  containers: '>=0.5.7.1 && <0.7'
  deepseq: '>=1.4.2.0 && <1.5'
  lens: '>=4.11'
  scientific: '>=0.2.0 && <0.4'
  semigroups: '>=0.16'
  text: '>=1.2.3.0 && <2.1'
  transformers: '>=0.3 && <0.7'
  validation: '>=1 && <2.0'
  vector: '>=0'
changelog: "# 4.0.x\n\n## 3.0.4 -> 4.0.0\n\n- Create a bounding box type that we can
  all enjoy (XY, XYZ, XYZM instead of Sequence).\n\n# 3.0.x\n\n## 2.0.0 -> 3.0.2\n\n-
  Switch to using `Data.Sequence` instead of `Data.Vector.Storable`. \n\n# 2.0.x\n\n##
  1.3.3 -> 2.0.0\n\n- Switch to using `Data.Vector.Storable` instead of lists, \n-
  `GeoPositionWithoutCRS` is now a sum type (Empty, XY, XYZ, or XYZM).\n- New public
  methods on LineString and LinearRing\n    - toVector, combineVector, fromVector\n
  \   - map, foldr, foldMap (as they are nolonger Foldable, Functor, or Traversable)\n\n#
  1.3.x\n\n## 1.3.1 -> 1.3.3\n\n- Fixed Validation dependency.\n\n## 1.2.0 -> 1.3.0\n\n-
  \  `MultiPolygon`, `MultiPoint`, `MultiLine` were all corrected as they weren't
  compliant with the spec (See [here] (https://github.com/domdere/hs-geojson/issues/9)
  for reference).\n\n# 1.2.x\n\n## 1.1.1 -> 1.2.0\n\n-   Added the `LineString` data
  type for use with `GeoLine`, now a `GeoLine` with less than 2 positions is a type
  error or a parse error, as it should be according to the [spec] (http://geojson.org/geojson-spec.html#linestring
  \"LineString in the GeoJSON v1.0 spec\")\n\n# 1.1.x\n\n## 1.1.0 -> 1.1.1\n\n-   Just
  some version bumps, the `lens` version bounds for the `transformer` library (`<0.4`)
  were causing some conflicts.\n\n## 1.0.1 -> 1.1.0\n\n-   Corrected an issue with
  the `Polygon` ([here] (https://github.com/domdere/hs-geojson/issues/2 \"Polygon
  Issue\"))\n    -   Introduced the `LinearRing` datatype to handle the LinearRings
  described in the spec.\n        -   Valid JSON for a LinearRing contains at least
  4 points (this is checked, parsing fails if the list is too short) and the last
  element should match the first, but this isnt checked due to performance issues
  with the current implementation (though its a resolvable issue)).\n        -   A
  `LinearRing` can be converted to a List with `fromLinearRing` or you can just fold/traverse
  over it.\n        -   Creating a `LinearRing` can be done with one of these:\n            -
  \  `makeLinearRing :: a -> a -> a -> [a] -> LinearRing a`\n            -   `fromList`
  and `fromListWithEqCheck`, which will return a `Validate` result (see the type sigs)
  and [**Data.Validation**] (https://hackage.haskell.org/package/validation \"Data.Validation\")\n\n#
  1.0.x\n\n## 0.0.2 -> 1.0.0\n\n-   Migrated from `json` to `aeson`, all `JSON` instances
  were removed and replaced with `ToJSON` and `FromJSON` instances\n-   `GeoFeature`
  and `GeoFeatureCollection` are now of kind `* -> *`, parameterised on the Property
  type, `GeoFeature a` and `GeoFeatureCollection a` are in `ToJSON` and/or `FromJSON`
  if `a` is in `ToJSON` and/or `FromJSON` respectively.\n-   Lenses and prisms have
  been generated for each of the types.\n-   Orphan Instances were removed.  Orphan
  Instances are bad.  Breaking type class coherency had some rather annoying consequences,
  you only need to import `Data.Geospatial` now and the `ToJSON` and `FromJSON` instances
  will come with it.  I wanted to split up the files and thought seperating the instances
  from the declarations was a good idea but it wasnt.  Instead I split the data types
  into seperate modules and kept the instances with their respective data type declarations.\n\n"
changelog-type: markdown
description: |-
  # geojson ![Build Status](https://github.com/zellige/hs-geojson/actions/workflows/ci.yaml/badge.svg) [Hackage](https://hackage.haskell.org/package/geojson)

  A thin GeoJSON Layer above the `aeson` library

  ## Development

  - We use [Ormolu](https://hackage.haskell.org/package/ormolu) for code formatting.

  ## Visual Studio Code Setup

  Install Command Line Apps: ormolu and hlint.

  Plugins:

  - Haskell https://marketplace.visualstudio.com/items?itemName=haskell.haskell
  - Haskell Syntax Highlighting https://marketplace.visualstudio.com/items?itemName=justusadam.language-haskell
  - Haskell Linter https://marketplace.visualstudio.com/items?itemName=hoovercj.haskell-linter
  - Run on Save https://marketplace.visualstudio.com/items?itemName=pucelle.run-on-save

  One installed to reformat a file:

  - Shift-Alt-F

  Or configure Run on Save:

  ```
      {
          "globMatch": "{**/src/**/*.hs,**/test/**/*.hs}",
          "command": "ormolu --color always --check-idempotence --mode inplace ${file}",
          "runIn": "terminal",
          "runningStatusMessage": "Checking code style ${fileBasename}",
          "finishStatusMessage": "${fileBasename} checked"
      }
  ```

  Run tests:
  * `stack test :geojson-test`

  Run hlint:
  * `stack test :geojson-hlint`

  ### Other Projects/Documentation

  [Geometry Survival Guide](https://www.gaia-gis.it/spatialite-3.0.0-BETA/GeoNotations.pdf)
description-type: markdown
hash: f450e81d4fe1993f97c7cdb2b9743d54d2621c37b67d8a89536e5e09d33fd737
homepage: https://github.com/zellige/hs-geojson
latest: 4.1.1
license-name: BSD-3-Clause
maintainer: Andrew Newman
synopsis: A thin GeoJSON Layer above the aeson library
test-bench-deps:
  aeson: '>=2.0.1.0 && <3'
  base: '>=4.9 && <5'
  bytestring: '>=0.10.8.1 && <0.12'
  containers: '>=0.5.7.1 && <0.7'
  geojson: '>=0'
  hspec: '>=2.5 && <2.10'
  tasty: '>=0.8 && <0.13 || >=1.0 && <1.5'
  tasty-hspec: '>=1.2 && <1.3'
  tasty-quickcheck: '>=0.3 && <0.9 || >=0.9.1 && <0.11'
  text: '>=1.2.3.0 && <2.1'
  validation: '>=1 && <2.0'
