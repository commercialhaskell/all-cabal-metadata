all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 1.0.0.0
- 2.0.0.0
- 2.0.0.1
- 2.0.0.2
author: Matthew Mirman
basic-deps:
  base: '>=4.3 && <5.0'
  containers: '>=0.4 && <0.6'
  mtl: '>=2.0 && <2.2'
  network: '>=2.0 && <2.5'
  rpc-framework: '>=0'
  template-haskell: '>=2.7 && <2.8'
  transformers: '>=0.2 && <0.4'
changelog: ''
changelog-type: ''
description: "rpc-framework\n=============\n\nThis is a framework for remote procedure
  calls in haskell.\n\nFeatures\n--------\n* Usage is incredibly simple!\n\n* Calling
  a remote procedure is type safe.\n\n* Modal logic inspired worlds, aka hosts:\n
  \   * Services run from the _World IO_ monad, written `Host w => WIO w`\n    * This
  allows world specific actions: if one world will be compiled to JS and one to x86,
  we could have the following types\n\n```haskell\n    putStrLn :: IO_World w => WIO
  w a\n    installTextBox :: JS_World w => WIO w ()\n```\n\n* Arbitrily complex remote
  procedures:\n    * Rather than only being able to call a remote function of one
  argument, we can call with any number of arguments\n\n```haskell\n    foo :: (Sendable
  a1 ,..., Sendable aN, Sendable b, Host w) => a1 -> ... -> aN -> WIO w b\n```\n\n*
  It can _send_ _pure_ functions across the wire and now garbage collect them.\n\n```haskell
  \n    instance (Serializable a) => Sendable a a\n    instance (Sendable a' a, Sendable
  b b') => Sendable (a -> b) (a' -> IO b')\n```\n\n* Only local code can execute\n
  \   * unlike some modal logic aproaches to mobile languages, the only code that
  can be executed is the code you compiled, and not code passed from world to world\n\n*
  State can be serialized with references.\n\nUsage\n-----\n\n* To install, run cabal
  install\n\n* Hosts are declared at the declaration level\n```haskell\n    $(makeHost
  \"WorldName\" \"host_location\" #portNumber)\n```\n* Installing a remote service:
  \n   * `makeServices` registers a list of service names which all have the same
  host \n   * `autoService` automatically figures out which services in the given
  file run on the specified host and registers them.  A good usage pattern is to provide
  all modules with services with a registration hook that can be appended to the main
  server.\n\n```haskell\n    main = runServer $(makeServices [ 'nameOfService1, ...
  , 'nameOfServiceN])\n```\n\n```haskell\n    main = runServer $(autoService 'HostName)\n```\n\n```haskell\n
  \   module First where\n    services = $(autoService 'HostName)\n\n    module Second
  where\n    services = $(autoService 'HostName)\n\n    module Main where\n    import
  qualified First as F\n    import qualified Second as S\n    main = runServer $ F.services
  >> S.services\n```\n\n* Calling a remote service:\n```haskell\n    addServer ::
  Integer -> WIO Server (Integer -> Integer)\n    addServer t = do\n        Server
  <- world\n\treturn (t +)\n\n    getRemoteAdd = $(rpcCall 'addServer)\n    ...\n
  \   ghci> :t getRemoteAdd\n    getRemoteAdd  :: Host w => Integer -> WIO w (Integer
  -> Integer)\n```\n\nExamples\n--------\n\n* src/RPCTest.hs is an example.  \n    *
  It runs two worlds, Client and Server, both on localhost, one on port 9000 and the
  other on 9001.\n    * To run and build it:  `make run`\n    * To build it: `make
  test`\n    * To run it after building it: `./rpc-test`\n\n\n\n\n"
description-type: markdown
hash: 92b57f091bc268204adcdea62af0e7fbb5c78b29f47a63b5688dcdf2b47dc850
homepage: http://github.com/mmirman/rpc-framework
latest: 2.0.0.2
license-name: BSD-3-Clause
maintainer: mmirman@andrew.cmu.edu
synopsis: a remote procedure call framework
test-bench-deps: {}
