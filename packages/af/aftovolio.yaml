all-versions:
- 0.6.0.0
author: Oleksandr Zhabenko
basic-deps:
  async: '>=2.2.2 && <3'
  base: '>=4.13 && <5'
  cli-arguments: ==0.7.0.0
  containers: '>=0.5.11.0 && <1'
  deepseq: '>=1.4.4.0 && <2'
  directory: '>=1.3.4.0 && <2'
  intermediate-structures: ==0.1.2.0
  lists-flines: ==0.1.3.0
  minmax: ==0.1.1.0
  mmsyn2-array: ==0.3.1.1
  monoid-insertleft: ==0.1.0.1
  quantizer: ==0.4.0.0
  rev-scientific: ==0.2.1.0
  rhythmic-sequences: ==0.8.0.0
changelog: "# Revision history for aftovolio\n\n## 0.1.0.0 -- 2024-09-21\n\n* First
  version. Released on an unsuspecting world.\n\n##  0.2.0.0 -- 2024-09-22\n\n* Second
  version. Added possibility to specify sequence of Word8 numbers as durations to
  \ be compared with in the +ln ... -ln command line arguments group.\n\n##  0.2.1.0
  -- 2024-09-28\n\n* Second version revised A. Updated dependencies. Some minor code
  usability improvements.\n \n##  0.3.0.0 -- 2024-10-13\n\n* Third version, Added
  a new possibility to compare lines using the \"+di\" command line argument. If present
  implies the \"differentiation\" mode of computation for the comparing options with
  the line in +l2 or +ln groups of command line arguments. Is useful mostly in case
  of the line to compare with has approximately the same number of syllables as the
  option lines.\n\n##  0.3.0.1 -- 2024-10-15\n\n* Third version revised A. Fixed some
  issues with documentation README.md file.\n\n## 0.3.0.2 -- 2024-10-20\n\n* Third
  version revised B. Some minor code improvements. Added 'Peculiarities of the stressed
  and unstressed syllables in Ukrainian and other languages' section to the README.md
  file.\n\n## 0.4.0.0 -- 2024-10-22\n\n* Fourth version. Added new command line parameter
  \"-e\" to control whether to print groups of \"={digits}\" on the screen while making
  output. Changed the number of arguments in various functions. \n\n## 0.5.0.0 --
  2024-11-18\n\n* Fifth version. Removed +n command line parameter and the descending
  sorting of the resulting data. Changed the printing behaviour so that there is no
  longer too long half of the columns as empty one printed. Some code simplification
  in the module Aftovolio.Halfsplit. Added new constraint type G for specifying that
  more than two elements should be groupped together as a one whole (with possible
  inner permutations inside the group) during all the permutations.\n\n## 0.5.1.0
  -- 2024-11-18\n\n* Fifth version revised A. Fixed issue with eternal loop in the
  halfsplit1G function.\n\n## 0.5.1.0 -- 2024-11-19\n\n* Fifth version revised B.
  Fixed documentation to reveal the latest changes.\n\n## 0.6.0.0 -- 2024-11-21\n\n*
  Sixth version. Added new module Aftovolio.PermutationsArrMini2. Added new command
  line argument \"+P <non-negative Int, presumably in the range 0..3>\", which specifies
  the general type of permutations of the words and their concatenations. +P 0 corresponds
  the full set of all possible permutations (the default behaviour, also in case of
  no specification at all), +P 1 corresponds to the set of permutations, where just
  one word can change its position (the elementary, the least possible permutation),
  +P 2 corresponds to the set of permutations, where two words can be swapped one
  with another, +P 3 corresponds to the set of permutations, where no more than two
  words can change their positions, including the cases of no changes at all and just
  one word changes its position. All, except +P 0 provide less permutations in general
  and are quicker to be computed and displayed. This one is more useful in case of
  extended sets of words, e. g. when there are 8 or 9 words in the line. Fixed issue
  with genPermutations function. Some minor code and documentation improvements.\n\n"
changelog-type: markdown
description: "# AFTOVolio\n\nAuthor and [software\ndeveloper:](https://hackage.haskell.org/package/aftovolio-ukrainian)\nOleksandr
  Zhabenko\n\n# Introduction\n\nHere is a brief introduction of AFTOVolio ideas and
  usage (that is Dutch 'Aanpak van Fonetische Talen voor het Ontdekken van de VOorkeursLIjnOpties'
  (Dutch people consider ij as a letter and consequently one sound, but we use just
  first one for good readability) — 'Phonetic Languages Approach for Discovering the
  Preferred Line Options').\n\nUsing AFTOVolio lets a person learn how to write the
  texts with the desired properties in pronunciation. \n\nThe idea behind AFTOVolio
  is that the text is first created based on the meaning of what needs to be said.
  And then (or even during the previous one) it is organised (edited) into a better
  pronunciation, including a more rhythmic one.\n\n## Basic idea\n\nThere are different
  languages. They have different structure and rules.\nIt is possible to create and
  use (based on one of existing widely used\nand well-spoken languages, in particular
  Ukrainian in this work) a\n'phonetic' language that is better suited for poetry
  and music. It is\neven possible to create different versions of phonetic language.
  This\npaper proposes to create several different phonetic languages based on\nUkrainian.\n\n##
  What does this mean?\n\nIf someone builds a phrase in a language that violates the
  rules of\ngrammar or semantics, then this error is visible to a skilled speaker
  at\nonce, it is identified as such almost instantly. Instead, if the sound\nof a
  phrase has some phonetic features, not counting accents, for\nexample, the complexity
  of pronunciation or vice versa lightness,\nsmoothness or abruptness, etc., then
  it is possible to identify it as an\nerror or something significant not immediately
  or with special\nattention. One can imagine this as giving preference to the language\nsemantics
  (meaning) and grammar, but less weight to phonetics. Phonetic\nlanguage is that
  one built specifically to enhance the meaning and\nimportance of the phonetic component
  itself.\n\n## Phonetic or prosodic language?\n\nAn interesting question is whether
  to call the approach \\\"phonetic\\\" or\n\\\"prosodic\\\" languages. But I must
  say that we study the\nactual phonetic features, what is associated with the sound
  of speech.\nAmong them is that which concerns certain phonetic phenomena in the\ngeneral
  case, in particular phonemes or even palatalization. These\nquestions are generally
  not the subject of the study of prosody as a\nscience, as a certain component of
  phonetics, but are the subject of a\nbroader study of phonetics. Moreover, there
  are no restrictions and\nbindings of the proposed approach to the actual syllables,
  which is more\ntypical for the subject of the study of prosody. Generalizations
  can \nbe made for more general cases.\n\nHowever, at this stage of development,
  the vast majority of information\nhere relates to or is directly related to syllables
  and prosody.\nTherefore, I leave the name \\\"phonetic languages\\\", given that
  prosody\nis a more specific branch of phonetics.\n\n## Ethical component\n\nThe
  proposed approach is similar to the approach of music theory. Thus,\nin music, among
  all sounds, musical ones stand out, later consonances\nand dissonances are studied,
  later notes, intervals, chords, melodies,\ncomposition, etc. There are recommendations,
  but they do not bind the\ncreators, but help. Similarly, the proposed approach is
  designed to\nprovide such assistance. Its strangeness at first glance cannot be
  a\nreason to deny it.\n\nFor Christians, to whom the author himself belongs, the
  words of Moses\nare important: \\\"And Moses went out, and spake unto the people
  the word\nof the LORD, and gathered together seventy men of the elders of the\npeople,
  and set them near the tabernacle. And the LORD came down in the\ncloud, and spake
  unto him, Two of the men remained in the state, one\nnamed Eldad and the other named
  Modad, but the Spirit also rested on\nthem. And the young man ran, and told Moses,
  and said, Eldad and Modad\nare prophesying in the camp: And Joshua the son of Nun,
  the servant of\nMoses, one of his chosen ones, answered and said, My lord Moses.
  But\nMoses said unto him, Hast thou not jealous of me? O that all the people\nof
  the LORD should be prophets, if the LORD would send His Spirit upon\nthem\\\". (Numbers
  XI, 24-29).\n\nIt is good that everybody can well write and speak.\n\n## First idea\n\nImagine
  that you can understand the information in the text regardless\nof the order of
  the words and preserve only the most necessary grammar\n(for example, the rule does
  not separate the preposition and the next\nword is preserved). Understand just like
  reading a text (after some\nlearning and training, perhaps), in which only the first
  and last\nletters are preserved in words in their positions, and all the others\nare
  mutually mixed with each other. So imagine that you can understand\n(and express
  your thoughts, feelings, motives, etc.) the message of the\ntext without adherence
  to strict word order. In this case, you can\norganize the words (keeping the most
  necessary grammar to reduce or\neliminate possible ambiguity due to grammar, or
  rather a decrease in its\nvolume), placing them so that they provide a more interesting
  phonetic\nsounding. You can try to create poetic (or at least a little more\nrhythmic
  and expressive) text or music.\n\nIt can also be an inspiring developmental exercise
  in itself. But how\ncould you quickly find out which combinations are more or less
  fit?\nAlso, can the complexity of the algorithms be reduced?\n\nThese are just some
  of the interesting questions. This work does not\ncurrently provide a complete answer
  to them, but is experimental one and\na research, and any result of it is valuable.\n\nUkrainian
  is a language without strict requirements for word order in a\nsentence (although
  there are some established preferred options) and has\na pleasant sounding. So,
  it can be a good example and instance. In\naddition, it is a native language for
  the author of the programs. Even\nif you don't want to create and use \"phonetic\"
  languages where phonetics\nis more important than grammar, then you can assess the
  phonetic\npotential of the words used in the text to produce specially sounded\ntexts.
  It can also be valuable and helpful in writing poetry and\npossible other related
  fields.\n\n## Sound Representations Durations as the Basis of the Approach\n\nThere
  is the fact as the basis of the approach that the language sounds\nhave different
  durations, which depends on the many factors e. g. mean\nof the phoneme producing
  (the different one for every one of them),\nother factors that can be more or less
  controlled but usually the full\ncontrol is not required and is not achieved. This
  leads to the fact that\nchaining of the phonemes and phonetic phenomenae sequentially
  among\nwhich there is also their syllables groupping introduces some rhythmic\npainting
  (picture, scheme). A human can (that is also trainable and can\nbe developed) recognize
  the traits of the picture, compare them one with\nanother, come to some phonetic-rhythmic
  generalizations and conclusions.\n\nThe question of determining the duration of
  speech sounds is not easy,\nbut the exact result as already mentioned is not required.
  In this\nimplementation of the approach of phonetic languages, certain\nstatistical
  characteristics of sounds are used, in particular, possible\ndurations are determined.
  If we compare the method of determining\ndurations, which is proposed and used in
  the program of the\n[r-glpk-phonetic-languages-ukrainian-durations](https://hackage.haskell.org/package/r-glpk-phonetic-languages-ukrainian-durations)\npackage,
  the analogy will be the packaging of bulky objects. For the\nobserver, the packaging
  will be an imaginary model of the process of\nobtaining sound durations. The pldUkr
  program (its generalization pldPL\nfrom the phonetic-languages-phonetics-basics
  package also follows this\npath, but it does not have normalization, because for
  different\nlanguages there may not be such a phenomenon as palatalization) uses\nlinear
  programming to find the minimum convex hull (not in a strict\nmathematical sense),
  which can 'contain' the sounds of speech. This\nconvex hull has an analogy of packaging,
  while the sounds of speech have\nan analogy of objects of variable volume inside
  the package. The same\nsound can be used in different situations, in different words
  with\ndifferent durations, but the program tries to choose such durations that\nwould
  'cover' (similar to the envelope curve 'covers' a family of\ncurves) all these variations
  for all sounds, with an additional\nnormalization of the duration of the phonetic
  phenomenon of\npalatalization (softening) of the consonant, which is least controlled\nby
  man, and therefore it is expected that this duration is the most\nresistant to possible
  random or systematic fluctuations. For the\nUkrainian language the possible duration
  which does not change strongly\nsounding is defined experimentally with use of the
  computer program\n[mm1](https://github.com/OleksandrZhabenko/mm1).\n\nFinally, normalization
  is not mandatory, it is important that all\ndurations are proportional to each other,
  i.e. it is not the durations\nthemselves (which are numerically expressed as real
  positive numbers)\nthat are important, but their mutual ratios (it is allowed to
  multiply\nthese durations simultaneously by one and the same positive number that\ndoes
  not affect the results of the approach).\n\n## Polyrhythm as a Multi-Ordered Sequence
  Pattern\n\nLet us have some sequence organized in the following way. Let us\nimplement
  (generally speaking a conditional one) division of the\nsequence into compact single-connected
  subgroups with the same number of\nelements each in the subgroup, which actually
  means that we split the\nsequence into a sequence of subsequences with the same
  number of\nelements in each. Consider the internal ordering of each subsequence\nfrom
  the perspective of the placement of the values of its elements and\nrepeatability
  of the some patterns of the placement of the elements. We\nassume that the elements
  can be compared in relation of order, that is,\nthey are the elements of the data
  type that has an implemented instance\nof the class Ord.\n\nConsidering that the
  elements of the subsequences may be pairwise\ndifferent (or in some cases equal),
  we will compare the positions on\nwhich the subgroups of elements that have a higher
  degree of relatedness\n(\\\"closeness\\\", \\\"similarity\\\") in value and order
  are located. Denote\nsuch subgroups by indices that have in the module code mostly
  a letter\ndesignation.\n\nThen each subsequence will consist of the same number
  of elements of one\nnature (in particular, numbers of the type Double), in each
  subsequence\nthere will be selected several subgroups of \\\"similar\\\" elements
  in\nvalue (and order, if the subsequences are sorted by the value), each of\nwhich
  will have its own index as a symbol (most often in the code -- the\ncharacters).
  Subgroups must have (actually approximately) the same\nnumber of elements (in the
  code it is not strictly used for\nsimplification of the former one, but it is so
  in the vast majority of\ncases because of the excessive \\\"accuracy\\\" of numbers
  of type Double\nthat are used). Consider the question of positions in the subsequences\nof
  the corresponding subgroups in case of they have been belonging to\ndifferent subsequences.\n\nTo
  assess this, we introduce certain numerical functions that have\nregular behavior
  and allow us to determine whether the subsequences\nactually have elements that
  belong to the relevant corresponding\nsubgroups in the same places, or on different
  ones. It can be shown that\nthe situation \\\"on different ones\\\" corresponds
  to the presence of\nseveral rhythmimc patterns - for each subgroup will be their
  own, which\ndo not mutually match, at the same time the ideal situation \\\"completely\nin
  the same places\\\" corresponds to the case when these rhythms are\nconsistent with
  each other, as is the case of coherence in quantum\nphysics, in particular spatial
  and temporal coherence, which is\nimportant in particular for understanding of lasers
  and masers.\nPolyrhythms consisting of such rhythms, which cohere with each other,\nform
  a more noticeable overall rhythm, as well as the presence of\ncoherence in the radiation
  leads to a more structured latter one\n(Zhabenko, n.d.b).\n\n## Coherent States
  of Polyrhythmicity as One of the Essential Sources of Rhythmicity\n\nThe described
  pattern of rhythmicity is one of the significant possible\noptions for the formation
  of rhythmicity in particular in lyrics or\nmusic, but not the only one. It should
  be noted that the described\nmechanism of rhythm formation, as is noticed in the
  statistical\nexperiments with texts using this code (the code of the library and
  its\ndependent packages on the Hackage site) may not be the only possible\noption,
  but in many cases it is crucial and influences the course of the\nrhythmization
  process (formation, change or disappearance of the\nrhythm). It is also known that
  the presence of the statistical\nrelationship does not mean the existence of deeper
  connections between\nphenomena, in particular -- the causality. \\\"Correlation
  does not mean\ncausality.\\\" A deeper connection implies the presence of other
  than the\nstatistical ones to confirm it.\n\n## Rap Music Consequences\n\nThe code
  of the library allows in practice to obtain rhythmic patterns\nthat are often close
  to the lyrics in rap style. Therefore, this can be\nattributed to one of the direct
  applications of the\nlibrary.\n\n## A Child Learns to Read, or Somebody New to the
  Language\n\nWhen a child just begins to read words in the language (or, there can
  be\njust somebody new to the language) he or she starts with phonemes\npronunciation
  for every meaningful written (and, hence, read) symbol.\nAfterwards, after some
  practice, he / she starts to read smoothly.\nNevertheless, if the text is actually
  a poetic piece, e. g. some poem,\nit is OFTEN (may be, usually, or sometimes, or
  occasionally, etc.) just\nevident that the text being read in such a manner has
  some rhythmicity\nproperties, despite the fact that the phonemes are read and pronounced\nin
  a manner of irregular and to some extent irrelevant to the normal\nspeech mode lengths
  (durations). We can distinguish (often) the poetic\ntext from the non-poetic one
  just by some arrangement of the elements.\n\nThe same situation occurs when a person
  with an accent (probably,\nstrong, or rather uncommon) reads a poetic text. Or in
  other situations.\nThe library design works just as in these situations. It assumes\npredefined
  durations, but having several reasonable (sensible) ones we\ncan evaluate (approximately,
  of course) the rhythmicity properties and\nsome other ones, just as the algorithms
  provided here.\n\nThis, to the mind of the author, is a ground for using the library
  and\nits functionality in such cases.\n\n## Problem of choosing the best function
  and related issues\n\nConsider the following question: suppose we have obtained
  the best\nversion (in our subjective opinion or on the basis of some criteria, it\nis
  irrelevant here) of the line in one way or another (here the method\ndoes not really
  matter). Is there a function that makes this particular\nvariant of the string optimal,
  i. e. for which such a variant of the\nstring gives the maximum of all possible
  permutations? Yes, there is.\nThis is easy to prove. The proof is reminiscent of
  the principle of\nequalizers.\n\nLet $n \\in N$ be the number of syllables in such
  a line. Arrange the\ndurations of the syllables in ascending order (standard procedure
  for\ndescriptive statistics). We will find the smallest nonzero difference\nbetween
  adjacent values, divide it by 5. Denote this value by $\\delta$.\nNow consider a
  number of syllable durations for our best string. Number\neach syllable from the
  beginning, counting from 1. Denote by\n$Y = \\{y_{i}, \\quad i \\in N, \\quad i=
  1,2, \\ldots, n \\}$ the set of all\nvalues of durations in the order of sequencing
  in the best line. Denote\nby $X = \\{0 = x_1, x_2, \\ldots, x_i, x_{i+ 1}, \\ldots,
  x_{n + 1}, \n\\quad i \\in N, \\quad i = 1,2, \\ldots, n \\}$ the set of coordinates
  of\nthe points of the ends of time conventional intervals, into which our\nbest
  line divides the time line (the left edge is 0, because the\ncountdown starts with
  0). Denote by\n$M = \\{z_i = \\dfrac {x_i + x_{i + 1}} {2},\\quad i \\in N, \n\\quad
  i = 1,2, \\ldots, n - 1 \\}$ a set of midpoints of the segments into\nwhich the
  time line is divided by the conditional intervals ends. Denote\nby $L_1 [a, b]$
  the class of Lebesgue-integrable functions on the\ninterval $[a, b]$. Let's mark\n$I
  (y_i, z_i, \\delta) [z_i - \\delta, z_i + \\delta]$ class of all bounded\nfunctions
  with $L_1 [z_i - \\delta, z_i + \\delta]$, the maximum and\nminimum values of each
  of which lie on the segment\n$[y_i -\\delta, y_i + \\delta]$. We denote each function
  of class $I$ by\n$g$.\n\nConsider the class of functions $F$ (a kind of finite analogues
  of the\nknown delta functions of Dirac), defined as follows:\n\n$$f (x, i) = \n\\begin
  {cases} \ng \\in I (y_i, z_i, \\delta) [z_i - \\delta, z_i + \\delta], \n\\quad
  \\text {if } y_ {i} \\text { is a unique value in the set } Y, \\, x\n\\in [z_i
  - \\delta, z_i + \\delta] \\\\ \ny_ {i}, \\quad \\text {if } y_ {i} \\text {\nhas
  equal value with some other number from the set } Y, \\, x \\in [z_i - \n\\delta,
  z_i + \\delta] \\\\ \n0, \\quad \\text { otherwise} \n\\end {cases}$$\n\nIt is easy
  to see that\n$$\\sum_{i = 1}^n \\int_{-\\infty}^{\\infty} f(x, i) \\, \n\\textrm
  {d} x,$$ where integration is carried out according to Lebesgue,\nis the desired
  function (because only the syllables of the best string\nin their places, taken
  into account with their indices, give a positive\ncontribution to its value, and
  for all other variants of the function at\nleast some of the syllables give 0 contribution),
  and it is not unique\ndue to the fact that in the first line of definition $f(x,
  i)$ the\nfunction can have an arbitrary value from a closed non-empty interval.\nTherefore,
  there is at least one class of functions that is described by\nsuch a formula, for
  each of which this particular variant of the string\nwill be optimal.\n\nLet's ask
  the following question: if we consider not a line, but their\ncombination, for example,
  a poem. Does a function that makes each line\noptimal (i. e. which will describe
  the whole work, each line in it)\nexist for the whole work (for this whole set of
  lines)?\n\nIn this case, the previous method of constructing the function does not\ngive
  the desired result, because for two lines it may be that what is\nbest for one of
  them is not the best for the other. In the case of\nincreasing the number of lines,
  this general suboptimality only\nintensifies. However, the existence of such a function
  for different\nparticular cases is a fundamentally possible situation, however,
  the\nprobability of its existence should decrease both with increasing number\nof
  rows and with the appearance of different features of rows, which\nincrease the
  differences between them. In general, the search for just\none such function may
  be virtually impractical.\n\nNevertheless, if we consider the whole work as one
  line, considering it\noptimal, then the method just described to construct the corresponding\nfunction
  (class of functions) again gives the result. Yes, the number of\nsyllables in it
  (in the generalized \\\"line\\\"-work) increases, but the\nprocedure itself gives
  similar results (if we neglect the possible\nidentical durations and repetitions
  of syllables in a larger text, which\nlead to the fact that some words can be rearranged
  and that makes the\ntext only approximately optimal). It is possible to suggest
  further\nimprovement of this procedure (for example, introduction of the factors\nwhich
  depend on values ​​of the next durations of syllables) that allows\nto reduce suboptimality
  of the text.\n\nBut still, if you go from one text to another, the resulting function
  is\nunlikely to be optimal.\n\nWe conclude that for the whole set of expediently
  organized texts the\nexistence of a universal function is seen as a certain hypothesis
  (with\nalmost certainly proposes a negative answer).\n\n## Ability to use your own
  durations of representations of sounds or phonetic phenomena\n\nThe programs offer
  four different sets of phonetic representations by\ndefault but it is possible to
  set your\nown durations. To do this, specify them as numbers of type 'Double' in\nthe
  file in the order defined as follows:\n\nwhere the specified values in the list
  refer to the phonetic\nrepresentations of the data type UZPP2 (from the module\nPhladiprelio.Ukrainian.Syllable).
  The last column is 8-bit integers\n(GHC.Int.Int8), which represent these sounds
  in the new modules.\n\nIf you want to specify several such sets (up to 9 inclusive),
  you can\nspecify '\\*' or several such characters from a new line, and then from\nthe
  next line there will be a new set of values.\n\nEach set should be in the following
  order:\n\\[1,2,3,4,5,6,7,8,9,10,11,15,16,17,18,19,20,21,22,23,24,25,26, 27,28,29,30,31,
  32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,66,101\\]\n\nwhere
  the number corresponds to the last column in the above diagram.\n101 corresponds
  to a pause\nbetween words (does not affect the search results of the line). Every\nnew
  value must be written in the file from the new line.\n\nThen when executing the
  program somewhere among the command line\narguments (it does not matter where exactly)
  specify \\<\\<+d\\>\\> \\<path\nto the file with the specified data\\>. Programs
  will read these values\nand convert them to the appropriate values. As properties
  it is\nnecessary to use then those which begin with the letter \\<\\<H\\>\\>, and\nfurther
  the corresponding designation of property merged with it. For\nexample, \\<\\<Hw04\\>\\>,
  the last digit in the record in this case will\nmean the ordinal number of the set
  of values, starting from 1 (maximum\n9).\n\nAlong with the custom values, you can
  use the provided by the library\nones, as usual, in the mode of several properties.\n\n##
  Minimum grammar for possible preservation of meaning and intelligibility\n\nPrograms
  use permutations of words that neglect any (or at least part\nof) grammatical connections,
  word order, and so on. This can lead (in\naddition to the need to think) to situations
  where grammatically related\nlanguage constructions are broken, their parts are
  transferred to other\nplaces, forming new connections and changing the meaning of
  the text.\n\nTo reduce this, to eliminate some of these effects, programs use\nconcatenation
  of words that have a close grammatical connection, so as\nnot to break them in the
  analysis. This allows you to maintain greater\nsemantic ease and recognizability
  of the text, as well as a side effect\nto increase the overall length of the line,
  which can be analyzed. In\nthe Ukrainian language, grammatically related auxiliary
  or dependent\nwords precede the independent or main one, so the concatenation of
  these\nauxiliary or dependent words to the next one is used. The completeness\nof
  the definition of such cases is not exhaustive, but the most frequent\ncases are
  considered.\n\nTo reduce this, to eliminate some of these effects, programs use\nconcatenation
  of words that have a close grammatical connection, so as\nnot to break them in the
  analysis. For the general case, it should be\nborne in mind that auxiliar or dependent
  words can go after the\nindependent or the main, so this should be considered separately
  (and\nattach such words to the previous, not to the next).\n\n## Advice how to use
  the programs\n\nIn correspondence with the previous information, the rhythmicity
  of the\nproposed by the programs variants can be in many cases more evident and\nperceived
  better if you read the words (their concatenations) at the\nlines without significant
  pauses between them (as one single phonetic\nflow), not trying to strengthen emphases
  (probably even without well\narticulated emphases, smoothly, with liasing). This
  can be even in a\ndifferent way, but if the obtained variants do not seem to be
  rhythmic\nenough then try just this option and since then compare and come to\nconclusion
  whether such sounding is just suitable for your situation.\n\nAn interesting additional
  information about the rhythm and related\nmusical topics is in the video:\n\n1\\.
  Adam Neely. [Solving James Brown's Rhythmic Puzzle](https://youtu.be/DcrYaRJD_e8).
  Adam Neely. 2021.\n\n# Constraints\n\nAn interesting system of constraints\nwas
  introduced, which allow considering only some subsets of all\npossible options,
  which are built taking into account the relative order\nof words and their place
  in a line.\n\nWhen starting the aftovolioUkr program, constraints can be specified\nas
  command line arguments. They allow you to reduce the number of\ncalculations, consider
  only certain options (for example, with a certain\ndefined order of some words,
  etc.), which allows you to actually expand\nthe capabilities of the program.\n\nThere
  are two options for encoding information about constraints. They\nuse the same basic
  constraints, but differ in that the extended version\nallows you to perform algebraic
  operations on Boolean sets, which allows\nyou to get the complete result, whatever
  it is, in one input. Instead,\nthe older variant is based on simple linear logic,
  which can also be\nsufficient in many cases - all used constraints in the base form
  must be\nfulfilled simultaneously, which is equivalent to having a relationship\nbetween
  them through the operator (&&) (boolean \\\"AND\\\") and the\nintersection of the
  corresponding Boolean sets.\n\nSince words and their combinations in this implementation
  are assumed to\nbe no more than 7 in a row, all numbers in the basic constraints
  must be\nno larger than 7 for the constraint to be \\\"non-zero\\\".\n\nIt is also
  worth saying that to get more or less interesting results, it\nis often advisable
  to reduce the number of restrictions and use less\nthan necessary.\n\nThere are
  15 types of basic constraints, and they can be combined in any\nway, but in compliance
  with the specifications for each of them. If the\nspecifications are violated, the
  program will read this constraint as\nits absence (equal to \\\"E\\\").\n\nThe basic
  principle is that the digits indicate the ordinal number of a\nword or a combination
  of words written as one word in a string starting\nfrom 1 (a natural number), and
  the letter indicates the type of basic\nconstraint. The rule has an exception --
  a \\\"zero\\\" constraint (its\nabsence, i.e. the entire set of all possible permutations
  is indicated),\nwhich has only a letter and no digits -- \\\"E\\\".\n\nAnother necessary
  condition for the constraint to be non-zero is that no\ndigital symbols within the
  same encoded constraint cannot be repeated\ntwice. For example, the following constraints
  are known to be invalid\nconstraints: Q2235 (repeated digits), E2 (numeric characters
  in a zero\nconstraint where there are none), T2435 (8 is greater than 7). T248 (8\nis
  greater than 7), F1 (one character instead of the required two),\nA3852 (8 is greater
  than 7), B5 (one character, but there should be\nmore).\n\nThe types of restrictions
  and their meanings are described in more\ndetail below.\n\n-   Constraint E -- No
  additional numeric characters - Corresponds to\n    the absence of an additional
  constraint. Denotes the entire set of\n    all theoretically possible permutations.
  If used in the extended\n    version (+b \\... -b), it can be negated by the symbol
  \\\"-\\\", and\n    then it corresponds together with this symbol to an empty set
  of\n    permutations, i.e. no actual options are present.\n\n-   Constraint Q --
  4 pairwise unequal digits in the range from 1 to the\n    number of words or their
  concatenations. The digits are the numbers\n    of 4 words or their concatenations,
  the mutual order of which will\n    be preserved in the permutations.\n\n    Also,
  if these words are the same (without taking into account\n    uppercase and lowercase
  letters), then this is a convenient way to\n    reduce the amount of data to be
  analysed.\n\n-   Constraint T -- 3 pairwise unequal digits between 1 and the number\n
  \   of words or their concatenations -- The digits are the numbers of 3\n    words
  or their concatenations, the mutual order of which will be\n    preserved in the
  permutations.\n\n    Also, if these words are the same (without taking into account\n
  \   uppercase and lowercase letters), then this is a convenient way to\n    reduce
  the amount of data that will be analysed.\n\n-   Constraint U -- 5 pairwise unequal
  digits in the range from 1 to the\n    number of words or their concatenations.
  The digits are the numbers\n    of 5 words or their concatenations, the mutual order
  of which will\n    be preserved in the permutations.\n\n    Also, if these words
  are the same (without taking into account\n    uppercase and lowercase letters),
  then this is a convenient way to\n    reduce the amount of data to be analysed.\n\n-
  \  Constraint F -- 2 unequal digits between 1 and the number of words\n    or their
  concatenations -- The digits are the numbers of 2 words or\n    their concatenations,
  the mutual order of which will be preserved in\n    the permutation.\n\n    Also,
  if these words are the same (without taking into account\n    uppercase and lowercase
  letters), then this is a convenient way to\n    reduce the amount of data to be
  analysed.\n\n-   Constraint A -- 1 digit and several more unequal digits (all unequal\n
  \   to each other) to its right in the range from 1 to the number of\n    words
  or their concatenations - The first digit is the sequence\n    number of the element,
  relative to which the placement of all other\n    elements (words or their concatenations);
  all other digits to the\n    right -- the numbers of the elements that should appear
  in the\n    resulting permutations TO THE RIGHT of the element with the number\n
  \   equal to the first digit.\n\n-   Constraint B -- 1 digit and several more pairwise
  unequal digits to\n    its right in the range from 1 to the number of words or their\n
  \   concatenations -- The first digit is the sequence number of the\n    element
  in relation to which the placement of all other elements\n    (words or their combinations);
  all other digits to the right -- the\n    numbers of the elements to be placed in
  the resulting permutations\n    TO THE LEFT of the item with the number equal to
  the first digit.\n\n-   Constraint P (fixed Point) -- 1 or more several pairwise
  unequal\n    digits in the range from 1 to number of words or their\n    concatenations
  -- each of them means the ordinal number of the word\n    that will remain in its
  place during permutations place.\n\n-   Constraint V -- (as half of W) -- 2 unequal
  digits in the range from\n    1 to the number of words or their concatenations,
  each of which\n    means the ordinal numbers of two words, the distance between
  which\n    and the mutual order of which will be preserved in all permutations.\n
  \   Most often it can be used for two neighbouring words and means then,\n    that
  they will be present as such a pair in all the variants being\n    analysed. It
  is also important if you don't want to concatenate such\n    words so as not to
  change the syllables of their common\n    (\\\"tangent\\\") boundaries at the same
  time.\n\n-   Constraint W -- (from the word tWo -- 2) -- 2 unequal digits in the\n
  \   range from 1 to the number of words or their concatenations, each of\n    which
  means the ordinal numbers of the two words, the distance\n    between which will
  be preserved in all permutations. Most often it\n    can be used for two neighbouring
  words and means then, that they\n    will be present in all variants together, but
  their relative order\n    can be also reversed.\n\n-   Constraint H -- (from the
  word tHree -- 3) -- 3 unequal digits in\n    pairs in the range from 1 to the number
  of words or their\n    concatenations, each of which means the ordinal numbers of
  the three\n    words, the distances between which and the mutual order of which\n
  \   will be preserved in all permutations. A certain subset of the\n    constraint
  R. Most often used for three words in a row.\n\n-   Constraint R -- (from the word
  thRee -- 3) -- similar to H, but only\n    the distances between the first two words
  are preserved, and the\n    same for the distances between the second and third
  words. Their\n    order can be changed to reverse. It's a rather complicated\n    combination,
  but it can be important in terms of grammar, as well as\n    the string to be analysed.\n\n-
  \  Constraint M -- (from the word Mixed) -- mixed H-R constraint --\n    similar
  to H, but between the first two words are preserved both the\n    distance and their
  relative position, and only the distance is\n    preserved between the second and
  third ones. It is also a rather\n    complex combination, a certain subset of the
  constraint R.\n\n-   Constraint N --- (fixed poiNts) --- an even non-zero number
  of\n    digits, where each digit in an odd position (first digit, third,\n    fifth,
  etc.) means the ordinal number of the word or combination in\n    the string that
  must be fixed in a new position, and the next digit\n    is the new ordinal number
  of this word or combination; thus, if this\n    pair of digits is the same, it means
  that this word should remain in\n    its place, otherwise it will be fixed in a
  new position. Generalised\n    constraint P, where the user can change the position
  of words and\n    their combinations in the string and fix them.\n\n-   Constraint
  D --- (DistanceD worDs) --- three digits, the first two\n    of which must be unequal
  and indicate the sequence numbers of two\n    words or their combinations, which
  must preserve the mutual order,\n    and the third digit is the new distance between
  these words (1 means\n    that the words are consecutive, 2 means that there is
  one other word\n    between the words, etc.), it must be in the range from 1 to
  the\n    number of words and their combinations minus 1. A generalisation of\n    constraint
  V, where the user can specify a new distance between\n    words.\n\n-   Constraint
  I --- (dIstanced words) --- is similar to D, with the\n    difference that the words
  can be in reverse order. Therefore, in the\n    symbolic notation, Iabc == Ibac.
  Also, Dabc + Dbac == Iabc. A\n    generalisation of the W constraint, where the
  user can specify their\n    own distance between words.\n\n-   Constraint G ---
  (Groupped together) --- two unequal digits, each of\n    them indicates the sequence
  number of the first and the last elements\n    of the group of words or their concatenations
  that should be groupped \n    together as a one whole (with possible inner permutations
  inside \n    the group) during all the permutations. Is useful mostly for some \n
  \   syntactic constructions such as a sentence or a phrase. The inner \n    counting
  are not implemented yet and probably will be implemented in\n    the future releases.
  Now the group is just used as a non-interrupted\n    groupping of the words to be
  preserved as a one whole.\n\n## Simple linear \\\"AND\\\" logic\n\nIf only one of
  the basic constraints is used, or it is known for sure\nthat it is necessary that
  all basic constraints in their set are\nfulfilled simultaneously, then you can use
  this option. It is logically\nthe same as the one implemented previously.\n\nTo
  do this, you use +a \\... -a \\\"brackets\\\" between which there are\nconstraints
  in their record, and all of them are separated from each\nother by a space. For
  example:\n\n-   +a P23 A456 -a -- means that Ρ23 and Α456 are satisfied\n    simultaneously,
  i.e. that the second and third words must remain in\n    their places (constraint
  P), and that the fifth and sixth words must\n    come after the fourth (constraint
  A).\n\n-   +a B23 F45 E T356 -a means that B23, F45, E and T356 are satisfied\n
  \   simultaneously, i.e. the third word must come after the second, the\n    fifth
  after the fourth, a \\\"zero constraint\\\" (meaning that it can\n    be omitted),
  and the relative order of the third, fifth and sixth\n    words must be preserved.\n\nIn
  fact, the space character between the constraints in this variant\nmeans a logical
  \\\"AND\\\".\n\nIf you need to set more complex constraints, or in general, in view
  of\nthe possible faster work with the program, you should use the general\nalgebraic
  version of setting constraints.\n\n## Algebraic (universal) variant of constraints\n\nI
  would like to point out that in order to use this functionality\nefficiently, you
  need to know the basics of logic and/or set theory, but\nthese materials are widely
  available in different languages, including\nUkrainian and English, at different
  levels of complexity. As for\nmathematics, you should at least understand what logical
  AND\n(conjunction), logical OR (disjunction), logical negation (NOT),\nuniversal
  set, and complementary set are. If you know how to program in\nat least one language,
  you are also familiar with these concepts and\nhave used them.\n\nTo use the algebraic
  version of constraints, you use +b \\... -b\n\\\"brackets\\\" between which the
  constraints in their record are placed,\nand you can additionally use brackets and
  the \\\"-\\\" sign, which means a\nlogical negation (logical \\\"NOT\\\") of the
  next after minus expression in\nbrackets or the basic constraint. Parentheses, as
  is often the case,\nindicate the order of calculation, as in algebra. After the
  minus, there\nmust be either an open parenthesis and an expression or an underlying\nconstraint.\n\nIf
  the constraints are written consecutively without spaces, the program\nunderstands
  this as a \\\"multiplication\\\" of the constraints, i.e. a\nlogical \\\"AND\\\",
  and if there is a space between them, it is an\n\\\"addition\\\" (logical \\\"OR\\\").\n\nThere
  can be no more than 1 \\\"-\\\" in a row, and there can be only one\nspace between
  groups of constraints. Parentheses must be opened and\nclosed according to the general
  rules of algebra (for example, the\nnumber of open and closed parentheses must be
  equal to each other). If\nthese rules are violated, the program will display a message
  that it is\nimpossible to output options that meet these constraints and ask you
  to\nspecify other data and constraints. A bracketed group must contain at\nleast
  one basic constraint. The priority of operations is the same as\nfor logical operators
  in Haskell and in Boolean logic in general.\n\nNote: if you use Linux shells (e.
  g. bash) or Windows PowerShell then\nfor the usage of parentheses you need to use
  quotation marks for the\nwhole generalized algebraic constraint. Please, refer to
  the further\ndocumentation for your shell or PowerShell.\n\nExamples of correct
  constraints:\n\n-   +b '(A23-H345 P45-(A24 B56))' -b is a symbolic representation
  of a\n    Boolean set\n\n        (Α23 && not H345 || P45 && not (A24 || B56)),\n\n
  \   where 'not' means a completion to the set in the universal set of\n    permutations,
  i.e. here it means all those theoretically possible\n    permutations, except for
  those denoted by the expression after\n    \\\"-\\\". Mathematically, this can be
  written as:\n    $$(A23 \\land \\neg H345 \\lor P45 \\land \\neg (A24 \\lor B56))$$\n\n-
  \  +b A345B62 P4-Q3612 -b is a symbolic representation of a Boolean set\n\n        A345
  && B62 || P4 && not Q3612,\n\n    which is mathematically equivalent to:\n    $$A345
  \\land B62 \\lor P4 \\land \\neg Q3612$$\n\n-   +b '(E)-P4' -b is a symbolic representation
  of a Boolean set\n\n        (E) && not P4,\n\n    which is mathematically equivalent:
  $$U \\land \\neg P4 = \\neg P4,$$\n    where $U$ is the universal set of all theoretically
  possible\n    permutations.\n\nExamples of mis-specification of constraints -- if
  in each of the\nprevious examples above remove one character except for numbers
  and\nspaces, or write two consecutive minuses or spaces anywhere. Or open and\nclose
  brackets without letters inside.\n\n\n# Why some lines are easy to pronounce and
  others are not, or Prosodic unpredictability as a characteristic of text\n\n## Unpredictability
  in reading and speaking\n\n### Main observations and the idea\n\nLet’s take a look
  at how the software works and why the strings it offers in different parts of its
  output\ncan be read and pronounced so differently, even though they consist of the
  same words (almost the\nsame sounds, if we do not take into account possible phenomena
  of assimilation and similarity).\n\nThe author of the software noticed that when
  working with the program for different options of a line,\nunexpected pauses may
  appear in the program output, during which a certain change in the rhythm\nof speech
  occurs (the previously mentioned incongruities). Such pauses for an experienced
  reader\n(speaker) do not (may not) occur within words, but only between words and
  their combinations.\n\nThe phenomena of perception and apperception are known to
  be combined.\n\nDuring perception, a person partially \"guesses\" the part of the
  line that he or she is going to read\nand prepares his or her speech apparatus for
  this.\n\nIt can be reasonably assumed that the appearance or absence of such pauses
  is due to an unpredictable\nchange in the line, which does not correspond to the
  pattern to which the person has been attuned\nby their combination of aperception
  and perception.\n\nOne of the factors that affect apperception is specifically the
  presence of a previously detected rhythmic\npattern, and therefore, the appearance
  of these pauses is more likely to occur when this pattern\nchanges. Nevertheless,
  it has also been observed that a person can learn to read (pronounce) a line\nas
  a single phrase without the presence of these pauses, if he or she makes a certain
  effort and also\nas a result of training (repeated readings of one of the lines
  with memorisation of the structure). Also,\nthe number of such pauses is significantly
  reduced if you read different options of the same line in a\nrow (one can think
  that a person is preparing for such changes, which they already partially know).\nLet
  us dwell a little more on \"guessing\" (prediction).\n\nIf, as a result of a combination
  of apperception and perception, a person \"guesses\" what the next\nspeech structure
  will be, the \"fluidity\" (smoothness) of the line, then there is no such pause,
  the text is\nread (pronounced) further according to the combination of perception
  and apperception by the already\nprepared speech apparatus, which minimises delays.\n\nIf,
  on the other hand, perception creates an instantaneous \"false prediction\" of what
  the further speech\nconstruction, the \"smoothness\" of the line will be, then for
  expressive speech, the speech apparatus\nhas to be readjusted on the fly, first
  detecting this discrepancy between the aperceptual predicted\npattern and the actual
  construction of the text, and only then readjusting to this change and forming\na
  new perception, a new forecast for the future. These latter processes take more
  time, and therefore\nan additional, prolonged pause and the emergence of a feeling
  of a \"break\" in the line, intonation,\ndifficulty of pronunciation, etc.\n\nIt
  can also be assumed that for an inexperienced reader or speaker who reads (pronounces)
  line by\nsyllables, slowly, such additional delays should be almost non-existent,
  since they are much less\nlikely to use apperception, but mostly perception.\n\n###
  Analysis of the prediction pattern\n\nWhat is the pattern of prediction?\n\nThe
  software offers variants in which there is a certain repeatability (or its somewhat
  unpredictable\nchange) of the relative relative placement of syllables (time elements
  in the more general case) wdifferent durations, and allows also, in certain cases,
  to say what these patterns will be approximately. Perception, when repeated several
  times (for several metrical feet) or at least once in a line of a\ncertain sequence
  of durations, causes an expectation, a forecast for the continuation of such repetition\nas
  something more likely, i.e. recognises a certain pattern of rhythmicity, and causes
  a certain\npreparation for it. \n\n## The case of a two-syllable metrical foot\n\nLet’s
  take the case of a two-syllable foot as an example. If you run the program by calling\n\naftovolioUkr
  +r 21 <Ukrainian text>\n\nthen this is exactly the case when the program will analyse
  two-syllable feet.\n\nIt often happens that the value of the property in this case
  for several variants will be 0.\n\nWhat does this mean? If you look at the code,
  you can see that this corresponds to the case when\neach subsequent metric foot,
  starting with the first in the string, offers a modified version of the foot\nto
  a mirror-opposite one if the syllable durations in it are not the same (which is
  the case in the vast\nmajority of cases). This means a consistent, constant alternation
  of the iamb and the chorus according\nto one of two options.\n\nIn the first case,
  the first foot is a chorus, and in the second -- an iambic. Then in the first case,\nsuch
  a line will have the structure (except for the first syllable, which is \"extra\")
  -- pyrrhic -- spondee -\npyrrhic - spondee \\.\\.\\., and in the second case (except
  for the \"extra\" first syllable) -- spondee -- pyrrhic\n-- spondee -- pyrrhic \\.\\.\\.\n\nThis
  leads in many cases to a more undulating intonation, with short groups of longer
  and shorter\nsyllables alternating (except for the first syllable). Moreover, the
  ending of such a line can contain\neither a full spondee or pyrrhic (if the number
  of syllables in the line is odd) or only half of it (if the\nnumber of syllables
  in the line is even).\n\nThe opposite options in the output of the program will
  be those for which the property value will\nbe the maximum possible for these words.
  This, in turn, means that if this number is equal to the\ntheoretical maximum (the
  quotient of the number of syllables in a line and 2), then the line is a\nperfectly
  constructed iambic or chorus (according to its metrical properties), except, perhaps,
  for its\nimmediate ending (the last syllable if the number of syllables is odd).
  This often leads to the fact\nthat such a line is often read in accordance with
  a distinctive iambic or chorus pattern - often quite\nsmoothly, without the above-mentioned
  pauses.\n\nIn practice, the first option (with a value of 0) is very common, almost
  always is present, but the latter\nis rare. More commonly, it is not possible to
  create a perfect iambic or chorus for the given words\n(but if you replace them
  with other, more appropriate ones, you can get a perfect line in many cases\ndue
  to the synonymous richness of the language).\n\nHowever, if the maximum value of
  a property differs from the maximum theoretically possible by an\neven number (2,
  4, 6, etc.), then the feet at the beginning and end of the line are the same (except\npossibly
  the last syllable if the number of syllables is odd), and inside the line they alternate
  as\nmany times as this number differs from the maximum possible number. If the maximum
  number differs\nfrom the maximum theoretically possible by an odd number (1, 3,
  5, etc.), then at the beginning and\nend of the line - different feet (except, perhaps,
  the last syllable if the number of syllables is odd\n\nIn these \"close to ideal\"
  cases, pauses are often possible, but also possible pauses are often present,\nbut
  they can also be absent, depending on where the changes in the feet occur (between
  words or\nwithin words), and whether it is correctly predicted.\n\nIf we consider
  the intermediate values of the property, we get less predictable line options, which
  can\nstill be reasoned about in a similar way to the second case (and the closer
  the value of the property\nis to 0, the more the line becomes similar to the first
  case with a more undulating structure).\n\n# Stylistic peculiarities in language
  and versification of the Taras Shevchenko’s poem ”Садок вишневий коло хати” using
  AFTOVolio\n\nLet's consider Taras Hryhorovych Shevchenko's poem \\\"Cherry orchard\naround
  the house\\...\\\" in relation to the author's style, and more\nprecisely, the peculiarities
  of language and versification. To do this,\nwe will use the programs of the\nphonetic-languages-simplified-examples-array
  package from the Hackage\nwebsite.\n\nNext, it is shown how you can analyze the
  text, knowing how to work with\nthe programs of the package, and what conclusions
  this leads to.\n\n## Analysis\n\nLet's try to use the property y0 with a selective
  sum to analyze the\noriginal version of the poem \\\"Садок вишневий коло хати\\\"
  by Taras\nShevchenko.\n\nLet's pay attention to the second line - \\\"Хрущі над
  вишнями гудуть.\\\"\nIn it, the words \\\"хрущі\\\" and \\\"гудуть\\\" with \\\"у\\\"
  are placed as far\nas possible from each other. This suggests that this line satisfies
  the\nproperty y0.y. We check:\n\n    aftovolioUkr +ul  y0.у Хрущі над вишнями гудуть\n
  \   7  Хрущі гудуть надвишнями   3        7  надвишнями Хрущі гудуть   4\n    6
  \ надвишнями гудуть Хрущі   2        18  гудуть надвишнями Хрущі   5\n    6  гудуть
  Хрущі надвишнями   1        19  Хрущі надвишнями гудуть   6\n    \nIndeed, 19 out
  of a maximum possible 19! But it can be noticed that the\nvowels in the words are
  selected so that they do not repeat closely, so\nthe maximum can be expected not
  only for y0.y, but also for the more\ngeneral property y0.vw:\n\n    aftovolioUkr
  +ul y0.vw Хрущі над вишнями гудуть\n    7  Хрущі гудуть надвишнями   3        7
  \ надвишнями Хрущі гудуть   4\n    6  надвишнями гудуть Хрущі   2        18  гудуть
  надвишнями Хрущі   5\n    6  гудуть Хрущі надвишнями   1        19  Хрущі надвишнями
  гудуть   6\n    \nAgain the maximum 19 out of 19 possible! Okay, that's it for this
  line.\nAnd for the whole poem? If we check every line with \n\n    aftovolioUkr
  +ul y0.vw\n\ncommand, then we see many maximums. \n\nWe check: indeed, many maximums!
  But not all\\.\\.\\. Let's try to add\nsomething or take something away to increase
  the number of maxima, then\nthis new property will be the most appropriate. Let's
  see where there\nare no maxima and why. For example, lines in a row --- \\\"А матері\nвечерять
  ждуть. // Сем'я вечеря коло хати // \\\" --- in them we notice\nthat the sounds
  \\\"е\\\" are close to each other. Then if you take away the\n\\\"е\\\", maybe it
  will be closer to the maximum? We check:\n\n    aftovolioUkr +ul y0.а.о.у.и.і\n\nWe
  pay attention, indeed, for these lines there was a shift towards\nmaximums, the
  last line \\\"Та соловейко не затих\\\" also \\\"risen\\\" to the\nmaximum (admittedly,
  from two possible options). Instead, the line\n\\\"Дочка вечерять подає\\\" \\\"dropped\\\"
  from the maximum to the 3 interval.\nIt can be assumed that the \\\"status\\\" of
  \\\"е\\\" in the poem is\n\\\"unclear\\\": with or without it.\n\nAs you can see,
  it is not possible to achieve maximums everywhere under\nvarious options. This is
  especially true of the three lines in a row at\nthe end: \\\"Поклала мати коло хати
  // Маленьких діточок своїх // Сама\nзаснула коло їх\\\" And also \\\"Співають ідучи
  дівчата // А матері вечерять\nждуть.\\\" In the second case, can see that \\\"у\\\"
  alternates with \\\"i\\\",\nthat is, we have \\\"ю(у) - i - y\\\", as well as in
  the next \\\"e - i - e -\ne\\\". It can be assumed that there is 'art sound painting'
  here - vowels\nalternate to reproduce the motifs of the melody and rhythm of folk\nsongs.
  Similarly, it can be assumed that before the end of the poem, the\nvowels begin
  to \\\"group\\\" closer, that is, a \\\"coherent, dynamic\\\"\neffect is created,
  that is, amplification, and it can be thought that it\ndescribes a certain change
  in the situation. Let's see, it can really be\ncalled the highest point (climax)
  of the poem, and therefore its\namplification by grouping of vowels creates the
  effect of the top of the\npicture. Accordingly, it is necessary to read (recite)
  these lines (this\nis justified, see the title) with a certain acceleration, not
  measured,\nbut more cohesively. At the same time, es where we have a maximum for\nvowels
  (or vowels with deaf consonants) should be read more measuredly,\nso that it is
  possible to see the richness of the painting, its calmness\nand stability. The penultimate
  line has a pause in the middle---like a\npause after a highest point (climax). And
  then the denouement.\n\nIt must be said that, having 3-4, sometimes 2 words in a
  line, in order\nnot to create the impression of \\\"short lines\\\", a certain\n\\\"ungrouping\\\"
  of sounds should be applied, so that it can be perceived\nas a leisurely narration
  (as in this case).\n\n# Peculiarities of the stressed and unstressed syllables in
  Ukrainian and other languages\n\nIn linguistic typology, there is a prosodic classification
  of languages according to the rhythm of oral speech. In this sense, speech rhythm
  is interpreted as a periodic isochrony (temporal and quantitative identity) of comparable
  phonetic units.\n\nIt is believed that all the world's languages can be divided
  into three groups by the type of rhythm (isochrony of comparable units), depending
  on which unit manifests regular (permanent) isochrony (Ladefoged 1975 (Ladefoged,
  Peter. \"A Course in Phonetics. Harcourt Brace Jovanovich.\" New York (1975)), Ishchenko
  2015, see link below):\n\n- syllable-timed languages: languages of syllable rhythm,
  that is, in which syllables - stressed and unstressed - have a relatively uniform
  duration. This group includes primarily the Romance languages (Spanish, French,
  Italian, etc;)\n\n- stressed-timed languages: languages of accent rhythm in which
  isochrony is manifested at the level of relatively uniform duration of intervals
  between adjacent stressed syllables (interaccent intervals). These include Germanic,
  Arabic, and Slavic languages;\n\n- mora-timed languages: languages with a mora rhythm,
  i.e. in which isochrony is inherent in the mora. These are primarily Japanese, as
  well as some languages of Austronesian, Nigerian-Congolese families. It is also
  believed that that Proto-Indo-European, ancient Greek, and Vedic Sanskrit were also
  mora-timed languages.\n\nFor the Ukrainian language, Oleksandr Ishchenko's study
  ([Іщенко, О.С. (2015). Українська мова в просодичній типології мов світу. Dialog
  der Sprachen, Dialog der Kulturen. Die Ukraine aus globaler Sicht: V. Internationale
  virtuelle Konferenz der Ukrainistik (S. 76-85). München: Verlag Otto Sagner](https://phonetica.wordpress.com/wp-content/uploads/2015/11/ukrajinska-mova-v-prosodychniy-typologiji-mov-svitu.pdf))
  found that the average duration of stressed syllables in slow speech was 240 ms
  ± 31%, and in fast speech - 145 ms ± 35%. The average duration of unstressed syllables
  in slow speech is 175 ms ±40%, in fast speech - 110 ms ± 34%. The difference between
  the duration of stressed and unstressed syllables in slow speech is 39%, in fast
  speech - 28%.\n\nTherefore, for the Ukrainian language it is appropriate to use
  =13 or similar values, e. g. =133 etc. for the stressed syllables to specify that
  they are stressed while using the aftovolioUkr program.\n\nSee, for example:\n\n
  \   aftovolioUkr -e +r 21 +w 54 садок=133 вишне=133вий ко=133лоха=133ти хрущі=133
  над ви=133шнями гудуть=133\n    \\...\n    8  садок вишневий колохати надвишнями
  гудуть хрущі   711\n    \nas the element with the maximum value (the \"-e\" command
  line argument suppresses output of \"={digits}\" for better readability). The second
  line is changed because of the last syllable in the first line that is redundant
  as for the iambic meter.\n\nYou can easily paste the =133 group into the text in
  many editors or on the command line directly.\n\n## Conclusions\n\nIt can be concluded
  that Taras Shevchenko wrote the lines of the poem in\nsuch a way as to place vowels
  more widely, as well as voiceless\nconsonants (where there are not enough vowels,
  for melodiousness), but\nthere, perhaps, there was more dynamism --- there, on the
  contrary, he\nchose options with their closer grouping . Therefore, these lines
  should\nbe read more dynamically.\n\n# Usage of the executable\n\nSYNOPSIS:\n\n-
  aftovolioUkr [[+a <AFTOVolio constraints> -a] [+b <extended algebraic AFTOVolio
  constraints> -b] [+P <non-negative Int>] [+c <HashCorrections encoded>] [-e] [+l]
  [+d <FilePath to file with durations>] [+k <number - hash step>] [+r <groupping
  info>] [+s <syllable durations function number>] [-p] [+w <splitting parameter>]
  [+f <FilePath to the file to be appended the resulting String> <control parameter
  for output parts>] [+x <maximum number of words taken>] [+dc <whether to print <br>
  tag at the end of each line for two-column output> <FilePath to the file where the
  two-column output will be written in addition to stdout>]] Ukrainian textual line\n\nOR:\n-
  aftovolioUkr [[+a <AFTOVolio constraints> -a] [+b <extended algebraic AFTOVolio
  constraints> -b] [+P <non-negative Int>] [+c <HashCorrections encoded>] [-e] [+l]
  [+d <FilePath to file with durations>] [+k <number - hash step>] [-t <number of
  the test or its absence if 1 is here> [-C +RTS -N -RTS]] [+s <syllable durations
  function number>] [-p] [+w <splitting parameter>] [+x <maximum number of words taken>]]
  Ukrainian textual line\n\nOR:\n- aftovolioUkr [[+a <AFTOVolio constraints> -a] [+b
  <extended algebraic AFTOVolio constraints> -b] [+P <non-negative Int>] [+ul <diversity
  property encoding string>] [+l] [-p] [+w <splitting parameter>] [+f <FilePath to
  the file to be appended the resulting String> <control parameter for output parts>]
  [+x <maximum number of words taken>] [+dc <whether to print <br> tag at the end
  of each line for two-column output> <FilePath to the file where the two-column output
  will be written in addition to stdout>]] Ukrainian textual line\n\nOR:\n- aftovolioUkr
  [[+a <AFTOVolio constraints> -a] [+b <extended algebraic AFTOVolio constraints>
  -b] [+P <non-negative Int>] [-e] [+l] [+d <FilePath to file with durations>] [+s
  <syllable durations function number>] [-p] [+w <splitting parameter>] [+q <power
  of 10 for multiplier in [2..6]>] [+f <FilePath to the file to be appended the resulting
  String> <control parameter for output parts>] [+x <maximum number of words taken>]
  [+dc <whether to print <br> tag at the end of each line for two-column output> <FilePath
  to the file where the two-column output will be written in addition to stdout>]
  [+l2 <a Ukrainian text line to compare similarity with> -l2]] [+di] Ukrainian textual
  line\n\nOR:\n- aftovolioUkr [[+a <AFTOVolio constraints> -a] [+b <extended algebraic
  AFTOVolio constraints> -b] [+P <non-negative Int>] [-e] [+l] [+d <FilePath to file
  with durations>] [+s <syllable durations function number>] [-p] [+w <splitting parameter>]
  [+q <power of 10 for multiplier in [2..6]>] [+f <FilePath to the file to be appended
  the resulting String> <control parameter for output parts>] [+x <maximum number
  of words taken>] [+dc <whether to print <br> tag at the end of each line for two-column
  output> <FilePath to the file where the two-column output will be written in addition
  to stdout>] [+ln <a sequence of positive Word8 values not greater than 255 e. g.
  24 157 45 68 45 56 59 to compare similarity with> -ln]] [+di] Ukrainian textual
  line\n\nOR:\n- aftovolioUkr [[+a <AFTOVolio constraints> -a] [+b <extended algebraic
  AFTOVolio constraints> -b] [+P <non-negative Int>] [-e] [+l] [+d <FilePath to file
  with durations>] [+s <syllable durations function number>] [-p] [+w <splitting parameter>]
  [+q <power of 10 for multiplier in [2..6]>] [+f <FilePath to the file to be appended
  the resulting String> <control parameter for output parts>] [+x <maximum number
  of words taken>] [+dc <whether to print <br> tag at the end of each line for two-column
  output> <FilePath to the file where the two-column output will be written in addition
  to stdout>] [+di] [+m <FilePath> <num1> +m2 <num2>]]\n\nOR:\n- aftovolioUkr [[+a
  <AFTOVolio constraints> -a] [+b <extended algebraic AFTOVolio constraints> -b] [+P
  <non-negative Int>] [-e] [+l] [+d <FilePath to file with durations>] [+s <syllable
  durations function number>] [-p] [+w <splitting parameter>] [+q <power of 10 for
  multiplier in [2..6]>] [+f <FilePath to the file to be appended the resulting String>
  <control parameter for output parts>] [+x <maximum number of words taken>] [+dc
  <whether to print <br> tag at the end of each line for two-column output> <FilePath
  to the file where the two-column output will be written in addition to stdout>]
  [+di] [+m3 <FilePath> <num1> <num2>]]\n\nOR:\n- aftovolioUkr [-cm <FilePath to write
  the resulting combined output to> <FilePaths of the files to be compared and chosen
  the resulting options line-by-line>]\n\n### Executable commandline parameters and
  their meaning\n\n- +l      — if specified then the output for one property (no tests)
  contains empty lines between the groups of the line option with the same value of
  property.\n\n- +w      — if specified with the next Int8 number then the splitting
  of the output for non-testing options is used. Is used when no \"-t\" argument is
  given. The output is split into two columns to improve overall experience. The parameter
  after the \"+w\" is divided by 10 (-10 for negative numbers) to obtain the quotient
  and remainder (Int8 numbers). The quotient specifies the number of spaces or tabular
  characters to be used between columns (if the parameter is positive then the spaces
  are used, otherwise tabular characters). The remainder specifies the option of displaying.
  If the absolute value of the remainder (the last digit of the parameter) is 1 then
  the output in the second column is reversed; if it is in the range [2..5] then the
  output is groupped by the estimation values: if it is 2 then the first column is
  reversed; if it is 3 then the second column is reversed; if it is 4 then like 2
  but additionally the empty line is added between the groups; if it is 5 then like
  for 3 and additionally the empty line is added between the groups. Otherwise, the
  second column is reversed. The rules are rather complex, but you can give a try
  to any number (Int8, [129..128] in the fullscreen terminal). The default value is
  54 that corresponds to some reasonable layout.\n\n- +s      — the next is the digit
  from 1 to 4 included. The default one is 2. Influences the result in the case of
  +d parameter is not given.\n\n- +d      — if present, then afterwards should be
  a FilePath to the file with new durations of the Ukrainian AFTOVolio representations.
  They can be obtained using the information in the manual by [the link](https://oleksandr-zhabenko.github.io/uk/rhythmicity/phladiprelioEng.7.pdf#page=12)
  and the 2 next pages in the pdf file, besides on [the page](https://hackage.haskell.org/package/r-glpk-phonetic-languages-ukrainian-durations)
  and on [the commentaries here](https://hackage.haskell.org/package/aftovolio-0.5.1.0/docs/Aftovolio-Ukrainian-ReadDurations.html#v:readSound8ToWord8)
  with the last one having priority.\n\n- -p      — if present the minimal grammar
  transformations (appending and prepending the dependent parts) are not applied.
  Can be useful also if the text is analyzed as a Ukrainian transcription of text
  in some other language.\n\n- +f      — if present with two arguments specifies the
  file to which the output information should be appended and the mode of appending
  (which parts to write). The default value if the secodnd parameter is 0 or not element
  of [1,2,3,4,10,11,12,13,14,15,16,17,18,19] is just the resulting String option.
  If the second parameter is 1 then the sequential number and the text are written;
  if it is 2 then the estimation value and the string are written; if it is 3 then
  the full information is written i. e. number, string and estimation; if it is 4
  then the number and estimation (no string).\nThe second arguments greater or equal
  to 10 take effect only if the meter consists of two syllables (in case of \"+r 21\"
  command line options given). If it is 10 in such a case then before appending the
  line option itself to the given file there is hashes information for this line option
  displayed. If it is 11 — the same hashes information is displayed before processing
  as for 1. If it is 12 — the same hashes information is displayed before processing
  as for 2 and so on for 13, 14. If it is 15 up to 19 — it is analogically to the
  the 10–14 but the hashes information is not only printed on the screen, but appended
  to the file specified. These values are intended to test the interesting hypothesis
  about where the pauses can occur. For more information on the hypothesis, see above.\n\n-
  +dc     — if specified with two further arguments then the first one can be 1 or
  something  else. If it is 1 then additionally to every line as usual there is printed
  also <br> html tag at the end of the line for the two-columns output. Otherwise,
  nothing is added to each line. The second argument further is a FilePath to the
  writable existing file or to the new file that will be located in the writable by
  the user directory. The two-column output will be additionally written to this file
  if it is possible, otherwise the program will end with an exception.\n\n- +a \\...
  -a       — if present contains a group of constraints for AFTOVolio. For more information,
  see above.\n\n- +b \\... -b       — if present takes precedence over those ones
  in the +a \\... -a group (the latter ones have no effect). A group of constraints
  for AFTOVolio using some boolean-based algebra. If you use parentheses there, please,
  use quotation of the whole expression between the +b and -b (otherwise there will
  be issues with the shell or command line interpreter related to parentheses). For
  example, on Linux bash or Windows PowerShell: +b 'P45(A345 B32)' -b. If you use
  another command line environment or interpreter, please, refer to the documentation
  for your case about the quotation and quotes. For more information, see above.\n\n-
  +P    — if specified with the following non-negative Int from 0 to 3 including then
  specifies the general type of permutations of the words and their concatenations.
  +P 0 corresponds the full set of all possible permutations (the default behaviour,
  also in case of no specification at all), +P 1 corresponds to the set of permutations,
  where just one word can change its position (the elementary, the least possible
  permutation), +P 2 corresponds to the set of permutations, where two words can be
  swapped one with another, +P 3 corresponds to the set of permutations, where no
  more than two words can change their positions, including the cases of no changes
  at all and just one word changes its position. All, except +P 0 provide less permutations
  in general and are quicker to be computed and displayed. This one is more useful
  in case of extended sets of words, e. g. when there are 8 or 9 words in the line.\n\n-
  +l2 \\... -l2     — if present and has inside Ukrainian text then the line options
  are compared with it using the idea of lists similarity. The greater values correspond
  to the less similar and more different lines. Has no effect with +dc group of command
  line arguments. Has precedence over +t, +r, +k, +c etc. groups of command line options
  so that these latter ones have no effect when +l2 \\... -l2 is present.\n\n- +ln
  \\... -ln     — if present and has inside a sequence of positive Word8 values not
  greater than 255 then the line options are compared with it using the idea of lists
  similarity. The greater values correspond to the less similar and more different
  lines. Has no effect with +dc group of command line arguments. Has precedence over
  +t, +r, +k, +c etc. groups of command line options so that these latter ones have
  no effect when +ln \\... -ln is present.\n\n- +di     — if present implies the \"differentiation\"
  mode of computation for the comparing options with the line in +l2\\.\\.\\.-l2 or
  +ln\\.\\.\\.-ln groups of command line arguments. Is useful mostly in case of the
  line to compare with has approximately the same number of syllables as the option
  lines.\n\n- -e     — if present suppresses the printing of \"={digits}\" in the
  line option to the screen. Is used for better readability, often with +di.\n\n-
  +q      — if present with +l2 \\... -l2 group of arguments then the next argument
  is a power of 10 which the distance between line option and the predefined line
  is quoted by. The default one is 0 (that means no change). You can specify not less
  than 0 and not greater than 4. Otherwise, these limit numbers are used instead.
  The greater value here leads to more groupped options output.\n\n- +ul     — afterwards
  there is a string that encodes which sounds are used for diversity property evaluation.
  If used, then +r group has no meaning and is not used. Unlike in the link, the argument
  \"1\" means computing the property for all the sound representations included (for
  all of the present representations, so the value is maximal between all other strings
  instead of \"1\"). For more information, [see](https://oleksandr-zhabenko.github.io/uk/rhythmicity/PhLADiPreLiO.Eng.21.html#types)\n\n-
  +r      — afterwards are several unique digits not greater than 8 in the descending
  order — the first one is the length of the group of syllables to be considered as
  a period, the rest — positions of the maximums and minimums. Example: \"543\" means
  that the line is split into groups of 5 syllables starting from the beginning, then
  the positions of the most maximum (4 = 5 - 1) and the next (smaller) maximum (3
  = 4 - 1). If there are no duplicated values then the lowest possible value here
  is 0, that corresponds to the lowest minimum. If there are duplicates then the lowest
  value here is the number of the groups of duplicates, e. g. in the sequence 1,6,3,3,4,4,5
  that is one group there are two groups of duplicates — with 3 and 4 — and, therefore,
  the corresponding data after +r should be 7\\...2. The values less than the lowest
  minimum are neglected.\n\n- +c      — see explanation at [the link](https://hackage.haskell.org/package/rhythmic-sequences-0.3.0.0/docs/src/Rhythmicity.MarkerSeqs.html#HashCorrections).
  Some preliminary tests show that theee corrections influence the result but not
  drastically, they can lead to changes in groupping and order, but mostly leave the
  structure similar. This shows that the algorithms used are more stable for such
  changes.\n\n- -t      — and afterwards the number in the range [0..179] (with some
  exceptions) showing the test for 'smoothness' (to be more accurate - absence or
  presence of some irregularities that influences the prosody) to be run - you can
  see a list of possible values for the parameter here at the link:\n[link1](https://hackage.haskell.org/package/phladiprelio-ukrainian-simple-0.6.0.0/src/app/Main.hs)
  \ on the lines number: 51; 56-115; 118-126. The first section of the lines numbers
  56-63 and 120 corresponds to the detailed explanation below.\nFor ideas of actual
  usage of the tests, see the documentation above.\n\n- -C      — If specified with
  +RTS -N -RTS rtsoptions for the multicore computers with -t option then it can speed
  up the full computation of the all tests using more resources. Uses asynchcronous
  concurrent threads in computation. This groups (-C and rtsoptions) can be specified
  in any position as command line groups of arguments. The output is in this case
  not sorted in the order of 2,3,4,5,6,7, but can vary depending on your CPU configurations
  and states and / or some other factors.\n\n- +k      — and then the number greater
  than 2 (better, greater than 12, the default value if not specified is 20). The
  greater value leads to greater numbers. The number less than some infimum here leads
  to wiping of some information from the result and, therefore, probably is not the
  desired behaviour. For most cases the default value is just enough sensible, but
  you can give it a try for other values.\n\n- +x      — If specified with the further
  natural number then means that instead of maximum 7 words or their concatenations
  that can be analysed together as a line there will be taken the specified number
  here or 9 if the number is greater than 8. More words leads to more computations,
  therefore, please, use with this caution in mind. It can be useful mostly for the
  cases with the additional constraints specified (+a \\... -a or +b \\... -b groups,
  see above).\n\n- +m      — If present followed with two arguments — the name of
  the file to be used for reading data for multiline processment and the second one
  — the number of line to be processed. The numeration of the lines in the file for
  the aftovolioUkr program here starts from 1 (so, it is: 1, 2, 3, 4,.. etc). The
  program then uses instead of text the specified line from the file specified here
  and prints information about its previous and next lines (if available).\n\n- +m2
  \    — If present, it means that the line with the corresponding number specified
  here will be taken from the same file specified as +m <file>. For example, the entry
  +m <file> 1 +m2 4 means that 1 line will be taken from the file <file> for the similarity
  analysis and it will be compared not with contents of +l2 \\... -l2, but with the
  4th line from the same file.\n\nThe abbreviation for +m <file> <num1> +m2 <num2>
  is +m3 <file> <num1> <num2>, which has the same meaning but a slightly shorter entry.\n\nIf
  <num1> == <num2>, then there is at least one of all the options with a property
  value of 0.\n\nYou can also use the \"music\" mode, which allows you to write better
  lyrics and music. To do this, you can add a record of the form \\_{set of digits}
  or ={set of digits} to a word or between syllables after the needed to be referred
  to, and this set of digits will be converted to a non-negative Double number by
  the program and then used to modulate the duration of the previous syllable or of
  the additional one(s) added here. The first digit in the record after '=' or '\\_'
  is a whole number and the rest is a fraction (mantissa).\n\nIf you have added \\_{set
  of digits} then this number will be multiplied by the duration of the syllable to
  which this insertion refers, and the resulting number will be rounded so that is
  can be no more than 255 (the maximum possible value of Word8 datatype that is used
  internally to calculate the statistics). Afterwards, this value is placed among
  the others in the place where this entry is inserted.\n\nIf you have added ={a set
  of digits} then this number will also be multiplied by the duration of the syllable
  to which this insertion refers, and the resulting number will be rounded and then
  will be placed instead of the duration that it was multiplied by (again, the maximum
  resulting value here can be 255, so that the greater values are rounded to this
  limit). This allows to make syllables longer or shorter to follow language or creative
  intentions and rules (e. g. in French there have been noticed that the duration
  of the last syllable in the word, especially in the sentence or phrase is prolonged
  to some extent, so you can use '=12' or '=13' or '=14'  here). Not as for the \\_{set
  of digits} group, you can place it only after the syllable and only once to change
  the duration of the syllable. If you use this option, the following \\_{set of digits}
  will be referred to the new changed duration here, so that \"так\"=2_05_1 will mean
  that you will use instead of the usual duration of the syllable \"так\" the twice
  as much duration, and then half of this twice as much (therefore, equal to duration
  of the syllable without altering)and then again the twice as much duration etc.
  The insertion of =1, =10, =100, =1000 etc will not change anything at all, except
  for the time of computations (you probably do not need this).\n\nThese two additional
  possibilities allows you to change rhythmic structures, and interpret this insert
  as a musical pause or, conversely, a musical phrase inserted to change the rhythm.
  What syllable does this insertion refer to? It refers to the previous syllable in
  the line. There can be several such inserts, their number is not limited by the
  program itself (in the program code), but a significant number of inserts can significantly
  increase the duration of the calculation.\n\nWhen the results of the program are
  displayed on the screen, these inserts will also be displayed in the appropriate
  places.\n\nIf you specify \\_1, \\_10, \\_100, \\_1000, etc. as such an insertion,
  the program will assume that this insertion duration is equal to the duration of
  the syllable to which it refers. If the set of digits is preceded by a 0, the insertion
  has a shorter duration, if the 1 in the first 4 examples above is followed by digits
  other than 0, or if another digit is used instead of 1 or 0, the insertion has a
  longer duration. For example, \\_05 means exactly half the duration of the syllable,
  and \\_2 means double the duration. In any case the resulting values cannot be greater
  than 255, the greater ones are rounded to 255.\n\nFor the \"music\" mode the number
  of syllables printed for the line does include the inserts.\n\n- -cm     — If present,
  the program works in a special comparative mode reading information from the several
  files line-by-line and prompting to choose the resulting option from the files given.
  If some files do not have such lines, then the resulting option for the file is
  empty. You choose the resulting option by typing its number on the terminal. The
  total number of sources is limited to no more than 14.\n\n\n"
description-type: markdown
hash: 780651c719b9aa9c9d497b1060bc78c74afe2ae22a9a42fc20e60bbf3ec873d1
homepage: ''
latest: 0.6.0.0
license-name: MIT
maintainer: oleksandr.zhabenko@yahoo.com
synopsis: An AFTOVolio implementation for creating texts with special phonetic / prosodic
  properties.
test-bench-deps: {}
