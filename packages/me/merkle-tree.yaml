all-versions:
- 0.1.0
- 0.1.1
author: ''
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  cereal: '>=0'
  cryptonite: '>=0.21'
  memory: '>=0'
  protolude: '>=0.2'
  random: '>=0'
changelog: ''
changelog-type: ''
description: "<p align=\"center\">\n  <a href=\"http://www.adjoint.io\"><img src=\"https://www.adjoint.io/assets/img/adjoint-logo@2x.png\"
  width=\"250\"/></a>\n</p>\n\n[![CircleCI](https://circleci.com/gh/adjoint-io/merkle-tree.svg?style=svg)](https://circleci.com/gh/adjoint-io/merkle-tree)\n[![Hackage](https://img.shields.io/hackage/v/merkle-tree.svg)](https://hackage.haskell.org/package/merkle-tree)\n\nmerkle-tree\n===========\n\nThis
  library implements a merkle-tree data structure, for representing a list of\nhashed
  data as a binary tree of pairs of hashes converging to a single hash, the\n`merkle
  root`. `SHA3_256` is used as the hashing algorithm.\n\n# Description\n\nA Merkle
  tree is a tamper-resistant data structure that allows a large amount of\ndata to
  be compressed into a single hash and can be queried for the presence\nof specific
  elements in the data with a proof constructed in logarithmic space.\n\n## Construction\n\nA
  Merkle tree is a binary tree of hashes, in which all the leaf nodes are the\nindividual
  data elements in the block. To construct a merkle tree, the initial\ndata elements
  are first hashed using the merkle tree hash function to generate \nthe leaf nodes
  of the tree. The resulting hashed data are subsequently hashed \ntogether in pairs
  to create the parent nodes of the leaf nodes. This process \ncontinues until it
  results in a single hash known as the merkle root.\n\n```haskell\n-- | Constructs
  a Merkle Tree from a list of ByteStrings\nmkMerkleTree :: [ByteString] -> MerkleTree
  ByteString\n\n-- | Generates the hash of a piece of data existing as a leaf node
  in the Tree\nmkLeafRootHash :: ByteString -> MerkleRoot ByteString\n```\n\n## Merkle
  Inclusion Proof\n\nPerhaps the most important reason to use a merkle tree to represent
  the block\ndata is the ability to construct a merkle proof (`O(n)`) that verifies\nthe
  inclusion of a transaction *t* in a specific block *b* (`O(log(n))`).\n\nMerkle
  proofs are an important part in creating decentralized block chain\nnetworks as
  nodes or client programs (aka \"light-weight nodes\") that do not \nstore blocks
  in memory or on disk regularly need to *verify* that a \ntransaction has been included
  on the chain or not. This can be accomplished \nby the lightweight node supplying
  the transaction hash and a block index,\nquerying a full node for a merkle inclusion
  proof of the transaction's inclusion\nin the block with the index supplied. If the
  full node finds the transaction in\nthat block and responds with the inclusion proof
  and the block's merkle root.\nWith this information, it takes `O(log(n))` for the
  lightweight node to validate\nthe inclusion proof.\n\n```haskell\n-- | Constructs
  a Merkle Inclusion Proof \nmerkleProof \n  :: MerkleTree a   -- ^ Tree to which
  data may belong \n  -> MerkleRoot a   -- ^ Leaf root hash, data to query inclusion
  of \n  -> MerkleProof a  -- ^ A list of hashes to verify data inclusion \n\n-- |
  Validates a Merkle Inclusion Proof\nvalidateMerkleProof \n :: MerkleProof a  --
  ^ Inclusion proof constructed by the prover  \n -> MerkleRoot a   -- ^ Root of the
  merkle tree from which the proof was constructed\n -> MerkleRoot a   -- ^ Leaf root
  hash for which the proof was constructed \n -> Bool           -- ^ Leaf root inclusion\n```\n\n#
  Example\n\n```haskell\nimport Crypto.Hash.MerkleTree\n\nexample :: Bool\nexample
  = \n    -- Does the proof prove that `mleaf` exists in `mtree`? \n    validateMerkleProof
  proof (mtRoot mtree) mleaf \n  where\n    -- Build a merkle tree from a list of
  data\n    mtree = mkMerkleTree [\"tx1\", \"tx2\", \"tx3\"] \n    -- Construct merkle
  proof that a leaf exists in `merkleTree`\n    mleaf = mkLeafRootHash \"tx2\"\n    proof
  = merkleProof mtree mleaf\n```\n\nLicense\n-------\n\nCopyright 2017-2018 Adjoint
  Inc\n\nReleased under MIT License\n"
description-type: markdown
hash: a5b80e4a88161a76582dda3d3da610f3d6ab2601e33939677f33ad179016722a
homepage: https://github.com/adjoint-io/merkle-tree#readme
latest: 0.1.1
license-name: LicenseRef-Apache
maintainer: Adjoint Inc. (info@adjoint.io)
synopsis: An implementation of a Merkle tree and merkle tree proofs of inclusion
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  cereal: '>=0'
  cryptonite: '>=0.21'
  memory: '>=0'
  merkle-tree: '>=0'
  protolude: '>=0.2'
  random: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
