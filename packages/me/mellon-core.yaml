all-versions:
- 0.7.0.0
- 0.7.0.1
- 0.7.0.3
- 0.7.1.0
- 0.7.1.1
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.8.0.5
- 0.8.0.6
- 0.8.0.7
author: Drew Hess <dhess-src@quixoftic.com>
basic-deps:
  async: '>=2.1 && <2.2'
  base: '>=4.8 && <5'
  mtl: '>=2.2 && <2.3'
  protolude: '>=0.2 && <0.3'
  time: '>=1.5 && <2'
  transformers: '>=0.4.2 && <0.6'
changelog: |
  ## 0.8.0.7 (2018-04-03)

  Changes:

    - Bump hlint upper bound.

    - Drop support for Stackage LTS < 11.

  ## 0.8.0.6 (2018-02-04)

  Fixes:

    - Don't run time-sensitive tests by default (fixes spurious failures
      on loaded CI servers).

  ## 0.8.0.5 (2018-02-04)

  Changes:

    - This package now uses Protolude.

    - Disable hlint tests by default.

    - Add a `stack-lts-9.yaml` file for LTS 9 Stack builds.

    - Pare down support to just GHC 8.0.2 and GHC 8.2.2.

  ## 0.8.0.4 (2018-01-26)

  - Require hlint 2.0.x.

  - Bump QuickCheck bounds.

  - New and improved Nix packaging.

  ## 0.8.0.3 (2018-01-11)

  - Use hpack.

  - Support for GHC 8.2.2.

  - Bump doctest, QuickCheck upper bounds.

  - A few test fixes.

  - Maintainer-related changes (better Nix support, Makefile, etc.).

  ## 0.8.0.2 (2017-09-04)

  - No changes, version bump only.

  ## 0.8.0.1 (2017-09-04)

  - Hackage compliance fix.

  ## 0.8.0.0 (2017-09-04)

  - No changes, version bump only.

  ## 0.7.1.1 (2017-05-24)

  No changes; copyright has been assigned to Quixoftic, LLC.

  ## 0.7.1.0 (2017-04-28)

  - Bump hspec, QuickCheck upper bounds.

  ## 0.7.0.3 (2016-09-23)

  - No changes, version bump only.

  ## 0.7.0.2 (2016-09-23)

  - No changes, version bump only.

  ## 0.7.0.1 (2016-06-13)

  - Packaging fixes only.

  ## 0.7.0.0 (2016-06-02)

  Initial release.
changelog-type: markdown
description: |
  # mellon-core

  *"Speak, friend, and enter."*

  `mellon-core` is a Haskell package for controlling physical access
  devices designed for human factors, e.g., electric strikes. The access
  control protocol is quite simple: a device is either locked, or it is
  unlocked until a particular date and time (an *expiration date*). Once
  the expiration date passes, the device is automatically locked again.
  In the meantime, the device can be locked immediately, overriding the
  unlocked state; or the unlock period can be extended.

  User programs incorporate `mellon-core` functionality via a
  `Controller`, which is responsible for handling user lock and unlock
  commands, and for scheduling and canceling unlock expirations.

  User programs must also adapt their physical access devices to the
  interface expected by the controller. For this purpose, `mellon-core`
  defines a generic `Device` parametric data type with 2 simple `IO`
  actions for locking and unlocking the device. (`mellon-core` does not
  provide any useful device implementations; see the companion
  `mellon-gpio` package for a GPIO-driven implementation.)

  Note that `mellon-core` does not provide authentication mechanisms or
  network services for interacting with controllers; that is the domain
  of higher-level packages which use the base `mellon-core` package
  (e.g., `mellon-web`).

  [![Travis CI build status](https://travis-ci.org/quixoftic/mellon.svg?branch=master)](https://travis-ci.org/quixoftic/mellon)
description-type: markdown
hash: 796230b0b5d7d6e583a428b56c6c1e12cc69fb5af076294bbde49f065fea8000
homepage: https://github.com/quixoftic/mellon#readme
latest: 0.8.0.7
license-name: BSD-3-Clause
maintainer: Drew Hess <dhess-src@quixoftic.com>
synopsis: Control physical access devices
test-bench-deps:
  QuickCheck: '>=2.8 && <2.12'
  async: '>=0'
  base: '>=0'
  doctest: '>=0.11 && <0.16'
  hspec: '>=2.2 && <2.6'
  mellon-core: '>=0'
  mtl: '>=0'
  protolude: '>=0'
  quickcheck-instances: '>=0.3 && <0.4'
  time: '>=0'
  transformers: '>=0'
