homepage: https://github.com/juspay/medea
changelog-type: markdown
hash: d0f51e198ec11f9012d70097810fca776224946d68df833fb0dda9be2be4dfa3
test-bench-deps:
  bytestring: -any
  base: '>=4.11.1 && <5'
  unordered-containers: ^>=0.2.10.0
  hspec: '>=2.7.1 && <2.9.0'
  text: -any
  hspec-core: '>=2.7.1 && <2.9.0'
  filepath: '>=1.4.2.1 && <1.5'
  quickcheck-instances: ^>=0.3.22
  mtl: -any
  medea: -any
  QuickCheck: '>=2.13.2 && <2.15.0'
  aeson: -any
  vector: -any
  directory: '>=1.3.3.0 && <1.4'
maintainer: koz.ross@retro-freedom.nz
synopsis: A schema language for JSON.
changelog: |
  # Dev

  # 1.2.0

  - Widen QuickCheck bounds.
  - Remove MonadError from the top-level API.
  - Use strict, rather than lazy, bytestrings for parser input. This fixes issues
    with resource safety.
  - Test with GHC 8.8.4.
  - Change `stack.yaml` to use LTS 15.15.

  # 1.1.2

  - Ship our .hspec file to ensure all tests pass from an sdist.

  # 1.1.1

  - Ship our conformance suite as part of the sdist.

  # 1.1.0

  - Widen bounds on ``parser-combinators``.
  - Export ``ParserError``, and have the loader return it on parsing errors.
  - Remove -O2 optimization flag for test-suite.

  # 1.0.0

  - Initial release
basic-deps:
  free: ^>=5.1.3
  bytestring: ^>=0.10.8.2
  base: '>=4.11.1 && <5'
  parser-combinators: '>=1.1.0 && <2.0.0'
  unordered-containers: ^>=0.2.10.0
  text: ^>=1.2.3.1
  megaparsec: '>=8.0.0 && <10.0.0'
  nonempty-containers: ^>=0.3.3.0
  vector-instances: ^>=3.4
  containers: ^>=0.6.0.1
  smash: ^>=0.1.1.0
  microlens-ghc: ^>=0.4.12
  mtl: ^>=2.2.2
  hashable: '>=1.2.7.0 && <1.4.0.0'
  deepseq: ^>=1.4.4.0
  scientific: ^>=0.3.6.2
  algebraic-graphs: ^>=0.5
  aeson: '>=1.4.6.0 && <2.0.0.0'
  vector: ^>=0.12.0.3
all-versions:
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 1.2.0
author: |-
  Koz Ross,
  Shaurya Gupta
latest: 1.2.0
description-type: markdown
description: "# Medea\n\n## What is this?\n\nMedea is a schema language for JSON document
  structure. It is similar to [JSON\nSchema][json-schema], but is designed to be simpler
  and more self-contained.\n\nThis repo contains both a specification (in ``SPEC.md``)
  and a reference\nimplementation (in Haskell). We also have a [PureScript implementation
  available][medea-ps].\n\nMedea is named after [Jason's wife][medea]. Additionally,
  the name reflects the\ntensions between Jason and Medea as told in the legends,
  as told by the\n[implementer of ``medea-ps``][ben]:\n\n> \"I'm not sure if the name
  is because it loves JSON, or murdered all of JSON's kids\n> and flew away in a chariot
  pulled by dragons.\"\n\n## Why Medea?\n\nSince JSON Schema exists, and has gone
  through a range of revisions, why does\nMedea exist? There are several reasons for
  this, which we summarize below.\n\n### The JSON Schema standard is complex\n\nThe
  current version of the JSON Schema standard (the 2019-09 draft at the time\nof writing)
  is _highly_ complex. It, along with its adjacent standards, covers\nconsiderably
  more than simply validating JSON documents. It also includes:\n\n* A MIME type for
  schema files\n* Meta-schema information, including URI-based stuff\n* Lexical and
  dynamic scope of keywords\n* Sub-schemata and rules they follow\n* Output formatting\n*
  How to identify schemata via media type parameters\n\nNote that this is _before_
  we get to anything to do with validating JSON! It is\nperhaps unsurprising that
  no Haskell package exists which complies with the\ncurrent standard. Thus, we would
  have to develop something 'from scratch' in any\ncase.\n\nFor our purposes, none
  of this was needed - we simply wanted to have a way to\ndescribe the valid structure
  of a JSON document in textual form, and have a way\nto use it as a cross-language
  tool for validating the structure of JSON. Medea\nfocuses on this, and _only_ this.\n\n###
  JSON Schema requires arbitrary URI resolution\n\nDue to the design of JSON Schema,
  schemata themselves have (meta) schemata.\nThese are indicated by use of URIs. Additionally,
  schemata can include other\nschemata, in several different ways, _also_ indicating
  this by URIs. These URIs\ncan aim at basically arbitrary locations; in fact, multiple
  examples in the\nstandard(s) specify online locations where such information can
  be found.\n\nThis essentially means that a compliant validator must be able to follow\n_arbitrary_
  URIs, or give users the ability to direct the validator. This isn't\neven needed
  for _validation itself_ - we might need to do this just to know what\nthe schema
  is! Furthermore, as canonical examples require us to fetch\ninformation from online
  (or have a means of users directing us there), any\nvalidator we create would need
  to support fetching data from the Internet. \n\nWhile this can be useful, it puts
  considerable complexity on the part of both\nthe validator and the user. The use
  case that prompted the creation of Medea\ndidn't (and still doesn't) warrant this
  degree of complexity. This is not merely\na question of implementation time or dependency
  weight - it is also an issue of\ncorrectness and usability. The design of Medea
  deliberately limits this - all\nschemata are single, self-contained files. How these
  files are obtained, and\naimed at, is left to the user; if they need to fetch these
  from a remote\nlocation or not should not be Medea's concern (and isn't).\n\n##
  Getting started \n\nFor an easy starting point, check out ``TUTORIAL.md``, which
  describes basic usage\nof Medea, with examples. For a more detailed description
  of Medea's capabilities\nand schema language, ``SPEC.md`` has you covered. \n\nWe
  also provide a collection of Medea schema files, designed for conformance\ntesting,
  in the ``conformance`` directory.\n\n## What does Medea work on?\n\nWe support every
  major GHC version from 8.6 onwards, for its most current minor\nversion. At the
  moment, this means:\n\n* 8.6.5\n* 8.8.3\n* 8.10.1\n\nWe support both Stack and Cabal
  (v2) builds. We aim to be cross-platform where\npossible - if the dependencies work
  on the platform, Medea should too.\n\n## License\n\nMedea's specification, as well
  as the Haskell (and PureScript) reference\nimplementations, are under the MIT license.
  Please see ``LICENSE.md`` for more\ninformation.\n\n[json-schema]: https://en.wikipedia.org/wiki/JSON#JSON_Schema
  \n[medea-ps]: https://github.com/juspay/medea-ps\n[json-schema-validators]: https://json-schema.org/implementations.html#validators\n[medea]:
  https://en.wikipedia.org/wiki/Medea\n[ben]: https://github.com/Benjmhart\n"
license-name: MIT
