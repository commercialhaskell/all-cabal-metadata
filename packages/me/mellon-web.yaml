all-versions:
- 0.7.0.1
- 0.7.0.3
- 0.7.1.0
- 0.7.1.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.8.0.5
- 0.8.0.6
- 0.8.0.7
author: Drew Hess <dhess-src@quixoftic.com>
basic-deps:
  aeson: '>=0.11 && <1.3'
  aeson-pretty: '>=0.8 && <0.9'
  base: '>=4.8 && <5'
  bytestring: '>=0.10 && <0.11'
  exceptions: '>=0.8.0 && <1'
  hpio: '>=0.8 && <1'
  http-client: '>=0.4 && <0.6'
  http-client-tls: '>=0.3 && <0.4'
  http-types: '>=0.9 && <0.13'
  lens: '>=4 && <5'
  lucid: '>=2.9 && <2.10'
  mellon-core: '>=0'
  mellon-gpio: '>=0'
  mellon-web: '>=0'
  mtl: '>=2.1.3 && <2.3'
  network: '>=0'
  optparse-applicative: '>=0.11.0 && <0.15'
  protolude: '>=0.2 && <0.3'
  servant: '>=0.13 && <0.14'
  servant-client: '>=0.13 && <0.14'
  servant-client-core: '>=0.13 && <0.14'
  servant-docs: '>=0.10 && <0.12'
  servant-lucid: '>=0.7 && <0.9'
  servant-server: '>=0.13 && <0.14'
  servant-swagger: '>=1.1 && <1.2'
  servant-swagger-ui: '>=0.2 && <0.3'
  swagger2: '>=2.1 && <2.3'
  text: '>=1.2 && <1.3'
  time: '>=1.5 && <2'
  transformers: '>=0.4.2 && <0.6'
  wai: '>=3.2 && <3.3'
  warp: '>=3.2 && <3.3'
changelog: "## 0.8.0.7 (2018-04-03)\n\nChanges:\n\n  - Bump several package upper
  bounds.\n  \n  - Requires servant 0.13.\n  \n  - Drop support for Stackage LTS <
  11.\n\n## 0.8.0.6 (2018-02-04)\n\nFixes:\n\n  - Don't run time-sensitive tests by
  default (fixes spurious failures\n    on loaded CI servers).\n\n  - Work around
  order-sensitive `toJSON` decoding in doctests.\n\n## 0.8.0.5 (2018-02-04)\n\nChanges:\n\n
  \ - This package now uses Protolude.\n\n  - Disable hlint tests by default.\n\n
  \ - Add a `stack-lts-9.yaml` file for LTS 9 Stack builds.\n\n  - Pare down support
  to just GHC 8.0.2 and GHC 8.2.2.\n\nFixes:\n\n  - Fix the `swagger.json` test on
  Stack.\n\n  - Add PVP bounds for `mtl`, `http-client-tls`, `network`\n    dependencies.\n\n
  \ - Remove references in the documentation to the no-longer-present\n    `API.md`
  file. The `SwaggerAPI` server includes a self-documenting\n    Swagger spec; please
  see that for detailed REST API documentation.\n\n## 0.8.0.4 (2018-01-26)\n\n- Require
  hlint 2.0.x.\n\n- Fix new hlint issues.\n\n- Bump QuickCheck bounds.\n\n- New and
  improved Nix packaging.\n\n## 0.8.0.3 (2018-01-11)\n\n- Use hpack.\n\n- Support
  for GHC 8.2.2.\n\n- Bump swagger2, optparse-applicative, doctest, QuickCheck, hspec-wai\n
  \ upper bounds.\n\n- Try to make the Mellon/Web/ClientSpec.hs test a little less\n
  \ time-sensitive.\n\n- Maintainer-related changes (better Nix support, Makefile,
  etc.).\n\n## 0.8.0.2 (2017-09-04)\n\n- Fix .cabal file for now-removed Paw file.\n\n##
  0.8.0.1 (2017-09-04)\n\n- Hackage compliance fix.\n\n## 0.8.0.0 (2017-09-04)\n\n-
  Remove out-of-date Paw file.\n\n- Port to Servant 0.11. Due to Servant 0.11 API
  changes, our API\n  has changed, as well (just the Haskell bits; the web API remains\n
  \ the same).\n\n## 0.7.1.1 (2017-05-24)\n\nNo changes; copyright has been assigned
  to Quixoftic, LLC.\n\n## 0.7.1.0 (2017-04-28)\n\n- Now requires servant-client >=
  0.9.\n\n- Bump various dependency upper bounds.\n\n## 0.7.0.3 (2016-09-23)\n\n-
  Bump servant upper bounds.\n\n## 0.7.0.2 (2016-09-23)\n\n- Add an \"--active-low\"
  flag to `gpio-mellon-server` example.\n\n## 0.7.0.1 (2016-06-13)\n\n- Packaging
  fixes only.\n\n## 0.7.0.0 (2016-06-02)\n\n- Port to new `mellon-core` package.\n-
  Fix Servant bitrot.\n"
changelog-type: markdown
description: |
  # mellon-web

  The `mellon-web` package wraps a `mellon-core` controller in a REST
  web service, making it possible to control physical access devices
  from an HTTP client. The package includes both a WAI application
  server, and native Haskell client bindings for the service.

  Like the `mellon-core` controller interface, the `mellon-web` REST API
  is quite simple. There are only 3 methods:

  * `GET /time` returns the system time on the server. This is made
    available for diagnostic purposes, primarily to ensure the server
    has an accurate clock.

  * `GET /state` returns the controller's current state (either `Locked`
    or `Unlocked date` where `date` is the UTC time at which the
    controller will automatically lock again).

  * `PUT /state` sets the controller's current state. Use this method to
    lock and unlock the controller.

  For detailed documentation, the server includes a self-documenting
  Swagger spec.

  Note that the `mellon-web` server does not provide an authentication
  mechanism! You should proxy it behind a secure, authenticating HTTPS
  server such as Nginx.

  ## Example servers

  ### "Mock" server

  An extremely simple example server (with on-line documentation
  support) is provided in the `examples` directory. You can run it with
  `cabal run mock-mellon-server`. The server is will run on the
  `localhost` loopback interface on port 8081.

  This particular example server uses a "mock lock" device which only
  internally logs lock and unlock events without depending on any actual
  hardware, so it will run anywhere.

  ### GPIO server

  Another included example server uses the `mellon-gpio` package to
  drive a simple physical access device via a GPIO pin. This server must
  be run on a Linux host with GPIO hardware, e.g., a Raspberry Pi
  running Linux.

  This server takes a GPIO pin number and a local port number, then
  starts a `mellon-web` server on all local interfaces on the specified
  port. When the server receives an unlock request, it will drive a high
  signal on the specified GPIO pin. When the unlock expires, or when the
  server receives a lock request, it will drive a low signal on the
  specified GPIO pin.

  To use this server, simply connect a properly-designed physical access
  device (e.g., an electric strike driven by a relay circuit such as the
  one shown
  [here](http://www.petervis.com/Raspberry_PI/Driving_Relays_with_CMOS_and_TTL_Outputs/Driving_Relays_with_CMOS_and_TTL_Outputs.html))
  to an available GPIO pin on the host device, then run the server with
  the specified GPIO pin number and port. For example, to run the server
  on port 7533 using GPIO pin 65:

  ```
  cabal run gpio-mellon-server -- sysfs --port 7533 65
  ```

  The `sysfs` command tells the server to use the Linux `sysfs` GPIO
  interpreter. (Currently, this is the only supported GPIO platform.)

  **NOTE**: the REST service provided by `gpio-mellon-server` offers no
  security/authentication for your access control device! You should
  always run it (or any `mellon-web` server) behind a secure proxy web
  service or equivalent HTTP(S)-based authentication mechanism.

  [![Travis CI build status](https://travis-ci.org/quixoftic/mellon.svg?branch=master)](https://travis-ci.org/quixoftic/mellon)
description-type: markdown
hash: 101b984b5b6405d073e82705062f57290d826e43af210fc1643d3a78aac7b9ae
homepage: https://github.com/quixoftic/mellon#readme
latest: 0.8.0.7
license-name: BSD-3-Clause
maintainer: Drew Hess <dhess-src@quixoftic.com>
synopsis: A REST web service for Mellon controllers
test-bench-deps:
  QuickCheck: '>=2.8 && <2.12'
  aeson: '>=0'
  aeson-pretty: '>=0'
  base: '>=0'
  bytestring: '>=0'
  doctest: '>=0.11 && <0.16'
  hspec: '>=2.2 && <2.6'
  hspec-wai: '>=0.6.6 && <0.10'
  http-client: '>=0'
  http-types: '>=0'
  lens: '>=0'
  lucid: '>=0'
  mellon-core: '>=0'
  mellon-web: '>=0'
  network: '>=2.6 && <2.7'
  protolude: '>=0'
  quickcheck-instances: '>=0.3 && <0.4'
  servant: '>=0'
  servant-client: '>=0'
  servant-client-core: '>=0'
  servant-docs: '>=0'
  servant-lucid: '>=0'
  servant-server: '>=0'
  servant-swagger: '>=0'
  servant-swagger-ui: '>=0'
  swagger2: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  wai: '>=0'
  wai-extra: '>=3.0 && <3.1'
  warp: '>=0'
