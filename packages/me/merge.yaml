homepage: ''
changelog-type: markdown
hash: 0a46466da21793133df1af8c0785456c2f91809e5b1f6ffa8fa5e95767a696cd
test-bench-deps:
  base: '>=4.6 && <5'
  merge: -any
maintainer: sgschlesinger@gmail.com
synopsis: A functor for consistent merging of information
changelog: |
  # Revision history for merge

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.6 && <5'
  profunctors: '>=5.6 && <6'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.1
author: Samuel Schlesinger
latest: 0.3.1.1
description-type: markdown
description: |
  # Merge

  Often, one finds themselves having multiple sources of knowledge
  for some piece of data, and having to merge these together. Perhaps
  we have a type representing partial information about a digital friend.

  ```haskell
  data Friend = Friend
    { name :: Maybe Text
    , email :: Maybe Text
    , age :: Max Int
    , pubKey :: PublicKey
    }
  ```

  If we learn some information about a friend from someone, and some
  from someone else, we'll want to merge that information to have a
  more complete picture. That said, it might not succeed, as we may
  have inconsistent information like two different names or different
  public keys. We'll want a function of type:

  ```haskell
  f :: Friend -> Friend -> Maybe Friend
  ```

  That's the pattern that this library encapsulates!

  ```
  mergeFriends :: Merge [String] Friend Friend
  mergeFriends =
    User
      <$> optional name   .? ["name"]
      <*> optional email  .? ["email"]
      <*> combine age     .? ["age"]
      <*> required pubKey .? ["pubKey"]

  f :: Friend -> Friend -> Validation [String] Friend
  f x y = runMerge mergeFriends x y
  ```

  We didn't get exactly what we thought we wanted, but this Validation
  type is better: it is an Applicative which accumulates the errors for
  every field.
license-name: MIT
