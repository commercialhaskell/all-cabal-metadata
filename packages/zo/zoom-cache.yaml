all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.1.0
- 0.9.0.0
- 0.9.1.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.2.1.0
- 1.2.1.1
- 1.2.1.2
- 1.2.1.3
- 1.2.1.4
- 1.2.1.5
- 1.2.1.6
author: Conrad Parker
basic-deps:
  ListLike: '>=1.0 && <4'
  MonadCatchIO-transformers: '>0.2 && <0.4'
  QuickCheck: '>=2.4.0.1'
  base: '>=3 && <6'
  blaze-builder: '>=0'
  bytestring: '>=0.9 && <0.11'
  containers: '>=0.2 && <0.6'
  data-default: '>=0'
  iteratee: '>=0.8.7.6 && <0.9'
  iteratee-compress: '>=0.3.0.0 && <0.4'
  mtl: '>=2.0.0.0 && <3'
  old-locale: '>=0'
  time: '>=0'
  transformers: '>=0.2 && <0.4'
  type-level: '>=0'
  ui-command: '>=0'
  unix: '>=0'
  zlib: '>=0'
changelog: ''
changelog-type: ''
description: |
  zoom-cache is a fairly simple data file format for storing and summarizing
  streams of time-series data. The purpose of this format is to make it easy
  to quickly generate plots; /zooming/ refers to being able to render a
  window of data, and being able to quickly change the bounds of the window:
  to move around and to zoom in and out.

  This library provides a monadic writing and an iteratee reading interface
  for zoom-cache files. To build GUI applications, see the scope package:

  <http://hackage.haskell.org/package/scope>

  What's neat about the zoom-cache format and library? Glad you asked!

  * Data can be stored at variable or constant rates. For variable rate
  data, a timestamp is explicitly written into the file for every value,
  which is useful for recording events that occur at unpredictable times.
  Constant rate is useful for regularly sampled data, like most digital
  audio and video recordings.

  * While writing a file, summary blocks (such as minimum, maximum,
  mean and RMS values) are written out every n samples. The summary blocks
  are hierarchical, such that after two have been written, a new one
  containing a merged summary of those is written. After two of those Level
  1 summary blocks have been written, a new Level 2 summary block combining
  those is written, and so on.

  * You can write your own zoom-cache codecs for custom data types, or
  to implement custom summary functions. In order to do so you provide a
  'Summary' data type, functions for encoding and decoding raw data values
  and summaries, and a function for merging 'Summary' blocks. For details,
  see "Data.ZoomCache.Codec".

  * Writing of raw data blocks is optional, under control of the
  application. If you already have the raw data stored in an easily
  accessible format, your zoom-cache files may just contain the summary
  data. On the other hand, if your input data is the result of expensive
  calculations you may want to store it along with the summary data so that
  plots of any level of detail can be rendered from a single file.

  When developing applications that read or write zoom-cache files, it should
  be sufficient to import only the module "Data.ZoomCache".
description-type: haddock
hash: 445b5662da5e9669fd4c8368ab6bc15db57c1d679ba1a372e6cac36aced38483
homepage: ''
latest: 1.2.1.6
license-name: BSD-3-Clause
maintainer: conrad@metadecks.org
synopsis: A streamable, seekable, zoomable cache file format
test-bench-deps:
  QuickCheck: '>=2.4.0.1'
  base: '>=3 && <6'
  blaze-builder: '>=0'
  iteratee: '>=0.8.7.6 && <0.9'
  random: '>=1.0 && <1.1'
  test-framework: '>=0.3.3 && <0.9.0'
  test-framework-quickcheck2: '>=0.2.9 && <0.4'
  transformers: '>=0.2 && <0.4'
  type-level: '>=0'
  unix: '>=0'
  zoom-cache: '>=0'
