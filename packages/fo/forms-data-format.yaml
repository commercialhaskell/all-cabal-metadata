homepage: ''
changelog-type: markdown
hash: b294e1ec5b33b0164401796498c0759c3e3f75cb17d037ba3f7843908ce1535f
test-bench-deps: {}
maintainer: blamario@protonmail.com
synopsis: Parse and serialize FDF, the Forms Data Format
changelog: |
  # Revision history for forms-data-format

  ## 0.1 -- 2023-04-03

  * First version. Released on an unsuspecting world.

  ## 0.2 -- 2023-04-09

  * Removed an extra newline from reserialization.

  ## 0.2.0.1 -- 2023-11-25

  * Bumped the upper bound of the `bytestring` dependency.
basic-deps:
  rank2classes: '>=1 && <1.6'
  monoid-subclasses: ==1.*
  bytestring: '>=0.9 && <0.13'
  grammatical-parsers: '>=0.5 && <0.8'
  base: ==4.*
  text: -any
  parsers: <0.13
all-versions:
- '0.1'
- '0.2'
- 0.2.0.1
author: Mario Blažević
latest: 0.2.0.1
description-type: markdown
description: |
  Forms Data Format
  =================

  The Forms Data Format, or [FDF](https://helpx.adobe.com/acrobat/kb/acrobat-forms-form-data-web.html) for short, is a
  horrible data format thought up by Adobe. Its only redeeming feature is that in practice it's much simpler than PDF.

  This Haskell package is hacked together to parse and re-serialize *some* files in FDF format. It certainly does not
  support the full range of possible FDF files. I tried to follow the specification but gave up.

  The main purpose of the package is to allow parsing and serializing [Canadian tax
  forms](https://github.com/blamario/canadian-income-tax) in FDF format.  For that purpose this hack seems
  sufficient. If you find it doesn't work for some other FDF files, feel free to contribute some code.
license-name: BSD-3-Clause
