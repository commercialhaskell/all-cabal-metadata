homepage: ''
changelog-type: markdown
hash: f469360bbad942bfbea3bba9ccbfc45e506783aee53ae32824a8017674084844
test-bench-deps: {}
maintainer: blamario@protonmail.com
synopsis: Parse and serialize FDF, the Forms Data Format
changelog: |
  # Revision history for forms-data-format

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  rank2classes: '>=1 && <1.6'
  monoid-subclasses: ==1.*
  bytestring: '>=0.9 && <0.12'
  grammatical-parsers: '>=0.5 && <0.8'
  base: ==4.*
  text: -any
  parsers: <0.13
all-versions:
- '0.1'
author: Mario Blažević
latest: '0.1'
description-type: markdown
description: |
  Forms Data Format
  =================

  The Forms Data Format, or FDF for short, is a horrible data format thought up
  by Adobe. Its only redeeming feature is that in practice it's much simpler
  than PDF.

  This Haskell package is hacked together to parse and re-serialize *some* files
  in FDF format. It certainly does not support the full range of possible FDF
  files. I tried to follow the specification but gave up.

  The main purpose of the package is to allow parsing and serializing [Canadian
  tax forms](https://github.com/blamario/canadian-income-tax) in FDF format.
  For that purpose this hack seems sufficient. If you find it doesn't work for
  some other FDF files, feel free to contribute.
license-name: BSD-3-Clause
