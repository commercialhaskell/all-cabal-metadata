homepage: ''
changelog-type: markdown
hash: 554a822cd5bb6d29446df826ed25414880422d770f92fa2526cdd008a700a095
test-bench-deps:
  base: -any
  criterion: -any
  doctest: '>=0.16'
  foldl: -any
maintainer: Gabriel439@gmail.com
synopsis: Composable, streaming, and efficient left folds
changelog: |
  1.4.12

  * `Data.Functor.Extend.Extended` instances for `Fold` / `FoldM`
  * Remove dependency on `mwc-random`

  1.4.11

  * Fix doctest failure when built against newer versions of the `hashable`
    package

  1.4.10

  * Fix space leaks in `scan` / `scanM`

  1.4.9

  * Implement `vector` utility more efficiently

  1.4.8

  * Only depend on `semigroups` for older GHC versions

  1.4.7

  * Add `foldByKey{,Hash}Map` functions

  1.4.6

  * Add `nest`/`predropWhile`/`drop`/`dropM`

  1.4.5

  * Increase upper bound on `containers`
  * Add `either`/`eitherM`

  1.4.4

  * Increase lower bound on `base`
  * Change `mean` to be more numerically stable

  1.4.3

  * Add `Control.Scanl.scanr`
  * Increase upper bound on `mwc-random`

  1.4.2

  * Add `Semigroupoid` instance for `Fold`
  * Increase upper bound on `contravariant` and `profunctors`

  1.4.1

  * Add `Control.Scanl`
  * Drop support for GHC 7.8 and older

  1.4.0

  * BREAKING CHANGE: Change type of `premapM` to accept a monadic function

  1.3.7

  * Add `groupBy`

  1.3.6

  * Documentation improvements

  1.3.5

  * Add `Choice` instance for `Fold`

  1.3.4

  * Add `prefilter` and `prefilterM`

  1.3.3

  * Add back the old `vector` as `vectorM`

  1.3.2

  * Compatibility with `Semigroup` becoming a super-class of `Monoid`
  * Fix `asin` for `Fold`

  1.3.1

  * Fix `asin` for `FoldM`

  1.3.0

  * BREAKING CHANGE: Change `vector` to be a pure `Fold` (which is faster, too!)

  1.2.5

  * Add support for folding new containers: `hashSet`, `map`, and `hashMap`
  * Add `prescan`/`postscan` which generalize `scan` to `Traversable` types

  1.2.4

  * Add `lazy` folds for `Text` and `ByteString`
  * Documentation fixes and improvements

  1.2.3

  * Add `lookup`

  1.2.2

  * Add numerically stable `mean`, `variance`, and `std` folds
  * Add `Control.Foldl.{Text,ByteString}.foldM`
  * Add `foldOver`/`foldOverM`

  1.2.1

  * Performance improvements
  * Re-export `filtered`

  1.2.0

  * Breaking change: Fix `handles` to fold things in the correct order (was
    previously folding things backwards and also leaking space as a result).  No
    change to behavior of `handlesM`, which was folding things in the right order
  * Breaking change: Change the `Monoid` used by `Handler`/`HandlerM`
  * Add `folded`

  1.1.6

  * Add `maximumBy` and `minimumBy`

  1.1.5

  * Increase lower bound on `base` from `< 4` to `< 4.5`

  1.1.4

  * Increase upper bound on `comonad` from `< 5` to `< 6`

  1.1.3

  * Increase upper bound on `profunctors` from `< 5.2` to `< 5.3`
  * Add `mapM_`, `hoists`, `purely`, and `impurely`

  1.1.2

  * Add `lastN`, `randomN`, `sink`, and `duplicateM`
  * Add `Comonad` instance for `Fold`
  * Add `Profunctor` instance for `FoldM`

  1.1.1

  * Increase upper bound on `vector` from `< 0.11` to `< 0.12`

  1.1.0

  * Breaking change: Rename `pretraverse`/`pretraverseM` to `handles`/`handlesM`
  * Add `Handler`
  * Export `EndoM`

  1.0.11

  * Add `Profunctor` instance for `Fold`

  1.0.10

  * Add `random` and `_Fold1`

  1.0.9

  * Increase upper bound on `primitive` from `< 0.6` to `< 0.7`

  1.0.8

  * Add `revList`

  1.0.7

  * Add `Num` and `Fractional` instances for `Fold`/`FoldM`
  * Add `count` fold for `Text` and `ByteString`

  1.0.6

  * Add `pretraverse` and `pretraverseM`

  1.0.5

  * Add `lastDef`

  1.0.4

  * Increase upper bounds on `transformers` from `< 0.4` to `< 0.6`
  * Add `nub`, `eqNub`, and `set`

  1.0.3

  * Add `scan`, `generalize`, `simplify`, and `premapM`

  1.0.2

  * Add `list` and `vector` folds
  * Add `fold` function for `Text` and `ByteString`

  1.0.1

  * Add support for `ByteString` and `Text` folds
  * Add `Monoid` instance for `Fold`/`FoldM`

  1.0.0

  * Initial release
basic-deps:
  semigroupoids: '>=1.0 && <5.4'
  bytestring: '>=0.9.2.1 && <0.12'
  base: '>=4.8 && <5'
  comonad: '>=4.0 && <6'
  unordered-containers: <0.3
  text: '>=0.11.2.0 && <1.3'
  containers: '>=0.5.0.0 && <0.7'
  contravariant: <1.6
  hashable: <1.5
  transformers: '>=0.2.0.0 && <0.6'
  random: '>=1.2 && <1.3'
  primitive: <0.8
  profunctors: <5.7
  vector: '>=0.7 && <0.13'
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 1.0.10
- 1.0.11
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.5
- 1.1.6
- 1.2.0
- 1.2.1
- 1.2.2
- 1.2.3
- 1.2.4
- 1.2.5
- 1.3.0
- 1.3.1
- 1.3.2
- 1.3.3
- 1.3.4
- 1.3.5
- 1.3.7
- 1.4.0
- 1.4.1
- 1.4.2
- 1.4.3
- 1.4.4
- 1.4.5
- 1.4.6
- 1.4.7
- 1.4.8
- 1.4.9
- 1.4.10
- 1.4.11
- 1.4.12
author: Gabriel Gonzalez
latest: 1.4.12
description-type: markdown
description: |
  # `foldl`

  Use this `foldl` library when you want to compute multiple folds over a
  collection in one pass over the data without space leaks.

  For example, suppose that you want to simultaneously compute the sum of the list
  and the length of the list.  Many Haskell beginners might write something like
  this:

  ```haskell
  sumAndLength :: Num a => [a] -> (a, Int)
  sumAndLength xs = (sum xs, length xs)

  ```

  However, this solution will leak space because it goes over the list in two
  passes.  If you demand the result of `sum` the Haskell runtime will materialize
  the entire list.  However, the runtime cannot garbage collect the list because
  the list is still required for the call to `length`.

  Usually people work around this by hand-writing a strict left fold that looks
  something like this:

  ```haskell
  {-# LANGUAGE BangPatterns #-}

  import Data.List (foldl')

  sumAndLength :: Num a => [a] -> (a, Int)
  sumAndLength xs = foldl' step (0, 0) xs
    where
      step (x, y) n = (x + n, y + 1)
  ```

  That now goes over the list in one pass, but will still leak space because the
  tuple is not strict in both fields!  You have to define a strict `Pair` type to
  fix this:

  ```haskell
  {-# LANGUAGE BangPatterns #-}

  import Data.List (foldl')

  data Pair a b = Pair !a !b

  sumAndLength :: Num a => [a] -> (a, Int)
  sumAndLength xs = done (foldl' step (Pair 0 0) xs)
    where
      step (Pair x y) n = Pair (x + n) (y + 1)

      done (Pair x y) = (x, y)
  ```


  However, this is not satisfactory because you have to reimplement the guts of
  every fold that you care about and also define a custom strict data type for
  your fold.  Hand-writing the step function, accumulator, and strict data type
  for every fold that you want to use gets tedious fast.  For example,
  implementing something like reservoir sampling over and over is very error
  prone.

  What if you just stored the step function and accumulator for each individual
  fold and let some high-level library do the combining for you?  That's exactly
  what this library does!  Using this library you can instead write:

  ```haskell
  import qualified Control.Foldl as Fold

  sumAndLength :: Num a => [a] -> (a, Int)
  sumAndLength xs = Fold.fold ((,) <$> Fold.sum <*> Fold.length) xs

  -- or, more concisely:
  sumAndLength = Fold.fold ((,) <$> Fold.sum <*> Fold.length)
  ```

  To see how this works, the `Fold.sum` value is just a datatype storing the step
  function and the starting state (and a final extraction function):

  ```haskell
  sum :: Num a => Fold a a
  sum = Fold (+) 0 id
  ```

  Same thing for the `Fold.length` value:

  ```haskell
  length :: Fold a Int
  length = Fold (\n _ -> n + 1) 0 id
  ```

  ... and the `Applicative` operators combine them into a new datatype storing
  the composite step function and starting state:

  ```haskell
  (,) <$> Fold.sum <*> Fold.length = Fold step (Pair 0 0) done
    where
      step (Pair x y) = Pair (x + n) (y + 1)

      done (Pair x y) = (x, y)
  ```

  ... and then `fold` just transforms that to a strict left fold:

  ```haskell
  fold (Fold step begin done) = done (foldl' step begin)
  ```

  Since we preserve the step function and accumulator, we can use the `Fold` type to
  fold things other than pure collections.  For example, we can fold a `Producer`
  from `pipes` using the same `Fold`:

  ```haskell
  Fold.purely Pipes.Prelude.fold ((,) <$> sum <*> length)
      :: (Monad m, Num a) => Producer a m () -> m (a, Int)
  ```

  To learn more about this library, read the documentation in
  [the main `Control.Foldl` module](http://hackage.haskell.org/package/foldl/docs/Control-Foldl.html).

  ## Quick start

  Install [the `stack` tool](http://haskellstack.org/) and then run:

  ```bash
  $ stack setup
  $ stack ghci foldl
  Prelude> import qualified Control.Foldl as Fold
  Prelude Fold> Fold.fold ((,) <$> Fold.sum <*> Fold.length) [1..1000000]
  (500000500000,1000000)
  ```

  ## How to contribute

  Contribute a pull request if you have a `Fold` that you believe other people
  would find useful.

  ## Development Status

  [![Build Status](https://travis-ci.org/Gabriel439/Haskell-Foldl-Library.png)](https://travis-ci.org/Gabriel439/Haskell-Foldl-Library)

  The `foldl` library is pretty stable at this point.  I don't expect there to be
  breaking changes to the API from this point forward unless people discover new
  bugs.

  ## License (BSD 3-clause)

  Copyright (c) 2016 Gabriel Gonzalez
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice, this
    list of conditions and the following disclaimer in the documentation and/or
    other materials provided with the distribution.

  * Neither the name of Gabriel Gonzalez nor the names of other contributors may
    be used to endorse or promote products derived from this software without
    specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
license-name: BSD-3-Clause
