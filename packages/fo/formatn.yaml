all-versions:
- 0.0.1
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.2.0
author: Tony Day
basic-deps:
  base: '>=4.14 && <5'
  containers: '>=0.6 && <0.9'
  text: '>=1.2 && <2.2'
changelog: |
  0.3.2
  ===

  - added Data instances


  0.3.1
  ===

  - added doctests
changelog-type: markdown
description: "[![img](https://img.shields.io/hackage/v/formatn.svg)](https://hackage.haskell.org/package/formatn)
  [![img](https://github.com/tonyday567/formatn/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/tonyday567/formatn/actions/workflows/haskell-ci.yml)\n\nA
  library for support of:\n\n-   significant figure rounding of numbers, and\n-   common
  number formatting patterns.\n\n\n# Usage\n\n    :reload\n    :set prompt \"> \"\n
  \   \n    :set -Wno-type-defaults\n    :set -XOverloadedStrings\n    import Data.FormatN\n
  \   \n    xs = [(-1),0,0.1,1,1.01,1.02,1.1,1.2]\n    \n    fixed (Just 2) <$> xs\n
  \   decimal (Just 2) <$> xs\n    formats False False (const DecimalStyle) (Just
  2) xs\n    formats False True (const DecimalStyle) (Just 2) xs\n    distinguish
  4 False True (const DecimalStyle) (Just 2) xs\n\n    Ok, 14 modules loaded.\n    >
  >\n    >\n    > [\"-1.00\",\"0.00\",\"0.10\",\"1.00\",\"1.01\",\"1.02\",\"1.10\",\"1.20\"]\n
  \   [\"-1.0\",\"0.0\",\"0.10\",\"1.0\",\"1.0\",\"1.0\",\"1.1\",\"1.2\"]\n    [\"-1.00\",\"0.00\",\"0.10\",\"1.00\",\"1.00\",\"1.00\",\"1.10\",\"1.20\"]\n
  \   [\"-1.0\",\"0.0\",\"0.1\",\"1.0\",\"1.0\",\"1.0\",\"1.1\",\"1.2\"]\n    [\"-1.00\",\"0.00\",\"0.10\",\"1.00\",\"1.01\",\"1.02\",\"1.10\",\"1.20\"]\n\n\n#
  Development\n\n\n## fixed\n\n    fixed (Just 3) <$> [0, 0.5, 1.5, 2.0]\n\n    [\"0.000\",\"0.500\",\"1.500\",\"2.000\"]\n\nfixed
  defaults to representing Doubles in the same manner as Haskell does ie with a trailing
  &rsquo;.0&rsquo;\n\n    fixed Nothing <$> [0, 0.5, 1.5, 2]\n\n    [\"0.0\",\"0.5\",\"1.5\",\"2.0\"]\n\n\n##
  expt\n\n    expt Nothing 0\n\n    0e0\n\n    expt (Just 2) 1\n    expt (Just 2)
  0\n\n    1.0e0\n    0.0e0\n\n\n## decimal\n\n    decimal Nothing 0\n    decimal
  (Just 1) 0\n    decimal (Just 3) 0\n\n    0\n    0\n    0.00\n\n\n## percent\n\npercent
  is a little weird any way you cut it.\n\n    percent decimalSF (Just 4) 0\n    percent
  decimalSF (Just 4) 1\n\n    0.0%\n    100.0%\n\n\n## inclusion in lists\n\n    formats
  True False commaPrecStyle Nothing [0, 0.5, 1.5, 2]\n    formats True False commaPrecStyle
  (Just 1) [0, 1, 10]\n    formats True False commaPrecStyle (Just 1) [0, 0.5, 1.5,
  2]\n    formats True False commaPrecStyle (Just 2) [0, 0.5, 1.5, 2]\n    formats
  True True commaPrecStyle (Just 6) [0, 0.5, 1.5, 2]\n\n    [\"0.0\",\"0.5\",\"1.5\",\"2.0\"]\n
  \   [\" 0\",\" 1\",\"10\"]\n    [\"0.0\",\"0.5\",\"2.0\",\"2.0\"]\n    [\"0.00\",\"0.50\",\"1.50\",\"2.00\"]\n
  \   [\"0.0\",\"0.5\",\"1.5\",\"2.0\"]\n\n"
description-type: markdown
hash: ecb1af70b2bb3584fca1f9e263cc2d495cb4ff7bf0e37be73db4573d6eb0ab2b
homepage: https://github.com/tonyday567/formatn#readme
latest: 0.3.2.0
license-name: BSD-3-Clause
maintainer: tonyday567@gmail.com
synopsis: Formatting of doubles.
test-bench-deps:
  QuickCheck: '>=2.14.2 && <2.17'
  base: '>=4.14 && <5'
  doctest-parallel: '>=0.3 && <0.5'
