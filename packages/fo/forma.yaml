all-versions:
- 0.1.0
- 0.2.0
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.2.0
author: Mark Karpov <markkarpov92@gmail.com>
basic-deps:
  aeson: '>=2 && <3'
  base: '>=4.15 && <5'
  containers: '>=0.5 && <0.8'
  mtl: '>=2 && <3'
  text: '>=0.2 && <2.2'
changelog: |
  ## Forma 1.2.0

  * Works with `aeson-2.x.x.x`.

  ## Forma 1.1.3

  * Test suite passes with `aeson-1.4.6.0`.

  * Dropped support for GHC 8.2 and older.

  ## Forma 1.1.2

  * Fixed the test suite so it passes with `aeson-1.4.3.0`.

  ## Forma 1.1.1

  * Fixed a bug which caused `withCheck` (and functions using it such as
    `field`) report incorrect location of element for which validation fails
    when it's nested in `subParser` wrappers.

  ## Forma 1.1.0

  * Added `runFormPure`.

  ## Forma 1.0.0

  * The library has been completely redesigned and rewritten.

  ## Forma 0.2.0

  * Added `withCheck`.

  ## Forma 0.1.0

  * Initial release.
changelog-type: markdown
description: |
  # Forma

  [![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)
  [![Hackage](https://img.shields.io/hackage/v/forma.svg?style=flat)](https://hackage.haskell.org/package/forma)
  [![Stackage Nightly](http://stackage.org/package/forma/badge/nightly)](http://stackage.org/nightly/package/forma)
  [![Stackage LTS](http://stackage.org/package/forma/badge/lts)](http://stackage.org/lts/package/forma)
  ![CI](https://github.com/mrkkrp/forma/workflows/CI/badge.svg?branch=master)

  This library provides a tool for validation of forms in the JSON format.
  Sending forms in the JSON format via an AJAX request instead of traditional
  submitting of forms has a number of advantages:

  * Smoother user experience: no need to reload the whole page.

  * Form rendering is separated and lives only in GET handler, POST (or
    whatever method you deem appropriate for your use case) handler only
    handles validation and effects that form submission should initiate.

  * You get a chance to organize form input the way you want.

  The task of validation of a form in the JSON format may seem simple, but
  it's not trivial to get it right. The library allows you to:

  * Define a form parser using type-safe applicative notation with field
    labels stored on the type label which guards against typos and will force
    all your field labels to be always up to date.

  * Parse JSON `Value` according to the definition of form you created.

  * Stop parsing immediately if a form is malformed and cannot be processed.

  * Validate forms using any number of composable checkers that you write for
    your specific problem domain. Once you have a vocabulary of checkers,
    creation of new forms is just a matter of combining them.

  * Collect validation errors from multiple branches of parsing (a branch per
    form field) in parallel, so that validation errors in one branch do not
    prevent us from collecting validation errors from other branches. This
    allows for better user experience as the user can see all validation
    errors at the same time.

  * Use `optional` and `(<|>)` from `Control.Applicative` in your form
    definitions instead of ad-hoc helpers.

  * Perform validation using several form fields at once. You choose which
    “sub-region” of your form a given check will have access to, see
    `withCheck`.

  ## Example of use

  Here is a complete working example:

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE OverloadedLabels #-}
  {-# LANGUAGE OverloadedStrings #-}

  module Main (main) where

  import Control.Monad.Except
  import Data.Aeson
  import Data.Text (Text)
  import qualified Data.Text as T
  import Web.Forma

  type LoginFields = '["username", "password", "remember_me"]

  data LoginForm = LoginForm
    { loginUsername :: Text,
      loginPassword :: Text,
      loginRememberMe :: Bool
    }
    deriving (Show)

  loginForm :: Monad m => FormParser LoginFields Text m LoginForm
  loginForm =
    LoginForm
      <$> field #username notEmpty
      <*> field #password notEmpty
      <*> field' #remember_me

  notEmpty :: Monad m => Text -> ExceptT Text m Text
  notEmpty txt =
    if T.null txt
      then throwError "This field cannot be empty."
      else return txt

  myInput :: Value
  myInput =
    object
      [ "username" .= ("Bob" :: Text),
        "password" .= ("123" :: Text),
        "remember_me" .= True
      ]

  main :: IO ()
  main = runForm loginForm myInput >>= print
  ```

  You may want to play with it a bit before writing serious code.

  ## Contribution

  Issues, bugs, and questions may be reported in [the GitHub issue tracker for
  this project](https://github.com/mrkkrp/forma/issues).

  Pull requests are also welcome.

  ## License

  Copyright © 2017–present Mark Karpov

  Distributed under BSD 3 clause license.
description-type: markdown
hash: 6de6ac79f3cfd45288a00171b2070dd986b60223fab02d233aa09c3ae26b0952
homepage: https://github.com/mrkkrp/forma
latest: 1.2.0
license-name: BSD-3-Clause
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Parse and validate forms in JSON format
test-bench-deps:
  aeson: '>=2 && <3'
  base: '>=4.15 && <5'
  containers: '>=0.5 && <0.8'
  forma: '>=0'
  hspec: '>=2 && <3'
  mtl: '>=2 && <3'
  text: '>=0.2 && <2.2'
