homepage: https://github.com/camfort/fortran-src#readme
changelog-type: markdown
hash: 4da54322a4a2ff60437923397412805547de534daec57cf1c85ef35fddda0a8b
test-bench-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.6 && <5'
  hspec: '>=2.2 && <3'
  text: '>=1.2 && <2'
  filepath: '>=1.4 && <1.5'
  uniplate: '>=1.6 && <2'
  array: '>=0.5 && <0.6'
  containers: '>=0.5 && <0.7'
  binary: '>=0.8.3.0 && <0.11'
  GenericPretty: '>=1.2.2 && <2'
  fortran-src: -any
  fgl: '>=5 && <6'
  mtl: '>=2.2 && <3'
  temporary: '>=1.2 && <1.4'
  deepseq: '>=1.4 && <1.5'
  pretty: '>=1.1 && <2'
  directory: '>=1.2 && <2'
maintainer: me@madgen.net
synopsis: Parsers and analyses for Fortran standards 66, 77, 90 and 95.
changelog: |
  ### 0.4.2 (March 03, 2021)

    * `FortranVersion` from `ParserMonad` moved to its own module
      `Language.Fortran.Version`. `ParserMonad` will re-export it for now.
    * `Version.deduceVersion` renamed to `deduceFortranVersion` due to often being
      imported non-qualified. `deduceVersion` remains as an alias.
    * Provide a continuation reformatter in `PrettyPrint`. Runs on `String`s and
      doesn't guarantee the output is a valid program, so not enabled by default.
    * Add a diff-like rewriter, similar to
      [reprinter](http://hackage.haskell.org/package/reprinter) but uses
      replacements rather than an annotated AST.
    * Various internal de-duplication and changes.

  ### 0.4.1

  * Ignore comments in structure declaration PR#107 (thanks Jason Xu)

  ### 0.4.0 (August 29, 2019)

  * ModGraph: parse Fortran files and assemble them into a dependency graph in order to construct automated 'build' plans for analysis and summarisation (e.g. with --make-mods option).
  * Change name of compilation to summarisation. Remains as '-c' option.
  * Allow multiple files and directories to be specified on command line.
  * Search includedir recursively for fsmod files.
  * Change format of fsmod-files so that they can contain [ModFile] since multiple Fortran files can be summarised into a single mod file.
  * Introduce strictness and NFData dependencies across the board.
  * Use Pipes to process large amounts of files in order to control memory usage and more efficiently process things.
  * Parsing rules for StructStructures (thanks Raoul Charman)

  ### 0.3.0 (June 13, 2019)

  * Add partial Fortran2003 support.
  * Introduce datatype for BBGr instead of prior type alias for Gr.
    * Now split into three fields: bbgrGr, bbgrEntries and bbgrExits
    * May require refactoring of code to use bbgrGr field where a Gr was expected before.
  * Introduce pragmaOffset field for Position, allowing pragmas to specify an apparent file and line-number.
    * May require refactoring of code that uses the Position constructor.
    * Fifth field is Maybe (Int, String), containing a line-offset and a target filename when present.
    * It's designed such that most Position-based transformations are not affected by the pragmaOffset.
    * They may need to preserve the field, though, as it passes through functions.
    * Default value is 'Nothing'.
  * Add --show-flows-to/--show-flows-from features
    * Visualise the dataflow use/def chains using GraphViz.
  * Add --show-block-numbers feature.
    * Allows user to get AST-block numbers easily in order to use them with the above visualisation features.
  * Fix several bugs with dataflow analysis that had accumulated.
  * Eliminate StContinue and StEnddo are eliminated during GroupLabeledDo transformations.
    * To be consistent with unlabeled Do.
  * Parse and discard C-comments as a convenience feature for when fortran-src must interact with the output of C preprocessors that insert spurious comments.
  * Add type propagation into type analysis, annotating every expression with a type.
    * Additional interface: analyseTypesWithEnv to access a list of type errors found.
  * Add dimensional information to CTArray and length/kind to TypeCharacter.
  * Stricter checking of the grouping transform - if any statements that should be grouped are not grouped, raise an error.
  * Support pragmas that alter the current 'filename and position' tracker, often used by preprocessors to help pinpoint original code locations.
    * Uses a relative offset field called 'posPragmaOffset' so that relative measures continue to function correctly.
  * Add constant propagation / parameter variable analysis.
  * Add -c feature to compile 'fsmod files' with renaming and type info.

  ### 0.2.1.1 (May 18, 2018)

  * Extend Fortran 95 support
  * Extend support for legacy extensions

  ### 0.2.1.1 (December 13, 2017)

  * Fortran95Experimental module renamed to Fortran95
  * No infinite loops due to symlinks.
  * Fortran 95 support.
    * AST extended to support more non-standard statements internally.
basic-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.6 && <5'
  text: '>=1.2 && <2'
  filepath: ==1.4.*
  uniplate: '>=1.6 && <2'
  array: ==0.5.*
  containers: '>=0.5 && <0.7'
  binary: '>=0.8.3.0 && <0.11'
  GenericPretty: '>=1.2.2 && <2'
  fortran-src: -any
  fgl: ==5.*
  mtl: '>=2.2 && <3'
  temporary: '>=1.2 && <1.4'
  deepseq: ==1.4.*
  pretty: '>=1.1 && <2'
  directory: '>=1.2 && <2'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.6
- 0.2.0.0
- 0.2.1.1
- 0.3.0
- 0.4.0
- 0.4.2
author: Mistral Contrastin, Matthew Danish, Dominic Orchard, Andrew Rice
latest: 0.4.2
description-type: markdown
description: |
  # fortran-src

  ![CI status badge](https://github.com/camfort/fortran-src/workflows/CI/badge.svg)

  Provides lexing, parsing, and basic analyses of Fortran code covering standards: FORTRAN 66, FORTRAN 77, Fortran 90, Fortran 95 and part of Fortran 2003. Includes data flow and basic block analysis, a renamer, and type analysis. For example usage, see the 'camfort' project (https://github.com/camfort/camfort), which uses fortran-src as its front end.

  For features that output graphs, the intended usage is to pipe it into the command 'dot -Tpdf' and redirect that into a PDF file. The 'dot' command is part of the GraphViz project (https://www.graphviz.org/), please see their manual for the many other options that can be explored for visualisation purposes.

      Usage: fortran-src [OPTION...] <file>
        -v VERSION, -F VERSION  --fortranVersion=VERSION         Fortran version to use, format: Fortran[66/77/77Legacy/77Extended/90]
        -a ACTION               --action=ACTION                  lex or parse action
        -t                      --typecheck                      parse and run typechecker
        -R                      --rename                         parse and rename variables
        -B                      --bblocks                        analyse basic blocks
        -S                      --supergraph                     analyse super graph of basic blocks
        -r                      --reprint                        Parse and output using pretty printer
                                --dot                            output graphs in GraphViz DOT format
                                --dump-mod-file                  dump the information contained within mod files
        -I DIR                  --include-dir=DIR                directory to search for precompiled 'mod files'
        -c                      --compile                        compile an .fsmod file from the input
                                --show-block-numbers[=LINE-NUM]  Show the corresponding AST-block identifier number next to every line of code.
                                --show-flows-to=AST-BLOCK-ID     dump a graph showing flows-to information from the given AST-block ID; prefix with 's' for supergraph
                                --show-flows-from=AST-BLOCK-ID   dump a graph showing flows-from information from the given AST-block ID; prefix with 's' for supergraph

  ## Installation

  ### Build from source

  Stack 2.x is required for building. *(Stack 1.x may work with minor alternations -- you may have to download the resolver manually.)*

  Clone the repository and install [Stack](https://docs.haskellstack.org/en/stable/README/).

  ```
  stack setup
  stack build
  ```

  ### Using Cabal

  Install [Cabal](https://www.haskell.org/cabal/).

  ```
  cabal install fortran-src
  ```
license-name: Apache-2.0
