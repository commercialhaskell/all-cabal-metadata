all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.0.3
author: Auke Booij
basic-deps:
  base: <5
  bytestring: '>=0'
  cpphs: '>=0'
  data-flags: '>=0'
  filepath: '>=0'
  process: '>=0'
  storable-record: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Wrapper library for libxkbcommon, which is the new alternative for the X11 XKB.h keyboard input
  API. Specifically, it finds keymap files from disk based on Rule\/Model\/Layout\/Variant\/Option
  specifications, and compiles them into a 'Keymap'. From this 'Keymap', a 'KeyboardState' can be
  constructed which represents the states of various physical buttons such as the shift/alt/ctrl
  keys, and can give the correct key symbol based on keyboard events. E.g., pressing the @\<h\>@ key
  while @\<shift\>@ is pressed produces the @H@ symbol in the common QWERTY keymaps, but in e.g.
  the Dvorak keymap, it produces the D symbol.

  After keymap creation, which libxkbcommon can do based on locale preferences and enviroment
  variables, this is all handled by routing keyboard events through libxkbcommon.

  At this stage, these haskell bindings do not make libxkbcommon look much like a haskell library.
  For example, in principle the entire libxkbcommon library is just a stateful processor, and has
  nothing to do with the IO monad.
  However, because I am not yet a very good haskell programmer, and because
  in most realistic use cases input data comes from the IO monad anyway, the stateful operations
  are encoded in the IO monad anyway.

  Note that these bindings load the keysym constants from the libxkbcommon C header files at
  compile time using TH, and similarly keycodes from the Linux header files.
  These should be present for correct compilation.
description-type: haddock
hash: 81f8b7b334d9c0e668e721af5281ecb901f9595a7ff1be83fd04b91cd40d11df
homepage: ''
latest: 0.0.3
license-name: MIT
maintainer: auke@tulcod.com
synopsis: Haskell bindings for libxkbcommon
test-bench-deps:
  base: '>=0'
  random: '>=0'
  time: '>=0'
  unix: '>=0'
  vector: '>=0'
  xkbcommon: '>=0'
