all-versions:
- 0.1.0.0
author: Tweag I/O
basic-deps:
  aeson: '>=0.11'
  ansi-wl-pprint: '>=0'
  base: '>=4.9 && <5'
  bytestring: '>=0.10'
  clock: '>=0.7.2'
  containers: '>=0.5'
  deepseq: '>=1.4'
  directory: '>=0'
  exceptions: '>=0.8'
  filepath: '>=0'
  generic-deriving: '>=1.11'
  hashable: '>=0'
  hyperion: '>=0'
  lens: '>=4.0'
  mtl: '>=2.2'
  optparse-applicative: '>=0.12'
  process: '>=0'
  random: '>=1.1'
  random-shuffle: '>=0.0.4'
  statistics: '>=0.13'
  text: '>=1.2'
  time: '>=1.0'
  unordered-containers: '>=0.2'
  vector: '>=0.11'
changelog: ''
changelog-type: ''
description: |
  # Hyperion: Haskell-based systems benchmarking

  [![Build Status](https://travis-ci.org/tweag/hyperion.svg?branch=master)](https://travis-ci.org/tweag/hyperion)

  Hyperion is a DSL for writing benchmarks to measure and analyze
  software performance. It is a lab for future [Criterion][criterion]
  features.

  ## Getting started

  ### Build

  You can build the [`micro benchmark example`](examples/micro-benchmarks.hs)
  using stack:

  ``` shell
  $ stack build
  $ stack exec hyperion-micro-benchmark-example
  ```

  ### Example usage

  The Hyperion DSL is a backwards compatible extension
  to [Criterion][criterion]'s DSL (except for the rarely used `env`
  combinator, which has a safer type). Here is an example:

  ``` haskell
  benchmarks :: [Benchmark]
  benchmarks =
      [ bench "id" (nf id ())
      , series [0,5..20] $ \n ->
          bgroup "pure-functions"
            [ bench "fact" (nf fact n)
            , bench "fib" (nf fib n)
            ]
      , series [1..4] $ \n ->
          series [1..n] $ \k ->
            bench "n choose k" $ nf (uncurry choose) (n, k)
      ]

  main :: IO ()
  main = defaultMain "hyperion-example-micro-benchmarks" benchmarks
  ```

  By default Hyperion runs your benchmarks and pretty prints the
  results. There are several command-line options that you can pass to
  the executable, like printing the results to a JSON file or including
  individual raw measurements. To see the full set of options run the
  executable with `--help`:

  ``` shell
  $ stack exec hyperion-micro-benchmark-example -- --help
  Usage: hyperion-micro-benchmark-example ([--pretty] | [-j|--json PATH] |
                                          [-f|--flat PATH]) ([-l|--list] | [--run]
                                          | [--no-analyze]) [--raw]
                                          [--arg KEY:VAL] [NAME...]

  Available options:
    -h,--help                Show this help text
    --pretty                 Pretty prints the measurements on stdout.
    -j,--json PATH           Where to write the json benchmarks output. Can be a
                             file name, a directory name or '-' for stdout.
    -f,--flat PATH           Where to write the json benchmarks output. Can be a
                             file name, a directory name or '-' for stdout.
    --version                Display version information
    -l,--list                List benchmark names
    --run                    Run benchmarks and analyze them (default)
    --no-analyze             Only run the benchmarks
    --raw                    Include raw measurement data in report.
    --arg KEY:VAL            Extra metadata to include in the report, in the
                             format key:value.
  ```
description-type: markdown
hash: 4c99ca22024ce6254982c44cdfd702b616deb81d398652e5ffdd7fbad1edc1a7
homepage: https://github.com/tweag/hyperion#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: nicolas.mattia@tweag.io
synopsis: Reliable performance measurement with robust data export.
test-bench-deps:
  QuickCheck: '>=2.8'
  base: '>=0'
  hspec: '>=2.2'
  hyperion: '>=0'
  lens: '>=0'
  text: '>=0'
  unordered-containers: '>=0.2'
