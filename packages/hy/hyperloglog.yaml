all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.3
- 0.2.3.1
- 0.2.3.2
- 0.2.3.3
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.3.1
- 0.3.4
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 0.4.0.4
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- '0.5'
author: Edward A. Kmett
basic-deps:
  approximate: '>=0.2.1 && <1'
  base: '>=4.10 && <5'
  binary: '>=0.5 && <0.9'
  bits: '>=0.2 && <1'
  bytes: '>=0.7 && <1'
  bytestring: '>=0.9 && <0.13'
  cereal: '>=0.3.5 && <0.6'
  cereal-vector: '>=0.2 && <0.3'
  comonad: '>=4 && <6'
  cpu: '>=0.1 && <0.2'
  deepseq: '>=1.3 && <1.6'
  distributive: '>=0.3 && <1'
  entropy: '>=0.4 && <0.5'
  ghc-prim: '>=0'
  hashable: '>=1.1.2.3 && <1.6'
  lens: '>=4 && <6'
  reflection: '>=1.3 && <3'
  semigroupoids: '>=4 && <7'
  semigroups: '>=0.8.4 && <1'
  tagged: '>=0.4.5 && <1'
  vector: '>=0.9 && <0.14'
changelog: "0.5 [2025.01.25]\r\n----------------\r\n* Add a `generateHyperLogLog`
  function that randomly generates a `HyperLogLog`\r\n  value using system entropy.
  This function is suitable for scenarios where\r\n  cryptographic security is a primary
  consideration.\r\n* Add an additional `s` type parameter to `HyperLogLog` that encodes
  the\r\n  `SipKey` used to configure the hash function when `insert`ing new values.\r\n
  \ (Previously, inserting a new value would always use a fixed `SipKey`.)\r\n\r\n
  \ In order to continue using the old behavior of the `insert` function, one\r\n
  \ can instantiate `s` to the newly added `DefaultSipKey` type. Note that this\r\n
  \ is *not* cryptographically secure, however. (In contrast, the\r\n  `generateHyperLogLog`
  function instantiates `s` with a randomly generated\r\n  `SipKey`.)\r\n* Export
  the `SipKey` data type and define a `reifySipKey` function to promote\r\n  a `SipKey`
  value to the type level.\r\n* Define a `type DefaultHyperLogLog = HyperLogLog DefaultSipKey`
  type synonym.\r\n* Drop support for GHC 8.0.\r\n\r\n0.4.6 [2022.04.18]\r\n------------------\r\n*
  Remove the `siphash` dependency. Because `siphash` no longer builds on\r\n  GHC
  9.2+, we instead bundle the code alongside `hyperloglog`. This allows\r\n  `hyperloglog`
  to build with 9.2.\r\n\r\n0.4.5 [2021.11.16]\r\n------------------\r\n* Drop support
  for pre-8.0 versions of GHC.\r\n* Allow building with `hashable-1.4.*`.\r\n\r\n0.4.4
  [2021.02.17]\r\n------------------\r\n* Allow building with `lens-5.*`.\r\n* The
  build-type has been changed from `Custom` to `Simple`.\r\n  To achieve this, the
  `doctests` test suite has been removed in favor of using\r\n  [`cabal-docspec`](https://github.com/phadej/cabal-extras/tree/master/cabal-docspec)\r\n
  \ to run the doctests.\r\n\r\n0.4.3 [2019.09.13]\r\n------------------\r\n* Remove
  unused `safecopy` dependency.\r\n\r\n0.4.2\r\n-----\r\n* Add a library dependency
  on the `doctests` test suite\r\n\r\n0.4.1\r\n-----\r\n* Revamp `Setup.hs` to use
  `cabal-doctest`. This makes it build\r\n  with `Cabal-2.0`, and makes the `doctest`s
  work with `cabal new-build` and\r\n  sandboxes.\r\n* Drop (unused) `hashable-extras`
  dependency\r\n* Add `NFData` instance for `HyperLogLog`\r\n* Require GHC 7.8 or
  later\r\n\r\n0.4.0.4\r\n-------\r\n* Support `cereal` 0.5 and `safecopy` 0.9.\r\n\r\n0.4.0.3\r\n-------\r\n*
  Fixed doctest issues caused by `vector` 0.11\r\n* Unfortunately the `herbie` changes
  turned out to be flawed (due to issue mikeizbicki/HerbiePlugin#8). Rolling them
  back for now.\r\n\r\n0.4.0.2\r\n-------\r\n* Fixed a haddock issue caused by the
  comments in the herbie code.\r\n\r\n0.4.0.1\r\n-------\r\n* Added `vector` 0.11
  support.\r\n* Incorporated some changes suggested by the HerbiePlugin.\r\n\r\n0.3.4\r\n-----\r\n*
  Support `generic-deriving` 1.8. We no longer incur a `generic-deriving` requirement
  at all except on GHC < 7.6.\r\n\r\n0.3.3.1\r\n-------\r\n* Support `reflection`
  2\r\n\r\n0.3.3\r\n-----\r\n* Added `bytes` and `binary` instances.\r\n* Compiles
  warning-free on GHC 7.10.\r\n\r\n0.3.2\r\n-----\r\n* Simplified `reifyConfig` internals.\r\n\r\n0.3.1\r\n-----\r\n*
  Added `insertHash`. This enables users of the 0.2\r\n  era version of `hyperloglog`
  to manually pick the\r\n  hash used and load their old data.\r\n* Builds warning-free
  on GHC 7.10\r\n\r\n0.3.0.1\r\n---\r\n* Constraint bumps for `lens` and `generic-deriving`\r\n\r\n0.3\r\n---\r\n*
  Switched to `SipHash`, so the package actually works.\r\n\r\n0.2.3.2\r\n-------\r\n*
  More `#ifdef` bugfixes\r\n\r\n0.2.3.1\r\n-------\r\n* `#ifdef` bugfix\r\n\r\n0.2.3\r\n-----\r\n*
  GHC 7.8 compatibility\r\n* Bumped `cereal` dependency.\r\n\r\n0.2.1\r\n-----\r\n*
  Exported `insert` from `Data.HyperLogLog`.\r\n\r\n0.2\r\n---\r\n* Made compatible
  with `lens` 4\r\n\r\n0.1\r\n---\r\n* Ported `Data.Analytics.Approximate.HyperLogLog`
  from [analytics](http://github.com/analytics) into a separate package.\r\n"
changelog-type: markdown
description: "hyperloglog\r\n===========\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/hyperloglog.svg)](https://hackage.haskell.org/package/hyperloglog)
  [![Build Status](https://github.com/ekmett/hyperloglog/workflows/Haskell-CI/badge.svg)](https://github.com/ekmett/hyperloglog/actions?query=workflow%3AHaskell-CI)\r\n\r\nThis
  package provides a working implementation of HyperLogLog.\r\n\r\nContact Information\r\n-------------------\r\n\r\nContributions
  and bug reports are welcome!\r\n\r\nPlease feel free to contact me through github
  or on the #haskell IRC channel on irc.freenode.net.\r\n\r\n-Edward Kmett\r\n"
description-type: markdown
hash: acafeb7e1d507aa4a93dba5d19930bf36f0e9932253483f87c90ec1e43dee965
homepage: http://github.com/analytics/hyperloglog
latest: '0.5'
license-name: BSD-3-Clause
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: An approximate streaming (constant space) unique object counter
test-bench-deps: {}
