homepage: https://github.com/hyraxbio/hyraxAbif/#readme
changelog-type: ''
hash: e928df817c4662a265b2e12ead799a83c5afe7f0bc0c4ba34f52cdf5586c7446
test-bench-deps:
  bytestring: '>=0.11.3 && <0.13'
  base: '>=4.9.1.0 && <5'
  text: '>=1.2.5 && <2.2'
  verset: '>=0.0.1.8 && <0.0.2.0'
  hedgehog: '>=1.2 && <1.5'
  binary: '>=0.8.9 && <0.10'
  hyraxAbif: -any
maintainer: andre@hyraxbio.co.za
synopsis: Modules for parsing, generating and manipulating AB1 files.
changelog: ''
basic-deps:
  bytestring: '>=0.11.3 && <0.13'
  base: '>=4.9.1.0 && <5'
  text: '>=1.2.5 && <2.2'
  verset: '>=0.0.1.8 && <0.0.2.0'
  filepath: '>=1.4.2 && <1.6'
  binary: '>=0.8.9 && <0.10'
  pretty-show: ==1.10.*
  hscolour: '>=1.24.4 && <1.26'
  hyraxAbif: -any
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.2.3.2
- 0.2.3.3
- 0.2.3.4
- 0.2.3.5
- 0.2.3.7
- 0.2.3.8
- 0.2.3.9
- 0.2.3.10
- 0.2.3.14
- 0.2.3.15
- 0.2.3.21
- 0.2.3.26
- 0.2.3.27
- 0.2.4.2
- 0.2.4.4
author: HyraxBio
latest: 0.2.4.4
description-type: markdown
description: "# HyraxBio AB1 parser, writer and generator (beta 0.2)\n\nThis project
  contains\n\n - Modules for parsing, generating or manipulating AB1 files.\n - Support
  for generating a minimal AB1 file from a FASTA input file\n - A simple terminal
  app to perform these operations\n\nSee\n\n  - https://hackage.haskell.org/package/hyraxAbif
  for the hackage documentation\n  - http://www6.appliedbiosystems.com/support/software_community/ABIF_File_Format.pdf
  for a high level overview of the AB1 file format.\n  - https://www.andrevdm.com/posts/2019-01-09-abif-chromatograms.html
  for an overview of how the package is implemented and additional usage information\n\n\n#
  Licence\n\nSee the LICENCE file. Please note that this package is distributed *without
  warranties or conditions of any kind.\n\n\n# Building\n\nBuild with one of\n\n -
  `stack build` or (`make build`)\n - `cabal new-build`\n\n\n# Terminal app\n\nRun
  with\n\n - `stack exec hyraxAbif-exe -- -- dump` if you are using stack\n - `cabal
  new-run hyraxAbif-exe dump` if you are using cabal 2.x\n\n## Dump AB1\n\nTo dump
  an existing AB1 run\n\n `hyraxAbif-exe dump example.ab1`\n\nThis will output the
  structure of the AB1 like this\n\n```\nHeader { hName = \"ABIF\" , hVersion = 101
  }\nDirectory\n  { dTagName = \"tdir\"\n  , dTagNum = 1\n  , dElemTypeCode = 1023\n
  \ , dElemTypeDesc = \"root\"\n  , dElemType = ElemRoot\n  , dElemSize = 28\n  ,
  dElemNum = 13\n  , dDataSize = 364\n  , dDataOffset = 61980\n  , dData = \"\"\n
  \ , dDataDebug = []\n  }\n[ Directory\n    { dTagName = \"DATA\"\n    , dTagNum
  = 9\n    , dElemTypeCode = 4\n    , dElemTypeDesc = \"short\"\n    , dElemType =
  ElemShort\n    , dElemSize = 2\n    , dElemNum = 7440\n    , dDataSize = 14880\n
  \   , dDataOffset = 128\n    , dData = \"\"\n    , dDataDebug = []\n    }\n    \n.\n.\n.\n\nDATA
  {short} tagNum=9 size=2 count=7440 offset=128  []\nDATA {short} tagNum=10 size=2
  count=7440 offset=15008  []\nDATA {short} tagNum=11 size=2 count=7440 offset=29888
  \ []\nDATA {short} tagNum=12 size=2 count=7440 offset=44768  []\nFWO_ {char} tagNum=1
  size=1 count=4 offset=1195463747  [\"GATC\"]\nLANE {short} tagNum=1 size=2 count=1
  offset=65536  [\"1\"]\nPBAS {char} tagNum=1 size=1 count=744 offset=59648  [\"GGGGGCAACTAAAGGAAGCTCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATGAGTTTGCCAGGAAGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAGTATGATCAGATACTCATAGAAATCTGTGGACATAAAGCTATAGGTACAGTATTAGTAGGACCTACACCTGTCAACATAATTGGAAGAAATCTGTTGACTCAGATTGGTTGCACTTTAAATTTTCCCATTAGCCCTATTGAGACTGTACCAGTAAAATTAAAGCCAGGAATGGATGGCCCAAAAGTTAAACAATGGCCATTGACAGAAGAAAAAATAAAAGCATTAGTAGAAATTTGTACAGAGATGGAAAAGGAAGGGAAAATTTCAAAAATTGGGCCTGAAAATCCATACAATACTCCAGTATTTGCCATAAAGAAAAAAGACAGTACTAAATGGAGAAAATTAGTAGATTTCAGAGAACTTAATAAGAGAACTCAAGACTTCTGGGAAGTTCAATTAGGAATACCACATCCCGCAGGGTTAAAAAAGAAAAAATCAGTAACAGTACTGGATGTGGGTGATGCATATTTTTCAGTTCCCTTAGATGAAGACTTCAGGAAGTATACTGCATTTACCATACCTAGTATAAACAATGAGACACCAGGGATTAGATATCAGTACAATGTGCTTCCACAGGGATGGAAAGGATCACCAGCAATATTCCAAAGTAGCATGA\"]\nPDMF
  {pString} tagNum=1 size=1 count=23 offset=60392  [\"KB_3500_POP7_BDTv3.mob\"]\nPDMF
  {pString} tagNum=2 size=1 count=23 offset=60415  [\"KB_3500_POP7_BDTv3.mob\"]\nPLOC
  {short} tagNum=1 size=2 count=744 offset=60438  []\nS/N% {short} tagNum=1 size=2
  count=4 offset=61926  []\nSMPL {pString} tagNum=1 size=1 count=10 offset=61934  [\"S17-SeqF1\"]\nCMNT
  {pString} tagNum=1 size=1 count=1 offset=61944  [\"Generated by HyraxBio AB1 generator\"]\n```\n\nThe
  data is output twice. The first section is the detail, the second is the summary.\n\nSelected
  data types have the \"debug data\" element populated. e.g. the PBAS (FASTA)\n\n##
  Generate minimal AB1s from FASTAs\n\nTo create an AB1 run\n\n `hyraxAbif-exe gen
  \"./pathContainingFastas\" \"./pathForOutputAb1s\"`\n\nThis will create an AB1 per
  input FASTA\n\n### Input FASTA format\n\nEach input data should have the following
  format\n\n```\n> weight\nread\n> weight\nread\n```\n\n - The **weight** is a numeric
  value between 0 and 1 that specifies the weight of the current read. No other header/name
  is allowed\n\n - The **read** is the set of input nucleotides, IUPAC ambiguity codes
  are supported (MRWSYKVHDBNX). A read can be single or multi-line\n\n\n### Weighted
  reads\n\n - The weigh of a read specifies the intensity of the peak from 0 to 1.
  \n - Weights for each position are added to a maximum of 1 per nucleotide\n - You
  can use `_` as a \"blank\" nucleotide, in which only the nucleotides from other
  reads will be considered\n\n\nFor example\n\n\n  ```\n  > 0.5\n  ACG\n  > 0.3\n
  \ AAAA\n  > 1\n  __AC\n  ```\nResults in the following weighted nucleotide per position\n\n
  * 0: `A` (0.5 + 0.3)\n * 1: `C` (0.5), `A` (0.3)\n * 2: `G` (0.5), `A` (0.3 + 1
  = 1)\n * 3: `A` (0.3), `C` (1)\n\n\n*Note that the reads do not need to be the same
  length.*\n\n\n### Reverse reads\n\nA weighted FASTA can represent a reverse read.
  To do this add a `R` suffix to the weight.\nThe data you enter should be entered
  as if it was a forward read. This data will be complemented\nand reversed before
  writing to the ABIF\n\n\n---\n\n#### Example FASTA - single file\n\n***eg1.fasta***\n```\n>
  1\nACTG\n```\n\n![](docs/docs/eg_actg.png)\n\n\nHere there is a single FASTA with
  a single read with a weigh of 1 (100%). The chromatogram for this AB1 shows perfect
  traces for the input `ACTG` nucleotides\n\n---\n\n#### Example FASTA - two FASTA
  files\n\n***eg1.fasta***\n```\n> 1\nACAG\n```\n\n***eg2.fasta***\n```\n> 1\nACTG\n```\n\n![](docs/docs/eg_acag_acgt.png)\n\nTwo
  input FASTA files both with a weigh of 1. You can see in the second trace that the
  third nucleotide is a `T` (the trace is green). Exactly what the base-calling software
  (phred & recall etc) decide to call the base as depends on your settings and software
  choices.\n\n---\n\n#### Example FASTA - two FASTA files with different weights\n\n***eg1.fasta***\n```\n>
  1\nACAG\n```\n\n***eg2.fasta***\n```\n> 0.3\nACTG\n```\n\n![](docs/docs/eg_acag_acgt03.png)\n\nHere
  the second fasta has a weight of 0.3 and you can see the traces are 30% of the height
  of the top ones.\n\n\n---\n\n#### Example FASTA - single FASTA with a mix\n\n***eg1.fasta***\n```\n>
  1\nACAG\n> 0.3\nACTG\n```\n\n![](docs/docs/eg_acag_acgt_mix.png)\n\nThe single input
  FASTA has an `AT` mix at the third nucleotide. The first read has a weight of 1
  and the second a weight of 0.3.\nNotice that the maximum weight is 1, e.g. the first
  `A` has the same intensity as the second even though the first one has the reads
  weighted both 1 and 0.3\n\n---\n\n\n#### Example FASTA - Multiple mixes\n\n***eg1.fasta***\n```\n>
  1\nACAG\n> 0.3\n_GT\n> 0.2\n_G\n```\n\n![](docs/docs/eg_multi_mix.png)\n\n---\n\n#
  Using the modules\n\n - Hyrax.Abif: The core AB1 types\n - Hyrax.Abif.Fasta: A simple
  FASTA parser used when generating AB1s\n - Hyrax.Abif.Read: Module for parsing an
  existing AB1\n - Hyrax.Abif.Write: Module for writing a new AB1 file\n - Hyrax.Abif.Generate:
  Module for generating a minimal AB1 from a given FASTA input\n\nFor a detailed overview
  of the code see *TODO* and the haddock documentation *TODO*\n\nFor now the terminal
  app (Main.hs) serves as an example and the best starting point to understand the
  code\n\n\n## E.g. Add a comment to an existing AB1 file\n\n\n```\nimport qualified
  Hyrax.Abif as H\nimport qualified Hyrax.Abif.Read as H\nimport qualified Hyrax.Abif.Write
  as H\n\naddComment :: IO ()\naddComment = do\n  abif' <- H.readAbif \"example.ab1\"\n\n
  \ case abif' of\n    Left e -> putText $ \"error reading ABIF: \" <> e\n    Right
  abif -> do\n      let modified = H.addDirectory abif $ H.mkComment \"new comment\"\n
  \     H.writeAbif \"example.modified.ab1\" modified\n```\n\nFor additional examples
  see the Examples directory\n"
license-name: (BSD-3-Clause OR Apache-2.0)
