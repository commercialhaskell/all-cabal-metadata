all-versions:
- 0.1.0.0
author: Pavel
basic-deps:
  HFitUI: '>=0'
  Hydrogen: '>=0'
  MissingH: '>=1.4.0'
  aeson: '>=0.11.2'
  base: '>=4.7 && <5'
  binary: '>=0.8.3'
  directory: '>=1.2.6'
  shakespeare: '>=2.0.11'
  yaml: '>=0.8.21'
changelog: ''
changelog-type: ''
description: "# Hydrogen\n\n## Introduction\nLibrary for generating a WebGL scene
  by using [ThreeJS](https://threejs.org) on the web for the Haskell programming language.\n\n##
  Short description\nThe **Hydrogen** uses the [HFitUI](http://hackage.haskell.org/package/HFitUI)
  library as the result of generating a WebGL scene. The WebGL scene is generated
  from a YAML file. This approach greatly simplifies the process of generating a WebGL
  scene in a Haskell with [HFitUI](http://hackage.haskell.org/package/HFitUI) library.\nBelow
  is an example generation scene from [YAML file](https://github.com/iqsf/Hydrogen/blob/master/models/test/MyTest.scene)
  code:\n\n\n```\n/*Generate by HScript from the HFitUI library*/\n//Автоматически
  сгенерированный скрипт\n//Приложение Hydrogen (0.0.1)\nif(!Detector.webgl) Detector.addGetWebGLMessage();\n
  \nvar camera;\nvar scene;\nvar groupRoot;\nvar root = document.getElementById(\"idRoot\");\nvar
  canvas3D = document.getElementById(\"idCanvas\");\nvar renderer;\nvar stats;\nvar
  orbitControls = null;\nvar flyControls = null;\n \nfunction render (){\n  renderer.render(scene,
  camera); \n}\n \nfunction update (){\n  if(stats) stats.update(); \n  if(flyControls)
  flyControls.update(1); \n}\n \nfunction animate (){\n  requestAnimationFrame(animate);
  \n  render();\n  update();\n}\n \nfunction onWindowResize (){\n  if (camera) {\n
  \     camera.aspect = window.innerWidth / (window.innerHeight);\n      camera.updateProjectionMatrix();\n
  \ }\n  renderer.setSize( window.innerWidth, window.innerHeight);\n  render();\n}\n
  \nfunction drawRootAxes (){\n  var dirX = new THREE.Vector3( 1, 0, 0 ); dirX.normalize();\n
  \ var dirY = new THREE.Vector3( 0, 1, 0 ); dirY.normalize();\n  var dirZ = new THREE.Vector3(
  0, 0, 1 ); dirZ.normalize();\n  var origin = new THREE.Vector3( 0, 0, 0 );\n  var
  length = 1;\n  var hexX = 0xff0000;\n  var hexY = 0x00ff00;\n  var hexZ = 0x0000ff;\n
  \ scene.add(new THREE.ArrowHelper(dirX, origin, length, hexX));\n  scene.add(new
  THREE.ArrowHelper(dirY, origin, length, hexY));\n  scene.add(new THREE.ArrowHelper(dirZ,
  origin, length, hexZ));\n}\n \nfunction init (){\n  scene = new THREE.Scene();\n
  \ groupRoot = new THREE.Group();\n  groupRoot.position.set( 0.0 , 0.0 , 0.0 );\n
  \ groupRoot.rotation.set( 0.0 , 0.0 , 0.0 );\n  groupRoot.scale.set( 1.0 , 1.0 ,
  1.0 );\n  scene.add(groupRoot);\n  var grid = new THREE.GridHelper( 25, 50, 0x586e75,
  0x073642 );\n  grid.rotateOnAxis( new THREE.Vector3( 1, 0, 0 ), 90 * ( Math.PI/180
  ) );\n  groupRoot.add(grid);\n  drawRootAxes();\n  renderer = new THREE.WebGLRenderer({canvas:
  canvas3D, antialias: false});\n  renderer.setClearColor( 0x002b36 );\n  renderer.setPixelRatio(
  window.devicePixelRatio );\n  renderer.setSize( window.innerWidth, window.innerHeight
  );\n  renderer.sortObjects = false;\n  var material4466976ede5111e6a5d3f3eee64202b6
  = new THREE.MeshLambertMaterial( { color: 0x6e6e6e, emissive: 0x6e6e6e, emissiveIntensity:
  0.5, opacity: 1.0, transparent: false } ); \n  (function(material){  })( material4466976ede5111e6a5d3f3eee64202b6
  ); \n  var materiale6f1bd16e2fb11e687c71772a2fe4228 = new THREE.MeshLambertMaterial(
  { color: 0xa41a, emissive: 0x6e06e, emissiveIntensity: 0.0, opacity: 1.0, transparent:
  false } ); \n  (function(material){  })( materiale6f1bd16e2fb11e687c71772a2fe4228
  ); \n  var material4e181b50e3bc11e6924d8bbeaf59f608 = new THREE.MeshBasicMaterial(
  { map: new THREE.TextureLoader().load(\"/texture_3d/3165d44e-e398-11e6-aac6-e7c59ca562a2\")
  , opacity: 1.0, transparent: false } ); \n  (function(material){  })( material4e181b50e3bc11e6924d8bbeaf59f608
  ); \n  var material7badc81ae6b611e69cc12b72c18ca176 = new THREE.MeshFaceMaterial([
  new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture(\"/texture_3d/6b6fc102-e462-11e6-88eb-433f284ad9f1?nm=0\"),
  side: THREE.BackSide } )\n                                                                         ,
  new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture(\"/texture_3d/6b6fc102-e462-11e6-88eb-433f284ad9f1?nm=1\"),
  side: THREE.BackSide } )\n                                                                         ,
  new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture(\"/texture_3d/6b6fc102-e462-11e6-88eb-433f284ad9f1?nm=2\"),
  side: THREE.BackSide } )\n                                                                         ,
  new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture(\"/texture_3d/6b6fc102-e462-11e6-88eb-433f284ad9f1?nm=3\"),
  side: THREE.BackSide } )\n                                                                         ,
  new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture(\"/texture_3d/6b6fc102-e462-11e6-88eb-433f284ad9f1?nm=4\"),
  side: THREE.BackSide } )\n                                                                         ,
  new THREE.MeshBasicMaterial( { map: THREE.ImageUtils.loadTexture(\"/texture_3d/6b6fc102-e462-11e6-88eb-433f284ad9f1?nm=5\"),
  side: THREE.BackSide } )\n                                                                         ]);
  \n         \n  (function(material){  })( material7badc81ae6b611e69cc12b72c18ca176
  ); \n  camera = new THREE.PerspectiveCamera( 45.0, window.innerWidth / window.innerHeight,
  1.0, 1000.0 );\n  camera.up.set( 0.0, 0.0, 1.0);\n  camera.position.set( 0.0 , -10.0
  , 10.0 );\n  scene.add(camera);\n  var lighte436c6c8f1d511e6837cafadb174b93a = new
  THREE.PointLight( 0xFFFFFF , 0.8 , 0.0 , 1.0); \n  lighte436c6c8f1d511e6837cafadb174b93a.position.set(
  0.0 , 0.0 , 0.0 ); \n  (function(light){  })( lighte436c6c8f1d511e6837cafadb174b93a
  ); \n  camera.add(lighte436c6c8f1d511e6837cafadb174b93a); \n  var light9ab6f73cf1d211e6ad6c23968912c3bd
  = new THREE.AmbientLight( 0x999999 , 1.0 ); \n  (function(light){  })( light9ab6f73cf1d211e6ad6c23968912c3bd
  ); \n  scene.add(light9ab6f73cf1d211e6ad6c23968912c3bd); \n  var figure5d2f5584e6b611e6b1e007ba4b916aa0
  = new THREE.Mesh( new THREE.BoxGeometry( 500.0 , 500.0 , 500.0 ) , material7badc81ae6b611e69cc12b72c18ca176
  ); \n  figure5d2f5584e6b611e6b1e007ba4b916aa0.position.set( 0.0 , 0.0 , 0.0 ); \n
  \ figure5d2f5584e6b611e6b1e007ba4b916aa0.rotation.set( 1.570796 , 0.0 , 0.0 ); \n
  \ figure5d2f5584e6b611e6b1e007ba4b916aa0.scale.set( 1.0 , 1.0 , 1.0 ); \n  (function(figure,
  material){  })( figure5d2f5584e6b611e6b1e007ba4b916aa0 , material7badc81ae6b611e69cc12b72c18ca176
  ); \n  scene.add(figure5d2f5584e6b611e6b1e007ba4b916aa0); \n  var group20c55aece15e11e69b09a74605bb9055
  = new THREE.Group(); \n  group20c55aece15e11e69b09a74605bb9055.position.set( 0.0
  , 0.0 , 0.0 ); \n  group20c55aece15e11e69b09a74605bb9055.rotation.set( 0.0 , 0.0
  , 0.0 ); \n  group20c55aece15e11e69b09a74605bb9055.scale.set( 1.0 , 1.0 , 1.0 );
  \n  (function(figure){  })( group20c55aece15e11e69b09a74605bb9055 );  \n  groupRoot.add(group20c55aece15e11e69b09a74605bb9055);
  \n  var params1743e5eaf2a911e69ed17714401e4924 = [\"Test\",\"1.0\"]; \n   var figure1743e5eaf2a911e69ed17714401e4924
  = (function(material, params){ var geometry = new THREE.SphereGeometry( 1, 32, 32
  );\n  var sphere = new THREE.Mesh( geometry, material );   \n  return sphere;\n
  \  })( material4466976ede5111e6a5d3f3eee64202b6, params1743e5eaf2a911e69ed17714401e4924
  ); \n  figure1743e5eaf2a911e69ed17714401e4924.position.set( 0.0 , 4.0 , 0.0 ); \n
  \ figure1743e5eaf2a911e69ed17714401e4924.rotation.set( 0.0 , 0.0 , 0.0 ); \n  figure1743e5eaf2a911e69ed17714401e4924.scale.set(
  1.0 , 1.0 , 1.0 ); \n  (function(figure, material){  })( figure1743e5eaf2a911e69ed17714401e4924
  , material4466976ede5111e6a5d3f3eee64202b6 ); \n  group20c55aece15e11e69b09a74605bb9055.add(figure1743e5eaf2a911e69ed17714401e4924);
  \n  var entityCamera45d7b56aedf111e6be1d539a6d03a9c1 = (function(){ \n  var video
  = document.createElement( 'video' );\n  video.id = 'VID_45d7b56a-edf1-11e6-be1d-539a6d03a9c1';\n
  \ video.src = \"/video/sintel.ogv\";\n  video.loop = true;\n  video.muted = true;\n
  \ video.load();\n  video.play();\n  var videoTexture = new THREE.VideoTexture( video
  );\n  videoTexture.minFilter = THREE.LinearFilter;\n  videoTexture.magFilter = THREE.LinearFilter;\n
  \ videoTexture.format = THREE.RGBFormat;\n  var movieMaterial = new THREE.MeshBasicMaterial(
  { map: videoTexture, overdraw: true, side:THREE.FrontSide } ); \n  movieMaterial.side
  = THREE.BackSide;   \n  var entityGroup = new THREE.Group(); \n  entityGroup.position.set(
  0.0 , 0.0 , 0.0 ); \n  entityGroup.rotation.set( 0.0 , 1.57 , 0.0 ); \n  entityGroup.scale.set(
  1.0 , 1.0 , 1.0 ); \n  var meshCamera = new THREE.Mesh( new THREE.ConeGeometry(1*0.5,
  1, 4), new THREE.MeshBasicMaterial({color: 0xFF0000, wireframe: true}) );\n  meshCamera.rotation.x
  = -Math.PI/2;\n  meshCamera.scale.x = meshCamera.scale.y = meshCamera.scale.z =
  0.35;\n  entityGroup.add(meshCamera);\n  var area_0 = [ new THREE.Vector2( 0.0 ,
  1.0 )\n                                 , new THREE.Vector2( 0.5 , 1.0 )\n                                 ,
  new THREE.Vector2( 0.5 , 0.0 )\n                                 , new THREE.Vector2(
  0.0 , 0.0 )\n                                 ];\n  var movieGeometry_0 = new THREE.PlaneGeometry(2.5,
  2.5);\n  movieGeometry_0.faceVertexUvs[0][0] = [ area_0[0], area_0[3], area_0[1]
  ];\n  movieGeometry_0.faceVertexUvs[0][1] = [ area_0[3], area_0[2], area_0[1] ];\n
  \ var movieScreen_0 = new THREE.Mesh( movieGeometry_0, movieMaterial );\n  movieScreen_0.geometry.vertices[0].x
  = movieScreen_0.geometry.vertices[0].x + 0.0\n  movieScreen_0.geometry.vertices[0].y
  = movieScreen_0.geometry.vertices[0].y + 0.0\n  movieScreen_0.geometry.vertices[0].z
  = movieScreen_0.geometry.vertices[0].z + 0.0\n  movieScreen_0.geometry.vertices[1].x
  = movieScreen_0.geometry.vertices[1].x + 0.0\n  movieScreen_0.geometry.vertices[1].y
  = movieScreen_0.geometry.vertices[1].y + 0.0\n  movieScreen_0.geometry.vertices[1].z
  = movieScreen_0.geometry.vertices[1].z + 0.0\n  movieScreen_0.geometry.vertices[2].x
  = movieScreen_0.geometry.vertices[2].x + 0.0\n  movieScreen_0.geometry.vertices[2].y
  = movieScreen_0.geometry.vertices[2].y + 0.0\n  movieScreen_0.geometry.vertices[2].z
  = movieScreen_0.geometry.vertices[2].z + 0.0\n  movieScreen_0.geometry.vertices[3].x
  = movieScreen_0.geometry.vertices[3].x + 0.0\n  movieScreen_0.geometry.vertices[3].y
  = movieScreen_0.geometry.vertices[3].y + 0.0\n  movieScreen_0.geometry.vertices[3].z
  = movieScreen_0.geometry.vertices[3].z + 0.0\n  movieScreen_0.position.set( 0.0
  , 0.0 , 3.0 ); \n  movieScreen_0.rotation.set( 0.0 , 0.0 , 1.57 ); \n  movieScreen_0.scale.set(
  1.0 , 1.0 , 1.0 ); \n  entityGroup.add(movieScreen_0);\n  var area_1 = [ new THREE.Vector2(
  0.5 , 1.0 )\n                                 , new THREE.Vector2( 1.0 , 1.0 )\n
  \                                , new THREE.Vector2( 1.0 , 0.0 )\n                                 ,
  new THREE.Vector2( 0.5 , 0.0 )\n                                 ];\n  var movieGeometry_1
  = new THREE.PlaneGeometry(2.5, 2.5);\n  movieGeometry_1.faceVertexUvs[0][0] = [
  area_1[0], area_1[3], area_1[1] ];\n  movieGeometry_1.faceVertexUvs[0][1] = [ area_1[3],
  area_1[2], area_1[1] ];\n  var movieScreen_1 = new THREE.Mesh( movieGeometry_1,
  movieMaterial );\n  movieScreen_1.geometry.vertices[0].x = movieScreen_1.geometry.vertices[0].x
  + 0.0\n  movieScreen_1.geometry.vertices[0].y = movieScreen_1.geometry.vertices[0].y
  + 0.0\n  movieScreen_1.geometry.vertices[0].z = movieScreen_1.geometry.vertices[0].z
  + 0.0\n  movieScreen_1.geometry.vertices[1].x = movieScreen_1.geometry.vertices[1].x
  + 0.0\n  movieScreen_1.geometry.vertices[1].y = movieScreen_1.geometry.vertices[1].y
  + 0.0\n  movieScreen_1.geometry.vertices[1].z = movieScreen_1.geometry.vertices[1].z
  + 0.0\n  movieScreen_1.geometry.vertices[2].x = movieScreen_1.geometry.vertices[2].x
  + 0.0\n  movieScreen_1.geometry.vertices[2].y = movieScreen_1.geometry.vertices[2].y
  + 0.0\n  movieScreen_1.geometry.vertices[2].z = movieScreen_1.geometry.vertices[2].z
  + 0.0\n  movieScreen_1.geometry.vertices[3].x = movieScreen_1.geometry.vertices[3].x
  + 0.0\n  movieScreen_1.geometry.vertices[3].y = movieScreen_1.geometry.vertices[3].y
  + 0.0\n  movieScreen_1.geometry.vertices[3].z = movieScreen_1.geometry.vertices[3].z
  + 0.0\n  movieScreen_1.position.set( 0.0 , 3.0 , 4.0 ); \n  movieScreen_1.rotation.set(
  0.0 , 0.0 , 1.57 ); \n  movieScreen_1.scale.set( 1.0 , 1.0 , 1.0 ); \n  entityGroup.add(movieScreen_1);\n
  \ group20c55aece15e11e69b09a74605bb9055.add(entityGroup); \n  return entityGroup;
  \n  })(); \n  var groupc34cbde4e7b911e6a0a36bff2604ce8f = new THREE.Group(); \n
  \ groupc34cbde4e7b911e6a0a36bff2604ce8f.position.set( 0.0 , 0.0 , 0.0 ); \n  groupc34cbde4e7b911e6a0a36bff2604ce8f.rotation.set(
  0.0 , 0.0 , 0.0 ); \n  groupc34cbde4e7b911e6a0a36bff2604ce8f.scale.set( 1.0 , 1.0
  , 1.0 ); \n  (function(figure){  })( groupc34cbde4e7b911e6a0a36bff2604ce8f );  \n
  \ groupRoot.add(groupc34cbde4e7b911e6a0a36bff2604ce8f); \n  orbitControls = new
  THREE.OrbitControls(camera, renderer.domElement);\n  orbitControls.addEventListener('change',
  render);\n  orbitControls.target.set(0, 0, 0);\n  orbitControls.update();\n   (function(){
  if(orbitControls){\n      orbitControls.minDistance = 3;\n      orbitControls.maxDistance
  = 20;\n      orbitControls.minPolarAngle = 0; \n      orbitControls.maxPolarAngle
  = 1.50098;\n  }\n   })();  \n  window.addEventListener( 'resize',onWindowResize,false
  );\n  animate();\n}\ninit();\n\n```\n\n\n\n\n"
description-type: markdown
hash: f0e97fe183bc8698c8bf8167567458890bc1bf65a40f1a011d1596ddb9be9572
homepage: https://github.com/iqsf/Hydrogen.git
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: iqsf@ya.ru
synopsis: The library for generating a WebGL scene for the web
test-bench-deps:
  Hydrogen: '>=0'
  base: '>=0'
