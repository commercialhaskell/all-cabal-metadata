homepage: http://github.com/tree-sitter/haskell-tree-sitter#readme
changelog-type: markdown
hash: 77f7d4055f7089ff617c0c374229f36e425f15241e7be5da7e7d56f91f5e362d
test-bench-deps:
  base: -any
  hedgehog: '>=0.6 && <2'
  tree-sitter: -any
maintainer: rob.rix@github.com
synopsis: Unstable bindings for the tree-sitter parsing library.
changelog: |
  ### v0.9.0.2

  * Remove `fused-effects` dependency.
  * Support ghc 8.10.


  ### v0.9.0.1

  * Remove `semantic-source` dependency.

  ### v0.9.0.0

  * Remove CodeGen files `Deserialize`, `GenerateSyntax`, `Unmarshal`, `Token`

  ### v0.8.0.2

  * Updates `tree-sitter` to fix an issue with improperly balanced subtrees leading to slowdowns when copying nodes.
  * Neither `ts_tree_cursor_copy_child_nodes` nor `ts_node_copy_child_nodes` is interruptible.


  ### v0.8.0.1

  * `ts_tree_cursor_copy_child_nodes` is interruptible.


  ### v0.5.0.0

  * Use a shared `Token` type for anonymous leaves in generated AST types.
  * Allow generated ASTs to override the representation for portions of the AST by defining specialized datatypes. Note that this should be used sparingly to keep the maintenance burden of the AST types low.
  * Generate named sum types as `newtype` wrappers around sums constructed with `:+:`.
  * Generate named & anonymous sum types as balanced binary trees of `:+:`s instead of right-chained lists.
  * Rename the `bytes` field of leaves to `text`.

  ### v0.4.0.0

  * `Unmarshal` has been split into `Unmarshal`, `UnmarshalAnn`, and `UnmarshalField`, with the first newly taking type constructors of kind `* -> *`. `UnmarshalAnn` can be used to unmarshal annotation types relating to the entire node, and `UnmarshalField` can be used to unmarshal fields of zero or more nodes.

  * `UnmarshalAnn` instances are provided for the `semantic-source` types `Loc`, `Range`, and `Span`.

  * AST datatypes are generated with `GHC.Generics.:+:` for anonymous sums in field positions instead of `Either`s. This makes it possible to define typeclasses over them at kind `* -> *` instead of only at kind `*`.

  * AST datatypes receive derived instances of `Foldable`, `Functor`, `Generic`, `Generic1`, and `Traversable`.

  ### v0.3.0.0

  * `Node` has a `nodeIsExtra` field stating whether it was produced via the `extras` rule.

  ### v0.2.1.0

  * Add `TreeSitter.Range` and `TreeSitter.Span`.

  ### v0.2.0.0

  * Add unmarshalling support with `TreeSitter.Unmarshal`.
  * Removes pointer-only constructors for bridged C types.

  ### v0.1.0.0

  * Initial release.
basic-deps:
  bytestring: '>=0.10.8.2 && <0.13'
  split: ^>=0.2.3
  base: '>=4.12 && <5'
  unordered-containers: ^>=0.2.9
  filepath: ^>=1.4.1
  containers: ^>=0.6.0.1
  template-haskell: '>=2.12 && <3'
  directory: ^>=1.3
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.9.0.0
- 0.9.0.1
- 0.9.0.2
- 0.9.0.3
author: Rob Rix, Josh Vera, Tim Clem, Rick Winfrey, Max Brunsfeld, Ayman Nadeem, Patrick
  Thomson
latest: 0.9.0.3
description-type: haddock
description: |-
  Tree-sitter is a parser generator tool and an incremental parsing library.

  We strongly recommend against depending on this library at this time;
  the data types and API are subject to rapid change. Future versions
  will provide more reliable parsers and a more stable API.
license-name: BSD-3-Clause
