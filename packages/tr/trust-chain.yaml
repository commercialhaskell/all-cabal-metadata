homepage: ''
changelog-type: markdown
hash: 05174242b6617f61047129b9ab2976efcf86a83ae22792d5e7e98768686aead3
test-bench-deps:
  trust-chain: -any
  base: '>=4.12 && <5'
  text: -any
  containers: -any
  binary: -any
  merge: -any
  cropty: -any
maintainer: sgschlesinger@gmail.com
synopsis: An implementation of a trust chain
changelog: |
  # Revision history for chat

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  bytestring: '>=0.11 && <1'
  base: '>=4.6 && <5'
  text: '>=1.2 && <2'
  network: '>=3.1 && <4'
  containers: '>=0.6 && <1'
  binary: '>=0.8 && <1'
  merge: '>=0.3'
  cropty: '>=0.3'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
author: Samuel Schlesinger
latest: 0.1.2.0
description-type: markdown
description: |
  # Trust Chain

  An implementation of a trust chain parameterized on structure and content. As an example:

  ```haskell
  type Time = Integer

  data Person = Person
    { pubKey :: PublicKey
    , legalName :: Maybe Text
    , emails :: Set Text
    , posts :: Set (Time, Text)
    }
    deriving (Eq, Ord, Binary, Generic)

  mergePerson :: Merge [String] Person Person
  mergePerson =
    Person
    <$> required pubKey
    <*> optional legalName
    <*> combine emails
    <*> combine posts

  person :: IO ()
  person = do
    privateKey0 <- generatePrivateKey KeySize256
    privateKey1 <- generatePrivateKey KeySize256
    let myself = Person (privateToPublic privateKey0) (Just "Samuel Schlesinger") (Set.fromList ["sgschlesinger@gmail.com", "samuel@simspace.com"]) (Set.fromList [])
    let myfriend = Person (privateToPublic privateKey1) (Just "My Friend") (Set.fromList ["friend@friendly.com"]) Set.empty
    let partialfriend = Person (privateToPublic privateKey1) Nothing Set.empty Set.empty
    tc0 <- mkTrustProxy privateKey0 [Trustless myself, Trustless partialfriend]
    tc1 <- mkTrustProxy privateKey1 [Trustless myfriend]
    tc0' <- mkTrustProxy privateKey0 [tc0, tc1]
    tc1' <- mkTrustProxy privateKey1 [tc0, tc1]
    requires "person"
      [ assignments pubKey mergePerson (claims tc1') == assignments pubKey mergePerson (claims tc0')
      , assignments pubKey mergePerson (claims tc0') == Right (Map.fromList [(privateToPublic privateKey0, myself), (privateToPublic privateKey1, myfriend)])
      ]
  ```
license-name: MIT
