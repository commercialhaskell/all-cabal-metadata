all-versions:
- '0.2'
- '0.3'
- 0.3.1.2
- 0.3.2
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
- 0.3.4
- 0.3.5
- 0.3.5.1
- 0.4.0
- 0.4.1
- 0.4.4
- 0.4.4.1
- 0.4.5
- 0.4.6
- 0.4.6.1
- 0.5.0.0
- 0.6.0.0
- 0.6.0.1
author: Alberto G. Corona
basic-deps:
  HTTP: '>=0'
  TCache: '>=0.12'
  aeson: '>=0'
  base: '>4 && <5'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  iproute: '>=0'
  mtl: '>=0'
  network: '>=2.8.0.0 && <3.0.0.0'
  network-info: '>=0'
  network-uri: '>=0'
  old-time: '>=0'
  process: '>=1.6.4.0'
  random: '>=0'
  stm: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  transient: '>=0.7.0.0'
  transient-universe: '>=0'
  vector: '>=0'
  websockets: '>=0.12.7.1'
changelog: ''
changelog-type: markdown
description: "![Universe logo](universe.png)\r\n=========\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/transient-universe.svg)](http://hackage.haskell.org/package/transient-universe)\r\n[![Stackage
  LTS](http://stackage.org/package/transient-universe/badge/lts)](http://stackage.org/lts/package/transient-universe)\r\n[![Stackage
  Nightly](http://stackage.org/package/transient-universe/badge/nightly)](http://stackage.org/nightly/package/transient-universe)\r\n[![Build
  Status](https://travis-ci.org/transient-haskell/transient-universe.png?branch=master)](https://travis-ci.org/transient-haskell/transient-universe)\r\n[![Gitter](https://badges.gitter.im/theam/haskell-do.svg)](https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link)\r\n\r\nSee
  the [Wiki](https://github.com/agocorona/transient/wiki)\r\n\r\ntransient-universe
  is the distributed computing extension of [transient](https://github.com/agocorona/transient)
  and uses transient primitives heavily for parsing, threading, event handling, exception
  handling, messaging etc.  It support moving computations between Haskell closures
  in different computers in the network. Even among different architectures:  Linux
  nodes can work with windows and browser nodes running haskell compiled with [ghcjs](https://github.com/ghcjs/ghcjs).\r\n\r\nThe
  primitives that perform the moving of computations are called `wormhole` and `teleport`,
  the names express the semantics. Hence the name of the package.\r\n\r\nAll the nodes
  run the same program compiled for different architectures. It defines a Cloud computation
  (monad). It is a thin layer on top of transient with additional primitives and services
  that run a single program in one or many nodes.\r\n\r\nExample:\r\n=======\r\n\r\n```haskell\r\nimport
  Transient.Base\r\nimport Transient.Move\r\nimport Control.Monad\r\n\r\nmain= keep
  . initNode $ inputNodes <|> mypPogram\r\n\r\nmyProgram :: Cloud ()\r\nmyProgram=
  do\r\n    nodes <- local getNodes\r\n    guard $ length nodes > 1\r\n    let node2=
  nodes !! 1\r\n    r <- runAt node2 . local $ waitEvents getLine\r\n    localIO $
  print r\r\n    \r\n```\r\n\r\nThis program will stream and print any text that you
  input in the console of the node 2.\r\n\r\nTo know how to initialize the nodes,
  see the section of the  [Tutorial](https://github.com/transient-haskell/transient/wiki/Transient-tutorial#command-line-input)\r\n\r\nBrowser
  integration\r\n==================\r\n\r\nBrowser nodes, running transient programs
  compiled with ghcjs are integrated with server nodes, using websockets for communication.
  Just compile the program with ghcjs and point the browser to http://server:port.
  The server nodes have a HTTP server that will send the compiled program to the browser.\r\n\r\nDistributed
  Browser/server Widgets\r\n-------\r\nBrowser nodes can integrate a reactive client
  side library based in trasient (package  [axiom](https://github.com/transient-haskell/axiom)).
  These widgets can create widgets with HTML form elements and control the server
  nodes. A computation can move from browser to server and back despite the different
  architecture.\r\n\r\nThis program will obtain a string from the browser, will send
  it to the server, which will return three responses wich will be presented in the
  browser:\r\n\r\n```haskell\r\nimport Transient.Base\r\nimport Transient.Move\r\nimport
  Transient.Indeterminism\r\nimport GHCJS.HPlay.View\r\n\r\nmain= keep . initNode
  $ myProgram\r\n\r\nmyProgram :: Cloud ()\r\nmyProgram=  do\r\n  name <- local .
  render $ getString Nothing `fire` OnChange\r\n  r <- atRemote . local . choose .
  take 3 . repeat $ \"hello \"++ name\r\n  local . render . rawHtml $ h1 r\r\n```\r\nSee
  the package Axiom for instructions about how to compile and run this program.\r\n\r\nWidgets
  with code running in browser and servers can compose with other widgets. A Browser
  node can gain access to many server nodes trough the  server that delivered the
  web application.\r\n\r\nThese features can make transient ideal for client as well
  as server side-driven applications, whenever distribution and push-driven reactivity
  is necessary either in the servers or in the browser clients.\r\n\r\nNew\r\n===\r\nThe
  last release add\r\n\r\n  - Hooks for secure communications: with [transient-universe-tls
  package](https://github.com/transient-haskell/transient-universe-tls), a node can
  use TLS to connect with other nodes, including web nodes. If the connection of a
  web node is initiated with \"https\" the websocket connection uses secure communications
  (wss). The only primitive added is `initTLS`.\r\n  - Client websocket connections
  to connect with nodes within firewalled servers: a server node can connect with
  another situated after a HTTP server. All the process is transparent and add no
  new primitive; First `connect` tries a TCP socket connection if it receives other
  message than \"OK\", it tries a connection as a websocket client. This is important
  for P2P connections where a central server acts as coordinator. websocket connections
  can use TLS communications too.\r\n  - No network traffic when a node invokes itself\r\n\r\nMap-reduce\r\n==========\r\ntransient-universe
  implements map-reduce in the style of [spark](http://spark.apache.org) as a particular
  case. It is at the same time a hard test of the distributed primitives since it
  involves a complex choreography of movement of computations. It supports in memory
  operations and caching. Resilience (restart from the last checkpoint in case of
  failure) is not implemented but it is foreseen.\r\n\r\nLook at [this article](https://www.schoolofhaskell.com/user/agocorona/estimation-of-using-distributed-computing-streaming-transient-effects-vi-1#distributed-datasets)\r\n\r\nThere
  is a runnable example: [DistrbDataSets.hs](https://github.com/agocorona/transient-universe/blob/master/examples/DistrbDataSets.hs)
  that you can executed with:\r\n\r\n> runghc ./examples/DistrbDataSets.hs\r\n\r\nIt
  uses a number of simulated nodes to calculate the frequency of words in a long text.\r\n\r\nServices\r\n========\r\nServices
  communicate two different transient applications. This allows to divide the running
  application in different independent tiers.   No documentation is available yet.
  Sorry.\r\n\r\nGeneral distributed primitives\r\n=============================\r\n`teleport`
  is a  primitive that translates computations back and forth reusing an already opened
  connection.\r\n\r\nThe connection is initiated by `wormhole`  with another node.
  This can be done anywhere in a computation without breaking composability. As always,
  Everything is composable.\r\n\r\nBoth primitives support also streaming among nodes
  in an efficient way. It means that a remote call can return not just a single response,
  but many of them.\r\n\r\nAll the other distributed primitives: `runAt`, `streamFrom`
  `clustered` etc are rewritten in terms of these two.\r\n\r\nHow to run the ghcjs
  example:\r\n=============================\r\n\r\nSee the  distributed examples in
  the [transient-examples](https://github.com/transient-haskell/transient) repository\r\n\r\nSee
  this [video](https://www.livecoding.tv/agocorona/videos/Ke1Qz-seamless-composable-web-programming)
  to see this example running:\r\n\r\nThe test program run among other things, two
  copies of a widget that start, stop and display a counter that run in the server.\r\n\r\nDocumentation\r\n=============\r\n\r\nThe
  [Wiki](https://github.com/agocorona/transient/wiki) is more user oriented\r\n\r\nMy
  video sessions in [livecoding.tv](https://www.livecoding.tv/agocorona/videos/) not
  intended as tutorials or presentations, but show some of the latest features running.\r\n\r\nThe
  articles are more technical:\r\n\r\n- [Philosophy, async, parallelism, thread control,
  events, Session state](https://www.fpcomplete.com/user/agocorona/EDSL-for-hard-working-IT-programmers?show=tutorials)\r\n-
  [Backtracking and undoing IO transactions](https://www.fpcomplete.com/user/agocorona/the-hardworking-programmer-ii-practical-backtracking-to-undo-actions?show=tutorials)\r\n-
  [Non-deterministic list like processing, multithreading](https://www.fpcomplete.com/user/agocorona/beautiful-parallel-non-determinism-transient-effects-iii?show=tutorials)\r\n-
  [Distributed computing](https://www.fpcomplete.com/user/agocorona/moving-haskell-processes-between-nodes-transient-effects-iv?show=tutorials)\r\n-
  [Publish-Subscribe variables](https://www.schoolofhaskell.com/user/agocorona/publish-subscribe-variables-transient-effects-v)\r\n-
  [Distributed streaming, map-reduce](https://www.schoolofhaskell.com/user/agocorona/estimation-of-using-distributed-computing-streaming-transient-effects-vi-1)\r\n\r\nThese
  articles contain executable examples (not now, since the site no longer support
  the execution of Haskell snippets).\r\n\r\n\r\n\r\nFuture plans\r\n============\r\nThe
  only way to improve it is using it. Please send me bugs and additional functionalities!\r\n\r\n-I
  plan to improve map-reduce to create a viable platform for serious data analysis
  and machine learning using haskell. It will have a  web notebook running in the
  browser.\r\n\r\n-Create services and examples for general Web applications with
  distributed servers and create services for them\r\n"
description-type: markdown
hash: 5b4739205cee4754999b74a1c8f1e039191b84a3026e47450f49ae7b4faf8d46
homepage: https://github.com/transient-haskell/transient-universe
latest: 0.6.0.1
license-name: MIT
maintainer: agocorona@gmail.com
synopsis: fully composable remote execution for the creation of distributed systems
test-bench-deps:
  HTTP: '>=0'
  TCache: '>=0.12'
  aeson: '>=0'
  base: '>4'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  mtl: '>=0'
  network: '>=2.8.0.0 && <3.0.0.0'
  network-info: '>=0'
  network-uri: '>=0'
  old-time: '>=0'
  process: '>=0'
  random: '>=0'
  stm: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  transient: '>=0.7.0.0'
  vector: '>=0'
  websockets: '>=0.12.7.1'
