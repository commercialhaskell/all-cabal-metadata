all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
author: Noah Luck Easterly
basic-deps:
  base: '>=4.10 && <4.17'
  containers: '>=0'
changelog: |
  # Revision history for tree-traversals

  ## 0.1.0.0  -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "The tree-traversals package defines [in-order, pre-order, post-order,
  level-order, and reversed level-order traversals](https://en.wikipedia.org/wiki/Tree_traversal#Types)
  for tree-like types:\n\n```haskell\ninorder, preorder, postorder, levelorder, rlevelorder\n
  \ :: (TreeLike tree, Applicative f) => (a -> f b) -> tree a -> f (tree b) \n```\n\nThe
  package also provides newtype wrappers for the various traversals so they\nmay be
  used with `traverse`, i.e.\n\n```haskell\ntraverse f (InOrder tree) = inorder f
  tree\ntraverse f (PreOrder tree) = preorder f tree\ntraverse f (PostOrder tree)
  = postorder f tree\ntraverse f (LevelOrder tree) = levelorder f tree\ntraverse f
  (RLevelOrder tree) = rlevelorder f tree\n```\n\nTo implement the various orders,
  the tree-traversals package provides the `Phases` applicative transformer for organizing
  effects into distinct phases.\n\nInstances of `TreeLike` are provided for rose trees
  (`Tree` from [`Data.Tree`](http://hackage.haskell.org/package/containers/docs/Data-Tree.html)),
  binary trees (`BinaryTree` from this package's `Data.BinaryTree`), forests (`Forest`
  from this package's `Data.Traversable.TreeLike`),\nand algebraic combinations of
  trees (`Compose outerTree innerTree`, `Product fstTree sndTree`, `Sum leftTree rightTree`).\n"
description-type: markdown
hash: 123f9714c42f1fc21ee80b3a6c5cdf4a573e77cb0e94fbfc9b445c829e1efaa7
homepage: https://github.com/rampion/tree-traversals
latest: 0.1.2.0
license-name: CC0-1.0
maintainer: noah.easterly@gmail.com
synopsis: Functions and newtype wrappers for traversing Trees
test-bench-deps:
  base: '>=4.10'
  containers: '>=0'
  doctest: '>=0.13'
  mtl: '>=2.2.1'
