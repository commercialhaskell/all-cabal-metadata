all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.8
- 0.1.0.9
- 0.1.1
- '0.3'
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.2.2
- 0.4.4
- 0.4.4.1
- 0.5.1
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.6
- 0.5.8
- 0.5.9
- 0.5.9.1
- 0.5.9.2
- 0.6.0.0
- 0.6.0.1
- 0.6.3
- 0.7.0.0
author: Alberto G. Corona
basic-deps:
  base: '>=4.8.0 && <5'
  bytestring: '>=0.10.6'
  containers: '>=0.5.6'
  directory: '>=1.2.2'
  mtl: '>=0'
  random: '>=0'
  stm: '>=0'
  time: '>=1.5'
  transformers: '>=0.4.2'
changelog: ''
changelog-type: markdown
description: "![Transient logo](https://github.com/transient-haskell/transient/raw/master/logo.png)\n=========\n\n[![Hackage](https://img.shields.io/hackage/v/transient.svg)](http://hackage.haskell.org/package/transient)\n[![Stackage
  LTS](http://stackage.org/package/transient/badge/lts)](http://stackage.org/lts/package/transient)\n[![Stackage
  Nightly](http://stackage.org/package/transient/badge/nightly)](http://stackage.org/nightly/package/transient)\n[![Build
  Status](https://api.travis-ci.org/transient-haskell/transient.png?branch=master)](https://travis-ci.org/transient-haskell/transient)\n[![Gitter](https://badges.gitter.im/theam/haskell-do.svg)](https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link)\n\n[![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://agocorona.github.io/donation.html)\n\nNOTE:
  distributed computing and web primitives Are in [transient-universe](https://github.com/transient-haskell/transient-universe)
  and [axiom](https://github.com/transient-haskell/axiom). Some examples at [transient-examples](https://github.com/transient-haskell/transient-examples)
  \n\n\n## Some feedback on `transient`:\n\n1. Rahul Muttineni @rahulmutt nov. 09
  2016 03:40  Lead developper of ETA (the JVM Haskell compiler)\n\n   *It's a bit
  mind bending in that it's like using a higher-level list monad, but it's very, very
  cool. For beginning Haskellers, what would be really useful is a visualisation of
  what happens when you do various distributed/parallel stuff.* **It's almost shocking
  how effortlessly you can run computations across threads/nodes.**\n\n   *The cool
  part is the composability in the distributed setting. *You can make higher-order
  monadic functions that allow you to compose & reuse a long chain of distributed
  transactions via `wormhole` and `teleport`*. Another benefit is that the transaction
  becomes first class and* **you can see exactly what's going on in one place** *instead
  of distributing the logic across actors making the code equivalent to event callbacks,
  as you've stated.*\n\n  https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?at=58228caa35e6cf054773303b\n\n##
  What is Transient?\n\nOne of the dreams of software engineering is unrestricted
  composability.\n\nThis may be put in these terms:\n\nlet `ap1` and `ap2` two applications
  with arbitrary complexity, with all effects including multiple threads, asynchronous
  IO, indeterminism, events and perhaps, distributed computing.\n\nThen the combinations:\n\n
  \    - ap1 <|> ap2          -- Alternative expression\n     - ap1 >>= \\x -> ap2
  \   -- monadic sequence\n     - ap1 <> ap2           -- monoidal expression\n     -
  (,) <$> ap1 <*> ap2  -- Applicative expression\n\nare possible if the types match,
  and generate new applications that are composable as well.\n\nTransient does exactly
  that.\n\nThe operators `<$>` `<*>` and `<>` express concurrency, the operator `<|>`
  express parallelism and `>>=` for sequencing of threads, distributed processes or
  web widgets. So even in the presence of these effects and others, everything is
  composable.\n\nFor this purpose transient is an extensible effects monad with all
  major effects and primitives for parallelism, events, asynchronous IO, early termination,
  non-determinism logging and distributed computing. Since it is possible to extend
  it with more effects without adding monad transformers, the composability is assured.\n\nMotivating
  example\n==================\nThis program, will stream \"hello world\"  from all
  the nodes connected if you enter \"fire\" in the console\n\n```Haskell\nmain= keep
  $ initNode $ inputNodes <|> distribStream\n\ndistribStream= do\n      local $ option
  \"fire\" \"fire\"\n      r <- clustered . local . choose $ repeat \"hello world\"\n
  \     localIO $ print r\n```\nRead the tutorial to know how to compile and invoke
  it.\n\nThis program will present a link in the browser and stream fibonnacci numbers
  to the browser when\nyo click it.  (if you have Docker, you can run it straigh from
  the console; See [this](https://github.com/transient-haskell/axiom#how-to-install--run-fast)\n\n```Haskell\nmain=
  keep . initNode $ webFib\n\nwebFib= onBrowser $ do\n    local . render $  wlink
  () (h1 \"hello fibonacci numbers\")\n\n    r <-  atRemote $ do\n                r
  <- local . threads 1 . choose $ take 10 fibs\n                localIO $ print r\n
  \               localIO $ threadDelay 1000000\n                return r\n\n    local
  . render . rawHtml $ (h2 r)\n    where\n    fibs = 0 : 1 : zipWith (+) fibs (tail
  fibs) :: [Int]\n```\n\nThis program combines both functionalities:\n\n```haskell\nmain=
  keep . initNode $ inputNodes <|> webFib <|> distribStream\n```\n\nDocumentation\n=============\n\nThe
  [Wiki](https://github.com/agocorona/transient/wiki) is more user oriented\n\nMy
  video sessions in [livecoding.tv](https://www.livecoding.tv/agocorona/videos/) not
  intended as tutorials or presentations, but show some of the latest features running.\n\nThe
  articles are more technical:\n\n- [Philosophy, async, parallelism, thread control,
  events, Session state](https://www.fpcomplete.com/user/agocorona/EDSL-for-hard-working-IT-programmers?show=tutorials)\n-
  [Backtracking and undoing IO transactions](https://www.fpcomplete.com/user/agocorona/the-hardworking-programmer-ii-practical-backtracking-to-undo-actions?show=tutorials)\n-
  [Non-deterministic list like processing, multithreading](https://www.fpcomplete.com/user/agocorona/beautiful-parallel-non-determinism-transient-effects-iii?show=tutorials)\n-
  [Distributed computing](https://www.fpcomplete.com/user/agocorona/moving-haskell-processes-between-nodes-transient-effects-iv?show=tutorials)\n-
  [Publish-Subscribe variables](https://www.schoolofhaskell.com/user/agocorona/publish-subscribe-variables-transient-effects-v)\n-
  [Distributed streaming, map-reduce](https://www.schoolofhaskell.com/user/agocorona/estimation-of-using-distributed-computing-streaming-transient-effects-vi-1)\n\nThese
  articles contain executable examples (not now, since the site no longer support
  the execution of haskell snippets).\n\n\nPlans\n=====\nOnce composability in the
  large is possible, there are a infinite quantity of ideas that may be realized.
  There are short term and long term goals. An status of development is regularly
  published in [![Gitter](https://badges.gitter.im/theam/haskell-do.svg)](https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link).
  \ \n\nAmong the most crazy ones is the possibility of extending this framework to
  other languages and make them interoperable. treating whole packaged applications
  as components, and docking them as lego pieces in a new layer of the Operating system
  where the shell allows such kind of type safe docking. this composable docker allows
  all kinds of composability, while the current docker platform is just a form of
  degraded monoid that do not compute.\n\nContribute:\n==========\nWanna contribute?
  Make sure that you've read our [contributor guidelines](https://github.com/transient-haskell/transient/blob/master/CONTRIBUTING.md).
  We'd like to hear from you and your ideas, get in touch with other contributors
  through:\n\n- [![Gitter](https://badges.gitter.im/theam/haskell-do.svg)](https://gitter.im/Transient-Transient-Universe-HPlay/Lobby?utm_source=share-link&utm_medium=link&utm_campaign=share-link)\n\n-
  [The issues page for transient](https://github.com/transient-haskell/transient/issues)
  \n- [The issues page for transient-universe](https://github.com/transient-haskell/transient-universe/issues)
  \n- [The issues page for axiom](https://github.com/transient-haskell/axiom/issues)
  \n\nOnce you learn something interesting, you can [contribute to the wiki](https://github.com/transient-haskell/transient/wiki)\n\n[You
  can also donate](https://agocorona.github.io/donation.html) to the lead developer
  in order to make possible the dedication of more time to fullfil the potential advantages
  of true software composability across the whole stack.\n\n"
description-type: markdown
hash: 2f558d07099aa0eb8965a51c5d56f42db17c7ba2aa775cba5acd8a6f349f4aba
homepage: https://github.com/transient-haskell/transient
latest: 0.7.0.0
license-name: MIT
maintainer: agocorona@gmail.com
synopsis: composing programs with multithreading, events and distributed computing
test-bench-deps:
  base: '>=4.8.1 && <5'
  bytestring: '>=0.10.6'
  containers: '>=0.5.6'
  directory: '>=1.2.2'
  mtl: '>=0'
  random: ==1.1
  stm: '>=0'
  time: '>=1.5'
  transformers: '>=0.4.2'
