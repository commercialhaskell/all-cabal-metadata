homepage: ''
changelog-type: text
hash: 78e095435869cd97dc304b7667eda3fbb5d54e2722fb0ea17fe30a6fa84c6648
test-bench-deps: {}
maintainer: Ross Paterson <R.Paterson@city.ac.uk>
synopsis: Concrete functor and monad transformers
changelog: "-*-change-log-*-\n\n0.6.0.4 Ross Paterson <R.Paterson@city.ac.uk> Feb
  2022\n\t* Restrict deriving (Generic) to GHC >= 7.4\n\n0.6.0.3 Ross Paterson <R.Paterson@city.ac.uk>
  Feb 2022\n\t* Restrict MonadTrans constraint to GHC >= 8.8\n\n0.6.0.2 Ross Paterson
  <R.Paterson@city.ac.uk> Jul 2021\n\t* Further backward compatability fix\n\n0.6.0.1
  Ross Paterson <R.Paterson@city.ac.uk> Jul 2021\n\t* Backward compatability fixes\n\n0.6.0.0
  Ross Paterson <R.Paterson@city.ac.uk> Jul 2021\n\t* Added quantified constraint
  to MonadTrans (for GHC >= 8.6)\n\t* Added Generic and Data instances\n\t* Added
  handleE, tryE and finallyE to Control.Monad.Trans.Except\n\t* Added hoistMaybe to
  Control.Monad.Trans.Maybe\n\t* Added Generic and Data instances\n\t* Added pass-throughs
  to instances for Backwards\n\t* Made Lift's <*> lazier\n\t* Remove long-deprecated
  selectToCont\n\t* Remove long-deprecated Control.Monad.Trans.Error\n\t* Remove long-deprecated
  Control.Monad.Trans.List\n\n0.5.6.2 Ross Paterson <R.Paterson@city.ac.uk> Feb 2019\n\t*
  Further backward compatability fix\n\n0.5.6.1 Ross Paterson <R.Paterson@city.ac.uk>
  Feb 2019\n\t* Backward compatability fix for MonadFix ListT instance\n\n0.5.6.0
  Ross Paterson <R.Paterson@city.ac.uk> Feb 2019\n\t* Generalized type of except\n\t*
  Added Control.Monad.Trans.Writer.CPS and Control.Monad.Trans.RWS.CPS\n\t* Added
  Contravariant instances\n\t* Added MonadFix instance for ListT\n\n0.5.5.0 Ross Paterson
  <R.Paterson@city.ac.uk> Oct 2017\n\t* Added mapSelect and mapSelectT\n\t* Renamed
  selectToCont to selectToContT for consistency\n\t* Defined explicit method definitions
  to fix space leaks\n\t* Added missing Semigroup instance to `Constant` functor\n\n0.5.4.0
  Ross Paterson <R.Paterson@city.ac.uk> Feb 2017\n\t* Migrate Bifoldable and Bitraversable
  instances for Constant\n\n0.5.3.1 Ross Paterson <R.Paterson@city.ac.uk> Feb 2017\n\t*
  Fixed for pre-AMP environments\n\n0.5.3.0 Ross Paterson <R.Paterson@city.ac.uk>
  Feb 2017\n\t* Added AccumT and SelectT monad transformers\n\t* Deprecated ListT\n\t*
  Added Monad (and related) instances for Reverse\n\t* Added elimLift and eitherToErrors\n\t*
  Added specialized definitions of several methods for efficiency\n\t* Removed specialized
  definition of sequenceA for Reverse\n\t* Backported Eq1/Ord1/Read1/Show1 instances
  for Proxy\n\n0.5.2.0 Ross Paterson <R.Paterson@city.ac.uk> Feb 2016\n\t* Re-added
  orphan instances for Either to deprecated module\n\t* Added lots of INLINE pragmas\n\n0.5.1.0
  Ross Paterson <R.Paterson@city.ac.uk> Jan 2016\n\t* Bump minor version number, required
  by added instances\n\n0.5.0.2 Ross Paterson <R.Paterson@city.ac.uk> Jan 2016\n\t*
  Backported extra instances for Identity\n\n0.5.0.1 Ross Paterson <R.Paterson@city.ac.uk>
  Jan 2016\n\t* Tightened GHC bounds for PolyKinds and DeriveDataTypeable\n\n0.5.0.0
  Ross Paterson <R.Paterson@city.ac.uk> Dec 2015\n\t* Control.Monad.IO.Class in base
  for GHC >= 8.0\n\t* Data.Functor.{Classes,Compose,Product,Sum} in base for GHC >=
  8.0\n\t* Added PolyKinds for GHC >= 7.4\n\t* Added instances of base classes MonadZip
  and MonadFail\n\t* Changed liftings of Prelude classes to use explicit dictionaries\n\n0.4.3.0
  Ross Paterson <R.Paterson@city.ac.uk> Mar 2015\n\t* Added Eq1, Ord1, Show1 and Read1
  instances for Const\n\n0.4.2.0 Ross Paterson <ross@soi.city.ac.uk> Nov 2014\n\t*
  Dropped compatibility with base-1.x\n\t* Data.Functor.Identity in base for GHC >=
  7.10\n\t* Added mapLift and runErrors to Control.Applicative.Lift\n\t* Added AutoDeriveTypeable
  for GHC >= 7.10\n\t* Expanded messages from mfix on ExceptT and MaybeT\n\n0.4.1.0
  Ross Paterson <ross@soi.city.ac.uk> May 2014\n\t* Reverted to record syntax for
  newtypes until next major release\n\n0.4.0.0 Ross Paterson <ross@soi.city.ac.uk>
  May 2014\n\t* Added Sum type\n\t* Added modify', a strict version of modify, to
  the state monads\n\t* Added ExceptT and deprecated ErrorT\n\t* Added infixr 9 `Compose`
  to match (.)\n\t* Added Eq, Ord, Read and Show instances where possible\n\t* Replaced
  record syntax for newtypes with separate inverse functions\n\t* Added delimited
  continuation functions to ContT\n\t* Added instance Alternative IO to ErrorT\n\t*
  Handled disappearance of Control.Monad.Instances\n\n0.3.0.0 Ross Paterson <ross@soi.city.ac.uk>
  Mar 2012\n\t* Added type synonyms for signatures of complex operations\n\t* Generalized
  state, reader and writer constructor functions\n\t* Added Lift, Backwards/Reverse\n\t*
  Added MonadFix instances for IdentityT and MaybeT\n\t* Added Foldable and Traversable
  instances\n\t* Added Monad instances for Product\n\n0.2.2.1 Ross Paterson <ross@soi.city.ac.uk>
  Oct 2013\n\t* Backport of fix for disappearance of Control.Monad.Instances\n\n0.2.2.0
  Ross Paterson <ross@soi.city.ac.uk> Sep 2010\n\t* Handled move of Either instances
  to base package\n\n0.2.1.0 Ross Paterson <ross@soi.city.ac.uk> Apr 2010\n\t* Added
  Alternative instance for Compose\n\t* Added Data.Functor.Product\n\n0.2.0.0 Ross
  Paterson <ross@soi.city.ac.uk> Mar 2010\n\t* Added Constant and Compose\n\t* Renamed
  modules to avoid clash with mtl\n\t* Removed Monad constraint from Monad instance
  for ContT\n\n0.1.4.0 Ross Paterson <ross@soi.city.ac.uk> Mar 2009\n\t* Adjusted
  lifting of Identity and Maybe transformers\n\n0.1.3.0 Ross Paterson <ross@soi.city.ac.uk>
  Mar 2009\n\t* Added IdentityT transformer\n\t* Added Applicative and Alternative
  instances for (Either e)\n\n0.1.1.0 Ross Paterson <ross@soi.city.ac.uk> Jan 2009\n\t*
  Made all Functor instances assume Functor\n\n0.1.0.1 Ross Paterson <ross@soi.city.ac.uk>
  Jan 2009\n\t* Adjusted dependencies\n\n0.1.0.0 Ross Paterson <ross@soi.city.ac.uk>
  Jan 2009\n\t* Two versions of lifting of callcc through StateT\n\t* Added Applicative
  instances\n\n0.0.1.0 Ross Paterson <ross@soi.city.ac.uk> Jan 2009\n\t* Added constructors
  state, etc for simple monads\n\n0.0.0.0 Ross Paterson <ross@soi.city.ac.uk> Jan
  2009\n\t* Split Haskell 98 transformers from the mtl\n"
basic-deps:
  base: '>=4.13 && <6'
all-versions:
- 0.0.0.0
- 0.0.1.0
- 0.1.0.1
- 0.1.1.0
- 0.1.3.0
- 0.1.4.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.1
- 0.3.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.5.0.0
- 0.5.0.1
- 0.5.1.0
- 0.5.2.0
- 0.5.4.0
- 0.5.5.0
- 0.5.5.2
- 0.5.6.2
- 0.6.0.2
- 0.6.0.3
- 0.6.0.4
author: Andy Gill, Ross Paterson
latest: 0.6.0.4
description-type: haddock
description: |-
  A portable library of functor and monad transformers, inspired by
  the paper

  * \"Functional Programming with Overloading and Higher-Order
  Polymorphism\", by Mark P Jones,
  in /Advanced School of Functional Programming/, 1995
  (<http://web.cecs.pdx.edu/~mpj/pubs/springschool.html>).

  This package contains:

  * the monad transformer class (in "Control.Monad.Trans.Class")

  * concrete functor and monad transformers, each with associated
  operations and functions to lift operations associated with other
  transformers.

  The package can be used on its own in portable Haskell code, in
  which case operations need to be manually lifted through transformer
  stacks (see "Control.Monad.Trans.Class" for some examples).
  Alternatively, it can be used with the non-portable monad classes in
  the @mtl@ or @monads-tf@ packages, which automatically lift operations
  introduced by monad transformers through other transformers.
license-name: BSD-3-Clause
