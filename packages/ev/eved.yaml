homepage: https://github.com/foxhound-systems/eved#readme
changelog-type: ''
hash: a66b73d4c8dc01e1efdeb349047f0e5e3a9f7643b621a3b86a2a8cf3664b0ffb
test-bench-deps: {}
maintainer: ben@foxhound.systems
synopsis: A value level web framework
changelog: ''
basic-deps:
  http-client: '>=0.5.14 && <0.7'
  bytestring: '>=0.10.8.2 && <0.11'
  wai: '>=3.2.1.2 && <3.3'
  case-insensitive: '>=1.2.0.20 && <1.3'
  base: '>=4.7 && <5'
  text: '>=1.2.3.1 && <1.3'
  http-api-data: '>=0.3.8.1 && <0.5'
  mtl: '>=2.2.2 && <2.3'
  http-types: '>=0.12.2 && <0.13'
  aeson: '>=1.3.1.1 && <1.6'
  http-media: '>=0.7.1.3 && <0.9'
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.2.0
- 0.0.2.1
- 0.0.3.0
author: Ben Levy
latest: 0.0.3.0
description-type: markdown
description: "# Eved - A Value Level Servant Replacement\n\nEved is an API definition
  eDSL in the spirit of [Servant](https://hackage.haskell.org/package/servant). \nThe
  main difference from Servant is that Eved is a value level API, whereas Servant
  relies very heavily on fancy type level programming. \n\nEved is highly extensible
  (both in terms of implementations and new terms) thanks to its utilization of the
  so called `final tagless` encoding.\n\n## Example\n\n### Api Definition\n\n```haskell\nimport
  \          Data.Text              (Text)\nimport           Web.Eved\nimport qualified
  Web.Eved.ContentType   as CT\nimport qualified Web.Eved.QueryParam    as QP\nimport
  qualified Web.Eved.UrlElement    as UE\n\ntype Api m =\n       (Integer -> Integer
  -> m Integer)\n  :<|> (Text    -> Integer -> m Integer)\n  :<|> (Text    -> Integer
  -> m Integer)\n\napi :: Eved api m => api (Api m)\napi =\n      (lit \"v1\" .</>
  capture \"captureNum\" UE.integer .</> queryParam \"arg1\" QP.integer .</> get [CT.json
  @Integer])\n .<|> (lit \"v1\" .</> capture \"captureText\" UE.text .</> reqBody
  [CT.json @Integer] .</> post [CT.json @Integer])\n .<|> (lit \"v2\" .</> capture
  \"captureText\" UE.text .</> queryParam \"arg1\" QP.integer .</> get [CT.json @Integer])\n```\n\n###
  Client\n\n```haskell\nimport           Web.Eved.Client\n\nv1CaptureNum :<|> v1CaptureText
  :<|> v2CaptureText = getClient api \"http://localhost:3000\"\n```\n\n### Server\n\n```haskell\nimport
  \          Control.Monad.IO.Class\nimport           Control.Monad.Reader\nimport
  \          Web.Eved.Server\nimport           Network.Wai.Handler.Warp\n\nserve ::
  IO ()\nserve = run 3000 $ server (`runReaderT` (Env 100)) handlers api\n\ndata Env
  = Env\n    { envSecret :: Integer\n    }\n\nhandlers :: (MonadIO m, MonadReader
  Env m) => Api m\nhandlers =   (\\a b -> pure $ a + b)\n        :<|> (\\_ i -> fmap
  ((+) i) (asks envSecret))\n        :<|> (\\_ i -> pure i)\n\n```\n\n## Prior Art\n\nTODO\n\n##
  How to extend the language\n\nTODO\n"
license-name: BSD-3-Clause
