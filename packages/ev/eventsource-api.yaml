all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.1.0
- 1.1.1
- 1.2.0
- 1.3.0
- 1.3.1
- 1.5.0
- 1.5.1
author: Yorick Laupa
basic-deps:
  aeson: '>=0'
  base: '>=4.9 && <5'
  bytestring: '>=0'
  containers: '>=0'
  enclosed-exceptions: '>=0'
  lifted-async: '>=0'
  lifted-base: '>=0'
  monad-control: '>=0'
  monad-loops: '>=0.4 && <0.5'
  mtl: '>=0'
  stm: '>=0'
  stm-chans: '>=0'
  streaming: '>=0'
  string-conversions: '>=0'
  text: '>=0'
  transformers-base: '>=0'
  unordered-containers: '>=0'
  uuid: '>=0'
changelog: |
  1.5.1
  =====
    * Add dedicated `LinkEvent` type.

  1.5.0
  =====
    * Introduce a streaming interface.
    * Remove aggregate interface.

  1.3.1
  =====
    * Fix GHC 8.4 build.

  1.3.0
  =====
    * Move `EventNumber` to `Int64`.

  1.2.0
  =====
    * Introduce Aggregate API.

  1.1.1
  =====
    * Fix GHC 8.2.1 and Stackage LTS-9 build.

  1.1.0
  =====
    * Add `linkEvent` to `SavedEvent`.

  1.0.2
  =====
    * Implement essential typesclasses

  1.0.1
  =====
    * Add `forSavedEvents`
    * Add `foldSavedEventsM`
    * Add `foldSavedEvents`
    * Add `foldSubSaved`
    * Add `foldSubSavedAsync`
    * Expose `ForEventFailure(..)`
changelog-type: markdown
description: |
  # eventsource-api

  This project provides what we think be a lean eventsourcing API. The goal is to
  set a common ground for eventsourcing-based application, yet doesn't force you
  to be trapped under a restrictive framework.

  This library main abstraction is the `Store` typeclass.

  ```haskell
  -- | Main event store abstraction. It exposes essential features expected from
  --   an event store.
  class Store store where
    -- | Appends a batch of events at the end of a stream.
    appendEvents :: (EncodeEvent a, MonadBase IO m)
                 => store
                 -> StreamName
                 -> ExpectedVersion
                 -> [a]
                 -> m (Async EventNumber)

    -- | Reads a stream in a stream-processing fashion.
    readStream :: MonadBase IO m
               => store
               -> StreamName
               -> Batch
               -> Stream (Of SavedEvent) (ExceptT ReadFailure m) ()

    -- | Subscribes to given stream.
    subscribe :: MonadBase IO m => store -> StreamName -> m Subscription


  ```

  The idea is to use any backend of your liking as long as it's able to derive that typeclass with its related implicit constraints.

    1. `appendEvents` MUST add events at the end of a stream without doing any other alteration on the stream. The order of the event's array MUST be respected within the store. Most important, the implementation MUST comply to the given `ExpectedVersion` passed by the user.

    2. `readStream` SHOULD retrieve a set of event given a starting position and a batch size (represented by the `Batch` parameter). The returned array MUST have its events ordered by their `EventNumber` property.

    3. `subscribe` SHOULD register a subscription to the given stream. An implementation MUST allow to subscribe to a stream that doesn't exist yet. A subscription allows the user to be notified of any event added to the stream. There is no mandatory timing to meet regarding how fast the subscription is notified by a change. We only suggest to dispatch new events as soon as possible.

  #### `ExpectedVersion`

  A word on `ExpectedVersion`. It's a mean to preserve data consistency in a concurrent setting.

  ```haskell
  -- | The purpose of 'ExpectedVersion' is to make sure a certain stream state is
  --   at an expected point in order to carry out a write.
  data ExpectedVersion
    = AnyVersion
      -- Stream is a any given state.
    | NoStream
      -- Stream shouldn't exist.
    | StreamExists
      -- Stream should exist.
    | ExactVersion EventNumber
      -- Stream should be at givent event number.
  ```

  On a write, if the `ExpectedVersion` condition given by the user is not met within the store, the implementation should raise an exception. At the moment, the API doesn't capture this situation in the type system.
description-type: markdown
hash: 04f592509221117c11fcf718fa94ea0d560fbe1ad5b31c2acd9012e37a88f376
homepage: https://gitlab.com/YoEight/eventsource-api-hs
latest: 1.5.1
license-name: BSD-3-Clause
maintainer: yo.eight@gmail.com
synopsis: Provides an eventsourcing high level API.
test-bench-deps: {}
