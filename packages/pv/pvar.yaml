all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 1.0.0.0
author: Alexey Kuleshevich
basic-deps:
  base: '>=4.9 && <6'
  deepseq: '>=0'
  primitive: '>=0.7.1.0'
changelog: |
  # Changelog for pvar

  ## 1.0.0.0

  * Switch to `MonadPrim` type classes that was introduced in `primitive-0.7.1.0`
  * Fix definition `PVar m a` -> `PVar a s`. Parametrization on a monad is not general
    enough for some cases and making state token `s` last allows to use it with `forall`
    easier.
  * Relax monad in conversion to ForeignPtr

  ## 0.2.0.0

  * Rename `modifyPVar` to `fetchModifyPVar` and `modifyPVarM` to `fetchModifyPVarM`. This
    is a breaking change in favor of consistency with other librarries.
  * New implementation for `modifyPVar` and `modifyPVarM` that can return some artifact.
  * Addition of `modifyFetchPVar` and `modifyFetchPVarM`
  * Addition of `atomicModifyFetchIntPVar` and `atomicFetchModifyIntPVar`

  ## 0.1.1.0

  * Addition of backwards compatible:
    * `isByteArrayPinned`, `isMutableByteArrayPinned` (that work on ghc-7.10 and ghc-8.0)
    * Primitive versions `isByteArrayPinned#`, `isMutableByteArrayPinned#`
  * Support for GHC 7.10 and GHC 8.0
  * Re-export `sizeOf` and `alignment` for easier compatibility with older primitive versions.


  ## 0.1.0.0

  * Initial release
changelog-type: markdown
description: |
  # pvar

  Interface for a mutable variable `PVar` that can hold values that have `Prim` instance.

  ## Status

  | Language | Travis | Azure | Coveralls |
  |:--------:|:------:|:-----:|:---------:|
  | ![GitHub top language](https://img.shields.io/github/languages/top/lehins/pvar.svg) | [![Travis](https://img.shields.io/travis/lehins/pvar/master.svg?label=Linux%20%26%20OS%20X)](https://travis-ci.org/lehins/pvar) | [![Build Status](https://dev.azure.com/kuleshevich/pvar/_apis/build/status/lehins.pvar?branchName=master)](https://dev.azure.com/kuleshevich/pvar/_build/latest?definitionId=1?branchName=master) | [![Coverage Status](https://coveralls.io/repos/github/lehins/pvar/badge.svg?branch=master)](https://coveralls.io/github/lehins/pvar?branch=master)

  |      Package       | Hackage | Nightly | LTS |
  |:-------------------|:-------:|:-------:|:---:|
  |  [`pvar`](https://github.com/lehins/pvar)| [![Hackage](https://img.shields.io/hackage/v/pvar.svg)](https://hackage.haskell.org/package/pvar)| [![Nightly](https://www.stackage.org/package/pvar/badge/nightly)](https://www.stackage.org/nightly/package/pvar)| [![Nightly](https://www.stackage.org/package/pvar/badge/lts)](https://www.stackage.org/lts/package/pvar)

  # Overview

  Main features include:

  * Performance. There is practically no overhead when compared to operating on pure values,
    although there is a higher memory overhead, since `PVar` is backed by a
    `MutableByteArray#`
  * Atomic operations for `PVar`s with `Int` values. This includes a unique function that is
    not available in `ghc-prim` out of the box:

  ```haskell
  atomicModifyIntPVar :: PrimMonad m => PVar m Int -> (Int -> (Int, a)) -> m a
  ```

  * Works in `PrimMonad`, therefore it is usable with `ST`, `IO` and various transformer monads.
  * Easy access to `PVar` contents with `Storable`
  * `isByteArrayPinned`, `isMutableByteArrayPinned` function that work on ghc-7.10 and
    ghc-8.0 as well as all the newer ones.
description-type: markdown
hash: 3d4a6855b0960baee78f6956f082eb8aa1cede52d2955b7faef186d1133f7964
homepage: https://github.com/lehins/pvar#readme
latest: 1.0.0.0
license-name: BSD-3-Clause
maintainer: alexey@kuleshevi.ch
synopsis: Mutable variable with primitive values
test-bench-deps:
  QuickCheck: '>=0'
  async: '>=0'
  base: '>=4.7 && <5'
  deepseq: '>=0'
  genvalidity: '>=0'
  hspec: '>=0'
  primitive: '>=0'
  pvar: '>=0'
