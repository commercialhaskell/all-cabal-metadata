all-versions:
- '1.0'
- 1.0.1
- 1.0.3
author: Lyle Kopnicky
basic-deps:
  HUnit: '>=1.2'
  array: '>=0.1'
  base: '>=4.9 && <5'
  directory: '>=1'
  filepath: '>=1.1'
  hashable: '>=1.2'
  hashtables: '>=1.2'
  mtl: '>=1.1'
  parsec: '>=2.1'
  process: '>=1'
  random: '>=1'
  regex-base: '>=0.72'
  regex-posix: '>=0.72'
  time: '>=1.1'
changelog: ''
changelog-type: ''
description: "To compile:\r\n\r\ncabal configure\r\ncabal build\r\n\r\n...or with
  stack:\r\n\r\nstack build\r\n\r\nTo run unit tests:\r\n\r\ncabal test\r\n\r\n..or
  with stack:\r\n\r\nstack test\r\n\r\nTo install:\r\n\r\ncabal install\r\n\r\n...or
  with stack:\r\n\r\nstack install\r\n\r\nYou can then run the resulting program as\r\n\r\n
  \ vintbas [<.bas source file> ...]\r\n\r\nThe monad transformer I created is CPST.
  \ Monad\r\ntransformers are basically monad building-blocks.  You\r\nstart with
  the identity monad and stack monad\r\ntransformers on top of it to build a combined
  monad.\r\nThe ordering is very important.  There are monad\r\ntransformers in the
  Control.Monad.Trans library,\r\nso I used them.  Unfortunately you can't stack any\r\nmore
  monad transformers on top of CPST.  It has to be on\r\ntop, because of the type
  of the shift morphism.  The\r\nstandard ContT transformer is similar to my CPST,
  but\r\ndefines callCC, not shift.  Take a look at the type\r\nof callCC in my code.
  \ Notice every time you see a\r\nCPST, it is followed by an o.  Notice that every\r\nother
  morphism in CPST has the same property, except\r\nshift.  That is the key to why
  it's no longer stackable -\r\nmonad transformers can take only two type parameters,
  not\r\nthree.  But I like shift and think it's neat that I\r\ncan define callCC
  in terms of it and reset, but not\r\nvice-versa.  So there.  Plus, my shift and
  callCC are\r\nrank-3 polymorphic!  Nobody else achieves that flexibility.\r\n\r\nOther
  things we could do:\r\n* Pre-check types\r\n* Pre-check labels, generate code in
  place of labels\r\n* Convert variable references to IORefs\r\n  Is it easiest to
  do these with staging?\r\n* Consider sending errors to stderr.\r\n* On syntax error,
  consider printing line with marked error.\r\n"
description-type: text
hash: 8ddd99b47d5731b15b109c56b0a4711efc3c08a3c756888775cf34fb35c4ceba
homepage: http://www.vintage-basic.net
latest: 1.0.3
license-name: BSD-3-Clause
maintainer: lyle@vintage-basic.net
synopsis: Interpreter for microcomputer-era BASIC
test-bench-deps:
  base: '>=0'
