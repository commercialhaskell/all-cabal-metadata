all-versions:
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
author: Tom Murphy
basic-deps:
  base: '>3 && <5'
  bytestring: '>=0'
  cereal: '>=0'
  time: '>=1.2'
changelog: ''
changelog-type: ''
description: |-
  Small, simple, and well-tested implementation of the Open Sound Control
  message format.

  Example usage:

  >>> :set -XOverloadedStrings
  >>> msg = OSC "/foo" [OSC_S "bar", OSC_I 9, OSC_F 0.1, OSC_B "this-is-binary"]
  >>> :t msg
  > msg :: OSC
  >>> :t encodeOSC msg
  > encodeOSC msg :: ByteString
  >>> decodeOSC (encodeOSC msg) == Right msg
  > True

  Sending it over UDP (e.g. to TidalCycles), using the 'network' package:

  @
  &#123;&#45;\# LANGUAGE OverloadedStrings \#&#45;&#125;
  @

  > import Network.Socket
  > import Network.Socket.ByteString as SB
  >
  > import Vivid.OSC
  >
  > main = do
  >    -- Boring Network.Socket setup:
  >    (a:_) <- getAddrInfo Nothing (Just "127.0.0.1") (Just "57120")
  >    s <- socket (addrFamily a) Datagram defaultProtocol
  >    connect s (addrAddress a)
  >
  >    -- The interesting part:
  >    SB.send s $ encodeOSC $
  >       OSC "/play2" [OSC_S "cps", OSC_F 1.2, OSC_S "s", OSC_S "bd"]
description-type: haddock
hash: 633e5c1c87633feaa26019442c3ae63946001c7afe2afa4d2cf22586bd4b182c
homepage: ''
latest: 0.5.0.0
license-name: LicenseRef-GPL
maintainer: Tom Murphy
synopsis: Open Sound Control encode/decode
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  cereal: '>=0'
  microspec: '>=0'
  time: '>=0'
  vivid-osc: '>=0'
