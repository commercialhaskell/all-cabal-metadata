all-versions:
- 0.1.0.0
author: Gagandeep Bhatia
basic-deps:
  base: '>=4.7 && <5'
  generics-sop: '>=0.3.2'
  records-sop: '>=0.1.0.2'
  vinyl: '>=0.10'
changelog: |
  # 0.1.0.0

  Initial version pushed to hackage.
changelog-type: markdown
description: "# vinyl-generics\n\n[![Build Status](https://travis-ci.org/VinylRecords/vinyl-generics.png)](https://travis-ci.org/VinylRecords/vinyl-generics)\n\nConvert
  plain Haskell records to [vinyl](https://hackage.haskell.org/package/vinyl) and
  vice versa, via `GHC.Generics` and `generics-sop`/`records-sop`.\n\n## Potential
  Use Cases\n* Reading an external data source (database query, results of API requests
  etc.) as a list of plain Haskell records and converting it to a list of `vinyl`
  records (for subsequent conversion to an in-memory [data-frame](https://hackage.haskell.org/package/Frames)).\n*
  Serializing a `Frame`/list of `vinyl` records to JSON.\n* Adding/removing fields
  from a plain record using `vinyl` as an intermediate representation.\n\n## Usage\nConsider
  the following example module: \n\n```haskell \n{-# LANGUAGE DataKinds             #-}\n{-#
  LANGUAGE DeriveGeneric         #-}\n{-# LANGUAGE DuplicateRecordFields #-}\n{-#
  LANGUAGE OverloadedStrings     #-}\n{-# LANGUAGE StandaloneDeriving    #-}\n{-#
  LANGUAGE TypeApplications      #-}\n{-# LANGUAGE TypeOperators         #-}\nmodule
  Example where\n\nimport           Data.Aeson\nimport           Data.Text\nimport
  \          Data.Vinyl\nimport           Data.Vinyl.Generics.Transform (fromVinyl,
  toVinyl)\nimport qualified Generics.SOP                  as S\nimport qualified
  GHC.Generics                  as G\n\ndata MyPlainRecord = MPR {\n  age      ::
  Int,\n  iscool   :: Bool,\n  yearbook :: Text\n} deriving (Show, G.Generic)\n\ninstance
  S.Generic MyPlainRecord\ninstance S.HasDatatypeInfo MyPlainRecord\n\ndata MyType
  = \n  MyType { \n    bike :: Bool\n  , skateboard :: Bool \n  } deriving (Show,
  G.Generic)\n\ndata MyPlainRecord2 = MPR2 {\n  age      :: Int,\n  iscool   :: Bool,\n
  \ yearbook :: Text,\n  hobbies  :: MyType\n} deriving (Show, G.Generic)\n\ninstance
  S.Generic MyPlainRecord2\ninstance S.HasDatatypeInfo MyPlainRecord2\n\n```\n\nIn
  the above, let `MyPlainRecord` be the format in which data is being read from an
  external source. We also read some additional data `additionalFields` (say from
  a CSV using `Frames`): \n\n```haskell\n-- some mock data\nr1 :: MyPlainRecord\nr1
  = MPR { age = 23, iscool = True, yearbook = \"!123!\"}\n\nadditionalFields :: Rec
  ElField '[(\"age\" ::: Int), (\"hobbies\" ::: MyType)]\nadditionalFields = xrec
  (23, MyType { bike = True, skateboard = True})\n```\n\n\nWe'd like to add the field
  `hobbies :: MyType` to one such record (` ::  MyPlainRecord`), and want to have
  a record of type `MyPlainRecord2`. We can accomplish this by first isolating the
  field:\n```haskell\ngetHobbies :: Rec ElField '[(\"age\" ::: Int), (\"hobbies\"
  ::: MyType)] \n             -> Rec ElField '[(\"hobbies\" ::: MyType)]\ngetHobbies
  = rcast\n```\n\n...and then appending it to the `vinyl` representation of the plain
  record:\n\n```haskell\ngo :: MyPlainRecord2\ngo = fromVinyl $ (toVinyl r1) `rappend`
  (getHobbies additionalFields)\n```\n\nThat's all there is to it. Once we have our
  vinyl record in plain record form, it is straightforward to serialize it to JSON:
  \n\n```haskell\ninstance ToJSON MyPlainRecord2\ninstance ToJSON MyType\n```\n\nHave
  a look at `test/LibSpec.hs` for more usage examples.\n\n## Known Limitations\nThis
  library, in its current form, works only with `vinyl` records with type-level field
  names (i.e. use the `ElField` interpretation functor).\nFuture versions hope to
  tackle records with anonymous fields (e.g. heterogenous lists making use of the
  `Identity` functor) as well.\n\n"
description-type: markdown
hash: 2b4080514291dbe0be4ab01788d3c32731a4e7d8bd6a083c273a088a6bfd9ad6
homepage: https://github.com/VinylRecords/vinyl-generics
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: gagandeepbhatia.in@gmail.com
synopsis: Convert plain records to vinyl (and vice versa), generically.
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=0'
  generics-sop: '>=0'
  hspec: '>=0'
  hspec-core: '>=2.4.8'
  records-sop: '>=0'
  text: '>=0'
  vinyl: '>=0'
  vinyl-generics: '>=0'
