all-versions:
- 0.1.0.0
author: Mario Roman
basic-deps:
  base: ^>=4.12.0.0
  mtl: ^>=2.2.2
  profunctors: '>=0'
changelog: ''
changelog-type: ''
description: "* vitrea\n\nPure profunctor lenses and optics via the /profunctor representation
  theorem/. You can read more about\nthis representation in the following articles.\n\n
  * [[https://bartoszmilewski.com/2017/07/07/profunctor-optics-the-categorical-view/][\"Profunctor
  optics: the categorical view\"]], Milewski (2017).\n * [[https://www.cs.ox.ac.uk/jeremy.gibbons/publications/proyo.pdf][\"What
  you needa know about Yoneda\"]], Boisseau, Gibbons (2018).\n * [[https://arxiv.org/abs/1809.00738][\"Categories
  of optics\"]], Riley (2018).\n * [[https://arxiv.org/abs/2001.07488][\"Profunctor
  optics: a categorical update\"]], Clarke, Elkins, Gibbons, Loregian, Milewski, Pillmore,
  Román (2019).\n \nAll the optics on this library are particular cases of a single
  unified definition. All the combinators on this library are instantiations of the
  profunctor optic to a particular Tambara module.\n\nThe usual notions of lawfulness
  (as in [[https://arxiv.org/abs/1809.00738][\"Categories of optics\"]]) apply to
  non-mixed optics (lenses, prisms, traversals...). However, there is not a consensus
  on what the natural notion of laws for a mixed optic should be, apart from specific
  cases like monadic lenses.\n \n\n** Examples\n\nThe library follows, where possible,
  the style of combinators of the [[https://github.com/ekmett/lens/wiki/operators][lens
  library]].  Example code from [[https://arxiv.org/abs/2001.07488][\"Profunctor optics:
  a categorical update\"]] works directly under the library. \n\n*Example 1. (Lenses
  and prisms)* The composition of a prism (~address~) and a lens (~street~)\nis used
  to parse a string and then access and modify one of its\nsubfields.\n\n#+begin_src
  haskell\nlet home = \"221b Baker St, London, UK\"\naddress :: Prism Address String\nstreet
  :: Lens String Address\n\n  >>> home?. address.street\n  Just \"221b Baker St\"\n
  \ >>> home & address.street. ̃ \"4 Marylebone Rd\"\n  \"4 Marylebone Rd, London,
  UK\"\n#+end_src\n\n*Example 2. (Monadic lenses)* A polymorphic family of type-changing
  monadic lenses\nfor a logging monad is used to track each time a data holder\n(~Box~)
  is accessed.\n\n\n#+begin_src haskell\nbox :: (Show b) => MonadicLens IO a b (Box
  a) (Box b)\n\n  >>> return (Box 42)\n        >>= mupdate box \"hello\"\n        >>=
  mupdate box \"world\"\n  [box]: contents changed to \"hello\".\n  [box]: contents
  changed to \"world\".\n  Box{\"world\"}\n#+end_src\n\n*Example 3. (Algebraic lenses)*
  A classifying lens (~measure~) is used both for accessing\na the measurements of
  a point in the iris dataset and to classify\nnew measurements into a species (~Versicolor~).\n\n#+begin_src
  haskell\nlet iris =\n[ Iris Setosa 4.9 3.0 1.4, 0.2\n, Iris Setosa 4.7 3.2 1.3 0.2\n,
  ...\n, Iris Virginica 5.9 3.0 5.1 1.8 ]\nmeasure :: AlgLens [] Measurements Flower\n\n
  \ >>> iris!!4 ˆ. measure\n  (5.0, 3.6, 1.4, 0.2)\n  >>> iris & measure .? Measurements
  (4.8, 3.2, 3.5, 2.1)\n  Iris Versicolor (4.8, 3.1, 1.5, 0.1)\n#+end_src\n\n*Example
  4. (Traversals)* The composition of a traversal (~each~) with a prism\n(~address~)
  and a lens (~city~) is used to parse a collection of strings\nand modify one of
  their subfields.\n\n#+begin_src haskell\nlet mail =\n[ \"43 Adlington Rd, Wilmslow,
  United Kingdom\"\n, \"26 Westcott Rd, Princeton, USA\"\n, \"St James's Square, London,
  United Kingdom\"\n]\neach :: Traversal String [String]\naddress :: Prism Address
  String\ncity :: Lens String Address\n\n  >>> mail & each.address.city % ̃ uppercase\n
  \ [ \"43 Adlington Rd, WILMSLOW, United Kingdom\"\n  , \"26 Westcott Rd, PRINCETON,
  USA\"\n  , \"St James's Square, LONDON, United Kingdom\"\n  ]\n#+end_src haskell\n\n*Example
  5. (Kaleidoscopes)* Following the previous Example 3, a kaleidoscope\n(~aggregate~)
  is composed with an algebraic lens to create a new\npoint on the dataset by aggregating
  measurements with some function \n(~mean~, ~maximum~) and then classifying it.\n\n#+begin_src
  haskell\nmeasure :: AlgebraicLens [] Measurements Flower\naggregate :: Kaleidoscope
  Float Measurements\n\n  >>> iris & measure.aggregate >- mean\n  Iris Versicolor;
  Sepal (5.843, 3.054); Petal (3.758, 1.198)\n#+end_src haskell\n\n\n** About\n/This
  is a complete rewriting from the first prototype of [[https://github.com/mroman42/vitrea-prototype-1][vitrea]],
  maintained by @emilypi and @mroman42./\n\n"
description-type: text
hash: 10da82a2868457af3ce556bd88f5b2cb551816f92c18dbed14d9fe526cd6d54f
homepage: https://github.com/mroman42/vitrea
latest: 0.1.0.0
license-name: GPL-3.0-or-later
maintainer: mromang08@gmail.com
synopsis: Profunctor optics via the profunctor representation theorem.
test-bench-deps: {}
