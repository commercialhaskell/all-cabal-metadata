all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0
- 0.2.1
author: Edsko de Vries
basic-deps:
  ansi-terminal: '>=1.0 && <1.1'
  base: '>=4.14 && <4.20'
  blaze-html: '>=0.9 && <0.10'
  blaze-markup: '>=0.8 && <0.9'
  containers: '>=0.6 && <0.8'
  data-default: '>=0.7 && <0.8'
  mtl: '>=2.2 && <2.4'
  optparse-applicative: '>=0.18 && <0.19'
  parsec: '>=3.1 && <3.2'
  template-haskell: '>=2.16 && <2.22'
  text: '>=1.2 && <2.2'
changelog: |
  # Revision history for visualize-cbn

  ## 0.2.1 -- 2024-01-10

  * Fixes to the selector thunk optimization: also apply it at the top-level,
    and correctly apply `--hide-selector-thunk-opt` (previously `--hide-gc`
    was hiding selector thunk optimization steps by mistake).

  ## 0.2.0 -- 2023-12-20

  * Support multiple (mutually recursive) bindings in `let`
  * Fix pattern matching on heap-allocated objects (we were losing sharing)
  * Support heap inlining
  * Support for selectors (`fst`, `snd`)
  * Support the selector thunk optimization
  * Add `--disable-ansi` command line
  * Improve trace summarization
  * Add some new primitive functions (`min`, `max`, `succ`)
  * Add option to hide the prelude only after a specified step

  ## 0.1.0.2  -- 2019-09-10

  * Newer GHC compatibility

  ## 0.1.0.1  -- 2018-03-04

  * Start maintaining ChangeLog file.
  * Minor improvement to the evaluation function:

      `let x = e1 in seq x e2`

    now takes a step to (provided that `e1 -> e1'`)

      `let x = e1' in seq x e2`

    this avoids moving `e1` to the heap  (provided that there aren't multiple
    references to `x` from `e2`), clarifying the evaluation.
  * Added graph output (contributed by Yiğit Özkavcı).
  * Improved heap descriptions (contributed by Tim Rakowski).
changelog-type: markdown
description: "# Call-by-name interpretation and visualization tool\n\nHaskell and
  other call-by-name languages use _lazy evaluation_ as their default evaluation strategy.
  For beginners and advanced programmers alike this can sometimes be confusing. The
  `visualize-cbn` tool is designed to help in such cases; it is a simple interpreter
  for a mini-Haskell-like language which outputs the state of the program at every
  step in a human readable format. It can also generate a HTML/JavaScript version
  with \"Previous\" and \"Next\" buttons to allow to step through a program.\n\n##
  Example\n\nConsider the following example program:\n\n``` haskell\nfac = (\\n ->\n
  \   if le n 1\n      then 1\n      else mul (@fac (sub n 1)) n\n  )\n\nmain = @fac
  1\n```\n\nThe syntax is not _quite_ Haskell, but hopefully it should be pretty self-explanatory.
  The parser is pretty finicky; look at some of the examples in `examples/` to deduce
  what the syntax is. The only somewhat odd feature is the identifies marked with
  an at-sign (`@`); these corresponds to pointers in the heap. For programs in their
  initial state (i.e., as written down), the only heap pointers we expect are to CAFs
  (constant applicative forms; values defined at the top-level of the program).\n\n##
  Stepping through\n\nWe can step through the evaluation of this program using\n\n```\nvisualize-cbn
  -i examples/fac.hs --show-trace --hide-prelude\n```\n\nThis will result in something
  like\n\n```\n** 0\n\nfac 1\n\n(apply fac)\n\n** 1\n\nif 1 <= 1\n  then 1\n  else
  fac (1 - 1) * 1\n\n(delta: 1 <= 1)\n\n** 2\n\nif True\n  then 1\n  else fac (1 -
  1) * 1\n\n(if True)\n\n** 3\n\n1\n\n(whnf)\n```\n\nAt every step it lists the current
  state of the program, as well as the reduction rules that apply. There are some
  options for tweaking the output; see `--help`.\n\n## Generating HTML/JavaScript\n\nThe
  tool can also generate HTML/JavaScript:\n\n```\ncr visualize-cbn -i examples/fac.hs
  --javascript foo.js\n```\n\nThe resulting `.js` file can be embedded in a HTML page
  (such as a blog post); a minimal HTML page illustrating how this is done is given
  by\n\n``` html\n<html>\n<body>\n\n<a onclick=\"cbnPrev()\">Prev</a>\n<a onclick=\"cbnNext()\">Next</a>\n(step
  <span id=\"cbn_step\">Step</span>, <span id=\"cbn_status\">Status</span>)\n\n<table
  width=\"100%\" border=\"1\" cellpadding=\"5\" style=\"border-collapse: collapse;\">\n<tr><td><div
  style=\"font-family: monospace;\" id=\"cbn_term\">Term</div></td></tr>\n<tr><td><div
  style=\"font-family: monospace;\" id=\"cbn_heap\">Heap</div></td></tr>\n</table>\n\n<script
  type=\"text/javascript\" src=\"foo.js\"></script>\n\n</body>\n</html>\n```\n\n(This
  `.html` file was not written to illustrate HTML best practices :-) ) See the [Well-Typed
  blog post about the tool](http://www.well-typed.com/blog/2017/09/visualize-cbn/)
  for an example output. \n"
description-type: markdown
hash: f9dfe97a9eda37b010499f4d21431e1aadb1ff6910e1fffe94a8bc1766d1f1e8
homepage: ''
latest: 0.2.1
license-name: BSD-3-Clause
maintainer: edsko@well-typed.com
synopsis: Visualize CBN reduction
test-bench-deps: {}
