all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
author: Ian Grant Jeffries
basic-deps:
  attoparsec: '>=0.12.1 && <0.14'
  base: '>=4.6 && <5.0'
  bytestring: '>=0.10 && <0.11'
  data-default: '>=0.5 && <0.6'
  text: '>=1.1 && <1.3'
  vector: '>=0.10.12 && <0.11'
changelog: ''
changelog-type: ''
description: |
  # Intro

  A few tools for checking if a word is a close match against a blacklist.

  # Example

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import Data.Monoid
  import Data.Text (Text)
  import Data.Vector (Vector)
  import qualified Data.Vector as V
  import Heuristics.BanWords

  main :: IO ()
  main =
    case passBlacklist banAlmostExact blacklist "acme " of
      Nothing -> putStrLn "Blocked 'acme '"
      Just _  -> error "This shouldn't happen!"

  blacklist :: Vector Text
  blacklist = exampleReserved -- Includes "admin", "security", and a few others.
           <> V.fromList ["gosh", "darn"] -- Supply your own profanity list.
           <> V.fromList ["acme"] -- Prevent users from impersonating your company.
  ```
description-type: markdown
hash: 4496826d9ace5428109e10576dc7b56f6840db29046d91d3fb8eee8fd220c2bf
homepage: https://github.com/fanjam/banwords
latest: 0.2.0.1
license-name: MIT
maintainer: ian@housejeffries.com
synopsis: Generalized word blacklister
test-bench-deps:
  HUnit: '>=1.2 && <1.3'
  attoparsec: '>=0'
  banwords: '>=0'
  base: '>=0'
  test-framework: '>=0.8 && <0.9'
  test-framework-hunit: '>=0.3 && <0.4'
  text: '>=0'
  vector: '>=0'
