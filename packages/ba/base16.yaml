homepage: https://github.com/emilypi/base16
changelog-type: markdown
hash: bf459d8687b18ce01b37546d4bd1a5c369897144eb18fdbaf5dc5efb1235ec71
test-bench-deps:
  bytestring: -any
  text-short: -any
  base: '>=4.11 && <5'
  text: -any
  criterion: -any
  random-bytestring: -any
  base16: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  base16-bytestring: '>=1.0'
  tasty: -any
  deepseq: -any
  QuickCheck: -any
maintainer: emilypi@cohomolo.gy
synopsis: Fast RFC 4648-compliant Base16 encoding
changelog: |
  # Revision history for base16

  ## 0.3.0.1

  * Allow for mixed-case lenient decoding + validation
  * Bump testing for mixed-case hex

  ## 0.3.0.0

  * API for `decodeBase16With` has changed to require `ByteString` instead of `Text`. This is in alignment with work done on `base64`, which reflects
    the same API. This will be the final design for these types of conversions.
  * Test coverage now at 94%
  * Add NFData, Exception, and Generic instances for Base16Error + @since annotations for new instances. ([#5](https://github.com/emilypi/Base16/pull/5))
  * Doc improvements and add -XTrustworty and -XSafe annotations where needed. ([#5](https://github.com/emilypi/Base16/pull/5))
  * Optimized inner loop for short text and bytestrings ([#4](https://github.com/emilypi/Base16/pull/4))
  * Changed `encodeBase16` in `ByteString.Short` to produce `ShortText`, instead of `Text`.

  ## 0.2.1

  * Added support for `Text.Short` and `ByteString.Short` values

  ## 0.2.0.1

  * Improved performance. Decode and encode are now 3.5x-5x the next best lib.

  ## 0.2.0

  * Add lenient decoders
  * Fix bug in `Text` `decodeBase16` which failed on invalid UTF-8 values as a result of decoding
  * Add `decodeBase16With` combinators

  ## 0.1.3

  * Add lazy variants for `Text` and `ByteString` values

  ## 0.1.2.1 -- 2020-02-17

  * Documentation now references correct RFC section

  ## 0.1.2 -- 2020-02-17

  * Unmask loops - now correct.

  ## 0.1.1 -- 2020-02-17

  * Mask `Word32` and `Word64` loops (flaky)

  ## 0.1.0.0 -- 2020-02-16

  * First version. Released on an unsuspecting world.
basic-deps:
  bytestring: '>=0.10 && <0.12'
  text-short: ^>=0.1
  base: '>=4.10 && <5'
  text: ^>=1.2
  deepseq: ^>=1.4
  primitive: '>=0.6 && <0.8'
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.3.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
author: Emily Pillmore
latest: 0.3.0.2
description-type: markdown
description: |
  # Base16

  ![Build Status](https://github.com/emilypi/base16/workflows/Haskell-CI/badge.svg)
  [![Hackage](https://img.shields.io/hackage/v/base16.svg)](https://hackage.haskell.org/package/base16)

  RFC 4648-compliant Base16 encoding and decoding.

  For the companion optics and pattern synonyms, see [base16-lens](https://hackage.haskell.org/package/base16-lens).

  ### Summary

  The following types have supported codecs:

  - `Data.ByteString`
  - `Data.ByteString.Lazy`
  - `Data.ByteString.Short`
  - `Data.Text`
  - `Data.Text.Lazy`
  - `Data.Text.Short`

  Additionally this library has

  - Much better performance than `base16-bytestring` for encode and decode, with a more conventional api.
  - Support for mixed-case hex decoding (defaults to lower-case encoding by convention)
  - Optics for handling more complex structures with Base16 representations via the `base16-lens` package
  - Checks for both validity and correctness of Base16 encodings.

  There are no dependencies aside from those bundled with GHC.
license-name: BSD-3-Clause
