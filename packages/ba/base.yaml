homepage: ''
changelog-type: markdown
hash: 5b769b2e609e714bbfa82701823e9ef0ddec0f1c1898916973be5c9aee9c2225
test-bench-deps: {}
maintainer: libraries@haskell.org
synopsis: Basic libraries
changelog: "# Changelog for [`base` package](http://hackage.haskell.org/package/base)\n\n##
  4.15.0.0 *January 2021*\n\n  * Add `Functor`, `Applicative`, `Monad`, `MonadFix`,
  `Foldable`, `Traversable`,\n    `Eq`, `Ord`, `Show`, `Read`, `Eq1`, `Ord1`, `Show1`,
  `Read1`, `Generic`,\n    `Generic1`, and `Data` instances for `GHC.Tuple.Solo`.\n\n
  \ * `openFile` now calls the `open` system call with an `interruptible` FFI\n    call,
  ensuring that the call can be interrupted with `SIGINT` on POSIX\n    systems.\n\n
  \ * Add `hGetContents'`, `getContents'`, and `readFile'` in `System.IO`:\n    Strict
  IO variants of `hGetContents`, `getContents`, and `readFile`.\n\n  * Add `singleton`
  function for `Data.List.NonEmpty`.\n\n  * The planned deprecation of `Data.Monoid.First`
  and `Data.Monoid.Last`\n    is scrapped due to difficulties with the suggested migration
  path.\n\n  * `Data.Semigroup.Option` and the accompanying `option` function are\n
  \   deprecated and scheduled for removal in 4.16.\n\n  * Add `Generic` instances
  to `Fingerprint`, `GiveGCStats`, `GCFlags`,\n    `ConcFlags`, `DebugFlags`, `CCFlags`,
  `DoHeapProfile`, `ProfFlags`,\n    `DoTrace`, `TraceFlags`, `TickyFlags`, `ParFlags`,
  `RTSFlags`, `RTSStats`,\n    `GCStats`, `ByteOrder`, `GeneralCategory`, `SrcLoc`\n
  \   \n  * Add rules `unpackUtf8`, `unpack-listUtf8` and `unpack-appendUtf8` to `GHC.Base`.\n
  \   They correspond to their ascii versions and hopefully make it easier\n    for
  libraries to handle utf8 encoded strings efficiently.\n\n  * An issue with list
  fusion and `elem` was fixed. `elem` applied to known\n    small lists will now compile
  to a simple case statement more often.\n\n  * Add `MonadFix` and `MonadZip` instances
  for `Complex`\n\n  * Add `Ix` instances for tuples of size 6 through 15\n   \n  *
  Correct `Bounded` instance and remove `Enum` and `Integral` instances for\n    `Data.Ord.Down`.\n\n
  \ * `Foreign.ForeignPtr.withForeignPtr` is now less aggressively optimised,\n    avoiding
  the soundness issue reported in\n    [#17760](https://gitlab.haskell.org/ghc/ghc/-/issues/17760)
  in exchange for\n    a small amount more allocation. If your application regresses
  significantly\n    *and* the continuation given to `withForeignPtr` will *not* provably\n
  \   diverge then the previous optimisation behavior can be recovered by instead\n
  \   using `GHC.ForeignPtr.unsafeWithForeignPtr`.\n\n## 4.14.1.0 *Jul 2020*\n\n  *
  Bundled with GHC 8.10.2\n\n  * Fix a precision issue in `log1mexp` (#17125)\n\n##
  4.14.0.0 *Jan 2020*\n  * Bundled with GHC 8.10.1\n\n  * Add a `TestEquality` instance
  for the `Compose` newtype.\n\n  * `Data.Ord.Down` now has a field name, `getDown`\n\n
  \ * Add `Bits`, `Bounded`, `Enum`, `FiniteBits`, `Floating`, `Fractional`,\n    `Integral`,
  `Ix`, `Real`, `RealFrac`, `RealFloat` and `Storable` instances\n    to `Data.Ord.Down`.\n\n
  \ * Fix the `integer-gmp` variant of `isValidNatural`: Previously it would fail\n
  \   to detect values `<= maxBound::Word` that were incorrectly encoded using\n    the
  `NatJ#` constructor.\n\n  * The type of `coerce` has been generalized. It is now
  runtime-representation\n    polymorphic:\n    `forall {r :: RuntimeRep} (a :: TYPE
  r) (b :: TYPE r). Coercible a b => a -> b`.\n    The type argument `r` is marked
  as `Inferred` to prevent it from\n    interfering with visible type application.\n\n
  \ * Make `Fixed` and `HasResolution` poly-kinded.\n\n  * Add `HasResolution` instances
  for `Nat`s.\n\n  * Add `Functor`, `Applicative`, `Monad`, `Alternative`, `MonadPlus`,\n
  \   `Generic` and `Generic1` instances to `Kleisli`\n\n  * `openTempFile` is now
  fully atomic and thread-safe on Windows.\n\n  * Add `isResourceVanishedError`, `resourceVanishedErrorType`,
  and\n    `isResourceVanishedErrorType` to `System.IO.Error`.\n\n  * Add newtypes
  for `CSocklen` (`socklen_t`) and `CNfds` (`nfds_t`) to\n    `System.Posix.Types`.\n\n
  \ * Add `Functor`, `Applicative` and `Monad` instances to `(,,) a b`\n    and `(,,,)
  a b c`.\n\n  * Add `resizeSmallMutableArray#` to `GHC.Exts`.\n\n  * Add a `Data`
  instance to `WrappedArrow`, `WrappedMonad`, and `ZipList`.\n\n  * Add `IsList` instance
  for `ZipList`.\n\n## 4.13.0.0 *July 2019*\n  * Bundled with GHC 8.8.1\n\n  * The
  final phase of the `MonadFail` proposal has been implemented:\n\n    * The `fail`
  method of `Monad` has been removed in favor of the method of\n      the same name
  in the `MonadFail` class.\n\n    * `MonadFail(fail)` is now re-exported from the
  `Prelude` and\n      `Control.Monad` modules.\n\n  * Fix `Show` instance of `Data.Fixed`:
  Negative numbers are now parenthesized\n    according to their surrounding context.
  I.e. `Data.Fixed.show` produces\n    syntactically correct Haskell for expressions
  like `Just (-1 :: Fixed E2)`.\n    (#16031)\n\n  * Support the characters from recent
  versions of Unicode (up to v. 12) in\n    literals (#5518).\n\n  * The `StableName`
  type parameter now has a phantom role instead of\n    a representational one. There
  is really no reason to care about the\n    type of the underlying object.\n\n  *
  Add `foldMap'`, a strict version of `foldMap`, to `Foldable`.\n\n  * The `shiftL`
  and `shiftR` methods in the `Bits` instances of `Int`, `IntN`,\n    `Word`, and
  `WordN` now throw an overflow exception for negative shift\n    values (instead
  of being undefined behaviour).\n\n  * `scanr` no longer crashes when passed a fusable,
  infinite list. (#16943)\n\n## 4.12.0.0 *21 September 2018*\n  * Bundled with GHC
  8.6.1\n\n  * The STM invariant-checking mechanism (`always` and `alwaysSucceeds`),
  which\n    was deprecated in GHC 8.4, has been removed (as proposed in\n    <https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0011-deprecate-stm-invariants.rst>).\n
  \   This is a bit earlier than proposed in the deprecation pragma included in\n
  \   GHC 8.4, but due to community feedback we decided to move ahead with the\n    early
  removal.\n\n    Existing users are encouraged to encapsulate their STM operations
  in safe\n    abstractions which can perform the invariant checking without help
  from the\n    runtime system.\n\n  * Add a new module `GHC.ResponseFile` (previously
  defined in the `haddock`\n    package). (#13896)\n\n  * Move the module `Data.Functor.Contravariant`
  from the\n    `contravariant` package to `base`.\n\n  * `($!)` is now representation-polymorphic
  like `($)`.\n\n  * Add `Applicative` (for `K1`), `Semigroup` and `Monoid` instances
  in\n    `GHC.Generics`. (#14849)\n\n  * `asinh` for `Float` and `Double` is now
  numerically stable in the face of\n    non-small negative arguments and enormous
  arguments of either sign. (#14927)\n\n  * `Numeric.showEFloat (Just 0)` now respects
  the user's requested precision.\n    (#15115)\n\n  * `Data.Monoid.Alt` now has `Foldable`
  and `Traversable` instances. (#15099)\n\n  * `Data.Monoid.Ap` has been introduced\n\n
  \ * `Control.Exception.throw` is now levity polymorphic. (#15180)\n\n  * `Data.Ord.Down`
  now has a number of new instances. These include:\n    `MonadFix`, `MonadZip`, `Data`,
  `Foldable`, `Traversable`, `Eq1`, `Ord1`,\n    `Read1`, `Show1`, `Generic`, `Generic1`.
  (#15098)\n\n\n## 4.11.1.0 *19 April 2018*\n  * Bundled with GHC 8.4.2\n\n  * Add
  the `readFieldHash` function to `GHC.Read` which behaves like\n    `readField`,
  but for a field that ends with a `#` symbol (#14918).\n\n## 4.11.0.0 *8 March 2018*\n
  \ * Bundled with GHC 8.4.1\n\n  * `System.IO.openTempFile` is now thread-safe on
  Windows.\n\n  * Deprecated `GHC.Stats.GCStats` interface has been removed.\n\n  *
  Add `showHFloat` to `Numeric`\n\n  * Add `Div`, `Mod`, and `Log2` functions on type-level
  naturals\n    in `GHC.TypeLits`.\n\n  * Add `Alternative` instance for `ZipList`
  (#13520)\n\n  * Add instances `Num`, `Functor`, `Applicative`, `Monad`, `Semigroup`\n
  \   and `Monoid` for `Data.Ord.Down` (#13097).\n\n  * Add `Semigroup` instance for
  `EventLifetime`.\n\n  * Make `Semigroup` a superclass of `Monoid`;\n    export `Semigroup((<>))`
  from `Prelude`; remove `Monoid` reexport\n    from `Data.Semigroup` (#14191).\n\n
  \ * Generalise `instance Monoid a => Monoid (Maybe a)` to\n    `instance Semigroup
  a => Monoid (Maybe a)`.\n\n  * Add `infixl 9 !!` declaration for `Data.List.NonEmpty.!!`\n\n
  \ * Add `<&>` operator to `Data.Functor` (#14029)\n\n  * Remove the deprecated `Typeable{1..7}`
  type synonyms (#14047)\n\n  * Make `Data.Type.Equality.==` a closed type family.
  It now works for all\n  kinds out of the box. Any modules that previously declared
  instances of this\n  family will need to remove them. Whereas the previous definition
  was somewhat\n  ad hoc, the behavior is now completely uniform. As a result, some
  applications\n  that used to reduce no longer do, and conversely. Most notably,
  `(==)` no\n  longer treats the `*`, `j -> k`, or `()` kinds specially; equality
  is\n  tested structurally in all cases.\n\n  * Add instances `Semigroup` and `Monoid`
  for `Control.Monad.ST` (#14107).\n\n  * The `Read` instances for `Proxy`, `Coercion`,
  `(:~:)`, `(:~~:)`, and `U1`\n    now ignore the parsing precedence. The effect of
  this is that `read` will\n    be able to successfully parse more strings containing
  `\"Proxy\"` _et al._\n    without surrounding parentheses (e.g., `\"Thing Proxy\"`)
  (#12874).\n\n  * Add `iterate'`, a strict version of `iterate`, to `Data.List`\n
  \   and `Data.OldList` (#3474)\n\n  * Add `Data` instances for `IntPtr` and `WordPtr`
  (#13115)\n\n  * Add missing `MonadFail` instance for `Control.Monad.Strict.ST.ST`\n\n
  \ * Make `zipWith` and `zipWith3` inlinable (#14224)\n\n  * `Type.Reflection.App`
  now matches on function types (fixes #14236)\n\n  * `Type.Reflection.withTypeable`
  is now polymorphic in the `RuntimeRep` of\n    its result.\n\n  * Add `installSEHHandlers`
  to `MiscFlags` in `GHC.RTS.Flags` to determine if\n    exception handling is enabled.\n\n
  \ * The deprecated functions `isEmptyChan` and `unGetChan` in\n    `Control.Concurrent.Chan`
  have been removed (#13561).\n\n  * Add `generateCrashDumpFile` to `MiscFlags` in
  `GHC.RTS.Flags` to determine\n    if a core dump will be generated on crashes.\n\n
  \ * Add `generateStackTrace` to `MiscFlags` in `GHC.RTS.Flags` to determine if\n
  \   stack traces will be generated on unhandled exceptions by the RTS.\n\n  * `getExecutablePath`
  now resolves symlinks on Windows (#14483)\n\n  * Deprecated STM invariant checking
  primitives (`checkInv`, `always`, and\n    `alwaysSucceeds`) in `GHC.Conc.Sync`
  (#14324).\n\n  * Add a `FixIOException` data type to `Control.Exception.Base`, and
  change\n    `fixIO` to throw that instead of a `BlockedIndefinitelyOnMVar` exception\n
  \   (#14356).\n\n## 4.10.1.0 *November 2017*\n  * Bundled with GHC 8.2.2\n\n  *
  The file locking primitives provided by `GHC.IO.Handle` now use\n    Linux open
  file descriptor locking if available.\n\n  * Fixed bottoming definition of `clearBit`
  for `Natural`\n\n## 4.10.0.0 *July 2017*\n  * Bundled with GHC 8.2.1\n\n  * `Data.Type.Bool.Not`
  given a type family dependency (#12057).\n\n  * `Foreign.Ptr` now exports the constructors
  for `IntPtr` and `WordPtr`\n    (#11983)\n\n  * `Generic1`, as well as the associated
  datatypes and typeclasses in\n    `GHC.Generics`, are now poly-kinded (#10604)\n\n
  \ * `New modules `Data.Bifoldable` and `Data.Bitraversable` (previously defined\n
  \   in the `bifunctors` package) (#10448)\n\n  * `Data.Either` now provides `fromLeft`
  and `fromRight` (#12402)\n\n  * `Data.Type.Coercion` now provides `gcoerceWith`
  (#12493)\n\n  * New methods `liftReadList(2)` and `liftReadListPrec(2)` in the\n
  \   `Read1`/`Read2` classes that are defined in terms of `ReadPrec` instead of\n
  \   `ReadS`, as well as related combinators, have been added to\n    `Data.Functor.Classes`
  (#12358)\n\n  * Add `Semigroup` instance for `IO`, as well as for `Event` and `Lifetime`\n
  \   from `GHC.Event` (#12464)\n\n  * Add `Data` instance for `Const` (#12438)\n\n
  \ * Added `Eq1`, `Ord1`, `Read1` and `Show1` instances for `NonEmpty`.\n\n  * Add
  wrappers for `blksize_t`, `blkcnt_t`, `clockid_t`, `fsblkcnt_t`,\n    `fsfilcnt_t`,
  `id_t`, `key_t`, and `timer_t` to System.Posix.Types (#12795)\n\n  * Add `CBool`,
  a wrapper around C's `bool` type, to `Foreign.C.Types`\n    (#13136)\n\n  * Raw
  buffer operations in `GHC.IO.FD` are now strict in the buffer, offset, and length
  operations (#9696)\n\n  * Add `plusForeignPtr` to `Foreign.ForeignPtr`.\n\n  * Add
  `type family AppendSymbol (m :: Symbol) (n :: Symbol) :: Symbol` to `GHC.TypeLits`\n
  \   (#12162)\n\n  * Add `GHC.TypeNats` module with `Natural`-based `KnownNat`. The
  `Nat`\n    operations in `GHC.TypeLits` are a thin compatibility layer on top.\n
  \   Note: the `KnownNat` evidence is changed from an `Integer` to a `Natural`.\n\n
  \ * The type of `asProxyTypeOf` in `Data.Proxy` has been generalized (#12805)\n\n
  \ * `liftA2` is now a method of the `Applicative` class. `liftA2` and\n    `<*>`
  each have a default implementation based on the other. Various\n    library functions
  have been updated to use `liftA2` where it might offer\n    some benefit. `liftA2`
  is not yet in the `Prelude`, and must currently be\n    imported from `Control.Applicative`.
  It is likely to be added to the\n    `Prelude` in the future. (#13191)\n\n  * A
  new module, `Type.Reflection`, exposing GHC's new type-indexed type\n    representation
  mechanism is now provided.\n\n  * `Data.Dynamic` now exports the `Dyn` data constructor,
  enabled by the new\n    type-indexed type representation mechanism.\n\n  * `Data.Type.Equality`
  now provides a kind heterogeneous type equality\n    evidence type, `(:~~:)`.\n\n
  \ * The `CostCentresXML` constructor of `GHC.RTS.Flags.DoCostCentres` has been\n
  \   replaced by `CostCentresJSON` due to the new JSON export format supported by\n
  \   the cost centre profiler.\n\n  * The `ErrorCall` pattern synonym has been given
  a `COMPLETE` pragma so that\n    functions which solely match again `ErrorCall`
  do not produce\n    non-exhaustive pattern-match warnings (#8779)\n\n  * Change
  the implementations of `maximumBy` and `minimumBy` from\n    `Data.Foldable` to
  use `foldl1` instead of `foldr1`. This makes them run\n    in constant space when
  applied to lists. (#10830)\n\n  * `mkFunTy`, `mkAppTy`, and `mkTyConApp` from `Data.Typeable`
  no longer exist.\n    This functionality is superceded by the interfaces provided
  by\n    `Type.Reflection`.\n\n  * `mkTyCon3` is no longer exported by `Data.Typeable`.
  This function is\n    replaced by `Type.Reflection.Unsafe.mkTyCon`.\n\n  * `Data.List.NonEmpty.unfold`
  has been deprecated in favor of `unfoldr`,\n    which is functionally equivalent.\n\n##
  4.9.0.0  *May 2016*\n\n  * Bundled with GHC 8.0\n\n  * `error` and `undefined` now
  print a partial stack-trace alongside the error message.\n\n  * New `errorWithoutStackTrace`
  function throws an error without printing the stack trace.\n\n  * The restore operation
  provided by `mask` and `uninterruptibleMask` now\n    restores the previous masking
  state whatever the current masking state is.\n\n  * New `GHC.Generics.packageName`
  operation\n\n  * Redesigned `GHC.Stack.CallStack` data type. As a result, `CallStack`'s\n
  \   `Show` instance produces different output, and `CallStack` no longer has an\n
  \   `Eq` instance.\n\n  * New `GHC.Generics.packageName` operation\n\n  * New `GHC.Stack.Types`
  module now contains the definition of\n    `CallStack` and `SrcLoc`\n\n  * New `GHC.Stack.Types.emptyCallStack`
  function builds an empty `CallStack`\n\n  * New `GHC.Stack.Types.freezeCallStack`
  function freezes a `CallStack` preventing future `pushCallStack` operations from
  having any effect\n\n  * New `GHC.Stack.Types.pushCallStack` function pushes a call-site
  onto a `CallStack`\n\n  * New `GHC.Stack.Types.fromCallSiteList` function creates
  a `CallStack` from\n    a list of call-sites (i.e., `[(String, SrcLoc)]`)\n\n  *
  `GHC.SrcLoc` has been removed\n\n  * `GHC.Stack.showCallStack` and `GHC.SrcLoc.showSrcLoc`
  are now called\n    `GHC.Stack.prettyCallStack` and `GHC.Stack.prettySrcLoc` respectively\n\n
  \ * add `Data.List.NonEmpty` and `Data.Semigroup` (to become\n    super-class of
  `Monoid` in the future). These modules were\n    provided by the `semigroups` package
  previously. (#10365)\n\n  * Add `selSourceUnpackedness`, `selSourceStrictness`,
  and\n    `selDecidedStrictness`, three functions which look up strictness\n    information
  of a field in a data constructor, to the `Selector` type class\n    in `GHC.Generics`
  (#10716)\n\n  * Add `URec`, `UAddr`, `UChar`, `UDouble`, `UFloat`, `UInt`, and `UWord`
  to\n    `GHC.Generics` as part of making GHC generics capable of handling\n    unlifted
  types (#10868)\n\n  * The `Eq`, `Ord`, `Read`, and `Show` instances for `U1` now
  use lazier\n    pattern-matching\n\n  * Keep `shift{L,R}` on `Integer` with negative
  shift-arguments from\n    segfaulting (#10571)\n\n  * Add `forkOSWithUnmask` to
  `Control.Concurrent`, which is like\n    `forkIOWithUnmask`, but the child is run
  in a bound thread.\n\n  * The `MINIMAL` definition of `Arrow` is now `arr AND (first
  OR (***))`.\n\n  * The `MINIMAL` definition of `ArrowChoice` is now `left OR (+++)`.\n\n
  \ * Exported `GiveGCStats`, `DoCostCentres`, `DoHeapProfile`, `DoTrace`,\n    `RtsTime`,
  and `RtsNat` from `GHC.RTS.Flags`\n\n  * New function `GHC.IO.interruptible` used
  to correctly implement\n    `Control.Exception.allowInterrupt` (#9516)\n\n  * Made
  `PatternMatchFail`, `RecSelError`, `RecConError`, `RecUpdError`,\n    `NoMethodError`,
  and `AssertionFailed` newtypes (#10738)\n\n  * New module `Control.Monad.IO.Class`
  (previously provided by `transformers`\n    package). (#10773)\n\n  * New modules
  `Data.Functor.Classes`, `Data.Functor.Compose`,\n    `Data.Functor.Product`, and
  `Data.Functor.Sum` (previously provided by\n    `transformers` package). (#11135)\n\n
  \ * New instances for `Proxy`: `Eq1`, `Ord1`, `Show1`, `Read1`. All\n    of the
  classes are from `Data.Functor.Classes` (#11756).\n\n  * New module `Control.Monad.Fail`
  providing new `MonadFail(fail)`\n    class (#10751)\n\n  * Add `GHC.TypeLits.TypeError`
  and `ErrorMessage` to allow users\n    to define custom compile-time error messages.\n\n
  \ * Redesign `GHC.Generics` to use type-level literals to represent the\n    metadata
  of generic representation types (#9766)\n\n  * The `IsString` instance for `[Char]`
  has been modified to eliminate\n    ambiguity arising from overloaded strings and
  functions like `(++)`.\n\n  * Move `Const` from `Control.Applicative` to its own
  module in\n   `Data.Functor.Const`. (#11135)\n\n  * Re-export `Const` from `Control.Applicative`
  for backwards compatibility.\n\n  * Expand `Floating` class to include operations
  that allow for better\n    precision: `log1p`, `expm1`, `log1pexp` and `log1mexp`.
  These are not\n    available from `Prelude`, but the full class is exported from
  `Numeric`.\n\n  * New `Control.Exception.TypeError` datatype, which is thrown when
  an\n    expression fails to typecheck when run using `-fdefer-type-errors` (#10284)\n\n
  \ * The `bitSize` method of `Data.Bits.Bits` now has a (partial!)\n    default implementation
  based on `bitSizeMaybe`. (#12970)\n\n### New instances\n\n  * `Alt`, `Dual`, `First`,
  `Last`, `Product`, and `Sum` now have `Data`,\n    `MonadZip`, and `MonadFix` instances\n\n
  \ * The datatypes in `GHC.Generics` now have `Enum`, `Bounded`, `Ix`,\n    `Functor`,
  `Applicative`, `Monad`, `MonadFix`, `MonadPlus`, `MonadZip`,\n    `Foldable`, `Foldable`,
  `Traversable`, `Generic1`, and `Data` instances\n    as appropriate.\n\n  * `Maybe`
  now has a `MonadZip` instance\n\n  * `All` and `Any` now have `Data` instances\n\n
  \ * `Dual`, `First`, `Last`, `Product`, and `Sum` now have `Foldable` and\n    `Traversable`
  instances\n\n  * `Dual`, `Product`, and `Sum` now have `Functor`, `Applicative`,
  and\n    `Monad` instances\n\n  * `(,) a` now has a `Monad` instance\n\n  * `ZipList`
  now has `Foldable` and `Traversable` instances\n\n  * `Identity` now has `Semigroup`
  and `Monoid` instances\n\n  * `Identity` and `Const` now have `Bits`, `Bounded`,
  `Enum`, `FiniteBits`,\n    `Floating`, `Fractional`, `Integral`, `IsString`, `Ix`,
  `Num`, `Real`,\n    `RealFloat`, `RealFrac` and `Storable` instances. (#11210, #11790)\n\n
  \ * `()` now has a `Storable` instance\n\n  * `Complex` now has `Generic`, `Generic1`,
  `Functor`, `Foldable`, `Traversable`,\n    `Applicative`, and `Monad` instances\n\n
  \ * `System.Exit.ExitCode` now has a `Generic` instance\n\n  * `Data.Version.Version`
  now has a `Generic` instance\n\n  * `IO` now has a `Monoid` instance\n\n  * Add
  `MonadPlus IO` and `Alternative IO` instances\n    (previously orphans in `transformers`)
  (#10755)\n\n  * `CallStack` now has an `IsList` instance\n\n  * The field `spInfoName`
  of `GHC.StaticPtr.StaticPtrInfo` has been removed.\n    The value is no longer available
  when constructing the `StaticPtr`.\n\n  * `VecElem` and `VecCount` now have `Enum`
  and `Bounded` instances.\n\n### Generalizations\n\n  * Generalize `Debug.Trace.{traceM,
  traceShowM}` from `Monad` to `Applicative`\n    (#10023)\n\n  * Redundant typeclass
  constraints have been removed:\n     - `Data.Ratio.{denominator,numerator}` have
  no `Integral` constraint anymore\n     - **TODO**\n\n  * Generalise `forever` from
  `Monad` to `Applicative`\n\n  * Generalize `filterM`, `mapAndUnzipM`, `zipWithM`,
  `zipWithM_`, `replicateM`,\n    `replicateM_` from `Monad` to `Applicative` (#10168)\n\n
  \ * The `Generic` instance for `Proxy` is now poly-kinded (#10775)\n\n  * Enable
  `PolyKinds` in the `Data.Functor.Const` module to give `Const`\n    the kind `*
  -> k -> *`. (#10039)\n\n\n## 4.8.2.0  *Oct 2015*\n\n  * Bundled with GHC 7.10.3\n\n
  \ * The restore operation provided by `mask` and `uninterruptibleMask` now\n    restores
  the previous masking state whatever the current masking state is.\n\n  * Exported
  `GiveGCStats`, `DoCostCentres`, `DoHeapProfile`, `DoTrace`,\n    `RtsTime`, and
  `RtsNat` from `GHC.RTS.Flags`\n\n## 4.8.1.0  *Jul 2015*\n\n  * Bundled with GHC
  7.10.2\n\n  * `Lifetime` is now exported from `GHC.Event`\n\n  * Implicit-parameter
  based source location support exposed in `GHC.SrcLoc` and `GHC.Stack`.\n    See
  GHC User's Manual for more information.\n\n## 4.8.0.0  *Mar 2015*\n\n  * Bundled
  with GHC 7.10.1\n\n  * Make `Applicative` a superclass of `Monad`\n\n  * Add reverse
  application operator `Data.Function.(&)`\n\n  * Add `Data.List.sortOn` sorting function\n\n
  \ * Add `System.Exit.die`\n\n  * Deprecate `versionTags` field of `Data.Version.Version`.\n
  \   Add `makeVersion :: [Int] -> Version` constructor function to aid\n    migration
  to a future `versionTags`-less `Version`.\n\n  * Add `IsList Version` instance\n\n
  \ * Weaken RealFloat constraints on some `Data.Complex` functions\n\n  * Add `Control.Monad.(<$!>)`
  as a strict version of `(<$>)`\n\n  * The `Data.Monoid` module now has the `PolyKinds`
  extension\n    enabled, so that the `Monoid` instance for `Proxy` are polykinded\n
  \   like `Proxy` itself is.\n\n  * Make `abs` and `signum` handle (-0.0) correctly
  per IEEE-754.\n\n  * Re-export `Data.Word.Word` from `Prelude`\n\n  * Add `countLeadingZeros`
  and `countTrailingZeros` methods to\n    `Data.Bits.FiniteBits` class\n\n  * Add
  `Data.List.uncons` list destructor (#9550)\n\n  * Export `Monoid(..)` from `Prelude`\n\n
  \ * Export `Foldable(..)` from `Prelude`\n    (hiding `fold`, `foldl'`, `foldr'`,
  and `toList`)\n\n  * Export `Traversable(..)` from `Prelude`\n\n  * Set fixity for
  `Data.Foldable.{elem,notElem}` to match the\n    conventional one set for `Data.List.{elem,notElem}`
  (#9610)\n\n  * Turn `toList`, `elem`, `sum`, `product`, `maximum`, and `minimum`\n
  \   into `Foldable` methods (#9621)\n\n  * Replace the `Data.List`-exported functions\n\n
  \   ```\n    all, and, any, concat, concatMap, elem, find, product, sum,\n    mapAccumL,
  mapAccumR\n    ```\n\n    by re-exports of their generalised `Data.Foldable`/`Data.Traversable`\n
  \   counterparts.  In other words, unqualified imports of `Data.List`\n    and `Data.Foldable`/`Data.Traversable`
  no longer lead to conflicting\n    definitions. (#9586)\n\n  * New (unofficial)
  module `GHC.OldList` containing only list-specialised\n    versions of the functions
  from `Data.List` (in other words, `GHC.OldList`\n    corresponds to `base-4.7.0.2`'s
  `Data.List`)\n\n  * Replace the `Control.Monad`-exported functions\n\n    ```\n
  \   sequence_, msum, mapM_, forM_,\n    forM, mapM, sequence\n    ```\n\n    by
  re-exports of their generalised `Data.Foldable`/`Data.Traversable`\n    counterparts.
  \ In other words, unqualified imports of `Control.Monad`\n    and `Data.Foldable`/`Data.Traversable`
  no longer lead to conflicting\n    definitions. (#9586)\n\n  * Generalise `Control.Monad.{when,unless,guard}`
  from `Monad` to\n    `Applicative` and from `MonadPlus` to `Alternative` respectively.\n\n
  \ * Generalise `Control.Monad.{foldM,foldM_}` to `Foldable`\n\n  * `scanr`, `mapAccumL`
  and `filterM` now take part in list fusion (#9355,\n    #9502, #9546)\n\n  * Remove
  deprecated `Data.OldTypeable` (#9639)\n\n  * New module `Data.Bifunctor` providing
  the `Bifunctor(bimap,first,second)`\n    class (previously defined in `bifunctors`
  package) (#9682)\n\n  * New module `Data.Void` providing the canonical uninhabited
  type `Void`\n    (previously defined in `void` package) (#9814)\n\n  * Update Unicode
  class definitions to Unicode version 7.0\n\n  * Add `Alt`, an `Alternative` wrapper,
  to `Data.Monoid`. (#9759)\n\n  * Add `isSubsequenceOf` to `Data.List` (#9767)\n\n
  \ * The arguments to `==` and `eq` in `Data.List.nub` and `Data.List.nubBy`\n    are
  swapped, such that `Data.List.nubBy (<) [1,2]` now returns `[1]`\n    instead of
  `[1,2]` (#2528, #3280, #7913)\n\n  * New module `Data.Functor.Identity` (previously
  provided by `transformers`\n    package). (#9664)\n\n  * Add `scanl'`, a strictly
  accumulating version of `scanl`, to `Data.List`\n    and `Data.OldList`. (#9368)\n\n
  \ * Add `fillBytes` to `Foreign.Marshal.Utils`.\n\n  * Add new `displayException`
  method to `Exception` typeclass. (#9822)\n\n  * Add `Data.Bits.toIntegralSized`,
  a size-checked version of\n    `fromIntegral`. (#9816)\n\n  * New module `Numeric.Natural`
  providing new `Natural` type\n    representing non-negative arbitrary-precision
  integers.  The `GHC.Natural`\n    module exposes additional GHC-specific primitives.
  (#9818)\n\n  * Add `(Storable a, Integeral a) => Storable (Ratio a)` instance (#9826)\n\n
  \ * Add `Storable a => Storable (Complex a)` instance (#9826)\n\n  * New module
  `GHC.RTS.Flags` that provides accessors to runtime flags.\n\n  * Expose functions
  for per-thread allocation counters and limits in `GHC.Conc`\n\n        disableAllocationLimit
  :: IO ()\n        enableAllocationLimit :: IO ()\n        getAllocationCounter ::
  IO Int64\n        setAllocationCounter :: Int64 -> IO ()\n\n    together with a
  new exception `AllocationLimitExceeded`.\n\n  * Make `read . show = id` for `Data.Fixed`
  (#9240)\n\n  * Add `calloc` and `callocBytes` to `Foreign.Marshal.Alloc`. (#9859)\n\n
  \ * Add `callocArray` and `callocArray0` to `Foreign.Marshal.Array`. (#9859)\n\n
  \ * Restore invariant in `Data (Ratio a)` instance (#10011)\n\n  * Add/expose `rnfTypeRep`,
  `rnfTyCon`, `typeRepFingerprint`, and\n    `tyConFingerprint` helpers to `Data.Typeable`.\n\n
  \ * Define proper `MINIMAL` pragma for `class Ix`. (#10142)\n\n## 4.7.0.2  *Dec
  2014*\n\n  * Bundled with GHC 7.8.4\n\n  * Fix performance bug in `Data.List.inits`
  (#9345)\n\n  * Fix handling of null bytes in `Debug.Trace.trace` (#9395)\n\n## 4.7.0.1
  \ *Jul 2014*\n\n  * Bundled with GHC 7.8.3\n\n  * Unhide `Foreign.ForeignPtr` in
  Haddock (#8475)\n\n  * Fix recomputation of `TypeRep` in `Typeable` type-application
  instance\n    (#9203)\n\n  * Fix regression in Data.Fixed Read instance (#9231)\n\n
  \ * Fix `fdReady` to honor `FD_SETSIZE` (#9168)\n\n## 4.7.0.0  *Apr 2014*\n\n  *
  Bundled with GHC 7.8.1\n\n  * Add `/Since: 4.[4567].0.0/` Haddock annotations to
  entities\n    denoting the package version, when the given entity was introduced\n
  \   (or its type signature changed in a non-compatible way)\n\n  * The `Control.Category`
  module now has the `PolyKinds` extension\n    enabled, meaning that instances of
  `Category` no longer need be of\n    kind `* -> * -> *`.\n\n  * There are now `Foldable`
  and `Traversable` instances for `Either a`,\n   `Const r`, and `(,) a`.\n\n  * There
  are now `Show`, `Read`, `Eq`, `Ord`, `Monoid`, `Generic`, and\n    `Generic1` instances
  for `Const`.\n\n  * There is now a `Data` instance for `Data.Version`.\n\n  * A
  new `Data.Bits.FiniteBits` class has been added to represent\n    types with fixed
  bit-count. The existing `Bits` class is extended\n    with a `bitSizeMaybe` method
  to replace the now obsolete\n    `bitsize` method.\n\n  * `Data.Bits.Bits` gained
  a new `zeroBits` method which completes the\n    `Bits` API with a direct way to
  introduce a value with all bits cleared.\n\n  * There are now `Bits` and `FiniteBits`
  instances for `Bool`.\n\n  * There are now `Eq`, `Ord`, `Show`, `Read`, `Generic`.
  and `Generic1`\n    instances for `ZipList`.\n\n  * There are now `Eq`, `Ord`, `Show`
  and `Read` instances for `Down`.\n\n  * There are now `Eq`, `Ord`, `Show`, `Read`
  and `Generic` instances\n    for types in GHC.Generics (`U1`, `Par1`, `Rec1`, `K1`,
  `M1`,\n    `(:+:)`, `(:*:)`, `(:.:)`).\n\n  * `Data.Monoid`: There are now `Generic`
  instances for `Dual`, `Endo`,\n    `All`, `Any`, `Sum`, `Product`, `First`, and
  `Last`; as well as\n    `Generic1` instances for `Dual`, `Sum`, `Product`, `First`,
  and `Last`.\n\n  * The `Data.Monoid.{Product,Sum}` newtype wrappers now have `Num`
  instances.\n\n  * There are now `Functor` instances for `System.Console.GetOpt`'s\n
  \   `ArgOrder`, `OptDescr`, and `ArgDescr`.\n\n  * A zero-width unboxed poly-kinded
  `Proxy#` was added to\n    `GHC.Prim`. It can be used to make it so that there is
  no the\n    operational overhead for passing around proxy arguments to model\n    type
  application.\n\n  * New `Data.Proxy` module providing a concrete, poly-kinded proxy
  type.\n\n  * New `Data.Coerce` module which exports the new `Coercible` class\n
  \   together with the `coerce` primitive which provide safe coercion\n    (wrt role
  checking) between types with same representation.\n\n  * `Control.Concurrent.MVar`
  has a new implementation of `readMVar`,\n    which fixes a long-standing bug where
  `readMVar` is only atomic if\n    there are no other threads running `putMVar`.
  \ `readMVar` now is\n    atomic, and is guaranteed to return the value from the
  first\n    `putMVar`.  There is also a new `tryReadMVar` which is a\n    non-blocking
  version.\n\n  * New `Control.Concurrent.MVar.withMVarMasked` which executes\n    `IO`
  action with asynchronous exceptions masked in the same style\n    as the existing
  `modifyMVarMasked` and `modifyMVarMasked_`.\n\n  * New `threadWait{Read,Write}STM
  :: Fd -> IO (STM (), IO ())`\n    functions added to `Control.Concurrent` for waiting
  on FD\n    readiness with STM actions.\n\n  * Expose `Data.Fixed.Fixed`'s constructor.\n\n
  \ * There are now byte endian-swapping primitives\n    `byteSwap{16,32,64}` available
  in `Data.Word`, which use\n    optimized machine instructions when available.\n\n
  \ * `Data.Bool` now exports `bool :: a -> a -> Bool -> a`, analogously\n    to `maybe`
  and `either` in their respective modules.\n\n  * `Data.Either` now exports `isLeft,
  isRight :: Either a b -> Bool`.\n\n  * `Debug.Trace` now exports `traceId`, `traceShowId`,
  `traceM`,\n    and `traceShowM`.\n\n  * `Data.Functor` now exports `($>)` and `void`.\n\n
  \ * Rewrote portions of `Text.Printf`, and made changes to `Numeric`\n    (added
  `Numeric.showFFloatAlt` and `Numeric.showGFloatAlt`) and\n    `GHC.Float` (added
  `formatRealFloatAlt`) to support it.  The\n    rewritten version is extensible to
  user types, adds a \"generic\"\n    format specifier \"`%v`\", extends the `printf`
  spec to support much\n    of C's `printf(3)` functionality, and fixes the spurious
  warnings\n    about using `Text.Printf.printf` at `(IO a)` while ignoring the\n
  \   return value.  These changes were contributed by Bart Massey.\n\n  * The minimal
  complete definitions for all type-classes with cyclic\n    default implementations
  have been explicitly annotated with the\n    new `{-# MINIMAL #-}` pragma.\n\n  *
  `Control.Applicative.WrappedMonad`, which can be used to convert a\n    `Monad`
  to an `Applicative`, has now a\n    `Monad m => Monad (WrappedMonad m)` instance.\n\n
  \ * There is now a `Generic` and a `Generic1` instance for `WrappedMonad`\n    and
  `WrappedArrow`.\n\n  * Handle `ExitFailure (-sig)` on Unix by killing process with
  signal `sig`.\n\n  * New module `Data.Type.Bool` providing operations on type-level
  booleans.\n\n  * Expose `System.Mem.performMinorGC` for triggering minor GCs.\n\n
  \ * New `System.Environment.{set,unset}Env` for manipulating\n    environment variables.\n\n
  \ * Add `Typeable` instance for `(->)` and `RealWorld`.\n\n  * Declare CPP header
  `<Typeable.h>` officially obsolete as GHC 7.8+\n    does not support hand-written
  `Typeable` instances anymore.\n\n  * Remove (unmaintained) Hugs98 and NHC98 specific
  code.\n\n  * Optimize `System.Timeout.timeout` for the threaded RTS.\n\n  * Remove
  deprecated functions `unsafeInterleaveST`, `unsafeIOToST`,\n    and `unsafeSTToIO`
  from `Control.Monad.ST`.\n\n  * Add a new superclass `SomeAsyncException` for all
  asynchronous exceptions\n    and makes the existing `AsyncException` and `Timeout`
  exception children\n    of `SomeAsyncException` in the hierarchy.\n\n  * Remove
  deprecated functions `blocked`, `unblock`, and `block` from\n    `Control.Exception`.\n\n
  \ * Remove deprecated function `forkIOUnmasked` from `Control.Concurrent`.\n\n  *
  Remove deprecated function `unsafePerformIO` export from `Foreign`\n    (still available
  via `System.IO.Unsafe.unsafePerformIO`).\n\n  * Various fixes and other improvements
  (see Git history for full details).\n"
basic-deps:
  ghc-bignum: '>=1.0 && <2.0'
  ghc-prim: '>=0.5.1.0 && <0.8'
  rts: ==1.0
all-versions:
- 3.0.3.1
- 3.0.3.2
- 4.0.0.0
- 4.1.0.0
- 4.2.0.0
- 4.2.0.1
- 4.2.0.2
- 4.3.0.0
- 4.3.1.0
- 4.4.0.0
- 4.4.1.0
- 4.5.0.0
- 4.5.1.0
- 4.6.0.0
- 4.6.0.1
- 4.7.0.0
- 4.7.0.1
- 4.7.0.2
- 4.8.0.0
- 4.8.1.0
- 4.8.2.0
- 4.9.0.0
- 4.9.1.0
- 4.10.0.0
- 4.10.1.0
- 4.11.0.0
- 4.11.1.0
- 4.12.0.0
- 4.13.0.0
- 4.14.0.0
- 4.14.1.0
- 4.15.0.0
author: ''
latest: 4.15.0.0
description-type: haddock
description: |-
  This package contains the Standard Haskell "Prelude" and its support libraries,
  and a large collection of useful libraries ranging from data
  structures to parsing combinators and debugging utilities.
license-name: BSD-3-Clause
