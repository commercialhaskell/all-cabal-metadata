all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.1.3
- 0.0.1.5
- 0.0.2.0
- 0.0.3.4
- 0.0.3.5
author: Daniel Firth
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  baserock-schema: '>=0'
  etc: '>=0'
  gitlab-api: '>=0'
  hashable: '>=0'
  lens-aeson: '>=0'
  microlens-platform: '>=0'
  rio: '>=0'
  yaml-pretty-extras: '>=0'
changelog: |
  # Changelog for baserock-schema

  ## 0.0.3.5

  Upgrade to yaml-0.8.31.1
  Add maybe-track-ref for potentially tracking ref and updating sha
  Add steal-instructions for pulling chunk instructions from a separate branch

  ## 0.0.3.4

  Use hackage version of gitlab-api

  ## 0.0.3.3

  Fix build-mode typo

  ## 0.0.3.2

  Upgrade set-all-refs and bump-shas to work on system or stratum dynamically

  ## 0.0.3.1

  Catch errors when sha is not found when updating.
  Drop .git suffix when attempting to contact gitlab api

  ## 0.0.3.0

  Switch to use Haskell-etc for cli options
  Get basic lens functionality working
  Drop MonadState database, it's not needed
  Depend on yaml-pretty-extras or file lensing

  ## 0.0.2.0

  Switch to use RIO for main loading systems
  Add basic MonadState database for Definitions
  Example sanitizer

  ## 0.0.1.5

  * Fix some schema issues.
  * Add lens interfaces.
  * Add example application using gitlab-api

  ## 0.0.1.0

  * Add Basic Chunk, Stratum and System parsing for baserock definitions V9
  * Add "AST" decoders/encoders
  * Add Stratum Graph representation
changelog-type: markdown
description: |
  # baserock-schema

  Definitions schema for baserock system definitions. This repository provides a library
  for interaction with definitions via lenses as well as several common tools for
  assisting with annoying rebase work where your development branch and master have
  diverged too much.

  ## Building

  You will need [stack](https://docs.haskellstack.org/en/stable/README/)

  You can build with

      stack build

  ## Testing

  You can run the tests with

      stack test

  ## Installing

  You can install the application by running

      stack install

  which will install the baserock executable. You may then sit in a definitions repository and run

      baserock sanitize <path/to/morph>

  ## Usage

  The main executable has several commands you can use to manipulate definitions in useful ways.
  All commands which take a <morph> field can usually be given either a system or a stratum, and
  in some but not all cases a chunk morph where it makes sense.

  You can sanitize a system or stratum with

      baserock sanitize <path/to/morph>

  You can set all the refs for every chunk in a given system or stratum by running

      baserock set-all-refs <ref> <path/to/morph>

  You can use information from gitlab to modify your morphologies. To bump the sha of
  every chunk to the HEAD of its currently listed ref, run

      baserock bump-shas <path/to/morph> -t GITLAB_API_TOKEN -u GITLAB_BASE_URL

  You can also change the ref and track shas if and only if the supplied ref exists
  on gitlab, by running

      baserock maybe-track-ref <ref> <path/to/morph> -t GITLAB_API_TOKEN -u GITLAB_BASE_URL

  You can checkout the chunk instructions for every chunk in a system or stratum from a
  different branch in the current definitoins repository, by running

      baserock steal-instructions <branch> <path/to/morph>
description-type: markdown
hash: c4dd49e0ed540da1ed95c1b82ad7b934852aea39401650f946cf107d7104582e
homepage: ''
latest: 0.0.3.5
license-name: BSD-3-Clause
maintainer: locallycompact@gmail.com
synopsis: Baserock Definitions Schema
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=4.7 && <5'
  baserock-schema: '>=0'
  hspec: '>=0'
  microlens-platform: '>=0'
  rio: '>=0'
  yaml-pretty-extras: '>=0'
