all-versions:
- 0.1.0.0
author: Alexander Thiemann
basic-deps:
  async: '>=2.0'
  base: '>=4.7 && <5'
  lifted-async: '>=0.9'
  lifted-base: '>=0.2.3'
  monad-control: '>=1.0'
  mtl: '>=2.2'
  stm: '>=2.4'
  timespan: '>=0.3'
  transformers-base: '>=0.4'
changelog: |
  # Changelog for batch

  ## 0.1.0.0

  * First release

  ## Unreleased changes
changelog-type: markdown
description: |
  # batch

  [![CircleCI](https://circleci.com/gh/agrafix/batch.svg?style=svg)](https://circleci.com/gh/agrafix/batch)

  Simplify queuing up data and processing it in batch.

  ```haskell
  import Control.Batch
  import Control.Concurrent.STM
  import Control.Monad

  example :: IO ()
  example =
    do outVar <- atomically $ newTVar []
       let cfg =
               Batch
               { b_runEveryItems = Just 5
               , b_runAfterTimeout = Nothing
               , b_maxQueueLength = Nothing
               , b_runBatch =
                       \x -> atomically $ modifyTVar' outVar (++x)
               }
       withBatchRunner cfg $ \hdl ->
           do replicateM_ 5 $ bh_enqueue hdl True
              out <-
                  atomically $
                  do x <- readTVar outVar
                     when (length x /= 5) retry
                     pure x
              out `shouldBe` [True, True, True, True, True]
  ```
description-type: markdown
hash: 27088099e383a564480ebc480e61d94721019925b1ebbeccb2e2e0d9418863f9
homepage: https://github.com/agrafix/batch#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: mail@athiemann.net
synopsis: Simplify queuing up data and processing it in batch.
test-bench-deps:
  base: '>=4.7 && <5'
  batch: '>=0'
  hspec: '>=2.4'
  stm: '>=2.4'
  timespan: '>=0.3'
