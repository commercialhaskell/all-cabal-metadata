all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.3.4.0
- 0.3.5.0
- 0.3.6.0
- 0.3.7
- 0.3.8
- 0.3.9
- 0.3.10
- 0.3.11
- 0.3.11.1
- 0.3.12
- 0.3.13
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.1
- 0.6.1.1
- 0.7.0
author: Michael Snoyman, Dan Burton
basic-deps:
  base: '>=4.6 && <5'
  bytestring: '>=0'
  containers: '>=0'
  filepath: '>=0'
  hashable: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: |
  ## 0.7.0

  * Export applicative version of Foldable and Traversable functions [#72](https://github.com/snoyberg/basic-prelude/issues/72)
  * Generalize all IO functions to MonadIO [#75](https://github.com/snoyberg/basic-prelude/issues/75)
  * Use `foldl1` for `maximumBy` and `minimumBy` [#74](https://github.com/snoyberg/basic-prelude/issues/74)
  * Remove nonexistent `foldr'` from `Data.List` hiding list
  * Remove the `lifted-base` dependency. This means that `CorePrelude`
    and `BasicPrelude` no longer expose any exception handling
    functions. This is intentional: the new recommendations from this
    library are to use an async-exception-aware exception handling
    library, either
    [safe-exceptions](https://haskell-lang.org/library/safe-exceptions)
    or [unliftio](https://www.stackage.org/package/unliftio).

  ## 0.6.1.1

  * Add `HasCallStack` for `terror`

  ## 0.6.1

  * Generalize `sum` and `product` to `Foldable` [#69](https://github.com/snoyberg/basic-prelude/issues/69)

  ## 0.6.0

  * Export `show` from `Show` typeclass, and rename current `show` to `tshow` [#67](https://github.com/snoyberg/basic-prelude/issues/67)

  ## 0.5.2

  * Expose `bool`

  ## 0.5.1

  * Expose `asum`
  * Deprecate `empty` (so it can be replaced with `Alternative`'s `empty`)

  ## 0.5.0

  * Expose more Foldable/Traversable stuff

  ## 0.4.1

  * terror

  ## 0.4.0

  * Drop system-filepath

  ## 0.3.13

  * Export converters between FilePath <-> Text, String. [#56](https://github.com/snoyberg/basic-prelude/pull/56)

  ## 0.3.12

  * Add `fromShow` [#55](https://github.com/snoyberg/basic-prelude/pull/55)

  ## 0.3.11

  * [Generalize `print`](https://github.com/snoyberg/basic-prelude/pull/51)

  ## 0.3

  * Moved a number of exports from @BasicPrelude@ to @CorePrelude@ and vice-versa.

  ## 0.2

  * Renamed `BasicPrelude` to `CorePrelude` and added a new @BasicPrelude@ module
  provided a full-featured `Prelude` alternative. Also added a number of new
  exports.

  ## 0.1

  * Initial version, code taken from @classy-prelude@ with a few minor tweaks.
changelog-type: markdown
description: |
  basic-prelude
  =============

  The premise of `basic-prelude` is that there are a lot of very commonly desired
  features missing from the standard `Prelude`, such as commonly used operators
  (`<$>` and `>=>`, for instance) and imports for common datatypes (e.g.,
  `ByteString` and `Vector`). At the same time, there are lots of other
  components which are more debatable, such as providing polymorphic versions of
  common functions.

  So `basic-prelude` is intended to give a common foundation for a number of
  alternate preludes. The package provides two modules: `CorePrelude` provides
  the common ground for other preludes to build on top of, while `BasicPrelude`
  exports `CorePrelude` together with commonly used list functions to provide a
  drop-in replacement for the standard `Prelude`.

  Users wishing to have an improved `Prelude` can use `BasicPrelude`. Developers
  wishing to create a new prelude should use `CorePrelude`.
description-type: markdown
hash: efe61aec70e6f523435d46fcd18587f28febbb1bc7d20d20e5aa249d93ed9e96
homepage: https://github.com/snoyberg/basic-prelude#readme
latest: 0.7.0
license-name: MIT
maintainer: michael@snoyman.com
synopsis: An enhanced core prelude; a common foundation for alternate preludes.
test-bench-deps: {}
