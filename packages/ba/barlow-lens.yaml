all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Danila Danko, kana
basic-deps:
  base: '>=4.7 && <5'
  first-class-families: '>=0'
  generic-lens: '>=0'
  lens: '>=0'
  profunctors: '>=0'
changelog: |
  # Changelog for `haskell`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# barlow-lens\n\nBarlow lens increases your magnification and let's
  you see the stars sparkles\n\nIn other words, barlow lens makes creating complex
  lenses such as record lenses super simple.\n\nThis package is a port of [purescript-barlow-lens](https://github.com/sigma-andex/purescript-barlow-lens)
  based on [generic-lens](https://hackage.haskell.org/package/generic-lens).\n\n##
  tl;dr\n\n<!-- FOURMOLU_DISABLE -->\n\n```haskell\n{-# LANGUAGE DataKinds #-}\n{-#
  LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE DuplicateRecordFields
  #-}\n```\n\n<!-- D\n\n{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}\n{-# HLINT ignore
  \"Use newtype instead of data\" #-}\n\nE -->\n\n<!-- FOURMOLU_ENABLE -->\n\n```haskell\nimport
  Control.Lens ((%~), (&), (^.), (^..), (^?))\nimport Data.Char (toUpper)\nimport
  Data.Lens.Barlow\nimport GHC.Generics\n```\n\n<!-- D\n\nmain :: IO ()\nmain = putStrLn
  \"hello\"\n\nE -->\n\n## Features\n\nBarlow creates optics for the following types:\n\n-
  \U0001F947 [`Records`](#tldr)\n- \U0001F4E6\U0001F408 [`Maybe`](#maybe)\n- \U0001F937\U0001F3FD‍♀️
  [`Either`](#either)\n- \U0001F4DC [`Traversables`](#traversables)\n- \U0001F381
  [`Newtype`](#newtype)\n- \U0001F916 [`Data types`](#data-types)\n\n### Records\n\n`zodiac`
  ~ field @\"zodiac\"\n\n```haskell\ndata AlphaRecord = AlphaRecord {alpha :: String}
  deriving (Generic, Show)\ndata VirgoRecord = VirgoRecord {virgo :: AlphaRecord}
  deriving (Generic, Show)\ndata ZodiacRecord = ZodiacRecord {zodiac :: VirgoRecord}
  deriving (Generic, Show)\n\nsky :: ZodiacRecord\nsky = ZodiacRecord{zodiac = VirgoRecord{virgo
  = AlphaRecord{alpha = \"Spica\"}}}\n\nspica :: String\nspica = sky ^. (bw @\"zodiac.virgo.alpha\")\n\n--
  >>> spica\n-- \"Spica\"\n\n-- >>> alfa = sky ^. barlow @\"zodiac.virgo.alfa\"\n--
  The type AlphaRecord does not contain a field named 'alfa'.\n-- In the second argument
  of `(^.)', namely\n--   `barlow @\"zodiac.virgo.alfa\"'\n-- In the expression: sky
  ^. barlow @\"zodiac.virgo.alfa\"\n-- In an equation for `alfa':\n--     alfa = sky
  ^. barlow @\"zodiac.virgo.alfa\"\n```\n\n### Maybe\n\nUse `?` to zoom into a `Maybe`.\n\n-
  `?` ~ `_Just :: Prism (Maybe a) (Maybe b) a b`\n\n```haskell\nnewtype AlphaMaybe
  = AlphaMaybe {alpha :: Maybe String} deriving (Generic, Show)\nnewtype VirgoMaybe
  = VirgoMaybe {virgo :: Maybe AlphaMaybe} deriving (Generic, Show)\nnewtype ZodiacMaybe
  = ZodiacMaybe {zodiac :: Maybe VirgoMaybe} deriving (Generic, Show)\n\nskyMaybe
  :: ZodiacMaybe\nskyMaybe = ZodiacMaybe{zodiac = Just VirgoMaybe{virgo = Just AlphaMaybe{alpha
  = Just \"Spica\"}}}\n\nspicaMaybe :: Maybe String\nspicaMaybe = skyMaybe ^? bw @\"zodiac?.virgo?.alpha?\"\n\n--
  >>> spicaMaybe\n-- Just \"Spica\"\n```\n\n### Either\n\nUse `<` for `Left` and `>`
  for `Right` to zoom into an `Either`.\n\n- `<` ~ `_Left :: Prism (Either a c) (Either
  b c) a b`\n- `>` ~ `_Right :: Prism (Either c a) (Either c b) a b`\n\n```haskell\nnewtype
  AlphaLeft = AlphaLeft {alpha :: Either String ()} deriving (Generic, Show)\nnewtype
  VirgoRight = VirgoRight {virgo :: Either () AlphaLeft} deriving (Generic, Show)\nnewtype
  ZodiacEither = ZodiacEither {zodiac :: Either VirgoRight VirgoRight} deriving (Generic,
  Show)\n\nskyLeft :: ZodiacEither\nskyLeft = ZodiacEither{zodiac = Left VirgoRight{virgo
  = Right AlphaLeft{alpha = Left \"Spica\"}}}\n\nstarLeftRightLeft :: Maybe String\nstarLeftRightLeft
  = skyLeft ^? bw @\"zodiac<virgo>alpha<\"\n\n-- >>> starLeftRightLeft\n-- Just \"Spica\"\n\nstarLeftLeft
  :: Maybe VirgoRight\nstarLeftLeft = skyLeft ^? bw @\"zodiac>\"\n\n-- >>> starLeftLeft\n--
  Nothing\n```\n\n### Traversables\n\nUse `+` to zoom into `Traversable`s.\n\n- `+`
  ~ `traversed :: Traversable f => IndexedTraversal Int (f a) (f b) a b`\n\n```haskell\nnewtype
  AlphaLeftRight = AlphaLeftRight {alpha :: Either String String} deriving (Generic,
  Show)\nnewtype VirgoLeftRight = VirgoLeftRight {virgo :: Either AlphaLeftRight AlphaLeftRight}
  deriving (Generic, Show)\nnewtype ZodiacList = ZodiacList {zodiac :: [VirgoLeftRight]}
  deriving (Generic, Show)\n\nskyList :: ZodiacList\nskyList =\n  ZodiacList\n    {
  zodiac =\n        [ VirgoLeftRight{virgo = Right AlphaLeftRight{alpha = Left \"Spica1\"}}\n
  \       , VirgoLeftRight{virgo = Right AlphaLeftRight{alpha = Right \"Spica2\"}}\n
  \       , VirgoLeftRight{virgo = Left AlphaLeftRight{alpha = Right \"Spica3\"}}\n
  \       , VirgoLeftRight{virgo = Left AlphaLeftRight{alpha = Left \"Spica4\"}}\n
  \       ]\n    }\n\nstarList :: [String]\nstarList = skyList ^.. bw @\"zodiac+virgo>alpha>\"
  & bw @\"++\" %~ toUpper\n\n-- >>> starList\n-- [\"SPICA2\"]\n\nalphaRight :: [AlphaLeftRight]\nalphaRight
  = skyList ^.. bw @\"zodiac+virgo>\"\n\n-- >>> alphaRight\n-- [AlphaLeftRight {alpha
  = Left \"Spica1\"},AlphaLeftRight {alpha = Right \"Spica2\"}]\n```\n\n### Newtype\n\nUse
  `!` to zoom into a `newtype`.\n\n- `!` ~ `wrappedIso :: Iso s t a b`\n\n```haskell\nnewtype
  AlphaNewtype = AlphaNewtype {alpha :: String} deriving (Generic)\nnewtype VirgoNewtype
  = VirgoNewtype {virgo :: AlphaNewtype} deriving (Generic)\nnewtype ZodiacNewtype
  = ZodiacNewtype {zodiac :: VirgoNewtype} deriving (Generic)\n\nskyNewtype :: ZodiacNewtype\nskyNewtype
  = ZodiacNewtype (VirgoNewtype (AlphaNewtype \"Spica\"))\n\nstarNewtype :: [Char]\nstarNewtype
  = skyNewtype ^. bw @\"zodiac!!\"\n\n-- >>> starNewtype\n-- \"Spica\"\n```\n\n###
  Data types\n\nBarlow supports zooming into arbitrary sum and product types as long
  as there is a `Generic` instance.\n\nUse `%<NAME>` to zoom into sum types, where
  `<NAME>` is the name of your data constructor. E.g. `%VirgoData` for the data constructor
  `VirgoData`.\n\nUse `%<INDEX>` to zoom into product types, where `<INDEX>` is a
  natural number.\nNote that counting for product types and tuples usually starts
  with 1 and not 0.\nSo the first element of a product is `%1`.\n\nIt is more readable
  if you separate your sum lens from your product lens with a `.` dot.\n\n- `%<NAME>`
  ~ `_Ctor :: AsConstructor ctor s t a b => Prism s t a b`\n- `%<INDEX>` ~ `position
  :: HasPosition i s t a b => Lens s t a b`\n\n```haskell\ndata ZodiacData\n  = CarinaData
  {alpha :: String}\n  | VirgoData {alpha :: String, beta :: String, gamma :: String,
  delta :: String}\n  | CanisMaiorData String\n  deriving (Generic)\n\nskyData ::
  ZodiacData\nskyData = VirgoData{alpha = \"Spica\", beta = \"Beta Vir\", gamma =
  \"Gamma Vir\", delta = \"Del Vir\"}\n\nstarData :: [Char]\nstarData = skyData ^.
  bw @\"%VirgoData%3\"\n\n-- >>> starData\n-- \"Gamma Vir\"\n```\n\n## Prerequisites\n\n<details>\n\n
  \ <summary>Spoiler</summary>\n\n- [flake.nix](./flake.nix) - code in this flake
  is extensively commented.\n- [codium-haskell](https://github.com/deemp/flakes/tree/main/templates/codium/haskell#readme)
  - this flake.\n- [codium-haskell-simple](https://github.com/deemp/flakes/tree/main/templates/codium/haskell-simple#readme)
  - a simplified version of this flake.\n- [language-tools/haskell](https://github.com/deemp/flakes/blob/main/language-tools/haskell/flake.nix)
  - a flake that conveniently provides `Haskell` tools.\n- [Conventions](https://github.com/deemp/flakes/blob/main/README/Conventions.md#dev-tools)\n-
  [codium-generic](https://github.com/deemp/flakes/tree/main/templates/codium/generic#readme)
  - info just about `VSCodium` with extensions.\n- [Haskell](https://github.com/deemp/flakes/blob/main/README/Haskell.md)
  - general info about `Haskell` tools.\n- [Troubleshooting](https://github.com/deemp/flakes/blob/main/README/Troubleshooting.md)\n-
  [Prerequisites](https://github.com/deemp/flakes#prerequisites)\n- [Nixpkgs support
  for incremental Haskell builds](https://www.haskellforall.com/2022/12/nixpkgs-support-for-incremental-haskell.html)\n-
  [flakes](https://github.com/deemp/flakes#readme) - my Nix flakes that may be useful
  for you.\n\n</details>\n\n## Quick start\n\n1. Install Nix - see [how](https://github.com/deemp/flakes/blob/main/README/InstallNix.md).\n\n1.
  In a new terminal, start a devshell, build and test the app.\n\n    ```console\n
  \   nix develop\n    cabal build\n    cabal test\n    ```\n\n1. Write `settings.json`
  and start `VSCodium`.\n\n    ```console\n    nix run .#writeSettings\n    nix run
  .#codium .\n    ```\n\n1. Open a `Haskell` file `app/Main.hs` and hover over a function.\n\n1.
  Wait until `Haskell Language Server` (`HLS`) starts giving you type info.\n\n1.
  Sometimes, `cabal` doesn't use the `Nix`-supplied packages ([issue](https://github.com/NixOS/nixpkgs/issues/130556#issuecomment-1114239002)).
  In this case, use `cabal v1-*` - commands.\n\n## Configs\n\n- [package.yaml](./package.yaml)
  - used by `stack` or `hpack` to generate a `.cabal`\n- [.markdownlint.jsonc](./.markdownlint.jsonc)
  - for `markdownlint` from the extension `davidanson.vscode-markdownlint`\n- [.ghcid](./.ghcid)
  - for [ghcid](https://github.com/ndmitchell/ghcid)\n- [.envrc](./.envrc) - for [direnv](https://github.com/direnv/direnv)\n-
  [fourmolu.yaml](./fourmolu.yaml) - for [fourmolu](https://github.com/fourmolu/fourmolu#configuration)\n-
  [ci.yaml](.github/workflows/ci.yaml) - a generated `GitHub Actions` workflow. See
  [workflows](https://github.com/deemp/flakes/tree/main/workflows). Generate a workflow
  via `nix run .#writeWorkflows`.\n- [hie.yaml](./hie.yaml) - a config for [hie-bios](https://github.com/haskell/hie-bios).
  Can be generated via [implicit-hie](https://github.com/Avi-D-coder/implicit-hie)
  to check the `Haskell Language Server` setup.\n"
description-type: markdown
hash: aa466eb0c62ed4c987bb5240bbc45f96dccd0d0e0d8412a1f06c49bc03200b5a
homepage: https://github.com/deemp/haskell-barlow-lens#readme
latest: 0.1.0.2
license-name: BSD-3-Clause
maintainer: Danila Danko, kana
synopsis: lens via string literals
test-bench-deps:
  barlow-lens: '>=0'
  base: '>=4.7 && <5'
  first-class-families: '>=0'
  generic-lens: '>=0'
  lens: '>=0'
  profunctors: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
