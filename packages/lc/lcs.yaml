all-versions:
- '0.2'
author: Ian Lynagh
basic-deps:
  array: '>=0'
  base: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Provides a function lcs that takes two lists and returns a longest
  common sublist. For example, lcs "abcd" "acbd" is either "abd" or
  "acd".

  The package provides a simple, stupid and (most of all) slow
  implementation that needs, for inputs of length m and n, O(m+n)
  space and O((m+n)!) time in the worst case.

  It also provides an implementation of the Hunt-Szymanski LCS
  algorithm, based on that in "String searching algorithms" by
  Graham A Stephen, ISBN 981021829X.

  Given inputs xs and ys of length m and n respectively, where there
  are r pairs (x, y) where x is in xs, y is in ys and x == y,
  Hunt-Szymanski needs O(r+m+n) space and O((r+m+n)*log(m+n)) time.
  Thus this is O((m+n)^2) space and O((m+n)^2*log(m+n)) time in the
  worst case.
description-type: haddock
hash: 1965ea387a15f246f2a2f15002722965cdbec1807e699db8b104f5664e4e1c39
homepage: http://urchin.earth.li/~ian/cabal/lcs/
latest: '0.2'
license-name: LicenseRef-OtherLicense
maintainer: igloo@earth.li
synopsis: Find longest common sublist of two lists
test-bench-deps: {}
