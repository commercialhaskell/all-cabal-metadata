all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
author: winterland1989
basic-deps:
  base: '>=4.7 && <5.0'
  bytestring: '>=0.10.2.0'
  data-default-class: '>=0'
  io-streams: '>=1.2 && <2.0'
  network: '>=2.3 && <4.0'
  pem: '>=0'
  tls: '>=1.3 && <2.0'
  x509: '>=1.5 && <2.0'
  x509-store: '>=1.5 && <2.0'
  x509-system: '>=1.5 && <2.0'
changelog: "# Revision history for tcp-streams\n\n## 1.0.1.1\n\n* Fix [stackage#4312](https://github.com/commercialhaskell/stackage/issues/4312):
  Relax version bound for `network`.\n\n\n## 1.0.1.0\n\n* Update test cert(the old
  one just expired).\n* Update built-in mozilla CA list(2017/06/07).\n\n## 1.0.0.0\n\nMajor
  rewrite using new `Connection` interface.\n\n* Introduce `Connection` in `Data.Connection`
  to leaverage vectorized IO.\n* Now `connect`, `accept` return `Connection`, remove
  `withXXX` functions.\n* Change exception behavior to work better with `bracket`.\n*
  `bindAndListen` 's type changed from `PortNumber -> Int -> IO Socket` to `Int ->
  PortNumber -> IO Socket`.\n* Add `bindAndListenWith` for custom socket options.\n*
  Add unix domain socket support.\n* Update built-in mozilla CA list(2017/01/18).\n\n##
  0.7.0.0\n\n* Add built-in timeout support\n* Change behavior using io-streams' convention:
  \n    * reading `InputStream` will throw exception, and the socket won't be closed.\n
  \   * writing to `OutputStream` will not cause a write until flush.\n    * writing
  empty `ByteString` to `OutputStream` will do a flush.\n\n## 0.6.0.0\n\n* Update
  built-in mozilla CA list(2016/11/02).\n* Split openssl part into [tcp-streams-openssl](hackage.haskell.org/package/tcp-streams-openssl)\n\n##
  0.5.0.0\n\n* Update built-in mozilla CA list(2016/09/14).\n* Export `Data.TLSSetting`
  from `System.IO.Streams.TLS`, and `Data.OpenSSLSetting` from `System.IO.Streams.OpenSSL`.\n\n##
  0.4.0.0\n\n* Auto add `withOpenSSL`.\n* Add `extra-libraries` to cabal file.\n\n##
  0.3.0.0\n\n* Add qualified notes, rename `closeTLS/closeSSL` to `close`.\n* Fix
  `Bad pipe` error in tls's `close`\n\n## 0.2.3.0\n\n* Add `acceptWithBufferSize`,
  `socketToStreamsWithBufferSize`, fix recv exception handler.\n\n## 0.2.2.0\n\n*
  Clean and document exception behavior.\n\n## 0.2.1.0\n\n* Fix broken document.\n\n##
  0.2.0.0\n\n* Add support for openssl using HsOpenSSL package.\n\n## 0.1.0.0\n\n*
  First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "tcp-streams\n===========\n\n[![Hackage](https://img.shields.io/hackage/v/tcp-streams.svg?style=flat)](http://hackage.haskell.org/package/tcp-streams)\n[![Build
  Status](https://travis-ci.org/didi-FP/tcp-streams.svg)](https://travis-ci.org/didi-FP/tcp-streams)\n\nOne
  stop solution for tcp client and server with tls support!\n\n+ use [io-streams](https://hackage.haskell.org/package/io-streams)
  for auto read buffering and easy streamming process.\n\n+ use [tls](http://hackage.haskell.org/package/tls)
  for tls connection.\n\nBuilt-in [mozilla CA list](https://curl.haxx.se/docs/caextract.html)
  date: 2017/06/07. \n\nFrom v0.6 TLS using [HsOpenSSL](http://hackage.haskell.org/package/HsOpenSSL)
  is split into [tcp-streams-openssl](http://hackage.haskell.org/package/tcp-streams-openssl)
  due to the difficulties of setting up openssl on many platform.\n\nAlso take a look
  at [wire-stream](http://hackage.haskell.org/package/wire-streams), for serialize/deserialize
  data. Happy hacking!\n\nExample\n-------\n\n```haskell\nimport           Data.Connection\nimport
  qualified System.IO.Streams.TCP     as TCP\nimport qualified Data.TLSSetting           as
  TLS\nimport qualified System.IO.Streams.TLS     as TLS\n\n--  TCP Client\n...\nconn
  <- TCP.connect \"127.0.0.1\" 8888\nsend conn \"Hello! World.\" ..  -- sending\nres
  <- Stream.read (source conn) ..  -- receiving\nclose conn                ..  --
  closing\n...\n\n\n-- TCP Server\n...\nsock <- TCP.bindAndListen 1024 8888\nconn
  <- TCP.accept sock\nreq <- Stream.read (source conn) ..   -- receiving\nsend conn
  \"GoodBye!\" ..  -- sending\n...\n\n\n--  TLS Client\n...\ncp <- TLS.makeTLSClientParams
  (TLS.CustomCAStore \"myCA.pem\")\nconn <- TLS.connect cp (Just \"myCAName\") \"127.0.0.1\"
  8888\n...\n\n\n--  TLS Server\n...\nsp <- TLS.makeServerParams \"server.crt\" []
  \"server.key\"\nsock <- TCP.bindAndListen 1024 8889\nconn <- TLS.accept sp sock\n...\n\n\n--
  HTTPS Client\n...\ncp <- TLS.makeClientParams TLS.MozillaCAStore\nconn <- TLS.connect
  cp Nothing \"www.google.com\" 443\nsend conn \"GET / HTTP/1.1\\r\\n\"\nsend conn
  \"Host: www.google.com\\r\\n\"\nsend conn \"\\r\\n\"\nbs <- Stream.readExactly 1024
  (source conn)\n...\n```\n\nLicense\n-------\n\nCopyright (c) 2017, Winterland\n\nAll
  rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification,
  are permitted provided that the following conditions are met:\n\n    * Redistributions
  of source code must retain the above copyright\n      notice, this list of conditions
  and the following disclaimer.\n\n    * Redistributions in binary form must reproduce
  the above\n      copyright notice, this list of conditions and the following\n      disclaimer
  in the documentation and/or other materials provided\n      with the distribution.\n\n
  \   * Neither the name of winterland1989 nor the names of other\n      contributors
  may be used to endorse or promote products derived\n      from this software without
  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
  HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
  BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS
  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN
  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
description-type: markdown
hash: 35e9ecfa515797052f8c3c01834d2daebd5e93f3152c7fc98b32652bf6f0c052
homepage: https://github.com/didi-FP/tcp-streams
latest: 1.0.1.1
license-name: BSD-3-Clause
maintainer: winterland1989@gmail.com
synopsis: One stop solution for tcp client and server with tls support.
test-bench-deps:
  HUnit: '>=1.2 && <2'
  base: '>=0'
  bytestring: '>=0'
  directory: '>=1 && <2'
  io-streams: '>=0'
  network: '>=0'
  tcp-streams: '>=0'
  test-framework: '>=0.6 && <0.9'
  test-framework-hunit: '>=0.2.7 && <0.4'
