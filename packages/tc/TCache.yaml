all-versions:
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.6.4
- 0.6.5
- 0.8.0
- 0.8.0.1
- 0.8.0.2
- '0.9'
- 0.9.0.1
- 0.9.0.2
- 0.9.0.3
- 0.9.0.4
- 0.10.0.0
- 0.10.0.1
- 0.10.0.2
- 0.10.0.3
- 0.10.0.4
- 0.10.0.5
- 0.10.0.6
- 0.10.0.8
- 0.10.0.9
- 0.10.0.10
- 0.10.0.11
- 0.10.0.12
- 0.10.1.0
- 0.10.2.0
- 0.10.2.1
- 0.10.2.2
- 0.10.2.3
- 0.10.2.4
- 0.11.0.0
- 0.12.0
- 0.12.1
- 0.13.3
author: Alberto GÃ³mez Corona
basic-deps:
  RefSerialize: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0.1.0.1'
  directory: '>=1.0'
  hashtables: '>=0'
  mtl: '>=0'
  old-time: '>=1.0'
  stm: '>=0'
  text: '>=0'
changelog: "* 0.13.x : (WIP) Major refaktoring and cleanups may break older code\n*
  0.12.1.0 : Dropped Data.Hashtable (deprecated). Now it uses the package hashtables\n*
  0.12.0.0 : space in index data in indexQuery.hs and IndexText.hs triggered errors
  in the AWS backend.  The space has been changed by \\'-\\'. So rename the \"index
  *\" files in the TCache folder in order to be recognized.  \n* 0.11.0.0 : added
  setIndexParsist to define persistence for indexes by type. started the addition
  of readDBRefs, readResources and so on for simultaneous read, writes and deletes
  of objects of the same type.\n* 0.10.2.0 : Added setDefaultPersist and modified
  the signature of setPersist in Data.TCache.DefaultPersistence. Fixed issues with
  ghc 7.6.3\n* 0.10.0.0 : version add memoization and a persistent and transactional
  collection/queue.\n* 0.10.0.8 : subversion add cachedByKeySTM\n* 0.10.0.9 : fixed
  an error in clearSyncCacheProc and SynWrite Asynchronous that checked the cache
  continuously\n* 0.9.0.4 : Solves a bug in the management of weak pointers that evaporated
  registers from the cache\n* 0.9.0.3 : Solves a lost registers bug.\n* 0.9.0.1 :
  Solves a bug when object keys generate invalid filenames, and includes changes in
  defaultPersistence to further separate serialization from input-output.\n* 0.9.0.0
  : Adds full-text indexing and search, which is incorporated into the experimental
  query language. It also changes the default Persistence mechanism. Now `ByteString`s
  are used for serialization and deserialization. A `Serializable` class and a `Persist`
  structure decouples serialization from `ByteString` and read/write to files. Both
  can be redefined separately, so the default persistence could be changed with `setPersist`
  to write to blobs in a databases, for example. Default persistence now no longer
  has to be in files.\n"
changelog-type: markdown
description: |
  # TCache

  TCache is a transactional cache written in Haskell with configurable persistence. It allows conventional STM transactions for objects that synchronize with a user-defined storage. State is kept synchronized between memory and permanent storage via transactions. Default persistence is via files, and is provided for testing purposes.

  0.9.0.4 : Solves a bug in the management of weak pointers that evaporated registers from the cache
  0.9.0.3 : Solves a lost registers bug.
  0.9.0.1 : Solves a bug when object keys generate invalid filenames, and includes changes in defaultPersistence to further separate serialization from input-output.

  0.9: Introduces full text search. Also adjusts serialization so it is achieved through byteStrings.

  This version supports backward compatibility and also permits transparent retrieval of and transactions between objects without directly using STM references. It now provides explicit STM persistent references (`DBRef`s) that leverage clean, traditional haskell reference syntax for performing database transactions.

  `DBRef`s are essentially persistent `TVar`s indexed in the cache using a traditional `readDBRef`/`writeDBRef` Haskell interface like that of the STM Monad.  Additionally, because `DBRef`s are serializable, they can be embedded in serializable registers. As they are references this means they point to other serializable registers. This enables persistent, mutable and efficient inter-object relations.

  Triggers are also included in this release. These are user defined hooks that get called on register updates. They can be used for making the actualization of inter-object relations easier, and also permit higher-level customizable accesses. The query language internally uses triggers for its indexing.

  This version also implements a straight-forward, non-intrusive, type-safe pure Haskell query language that is based on register field relations. This module can be imported separately. See `Data.TCache.IndexQuery` for further information.

  The file persistence implementation is more reliable as `IO` reads are now in STM transactions.

  To ease the implementation of other user-defined persistence, `Data.TCache.DefaultPersistence` needs to be imported explicitly for deriving file persistence instances.

  The 0.9 version adds full-text indexing and search, which is incorporated into the experimental query language.

  It also changes the default Persistence mechanism. Now `ByteString`s are used for serialization and deserialization. A `Serializable` class and a `Persist` structure decouples serialization from `ByteString` and read/write to files. Both can be redefined separately, so the default persistence could be changed with `setPersist` to write to blobs in a databases, for example. Default persistence now no longer has to be in files.
description-type: markdown
hash: 7096ee74f668d3db7dc0d795041c9709929c05953857805df8e69c6732870a89
homepage: https://github.com/agocorona/TCache#readme
latest: 0.13.3
license-name: BSD-3-Clause
maintainer: agocorona@gmail.com
synopsis: A Transactional cache with user-defined persistence
test-bench-deps:
  RefSerialize: '>=0'
  TCache: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0.1.0.1'
  directory: '>=1.0'
  hashtables: '>=0'
  mtl: '>=0'
  old-time: '>=1.0'
  stm: '>=0'
  text: '>=0'
