all-versions:
- 0.0.2
author: Peng Li and Stephan Zdancewic
basic-deps:
  base: '>=0'
  containers: '>=0'
  old-time: '>=0'
changelog: ''
changelog-type: ''
description: "Requirements:\n----------------------------------------------------------------------\n*
  Linux 2.6.x\n* GHC 6.5\n* libaio --- the Linux Asynchonrous I/O Library.\n* libipq
  --- the iptables development library (iptables-dev in Debian)\n\n  If you wish to
  try the web server, make sure that the HTML files are\n  on one of these file systems:
  ext2, ext3, jfs, xfs.  Otherwise, AIO\n  may not work.\n\nFiles and directories:\n----------------------------------------------------------------------\nIOLib/
  \     : Low-level asynchronous I/O library\n    Chunk.hs     : A type-safe representation
  of memory buffers\n    AIO.hs       : FFI wrappers for the Linux AIO library\n    Epoll.hs
  \    : FFI wrappers for the Linux epoll interface\n    NBIO.hs      : FFI wrappers
  for some non-blocking socket primitives\n    PacketIO.hs  : FFI wrappers for sending/receiving
  IP packets.\n    TCP.hs       : A proof-of-concept, purely functional TCP stack.\n\nThreadLib/
  \ : The application-level thread library\n    Thread.hs    : CPS Monad and system
  calls.\n    Workers.hs   : Some standard and reusable event loops for constructing
  \n                   application-level schedulers.\n                   A default
  scheduler implementation is also provided.\n    FileIO.hs    : Synchronous disk
  library, implemented using Linux AIO\n    SockIO.hs    : Synchronous socket library,
  implemented using standard \n                   non-blocking sockets with epoll.\n
  \   TCPSockIO.hs : Synchronous socket library, implemented using the\n                   user-level,
  customized TCP stack.\n    Mutex.hs     : A simple mutex library.\n\n\nWebClient/
  \ : An HTTP load generator application\n\nWebServer/  : A web server application.
  \ It can be linked with \n              either SockIO or TCPSockIO.\n\nCompile and
  run:\n----------------------------------------------------------------------\nFirst,
  make sure that libaio is installed on your system and you are\nusing a development
  snapshot GHC 6.5.  Then, run the shell script\n\"rebuild.sh\" to compile all the
  sources.  This should create three\nexecutable files:\n\n\tWebServer/Server.bin\n\tWebServer/Server_tcp.bin\n\tWebClient/LoadGen.bin\n\nRun
  them.  They are self-documented.  To use Server_tcp.bin, you should\nfirst run \"make
  setup\" in the WebServer/ directory to setup iptables.\nRead the Makefile for more
  information.\n\nProgramming with threads\n----------------------------------------------------------------------\nJust
  use Server.hs and LoadGen.hs as templates to start.\n\nProgramming with events\n----------------------------------------------------------------------\nThe
  scheduler is part of your application.  You can use some standard\nevent loops predefined
  in Workers.hs, or you can write your own.\n\n\nFAQ:\n----------------------------------------------------------------------\nQ:
  How to use another event source like *poll/*IO/kqueue/whatever?\n\nA: First, wrap
  up the C function calls using FFI.  AIO.hs and\nmod_aio.c is a good demo to start
  with.  Then, add system calls and\nwrite your own event loops :-)\n\nQ: How to add
  system calls?\n\nA: The current setup is not quite modular yet---you will have to
  add a\nline in Thread.hs for each system call you would like to add.  In the\nfuture,
  it is possible to make the Trace interface user-pluggable by\nadding an extra level
  of indirection.\n\nQ: How to write my own event loops?\n\nA: As a demo, LoadGen.hs
  has a customized event loop.  It does not do\nanything fancy, though.\n\nQ: How
  is the TCP stack?\n\nA: The current implementation is purely functional and it is
  quite\n   slow.  It is roughly 3x-8x slower than the linux kernel TCP stack.\n   It
  only implemented server sockets---active TCP connections are\n   not implemented
  yet.\n"
description-type: text
hash: 731f1f9cf58f84a0cda758ea2c81dfa0270bd73f96d90cef442780bea627d2d1
homepage: http://www.cl.cam.ac.uk/~pes20/Netsem/
latest: 0.0.2
license-name: BSD-3-Clause
maintainer: Don Stewart
synopsis: A purely functional TCP implementation
test-bench-deps: {}
