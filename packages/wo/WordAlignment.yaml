all-versions:
- 0.1.0.0
- 0.2.0.0
author: Christian Hoener zu Siederdissen, 2013-2017
basic-deps:
  ADPfusion: '>=0.5.2 && <0.5.3'
  AlignmentAlgorithms: '>=0.1.0 && <0.1.1'
  DPutils: '>=0.0.1 && <0.0.2'
  FormalGrammars: '>=0.3.1 && <0.3.2'
  GrammarProducts: '>=0.1.1 && <0.1.2'
  LinguisticsTypes: '>=0.0.0 && <0.0.1'
  NaturalLanguageAlphabets: '>=0.1.1 && <0.1.2'
  PrimitiveArray: '>=0.8.0 && <0.8.1'
  WordAlignment: '>=0'
  aeson: '>=0.9'
  attoparsec: '>=0.10'
  base: '>=4.7 && <5.0'
  bimaps: '>=0.1.0 && <0.1.1'
  bytestring: '>=0'
  cmdargs: '>=0.10'
  containers: '>=0'
  data-default: '>=0.5'
  deepseq: '>=1.3'
  file-embed: '>=0.0.6'
  fmlist: '>=0.9'
  ghc-prim: '>=0'
  hashable: '>=1.1'
  intern: '>=0.9'
  lens: '>=4.0'
  mtl: '>=0'
  parallel: '>=3.2'
  pipes: '>=4.0'
  primitive: '>=0.5'
  strict: '>=0.3.2'
  template-haskell: '>=0'
  text: '>=1.0'
  text-format: '>=0.3'
  transformers: '>=0'
  tuple-th: '>=0.2.4'
  unordered-containers: '>=0.2.3'
  vector: '>=0.10'
changelog: |+
  0.2.0.0
  -------

  - removed bigram scoring bug [this one deprecates all earlier versions]
  - removed upper bounds
  - flexible framework for unit tests, including a set of unit tests

  0.1.x.y
  -------

  - updated README

  0.1.0.0
  -------

  - using BTI types instead of IMMC
  - backtracking pretty printing with Text-Builders
  - updated README.md (TODO!)

  0.0.4.0
  -------

  - pretty, because we can!

  0.0.3.1
  -------

  - bugfixes

  0.0.2.0
  -------

  - partially rewritten

  0.0.1.0
  -------

  - internal, non-release version

changelog-type: markdown
description: "[![Build Status](https://travis-ci.org/choener/WordAlignment.svg?branch=master)](https://travis-ci.org/choener/WordAlignment)\n\n\n\nThis
  manual can be displayed by calling just ```WordAlign``` or alternatively\n```WordAlign
  manual```.\n\n\n\n# Word alignments in natural languages\n\nThis library and program
  are designed for the alignment of *words* in human\nlanguages.\n\nImplemented with
  ideas described in:\n\n1.  Christian Hoener zu Siederdissen  \n    *Sneaking Around
  ConcatMap: Efficient Combinators for Dynamic Programming*  \n    2012, Proceedings
  of the 17th ACM SIGPLAN international conference on Functional programming  \n    [paper](http://doi.acm.org/10.1145/2364527.2364559)
  [preprint](http://www.tbi.univie.ac.at/newpapers/pdfs/TBI-p-2012-2.pdf)  \n1.  Andrew
  Farmer, Christian Höner zu Siederdissen, and Andy Gill.  \n    *The HERMIT in the
  stream: fusing stream fusion’s concatMap*  \n    2014, Proceedings of the ACM SIGPLAN
  2014 workshop on Partial evaluation and program manipulation.  \n    [paper](http://dl.acm.org/citation.cfm?doid=2543728.2543736)
  \ \n1.  Christian Höner zu Siederdissen, Ivo L. Hofacker, and Peter F. Stadler.
  \ \n    *Product Grammars for Alignment and Folding*  \n    2014, IEEE/ACM Transactions
  on Computational Biology and Bioinformatics. 99  \n    [paper](http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6819790)
  \ \n1.  Christian Höner zu Siederdissen, Sonja J. Prohaska, and Peter F. Stadler
  \ \n    *Algebraic Dynamic Programming over General Data Structures*  \n    2015,
  BMC Bioinformatics  \n    [preprint](http://www.bioinf.uni-leipzig.de/Software/gADP/preprints/hoe-pro-2015.pdf)
  \ \n\n\n\n# Usage\n\nWord alignments require three pieces of information: (i) the
  words to be\naligned, (ii) the selection of an alignment algorithm, and (iii) a
  scoring\nscheme (either simple or bigram-based). Each of these is described below.\n\n\n\n##
  Words to be Aligned\n\nEach word is encoded as a list of *characters*. A single
  *character*, however,\nis encoded as a *list of unicode symbols*, not just a single
  symbol.\n\nThis particular encoding is necessary because there is no general one-to-one\nmapping
  of atomic alphabet symbols to unicode characters. Just consider\ncharacter decorations,
  such as *Umlaute* (even though Umlaute are available in\nunicode).\n\nAs user, you
  send a list to stdin that is formatted as follows (with all fields\nmandatory; the
  tab symbol being the separator between each column):\n\n* word id\n* language name\n*
  meaning identifier (this is a string, not a number)\n* length of the word\n* space-separated
  characters (each character is actually a string)\n\n(In case you read the plain-text
  version of this document, the 4 whitespace\ncharacters should be left out.)\n\n
  \   0\tAlbanian_Tosk\t1.100\t5\t\\' b o t ə\n    2\tAlbanian_Tosk\t1.100\t10\tr̃
  o k u lʸ i a\\' lʸ e m\n\n\n\n## Selection of Alignment Algorithm\n\nThe WordAlignment
  program comes with these modes:\n\n| Grammar   | Simple Scoring  | Bigram Scoring
  \ | Number of Input Tapes |\n|-----------|-----------------|-----------------|-----------------------|\n|
  Global    | global2simple   | global2bigram   | 2                     |\n| Overhang
  \ | global2infix    | global2infix    | 2                     |\n\nMode names can
  be shortened to unique prefixes.\n\n\n\n### Global Alignments\n\nGlobal alignments
  use a NeedlemanWunsch style algorithm with linear gap costs.\n\n\n\n### Overhang
  alignments\n\nOverhang alignments use affine gap scoring. Overhang alignments separate
  the\nalignment into three phases, the prefix, infix, and suffix phase. Typically,\nprefix
  and suffix phases have very low costs.\n\n\n\n### Options\n\n#### Common default
  options\n\n    -? --help             Display help message\n    -V --version          Print
  version information\n       --numeric-version  Print just the version number\n    -v
  --verbose          Loud verbosity\n    -q --quiet            Quiet verbosity\n\n```--verbose```
  prints status information every 10.000 alignments\n\n\n\n#### Common options for
  all alignments variants\n\n       --simplescorefile=ITEM  the file to read the simple
  scores from\n    -l --lpblock=ITEM,ITEM     compare ONLY the given pair of languages:
  i.e\n                               'Breton','Breton' or 2,3  (with the latter\n
  \                              notation '2' being the 2nd language in the input\n
  \                              file)\n       --showmanual            show the manual
  and quit\n       --filterscore=NUM       only print results with this score or higher\n
  \      --filterbacktrack=NUM   only provide backtracking results for results\n                               with
  this score or higher\n\n```--simplescorefile``` expects a score file for simple
  unigram based scoring.\nAn example file is provided under ```scores/defaultSimpleScoring```.
  For bigram\nscore files, use a file like ```scores/defaultBigramScoring```.\n\n```--lpblock```
  expects a pair of language names (Breton,Breton) or a pair of\nintegers (3,3 or
  4,6) and will then align only the given language pairs with\neach other. This option
  should be very helpful in case you want to parallelize\nthe program.\n\n```--filterscore```
  is used to limit printing results to only the alignments\nwith score not lower than
  this option. Given that printing requires a\nsignificant amount of CPU time due
  to unicode conversion, this option improves\nperformance substantially.\n\n```--filterbacktrack```
  is used to limit printing of backtracking for a given\nalignment to the best results.
  Works like ```--filterscore``` but will always\nprint the forward result.\n\n```--filternormalized```
  applies filter on the length-normalized scores instead\nof the absolute ones.\n\n\n\n####
  Options for bigram alignment variants\n\n    -b --bigramscorefile=ITEM  the file
  to read the bigram scores from\n\n```--bigramscorefile``` is used to point toward
  a file with a list of bigram\nscores for all language pairs.\n\n\n\n## Simple score
  file description\n\n\n\n## Bigram score file description\n\nIn contrast to the simple
  model above, however, character matching is now\nperformed in a bigram context.\n\nThe
  required score file is currently using an in-house format with the\nfollowing columns
  all required (with whitespace, not tab between the entries):\n\n* language name\n*
  character (bigram 1.1)\n* character (bigram 1.2)\n* language name\n* character (bigram
  2.1)\n* character (bigram 2.2)\n* score\n\nThree example lines\n\n    Albanian_Tosk
  \\' a Albanian_Tosk \\' a 4.25238\n    Albanian_Tosk \\' a Albanian_Tosk \\' b 0.402228\n
  \   Albanian_Tosk \\' a Albanian_Tosk \\' g 1.07432\n\n\n\n# Example output\n\nThe
  output are four lines for each alignment. An info line with the word ids\n(IDS),
  the alignment score (SCORE), the normalized scores (NSCORE) and the\nactual words,
  started by (WORD) and interleaved by (WORD). The next two lines\nare the alignment,
  with deletions showning up as minus symbols ```-``` in the\ndeletion field. Note
  that a deletion does not delete a character from the\ninput, it merely aligns an
  existing character in one alignment with the symbol\nfor deletion ```-``` in the
  other. The final line provides the per-column score\nfor the alignment. After the
  alignment follows one empty line.\n\nWords are written left-to-right in the information
  line, and bottom to top in\nthe alignment.\n\n    IDS: 2 3 SCORE:  93.40 NSCORE:
  \ 10.38    WORD: ^ h a u s b a u $   WORD: ^ b a u m h a u s $\n           b       a
  \      u       m       h       a       u       s       $       -       -       -\n
  \          -       -       -       -       h       a       u       s       b       a
  \      u       $\n         0.0     0.0     0.0    -1.0    -3.0    33.9    33.8    33.7
  \   -3.0    -1.0     0.0     0.0\n\n\n\n\n# Performance Notes\n\nMeasured on a core
  i5-3570K @ 3.40 GHz; single-threaded, based on 2001000 alignments.\n\nThe program
  is not compiled for multi-threading, if you need this consider the\n```--lpblock```
  option first and parallelize on the language pair level.\nOtherwise, send a mail.\n\nWhen
  aligning short words, as occur in human language, the approximate number\nof alignments
  per second is:\n\n| Mode      | Simple/Bigram   | Tapes | Alignments per Second
  |\n| :---      | :---            | :---: |                  ---: |\n| Global    |
  Simple          | 2     | 34 076\n|           | Bigram          | 2     | 26 600\n\nand
  when printing alignments via ```--filterscore``` is restricted to scores\n```>=10```
  to return about 0.6% of alignments:\n\n| Mode      | Simple/Bigram   | Tapes | Alignments
  per Second |\n| :---      | :---            | :---: |                  ---: |\n|
  Global    | Simple          | 2     | 155 635\n|           | Bigram          | 2
  \    | 192 500\n\n\n\n# Three- and Four-way Alignments\n\nThese are currently disabled.
  If you need them, consider contacting me.\n\n\n\n# Writing unit tests for WordAlign\n\nFirst,
  prepare a version of WordAlign that includes the properties test\nprogram. This
  is done as follows with a sufficiently new version of cabal:\n\n    cabal new-configure
  --enable-tests\n    cabal new-build\n\nOnce done, take a look at the ```tests```
  folder. The files with suffix\n```.golden``` are named in a special manner:\n1.
  grammar type ```global``` or ```infix```\n1. score system ```unigram``` or ```bigram```\n1.
  the score files used; for unigrams a single ```.ugdef``` file is required,\n   for
  bigrams both a ```.bgdef``` and a ```.bgms``` file are required.\n   ```.ugdef```
  files hold a unigram scoring system. ```.bgdef``` files bigram\n   default scores.
  Last, ```.bgms``` files hold scores for known bigrams.\n1. the input words file
  with the words to be aligned to each other. From the\n   file, all pairs are created
  where fst <= snd. I.e. the upper triangular\n   matrix of words.\n1. a number with
  the the co-optimals to backtrack. Normally, this should be\n   ```1``` but a small
  number of tests should have a big number here -- say\n   ```99``` and all possible
  co-optimals should be checked for correctness.\n   This may be fewer than the given
  number but at least one backtrack should\n   always be there.\n\nRunning the properties
  program will then automatically test each golden file vs\nthe WordAlign algorithm
  together with the score files as inputs.\n\nAutomatic property are done with a simple
  ```./properties``` and should be all\ngreen.\n\n## How to create new test files:\n\n1.
  Create a new *empty* file named like this example here:\n   ```global-bigram-PTSP800-PTpoSPpampa-1.golden```.\n2.
  This will test against the global Needleman-Wunsch algorithm with bigram\n   scoring.
  The score file used is the ```PTSP800.bgms``` bigram score file and\n   the ```PTSP800.bgdef```
  file. Words are taken from the\n   ```PTpoSPpampa.words``` file. Exactly one backtrack
  is generated.\n3. Fill the necessary scoring and words files.\n4. Run the ```properties```
  program as follows: ```properties --accept -i```.\n   This should fill the previously
  empty golden file created in step 1.\n5. Carefully check if the contents of this
  file are correct.\n6. If so a run of ```./properties``` should now only show green
  results. In\n   particular, the file name created under 1. should show up as a new
  property\n   that was tested.\n\n\n\n#### Contact\n\nChristian Hoener zu Siederdissen
  \ \nLeipzig University, Leipzig, Germany  \nchoener@bioinf.uni-leipzig.de  \nhttp://www.bioinf.uni-leipzig.de/~choener/
  \ \n\n"
description-type: markdown
hash: 787bb5a6b30541505a28f415b0e8aa1fae77e60921b8b53fb07aba4e061a5b7f
homepage: https://github.com/choener/WordAlignment
latest: 0.2.0.0
license-name: GPL-3.0-only
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Bigram word pair alignments.
test-bench-deps:
  DPutils: '>=0'
  NaturalLanguageAlphabets: '>=0'
  WordAlignment: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  filepath: '>=0'
  split: '>=0.2.3'
  tasty: '>=0.11'
  tasty-quickcheck: '>=0.8'
  tasty-silver: '>=3.1.9'
  tasty-th: '>=0.1'
  text: '>=0'
