homepage: https://github.com/aneilmac/worldturtle-haskell#readme
changelog-type: markdown
hash: 5981a1bf350da86da4e1568a728fc911cd87d9df4b39f0521fceabb992b62b8c
test-bench-deps: {}
maintainer: archibaldnmac@gmail.com
synopsis: LOGO-like Turtle graphics with a monadic interface.
changelog: "# Changelog for turtle-haskell\r\n\r\n## v0.3.1.0\r\n\r\n* Fixed longstanding
  bug where turtle rotation did not \r\n  rotate at the advertised rate.\r\n* Fixed
  longstanding bug where rotation did not accept negative\r\n  values gracefully.\r\n*
  Tweaked intial turtle rotation speed to 720 degrees/sec.\r\n* `goto` command now
  animates a transition.\r\n* Removed `setPosition` function.\r\n\r\n## v0.3.0.0\r\n\r\n*
  Upgraded to `lts-18.27`.\r\n* Added `runWorld'` and `runTurtle'` variant commands
  which take a background color.\r\n* Deprecated `setPosition`.\r\n* Added `jump`,
  which is a variant of `goto` which never draws a line.\r\n* Added `wait` command,
  which is a `TurtleCommand` variant of `sleep`.\r\n* Added `label` and `label'` commands,
  which allows text to be drawn at turtle's position.\r\n* Added `repeatFor` method
  which is an alias for `Control.Monad.replicateM_` (this is purely \r\n  to help
  ease students into Monad concepts.)\r\n* `TurtleCommand` and `WorldCommand` are
  now instances of `MonadIO`.\r\n* Major internal performance improvements. `SequenceCommand`,
  is now a `Coroutine`. \r\n  This reduces wasted calculations per-frame as the state
  of the previous frame \r\n  can now be carried into the next frame of animation.\r\n*
  Removed `WorldCommand` as an instance of `Control.Applicative` and `MonadPlus`.
  This did not\r\n  make sense in terms of parallelization. Instead, `WorldComamnd`
  is now an instance of `MonadParallel`\r\n* Introduced new `>!>` operator for parallel
  animations.\r\n* `setPenDown` has been split into `setPenDown` and `setPenUp` to
  be more LOGO-like.\r\n* `setVisible` has been split into `setVisible` and `setInvisible`
  to be more LOGO-like.\r\n* Added the `labelwait-exe` test.\r\n* Updated examples
  to account for command changes.\r\n* Removed `spaceleak-exe` test.\r\n\r\n## v0.2.2.1\r\n\r\n*
  Upgrading upper bounds of the lens package to allow for compilation with GHC\r\n
  \ 9.0.1.\r\n* Regenerated `.travis.yml` to reflect new GHC supported version.\r\n\r\n##
  v0.2.2\r\n\r\n* Upgrading to GHC 8.10.3 to resolve problems GHC compiler problems
  with Mac \r\nOSX. See [here](https://gitlab.haskell.org/ghc/ghc/-/issues/18446)
  for details.\r\n* Fixed issue where newly drawn lines were drawn under older lines.\r\n\r\n##
  v0.2.1\r\n\r\n* Internally simplified the commands system to use a Maybe Monad for
  sequencing.\r\n\r\n## v0.2.0\r\n\r\n* Split `TurtleCommand` into `TurtleCommand`
  and `WorldCommand` to help reduce\r\n  boilerplate of having to apply a turtle to
  a command for every stage of a\r\n  command block.\r\n* Added `runWorld`, `runTurtle`,
  `run`, and `(>/>)` functions.\r\n* `circle` command split into `arc` and `circle`
  commands.\r\n* Fixed `shiftHue` as function did not match documentation.\r\n\r\n##
  v0.1.2\r\n\r\n* Added the `branch` function.\r\n\r\n## v0.1.1\r\n\r\n* Added `sleep`
  function.\r\n* Added `rotationSpeed` function.\r\n* Added the `shiftHue` color function.\r\n*
  Fixed bugs in circle rendering when going in a clockwise direction.\r\n* Fixed the
  bounds and potential recursion pitfall in internal normalization\r\n  functions.\r\n*
  If rotation left 270 degrees will not turn right 90 degrees and vice versa.\r\n\r\n##
  v0.1.0\r\n\r\nInitial release.\r\n"
basic-deps:
  gloss: '>=1.13.1 && <1.14'
  base: '>=4.13 && <4.16'
  matrix: '>=0.3.6 && <0.4'
  monad-coroutine: '>=0.9.1.3 && <0.10'
  containers: '>=0.6.2 && <0.7'
  lens: '>=4.18.1 && <5.2'
  monad-parallel: '>=0.7.2.5 && <0.8'
  transformers: '>=0.5 && <0.6'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.2.0
- 0.2.2.1
- 0.3.0.0
- 0.3.1.0
author: Archibald Neil MacDonald
latest: 0.3.1.0
description-type: haddock
description: "Have you ever heard of [Turtle Graphics](https://en.wikipedia.org/wiki/Turtle_graphics)?\n\nIf
  not, then think of a @turtle@ as a cursor you can program to draw! \n\nTurtle graphics
  are a fantastic introduction to the world of\n  programming and to the syntax of
  a new programming language.\n\n![parallelcircles gif](https://hackage.haskell.org/package/worldturtle-0.2.0.0/docs/docs/images/parallel_circles_animated_300.gif)\n\nThis
  module is a framework built on top \nof [gloss](https://hackage.haskell.org/package/gloss)
  to render turtles\nprogrammed in Haskell as animations. This is primarily aimed
  as a \nteaching tool to beginners - but also, it's cool to draw things!\n\nSee The
  API ref, \"Graphics.WorldTurtle\", for features!\n\nIt's easy to create a new project
  with stack:\n\n> stack new my-worldturtle-project aneilmac/worldturtle\n> cd my-worldturtle-project\n>
  stack build\n> stack exec my-worldturtle-project"
license-name: BSD-3-Clause
