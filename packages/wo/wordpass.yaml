homepage: https://github.com/mgajda/wordpass
changelog-type: text
hash: 87e8168a5c288bc9286f5fe5d691b5c8c09851301429850390c6ec751f30738b
test-bench-deps: {}
maintainer: mjgajda@gmail.com
synopsis: Dictionary-based password generator
changelog: "-*-Changelog-*-\n1.0.0.11 Mar 2023\n        * Tested with Stackage LTS
  18.28 and nightly-2023-03-08\n\t  (GHC 8.10, and GHC 9.4.4)\n\t* Upgraded `stack.yaml`
  to 20.17 (GHC 9.2)\n\t* **No changes to Haskell code**, just relaxed deps.\n\n1.0.0.10
  Jul 2018\n\t* Random case for words.\n\t* Bump to GHC 8.4 and LTS 11.2\n\n1.0.0.9
  \ May 2018\n        * Use Test.QuickCheck.Gen for random generation instead of RVar.\n\n1.0.0.8
  \ Nov 2017\n\t* Relax deps for GHC 8.2.\n\n1.0.0.7  Nov 2016\n        * Updated
  to directory-1.2.6.2 on GHC 8.0.\n        * Added stack recipe.\n\n1.0.0.6  Jun
  2016\n        * Updated imports for GHC 8.0.\n\n1.0.0.5  May 2016\n\t* Updated bounds
  for GHC 8.0.\n\n1.0.0.4  Jul 2015\n\t* Relaxed upper bounds for vector 0.11.\n\n1.0.0.3
  \ Mar 2015\n\t* Relaxed upper bounds again.\n\n1.0.0.2  Dec 2014\n\t* Relaxed upper
  bounds again.\n\n1.0.0.1  Dec 2014\n\t* Relaxed upper bounds for GHC 7.10\n\n1.0.0.0
  \ Oct 2014\n\t* Stable release.\n\n0.5.0.0  Oct 2014\n\t* Expose library interface.\n\n0.4.2.0
  \ Jul 2014\n\t* Workaround bug in GHC 7.8 that misses last instance during Template\n\tHaskell
  enumeration of class instances in HFlags.\n\n0.4.1.0  May 2014\n\t* Various esthetic
  fixes.\n\n0.4.0.0  May 2014\n\t* Option to select standard Haskell random number
  generator or /dev/random.\n\t* Pre-filtering input files to get rid of symlinks
  to files that are\n\talready there, and READMEs.\n\t* Splitted Data.Random.{Choice|Vector}
  to be submitted for inclusion\n\tin random-fu.\n\n0.3.0.0  May 2014\n\t* CLI interface
  with HFlags and documentation.\n\n0.2.0.0  May 2014\n\t* Working script.\n\n0.1.0.0
  \ May 2014\n\t* Uncommented prototype.\n"
basic-deps:
  base: '>=4.4 && <4.18'
  text: '>=1.1 && <2.1'
  unix-compat: '>=0.4 && <0.7'
  filepath: '>=1.3 && <1.5'
  containers: '>=0.5 && <0.7'
  optparse-applicative: '>=0.12 && <0.18'
  deepseq: '>=1.3 && <1.5'
  QuickCheck: '>=2.0 && <3.0'
  vector: '>=0.10 && <0.13'
  directory: '>=1.2 && <1.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
- 1.0.0.5
- 1.0.0.6
- 1.0.0.7
- 1.0.0.9
- 1.0.0.10
- 1.0.0.11
author: Michal J. Gajda
latest: 1.0.0.11
description-type: markdown
description: |+
  WordPass
  ========

  Dictionary-based password generator.

  [![Build Status](https://api.travis-ci.org/mgajda/wordpass.png?branch=master)](https://travis-ci.org/mgajda/wordpass)
  [![Hackage](https://img.shields.io/hackage/v/wordpass.svg)](https://hackage.haskell.org/package/wordpass)
  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/wordpass.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=wordpass)


  Script reads dict word lists and generates word-based passwords.
  Uses dictionaries from /usr/share/dict by default.
  Inspired by [xkcd comic](http://xkcd.com/936/).

  Program also prints how many words have been read, and indicates estimated
  password space size in bits.

  Using just four words from default English dictionary of ~50k words will
  give approximately 90 bits of entropy. Lucky speakers of languages with
  rich inflection like Polish (over 3 million word variants) can easily up
  this to over 110 bits of entropy.

license-name: BSD-3-Clause
