all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
- 1.1.0.1
author: Rick Owens
basic-deps:
  Only: '>=0.1 && <0.2'
  base: '>=4.12 && <4.14'
  postgresql-simple: '>=0.6.2 && <0.7'
  text: '>=1.2.3.1 && <1.3'
  time: '>=1.8.0.2 && <1.10'
changelog: ''
changelog-type: ''
description: "# Ribbit\n\n- [Ribbit](#ribbit)\n    - [Status](#status)\n        -
  [Current Features](#current-features)\n            - [Basic @Select .. From ..](#basic-select--from-)\n
  \           - [Cross product](#cross-product)\n            - [Conditionals](#conditionals)\n
  \           - [Limited `CREATE TABLE` support.](#limited-create-table-support)\n
  \           - [`INSERT INTO` support.](#insert-into-support)\n            - [`DELETE
  FROM` support.](#delete-from-support)\n            - [`UPDATE TABLE` support.](#update-table-support)\n
  \   - [Roadmap](#roadmap)\n        - [Flesh out Haskell to PostgreSQL type mapping.](#flesh-out-haskell-to-postgresql-type-mapping)\n
  \   - [How it compares with other libraries.](#how-it-compares-with-other-libraries)\n
  \   - [The name: Ribbit](#the-name-ribbit)\n\nRibbit is yet another type safe relational
  database\nlibrary for Haskell, heavily inspired by the amazing\n[Servant](http://hackage.haskell.org/package/servant)
  library. The goal\nis to create a type-level language for defining table schemas
  \"as a type\",\nqueries that operate on those schemas, and, tangentially, \"backends\"
  that\ncan do something useful with those types like talk to an actual database.\n\n\nUsing
  Ribbit, you might expect to see something like this:\n\n```haskell\ndata PeopleTable\ninstance
  Table PeopleTable where\n  type Name PeopleTable = \"people\"\n  type DBSchema PeopleTable
  =\n    Field \"id\" Int\n    :> Field \"name\" Text\n    :> Field \"age\" Int\n
  \ \n\ntype MyQuery = Select '[\"id\", \"name\"] `From` PeopleTable `Where` \"age\"
  `Equals` (?)\n\nmatchingPeople <-\n  query\n    dbConn\n    (Proxy :: Proxy MyQuery)\n
  \   (Only 21) -- argument that fills in the (?) placeholder\n\n  :: IO [Only Int
  :> Only Text]\n\n```\n\n## Status\n\nThe status of Ribbit \"Very Incomplete\". My
  goal is to take a \"depth\nfirst\" approach, where every feature added is production
  ready\nbefore moving on to the next feature. Featured back-ends include\n[postgresql-simple](https://hackage.haskell.org/package/postgresql-simple)\nat
  this time.\n\n### Current Features\n\nThese are the features that are currently
  implemented.\n\n#### Basic @Select .. From ..\n\nWe support queries of the form:\n\n```haskell\ntype
  MyQuery = Select '[\"field1\", \"field2\"] `From` MyTable\n```\n\n#### Cross product\n\nWe
  support queries of the form:\n\n```haskell\ntype MyQuery = Select '[\"t1.field1\",
  \"t2.field2\"] `From` '[MyTable1 `As` \"t1\", MyTable2 `As` \"t2\"]\n```\n\n####
  Conditionals\n\nWe support queries of the form:\n\n```haskell\ntype MyQuery = Select
  '[\"field1\", \"field2\"] `From` MyTable `Where` <condition>\n```\n\nWhere ```<condition>```
  can include:\n\n- ```a `And` b```: Basic intersection.\n- ```a `Or` b```: Basic
  union.\n- ```\"field\" `Equals` (?)```: Test for equality. This introduces a query
  parameter that must be supplied at runtime.\n- ```\"field1\" `Equals` \"field2\"```:
  Test the equality of two fields (that both must exist in the schema)\n- ```a `Lt`
  b```: Less than operator.\n- ```a `Lte` b```: Less than or equal to operator.\n-
  ```a `Gt` b```: Greater than operator.\n- ```a `Gte` b```: Greater than or equal
  to operator.\n- ```Not a```: Not operator.\n- ```\"field\" `NotEquals` (?)```: Test
  for inequality against a query parameter.\n- ```\"field1\" `NotEquals` \"field2\"```:
  Test for inequality between two fields.\n\n#### Limited `CREATE TABLE` support.\n\nThe
  postgresql-simple backend supports creating tables in the\ndatabase. This support
  is \"limited\" because it misses the following\nfeatures:\n\n- PostgreSQL column
  types are know for only a small number of Haskell types.\n  This is extensible by
  the user (by implementing a type class), but it would\n  be nice to have a more
  comprehensive set of mappings out of the box.\n\n- Foreign key constraints are not
  yet supported.\n\n- Arbitrary non-primary-key indexes are not yet supported.\n\nWhat
  *IS* supported already is:\n\n- Determining whether a field is nullable, based on
  whether the corresponding\n  Haskell type is wrapped in a `Maybe`.\n\n- Compound
  primary keys. I.e. primary keys consisting of more than one\n  component.\n\n####
  `INSERT INTO` support.\n\nBasic inserts are supported:\n\n```haskell\ntype MyInsert
  = InsertInto PeopleTable '[\"id\", \"name\", \"age\"]\n\nexecute\n  conn\n  (Proxy
  :: Proxy MyInsert)\n  (Only 1 :> Only \"Bob Marley\" :> Only 36)\n```\n\n#### `DELETE
  FROM` support.\n\nBasic deletes are supported:\n\n```haskell\ntype MyDeleteEveryone
  = DeleteFrom PeopleTable\ntype MyDeleteById = DeleteFrom PeopleTable `Where` id
  `Equals` (?)\n\nexecute\n  conn\n  (Proxy :: Proxy MyDeleteEveryone)\n  ()\n\nexecute\n
  \ conn\n  (Proxy :: Proxy MyDeleteById)\n  (Only 1)\n```\n\n#### `UPDATE TABLE`
  support.\n\nBasic updates are supported:\n\n```haskell\nexecute\n  conn\n  (Proxy
  :: Proxy (\n    Update PeopleTable\n      '[\n        \"name\", -- each field adds
  a query parameter so you can\n        \"age\"   -- provide the new value at run
  time.\n      ]\n    `Where` (\n      \"id\" `Equals` (?)\n    )\n  ))\n  (Only newName
  :> Only newAge :> Only targetEmployeeId)\n```\n\n\n## Roadmap\n\nThis is what I
  plan to work on next:\n\n### Evaluate the usefulness of what I've got so far.\n\nI'm
  am half pleased with the way the query language turned out, because\nsomeone with
  understanding of SQL can at least read and modify queries,\neven if they would find
  it hard to construct them from scratch without\nexamples, but I still feel they
  could be more ergonomic in at least two ways:\n\n1) Better error messages for compiler-guided
  development.\n2) Fewer backticks.\n\nI have tried playing around with defining the
  query language in terms\nof value level constructs, which I think can help improve
  both of these\nissues, but I haven't yet gotten that to work without requiring so
  much\ntype annotation that it defeats the purpose of ergonomics. I have some\nvague
  idea about how I might solve that with generic instances, but I\nam reluctant to
  do anything that smacks of \"magic\" without exhausting\nall other possibilities
  first.\n\n### Flesh out Haskell to PostgreSQL type mapping.\n\nAs mentioned above,
  only a small number of Haskell types are mapped\nto PostgreSQL types out of the
  box. We would like to make this a more\ncomprehensive mapping out of the box.\n\n##
  How it compares with other libraries.\n\nThe short answer is there are a lot of
  other libraries and I'm not sure.\nPersistent and esquelleto are ones I've used,
  but if you search \"relational\" or\n\"sql\" in Hackage there seems to be a lot
  of other options. Part of the goals\nfor this library are to flesh out this approach
  myself, so I can have a better\ncontext for understanding everything else available.
  In other words, it is part\nresearch project. With that in mind, there are at least
  a couple of specific\ngoals I have in mind:\n\n- Avoid template Haskell. Persistent
  is amazing, but the use of Template\n  Haskell makes certain things difficult, like
  documenting (or for large\n  projects even understanding) everything that is produced
  by the Template\n  Haskell.\n\n- Make the language easy to understand. If you have
  some basic SQL knowledge,\n  it should be immediately obvious what is going on even
  if you are a beginner\n  Haskeller.\n\n- Try to make as much stuff happen at the
  type level as possible. The ability\n  to write your own type classes or type families
  over Servant API types is, I feel,\n  part of what makes Servant so amazing. I want
  to replicate that success here.\n  So, for instance, if someone somewhere defines
  a schema type that looks like\n  this:\n\n  ```haskell\n  type MySchema =\n    Field
  \"id\" Int\n    :> Field \"name\" Text\n    :> Field \"address\" (Maybe Text)\n
  \ ```\n\n  Then you would be free to deconstruct this type (using type families),\n
  \ transform it into another schema, generate customized `CREATE TABLE`\n  statements
  if the ones provided aren't good enough for your back-end or\n  use case... that
  sort of thing. As a somewhat contrived example: maybe,\n  for who knows what reason,
  you never want to allow null values in your\n  database. You can write a type family
  that can inspect every field in\n  an arbitrary schema, replacing all the `Maybe
  a` with just `a`, like:\n\n  ```haskell\n  -- With -XPolyKinds\n  type family NoNulls
  schema where\n    NoNulls (Field name (Maybe typ)) = Field name typ\n    NoNulls
  (a :> b) = NoNulls a :> NoNulls b\n    NoNulls a = a\n\n  NoNulls MySchema \n  --
  Same as:\n  --   Field \"id\" Int\n  --   :> Field \"name\" Text\n  --   :> Field
  \"address\" Text <--- note the lack of Maybe\n  ```\n\n\n## The name: Ribbit\n\nThe
  name means nothing except I kindof like the sound of it. There are so many\n\"sql\",
  \"relational\", \"query\", etc. package names already that I didn't want to:\n\n1)
  get lost in the mix.\n2) step on anyone's toes by choosing too similar a name.\n3)
  create confusion by seeming to be associated with some other package with\n   which
  I am not.\n\n"
description-type: markdown
hash: 0685139d4dbf7f3aea3029ec17d30d42dc5cabd6cd6d0e8e4291ae521eabbe02
homepage: https://github.com/owensmurray/ribbit
latest: 1.1.0.1
license-name: MIT
maintainer: rick@owensmurray.com
synopsis: '[Unmaintained] Type-level Relational DB combinators.'
test-bench-deps: {}
