homepage: https://github.com/sheyll/rio-process-pool#readme
changelog-type: ''
hash: 43ccad393d1df45f778fe8af4a4fd6c4ed4963dc715bd4d946a48b07250d1ffb
test-bench-deps:
  rio: -any
  unliftio: -any
  base: '>=4.14 && <5'
  text: -any
  rio-process-pool: -any
  criterion: -any
  async: ==2.*
  data-default: ==0.7.*
  HUnit: -any
  unliftio-messagebox: '>=2.0.0 && <3'
  containers: '>=0.5.8 && <0.7'
  atomic-primops: -any
  tasty-quickcheck: -any
  mtl: -any
  hashable: -any
  tasty-hunit: -any
  tasty: -any
  tasty-html: -any
  QuickCheck: -any
maintainer: sven.heyll@gmail.com
synopsis: A library for process pools coupled with asynchronous message queues
changelog: ''
basic-deps:
  rio: -any
  unliftio: -any
  base: '>=4.14 && <5'
  text: -any
  rio-process-pool: -any
  async: ==2.*
  data-default: ==0.7.*
  unliftio-messagebox: '>=2.0.0 && <3'
  containers: '>=0.5.8 && <0.7'
  mtl: -any
  hashable: -any
  QuickCheck: -any
all-versions:
- 1.0.0
- 1.0.1
author: Sven Heyll
latest: 1.0.1
description-type: markdown
description: "# Concurrent Process Pools\n\n**NOTE:** To be able to fully view this
  README, use the [GitHub Pages Version](https://sheyll.github.io/rio-process-pool/).\n\n*
  [API docs](./generated-reports/haddock-report/rio-process-pool)\n* [API docs on
  Hackage](http://hackage.haskell.org/package/rio-process-pool)\n\nA process pool
  processes incoming messages and dispatches them to worker threads.\n\nWorker threads
  are started and stopped and each has their own message box, that decouples\nfrom
  the processes for asynchronous processing.\n\nThe main architectural advantages
  are the usage of multiple CPU cores and the seperation of\naddress spaces of each
  worker.\n\nThis is clearly more low-level than STM in that regard, that STM offers
  \nshared memory concurrency.\n\nThis is also just a small library built on top of
  [unliftio-messagebox](https://sheyll.github.io/unliftio-messagebox/).\n\n## Module
  Structure\n\nThe library is contained in modules with names starting with \n**RIO.ProcessPool**.\n\n![Module
  Structure](./generated-reports/module-graph/module-graph.png)\n\nAlso the module
  \n`RIO.ProcessPool` [(API docs)](./generated-reports/haddock-report/rio-process-pool/rio-process-pool.html)\n[(Hackage)](http://hackage.haskell.org/package/rio-process-pool/docs/rio-process-pool.html)\nexposes
  the API, and can be used to import everything.\n\nThe full documentation is either
  [on this page](./generated-reports/haddock-report/rio-process-pool/index.html)[(build
  log)](./generated-reports/haddock-report/build.log)\nor on [Hackage](http://hackage.haskell.org/package/rio-process-pool).\n\n##
  Benchmarks\n\n* [Single Core Results](./generated-reports/benchmark-report/benchmark-1-CORES.html)\n*
  [Multi Core Results](./generated-reports/benchmark-report/benchmark-ALL-CORES.html)\n\n##
  Unit Tests\n\n* [Test Results](./generated-reports/test-profiling-report/test-result.html)\n*
  [Test Coverage](./generated-reports/test-coverage-report/hpc_index.html)\n### Heap
  Profiling\n\n![Test Heap Profiling Report](./generated-reports/test-profiling-report/rio-process-pool-test.svg)\n\n###
  Time Profiling\n\n[Test Profiling Report](./generated-reports/test-profiling-report/rio-process-pool-test.prof)\n\n##
  Memory Leak Tests\n\nBenchmark memory usage of a very simple `Pool` example.\n\nA
  single dispatcher process sends a `Start`, some `Work` and a\n`Stop` message to
  a `Pool` that spawns and dispatches the message\n\nThis is a rather long running
  test,\nexecuted with capped memory so that when space is leaked, it \nwill crash
  the benchmark.\n\n![Pool Memleak Test Heap Profiling Report](./generated-reports/pool-memleak-test-report/rio-process-pool-memleak-test.svg)\n\nThe
  output is printed into [this log file](./generated-reports/pool-memleak-test-report/test.log).\n"
license-name: BSD-2-Clause
