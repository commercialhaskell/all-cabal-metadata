all-versions:
- 0.8.3
- 0.8.5
- 0.8.6
author: Ketil Malde
basic-deps:
  base: '>3 && <5'
  bio: '>=0.3.1'
  bytestring: '>=0'
  containers: '>=0'
changelog: ''
changelog-type: ''
description: "  New in this version (0.8)\n  -------------------------\n\nMostly a
  maintenance release, but at least we have\n\n* Cabalized install\n\n* Sparse mode
  completed and optimized\n\n* More reasonable default parameters\n\n  Acquiring RBR\n
  \ -------------\n\nI'll try to keep a selection of source and binaries at:\n\n    http://www.ii.uib.no/~ketil/bioinformatics/downloads/software\n\nIf
  you need binaries for other architectures, drop me a mail at\n<ketil@ii.uib.no>.
  \ The latest version should always be available from\nmy darcs repo: \n\n    darcs
  get http://www.ii.uib.no/~ketil/bioinformatics/repos/rbr\n\n\n  Installation instructions\n
  \ -------------------------\n\nI'm working on a smoother installation process, but
  this is how it\ncurrently works.\n\nYou need GHC (http://haskell.org/ghc).  Everything
  is tested against\nversion 6.8, but older versions might also work.  Expect to do
  some\nmodifications in the code for earlier versions than that.\n\nYou first need
  to get my 'bio' library, it is available from the same\nwebsite, and install that.
  \ You can use cabal to install the binary,\nat the top level, do\n\n   chmod +x
  Setup.hs\n   ./Setup.hs configure  (add --prefix=$HOME if you don't have root access)\n
  \  ./Setup.hs build\n   {sudo} ./Setup.hs install\n\nIf you want to go the more
  manual route, cd to the src subdirectory, and\n\n    make rbr    -- builds a dynamically
  linked executable\nor: make rbr_s  -- builds a statically linked executable\n\nThe
  main development platform is Linux/x86, so expect that to be most\nwell supported.
  \ In order to build on an aging Sun with an old gcc\n(2.95), I had to comment out
  'hooks.o' from the Makefile, and static\nbuild didn't work either.  I'm investigating
  this, but perhaps it\nsuffices to have a current GCC available, and/or a newer Solaris.\n\n\n
  \ Usage\n  -----\n\nI've no real manual page yet, but 'rbr --help' should list the\navailable
  options.  Basically, masking is determined by examining word\nfrequencies of a certain
  word length (-k), estimating a distribution\naround the \"modal interval\" of the
  word frequencies with a certain\nstringency (-s), and masking words with frequencies
  exceeding the mean\nof this distribution by a certain standard deviations (-t).
  \ Defaults\nare -k 16 -s 1.1 -t 5.0 if -L (lower case masking) is specified and\n-k
  16 -s 2.0 -t 8.0 if -n (masking with 'n') is specified.  Lower case\nis now the
  default.\n\nTo mask more agressively, you can either try to reduce stringency, or\na
  lower deviation, or both.  Conversely if you want more conservative\nmasking.  In
  general, the differences are small, and typically you can\ncompensate for a decrease
  in one parameter with an increase in the\nother. \n\nShorter word length will be
  more tolerant against SNPs and read\nerrors, but increase the variance.  Longer
  will be less tolarant, but\nhave less variance.  In addition, word lengths beyond
  16 will be\nslower.\n\nThere's also a --sparse=X option that will store a fraction
  (but at\nleast every X'th) of the words.  This will reduce memory consumption proportionally.\n\nRBR's
  memory usage can be limited with options to the run time\nsystem's garbage collector.
  \ I good rule of thumb may be to limit it\nto 80-90% of available physcal memory,
  which will avoid paging to\ndisk.  If RBR is compiled with hooks.o linked in, this
  will be the\ndefault, but if other behaviour is desired, you can use \"+RTS -MxxxM\n-RTS\"
  to limit heap use to xxxMB¹.  See the GHC documentation\n(http://haskell.org/ghc)
  for more on this.  Usually, you'll get better\nperformance by supplying -HxxxM as
  well (this will reduce GC time,\nagain see the GHC docs).\n\nThe -v option gives
  some feedback while RBR runs, which is nice if\nyou're using it interactively.\n\nThere
  is also a server mode, where RBR will index a data set, and\nlisten on stdin for
  sequence names, and answer on stdout with the\noriginal sequence, the masked sequence,
  and the distribution of word\nfrequencies along the sequence.\n\n\n¹) GHC version
  6.6 and earlier had a bug that would cause memory\nconsumption to be measured incorrectly
  if the system allocated it in\nan unusual order.  The fix will be in subsequent
  releases of GHC."
description-type: text
hash: 03361f2b6b2af85a0d2934ed49a138de0ed7b4f3fb695b77bc296b359c53a460
homepage: http://malde.org/~ketil/
latest: 0.8.6
license-name: LicenseRef-GPL
maintainer: Ketil Malde <ketil@malde.org>
synopsis: Mask nucleotide (EST) sequences in Fasta format
test-bench-deps: {}
