all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
author: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
basic-deps:
  base: '>=0'
  directory: '>=0'
  filepath: '>=0'
  mtlparse: '>=0.0.1'
  process: '>=0'
  regexpr: '>=0.3.3'
  utf8-string: '>=0'
  yjtools: '>=0.8'
changelog: ''
changelog-type: ''
description: |-
  You can embed haskell in Text file.
  You can use in html, haskell source, and so on.

  > <%%   ... %%> : <%% import Some.Module %%> <%% h = "hello" %%>
  > <%    ...  %> : <% ln <- getLine %>
  > <%    ... -%> ... <%- ... -%> ... <%- ... %>: <% if b then -%>Yes<%- else -%>No<%-%>
  > <%=   ...  %> : <%= "hello" %>
  > <%==  ...  %> : <%== getLine %>
  > <%=$  ...  %> : <%=$ 123 %>
  > <%==$ ...  %> : <%==$ getClockTime %>

  You can put code at top level by \<%% ... %%\>.

  You can put code in do-notation by \<% ... %\>.

  You can get args by \<% ... -%\> ... \<%- ... -%\> ... \<%- ... %\>.

  If you write \<% func -%\>abc\<%- def -%\>ghi\<% jkl %\>mno\<%- pqr %\>,

  translate in "func (putStr "abc") def (putStr "ghi") jkl (putStr "mno") pqr"
  and execute.

  You can put dinamic String by \<%== .. %\>.

  And rests (\<%= ... %\>, \<%==$ ... %\>, \<%=$ ... %\>) are just syntax sugar.

  \<%= some %\>   == \<%== return some %\>

  \<%==$ some %\> == \<%== some \>\>= return . show %\>

  \<%=$ some %\>  == \<%== return $ show some %\>
description-type: haddock
hash: 1c22f2d3c20068f820f169a53606d80f33a6ee453356c1f76aa6ad1420de8fb4
homepage: http://homepage3.nifty.com/salamander/second/projects/ehaskell/index.xhtml
latest: '0.7'
license-name: LicenseRef-GPL
maintainer: PAF01143@nifty.ne.jp
synopsis: like eruby, ehaskell is embedded haskell.
test-bench-deps: {}
