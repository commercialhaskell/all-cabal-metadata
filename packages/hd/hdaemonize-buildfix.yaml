all-versions:
- 0.4.5
author: Anton Tayanovskyy, Fred Ross
basic-deps:
  base: '>=4 && <5'
  extensible-exceptions: '>=0'
  filepath: '>=0'
  hsyslog: '>=0'
  mtl: '>=0'
  unix: '>=0'
changelog: ''
changelog-type: ''
description: "`hdaemonize-0.4.3`\n=================\n\n`hdaemonize` is a simple library
  that hides some of the complexities\nof writing UNIX daemons in Haskell.  \n\nObtaining\n-----------\n\nThe
  latest version is available (BSD license) at\n[GitHub](https://github.com/madhadron/hdaemonize).\n\nUsing\n-------\n\nThe
  synopsis is:\n\n    import System.Posix.Daemonize\n    main = daemonize $ program\n\nThis
  code will make `program` do what good daemons should do, that is,\ndetach from the
  terminal, close file descriptors, create a new process\ngroup, and so on.\n\nIf
  you want more functionality than that, it is available as a\n`serviced` function.\n\nHere
  is an example:\n\n    import Control.Concurrent\n    import System.Posix.Daemonize\n\n
  \   loop i log = do threadDelay $ 10^6\n                    log (show i)\n            \t
  \   writeFile \"/tmp/counter\" $ show i\n                    if i == 5 then undefined
  else loop (i + 1) log\n\n    main = serviced (loop 0)\n\nLet us say this program
  is compiled as `mydaemon`. Then:\n\n    # mydaemon start\n\nstarts the service.
  A second call to start will complain that the\nprogram is already running. \n\nDuring
  its execution, mydaemon will simply write a new number to\n`/tmp/counter` every
  second, until it reaches 5. Then, an exception\nwill be thrown. This exception will
  be caught by `hdaemonize`, and\nlogged to `/var/log/daemon.log` or similar (this
  is depends on how\n`syslog` works on your platorm).  `log (show i)` will leave messages\nin
  the same file.\n\nWhen the exception is thrown, the program will be restared in
  5\nseconds, and will start counting from 0 again.\n\nThe following commands are
  also made available:\n\n    # mydaemon stop\n    # mydaemon restart\n \nFinally,
  `mydaemon` drops privileges.  By default it changes the\neffective user and group
  ids to those of the `daemon` user, but it\nprefers to use those of `mydaemon`, if
  present.\n\n\nChangelog\n---------\n\n* 0.4\n    * added support for a privileged
  action before dropping privileges\n\n* 0.3\n    * merged with updates by madhadron\n\n*
  0.2\n    * provided documentation\n    * backported to older GHC versions, tested
  on 6.8.1\n\n* 0.1\n    * initial public release\n\n\nAuthors\n-------\n\nAnton Tayanovskyy
  <name.surname@gmail.com>, bug reports and feature\nrequests welcome.\n\nThe code
  is originally based on a public posting by\n[Andre Nathan](http://sneakymustard.com/),
  used by permission.\n"
description-type: text
hash: bf92b46ee83859f56a30767e6a11aea53d351ea8f7e17d277d94d8d973772e00
homepage: http://github.com/madhadron/hdaemonize
latest: 0.4.5
license-name: BSD-3-Clause
maintainer: Fred Ross <madhadron at gmail dot com>, Mark Wotton <wotton@gmail.com>
  (trivial buildfix only)
synopsis: Library to handle the details of writing daemons for UNIX
test-bench-deps: {}
