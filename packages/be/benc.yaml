all-versions:
- 0.1.0.0
- 0.1.1.0
author: Soumik Sarkar
basic-deps:
  base: '>=4.14 && <5.0'
  bytestring: '>=0.10.10 && <0.13'
  containers: '>=0.6.2.1 && <0.9'
  primitive: '>=0.9.0 && <0.10'
  text: '>=1.2.3.2 && <2.2'
  transformers: '>=0.5.6.2 && <0.7'
  vector: '>=0.13.1 && <0.14'
changelog: |
  ### 0.1.1.0 -- 2023-12-05

  * New
    * Integer parsing/encoding: `int64`, `int32`, `int16`, `int8`, `word64`,
      `word32`, `word16`, `word8`.
    * List parsing: `index`, `elem`, `list'`.
    * Dictionary parsing: `field'`, `dict'`.
    * `mapMaybe` and `mapOrFail` for `Parser`.
  * Performance improvements

  ### 0.1.0.0 -- 2023-11-09

  * First version.
changelog-type: markdown
description: |
  # benc

  [![Hackage](https://img.shields.io/hackage/v/benc?logo=haskell&color=blue)](https://hackage.haskell.org/package/benc)
  [![Haskell-CI](https://github.com/meooow25/benc/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/meooow25/benc/actions/workflows/haskell-ci.yml)

  Bencode encoding and decoding library

  ## Bencode

  Bencode is a simple encoding format for loosely structured data, comparable to
  JSON. It is used primarily in the BitTorrent protocol. For a description of the
  format see

  * [The BitTorrent Protocol Specification (BEP-3)](https://www.bittorrent.org/beps/bep_0003.html)
  * [Bencode on Wikipedia](https://en.wikipedia.org/wiki/Bencode)

  ## Features

  This library offers

  * A nice API
  * Correctness
  * Speed

  This library does not attempt to support

  * Lazy or incremental parsing
  * Failing with detailed error messages

  ## Getting started

  Please see the Haddocks for [`Data.Bencode.Decode`](https://hackage.haskell.org/package/benc/docs/Data-Bencode-Decode.html)
  and [`Data.Bencode.Encode`](https://hackage.haskell.org/package/benc/docs/Data-Bencode-Encode.html).

  ## Alternatives

  There are currently three other Bencode libraries on Hackage:

  * [bencode](https://hackage.haskell.org/package/bencode)
  * [AttoBencode](https://hackage.haskell.org/package/AttoBencode)
  * [bencoding](https://hackage.haskell.org/package/bencoding)

  All of these are in some combination of buggy, slow, and unmaintained.

  <details>
  <summary>Click for details</summary>

  * `bencode`:
    * Bugs (e.g. crashes on input `"i-e"`)
    * Very slow parsing
    * No high-level encoding API
    * [Minor] Lax parsing (e.g. admits the invalid `"i-0e"`)
  * `AttoBencode`
    * Slow parsing
    * [Minor] Lax parsing (e.g. admits the invalid `"i-0e"`)
  * `bencoding`
    * Bugs (e.g. crashes on parsing non-UTF-8 into Text)
    * Questionable design of dict encoding/decoding API, where human error can
      lead to mis-parsing Bencode or writing invalid Bencode.
    * [Minor] Lax parsing (e.g. admits the invalid `"i-0e"`)

  </details>

  ### API comparison

  See the [benchmark file](https://github.com/meooow25/benc/blob/master/compare/Bench.hs)
  as a comparison point of the library APIs.

  ### Benchmarks

  Below is a comparison of decoding and encoding of two torrent files, performed
  with GHC 9.6.3. See the [benchmark file](https://github.com/meooow25/benc/blob/master/compare/Bench.hs)
  for details.

  #### Decoding

  | Library     | `crossref` time  | alloc  | `ubuntu` time    | alloc  |
  | ----------- | ---------------- | ------ | ---------------- | ------ |
  | benc        | 21.3 ms ± 902 μs | 24 MB  | 1.30 μs ± 90 ns  | 3.6 KB |
  | bencode     | 218 ms ± 7.7 ms  | 737 MB | 29.0 μs ± 2.6 μs | 121 KB |
  | AttoBencode | 44.6 ms ± 4.0 ms | 129 MB | 3.01 μs ± 102 ns | 17 KB  |
  | bencoding   | 39.1 ms ± 2.3 ms | 104 MB | 2.44 μs ± 175 ns | 15 KB  |

  <sup>Note: `bencode` parses from a lazy `ByteString` unlike the rest which parse
  from strict `ByteString`s, and so is expected to be a little slower.</sup>

  #### Encoding

  | Library     | `crossref` time  | alloc  | `ubuntu` time    | alloc  |
  | ----------- | ---------------- | ------ | ---------------- | ------ |
  | benc        | 9.17 ms ± 487 μs | 42 MB  | 1.58 μs ± 101 ns | 11 KB  |
  | bencode     | 37.8 ms ± 860 μs | 113 MB | 3.17 μs ± 174 ns | 19 KB  |
  | AttoBencode | 19.7 ms ± 1.8 ms | 109 MB | 10.1 μs ± 993 ns | 295 KB |
  | bencoding   | 11.9 ms ± 916 μs | 67 MB  | 1.81 μs ± 129 ns | 15 KB  |

  <sup>Note: `AttoBencode` encodes to a strict `ByteString` via a lazy
  `ByteString`, unlike the rest, which only prepare the lazy `ByteString`. As
  such, it is expected to be slower.</sup>

  ## Contributing

  Questions, bug reports, documentation improvements, code contributions welcome!
  Please [open an issue](https://github.com/meooow25/benc/issues) as the first
  step.
description-type: markdown
hash: 9b5864fa0611f4269cc20d475376b60cde798746626a4a99ed88756ff148c56a
homepage: https://github.com/meooow25/benc
latest: 0.1.1.0
license-name: MIT
maintainer: soumiksarkar.3120@gmail.com
synopsis: Bencode encoding and decoding library
test-bench-deps:
  base: '>=0'
  benc: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  tasty: '>=0'
  tasty-bench: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  vector: '>=0'
