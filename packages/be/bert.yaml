all-versions:
- '1.0'
- '1.1'
- 1.1.1
- 1.1.2
- 1.1.2.1
- '1.2'
- 1.2.1
- 1.2.1.1
- 1.2.1.2
- 1.2.2
- 1.2.2.1
- 1.2.2.2
- 1.2.2.3
- 1.2.2.4
- 1.2.2.5
author: marius a. eriksen, Roman Cheplyaka
basic-deps:
  base: '>=4 && <5'
  binary: '>=0.5'
  binary-conduit: '>=1.2'
  bytestring: '>=0.9'
  conduit: '>=1.0'
  conduit-extra: '>=1.1'
  containers: '>=0.2'
  mtl: '>=1.1'
  network: '>=2.3'
  parsec: '>=2.0'
  time: '>=1.1'
  unix: '>=2.0'
  void: '>=0'
changelog: |
  Version 1.2.2.5
  ---------------

  * Fix a list deserialization bug
  * Serialize small ints compactly

  Version 1.2.2.4
  ---------------

  Fix compatibility with GHC 7.10

  Version 1.2.2.3
  ---------------

  Fix compatibility with recent conduit.

  Version 1.2.2.2
  ---------------

  Migrate from network-conduit (which is deprecated) to conduit-extra

  Version 1.2.2.1
  ---------------

  Fix build on GHC 7.4

  Version 1.2.2
  ---------------

  * `Show` and `Read` instances for `Term` now use Haskell, not Erlang syntax. To
    get the Erlang-syntax-formatted terms, `showTerm` and `parseTerm` are now
    exposed.

  Version 1.2.1.2
  ---------------

  * Fix Windows compatibility

  Version 1.2.1.1
  ---------------

  * Fix integer (de)serialization on 64-bit platforms

  Version 1.2.1
  -------------

  * Fix the docs
  * Export the `Error` data type

  Version 1.2
  -----------

  * Drop the `bert` command-line tool
  * Remove support for the (non-standard) bert:// URI
  * Change the way transports are represented
  * Instead of `fromURI` or `fromHostPort`, you should now use `tcpClient` and
    `tcpServer`
  * Both the client and the server now support persistent connections
  * The default TCP backlog is increased for the server
changelog-type: markdown
description: "BERT[-RPC] for Haskell\n======================\n\nOriginally written
  by marius a. eriksen (marius@monkey.org)\n\nThis is a [BERT](http://bert-rpc.org/)
  serializer/deserializer and\n[BERT-RPC](http://bert-rpc.org) client and server for\n[Haskell](http://www.haskell.org/).
  BERT-RPC currently supports\nsynchronous (`call`) requests.\n\nThe primitives provided
  are fairly elementary: for the client, `call`\nprovides the capability to perform
  the RPC call, while the server's\n`serve` is provided with a dispatch function providing
  the dispatching\nlogic for the server. Thus, one can imagine building higher level\nabstractions
  on top of these primitives.\n\nInstallation\n------------\n\nIt's a cabal package,
  so\n\n    $ cabal install bert\n\nshould do the trick.\n\nBERT\n----\n\n    import
  qualified Data.ByteString.Lazy.Char8 as C\n    import Data.BERT\n\nCreating BERT
  terms is simple.\n\n    TupleTerm [BytelistTerm (C.pack \"hello\"), IntTerm 123]\n\nOr
  by using the `BERT` typeclass.\n\n    showBERT $ (\"hello\", 123)\n\nThe `BERT`
  class can also read terms back.\n\n    Right (\"hello\", 123) = readBERT . showBERT
  $ (\"hello\", 123)\n\nBERT-RPC client\n---------------\n\n    import Data.BERT\n
  \   import Network.BERT.Client\n\nCreate a transport to the server endpoint, and
  issue a (synchronous)\ncall with it.\n\n    t <- tcpClient \"localhost\" 8080\n
  \   r <- call t \"calc\" \"add\" ([123, 3000]::[Int])\n    case r of\n      Right
  res -> print (res :: Int)\n      Left _    -> putStrLn \"error\"\n    \nBERT-RPC
  server\n---------------\n\n    import Data.BERT\n    import Network.BERT.Server\n\nCreate
  a transport from which to accept connections, and provide a\ndispatch function for
  incoming RPCs. The dispatch function is issued\nin a new thread for each incoming
  request.\n\n    main = do\n      s <- tcpServer 8080\n      serve s dispatch\n\n
  \   dispatch \"calc\" \"add\" [IntTerm a, IntTerm b] = \n      return $ Success
  $ IntTerm (a + b)\n    dispatch \"calc\" _ _ =\n      return NoSuchFunction\n    dispatch
  _ _ _ = \n      return NoSuchModule\n\nMaintainers\n-----------\n\n[Roman Cheplyaka](https://github.com/feuerbach)
  is the primary maintainer.\n\n[Oleksandr Manzyuk](https://github.com/manzyuk) is
  the backup maintainer. Please\nget in touch with him if the primary maintainer cannot
  be reached.\n"
description-type: markdown
hash: 6ca5f7e42297d86a559cbfa0bee994b8c275cffe06209c45550329d4cfe09f13
homepage: https://github.com/feuerbach/bert
latest: 1.2.2.5
license-name: BSD-3-Clause
maintainer: Roman Cheplyaka <roma@ro-che.info>
synopsis: BERT implementation
test-bench-deps:
  async: '>=0'
  base: '>=0'
  bert: '>=0'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  network: '>=0'
  smallcheck: '>=1.1'
  tasty: '>=0.4'
  tasty-hunit: '>=0'
  tasty-smallcheck: '>=0'
