homepage: keera.co.uk
changelog-type: ''
hash: b90e13bbdebafb9d72ddfc01da223c281aeb5d27f3e78926a4ecd423a7d41107
test-bench-deps: {}
maintainer: ivan.perez@keera.co.uk
synopsis: FRP Yampa replacement implemented with Monadic Stream Functions.
changelog: ''
basic-deps:
  dunai: '>=0.6.0 && <0.9'
  MonadRandom: -any
  base: '>=4.6 && <5'
  simple-affine-space: -any
  mtl: -any
  transformers: '>=0.3'
all-versions:
- 0.0.1
- 0.10.4
- 0.10.4.1
- 0.10.4.2
- 0.10.4.3
- 0.10.4.4
- 0.10.4.5
- 0.10.4.6
- 0.13.1
- 0.13.1.1
- 0.13.1.2
- 0.13.1.3
- 0.13.3
author: Ivan Perez and Manuel BÃ¤renz
latest: 0.13.3
description-type: haddock
description: |-
  <https://hackage.haskell.org/package/Yampa Yampa> is a popular Functional
  Reactive Programming (FRP) implementation that has been used extensively for
  all kinds of applications, including robotics and games.

  <https://dl.acm.org/doi/10.1145/2976002.2976010 Monadic Stream Functions> are
  a new abstraction for data processors that combine arrows and monads. The
  library <https://hackage.haskell.org/package/dunai dunai> provides a default
  implementation.

  Bearriver (a tributary to the Yampa river) provides the same API as Yampa,
  but implemented using dunai underneath. The goal is to facilitate
  understanding what's different about Yampa, and other FRP and Reactive
  Programming libraries, by creating wrappers around dunai defined precisely by
  those differences.

  Because dunai is particularly fast, especially with optimizations enabled,
  this implementation is faster than traditional Yampa for medium-sized and
  large applications.
license-name: BSD-3-Clause
