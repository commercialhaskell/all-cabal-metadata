all-versions:
- 0.6.0.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.2.1
- 0.7.2.2
- 0.7.2.3
- 0.8.0.0
- 0.9.0.0
- 0.9.1.0
- 0.9.2.0
- 0.9.2.1
- 0.10.0.0
- 0.10.1.0
- 0.10.2.0
- 0.10.3.0
- 0.10.3.1
author: Travis Athougies
basic-deps:
  aeson: '>=0.11 && <2.3'
  base: '>=4.11 && <5.0'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.5 && <0.8'
  dlist: '>=0.7.1.2 && <1.1'
  free: '>=4.12 && <5.3'
  ghc-prim: '>=0.5 && <0.14'
  hashable: '>=1.2.4.0 && <1.6'
  microlens: '>=0.4 && <0.5'
  mtl: '>=2.2.1 && <2.4'
  network-uri: '>=2.6 && <2.7'
  scientific: '>=0.3 && <0.4'
  tagged: '>=0.8 && <0.9'
  text: '>=1.2.2.0 && <2.2'
  time: '>=1.6 && <1.13'
  vector: '>=0.11 && <0.14'
  vector-sized: '>=0.5 && <1.7'
changelog: "# 0.10.3.1\n\n## Updated dependencies\n\n* Updated the upper bound to
  include `hashable-1.5`. \n\n## Bug fixes\n\n* The `Pagila` example in `beam-postgres`
  has been updated to compile using the most recent version of `beam` packages (#729).\n\n##
  Packaging\n\n* Remove the GHC flag `-O3`, which resulted in increased compilation
  time by default. This flag can still be activated using your build system of choice,
  as with every library.\n\n# 0.10.3.0\n\n## Added features\n\n* Export generic classes
  (#585).\n\n## Bug fixes\n\n * Fixed an issue where a WHERE clause would be dropped
  in the absence of a FROM (#695).\n\n# 0.10.2.0\n\n## Added features\n\n * Added
  support for creating database schemas and associated tables with `createDatabaseSchema`,
  `createTableWithSchema`, and `existingDatabaseSchema` (#716).\n * Added `FromBackendRow`
  instance for `Identity` (#717).\n\n# 0.10.1.0\n\n## Added features\n\n * Allow embedding
  database types\n * Loosen some version bounds\n\n# 0.10.0.0\n\n## Bug fixes\n\n
  * Make sure lateral join names do not overlap\n\n## Addded features\n\n * Add `runSelectReturningFirst`\n
  * `IN (SELECT ...)` syntax via `inQuery_`\n\n# 0.9.2.1\n\n## Added features\n\n
  * Aeson 2.0 support\n\n# 0.9.2.0\n\n## Added features\n\n * Heterogeneous variants
  of `like_` and `similarTo_`: `like_'` and `similarTo_'`\n * GHC 9.2 and 9.0 support\n\n#
  0.9.1.0\n\n## Added features\n\n * Improve error message when `asc_` or `desc_`
  is missing in `orderBy_`\n\n# 0.9.0.0\n\n## Removal of machine-dependent `Int`/`Word`
  instances\n\nBeam now mandates that you use unambiguous integer types like `Int32`,
  `Int64`, or `Integer` instead of the machine-dependent `Int` or `Word`.\nCustom
  type errors have been added to guide migration where required.\n\nCombinators which
  previously returned `Int`, such as `countAll_` and `rowNumber_`, now match functions
  such as `count_` in returning any `Integral` type.\nThe type of these functions
  vary across databases and doesn't in general correspond to the `INTEGER` type.\n(For
  example Postgres uses `bigint` for these.)\n\n## `in_` on row values\n\nBeam now
  supports using `in_` on row values, for backends which support it.\nThis fulfills
  the often requested ability to use `in_` on `PrimaryKey`s, e.g. ``primaryKey row
  `in_` [ ... ]``.\n\n## Miscellaneous added features\n\n * Support for ad-hoc queries
  on tables which don't have a corresponding `Beamable` type\n * `HasInsertOnConflict`
  class for backends which support functionality similar to Postgres and SQLite's
  `INSERT ... ON CONFLICT`\n * Convenience functions `setEntitySchema` and `modifyEntitySchema`\n
  * Haskell-style conditionals `ifThenElse_` and `bool_`\n * Poly-kinded instances
  for `Data.Tagged.Tagged`\n * Variants of update functions which use tri-value `SqlBool`:
  `update'`, `save'`, `updateRow'`, `updateTableRow'`, and corresponding combinator
  `references'`\n * GHC 8.8 support\n\n## Minor interface changes\n\n * Split `WithConstraint`
  apart, to support strict fields\n * `zipTables` supports `Applicative` actions instead
  of `Monad`\n\n## Bug fixes\n\n * Database definition fields can be made strict\n
  * `decimalType` properly emits SQL 92 `DECIMAL` instead of `DOUBLE`\n\n# 0.8.0.0\n\n##
  Common table expressions\n\nBeam now supports common table expressions on some backends,
  using the\n`With` monad. Currently, only `SELECT` statements are supported.\n\n##
  Changes to field name modification\n\n`EntityModification` is now a `Monoid`.\n\nInstead
  of taking the beam-determined name, the `renamingFields`\nfunction instead takes
  a `Data.List.NonEmpty` value containing the\nnames of each Haskell record selector
  that led to this field.\n\nFor example, in the following\n\n```haskell\ndata Embedded
  f =\n  Embedded { _field1 :: Columnar f Text\n           , _field2 :: Columnar f
  Int }\n\ndata Table1 f =\n  Table1 { _tbl1FieldA :: Columnar f Text\n         ,
  _tbl1Embedded :: Embedded f }\n\ndb = defaultDbSettings `withDbModification`\n     dbModification
  { table1 = renamingFields f }\n```\n\n`f` would be called with `[\"_tbl1FieldA\"]`,
  `[\"_tbl1Embedded\", \"_field1\"]`\nand `[\"_tbl1Embedded\", \"_field2\"]`.\n\n\n##
  Simplified types\n\nEvery beam SQL backend is now an instance of `BeamSqlBackend`
  and has an\nassociated syntax via an associated type family. This means types are
  much simpler.\n\nAnother benefit is that `MonadBeam` now has a simpler type and
  can be used with\nmonad transformers. For example, writing a computation that may
  call out to a\npostgres database is as simple as\n\n```haskell\ndbComputation ::
  MonadBeam Postgres m => m result\n```\n\nversus before\n\n```haskell\ndbComputation
  :: MonadBeam PgCommandSyntax Postgres Pg.Connection m => m result\n```\n\nThings
  become simpler if you want to write database agnostic computations. You can now
  do\n\n```haskell\ndbComputation :: (BeamSqlBackend be, MonadBeam be m) => m result\n```\n\nversus
  before\n\n```haskell\ndbComputation :: ( Sql92SanityCheck syntax, MonadBeam syntax
  be hdl m ) => m result\n```\n\n## Removal of `HasDefaultSqlDataTypeConstraints`\n\nThe
  changes above make a separate `HasDefaultSqlDataTypeConstraints`\nclass unnecessary.
  The `defaultSqlDataTypeConstraints` method is now\nincluded within the `HasDefaultSqlDataType`
  class.\n\n## Changes to parseOneField and peekField\n\nFormerly, the `peekField`
  function would attempt to parse a field\nwithout advancing the column pointer, regardless
  of whether a field\nwas successfully parsed. In order to support more efficient
  parsing,\nthis has been changed. When `peekField` returns a `Just` value, then\nthe
  column pointer is advanced to the next pointer. This means you do\nnot need to call
  `parseOneField` again to advance the pointer.\n\nYou can still chain `peekField`
  calls together by using the new\n`Alternative` instance for `FromBackendRowM`.\n\n#
  0.7.2.0\n\nAdd compatibility with GHC 8.4 and stack nightly\n\n# 0.7.1.0\n\nNote
  '0.7.1.0' was released because the signature of `delete` was too specific\nin '0.7.0.0'
  due to an error when uploading the package.\n\n# 0.7.0.0\n\n## Weaker functional
  dependencies on `MonadBeam`\n\nThe functional dependency on `MonadBeam` is now just
  `m -> syntax be\nhandle`. This allows us to define `MonadBeam` instances atop monad
  transformers\n(although we don't have any yet!).\n\n## Correct boolean handling\n\nPrevious
  versions of beam used the SQL `=` operator to compare potentially\n`NULL` values.
  This is incorrect, as `NULL = NULL => UNKNOWN` in ANSI-compliant\nimplementations.
  Beam has changed its emitted SQL to produce proper comparisons,\nbut this can dramatically
  affect performance in some backends. Particularly,\nproper JOIN index usage in Postgres
  requires an exact match on an equality\nconstructor, which may not be what you get
  when using the proper boolean\nhandling.\n\nIf you are okay using SQL null handling,
  you can use the new `==?.` and `/=?.`\noperators which produce an expression with
  type `SqlBool` instead. `SqlBool` is\na type that can represent the SQL `BOOL` type
  in all its gritty glory. Note\nhowever, that these operators do not compare for
  haskell equality, only SQL\nequality, so please understand what that means before
  using them.\n\nCorrespondingly, many functions that took `Bool` expressions now
  have\ncorresponding versions that take `SqlBool`. For example, to use `guard_` with
  a\n`SqlBool` expression use `guard_'` (note the prime).\n\n(Note: I don't really
  like that we have to do this, but this is the only way\nunless we introspect user
  expressions. Beam's philosophy is to be as direct as\npossible. The `==.` operator
  corresponds to haskell `==`, and so produces the\nboolean we would expect as Haskell
  programmers. The `==?.` operator is a new\noperator that users must explicitly opt
  in to. Both produce the most direct code\npossible on each backend.)\n\n## Aggregations
  return `Maybe` types\n\nIn previous versions of beam, aggregations such as `avg_`,
  `sum_`, etc\nreturned an expression of the same type as its inputs. However,\nthis
  does not match standard SQL behavior, where these aggregates can\nreturn NULL if
  no rows are selected for the aggregation. This breaks\nolder code, but is more correct.
  To restore the older behavior, use\nthe `fromMaybe_` function to supply a default
  value.\n\n## Miscellaneous name changes\n\nThe `Database.Beam.Query.lookup` function
  was renamed to `lookup_` to\navoid overlap with the `Prelude` function of the same
  name.\n\n## Reintroduce explicit backends to `Database` class\n\nSome database entites
  only work on particular backends. For example,\nbeam-postgres extension support
  only works in beam-postgres. The lack\nof a backend parameter on the `Database`
  type class essentially\nmandated that every database entity worked on every backend.
  By\nintroducing a backend parameter to `Database`, we allow the user to\nrestrict
  which backends a database can work on.\n\nThe old behavior is still easily recovered.
  Whereas before you'd write\n\n```haskell\ninstance Database MyDatabase\n```\n\nNow
  write\n\n```haskell\ninstance Database be MyDatabase\n```\n\n## Require backends
  to explicitly declare types that can be compared for equality\n\nBeam previously
  allowed any two types to be compared for SQL\nequality. This is no longer the case.
  Rather, only types that are\ninstances of `HasSqlEqualityCheck` for the given expression
  syntax can\nbe checked for equality. Correspondingly, only types that are\ninstances
  of `HasSqlQuantifiedEqualityCheck` can be checked for\nquantified equality.\n\nThis
  change is somewhat invasive, as the relationship and join\noperators depend on the
  ability to check primary keys for\nequality. You may have to add appropriate class
  constraints to your\nqueries. In order to assert that a table can be compared for
  equality,\nyou can use the `HasTableEquality` constraint synonym.\n\n### For Backends\n\nBackend
  implementors should establish instances of\n`HasSqlEqualityCheck` and `HasSqlQuantifiedEqualityCheck`
  for every\ntype that can be compared in their syntax. You may choose to implement\na
  custom equality and inequality operator. Alternatively, you can\nleave the instances
  empty to use the defaults, which match the old\nbehavior.\n\n## Properly deal with
  NULL values in equality\n\nPrevious versions of Beam would use SQL `=` and `<>`
  operators to\ncompare potentially `NULL` values. However, `NULL = NULL` is always\nfalse,
  according to the SQL standard, so this behavior is incorrect.\n\nNow, Beam will
  generate a `CASE .. WHEN ..` statement to explicitly\nhandle mismatching `NULL`s.
  This is the 'expected' behavior from the\nHaskell perspective, but does not match
  what one may expect in\nSQL. Note that it is always better to explicitly handle
  `NULL`s using\n`maybe_`, and beam recommends this approach in robust code.\n\n##
  Remove `Auto` for fields with default values\n\n`Auto` was a convenience type for
  dealing with tables where some\ncolumns have been given a default value. `Auto`
  worked well enough but\nit was a very leaky abstraction. Moreover, it was\nunnecessary.
  Everything you can do with `Auto` can be done more safely\nwith `default_`.\n\nFor
  example, instead of using\n\n```haskell\ninsertValues [ Table1 (Auto Nothing) \"Field
  Value\" \"Another Field Value\" ]\n```\n\nuse\n\n```haskell\ninsertExpressions [
  Table1 default_ (val_ \"Field Value\") (val_ \"Another Field Value\") ]\n```\n\n#
  0.6.0.0\n\n* Mostly complete SQL92, SQL99 support\n* Piecemeal support for SQL2003
  and SQL2008 features\n* Completely modular backends\n* Various bug improvements
  and fixes\n\n# 0.5.0.0\n\n* Move to using finally tagless style for SQL generation\n*
  Split out backends from `beam-core`\n* Allow non-table entities to be stored in
  databases\n* Basic migrations support\n"
changelog-type: markdown
description: |-
  Beam is a Haskell library for type-safe querying and manipulation of SQL databases.
  Beam is modular and supports various backends. In order to use beam, you will need to use
  @beam-core@ along with a specific backend (such as @beam-postgres@ or @beam-sqlite@) as
  well as the corresponding backend.
  For more information, see the user manual and tutorial on
  <https://haskell-beam.github.io/beam GitHub pages>.
description-type: haddock
hash: 5dd5985423572523b931a39579237180142ab02454359862fb3a6108534418dc
homepage: http://travis.athougies.net/projects/beam.html
latest: 0.10.3.1
license-name: MIT
maintainer: travis@athougies.net
synopsis: Type-safe, feature-complete SQL query and manipulation interface for Haskell
test-bench-deps:
  base: '>=0'
  beam-core: '>=0'
  bytestring: '>=0'
  microlens: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  time: '>=0'
