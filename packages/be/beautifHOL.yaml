all-versions:
- '0.1'
- '0.10'
- '0.11'
author: Lee Pike <leepike@gmail.com>
basic-deps:
  array: '>=0'
  base: '>=0'
  haskell98: '>=0'
  mtl: '>=0'
changelog: ''
changelog-type: ''
description: "# README for beautifHOL, a HOL prettyprinter\n# Based on the paper found
  at http://www.cs.indiana.edu/~lepike/pub_pages/pphol.html\n# Lee Pike <lee-pike-@-gma-il-.com>
  (remove dashes)\n# Jan 5, 2009\n# Copyright 2008\n\n#  This file is part of beautifHOL.\n#
  BSD3.\n\nThis README contains the following sections:\n\n* Program Description\n*
  License information\n* Installation information \n* Usage information\n* How to
  modify the program\n* Todos (including known bugs)\n\n==DESCRIPTION==\n\nThis is
  a pretty-printer for higher-order logic (HOL).  It reads in a formula\nand outputs
  it to standard out.  More information about the pretty-printer can\nbe found in
  the paper, \"How to Pretty-Print a Long Formula\"\n<http://www.cs.indiana.edu/~lepike/pubs/pike-holpp.pdf>.\n\n==LICENSE==\n\nBSD3
  license.\n\n==INSTALLATION==\n\nThis program is distributed as a Cabal package,
  a packaging system for Haskell\nprograms.  For information on how to install a Cabal
  package, see\n<http://www.haskell.org/haskellwiki/Cabal/How_to_install_a_Cabal_package>.
  \ The\neasiest way to install a Cabal package is to use cabal-install:\n<http://hackage.haskell.org/trac/hackage/wiki/CabalInstall>.
  \ Instructions for\ngetting cabal-install are located there.\n\n==USAGE==\n\nIf
  you install this program using Cabal (describe above), then the executable,\nbeautifulHOL,
  should be in your path.  Then issue\n\n          > beautifHOL\n\nto interact with
  the program in a read-eval-print loop.  From there, you can\nenter HOL formulas.
  \ Examples of the syntax can be found in the file\nformulas.txt.  Be sure to terminate
  a formula with a semicolon.  After entering\na formula, its pretty-printed rendering
  will be sent to standard out.\n\nThe available options to the program can be seen
  by issuing\n\n          > beautifHOL --help\n\nAmong others, there is an option
  to suppress labels (--nolabel) and an option to\nread in a set of formulas from
  a file and print their renderings to\nstandard-out.  For example, issuing\n\n          >
  beautifHOL --f formulas.txt\n\nwill render all the example formulas.\n         \n==MODIFYING
  THE PROGRAM==\n\n==\nMODIFYING THE INPUT LANGUAGE\n==\n\nThe syntax of the current
  input language is documented in\n<http://www.cs.indiana.edu/~lepike/pub_pages/docHOL.pdf>.\n\nTo
  modify the input language to use with other variants of HOL, you will need\nthe
  BNF Converter (BNFC).  BNFC is an GPL-licensed that generates a\ncompiler-front
  end from a labeled Bakus Normal Form language specification.  It\nalso generates
  docs, etc.  BNFC is available at\n<http://www.cs.chalmers.se/Cs/Research/Language-technology/BNFC/>.
  \ The latest\nversion can be obtained by issuing\n\n  darcs get --partial\n  http://www.cs.chalmers.se/Cs/Research/Language-technology/darcs/BNFC/\n\nBNFC
  will generate new files for you based on your new input language.  The\ncurrent
  input language is defined in HOL.cf as a labeled BNF grammar.  Edit this\nfile.
  \ *BE SURE* to move or rename PrintHOL.hs, ConfigHOL.hs, and TestHOL.hs\nwhen generating
  new files as BNFC will overwrite these files (which have been\nmodified in beautifHOL).
  \ After generation from BNFC, overwrite the generated\nfiles and compile as usual.
  \ If you have added new language constructs, you will\nhave to add corresponding
  cases to PrintHOL.hs.\n\n==\nMODIFYING ANYTHING ELSE\n==\nIf you want to modify
  only the output syntax or the pretty-printing style, you\nneed only to modify one
  or more of the following files:\n  * PrintHOL.hs, the guts of the pretty-printer.\n
  \ * ConfigHOL.hs, where user-defined constants are (e.g., the output syntax for\n
  \   conjunction, the maximum length of a formula on a line, etc.).\n  * TestHOL.hs,
  where main is defined.\n\nYou do *NOT* need BNFC to make these modifications.  Simply
  rebuild the program\nby issuing \n  > ghc --make TestHOL.hs -o beautifHOL\nor\n
  \ > runhaskell Setup.lhs configure\n  > runhaskell Setup.lhs build\n  > runhaskell
  Setup.lhs install\n\nBE SURE TO SEND ME ANY PATCHES!\n\n==TODOs==\n\n  ==Code Cleanups==\n
  \ * Remove dead code.\n  * Run HPC and HLint over this.\n  * How spaces are handled
  needs to be reimplemented.\n  * Should be reimplemented to use SPJ/John Hughes pretty-printing
  library:\n    pretty on Hackage\n    <http://hackage.haskell.org/cgi-bin/hackage-scripts/package/pretty>.\n\n
  \ ==New Functionality== \n  * Desired new functionality is described in the accompanying
  paper, \"How to\n    Pretty-Print a Long Formula\" (pphol.pdf).\n  * Better parse-error
  messages.\n\n  ==Bugs/Issues==\n  * Can't have a breakline char -- it'll break things
  if it's really a string (e.g., Latex).\n  * There are known issues with using different
  widths for spcStr, argSepStr, etc.\n  * Parsing doesn't work if there is whitespace
  between relation or function\n    identifiers and parentheses.\n  * In ConfigHOL.hs,
  \"in\" is defined \"in \" to fix a pretty-printing bug.\n\n\n\n"
description-type: text
hash: b49978a6dadd1ca11a9e503e3de2621e61f14eb19ca79ddfd5bb887dd0bac090
homepage: http://www.cs.indiana.edu/~lepike/pub_pages/holpp.html
latest: '0.11'
license-name: LicenseRef-GPL
maintainer: Lee Pike <leepike@gmail.com>
synopsis: A pretty-printer for higher-order logic
test-bench-deps: {}
