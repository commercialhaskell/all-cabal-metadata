homepage: https://github.com/zachjs/sv2v
changelog-type: markdown
hash: 2f2293970fcfda85bf61f63e416e28f9a8aaabaa1f3200637517ffc9f18b98c6
test-bench-deps: {}
maintainer: Zachary Snow <zach@zachjs.com>
synopsis: SystemVerilog to Verilog conversion
changelog: |
  ## v0.0.9

  ### Breaking Changes

  * Unsized number literals exceeding the maximum width of 32 bits (e.g.,
    `'h1_ffff_ffff`, `4294967296`) are now truncated and produce a warning, rather
    than being silently extended
    * Support for unsized number literals exceeding the standard-imposed 32-bit
      limit can be re-enabled with `--oversized-numbers`
  * Input source files are now decoded as UTF-8 on all platforms, with transcoding
    failures tolerated, enabling reading files encoded using other ASCII supersets
    (e.g., Latin-1)

  ### New Features

  * Added support for non-ANSI style port declarations where the port declaration
    is separate from the corresponding net or variable declaration
  * Added support for typed value parameters declared in parameter port lists
    without explicitly providing a leading `parameter` or `localparam` marker
  * Added support for tasks and functions with implicit port directions
  * Added support for parameters which use a type-of as the data type
  * Added support for bare delay controls with real number delays
  * Added support for deferred immediate assertions

  ### Other Enhancements

  * Explicitly-sized number literals with non-zero bits exceeding the given width
    (e.g., `1'b11`, `3'sd8`, `2'o7`) are now truncated and produce a warning,
    rather than yielding a cryptic error
  * Number literals with leading zeroes which extend beyond the width of the
    literal (e.g., `1'b01`, `'h0_FFFF_FFFF`) now produce a warning
  * Non-positive integer size casts are now detected and forbidden
  * Negative indices in struct pattern literals are now detected and forbidden
  * Escaped vendor block comments in macro bodies are now tolerated
  * Illegal bit-selects and part-selects of scalar struct fields are now detected
    and forbidden, rather than yielding an internal assertion failure

  ### Bug Fixes

  * Fixed parsing of sized ports with implicit directions
  * Fixed flattening of arrays used in nested ternary expressions
  * Fixed preprocessing of line comments which are neither preceded nor followed
    by whitespace except for the newline which terminates the comment
  * Fixed parsing of alternate spacings of `@(*)`
  * Fixed conversion of interface-based typedefs when used with explicit modports,
    unpacked arrays, or in designs with multi-dimensional instances
  * Fixed conversion of module-scoped references to modports
  * Fixed conversion of references to modports nested within types in expressions
  * Fixed assertion removal in verbose mode causing orphaned statements

  ## v0.0.8

  Future releases will have complete change logs.
basic-deps:
  base: '>=4.14.1.0 && <4.15'
  filepath: '>=1.4.2.1 && <1.5'
  array: '>=0.5.4.0 && <0.6'
  containers: '>=0.6.2.1 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  cmdargs: '>=0.10.21 && <0.11'
  githash: '>=0.1.6.1 && <0.2'
  hashable: '>=1.3.0.0 && <1.4'
  vector: '>=0.12.3.0 && <0.13'
  directory: '>=1.3.6.0 && <1.4'
all-versions:
- 0.0.8
- 0.0.9
author: Zachary Snow <zach@zachjs.com>, Tom Hawkins <tomahawkins@gmail.com>
latest: 0.0.9
description-type: markdown
description: |
  # sv2v: SystemVerilog to Verilog

  sv2v converts SystemVerilog ([IEEE 1800-2017]) to Verilog ([IEEE 1364-2005]),
  with an emphasis on supporting synthesizable language constructs.

  [IEEE 1800-2017]: https://ieeexplore.ieee.org/servlet/opac?punumber=8299593
  [IEEE 1364-2005]: https://ieeexplore.ieee.org/servlet/opac?punumber=10779

  The primary goal of this project is to create a completely free and open-source
  tool for converting SystemVerilog to Verilog. While methods for performing this
  conversion already exist, they generally either rely on commercial tools, or are
  limited in scope.

  This project was originally developed to target [Yosys], and so allows for
  disabling the conversion of (passing through) those [SystemVerilog features
  which Yosys supports].

  [Yosys]: http://www.clifford.at/yosys/
  [SystemVerilog features which Yosys supports]: https://github.com/YosysHQ/yosys#supported-features-from-systemverilog

  The idea for this project was shared with me while I was an undergraduate at
  Carnegie Mellon University as part of a joint Computer Science and Electrical
  and Computer Engineering research project on open hardware under Professors [Ken
  Mai] and [Dave Eckhardt]. I have greatly enjoyed collaborating with the team at
  CMU since January 2019, even after my graduation the following May.

  [Ken Mai]: https://engineering.cmu.edu/directory/bios/mai-kenneth.html
  [Dave Eckhardt]: https://www.cs.cmu.edu/~davide/


  ## Dependencies

  All of sv2v's dependencies are free and open-source.

  * Build Dependencies
      * [Haskell Stack](https://www.haskellstack.org/) - Haskell build system
      * Haskell dependencies are managed in `sv2v.cabal`
  * Test Dependencies
      * [Icarus Verilog](http://iverilog.icarus.com) - for Verilog simulation
      * [shUnit2](https://github.com/kward/shunit2) - test framework
      * Python (any version) - for generating certain test cases


  ## Installation

  ### Pre-built binaries

  Binaries for Ubuntu, macOS, and Windows are available on the [releases page]. If
  your system is not covered, or you would like to build the latest commit, simple
  instructions for building from source are below.

  [releases page]: https://github.com/zachjs/sv2v/releases

  ### Building from source

  You must have [Stack] installed to build sv2v. Then you can:

  [Stack]: https://www.haskellstack.org/

  ```
  git clone https://github.com/zachjs/sv2v.git
  cd sv2v
  make
  ```

  This creates the executable at `./bin/sv2v`. Stack takes care of installing
  exact (compatible) versions of the compiler and sv2v's build dependencies.

  You can install the binary to your local bin path (typically `~/.local/bin`) by
  running `stack install`, or copy over the executable manually.


  ## Usage

  sv2v takes in a list of files and prints the converted Verilog to `stdout`.
  Using `--write=adjacent` will create a converted `.v` for every `.sv` input file
  rather than printing to `stdout`. `--write`/`-w` can also be used to specify a
  path to a `.v` output file.

  Users may specify `include` search paths, define macros during preprocessing,
  and exclude some of the conversions. Specifying `-` as an input file will read
  from `stdin`.

  Below is the current usage printout. This interface is subject to change.

  ```
  sv2v [OPTIONS] [FILES]

  Preprocessing:
    -I --incdir=DIR           Add directory to include search path
    -D --define=NAME[=VALUE]  Define a macro for preprocessing
       --siloed               Lex input files separately, so macros from
                              earlier files are not defined in later files
       --skip-preprocessor    Disable preprocessor
  Conversion:
       --pass-through         Dump input without converting
    -E --exclude=CONV         Exclude a particular conversion (always, assert,
                              interface, or logic)
    -v --verbose              Retain certain conversion artifacts
    -w --write=MODE/FILE      How to write output; default is 'stdout'; use
                              'adjacent' to create a .v file next to each input;
                              use a path ending in .v to write to a file
  Other:
       --oversized-numbers    Disable standard-imposed 32-bit limit on unsized
                              number literals (e.g., 'h1_ffff_ffff, 4294967296)
       --dump-prefix=PATH     Create intermediate output files with the given
                              path prefix; used for internal debugging
       --help                 Display help message
       --version              Print version information
       --numeric-version      Print just the version number
  ```


  ## Supported Features

  sv2v supports most synthesizable SystemVerilog features. Current notable
  exceptions include `defparam` on interface instances, certain synthesizable
  usages of parameterized classes, and the `bind` keyword. Assertions are also
  supported, but are simply dropped during conversion.

  If you find a bug or have a feature request, please [create an issue].
  Preference will be given to issues which include examples or test cases.

  [create an issue]: https://github.com/zachjs/sv2v/issues/new


  ## SystemVerilog Front End

  This project contains a preprocessor, lexer, and parser, and an abstract syntax
  tree representation for a subset of the SystemVerilog specification. The parser
  is not very strict. The AST allows for the representation of syntactically (and
  semantically) invalid Verilog. The goal is to be more general in the
  representation to enable more standardized and straightforward conversion
  procedures. This could be extended into an independent and more fully-featured
  front end if there is significant interest.


  ## Testing

  Once the [test dependencies](#dependencies) are installed, tests can be run with
  `make test`. GitHub Actions is used to automatically test commits.

  There is also a [SystemVerilog compliance suite] being created to test
  open-source tools' SystemVerilog support. Although not every test in the suite
  is applicable, it has been a valuable asset in finding edge cases.

  [SystemVerilog compliance suite]: https://github.com/SymbiFlow/sv-tests


  ## Acknowledgements

  This project was originally forked from [Tom Hawkin's Verilog parser]. While the
  front end has changed substantially to support the larger SystemVerilog
  standard, his project was a great starting point.

  [Tom Hawkin's Verilog parser]: https://github.com/tomahawkins/verilog

  Reid Long was invaluable in developing this tool, providing significant tests
  and advice, and isolating many bugs. His projects can be found
  [here](https://bitbucket.org/ReidLong/).

  Edric Kusuma helped me with the ins and outs of SystemVerilog, with which I had
  no prior experience, and has also helped with test cases.

  Since sv2v's public release, several people have taken the time to file detailed
  bug reports and feature requests. I greatly appreciate their help in furthering
  the project.
license-name: BSD-3-Clause
