all-versions:
- 0.0.8
- 0.0.9
- 0.0.10
- 0.0.11
- 0.0.12
- 0.0.13
author: Zachary Snow <zach@zachjs.com>, Tom Hawkins <tomahawkins@gmail.com>
basic-deps:
  array: <0.6
  base: <4.19
  cmdargs: <0.11
  containers: <0.7
  directory: <1.4
  filepath: <1.5
  githash: <0.2
  hashable: <1.5
  mtl: <2.4
  vector: <0.14
changelog: |
  ## v0.0.13

  ### New Features

  * Added support for module and interface input ports with default values
  * Added conversion of severity system tasks and elaboration system tasks (e.g.,
    `$info`) into `$display` tasks that include source file and scope information;
    pass `-E SeverityTask` to disable this new conversion
  * Added support for gate arrays and conversion for multidimensional gate arrays
  * Added parsing support for `not`, `strong`, `weak`, `nexttime`, and
    `s_nexttime` in assertion property expressions
  * Added `--bugpoint` utility for minimizing test cases for issue submission

  ### Bug Fixes

  * Fixed `--write path/to/dir/` with directives like `` `default_nettype ``
  * Fixed `logic` incorrectly converted to `wire` even when provided to a task or
    function output port
  * Fixed conversion of fields accessed from explicitly-cast structs
  * Fixed generated parameter name collisions when inlining interfaces and
    interfaced-bound modules
  * Fixed conversion of enum item names and typenames nested deeply within the
    left-hand side of an assignment
  * Fixed `input signed` ports of interface-using modules producing invalid
    declarations after inlining
  * Fixed inlining of interfaces and interface-bound modules containing port
    declarations tagged with an attribute
  * Fixed stray attributes producing invalid nested output when attached to
    inlined interfaces and interface-bounds modules
  * Fixed conversion of struct variables that shadow their module's name
  * Fixed `` `resetall `` not resetting the `` `default_nettype ``

  ### Other Enhancements

  * Improved error messages for invalid port or parameter bindings
  * Added warning for modules or interfaces defined more than once
  * `--write path/to/dir/` can now also be used with `--pass-through`

  ## v0.0.12

  ### Breaking Changes

  * Removed deprecated CLI flags `-d`/`-e`/`-i`, which have been aliased to
    `-D`/`-E`/`-I` with a warning since late 2019

  ### New Features

  * `unique`, `unique0`, and `priority` case statements now produce corresponding
    `parallel_case` and `full_case` statement attributes
  * Added support for attributes in unary, binary, and ternary expressions
  * Added support for streaming concatenations within ternary expressions
  * Added support for shadowing interface names with local typenames
  * Added support for passing through `wait` statements

  ### Bug Fixes

  * Fixed signed unsized literals with a leading 1 bit (e.g., `'sb1`, `'sh8f`)
    incorrectly sign-extending in size and type casts
  * Fixed conflicting genvar names when inlining interfaces and modules that use
    them; all genvars are now given a design-wide unique name
  * Fixed unconverted structs within explicit type casts
  * Fixed byte order of strings in size casts
  * Fixed unconverted multidimensional struct fields within dimension queries
  * Fixed non-typenames (e.g., from packages or subsequent declarations)
    improperly shadowing the names of `struct` pattern fields
  * Fixed shadowing of interface array indices passed to port connections
  * Fixed failure to resolve typenames suffixed with dimensions in contexts
    permitting both types and expressions, e.g., `$bits(T[W-1:0])`
  * Fixed an issue that prevented parsing tasks and functions with `inout` ports
  * Fixed errant constant folding of shadowed non-trivial localparams
  * Fixed conversion of function calls with no arguments passed to other functions
  * Fixed certain non-ANSI style port declarations being incorrectly reported as
    incompatible

  ### Other Enhancements

  * `always_comb` and `always_latch` now reliably execute at time zero
  * Added error checking for unresolved typenames
  * Added constant folding for `||` and `&&`
  * `input reg` module ports are now converted to `input wire`
  * `x | |y` and `x & &y` are now output as `x | (|y)` and `x & (&y)`

  ## v0.0.11

  ### New Features

  * Added `-y`/`--libdir` for specifying library directories from which to
    automatically load modules and interfaces used in the design that are not
    found in the provided input files
  * Added `--top` for pruning unneeded modules during conversion
  * Added `--write path/to/dir/` for creating an output `.v` in the specified
    preexisting directory for each module in the converted result
  * The `string` data type is now dropped from parameters and localparams
  * Added support for passing through `sequence` and `property` declarations

  ### Bug Fixes

  * Fixed crash when converting multi-dimensional arrays or arrays of structs or
    unions used in certain expressions involving unbased unsized literals
  * Fixed module-level localparams being needlessly inlined when forming longest
    static prefixes, which could cause deep recursion and run out of memory on
    some designs
  * Fixed overzealous removal of explicitly unconnected ports (e.g., `.a()`)
  * Fixed an issue that left `always_comb`, `always_latch`, and `always_ff`
    unconverted when tagged with an attribute
  * Fixed unneeded scoping of constant function calls used in type lookups
  * `/*/` is no longer interpreted as a self-closing block comment, e.g.,
    `$display("a"/*/,"b"/* */);` previously printed "ab", but now prints "a"
  * Fixed missing `begin`/`end` when disambiguating procedural branches tagged
    with an attribute
  * Fixed keywords included in the "1364-2001" and "1364-2001-noconfig"
    `begin_keywords` version specifiers

  ### Other Enhancements

  * Added elaboration for accesses to fields of struct constants, which can
    substantially improve conversion speed on some designs
  * Added constant folding for comparisons involving string literals
  * Port connection attributes (e.g., [pulp_soc.sv]) are now ignored with a
    warning rather than failing to parse
  * Improved error message when specifying an extraneous named port connection
  * Improved error message for an unfinished conditional directive, e.g., an
    `ifdef` with no `endif`
  * Added checks for accidental usage of interface or module names as type names

  [pulp_soc.sv]: https://github.com/pulp-platform/pulp_soc/blob/0573a85c/rtl/pulp_soc/pulp_soc.sv#L733

  ## v0.0.10

  ### Breaking Changes

  * `--write adjacent` no longer forbids overwriting existing generated files

  ### New Features

  * Added support for assignments within expressions (e.g., `x = ++y;`)
  * Added support for excluding the conversion of unbased unsized literals (e.g.,
    `'1`, `'x`) via `--exclude UnbasedUniszed`
  * Added support for enumerated type ranges (e.g., `enum { X[3:5] }`)
  * Added support for complex event expressions (e.g., `@(x ^ y)`)
  * Added support for the SystemVerilog `edge` event
  * Added support for cycle delay ranges in assertion sequence expressions
  * Added support for procedural continuous assignments (`assign`/`deassign` and
    `force`/`release`)
  * Added conversion for `do` `while` loops
  * Added support for hierarchical calls to functions with no inputs
  * Added support for passing through DPI imports and exports
  * Added support for passing through functions with output ports
  * Extended applicability of simplified Yosys-compatible `for` loop elaboration

  ### Other Enhancements

  * Certain errors raised during conversion now also provide hierarchical and
    approximate source location information to help locate the error

  ### Bug Fixes

  * Fixed inadvertent design behavior changes caused by constant folding removing
    intentional width-extending operations such as `+ 0` and `* 1`
  * Fixed forced conversion to `reg` of data sensed in an edge-controlled
    procedural assignment
  * `always_comb` and `always_latch` now generate explicit sensitivity lists where
    necessary because of calls to functions which reference non-local data
  * Fixed signed `struct` fields being converted to unsigned expressions when
    accessed directly
  * Fixed conversion of casts using structs containing multi-dimensional fields
  * Fixed incorrect name resolution conflicts raised during interface inlining
  * Fixed handling of interface instances which shadow other declarations
  * Fixed names like `<pkg>_<name>` being shadowed by elaborated packages

  ## v0.0.9

  ### Breaking Changes

  * Unsized number literals exceeding the maximum width of 32 bits (e.g.,
    `'h1_ffff_ffff`, `4294967296`) are now truncated and produce a warning, rather
    than being silently extended
    * Support for unsized number literals exceeding the standard-imposed 32-bit
      limit can be re-enabled with `--oversized-numbers`
  * Input source files are now decoded as UTF-8 on all platforms, with transcoding
    failures tolerated, enabling reading files encoded using other ASCII supersets
    (e.g., Latin-1)

  ### New Features

  * Added support for non-ANSI style port declarations where the port declaration
    is separate from the corresponding net or variable declaration
  * Added support for typed value parameters declared in parameter port lists
    without explicitly providing a leading `parameter` or `localparam` marker
  * Added support for tasks and functions with implicit port directions
  * Added support for parameters which use a type-of as the data type
  * Added support for bare delay controls with real number delays
  * Added support for deferred immediate assertions

  ### Other Enhancements

  * Explicitly-sized number literals with non-zero bits exceeding the given width
    (e.g., `1'b11`, `3'sd8`, `2'o7`) are now truncated and produce a warning,
    rather than yielding a cryptic error
  * Number literals with leading zeroes which extend beyond the width of the
    literal (e.g., `1'b01`, `'h0_FFFF_FFFF`) now produce a warning
  * Non-positive integer size casts are now detected and forbidden
  * Negative indices in struct pattern literals are now detected and forbidden
  * Escaped vendor block comments in macro bodies are now tolerated
  * Illegal bit-selects and part-selects of scalar struct fields are now detected
    and forbidden, rather than yielding an internal assertion failure

  ### Bug Fixes

  * Fixed parsing of sized ports with implicit directions
  * Fixed flattening of arrays used in nested ternary expressions
  * Fixed preprocessing of line comments which are neither preceded nor followed
    by whitespace except for the newline which terminates the comment
  * Fixed parsing of alternate spacings of `@(*)`
  * Fixed conversion of interface-based typedefs when used with explicit modports,
    unpacked arrays, or in designs with multi-dimensional instances
  * Fixed conversion of module-scoped references to modports
  * Fixed conversion of references to modports nested within types in expressions
  * Fixed assertion removal in verbose mode causing orphaned statements

  ## v0.0.8

  Future releases will have complete change logs.
changelog-type: markdown
description: |
  # sv2v: SystemVerilog to Verilog

  sv2v converts SystemVerilog ([IEEE 1800-2017]) to Verilog ([IEEE 1364-2005]),
  with an emphasis on supporting synthesizable language constructs.

  [IEEE 1800-2017]: https://ieeexplore.ieee.org/servlet/opac?punumber=8299593
  [IEEE 1364-2005]: https://ieeexplore.ieee.org/servlet/opac?punumber=10779

  The primary goal of this project is to create a completely free and open-source
  tool for converting SystemVerilog to Verilog. While methods for performing this
  conversion already exist, they generally either rely on commercial tools, or are
  limited in scope.

  This project was originally developed to target [Yosys], and so allows for
  disabling the conversion of (passing through) those [SystemVerilog features that
  Yosys supports].

  [Yosys]: https://yosyshq.net/yosys/
  [SystemVerilog features that Yosys supports]: https://github.com/YosysHQ/yosys#supported-features-from-systemverilog

  The idea for this project was shared with me while I was an undergraduate at
  Carnegie Mellon University as part of a joint Computer Science and Electrical
  and Computer Engineering research project on open hardware under Professors [Ken
  Mai] and [Dave Eckhardt]. I have greatly enjoyed collaborating with the team at
  CMU since January 2019, even after my graduation the following May.

  [Ken Mai]: https://engineering.cmu.edu/directory/bios/mai-kenneth.html
  [Dave Eckhardt]: https://www.cs.cmu.edu/~davide/


  ## Dependencies

  All of sv2v's dependencies are free and open-source.

  * Build Dependencies
      * [Haskell Stack](https://www.haskellstack.org/) - Haskell build system
      * Haskell dependencies are managed in `sv2v.cabal`
  * Test Dependencies
      * [Icarus Verilog](https://steveicarus.github.io/iverilog/) - for Verilog
        simulation
      * [shUnit2](https://github.com/kward/shunit2) - test framework
      * Python 3.x - for evaluating certain test cases


  ## Installation

  ### Pre-built binaries

  Binaries for Ubuntu, macOS, and Windows are available on the [releases page]. If
  your system is not covered, or you would like to build the latest commit, simple
  instructions for building from source are below.

  [releases page]: https://github.com/zachjs/sv2v/releases

  ### Building from source

  You must have [Stack] installed to build sv2v. Then you can:

  [Stack]: https://www.haskellstack.org/

  ```
  git clone https://github.com/zachjs/sv2v.git
  cd sv2v
  make
  ```

  This creates the executable at `./bin/sv2v`. Stack takes care of installing
  exact (compatible) versions of the compiler and sv2v's build dependencies.

  You can install the binary to your local bin path (typically `~/.local/bin`) by
  running `stack install`, or copy over the executable manually.


  ## Usage

  sv2v takes in a list of files and prints the converted Verilog to `stdout` by
  default. Users should typically pass all of their SystemVerilog source files to
  sv2v at once so it can properly resolve packages, interfaces, type parameters,
  etc., across files. Using `--write=adjacent` will create a converted `.v` for
  every `.sv` input file rather than printing to `stdout`. `--write`/`-w` can also
  be used to specify a path to a `.v` output file. Undefined modules and
  interfaces can be automatically loaded from library directories using
  `--libdir`/`-y`.

  Users may specify `include` search paths, define macros during preprocessing,
  and exclude some of the conversions. Specifying `-` as an input file will read
  from `stdin`.

  Below is the current usage printout.

  ```
  sv2v [OPTIONS] [FILES]

  Preprocessing:
    -I --incdir=DIR           Add a directory to the include search path
    -y --libdir=DIR           Add a directory to the library search path used
                              when looking for undefined modules and interfaces
    -D --define=NAME[=VALUE]  Define a macro for preprocessing
       --siloed               Lex input files separately, so macros from
                              earlier files are not defined in later files
       --skip-preprocessor    Disable preprocessing of macros, comments, etc.
  Conversion:
       --pass-through         Dump input without converting
    -E --exclude=CONV         Exclude a particular conversion (Always, Assert,
                              Interface, Logic, SeverityTask, or UnbasedUnsized)
    -v --verbose              Retain certain conversion artifacts
    -w --write=MODE/FILE/DIR  How to write output; default is 'stdout'; use
                              'adjacent' to create a .v file next to each input;
                              use a path ending in .v to write to a file; use a
                              path to an existing directory to create a .v within
                              for each converted module
       --top=NAME             Remove uninstantiated modules except the given
                              top module; can be used multiple times
  Other:
       --oversized-numbers    Disable standard-imposed 32-bit limit on unsized
                              number literals (e.g., 'h1_ffff_ffff, 4294967296)
       --dump-prefix=PATH     Create intermediate output files with the given
                              path prefix; used for internal debugging
       --bugpoint=SUBSTR      Reduce the input by pruning modules, wires, etc.,
                              that aren't needed to produce the given output or
                              error substring when converted
       --help                 Display this help message
       --version              Print version information
       --numeric-version      Print just the version number
  ```


  ## Supported Features

  sv2v supports most synthesizable SystemVerilog features. Current notable
  exceptions include `defparam` on interface instances, certain synthesizable
  usages of parameterized classes, and the `bind` keyword. Assertions are also
  supported, but are simply dropped during conversion.

  If you find a bug or have a feature request, please [create an issue].
  Preference will be given to issues that include examples or test cases.

  [create an issue]: https://github.com/zachjs/sv2v/issues/new


  ## SystemVerilog Front End

  This project contains a preprocessor, lexer, and parser, and an abstract syntax
  tree representation for a subset of the SystemVerilog specification. The parser
  is not very strict. The AST allows for the representation of syntactically (and
  semantically) invalid Verilog. The goal is to be more general in the
  representation to enable more standardized and straightforward conversion
  procedures. This could be extended into an independent and more fully-featured
  front end if there is significant interest.


  ## Testing

  Once the [test dependencies] are installed, tests can be run with `make test`.
  GitHub Actions is used to [automatically test] commits. Please review the [test
  documentation] for guidance on adding, debugging, and interpreting tests.

  [test dependencies]: #dependencies
  [test documentation]: test/README.md
  [automatically test]: https://github.com/zachjs/sv2v/actions

  There is also a [SystemVerilog compliance suite] that tests open-source tools'
  SystemVerilog support. Although not every test in the suite is applicable, it
  has been a valuable asset in finding edge cases.

  [SystemVerilog compliance suite]: https://github.com/chipsalliance/sv-tests


  ## Acknowledgements

  This project was originally forked from [Tom Hawkin's Verilog parser]. While the
  front end has changed substantially to support the larger SystemVerilog
  standard, his project was a great starting point.

  [Tom Hawkin's Verilog parser]: https://github.com/tomahawkins/verilog

  Reid Long was invaluable in developing this tool, providing significant tests
  and advice, and isolating many bugs.

  Edric Kusuma helped me with the ins and outs of SystemVerilog, with which I had
  no prior experience, and has also helped with test cases.

  Since sv2v's public release, many people have taken the time to file detailed
  bug reports and feature requests. I greatly appreciate their help in furthering
  the project.
description-type: markdown
hash: 727513685088f2eaf98fe1e9a9782815c13c87016088d5f7975679e70ff18e52
homepage: https://github.com/zachjs/sv2v
latest: 0.0.13
license-name: BSD-3-Clause
maintainer: Zachary Snow <zach@zachjs.com>
synopsis: SystemVerilog to Verilog conversion
test-bench-deps: {}
