all-versions:
- 1.0.0
author: aidan coyne
basic-deps:
  base: '>=4.7 && <4.8'
  base64-bytestring: '>=1.0 && <1.1'
  bifunctors: '>=4.1 && <=4.3'
  byteable: '>=0.1.1 && <0.1.2'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.5.5 && <0.5.6'
  cryptohash: '>=0.11.6 && <0.12'
  http-types: '>=0.8 && <0.9'
  monad-loops: '>=0.4 && <0.5'
  mtl: '>=2.2 && <2.3'
  transformers: '>=0.4 && <0.5'
  wai: '>=3.0 && <4.0'
changelog: |
  changelog
  =========

  1.0.0
  -----
  first release.
changelog-type: markdown
description: "wai-hmac-auth [![Build Status](https://travis-ci.org/raptros/wai-hmac-auth.svg?branch=master)](https://travis-ci.org/raptros/wai-hmac-auth)\n=============\nthis
  library provides functions for authenticating HMAC-signed requests in WAI\napps.
  in particular, it provides a function for extracting an api key from a\nrequest
  according to configuration, and a function for verifying that a request\nis correctly
  signed by a secret key, according to the configuration. it is\ndesigned to be compatible
  with the Java library\n[jersey-hmac-auth](https://github.com/bazaarvoice/jersey-hmac-auth),
  though\npossibly more flexible.\n\nhow it signs\n------------\nthe authenticate
  function (as well as the included signRequest function) in\neffect extracts several
  elements from the request and concatentates them, and\nhashes/signs the resulting
  value. i.e. it constructs the following value from\nthe request, and signs that
  value.\n\n```\nvalueToSign = method + '\\n' + \n              timestamp + '\\n'
  + \n              (apiKey + '\\n')? + \n              path + ('?' + query) + '\\n'
  +\n              body\n```\n\n* the method is added directly from the request record.\n*
  the header name used to get the timestamp value can be configured. note that\n  for
  now, no validation is done on this value; it is only required to be\n  present in
  the request.\n* the api key is only included explicitly if the configuration specifies
  that\n  the api key is in a header. otherwise (if the api key is in a query\n  parameter),
  it will be included anyway.\n* the value of the path is whatever the application
  receives in the request\n  record. this means that e.g. if the application is run
  in the context of a\n  CGI executable, this may not be the same path that the client
  made the\n  request to. the client will have to account for this when generating
  the\n  signature.\n* the query string is rendered from the queryString using the
  http-types\n  function renderQuery. the wai-hmac-auth library does not modify these
  values,\n  but the values received by the app may depend on the server and the\n
  \ middleware. the client will have to account for this properly.\n* the entire request
  body is read, which is why authenticate produces a Request\n  value when successful
  - this Request value has a requestBody value that will\n  produce the same chunk
  sequence as the input request value.\n\nthe authenticate function also extracts
  the configured signature header and\nattempts to decode it as a base64 url-encoded
  hash digest value as produced by\nthe configured hash function. this represents
  two possible authentication\nfailures.\n\nfinally, the authenticate function compares
  the passed signature to the\nsignature it generated and fails if they do not match.\n\nhow
  to use\n----------\nthere are basically four steps for using this in your app.\n\n*
  set up the configuration for how requests to your app will be signed\n* when a request
  comes in, use getApiKey with your spec to find out who the\n  requester is claiming
  to be\n* load up the secret key associated with that identity (api key)\n* use that
  secret key to run the authenticate function on the request\n* send back appropriate
  responses for errors, otherwise continue with the\n  transformed and authenticated
  request\n\nfor example:\n\n```haskell\n-- this would throw an error, i guess\ndemandApiKey
  :: IO a\n\n-- \ninformClientOfAuthenticationFailure :: AuthFailure -> IO a\n\n--
  imagine a function like this\ngetSecretOrFail :: ApiKey -> IO SecretKey\n\nhandleReq
  req = do\n    apiKey <- getApiKey defaultApiKeySpec req >>= maybe demandApiKey return\n
  \   -- either get a caller reference or fail the request\n    secretKey <- getSecretOrFail
  apiKey\n    authRes <- authenticate defaultRequestConfig req secretKey\n    req'
  <- either informClientOfAuthenticationFailure return authRes\n    -- continue processing
  using the new request value.\n```\n\n\n"
description-type: markdown
hash: e0baf425736985b38a575d726250fb7c8b1c49b4e37b3c6b5b700885cbd894c4
homepage: https://github.com/raptros/wai-hmac-auth
latest: 1.0.0
license-name: BSD-3-Clause
maintainer: coynea90@gmail.com
synopsis: hmac authentication tools for WAI apps
test-bench-deps:
  base: '>=4.7 && <4.8'
  base64-bytestring: '>=1.0 && <1.1'
  bifunctors: '>=4.1 && <=4.3'
  byteable: '>=0.1.1 && <0.1.2'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.5.5 && <0.5.6'
  cryptohash: '>=0.11.6 && <0.12'
  hspec: '>=2.1 && <2.2'
  http-types: '>=0.8 && <0.9'
  monad-loops: '>=0.4 && <0.5'
  mtl: '>=2.2 && <2.3'
  transformers: '>=0.4 && <0.5'
  wai: '>=3.0 && <4.0'
  wai-extra: '>=3.0 && <4.0'
  wai-hmac-auth: '>=0'
