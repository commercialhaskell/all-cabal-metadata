homepage: https://github.com/mbg/wai-saml2#readme
changelog-type: markdown
hash: a0ddd5c02c0042bae85bae478a80b9adb9b7be0da6381d29f1b9d8adc759ae13
test-bench-deps:
  bytestring: -any
  wai: '>=3.0 && <4'
  xml-conduit: -any
  base: -any
  data-default-class: <1
  tasty-golden: -any
  time: '>=1.9 && <2'
  base64-bytestring: '>=0.1 && <2'
  text: <2.1
  c14n: '>=0.1.0.1 && <1'
  wai-saml2: -any
  filepath: -any
  x509-store: <2
  containers: ==0.6.*
  x509: <2
  vault: '>=0.3 && <1'
  cryptonite: <1
  zlib: '>=0.6.0.0 && <0.7'
  network-uri: '>=2.0 && <3'
  mtl: '>=2.2.1 && <3'
  pretty-show: -any
  base16-bytestring: '>=0.1 && <1.1'
  wai-extra: '>=3.0 && <4'
  tasty: -any
  http-types: <1
maintainer: github@michael-gale.co.uk
synopsis: SAML2 assertion validation as WAI middleware
changelog: |
  # Changelog for `wai-saml2`

  ## 0.4

  -   Split `validateResponse` into `decodeResponse` and `validateSAMLResponse` ([#31](https://github.com/mbg/wai-saml2/pull/31) by [@fumieval](https://github.com/fumieval))
  -   Exported `NameID` (formerly `NameId`), and renamed `subjectNameId` to `subjectNameID`
  -   Support GHC 9.4 ([#36](https://github.com/mbg/wai-saml2/pull/36) by [@mbg](https://github.com/mbg))
  -   Add new module `Network.Wai.SAML2.Request` with `AuthnRequest` generation for SP-initiated login flow ([#19](https://github.com/mbg/wai-saml2/pull/19) by [@fumieval](https://github.com/fumieval))
  -   Changed the `saml2PrivateKey` field to be optional and added `saml2ConfigNoEncryption` which takes a `PublicKey` only ([#37](https://github.com/mbg/wai-saml2/pull/37) by [@fumieval](https://github.com/fumieval))
  -   Added `showUTCTime` to `Network.Wai.SAML2.XML`
  -   Added a new module `Network.Wai.SAML2.NameIDFormat` ([#21](https://github.com/mbg/wai-saml2/pull/21) by [@fumieval](https://github.com/fumieval))
  -   Added new field `response` to `Result` which contains the full, decoded SAML response ([#33](https://github.com/mbg/wai-saml2/pull/33) by [@Philonous](https://github.com/Philonous))
  -   Validate audience restrictions ([#35](https://github.com/mbg/wai-saml2/pull/35) by [@Philonous](https://github.com/Philonous))
  -   Handle status codes according to the SAML2 specification ([#42](https://github.com/mbg/wai-saml2/pull/42)) by [@mbg](https://github.com/mbg)

  ## 0.3

  -   Improve parse error handling and make `encryptedKeyData` optional ([#11](https://github.com/mbg/wai-saml2/pull/11) by [@Philonous](https://github.com/Philonous))
  -   Add `subjectNameId` to `Subject` type ([#13](https://github.com/mbg/wai-saml2/pull/13) by [@kdxu](https://github.com/kdxu))
  -   Support the response format used by Okta, in which the `EncryptedAssertion` element is structured differently ([#12](https://github.com/mbg/wai-saml2/pull/12) by [@fumieval](https://github.com/fumieval))

  ## 0.2.1.3

  -   Metadata updates.

  ## 0.2.1.2

  No changes.

  ## 0.2.1.1

  -   Export `Result` type from `Network.Wai.SAML2` module.

  ## 0.2.1

  -   Fix missing export of `relayStateKey` and change its type.

  ## 0.2.0

  -   Added parsing for RelayState from form data, as sent by e.g. Shibboleth when a `target` query string parameter is passed to the unsolicited SSO endpoint.

  ## 0.1.0

  -   Initial release
basic-deps:
  bytestring: '>=0.9 && <0.12'
  wai: '>=3.0 && <4'
  xml-conduit: <2
  base: '>=4.8 && <5'
  data-default-class: <1
  time: '>=1.9 && <2'
  base64-bytestring: '>=0.1 && <2'
  text: <2.1
  c14n: '>=0.1.0.1 && <1'
  x509-store: <2
  containers: ==0.6.*
  x509: <2
  vault: '>=0.3 && <1'
  cryptonite: <1
  zlib: '>=0.6.0.0 && <0.7'
  network-uri: '>=2.0 && <3'
  mtl: '>=2.2.1 && <3'
  base16-bytestring: '>=0.1 && <1.1'
  wai-extra: '>=3.0 && <4'
  http-types: <1
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.2
- 0.2.1.3
- 0.3.0.0
- 0.3.0.1
- '0.4'
author: Michael B. Gale
latest: '0.4'
description-type: markdown
description: |
  # wai-saml2

  ![GitHub](https://img.shields.io/github/license/mbg/wai-saml2)
  ![Haskell CI](https://github.com/mbg/wai-saml2/workflows/Haskell/badge.svg?branch=master)
  ![stackage-nightly](https://github.com/mbg/wai-saml2/workflows/stackage-nightly/badge.svg)
  [![Hackage](https://img.shields.io/hackage/v/wai-saml2)](https://hackage.haskell.org/package/wai-saml2)

  A Haskell library which implements SAML2 assertion validation as WAI middleware. This can be used by a Haskell web application (the service provider, SP) to perform identity provider (IdP) initiated authentication, i.e. SAML2-based authentication where the authentication begins at the IdP-end, the IdP authenticates the user, and then gets the user to submit a SAML2 assertion back to the SP (known as "unsolicited SSO" within e.g. [the Shibboleth project](https://wiki.shibboleth.net/confluence/display/IDP30/UnsolicitedSSOConfiguration#UnsolicitedSSOConfiguration-SAML2.0)).

  ## Completeness

  There are currently a number of limitations to this library:

  * The library implements IdP-initiated authentication and has some support for SP-initiated authentication (See the documentation for the `Network.Wai.SAML2.Request` module)

  * The library does not currently support the full SAML2 specification and makes certain assumptions about what the IdP's responses contain. It will most likely fail with any IdPs which do not send responses in the same format. If you wish to use this library and encounter problems with your IdP, please open an issue or a pull request which implements support accordingly.

  ## Security

  The library is estimated to be sufficiently robust for use in a production environment. If you wish to implement this middleware, please note the following:

  * You __must__ store IDs of assertions you see. If an assertion is successfully validated by this library, you __must__ check that you have not previously seen the assertion ID in order to prevent replay attacks.

  * You __must not__ expose any errors to a client as that could severely compromise the security of the system as attackers may be able to use the errors to narrow down valid SAML responses. You __should__ log and monitor errors though as they may indicate attacks on your system. Ensure that log files containing errors from the SAML2 middleware are stored securely.

  ## Usage

  ### Preliminaries

  You need to have registered your service provider with the identity provider. You need to have access to the IdP's metadata, which will contain the public key used for signature validation.

  ### Configuration

  The `saml2Config` function may be used to construct `SAML2Config` values. It expects at least the SP's private key and the IdP's public key as arguments (even when mandatory encryption is disabled) but you should almost certainly customise the configuration further. The private and public keys can be loaded with functions from the `Data.X509` and `Data.X509.File` modules (from the `x509` and `x509-store` packages, respectively):

  ```haskell
  (saml2Config spPrivateKey idpPublicKey){
      saml2AssertionPath = "/sso/assert",
      saml2ExpectedIssuer = Just "https://idp.sp.com/saml2",
      saml2ExpectedDestination = Just "https://example.com/sso/assert",
  }
  ```

  The configuration options are documented in the Haddock documentation for the `Network.Wai.SAML2.Config` module.

  ### Implementation

  Two interfaces to the middleware are provided. See the Haddock documentation for the `Network.Wai.SAML2` module for full usage examples. An example using the `saml2Callback` variant is shown below, where `cfg` is a `SAML2Config` value and `app` is your existing WAI application:

  ```haskell
  saml2Callback cfg callback mainApp
   where callback (Left err) app req sendResponse = do
             -- a POST request was made to the assertion endpoint, but
             -- something went wrong, details of which are provided by
             -- the error: this should probably be logged as it may
             -- indicate that an attack was attempted against the
             -- endpoint, but you *must* not show the error
             -- to the client as it would severely compromise
             -- system security
             --
             -- you may also want to return e.g. a HTTP 400 or 401 status
         callback (Right result) app req sendResponse = do
             -- a POST request was made to the assertion endpoint and the
             -- SAML2 response was successfully validated:
             -- you *must* check that you have not encountered the
             -- assertion ID before; we assume that there is a
             -- computation tryRetrieveAssertion which looks up
             -- assertions by ID in e.g. a database
             result <- tryRetrieveAssertion (assertionId (assertion result))

             case result of
                 Just something -> -- a replay attack has occurred
                 Nothing -> do
                     -- store the assertion id somewhere
                     storeAssertion (assertionId (assertion result))

                     -- the assertion is valid and you can now e.g.
                     -- retrieve user data from your database
                     -- before proceeding with the request by e.g.
                     -- redirecting them to the main view
  ```

  ## Contributions

  Please see [CONTRIBUTING.md](CONTRIBUTING.md)

  ## References

  * [SAML2 specification](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html)
  * [Exclusive XML Canonicalisation](https://www.w3.org/TR/xml-exc-c14n/)
  * [XML Signature Syntax and Processing](https://www.w3.org/TR/xmldsig-core1/)
  * [XML Encryption Syntax and Processing](https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html)
license-name: MIT
