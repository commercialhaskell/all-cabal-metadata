homepage: https://github.com/mbg/wai-saml2#readme
changelog-type: markdown
hash: a315e0452e4b68e619884c233fb723aeb5d7934e725ce7de1bb65a4ae8ebdd7c
test-bench-deps: {}
maintainer: github@michael-gale.co.uk
synopsis: SAML2 assertion validation as WAI middleware
changelog: |
  # 0.2.1

  * Fix missing export of `relayStateKey` and change its type.

  # 0.2.0

  * Added parsing for RelayState from form data, as sent by e.g. Shibboleth when a `target` query string parameter is passed to the unsolicited SSO endpoint.

  # 0.1.0

  * Initial release
basic-deps:
  bytestring: '>=0.9 && <0.12'
  wai: '>=3.0 && <4'
  xml-conduit: <2
  base: '>=4.8 && <5'
  data-default-class: <1
  time: '>=1.9 && <2'
  base64-bytestring: '>=0.1 && <2'
  text: <2
  c14n: '>=0.1.0.1 && <1'
  x509-store: <2
  x509: <2
  vault: '>=0.3 && <1'
  cryptonite: <1
  mtl: '>=2.2.1 && <3'
  wai-extra: '>=3.0 && <4'
  http-types: <1
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.2
- 0.2.1.3
author: Michael B. Gale
latest: 0.2.1.3
description-type: markdown
description: "# wai-saml2\n\n![GitHub](https://img.shields.io/github/license/mbg/wai-saml2)\n![Haskell
  CI](https://github.com/mbg/wai-saml2/workflows/Haskell/badge.svg?branch=master)\n![stackage-nightly](https://github.com/mbg/wai-saml2/workflows/stackage-nightly/badge.svg)\n[![Hackage](https://img.shields.io/hackage/v/wai-saml2)](https://hackage.haskell.org/package/wai-saml2)\n\nA
  Haskell library which implements SAML2 assertion validation as WAI middleware. This
  can be used by a Haskell web application (the service provider, SP) to perform identity
  provider (IdP) initiated authentication, i.e. SAML2-based authentication where the
  authentication begins at the IdP-end, the IdP authenticates the user, and then gets
  the user to submit a SAML2 assertion back to the SP (known as \"unsolicited SSO\"
  within e.g. [the Shibboleth project](https://wiki.shibboleth.net/confluence/display/IDP30/UnsolicitedSSOConfiguration#UnsolicitedSSOConfiguration-SAML2.0)).
  \n\n## Completeness\n\nThere are currently a number of limitations to this library:\n\n*
  As mentioned above, while the library implements IdP-initiated authentication, it
  does not yet implement SP-initiated authentication (where the SP submits a login
  request to the IdP).\n\n* The library does not currently support the full SAML2
  specification and makes certain assumptions about what the IdP's responses contain.
  It will most likely fail with any IdPs which do not send responses in the same format.
  If you wish to use this library and encounter problems with your IdP, please open
  an issue or a pull request which implements support accordingly.\n  * The library
  expects that SAML _assertions_ will be encrypted and will decrypt these. There is
  currently no support for plain-text assertions.\n  \n## Security\n\nThe library
  is estimated to be sufficiently robust for use in a production environment. If you
  wish to implement this middleware, please note the following:\n\n* You __must__
  store IDs of assertions you see. If an assertion is successfully validated by this
  library, you __must__ check that you have not previously seen the assertion ID in
  order to prevent replay attacks.\n\n* You __must not__ expose any errors to a client
  as that could severely compromise the security of the system as attackers may be
  able to use the errors to narrow down valid SAML responses. You __should__ log and
  monitor errors though as they may indicate attacks on your system. Ensure that log
  files containing errors from the SAML2 middleware are stored securely.\n\n## Usage\n\n###
  Preliminaries \n\nYou need to have registered your service provider with the identity
  provider. You need to have access to the IdP's metadata, which will contain the
  public key used for signature validation.\n\n### Configuration\n\nThe `saml2Config`
  function may be used to construct `SAML2Config` values. It expects at least the
  SP's private key and the IdP's public key as arguments, but you should almost certainly
  customise the configuration further. The private and public keys can be loaded with
  functions from the `Data.X509` and `Data.X509.File` modules (from the `x509` and
  `x509-store` packages, respectively):\n\n```haskell\n(saml2Config spPrivateKey idpPublicKey){\n
  \   saml2AssertionPath = \"/sso/assert\",\n    saml2ExpectedIssuer = Just \"https://idp.sp.com/saml2\",\n
  \   saml2ExpectedDestination = Just \"https://example.com/sso/assert\",\n} \n```\n\nThe
  configuration options are documented in the Haddock documentation for the `Network.Wai.SAML2.Config`
  module.\n\n### Implementation\n\nTwo interfaces to the middleware are provided.
  See the Haddock documentation for the `Network.Wai.SAML2` module for full usage
  examples. An example using the `saml2Callback` variant is shown below, where `cfg`
  is a `SAML2Config` value and `app` is your existing WAI application:\n\n```haskell\nsaml2Callback
  cfg callback mainApp\n where callback (Left err) app req sendResponse = do\n           --
  a POST request was made to the assertion endpoint, but\n           -- something
  went wrong, details of which are provided by\n           -- the error: this should
  probably be logged as it may\n           -- indicate that an attack was attempted
  against the \n           -- endpoint, but you *must* not show the error\n           --
  to the client as it would severely compromise\n           -- system security\n           --
  \n           -- you may also want to return e.g. a HTTP 400 or 401 status\n       callback
  (Right result) app req sendResponse = do   \n           -- a POST request was made
  to the assertion endpoint and the\n           -- SAML2 response was successfully
  validated:        \n           -- you *must* check that you have not encountered
  the \n           -- assertion ID before; we assume that there is a\n           --
  computation tryRetrieveAssertion which looks up\n           -- assertions by ID
  in e.g. a database\n           result <- tryRetrieveAssertion (assertionId (assertion
  result))\n           \n           case result of \n               Just something
  -> -- a replay attack has occurred\n               Nothing -> do\n                   --
  store the assertion id somewhere\n                   storeAssertion (assertionId
  (assertion result))\n                   \n                   -- the assertion is
  valid and you can now e.g.\n                   -- retrieve user data from your database\n
  \                  -- before proceeding with the request by e.g.\n                   --
  redirecting them to the main view\n```\n\n## Contributions\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md)\n\n##
  References\n\n* [SAML2 specification](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html)\n*
  [Exclusive XML Canonicalisation](https://www.w3.org/TR/xml-exc-c14n/)\n* [XML Signature
  Syntax and Processing](https://www.w3.org/TR/xmldsig-core1/)\n* [XML Encryption
  Syntax and Processing](https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html)\n"
license-name: MIT
