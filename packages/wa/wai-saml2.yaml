all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.2
- 0.2.1.3
- 0.3.0.0
- 0.3.0.1
- '0.4'
- '0.5'
- '0.6'
- 0.7.0
author: Michael B. Gale
basic-deps:
  base: '>=4.8 && <5'
  base16-bytestring: '>=0.1 && <1.1'
  base64-bytestring: '>=0.1 && <2'
  bytestring: '>=0.9 && <0.13'
  c14n: '>=0.1.0.1 && <1'
  containers: '>=0.6 && <0.8'
  crypton: <2
  crypton-x509: <2
  crypton-x509-store: <2
  data-default-class: <1
  http-types: <1
  mtl: '>=2.2.1 && <3'
  network-uri: '>=2.0 && <3'
  text: <2.2
  time: '>=1.9 && <2'
  vault: '>=0.3 && <1'
  wai: '>=3.0 && <4'
  wai-extra: '>=3.0 && <4'
  xml-conduit: <2
  zlib: '>=0.6.0.0 && <0.8'
changelog: |
  # Changelog for `wai-saml2`

  ## 0.7

  -   Replaced `x509Certificate` with `x509Certificates` in `IDPSSODescriptor` so that it may have more than one certificate ([#65](https://github.com/mbg/wai-saml2/pull/65) by [@fumieval](https://github.com/fumieval))
  -   Added `attributeValues` to `AssertionAttribute` in order to handle multiple attribute values with the same name ([#67](https://github.com/mbg/wai-saml2/pull/67) by [@fumieval](https://github.com/fumieval))
  -   Support signed assertions, not just signed responses ([#45](https://github.com/mbg/wai-saml2/pull/45) by [@fumieval](https://github.com/fumieval))
  -   Fixed a bug that could cause `renderXML` to crash ([#66](https://github.com/mbg/wai-saml2/pull/66) by [@fumieval](https://github.com/fumieval))
  -   Test more Stack resolvers in CI ([#71](https://github.com/mbg/wai-saml2/pull/71) by [@kushagarr](https://github.com/kushagarr))

  ## 0.6

  -   Switch from `x509-*` to `crypton-x509-*` ([#50](https://github.com/mbg/wai-saml2/pull/50) by [@mbg](https://github.com/mbg)).

  ## 0.5

  -   Support GHC 9.6 ([#53](https://github.com/mbg/wai-saml2/pull/53) by [@mbg](https://github.com/mbg))
  -   Fixed a bug in XML canonicalisation causing a digest mismatch on Okta when assertion attributes are present (special thanks to @hiroqn) ([#51](https://github.com/mbg/wai-saml2/pull/51) by [@fumieval](https://github.com/fumieval))
  -   Added `authnRequestDestination` field to `AuthnRequest` ([#47](https://github.com/mbg/wai-saml2/pull/47) by [@Philonous](https://github.com/Philonous))

  ## 0.4

  -   Split `validateResponse` into `decodeResponse` and `validateSAMLResponse` ([#31](https://github.com/mbg/wai-saml2/pull/31) by [@fumieval](https://github.com/fumieval))
  -   Exported `NameID` (formerly `NameId`), and renamed `subjectNameId` to `subjectNameID`
  -   Support GHC 9.4 ([#36](https://github.com/mbg/wai-saml2/pull/36) by [@mbg](https://github.com/mbg))
  -   Add new module `Network.Wai.SAML2.Request` with `AuthnRequest` generation for SP-initiated login flow ([#19](https://github.com/mbg/wai-saml2/pull/19) by [@fumieval](https://github.com/fumieval))
  -   Changed the `saml2PrivateKey` field to be optional and added `saml2ConfigNoEncryption` which takes a `PublicKey` only ([#37](https://github.com/mbg/wai-saml2/pull/37) by [@fumieval](https://github.com/fumieval))
  -   Added `showUTCTime` to `Network.Wai.SAML2.XML`
  -   Added a new module `Network.Wai.SAML2.NameIDFormat` ([#21](https://github.com/mbg/wai-saml2/pull/21) by [@fumieval](https://github.com/fumieval))
  -   Added new field `response` to `Result` which contains the full, decoded SAML response ([#33](https://github.com/mbg/wai-saml2/pull/33) by [@Philonous](https://github.com/Philonous))
  -   Validate audience restrictions ([#35](https://github.com/mbg/wai-saml2/pull/35) by [@Philonous](https://github.com/Philonous))
  -   Handle status codes according to the SAML2 specification ([#42](https://github.com/mbg/wai-saml2/pull/42)) by [@mbg](https://github.com/mbg)

  ## 0.3

  -   Improve parse error handling and make `encryptedKeyData` optional ([#11](https://github.com/mbg/wai-saml2/pull/11) by [@Philonous](https://github.com/Philonous))
  -   Add `subjectNameId` to `Subject` type ([#13](https://github.com/mbg/wai-saml2/pull/13) by [@kdxu](https://github.com/kdxu))
  -   Support the response format used by Okta, in which the `EncryptedAssertion` element is structured differently ([#12](https://github.com/mbg/wai-saml2/pull/12) by [@fumieval](https://github.com/fumieval))

  ## 0.2.1.3

  -   Metadata updates.

  ## 0.2.1.2

  No changes.

  ## 0.2.1.1

  -   Export `Result` type from `Network.Wai.SAML2` module.

  ## 0.2.1

  -   Fix missing export of `relayStateKey` and change its type.

  ## 0.2.0

  -   Added parsing for RelayState from form data, as sent by e.g. Shibboleth when a `target` query string parameter is passed to the unsolicited SSO endpoint.

  ## 0.1.0

  -   Initial release
changelog-type: markdown
description: |
  # wai-saml2

  ![GitHub](https://img.shields.io/github/license/mbg/wai-saml2)
  [![Haskell](https://github.com/mbg/wai-saml2/actions/workflows/haskell.yml/badge.svg)](https://github.com/mbg/wai-saml2/actions/workflows/haskell.yml)
  [![Stackage Nightly](https://github.com/mbg/wai-saml2/actions/workflows/stackage-nightly.yml/badge.svg)](https://github.com/mbg/wai-saml2/actions/workflows/stackage-nightly.yml)
  [![Hackage](https://img.shields.io/hackage/v/wai-saml2)](https://hackage.haskell.org/package/wai-saml2)

  A Haskell library which implements SAML2 assertion validation as WAI middleware. This can be used by a Haskell web application (the service provider, SP) to perform identity provider (IdP) initiated authentication, i.e. SAML2-based authentication where the authentication begins at the IdP-end, the IdP authenticates the user, and then gets the user to submit a SAML2 assertion back to the SP (known as "unsolicited SSO" within e.g. [the Shibboleth project](https://wiki.shibboleth.net/confluence/display/IDP30/UnsolicitedSSOConfiguration#UnsolicitedSSOConfiguration-SAML2.0)).

  ## Completeness

  There are currently a number of limitations to this library:

  * The library implements IdP-initiated authentication and has some support for SP-initiated authentication (See the documentation for the `Network.Wai.SAML2.Request` module)

  * The library does not currently support the full SAML2 specification and makes certain assumptions about what the IdP's responses contain. It will most likely fail with any IdPs which do not send responses in the same format. If you wish to use this library and encounter problems with your IdP, please open an issue or a pull request which implements support accordingly.

  ## Security

  The library is estimated to be sufficiently robust for use in a production environment. If you wish to implement this middleware, please note the following:

  * You __must__ store IDs of assertions you see. If an assertion is successfully validated by this library, you __must__ check that you have not previously seen the assertion ID in order to prevent replay attacks.

  * You __must not__ expose any errors to a client as that could severely compromise the security of the system as attackers may be able to use the errors to narrow down valid SAML responses. You __should__ log and monitor errors though as they may indicate attacks on your system. Ensure that log files containing errors from the SAML2 middleware are stored securely.

  ## Usage

  ### Preliminaries

  You need to have registered your service provider with the identity provider. You need to have access to the IdP's metadata, which will contain the public key used for signature validation.

  ### Configuration

  How to configure this library depends on your IdP's configuration. You should consult the relevant documentation for your IdP as well as review your SP's configuration on the IdP end. You should almost certainly customise the configuration beyond the defaults described below.

  The `saml2Config` function may be used to construct `SAML2Config` values. Configurations constructed with `saml2Config` expect assertions to be encrypted. If you expect assertions to be unencrypted, then you may wish to start with `saml2ConfigNoEncryption` instead.

  Since the `saml2Config` function expects encrypted assertions, it needs at least the SP's private key and the IdP's public key as arguments (even when mandatory encryption is disabled). The private and public keys can be loaded with functions from the `Data.X509` and `Data.X509.File` modules (from the `x509` and `x509-store` packages, respectively):

  ```haskell
  (saml2Config spPrivateKey idpPublicKey){
      saml2AssertionPath = "/sso/assert",
      saml2ExpectedIssuer = Just "https://idp.sp.com/saml2",
      saml2ExpectedDestination = Just "https://example.com/sso/assert",
  }
  ```

  The configuration options (`saml2AssertionPath`, `saml2ExpectedIssuer`, `saml2ExpectedDestination`, etc.) are documented in the Haddock documentation for the `Network.Wai.SAML2.Config` module.

  Both `saml2Config` and `saml2ConfigNoEncryption` construct configurations which validate only the response signature. If you need to validate the assertion signature, you must change the `saml2ValidationTarget` property to `ValidateAssertion`. This can also be set to `ValidateEither`, which will require __either__ the response signature __or__ the assertion signature to be valid. Do not use `ValidateEither` unless your IdP requires this.

  ### Implementation

  Two interfaces to the middleware are provided. See the Haddock documentation for the `Network.Wai.SAML2` module for full usage examples. An example using the `saml2Callback` variant is shown below, where `cfg` is a `SAML2Config` value and `mainApp` is your existing WAI application:

  ```haskell
  saml2Callback cfg callback mainApp
   where callback (Left err) app req sendResponse = do
             -- a POST request was made to the assertion endpoint, but
             -- something went wrong, details of which are provided by
             -- the error: this should probably be logged as it may
             -- indicate that an attack was attempted against the
             -- endpoint, but you *must* not show the error
             -- to the client as it would severely compromise
             -- system security
             --
             -- you may also want to return e.g. a HTTP 400 or 401 status
         callback (Right result) app req sendResponse = do
             -- a POST request was made to the assertion endpoint and the
             -- SAML2 response was successfully validated:
             -- you *must* check that you have not encountered the
             -- assertion ID before; we assume that there is a
             -- computation tryRetrieveAssertion which looks up
             -- assertions by ID in e.g. a database
             result <- tryRetrieveAssertion (assertionId (assertion result))

             case result of
                 Just something -> -- a replay attack has occurred
                 Nothing -> do
                     -- store the assertion id somewhere
                     storeAssertion (assertionId (assertion result))

                     -- the assertion is valid and you can now e.g.
                     -- retrieve user data from your database
                     -- before proceeding with the request by e.g.
                     -- redirecting them to the main view
  ```

  ## Contributions

  Please see [CONTRIBUTING.md](CONTRIBUTING.md)

  ## References

  * [SAML2 specification](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html)
  * [Exclusive XML Canonicalisation](https://www.w3.org/TR/xml-exc-c14n/)
  * [XML Signature Syntax and Processing](https://www.w3.org/TR/xmldsig-core1/)
  * [XML Encryption Syntax and Processing](https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html)
description-type: markdown
hash: 07beba85d4d3afb3cad26bbdd6b4446546f576f705c3a3423e8ee1c4defe1165
homepage: https://github.com/mbg/wai-saml2#readme
latest: 0.7.0
license-name: MIT
maintainer: github@michael-gale.co.uk
synopsis: SAML2 assertion validation as WAI middleware
test-bench-deps:
  base: '>=0'
  base16-bytestring: '>=0.1 && <1.1'
  base64-bytestring: '>=0.1 && <2'
  bytestring: '>=0'
  c14n: '>=0.1.0.1 && <1'
  containers: '>=0.6 && <0.8'
  crypton: <2
  crypton-x509: <2
  crypton-x509-store: <2
  data-default-class: <1
  filepath: '>=0'
  http-types: <1
  mtl: '>=2.2.1 && <3'
  network-uri: '>=2.0 && <3'
  pretty-show: '>=0'
  tasty: '>=0'
  tasty-expected-failure: '>=0'
  tasty-golden: '>=0'
  tasty-hunit: '>=0'
  text: <2.2
  time: '>=1.9 && <2'
  transformers: '>=0'
  vault: '>=0.3 && <1'
  wai: '>=3.0 && <4'
  wai-extra: '>=3.0 && <4'
  wai-saml2: '>=0'
  xml-conduit: '>=0'
  zlib: '>=0.6.0.0 && <0.8'
