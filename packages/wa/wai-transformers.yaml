all-versions:
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.5.1
- 0.0.6
- 0.0.7
- 0.1.0
author: Athan Clark
basic-deps:
  base: '>=4.8 && <5'
  exceptions: '>=0'
  extractable-singleton: '>=0.0.1'
  monad-control-aligned: '>=0.0.1'
  transformers: '>=0'
  wai: '>=3.2.1'
  wai-websockets: '>=0'
  websockets: '>=0.12.4'
changelog: ''
changelog-type: ''
description: |
  wai-transformers
  ================

  Simple parameterization of Wai's `Application` and `Middleware` types.


  ## Overview

  Wai's `Application` type is defined as follows:

  ```haskell
  type Application = Request -> (Response -> IO ResponseReceived) -> IO ResponseReceived
  ```

  This is great for the server - we can just `flip ($)` the middlewares together to get
  an effectful server. However, what if we want to encode useful information in our
  middleware chain / end-point application? Something like a `ReaderT Env` environment,
  where useful data like a universal salt, current hostname, or global mutable references can
  be referenced later if it were wedged-in.

  The design looks like this:

  ```haskell
  type ApplicationT m = Request -> (Response -> IO ResponseReceived) -> m ResponseReceived
  ```

  Now we can encode MTL-style contexts with applications we write

  ```haskell
  type MiddlewareT m = ApplicationT m -> ApplicationT m


  data AuthConfig = AuthConfig
    { authFunction :: Request -> Either AuthException (Response -> Response)
    }

  simpleAuth :: ( MonadReader AuthConfig m
                , MonadError AuthException m
                ) => MiddlewareT m
  simpleAuth app req resp = do
    auth <- authFunction <$> ask
    case auth req of
      Left e = throwError e
      Right f = app req (resp . f)

  simpleAuth' :: Middleware
  simpleAuth' app req resp =
    eReceived <- runExceptT $ runReaderT (simpleAuth app req resp) myAuthConfig
    case eReceived of
      Left e = resp $ respondLBS "Unauthorized!"
      Right r = return r
  ```
description-type: markdown
hash: 82b47d17865904e436b71d497b6b71644ec5ed4169174ff488d1aeeeade31334
homepage: https://github.com/athanclark/wai-transformers#readme
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: athan.clark@localcooking.com
synopsis: ''
test-bench-deps: {}
