all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
author: Oleg Grenrus <oleg.grenrus@iki.fi>
basic-deps:
  aeson: '>=0.8.0.2'
  base: '>=4.6 && <4.10'
  bytestring: '>=0.10.4.0'
  directory: '>=1.2.1.0'
  filepath: '>=1.3.0.2'
  http-types: '>=0.8.6'
  regex-applicative: '>=0.3.1'
  template-haskell: '>=0'
  text: '>=1.1.0.0'
  wai: '>=3.0.2.3'
  wai-app-static: '>=3.0'
  waitra: '>=0'
  warp: '>=0'
changelog: ''
changelog-type: ''
description: |
  # Waitra

  Waitra is a very simple router.
  It's useful for writing simple API web-services,
  when you don't want to use the whole Yesod stack.

  [![Build Status](https://travis-ci.org/futurice/waitra.svg?branch=master)](https://travis-ci.org/futurice/waitra)

  ## Synopsis

  ```hs
  echoRoute :: Route
  echoRoute = routeGet (echoApp <$ string "/api/echo/" <*> many anySym)
    where echoApp msg _req respond = respond $ responseLBS status200 [] (fromString msg)

  app :: Application
  app = waitraMiddleware [echoRoute] $ staticApp $ embeddedSettings $(mkRecursiveEmbedded "static")
  ```

  ## Documentation

  Documentation is available at [hackage](http://hackage.haskell.org/package/waitra).
description-type: markdown
hash: 7b2f9d4fe0358eb303c3993233b05c1505f4021ebee41fccfad0b6badbf8bd8f
homepage: https://github.com/futurice/waitra
latest: 0.0.4.0
license-name: MIT
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: A very simple Wai router
test-bench-deps:
  aeson: '>=0'
  base: '>=4.6 && <4.10'
  http-types: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  wai: '>=0'
  wai-extra: '>=3.0.4.5'
  waitra: '>=0'
