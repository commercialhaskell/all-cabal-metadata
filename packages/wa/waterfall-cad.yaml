all-versions:
- 0.0.0.1
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.2.1
- 0.1.2.2
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.2.1
author: Joe Warren
basic-deps:
  base: '>=4.7 && <5'
  filepath: '>=1.4 && <1.6'
  lattices: '>=2.0 && <3'
  lens: '>=5 && <6'
  linear: '>=1.21 && <2'
  opencascade-hs: '>=0.2.2.1 && <0.3'
  primitive: '>=0.7 && <0.10'
  resourcet: '>=1.2 && <1.4'
changelog: "# Changelog for `waterfall-cad`\n\nAll notable changes to this project
  will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  this project adheres to the\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\n\n\n##
  Unreleased\n\n## 0.2.2.1\n\n### Fixed\n\n- Importing files that contain multiple
  separate solids should no longer error\n\n## 0.2.2.0\n\n### Added \n- New functions
  in `Waterfall.IO`\n    - Support for reading (as well as writing) all file formats\n
  \       - `readSTL`, `readSTEP`, `readGLTF`, `readGLB`, `readOBJ`\n    - (Wavefront)
  OBJ support (`writeOBJ`)\n    - Convenience methods `readSolid` and `writeSolid`
  inferring the format from the file extension\n\n### Changed\n\n- Make error handling
  for actions in `Waterfall.Text` throw a `WaterfallIOException` on failure\n## 0.2.1.0\n\n###
  Added\n\n- GLTF (graphics library transmission format) support: `writeGLTF` and
  `writeGLB` in `Waterfall.IO`\n- obj file format support `writeOBJ` in `Waterfall.IO`\n\n##
  0.2.0.0\n\n### Added \n\n- the following `volume`, `momentOfInertia` and `centerOfMass`
  queries in `Waterfall.Solids`\n    - `volume`\n    - `momentOfInertia`\n    - `centerOfMass`\n-
  `aabbToSolid` to `Waterfall.Solids` (converts the output of `axisAlignedBoundingBox`
  into a solid)\n- `Waterfall.BoundingBox.AxisAligned`, for calculating (and reifying)
  an (axis aligned) bounding box of a solid \n- `Waterfall.BoundingBox.Oriented`,
  for calculating (and reifying) an (oriented) bounding box of a solid \n\n### Changed
  \n\n- Changed the representation of `Solid` (and other Waterfall values) from a
  newtype wrapper to `Data.Acquire` to a naked `Ptr`, with destructors called using
  Finalizers.\n    - This means it's possible to support \"queries\", like calculating
  the volume of a Solid\n    - It also means there's some risk of exceptions being
  thrown when working with plain values, which wasn't present before\n- `Waterfall.Text.fontFromPath`
  and `Waterfall.Text.fontFromSystem` now return `IO` actions rather than embedding
  the action into the underlying `Shape`\n\n### Fixed\n\n- Typo in documentation for
  `Waterfall.Solids.unitCone` \n\n## 0.1.2.2 - 2024-01-09 \n\n### Fixed\n\n- Fixed
  dependency versions\n\n## 0.1.2.1 - 2024-01-09 \n\n### Added\n\n- Added `mirror`
  to `Transformable` typeclass, and `mirror2D` to `Transformable2D`\n- Added `fromPath2D`
  to `Waterfall.Path` to make 2D paths into 3D ones.\n- Added `centeredCylinder` and
  `unitCone` to `Waterfall.Solids`\n\n### Fixed\n\n- Handle offsetting by zero (return
  the unmodified shape)\n- Fix rotation of endcaps in a `sweep`\n\n## 0.1.1.1 - 2023-12-12
  \n\n## 0.1.1.0 - 2023-12-12 \n\n### Added \n\n- Add Waterfall.Offset, offsetting
  an object by a certain amount\n- Add `unitCircle`, `unitSquare` and `centeredSquare`
  to `Waterfall.TwoD.Shape`\n\n### Fixed\n\n- Correctly rotate and translate endcaps
  to the `Path` in a `sweep`\n\n## 0.1.0.0 - 2023-12-05 \n\n### Added\n\n- Reexported
  all modules under top level `Waterfall` module\n- Refactored common code in `Path`
  and `Path2D` into the `AnyPath` typeclass\n- Added Waterfall.Text, containing text
  rendering functions\n\n### Fixed\n\n- Fix build on MacOS (tested with the homebrew
  install of OpenCASCADE)\n\n\n## 0.0.0.1 - YYYY-MM-DD\n"
changelog-type: markdown
description: "# Waterfall CAD \n\n![Waterfall CAD](https://raw.githubusercontent.com/joe-warren/opencascade-hs/main/images/logo/waterfall-cad-logo-name.svg)\n\nWaterfall
  CAD is a declarative CAD/Solid Modeling library.\n\nThis uses [opencascade-hs](https://hackage.haskell.org/package/opencascade-hs)
  as the kernel, but provides a \"more functional\" API over it.\n\n## Dependencies
  \n\nYou'll need the main OpenCASCADE libraries/header files installed to use this.\n\nPlease
  see the [main readme](https://github.com/joe-warren/opencascade-hs/#installing-dependencies)
  on Github for more information.\n\n## Examples\n\nThere are examples of how to use
  the library in [waterfall-cad-examples](https://hackage.haskell.org/package/waterfall-cad-examples).\n\nYou
  can see images of these examples in the [main readme](https://github.com/joe-warren/opencascade-hs/#examples)
  on Github."
description-type: markdown
hash: 33e2e1d89bef4052791fee74689660addb060ee568c9640d34564e23b13521f5
homepage: https://github.com/joe-warren/opencascade-hs#readme
latest: 0.2.2.1
license-name: LGPL-2.1-only
maintainer: josephmarkwarren@gmail.com
synopsis: Declarative CAD/Solid Modeling Library
test-bench-deps: {}
