homepage: https://github.com/donatello/wai-token-bucket-ratelimiter
changelog-type: markdown
hash: 4e06d632554e4aed1832e28043b16965dbb8e65b30e18bfcaad35ddba9b1dc7a
test-bench-deps:
  warp: -any
  http-client: -any
  bytestring: -any
  wai: '>=3.0 && <4'
  base: -any
  hspec: '>=2.10 && <3'
  criterion: '>=1.6 && <2'
  async: '>=2.2.4 && <3'
  wai-token-bucket-ratelimiter: -any
  http-types: <1
maintainer: aditya.mmy@gmail.com
synopsis: A request rate limiting middleware using token buckets
changelog: |
  # Revision history for wai-token-bucket-ratelimiter

  ## 0.1.0.1 - 2023-06-07

  * Make internal data types strict

  ## 0.1.0.0 -- 2023-04-07

  * First version. Released on an unsuspecting world.
basic-deps:
  wai: '>=3.0 && <4'
  base: '>=4.16 && <5'
  unordered-containers: '>=0.2.19.1 && <0.3'
  clock: '>=0.8.3 && <1'
  hashable: '>=1.4 && <2'
  http-types: <1
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Aditya Manthramurthy
latest: 0.1.0.1
description-type: markdown
description: |
  # wai-token-bucket-ratelimiter: WAI middleware to rate limit requests

  This package provides a WAI middleware to perform request rate limiting using
  the  [Token Bucket Algorithm](https://en.m.wikipedia.org/wiki/Token_bucket).

  ## Quickstart

  Adding rate limiting to your WAI app is as simple as:

  ``` haskell
  rateLimitedApp :: (Request -> IO (ByteString, Rate)) -> Application -> IO Application
  rateLimitedApp keyFunc = do
    rateLimitSettings <- newRateLimitSettings keyFunc
    return $ rateLimitMiddleware rateLimitSettings app
  ```

  A rate is specified with the `mkRate` function that takes two parameters. These are:
  - **burst amount**: number of requests to allow initially and after a period of inactivity, and
  - **averate rate**: for example 5 requests every 2 seconds, specified as a pair (5, 2)

  The special `infRate` value specified an infinite rate or rather no rate limit.

  These are specified by your "key function":

  ``` haskell
  keyFunc :: Request -> IO (ByteString, Rate)
  keyFunc r = do
    let path = rawPathInfo r
        rate = case path of
          "/1" -> mkRate 5 (4, 1) -- burst=5, avg rate of 4 reqs per 1 second
          "/2" -> infRate
          _ -> mkRate 1 (1, 1) -- burst=1, avg rate of 1 req per 1 second
    return (path, rate)
  ```

  In a real world case, the key function would most likely dependent on the client IP and the API endpoint.
license-name: Apache-2.0
