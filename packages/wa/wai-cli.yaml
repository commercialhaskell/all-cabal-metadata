all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.3
author: Val Packett
basic-deps:
  ansi-terminal: '>=0'
  base: '>=4.8.0.0 && <10'
  http-types: '>=0'
  iproute: '>=0'
  monads-tf: '>=0'
  network: '>=0'
  options: '>=0'
  stm: '>=0'
  streaming-commons: '>=0'
  transformers: '>=0'
  unix: '>=0'
  wai: '>=0'
  wai-extra: '>=0'
  warp: '>=0'
  warp-tls: '>=0'
changelog: ''
changelog-type: ''
description: "# wai-cli [![Hackage](https://img.shields.io/hackage/v/wai-cli.svg?style=flat)](https://hackage.haskell.org/package/wai-cli)
  [![Build Status](https://github.com/unrelentingtech/wai-cli/workflows/WaiCLI%20CI/badge.svg)](https://github.com/unrelentingtech/wai-cli/actions?query=workflow%3A%22WaiCLI+CI%22)
  [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)\n\nA
  command line runner for Wai apps (using Warp) with support for:\n\n- `--protocol
  http --port 8000` TCP sockets\n- `--protocol unix --socket /var/run/app/sock` UNIX
  domain sockets\n- `--protocol cgi` running as a CGI app (the original serverless
  lambda functions from the 90s)\n- `--protocol fastcgi` running as a FastCGI app
  (OPTIONAL! You need to build with the `fastcgi` cabal flag and you need to have
  `libfcgi` (e.g. `fcgi-devkit` package on FreeBSD) installed)\n- `--protocol activate`
  socket activation (systemd-compatible, but not restricted to systemd in any way.
  see [soad](https://github.com/unrelentingtech/soad) for an interesting use of (de)activation!)\n-
  `--protocol (http+tls|unix+tls|activate+tls) --tlskey key.pem --tlscert cert.pem`
  TLS (can be turned off with a cabal flag to avoid compiling [the TLS library](https://github.com/vincenthz/hs-tls))\n-
  `--graceful (none|serve-normally|serve-503)` graceful shutdown (on TERM signal)\n-
  `--devlogging` development logging (from `wai-extra`)\n- printing a pretty and colorful
  run message (e.g. `Running on http port 3000 with 4 CPUs`) (you can replace it with
  your own, or with nothing)\n\nExtracted from [sweetroll](https://github.com/unrelentingtech/sweetroll)
  and [microformats2-parser](https://github.com/unrelentingtech/microformats2-parser)'s
  demo web app.\n\nNow used in the [magicbane](https://github.com/unrelentingtech/magicbane)
  framework (which was also extracted from sweetroll).\n\n## Usage\n\nAdd a dependency
  on `wai-cli` and write something like this:\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\nimport Web.Scotty\nimport Network.Wai.Cli\nimport Data.Monoid (mconcat)\n\napp
  = scottyApp $ do\n  get \"/:word\" $ do\n    beam <- param \"word\"\n    html $
  mconcat [\"<h1>Scotty, \", beam, \" me up!</h1>\"]\n\nmain = defWaiMain =<< app\n```\n\nWant
  to use command line args for your application-specific settings? Don't.\nUse environment
  variables instead.\nPossibly with [dotenv](https://github.com/stackbuilders/dotenv-hs)
  to load some of them from a file.\n[envy](https://www.stackage.org/package/envy)
  is a really awesome way to read them.\n\n## License\n\nThis is free and unencumbered
  software released into the public domain.  \nFor more information, please refer
  to the `UNLICENSE` file or [unlicense.org](http://unlicense.org).\n"
description-type: markdown
hash: 896e617ca43122e63b4fe9520151b515b7e6287cfd75adc738ef4a9ddda666b7
homepage: https://codeberg.org/valpackett/wai-cli
latest: 0.2.3
license-name: LicenseRef-PublicDomain
maintainer: val@packett.cool
synopsis: Command line runner for Wai apps (using Warp) with TLS, CGI, socket activation
  & graceful shutdown
test-bench-deps: {}
