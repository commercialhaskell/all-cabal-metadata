all-versions:
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.0.1
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.6.1.1
- 0.6.1.2
- 0.6.2
- 0.7.0
author: Athan Clark
basic-deps:
  aeson: '>=0'
  base: '>=4.11 && <5'
  blaze-builder: '>=0'
  blaze-html: '>=0'
  bytestring: '>=0'
  clay: '>=0'
  exceptions: '>=0'
  extractable-singleton: '>=0'
  hashable: '>=0'
  http-media: '>=0'
  http-types: '>=0'
  lucid: '>=0'
  mmorph: '>=0'
  monad-control: '>=0'
  monad-control-aligned: '>=0.0.2'
  monad-logger: '>=0'
  mtl: '>=0'
  resourcet: '>=0'
  shakespeare: '>=0'
  text: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
  unordered-containers: '>=0'
  urlpath: '>=11.0.0'
  wai: '>=3.2'
  wai-logger: '>=0'
  wai-transformers: '>=0.1.0'
changelog: ''
changelog-type: ''
description: |
  wai-middleware-content-type
  ===========================

  Route middlewares based on the incoming `Accept` HTTP header,
  and other hints like the file extension (`foo.txt`) of the route
  requested.

  ## Usage

  This package provides many combinators for turning various data
  types into the response you'd expect. For instance,
  [blaze-html](https://hackage.haskell.org/package/blaze-html) gives
  us _strictly_ `Html` data, right? We can be sure to only respond
  with `Html`-compatible requests with our toolset:

  ```haskell
  import Network.Wai.Middleware.ContentType
  import Network.Wai.Trans


  myMiddleware :: MiddlewareT (ReaderT Env m)

  contentTypeRoutes :: Monad m =>
                       FileExtListenerT urlbase (Status -> ResponseHeaders -> Response) m ()
  contentTypeRoutes = do
    blaze myBlazeResponse
    cassius myCassiusResponse
    text myTextResponse


  contentMiddleware :: Monad m => MiddlewareT m
  contentMiddleware app req respond =
    fileExtsToMiddleware $
      mapResponse (\f -> f status200 []) contentTypeRoutes
  ```


  This library was designed for use with [nested-routes](https://hackage.haskell.org/package/nested-routes),
  but it's all good if you want to use it separately.
description-type: markdown
hash: 67b9926c85f4d2a54a247cec44a4f4bea3f9f760a36ca60f8bcac496bd331b12
homepage: https://github.com/athanclark/wai-middleware-content-type#readme
latest: 0.7.0
license-name: BSD-3-Clause
maintainer: athan.clark@gmail.com
synopsis: Route to different middlewares based on the incoming Accept header.
test-bench-deps:
  aeson: '>=0'
  base: '>=4.11 && <5'
  blaze-builder: '>=0'
  blaze-html: '>=0'
  bytestring: '>=0'
  clay: '>=0'
  exceptions: '>=0'
  extractable-singleton: '>=0'
  hashable: '>=0'
  hspec: '>=0'
  hspec-wai: '>=0'
  http-media: '>=0'
  http-types: '>=0'
  lucid: '>=0'
  mmorph: '>=0'
  monad-control: '>=0'
  monad-control-aligned: '>=0.0.2'
  monad-logger: '>=0'
  mtl: '>=0'
  resourcet: '>=0'
  shakespeare: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  text: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
  unordered-containers: '>=0'
  urlpath: '>=0'
  wai: '>=0'
  wai-logger: '>=0'
  wai-middleware-content-type: '>=0'
  wai-transformers: '>=0'
  warp: '>=0'
