all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
author: Lars Kuhtz <lakuhtz@gmail.com>
basic-deps:
  attoparsec: '>=0.10.4.0'
  base: '>=4.8 && <5.0'
  base-unicode-symbols: '>=0.2.2.3'
  bytestring: '>=0.10.0.2'
  case-insensitive: '>=1.0.0.1'
  http-types: '>=0.8.0'
  mtl: '>=2.2'
  transformers: '>=0.4'
  wai: '>=3.0'
changelog: |+
  0.2.7 (2019-06-06)
  ==================

  *   Remove support for `wai<3` and older versions of GHC from the code base.
  *   Fix a documentation bug [#23](https://github.com/larskuhtz/wai-cors/issues/23).

  0.2.6 (2017-12-01)
  ==================

  *   Removed ghc-7.6.3 and versions of wai<3.0 from the CI test matrix.
      These versions are still supported in the code but cabal may need some
      manual help to resolve dependencies.

  *   Fixes and improvements to the documentation. Thanks to Frederik HanghÃ¸j
      Iversen, Alex Collins, and Maximilian Tagher.

  0.2.5
  =====

  *   Support GHC-8.0.1.

  *   Removed dependencies on parsers package.

  0.2.4
  =====

  *   Fix [bug #1](https://github.com/larskuhtz/wai-cors/issues/1).
      Response header `Vary: Origin` is now included when `corsVaryOrigin`
      is `True` and `corsOrigins` does not equal `Nothing`.

  0.2.3
  =====

  *   Added a test-suite to the package that uses PhantomJS to simulate a
      browser client.

  *   Pass on websocket requests unchanged to the application. Add documentation
      that reminds the application author to check the `Origin` header for
      websocket requests.

  *   Move development source repository from https://github.com/alephcloud/wai-cors
      to https://github.com/larskuhtz/wai-cors.

  0.2.2
  =====

  *   Support GHC-7.10/base-4.8 without compiler warnings.

  *   Drop dependency on errors package.

  0.2.1
  =====

  *   Fix [bug #8](https://github.com/alephcloud/wai-cors/issues/8).
      Accept empty list as value for `Access-Control-Request-Headers`.

  0.2
  ===

  This version may break existing code by changing the type of
  `CorsResourcePolicy`.

  This version changes the behavior of `simpleCorsResourcePolicy`: Before
  it was a failure when the request didn't contain an @Origin@ header.
  With this version the request is passed unchanged to the application.
  If an failure occurs during CORS processing the response has HTTP status
  400 (bad request) and contains a short error messages. This behavior
  can be changed with the new settings `corsRequireOrigin` and
  `corsIgnorefailure`.

  *   Remove setting `corsVerboseResponse` from `CorsResourcePolicy`.

  *   Add new settings `corsRequireOrigin` and `corsIgnoreFailure` to
      `CorsResourcePolicy`.

  0.1.4
  =====

  *   Support wai-3

  0.1.3
  =====

  *   Improved documentation

  0.1.2
  =====

  *   Export type synonym `Origin`

  *   New easy-to-use middleware function `simpleCors` that supports just
      simple cross-origin requests

  *   The new value `simpleCorseResourcePolicy` is a `CorseResourcePolicy`
      for simple cross-origin requests.

  *   Documentation has been slightly improved

  *   Some code for testing `simpleCors` from a browser

  0.1.1
  =====

  *   Drop redundant dependencies on *lens* and *ghc-prim*

  *   Fix typo in HTTP header field name `Access-Control-Allow-Credentials`

  0.1.0
  =====

  *   Initial version

changelog-type: markdown
description: |+
  [![Build Status](https://travis-ci.org/larskuhtz/wai-cors.svg?branch=master)](https://travis-ci.org/larskuhtz/wai-cors)

  Cross-Origin Resource Sharing (CORS) For Wai
  ============================================

  This package provides a Haskell implementation of CORS for
  [WAI](http://hackage.haskell.org/package/wai)
  that aims to be compliant with
  [http://www.w3.org/TR/cors](http://www.w3.org/TR/cors).

  Note On Security
  ----------------

  This implementation doesn't include any server side enforcement. By complying
  with the CORS standard it enables the client (i.e. the web browser) to enforce
  the CORS policy. For application authors it is strongly recommended to take
  into account the security considerations in section 6.3 of the
  [CORS standard](http://wwww.w3.org/TR/cors). In particular the application should
  check that the value of the `Origin` header matches the expectations.

  Websocket connections don't support CORS and are ignored by the CORS implementation
  in this package. However Websocket requests usually (at least for some
  browsers) include the @Origin@ header. Applications are expected to check the
  value of this header and respond with an error in case that its content doesn't
  match the expectations.

  Installation
  ------------

  Assuming the availability of recent versions of
  [GHC](https://www.haskell.org/ghc/) and [cabal](https://www.haskell.org/cabal/)
  this package is installed via

  ```.bash
  cabal update
  cabal install wai-cors
  ```

  Usage
  -----

  The function 'simpleCors' enables support of simple cross-origin requests. More
  advanced CORS policies can be enabled by passing a 'CorsResourcePolicy' to the
  'cors' middleware.

  The file `examples/Scotty.hs` shows how to support simple cross-origin requests (as
  defined in [http://www.w3.org/TR/cors](http://www.w3.org/TR/cors)) in a
  [scotty](http://hackage.haskell.org/package/scotty) application.

  ```.haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main
  ( main
  ) where

  import Network.Wai.Middleware.Cors
  import Web.Scotty

  main :: IO ()
  main = scotty 8080 $ do
      middleware simpleCors
      matchAny "/" $ text "Success"
  ```

  The result of following curl command will include the HTTP response
  header `Access-Control-Allow-Origin: *`.

  ```.bash
  curl -i http://127.0.0.1:8080 -H 'Origin: 127.0.0.1' -v
  ```

  Documentation for more general usage can be found in the module
  [Network.Wai.Middleware.Cors](http://hackage.haskell.org/package/wai-cors/docs/Network-Wai-Middleware-Cors.html).

  Test
  ----

  In order to run the automated test suite [PhantomJS](http://phantomjs.org/) (at
  least version 2.0) must be installed in the system.

  ```.bash
  cabal install --only-dependencies --enable-tests
  cabal test --show-details=streaming
  ```

  If [PhantomJS](http://phantomjs.org/) is not available the tests can be
  exectued manually in a modern web-browser as follows.

  Start the server application:

  ```.bash
  cd test
  ghc -main-is Server Server.hs
  ./Server
  ```

  Open the file `test/index.html` in a modern web-browser. On page load a Javascript
  script is exectued that runs the test suite and prints the result on the page.

description-type: markdown
hash: c3309a9c9db001cb5c3c777222ba3389f35c2ec57425731cddf2af8515b204b2
homepage: https://github.com/larskuhtz/wai-cors
latest: 0.2.7
license-name: MIT
maintainer: Lars Kuhtz <lakuhtz@gmail.com>
synopsis: CORS for WAI
test-bench-deps:
  base: '>=4.8 && <5.0'
  base-unicode-symbols: '>=0.2'
  directory: '>=1.2'
  filepath: '>=1.4'
  http-types: '>=0.8'
  network: '>=2.6'
  process: '>=1.2'
  tasty: '>=0.11'
  tasty-hunit: '>=0.9'
  text: '>=1.2'
  wai: '>=3.0'
  wai-cors: '>=0'
  wai-extra: '>=3.0'
  wai-websockets: '>=3.0.1'
  warp: '>=3.0'
  websockets: '>=0.10'
