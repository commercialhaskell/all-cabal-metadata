all-versions:
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.4.0
- 0.4.0.1
author: Athan Clark
basic-deps:
  base: '>=4.8 && <5'
  bytestring: '>=0'
  exceptions: '>=0'
  hashable: '>=0'
  http-types: '>=0'
  mmorph: '>=0'
  monad-control: '>=0'
  monad-control-aligned: '>=0'
  monad-logger: '>=0'
  mtl: '>=0'
  resourcet: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
  unordered-containers: '>=0'
  wai: '>=3.2.1'
  wai-transformers: '>=0.1.0'
changelog: ''
changelog-type: ''
description: |
  wai-middleware-verbs
  ====================

  Route to different Wai middleware based on the incoming HTTP verb
  detected.

  ## Usage

  This library depends on the [wai-transformers](https://hackage.haskell.org/package/wai-transformers)
  package - we expect middleware to already be lifted to `MiddlewareT m`.

  As an example, here could be your application:

  ```haskell
  import Network.Wai.Trans
  import Network.Wai.Middleware.Verbs


  myMid1 :: MiddlewareT (ReaderT Env m)
  myMid2 :: Middleware

  uploadResponse :: ByteString -> MiddlewareT m
  uploadResponse _ = liftMiddleware myMid2

  verbRoutes :: VerbListenerT (MiddlewareT m) m ()
  verbRoutes = do
    get myMid1
    post uploadResponse
  ```

  Then, to use your newly assembled verb-router, turn the Verbs into a Middleware:

  ```haskell
  verbMid :: MiddlewareT (ReaderT Env m)
  verbMid = verbsToMiddleware verbRoutes
  ```

  From there, you can deconstruct your monolithic monad stack back down to `IO`,
  and plug-it-in to your existing middleware.
description-type: markdown
hash: dfe39d4a6fd082c53c97e5fba191868f8fd06aee0babc69c1d07819d718e36ab
homepage: https://github.com/athanclark/wai-middleware-verbs#readme
latest: 0.4.0.1
license-name: BSD-3-Clause
maintainer: athan.clark@localcooking.com
synopsis: Route Wai middlewares based on HTTP verbs
test-bench-deps: {}
