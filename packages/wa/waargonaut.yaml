all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.1.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.2.1
- 0.5.2.2
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
author: HASKELL-WAARGONAUT @ Data61
basic-deps:
  attoparsec: '>=0.13 && <0.15'
  base: '>=4.9 && <5'
  bifunctors: '>=5 && <5.6'
  bytestring: '>=0.10.6 && <0.12'
  containers: '>=0.5.6 && <0.7'
  contravariant: '>=1.4 && <1.6'
  digit: '>=0.7 && <1'
  distributive: '>=0.5 && <0.7'
  errors: '>=2.2 && <2.4'
  generics-sop: '>=0.4 && <0.6'
  hoist-error: '>=0.2 && <0.3'
  hw-balancedparens: '>=0.2 && <0.5'
  hw-bits: '>=0.7 && <0.8'
  hw-json-standard-cursor: '>=0.2.1.1 && <0.3'
  hw-prim: '>=0.6 && <0.7'
  hw-rankselect: '>=0.13 && <0.14'
  lens: '>=4.15 && <4.20'
  mmorph: '>=1.1 && <1.2'
  mtl: '>=2.2.2 && <2.3'
  nats: '>=1 && <1.2'
  natural: '>=0.3 && <0.4'
  parsers: '>=0.12 && <0.13'
  records-sop: '>=0.1 && <0.2'
  scientific: '>=0.3 && <0.4'
  semigroupoids: '>=5.2.2 && <5.4'
  semigroups: '>=0.8.4 && <0.20'
  tagged: '>=0.8.5 && <0.9'
  text: '>=1.2 && <1.3'
  transformers: '>=0.4 && <0.6'
  unordered-containers: '>=0.2.9 && <0.3'
  vector: '>=0.12 && <0.13'
  witherable: '>=0.2 && <0.4'
  wl-pprint-annotated: '>=0.1 && <0.2'
  zippers: '>=0.2 && <0.4'
changelog: |
  # Revision history for waargonaut

  ## 0.8.0.2  -- 2020-06-02

  - Support GHC 8.10.x and GHC 8.8.x
  - Fix warnings for GHC < 8.2.x

  ## 0.8.0.1  -- 2019-09-22

  * Support GHC 8.8.1

  * Support generics-sop 0.5

  ## 0.8.0.0  -- 2019-09-04

  * Add `onObj'` which is just `onObj` but specialised to `Identity`.

  * Add `gObjEncoder` for deriving `ObjEncoder` structures for record types only. Using the
    `IsRecord` constraint from `record-sop` package. This makes it easier to leverage the
    Contravariant functionality of the `ObjEncoder` without losing the benefits of deriving
    more trivial encoders.

  * Added the `FieldNameAsKey` option to the newtype options for generic derived enc/decoders.

  * Fixes #69 by removing duplicate call to `_optionsFieldName` function. Added regression test.

  * Improved the handling of newtype options for generic deriving to give a bit more
    flexibility and avoid strangeness with respect to some combinations of options.

  * Change the building of escaped whitespace chars to actually use the
    `escapedWhitespaceChar` function, instead of incorrectly generating an unescaped
    character.

  * Add haddock to gObjEncoder function

  * Correctly bump version to 0.8.0.0 as this is a breaking change because of new
    constructors on an exported sum type.

  * Remove some commented out code.

  * Add a better failure message to "impossible" error case.

  * Regenerate nix after cabal file changes

  ## 0.6.1.0  -- 2019-02-27

  * Add `passKeysToValues` decoder for decoding JSON objects where the key should
    be part of the value.

  ## 0.6.0.0  -- 2019-02-19

  #### Fixes

  * Handling of HeXDigit4 values was not correct. The bug was partly due to the
    choice of optic, instead of producing a (type/failure) error when working with
    mixed-case hex values, it seems to be zero'ing them out.
  * Added regression tests

  #### Rework

  * Redesigned ParseFn to handle:
    * Data.String.String
    * Data.Text.Text
    * Data.ByteString.ByteString
  * Updated documentation for ParseFn to match changes
  * Updated documentation for default parsing functions
  * Generalised the Builder process to handle Text and ByteString
    * Created a record type to hold the required functions for builders
    * Created submodules to house the generalised builders (see Waargonaut.Encode.Builder and friends)
    * Added test to ensure both builders produce identical output
  * Updated documentation for Encode process to match changes
  * Added deprecation notice to `Waargonaut.Decode.Traversal`

  #### Cleanup

  * Factored out components into more submodules:
    * UnescapedJChar
    * EscapedJChar
    * HexDigit4
    * Elem
    * Elems
    * JAssoc
    * Decode.Runners
  * Updated documentation if required for module changes.
  * Deleted commented out code
  * Changed all file textual encoding/decoding tests to Test.Tasty.Golden.

  #### New hotness

  * Added a few prisms to allow for similar behaviour to the lens-aeson package.
  * Added property tests for these new prisms to check they comply with the prism law.

  ## 0.5.2.1  -- 2019-01-08

  * Upgraded the nix overrides to use the overlay technique.
  * Lowered the bound on tagged to 0.8.5 which allowed it to be removed from the list of overridden packages.

  ## 0.5.2.0  -- 2019-01-03

  * Add `Waargonaut.Prettier` module that contains a traversal to modify a `Json` structure to add indentation and newlines.

  ## 0.5.1.0  -- 2019-01-02

  * Fix order of `either` decoder to match documentation, `Right` decoder was not being attempted first.
  * Expose functionality to check the 'type' of the JSON at the current cursor position.
  * Update list decoder to check that we're at an array before attempting to decode. It will now fail when attempting to decode a list and something of type list is not found. Previously it would return an empty list when a number was present.

  ## 0.5.0.0  -- 2018-12-18

  * Changed internal builder from `ByteString` to `Text` builder.
  * Fixed bug for going from `JString` <-> `Text`, was breaking round-trip.
  * Removed instances of `AsJString` for `Text` and `ByteString`, replaced with more correct `Prism` and some better functions.
  * Added regression tests for round tripping text and bytestring (char8).

  ## 0.4.2.0  -- 2018-11-29

  * Improved pretty printing of CursorHistory by condensing multiple numeric movements and removing the single movements following searching for keys.
  * Add `fromKeyOptional` and `atKeyOptional` that make it easier to handle optional keys on objects.
  * Add `prismDOrFail'` function to allow the user to construct an error from the value that was decoded.

  ## 0.4.1.0  -- 2018-11-20

  * Add `oneOf` decoder and tests

  ## 0.4.0.0  -- 2018-11-19

  * Redesign & rebuild of `Encoder` internals to allow for greater control and flexibility
  * Factor our law tests into their own module (a recheck of these tests is needed)
  * Fixed bug in `list` and `nonempty` decoders
  * Fixed bug in `foldCursor` function
  * Fixed bug in `Cons` instance for `CommaSep`
  * Fixed bug in documentation for `atKey`
  * Added `_MapLikeObj` `Prism`
  * Added some optics into object / maplikeobj keys
  * Fixed bug in `maybeOrNull` decoder to be more strict in what it accepts
  * Rewrote `either` decoder in terms of the alternative instance to allow for better errors

  ## 0.3.0.0  -- 2018-11-14

  * Change to use the `natural` package for `Natural` numbers.

  ## 0.2.1.0  -- 2018-11-13

  * Add `MonadError` and `Alt` instance for `Decoder`
  * Add property tests for the typeclass laws for `Encoder` and `Decoder`
  * Removed need for `MonadError` constraint on `prismDOrFail`

  ## 0.2.0.2  -- 2018-11-12

  * Fix `Applicative` instance for `Decoder`.

  ## 0.2.0.1  -- 2018-11-07

  * Update `moveToKey` to record a successful movement to a key, before continuing

  ## 0.2.0.0  -- 2018-11-06

  * Provide more precise errors from Decoder for missing or invalid keys
  * Removed a parameter from `KeyDecodeFailed` error constructor
  * Fix issue where printing the zipper movements had left and right movement arrows swapped.

  ## 0.1.0.0  -- 2018-11-01

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "![CSIRO's Data61 Logo](https://raw.githubusercontent.com/qfpl/assets/master/data61-transparent-bg.png)\n\n[![Build
  Status](https://travis-ci.org/qfpl/waargonaut.svg?branch=master)](https://travis-ci.org/qfpl/waargonaut)\n\n#
  Waargonaut\n\nFlexible, precise, and efficient JSON decoding/encoding library. This
  package\nprovides a plethora of tools for decoding, encoding, and manipulating JSON
  data.\n\n## Features\n\n* Fully RFC compliant, with property based testing used
  to ensure the desired\n  invariants are preserved.\n\n* Encoders and Decoders are
  values, they are not tied to a typeclass and as such\n  you are not tied to a single
  interpretation of how a particular type\n  \"_should_\" be handled.\n  \n* No information
  is discarded on parsing. Trailing whitespace, and any\n  formatting whitespace (carriage
  returns etc) are all preserved. \n\n* A history keeping zipper is used for Decoding,
  providing precise control of\n  how _you_ decode _your_ JSON data. With informative
  error messages if things\n  don't go according to plan.\n\n* Flexible and expressive
  Decoder & Encoder functions let you parse and build\n  the JSON structures _you_
  require, with no surprises.\n\n* BYO parsing library, the parser built into Waargonaut
  does not tie you to a\n  particular parsing library. With the caveat that your parsing
  library must\n  have an instance of `CharParsing` from the [parsers](https://hackage.haskell.org/package/parsers)
  package.\n\n* Generic functions are provided to make the creation of Encoders and
  Decoders\n  are bit easier. However these _are_ tied to typeclasses, so they do
  come with\n  some assumptions.\n\n* Lenses, Prisms, and Traversals are provided
  to allow you to investigate and\n  manipulate the JSON data structures to your hearts
  content, without breaking\n  the invariants.\n\n* The awesome work on succinct data
  structures by John Ky and [Haskell Works](https://github.com/haskell-works/) \n
  \ is used to power the decoder. Providing the same zipper capabilities and\n  property
  based guarantees, but with all the speed and efficiency capabilities\n  that succinct
  data structures have to offer.\n\n## Example\n\n- Data Structure:\n```haskell\ndata
  Image = Image\n  { _imageWidth    :: Int\n  , _imageHeight   :: Int\n  , _imageTitle
  \   :: Text\n  , _imageAnimated :: Bool\n  , _imageIDs      :: [Int]\n  }\n```\n\n-
  Encoder:\n```haskell\nencodeImage :: Applicative f => Encoder f Image\nencodeImage
  = E.mapLikeObj $ \\img ->\n    E.intAt \"Width\" (_imageWidth img)\n  . E.intAt
  \"Height\" (_imageHeight img)\n  . E.textAt \"Title\" (_imageTitle img)\n  . E.boolAt
  \"Animated\" (_imageAnimated img)\n  . E.listAt E.int \"IDs\" (_imageIDs img)\n```\n\n-
  Decoder:\n```haskell\nimageDecoder :: Monad f => D.Decoder f Image\nimageDecoder
  = D.withCursor $ \\curs -> do\n  -- Move down into the JSON object.\n  io <- D.down
  curs\n  -- We need individual values off of our object,\n  Image\n    <$> D.fromKey
  \"Width\" D.int io\n    <*> D.fromKey \"Height\" D.int io\n    <*> D.fromKey \"Title\"
  D.text io\n    <*> D.fromKey \"Animated\" D.bool io\n    <*> D.fromKey \"IDs\" (D.list
  D.int) io\n```\n\n### Zippers\n\nWaargonaut uses zippers for its decoding which
  allows for precise control in\nhow you interrogate your JSON input. Take JSON structures
  and decode them\nprecisely as you require:\n\n##### Input:\n\n```JSON\n[\"a\",\"fred\",1,2,3,4]\n```\n\n#####
  Data Structure:\n\n```haskell\ndata Foo = Foo (Char,String,[Int])\n```\n\n#####
  Decoder:\n\nThe zipper starts the very root of the JSON input, we tell it to move
  'down'\ninto the first element.\n```haskell\nfooDecoder :: Monad f => Decoder f
  Foo\nfooDecoder = D.withCursor $ \\cursor -> do\n  fstElem <- D.down cursor\n```\nFrom
  the first element we can then decode the focus of the zipper using a\nspecific decoder:\n```haskell\n
  \ aChar <- D.focus D.unboundedChar fstElem\n```\nThe next thing we want to decode
  is the second element of the array, so we\nmove right one step or tooth, and then
  attempt to decode a string at the\nfocus.\n```haskell\n  aString <- D.moveRight1
  fstElem >>= D.focus D.string\n```\nFinally we want to take everything else in the
  list and combine them into a\nsingle list of Int values. Starting from the first
  element, we move right\ntwo positions (over the char and the string elements), then
  we use one of\nthe provided decoder functions that will repeatedly move in a direction
  and\ncombine all of the elements it can until it can no longer move.\n```haskell\n
  \ aIntList <- D.moveRightN 2 fstElem >>= D.rightwardSnoc [] D.int\n```\nLastly,
  we build the Foo using the decoded values.\n```haskell\n  pure $ Foo (aChar, aString,
  aIntList)\n```\n\nThe zipper stores the history of your movements, so any errors
  provide\ninformation about the path they took prior to encountering an error. Making\ndebugging
  precise and straight-forward.\n\n### Property Driven Development\n\nThis library
  is built to parse and produce JSON in accordance with the [RFC\n8259](https://tools.ietf.org/html/rfc8259)
  standard. The data structures,\nparser, and printer are built to satify the [Round
  Trip Property](https://teh.id.au/posts/2017/06/07/round-trip-property/):\n\nWhich
  may be expressed using the following pseudocode:\n\n```\nparse . print = id\n```\nThis
  indicates that any JSON produced by this library will be parsed back in as\nthe
  exact data structure that produced it. This includes whitespace such as\ncarriage
  returns and trailing whitespace. There is no loss of information.\n\nThere is also
  this property, again in pseudocode:\n\n```\nprint . parse . print = print\n```\nThis
  states that the printed form of the JSON will not change will be identical\nafter
  parsing and then re-printing. There is no loss of information.\n\nThis provides
  a solid foundation to build upon.\n\n**NB:** The actual code will of course return
  values that account for the\npossibility of failure. Computers being what they are.\n\n###
  TODO(s)\n\nIn no particular order...\n\n- [ ] improve/bikeshed encoding object api
  \n- [ ] gather feedback on tests/benchmarks that matter\n- [ ] provide testing functions
  so users can be more confident in their Encoder/Decoder construction\n- [x] (feedback
  required) documentation in the various modules to explain any weirdness or things
  that users may consider to be 'missing' or 'wrong'.\n- [x] (mostly) provide greater
  rationale behind lack of reliance in typeclasses for encoding/decoding\n- [ ] provide
  functions to add preset whitespace layouts to encoded json.\n"
description-type: markdown
hash: e133c63a3fd7ea869712676ea2a007b8b591b0f239cea22260ab57733402f032
homepage: https://github.com/haskell-waargonaut/waargonaut
latest: 0.8.0.2
license-name: BSD-3-Clause
maintainer: |-
  Sean Chalmers <oᴉ˙ldɟb@uɐǝs>
  , Emily Pillmore <emilypi@cohomolo.gy>
  , George Wils <george@wils.online>
  , Tony Morris <tonymorris+github@gmail.com>
synopsis: JSON wrangling
test-bench-deps:
  attoparsec: '>=0.13 && <0.15'
  base: '>=4.9 && <5'
  bytestring: '>=0.10.6 && <0.12'
  containers: '>=0.5.6 && <0.7'
  contravariant: '>=1.4 && <1.6'
  digit: '>=0.7 && <1'
  directory: '>=1.1'
  distributive: '>=0.5 && <0.7'
  doctest: '>=0.9.7'
  filepath: '>=1.4 && <1.5'
  generics-sop: '>=0.4 && <0.6'
  hedgehog: '>=0.6 && <1.2'
  hedgehog-fn: '>=0.6 && <2'
  hw-balancedparens: '>=0.2 && <0.5'
  hw-bits: '>=0.7 && <0.8'
  hw-json-standard-cursor: '>=0.2.1.1 && <0.3'
  hw-prim: '>=0.6 && <0.7'
  hw-rankselect: '>=0.13 && <0.14'
  lens: '>=4.15 && <4.20'
  mtl: '>=2.2.2 && <2.3'
  natural: '>=0.3 && <0.4'
  scientific: '>=0.3 && <0.4'
  semigroupoids: '>=5.2.2 && <5.6'
  semigroups: '>=0.8.4 && <0.20'
  tagged: '>=0.8.5 && <0.9'
  tasty: '>=0.11 && <1.4'
  tasty-expected-failure: '>=0.11 && <0.13'
  tasty-golden: '>=2.3 && <2.4'
  tasty-hedgehog: '>=0.2 && <1.2'
  tasty-hunit: '>=0.10 && <0.11'
  template-haskell: '>=2.8'
  text: '>=1.2 && <1.3'
  unordered-containers: '>=0.2.9 && <0.3'
  vector: '>=0.12 && <0.13'
  waargonaut: '>=0'
  zippers: '>=0.2 && <0.4'
