all-versions:
- 0.1.0.0
author: Nick van Gils
basic-deps:
  base: '>=4.7 && <5'
  binary: '>=0.8.8 && <0.9'
  bytestring: '>=0.10.12 && <0.11'
  cereal: '>=0.5.8 && <0.6'
  containers: '>=0.6.4 && <0.7'
  hMPC: '>=0'
  hashable: '>=1.3.5.0 && <1.5'
  hgmp: '>=0.1.2 && <0.2'
  hslogger: '>=1.3.1 && <1.4'
  lens: '>=5.0.1 && <5.3'
  mtl: '>=2.2.2 && <2.3'
  network: '>=3.1.2.7 && <3.2'
  optparse-applicative: '>=0.16.1.0 && <0.19'
  process: '>=1.6.13 && <1.7'
  random: '>=1.2.1 && <1.3'
  split: '>=0.2.3.4 && <0.3'
  stm: '>=2.5.0 && <2.6'
  time: '>=1.9.3 && <1.10'
  vector: '>=0.12.3.1 && <0.14'
changelog: "# Changelog for `hMPC`\r\n\r\nAll notable changes to this project will
  be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand
  this project adheres to the\r\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\r\n\r\n##
  Unreleased\r\n\r\n## 0.1.0.0 - 2024-17-07\r\n\r\nInitial release\r\n"
changelog-type: markdown
description: "<!-- [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/lschoe/mpyc/master)\r\n[![Travis
  CI](https://app.travis-ci.com/lschoe/mpyc.svg)](https://app.travis-ci.com/lschoe/mpyc)\r\n[![codecov](https://codecov.io/gh/lschoe/mpyc/branch/master/graph/badge.svg)](https://codecov.io/gh/lschoe/mpyc)\r\n[![Read
  the Docs](https://readthedocs.org/projects/mpyc/badge/)](https://mpyc.readthedocs.io)\r\n[![PyPI](https://img.shields.io/pypi/v/mpyc.svg)](https://pypi.org/project/mpyc/)
  -->\r\n\r\n# hMPC Multiparty Computation in Haskell\r\n\r\nThis hMPC library, written
  in the functional language Haskell, serves as a counterpart to the original [MPyC](https://github.com/lschoe/mpyc)
  library, written in the imperative language Python and developed by Berry Schoenmakers.\r\n\r\nhMPC
  supports secure *m*-party computation tolerating a dishonest minority of up to *t*
  passively corrupt parties,\r\nwhere *m &ge; 1* and *0 &le; t &lt; m/2*. The underlying
  cryptographic protocols are based on threshold secret sharing over finite\r\nfields
  (using Shamir's threshold scheme and optionally pseudorandom secret sharing).\r\n\r\nThe
  details of the secure computation protocols are mostly transparent due to the use
  of sophisticated operator overloading\r\ncombined with asynchronous evaluation of
  the associated protocols.\r\n\r\n## Documentation\r\n\r\nSee `demos` for Haskell
  programs with lots of example code. See `docs/basics.rst` for a basic secure computation
  example in Haskell.\r\n\r\nThe initial reseach is part of a master's graduation
  project. For further reading, refer to the complementary master's thesis: [Multiparty
  Computation in Haskell: From MPyC to hMPC](https://research.tue.nl/en/studentTheses/multiparty-computation-in-haskell).\r\n\r\n\r\nOriginal
  Python MPyC documentation:\r\n\r\n[Read the Docs](https://mpyc.readthedocs.io/)
  for `Sphinx`-based documentation, including an overview of the `demos`.\r\n\r\nThe
  [MPyC homepage](https://www.win.tue.nl/~berry/mpyc/) has some more info and background.\r\n<!--
  [GitHub Pages](https://lschoe.github.io/mpyc/) for `pydoc`-based documentation.
  -->\r\n\r\n\r\n\r\n<!-- ## Installation -->\r\n\r\n<!-- Pure Python, no dependencies.
  Python 3.9+ (following [NumPy's deprecation policy](https://numpy.org/neps/nep-0029-deprecation_policy.html#support-table)).\r\n\r\nRun
  `pip install .` in the root directory (containing file `setup.py`).\\\r\nOr, run
  `pip install -e .`, if you want to edit the MPyC source files.\r\n\r\nUse `pip install
  numpy` to enable support for secure NumPy arrays in MPyC, along with vectorized
  implementations.\r\n\r\nUse `pip install gmpy2` to run MPyC with the package [gmpy2](https://pypi.org/project/gmpy2/)
  for considerably better performance.\r\n\r\nUse `pip install uvloop` (or `pip install
  winloop` on Windows) to replace Python's default asyncio event loop in MPyC for
  generally improved performance. -->\r\n\r\n<!-- ### Some Tips -->\r\n\r\n<!-- -
  Try `run-all.sh` or `run-all.bat` in the `demos` directory to have a quick look
  at all pure Python demos.\r\nDemos `bnnmnist.py` and `cnnmnist.py` require [NumPy](https://www.numpy.org/),
  demo `kmsurvival.py` requires\r\n[pandas](https://pandas.pydata.org/), [Matplotlib](https://matplotlib.org/),
  and [lifelines](https://pypi.org/project/lifelines/),\r\nand demo `ridgeregression.py`
  (and therefore demo `multilateration.py`) even require [Scikit-learn](https://scikit-learn.org/).\\\r\nTry
  `np-run-all.sh` or `np-run-all.bat` in the `demos` directory to run all Python demos
  employing MPyC's secure arrays.\r\nMajor speedups are achieved due to the reduced
  overhead of secure arrays and vectorized processing throughout the\r\nprotocols.
  -->\r\n\r\n<!-- - To use the [Jupyter](https://jupyter.org/) notebooks `demos\\*.ipynb`,
  you need to have Jupyter installed,\r\ne.g., using `pip install jupyter`. An interesting
  feature of Jupyter is the support of top-level `await`.\r\nFor example, instead
  of `mpc.run(mpc.start())` you can simply use `await mpc.start()` anywhere in\r\na
  notebook cell, even outside a coroutine.\\\r\nFor Python, you also get top-level
  `await` by running `python -m asyncio` to launch a natively async REPL.\r\nBy running
  `python -m mpyc` instead you even get this REPL with the MPyC runtime preloaded!
  -->\r\n\r\n<!-- - Directory `demos\\.config` contains configuration info used to
  run MPyC with multiple parties.\r\nThe file `gen.bat` shows how to generate fresh
  key material for SSL. To generate SSL key material of your own, first run\r\n`pip
  install cryptography` (alternatively, run `pip install pyOpenSSL`). -->\r\n\r\nCopyright
  &copy; 2024 Nick van Gils"
description-type: markdown
hash: c913b00f95987586d2641bea4dd1618ca57ae448d83efd8ca4c4178076f2ce2e
homepage: ''
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: nick.vangils@hotmail.com
synopsis: Multiparty Computation in Haskell
test-bench-deps:
  HUnit: '>=1.6.2.0'
  base: '>=4.7 && <5'
  binary: '>=0.8.8 && <0.9'
  bytestring: '>=0.10.12 && <0.11'
  cereal: '>=0.5.8 && <0.6'
  containers: '>=0.6.4 && <0.7'
  hMPC: '>=0'
  hashable: '>=1.3.5.0 && <1.5'
  hgmp: '>=0.1.2 && <0.2'
  hslogger: '>=1.3.1 && <1.4'
  lens: '>=5.0.1 && <5.3'
  mtl: '>=2.2.2 && <2.3'
  network: '>=3.1.2.7 && <3.2'
  optparse-applicative: '>=0.16.1.0 && <0.19'
  process: '>=1.6.13 && <1.7'
  random: '>=1.2.1 && <1.3'
  split: '>=0.2.3.4 && <0.3'
  stm: '>=2.5.0 && <2.6'
  time: '>=1.9.3 && <1.10'
  vector: '>=0.12.3.1 && <0.14'
