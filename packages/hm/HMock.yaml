homepage: https://github.com/cdsmith/HMock
changelog-type: markdown
hash: 41cc1b00b1faad43fd18d95c5e836faa7d2a4f6eba8f3b8888c1f8ddccf16dfa
test-bench-deps:
  exceptions: -any
  unliftio: -any
  extra: -any
  base: -any
  hspec: -any
  syb: -any
  doctest-exitcode-stdio: -any
  data-default: -any
  containers: -any
  doctest-lib: -any
  HMock: -any
  mtl: -any
  deepseq: -any
  QuickCheck: -any
  template-haskell: -any
  directory: -any
maintainer: Chris Smith <cdsmith@gmail.com>
synopsis: A flexible mock framework for testing effectful code.
changelog: |
  # Revision history for hmock

  ## 0.4.0.0 -- 2021-08-22

  * Dramatically simplified the Template Haskell API.
    * `makeMockable` now expects a Type instead of a Name.  Use `[t|MyClass|]`.
    * Most other variants of `makeMockable` have been removed.  Use
      `makeMockableWithOptions` instead.
    * `makeMockable` will now detect when instances already exist and won't
      redefine them.
    * `makeMockable [t|MyClass ConcreteType|]` now defines `Mockable` and
      `MockableBase` for any `MyClass` type.  Only `MockT` instances use the
      concrete type.  In some cases, you may need to add type annotations to your
      expectations.
  * `MockSetup` can now add expectations.
  * Added a lot more configuration for severity of faults:
    * `setAmbiguityCheck` can now set to ignore, warning, or error.
    * Added `setUninterestingActionCheck` for actions with no expectations.
    * Added `setUnexpectedActionCheck` for actions that don't match expectations.
    * Added `setUnmetExpectationCheck` for expectations that aren't met.
  * Predicates have undergone major updates.
    * Predicates now show more detailed messages when they fail.
    * New `keys` and `values` predicates accept any child predicate.
    * Removed `containsKey`, `containsEntry`, `keysAre`, and `entriesAre`
      * Instead of `containsEntry` or `entriesAre`, use `contains` or
        `unorderedElemsAre` with `zipP`.
    * New predicates: `positive`, `negative`, `nonPositive`, `nonNegative`.

  ## 0.3.0.0 -- 2021-06-30

  * Methods with polymorphic return types can now be mocked if the return type has
    a `Typeable` constraint.
  * Added `whenever` to associate a side effect to a method.
  * Added `WholeMethodMatcher` to match entire method args at once.
  * `allowUnexpected` no longer changes the default for expected calls.

  ## 0.2.0.0 -- 2021-06-24

  * Added ambiguity checking.
    * This is an optional feature, which is off by default.
    * To make it easier to avoid ambiguity, there is now an `allowUnexpected` that
    * causes unexpected calls to be ignored and optionally provide a response, but
      doesn't conflict with expectations that override it.  Ambiuguous uses of
      `expectAny` can often be replaced with `allowUnexpected`.
  * Restricted mockable setup to defaults to avoid race conditions.
    * Setup handlers now run in the `MockSetup` monad.
    * Adding expectations from setup is no longer allowed.  However, you can use
      `allowUnexpected` to allow unexpected calls.
  * Added `nestMockT` and `withNestedMockT` to the API.
  * Exported smaller modules to make selective imports easier.

  ## 0.1.0.1 -- 2021-06-20

  * Fixed a bad dependency that broke some GHC versions.

  ## 0.1.0.0 -- 2021-06-20

  * First version. Released on an unsuspecting world.
basic-deps:
  exceptions: '>=0.10.4 && <0.11'
  unliftio: '>=0.2.18 && <0.3'
  extra: '>=1.7.9 && <1.8'
  stm: '>=2.5.0 && <2.6'
  base: '>=4.11.0 && <4.16'
  syb: '>=0.7.2 && <0.8'
  monad-control: '>=1.0.2 && <1.1'
  constraints: '>=0.13 && <0.14'
  data-default: '>=0.7.1 && <0.8'
  array: '>=0.5.2 && <0.6'
  containers: '>=0.6.2 && <0.7'
  regex-tdfa: '>=1.3.1 && <1.4'
  mtl: '>=2.2.2 && <2.3'
  transformers-base: '>=0.4.5 && <0.5'
  template-haskell: '>=2.13.0 && <2.18'
  mono-traversable: '>=1.0.15 && <1.1'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
author: Chris Smith <cdsmith@gmail.com>
latest: 0.4.0.0
description-type: haddock
description: |-
  HMock is a flexible mock framework for testing effectful
  code in Haskell.  Tests can set up expectations about
  actions that can or should be performed and their results,
  and then verify those expectations when the test is
  complete.

  For more information, see the module documentation for
  "Test.HMock".
license-name: BSD-3-Clause
