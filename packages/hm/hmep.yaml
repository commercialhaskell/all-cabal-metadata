all-versions:
- 0.0.0
- 0.0.1
- 0.1.0
- 0.1.1
author: Bogdan Penkovsky
basic-deps:
  base: '>=4.7 && <5'
  hmep: '>=0'
  mwc-random: '>=0'
  primitive: '>=0'
  probable: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for [`hmep` package](http://hackage.haskell.org/package/hmep)

  ## 0.1.1 *October 13th 2017*
    * Improve code generation
    * Add `regressionLoss1` for 1D functions to the library
    * Add helpers `best`, `worst` working on Generation
    * Improve examples and documentation

  ## 0.1.0 *October 8th 2017*
    * Breaking changes:
      drop [monad-mersenne-random](http://hackage.haskell.org/package/monad-mersenne-random)
      which doesn't build with newer version of GHC. Instead, depend on the
      [probable](http://hackage.haskell.org/package/probable) package.

  ## 0.0.1 *October 7th 2017*
    * Improved demo: trigonometric identities solving example
    * Add `avgLoss` to the library
    * Fixes:
      * Change the crossover probability using Config.p'crossover parameter

  ## 0.0.0 *October 6th 2017*
    * Initial release
changelog-type: markdown
description: "# Multi Expression Programming\n\n[![Build Status](https://travis-ci.org/masterdezign/hmep.svg?branch=master)](https://travis-ci.org/masterdezign/hmep)\n\nYou
  say, not enough Haskell machine learning libraries?\n\nHere is yet another one!\n\n\n##
  History\n\nThere exist many other Genetic Algorithm (GA) Haskell packages.\nPersonally
  I have used\n[simple genetic algorithm](http://hackage.haskell.org/package/simple-genetic-algorithm-mr),\n[GA](http://hackage.haskell.org/package/GA),\nand
  [moo](http://hackage.haskell.org/package/moo) for quite a long time.\nThe last package
  was the most preferred, but the other two are\nalso great.\n\nHowever, when I came
  up with this\n[MEP paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.5.4352&rep=rep1&type=pdf),\nto
  my surprise there was no MEP implementation in Haskell.\nSoon I realized that existing
  GA packages are limited,\nand it would be more efficient to implement MEP from scratch.\n\nThat
  is how this package was started. I also wish to say thank you\nto the authors of
  the [moo](http://hackage.haskell.org/package/moo)\nGA library, which inspired the
  present\n[hmep](http://github.com/masterdezign/hmep) package.\n\n\n## About MEP\n\nMulti
  Expression Programming is a genetic programming variant encoding multiple\nsolutions
  in the same chromosome. A chromosome is a computer program.\nEach gene is featuring
  [code reuse](https://en.wikipedia.org/wiki/Code_reuse).\n\nHow **MEP is different**
  from other genetic programming (GP) methods?\nConsider a classical example of tree-based
  GP.\nThe number of nodes to encode `x^N`\nusing a binary tree is `2N-1`.\nWith MEP
  encoding, however, redundancies can be dramatically\ndiminished so that the\n[shortest
  chromosome](https://github.com/masterdezign/hmep/blob/cd7b4976800d6c23ce5ebbe67f5ab5c9076229b9/test/Spec.hs#L18)
  \nthat encodes the same expression has only `N/2` nodes!\nThat often results in
  significantly reduced computational costs\nwhen evaluating MEP chromosomes. Moreover,
  **all** the intermediate\nsolutions such as `x^(N/2)`, `x^(N/4)`, etc. are provided
  by the\nchromosome as well.\n\nFor more details, please check http://mepx.org/papers.html
  and\nhttps://en.wikipedia.org/wiki/Multi_expression_programming.\n\n### MEP in open
  source\n\n  * By [Mihai Oltean](http://github.com/mepx), C++\n  * By [Mark Chenoweth](https://github.com/markcheno/go-mep),
  Go\n  * [Current project](https://github.com/masterdezign/hmep), Haskell\n\n###
  The `hmep` Features\n\n  * **Works out of the box**. You may use one of the elaborated\n
  \   [examples](https://github.com/masterdezign/hmep/blob/master/app/)\n    to quickly
  tailor to your needs.\n  * **Flexibility**. The [`hmep` package](https://github.com/masterdezign/hmep/)\n
  \   provides adjustable and composable building blocks such as\n    [selection](https://hackage.haskell.org/package/hmep-0.1.0/docs/src/AI-MEP-Operators.html#binaryTournament),\n
  \   [mutation](https://hackage.haskell.org/package/hmep-0.1.0/docs/src/AI-MEP-Operators.html#smoothMutation)\n
  \   and [crossover](https://hackage.haskell.org/package/hmep-0.1.0/docs/src/AI-MEP-Operators.html#crossover)\n
  \   [operators](https://hackage.haskell.org/package/hmep-0.1.0/docs/AI-MEP.html).\n
  \   One is also free to use their own operators.\n  * **Versatility**. `hmep` can
  be applied to solve regression problems with \n    one or multiple outputs. It means,
  you can approximate unknown functions\n    or solve classification tasks. The only
  requirement is a custom\n    [loss function](https://github.com/masterdezign/hmep/blob/b006eb8e0ca7c0540de979631423753bf0b66750/app/Main.hs#L67).\n\n\n##
  How to build\n\nUse [Stack](http://haskellstack.org).\n\n     $ git clone https://github.com/masterdezign/hmep.git
  && cd hmep\n     $ stack build --install-ghc\n\n### Example 1\n\nNow that the package
  is built, run the first demo to\nexpress `cos^2(x)` through `sin(x)`:\n\n     $
  stack exec hmep-demo\n\n     Average loss in the initial population 15.268705681244962\n
  \    Population 10: average loss 14.709728527360586\n     Population 20: average
  loss 13.497114190675477\n     Population 30: average loss 8.953185872653737\n     Population
  40: average loss 8.953185872653737\n     Population 50: average loss 3.3219954564955856e-15\n\n
  \    Interpreted expression:\n     v1 = sin x0\n     v2 = v1 * v1\n     result =
  1 - v2\n\nEffectively, the solution `cos^2(x) = 1 - sin^2(x)` was found.\nOf course,
  MEP is a stochastic method, meaning that there is\nno guarantee to find the globally
  optimal solution.\n\nThe unknown function approximation problem can be illustrated\nby
  the following suboptimal solution for a given set of random\ndata points (blue crosses).
  This example was produced by another run of\nthe [same demo](app/Main.hs), after
  100 generations of 100 chromosomes.\nThe following expression was obtained\n`y(x)
  = 3*0.31248786462471034 - sin(sin^2(x))`.\nInterestingly, the approximating function
  lies symmetrically\nin-between the extrema of the unknown function, approximately
  \ndescribed by the blue crosses.\n\n![Figure](https://github.com/masterdezign/hmep/blob/bbc2bdbac4fa3269c506455a473dddfa0e95231c/doc/Figures/cos2_approx.png)\n\n###
  Example 2\n\nA similar example is to approximate `sin(x)` using only\naddition and
  multiplication operators, i.e. with polynomials.\n\n     $ stack exec hmep-sin-approximation\n\nThe
  algorithm is able to automatically figure out the\npowers of `x`. That is where
  MEP really shines. We [calculate](app/MainSin.hs)\n30 expressions represented by
  each chromosome with practically no\nadditional computational penalty. Then, we\nchoose
  the best expression. In this run, we have automatically obtained a\n[seventh degree
  polynomial](https://github.com/masterdezign/hmep/blob/master/doc/sin_approx.py#L12)\ncoded
  by 14 genes. Pretty cool, yeah?\n\nThe result of approximation is [visualized](doc/sin_approx.py)
  below:\n\n![Figure](https://github.com/masterdezign/hmep/blob/d173e96acf72e482474e657880f8bd28c40694e7/doc/Figures/sin_approx.png)\n\n\n##
  Authors\n\nThis library is written and maintained by [Bogdan Penkovsky](http://penkovsky.com)\n"
description-type: markdown
hash: 51fa59c45114a183b37a43fc91106f72611f5ec8d0dac3a1ab31c937ea940f2d
homepage: https://github.com/masterdezign/hmep#readme
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: dev at penkovsky dot com
synopsis: |-
  HMEP Multi Expression Programming â€“
  a genetic programming variant
test-bench-deps:
  HUnit: '>=0'
  base: '>=0'
  hmep: '>=0'
  vector: '>=0'
