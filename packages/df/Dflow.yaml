all-versions:
- 0.0.1
author: Paul Johnson
basic-deps:
  QuickCheck: '>=2.4'
  base: '>=4 && <5'
  containers: '>=0.4'
  stm: '>=0'
  time: '>=1.1'
changelog: ''
changelog-type: ''
description: "Dflow\n=====\n\nReal time event processing using data flow declarations.\n\nThe
  following has been tested using ghc 7.0.4 under Fedora 15 64-bit.\n\nInstallation\n------------\n\n$
  cabal configure\n$ cabal build\n$ cabal install\n\n\nTests\n-----\n\n$ cabal configure
  --enable-test\n$ cabal build\n$ cabal test\n\nThe tests work by building random
  networks of event processors and\nchecking them against an equivalent list implementation.
  \ Occasionally\nthey seem to hit a pathological case that chews up memory and CPU\ntime.
  \ If memory usage goes over 1GB then kill the test and try again.\n\nTest Coverage\n-------------\n\nEdit
  the Dflow.cabal file and add \"-fhpc\" to the GHC options for the\ntest (see comment
  in the file).  Then do \"cabal clean\" and follow the\ninstructions for \"Tests\"
  above. Then do:\n\n$ hpc markup ArbTest.tix --destdir=coverage\n\nThe coverage report
  is in coverage/hpc_index.html.\n\nConcepts\n--------\n\nThe main data types for
  the application programmer are:\n\nEvent: A value that occurs at a certain time.
  \ For instance an \n\"Event Char\" might represent a key press.\n\nRTSP: The Real
  Time Stream Processor.  A value of type \"RTSP x y\"\ntakes in events of type \"x\"
  and emits events of type \"y\".  RTSPs can\nbe strung together into pipelines using
  \".\" (or \">>>\" if you prefer\nyour data to flow left-to-right). RTSPs are also
  Monoids, so you can\nfork your data through two parallel RTSPs and then merge the
  results.\n\nRTA: A monad for building stateful RTSPs.  Convert an RTA into an\nRTSP
  using \"execRTA\" or \"accumulateRTA\" depending what you want to\ndo with pending
  output events when a new input event arrives.\n\n\nYou can test an RTSP in \"fast
  time\" (that is, without waiting for\nreal-time delays) by using \"simulateRTSP\".
  However the argument list\nof input events must be finite. Then you can execute
  the RTSP in real\ntime using \"execRTSP\" and be confident that the real time behaviour\nwill
  match the fast-time behaviour.\n\nTo Do\n-----\n\nEvents are currently sorted into
  time order using (in effect) an\nO(n) insertion sort. Event streams should use something
  more\nsophisticated internally, such as a heap.\n\nWhat API, if any, should be exposed
  for event streams? On one hand \ndevelopers should be able to create new kinds of
  RTSP primitives\nusing event streams, but on the other hand anything you can do
  with \nevent streams can be done using RTA anyway.\n\nFigure out some way for RTAs
  and RTSPs to execute non-blocking IO with\ntimeouts, probably using continuations
  in some way. Hence develop true\ndistribution by having RTSPs on different machines
  interact in a\ndeclarative manner.\n\nMake state persistent, together with a replay
  mechanism for lost\nevents."
description-type: text
hash: 5493b1a6b63572fb0f8df76dc0e1e5b0445bcf880157d4b366253494fa6c3cc3
homepage: ''
latest: 0.0.1
license-name: BSD-3-Clause
maintainer: <paul@cogito.org.uk>
synopsis: Processing Real-time event streams
test-bench-deps:
  HUnit: '>=1.2 && <2'
  QuickCheck: '>=2.4'
  base: '>=4'
  test-framework: '>=0.4.1'
  test-framework-quickcheck2: '>=0'
