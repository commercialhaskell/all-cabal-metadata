all-versions:
- 0.0.0
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
author: Enzo Haussecker <enzo@dfinity.org>, Remy Goldschmidt <remy@dfinity.org>, Armando
  Ramirez <armando@dfinity.org>
basic-deps:
  BoundedChan: '>=0'
  base: '>=4.10 && <5'
  base16-bytestring: '>=0'
  bytestring: '>=0'
  concurrent-extra: '>=0'
  conduit: '>=0'
  containers: '>=0'
  cryptonite: '>=0'
  data-default-class: '>=0'
  deepseq: '>=0'
  dfinity-radix-tree: '>=0'
  directory: '>=0'
  dlist: '>=0'
  hashtables: '>=0'
  lens-simple: '>=0'
  leveldb-haskell: '>=0'
  lrucaching: '>=0'
  memory: '>=0'
  mtl: '>=0'
  reducers: '>=0'
  resourcet: '>=0'
  serialise: '>=0'
  temporary: '>=0'
  transformers: '>=0'
changelog: "0.6.2 Enzo Haussecker <enzo@dfinity.org> Thu Mar 14 2019\n  \n * Revise
  package metadata.\n\n0.6.2 Enzo Haussecker <enzo@dfinity.org> Thu Mar 14 2019\n\n
  * Add Travis build script.\n\n0.6.1 Enzo Haussecker <enzo@dfinity.org> Wed Mar 13
  2019\n\n * Remove unnecessary file metadata.\n\n0.6.0 Enzo Haussecker <enzo@dfinity.org>
  Wed Mar 13 2019\n\n * Update license agreement.\n * Remove bloom filter dependency.\n
  * Implement radix subtree construction.\n * Improve debug output.\n\n0.5.2 Enzo
  Haussecker <enzo@dfinity.org> Fri Oct 19 2018\n\n * Fix bug related to search strategy.\n\n0.5.1
  Enzo Haussecker <enzo@dfinity.org> Fri Oct 19 2018\n\n * Expose lens-based interface
  to radix tree data structures.\n\n0.5.0 Enzo Haussecker <enzo@dfinity.org> Fri Oct
  19 2018\n\n * Implement Merkle proofs.\n * Reduce memory footprint of parallel download
  combinators.\n\n0.4.0 Enzo Haussecker <enzo@dfinity.org> Tue Sep 25 2018\n\n * Change
  hash function from SHA-256 to BLAKE-256.\n * Clean-up documentation.\n\n0.3.1 Enzo
  Haussecker <enzo@dfinity.org> Mon Aug 06 2018\n\n *  Relax monadic constraint on
  radix database instance.\n\n0.3.0 Enzo Haussecker <enzo@dfinity.org> Thu Aug 02
  2018\n\n * Add thread safety to parallel download combinators.\n * Separate impure
  code from base module.\n * Remove deprecated functions.\n\n0.2.1 Enzo Haussecker
  <enzo@dfinity.org> Wed Jul 25 2018\n\n * Fix bug related to temporary reference
  creation.\n\n0.2.0 Enzo Haussecker <enzo@dfinity.org> Sat Jul 21 2018\n\n * Remove
  configuration parameter from type class.\n\n0.1.1 Enzo Haussecker <enzo@dfinity.org>
  Thu Jul 12 2018\n\n * Create aliases for verbose functions.\n * Implement debug
  utilities.\n * Clean-up documentation.\n\n0.1.0 Enzo Haussecker <enzo@dfinity.org>
  Tue Jul 03 2018\n\n * Abstract database to type class.\n * Implement radix tree
  construction via conduit.\n * Clean-up documentation.\n"
changelog-type: markdown
description: |
  # dfinity-radix-tree: A generic data integrity layer.

  [![DFINITY][dfinity-shield]][dfinity]
  [![Hackage][hackage-shield]][hackage]
  [![Dependencies][deps-shield]][deps]
  [![License: BSD 3-Clause][license-shield]][license]

  ## Overview

  This library allows you to construct a [Merkle tree][wiki-merkle-tree] on top of
  any underlying key-value database. It works by organizing your key-value pairs
  into a binary [radix tree][wiki-radix-tree], which is well suited for storing
  large dictionaries of fairly random keys, and is optimized for storing keys of
  the same length.

  ## Usage

  Define your database as an instance of the [`RadixDatabase`][] type class. An
  instance for [LevelDB][hackage-leveldb-haskell] is already provided.

  ```haskell
  {-# LANGUAGE FlexibleInstances #-}
  {-# LANGUAGE MultiParamTypeClasses #-}

  import Control.Monad.IO.Class (MonadIO)
  import Database.LevelDB (DB, defaultReadOptions, defaultWriteOptions, get, put)

  import DFINITY.RadixTree

  instance MonadIO m => RadixDatabase m DB where
    load database = get database defaultReadOptions
    store database = put database defaultWriteOptions
  ```

  Create a [`RadixTree`][] that is parameterized by your database. If you want to
  make things more explicit, then you can define a simple type alias and wrapper
  function.

  ```haskell
  import Control.Monad.Trans.Resource (MonadResource)
  import Database.LevelDB (DB, Options(..), defaultOptions, open)

  import DFINITY.RadixTree

  type RadixTree' = RadixTree DB

  createRadixTree'
    :: MonadResource m
    => FilePath -- Database.
    -> Maybe RadixRoot -- State root.
    -> m RadixTree'
  createRadixTree' file root = do
    handle <- open file options
    createRadixTree cacheSize root handle
    where
    cacheSize = 2048
    options   = defaultOptions { createIfMissing = True }
  ```

  Using the definitions above, you can create a radix tree, perform some basic
  operations on it, and see that its contents is uniquely defined by its
  [`RadixRoot`][].

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import Control.Monad.IO.Class (liftIO)
  import Control.Monad.Trans.Resource (runResourceT)
  import Data.ByteString.Base16 (encode)
  import Data.ByteString.Char8 (unpack)
  import Data.ByteString.Short (fromShort)

  import DFINITY.RadixTree

  main :: IO ()
  main = runResourceT $ do

    -- Create a radix tree, insert a key-value pair, and Merkleize.
    tree  <- createRadixTree' "/path/to/database" Nothing
    tree' <- insertRadixTree "Hello" "World" tree
    root  <- fst <$> merkleizeRadixTree tree'

    -- Print the state root.
    liftIO $ putStrLn $ "State Root: 0x" ++ pretty root
    where pretty = unpack . encode . fromShort
  ```

  Running the program above should produce the following result.

  ```
  State Root: 0xb638755216858bc84de8b80f480f15ca5c733e95
  ```

  ## License

  `dfinity-radix-tree` is licensed under the [BSD 3-Clause License][license].

  [//]: # (----------------------------------------------------------------------)

  [dfinity]:
    https://dfinity.org
  [dfinity-shield]:
    https://img.shields.io/badge/made%20by-DFINITY-29abe2.svg
  [hackage]:
    https://hackage.haskell.org/package/dfinity-radix-tree
  [hackage-shield]:
    https://img.shields.io/hackage/v/dfinity-radix-tree.svg
  [deps]:
    https://packdeps.haskellers.com/feed?needle=dfinity-radix-tree
  [deps-shield]:
    https://img.shields.io/hackage-deps/v/dfinity-radix-tree.svg
  [license]:
    https://en.wikipedia.org/wiki/BSD_licenses
  [license-shield]:
    https://img.shields.io/badge/license-BSD%203--Clause-29abe2.svg
  [wiki-radix-tree]:
    https://en.wikipedia.org/wiki/Radix_tree
  [wiki-merkle-tree]:
    https://en.wikipedia.org/wiki/Merkle_tree
  [hackage-leveldb-haskell]:
    https://hackage.haskell.org/package/leveldb-haskell
  [`RadixDatabase`]:
    https://hackage.haskell.org/package/dfinity-radix-tree/docs/DFINITY-RadixTree.html#t:RadixDatabase
  [`RadixTree`]:
    https://hackage.haskell.org/package/dfinity-radix-tree/docs/DFINITY-RadixTree.html#t:RadixTree
  [`RadixRoot`]:
    https://hackage.haskell.org/package/dfinity-radix-tree/docs/DFINITY-RadixTree.html#t:RadixRoot

  [//]: # (----------------------------------------------------------------------)
description-type: markdown
hash: db1594fad90b0638580c88f01e3d8c98a329d3243e8c1b3b505e256713aac706
homepage: https://dfinity.org
latest: 0.6.3
license-name: BSD-3-Clause
maintainer: Enzo Haussecker <enzo@dfinity.org>, Remy Goldschmidt <remy@dfinity.org>,
  Armando Ramirez <armando@dfinity.org>
synopsis: A generic data integrity layer.
test-bench-deps:
  BoundedChan: '>=0'
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=4.10 && <5'
  base16-bytestring: '>=0'
  bytestring: '>=0'
  clock: '>=0'
  concurrent-extra: '>=0'
  conduit: '>=0'
  containers: '>=0'
  cryptonite: '>=0'
  dfinity-radix-tree: '>=0'
  filepath: '>=0'
  leveldb-haskell: '>=0'
  memory: '>=0'
  mtl: '>=0'
  resourcet: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
