all-versions:
- 0.1.0.0
author: Lukwago Allan <epicallan.al@gmail>
basic-deps:
  base: '>=4.10.1 && <5'
  bytestring: '>=0.10.8 && <0.11'
  conduit: '>=1.3.1 && <1.4'
  exceptions: '>=0.10.0 && <0.11'
  hreq-client: '>=0.1.0'
  hreq-core: '>=0.1.0'
  http-client: '>=0.6.4 && <0.7'
  http-types: '>=0.12.3 && <0.13'
  mtl: '>=2.2.2 && <3.0'
  retry: '>=0.8 && <0.9'
  unliftio-core: '>=0.1.2 && <0.2.0'
changelog: |
  ## Hreq-Conduit 0.1.0.0

  * Initial public release
changelog-type: markdown
description: |
  # Hreq

  [![Hackage](https://img.shields.io/hackage/v/hreq-conduit.svg?logo=haskell)](https://hackage.haskell.org/package/hreq)
  [![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)
  [![Build status](https://img.shields.io/travis/epicallan/hreq.svg?logo=travis)](https://travis-ci.org/epicallan/hreq)

  Implementation of Hreq client as an HTTP Conduit streaming client basing on hreq-core.
  More streaming backends can be added in the future depending on community interest.

  Please look at the repository [README.md](https://github.com/epicallan/hreq/blob/master/README.md) file for more information.

  ## Streaming Example

  ```haskell
  {-# LANGUAGE DataKinds         #-}
  {-# LANGUAGE FlexibleContexts  #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE RankNTypes        #-}
  {-# LANGUAGE TypeApplications  #-}
  {-# LANGUAGE TypeOperators     #-}

  import Conduit
  import Data.Functor (void)
  import qualified Data.Text as T

  import Hreq.Conduit

  main' :: IO ()
  main' = void $ do
    runHttpBin streamResponse
    streamFile "README.md"

  runHttpBin :: Hreq IO a -> IO a
  runHttpBin action = runHreq baseUrl action
    where
      baseUrl = HttpsDomain "httpbin.org"

  -- | Stream data from an endpoint and write it into a temporary file
  streamResponse :: RunConduitClient m => m ()
  streamResponse =
    hreqWithConduit
     @("stream-bytes" :> Capture Int :> StreamGet)
      (size :. Empty)
      $ \ src -> void $ runConduitRes $ src .| sinkSystemTempFile "hreq.json"
    where
      size = 3 * 1024 * 1024 -- amount of data to stream in MBs

  -- | stream data from a file and send it as a Request body stream over the network.
  streamFile :: String -> IO Response
  streamFile fp =
    withSourceFile fp $
       \srcFile -> do
          let src :: ReqBodySource
              src = ReqBodySource
                    $ srcFile
                    .| decodeUtf8C
                    .| mapC T.toUpper
                    .| encodeUtf8C

          runHttpBin $ streamReq src
    where
      streamReq :: RunClient m => ReqBodySource -> m Response
      streamReq src = hreq @("post" :> ConduitReqBody :> RawResponse POST) (src :. Empty)
  ```

  ### Documentation

  This README is tested by `markdown-unlit` to make sure the code builds. To keep _that_ happy, we do need a `main` in this file, so ignore the following :)

  ```haskell
  main :: IO ()
  main = pure ()
  ```
description-type: markdown
hash: 7331b9ab040e90f0703abcb35add7e8bdfeb5d72e49a6a3489fccc2d3ec7d8ff
homepage: https://github.com/epicallan/hreq/blob/master/hreq-conduit/README.md
latest: 0.1.0.0
license-name: MIT
maintainer: Lukwago Allan <epicallan.al@gmail>
synopsis: Conduit streaming support for Hreq.
test-bench-deps:
  aeson: '>=1.4.5 && <1.5'
  base: '>=4.10.1 && <5'
  bytestring: '>=0.10.8 && <0.11'
  conduit: '>=1.3.1 && <1.4'
  doctest: '>=0.15 && <0.17'
  hreq-conduit: '>=0'
  hspec: '>=2.6.0 && <2.8'
  http-types: '>=0.12.3 && <0.13'
  string-conversions: '>=0.4.0 && <0.5'
  text: '>=1.2.4 && <1.3'
