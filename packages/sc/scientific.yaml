homepage: https://github.com/basvandijk/scientific
changelog-type: text
hash: 26d8109106963a345368011081453d25ee1dfa6afae2b1f57b426b4bcd392d91
test-bench-deps:
  bytestring: -any
  tasty-smallcheck: '>=0.2'
  base: -any
  text: -any
  criterion: '>=0.5'
  smallcheck: '>=1.0'
  binary: -any
  tasty-quickcheck: '>=0.8'
  tasty-hunit: '>=0.8'
  tasty: '>=1.4.0.1'
  scientific: -any
  QuickCheck: '>=2.14.2'
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
synopsis: Numbers represented using scientific notation
changelog: "0.3.7.0\n\n\t* Make division (/) on Scientifics slightly more efficient.\n\n\t*
  Fix the Show instance to surround negative numbers with parentheses when\n\tnecessary.\n\n\t*
  Add (Template Haskell) Lift Scientific instance\n\n\t* Mark modules as Safe or Trustworthy
  (Safe Haskell).\n\n0.3.6.2\n\t* Due to a regression introduced in 0.3.4.14 the RealFrac
  methods\n\tand floatingOrInteger became vulnerable to a space blowup when\n\tapplied
  to scientifics with huge exponents. This has now been\n\tfixed again.\n\n0.3.6.1\n\t*
  Fix build on GHC < 8.\n\n0.3.6.0\n\t* Make the methods of the Hashable, Eq and Ord
  instances safe to\n\tuse when applied to scientific numbers coming from untrusted\n\tsources.
  Previously these methods first converted their arguments\n\tto Rational before applying
  the operation. This is unsafe because\n\tconverting a Scientific to a Rational could
  fill up all space and\n\tcrash your program when the Scientific has a huge base10Exponent.\n\n\tDo
  note that the hash computation of the Hashable Scientific\n\tinstance has been changed
  because of this improvement!\n\n\tThanks to Tom Sydney Kerckhove (@NorfairKing)
  for pushing me to\n\tfix this.\n\n\t* fromRational :: Rational -> Scientific now
  throws an error\n\tinstead of diverging when applied to a repeating decimal. This\n\tdoes
  mean it will consume space linear in the number of digits of\n\tthe resulting scientific.
  This makes \"fromRational\" and the other\n\tFractional methods \"recip\" and \"/\"
  a bit safer to use.\n\n\t* To get the old unsafe but more efficient behaviour the
  following\n\tfunction was added: unsafeFromRational :: Rational -> Scientific.\n\n\t*
  Add alternatives for fromRationalRepetend:\n\n\t  fromRationalRepetendLimited\n\t
  \     :: Int -- ^ limit\n\t      -> Rational\n\t      -> Either (Scientific, Rational)\n\t\t
  \       (Scientific, Maybe Int)\n\n\t  and:\n\n\t  fromRationalRepetendUnlimited\n\t
  \     :: Rational -> (Scientific, Maybe Int)\n\n\t  Thanks to Ian Jeffries (@seagreen)
  for the idea.\n\n0.3.5.3\n\t* Dropped upper version bounds of dependencies\n\t  because
  it's to much work to maintain.\n\n0.3.5.2\n\t* Remove unused ghc-prim dependency.\n\t*
  Added unit tests for read and scientificP\n\n0.3.5.1\n\t* Replace use of Vector
  from vector with Array from primitive.\n\n0.3.5.0\n\t* Export scientificP :: ReadP
  Scientific\n\t  (Courtesy of Shlok Datye @shlok)\n\n0.3.4.15\n\t* Fix build for
  base < 4.8.\n\n0.3.4.14\n\t* Some minor performance improvements.\n\n0.3.4.13\n\t*
  Support criterion-1.2\n\n0.3.4.12\n\t* Support base-4.10\n\n0.3.4.11\n\t* Support
  tasty-ant-xml-1.1.0\n\n0.3.4.10\n\t* Tighten lower bound on vector from 0.5 to 0.7
  because building with\n\t  vector < 0.7 results in a build error.\n\n\t* Move the
  internal modules Math.NumberTheory.Logarithms and\n\t  GHC.Integer.Logarithms.Compat
  to their own package integer-logarithms so\n\t  other people can share that code.\n\n0.3.4.9\n\t*
  Support QuickCheck-2.9.\n\n0.3.4.8\n\t* Make bytestring-builder's installation conditional
  based on a Cabal flag.\n\n0.3.4.7\n\t* Unconditionally export Data.ByteString.Builder.Scientific.\n\t
  \ The bytestring-builder cabal flag has been removed.\n\t  Depend on bytestring-builder
  for backwards compatibility for GHC < 7.8.\n\n0.3.4.6\n\t* Made toDecimalDigits
  more similar to floatToDigits\n\n\t  Previously:\n\n\t    toDecimalDigits 0 == ([0],1)\n\n\t
  \ Now:\n\n\t    toDecimalDigits 0 == ([0],0)\n\n\t  Because:\n\n\t    Numeric.floatToDigits
  10 (0 :: Double) == ([0],0)\n\n\n\t* Introduce a special case for 0 in fromFloatDigits\n\n\t
  \   fromFloatDigits 0 = 0\n\n\t  This should fix https://github.com/bos/aeson/issues/369\n\n0.3.4.5\n\tThe
  following are all a courtesy of Oleg Grenrus (phadej):\n\n\t* Support GHC-8.0.1\n\t*
  Support binary-0.8\n\t* Enable Travis continuous integration\n\n0.3.4.4\n\t* Improved
  performance of toDecimalDigits by 13%.\n\n0.3.4.3\n\t* Fix build with integer-simple.\n\n0.3.4.2\n\t*
  Fix build on GHC-7.4.\n\t  Courtesy of Adam Bergmark..\n\n0.3.4.1\n\t* Fix build
  on GHC-7.0.4\n\n0.3.4.0\n\t* Added fromRationalRepetend & toRationalRepetend\n\t
  \ for safely converting from and to rationals\n\t  which have a repeating decimal
  representation like:\n\t  1 % 28 = 0.03(571428).\n\t* Added a Binary instance.\n\t*
  Various performance improvements.\n\t* Support vector-0.11\n\t* Support tasty-0.11\n\t*
  Support criterion-1.1.0.0\n\n0.3.3.8\n\t* Support QuickCheck-2.8.\n\n0.3.3.7\n\t*
  Fixed both the\n\n            Prelude Data.Scientific> reads \"0.0\" :: [(Data.Scientific.Scientific,String)]\n
  \           [(0.0,\".0\"),(0.0,\"\")]\n\n          problem and the\n\n            read
  \" 8\" :: Scientific fails, while read \" 8\" :: Double succeeds\n\n\t  problem.\n\n\t
  \ Courtesy of neongreen.\n\n0.3.3.6\n\t* Fixed bug in the x / y method for Scientific.
  Since I was using\n\t  the default implementation: `x * recip y` the operation would\n\t
  \ diverge when `recip y` had an infinite decimal output.\n\t  This shouldn't happen
  when the result of / is finite again.\n\t  For example: 0.6 / 0.3 should yield 2.0.\n\n\t
  \ This is now fixed by using the following implementation:\n\n\t  `x / y = fromRational
  $ toRational x / toRational y`\n\n0.3.3.5\n\t* Fixed bug when converting the Scientific:\n\t
  \ `scientific 0 someBigExponent` to a bounded Integral using toBoundedInteger\n\t
  \ or to a bounded RealFloat using toBoundedRealFloat.\n\t  If someBigExponent was
  big enough to trigger the big-exponent protection\n\t  the beforementioned functions
  didn't return 0.\n\n\t  This is fixed by explicitly handling a coefficient of 0.\n\n0.3.3.4\n\t*
  Relax upper version bounds of base and deepseq\n\t  for the test suite and benchmarks.\n\n0.3.3.3\n\t*
  Add support for `deepseq-1.4`.\n\n0.3.3.2\n\t* Fix parsing of empty digit string
  (#21).\n\n0.3.3.1\n\t* Allow newer tasty, tasty-hunit and criterion.\n\n0.3.3.0\n\t*
  Add the isFloating or isInteger predicates.\n\t  Courtesy of Zejun Wu (@watashi).\n\t*
  Add the toRealFloat' and toBoundedInteger functions.\n\t  Courtesy of Fujimura Daisuke
  (@fujimura).\n\n0.3.2.2\n\t* Enable package to link with integer-simple instead
  of\n\t  integer-gmp using the -finteger-simple cabal flag.\n\t  Courtesy of @k0ral.\n\n0.3.2.1\n\n\t*
  Parameterize inclusion of the Data.ByteString.Builder.Scientific\n\t  module using
  the bytestring-builder flag. Disabling this flag\n\t  allows building on GHC-7.0.4
  which has bytestring-0.9 installed\n\t  by default.\n\n0.3.2.0\n\n\t* Add the floatingOrInteger
  function\n\t* Fix build on GHC-7.0.4\n\t* More efficient and better behaving magnitude
  computation\n\t* Lower the number of cached magnitudes to 324 (same as GHC.Float)\n\n0.3.1.0\n\n\t*
  Don't normalize on construction but do it when pretty-printing\n\t  instead. Also
  provide a manual normalize function.\n\t* Improve efficiency of toRealFloat\n\t*
  Added note about caching magnitudes\n\t* Dropped dependency on arithmoi\n\t* Make
  benchmark easier to build\n\t* Add junit XML output support (for Jenkins)\n\n0.3.0.2\n\n\t*
  Lower the minimal QuickCheck version.\n\t* Make sure sized exponents are generated
  in the QuickCheck tests.\n\n0.3.0.1\n\n\t* Fix build for bytestring-0.10.0.*\n\n0.3.0.0\n\n\t*
  Fix a DoS vulnerability that allowed an attacker to crash the\n\t  process by sending
  a scientific with a huge exponent like\n\t  1e1000000000.\n\t* Fix various RealFrac
  methods.\n\t* Cache some powers of 10 to speed up the magnitude computation.\n\t*
  Normalize scientific numbers on construction.\n\t* Move the Text Builder to its
  own module &\n\t  provide a ByteString builder\n\t* Added more documentation\n\n0.2.0.2\n\n
  \       * Widen the dreaded pointlessly tight upper bounds\n\n0.2.0.1\n\n\t* Support
  the latest versions of smallcheck and tasty\n\n0.2.0.0\n\n\t* added deriving data\n\n0.1.0.1\n\n\t*
  Loosen upper bounds on package versions\n\n0.1.0.0\n\n\t* Fixed bugs & Changed API\n\n0.0.0.2\n\n\t*
  Support building the library on GHC >= 7.0.1\n\n0.0.0.1\n\n\t* Simplification in
  the Show instance\n\t* Optimization in fromRealFloat\n\n0.0.0.0\n\n\t* Initial commit\n"
basic-deps:
  bytestring: '>=0.10.4 && <0.12'
  integer-logarithms: '>=1.0.3.1 && <1.1'
  base: '>=4.5 && <4.19'
  text: '>=1.2.3.0 && <1.3 || >=2.0 && <2.1'
  integer-gmp: -any
  containers: '>=0.4.2.1 && <0.7'
  binary: '>=0.5.1 && <0.9'
  hashable: '>=1.2.7.0 && <1.5'
  deepseq: '>=1.3.0.0 && <1.5'
  template-haskell: '>=2.8 && <2.21'
  primitive: '>=0.7.1.0 && <0.9'
all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.1.0
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.3.0
- 0.3.3.1
- 0.3.3.2
- 0.3.3.3
- 0.3.3.4
- 0.3.3.5
- 0.3.3.6
- 0.3.3.7
- 0.3.3.8
- 0.3.4.0
- 0.3.4.1
- 0.3.4.2
- 0.3.4.3
- 0.3.4.4
- 0.3.4.5
- 0.3.4.6
- 0.3.4.7
- 0.3.4.8
- 0.3.4.9
- 0.3.4.10
- 0.3.4.11
- 0.3.4.12
- 0.3.4.13
- 0.3.4.14
- 0.3.4.15
- 0.3.5.0
- 0.3.5.1
- 0.3.5.2
- 0.3.5.3
- 0.3.6.0
- 0.3.6.1
- 0.3.6.2
- 0.3.7.0
author: Bas van Dijk
latest: 0.3.7.0
description-type: haddock
description: |-
  "Data.Scientific" provides the number type 'Scientific'. Scientific numbers are
  arbitrary precision and space efficient. They are represented using
  <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
  The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
  @e :: 'Int'@. A scientific number corresponds to the
  'Fractional' number: @'fromInteger' c * 10 '^^' e@.

  Note that since we're using an 'Int' to represent the exponent these numbers
  aren't truly arbitrary precision. I intend to change the type of the exponent
  to 'Integer' in a future release.

  The main application of 'Scientific' is to be used as the target of parsing
  arbitrary precision numbers coming from an untrusted source. The advantages
  over using 'Rational' for this are that:

  * A 'Scientific' is more efficient to construct. Rational numbers need to be
  constructed using '%' which has to compute the 'gcd' of the 'numerator' and
  'denominator'.

  * 'Scientific' is safe against numbers with huge exponents. For example:
  @1e1000000000 :: 'Rational'@ will fill up all space and crash your
  program. Scientific works as expected:

  >>> read "1e1000000000" :: Scientific
  1.0e1000000000

  * Also, the space usage of converting scientific numbers with huge exponents to
  @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
  will always be bounded by the target type.
license-name: BSD-3-Clause
