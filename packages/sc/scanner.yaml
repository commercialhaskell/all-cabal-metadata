all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
author: Yuras Shumovich
basic-deps:
  base: <5
  bytestring: '>=0'
  fail: '>=0'
changelog: |
  0.3.1

  * support ghc-8.8

  0.3

  * add foldWhile, foldWhile1, satisfy, satisfyMaybe

  0.2

  * make Scanner a newtype instead of data, see https://github.com/Yuras/scanner/pull/3
  * improve `string` performance
  * add `scanWith`

  0.1

  * initial release
changelog-type: markdown
description: |
  # scanner
  Fast non-backtracking incremental combinator parsing for bytestrings

  [![Build Status](https://travis-ci.org/Yuras/scanner.svg?branch=master)](https://travis-ci.org/Yuras/scanner)

  On hackage: http://hackage.haskell.org/package/scanner

  On stackage: https://www.stackage.org/package/scanner

  It is often convinient to use backtracking to parse some sophisticated
  input. Unfortunately it kills performance, so usually you should avoid
  backtracking.

  Often (actually always, but it could be too hard sometimes) you can
  implement your parser without any backtracking. It that case all the
  bookkeeping usuall parser combinators do becomes unnecessary. The
  scanner library is designed for such cases. It is often 2 times faster
  then attoparsec.

  As an example, please checkout redis protocol parser included into the
  repo, both using attoparsec and scanner libraries:
  https://github.com/Yuras/scanner/tree/master/examples/Redis

  Benchmark results:

  ![Bechmark results](https://raw.githubusercontent.com/Yuras/scanner/master/bench/bench.png)

  But if you really really really need backtracking, then you can just
  inject attoparsec parser into a scanner: http://hackage.haskell.org/package/scanner-attoparsec
description-type: markdown
hash: 6b90f2e4ff01895b69cc53885550b85a0536a702b90947ade4ac34d6435ce5a8
homepage: https://github.com/Yuras/scanner
latest: 0.3.1
license-name: BSD-3-Clause
maintainer: shumovichy@gmail.com
synopsis: Fast non-backtracking incremental combinator parsing for bytestrings
test-bench-deps:
  attoparsec: '>=0'
  base: '>=0'
  bytestring: '>=0'
  cereal: '>=0'
  criterion: '>=0'
  hspec: '>=0'
  scanner: '>=0'
  text: '>=0'
