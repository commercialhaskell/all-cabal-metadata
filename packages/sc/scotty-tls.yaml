all-versions:
- 0.1.0.0
- 0.3.0.0
- 0.4.0
- 0.4.1
- 0.5.0
author: David Johnson
basic-deps:
  base: <5
  scotty: '>=0.21.0'
  transformers: '>=0.3.0.0'
  wai: '>=3.2'
  warp: '>=3.3'
  warp-tls: '>=3.4'
changelog: |
  ## 0.4.0
  * Remove unnecessary argument to `scottyTTLS` so that `scotty-tls` can build
    with `scotty-0.10` and up
changelog-type: markdown
description: |
  # Scotty-TLS

  You can test by generating a self-signed certificate like this:

  ```sh
  openssl req -nodes -newkey rsa:2048 -keyout example.key -out example.csr \
      -subj "/C=GB/ST=London/L=London/O=Acme Widgets/OU=IT Department/CN=example.com"
  openssl x509 -req -days 365 -in example.csr -signkey example.key -out example.crt
  ```
  For more details on making certificates, see [this guide](http://www.akadia.com/services/ssh_test_certificate.html).


  Install and run with:

  ```text
  cabal update && cabal install scotty-tls
  ```

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import           Data.Monoid    (mconcat)
  import           Web.Scotty
  import           Web.Scotty.TLS

  main :: IO ()
  main = scottyTLS 3000 "server.key" "server.crt" $ do
           get "/:word" $ do
               beam <- param "word"
               html $ mconcat ["<h1>Scotty, ", beam, " me up!</h1>"]
  ```
description-type: markdown
hash: a8ae3aeeaec4dd4e27cd9e2edbc23d9a110bb6e4a0019c1461e345b1935ced38
homepage: https://github.com/dmjio/scotty-tls.git
latest: 0.5.0
license-name: BSD-3-Clause
maintainer: djohnson.m@gmail.com
synopsis: TLS for Scotty
test-bench-deps: {}
