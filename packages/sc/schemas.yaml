all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.3.0
- 0.3.0.1
- 0.3.0.2
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
author: Pepe Iborra
basic-deps:
  aeson: '>=0'
  base: '>=4.12 && <100'
  bifunctors: '>=0'
  bytestring: '>=0'
  free: '>=0'
  generics-sop: '>=0.5.0.0'
  hashable: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  mtl: '>=0'
  profunctors: '>=0'
  scientific: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: |
  # Revision history for schemas
  ## 0.4.0.2 -- 2020-04-28
  * Fix bug in `instance HasSchema Either`

  ## 0.4.0.1 -- 2020-01-01
  * Replace breadth-first search with a greedy depth-first search

  ## 0.4.0 -- 2019-12-20
  * Handle non-termination as an effect in decoding
  * Union api made more consistent across tagged and non tagged
  * (internal) More principled TypedSchema ADT based on Sum Profunctors
  * Total version of 'liftPrism'
  * 'theSchema' renamed to 'schemaFor'
  * Bugfixes for decoding

  ## 0.3.0.2 --  2019-10-29
  * Show circular schemas

  ## 0.3.0.1 --  2019-10-25
  * Fix a bug that made OpenApi2 generation diverge.

  ## 0.3.0 --  2019-10-23
  * Fixed a bug in isSubtypeOf for unions
  * Fixed exponential performance (#3)
  * Changed the representation of untyped schemas to remove Alternatives
    Alternatives are only possible on typed schemas
  * Added support for recursive schemas (#1)

  ## 0.2.0.3 --  2019-10-13
  * Bug fixes and performance improvements

  ## 0.2.0.2 --  2019-10-07
  * Change the default schema for `Either` to handle both CamelCase and lowercase

  ## 0.2.0.1 --  2019-10-02
  * Fixed subtyping relation for arrays

  ## 0.2.0 --  2019-09-29
  * Add OpenApi2 encoding
  * Change the `Semigroup` instance for typed schemas
  * Trimmed down dependencies slightly

  ## 0.1.1.0 --  2019-09-28
  * Fixed several bugs in `isSubtypeOf` and `encodeWith`
  * Better error messages when encoding with a partial schema fails
  * New: 'liftPrism' and 'oneOf'

  ## 0.1.0.0 -- 2019-09-25

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "[![CI](https://travis-ci.com/pepeiborra/schemas.svg)](https://travis-ci.com/pepeiborra/schemas)\n[![Hackage](https://img.shields.io/hackage/v/schemas.svg)](https://hackage.haskell.org/package/schemas)\n#
  schemas\n\nschemas is a Haskell-centric serialization library written with versioning
  in mind. Since a schema is a first-class citizen, it can be serialized, reasoned
  about, and transmitted together with the data. Serialization and deserialization
  work better when the source schema is provided, and versioning is accomplished by
  checking that the two schemas are related by a subtyping relation. This alleviates
  the need to keep old versions of datatypes around.\n\nConsider a schema modification
  that adds a field. To support upgrading old documents to the new schema, the only
  requirement is that the new field is optional. Downgrading is easy too, simply omit
  the new field. Conversely, a schema modifcation that removes a field supports trivial
  upgrades but the removed field must be optional to support downgrading. Changing
  the type of a field is supported in as much as the old and new types are relatable.
  Field renaming is not supported. More importantly, all these changes are defined
  by a schema relation, and the library provides a predicate to check whether the
  relation holds.\n\nschemas can also be used in a GraphQL-like fashion, allowing
  clients to request a subset of the schema. This comes up specially when working
  with recursive schemas involving cyclic data.\n\n## Features\n* schemas are first-class
  citizens and can be serialized,\n* schema construction is statically typed,\n* versioning
  is driven by a subtyping relation, no need for version numbers,\n* Serialization
  to JSON only currently\n\n## Why schemas\n\nA quick seach in Hackage reveals a large
  number of libraries about schemas, including [json-schema], [hjsonschema], [aeson-schema],
  [aeson-schemas] and [hschema], amongst others.\nThere's undoubtedly a large amount
  of overlapping amongst all these libraries, so the immediate question is, why introduce
  another one ? \n\nThis library is a re-implementation of an encoding library found
  in the Strats codebase at Standard Chartered Bank, the origins of which is go back
  a few years in time.\nIt predates other libraries that accomplish a similar task,
  including most of the ones mentioned before.\nThe approach has worked well but the
  codebase is showing its age and limitations, notably the lack of decoding capabilities.\nThis
  library extends the original approach with decoding and alternatives, hopefully
  keeping the good parts like the subtyping relation, intact.\n \n[json-schema]: http://hackage.haskell.org/packages/json-schema\n[hjsonschema]:
  http://hackage.haskell.org/packages/hjsonschema\n[aeson-schema]: http://hackage.haskell.org/packages/aeson-schema\n[aeson-schemas]:
  http://hackage.haskell.org/packages/aeson-schemas\n[hschema]: http://hackage.haskell.org/packages/hschema\n\n\n##
  Subtyping relation\n\nschemas relies on a simple subtyping relation between schemas
  to perform value conversions. The basic idea is that these conversions are fully
  guided by the source and target schemas and involve only simple projections and
  injections:\n1. Projecting a subset of the source record fields.\n2. Turning a source
  field of type `A` into a target field of type `Array A`.\n\nFor more concrete details
  on the subtyping relation check the definition of `isSubtypeOf`. This function returns
  a witness, i.e. a conversion function, whenever the relation holds.\n\nVersioning
  makes use of this subtyping relation as follows. Downgrading a value `v_2 :: T_2`
  into a previous version `T_1` is accomplished via the witness of `schema(T_1) >
  schema(T_2)`. Similarly, upgrading a `v_1 :: T_1` message into a newer version `T_2`
  can be accomplished via the witness of `schema(T_1) < schema(T_2)`. Therefore, a
  type `T_1` can only be replaced by a type `T_2` in an downgrade-compatible way if
  `schema(T_1) > schema(T_2)`; if upgrades are required, then `schema(T_1) < schema(T_2)`
  is required too.\n\nThe `<` relation is reflexive and transitive, but importantly
  not asymmetric or antisymmetric: it can be that both `T_1 < T_2` and `T_2 < T_1`
  and yet they are not the same type. For example, given a `S_2` schema that adds
  a required field to `S_1`, we would have that `S_1 > S_2` but not `S_1 < S_2`. However,
  if new the field was optional, then we would have `S_1 < S_2` too. In such case,
  we say that `S_1 ~ S_2` because they only differ on optional fields.\nFor example,
  given a `S_3` schema that removes a field from `S_2`, we have:\n- `S_2 < S_3` therefore
  we can upgrade `S_2` values to `S_3`\n- `S_2 ~ S_3` if the removed field is optional,
  in which case we can also downgrade `S_3` values to `S_2`\n\nThe `~` relation is
  an equivalence class, i.e. it is reflexive, symmetric and transitive.\n\n## Alternative
  encodings\n\nSometimes there is more than one way to encode a value. A field can
  be renamed or change its type, an optional field become mandatory, several fields
  can be merged into one, etc. Alternative encodings allow for backwards compatible
  schema evolution.\nThis library support alternative encodings via the `Monoid` instance
  for typed schemas and the `Alternative` instance for `RecordFields`. \n\nThe schema
  `A|B` encodes a value in two alternative ways `A` and `B`. A message created with
  this schema may use encodings A, B or both. 'encode' will always create messages
  with all the possible encodings. While messages with multiple alternative encodings
  are not desirable for serialization, the desired message can be carved out using
  the subtyping relation. All the following hold:\n```\nA < A|B (the coercion A ->
  A|B will produce a message with an A encoding)\nB < A|B (the coercion B -> A|B will
  produce a message with a  B encoding)\nA|B < A (the coercion A|B -> A will succeed
  only if the message contains an A encoding)\nA|B < B (the coercoin A|B -> B will
  succeed only if the message contains a  B encoding)\n```\n\nTyped schemas implement
  a limited form of alternative encodings via the `Alternative` instance for record
  fields. In the future a similar 'Alternative' instance for union constructors could
  be added.\n\n## Example\n- [Person](example/Person.hs)\n- [Person2](example/Person2.hs)\n-
  [Person3](example/Person3.hs)\n"
description-type: markdown
hash: ac3da79084e5d6c67b903e911d3c1a3f33cf09e496b1d085cbdb27a0e05455a2
homepage: https://github.com/pepeiborra/schemas
latest: 0.4.0.2
license-name: BSD-3-Clause
maintainer: pepeiborra@gmail.com
synopsis: schema guided serialization
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  aeson-pretty: '>=0'
  base: '>=0'
  bytestring: '>=0'
  generic-lens: '>=0'
  generics-sop: '>=0'
  hspec: '>=0'
  lens: '>=0'
  mtl: '>=0'
  pretty-simple: '>=0'
  schemas: '>=0'
  syb: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
