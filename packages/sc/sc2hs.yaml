all-versions:
- 0.1.0.0
author: Sophie Taylor <sophie@spacekitteh.moe>
basic-deps:
  base: '>=4.12 && <5'
  bytestring: '>=0.10'
  containers: '>=0.6'
  directory: '>=1.3'
  etc: '>=0'
  filepath: '>=1.4'
  freer-simple: '>=1.2'
  gitrev: '>=1.3'
  lens: '>=0'
  lens-labels: '>=0.3'
  proto-lens: '>=0.4'
  sc2-lowlevel: '>=0'
  sc2-proto: '>=0'
  sc2-support: '>=0'
  sc2hs: '>=0'
  text: '>=1.2'
changelog: ''
changelog-type: ''
description: "# sc2hs: Haskell bindings for the StarCraft II API\r\n\r\n## Introduction\r\n`sc2hs`
  is an Effect-based API for StarCraft II.\r\nCurrently, the API is quite small, basically
  enough to get the worker rush bot working, but the framework is there.\r\n\r\n##
  Example\r\nA quick example of the API is in order!\r\n```haskell\r\n-- Orders a
  worker rush on the first frame.\r\nworkerRush :: Member Logging r =>   Eff (Agent
  ':r ) () -- 1\r\nworkerRush = do\r\n  updateObservations -- 2\r\n  units <- workers
  -- 3\r\n  locs <- enemyStartLocations -- 4\r\n  units `attack` (head locs) -- 5\r\n
  \ logMessage 1 \"Worker rush ^_^\"\r\n  loop\r\n  \r\nloop :: Member Logging r =>
  \ Eff (Agent ': r) ()\r\nloop = do\r\n  step -- 6\r\n  status <- getStatus -- 7\r\n
  \ case status of\r\n    Ended -> logMessage 1 \"Ending game\"\r\n    _     -> loop\r\n\r\n```\r\nLet's
  look at what this does:\r\n1. An entity which interacts with SC2 is a computation
  using the `Agent` Effect. This is roughly the level of API that is exposed by, for
  example, `python-sc2`.\r\n2. `updateObservations` asks SC2 to send all the info
  the `Agent` can legitimately know of, and processes the result. It should be called
  once per game tick.\r\n3. `workers` is a function which returns a list of the player's
  worker units (SCVs/Drones/Probes)\r\n4. `enemyStartLocations` retrieves the list
  of possible start locations for the enemy, which is a property of the map.\r\n5.
  `attack` is a wrapper around an `Order`, which instructs units to use abilities.
  `attack` just creates an `Order` to attack, using the specified `units` and a given
  `Targetable`, which can be a point or a specified unit.\r\n6. `step` tells SC2 that
  it is ready to advance to the next game tick. This is only useful in non-realtime
  modes.\r\n7. `getStatus` returns the status of the protocol state machine.\r\n\r\n\r\n##
  Installation\r\n### Required dependencies\r\n* Stack\r\n* protoc (from the protobuf
  package) must also be in your path\r\n* If you want to actually run it, then you
  need StarCraft II installed.\r\n\r\n#### Windows\r\nI think that's it.\r\n\r\n####
  Linux\r\nNix is highly recommended. If not, then make sure you also have zlib headers
  available.\r\n\r\n#### Mac\r\nNo idea. Someone let me know!\r\n\r\n### Before compilation\r\nDue
  to a bug in proto-lens-protoc 0.4.0.1, enum generation is broken when there are
  underscores in names. Thus, you must apply the patch in sc2-proto to the s2client-proto
  submodule.\r\n\r\n### Compilation\r\n`stack build`\r\n\r\n### Running the demo app\r\nFirst,
  launch SC2 and create a game manually. Then, do `stack run`.\r\n\r\nThis should
  run the demo bot, which launches a game, chooses the 9th map in the available maps,
  and joins as a Protoss player against a random Medium Computer player.\r\n\r\n##
  Design\r\n`sc2hs` is split into several packages:\r\n```mermaid\r\ngraph BT\r\n
  \   sc2-proto --> sc2-lowlevel\r\n    sc2-support --> sc2-lowlevel\r\n    sc2-proto
  --> sc2hs\r\n    sc2-support --> sc2hs\r\n    sc2-lowlevel --> sc2hs\r\n    sc2-lowlevel
  --> sc2hs-demo\r\n    sc2hs --> sc2hs-demo\r\n```\r\n\r\n### sc2-proto\r\n`sc2-proto`
  is an autogenerated wrapper library around the SC2 protobuf API description.\r\n\r\n###
  sc2-support\r\n`sc2-support` contains basic SC2-related definitions, such as the
  various directories, as well as a Template Haskell module which generates data types
  and functions converting between the raw integers used to refer to units, abilities,
  upgrades, buffs and effects, into a more usable form. It does this by parsing `stableid.json`,
  which is only created after running SC2 using the API at least once. Therefore,
  it also includes a backup copy, which may be out of date; but it shouldn't change
  frequently.\r\n\r\nEventually, the goal is for `sc2-support` to augment this data
  with properties harvested from balance data extracted from the SC2 editor, but how
  to do that *well* when it changes with each patch is still to be worked out.\r\n\r\n###
  sc2-lowlevel\r\n`sc2-lowlevel` handles launching the game, managing its process,
  connecting to it, and communicating at the protobuf API logical layer. It also has
  some higher level types used by `sc2hs`. The protocol state machine is modeled using
  an Effect.\r\n\r\n### sc2hs\r\n`sc2hs` is centered on the `Network.SC2.Agent` module.
  This defines an Effect, `Agent`, which provides an abstraction over the low-level
  protocol. Currently it uses just the Raw interface, but the goal is to augment it
  with data from the feature-layer interface and UI.\r\n\r\n### sc2hs-demo\r\nThe
  demo app shows how to create a basic bot and use it in a game.\r\n\r\n## Contributing\r\nCurrently
  the focus is on expanding horizontally along the layers, by translating more of
  the protobuf protocol into `Requestable`s in `sc2-lowlevel`, and into the `Agent`
  Effect. That would be a great place to contribute; however contributions anywhere
  else are more than welcome! :heart_eyes_cat:"
description-type: markdown
hash: 90831f71401cefb10abac72ebf05642838f912ef7bfa8cb82e0d330f9562d46c
homepage: https://gitlab.com/spacekitteh/sc2hs
latest: 0.1.0.0
license-name: LicenseRef-OtherLicense
maintainer: Sophie Taylor <sophie@spacekitteh.moe>
synopsis: An interface to the Starcraft II bot API
test-bench-deps: {}
