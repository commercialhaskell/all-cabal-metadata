all-versions:
- 0.6.0
- 0.6.1
- 0.6.2
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- 0.8.0
- 0.8.1
- 0.8.2
- 0.9.0
- 0.9.1
- 0.10.0
- 0.10.1
- 0.10.2
- 0.11.0
- 0.11.1
- 0.11.2
- 0.11.3
- 0.11.4
- 0.11.5
- '0.12'
- 0.12.1
- 0.20.1
- '0.21'
- '0.22'
author: Andrew Farmer <xichekolas@gmail.com>
basic-deps:
  aeson: '>=0.6.2.1 && <2.3'
  base: '>=4.14 && <5'
  blaze-builder: '>=0.3.3.0 && <0.5'
  bytestring: '>=0.10.0.2'
  case-insensitive: '>=1.0.0.1 && <1.3'
  cookie: '>=0.4'
  data-default-class: '>=0.1'
  exceptions: '>=0.7 && <0.11'
  http-types: '>=0.9.1 && <0.13'
  monad-control: '>=1.0.0.3 && <1.1'
  mtl: '>=2.1.2 && <2.4'
  network: '>=2.6.0.2 && <3.2'
  regex-compat: '>=0.95.1 && <0.96'
  resourcet: '>=0'
  stm: '>=0'
  text: '>=0.11.3.1'
  time: '>=1.8'
  transformers: '>=0.3.0.0 && <0.7'
  transformers-base: '>=0.4.1 && <0.5'
  unliftio: '>=0.2'
  wai: '>=3.0.0 && <3.3'
  wai-extra: '>=3.1.14'
  warp: '>=3.0.13 && <3.4'
changelog: "## next [????.??.??]\n\n\n## 0.22 [2024.03.09]\n\n### New\n* add `instance
  Parsable UTCTime` (#250)\n* add `filesOpts` (#369). Form parameters and files are
  only parsed from the request body if needed; `filesOpts` introduces options to customize
  upload limits, a mechanism to back uploads with temporary files based on resourcet,
  as well as a continuation-based syntax to process such temporary files. \n\n###
  Fixes\n* `files` does not accept unbounded uploads anymore (see #183, #203), but
  like `filesOpts` it is backed by temporary files which are read back in memory and
  removed right away. The limits for `files` are prescribed by `defaultParseBodyOptions`
  in wai-extra (#369).\n* Path parameters with value matching the parameter name prefixed
  by colon will properly populate `pathParams` with their literal value : `/:param`
  will match `/:param` and add a `Param` with value `(\"param\", \":param\")` (#301)\n*
  Accept text-2.1 (#364)\n* Remove dependency upper bounds on `text` and `bytestring`
  (#371)\n* When in 'verbose' mode any unhandled exceptions are printed to stderr
  as well (#374)\n\n### Breaking changes\n* some ActionT API functions have now a
  MonadIO or MonadUnliftIO constraint rather than Monad reflecting that there is where
  request reading takes place. E.g. `files` has now a MonadUnliftIO constraint on
  its base monad. (#369)\n* the File type has now a type parameter to reflect whether
  it carries file contents or just a filepath pointing to the temp file (#369).\n\n\n\n##
  0.21 [2023.12.17]\n### New\n* add `getResponseHeaders`, `getResponseStatus`, `getResponseContent`
  (#214)\n* add `captureParamMaybe`, `formParamMaybe`, `queryParamMaybe` (#322)\n*
  add `Web.Scotty.Trans.Strict` and `Web.Scotty.Trans.Lazy` (#334)\n* renamed `captureParam`,
  `captureParamMaybe`, and `captureParams` to `pathParam`, `pathParamMaybe`, `pathParams`
  respectively, keeping the old names as their synonyms (#344)\n\n### Deprecated\n*
  deprecate `rescue` and `liftAndCatchIO` (#332)\n* Deprecate `StatusError`, `raise`
  and `raiseStatus` (#351)\n\n### Fixes\n* Reverted the `MonadReader` instance of
  `ActionT` so that it inherits the base monad (#342)\n* Scotty's API such as `queryParam`
  now throws `ScottyException` rather than `StatusException`.\n  Uncaught exceptions
  are handled by `scottyExceptionHandler`, resembling the existing behaviour\n  \n###
  Breaking changes\n* `File` type: the first component of the tuple is strict text
  now (used to be lazy prior to 0.21) (#370)\n\n### Documentation\n* Add doctest,
  refactor some inline examples into doctests (#353)\n* document \"`defaultHandler`
  only applies to endpoints defined after it\" (#237)\n\n\n\n## 0.20.1 [2023.10.03]\n*
  remove dependencies on 'base-compat' and 'base-compat-batteries' (#318)\n* re-add
  MonadFail (ActionT m) instance (#325)\n* re-add MonadError (ActionT m) instance,
  but the error type is now specialized to 'StatusError' (#325)\n* raise lower bound
  on base ( > 4.14 ) to reflect support for GHC >= 8.10 (#325).\n\n\n## 0.20 [2023.10.02]\n*
  Drop support for GHC < 8.10 and modernise the CI pipeline (#300).\n* Adds a new
  `nested` handler that allows you to place an entire WAI Application under a Scotty
  route (#233).\n* Disambiguate request parameters (#204). Adjust the `Env` type to
  have three `[Param]` fields instead of one, add `captureParam`, `formParam`, `queryParam`
  and the associated `captureParams`, `formParams`, `queryParams`. Add deprecation
  notices to `param` and `params`.\n* Add `Scotty.Cookie` module (#293).\n* Change
  body parsing behaviour such that calls to `next` don't result in POST request bodies
  disappearing (#147).\n* (Internal) Remove unused type `RequestBodyState` (#313)\n*
  Rewrite `ActionT` using the \"ReaderT pattern\" (#310) https://www.fpcomplete.com/blog/readert-design-pattern/\n\nBreaking:\n\n*
  (#310) Introduce `unliftio` as a dependency, and base exception handling on `catch`.\n*
  (#310) Clarify the exception handling mechanism of ActionT, ScottyT. `rescue` changes
  signature to use proper `Exception` types rather than strings. Remove `ScottyError`
  typeclass.\n* (#310) All ActionT methods (`text`, `html` etc.) have now a MonadIO
  constraint on the base monad rather than Monad because the response is constructed
  in a TVar inside ActionEnv. `rescue` has a MonadUnliftIO constraint. The Alternative
  instance of ActionT also is based on MonadUnliftIO because `<|>` is implemented
  in terms of `catch`. `ScottyT` and `ActionT` do not have an exception type parameter
  anymore.\n* (#310) MonadError e (ActionT m) instance removed\n* (#310) MonadFail
  (ActionT m) instance is missing by mistake.\n\n## 0.12.1 [2022.11.17]\n* Fix CPP
  bug that prevented tests from building on Windows.\n* Allow building with `transformers-0.6.*`
  and `mtl-2.3.*`. Because the\n  `MonadTrans t` class gained a `forall m. Monad m
  => Monad (t m)` superclass\n  in `transformers-0.6.0.0`, the `MonadTrans` and `MonadTransControl`
  instances\n  for `ActionT e` now have a `ScottyError e` instance context to match
  the\n  `Monad` instance.\n\n## 0.12 [2020.05.16]\n* Provide `MonadReader` and `MonadState`
  instances for `ActionT`.\n* Add HTTP Status code as a field to `ActionError`, and
  add\n  a sister function to `raise`, `raiseStatus`. This makes\n  throwing a specific
  error code and exiting much cleaner, and\n  avoids the strange defaulting to HTTP
  500. This will make internal\n  functions easier to implement with the right status
  codes 'thrown',\n  such as `jsonData`.\n* Correct http statuses returned by `jsonData`
  (#228).\n* Better error message when no data is provided to `jsonData` (#226).\n*
  Add `Semigroup` and `Monoid` instances for `ActionT` and `ScottyT`\n* ScottyT: Use
  strict StateT instead of lazy\n* Handle adjacent slashes in the request path as
  one (thanks @SkyWriter)\n\n## 0.11.5 [2019.09.07]\n* Allow building the test suite
  with `hspec-wai-0.10`.\n\n## 0.11.4 [2019.05.02]\n* Allow building with `base-4.13`
  (GHC 8.8).\n\n## 0.11.3 [2019.01.08]\n* Drop the test suite's dependency on `hpc-coveralls`,
  which is unmaintained\n  and does not build with GHC 8.4 or later.\n\n## 0.11.2
  [2018.07.02]\n* Migrate from `Network` to `Network.Socket` to avoid deprecation
  warnings.\n\n## 0.11.1 [2018.04.07]\n* Add `MonadThrow` and `MonadCatch` instances
  for `ActionT` [abhinav]\n* Fix `matchAny` so that all methods are matched, not just
  standard ones\n  [taphu]\n\n## 0.11.0\n* IO exceptions are no longer automatically
  turned into ScottyErrors by\n  `liftIO`. Use `liftAndCatchIO` to get that behavior.\n*
  New `finish` function.\n* Text values are now leniently decoded from ByteStrings.\n*
  Added `MonadFail` instance for `ScottyT`\n* Lots of bound bumps on dependencies.\n\n##
  0.10.2\n* Removed debug statement from routes\n\n## 0.10.1\n* `Parsable` instances
  for `Word`, `Word8`, `Word16`, `Word32`, `Word64`\n   [adamflott]\n* `Parsable`
  instances for `Int8`, `Int16`, `Int32`, `Int64`, and `Natural`\n* Removed redundant
  `Monad` constraint on `middleware`\n\n## 0.10.0\n\n* The monad parameters to `ScottyT`
  have been decoupled, causing the type\n  of the `ScottyT` constructor to change.
  As a result, `ScottyT` is no\n  longer a `MonadTrans` instance, and the type signatures
  of`scottyT`,\n  `scottyAppT`, and `scottyOptsT` have been simplified. [ehamberg]\n\n*
  `socketDescription` no longer uses the deprecated `PortNum` constructor.\n  Instead,
  it uses the `Show` instance for `PortNumber`. This changes the\n  bytes from host
  to network order, so the output of `socketDescription`\n  could change. [ehamberg]\n\n*
  `Alternative`, `MonadPlus` instances for `ActionT`\n\n* `scotty` now depends on
  `transformers-compat`. As a result, `ActionT` now\n  uses `ExceptT`, regardless
  of which version of `transformers` is used.\n  As a result, several functions in
  `Web.Scotty.Trans` no longer require a\n  `ScottyError` constraint, since `ExceptT`
  does not require an `Error`\n  constraint (unlike `ErrorT`).\n\n* Added support
  for OPTIONS routes via the `options` function [alvare]\n\n* Add `scottySocket` and
  `scottySocketT`, exposing Warp Unix socket support\n  [hakujin]\n\n* `Parsable`
  instance for lazy `ByteString` [tattsun]\n\n* Added streaming uploads via the `bodyReader`
  function, which retrieves chunks\n  of the request body. [edofic]\n  - `ActionEnv`
  had a `getBodyChunk` field added (in\n    `Web.Scotty.Internal.Types`)\n  - `RequestBodyState`
  and `BodyPartiallyStreamed` added to\n    `Web.Scotty.Internal.Types`\n\n* `jsonData`
  uses `aeson`'s `eitherDecode` instead of just `decode` [k-bx]\n\n## 0.9.1\n\n* text/html/json
  only set Content-Type header when not already set\n\n## 0.9.0\n\n* Add `charset=utf-8`
  to `Content-Type` for `text`, `html` and `json`\n\n* Assume HTTP status 500 for
  `defaultHandler`\n\n* Remove deprecated `source` method.\n\n* No longer depend on
  conduit.\n\n## 0.8.2\n\n* Bump `aeson` upper bound\n\n* Fix `mtl` related deprecation
  warnings\n\n## 0.8.1\n\n* Export internal types\n\n* Added `MonadBase`, `MonadTransControl`
  and `MonadBaseControl` instances for\n  `ActionT`\n\n## 0.8.0\n\n* Upgrade to wai/wai-extra/warp
  3.0\n\n* No longer depend on conduit-extra.\n\n* The `source` response method has
  been deprecated in favor\n  of a new `stream` response, matching changes in WAI
  3.0.\n\n* Removed the deprecated `reqHeader` function.\n\n## 0.7.3\n\n* Bump upper
  bound for case-insensitive, mtl and transformers.\n\n## 0.7.2\n\n* Bump lower bound
  on conduit, add conduit-extra to cabal build depends.\n\n## 0.7.1\n\n* Default warp
  settings now use `setFdCacheDuration 0` to work around a warp\n  issue where file
  changes are not getting picked up.\n\n## 0.7.0\n\n* Renamed `reqHeader` to `header`.
  Added `headers` function to get all headers.\n\n* Changed `MonadIO` instance for
  `ActionT` such that IO exceptions are lifted\n  into `ScottyError`s via `stringError`.\n\n*
  Make `Bool` parsing case-insensitive. Goal: support both Haskell's True/False\n
  \ and Javascript's true/false. Thanks to Ben Gamari for suggesting this.\n\n* Bump
  `aeson`/`text` upper bounds.\n\n* Bump `wai`/`wai-extra`/`warp` bounds, including
  new lower bound for `warp`, which fixes a security issue related to Slowloris protection.\n\n##
  0.6.2\n\n* Bump upper bound for `text`.\n\n## 0.6.1\n\n* Match changes in `wai-extra`.\n\n##
  0.6.0\n\n* The Scotty transformers (`ScottyT` and `ActionT`) are now parameterized\n
  \ over a custom exception type, allowing one to extend Scotty's `ErrorT`\n  layer
  with something richer than `Text` errors. See the `exceptions`\n  example for use.
  `ScottyM` and `ActionM` remain specialized to `Text`\n  exceptions for simplicity.\n\n*
  Both monads are now instances of `Functor` and `Applicative`.\n\n* There is a new
  `cookies` example.\n\n* Internals brought up-to-date with WAI 2.0 and related packages.\n\n##
  0.5.0\n\n* The Scotty monads (`ScottyM` and `ActionM`) are now monad transformers,\n
  \ allowing Scotty applications to be embedded in arbitrary `MonadIO`s.\n  The old
  API continues to be exported from `Web.Scotty` where:\n\n        type ScottyM =
  ScottyT IO\n        type ActionM = ActionT IO\n\n  The new transformers are found
  in `Web.Scotty.Trans`. See the\n  `globalstate` example for use. Special thanks
  to Dan Frumin (co-dan)\n  for much of the legwork here.\n\n* Added support for HTTP
  PATCH method.\n\n* Removed lambda action syntax. This will return when we have a
  better\n  story for typesafe routes.\n\n* `reqHeader :: Text -> ActionM Text` ==>\n
  \ `reqHeader :: Text -> ActionM (Maybe Text)`\n\n* New `raw` method to set body
  to a raw `ByteString`\n\n* Parse error thrown by `jsonData` now includes the body
  it couldn't parse.\n\n* `header` split into `setHeader` and `addHeader`. The former
  replaces\n  a response header (original behavior). The latter adds a header (useful\n
  \ for multiple `Set-Cookie`s, for instance).\n"
changelog-type: markdown
description: "# Scotty [![Hackage](http://img.shields.io/hackage/v/scotty.svg)](https://hackage.haskell.org/package/scotty)
  [![Stackage Lts](http://stackage.org/package/scotty/badge/lts)](http://stackage.org/lts/package/scotty)
  [![Stackage Nightly](http://stackage.org/package/scotty/badge/nightly)](http://stackage.org/nightly/package/scotty)
  [![CI](https://github.com/scotty-web/scotty/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/scotty-web/scotty/actions/workflows/haskell-ci.yml)\n\nA
  Haskell web framework inspired by Ruby's Sinatra, using WAI and Warp.\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\nimport Web.Scotty\n\nmain = scotty 3000 $\n    get
  \"/:word\" $ do\n        beam <- pathParam \"word\"\n        html $ mconcat [\"<h1>Scotty,
  \", beam, \" me up!</h1>\"]\n```\n\nScotty is the cheap and cheerful way to write
  RESTful, declarative web applications.\n\n* A page is as simple as defining the
  verb, URL pattern, and Text content.\n* It is template-language agnostic. Anything
  that returns a Text value will do.\n* Conforms to the [web application interface
  (WAI)](https://github.com/yesodweb/wai/).\n* Uses the very fast Warp webserver by
  default.\n\nAs for the name: Sinatra + Warp = Scotty.\n\n## Examples\n\nRun /basic.hs
  to see Scotty in action:\n\n```bash\nrunghc examples/basic.hs\n```\n`Setting phasers
  to stun... (port 3000) (ctrl-c to quit)`\n\nOr equivalently with [`stack`](https://docs.haskellstack.org/en/stable/):\n\n```bash\nstack
  exec -- scotty-basic\n```\n\nOnce the server is running you can interact with it
  with curl or a browser:\n\n```bash\ncurl localhost:3000\n```\n`foobar`\n\n```bash\ncurl
  localhost:3000/foo_query?p=42\n```\n`<h1>42</h1>`\n\n\nAdditionally, the `examples`
  directory shows a number of concrete use cases, e.g. \n\n* [exception handling](./examples/exceptions.hs)\n*
  [global state](./examples/globalstate.hs)\n* [configuration](./examples/reader.hs)\n*
  [cookies](./examples/cookies.hs)\n* [file upload](./examples/upload.hs)\n* and more\n\n##
  More Information\n\nTutorials and related projects can be found in the [Scotty wiki](https://github.com/scotty-web/scotty/wiki).\n\n##
  Contributing\n\nFeel free to ask questions or report bugs on the [Github issue tracker](https://github.com/scotty-web/scotty/issues/).\n\nGithub
  issues are now (September 2023) labeled, so newcomers to the Haskell language can
  start with `easy fix` ones and gradually progress to `new feature`s, `bug`s and
  `R&D` :)\n\n## Package versions\n\nScotty adheres to the [Package Versioning Policy](https://pvp.haskell.org/).\n\n\n##
  FAQ\n\n* Fails to compile regex-posix on Windows\n    * If you are using stack,
  add the following parameters to `stack.yaml`:\n        * ```yaml\n            extra-deps:\n
  \           - regex-posix-clib-2.7\n            flags:\n              regex-posix:\n
  \               _regex-posix-clib: true\n          ```\n    * If you are using cabal,
  update the `constraints` section of `cabal.project.local` as follows:\n        *
  ```\n          constraints:\n            regex-posix +_regex-posix-clib \n          ```\n\n###
  Contributors\n\n<a href=\"https://github.com/scotty-web/scotty/graphs/contributors\">\n
  \ <img src=\"https://contrib.rocks/image?repo=scotty-web/scotty\" />\n</a>\n\n\n#
  Copyright \n(c) 2012-Present, Andrew Farmer and Scotty contributors\n"
description-type: markdown
hash: 9e8f71154a44a4d0c91146a1a792a475fff25af2fd26ad36ad744155ce4d9b22
homepage: https://github.com/scotty-web/scotty
latest: '0.22'
license-name: BSD-3-Clause
maintainer: The Scotty maintainers
synopsis: Haskell web framework inspired by Ruby's Sinatra, using WAI and Warp
test-bench-deps:
  async: '>=0'
  base: '>=0'
  bytestring: '>=0'
  directory: '>=0'
  doctest: '>=0.20.1'
  hspec: '>=2 && <3'
  hspec-wai: '>=0.6.3'
  http-client: '>=0'
  http-types: '>=0'
  lifted-base: '>=0'
  lucid: '>=0'
  mtl: '>=0'
  network: '>=0'
  resourcet: '>=0'
  scotty: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  wai: '>=0'
  wai-extra: '>=0'
  weigh: '>=0.0.16 && <0.1'
