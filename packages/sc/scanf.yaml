all-versions:
- 0.1.0.0
author: Li-yao Xia
basic-deps:
  base: '>=4.7 && <5'
  template-haskell: '>=0'
changelog: ''
changelog-type: ''
description: |
  # Haskell scanf [![Build Status](https://travis-ci.org/Lysxia/scanf.svg?branch=master)](https://travis-ci.org/Lysxia/scanf)

  A lightweight library for one-off parsing and printing.

  ```haskell
  scanf [fmt|%d lazy %s and %d strict %s|]
        "3 lazy functions and 2 strict fields"
    = Just (3 :+ "functions" :+ 2 :+ "fields" :+ ())
  ```

  Quasiquotes are optional. Format strings can also be defined with pure
  Haskell combinators.

  ```haskell
  printf (fmt_ (int . " lazy " % string . " and " % int . " strict " % string)
         (8 :+ "dogs" :+ 9 :+ "cats" :+ ())
    = "8 lazy dogs and 9 strict cats"
  ```

  With quasiquotes, the following conversion strings are supported:

  - `%d`: signed integer (`Int`)
  - `%l`: signed integer (`Integer`, unbounded)
  - `%f`: floating point (`Double`)
  - `%s`: string of non-space characters (`String`)
  - `%c`: single character (`Char`)
  - `%%`: parse/print a literal percent character

  N.B.: in `scanf`, spaces in the format string match any number of whitespace
  character until the next nonspace character.

  ---

  Though it also offers a `printf` function, *scanf* is thus named as
  there are only few other preexisting Haskell implementations,
  whereas many Haskell *printf* libraries can already be found on Hackage.

  Similar to:

  - [xformat](https://hackage.haskell.org/package/xformat) (scanf and printf)
  - [fmt](https://hackage.haskell.org/package/fmt) (printf)
  - [formatting](https://hackage.haskell.org/package/formatting) (printf)
description-type: markdown
hash: a4d760fc31120be424a3527553336679493882d7fac78c148cb8797a67c35f36
homepage: https://github.com/Lysxia/scanf#readme
latest: 0.1.0.0
license-name: MIT
maintainer: lysxia@gmail.com
synopsis: Easy and type-safe format strings for parsing and printing
test-bench-deps:
  base: '>=0'
  scanf: '>=0'
