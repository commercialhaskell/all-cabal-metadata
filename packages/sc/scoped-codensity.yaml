all-versions:
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
author: mangoiv
basic-deps:
  async: <2.3
  base: <5
  temporary: <1.4
  text: <2.2
  transformers: <0.7
  unliftio: <0.3
  unliftio-core: <0.3
changelog: |
  # Revision history for scoped-codensity

  ## 0.1.0.0 -- 2024-12-17

  * Initial implementation of the Scoped monad and a couple of modules providing some useful functions for working with it

  ## 0.1.0.1 -- 2024-12-17

  * Fix a bug where I forgot to remove debug print statements from the file module

  ## 0.1.0.2 -- 2024-12-18

  * Add the `foreignPtr` and `wrapScoped` functions to the `Ptr` module
  * Add @since annotations

  ## 0.2.0.0 -- 2024-12-19

  - rename functions in `Ptr` module to names that have less clashes
  - provide a new flag `-fcore` that imports only a minimal dependency set
  - don't use uninterruptible masks in cleanups in `bracket` and `finally`
changelog-type: markdown
description: |
  ![ci](https://ci.mangoiv.com/api/badges/13/status.svg)
  [![hackage](https://img.shields.io/hackage/v/scoped-codensity.svg)](https://hackage.haskell.org/package/scoped-codensity)

  # scoped-codensity

  This implements a Monad just like `Codensity` from the `kan-extensions` package, but it uses a skolem trap just like the `ST s` monad to track resources allocated in the monad.

  The package wraps around different "scoped" resources that cannot escape a `scoped` block and are safely deallocated when the block is left.

  ## How to make your own resources safe

  - for acquiring your resources:
    - use the `bracketScoped` function where possible
    - if you're using the raw `UnsafeMkScoped` constructor, make sure, the scope of your `ScopedResource` adheres to the scope you're in, by making your function return something of the shape `Scoped (s : ss) m (ScopedResource s)`
  - of working with your resources:
    - if you want to use the resource only in the same scope that it was created in, your function should be of the form: `ScopedResource s -> ... -> Scoped (s : ss) m a`
    - if you want to use the resource in the same scope and scopes that are contained within the scope (this is the more common option), relate the scope of the resource to the scopes of the `Scoped` monad, by specifying `s :< ss` like so:
      `(s :< ss) => ScopedResource s -> .. -> Scoped ss m a`
  - make sure that your actions are always in the `Scoped` monad and your resources always relate to the scopes that the monad is parametrized over, otherwise you might escape resources
description-type: markdown
hash: 23beae4a0b74894edd0a3b2e3e99e11f82645783e6f549055bdf62f1304b12f1
homepage: https://git.mangoiv.com/mangoiv/scoped-codensity
latest: 0.2.0.0
license-name: AGPL-3.0-or-later
maintainer: contact@mangoiv.com
synopsis: CPS resource allocation but as a Monad and completely safe
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  scoped-codensity: '>=0'
  transformers: '>=0'
  unliftio: '>=0'
