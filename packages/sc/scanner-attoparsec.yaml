all-versions:
- '0.1'
- '0.2'
author: Yuras Shumovich
basic-deps:
  attoparsec: '>=0.14.1'
  base: <5
  bytestring: '>=0'
  scanner: <0.4
changelog: |2

  0.2

  * add toAtto


  0.1

  * initial implementation
changelog-type: markdown
description: |
  # scanner-attoparsec
  Inject attoparsec parser with backtracking into non-backtracking scanner

  [![Haskell CI](https://github.com/Yuras/scanner-attoparsec/actions/workflows/build.yml/badge.svg)](https://github.com/Yuras/scanner-attoparsec/actions/workflows/build.yml)

  Backtracking kills performance, so scanner package doesn't support it.
  But sometimes you just need it. E.g. you have a mostly non-backtracking
  parser, but a small bit of its grammar is too complex to transform it
  to non-backtracking form. In that case you can inject a backtracking
  attoparsec parser into otherwise non-backtracking scanner.

  See also http://hackage.haskell.org/package/scanner
description-type: markdown
hash: e900f2254fd51ae6b18f2daaf702eb353bd6780b81aad7ef1f90cc29a11f7eb5
homepage: https://github.com/Yuras/scanner-attoparsec
latest: '0.2'
license-name: BSD-3-Clause
maintainer: shumovichy@gmail.com
synopsis: Inject attoparsec parser with backtracking into non-backtracking scanner
test-bench-deps:
  attoparsec: '>=0'
  base: <5
  bytestring: '>=0'
  hspec: '>=0'
  scanner: '>=0'
  scanner-attoparsec: '>=0'
