all-versions:
- 0.1.0.0
author: Tom Lippincott
basic-deps:
  aeson: '>=1.2.4.0'
  base: '>=4.7 && <5'
  bimap: '>=0.3.3'
  bytestring: '>=0.10.10.1'
  containers: '>=0.5.10.2'
  gogol: ==0.5.0
  gogol-sheets: ==0.5.0
  lens: '>=4.16'
  mime-mail: '>=0.5.0'
  mtl: ==2.2.2
  optparse-generic: '>=1.3.0'
  random: '>=1.1'
  sbv: '>=8.3'
  scheduling: '>=0'
  servant: '>=0'
  text: '>=1.2.2'
  time: '>=1.9.2'
changelog: ''
changelog-type: ''
description: "# scheduling - interview management utility for CLSP recruitment weekend\n\nThis
  code base produces a command-line utility for managing the interview\nschedules
  of the CLSP recruitment weekend.  This involves manipulating\nGoogle spreadsheets,
  and solving constraint-satisfaction problems based\non faculty preferences, availability,
  and other considerations.  Under\nthe hood it employs the Microsoft Z3 theorem prover
  to find optimal\nsolutions to problems formulated via the SBV library.  The interactions
  \nwith Google APIs are accomplished with the gogol-* libraries and heavy\nuse of
  lenses.\n\n## Building and running the repository\n\nAfter using `ghcup` to install
  and set a recent version (e.g. 9.X) of\nGHC and Cabal, the code can be built with:\n\n```\n$
  cabal build\n```\n\nand the tool invoked with:\n\n```\n$ cabal exec -- scheduler
  OPTIONS\n```\n\n## Preparing a spreadsheet and using the scheduler\n\nThe spreadsheet
  should allow \"anyone with the link\" to edit, and the\nkey (the long random path
  component in the URL) gets passed to the \nscheduler tool with the `--access` switch.
  \ The tool has two primary \nmodes, `init` and `solve`, that each rely on information
  being in \nparticular tabs, and create (or overwrite) a handful of others: outside\nof
  these, it should not modify anything (though bugs are possible, and\ninteractions
  with e.g. formulae have not been considered).\n\nThe basic workflow is to manually
  create a \"Prospects\" and \"Interviewers\"\ntab, each with \"First\", \"Last\",
  and \"Email\" columns, and interviewers with\na \"Zoom\" column (in any order, and
  additional columns will be ignored),\nand invoke the tool with:\n\n```\ncabal exec
  -- scheduler init --access KEY\n```\n\nThis generates the \"Prospect Availability\",
  \"Interviewer Availability\", and\n\"Interviewer Preferences\" tabs, which can then
  be filled in by the relevant\nparties.  *Note that running the command with the
  `--force` switch will \noverwrite the tabs, so it may be wise to edit-protect them
  once information\nhas been entered.*  Then, invoke the tool with:\n\n```\ncabal
  exec -- scheduler solve --access KEY\n```\n\nThe tool will attempt to satisfy the
  interviewer preferences using the \navailability of both groups, and write it's
  best solution to the tabs\n\"Interviewer Schedule\" and \"Prospect Schedule\".\n\n"
description-type: markdown
hash: bc36465103cc40090f4ce9eb34250adc009431aed31f5622817c0ca1d6d9ed31
homepage: https://github.com/TomLippincott/scheduling#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: tom.lippincott@jhu.edu
synopsis: An interview scheduler using constraint satisfaction and Google Sheets
test-bench-deps: {}
