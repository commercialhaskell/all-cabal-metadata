all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
author: aiya000
basic-deps:
  base: '>=4.7 && <5'
  safe-exceptions: '>=0'
  template-haskell: '>=0'
changelog: ''
changelog-type: ''
description: "# :diamonds: throwable-exceptions :diamonds:\n[![Build Status](https://travis-ci.org/aiya000/hs-throwable-exceptions.svg?branch=master)](https://travis-ci.org/aiya000/hs-throwable-exceptions)\n[![Hackage](https://img.shields.io/badge/hackage-v0.1.0.x-blue.svg)](https://hackage.haskell.org/package/throwable-exceptions)\n\n`throwable-exceptions`
  gives an easy way to create the data types of `Exception` instance with [TemplateHaskell](https://wiki.haskell.org/Template_Haskell),\nand
  gives simple data types of `Exception` instance with its value constructor,\nfor
  your haskell project :dog:\n\n- `throwable-exceptions` is available in\n    - [Hackage](https://hackage.haskell.org/package/throwable-exceptions)\n
  \   - [stackage (nightly build)](https://www.stackage.org/nightly-2017-06-18/package/throwable-exceptions)\n\n\n##
  :books: Document is available in here :books:\n\n- [throwable-exceptions - Hackage](https://hackage.haskell.org/package/throwable-exceptions)\n\n\n#
  :muscle: Why should we use this ? :muscle:\nWe want to throw some exception frequently,
  but the mostly throwable exceptions are not given by `base`.  \n`throwable-exceptions`
  complements it :+1:\n\n\n## Examples\n\n- vvv  The summary of the exact examples
  is available here  vvv\n    - [test/MainTest.hs](https://github.com/aiya000/hs-throwable-exceptions/blob/master/test/MainTest.hs)\n\n-
  - -\n\nYou can create a data type of `Exception` instance by **a line** :exclamation:\n\n```haskell\n{-#
  LANGUAGE TemplateHaskell #-}\nmodule Main where\n\n-- This is same as\n--\n-- data
  MyException a = MyException\n--  { myExceptionCause :: String\n--  , myExceptionClue
  \ :: a\n--  } deriving (Show, Typeable)\n-- instance (Typeable a, Show a) => Exception
  (MyException a)\n--\ndeclareException \"MyException\" [\"MyException\"]\n\n-- This
  is same as\n--\n-- data TwoException a =\n--  FirstException\n--    { firstExceptionCause
  :: String\n--    , firstExceptionClue  :: a\n--    } |\n--  SecondException\n--
  \   { secondExceptionCause :: String\n--    , secondExceptionClue  :: a\n--    }
  deriving (Typeable)\n--\n-- instance Show a => (TwoException a) where\n--  ...\n--
  instance (Typeable a, Show a) => Exception (TwoException a)\n--\ndeclareException
  \"TwoException\" [\"FirstException\", \"SecondException\"]\n\nmain :: IO ()\nmain
  = do\n  print $ ([1..4] `at` 5 :: Either SomeException Int)\n  print $ MyException
  \"hi\" 10\n  print $ myException \"poi\"\n  print $ firstException \"chino\"\n  print
  $ secondException \"cocoa\"\n```\n\n- the completely example\n    - in [example/Main.hs](https://github.com/aiya000/hs-throwable-exceptions/blob/master/example/Main.hs)\n\n-
  - -\n\nSeveral exceptions are defined by default :smile:\n\nFor example, [IOException](https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Exception.html#t:IOException)'s
  value constructor is not given :cry:  \nBut you can use `Control.Exception.Throwable.IOException'`
  instead :dog:\n\n```haskell\nmodule Main where\n\nmain :: IO ()\nmain = do\n  throwM
  $ IOException' \"oops!\" \"in main\"\n  throwM $ ioException' \"oops!\"\n```\n\n\n#
  :+1:\nPR is welcome !\n"
description-type: markdown
hash: 7f7bc7792dc0de7a2ddc4c2ddc72973557a203c3ef5addc7f651e7d7c8efc161
homepage: https://github.com/aiya000/hs-throwable-exceptions#README.md
latest: 0.1.0.9
license-name: MIT
maintainer: aiya000.develop@gmail.com
synopsis: throwable-exceptions gives the easy way to throw exceptions
test-bench-deps:
  base: '>=0'
  doctest: '>=0'
  either: '>=0'
  safe-exceptions: '>=0'
  silently: '>=0'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  throwable-exceptions: '>=0'
