all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.0.6
- 0.2.0.7
- 0.2.0.8
- 0.2.0.9
- 0.2.0.10
- 0.2.0.11
- 0.2.0.12
- 0.2.0.13
- 0.2.0.14
- 0.2.0.15
- 0.2.0.16
- 0.3.0
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.4.1
- 0.5.5
- 0.5.6
- 0.5.6.1
author: Jose Iborra
basic-deps:
  base: '>=4.7 && <5'
  bifunctors: '>=0'
  casing: '>=0'
  containers: '>=0.5.9'
  generics-sop: '>=0'
  profunctors: '>=0'
  semigroups: '>=0'
  text: '>=0'
  threepenny-gui: '>0.7'
changelog: "# 0.5.6.1 (2018-10-07)\n    * Semigroup => Monoid\n# 0.5.6 (2017-10-29)\n
  \   * Add editors for collections\n    * Add an editor for `Text`\n# 0.5.5 (2017-09-03)\n
  \   * Dropped `Default` constraint requisite and `data-default` dependency.\n    *
  As a result, `editorGenericSimple` is replaced with `editorGeneric`.\n    * Improved
  haddocks and README.\n    * Cleaned up module export lists.\n    * Renamed Usage
  to Purpose and the Value constructor to Data. \n    * Renamed `editorGenericSimpleBi`
  to `editorGenericBi`.\n# 0.5.4 (2017-08-28)\n    * Generic derivation of `editor`
  for dual purpose datatypes.\n# 0.5.3 (2017-08-28)\n    * Generic derivation for
  `render`.\n    * Dropped dependency on the lens package.\n    * Added a new example
  CRUD exercising the Biapplicative interface.\n    * Fixed building of examples with
  Cabal 2.\n    * Changes to the validation module type signatures.\n# 0.5.2 (2017-08-13)\n
  \   * Name changes:\n      - `EditorFactory` is now `Editor`.\n      - `Editor`
  is now `GenericWidget`.\n    * Added a module with utilities for doing data validation.\n#
  0.5.1 (2017-07-30)\n    * Fix a build issue with GHC 8.2.1\n# 0.5.0 (2017-07-30)\n
  \   This is a major release with lots of internal rewrites and new features:\n    *
  Introduced monoidal layout builders like `Columns` for easier layout of\n      `field`
  style editors. Generic editors do not yet take advantage of this,\n      but in
  the future they will via metadata.\n    * Introduced a `Biapplicative` interface
  for defining editors with richly\n      typed widgets. This is quite experimental
  and only record types are\n      supported, examples/Person.hs contains an example.\n
  \   * Reorganized module and data type structure. The main changes are:\n      -
  `EditorDef` no longer exists.\n      - `Editor` has been generalized and now exposes
  the widget type.\n      - `EditorFactory` is now a `Biapplicative` but no longer
  has a `Profunctor` instance.\n# 0.4.1 (2017-07-13)\n    * Improved the rendering
  of constructors in generic sum editors\n# 0.4.0 (2017-07-13)\n    * Fixed a bug
  in the layout engine\n    * Dropped editorDefSetup\n    * Exposed the Layout primitives\n#
  0.3.0 (2017-07-13)\n    * Version bump required to comply with the Haskell PvP,
  as the recent layout changes\n      were breaking changes due to deleted constructors.\n#
  0.2.0.16 (2017-07-10)\n    * Improvements to the layout engine to always produce
  a grid. Experimental.\n# 0.2.0.15 (2017-07-10)\n    * Expose Vertically and Horizontally
  for use with ApplicativeDo\n# 0.2.0.14 (2017-07-01)\n    * Improved rendering of
  field names in generic editors.\n# 0.2.0.13 (2017-06-22)\n    * Added `liftEditor`
  to expose the underlying `Element` of an editor.\n      This enables setting attributes
  in the element, including class and id.\n# 0.2.0.12 (2017-06-21)\n    * Export `EditorDef`
  and `EditorFactory` constructors to allow for\n      wrapping of custom controls\n#
  0.2.0.11 (2017-06-10)\n    * Documentation only release.\n# 0.2.0.10 (2017-05-23)\n
  \   * Nested grids. All layouts are now grid based.\n# 0.2.0.9 (2017-05-23)\n    *
  Detect grid layouts and render them accordingly \n# 0.2.0.8 (2017-05-21)\n    *
  Bug fixes\n# 0.2.0.7 (2017-05-20)\n    * Added `editorSelection`.\n# 0.2.0.6 (2017-05-15)\n
  \   * Fix the `Editable` instance for `Identity` and remove reexports.\n# 0.2.0.5
  (2017-05-14)\n\n\t* Add `editorGeneric` and `editorGenericSimple` for types with
  generics-sop instances.\n\tThe latter is only for record and newtypes, whereas the
  former supports also\n\tUnion types, but comes with additional type class constraints.\n\t*
  Give `Editable` default implementations for generic types.\n"
changelog-type: markdown
description: "[![Travis Build Status](https://travis-ci.org/pepeiborra/threepenny-editors.svg)](https://travis-ci.org/pepeiborra/threepenny-editors)\n[![Hackage](https://img.shields.io/hackage/v/threepenny-editors.svg)](https://hackage.haskell.org/package/threepenny-editors)\n[![Stackage
  Nightly](http://stackage.org/package/threepenny-editors/badge/nightly)](http://stackage.org/nightly/package/threepenny-editors)\n\n#
  threepenny-editors \n\n## Description\nThreepenny-editors is a library for constructing
  of widgets for editing algebraic datatypes in [threepenny-gui](http://hackage.haskell.org/package/threepenny-gui).
  An editor factory is a function `Behaviour outer -> (widget, Tidings inner)`. The
  library introduces an abstraction `Editor` around these functions which allows treat
  them as first class entities, improving compositionality and applicability. Moreover,
  the generic functions provided help automating much of the boilerplate required
  for the definitions.\n\nMore concretely:\n\n1. `Editor outer widget inner` is an
  factory to create editors for a type `inner` inside a datatype `outer` implemented
  by a `widget`. \n2. `widget` must be a `Renderable` type. `Renderable` generalizes
  the `Widget` class from threepenny-gui with the ability to perform layout from the
  Haskell side.\n3. Once `create`d, an `Editor` yields a tuple of `Widget` and `Tidings`,
  to be composed in a threepenny-gui app.\n4. The `Editable` type class associates
  a type with its `Editor`. Instances are provided for most primitive types.\n\n`Editor`s
  have `Biapplicative` and `Profunctor` instances. `Biapplicative` allows to compose
  editors on both their `widget` and their `inner` structure, whereas `Profunctor`
  allows to apply an `inner` editor to an `outer` datatype by focusing the editor
  into a substructure.\n\nThe library provides generic functions (using [generics-sop](http://hackage.haskell.org/package/generics-sop))
  to generate editors and renderables:\n\n- `editorGeneric` - A generic editor for
  standard datatypes where all the fields are `Editable` that produces a vertical
  layout.\n- `editorGenericBi` - A generic editor for dual purpose datatypes where
  all the fields are `Editable`.\n- `renderGeneric` - A generic render for single
  constructor dual purpose datatypes that produces a vertical layout.\n\nA dual purpose
  datatype is a type constructor where the type argument has kind `Purpose`, with
  two possible instantiations: `Data` or `Edit`. Instantiating with `Data` yields
  a container of data, i.e. a normal datatype, whereas instantiating with `Edit` yields
  a container of widgets. This allows to generate data and editor from the same definition
  when the shape of the editor matches the shape of the data.\n\n## Example\n\nLet's
  start with something simple, obtaining an `Editor` for a newtype:\n\n```\nnewtype
  Brexiteer = Brexiteer {unBrexiteer::Bool} deriving (Bounded, Enum, Eq, Read, Show,
  Ord, Generic)\n```\n\nSince we already have an `Editable` instance for `Bool` that
  displays a checkbox, \nwe can obtain an `Editable` instance for `Brexiteer` for
  free:\n\n```\nderiving instance Editable Brexiteer\n```\n\nWe can also wrap the
  existing `Bool` editor manually using `dimapE`:\n\n```\neditorBrexiteer = dimapE
  unBrexiteer Brexiteer (editor :: Editor Bool Element Bool)\n```\n\nThe type annotation
  above is only for illustrative purposes.\n\nPerhaps we are not happy with the default
  checkbox editor and want to have a different UI?\nWe can use a text box:\n\n```\neditorBrexiteerText
  :: Editor (Maybe Brexiteer) TextEntry (Maybe Brexiteer)\neditorBrexiteerText = editorReadShow\n```\n\nOr
  a combo box:\n\n```\neditorBrexiteerChoice :: Editor (Maybe Brexiteer) (ListBox
  Brexiteer) (Maybe Brexiteer)\neditorBrexiteerChoice = editorEnumBounded (pure string)\n```\n\nLet's
  move on to a union type now:\n\n```\ndata Education\n  = Basic\n  | Intermediate\n
  \ | Other_ String\n  deriving (Eq, Read, Show)\n```\n\nWe could define an editor
  with `editorReadShow`, but maybe we want a more user\nfriendly UI that displays
  a choice, and only when `Other` is selected displays a free form\ntext input. This
  can be achieved with the `editorSum` combinator, which takes a list of choices\nand
  an editor for each choice. While `editorSum` is easy enough to use,\n`editorGeneric`
  removes away all the boilerplate for us:\n\n```\nimport Generics.SOP.TH\n\nderivingGeneric
  ''Education\n\n-- Derive an Editable instance that uses editorGeneric\ninstance
  Editable Education\n```\n\nMoving on, let's look at how to compose multiple editors
  together:\n\n```\ndata Person = Person\n  { education           :: Education\n  ,
  firstName, lastName :: String\n  , age                 :: Maybe Int\n  , brexiteer
  \          :: Brexiteer\n  , status              :: LegalStatus\n  }\n  deriving
  (Generic, Show)\n```\n\nThe `field` combinator encapsulates the common pattern of
  pairing a label and a base editor\nto build the editor for a record field:\n\n```\nfield
  :: String -> (out -> inn) -> Editor inn a -> Editor out a\nfield name f e = string
  name *| dimap f id e\n```\n\nWhere `*|` prepends a UI Element to an Editor horizontally:
  \n```\n(*|) :: UI Element -> Editor s w a -> Editor s w a\n```\n\nArmed with `field`
  and applicative composition (vertical '-*-' and horizontal '|*|'),\nwe define the
  editor for `Person` almost mechanically:\n\n```\neditorPerson :: Editor Person Person\neditorPerson
  =\n    (\\fn ln a e ls b -> Person e fn ln a b ls)\n      <$> field \"First:\"     firstName
  editor\n      -*- field \"Last:\"      lastName editor\n      -*- field \"Age:\"
  \      age editor\n      -*- field \"Education:\" education editorEducation\n      -*-
  field \"Status\"     status (editorJust $ editorSelection (pure [minBound..]) (pure
  (string.show)))\n      -*- field \"Brexiter\"   brexiteer editor\n```\n\nThe only
  bit of ingenuity in the code above is the deliberate reordering of the fields.\n\nIt
  is also possible to generically derive the editor for person in the same way as
  before, in which\ncase the labels are taken from the field names, and the order
  from the declaration order.\n\nIn addition to the simple layout combinators, `threepenny-editors`
  supports the more flexible monoidal layout builders.\n`Columns` is such builder
  which allows to lay out editors in multiple columns:\n\n```\n{-# LANGUAGE ApplicativeDo
  #-}\neditorPersonColumns :: Editor Person Columns Person\neditorPersonColumns =
  do\n      firstName <- fieldLayout Next \"First:\"     firstName editor\n      lastName
  \ <- fieldLayout Next \"Last:\"      lastName editor\n      age       <- fieldLayout
  Next \"Age:\"       age editor\n      education <- fieldLayout Break \"Education:\"
  education editorEducation\n      status    <- fieldLayout Next \"Status\"     status
  (editorJust $ editorSelection (pure [minBound..]) (pure (string.show)))\n      brexiteer
  <- fieldLayout Next \"Brexiter\"   brexiteer editor\n      return Person{..}\n```\n\nIn
  all the editors created so far, the widget type was `Layout` (`Columns` is just
  a newtype of `Layout`). Because `Layout` is opaque,\nthere is no way to access the
  field widgets. This can be a problem if we want to set attributes on the fields,
  etc. To do that,\nwe would need to define a data type to capture all the field editors,
  and use in place of `Layout`. This is what the `Biapplicative`\ninterface allows
  us to do.\n\nBut moreover, all the editors defined so far have one thing in common:
  they have the same shape as the datatype they are editing. \nWe can take advantage
  of this to define a datatype with a dual purpose, which can be used to either hold
  data, or hold widgets:\n\n```\n-- | A dual purpose data type that doubles as a value
  and as a widget depending on the type argument.\ndata PersonDual (purpose :: Purpose)
  = Person\n  { education           :: Field purpose Education\n  , firstName, lastName
  :: Field purpose String\n  , age                 :: Field purpose (Maybe Int)\n
  \ , brexiteer           :: Field purpose Brexiteer\n  , status              :: Field
  purpose LegalStatus\n  }\n\ntype Person = PersonDual Data\ntype PersonEditor = PersonDual
  Edit\n```\nThis binds the field widgets, allowing to e.g. set attributes on them.\nTo
  define a `PersonEditor`, we make use of the `Editor` `Biapplicative` instance:\n\n```\npersonEditor
  =\n    bipure Person Person\n      <<*>> dimap education id editorEducation\n      <<*>>
  dimap firstName id editor\n      <<*>> dimap lastName  id editor\n      <<*>> dimap
  age       id editor\n      <<*>> dimap brexiteer id editor\n      <<*>> dimap status
  \   id (editorJust $ editorSelection ...)\n```\n\nWhen all the fields are `Editable`
  this definition can be derived via `editorGenericBi`.\n\nNow the actual layout is
  define separately from the editor composition, \nusing standard threepenny-gui primitives:\n\n```\ninstance
  Renderable PersonEditor where\n  render Person{..} = grid\n   [ [string \"First:\",
  element firstName, string \"Age:\", element age]\n   , [string \"Last:\", element
  lastName, string \"Brexiteer:\", element brexiteer]\n   , [string \"Status:\", element
  status, string \"Education:\", element education]\n   ]\n```\n\nOnce again `render`
  can be derived via `renderGeneric`, which produces a single column vertical layout.\n\nThe
  complete code for the dual purpose `Person` example can be found below:\n```\n{-#
  LANGUAGE DataKinds            #-}\n{-# LANGUAGE FlexibleInstances    #-}\n{-# LANGUAGE
  KindSignatures       #-}\n{-# LANGUAGE RecursiveDo          #-}\n{-# LANGUAGE ScopedTypeVariables
  \ #-}\n{-# LANGUAGE TemplateHaskell      #-}\n{-# LANGUAGE TypeFamilies         #-}\n{-#
  LANGUAGE TypeSynonymInstances #-}\n{-# LANGUAGE UndecidableInstances #-}\n\nimport
  \          Control.Monad\nimport           Generics.SOP.TH\nimport           Graphics.UI.Threepenny\nimport
  \          Graphics.UI.Threepenny.Editors\n\ndata Education\n  = Basic\n  | Intermediate\n
  \ | Other String\n\ninstance Editable Education\n\nnewtype Brexiteer = Brexiteer
  Bool\n\ninstance Editable Brexiteer where editor = editorGeneric\n\ndata LegalStatus\n
  \ = Single\n  | Married\n  | Divorced\n  | Widowed\n\ninstance Editable LegalStatus\n\ndata
  PersonDual (purpose :: Purpose) = Person\n  { education           :: Field purpose
  Education\n  , firstName, lastName :: Field purpose String\n  , age                 ::
  Field purpose (Maybe Int)\n  , brexiteer           :: Field purpose Brexiteer\n
  \ , status              :: Field purpose LegalStatus\n  }\n\ntype Person = PersonDual
  'Data\ntype PersonEditor = PersonDual 'Edit\n\ninstance Editable Person where\n
  \ type EditorWidget Person = PersonEditor\n  editor = editorGenericBi\n\ninstance
  Renderable PersonEditor where\n  render = renderGeneric\n\nderiveGeneric ''Education\nderiveGeneric
  ''Brexiteer\nderiveGeneric ''LegalStatus\nderiveGeneric ''PersonDual\n\nmain = startGUI
  defaultConfig $ \\w -> mdo\n  personE :: GenericWidget PersonEditor Person <- create
  editor personB\n  personB :: Behavior Person <- stepper (Person Basic \"\" \"\"
  Nothing (Brexiteer False) Single) (edited personE)\n\n  void $ getBody w #+ [render
  personE]\n  void $ element (firstName (widgetControl personE)) # set style [(\"background-color\",
  \"Blue\")]\n```\n"
description-type: markdown
hash: 3d2ba42908844c977a5daf2d3b9eaababb54a0f20006f4a581547e61ee818253
homepage: https://github.com/pepeiborra/threepenny-editors
latest: 0.5.6.1
license-name: BSD-3-Clause
maintainer: pepeiborra@gmail.com
synopsis: Composable algebraic editors
test-bench-deps: {}
