all-versions:
- '0.1'
- 0.1.0.1
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.0.1
- 0.4.0.2
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.1.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.5.1.4
- 0.5.1.5
- 0.5.1.6
- 0.5.1.7
- 0.5.1.8
author: |-
  Bas van Dijk <v.dijk.bas@gmail.com>
  Roel van Dijk <vandijk.roel@gmail.com>
basic-deps:
  base: '>=4.4 && <5'
  stm: '>=2.1'
changelog: ''
changelog-type: ''
description: |
  [![Hackage](https://img.shields.io/hackage/v/threads.svg)](https://hackage.haskell.org/package/threads)
  [![Build Status](https://travis-ci.org/basvandijk/threads.svg)](https://travis-ci.org/basvandijk/threads)

  This package provides functions to fork threads and wait for their
  result, whether it's an exception or a normal value.

  Besides waiting for the termination of a single thread this packages
  also provides functions to wait for a group of threads to terminate.

  This package is similar to the [threadmanager], [async] and [spawn]
  packages. The advantages of this package are:

  * Simpler API.

  * More efficient in both space and time.

  * No space-leak when forking a large number of threads.

  * Correct handling of asynchronous exceptions.

  * GHC specific functionality like [forkOnIO] and [forkIOUnmasked].

  [threadmanager]:  http://hackage.haskell.org/package/threadmanager
  [async]:          http://hackage.haskell.org/package/async
  [spawn]:          http://hackage.haskell.org/package/spawn
  [forkOnIO]:       http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Conc-Sync.html#v:forkOnIO
  [forkIOUnmasked]: http://hackage.haskell.org/packages/archive/base/latest/doc/html/GHC-Conc-Sync.html#v:forkOnIOUnmasked
description-type: markdown
hash: 834763d8b226b52565a83c9ba444b6aeaf5a46ba498d8fdf8e5474262bc7ca6f
homepage: https://github.com/basvandijk/threads
latest: 0.5.1.8
license-name: BSD-3-Clause
maintainer: |-
  Bas van Dijk <v.dijk.bas@gmail.com>
  Roel van Dijk <vandijk.roel@gmail.com>
synopsis: Fork threads and wait for their result
test-bench-deps:
  HUnit: '>=1.2.2'
  base: '>=4.4 && <5'
  concurrent-extra: '>=0.5.1'
  stm: '>=2.1'
  test-framework: '>=0.2.4'
  test-framework-hunit: '>=0.2.4'
  threads: '>=0'
