homepage: https://github.com/LeapYear/th-test-utils#readme
changelog-type: markdown
hash: d21f0e20d39f5955a906274a304525c2b1c9514898f6ab621481ed0b417d509f
test-bench-deps:
  bytestring: -any
  base: '>=4.9 && <5'
  tasty-golden: -any
  th-test-utils: -any
  th-orphans: '>=0.13.4 && <0.14'
  tasty-hunit: -any
  transformers: '>=0.5.2 && <0.6'
  tasty: -any
  template-haskell: '>=2.16 && <2.20'
maintainer: Brandon Chinn <brandon@leapyear.io>
synopsis: Utility functions for testing Template Haskell code
changelog: |
  # v1.2.1

  * Support GHC 9.4

  # v1.2.0

  * Drop support for GHC < 8.10

  # v1.1.1

  * Support GHC 9.2

  # v1.1.0

  * Rewrite with `runTestQ`, allowing for both recoverable `Q` actions and mocked `Q` actions in `IO`.

      The previous `tryQ'` function can be reimplemented as:

      ```hs
      tryQ' :: Q a -> Q (Either String a)
      tryQ' = tryTestQ unmockedState
      ```

      with the other helpers defined as before, using `tryQ'`.

  # v1.0.2

  * Support GHC 8.10

  # v1.0.1

  * Support GHC 8.8

  # v1.0.0

  Initial release:

  * Add `tryQ`, `tryQErr`, `tryQErr'` functions
basic-deps:
  base: '>=4.9 && <5'
  th-orphans: '>=0.13.4 && <0.14'
  transformers: '>=0.5.2 && <0.6'
  template-haskell: '>=2.16 && <2.20'
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.1.0
- 1.1.1
- 1.2.0
- 1.2.1
author: Brandon Chinn <brandon@leapyear.io>
latest: 1.2.1
description-type: markdown
description: |
  # th-test-utils

  [![GitHub Actions](https://img.shields.io/github/workflow/status/LeapYear/th-test-utils/CI/main)](https://github.com/LeapYear/th-test-utils/actions?query=branch%3Amain)
  [![codecov](https://codecov.io/gh/LeapYear/th-test-utils/branch/main/graph/badge.svg)](https://codecov.io/gh/LeapYear/th-test-utils)
  [![Hackage](https://img.shields.io/hackage/v/th-test-utils.svg)](https://hackage.haskell.org/package/th-test-utils)

  This package implements `tryTestQ` and related helpers in order to better test Template Haskell code. It supports returning the actual error message that [`recover` doesn't currently return](https://gitlab.haskell.org/ghc/ghc/-/issues/2340) as well as mocking out `Q` actions, so that you can run Template Haskell code at runtime.

  ## Usage

  ```haskell
  -- e.g. $(showInfo "Bool") generates a string corresponding
  -- to the reify `Info` for `Bool`.
  showInfo :: String -> Q Exp
  showInfo s = do
    mName <- lookupTypeName s
    case mName of
      Nothing -> fail $ "Unknown type: " ++ s
      Just name -> do
        info <- reify name
        lift $ show info
  ```

  ```haskell
  -- example using tasty-hunit
  main :: IO ()
  main = defaultMain $ testGroup "my-project"
    [ testCase "showInfo unmocked" $(do
        result1 <- tryTestQ unmockedState $ showInfo "Bool"
        runIO $ isRight result1 @? ("Unexpected error: " ++ show result1)

        result2 <- tryTestQ unmockedState $ showInfo "Foo"
        runIO $ result2 @?= Left "Unknown type: Foo"

        [| return () |]
      )

    , testCase "showInfo mocked success" $ do
        let state = QState
              { mode = MockQ
              , knownNames = [("Bool", ''Bool)]
              , reifyInfo = $(loadNames [''Bool])
              }

        let result1 = tryTestQ state $ showInfo "Bool"
        isRight result1 @? ("Unexpected error: " ++ show result1)

        let result2 = tryTestQ state $ showInfo "Foo"
        result2 @?= Left "Unknown type: Foo"
    ]
  ```
license-name: BSD-3-Clause
