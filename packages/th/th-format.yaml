all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
author: Moritz Clasmeier
basic-deps:
  Earley: '>=0.12.1.0 && <0.14'
  base: '>=4.7 && <5'
  haskell-src-meta: '>=0.8.0.2 && <0.9'
  template-haskell: '>=2.12.0.0 && <2.15'
  text: '>=1.2.3.0 && <1.3'
changelog: ''
changelog-type: ''
description: |
  # th-format [![Hackage version](https://img.shields.io/hackage/v/th-format.svg?label=Hackage)](https://hackage.haskell.org/package/th-format) [![Stackage version](https://www.stackage.org/package/th-format/badge/lts?label=Stackage)](https://www.stackage.org/package/th-format) [![Build Status](https://travis-ci.org/mtesseract/th-format.svg?branch=master)](https://travis-ci.org/mtesseract/th-format)

  ### About

  This is `th-format`, a Haskell package implementing support for format
  strings using Template Haskell quasi quoters. It requires the GHC
  extension `QuasiQuotes` to be enabled. Parsing is implemented using
  Earley.

  This package is BSD3 licensed.

  ### Examples

  Using `th-format`, you can use naive variable interpolation instead of
  verbosely concatenating strings manually. Thus, instead of

  ```haskell
  putStrLn $ "Client \"" ++ show client ++ "\" has requested resource \"" ++ show resource ++ "\" at date " ++ show date ++ "."
  ```

  one can directly write:

  ```haskell
  putStrLn $ [fmt|Client "$client" has requested resource "$resource" at date $date|]
  ```

  There are currently two supported ways of interpolation:

  1. Simple interpolation, as in `[fmt|Variable foo contains $foo|]`.
  1. Expression interpolation, as in `[fmt|The toggle is ${if toggle then ("on" :: Text) else "off"}|]`
description-type: markdown
hash: 76b9f64c687bd69d1ad4f0da9f40d7070d4cef7861e0b14bbbbebe09e1585657
homepage: https://github.com/mtesseract/th-format#readme
latest: 0.1.3.0
license-name: BSD-3-Clause
maintainer: mtesseract@silverratio.net
synopsis: Template Haskell based support for format strings
test-bench-deps:
  base: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  th-format: '>=0'
