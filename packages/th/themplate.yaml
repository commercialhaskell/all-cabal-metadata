all-versions:
- '0.1'
- '1.1'
- '1.2'
author: Benno Fünfstück
basic-deps:
  base: '>=4.4 && <5'
  configurator: '>=0'
  directory: '>=0'
  either: '>=0'
  errors: '>=2'
  filepath: '>=0'
  optparse-applicative: '>=0.10'
  text: '>=0'
  transformers: '>=0.2'
  transformers-compat: '>=0.3'
changelog: ''
changelog-type: ''
description: "Themplate\n=========\n\n[![Build Status](https://travis-ci.org/bennofs/themplate.png?branch=master)](https://travis-ci.org/bennofs/themplate)\n\nThis
  is a very simple program for creating project templates. \n\nInstalling Themplate\n--------------------\n\n###
  From hackage:\n\n```\n$ cabal install themplate\n```\n\n### From repository:\n\nCheckout
  the source code:\n\n```\n$ git clone https://github.com/bennofs/themplate\n$ cd
  themplate\n```\n\nBuild in a cabal sandbox and install:\n\n```\n$ cabal sandbox
  init\n$ cabal install --prefix=~/.cabal   # Install themplate executable to ~/.cabal/bin/themplate\n```\n\nUsing
  Themplate\n---------------\n\nTo use a exisiting template with themplate, just run:\n\n```\n$
  themplate init <project name> <template name>\n```\n\nThis will initialize the template
  with the given name in a new directory with the name of the project.\nTo list all
  available templates, run:\n\n```\n$ themplate list\n```\n\nConfiguration file\n------------------\n\nThe
  configuration file is read using configurator, the syntax is described [here](http://hackage.haskell.org/package/configurator-0.2.0.2/docs/Data-Configurator.html).\nThe
  options are passed to the template, so they can use patterns to include user-specific
  information. An example configuration file could look like this:\n\n```\nuser {
  \n  name = \"Benno Fünfstück\"\n  email = \"benno.fuenfstueck@gmail.com\"\n}\n\ngithub
  {\n  user = \"bennofs\"\n}\n```\n\nThis will make the options `user.name`, `user.email`
  and `github.user` available to templates.\n\nCreating templates\n------------------\n\nA
  template is just a subdirectory in `~/.themplate`. When a new project is created
  with the template, the files in that directory are\ncopied to the project directory.
  The files contents and the file names in the template can contain patterns. Patterns
  are enclosed\nin `{{` and `}}`. In a pattern, the following special forms are substituted:\n\n-
  `$$name$$` will be substituted for the value of the configuration option `name`.
  An error is thrown if the configuration option doesn't exist.\n- `??name??` will
  be substituted for the value of the configuration option `name`. If the configuration
  option doesn't exist, the pattern will\n   evaluate to the empty string.\n\nThere
  is one special configuration option, `project.name`. This will always be set to
  the current project's name. `??name??` patterns are checked prior to ``$$name$$``
  patterns, so the following:\n\n```\n{{homepage:      http://github.com/??github.user??/$$project.name$$/}}\n```\n\nwon't
  throw an error if `github.user` is unset, even if `project.name` was unset.\n\nYou
  can find an example template at https://github.com/bennofs/dotfiles/tree/master/.themplate/.\n"
description-type: markdown
hash: 9562873914a204ed7daf91844f70592385a93b6c348798dc8772b439436ca109
homepage: http://github.com/bennofs/themplate/
latest: '1.2'
license-name: BSD-3-Clause
maintainer: Benno Fünfstück <benno.fuenfstueck@gmail.com>
synopsis: Project templating tool
test-bench-deps: {}
