all-versions:
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- '0.3'
- 0.3.0.1
- 0.3.0.2
- '0.4'
- 0.4.0.1
- 0.4.0.2
- 0.4.1
- 0.4.2
author: Jeremy Barisch Rooney
basic-deps:
  base: '>=4.7 && <5'
  clay: '>=0'
  text: '>=0'
  threepenny-gui: '>=0'
  threepenny-gui-flexbox: '>=0'
changelog: ''
changelog-type: ''
description: "# Threepenny-gui Flexbox\n\n[![CircleCI](https://circleci.com/gh/barischj/threepenny-gui-flexbox.svg?style=shield)](https://circleci.com/gh/barischj/threepenny-gui-flexbox)
  [![Hackage](https://img.shields.io/hackage/v/threepenny-gui-flexbox.svg)](http://hackage.haskell.org/package/threepenny-gui-flexbox)
  [![Stackage Nightly](https://www.stackage.org/package/threepenny-gui-flexbox/badge/nightly?.jpg)](http://stackage.org/nightly/package/threepenny-gui-flexbox)
  [![Stackage LTS](https://www.stackage.org/package/threepenny-gui-flexbox/badge/lts?.jpg)](http://stackage.org/lts/package/threepenny-gui-flexbox)\n\nFlexbox
  layouts for Threepenny-gui.\n\nThis library was written following the\nwonderful\n[A
  Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox)
  and\nusing the equally wonderful [Clay](https://hackage.haskell.org/package/clay)\nlibrary
  as a CSS domain specific language.\n\n![](https://github.com/barischj/threepenny-gui-flexbox/blob/master/example.png)\n\n#
  Usage\n\n## Properties\n\nUltimately we just want to set Flexbox properties on elements,
  both parent and\nchild elements. In CSS these properties would look like `flex-grow:
  1;`.\n\nWe collect Flexbox properties that apply to the parent element, things like\n`flex-direction`,
  in a `ParentProps` data type. Flexbox properties that apply to\nchild elements,
  things like `flex-grow`, are collected in a `ChildProps` data\ntype.\n  \nIf you
  want `ChildProps` with `flex-grow: 1;` you can just do:\n\n``` Haskell\nflexGrow
  1\n```\n\nYou can define multiple properties using record syntax:\n\n``` Haskell\norder
  1 { cflexGrow = 1, cFlexShrink = 2 }\n```\n\nNote that in the examples above we
  used `flexGrow` and `order` to return\n`ChildProps` with given values set but also
  with default values set for all\nother Flexbox properties, unless record syntax
  is used to override a property.\n\nSome properties like `flexGrow` simply take an
  `Int` but others take a value\nfrom the `Clay` library. Here's an example for `ParentProps`:\n\n```
  Haskell\ndisplay Clay.Display.inlineFlex { pFlexWrap = Clay.Flexbox.nowrap }\n```\n\nIf
  you just want `ParentProps` or `ChildProps` with default values:\n\n``` Haskell\nparentProps
  :: ParentProps\nchildProps  :: ChildProps\n```\n  \n## Setting Properties\n\nOnce
  you have your properties defined you'll want to apply them to elements. For\nthis
  you can use `setFlex` which can be used with Threepenny's reverse function\napplication
  operator `#`:\n\n``` Haskell\nUI.div # set UI.text \"foo\" # setFlex (flexGrow 1)\n```\n\nYou
  can also convert `ParentProps` or `ChildProps` to a `[(String, String)]`\nwhich\nis\n[how
  Threepenny expects CSS](http://hackage.haskell.org/package/threepenny-gui/docs/src/Graphics-UI-Threepenny-Core.html#style).\nThis
  can be done using `toStyle` which is defined in the typeclass `ToStyle`:\n\n```
  Haskell\nUI.div # set UI.style (toStyle $ order 1)\n```\n\n### 'flex'\n\nWe provide
  a utility function `flex` (and a few variants thereof) which takes\nboth parent
  and child elements and their respective `ParentProps` and\n`ChildProps`, applies
  the properties to the respective elements and then returns\nthe parent element with
  children attached.\n\nHere is a full example, which produces the above image of
  three orange text\nboxes in ratio 1:2:1. First done without `flex_p` and then with
  `flex_p`.\n`flex_p` is a variant of `flex` which applies default Flexbox properties
  to the\nparent element.\n\n``` Haskell\n-- |Example without 'flex_p'.\nexample ::
  Window -> UI ()\nexample w = void $\n  getBody w # setFlex parentProps #+ [\n      foo
  # setFlex (flexGrow 1)\n    , foo # setFlex (flexGrow 2)\n    , foo # setFlex (flexGrow
  1)\n    ]\n\n-- |Example with 'flex_p'.\nexample' :: Window -> UI ()\nexample' w
  = void $\n  flex_p (getBody w) [\n      (foo, flexGrow 1)\n    , (foo, flexGrow
  2)\n    , (foo, flexGrow 1)\n    ]\n\n-- | Simple coloured 'div'.\nfoo = UI.div
  # set UI.text \"foo\"\n             # set UI.style [(\"background-color\", \"#F89406\"),\n
  \                            (\"margin\", \"8px\")]\n```\n"
description-type: markdown
hash: 6885c986791a97a9fc9af33d22394ac7a68d0f1d09f03f16d54e1503d7aa6aad
homepage: https://github.com/barischj/threepenny-gui-flexbox
latest: 0.4.2
license-name: BSD-3-Clause
maintainer: barischj@tcd.ie
synopsis: Flexbox layouts for Threepenny-gui.
test-bench-deps: {}
