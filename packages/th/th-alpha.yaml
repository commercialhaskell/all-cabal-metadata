all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.1.0
author: Julian K. Arni
basic-deps:
  base: '>=4 && <5'
  containers: '>=0'
  mmorph: '>1 && <2'
  mtl: '>=2 && <3'
  template-haskell: '>=0'
  th-desugar: '>=1.4 && <1.7'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Compare TH expressions (or clauses, patterns, etc.) for alpha equivalence.
  That is, compare for equality modulo the renaming of bound variables.

  > areExpAEq [| \x -> x |] [| \y -> y |]
  > -- True

  > do
  >    let x = mkName "x"
  >    let y = mkName "y"
  >    runQ $ (LamE [VarP x] (VarE x)) @= (LamE [VarP y] (VarE y))
  > -- True

  This can be useful when for instance testing libraries that use Template
  Haskell - usually correctness is only defined up to alpha equivalence.
description-type: haddock
hash: 2c1b49852183db69e1543fe7110a44296e62b1e231a197e8aad10e8f010f70fa
homepage: https://github.com/jkarni/th-alpha
latest: 0.2.1.0
license-name: BSD-3-Clause
maintainer: Julian K. Arni <jkarni@gmail.com>
synopsis: Alpha equivalence for TH Exp
test-bench-deps:
  base: '>=4 && <5'
  derive: '>=0'
  tasty: '>=0.8'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  th-alpha: '>=0'
