all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
author: Naoto Shimazaki
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  stm: '>=0'
changelog: |
  ## Thread-hierarchy 0.3.0.2

  * Include .cabal file in source repo.
  * Migrate CI from Travis to GitHub Actions.
  * Build and test for multiple platforms and GHC versions.

  ## Thread-hierarchy 0.3.0.1

  * Move to hpack from hand written cabal project file

  ## Thread-hierarchy 0.3.0.0
  * Back to basic.  Unlifted APIs to IO.

  ## Thread-hierarchy 0.2.0.0
  * Improved implementation of previous fix.
  * No longer expose constructor of ThreadMap.

  ## Thread-hierarchy 0.1.0.3
  * Fixed BlockedIndefinitelyOnMVar under race condition.

  ## Thread-hierarchy 0.1.0.2
  * Fixed space leaks in map operation.

  ## Thread-hierarchy 0.1.0.1
  * Timing dependencies are removed from tests.

  ## Thread-hierarchy 0.1.0.0

  * Initial release.
changelog-type: markdown
description: "# thread-hierarchy\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![Build
  Status](https://github.com/nshimaza/thread-hierarchy/workflows/build/badge.svg)](https://github.com/nshimaza/thread-hierarchy/actions?query=workflow%3Abuild)\n[![Hackage](https://img.shields.io/hackage/v/thread-hierarchy.svg?style=flat)](https://hackage.haskell.org/package/thread-hierarchy)\n[![Stackage
  Nightly](http://stackage.org/package/thread-hierarchy/badge/nightly)](http://stackage.org/nightly/package/thread-hierarchy)\n[![Stackage
  LTS](http://stackage.org/package/thread-hierarchy/badge/lts)](http://stackage.org/lts/package/thread-hierarchy)\n\nManaging
  Haskell threads in hierarchical manner.\n\n### Overview\n\nThis package provides
  parent-child association and guaranteed clean-up of children\nover plain Haskell
  thread.  You can terminate all child threads and grand child threads by\njust killing
  their parent thread.\n\n### Motivation\n\nUnlike Unix process, plain Haskell thread,
  created by forkIO, has no parent-child relation each other.\nThis means termination
  of parent thread doesn't result its children also terminated.\nThis is good design
  as a low level API because it gives user greatest flexibility.\nHowever, it also
  means managing entire lifecycle of thread is totally a responsibility of user.\n\nHere
  one thing you need to be aware.  Garbage collection doesn't work on living thread.\nWhen
  you lost reference to an object, garbage collector frees up the object for you.\nHowever,
  even though you lost the thread ID of your child thread, Haskell runtime doesn't
  consider\nthe thread is orphaned.  The child thread continue running.\n\nThis is
  prone to create thread leakage.  You can accidentally lose thread ID of child thread\nby
  crash of parent thread.  Now you no longer have way to kill orphaned child thread.\nThis
  is thread leakage.\n\nThe low level forkIO API requires you keep track and manage
  entire thread lifecycle\nincluding accidental case like the above.  Hand crafting
  it might be painful.\n\nThis package is intended to provide simple replacement API
  over plain forkIO in case of when\nall you need to do on parent termination is just
  terminating all its children.\n\nIf you need to keep your child running after parent
  terminated, this API is not for you.\n\n### Why not withAsync?\n\nThe typical use
  case for this package is TCP server style use case.  In such use case,\nyou have
  to create virtually infinite number of threads and they finish in random timing\nbut
  you are not so interested in their return value.\n\nThe `withAsync` coming with
  `async` package solves different problem than this package.\nIt is good for taking
  actions asynchronously but eventually you need their return values.\nOr, even you
  aren't care of return values, you only need to take several finite number of\nactions
  concurrently.\n\nBellow explains why `withAsync` is not good for managing large
  number of threads. \n\n`withAsync` is essentially a sugar over bracket pattern like
  this.\n\n```haskell\nwithAsync action inner = bracket (async action) uninterruptibleCancel
  inner\n```\n\nIt guarantees `uninterruptibleCancel` to the `action` is executed
  on asynchronous exception\nat parent thread where withAsync itself is living.  However
  it also guarantees the `uninterruptibleCancel`\nis executed on normal exit from
  `inner` too.  Thus, the `action` can only live within the\nlifecycle of the `withAsync`
  call.  If you want to keep your `action` alive, you have to\nkeep `inner` continue
  running until your `action` finishes.\n\nSo, what if let async action go and make
  recursive call form `inner` back to your loop?\nIt is a bad idea.  Because `withAsync`
  is a `bracket`, recursive call from `inner` makes\nnon-tail-recurse call.\n\nIn
  other words, the difference between `withAsync` and `newChild` is strategy of un-installing\ncleanup
  handler.  `withAsync` uninstalls its cleanup handler based on its lexical scope.\n`newChild`
  uninstalls it based on actual dynamic thread termination.\n\n### Usage \n\nAlmost
  all you need to know is one data type and one function:  `ThreadMap` and `newChild`.\n\nThreads
  created by `newChild` guarantee automatic cleanup on its exit\nregardless normal
  exit or cancellation by asynchronous exception.\n\nIn order to that works properly,
  user must ensure following rules.\n\n* User provided thread handler must accept
  `ThreadMap` as its first argument.\n* When the user provided handler creates its
  child thread, it must use newChild with given `ThreadMap`.\n* For 1st thread you
  create by newChild, give it a `ThreadMap` created by `newThreadMap`.\n\n`ThreadMap`
  is house-keeping object for your thread.  It is a mutable map keeping track\nliving
  child threads of your thread.  When your thread handler started, you receives\nan
  empty `ThreadMap` via 1st argument of your handler.  When you create a child thread\nof
  your thread, `newChild` automatically update (mutate) your `ThreadMap` by adding\nnewly
  created child thread.  When your child thread terminated, it is automatically removed\nfrom
  your `ThreadMap`.\n\nSame manner is applied to child thread and grandchild thread
  as long as you follow the rule the above.\n\n### How it works\n\nWhen `newChild`
  creates a new thread, it installs two cleanup tasks for you.\n\n* Killing all thread
  contained in `ThreadMap` of the new thread.  It kills all children of the new thread.\n*
  Removing the new thread itself from parent's `ThreadMap`.\n\nThe cleanup tasks are
  called when the new thread exit normally or terminated by asynchronous exception.\nBy
  this mechanism, termination of top level thread is propagated down to all its children,\n
  children of children, and so on.\n\n### Example\n\nWhen you create the first thread
  managed by this module, create a new empty `ThreadMap` then call\nnewChild with
  it.  The newCall automatically install cleanup routine to the handler you provided.\n\n```haskell\ncreateRootThread
  :: IO ThreadId\ncreateRootThread = do\n    rootThreadMap <- newThreadMap\n    threadID
  <- newChild rootThreadMap rootThreadHandler\n    return threadID\n```\n\nWhen a
  thread managed by this module creates its child thread, call newChild with `TreadMap`\nreceived
  via handlers argument.\n\n```haskell\nrootThreadHandler :: ThreadMap -> IO ()\nrootThreadHandler
  myChildrenThreadMap = do\n    void $ newChild myChildrenThreadMap $ \\grandChildrenThreadMap
  -> do\n        yourCode\n        return ()\n```\n\nYou can install your own cleanup
  routine using finally or both resource acquisition and cleanup\nroutine using bracket.\n\n```haskell\n
  \   -- Forking a new child with your own cleanup\n    void $ newChild childrenOfCurrentThread
  $ \\childrenOfHandler ->\n        yourThreadHandler `finally` yourCleanupRoutine\n\n
  \   -- Forking a new child with resource acquisition and cleanup\n    void $ newChild
  childrenOfCurrentThread $ \\childrenOfHandler ->\n        bracket yourResourceAcquiringRoutine
  yourCleanupRoutine yourThreadHandler\n```\n\n### Limitation\n\nCurrently, unlike
  async function, this module is not designed to back any return value\nfrom child
  thread to parent thread.  This module focuses on guaranteed cleanup on thread termination.\n"
description-type: markdown
hash: 2766cd25775ed113c7ca5e03a0ffd2c838689b8f9b865d35d8925a9512b75ce1
homepage: https://github.com/nshimaza/thread-hierarchy#readme
latest: 0.3.0.2
license-name: MIT
maintainer: Naoto.Shimazaki@gmail.com
synopsis: Simple Haskell thread management in hierarchical manner
test-bench-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  hspec: '>=0'
  stm: '>=0'
  thread-hierarchy: '>=0'
