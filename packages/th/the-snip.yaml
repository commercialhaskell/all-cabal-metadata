homepage: https://github.com/RobertFischer/the-snip#readme
changelog-type: ''
hash: 33f6aa9d2bfce1f30a9127b75b06150d7941d910009216508b1f62fbdbedcc62
test-bench-deps:
  rio: '>=0.1.12.0'
  unix: -any
  path: -any
  base: '>=4.11 && <10'
  hspec: -any
  attoparsec: -any
  the-snip: -any
  path-io: -any
maintainer: smokejumperit@gmail.com
synopsis: Command line tool for extracting demarcated snippets from text files.
changelog: ''
basic-deps:
  rio: '>=0.1.12.0'
  unix: -any
  path: -any
  base: '>=4.11 && <10'
  optparse-simple: -any
  attoparsec: -any
  the-snip: -any
  path-io: -any
all-versions:
- 0.0.0.1
- 0.1.0.0
author: Robert Fischer
latest: 0.1.0.0
description-type: markdown
description: "# The Snip\n\n## Summary\n\nGiven a text file with demarcated regions,
  generate distinct output files containing the\ncontent of those demarcated regions.
  These demarcated regions, called \"snippets\", may be \ninterleaved, nested, or
  overlapping.\n\n### Installation\n\n```\nwhich stack || ( curl -sSL https://get.haskellstack.org/
  | sh )\nstack install the-snip  # Ensure the output dir is on your $PATH\n```\n\n###
  Motivation\n\nThis program supports generating documentation. Often, a code snippet
  is worth thousands of words.  Documentation like technical\ninstruction that requires
  having code, but linters and type-checkers can't process inline code samples, and
  nothing ensures the\ncode stays up-to-date with other dependent samples.\n\nThis
  program addresses the problem by being able to generate the snippets directly from
  text files. Those files are then available\nfor processing by Pygments, LaTeX, or
  whatever else.\n\n## Usage\n\n### Simple\n\n1. Create a snippet by adding two lines
  into the file.  One line must contain the literal string \"`<<<@snip`\" and may
  start with any other content. This is the \"Start Marker\". The other line must
  contain the literal string \"`@snip>>>`\" and may start with any other content.
  This is the \"End Marker\". The program discards all content before the literal
  strings, so feel free to start the line with a comment declaration and/or a description
  of the snippet.\n1. Run `snip` and pass in the file name as the argument.\n1. Read
  the snippet out of the newly-created output directory.  The snippet directory for
  an input file has the same as the input file but with `.snip.d` appended. The snippet
  file name will be `1.snip.<FILEEXT>`, where `<FILEEXT>` is the file extension of
  the input file. For example, if you're processing Haskell files with a `.hs` file
  extension, the snippet file name will be `1.snip.hs`.\n\n### Directory\n\nIf an
  argument is a directory, then the input files will be the immediate contents of
  that directory.\n\n### Recursive\n\nIf the program is running with the `-r`/`--recurse`
  flag and an argument is a directory, then the input files will be the contents of
  that directory and all its subdirectories.\n\n### Named Snippets\n\nBy default,
  the name of a snippet is the 1-based order of the snippet's start in the file.  If
  you want to explicitly name the snippet file,\nthen pass in the snippet file name
  after the literal string of the start marker.  For instance, this start marker will
  start a snippet named \"foo\":\n\n```\n# This is the start of the fooing section.
  <<<@snip foo\n```\n\nThis snippet will be in the output directory and named `foo.snip.<FILEEXT>`.\n\nThe
  snippet name must be parseable as a relative file path ([details here](https://hackage.haskell.org/package/path-0.9.2/docs/Path-Posix.html#v:parseRelFile))
  and may not include whitespace. Whitespace or the end of the line terminates the
  snippet name. The parser ignores any content on the line after the snippet name,
  so this start marker will start the same snippet file:\n\n```\n# <<<@snip foo This
  is the start of the fooing section.\n```\n\n### Interleaved and Nested Snippets\n\nBy
  default, an end marker terminates all started snippets. If the start marker uses
  named snippets, though, the end marker may specify which\nsnippet to end.  For instance,
  this end marker will end the snippet named \"foo\":\n\n```\n# This is the end of
  the fooing section. @snip>>> foo\n```\n\nAnalogous to start markers, the parser
  also ignores content after the snippet name, so this end marker will end the same
  snippet:\n\n```\n# @snip>>> foo This is the end of the fooing section.\n```\n\nUsing
  specific end markers, snippets may start and end anywhere in the file. The parser
  will disregard lines that are markers for other snippets.\n\n### Whitespace Trimming\n\nIf
  the program is running with the `-t`/`--trim` flag, then each line of the snippet
  has its common leading whitespace trimmed.  \nThe common leading whitespace for
  a snippet is the longest sequence of tabs or spaces which start every non-empty
  line.  For instance, this code:\n\n```\n    This is my code.\n        It is very
  good code.\n\n      It runs very well and does useful things.\n          Yay, my
  code!\n```\n\nwill trim down to:\n\n```\nThis is my code.\n    It is very good code.\n\n
  \ It runs very well and does useful things.\n      Yay, my code!\n```\n\nThis is
  nice for code samples extracted from nested sections of the code.\n\n### Caveats\n\n*
  The file system must be POSIX-compliant.\n* Input files must be parseable as UTF8-encoded
  text files.\n* The snippets are UTF8-encoded text files.\n* The program must be
  able to read from all input files.\n* The program must be able to freely create
  subdirectories, write files, and overwrite files in the output directory.\n* Start
  and end markers may not be on the same line.\n* There is an implicit catch-all end
  marker at EOF.\n* Explicit snippet names must be unique within the file and may
  not be positive integers.\n"
license-name: BSD-3-Clause
