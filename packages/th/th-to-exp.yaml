all-versions:
- 0.0.1.0
- 0.0.1.1
author: ''
basic-deps:
  base: '>=4.9.0.0 && <5'
  template-haskell: '>=2.11.0.0 && <2.13'
changelog: |
  ## 0.0.1.1 (July 31st, 2017)

  - Added support for GHC 8.2.1 and template-haskell 2.12

  ## 0.0.1.0 (November 8th, 2016)

  - Initial release
changelog-type: markdown
description: |
  # th-to-exp [![Build Status](https://travis-ci.org/lexi-lambda/th-to-exp.svg?branch=master)](https://travis-ci.org/lexi-lambda/th-to-exp)

  `th-to-exp` is a package that provides a way to persist data from compile-time to runtime by producing Template Haskell expressions that evaluate to particular values. For example, if you have a value `Just 1`, then `toExp (Just 1)` will produce the *expression* `[e| Just 1 |]`, which can be used in a splice. For a more direct example, hereâ€™s what that looks like without the quasiquote notation:

  ```haskell
  > toExp (Just 1)
  AppE (ConE GHC.Base.Just) (LitE (IntegerL 1))
  ```

  This is done by using a typeclass, `ToExp`, that can be automatically derived for types that have a `Generic` instance.
description-type: markdown
hash: 4b34d7bd923369faa7c37c6b85bd434f10354e75d63e8b31a9159b1f568d71ab
homepage: https://github.com/lexi-lambda/th-to-exp#readme
latest: 0.0.1.1
license-name: ISC
maintainer: Alexis King
synopsis: Provides a way to persist data from compile-time to runtime.
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  template-haskell: '>=0'
  th-to-exp: '>=0'
