all-versions:
- '1.0'
author: Mark P Jones <mpj@cse.ogi.edu>
basic-deps:
  base: '>=0'
  pretty: '>=0'
changelog: ''
changelog-type: ''
description: ">----------------------------------------------------------------------------<\r\n
  \                 Typing Haskell in Haskell: README\r\n\r\n                           Mark
  P Jones\r\n                          mpj@cse.ogi.edu\r\n\r\n                 Pacific
  Software Research Center\r\n           Department of Computer Science and Engineering\r\n
  \       Oregon Graduate Insitute of Science and Technology\r\n\r\n             Thanksgiving
  Day 2000 (November 23, 2000)\r\n\r\nThis package contains source code for a Haskell
  typechecker that is\r\nwritten in Haskell.  This is a revised version of the program
  that was\r\npresented at the 3rd Haskell Workshop in Paris on October 1, 1999.\r\nThese
  files have been tested using the Hugs 98 interpreter, but should\r\nbe readily adapted
  to other Haskell 98 systems.  These programs are\r\ndistributed as Free Software
  under the terms in the file \"License\" that\r\nis included in the distribution
  of this software, copies of which may\r\nbe obtained from: <http://www.cse.ogi.edu/~mpj/thih/>.\r\n\r\nPlease
  note that further revisions to this software may already be\r\nplanned or in progress.\r\n\r\nThe
  following list describes each of the files in the distribution:\r\n\r\n\r\n  Readme\r\n
  \   This file\r\n  License\r\n    The license for distribution and use of this software\r\n\r\n
  \ A more realistic version of the typchecker, broken in to separate\r\n  modules
  (roughly following the structure of the paper), together\r\n  with additional code
  used for debugging and pretty printing.\r\n\r\n\r\n    Assump.hs\r\n      Assumption
  lists.\r\n    Debug.hs\r\n      A simple debug function that was used during testing.
  \ It is\r\n      not actually used in the distributed code.\r\n    Id.hs\r\n      Identifiers.\r\n
  \   Infer.hs\r\n      Captures the general form of many type inference judgements.\r\n
  \   Kind.hs\r\n      Kinds.\r\n    Lit.hs\r\n      Literals.\r\n    Pat.hs\r\n      Patterns.\r\n
  \   PPrint.hs\r\n      A pretty printing library, which builds on the pretty printing\r\n
  \     library included in the standard Hugs distribution.\r\n    Pred.hs\r\n      Predicates
  and qualified types.\r\n    Scheme.hs\r\n      Type schemes.\r\n    Subst.hs\r\n
  \     Substitutions.\r\n    Testbed.hs\r\n      A simple test bed, providing functions
  to type check a collection\r\n      of binding groups, and output or save the results.\r\n
  \   TIMain.hs\r\n      Type inference for expressions, binding groups, etc.\r\n
  \   TIMonad.hs\r\n      The definition of a simple monad for type inference.\r\n
  \   TIProg.hs\r\n      Type inference for top-level programs.\r\n    Type.hs\r\n
  \     Types.\r\n    Unify.hs\r\n      Unification.\r\n\r\n  The remaining files
  provide test data of one form or another, based\r\n  where necessary on Haskell
  coded included in the Hugs distribution:\r\n\r\n    Static.hs\r\n      Definitions
  for use in describing the static (types + classes)\r\n      component of a module.\r\n\r\n
  \   HaskellPrims.hs\r\n      Typing assumptions for Hugs primitives that are used
  in the Prelude.\r\n\r\n    StaticPrelude.hs\r\n      Describes the static environment
  (types + classes) for the Prelude.\r\n    SourcePrelude.hs\r\n      An encoding
  of the standard Prelude library as Haskell data that\r\n      can be fed into the
  type checker.\r\n    HaskellPrelude.hs\r\n      A set of typing assumptions for
  Prelude functions, generated\r\n      automatically by running the savePrelude function
  in SourcePrelude.hs.\r\n\r\n    StaticMaybe.hs\r\n      Describes the static environment
  (types + classes) for the Maybe library.\r\n    SourceMaybe.hs\r\n      An encoding
  of the standard Maybe library as a Haskell data structure.\r\n    HaskellMaybe.hs\r\n
  \     Typing assumptions for the Maybe library, generated by running the\r\n      saveMaybe
  function in SourceMaybe.hs.\r\n\r\n    StaticList.hs\r\n      Describes the static
  environment (types + classes) for the List library.\r\n    SourceList.hs\r\n      An
  encoding of the standard List library as a Haskell data structure.\r\n    HaskellList.hs\r\n
  \     Typing assumptions for the List library, generated by running the\r\n      saveList
  function in SourceList.hs.\r\n\r\n    StaticMonad.hs\r\n      Describes the static
  environment (types + classes) for the Monad library.\r\n    SourceMonad.hs\r\n      An
  encoding of the standard Monad library as a Haskell data structure.\r\n    HaskellMonad.hs\r\n
  \     Typing assumptions for the Monad library, generated by running the\r\n      saveMonad
  function in SourceMonad.hs.\r\n\r\n    StaticThih.hs\r\n      Describes the static
  environment (types + classes) for the typechecker.\r\n    SourceThih.hs\r\n      An
  encoding of the typechecker as a Haskell data structure.\r\n    HaskellThih.hs\r\n
  \     Typing assumptions for the typechecker, generated by running the\r\n      saveThih
  function in SourceMaybe.hs.\r\n\r\n    StaticTest.hs\r\n      Describes the static
  environment (types + classes) for the test program.\r\n    SourceTest.hs\r\n      An
  encoding of misc Haskell functions as a Haskell data structure.\r\n    HaskellTest.hs\r\n
  \     Typing assumptions generated by running the saveTest function in\r\n      SourceTest.hs.\r\n\r\nSimple
  example of use:\r\n  $ ghci Main.hs\r\n  Main> main\r\n  ... wait a while for the
  inferred list of typings to be displayed ...\r\n\r\n------------------------------------------------------------------------------\r\n"
description-type: text
hash: a0b065327d57c396b5f3c95f11cbe901e7eafbebebb7ccd980549131a3348323
homepage: http://web.cecs.pdx.edu/~mpj/thih/
latest: '1.0'
license-name: BSD-3-Clause
maintainer: ''
synopsis: Typing Haskell In Haskell
test-bench-deps: {}
