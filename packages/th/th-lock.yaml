all-versions:
- 0.0.4
author: Daniil Iaitskov <dyaitskov@gmail.com>
basic-deps:
  base: <5
  template-haskell: <2.24.0.0
changelog: |
  # th-lock changelog

  ## Version 1.0.0 2025-03-14
changelog-type: markdown
description: |-
  Recent GHC versions with option @-j\<N>@ where @N@ greater than 1 can
  build modules concurrently. Usually it is cool thing, because build time
  drops, but there is a drawback in form of problems with TH code
  maintaining a shared state.

  I encountered such issue while running tests for
  <https://hackage.haskell.org/package/trace-embrace trace-embrace>
  package. Package TH code has a shared state (immutable configuration
  file loaded once), which is not supposed to change after loading, but
  tests require to cover all cases\/branches and achieving this in the
  scope of a single cabal test-suit leads to inconsistencies.

  Spreading tests among multiple test suits cause code duplication and
  looks less elegant.

  Compilation of conflicting modules can be serialized with
  <https://hackage.haskell.org/package/th-lock/docs/Language-Haskell-TH-Lock.html#v:ensureSerialCompilationVerbose ensureSerialCompilationVerbose>.

  > {-# LANGUAGE TemplateHaskell #-}
  > module ModuleA where
  >
  > import Language.Haskell.TH.Lock
  >
  > ensureSerialCompilationVerbose

  ________________________________________________________________________

  > {-# LANGUAGE TemplateHaskell #-}
  > module ModuleB where
  >
  > import Language.Haskell.TH.Lock
  >
  > ensureSerialCompilationVerbose
description-type: haddock
hash: ef18b68f0de84e0dac8f4b1d846208f6e6139cb8a562e393e9be4ac57ce674b6
homepage: https://github.com/yaitskov/th-lock
latest: 0.0.4
license-name: BSD-3-Clause
maintainer: Daniil Iaitskov <dyaitskov@gmail.com>
synopsis: Serialize compilation of modules with TH code modifing shared state
test-bench-deps:
  base: '>=0'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  th-lock: '>=0'
