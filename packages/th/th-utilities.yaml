homepage: https://github.com/fpco/th-utilities#readme
changelog-type: markdown
hash: 8f4bc8c754448202b9f95cd69880d1836272ce71beb8d52d1a1d4b6406d6e974
test-bench-deps:
  th-utilities: -any
  bytestring: -any
  base: '>=4.7 && <5'
  hspec: -any
  text: -any
  th-orphans: -any
  syb: -any
  filepath: -any
  th-abstraction: -any
  containers: -any
  template-haskell: '>=2.7'
  primitive: -any
  vector: -any
  directory: -any
maintainer: Michael Sloan <mgsloan@gmail.com>
synopsis: Collection of useful functions for use with Template Haskell
changelog: |
  # ChangeLog

  ## 0.2.4.2

  * Fixes compilation with `GHC-9.0.*`.  See [#14][]

  [#14]: https://github.com/fpco/th-utilities/issues/14

  ## 0.2.4.1

  * Fixes generated Storable instances to have a `sizeOf` definition
    which works with `-XStrict`. See [#13][]

  [#13]: https://github.com/fpco/th-utilities/issues/13

  ## 0.2.4.0

  * Compatibility with GHC-8.10

  * Behavior change in reification of type family instances. Instead of
    erroring if the instance mentions a kind variable, now just ignores
    it.

  ## 0.2.3.1

  * Compatibility with GHC-8.8

  ## 0.2.3.0

  * Improved fix to the type variable behavior with GHC <= 7.10.  Uses
    `Any` in place of type variables instead of `()`, to allow for more
    kinds than just `*` and `Constraint`.

  ## 0.2.2.0

  * Fixes derive and instantiator mechanisms to work with ghc 7.10 and
    earlier.  Previously, invocation was broken when type variables were
    used.

  * Fixes `freeVarsT` - it now looks through more constructors of `Type`.

  * Adds `dequalifyTyVars` to dequalify every type variable.

  ## 0.2.0.1

  * Fixes build on 7.8

  * Fixes warnings

  ## 0.2.0.0

  * Adds TH.ReifySimple, which supports reifying most of the information TH users
    care about.

  * Adds some utilities based on SYB, which is often useful for TH.

  * Makes relative path stuff less noisyi with GHCi.

  ## 0.1.0.0

  * First public release
basic-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  text: -any
  th-orphans: -any
  syb: -any
  filepath: -any
  th-abstraction: -any
  containers: -any
  template-haskell: '>=2.7'
  primitive: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.3.1
- 0.2.4.0
- 0.2.4.1
- 0.2.4.2
author: ''
latest: 0.2.4.2
description-type: markdown
description: |
  # th-utilities

  [![Build Status](https://travis-ci.org/commercialhaskell/th-utilities.svg?branch=master)](https://travis-ci.org/fpco/th-utilities)

  The 'th-utilities' package provides a number of useful utilities for
  [Template Haskell](https://hackage.haskell.org/package/template-haskell-2.10.0.0).
  In particular:

  * [`TH.Derive`](https://github.com/fpco/th-utilities/blob/master/src/TH/Derive.hs)
    provides a convenient system for using TH to derive typeclass instances. It
    allows for open registration of TH derivers, and reuses instance syntax for
    invoking them.

    - [`TH.Derive.Storable`](https://github.com/fpco/th-utilities/blob/master/src/TH/Derive/Storable.hs)
      defines derivation of Storable for ADTs.

  * [`TH.ReifyDataType`](https://github.com/fpco/th-utilities/blob/master/src/TH/ReifyDataType.hs)
    provides utilities for reifying simplified datatype info. It omits details
    that you don't usually want to handle, making it much more straightforward to
    generate code based on datatype structure.

  * [`TH.RelativePaths`](https://github.com/fpco/th-utilities/blob/master/src/TH/RelativePaths.hs)
    provides utilities for loading files based on paths relative to the cabal
    file. This is particularly handy for loading code into ghci even when its
    current dir isn't the package dir. Ideally, this module would be used by
    everyone who currently uses `qAddDependentFile`.

  * [`TH.Utilities`](https://github.com/fpco/th-utilities/blob/master/src/TH/Utilities.hs)
    provides a miscellaneous set of utilities that are useful within this package
    and elsewhere.
license-name: MIT
