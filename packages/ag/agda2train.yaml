homepage: https://github.com/omelkonian/agda2train/
changelog-type: ''
hash: c3e974c70dcbc97fd526ba65937eaf8860d1ba4de6edc54b2d062b6b2e710332
test-bench-deps: {}
maintainer: melkon.or@gmail.com
synopsis: Agda backend to generate training data for machine learning purposes.
changelog: ''
basic-deps:
  bytestring: '>=0.10.8.1 && <0.13'
  base: '>=4.12.0.0 && <4.20'
  aeson-pretty: ==0.8.10
  unordered-containers: '>=0.2.9.0 && <0.3'
  Agda: '>=2.6.3 && <2.6.4'
  agda2train-lib: -any
  filepath: '>=1.4.1.0 && <1.5'
  async: '>=2.2 && <2.3'
  containers: '>=0.5.11.0 && <0.8'
  mtl: '>=2.2.1 && <2.4'
  file-embed: ==0.0.15.0
  deepseq: '>=1.4.2.0 && <1.6'
  pretty: '>=1.1.3.3 && <1.2'
  aeson: '>=2.0 && <2.3'
  directory: '>=1.2.6.2 && <1.4'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
author: Orestis Melkonian
latest: 0.0.3.0
description-type: markdown
description: |
  agda2train: An Agda backend to generate training data for machine learning
  ===========================================================================
  [![CI](https://github.com/omelkonian/agda2train/workflows/CI/badge.svg)](https://github.com/omelkonian/agda2train/actions) [![Hackage](https://repology.org/badge/version-for-repo/hackage/haskell:agda2train.svg)](http://hackage.haskell.org/package/agda2train)

  This is work in progress and a neural network trained on these data to provide
  *premise selection* is under way.

  ## How to run

  The `agda2train` package is published on Hackage, so one can simply:
  ```bash
  $ cabal install agda2train
  $ agda2train SomeFile.agda
  ```

  Run `agda2train --help` to see the available flags; apart from the standard flags
  inherited by the `agda` executable we get the following backend-specific options:
  ```bash
  $ agda2train --help
  ...
  agda2train backend options
    -r      --recurse               Recurse into imports/dependencies.
    -x      --no-json               Skip generation of JSON files. (just debug print)
            --ignore-existing-json  Ignore existing JSON files. (i.e. always overwrite)
            --print-json            Print JSON output. (for debugging)
            --no-terms              Do not include definitions of things in scope
    -o DIR  --out-dir=DIR           Generate data at DIR. (default: project root)
  ```

  Alternatively, assuming a working Haskell installation (`cabal` available),
  one can clone this repo and use the provided Makefile to build the package locally,
  as well as run our test suite:
  ```bash
  $ git clone git@github.com:omelkonian/agda2train.git
  $ cd agda2train
  $ make build # build package
  $ make install # install `agda2train` executable
  $ make test # run the test-suite (based on golden files in `test/golden/*`)
  $ make repl # REPL for developers
  $ make allTests # extract JSON data from all example files in `test/*`
  $ make stdlib # extract JSON data from Agda's standard library
  ```

  ## Relevant Agda issues

  - [Type-on-hover #516](https://github.com/agda/agda/issues/516)
  - [Step-by-step evaluation #4747](https://github.com/agda/agda/issues/4747)
  - [Reverting projection-like optimization #5142](https://github.com/agda/agda/pull/5142/)
license-name: BSD-3-Clause
