homepage: ''
changelog-type: markdown
hash: 261678077960969b151314a0529e4abf3123550c8cdc58886f4039e586535055
test-bench-deps: {}
maintainer: jesper@sikanda.be
synopsis: Compiling Agda code to readable Haskell.
changelog: |-
  Release notes for agda2hs v1.1
  ==============================

  Changes
  -------

  - Updated Agda base version to 2.6.4.
  - The `agda2hs` executable can now also be used in interactive mode (e.g. in Emacs or VS Code).
  - Added option to specify user-defined rewrites (see https://agda.github.io/agda2hs/features.html#rewrite-rules).
  - Type operators with names not starting with a colon are now allowed.
  - Added bindings for the `IO` monad.
  - Various other additions to the `Haskell.Prelude` library.

  Fixed issues
  ------------

  See https://github.com/agda/agda2hs/issues?q=milestone%3A1.1+is%3Aissue for the full list of fixed issues.
basic-deps:
  bytestring: '>=0.11.5 && <0.12'
  yaml-light: '>=0.1.4 && <2.0'
  base: '>=4.10 && <4.18'
  unordered-containers: '>=0.2.19 && <0.3'
  text: '>=2.0.2 && <2.1'
  syb: '>=0.7.2 && <0.8'
  Agda: ==2.6.4.*
  filepath: '>=1.4.1.0 && <1.5'
  process: '>=1.6.3.0 && <1.7'
  containers: ==0.6.*
  haskell-src-exts: '>=1.23 && <1.25'
  mtl: '>=2.2.2 && <2.3'
  deepseq: '>=1.4.4 && <1.5'
  directory: '>=1.2.6.2 && <1.4'
all-versions:
- '1.0'
- '1.1'
author: Ulf Norell, Jesper Cockx, Orestis Melkonian, Sára Juhošová, James Chapman,
  Lucas Escot, Henry Blanchette
latest: '1.1'
description-type: markdown
description: |
  [![GitHub CI](https://github.com/agda/agda2hs/workflows/CI/badge.svg)](https://github.com/agda/agda2hs/actions)

  # agda2hs

  Agda2hs is a tool for producing verified and readable Haskell code by
  extracting it from a (lightly annotated) Agda program. For example,
  the following Agda program encodes well-formed binary search trees:

  ```agda
  open import Haskell.Prelude

  _≤_ : {{Ord a}} → a → a → Set
  x ≤ y = (x <= y) ≡ True

  data BST (a : Set) {{@0 _ : Ord a}} (@0 lower upper : a) : Set where
    Leaf : (@0 pf : lower ≤ upper) → BST a lower upper
    Node : (x : a) (l : BST a lower x) (r : BST a x upper) → BST a lower upper

  {-# COMPILE AGDA2HS BST #-}
  ```

  agda2hs translates this to the following Haskell datatype:

  ```haskell
  module BST where

  data BST a = Leaf
             | Node a (BST a) (BST a)
  ```

  ## Objective

  The goal of this project is *not* to translate arbitrary Agda code to Haskell.
  Rather it is to carve out a common sublanguage between Agda and Haskell,
  with a straightforward translation from the Agda side to the Haskell side.
  This lets you write your program in the Agda fragment, using full Agda
  to prove properties about it, and then translate it to nice looking readable
  Haskell code that you can show your Haskell colleagues without shame.

  ## Documentation

  Documentation can be viewed at https://agda.github.io/agda2hs. You can also find
  examples in the `test` directory of this repository, in particular the file
  [Test.agda](https://github.com/agda/agda2hs/blob/master/test/Test.agda). The
  documentation is a work in progress, so if you have been using agda2hs and want
  to contribute in some way, adding documentation or examples would be very
  welcome.

  agda2hs was introduced in the Haskell Symposium '22 paper [Reasonable Agda is
  Correct Haskell: Writing Verified Haskell using
  agda2hs](https://jesper.sikanda.be/files/reasonable-agda-is-correct-haskell.pdf).

  ## Future work

  Currently agda2hs is under active development, please take a look at
  the [issue tracker](https://github.com/agda/agda2hs/issues). If you
  have a suggestion for a new feature that is not yet on the issue
  tracker, you are welcome to create a new issue or a PR. Feature
  requests should be of the form "Add support for Haskell feature X",
  *not* "Add support for Agda feature Y" (see "Objective" above). If you
  want to compile arbitrary Agda code to Haskell, you are advised to use
  Agda's built-in GHC backend instead.
license-name: BSD-3-Clause
