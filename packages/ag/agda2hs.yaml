all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
- '1.4'
author: Ulf Norell, Jesper Cockx, Orestis Melkonian, Sára Juhošová, James Chapman,
  Lucas Escot, Henry Blanchette, Viktor Csimma, Aleksander Wolska, Paul Bittner, Andreas
  Källberg, Bohdan Liesnikov, Jakob Naucke, and Heinrich Apfelmus
basic-deps:
  Agda: '>=2.8.0 && <2.9.0'
  aeson: '>=2.0.3 && <2.3'
  base: '>=4.13 && <4.22'
  bytestring: '>=0.11.5 && <0.13'
  containers: '>=0.6 && <0.9'
  deepseq: '>=1.4.4 && <1.6'
  directory: '>=1.2.6.2 && <1.4'
  filepath: '>=1.4.1.0 && <1.6'
  haskell-src-exts: '>=1.23 && <1.25'
  monad-control: '>=1.0 && <1.1'
  mtl: '>=2.2 && <2.3 || >=2.3.1 && <2.4'
  syb: '>=0.7.2 && <0.8'
  text: '>=2.0.2 && <2.2'
  transformers: '>=0.6 && <0.7'
  unordered-containers: '>=0.2.19 && <0.3'
  yaml: '>=0.11 && <0.12'
changelog: |
  Release notes for agda2hs v1.4
  ==============================

  Changes
  -------

  Changes to agda2hs:
  - Increased Agda base version to 2.8.
  - Increased bounds to support GHC 9.12.2.
  - agda2hs will now skip compilation of files that are up-to-date.
  - Added support for multi-parameter type classes.
  - Added support for quantified constraints.
  - Agda record types that compile to a Haskell data type are now
    required to have the `no-eta-equality` directive.
  - agda2hs will now assume that any modules under the `Haskell.`
    namespace are part of the trusted FFI with Haskell.
    Concretely, no code will be generated for these modules and
    the `Haskell.` prefix will be dropped from the module name.

  Additions to the agda2hs Prelude:
  - The builtin sort `Set` has been renamed to `Type` in the agda2hs Prelude
  - The `Rezz` type defined in `Haskell.Extra.Erase` has been renamed to `Singleton`.
  - The bindings to the Haskell `base` library are now located under `lib/base`
    to allow for adding bindings to other Haskell libraries.
  - Added new module `Haskell.Control.Exception` with the `assert` function
    which can be used to assert any decidable property, with the decidability
    proof being compiled to a boolean check in Haskell.
  - Added new module `Haskell.Data.Maybe` with `fromMaybe` and other functions.
  - Added new module `Haskell.Data.List` with functions `nub`, `deleteAll`, and `sort`
    together with some of their properties.
  - Added new modules `Haskell.Data.Map` and `Haskell.Data.Set` from the
    `containers` package, together with a number of their properties.
    These libraries are part of the new `containers` package located in `lib/containers`.
  - Added properties of boolean values and operations under `Haskell.Law.Bool`.
  - Added laws for the `Num` type class and its instances under `Haskell.Law.Num`.


  See https://github.com/agda/agda2hs/issues?q=milestone%3A1.4+is%3Apr for the full list of changes.

  Fixed issues
  ------------

  See https://github.com/agda/agda2hs/issues?q=milestone%3A1.4+is%3Aissue for the full list of fixed issues.
changelog-type: markdown
description: |
  [![GitHub CI](https://github.com/agda/agda2hs/workflows/CI/badge.svg)](https://github.com/agda/agda2hs/actions)

  # agda2hs

  Agda2hs is a tool for producing verified and readable Haskell code by extracting
  it from a (lightly annotated) Agda program. The goal of this project is *not* to
  translate arbitrary Agda code to Haskell. Rather it is to carve out a common
  sublanguage between Agda and Haskell, with a straightforward translation from
  the Agda side to the Haskell side. This lets you write your program in the Agda
  fragment, using full Agda to prove properties about it, and then translate it to
  nice looking readable Haskell code that you can show your Haskell colleagues
  without shame.

  ## Documentation

  Documentation can be viewed at https://agda.github.io/agda2hs. You can also find
  examples in the `test` directory of this repository, in particular the file
  [Test.agda](https://github.com/agda/agda2hs/blob/master/test/Test.agda). The
  documentation is a work in progress, so if you have been using agda2hs and want
  to contribute in some way, adding documentation or examples would be very
  welcome.

  agda2hs was introduced in the Haskell Symposium '22 paper [Reasonable Agda is
  Correct Haskell: Writing Verified Haskell using
  agda2hs](https://jesper.sikanda.be/files/reasonable-agda-is-correct-haskell.pdf).

  ## Future work

  Currently agda2hs is under active development, please take a look at
  the [issue tracker](https://github.com/agda/agda2hs/issues). If you
  have a suggestion for a new feature that is not yet on the issue
  tracker, you are welcome to create a new issue or a PR. Feature
  requests should be of the form "Add support for Haskell feature X",
  *not* "Add support for Agda feature Y" (see "Objective" above). If you
  want to compile arbitrary Agda code to Haskell, you are advised to use
  Agda's built-in GHC backend instead.
description-type: markdown
hash: c7d13a7fcbdc264761f525bd3c8e45fe06cbcc00d68b83bcfb8215a9ee02799f
homepage: ''
latest: '1.4'
license-name: BSD-3-Clause
maintainer: jesper@sikanda.be
synopsis: Compiling Agda code to readable Haskell.
test-bench-deps: {}
