homepage: ''
changelog-type: markdown
hash: 58b95b7a482972224c1f14a033f0e1621cb7d55f4e36255f568b772435ef297a
test-bench-deps: {}
maintainer: jesper@sikanda.be
synopsis: Compiling Agda code to readable Haskell.
changelog: |
  Release notes for agda2hs v1.2
  ==============================

  Changes
  -------

  - Increased bounds to support GHC 9.6.3
  - Changed flag `--rewrite-rules` to `--config`.
  - Deprecated `Tuple` (#228). Now there are distinct 2-uples (`_×_`) and 3-uples (`_×_×_`).
    Only 2-uples can be pattern-matched inside of let bindings.
  - Experimental support for *erased module parameters* (#229).
  - Support for erased hidden type parameters.
  - Functions with no clause throw a hard error when getting compiled.
  - Unboxed records can preserve any field -- not only the first one.
  - Improved documentation.

  See https://github.com/agda/agda2hs/issues?q=milestone%3A1.2+is%3Apr for the full list of changes.

  Fixed issues
  ------------

  See https://github.com/agda/agda2hs/issues?q=milestone%3A1.2+is%3Aissue for the full list of fixed issues.
basic-deps:
  bytestring: '>=0.11.5 && <0.13'
  base: '>=4.10 && <4.20'
  unordered-containers: '>=0.2.19 && <0.3'
  text: '>=2.0.2 && <2.2'
  syb: '>=0.7.2 && <0.8'
  Agda: '>=2.6.4 && <2.6.5'
  filepath: '>=1.4.1.0 && <1.5'
  containers: '>=0.6 && <0.8'
  haskell-src-exts: '>=1.23 && <1.25'
  mtl: '>=2.2.2 && <2.4'
  deepseq: '>=1.4.4 && <1.6'
  aeson: '>=2.2 && <2.3'
  yaml: '>=0.11 && <0.12'
  directory: '>=1.2.6.2 && <1.4'
all-versions:
- '1.0'
- '1.1'
- '1.2'
author: Ulf Norell, Jesper Cockx, Orestis Melkonian, Sára Juhošová, James Chapman,
  Lucas Escot, Henry Blanchette
latest: '1.2'
description-type: markdown
description: |
  [![GitHub CI](https://github.com/agda/agda2hs/workflows/CI/badge.svg)](https://github.com/agda/agda2hs/actions)

  # agda2hs

  Agda2hs is a tool for producing verified and readable Haskell code by
  extracting it from a (lightly annotated) Agda program. For example,
  the following Agda program encodes well-formed binary search trees:

  ```agda
  open import Haskell.Prelude

  _≤_ : {{Ord a}} → a → a → Set
  x ≤ y = (x <= y) ≡ True

  data BST (a : Set) {{@0 _ : Ord a}} (@0 lower upper : a) : Set where
    Leaf : (@0 pf : lower ≤ upper) → BST a lower upper
    Node : (x : a) (l : BST a lower x) (r : BST a x upper) → BST a lower upper

  {-# COMPILE AGDA2HS BST #-}
  ```

  agda2hs translates this to the following Haskell datatype:

  ```haskell
  module BST where

  data BST a = Leaf
             | Node a (BST a) (BST a)
  ```

  ## Objective

  The goal of this project is *not* to translate arbitrary Agda code to Haskell.
  Rather it is to carve out a common sublanguage between Agda and Haskell,
  with a straightforward translation from the Agda side to the Haskell side.
  This lets you write your program in the Agda fragment, using full Agda
  to prove properties about it, and then translate it to nice looking readable
  Haskell code that you can show your Haskell colleagues without shame.

  ## Documentation

  Documentation can be viewed at https://agda.github.io/agda2hs. You can also find
  examples in the `test` directory of this repository, in particular the file
  [Test.agda](https://github.com/agda/agda2hs/blob/master/test/Test.agda). The
  documentation is a work in progress, so if you have been using agda2hs and want
  to contribute in some way, adding documentation or examples would be very
  welcome.

  agda2hs was introduced in the Haskell Symposium '22 paper [Reasonable Agda is
  Correct Haskell: Writing Verified Haskell using
  agda2hs](https://jesper.sikanda.be/files/reasonable-agda-is-correct-haskell.pdf).

  ## Future work

  Currently agda2hs is under active development, please take a look at
  the [issue tracker](https://github.com/agda/agda2hs/issues). If you
  have a suggestion for a new feature that is not yet on the issue
  tracker, you are welcome to create a new issue or a PR. Feature
  requests should be of the form "Add support for Haskell feature X",
  *not* "Add support for Agda feature Y" (see "Objective" above). If you
  want to compile arbitrary Agda code to Haskell, you are advised to use
  Agda's built-in GHC backend instead.
license-name: BSD-3-Clause
