all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
author: Ulf Norell, Jesper Cockx, Orestis Melkonian, Sára Juhošová, James Chapman,
  Lucas Escot, Henry Blanchette, Viktor Csimma, Aleksander Wolska, Paul Bittner, Andreas
  Källberg, Bohdan Liesnikov, and Jakob Naucke
basic-deps:
  Agda: '>=2.7.0 && <2.8.0'
  aeson: '>=2.0.3 && <2.3'
  base: '>=4.13 && <4.21'
  bytestring: '>=0.11.5 && <0.13'
  containers: '>=0.6 && <0.8'
  deepseq: '>=1.4.4 && <1.6'
  directory: '>=1.2.6.2 && <1.4'
  filepath: '>=1.4.1.0 && <1.5'
  haskell-src-exts: '>=1.23 && <1.25'
  monad-control: '>=1.0 && <1.1'
  mtl: '>=2.2 && <2.3 || >=2.3.1 && <2.4'
  syb: '>=0.7.2 && <0.8'
  text: '>=2.0.2 && <2.2'
  transformers: '>=0.6 && <0.7'
  unordered-containers: '>=0.2.19 && <0.3'
  yaml: '>=0.11 && <0.12'
changelog: |
  Release notes for agda2hs v1.3
  ==============================

  Changes
  -------

  Changes to agda2hs:
  - Increased Agda base version to 2.7
  - Increased bounds to support GHC 9.8.4 and GHC 9.10.2
  - Re-implemented the canonicity check for instances to be simpler but more robust
  - Added {-# COMPILE AGDA2HS ... inline #-} pragma for marking definitions to be inlined during compilation to Haskell
  - Added {-# COMPILE AGDA2HS ... tuple #-} pragma for compiling record types in Agda to a tuple type in Haskell
  - Non-erased implicit arguments and instance arguments are now compiled to regular arguments in Haskell
  - Non-erased module parameters are now compiled to regular arguments in Haskell
  - Rank-N Haskell types are now supported
  - Added `agda2hs locate` command printing the path to the agda2hs prelude `.agda-lib` file

  Additions to the agda2hs Prelude:
  - New module `Haskell.Extra.Dec` for working with decidability proofs (compiled to `Bool`)
  - New module `Haskell.Extra.Refinement` for working with refinement types (compiled to the base type)
  - New module `Haskell.Extra.Erase` for working with erased types (compiled to `()`)
  - New module `Haskell.Extra.Sigma` for working with dependent pair types (compiled to tuples)
  - New module `Haskell.Extra.Loop` providing a safe `loop` function (using an erased fuel argument)
  - New module `Haskell.Extra.Delay` providing a `Delay` monad for non-termination (compiled to pure functions in Haskell)
  - New function `the` in `Haskell.Prim` for generating Haskell type annotations
  - Added properties to `Haskell.Law.Equality`: `subst`, `subst0`
  - Added properties to `Haskell.Law.Bool`: `ifFlip`, `ifTrueEqThen`, `ifFalseEqThen`
  - Added properties to `Haskell.Law.List`: `map-concatMap`, `map-<*>-recomp`, `concatMap-++-distr`
  - Added proofs that many of the instances defined in the prelude are lawful

  See https://github.com/agda/agda2hs/issues?q=milestone%3A1.3+is%3Apr for the full list of changes.

  Fixed issues
  ------------

  See https://github.com/agda/agda2hs/issues?q=milestone%3A1.3+is%3Aissue for the full list of fixed issues.
changelog-type: markdown
description: |
  [![GitHub CI](https://github.com/agda/agda2hs/workflows/CI/badge.svg)](https://github.com/agda/agda2hs/actions)

  # agda2hs

  Agda2hs is a tool for producing verified and readable Haskell code by extracting
  it from a (lightly annotated) Agda program. The goal of this project is *not* to
  translate arbitrary Agda code to Haskell. Rather it is to carve out a common
  sublanguage between Agda and Haskell, with a straightforward translation from
  the Agda side to the Haskell side. This lets you write your program in the Agda
  fragment, using full Agda to prove properties about it, and then translate it to
  nice looking readable Haskell code that you can show your Haskell colleagues
  without shame.

  ## Documentation

  Documentation can be viewed at https://agda.github.io/agda2hs. You can also find
  examples in the `test` directory of this repository, in particular the file
  [Test.agda](https://github.com/agda/agda2hs/blob/master/test/Test.agda). The
  documentation is a work in progress, so if you have been using agda2hs and want
  to contribute in some way, adding documentation or examples would be very
  welcome.

  agda2hs was introduced in the Haskell Symposium '22 paper [Reasonable Agda is
  Correct Haskell: Writing Verified Haskell using
  agda2hs](https://jesper.sikanda.be/files/reasonable-agda-is-correct-haskell.pdf).

  ## Future work

  Currently agda2hs is under active development, please take a look at
  the [issue tracker](https://github.com/agda/agda2hs/issues). If you
  have a suggestion for a new feature that is not yet on the issue
  tracker, you are welcome to create a new issue or a PR. Feature
  requests should be of the form "Add support for Haskell feature X",
  *not* "Add support for Agda feature Y" (see "Objective" above). If you
  want to compile arbitrary Agda code to Haskell, you are advised to use
  Agda's built-in GHC backend instead.
description-type: markdown
hash: 47eeb0674bf6f06b31df6f618cfdb7dab9b668f56d7cb4c780935271160f4e6c
homepage: ''
latest: '1.3'
license-name: BSD-3-Clause
maintainer: jesper@sikanda.be
synopsis: Compiling Agda code to readable Haskell.
test-bench-deps: {}
