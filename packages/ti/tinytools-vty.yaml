all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.3
- 0.1.0.4
- 0.1.0.7
author: minimaple
basic-deps:
  aeson: '>=2.1.2 && <2.2'
  aeson-pretty: '>=0.8.10 && <0.9'
  ansi-terminal: '>=1.0 && <1.1'
  base: '>=4.7 && <5'
  bimap: '>=0.5.0 && <0.6'
  bytestring: '>=0.11.4 && <0.12'
  clock: '>=0.8.4 && <0.9'
  constraints-extras: '>=0.4.0 && <0.5'
  containers: '>=0.6.7 && <0.7'
  data-default: '>=0.7.1 && <0.8'
  dependent-map: '>=0.4.0 && <0.5'
  dependent-sum: '>=0.7.2 && <0.8'
  directory: '>=1.3.8 && <1.4'
  extra: '>=1.7.14 && <1.8'
  file-embed: '>=0.0.15 && <0.1'
  filepath: '>=1.4.100 && <1.5'
  http-conduit: '>=2.3.8 && <2.4'
  ilist: '>=0.4.0 && <0.5'
  lens: '>=5.2.3 && <5.3'
  mtl: '>=2.3.1 && <2.4'
  optparse-applicative: '>=0.18.1 && <0.19'
  primitive: '>=0.7.4 && <0.8'
  ref-tf: '>=0.5.0 && <0.6'
  reflex: '>=0.9.2 && <1'
  reflex-potatoes: '>=0.1.0 && <0.2'
  reflex-test-host: '>=0.1.2.3 && <0.2'
  reflex-vty: '>=0.5.1 && <0.6'
  relude: '>=1.2.1 && <1.3'
  semialign: '>=1.3 && <1.4'
  template-haskell: '>=2.18 && <2.21'
  text: '>=2.0.2 && <2.1'
  these: '>=1.2 && <1.3'
  time: '>=1.12.2 && <1.13'
  tinytools: ==0.1.0.7
  tinytools-vty: '>=0'
  vty: '>=5.28 && <5.39'
changelog: |
  # Changelog for tinytools-vty

  ## [unreleased]

  ## [0.1.0.7]
  - fix several bugs
  - update to use 0.1.0.7 of tinytools

  ## [0.1.0.5]
  - add version string to welcome popup title
  - add about button that brings up the welcome popup
  - make the welcome popup contents scrollable
  - clean up readme
  - delete the old termwidth generation exe
  - fix an issue where cursor doesn't show up at end of line in text input boxes
  - update to use 0.1.0.5 of tinytools

  ## [0.1.0.4]
  - update to use 0.1.0.4 of tinytools

  ## [0.1.0.3]
  ### Changed
  - minor stuff to fix build

  ## [0.1.0.2]
  ### Added
  - minor stuff to fix build
  - Snake

  ## [0.1.0.0] - alpha
  ### Added
  - tinytools-vty just a test release
changelog-type: markdown
description: "# tinytools-vty\n\n`tinytools-vty` is a mono-space unicode diagram editor
  written in Haskell\n\nThis repository contains the [reflex-vty](https://hackage.haskell.org/package/reflex-vty)
  based view/controller implementation built on top of the [tinytools](https://github.com/minimapletinytools/tinytools)
  model.\n\n![](screenshot.png)\n\ntinytools is still in BETA and may be quite unstable.
  Save often!!!\n\n# installation \n\n### pre-requisites\n[text-icu](https://github.com/haskell/text-icu)
  is required as a prerequisite. On mac\n\n```\nbrew install icu4c\nbrew link icu4c
  --force\nexport PKG_CONFIG_PATH=\"$(brew --prefix)/opt/icu4c/lib/pkgconfig\"\n```\n\nYou
  will also need the haskell build tool cabal. The best way to do this is using [ghcup](https://www.haskell.org/ghcup/)\n\nTo
  install tiny tools run `cabal install tinytools-vty` and then you can run `tinytools`
  \nOr if you are building locally then `cabal run tinytools`\n\nNOTE that `tinytools`
  is also the name of the base model library for `tinytools-vty`. If you just `cabal
  install tinytools` you will install the library and not the exe!!!\n\n# usage\n\nWhen
  you first run `tinytools` a tutorial file will open which contains information on
  how to use `tinytools-vty`. \n- To open an empty document do `tinytools --empty`
  (or `cabal run tinytools -- --empty`) \n- In order to support unicode wide chars
  (optional), you must first generate the term width file for your terminal `tinytools
  --widthtable`\n\n`tinytools-vty` has a very intuitive interface and most operations
  should be clear.\n\n## tools\n```\n[(v)select][(p)an][(b)ox]      \n[(l)ine][pai(n)t]
  \  \n```\n\n### the [(v)select] tool\n\nThe select tool is your do all tool for
  interacting with existing elements in your document. Click on individual elements
  to select or modify it. Click and drag to select multiple elements.\n\n### the [(p)an]
  tool\n\nclick + drag in the canvas area with the pan tool to pan the canvas.\n\n###
  the [(b)ox] tool\n\nUse the box tool to create boxes. After creating or selecting
  a box, click on the top border to add or modify a label. Click inside the box to
  add or modify text. You can change the styling of your lines in the left menu.\n\n###
  the [(l)ine] tool\n\nUse the line tool to create lines. Lines can attach to existing
  boxes on either end. After selecting a line, you can move either end point of line
  or change their attachment. You click and drag in the middle of a line to add midpoints
  to your line. You can double click on a line to add a line label. Line labels can
  be moved by clicking and dragging on highlighted handle in the middle. You can change
  the styling of your lines in the left menu.\n\n### the [(t)ext] tool\n\nSame as
  the box tool except you can immediately add text to the box without additional clicking!\n\n###
  the [pai(n)t] tool\n\nThe paint tool lets you create areas that take free form text.
  After selecting a paint area, you can move the cursor anywhere inside and add text.\n\n##
  layers\n\nOn the left hand side is a very sophisticated layering system. All elements
  will show up in the layer system. You can drag elements around to reorder them.
  You can add folders to create a hierarchical layer system. You can hide or lock
  elements in the layers menu. You can select elements in the layers menu.\n\n## shortucts\n\n-
  (ctrl-s) save\n- (ctrl-p) print\n- (ctrl-q) quit\n- (ctrl-c) copy\n- (ctrl-v) paste\n-
  (ctrl-z) undo\n- (ctrl-y) redo\n- (ctrl-o) open\n- (ctrl-n) new\n\n\n## menu\n```\n[new][open][save][save
  as]     \n[write to \"tt.txt\"][quit] \n```\n\n- [new]: creates a new empty doc,
  prompts to save if there are unsaved changes\n- [open]: open a doc from disk, all
  docs must end .potato extension\n- [save]: save the doc to the existing file context,
  same as save as if no file context\n- [save as]: save the doc to a new file context\n-
  [write to \"tt.txt\"]: writes the doc to \"tt.txt\"\n- [quit]: quit the app, prompts
  to save if there are unsaved changes\n\n\n# unicode widechar and grapheme cluster
  support\n\nUnicode character display width seems to vary by terminal. `tinytools-vty`
  uses the xterm-256 (mac default terminal) terminal width mappings by default. You
  can run `tinytools-vty` with the `--widthtable` arg to generate the table to your
  local config directory for the current terminal. Generating the table samples each
  unicode character inside the terminal and takes a few seconds to run. Please see
  the `Graphics.Vty.UnicodeWidthTable` module of the [vty](https://hackage.haskell.org/package/vty)
  for more info. Grapheme clusters are not really supported by terminals so they are
  currently disabled \U0001F62D.\n\nAlso note that many mono-space text displays do
  not display unicode widechars at a width consistent with its mono-spacing \U0001F615.
  \n\n\n"
description-type: markdown
hash: df27aed96faff365e4a179c4958487985c5b13ba02d6336144bf47d6f3ab260c
homepage: https://github.com/minimapletinytools/tinytools-vty#readme
latest: 0.1.0.7
license-name: BSD-3-Clause
maintainer: minimapletinytools@gmail.com
synopsis: tinytools-vty is a terminal based monospace unicode diagram editing tool
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.7 && <5'
  data-default: '>=0.7.1 && <0.8'
  hspec: '>=0'
  hspec-contrib: '>=0'
  ref-tf: '>=0.5.0 && <0.6'
  reflex: '>=0.9.2 && <1'
  reflex-test-host: '>=0.1.2.3 && <0.2'
  reflex-vty: '>=0.5.1 && <0.6'
  relude: '>=1.2.1 && <1.3'
  tinytools: '>=0.1.0.7 && <0.2'
  tinytools-vty: '>=0'
  vty: '>=5.28 && <5.39'
