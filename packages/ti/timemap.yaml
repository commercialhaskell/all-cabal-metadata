all-versions:
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
author: Athan Clark
basic-deps:
  base: '>=4.8 && <5'
  containers: '>=0'
  focus: '>=0'
  hashable: '>=0'
  list-t: '>=0'
  stm: '>=0'
  stm-containers: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
changelog: ''
changelog-type: ''
description: |
  timemap
  =======

  A mutable `Data.HashMap`-like structure, where each entity is implicitly indexed
  by their last-modified time. Useful for keyed caches.

  ## Usage

  ```haskell
  import qualified Data.TimeMap as TM
  import Control.Concurrent.STM


  main :: IO ()
  main = do
    -- create a new, empty reference
    mapRef <- atomically TM.newTimeMap

    -- insert a new key/value pair in the map. Note that
    -- `someKey` should implement `Hashable`. This also
    -- sets the creation time of the value to "now".
    TM.insert someKey 0 mapRef

    -- adjusts the value of `someKey` to `1`. Note that
    -- also resets the creation time of the value to "now".
    TM.adjust (+1) someKey mapRef

    -- wait a second
    threadDelay 1000000

    -- delete all values older than 1 second from now.
    atomically $ TM.filterFromNow 1 mapRef

    -- Will return `Nothing`
    atomically $ TM.lookup someKey mapRef

    return ()
  ```

  ## How it works

  There are two internal maps for a `TimeMap k a`:

  - a "time-indexed" map reference: `TVar (Map UTCTime (HashSet k))`
  - a mutable map of values: `STMContainers.Map.Map k (UTCTime, a)`

  ### Insertion

  Inserting a new value first performs a lookup on the hashtable to see if the key
  already exists:

  - If it doesn't, insert the current time and the element that into the mutable map.
    Then, insert the _key_ as the value, and the _time_ as the key into
    the time-indexed multimap.
  - If it does, remove the entry from the time-indexed multimap for the old time, before
    doing the same thing as the first bullet.

  ### Lookups

  This doesn't have to create new data, and thus doesn't need full `IO`. All it does is
  lookup the key in the mutable map.

  ### Filtering

  To filter out all entries older than some time, you have to use the `Data.Map.splitLookup`
  function to split the time-indexed multimap into the entries you want to delete from
  the main container, and the ones you want to keep. You simply `writeTVar` the map you want
  to keep, but for the ones you want to delete, you need to get all the `elems` of
  that map. Then, for every key that we need to delete, we delete it from the
  main container. Suprisingly, this appears to operate in constant time, regardless of
  the size of the map.

  ## How to run tests

  ```bash
  stack test
  ```

  ## Benchmarks

  ```bash
  stack bench --benchmark-arguments="--output profile.html"
  ```

  You can also view the results on my box
  [here](https://htmlpreview.github.io/?https://github.com/athanclark/timemap/blob/master/profile.html).
description-type: markdown
hash: 1918a68ec967eca5f7babf730c88ce6cf87409eb8814b2e96926b3838f54ce79
homepage: https://github.com/athanclark/timemap#readme
latest: 0.0.7
license-name: BSD-3-Clause
maintainer: athan.clark@localcooking.com
synopsis: ''
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.8 && <5'
  containers: '>=0'
  criterion: '>=0'
  focus: '>=0'
  hashable: '>=0'
  list-t: '>=0'
  quickcheck-instances: '>=0'
  stm: '>=0'
  stm-containers: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  time: '>=0'
  timemap: '>=0'
  unordered-containers: '>=0'
