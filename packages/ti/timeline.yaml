homepage: ''
changelog-type: markdown
hash: f2eaa8943d7f0d0c33c9e8ab549ce23cb49dd75a996530cdadee7d43b3f10c2a
test-bench-deps:
  bytestring: '>=0.10 && <0.13'
  base: '>=4.14.3 && <4.19'
  tasty-golden: ^>=2.3.5
  time: '>=1.9.3 && <1.13'
  tasty-hedgehog: '>=1.2.0.0'
  indexed-traversable: ^>=0.1.2
  text: ^>=1.2.4.1 || ^>=2.0 && <2.2
  hedgehog: '>=1.1 && <1.5'
  containers: '>=0.6.5 && <0.7'
  hashable: ^>=1.4.2.0
  tasty-hunit: ^>=0.10.0.3
  transformers: '>=0.5.6.2 && <0.6.2.0'
  tasty: ^>=1.4.3
  timeline: -any
maintainer: Bellroy Tech Team <haskell@bellroy.com>
synopsis: Data type representing a piecewise-constant function over time
changelog: |
  # Changelog

  ## 0.1.0.0
  - Open source the timeline library we use internally at Bellroy
basic-deps:
  semigroupoids: '>=5.3.7 && <6.1'
  base: '>=4.14.3 && <4.19'
  th-compat: '>=0.1.4 && <0.2'
  time: '>=1.9.3 && <1.13'
  indexed-traversable: '>=0.1.2 && <0.2'
  text: ^>=1.2.4.1 || ^>=2.0 && <2.2
  hedgehog: '>=1.1 && <1.5'
  containers: '>=0.6.5 && <0.7'
  template-haskell: '>=2.16.0 && <2.21'
all-versions:
- 0.1.0.0
author: Bellroy Tech Team <haskell@bellroy.com>
latest: 0.1.0.0
description-type: markdown
description: |
  # timeline

  ## Motivation

  The world is always changing, and often we want to manage the changes of data
  using computers. Below are some concrete examples:

  - Employee data such as compensation, city, tax rule, time-off, etc.
  - Prices of products. A product could have different prices on Amazon and EBay,
    and in different currencies.

  Timeline data is often implemented by attaching extra fields to your business
  object, denoting the start and end time of each interval. However, only
  representing and storing the data is not sufficient, we need to run operations
  on timeline data, like extracting a single data point at some specific time,
  merging multiple timelines together, etc.

  If you have a similar use case and don't want to reinvent the wheel, this
  library is for you.

  ## Module Organization

  - `Data.Timeline` essential types and functions
  - `Data.Timeline.Hedgehog` hedgehog generators for timeline types

  ## Getting Started

  The core type is `Timeline a`, refer to
  [Haddock](https://hackage.haskell.org/package/timeline-0.0.1.0/docs/Data-Timeline.html)
  for its usage.

  ## Contribution
  Bellroy actively maintains this project. Feel free to submit issues and
  pull requests!

  The code is formatted with [`ormolu`](https://hackage.haskell.org/package/ormolu)

  If you use Nix:
  - `nix develop` enter a shell with all necessary tools
  - `nix build` build and run tests on all GHC versions we support
  - Use `nix flake show` to view a full list of outputs
license-name: BSD-3-Clause
