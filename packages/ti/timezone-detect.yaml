homepage: https://github.com/lfborjas/timezone-detect#readme
changelog-type: markdown
hash: bcf13d45886e49f2a86695988295d7381471cc1c620b9cf12db34f52e591f097
test-bench-deps:
  base: '>=4.9 && <=4.15'
  time: '>=1.9.1 && <=1.10'
  timezone-series: '>=0.1.0 && <0.2'
  hspec: '>=2.7 && <2.8'
  timezone-olson: '>=0.2.0 && <0.3'
  QuickCheck: '>=2.12 && <=2.14'
  timezone-detect: -any
  directory: '>=1.3 && <1.4'
maintainer: timezone-detect@lfborjas.com
synopsis: Haskell bindings for the zone-detect C library; plus tz-aware utils.
changelog: |
  # Changelog for timezone-detect

  ## v0.3.0.1 (2021-03-14)

  * Adds property tests.
  * Updates base to work with newer versions of Haskell.

  ## v0.3.0.0 (2020-09-02)

  **Breaking Changes!**

  * Introduce `openTimeZoneDatabase` and `closeTimeZoneDatabase` to hew closer to
    the underlying library's intended usage. And `withTimeZoneDatabase` to manage the
    opening and closing of the TZ file around an IO computation with it.
  * Changes the signature of `lookupTimeZoneName` to take a timezone database, not
    a file, same with `timeAtPointToUTC`. Introduces `*FromFile` variants that
    work with the path to the DB file and manage the opening/closing.


  ## v0.2.2.0 (2020-08-30)

  * Explicitly import `MonadFail` and `fail`; hide the `fail` from `Prelude`.
  * Introduces `timeInTimeZoneToUTC`, for when the timezone name is already available.
  * Minor updates to help build with older Haskell versions.
  * Update github actions to build on said older haskells!
  * `TimeZoneName` is now an alias for `FilePath`.

  ## v0.2.1.0 (2020-08-30)

  * Depend on `base >= 4.9` to ensure `MonadFail` and `liftIO` are included.

  ## v0.2.0.0 (2020-08-30)

  * Introduces dependencies on `time`, `timezone-series` and `timezone-olson`.
  * __Breaking change__: this library is now aware of `Data.Time`, `TimezoneName` has been changed
    to `TimeZoneName` for consistency, and the `Detect` module is now a submodule of `Data.Time.LocalTime.TimeZone`.
  * The function to find a timezone name is now more general (instead of `Either`) expects an instance of `MonadFail`,
    like `parseTimeM` in `Data.Time` does, and is now named `lookupTimeZoneName` for clarity.
  * Introduces `timeAtPointToUTC` to determine the UTC instant represented by a local time in a latitude
    and longitude: uses the timezone-series and timezone-olson packages to reflect any daylight savings
    or other historical circumstances that may affect the timezone offset for the timezone in effect
    around the given geographic point.


  ## v0.1.0.0 (2020-08-29)

  * Bundles the C code for [ZoneDetect](https://github.com/BertoldVdb/ZoneDetect)
  * Exposes the `lookupTimezone` function to obtain the standardized name of a timezone, given
    a database file, latitude and longitude.
basic-deps:
  base: '>=4.9 && <=4.15'
  time: '>=1.9.1 && <=1.10'
  timezone-series: '>=0.1.0 && <0.2'
  timezone-olson: '>=0.2.0 && <0.3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.3.0.1
author: Luis Borjas Reyes
latest: 0.3.0.1
description-type: markdown
description: "# TimezoneDetect\n\n![build](https://github.com/lfborjas/timezone-detect/workflows/Haskell%20CI/badge.svg)\n\n\nHaskell
  bindings to the excellent [ZoneDetect](https://github.com/BertoldVdb/ZoneDetect)
  library, plus additional\nUNIX-aware facilities to determine the UTC time of a given
  local time in a latitude and longitude.\n\n## Usage\n\nYou'll need timezone database
  files to work with this library, see instructions [in the original repository](https://github.com/BertoldVdb/ZoneDetect/tree/master/database).\nA
  copy is provided in the `test` directory of this repository, but it's intentionally
  not bundled in the package. We make no guarantees of its correctness,\nwe recommend
  you use the original authors' files!\n\n\n### Timezone Name Lookup\n\nOnce you have
  those files in hand, you'll be able to get a timezone from a given latitude and
  longitude:\n\n```haskell\n>>> db <- openTimeZoneDatabase \"./test/tz_db/timezone21.bin\"
  \n>>> let tz = lookupTimeZoneName db 40.7831 (-73.9712) :: Maybe TimeZoneName\nJust
  \"America/New_York\"\n>>> closeTimeZoneDatabase db\n```\n\nYou can use `withTimeZoneDatabase`
  to \"bracket\" access to the file (take care of opening and closing,)\nbut if all
  you want to do is do a one-off lookup, a convenience function that opens and closes
  the file when done\nis also provided, specialized to `IO`:\n\n```haskell\n>>> tz
  <- lookupTimeZoneNameFromFile \"./test/tz_db/timezone21.bin\" 40.7831 (-73.9712)\n\"America/New_York\"\n```\n\n###
  LocalTime to UTCTime conversion\n\nAdditionally, we depend on the [timezone-series](https://hackage.haskell.org/package/timezone-series)
  and [timezone-olson](https://hackage.haskell.org/package/timezone-olson) packages
  to add awareness of `tz database` information.\n\nWith that, you can look up the
  UTC time at a point in time and space:\n\n```haskell\n>>> import Data.Time\n>> db
  <- openTimeZoneDatabase \"./test/tz_db/timezone21.bin\"\n>>> localWinter <- parseTimeM
  True defaultTimeLocale \"%Y-%-m-%-d %T\" \"2019-12-25 00:30:00\"\n>>> utcTime <-
  timeAtPointToUTC db 40.7831 (-73.9712) localWinter\n2019-12-25 05:30:00 UTC\n\n>>>
  localSummer <- parseTimeM True defaultTimeLocale \"%Y-%-m-%-d %T\" \"2019-07-25
  00:30:00\"\n>>> utcTime <- timeAtPointToUTC db 40.7831 (-73.9712) localWinter\n2019-07-25
  04:30:00 UTC\n>>> closeTimeZoneDatabase db\n```\n\nYou can also opt to obtain the
  timezone name separately (if you wanted to isolate that as a failure scenario,)\nand,
  once in possession of it, use `timeInTimeZoneToUTC`:\n\n```haskell\n>>> localSummer
  <- parseTimeM True defaultTimeLocale \"%Y-%-m-%-d %T\" \"2019-07-25 00:30:00\"\n>>>
  utcTime <- timeInTimeZoneToUTC \"America/New_York\" localSummer\n2019-07-25 04:30:00
  UTC\n```\n\n## Copyright\n\nThis library is released under the GPL v2; but the license
  for the underlying C library bears the following copyright:\n\n> Copyright (c) 2018,
  Bertold Van den Bergh (vandenbergh@bertold.org) \n> All rights reserved.\n> Redistribution
  and use in source and binary forms, with or without\n> modification, are permitted
  provided that the following conditions are met:\n>    * Redistributions of source
  code must retain the above copyright\n>       notice, this list of conditions and
  the following disclaimer.\n>    * Redistributions in binary form must reproduce
  the above copyright\n>       notice, this list of conditions and the following disclaimer
  in the\n>       documentation and/or other materials provided with the distribution.\n>
  \   * Neither the name of the author nor the\n>       names of its contributors
  may be used to endorse or promote products\n>       derived from this software without
  specific prior written permission.\n>\n> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
  HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n> ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
  BUT NOT LIMITED TO, THE IMPLIED\n> WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE\n> DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR DISTRIBUTOR
  BE LIABLE FOR ANY\n> DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES\n> (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n>
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n> ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n> (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n> SOFTWARE,
  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
license-name: GPL-2.0-only
