all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.7.0.1
- 0.8.0.0
author: Sho Kuroda
basic-deps:
  aeson: '>=0.10'
  attoparsec: '>=0.12'
  base: '>=4.7 && <5'
  bytestring: '>=0.10'
  crypton: '>=0'
  exceptions: '>=0'
  http-client: '>=0'
  http-client-tls: '>=0'
  jose-jwt: '>=0.7'
  network: '>=2.6'
  network-uri: '>=2.6'
  scientific: '>=0'
  text: '>=1.2 && <1.3 || >=2.0 && <2.2'
  time: '>=0'
  tls: '>=1.3.2'
changelog: |
  # ChangeLog

  ## [0.8.0.0]
  - Switch to crypton ([#60](https://github.com/krdlab/haskell-oidc-client/pull/60))

  ## [0.7.0.1]
  - bump the text bound #59 ([#59](https://github.com/krdlab/haskell-oidc-client/pull/59))

  ## [0.7.0.0]
  - Lookup by state with sessionStoreGet ([#57](https://github.com/krdlab/haskell-oidc-client/pull/57))

  ## [0.6.1.0]
  - Remove max version cap on bytestring and min >= 0.11 ([#54](https://github.com/krdlab/haskell-oidc-client/pull/54))

  ## [0.6.0.0]
  ### Added
  - Preserve the raw JWT in the tokens record returned by `validate` ([#43](https://github.com/krdlab/haskell-oidc-client/pull/43))

  ### Fixed
  - s/JwtExceptoin/JwtException/ ([#45](https://github.com/krdlab/haskell-oidc-client/pull/45))
  - import data.monoid ([#46](https://github.com/krdlab/haskell-oidc-client/pull/46))
  - s/Incosistent/Inconsistent/ ([#49](https://github.com/krdlab/haskell-oidc-client/pull/49))
  - Use lenient decoding ([#50](https://github.com/krdlab/haskell-oidc-client/pull/50))

  ## [0.5.1.0]
  ### Fixed
  - fix: generate correct discovery url ([#39](https://github.com/krdlab/haskell-oidc-client/pull/39))
  - Fix discovery URL generation ([#40](https://github.com/krdlab/haskell-oidc-client/pull/40))
      - Corrected more cases

  ## [0.5.0.0]
  ### Added
  - Add implicit id_token flow. See [#34](https://github.com/krdlab/haskell-oidc-client/pull/34).

  ### Changed
  - discover: Append well-known part to parsed request. See [#33](https://github.com/krdlab/haskell-oidc-client/pull/33).

  ### Fixed
  - Fix unsupported algorithm error. See [#36](https://github.com/krdlab/haskell-oidc-client/pull/36).

  ## [0.4.0.1]
  ### Fixed
  - Allow for multiple algorithms in the JWK Set. See [#28](https://github.com/krdlab/haskell-oidc-client/pull/28).
  - Support GHC < 8.4. See [#30](https://github.com/krdlab/haskell-oidc-client/issues/30).

  ## [0.4.0.0]
  ### Added
  - Added a validation of 'nonce' parameter. See [#24](https://github.com/krdlab/haskell-oidc-client/pull/24).
  - Made optional claims available. See [#24](https://github.com/krdlab/haskell-oidc-client/pull/24).
  - The lifecycles of 'nonce' and 'state' can also be managed by `SessionStore`. See [#24](https://github.com/krdlab/haskell-oidc-client/pull/24).

  ### Changed
  - Made `TokenResponse` parsing strict. See [#23](https://github.com/krdlab/haskell-oidc-client/pull/23).
  - A signing algorithm is now obtained from OpenID Provider Metadata. See [#24](https://github.com/krdlab/haskell-oidc-client/pull/24).
  - 'profile' scope added to 'examples/scotty', and name / email / picture shown. See [#25](https://github.com/krdlab/haskell-oidc-client/pull/25).

  ## [0.3.0.1]
  ### Changed
  - 'expires_in' can now parsed both String and Decimal number. See [#15](https://github.com/krdlab/haskell-oidc-client/pull/15).

  ### Fixed
  - Improved error messages. See [#15](https://github.com/krdlab/haskell-oidc-client/pull/15).

  ## [0.3.0.0]
  ### Changed
  - Changed `Configuration` fileds. See [#11](https://github.com/krdlab/haskell-oidc-client/pull/11).

  ### Fixed
  - Fixed Hackage tarball. See [#13](https://github.com/krdlab/haskell-oidc-client/pull/13).

  ## [0.2.0.0]
  ### Changed
  - Refactored modules, exports, types, and functions.

  ## [0.1.0.1]
  ### Changed
  - Adjusted dependency version.

  ## [0.1.0.0]

  First public release.
changelog-type: markdown
description: |
  # OpenID Connect 1.0 library for Relying Party

  [![Testing](https://github.com/krdlab/haskell-oidc-client/workflows/Testing/badge.svg)](https://github.com/krdlab/haskell-oidc-client/actions?query=workflow%3ATesting)

  This package supports implementing of an OpenID Connect 1.0 Relying Party. It's written in Haskell.

  This package uses [jose-jwt](http://github.com/tekul/jose-jwt) package for decoding a received tokens.

  ## Usage

  ```sh
  $ cabal update
  $ cabal install oidc-client
  ```

  The documentation is available in [Hackage](https://hackage.haskell.org/package/oidc-client).

  ## Run example

  `examples/scotty` is a runnable code. If you try to run it, execute commands as follows:

  ```sh
  $ stack build --flag oidc-client:build-examples
  ```

  and then

  ```sh
  $ export OPENID_CLIENT_BASE_URL="http://localhost:3000"
  $ export OPENID_CLIENT_ID="Your client ID"
  $ export OPENID_CLIENT_SECRET="Your client secret"
  $ stack exec scotty-example
  ```

  You can access to <http://localhost:3000/login>.
description-type: markdown
hash: ad04bcb9680c81ca364ed097929265fe79a036b5a2dd556f6ff344146da34afd
homepage: https://github.com/krdlab/haskell-oidc-client
latest: 0.8.0.0
license-name: MIT
maintainer: Sho Kuroda <krdlab@gmail.com>
synopsis: OpenID Connect 1.0 library for RP
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  crypton: '>=0'
  exceptions: '>=0'
  hspec: '>=0'
  http-client: '>=0'
  http-client-tls: '>=0'
  http-types: '>=0'
  jose-jwt: '>=0'
  network-uri: '>=0'
  oidc-client: '>=0'
  scientific: '>=0'
  text: '>=0'
  time: '>=0'
