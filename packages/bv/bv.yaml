all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.4.0
- 0.4.1
- '0.5'
author: Iago Abal <mail@iagoabal.eu>
basic-deps:
  base: '>=4.6 && <5'
  ghc-prim: '>=0'
  integer-gmp: '>=0.5.1'
changelog: |2+

  0.5.0
  =====

  Note that changes in `fromInteger` and `toInteger` implementations break backwards compatibility.
  I hope this will not cause major problems, let me know otherwise.

  * Make _bv_ with compatible with GHC 8.4.1 (_base_ 4.11). Thanks to Kosyrev Serge!
  * Define `toInteger` as `int` rather than `nat`.
  * Make `fromInteger` consistent and always encode in two's complement, also positive integers.
  * As a result of the two previous changes, now `toInteger . fromInteger == id`, as it should be.
  * Add `Read BV` instance (based on `Text.Read`, so GHC-only).
  * Fix a few bugs in the non-GMP implementation. (Fortunately, GMP is the default.)
  * Remove upper bounds on testing dependencies.

  0.4.1
  =====

  Another maintenance release:

  * Fix compilation error with GHC 8.0.1.
  * Add `check-bounds' flag so the user decides whether to perform bounds checking.

  0.4.0
  =====

  This is a maintenance release, but it introduces changes to the API that required a new major version.
  In summary, I have fixed a few bugs, optimized a few functions, and added a few more properties (tests).
  Apart from that, and the usual clean up, there are also a handful of new API functions that I judged useful.

  For performance reasons, this release introduces GMP specific optimizations.
  The GMP-based backend is automatically used if available, unless _-f -gmp_ is specified.

  Dependencies
  -----------

  Only if the library is compiled with _-fgmp_ (it will, by default, if possible):

  * Depend on the _ghc-prim_ package, the GHC's internal representation of primitive types.
  * Depend on the _integer-gmp_ package, the Haskell bindings for GNU's GMP library.
  * Use _MagicHash_ extension to work with unboxed machine integers.

  Interface
  ---------

  * Added _bitVecs_ (list of bit-vector literals).
  * Added _@:_ (indexing of multiple bits).
  * Added _pow_ as an optimized exponentiation function.
  * Fixed _bitVec_ (value must fit bit-with).
  * Fixed _negate_ (wrong on zero bit-vector).
  * Define _and_ and _or_ for the case of an empty list.
  * Declared Monoid instance for bit-vector (monoid under concanetation).
  * Define _join_ for the case of an empty list (it must be equivalent to _mconcat_).
  * Optimized when using the GMP backend: _fromBits_, _fromInteger_, and _lg2_.
  * Remove uninteresting _maxNat_ function from export list.

  0.3.0
  =====

  This is a maintenance release, but it introduces changes to the API that required a new major version.

  Dependencies
  -----------

  * Increase base version to 4.6.
  * Support base 4.7 (new methods were added to the _Bits_ type-class).
  * Use of _CPP_ extension for conditional compilation.

  Interface
  ---------

  * Replace assertions by errors when checking preconditions of exported functions.
  * Use proper names for functions and encourage qualified import, names ended with underscore are now deprecated.
  * Add _lsb1_ function to complement _msb1_.
  * Tweak code and documentation.

changelog-type: markdown
description: "A library for bit-vector arithmetic in Haskell\n=========================================\n\nBit-vectors
  are represented as a pair of a _size_ and a _value_,\nwhere sizes are of type _Int_
  and values are _Integer_.\nOperations on bit-vectors are translated into operations
  on integers.\nRemarkably, most operations taking two or more bit-vectors, will\nperform
  zero-padding to adjust the size of the input bit-vectors\nwhen needed (eg. when
  adding bit-vectors of different sizes).\nIndexing operators don't do this, to avoid
  masking _out of bounds_\nerrors.\n\nOther libraries\n-------------\n\nThere exist
  many Haskell libraries to handle bit-vectors, but to the\nbest of my knowledge _bv_
  is the only one that adequately supports\nbit-vector arithmetic.\n\nIf you do not
  need bit-vector arithmetic, then you may consider using\nany of these other libraries,
  which could offer more compact and \nefficient implementations of bit arrays.\n\nImporting
  and name clashes\n-----------------------\n\nMany exported functions name-clash
  with Prelude functions, it is\ntherefore recommended to do a qualified import:\n\n
  \   import           Data.BitVector ( BV )\n    import qualified Data.BitVector
  as BV\n\nRunning the test suite\n--------------------\n\nIf you wish to run the
  test suite simply:\n\n    cabal configure -ftest\n    cabal build\n\nThen run:\n\n
  \   dist/build/bv-tester/bv-tester\n\nPerformance\n----------\n\n**Tip:** For best
  performance compile with _-fgmp_.\n\n**Tip:** If you are brave enough, compile with
  _-f -check-bounds_ (disables index bounds checking).\n\nThe _BV_ datatype is simply
  a pair of an _Int_, to represent the\n_size_, and an arbitrary-precision _Integer_,
  to represent the\n_value_ of a bit-vector.\nBoth fields are strict, and we instruct
  GHC to unbox strict fields.\nFurther, we ask GHC to inline virtually all bit-vector
  operations.\nWhen inlined, GHC should be able to remove any overhead associated\nwith
  the _BV_ data type, and unbox bit-vector sizes.\nPerformance should depend mostly
  on the _Integer_ data type\nimplementation.\n\n"
description-type: markdown
hash: 2acb4e3bc8cbe5795c2cb0865832d5c220b55f89153acf986445704fc072bff7
homepage: https://github.com/iagoabal/haskell-bv
latest: '0.5'
license-name: BSD-3-Clause
maintainer: Iago Abal <mail@iagoabal.eu>
synopsis: Bit-vector arithmetic library
test-bench-deps: {}
