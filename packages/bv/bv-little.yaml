homepage: https://github.com/recursion-ninja/bv-little
changelog-type: markdown
hash: 1d1d274c148273e9b7ef334dbc97750f523683cfb103f434528988ab93b56087
test-bench-deps:
  tasty-smallcheck: ==0.8.*
  base: '>=4.16.1 && <5'
  text-show: ==3.10.*
  criterion: ^>=1.6
  smallcheck: ==1.2.*
  tasty-quickcheck: ==0.10.*
  bv-little: -any
  hashable: ==1.4.*
  tasty-hunit: ==0.10.*
  mono-traversable-keys: '>=0.2 && ^>=0.3'
  tasty: ==1.4.*
  deepseq: '>=1.4.6 && <1.5'
  QuickCheck: '>=2.14.2 && <2.15'
  mono-traversable: '>=1.0.5.0 && <1.1'
maintainer: hackage@recursion.ninja
synopsis: Efficient little-endian bit vector library
changelog: |
  `bv-little` *follows semantic versioning [(SemVer)](https://semver.org/).*


  ## [v1.3.0][7]

    * Added back `TextShow` instance

    * Added specializations

    * Dropping support for GHC < 9.2.3


  ## v1.2.0

    * Restructuring library to expose instances in a refined, "opt-in" manner

    * Dropped support for GHC < 8.8.1

    * Added `Binary` instance

    * Added `Read` instance


  ## [v1.1.1][6]

    * Added more benchmarks

    * Updated test suite to be more reliable

  ## [v1.1.0][5]

    * Added `rank` and `select` functions


  ## [v1.0.1][4]

    * Correcting Eq instance to test for value equality and not construction equality

    * Updated unit tests do not fail when the antecedent of logical implication cannot be satisfied


  ## [v1.0.0][3]

    * Added explicit recursion to monomorphic folds to improve time and space performance

    * Added the following instances:
      * `MonoAdjustable`
      * `MonoFoldableWithKey`
      * `MonoIndexable`
      * `MonoKeyed`
      * `MonoLookup`
      * `MonoTraversableWithKey`
      * `MonoZip`
      * `MonoZipWithKey`
      * `TextShow`

    * Updated the following functions to be constant time:
      * `omap`
      * `olength64`
      * `oall`
      * `oany`
      * `ofoldr1Ex`
      * `ofoldl1Ex`
      * `oelem`
      * `onotElem`
      * `ozipWith`


  ## [v0.1.2][2]

    * Updating to base bounds for GHC 8.6.1


  ## [v0.1.1][1]

    * Updated to well-typed internal representation

    * Corrected defect in rotate, rotateL, and rotateR

    * Improved performance by switching exponentiation with base 2 to bit shifting operations

    * Improved performance of clearBit by increasing strictness

    * Increased benchmark coverage

    * Increased test suite coverage


  ## [v0.1.0][0]

    * Created instances of applicable typeclass instances

    * Added numeric conversion functions

    * Added basic test suite

    * Added stub benchmark


  [0]: https://github.com/recursion-ninja/bv-little/tree/v0.1.0
  [1]: https://github.com/recursion-ninja/bv-little/tree/v0.1.1
  [2]: https://github.com/recursion-ninja/bv-little/tree/v0.1.2
  [3]: https://github.com/recursion-ninja/bv-little/tree/v1.0.0
  [4]: https://github.com/recursion-ninja/bv-little/tree/v1.0.1
  [5]: https://github.com/recursion-ninja/bv-little/tree/v1.1.0
  [6]: https://github.com/recursion-ninja/bv-little/tree/v1.1.1
  [7]: https://github.com/recursion-ninja/bv-little/tree/v1.3.0
basic-deps:
  base: '>=4.16.1 && <5'
  bv-little: -any
all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.2
- 1.0.0
- 1.0.1
- 1.1.0
- 1.1.1
- 1.3.0
author: Alex Washburn
latest: 1.3.0
description-type: markdown
description: |
  ## Efficient little-endian bit vector Haskell library

  [![Build Status](https://travis-ci.org/recursion-ninja/bv-little.svg?branch=master)](https://travis-ci.org/recursion-ninja/bv-little)
  [![Workflow Status](https://github.com/recursion-ninja/bv-little/workflows/build/badge.svg?branch=master)](https://github.com/recursion-ninja/bv-little/actions)
  [![Coverage Status](https://coveralls.io/repos/github/recursion-ninja/bv-little/badge.svg?branch=master)](https://coveralls.io/github/recursion-ninja/bv-little?branch=master)
  [![License FreeBSD](https://img.shields.io/badge/license-FreeBSD-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)

  [![Hackage](https://img.shields.io/hackage/v/bv-little.svg?style=flat&color=brightgreen)](https://hackage.haskell.org/package/bv-little)
  [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/bv-little/badge)](https://matrix.hackage.haskell.org/package/bv-little)

  [![Stackage LTS](http://stackage.org/package/bv-little/badge/lts)](http://stackage.org/lts/package/bv-little)
  [![Stackage Nightly](http://stackage.org/package/bv-little/badge/nightly?style=flat&color=green)](http://stackage.org/nightly/package/bv-little)


  This package contains an efficient implementation of *little-endian, immutable* bit vectors. It implements most applicable type-classes and also conversions to and from signed or unsigned numbers.

  For an implementation of *big-endian, immutable* bit vectors, use the [`bv`](https://hackage.haskell.org/package/bv) package.

  For an implementation of *little-endian, mutable* bit vectors, use the [`bitvec`](https://hackage.haskell.org/package/bitvec) package.


  #### Tests

  The test suite ensures that all type-class instances are "lawful" and that data-structureâ€“specific functionality is well defined.

  The `TestSuite.hs` file contains the specification. It can be run by invoking any of the following commands:

    * `cabal test`

    * `stack test`


  #### Benchmarks

  The benchmarks provide an empyrical check for the asymptotic complexity of data structure operations and also provide easy metrics for detecting performance regressions.

  The `Benchmarks.hs` file contains these metrics. It can be run by invoking any of the following commands:

    * `cabal bench`

    * `stack bench`
license-name: BSD-3-Clause
