all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.2.0
- 0.2.1
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.7.0
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
author: Ben Selfridge
basic-deps:
  base: '>=4.11 && <5'
  bitwise: '>=1.0.0 && <1.1'
  bytestring: '>=0.10 && <0.12'
  deepseq: '>=1.4.0 && <1.5.0'
  panic: '>=0.4.0 && <0.5'
  parameterized-utils: '>=2.0.2 && <2.2'
  random: '>=1.2.0 && <1.3'
  th-lift: '>=0.8.1 && <0.9'
changelog: "# Changelog for [`bv-sized` package](http://hackage.haskell.org/package/bv-sized)\n\n##
  1.0.5 *January 2023*\n\n* Support building with GHC 9.4\n* Add `Lift`, `NFData`,
  and `Hashable` instances for `SignedBV` and\n  `UnsignedBV`\n\n## 1.0.4 *March 2022*\n\n*
  Deprecates trunc' and adds two alternatives, sresize and zresize\n* Support for
  GHC 9.2\n* BV is now a newtype\n\n## 1.0.3 *April 2021*\n\n* New instances (`NFData`,
  `Random`)\n* New functions for `BV` that create uniformly random bitvectors\n* Fix:
  Adds `asBV` for `SignedBV` (should have been there to begin with)\n\n## 1.0.2 *August
  2020*\n\n* Allows tasty 1.3 for test suite\n* Fixes bug in signedClamp function
  which made it possible to violate\n  the nonnegative invariant on the internal representation
  of BVs\n* Fixes divide by zero error in rotateL and rotateR\n* Enhances test suite
  to test well-formedness of all operators that\n  return a BV\n* Fixes some documentation\n\n##
  1.0.1 *May 2020*\n\nThis fixed a subtle bug in the test suite which occasionally
  caused a\ndivide by zero exception.\n\n## 1.0.0 *May 2020*\n\nThis is a completely
  breaking change and it is completely incompatible\nwith any previous use for this
  library.\n\n  * Bitvectors no longer track their own width. Every operations that\n
  \   relies on runtime awareness of the width (for instance,\n    truncations) requires
  an expicit 'NatRepr' argument.\n  * Bitvectors do not support any typical instances
  you might hope for\n    (Num, Bits, etc.). This is because they are not interpreted
  by\n    default as signed or unsigned, so any class that requires such an\n    interpretation
  is not supported. We do provide wrapper types that\n    supply those instances when
  the bitvector width is known\n    (SignedBV/UnsignedBV).\n  * Every operation has
  been renamed. Most are pretty straightforward\n    (e.g. bvAdd ==> add).\n  * Several
  previously unsupported operations have been added\n    (e.g. count leading zeros,
  conversion to/from bit/bytestrings)\n  * The App and BitLayout modules have been
  removed entirely. Both are\n    potentially useful, but are out of date and probably
  should be in\n    a different package anyway.\n  * New modules\n\t  * Data.BitVector.Sized.{Signed,Unsigned}:
  wrappers for BV that\n\t\tprovide many instances\n\t  * Data.BitVector.Sized.Overflow:
  wrappers for operations that\n        provide overflow information as part of the
  output\n\n## 0.7.0 *April 2019*\n  * extractWithRepr now takes a NatRepr as an argument
  to specify the\n    index, which it always should have.\n  * Updated to recent parameterized-utils
  hackage release, which fixes\n    the build failures in the previous bv-sized release.\n\n##
  0.6.0 *March 2019*\n  * changed WithRepr functions to '\n  * added Num, Bits instances\n
  \ * bitVector now takes arbitrary Integral argument\n  * add 'bitLayoutAssignmentList'
  function (see haddocks for details\n  * Hid BV constructor, exposed BitVector as
  pattern\n\n## 0.5.1 *August 2018*\n  * fixed github URL\n\n## 0.5.0 *August 2018*\n
  \ * Added a lot of better support for the App module, including a type\n    class
  for embedding BVApp expressions along with associated smart\n    constructors\n\n##
  0.4.0 *April 2018*\n  * Added App module for BitVector expression languages and
  evaluation\n\n## 0.3.0 *April 2018*\n  * fixed bug with bvShiftR, it was doing a
  left shift!\n  * Division now rounds to zero for negative integers, bvDiv -> bvQuot\n
  \ * added Ix instance for BitVector w\n  * added bv0, zero-width vector\n  * bvConcatMany,
  bvGetBytesU (conversion to/from list of bytes)\n\n## 0.2.1 *March 2018*\n  * bvMulFSU\n
  \ * bvDivU, bvDivS\n  * Added Read instance, fixed Show to be compatible. Using\n
  \   prettyclass for pretty printing. (I guess this is semi-breaking,\n    but whatever.)\n\n##
  0.2 *March 2018*\n  * bv -> bitVector, so this is very much a breaking change\n
  \ * bvShiftL, bvShiftRL, bvShiftRA\n  * bvLTU, bvLTS\n\n## 0.1.1.1 *March 2018*\n
  \ * added BitLayout\n\n## 0.1.1.0 *March 2018*\n  * added functions `bvMulFS`/`bvMulFU`
  for full bitvector\n    multiplication without truncation\n  * removed Internal
  module, now export all those functions in Data.BitVector.Sized\n  * fixed the bv*WithRepr
  functions, which were not truncating the\n    inputs properly\n\n## 0.1.0.0 *March
  2018*\n  * First release\n"
changelog-type: markdown
description: |
  [![Build Status](https://travis-ci.org/GaloisInc/bv-sized.svg?branch=master)](https://travis-ci.org/GaloisInc/bv-sized)

  bv-sized - A Haskell library for manipulating width-parameterized bitvectors
  ===

  copyright (c) Ben Selfridge, Galois Inc. 2018

  This library defines a bitvector datatype that is parameterized by the
  vector width.

  Other information
  ===

  * contact: benselfridge@galois.com
description-type: markdown
hash: 7f8d87497711de73ee087915e3f05f66060c9b875f3deec85edc8ff7cdd6e2a0
homepage: https://github.com/GaloisInc/bv-sized
latest: 1.0.5
license-name: BSD-3-Clause
maintainer: benselfridge@galois.com
synopsis: a bitvector datatype that is parameterized by the vector width
test-bench-deps:
  MonadRandom: '>=0.5.3 && <0.7'
  base: '>=0'
  bv-sized: '>=0'
  bytestring: '>=0'
  hedgehog: '>=0'
  parameterized-utils: '>=0'
  tasty: '>=1.2.3 && <1.5'
  tasty-hedgehog: '>=1.2 && <1.5'
