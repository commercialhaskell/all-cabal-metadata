all-versions:
- 0.0.1
- 0.0.2
author: Alcino Cunha <alcino@di.uminho.pt>, Hugo Pacheco <hpacheco@di.uminho.pt>
basic-deps:
  array: '>=0.1'
  base: '>=4'
  containers: '>=0'
  haskell-src-exts: ==0.4.4.1
  mtl: '>=0'
  pointless-haskell: '>=0'
  pretty: '>=1.0'
  syb: '>=0'
changelog: ''
changelog-type: ''
description: |+
  DrHylo

  This cabal package can be installed with:

  $ cabal install DrHylo

  For a manual install, execute:

  $ runhaskell Setup.lhs configure
  $ runhaskell Setup.lhs build
  $ runhaskell Setup.lhs install

  DrHylo derives point-free hylomorphisms from restricted Haskell syntax.

  Usage: DrHylo [OPTION...]
    -o[FILE]  --output[=FILE]  output FILE
    -i[FILE]  --input[=FILE]   input FILE
    -f        --fix            use fixpoints instead of hylomorphisms
    -w        --pointwise      do not convert to point-free
    -O        --observable     generate observable hylomorphisms

  The module Sample.hs defines some Haskell definitions that are compliant with the DrHylo supported syntax.
  As an example, we can generate observable hylomorphisms for the functions frm Sample.hs into some file Out.hs:

  $ DrHylo -iSample.hs -oOut.hs -O

  The resulting file Out.hs can be normally interpreted with GHC as long as we have the Pointless Haskell library installed.

  $ ghci Out.hs -fglasgow-exts -XUndecidableInstances

  Since we asked for observable hylomorphisms, we can inspect the recursion tree for hylomorphisms via GHood. Just make sure that you have the GHood library installed (available on Hackage). A sample execution is:

  > let four = Succ $ Succ $ Succ $ Succ Zero
  > runO $ print $ fact four



description-type: text
hash: 807c2a76b763c63fc3db1a7f9d6d1d34111121c1bf50148c6d4b3e95d88ac859
homepage: http://haskell.di.uminho.pt/wiki/DrHylo
latest: 0.0.2
license-name: BSD-3-Clause
maintainer: Hugo Pacheco <hpacheco@di.uminho.pt>
synopsis: A tool for deriving hylomorphisms
test-bench-deps: {}
