all-versions:
- '0'
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- '0.3'
- '0.4'
author: Fumiaki Kinoshita
basic-deps:
  base: <=5
  exceptions: '>=0'
  mtl: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "# drinkery\n\ndrinkery is a yet another stream processing library themed
  on liquors. While it\noffers a simple interface, it also tries to be as expressive
  as possible.\n\n## Producers\n\ndrinkery supports three types of producers: `Producer`,
  `ListT`, and `Tap`.\n\n`Producer r s` is a monad transformer to produce a stream
  of type `s`. It is good\nat interactively serving values.\n`yield :: s -> Producer
  r s m a` is the primary action.\nA barman can also accept requests from the downstream
  using `accept`.\n\n`ListT r` is a list-like backtracking monad (also known as ListT
  done right).\nIt is useful for sampling elements of containers with effects.\n`sample
  :: Foldable f => f s -> ListT r m s` samples elements in any `Foldable`\ncontainer.
  `inquire` to interact with the downstream.\n\n`Tap` is an endless producer. This
  can be connected to a 'Patron' or a 'Distiller'.\n\n`Producer` and `ListT` are converted
  to `Tap`\nby `runProducer` and `runListT` respectively.\n\n## Consumer\n\n`Sink
  tap` is a monad transformer which consumes `tap`.\n\n* `drink :: m s` Get one element.\n*
  `leftover :: s -> m ()` Leave one element.\n* `request :: r -> m ()` Send a request.\n\n`(+&)
  :: (Monoid r, CloseRequest r, Monad m) => Tap r s m -> Sink (Tap r s) m a -> m a`\nconnects
  a tap with a drinker.\n\n## Transducer\n\n`Distiller tap m r s` is a stream transducer
  which\n\n* Consumes `tap`\n* Receives `r`\n* Produces `s`\n\nIt is actually a `Tap`
  where the underlying monad is `Sink`.\n\nThere are two composition operators:\n\n*
  `++&` Tap-drinker\n* `++$` Tap-distiller\n\n`+`, `&`, and `$` means a tap, a drinker,
  and a distiller respectively. The middle\ncharacters of these operators signify
  the resulting structures.\n\n## Why drinkery?\n\ndrinkery is designed to be fully
  featured and complements other libraries' missing\nfunctionalities.\n\n### pipes\n\n`pipes`
  is quite similar in that both `Proxy` and `Distiller` are bidirectional.\nStill
  there are some differences:\n\n* `Distiller` does not terminate.\n* Unlike pipes'
  `>->`, `++$` propagates inner requests:\n    * `(++$) :: Monad m => Distiller tap
  m p q -> Distiller (Tap p q) (Sink tap m) r s -> Distiller tap m r s`\n    * `(>->)
  :: Proxy a' a () b m r\t-> Proxy () b c' c m r -> Proxy a' a c' c m r`\n* `Sink`,
  the consumer monad, may leave unconsumed inputs.\n* `drinkery` has much fewer operators.\n\n###
  conduit\n\nBoth `drinkery` and `conduit` support leftovers, closing operation, and
  end of stream.\nThe main difference is interactivity.\n\n### machines\n\n`machines`
  does not support leftovers, nor interactive producers.\nBoth `machines` and `drinkery`
  support multi-channel input.\n\n### iteratee\n\n`iteratee` has an ability to handle
  requests but those are untyped (`SomeException`).\n`drinkery` provides a more robust
  interface for handling requests, and monadic producers.\n"
description-type: markdown
hash: 22eec9a0c918eef0558c58b42b32b0e74fa91b49310e7a7066d9948cd768b16e
homepage: https://github.com/fumieval/drinkery#readme
latest: '0.4'
license-name: BSD-3-Clause
maintainer: fumiexcel@gmail.com
synopsis: Boozy streaming library
test-bench-deps: {}
