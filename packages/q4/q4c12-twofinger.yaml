all-versions:
- '0'
- 0.0.0.1
- 0.0.0.2
- '0.1'
- '0.2'
author: quasicomputational <quasicomputational@gmail.com>
basic-deps:
  base: '>=4.9.1.0 && <4.11'
  bifunctors: '>=5.4.2 && <5.6'
  containers: '>=0.5.10.2 && <0.5.11'
  deepseq: '>=1.4.3.0 && <1.5'
  semigroupoids: '>=5.2.1 && <5.3'
changelog: |
  q4c12-twofinger 0.2 (2018-01-17)
  ================================

  * Fix a dangling section reference in the haddocks.
  * Allow `tasty` 1.0 along with `tasty` 0.12.
  * More tests!
  * `Bitraversable1` and `Bifoldable1` for `TwoFingerOddE`.
  * Re-use `Seq` from `containers` instead of rolling our own finger-trees. This changes some worst-case running time, some for the better and some for the worse.
  * Drop `align*`, `infinite*` and `repeat*`. The `align*` functions did not work properly before in the infinite/infinite case, and `Seq` from `containers` does not support infinite trees; further, implementing aligning directly with `uncons` is often clearer.

  q4c12-twofinger 0.1 (2018-01-04)
  ================================

  * Packaging: list `CHANGELOG.markdown` and `README.markdown` as `extra-doc-files`, rather than `extra-source-files`.
  * Drop the `QuickCheck` dependency from the library. Move the property tests out of haddocks and into the testsuite.

  q4c12-twofinger 0.0.0.2 (2017-12-08)
  ====================================

  * Loosened `bifunctors` dependency bounds.

  q4c12-twofinger 0.0.0.1 (2017-12-08)
  ====================================

  * Packaging fix-ups only.

  q4c12-twofinger 0 (2017-12-08)
  ==============================

  * Initial release.
changelog-type: markdown
description: |
  This package provides efficient alternating sequences based on finger trees. These can represent sequences made up of two types of element, `e` and `a`  where two of the same type of element cannot follow each other directly.

  Four different flavours are provided, isomorphic to `([(a, e)], a)`, `([(e, a)], e)`, `[(a, e)]`, and `[(e, a)]`.

  Cons-like operations are *O(1)* amortised, and append operations are *O(log(min(n, m)))* amortised.

  For more details, please see the Haddock documentation of Q4C12.TwoFinger.
description-type: markdown
hash: 6772f9707a58a48646eb74b4c466ee4e0fb8e902efec9b5af494ef666603e792
homepage: https://github.com/quasicomputational/mega/tree/master/packages/twofinger
latest: '0.2'
license-name: BSD-2-Clause
maintainer: quasicomputational <quasicomputational@gmail.com>
synopsis: Efficient alternating finger trees
test-bench-deps:
  base: '>=4.9.1.0 && <4.11'
  doctest: '>=0.11.4 && <0.14'
  lens: '>=4.15.4 && <4.16'
  lens-properties: '>=4.11.1 && <4.12'
  q4c12-twofinger: '>=0'
  tasty: '>=0.12 && <0.13 || >=1.0 && <1.1'
  tasty-quickcheck: '>=0.9.1 && <0.10'
