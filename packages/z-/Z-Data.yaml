homepage: https://github.com/ZHaskell/z-data
changelog-type: markdown
hash: 4cbe1b04a9f1872f1ddb15fd4c1233033aa4f5dcea7e88f75d55edb30b003724
test-bench-deps:
  Z-Data: -any
  base: -any
  time: -any
  unordered-containers: -any
  hspec: '>=2.5.4'
  HUnit: -any
  integer-gmp: '>=0.2 && <1.2'
  containers: -any
  quickcheck-instances: -any
  hashable: -any
  scientific: -any
  QuickCheck: '>=2.10'
  primitive: -any
maintainer: winterland1989@gmail.com
synopsis: Array, vector and text
changelog: "# Revision history for Z-Data\n\n## 1.1.0.0  -- 2021-07-15\n\n* Fix building
  issues on ARM platform.\n* Add `UUID` builders and parsers(both textual binary).\n*
  Add more `PrimUnlifed` instances to `Z.Data.Array.UnliftedArray`.\n* Add `doubleMutableArr`
  to `Z.Data.Array`, useful in some buffer building logic.\n* Add `shuffle` and `permutations`
  to `Z.Data.Vector` and `Z.Data.Text`.\n* Add `prettyJSON'` to `Z.Data.JSON` with
  custom indentation.\n* Change `CBytes` 's JSON instance to write `__base64` field(instead
  of `base64` field) when not UTF8 encoded.\n* Add missing type alias `UnliftedIORef`
  for `UnliftedRef RealWorld`.\n\n## 1.0.0.1  -- 2021-07-08\n\n* Fix a regression
  in `match` parsing combinator where matched chunk is returned instead of precise
  matched input.\n\n## 1.0.0.0  -- 2021-07-05\n\n* Clean up various `RULES` and `INLINE`
  pragmas, improve building time a little.\n* Simplify `Z.Data.PrimRef` to use `PrimMonad`.\n*
  Add `encodeXXX/encodeXXXLE/encodeXXXBE`(where `XXX` is a primitive type) to `Z.Data.Builder`.\n*
  Add `check-array-bound` build flag to enable bound check in `Z.Data.Array` module,
  `Z.Data.Array.Checked` is removed.\n* Add `concatR` to `Z.Data.Vector` and `Z.Data.Text`,
  which is useful to concat the result of an accumulator style recursive function.\n*
  Improve date builder and parser by introducing faster common case path.  \n\n##
  0.9.0.0  -- 2021-07-01\n\n* Add `decodeXXX/deocodeXXXLE/decodeXXXBE`(where `XXX`
  is a primitive type) to `Z.Data.Parser`.\n* Rename `replicateMVec/traveseVec/traveseVec_`
  tp `replicateM/travese/travese_`, fix related `PrimMonad` rules not firing issue.\n*
  Add a faster `sciToDouble` based on https://github.com/lemire/fast_double_parser,
  improve `double/double'` parser.\n\n## 0.8.8.0  -- 2021-06-13\n\n* Add `withCPtrForever`
  and `addCPtrDep` to `Z.Foreign.CPtr` module.\n* Add `replicateMVec` to `Z.Data.Vector`.\n*
  Fix AVX512 text validate header building with C11.\n\n## 0.8.7.0  -- 2021-06-12\n\n*
  Add `use-avx2` and `use-avx512` flags(default to False) to enable avx2 or avx512
  base64 codec, UTF8 validator, etc.\n\n## 0.8.6.1  -- 2021-06-09\n\n* Change SIMD
  base64 codec to https://github.com/lemire/fastbase64.\n* Add SIMD enabled `count`
  from bytestring.\n* Switch `no-avx` on by default to improve compiled binary's portablity.\n*
  Add `collate`, courtesy by jgm: https://github.com/jgm/unicode-collation.\n* Add
  `hexDecodeWS/hexDecodeWS'` to `Z.Data.Vector.Hex`.\n\n## 0.8.5.0  -- 2021-06-04\n\n*
  Fix a bug in `peekMaybe` across buffer boundary.\n* Clean up base64 AVX/SSE CPP
  flags.\n\n## 0.8.4.0  -- 2021-06-03\n\n* `arrVec` from `Z.Data.Vector` now could
  convert between vector(array slice) and array back and forth.\n* Fix a CPP bug in
  `no-avx` build flag.\n\n## 0.8.3.0  -- 2021-06-02\n\n* Fix numeric literals' `Print`
  instances when precedence > 6 and  value < 0.\n* Add `no-avx` build flag to run
  tests on VMs without AVX support.\n\n## 0.8.2.0  -- 2021-05-10\n\n* Add `withCPtrs`,
  `withCPtrsUnsafe` to `Z.Foreign.CPtr`.\n* Add `displayWidthChar` to `Z.Data.Text`.\n\n##
  0.8.1.0  -- 2021-04-23\n\n* Change `ParseChunks` and `parseChunks` to based on `parseChunk`.\n*
  Remove `parseValueChunks`, add `decodeChunk` to `Z.Data.JSON`.\n\n## 0.8.0.0  --
  2021-04-20\n\n* Change `Bytes` 's `Hashable` instance to use FNV-1a (proposed by
  @zypeh).\n\n## 0.7.4.0  -- 2021-04-06\n\n* Add `emptyArr` to `Z.Data.Array`. \n*
  Add `newCPtr'` to accommodate common cases.\n* Use `memchr` in `split/splitWith/lines`
  if possible.\n\n## 0.7.3.0  -- 2021-03-30\n\n* Add more helpers to debug `Parser`:
  `currentChunk`, `failWithInput`, `unsafeLiftIO`.\n* Parser now is an instance of
  `PrimMonad`, which can perform limited effects, e.g. array operations.\n* Make some
  parsers' error message more helpful.\n\n## 0.7.2.0  -- 2021-03-22\n\n* Add `fromMutablePrimArray`
  for constructing CBytes.\n* Add `toBytes'/toBuilder'`(convert with the \\NUL terminator)
  to `Z.Data.CBytes`.\n\n## 0.7.1.0  -- 2021-03-03\n\n* Add `CPtr` type, a more lightweight
  foreign pointer.\n* Add `toLower/toUpper/toLowerLatin/toUpperLatin` to `Z.Data.ASCII`.\n\n##
  0.7.0.0  -- 2021-03-03\n\n* Add more patterns to `Z.Data.ASCII`.\n* Fix a bug in
  `Z.Data.Vector.Search` where needle is a singleton.\n* Optimize `mergeDupAdjacent`
  family funtions in `Z.Data.Vector.Sort` to not copy vector in case of no duplication.\n*
  Add `scientific'` to `Z.Data.Builder`, Add more `Print` instances.\n* Bump deps
  to support GHC 9.0.\n\n## 0.6.1.0  -- 2021-02-04\n\n* Add `key` and `nth` lens to
  `Z.Data.JSON.Value` for manipulating nested value more easily.\n* Port patch from
  bytestring #301 #310 #315, Improve `stime`, `sconcat`, `intersperse`.\n* Add JSON
  pretty printer `prettyJSON/prettyValue` to `Z.Data.JSON`.\n* Move many instances
  from `Z.Data.JSON.Base` to `Z.Data.JSON` to reduce the chance of heap overflow when
  compile.\n* Add `modifyIndex/insertIndex/deleteIndex` to array and vector, rewrite
  `FlatMap/FlatSet/FlatInMap/FlatIntSet' to use them.\n* Remove `linearSearch` from
  `Z.Data.Vector.FlatMap/FlatInMap`, use `find/findR` from `Z.Data.Vector.Search`
  instead.\n* Add `displayWidth` to `Z.Data.Text`.\n* Move `floatToScientific/doubleToScientific`
  to `Z.Data.JSON.Value`.\n\n## 0.6.0.0  -- 2021-02-04\n\n* Add `primArrayFromBE/primArrayFromBE`
  to `Z.Data.Array.Unaligned`.\n* Change `[Char]` 's JSON instance to use JSON text,
  Add `Bytes` 's JSON instance to use base64 encoding.\n* Add `escapeCBytes`, `toEscapedText`
  to `Z.Data.CBytes`, change `CBytes` 's JSON instance to use base64 encoding.\n\n##
  0.5.0.0  -- 2021-01-15\n\n* Add `ParseChunks` type alias, remove `parseChunks'`
  from `Z.Data.JSON`.\n* Change JSON instance of `Data.Version` to use JSON Array.\n*
  Add `fromByteString` and `toByteString` to `Z.Foreign`.\n* Change license's copyright
  to test --test-show-details=direct\n\n## 0.4.0.0  -- 2021-01-11\n\n* Merge `FromValue`,
  `ToValue`, `EncodeJSON` to `JSON` class, add instances for containers.\n* A new
  `Z.Data.JSON.Converter` module to be reused in other protocol decoding.\n* Add more
  tests for JSON module, fix buggy instances(`Ordering`, `DayOfWeek`).\n* Fix a bug
  in `BE Double` `Unaligned` instance.\n* Add `arrVec` to `Z.Data.Vector` to convert
  a whole array to vector.\n\n## 0.3.0.0  -- 2020-12-29\n\n* Hide `Text` constructor
  from `Z.Data.Text`.\n* Add `fromStdString` to `Z.Data.CBytes`.\n* Re-export `touch`
  from `Z.Foreign`, export `ConvertError` constructor from `Z.Data.JSON`.\n* Add `anyChar8`
  to `Z.Data.Parser`.\n* Add `Z.Data.ASCII`, move `c2w`, `w2c`, `isDigit`, `isSpace`,
  `isHexDigit` and ASCII constants to it.\n* Rename `ShowT` class to `Print`, re-export
  from `Z.Data.Text` module.\n* Add various JSON instances of types from `time` package,
  add `Z.Data.Builder.Time` and `Z.Data.Parser.Time`.\n* Fix a bug affecting comparing
  `PrimVector`s.\n\n## 0.2.0.0  -- 2020-12-15\n\n* Add `Z.Data.Text.Regex` module,
  which provide regex functions using RE2.\n* Rename `buildBytes`, `buildBytesList`
  in `Z.Data.Builder` to `build`, `buildChunks`.\n* Rename `encodeBytes`, `encodeBytesList`
  in `Z.Data.Builder` to `encode`, `encodeChunks`.\n* `buildChunks` now produces a
  lazy bytes list, (so that `encodeChunks`, etc.).\n* Functions in `Z.Data.Text.Search`
  now return char index by default, add `findBytesIndices/findBytesIndex/R` to\n  search
  for bytes index.\n* Add `fromStdString` to `Z.Foreign` to marshall `std::string`
  from c++ code.\n\n## 0.1.9.0  -- 2020-10-23\n\n* Add `Z.Data.Vecotr.Hex`, `Z.Data.Vector.Base64`
  module.\n* Improve `Z.Data.Builder` 's performance, remove `AllocateStrategy`, `buildAndRun`.\n*
  Remove `TextBuilder` newtype from `Z.Data.Text.ShowT`, add `buildText`, `unsafeBuildText`
  to `Z.Data.Builder`.\n\n## 0.1.8.0  -- 2020-10-23\n\n* Rename `ascii` to `vecASCII`
  in `Z.Data.Vector.QQ` to match array QQ.\n* Add `FoldCase` instance to `Text`.\n*
  Add `hex'`, `hex_`, `uint_`, `int_`, `integer` to `Z.Data.Parser`, change `hex`,
  `uint`, `int` to fail in case of overflow.\n* Add `takeN` to `Z.Data.Parser`.\n*
  Rename `withCBytesListSafe` to `withCBytesList` to match rest of the module.\n\n##
  0.1.7.2  -- 2020-10-17\n\n* Add `withPrimArrayListUnsafe`, `withPrimArrayListSafe`,
  `withCBytesUnsafe`, `withCBytesListSafe`.\n\n## 0.1.7.1  -- 2020-10-17\n\n* Add
  `singleton` to `Z.IO.CBytes`, fix `unpack` when there're trailing illegal UTF8 codepoints.\n\n##
  0.1.7.0  -- 2020-10-15\n\n* Change `defaultChunkSize` from 32K to 16K to reduce
  memory overhead.\n* Change `CBytes` to use null terminated byte array, add JSON
  instances.\n* Add JSON instances to various arrays, Fix `Char`'s JSON instance to
  reject string length > 1.\n* Add `decodeText` and `decodeText'` to `Z.Data.JSON`.\n\n##
  0.1.6.1  -- 2020-10-09\n\n* Remove `Str` newtype.\n* Make `CBytes` a newtype.\n*
  Add JSON instances for `ExitCode`, Add Unaligned instances for `Ptr a`.\n* Use type
  alias instead of newtypes for `Locale`, `Category` in `Z.Data.Text`.\n\n## 0.1.6.0
  \ -- 2020-10-09\n\n* Rename `ToText` to `ShowT`, `toText` to `showT`, add FFI types
  instances, remove `Str` newtype.\n* Change `Text` 's `Show` and `ShowT` escaping
  rules to reuse JSON escaping, remove `Read` instance.\n* Add `ShowT` instances to
  `CBytes` and FFI types.\n\n## 0.1.5.0  -- 2020-10-02\n\n* Rework `CBytes` type to
  use unpinned byte array, add `withCBytesUnsafe`, `allocCBytesUnsafe`.\n* Export
  `head`, `tail`, `init`, `last` from `Z.IO.Vector`, `Z.IO.Text` (well, safety first).\n*
  Change `unalignedSize` in `UnalignedAccess` class's type to take a instance type
  and return `Int`.\n* Rename `UnalignedAccess` to `Unaligned`.\n\n## 0.1.4.2  --
  2020-10-02\n\n* Remove `withMutablePrimArrayUnsafe/Safe` from `Z.Foreign`.\n* Add
  `allocPrimArrayUnsafe/Safe`, `allocPrimVectorUnsafe/Safe`, `allocBytesUnsafe/Safe`,
  `fromPtr/fromPrimPtr`\n  to `Z.Foreign`.\n\n## 0.1.4.1  -- 2020-09-29\n\n* Add `fromNullTerminated`
  to `Z.Foreign`(and `Z.Data.Vector.Base`).\n* Change `Category` and `Locale`(`Z.Data.Text`)
  to use pattern synonyms, add `envLocale` to `Z.Data.Text`.\n* Add `validateASCII`
  and `validateASCIIMaybe` to `Z.Data.Text`.\n\n## 0.1.4.0  -- 2020-09-24\n\n* Make
  library works with GHC 8.6 and 8.8 again.\n* Add `pinPrimVector` and `pinPrimArray`
  to `Z.Foreign`.\n* Export `fail'` from `Z.Data.Parser`\n\n## 0.1.3.1  -- 2020-09-24\n\n*
  Change `clearMBA` 's type to match `clearPtr`.\n* Move `peekMBA`, `pokeMBA` to `UnalignedAccess`
  class.\n\n## 0.1.3.0  -- 2020-09-20\n\n* Add indexing funtion to `Z.Data.Vector`
  and `Z.Data.Text`.\n* Add `peekMBA`, `pokeMBA` and `clearMBA` to `Z.Foreign`.\n\n##
  0.1.2.0  -- 2020-09-19\n\n* Rename `read/write/indexWord8ArrayAs` to `read/write/indexWord8ArrayAs#`.\n*
  Add `read/write/indexWord8ArrayAs`, `read/write/indexPrimWord8ArrayAs`.\n* Fix JSON
  encoding code in generic instance(constructor with single payload case).\n\n"
basic-deps:
  bytestring: '>=0.10.4 && <0.12'
  case-insensitive: ^>=1.2
  base: '>=4.12 && <5.0'
  time: '>=1.9 && <2.0'
  unordered-containers: ^>=0.2
  integer-gmp: '>=0.2 && <1.2'
  tagged: ^>=0.8
  containers: ^>=0.6
  ghc-prim: '>=0.5.3 && <0.8'
  hashable: ^>=1.3
  random: '>=1.2.0 && <1.3'
  deepseq: ^>=1.4
  uuid-types: '>=1.0.4 && <2.0'
  scientific: '>=0.3.7 && <0.4'
  QuickCheck: '>=2.10'
  unicode-collation: '>=0.1.3 && <0.2'
  template-haskell: '>=2.14.0'
  primitive: '>=0.7.1 && <0.7.2'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.5.0
- 0.1.6.0
- 0.1.6.1
- 0.1.7.0
- 0.1.7.1
- 0.1.7.2
- 0.1.8.0
- 0.1.9.1
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.3.0
- 0.7.4.0
- 0.8.6.1
- 0.8.8.0
- 0.9.0.0
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
author: Z.Haskell Contributors
latest: 1.1.0.0
description-type: markdown
description: "## Z-Data\n\n[![Hackage](https://img.shields.io/hackage/v/Z-Data.svg?style=flat)](https://hackage.haskell.org/package/Z-Data)\n[![Linux
  Build Status](https://github.com/ZHaskell/z-data/workflows/ubuntu-ci/badge.svg)](https://github.com/ZHaskell/z-data/actions)\n[![macOS
  Build Status](https://github.com/ZHaskell/z-data/workflows/osx-ci/badge.svg)](https://github.com/ZHaskell/z-data/actions)\n[![Windows
  Build Status](https://github.com/ZHaskell/z-data/workflows/win-ci/badge.svg)](https://github.com/ZHaskell/z-data/actions)\n[![ARM
  Build Status](https://img.shields.io/drone/build/ZHaskell/z-data?label=arm-ci)](https://cloud.drone.io/ZHaskell/z-data)\n[![Gitter
  chat](https://badges.gitter.im/gitterHQ/gitter.svg)](https://gitter.im/Z-Haskell/community)\n<a
  href=\"https://opencollective.com/zhaskell/donate\" target=\"_blank\">\n  <img src=\"https://opencollective.com/zhaskell/donate/button@2x.png?color=blue\"
  width=128 />\n</a>\n\nThis package is part of [ZHaskell](https://z.haskell.world)
  project, providing basic data structures and functions:\n\n* Array, vector(array
  slice), sorting, searching\n* Text based UTF-8, basic unicode manipulating, regex\n*
  FFI utilties\n* Fast parsing and building monad\n* JSON encoding and decoding\n\n##
  Requirements\n\n* A working haskell compiler system, GHC(>=8.6), cabal-install(>=2.4),
  here're some options:\n    * Mac users can get them via [homebew](//brew.sh/): `brew
  install ghc cabal-install`.\n    * Windows users can get them via [chocolatey](//chocolatey.org):
  `choco install ghc cabal`.\n    * Ubuntu users are recommended to use this [ppa](//launchpad.net/~hvr/+archive/ubuntu/ghc).\n*
  A working C/C++ compiler support C++11, here're some options:\n    * Mac users can
  use the `clang` comes with the [XCode](https://developer.apple.com/xcode/) or [XCode
  Command Line Tools](https://developer.apple.com/downloads):\n        * You can install
  XCode from app store, or XCode Command Line Tools with `sudo xcode-select --install`.\n
  \       * If you came across compiling issues like [this](https://stackoverflow.com/questions/58628377/catalina-c-using-cmath-headers-yield-error-no-member-named-signbit-in-th),
  consider removing redundant SDKs, e.g. `sudo rm -rf /Library/Developer/CommandLineTools/SDKs`\n
  \   * Windows users can use the mingw's one comes with GHC, you can use it by adding
  `your_path_to_ghc\\mingw\\bin` to your `PATH`.\n    * Ubuntu users can install `gcc/g++`
  by running `sudo apt install build-essential`.\n* Tests need [hspec-discover](https://hackage.haskell.org/package/hspec-discover).\n\n##
  Example usage\n\n```haskell\n> import qualified Z.Data.Vector as V\n> import qualified
  Z.Data.Array as A\n>\n> -- convert from list\n> let v = V.pack [1..10] :: V.PrimVector
  Int  \n> -- vector combinators works on arrays as well\n> let a = V.pack [1..10]
  :: A.Array Int   \n> -- slicing vector(slice) is O(1)\n> V.take 3 v                              \n[1,2,3]\n--
  slicing array is not O(1)\n> V.drop 3 a                              \nfromListN
  7 [4,5,6,7,8,9,10]\n>\n> V.intersperse 10 v\n[1,10,2,10,3,10,4,10,5,10,6,10,7,10,8,10,9,10,10]\n>\n>
  V.mergeSort (V.intersperse 10 v) \n[1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10]\n>
  -- Generic KMP search on vectors\n> V.indices (V.singleton 10) (V.intersperse 10
  v) True   \n[1,3,5,7,9,11,13,15,17,18]\n>\n> -- quoter for writing numeric vector
  literals\n> :set -XQuasiQuotes \n> :t [V.vecWord|1,2,3,4,5,4,3,2,1|]                     \n[V.vecWord|1,2,3,4,5,4,3,2,1|]
  :: V.PrimVector Word\n>\n> import qualified Z.Data.Builder as B\n> import qualified
  Z.Data.Text as T\n> :set -XOverloadedStrings \n>\n> -- Builders can be used with
  OverloadedStrings\n> B.build $ \"builders: \" >> B.hex (3 :: Word16) >> B.comma
  >> B.double 1.2345678\n[98,117,105,108,100,101,114,115,58,32,48,48,48,51,44,49,46,50,51,52,53,54,55,56]\n>
  \n> B.buildText $ \"builders: \" >> B.hex (3 :: Word16) >> B.comma >> B.double 1.2345678\n\"builders:
  0003,1.2345678\"\n>\n> import qualified Z.Data.JSON as JSON\n> import GHC.Generics\n>
  \n> JSON.parseValue \"[1,2,3,4,5]\"\n([],Right (Array [Number 1.0,Number 2.0,Number
  3.0,Number 4.0,Number 5.0]))\n>\n> -- JSON module support deriving through Generic\n>
  :set -XDeriveAnyClass -XDeriveGeneric\n> data Foo = Foo {foo :: Double} deriving
  (JSON.JSON, Generic)\n> JSON.toValue (Foo 0.01)\nObject [(\"foo\",Number 1.0e-2)]\n>
  JSON.encodeText (Foo 0.01)\n\"{\\\"foo\\\":1.0e-2}\"\n```\n\n## Dev guide\n\n```bash\n#
  get code\ngit clone --recursive git@github.com:ZHaskell/z-data.git \ncd z-data\n#
  build\ncabal build\n# test\ncabal test --test-show-details=direct\n# install \ncabal
  install\n# generate document\ncabal haddock\n```\n"
license-name: BSD-3-Clause
