all-versions:
- '0.1'
- '0.2'
- 0.2.1
- '0.3'
author: Don Stewart
basic-deps:
  base: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Self optimizing polymorphic container types.

  Adaptive containers are polymorphic container types that use
  class associated data types to specialize particular element types
  to a more efficient container representation. The resulting
  structures tend to be both more time and space efficient.

  A self-optimizing pair, for example, will unpack the constructors,
  yielding a representation for (Int,Char) requiring 8 bytes, instead
  of 24.

  This difference can be visualized. Consider the expression:

  > [ (x,y) | x <- [1..3], y <- [x..3] ]

  * /[(Int,Int)]/: A regular list of pairs <http://code.haskell.org/~dons/images/vacuum/tuple-list.png>

  * /[Pair Int Int]/: An adaptive list of pairs <http://code.haskell.org/~dons/images/vacuum/pair-list.png>

  * /List (Pair Int Int)/: An adaptive list of adaptive pairs <http://code.haskell.org/~dons/images/vacuum/list-pair.png>

  Currently supported adaptive containers: pairs, lists, maybes

  Most unboxed element types are supported.
description-type: haddock
hash: 447c71bacd5fd015d53e78e791b852e247266d703803515b80623dcc69e07087
homepage: http://code.haskell.org/~dons/code/adaptive-containers
latest: '0.3'
license-name: BSD-3-Clause
maintainer: Don Stewart (dons@galois.com)
synopsis: Self optimizing container types
test-bench-deps: {}
