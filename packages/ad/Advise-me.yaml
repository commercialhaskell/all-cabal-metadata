all-versions:
- '0.1'
author: Jorn van Wijk, Ferdinand van Walree, Niels Steenbergen, Wink van Zon, Bastiaan
  Heeren
basic-deps:
  Advise-me: '>=0'
  Cabal: '>=1.22'
  HDBC: '>=2.4'
  HDBC-sqlite3: '>=2.3'
  QuickCheck: '>=2.8'
  base: '>=4.8 && <5'
  bytestring: '>=0.10'
  containers: '>=0.5'
  convertible: '>=1.1'
  directory: '>=1.2'
  filepath: '>=1.4'
  http-types: '>=0.9'
  ideas: '>=1.8'
  ideas-math-types: '>=1.0'
  lens: '>=4.15 && <4.18'
  mtl: '>=2.2'
  optparse-applicative: '>=0.14 && <0.15'
  parsec: '>=3.1'
  random: '>=1.1'
  semigroups: ==0.18.5
  sqlite-simple: '>=0.4'
  text: '>=1.2'
  time: '>=1.5'
  uniplate: '>=1.6'
  wai: '>=3.2.1.1 && <3.2.3'
  wai-extra: ==3.0.22.0
  wl-pprint: '>=1.2'
  xlsx: '>=0.6.0'
changelog: ''
changelog-type: ''
description: "Readme\n===============================================================================\n\nThis
  file will attempt to detail the assumptions and workflow of the project. \nThere
  is a [ticket system](http://ideastest.science.uu.nl/trac) to keep track \nof what
  has been done and what still needs to be done.\n\n\nInstallation\n-------------------------------------------------------------------------------\n\n###
  GHC\n\nWe develop in a bare Haskell Platform environment. Stack is not used at the
  \nmoment, due to the complexity of importing local packages that are not yet in
  \nHackage.\n\nAt the moment, the code needs to work with our Ubuntu 16.04 LTS (Xenial)
  \nserver, which uses GHC 7.10.3. On that distribution, it should be enough to \ndo:\n\n
  \   sudo apt install haskell-platform{,-doc,-prof}\n\nOn other OSes, the easiest
  way to get this specific version is perhaps to use \nthe [generic installer](https://www.haskell.org/platform/):\n\n
  \   wget -O /tmp/hp.tar.gz \\\n        https://www.haskell.org/platform/download/7.10.3/haskell-platform-7.10.3-unknown-posix-x86_64.tar.gz\n
  \   tar xf /tmp/hp.tar.gz\n    sudo ./install-haskell-platform.sh\n\n    # We also
  need to change some flags\n    sed -i 's/\\(.*\"C compiler flags\",\\s*\"\\)\\(.*\\)/\\1-fno-PIE
  \\2/g\n           ;s/\\(.*\"C compiler link flags\",\\s*\"\\)\\(.*\\)/\\1-no-pie
  \\2/g\n           ;s/\\(.*\"ld flags\",\\s*\"\\)\\(.*\\)/\\1-no-pie \\2/g' \\\n
  \          /usr/local/haskell/ghc-7.10.3-x86_64/lib/ghc-7.10.3/settings\n\n\n###
  Database\n\nSince the database is SQLite3, we need the SQLite binary and libraries.
  On \nDebian-based distributions, this amounts to:\n\n    sudo apt install sqlite3
  libsqlite3-dev\n\nOn Windows, you can get the required executables and DLLs at \n[sqlite.org](http://sqlite.org/download.html).\n\nThe
  initial live database can later be built with the `database-builder.exe` \nbinary,
  like so:\n\n    ./database-builder.exe -o advise-me.db\n\n\n### Web server\n\nTo
  run the binary locally, you can use any web server with CGI support. We can \ndo
  the following to use Apache to serve CGI scripts from the \n`/usr/lib/cgi-bin` directory
  on Debian-based distributions:\n\n    sudo apt install apache2\n    sudo a2enmod
  cgid\n\nFor other OSes, check this \n[guide](https://httpd.apache.org/docs/2.4/howto/cgi.html).\n\n\n\n###
  Haskell environment\n\nThe source code of the project is contained in Git and Subversion
  \nrepositories. To obtain it:\n\n    git clone \\\n        https://github.com/ideas-edu/ideas\n
  \   cd ideas; make src/Ideas/Main/Revision.hs; cd -\n\n    svn checkout \\\n        https://ideastest.science.uu.nl/svn/ideas/Tutors/math-types\n\n
  \   svn checkout \\\n        https://ideastest.science.uu.nl/svn/ideas/Tutors/Advise-Me/trunk\n\n\nInstall
  the sandbox:\n\n    cd trunk\n    cabal sandbox init\n    cabal sandbox add-source
  ../ideas\n    cabal sandbox add-source ../math-types\n    cabal install \\\n        --only-dependencies
  \\\n        --enable-tests \\\n        --enable-executable-profiling \\\n        --enable-library-profiling\n
  \   cabal configure \\\n        --enable-tests \\\n        --enable-executable-profiling
  \\\n        --enable-coverage\n\nWe use `make`, because there are many different
  files and interdependencies. \nReading the `Makefile` should give an idea of the
  workflow. It is also \nrecommended to make a `config.mk` file, overriding the variables
  in the \n`Makefile` so that they point to the correct directories:\n\n    tee config.mk
  << EOF\n    IDEAS_DIR = ../ideas/src\n    MATHTYPES_DIR = ../math-types/src\n    CGI_BIN
  = /usr/lib/cgi-bin\n    EOF\n\n\n\n### Bayesian networks\n\nTo *create* the Bayesian
  networks, [Genie](https://www.bayesfusion.com/genie/) \nis used. We used to interface
  with the SMILE library for *using* the networks, \nbut that is now done in Haskell
  itself by transforming the original `.xdsl` \nfiles into a Haskell interface. See
  `network-builder.exe`.\n\n\n### Compiling\n\nNow, we can compile the binaries. `make
  processing` should take care of \neverything for us, but of course the binaries
  can also be created by `cabal` \nseparately.\n\nNote that there is an `xlsx` cabal
  flag that is on by default, because \nbuilding the `xlsx` library (used for reading
  human assessments) is not \nstraightforward on every machine. If you find that the
  `xlsx` library is \ncausing issues and you do not need its functionality, do `cabal
  configure \n-flags=\"-xlsx\"` before building.\n\n\n\nProject structure\n-------------------------------------------------------------------------------\n\nThe
  following directories are important to know.\n\n- `app/`: Haskell executables and
  scripts. \n- `src/`: Haskell sources to the Advise-Me library.\n- `tests/`: Haskell
  sources to the testing suite.\n- `test-data/`: Test input requests for the testing
  suite and shell scripts to \n  send test input to the server.\n- `hpc-*`: Haskell
  code coverage reports as generated by the recipe in the \n  Makefile.\n- `pilots/`:\n
  \   - `raw/`: Databases, mostly untouched as they were collected during pilot \n
  \     or evaluation studies.\n    - `processed/`: Databases that are created from
  the raw data after the \n      fact, by processing it in various ways using `database-builder.exe`.
  The \n      `Makefile` contains recipes to create these files. \n    - `assessments/`:
  Excel spreadsheets that mirror the names in the \n      `processed/` directory.
  These spreadsheets contain evaluations by humans \n      of the same data. They
  can be used to evaluate or debug the application, \n      using `report.exe`, or
  to change or annotate the processed data. There \n      are also documents in this
  directory that are non-machine readable, \n      containing remarks of IDEAS' output
  by a human examiner.\n    - `regressions/`: This directory contains `.exp` files
  that concatenates \n      the expected output of the processed databases. This allows
  for a \n      rudimentary regression test, using `diff`.\n- `networks/`: Bayesian
  networks created in Genie, and a supporting XML file \n  containing translations
  of the labels.\n\n\n\nApart from the main `advise-me.cgi` binary, there are a couple
  of auxiliary \nbinaries to use:\n\n-   The `advise-me.cgi` binary provides the service:
  you provide `input` via a \n    POST or GET request, and it will respond with the
  information you \n    requested. There are also additional commands that can be
  given to make it \n    do other things, like rerunning or reporting. Some of these
  are \n    deprecated, and they aren't documented well.\n\n-   `network-builder.exe`
  builds, given an `.xdsl` file from `networks/`, the \n    interface file necessary
  for running that network in our Haskell \n    environment. Unfortunately, it cannot
  itself be actually built: it depends \n    on the Advise-Me library, which itself
  depends on the files that it is \n    supposed to generate! From `cabal-install`
  version 2, I believe that we \n    could use its autogeneration facilities. For
  now, as a crutch, we run \n    `app/NetworkBuilder.hs` as a script â€” see the `Makefile`.\n\n-
  \  The `database-builder.exe` binary is a tool to create the initial database \n
  \   and process existing databases. It gives us the ability to reuse input \n    data
  collected from a previous run and generate new output for it, as well \n    as annotate
  the database with information tables. As there are many flags \n    and switches,
  call it with `--help` for more info.\n\n\n\nTo inspect the resulting databases or
  to examine statistics, there are \nmultiple options.\n\n-   `advise-me-admin.cgi`
  provides a web interface to inspect the databases \n    and report on statistics.
  \n\n-   `report.exe` can be used offline to compare assessments from IDEAS in the
  \n    database against human assessments with the `humanvsmachine` subcommand. \n
  \   It can also count how often evidence occurs with the `priors` subcommand. \n
  \   Finally, it can generate a legacy HTML page with diagnostics info, similar \n
  \   to the overview in `advise-me-admin.cgi`.\n\n\n\nTesting\n-------------------------------------------------------------------------------\n\nTests
  that are implemented now relate exclusively to finding the evidence. \nOther tests
  are mostly non-existent, so functionality may break without \nwarning. (For more
  fine-grained information on how well the evidence matches \nour expectations, see
  `report.exe`.)\n\nRudimentary regression tests can be performed with a `diff`, simply
  to check \nwhether the output has changed since the last update. `make regressions`
  does \nthis for you.\n\n`cabal test` runs the `tasty` test suite with particular
  example requests, to \ncheck if they still find the evidence we expect. Whenever
  you fix a specific \nbug, please add a test along with the relevant request XML.\n\n\n\nCoverage\n-------------------------------------------------------------------------------\n\nTo
  inspect code coverage, do `cabal clean` and `cabal configure \n--enable-coverage`
  and rebuild the binaries that you want to test. After \nrunning the binaries, `.tix`
  files will be created (that you can optionally \ncombine with `hpc sum *.tix`).
  From the `tix` and `mix` files, you can \ngenerate a HTML coverage index or a statistics
  report. For example:\n\n   hpc report \\\n      --hpcdir=dist/hpc/vanilla/mix/Advise-me-0.1
  \\\n      --hpcdir=dist/hpc/vanilla/mix/database-builder.exe \\\n      database-builder.exe.tix\n\n\nProfiling\n-------------------------------------------------------------------------------\n\nIf
  you have installed the libraries with `--enable-library-profiling` and \nconfigured
  cabal with `--enable-library-profiling \n--enable-executable-profiling`, then you
  can build a profiling version of the \nmain CGI binary. The `Makefile` contains
  a recipe for a PDF report.\n"
description-type: markdown
hash: b038a7abc25dd27e056deba7caa2d1af2336c75fa8210eaea10b12ef93a4fdeb
homepage: http://advise-me.ou.nl/
latest: '0.1'
license-name: Apache-2.0
maintainer: bastiaan.heeren@ou.nl
synopsis: Assessment services for the Advise-Me project
test-bench-deps: {}
