all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.1.0
- 0.4.0.1
- 0.4.0.2
- 0.4.1.0
- 0.4.1.1
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
- 0.5.2.2
- 0.6.0.0
author: Christian Hoener zu Siederdissen, 2011-2019
basic-deps:
  DPutils: '>=0.1.0 && <0.1.1'
  OrderedBits: '>=0.0.2 && <0.0.3'
  PrimitiveArray: '>=0.10.0 && <0.10.1'
  QuickCheck: '>=2.7'
  base: '>=4.7 && <5.0'
  bits: '>=0.4'
  containers: '>=0'
  deepseq: '>=0'
  ghc-prim: '>=0'
  mmorph: '>=1.0'
  mtl: '>=2.0'
  primitive: '>=0.5.4'
  singletons: '>=2.4'
  strict: '>=0.3'
  template-haskell: '>=2.0'
  th-orphans: '>=0.12'
  transformers: '>=0.3'
  tuple: '>=0.3'
  vector: '>=0.11'
changelog: |+
  0.6.0.0
  -------

  - major change as to how rule compilation proceeds (ctor spec -> type class instances)
  - use new PrimitiveArray-0.9.0.0
  - backtrace from any given index using 'axiomAt'
  - Epsilon is tagged @Global or @Local, to allow local-alignment style algorithms

  0.5.3.0
  -------

  - using unboxed Ints (primbool style) for rule guards. This nets a nice speedup
    of 30-50% for linear languages

  0.5.2.2
  -------

  - Modified signature of Edge to make explicit the @From@ and @To@ nodes of the
    edge. Minor version bump, because @Edge@ is not official yet.
  - optimized table filling yields large improvements for linear languages

  0.5.2.1
  -------

  - removed upper bounds

  0.5.2.0
  -------

  - table filling fully inlined in the forward algorithm
  - experimental PrimBool operations
  - note: these optimizations are mostly of interest for linear languages, where
    is rule (or function call) is comparatively expensive
  - major re-arrangement of modules: import ADP.Fusion.Core for development of
    novel DP systems. Import ADP.Fusion.Point if you want to write a sequence
    alignment algorithm

  0.5.1.0
  -------

  - improved table filling algorithm performance
  - some optimizations to terminal symbols

  0.5.0.0
  -------

  - complete re-design of Inside / Outside / Complement handling based on phantom
    types
  - very liberal combination of multi-tape grammars
  - simplified index generation system (both faster, and easier to write new
    symbol now)

  0.4.1.1
  -------

  - bugfix in Multitape Subword Index calculations (A.F.S.Indices.hs) [this one
    is quite spurious. I needed quickcheck to find a suitable minimal example
    where Pseudoknot.hs fails]

  0.4.1.0
  -------

  - initial support for multi-context free grammars
  - mcfgs allow for interleaved syntactic variables
  - applications include: natural language modelling and pseudoknotted structures
    in RNA
  - the simplest formal language that requires this is: a^i b^j a^i b^j
  - the [GenussFold](http://hackage.haskell.org/package/GenussFold) library gives
    a simple example grammar

  0.4.0.2
  -------

  - bugfixes

  0.4.0.0
  -------

  - travic-ci integration
  - forward phase now operates on immutable tables that are internally thawed
  - resembles the behavior of Data.Vector.Generic.constructN
  - Empty needs to be bound to input. We require this as certain index structures
    have no natural notion of and empty index -- unless one provides additional
    information in the index

  0.3.0.0
  -------

  - simplified boundary checking: sometimes gives performance gain (!) due to one
    loop variable less
  - optimized loop variable design following "The HERMIT in the Stream" (Farmer
    et al, 2014)
  - somewhat nicer programmer interfaces
  - automatic filling and freezing of tables
  - multiple example algorithms (build with -fexamples switch):
    - Needleman-Wunsch global alignment
    - RNA secondary structure prediction using simple base pair maximization
  - updated Table code to handle single-dim Subwords in a better way.
  - simplified backtracking

  0.2.x.x
  -------

  - Streamlined interface: access everything via ADP.Fusion
  - /Multi-tape/ grammars can now be written and are fused

changelog-type: markdown
description: "[![Build Status](https://travis-ci.org/choener/ADPfusion.svg?branch=master)](https://travis-ci.org/choener/ADPfusion)\n\n#
  ADPfusion\n\n[*generalized Algebraic Dynamic Programming Homepage*](http://www.bioinf.uni-leipzig.de/Software/gADP/)\n\nIdeas
  implemented here are described in a couple of papers:\n\n\n\n1.  Christian Hoener
  zu Siederdissen  \n    *Sneaking Around ConcatMap: Efficient Combinators for Dynamic
  Programming*  \n    2012, Proceedings of the 17th ACM SIGPLAN international conference
  on Functional programming  \n    [paper](http://doi.acm.org/10.1145/2364527.2364559)
  [preprint](http://www.tbi.univie.ac.at/newpapers/pdfs/TBI-p-2012-2.pdf)  \n1.  Andrew
  Farmer, Christian Höner zu Siederdissen, and Andy Gill.  \n    *The HERMIT in the
  stream: fusing stream fusion’s concatMap*  \n    2014, Proceedings of the ACM SIGPLAN
  2014 workshop on Partial evaluation and program manipulation.  \n    [paper](http://dl.acm.org/citation.cfm?doid=2543728.2543736)
  \ \n1.  Christian Höner zu Siederdissen, Ivo L. Hofacker, and Peter F. Stadler.
  \ \n    *Product Grammars for Alignment and Folding*  \n    2014, IEEE/ACM Transactions
  on Computational Biology and Bioinformatics. 99  \n    [paper](http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6819790)
  \ \n1.  Christian Höner zu Siederdissen, Sonja J. Prohaska, and Peter F. Stadler
  \ \n    *Algebraic Dynamic Programming over General Data Structures*  \n    2015,
  BMC Bioinformatics  \n    [preprint](http://www.bioinf.uni-leipzig.de/Software/gADP/preprints/hoe-pro-2015.pdf)
  \ \n1.  Maik Riechert, Christian Höner zu Siederdissen, and Peter F. Stadler  \n
  \   *Algebraic dynamic programming for multiple context-free languages*  \n    2016,
  Theoretical Computer Science  \n    [preprint](http://www.bioinf.uni-leipzig.de/Software/gADP/preprints/rie-hoe-2015.pdf)
  \ \n\n\n\n# Introduction\n\nADPfusion combines stream-fusion (using the stream interface
  provided by the\nvector library) and type-level programming to provide highly efficient
  dynamic\nprogramming combinators.\n\nFrom the programmers' viewpoint, ADPfusion
  behaves very much like the original\nADP implementation <http://bibiserv.techfak.uni-bielefeld.de/adp/>
  developed by\nRobert Giegerich and colleagues, though both combinator semantics
  and\nbacktracking are different.\n\nThe library internals, however, are designed
  not only to speed up ADP by a\nlarge margin (which this library does), but also
  to provide further runtime\nimprovements by allowing the programmer to switch over
  to other kinds of data\nstructures with better time and space behaviour. Most importantly,
  dynamic\nprogramming tables can be strict, removing indirections present in lazy,
  boxed\ntables.\n\nAs an example, even rather complex ADP code tends to be completely
  optimized to\nloops that use only unboxed variables (Int# and others, indexIntArray#
  and\nothers).\n\nCompletely novel (compared to ADP), is the idea of allowing efficient
  monadic\ncombinators. This facilitates writing code that performs backtracking,
  or\nsamples structures stochastically, among others things.\n\n\n\n\n# Installation\n\nFollow
  the [gADP examples](http://www.bioinf.uni-leipzig.de/Software/gADP/index.html).\n\n\n\n#
  Implementors Notes (if you want to extend ADPfusion)\n\nThese have been moved to
  [HACKING.md](https://github.com/choener/ADPfusion/blob/master/HACKING.md).\n\n####
  Contact\n\nChristian Hoener zu Siederdissen  \nLeipzig University, Leipzig, Germany
  \ \nchoener@bioinf.uni-leipzig.de  \n<http://www.bioinf.uni-leipzig.de/~choener/>
  \ \n\n"
description-type: markdown
hash: 42bd03213d6de76838061f4180d20f873405d0323b3ce048f27ee3de1cb1e75e
homepage: https://github.com/choener/ADPfusion
latest: 0.6.0.0
license-name: BSD-3-Clause
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Efficient, high-level dynamic programming.
test-bench-deps:
  ADPfusion: '>=0'
  DPutils: '>=0.1.0 && <0.1.1'
  OrderedBits: '>=0.0.2 && <0.0.3'
  PrimitiveArray: '>=0.10.0 && <0.10.1'
  QuickCheck: '>=2.7'
  base: '>=4.7 && <5.0'
  bits: '>=0.4'
  containers: '>=0'
  deepseq: '>=0'
  ghc-prim: '>=0'
  mmorph: '>=1.0'
  mtl: '>=2.0'
  primitive: '>=0.5.4'
  singletons: '>=2.4'
  strict: '>=0.3'
  tasty: '>=0.11'
  tasty-quickcheck: '>=0.8'
  tasty-th: '>=0.1'
  template-haskell: '>=2.0'
  th-orphans: '>=0.12'
  transformers: '>=0.3'
  tuple: '>=0.3'
  vector: '>=0.11'
