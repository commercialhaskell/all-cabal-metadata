all-versions:
- 0.4.0.0
- 0.5.0.0
author: Cthulhu
basic-deps:
  GLFW-b: '>=3.2.1.0 && <3.4'
  OpenGL: '>=3.0.2.2 && <3.1'
  base: '>=4.7 && <5'
  monad-loops: '>=0.4.3 && <0.5'
  nanovg: '>=0.6.0.0 && <0.7'
  nanovg-simple: '>=0'
  safe-exceptions: '>=0.1.7.0 && <0.2'
  text: '>=1.2.3.0 && <1.3'
  time: '>=1.8.0.2 && <1.10'
changelog: ''
changelog-type: ''
description: |
  # nanovg-simple

  Simple interface to creating window with associated NanoVG context. See
  [nanovg.h](https://github.com/memononen/nanovg/blob/master/src/nanovg.h) for comprehensive listing of methods.

  Refer to `Graphics.NanoVG.Simple` module for utilities to create NanoVG window. Simple example:

  ```haskell
  import           Graphics.NanoVG.Simple
  import qualified NanoVG as NVG

  main :: IO ()
  main = run 800 600 "Simple app" $ simpleWindow $
    NVG.circle ctx 10 10 10 *> NVG.fill ctx
  ```

  Also provided is wrapper for rendering combination of composable picture pieces: see `Graphics.NanoVG.Picture`.

  ```haskell
  import           Graphics.NanoVG.Picture
  import           Graphics.NanoVG.Simple

  main :: IO ()
  main = run 800 600 "Simple app" $ asWindow $
    pure $ translateP 50 0 $ mconcat
      [ fill (Color 1 1 1 1) $ circle (10, 10) 10
      , stroke (Color 1 1 1 1) $ circle (10, 10) 15
      , fill (Color 0 1 0 1) $ $ translateS (-50) 0 $ line (0, 0) (5, 5)
      ]
  ```
description-type: markdown
hash: 57a194573b63f7c22ba48376e02341aebde2d577e2898e75d6c669c69f6507e4
homepage: https://github.com/CthulhuDen/nanovg-simple#readme
latest: 0.5.0.0
license-name: BSD-3-Clause
maintainer: cthulhu.den@gmail.com
synopsis: Simple interface to rendering with NanoVG
test-bench-deps: {}
