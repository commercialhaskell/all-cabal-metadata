all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.2.0.0
- 0.2.1.0
author: Andrew Martin
basic-deps:
  base: '>=4.14 && <5'
  unlifted: '>=0.2.1'
changelog: |
  # Revision history for natural-arithmetic

  ## 0.2.1.0 -- 2024-02-02

  * Add `fromInt` and `fromInt#` to `Arithmetic.Fin`.
  * Update package metadata.

  ## 0.2.0.0 -- 2024-01-09

  * Change the types of `with#` and `construct#` (both in `Arithmetic.Fin`)
    to use an unboxed "less than" instead of a boxed one. This is a breaking
    change.
  * Add patterns for the natural numbers 5, 6, 7.
  * Add a lot of primitives for working with unboxed natural and inequalities.
    GHC is unable to eliminate the boxed `Fin` type in a suprisingly large
    number of cases, and `Fin#` helps a lot with this.

  ## 0.1.4.0 -- 2023-05-31

  * Add unboxed Nat type
  * Add nominal role for Fin# type constructor. Technically, this is a breaking
    change, but if anyone was using coerce on a Fin#, they were already in a
    bunch of trouble. So, there is not going to be a major version bump for this.

  ## 0.1.3.0 -- 2022-05-23

  * Add strict variant of descend.
  * Add unboxed Fin type

  ## 0.1.2.0 -- 2019-01-20

  * Add strict variant of descend.

  ## 0.1.1.0 -- 2019-11-22

  * Undocumented

  ## 0.1.0.0 -- 2019-09-04

  * Initial release.
changelog-type: markdown
description: |-
  A search for terms like `arithmetic` and `natural` on hackage reveals
  no shortage of libraries for handling the arithmetic of natural
  numbers. How is this library any different some of the others? It has
  a particular purpose: providing a foundation on top on which other
  libraries may define types indexed by sizes. This uses GHC's
  non-inductively-defined `GHC.TypeNats.Nat`. As a rule, this does not
  use `unsafeCoerce` internally anywhere.

  Perhaps the most direct competitor to `natural-arithmetic` is a
  typechecker plugin like
  <https://github.com/yav/type-nat-solver type-nat-solver>. The big
  difference is that `type-nat-solver` can really only be used in
  application code, not in library code. This is because libraries
  should not require the presence of typechecker plugins. Technically,
  they can (you could document it), but many developers will not
  use libraries that have unusual install procedures like this.

  This library, in places, requires users to use the 'TypeApplications`
  language extension. This is done when a number is only need at
  the type level (without a runtime witness).

  This library uses a non-minimal core, providing redundant primitives
  in `Arithmetic.Lt` and `Arithmetic.Lte`. This is done in the interest
  of making it easy for user to assemble proofs. Recall that proof
  assembly is done by hand rather than by an SMT solver, so removing
  some tediousness from this is helpful to users.

  This library provides left and variants variants of several functions.
  For example, `Arithmetic.Lte` provides both `substituteL` and
  `substituteR`. This is only done when there are two variants of
  a function. For substitution, this is the case because we have
  `b = c, a ≤ b ==> a ≤ c` and `a = c, a ≤ b ==> c ≤ b`. So, we
  provide both `substituteL` and `substituteR`. However,
  for addition of inequalities, we have four possible variants:
  `a ≤ b, c ≤ d ==> a + c ≤ b + d`, `a ≤ b, c ≤ d ==> c + a ≤ b + d`,
  `a ≤ b, c ≤ d ==> a + c ≤ d + b`, `a ≤ b, c ≤ d ==> c + a ≤ d + b`.
  Consequently, we only provide a single `plus` function, and users
  must use `Arithmetic.Plus.commutative` to further manipulate the
  inequality.

  Here are the proof-manipulation vocabulary used by this library.
  Many of these terms are not standard, but we try to be consistent
  in this library:

  * Weaken: Increase an upper bound without changing the bounded value

  * Increment: Increase an upper bound along with the bounded value

  * Decrement: Decrease an upper bound along with the bounded value

  * Substitute: Replace a number with an equal number
description-type: haddock
hash: 1296ff4149f878df02d15a9b0197c6f27f311d56d478223d7e7935f030e293f0
homepage: https://github.com/byteverse/natural-arithmetic
latest: 0.2.1.0
license-name: BSD-3-Clause
maintainer: amartin@layer3com.com
synopsis: Arithmetic of natural numbers
test-bench-deps: {}
