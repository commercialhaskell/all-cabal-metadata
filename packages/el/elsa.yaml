homepage: http://github.com/ucsd-progsys/elsa
changelog-type: markdown
hash: 94932425d58089c65df1e598f55a9905723b668ce27b978e2b9c676400193aa1
test-bench-deps:
  base: -any
  elsa: -any
  filepath: -any
  tasty-hunit: -any
  tasty: -any
  directory: -any
maintainer: jhala@cs.ucsd.edu
synopsis: A tiny language for understanding the lambda-calculus
changelog: |
  # Changes

  0.2.2.0

  - Faster (and correct!) implementation of Normalization by Mark Barbone (@mb64)
  - Better parse error messages by Justin Yao Du (@justinyaodo)
  - Updated to work with GHC 8.10.7 by Rose Kunkel (@rosekunkel)
basic-deps:
  base: ==4.*
  unordered-containers: -any
  json: -any
  megaparsec: '>=7.0.4'
  elsa: -any
  filepath: -any
  array: -any
  ansi-terminal: -any
  mtl: -any
  hashable: -any
  dequeue: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.2.2.0
author: Ranjit Jhala
latest: 0.2.2.0
description-type: markdown
description: "# ELSA\n\n`elsa` is a tiny language designed to build\nintuition about
  how the Lambda Calculus, or\nmore generally, _computation-by-substitution_ works.\nRather
  than the usual interpreter that grinds\nlambda terms down to values, `elsa` aims
  to be\na light-weight _proof checker_ that determines\nwhether, under a given sequence
  of definitions,\na particular term _reduces to_ to another.\n\n## Online Demo\n\nYou
  can try `elsa` online at [this link](http://goto.ucsd.edu/elsa/index.html)\n\n##
  Install\n\nYou can locally build and run `elsa` by\n\n1. Installing [stack](https://www.haskellstack.org)\n2.
  Cloning this repo\n3. Building `elsa` with `stack`.\n\nThat is, to say\n\n```bash\n$
  curl -sSL https://get.haskellstack.org/ | sh\n$ git clone https://github.com/ucsd-progsys/elsa.git\n$
  cd elsa\n$ stack install\n```\n## Editor Plugins\n\n- [VSCode](https://github.com/mistzzt/vscode-elsa-lang)\n-
  [Vim](https://github.com/glapa-grossklag/elsa.vim)\n\n## Overview\n\n`elsa` programs
  look like:\n\n```haskell\n-- id_0.lc\nlet id   = \\x -> x\nlet zero = \\f x -> x\n\neval
  id_zero :\n  id zero\n  =d> (\\x -> x) (\\f x -> x)   -- expand definitions\n  =a>
  (\\z -> z) (\\f x -> x)   -- alpha rename\n  =b> (\\f x -> x)             -- beta
  reduce\n  =d> zero                    -- expand definitions\n\neval id_zero_tr :\n
  \ id zero  \n  =*> zero                    -- transitive reductions\n```\n\nWhen
  you run `elsa` on the above, you should get the following output:\n\n```bash\n$
  elsa ex1.lc\n\nOK id_zero, id_zero_tr.\n```\n\n## Partial Evaluation\n\nIf instead
  you write a partial sequence of\nreductions, i.e. where the _last_ term can\nstill
  be further reduced:\n\n```haskell\n-- succ_1_bad.lc\nlet one  = \\f x -> f x\nlet
  two  = \\f x -> f (f x)\nlet incr = \\n f x -> f (n f x)\n\neval succ_one :\n  incr
  one\n  =d> (\\n f x -> f (n f x)) (\\f x -> f x)\n  =b> \\f x -> f ((\\f x -> f
  x) f x)\n  =b> \\f x -> f ((\\x -> f x) x)\n```\n\nThen `elsa` will complain that\n\n```bash\n$
  elsa ex2.lc\n\nex2.lc:11:7-30: succ_one can be further reduced\n\n  11  |   =b>
  \\f x -> f ((\\x -> f x) x)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nYou
  can _fix_ the error by completing the reduction\n\n```haskell\n-- succ_1.lc\nlet
  one  = \\f x -> f x\nlet two  = \\f x -> f (f x)\nlet incr = \\n f x -> f (n f x)\n\neval
  succ_one :\n  incr one\n  =d> (\\n f x -> f (n f x)) (\\f x -> f x)\n  =b> \\f x
  -> f ((\\f x -> f x) f x)\n  =b> \\f x -> f ((\\x -> f x) x)\n  =b> \\f x -> f (f
  x)                 -- beta-reduce the above\n  =d> two                             --
  optional\n```\n\nSimilarly, `elsa` rejects the following program,\n\n```haskell\n--
  id_0_bad.lc\nlet id   = \\x -> x\nlet zero = \\f x -> x\n\neval id_zero :\n  id
  zero\n  =b> (\\f x -> x)\n  =d> zero\n```\n\nwith the error\n\n```bash\n$ elsa ex4.lc\n\nex4.lc:7:5-20:
  id_zero has an invalid beta-reduction\n\n   7  |   =b> (\\f x -> x)\n          ^^^^^^^^^^^^^^^\n```\n\nYou
  can fix the error by inserting the appropriate\nintermediate term as shown in `id_0.lc`
  above.\n\n## Syntax of `elsa` Programs\n\nAn `elsa` program has the form\n\n```haskell\n--
  definitions\n[let <id> = <term>]+\n\n-- reductions\n[<reduction>]*\n```\n\nwhere
  the basic elements are lambda-calulus `term`s\n\n```haskell\n<term> ::=  <id>\n
  \         \\ <id>+ -> <term>\n            (<term> <term>)\n```\n\nand `id` are lower-case
  identifiers            \n\n```\n<id>   ::= x, y, z, ...\n```\n\nA `<reduction>`
  is a sequence of `term`s chained together\nwith a `<step>`\n\n```haskell\n<reduction>
  ::= eval <id> : <term> (<step> <term>)*\n\n<step>      ::= =a>   -- alpha equivalence\n
  \               =b>   -- beta  equivalence\n                =d>   -- def   equivalence\n
  \               =*>   -- trans equivalence\n                =~>   -- normalizes
  to\n```\n\n\n## Semantics of `elsa` programs\n\nA `reduction` of the form `t_1 s_1
  t_2 s_2 ... t_n` is **valid** if\n\n* Each `t_i s_i t_i+1` is **valid**, and\n*
  `t_n` is in normal form (i.e. cannot be further beta-reduced.)\n\nFurthermore, a
  `step` of the form  \n\n* `t =a> t'` is valid if `t` and `t'` are equivalent up
  to **alpha-renaming**,\n* `t =b> t'` is valid if `t` **beta-reduces** to `t'` in
  a single step,\n* `t =d> t'` is valid if `t` and `t'` are identical after **let-expansion**.\n*
  `t =*> t'` is valid if `t` and `t'` are in the reflexive, transitive closure\n             of
  the union of the above three relations.\n* `t =~> t'` is valid if `t` [normalizes
  to][normalform] `t'`.\n\n\n(Due to Michael Borkowski)\n\nThe difference between
  `=*>` and `=~>` is as follows.\n\n* `t =*> t'` is _any_ sequence of zero or more
  steps from `t` to `t'`. \n  So if you are working forwards from the start, backwards
  from the end, \n  or a combination of both, you could use `=*>` as a quick check
  to see \n  if you're on the right track. \n\n* `t =~> t'` says that `t` reduces
  to `t'` in zero or more steps **and** \n   that `t'` is in **normal form** (i.e.
  `t'` cannot be reduced further). \n   This means you can only place it as the *final
  step*. \n\nSo `elsa` would accept these three\n\n```\neval ex1:\n  (\\x y -> x y)
  (\\x -> x) b \n  =*> b\n\neval ex2:\n  (\\x y -> x y) (\\x -> x) b \n  =~> b\n\neval
  ex3:\n  (\\x y -> x y) (\\x -> x) (\\z -> z) \n  =*> (\\x -> x) (\\z -> z) \n  =b>
  (\\z -> z)\n```\n\nbut `elsa` would *not* accept \n\n```\neval ex3:\n  (\\x y ->
  x y) (\\x -> x) (\\z -> z) \n  =~> (\\x -> x) (\\z -> z) \n  =b> (\\z -> z)\n```\n\nbecause
  the right hand side of `=~>` can still be reduced further.\n\n[normalform]: http://dl.acm.org/citation.cfm?id=860276\n[normalform-pdf]:
  http://www.cs.cornell.edu/courses/cs6110/2014sp/Handouts/Sestoft.pdf\n"
license-name: MIT
