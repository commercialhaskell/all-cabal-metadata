all-versions:
- 0.3.0
- 0.3.1
- 0.3.2
- 0.4.0
- 0.4.1
- 0.6.0
- 1.0.0
- 2.0.0
- 2.0.1
- 2.1.0
author: Sean Gillespie
basic-deps:
  MonadRandom: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  elocrypt: '>=0'
  random: '>=0'
changelog: ''
changelog-type: ''
description: "# Elocrypt\n[![Build Status](https://travis-ci.org/sgillespie/elocrypt.svg?branch=master)](https://travis-ci.org/sgillespie/elocrypt)\n\nElocrypt
  generates pronounceable, easy-to-remember, hard-to-guess passwords... as hard as
  Vince Carter's knee cartilage is. Elocrypt includes a Haskell library and program.\n\n##
  Prerequisites\nIn order to build or install you will need\n * GHC (tested on 8.6.5)\n
  * Stack (tested on 2.1.3.1)\n\n## Installing\nElocrypt is on [Hackage](https://hackage.haskell.org/package/elocrypt).
  \ Installation is as easy as:\n```\ncabal install elocrypt\n```\n\nBinaries are
  also available:\n * [elocrypt-2.1.0-linux-bin.tar.gz](https://github.com/sgillespie/elocrypt/releases/download/v2.1.0/elocrypt-v2.1.0-linux-bin.tar.gz)\n
  * [elocrypt-2.1.0-osx-bin.exe](https://github.com/sgillespie/elocrypt/releases/download/v2.1.0/elocrypt-v2.1.0-osx-bin.tar.gz)\n\n##
  Running\nGenerate a list passwords:\n```\nelocrypt [length]\n```\n\nYou can also
  generate random phrases (1 per line):\n```\nelocrypt --passphrases [min-length]
  [max-length]\n```\n\n## Obtaining the source\nElocrypt sources can be found \n *
  https://github.com/sgillespie/elocrypt\n * https://hackage.haskell.org/package/elocrypt\n\n##
  Building\nIn order to build or install you will need\n * [GHC](https://www.haskell.org/ghc)
  (tested on 8.6.5)\n * [Haskell Stack](https://haskellstack.org) (tested on 2.1.3.1)\n\nBuild
  elocrypt:\n```\nstack setup\nstack build\n```\nThen, install (if desired):\n```\nstack
  install\n```\n\n## API Documentation\nThe full API documentation is on hackage @
  https://hackage.haskell.org/package/elocrypt/docs. To build the documentation yourself,
  run\n```\nstack haddock\n```\n\n### API Examples\nYou can use elocrypt to generate
  words in any Haskell code, so long as you have installed elocrypt. Generate a word
  by using Data.Elocrypt.newPassword\n```\nimport Data.Elocrypt\n...\n-- Generate
  a word of length 10\nfooGen :: IO String\nfooGen = newPassword 10 `liftM` getStdGen\n```\n\nAlternatively,
  you can use Data.Elocrypt.mkPassword if you want to complete control of the random
  monad\n```\nimport Data.Elocrypt\nimport Control.Monad.Random\n...\n-- Generate
  a word of length 10\nfooGen' :: IO String\nfooGen' = evalRand (mkPassword 10) `liftM`
  getStdGen\n```\n\n## Authors\nSean Gillespie <sean@mistersg.net>\n\n## Credits\nThanks
  to Tom Van Vleck for creating a 3rd order english approximation password generator.
  \ Elocrypt is based on his javascript generator @ http://www.multicians.org/thvv/gpw-js.html\n\n##
  Copying\nYou can use this source for any reason, provided that you:\n\n * Let Tom
  Van Vleck know you are using it: http://www.multicians.org/cgi-sys/cgiwrap/thvv/squirnet.cgi\n
  * Share your source freely\n * Give Tom Van Vleck, and all the other pioneers, if
  you use the data or algorithms. (A link to http://www.multicians.org/thvv/gpw-js.html
  is sufficient\n * Use a compatible license\n\nPlease see LICENSE for all details\n"
description-type: markdown
hash: 2bf49f367186e82b36c434f5304063f5443a0f9e8e00b83636ba5ee62bc39111
homepage: https://www.github.com/sgillespie/elocrypt
latest: 2.1.0
license-name: LicenseRef-OtherLicense
maintainer: sean@mistersg.net
synopsis: Generate easy-to-remember, hard-to-guess passwords
test-bench-deps:
  MonadRandom: '>=0'
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  elocrypt: '>=0'
  hlint: '>=0'
  proctest: '>=0'
  random: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  tasty-th: '>=0.1.7'
