homepage: https://github.com/RyanGlScott/eliminators
changelog-type: markdown
hash: d7e4c106e75720c7fcc3bb37a31ca6f904655d00b9f5457fab1047d8f29175b9
test-bench-deps:
  base: '>=4.17 && <4.18'
  hspec: '>=2 && <3'
  singletons-base: '>=3.1 && <3.2'
  singleton-nats: '>=0.4.2 && <0.5'
  eliminators: -any
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: Dependently typed elimination functions using singletons
changelog: |
  ### 0.9.2 [2023.02.27]
  * Support building with `th-abstraction-0.5.*`.

  ### 0.9.1 [2022.08.23]
  * Require GHC 9.4.
  * Add `Data.Eliminator.TypeLits`, which re-exports
    `Data.Eliminator.TypeNats.elimNat` and adds a new `elimSymbol` eliminator
    for `GHC.TypeLits.Symbol`.

  ## 0.9 [2021.10.31]
  * Require `singletons-base-3.1` and GHC 9.2.
  * Add `{e,E}limProxy` to `Data.Eliminator`.
  * `Data.Eliminator` no longer exports `{e,E}limFirst` and `{e,E}limLast`
    eliminators. If you wish to use eliminators that work over `First`/`Last`
    from `Data.Monoid`, you must import them `Data.Eliminator.Monoid`. If you
    wish to use eliminators that over `First`/`Last` from `Data.Semigroup`, you
    must import them from the new `Data.Eliminator.Semigroup` module.
  * `Data.Eliminator` no longer exports `{e,E}limProduct` and `{e,E}limSum`
    eliminators. If you wish to use eliminators that work over `Product`/`Sum`
    from `Data.Monoid` or `Data.Semigroup`, you must import them
    `Data.Eliminator.Monoid` or `Data.Eliminator.Semigroup`. If you wish to use
    eliminators that over `Product`/`Sum` from
    `Data.Functor.Product`/`Data.Functor.Sum`, you must import them from the new
    `Data.Eliminator.Functor` module.

  ## 0.8 [2021.03.12]
  * Require `singletons-base-3.0` and GHC 9.0.
  * Remove eliminators for `Data.Semigroup.Option`, which is deprecated as of
    `base-4.15.0.0`.

  ## 0.7 [2020.03.25]
  * Require `singletons-2.7` and GHC 8.10.
  * Add experimental support for generating type-level eliminators through the
    `deriveTypeElim` and `deriveTypeElimNamed` functions.
  * Add eliminators for `All`, `Any`, `Arg`, `Const`, `Down`, `Dual`, `First`,
    `Identity`, `Last`, `Max`, `Min`, `Option`, `Product`, `Sum`,
    and `WrappedMonoid`.

  ## 0.6 [2019.08.27]
  * Require `singletons-2.6` and GHC 8.8.

  ### 0.5.1 [2019.04.26]
  * Support `th-abstraction-0.3.0.0` or later.

  ## 0.5 [2018.09.18]
  * Require `singletons-2.5` and GHC 8.6.

  ### 0.4.1 [2018.02.13]
  * Add `elimVoid` to `Data.Eliminator`.

  ## 0.4 [2018.01.09]
  * Require `singletons-2.4` and GHC 8.4.

  ## 0.3 [2017-11-07]
  * Migrate the old `elimNat` from `Data.Eliminator` (which worked over the `Nat`
    from `GHC.TypeNats`) to `Data.Eliminator.TypeNats`. There `elimNat` that now
    lives in `Data.Eliminator` is for an unrelated `Nat` data type from the
    `singleton-nats` package (which is a proper, inductively defined, Peano
    natural number type).

  ## 0.2 [2017-07-22]
  * Introduce the `Data.Eliminator.TH` module, which provides functionality for
    generating eliminator functions using Template Haskell. Currently, only
    simple algebraic data types that do not use polymorphic recursion are
    supported.
  * All eliminators now use predicates with `(~>)`.

  ## 0.1 [2017-07-02]
  * Initial release.
basic-deps:
  extra: '>=1.4.2 && <1.8'
  base: '>=4.17 && <4.18'
  text: '>=2.0.1 && <2.1'
  th-abstraction: '>=0.4 && <0.6'
  singletons-base: '>=3.1 && <3.2'
  singleton-nats: '>=0.4.2 && <0.5'
  th-desugar: '>=1.14 && <1.15'
  template-haskell: '>=2.19 && <2.20'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- 0.5.1
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- 0.9.1
- 0.9.2
author: Ryan Scott
latest: 0.9.2
description-type: markdown
description: |
  # `eliminators`
  [![Hackage](https://img.shields.io/hackage/v/eliminators.svg)][Hackage: eliminators]
  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/eliminators.svg)](http://packdeps.haskellers.com/reverse/eliminators)
  [![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]
  [![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal: BSD3]
  [![Build Status](https://github.com/RyanGlScott/eliminators/workflows/Haskell-CI/badge.svg)](https://github.com/RyanGlScott/eliminators/actions?query=workflow%3AHaskell-CI)

  [Hackage: eliminators]:
    http://hackage.haskell.org/package/eliminators
    "eliminators package on Hackage"
  [Haskell.org]:
    http://www.haskell.org
    "The Haskell Programming Language"
  [tl;dr Legal: BSD3]:
    https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29
    "BSD 3-Clause License (Revised)"

  This library provides eliminators for inductive data types, leveraging the power of the `singletons` library to allow dependently typed elimination.
license-name: BSD-3-Clause
