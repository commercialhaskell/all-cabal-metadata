all-versions:
- 0.1.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.2.1
- 0.3.0.0
- 0.3.0.2
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.7.0
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
author: Alexander Thiemann <mail@athiemann.net>, Simon Marechal <bartavelle@gmail.com>
basic-deps:
  aeson: '>=1'
  base: '>=4.15 && <5'
  template-haskell: '>=0'
changelog: |
  # v0.8.3

   * Support Int32 and Int64, from domenkozar

  # v0.8.0

   * Directly support integer keys in dictionnaries, thanks to odanoboru

  # v0.7.0

   * Support for GHC 9

  # v0.6.0

   * Support for Elm 0.19

  # v0.5.2

   * Fix a bug about tuples.

  # v0.5.0

   * Large change for sum types that used `constructorTagModifier`. The generated types are now unaffected! This is a breaking change for those who used this feature.

  # v0.4.2

  Drop support for `aeson < 1.`
  Add support for `aeson == 1.2.*`

  # v0.4.1

  ## Bugfixes
   * Fixed support for Elm 0.18 (see issue #17)

  # v0.4.0
  ## New features
   * Support for Elm 0.18
   * Dropped support for Elm 0.17 and Elm 0.16

  # v0.3.0
  ## New features
   * Support for Elm 0.17

  # v0.2.2

  ## New features
   * The Elm JSON encoders and decoders now match `aeson` more closely. In partlicular, single constructor sum types are now encoded without
     the constructor. Also, the `aeson` 0.11 option `unwrapUnaryRecords` is now supported.

  ## Bugfixes
   * Fixed Elm type error in encoders for types like `[Map String v]` (0.2.1.2).

  # v0.2.1

  ## New features

   * The template Haskell derivation functions now take `aeson` `Option` type instead of a custom type.
   This change makes it easier to synchronize the Haskell and Elm code.
   * The generated Elm code can be personalized. Helpers functions assist in converting type names, and defining which type will be newtyped.

  ## Notes

   * The generated Elm code depends on the [bartavelle/json-helpers](http://package.elm-lang.org/packages/bartavelle/json-helpers/1.1.0/) package.
changelog-type: markdown
description: |
  Elm Bridge
  =====

  [![Build Status](https://travis-ci.org/agrafix/elm-bridge.svg)](https://travis-ci.org/agrafix/elm-bridge)

  [![Hackage Deps](https://img.shields.io/hackage-deps/v/elm-bridge.svg)](http://packdeps.haskellers.com/reverse/elm-bridge)

  ## Intro

  Hackage: [elm-bridge](http://hackage.haskell.org/package/elm-bridge)

  Building the bridge from [Haskell](http://haskell.org) to [Elm](http://elm-lang.org) and back. Define types once, use on both sides and enjoy easy (de)serialisation. Cheers!

  This version of the package only supports Elm 0.19. Version 0.5.2 supports Elm 0.18, and Version 0.3.0.2 supports Elm 0.16 and Elm 0.17.

  Note that the [bartavelle/json-helpers](http://package.elm-lang.org/packages/bartavelle/json-helpers/latest/) package, with version >= 1.2.0, is expected by the generated Elm modules.

  ## Usage

  ```haskell
  {-# LANGUAGE TemplateHaskell #-}
  import Elm.Derive
  import Elm.Module

  import Data.Proxy

  data Foo
     = Foo
     { f_name :: String
     , f_blablub :: Int
     } deriving (Show, Eq)

  deriveBoth defaultOptions ''Foo

  main :: IO ()
  main =
      putStrLn $ makeElmModule "Foo"
      [ DefineElm (Proxy :: Proxy Foo)
      ]

  ```

  Output will be:

  ```elm
  module Foo where

  import Json.Decode
  import Json.Decode exposing ((:=))
  import Json.Encode
  import Json.Helpers exposing (..)


  type alias Foo  =
     { f_name: String
     , f_blablub: Int
     }

  jsonDecFoo : Json.Decode.Decoder ( Foo )
  jsonDecFoo =
     ("f_name" := Json.Decode.string) `Json.Decode.andThen` \pf_name ->
     ("f_blablub" := Json.Decode.int) `Json.Decode.andThen` \pf_blablub ->
     Json.Decode.succeed {f_name = pf_name, f_blablub = pf_blablub}

  jsonEncFoo : Foo -> Value
  jsonEncFoo  val =
     Json.Encode.object
     [ ("f_name", Json.Encode.string val.f_name)
     , ("f_blablub", Json.Encode.int val.f_blablub)
     ]
  ```

  Also, there are functions `Elm.Json.stringSerForSimpleAdt` and `Elm.Json.stringParserForSimpleAdt` to generate functions for your non-JSON ADT types.

  For more usage examples check the tests or the examples dir.

  ## Install

  ### Haskell

  * Using cabal: `cabal install elm-bridge`
  * From Source: `git clone https://github.com/agrafix/elm-bridge.git && cd elm-bridge && cabal install`

  ### Elm

  * `elm package install bartavelle/json-helpers`

  or, for Elm 0.19:

  * `elm install bartavelle/json-helpers`

  ## Contribute

  Pull requests are welcome! Please consider creating an issue beforehand, so we can discuss what you would like to do. Code should be written in a consistent style throughout the project. Avoid whitespace that is sensible to conflicts. (E.g. alignment of `=` signs in functions definitions) Note that by sending a pull request you agree that your contribution can be released under the BSD3 License as part of the `elm-bridge` package or related packages.
description-type: markdown
hash: af184687f61fe149114209c6b6f2a89549b1148414b0b7db8d05d8a4d4737c4c
homepage: https://github.com/agrafix/elm-bridge
latest: 0.8.4
license-name: BSD-3-Clause
maintainer: Alexander Thiemann <mail@athiemann.net>
synopsis: Derive Elm types and Json code from Haskell types, using aeson's options
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=0'
  containers: '>=0'
  elm-bridge: '>=0'
  hspec: '>=2.0'
  text: '>=0'
