homepage: ''
changelog-type: markdown
hash: 46a877d302b53e1b3088f26d08cfaa40761d2387aa8f7e36764a50fe2c9b3ca0
test-bench-deps:
  base: '>=4.7 && <5'
  text: -any
  containers: -any
  mtl: -any
  elminator: -any
  aeson: -any
  template-haskell: -any
maintainer: sandeep@sras.me
synopsis: Generate ELM types/encoders/decoders from Haskell types.
changelog: |
  # Changelog for elminator

  ## Unreleased changes
basic-deps:
  base: '>=4.7 && <5'
  text: -any
  containers: -any
  mtl: -any
  aeson: -any
  template-haskell: -any
all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.2.2.1
- 0.2.3.0
- 0.2.3.1
- 0.2.4.0
- 0.2.4.1
- 0.2.4.2
author: Sandeep.C.R
latest: 0.2.4.2
description-type: markdown
description: "# Elminator [![Build Status](https://travis-ci.com/sras/elminator.svg?branch=master)](https://travis-ci.com/sras/elminator)\n\nGenerate
  Elm type definitions and JSON encoders/decoders from Haskell source (for Elm 0.19
  and 0.18)\n\n1. Supports generation of polymorphic types (as well as concrete ones)
  in Elm from possibly polymorphic Haskell types, including types with phantom type
  variables.\n2. Supports generation of recursively defined types.\n3. Generates code
  that does not depend on external Elm libraries.\n4. Does not have limits on the
  number of fields that the constructors of your type can have.\n5. Supports JSON
  encoding options exported by the Aeson library comprehensively. The tests in [TravisCI](https://travis-ci.com/sras/elminator)
  exhaustively check the Elm/Haskell round tripping of values for all possible configurations
  of Aeson.options\n6. Supports generation of code that depend on user defined types
  and encoders/decoders in Elm.\n\nHackage page: [https://hackage.haskell.org/package/elminator](https://hackage.haskell.org/package/elminator)\n\n###
  How to use?\n\nTo generate Elm code for a Haskell type, the Haskell type needs to
  have an instance of the `ToHType` type class.\nThis can be automatically derived,
  provided all your constructor field types have `ToHType` instances. A sample can
  be seen below. Please note that language extensions `DeriveGeneric` and `DeriveAnyClass`
  should be enabled to make this work.\n\n```haskell\n{-# Language DeriveGeneric #-}\n{-#
  Language DeriveAnyClass #-}\n\nmodule Lib  where\n\nimport Elminator\nimport GHC.Generics
  (Generic)\n\ndata SingleCon = SingleCon Int String deriving (Generic, ToHType)\n\n```\n\nSince
  this library uses template Haskell to look up type information (in addition to Generics),
  we need to run the code generation code in a template Haskell splice. \nA usage
  sample can be seen in the following code used in the round trip tests for this library.\n\n\n```haskell\n{-#
  Language OverloadedStrings #-}\n{-# Language TemplateHaskell #-}\n\nmodule CodeGen
  where\n\nimport Data.Proxy\nimport Elminator\nimport Data.Text.IO\nimport Data.Text\n\nimport
  Lib\n\nelmSource :: Text\nelmSource =\n  $(generateFor Elm0p19 myDefaultOptions
  \"Autogen\" (Just \"./elm-app/src/Autogen.elm\") $ do\n      include (Proxy :: Proxy
  SingleCon) $ Everything Mono\n      include (Proxy :: Proxy SingleRecCon) $ Everything
  Mono\n      include (Proxy :: Proxy SingleConOneField) $ Everything Mono\n      include
  (Proxy :: Proxy SingleRecConOneField) $ Everything Mono\n      include (Proxy ::
  Proxy TwoCons) $ Everything Mono\n      include (Proxy :: Proxy TwoRecCons) $ Everything
  Mono\n      include (Proxy :: Proxy BigCon) $ Everything Mono\n      include (Proxy
  :: Proxy BigRecCon) $ Everything Mono\n      include (Proxy :: Proxy MixedCons)
  $ Everything Mono\n      include (Proxy :: Proxy Comment) $ Everything Mono\n      include
  (Proxy :: Proxy WithMaybes) $ Everything Mono\n      include (Proxy :: Proxy WithSimpleMaybes)
  $ Everything Mono\n      include (Proxy :: Proxy (WithMaybesPoly (Maybe String)
  Float)) $\n        Definiton Poly\n      include\n        (Proxy :: Proxy (WithMaybesPoly
  (Maybe String) Float))\n        EncoderDecoder\n      include (Proxy :: Proxy (Phantom
  ())) $ Everything Poly\n      include (Proxy :: Proxy (TypeWithPhantom Float)) $
  Everything Poly\n      include (Proxy :: Proxy RecWithList) $ Everything Mono\n
  \     include (Proxy :: Proxy IndRecStart) $ Everything Mono\n      include (Proxy
  :: Proxy IndRec2) $ Everything Mono\n      include (Proxy :: Proxy IndRec3) $ Everything
  Mono\n      include (Proxy :: Proxy NTSingleCon) $ Everything Mono\n      include
  (Proxy :: Proxy NTSingleCon2) $ Everything Poly\n      include (Proxy :: Proxy Tuples)
  $ Everything Mono\n      include (Proxy :: Proxy NestedTuples) $ Everything Mono\n
  \     include (Proxy :: Proxy (NestedTuplesPoly ())) $ Definiton Poly\n      include
  (Proxy :: Proxy (TypeWithExt ())) $ Everything Poly\n      include (Proxy :: Proxy
  (WithEmptyTuple ())) $ Everything Poly\n      include (Proxy :: Proxy (Phantom2
  ())) $ Everything Poly\n      include (Proxy :: Proxy PhantomWrapper) $ Everything
  Poly)\n\n-- The `generateFor` function accepts an elm version (Elm0p19 or Elm0p18),
  a value of type `Options` from the Aeson library\n-- , a module name for the generated
  module, and an optional `FilePath` to which the generated source will be written
  to, and a `Builder` value.\n-- The `Builder` is just a `State` monad that aggregates
  the configuration parameters from the include\n-- calls. The first parameter of
  the include function is a `proxy` value that denotes the type that requires Elm
  code generation.\n-- The second value is a value of type `GenOption` that selects
  which entities needs to be generation, and also selects if the\n-- type generated
  at Elm should be polymorphic. It is defined as follows.\n\ndata GenOption\n  = Definiton
  PolyConfig  -- Generate Type definition in Elm. PolyConfig field decides if the
  type has to be polymorphic\n  | EncoderDecoder -- Generate Encoder and Decoder in
  Elm\n  | Everything PolyConfig -- Generate both type definition, encoders and decoders.
  PolyConfig field decides if the type has to be polymorphic.\n\ndata PolyConfig\n
  \ = Mono | Poly \n```\n\nA sample of generated Elm code can be seen [here](https://bitbucket.org/sras/elminator-test/src/master/elm-app/src/Autogen.elm)\n\n###
  How to explicitly map a Haskell type to an Elm type\n\nSay you have this type defined
  in Haskell\n\n```\n  data Product = Product { pName :: String, pWeight :: Decimal
  }\n```\n\nWe can derive `ToHType` for the above type just fine. This is because
  we have this general ToHType instance that use the `Typeable` instances to create
  primitive type representation.\n\n```\ninstance {-# OVERLAPPABLE #-} (Typeable a)
  => ToHType a where\n  toHType p = pure $ mkHType p\n```\n\nEven though we are able
  to derive HType instance, the generated code end up looking something like the following\n\n```\ntype
  Product = Product { pName : String, pWeight : DecimalRaw } \n\nencodeProduct : Product
  \ -> E.Value\nencodeProduct a = \n case a of\n  Product x -> E.object ([ (\"pName\",
  E.string (x.pName))\n                         , (\"pWeight\", encodeDecimalRaw (x.pWeight))])\n\ndecodeProduct
  : D.Decoder Product \ndecodeProduct  = \n D.oneOf ([ let\n             mkProduct
  a1 a2 = \n              Product ({pName = a1, pWeight = a2})\n            in D.map2
  (mkProduct) (D.field (\"pName\") (D.string)) (D.field (\"pWeight\") (encodeDecimalRaw))])\n```\n\nBut
  there is no `DecimalRaw` type on the Elm side. So in this case, we might want to
  use `Float` on Elm side whenever we have a `Decimal` field in Haskell.\n\nThis can
  be done as follows\n\n```\n  instance ToHType Decimal where\n    toHType _ = toHType
  (Proxy :: Proxy Float)\n```\n\nThis gives us usable Elm code.\n\n```\ntype Product
  = Product { pName : String, pWeight : Float } \n\nencodeProduct : Product  -> E.Value\nencodeProduct
  a = \n case a of\n  Product x -> E.object ([ (\"pName\", E.string (x.pName))\n                         ,
  (\"pWeight\", E.float (x.pWeight))])\n\ndecodeProduct : D.Decoder Product \ndecodeProduct
  \ = \n D.oneOf ([ let\n             mkProduct a1 a2 = \n              Product ({pName
  = a1, pWeight = a2})\n            in D.map2 (mkProduct) (D.field (\"pName\") (D.string))
  (D.field (\"pWeight\") (D.float))])\n```\n\nNote that this only works if both types
  have compatible JSON representations. The Aeson instances\nshould take care of this
  on the Haskell side.\n\n### Tests\n\nThis is being tested by round tripping a bunch
  of JSON encoded values from an Elm front end to a Haskell back end, where it is
  decoded and sent back to Elm where it is again decoded and checked for equality
  with the value that was initially sent. These right now, are in the form of a Python
  script that walks through the full range of Aeson options, make the Haskell build
  and auto generated Elm source for each, and then test the round tripping of included
  types using a headless Chromium browser. The tests at [TravisCI](https://travis-ci.com/sras/elminator)
  use this process as well. The test repo is separate for now and is available at
  https://bitbucket.org/sras/elminator-test.\n\n### Installing\n\nIf you are using
  the Stack tool, then for the time being, you have to add Elminator to the 'extra-deps'
  section of stack.yaml as follows (Please use the latest available version here).\n\n```yaml\nextra-deps:\n
  \ elminator-0.2.1.0\n```\n\n"
license-name: BSD-3-Clause
