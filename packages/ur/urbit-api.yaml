all-versions:
- 0.2.0.0
author: Ben Sima
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  conduit: '>=0'
  conduit-extra: '>=0'
  http-client: '>=0'
  modern-uri: '>=0'
  req: '>=0'
  req-conduit: '>=0'
  text: '>=0'
  uuid: '>=0'
changelog: ''
changelog-type: ''
description: |
  # Haskell Urbit API

  [![License MIT](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)
  [![Hackage](https://img.shields.io/hackage/v/urbit-api.svg?style=flat)](https://hackage.haskell.org/package/urbit-api)
  [![builds.sr.ht status](https://builds.sr.ht/~ben/urbit-api.svg)](https://builds.sr.ht/~ben/urbit-api?)



  This library helps you talk to your Urbit from Haskell, via HTTP.

  The Urbit API is a command-query API that lets you hook into apps running on
  your Urbit. You can submit commands (called "pokes") and subscribe to
  responses.

  See the `test.hs` file for some example usages.

  ## Design

  The Urbit vane `eyre` is responsible for defining the API interface. The path to
  the API is `/~/channel/...`, where we send messages to the global log (called
  `poke`s) which are then dispatched to the appropriate apps. To receive
  responses, we stream messages from a path associated with the app, such as
  `/mailbox/~/~zod/mc`. Internally, I believe Urbit calls these `wire`s.

  `urbit-api` handles most of the path, session, and HTTP request stuff
  automatically. See the
  [haddocks](https://hackage.haskell.org/package/urbit-api/docs/Urbit-API.html)
  for more details.

  This library is built on req, conduit, and aeson, all of which are very stable
  and usable libraries for working with HTTP requests and web data.

  ## Example usage

  ```haskell
  import qualified Data.Aeson as Aeson
  import Data.Aeson ((.=))
  import qualified Data.Text as Text
  import qualified Data.UUID.V4 as UUID

  import Urbit.API

  main :: IO ()
  main = do
    let fakezod = Ship
      { uid = "0123456789abcdef",
        name = "zod",
        lastEventId = 1,
        url = "http://localhost:8081",
        code = "lidlut-tabwed-pillex-ridrup"
      }

    -- Establish connection
    sess <- connect ship

    -- Send a message by poking the chat-hook
    uuid <- UUID.nextRandom
    poke sess ship "zod" "chat-hook" "json" $
      Aeson.object
        [ "message"
            .= Aeson.object
              [ "path" .= Text.pack "/~/~zod/mc",
                "envelope"
                  .= Aeson.object
                    [ "uid" .= UUID.toText uuid,
                      "number" .= (1 :: Int),
                      "author" .= Text.pack "~zod",
                      "when" .= (1602118786225 :: Int),
                      "letter" .= Aeson.object ["text" .= Text.pack "hello world from haskell!"]
                    ]
              ]
        ]
  ```

  ## TODO

  - fix test suite on travis (OOM when trying to compile urbit)
  - more sophisticated test cases, also use cabal test instead of homegrown thing
  - add an exe that wraps the library with a cli
  - port to ghcjs
  - put some examples in the docs
description-type: markdown
hash: cb028f0983c54912e3ab1f2e0ac25c793ad2f6c5e9a735d70da801ee6e2dac4e
homepage: https://github.com/bsima/haskell-urbit-api
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: bsima@me.com
synopsis: Talk to Urbit from Haskell
test-bench-deps: {}
