homepage: https://github.com/MMZK1526/mmzk-typeid
changelog-type: markdown
hash: 3af52fe509101b392cc3d216ea33a2a9a9e36057df7410550d25861ab7d17e9a
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  hspec: ^>=2.11
  text: -any
  entropy: -any
  array: -any
  containers: ^>=0.6
  binary: -any
  hashable: -any
  uuid-types: -any
  aeson: -any
maintainer: Yitang Chen <mmzk1526@ic.ac.uk>
synopsis: A TypeID implementation for Haskell
changelog: |
  # Revision history for mmzk-typeid


  ## 0.3.0.0 -- 2023-07-17

  * Use 'uuid-types' package's `UUID` instead of a custom type.
    * `Data.UUID.V7` only retains the generation functions.
    * Other modules are not affected by this change.

  * Add `Read` and `Hashable` instances for `TypeID` and `KindID`.

  * Move `ValidPrefix` and `ToPrefix` to `Data.KindID.Class` module.
    * They are no longer exported from `Data.KindID`.

  * Remove deprecated functions `unUUID`, `parseStringWithPrefix`,
    `parseTextWithPrefix`, `parseByteStringWithPrefix`, `nil`, and `decorate`.

  * Re-implement `Show` instances for `TypeID` and `KindID` using pretty-print
    `toString`.

  * Implement `TypeID` generation based on stateless `UUID`v7.
    * It is faster but does not guarantee monotonicity if multiple processes are
      generating `TypeID`s at the same time.

  * Introduce unsafe `TypeID` and `KindID` functions for parsing and generating.
    They do not check the validity of the input and only behave well when the
    input is guaranteed to be valid.

  * Add validity check on `TypeID` and `KindID` generation.
    * `checkID` checks the prefix and the `UUID`'s version and variant.
    * `checkIDWithEnv` also checks that the `UUID` is generated in the past.

  * Deprecate `nilTypeID` and `nilKindID` since they are not useful.

  * Fix typos in the documentation.

  * More tests.


  ## 0.2.0.0 -- 2023-07-14

  * Implement `KindID` to take arbitrary prefix type.
    * It can be a `Symbol` as before, but it can also be any type that implements
      `ToPrefix` which dictates how to translate the prefix type to a `Symbol`.

  * Fix orphan instances for `TypeID` and `KindID`.

  * Add `FromJSONKey` and `ToJSONKey` instances for `TypeID` and `KindID`.

  * Introduce `IDType` class to unify the `getPrefix`, `getUUID`, and `getTime`
    functions of `TypeID` and `KindID`.

  * Introduce `IDConv` class to unify the various conversion functions between
    `TypeID`/`KindID` and `String`/`Text`/`ByteString`.
    * The original concrete functions remain, and the class is provided as an
      alternative.

  * Make the generation functions work with any `MonadIO` than just `IO`.

  * Introduct `IDGen` class to unify the generation functions for `TypeID` and
    `KindID`.
    * The original concrete functions remain, and the class is provided as an
      alternative.

  * Deprecate `unUUID`, `parseStringWithPrefix`, `parseTextWithPrefix`,
    `parseByteStringWithPrefix`, `nil`, and `decorate`. They are either replaced
    by functions of other names or are no longer necessary.
    * They will be removed in the next major version.

  * The `UUID` type is expected to be removed in the next major version in favour
    of the type from the 'uuid-types' package.

  * More tests.


  ## 0.1.0.0 -- 2023-07-11

  * First version. Released on an unsuspecting world.

  * Implement `TypeID` as specified at https://github.com/jetpack-io/typeid.

  * Add unit tests.

  * Add type-level `TypeID` prefixes.

  * Add `FromJSON` and `ToJSON` instances for `TypeID` and `KindID`.
basic-deps:
  bytestring: ^>=0.11
  base: '>=4.16 && <5'
  time: '>=1.11 && <1.13'
  text: ^>=2.0
  entropy: ^>=0.4
  array: ^>=0.5
  binary: '>=0.8.5 && <0.9'
  hashable: ^>=1.4
  uuid-types: '>=1.0'
  aeson: '>=2.1 && <3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
author: Yitang Chen <mmzk1526@ic.ac.uk>
latest: 0.3.0.0
description-type: haddock
description: |-
  TypeID is a type-safe, K-sortable, globally unique identifier inspired by Stripe IDs.

  The specification is available at https://github.com/jetpack-io/typeid.

  This library supports generating and parsing speÃ§-conforming TypeIDs, with the following additional features:

  - Batch generating TypeIDs with the same 'UUID'v7 timestamp

  - Encode prefixes at type-level for better type-safety

  It also serves as a (temporary) UUIDv7 implementation in Haskell, since there are no official ones yet.

  Please enable the following extensions if working with 'KindID':

  > {-# LANGUAGE DataKinds #-}
  > {-# LANGUAGE PolyKinds #-}
  > {-# LANGUAGE TypeApplications #-}
  > {-# LANGUAGE TypeFamilies #-}

  While the following is not required, it is quite convenient to have

  > {-# LANGUAGE OverloadedStrings #-}

  For a quick "how-to-use" guide, please refer to the README.md file at https://github.com/MMZK1526/mmzk-typeid#readme.
license-name: MIT
