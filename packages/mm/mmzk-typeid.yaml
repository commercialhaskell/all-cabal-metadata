homepage: https://github.com/MMZK1526/mmzk-typeid
changelog-type: markdown
hash: 0bd7dd7574b31ed7396fb5226874612e9f384610997be1e1864607a931f09081
test-bench-deps:
  bytestring: -any
  base: -any
  time: -any
  hspec: ^>=2.11
  text: -any
  entropy: -any
  array: -any
  containers: ^>=0.6
  binary: -any
  hashable: -any
  uuid-types: -any
  aeson: -any
maintainer: Yitang Chen <mmzk1526@ic.ac.uk>
synopsis: A TypeID implementation for Haskell
changelog: "# Revision history for mmzk-typeid\n\n\n## 0.3.0.1 -- 2023-07-18\n\n*
  Add a version upper-bound for 'uuid-types'.\n\n* Fix documentation typos. \n\n\n##
  0.3.0.0 -- 2023-07-17\n\n* Use 'uuid-types' package's `UUID` instead of a custom
  type.\n  * `Data.UUID.V7` only retains the generation functions.\n  * Other modules
  are not affected by this change.\n\n* Add `Read` and `Hashable` instances for `TypeID`
  and `KindID`.\n\n* Move `ValidPrefix` and `ToPrefix` to `Data.KindID.Class` module.\n
  \ * They are no longer exported from `Data.KindID`.\n\n* Remove deprecated functions
  `unUUID`, `parseStringWithPrefix`,\n  `parseTextWithPrefix`, `parseByteStringWithPrefix`,
  `nil`, and `decorate`.\n\n* Re-implement `Show` instances for `TypeID` and `KindID`
  using pretty-print\n  `toString`.\n\n* Implement `TypeID` generation based on stateless
  `UUID`v7.\n  * It is faster but does not guarantee monotonicity if multiple processes
  are\n    generating `TypeID`s at the same time.\n\n* Introduce unsafe `TypeID` and
  `KindID` functions for parsing and generating.\n  They do not check the validity
  of the input and only behave well when the\n  input is guaranteed to be valid.\n\n*
  Add validity check on `TypeID` and `KindID` generation.\n  * `checkID` checks the
  prefix and the `UUID`'s version and variant.\n  * `checkIDWithEnv` also checks that
  the `UUID` is generated in the past.\n\n* Deprecate `nilTypeID` and `nilKindID`
  since they are not useful.\n\n* Remove dependency on 'transformers'.\n\n* Fix typos
  in the documentation.\n\n* More tests.\n\n\n## 0.2.0.0 -- 2023-07-14\n\n* Implement
  `KindID` to take arbitrary prefix type.\n  * It can be a `Symbol` as before, but
  it can also be any type that implements\n    `ToPrefix` which dictates how to translate
  the prefix type to a `Symbol`.\n\n* Fix orphan instances for `TypeID` and `KindID`.\n\n*
  Add `FromJSONKey` and `ToJSONKey` instances for `TypeID` and `KindID`.\n\n* Introduce
  `IDType` class to unify the `getPrefix`, `getUUID`, and `getTime`\n  functions of
  `TypeID` and `KindID`.\n\n* Introduce `IDConv` class to unify the various conversion
  functions between\n  `TypeID`/`KindID` and `String`/`Text`/`ByteString`.\n  * The
  original concrete functions remain, and the class is provided as an\n    alternative.\n\n*
  Make the generation functions work with any `MonadIO` than just `IO`.\n\n* Introduct
  `IDGen` class to unify the generation functions for `TypeID` and\n  `KindID`.\n
  \ * The original concrete functions remain, and the class is provided as an\n    alternative.\n\n*
  Deprecate `unUUID`, `parseStringWithPrefix`, `parseTextWithPrefix`,\n  `parseByteStringWithPrefix`,
  `nil`, and `decorate`. They are either replaced\n  by functions of other names or
  are no longer necessary.\n  * They will be removed in the next major version.\n\n*
  The `UUID` type is expected to be removed in the next major version in favour\n
  \ of the type from the 'uuid-types' package.\n\n* More tests.\n\n\n## 0.1.0.0 --
  2023-07-11\n\n* First version. Released on an unsuspecting world.\n\n* Implement
  `TypeID` as specified at https://github.com/jetpack-io/typeid.\n\n* Add unit tests.\n\n*
  Add type-level `TypeID` prefixes.\n\n* Add `FromJSON` and `ToJSON` instances for
  `TypeID` and `KindID`.\n"
basic-deps:
  bytestring: ^>=0.11
  base: '>=4.16 && <5'
  time: '>=1.11 && <1.13'
  text: ^>=2.0
  entropy: ^>=0.4
  array: ^>=0.5
  binary: '>=0.8.5 && <0.9'
  hashable: ^>=1.4
  uuid-types: ^>=1.0
  aeson: '>=2.1 && <3'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
author: Yitang Chen <mmzk1526@ic.ac.uk>
latest: 0.3.0.1
description-type: haddock
description: |-
  TypeID is a type-safe, K-sortable, globally unique identifier inspired by Stripe IDs.

  The specification is available at https://github.com/jetpack-io/typeid.

  This library supports generating and parsing speÃ§-conforming TypeIDs, with the following additional features:

  - Batch generating 'TypeID's with the same UUIDv7 timestamp

  - Encode prefixes at type-level for better type-safety

  It also serves as a (temporary) UUIDv7 implementation in Haskell, since there are no official ones yet.

  Please enable the following extensions if working with 'KindID':

  > {-# LANGUAGE DataKinds #-}
  > {-# LANGUAGE PolyKinds #-}
  > {-# LANGUAGE TypeApplications #-}
  > {-# LANGUAGE TypeFamilies #-}

  While the following is not required, it is quite convenient to have

  > {-# LANGUAGE OverloadedStrings #-}

  For a quick "how-to-use" guide, please refer to the README.md file at https://github.com/MMZK1526/mmzk-typeid#readme.
license-name: MIT
