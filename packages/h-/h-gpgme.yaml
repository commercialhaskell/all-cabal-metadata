homepage: https://github.com/rethab/h-gpgme
changelog-type: markdown
hash: d2ac84d0e767598db273692a9b3f6ec49fea35a5d12319d8053c720dc8612762
test-bench-deps:
  exceptions: -any
  bindings-gpgme: '>=0.1.6 && <0.2'
  email-validate: -any
  bytestring: '>=0.9'
  unix: '>=2.5'
  base: ==4.*
  time: '>=1.4 && <2.0'
  filepath: -any
  data-default: -any
  HUnit: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  transformers: '>=0.4.1 && <0.6'
  temporary: -any
  tasty: -any
  QuickCheck: -any
  directory: -any
maintainer: rethab@protonmail.com
synopsis: High Level Binding for GnuPG Made Easy (gpgme)
changelog: |
  # Changelog

  ## 0.6.0.0

  ### New Features

  - BREAKING: Add force flag to removeKey function: https://github.com/rethab/h-gpgme/pull/57
  - Add function to import key from file: https://github.com/rethab/h-gpgme/pull/54 (thanks @chiropical)

  ### Maintenance

  - Migrate to GitHub Actions: https://github.com/rethab/h-gpgme/pull/55, https://github.com/rethab/h-gpgme/pull/58, and https://github.com/rethab/h-gpgme/pull/59

  ## 0.5.1.0

  ### New Features

  - Add key listing modes (thanks mmhat)

  ## 0.5.0.0

  ### New Features

  - Add Stack support
  - Add key generation functionality
  - Add remove key functionality
  - Add clear sign functionality
  - Add progress callback functionality
  - Add file encryption and decryption
  - Add safe `collectSignatures'` function

  ### Bug fixes

  - Prevent potential memory leak in `withCtx`
  - Return full fingerprint for `keySubKeys`
  - Fix crash bug in `verifyInternal` involving a call to `performUnsafeIO`

  ### Maintenance
  - Replace dependency on `either` with `transfers` (thanks hvr)

  ## 0.4.0.0
  - verifyDetached and verifyDetached' Verify a payload using a detached signature. (thanks mmhat)
  - verifyPlain and verifyPlain' Verify a payload using a plain signature. (thanks mmhat)

  ## 0.3.0.0
  - Added listKeys (thanks bgamari)
  - Replaced withArmor with setArmor
  - Removed withKey, manual freeing is no longer required so you can use getKey (thanks bgamari)
  - Support for passphrase callbacks (thanks bgamari)
   - Note that the operation of this feature is a bit inconsistent between GPG versions. GPG 1.4 using the use-agent option and GPG >= 2.1 require that the gpg-agent for the session has the allow-loopback-pinentry option enabled (this can be achieved by adding allow-loopback-pinentry to gpg-agent.conf. GPG versions between 2.0 and 2.1 do not support the --pinentry-mode option necessary for this support.
   - See http://lists.gnupg.org/pipermail/gnupg-devel/2013-February/027345.html and the gpgme-tool example included in the gpgme tree for details.

  ## 0.2.0.0
  - Added withArmor for ASCII-armored output (thanks yaccz)
basic-deps:
  bindings-gpgme: '>=0.1.8 && <0.2'
  email-validate: -any
  bytestring: '>=0.9'
  unix: '>=2.5'
  base: ==4.*
  time: '>=1.4 && <2.0'
  data-default: -any
  transformers: '>=0.4.1 && <0.6'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
author: Reto
latest: 0.6.0.0
description-type: markdown
description: "[![Hackage](https://img.shields.io/hackage/v/h-gpgme.svg)](https://hackage.haskell.org/package/h-gpgme)
  \n[![CI](https://github.com/rethab/h-gpgme/actions/workflows/ci.yml/badge.svg)](https://github.com/rethab/h-gpgme/actions/workflows/ci.yml)\n![MIT
  License](https://img.shields.io/github/license/rethab/h-gpgme?label=license)\n\n\nh-gpgme:
  High Level Haskell Bindings for GnuPG Made Easy\n========================================================\n\n##
  Examples\n\n```haskell\nlet alice_pub_fpr = \"EAACEB8A\"\n\n-- encrypt\nJust enc
  <- withCtx \"test/bob\" \"C\" OpenPGP $ \\bCtx -> runMaybeT $ do\n        aPubKey
  <- MaybeT $ getKey bCtx alice_pub_fpr NoSecret\n        fromRight $ encrypt bCtx
  [aPubKey] NoFlag plain\n\n-- decrypt\ndec <- withCtx \"test/alice\" \"C\" OpenPGP
  $ \\aCtx ->\n        decrypt aCtx enc\n```\n\nSee the test folder for more examples\n\n[Changelog](CHANGELOG.markdown)\n"
license-name: MIT
