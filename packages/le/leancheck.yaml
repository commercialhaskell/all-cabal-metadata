homepage: https://github.com/rudymatela/leancheck#readme
changelog-type: markdown
hash: 3c40cb10baa92f63502f22f674357755ef8816ced56383033c35d54334a28b7b
test-bench-deps:
  base: ==4.*
  leancheck: -any
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: Enumerative property-based testing
changelog: "Changelog for LeanCheck\n=======================\n\n\nv0.9.12 (August
  2022)\n---------------------\n\n* replace enumeration of `Fractional` and `Floating`
  types\n  by the Calkin-Wilf sequence:\n\t- add `listFloating` and `listFractional`;\n\t-
  deprecate `tiersFloating` and `tiersFractional`;\n* improve the changelog with timestamps
  and history down to v0.5.0;\n* normalize code formatting throughout: indentation,
  spacing and width;\n* improve testing of LeanCheck itself;\n* test on GHC 9.2 and
  9.4 (works with no changes).\n\n\nv0.9.10 (June 2021)\n-------------------\n\n*
  `Test.LeanCheck.Utils.Type`: derive Typeable instances on GHC 7.8.\n  Behaviour
  on newer GHCs (>= 7.10) versions is unaffected\n  as they automatically derive Typeable
  instances for all types.\n\n\nv0.9.8 (June 2021)\n------------------\n\n* `Test.LeanCheck.Utils.Type`:
  ~Typeable instances on GHC 7.10.~\n  ~Behaviour on newer GHCs (>= 8.0) versions
  is unaffected~\n  ~as they automatically derive Typeable instances for all types.~\n
  \ _Update:_ these instances were already present on v0.9.6.\n  LeanCheck v0.9.8
  is essentially the same as v0.9.6.\n\n\nv0.9.6 (May 2021)\n-----------------\n\n*
  no code changes in what is exported by `Test.LeanCheck`\n* `Test.LeanCheck.Utils.Types`:
  export the `A`, `B`, `C`, `D`, `E` and `F` types\n* slightly improve README\n* improve
  Makefile and tests\n* replace Travis by GitHub Actions as the CI system\n\n\nv0.9.4
  (April 2021)\n-------------------\n\n* no code changes in what is exported by `Test.LeanCheck`\n*
  add `errorToLeft` and `anyErrorToLeft` on `Test.LeanCheck.Error`\n* add `?==?` and
  `!==!` on `Test.LeanCheck.Error`\n* add `Test.LeanCheck.Function.List`\n* add `Test.LeanCheck.Function.Ord`\n*
  reduce default argument enumeration to 12 on `Test.LeanCheck.Function.Eq`\n* add
  FAQ\n* improve Makefile and test scripts\n\n\nv0.9.3 (March 2020)\n-------------------\n\n*
  improve Haddock documentation\n* use consistent code format\n* improve CI scripts
  and Makefile\n\n\nv0.9.2 (March 2020)\n-------------------\n\n* rename most functions
  on `Test.LeanCheck.Utils.Operators`;\n  deprecated names are provided;\n* improve
  documentation:\n\t- 100% haddock coverage;\n\t- LeanCheck memory usage thoroughly
  documented;\n* implement stub function `conditionStatsT`;\n* improve function display
  on `Test.LeanCheck.Function.*`;\n* fix some compiler warnings (newer GHC);\n* improve
  build scripts;\n* improve tests;\n* update tests scripts to support the new cabal
  (`test/sdist`).\n\n\nv0.9.1 (February 2019)\n----------------------\n\n* fix bug
  in `genericTiers` where using it bound to a recursive datatype could\n  cause an
  infinite loop;\n* minor improvements in documentation and tests.\n\n\nv0.9.0 (January
  2019)\n---------------------\n\n* logo for LeanCheck;\n* `Listable` instances to
  most types in the Haskell 2010 Language Report:\n\t- `Word<n>`;\n\t- `Int<n>`;\n\t-
  `Complex`;\n\t- etc...;\n* minor improvements in documentation and README.\n\n\nv0.8.0
  (November 2018)\n----------------------\n\n* export `tiersFractional` from `Core`
  and main module;\n* improve `Listable` instance for `Float`s and `Double`s;\n* improve
  `Show` instance for functions;\n* improve Haddock documentation;\n* remove experimental
  function enumeration modules,\n  in favour of the working `ListsOfPairs` enumeration;\n*
  add special `String` and `Char` types to `Utils.Types`;\n* fix bug in the `Natural`
  type of the `Utils.Types` modules;\n* force non-negativity in `Natural` and `Nat`
  types from `Utils.Types`;\n* rename some exported symbols in the `ShowFunction`
  module;\n* improve tests of LeanCheck itself.\n\n\nv0.7.7 (October 2018)\n---------------------\n\n*
  Add a `changelog.md` file with the contents of git tag annotations:\n  `git tag
  -ln99`.\n\n\nv0.7.6 (October 2018)\n---------------------\n\n* Add experimental
  `Test.LeanCheck.Generic` module with automatic derivation\n  of Listable instances
  through `GHC.Generics`;\n* Improve Haddock documentation.\n\n\nv0.7.5 (September
  2018)\n-----------------------\n\n* Fix tests on systems with case-insensitive filesystems,
  like:\n    - Windows;\n    - Mac OS;\n* Fix tests on GHC 8.6.\n\nThis release fixes
  just the tests of LeanCheck itself.  The LeanCheck library\nis otherwise unaffected.\n\n\nv0.7.4
  (September 2018)\n-----------------------\n\n* Add list of providers on README;\n*
  Minor fix in haddock.\n\n\nv0.7.3 (August 2018)\n--------------------\n\n* Fix bug:
  add missing Hugs backport file to source distribution\n  (GHC users were not affected
  by this);\n* Improve tests so I don't forget to include files in the source distribution\n
  \ (cabal sdist) again.\n\n\nv0.7.2 (August 2018)\n--------------------\n\n* Significantly
  improve documentation;\n* Slightly improve tests.\n\n\nv0.7.1 (July 2018)\n------------------\n\n*
  LeanCheck now works on Hugs-200607 (only minor changes were needed);\n* Implement
  functions that calculate statistics: `Test.LeanCheck.Stats`;\n* More stuff on `Utils`:
  `rational`, `okNum`;\n* Improve tests;\n* Improve build scripts;\n* Minor assorted
  fixes.\n\n\nv0.7.0 (December 2017)\n----------------------\n\n* Improved cabal file;\n*
  Cabal package now has all files checked in on git repo;\n* Add functions to compute
  Listable statistics (and some stubs);\n* Improve tests;\n* Code improvements (refactoring).\n\n\nv0.6.7
  (September 2017)\n-----------------------\n\nThe only change in relation to v0.6.6
  is a fixed build on Travis (the reference\noutput files were outdated).  The code
  of the tool is otherwise unchanged.\n\n\nv0.6.6 (September 2017)\n-----------------------\n\n*
  Improve showing of functional counter-examples.\n\n\nv0.6.5 (August 2017)\n--------------------\n\n*
  Export ordering from 'Test.LeanCheck.TypeBinding';\n* Improve documentation;\n*
  Improve tests.\n\n\nv0.6.4 (August 2017)\n--------------------\n\n* Add and export
  the `Xs` constructor in `Utils`;\n* Add type binding operators for up to 12 arguments.\n\n\nv0.6.3
  (July 2017)\n------------------\n\n* `Test.LeanCheck`: Add the `delay` and `reset`
  functions;\n* `Test.LeanCheck.Tiers`: `normalizeT` stripping up to 12 empty tiers;\n*
  Some refactoring;\n* Add lots of new tests for LeanCheck itself.\n\n\nv0.6.2 (March
  2017)\n-------------------\n\n* Improve documentation;\n* Improve tests of LeanCheck
  itself (including putting LeanCheck on CI).\n\n\nv0.6.1 (March 2017)\n-------------------\n\n*
  `Test.LeanCheck.Error`: export `fromError`;\n* `Test.LeanCheck.Tiers`: export `mapMaybeT`,
  `maybeConsN` and `catMaybesT`;\n* Some code refactoring and internal experiments
  with function enumeration.\n\n\nv0.6.0 (October 2016)\n---------------------\n\n*
  Add `deriveListableCascading`;\n* Add `Listable` instances for `Word` and `Ordering`;\n*
  Improve tests of LeanCheck itself.\n\n\nv0.5.0 (July 2016)\n------------------\n\n*
  Improve documentation;\n* Rename several functions;\n* Add several utilities in
  `Utils`.\n\n\nEarlier versions\n----------------\n\nPlease refer to the git commit
  history.\n"
basic-deps:
  base: '>=4 && <5'
  template-haskell: -any
all-versions:
- 0.3.0
- 0.4.0
- 0.4.1
- 0.5.0
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.6.6
- 0.6.7
- 0.7.0
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.8.0
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
- 0.9.4
- 0.9.6
- 0.9.8
- 0.9.10
- 0.9.12
author: Rudy Matela <rudy@matela.com.br>
latest: 0.9.12
description-type: markdown
description: "LeanCheck\n=========\n\n[![LeanCheck's Build Status][build-status]][build-log]\n[![LeanCheck
  on Hackage][hackage-version]][leancheck-on-hackage]\n[![LeanCheck on Stackage LTS][stackage-lts-badge]][leancheck-on-stackage-lts]\n[![LeanCheck
  on Stackage Nightly][stackage-nightly-badge]][leancheck-on-stackage-nightly]\n\n![LeanCheck
  logo][leancheck-logo]\n\nLeanCheck is a simple enumerative [property-based testing]
  library.  Properties\nare defined as Haskell functions returning a boolean value
  which should be\n`True` for all possible choices of argument values.    LeanCheck
  applies\nenumerated argument values to these properties in search for a counterexample.\nProperties
  can be viewed as parameterized unit tests.\n\nLeanCheck works by producing *tiers*
  of test values: a possibly infinite list\nof finite sublists of same-and-increasingly-sized
  values.  This enumeration is\nsimilar to [Feat]'s.  However, the ranking and ordering
  of values are defined\ndifferently.  The interface is also different.\n\nThroughout
  this README lines that begin with the [symbol `>`] indicate a line\nentered into
  an interactive interpreter (`ghci`).  The result of evaluating the\nexpression is
  then printed on the following line.\n\nLeanCheck implementation is easy to understand.\n[LeanCheck's
  core] is under 200 lines of code.\n\n\nInstalling\n----------\n\nTo install the
  [latest LeanCheck version from Hackage] just run:\n\n\t$ cabal update\n\t$ cabal
  install leancheck\n\nStarting from Cabal v3.0, you need to pass `--lib` as an argument
  to\n`cabal install` to install packages globally on the `default` user environment:\n\n\t$
  cabal install leancheck --lib\n\nIf you already have LeanCheck installed\n[Cabal
  may refuse to update](https://github.com/haskell/cabal/issues/7373)\nto the latest
  version.\nTo update, you need to reset your user's cabal installation with:\n\n\trm
  -rf ~/.cabal/{bin,lib,logs,share,store} ~/.ghc/*/\n\nWARNING: the above command
  will erase all user-local packages.\n\nLeanCheck has (official) packages available
  on\n[Stackage](https://www.stackage.org/package/leancheck),\n[OpenSUSE](https://packagehub.suse.com/packages/ghc-leancheck/),\n[Gentoo](https://packages.gentoo.org/packages/dev-haskell/leancheck),\n[Arch
  Linux](https://archlinux.org/packages/community/x86_64/haskell-leancheck/) and\n[NixOS](https://hydra.nixos.org/job/nixpkgs/trunk/haskellPackages.leancheck.x86_64-linux).\n\n\n\nChecking
  if properties are True\n-------------------------------\n\nTo check if properties
  are True,\njust use the function [`holds`] `:: Testable a => Int -> a -> Bool`.\nIt
  takes _two arguments_:\nthe _number of values_ to test\nand a _property_ (function
  returning Bool),\nthen, it returns a boolean indicating whether the property holds.\nSee
  (ghci):\n\n\t> import Test.LeanCheck\n\t> import Data.List\n\t> holds 100 $ \\xs
  -> sort (sort xs) == sort (xs::[Int])\n\tTrue\n\t> holds 100 $ \\xs -> [] `union`
  xs == (xs::[Int])\n\tFalse\n\nAs a rule-of-thumb, you should run holds for 500,
  1 000, or 10 000 tests.\nWith more than that you may run out-of-memory depending
  on the types being\ntested.\n\n\nFinding counter examples\n------------------------\n\nTo
  find counter examples to properties,\nyou can use the function [`counterExample`]
  `:: Testable a => Int -> a -> Maybe [String]`.\nIt takes _two arguments_:\nthe _number
  of values_ to test\nand a _property_ (function returning Bool).\nThen, it returns
  Nothing if no results are found or Just a list of Strings\nrepresenting the offending
  arguments to the property.\nSee (ghci):\n\n\t> import Test.LeanCheck\n\t> import
  Data.List\n\n\t> counterExample 100 $ \\xs -> sort (sort xs) == sort (xs::[Int])\n\tNothing\n\n\t>
  counterExample 100 $ \\xs -> [] `union` xs == (xs::[Int])\n\tJust [\"[0,0]\"]\n\n\t>
  counterExample 100 $ \\xs ys -> xs `union` ys == ys `union` (xs::[Int])\n\tJust
  [\"[]\",\"[0,0]\"]\n\n\nChecking properties like in SmallCheck/QuickCheck\n-------------------------------------------------\n\nTo
  \"check\" properties like in [SmallCheck] and [QuickCheck]\nautomatically printing
  results on standard output,\nyou can use the function [`check`] `:: Testable a =>
  a -> IO ()`.\n\n\t> import Test.LeanCheck\n\t> import Data.List\n\n\t> check $ \\xs
  -> sort (sort xs) == sort (xs::[Int])\n\t+++ OK, passed 200 tests.\n\n\t> check
  $ \\xs ys -> xs `union` ys == ys `union` (xs::[Int])\n\t*** Failed! Falsifiable
  (after 4 tests):\n\t[] [0,0]\n\nThe function [`check`] tests for a maximum of 200
  tests.\nTo check for a maximum of `n` tests, use [`checkFor`] `n`.\nTo get a boolean
  result wrapped in `IO`, use [`checkResult`] or [`checkResultFor`].\nThere is no
  \"quiet\" option, just use [`holds`] or [`counterExample`] in that case.\n\n\nTesting
  user-defined types\n--------------------------\n\nLeanCheck works on properties
  with [`Listable`] argument types.\n[`Listable`] instances are declared similarly
  to SmallCheck:\n\n\tdata MyType = MyConsA\n\t            | MyConsB Int\n\t            |
  MyConsC Int Char\n\t            | MyConsD String\n\n\tinstance Listable MyType where\n\t
  \ tiers = cons0 MyConsA\n\t       \\/ cons1 MyConsB\n\t       \\/ cons2 MyConsC\n\t
  \      \\/ cons1 MyConsD\n\nFor types that do not have a constraning data invariant,
  instances can be\nautomatically derived with [Template Haskell] by using [`deriveListable`]
  like\nso:\n\n\tderiveListable ''MyType\n\nThe [`tiers`] function return a potentially
  infinite list of finite sub-lists\n(tiers).  Each successive tier has values of
  increasing size.\n\n\ttiers :: Listable a => [[a]]\n\nFor convenience, the function
  [`list`] returns a potentially infinite list\nof values of the bound type:\n\n\tlist
  :: Listable a => [a]\n\nSo, for example:\n\n\t> take 5 (list :: [(Int,Int)])\n\t[(0,0),(0,1),(1,0),(0,-1),(1,1)]\n\nThe
  `list` function can be used to debug your custom instances.\n\n[`Listable`] class
  instances are more customizable than what is described here:\ncheck source comments
  or haddock documentation for details.\n\n\nStandard Listable Instances\n---------------------------\n\nLeanCheck
  comes out-of-the-box with [`Listable`] instances for all types in the\n[Haskell
  2010 Language Report] with [the intentional exception of a few types].\nThe [leancheck-instances]
  package aims to support types in the\n[Haskell Platform] -- `$ cabal install leancheck-instances`.\n\n\nProviders
  for Tasty, test-framework and Hspec\n---------------------------------------------\n\nThe
  following providers allow including LeanCheck properties into\n[Tasty], [test-framework]
  or [Hspec] test suites.\n\n* [LeanCheck provider for Tasty]\n  -- `$ cabal install
  tasty-leancheck` ;\n* [LeanCheck provider for test-framework]\n  -- `$ cabal install
  test-framework-leancheck` ;\n* [LeanCheck provider for Hspec]\n  -- `$ cabal install
  hspec-leancheck` .\n\n\nMemory usage\n------------\n\nDue to the way it is implemented
  (using lists of lists), LeanCheck can be quite\nmemory intensive if we set the maximum
  number of tests of a property to\nmillions of values (YMMV).\n\nFor the default
  maximum number of tests (200) you should be safe on most cases.\nIf you use 1 000
  or 10 000 as the maximum number of tests for a property you're\nalso generally safe.
  \ More than that, it is in a hit or miss basis.\n\nFor more details, see [LeanCheck
  memory usage].\n\n\nBeginner friendliness\n---------------------\n\nLeanCheck strives
  to be beginner/student friendly both in the interface and its\nimplementation.  For
  instance, to understand [LeanCheck's core], one does not\nneed to understand Monads
  as they aren't used at all there.\n\nIn the name of keeping the implementation easy
  to understand,\na compromise were made in terms of performance\n(cf. [LeanCheck
  memory usage]).\n\nLeanCheck is mostly [Haskell 98] compliant and almost [Haskell
  2010] compliant.\nWith the exception of [`Listable`] derivation modules ([TH] and
  [Generics]),\nthe only extension used by LeanCheck is [CPP].  This is to maintain\ncompatibility
  with different compilers.  LeanCheck even compiles and runs on\n[Hugs98] from September
  2006.\n\nLeanCheck has 100% Haddock coverage with most functions having examples.\n\n\nFurther
  reading\n---------------\n\nFor a detailed documentation of each function, see\n[LeanCheck's
  Haddock documentation].\n\nFor an introduction to property-based testing\nand a
  step-by-step guide to LeanCheck, see the\n[tutorial on property-based testing with
  LeanCheck]\n\\(`doc/tutorial.md` in the source repository).\n\nLeanCheck is subject
  to a chapter in a [PhD Thesis (2017)].\n\nLeanCheck has a list of [frequently asked
  questions] and answers.\n\n[LeanCheck's Haddock documentation]: https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html\n[tutorial
  on property-based testing with LeanCheck]: https://github.com/rudymatela/leancheck/blob/master/doc/tutorial.md\n[LeanCheck
  memory usage]: https://github.com/rudymatela/leancheck/blob/master/doc/memory-usage.md\n[frequently
  asked questions]: https://github.com/rudymatela/leancheck/blob/master/doc/faq.md\n[latest
  LeanCheck version from Hackage]: https://hackage.haskell.org/package/leancheck\n\n[`Listable`]:
  \      https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#t:Listable\n[`holds`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:holds\n[`counterExample`]:
  https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:counterExample\n[`check`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:check\n[`checkFor`]:
  \      https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:checkFor\n[`checkResult`]:
  \   https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:checkResult\n[`checkResultFor`]:
  https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:checkResultFor\n[`tiers`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:tiers\n[`list`]:
  \          https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:list\n[`deriveListable`]:
  https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:deriveListable\n[LeanCheck's
  core]: https://github.com/rudymatela/leancheck/blob/master/src/Test/LeanCheck/Core.hs\n\n[property-based
  testing]: https://github.com/rudymatela/leancheck/blob/master/doc/tutorial.md\n[Feat]:
  https://hackage.haskell.org/package/testing-feat\n[SmallCheck]: https://hackage.haskell.org/package/smallcheck\n[QuickCheck]:
  https://hackage.haskell.org/package/QuickCheck\n[PhD Thesis (2017)]: https://matela.com.br/thesis-rudy.pdf\n\n[symbol
  `>`]: https://www.haskell.org/haddock/doc/html/ch03s08.html#idm140354810780208\n[Template
  Haskell]: https://wiki.haskell.org/Template_Haskell\n\n[Tasty]:          https://github.com/feuerbach/tasty#readme\n[test-framework]:
  https://haskell.github.io/test-framework/\n[Hspec]:          https://hspec.github.io/\n[LeanCheck
  provider for Tasty]:          https://hackage.haskell.org/package/tasty-leancheck\n[LeanCheck
  provider for test-framework]: https://hackage.haskell.org/package/test-framework-leancheck\n[LeanCheck
  provider for Hspec]:          https://hackage.haskell.org/package/hspec-leancheck\n[leancheck-instances]:
  \                  https://hackage.haskell.org/package/leancheck-instances\n[the
  intentional exception of a few types]: https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck-Basic.html\n[Haskell
  2010 Language Report]:          https://www.haskell.org/onlinereport/haskell2010/\n[Haskell
  2010]:                          https://www.haskell.org/onlinereport/haskell2010/\n[Haskell
  98]:                            https://www.haskell.org/onlinereport/\n[Haskell
  Platform]:                      https://www.haskell.org/platform/\n[Hugs98]:                                https://www.haskell.org/hugs/\n[TH]:
  \ https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#template-haskell\n[CPP]:
  https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/phases.html#extension-CPP\n[Generics]:
  https://hackage.haskell.org/package/base/docs/GHC-Generics.html\n\n[leancheck-logo]:
  https://github.com/rudymatela/leancheck/raw/master/doc/leancheck.svg?sanitize=true\n\n[build-log]:
  \   https://github.com/rudymatela/leancheck/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/leancheck/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  https://img.shields.io/hackage/v/leancheck.svg\n[leancheck-on-hackage]: https://hackage.haskell.org/package/leancheck\n[stackage-lts-badge]:
  \           https://stackage.org/package/leancheck/badge/lts\n[stackage-nightly-badge]:
  \       https://stackage.org/package/leancheck/badge/nightly\n[leancheck-on-stackage]:
  \        https://stackage.org/package/leancheck\n[leancheck-on-stackage-lts]:     https://stackage.org/lts/package/leancheck\n[leancheck-on-stackage-nightly]:
  https://stackage.org/nightly/package/leancheck\n"
license-name: BSD-3-Clause
