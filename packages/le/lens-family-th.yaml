all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.1.0
- 0.5.2.0
- 0.5.2.1
- 0.5.3.0
- 0.5.3.1
- 0.5.3.2
author: Dan Burton
basic-deps:
  base: '>=4.9 && <5'
  template-haskell: '>=2.11 && <2.24'
changelog: |
  - **0.5.3.2**:
    2025-07-01: confirmed support for ghc up to 9.12
  - **0.5.3.1**:
    2024-01-15: added ChangeLog
  - **0.5.3.0**:
    2024-01-15: added support for ghc up to 9.8
changelog-type: markdown
description: "lens-family-th\n==============\n\n![build status](https://github.com/DanBurton/lens-family-th/actions/workflows/haskell.yml/badge.svg?branch=master)\n\nTemplate
  Haskell to generate lenses for lens-family and lens-family-core.\n\nUsage:\n\n    {-#
  LANGUAGE TemplateHaskell, Rank2Types #-}\n\n    import Lens.Family2\n    import
  Lens.Family2.TH\n\n    data Foo a = Foo { _bar :: Int, _baz :: a }\n             deriving
  (Show, Read, Eq, Ord)\n    $(makeLenses ''Foo)\n\nThis will create lenses `bar`
  and `baz`.\n\nYou can instead create these lenses by hand\nas explained by documentation
  at [Lens.Family.Unchecked](http://hackage.haskell.org/packages/archive/lens-family-core/latest/doc/html/Lens-Family-Unchecked.html).\n\n`makeLenses`
  merely generates the following definition\nfor each field, making use of Haskell's
  record update syntax:\n\n    lensName f a = (\\x -> a { fieldName = x }) `fmap`
  f (fieldName a)\n\n`makeLenses` will refuse to create lenses for data declarations\nwith
  more than 1 constructor.\n\n----\n\nFor data types with multiple constructors,\nyou
  can use `makeTraversals`. For example:\n\n    {-# LANGUAGE TemplateHaskell, Rank2Types
  #-}\n\n    import Lens.Family2\n    import Lens.Family2.TH\n\n    data T a c d =
  A a | B | CD c d Int\n    $(makeTraversals ''T)\n    \nWill create traversals `_A`,
  `_B`, and `_C` in this fashion:\n\n    _A k (A a) = fmap (\\a -> A a) (k a)\n    _A
  _  B    = pure B\n    _A _ (C c d i) = pure (C c d i)\n\n    _B _ (A a) = pure (A
  a)\n    _B k B = fmap (\\() -> B) (k ())\n    _B _ (C c d i) = pure (C c d i)\n
  \   \n    _C _ (A a) = pure (A a)\n    _C _ B = pure B\n    _C k (C c d i) = fmap
  (\\(c',d',i') -> C c' d' i') (k (c,d,i))\n    \n"
description-type: markdown
hash: 7aef4df51d7a295cbae5a5d936ee9cb469535d18154d2d0dca67a19602e3334d
homepage: http://github.com/DanBurton/lens-family-th#readme
latest: 0.5.3.2
license-name: BSD-3-Clause
maintainer: danburton.email@gmail.com
synopsis: Generate lens-family style lenses
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  lens-family-th: '>=0'
  template-haskell: '>=0'
  transformers: '>=0'
