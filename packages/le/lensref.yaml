all-versions:
- '0.1'
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- '0.2'
author: Péter Diviánszky
basic-deps:
  base: <5
  monad-control: <0.4
  mtl: <2.3
  transformers: '>=0.3 && <0.5'
changelog: |2+

  = lensref-0.2 =

  * Do not always build tests
  * 'cabal test' support
  * Eliminate dependency on lens, operational and containers packages
  * Add lower bound to transformers package dependency

  = lensref-0.1.0.5 =

  another bugfix for hackagedb

  = lensref-0.1.0.4 =

  bugfix

  = lensref-0.1.0.3 =

  Relax dependencies

  = lensref-0.1.0.2 =

  Haddock fix

  = lensref-0.1 =

  Initial separated version.
  The content of lensref was detached from the lgtk package on 10 May, 2014.

  Compared to the previously announced version, lgtk-0.5.3, the changes are the following:

  * Generalized and cleaned up interface
  * Cleand up pure implementation
  * First version of the fast implementation
  * Switch from data-lens to Edward Kmett's lens library
  * Upgrade to work with GHC 8.2
  * Repository moved to GitHub

  = lgtk-0.5.2 =

  = lgtk-0.5.2 =

  * Better support for references with equality
  * Inner change: safer state handling with MVars

  = lgtk-0.5.1 =

  * Documentation fixes and cleanup

  = lgtk-0.5 =

  * Do not use monadic lenses any more.
  * References with inherent identity (makes defining auto-sensitive buttons easier)
  * Lots of inner changes.

changelog-type: text
description: |-
  The lensref package provides and interface an two implementation
  for references which can be joined and on which lenses can be applied.

  -The pure implementation is slow and has memory leaks but probably easier to follow.
  This is the reference implementation, so if the the other implementation
  differs this has the right behaviour.

  -The fast implementation is intended for real usage.

  Status:

  -The interface is getting stable. You can expect more functionality and minor changes on current functionality.

  -There are test cases for the first half of the interface.
  Both implementations fulfil the test cases.

  -The pure implementation is ready.

  -The fast implementation is much faster than the pure implementation,
  but it is far from being as fast as possible.
  Probably it also leaks memory.

  To see what is possible to do with lens references, look at the test cases in "Data.LensRef.Test"

  For more information visit the following links:

  -<http://www.haskell.org/haskellwiki/LGtk haskell.org wiki page>

  -<http://lgtk.wordpress.com/ Wordpress blog>

  -<https://github.com/divipp/lensref GitHub repository>

  -<http://hackage.haskell.org/package/lensref Haddock documentation (this page)>
description-type: haddock
hash: 20fcc661eeb3e81196196ee874d078a734b4845d9b4b8cf599bf357bad192878
homepage: http://www.haskell.org/haskellwiki/LGtk
latest: '0.2'
license-name: BSD-3-Clause
maintainer: divipp@gmail.com
synopsis: References which can be joined and on which lenses can be applied
test-bench-deps:
  base: <5
  lensref: '>=0'
