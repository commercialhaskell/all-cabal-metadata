all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.2.0
author: Chris Penner
basic-deps:
  base: '>=4.7 && <5'
  either: '>=0'
  lens: '>=0'
changelog: |+
  # Changelog for lens-errors

  ## 0.2.2.0
  - Adds new `Fizzler` and `Fizzler'` type aliases for working with fizzlers
  - Adds new `fizzler` helper for building fizzlers.

changelog-type: markdown
description: "# lens-errors\n\n[HACKAGE](http://hackage.haskell.org/package/lens-errors)\n\nHandling
  failure deep inside a lens chain intelligently is hard;\nYou tried to crawl deep
  into a tree, but it failed and you're not sure why!\nThis helps with that.\n\nThis
  library doesn't aim to serve every single use case; or provide a TON of \nerror
  combinators, it mostly gives you the tools to write your own.\n\n# Example\nHere's
  what a usage could look like;\n\nLet's say we have a nice tree:\n\n```haskelll\nlet
  tree = Node 0 [Node 1 [Node 2 []]]\n```\n\nBut we want to get the node at the bottom!
  No problem, we can write a traversal\nfor that!\n\n```haskell\nÎ»> tree ^.. branches
  . ix 0 . branches . ix 10 . root\n[]\n```\n\nOh; we failed! We can probably guess
  in this example why the failure occured,\nbut in larger more complex traversals
  it can be pretty tough to find sometimes;\nand since traversals branch out we might
  even fail in more than one place at a time!\n\n`lens-errors` gives us\na whole shwack
  of `fizzle` combinators which will allow us to effectively\n'kill' a branch of the
  traversal with an error message while allowing other\nbranches to continue to limp
  along and see if they can succeed.\n\nWhy `fizzle` you ask? Words like `fail` or
  `throw` seem to strong, in this\ncase only certain branches of the traversal might
  fizzle out while allowing others to continue.\n\nLet's build a new traversal which
  reports a nice error if we fail to index\ninto the child branch we want:\n\n```haskell\nlet
  tryIx n = ix n `orFizzleWith` (\\xs -> [show n <> \" was out of bounds in list:
  \" <> show xs])\n```\n\nHere we use `orFizzleWith` which will try to run the given
  traversal; but\nwill build and throw a nice error if the traversal returns no elements.\n\nNow
  that we've added errors to our lens chain the standard lens-running combinators\nlike
  `^.` and `%~` won't work any more, but we've got new ones. Let's try `^&..`\nwhich
  runs a traversal and collects the elements into a list, with nice errors along the
  way!\n\n```haskell\n>>> tree ^&.. branches . tryIx 0 . branches . tryIx 10 . root\n([\"10
  was out of bounds in list: [Node {rootLabel = 2, subForest = []}]\"],[])\n```\n\nWhat
  a great error message! Now we know exactly why we didn't manage to find any\nelements
  there.\n\nYou'll notice we actually returned a tuple of type `([String], [Int])`;
  We return\nthe errors in the left half and values in the right. Because of the branching
  factor\nof traversals, it's entirely possible for one branch to fail and another
  to succeed!\n\nLet's see an example of that.\n\n```haskell\n>>> [1, 2, 3, 4] ^&..
  traversed . fizzleWithUnless (\\n -> show n <> \" wasn't even!\") even\n(\"1 wasn't
  even!3 wasn't even!\", [2, 4])\n```\n\nHere we see two interesting things! One is
  that it returned some elements successfully!\nBut also, it returned a funny looking
  error message; looks like our messages got smushed together!\n\n`lens-error` lets
  you use any error type you want given you follow two conditions:\n\n1. All lenses
  in the chain must agree on the same error type\n2. The error type must be a Monoid.\n\nThe
  error combinators will end up mashing all your errors together, so usually\nit's
  nice to just wrap them all in a list; up to you though!\n\nThere are a few more
  `fizzle` combinators available; hopefully you can build what you need with them
  :)\n\nFor instance we can include failure messages on prisms.\n\nIf we use `^&?`;
  We'll find the first successfull result; otherwise return all\nthe errors we encountered.\n\n```haskell\n>>>
  let prismError p name = p `orFizzleWith` (\\v -> [\"Value \" <> show v <> \" didn't
  match: \" <> name])\n>>> let _R = prismError _Right \"_Right\"\n\n>>> [Left (1 ::
  Int), Left 2, Right (3 :: Int)] ^&? traversed . _R\nSuccess 3\n>>> [Left (1 :: Int),
  Left 2, Left 3] ^&? traversed . _R\nFailure [ \"Value Left 1 didn't match: _Right\"\n
  \       , \"Value Left 2 didn't match: _Right\"\n        , \"Value Left 3 didn't
  match: _Right\"]\n```\n\n# More examples\n\nFor more examples you can reference
  the [test suite](./test/Spec.hs).\n"
description-type: markdown
hash: 6d476b7fb6516fd8a59b3c901a9f6f3289a1a0fb4ea5d5b30976e41be9e75276
homepage: https://github.com/ChrisPenner/lens-errors#readme
latest: 0.2.2.0
license-name: BSD-3-Clause
maintainer: christopher.penner@gmail.com
synopsis: Error handling in lens chains
test-bench-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  either: '>=0'
  hspec: '>=0'
  lens: '>=0'
  lens-errors: '>=0'
