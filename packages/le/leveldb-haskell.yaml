all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.1.1
- 0.4.2
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.6.5.1
author: Kim Altintop et.al. (see AUTHORS file)
basic-deps:
  async: '>=0'
  base: '>=3 && <5'
  bytestring: '>=0'
  data-default: '>=0'
  exceptions: '>=0.6'
  filepath: '>=0'
  leveldb-haskell: '>=0'
  resourcet: '>0.3.2'
  transformers: '>=0'
changelog: |
  [0.6.5]:

  * Relaxed constraints in `MonadResource` module

  [0.6.1]:

  * Expose `compactRange`

  [0.6.0]:

  * Slices include the end element (justifies version bump)
  * Large parts of the Data.API implemented. This is now completely overdone

  [0.5.0]:

  * Remove `close` from public API

  [0.4.2]:

  * Deprecate `close`

  [0.4.0]:

  * New streaming interface (experimental)

  [0.3.1]:

  * Deprecate `mapIter`, `iterItems`, `iterKeys`, `iterValues`

  [0.3.0]:

  * ResourceT is no longer compulsory


  [0.2.0]:

  * requires LevelDB v1.7
  * support for filter policy (LevelDB v1.5), either custom or using the built-in
    bloom filter implementation
  * write batch values no longer require a `memcpy` to be early-finalizer-safe
    (introduced in 0.1.1)


  [0.1.0]:

  * memory (foreign pointers) is managed through
    [ResourceT](http://hackage.haskell.org/package/resourcet). Note that this
    requires to lift monadic actions inside the `MonadResource` monad, see the
    examples.
  * links against shared library (LevelDB v1.3 or higher)
  * LevelDB 1.3 API fully supported (including custom comparators, excluding
    custom environments)


  [0.0.x]:

  * experimental releases
changelog-type: text
description: |
  This library provides Haskell bindings to
  [LevelDB](https://github.com/google/leveldb)

  [![Build Status](https://secure.travis-ci.org/kim/leveldb-haskell.png)](http://travis-ci.org/kim/leveldb-haskell)

  ## Installation

  Prerequisites:

  * [GHC 7.*](http://www.haskell.org/ghc)
  * [Cabal](http://www.haskell.org/cabal), version 1.3 or higher
  * [LevelDB](https://github.com/google/leveldb)
  * Optional: [Snappy](http://code.google.com/p/snappy),
    if compression support is desired

  **Note:** as of version 1.3, LevelDB can be built as a shared library. Thus, as
  of version 0.1.0 of this library, LevelDB is no longer bundled and must be
  installed on the target system. On many systems / distributions, the LevelDB
  library is available via the native package manager. On Windows, you may want to
  follow [these instructions](https://github.com/lamdu/lamdu/blob/1623bc38e67361d4ba4f051e23a66985a66ca52c/doc/Build.md#windows).

  To install the latest version from hackage:

  ```shell
  $ cabal install leveldb-haskell
  ```

  To install from checked-out source:

  ```shell
  $ cabal install
  ```

  ## Notes

  This library is in very early stage and has seen very limited testing. Comments
  and contributions are welcome.

  ## Bugs and Contributing

  Please report issues via http://github.com/kim/leveldb-haskell/issues.<br />
  Patches are best submitted as pull requests, or via email
  (kim.altintop@gmail.com).

  ## License

  BSD 3, see LICENSE file.
description-type: markdown
hash: 2993e51257ab9b09da781451e514a43d7a3b243eec29e400cd26c613f681579d
homepage: http://github.com/kim/leveldb-haskell
latest: 0.6.5.1
license-name: BSD-3-Clause
maintainer: kim.altintop@gmail.com
synopsis: Haskell bindings to LevelDB
test-bench-deps:
  QuickCheck: '>=2.7'
  base: '>=0'
  bytestring: '>=0'
  data-default: '>=0'
  directory: '>=0'
  exceptions: '>=0.6'
  leveldb-haskell: '>=0'
  mtl: '>=0'
  tasty: '>=0.10'
  tasty-quickcheck: '>=0.8'
  temporary: '>=0'
  transformers: '>=0'
