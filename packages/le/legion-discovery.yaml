all-versions:
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.2.1
- 0.2.2.2
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 1.0.0.0
- 1.0.0.1
author: Rick Owens
basic-deps:
  Cabal: '>=1.24.0.0 && <1.25'
  SHA: '>=1.6.4.1 && <1.7'
  aeson: '>=0.11.2.1 && <1.1'
  attoparsec: '>=0.13.1.0 && <0.14'
  base: '>=4.8 && <4.10'
  binary: '>=0.8.3.0 && <0.9'
  bytestring: '>=0.10.8.1 && <0.11'
  canteven-http: '>=0.1.2.0 && <0.2'
  canteven-log: '>=2.0.0.1 && <2.1'
  conduit: '>=1.2.8 && <1.3'
  containers: '>=0.5.7.1 && <0.6'
  data-default-class: '>=0.1.2.0 && <0.2'
  ekg: '>=0.4.0.11 && <0.5'
  graphviz: '>=2999.18.1.2 && <2999.19'
  http-api-data: '>=0.2.4 && <0.4'
  http-grammar: '>=0.1.0.0 && <0.2'
  legion: '>=0.9 && <0.10'
  legion-discovery: '>=0'
  legion-extra: '>=0.1.2.0 && <0.2'
  monad-logger: '>=0.3.20.1 && <0.4'
  mtl: '>=2.2.1 && <2.3'
  servant-server: '>=0.8.1 && <0.10'
  text: '>=1.2.2.1 && <1.3'
  time: '>=1.6.0.1 && <1.7'
  wai: '>=3.2.1.1 && <3.3'
  wai-extra: '>=3.0.19 && <3.1'
  warp: '>=3.2.9 && <3.3'
changelog: ''
changelog-type: ''
description: |+
  # legion-discovery

  A simple service discovery service based on Legion, that natively supports
  the idea of interface versions, and the idea that clients may only be
  interested in finding certain (compatible) versions of the services they
  are looking for.

  The initial motivation for this project is to act as a test driver for the
  [Legion](https://github.com/owensmurray/legion#readme) framework. Since the
  status of that framework is still experimental, the status of this service is
  also experimental.

  - [API](#api)
      - [`POST /v1/ping`](#post-v1ping)
      - [`GET /v1/services/:serviceId`](#get-v1servicesserviceid)
      - [`GET /v1/services/:serviceId/:versionRange`](#get-v1servicesserviceidversionrange)
      - [`GET /v1/graph`](#get-v1graph)
  - [Content Types](#content-types)
      - [`application/vnd.legion-discovery.instance-list+json`](#applicationvndlegion-discoveryinstance-listjson)
      - [`application/vnd.legion-discovery.ping-request+json`](#applicationvndlegion-discoveryping-requestjson)

  ## API

  ### `POST /v1/ping`

  Register a service. The service name and version are obtained via the
  `User-Agent` header field. Registration expires in 30 seconds.

  - Request
      - Content-Type: [`application/vnd.legion-discovery.ping-request+json`](#applicationvndlegion-discoveryping-requestjson)
      - Headers:
          - `User-Agent`: The `User-Agent` request header is
            mandatory, and must conform to the grammar specified in
            [RFC-2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43)
            and, further, must provide the product version that RFC-2616
            describes as optional.
  - Response `204 No Content`: indicates a successful registration.

  ### `GET /v1/services/:serviceId`

  Returns all current instances of a service, regardless of version.

  - Request
      - Headers:
          - `User-Agent`: The `User-Agent` request header is
            mandatory, and must conform to the grammar specified in
            [RFC-2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43)

  - Response `200 Ok`
      - Content-Type: [`application/vnd.legion-discovery.instance-list+json`](#applicationvndlegion-discoveryinstance-listjson)


  ### `GET /v1/services/:serviceId/:versionRange`

  Returns the service instances that match the requested version range. The
  version range syntax is the same as what cabal understands
  (e.g. `>= 0.1 && < 0.2`). You are really going to want to make sure and url
  encode this segment of the url.

  - Request
      - Headers:
          - `User-Agent`: The `User-Agent` request header is
            mandatory, and must conform to the grammar specified in
            [RFC-2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43)

  - Response `200 Ok`
      - Content-Type: [`application/vnd.legion-discovery.instance-list+json`](#applicationvndlegion-discoveryinstance-listjson)

  ### `GET /v1/graph`

  Returns a visualization of the service interactions. This endpoint supports
  multiple content types via the `Accept` header.

  - Response `200 Ok`
      - Content-Type [`image/svg+xml`](https://www.w3.org/TR/SVG11/)
      - Content-Type [`text/vnd.graphviz`](http://www.graphviz.org/content/dot-language)


  ## Content Types

  ### `application/vnd.legion-discovery.instance-list+json`

      {
          "https://host1:8080": {
              "version": "1.0.2.0"
          },
          "https://host2:8080": {
              "version": "1.0.2.0"
          },
          "https://host3:8080": {
              "version": "1.0.2.0"
          }
      }

  ### `application/vnd.legion-discovery.ping-request+json`

      {
          "serviceAddress": "https://host3:8080"
      }


description-type: markdown
hash: b414e6a56ee7bc4ae61ff4cc8c9a72cc72fa9f52166689e9bcbb3949b79b47e5
homepage: https://github.com/owensmurray/legion-discovery#readme
latest: 1.0.0.1
license-name: Apache-2.0
maintainer: rick@owensmurray.com
synopsis: A discovery service based on Legion.
test-bench-deps:
  base: '>=0'
  legion-discovery: '>=0'
