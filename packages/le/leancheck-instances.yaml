all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.8
author: Rudy Matela <rudy@matela.com.br>
basic-deps:
  array: '>=0'
  base: '>=4 && <5'
  bytestring: '>=0'
  containers: '>=0'
  leancheck: '>=0.9.2'
  nats: '>=0'
  text: '>=0'
  time: '>=0'
changelog: |
  Changelog for leancheck-instances
  =================================


  v0.0.8
  ------

  * fix build of tests on GHC 9.10


  v0.0.6
  ------

  * unbuildable/incorrect release,
    please do not use this one.


  v0.0.5
  ------

  * add `Listable Void` instance;
  * CI using GitHub actions instead of Travis;


  v0.0.4
  ------

  * minor improvement on Listable UTCTime
  * improve tests


  v0.0.3
  ------

  * Add guide for how to add new Listable instances.
  * Minor improvements in Haddock documentation.
  * Fix minor bug in the Makefile.


  v0.0.2
  ------

  * Listable Set instance;
  * Listable Map instance;
  * Listable IntSet instance;
  * Listable IntMap instance;
  * Some Data.Time instances;
  * Listable Array instance.


  v0.0.1
  ------

  * ByteString instances;
  * Natural instance;
  * Text instance;
  * initial release on Hackage.
changelog-type: markdown
description: "LeanCheck\n=========\n\n[![leancheck-instances's Build Status][build-status]][build-log]\n[![leancheck-instances
  on Hackage][hackage-version]][leancheck-instances-on-hackage]\n[![leancheck-instances
  on Stackage LTS][stackage-lts-badge]][leancheck-instances-on-stackage-lts]\n[![leancheck-instances
  on Stackage Nightly][stackage-nightly-badge]][leancheck-instances-on-stackage-nightly]\n\nThis
  package extends [LeanCheck] by providing [`Listable`] instances for common types
  provided by the\nHaskell Platform.\n\nThis package is to [LeanCheck] what [quickcheck-instances]
  is to [QuickCheck].\nThe current objective is to include all types supported by
  [quickcheck-instances].\n\n\nInstalling\n----------\n\nTo install the latest leancheck-instances
  version from Hackage, just run:\n\n\t$ cabal update\n\t$ cabal install leancheck-instances\n\n\nExamples\n--------\n\nImporting
  the library:\n\n\t> import Test.LeanCheck\n\t> import Test.LeanCheck.Instances\n\nChecking
  properties of [`Text`]:\n\n\t> import qualified Data.Text as T\n\t> check $ \\t
  -> T.reverse (T.reverse t) == t\n\t+++ OK, passed 200 tests.\n\t> check $ \\t ->
  T.reverse t == t\n\t*** Failed! Falsifiable (after 6 tests):\n\t\"a \"\n\nEnumerating
  [`Map`]s:\n\n\t> import Data.Map\n\t> list :: [Map Bool Bool]\n\t[ fromList []\n\t,
  fromList [(False,False)]\n\t, fromList [(False,True)]\n\t, fromList [(True,False)]\n\t,
  fromList [(True,True)]\n\t, fromList [(False,False),(True,False)]\n\t, fromList
  [(False,False),(True,True)]\n\t, fromList [(False,True),(True,False)]\n\t, fromList
  [(False,True),(True,True)]\n\t]\n\t> take 7 $ list :: [Map Int Int]\n\t[ fromList
  []\n\t, fromList [(0,0)]\n\t, fromList [(0,1)]\n\t, fromList [(1,0)]\n\t, fromList
  [(0,-1)]\n\t, fromList [(1,1)]\n\t, fromList [(0,0),(1,0)]\n\t]\n\n\nAdding more
  instances\n---------------------\n\nAlthough the current objective is to include
  all types supported by\n[quickcheck-instances], [leancheck-instances] only has about
  10% of what is\nneeded.  Any help with new instances to increase that percentage
  will be\nappreciated.\n\nThis section provides a quick guide on how to add new instances.\n\n1.
  __Choose the type to support__\n\tCompare the instances provided on [quickcheck-instances]
  and\n\t[leancheck-instances] and choose any that has not been added to\n\t[leancheck-instances]
  yet.\n\n2. __Create the module file if needed__\n\tIf needed, create a module that
  will contain your instance following the\n\tsame structure in [quickcheck-instances]:\n\n
  \      $ cat > src/Test/LeanCheck/Instances/Something.hs\n       -- |\n       --
  Module      : Test.LeanCheck.Instances.Containers\n       -- Copyright   : (c) 2019
  Authors of leancheck-instances\n       -- License     : 3-Clause BSD  (see the file
  LICENSE)\n       -- Maintainer  : Rudy Matela <rudy@matela.com.br>\n       --\n
  \      -- 'Listable' something.\n       module Test.LeanCheck.Instances.Something
  () where\n\n       import Test.LeanCheck\n       import Something\n       ^D\n\n\tRemember
  to:\n\n\t* Import your newly created module on `src/Test/LeanCheck/Instances.hs`\n\n\t*
  Add your newly created module to the `exposed-modules` list in\n\t  `leancheck-instances.cabal`.\n\n\t*
  You may need to add a package dependency to `build-depends` on\n\t  `leancheck-instances.cabal`.\n\n\t*
  (Optionally) run `make depend` to update the `mk/depend.mk` file.\n\n3. __Create
  your instance__\n\tOpen the relevant module with your favourite text editor and
  add your\n\tinstance:\n\n       instance ... => Listable Something where\n         ...\n\n\tCheck
  the existing modules and the [`Listable`] typeclass documentation for\n\thow to
  create one.\n\n\tMake sure your instance builds with `cabal build`.\n\n4. __Create
  tests__\n\tGo into `tests/main.hs` and add two properties exercising your type,
  one\n\tthat [`holds`] and one that [`fails`].  Make sure the tests pass by running\n\t`cabal
  test`.\n\n5. (Optional) __Add diff-tests__\n\n\t* on `bench/tiers.hs` add an entry
  for your type;\n\t* add two matching entries on the `diff-test-tiers` and\n\t  `update-diff-test-tiers`
  Makefile targets.\n\t* run `make update-diff-test` to generate the reference output
  file.\n\t* run `make test` just to make sure the test is working.\n\n6. __Submit
  a Pull Request__\n\tThen submit a [pull request on GitHub] and wait for your build
  to pass.\n\tAlternatively, send a patch via e-mail.\n\n\nFurther reading / see also\n--------------------------\n\n*
  [leancheck-instances' Haddock Documentation];\n* [LeanCheck];\n* [LeanCheck provider
  for Tasty]\n  -- `$ cabal install tasty-leancheck` ;\n* [LeanCheck provider for
  test-framework]\n  -- `$ cabal install test-framework-leancheck` ;\n* [LeanCheck
  provider for Hspec]\n  -- `$ cabal install hspec-leancheck` .\n\n\n[leancheck-instances'
  Haddock documentation]: https://hackage.haskell.org/package/leancheck-instances/docs/Test-LeanCheck-Instances.html\n[LeanCheck's
  Haddock documentation]: https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html\n\n[`Listable`]:
  \      https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#t:Listable\n[`holds`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:holds\n[`fails`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:fails\n[`counterExample`]:
  https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:counterExample\n[`check`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:check\n[`tiers`]:
  \         https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:tiers\n[`list`]:
  \          https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#v:list\n[`Text`]:
  \          https://hackage.haskell.org/package/text/docs/Data-Text.html#t:Text\n[`Map`]:
  \           https://hackage.haskell.org/package/containers/docs/Data-Map-Lazy.html#t:Map\n\n[LeanCheck
  provider for Tasty]:          https://hackage.haskell.org/package/tasty-leancheck\n[LeanCheck
  provider for test-framework]: https://hackage.haskell.org/package/test-framework-leancheck\n[LeanCheck
  provider for Hspec]:          https://hackage.haskell.org/package/hspec-leancheck\n[LeanCheck]:
  \                            https://github.com/rudymatela/leancheck\n[QuickCheck]:
  \                           https://hackage.haskell.org/package/QuickCheck\n[quickcheck-instances]:
  \                 https://hackage.haskell.org/package/quickcheck-instances\n[leancheck-instances]:
  \                  https://hackage.haskell.org/package/leancheck-instances\n\n[build-log]:
  \   https://github.com/rudymatela/leancheck-instances/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/leancheck-instances/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  https://img.shields.io/hackage/v/leancheck-instances.svg\n[leancheck-instances-on-hackage]:
  \         https://hackage.haskell.org/package/leancheck-instances\n[stackage-lts-badge]:
  \                     https://stackage.org/package/leancheck-instances/badge/lts\n[stackage-nightly-badge]:
  \                 https://stackage.org/package/leancheck-instances/badge/nightly\n[leancheck-instances-on-stackage]:
  \        https://stackage.org/package/leancheck-instances\n[leancheck-instances-on-stackage-lts]:
  \    https://stackage.org/lts/package/leancheck-instances\n[leancheck-instances-on-stackage-nightly]:
  https://stackage.org/nightly/package/leancheck-instances\n[pull request on GitHub]:
  \                 https://github.com/rudymatela/leancheck-instances/pulls\n"
description-type: markdown
hash: 33c84ec2fcfd95b9a330e1c696ae25377bfe25f4e279b74f2eb48fca96d2db93
homepage: https://github.com/rudymatela/leancheck-instances#readme
latest: 0.0.8
license-name: BSD-3-Clause
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: Common LeanCheck instances
test-bench-deps:
  base: '>=4 && <5'
  bytestring: '>=0'
  containers: '>=0'
  leancheck: '>=0'
  leancheck-instances: '>=0'
  nats: '>=0'
  text: '>=0'
