all-versions:
- '2009'
- '2012'
- '2015'
- 2015.0.0.1
- '2017'
- '2017.1'
- 2017.1.0.1
author: Bjorn Buckwalter
basic-deps:
  base: <10
  time: '>=1.7 && <2'
changelog: |
  2017.1.0.1 (2017-07)
  ====================

  *  Updated tests for 2017.1 and recent years (thank Dan Burton for filing the issue).

  2017.1 (2016-12)
  ================

  *  Corrected version numbering to reflect API breaking (2017.0.0.1 deprecated).

  2017.0.0.1 (2016-12)
  ====================

  *  Ported leapSecondMap of time-1.7.

  2017 (2016-06)
  ==============

  *  Added 2017 leap second (2016-12-31T23:59:60Z).

  2015.0.0.1 (2015-05)
  ====================

  *  Fix documentation to reflect addition of 2015 leap second.
  *  Hide hypothetical leap seconds (prior to 1972-01-01).
  *  Add test suite to .cabal.

  2015 (2015-01)
  ==============

  *  Added 2015 leap second (2015-06-30T23:59:60Z).

  2012 (2012-01)
  ==============

  *  Added 2012 leap second (2012-06-30T23:59:60Z).

  2009 (2009-01)
  ==============

  Initial release including all leap seconds up to 2009-01-01.
changelog-type: markdown
description: |
  leapseconds-announced
  =====================

  This libraray provides a static [`Data.Time.Clock.TAI.LeapSecondTable`][1]
  "containing" the leap seconds announced at library release time.
  A new version of the library is released every time the International
  Earth Rotation and Reference Systems Service (IERS) announces a new
  leap second at http://hpiers.obspm.fr/eoppc/bul/bulc/bulletinc.dat.

  This module is intended to provide a quick-and-dirty leap second solution
  for one-off analyses concerned only with the past and present (i.e. up
  until the next as of yet unannounced leap second), or for applications
  which can afford to be recompiled against an updated library as often
  as every six months.

  [1]: https://hackage.haskell.org/package/time/docs/Data-Time-Clock-TAI.html


  Usage
  -----

  Import `Data.Time.Clock.AnnouncedLeapSeconds` to bring the leap
  second table `lst` into scope. Here is a usage example:

  ```haskell
  import Data.Time
  import Data.Time.Clock.TAI
  import Data.Time.Clock.AnnouncedLeapSeconds

  -- | Convert from UTC to TAI.
  utcToTAITime' = utcToTAITime lst
  -- | Convert from TAI to UTC.
  taiToUTCTime' = taiToUTCTime lst

  -- | Add a length of time to a UTC time, respecting leap seconds
  --   (as opposed to Data.Time.Clock.addUTCTime).
  addUTCTime' :: DiffTime -> UTCTime -> Maybe UTCTime
  addUTCTime' dt utc = taiToUTCTime' . addAbsoluteTime dt =<< utcToTAITime' utc
  ```
description-type: markdown
hash: 245cdcabb8060cab1bdb19d3a4e253a946db69c1ae636923348c7d3cbd05495b
homepage: https://github.com/bjornbm/leapseconds-announced
latest: 2017.1.0.1
license-name: BSD-3-Clause
maintainer: bjorn@buckwalter.se
synopsis: Leap seconds announced at library release time.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  leapseconds-announced: '>=0'
  time: '>=0'
