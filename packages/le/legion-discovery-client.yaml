all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.1.0
- 0.1.1.1
- 0.2.0.1
author: Rick Owens
basic-deps:
  Cabal: '>=1.22.5.0 && <1.25'
  aeson: '>=0.11.2.1 && <1.2'
  base: '>=4.7 && <4.10'
  bytestring: '>=0.10.6.0 && <0.11'
  containers: '>=0.5.6.2 && <0.6'
  http-client: '>=0.5.6.1 && <0.6'
  http-types: '>=0.9.1 && <0.10'
  load-balancing: '>=1.0 && <1.1'
  monad-logger: '>=0.3.20.2 && <0.4'
  resourcet: '>=1.1.7.5 && <1.2'
  safe-exceptions: '>=0.1.4.0 && <0.2'
  text: '>=1.2.2.1 && <1.3'
  text-show: '>=3.4.1.1 && <3.7'
  transformers: '>=0.4.2.0 && <0.6'
changelog: ''
changelog-type: ''
description: |+
  # legion-discovery-client

  This is a Haskell client library used to communicate with the Legion
  Discovery discovery service.


  ## Performing a query without registering a service.

  If you want to perform a query without registering yourself a service,
  the following example is how you might typically accomplish that. Note
  that even though you are not starting a service, you must still specify
  a name and a version for the local program. The reason for this is
  that Legion Discovery keeps track of all requests in order to build a
  dependency graph of your service ecosystem.

  ```haskell
  import Network.HTTP.Client as C
  import OM.Discovery (connect, query)

  ...

  let
    name = "my-program" {- the name of this client program. -}
    version = "0.1" {- the version of this client program.  -}
    targetService = "some-service" {- the name of the service you are looking for. -}
    targetRange = "> 1.1.1 && < 1.2" {- the range of acceptable versions you wish to find. -}
  in do
    manager <- C.newManager C.defaultManagerSettings
    discovery <- connect name version manager

    servicesInstances <- query targetService targetRange discovery
    ...
  ```


  ## Registering a service.

  The following example shows how to register a service, using
  `withService`.

  ```haskell
  import Network.HTTP.Client as C
  import OM.Discovery (connect, withService)

  ...

  let
    name = "my-program" {- the name of this client program. -}
    version = "0.1" {- the version of this client program.  -}
    serviceAddr = "http://ec2-foo-bar.amazon.com:8080" {- the address on which your service is running. -}
  in do
    manager <- C.newManager C.defaultManagerSettings
    discovery <- connect name version manager

    withService serviceAddr discovery $ do
      {-
        Your service code here. When this IO block exits (for any reason,
        including exceptions) then the service will unregister itself.
      -}
  ```

description-type: markdown
hash: d30e139bf006d643d12b374c0aec6b129d66d3b57195c9ad2d0c577bd30bd4a8
homepage: https://github.com/owensmurray/legion-discovery-client#readme
latest: 0.2.0.1
license-name: Apache-2.0
maintainer: rick@owensmurray.com
synopsis: Client library for communicating with legion-discovery.
test-bench-deps:
  base: '>=0'
  legion-discovery-client: '>=0'
