homepage: http://github.com/ekmett/lens/
changelog-type: markdown
hash: 829accac5fdd4534fc7a1d5ce2efed603fa7538a81aac387fd998eda53f270d9
test-bench-deps:
  test-framework-hunit: '>=0.2'
  bytestring: -any
  test-framework: '>=0.6'
  base: -any
  comonad: '>=4'
  unordered-containers: -any
  text: -any
  generic-deriving: -any
  test-framework-quickcheck2: '>=0.2'
  criterion: '>=1'
  HUnit: '>=1.2'
  containers: -any
  simple-reflect: '>=0.3.1'
  lens: -any
  base-compat: '>=0.11.0 && <0.14'
  mtl: -any
  transformers: -any
  deepseq: -any
  QuickCheck: '>=2.4'
  vector: -any
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Lenses, Folds and Traversals
changelog: "5.2.2 [2023.03.18]\r\n------------------\r\n* Fix a bug in which calling
  `ix i` (where `i` is a negative number) on `Text`\r\n  or `ByteString` would return
  the `Just` the first character instead of\r\n  returning `Nothing`.\r\n\r\n5.2.1
  [2023.02.27]\r\n------------------\r\n* Allow building with GHC 9.6.\r\n* Allow
  building with GHC backends where `HTYPE_SIG_ATOMIC_T` is not defined,\r\n  such
  as the WASM backend.\r\n* Support building with `th-abstraction-0.5.*`.\r\n* Define
  `_TypeDataD` in `Language.Haskell.TH.Lens` when building with\r\n  `template-haskell-2.20.0.0`
  (GHC 9.6) or later.\r\n\r\n5.2 [2022.08.11]\r\n----------------\r\n* Allow building
  with GHC 9.4.\r\n* The type of `universeOf` has changed:\r\n\r\n  ```diff\r\n  -universeOf
  :: Getting       [a]  a a -> a -> [a]\r\n  +universeOf :: Getting (Endo [a]) a a
  -> a -> [a]\r\n  ```\r\n\r\n  In many cases, using `Endo [a]` over `[a]` improves
  performance. Most call\r\n  sites to `universeOf` will not be affected by this change,
  although you may\r\n  need to update your code if you define your own combinators
  in terms of\r\n  `universeOf`.\r\n* Allow `makeWrapped` to accept the names of data
  constructors. This way,\r\n  `makeWrapped` can be used with data family instances,
  much like other\r\n  functions in `Control.Lens.TH`.\r\n* Define `_OpaqueP`, `_DefaultD`,
  `_LamCasesE`, `_PromotedInfixT`, and\r\n  `_PromotedUInfixT` in `Language.Haskell.TH.Lens`
  when building with\r\n  `template-haskell-2.19.0.0` (GHC 9.4) or later.\r\n\r\n5.1.1
  [2022.05.17]\r\n------------------\r\n* Add `Data.HashSet.Lens.hashMap`, an `Iso`
  between a `HashSet a` and a\r\n  `HashMap a ()`.\r\n* Allow building with `transformers-0.6.*`
  and `mtl-2.3.*`.\r\n\r\n  Note that `lens` no longer defines `Zoom` instances for
  `ErrorT` or `ListT`\r\n  when building with `mtl-2.3` or later. This is because
  `MonadState` is a\r\n  superclass of `Zoom`, and the `MonadState` instances for
  `ErrorT` and `ListT`\r\n  were removed in `mtl-2.3`. Be watchful of this if you
  build `lens` with\r\n  `mtl-2.3` (or later) combined with an older version of `transformers`\r\n
  \ (pre-`0.6`) that defines `ErrorT` or `ListT`.\r\n\r\n5.1 [2021.11.15]\r\n----------------\r\n*
  Allow building with GHC 9.2.\r\n* Drop support for GHC 7.10 and older.\r\n* The
  type of `_ConP` in `Language.Haskell.TH.Lens` is now\r\n  `Prism' Pat (Name, [Type],
  [Pat])` instead of `Prism' Pat (Name, [Pat])`\r\n  when building with `template-haskell-2.18`
  or later.\r\n* Define `_CharTyLit` in `Language.Haskell.TH.Lens` when building with\r\n
  \ `template-haskell-2.18` or later.\r\n* Add `Prefixed` and `Suffixed` classes to
  `Control.Lens.Prism`, which provide\r\n  `prefixed` and `suffixed` prisms for prefixes
  and suffixes of sequence types.\r\n  These classes generalize the `prefixed` and
  `suffixed` functions in\r\n  `Data.List.Lens`, which were previously top-level functions.
  In addition to\r\n  providing `Prefixed` and `Suffixed` instances for lists, instances
  for `Text`\r\n  and `ByteString` types are also provided.\r\n\r\n  At present, `Prefixed`
  and `Suffixed` are re-exported from `Data.List.Lens`\r\n  for backwards compatibility.
  This may change in a future version of `lens`,\r\n  however.\r\n* Add a `traversal`
  function to `Control.Lens.Traversal`. This function, aside\r\n  from acting as a
  `Traversal` counterpart to the `lens` and `prism` functions,\r\n  provides documentation
  on how to define `Traversal`s.\r\n* Add a `matching'` function to `Control.Lens.Prism`.
  `matching'` is like\r\n  `matching`, but with a slightly more general type signature
  that allows it to\r\n  work with combinations of `Lens`es, `Prism`s, and `Traversal`s.\r\n\r\n5.0.1
  [2021.02.24]\r\n------------------\r\n* Fix a bug in which `makeLenses` could produce
  ill kinded optics for\r\n  poly-kinded datatypes in certain situations.\r\n\r\n5
  [2021.02.17]\r\n--------------\r\n* Support building with GHC 9.0.\r\n* Remove the
  `Swapped` type class in favor of `Swap` from the `assoc` package.\r\n* Remove the
  `Strict` type class in favor of `Strict` from the `strict` package.\r\n\r\n  The
  `swapped`, `strict` and `lazy` isomorphisms are now defined using \"new\" type classes.\r\n\r\n
  \ Users which define own instances of old type classes are advised to\r\n  define
  instances of the new ones.\r\n\r\n  ```haskell\r\n  import qualified Data.Bifunctor.Swap
  as Swap\r\n  import qualified Control.Lens        as Lens\r\n\r\n  instance Swap.Swap
  MyType where\r\n    swap = ...\r\n\r\n  #if !MIN_VERSION_lens(4,20,0)\r\n  instance
  Lens.Swapped MyType where\r\n    swapped = iso Swap.swap Swap.swap\r\n  #endif\r\n
  \ ```\r\n* The `FunctorWithIndex`, `FoldableWithIndex` and `TraversableWithIndex`
  type classes\r\n  have been migrated to a new package,\r\n  [`indexed-traversable`](https://hackage.haskell.org/package/indexed-traversable).\r\n\r\n
  \ The `imapped`, `ifolded` and `itraversed` methods are now top-level functions.\r\n
  \ If you are not defining these methods in your instances,\r\n  you don't need to
  change your definitions.\r\n\r\n  Beware: the `optics-core` package (versions <0.4)
  defines similar classes,\r\n  and will also migrate to use `indexed-traversable`
  classes. Therefore, you\r\n  might get duplicate instance errors if your package
  defines both.\r\n\r\n  If you define your own `FunctorWithIndex` etc. instances,\r\n
  \ we recommend that you depend directly on the `indexed-traversable` package.\r\n
  \ If you want to continue support `lens-4` users, you may write\r\n\r\n  ```haskell\r\n
  \ -- from indexed-traversable\r\n  import Data.Functor.WithIndex\r\n\r\n  -- from
  lens\r\n  import qualified Control.Lens as L\r\n\r\n  -- your (indexed) container\r\n
  \ data MySeq a = ...\r\n\r\n  -- indexed-traversable instance\r\n  instance FunctorWithIndex
  \    Int MySeq where imap = ...\r\n  instance FoldableWithIndex    Int MySeq where
  ifoldMap = ...\r\n  instance TraversableWithIndex Int MySeq where itraverse = ...\r\n\r\n
  \ -- lens <5 instance, note the !\r\n  #if !MIN_VERSION_lens(5,0,0)\r\n  instance
  L.FunctorWithIndex     Int MySeq where imap = imap\r\n  instance L.FoldableWithIndex
  \   Int MySeq where ifoldMap = ifoldMap\r\n  instance L.TraversableWithIndex Int
  MySeq where itraverse = itraverse\r\n  #endif\r\n  ```\r\n\r\n  In other words,
  always provide `indexed-traversable` instances.\r\n  If your package depends on
  `lens` and allows `lens-4`,\r\n  you should additionally provide instances for `lens-4`
  type classes\r\n  that can reuse the `indexed-traversable` instances.\r\n\r\n* Make
  the functions in `Control.Lens.TH` work more robustly with poly-kinded\r\n  data
  types. This can cause a breaking change under certain situations:\r\n  * TH-generated
  optics for poly-kinded data types are now much more likely to\r\n    mention kind
  variables in their definitions, which will require enabling\r\n    the `PolyKinds`
  extension at use sites in order to typecheck.\r\n  * Because TH-generated optics
  now quantify more kind variables than they did\r\n    previously, this can affect
  the order of visible type applications.\r\n* Generalize the types of `generic` and
  `generic1` to allow type-changing\r\n  updates. If you wish to use the old, more
  restricted types of these\r\n  functions, use `simple . generic` or `simple . generic1`
  instead.\r\n* Add `Control.Lens.Profunctor` with conversion functions to and from\r\n
  \ profunctor optic representation.\r\n* Add `Control.Lens.Review.reviewing`, which
  is like `review` but with a more\r\n  polymorphic type.\r\n* Mark `Control.Lens.Equality`
  as Trustworthy.\r\n* The build-type has been changed from `Custom` to `Simple`.\r\n
  \ To achieve this, the `doctests` test suite has been removed in favor of using
  [`cabal-docspec`](https://github.com/phadej/cabal-extras/tree/master/cabal-docspec)
  to run the doctests.\r\n* Use `alterF` in `At (HashMap k)` instance implementation.\r\n*
  Use `alterF` in `At` and `Contains` instances for `Set`, `IntSet`, and\r\n  `HashSet`.\r\n*
  Avoid re-inserting keys already present in `ix` for `Set`, `IntSet`,\r\n  and `HashSet`.
  For `Set` and `HashSet`, this changes the semantics\r\n  slightly; if the user-supplied
  key is `==` to one already present in\r\n  the set, then the latter will not be
  replaced in the result.\r\n* Consume `()` values lazily in `Control.Lens.At`.\r\n\r\n4.19.2
  [2020.04.15]\r\n-------------------\r\n* Remove the test suite's dependency on `test-framework-th`.\r\n\r\n4.19.1
  [2020.02.13]\r\n-------------------\r\n* Fix a bug introduced in 4.19 where using
  `_TupE` to `preview` a value would\r\n  always fail.\r\n\r\n4.19 [2020.02.03]\r\n-----------------\r\n*
  Support building with GHC 8.10.\r\n* The types of `_TupE` and `_UnboxedTupE` are
  now `Prism' Exp [Maybe Exp]`\r\n  when built against `template-haskell-2.16` or
  later to reflect the new\r\n  types of `TupE` and `UnboxedTupE`.\r\n* Add `_ForallVisT`
  and `_BytesPrimL` prisms when building against\r\n  `template-haskell-2.16` or later.\r\n*
  Make `<>~` and `<>=` and their `<op` and `<<op` state variants require only\r\n
  \ `Semigroup`, not `Monoid`.\r\n* Add `{Functor,Foldable,Traversable}WithIndex`
  instances for\r\n  `Control.Applicative.Const` and `Data.Functor.Constant.Constant`.\r\n\r\n4.18.1
  [2019.09.13]\r\n-------------------\r\n* Remove the use of `cpp-options: -traditional`.
  This should be unnecessary\r\n  on all versions of GHC that `lens` supports, as
  modern GHCs already use\r\n  `-traditional` internally during preprocessing. More
  critically, the use\r\n  of `cpp-options: -traditional` breaks profiling builds
  on GHC 8.8\r\n  (see https://gitlab.haskell.org/ghc/ghc/issues/17185).\r\n\r\n4.18
  [2019.09.06]\r\n-----------------\r\n* Support building with GHC 8.8.\r\n* Add `xplat`
  and `xplatf`.\r\n* Flip `auf` to take the `Iso` in the same direction as `au`.\r\n
  \ Use the new `xplatf` or just call `coerce` for the old form.\r\n* Weaken `holeInOne`'s
  `Category p` constraint to `Comonad (Corep p)`.\r\n* Generalize the type of `GHC.Generics.Lens.generic1`
  from\r\n  `Iso' (f a) (Rep1 f a)` to `Iso (f a) (f b) (Rep1 f a) (Rep1 f b)`.\r\n*
  `makeClassyPrisms` now supports generating prisms for data types that share\r\n
  \ a name with one of its constructors. In such a scenario, the name of the\r\n  classy
  prism for the data type will be prefixed with an extra `_` (for\r\n  prefix names)
  or `.` (for infix names) to disambiguate it from the prism\r\n  for the constructor.\r\n*
  Several type classes in `Control.Exception.Lens` now have additional\r\n  prisms
  corresponding to the data type that they focus on, in accordance\r\n  with the new
  convention established in the bullet point above. For example,\r\n  `AsNonTermination`
  now has an additional\r\n  `__NonTermination :: Prism' t NonTermination` method,
  and the existing\r\n  `_NonTermination :: Prism' t ()` method now has a default
  implementation in\r\n  terms of `__NonTermination`.\r\n\r\n  As a consequence of
  this change, you may need to update instances of these\r\n  classes to implement
  the new prisms.\r\n* Add additional bifunctor instances for `Swapped`.\r\n* New
  lenses `head1` and `last1`, to access the first/last elements of\r\n  a `Traversable1`
  container.\r\n* Add `filteredBy`.\r\n* Add `adjoin` to `Control.Lens.Unsound`.\r\n*
  Add `Each (Either a a) (Either b b) a b` instance.\r\n* Make `magnify` offer its
  getter argument the `Contravariant` and `Functor`\r\n  instances it will require.
  This allows `magnify` to be used without\r\n  knowing the concrete monad being magnified.\r\n*
  Add `equality`, `equality'`, `withEquality`, `underEquality`, `overEquality`,\r\n
  \ `fromLeibniz`, `fromLeibniz'` and `cloneEquality` to `Control.Lens.Equality`.\r\n*
  Add `withLens` to `Control.Lens.Lens`.\r\n* Make `substEq` and `simply` in `Control.Lens.Equality`\r\n
  \ and `withIso` in `Control.Lens.Iso` levity polymorphic.\r\n\r\n4.17.1 [2019.04.26]\r\n-------------------\r\n*
  Support `th-abstraction-0.3.0.0` or later.\r\n* Only incur `semigroups` and `void`
  dependencies on old GHCs.\r\n* Add `holes1Of`\r\n* Add `locally` https://github.com/ekmett/lens/pull/829\r\n*
  Add `ilocally` https://github.com/ekmett/lens/pull/836\r\n* Add third `Prism` law.\r\n*
  Add `gplate1`\r\n* Add `Wrapped`/`Rewrapped` instances for `Data.Monoid.Ap`.\r\n\r\n4.17
  [2018.07.03]\r\n-----------------\r\n* Allow building with GHC 8.6.\r\n* Make the
  instances for `Product` and `(:*:)` in `Control.Lens.Tuple`\r\n  poly-kinded.\r\n*
  Make the definitions in `GHC.Generics.Lens` poly-kinded.\r\n* Make `(%%@~)`, `(%%@=)`,
  `(<%@=)`, and `(<<%@=)` consume an\r\n  `Over (Indexed i)` instead of an `IndexedLensLike
  i` to improve type\r\n  inference.\r\n* Add an `AsEmpty` instance for `ZipList`.\r\n\r\n4.16.1
  [2018.03.23]\r\n-------------------\r\n* Re-export `(<&>)` from `Data.Functor` on
  `base-4.11` and later.\r\n* Added `Cons` and `Snoc` instances for `Control.Applicative.ZipList`\r\n*
  Fix a bug in which `makeFields` would generate equality constraints for\r\n  field
  types involving data families, which are unnecessary.\r\n* Improve the performance
  of `holesOf`.\r\n\r\n4.16 [2018.01.28]\r\n-----------------\r\n* The `Semigroup`
  instances for `Traversed` and `Sequenced` are now more\r\n  constrained (going from
  `Apply` to `Applicative` and `Monad`, respectively).\r\n  In GHC 8.4, `Semigroup`
  is a superclass of `Monoid`, therefore we'd need to\r\n  have `Apply` constraint
  in the `Monoid` instances. We opted to weaken our\r\n  ability to use `Apply` than
  to lose compatibility with third-party packages\r\n  that don't supply instances
  for `Apply`.\r\n\r\n  In practice this changes the (specialised) type signature
  of `traverseOf_`\r\n  ```diff+\r\n  - traverseOf_ :: Apply f       => Fold1 s a
  -> (a -> f r) -> s -> f ()\r\n  + traverseOf_ :: Applicative f => Fold1 s a -> (a
  -> f r) -> s -> f ()\r\n  ```\r\n  and similarly for `forOf_` and `sequenceOf_`.\r\n\r\n
  \ As part of this change, new combinators `traverse1Of_`, `for1Of_` and\r\n  `sequence1Of_`
  were added for `Apply`-only effects.\r\n\r\n  Similar instance context changes were
  made for `Folding` and `Effect`,\r\n  but these changes aren't publicly visible.\r\n\r\n*
  Add `Control.Lens.Unsound`, which exports unsound functionality for forming\r\n
  \ products of lenses and sums of prisms.\r\n\r\n* Add `Numeric.Natural.Lens`, which
  export convenient isomorphisms for\r\n  natural numbers.\r\n\r\n* Add `Strict` instances
  for strict and lazy `ST`.\r\n\r\n* Adapt `Language.Haskell.TH.Lens` for `template-haskell-2.13`
  (bundled\r\n  with GHC 8.4).\r\n\r\n* Add `Semigroup` and `Monoid` instances for
  `Indexing`.\r\n\r\n4.15.4\r\n----\r\n* `makeFields` and `declareFields` are now
  smarter with respect to type\r\n  families. Because GHC does not allow mentioning
  type families in instance\r\n  heads, the Template Haskell machinery works around
  this restriction by\r\n  instead generating instances of the form:\r\n\r\n  ```haskell\r\n
  \ type family Fam a\r\n  data Rec a = Rec { _recFam :: Fam a }\r\n  makeFields ''Rec\r\n\r\n
  \ ===>\r\n\r\n  instance (b ~ Fam a) => HasFam (Rec a) b where ...\r\n  ```\r\n\r\n
  \ This requires enabling the `UndecidableInstances` extension, so this trick is\r\n
  \ only employed when a field's type contains a type family application.\r\n* `declareFields`
  now avoids creating duplicate field classes that are shared\r\n  among multiple
  datatypes within the same invocation.\r\n* The Template Haskell machinery will no
  longer generate optics for fields\r\n  whose types mention existentially quantified
  type variables.\r\n* Add `HasCallStack` constraints to partial operations\r\n* Reexport
  `(.@~)` and `(.@=)` from `Control.Lens.Operators`\r\n* Support `doctest-0.13`\r\n\r\n4.15.3\r\n----\r\n*
  Generalized types of `transformMOf`, `transformOf`, `transformMOnOf`,\r\n  `transformOnOf`,
  `rewriteMOf`, `rewriteOf`, `rewriteMOnOf` and `rewriteOnOf`.\r\n* Depend on `th-abstraction`
  package for normalizing differences across\r\n  `template-haskell` versions\r\n\r\n4.15.2\r\n----\r\n*
  Build with GHC 8.2\r\n* Expand tuple accessors to support up to 19-tuples\r\n* Add
  more `Rewrapped` and `Wrapped` instances for data types from the `base`,\r\n  `bifunctors`,
  `exceptions`, `free`, `profunctors`, and `semigroupoids`\r\n  libraries\r\n* Add
  a `Generic` default implementation for `Wrapped`\r\n* Add `Wrapped` instances for
  data types introduced in `Foreign.C.Types` and\r\n  `System.Posix.Types` in `base-4.10.0.0`\r\n*
  Add prisms for recently introduced data types in `Control.Exception`\r\n* Revamp
  `Setup.hs` to use `cabal-doctest`. This makes it build\r\n  with `Cabal-1.25`, and
  makes the `doctest`s work with `cabal new-build` and\r\n  sandboxes.\r\n* Add `makeFieldsNoPrefix`,
  a variant of `makeFields` which gives the desired\r\n  behavior in the presence
  of `DuplicateRecordFields`. Also add\r\n  `classUnderscoreNoPrefixFields` and `classUnderscoreNoPrefixNamer`,
  the\r\n  corresponding `LensRules` and `FieldNamer`, respectively.\r\n* Add `toNonEmptyOf`,
  `first1Of`, `last1Of`, `minimum1Of`, and `maximum1Of`\r\n  to `Control.Lens.Fold`\r\n*
  Add `both1` to `Control.Lens.Traversal`\r\n* Generalize the type of `levels` and
  `ilevels` in `Control.Lens.Level` to work\r\n  on `Fold`s\r\n* Generalize the type
  of `getting` in `Control.Lens.Getter` to work with any\r\n  `Optical`\r\n* Add `throwing_`
  to `Control.Monad.Error.Lens` and `Control.Exception.Lens`\r\n* Fix the meta-data
  in the .cabal file to properly indicate that this project\r\n  has a BSD2 license\r\n\r\n4.15.1\r\n----\r\n*
  Restore the `generic` and `generic1` functions in `GHC.Generics.Lens`\r\n\r\n4.15\r\n----\r\n*
  Remove `Generics.Deriving.Lens` module.\r\n* Incorporate `URec`, which was introduced
  in `GHC.Generics` in `base-4.9`. For compatibility with older versions of `base`,
  `lens` now conditionally depends on `generic-deriving`\r\n* Add `Rewrapped` instance
  for `ExceptT`\r\n* Add `FunctorWithIndex`, `FoldableWithIndex`, and `TraversableWithIndex`
  instances for `Sum`, `Proxy`, `Tagged` and data types in `GHC.Generics`\r\n* Remove
  unneeded context from `*WithIndex HashMap` instances\r\n* Add `Data.Map.Lens.toMapOf`\r\n*
  Add moral `Functor` constraint for `to` `ito` `ilike` `ilike` to allow the\r\n  \"indented\"
  type signature using Getter with redundant warnings turned on.\r\n\r\n4.14\r\n----\r\n*
  Remove `Cons` and `Snoc` instances for `NonEmpty`.\r\n\r\n4.13.2.1\r\n------\r\n*
  Fixed `itraverse_` and `imapM_` returning bottom\r\n\r\n4.13.2\r\n------\r\n* Restore
  default signature for `Control.Lens.At.at`\r\n* Improve operations for `Data.Sequence.Seq`\r\n*
  Fix `declarePrisms` behavior on GHC 8 using GADT record syntax\r\n\r\n4.13.1\r\n------\r\n*
  Modified to enable the `doctests` to build with `stack`.\r\n* Removed `.ghci`.\r\n*
  Added `lookupOf`\r\n* Support GHC 8\r\n* Support `transformers` 0.5\r\n* Support
  `kan-extensions` 5\r\n* Support `comonad` 5\r\n* Better support for `Closed` from
  `profunctors`.\r\n\r\n4.13\r\n----\r\n* Pattern synonyms\r\n* Moved `foldMapBy`
  and `foldBy` into `reflection` 2.1\r\n* Added `traverseByOf`, `sequenceByOf`.\r\n*
  Reexported `traverseBy` and `sequenceBy` from `reflection` 2.1.\r\n* Modified the
  signatures of `alaf` and `auf` to work with a `Functor` rather than a `Profunctor`
  and rather drastically generalized them.\r\n* Removed `Control.Lens.Internal.Getter.coerce`
  in favor of the upstream `phantom` combinator in `contravariant` 1.3+\r\n* Renamed
  `coerced` to `phantasm` to get it out of the way.\r\n* Added `Wrapped` instance
  for `Down`\r\n\r\n4.12.3\r\n------\r\n* Move `Review` and `AReview` to `Control.Lens.Type`
  fixing a bug in `makePrisms`\r\n* Expose `HasTypes` class in `Language.Haskell.TH.Lens`\r\n*
  Make types of `foldByOf` and `foldMapByOf` more specific to hide implementation
  details\r\n* Add Prisms to `Language.Haskell.TH` for new constructors in `template-haskell-2.10`\r\n*
  Generalize type of `_FunDep` to an `Iso`\r\n\r\n4.12.2\r\n------\r\n* Incorporated
  a bug fix for `foldByOf` and `foldMapByOf` to actually let them work on folds.\r\n*
  Added a `Plated` instance for `CofreeT`\r\n\r\n4.12.1\r\n------\r\n* The `Simple`
  type alias is now poly-kinded. This lets you use `Simple Field1 s a` and the like
  in constraints.\r\n* Added `HasTypes` to `Language.Haskell.TH.Lens`.\r\n* Support
  for `vector-0.11.0` which changes `Stream` to `Bundle`\r\n\r\n4.12\r\n----\r\n*
  `reflection 2` support.\r\n\r\n4.11.2\r\n------\r\n* Give `cosmosOn` a more general
  type.\r\n\r\n4.11.1\r\n------\r\n* Added `cosmos`, `cosmosOf`, `cosmosOn`, `cosmosOnOf`
  to `Control.Lens.Plated`.\r\n* Added `icontains`, `iat`, `iix`.\r\n* Made various
  documentation improvements.\r\n* Added a `test-templates` flag.\r\n\r\n4.11\r\n----\r\n*
  Proper `profunctors` 5.1 support. This extended the superclass constraints for `Conjoined`,
  so it resulted in a major version bump.\r\n\r\n4.10\r\n----\r\n* Added `elemIndexOf`,
  `elemIndicesOf`, `findIndexOf`, and `findIndicesOf`.\r\n* Fixed `Ixed` instance
  for `Tree`. It no longer drops nodes prior to the traversed node.\r\n* `bifunctors`
  5, `profunctors` 5 and `semigroupoids` 5 support.\r\n\r\n4.9.1\r\n-----\r\n* Added
  `_Wrapped` support for `NonEmpty`.\r\n* Added `_Wrapped` support for `Alt`.\r\n*
  Fixed `Rewrapped` instance for `Last`.\r\n\r\n4.9\r\n-------\r\n* `filepath` 1.4
  support\r\n* Removed `Control.Monad.Primitive.Lens` and shed the `primitive` dependency.\r\n*
  Add missing `_WithIndex` instances from `keys` package\r\n* Much more code is inferred
  `Safe` rather than `Trustworthy`.\r\n* Documented the difference between `unsafeSingular`
  and `singular`.\r\n* `folding` now produces an actual `Fold`.\r\n* Cleaned up builds
  for GHC 7.10 to get rid of redundant import warnings.\r\n\r\n4.8\r\n---\r\n* When
  built with `profunctors` 4.4 on GHC 7.8+ we no longer need to use `unsafeCoerce`
  at all!\r\n  This drastically reduces the level of trust involved in the way we
  have optimized `lens`.\r\n* Added `fusing`. This optimizes long `Lens` chains, by
  enfocing a form of `fmap` fusion based on the Yoneda lemma. This is particularly
  effective at making faster lenses the definition is recursive or complex enough
  that it cannot be inlined.\r\n* Added `confusing`. This optimizes long `Traversal`
  chains. As with `fusing` it is best used when the definition for the `Traversal`
  chain in question is recursive or complex enough that it cannot be inlined, but
  the implementation is much more confusing.\r\n* Remove deprecated stuff: `Control.Lens.Loupe`,
  `headOf`, `makeFieldsWith`,\r\n  `strippingPrefix`, `strippingSuffix`\r\n* Added
  `Cons` and `Snoc` instances for `NonEmpty`\r\n* Removed `Data.List.Split.Lens` module\r\n*
  Reimplemented `bytestring` traversals to avoid internal modules\r\n* Added `gplate`,
  an implementation of `plate` for any type implementing `Generic`\r\n* Strictness
  revisited\r\n  * Add `generateLazyPatterns` configuration flag to `makeLenses` rules.\r\n
  \ * Make the default `makeLenses` behavior to generate STRICT optics\r\n  * Add
  strict variants of `_1` .. `_9` named `_1'` .. `_9'`\r\n* Generalized some combinators
  in `Data.Vector.Generic.Lens` and added `converted`\r\n\r\n4.7\r\n---\r\n* Migrated
  `Control.Lens.Action` to `lens-action`.\r\n* Added `Data.Vector.Generic.Lens.vectorIx`
  function for indexing vectors with only `Vector` constraint.\r\n* Added `Field1`
  and `Field2` instances for `Data.Functor.Product.Product`.\r\n* Removed the \"typeclass
  synonym\" `Gettable`.\r\n* Added new flag to `makeLenses`, `generateUpdateableOptics`,
  which allows\r\n  the generation of only `Getter`s and `Fold`s. This feature is
  intended\r\n  to be used when the constructors are hidden behind validating, \"smart\"\r\n
  \ constructors.\r\n* Fixed Template Haskell name generation when using GHC 7.10\r\n*
  Fixed Template Haskell generation of classes methods where field types used\r\n
  \ existential quantification\r\n\r\n4.6.0.1 [maintenance release]\r\n-------\r\n*
  Compatibility with `base` 4.8 [Edit: this turned out to not work for the final release
  of GHC 7.10]\r\n\r\n4.6\r\n---\r\n* Reduced `Review` to two arguments, like `Getter`.\r\n*
  Added `abbreviatedFields` to permit `makeFieldsWith` to be invoked with an argument
  that lets it act like it did pre-4.5 and accept arbitrary common prefixes.\r\n\r\n4.5\r\n---\r\n*
  Provide access to the typename in `lensRules` naming function.\r\n* `makeFields`
  camelcasing rules now properly support types with camelcasing. `MyType` with field
  `myTypeFieldA` generates `fieldA` now. Previously the prefix ignore capitalization
  and the field would need to be named `mytypeFieldA`.\r\n* `makeClassy` works on
  types even when none of the fields would generate optics.\r\n* Added `Monad`, `MonadReader`,
  `MonadPlus` and `Bind` instances for `ReifiedMonadicFold`\r\n* Added missing fixity
  declarations on many operators.\r\n* Migrated `Codec.Compression.Zlib.Lens` to `zlib-lens`
  package.\r\n\r\n4.4.0.2\r\n---\r\n* `text` 1.2.0.0 support\r\n* Remove the use of
  the TemplateHaskell extension from the library to enable lens to be used on stage1
  cross-compilers\r\n\r\n4.4.0.1\r\n----\r\n* Restore previous default of `makeFields`
  using the camel case field namer.\r\n\r\n4.4\r\n----\r\n* Internals of Template
  Haskell code generation rewritten. makeLenses,\r\n  makeClassy, and makeFields have
  been unified into the same generator.\r\n* TH generated single constructor Lens
  use irrefutable pattern matching to\r\n  enable construction starting with undefined.\r\n*
  TH generated traverals unify their field arguments (type synonyms not\r\n  currently
  expanded) enabling exotic traversals to be generated.\r\n* Added instances for `Text`
  to `Data.Aeson.Lens`\r\n* Reimplemented `makePrisms`, adding support for `makeClassyPrisms`,
  infix constructrs generate periods (.) prefixed prisms.\r\n* Added `Choice` to `Review`
  so that `Prism` is a proper subtype of `Review`\r\n* Migrated `Data.Aeson.Lens`
  to `lens-aeson` package.\r\n* Fixed `GHC.Generics.Lens.tinplate` behavior on single-field
  data types and empty data types.\r\n\r\n4.3.3\r\n-----\r\n* `semigroupoids` 4.2
  support\r\n\r\n4.3.2\r\n-----\r\n* `contravariant` 1.0 support\r\n\r\n4.3.1\r\n-----\r\n*
  Added `bytewise` to `Data.Bits`\r\n\r\n4.3\r\n---\r\n* Switched the \"direction\"
  of the `Iso` argument to `au` to match the order generated by `makePrisms` and `makeLenses`.\r\n*
  Removed `makeIsos` in favor of `makePrisms` and `makeLenses`. Each of these functions
  will construct `Iso`s when appropriate.\r\n* Removed `declareIsos` in favor of `declarePrisms`
  and `declareLenses`. Each of these functions will construct `Iso`s when appropriate.\r\n*
  Added `matching` for type-changing matches with `Prism`s.\r\n* Added `withPrism`
  for recovering the functions passed to `prism`.\r\n* Added `negated`, the isomorphism
  for the `negate` function.\r\n\r\n4.2\r\n---\r\n* Added `_Text` isomorphisms to
  make the proper use with `(#)` more obvious and fit newer convention.\r\n* Added
  `Wrapped` instances for `Vector` types\r\n* Resolved issue #439.  The various `Prism`s
  for string-like types in `Data.Aeson.Lens` are now law-abiding `Prism`s \"up to
  quotient.\"\r\n* Added `selfIndex`.\r\n* Support `attoparsec` 0.12.\r\n\r\n4.1.2\r\n-----\r\n*
  When used with `exceptions` 0.4, `throwingM` will permit use with a mere `MonadThrow`.\r\n\r\n4.1.1\r\n----\r\n*
  Generalized the types of `mapping`, `bimapping`, `contramapping`, `dimapping`, `lmapping`,
  `rmapping` to support changing the `Functor`, `Bifunctor`, `Contravariant`, and
  `Profunctor` respectively.\r\n* Compatibility with `free` 4.6\r\n\r\n4.1\r\n---\r\n*
  Added `Plated` instances for various free monad variants.\r\n* Compatibility with
  GHC HEAD (7.9+)\r\n\r\n4.0.7\r\n-----\r\n* Removed dependency on `constraints`.
  It was used in a pre-release version of 4.0 but never made it into 4.0, but the
  dependency had remained around complicating builds for GHC 7.4.\r\n\r\n4.0.6\r\n-----\r\n*
  `makeLenses` attempt to make the accessors it can under existential quantification.\r\n*
  Added `(&~)`.\r\n* _Experimental_ support for parallel builds on GHC 7.8 with `cabal
  install lens -fj`. Due to at last one known issue with GHC, it isn't recommended
  to use this option when rebuilding lens, as a race condition on at least one platform
  has been seen in the wild.\r\n* Added `RoleAnnotations` for GHC 7.8.1. These rule
  out a few user-accessible bottoms that could be caused by creative abuse of the
  new `Coercible` machinery. However, there was no `unsafeCoerce` exposed.\r\n* Removed
  some impossible cases that required unwritable instances from the example doctypes.\r\n\r\n4.0.5\r\n-----\r\n*
  Added `bimapping` to `Control.Lens.Iso`\r\n* Restored correct behavior of `makePrism`
  on types with a single constructor.\r\n* `makeLenses` now generates `Getter`s and
  `Fold`s on universally quantified fields.\r\n\r\n4.0.4\r\n-----\r\n* Made `declareFields`
  work again.\r\n\r\n4.0.3\r\n-----\r\n* Fixed random segfaulting when using `foldMapBy`.\r\n\r\n4.0.2\r\n-----\r\n*
  Properly bundled the modules needed for the properties test suite into the tarball
  for hackage.\r\n\r\n4.0.1\r\n-----\r\n* Typo fixes\r\n* Exporting `Rewrapping` from
  `Control.Lens.Wrapped`.\r\n* Removed the dependency on `cpphs`.\r\n\r\n4.0\r\n----\r\n*
  Added `nearly` to `Control.Lens.Prism`.\r\n* Added `Control.Lens.Empty`, exporting
  `_Empty`.\r\n* We now require `DefaultSignatures`.\r\n* Added `failing` and `ifailing`
  to `Control.Lens.Traversal`.\r\n* Changed the signature of `Data.List.Split.Lens.condensing`
  due to the addition of `DropBlankFields` to `Data.List.Split.CondensePolicy` in
  `split`.\r\n* Simplified `Each`, `Ixed`, and `Contains`. They are no longer indexed.
  The previous design was actively getting in the way of user-defined instances.\r\n*
  Replaced more of our home-grown types with standard ones. They had previously been
  defined to help make more intelligible error messages, but when we switched to using
  `(Contravariant f, Functor f)` instead of `(Gettable f)`, these ceased to really
  help. Now you can define even more `lens`-compatible types (e.g. `Getter` and `Fold`)
  without depending on `lens`.\r\n  * Replaced the use of `Accessor` with `Const`.\r\n
  \ * Replaced the use of `Mutator` with `Identity`.\r\n  * Replaced the use of `Reviewed`
  with `Tagged`.\r\n* Removed the deprecated `Control.Lens.Simple` module.\r\n* Repurposed
  `Control.Lens.Combinators` to re-export `Control.Lens` sans any operators; previous
  residents rehomed to `Control.Lens.Lens`.\r\n* Added `Control.Lens.Operators` to
  export just the operators. Varying your import styles between these supports many
  qualified usage scenarios.\r\n* Simplified `Cons` and `Snoc`. Now they must be a
  `Prism`.\r\n* Simplified `Contains`. This necessitated losing many instancs of `Contains`,
  but makes it much easier and more consistent to use and instantiate.\r\n* Simplified
  the various `AsFoo` types in `Control.Exception.Lens`\r\n* Simplified the types
  in `System.IO.Error.Lens`.\r\n* Merged `lens-aeson` into `lens`.\r\n* We're exiling
  `Control.Lens.Zipper` to a separate package. This will let the design for it iterate
  faster and let us explore the trade-offs between the 3.8 style and the 3.9 style
  of zippers.\r\n* Generalized `alongside`, `inside`, `both`.\r\n* Switched to a new
  `Typeable` version of `reflection` for the harder combinators in `Control.Exception.Lens`.
  This enables us to comply with GHC 7.7's ban on hand-written `Typeable` instances.\r\n*
  Added a `_Show` `Prism`.\r\n* Added `Control.Lens.Extras` for the combinator names
  we don't have the gall to claim outright, but which are consistent with the rest.\r\n*
  Renamed the constructors for `ReifiedLens`, etc. to just be the name of their base
  type.\r\n* Added many many missing instances for `ReifiedFold` and `ReifiedGetter`.
  This permits things like `runFold ((,) <$> Fold (traverse._1) <*> Fold (traverse._2))`
  to be a `Fold`\r\n  and `ReifiedFold` can be used as a `Monad`, `Profunctor`, etc.\r\n*
  Many performance optimizations.\r\n* Switched to `exceptions` from `MonadCatchIO-transformers`\r\n*
  Added types for working with `RelevantFold` and `RelevantTraversal`. These are a
  `Fold` or `Traversal` that always has at least one target. Since `Apply` isn't a
  superclass of `Applicative`, you occasionally need to convert between them, but
  it lets you more readily work with less unsafety.\r\n* Changed `unwrapping` and
  `wrapping` to have the same constructor-oriented order as a `Prism` and renamed
  them t `_Wrapping` and `_Unwrapping` respectively.\r\n* Drastically changed the
  way `_Wrapping` and `_Unwrapping` are built to get much better inference.\r\n* There
  are about 15,000 lines of patches over the last year, so I'm sure we missed a few
  big changes.\r\n\r\n3.10.1 [maintenance release]\r\n------\r\n* Compatibility with
  `base` 4.7\r\n\r\n3.10.0.1 [maintenance release]\r\n--------\r\n* Compatibility
  with `text` 1.0\r\n\r\n3.10\r\n----\r\n* Switched to `bifunctors`, `comonad`, `profunctors`,
  and `semigroupoids` 4.0.\r\n\r\n3.9.2\r\n-----\r\n* Generalized signatures for `throwing`
  and `throwingM`.\r\n\r\n3.9.1\r\n-----\r\n* 'condensingPolicy' was updated to work
  with 'split' 0.2.2\r\n\r\n3.9.0.3\r\n-------\r\n* Bumped dependency on `generic-deriving`
  again.\r\n\r\n3.9.0.2\r\n-------\r\n* Bumped dependency on `generic-deriving` to
  enable building on GHC HEAD.\r\n\r\n3.9.0.1\r\n-------\r\n* Updated the field guide
  image to link to imgur. Sadly the overview haddock and the haddocks are not generated
  in the same directory, so the haddock hook for copying the image only works locally.\r\n\r\n3.9\r\n-----\r\n*
  Changed `Getting` to take 3 arguments instead of 5. If you need the old behavior
  for portability you can use\r\n  `Overloaded (Accessor r) s t a b` instead of `Getting
  r s t a b` and it'll work consistently back through the last few releases.\r\n*
  Added `involuted` to `Control.Lens.Iso`.\r\n* Factored out a common `reversed` definition
  from all the various forms of it around the library and placed it in `Control.Lens.Iso`.\r\n*
  Added `binary`, `octal`, `decimal` and `hex` to `Numeric.Lens`.\r\n* Added `sans`
  to `Control.Lens.At`.\r\n* Improved interoperability:\r\n  * Reimplemented `Gettable`
  as an alias for `Contravariant` and `Functor` together to derive `Getter` and `Fold`.
  This means you can now\r\n    implement a `Getter` or `Fold` with only a Haskell
  98 dependency (`contravariant`).\r\n  * Removed `Reviewable`. We now use `Bifunctor`
  and `Profunctor` together to derive `Review`. This means you can now implement a
  `Review`\r\n    with Haskell 98 dependencies (`profunctors` and `bifunctors`).\r\n
  \ * These changes enables more types to be defined without incurring a dependency
  on the `lens` package.\r\n\r\n3.8.7.0-3.8.7.3 [maintenance releases]\r\n-----\r\n*
  Fixes to dependencies and pragmas.\r\n\r\n3.8.6 [maintenance release]\r\n-----\r\n*
  Fixed an issue with `DefaultSignatures` being used outside of the appropriate `#ifdef`
  that caused compilation issues on GHC 7.0.2.\r\n* Generalized the signature of `prism'`\r\n*
  Added `\\_Void` and `only` to `Control.Lens.Prism` and `devoid` to `Control.Lens.Lens`.\r\n*
  Added `\\_Nothing` to `Control.Lens.Prism`.\r\n* Added `devoid` and `united` to
  `Control.Lens.Lens`.\r\n\r\n3.8.5\r\n-----\r\n* Fixed more sporadic issues in doctests,
  caused by carrying flags from `$setup` between modules.\r\n\r\n3.8.4\r\n-----\r\n*
  Renamed `strippingPrefix` to `prefixed`, `strippingSuffix` to `suffixed`. Left the
  old names as deprecated aliases.\r\n* Fixed issues with the test suite caused by
  `doctests` carrying flags from the `$setup` block between modules.\r\n* Benchmarks
  now use `generic-deriving` rather than `ghc-prim` directly, like the rest of the
  package.\r\n* Added `Generics.Deriving.Lens`, which is now simply re-exported from
  `GHC.Generics.Lens`.\r\n\r\n3.8.3\r\n-----\r\n* Added `strippingSuffix` and `stripSuffix`
  to `Data.Data.Lens`\r\n* Added `unpackedBytes` and `unpackedChars` to `Data.ByteString.*.Lens`\r\n*
  Added `unpacked` to `Data.Text.*.Lens`\r\n* Added `(#)` as an infix form of `review`
  to ease using a `Prism` like a smart constructor in `Control.Lens.Review`.\r\n\r\n3.8.2\r\n-----\r\n*
  Added a notion of `Handleable(handler, handler_)` to `Control.Exception.Lens` to
  facilitate constructing a `Handler` from an arbitrary `Fold` or `Prism`.\r\n* Added
  a notion of `Handler` and `catches` to and `Control.Monad.Error.Lens` to mirror
  the `Control.Exception` and `Control.Monad.CatchIO` constructions.\r\n* Added additional
  doctests and documentation.\r\n* Improved error messages and support for types with
  arguments in `makeFields`.\r\n\r\n3.8.1\r\n-----\r\n* Fixed a bug in `makeFields`
  in hierarchical modules.\r\n\r\n3.8.0.2\r\n-------\r\n* Fixed an issue with running
  the `doctests` test suite when an older version of `semigroups` is installed.\r\n\r\n3.8\r\n---\r\n*
  Overall:\r\n  * Replaced each of the different `SimpleFoo` type aliases with `Foo'`
  throughout. The various `Simple` aliases can still be found in `Control.Lens.Simple`
  but are now deprecated.\r\n  * Made sweeping changes to `Iso` and `Prism` and `Indexed`
  lenses internally. They are now based on `profunctors`. This affects how you use
  `indexed` in the resulting code and dramatically changed the meaning of `Overloaded`.\r\n
  \ * Generalized combinators to pass through indices unmodified wherever possible
  and added indexed variants to existing combinators. There are hundreds of these
  changes and they would swamp this list.\r\n* `Control.Exception.Lens`\r\n  * This
  module was created to add combinators and prisms that make it possible to work with
  GHC's extensible exceptions and monad transformer stacks more easily. There are
  knock-on changes in `Data.Dynamic.Lens`, `System.Exit.Lens`, and `System.IO.Error.Lens`.\r\n*
  `Control.Lens.At`\r\n  * Moved `At(at)` and `Contains(contains)` and factored out
  `Ixed(ix)`.\r\n  * Deprecated `_at` and `resultAt`.\r\n  * Removed various `ordinal`
  and `ix` combinators, which are subsumed by `Ixed(ix)`.\r\n* `Control.Lens.Cons`\r\n
  \ * Consoldiated the various `_head`, `_tail`, `_init` and `_last` traversals that
  were scattered around the place into a pair of `Cons` and `Snoc` classes that provide
  `_Cons` and `_Snoc` prisms respectively, and combinators that build on top.\r\n*
  `Control.Lens.Each`\r\n  * Generalized the signature of `Each` to permit it to provide
  an `IndexedSetter` for `((->) e)`.\r\n  * `Each` now uses an `Index` type family
  that is shared with `At`, `Ixed` and `Contains` to indicate these operations are
  related.\r\n* `Control.Lens.Equality`\r\n  * Added as a stronger form of `Iso` that
  can be used to safely cast.\r\n  * Added the adverb `simply`, which can be used
  to simplify the types of most combinators in the library so they only take a simple
  lens, simple traversal, etc as their first argument instead. e.g. `simply view`
  forces `a ~ b`, `s ~ t` in the argument to `view`.\r\n* `Control.Lens.Fold`\r\n
  \ * Added `foldr1Of'` and `foldl1Of'`.\r\n  * Added `has` and `hasn't`.\r\n* `Control.Lens.Indexed`\r\n
  \ * The various indexed combinators for each type were distributed to their respective
  modules. This module grew to encompass the remaining index-specifics.\r\n  * Added
  `index` and `indices`, and removed `iwhere` and `iwhereOf`. Use `itraversed.indices
  even` and `bar.indices (>3)` instead.\r\n* `Control.Lens.Internal`\r\n  * This module
  was exploded into more manageable component modules.\r\n* `Control.Lens.Iso`\r\n
  \ * `Strict(strict)` is now a `Simple Iso`.\r\n  * Added `magma` and `imagma` which
  can be used to provide a 'debugging view' of a `Traversal`.\r\n* `Control.Lens.Lens`\r\n
  \ * Restructuring split this module out from `Control.Lens.Type` and merged the
  contents `Control.Lens.IndexedLens`.\r\n* `Control.Lens.Level`\r\n  * This module
  was created to provide the breadth-first-search Traversals `levels` and `ilevels`
  which can be used to do (optionally depth-limited) breadth-first searches through
  arbitrary traversals reaching all leaves at finite depth in finite time. To use
  these in full accordance with the laws you should restrict yourself to commutative
  operations and finite containers, but they are useful even in the absence of these
  properties.\r\n* `Control.Lens.Loupe`\r\n  * In the interest of consistency, the
  `Loupe` alias has been deprecated in favor of `ALens`.\r\n  * `Loupe` (and `ALens`)
  are now defined in terms of `Pretext` rather than `Context`. This permits them to
  be cloned at a reduced cost reducing the call for `ReifiedLens`.\r\n* `Control.Lens.Operators`\r\n
  \ * Added this module for users who insist on qualified use, but want access to
  the operators. They can `import qualified Control.Lens as Lens` and `import Control.Lens.Operators`
  unqualified.\r\n* `Control.Lens.Prism`\r\n  * Added `prism'` to construct `SimplePrism`s.\r\n*
  `Control.Lens.Reified`\r\n  * Consolidated the various `ReifiedFoo` definitions
  into one module.\r\n* `Control.Lens.Representable`\r\n  * This module was removed.
  Its functionality may be split out into a separate package, but currently the `linear`
  package exports is own `Linear.Core` module to provide this functionality. It was
  taking lots of useful names for little functionality and didn't feel like the rest
  of the API.\r\n* `Control.Lens.Review`\r\n  * This module now factors the `review`
  functionality out of `Prism` and exposes `unto`, which is to `review` what `to`
  is to `view`.\r\n* `Control.Lens.Setter`\r\n  * Added `contramapped` and `argument`
  for mapping over inputs.\r\n* `Control.Lens.Simple`\r\n  * Removed the infix lens
  aliases and repurposed the module to house the now deprecated `SimpleFoo` type aliases,
  which were replaced universally with `Foo'`.\r\n* `Control.Lens.TH`\r\n  * `makeLenses`
  now generates `Lens'` and `Traversal'` where appropriate\r\n  * Added `makePrisms`
  as a generalized `makeIso` that automatically generates a `Prism` for each constructor.
  `makePrisms` generates names with an `_Foo` convention. This was consolidated upon
  throughout the library to reduce namespace conflicts between prisms and lenses.\r\n
  \ * Added `makeFields`, which generates classes for each individual field in a data
  type.\r\n  * Added `makeWrapped`, which automatically generates a `Wrapped` instance
  for a newtype.\r\n* `Control.Lens.Type`\r\n  * This module was repurposed to provide
  a single home for all the standard lens-like type aliases used when producing lenses.
  You still need to go to their respective modules to find the types for consuming
  lens-likes if you want to generate your own lens combinators\r\n* `Control.Lens.Wrapped`\r\n
  \ * Added `wrapped'` and `unwrapped'` for scenarios where you need the help with
  type inference.\r\n* `Control.Lens.Zipper`\r\n  * Converted `Zipper` to walk a magma
  based on the original structure and to use indices from indexed traversals when
  restoring from tape. This also means that when zipping around within a balanced
  structure with ascending keys `moveTo` can operate in logarithmic time, but required
  changing the `Zipper` type to add the index type.\r\n* `Data.Bits.Lens`\r\n  * Added
  `byteAt`.\r\n* `Data.ByteString.Lens`\r\n  * `Data.ByteString.Lazy.Lens` now uses
  `Int64`-based indexing.\r\n  * The `Traversal` for strict `ByteStrings` now construct
  a balanced tree up to a given grain size. This permits zipper based seeking to operate
  in logarithmic time and speeds up many traversals.\r\n* `Numeric.Lens`\r\n  * Created.
  `base` shows and reads integers at base-2 through base-36. `integral` can be used
  as a safe `fromInteger`/`toInteger`.\r\n\r\n3.7.6 [maintenance release]\r\n-----\r\n*
  Fixed an issue with the `Complex` `Each` instance.\r\n\r\n3.7.5 [maintenance release]\r\n-----\r\n*
  Fixed an errant `LANGUAGE` pragma\r\n\r\n3.7.4 [maintenance release]\r\n-----\r\n*
  Backported the API for `ALens` and `ALens'` to support `snap` builds on old platforms.\r\n\r\n3.7.3
  [maintenance release]\r\n-----\r\n* Removed my intra-package dependency upper bounds
  for my own packages. In particular this enables us to work with `semigroups` 0.9.\r\n*
  Switched to `transformers-compat` to avoid having unbuilding modules at the top
  of the documentation, and to ease 3rd party compatibility.\r\n* Updated `Setup.lhs`
  to be compatible with Cabal 1.17\r\n\r\n3.7.2 [maintenance release]\r\n-----\r\n*
  Bug fix for `Magnify`. It was missing functional dependencies to determine its `k`
  parameter from `m` or `n`.\r\n\r\n3.7.1.2 [maintenance release]\r\n-------\r\n*
  Made the doctest test suite hide all but the exact versions of packages used to
  build this package to avoid problems with complicated user environments.\r\n* Removed
  doctests based on `:t` as they are fragile and break across GHC versions.\r\n* Fixed
  GHC 7.0.4 compatibility by guarding `DefaultSignatures` in `Control.Lens.Each`.\r\n\r\n3.7.1.1
  [maintenance release]\r\n-------\r\n* Removed tests that will (likely) fail in the
  presence of `hashable` 1.2\r\n\r\n3.7.1\r\n-----\r\n* Added `preuse`, `preuses`
  to `Control.Lens.Fold`\r\n* Added `Each(each)` to `Control.Lens.Each` for indexed
  traversal of potentially monomorphic containers.\r\n* Added `indexing64` and `traversed64`
  for help with large containers.\r\n* Generalized the type signature of `choosing`.\r\n*
  Exported `unwrapped` from `Control.Lens.Wrapped`.\r\n* Support for `hashable` 1.2\r\n*
  Added `(??)` to `Control.Lens.Combinators`.\r\n\r\n3.7.0.2\r\n-------\r\n* Fixed
  flagging for Safe Haskell.\r\n* Fixed examples.\r\n* Cleaned up the statement of
  the Prism laws.\r\n\r\n3.7.0.1\r\n-------\r\n* Corrected bounds for hashable.\r\n*
  Fixed compatibility with Haskell Platform 2011.4.0.0 -- you may have to install
  with --constraint=\"transformers = 0.2.2.0\" to avoid getting new mtl and transformer
  versions installed.\r\n\r\n[3.7](https://github.com/ekmett/lens/issues?milestone=11&page=1&state=closed)\r\n-----\r\n*
  Renamed `Projection` to `Prism`.\r\n* Implemented a complete redesign of the way
  `Iso` and `Prism` are handled internally. Any `Iso` can now be used as a `Prism`.\r\n*
  The `isos` combinator is no longer required. `iso` can now be used to construct
  an `Iso`.\r\n* Changes to the signature of `from` and `under` were necessitated
  by the new design.\r\n* Added `Control.Lens.Wrapped` providing a canonical isomorphism
  for newtypes.\r\n* Repurposed `ala` to be closer to the original design in `newtype`,
  but added `au` and `alaf`.\r\n* Added `_magnitude`, `_phase` and `_conjugate` to
  `Data.Complex.Lens`. Renamed other lenses for consistency: `_realPart`, `_imagPart`,
  `_polar`.\r\n* Promoted `_left` and `_right` to prisms and moved them to `Control.Lens.Prism`.\r\n*
  Generalized `view` and `views` to subsume the old functionality of `peruse` and
  `peruses`.\r\n* Generalized `review` and `reviews` to both return a `MonadReader`
  and to work on a `Projection`.\r\n* Added `view'`/`views'` and `use'`/`uses'` for
  `Simple` access to the environment/state.\r\n* Added `set'`, a `Simple` version
  of `set`.\r\n* Added `reuse` : `use` :: `review` : `view` and `reuses` : `uses`
  :: `reviews` : `views` for working a `Projection` from the current `MonadState`.\r\n*
  Removed many isomorphisms for various newtypes. `_const`, `identity`, `_sum`, etc.
  Use `wrapping Const`, `wrapping Identity`, etc.\r\n* Removed `Data.Monoid.Lens`
  now that its newtypes are instances of `Wrapped`, exporting the (`<>=`)-variants
  from `Control.Lens.*`.\r\n* Renamed `via` to `cloneIso` for consistency.\r\n* Moved
  `Indexed(..)` to `Control.Lens.Classes`.\r\n* Renamed `index` to `indexed` to reduce
  conflicts with third-party libraries.\r\n* Added `curried` and `uncurried` to `Control.Lens.Iso`.\r\n*
  Added `Strict(strict)` for ad hoc overloading of conversions between strict and
  lazy variants of `ByteString` and `Text`.\r\n* Bug fixes for `tugTo` and `jerkTo`.\r\n*
  These no longer traverse in the wrong direction: `scanl1Of`, `scanr1Of`, `mapAccumLOf`,
  and `mapAccumROf`.\r\n* Added `anon` to `Control.Lens.Iso`.\r\n* Generalized the
  types of the `Control.Lens.Zipper` combinators to work with other MonadPlus instances.\r\n*
  Added `withins` to `Control.Lens.Zipper` now that they can work better with [].\r\n*
  Added `singular` and `unsafeSingular` to `Control.Lens.Traversal` to assert a `Traversal`
  is a `Lens`, a `Fold` is a `Getter` or a `MonadicFold` is an `Action`.\r\n* Generalized
  `sequenceAOf_`'s type to match `sequenceA_`.\r\n* Renamed `up`/`down`/`left`/`right`
  to `upward`/`downward`/`leftward`/`rightward` to reduce conflicts -- in particular
  with `Control.Arrow`.\r\n* Readded `leftmost` and `rightmost` due to the verbosity
  of `farthest leftward`/`farthest rightward`.\r\n* Added `preview`/`previews`/`firstOf`
  and deprecated `headOf`.\r\n* Added `iview`/`iviews`/`iuse`/`iuses` to `Control.Lens.IndexedGetter`.\r\n*
  We've generalized the type of Bazaar and provided generalized variants of `partsOf`,
  etc. that used it.\r\n\r\n3.6.0.4 [maintenance release]\r\n-------\r\n* Added support
  for `test-framework` 0.8\r\n\r\n3.6.0.3 [maintenance release]\r\n-------\r\n* Added
  support for `test-framework` 0.7\r\n\r\n3.6.0.2 [maintenance release]\r\n-------\r\n*
  Added more explicit dependencies to the doctest suite.\r\n* Disabled the 'expected
  failure' quickcheck tests that occasionally would fail with internal QuickCheck
  errors.\r\n\r\n3.6.0.1 [maintenance release]\r\n-------\r\n* Added explicit dependency
  on containers and unordered-containers to the doctest suite\r\n\r\n[3.6](https://github.com/ekmett/lens/issues?milestone=9&state=closed)\r\n---\r\n*
  Added `upon` (along with variants of it) to `Data.Data.Lens`, which can be used
  to generate a `Traversal` from a field accessor or any function that returns, unmodified,\r\n
  \ a single field that would be visited by `template`.\r\n* Added some missing `examples/`
  files to the distribution.\r\n* Renamed `Data.Bits.Lens.traverseBits` to `bits`.\r\n*
  Removed `(^!?)`, which was an alias for `(^?!)`.\r\n* Removed the need for `Trustworthy`
  by changing the implementation of `coerce` for `BazaarT`.\r\n* Moved BazaarT to
  `Control.Lens.Internal`.\r\n* Added `(<&>)` to `Control.Lens.Combinators`.\r\n*
  `element` and `elementOf` are now indexed traversals rather than lenses and have
  moved to `Control.Lens.IndexedTraversal`. This both fixes their former partiality
  and lets you use chain indexed combinators with them.\r\n* Added `elements` and
  `elementsOf` as indexed traversals for ordinal indexing into regular traversals
  that generalize `element` and `elementOf`.\r\n* Renamed `Data.Complex.Lens.traverseComplex`
  to `complex`.\r\n* Changed `Data.Complex.Lens.polarize` to a `Simple Iso`, due to
  the `RealFloat` constraint causing inference problems.\r\n* Renamed `traverseLeft`
  and `traverseRight` to `_left` and `_right` respectively.\r\n* Renamed `traverseSlice`,
  `traverseFrom`, and `traverseTo` in `Data.Sequence.Lens` to `sliced`, `slicedFrom`,
  and `slicedTo` respectively.\r\n* Renamed `traverseAt` to `_at` in `Control.Lens.IndexedTraversal`.\r\n*
  Renamed `traverseArray` to `_array` in `Data.Array.Lens`.\r\n* Renamed and made
  the combinators in `Control.Lens.Zipper` more compositional to reduce third-party
  naming conflicts down to just `left` and `right`.\r\n* Renamed `&=` and `|=` to
  `.&.=` and `.|.=` for consistency, mutatis mutandis their related operations.\r\n*
  Added a `Plated` instances for `Language.Haskell.TH` types.\r\n* Renamed `atIndex`
  and `atIndices` in `Data.Vector.Lens` and `Data.Vector.Generic.Lens` to `ordinal`
  and `ordinals` to match `Data.Sequence.Lens`\r\n\r\n3.5.1\r\n-----\r\n* Improved
  SafeHaskell inference.\r\n\r\n[3.5](https://github.com/ekmett/lens/issues?milestone=8&state=closed)\r\n---\r\n*
  Fixed a potential SafeHaskell issue where a user could use `undefined` to derive
  `unsafeCoerce`. You now have to import an explicitly\r\n  Unsafe module and create
  an instance of `Trustworthy` for your type to cause this behavior, so if you do,
  it's on your head, not mine. :)\r\n* Renamed `EvilBazaar` to `BazaarT`.\r\n* Moved
  a lot of internals around. Most notably, `Gettable`, `Settable` and `Effective`
  have moved to `Control.Lens.Classes`.\r\n* Exposed `partsOf'` and `unsafePartsOf'`
  in `Control.Lens.Traversal` to reduce reliance on `BazaarT` in `Control.Lens.Zipper`\r\n\r\n[3.4](https://github.com/ekmett/lens/issues?milestone=7&state=closed)\r\n---\r\n*
  Renamed `(%)` to `(&)` and `(^%)` to `(^&)`. This avoids the conflict with `Data.Ratio`,
  which was our highest priority conflict with a third party library.\r\n* Switched
  to a more liberal type for `ignored`\r\n* Removed some \"`isplitting`\" bad combinators
  from `Control.Lens.IndexedFold`.\r\n* Made `indexed`, `taking`, and `dropping` and
  `elementOf` lazier and capable of dealing with infinite traversals and infinite
  folds.\r\n* Improved `Indexing` to support infinite traversals and folds.\r\n* Removed
  some of the more redundant combinators from `Control.Lens.Plated`, which already
  had existing aliases in the rest of the traversal API.\r\n* Moved `partsOf`, `holesOf`,
  and `elementOf` into `Control.Lens.Traversal`.\r\n* Renamed `query` to `peruse`
  and `queries` to `peruses`. These are much less contentious names,\r\n  both contain
  `use` in their name for analogy to `use` and `uses` and the word is about reading.\r\n*
  Simpler `simple`.\r\n* Added `enum` and `non` to `Control.Lens.Iso`.\r\n* Added
  `(^?!)` to `Control.Lens.Fold` for unsafe access to the head of a `Fold`.\r\n* Changed
  `_head`, `_tail`, `_init` and `_last` to traversals in `Data.List.Lens` and `Data.Sequence.Lens`.\r\n*
  Eliminated `traverseHead`, `traverseTail`, `traverseInit` and `traverseLast`.\r\n*
  `partsOf` and `unsafePartsOf` can now also be applied to a `Fold` yielding a `Getter`
  or to a `MonadicFold` yielding an `Action`.\r\n\r\n3.3\r\n---\r\n* Redefined `simple`
  and moved it to `Control.Lens.Iso`. Instead of using `simple l` you can now compose
  `l.simple` or `simple.l` providing more nuanced control and a more compositional
  API.\r\n* Moved the various `foo#` combinators used to emit cleaner core into an
  unexported module, `Control.Lens.Unsafe`. This removes `MagicHash` from the public
  API.\r\n* Removed the `bazaar#` and `runBazaar#` coercions that caused issues on
  GHC HEAD.\r\n* Changed the default definition of `plate` to `uniplate` from `ignored`.\r\n*
  Added `Data.Vector.Lens` and instances for `Data.Vector`.\r\n* Added support for
  the `split` package, which is now part of the Haskell platform.\r\n* Removed redundant
  `Data.List.traverseList`. Use `itraversed` or `traverse` instead.\r\n* Moved `(:<->)`
  to `Control.Lens.Simple`.\r\n* Fixed a bug in `Control.Lens.TH` that was causing
  `makeIso` not to work.\r\n* Added `lifted` to `Control.Lens.Setter` for mapping
  over monads.\r\n* Added `beside` to `Control.Lens.Traversal`.\r\n* Removed the operators
  from `Data.List.Lens`, they broke the overall pattern of the rest of the API, and
  were terrible clutter.\r\n* Fixed a bug that caused `resultAt` to give wrong answers
  most of the time.\r\n* Changed `resultAt` to an `IndexedLens` and moved it to `Control.Lens.IndexedLens`\r\n*
  Changed `ignored` to an `IndexedTraversal` and moved it to `Control.Lens.IndexedTraversal`\r\n*
  We've relinquished the name `value`.\r\n\r\n3.2\r\n---\r\n* Made `elementOf` lazier
  and moved it from `Control.Lens.Traversal` to `Control.Lens.Plated`.\r\n* Made `holesOf`
  and `partsOf` lazier to deal with infinite structures.\r\n* Resolved issue #75.
  We now generate nicer core for most `Setter` and `Fold` operations, and some others.\r\n*
  Made lenses for field access like `_1`, `_2`, etc. lazier.\r\n* Added `Control.Lens.Loupe`,
  which provides a limited form of `Lens` that can be read from and written to and
  which can compose\r\n  with other lenses, but can also be returned in a list or
  as a monadic result, but cannot be used directly for most combinators\r\n  without
  cloning it first. It is easier to compose than a `ReifiedLens`, but slightly slower.\r\n*
  Moved (`:=>`) and (`:->`) into `Control.Lens.Simple`, which is not exported by `Control.Lens`
  by default to reduce name conflicts with third party libraries.\r\n\r\n3.1\r\n---\r\n*
  Simplified the type of `filtered`, so that it can be composed with other folds rather
  than be parameterized on one. Included the caveat that the new `filtered` is still
  not a legal `Traversal`, despite seeming to compose like one.\r\n* Renamed `ifiltered`
  to `ifiltering`, and while it still must take an indexed lens-like as an argument,
  I included a similar caveat about the result not being a legal `IndexedLens` when
  given an `IndexedLens`. The function was renamed because its signature no longer
  lined up with the new `filtered` and the gerundive '-ing' suffix has come to indicate
  an operator that transformers another lens/traversal/etc. into a new one.\r\n* Added
  `taking` and `dropping` to `Control.Lens.Traversal`.\r\n\r\n3.0.6\r\n-----\r\n*
  Alpha-renamed all combinators to a new scheme. Instead of `Foo a b c d`, they now
  follow `Foo s t a b`. This means that you don't need to alpha rename everything
  in your head to work through the examples, simplifies exposition, and uses s and
  t for common state monad parameters. Thanks go to Shachaf Ben-Kiki for the grunt
  work of slogging through hundreds of definitions by hand and with regular expressions!\r\n*
  Restored lenses to `Trustworthy` status so they can be used with Safe Haskell once
  more.\r\n\r\n3.0.5\r\n-----\r\n* Fixed a bug in `rights1` and `lefts1` in `Control.Lens.Zipper`
  which would cause them to loop forever when given a 0 offset.\r\n\r\n3.0.4\r\n-----\r\n*
  Added `?~`, `<?~`, `?=` and `<?=` to `Control.Lens.Setter` for setting the target(s)
  of a Lens to `Just` a value. They are particularly useful when combined with `at`.\r\n\r\n3.0.3\r\n-----\r\n*
  Refined the behavior of `substType` in `Control.Lens.TH` to match the behavior of
  `typeVarsEx` when moving under binders.\r\n\r\n\r\n3.0.2\r\n-----\r\n* Added `generateSignatures`
  option to `Control.Lens.TH` to allow the end user to disable the generation of type
  signatures for the\r\n  template-haskell generated lenses. This lets the user supply
  hand-written haddocks and more restricted signatures.\r\n\r\n3.0.1\r\n-----\r\n*
  Added `Control.Lens.Type.simple`.\r\n\r\n[3.0](https://github.com/ekmett/lens/issues?milestone=6&state=closed)\r\n---\r\n*
  Added `Control.Lens.Zipper`.\r\n* Added `<<~`, a version of `<~` that supports chaining
  assignment.\r\n* Added `:->`, `:=>`, and `:<->` as type operator aliases for `Simple
  Lens`, `Simple Traversal`, and `Simple Iso`  respectively.\r\n\r\n[2.9](https://github.com/ekmett/lens/issues?milestone=5&state=closed)\r\n---\r\n*
  Added `<<%~`, `<<.~`, `<<%=` and `<<.=` for accessing the old values targeted by
  a `Lens` (or a summary of those targeted by a `Traversal`)\r\n* Renamed `|>` to
  `%`, as `%~` is the lensed version of `%`, and moved it to `Control.Lens.Getter`
  along with a version `^%` with tighter\r\n  precedence that can be interleaved with
  `^.`\r\n* Upgraded to `doctest` 0.9, which lets us factor out common `$setup` for
  our doctests\r\n* Renamed `merged` to `choosing`. Added a simpler `chosen` operation
  to mirror `both`.\r\n* Added `Control.Lens.Projection`\r\n* Renamed `traverseException`
  to `exception` and `traverseDynamic` to `dynamic`, upgrading them to use `Projection`.\r\n*
  `makeClassy` now places each generated `Lens` or `Traversal` inside the class it
  constructs when possible.\r\n  This makes it possible for users to just export `HasFoo(..)`,
  rather than have to enumerate each lens in\r\n  the export list. It can only do
  that if it creates the class. If the `createClass` flag is disabled, then\r\n  it
  will default to the old behavior.\r\n* Added `performs` to `Control.Lens.Action`
  to mirror `views` in `Control.Lens.Getter`.\r\n\r\n[2.8](https://github.com/ekmett/lens/issues?milestone=4&state=closed)\r\n---\r\n*
  Restored compatibility with GHC 7.2. This required a major version bump due to making
  some MPTC-based default signatures conditional.\r\n\r\n2.7.0.1\r\n-------\r\n* Added
  the missing `Control.Lens.Combinators` to exported-modules! Its absence was causing
  it not to be included on hackage.\r\n\r\n[2.7](https://github.com/ekmett/lens/issues?milestone=3&state=closed)\r\n---\r\n*
  Generalized the signature of `Getting`, `Acting` and `IndexedGetting` to help out
  with the common user code scenario of needing to read\r\n  and then write to change
  types.\r\n* Documentation cleanup and additional examples.\r\n* Renamed `au` to
  `ala`, introducing further incompatibility with the `newtype` package, but reducing
  confusion.\r\n* Removed need for `Data.Map.Lens` and `Data.IntMap.Lens` by adding
  `TraverseMin` and `TraverseMax` to `Control.Lens.IndexedTraversal`.\r\n* Flipped
  fixity of `~:` and `<~:`\r\n* Added `++~`, `++=`, `<++~` and `<++=` to Data.List.Lens
  in response to popular demand.\r\n* Added `|>`, `<$!>` and `<$!` to `Control.Lens.Combinators`,
  which exports combinators that are often useful in lens-based code, but that\r\n
  \ don't strictly involve lenses.\r\n* Added an HUnit-based test suite by @orenbenkiki\r\n\r\n2.6.1\r\n-----\r\n*
  Fixed bugs in `Traversal` code-generation.\r\n\r\n[2.6](https://github.com/ekmett/lens/issues?milestone=2&state=closed)\r\n---\r\n*
  Added build option `-f-inlining` to facilitate building with the various TH 2.8
  versions used by GHC 7.6 and HEAD.\r\n* Added build option `-f-template-haskell`
  for testing without template haskell. (Users should be able to assume TH is enabled;
  use this only for testing!)\r\n* Added support for generating a `Traversal` rather
  than a `Lens` when multiple fields map to the same name or some constructors are
  missing a field.\r\n* Removed `_` from the lens names in `System.FilePath.Lens`.\r\n*
  Added `iwhere`, `withIndices`, `withIndicesOf`, `indices` and `indicesOf` to ease
  work with indexed traversals\r\n* Added `assign` as an alias for `(.=)` in `Control.Lens.Setter`.\r\n*
  Added `~:`, `=:`, `<~:` and `<=:` to `Data.List.Lens`\r\n\r\n[2.5](https://github.com/ekmett/lens/issues?milestone=1&state=closed)\r\n---\r\n*
  Added `Control.Lens.Plated`, a port of Neil Mitchell's `uniplate` that can be used
  on any `Traversal`.\r\n* Added `Data.Data.Lens` with smart traversals that know
  how to avoid traversing parts of a structure that can't contain a given type.\r\n*
  Added `Data.Typeable.Lens` with `_cast` and `_gcast` like `traverseData`\r\n* Renamed
  `IndexedStore` to `Context` now that it is used in user-visible locations, and since
  I also use it as `uniplate`'s notion of a context.\r\n* Renamed `Kleene` to `Bazaar`
  -- \"a bazaar contains a bunch of stores.\"\r\n* Added `Comonad` instances for `Context`
  and `Bazaar`, so we can use stores directly as the notion of an editable context
  in uniplate\r\n* Compatibility with both sets of template haskell quirks for GHC
  7.6.1-rc1 and the GHC 7.6.1 development head.\r\n* Renamed `children` to `branches`
  in `Data.Tree.Lens`.\r\n* Added `At` and `Contains` to `Control.Lens.IndexedLens`.\r\n*
  Added `FunctorWithIndex`, `FoldableWithIndex`, and `TraversableWithIndex` under
  `Control.Lens.WithIndex`\r\n* Added support for `unordered-containers`.\r\n\r\n2.4.0.2\r\n-------\r\n*
  GHC 7.6.1 development HEAD compatibility (but broke 7.6.1-rc1)\r\n\r\n2.4.0.1\r\n-------\r\n*
  Haddock cleanup\r\n\r\n2.4\r\n-----\r\n* Added the indexed `Kleene` store to `Control.Lens.Internal`\r\n*
  Moved `Gettable`, `Accessor`, `Settable` and `Mutator` to `Control.Lens.Internal`\r\n*
  Added `cloneTraversal` to `Control.Lens.Traversal`\r\n* Renamed `clone` to `cloneLens`
  in `Control.Lens.Type`\r\n* Generalized the type of `zoom` to subsume `focus`.\r\n*
  Removed `Focus(..)` from `Control.Lens.Type`.\r\n* Factored out `Control.Lens.Isomorphic`.\r\n*
  Moved many private types to `Control.Lens.Internal`\r\n* Added `conFields` to `Language.Haskell.TH.Lens`.\r\n*
  Added `System.FilePath.Lens`.\r\n\r\n2.3\r\n---\r\n* Added missing `{-# INLINE #-}`
  pragmas\r\n* Renamed `meanwhile` to `throughout` in `Control.Parallel.Strategies.Lens`\r\n*
  Added `Magnify` to `Control.Lens.Getter`.\r\n* Added `Zoom` to `Control.Lens.Type`.\r\n\r\n2.2\r\n---\r\n*
  Added `<&=`, `<&~`, `<|=`, and `<|~`\r\n* Moved `<>~`, `<<>~`, `<>=`, and `<<>=`
  to `Data.Monoid.Lens`\r\n* Template Haskell now uses eager binding to avoid adding
  dependencies.\r\n\r\n2.1\r\n---\r\n* Renamed `adjust` to `over`\r\n* Added `au`,
  `auf` and `under`\r\n* Added `Data.Monoid.Lens`\r\n* Increased lower dependency
  bound on `mtl` for cleaner installation.\r\n"
basic-deps:
  semigroupoids: '>=5.0.1 && <7'
  exceptions: '>=0.8.2.1 && <1'
  free: '>=5.1.5 && <6'
  bytestring: '>=0.10.4.0 && <0.12'
  these: '>=1.1.1.1 && <1.3'
  reflection: '>=2.1 && <3'
  indexed-traversable-instances: '>=0.1 && <0.2'
  base: '>=4.9 && <5'
  comonad: '>=5.0.7 && <6'
  indexed-traversable: '>=0.1 && <0.2'
  unordered-containers: '>=0.2.10 && <0.3'
  assoc: '>=1.0.2 && <1.2'
  text: '>=1.2.3.0 && <2.1'
  distributive: '>=0.5.1 && <1'
  strict: '>=0.4 && <0.6'
  kan-extensions: '>=5 && <6'
  filepath: '>=1.2.0.0 && <1.5'
  array: '>=0.5.0.0 && <0.6'
  base-orphans: '>=0.5.2 && <1'
  th-abstraction: '>=0.4.1 && <0.6'
  tagged: '>=0.8.6 && <1'
  containers: '>=0.5.5.1 && <0.7'
  bifunctors: '>=5.5.7 && <6'
  ghc-prim: -any
  contravariant: '>=1.4 && <2'
  mtl: '>=2.2.1 && <2.4'
  hashable: '>=1.2.7.0 && <1.5'
  transformers: '>=0.5.0.0 && <0.7'
  parallel: '>=3.2.1.0 && <3.3'
  template-haskell: '>=2.11.1.0 && <2.21'
  call-stack: '>=0.1 && <0.5'
  transformers-compat: '>=0.5.0.4 && <1'
  profunctors: '>=5.5.2 && <6'
  vector: '>=0.12.1.2 && <0.14'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
- '1.1'
- 1.1.1
- '1.2'
- '1.3'
- 1.3.1
- '1.4'
- 1.4.1
- '1.5'
- '1.6'
- '1.7'
- 1.7.1
- '1.8'
- '1.9'
- 1.9.1
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- 2.4.0.2
- '2.5'
- '2.6'
- 2.6.1
- '2.7'
- 2.7.0.1
- '2.8'
- '2.9'
- '3.0'
- 3.0.1
- 3.0.2
- 3.0.3
- 3.0.4
- 3.0.5
- 3.0.6
- '3.1'
- '3.2'
- '3.3'
- '3.4'
- '3.5'
- 3.5.1
- '3.6'
- 3.6.0.1
- 3.6.0.2
- 3.6.0.3
- 3.6.0.4
- '3.7'
- 3.7.0.1
- 3.7.0.2
- 3.7.1
- 3.7.1.1
- 3.7.1.2
- 3.7.2
- 3.7.3
- 3.7.4
- 3.7.5
- 3.7.6
- '3.8'
- 3.8.0.1
- 3.8.0.2
- 3.8.1
- 3.8.2
- 3.8.3
- 3.8.4
- 3.8.5
- 3.8.6
- 3.8.7
- 3.8.7.1
- 3.8.7.2
- 3.8.7.3
- '3.9'
- 3.9.0.1
- 3.9.0.2
- 3.9.0.3
- 3.9.1
- 3.9.2
- '3.10'
- 3.10.0.1
- 3.10.1
- 3.10.2
- 3.10.3
- '4.0'
- 4.0.1
- 4.0.2
- 4.0.3
- 4.0.4
- 4.0.5
- 4.0.6
- 4.0.7
- '4.1'
- 4.1.1
- 4.1.2
- 4.1.2.1
- '4.2'
- '4.3'
- 4.3.1
- 4.3.2
- 4.3.3
- '4.4'
- 4.4.0.1
- 4.4.0.2
- '4.5'
- '4.6'
- 4.6.0.1
- '4.7'
- 4.7.0.1
- '4.8'
- '4.9'
- 4.9.1
- '4.10'
- '4.11'
- 4.11.1
- '4.12'
- 4.12.1
- 4.12.2
- 4.12.3
- '4.13'
- 4.13.1
- 4.13.2
- 4.13.2.1
- '4.14'
- '4.15'
- 4.15.1
- 4.15.2
- 4.15.3
- 4.15.4
- '4.16'
- 4.16.1
- '4.17'
- 4.17.1
- '4.18'
- 4.18.1
- '4.19'
- 4.19.1
- 4.19.2
- '5'
- 5.0.1
- '5.1'
- 5.1.1
- '5.2'
- 5.2.1
- 5.2.2
author: Edward A. Kmett
latest: 5.2.2
description-type: markdown
description: "Lens: Lenses, Folds, and Traversals\r\n==================================\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/lens.svg)](https://hackage.haskell.org/package/lens)
  [![Build Status](https://github.com/ekmett/lens/workflows/Haskell-CI/badge.svg)](https://github.com/ekmett/lens/actions?query=workflow%3AHaskell-CI)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/lens.svg)](http://packdeps.haskellers.com/reverse/lens)\r\n\r\nThis
  package provides families of [lenses](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Type.hs),
  [isomorphisms](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Iso.hs),
  [folds](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Fold.hs), [traversals](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Traversal.hs),
  [getters](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Getter.hs)
  and [setters](https://github.com/ekmett/lens/blob/master/src/Control/Lens/Setter.hs).\r\n\r\nIf
  you are looking for where to get started, [a crash course video](http://youtu.be/cefnmjtAolY?hd=1)
  on how `lens` was constructed and how to use the basics is available on youtube.
  It is best watched in high definition to see the slides, but the [slides](http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf)
  are also available if you want to use them to follow along.\r\n\r\nThe [FAQ](https://github.com/ekmett/lens/wiki/FAQ),
  which provides links to a large number of different resources for learning about
  lenses and an overview of the [derivation](https://github.com/ekmett/lens/wiki/Derivation)
  of these types can be found on the [Lens Wiki](https://github.com/ekmett/lens/wiki)
  along with a brief [overview](https://github.com/ekmett/lens/wiki/Overview) and
  some [examples](https://github.com/ekmett/lens/wiki/Examples).\r\n\r\nDocumentation
  is available through [github](http://ekmett.github.com/lens/frames.html) (for HEAD)
  or [hackage](http://hackage.haskell.org/package/lens) for the current and preceding
  releases.\r\n\r\nField Guide\r\n-----------\r\n\r\n[![Lens Hierarchy](https://raw.githubusercontent.com/wiki/ekmett/lens/images/Hierarchy.png)](https://creately.com/diagram/h5nyo9ne1/QZ9UBOtw4AJWtmAKYK3wT8Mm1HM%3D)\r\n\r\n\r\nExamples\r\n--------\r\n\r\n(See
  [`wiki/Examples`](https://github.com/ekmett/lens/wiki/Examples))\r\n\r\nFirst, import
  `Control.Lens`.\r\n\r\n```haskell\r\nghci> import Control.Lens\r\n```\r\n\r\nNow,
  you can read from lenses\r\n\r\n```haskell\r\nghci> (\"hello\",\"world\")^._2\r\n\"world\"\r\n```\r\n\r\nand
  you can write to lenses.\r\n\r\n```haskell\r\nghci> set _2 42 (\"hello\",\"world\")\r\n(\"hello\",42)\r\n```\r\n\r\nComposing
  lenses for reading (or writing) goes in the order an imperative programmer would
  expect, and just uses `(.)` from the `Prelude`.\r\n\r\n```haskell\r\nghci> (\"hello\",(\"world\",\"!!!\"))^._2._1\r\n\"world\"\r\n```\r\n\r\n```haskell\r\nghci>
  set (_2._1) 42 (\"hello\",(\"world\",\"!!!\"))\r\n(\"hello\",(42,\"!!!\"))\r\n```\r\n\r\nYou
  can make a `Getter` out of a pure function with `to`.\r\n\r\n```haskell\r\nghci>
  \"hello\"^.to length\r\n5\r\n```\r\n\r\nYou can easily compose a `Getter` with a
  `Lens` just using `(.)`. No explicit coercion is necessary.\r\n\r\n```haskell\r\nghci>
  (\"hello\",(\"world\",\"!!!\"))^._2._2.to length\r\n3\r\n```\r\n\r\nAs we saw above,
  you can write to lenses and these writes can change the type of the container. `(.~)`
  is an infix alias for `set`.\r\n\r\n```haskell\r\nghci> _1 .~ \"hello\" $ ((),\"world\")\r\n(\"hello\",\"world\")\r\n```\r\n\r\nConversely
  `view`, can be used as a prefix alias for `(^.)`.\r\n\r\n```haskell\r\nghci> view
  _2 (10,20)\r\n20\r\n```\r\n\r\nThere are a large number of other lens variants provided
  by the library, in particular a `Traversal` generalizes `traverse` from `Data.Traversable`.\r\n\r\nWe'll
  come back to those later, but continuing with just lenses:\r\n\r\nYou can let the
  library automatically derive lenses for fields of your data type\r\n\r\n```haskell\r\ndata
  Foo a = Foo { _bar :: Int, _baz :: Int, _quux :: a }\r\nmakeLenses ''Foo\r\n```\r\n\r\nThis
  will automatically generate the following lenses:\r\n\r\n```haskell\r\nbar, baz
  :: Lens' (Foo a) Int\r\nquux :: Lens (Foo a) (Foo b) a b\r\n```\r\n\r\nA `Lens`
  takes 4 parameters because it can change the types of the whole when you change
  the type of the part.\r\n\r\nOften you won't need this flexibility, a `Lens'` takes
  2 parameters, and can be used directly as a `Lens`.\r\n\r\nYou can also write to
  setters that target multiple parts of a structure, or their composition with other\r\nlenses
  or setters. The canonical example of a setter is 'mapped':\r\n\r\n```haskell\r\nmapped
  :: Functor f => Setter (f a) (f b) a b\r\n```\r\n\r\n`over` is then analogous to
  `fmap`, but parameterized on the Setter.\r\n\r\n```haskell\r\nghci> fmap succ [1,2,3]\r\n[2,3,4]\r\nghci>
  over mapped succ [1,2,3]\r\n[2,3,4]\r\n```\r\n\r\nThe benefit is that you can use
  any `Lens` as a `Setter`, and the composition of setters with other setters or lenses
  using `(.)` yields\r\na `Setter`.\r\n\r\n```haskell\r\nghci> over (mapped._2) succ
  [(1,2),(3,4)]\r\n[(1,3),(3,5)]\r\n```\r\n\r\n`(%~)` is an infix alias for 'over',
  and the precedence lets you avoid swimming in parentheses:\r\n\r\n```haskell\r\nghci>
  _1.mapped._2.mapped %~ succ $ ([(42, \"hello\")],\"world\")\r\n([(42, \"ifmmp\")],\"world\")\r\n```\r\n\r\nThere
  are a number of combinators that resemble the `+=`, `*=`, etc. operators from C/C++
  for working with the monad transformers.\r\n\r\nThere are `+~`, `*~`, etc. analogues
  to those combinators that work functionally, returning the modified version of the
  structure.\r\n\r\n```haskell\r\nghci> both *~ 2 $ (1,2)\r\n(2,4)\r\n```\r\n\r\nThere
  are combinators for manipulating the current state in a state monad as well\r\n\r\n```haskell\r\nfresh
  :: MonadState Int m => m Int\r\nfresh = id <+= 1\r\n```\r\n\r\nAnything you know
  how to do with a `Foldable` container, you can do with a `Fold`\r\n\r\n```haskell\r\nghci>
  :m + Data.Char Data.Text.Lens\r\nghci> allOf (folded.text) isLower [\"hello\"^.packed,
  \"goodbye\"^.packed]\r\nTrue\r\n```\r\n\r\nYou can also use this for generic programming.
  Combinators are included that are based on Neil Mitchell's `uniplate`, but which\r\nhave
  been generalized to work on or as lenses, folds, and traversals.\r\n\r\n```haskell\r\nghci>
  :m + Data.Data.Lens\r\nghci> anyOf biplate (==\"world\") (\"hello\",(),[(2::Int,\"world\")])\r\nTrue\r\n```\r\n\r\nAs
  alluded to above, anything you know how to do with a `Traversable` you can do with
  a `Traversal`.\r\n\r\n```haskell\r\nghci> mapMOf (traverse._2) (\\xs -> length xs
  <$ putStrLn xs) [(42,\"hello\"),(56,\"world\")]\r\n\"hello\"\r\n\"world\"\r\n[(42,5),(56,5)]\r\n```\r\n\r\nMoreover,
  many of the lenses supplied are actually isomorphisms, that means you can use them
  directly as a lens or getter:\r\n\r\n```haskell\r\nghci> let hello = \"hello\"^.packed\r\n\"hello\"\r\nghci>
  :t hello\r\nhello :: Text\r\n```\r\n\r\nbut you can also flip them around and use
  them as a lens the other way with `from`!\r\n\r\n```haskell\r\nghci> hello^.from
  packed.to length\r\n5\r\n```\r\n\r\nYou can automatically derive isomorphisms for
  your own newtypes with `makePrisms`. e.g.\r\n\r\n```haskell\r\nnewtype Neither a
  b = Neither { _nor :: Either a b } deriving (Show)\r\nmakePrisms ''Neither\r\n```\r\n\r\nwill
  automatically derive\r\n\r\n```haskell\r\n_Neither :: Iso (Neither a b) (Neither
  c d) (Either a b) (Either c d)\r\n```\r\n\r\nsuch that\r\n\r\n```haskell\r\n_Neither.from
  _Neither = id\r\nfrom _Neither._Neither = id\r\n```\r\n\r\nAlternatively, you can
  use `makeLenses` to automatically derive isomorphisms for your own newtypes. e.g..\r\n\r\n```hs\r\nmakeLenses
  ''Neither\r\n```\r\n\r\nwill automatically derive\r\n\r\n```hs\r\nnor :: Iso (Either
  a b) (Either c d) (Neither a b) (Neither c d)\r\n```\r\n\r\nwhich behaves identically
  to `_Neither` above.\r\n\r\nThere is also a fully operational, but simple game of
  [Pong](https://github.com/ekmett/lens/blob/master/examples/Pong.hs) in the [examples/](https://github.com/ekmett/lens/blob/master/examples/)
  folder.\r\n\r\nThere are also a couple of hundred examples distributed throughout
  the haddock documentation.\r\n\r\nContact Information\r\n-------------------\r\n\r\nContributions
  and bug reports are welcome!\r\n\r\nPlease feel free to contact me through GitHub
  or on the [#haskell-lens](https://web.libera.chat/#haskell-lens) or [#haskell](https://web.libera.chat/#haskell)
  IRC channel on Libera Chat.\r\n\r\n-Edward Kmett\r\n"
license-name: BSD-2-Clause
