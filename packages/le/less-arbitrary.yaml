homepage: https://github.com/mgajda/less-arbitrary#readme
changelog-type: markdown
hash: becf8bf9ec4dd450ff9b3dbf59f5d8550cb426cf00ac13614c0571694a1d82b4
test-bench-deps:
  genvalidity-property: -any
  email-validate: -any
  base: '>=4.5 && <=4.17'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  generic-arbitrary: -any
  genvalidity-hspec: -any
  quickcheck-classes: -any
  containers: -any
  quickcheck-instances: -any
  validity: -any
  mtl: -any
  hashable: -any
  less-arbitrary: -any
  transformers: -any
  random: -any
  scientific: -any
  QuickCheck: -any
  genvalidity: -any
  vector: -any
maintainer: Michał J. Gajda <mjgajda@migamake.com>
synopsis: Linear time testing with variant of Arbitrary class that always terminates.
changelog: |
  # Revision history for less-arbitrary

  0.1.7.0 -- 2020-01-12

  * Added missing sources.

  0.1.6.0 -- 2020-01-12

  * Added GitHub link.

  0.1.5.0 -- 2020-01-12

  * Exposed Test.Arbitrary.Laws for convenient testing.
  * Exposed Test.LessArbitrary.Laws for convenient testing.

  0.1.4.0 -- 2020-12-14

  * Added `HasCallStack` constraint to get better error locations.

  0.1.3.0 -- 2020-12-14

  * Added `suchThat`.

  0.1.2.0 -- 2020-12-13

  * Exposed `Test.LessArbitrary.Cost` module.

  0.1.1.0 -- 2020-12-13

  * Moved `Cost` to `Test.LessArbitrary.Cost` module.

  0.1.0.2 -- 2020-10-17

  * Fixed the package metadata.

  0.1.0.1 -- 2020-10-17

  * Fixed the package build.

  0.1.0.0 -- 2020-10-17

  * First version of less-arbitrary on Hackage.
basic-deps:
  genvalidity-property: -any
  email-validate: -any
  base: '>=4.5 && <=4.17'
  time: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  generic-arbitrary: -any
  genvalidity-hspec: -any
  quickcheck-classes: -any
  containers: -any
  validity: -any
  mtl: -any
  hashable: -any
  transformers: -any
  random: -any
  scientific: -any
  QuickCheck: -any
  genvalidity: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
- 0.1.6.0
- 0.1.7.0
- 0.1.8.0
author: Michał J. Gajda <mjgajda@migamake.com>
latest: 0.1.8.0
description-type: markdown
description: |
  # Introduction

  This is way to write arbitrary instances
  that should terminate in linear time with respect to budget,
  or throw an error instead when they go over budget
  and it is unclear how to terminate data structure.

  ## Usage

  Just try:
  ```
  import Test.LessArbitrary

  data MyDataType = ...
    deriving (Generic)

  instance LessArbitrary MyDataType
  instance Arbitrary MyDataType where
    arbitrary = fasterArbitrary
  ```

  ## How it is done?

  It is simply putting a monad that tracks the cost of constructors generated so far,
  and throw an error when it goes too far. Goes for mutually recursive data structures
  with at least one terminating constructor available.

  Not to be used on non-terminating lazy data structures.

  # Documentation build

  To build detailed article on implementation, you would need:

  * `pandoc`
  * `xelatex` with standard science article packages
    - easiest to get as MacTeX on Mac
    - `apt-get install -y texlive-recommended` on Ubuntu
  * `pandoc-hide-codeblocks` filter to hide unnecessary code blocks (optional)

  # Hacker's guide

  Entire Haskell code is in literate markdown `less-arbitrary.md`.
  In order to work with it you will need `entangled` literate programming daemon
  that synchronizes source files with the literate source.

  It is bidirectional.

  ```
  git clone https://github.com/entangled/entangled --branch develop
  cd entangled;
  cabal install # or stack install
  entangled daemon
  ```
license-name: BSD-3-Clause
