all-versions:
- 1.1.0
- 1.1.0.1
- 1.2.0
- 1.2.1
- 1.2.2
- 1.2.3
- 1.2.4
- 1.2.5
- 1.2.6
- 1.4.0
- 1.4.1
- 1.4.2
- 1.4.3
author: John Lenz <lenz@math.uic.edu>
basic-deps:
  base: '>=4 && <5'
  blaze-html: '>=0.6'
  bytestring: '>=0.10'
  mtl: '>=2.1'
  nonce: '>=1.0'
  persistent: '>=1.3'
  pwstore-fast: '>=2.0'
  text: '>=0.11'
  yesod-auth: '>=1.2'
  yesod-core: '>=1.2'
  yesod-form: '>=1.3'
  yesod-persistent: '>=1.2'
changelog: |
  # 1.4.2

  * Allow persistent 2.5

  # 1.4.1

  * Allow newest version of persistent
  * Fix some warnings in the test suite

  # 1.4.0

  * Add proper support for i18n:
      * Moved messages into Yesod.Auth.Account.Message module
      * Added renderAccountMessage function to YesodAuthAccount class, which defaults to
        the english messages.
      * resendVerifyEmailWidget, resetPasswordWidget, newAccountForm, resetPasswordForm, and
        runAccountPersistDB had their context's updated with a constraint for
        `YesodAuthAccount db master`, which shouldn't be a problem.

  * Use the nonce package for generating the keys sent in the verification and reset
    password emails.  The `nonce` package provides efficient and cryptographically secure
    nonces.

  * Support yesod 1.4 and persistent 2.1 (also bump our version to 1.4 to match yesod)
changelog-type: markdown
description: |
  This package provides a [Yesod](http://www.yesodweb.com/) authentication plugin for accounts. Each
  account consists of an username, email, and password.  When initially creating an account, the email
  is verified by sending a link in an email.  The plugin also supports password reset via email.

  The plugin provides default pages implementing all of this functionality, but it has been designed
  to allow all the pages (new account page, password reset, etc.) to be customized or for the forms to
  be embedded into your own pages allowing you to just ignore the routes inside the plugin.  The
  details are contained in the [haddock
  documentation](http://hackage.haskell.org/package/yesod-auth-account).

  The plugin supports any form data storage by requiring you to implement a couple of interfaces for
  data access.  The plugin has instances of these interfaces using persistent, but you can create your
  own implementation if you are not using persistent or want more control over user data access and
  storage.

  A complete working example using persistent is
  [example.hs](/wuzzeb/yesod-auth-account/src/tip/example.hs).  Also, see the
  [haddock documentation](http://hackage.haskell.org/package/yesod-auth-account).
description-type: markdown
hash: 32d0f11ee68bdf5ba6ff833f7d98bef25a97f41f59581580ed277ea90861692c
homepage: https://bitbucket.org/wuzzeb/yesod-auth-account
latest: 1.4.3
license-name: MIT
maintainer: John Lenz <lenz@math.uic.edu>
synopsis: An account authentication plugin for Yesod
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  hspec: '>=0'
  monad-logger: '>=0.3'
  mtl: '>=0'
  persistent-sqlite: '>=0'
  resourcet: '>=0'
  text: '>=0'
  xml-conduit: '>=0'
  yesod: '>=1.2'
  yesod-auth: '>=1.2'
  yesod-auth-account: '>=0'
  yesod-test: '>=1.2.1.5'
