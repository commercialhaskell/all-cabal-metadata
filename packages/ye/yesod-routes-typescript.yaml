all-versions:
- 0.3.0.0
author: Max Cantor
basic-deps:
  attoparsec: '>=0'
  base: <5
  classy-prelude: '>=0.7'
  system-fileio: '>=0'
  text: '>=0'
  yesod-core: '>=1.2 && <2.0'
  yesod-routes: '>=1.2 && <2.0'
changelog: ''
changelog-type: ''
description: |
  yesod-routes-typescript
  =======================

  parse the Yesod routes data structure and generate routes that can be used in typescript

  The routing structure is generated by:

      mkYesodDispatch "App" resourcesApp

  You can generate routes at startup inside the `makeApplication` function

      when development $
          genTypeScriptRoutes resourcesApp "assets/ts/paths-gen.ts"


  This generates typescript code:

      class PATHS_TYPE_paths {
        public contacts: PATHS_TYPE_paths_contacts;
        public admin: PATHS_TYPE_paths_admin;

        constructor(){
          this.contacts = new PATHS_TYPE_paths_contacts();
          this.admin = new PATHS_TYPE_paths_admin();
        }
      }

      class PATHS_TYPE_paths_contacts {
        public get():string { return '/api/v1/contacts/get'; }
      }

      class PATHS_TYPE_paths_admin {
        public adminDocs: PATHS_TYPE_paths_admin_adminDocs;

        constructor(){
          this.adminDocs = new PATHS_TYPE_paths_admin_adminDocs();
        }
      }

      class PATHS_TYPE_paths_admin_adminDocs {
        public get():string { return '/api/v1/admin/docs/get'; }
      }


      var PATHS:PATHS_TYPE_paths = new PATHS_TYPE_paths();


  In your typescript code you can now do:


      PATHS.admin.adminDocs.get()


  Please note that the Haskell code was hastily translated from javascript code and is pretty horrible.
  There are bugs and edge cases to be addressed, but this works ok for us.
description-type: markdown
hash: 6930c4aa755f9a0a3f02009915e1a767baeaab7e5b87e073943f3b0a5f429de1
homepage: https://github.com/docmunch/yesod-routes-typescript
latest: 0.3.0.0
license-name: MIT
maintainer: max@docmunch.com
synopsis: generate TypeScript routes for Yesod
test-bench-deps: {}
