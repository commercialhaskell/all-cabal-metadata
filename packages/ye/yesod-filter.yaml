all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Kenzo Yotsuya
basic-deps:
  base: '>=4.7 && <5'
  persistent: '>=0'
  template-haskell: '>=0'
  text: '>=1.2.4'
  time: '>=1.9'
  yesod-core: '>=0'
  yesod-persistent: '>=0'
changelog: |
  # Changelog for yesod-filter

  ## 0.1.0.2 (2020-10-08)

  - Fix the version constraints of package `text`.

  ## 0.1.0.1 (2020-10-07)

  - Fix the version constraints of package `time`.

  ## 0.1.0.0 (2020-10-06)

  - Initial release.
changelog-type: markdown
description: |
  # yesod-filter

  [![Build Status](https://travis-ci.org/iij-ii/yesod-filter.svg?branch=master)](https://travis-ci.org/iij-ii/yesod-filter)

  yesod-filter is a library that automatically generates [Filter](https://hackage.haskell.org/package/persistent-2.10.5.2/docs/Database-Persist-Types.html#t:Filter) and [SelectOpt](https://hackage.haskell.org/package/persistent-2.10.5.2/docs/Database-Persist-Types.html#t:SelectOpt) from URL query string.
  yesod-filter is inspired by [django-filter](https://github.com/carltongibson/django-filter).

  ## Usage

  ### Example

  ```haskell
  {-
  # Suppose the model is defined as follows:
  Pet json
      name Text
      age Int
      deriving Eq
      deriving Show

  # And the route is defined as follows:
  /pets PetsR GET
  -}

  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE TemplateHaskell   #-}

  module Handler.Pet where

  import           Import
  import           Yesod.Filter.TH

  -- Define the query options to be available.
  $(mkFilterGenerator "Pet" defaultOptions
      { filtering = defaultFiltering
          { filterDefs =
              [ FilterDef "name" defaultFilterParams
              , FilterDef "age"  defaultFilterParams
              ]
          }
      , sorting = defaultSorting
          { sortFields = ["name", "age"]
          , defaultOrdering = ORDERBY "id" ASC
          }
      }
   )

  getPetsR :: Handler Value
  getPetsR = do
      -- The list of Filter and SelectOpts are automatically converted from query parameters.
      filters' <- $(mkFilters)
      selectOpts <- $(mkSelectOpts)
      pets <- runDB $ selectList filters' selectOpts
      returnJson pets
  ```

  The above handler definition generates the following endpoint.

  ```sh
  # Without query strings
  $ curl -s "http://localhost:3000/pets" | jq .
  [
    {
      "age": 5,
      "name": "John",
      "id": 1
    },
    {
      "age": 3,
      "name": "Charlie",
      "id": 2
    },
    {
      "age": 10,
      "name": "Jack",
      "id": 3
    }
  ]

  # Filter: WHERE AGE > 3
  $ curl -s "http://localhost:3000/pets?age__gt=3" | jq .
  [
    {
      "age": 5,
      "name": "John",
      "id": 1
    },
    {
      "age": 10,
      "name": "Jack",
      "id": 3
    }
  ]

  # SelectOpt: ORDER BY name
  $ curl -s "http://localhost:3000/pets?sort=name" | jq .
  [
    {
      "age": 3,
      "name": "Charlie",
      "id": 2
    },
    {
      "age": 10,
      "name": "Jack",
      "id": 3
    },
    {
      "age": 5,
      "name": "John",
      "id": 1
    }
  ]
  ```

  ## LICENCE

  Copyright (c) IIJ Innovation Institute Inc.

  Licensed under The 3-Clause BSD License.
description-type: markdown
hash: a597e9dec2b195f219c092dca52640a835d4d107764cbf1704e37357124da9cc
homepage: https://github.com/iij-ii/yesod-filter#readme
latest: 0.1.0.2
license-name: BSD-3-Clause
maintainer: kyotsuya@iij-ii.co.jp
synopsis: Automatic filter generator for Yesod
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  doctest: '>=0'
  hspec: '>=0'
  persistent: '>=0'
  persistent-template: '>=0'
  template-haskell: '>=0'
  text: '>=1.2.4'
  time: '>=1.9'
  yesod-filter: '>=0'
  yesod-persistent: '>=0'
