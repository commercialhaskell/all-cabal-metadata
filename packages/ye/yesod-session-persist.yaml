all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
author: ''
basic-deps:
  base: '>=4.16.4.0 && <5'
  yesod-session-persist: '>=0'
changelog: |
  ## [_Unreleased_](https://github.com/freckle/yesod-session-persist/compare/v0.0.0.2...main)

  ## [v0.0.0.2](https://github.com/freckle/yesod-session-persist/compare/v0.0.0.1...v0.0.0.2)

  Add support for `memcache` as a data store.

  Change return type of `getSessionEmbeddings` to 'Maybe SessionEmbeddings' (Breaking Change)

  ## [v0.0.0.1](https://github.com/freckle/yesod-session-persist/compare/v0.0.0.0...v0.0.0.1)

  Add support for `base64` version `1.0`

  ## [v0.0.0.0](https://github.com/freckle/yesod-session-persist/tree/v0.0.0.0)

  First tagged release.
changelog-type: markdown
description: |
  # yesod-session-persist

  [![Hackage](https://img.shields.io/hackage/v/yesod-session-persist.svg?style=flat)](https://hackage.haskell.org/package/yesod-session-persist)
  [![CI](https://github.com/freckle/yesod-session-persist/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/yesod-session-persist/actions/workflows/ci.yml)

  Use this package to construct a Yesod session backend for which sessions are
  stored in a backend data store.

  ## Features

  ### Key rotation

  The key reason to switch from client-side sessions (Yesod's default) to server storage
  is to be able to rotate keys and invalidate old credentials.

  With client session storage, when a user logs out, you send them a new cookie.
  But this does nothing to satisfy a user who is logging out because their session secret may
  have been compromised; the old cookie value will still be a working authentication credential.
  Being able to _revoke_ authentication credentials requires storing state on the server.

  Whenever user's authentication changes (but especially on logging out), users of this library
  should use the `rotateSessionKey` action to provoke a key rotation.
  This copies any existing session data into a new session with a different secret key,
  deleting the session with the old key and thus disabling any outdated credentials that
  an attacker may possess.

  ### Disabling session changes

  There may be some unusual circumstances in which you want to disable the effects of session
  management -- writes to the session backend and sending of session cookies -- for the
  handling of a particular request.
  At such times, you can use the `assignSessionFreeze` action to indicate whether the
  session should be persisted at the end of the handling of the request.

  ### Expiration by idle timeout

  The most recent access time of each session is stored. After a configurable duration has
  elapsed without access, a session is considered to be expired. An expired session is treated
  as if it did not exist.

  ### Expiration by absolute timeout

  The creation time of each session is stored. After a configurable duration has elapsed since
  the creation time, a session is considered to be expired, regardless of whether it is still
  in active use.

  ### Approximate storage of access time

  To avoid excessive database writes, updates which would only increment a session's access
  time by a short duration are not performed.
  The definition of "a short duration" is configurable; we call it the _timeout resolution_.

  ## Absent features

  ### Garbage collection

  Garbage collection is supported when using `memcache` as the data store. Please see 'Yesod.Session.Memcache.Storage.SessionPersistence'.

  The `Yesod.Session.Persist` module _does not_ does not proactively seek out expired sessions for deletion. Thus, in the absence of some other intervention, your session table will grow without bound.

  ## Prior art

  ### `serversession`

  This package is based on
  [serversession](https://hackage.haskell.org/package/serversession) +
  [serversession-frontend-yesod](https://hackage.haskell.org/package/serversession-frontend-yesod) +
  [serversession-backend-persistent](https://hackage.haskell.org/package/serversession-backend-persistent).

  Compared to `serversession`, here we simplify somewhat by concretizing to Yesod and
  Persistent rather than supporting multiple frontends and backends.

  Their sessions have a concept of "auth ID" specifying who is logged in.
  `serversession` uses this to automatically rotate keys when the auth ID changes, and
  to provide a means for mass invalidation of all the sessions belonging to a particular user.
  We do not borrow this concept, because it does not generalize well to more complex
  authentication situations where a session may have been authenticated as multiple principals.

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
description-type: markdown
hash: b0f88eb6cb60c013640f0692702b74cd082272689342ab3e70378ea1fecee4f7
homepage: https://github.com/freckle/yesod-session-persist#readme
latest: 0.0.0.2
license-name: MIT
maintainer: Freckle Education
synopsis: SQL session backend for Yesod
test-bench-deps:
  QuickCheck: '>=2.14.3'
  aeson: '>=2.0.3.0'
  base: '>=4.16.4.0 && <5'
  containers: '>=0.6.5.1'
  cookie: '>=0.4.6'
  hspec: '>=2.9.7'
  mtl: '>=2.2.2'
  random: '>=1.2.1.1'
  stm: '>=2.5.0.2'
  text: '>=1.2.5.0'
  wai: '>=3.2.3'
  wai-extra: '>=3.1.13.0'
  yesod: '>=1.6.2.1'
  yesod-core: '>=1.6.24.2'
  yesod-session-persist: '>=0'
  yesod-test: '>=1.6.15'
