homepage: ''
changelog-type: markdown
hash: 66479d7bb62bddb622ee5b906bd68791ed4b826377af6fd369c0458d77dd86b5
test-bench-deps:
  bytestring: '>=0.9 && <0.11'
  yesod-test: -any
  case-insensitive: -any
  yesod-core: '>=1.6.15 && <1.7'
  base: -any
  base64-bytestring: -any
  hspec: -any
  text: -any
  uuid: -any
  filepath: -any
  conduit: -any
  fast-logger: -any
  containers: -any
  yesod: -any
  classy-prelude-yesod: '>=1.1'
  network-uri: -any
  classy-prelude: '>=0.10.2'
  monad-logger: -any
  wai-extra: '>=3.0'
  http-types: -any
  template-haskell: -any
  yesod-static: '>=1.6 && <1.7'
  directory: -any
maintainer: Jezen Thomas <jezen@riskbook.com>
synopsis: A middleware for building CSP headers on the fly
changelog: |
  # Revision history for `yesod-middleware-csp`

  This format is based on [Keep A Changelog](https://keepachangelog.com/en/1.0.0).

  ## Unreleased

  ## 1.0.2 - 2022-07-12

  + Export the new functions

  ## 1.0.1 - 2022-07-12

  + Add missing extra source files to cabal file

  ## 1.0.0 - 2022-07-12

  + Add Attrs variants of add script.
  + Add changelog, bump to version 1, upload to hackage

  ## 0.0.0 - ???

  + Initial release on github
basic-deps:
  http-client: -any
  bytestring: '>=0.9 && <0.11'
  yesod-core: '>=1.6.15'
  base: '>=4 && <5'
  time: -any
  base64-bytestring: -any
  text: -any
  uuid: -any
  filepath: -any
  conduit: -any
  containers: -any
  yesod: '>=1.6.0'
  network-uri: -any
  classy-prelude: '>=0.10.2'
  template-haskell: -any
  yesod-static: '>=1.6 && <1.7'
  directory: -any
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
author: Jezen Thomas <jezen@riskbook.com>
latest: 1.0.2
description-type: markdown
description: |
  # yesod-middleware-csp

  A middleware for building CSP headers on the fly

  Deals with CSP without disabling it.
  This is done by overriding the default yesod
  provided addScript functionalities and adding
  a nonce to the tag, and the right headers to the request.

  ## Usage

  Because there is no good way of enforcing CSP
  at typelevel in yesod,
  It's best to override classy prelude with your
  own custom prelude.
  This allows hiding the addScript functions from
  there with the ones provided by this library:

  ```haskell

  -- | Mirrors classy prelude yesod but with our supercede patches
  module Supercede.Prelude.Yesod
    ( -- * rexport
      module X
    -- ** use CSP variant instead of yesod's
    , addScriptEither
    , addScript
    , addScriptRemote
    ) where

  import Supercede.Prelude as X hiding (delete, deleteBy, Handler (..))
  import Yesod as X hiding (addScriptEither, addScript, addScriptRemote, addScriptAttrs, addScriptRemoteAttrs)

  import Yesod.Middleware.CSP (addScriptEither, addScript, addScriptRemote)

  ```

  Then in hlint you can simply dis-recommend usage of classy prelude:

  ```haskell
  - modules:
    - {name: [ClassyPrelude], message: "Use Supercede.Prelude instead"}
    - {name: [ClassyPrelude.Yesod], message: "Use Supercede.Prelude.Yesod instead"}
  ```

  ## How to run tests

  ```
  cabal configure --enable-tests && cabal build && cabal test
  ```

  ## Contributing

  PR's are welcome.
license-name: MIT
