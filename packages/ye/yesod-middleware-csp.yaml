all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.1.0
- 1.2.0
author: Jezen Thomas <jezen@supercede.com>
basic-deps:
  base: '>=4 && <5'
  base64-bytestring: '>=1.0.0 && <1.3'
  bytestring: '>=0.9 && <0.12'
  classy-prelude: '>=1.5.0 && <1.6'
  conduit: '>=1.3.1 && <1.4'
  containers: '>=0.6.0 && <0.7'
  directory: '>=1.3.3 && <1.4'
  filepath: '>=1.4.2 && <1.5'
  http-client: '>=0.6.4 && <0.8'
  network-uri: '>=2.6.1 && <2.7'
  template-haskell: '>=2.14.0 && <3.0'
  text: '>=1.2.3 && <3.0'
  time: '>=1.8.0 && <2.0'
  uuid: '>=1.3.13 && <1.4'
  yesod: '>=1.6.0 && <1.7'
  yesod-core: '>=1.6.16 && <1.7'
  yesod-static: '>=1.6 && <1.7'
changelog: |
  # Revision history for `yesod-middleware-csp`

  This format is based on [Keep A Changelog](https://keepachangelog.com/en/1.0.0).

  ## 1.2.0 - 2023-06-14

  + bump bounds
  + add upperboudns from cabal-gen-bounds
  + add stackage ci

  ## 1.1.0 - 2022-07-15

  + Add new directive ManifestSrc

  ## Unreleased

  ## 1.0.2 - 2022-07-12

  + Export the new functions

  ## 1.0.1 - 2022-07-12

  + Add missing extra source files to cabal file

  ## 1.0.0 - 2022-07-12

  + Add Attrs variants of add script.
  + Add changelog, bump to version 1, upload to hackage

  ## 0.0.0 - ???

  + Initial release on github
changelog-type: markdown
description: |
  # yesod-middleware-csp

  A middleware for building CSP headers on the fly

  Deals with CSP without disabling it.
  This is done by overriding the default yesod
  provided addScript functionalities and adding
  a nonce to the tag, and the right headers to the request.

  ## Usage

  Because there is no good way of enforcing CSP
  at typelevel in yesod,
  It's best to override classy prelude with your
  own custom prelude.
  This allows hiding the addScript functions from
  there with the ones provided by this library:

  ```haskell

  -- | Mirrors classy prelude yesod but with our supercede patches
  module Supercede.Prelude.Yesod
    ( -- * rexport
      module X
    -- ** use CSP variant instead of yesod's
    , addScriptEither
    , addScript
    , addScriptRemote
    ) where

  import Supercede.Prelude as X hiding (delete, deleteBy, Handler (..))
  import Yesod as X hiding (addScriptEither, addScript, addScriptRemote, addScriptAttrs, addScriptRemoteAttrs)

  import Yesod.Middleware.CSP (addScriptEither, addScript, addScriptRemote)

  ```

  Then in hlint you can simply dis-recommend usage of classy prelude:

  ```haskell
  - modules:
    - {name: [ClassyPrelude], message: "Use Supercede.Prelude instead"}
    - {name: [ClassyPrelude.Yesod], message: "Use Supercede.Prelude.Yesod instead"}
  ```

  ## How to run tests

  ```
  cabal configure --enable-tests && cabal build && cabal test
  ```

  ## Contributing

  PR's are welcome.
description-type: markdown
hash: ec7a041f3e2d3448c2ab9f11ccb00d59d9ecfaee00b109eb2c4889d748625943
homepage: ''
latest: 1.2.0
license-name: MIT
maintainer: Jezen Thomas <jezen@supercede.com>
synopsis: A middleware for building CSP headers on the fly
test-bench-deps:
  base: '>=0'
  base64-bytestring: '>=0'
  bytestring: '>=0.9'
  case-insensitive: '>=0'
  classy-prelude: '>=0.10.2'
  classy-prelude-yesod: '>=1.1'
  conduit: '>=0'
  containers: '>=0'
  directory: '>=0'
  fast-logger: '>=0'
  filepath: '>=0'
  hspec: '>=0'
  http-types: '>=0'
  monad-logger: '>=0'
  network-uri: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  uuid: '>=0'
  wai-extra: '>=3.0'
  yesod: '>=0'
  yesod-core: '>=1.6.15'
  yesod-static: '>=1.6'
  yesod-test: '>=0'
