homepage: https://github.com/SupercedeTech/yesod-auth-oidc
changelog-type: ''
hash: 3928caf19f986dbee42556ad5c28e28911d309c1625dd7f79d284d140aca0df8
test-bench-deps:
  shakespeare: -any
  warp: ^>=3.3.15
  http-client: -any
  broch: ^>=0.1
  email-validate: ^>=2.3.2
  bytestring: ^>=0.10.10
  yesod-test: ^>=1.6.12
  yesod-core: -any
  base: -any
  time: -any
  sqlite-simple: ^>=0.4.18
  base64-bytestring: -any
  persistent: '>=2.11.0 && <=3.0.0'
  unordered-containers: -any
  hspec: '>=2.7.10 && <3.0'
  text: -any
  resource-pool: ^>=0.2.3
  reroute: '>=0.6.0 && <0.8'
  fast-logger: '>=3.0.5 && <4.0'
  memory: '>=0.15.0 && <1'
  containers: ^>=0.6.2
  yesod-persistent: ^>=1.6.0
  yesod: ^>=1.6.1
  classy-prelude-yesod: -any
  lens: '>=4.19.2 && <6.0'
  yesod-form: -any
  jose-jwt: -any
  postgresql-simple: ^>=0.6.4
  cryptonite: -any
  oidc-client: -any
  classy-prelude: ^>=1.5.0
  lens-regex-pcre: ^>=1.1.0
  blaze-html: ^>=0.9.1
  monad-logger: ^>=0.3.36
  wai-extra: ^>=3.1.6
  http-conduit: ^>=2.3.8
  http-types: ^>=0.12.3
  persistent-sqlite: '>=2.11.1 && <=3.0'
  wai-app-static: ^>=3.1.7
  aeson: -any
  yesod-auth: -any
  directory: ^>=1.3.6
maintainer: Supercede Technology Ltd <support@supercede.com>
synopsis: A yesod-auth plugin for multi-tenant SSO via OpenID Connect
changelog: ''
basic-deps:
  shakespeare: '>=2.0.25 && <2.2'
  http-client: '>=0.6.4 && <1'
  yesod-core: ^>=1.6.19
  base: '>=4.9.1.0 && <5'
  time: '>=1.9.3 && <2.0'
  base64-bytestring: '>=1.1.0 && <1.3'
  unordered-containers: ^>=0.2.13
  text: '>=1.2.4 && <3.0'
  containers: -any
  classy-prelude-yesod: ^>=1.5.0
  yesod-form: '>=1.6.7 && <2.0'
  jose-jwt: ^>=0.9.2
  cryptonite: '>=0.28 && <1'
  oidc-client: '>=0.6.0 && <0.8'
  aeson: '>=2.0.0.0 && <3.0'
  yesod-auth: ^>=1.6.10
all-versions:
- 0.1.0
- 0.1.1
- 0.1.3
author: Supercede Technology Ltd
latest: 0.1.3
description-type: markdown
description: |
  # yesod-auth-oidc

  A Yesod authentication plugin for multi-tenant Single Sign-on (SSO) via [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html) (OIDC Core 1.0), using Authorization Code flow (defined in ยง3.1, AKA server flow).

  * Supports multiple Identity Providers with callbacks based on the login_hint (typically an email).
  * Each provider can be configured either through OIDC Discovery or manually. (The Dynamic Registration OIDC extension is not supported).
  * Uses with your Yesod app's session library plus a small middleware. That means there's no need to rely on encrypted JWTs in the browser if you use server-side sessions.
  * Works well with [yesod-auth-simple](https://github.com/riskbook/yesod-auth-simple).

  # Using the library

  This library abstracts many details of OIDC for you, but you may need to understand the basics of OIDC to integrate this with your app. The steps are:

  1. Implement the `YesodAuthOIDC` class for your Yesod `App`. See the Haddocks for documentation.

  2. Add `Yesod.Auth.OIDC.authOIDC` to your list of authPlugins.

  3. Add the `Yesod.Auth.OIDC.oidcSessionExpiryMiddleware` to your WAI middleware. This ensures the user is logged out upon the token's expiry. You should be able to implement something more fancy than a hard logout without modifying this libary.

  4. Add some extra UI logic for choosing between login methods if you have more than one auth plugin. Yesod provides some defaults here for getting started.

  Also see this library's test suite, especially `test/ExampleApp.hs` and `test/Yesod/Auth/OIDCSpec.hs`.

  # Relation to other Haskell libraries

  * [Broch](https://github.com/tekul/broch): a Haskell implementation of an OpenID _Provider_. `yesod-auth-oidc` implements an OpenID _Relying Party_ (AKA client).

  * [oidc-client](https://hackage.haskell.org/package/oidc-client): `yesod-auth-oidc` uses this utility library. It handles important parts such as token validation, and is not tied to Yesod.

  * [yesod-auth](https://hackage.haskell.org/package/yesod-auth), its `Yesod.Auth.OpenID` module, and the the [authenticate](https://hackage.haskell.org/package/authenticate) library: this appears to be an implementation of [OpenID Authentication 2.0](https://openid.net/specs/openid-authentication-2_0.html), which is the previous "generation" of the OpenID Foundation's efforts. OpenID 2 doesn't seem to be supported by many off-the-shelf SSO Providers (e.g. Azure AD, Auth0), unlike OIDC.

  * [yesod-auth-oauth2](https://hackage.haskell.org/package/yesod-auth-oauth2): Offers authentication using the authorisation protocol [OAuth 2.0](https://tools.ietf.org/html/rfc6749). OIDC defines some extras on top of OAuth 2.0 to securely implement authentication.

  # Limitations

  * Only Authorization Code flow is supported. This is the most widely compatible version of OIDC, which all compliant providers must support.

  * Extras such as dynamic registration, single log-out, and automatic session extension via the "prompt" parameter are not implemented.

  * The algorithm for determining the HTTP cache period of the discovery document and JWK Set is not yet implemented. For now, you could implement most of this yourself in the appropriate callback however (or send.

  # Development

  The maintainers typically run `nix-shell` and then use GHCi or cabal from there.
license-name: BSD-3-Clause
