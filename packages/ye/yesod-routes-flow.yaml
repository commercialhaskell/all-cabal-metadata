homepage: https://github.com/freckle/yesod-routes-flow
changelog-type: markdown
hash: 5e07b8874a774f23f2b0436399326abe350878098516a05d7d44868792fcd1a5
test-bench-deps:
  shakespeare: '>=2.0.14.1'
  yesod-routes-flow: -any
  yesod-core: '>=1.4 && <2.0'
  base: '>=4.10.1.0 && <5'
  hspec: '>=2.4.4'
  text: '>=1.2.2.2'
  system-fileio: '>=0.3.16.3'
  semigroups: '>=0.18.3'
  containers: '>=0.5.10.2'
  classy-prelude: '>=0.7'
  attoparsec: '>=0.13.2.0'
  system-filepath: '>=0.4'
  hspec-expectations: '>=0.8.2'
maintainer: engineering@freckle.com
synopsis: Generate Flow routes for Yesod
changelog: |
  ## [_Unreleased_](https://github.com/freckle/yesod-routes-flow/compare/v3.0.0.1...main)

  None

  ## [v3.0.0.1](https://github.com/freckle/yesod-routes-flow/compare/2.0...v3.0.0.1)

  - Setup CI/CD
  - Starting in `yesod-core-1.6.2`, `yesod-core` started deriving `Show` for `ResourceTree` and `FlatResource`. To prevent duplicate instance errors, this package now only derives `Show` for `yesod-core < 1.6.2`.
  - An implication of this is that building anything less than `yesod-routes-flow-3.0.0.1` with `yesod-core-1.6.2` will cause duplicate instance compiler errors.
basic-deps:
  yesod-core: '>=1.4 && <2.0'
  base: '>=4.10.1.0 && <5'
  text: '>=1.2.2.2'
  system-fileio: '>=0.3.16.3'
  containers: '>=0.5.10.2'
  classy-prelude: '>=0.7'
  attoparsec: '>=0.13.2.0'
  system-filepath: '>=0.4'
all-versions:
- '1.0'
- 1.0.1
- 1.0.2
- '1.1'
- 1.1.1
- '2.0'
- 3.0.0.1
author: Freckle Engineering
latest: 3.0.0.1
description-type: markdown
description: |
  yesod-routes-flow
  =================

  Parse the Yesod routes data structure and generate routes that can be used in Flow.

  The routing structure is generated by:

      mkYesodDispatch "App" resourcesApp

  You can generate routes at startup inside the `makeApplication` function

      when development $
          genFlowRoutes resourcesApp "assets/ts/paths-gen.ts"


  This generates Flow code:

      class PATHS_TYPE_paths {
        contacts: PATHS_TYPE_paths_contacts;
        admin: PATHS_TYPE_paths_admin;

        constructor(){
          this.contacts = new PATHS_TYPE_paths_contacts();
          this.admin = new PATHS_TYPE_paths_admin();
        }
      }

      class PATHS_TYPE_paths_contacts {
        get(): string { return '/api/v1/contacts/get'; }
      }

      class PATHS_TYPE_paths_admin {
        adminDocs: PATHS_TYPE_paths_admin_adminDocs;

        constructor(){
          this.adminDocs = new PATHS_TYPE_paths_admin_adminDocs();
        }
      }

      class PATHS_TYPE_paths_admin_adminDocs {
        get(): string { return '/api/v1/admin/docs/get'; }
      }


      var PATHS:PATHS_TYPE_paths = new PATHS_TYPE_paths();


  In your Flow code you can now do:


      PATHS.admin.adminDocs.get()


  Please note that the Haskell code was hastily translated from
  Javascript code, then translated from TypeScript to Flow, and is
  pretty horrible.  There are bugs and edge cases to be addressed,
  but this works ok for us.
license-name: MIT
