homepage: http://www.yesodweb.com
changelog-type: markdown
hash: cc3cda0b82e65925287fc7f79bb96fb3252b44b35e44a7fd04018e3fcc7eced2
test-bench-deps:
  cookie: -any
  bytestring: -any
  yesod-test: -any
  wai: -any
  unliftio: -any
  xml-conduit: -any
  yesod-core: -any
  base: -any
  hspec: -any
  text: -any
  html-conduit: -any
  HUnit: -any
  containers: -any
  unliftio-core: -any
  yesod-form: '>=1.6'
  wai-extra: -any
  http-types: -any
maintainer: Michael Snoyman, Greg Weber, Nubis <nubis@woobiz.com.ar>
synopsis: integration testing for WAI/Yesod Applications
changelog: "# ChangeLog for yesod-test\n\n## 1.6.13\n\n* Add `Yesod.Test.Internal.SIO`
  module to expose the `SIO` type.\n\n## 1.6.12\n\n* Fix import in cookie example
  [#1713](https://github.com/yesodweb/yesod/pull/1713)\n* Add `MonadState` instance
  for `SIO`\n\n## 1.6.11\n\n* Add missing `HasCallStack`s [#1710](https://github.com/yesodweb/yesod/pull/1710)\n\n##
  1.6.10\n\n* `statusIs` assertion failures now print a preview of the response body,
  if the response body is UTF-8 or ASCII. [#1680](https://github.com/yesodweb/yesod/pull/1680/files)\n*
  Adds an `Yesod.Test.Internal`, which exposes functions that yesod-test uses. These
  functions do _not_ constitute a stable API.\n\n## 1.6.9.1\n\n* Improve documentation
  [#1676](https://github.com/yesodweb/yesod/pull/1676)\n* Require GHC 8.2 (base >=
  4.10)\n\n## 1.6.9\n\nAdd `requireJSONResponse` function [#1646](https://github.com/yesodweb/yesod/pull/1646)\n\n##
  1.6.8\n\nAdd `testModifySite` function [#1642](https://github.com/yesodweb/yesod/pull/1642)\n\n##
  1.6.7\n\nAdd `addBasicAuthHeader` function [#1632](https://github.com/yesodweb/yesod/pull/1632)\n\n##
  1.6.6.2\n\naddPostParam will now URL-encode keys and values to prevent corruption\nwhen
  special characters such as `&` are used\n[#1617](https://github.com/yesodweb/yesod/pull/1617)\n\n##
  1.6.6.1\n\n* Documentation fixes\n* Support for network 3\n\n## 1.6.6\n\n* Add utility
  functions to modify cookies [$1570](https://github.com/yesodweb/yesod/pull/1570)\n\n##
  1.6.5.1\n\n* Make test suite build with GHC 8.6 [#1561](https://github.com/yesodweb/yesod/pull/1561)\n\n##
  1.6.5\nbodyEquals prints out actual body in addition to expected body in failure
  msg\n[#1525](https://github.com/yesodweb/yesod/pull/1525)\n\n## 1.6.4\nAdd yesodSpecWithSiteGeneratorAndArgument\n[#1485](https://github.com/yesodweb/yesod/pull/1485)\n\n##
  1.6.3\nAdd performMethod\n[#1502](https://github.com/yesodweb/yesod/pull/1502)\n\n##
  1.6.2\n\n* Add byLabel-related functions like byLabelContain\n[#1482](https://github.com/yesodweb/yesod/pull/1482)\n\n##
  1.6.1\n\n* Fix the build with `base-4.11` (GHC 8.4).\n\n## 1.6.0\n\n* Upgrade to
  yesod-core 1.6.0\n\n## 1.5.9.1\n\n* Fixes a Haddock syntax error in 1.5.9 [#1473](https://github.com/yesodweb/yesod/pull/1473)\n\n##
  1.5.9\n* Add byLabelExact and related functions\n[#1459](https://github.com/yesodweb/yesod/pull/1459)\n\n##
  1.5.8\n* Added implicit parameter HasCallStack to assertions.\n[#1421](https://github.com/yesodweb/yesod/pull/1421)\n\n##
  1.5.7\n\n* Add clickOn.\n[#1408](https://github.com/yesodweb/yesod/pull/1408)\n\n##
  1.5.6\n\n* Add assertNotEq.\n[#1375](https://github.com/yesodweb/yesod/pull/1375)\n\n##
  1.5.5\n\n* Fix warnings\n\n## 1.5.4.1\n\n* Compilation fix for GHC 7.8\n\n## 1.5.4\n\n*
  yesod-test: add getLocation test helper. [#1314](https://github.com/yesodweb/yesod/pull/1314)\n\n##
  1.5.3\n\n* Added bodyNotContains [#1271](https://github.com/yesodweb/yesod/pull/1271)\n\n##
  1.5.2\n\n* Added assertEq, deprecated assertEqual [#1259](https://github.com/yesodweb/yesod/pull/1259)\n\n##
  1.5.1.1\n\n* Fix `addToken_` needing a trailing space and allows multiples spaces
  in css selector.\n\n## 1.5.1.0\n\n* Better error provenance for stuff invoking withResponse'
  [#1191](https://github.com/yesodweb/yesod/pull/1191)\n\n## 1.5.0.1\n\n* Fixed the
  `application/x-www-form-urlencoded` header being added to all requests, even those
  sending a binary POST body [#1064](https://github.com/yesodweb/yesod/pull/1064/files)\n\t*
  The `application/x-www-form-urlencoded` Content-Type header is now only added if
  key-value POST parameters are added\n\t* If no key-values pairs are added, or the
  request body is set with `setRequestBody`, no default Content-Type header is set\n\n##
  1.5\n\n* remove deprecated addNonce functions\n* You can now configure testing middleware\n\nConfiguring
  middleware makes it easy to add logging among other things.\nmiddleware is applied
  to the wai app before each test.\n\nIf you follow the yesod scaffold, you probably
  have a\nwithApp function in TestImport.hs.\nThis function should now return (foundation,
  middleware).\n`id` is an acceptable value for middleware.\n\n\n## 1.4.4\n\ntest
  helpers for CRSF middleware such as addTokenFromCookie\n\n## 1.4.3.2\n\n* Add `addTokenFromCookie`
  and `addTokenFromCookieNamedToHeaderNamed`, which support the new CSRF token middleware
  [#1058](https://github.com/yesodweb/yesod/pull/1058)\n* Add `getRequestCookies`,
  which returns the cookies from the most recent request [#1058](https://github.com/yesodweb/yesod/pull/1058)\n\n##
  1.4.3.1\n\n* Improved README\n\n## 1.4.2\n\nProvide `Example` instance for `YesodExample`.\n\n##
  1.4.1.1\n\nUpgrade to hspec 2\n"
basic-deps:
  cookie: -any
  bytestring: '>=0.9'
  wai: '>=3.0'
  case-insensitive: '>=0.2'
  xml-conduit: '>=1.0'
  yesod-core: '>=1.6.17'
  base: '>=4.10 && <5'
  time: -any
  text: -any
  hspec-core: ==2.*
  network: '>=2.2'
  html-conduit: '>=0.1'
  conduit: -any
  HUnit: '>=1.2'
  memory: -any
  containers: -any
  blaze-builder: -any
  xml-types: '>=0.3'
  mtl: '>=2.0.0'
  blaze-html: '>=0.5'
  pretty-show: '>=1.6'
  attoparsec: '>=0.10'
  wai-extra: -any
  transformers: '>=0.2.2'
  http-types: '>=0.7'
  aeson: -any
all-versions:
- '0.1'
- 0.2.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.0.6
- 0.2.1
- 0.3.0
- 0.3.0.1
- 0.3.1
- 0.3.1.1
- 0.3.2
- 0.3.3
- 0.3.3.1
- 0.3.3.2
- 0.3.4
- 0.3.5
- 1.2.0
- 1.2.1
- 1.2.1.1
- 1.2.1.2
- 1.2.1.3
- 1.2.1.4
- 1.2.1.5
- 1.2.2
- 1.2.3
- 1.2.3.1
- 1.2.3.2
- 1.2.4
- 1.2.5
- 1.2.6
- 1.4.0
- 1.4.0.1
- 1.4.0.2
- 1.4.0.3
- 1.4.1
- 1.4.1.1
- 1.4.2
- 1.4.2.1
- 1.4.2.2
- 1.4.3
- 1.4.3.1
- 1.4.4
- '1.5'
- 1.5.0.1
- 1.5.1.0
- 1.5.1.1
- 1.5.2
- 1.5.3
- 1.5.4
- 1.5.4.1
- 1.5.5
- 1.5.6
- 1.5.7
- 1.5.8
- 1.5.9
- 1.5.9.1
- 1.6.0
- 1.6.1
- 1.6.2
- 1.6.3
- 1.6.4
- 1.6.5
- 1.6.5.1
- 1.6.6
- 1.6.6.1
- 1.6.6.2
- 1.6.7
- 1.6.8
- 1.6.9
- 1.6.9.1
- 1.6.10
- 1.6.11
- 1.6.12
- 1.6.13
author: Nubis <nubis@woobiz.com.ar>
latest: 1.6.13
description-type: markdown
description: "# yesod-test\r\n\r\nPragmatic integration tests for haskell web applications
  using WAI and optionally a database (Persistent).\r\n\r\nIts main goal is to encourage
  integration and system testing of web applications by making everything *easy to
  test*. \r\n\r\nYour tests are like browser sessions that keep track of cookies and
  the last\r\nvisited page. You can perform assertions on the content of HTML responses\r\nusing
  CSS selectors.\r\n\r\nYou can also easily build requests using forms present in
  the current page.\r\nThis is very useful for testing web applications built in yesod
  for example,\r\nwhere your forms may have field names generated by the framework
  or a randomly\r\ngenerated CSRF \"\\_token\" field.\r\n\r\nYour database is also
  directly available so you can use runDB to set up\r\nbackend pre-conditions, or
  to assert that your session is having the desired effect.\r\n\r\nThe testing facilities
  behind the scenes are HSpec (on top of HUnit).\r\n\r\nThe code sample below covers
  the core concepts of yesod-test. Check out the\r\n[yesod-scaffolding for usage in
  a complete application](https://github.com/yesodweb/yesod-scaffold/tree/postgres/test).\r\n\r\n```haskell\r\nspec
  :: Spec\r\nspec = withApp $ do\r\n    describe \"Basic navigation and assertions\"
  $ do\r\n      it \"Gets a page that has a form, with auto generated fields and token\"
  $ do\r\n        get (\"url/to/page/with/form\" :: Text) -- Load a page.\r\n        statusIs
  200 -- Assert the status was success.\r\n\r\n        bodyContains \"Hello Person\"
  -- Assert any part of the document contains some text.\r\n        \r\n        --
  Perform CSS queries and assertions.\r\n        htmlCount \"form .main\" 1 -- It
  matches 1 element.\r\n        htmlAllContain \"h1#mainTitle\" \"Sign Up Now!\" --
  All matches have some text.\r\n\r\n        -- Performs the POST using the current
  page to extract field values:\r\n        request $ do\r\n          setMethod \"POST\"\r\n
  \         setUrl SignupR\r\n          addToken -- Add the CSRF _token field with
  the currently shown value.\r\n\r\n          -- Lookup field by the text on the labels
  pointing to them.\r\n          byLabel \"Email:\" \"gustavo@cerati.com\"\r\n          byLabel
  \"Password:\" \"secret\"\r\n          byLabel \"Confirm:\" \"secret\"\r\n\r\n      it
  \"Sends another form, this one has a file\" $ do\r\n        request $ do\r\n          setMethod
  \"POST\"\r\n          setUrl (\"url/to/post/file/to\" :: Text)\r\n          -- You
  can easily add files, though you still need to provide the MIME type for them.\r\n
  \         addFile \"file_field_name\" \"path/to/local/file\" \"image/jpeg\"\r\n
  \         \r\n          -- And of course you can add any field if you know its name.\r\n
  \         addPostParam \"answer\" \"42\"\r\n\r\n        statusIs 302\r\n\r\n    describe
  \"Database access\" $ do\r\n      it \"selects the list\" $ do\r\n        -- See
  the Yesod scaffolding for the runDB implementation\r\n        msgs <- runDB $ selectList
  ([] :: [Filter Message]) []\r\n        assertEqual \"One Message in the DB\" 1 (length
  msgs)\r\n```\r\n\r\n"
license-name: MIT
