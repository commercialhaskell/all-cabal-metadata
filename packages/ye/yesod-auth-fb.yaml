all-versions:
- '0.0'
- '0.10'
- 0.10.1
- 0.10.2
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- '1.1'
- '1.2'
- 1.2.1
- 1.2.2
- 1.2.3
- '1.3'
- 1.3.1
- 1.3.2
- '1.4'
- '1.5'
- 1.5.1
- '1.6'
- 1.6.1
- 1.6.2
- 1.6.2.1
- 1.6.3
- 1.6.4
- 1.6.5
- 1.6.6
- '1.7'
- 1.8.0
- 1.8.1
- 1.9.0
- 1.9.1
- 1.10.0
- 1.10.1
author: Felipe Lessa, Michael Snoyman
basic-deps:
  aeson: '>=0.6'
  base: '>=4.11 && <5'
  bytestring: '>=0.9'
  conduit: '>=1.3.0'
  fb: '>=2.1.1'
  http-conduit: '>=1.9'
  resourcet: '>=1.2.0'
  shakespeare: '>=2.0'
  text: '>=0.7'
  time: '>=1.0'
  transformers: '>=0.1.3'
  unliftio: '>=0'
  wai: '>=0'
  yesod-auth: '>=1.6.1'
  yesod-core: '>=1.6.1'
  yesod-fb: '>=0.6.1'
changelog: |
  # Version 1.10.1

  * Relex constraints to use new version of fb

  # Version 1.10.0

  * Relax bounds for latest lts
  * Upper bounds for fb, yesdod-fb etc.

  # Version 1.9.1.0

  * Compiles for GHC 8.6 now

  # Version 1.9.1

  * Only pass `code` query param to getUserAccessTokenStep2

  # Version 1.9.0

  * Supports conduit >= 1.3.0
  * Documentation updated to include demo code.
  * Supports latest yesod >= 1.6.0.
  * Remove dependency on lifted-base and related ecosystem.
changelog-type: markdown
description: |
  yesod-auth-fb
  ---------------

  [![Build Status](https://travis-ci.org/psibi/yesod-auth-fb.svg?branch=master)](https://travis-ci.org/psibi/yesod-auth-fb)
  [![Hackage](https://img.shields.io/hackage/v/yesod-auth-fb.svg)](https://hackage.haskell.org/package/yesod-auth-fb)
  [![Stackage
  Nightly](http://stackage.org/package/yesod-auth-fb/badge/nightly)](http://stackage.org/nightly/package/yesod-auth-fb)
  [![Stackage
  LTS](http://stackage.org/package/yesod-auth-fb/badge/lts)](http://stackage.org/lts/package/yesod-auth-fb)

  Authentication backend for Yesod using Facebook

  # Demo

  Sample code showing Facebook authentication in action:

  ```
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE QuasiQuotes #-}
  {-# LANGUAGE TemplateHaskell #-}
  {-# LANGUAGE TypeFamilies #-}
  {-# LANGUAGE OverloadedStrings #-}

  import Data.Text (Text)
  import Yesod
  import Yesod.Auth
  import Yesod.Facebook
  import Yesod.Auth.Facebook.ServerSide
  import Facebook (Credentials(..))

  fbclientId :: Text
  fbclientId = "sample_fb_client_id"

  fbclientSecret :: Text
  fbclientSecret = "sample_fb_secret"

  data App =
    App

  mkYesod
    "App"
    [parseRoutes|
  / HomeR GET
  /auth AuthR Auth getAuth
  |]

  instance Yesod App where
    approot = ApprootStatic "http://localhost:3000"

  instance YesodFacebook App where
    fbCredentials _ = Credentials "yesod" fbclientId fbclientSecret

  instance YesodAuth App where
    type AuthId App = Text
    getAuthId = return . Just . credsIdent
    loginDest _ = HomeR
    logoutDest _ = HomeR
    authPlugins _ = [authFacebook ["user_about_me", "email"]]
    -- The default maybeAuthId assumes a Persistent database. We're going for a
    -- simpler AuthId, so we'll just do a direct lookup in the session.
    maybeAuthId = lookupSession "_ID"

  instance RenderMessage App FormMessage where
    renderMessage _ _ = defaultFormMessage

  getHomeR :: Handler Html
  getHomeR = do
    maid <- maybeAuthId
    defaultLayout
      [whamlet|
              <p>Your current auth ID: #{show maid}
              $maybe _ <- maid
                  <p>
                      <a href=@{AuthR LogoutR}>Logout
                      <a href=@{AuthR facebookLogout}>Facebook logout
              $nothing
                  <p>
                      <a href=@{AuthR LoginR}>Go to the login page
          |]

  main :: IO ()
  main = warp 3000 App
  ```
description-type: markdown
hash: cbd93b3c90574b999e01361c3e96bd80382483a334bdba6dc0d0088ad618c024
homepage: https://github.com/psibi/yesod-auth-fb
latest: 1.10.1
license-name: BSD-3-Clause
maintainer: Sibi <sibi@psibi.in>
synopsis: Authentication backend for Yesod using Facebook.
test-bench-deps: {}
