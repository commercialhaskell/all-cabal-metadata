all-versions:
- 0.0.1
- '0.1'
- 0.1.1
- 0.1.1.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.3.1
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.2
author: Lars Kuhtz <lakuhtz@gmail.com>
basic-deps:
  Cabal: '>=1.18'
  aeson: '>=0.11'
  ansi-terminal: '>=0.6'
  async: '>=2.0'
  base: '>=4.8 && <5.0'
  base-unicode-symbols: '>=0.2'
  bytestring: '>=0.10'
  clock: '>=0.4'
  configuration-tools: '>=0.2.8'
  deepseq: '>=1.4'
  enclosed-exceptions: '>=1.0'
  exceptions: '>=0.8'
  lifted-base: '>=0.2.3'
  microlens: '>=0.4'
  monad-control: '>=1.0'
  mtl: '>=2.2'
  optparse-applicative: '>=0.11'
  stm: '>=2.4'
  stm-chans: '>=3.0'
  text: '>=1.2'
  time: '>=1.5'
  transformers: '>=0.3'
  transformers-base: '>=0.4'
  void: '>=0.7'
  yet-another-logger: '>=0'
changelog: |
  # yet-another-logger

  ## 0.4.2 (2023-06-23)

  *   Support mtl >=2.3.
  *   Tested with GHC-9.6.

  ## 0.4.1 (2022-07-07)

  *   Add a build flag for using `TBMQueue` instead of `TBMChan` as log message
      queue. (#54)

  *   Performance improvements under high load when many messages are dropped.
      (#53)

  ## 0.4.0 (2020-04-07)

  #### Changed

  - `microlens` is now used in place of `lens`.
  - The three lensy functions of the `LoggerCtx` class which were previously
    `Setter'` are now `Lens'`.
  - The following functions are now less polymorphic, requiring a strict `Text`
    instead of anything that had a `IsText` instance:
    - `readColorOption`
    - `readLoggerHandleConfig`
    - `readLogLevel`
    - `readLogPolicy`

  ## 0.3.1

  *   Add support for tasty-hunit >= 0.10.

  *   Raise lower bounds on some dependencies:
      *   base >= 4.8
      *   deepseq >= 1.4
      *   aeson >= 0.11
      *   time >= 1.5

  *   Require Cabal >= 1.22.

  *   Drop support for GHC < 7.10.

  ## 0.3.0

  *   Remove `EitherT` instance. It's recommended to use `ExceptT` instead.

  *   Remove `TraceT` instance. It's not actively maintained any more.

  *   Support aeson >= 0.11, which comes with instances for `Natural`.

  *   Support GHC-8.

  *   `MonadThrow`, `MonadCatch`, and `MonadMask` instances for `LoggerT`.

  *   Support for Cabal-1.18 and time >= 1.4 && < 1.5.

  ## 0.2.3.1

  *   Add missing NFData instance for `Natural` when build with
      deepseq>=1.4 and base<4.8.

  ## 0.2.3

  *   Fix semantically invalid default NFData instance when build with
      deepseq <1.4.

  ## 0.2.2

  *   [Issue #28] Generalized type of lens `logMsg` to support changing
      the message type.

  *   [Issue #29] Fixed precision of `formatIso8601` function.

  *   [Issue #30] Added a version of `withHandleBackend` that is generic
      in the log message type and accept a formatting function for
      formatting the log message as text.

  ## 0.2.1

  *   Support for trace-0.2.

  ## 0.2

  *   Removed `MonadLogIO`; `MonadBaseControl` should be used instead.

  *   Issue #16: add an argument to all command-line options parsers that
      adds a prefix to the command-line options.

  *   Issue #9: more robust logger backend

      *   new functions that take an function of type `Text -> IO ()` as
          an alternate backend to log issues in the logging system itself.

          *   `withLogger_`
          *   `withLogFunction_`
          *   `createLogger_`

      *   new parameters
          *   `loggerConfigExceptionLimit`:
              Number of consecutive backend exception that can occur before the logger
              raises an `BackendToManyExceptions` exception. If this is `Nothing`
              the logger will discard all exceptions.

          *   `loggerConfigExceptionWait`:
              Number of microseconds to wait after an exception from the backend.
              If this is 'Nothing' the logger won't wait at all after an exception.

          *   `loggerConfigExitTimeout`:
              Timeout in microseconds for the logger to flush the queue and
              deliver all remaining log messages on termination. If this is `Nothing`
              termination of the logger blogs until all mesages are delivered.

      *   new `LoggerException` type
          *   `QueueFullException` is thrown when the queue is full and the logger
              policy is to throw exceptions on a full queue.

          *   `BackendTerminatedException` can be thrown by a backend to force the
              logger immediately.

          *   `BackendToManyExceptions` is thrown when the backend is throwing some
              unexpected exception more than list `loggerConfigExceptionLimit` times.

  *   Issue #12: a test-suite got added to the package. Note that this test-suite takes
      a relatively long time to run all tests. In particular this an cause timeouts
      with travis-ci.

  *   Issue #14: the command line option for setting the log-level got fixed to be
      spelled `--log-level` (instead of `--loglevel`).

  *   Issue #22: added timestamp to log messages.

  *   Replaced usage of `Int` by `Natural` where adequate.

  *   Issue #6: use `TBMChan` as internal queue implementation until a new version of
      stm is released with a [fix for `TQueue`](https://ghc.haskell.org/trac/ghc/ticket/9539).

  ## 0.1.1

  *   Added `MonadLogIO` for loggers that allow to extract a log
      function of type `LogFunctionIO`.

  ## 0.1

  *   Added `localScope` function to `MonadLog` and and implemented `withLabel`
      based on it.

  *   Added functions `popLabel` and `clearScope`. These are useful when setting
      log-labels for bracket style functions.

  *   Remove overlapping `MonadLog` instances.

  *   Lift `MonadTrace` instances into `LoggerCtxT`.

  ## 0.0.1

  First public release
changelog-type: markdown
description: |
  ![](https://github.com/alephcloud/hs-yet-another-logger/workflows/Tests/badge.svg)

  A logging framework written with flexibility and performance in mind.

  Quick Start
  ===========

  ```haskell
  import System.Logger

  main ∷ IO ()
  main = withConsoleLogger Info $ do
      logg Info "moin"
      withLabel ("function", "f") f
      logg Warn "tschüss"
    where
      f = withLevel Debug $ do
          logg Debug "debug f"
  ```

  Overview
  ========

  The logging system consists of four main parts:

  1. The logging front-end are those types and functions that are used
     to produce log messages in the code. This includes the `LogLevel`
     type, the `LogPolicy` type, the `LogLabel` and `LogScope` types,
     the `LogFunction` type, and the `MonadLog` type class.

  2. The abstract `LoggerCtx` is the context through which the `LogFunction`
     delivers log messages to the logger back-end.

  3. The formatter is a function for serializing log messages.

  4. The logger back-end is a callback that is invoked by `Logger` on
     each log messages. The logger back-end applies the formatting function
     and delivers the log messages to some sink.

  The framework allows you to combine this components in a modular way. The
  front-end types, the `Logger`, and the back-end callback are represented by
  types or type classes. The formatter exists only as a concept in the
  implementation of back-ends. These types and concepts together form the
  abstract logger interface that is defined in the module `System.Logger.Types`.

  The package also provides a concrete Logger that implements these components
  in the module `System.Logger.Logger` and `System.Logger.Backend.Handle`.

  Logger Implementation
  =====================

  Writing a log message in a service application should introduce only minimal
  latency overhead in the thread where the log message is written. Processing
  should be done asynchronously as much as possible. This framework addresses
  this by doing all serialization and IO in an asynchronous logger back-end
  callback.

  When a log message is produced it is associated with a logger context. The
  logger context includes

  *   a log-level threshold,
  *   a scope, which is a list of key-value labels which are used to
      tag log messages with additional information, and
  *   a policy that specifies how to deal with a situation where the
      log message pipeline is congested.

  A log message can be any Haskell type with `Show`, `Typeable`, and `NFData`
  constraint. Ideally the logged value is computed anyways in the program so that
  constructing and forcing it does not introduce any additional overhead.

  When a log messages is produced it is tagged with a time stamp. This introduces
  overhead and there is be room for optimizations here. A log message also has a
  log-level. If the log-threshold that is effective at the time a log message is
  written isn't met, no message is produced.

  The logger has an internal log message queue. Further benchmarking should be
  done in chosen the queue implementation that is best suited for this purpose.

  The logger asynchronously reads log messages from the queue and calls the
  back-end callback for each message. Right now the code includes only a single
  back-end, namely for writing to a handle, but we are going to add more
  back-ends soon. Due to the modular design, it is possible to combine different
  back-ends into a single back-end so that messages are processed by more than a
  single back-end and delivered to more than a single sink.

  A back-end includes a formatting function. This is where, beside IO, most
  processing happens.

  Delaying the serialization to the very end of the processing pipeline has
  the following advantages:

  1.  serialization is done asynchronously,
  2.  serialization is done only for messages that are actually delivered and
      it is done only for those parts of the message that are relevant for the
      respective back-end, and
  3.  it is easy to deploy different serialization methods.

  For instance, when logging to the console, one usually wants a line-wise
  UNIX-tool friendly format. For a cloud service one may chose an efficient
  binary serialization with a back-end that stores messages in a remote database.
  There may be circumstances where the data of all or some messages is just
  aggregated for statistical analysis before the messages are discarded. The
  modular design, which decouples generation and serialization of log messages,
  allows one to accommodate these different scenarios by just using different
  back-ends, possibly parameterized by the formatting function.
description-type: markdown
hash: d6bb683dffc31129413d76ce3f30d357ce77c0cf8323180b45fdfa17a0820e43
homepage: https://github.com/alephcloud/hs-yet-another-logger
latest: 0.4.2
license-name: Apache-2.0
maintainer: Lars Kuhtz <lakuhtz@gmail.com>
synopsis: Yet Another Logger
test-bench-deps:
  async: '>=2.0'
  base: '>=4.8 && <5.0'
  base-unicode-symbols: '>=0.2'
  configuration-tools: '>=0.2.12'
  enclosed-exceptions: '>=1.0'
  lifted-base: '>=0.2'
  microlens: '>=0.4'
  tagged: '>=0.7'
  tasty: '>=0.10'
  tasty-hunit: '>=0.9'
  text: '>=1.2'
  transformers: '>=0.3'
  transformers-base: '>=0.4'
  void: '>=0.7'
  yet-another-logger: '>=0'
