all-versions:
- 0.9.0.0
- 0.10.0.0
- 0.11.0.0
- 0.12.0.0
- '0.13'
author: Frank Staals
basic-deps:
  MonadRandom: '>=0.5'
  QuickCheck: '>=2.5'
  aeson: '>=1.0'
  base: '>=4.11 && <5'
  bifunctors: '>=4.1'
  bytestring: '>=0.10'
  colour: '>=2.3.3'
  containers: '>=0.5.5'
  data-clist: '>=0.0.7.2'
  deepseq: '>=1.1'
  directory: '>=1.3'
  dlist: '>=0.7'
  filepath: '>=1.4'
  fingertree: '>=0.1'
  fixed-vector: '>=1.0'
  hexpat: '>=0.20.9'
  hgeometry: '>=0.13'
  hgeometry-combinatorial: '>=0.13'
  lens: '>=4.2'
  linear: '>=1.10'
  mtl: '>=0'
  parsec: '>=3'
  quickcheck-instances: '>=0.3'
  random: '>=0'
  reflection: '>=2.1'
  semigroupoids: '>=5'
  semigroups: '>=0.18'
  singletons: '>=2 && <3'
  template-haskell: '>=0'
  text: '>=1.1.1.0'
  typed-process: '>=0.2.6'
  vector: '>=0.11'
  vinyl: '>=0.10'
  yaml: '>=0.8'
changelog: |
  #+STARTUP: showeverything

  * Changelog

  ** 0.13

  - Newer BezierSpline parsing.
  - Renamed the modules from Data.Geometry.Ipe to simply Ipe. The
    following find and sed command should be able to help you migrate
    (but use it at your own risk)

    #+begin_src sh
    find src -name "*.hs" -exec sed -i -e 's/Data.Geometry.Ipe/Ipe/g' {} \;
    #+end_src
  - Better Documentation; i.e. specific reexports from the Ipe module.
  - Added functionality to load and add a stylesheet to a file.
  - Added support for the stroke-opacity attribute.
  - IpeRender and IpeToIpe modules that allows to us to easily call
    'iperender' and 'ipetoipe'. The IpeToIpe module now also defines a
    'wirteIpeFileAsPdf' function that allows us to write to an ipe pdf
    file (by calling ipetoipe to create this pdf.)

  ** 0.12

  - Compatibility with HGeometry 0.12

  ** 0.11
  - Split the Types module into smaller sub modules, and restricting
    what is exported.
  - Traversable, Foldable, and Functor instances for the ipe types.
  - Reading and Writing of Ellipses :)
  - Added Coordinate Float and IpeWriteText Float instances.
  - readAll now accepts only one IpePage rather than a Foldable f => f
    (IpePage r)
  - Renamed attrLens to ixAttr, and added a prism _Attr to access an
    attribute._
  - added convenience functions (well, Getter's) for getting all Ipe
    objects on a particular layer, or in a particular view.
  - readSinglePageFile now makes sure there is at least one layer / view
    in the file, and if not creates it. This matches the behaviour of
    ipe itself. See the new 'withDefaults' function in the Types module
    for the details.
  - fromContent now creates these layers and views as well.

  ** 0.10

  - Added a 'labeled' IpeOut that supports labeling geometric objects
    with some textual label
  - IpeWrite instance for NonEmpty Lists, and IpeWriteText and
    Coordinate instances for Data.RealNumber.Rational

  ** 0.9

  - First release in which hgeometry-ipe was split off from hgeometry.
changelog-type: text
description: |
  HGeometry-ipe
  =============

  This package provides an API for reading and writing Ipe
  (http://ipe.otfried.org) files. This is all very work in
  progress. Hence, the API is experimental and may change at any time!

  Here is an example showing reading a set of points from an Ipe file,
  computing the DelaunayTriangulation and the Euclidean Minimimum
  Spanning tree, and writing the result again to an output file. Refer
  to
  [hgeometry-examples](https://github.com/noinia/hgeometry/tree/master/hgeometry-examples/src/Demo/Delaunay.hs)
  for the full code.


  ```haskell
  mainWith                          :: Options -> IO ()
  mainWith (Options inFile outFile) = do
    pts <- readAllFrom @(Point 2 R) inFile
    let pts' = NonEmpty.fromList pts
        dt   = toPlanarSubdivision (Proxy @DTWorld) . delaunayTriangulation $ pts'
        emst = euclideanMST pts'
        out  = [ iO $ drawPlanarSubdivisionWith drawVtx drawEdge (drawInternalFace dt) drawOuterFace dt
                    ! attr SLayer "delaunayTriangulation"
               , iO $ drawTree' emst ! attr SLayer "emst"
               ]
        outputFile = singlePageFromContent out
    outputFile' <- addStyleSheetFrom "../hgeometry-ipe/resources/opacities.isy" outputFile
    writeIpeFile outFile outputFile'

  -- | The world in which the delaunay triangulation "lives"
  data DTWorld

  -- | Draw vertices using their default representation; disk marks. For
  -- the rest we keep their original attributes.
  drawVtx                         :: IpeOut' Maybe (VertexId' s, VertexData r (IpeAttributes IpeSymbol r)) IpeSymbol r
  drawVtx (_vi, VertexData p ats) = Just $ defIO p ! ats

  -- | Draw edges using normal line segments
  drawEdge              :: IpeOut' Maybe (Dart s,      LineSegment 2 v r :+ e)  Path r
  drawEdge (_d, s :+ _) = Just $ defIO s

  -- | Internal faces are filled polygons.
  drawInternalFace                 :: PlanarSubdivision s v e f r
                                   -> IpeOut' Maybe (FaceId' s,   SomePolygon v r :+ f)    Path r
  drawInternalFace s (fi, pg :+ _) = Just $ defIO pg ! attr SFill lightcyan

  --
  drawOuterFace :: (Ord r, Num r) => IpeOut' Maybe (FaceId' s,   MultiPolygon (Maybe v) r :+ f) Path r
  drawOuterFace (_, pg :+ _) = Just $ defIO pg ! attr SOpacity "10%"
                                               ! attr SFill lightgray
  ```

  See the [hgeometry-examples](https://github.com/noinia/hgeometry/tree/master/hgeometry-examples) package for more examples.
description-type: markdown
hash: a172d6532935366f0c6f27cc0735707adc13cd6daf451eaf54a418d28cf27aba
homepage: https://fstaals.net/software/hgeometry
latest: '0.13'
license-name: BSD-3-Clause
maintainer: frank@fstaals.net
synopsis: Reading and Writing ipe7 files.
test-bench-deps:
  MonadRandom: '>=0'
  QuickCheck: '>=2.5'
  approximate-equality: '>=1.1.0.2'
  base: '>=0'
  bytestring: '>=0'
  colour: '>=0'
  containers: '>=0'
  data-clist: '>=0'
  directory: '>=0'
  filepath: '>=0'
  hgeometry: '>=0'
  hgeometry-combinatorial: '>=0'
  hgeometry-ipe: '>=0'
  hspec: '>=2.1'
  lens: '>=0'
  linear: '>=0'
  quickcheck-instances: '>=0.3'
  random: '>=0'
  semigroups: '>=0'
  singletons: '>=2 && <3'
  vector: '>=0'
  vinyl: '>=0'
  yaml: '>=0'
