homepage: https://fstaals.net/software/hgeometry
changelog-type: text
hash: d374880254cd411427c411898ce4da5ff1d1620bdb0359b1118089a6b0694a0f
test-bench-deps:
  data-clist: -any
  hgeometry-combinatorial: -any
  bytestring: -any
  MonadRandom: -any
  hgeometry: -any
  base: -any
  approximate-equality: '>=1.1.0.2'
  hspec: '>=2.1'
  filepath: -any
  semigroups: -any
  containers: -any
  singletons: ==2.*
  vinyl: -any
  lens: -any
  quickcheck-instances: '>=0.3'
  linear: -any
  colour: -any
  random: -any
  hgeometry-ipe: -any
  QuickCheck: '>=2.5'
  yaml: -any
  vector: -any
  directory: -any
maintainer: frank@fstaals.net
synopsis: Reading and Writing ipe7 files.
changelog: |
  #+STARTUP: showeverything

  * Changelog

  ** 0.11
  - Split the Types module into smaller sub modules, and restricting
    what is exported.
  - Traversable, Foldable, and Functor instances for the ipe types.
  - Reading and Writing of Ellipses :)
  - Added Coordinate Float and IpeWriteText Float instances.
  - readAll now accepts only one IpePage rather than a Foldable f => f
    (IpePage r)
  - Renamed attrLens to ixAttr, and added a prism _Attr to access an
    attribute._
  - added convenience functions (well, Getter's) for getting all Ipe
    objects on a particular layer, or in a particular view.
  - readSinglePageFile now makes sure there is at least one layer / view
    in the file, and if not creates it. This matches the behaviour of
    ipe itself. See the new 'withDefaults' function in the Types module
    for the details.
  - fromContent now creates these layers and views as well.

  ** 0.10

  - Added a 'labeled' IpeOut that supports labeling geometric objects
    with some textual label
  - IpeWrite instance for NonEmpty Lists, and IpeWriteText and
    Coordinate instances for Data.RealNumber.Rational

  ** 0.9

  - First release in which hgeometry-ipe was split off from hgeometry.
basic-deps:
  semigroupoids: '>=5'
  data-clist: '>=0.0.7.2'
  hgeometry-combinatorial: '>=0.12.0.0'
  bytestring: '>=0.10'
  reflection: '>=2.1'
  fingertree: '>=0.1'
  MonadRandom: '>=0.5'
  hgeometry: '>=0.12.0.0'
  base: '>=4.11 && <5'
  text: '>=1.1.1.0'
  parsec: '>=3'
  dlist: '>=0.7'
  semigroups: '>=0.18'
  containers: '>=0.5.5'
  singletons: ==2.*
  vinyl: '>=0.10'
  lens: '>=4.2'
  quickcheck-instances: '>=0.3'
  bifunctors: '>=4.1'
  fixed-vector: '>=1.0'
  linear: '>=1.10'
  mtl: -any
  hexpat: '>=0.20.9'
  colour: '>=2.3.3'
  random: -any
  deepseq: '>=1.1'
  QuickCheck: '>=2.5'
  aeson: '>=1.0'
  template-haskell: -any
  yaml: '>=0.8'
  vector: '>=0.11'
all-versions:
- 0.9.0.0
- 0.10.0.0
- 0.11.0.0
- 0.12.0.0
author: Frank Staals
latest: 0.12.0.0
description-type: markdown
description: |
  HGeometry-ipe
  =============

  This package provides an API for reading and writing Ipe
  (http://ipe.otfried.org) files. This is all very work in
  progress. Hence, the API is experimental and may change at any time!

  Here is an example showing reading a set of points from an Ipe file,
  computing the DelaunayTriangulation, and writing the result again to
  an output file

  ```haskell
  mainWith                          :: Options -> IO ()
  mainWith (Options inFile outFile) = do
      ePage <- readSinglePageFile inFile
      case ePage of
        Left err                         -> print err
        Right (page :: IpePage Rational) -> case page^..content.traverse._IpeUse of
          []         -> putStrLn "No points found"
          syms@(_:_) -> do
             let pts  = syms&traverse.core %~ (^.symbolPoint)
                 pts' = NonEmpty.fromList pts
                 dt   = delaunayTriangulation $ pts'
                 out  = [iO $ drawTriangulation dt]
             writeIpeFile outFile . singlePageFromContent $ out
  ```

  See the [hgeometry-examples](https://github.com/noinia/hgeometry/tree/master/hgeometry-examples) package for more examples.
license-name: BSD-3-Clause
