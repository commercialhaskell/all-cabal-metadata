all-versions:
- 0.1.0.0
author: Sandy Maguire
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8.2 && <0.11'
  haskell-src-meta: '>=0.8.0.3 && <0.9'
  template-haskell: '>=2.14.0.0 && <2.15'
  text: '>=1.2.3.1 && <1.3'
changelog: ''
changelog-type: markdown
description: |
  # Text.InterpolatedString.QQ2

  [![Build Status](https://api.travis-ci.org/isovector/interpolatedstring-qq2.svg?branch=master)](https://travis-ci.org/isovector/interpolatedstring-qq2)
  [![Hackage](https://img.shields.io/hackage/v/interpolatedstring-qq2.svg?logo=haskell)](https://hackage.haskell.org/package/interpolatedstring-qq2)

  QuasiQuoter for QQ2-style multi-line interpolated strings with "q", "qq" and
  "qc" support.

  ## Description

  QuasiQuoter for interpolated strings using Perl 6 syntax.

  The q form does one thing and does it well: It contains a multi-line string with
  no interpolation at all:

  ```haskell
  {-# LANGUAGE QuasiQuotes, ExtendedDefaultRules #-}
  import Text.InterpolatedString.QQ2 (q)
  foo :: String -- Text, ByteString etc also works
  foo = [q|

  Well here is a
      multi-line string!

  |]
  ```

  Any instance of the IsString class is permitted.

  The qc form interpolates curly braces: expressions inside #{} will be
  directly interpolated if it's a Char, String, Text or ByteString, or
  it will have show called if it is not.

  Escaping of '{' is done with backslash.

  For interpolating numeric expressions without an explicit type signature,
  use the ExtendedDefaultRules lanuage pragma, as shown below:

  ```haskell
  {-# LANGUAGE QuasiQuotes, ExtendedDefaultRules #-}
  import Text.InterpolatedString.QQ2 (qc)
  bar :: String
  bar = [qc| Well #{"hello" ++ " there"} #{6 * 7} |]
  ```

  bar will have the value " Well hello there 42 ".

  If you want control over how show works on your types, define a custom
  ShowQ instance:

  For example, this instance allows you to display interpolated lists of strings as
  a sequence of words, removing those pesky brackets, quotes, and escape sequences.

  ```haskell
  {-# LANGUAGE FlexibleInstances #-}
  import Text.InterpolatedString.QQ2 (qc, ShowQ(..))
  instance ShowQ [String] where
      showQ = unwords
  ```

  qc permits output to any types with both IsString and Monoid
  instances.

  ```haskell
  {-# LANGUAGE QuasiQuotes, OverloadedStrings #-}
  import Text.InterpolatedString.QQ2 (qc)
  import Data.Text (Text)
  import Data.ByteString.Char8 (ByteString)
  qux :: ByteString
  qux = [qc| This will convert #{"Text" :: Text} to #{"ByteString" :: ByteString} |]
  ```
description-type: markdown
hash: 221e4d7bff33e45e14abe510e3fb9323e7a5bd6d13fe9436e6e56254a658419e
homepage: https://github.com/isovector/interpolatedstring-qq2#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: sandy@sandymaguire.me
synopsis: QuasiQuoter for multi-line interpolated strings
test-bench-deps:
  HUnit: '>=1.6.0.0 && <1.7'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8.2 && <0.11'
  haskell-src-meta: '>=0.8.0.3 && <0.9'
  interpolatedstring-qq2: '>=0'
  template-haskell: '>=2.14.0.0 && <2.15'
  text: '>=1.2.3.1 && <1.3'
