all-versions:
- '0.1'
- 0.1.1
- 0.1.1.1
- 0.1.1.2
- 0.1.2
- '0.2'
- 0.2.0.1
- '0.3'
- '0.4'
- 0.4.1
- 0.4.1.1
- 0.4.1.2
- 0.4.2
- 0.4.2.1
- 0.4.2.2
- 0.4.2.4
- 0.4.3.0
- 0.4.4.0
- 0.4.5.0
- 0.4.6.0
- 0.4.6.1
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- '0.6'
- 0.6.1
- 0.6.2
author: Joachim Breitner
basic-deps:
  base: '>=4.9 && <4.22'
  containers: '>=0'
  ghc: '>=8.0.2 && <9.13'
  mtl: '>=0'
  template-haskell: '>=0'
  transformers: '>=0'
changelog: "# Revision history for inspection-testing\n\n## 0.6.2 -- 2025-06-13\n\n*
  Fix an bug that would cause a GHC panic\n* Fix `=/~` and `=/-` \n* Syntax directed
  comparison of lets\n\n(all thanks Oleg Grenrus)\n\n## 0.6.1 -- 2025-06-11\n\n* Improve
  presentation of term inequalities (thanks Oleg Grenrus)\n\n## 0.6 -- 2025-01-01\n\n*
  Support GHC 9.10.1 (thanks Andre Van Der Merwe)\n* Support GHC 9.12 (thanks Erik
  de Castro Lopo)\n* Ignore SourceNote tick (thanks Potato Hatsue)\n\n## 0.5.0.3 --
  2023-12-29\n\n* Support GHC 9.10 (thanks Bodigrim)\n\n## 0.5.0.2 -- 2023-07-10\n\n*
  Support GHC 9.8 (thanks Bodigrim)\n\n## 0.5.0.1 -- 2023-01-15\n\n* Support mtl-2.3
  and GHC 9.6 (thanks Bodigrim)\n\n## 0.5 -- 2022-06-15\n\n* New equivalence `==~`
  that accepts different order of bindings in lets. (thanks @phadej)\n* When printing
  terms that differ, common up a common prefix of lambdas (thanks @phadej)\n\n## 0.4.6.1
  -- 2022-05-20\n\n* Support GHC 9.4 (thanks @parsonsmatt)\n\n## 0.4.6.0 -- 2020-08-23\n\n*
  Support GHC 9.2 (thanks @Bodigrim)\n\n## 0.4.5.0 -- 2020-04-28\n\n* Export some
  internals from `Test.Inspection.Plugin`, to make integration into\n  testing frameworks
  easier (thanks @Bodigrim)\n\n## 0.4.4.0 -- 2020-04-21\n\n* More GHC-9.0 compatibility
  (thanks @aadaa-fgtaa)\n\n## 0.4.3.0 -- 2020-01-26\n\n* Ignores HPC ticks in `(==-)`
  (thanks @konn)\n* Add `(=/-)` operator (thanks @lysxia)\n* Add skip-O0 plugin option
  (thanks @AndrasKovacs)\n* GHC-9.0 compatibility (thanks @konn)\n* CI now runs on
  Github Actions (thanks @phadej)\n\n## 0.4.2.4 -- 2020-01-26\n\n* Now prints the
  name of the type class on which a test fails, thanks to\n  Harendra Kumar\n* More
  examples, thanks to Rafe\n\n## 0.4.2.3 -- 2020-01-26\n\n* Support GHC-8.10, thanks
  to Ryan Scott via head.hackage for the patch\n\n## 0.4.2.1 -- 2019-06-07\n\n* Bugfix
  release\n\n## 0.4.2 -- 2019-06-05\n\n* Be less picky if mutually recursive definitions
  appear in a different order\n  in the source\n* Add obligation `coreOf`, which succeeds,
  but lets you dump the core of a\n  single symbol (thanks to @phadej)\n* Support
  `-fplugin-opt=Test.Inspection.Plugin:keep-going-O0` (thanks to @phadej)\n\n## 0.4.1.2
  -- 2019-02-23\n\n* Do not force recompilation with GHC >= 8.6\n* Support `-fplugin-opt=Test.Inspection.Plugin:quiet`\n\n##
  0.4.1.1 -- 2018-11-17\n\n* Fix a bug with `doesNotUse` and data constructors\n\n##
  0.4.1 -- 2018-11-17\n\n* New obligation `doesNotUse`\n* Use the Obligationâ€™s testName
  in the plugin output.\n* In `inspect`, do not override `srcLoc` if already present.\n\n##
  0.4 -- 2018-10-12\n\n* Support GHC-8.6\n* On GHC-8.4 or newer, `inspect` and `inspectTest`
  will automatically load the\n  plugin.\n\n## 0.3 -- 2018-07-07\n\n* On GHC-8.5 or
  newer, use of `inspect` or `inspectTest` without actually\n  loading the plugin
  will cause compilation to fail at type-checking time\n  (thanks to @adamgundry for
  the idea)\n* Support for `hasNoTypeClass` (thanks to @phadej)\n* Support for `hasNoGenerics`
  (thanks to @isovector)\n* No need to keep referenced variables alive using annotations:\n
  \ Simply mentioning them in a Template Haskell splice keeps them alive!\n\n## 0.2.0.1
  -- 2018-02-02\n\n* Support GHC HEAD (8.5)\n\n## 0.2 -- 2018-01-17\n\n* With `$(inspectTest
  obligation)` you can now get the result of inspection\n  testing at run-time, for
  integration into your test suite.\n\n## 0.1.2 -- 2017-11-20\n\n* Make `(==-)` a
  bit more liberal, and look through variable redefinitions that\n  only change the
  type\n\n## 0.1.1.2 -- 2017-11-12\n\n* Hotfix: Do not abort if there are expected
  failures\n\n## 0.1.1.1 -- 2017-11-12\n\n* Show summary stats\n* Pull in less tests,
  to make inclusion in stackage easier\n\n## 0.1.1 -- 2017-11-09\n\n* More complete
  output when `(===)` fails\n* Variant `(==-)` that ignores types when comparing terms\n\n##
  0.1 -- 2017-11-09\n\n* Repackaged as inspection-testing\n\n## 0.1.1  -- 2017-09-05\n\n*
  Also run simplifier in stage 0\n\n## 0.1  -- 2017-08-26\n\n* Initial release to
  hackage\n\n## 0  -- 2017-02-06\n\n* Development of ghc-proofs commences\n"
changelog-type: markdown
description: |+
  Inspection Testing for Haskell
  ==============================

  This GHC plugin allows you to embed assertions about the intermediate code into
  your Haskell code, and have them checked by GHC. This is called _inspection
  testing_ (as it automates what you do when you manually inspect the
  intermediate code).

  Synopsis
  --------

  See the `Test.Inspection` module for the documentation, but there really isn't much
  more to it than:

  ```haskell
  {-# LANGUAGE TemplateHaskell #-}
  module Simple where

  import Test.Inspection
  import Data.Maybe

  lhs, rhs :: (a -> b) -> Maybe a -> Bool
  lhs f x = isNothing (fmap f x)
  rhs f Nothing = True
  rhs f (Just _) = False

  inspect $ 'lhs === 'rhs
  ```

  If you compile this, you will reassurringly read:

  ```
  $ ghc Simple.hs
  [1 of 1] Compiling Simple           ( Simple.hs, Simple.o )
  examples/Simple.hs:14:1: lhs === rhs passed.
  inspection testing successful
        expected successes: 1
  ```

  See the [`examples/`](examples/) directory for more examples of working proofs.

  If an assertion fails, for example

  ```haskell
  bad1, bad2 :: Int
  bad1 = 2 + 2
  bad2 = 5

  inspect $ 'bad1 === 'bad2
  ```
  then the compiler will tell you so, and abort the compilation:
  ```
  $ ghc Simple.hs -dsuppress-idinfo
  [5 of 5] Compiling Simple           ( examples/Simple.hs, examples/Simple.o )
  examples/Simple.hs:14:1: lhs === rhs passed.
  examples/Simple.hs:20:1: bad1 === bad2 failed:
      LHS:
          bad1 :: Int
          bad1 = I# 4#

      RHS:
          bad2 :: Int
          bad2 = I# 5#


  examples/Simple.hs: error:
      inspection testing unsuccessful
            expected successes: 1
           unexpected failures: 1
  ```

  What can I check for?
  ---------------------

  Currently, inspection-testing supports

   * checking two definitions to be equal (useful in the context of generic
     programming)
   * checking the absence of a certain type (useful in the context of list or
     stream fusion)
   * checking the absence of a a use of certian functions
   * checking the absence of allocation (generally useful)
   * checking the absence of typeclass-overloaded code

  In general, the checks need to be placed in the same module as the
  checked-definition.

  Possible further applications includes

   * checking that all recursive functions are (efficiently called) join-points
   * asserting strictness properties (e.g. in `Data.Map.Strict`)
   * peforming some of these checks only within recursive loops

  Let me know if you need any of these, or have further ideas.

  Help, I am drowning in Core!
  ----------------------------

  inspection-testing prints the Core more or less like GHC would, and the same
  flags can be used to control the level of detail. In particular, you might want
  to pass to GHC a selection of the following flags:

      -dsuppress-idinfo -dsuppress-coercions -dsuppress-type-applications
      -dsuppress-module-prefixes -dsuppress-type-signatures -dsuppress-uniques


  It does not seem to do anything (on GHC < 8.4)
  ----------------------------------------------

  Add this line to your module:

      {-# OPTIONS_GHC -O -fplugin Test.Inspection.Plugin #-}

  Can I comment or help?
  ----------------------

  Sure! We can use the GitHub issue tracker for discussions, and obviously
  contributions are welcome.

description-type: markdown
hash: fd017b3e102dfd28385c8fde61b3d44bd711f539cc9a3cbe21d95b2faa9294a7
homepage: https://github.com/nomeata/inspection-testing
latest: 0.6.2
license-name: MIT
maintainer: mail@joachim-breitner.de
synopsis: GHC plugin to do inspection testing
test-bench-deps:
  base: '>=0'
  inspection-testing: '>=0'
...
