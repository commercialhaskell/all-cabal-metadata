homepage: https://github.com/KingoftheHomeless/in-other-words#readme
changelog-type: markdown
hash: eb898ee533f6d6a344e8ad51a72f487d90c1de41ff5d0a5b6890ccbb34b745f9
test-bench-deps:
  exceptions: ==0.10.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  hspec: '>=2.6.0 && <3'
  monad-control: ==1.0.*
  async: ==2.2.*
  mtl: ==2.2.*
  transformers-base: '>=0.4.5 && <0.5'
  transformers: '>=0.5.6 && <0.6'
  in-other-words: -any
maintainer: combiner8761@gmail.com
synopsis: A higher-order effect system where the sky's the limit
changelog: |
  # Changelog for `in-other-words`

  ## 0.2.1.0 (2021-11-05)
  ### Non-breaking Changes
  * Added `hoistSteps`
  * Added `threadBaseControlViaUnlift`
  * GHC 9.0.1 compatiblity (thanks @berberman!)

  ## 0.2.0.0 (2021-01-30)
  ### Breaking Changes
  * `-Fast` interpretations of every continuation-related effect have been removed due
    to lack of usefulness.
  * The `ThreadsEff (ContT r) (ReaderPrim i)` instance has been removed due to unlawfulness.
  * `Control.Monad.Trans.List.Church` and `Control.Monad.Trans.Free.Church.Alternate` have
      received a minor revamp. Notably, the representations of `ListT` and `FreeT` have been
      changed to become lawful monad transformers.
  * `bracketToIO` now executes the cleanup action of any `generalBracket`
      _uninterruptibly masked_.

  ### Non-breaking Changes
  * Fixed a bug where `listen` when using `listenToIO` would be lifted incorrectly by carriers
      based on `FreeT` and `ListT`, which arose due to these not having been lawful
      monad transformers.
  * All uses of `CompositionC` in the library has been changed to proper newtypes.
      This should improve the quality of error messages as well as compilation times.
  * Added `bracketToIOUnsafe`, which has the previous semantics of `bracketToIO`
      -- that is, the cleanup action of each `generalBracket` is only executed
      _interruptibly masked_.
  * `Control.Efffect.Newtype` now exports the constructors of `WrapperOf`, thus
       addressing an issue where users wouldn't be allowed to derive via `WrapperOf`.
  * `Control.Efffect.Carrier` now exports the constructors of `IdentityT`, thus
       addressing an issue where users wouldn't be allowed to derive via `IdentityT`.
  * Fixed an issue where `FailC` lacked a `MonadFail` instance.
  * Added `errorToIOAsExc` and `errorToErrorIOAsExc` (thanks @poscat0x04!)


  ## 0.1.1.0 (2020-10-30)
  ### Non-breaking Changes
  * Added `runTellAction` and `ignoreTell` interpreters.
  * Added `runEmbed` interpreter
  * Fixed an issue with `runShift` where HO-actions applied on a `shift` could affect the continuation provided to the argument of `shift`.


  ## 0.1.0.0 (2020-10-10)
  Initial release.
basic-deps:
  exceptions: ==0.10.*
  stm: ==2.5.*
  base: '>=4.7 && <5'
  monad-control: ==1.0.*
  async: ==2.2.*
  mtl: ==2.2.*
  transformers-base: '>=0.4.5 && <0.5'
  transformers: '>=0.5.6 && <0.6'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
author: Love Waern
latest: 0.2.1.0
description-type: markdown
description: "# in-other-words\n[![Hackage](https://img.shields.io/hackage/v/in-other-words.svg?logo=haskell)](https://hackage.haskell.org/package/in-other-words)\n[![build
  GHC 8.6](https://github.com/KingoftheHomeless/in-other-words/workflows/build%20GHC%208.6/badge.svg)](https://github.com/KingoftheHomeless/in-other-words/actions?query=workflow%3A%22build+GHC+8.6%22)\n[![build
  GHC 8.8](https://github.com/KingoftheHomeless/in-other-words/workflows/build%20GHC%208.8/badge.svg)](https://github.com/KingoftheHomeless/in-other-words/actions?query=workflow%3A%22build+GHC+8.8%22)\n[![build
  GHC 8.10](https://github.com/KingoftheHomeless/in-other-words/workflows/build%20GHC%208.10/badge.svg)](https://github.com/KingoftheHomeless/in-other-words/actions?query=workflow%3A%22build+GHC+8.10%22)\n[![build
  GHC 9.0.1](https://github.com/KingoftheHomeless/in-other-words/workflows/build%20GHC%209.0.1/badge.svg)](https://github.com/KingoftheHomeless/in-other-words/actions?query=workflow%3A%22build+GHC+9.0.1%22)\n\n-
  [Overview][]\n- [Features][]\n- [Required Language Extensions][]\n- [Examples of
  Simple Usage][]\n- [Advanced Usage][]\n- [Troubleshooting][]\n- [Performance][]\n\n[Overview]:
  https://github.com/KingoftheHomeless/in-other-words#overview\n[Features]: https://github.com/KingoftheHomeless/in-other-words#features\n[Required
  Language Extensions]: https://github.com/KingoftheHomeless/in-other-words#required-language-extensions\n[Examples
  of Simple Usage]: https://github.com/KingoftheHomeless/in-other-words#examples-of-simple-usage\n[Advanced
  Usage]: https://github.com/KingoftheHomeless/in-other-words#advanced-usage\n[Troubleshooting]:
  https://github.com/KingoftheHomeless/in-other-words#troubleshooting\n[Performance]:
  https://github.com/KingoftheHomeless/in-other-words#performance\n\n## Overview\n`in-other-words`
  is an effect system in the vein of [`freer-simple`](https://github.com/lexi-lambda/freer-simple),\n[`fused-effects`](https://github.com/fused-effects/fused-effects),\n[`polysemy`](https://github.com/polysemy-research/polysemy),\nand
  [`eff`](https://github.com/hasura/eff). It represents effects through data types,\nmaking
  it simple to define, use, and interpret them.\n\nThe goal of `in-other-words` is
  to be as expressive and general of an\neffect system as possible while solving the
  *O(n<sup>2</sup>)* instances\nproblem. Its hallmark feature is the novel approach
  it takes to support\nhigher-order effects, making it significantly more powerful
  -- and sometimes\neasier to use -- than other effect libraries of its kind.\n\nIf
  you're experienced with the mechanisms behind `freer-simple`,\n`fused-effects`,
  and `polysemy`, and would like to learn more about what makes\n`in-other-words`
  different, see\n[this wiki page](https://github.com/KingoftheHomeless/in-other-words/wiki/The-Inner-Workings-of-the-Library).\n\nUnfortunately,
  in its current state `in-other-words` is rather inaccessible.\nAmple documentation
  and guides are provided for the library, but inexperienced\nusers are still likely
  to run into gotchas that result in very\nconfusing error messages. As such, if you're
  a beginner to effect systems,\n`freer-simple` or `polysemy` would serve as better
  starting points.\n\n## Features\n\n### Simple higher-order effects\nUnlike `fused-effects`
  and `polysemy` -- which both have intimidating\nboilerplate associated with the
  interpretation of higher-order effects\n--`in-other-words` makes it just as easy
  to interpret higher-order effects as\nfirst-order effects. Go [here](#higher-order)
  for an example.\n\n### No cumbersome restrictions to effects\nEvery effect system
  previously mentioned has serious restrictions in what\neffects they may represent.\n*
  `freer-simple` is restricted to first-order effects.\n* `fused-effects` and `polysemy`
  are built around\n[*Effect Handlers in Scope*](https://www.cs.ox.ac.uk/people/nicolas.wu/papers/Scope.pdf),\nwhose
  approach doesn't allow for sensible implementations of effects for\ncontinuations,
  coroutines, or nondeterminism.\n* `eff` is limited to what's implementable with
  delimited continuations, which\nexcludes actions such as\n[`pass`](https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Writer-Class.html#v:pass)\nfrom
  `MonadWriter`, and `async`/`await` style concurrency.\n\n`in-other-words` also places
  restrictions on what effects may be represented\n-- but in contrast to the libraries
  mentioned above, these restrictions are\nalmost completely negligable.<sup id=\"a1\">[1](#f1)</sup>
  This is possible because\nunlike most other effect systems, `in-other-words` does
  not attempt to make\nevery possible effect play nicely together with every other
  effect: instead,\njust like `mtl`, some effects can't be used together with other
  effects\n(depending on how they're interpreted),\nand this is enforced by constraints
  that interpreters may introduce.\n\n## Required Language Extensions\nThe following
  extensions are needed for basic usage of the library:\n\n```\n  - ConstraintKinds\n
  \ - DataKinds\n  - FlexibleContexts\n  - GADTs\n  - LambdaCase\n  - PolyKinds\n
  \ - RankNTypes\n  - TypeApplications\n  - TypeOperators\n  - TypeFamilies\n```\n\nSome
  features of the library could require enabling more extensions.\n\n\n## Examples
  of Simple Usage\n\nFirst-order usage:\n```haskell\nimport Control.Effect\nimport
  Control.Effect.Error\nimport Control.Effect.State\nimport Control.Effect.Reader\nimport
  Control.Effect.Writer\n\nimport Text.Read (readMaybe)\n\ndata Teletype m a where\n
  \ ReadTTY  :: Teletype m String\n  WriteTTY :: String -> Teletype m ()\n\nreadTTY
  :: Eff Teletype m => m String\nreadTTY = send ReadTTY\n\nwriteTTY :: Eff Teletype
  m => String -> m ()\nwriteTTY str = send (WriteTTY str)\n\nchallenge :: Eff Teletype
  m => m ()\nchallenge = do\n  writeTTY \"What is 3 + 4?\"\n  readTTY >>= \\str ->
  case readMaybe @Int str of\n    Just 7  -> writeTTY \"Correct!\"\n    _       ->
  writeTTY \"Nope.\" >> challenge\n\n\n-- Interpret a Teletype effect in terms of
  IO operations\nteletypeToIO :: Eff (Embed IO) m => SimpleInterpreterFor Teletype
  m\nteletypeToIO = interpretSimple $ \\case\n  ReadTTY      -> embed getLine -- use
  'embed' to lift IO actions.\n  WriteTTY msg -> embed $ putStrLn msg\n\n\n-- Make
  a challenge to the user\nchallengeIO :: IO ()\nchallengeIO = runM $ teletypeToIO
  $ challenge\n\n\n-- Interpret a `Teletype` effect in terms of `Ask` and `Tell` effects\nrunTeletype
  :: Effs '[Ask String, Tell String] m\n            => SimpleInterpreterFor Teletype
  m\nrunTeletype = interpretSimple $ \\case\n  ReadTTY -> ask\n  WriteTTY msg -> tell
  msg\n\n-- Runs a challenge with the provided inputs purely.\nchallengePure :: [String]
  -> Either String [String]\nchallengePure testInputs =\n    -- Extract the final
  result, now that all effects have been interpreted.\n    run\n    -- Run the @Throw
  String@ effect, resulting in @Either String [String]@\n  $ runThrow @String\n    --
  We discard the return value of @challenge@ -- () --\n    -- while retaining the
  list of told strings.\n  $ fmap fst\n    -- Run the @Tell String@ effect by gathering
  all told\n    -- strings into a list, resulting in ([String], ())\n  $ runTellList
  @String\n    -- Run the @State [String]@ effect with initial state\n    -- @testInputs@.
  @evalState@ discards the end state.\n  $ evalState testInputs\n    -- Interpret
  the @Ask String@ effect by going through the provided inputs\n    -- one by one.\n
  \   -- Throw an exception if we go through all the inputs without completing the\n
  \   -- challenge.\n  $ runAskActionSimple @String (do\n      get >>= \\case\n        []
  \    -> throw \"Inputs exhausted!\"\n        (x:xs) -> put xs >> return x\n    )\n
  \   -- Interpret @Teletype@ in terms of @Ask String@ and @Tell String@\n  $ runTeletype\n
  \   -- Run the main program @challenge@, which returns ()\n  $ challenge\n\n-- evaluates
  to True\ntestChallenge :: Bool\ntestChallenge =\n    challengePure [\"4\",\"-7\",
  \"i dunno\", \"7\"]\n == Right [\"What is 3 + 4?\", \"Nope.\"\n          ,\"What
  is 3 + 4?\", \"Nope.\"\n          ,\"What is 3 + 4?\", \"Nope.\"\n          ,\"What
  is 3 + 4?\", \"Correct!\"\n          ]\n```\n\n<span id=\"higher-order\">Higher-order
  usage:</span>\n```haskell\nimport Control.Effect\nimport Control.Effect.Bracket\nimport
  Control.Effect.Trace\nimport GHC.Clock (getMonotonicTime)\n\ndata ProfileTiming
  m a where\n  ProfileTiming :: String -> m a -> ProfileTiming m a\n\ntime :: Eff
  ProfileTiming m => String -> m a -> m a\ntime label m = send (ProfileTiming label
  m)\n\n-- Interpret a ProfileTiming effect in terms of IO operations,\n-- 'Trace',
  and 'Bracket'.\nprofileTimingToIO :: Effs '[Embed IO, Trace, Bracket] m\n                  =>
  SimpleInterpreterFor ProfileTiming m\nprofileTimingToIO = interpretSimple $ \\case\n
  \ ProfileTiming label action -> do\n    before <- embed getMonotonicTime\n    --
  To execute a provided computation when interpreting a\n    -- higher-order effect,
  just bind it.\n    -- You can also use other higher-order effects to interact with
  it!\n    a <-   action \n        `onError` -- Provided by 'Bracket'\n           trace
  (\"Timing of \" ++ label ++ \" failed due to some error!\")\n    after <- embed
  getMonotonicTime\n    trace (\"Timing of \" ++ label ++ \": \" ++ show (after -
  before) ++ \" seconds.\")\n    return a\n\nspin :: Monad m => Integer -> m ()\nspin
  0 = pure ()\nspin i = spin (i - 1)\n\nprofileSpin :: IO ()\nprofileSpin = runM $
  bracketToIO $ runTracePrinting $ profileTimingToIO $ do\n  time \"spin\" (spin 1000000)\n
  \ time \"spinAndFail\" (spin 1000000 >> undefined)\n{-\nThis prints the following
  (exact times are machine specific):\n\n  Timing of spin: 1.3399935999768786 seconds.\n
  \ Timing of spinAndFail failed due to some error!\n  *** Exception: Prelude.undefined\n-}\n```\n\n##
  Advanced Usage\n\nThe examples above are somewhat disingenuous; they cover only
  the simplest\nuses of the library. The library has a wide variety of features,\nand
  using them properly can get very complicated. Because of this,\n[`in-other-words`
  offers a wiki covering more advanced topics of the\nlibrary.](https://github.com/KingoftheHomeless/in-other-words/wiki/Advanced-Topics)\nCheck
  it out if you're interested in learning more about the\nlibrary,  or are struggling
  with a feature.\n\n\n## Troubleshooting\n[The wiki has a page for common error messages.](https://github.com/KingoftheHomeless/in-other-words/wiki/Common-Error-Messages-and-Issues)\nIf
  you run into any issues or strange error messages that you can't figure out\nfrom
  the wiki, feel free to make an issue about it. If not already covered, and\nif I
  can generalize the problem enough, then I'll expand the wiki to cover the\nissue.\n\n##
  Performance\nIn the microbenchmarks offered by [`effects-zoo`](https://github.com/ocharles/effect-zoo/)\n`in-other-words`
  performs comparably to `mtl` and `fused-effects`;\nat worst up to 2x slower than
  `fused-effects`. \nKeep in mind, however, that these *are* only microbenchmarks,
  and may not\npredict performance in the wild with perfect accuracy.\n[The benchmark
  results are available here.](https://github.com/KingoftheHomeless/in-other-words/wiki/Benchmarks)\n\n`in-other-words`
  is, like `mtl` and `fused-effects`, limited\nby how effectively the compiler is
  able to optimize away the\nunderlying abstractions.\n[As noted by Alexis King](https://github.com/ghc-proposals/ghc-proposals/pull/313#issuecomment-590143835),\nthe
  ideal situations under which these libraries are truly zero-cost are unrealistic\nin
  practice. Although this does adversely affect `in-other-words`,\nthe underlying
  dispatch cost of effects should be low enough to make\nto it largely negligable
  for most purposes -- in particular, IO-bound\napplications.\n\nFurther benchmarking,
  profiling, and optimizations are currently\nconsidered future goals of the library.\n\n***\n<b
  id=\"f1\">[1](#a1)</b> Every effect is required to be *representational*\nin the
  carrier monad. This means that if you can represent your effect using:\n* a `mtl`-style
  effect class\n* without any associated type families\n* and it can be newtype derived\n\nthen
  you can also represent your effect with `in-other-words`.\n"
license-name: BSD-3-Clause
