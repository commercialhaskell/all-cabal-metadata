all-versions:
- '0.1'
- 0.2.0
- 0.2.2
- 0.2.2.1
- 0.3.0
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.1.1
- 0.5.2
- '0.6'
- '0.8'
- 0.8.0.1
- '0.9'
- 0.9.0.1
- 0.9.1
- 0.9.1.1
- 0.9.1.2
- 0.9.1.3
- 0.9.1.4
- 0.9.2
- 0.9.3
- 0.9.4
- 0.9.5
author: Edward A. Kmett
basic-deps:
  array: '>=0.3 && <0.6'
  base: '>=4 && <5'
  bytestring: '>=0.9 && <0.13'
  hashable: '>=1.1 && <1.6'
  text: '>=0.11 && <2.2'
  unordered-containers: '>=0.2.1 && <0.3'
changelog: |
  0.9.5 [2023.08.08]
  ------------------
  * Remove a use of the partial `tail` function within `intern`.

  0.9.4 [2021.02.17]
  ------------------
  * Export `identity` from `Data.Interned.IntSet`.

  0.9.3 [2020.09.30]
  ------------------
  * Add `Hashable` instances for `InternedString`, `InternedByteString`,
    `InternedText`, and `IntSet`.

  0.9.2
  -----
  * Add a `Semigroup IntSet` instance.

  0.9
  ---
  * Removed `identity` from the Interned class, to support applications where the identity is obtained by other means (e.g. a unique Ptr value)

  0.8
  ---
  * Disabled cache removal as it was causing problems on large data sets. There is no good way to ensure that both references remain alive long enough to finish comparisons.
  * Switched to IORef from MVar

  0.7
  ---
  * Fixed problem where comparisons could happen between data structures while one was still a thunk, leading to equal structures comparing as inequal in limited circumstances, by appropriately using strictness annotations.

  0.6
  ---
  * Widened the caches so they don't go through a single MVar per type. This has made a dramatic impact on performance. However, this broke the previous invariant that newer entries always had higher Ids than older entries.

  0.5.2
  -----
  * Added Data.Interned.IntSet
changelog-type: markdown
description: |
  intern
  ======

  [![Hackage](https://img.shields.io/hackage/v/intern.svg)](https://hackage.haskell.org/package/intern) [![Build Status](https://github.com/ekmett/intern/workflows/Haskell-CI/badge.svg)](https://github.com/ekmett/intern/actions?query=workflow%3AHaskell-CI)

  Efficient hash-consing for arbitrary data types.

  Contact Information
  -------------------

  Contributions and bug reports are welcome!

  Please feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.

  -Edward Kmett
description-type: markdown
hash: 45e35f1d42db7b9d7d3049b5ee2170eb64e92996e73799ec24ae400f5d2a4785
homepage: http://github.com/ekmett/intern/
latest: 0.9.5
license-name: BSD-3-Clause
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Efficient hash-consing for arbitrary data types
test-bench-deps: {}
