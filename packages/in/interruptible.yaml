all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
author: Marcos Dumay de Medeiros
basic-deps:
  base: '>=4.7 && <5'
  either: '>=0'
  lifted-base: '>=0'
  monad-control: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Given an inner monad @M@ and a transformer @T@, if T is an interruptible transformer,
  it becomes possible to intercalate functions over its context with functions over the
  inner monad. That is, code like this:

  > runT (f 1 >>= g)
  > where
  >     f :: Int -> T M a
  >     g :: a -> T M b

  Can be broken up like this:

  > do
  > let c0 = inTCtx 1
  > c1 <- resume f c0
  > _ <- resume g c2

  That makes it possible to intercalate the execution of different contexts, and
  treat contexts like data, for iterating or returning them.

  As shown on the example, interruptible transformers are resumed with the @resume@ function.
  State may be managed by specialized functions usually named as @inTransfomerCtx@ and
  @peelTransformerCtx@ that enclose a value in an initial context and retrieve the
  value from a context.

  Interruptible transformers can be stacked. On this case, they must be resumed with a
  composition of @resume@ calls, and their contexts must be created and peeled on the inverse
  order that they appear on the stack. Like:

  > do
  > let c0 = inT2Ctx . inT1Ctx $ 1
  > c1 <- (resume . resume) f c0
  > _ <- (resume . resume) g c1
  > where
  >     f :: Monad m => Int -> T1 T2 M a
  >     g :: Monad m => a -> T1 T2 M b

  For convenience, the @Interruptible@ module exports the @resume2@ to @resume5@
  functions as composotions of resume. They can be composed further as in
  @resume7 = resume3 . resume4@ if necessary.

  This package also contains the appliable instantiations of Interruptible for the mtl transformers,
  the @intercalateWith@ function, that intercalates calls of a function through a list
  of contexts and parameters, and the @SafeIO@ module that lifts IOException treatment from the
  base monad into the current resumed context.
description-type: haddock
hash: 995d15d4358b5c31e289ac2840132c938c2635ae359e3624af7157e71667ce80
homepage: https://sealgram.com/git/haskell/interruptible/
latest: 0.1.1.1
license-name: BSD-3-Clause
maintainer: marcos@marcosdumay.com
synopsis: Monad transformers that can be run and resumed later, conserving their context.
test-bench-deps:
  Cabal: '>=1.9.2'
  base: '>=4.7 && <5.0'
  either: '>=0'
  interruptible: '>=0'
  transformers: '>=0'
