homepage: http://www.chr-breitkopf.de/comp/IntervalMap
changelog-type: text
hash: 18e3e3b9b3ac277ae45862eaae15d374100f151ee8a7b614b2fd89a85766413d
test-bench-deps:
  fingertree: '>=0.1'
  Cabal: '>=1.9.2'
  base: ==4.*
  SegmentTree: -any
  criterion: '>=1.0'
  containers: -any
  weigh: -any
  random: -any
  deepseq: -any
  QuickCheck: -any
maintainer: Christoph Breitkopf <chbreitkopf@gmail.com>
synopsis: Containers for intervals, with efficient search.
changelog: "0.6.2.0  Bugfix: Interval.overlaps could be true for empty intervals\n0.6.1.3
  \ Remove unneeded languages pragmas.\n0.6.1.2  Enable and fix more warnings.\n0.6.1.1
  \ Improve Semigroup instances.\n0.6.1.0  Add safe versions of find... functions.\n\n0.6.0.0
  \ Support ghc 8.4, desupport ghc 7.x.\n\n0.5.3.1  Remove HPC flag.\n0.5.3.0  Add
  lookupLT... functions.\n\n0.5.2.0  Bugfix: exported Prelude functions instead of
  correct ones.\n\n0.5.1.1  Improve performance of findLast.\n\n0.5.1.0  Major performance
  improvements.\n\n0.5.0.1  Improve performance of combine.\n\t Fix wrong doc comments.\n\n0.5.0.0
  \ Change return type of containing, ... to a map.\n         Add splitAt, splitIntersecting,
  flatten... functions.\n         Minor performance tweaks.\n\n0.4.1.1  Fix bug in
  benchmark.\n\n0.4.1.0  Add IntervalSet.\n         Minor performance tweaks.\n         Documentation
  updates.\n         Moved to GitHub.\n\n0.4.0.1  Documentation update. Wrong portability
  info fixed.\n\n0.4.0.0  Major update adding support for user-defined key intervals.\n\n0.3.0.3
  \ Updated benchmark to use Criterion 1.0. Tested with ghc 7.8.3.\n\n0.3.0.2  Dropped
  upper constraint on criterion. Tested with ghc 7.6.3.\n         Migrated repo to
  Darcs Hub.\n\n0.3.0.1  Bugfixes: Lazy was too strict, Strict too lazy.\n\n0.3.0.0
  \ Split into Lazy and Strict modules, following containers.\n\n"
basic-deps:
  base: '>=4 && <5'
  containers: -any
  deepseq: -any
all-versions:
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.3.1
- 0.2.3.2
- 0.2.3.3
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.4.1.1
- 0.5.0.0
- 0.5.0.1
- 0.5.1.0
- 0.5.1.1
- 0.5.2.0
- 0.5.3.1
- 0.6.0.0
- 0.6.1.0
- 0.6.1.1
- 0.6.1.2
- 0.6.2.0
author: Christoph Breitkopf
latest: 0.6.2.0
description-type: markdown
description: |
  # IntervalMap [![Hackage](https://img.shields.io/hackage/v/IntervalMap.svg)](https://hackage.haskell.org/package/IntervalMap) [![Build Status](https://travis-ci.org/bokesan/IntervalMap.svg?branch=master)](https://travis-ci.org/bokesan/IntervalMap)

  Containers for intervals. Like `Data.Set` and `Data.Map` with
  Intervals as keys and functions for efficiently getting the subset
  of all intervals containing a point, intersecting an interval, and more.

  Home page and documentation: [http://www.chr-breitkopf.de/comp/IntervalMap/index.html](http://www.chr-breitkopf.de/comp/IntervalMap/index.html)

  ## Getting started

  Enable necessary language extensions:
  ```haskell
  {-# LANGUAGE MultiParamTypeClasses, FlexibleInstances #-}
  ```
  In most cases, you should use the value-strict version:
  ```haskell
  import qualified Data.IntervalMap.Generic.Strict as IM
  ```
  Make tuples an instance of Interval:
  ```haskell
  instance Ord e => IM.Interval (e,e) e where
      lowerBound (a,_) = a
      upperBound (_,b) = b
      rightClosed _ = False
  ```
  By using `rightClosed _ = False` we have defined tuples to be half-open
  intervals - they include the starting value, but not the end value.

  Let's create a map from `(Int,Int)` intervals to strings:
  ```haskell
  type MyMap = IM.IntervalMap (Int,Int) String

  sample :: MyMap
  sample = IM.fromList [((1,6), "Foo"), ((2,4), "Bar"), ((4,7), "Baz")]
  ```
  Lookup intervals containing a given point ("stabbing query"):
  ```
  > IM.toAscList (sample `IM.containing` 3)
  [((1,6),"Foo"),((2,4),"Bar")]
  > IM.toAscList (sample `IM.containing` 4)
  [((1,6),"Foo"),((4,7),"Baz")]
  ```
license-name: BSD-3-Clause
