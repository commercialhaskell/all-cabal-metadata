all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.3.1
- 0.2.3.2
- 0.2.3.3
- 0.2.3.4
- 0.2.4
- 0.2.4.1
- 0.2.5
- 0.2.5.1
- 0.2.5.2
- 0.2.5.3
- 0.2.5.4
- '0.3'
- 0.3.1
- 0.3.1.1
- 0.3.2
- 0.3.2.1
- 0.3.2.2
- 0.3.3
- '0.4'
- 0.4.0.1
- 0.4.0.2
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.0.5
- 0.5.1
author: Mario Blazevic
basic-deps:
  base: '>=4.9 && <5'
  input-parsers: <0.4
  logict: '>=0.6 && <0.9'
  monoid-subclasses: <1.3
  parsers: <0.13
  rank2classes: '>=1.0 && <1.6'
  transformers: '>=0.5 && <0.7'
changelog: |
  # Revision history for incremental-parser

  ## 0.5.1 -- 2023-12-19

  * Replaced the ListT transformer with LogicT
  * Bumped dependency bounds
  * Fixed some compiler warnings

  ## 0.5.0.5 -- 2023-04-09

  * Allow `monoid-subclasses-1.2` and `rank2classes-1.5`, thanks to felixonmars

  ## 0.5.0.4 -- 2022-10-03

  * Incremented dependency versions.

  ## 0.5.0.3 -- 2022-03-09

  * Allow `checkers-0.6`

  ## 0.5.0.2 -- 2021-03-07

  * Incremented `monoid-subclasses` and `input-parsers` upper bounds

  ## 0.5.0.1 -- 2020-12-25

  * Incremented the `tasty` dependency version bounds

  ## 0.5 -- 2020-07-18

  * Fixed the `take` method implementation
  * Added the `DeterministicParsing` instance
  * Cleaned up the comments and warnings
  * Added the `InputCharParsing` instance
  * Added the `InputParsing` instance

  ## 0.4.0.2 -- 2020-05-10

  * Bumped up the upper dependency bound for `tasty`

  ## 0.4.0.1 -- 2020-03-08

  * Relax bound of `rank2classes` to < 1.5, thanks to felixonmars

  ## 0.4 -- 2020-01-21

  * Improved error reporting
  * Changed the result type of inspect to report the error message
  * Added the missing `Choice` in `ResultStructure` case, eliminated all warnings except `ListT`
  * Generalized the `CharParsing` instance
  * Added `mapInput` and `mapInput'`
  * Preserve the input left after `ResultStructure`
  * Generalized `ResultStructure` off `Identity`
  * Eta-reduced the `Parser` type synonyms
  * Added `ResultStructure` and the record combinator
  * Moved the source code into the `src/` directory
  * Added instances for `MonoidFix` and `*Parsing` classes

  ## 0.3.3 -- 2019-10-10

  * Updated for `monoid-subclasses-1.0`

  ## 0.3.2.2 -- 2019-03-30

  * Bumped the `checkers` dependency version bound
  * Fixed a bug in the ordering of incremental results

  ## 0.3.2.1 -- 2019-12-03

  * Incremented the upper bound for `tasty`

  ## 0.3.2 -- 2018-10-14

  * Added `MonadFail` instance

  ## 0.3.1.1 -- 2018-05-12

  * Incremented the tasty upper bound
  * Fixed compilation with GHC 8.2

  ## 0.3.1 -- 2018-04-26

  * Building with GHC-8.4 and `Semigroup`
  * Limited the `base` upper bound

  ## 0.2.5.3 -- 2018-01-09

  * Incremented the upper bound for `tasty`
changelog-type: markdown
description: |
  The incremental-parser library is yet another parser combinator library, providing the usual set of `Applicative`,
  `Alternative`, and `Monad` combinators. Apart from this, it has four twists that make it unique.

  #### Parsing incrementally

  First, the parser is incremental. Not only can it be fed its input in chunks, but in proper circumstances it can also
  provide its output in parsed chunks. For this to be possible the result type must be a `Monoid`. The complete parsing
  result is then a concatenation of the partial results.

  In order to make the incremental parsing easier, the combinator set is optimized for monoidal results. Apart from the
  usual combinators `many` and `some`, for example, there are `concatMany` and `concatSome` operators.

  ```haskell
      many :: Parser s r -> Parser s [r]
      concatMany :: (Monoid s, Monoid r) => Parser s r -> Parser s r
  ```

  #### Arbitrary monoidal inputs

  The second weirdness, this one shared with [Picoparsec](http://hackage.haskell.org/package/picoparsec), is that the the
  parser is generic in its input stream type, but this type is parameterized in a holistic way. There is no separate token
  type. Primitive parsers that need to peek into the input require its type to be an instance of a monoid subclass, from
  the [monoid-subclasses](http://hackage.haskell.org/package/monoid-subclasses) package.

  In Parsec:

  ```haskell
      string :: Stream s m Char => String -> ParsecT s u m String
      char :: Stream s m Char => Char -> ParsecT s u m Char
      anyToken :: (Stream s m t, Show t) => ParsecT s u m t
  ```

  In Attoparsec:

  ```haskell
      string :: ByteString -> Parser ByteString
      word8 :: Word8 -> Parser Word8
      anyWord8 :: Parser Word8
  ```

  In incremental-parser and Picoparsec:

  ```haskell
      string :: (LeftCancellativeMonoid s, MonoidNull s) => s -> Parser s s
      token :: (Eq s, FactorialMonoid s) => s -> Parser s s
      anyToken :: FactorialMonoid s => Parser s s
  ```

  #### Two `Alternative` alternatives

  The library being implemented on the basis of Brzozowski derivatives, it can provide both the symmetric and the
  left-biased choice, `<||>` and `<<|>`. This is the same design choice made by
  [`Text.ParserCombinators.ReadP`](http://hackage.haskell.org/package/base/docs/Text-ParserCombinators-ReadP.html#g:2) and
  [uu-parsinglib](http://hackage.haskell.org/package/uu-parsinglib). Parsec and its progeny on the other hand provide only
  the faster left-biased choice, at some cost to the expressiveness of the combinator language. The standard `<|>`
  operator from the `Alternative` class acts as one or the other of the above, depending on whether the first type
  parameter of `Parser` is `Symmetric` or `LeftBiasedLocal`.

  #### `MonadFix` and `record`

  Finally, the parser is an instance of the `MonadFix` class. Beware of its power. In particular, never ever try to
  `mfix` a strict function. This will hang. The argument of `mfix` takes the value constructed by the argument parser at
  the very same input position it's looking at. The best and probably the only safe and useful argument to `mfix` is the
  `record` function. See the [construct](https://hackage.haskell.org/package/construct) library for examples.
description-type: markdown
hash: b0b0d929fa5ba8f3c4791c5c53f38fbc30e2a38147dd8f6c8f40608d6a63b81d
homepage: https://github.com/blamario/incremental-parser
latest: 0.5.1
license-name: GPL-3.0-only
maintainer: blamario@yahoo.com
synopsis: Generic parser library capable of providing partial results from partial
  input.
test-bench-deps:
  QuickCheck: '>=2 && <3'
  base: <5
  bytestring: '>=0.10.4.0'
  checkers: '>=0.3.2 && <0.7'
  criterion: '>=1.0'
  deepseq: '>=1.1'
  incremental-parser: '>=0'
  monoid-subclasses: <1.3
  tasty: '>=0.7 && <1.6'
  tasty-quickcheck: '>=0.7 && <1.0'
  text: '>=1.1.1.0'
