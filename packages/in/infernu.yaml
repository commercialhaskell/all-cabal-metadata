all-versions:
- 0.0.0.0
- 0.0.0.1
author: Noam Lewis
basic-deps:
  base: '>=4.6 && <5'
  containers: '>=0'
  digits: '>=0'
  either: '>=0'
  fgl: '>=0'
  infernu: '>=0'
  language-ecmascript: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  parsec: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "# Infernu\n\nStatic type inference for JavaScript. (In early development.)\n\nSee
  the [intro blog post](https://noamlewis.wordpress.com/2015/01/20/introducing-sjs-a-type-inferer-and-checker-for-javascript/)
  for a short discussion comparing infernu to **other type checkers**.\n\n*(Formerly
  known as Inferno / Safe JS / SJS)*\n\n**Features:**\n\n* Full type inference: no
  type annotations necessary.\n* Parametric polymorphism (aka \"generics\"), based
  on Hindley-Milner type inference.\n* Row-type polymorphism, otherwise known as \"static
  duck typing\".\n* Simple type classes (which allow for example correct support of
  JS `+` and `[]` operators).\n* Recursive types for true representation of object-oriented
  methods.\n* Correct handling of JS's `this` dynamic scoping rules.\n\nFor more information
  see [Infernu's Type System](docs/type-system.md).\n\n## Installation\n\n### Quick
  and Dirty\n\n    git clone git@github.com:sinelaw/infernu.git\n    cd infernu/\n
  \   cabal install\n\nUsage: see `infernu --help`\n    \nQuick example usage:\n\n
  \   echo 'function getLength(x) { return x.length; }' > getLength.js\n\n    infernu
  getLength.js\n\nOutput:\n\n```javascript\n    //       getLength : a.({length: b,
  ..c} -> b)\n    function getLength(x) { return x.length; }\n```\n\n\n### A bit more
  detailed instructions\n\n1. Install Haskell's **cabal** package manager. See [Haskell.org](https://www.haskell.org/downloads)
  for some installation options. On ubuntu, I recommend using [Herbert V. Riedel's
  ppa](https://launchpad.net/~hvr/+archive/ubuntu/ghc).\n2. Clone this repository.\n\nThen
  run:\n\n    cabal update\n    cd infernu\n    cabal install\n\nThe `infernu` executable
  will be installed to your `~/.cabal/bin`. You may want to add it to your `PATH`.\n\nIf
  you have trouble in the last command due to package incompatibilities, use a **cabal
  sandbox**:\n\n    cd infernu\n    cabal sandbox init\n    cabal install\n\nThe `infernu`
  executable will be placed in `infernu/.cabal-sandbox/bin`\n\n\n\n## Examples\n\n###
  Basic\n\nJavaScript:\n\n\tvar num = 2;\n\tvar arrNums = [num, num];\n\nInfernu infers:\n\n
  \   //  num : Number\n    //  arrNums : [Number]\n\nThat is, an array of numbers.\n\nObjects:\n\n\tvar
  obj = { something: 'hi', value: num };\n\nInferred type:\n\n    //  obj : {something:
  String,\n               value: Number}\n\nThat is, an object with two properties:
  'something', of type string, and 'value' of type number.\n\n### Functions and `this`\n\nIn
  JS, `this` is one truly awful part. `this` is a dynamically scoped variable that
  takes on values depending on how the current function was invoked. Infernu knows
  about this (pun intended) and infers types for functions indicating what `this`
  must be.\n\nFor example:\n\n\tfunction useThisData() {\n\t\treturn this.data + 3;\n\t}\n\nInfernu
  infers:\n\n    //       useThisData : {data: Number, ..a}.(() -> Number)\n\nIn words:
  a function which expects `this` to be an object with at least one property, \"data\"
  of type `Number`. It takes no arguments (hence the empty `()`). It returns a `Number`.\n\nIf
  we call a function that needs `this` incorrectly, Infernu will be angry:\n\n    Error:
  Could not unify:\n        {data: Number, ..a}\n      With:\n        Undefined\n\nBecause
  we called `useThisData` without a preceding object property access (e.g. `obj.useThisData`),
  it will get `undefined` for `this`. Infernu is telling us that our expected type
  for `this` is not unifiable with the type `undefined`.\n\n### Polymorphism\n\nGiven
  the following function:\n\n    function makeData(x) {\n\t    return {data: x};\n\t}\n\nInfernu
  infers the following type:\n\n    a.(b -> {data: b})\n\nIn words: A function that
  takes anything for its `this`, and an argument of any type `b`. It returns an object
  containing a single field, `data` of the same type `b` as the argument.\n\n### Row-type
  polymorphism (static duck typing)\n\nGiven the following function:\n\n    function
  getData(obj) {\n\t\treturn obj.data;\n\t}\n\nInfernu infers:\n\n    h.({data: i,
  ..j} -> i)\n\nIn words: a function taking any type `h` for `this`, and a parameter
  that contains **at least one property**, named \"data\" that has some type `i` (could
  be any type). The function returns the same type `i` as the data property.\n\n\n###
  Type Classes\n\nSee [here](docs/type-system.md#type-classes) for more about Infernu's
  type classes.\n\nThe basic example is for the `+` operator:\n\n    function add(x,y)
  { return x + y; }\n\nThe type for `add` is inferred to be:\n\n    //       add :
  Plus b => a.((b, b) -> b)\n\nMeaning: given any type `a` that is an instance of
  the `Plus` type class, the function takes two `a`s and returns an `a`.\n\nThe two
  instances of `Plus` currently defined are the types `Number` and `String`.\n\n\n\n------------\n\n##
  TODO\n\n- [ ] consider adding sum types with guards as pattern matchers. required
  because some functions, like array index access, can return 'undefined' (e.g. if
  index is out of range)\n- [ ] allow empty var decls (use first assignment as starting
  point for types) - how to prevent uninitialized variable issues?\n- [ ] allow defining
  constructor-object properties using the notation `obj.prototype.something = ...`\n-
  [ ] find a reasonable solution for optional parameters - perhaps using an implicit
  \"Maybe\"-like type or implicit type unions, and require guards?\n- [ ] when concluding
  that two recursive types are equivalent, use that information to simplify the resulting
  types (perhaps using the simpler of the two everywhere)\n- [ ] BUG: top-level type
  of naked object `{a:3}` isn't shown unless it is wrapped in a paren `({a:3})`.\n-
  [ ] support `arguments` (a tuple?) and function `bind`\n- [ ] Should we treat functions
  as objects with properties? the only properties they have are: length (very weird!
  we might as well leave it out), and call/bind/apply (which need special handling)\n\n###
  Future\n\n- [ ] type annotations\n- [ ] add support for CommonJS modules\n- [ ]
  deal better with inferred polymorphic object properties - requires full rank-n unification\n\n<!--
  \ LocalWords:  JS polymorphism Hindley Milner JS's Equi num arrNums Number String
  getData\n -->\n<!--  LocalWords:  useThisData Undefined unifiable makeData TODO
  decls paren CommonJS\n -->\n"
description-type: markdown
hash: ed29e78d178faa08c0d449e059e7de7cecc8ced64cf31a8263d71859c7885613
homepage: https://github.com/sinelaw/infernu
latest: 0.0.0.1
license-name: GPL-2.0-only
maintainer: jones.noamle@gmail.com
synopsis: Type inference and checker for JavaScript (experimental)
test-bench-deps: {}
