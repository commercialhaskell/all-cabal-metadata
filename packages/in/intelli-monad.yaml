all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Junji Hashimoto
basic-deps:
  JuicyPixels: '>=3.3.8 && <3.4'
  aeson: '>=2.1 && <2.3'
  aeson-pretty: '>=0.8.10 && <0.9'
  base: '>=4 && <5'
  base64-bytestring: '>=1.2.1 && <1.3'
  bytestring: '>=0.11.5 && <0.12'
  containers: '>=0.6.7 && <0.7'
  haskeline: '>=0.8.2 && <0.9'
  http-client: '>=0.7.16 && <0.8'
  http-client-tls: '>=0.3.6 && <0.4'
  http-conduit: '>=2.2 && <2.4'
  intelli-monad: '>=0'
  megaparsec: '>=9.5 && <9.7'
  openai-servant-gen: '>=0.1.0 && <0.2'
  optparse-applicative: '>=0.18 && <0.19'
  persistent: '>=2.14.6 && <2.15'
  persistent-sqlite: '>=2.13.3 && <2.14'
  process: '>=1.6.17 && <1.7'
  servant: '>=0.20.1 && <0.21'
  servant-client: '>=0.20 && <0.21'
  sixel: '>=0.1.2 && <0.2'
  temporary: '>=1.3 && <1.4'
  text: '>=2.0.2 && <2.1'
  time: '>=1.12.2 && <1.13'
  transformers: '>=0.6.1 && <0.7'
  vector: '>=0.13.1 && <0.14'
  xml-conduit: '>=1.9 && <2.0'
  yaml: '>=0.11 && <0.12'
changelog: |
  # Revision history for intelli-monad

  ## 0.1.0.2 -- 2024-03-30

  * Add 'generate' function with typed input and output.
  * Add system hook functionality to customize system flow
  * Support for key value store


  ## 0.1.0.1 -- 2024-03-21

  * Add CLI options
  * Support for arxiv

  ## 0.1.0.0 -- 2024-03-15

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# intelli-monad\n\nintelli-monad provides high level APIs for prompt
  engineering using openai.\n\nFeaturing:\n* Type level function calling with JSON-Schema\n*
  Validation of return value\n* Repl interface\n* Persistent of prompt logs with SQLite\n*
  Session management with repl\n\nintelli-monad is based on openai-servant-gen.\nopenai-servant-gen
  is automatically generated from OpenAPI interface.\n\n# Install\n\n```bash\ngit
  clone git@github.com:junjihashimoto/intelli-monad.git\ncd intelli-monad\nexport
  PATH=~/.local/bin:$PATH\ncabal install intelli-monad\n```\n\n# Usage of repl\n\nAfter
  install intelli-monad, set OPENAI_API_KEY, then run intelli-monad command.\nThe
  system commands begin with prefix \":\". Anything else will be the user's prompt.\n\n```bash\n$
  export OPENAI_API_KEY=xxx\n$ export OPENAI_MODEL=xxx\n$ intelli-monad\n% :help\n:quit\n:clear\n:show
  contents\n:show usage\n:show request\n:show context\n:show session\n:list sessions\n:copy
  session <from> <to>\n:delete session <session name>\n:switch session <session name>\n:help\n%
  hello\nassistant: Hello! How can I assist you today?\n```\n\n# Usage of function
  calling with validation\n\nHere is an example of function calling and validation.\nIn
  this example, validation is performed using the input of function calling.\n\nDefine
  the function calling as ValidateNumber, and define the context as Math.\n\nJSONSchema
  type-class can output it as JSON Schema.\nDefining HasFunctionObject class adds
  descriptin to each field. \nThis allows Openai's interface to understand the meaning
  of each field.\nTool type-class defines the input and output types of function calling,
  and defines the contents of the function.\n\nCustomInstruction type-class defines
  the context with headers and footers.\n\nrunPromptWithValidation function calls
  LLM.\nThe results will be validated and a number will be returned.\n\n\n```haskell\n{-#
  LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE LambdaCase
  #-}\n{-# LANGUAGE OverloadedLists #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE
  TypeApplications #-}\n{-# LANGUAGE TypeFamilies #-}\n\nmodule Main where\n\nimport
  Data.Aeson\nimport Data.Proxy\nimport GHC.Generics\nimport IntelliMonad.Persist\nimport
  IntelliMonad.Prompt\nimport IntelliMonad.Types\nimport OpenAI.Types\n\ndata ValidateNumber
  = ValidateNumber\n  { number :: Double\n  }\n  deriving (Eq, Show, Generic, JSONSchema,
  FromJSON, ToJSON)\n\ninstance HasFunctionObject ValidateNumber where\n  getFunctionName
  = \"output_number\"\n  getFunctionDescription = \"validate input number\"\n  getFieldDescription
  \"number\" = \"A number that system outputs.\"\n\ninstance Tool ValidateNumber where\n
  \ data Output ValidateNumber = ValidateNumberOutput\n    { code :: Int,\n      stdout
  :: String,\n      stderr :: String\n    }\n    deriving (Eq, Show, Generic, FromJSON,
  ToJSON)\n  toolExec _ = return $ ValidateNumberOutput 0 \"\" \"\"\n\ndata Math =
  Math\n\ninstance CustomInstruction Math where\n  customHeader = [(Content System
  (Message \"Calcurate user input, then output just the number. Then call 'output_number'
  function.\") \"\" defaultUTCTime)]\n  customFooter = []\n\nmain :: IO ()\nmain =
  do\n  v <- runPromptWithValidation @ValidateNumber @StatelessConf [] [CustomInstructionProxy
  (Proxy @Math)] \"default\" (fromModel \"gpt-4\") \"2+3+3+sin(3)\"\n  print (v ::
  Maybe ValidateNumber)\n```\n"
description-type: markdown
hash: bfca2c4f074f96bfd9d2eab2893ed00dede68030718cc2cb3b8cea40b2c83d4b
homepage: https://github.com/junjihashimoto/intelli-monad
latest: 0.1.0.2
license-name: MIT
maintainer: junji.hashimoto@gmail.com
synopsis: Type level prompt with openai.
test-bench-deps:
  base: '>=4 && <5'
  intelli-monad: '>=0'
