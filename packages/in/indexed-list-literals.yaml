all-versions:
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
author: David Millar-Durrant
basic-deps:
  Only: '>=0.1 && <0.2'
  base: '>=4.9 && <5'
changelog: "# 0.2.1.2\n\n- Bumped dependencies to allow building with GHC 8.8\n\n#
  0.2.1.1 \n\n- Bumped the version of dependencies for GHC 8.6\n"
changelog-type: markdown
description: |-
  This is an incredibly simple library, which makes writing lists where the length is known at compile time a little bit nicer.

  If you write a function with the signature

  > vector :: ILL input length output => input -> Vector length output
  then

  > v :: Vector 3 Int
  > v = vector (1,2,3)
  >
  > x :: Vector 0 Double
  > x = vector $ ZeroTuple @Double
  >
  > y :: Vector 1 Double
  > y = vector (Only 1)
  >
  > z :: Vector 2 String
  > z = vector ("Hello", "World")

  If want matrix literals you can write a function

  > matrix :: (ILL row width ty, ILL matrix height row) => matrix -> Matrix width height ty
  then

  > a :: Matrix 0 0 Bool
  > a = matrix $ ZeroTuple @(ZeroTuple Bool)
  >
  > b :: Matrix 1 2 String
  > b = matrix $ Only ("Hello","World")
  >
  > c :: Matrix 4 5 Double
  > c = matrix ((1,2,3,0,0)
  >            ,(4,5,6,0,0)
  >            ,(7,8,9,0,0)
  >            ,(0,0,0,0,0))
  The full code is in test\/Docs.hs

  This only supports literals of length up to 20, though that can be easily extended using the code generator in src\/Data\/IndexedListLiterals.hs
description-type: haddock
hash: 31d0fbbc2484576cd9677a7b7760964cfee25827a0acbf5a6e6e6fcd9e191686
homepage: https://github.com/davidm-d/indexed-list-literals
latest: 0.2.1.3
license-name: BSD-3-Clause
maintainer: dmillardurrant@gmail.com
synopsis: Type safe indexed list literals
test-bench-deps:
  base: '>=0'
  hspec: '>=0'
  indexed-list-literals: '>=0'
