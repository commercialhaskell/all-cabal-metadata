all-versions:
- 0.1.0.0
author: Richard Warfield
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  mtl: '>=0'
  template-haskell: '>=0'
changelog: ''
changelog-type: ''
description: "# instance-map\n\n`instance-map` provides Template Haskell functions
  that help go from serialized values with value-level type witnesses (i.e. TypeRep
  values) to existential types containing type-level evidence of membership in a type
  class.  It is useful for dealing with serialized values when only membership in
  a certain class (and not the monomorphic type) is known at the site of deserialization.\n\nBecause
  Haskell is not a dependently typed language, there is ordinarily no way to \"lift\"
  information at the value level to the type level.  This restriction makes dealing
  with serialized data for which the monomorphic type (or at least a list of the possible
  types) is not known at the site of use very difficult.  \n\nThis library works by
  using Template Haskell to try to generate a map from TypeReps of the the monomorphic
  types belonging to a given type class to their decoder functions.  It does this
  by recursively looking for instances of the given type class, then instances of
  any type class mentioned in the instance context, and so on.  For example if we
  have\n\n```haskell\nclass Foo a\nclass Bar a\ninstance Foo a => Bar (Maybe a))\n```\n\nthen
  `mkMap` will try to generate instances of Bar by looking for instances of Foo and
  replacing the `a` in the instance head.\n\nBecause the monomorphic members of a
  type class are potentially infinite in number (e.g. Maybe (Maybe (Maybe ...))),
  this library will only attempt to generate monomorphic types up to a given level
  of nesting (default 2).\n\nCurrently only univariate type classes are supported,
  and type synonyms are not supported.  The library operates on a \"best-efforts\"
  basis, so if it encounters a multiparameter type class or other constraint it doesn't
  know how to satisfy, it will give up on that branch but continue to try other ways
  of finding the monomorphic type class members.\n\n## Example: Deserialization of
  JSON to value with evidence of type class membership\n```haskell\n{-# LANGUAGE TemplateHaskell
  #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE FlexibleInstances
  #-}\n\nimport Type.InstanceMap\n\nimport Data.Aeson\nimport Data.Proxy\nimport Data.Typeable\nimport
  qualified Data.Binary as Binary\nimport Data.ByteString.Lazy hiding (putStrLn)\n\nclass
  (FromJSON a) => MyClass a where\n  foo :: a -> String\n\ninstance MyClass Int where\n
  \ foo x = \"Fooing Int \" ++ show x\n\ninstance MyClass Bool where\n  foo x = \"Fooing
  Bool \" ++ show x\n\n-- Creates a function:\n-- getSomeMyClass :: TypeRep -> Value
  -> Result (Some MyClass)\n$(mkMap ''MyClass ''Value ''Result [|fromJSON|])\n\n--
  Pretend we have read the below values from the network or disk. \n-- There is usually
  no way to lift the TypeRep evidence to the value level.\n\nmysteryValue :: Value\nmysteryValue
  = toJSON (6 :: Int)\n\nmysteryValueTypeData :: ByteString\nmysteryValueTypeData
  = Binary.encode (typeRep (Proxy :: Proxy Int))\n\nmain = do\n                  \n
  \ let someVal :: Some MyClass  -- Existential type with a single constructor, SomeMyClass\n
  \     someVal = getSomeMyClass (Binary.decode mysteryValueTypeData :: TypeRep) mysteryValue\n
  \ putStrLn $ case  of\n    Error e -> \"Whoops\"\n    Success (SomeMyClass v) ->
  foo v  -- Inside the pattern match I know v has a MyClass instance\n```\n"
description-type: markdown
hash: 72f9326df051efb60ced8d3e4fcf62293db587a293d94c8cd1f2c069e8761616
homepage: https://github.com/RichardWarfield/instance-map#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: richard@litx.io
synopsis: Template haskell utilities for helping with deserialization etc. of existential
  types
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  hspec: '>=0'
  instance-map: '>=0'
  mtl: '>=0'
  template-haskell: '>=0'
