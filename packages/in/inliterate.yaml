all-versions:
- 0.1.0
author: Tom Nielsen
basic-deps:
  base: '>=4.6 && <5'
  blaze-html: '>=0'
  cheapskate: '>=0'
  containers: '>=0'
  haskell-src-exts: '>=0'
  inliterate: '>=0'
  lucid: '>=0'
  lucid-extras: '>=0'
  plotlyhs: '>=0'
  text: '>=0'
  time: '>=0'
changelog: ''
changelog-type: markdown
description: "inliterate: Dynamic reporting for Haskell\n=======\n\nThe aim of inliterate
  is generate dynamic markdown reports from literate Haskell code in which\ncode blocks
  can be evaluated to present the results of analyses in textual or graphical form.\n\ninliterate
  is a GHC preprocessor which transforms a markdown document into a Haskell program,
  \nwhich, when run, prints to stdout the input document in HTML format. Certain code
  blocks with special\nannotations can be treated in particular ways: as Haskell code
  that must be included in the \ngenerating program (at the top level or in a do block)
  and as code that must be evaluated with the results\ninserted into the HTML document.\n\nFor
  an example document, see https://github.com/diffusionkinetics/open/blob/master/plotlyhs/gendoc/GenDocInlit.hs
  which \nccompiles into https://glutamate.github.io/plotlyhs/.\n\n## The inliterate
  document\n\nThe inliterate ddocument should contain the following pragma on the
  first line or after the LANGUAGE pragmas:\n\n```\n{-# OPTIONS_GHC -F -pgmF inlitpp
  #-}\n```\n\nthis tells GHC to invoke the preprocessor.\n\n### Code blocks\n\ninliterate
  gives special meaning to the following code block language annotations (see the
  plotlyhs documentation \ngenerator to see how these are invoked)\n\n#### `html_header`\n\nthis
  HTML should go in the header. Use this to load JavaScript or CSS, for instance for
  graphing libraries.\n\n#### `haskell top`\n\nHaskell code that is added to the top
  level\n\n#### `haskell do`\n\nHaskell code that is added to the main do block. use
  this for loading data or otherwise performing input and output.\n\n#### `haskell
  eval`\n\nHaskell code that is evaluated. The resultant type must be an instance
  of the `AskInliterate` class ddefined in \nInliterate.Import. \n\n#### `hide`\n\nadd
  this to `top` or `do` code to prevent it from being printed in the output document
  (but it is still run)\n\n## How to run\n\n### As an excutable\n\nif you only have
  a few documents, you can put them in your cabal file as an executable, with `inliterate`
  as a build dependency.\n\nhere's the example from the plotlyhs [documentation generator](https://github.com/diffusionkinetics/open/blob/bf3e3211f936d1c66ee5f4828a6e26d4a2d5df76/plotlyhs/gendoc/plotly-gendoc.cabal#L15-L26):\n\n```\nexecutable
  plotly-gendoc\n  main-is: GenDocInlit.hs\n  build-depends:       base >=4.6 && <5\n
  \                    , plotlyhs\n                     , lucid\n                     ,
  aeson\n                     , text\n                     , microlens\n                     ,
  plotlyhs\n                     , inliterate\n                     , datasets\n                     ,
  neat-interpolation\n```\n\n### Using stack runghc\n\nif you have a larger number,
  or dynamically changing, set of documents, you can run them individually using stack
  runghc. `inliterate`\nshould be listed in your cabal file as a build dependency
  to make sure the package is visible.\n\n```\nstack runghc InliterateFile.hs\n```\nif
  you want only the body HTML and not the headers, you can pass the argument `--no-inlit-wrap`
  to the executable\n```\nstack runghc InliterateFile.hs -- --no-inlit-wrap\n```"
description-type: markdown
hash: 61b17ab3cef803512c264e27e463390b47af59d7d2b3a2a89bea2eac0cf84266
homepage: https://github.com/diffusionkinetics/open/inliterate
latest: 0.1.0
license-name: MIT
maintainer: tomn@diffusionkinetics.com
synopsis: Interactive literate programming
test-bench-deps:
  base: '>=4.6 && <5'
  inliterate: '>=0'
  text: '>=0'
  time: '>=0'
