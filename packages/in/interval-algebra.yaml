homepage: https://github.com/novisci/interval-algebra#readme
changelog-type: markdown
hash: ed79b54fc5363405e035fb899ece1cd8c3280017bd06a80caa4bd8306de90bec
test-bench-deps:
  interval-algebra: -any
  witherable: -any
  base: '>=4.7 && <5'
  time: -any
  hspec: -any
  containers: -any
  QuickCheck: -any
  safe: -any
maintainer: bsaul@novisci.com
synopsis: An implementation of Allen's interval algebra for temporal logic
changelog: "# Changelog for interval-algebra\n\n## 2.0.2\n\n* Adds `rangeInterval`,
  which creates the smallest inverval containing all intervals in a `Foldable`.\n\n##
  2.0.1\n\n* Relaxes cabal package bounds; notably:\n  * the `time` bounds gets a
  wider range\n  * the `text` bounds include `2.0`\n\n## 2.0.0\n\n* Adds `Abitrary
  (Interval a)` instance generic over `Ord a, Arbitrary a`.\n* Removes the `moment'`
  function from the `IntervalSizeable` class.\nUse type application with `moment`
  instead, as in `moment @Int`, `moment @Day`, etc.\n* Adds the following utility
  functions:\n`lookback`, `lookahead`, `makeGapsWithinPredicate`,\n`pairGaps`, `anyGapsWithinAtLeastDuration`,
  `allGapsWithinLessThanDuration`\n\n## 1.4.0\n\n* Adds the `safeInterval` function
  to `Core`,\nas a utility for creating intervals from a pair of endpoints.\n* Uses\n[PVP](https://pvp.haskell.org/)-style\nmajor
  upper bounds in cabal dependencies as described\n[here](https://cabal.readthedocs.io/en/3.4/cabal-package.html#build-information).\n*
  Adds the `IntervalDiagram` module which includes functions and types\nfor printing
  diagrams of intervals as text.\nThese functions are useful for documentation and
  examples.\n\n## 1.3.0\n\n* Adds `NFData` and `Binary` instances for `Interval` and
  `PairedInterval`\n\n## 1.2.0\n\n* Derives `Generic` instances for `Interval` and
  `PairedInterval`.\n* Adds an `Arbitrary` instance for `PairedInterval`.\n\n## 1.1.3\n\n*
  `Arbitrary` instances for `DiffTime`, `NominalDiffTime` and `Day` are now sized,
  the absence of which had prevented the 'fix' from version 1.1.1 from being effective.
  `DiffTime` and `NominalDiffTime` generators are also now limited to a maximum `86399`
  seconds directly.\n\n## 1.1.2\n\n* Adds an internal utility to `IntervalAlgebra.Arbitrary`
  to generate a `Maybe (i a)` for `Intervallic i a` from a reference interval and
  set of relations. `Nothing` is returned for cases in which no interval can be generated.\n\n##
  1.1.1\n\n* Modifies internals of `IntervalAlgebra.Arbitrary` module to give uniformity
  over support for `Integer` and `UTCTime` intervals, yielding better interval generators.
  Also bounds the `UTCTime` `utctDayTime` argument to `86399` rather than `86400`
  to avoid trivial and rare cases of property testing failures related to leap seconds.\n\n##
  1.1.0\n\n* Fixes bug in `parseInterval`. For example, `parseInterval 0 0` parsed
  to a `Right (Interval (0, 0))`. Oops, the inequality of the should have been `y
  <= x` not `y < x`. This was fixed and a test added to catch this error.\n\n## 1.0.1\n\n*
  Adds `beginervalMoment` and `endervalMoment` functions to create intervals of moment
  duration from a begin or end.\n\n## 1.0.0\n\n* Moves the main `IntervalAlgebra`
  module to `IntervalAlgebra.Core` and `IntervalAlgebra` now reexports `IntervalAlgebra.Core`,
  `IntervalAlgebra.IntervalUtilites`, and `IntervalAlgebra.PairedInterval`.\n* Creates
  a new `IntervalAlgebra.Axioms` module containing the `IntervalAxioms` typeclass
  of property tests of the interval algebra axioms. These were in the testing suite.
  Including this as a module in case users need add new `Interval` types and want
  to test the axioms.\n* Creates a new `IntervalAlgebra.RelationProperties` module
  containing a typeclass of property tests of the interval algebra. These were in
  the testing suite. Including this as a module in case users need add new `Interval`
  types and want to test the axioms.\n* Adds `UTCTime`/`NominalDiffTime` instance
  for `IntervalSizeable`.\n* Adds additional tests to the testing suite.\n\n## 0.10.2\n\n*
  Adds the `momentize` function for changing the duration of some interval value to
  a moment.\n\n## 0.10.1\n\n* Replaces unnecessary `IntervalCombinable i0 a` constraint
  in `gapsWithin` with `Intervallic i0 a`.\n\n## 0.10.0\n\n* Adds `shiftFromBegin`
  (`shiftFromEnd`) functions (not totally satisfied with these names) which change
  the reference point of the interval in the second argument by the difference from
  the `begin` (`end`) of the interval in the first argument.\n* Adds a `Functor` instance
  for `PairedInterval b`s, which maps an `PairedInterval c a` to `PairedInterval c
  b`. That is, `fmap` acts on the interval type.\n\n## 0.9.0\n\n* Fixes bug in `gapsWithin`
  introduced in last version.\n\n## 0.8.6\n\n* Adds the `beginervalFromEnd` and `endervalFromBegin`
  utilities to create an interval of the provided duration from the end (respectively,
  begin) of another interval.\n* Cleans up some of the internals in the `IntervalUtilies`
  using functions from the `foldl` package rather than homemade versions.\n\n## 0.8.5\n\n*
  Fixes synonyms so that `before == precedes` and `after == precededBy`, rather than
  the incorrect `starts == precedes` and `startedBy == precededBy`.\n\n## 0.8.4\n\n*
  Fixes bug in `formMeetingSequence` wherein sequences of events with >2 nested events
  were not returning a meeting sequence.\n\n## 0.8.3\n\n* Moves `begin` and `end`
  out of the `Intervallic` class.\n* Avoids incomplete patterns warnings by:\n  *
  deriving `Enum` instance of `IntervalRelation`\n  * catching equals case with `otherwise`
  in `disjoinPairs`\n  * catching disjoint case with `otherwise` in `clip`\n\n## 0.8.2\n\n*
  Removes `Show` constraint from `intervals` function in `PairIntervals`.\n\n## 0.8.1\n\n*
  Generalizes `gaps`, `gapsWithin`, and `combineIntervals` to take general `Intervallic`
  inputs but still return `Interval`s.\n* Relaxes the `Show a` constraint on `Intervallic`
  class.\n* Removes unnecessary pragmas.\n\n## 0.8.0\n\n* Removes the `IntervalAlgebraic`
  typeclass. The functions that were in this class are now regular functions exported
  in the main module.\n* Generalizes all interval predicate functions to work on (potentially)
  two different `Intervallic` containers.\n* Cleans up and reorganizes documentation.\n\n##
  0.7.1\n\n* Adds `Safe` language extension to all library modules.\n\n## 0.7.0\n\n*
  Adds a `Bifunctor` instance for `PairedInterval`s.\n* Adds the two new functions
  to `IntervalUtilites`:\n  * `foldMeetingSafe`: Folds over a list of Paired Intervals
  and in the case that the 'getPairData' is equal between two sequential meeting intervals,
  these two intervals are combined into one. This function is \"safe\" in the sense
  that if the input is invalid and contains any sequential pairs of intervals with
  an `IntervalRelation`, other than `Meets`, then the function returns an empty list.\n
  \ * `formMeetingSequence`: Converts an ordered sequence of `PairedInterval b a`
  that may have any interval relation\n('before', 'starts', etc) into a sequence of
  sequentially meeting `PairedInterval b a`.  That is, a sequence where one the end
  of one interval meets the beginning of the subsequent interval. The `getPairData`
  of the input `PairedInterval`s are\ncombined using the Monoid `<>` function, hence
  the pair data must be a `Monoid` instance.\n* Renames `pairData` accessor function
  to `getPairData` in PairedInterval module.\n* Removes the `unsafeInterval` function.\n\n##
  0.6.3\n\n* Extends the `IntervalCombinable` class to operate on general `Interval`
  containers.\n* Removes all usage of `unsafeInterval` from the testing suite in preparation
  of removing this function.\n* Modifies internals of the `combineIntervals` function
  to use safe (exception-free) functions rather than footguns like `head` and `tail`.\n\n##
  0.6.2\n\n* Fixes bug in `equals` which was checking for equality of the interval
  container, not just the interval.\n\n## 0.6.1\n\n* Removes the deriving `Show` instance
  for `PairedInterval`s so people can customize their own instances.\n\n## 0.6.0\n\n*
  Generalizes the `IntervalAlgebraic` class to work on any data structure that *contains*
  an interval (not just intervals themselves). This is possible by modification to
  the `Intervallic` class, which now works in part as lens with `getInterval` and
  `setInterval` functions. This change allows users to define their own type which
  contains an interval get all the interval algebraic operation on that new type.
  The utility of this generalization can be seen in the `PairedInterval` module, which
  defines a parameterized type for interval *paired* with some other data.\n* Eliminates
  the `Moment` class and combined it with the `IntervalSizeable` class. Like the `IntervalAlgebraic`
  class, the `IntervalSizeable` class no longer depends on the `Interval` type, but
  its functions like `duration` now work on any `Intervallic i a` type.\n* Removes
  the `expand`, `expandl`, and `expandr` functions from the `IntervalSizeable` class
  are now just general functions. These function now work to modify the interval within
  any `Intervallic i a` type.  Similarly `beginerval`, `enderval`, and `extenterval`
  were removed from the class; however, these functions only *return* the `Interval`
  type.\n* Generalizes the `filter*` functions in the utilities module to operate
  on potentially different interval algebraic types. For example, in `filterOverlaps
  x [ys]`, `x` could be an `Interval a` and the `ys` could be a list of `PairedInterval
  b a`, so you can filter a container of one interval algebraic type with another
  interval algebraic type.\n\n## 0.5.0\n\n* Adds the `compose` function to `IntervalAlgebraic`
  typeclass, thus now all the algebraic operations are available: complement, composition,
  converse, intersection, and union.\n* In the `IntervalAlgebraic` typeclass, adds
  `concur` as a synonym for `notDisjoint`; `enclosedBy` as a synonym for `within`;
  and `enclose` as the converse of `enclosedBy`.\n* Generalizes the utilities `combineIntervals`,
  `gaps`, `gapsWithin`, and `relations` to work with any `Applicative`, `Foldable`
  `Monoid` (of which `List` is a case).\n* Changes the signature of `gapsWithin` to
  return `Maybe (f (Interval a))`, so that in the case that there are no gaps `Nothing`
  is returned.\n* Renames the `emptyIf*` function to `nothingIf*`. Like `gapsWithin`,
  these now return `Maybe (f (Interval a))` so that `Nothing` is returned if the quantified
  predicated is true.\n* Removes the `IntervalFilterable` typeclass and these functions
  are now available in the utilities module without needing to specify instances for
  each container type you want to filter.\n\n## 0.4.0\n\n* Adds utilities `emptyIfNone`,
  `emptyIfAny`, and `emptyIfAll` that apply predicates to a list of inputs. If none,
  any, or all of the inputs meet the predicate, then the empty list is returned. Otherwise,
  the input is returned unmodified. These functions are generalized to `Monoid`s,
  so they work on structures other than lists.\n* Adds `gapsWithin` function to `IntervalUtilities`
  module that applies `gaps` to all intervals in the input list that are non-disjoint
  from the interval in the first argument.\n* Fixed bug in `combineIntervals` where
  intervals could fail to be combined properly because `foldr` was being used instead
  of `foldl'`.\n* Adds `intersect` function to `IntervalCombinable` class that returns
  the (maybe) intersection of two intervals.\n* Adds `relations` utility function
  which returns a list of the `IntervalRelations` between each consecutive pair of
  intervals in the input list.\n* Renames `in'` predicate to `within`. Also, renames
  `filterIn'` to `filterWithin`.\n* Adds `predicate` function to `IntervalAlgebraic`
  class to map an `IntervalRelation` to its corresponding predicate function. Also
  adds `predicates` to map a set of `IntervalRelation`s to a list of predicate functions.
  \ \n* Adds `intersection`, `union`, `converse`, and `complement` methods to `IntervalAlgebraic`
  for taking the respective operation on `Set IntervalRelation`.\n* Instantiates `Bounded`,
  `Enum`, and `Ord` for `IntervalRelation`, so that, for one, interval relations can
  be ordered and used in `Data.Set`. Uses the total ordering defined [here](https://thomasalspaugh.org/pub/fnd/allen.html),
  though in general, interval relations only have a partial order.\n* Renames `composeRelations`
  to the more accurate `unionPredicates`.\n* Adds `<|>` as operator for \"union\"ing
  `ComparativePredicateOf (Interval a)`, as in `starts <|> overlaps === unionPredicates
  [starts, overlaps]`.\n* Adds a `clip x y` function which clips the interval `y`
  to the extent of `x`, provided `x` and `y` are not disjoint.\n\n## 0.3.3\n\n* Fixes
  bug in `expand` function\n\n## 0.3.2\n\n* Fixes bug in `filterNotDisjoint`\n\n##
  0.3.1\n\n* Adds the `diff` function to the `IntervalSizeable` to make comparisons
  of endpoints easier.\n* Adds the `notDisjoint` relation to determine if two intervals
  share any support.\n* Adds `filterDisjoint`, `filterNotDisjoint`, and `filterIn'`
  to the `IntervalFilterable` class.\n\n## 0.3.0\n\n* Adds `beginerval` and `enderval`
  function to `IntervalSizeable` class for safely creating `Interval`s given a begin
  (or end) and a duration.\n* Moves `moment` to its own typeclass `Moment`, which
  is now a constraint on `IntervalSizeable`.\n* Removes function exports from the
  `IntervalAlgebra.Arbitrary` module which where only meant to exported for the testing
  modules anyway.\n\n## 0.2.0\n\n* Adds `IntervalSizeable` class.\n* Moves `IntervalFilterable`
  class to main module and generalizes the container to any `Filterable` type.\n*
  Adds `IntervalAlgebra.IntervalAlgebraUtilities` module to collect various useful
  functions.\n* Adds `IntervalAlgebra.Arbitrary` module to provide functions for generating
  arbitrary intervals.\n"
basic-deps:
  witherable: ^>=0.4
  base: '>=4.7 && <5'
  time: '>=1.9 && <2'
  text: ^>=1.2 || ^>=2.0
  nonempty-containers: ^>=0.3
  witch: ^>=1.0
  containers: ^>=0.6
  binary: ^>=0.8
  foldl: ^>=1.4
  prettyprinter: ^>=1.7
  deepseq: '>=1.1 && <1.5'
  QuickCheck: ^>=2.14
  safe: ^>=0.3
all-versions:
- 0.1.2
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
- 0.7.0
- 0.7.1
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.9.0
- 0.10.0
- 0.10.1
- 0.10.2
- 1.0.0
- 1.0.1
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.2.0
- 1.3.0
- 1.4.0
- 2.0.0
- 2.0.1
- 2.0.2
author: Bradley Saul
latest: 2.0.2
description-type: markdown
description: |
  # interval-algebra

  The `interval-algebra` package implements [Allen's interval algebra](https://www.ics.uci.edu/~alspaugh/cls/shr/allen.html) in [Haskell](https://www.haskell.org). The main module provides data types and related classes for the interval-based temporal logic described in [Allen (1983)](https://doi.org/10.1145/182.358434) and axiomatized in [Allen and Hayes (1987)](https://doi.org/10.1111/j.1467-8640.1989.tb00329.x). A good primer on Allen's algebra can be [found here](https://thomasalspaugh.org/pub/fnd/allen.html).

  ## Design

  The module is built around three typeclasses designed to separate concerns of constructing, relating, and combining types that contain `Interval`s:

  1. `Intervallic` provides an interface to the data structures which contain an `Interval`.
  2. `IntervalCombinable` provides an interface to methods of combining two `Interval`s.
  3. `IntervalSizeable` provides methods for measuring and modifying the size of an interval.

  An advantage of nested typeclass design is that developers can define an `Interval` of type `a` with just the amount of structure that they need.

  ## Axiom tests

  The package [includes tests](test/IntervalAlgebraSpec.hs) that the functions of the `IntervalAlgebraic` typeclass meets the axioms for _intervals_ (not points) as laid out in [Allen and Hayes (1987)](https://doi.org/10.1111/j.1467-8640.1989.tb00329.x).
license-name: BSD-3-Clause
