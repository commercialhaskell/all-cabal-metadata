homepage: https://github.com/novisci/interval-algebra#readme
changelog-type: markdown
hash: ef6674fd5e0ae30bf659cc1825e377f5e390508e781628fb08a86e6657e760a0
test-bench-deps:
  interval-algebra: -any
  base: '>=4.7 && <5'
  time: '>=1.8 && <2'
  hspec: -any
  containers: '>=0.6'
  QuickCheck: -any
maintainer: bsaul@novisci.com
synopsis: An implementation of Allen's interval algebra for temporal logic
changelog: "# Changelog for interval-algebra\n\n## 0.4.0\n\n* Adds utilities `emptyIfNone`,
  `emptyIfAny`, and `emptyIfAll` that apply predicates to a list of inputs. If none,
  any, or all of the inputs meet the predicate, then the empty list is returned. Otherwise,
  the input is returned unmodified. These functions are generalized to `Monoid`s,
  so they work on structures other than lists.\n* Adds `gapsWithin` function to `IntervalUtilities`
  module that applies `gaps` to all intervals in the input list that are non-disjoint
  from the interval in the first argument.\n* Fixed bug in `combineIntervals` where
  intervals could fail to be combined properly because `foldr` was being used instead
  of `foldl'`.\n* Adds `intersect` function to `IntervalCombinable` class that returns
  the (maybe) intersection of two intervals.\n* Adds `relations` utility function
  which returns a list of the `IntervalRelations` between each consecutive pair of
  intervals in the input list.\n* Renames `in'` predicate to `within`. Also, renames
  `filterIn'` to `filterWithin`.\n* Adds `predicate` function to `IntervalAlgebraic`
  class to map an `IntervalRelation` to its corresponding predicate function. Also
  adds `predicates` to map a set of `IntervalRelation`s to a list of predicate functions.
  \ \n* Adds `intersection`, `union`, `converse`, and `complement` methods to `IntervalAlgebraic`
  for taking the respective operation on `Set IntervalRelation`.\n* Instantiates `Bounded`,
  `Enum`, and `Ord` for `IntervalRelation`, so that, for one, interval relations can
  be ordered and used in `Data.Set`. Uses the total ordering defined [here](https://thomasalspaugh.org/pub/fnd/allen.html),
  though in general, interval relations only have a partial order.\n* Renames `composeRelations`
  to the more accurate `unionPredicates`.\n* Adds `<|>` as operator for \"union\"ing
  `ComparativePredicateOf (Interval a)`, as in `starts <|> overlaps === unionPredicates
  [starts, overlaps]`.\n* Adds a `clip x y` function which clips the interval `y`
  to the extent of `x`, provided `x` and `y` are not disjoint.\n\n## 0.3.3\n\n* Fixes
  bug in `expand` function\n\n## 0.3.2\n\n* Fixes bug in `filterNotDisjoint`\n\n##
  0.3.1\n\n* Adds the `diff` function to the `IntervalSizeable` to make comparisons
  of endpoints easier.\n* Adds the `notDisjoint` relation to determine if two intervals
  share any support.\n* Adds `filterDisjoint`, `filterNotDisjoint`, and `filterIn'`
  to the `IntervalFilterable` class.\n\n## 0.3.0\n\n* Adds `beginerval` and `enderval`
  function to `IntervalSizeable` class for safely creating `Interval`s given a begin
  (or end) and a duration.\n* Moves `moment` to its own typeclass `Moment`, which
  is now a constraint on `IntervalSizeable`.\n* Removes function exports from the
  `IntervalAlgebra.Arbitrary` module which where only meant to exported for the testing
  modules anyway.\n\n## 0.2.0\n\n* Adds `IntervalSizeable` class.\n* Moves `IntervalFilterable`
  class to main module and generalizes the container to any `Filterable` type.\n*
  Adds `IntervalAlgebra.IntervalAlgebraUtilities` module to collect various useful
  functions.\n* Adds `IntervalAlgebra.Arbitrary` module to provide functions for generating
  arbitrary intervals.\n"
basic-deps:
  witherable: '>=0.4'
  base: '>=4.7 && <5'
  time: '>=1.8 && <2'
  containers: '>=0.6'
  QuickCheck: -any
all-versions:
- 0.1.2
- 0.2.0
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.4.0
author: Bradley Saul
latest: 0.4.0
description-type: markdown
description: |
  # interval-algebra

  The `interval-algebra` package implements [Allen's interval algebra](https://www.ics.uci.edu/~alspaugh/cls/shr/allen.html) in [Haskell](https://www.haskell.org). The main module provides data types and related classes for the interval-based temporal logic described in [Allen (1983)](https://doi.org/10.1145/182.358434) and axiomatized in [Allen and Hayes (1987)](https://doi.org/10.1111/j.1467-8640.1989.tb00329.x).

  A good primer on Allen's algebra can be [found here](https://thomasalspaugh.org/pub/fnd/allen.html).

  ## Design

  The module is built around five typeclasses designed to separate concerns of constructing, relating, and combining `Interval`s:

  1. `Intervallic` provides an interface to the data structure of an `Interval`, defining how an `Interval a` (simply a pair `(a, a)`) is constructed.
  2. `IntervalAlgebraic` provides an interface to the `IntervalRelation`s, the workhorse of Allen's temporal logic.
  3. `IntervalCombinable` provides an interface to methods of combining multiple `Interval`s.
  4. `IntervalSizeable` and the related `Moment` provide methods for measuring and modifying the size of an interval.
  5. `IntervalFilterable` provides methods for filtering 'Filterable' collections of intervals.

  An advantage of nested typeclass design is that developers can define an `Interval` of type `a` with just the amount of structure that they need.

  ## Total Ordering of `Interval`s

  The modules makes the (opinionated) choice of a total ordering for `Intervallic` `Interval`s. Namely, the ordering is based on first ordering the `begin`s then the `end`s.

  ## Axiom tests

  The package [includes tests](test/IntervalAlgebraSpec.hs) that the functions of the `IntervalAlgebraic` typeclass meets the axioms for _intervals_ (not points) as laid out in [Allen and Hayes (1987)](https://doi.org/10.1111/j.1467-8640.1989.tb00329.x).

  ## Development

  This module is under development and the API may change in the future.
license-name: BSD-3-Clause
