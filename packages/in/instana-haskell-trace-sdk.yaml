homepage: https://www.instana.com/
changelog-type: markdown
hash: 230f830578a4ab4ae4430ca22fcafc89c20055aba9645d7eb14d8cdbdc46ed3f
test-bench-deps:
  http-client: -any
  regex-pcre: -any
  exceptions: -any
  bytestring: -any
  ekg-core: -any
  wai: -any
  case-insensitive: -any
  aeson-casing: -any
  instana-haskell-trace-sdk: -any
  unix: -any
  base: '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  retry: -any
  process: -any
  HUnit: -any
  array: -any
  regex-compat: -any
  hslogger: -any
  regex-tdfa: -any
  regex-base: -any
  random: -any
  scientific: -any
  http-types: -any
  aeson: -any
  vector: -any
  aeson-extra: -any
  directory: -any
maintainer: bastian.krol@instana.com
synopsis: SDK for adding custom Instana tracing support to Haskell applications.
changelog: |+
  # Changelog for instana-haskell-trace-sdk

  ## 0.9.0.0
  - Fix format of annotation span.data.http.header - it is now a JSON object instead of an array of arrays.
  - BREAKING: Rename confusingly named `Instana.SDK.addAnnotationAt` to `Instana.SDK.addJsonValueAt`, because it actually takes a JSON value. `Instana.SDK.addAnnotationAt` still exists, but takes an actual `Instana.SDK.Span.SpanData.Annotation` value as its argument now, see below.
  - Provide additional functions to add annotations:
    - `Instana.SDK.addAnnotationAt` which takes a path and an `Instana.SDK.Span.SpanData.Annotation` value
    - `Instana.SDK.addAnnotationToEntrySpan`, which has the same signature as `addAnnotation` but always unconditionally adds the annotation to the entry span, even if an intermediate or exit span is currently active
    - `Instana.SDK.addAnnotationToEntrySpanAt`, which has the same signature as `addAnnotationAt` but always unconditionally adds the annotation to the entry span, even if an intermediate or exit span is currently active
    - `Instana.SDK.addAnnotationValueToEntrySpanAt`, which has the same signature as `addAnnotationValueAt` but always unconditionally adds the annotation to the entry span, even if an intermediate or exit span is currently active
    - `Instana.SDK.addJsonValueToEntrySpanAt`, which has the same signature as `addAnnotationJsonValueAt` but always unconditionally adds the annotation to the entry span, even if an intermediate or exit span is currently active.
  - Remove stability=experimental from cabal file.

  ## 0.8.0.0
  - Fix: Apply secrets config from agent configuration.
  - Fix: Redact secrets from query parameters instead of removing them.
  - Feature: Automatically capture HTTP request and response headers on HTTP entry and exit spans, based on the agent configuration.
  - BREAKING: Refactor and simplify the API to add nnotations via `Instana.SDK.SDK`:
      - Use `addAnnotation` instead of `addRegisteredData` and `addTag`. This variant requires an `Annotation`, use the functions in `Instana.SDK.Span.SpanData` to create an annotation.
      - Use `addAnnotationValueAt` or `addAnnotationAt` instead of `addRegisteredDataAt` and `addTagAt`. Both variants require the path to the annotation/value as a dot-separated string (same as before). The function `addAnnotationAt` accepts anything that implements `ToJSON`, and `addAnnotationValueAt` requires an `Instana.SDK.Span.SpanData.AnnotationValue` (previously you needed to pass in an `Aeson.Value`).

  ## 0.7.1.0
  - Fix: Limit the number of list-members (key-value pairs) to 32 in the W3C trace context `tracestate` header.

  ## 0.7.0.0
  - Add support for W3C trace context.
  - Fix: Interprete log levels provided via `INSTANA_LOG_LEVEL` and `INSTANA_LOG_LEVEL_STDOUT` case insensitive.

  ## 0.6.2.0
  - Fix: Ignore incoming X-INSTANA-T/-S if website monitoring correlation data is present.
  - Add support for X-INSTANA-SYNTHETIC

  ## 0.6.1.0
  - Fix: Capture HTTP status code in `postProcessHttpRespons` even if the currently active span is an exit.

  ## 0.6.0.0
  - Fix: Pass span ID of exit span downstream with X-INSTANA-S instead of the entry span's span ID.
  - Fix: Capture HTTP status code in `withHttpEntry` (formely `withCorrelatedHttpEntry`).
  - Breaking: Rename `Instana.SDK.SDK.withCorrelatedHttpEntry` to `withHttpEntry`. The motivation is that this function should be used by client code in almost all cases, so its name should suggest itself as the obvious choice for tracing HTTP entry spans.
  - Breaking: Rename `Instana.SDK.SDK.withHttpEntry` to `withHttpEntry_`. See above.
  - Breaking: Rename `Instana.SDK.SDK.currentTraceId` (with return type `Instana.SDK.Internal.Id.Id`) to `currentTraceIdInternal`. The function `Instana.SDK.SDK.currentTraceId` returns type `String` now.
  - Provide `Instana.SDK.SDK.postProcessHttpRespons` for cases where `withHttpEntry_` needs to be used instead of `withHttpEntry`.
  - Provide new convenience accessors `Instana.SDK.SDK`:
      - `currentSpan` (provides the currently active span in a simplified format),
      - `currentTraceId` (provides the trace ID of the currently active trace),
      - `currentSpanId` (provides the span ID of the currently active span), and
      - `currentParentId` (provides the parent ID of the currently active span).
  - Remove deprecated attribute `span.ta`.

  ## 0.5.0.1
  - No changes, only documentation updates.

  ## 0.5.0.0
  - Add support for website monitoring back end correlation via Server-Timing.
  - Add support for website monitoring back end correlation via X-INSTANA-L/correlationType/correlationId.

  ## 0.4.0.0
  - Accomodate for breaking changes in `network-3.0.0.0`.

  ## 0.3.0.0
  - Honor the environment variable `INSTANA_SERVICE_NAME` to override the default service name in Instana.
  - Add a configuration option for overriding the default service name in Instana.
  - Add `InstanaSDK.setServiceName` to override the default service name in Instana on a per-call basis.
  - Fix: Send correct SDK spans. This is a breaking change. Several functions were renamed or have changed their signature.
  In detail:

      - Use `InstanaSDK.addTag` instead of `InstanaSDK.addData` (for SDK
        spans).
      - Use `InstanaSDK.addTagAt` instead of `InstanaSDK.addDataAt` (for SDK spans).
      - For registered spans, replace `InstanaSDK.addData` and `InstanaSDK.addDataAt` with `InstanaSDK.addRegisteredData` and `InstanaSDK.addRegisteredDataAt`. Note that you should probably not create registered spans, but only use SDK spans.
      - Usages like `startEntry "some.span.name"` or `withEntry "some.span.name"` (that is, the span name is passed directly as a literal) will simply continue to work as expected but will require `OverloadedStrings` to be active.
      - Usages where the span name is stored in a `Data.Text` value first and then passed to `startEntry`/`withEntry`/etc. will break. You can fix those by importing
  ```
  import qualified Instana.SDK.Span.SpanType as SpanType
  ```
  and then wrapping the span name in `SpanType.SdkSpan`. For example:
  ```
  spanName = T.pack "some.span.name"
  InstanaSDK.withRootEntry instana spanName ...
  ```
  becomes:
  ```
  spanType = SpanType.SdkSpan $ T.pack "some.span.name"
  InstanaSDK.withRootEntry instana spanType ...
  ```

  ## 0.2.0.0
  - Add WAI middleware plug-in to trace HTTP entries automatically.

  ## 0.1.0.0
  - Initial release

basic-deps:
  warp: -any
  http-client: -any
  regex-pcre: -any
  exceptions: -any
  bytestring: -any
  ekg-core: -any
  wai: -any
  sysinfo: -any
  case-insensitive: -any
  aeson-casing: -any
  instana-haskell-trace-sdk: -any
  unix: -any
  stm: -any
  base: '>=4.7 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  retry: -any
  process: -any
  network: -any
  servant-server: -any
  servant: -any
  containers: -any
  regex-compat: -any
  binary: -any
  hslogger: -any
  regex-tdfa: -any
  http-client-tls: -any
  regex-base: -any
  transformers: -any
  random: -any
  scientific: -any
  http-types: -any
  aeson: -any
  vector: -any
  aeson-extra: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.7.0.0
- 0.7.1.0
- 0.8.0.0
- 0.9.0.0
author: Bastian Krol
latest: 0.9.0.0
description-type: markdown
description: "# Instana Haskell Trace SDK &nbsp; [![Build Status](https://circleci.com/gh/instana/haskell-trace-sdk.svg?style=svg)](https://circleci.com/gh/instana/haskell-trace-sdk)\n\n\nMonitor
  your Haskell application with [Instana](https://www.instana.com/)! \U0001F389\n\nWhat
  The Haskell Trace SDK Is And What It Is Not\n------------------------------------------------\n\nThe
  Instana Haskell Trace SDK does not support automatic instrumentation/tracing in
  the way we support it in most other languages. Instead, the SDK enables you to create
  spans manually, much like the [Instana Trace SDK for Java](https://docs.instana.io/core_concepts/tracing/java_trace_sdk/)
  does. Besides offering a convenient API to create spans, the Haskell Trace SDK also
  takes care of establishing a connection to the Instana Agent and sending spans to
  the agent in an efficient way, that does not impede the performance of your production
  code. Last but not least, it collects runtime metrics and reports them to Instana.\n\nInstallation\n------------\n\nTo
  use the Instana Haskell Trace SDK in your application, add `instana-haskell-trace-sdk`
  to your dependencies (for example to the `build-depends` section of your cabal file).
  If you are using [stack](https://docs.haskellstack.org/en/stable/README/) you might
  need to add the SDK (with the version number you want to use) to the `extra-deps`
  section in your `stack.yaml` file:\n\n```\nextra-deps:\n- instana-haskell-trace-sdk-0.9.0.0\n```\n\nDepending
  on the stack resolver you use, you might also need to add `aeson-extra` to your
  extra-deps:\n\n```\n- aeson-extra-0.4.1.3@sha256:8ad8e4d28e46280ea98af2e94dcaaf524c396c9d91b1eba867961efc6e7f923f,2997\n```\n\nUsage\n-----\n\n<i>Example
  app: Take a look at the [Monad Shop](https://github.com/instana/monad-shop) To see
  the Instana Haskell Trace SDK in action.</i>\n\n### Initialization\n\nBefore using
  the SDK, you need to initialize it once, usually during application startup.\n\n```\nimport
  qualified Instana.SDK.SDK as InstanaSDK\n\nmain :: IO ()\nmain = do\n  -- ... initialize
  things ...\n\n  -- initialize Instana\n  instana <- InstanaSDK.initInstana\n\n  --
  ... initialize more things\n```\n\nThe value `instana :: Instana.SDK.InstanaContext`
  that is returned by `InstanaSDK.initInstana` is required for all further calls,
  that is, for creating spans that will be send to the agent. The SDK will try to
  connect to an agent (asynchronous, in a a separate thread) as soon as it receives
  the `initInstana` call.\n\nThe SDK can be configured via environment variables or
  directly in the code by passing configuration parameters to the initialization function,
  or both.\n\nIf you would like to pass configuration parameters programatically,
  use `initConfiguredInstana` instead of `initInstana`:\n\n```\nimport qualified Instana.SDK.SDK
  as InstanaSDK\n\nmain :: IO ()\nmain = do\n\n  -- Example snippet for using the
  Instana SDK and providing a configuration\n  -- (agent host, port, ...) directly
  in code. You only need to specify the\n  -- configuration values you are interested
  in and can omit everything else\n  -- (see https://www.yesodweb.com/book/settings-types).\n
  \ let\n    config =\n      InstanaSDK.defaultConfig\n        { InstanaSDK.agentHost
  = Just \"127.0.0.1\"\n        , InstanaSDK.agentPort = Just 42699\n        , InstanaSDK.serviceName
  = Just \"A Great Hakell Service\"\n        , InstanaSDK.forceTransmissionAfter =
  Just 1000\n        , InstanaSDK.forceTransmissionStartingAt = Just 500\n        ,
  InstanaSDK.maxBufferedSpans = Just 1000\n        }\n  instana <- InstanaSDK.initConfiguredInstana
  config\n```\n\nFor configuration parameters that are omitted when creating the config
  record or are set to `Nothing`, the SDK will fall back to environment variables
  (see below) and then to default values.\n\nThere are also [bracket-style](https://wiki.haskell.org/Bracket_pattern)
  variants of the initialization function, called `withInstana` and `withConfiguredInstana`:\n\n```\nimport
  qualified Instana.SDK.SDK as InstanaSDK\n\nmain :: IO ()\nmain = do\n  InstanaSDK.withInstana
  runApp\n\nrunApp :: InstanaContext -> IO ()\nrunApp instana = do\n  -- do your thing
  here :-)\n```\n\nor, with bracket style and a configuration record:\n\n```\nimport
  qualified Instana.SDK.SDK as InstanaSDK\n\nmain :: IO ()\nmain = do\n  let\n    config
  =\n      InstanaSDK.defaultConfig\n        { InstanaSDK.agentHost = Just \"127.0.0.1\"\n
  \       , InstanaSDK.agentPort = Just 42699\n        , InstanaSDK.serviceName =
  Just \"A Great Hakell Service\"\n        , InstanaSDK.forceTransmissionAfter = Just
  1000\n        , InstanaSDK.forceTransmissionStartingAt = Just 500\n        , InstanaSDK.maxBufferedSpans
  = Just 1000\n        }\n\n  InstanaSDK.withConfiguredInstana config runApp\n\nrunApp
  :: InstanaContext -> IO ()\nrunApp instana = do\n  -- do your thing here :-)\n```\n\n###
  Creating Spans\n\n#### Trace HTTP Entries Automatically\n\nYou can let the SDK automatically
  create entry spans for all incoming HTTP requests in a WAI application by using
  it as a WAI middleware plug-in. Instana tracing headers as well as W3C trace context
  headers are automatically taken into account by the plug-in. Note that exit spans
  still need to be created manually via the `withHttpExit` or `startHttpExit`/`completeExit`
  functions (see below).\n\nThe middleware plug-in will also add an additional HTTP
  response header (`Server-Timing`) to HTTP responses. This header enables website
  monitoring back end correlation.\n\n```\nimport qualified Instana.Wai.Middleware.Entry
  as InstanaWaiMiddleware\n\nmain = do\n  Warp.run 3000 $ InstanaWaiMiddleware.traceHttpEntries
  instana $ app\n```\n\n#### Bracket Style (High Level API)\n\nAll functions starting
  with `with` accept (among other parameters) an IO action. The SDK will start a span
  before, then execute the given IO action and complete the span afterwards. Using
  this style is recommended over the low level API that requires you to start and
  complete spans yourself.\n\n* `withRootEntry`: Creates an entry span that is the
  root of a trace (it has no parent span).\n* `withEntry`: Creates an entry span that
  has a parent span.\n* `withHttpEntry`: A convenience function that examines an incoming
  HTTP request for Instana tracing headers or W3C trace context headers and creates
  an entry span. It will automatically add the correct metadata to the span. Note
  that you do not need to handle incoming HTTP requests at all when using the Instana
  WAI middleware plug-in (see above).\n* `withHttpEntry_`: A variant of `withHttpEntry`
  with a more general type signature, but less features. It will automatically continue
  the trace from incoming headers (Instana headers or W3C trace context) just like
  `withHttpEntry` does, but it will not capture the status code of the HTTP response
  or add the response header for website monitoring back end correlation (Server-Timing).
  It is recommended to use `withHttpEntry` instead of this function, if possible.
  Alternatively, you can also call `postProcessHttpResponse` inside the `withHttpEntry_`
  block to cover the two missing features mentioned above. Note that you do not need
  to handle incoming HTTP requests at all when using the Instana WAI middleware plug-in.\n*
  `withExit`: Creates an exit span. This can only be called inside a `withRootEntry`
  or an `withEntry` call, as an exit span needs an entry span as its parent.\n* `withHttpExit`:
  Creates an exit span for a given HTTP client request. It will automatically add
  the correct metadata to the span so it should be preferred to `withExit` when tracing
  outgoing HTTP requests. It will also add Instana tracing HTTP headers as well as
  W3C trace context HTTP headers HTTP to the request to propagate the trace context
  downstream.\n* `postProcessHttpResponse`: Processes the response of an HTTP entry.
  This function needs be called while the HTTP entry span is still active. It can
  be used inside a `withHttpEntry_` block or between `startHttpEntry` and `completeEntry`.
  This function accomplishes two things: It captures the HTTP status code from the
  response and adds it as an annotation to the currently active span. It also adds
  an additional HTTP response header (Server-Timing) to the given HTTP response that
  enables website monitoring back end correlation. Client code should rarely have
  the need to call this directly. Instead, capture incoming HTTP requests with `withHttpEntry`,
  which does both of these things automatically.\n\n#### Low Level API/Explicit Start
  And Complete\n\n* `startRootEntry`: Starts an entry span that is the beginning of
  a trace (has no parent span). You will need to call `completeEntry` at some point.\n*
  `startEntry`: Starts an entry span. You will need to call `completeEntry` at some
  point.\n* `startHttpEntry`: Starts an entry span for an incoming HTTP request. It
  will automatically add the correct metadata to the span. You do not need to handle
  incoming HTTP requests at all when using the WAI middleware plug-in (see above).
  You will need to call `completeEntry` at some point.\n* `startExit`: Starts an exit
  span. You will need to call `completeExit` at some point.\n* `startHttpExit`: Starts
  an exit span for an outgoing HTTP request. It will automatically add the correct
  metadata to the span so it should be preferred to `startExit` when tracing outgoing
  HTTP requests. It will also add HTTP headers to the request to propagate the trace
  context downstream. You will need to call `completeExit` at some point.\n* `completeEntry`:
  Finalizes an entry span. This will put the span into the SDK's span buffer for transmission
  to the Instana agent.\n* `completeExit`: Finalizes an exit span. This will put the
  span into the SDK's span buffer for transmission to the Instana agent.\n\n#### Best
  Practices\n\nMake sure you have read Instana's [docs on custom tracing](https://docs.instana.io/quick_start/custom_tracing/#tips--best-practices)
  and in particular the [best practices section](https://docs.instana.io/quick_start/custom_tracing/#tips--best-practices).
  This documentation contains a lot of useful info for integrating Instana tracing
  into your code; among other things, it explains which [annotations](https://docs.instana.io/quick_start/custom_tracing/#list-of-processed-tags)
  can be added to spans (via `InstanaSDK.addAnnotation`, `InstanaSDK.addAnnotationAt`,
  `InstanaSDK.addAnnotationValueAt`, and `InstanaSDK.addJsonValueAt`).\n\nInstana
  differentiates between so-called registered spans and SDK spans. Registered spans
  are usually created by automatic tracing and there is specialized handling for each
  registered in Instana's processing pipeline. SDK spans, in contrast, are the type
  of spans created by using a trace SDK (like the Haskell trace SDK or other, similar
  SDKs for other runtime platforms). SDK span are processed in a more generic fashion
  by Instana's processing pipeline.\n\nNote that nearly all spans created with this
  SDK should be SDK spans. The are only two exceptions, for which this SDK creates
  registered spans:\n- HTTP/WAI entry (server) spans, and\n- HTTP exit (client) spans.\n\nThe
  SDK offers special functions to create these registered spans (`withHttpEntry`,
  `withHttpExit` as well as the corresponding lower level functions `startHttpEntry`
  and `startHttpExit`, see above).\n\n### Configuration Via Environment Variables\n\nInstead
  of configuring the SDK programatically, as seen above, it can also be configured
  via environment variables:\n\n* `INSTANA_AGENT_HOST`: The IP or the host of the
  Instana agent to connect to. Default: 127.0.0.1.\n* `INSTANA_AGENT_PORT`: The port
  of the Instana agent to connect to. Default: 42699.\n* `INSTANA_SERVICE_NAME`: Override
  the default service name in Instana.\n* `INSTANA_FORCE_TRANSMISSION_STARTING_AFTER`:
  Spans are usually buffered before being transmitted to the agent. This setting forces
  the transmission of all buffered spans after the given amount of milliseconds. Default:
  1000.\n* `INSTANA_FORCE_TRANSMISSION_STARTING_AT`: This setting forces the transmission
  of all buffered spans when the given number of spans has been buffered.\n* `INSTANA_MAX_BUFFERED_SPANS`:
  Limits the number of spans to buffer. When the limit is reached, spans will be dropped.
  This setting is a safe guard against memory leaks from buffering excessive amounts
  of spans. It must be larger than `INSTANA_FORCE_TRANSMISSION_STARTING_AT`.\n* `INSTANA_LOG_LEVEL`:
  See section \"Configure Debug Logging\".\n* `INSTANA_LOG_LEVEL_STDOUT`: See section
  \"Configure Debug Logging\".\n* `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`: See section
  \"Configure Debug Logging\".\n\n### Configure Debug Logging\n\nIf required, the
  Instana Haskell SDK can produce logs via [hslogger](http://hackage.haskell.org/package/hslogger).
  Under normal circumstances, the SDK does not emit any log output at all. It will
  only output log messages when logging is explicitly enabled via certain environment
  variables. This can be useful to troubleshoot tracing in production settings or
  during development.\n\n#### Logging Related Environment Variables\n\n* `INSTANA_LOG_LEVEL`:
  Sets the log level for the SDK's log file. The log file will be written to the system's
  temporary directory (in particular, whatever `System.Directory.getTemporaryDirectory`
  returns) as `instana-haskell-sdk.{pid}.log`. All [log priorities from hslogger](http://hackage.haskell.org/package/hslogger-1.3.1.0/docs/System-Log-Logger.html#t:Priority)
  can be used, case insensitive.\n* `INSTANA_LOG_LEVEL_STDOUT`: Sets the level for
  emitting log messages to stdout. All [log priorities from hslogger](http://hackage.haskell.org/package/hslogger-1.3.1.0/docs/System-Log-Logger.html#t:Priority)
  can be used, case insensitive.\n* `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`: Controls
  whether the SDK sets an hslogger at the root logger level, see below.\n\n#### When
  To Set `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`\n\nSetting up hslogger correctly
  inside a library like the Instana Haskell SDK (as opposed to an application which
  has full control) can be tricky. For the Instana Haskell SDK to be able to correctly
  configure hslogger, it is important to know whether the app in question (or some
  part of it) already uses hslogger. In particular, does some part of the code set
  a handler on hslogger's root logger? Is a call like the following executed somewhere
  in the application?\n\n```\nimport System.Log.Logger (rootLoggerName, setHandlers,
  updateGlobalLogger)\n\nupdateGlobalLogger rootLoggerName $ setHandlers [...]\n```\n\nIf
  this is the case, you can simply use `INSTANA_LOG_LEVEL` (or `INSTANA_LOG_LEVEL_STDOUT`)
  without further configuration. If the app in question does not use hslogger, that
  is, if no `setHandler` call on `rootLoggerName` is executed, you should also set\n`INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER`
  to a non-empty string (for example, `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER=true`).\n\n####
  Troubleshooting Tracing In Production\n\nIf your app already uses hslogger, use:\n\n*
  `INSTANA_LOG_LEVEL=DEBUG`\n\nOtherwise, use:\n\n* `INSTANA_LOG_LEVEL=DEBUG INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER=true`\n\n####
  Development\n\nDuring development (that is, when working on the Instana Haskell
  SDK), use either\n\n* `INSTANA_LOG_LEVEL_STDOUT=DEBUG`\n\nor\n\n* `INSTANA_LOG_LEVEL_STDOUT=DEBUG`\n*
  `INSTANA_OVERRIDE_HSLOGGER_ROOT_HANDLER=true`\n\ndepending on whether the application
  already uses and configures hslogger. The application `example-app` that is contained
  in the Instana Haskell SDK's repo configures hslogger, so simply using `INSTANA_LOG_LEVEL_STDOUT=DEBUG`
  is correct.\n\nContributing\n------------\n\nSee [CONTRIBUTING.md](https://github.com/instana/haskell-trace-sdk/blob/main/CONTRIBUTING.md).\n\n"
license-name: MIT
