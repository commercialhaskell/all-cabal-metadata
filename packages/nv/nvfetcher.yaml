all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
author: berberman
basic-deps:
  aeson: '>=1.5.6 && <2.3'
  aeson-pretty: '>=0'
  base: '>=4.8 && <5'
  binary: '>=0'
  binary-instances: '>=1.0 && <1.1'
  bytestring: '>=0'
  containers: '>=0'
  data-default: '>=0.7.1 && <0.8'
  extra: '>=1.7 && <1.8'
  free: '>=5.1 && <5.3'
  microlens: '>=0'
  microlens-th: '>=0'
  neat-interpolation: '>=0.5.1 && <0.6'
  nvfetcher: '>=0'
  optparse-simple: '>=0.1.1 && <0.2'
  parsec: '>=0'
  prettyprinter: '>=0'
  regex-tdfa: '>=1.3.1 && <1.4'
  shake: '>=0.19 && <0.20'
  text: '>=0'
  toml-reader: '>=0.2 && <0.3'
  transformers: '>=0'
  unordered-containers: '>=0'
  validation-selective: '>=0'
changelog: "# Revision history for nvfetcher\n\n## 0.6.2.0\n\n* Rework config parsing
  with toml-reader\n\n## 0.6.1.0\n\n* Replace `nix-prefetch` with `nix-prefetch-git`
  and `nix-prefetch-url`\n\n## 0.6.0.0\n\n* Parse error output from nvchecker\n* Add
  source and fetcher for Docker containers (Thanks to @amesgen)\n* Add option fetch.force
  to always rerun the prefetch rule\n* Add `fetchGitHubRelease'` to `PackageSet` \n*
  Add `GetGitCommitDate` rule\n* Add `--keyfile` to pass [nvchecker keyfile](https://nvchecker.readthedocs.io/en/latest/usage.html#configuration-table)\n*
  Remove IFD from extracing sources\n\n## 0.5.0.0\n\nThere have been many significant
  changes since the last release.\n**Starting from this version, nvfetcher no longer
  requires shake database for each project,\nin other words, there is no need to commit
  the database in git or share it between machines.**\nAlso, a machine-readable `generated.json`
  will be generated for convenience.\n\n### Migration\n\nThe option in TOML configuration
  `cargo_lock` (string) was changed to `cargo_locks` (list of strings), since now
  nvfetcher supports handling multi-cargo locks.\n\n* Use `fetchFromGitHub` as the
  GitHub fetcher (introduces [`nix-prefetch`](https://github.com/msteen/nix-prefetch))\n*
  Add [cmd](https://nvchecker.readthedocs.io/en/latest/usage.html#find-with-a-command)
  version source\n* Support pinning a package\n* Tweak src name to extract .vsx file
  properly\n* Add option --filter to specify packages to update\n* Fix missing `argActionAfterBuild`\n*
  Add one shot nvchecker rule independent of package definition\n* Don't cache generated
  nix exprs in shake database\n* Add `fetchTarball`\n* Produce parser readable `generated.json`\n*
  Internalize shake database\n* Validate config before decoding\n* Extract `Config`
  from `Arg` and save it to shake extra\n* Breakdown `Args` to provide a more concise
  API\n* Support multi-cargo lock files\n* Pretty print rules in command line\n\n##
  0.4.0.0\n\n* Rename `_build` to `_sources`\n* Remove the symlink `sources.nix ->
  _sources/generated.nix`\n  * Remove CLI option `--output` (was used to set the symlink
  source name, `sources.nix` by default)\n  * Add CLI option `build-dir` to specify
  build directory (`_sources` by default)\n* Add CLI option `--commit-changes` to
  commit changes of build directory\n* Support openvsx and vsmarketplace version sources
  (needs new version of nvchecker)\n* Support attributes pass through\n* Fix the bug
  that Core rule was cut off even if the configuration has changed\n(no longer needs
  to use `nvfetcher clean` to keep the build system consistency manually)\n* Fix the
  parser of git source in Cargo.lock\n* Fix wrong trailing white spances in generated
  nix expr\n* Fix missing semicolon in generated nix expr that reads Cargo.lock file\n*
  Enhance eDSL experience\n* Add some unit tests\n\n## 0.3.0.0\n\nThere are massive
  enhancements since the last release:\n\n* Add support for nvchecker [list options](https://nvchecker.readthedocs.io/en/latest/usage.html#list-options)\n*
  Refactor TOML config parsing\n* Remove version specification in fetcher config (`fetch.url
  = url:version` -> `fetch.url = url`)\n* Add support for calculating [`cargoLock`](https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file)
  for `rustPlatform.buildRustPackage`\n* Add support for nvchecker [global options](https://nvchecker.readthedocs.io/en/latest/usage.html#global-options)\n*
  Remove ambiguous branch specification (`git.branch`) from git fetcher\n* Enable
  parallelism by default\n* Add a global retry option\n* Rename `.shake` to `_build`\n*
  Generate nix output file in `_build`, and symlink it to `../sources.nix` (You have
  to keep `_build` as the `nvfetcher` run result)\n* Support extracting arbitrary
  files from fetched package source\n* Add nvchecker upstream sources [`src.webpage`](https://nvchecker.readthedocs.io/en/latest/usage.html#search-in-a-webpage)
  and [`src.httpheader`](https://nvchecker.readthedocs.io/en/latest/usage.html#search-in-an-http-header)\n*
  Add nvchecker upstream source `src.github_tag`\n* Share CLI between `runNvfetcher`
  (use `nvfetcher` in the DSL way) and `nvfetcher` executable program \n* Nix related
  improvements:\n  * Add a development shell `ghcWithNvfetcher` for people who want
  to use `nvfetcher` as a Haskell library\n  * Generate command line completion for
  the executable\n   \n\n## 0.2.0.0\n\n* Generated package sources will be sorted
  alphabetically.\n* CLI program now supports `nix-git-prefetch` configurations in
  TOML.\n* Lenses are added for some data types.\n* CLI options are no loger inherited
  from Shake. Now `nvfetcher` has its own CLI options with completion support.\n\n##
  0.1.0.0\n\n* First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: |
  # nvfetcher

  [![Hackage](https://img.shields.io/hackage/v/nvfetcher.svg?logo=haskell)](https://hackage.haskell.org/package/nvfetcher)
  [![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)
  [![nix](https://github.com/berberman/nvfetcher/actions/workflows/nix.yml/badge.svg)](https://github.com/berberman/nvfetcher/actions/workflows/nix.yml)

  nvfetcher is a tool to automate nix package updates. It's built on top of [shake](https://www.shakebuild.com/),
  integrating [nvchecker](https://github.com/lilydjwg/nvchecker).
  nvfetcher cli program accepts a TOML file as config, which defines a set of package sources to run.

  ## Overview

  For example, feeding the following configuration to`nvfetcher`:

  ```toml
  # nvfetcher.toml
  [feeluown]
  src.pypi = "feeluown"
  fetch.pypi = "feeluown"
  ```

  it will create `_sources/generated.nix`:

  ```nix
  { fetchgit, fetchurl, fetchFromGitHub }:
  {
    feeluown = {
      pname = "feeluown";
      version = "3.8.2";
      src = fetchurl {
        url = "https://pypi.io/packages/source/f/feeluown/feeluown-3.8.2.tar.gz";
        sha256 = "sha256-V2yzpkmjRkipZOvQGB2mYRhiiEly6QPrTOMJ7BmyWBQ=";
      };
    };
  }
  ```

  and `_sources/generated.json`:

  ```json
  {
    "feeluown": {
      "pinned": false,
      "cargoLocks": null,
      "name": "feeluown-core",
      "version": "3.8.2",
      "passthru": null,
      "src": {
        "url": "https://pypi.io/packages/source/f/feeluown/feeluown-3.8.2.tar.gz",
        "name": null,
        "type": "url",
        "sha256": "sha256-V2yzpkmjRkipZOvQGB2mYRhiiEly6QPrTOMJ7BmyWBQ="
      },
      "extract": null,
      "rustGitDeps": null
    }
  }
  ```

  We tell nvfetcher how to get the latest version number of packages and how to fetch their sources given version numbers,
  and nvfetcher will help us keep their version and prefetched SHA256 sums up-to-date, producing ready-to-use nix expressions in `_sources/generated.nix`.
  Nvfetcher reads `generated.json` to produce version change message, such as `feeluown: 3.8.1 → 3.8.2`.
  We always check versions of packages during each run, but only do prefetch and further operations when needed.

  ### Live examples

  How to use the generated sources file? Here are several examples:

  - My [flakes repo](https://github.com/berberman/flakes)

  - Nick Cao's [flakes repo](https://gitlab.com/NickCao/flakes/-/tree/master/pkgs)

  ## Installation

  `nvfetcher` package is available in [nixpkgs](https://github.com/NixOS/nixpkgs), so you can try it with:

  ```
  $ nix-shell -p nvfetcher
  ```

  This repo also has flakes support:

  ```
  $ nix run github:berberman/nvfetcher
  ```

  To use it as a Haskell library, the package is available on [Hackage](https://hackage.haskell.org/package/nvfetcher).
  If you want to use the Haskell library from flakes, there is also a shell `ghcWithNvfetcher`:

  ```
  $ nix develop github:berberman/nvfetcher#ghcWithNvfetcher
  $ runghc Main.hs
  ```

  where you can define packages in `Main.hs`. See [Haskell library](#Haskell-library) for details.

  ## Usage

  Basically, there are two ways to use nvfetcher, where the difference is how we provide package sources definitions to it.

  ### CLI

  To run nvfetcher as a CLI program, you'll need to provide package sources defined in TOML.

  ```
  Usage: nvfetcher [--version] [--help] [-o|--build-dir DIR] [--commit-changes]
                   [-l|--changelog FILE] [-j NUM] [-r|--retry NUM] [-t|--timing]
                   [-v|--verbose] [-f|--filter REGEX] [-k|--keyfile FILE] [TARGET]
                   [-c|--config FILE]
    generate nix sources expr for the latest version of packages

  Available options:
    --version                Show version
    --help                   Show this help text
    -o,--build-dir DIR       Directory that nvfetcher puts artifacts to
                             (default: "_sources")
    --commit-changes         `git commit` build dir with version changes as commit
                             message
    -l,--changelog FILE      Dump version changes to a file
    -j NUM                   Number of threads (0: detected number of processors)
                             (default: 0)
    -r,--retry NUM           Times to retry of some rules (nvchecker, prefetch,
                             nix-build, etc.) (default: 3)
    -t,--timing              Show build time
    -v,--verbose             Verbose mode
    -f,--filter REGEX        Regex to filter packages to be updated
    -k,--keyfile FILE        Nvchecker keyfile
    TARGET                   Two targets are available: 1.build 2.clean
                             (default: build)
    -c,--config FILE         Path to nvfetcher TOML config
                             (default: "nvfetcher.toml")
  ```

  Each _package_ corresponds to a TOML table, whose name is encoded as table key, with
  two required fields and three optional fields in each table.
  You can find an example of the configuration file, see [`nvfetcher_example.toml`](nvfetcher_example.toml).

  ### Keyfile

  You can specify nvchecker keyfile via command line option.
  For the format of this file, please refer to [nvchecker documentation](https://nvchecker.readthedocs.io/en/latest/usage.html#configuration-table).

  #### Nvchecker

  Version source -- how do we track upstream version updates?

  - `src.github = owner/repo` - the latest github release
  - `src.github_tag = owner/repo` - the max github tag, usually used with list options (see below)
  - `src.pypi = pypi_name` - the latest pypi release
  - `src.git = git_url` (and an optional `src.branch = git_branch`) - **the latest commit** of a repo
  - `src.archpkg = archlinux_pkg_name` -- the latest version of an archlinux package
  - `src.aur = aur_pkg_name` -- the latest version of an aur package
  - `src.manual = v` -- a fixed version, which never updates
  - `src.repology = project:repo` -- the latest version from repology
  - `src.webpage = web_url` and `src.regex` -- a string in webpage that matches with regex
  - `src.httpheader = request_url` and `src.regex` -- a string in http header that matches with regex
  - `src.openvsx = publisher.ext_name` -- the latest version of a vscode extension from open vsx
  - `src.vsmarketplace = publisher.ext_name` -- the latest version of a vscode extension from vscode marketplace
  - `src.cmd = cmd` -- the version from a shell command (e.g. `echo Meow`)
  - `src.container = owner/name` - the latest tag of a container from the Docker registry

  Optional list options for some version sources (`src.github_tag`, `src.webpage`, and `src.httpheader` and `src.container`),
  see the corresponding [nvchecker documentation](https://nvchecker.readthedocs.io/en/latest/usage.html#list-options) for details.

  - `src.include_regex`
  - `src.exclude_regex`
  - `src.sort_version_key`
  - `src.ignored`

  Optional global options for all kinds of version sources,
  see the corresponding [nvchecker documentation](https://nvchecker.readthedocs.io/en/latest/usage.html#global-options) for details. You can tweak obtained version number using this option, e.g. stripping the prefix `v` or transforming the result by regex.

  - `src.prefix`
  - `src.from_pattern`
  - `src.to_pattern`

  #### Nix fetcher

  How do we fetch the package source if we have the target version number?
  `$ver` is available in string, which will be set to the result of nvchecker.

  - `fetch.github = owner/repo`
  - `fetch.pypi = pypi_name`
  - `fetch.git = git_url`
  - `fetch.url = url`
  - `fetch.openvsx = publisher.ext_name`
  - `fetch.vsmarketplace = publisher.ext_name`
  - `fetch.tarball = tarball_url`
  - `fetch.docker = owner/name`

  Optional `nix-prefetch fetchgit` config, which make sense only when the fetcher equals to `fetch.github` or `fetch.git`.
  They can exist simultaneously.

  - `git.deepClone`
  - `git.fetchSubmodules`
  - `git.leaveDotGit`

  Optional config for `fetch.docker`/`dockerTools.pullImage`:

  - `docker.os`
  - `docker.arch`
  - `docker.finalImageName`
  - `docker.finalImageTag`
  - `docker.tlsVerify`

  #### Extract src

  Optional _extract src_ config, files are extracted into build directory, and then read by `readFile` in generated nix expr.

  - `extract = [ "file_1", "file_2", ...]` - file paths are relative to the source root

  #### Rust support

  `rustPlatform.buildRustPackage` now accepts an attribute [`cargoLock`](https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file) to vendor dependencies from `Cargo.lock`,
  so we can use this instead of TOFU `cargoSha256` for Rust packaging. `nvfetcher` supports automating this process,
  extracting the lock file to build and calculating `cargoLock.outputHashes`, as long as you set the config.
  There can be many lock files in one source.

  - `cargo_locks = [ "cargo_lock_path_1", "cargo_lock_path_2", ...]` - relative to the source root

  #### Passthru

  _passthru_ config, an additional set of attrs to be generated.

  - `passthru = { k1 = "v1", k2 = "v2", ... }`

  Note: currently the values can only be strings

  #### Pinned

  If a package is pinned, we call nvchecker to check the new version iff there's no existing version.

  - `pinned = true`

  #### Git commit date

  If the version source of a package is `git`, nvfetcher can finds out the commit date of this revision,
  in the format of `%Y-%m-%d` by default. You can provide your own [`strftime`](https://strftime.org/) format:

  - `git.date_format = "strftime_format"`

  #### Force fetching

  Always fetch the package, even if its version (nvchecker output) doesn't change.
  This is useful when the file to be downloaded cannot not be determined by the url.

  - `fetch.force = true`

  > Note: In such case, nvfetcher will not produce a version change log, since the version doesn't change at all.
  > Only sha256 in generated files will be updated.

  ### Haskell library

  nvfetcher itself is a Haskell library as well, whereas the CLI program is just a trivial wrapper of the library.
  You can create a Haskell program depending on it directly, by using the `runNvFetcher` entry point.
  In this case, we can define packages in Haskell language, getting rid of TOML constraints.

  You can find an example of using nvfetcher in the library way, see [`Main_example.hs`](Main_example.hs).

  ## Documentation

  For details of the library, documentation of released versions is available on [Hackage](https://hackage.haskell.org/package/nvfetcher),
  and of master is on our [github pages](https://nvfetcher.berberman.space).

  ## Contributing

  Issues and PRs are always welcome. **\_(:з」∠)\_**

  Building from source:

  ```
  $ git clone https://github.com/berberman/nvfetcher
  $ nix develop
  $ cabal update
  $ cabal build
  ```
description-type: markdown
hash: f9492a8f5a62380c6f3cad053824fdd5c35d5b0715de353f9c95094d4a251766
homepage: https://github.com/berberman/nvfetcher
latest: 0.6.2.0
license-name: MIT
maintainer: berberman <berberman.yandex.com>
synopsis: Generate nix sources expr for the latest version of packages
test-bench-deps:
  aeson: '>=1.5.6 && <2.3'
  aeson-pretty: '>=0'
  async: '>=0'
  base: '>=4.8 && <5'
  binary: '>=0'
  binary-instances: ^>=1.0
  bytestring: '>=0'
  containers: '>=0'
  data-default: ^>=0.7.1
  extra: ^>=1.7
  free: '>=5.1 && <5.3'
  hspec: '>=0'
  microlens: '>=0'
  microlens-th: '>=0'
  neat-interpolation: ^>=0.5.1
  nvfetcher: '>=0'
  optparse-simple: ^>=0.1.1
  parsec: '>=0'
  prettyprinter: '>=0'
  regex-tdfa: ^>=1.3.1
  shake: ^>=0.19
  stm: '>=0'
  text: '>=0'
  toml-reader: ^>=0.2
  transformers: '>=0'
  unliftio: '>=0'
  unordered-containers: '>=0'
