all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.7.0.0
author: berberman
basic-deps:
  aeson: '>=1.5.6 && <2.3'
  aeson-pretty: '>=0'
  base: '>=4.8 && <5'
  binary: '>=0'
  binary-instances: '>=1.0 && <1.1'
  bytestring: '>=0'
  containers: '>=0'
  data-default: '>=0.7 && <0.9'
  extra: '>=1.7 && <1.9'
  free: '>=5.1 && <5.3'
  microlens: '>=0'
  microlens-th: '>=0'
  neat-interpolation: '>=0.5.1 && <0.6'
  nvfetcher: '>=0'
  optparse-simple: '>=0.1.1 && <0.2'
  parsec: '>=0'
  prettyprinter: '>=0'
  regex-tdfa: '>=1.3 && <1.4'
  shake: '>=0.19 && <0.20'
  text: '>=0'
  toml-reader: '>=0.2 && <0.4'
  transformers: '>=0'
  unordered-containers: '>=0'
changelog: "# Revision history for nvfetcher\n\n## 0.7.0.0\n\nNow nvfetcher removes
  all files *except* `generated.json` and `generated.nix` in `_sources` before each
  run. If you do want to keep those files, you can use the new CLI option `--keep-old`.
  In addition, a new target `purge` is introduced for resetting the state of nvfetcher
  by deleting the shake database saved in XDG directory. \n\n* Quote package name
  passed to nvchecker\n* Add `url.name` option to specify the file name in prefetch\n*
  Clean build dir before build\n* Support keep going on fetch failure\n* Add `--commit-summary`\n*
  Support sparseCheckout\n\n## 0.6.2.0\n\n* Rework config parsing with toml-reader\n\n##
  0.6.1.0\n\n* Replace `nix-prefetch` with `nix-prefetch-git` and `nix-prefetch-url`\n\n##
  0.6.0.0\n\n* Parse error output from nvchecker\n* Add source and fetcher for Docker
  containers (Thanks to @amesgen)\n* Add option fetch.force to always rerun the prefetch
  rule\n* Add `fetchGitHubRelease'` to `PackageSet` \n* Add `GetGitCommitDate` rule\n*
  Add `--keyfile` to pass [nvchecker keyfile](https://nvchecker.readthedocs.io/en/latest/usage.html#configuration-table)\n*
  Remove IFD from extracing sources\n\n## 0.5.0.0\n\nThere have been many significant
  changes since the last release.\n**Starting from this version, nvfetcher no longer
  requires shake database for each project,\nin other words, there is no need to commit
  the database in git or share it between machines.**\nAlso, a machine-readable `generated.json`
  will be generated for convenience.\n\n### Migration\n\nThe option in TOML configuration
  `cargo_lock` (string) was changed to `cargo_locks` (list of strings), since now
  nvfetcher supports handling multi-cargo locks.\n\n* Use `fetchFromGitHub` as the
  GitHub fetcher (introduces [`nix-prefetch`](https://github.com/msteen/nix-prefetch))\n*
  Add [cmd](https://nvchecker.readthedocs.io/en/latest/usage.html#find-with-a-command)
  version source\n* Support pinning a package\n* Tweak src name to extract .vsx file
  properly\n* Add option --filter to specify packages to update\n* Fix missing `argActionAfterBuild`\n*
  Add one shot nvchecker rule independent of package definition\n* Don't cache generated
  nix exprs in shake database\n* Add `fetchTarball`\n* Produce parser readable `generated.json`\n*
  Internalize shake database\n* Validate config before decoding\n* Extract `Config`
  from `Arg` and save it to shake extra\n* Breakdown `Args` to provide a more concise
  API\n* Support multi-cargo lock files\n* Pretty print rules in command line\n\n##
  0.4.0.0\n\n* Rename `_build` to `_sources`\n* Remove the symlink `sources.nix ->
  _sources/generated.nix`\n  * Remove CLI option `--output` (was used to set the symlink
  source name, `sources.nix` by default)\n  * Add CLI option `build-dir` to specify
  build directory (`_sources` by default)\n* Add CLI option `--commit-changes` to
  commit changes of build directory\n* Support openvsx and vsmarketplace version sources
  (needs new version of nvchecker)\n* Support attributes pass through\n* Fix the bug
  that Core rule was cut off even if the configuration has changed\n(no longer needs
  to use `nvfetcher clean` to keep the build system consistency manually)\n* Fix the
  parser of git source in Cargo.lock\n* Fix wrong trailing white spances in generated
  nix expr\n* Fix missing semicolon in generated nix expr that reads Cargo.lock file\n*
  Enhance eDSL experience\n* Add some unit tests\n\n## 0.3.0.0\n\nThere are massive
  enhancements since the last release:\n\n* Add support for nvchecker [list options](https://nvchecker.readthedocs.io/en/latest/usage.html#list-options)\n*
  Refactor TOML config parsing\n* Remove version specification in fetcher config (`fetch.url
  = url:version` -> `fetch.url = url`)\n* Add support for calculating [`cargoLock`](https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file)
  for `rustPlatform.buildRustPackage`\n* Add support for nvchecker [global options](https://nvchecker.readthedocs.io/en/latest/usage.html#global-options)\n*
  Remove ambiguous branch specification (`git.branch`) from git fetcher\n* Enable
  parallelism by default\n* Add a global retry option\n* Rename `.shake` to `_build`\n*
  Generate nix output file in `_build`, and symlink it to `../sources.nix` (You have
  to keep `_build` as the `nvfetcher` run result)\n* Support extracting arbitrary
  files from fetched package source\n* Add nvchecker upstream sources [`src.webpage`](https://nvchecker.readthedocs.io/en/latest/usage.html#search-in-a-webpage)
  and [`src.httpheader`](https://nvchecker.readthedocs.io/en/latest/usage.html#search-in-an-http-header)\n*
  Add nvchecker upstream source `src.github_tag`\n* Share CLI between `runNvfetcher`
  (use `nvfetcher` in the DSL way) and `nvfetcher` executable program \n* Nix related
  improvements:\n  * Add a development shell `ghcWithNvfetcher` for people who want
  to use `nvfetcher` as a Haskell library\n  * Generate command line completion for
  the executable\n   \n\n## 0.2.0.0\n\n* Generated package sources will be sorted
  alphabetically.\n* CLI program now supports `nix-git-prefetch` configurations in
  TOML.\n* Lenses are added for some data types.\n* CLI options are no loger inherited
  from Shake. Now `nvfetcher` has its own CLI options with completion support.\n\n##
  0.1.0.0\n\n* First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "# nvfetcher\n\n[![Hackage](https://img.shields.io/hackage/v/nvfetcher.svg?logo=haskell)](https://hackage.haskell.org/package/nvfetcher)\n[![MIT
  license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n[![nix](https://github.com/berberman/nvfetcher/actions/workflows/nix.yml/badge.svg)](https://github.com/berberman/nvfetcher/actions/workflows/nix.yml)\n\nnvfetcher
  is a tool to automate nix package updates. It's built on top of [shake](https://www.shakebuild.com/),\nintegrating
  [nvchecker](https://github.com/lilydjwg/nvchecker).\nnvfetcher cli program accepts
  a TOML file as config, which defines a set of package sources to run.\n\n## Overview\n\nFor
  example, feeding the following configuration to`nvfetcher`:\n\n```toml\n# nvfetcher.toml\n[feeluown]\nsrc.pypi
  = \"feeluown\"\nfetch.pypi = \"feeluown\"\n```\n\nit will create `_sources/generated.nix`:\n\n```nix\n{
  fetchgit, fetchurl, fetchFromGitHub }:\n{\n  feeluown = {\n    pname = \"feeluown\";\n
  \   version = \"3.8.2\";\n    src = fetchurl {\n      url = \"https://pypi.io/packages/source/f/feeluown/feeluown-3.8.2.tar.gz\";\n
  \     sha256 = \"sha256-V2yzpkmjRkipZOvQGB2mYRhiiEly6QPrTOMJ7BmyWBQ=\";\n    };\n
  \ };\n}\n```\n\nand `_sources/generated.json`:\n\n```json\n{\n  \"feeluown\": {\n
  \   \"pinned\": false,\n    \"cargoLocks\": null,\n    \"name\": \"feeluown-core\",\n
  \   \"version\": \"3.8.2\",\n    \"passthru\": null,\n    \"src\": {\n      \"url\":
  \"https://pypi.io/packages/source/f/feeluown/feeluown-3.8.2.tar.gz\",\n      \"name\":
  null,\n      \"type\": \"url\",\n      \"sha256\": \"sha256-V2yzpkmjRkipZOvQGB2mYRhiiEly6QPrTOMJ7BmyWBQ=\"\n
  \   },\n    \"extract\": null,\n    \"rustGitDeps\": null\n  }\n}\n```\n\nWe tell
  nvfetcher how to get the latest version number of packages and how to fetch their
  sources given version numbers,\nand nvfetcher will help us keep their version and
  prefetched SHA256 sums up-to-date, producing ready-to-use nix expressions in `_sources/generated.nix`.\nNvfetcher
  reads `generated.json` to produce version change message, such as `feeluown: 3.8.1
  → 3.8.2`.\nWe always check versions of packages during each run, but only do prefetch
  and further operations when needed.\n\n### Live examples\n\nHow to use the generated
  sources file? Here are several examples:\n\n- My [flakes repo](https://github.com/berberman/flakes)\n\n-
  Nick Cao's [flakes repo](https://gitlab.com/NickCao/flakes/-/tree/master/pkgs)\n\n##
  Installation\n\n`nvfetcher` package is available in [nixpkgs](https://github.com/NixOS/nixpkgs),
  so you can try it with:\n\n```\n$ nix-shell -p nvfetcher\n```\n\nThis repo also
  has flakes support:\n\n```\n$ nix run github:berberman/nvfetcher\n```\n\nTo use
  it as a Haskell library, the package is available on [Hackage](https://hackage.haskell.org/package/nvfetcher).\nIf
  you want to use the Haskell library from flakes, there is also a shell `ghcWithNvfetcher`:\n\n```\n$
  nix develop github:berberman/nvfetcher#ghcWithNvfetcher\n$ runghc Main.hs\n```\n\nwhere
  you can define packages in `Main.hs`. See [Haskell library](#Haskell-library) for
  details.\n\n## Usage\n\nBasically, there are two ways to use nvfetcher, where the
  difference is how we provide package sources definitions to it.\n\n### CLI\n\nTo
  run nvfetcher as a CLI program, you'll need to provide package sources defined in
  TOML.\n\n```\nUsage: nvfetcher [--version] [--help] [-o|--build-dir DIR] [--commit-changes]
  \n                 [-l|--changelog FILE] [-j NUM] [-r|--retry NUM] [-t|--timing]
  \n                 [-v|--verbose] [-f|--filter REGEX] [-k|--keyfile FILE] \n                 [--keep-old]
  [--keep-going] [TARGET] [-c|--config FILE]\n\n  generate nix sources expr for the
  latest version of packages\n\nAvailable options:\n  --version                Show
  version\n  --help                   Show this help text\n  -o,--build-dir DIR       Directory
  that nvfetcher puts artifacts to\n                           (default: \"_sources\")\n
  \ --commit-changes         `git commit` build dir with version changes as commit\n
  \                          message\n  -l,--changelog FILE      Dump version changes
  to a file\n  -j NUM                   Number of threads (0: detected number of processors)\n
  \                          (default: 0)\n  -r,--retry NUM           Times to retry
  of some rules (nvchecker, prefetch,\n                           nix-build, etc.)
  (default: 3)\n  -t,--timing              Show build time\n  -v,--verbose             Verbose
  mode\n  -f,--filter REGEX        Regex to filter packages to be updated\n  -k,--keyfile
  FILE        Nvchecker keyfile\n  --keep-old               Don't remove old files
  other than generated json and\n                           nix before build\n  --keep-going
  \            Don't stop if some packages failed to be fetched\n  TARGET                   Three
  targets are available: 1.build 2.clean (remove\n                           all generated
  files) 3.purge (remove shake db)\n                           (default: build)\n
  \ -c,--config FILE         Path to nvfetcher TOML config\n                           (default:
  \"nvfetcher.toml\")\n```\n\nEach _package_ corresponds to a TOML table, whose name
  is encoded as table key, with\ntwo required fields and three optional fields in
  each table.\nYou can find an example of the configuration file, see [`nvfetcher_example.toml`](nvfetcher_example.toml).\n\n###
  Keyfile\n\nYou can specify nvchecker keyfile via command line option.\nFor the format
  of this file, please refer to [nvchecker documentation](https://nvchecker.readthedocs.io/en/latest/usage.html#configuration-table).\n\n####
  Nvchecker\n\nVersion source -- how do we track upstream version updates?\n\n- `src.github
  = owner/repo` - the latest github release\n- `src.github_tag = owner/repo` - the
  max github tag, usually used with list options (see below)\n- `src.pypi = pypi_name`
  - the latest pypi release\n- `src.git = git_url` (and an optional `src.branch =
  git_branch`) - **the latest commit** of a repo\n- `src.archpkg = archlinux_pkg_name`
  -- the latest version of an archlinux package\n- `src.aur = aur_pkg_name` -- the
  latest version of an aur package\n- `src.manual = v` -- a fixed version, which never
  updates\n- `src.repology = project:repo` -- the latest version from repology\n-
  `src.webpage = web_url` and `src.regex` -- a string in webpage that matches with
  regex\n- `src.httpheader = request_url` and `src.regex` -- a string in http header
  that matches with regex\n- `src.openvsx = publisher.ext_name` -- the latest version
  of a vscode extension from open vsx\n- `src.vsmarketplace = publisher.ext_name`
  -- the latest version of a vscode extension from vscode marketplace\n- `src.cmd
  = cmd` -- the version from a shell command (e.g. `echo Meow`)\n- `src.container
  = owner/name` - the latest tag of a container from the Docker registry\n\nOptional
  list options for some version sources (`src.github_tag`, `src.webpage`, and `src.httpheader`
  and `src.container`),\nsee the corresponding [nvchecker documentation](https://nvchecker.readthedocs.io/en/latest/usage.html#list-options)
  for details.\n\n- `src.include_regex`\n- `src.exclude_regex`\n- `src.sort_version_key`\n-
  `src.ignored`\n\nOptional global options for all kinds of version sources,\nsee
  the corresponding [nvchecker documentation](https://nvchecker.readthedocs.io/en/latest/usage.html#global-options)
  for details. You can tweak obtained version number using this option, e.g. stripping
  the prefix `v` or transforming the result by regex.\n\n- `src.prefix`\n- `src.from_pattern`\n-
  `src.to_pattern`\n\n#### Nix fetcher\n\nHow do we fetch the package source if we
  have the target version number?\n`$ver` is available in string, which will be set
  to the result of nvchecker.\n\n- `fetch.github = owner/repo`\n- `fetch.pypi = pypi_name`\n-
  `fetch.git = git_url`\n- `fetch.url = url`\n- `fetch.openvsx = publisher.ext_name`\n-
  `fetch.vsmarketplace = publisher.ext_name`\n- `fetch.tarball = tarball_url`\n- `fetch.docker
  = owner/name`\n\nOptional config for `nix-prefetch-url`, applies when the fetcher
  equals to `fetch.url`.\n`$ver` is available in string, just like for the fetch config.\n\n-
  `url.name = file_name`\n\nOptional config for `nix-prefetch-git`, applies when the
  fetcher equals to `fetch.github` or `fetch.git`.\n\n- `git.deepClone`\n- `git.fetchSubmodules`\n-
  `git.leaveDotGit`\n\nOptional config for `fetch.docker`/`dockerTools.pullImage`:\n\n-
  `docker.os`\n- `docker.arch`\n- `docker.finalImageName`\n- `docker.finalImageTag`\n-
  `docker.tlsVerify`\n\n#### Extract src\n\nOptional _extract src_ config, files are
  extracted into build directory, and then read by `readFile` in generated nix expr.\n\n-
  `extract = [ \"file_1\", \"file_2\", ...]` - file paths are relative to the source
  root\n\n#### Rust support\n\n`rustPlatform.buildRustPackage` now accepts an attribute
  [`cargoLock`](https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/rust.section.md#importing-a-cargolock-file)
  to vendor dependencies from `Cargo.lock`,\nso we can use this instead of TOFU `cargoSha256`
  for Rust packaging. `nvfetcher` supports automating this process,\nextracting the
  lock file to build and calculating `cargoLock.outputHashes`, as long as you set
  the config.\nThere can be many lock files in one source.\n\n- `cargo_locks = [ \"cargo_lock_path_1\",
  \"cargo_lock_path_2\", ...]` - relative to the source root\n\n#### Passthru\n\n_passthru_
  config, an additional set of attrs to be generated.\n\n- `passthru = { k1 = \"v1\",
  k2 = \"v2\", ... }`\n\nNote: currently the values can only be strings\n\n#### Pinned\n\nIf
  a package is pinned, we call nvchecker to check the new version iff there's no existing
  version.\n\n- `pinned = true`\n\n#### Git commit date\n\nIf the version source of
  a package is `git`, nvfetcher can finds out the commit date of this revision,\nin
  the format of `%Y-%m-%d` by default. You can provide your own [`strftime`](https://strftime.org/)
  format:\n\n- `git.date_format = \"strftime_format\"`\n\n#### Force fetching\n\nAlways
  fetch the package, even if its version (nvchecker output) doesn't change.\nThis
  is useful when the file to be downloaded cannot not be determined by the url.\n\n-
  `fetch.force = true`\n\n> Note: In such case, nvfetcher will not produce a version
  change log, since the version doesn't change at all.\n> Only sha256 in generated
  files will be updated.\n\n### Haskell library\n\nnvfetcher itself is a Haskell library
  as well, whereas the CLI program is just a trivial wrapper of the library.\nYou
  can create a Haskell program depending on it directly, by using the `runNvFetcher`
  entry point.\nIn this case, we can define packages in Haskell language, getting
  rid of TOML constraints.\n\nYou can find an example of using nvfetcher in the library
  way, see [`Main_example.hs`](Main_example.hs).\n\n## Documentation\n\nFor details
  of the library, documentation of released versions is available on [Hackage](https://hackage.haskell.org/package/nvfetcher),\nand
  of master is on our [github pages](https://nvfetcher.berberman.space).\n\n## Contributing\n\nIssues
  and PRs are always welcome. **\\_(:з」∠)\\_**\n\nBuilding from source:\n\n```\n$
  git clone https://github.com/berberman/nvfetcher\n$ nix develop\n$ cabal update\n$
  cabal build\n```\n"
description-type: markdown
hash: 68ee2e254f4c1106d2528de78620d73637efc31c878ea473b68e987ed2d26c5e
homepage: https://github.com/berberman/nvfetcher
latest: 0.7.0.0
license-name: MIT
maintainer: berberman <berberman.yandex.com>
synopsis: Generate nix sources expr for the latest version of packages
test-bench-deps:
  aeson: '>=1.5.6 && <2.3'
  aeson-pretty: '>=0'
  async: '>=0'
  base: '>=4.8 && <5'
  binary: '>=0'
  binary-instances: ^>=1.0
  bytestring: '>=0'
  containers: '>=0'
  data-default: ^>=0.7 || ^>=0.8
  extra: ^>=1.7 || ^>=1.8
  free: '>=5.1 && <5.3'
  hspec: '>=0'
  microlens: '>=0'
  microlens-th: '>=0'
  neat-interpolation: ^>=0.5.1
  nvfetcher: '>=0'
  optparse-simple: ^>=0.1.1
  parsec: '>=0'
  prettyprinter: '>=0'
  regex-tdfa: ^>=1.3
  shake: ^>=0.19
  stm: '>=0'
  text: '>=0'
  toml-reader: ^>=0.2 || ^>=0.3
  transformers: '>=0'
  unliftio: '>=0'
  unordered-containers: '>=0'
