homepage: https://github.com/neovimhaskell/nvim-hs
changelog-type: markdown
hash: 4d186280e81cc20817f1cf0bc7a19f854865422045831debf3eb39d46649aa2f
test-bench-deps:
  foreign-store: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: -any
  unliftio: -any
  stm: -any
  path: -any
  base: '>=4.6 && <5'
  time: -any
  hspec: ==2.*
  text: -any
  megaparsec: -any
  network: -any
  conduit: -any
  data-default: -any
  HUnit: -any
  containers: -any
  unliftio-core: -any
  utf8-string: -any
  hslogger: -any
  messagepack: -any
  typed-process: '>=0.2.1.0'
  nvim-hs: -any
  mtl: -any
  transformers-base: -any
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  QuickCheck: '>=2.6'
  hspec-discover: -any
  resourcet: -any
  path-io: -any
  template-haskell: -any
  vector: -any
  time-locale-compat: -any
  prettyprinter-ansi-terminal: -any
  template-haskell-compat-v0208: -any
maintainer: woozletoff@gmail.com
synopsis: Haskell plugin backend for neovim
changelog: "# 2.2.0.0\n\n* NeovimException are now thrown from (synchronous) remote
  functions and are no\n  longer suppressed with an `error` call that also had a terrible
  error message.\n  A function `catchNeovimException` (specialized `catch`) has been
  added that \n  catches these errors. \n* The return type of asynchronous functions
  is now alwas \n  `STM (Either NeovimException result)` and errors have to be handled
  by the \n  caller explicitly.\n\n# 2.1.0.2\n\n* Exported functions and commands
  now can have the same name.\n\n# 2.1.0.0\n\n* Autocommands now take an additional
  parameter of type `Synchronous`, allowing\n  them to execute synchronous (previously
  hardcoded as `Async`).\n  In order to adapt to this, change ` $(autocmd 'handler)
  opts` to\n  `$(autocmd 'handler) Async opts`.\n\n# 2.0.0.0\n\n* Your configuration
  is now just a Haskell project. The dependency to Dyre has\n  been removed and you
  are now forced to write a line of vimL and add a normal\n  nvim-plugin to your setup.
  The template still does set everything up for you.\n  The distinction between a
  plugin and a personal nvim-hs configuration is now\n  gone and apart from settings
  things up, nothing has changed in this regard.\n  The nvim-plugin contains the necessary
  documentation on what to do and\n  should be available with `:help nvim-hs` when
  installed correctly.\n\n* Since basically all generated functions were throwing
  exceptions anyway, the\n  primed functions have become the default and if you want
  to explicitly handle\n  error cases, you have to surround your code with `catch`
  or something more\n  appropriate from `UnliftIO.Exception`. You have to remove `'`
  from your API\n  calls or you have to adjust your error handling.\n\n* There are
  now three flavors of APIs and you have to import one additionally to\n  importing
  the `Neovim` module:\n\n  - *Neovim.API.Text*: This uses strict `Text` for strings
  and `Vector` as\n    lists. This is the recommended API to use.\n\n  - *Neovim.API.String*:
  This is the same as before. Strings are `String`\n    and lists are `[]`. This is
  for the lazy and backwards-ish compatiblity.\n\n  - *Neovim.API.ByteString*: This
  can be useful for really performance critical\n    stuff or if you`re writing a
  plugin for binary files.\n\n# 1.0.1.0\n\n* The `Neovim.Debug` module is now more
  pleasant to use.\n\n# 1.0.0.2\n\n* With the api of neovim 0.3.0, a function was
  exposed that had a reserved\n  haskell keyword as a parameter name. The code generation
  did not sanitize\n  this. This bugfix releases resolves this.\n\n# 1.0.0.0\n\n*
  Each plugin (type) now defines an environment which is similar to how\n  stateful
  plugins have been declared in previous versions. If you need\n  multiple different
  environments for different functions, you can make them\n  fields of a bigger environment
  or define multiple plugin values.\n\n  The type `Neovim r st a` has become `Neovim
  env a` where `env` is\n  technically equivalent to the previous `r`.\n  I was mainly
  motivated by this blog post:\n\n  https://www.fpcomplete.com/blog/2017/06/readert-design-pattern\n\n*
  Only works with ghc >= 8. I removed some backwards compatibility. If you\n  need
  older ghc versions, just use the previous version (0.2.5) as the\n  feature set
  hasn't really changed.\n\n* A different pretty printer library is now used and may
  surface at some\n  places.\n\n* Functions do now time out after some time, 10 seconds
  for those that block\n  neovim and 10 minutes for background functions.\n\n* A few
  types have been adjusted.\n\n* Some improvement in error reporting.\n\n# 0.2.5\n\n*
  Older versions of `nvim-hs` may not function if some versions of a\n  dependency
  are used. This version has proper bounds for the dependency and\n  should cause
  a compile time failure if an incompatible version of the\n  dependency is used (see
  #61).\n\n# 0.2.0\n\n* Replace error code of remote functions to return\n  `Either
  NeovimException a` instead of a generic messagepack `Object`\n\n* Export API functions
  that throw a `NeovimException` instead of returning\n  `Either NeovimExeception
  a`.\n\n* Replace three element tuple for stateful function declaration (#53)\n\n*
  Add a stack template for easier setup\n\n* Exceptions from pure code are now caught
  (#48)\n\n# 0.1.0\n\n* Adjust parser for output of `nvim --api-info`\n\n* Adjust
  parser of ConfigHelper plugin\n\n# 0.0.7\n\n* Adjust handling of string sent by
  neovim in API generation.\n\n# 0.0.6\n\n* Noteworthy new API functions for the user's
  convenience:\n\n  - `errOnInvalidResult`\n  - `(:+)`\n\n* ansi-wl-pprint is used
  for pretty printing of various things now. Most\n  notably, the error type has been
  changed from `String` to `Doc`.\n  This is a breaking change, but it was kind of
  announced in the issues\n  list. In any case, uses of `err` can be fixed by enabling
  the\n  `OverloadedStrings` extension. Other breakages have to be fixed by hand.\n\n#
  0.0.5\n\n* Documentation received some love.\n\n* A few renames of repurposed internals.\n\n#
  0.0.3\n\n* Debugging facilities for ghci have been added. Check out the\n  `Neovim.Debug`
  module! These few functions are very valuable to debug your\n  code or even the
  code of nvim-hs itself.\n\n* Startup code now has a special `Neovim` environment
  which has access to\n  some of the internals that may or may not be useful. This
  change allowed\n  the ConfigHelper plugin to be included as a normal, separable
  plugin.\n  Unfortunately, this potentially breaks the plugin startup code of some\n
  \ existing plugins.\n\n* Neovim context is no longer a type synonym, but a newtype
  wrapper around\n  the previous type synonym with an added `ResourceT` wrapper. The
  functions\n  from `MonadReader` are now actually exported as those.\n\n  As a consequence,
  some of your code may break if you lack some specific\n  instances which were auto-derived
  before. Send a PR or open a ticket to\n  resolve this.\n\n* Add handling for some
  kind of variadic arguments handling.\n\n  A command or function will be passed `Nothing`
  as it's\n  last arguments if the argument type is wrapped in `Maybe`\n  and the
  invocation on the side of neovim did not pass those\n  arguments.\n\n# 0.0.2\n\n*
  Add handling for special command options\n\n  This breaks code that used `command`
  or `command'` to export\n  functionality. You should replace the options with a
  list\n  of `CommandOptions`.\n\n  An export like `$(command' foo) def { cmdSync
  = Async }` must be redefined\n  to `$(command' foo) [CmdSync Async]`.\n\n# 0.0.1\n\n*
  Usable prototype implementation\n"
basic-deps:
  foreign-store: -any
  void: -any
  cereal: -any
  streaming-commons: -any
  bytestring: -any
  cereal-conduit: '>=0.8.0'
  unliftio: '>=0.2'
  stm: -any
  path: -any
  base: '>=4.9 && <5'
  time: -any
  text: -any
  megaparsec: <10
  network: -any
  conduit: '>=1.3.0'
  data-default: -any
  containers: -any
  unliftio-core: '>=0.2'
  utf8-string: -any
  hslogger: -any
  messagepack: '>=0.5.4'
  typed-process: -any
  mtl: '>=2.2.1 && <2.3'
  transformers-base: -any
  prettyprinter: '>=1.2 && <2'
  transformers: -any
  optparse-applicative: -any
  deepseq: '>=1.1 && <1.5'
  resourcet: '>=1.1.11'
  path-io: -any
  template-haskell: -any
  vector: -any
  time-locale-compat: -any
  prettyprinter-ansi-terminal: -any
  template-haskell-compat-v0208: '>=0.1.9'
all-versions:
- 0.2.5
- 1.0.0.3
- 2.0.0.0
- 2.1.0.7
- 2.2.0.1
- 2.2.0.2
- 2.2.0.3
author: Sebastian Witte
latest: 2.2.0.3
description-type: markdown
description: "# nvim-hs\n\nNeovim API for Haskell plugins as well as a plugin provider.\nThis
  library and executable should provide a basis for developing\nplugins. This package
  should only contain broadly useful interfaces\nto write plugins for Neovim in haskell.
  The design goal is to create\nan easy to use API that avoids most of the boilerplate
  while still retaining\nsome sense of reliability and type safety. Since Template
  Haskell is used\nto generate the neovim bindings and to avoid some of the boilerplate\nhandy
  work, some exotic operating systems and architectures may not work.\n\n[![Build
  Status](https://travis-ci.org/neovimhaskell/nvim-hs.svg?branch=master)](https://travis-ci.org/neovimhaskell/nvim-hs)\n[![Hackage
  version](https://img.shields.io/hackage/v/nvim-hs.svg?style=flat)](https://hackage.haskell.org/package/nvim-hs)\n[![nvim-hs
  on latest Stackage LTS](http://stackage.org/package/nvim-hs/badge/lts)](http://stackage.org/lts/package/nvim-hs)\n[![nvim-hs
  on Stackage Nightly](http://stackage.org/package/nvim-hs/badge/nightly)](http://stackage.org/nightly/package/nvim-hs)\n\n#
  What do I have to expect if I were to use it now?\n\nCheck the issue list here on
  github.\n\n# How do I start using this?\n\nYou need to install `nvim-hs.vim`, a
  plugin that manages starting of `nvim-hs` plugins.\nTo do that, just follow the
  instructions outlined [here](https://github.com/neovimhaskell/nvim-hs.vim).\n\nOnce
  you have installed `nvim-hs.vim`, you can use `nvim-hs` plugins as you would\nnormal
  vim plugins. Note that every plugin you install is started as a separate process,\nwhich
  should be fine unless you have a lot of them.\n\n# Scripting with Haskell\n\nThe
  entry point for all Haskell-based scripts is a plugin.\nAn `nvim-hs` plugin is a
  plain Haskell project with two conventions:\n\n1. You need an executable that starts
  a `msgpack-rpc` compatible client.\n\n2. You need a tiny bit of `vimL` in your runtime
  path that starts the plugin.\n\nThe simplest way to get started is using the stack
  template from this\nrepository/package inside your Neovim configuration folder,
  but you can also\nmanually create a project by doing everything that is explained
  in `:help nvim-hs.txt` \n(which should be available if you installed `nvim-hs.vim`
  as mentioned in the previous section).\n\nTo use that template, you'll first need
  to [install stack](https://docs.haskellstack.org/en/stable/README/)\nand have the
  Neovim executable on the path (the API code generation calls `nvim --api-info` so
  it needs access to `nvim`).\n\nAfter you've done that, you can run these commands
  to setup the template (assuming your Neovim configuration folder\nis in `$XDG_CONFIG_HOME/nvim`):\n\n```\n$
  cd $XDG_CONFIG_HOME/nvim\n$ stack new my-nvim-hs \\\nhttps://raw.githubusercontent.com/neovimhaskell/nvim-hs/master/stack-template.hsfiles
  \\\n--bare --omit-packages --ignore-subdirs\n```\n\nIf you start Neovim now, it
  will compile the example plugins which may take a\nfew minutes. Once it is started
  you can use the predefined functions from the\ntemplate, for example by running
  `:echo NextRandom()`, which should print a random number.\n\nTo start writing your
  own functions and plugins, read through the files\ngenerated by the template and
  also check out the\n[library documentation on hackage](http://hackage.haskell.org/package/nvim-hs).\n\n#
  Contributing\n\nDocumentation, typo fixes, and the like will almost always be merged.\n\nIf
  you want to bring forward new features or convenience libraries\nfor interacting
  with Neovim, you should create an issue first. The features\nof this (cabal) project
  should be kept small as this helps\nreduce the development time. (For some tests
  it is\nnecessary to issue `cabal install`, so any change to to a module can\nsignificantly
  increase the compilation time.)\nIf your idea solves a general problem, feel free
  to open an issue in the\nlibrary project of `nvim-hs`, \n[`nvim-hs-contrib`](https://github.com/neovimhaskell/nvim-hs-contrib).\n\n"
license-name: Apache-2.0
