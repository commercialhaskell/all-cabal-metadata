homepage: https://github.com/kmyk/Jikka#readme
changelog-type: markdown
hash: d3231355d34877256418299631c2a5b1b28438ac6b3f34951c101367ac36caa5
test-bench-deps:
  hlint: -any
  base: '>=4.12 && <5'
  hspec: -any
  text: '>=1.2.3 && <1.3'
  doctest: -any
  array: '>=0.5.3 && <0.6'
  containers: '>=0.6.0 && <0.7'
  ansi-terminal: ==0.11.*
  Jikka: -any
  mtl: '>=2.2.2 && <2.3'
  transformers: '>=0.5.6 && <0.6'
  deepseq: '>=1.4.4 && <1.5'
  ormolu: -any
  template-haskell: '>=2.16.0 && <2.17'
  vector: '>=0.12.3 && <0.13'
  directory: '>=1.3.3 && <1.4'
maintainer: kimiyuk95@gmail.com
synopsis: A transpiler from Python to C++ for competitive programming
changelog: |
  # Changelog for Jikka

  ## 2021-08-24: v5.4.0.0

  - More and more tests are added and some bugs are removed.
  - An online judge is published: <https://judge.kimiyuki.net/>
    - This judge contains example problems which Jikka can/will be able to solve.

  ## 2021-08-16: v5.3.0.0

  Many bugs are removed.

  ## 2021-08-07: v5.2.0.0

  Now we are fixing many bugs to use Jikka during contests!

  Features:

  - Use gcd/lcm semigroups on segment trees ([#163](https://github.com/kmyk/Jikka/pull/163) by [@hotman78](https://github.com/hotman78))
  - Solve simple equations ([#135](https://github.com/kmyk/Jikka/pull/135) by [@hotman78](https://github.com/hotman78))
  - Remove unnecessary parentheses from generated C++ code ([#143](https://github.com/kmyk/Jikka/pull/143) by [@uta8a](https://github.com/uta8a))
  - Use `assert` macros in generated C++ code ([#160](https://github.com/kmyk/Jikka/pull/160) by [@kmyk](https://github.com/kmyk))

  Bug Fix:

  - Fix a bug of unpacking `std::tuple` and assignments ([#165](https://github.com/kmyk/Jikka/pull/165) by [@riantkb](https://github.com/riantkb))
  - Fix calculation of arithmetic expressions ([#138](https://github.com/kmyk/Jikka/pull/138) by [@hotman78](https://github.com/hotman78))
  - Fix reductions about `all` and `any` functions ([#159](https://github.com/kmyk/Jikka/pull/159) by [@kmyk](https://github.com/kmyk))

  Documentation:

  - Add [docs/internal.ja.md](https://github.com/kmyk/Jikka/blob/master/docs/internal.ja.md) ([#122](https://github.com/kmyk/Jikka/pull/122) by [@kmyk](https://github.com/kmyk))
  - Add [a gallery page](https://kmyk.github.io/Jikka/gallery/) ([#129](https://github.com/kmyk/Jikka/pull/129) by [@kmyk](https://github.com/kmyk))
  - Fix some mistakes of documents (by [@hotman78](https://github.com/hotman78) [@rsk0315](https://github.com/rsk0315) [@zer0-star](https://github.com/zer0-star))

  Tests:

  - Add many solutions and test cases of AtCoder Beginner Contest to `examples/` directory ([#145](https://github.com/kmyk/Jikka/pull/145) [#170](https://github.com/kmyk/Jikka/pull/170) by [@uta8a](https://github.com/uta8a))
    - Related to this, [@uta8a](https://github.com/uta8a) has the repository [uta8a/jikka-example](https://github.com/uta8a/jikka-example) which has results of analysis of many problems.

  Refactoring:

  - Add a parser of our core language and allows to write rewrite rules more intuitively ([#133](https://github.com/kmyk/Jikka/pull/133) by [@kmyk](https://github.com/kmyk))

  Misc:

  - Add `scripts/add_test_cases.py` ([#149](https://github.com/kmyk/Jikka/pull/149) by [@kmyk](https://github.com/kmyk))
    - Fix `scripts/add_test_cases.py` ([#166](https://github.com/kmyk/Jikka/pull/166) by [@uta8a](https://github.com/uta8a))
  - Fix `scripts/pre-commit` ([#171](https://github.com/kmyk/Jikka/pull/171) by [@uta8a](https://github.com/uta8a))
    - [@uta8a](https://github.com/uta8a) also finds a bug of the formatter

  ## 2021-08-01: v5.1.0.0

  - Now Kubaru DP is converted to Morau DP.
  - The runtime headers are automatically bundled to generated C++ code.

  ## 2021-07-28: v5.0.11.1

  Uploaded to Hackage: <https://hackage.haskell.org/package/Jikka>

  ## 2021-07-21: v5.0.11.0

  Convex Hull Trick and Segment Trees are implemented.

  Input (`examples/dp_z.py`):

  ```python
  # https://atcoder.jp/contests/dp/tasks/dp_z
  from typing import *

  INF = 10 ** 18

  def solve(n: int, c: int, h: List[int]) -> int:
      assert 2 <= n <= 10 ** 5
      assert 1 <= c <= 10 ** 12
      assert len(h) == n
      assert all(1 <= h_i <= 10 ** 6 for h_i in h)

      dp = [INF for _ in range(n)]
      dp[0] = 0
      for i in range(1, n):
          for j in range(i):
              dp[i] = min(dp[i], dp[j] + (h[j] - h[i]) ** 2 + c)
      return dp[n - 1]

  def main() -> None:
      n, c = map(int, input().split())
      h = list(map(int, input().split()))
      assert len(h) == n
      ans = solve(n, c, h)
      print(ans)

  if __name__ == '__main__':
      main()
  ```

  Output (<https://atcoder.jp/contests/dp/submissions/24563891>):

  ```c++
  #include "jikka/base.hpp"
  #include "jikka/convex_hull_trick.hpp"
  #include <algorithm>
  #include <array>
  #include <cstdint>
  #include <functional>
  #include <iostream>
  #include <numeric>
  #include <string>
  #include <tuple>
  #include <vector>
  int64_t solve(int64_t n_0, int64_t c_1, std::vector<int64_t> h_2) {
    std::vector<int64_t> x3;
    x3.push_back(0);
    jikka::convex_hull_trick x4_10;
    for (int32_t x5 = 0; x5 < n_0 - 1; ++x5) {
      x4_10.add_line(h_2[x5], h_2[x5] * h_2[x5] + x3[x5]);
      x3.push_back(c_1 + h_2[(x5 + 1)] * h_2[(x5 + 1)] +
                   x4_10.get_min(h_2[(x5 + 1)] * -2));
    }
    return x3[(n_0 - 1)];
  }
  int main() {
    int64_t n_12 = -1;
    int64_t c_13 = -1;
    std::cin >> n_12;
    std::vector<int64_t> h_14(n_12, -1);
    std::cin >> c_13;
    for (int32_t i15 = 0; i15 < n_12; ++i15) {
      std::cin >> h_14[i15];
    }
    auto ans_16 = solve(n_12, c_13, h_14);
    std::cout << ans_16 << ' ';
    std::cout << '\n' << ' ';
  }
  ```

  Input (`examples/dp_q.py`):

  ```python
  # https://atcoder.jp/contests/dp/tasks/dp_q
  from typing import *

  def solve(n: int, h: List[int], a: List[int]) -> int:
      assert 1 <= n <= 2 * 10 ** 5
      assert len(h) == n
      assert all(1 <= h_i <= n for h_i in h)
      assert len(a) == n
      assert all(1 <= a_i <= 10 ** 9 for a_i in a)

      dp = [0 for _ in range(n)]
      for i in range(n):
          b = 0
          for j in range(h[i]):
              b = max(b, dp[j])
          dp[h[i] - 1] = b + a[i]
      return max(dp)

  def main() -> None:
      n = int(input())
      h = list(map(int, input().split()))
      assert len(h) == n
      a = list(map(int, input().split()))
      assert len(a) == n
      ans = solve(n, h, a)
      print(ans)

  if __name__ == '__main__':
      main()
  ```

  Output (<https://atcoder.jp/contests/dp/submissions/24561829>):

  ```c++
  #include "jikka/base.hpp"
  #include "jikka/segment_tree.hpp"
  #include <algorithm>
  #include <array>
  #include <atcoder/segtree>
  #include <cstdint>
  #include <functional>
  #include <iostream>
  #include <numeric>
  #include <string>
  #include <tuple>
  #include <vector>
  int64_t solve(int64_t n_0, std::vector<int64_t> h_1, std::vector<int64_t> a_2) {
    std::vector<int64_t> x4(n_0, 0);
    atcoder::segtree<int64_t, jikka::max_int64_t, jikka::const_int64_min> x5_13(
        x4);
    for (int32_t x6 = 0; x6 < n_0; ++x6) {
      x4[(h_1[x6] - 1)] = std::max<int64_t>(0, x5_13.prod(0, h_1[x6])) + a_2[x6];
      x5_13.set(h_1[x6] - 1, x4[(h_1[x6] - 1)]);
    }
    int64_t x11 = *std::max_element(x4.begin(), x4.end());
    return x11;
  }
  int main() {
    int64_t n_14 = -1;
    std::cin >> n_14;
    std::vector<int64_t> h_15(n_14, -1);
    std::vector<int64_t> a_16(n_14, -1);
    for (int32_t i17 = 0; i17 < n_14; ++i17) {
      std::cin >> h_15[i17];
    }
    for (int32_t i18 = 0; i18 < n_14; ++i18) {
      std::cin >> a_16[i18];
    }
    auto ans_19 = solve(n_14, h_15, a_16);
    std::cout << ans_19 << ' ';
    std::cout << '\n' << ' ';
  }
  ```

  ## 2021-07-21: v5.0.10.0

  - The generated C++ code is optimized.
  - `list.append` is added in the restricted Python.

  ## 2021-07-14: v5.0.9.0

  - The generated C++ code becomes more natural.
  - The restricted Python allows to write `main` function and uses it to analyze input/output format.

  Input:

  ```python
  # https://atcoder.jp/contests/dp/tasks/dp_a
  from typing import *

  def solve(n: int, h: List[int]) -> int:
      assert 2 <= n <= 10 ** 5
      assert len(h) == n
      assert all(1 <= h_i <= 10 ** 4 for h_i in h)

      dp = [-1 for _ in range(n)]
      dp[0] = 0
      dp[1] = abs(h[1] - h[0])
      for i in range(2, n):
          dp[i] = min(dp[i - 1] + abs(h[i] - h[i - 1]), dp[i - 2] + abs(h[i] - h[i - 2]))
      return dp[n - 1]

  def main() -> None:
      n = int(input())
      h = list(map(int, input().split()))
      assert len(h) == n
      ans = solve(n, h)
      print(ans)

  if __name__ == '__main__':
      main()
  ```

  Output (<https://atcoder.jp/contests/dp/submissions/24221651>):

  ```c++
  #include "jikka/all.hpp"
  #include <algorithm>
  #include <cstdint>
  #include <functional>
  #include <iostream>
  #include <numeric>
  #include <string>
  #include <tuple>
  #include <vector>
  int64_t solve(int64_t n_0, std::vector<int64_t> h_1) {
    int64_t x6;
    if (n_0 + -1 == 0) {
      x6 = 0;
    } else {
      std::vector<std::array<int64_t, 2>> x2 =
          std::vector<std::array<int64_t, 2>>(n_0 + -2 + 1);
      x2[0] = jikka::make_array<int64_t>(
          0, std::max<int64_t>(-h_1[0] + h_1[1], h_1[0] + -h_1[1]));
      for (int32_t i3 = 0; i3 < int32_t(n_0 + -2); ++i3) {
        x2[(i3 + 1)] = jikka::make_array<int64_t>(
            x2[i3][1],
            std::min<int64_t>(
                x2[i3][1] + std::max<int64_t>(-h_1[(i3 + 1)] + h_1[(i3 + 2)],
                                              h_1[(i3 + 1)] + -h_1[(i3 + 2)]),
                x2[i3][0] + std::max<int64_t>(-h_1[i3] + h_1[(i3 + 2)],
                                              h_1[i3] + -h_1[(i3 + 2)])));
      }
      x6 = x2[(n_0 + -2)][1];
    }
    return x6;
  }
  int main() {
    int64_t n_7 = -1;
    std::cin >> n_7;
    std::vector<int64_t> h_8 = std::vector<int64_t>(n_7, -1);
    for (int32_t i9 = 0; i9 < n_7; ++i9) {
      std::cin >> h_8[i9];
    }
    auto ans_10 = solve(n_7, h_8);
    std::cout << ans_10 << ' ';
    std::cout << '\n' << ' ';
  }
  ```

  ## 2021-07-11: v5.0.8.0

  Some optimizers are added.
  Now it can use cumulative sums.

  Input:

  ```python
  # https://judge.yosupo.jp/problem/static_range_sum

  from typing import *

  def solve(n: int, q: int, a: List[int], l: List[int], r: List[int]) -> List[int]:
      ans = [-1 for _ in range(q)]
      for i in range(q):
          ans[i] = sum(a[l[i]:r[i]])
      return ans
  ```

  Output (<https://judge.yosupo.jp/submission/52832>):

  ```c++
  std::vector<int64_t> solve(int64_t n_1653, int64_t q_1654,
                             std::vector<int64_t> a_1655,
                             std::vector<int64_t> l_1656,
                             std::vector<int64_t> r_1657) {
    std::vector<int64_t> x1658 = jikka::scanl<int64_t, int64_t>(
        [=](int64_t b1659) -> std::function<int64_t(int64_t)> {
          return [=](int64_t b1660) -> int64_t { return b1659 + b1660; };
        },
        0, a_1655);
    return jikka::fmap<int64_t, int64_t>(
        [=](int64_t b1661) -> int64_t {
          return x1658[(r_1657[b1661] + (-l_1656[b1661] + l_1656[b1661]))] +
                 -x1658[l_1656[b1661]];
        },
        jikka::range1(q_1654));
  }
  ```

  ## 2021-07-09: v5.0.7.0

  Many internal cleanups are done.

  Now our core language is very close to GHC' Core.
  It's curried and has a system for rewrite-rules.

  ## 2021-06-29: v5.0.6.0

  Error reporting and error recovery are improved.

  Input:

  ```python
  def solve(n: int) -> bool:
      a = n + True  # err
      b = 2 * n
      return b  # err
  ```

  Output:

  ```console
  Type Error (line 2 column 13) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type int and type bool: type int is not type bool
  1 |def solve(n: int) -> bool:
  2 |    a = n + True  # err
                 ^^^^
  3 |    b = 2 * n

  Type Error (line 4 column 12) (user's mistake?): Jikka.RestrictedPython.Convert.TypeInfer: failed to solve type equations: failed to unify type bool and type int: type bool is not type int
  3 |    b = 2 * n
  4 |    return b  # err
                ^
  ```

  contributions:

  - @Koki-Yamaguchi fixed build on macOS ([#28](https://github.com/kmyk/Jikka/pull/28))

  ## 2021-06-25: v5.0.5.0

  Some optimizations are implemented.
  Now it can convert a O(N) Python code for fibonacci to O(log N) C++ code.

  Input, O(N):

  ```python
  def f(n: int) -> int:
      a = 0
      b = 1
      for _ in range(n):
          c = a + b
          a = b
          b = c
      return a

  def solve(n: int) -> int:
      return f(n) % 1000000007
  ```

  Output, O(log N):

  ```c++
  #include "jikka/all.hpp"
  #include <algorithm>
  #include <cstdint>
  #include <functional>
  #include <iostream>
  #include <numeric>
  #include <string>
  #include <tuple>
  #include <vector>
  int64_t solve(int64_t n_317) {
    return jikka::modmatap<2, 2>(
        jikka::modmatpow<2>(jikka::make_array<std::array<int64_t, 2>>(
                                jikka::make_array<int64_t>(1, 1),
                                jikka::make_array<int64_t>(1, 0)),
                            n_317, 1000000007),
        jikka::make_array<int64_t>(1, 0), 1000000007)[1];
  }
  int main() {
    int64_t x318;
    std::cin >> x318;
    int64_t x319 = solve(x318);
    std::cout << x319;
    std::cout << '\n';
  }
  ```

  ## 2021-06-23: v5.0.4.0

  Now executable C++ code is generated.

  ## 2021-06-23: v5.0.3.0

  Now the conversion from restricted Python to core works.

  ## 2021-06-19: v5.0.2.0

  Most conversions in restricted Python are implemented.

  ## 2020-12-03: v5.0.1.0

  `v5.0.1.0` is the first version of the third prototype.
  This version is a more realistic one, which reads a very restricted subset of Python.

  ## 2020-04-30: v4.0.1.0

  `v4.0.1.0` aims to the same thing to `v3.x`, but it's restarted with Haskell.
  However, this version didn't reach the usable version.

  ## 2019-07-24: v3.1.0

  `v3.1.0` is the first version which seems to be somewhat usable in practice.

  Input O(N^2):

  ```sml
  let given N : [2, 200001) in
  let given A : N -> 200001 in

  let f (i : N) = max N (fun j -> if j = i then 0 else A j) in
  f
  ```

  Output O(N):

  The generated function (+ main function written by hands) gets AC: <https://atcoder.jp/contests/abc134/submissions/6526623>

  ```c++
  vector<int64_t> solve(int64_t N, const vector<int64_t> & A) {
      vector<int64_t> t1(N + 1);
      t1[0] = INT64_MIN;
      for (int i1 = 0; i1 < N + 1 - 1; ++ i1) {
          t1[i1 + 1] = ((0 <= i1) ? max<int64_t>(t1[i1], A[i1]) : INT64_MIN);
      }
      auto & g1 = t1;
      vector<int64_t> t2(N + 1);
      t2[0] = INT64_MIN;
      for (int i2 = 0; i2 < N + 1 - 1; ++ i2) {
          t2[i2 + 1] = ((((N - i2) - 1) < N) ? max<int64_t>(t2[i2], A[((N - i2) - 1)]) : INT64_MIN);
      }
      auto & g2 = t2;
      vector<int64_t> t3(N);
      for (int i3 = 0; i3 < N; ++ i3) {
          t3[i3] = max<int64_t>(max<int64_t>(max<int64_t>(INT64_MIN, g1[i3]), g2[(((N - (i3 + 1)) - 1) + 1)]), 0);
      }
      auto & f = t3;
      return f;
  }
  ```

  ## 2019-07-19: v3.0.0

  `v3.0.0` writes C++ function.

  Input O(k n):

  ```sml
  # vim: set filetype=sml:
  # Jikka v3

  let K = 100000 in
  let given N : Nat in
  let given A : Nat -> Nat in

  sum K (fun i -> max N (fun j -> i + 2 * A j))
  ```

  Output O(k + n):

  ```c++
  int64_t solve(int64_t N, const vector<int64_t> & A) {
      int64_t K = 100000;
      int64_t a2 = 0;
      for (int64_t i2 = 0; i2 < K; ++ i2) {
          a2 += i2;
      }
      int64_t a1 = INT64_MIN;
      for (int64_t i1 = 0; i1 < N; ++ i1) {
          a1 = max(a1, 2 * A[i1]);
      }
      return a2 + K * a1;
  }
  ```

  ## 2019-07-10: v2

  > 競技プログラミングの問題の形式的な表現を受けとり、それに対する解法を出力するプログラムです。

  `v2` is the second prototype.
  This version reads a mathematical expression written in ML-like language, and only writes a internal AST.

  Input:

  ```ml
  # Jikka v2
  # https://atcoder.jp/contests/code-festival-2015-final-open/tasks/codefestival_2015_final_d

  K = 100000
  input N : Nat
  input S : N -> Nat
  K1 = K + 1
  input T : N -> K1
  assume forall i. i < N implies S i < T i

  f : N -> K1 -> Nat
  f i t = count N (\ j. j < N and j /= i and S j <= t and t < T j)

  output min N \ i. max K1 \ t. f i t
  ```

  ```console

  $ dotnet run

  {compiletime =
    [(Ident "K1",
      AppBExp
        (AppBExp
           (FreeVarBExp (Ident "+",FunBTy (IntBTy,FunBTy (IntBTy,IntBTy))),
            FreeVarBExp (Ident "K",IntBTy)),IntBExp 1), BaseBScm IntBTy);
     (Ident "K", IntBExp 100000, BaseBScm IntBTy)];
   input =
    [(Ident "T", FunBTy (VarBTy (Ident "N"),VarBTy (Ident "K1")));
     (Ident "S", FunBTy (VarBTy (Ident "N"),VarBTy (Ident "Nat")));
     (Ident "N", VarBTy (Ident "Nat"))];
   runtime =
    [...];
   assumptions =
    [...];
   output =
    (AppBExp
       (AppBExp
          (FreeVarBExp
             (Ident "min",FunBTy (IntBTy,FunBTy (FunBTy (IntBTy,IntBTy),IntBTy))),
           FreeVarBExp (Ident "N",IntBTy)),
        LamBExp
          (IntBTy,
           AppBExp
             (AppBExp
                (FreeVarBExp
                   (Ident "max",
                    FunBTy (IntBTy,FunBTy (FunBTy (IntBTy,IntBTy),IntBTy))),
                 FreeVarBExp (Ident "K1",IntBTy)),
              LamBExp
                (IntBTy,
                 AppBExp
                   (AppBExp
                      (FreeVarBExp
                         (Ident "f",FunBTy (IntBTy,FunBTy (IntBTy,IntBTy))),
                       VarBExp 1),VarBExp 0))))), IntBTy);}
  ```

  ## 2019-07-02: v1

  > 数式を入力すると C++ での実装を出力してくれるすごいやつ

  `v1` is the first prototype.
  This version reads a mathematical expression written in TeX-like notation, and writes a C++ function.
  It is implemented with F#.

  Input:

  ```
  \sum _ {i < N} A_i
  ```

  Output:

  ```c++
  int64_t solve(const vector<int64_t> & A, int64_t N) {
      int64_t t0 = 0;
      for (int64_t i = 0; i < N; ++ i) {
          t0 += A[i];
      }
      return t0;
  }
  ```
basic-deps:
  base: '>=4.12 && <5'
  text: '>=1.2.3 && <1.3'
  array: '>=0.5.3 && <0.6'
  containers: '>=0.6.0 && <0.7'
  ansi-terminal: ==0.11.*
  Jikka: -any
  mtl: '>=2.2.2 && <2.3'
  transformers: '>=0.5.6 && <0.6'
  deepseq: '>=1.4.4 && <1.5'
  template-haskell: '>=2.16.0 && <2.17'
  vector: '>=0.12.3 && <0.13'
  directory: '>=1.3.3 && <1.4'
all-versions:
- 5.0.11.1
- 5.0.11.2
- 5.1.0.0
- 5.2.0.0
- 5.3.0.0
- 5.4.0.0
author: Kimiyuki Onaka
latest: 5.4.0.0
description-type: markdown
description: |
  # Jikka

  [![test](https://github.com/kmyk/Jikka/actions/workflows/test.yml/badge.svg)](https://github.com/kmyk/Jikka/actions/workflows/test.yml)

  Jikka is an automated solver for problems of competitive programming.

  In competitive programming, there are some problems which are solvable only with "repeating formula transformations", "pasting snippets of famous data structures", etc.
  Jikka automatically solves such problems.
  Jikka takes such problems as input in the form of a program of a very restricted subset of Python, optimizes the code to reduce the computational complexity, and outputs as an implementation in C++.
  /
  競技プログラミングにおいて「ただ式変形をするだけで解ける」「ただデータ構造のライブラリを貼るだけで解ける」問題は実は少なくありません。
  Jikka はそのような問題を自動で解きます。
  そのような問題をとても制限された Python のサブセット言語のコードの形で入力として受け取り、計算量を落とすような最適化を行い、C++ の実装に変換して出力します。

  ## Usage

  ```console
  $ jikka convert PYTHON_FILE
  ```

  ## How to Install

  ### Using prebuilt binaries (recommended)

  Go [Releases page](https://github.com/kmyk/Jikka/releases) and download `jikka-vA.B.C.D-Linux`, `jikka-vA.B.C.D-maxOS` or `jikka-vA.B.C.D-Windows.exe`.

  ### Using Stack

  [Stack](https://www.haskellstack.org/) is required. If you are using Ubuntu, you can install Stack with `$ sudo apt install haskell-stack`.

  ```console
  $ git clone https://github.com/kmyk/Jikka.git
  $ cd Jikka
  $ stack install
  ```

  ### Using Cabal

  [Cabal](https://www.haskell.org/cabal/) is required. This is bundled [Haskell Platform](https://www.haskell.org/platform/). If you are using Ubuntu, you can install Stack with `$ sudo apt install haskell-platform`.

  ```console
  $ cabal update
  $ cabal install Jikka
  ```

  ## Discussions

  Please feel free to use our [GitHub Discussions](https://github.com/kmyk/Jikka/discussions). / [GitHub Discussions](https://github.com/kmyk/Jikka/discussions) があるので気軽に使ってください。

  ## Documents

  For users:

  - [docs/language.md](https://github.com/kmyk/Jikka/blob/master/docs/language.md)
    - [docs/language.ja.md](https://github.com/kmyk/Jikka/blob/master/docs/language.ja.md) (Japanese translation)
    - The language specification of our restricted Python / Jikka で使われる制限された Python の言語仕様
  - [docs/optimization.md](https://github.com/kmyk/Jikka/blob/master/docs/optimization.md)
    - [docs/optimization.ja.md](https://github.com/kmyk/Jikka/blob/master/docs/optimization.ja.md) (Japanese translation)
    - A list of optimizations which Jikka does / Jikka が行なってくれる最適化の一覧
  - [examples/](https://github.com/kmyk/Jikka/blob/master/examples)
    - [gallery](https://kmyk.github.io/Jikka/gallery)
  - [CHANGELOG.md](https://github.com/kmyk/Jikka/blob/master/CHANGELOG.md)

  For developpers:

  - [CONTRIBUTING.md](https://github.com/kmyk/Jikka/blob/master/CONTRIBUTING.md)
    - [CONTRIBUTING.ja.md](https://github.com/kmyk/Jikka/blob/master/CONTRIBUTING.ja.md) (Japanese translation)
  - My blog article [競技プログラミングの問題を自動で解きたい - うさぎ小屋](https://kimiyuki.net/blog/2020/12/09/automated-solvers-of-competitive-programming/) (Japanese)
    - 競技プログラミングの問題を自動で解くとはどういうことなのかについて
  - [docs/how-it-works.pdf](https://github.com/kmyk/Jikka/blob/master/docs/how-it-works.pdf) (Japanese)
    - 動作原理や関連する理論について
  - [docs/DESIGN.md](https://github.com/kmyk/Jikka/blob/master/docs/DESIGN.md) (Japanese)
    - 実装方針について
  - [docs/internal.ja.md](https://github.com/kmyk/Jikka/blob/master/docs/internal.ja.md) (Japanese)
    - 具体的な処理の流れについて
  - [docs/core.md](https://github.com/kmyk/Jikka/blob/master/docs/core.md)
    - [docs/core.ja.md](https://github.com/kmyk/Jikka/blob/master/docs/core.ja.md) (Japanese)
    - core 言語の説明
  - [Haddock](https://hackage.haskell.org/package/Jikka)
    - [Haddock (master)](https://kmyk.github.io/Jikka/haddock)

  ## Examples

  ### `examples/fib.py` (`v5.0.5.0`)

  Input, O(N):

  ```python
  def f(n: int) -> int:
      a = 0
      b = 1
      for _ in range(n):
          c = a + b
          a = b
          b = c
      return a

  def solve(n: int) -> int:
      return f(n) % 1000000007
  ```

  Output, O(log N):

  ```c++
  #include "jikka/all.hpp"
  #include <algorithm>
  #include <cstdint>
  #include <functional>
  #include <iostream>
  #include <numeric>
  #include <string>
  #include <tuple>
  #include <vector>
  int64_t solve(int64_t n_317) {
    return jikka::modmatap<2, 2>(
        jikka::modmatpow<2>(jikka::make_array<std::array<int64_t, 2>>(
                                jikka::make_array<int64_t>(1, 1),
                                jikka::make_array<int64_t>(1, 0)),
                            n_317, 1000000007),
        jikka::make_array<int64_t>(1, 0), 1000000007)[1];
  }
  int main() {
    int64_t x318;
    std::cin >> x318;
    int64_t x319 = solve(x318);
    std::cout << x319;
    std::cout << '\n';
  }
  ```

  ### `examples/static_range_sum.py` (`v5.0.10.0`)

  Input, O(N^2):

  ```python
  # https://judge.yosupo.jp/problem/static_range_sum

  from typing import *

  def solve(n: int, q: int, a: List[int], l: List[int], r: List[int]) -> List[int]:
      ans = [-1 for _ in range(q)]
      for i in range(q):
          ans[i] = sum(a[l[i]:r[i]])
      return ans

  def main() -> None:
      n, q = map(int, input().split())
      a = list(map(int, input().split()))
      assert len(a) == n
      l = list(range(q))
      r = list(range(q))
      for i in range(q):
          l[i], r[i] = map(int, input().split())
      ans = solve(n, q, a, l, r)
      for i in range(q):
          print(ans[i])

  if __name__ == '__main__':
      main()
  ```

  Output, O(N):

  ```c++
  #include <algorithm>
  #include <cstdint>
  #include <functional>
  #include <iostream>
  #include <numeric>
  #include <string>
  #include <tuple>
  #include <vector>
  std::vector<int64_t> solve(int64_t n_0, int64_t q_1, std::vector<int64_t> a_2,
                             std::vector<int64_t> l_3, std::vector<int64_t> r_4) {
    std::vector<int64_t> x6 = std::vector<int64_t>(a_2.size() + 1);
    x6[0] = 0;
    for (int32_t i7 = 0; i7 < int32_t(a_2.size()); ++i7) {
      x6[(i7 + 1)] = x6[i7] + a_2[i7];
    }
    std::vector<int64_t> x5 = x6;
    std::vector<int64_t> x10 = std::vector<int64_t>(q_1);
    for (int32_t i11 = 0; i11 < int32_t(q_1); ++i11) {
      x10[i11] = -x5[l_3[i11]] + x5[r_4[i11]];
    }
    return x10;
  }
  int main() {
    int64_t n_13 = -1;
    int64_t q_14 = -1;
    std::cin >> n_13;
    std::vector<int64_t> a_15 = std::vector<int64_t>(n_13, -1);
    std::cin >> q_14;
    std::vector<int64_t> l_16 = std::vector<int64_t>(q_14, -1);
    std::vector<int64_t> r_17 = std::vector<int64_t>(q_14, -1);
    for (int32_t i18 = 0; i18 < n_13; ++i18) {
      std::cin >> a_15[i18];
    }
    for (int32_t i_19 = 0; i_19 < q_14; ++i_19) {
      std::cin >> l_16[i_19];
      std::cin >> r_17[i_19];
    }
    for (int32_t i_20 = 0; i_20 < q_14; ++i_20) {
    }
    auto ans_21 = solve(n_13, q_14, a_15, l_16, r_17);
    for (int32_t i_22 = 0; i_22 < q_14; ++i_22) {
    }
    for (int32_t i_23 = 0; i_23 < q_14; ++i_23) {
      std::cout << ans_21[i_23] << ' ';
      std::cout << '\n' << ' ';
    }
  }
  ```

  ## License

  Appache License 2.0
license-name: LicenseRef-Apache
