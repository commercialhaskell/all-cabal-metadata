all-versions:
- 0.18.0
- 0.20.0
- 1.0.0
- 1.1.0
- 1.3.0
- 1.4.0
- 1.4.1
- 1.5.0
author: digitally induced GmbH
basic-deps:
  base: '>=4.17.0 && <4.22'
  blaze-html: '>=0'
  blaze-markup: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  ihp-hsx: '>=0'
  megaparsec: '>=0'
  string-conversions: '>=0'
  template-haskell: '>=2.19.0 && <2.24'
  text: '>=0'
  unordered-containers: '>=0'
changelog: |-
  # Changelog for `ihp-hsx`

  ## Version 1.5.0

  - Suport for GHC 9.10.x and 9.12.x
  - Add backend for lucid2 via dedidcated ihp-hsx-lucid2 library
  - Add missing attributes muted, onkeypress

  ## Versions < 0.18:

  [See the IHP main upgrade instructions](https://github.com/digitallyinduced/ihp/blob/master/UPGRADE.md)
changelog-type: markdown
description: "# HSX\n\nThis `ihp-hsx` package provides `[hsx|<h1>Hello World</h1>|]`
  syntax to IHP projects.\n\nTo use it outside of IHP, add this package to your cabal
  file and use the modules like this:\n\n```haskell\nimport IHP.HSX.QQ -- <- The main
  thing\nimport IHP.HSX.ConvertibleStrings () -- <- Helper instancess\nimport IHP.HSX.ToHtml
  () -- <- More helper instances\n\nimport Text.Blaze.Html5 -- The blaze html library,
  IHP HSX is built on top of that\n\nview :: Html\nview = [hsx|\n    <h1>Hello World</h1>\n|]\n\n--
  To render the above view:\nimport Text.Blaze.Html.Renderer.Text (renderHtml)\n\nrendered
  :: Text\nrendered = renderHtml view\n```\n\n## Introduction\n\nHSX can be written
  pretty much like normal HTML. You can write an HSX expression inside your Haskell
  code by wrapping it with [`[hsx|YOUR HSX CODE|]`](https://ihp.digitallyinduced.com/api-docs/IHP-ViewPrelude.html#v:hsx).
  HSX expressions are just a syntax for [BlazeHtml](https://jaspervdj.be/blaze/) and
  thus are automatically escaped as described in the blaze documentation.\n\nBecause
  the HSX is parsed, you will get a syntax error when you type in invalid HTML.\n\n###
  Inline Haskell\n\nHSX can access Haskell variables wrapped with `{}` like this:\n\n```haskell\nlet\n
  \   x :: Text = \"World\"\nin\n    [hsx|Hello {x}!|]\n```\n\n**If the variable is
  another HSX expression, a blaze HTML element, a text or string**: it is just included
  as you would expect.\n\n**If the variable is any other custom Haskell data structure**:
  it will first be converted to a string representation by calling [`show`](https://ihp.digitallyinduced.com/api-docs/IHP-Prelude.html#v:show)
  on it. You can add a custom [`ToHtml`](https://ihp.digitallyinduced.com/api-docs/IHP-HSX-ToHtml.html#t:ToHtml)
  (import it from `IHP.HSX.ToHtml`) instance, to customize rendering a data structure.\n\nYou
  can also write more complex code like:\n\n```haskell\nlet\n    items :: [Int] =
  [ 0, 1, 2 ]\n    renderItem n = [hsx|Hello {n}!|]\nin\n    [hsx|Complex demo: {forEach
  items renderItem}!|]\n```\n\nAs the HSX expressions are compiled to Haskell code
  at compile-time, type errors inside these `{}` expressions will be reported to you
  by the compiler.\n\n### Dynamic Attributes\n\nThe variable syntax can also be used
  in attribute values:\n\n```haskell\nlet\n    inputValue = \"Hello World\" :: Text\nin\n
  \   [hsx|<input type=\"text\" value={inputValue}/>|]\n```\n\n#### Boolean Attribute
  Values\n\nHSX has special handling for Boolean values to make it easy to deal with
  HTML Boolean attributes like `disabled`, `readonly`, `checked`, etc.\n\nYou can
  write\n\n```haskell\n<input disabled={True} />\n```\n\nas a short form for:\n\n```haskell\n<input
  disabled=\"disabled\" />\n```\n\nWriting `False`:\n\n```haskell\n<input disabled={False}
  />\n```\n\nThis will not render the attribute, [as specified in the HTML standard](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes):\n\n```haskell\n<input
  />\n```\n\n#### Boolean data attributes\n\nThis behavior of omiting a attribute
  when it's set to `False` does not apply to `data-` attributes.\n\nYou can write\n\n```haskell\n<form
  data-disable-javascript-submission={True}/>\n```\n\nand it will render like this:\n\n```html\n<form
  data-disable-javascript-submission=\"true\"/>\n```\n\nWhen set to `False`, like
  this:\n\n```haskell\n<form data-disable-javascript-submission={False}/>\n```\n\nthe
  output HTML will keep the attribute and set it to `\"false\"`:\n\n```html\n<form
  data-disable-javascript-submission=\"false\"/>\n```\n\n#### Maybe Attribute Values
  / Optional Attributes\n\nHSX has special handling for Maybe values to make it easy
  to deal with optional attributes.\n\nYou can write\n\n```haskell\nlet\n    target
  :: Maybe Text\n    target = Just \"_blank\"\nin\n    [hsx|<a target={target} />|]\n```\n\nand
  it will render to:\n\n```haskell\n<a target=\"_blank\" />\n```\n\nUsing `Nothing`
  results in the `target` attribute not being in the output HTML:\n\n```haskell\nlet\n
  \   target :: Maybe Text\n    target = Nothing\nin\n    [hsx|<a target={target}
  />|]\n```\n\nThis will render to:\n\n```haskell\n<a />\n```\n\n### Spread Values\n\nFor
  dynamic use cases you can use `{...attributeList}`:\n\n```haskell\n<div { ...[ (\"data-my-attribute\"
  :: Text, \"Hello World!\" :: Text) ] } />\n<div { ...[ (\"data-user-\" <> tshow
  userId, tshow userFirstname) ] } />\n<div { ...someVariable } />\n```\n\nNote the
  `<>` concatenation operator.\n\n### Special Elements: `<script>` and `<style>`\n\nFor
  `<script>` and `<style>` tags HSX applies some special handling. This only applies
  to tags with inline scripts or styles:\n\n```html\n<!-- No Special Handling: -->\n\n<script
  src=\"/hello.js\"></script>\n<link rel=\"stylesheet\" href=\"layout.css\" />\n\n<!--
  Special Handling applies: -->\n\n<script>\n    alert(\"Hello\");\n</script>\n<style>\n
  \   h1 {\n        color: blue;\n    }\n</style>\n```\n\nInside those tags using
  a Haskell expression will not work:\n\n```haskell\n<script>{myHaskellExpr}</script>\n```\n\nThis
  will just literally output the string `{myHaskellExpr}` without evaluating the Haskell
  expression itself. This is because JavaScript usually uses `{}` for object expressions
  like `{ a: \"hello\" }`. The same applies to inline CSS inside `<style>` elements.\n\nSo
  using `{haskellVariables}` inside your JavaScript like this will not work:\n\n```html\n<script>\n
  \   var apiKey = \"{apiKey}\";\n</script>\n```\n\nInstead use a `data-` attribute
  to solve this:\n\n```html\n<script data-api-key={apiKey}>\n    var apiKey = document.currentScript.dataset.apiKey;\n</script>\n```\n\nAdditionally,
  HSX will not do the usual escaping for style and script bodies, as this will make
  e.g. the\nJavaScript unusable.\n\n### Syntax Rules\n\nWhile most HTML is also valid
  HSX, there are some differences you need to be aware of:\n\n#### Closing Tags\n\nTags
  always need to have a closing tag or be self-closing: so instead of `<br>` you need
  to write `<br/>`.\n\n#### JSX Differences\n\nIn JSX you have the restriction that
  you always have to have a single root tag. In HSX this restriction does not apply,
  so this is valid HSX (but not valid JSX):\n\n```haskell\n[hsx|\n<div>A</div>\n<div>B</div>\n|]\n```\n\n####
  Whitespace\n\nSpaces and newline characters are removed where possible at HSX parse
  time.\n\n#### Comments\n\nHTML Comments are supported and can be used like this:\n\n```html\n<div>\n
  \   <!-- Begin of Main Section -->\n    <h1>Hello</h1>\n</div>\n```\n\n#### Empty
  Attributes\n\nHSX allows you to write empty attributes like these:\n\n```haskell\n[hsx|\n
  \   <input disabled/>\n|]\n```\n\nThe underlying HTML library blaze currently does
  not support an empty HTML attribute. Therefore empty attributes are implemented
  by setting the attribute value to the attribute name. [This is valid HTML supported
  by all browsers.](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes).
  Therefore the generated HTML looks like this:\n\n```html\n<input disabled=\"disabled\"
  />\n```\n\n#### Unescaped Strings\n\nIf you use HTML entities, such as `&nbsp;`
  for a non-breaking space, you will notice they appear exactly like that. To output
  directly (i.e. unescaped) use the method `preEscapedToMarkup` from `Text.Blaze.Html5`.\n\n###
  Custom HSX and Unchecked HSX\n\nHSX provides two additional QuasiQuoters beyond
  the standard `[hsx|...|]` for increased flexibility: `uncheckedHsx` and `customHsx`.\n\n####
  Using `uncheckedHsx`\n\n`uncheckedHsx` provides a quick way to bypass HSX's strict
  tag and attribute name checking. \n\nIt will still check for a valid HTML structure,
  but it will accept any tag and attribute names.\n\n\n```haskell\n[uncheckedHsx|\n
  \   <anytagname custom-attribute=\"value\">\n        Content\n    </anytagname>\n|]\n```\n\nWhile
  convenient for rapid development, use it with caution as you lose the benefits of
  compile-time guarantees for your markup.\n\n#### Using `customHsx`\n\n`customHsx`
  allows you to extend the default HSX with additional whitelisted tag names and attribute
  names while maintaining the same strict compile-time checking of the default `hsx`.
  \n\nThis makes it easier to use custom elements that often also contain special
  attributes, and javascript libraries, for example `_hyperscript`, that use the `_`
  as an attribute name.\n\n\nTo use `customHsx`, you need to create it in a separate
  module due to Template Haskell restrictions. Here's how to set it up:\n\n1. First,
  create a new module for your custom HSX (e.g., `Application.Helper.CustomHsx`):\n\n```haskell\nmodule
  Application.Helper.CustomHsx where\n\nimport IHP.Prelude\nimport IHP.HSX.QQ (customHsx)\nimport
  IHP.HSX.Parser\nimport Language.Haskell.TH.Quote\nimport qualified Data.Set as Set\n\nmyHsx
  :: QuasiQuoter\nmyHsx = customHsx \n    (HsxSettings \n        { checkMarkup = True\n
  \       , additionalTagNames = Set.fromList [\"book\", \"heading\", \"name\"]\n
  \       , additionalAttributeNames = Set.fromList [\"_\", \"custom-attribute\"]\n
  \       }\n    )\n```\n\nConfiguration options for `HsxSettings`:\n- `checkMarkup`:
  Boolean to enable/disable markup checking\n- `additionalTagNames`: Set of additional
  allowed tag names\n- `additionalAttributeNames`: Set of additional allowed attribute
  names\n\n2. Make it available in your views by adding it to your view helpers module:\n\n```haskell\nmodule
  Application.Helper.View (\n    module Application.Helper.View,\n    module Application.Helper.CustomHsx
  -- Add this line\n) where\n\nimport IHP.ViewPrelude\nimport Application.Helper.CustomHsx
  (myHsx) -- Add this line\n```\n\n3. Use it in your views:\n\n```haskell\n[myHsx|\n
  \   <book _=\"on click log 'Hello'\">\n        <heading custom-attribute=\"value\">My
  Book</heading>\n        <name>Author Name</name>\n    </book>\n|]\n```\n\nThe custom
  HSX will validate that tags and attributes are either in the default HSX whitelist
  or in your additional sets. This gives you the flexibility to use custom elements
  and attributes.\n\nThis approach is particularly useful for:\n- Web Components with
  custom attribute names\n- UI libraries with non-standard attributes\n- Domain-specific
  XML markup languages\n- Integration with third-party frameworks that extend HTML
  syntax\n\n`customHsx` whitelisting and even `uncheckedHsx` does not entirely help
  for libraries with very unusual symbols in their attributes, like Alpine.js, because
  they don't recognize html attributes starting with `@` or has `:` in the attribute
  name. In these cases, the spread syntax `{...attributeList}` is likely your best
  bet.\n\n```haskell\n-- This will not work\n[uncheckedHsx|<button @click=\"open =
  true\">Expand</button>|]\n\n-- Using spread syntax will work\n[hsx|<button {...[(\"@click\",
  \"open = true\" :: Text)]}>Expand</button>|]\n```\n\n## Common HSX Patterns\n\n###
  Dealing with Maybe Values\n\nWhen dealing with [`Maybe`](https://ihp.digitallyinduced.com/api-docs/IHP-Prelude.html#t:Maybe)
  values you sometimes want to conditionally render something. E.g. in react to render
  a tag with JSX you would do it like this:\n\n```html\n<p>Hi {user.name}</p>\n{user.country
  && <p><small>from {user.country}</small></p>}\n<p>Welcome!</p>\n```\n\nIn HSX you
  usually write it like this:\n\n\n```haskell\nrender user = [hsx|\n    <p>Hi {user.name}</p>\n
  \   {renderCountry}\n|]\n    where\n        renderCountry = case user.country of\n
  \           Just country -> [hsx|<p><small>{country}</small></p>|]\n            Nothing
  -> [hsx||]\n```\n\nWhat about if the country is a empty string? A simple solution
  could look like this:\n\n```haskell\nrenderCountry = case user.country of\n    Just
  \"\" -> [hsx||]\n    Just country -> [hsx|<p>from {country}!</p>|]\n    Nothing
  -> [hsx||]\n```\n\nThat code doesn't feel right. It's better to deal with the problem
  at create time of the `User` record already. Use  [`emptyValueToNothing`](https://ihp.digitallyinduced.com/api-docs/IHP-Controller-Param.html#v:emptyValueToNothing)
  to transform an empty `Just \"\"` to `Nothing` before inserting it into the db:\n\n```haskell\naction
  CreateUserAction = do\n    newRecord @User\n        |> fill '[\"name\", \"country\"]\n
  \       |> emptyValueToNothing #country\n        |> createRecord\n```\n\nNow when
  the country input field is empty when creating the user, the `country` field will
  be set to `Nothing` instead of `Just \"\"`.\n\n**The `emptyValueToNothing` function
  is part of the IHP framework and not bundled in this ihp-hsx package, so you might
  need to implement it yourself if you're using HSX outside of an IHP app.**\n\n###
  Displaying HTML without Escaping\n\nIn HSX all variables and expressions are automatically
  escaped to avoid [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting).\n\nLet's
  say we have variable `myVariable = \"<script>alert(1)</script>\"`. This is how the
  HSX will behave:\n\n```html\n<div>{myVariable}</div>\n\n-- RENDERS to this HTML:\n<div>%3Cscript%3Ealert%281%29%3C/script%3E</div>\n```\n\nSometimes
  you want to insert some actual HTML code to your HSX using a variable. E.g. when
  your app is rendering markdown, the generated HTML by the markdown library should
  not be escaped, the markdown library typically already takes care of that.\n\nIn
  these cases you can use [`preEscapedToHtml`](https://ihp.digitallyinduced.com/api-docs/IHP-ViewPrelude.html#v:preEscapedToHtml)
  to mark a text as already escaped:\n\n```html\n<div>{markdownHtml |> preEscapedToHtml}</div>\n\n--
  Let's define `markdownHtml = \"<p>hello</p>\"`\n\n-- This will render the following
  HTML:\n<div><p>hello</p></div>\n```\n\nBe careful when using [`preEscapedToHtml`](https://ihp.digitallyinduced.com/api-docs/IHP-ViewPrelude.html#v:preEscapedToHtml)
  as it can easily introduce security issues.\n\nThe [`preEscapedToHtml`](https://ihp.digitallyinduced.com/api-docs/IHP-ViewPrelude.html#v:preEscapedToHtml)
  function can also be used to output HTML code that is not supported by HSX:\nThe
  [`preEscapedToHtml`](https://ihp.digitallyinduced.com/api-docs/IHP-ViewPrelude.html#v:preEscapedToHtml)
  function can also be used to output HTML code that is not supported by HSX:\n\n```html\n{\"<!--[if
  IE]> Internet Explorer Conditional Comments <![endif]-->\" |> preEscapedToHtml}\n```\n\n##
  Example: HSX and the equivalent BlazeHtml\n\nThe following code using HSX:\n\n```haskell\ninstance
  View EditView where\n    html EditView { .. } = [hsx|\n        <nav>\n            <ol
  class=\"breadcrumb\">\n                <li class=\"breadcrumb-item\"><a href={PostsAction}>Posts</a></li>\n
  \               <li class=\"breadcrumb-item active\">Edit Post</li>\n            </ol>\n
  \       </nav>\n        <h1>Edit Post</h1>\n        {renderForm post}\n    |]\n```\n\nis
  roughly equivalent to the following BlazeHTML code:\n\n```haskell\ninstance View
  EditView where\n    html EditView { .. } = do\n        H.nav $ do\n            H.ol
  ! A.class_ \"breadcrumb\" $ do\n                H.li ! A.class_ \"breadcrumb-item\"
  $ do\n                    H.a ! A.href (fromString (P.show PostsAction)) $ do\n
  \                       \"Posts\"\n                H.li ! A.class_ \"breadcrumb-item
  active\" $ do\n                    \"Edit Post\"\n        H.h1 \"Edit Post\"\n        renderForm
  post\n```\n\ngiven the following imports:\n\n```haskell\nmodule Web.View.Posts.Edit
  where\nimport Web.View.Prelude\n\nimport qualified Text.Blaze.Html5 as H\nimport
  qualified Text.Blaze.Html5.Attributes as A\n\nimport Prelude as P\n```\n"
description-type: markdown
hash: 91970c74d09e99ce7f12a11879d070e75ddfa75ac7a017f778d2795ef6e34e72
homepage: ''
latest: 1.5.0
license-name: MIT
maintainer: support@digitallyinduced.com
synopsis: JSX-like but for Haskell
test-bench-deps:
  base: '>=4.17.0 && <4.22'
  blaze-markup: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  hspec: '>=0'
  ihp-hsx: '>=0'
  lucid2: '>=0'
  megaparsec: '>=0'
  mtl: '>=0'
  string-conversions: '>=0'
  template-haskell: '>=2.19.0 && <2.24'
  text: '>=0'
  unordered-containers: '>=0'
