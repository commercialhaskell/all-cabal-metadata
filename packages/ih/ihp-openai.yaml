all-versions:
- 1.3.0
author: digitally induced GmbH
basic-deps:
  HsOpenSSL: '>=0'
  aeson: '>=0'
  base: '>=4.17.0 && <4.20'
  bytestring: '>=0'
  http-streams: '>=0'
  io-streams: '>=0'
  retry: '>=0'
  text: '>=0'
changelog: |-
  # Changelog for `ihp-openai`

  ## v1.3

  - This is the initial hackage release
changelog-type: markdown
description: "# OpenAI\n\nThis `ihp-openai` package provides streaming functions to
  access GPT3 and GPT4 from OpenAI.\n\nThe package is designed to work well with IHP
  AutoRefresh and IHP DataSync. The main function `streamCompletion` uses the OpenAI
  Chat API. It was created before the Chat API was available, and the later rewritten
  to work well with GPT-4. That's why it feels a bit like a mix of the completion
  and the chat api.\n\nAPI calls are retried up to 10 times. A retry will continue
  with the already generated output tokens, so that a user will never see that a retry
  has happend.\n\n## Install\n\n1. Make sure you're running on the latest master version
  of IHP\n\n2. Open `default.nix` and add `ihp-openai` to your haskell dependencies:\n\n
  \   ```nix\n    let\n        ihp = ...;\n        haskellEnv = import \"${ihp}/NixSupport/default.nix\"
  {\n            ihp = ihp;\n            haskellDeps = p: with p; [\n                cabal-install\n
  \               base\n                wai\n                text\n                hlint\n
  \               p.ihp\n\n                ihp-openai\n            ];\n            otherDeps
  = p: with p; [\n                # Native dependencies, e.g. imagemagick\n            ];\n
  \           projectPath = ./.;\n        };\n    in\n        haskellEnv\n\n    ```\n\n##
  Example\n\n```haskell\nmodule Web.Controller.Questions where\n\nimport Web.Controller.Prelude\nimport
  Web.View.Questions.Index\nimport Web.View.Questions.New\nimport Web.View.Questions.Edit\nimport
  Web.View.Questions.Show\n\nimport qualified IHP.OpenAI as GPT\n\ninstance Controller
  QuestionsController where\n    action QuestionsAction = autoRefresh do\n        questions
  <- query @Question\n            |> orderByDesc #createdAt\n            |> fetch\n
  \       render IndexView { .. }\n\n    action NewQuestionAction = do\n        let
  question = newRecord\n                |> set #question \"What makes haskell so great?\"\n
  \       render NewView { .. }\n\n    action CreateQuestionAction = do\n        let
  question = newRecord @Question\n        question\n            |> fill @'[\"question\"]\n
  \           |> validateField #question nonEmpty\n            |> ifValid \\case\n
  \               Left question -> render NewView { .. } \n                Right question
  -> do\n                    question <- question |> createRecord\n                    setSuccessMessage
  \"Question created\"\n\n                    fillAnswer question\n\n                    redirectTo
  QuestionsAction\n\n    action DeleteQuestionAction { questionId } = do\n        question
  <- fetch questionId\n        deleteRecord question\n        setSuccessMessage \"Question
  deleted\"\n        redirectTo QuestionsAction\n\nfillAnswer :: (?modelContext ::
  ModelContext) => Question -> IO (Async ())\nfillAnswer question = do\n    -- Put
  your OpenAI secret key below:\n    let secretKey = \"sk-XXXXXXXX\"\n\n    -- This
  should be done with an IHP job worker instead of async\n    async do \n        GPT.streamCompletion
  secretKey (buildCompletionRequest question) (clearAnswer question) (appendToken
  question)\n        pure ()\n\nbuildCompletionRequest :: Question -> GPT.CompletionRequest\nbuildCompletionRequest
  Question { question } =\n    -- Here you can adjust the parameters of the request\n
  \   GPT.newCompletionRequest\n        { GPT.maxTokens = 512\n        , GPT.prompt
  = [trimming|\n                Question: ${question}\n                Answer:\n        |]
  }\n\n-- | Sets the answer field back to an empty string\nclearAnswer :: (?modelContext
  :: ModelContext) => Question -> IO ()\nclearAnswer question = do\n    sqlExec \"UPDATE
  questions SET answer = '' WHERE id = ?\" (Only question.id)\n    pure ()\n\n-- |
  Stores a couple of newly received characters to the database\nappendToken :: (?modelContext
  :: ModelContext) => Question -> Text -> IO ()\nappendToken question token = do\n
  \   sqlExec \"UPDATE questions SET answer = answer || ? WHERE id = ?\" (token, question.id)\n
  \   pure ()\n```"
description-type: markdown
hash: f85951b1c6238b7d111bd51c6625ffc98e40cb2c093b36064374214a43a9aedb
homepage: ''
latest: 1.3.0
license-name: MIT
maintainer: support@digitallyinduced.com
synopsis: Call GPT4 from your Haskell apps
test-bench-deps:
  aeson: '>=0'
  base: '>=4.17.0 && <4.20'
  hspec: '>=0'
  ihp-openai: '>=0'
  neat-interpolation: '>=0'
  text: '>=0'
