all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
- 0.0.0.7
- 0.0.0.8
- 0.0.0.9
- 0.0.0.10
author: Mike Solomon
basic-deps:
  aeson: '>=1.4.7 && <1.5'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.10 && <0.11'
  containers: '>=0.6.2 && <0.7'
  hashable: '>=1.3.0 && <1.4'
  haskell-src-meta: '>=0.8.5 && <0.9'
  mtl: '>=2.2.2 && <2.3'
  parsec: '>=3.1.14 && <3.2'
  split: '>=0.2.3 && <0.3'
  template-haskell: '>=2.14.0 && <2.16'
  text: '>=1.2.3 && <1.3'
  transformers: '>=0.5.6 && <0.6'
  unordered-containers: '>=0.2.10 && <0.3'
changelog: "# Changelog for plzwrk\r\n\r\n## 0.0.0.10\r\n\r\n- Renames `hsx` to `pwx`.\r\n\r\n##
  0.0.0.9\r\n\r\n- Renames `Browserful` to `JSEnv`.\r\n- Fixes garbage collection
  bug for callback functions.\r\n\r\n## 0.0.0.8\r\n\r\n- Fixes a bug in the PWX parser
  that rejected certain valid text nodes\r\n\r\n## 0.0.0.7\r\n\r\n- Removes spurious
  dependencies for faster build.\r\n\r\n## 0.0.0.6\r\n\r\n- Adds `#el` mixin for element
  lists.\r\n\r\n## 0.0.0.5\r\n\r\n- Adds bounds for cabal packages\r\n- Explicity
  declares `Control.Monad.Fail` in `PWX.hs` to allow automated haddock builds.\r\n\r\n##
  0.0.0.4\r\n\r\n- Adds `pwx` and `pwx'` for `jsx`-like manipulation.\r\n\r\n## 0.0.0.3\r\n\r\n-
  Adds bindings for `fetch`\r\n- Simplifies `Browserful` API to only contain primitives
  and uses utility functions to build on top of the primitives.\r\n\r\n## 0.0.0.2\r\n\r\n-
  Adds server side rendering via `toHTML` and `plzwrkSSR`.\r\n- Adds more documentation.\r\n\r\n##
  0.0.0.1\r\n\r\n- Adds util functions for attribute creation like `wClass`, `wId`
  etc.\r\n\r\n## 0.0.0.0\r\n\r\n- Initial release.\r\n"
changelog-type: markdown
description: "# plzwrk\r\n\r\n[![Chat on Gitter](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/meeshkan/community)\r\n\r\nA
  Haskell front-end framework.\r\n\r\nAvailable as a Hackage package: [`plzwrk`](https://hackage.haskell.org/package/plzwrk)\r\n\r\n\U0001F4D6
  Looking for an overview? [Read our announcement blog post](https://meeshkan.com/blog/introducing-plzwrk/).\r\n\r\n##
  In this document:\r\n\r\n* [When to use `plzwrk`](#when-to-use-plzwrk)\r\n* [Examples
  using `plzwrk`](examples-using-plzwrk)\r\n  * [Hello world](#hello-world)\r\n  *
  [Aphorism machine](#aphorism-machine)\r\n* [Making a webpage](#making-a-webpage)\r\n*
  [Documentation](#documentation)\r\n* [Design of `plzwrk`](#design-of-plzwrk)\r\n
  \ * [PWX](#pwx)\r\n  * [Hydrating with a state](#hydrating-with-a-state)\r\n  *
  [Event handlers](#event-handlers)\r\n* [Server-side rendering](#server-side-rendering)\r\n*
  [Testing your code](#testing-your-code)\r\n* [Contributing](#contributing)\r\n  *
  [Local development](#local-development)\r\n\r\n## When to use `plzwrk`\r\n\r\n`plzwrk`
  may be a good fit if you enjoy the benefits of programming in Haskell and you'd
  like to create a web app.\r\n\r\n⚠️ Warning: `plzwrk` is experimental. It is unfit
  for production and the syntax will change frequently, often in non-backward-compatible
  ways. We will try to document all of these changes in the [changelog](ChangeLog.md).\r\n\r\nSome
  alternatives to `plzwrk`:\r\n\r\n- [Elm](https://elm-lang.org/), a delightful language
  for reliable web apps.\r\n- [Purescript react basic](https://github.com/lumihq/purescript-react-basic),
  an opinionated set of bindings to the React library, optimizing for the most basic
  use cases.\r\n\r\n## Examples using `plzwrk`\r\n\r\n<!-- TODO: Update when PR#5
  is merged -->\r\n\r\n### Hello world\r\n\r\nAn example web page that says 'Hello
  world!'\r\n\r\n```haskell\r\n{-# LANGUAGE QuasiQuotes #-}\r\n\r\nimport Web.Framework.Plzwrk\r\nimport
  Web.Framework.Plzwrk.Asterius\r\n\r\nmain :: IO ()\r\nmain = do\r\n  browser <-
  asteriusBrowser\r\n  plzwrk'_ [pwx|<p>Hello world!</p>|] browser\r\n```\r\n\r\n[See
  the Hello World example live](https://plzwrk-hello-world.surge.sh).\r\n\r\n### Aphorism
  machine\r\n\r\nAn Aphorism Machine that spits out and hides universal truths on
  demand.\r\n\r\n[Check out the source code in the `kitchen-sink` directory](./kitchen-sink/Main.hs).
  Or [see the Aphorism Machine live](https://plzwrk-kitchen-sink.surge.sh).\r\n\r\n##
  Making a webpage\r\n\r\n`plzwrk` uses [Asterius](https://github.com/tweag/asterius)
  as its backend for web development. \r\n\r\nA minimal flow is shown below. It assumes
  that you have a file called `Main.hs` in the present working directory with a function
  `main :: IO ()` inside of it, not unlike in our [hello world example](#hello-world).\r\n\r\n```bash\r\nusername@hostname:~/my-dir$
  docker run --rm -it -v $(pwd):/project -w /project meeshkan/plzwrk\r\nasterius@hostname:/project$
  ahc-link --input-hs Main.hs --browser --bundle\r\n```\r\n\r\nIf you're using `ahc-cabal`,
  compiling an application using `plzwrk` is no different than compiling an application
  as described in the [Asterius documentation](https://asterius.netlify.app) with
  **one caveat**. You **must** use `--constraint \"plzwrk +plzwrk-enable-asterius\"`
  when running `ahc-cabal`.\r\n\r\n## Documentation\r\n\r\nThe main documentation
  for `plzwrk` is on [Hackage](https://hackage.haskell.org/package/plzwrk). \r\n\r\nThe
  four importable modules are:\r\n\r\n- [`Web.Frameworks.Plzwrk`](https://hackage.haskell.org/package/plzwrk-0.0.0.9/docs/Web-Framework-Plzwrk.html)
  for the basic functions\r\n- [`Web.Frameworks.Plzwrk.Tag`](https://hackage.haskell.org/package/plzwrk-0.0.0.9/docs/Web-Framework-Plzwrk-Tag.html)
  for helper functions to make takes like `input` or `br` if you are not using `pwx`.\r\n-
  [`Web.Frameworks.Plzwrk.MockJSVal`](https://hackage.haskell.org/package/plzwrk-0.0.0.9/docs/Web-Framework-Plzwrk-MockJSVal.html)
  to use a mock browser.\r\n- [`Web.Frameworks.Plzwrk.Asterius`](https://hackage.haskell.org/package/plzwrk-0.0.0.9/docs/Web-Framework-Plzwrk-Asterius.html)
  to use a bindings for a real browser courtesy of [Asterius](https://github.com/tweag/asterius).\r\n\r\n##
  Design of `plzwrk`\r\n\r\n`plzwrk` is inspired by [Redux](https://redux.js.org/)
  for its state management. The main idea is that you have an HTML-creation function
  that is composed, via `<*>`, with getters from a state.\r\n\r\n```haskell\r\n--
  State\r\ndata MyState = MkMyState { _name :: Text, age :: Int, _tags :: [Text] }\r\n\r\n--
  Function hydrating a DOM with elementse from the state\r\nmakeP = (\\name age ->\r\n
  \ [pwx'|<p>#t{concat [name, \" is the name and \", show age, \" is my age.\"]}#</p>|])\r\n
  \   <$> _name\r\n    <*> _age\r\n\r\n-- The same function using functional tags
  instead of pwx\r\nmakeP = (\\name age ->\r\n    p'__ concat [name, \" is the name
  and \", show age, \" is my age.\"])\r\n      <$> _name\r\n      <*> _age\r\n```\r\n\r\nHTML-creation
  functions can be nested, allowing for powerful abstractions:\r\n\r\n```haskell\r\nnested
  = div_ (take 10 $ repeat makeP)\r\n```\r\n\r\n### PWX\r\n\r\n`pwx` is similar to
  [`jsx`](https://reactjs.org/docs/introducing-jsx.html). The main difference is that
  instead of only using `{}`, `pwx` uses four different varieties of `#{}#`:\r\n\r\n-
  `#e{}#` for a single element.\r\n- `#el{}#` for a list of elements.\r\n- `#t{}#`
  for a single piece of text, either as a node in the body of an element or as a text
  attribute.\r\n- `#c{}#` for a callback attribute.\r\n\r\n### Hydrating with a state\r\n\r\nHTML-creation
  functions use an apostrophe after the tag name (ie `div'`) if they accept arguments
  from a state and no apostrophe (ie `div`) if they don't. The same is true of `pwx`,
  ie `[pwx|<br />|]` versus `(s -> [pwx'|<br />|])`. \r\n\r\nAdditionally, HTML-creation
  functions for tags that don't have any attributes (class, style, etc) are marked
  with a trailing underscore (ie `div_ [p__ \"hello\"]`), and tags that only accept
  text are marked with two trailing underscores (ie `p__ \"hello\"`).\r\n\r\n### Event
  handlers\r\n\r\nEvent handlers take two arguments - an opaque pointer to the event
  and the current state. Then, it returns a new state (which could also be the original
  state) in the `IO` monad. \r\n\r\nFor example, if the state is an integer, a valid
  event handler could be:\r\n\r\n```haskell\r\neh :: opq -> Int -> IO Int\r\neh _
  i = pure $ i + 1\r\ndom = [pwx|<button click=#c{eh}#>Click here</button>|]\r\n```\r\n\r\nTo
  handle events, you can use one of the functions exported by `Web.Framework.Plzwrk`.
  This could be useful to extract values from input events, for instance. Please see
  the [Hackage documentation](https://hackage.haskell.org/package/plzwrk) for more
  information.\r\n\r\n## Server-side rendering\r\n\r\n`plzwrk` supports server-side
  rendering. To do this, you have to compile your site twice:\r\n- Once using `ahc-cabal`.
  This uses the [procedure outlined in the last section](#design-of-plzwrk) to create
  any JavaScript you need (ie event handlers), and\r\n- Once using plain old `cabal`
  to create the inital HTML.\r\n\r\nWhen compiling using `ahc-cabal`, make sure to
  use the [`plzwrkSSR`](https://hackage.haskell.org/package/plzwrk-0.0.0.9/docs/Web-Framework-Plzwrk.html#v:plzwrkSSR)
  family of functions. These functions will look for pre-existing elements in the
  DOM and attach event listeners to them instead of creating elements from scratch.
  \r\n\r\nThere may also be times that the static website needs to be initialized
  with data (ie using the result of an HTTP response made on the server). In this
  case, you'll need to pass these values dynamically to the function that calls `plzwrkSSR`.
  You can do this using the `foreign export` syntax as described in the [Asterius
  documentation](https://asterius.netlify.app/jsffi.html#jsffi-static-exports).\r\n\r\nWhen
  compiling with `cabal`, you'll likely be using it to output an HTML document or
  build a server that serves your website as `text/html`. Regardless of the approach,
  you should use [`toHTML`](https://hackage.haskell.org/package/plzwrk-0.0.0.9/docs/Web-Framework-Plzwrk.html#v:toHTML)
  to create the part of the initial DOM controlled by `plzwrk`. In your HTML, make
  sure to include a link to the script(s) produced by `ahc-dist`. Also, if needed,
  make sure to call your exported functions.\r\n\r\n## Testing your code\r\n\r\n`plzwrk`
  comes with a mock browser that can act as a drop-in replacement for your browser.
  \r\n\r\nYou can use this in your tests:\r\n\r\n```haskell\r\nimport Web.Framework.Plzwrk.MockJSVal\r\n\r\nmain
  :: IO ()\r\n    browser <- makeMockBrowser\r\n    print \"Now I'm using the mock
  browser.\"\r\n```\r\n\r\n## Contributing\r\n\r\nThanks for your interest in contributing!
  If you have a bug or feature request, please file an [issue](https://github.com/meeshkan/plzwrk/issues).
  Or if you'd like to hack at the code base, open a [pull request](https://github.com/meeshkan/plzwrk/issues).\r\n\r\nPlease
  note that this project is governed by the [Meeshkan Community Code of Conduct](https://github.com/meeshkan/code-of-conduct).
  By participating, you agree to abide by its terms.\r\n\r\n### Local development\r\n\r\n1.
  Clone this repository: `git clone https://github.com/meeshkan/plzwrk.git`\r\n1.
  Move into the directory: `cd plzwrk`\r\n1. Set up your local environment: You can
  use this guide from [The Haskell Tool Stack](https://docs.haskellstack.org/en/stable/README/)
  for reference.\r\n"
description-type: markdown
hash: 4810029b5281091c9d2505f020cb66ef0ee93bf63e428a59a540477a2ca0ba40
homepage: https://github.com/meeshkan/plzwrk#readme
latest: 0.0.0.10
license-name: BSD-3-Clause
maintainer: mike@meeshkan.com
synopsis: A front-end framework
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=2.7.0 && <2.7.2'
  mtl: '>=2.2.2 && <2.3'
  plzwrk: '>=0'
  text: '>=1.2.3 && <1.3'
  unordered-containers: '>=0.2.10 && <0.3'
