all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.1
- 0.5.2
author: Peter Jones <pjones@devalot.com>
basic-deps:
  attoparsec: '>=0.10 && <0.15'
  base: '>=4.6 && <5'
  bytestring: '>=0.10 && <0.13'
  filepath: '>=1.3 && <1.6'
  optparse-applicative: '>=0.10 && <0.19'
  playlists: '>=0'
  text: '>=0.11 && <2.2'
  word8: '>=0.0 && <0.2'
changelog: |
  # Release History

  ## 0.5 (December 1, 2017)

    * Add support for track length (thanks to Catherine Galkina)

    * Widen dependency versions to latest available.

    * Minor updates:

      - 0.5.1 (October 29, 2020): Update dependencies

      - 0.5.2 (May 15, 2024): Update dependencies

  ## 0.4 (November 21, 2016)

    * Added the `resolve` function.  If you have a playlist that
      contains references to remote playlists, this new function will
      recursively download and process playlists until it has a flat
      playlist with no further remote references.

      See the `playlists-http` package for an example of using the
      `resolve` function.

    * Added the `parserForFormat` function which directly exposes the
      `attoparsec` parser for each playlist type.  This should make it
      easy to write space efficient functions that parse playlists.

    * Minor updates:

      - 0.4.1 (February 5, 2017): Update dependencies

  ## 0.3 (January 24, 2015)

    * Update dependencies to recent versions (thanks to Wieland Hoffmann).
changelog-type: markdown
description: |
  # Haskell Playlists Library and Tool

  [![CI](https://github.com/pjones/playlists/workflows/CI/badge.svg)](https://github.com/pjones/playlists/actions)
  [![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/pjones/playlists?label=release)](https://github.com/pjones/playlists/releases)
  [![Hackage](https://img.shields.io/hackage/v/playlists)](https://hackage.haskell.org/package/playlists)

  Playlists is a library for working with media playlist files.  The
  original motivation for the library was extracting URLs for streaming
  radio stations that use PLS and M3U playlist files.

  The package also includes an executable that can dump the URLs from a
  playlist file and convert between playlist file formats.

  ## Supported Formats

    * [PLS][]
    * [M3U and M3U8][M3U]

  ## Future Plans

  Some playlist files can be really big.  I plan on adding support for
  incremental parsing and generating via `pipes` at some point in the
  future.

  ## Library Example

  ```haskell
  import qualified Data.ByteString as BS
  import Text.Playlist

  readPlaylist :: Format -> IO Playlist
  readPlaylist fmt = do
    content <- BS.getContents
    case parsePlaylist fmt content of
      Left err -> fail $ "failed to parse playlist on stdin: " ++ err
      Right x  -> return x
  ```

  ## Executable Example

      $ playlist urls --format PLS < somefile.pls

      $ playlist convert --from PLS --to M3U < somefile.pls

  [pls]: http://en.wikipedia.org/wiki/PLS_(file_format)
  [m3u]: http://en.wikipedia.org/wiki/M3U
description-type: markdown
hash: 363d785bd78fc893abe3877ec45c74b428c54144a3d967cf7e4f686e2c70f69a
homepage: https://github.com/pjones/playlists
latest: 0.5.2
license-name: BSD-3-Clause
maintainer: Peter Jones <pjones@devalot.com>
synopsis: Library and executable for working with playlist files.
test-bench-deps:
  attoparsec: '>=0.10 && <0.15'
  base: '>=4.6 && <5'
  bytestring: '>=0.10 && <0.13'
  filepath: '>=1.3 && <1.6'
  hspec: '>=1.4.0'
  playlists: '>=0'
  text: '>=0.11 && <2.2'
  word8: '>=0.0 && <0.2'
