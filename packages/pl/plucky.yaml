all-versions:
- 0.0.0.1
author: Matt Parsons
basic-deps:
  base: '>=4.9.1.0 && <5'
  transformers: '>=0.4.0.0 && <0.6'
changelog: |
  # Changelog for checked-errors

  ## 0.0.0.1

  - Add `catchOneT`
  - Add `rethrowT`
  - Documentation improvements and organization

  ## 0.0.0.0

  Initial Release
changelog-type: markdown
description: |
  # plucky

  [![Build Status](https://travis-ci.org/parsonsmatt/plucky.svg?branch=master)](https://travis-ci.org/parsonsmatt/plucky)

  Haskell [has a problem with problems](https://www.parsonsmatt.org/2018/11/03/trouble_with_typed_errors.html).
  We have `IO` exceptions for unchecked exceptions - the same sort that plague Ruby, Python, JavaScript, and other languages.
  We have `ExceptT` for checked exceptions, but Java has us beat on ergonomics and usability of checked exceptions.
  Can we do better?
  Well, the blog post points to [`generic-lens`](https://hackage.haskell.org/package/generic-lens), but that's kind of hard to use.
  Can we do better, and easier?

  Yes! I alluded to this in my blog post [Plucking Constraints](https://www.parsonsmatt.org/2020/01/03/plucking_constraints.html).
  This library provides an API and demonstration on 'plucking' error constraints.
description-type: markdown
hash: 9b08e180bf4af6d26ac4e04a2d5f6d4529cefd4e8a310283f817b55b72beef56
homepage: https://github.com/parsonsmatt/plucky#readme
latest: 0.0.0.1
license-name: BSD-3-Clause
maintainer: parsonsmatt@gmail.com
synopsis: A library and technique for handling errors via plucking constraints
test-bench-deps:
  base: '>=4.7 && <5'
  mtl: '>=0'
  plucky: '>=0'
