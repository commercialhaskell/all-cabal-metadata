all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
author: Mark Karpov <markkarpov92@gmail.com>
basic-deps:
  base: '>=4.7 && <5.0'
  exceptions: '>=0.8 && <0.10'
  path: '>=0.5 && <0.7'
  path-io: '>=1.0.1 && <2.0'
  transformers: '>=0.3 && <0.6'
changelog: |
  ## Plan B 0.2.1

  * Implement `Semigroup` instance for the `PgConfig` type.

  * Improved documentation and metadata.

  ## Plan B 0.2.0

  * Added `moveByRenaming` option to allow move files and directories by
    renaming. This is not default because moving by renaming is not always
    possible, while moving by coping is always an option.

  ## Plan B 0.1.1

  * Fixed the problem with moving of files and directories from `/tmp/` to
    some location not under `/tmp/` resulting in “unsupported operation”
    exception on Unix. Now they are moved by copying.

  ## Plan B 0.1.0

  * Initial release.
changelog-type: markdown
description: |
  # Plan B

  [![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)
  [![Hackage](https://img.shields.io/hackage/v/plan-b.svg?style=flat)](https://hackage.haskell.org/package/plan-b)
  [![Stackage Nightly](http://stackage.org/package/plan-b/badge/nightly)](http://stackage.org/nightly/package/plan-b)
  [![Stackage LTS](http://stackage.org/package/plan-b/badge/lts)](http://stackage.org/lts/package/plan-b)
  [![Build Status](https://travis-ci.org/mrkkrp/plan-b.svg?branch=master)](https://travis-ci.org/mrkkrp/plan-b)
  [![Coverage Status](https://coveralls.io/repos/mrkkrp/plan-b/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrkkrp/plan-b?branch=master)

  This is a Haskell library helping perform failure-tolerant operations on
  files and directories.

  ## Quick start

  The library allows to create and/or edit files, directories, and containers.
  By “container” we mean archive-like object that can contain representation
  of a directory inside it. Consequently, we have six functions available:

  * `withNewFile`
  * `withExstingFile`
  * `withNewDir`
  * `withExistingDir`
  * `withNewContainer`
  * `withExistingContainer`

  You specify name of an object to edit or create, options (more on them
  below), and an action that gets a `Path` argument with the same type as
  object you intend to edit (we use type-safe file paths
  from [`path`](https://hackage.haskell.org/package/path) package here to
  prevent a certain class of potential bugs). Then, having that path, you can
  perform all actions you want to and if at some point during this editing an
  exception is thrown, state of file system is rolled back—you get no
  corrupted files, half-way edited directories, everything is intact as if
  nothing happened at all. If, however, the action is executed successfully
  (i.e. no exceptions thrown), all your manipulations are reflected in the
  file system.

  This is a lightweight solution that makes it harder to corrupt sensitive
  information. And since file system exists in the real world, all sorts of
  bad things *can* (and *will*) happen. *You should always have plan B.*

  Temporary files and back-ups are handled and deleted automatically, however
  you can pass options to change default behaviors. Not all options can be
  used with every function, but wrong combinations won't type-check, so it's
  OK.

  Collection of options is a monoid. `mempty` corresponds to the default
  behavior, while non-standard behavioral deviations can be `mappend`ed to it.

  By default, when we want to create a new object and it already exists, we
  get an exception, two alternative options exist (only work when you create a
  new object):

  * `overrideIfExist`
  * `useIfExist`

  There is no way to prevent exception when you want to *edit* object that
  does not exist, though.

  All functions make use of temporary directories. You can control certain
  aspects of this business:

  * `tempDir dir`—tells the library to create temporary directories and files
    inside `dir`. By default system's standard temporary directory (e.g.
    `/tmp/` on Unix-like systems) is used.

  * `nameTemplate template`—specifies template to use for generation of unique
    file and directory names. By default `"plan-b"` is used.

  * `preserveCorpse`—if you add this to options, in case of failure
    (exception), temporary directory is not automatically deleted and can be
    inspected. However, if operation succeeds, temporary directory is *always*
    deleted.

  * `moveByRenaming`—by default files and directories are moved by copying,
    this option enables moving by renaming. If you also specify `tempDir` that
    is on the same disk/partition as the final file you're generating, this
    may speed up things considerably.

  That should be enough for a quick intro, for more information regarding
  concrete functions, consult Haddocks.

  ## License

  Copyright © 2016–2017 Mark Karpov

  Distributed under BSD 3 clause license.
description-type: markdown
hash: 323031a3038598f3d745aeed5f14691080498c2ad89a9d85a78c9a702732710f
homepage: https://github.com/mrkkrp/plan-b
latest: 0.2.1
license-name: BSD-3-Clause
maintainer: Mark Karpov <markkarpov92@gmail.com>
synopsis: Failure-tolerant file and directory editing
test-bench-deps:
  base: '>=4.7 && <5.0'
  hspec: '>=2.0 && <3.0'
  path: '>=0.5 && <0.7'
  path-io: '>=1.0.1 && <2.0'
  plan-b: '>=0'
