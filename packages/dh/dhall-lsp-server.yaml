homepage: https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server#readme
changelog-type: ''
hash: c035ca3539ed547106680a6faeca4e23d5a36f60032b43c0a33492368762902e
test-bench-deps:
  lsp-test: '>=0.13.0.0 && <0.15'
  base: -any
  hspec: '>=2.7 && <2.10'
  text: '>=0.11 && <1.3'
  tasty-hspec: '>=1.1 && <1.3'
  filepath: <1.5
  doctest: '>=0.7.0'
  tasty: '>=0.11.2 && <1.5'
  QuickCheck: -any
  lsp-types: '>=1.2.0.0 && <1.5'
  directory: '>=1.3.1.5 && <1.4'
maintainer: Gabriel Gonzalez
synopsis: Language Server Protocol (LSP) server for Dhall
changelog: ''
basic-deps:
  lsp: '>=1.2.0.0 && <1.5'
  bytestring: '>=0.10.8.2 && <0.12'
  base: '>=4.11 && <5'
  dhall: '>=1.38.0 && <1.42'
  aeson-pretty: '>=0.8.7 && <0.9'
  unordered-containers: '>=0.2.9.0 && <0.3'
  text: '>=1.2.3.0 && <1.3'
  megaparsec: '>=7.0.2 && <10'
  filepath: '>=1.4.2 && <1.5'
  data-default: '>=0.7.1.1 && <0.8'
  containers: '>=0.5.11.0 && <0.7'
  lens: '>=4.16.1 && <5.2'
  rope-utf16-splay: '>=0.3.1.0 && <0.4'
  dhall-lsp-server: -any
  hslogger: '>=1.2.10 && <1.4'
  uri-encode: '>=1.5.0.5 && <1.6'
  network-uri: '>=2.6.1.0 && <2.7'
  mtl: '>=2.2.2 && <2.3'
  dhall-json: '>=1.4 && <1.8'
  prettyprinter: '>=1.7.0 && <1.8'
  transformers: '>=0.5.5.0 && <0.6'
  optparse-applicative: -any
  aeson: '>=1.3.1.1 && <2.1'
  directory: '>=1.2.2.0 && <1.4'
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 1.0.10
- 1.0.11
- 1.0.12
- 1.0.13
- 1.0.14
- 1.0.15
- 1.0.16
- 1.0.17
- 1.0.18
- 1.1.0
- 1.1.1
author: panaeon
latest: 1.1.1
description-type: markdown
description: "# Dhall language support in VSCode/ium\n\nThe Dhall language integration
  consists of the following parts:\n- The VSCode/ium plugin \"Dhall Language Support\"
  *([vscode-language-dhall](https://github.com/dhall-lang/vscode-language-dhall))*
  adds syntax highlighting for Dhall files.\n- The VSCode/ium plugin \"Dhall LSP Server\"
  *([vscode-dhall-lsp-server](https://github.com/dhall-lang/vscode-dhall-lsp-server))*
  implements the LSP client &ndash; yes, there is a naming issue here &ndash; that
  communicates with the backend via the [LSP protocol](https://microsoft.github.io/language-server-protocol/specification)
  to provide advanced language features like error diagnostics or type information,
  etc.\n- [*dhall-lsp-server*](https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-lsp-server),
  which is part of the [*dhall-haskell*](https://github.com/dhall-lang/dhall-haskell)
  project, implements the actual LSP server (i.e. the backend) that implements those
  language features in an editor agnostic way, though at the moment only a VSCode/ium
  frontend exists.\n\n# Installation\n\nThe \"official\" releases can be installed
  as follows:\n\n- **vscode-language-dhall** should be installed directly from VSCode/ium
  via the extensions marketplace.\n- **vscode-dhall-lsp-server** can also be installed
  directly from the marketplace.\n- **dhall-lsp-server** can be installed from hackage
  with `cabal install dhall-lsp-server`. See the\n[`dhall-haskell` `README`](https://github.com/dhall-lang/dhall-haskell/blob/master/README.md)
  for pre-built binaries, as well as comprehensive installation and development instructions
  using *cabal*, *stack* or *nix*.\n\n## Installing the latest development versions\n\n**Note&nbsp;**
  The versions of *vscode-dhall-lsp-server* and *dhall-lsp-server* need not necessarily
  match: an older client version will simply not expose all commands available in
  the backend, while an older server might not implement all commands exposed in the
  UI.\n\n**vscode-dhall-lsp-server**\n1. You need to have *npm* installed (e.g. using
  your favourite package manager).\n2. Install the *typescript* compiler with `npm
  install -g typescript`. I recommend running `npm config set prefix '~/.local'` first
  to have npm install the executable in `~/.local/bin`; this avoids having to use
  *sudo* and polluting the rest of the system.\n2. Check out a copy of the vscode-dhall-lsp-server
  repository into the VSCode/ium extensions folder\n   ```\n   git clone git@github.com:dhall-lang/vscode-dhall-lsp-server.git
  ~/.vscode-oss/extensions/vscode-dhall-lsp-server\n   ```\n   (replace `~/.vscode-oss/`
  with `~/.vscode/` if you use VSCode instead of VSCodium).\n3. Run the remaining
  commands in the checked-out directory\n   ```\n   cd ~/.vscode-oss/extensions/vscode-dhall-lsp-server\n
  \  ```\n4. Run `npm install` to fetch all library dependencies.\n5. Run `npm run
  compile` to compile the typescript code to javascript.\n6. Start (restart) VSCode/ium.\n\n**dhall-lsp-server&nbsp;**\nFor
  detailed instructions as well as instructions using cabal or nix, see [`dhall-haskell`
  - `README`](https://github.com/dhall-lang/dhall-haskell/blob/master/README.md).
  To install dhall-lsp-server using *stack*:\n1. Clone `git@github.com:dhall-lang/dhall-haskell.git`.\n2.
  Inside the checked out repository run `stack install dhall-lsp-server`.\n\n\n# Usage
  / Features\n\n- **Diagnostics&nbsp;**\nEvery time you save a Dhall file it is parsed
  and typechecked, and any errors are marked. You can hover over the offending code
  to see the error message; to see a detailed explanation in the case of type errors,
  click the *Explain* link in the hover box.\n\n- **Clickable imports&nbsp;**\nAs
  long as the file parses successfully, all (local file and remote) imports will be
  underlined and clickable.\n\n- **Type on hover&nbsp;**\nYou can hover over any part
  of the code and it will tell you the type of the subexpression at that point &ndash;
  if you highlight an identifier you see its type; if you highlight the `->` in a
  function you will see the type of the entire function. This feature only works if
  the code passes the typechecker!\n\n- **Code completion&nbsp;**\nAs you type you
  will be offered completions for:\n  - environment variables\n  - local imports\n
  \ - identifiers in scope (as well as built-ins)\n  - record projections from 'easy-to-parse'
  records (of the form `ident1.ident2`[`.ident3...`])\n  - union constructors from
  'easy-to-parse' unions\n\n  This is the only feature that works even when the file
  does not parse (or typecheck).\n\n- **Formatting and Linting&nbsp;**\nRight click
  and select \"Format Document\" to run the file through the Dhall formatter. The
  command \"Lint and Format\" can be selected via the *Command Palette* (Ctrl+Shift+P);
  this will run the linter over the file, removing unused let bindings and formatting
  the result.\n\nThe default formatting behavior is to infer the character set used
  in the file (Unicode/ASCII operators).\nThis can be overriden by using the Dhall
  LSP settings. For example in VS Code's `settings.json`:\n  - `\"vscode-dhall-lsp-server.character-set\":
  \"ascii\"` to always format using the ASCII character set\n  - `\"vscode-dhall-lsp-server.character-set\":
  \"unicode\"` to always format using the Unicode character set\n\n- **Annotate lets&nbsp;**\nRight-click
  the bound identifier in a `let` binding and select \"Annotate Let binding with its
  type\" to do exactly that.\n\n- **Freeze imports&nbsp;**\nRight-click an import
  statement and select \"Freeze (refreeze) import\" to add (or update) a semantic
  hash annotation to the import. You can also select \"Freeze (refreeze) all imports\"
  from the *Command Palette* to freeze all imports at once.\n\n  Note that this feature
  behaves slightly differently from the `dhall freeze` command in that the hash annotations
  are inserted without re-formatting the rest of the code!\n\n# Developer notes\n\n**dhall-lsp-server&nbsp;**\nSee
  [`dhall-haskell` - `README`](https://github.com/dhall-lang/dhall-haskell/blob/master/README.md)
  for general development instructions.\n- You can also build using `stack build dhall-lsp-server`
  and point `vscode-dhall-lsp-server.executable` in the VSCode/ium settings to the
  stack build directory to avoid overriding the already installed version of the LSP
  server.\n- You can use standard `Debug.Trace`/`putStrLn` debugging; the output will
  show up in the \"Output\" panel in VSCode/ium.\n- To log all LSP communication set
  `vscode-dhall-lsp-server.trace.server` to `verbose` in VSCode/ium.\n\n**vscode-dhall-lsp-server**\n-
  Instead of working in `~/vscode-oss/extensions/...` directly, you can open a clone
  of the git repository in VSCode/ium and use the built-in debugging capabilities
  for extensions: press F5 (or click the green play button in the debugging tab) to
  launch a new VSCode/ium window with the modified extension (potentially shadowing
  the installed version).\n- To package a release:\n  1. Make sure you have *npm*
  and *tsc* installed.\n  2. Use `npm install -g vsce` to install the *vsce* executable.\n
  \ 3. Run `vsce package` inside the git repo to package the extension, resulting
  in a file `vscode-dhall-lsp-server-x.x.x.vsix`.\n  4. You can install the packaged
  extension directly by opening the `.vsix` file from within VSCod/ium.\n  \n**Integration
  tests**\n\nThe `dhall-lsp-server:tests` testsuite depends on the `dhall-lsp-server`
  executable. Since `stack` isn't aware of this dependency, `stack test dhall-lsp-server:tests`
  may use an old executable version. Run these tests with\n\n    stack test dhall-lsp-server:tests
  dhall-lsp-server:dhall-lsp-server\n    \nto ensure that the executable is up-to-date.\n"
license-name: MIT
