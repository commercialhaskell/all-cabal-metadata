homepage: ''
changelog-type: ''
hash: 563045508a435d998be284396cb666557609ab4c207534b365ca5a2649592c90
test-bench-deps: {}
maintainer: GenuineGabriella@gmail.com
synopsis: Template text using Dhall
changelog: ''
basic-deps:
  base: '>=4.8.0.0 && <5'
  dhall: '>=1.15.0 && <1.25'
  text: '>=0.11.1.0 && <1.3'
  optparse-applicative: <0.16
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 1.0.10
- 1.0.11
- 1.0.12
- 1.0.13
- 1.0.14
- 1.0.15
- 1.0.16
- 1.0.17
- 1.0.18
author: Gabriella Gonzalez
latest: 1.0.18
description-type: markdown
description: "# `dhall-text`\n\nFor installation or development instructions, see:\n\n*
  [`dhall-haskell` - `README`](https://github.com/dhall-lang/dhall-haskell/blob/master/README.md)\n\n##
  Introduction\n\nThis `dhall-text` package provides a `dhall-to-text` executable
  which you can\nuse to template text using the Dhall configuration language.\n\n##
  Example\n\nSuppose you save the following files to your current directory:\n\n```haskell\n$
  cat Person\n-- Dhall is a typed programming language\n\n-- This file is the type
  of an anonymous record\n{ name : Text, upvotes : Natural }\n```\n\n```haskell\n$
  cat people\n-- Dhall natively supports lists and anonymous records\n\n[ { name =
  \"Maria\" , upvotes = 14 }\n, { name = \"Jordan\", upvotes =  2 }\n, { name = \"Pranav\",
  upvotes =  1 }\n]\n\n{- This file has type:\n  \n       ./people : List { name :
  Text, upvotes : Natural }\n  \n   ... or just:\n  \n       ./people : List ./Person\n-}\n```\n\n```haskell\n$
  cat make-item\n    -- You can define anonymous functions in Dhall using a backslash
  (i.e. `\\`)\n    \\(person : ./Person)  -- You can import any type or expression
  by its path\n\n    {- Dhall supports multiline strings that strip leading whitespace
  and Dhall\n       supports string interpolation, too, using `${...}` syntax\n    -}\n->
  \ ''\n    <li class=\"list-group-item\">\n      <span class=\"badge\">${Natural/show
  person.upvotes}</span>\n      ${person.name}\n    </li>\n    ''\n\n{- This file
  has type:\n  \n       ./make-item : ./Person -> Text\n-}\n```\n\n```haskell\n$ cat
  make-items\n-- You can also import any type or expression by its URL\nlet List/map
  = https://prelude.dhall-lang.org/List/map\n\nlet Text/concat = https://prelude.dhall-lang.org/Text/concat\n\nin
  \ \\(people : List ./Person) ->\n        Text/concat (List/map ./Person Text ./make-item
  people)\n\n{- This file has type:\n  \n       ./make-items : List ./Person -> Text\n-}\n```\n\nTemplating
  HTML is just ordinary function application:\n\n```bash\n$ dhall-to-text <<< './make-items
  ./people'\n<li class=\"list-group-item\">\n  <span class=\"badge\">14</span>\n  Maria\n</li>\n\n<li
  class=\"list-group-item\">\n  <span class=\"badge\">2</span>\n  Jordan\n</li>\n\n<li
  class=\"list-group-item\">\n  <span class=\"badge\">1</span>\n  Pranav\n</li>\n\n```\n\nTo
  learn more about the Dhall configuration language,\n[read the tutorial](https://hackage.haskell.org/package/dhall/docs/Dhall-Tutorial.html)\n"
license-name: BSD-3-Clause
