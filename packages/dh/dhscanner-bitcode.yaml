all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
author: OrenGitHub
basic-deps:
  aeson: '>=0'
  base: '>=4.17 && <=4.20'
  containers: '>=0'
  dhscanner-ast: '>=1.1.2'
changelog: ''
changelog-type: ''
description: |-
  The [intermediate language \/ intermediate representation \/ bitcode](https://en.wikipedia.org/wiki/Intermediate_representation#Intermediate_language)
  (IL \/ IR \/ bitcode) is a data structure able to represent code originating from /multiple/
  programming languages. Its main purpose is to enable an efficient and uniform /static code analysis/,
  as part of the [dhscanner](https://github.com/OrenGitHub/dhscanner) framework
  for [CI/CD](https://en.wikipedia.org/wiki/CI/CD) container security checks.
  As part of that framework, it targets mostly languages used for /cloud native applications/:
  __Python__, __Ruby__, __Php__, __Javascript__, __Typescript__, __Java__, __C#__ and __Golang__.
  Typically, a collection of files are first parsed using relevant
  [parsers](https://github.com/OrenGitHub/dhscanner.1.parsers), then,
  the resulting collection of abstract syntax trees is sent to code generation,
  where it is translated into a collection of /callables/.
  A callable is a sequence of commands corresponding to either a function, a method
  or (in languages like python) a script. The design of commands was done with simplicity
  in mind. The commands resemble an abstract RISC-style assembley, motivated by keeping
  later-phases analyses as simple as possible.
description-type: haddock
hash: c8ae9d554d92efe3f94207ccfe0709bfdff1fef76301875d19a9225ed1a28c80
homepage: https://github.com/OrenGitHub/dhscanner
latest: 1.0.9
license-name: GPL-3.0-only
maintainer: Oren Ish Shalom
synopsis: Intermediate language for static code analysis
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  containers: '>=0'
  dhscanner-ast: '>=0'
  dhscanner-bitcode: '>=0'
  random: '>=0'
