homepage: ''
changelog-type: markdown
hash: c353261af8d97bff7708e0f4a363289bf8ee51966fae56a3d7d6824f4665b981
test-bench-deps:
  http-client: -any
  serialise: -any
  either: -any
  bytestring: -any
  data-fix: -any
  base: ==4.*
  time: -any
  dhall: -any
  tasty-expected-failure: <0.13
  unordered-containers: -any
  text: '>=0.11.1.0 && <1.3'
  megaparsec: -any
  cborg: '>=0.2.0.0 && <0.3'
  filepath: <1.5
  doctest: '>=0.7.0 && <0.19'
  turtle: <1.6
  lens-family-core: -any
  gauge: '>=0.2.3 && <0.3'
  tasty-silver: <3.4
  containers: '>=0.5.0.0 && <0.7'
  special-values: <0.2
  mockery: <0.4
  quickcheck-instances: '>=0.3.12 && <0.4'
  generic-random: '>=1.3.0.0 && <1.6'
  http-client-tls: -any
  tasty-quickcheck: '>=0.9.2 && <0.11'
  spoon: <0.4
  foldl: <1.5
  tasty-hunit: '>=0.10 && <0.11'
  prettyprinter: -any
  transformers: -any
  temporary: '>=1.2.1 && <1.4'
  tasty: '>=0.11.2 && <1.5'
  deepseq: '>=1.2.0.1 && <1.5'
  scientific: -any
  QuickCheck: '>=2.10 && <2.15'
  template-haskell: -any
  vector: '>=0.11.0.0 && <0.13'
  directory: -any
maintainer: Gabriel439@gmail.com
synopsis: A configuration language guaranteed to terminate
changelog: "1.40.1\n\n* [BUG FIX: Fix equivalence check for `Date` / `Time` / `TimeZone`](https://github.com/dhall-lang/dhall-haskell/pull/2291)\n
  \   * This fixes a serious bug in the recently introduced support for temporal\n
  \     literals where they would fail to type-check when given a correct type\n      annotation
  or when they were checked against an existing type\n    * For example, `00:00:00
  : Time` was failing to type-check\n\n1.40.0\n\n* [Almost supports version 20.2.0
  of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v20.2.0)\n
  \   * The main thing that is missing is support for the `headers.dhall` file\n    *
  [BREAKING CHANGE TO THE LANGUAGE: Add support for `Date` / `Time` / `TimeZone` ](https://github.com/dhall-lang/dhall-haskell/pull/2247)\n
  \       * This is a breaking change because `Date`, `Time`, and `TimeZone` are\n
  \         now reserved identifiers\n    * [Improved fallback behavior for `?`](https://github.com/dhall-lang/dhall-haskell/pull/2203)\n*
  [BREAKING CHANGE TO THE LANGUAGE: Require whitespace before `with`](https://github.com/dhall-lang/dhall-haskell/pull/2213)\n
  \   * The parser now requires whitespace before the `with` keyword, which brings\n
  \     the Haskell implementation into closer compliance with the standard\n    *
  In practice this is a technically breaking change which will not affect\n      most
  programs\n* [New `FromDhall` instances for `Predicate`, `Equivalence`, and `Op`](https://github.com/dhall-lang/dhall-haskell/pull/2278)\n*
  [`dhall lint` will now sort `let` bindings with imports](https://github.com/dhall-lang/dhall-haskell/pull/2205)\n
  \   * `dhall lint` now reorders `let` bindings to move imports to the top so\n      long
  as doing so does not change the behavior of the program\n* Fixes and improvements
  to code formatting\n    * [#2280](https://github.com/dhall-lang/dhall-haskell/pull/2280)\n*
  Fixes and improvements to error messages\n    * [#2244](https://github.com/dhall-lang/dhall-haskell/pull/2244)\n
  \   * [#2238](https://github.com/dhall-lang/dhall-haskell/pull/2238)\n\n1.39.0\n\n*
  [Supports version 20.2.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v20.2.0)\n
  \   * [Add support for Unix shebangs](https://github.com/dhall-lang/dhall-haskell/pull/2175)\n*
  [BREAKING CHANGE TO THE API: `dhall {format,freeze,lint}` now accept multiple\n
  \ files](https://github.com/dhall-lang/dhall-haskell/pull/2169)\n    * The `--inplace`
  flag is no longer necessary and you can now specify\n      multiple files to update
  in place on the command line, like\n      `dhall format foo.dhall bar.dhall`\n    *
  The `--inplace` flag is still accepted, but does nothing, and will emit a\n      warning\n
  \   * This is a breaking change to the API for formatting/freezing/linting files\n
  \     because now you can specify multiple inputs instead of one input\n* [BREAKING
  CHANGE: Pre-6.0.0 hashes are no longer supported](https://github.com/dhall-lang/dhall-haskell/pull/2190)\n
  \   * The interpreter no longer provides backwards compatibility for integrity\n
  \     checks computed before standard version 6.0.0\n    * This is a breaking change
  to the API of the `Dhall.Binary` module, where\n      certain utilities are no longer
  parameterized on a `StandardVersion`\n    * This is also a breaking change to any
  Dhall code that depended on these\n      really old integrity checks\n* [BUG FIX:
  Formatting `≡` now correctly preserves the original character set](https://github.com/dhall-lang/dhall-haskell/pull/2176)\n*
  [BUG FIX: Don't panic on `Text/replace \"\"`](https://github.com/dhall-lang/dhall-haskell/pull/2184)\n*
  [Quasiquotation support for Dhall](https://github.com/dhall-lang/dhall-haskell/pull/2198)\n
  \   * You can now convert a Dhall expression to the corresponding syntax tree\n
  \     using a quasiquoter like this: `[dhall| \\x -> x + 2 ]`\n* [New `Dhall.Marshal.{Encode,Decode}`
  modules](https://github.com/dhall-lang/dhall-haskell/pull/2193)\n    * These modules
  split up the `Dhall` module into two smaller modules for\n      encoding and decoding
  logic, respectively\n    * The `Dhall` module still re-exports the same functionality
  as before, so\n      this is not a breaking change\n* [Support GHC 9.0.1](https://github.com/dhall-lang/dhall-haskell/pull/2154)\n*
  Fixes and improvements to code formatting\n    * [Improve pretty-printing of `sha256`](https://github.com/dhall-lang/dhall-haskell/pull/2189)\n\n1.38.1\n\n*
  [Add `INLINABLE` annotations in more places](https://github.com/dhall-lang/dhall-haskell/pull/2164)\n
  \   * This may improve performance by enabling more specializations\n* [Fix `hashable`-related
  test failures](https://github.com/dhall-lang/dhall-haskell/pull/2152)\n* [Fix support
  for GHC 8.4.4](https://github.com/dhall-lang/dhall-haskell/pull/2143)\n    * … by
  using `GeneralizedNewtypeDeriving` (with a `z`)\n* [Allow doctest-0.18](https://github.com/dhall-lang/dhall-haskell/pull/2148)\n*
  [Allow bytestring-0.11](https://github.com/dhall-lang/dhall-haskell/pull/2144)\n\n1.38.0\n\n*
  [BREAKING CHANGE: Detect preferred character set from input](https://github.com/dhall-lang/dhall-haskell/pull/2108)\n
  \   * `dhall format` will now preserve the character set of the formatted file\n
  \     by default.  In other words, if the file uses ASCII punctuation then\n      `dhall
  format` will format the file using ASCII punctuation.\n    * If the file contains
  both ASCII and Unicode punctuation it will prefer\n      Unicode by default\n    *
  This is a breaking change because the `Lam` / `Pi` / `Combine` /\n      `CombineTypes`,
  and `Prefer` constructors now take an additional argument\n      to record which
  character set was used\n* [BUG FIX: Fix CORS compliance check](https://github.com/dhall-lang/dhall-haskell/pull/2121)\n
  \   * Previous versions were not correctly enforcing CORS compliance\n    * This
  implies that some imports that would have worked previously by\n      accident will
  now fail; specifically: an import from one domain\n      transitively importing
  something from another domain that has not opted\n      into CORS\n* [Add `ToDhall
  (Fix f)` instance](https://github.com/dhall-lang/dhall-haskell/pull/2122)\n* Fixes
  and improvements to error messages\n    * [#2130](https://github.com/dhall-lang/dhall-haskell/pull/2130)\n\n1.37.1\n\n*
  [Fix performance regression for `with` expressions](https://github.com/dhall-lang/dhall-haskell/pull/2112)\n\n1.37.0\n\n*
  [Supports version 20.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v20.0.0)\n
  \   * [Implement revised `Text/replace` β-normalization](https://github.com/dhall-lang/dhall-haskell/pull/2072)\n
  \   * [Allow `Text/replace \"\"` to support an abstract haystack](https://github.com/dhall-lang/dhall-haskell/pull/2084)\n
  \   * [Support `if` expressions returning a type or kind](https://github.com/dhall-lang/dhall-haskell/pull/2080)\n*
  BREAKING CHANGE TO THE API: [Improve error message for duplicate projection label](https://github.com/dhall-lang/dhall-haskell/pull/2097)\n
  \   * This also makes the implementation more standards-compliant, by treating\n
  \     a duplicate label as a type error instead of a parse error\n    * This is
  a breaking change since the `Project` constructor now stores a\n      `[Text]` instead
  of `Set Text`\n* [Add `--cache` flag to `dhall hash`](https://github.com/dhall-lang/dhall-haskell/pull/2093)\n
  \   * This flag adds the hashed expression to the cache when enabled\n* [Deprecate
  `Inject` / `Interpret`](https://github.com/dhall-lang/dhall-haskell/pull/2099)\n
  \   * You should instead use `ToDhall` / `FromDhall`, respectively\n* Fixes and
  improvements to the haddocks:\n    * [#2098](https://github.com/dhall-lang/dhall-haskell/pull/2098)\n
  \   * [#2100](https://github.com/dhall-lang/dhall-haskell/pull/2100)\n* Fixes and
  improvements to error messages:\n    * [#2082](https://github.com/dhall-lang/dhall-haskell/pull/2082)\n
  \   * [#2095](https://github.com/dhall-lang/dhall-haskell/pull/2095)\n* Fixes and
  improvements to the parser:\n    * [#2083](https://github.com/dhall-lang/dhall-haskell/pull/2089)\n*
  Fixes and improvements to the pretty printer:\n    * [#2083](https://github.com/dhall-lang/dhall-haskell/pull/2083)\n
  \   * [#2101](https://github.com/dhall-lang/dhall-haskell/pull/2101)\n\n1.36.0\n\n*
  [Supports version 19.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v19.0.0)\n
  \   * BREAKING CHANGE TO THE API: [Add `Text/replace` built-in](https://github.com/dhall-lang/dhall-haskell/pull/2063)\n
  \   * [Implement `with` without syntactic sugar](https://github.com/dhall-lang/dhall-haskell/pull/2055)\n*
  [`dhall lint` will now add a `.dhall` extension to all Prelude imports](https://github.com/dhall-lang/dhall-haskell/pull/2061)\n
  \   * The old extension-free Prelude imports are deprecated\n* [Fix command-line
  completions for files](https://github.com/dhall-lang/dhall-haskell/pull/2016)\n*
  [Improve Template Haskell support for record constructors](https://github.com/dhall-lang/dhall-haskell/pull/2070)\n*
  Fixes and improvements to code formatting\n    * [#2037](https://github.com/dhall-lang/dhall-haskell/pull/2037)\n
  \   * [#2048](https://github.com/dhall-lang/dhall-haskell/pull/2048)\n    * [#2069](https://github.com/dhall-lang/dhall-haskell/pull/2069)\n\n1.35.0\n\n*
  [Supports version 18.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v18.0.0)\n
  \   * [Implement more efficient `with` desugaring](https://github.com/dhall-lang/dhall-haskell/pull/1993)\n
  \       * Chained `with` expressions will now be much more efficient\n* [BREAKING
  CHANGE TO THE API: Preserve whitespace for `Lam` constructor](https://github.com/dhall-lang/dhall-haskell/pull/1980)\n
  \   * This change extends the `Lam` constructor to preserve whitespace around\n
  \     the variable binding\n    * The motivation for this change is to enable `dhall-docs`
  to support\n      jumping to definitions\n    * You can replace your existing `Lam`
  constructors with\n      `Dhall.Core.makeFunctionBinding`\n* [BREAKING CHANGE TO
  THE API: Preserve whitespace for `Field` constructors](https://github.com/dhall-lang/dhall-haskell/pull/1991)\n
  \   * This change extends the `Field` constructor to preserve whitespace around\n
  \     the selected field\n    * The motivation for this change is to enable `dhall-docs`
  to support\n      jumping to definitions\n    * You can use `Dhall.Core.makeFieldSelection`
  and\n      `Dhall.Core.fieldSelectionLabel` to convert between the detailed and
  the\n      simple representation of the selected field.\n* [Add `FromDhall` instances
  for `{Int,Word}{,8,16,32,64}`](https://github.com/dhall-lang/dhall-haskell/pull/2012)\n*
  [Add `--output` option for `dhall text` subcommand](https://github.com/dhall-lang/dhall-haskell/pull/1974)\n*
  [Add `Dhall.Crypto.toString`](https://github.com/dhall-lang/dhall-haskell/pull/1976)\n*
  [Make the HTTP `Manager` configurable](https://github.com/dhall-lang/dhall-haskell/pull/2027)\n
  \   * Several import-related functions now provide an alternative variants that\n
  \     allows the user to supply a custom `Manager`\n    * You can use this to tweak
  HTTP request timeouts or use a different TLS\n      manager (e.g. one from `http-client-openssl`)\n*
  Fixes and improvements to code formatting\n    * [#2000](https://github.com/dhall-lang/dhall-haskell/pull/2000)\n
  \   * [#2021](https://github.com/dhall-lang/dhall-haskell/pull/2021)\n\n      The
  formatter now preserves comments for record fields (both record types\n      and
  record literals)\n* Fixes and improvements to documentation\n    * [#2011](https://github.com/dhall-lang/dhall-haskell/pull/2011)\n
  \   * [#2013](https://github.com/dhall-lang/dhall-haskell/pull/2013)\n    * [#2014](https://github.com/dhall-lang/dhall-haskell/pull/2014)\n*
  Fixes and improvements to test suite\n    * [#2020](https://github.com/dhall-lang/dhall-haskell/pull/2020)\n\n1.34.0\n\n*
  [Supports version 17.1.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v17.1.0)\n
  \   * [Add support for trailing commas](https://github.com/dhall-lang/dhall-haskell/pull/1885)\n*
  BREAKING CHANGE to the API: [Support prefix comments on record key-value pairs](https://github.com/dhall-lang/dhall-haskell/pull/1908)\n
  \   * The Dhall AST (i.e. `Expr`) now preserves some comments for record types\n
  \     and record literals\n    * The impact of this change is that you will need
  to add\n      `Dhall.Syntax.makeRecordField` or `Dhall.Syntax.recordFieldValue`
  in a few\n      places wherever your Haskell assembles or disassembles record expressions\n
  \   * The motivation of this change is two-fold:\n        * To eventually enable
  `dhall-docs` support for rendering record\n          comments as documentation\n
  \       * To eventually enable support for preserving record-related comments\n
  \         when formatting Dhall code\n* BUG FIX: [Fix `with` expressions to permit
  functions on their left-hand side](https://github.com/dhall-lang/dhall-haskell/pull/1897)\n
  \   * This was a case of the Haskell implementation not being compliant with the\n
  \     standard grammar\n* [Drop support for GHC 8.2](https://github.com/dhall-lang/dhall-haskell/pull/1949)\n*
  [Add a new `dhall rewrite-with-schemas` command](https://github.com/dhall-lang/dhall-haskell/pull/1902)\n
  \   * You can now simplify a Dhall expression using a schema record (e.g. a\n      `./schemas.dhall`
  record that a package might provide)\n    * This simplification replaces large anonymous
  records with an\n      equivalent use of a record completion when possible\n* [Add
  `--transitive` flag to `dhall {format,lint,freeze}](https://github.com/dhall-lang/dhall-haskell/pull/1880)\n
  \   * This flag lets you format/lint/freeze a file and all of its transitive\n      dependencies
  that are reachable via relative file imports\n* [Move `man/dhall.1` to `data-files`](https://github.com/dhall-lang/dhall-haskell/pull/1921)\n
  \   * This ensures that Cabal will install `dhall`'s `man` pages in the\n      correct
  directory\n* Performance improvements\n    * [#1879](https://github.com/dhall-lang/dhall-haskell/pull/1879)\n*
  Standards compliance\n    * [#1953](https://github.com/dhall-lang/dhall-haskell/pull/1953)\n
  \   * [#1954](https://github.com/dhall-lang/dhall-haskell/pull/1954)\n    * [#1956](https://github.com/dhall-lang/dhall-haskell/pull/1956)\n
  \   * [#1957](https://github.com/dhall-lang/dhall-haskell/pull/1957)\n    * [#1958](https://github.com/dhall-lang/dhall-haskell/pull/1958)\n*
  Fixes and improvements to haddocks\n    * [#1881](https://github.com/dhall-lang/dhall-haskell/pull/1881)\n
  \   * [#1955](https://github.com/dhall-lang/dhall-haskell/pull/1955)\n\n1.33.1\n\n*
  [Multi-line REPL / support `repline-0.4.0.0`](https://github.com/dhall-lang/dhall-haskell/pull/1867)\n
  \   * `dhall repl` supports a new `:paste` command that lets you input a command\n
  \      by pasting one or more lines\n\n1.33.0\n\n* [Supports version 17.0.0 of the
  standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v17.0.0)\n    *
  BREAKING CHANGE: [URLs no longer support quoted path components](https://github.com/dhall-lang/dhall-haskell/pull/1812)\n
  \   * BREAKING CHANGE: [`Optional/{fold,build}` are no longer built-ins](https://github.com/dhall-lang/dhall-haskell/pull/1802)\n
  \   * [Record fields now permit empty labels](https://github.com/dhall-lang/dhall-haskell/pull/1812)\n*
  BREAKING CHANGE: [Fail instead of hanging when deriving `FromDhall` for recursive
  types](https://github.com/dhall-lang/dhall-haskell/pull/1825)\n    * This is a breaking
  change as now the `expected` type returns an\n      `Expector (Expr Src Void)` (essentially
  an `Either`) instead of\n      `Expr Src Void`\n    * If you really don't want to
  handle the new error-related wrapper, you can\n      get the old behavior using
  a partial pattern match (which will be partial,\n      still an improvement over
  the previous behavior, which was hanging)\n* [Fix invalid cache entries](https://github.com/dhall-lang/dhall-haskell/pull/1793)\n
  \   * The interpreter will now correct cached expressions that are incorrect\n      and
  warn you when this happens\n    * Specifically, if there is a hash mismatch from
  the cached expression the\n      interpreter will resolve the import again and fix
  the cache if the\n      resolved import matches the expected hash\n* [Make `encodeExpression`
  polymorphic](https://github.com/dhall-lang/dhall-haskell/pull/1789)\n    * `encodeExpression`
  now has a more general type, which means that you\n      can use it to serialise
  expressions without imports (i.e.\n      ones of type `Expr Void Void`)\n* [Add
  `--quiet` option for `dhall decode`](https://github.com/dhall-lang/dhall-haskell/pull/1803)\n*
  [Add `--noted` flag for `dhall haskell-syntax-tree`](https://github.com/dhall-lang/dhall-haskell/pull/1843)\n*
  Performance improvements:\n    * There were several performance improvements related
  to binary decoding,\n      which should improve cache lookup speed\n    * [#1807](https://github.com/dhall-lang/dhall-haskell/pull/1807)\n
  \   * [#1809](https://github.com/dhall-lang/dhall-haskell/pull/1809)\n    * [#1857](https://github.com/dhall-lang/dhall-haskell/pull/1857)\n*
  Improvements to error messages\n    * [#1824](https://github.com/dhall-lang/dhall-haskell/pull/1824)\n
  \   * [#1849](https://github.com/dhall-lang/dhall-haskell/pull/1849)\n    * [#1851](https://github.com/dhall-lang/dhall-haskell/pull/1851)\n*
  Fixes to haddocks\n    * [#1815](https://github.com/dhall-lang/dhall-haskell/pull/1815)\n\n1.32.0\n\n*
  [Supports version 16.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v16.0.0)\n
  \   * BREAKING CHANGE: Change the precedence of `with` and `===`\n        * The
  precedence change to `with` means that some old expressions that\n          were
  valid now require explicit parentheses\n    * BREAKING CHANGE: Use RFC7049bis encoding
  for `Double`s\n        * This is a breaking change because the hashes of expressions
  with small\n          `Double` literals will change now\n    * Add support for unions
  mixing terms and types\n        * For example, `< A : Bool | B : Type >` is legal
  now\n        * You can now write `someRecord with a.b.c = x` to update a nested\n
  \         fields\n* DEPRECATION: [Deprecate `Dhall.Parser.exprA`](https://github.com/dhall-lang/dhall-haskell/pull/1740)\n
  \   * `Dhall.Parser` module will eventually drop support for parsing custom\n      import
  types\n    * This is necessary in order to fix several parsing bugs and improve\n
  \     parsing error messages\n* BUG FIX: [GHC Generics instance for `:+:` now uses
  `union`](https://github.com/dhall-lang/dhall-haskell/pull/1725)\n    * This fixes
  a few subtle bugs in how Dhall unions are marshalled into\n      Haskell types,
  and also improves the error messages\n* Formatting improvements\n    * [Change formatting
  of `if` expressions](https://github.com/dhall-lang/dhall-haskell/pull/1767)\n    *
  [Change formatting for functions and their types](https://github.com/dhall-lang/dhall-haskell/pull/1759)\n
  \   * [Prefer puns when formatting record completions](https://github.com/dhall-lang/dhall-haskell/pull/1736)\n*
  [Convert union alternatives to directory tree](https://github.com/dhall-lang/dhall-haskell/pull/1757)\n
  \   * `dhall to-directory-tree` now supports unions which are automatically\n      unwrapped\n*
  [Fix `dhall freeze --cache` to better handle protected imports](https://github.com/dhall-lang/dhall-haskell/pull/1772)\n
  \   * `dhall freeze --cache` will now also update imports that already have\n      integrity
  checks\n* [Don't normalized partially saturated `{List,Natural}/fold`](https://github.com/dhall-lang/dhall-haskell/pull/1742)\n
  \   * The behavior now matches the standard.  Previously, the Haskell\n      implementation
  was not standards-compliant because it would normalize\n      these partially saturated
  built-ins\n\n1.31.1\n\n* BUG FIX: [Allow whitespace after record pun entry](https://github.com/dhall-lang/dhall-haskell/pull/1733)\n
  \   * The record pun feature introduced in the previous release did not\n      correctly
  parse record puns with trailing whitespace, which this change\n      fixes.\n* [Expose
  `{default,}InputNormalizer`](https://github.com/dhall-lang/dhall-haskell/pull/1727)\n
  \   * The previous version introduced a breaking change to the `autoWith` type\n
  \     that required access to the implementation of `InputNormalizer`, which was\n
  \     not exported.  This change fixes that.\n* Build against latest dependencies\n
  \   * [`QuickCheck-2.14`](https://github.com/dhall-lang/dhall-haskell/pull/1721)\n
  \   * [`haskell-lsp-0.21`](https://github.com/dhall-lang/dhall-haskell/pull/1730)\n
  \   * [`repline-0.3` / `haskeline-0.8`](https://github.com/dhall-lang/dhall-haskell/pull/1717)\n
  \   * [`template-haskell-2.16`](https://github.com/dhall-lang/dhall-haskell/pull/1719)\n*
  [Prefer to format using record puns when possible](https://github.com/dhall-lang/dhall-haskell/pull/1729)\n
  \   * `dhall format` will now reformat code to use record puns when applicable\n*
  Fixes and improvements to error messages:\n    * [#1721](https://github.com/dhall-lang/dhall-haskell/pull/1724)\n\n1.31.0\n\n*
  [Supports version 15.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v15.0.0)\n
  \   * [Implement `with` keyword](https://github.com/dhall-lang/dhall-haskell/pull/1685)\n
  \       * You can now write `someRecord with a.b.c = x` to update a nested\n          fields\n
  \   * [Add support for record puns](https://github.com/dhall-lang/dhall-haskell/pull/1710)\n
  \       * You can now write `{ x, y }` as a shorthand for `{ x = x, y = y }`\n*
  BREAKING CHANGE TO THE API: [Auto-derive `Generic`/`FromDhall`/`ToDhall` with Template
  Haskell](https://github.com/dhall-lang/dhall-haskell/pull/1682)\n    * Now the `Dhall.TH.makeHaskell*`
  utilities will include these derived\n      instances in the generated declarations\n
  \   * This is a breaking change since users were likely already generating these\n
  \     instances separately, which will now conflict with the included instances\n*
  BREAKING CHANGE TO THE API: [`From/ToDhall` no longer takes `InterpretOptions` argument](https://github.com/dhall-lang/dhall-haskell/pull/1696)\n
  \   * The types of the `autoWith` and `injectWith` methods have changed to\n      take
  an `InputNormalizer` instead of an `InterpretOptions`\n        * Note that `InputNormalizer`
  is a subset of `InterpretOptions`\n    * This is a breaking change to how derived
  `FromDhall` / `ToDhall` instances\n      are customized to more closely match how
  other Haskell packages customize\n      derived instances (e.g. `aeson` with `FromJSON`
  / `ToJSON`)\n        * Previously you would customize the behavior globally by passing
  in\n          a top-level `InterpretOptions` record to `autoWith`\n        * Now
  you can customize the behavior locally on a per-instance basis\n    * This change
  enables the following change ...\n* [Add `Dhall.Deriving` module for `deriving-via`
  helpers](https://github.com/dhall-lang/dhall-haskell/pull/1700)\n    * Now you can
  take advantage of the `-XDerivingVia` language extension to\n      customize derived
  `FromDhall`/`ToDhall` instances, like this:\n        * `deriving (FromDhall, ToDhall)
  via Codec (SetSingletonConstructors Bare) Name`\n* BREAKING CHANGE TO THE LANGUAGE:
  [Match standard with respect to `using toMap`](https://github.com/dhall-lang/dhall-haskell/pull/1673)\n
  \   * `https://example.com using toMap customHeaders` is now a parse error\n      and
  needs to be explicitly parenthesized as\n      `https://example.com using (toMap
  customHeaders)`\n    * The language standard had always required the parentheses,
  but the Haskell\n      implementation was not correctly matching the standard\n*
  [Fix formatting of indented comments containing empty lines](https://github.com/dhall-lang/dhall-haskell/pull/1688)\n
  \   * `dhall format` was previously not idempotent when formatting indented\n      comments
  with empty lines\n    * Specifically, the formatter kept indenting things further
  with each\n      format, which this change fixes\n* [Fix pretty-printer to preserve
  original numeric literals](https://github.com/dhall-lang/dhall-haskell/pull/1674)\n
  \   * Now `dhall format` will preserve numeric literals exactly how you wrote\n
  \     them\n    * For example, `0xFF` will no longer be reformatted as `255`\n*
  [Add `dhall to-directory-tree` support for `Map`s](https://github.com/dhall-lang/dhall-haskell/pull/1705)\n
  \   * `Map`s are now converted to directories (just like records)\n* [Add manpage](https://github.com/dhall-lang/dhall-haskell/pull/1677)\n
  \   * ... mainly for the benefit of people packaging Dhall for various\n      distributions\n*
  [Group commands in CLI](https://github.com/dhall-lang/dhall-haskell/pull/1692)\n
  \   * The command-line `--help` output now groups commands into useful\n      sections\n*
  [Fix numeric parsing for GHCJS](https://github.com/dhall-lang/dhall-haskell/pull/1681)\n
  \   * The GHCJS backend for Dhall was failing to parse numbers, which this\n      change
  fixes\n* Fixes and improvements to error messages:\n    * [#1656](https://github.com/dhall-lang/dhall-haskell/pull/1656)\n
  \   * [#1698](https://github.com/dhall-lang/dhall-haskell/pull/1698)\n    * [#1702](https://github.com/dhall-lang/dhall-haskell/pull/1702)\n*
  Fixes and improvements to the haddocks:\n    * [#1708](https://github.com/dhall-lang/dhall-haskell/pull/1708)\n
  \   * [#1712](https://github.com/dhall-lang/dhall-haskell/pull/1712)\n\n1.30.0\n\n*
  [Supports version 14.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v14.0.0)\n*
  BREAKING CHANGE TO THE API: [Add `--check` flag to `dhall {lint,freeze}`](https://github.com/dhall-lang/dhall-haskell/pull/1636)\n
  \   * You can now use the `--check` flag to verify that a file has already been\n
  \     linted or frozen\n    * This is a breaking change to the types used by the
  `Dhall.Format` module\n* BREAKING CHANGE TO THE LANGUAGE: [Disallow `Natural` literals
  with leading zeros](https://github.com/dhall-lang/dhall-haskell/pull/1658)\n    *
  Now a literal like `042` is no longer valid\n    * See the [changelog for standard
  version 14.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v14.0.0) for
  more details\n* BUG FIX: [Fix parsing of `Double` literal trailing whitespace](https://github.com/dhall-lang/dhall-haskell/pull/1647)\n
  \   * Certain expressions using `Double` literals would fail to parse, which this\n
  \     change fixes\n* BUG FIX: [Use `DeriveLift` instead of GHC Generics to derive
  `Lift` ](https://github.com/dhall-lang/dhall-haskell/pull/1640)\n    * This fixes
  a build failure on GHC 8.10\n* [Drop support for GHC 7.10.3](https://github.com/dhall-lang/dhall-haskell/pull/1649)\n
  \   * GHC 8.0.2 is now the earliest supported version\n* [Add support for dotted
  field syntax](https://github.com/dhall-lang/dhall-haskell/pull/1651)\n    * `{ x.y.z
  = 1 }` now legal syntax for nested fields\n    * See the [changelog for standard
  version 14.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v14.0.0) for
  more details\n* [Add support for duplicate record fields](https://github.com/dhall-lang/dhall-haskell/pull/1643)\n
  \   * This combines with the previous feature to let you write\n      `{ x.y = 1,
  x.z = True }`, which is equivalent to\n      `{ x = { y = 1, z = True } }`\n    *
  See the [changelog for standard version 14.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v14.0.0)
  for more details\n* [Add `dhall lint` support for deprecating `Optional/{fold,build}`](https://github.com/dhall-lang/dhall-haskell/pull/1628)\n
  \   * The `Optional/{fold,build}` built-ins are deprecated and can be implemented\n
  \     in terms of other language features\n    * `Optional/fold` can be implemented
  in terms of `merge` (which now works on\n      `Optional` values)\n    * `Optional/build`
  could always be implemented using `Some`/`None`\n    * `dhall lint` now transforms
  the deprecated built-ins to use their\n      equivalent built-in-free versions\n*
  [Support Template Haskell for multiple datatypes](https://github.com/dhall-lang/dhall-haskell/pull/1664)\n
  \   * This extends the Template Haskell support added in the previous release to\n
  \     work for datatypes that refer to one another\n* [Add support for custom substitutions](https://github.com/dhall-lang/dhall-haskell/pull/1650)\n
  \   * You can now add custom substitutions, which are like `let` bindings that\n
  \     propagate to transitive imports\n* [Small formatting fixes](https://github.com/dhall-lang/dhall-haskell/pull/1652)\n\n1.29.0\n\n*
  [Supports version 13.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v13.0.0)\n*
  BREAKING CHANGE: [Generate Haskell datatype declarations from Dhall types](https://github.com/dhall-lang/dhall-haskell/commit/b0280826790930d18a5498fb802120478fa11767#diff-a9729dccf50be61ce3d8c68c16f0fd50)\n
  \   * You can now use the `makeHaskellTypeFromUnion` Template Haskell utility\n
  \     to generate a Haskell datatype declaration from a Dhall union type\n    *
  This helps ensure that your Haskell types and Dhall types stay in sync,\n      when
  you want the Dhall type to be the source of truth\n    * This is a breaking change
  because the default `InterpretOptions` changed\n      the default handling of singleton
  constructors from `Wrapped` to `Smart`\n    * You can preserve the old behavior
  using:\n      `autoWith defaultInterpretOptions{ singletonConstructors = Wrapped
  }`\n* BUG FIX: [Fix `dhall freeze --cache` and `dhall lint` to preserve `let`-related
  comments](https://github.com/dhall-lang/dhall-haskell/pull/1597)\n    * Now they
  match the behavior of `dhall format` with regard to preserving\n      these comments\n*
  BUG FIX: [Fix escaping of significant leading whitespace when formatting code](https://github.com/dhall-lang/dhall-haskell/pull/1598)\n
  \   * The formatter would sometimes unnecessarily escape significant leading\n      whitespace
  for the final line of multiline string literals, which this\n      change fixes\n*
  BUG FIX: [Fix `dhall encode --json` for `Double` values](https://github.com/dhall-lang/dhall-haskell/issues/1350)\n*
  NEW FEATURE: [`dhall to-directory-tree` command](https://github.com/dhall-lang/dhall-haskell/pull/1606)\n
  \   * You can now generate a directory tree from a Dhall expression\n    * Specifically:\n
  \       * records are converted to directories\n        * `Text` fields are converted
  to files named after the field\n        * `Optional` values are omitted if `None`\n
  \       * Everything else is rejected\n* NEW FEATURE: [Hexadecimal literals](https://github.com/dhall-lang/dhall-haskell/pull/1607)\n
  \   * See the [changelog for standard version 13.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v13.0.0)
  for more details\n* NEW FEATURE: [`merge` works on `Optional` values](https://github.com/dhall-lang/dhall-haskell/pull/1608)\n
  \   * See the [changelog for standard version 13.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v13.0.0)
  for more details\n* [Improve formatter](https://github.com/dhall-lang/dhall-haskell/pull/1609)\n
  \   * `dhall format` will now render expressions nested inside record fields or\n
  \     alternatives more compactly, including:\n        * Records\n        * Record
  completion expressions\n        * Expressions wrapped in `Some`\n        * Lists\n*
  [Exclude the `using ...` suffix from imports listed by `dhall resolve`](https://github.com/dhall-lang/dhall-haskell/pull/1603)\n
  \   * Specifically when using the `--{immediate,transitive}-dependencies` flags\n\n1.28.0\n\n*
  [Supports version 12.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v12.0.0)\n*
  BREAKING CHANGE: [Add `Integer/{clamp,negate}` built-ins](https://github.com/dhall-lang/dhall-haskell/pull/1486)\n
  \   * This is a technically breaking change API since this adds a new\n      constructor
  to the `Expr` type\n    * This is also a technically breaking change to the language.
  \ See the [changelog for standard version 12.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v12.0.0)
  for more details\n* BREAKING CHANGE: [Remove support for fusion](https://github.com/dhall-lang/dhall-haskell/pull/1478)\n
  \   * This is also a technically breaking change to the language.  See the [changelog
  for standard version 12.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v12.0.0)
  for more details\n* BREAKING CHANGE: [Parse whitespace more precisely](https://github.com/dhall-lang/dhall-haskell/pull/1483)\n
  \   * The Haskell implementation now matches the official grammar much more\n      closely,
  but as a result will now reject some programs that it used to\n      accept\n    *
  For example, `1:Natural` used to be valid and now is no longer valid as\n      the
  standard requires mandatory whitespace after the `:`\n    * Consult the [standard
  grammar](https://github.com/dhall-lang/dhall-lang/blob/master/standard/dhall.abnf)
  if you run into a new parsing error as a result of this change\n    * This is also
  a parsing performance regression (specifically for parsing\n      comments), but
  should not be noticeable in practice.  See [#1512](https://github.com/dhall-lang/dhall-haskell/pull/1512)
  for more details\n* BREAKING CHANGE: Rename `Type` to `Decoder` and `InputType`
  to `Encoder` [#1483](https://github.com/dhall-lang/dhall-haskell/pull/1485) / [#1489](https://github.com/dhall-lang/dhall-haskell/pull/1489)\n*
  BUG FIX: [Fix `dhall format --check`](https://github.com/dhall-lang/dhall-haskell/pull/1462)\n
  \   * Before this change `dhall format --check` would fail due to attempting to\n
  \     read all of standard input in twice\n* BUG FIX: [Fix `dhall freeze` to always
  re-freeze an import](https://github.com/dhall-lang/dhall-haskell/pull/1471)\n    *
  Before this fix, `dhall freeze` would not attempt to refreeze an already\n      frozen
  import\n* [Permit spaces around completion operator](https://github.com/dhall-lang/dhall-haskell/pull/1532)\n
  \   * See the [changelog for standard version 12.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v12.0.0)
  for more details\n* [Make `missing` referentially transparent](https://github.com/dhall-lang/dhall-haskell/pull/1509)\n
  \   * `missing` can now be imported transitively via a remote import\n    * Normally
  resolving `missing` would still still fail, except for\n      `missing as Location`,
  which is now a valid transitive import\n    * See the [changelog for standard version
  12.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v12.0.0) for more
  details\n* [Write cache files atomically](https://github.com/dhall-lang/dhall-haskell/pull/1544)\n
  \   * This is a resilience improvement so that the cache is not left in a\n      corrupt
  state in the event of a power outage or exhausting disk/memory\n* [New `Dhall.function`
  utility](https://github.com/dhall-lang/dhall-haskell/pull/1507)\n    * This is provides
  the same functionality as the `Interpret` instance for\n      `(->)`, except without
  the use of typeclasses\n* [New `dhall haskell-syntax-tree` command](https://github.com/dhall-lang/dhall-haskell/pull/1553)\n
  \   * This command displays the Haskell syntax tree of an expression\n      (primarily
  for debugging purposes)\n    * Note that this is highly-volatile and subject to
  change, so don't depend\n      on this programmatically.  We may break the output
  of this command without\n      any notice.\n* [Add `instance Show Ann`](https://github.com/dhall-lang/dhall-haskell/pull/1567)\n*
  [Move normalization code from `Dhall.Core` to `Dhall.Normalize`](https://github.com/dhall-lang/dhall-haskell/pull/1452)\n
  \   * Note that this is not a breaking change.  The relocated utilities are\n      still
  re-exported from `Dhall.Core`\n* [Fix `dhall resolve --transitive-dependencies`
  to list dependencies in \"post-order\"](https://github.com/dhall-lang/dhall-haskell/pull/1539)\n*
  Performance improvements\n    * [#1500](https://github.com/dhall-lang/dhall-haskell/pull/1500)\n
  \   * [#1522](https://github.com/dhall-lang/dhall-haskell/pull/1522)\n    * [#1568](https://github.com/dhall-lang/dhall-haskell/pull/1568)\n
  \   * [#1580](https://github.com/dhall-lang/dhall-haskell/pull/1578)\n* Fixes and
  improvements to code formatting\n    * [#1460](https://github.com/dhall-lang/dhall-haskell/pull/1460)\n
  \   * [#1466](https://github.com/dhall-lang/dhall-haskell/pull/1466)\n    * [#1508](https://github.com/dhall-lang/dhall-haskell/pull/1508)\n
  \   * [#1527](https://github.com/dhall-lang/dhall-haskell/pull/1527)\n    * [#1422](https://github.com/dhall-lang/dhall-haskell/pull/1422)\n
  \   * [#1552](https://github.com/dhall-lang/dhall-haskell/pull/1552)\n    * [#1543](https://github.com/dhall-lang/dhall-haskell/pull/1543)\n
  \   * [#1554](https://github.com/dhall-lang/dhall-haskell/pull/1554)\n    * [#1569](https://github.com/dhall-lang/dhall-haskell/pull/1569)\n*
  Fixes and improvements to code linting\n    * [#1518](https://github.com/dhall-lang/dhall-haskell/pull/1518)\n
  \   * [#1531](https://github.com/dhall-lang/dhall-haskell/pull/1531)\n* Fixes and
  improvements to error messages\n    * [#1443](https://github.com/dhall-lang/dhall-haskell/pull/1443)\n
  \   * [#1448](https://github.com/dhall-lang/dhall-haskell/pull/1448)\n    * [#1482](https://github.com/dhall-lang/dhall-haskell/pull/1482)\n
  \   * [#1519](https://github.com/dhall-lang/dhall-haskell/pull/1519)\n    * [#1556](https://github.com/dhall-lang/dhall-haskell/pull/1556)\n
  \   * [#1528](https://github.com/dhall-lang/dhall-haskell/pull/1528)\n* Fixes and
  improvements to the parser\n    * [#1473](https://github.com/dhall-lang/dhall-haskell/pull/1473)\n
  \   * [#1549](https://github.com/dhall-lang/dhall-haskell/pull/1549)\n    * [#1563](https://github.com/dhall-lang/dhall-haskell/pull/1563)\n
  \   * [#1584](https://github.com/dhall-lang/dhall-haskell/pull/1584)\n* Fixes and
  improvements to diffs\n    * [#1585](https://github.com/dhall-lang/dhall-haskell/pull/1585)\n*
  Fixes and improvements to the REPL\n    * [#1573](https://github.com/dhall-lang/dhall-haskell/pull/1573)\n*
  Fixes and improvements to documentation\n    * [#1530](https://github.com/dhall-lang/dhall-haskell/pull/1530)\n\n1.27.0\n\n*
  [Supports version 11.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v11.0.0)\n*
  BREAKING CHANGE: Rename `Inject`/`Interpret` to `ToDhall`/`FromDhall`\n    * This
  change `ConstraintKinds` to minimize disruption by keeping around\n      `Inject`/`Interpret`
  as synonyms for `ToDhall`/`FromDhall`\n    * In other words, constraints and derived
  instances using `Inject` or\n      `Interpret` will still work\n    * However, manual
  instances using `Inject` or `Interpret` won't work\n      unless you rename them
  to `ToDhall`/`FromDhall` or enable the\n      `TypeSynonymInstances` extension\n*
  BREAKING CHANGE: Fix `Eq` instance for `Expr`s with special `Double`s\n    * This
  fixes the `Eq` instance for `Expr`s to match the standard regarding\n      `Double`
  comparisons\n    * Specifically: `NaN == NaN` and `-0.0 /= 0.0`\n    * This is a
  breaking change because the `DoubleLit` constructor of `Expr`\n      now stores
  a `DhallDouble` instead of a `Double`\n* BREAKING CHANGE: [Add `--file` option for
  `dhall hash`](https://github.com/dhall-lang/dhall-haskell/pull/1445)\n    * This
  is a breaking change because it also removes the `Dhall.Hash` module,\n      which
  wasn't really carrying its own weight\n* [Add support for leading separators](https://github.com/dhall-lang/dhall-haskell/pull/1355)\n
  \   * See the [changelog for standard version 11.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v11.0.0)
  for more details\n* [Add record completion operator](https://github.com/dhall-lang/dhall-haskell/pull/1375)\n
  \   * See the [changelog for standard version 11.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v11.0.0)
  for more details\n* [Add `dhall tags` subcommand](https://github.com/dhall-lang/dhall-haskell/pull/1398)\n
  \   * This generates an ETags file from an input file or directory\n* [Add `dhall
  lint` support for fixing malformed assertions](https://github.com/dhall-lang/dhall-haskell/pull/1353)\n
  \   * `dhall lint` now fixes `let example = foo === bar` to be\n       `let example
  = assert : foo === bar`\n* Normalize inferred types [#1337](https://github.com/dhall-lang/dhall-haskell/pull/1337)\n*
  New `FromDhall`/`ToDhall` (previously `Interpret`/`Inject`) instances for:\n    *
  [`Void`](https://github.com/dhall-lang/dhall-haskell/pull/1382)\n    * `Map` [#1391](https://github.com/dhall-lang/dhall-haskell/pull/1391)
  / [#1412](https://github.com/dhall-lang/dhall-haskell/pull/1412)\n    * [`HashMap`](https://github.com/dhall-lang/dhall-haskell/pull/1426)\n
  \   * [`Set` and `HashSet`](https://github.com/dhall-lang/dhall-haskell/pull/1405)\n
  \   * [`()`](https://github.com/dhall-lang/dhall-haskell/pull/1388)\n* [Add `--output`
  option to `dhall`](https://github.com/dhall-lang/dhall-haskell/pull/1399)\n* [Move
  syntax things from `Dhall.Core` to a new `Dhall.Syntax` module](https://github.com/dhall-lang/dhall-haskell/pull/1440)\n
  \   * This is not a breaking change.  `Dhall.Core` still re-exports the same\n      API
  as before\n* Performance improvements\n    * [#1362](https://github.com/dhall-lang/dhall-haskell/pull/1362)\n
  \   * [#1366](https://github.com/dhall-lang/dhall-haskell/pull/1366)\n    * [#1368](https://github.com/dhall-lang/dhall-haskell/pull/1368)\n
  \   * [#1397](https://github.com/dhall-lang/dhall-haskell/pull/1397)\n    * [#1401](https://github.com/dhall-lang/dhall-haskell/pull/1401)\n*
  Fixes and improvements to code formatting\n    * [#1360](https://github.com/dhall-lang/dhall-haskell/pull/1360)\n
  \   * [#1372](https://github.com/dhall-lang/dhall-haskell/pull/1372)\n    * [#1380](https://github.com/dhall-lang/dhall-haskell/pull/1380)\n
  \   * [#1415](https://github.com/dhall-lang/dhall-haskell/pull/1415)\n\n1.26.1\n\n*
  TECHNICALLY BREAKING CHANGES: [Simplify `⫽` within projection](https://github.com/dhall-lang/dhall-haskell/pull/1283)
  / [Simplify nested record projections](https://github.com/dhall-lang/dhall-haskell/pull/1307)\n
  \   * These are technically breaking changes because you will need to update\n      integrity
  checks that protect code simplified in this way\n    * We're not bumping the major
  version since the likelihood that you're\n      affected is quite low\n* BUG FIX:
  [Fix performance regression](https://github.com/dhall-lang/dhall-haskell/pull/1335)\n
  \   * This change fixes the performance regression introduced in the previous\n
  \     release (version 1.26.0)\n* BUG FIX: [Prevent REPL from inserting inferred
  `Sort`s into context](https://github.com/dhall-lang/dhall-haskell/pull/1318)\n    *
  This protects the REPL from getting hosed if you define an expression\n      using
  `:let` that has an inferred type of `Sort`\n* NEW FEATURE: Improved `Inject`/`Interpret`
  support for 1-field constructors - ([#1315](https://github.com/dhall-lang/dhall-haskell/pull/1315)
  / [#1321](https://github.com/dhall-lang/dhall-haskell/pull/1321))\n    * This adds
  a new `singletonConstructors` field to `InterpretOptions` that\n      lets you control
  what Dhall type 1-field Haskell constructors correspond\n      to\n    * The default
  (`Wrapped`) is backwards compatible with the old behavior\n    * The `Smart` option
  is probably what you want: it will strip the\n      Haskell constructor from the
  Dhall type if the constructor has one\n      anonymous field\n    * The `Bare` option
  always strips 1-field Haskell constructors from the\n      Dhall type\n* NEW FEATURE:
  `--censor` flag that disables source code display ([#1312](https://github.com/dhall-lang/dhall-haskell/pull/1312)
  / [#1329](https://github.com/dhall-lang/dhall-haskell/pull/1329))\n    * Use this
  flag when you don't want sensitive `Text` literals showing up in\n      parsing
  or type-checking error messages\n* [Format record fields more compactly if they
  fit on 1 line](https://github.com/dhall-lang/dhall-haskell/pull/1314)\n    * The
  formatter will now format record fields on a field-by-field basis to\n      avoid
  unnecessary vertical sprawl of formatted records\n    * Specifically, record fields
  that fit on one line will now be formatted\n      on one line\n* [Add `--quiet`
  option to `dhall type`](https://github.com/dhall-lang/dhall-haskell/pull/1325)\n
  \   * This lets you use `dhall type` in \"check only\" mode (e.g. for CI for\n      for
  development feedback)\n* Improved GHCJS support - ([#1311](https://github.com/dhall-lang/dhall-haskell/pull/1311)
  / [#1330](https://github.com/dhall-lang/dhall-haskell/pull/1330))\n* [Fix all executables
  to accept `--version`](https://github.com/dhall-lang/dhall-haskell/pull/1334)\n
  \   * Note that the `dhall version` subcommand is still supported, too\n* [New `Dhall.Version`
  module](https://github.com/dhall-lang/dhall-haskell/pull/1332)\n* [Don't normalize
  inferred types](https://github.com/dhall-lang/dhall-haskell/pull/1317)\n    * This
  fixes `dhall type` to more accurately follow the standard\n* [Initial changes for
  GHC 8.8 support](https://github.com/dhall-lang/dhall-haskell/pull/1324)\n* [Fix
  Haddock formatting for `dhallFromJSON`](https://github.com/dhall-lang/dhall-haskell/pull/1316)\n*
  [Improved Windows caching support](https://github.com/dhall-lang/dhall-haskell/pull/1272)\n
  \   * `dhall` will now prefer the `%LOCALAPPDATA%` directory for caching if it is\n
  \     available\n* [Warn about missing cache directories](https://github.com/dhall-lang/dhall-haskell/pull/1320)\n\n1.26.0\n\n*
  [Supports version 10.0.0 of the standard](https://github.com/dhall-lang/dhall-lang/releases/tag/v10.0.0)\n*
  BREAKING CHANGE TO THE LANGUAGE: [Remove old union literal syntax](https://github.com/dhall-lang/dhall-haskell/pull/1176)\n
  \   * Union literals of the form `< x = e | ... >` are no longer valid\n    * For
  more details, see: [Migration: Deprecation of old union literal syntax](https://github.com/dhall-lang/dhall-lang/wiki/Migration%3A-Deprecation-of-old-union-literal-syntax)\n
  \   * Also see the [changelog for standard version 10.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v10.0.0)
  for more details\n* BREAKING CHANGE TO THE API: [Change `X` to be a type synonym
  for `Data.Void`](https://github.com/dhall-lang/dhall-haskell/pull/1172)\n    * This
  is a breaking change if you were previously pattern matching on the\n      `X` constructor.
  \ You can replace that with the use of `Data.Void.absurd`\n* BREAKING CHANGE TO
  THE API: [Treat multi-`let`s as syntactic sugar](https://github.com/dhall-lang/dhall-haskell/pull/1242)\n
  \   * This is a breaking change because the `Let` constructor now only stores\n
  \     one `Binding` instead of a `NonEmpty` list of `Binding`s\n* PERFORMANCE REGRESSION
  & TECHNICALLY BREAKING CHANGE TO THE LANGUAGE: [Dependent types](https://github.com/dhall-lang/dhall-haskell/pull/1164)\n
  \   * You can now write functions from terms to types\n    * There is also now language
  support for tests of the form\n      `assert : x === y`\n    * This deteriorates
  the performance of large multi-`let` expressions\n      (See: [#1306](https://github.com/dhall-lang/dhall-haskell/issues/1306))\n
  \   * Splitting large multi-`let` expressions into smaller files may mitigate\n
  \     the problem as a work-around for now\n    * Follow [#1129](https://github.com/dhall-lang/dhall-haskell/issues/1129)\n
  \     for work to fix this performance regression\n    * This is also a technically
  breaking change because `assert` is now a\n      reserved keyword\n    * See the
  [changelog for standard version 10.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v10.0.0)
  for more details\n* TECHNICALLY BREAKING CHANGE TO THE LANGUAGE: [Add `Natural/subtract`
  built-in](https://github.com/dhall-lang/dhall-haskell/pull/1133)\n    * The language
  now supports machine subtraction, which can be used to\n      support several other
  high-performance operations (like `Natural`\n      comparisons)\n    * This is a
  technically breaking change if you used `Natural/subtract` as an\n      identifier
  in your code\n    * See the [changelog for standard version 10.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v10.0.0)
  for more details\n* TECHNICALLY BREAKING CHANGE TO THE LANGUAGE: [More simplifications
  for field selection](https://github.com/dhall-lang/dhall-haskell/pull/1174)\n    *
  Now the interpreter will more intelligently simplify certain field\n      projections\n
  \   * For example: `λ(x : { a : Bool, b : Bool }) → (x ⫽ { c = 0 }).{ a, c }.c`\n
  \     will now simplify to `λ(x : { a : Bool, b : Bool }) → 0 `\n    * This is a
  technically breaking change because you will need to update\n      integrity checks
  that protect code simplified in this way\n    * See the [changelog for standard
  version 10.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v10.0.0) for
  more details\n* TECHNICALLY BREAKING CHANGE TO THE LANGUAGE: [Simplify `⫽` when
  its arguments are equivalent](https://github.com/dhall-lang/dhall-haskell/pull/1196)\n
  \   * This is a technically breaking change for the same reason: this will\n      perturb
  semantic integrity checks for affected code\n    * See the [changelog for standard
  version 10.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v10.0.0) for
  more details\n* NEW FEATURE: [Restore support for records containing both types
  and terms](https://github.com/dhall-lang/dhall-haskell/pull/1173)\n    * In other
  words `{ foo = 1, bar = Bool }` is now valid again\n    * This means that you now
  can export a single package containing both types\n      and terms\n    * See the
  [changelog for standard version 10.0.0](https://github.com/dhall-lang/dhall-lang/releases/tag/v10.0.0)
  for more details\n* [`dhall format` now preserves `let` comments](https://github.com/dhall-lang/dhall-haskell/pull/1273)\n
  \   * `dhall` format will now preserve comments in the following locations of\n
  \     a `let` binding:\n    * `let {- HERE -} x {- HERE -} : {- HERE -} Bool = {-
  HERE -} True in x`\n    * This support handles both single-line and multi-line comments
  and also\n      takes care of correctly indenting/dedenting them\n    * Note that
  comments before the `let` keyword are still not preserved\n      (unless it is the
  beginning of the file)\n* [Add API support for marshalling recursive types](https://github.com/dhall-lang/dhall-haskell/pull/1195)\n
  \   * You can now marshal recursive types from Dhall into Haskell using the\n      newly-added
  utilities\n    * See also: [#1298](https://github.com/dhall-lang/dhall-haskell/pull/1298)\n*
  [New `:help` command for `dhall repl`](https://github.com/dhall-lang/dhall-haskell/pull/1237)\n*
  New `--no-cache` flag [#1290](https://github.com/dhall-lang/dhall-haskell/pull/1290)
  / [#1434](https://github.com/dhall-lang/dhall-haskell/pull/1434) / [#1436](https://github.com/dhall-lang/dhall-haskell/pull/1436)\n
  \   * You can now disable use of the cache with this flag\n    * This comes in handy
  if you want to disable α-normalization for imports\n      protected by a semantic
  integrity check\n* Bug fixes\n    * [Fix `isNormalized` for field selections](https://github.com/dhall-lang/dhall-haskell/pull/1210)\n
  \   * [Simplify `Natural/subtract` when its arguments are equivalent](https://github.com/dhall-lang/dhall-haskell/pull/1220)\n
  \   * [Fix `NaN` to be judgmentally equivalent to itself](https://github.com/dhall-lang/dhall-haskell/pull/1231)\n
  \   * [Fix `Inject` instance for lists](https://github.com/dhall-lang/dhall-haskell/pull/1261)\n
  \   * [Fix typechecking of `toMap`](https://github.com/dhall-lang/dhall-haskell/pull/1279)\n*
  Performance optimizations\n    * [Optimize a few `Set` instances](https://github.com/dhall-lang/dhall-haskell/pull/1184)\n
  \   * [Remove some redundant sorting during normalization](https://github.com/dhall-lang/dhall-haskell/pull/1228)\n*
  Improvements to error messages\n    * [Improve error reporting for failed remote
  imports](https://github.com/dhall-lang/dhall-haskell/pull/1188)\n    * [Improve
  HTTP errors](https://github.com/dhall-lang/dhall-haskell/pull/1253)\n* Improvements
  to formatting\n    * [Indent function arguments when formatting](https://github.com/dhall-lang/dhall-haskell/pull/1167)\n
  \   * [Prefer unquoted URLs](https://github.com/dhall-lang/dhall-haskell/pull/1235)\n
  \   * [Strip leading whitespace](https://github.com/dhall-lang/dhall-haskell/pull/1270)\n*
  Improvements to diffs\n    * [Fix diffs for lists](https://github.com/dhall-lang/dhall-haskell/pull/1213)\n
  \   * [Improve diff for non-empty lists](https://github.com/dhall-lang/dhall-haskell/pull/1244)\n
  \   * [Small fixes to `dhall diff`](https://github.com/dhall-lang/dhall-haskell/pull/1263)\n*
  Improvements to documentation\n    * [Fix documentation for `UnionInputType`](https://github.com/dhall-lang/dhall-haskell/pull/1230)\n
  \   * [Document support for caching protected imports](https://github.com/dhall-lang/dhall-haskell/pull/1247)\n*
  Improvements to command-line interface\n    * [Improve description of `dhall lint`](https://github.com/dhall-lang/dhall-haskell/pull/1264)\n
  \   * [Change `dhall type` to resolve imports](https://github.com/dhall-lang/dhall-haskell/pull/1281)\n\n1.25.0\n\n*
  Supports version 9.0.0 of the standard\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v9.0.0\n*
  BREAKING CHANGE: Remove support for old-style `List`-like `Optional` literals\n
  \   * List-like `Optional` Literals (i.e. `[ 1 ] : Optional Natural`) are no\n      longer
  valid\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1002\n* BREAKING
  CHANGE: Add support for semi-semantic caching\n    * This change significantly improves
  the performance of imports\n    * This change also automatically caches imports
  without an integrity check\n    * This changes several types in `Dhall.Import` to
  support this new\n      feature\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1113\n*
  BREAKING CHANGE: Implement new Unicode braced escape sequence\n    * Escape sequences
  encoding surrogate pairs are no longer valid\n    * Instead, characters previously
  encoded as surrogate pairs can instead be\n      encoded as a braced sequence\n
  \   * For example: \"\\uD834\\uDD1E\" must now be written as \"\\u{1D11E}\"\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/987\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1104\n*
  BREAKING CHANGE: Make the type of extract richer:\n    * `Dhall.extract` can now
  return a detailed error instead of just a `Maybe`\n    * This is a breaking chnage
  because the type of `extract` changed\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1011\n*
  BREAKING CHANGE: Add support for importing expressions `as Location`\n    * This
  is a breaking change because a new `Location` constructor was added\n      to `ImportMode`\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1019\n* BREAKING CHANGE:
  Switch `Var` to use an `Int`\n    * This is a performance improvement, but also
  a breaking change since the\n      `Integer` in the `Var` constructor was changed
  to an `Int`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1044\n*
  BREAKING CHANGE: Add new `toMap` keyword\n    * This is a breaking change to the
  API because a new `ToMap` constructor\n      was added to the `Expr` type\n    *
  This is also a technically breaking change to the language because `toMap`\n      is
  now a reserved keyword, although most code should be unaffected in\n      practice\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1041\n* BREAKING CHANGE:
  Sort the fields of a record projection during normalization\n    * This is a technically
  breaking change to the language because any\n      expressions with an uninterpreted
  record projection will have a different\n      semantic integrity check.  However,
  most could should be unaffected in\n      practice\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1111\n*
  BUG FIX: Fix substitution into record projection by type\n    * An expression like
  this one was being incorrectly rejected:\n      `let e = { a = 10, b = \"Text\"
  } let s = { a : Natural } in e.(s)`, which\n      this change fixes\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/1012\n* BUG FIX: Reject record
  projection when there is a field type mismatch\n    * Record projection by type
  was previously not checking the expected\n      field types, which this change fixes\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1027\n* BUG FIX: Fix
  linting of unused let bindings\n    * Certain let bindings were not correctly detected
  as unused, which this\n      change fixes\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1001\n*
  BUG FIX: Fix `--file` option\n    * The `--file` option from the previous release
  did not work, due to not\n      computing relative paths correctly, which this change
  fixes\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1004\n* BUG FIX:
  Minor fix to `dhall diff`\n    * `dhall diff` was incorrectly displaying spurious
  differences for\n      identical lists that were function arguments, which this
  change fixes\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1006\n*
  BUG FIX: Allow `Sort` as type annotation\n    * This should have been implemented
  in the previous release as part of\n      supporting version 8.0.0 of the standard,
  but was missed\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1024\n*
  BUG FIX: `Dhall.Map`: Reflect original key ordering in `Ord` instance\n    * `Dhall.Map`
  now considers key order when comparing `Map`s, which it should\n      have done
  before, but didn't\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1050\n*
  BUG FIX: Consistently format multi-line strings\n    * The formatter now formats
  naked multi-line strings the same as nested\n      multi-line strings\n    * Specifically,
  naked multi-line strings can now be formatted on a single\n      (just like nested
  multi-line strings)\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1056\n*
  BUG FIX: Make `isNormalized` consistent with `normalize`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1115\n*
  BUG FIX: Make `normalizeWithM` consistent with `normalize`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1126\n*
  BUG FIX: Fix import alternatives to recover from type errors\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1152\n*
  Feature: Semi-semantic caching\n    * The Haskell implementation now implicitly
  caches *all* local imports, not\n      just imports frozen by integrity checks,
  so that you don't have to freeze\n      them when doing local development\n    *
  These cached imports are still correctly invalidated if they or any of\n      their
  dependencies change\n    * This new implicit cache is stored underneath `~/.cache/dhall-haskell`
  by\n      default\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1154\n*
  Feature: New `dhall text` subcommand\n    * This new subcommand supersedes the old
  `dhall-to-text` executable\n* Feature: Add `instance Lift (Expr s a)`\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/1119\n* Fixes and improvements
  to error messages:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1030\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1137\n* Fixes and improvements
  to tests:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1155\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/1159\n* Performance improvements\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1036\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1051\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1048\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1057\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1065\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/1066\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/1085\n\n1.24.0\n\n*
  Supports version 8.0.0 of the standard\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v8.0.0\n*
  BREAKING CHANGE: Allow tabs and blank lines in multi-line strings\n    * Blank lines
  are now ignored for the purpose of dedenting multiline strings\n    * Lines with
  leading tabs (or mixed tabs and spaces) are now dedented, too,\n      so long as
  they all share the same prefix\n    * This is technically a breaking change, but
  unlikely to affect programs\n      in practice, especially if they were formatted
  with `dhall format`.  This\n      change mainly affects programs that were not indented
  correctly.\n    * See the changelog for standard version 8.0.0 for more details\n*
  BREAKING CHANGE: Simplify bare interpolations\n    * Expressions like `λ(x : Text)
  → \"${x}\"` now simplify to `λ(x : Text) → x`\n    * This is a technically breaking
  change because it changes how these sorts\n      of expressions are serialized.
  \ This does not affect semantic integrity\n      checks and the new simplified expressions
  are extensionally equivalent to\n      their older counterpart expressions.\n    *
  See the changelog for standard version 8.0.0 for more details\n* BREAKING CHANGE:
  Encode integrity check as multihash\n    * Semantic integrity checks are now encoded
  using the multihash spec\n    * This is a technically breaking change that does
  not perturb the hash for\n      user-facing semantic integrity checks.  This only
  affects how expressions\n      with unresolved imports are serialized, but semantic
  integrity checks are\n      only computed for fully-resolved imports.\n    * See
  the changelog for standard version 8.0.0 for more details\n* BUG FIX: Fix type-checker
  to reject invalid record type annotations\n    * e.g. `{ x = 1 } : { x : Text }`
  was not properly rejected by the type\n      checker\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/965\n*
  BUG FIX: Custom header forwarding fixed\n    * Forwarding custom headers could previously
  fail in various ways, such as:\n        * Cyclic imports leading to endless network
  requests\n        * Resolving a non-existent import for the custom headers\n        *
  Resolving an existing but incorrect import for the custom headers\n    * This change
  fixes that by forwarding custom headers by value instead of\n      by reference\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/967\n* BUG FIX: Fix
  GHCJS support\n    * `Natural/fold` was broken in version 1.22, which this change
  fixes\n    * Specifically, it would hang for `Natural` numbers greater than 1\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/985\n* BUG FIX: `dhall
  diff` no longer double-prints key-value separators\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/952\n*
  Feature: Record projection by expression\n    * You can now project out a subset
  of record fields by the expected type\n    * `let t = { x : Natural } let p = {
  x = 1, y = 2 } in p.(t) = { x = 1 }`\n    * See the changelog for standard version
  8.0.0 for more details\n* Feature: Inline headers\n    * You no longer need to specify
  custom headers in a separate import.  You\n      can now specify them inline within
  the same file.\n    * e.g.: `https://example.com/x using [ { header = \"Foo\", value
  = \"Bar\" } ]`\n    * See the changelog for standard version 8.0.0 for more details\n*
  Feature: Allow `Sort` as a type annotation\n    * An expression such as `Kind →
  Kind : Sort` will now type-check\n    * `Sort` is still disallowed outside of a
  type annotation\n    * See the changelog for standard version 8.0.0 for more details\n*
  Feature: Allow self-describe-cbor when decoding\n    * Dhall expressions serialized
  as CBOR can be tagged to describe themselves\n      as CBOR without affecting decoding\n
  \   * See the changelog for standard version 8.0.0 for more details\n* Feature:
  New `--file` option for `dhall` commands\n    * In other words, instead of `dhall
  <<< './some/file` you can now use\n      `dhall --file some/file`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/949\n*
  Feature: New `--cache` flag for `dhall freeze` command\n    * This automates the
  idiom used by the Prelude to optimistically cache\n      imports but gracefully
  degrade if the semantic integrity check fails\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/980\n*
  Feature: Add `:clear` command to `dhall repl`\n    * This deletes previous bindings
  from the history so that they can be\n      garbage collected\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/966\n*
  Feature: New `chunkExprs` `Traversal` added to `Dhall.Core`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/954\n*
  Feature: New `Dhall.Optics` module\n    * This re-exports some convenient @lens@
  utilities used internally for\n      packages trying to avoid a @lens@ dependency\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/986\n* More GHC 8.8
  support\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/961\n\n1.23.0\n\n*
  BREAKING CHANGE: Fix marshaling union literals\n    * 1.22.0 introduced two separate
  bugs in marshaling union literals between\n      Dhall and Haskell, which this release
  fixes:\n        * Dhall enums did not correctly map onto Haskell enums\n        *
  New-style union literals (i.e. `< A : T >.A x`) were not correctly\n          supported\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/918\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/927\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/936\n* BUG FIX: Fix
  α-normalization\n    * Version 1.22.0 introduced a new faster evaluation algorithm,
  but the new\n      algorithm introduced two α-normalization regression, which this
  release\n      fixes\n    * The primary effect of this bug was that semantic integrity
  checks would\n      fail for expressions that contain an `if`/`then`/else` expression
  in their\n      normal form\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/931\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/938\n* BUG FIX: Fix
  merging of sort-level record types\n    * The language standard requires that `{
  a : Kind } ⩓ { b : Kind }` is\n      valid, which this change fixes\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/891\n* BUG FIX: `dhall freeze`
  respects the `--ascii` flag\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/934\n*
  BUG FIX: Don't autocomplete fields for record types\n    * This prevents the REPL
  from expanding `{ x : T }.<TAB>` to `{ x : T }.x`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/937\n*
  Support `MonadFail`-related changes in GHC 8.8\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/912\n*
  Add `cross` flag to simplify cross-compilation\n    * This allows the `dhall` package
  to be built without using\n      `TemplateHaskell`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/928\n*
  Increase lines of context for error messages \n    * Error messages now provide
  at least 20 lines of context instead of 3\n      before truncating large expressions\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/916\n* Add line numbers
  to error messages\n    * The bottom of every Dhall type error includes the original
  source code,\n      which now has line numbers on the left margin\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/919\n*
  Expand lower bounds on `megaparsec`/`transformers-compat` dependencies\n    * This
  is to support `dhall` on Debian Sid\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/939\n\n1.22.0\n\n*
  Supports version 7.0.0 of the standard\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v7.0.0\n*
  BREAKING CHANGE: Add support for empty alternatives\n    * The `Union` type now
  has an optional (`Maybe`) type for each alternative\n    * See the changelog for
  standard version 7.0.0 for more details\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/863\n*
  BREAKING CHANGE: Remove support for URL fragments\n    * The `URL` type no longer
  has a field for a URL fragment since the language\n      no longer supports fragments\n
  \   * See the changelog for standard version 7.0.0 for more details\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/851\n* BREAKING CHANGE: Remove
  deprecated `Path` type synonym\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/858\n*
  BUG FIX: Correctly parse identifiers beginning with `http`\n    * i.e. `httpPort`
  was supposed to be a valid identifier name and now is\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/870\n*
  BUG FIX: Fix `dhall encode` bug\n    * `dhall encode` bug was generating binary
  expressions that were valid\n      (i.e. they would decode correctly) but were non-standard
  (i.e. hashing\n      them would not match the hash you would normally get from a
  semantic\n      integrity check)\n    * Semantic integrity checks were not affected
  by this bug since they used\n      a slightly different code path that generated
  the correct binary input to\n      the hash.  Only the `dhall decode` subcommand
  was affected\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/859\n*
  BUG FIX: Fix for `Dhall.UnionType`\n    * This fixes some expressions that would
  previously fail to marshal into\n      Haskell, specifically those were the marshalling
  logic was built using\n      the `UnionType` utilities\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/857\n*
  Feature: New `--alpha` flag to α-normalize command-line output\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/855\n*
  Performance improvements\n    * The normalizer is now *much* faster\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/876\n\n1.21.0\n\n* Supports version
  6.0.0 of the language standard\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v6.0.0\n*
  BREAKING CHANGE: Remove the `constructors` keyword\n    * ... as standardized in
  version 6.0.0 of the language standard\n    * The deprecation cycle is over, so
  the keyword is no longer supported\n    * For more details, see: https://github.com/dhall-lang/dhall-lang/wiki/Migration%3A-Deprecation-of-constructors-keyword\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/829\n* BREAKING CHANGE:
  CBOR-encode only special `Double`s as half-floats\n    * ... as standardized in
  version 6.0.0 of the language standard\n    * CBOR `Double`s except `Infinity`/`-Infinity`/`NaN`/`0.0`
  are now encoded in at\n      least 32 bits\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/822\n*
  BREAKING CHANGE: Sort record and union fields when CBOR-encoding\n    * Fields and
  alternatives are now sorted when serialized\n    * This does not affect semantic
  integrity checks, which already sorted these\n      fields/alternatives before hashing
  expressions\n    * This does affect the serialization of expressions that have not
  been\n      normalized (e.g. uninterpreted expressions transmitted over the wire)\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/835\n* BUG FIX: Fix
  non-exhaustive pattern match in `dhall lint`\n    * This fixes: `Irrefutable pattern
  failed for pattern Let (l' :| ls') d'`\n    * This bug would cause `dhall lint`
  to fail on some nested `let`/`in`\n      expressions\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/780\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/784\n* BUG FIX: Don't
  fail if `$HOME` environment variable is unset\n    * The interpreter was incorrectly
  throwing an exception if `HOME` was unset\n    * The standard requires that implementations
  should handle the `HOME`\n      environment variable being missing\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/789\n*
  Feature: Remove version tag from semantic integrity check\n    * ... as standardized
  in version 6.0.0 of the language standard\n    * This is not a breaking change because
  this change also includes\n      backwards-compatible support for semantic integrity
  checks produced by\n      older versions of the interpreter\n* Feature: Support
  Unicode path components\n    * ... as standardized in version 6.0.0 of the language
  standard\n    * You can now use Unicode in path components if they are quoted\n
  \   * i.e. `./families/\"禺.dhall\"` is now legal\n* Feature: Add `Text/show` built-in\n
  \   * ... as standardized in version 6.0.0 of the language standard\n    * You can
  now convert a `Text` literal to its equivalent Dhall source code\n      (which is
  itself a `Text` literal)\n    * This comes in handy when using Dhall code to generate
  JSON or Dhall code\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/811\n*
  Feature: Add `--immediate-dependencies`/`--transitive-dependencies` flags for\n
  \ `dhall resolve`\n    * You can now retrieve all of your immediate or transitive
  dependencies as a\n      textual list\n    * This simplifies integration with other
  command-line tools (such as file\n      watchers)\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/795\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/803\n* Feature: `dhall
  freeze` now only freezes remote imports by default\n    * `dhall freeze` used to
  freeze all imports (including local imports and\n      environment variables)\n
  \   * Now `dhall freeze` only freezes remote imports by default, which is what\n
  \     most users want\n    * You can install freeze all imports using the `--all`
  flag\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/808\n* Feature:
  `:save` and `:load` REPL state\n    * `:save` with no arguments now saves the REPL
  state to a `.dhall-repl-N`\n       file\n    * The file format is a list of `dhall
  repl` commands\n    * You can use `:load` to load the saved state back into the
  REPL\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/807\n* Feature:
  Add `:hash` command to `dhall repl`\n    * This lets you conveniently hash expressions
  within the `dhall repl`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/806\n*
  Feature: Add `--check` flag to `dhall format`\n    * Use this to check if the input
  is already formatted\n    * Useful for continuous integration when you want to ensure
  that all code\n      under version control remains formatted\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/810\n*
  Feature: Add  `UnionInputType` builder for `InputType`s\n    * This is the union
  analog of `RecordInputType`, letting you build a\n      record explicitly instead
  of deriving the instance using GHC generics\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/775\n*
  Feature: Add `:set`/`:unset` commands to `dhall repl`\n    * You can use these commands
  to set or unset command-line options\n    * Currently only setting/unsetting `--explain`
  is supported\n* Standards-compliance fixes:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/779\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/804\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/833\n*
  Documentation fixes:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/792\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/825\n* Test fixes:\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/782\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/836\n*
  Improved error messages:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/812\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/815\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/824\n*
  Formatting fixes:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/831\n*
  REPL fixes:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/837\n\n1.20.1\n\n*
  BUG FIX: Fix binary encoding to use correct standard version\n    * This fixes computed
  hashes to correctly match standard version 5.0.0\n    * This is not marked as a
  breaking change since it is a bug fix.  The\n      1.20.0 release will be blacklisted
  on Hackage and users should upgrade\n      from 1.19.* directly to 1.20.1\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/771\n\n1.20.0\n\n* Supports
  version 5.0.0 of the language standard\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v5.0.0\n*
  BREAKING CHANGE TO THE LANGUAGE: Implement standardized support for multi-line\n
  \ literals\n    * This updates the multi-line support to match the standard\n    *
  This is a breaking change because empty lines within the multi-line\n      literal
  now require leading whitespace whereas previously they did not\n    * This is also
  a breaking change because now a newline is required after\n      the opening `''`
  quotes whereas previously it was not required\n    * If you use `dhall format` then
  your multi-line literals already have the\n      necessary leading whitespace\n*
  BREAKING CHANGE TO THE LANGUAGE: `constructors x = x`\n    * Now the `constructors`
  keyword behaves like an identity function, since\n      constructors can already
  be accessed as fields off the original union\n      type.\n    * This is a breaking
  change since any record of terms that contains a\n      `constructors` field will
  now be a forbidden mixed record of types and\n      terms.\n    * This is also a
  breaking change if you annotated the type of what used to\n      be a `constructors`
  record.\n    * `dhall lint` will now remove the obsolete `constructors` keyword
  for you\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/693\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/701\n* BREAKING CHANGE TO
  THE API: Restore `Parent` constructor for `Local` type\n    * This more closely
  matches the standard and also enables `dhall format` to\n      produce a leading
  `../` for imports instead of `./../`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/718\n*
  BUG FIX: Fix type-checking bug for unions\n    * The first fix was that the inferred
  type was wrong for unions where\n      alternatives were types or kinds\n    * The
  second fix was that unions that mixed terms/types/kinds were not\n      properly
  rejected\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/763\n* BUG
  FIX: Change how `dhall repl` handles prior definitions\n    * This changes the REPL
  to handle previous bindings as if they were\n      defined using a large `let` expression
  instead of adding them to the\n      context\n    * This fixes some type-checking
  false negatives\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/729\n*
  Feature: Autocomplete for `dhall repl`\n    * You can now auto-complete record fields,
  union constructors, and\n      identifiers that are in scope\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/727\n*
  Feature: GHCJS support\n    * `dhall` can now be built using GHCJS, although some
  features are still\n      not supported for GHCJS, such as:\n        * Semantic
  integrity checks\n        * Custom HTTP headers\n    * Also, HTTP imports only work
  for URLs that support CORS\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/739\n*
  Feature: Add support for records of records of types\n    * You can now nest records
  of types\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/700\n* Feature:
  Add `:quit` command for `dhall repl`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/719\n*
  Feature: Add `--json` flag for `dhall {encode,decode}`\n    * You can now produce/consume
  CBOR expressions via JSON instead of binary\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/717\n*
  Feature: Add decoding logic for `as Text`\n    * You can now preserve the `as Text`
  qualifier on imports when serializing\n      them\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/712\n*
  Prenormalize substituted expressions\n    * This is a performance improvement that
  reduces the time and memory\n      consumption when normalizing expressions\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/765\n\n1.19.1\n\n\n* BUG FIX:
  Fix serious `dhall lint` bug\n    * `dhall lint` would sometimes remove `let` expressions
  that were still\n      in use\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/703\n*
  BUG FIX: Fix import caching efficiency bug\n    * Some imports were being wastefully
  fetched multiple times\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/702\n*
  Feature: Generate dot graph to visualize import graph\n    * Use the `dhall resolve
  --dot` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/698\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/713\n* Improve HTTP
  error messages\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/710\n\n1.19.0\n\n*
  Supports version 4.0.0 of the language standard\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v4.0.0\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: Prevent Hurkens' paradox\n    * This fixes
  a type-checking soundness bug which permitted infinite loops\n    * This is a breaking
  change because infinite loops are no longer possible\n    * This is also a breaking
  change because a record of types is now treated as\n      a kind instead of a type\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/680\n* BREAKING CHANGE
  TO THE LANGUAGE AND API: `Double`s are now double-precision\n  floating point numbers\n
  \   * This restricts the range of `Double`s to IEEE 754 double-precision\n      floating
  point\n    * This also implies that you can no longer convert `Scientific` values
  to\n      `Dhall` expressions (i.e. no `Inject` instance for `Scientific`)\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/667\n* BREAKING CHANGE TO
  THE API: Preserve field order for record projection\n    * The API uses a new `Dhall.Set.Set`
  type instead of `Data.Set.Set`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/670\n*
  BREAKING CHANGE TO THE API: Add support for multi-`let` expressions\n    * This
  changes the `Let` constructor to now support storing multiple\n      bindings per
  `let` expression\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/675\n*
  Access constructors as if they were fields of the union type\n    * In other words:
  `< Left : Bool | Right : Natural >.Left`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/657\n*
  Support GHC 8.6\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/669\n*
  Add support for quoted path components\n    * i.e. `/\"foo\"/bar/\"baz qux\"` or
  `https://example.com/foo/\"bar?baz\"?qux`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/690\n*
  Fix parsing of `//\\\\` operator\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/9d0fd42d95ab69fa64da4afd8b60d69aca8e65a6\n*
  Preserve Unicode characters when formatting code\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/679\n*
  Allow identifier names to begin with `Some`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/658\n*
  Add `subExpressions` `Traversal`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/660\n*
  Add `normalizeWithM` for monadic normalization\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/371\n*
  Custom normalizers now take precedence over default normalization logic\n    * This
  allows one to override the implementation of built-in operators\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/684\n\n1.18.0\n\n*
  Supports version 3.0.0 of the language standard:\n    * See: https://github.com/dhall-lang/dhall-lang/releases/tag/v3.0.0\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: New `Some`/`None` constructors for\n  `Optional`
  values\n    * Example: `[ Some 1, None Natural ]`\n    * This is a breaking change
  to the language because `Some` and `None` are\n      now reserved keywords\n    *
  This is a breaking change to the API because `Some` and `None` are new\n      constructors
  for the `Expr` type\n* BREAKING CHANGE TO THE LANGUAGE AND API: Support for kind
  polymorphism\n    * This adds a new `Sort` constant above `Kind` in the hierarchy\n
  \   * i.e. `Type : Kind : Sort`\n    * This is a breaking change to the language
  because `Sort` is now a\n      reserved keyword\n    * This is a breaking change
  to the API because `Sort` is a new\n      constructor for the `Expr` type\n* BREAKING
  CHANGE TO THE API: New `Dhall.Map` module\n    * This replaces `InsOrdHashMap` in
  the API\n    * The primary motivation is to improve performance and to remove the\n
  \     dependency on `insert-ordered-containers`\n* BREAKING CHANGE TO THE API: Use
  standard version instead of protocol version\n    * The binary protocol is now versioned
  alongside the standard\n    * The `ProtocolVersion` type is renamed to `StandardVersion`
  and the\n    * `--protocol-version` option is renamed to `--standard-version`\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/634\n* BUG FIX: Fix
  import chaining for custom header imports\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/618\n*
  BUG FIX: Fix import chaining for imports protected by semantic integrity\n  checks\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/584\n* BUG FIX: Record
  literals and types produced by `∧`/`⫽`/`⩓` are now sorted\n    * This ensures that
  β-normalization is idempotent\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/572\n*
  BUG FIX: `dhall freeze` now correctly handles the starting file being\n  located
  outside the current working directory\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/a22aa79d1957be9ecf166ea066e2a9a5b309e1ae\n*
  BUG FIX: Fix parsing of IPv4-mapped IPv6 addresses\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/632\n*
  FEATURE: New `--ascii` flag for ASCII output\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/570\n*
  FEATURE: New `dhall encode` and `dhall decode` subcommands\n    * These allow you
  to transform Dhall source code to and from its binary\n      representation\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/588\n* LARGE parsing performance
  improvements\n    * Parsing is about 10x-100x faster on most code\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/591\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/592\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/597\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/601\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/602\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/604\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/606\n*
  Type-checking performance improvements:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/566\n*
  Normalization performance improvements:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/610\n*
  `dhall freeze` now caches the imports as it freezes them\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/587\n*
  `dhall freeze` now refreezes imports with invalid semantic integrity checks\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/637\n* `dhall freeze` now
  adds a trailing newline\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/629\n*
  Build against `megaparsec-7.0.*`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/565\n*
  Support GHC 8.6\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/599\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/623\n* Support GHC all
  the way back to 7.10.3\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/595\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/621\n* Improvements
  to error messages:\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/563\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/576\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/583\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/589\n\n\n1.17.0\n\n*
  This release corresponds to version 2.0.0 of the language standard\n* BREAKING CHANGE
  TO THE LANGUAGE AND API: Binary serialization support\n    * This is a breaking
  change to the hash for all semantic integrity checks\n    * The hash used by the
  semantic integrity check is now based on the\n      binary representation instead
  of a text representation of the\n      expression\n    * You can pin the new hashes
  by supplying the `--protocol-version 1.0`\n      option on the command line until
  you need support for newer language\n      features \n    * This also includes a
  breaking change to `ImportType` in the API\n* BREAKING CHANGE TO THE LANGUAGE: Disallow
  combining records of terms and\n  types\n    * This is mainly for consistency and
  to improve type errors that would\n      have otherwise happened further downstream\n
  \   * This should not affect the vast majority of code\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/538\n*
  BUG FIX: Semantic integrity checks now work for imported expression using\n  the
  `constructors` keyword\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/554\n*
  BUG FIX: Fix α-normalization of expressions with bound variables named `_`\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/524\n* BUG FIX: Fix `isNormalized`
  to match `normalize`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/522\n*
  BUG FIX: `dhall lint` now correctly handles nested `let` expressions\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/555\n* FEATURE: Imports protected
  by a semantic integrity check are now cached\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/533\n*
  The default `dhall` command no longer outputs the type to `stderr`\n    * You can
  add back the type as a type annotation using the\n      `--annotate` switch\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/544\n* New utilities for building
  `InputTypes`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/530\n*
  Improve parsing performance for long variable names\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/526\n*
  More succinct type diffs for function types\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/540\n*
  Identifier names can now begin with keywords\n    * i.e. `ifChanged` and `lettuce`
  are now legal identifiers\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/551\n\n1.16.1\n\n*
  Fix test failure due to missing test data file\n\n1.16.0\n\n* BREAKING CHANGE: Consolidate
  `input` family of functions\n    * These now take a record of options\n    * This
  also `_stack` field of the `Status` type from `[Import]` to\n      `NonEmpty Import`\n*
  Permit `$` in quoted variable names\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/510\n\n1.15.1\n\n*
  Fix infinite loop when formatting expressions containing `?`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/491\n\n1.15.0\n\n*
  BREAKING CHANGE TO THE API: Support alternative imports using new `?` operator\n
  \   * This adds a new constructor which affects exhaustive pattern matches\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/473\n* BREAKING CHANGE TO
  THE API: Add `Integer/toDouble` built-in function\n    * This adds a new constructor
  which affects exhaustive pattern matches\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/434\n*
  BREAKING CHANGE TO THE API: Use strict `Text` instead of lazy `Text`\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/455\n* BREAKING CHANGE TO THE API:
  Remove `Buildable` in favor of `Pretty`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/459\n*
  BREAKING CHANGE TO THE API: Removed the `Parent` constructor from `FilePrefix`\n
  \   * Instead, use `Here` with a `\"..\"` prefix.\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/407\n*
  BUG FIX: Disallow duplicate fields in records\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/430\n*
  BUG FIX: Fix stripping of leading whitespace in multi-line strings\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/469\n*
  BUG FIX: Fix formatting field access of an import\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/471\n*
  Add `dhall freeze` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/486\n*
  Add `dhall diff` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/442\n*
  Add `dhall lint` command\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/484\n*
  Change `dhall-repl`/`dhall-hash`/`dhall-format` to `dhall` subcommands\n    * i.e.
  `dhall repl`/`dhall hash`/`dhall format`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/435\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/452\n* Add `with-http`
  cabal flag to disable support for remote imports\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/482\n*
  Added `inputFrom` and `inputFromWith`\n    * These allow naming the file that the
  expression is coming from for better\n      error messages\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/464\n*
  Performance improvements\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/420\n*
  Tutorial recommends GitHub for Prelude instead of IPFS\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/479\n*
  Pretty-print expressions in type errors\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/429\n*
  Formatting improvements\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/398\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/458\n* Diff improvements\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/455\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/470\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/478\n\n1.14.0\n\n* BREAKING
  CHANGE TO THE LANGUAGE: Switch grammar of `Natural` and `Integer`\n    * `Natural`
  number literals are now unsigned and `Integer` literals always\n      require a
  sign\n    * This is a **VERY** disruptive change to most Dhall code in the wild
  but\n      was unanimously agreed upon here:\n      https://github.com/dhall-lang/dhall-lang/issues/138\n
  \   * See also: https://github.com/dhall-lang/dhall-haskell/pull/381\n* BREAKING
  CHANGE TO THE LANGUAGE: Drop support for importing directories\n    * Importing
  `dir/` used to resolve to `dir/@`, which is no longer supported\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/384\n*
  BREAKING CHANGE TO THE LANGUAGE: Change to the grammar for imports\n    * File path
  components can no longer contain `#` or `?` characters\n    * URL imports must now
  contain at least one path component\n    * URL path components must match the grammar
  for file path components\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/390\n*
  BREAKING CHANGE TO THE API: Rename `Path{,Mode,Hashed,Type}` to\n  `Import{,Mode,Hashed,Type}`\n
  \   * In practice this change is not breaking for the most common use cases\n      since
  this also provides a `Path` type synonym for backwards compatibility\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/376\n* BUG FIX: Fix α-equivalence
  bug when type-checking `merge`\n    * `merge` expressions would sometimes reject
  valid code due to a\n       type-checking bug\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/394\n*
  Improve import caching\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/388\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/392\n* Increase upper
  bound on `tasty`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/382\n*
  Fix lower bound on `insert-ordered-containers`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/377\n\n1.13.1\n\n*
  Increase upper bound on `ansi-terminal` and `megaparsec`\n\n1.13.0\n\n* BUG FIX:
  Fix semantic integrity hashing support\n    * Both parsing and pretty-printing semantic
  hashes were broken since version\n      1.11.0\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/345\n*
  BUG FIX: Allow leading whitespace in interpolated expresssions\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/369\n*
  BUG FIX: Fix `deriving (Interpret)` for sum types\n    * The types of alternatives
  were not correctly included in the corresponding\n      Dhall type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/348\n*
  BREAKING CHANGE TO LANGUAGE: Records cannot store both types and terms\n    * Records
  can also not store type-level functions (like `List`)\n        * Records might be
  allowed to store type-level functions again in the\n          future\n    * This
  fixes a potential soundness bug\n    * The primarily practical consequence of this
  change is that if you are\n      hosting a \"package\" then you will need to split
  terms and types from your\n      package into different records for your users to
  import\n    * This also implies removing the `./Monoid` type-level function from
  the\n      `./Prelude/package.dhall` record\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/335\n*
  BREAKING CHANGE TO THE API: Replace `trifecta` with `megaparsec`\n    * This change
  the API to use the `Parser` type from `megaparsec`\n    * This also slightly changes
  the type of `exprFromText`\n    * If you program using the type classes provided
  by the `parsers` library\n      then this is not a breaking change as that interface
  is preserved\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/268\n*
  BREAKING CHANGE TO THE API: New `⩓` operator for merging record types\n    * Example:
  `{ foo : Text } ⩓ { bar : Bool } = { foo : Text, bar : Bool }`\n    * This is breaking
  because it adds a new constructor to the `Expr` type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/342\n*
  BREAKING CHANGE TO THE API: New support for projecting a subset of fields\n    *
  Example: `{ x = 1, y = 2, z = 3 }.{ x, y } = { x = 1, y = 2 }`\n    * This is breaking
  because it adds a new constructor to the `Expr` type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/350\n*
  API+UX feature: New support for pretty-printing diffs of Dhall expressions\n    *
  Error messages also use this feature to simplify large type mismatches\n    * There
  is also a new `Dhall.Diff` module\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/336\n*
  Add `version`, `resolve`, `type`, and `normalize` sub-commands to interpreter\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/352\n* Support GHC 7.10.3\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/340\n* `:type` command
  in `dhall-repl` now only displays the type\n    * Before it would also display the
  original expression\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/344\n*
  Trim dependency tree\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/351\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/268\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/355\n\n1.12.0\n\n*
  Additional changes to support GHC 8.4\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/331\n*
  BREAKING CHANGE TO API: Replace dependency on `text-format` with `formatting`\n
  \   * This replace the `Data.Text.Buildable.Buildable` instances with\n      `Formatting.Buildable.Buildable`
  instances, which is why this is a\n       breaking change\n    * `text-format` is
  no longer maintained and blocking GHC 8.4 support\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/330\n\n1.11.1\n\n*
  Support GHC 8.4\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/321\n*
  Fix α-normalization bug\n    * Note that this is not a type-checking bug.  This
  only affects users who\n      were directly using the `alphaNormalize` function
  from the Haskell API\n      because `let` expressions were not correctly α-normalized\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/319\n* Slight tweak
  to syntax highlighting\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/324\n*
  Increase upper bound on `ansi-terminal` and `exceptions`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/322\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/325\n\n1.11.0\n\n* BREAKING
  CHANGE TO THE API: Fix `{Natural,Optional,List}/build` semantics to\n  match standard\n
  \   * This is a breaking change because the `OptionalLit` and `ListLit`\n      constructors
  changed their representations to efficiently support the\n      standard semantics\n
  \   * `ListLit` now stores a `Data.Sequence.Seq` instead of a\n      `Data.Vector.Vector`\n
  \   * `OptionalLit` now stores a `Maybe` instead of a `Data.Vector.Vector`\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/300\n* BREAKING CHANGE TO
  THE COMMAND LINE: `dhall` executable always formats output\n    * Previously you
  had to opt into formatting using `--pretty`\n    * Now formatting is obligatory
  and the `--pretty` flag is gone\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/303\n*
  Feature: New `:save` command for `dhall-repl`\n    * Now you can save an expression
  to a file: `./yourFile = someExpression`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/309\n*
  Improvement: Add new simplifications to match standard\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/312\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/316\n* Improvement:
  Fix equivalence check to match standard\n    * Practically this means that more
  corner cases of the language correctly\n      type-check than before\n* Improvement:
  New `--plain` flag to disable syntax highlighting\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/310\n*
  Improvement: Prelude now provides an umbrella `package.dhall` import\n    * This
  is primarily for convenience\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/298\n*
  Improvement: Context is now normalized\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/302\n*
  Replace `cryptohash` dependency with `cryptonite`\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/5d2012927a062ec8bdf2bbaba77150344f38db77\n*
  Increase upper bound on exceptions\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/306\n*
  Fix type error in tutorial\n    * See: https://github.com/dhall-lang/dhall-haskell/commit/5a9126b2f684d3236fc1e8e20e206cfaf47d97db\n\n1.10.0\n\n*
  Feature: Records/unions can now have fields/alternatives that are types\n    * i.e.
  `{ foo = Text, bar = List }` is legal now\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/273\n*
  Feature: New `dhall-repl` for interactively evaluating Dhall expressions\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/266\n* Feature: Syntax highlighting\n
  \   * See: https://github.com/dhall-lang/dhall-haskell/pull/260\n* Feature: BREAKING
  CHANGE TO THE API: `dhall-format` preserves field order\n    * This changes the
  syntax tree to use an `InsOrdHashMap` instead of a `Map`\n* BREAKING CHANGE TO THE
  API: Use Haskell's `Scientific` type\n    * This is fixes the interpreter to correct
  handle really large/small numbers\n    * This also allows marshaling into Haskell's
  `Scientific` type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/256\n*
  BREAKING CHANGE TO THE API: Remove `system-filepath`/`system-fileio` dependencies\n
  \   * Now the library uses `Prelude.FilePath`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/248\n*
  Feature: Labels can now begin with reserved names\n    * i.e. `List/map` is now
  a legal label\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/255\n*
  Fix: Rendered labels are now correctly escaped if they are numbers\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/252\n*
  Add the instance `Interpret String`.\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/247\n*
  Fix: Custom contexts passed to `typeWith` are now checked\n    * This prevents a
  custom context from triggering an infinite loop\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/259\n\n1.9.1\n\n*
  `dhall-format` now emits single-quoted strings for multi-line strings\n    * See:
  https://github.com/dhall-lang/dhall-haskell/pull/237\n* Improved error messages
  for list elements with the wrong type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/236\n*
  Change `lens` dependency to `lens-family-core`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/238\n\n1.9.0\n\n*
  Feature: BREAKING CHANGE TO LANGUAGE AND API: Add `constructors` keyword\n    *
  This new keyword generates constructors from a union type\n        * See the updated
  Haskell tutorial for more details\n    * This means that `constructors` is now a
  reserved keyword\n    * This adds a new `Constructors` constructor to the `Expr`
  type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/199\n* Feature:
  BREAKING CHANGE TO THE API: `dhall-format` preserves interpolation\n    * This changes
  the `TextLit` constructor to represent an interpolated `Text`\n      literal\n    *
  See: https://github.com/dhall-lang/dhall-haskell/pull/220\n* Feature: You can now
  define type synonyms using `let`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/202\n*
  Feature: Extend valid set of quoted labels\n    * See: https://github.com/dhall-lang/dhall-lang/pull/65\n
  \   * See: https://github.com/dhall-lang/dhall-lang/pull/77\n* Performance: Improve
  startup time when importing files, but not URLs\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/194\n*
  Security: `localhost`/`127.0.0.1` imports no longer count as local imports\n    *
  Specifically: they cannot import environment variables or files\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/197\n*
  Security: Fix potential type-checking bug\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/198\n*
  Fix: BREAKING CHANGE TO API: Improve localization of error messages\n    * This
  required fixing the type of `normalize`/`shift`/`subst` to preserve\n      the first
  type parameter of `Expr` (i.e. they no longer delete `Note`\n      constructors)\n
  \   * A new `denote` function was added for the explicit purpose of deleting\n      `Note`
  constructors\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/218\n*
  Expose `MissingEnvironmentVariable` exception type\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/196\n*
  Add `genericAuto`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/195\n*
  Add `inputWith`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/222\n*
  Add`loadWithContext`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/215\n*
  Add `pair`/`unit`/`string`/`list`\n    * See: https://github.com/dhall-lang/dhall-haskell/pull/227\n\n1.8.2\n\n*
  Add `typeWithA` for type-checking custom `Embed`ded values\n* Fix `dhall{,-*}` executables
  to ignore ambient locale and use UTF8\n* Increase upper bound on `tasty` dependency\n\n1.8.1\n\n*
  `dhall` executable can now format output using `--pretty`\n* Improved Unicode suppport
  on Windows\n\n1.8.0\n\n* BREAKING CHANGE TO LANGUAGE: Add support for import integrity
  checks\n    * In practice, the likelihood of this breaking code in the wild is\n
  \     astronomically low\n    * This would only break code of the form `sha256:aaa...aaa`
  (i.e. a\n      variabled named `sha256` with a type annotation for a type with a
  name\n      64 characters long drawn from the first 6 characters of the alphabet)\n*
  BUG FIX: Fix parsing of single quotes in single-quoted strings\n* BUG FIX: Fix superfluous
  parentheses introduced by `dhall-format`\n* New `dhall-hash` executable\n    * This
  goes hand-in-hand with the added support for integrity checks since\n      the executable
  lets you compute the current hash of an import\n\n1.7.0\n\n* BREAKING CHANGE TO
  LANGUAGE: Update parser to match standardized grammar\n    * Trailing commas and
  bars no longer supported for union and record literals\n    * Paths no longer permit
  commas\n    * URL grammar is now RFC-compliant\n    * Environment variables can
  now be quoted to support full range of\n      POSIX-compliant names\n    * Text
  literals support full set of JSON escape sequences (such as `\\u2192`)\n* BREAKING
  CHANGE TO LANGUAGE: Single quoted strings strip leading newlines\n* BUG FIX: Fixed
  type-checking infinite loops due to non-type-checked variables\n  in context\n*
  BUG FIX: Fixed type-checking bug due to missing context when type-checking\n  certain
  expressions\n* BUG FIX: Fixed type-checking bug due to off-by-one errors in name
  shadowing\n  logic\n* New `dhall-format` executable to automatically format code\n*
  Performance optimizations to `Natural/fold` and `List/fold`\n* Improved parsing
  performance (over 3x faster)\n* Union literals can now specify the set value anywhere
  in the literal\n    * i.e. `< A : Integer | B = False | C : Text >`\n* New `Inject`
  instance for `()`\n* Several tutorial fixes and improvements\n\n1.6.0\n\n* BREAKING
  CHANGE TO THE API: Drop support for GHC 7.*\n* BREAKING CHANGE TO THE API: Add support
  for customizing Dhall import\n    * This is a breaking change because this changes
  the type of `loadWith`\n* BREAKING CHANGE TO THE API: Add field to `UnboundVariable`
  error containing\n* BUG FIX: Fix parsing single quotes in string literals\n  the
  name of the unbound variable\n* Add `List/concatMap` to the Prelude\n* You can now
  derive `Inject` and `Interpret` for types with unlabeled fields\n* Add new instances
  for `Interpret`:\n    * `[]`\n    * `(,)`\n* Add new instance for `Inject`\n    *
  `[]`, `Data.Set.Set`, `Data.Sequence.Seq`\n    * `(,)`\n    * `Int`, `Word8`, `Word16`,
  `Word32`, `Word64`\n* Add `Eq` instance for `Src`\n\n1.5.1\n\n* Increase upper bound
  on `vector` and `optparse-generic`\n\n1.5.0\n\n* BREAKING CHANGE: Add list concatenation
  operator: `(#)`\n    * This is a breaking change because it adds a new constructor
  to the `Expr`\n      type which breaks exhaustive pattern matches\n* BREAKING CHANGE:
  Add `Interpret` support for lazy `Text`\n    * This is a breaking change because
  it renames `text` to `strictText`\n* Add `Interpret` instance for decoding (a limited
  subset of) Dhall functions\n* Dhall no longer requires Template Haskell to compile\n
  \   * This helps with cross-compilation\n* Add `rawInput` utility for decoding a
  Haskell value from the `Expr` type\n* Add `loadWith`/`normalizeWith` utilities for
  normalizing/importing modules\n  with a custom context\n* Export `Type` constructor\n\n1.4.2\n\n*
  Fix missing `Prelude` files in package archive uploaded to Hackage\n\n1.4.1\n\n*
  Fix missing `tests/Tutorial.hs` module in package archive uploaded to Hackage\n\n1.4.0\n\n*
  BREAKING CHANGE TO THE LANGUAGE AND API: You can now supply custom headers for\n
  \ URL imports with the new `using` keyword\n    * This is a breaking change to the
  language because this adds a new reserved\n      `using` keyword\n    * This is
  a breaking change to the API because this adds a new field to the\n      `URL` constructor
  to store optional custom headers\n* BUG FIX: `:` is no longer a disallowed path
  character\n    * This was breaking URL imports with a port\n* BUG FIX: If you import
  a home-anchored path (i.e. `~/foo`) and that imports a\n  relative path (like `./bar`),
  then the canonical path of the relative import\n  should be home-anchored (i.e.
  `~/bar`).  However, there was a bug that made\n  lose the home anchor (i.e. `./foo/bar`),
  which this release fixes\n  likely fail due to no longer being home-anchored (i.e.
  `./foob\n* Add support for string interpolation\n* `merge` no longer requires a
  type annotation if you are merging at least one\n  alternative\n* Expanded Prelude\n
  \   * `./Prelude/Optional/all`\n    * `./Prelude/Optional/any`\n    * `./Prelude/Optional/filter`\n
  \   * `./Prelude/Optional/length`\n    * `./Prelude/Optional/null`\n    * `./Prelude/Text/concatMap`\n
  \   * `./Prelude/Text/concatMapSep`\n    * `./Prelude/Text/concatSep`\n* Rearrange
  detailed error messages to put summary information at the bottom of\n  the message\n\n1.3.0\n\n*
  BREAKING CHANGE TO THE API: Add support for new primitives, specifically:\n    *
  `(//)` - Right-biased and shallow record merge\n    * `Optional/build` (now a built-in
  in order to support build/fold fusion)\n    * `Natural/show`\n    * `Integer/show`\n
  \   * `Double/show`\n    * `Natural/toInteger`\n    * These all add new constructors
  to the `Expr` type, which would break\n      exhaustive pattern matches\n* BREAKING
  CHANGE TO THE LANGUAGE: Imported paths and URLs no longer support\n  the characters:
  \"()[]{}<>:\"\n    * This reduces the number of cases where you have to add a space
  after\n      imports\n    * Note that this does not exclude the `:` in the URL scheme
  (i.e. `http://`)\n* Increase connection timeout for imports\n* Variable names now
  allow the `-` character for all but the first character\n* You can now escape identifiers
  with backticks\n    * This lets you name identifiers so that they don't conflict
  with reserved\n      key words\n    * This is most useful when converting Dhall
  to other file formats (like\n      JSON) where you might need to emit a field that
  conflicts with one of\n      Dhall's reserved keywords\n* New `--version` flag for
  the `dhall` executable\n\n1.2.0\n\n* BREAKING CHANGE: Add support for customizing
  derived `Interpret` instances\n    * This is a breaking change to the Dhall library
  API since this changes the\n      signature of the `Interpret` class by replacing
  the `auto` method with a\n      more general `autoWith` method.  This `autoWith`
  now takes an\n      `InterpretOptions` argument that lets you customize derived
  field and\n      constuctor names\n    * In practice user programs that use the
  common path will be unaffected by\n      this change\n    * This is not a breaking
  change to the Dhall language\n* BREAKING CHANGE: Type annotations now bind more
  tightly than lambda\n  abstraction\n    * This is a breaking change to the Dhall
  language.  An expression like this:\n\n      ```\n      λ(x : A) → y : B\n      ```\n\n
  \     ... used to parenthesized implicitly as:\n\n      ```\n      (λ(x : A) → y)
  : T\n      ```\n\n      ... but is now parenthesized implicitly as:\n\n      ```\n
  \     λ(x : A) → (y : T)\n      ```\n\n      This is now consistent with Haskell's
  precedence and also consistent with\n      the precedence of `List` and `Optional`
  type annotations\n\n    * This change affects programs with an expression like this:\n\n
  \     ```\n      -- Assuming that `y : B`\n      λ(x : A) → y : A → B\n      ```\n\n
  \     The above program would type-check before this change but not type-check\n
  \     after this change.  You would you need to fix the above program by either\n
  \     changing the type signature to annotate just the type of `y` like this:\n\n
  \     ```\n      λ(x : A) → y : B\n      ```\n\n      ... or by adding explicit
  parentheses like this:\n\n      ```\n      (λ(x : A) → y) : A → B\n      ```\n\n
  \   * This is not a breaking change to the Dhall library API\n* BREAKING CHANGE:
  Add support for importing a path's contents as raw `Text` by\n  adding `as Text`
  after the import\n    * This is a breaking change to the Dhall language\n    * This
  is technically a breaking change, but is extremely unlikely to affect\n      you
  program.  This only changes the behavior of old programs that had an\n      expression
  of the form:\n\n      ```\n      /some/imported/function as Text\n      ```\n\n
  \     ... where `/some/imported/function` is an imported function being applied\n
  \     to two arguments, the first of which is a bound variable named `as` and\n
  \     the second of which is the type `Text`\n    * This is not a breaking change
  to the Dhall library API\n* BREAKING CHANGE: Add support for importing environment
  variables using\n  `env:VAR` syntax\n    * This is a breaking change to the Dhall
  library API since it adds a new\n      `Path` constructor\n    * This also technically
  a breaking change to the Dhall language but\n      extremely unlikely to affect
  your program.  This only changes the behavior\n      of old programs that had an
  expression of the form:\n\n      ```\n      env:VAR\n      ```\n\n      ... where
  `env` was the name of a bound variable and `:VAR` was a type\n      annotation without
  spaces around the type annotation operator\n\n      After this change the program
  would be interpreted as an import of the\n      contents for the environment variable
  named `VAR`\n* BREAKING CHANGE: Support importing paths relative to home directory
  using\n  `~/some/path` syntax\n    * This is a breaking change to the Dhall library
  API since it adds a new\n      field to the `File` constructor indicating whether
  or not the imported\n      path is relative to the home directory\n    * This is
  not a breaking change to the Dhall language and the new syntax\n      does not override
  any old syntax\n* Permit trailing commas and bars in record/union syntax\n* Improve
  location information for parsing errors\n\n1.1.0\n\n* BREAKING CHANGE: Non-empty
  lists no longer require a type annotation\n    * This is a breaking change to the
  Haskell library, not the Dhall language\n    * This change does not break existing
  Dhall programs\n    * The `Expr` type was modified in a non-backwards-compatible
  way\n* Add new `exprA` parser\n* Add new `InvalidType` exception if `input` fails
  on an invalid `Type`\n* Improve documentation and tutorial\n\n1.0.2\n\n* Add support
  for Nix-style \"double single-quote\" multi-line string literals\n* Add `isNormalized`\n*
  Improve documentation and tutorial\n* Build against wider range of `http-client`
  versions\n\n1.0.1\n\n* Initial release\n\n1.0.0\n\n* Accidental premature upload
  to Hackage.  This release was blacklisted\n"
basic-deps:
  http-client: '>=0.5.0 && <0.8'
  exceptions: '>=0.8.3 && <0.11'
  serialise: '>=0.2.0.0 && <0.3'
  either: '>=5 && <5.1'
  bytestring: <0.12
  data-fix: <0.4
  case-insensitive: <1.3
  haskeline: '>=0.7.2.1 && <0.9'
  base: '>=4.11.0.0 && <5'
  time: '>=1.1.4 && <1.13'
  parser-combinators: -any
  dhall: -any
  Diff: '>=0.2 && <0.5'
  aeson-pretty: <0.9
  unordered-containers: '>=0.1.3.0 && <0.3'
  atomic-write: '>=0.2.0.7 && <0.3'
  text: '>=0.11.1.0 && <1.3'
  megaparsec: '>=7 && <9.2'
  dotgen: '>=0.4.2 && <0.5'
  cborg: '>=0.2.0.0 && <0.3'
  filepath: '>=1.4 && <1.5'
  cborg-json: '>=0.2.2.0 && <0.3'
  lens-family-core: '>=1.0.0 && <2.2'
  memory: '>=0.14 && <0.17'
  repline: '>=0.4.0.0 && <0.5'
  th-lift-instances: '>=0.1.13 && <0.2'
  containers: '>=0.5.8.0 && <0.7'
  ansi-terminal: '>=0.6.3.1 && <0.12'
  parsers: '>=0.12.4 && <0.13'
  http-client-tls: '>=0.2.0 && <0.4'
  contravariant: <1.6
  text-manipulate: '>=0.2.0.1 && <0.4'
  uri-encode: <1.6
  cryptonite: '>=0.23 && <0.30'
  network-uri: '>=2.6 && <2.7'
  mtl: '>=2.2.1 && <2.3'
  pretty-simple: <4.1
  mmorph: <1.3
  hashable: '>=1.2 && <1.4'
  prettyprinter: '>=1.5.1 && <1.8'
  transformers: '>=0.5.2.0 && <0.6'
  optparse-applicative: '>=0.14.0.0 && <0.17'
  deepseq: <1.5
  scientific: '>=0.3.0.0 && <0.4'
  half: '>=0.2.2.3 && <0.4'
  http-types: '>=0.7.0 && <0.13'
  aeson: '>=1.0.0.0 && <1.6'
  template-haskell: '>=2.13.0.0 && <2.18'
  profunctors: '>=3.1.2 && <5.7'
  vector: '>=0.11.0.0 && <0.13'
  prettyprinter-ansi-terminal: '>=1.1.1 && <1.2'
  directory: '>=1.3.0.0 && <1.4'
all-versions:
- 1.0.1
- 1.0.2
- 1.1.0
- 1.2.0
- 1.3.0
- 1.4.2
- 1.5.0
- 1.5.1
- 1.6.0
- 1.7.0
- 1.8.0
- 1.8.1
- 1.8.2
- 1.9.0
- 1.9.1
- 1.10.0
- 1.11.0
- 1.11.1
- 1.12.0
- 1.13.0
- 1.13.1
- 1.14.0
- 1.15.1
- 1.16.1
- 1.17.0
- 1.18.0
- 1.19.0
- 1.19.1
- 1.20.1
- 1.21.0
- 1.22.0
- 1.23.0
- 1.24.0
- 1.25.0
- 1.26.1
- 1.27.0
- 1.28.0
- 1.29.0
- 1.30.0
- 1.31.1
- 1.32.0
- 1.33.0
- 1.33.1
- 1.34.0
- 1.35.0
- 1.36.0
- 1.37.0
- 1.37.1
- 1.38.0
- 1.38.1
- 1.39.0
- 1.40.1
author: Gabriel Gonzalez
latest: 1.40.1
description-type: haddock
description: |-
  Dhall is an explicitly typed configuration language that is not Turing
  complete.  Despite being Turing incomplete, Dhall is a real programming
  language with a type-checker and evaluator.

  Use this library to parse, type-check, evaluate, and pretty-print the Dhall
  configuration language.  This package also includes an executable which
  type-checks a Dhall file and reduces the file to a fully evaluated normal
  form.

  Read "Dhall.Tutorial" to learn how to use this library
license-name: BSD-3-Clause
