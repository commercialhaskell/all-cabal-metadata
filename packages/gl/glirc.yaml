all-versions:
- '2.0'
- '2.1'
- '2.2'
- '2.3'
- '2.4'
- '2.5'
- '2.6'
- '2.7'
- '2.8'
- '2.9'
- '2.10'
- '2.11'
- '2.12'
- '2.13'
- '2.14'
- '2.15'
- '2.16'
- '2.17'
- '2.18'
- '2.19'
- '2.20'
- 2.20.1
- 2.20.1.1
- 2.20.2
- 2.20.2.1
- 2.20.3
- 2.20.4
- 2.20.5
- 2.20.6
- '2.21'
- 2.21.1
- '2.22'
- '2.23'
- '2.24'
- '2.25'
- '2.26'
- '2.27'
- '2.28'
- '2.29'
- '2.30'
- '2.31'
- '2.32'
- '2.33'
- 2.33.1
- '2.34'
- '2.35'
- '2.36'
- '2.37'
- '2.38'
- '2.39'
- 2.39.0.1
- '2.40'
- 2.40.1
author: Eric Mertens
basic-deps:
  HsOpenSSL: '>=0.11 && <0.12'
  async: '>=2.2 && <2.3'
  attoparsec: ^>=0.14
  base: '>=4.15 && <4.20'
  base64-bytestring: '>=1.0.0.1 && <1.3'
  bytestring: '>=0.10.8 && <0.13'
  config-schema: ^>=1.3.0.0
  config-value: ^>=0.8
  containers: '>=0.5.7 && <0.8'
  curve25519: ^>=0.2.5
  directory: '>=1.2.6 && <1.4'
  filepath: '>=1.4.1 && <1.6'
  free: '>=4.12 && <5.3'
  githash: ^>=0.1.6
  glirc: '>=0'
  hashable: '>=1.2.4 && <1.5'
  hookup: ^>=0.8
  irc-core: ^>=2.12
  kan-extensions: '>=5.0 && <5.3'
  lens: '>=4.14 && <5.3'
  network: '>=2.6.2 && <3.2'
  psqueues: '>=0.2.7 && <0.3'
  random: '>=1.1 && <1.3'
  regex-tdfa: '>=1.3.1 && <1.4'
  semigroupoids: '>=5.1 && <6.1'
  split: '>=0.2 && <0.3'
  stm: '>=2.4 && <2.6'
  template-haskell: '>=2.11 && <2.22'
  text: '>=1.2.2 && <2.2'
  time: '>=1.9 && <1.14'
  transformers: '>=0.5.2 && <0.7'
  typed-process: ^>=0.2.10
  unix: '>=2.7 && <2.9'
  unordered-containers: '>=0.2.11 && <0.3'
  vector: '>=0.11 && <0.14'
  vty: '>=6.1 && <6.2'
  vty-unix: ^>=0.2.0.0
changelog: |
  # Revision history for glirc

  ## 2.40.1

  * Fix exception on /exec with a non-zero exit code
  * Externalize command documentation

  ## 2.40.0.1

  * Build on GHC 9.0

  ## 2.40

  * vty-6 support
  * deduplicated /url
  * locally processed /who
  * locally processed /list
  * colorized channel identifiers
  * better channel and user-mode highlighting. highlights are now per-server so configuration files will need to be updated
  * support for 24-bit color output
  * OS notification support
  * More notification levels for each window
  * Better away status handling
  * Config file level window hint configuration

  ## 2.39

  * Extra oper commands and reply parsing
  * Account tracking with account-tags
  * Added matterbridge hook
  * Support SASL SCRAM
  * Add locked editor mode (F7)
  * Add `tls-verify` to specify expected certificate hostname

  ## 2.38

  * Avoid ping timeout disconnects while other packets are still arriving
  * Add `never-highlights` configuration setting to stop common words from being treated as nicknames
  * Add a multi-line editor mode (default toggle with F6)
  * More tolerate nickname completion
  * Preserve server names in server replies (visible in detail view)
  * Window names are persistent rather than alphabetical. Manage them with `/setname` and `/setwindow`
  * Added hook for extension to query window lines
  * More complete rendering for rare server replies
  * Prettier columns in `/names`
  * Add small scroll with Meta-PgUp/PgDown
  * Built-in support for `/umode` for changing user modes (a common macro previously)
  * Support strikethrough formatting (can require terminfo edits on common terminals to see it)
  * Removed DCC support

  ## 2.37

  * Add `/new-self-signed-certificate PATH [keysize]` to make it easier to configure secure services logon
  * Add STARTTLS support: `tls:` configuration settings are now: `yes`, `no`, `starttls`
  * Add separate `tls-verify: no` setting for disabling hostname verification instead of old `tls: yes-insecure`
  * Configuration file supports `$` macros and `@load` / `@splice` directives from config-value
  * Updates for hookup library improvements to concurrent connect algorithm

  ## 2.36

  * **Changed executable name to `glirc`**
  * Allow all windows (not just chat message windows) to be added as split-screen targets
  * Chose a random nickname when list of alternatives is exhausted
  * Add simple man page
  * Add `/monitor`
  * Support specifying `bind-hostname` to pick a local address to connect
    from in favor of `protocol-family`. To pick a protocol family you
    can now specify `bind-hostname: "0.0.0.0"` or `bind-hostname: "::"`
  * Add TLS key PEM password configuration
  * Make all configuration file passwords able to be loaded from executing a command
  * Make SASL mechanism specification specific and support an optional
    authorization identity `authzid` used in rare circumstances but
    supported by SASL.

    ```
    sasl: -- example 1
      mechanism: plain -- sasl defaults to plain if not specified
      username: "myuser"
      password: "mypassword"

    sasl: -- example 2
      mechanism: external
      authzid: "otheruser" -- optional

    sasl: -- example 3
      mechanism: ecdsa-nist256p-challenge
      username: "myuser"
      private-key: "path/to/my.key"
    ```

    Note that now using a client-side TLS certificate is an independent
    configuration from using EXTERNAL. To use both you need to configure
    both!

  ## 2.35
  * Added client certificate information to `/cert`

  ## 2.34

  * Add `/dump` command
  * Fix command tab-completion with leading spaces
  * Preserve last message timestamp across `/reconnect`
  * Add regular expression for QUIT message that trigger reconnects
  * Removes unused `userinfo` field from configuration
  * Wallops are more noticable now

  ## 2.33.1

  * Support for GHC 8.8.1
  * Add `/trace` command

  ## 2.33

  * Fixed cursor position with wide characters in input box
  * Added ability to force request capabilities.
  * Generalized `FreRelay` hook
  * Add `show-accounts` setting to make account status visible
  * Query channel modes on join

  ## 2.32

  * Fix SASL EXTERNAL
  * Better /url matching
  * Support for config-schema improvements

  ## 2.31

  * Added TLS fingerprint pinning with `tls-cert-fingerprint` and `tls-pubkey-fingerprint`
  * Addded `/cert` command
  * Improved C API `void*` passing to always pass around a single pointer.
  * Better rendering for `/whois` and `/whowas`
  * Better support for ircop commands, responses, and modes
  * Channel, user, and snomask modes are can be styled
  * Bugfix in textbox rendering for formatted multi-line inputs.
  * Improved `/palette` rendering
  * Switch window focus when *forwarded*
  * Add support for receiving files with DCC (thanks Ruben Astudillo)

  ## 2.30

  * Implement support for chghost <https://ircv3.net/specs/extensions/chghost-3.2.html>
  * Implement support for userhost-in-names <https://ircv3.net/specs/extensions/userhost-in-names-3.2.html>
  * Implement support for SASL EXTERNAL authentication
  * Implement support for CAP 302 <https://ircv3.net/specs/core/capability-negotiation.html>
  * Implement support for sts <https://ircv3.net/specs/extensions/sts.html>
  * Add ACCOUNT messages to the metadata lines
  * Add logic for server defined user modes
  * Ignore leading whitespace when interpreting commands
  * Handle more formatting color codes

  ## 2.29
  * Add support for timers to the extension API
  * Add `glirc_set_focus` API call

  ## 2.28
  * Add formatting reference to `/palette`
  * Make RTLD flags configurable when loading an extension
  * Update client's internal hostname on `RPL_HOSTHIDDEN`
  * Support IRCv3.2 `server-time` extension over ZNC-specific one
  * Lots of work on the Lua extension code and documentation
  * Added `glirc_user_account` and `glirc_user_channel_modes`
    extension API entrypoints.
  * Added support for `account-notify` and `extended-join`
  * Added configurable "arguments" to the C extensions

  ## 2.27
  * Requires GHC 8.4
  * Show channel topic in channel on join
  * Fix socket leak when failing to load TLS certificates
  * Add delay when indicating sent ping to reduce noise
  * Add support for italics in formatting

  ## 2.26
  * Updates for GHC 8.4.1
  * Added `/toggle-show-ping` and `show-ping` configuration setting
    to toggle visibility of the ping round-trip times.

  ## 2.25
  * `/ignore` can list ignores and supports full wildcard masks
  * Updated C extension API
  * Improved OTR extension to avoid interacting with ZNC replays
  * Added `protocol-family` configuration option. Set to `inet` or
    `inet6` to force a particular IP protocol.

  ## 2.24

  * `/query` now takes a message parameter and tab-completes
    like `/msg`.

  ## 2.23

  * CONFIGURATION FILE CHANGE: Relative paths are now resolved
    from the directory of the configuration file. The "~" alias
    for the home directory works for resolving paths relative
    to $HOME. Absolute paths are unmodified.

  * Support `network:#channel` in `/query`

  * Add an optional OTR extension. See the `otr-extension/` directory
    and the wiki for more information.

  * Extended the C API with `glirc_inject_chat` and `chat_entrypoint`

  * Smarter WYSIWYG highlighting in text edit box. Nicknames are
    highlighted and `/mode` command parameters get correct placeholders.

  * Added more information to `/palette`

  * Added "human readable" labels to `/rtsstats`

  ## 2.22

  * Added dynamic indentation of wrapped lines. Lines now
    wrap to where the message portion of the line started.
    This removes `indent-wrapped-lines` configuration setting
  * Added pervasive word-boundary oriented line wrapping
    (beyond what was previously restricted to chat messages)
  * Made nick prefix padding configurable to be on left or right.
    See `nick-padding` setting in `glirc2 --config-format`.
    In addition this setting is now reconfigurable at runtime
    via `/reload`
  * Added `/oper` command for network operator authentication.
  * Memory savings by packing message timestamp information, and
    using the "detailed" image for regular expression matching.
  * Added `/rtsstats` command for inspecting the GHC RTS statistics
  * Added many minor IRC query commands: `admin`, `info`, `map`, `rules`
    `motd`, `version`, `lusers`, `kill`, `knock`, `list`.

  ## 2.21.1

  * Support for latest `config-schema`
  * Adapt extension API to help support stub Rust extension

  ## 2.21

  * Make metadata toggle `F4` a window-level setting instead of client level
  * Add configuration option to hide metadata by default `hide-metadata`
  * Make keymap configurable under `key-bindings`, add `/keymap` command
  * Add transient error message view, press `ESC` to clear
  * Implement two-column split window mode: `/toggle-layout` and `F5`
  * Implement word-boundary based line wrapping

  ## 2.20.6

  * Switch to new `config-schema` package for configuration file loading.
  * Add `--config-format` flag to executable to show configuration file format.

  ## 2.20.5

  * Add line indicating message since previous time window was focused.
    The palette for this is configurable as `line-marker`

  ## 2.20.4

  * Add `/query` alias for `/channel`
  * Add `/names` alias for `/users`
  * Update to build on GHC 8.2.1-rc1 with Cabal-2.0.0.0

  ## 2.20.3

  * Nicer `/help` system, commands are grouped
  * Added `/splits+` and `/splits-` for incremental updates to splits
  * Jump-to-activity returns to original window after activity is visited
  * Extended activity view makes use of empty space above text input
  * Parse the timestamp and duration from `/whois` response

  ## 2.20.2.1

  * Support `vty-5.15`

  ## 2.20.2

  * Remove `memory` dependency
  * Add `indent-wrapped-lines` setting

  ## 2.20.1.1
  * Remove macro dependency on happy and alex being installed for version information

  ## 2.20.1
  * Support `vty-5.11.1`

  ## 2.20

  * Move from `tls` to `HsOpenSSL` support via the new `hookup` package

  ## 2.19

  * Smarter text box tracks "scroll" position independently from cursor
  * Added `--full-version` flag
  * Remove `regex-tdfa-text` dependency
  * Added `bell-on-mention` client setting
  * Added `ExportCApi` cabal flag to help with loading the client in GHCi

  ## 2.18

  * Add digraph support under `M-k` and `/digraphs`
  * Add ECDSA-NIST256P-CHALLENGE support
  * Load mask list on `/masks`
  * Add `C-x` to change to next network window
  * Allow `/clear NETWORK *` to clear all windows for the given network

  ## 2.17

  * Add `reconnect-attempts` setting
  * Add persistence for `/grep` and `/grepi`
  * Add filter argument to `/windows`
  * Better tab completion for `/channel` and `/focus`
  * Isolate and number URLs in view with `/url`
  * Map `M-Left` and `M-Right` to backward word and forward word

  ## 2.16

  * Add `/splits` to show multiple chat windows simultaneously

  ## 2.15

  * Add `/mentions`
  * Add macro argument declarations
  * Add indication when a command is still a prefix or not of a valid command
  * Support quoted strings arguments to /exec
  * Add `F4` to toggle visibility of metadata lines
  * `tls-insecure` setting was incorrectly behaving like normal insecure
  * Add `C-t` to swap characters
  * Add `ESC` to return to messages window

  ## 2.14

  * Add `/help`
  * Add `/palette`
  * Add `F3` to toggle activity detail bar

  ## 2.13

  * Add disconnect expansion, support expansions in `connect-cmds`
  * Add default expansion syntax `${var|default}`
  * Add support for multiple nicknames to try on connect
  * Add `ignores` section to configuration
  * Add `url-opener` section to configuration and `/url` command

  ## 2.12

  * Remove `tls-insecure` configuration option in favor of `tls: yes-insecure`
  * Implement fancy command placeholder rendering and argument parsing
  * Improved reconnect logic
  * Improved connection error messages

  ## 2.11

  * Add `M-S` to jump to previously focused window
  * Add `extra-highlights` section
  * Tab complete server names in `/connect`
  * Add `/windows` command for listing active windows
  * Add `glirc_clear_window` C API procedure
  * Allow `process_message` callback to drop messages
  * Add optional network and channel arguments to `/clear` (intended to assist macros)
  * Automatically reconnect on ping timeout
  * Many commands will report message to client window on error

  ## 2.10

  * Fixes for multi-line editing
  * Multiple, sequential kills all fill the same yank buffer

  ## 2.9

  * Dynamically loadable extensions
  * Implement Lua scripting extension
  * Enable support for batch messages
  * Grow metadata lines to the right

  ## 2.8

  * Support `vty-5.8`
  * Implement initial support for macros
  * Support `znc.in/self-message`

  ## 2.7

  * Switch to `regex-tdfa` (easier to install on MacOS than `text-icu`)
  * Tab-complete starts with most recent nick
  * Add `/reload`
  * Add custom palette entry for self highlights
  * Add ability to set background colors and styles in palette

  ## 2.6

  * `connect-cmds` now use actual client commands instead of raw IRC messages. For example `msg user my message` or `join #mychannel`
  * Multiple lines can be held in the textbox at once. Pasting multiple lines insert those lines into the textbox rather than sending them immediately.
  * Added `M-d` and `M-Enter` key bindings
  * Added `name` field to server configuration
  * Extract `irc-core` library again
  * Configurable self color

  ## 2.5

  * Add facilities for hooks that can alter the IRC message stream.
  * Implement a hook that handles the ZNC `buffextras` plugin.
  * Implement configurable nick color highlight palette.
  * Resolve relative paths starting at the home directory.
  * Significantly configurable UI colors

  ## 2.4

  * Support XDG configuration directory, e.g. `~/.config/glirc/config`
  * Add more window names. Shift selects second set of names.
  * Add `/channel` and `/say`
  * Improve `/focus` tab completion

  ## 2.3

  * Add commands `/znc`
  * Add initial support for ZNC's playback module and `/znc-playback` command
  * Don't consider message seen when in `masklist`, `userlist`, or `channelinfo` windows
  * Add terminal bell on command error

  ## 2.2

  * Add commands `/ison`, `/userhost`, `/away`, `/notice`, `/ctcp`, `/links`, `/time`, `/stats`
  * Added context-sensitive completion to `/mode`
  * Render CTCP messages
  * Memory performance improvements
  * Improved logic on nick changes
  * Support for fractional flood settings
  * Fixed VTY formatting bug
  * Add counts to the mask and user lists

  ## 2.1

  * Add red highlighting for own nick
  * Synchronize reply codes with ircd-seven
  * Add textual interpretation of reply codes
  * Add SASL support
  * Add `/channelinfo` command

  ## 2.0

  * First version of glirc rewrite
changelog-type: markdown
description: |
  GLIRC - Advanced Console IRC Client
  =============

  <a href="https://repology.org/project/glirc/versions">
      <img src="https://repology.org/badge/vertical-allrepos/glirc.svg?exclude_unsupported=1" alt="Packaging status" align="right">
  </a>

  * **glirc** [![Hackage](https://img.shields.io/hackage/v/glirc.svg)](https://hackage.haskell.org/package/glirc)
  * **irc-core** [![Hackage](https://img.shields.io/hackage/v/irc-core.svg)](https://hackage.haskell.org/package/irc-core)
  * **hookup** [![Hackage](https://img.shields.io/hackage/v/hookup.svg)](https://hackage.haskell.org/package/hookup)

  Client Features
  ---------------

  * Support for [a wide variety of IRCv3 capabilities](https://ircv3.net/software/clients#desktop-clients).
  * Joins, parts, and quits fold into one line to save space without sacrificing context.
  Detailed view (F2) shows additional info, such as part/quit messages.
  * Ignore support that folds ignored messages into the joins and parts. Detailed view shows the messages.
  * Searchable channel list, who and names list, and list modes (beqI) views separate from chat messages.
  * Dynamic, in-place message and list view searching using `/grep`.
  * View and open long URLs with `/url`.
  * Context-sensitive tab completion and command hints.
  * WYSIWYG mIRC formatting input.
  * Multi-line editing; Enter sends one line at a time.
  * Atheme-flavored-ChanServ integration.
  * Nicknames in chat messages are colored to match messages from that nickname.
  * Correct handling of [STATUSMSG](https://modern.ircdocs.horse/#statusmsg-parameter), including CTCP ACTIONs.
  * Command macros.
  * Support for a wide variety of SASL authentication mechanisms, including `ECDSA-NIST256P-CHALLENGE`.
  * Split-screen view.
  * Configurable color palette.
  * Desktop notifications on important messages while unfocused. Can run arbitrary commands instead (or turn them off).
  * Extensions, a Lua plugin system, and trivial piping of IRC messages to arbitrary commands with `/exec`.
  * Plenty more, but this list is getting a bit long.

  ![](https://raw.githubusercontent.com/wiki/glguy/irc-core/images/screenshot.png)

  Building
  ========

  [![Build Status](https://github.com/glguy/irc-core/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/glguy/irc-core/actions/workflows/haskell-ci.yml)

  glirc uses recent versions of packages, make sure your package databases are
  up-to-date:

  ```
  $ cabal update
  ```

  To install the latest version from Hackage using cabal-install:

  ```
  $ cabal install glirc
  ```

  Building with cabal-install from source checkout

  ```
  $ cabal install --dep
  $ cabal build
  ```

  Startup
  =======

  ```
  glirc [FLAGS] INITIAL_NETWORKS...
    -c PATH  --config=PATH    Configuration file path
    -!       --noconnect      Disable autoconnecting
    -h       --help           Show help
             --config-format  Show configuration file format
    -v       --version        Show version
             --full-version   Show version and versions of all linked Haskell libraries
  ```

  Environment variables
  ```
  USER=<default nickname and username>
  IRCPASSWORD=<your irc password>
  ```

  Configuration file
  =================

  Most of glirc's settings are specified using a configuration file.
  The file format is [config-value](http://hackage.haskell.org/package/config-value),
  an indentation-sensitive format that resembles YAML.
  It has macros which are documented
  [here](https://hackage.haskell.org/package/config-value/docs/Config-Macro.html).

  The default configuration file path is `~/.config/glirc/config`.
  Relative paths are relative to the home directory.

  To view the full list of configuration variables,
  run `glirc --config-format | less`.
  If any variable is unspecified, a default value will be used instead.

  ```
  -- vim: filetype=config-value
  -- Grab the Vim syntax highlighting file from the config-value package

  -- Defaults used when not specified on command line
  defaults:
    nick:            "yournick"
    username:        "yourusername"
    realname:        "Your real name"
    tls:             yes -- or: no, or: starttls
                         -- enabling tls automatically uses port 6697

  -- Override the defaults when connecting to specific servers
  servers:
    * name: "libera"
      hostname:   "irc.libera.chat"
      sasl:
        username: "someuser"
        password: "somepass"
      log-dir:    "/home/myuser/ircLogs"
      connect-cmds:
        * "join #glirc,#someotherchannel"

    * name: "znc"
      hostname:        "znc.example.com"
      port:            7000 -- Override the default port
      password:        "IRC server password"
      tls-verify:      no
      message-hooks:   ["buffextras"] -- Use this when using ZNC's "buffextra" module to get correct playback
      flood-penalty:   -1 -- Disable flood controls
      flood-threshold: -1

  macros:
    * name: "wipe"
      commands:
        * "clear"
        * "znc *status clearbuffer $channel"

    * name: "mysplits"
      commands:
        * "splits libera:#haskell libera:#haskell-offtopic"

    -- Example use of macro in combination with an extension
    * name: "extra"
      commands:
        * "extension Lua somecommand $network $channel"

  extra-highlights: ["glirc", "hello"]

  nick-padding:
     side: left -- Try "right" if you don't like left padding
     width: 13

  url-opener: "open" -- This works on macOS; use "xdg-open" for most Linuxes

  key-bindings:
    * bind: "C-M-b"
      command: "masks b"

  palette:
    line-marker: yellow
    time:
      fg: [10,10,10] -- RGB values for color for timestamps
      bg: blue
    identifier-colors: -- Used for nicknames and channel names
      [ cyan, magenta, green, yellow, blue
      , bright-cyan, bright-magenta, bright-green, bright-blue
      , 218,  88,  89, 124, 160, 205, 212, 224 -- reds
      ,  94, 130, 166, 172, 208, 214, 216, 180 -- oranges
      ,  58, 226, 229, 184, 187, 100, 142, 220 -- yellows
      ,  22,  34,  40,  82,  70,  64,  48,  85 -- greens
      ,  25,  27,  33,  39,  51,  80,  81,  75 -- blues
      ,  69,  61,  56,  54, 129,  93,  99, 147 -- purples
      ]

  notifications: terminal-notifier -- Use terminal-notifier for nicer notifications (macOS only)
  ```

  Commands
  ========

  glirc has built-in documentation for all of its commands.
  To view the full list of commands and what they do, use `/help`.
  To view help on a specific command, use `/help <command>`.

  Unlike some other clients, glirc does not send unknown commands to the server.
  Use `/quote` to send arbitrary IRC commands.

  The following is a curated list of commands for basic use:

  * `/help [command]` - Show in-client help
  * `/exit` - Terminate the client
  * `/reload [path]` - Load a new configuration file (optional path)
  * `/palette` - Show the client palette
  * `/url [n]` - Execute url-opener on the nth URL in the current window (defaults to first)
  * `/toggle-activity-bar` - toggle channel names in activity bar
  * `/toggle-detail` - toggle full detail view of messages
  * `/toggle-metadata` - toggle visibility of channel metadata (joins, parts, quits, nick changes, etc)

  Connection

  * `/connect <name>` - Connect to the given server
  * `/quit [message]` - Gracefully terminate connection to the current server
  * `/reconnect` - Reconnect to the current server
  * `/nick <nick>` - Change nickname
  * `/away [message]` - Set away status; no message removes away status

  Window management

  * `/windows [filter]` - List all open windows (filters: networks, channels, users)
  * `/setname [letter]` - Assign a one-letter name to the given window.
  * `/channel <channel>` - Change focus to channel/user on current network (alias: `/c`)
  * `/channel <network>:[channel]` - Change focus to channel/user on the specified network (alias: `/c`)
  * `/clear [network] [channel]` - Clear contents of current or specified window
  * `/splits [focuses...]` - Enable split-screen view. Focuses should be space delimited list of NETWORK:CHANNEL
  * `/splits+ [focuses...]` - Incremental addition to splits
  * `/splits- [focuses...]` - Incremental removal from splits
  * `/toggle-layout` - toggle split-screen layout between 1 and 2 column view

  Chat commands

  * `/join <channel>` - Join a channel (alias: `/j`)
  * `/part [msg]` - Part from current channel
  * `/query <target> [msg]` - Switch focus to target window on current server, optionally send message (alias: `/q`)
  * `/msg <target> <msg>` - Send a message on the current server to target
  * `/me <msg>` - Send action message to channel
  * `/say <msg>` - Send normal message to channel; useful for macros and messages starting with a slash
  * `/ignore <mask>...` - Toggle ignore status on a list of masks
  * `/topic [msg]` - Display or set the current topic of a channel

  Views

  * `/channelinfo` - Show channel topic, creation, url
  * `/grep [flags] <regex>` - Filter using a regular expression
  * `/ignore` - Show all ignore masks
  * `/list` - View the list of public channels on the network
  * `/masks <mode>` - Show channel bans(b), quiets(q), exempts(e), or invex(I)
  * `/mentions` - Show all the highlighted lines across all windows
  * `/names` - Show the user list for the current channel
  * `/who [channel] [options]` - Perform WHO query, sending options to the server, or show the results of the previous query.

  ZNC-specific

  * `/znc <module> <parameters>` - send command to ZNC module without echoing to all clients
  * `/znc-playback` - ZNC playback module - play everything
  * `/znc-playback <time>` - ZNC playback module - play everything start at the given time today
  * `/znc-playback <date> <time>` - ZNC playback module - play everything start at the given time

  Miscellaneous

  * `/dump <filename>` - Dump current window to file
  * `/extension <extension name> <params...>` - Send the given params to the named extension
  * `/exec [-n network] [-c channel] <command> <arguments...>` - Execute a command; if no network or channel are provided send output to client window, if network and channel are provided send output as messages, if network is provided send output as raw IRC messages.
  * `/quote <raw command>` - Send a raw IRC command to the server

  Keyboard Shortcuts
  ==================

  Note that these keybindings are using *Emacs* syntax. `C-a` means "hold
  control and press A". `M-a` means "hold meta key and press A". On most
  modern keyboards the *Meta* key is labeled *Alt* or *Option*.

  To view the full list of keybindings and what they do,
  use `/keymap` from within glirc.

  The following is a curated list of default keybinds for basic use:

  Navigation

  * `Page Up` scroll up
  * `Page Down` scroll down
  * `C-n` next window
  * `C-p` previous window
  * `C-x` next network window
  * `M-<name>` jump to window with the given one-letter name
  * `M-a` jump to activity
  * `M-s` jump to previous window
  * `ESC` return to messages view (from userlist, masklist, help, etc)

  Editing

  * `C-b` bold
  * `C-c` color
  * `C-v` invert foreground/background
  * `C-_` underline
  * `C-]` italic
  * `C-o` reset formatting

  * `Tab` autocompletion
  * `M-k` replace 2 characters before the cursor with a character specified in `/digraphs`

  * `C-a` beginning of line
  * `C-e` end of line
  * `C-k` delete to end
  * `C-u` delete to beginning
  * `C-d` delete at cursor
  * `C-w` delete word backwards
  * `C-y` paste from yank buffer
  * `C-t` swap characters at cursor
  * `M-f` forward word
  * `M-b` backward word
  * `M-Right` forward word
  * `M-Left` backward word
  * `M-Backspace` delete word backwards
  * `M-d` delete word forwards
  * `M-Enter` insert newline

  Client settings

  * `F2` toggle detailed view
  * `F3` toggle detailed activity bar
  * `F4` toggle metadata visibility
  * `F7` toggle Enter key lock

  Macros
  ======

  The `macros` configuration section allows you to define
  sequences of commands. These commands can contain expansions.

  Configuration
  -------------

  * `name` - text - name of macro
  * `arguments` - text - space separated list of argument names (suffix name with `?` when optional)
  * `commands` - list of text - commands to send after expansion

  Macro Expansions
  ----------------

  Variable names and integer indexes can be used when defining commands.
  Variables are specified with a leading `$`. For disambiguation a variable
  name can be surrounded by `{}`. `$channel` and `${channel}` are
  equivalent. Default values can be provided following a pipe: `${var|default}`.

  * `channel` - current channel
  * `network` - current network name
  * `nick` - current nickname

  The arguments to a command will be mapped to integer indexes.

  * `0` - first argument
  * `1` - second argument (etc.)
description-type: markdown
hash: 9576d63114f182bc546269978037cf963fe753603c7f6f00c2cf0d8ec31a4444
homepage: https://github.com/glguy/irc-core
latest: 2.40.1
license-name: ISC
maintainer: emertens@gmail.com
synopsis: Console IRC client
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  base: '>=0'
  glirc: '>=0'
