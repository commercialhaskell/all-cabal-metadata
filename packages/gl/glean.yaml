all-versions:
- 0.1.0.0
author: Facebook, Inc.
basic-deps:
  Glob: '>=0'
  HUnit: '>=0'
  STMonadTrans: '>=0'
  aeson: '>=0'
  aeson-pretty: '>=0'
  ansi-terminal: '>=0'
  array: '>=0.5.2.0 && <0.6'
  async: '>=2.2.1 && <2.3'
  attoparsec: '>=0.13.2.3 && <0.15'
  attoparsec-aeson: '>=2.1 && <2.3'
  base: '>=4.11.1 && <4.19'
  binary: '>=0.8.5.1 && <0.9'
  bytestring: '>=0.10.8.2 && <0.12'
  clock: '>=0'
  containers: '>=0'
  contravariant: '>=1.5 && <1.6'
  criterion: <1.7
  criterion-measurement: '>=0'
  data-default: '>=0'
  deepseq: '>=1.4.3.0 && <1.5'
  directory: '>=1.3.1.5 && <1.4'
  exceptions: '>=0.10.0 && <0.11'
  extra: '>=0'
  fb-util: '>=0'
  filepath: '>=1.4.2 && <1.5'
  fuzzy: '>=0'
  ghc: '>=0'
  ghc-prim: '>=0.5.2.0 && <0.11'
  glean: '>=0'
  hashable: '>=1.2.7.0 && <1.6'
  haskeline: '>=0.7.3 && <0.9'
  haxl: '>=2.1.2.0 && <2.6'
  hie-compat: <0.3.1.2
  hiedb: '>=0.6 && <0.7'
  hinotify: '>=0.4.1 && <0.5'
  http-types: '>=0'
  json: '>=0'
  mtl: '>=2.2.2 && <2.4'
  network-uri: '>=2.6.1.0 && <2.7'
  optparse-applicative: '>=0'
  parsec: '>=3.1.13.0 && <3.2'
  prettyprinter: '>=1.2.1 && <1.8'
  process: '>=1.6.3.0 && <1.7'
  random: '>=0'
  regex-base: '>=0'
  regex-pcre: '>=0'
  safe: '>=0'
  safe-exceptions: '>=0'
  scientific: '>=0'
  split: '>=0'
  statistics: '>=0'
  stm: '>=2.5.0.0 && <2.6'
  tar: '>=0.5.1.0 && <0.6'
  temporary: '>=0'
  text: '>=1.2.3.0 && <2.2'
  text-show: '>=0'
  thrift-http: '>=0'
  thrift-lib: '>=0'
  time: '>=1.8.0.2 && <1.13'
  transformers: '>=0.5.6 && <0.7'
  unix: '>=2.7.2.2 && <2.9'
  unordered-containers: '>=0.2.9.0 && <0.3'
  utf8-string: '>=0'
  uuid: '>=0'
  vector: '>=0.12.0.1 && <0.14'
  vector-algorithms: '>=0'
  wai: '>=0'
  warp: '>=0'
changelog: |
  # Revision history for glean

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  [![CI](https://github.com/facebookincubator/Glean/actions/workflows/ci.yml/badge.svg)](https://github.com/facebookincubator/Glean/actions/workflows/ci.yml)
  [![Glean demo Docker image](https://github.com/facebookincubator/Glean/actions/workflows/glean-docker.yml/badge.svg)](https://github.com/facebookincubator/Glean/actions/workflows/glean-docker.yml)

  # Glean

  [Glean home](https://glean.software) | [Documentation](https://glean.software/docs/introduction)

  Glean is a system for working with facts about source code. You can
  use it for:

  * Collecting and storing detailed information about code
    structure. Glean is designed around an efficient storage model that
    enables storing information about code at scale.

  * Querying information about code, to power tools and experiences from
    online IDE features to offline code analysis.

  ## Status

  Glean is pre-release software. There are many rough edges; there are
  limited language indexers available initially; the build system is not as smooth
  as we would like. However, we want to make it available for you to experiment
  with and contribute to.

  We'd love to hear feedback! If you run into problems or have
  suggestions please file an
  [issue](https://github.com/facebookincubator/Glean/issues).

  ## Language coverage

  There is currently full support for:

  * [C++ and C](https://glean.software/docs/indexer/cxx)
  * [Hack](https://glean.software/docs/indexer/hack)
  * [Haskell](https://glean.software/docs/indexer/haskell)
  * [JavaScript/Flow](https://glean.software/docs/indexer/flow)

  We also support the [SCIP](https://github.com/sourcegraph/scip) or [LSIF](https://lsif.dev) code indexing formats, for:

  * [Rust (via rust-analyzer)](https://glean.software/docs/indexer/lsif-rust)
  * [Go](https://glean.software/docs/indexer/lsif-go)
  * [TypeScript](https://glean.software/docs/indexer/lsif-typescript)
  * [Java](https://glean.software/docs/indexer/lsif-java)
  * [Python](https://glean.software/docs/indexer/scip-python)
  * [Dotnet](https://glean.software/docs/indexer/scip-dotnet)

  Custom indexers for these languages exist but aren't in the open source release
  yet; we hope to make these available in the future:

  * Python
  * Java
  * Kotlin
  * Erlang
  * Thrift
  * Buck and Bazel
  * C#

  ## License

  Glean is licensed under a [BSD LICENSE](LICENSE).

  ## Contributing

  We'd love to have your help developing Glean. Please submit [pull
  requests](https://github.com/facebookincubator/Glean/pulls) on github,
  and note that we need contributors to sign the [Contributor license
  agreement](https://code.facebook.com/cla) before we can accept your
  pull request.

  Style guide: for Haskell code, we use `hlint` to check for style issues. Lines
  wrap at 80 columns. Code should be -Wall clean. For C++, code should compile
  with Clang or GCC.

  ## How to contact the Glean team

  - Visit [the project GitHub repo](https://github.com/facebookincubator/Glean) to view the source code, open issues or pull requests.
  - Join the [Glean Discord server](https://discord.com/channels/280033776820813825/505370075402862594/808027763868827659). You can join the server via [this invitation](https://discord.gg/w3s6X6QAHZ).
  ## Building

  See [Building Glean](https://glean.software/docs/building).

  ## Docker demo

  For demo of the react codebase with hyperlinks powered by glean run
  `docker run -ti -p8888:8888 ghcr.io/facebookincubator/glean/demo`

  Try out on your own codebase with a .flowconfig by running
  `docker run -ti -p8888:8888 -v __YOUR_CODE_DIR__:/glean_demo/code ghcr.io/facebookincubator/glean/demo`

  Play round using the glean binaries in a shell by running
  `docker run -ti -p8888:8888 ghcr.io/facebookincubator/glean/demo shell`
description-type: markdown
hash: df01fe9ae37fbf7d192b670f3eadc54ebb16b8eb6b34bb177ac0c8339ce5b715
homepage: https://github.com/facebookincubator/Glean
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: Glean-team@fb.com
synopsis: |-
  A system for collecting, deriving and working with facts
  about source code.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  STMonadTrans: '>=0'
  aeson: '>=0'
  ansi-terminal: '>=0'
  array: '>=0.5.2.0 && <0.6'
  async: '>=2.2.1 && <2.3'
  attoparsec: '>=0.13.2.3 && <0.15'
  attoparsec-aeson: '>=2.1 && <2.3'
  base: '>=4.11.1 && <4.19'
  binary: '>=0.8.5.1 && <0.9'
  bytestring: '>=0.10.8.2 && <0.12'
  clock: '>=0'
  containers: '>=0'
  contravariant: '>=1.5 && <1.6'
  data-default: '>=0'
  deepseq: '>=1.4.3.0 && <1.5'
  directory: '>=1.3.1.5 && <1.4'
  exceptions: '>=0.10.0 && <0.11'
  extra: '>=0'
  fb-util: '>=0'
  filepath: '>=1.4.2 && <1.5'
  ghc-prim: '>=0.5.2.0 && <0.11'
  glean: '>=0'
  hashable: '>=1.2.7.0 && <1.6'
  haxl: '>=2.1.2.0 && <2.6'
  hinotify: '>=0.4.1 && <0.5'
  json: '>=0'
  mtl: '>=2.2.2 && <2.4'
  network-uri: '>=2.6.1.0 && <2.7'
  optparse-applicative: '>=0'
  parsec: '>=3.1.13.0 && <3.2'
  prettyprinter: '>=1.2.1 && <1.8'
  process: '>=1.6.3.0 && <1.7'
  quickcheck-io: '>=0'
  quickcheck-text: '>=0'
  random: '>=0'
  regex-base: '>=0'
  regex-pcre: '>=0'
  safe: '>=0'
  safe-exceptions: '>=0'
  scientific: '>=0'
  stm: '>=2.5.0.0 && <2.6'
  tar: '>=0.5.1.0 && <0.6'
  temporary: '>=0'
  text: '>=1.2.3.0 && <2.2'
  text-show: '>=0'
  thrift-lib: '>=0'
  time: '>=1.8.0.2 && <1.13'
  transformers: '>=0.5.6 && <0.7'
  unix: '>=2.7.2.2 && <2.9'
  unordered-containers: '>=0.2.9.0 && <0.3'
  utf8-string: '>=0'
  uuid: '>=0'
  vector: '>=0.12.0.1 && <0.14'
