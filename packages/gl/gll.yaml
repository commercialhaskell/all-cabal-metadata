homepage: https://github.com/ltbinsbe/gll-combinators
changelog-type: text
hash: 771b7fe1920380254bfa12f215d2b933f54cd47e2cabce3e82d80208975e6223
test-bench-deps: {}
maintainer: L. Thomas van Binsbergen <ltvanbinsbergen@acm.org>
synopsis: GLL parser with simple combinator interface
changelog: "0.3.0.7 -> 0.3.0.8\n  + export maximumPivots and maximumPivotAtNt\n0.3.0.8
  -> 0.3.0.9\n  + include bit of the input string when showing an error message (without
  whitespace)\n  + exporting <multiple/some/many>SepBy2\n  + exporting within, parens,
  braces, brackets, angles, quotes and dquotes\n  + added character literals to Token
  type\n  + exporting <:=\n  + <<<**> and <**>>> for shortest and longest match, respectively\n
  \   defined some/many and variants using <**>>> and <<<**>\n    disambiguation remains
  very experimental \n0.3.0.9 -> 0.3.0.10\n  + exporting chooses\n0.3.0.10 -> 0.3.0.11\n
  \ + parse option for disabling select test (lookahead)\n\n0.3.0.11 -> 0.4.0.1\n
  \ + replaced parser by reduced descriptor GLL (RGLL)\n  + renamed GLL.Types.Grammar
  to GLL.Types.Derivations\n  + renamed GLL.Types.Abstract to GLL.Types.Grammar\n
  \ + exporting GLL.Types.Grammar, GLL.Types.Derivations, GLL.Combinators.Options,
  GLL.Combinators.Memoisation, GLL.Flags\n\n0.4.0.1 -> 0.4.0.2\n  + generalised `within`\n
  \ + different whitespace and comment handling in predefined lexer\n  + predefined
  lexer handles (nested) comment-blocks\n\n0.4.0.2 -> 0.4.0.3\n  M added hex, octal
  and binary representation to integer literals\n  + added float literals\n  + exporting
  `preferably` and `reluctantly`\n  M renamed `rassoc` to shortest_match\n  M renamed
  `lassoc` to longest_match\n  - removed `assoc`\n  + version of `chooses` that is
  left-biased (w.r.t. alternatives)\n  + generalised arguments of longest_match and
  shortest_match to IsAltExpr \n  + exporting `optionalWithDef`\n\n0.4.0.3 -> 0.4.0.4\n
  \ + `chooses` cannot be given an empty list (runtime error)\n  + updated `base`
  dependency\n\n0.4.0.4 -> 0.4.0.5\n  + relaxed cabal version constraint\n\n0.4.0.5
  -> 0.4.0.6\n  + generalised the definition of `within` combinator with respect to
  token type\n\n0.4.0.6 -> 0.4.0.7\n  + simplified Ridge's \"parsing context\" in
  the semantic phase\n\n0.4.0.7 -> 0.4.0.8\n  + unified usage of input in both parser
  and combinators, speeding up initialisation of large files\n  + fixed 'noSelectTest'
  'ParseOption'\n\n0.4.0.8 -> 0.4.0.9\n  + reinstated a \"binarised version\" of the
  interface \n  + count number of successes in ParseResult, not just True/False\n\n0.4.0.9
  -> 0.4.0.10\n  + build expression grammars from operator tables\n\n0.4.0.10 -> 0.4.0.11\n
  \ + integer literals are now by default considered as natural numbers only, the
  'signed_int_lits' flag of 'LexerSettings' can be used to turn on signed integers,
  restoring the behaviour of previous versions\n\n0.4.0.11 -> 0.4.0.12\n  + export
  'grammarOf'\n  + let 'parse' throw errors by default\n  + changed priorities of
  operator tables to doubles \n  + removed need to specify associativity of prefix
  operators in operator table\n\n0.4.0.12 -> 0.4.0.13\n  + export 'lexerEither' that
  produces an 'Either' value with either an error or a list of tokens\n\n0.4.0.13
  -> 0.4.1.0\n  + updated dependencies to GHC 9.2.5\n  M removed TypeCompose dependency
  and embedded needed definitions of OO\n\n0.4.1.1 -> 0.4.1.1\n  + updated dependencies
  to GHC 9.2.8\n\n"
basic-deps:
  base: '>=4.3.1.0 && <=5'
  time: '>=1.8'
  text: -any
  array: -any
  containers: '>=0.4'
  regex-applicative: '>=0.3'
  pretty: -any
all-versions:
- 0.3.0.9
- 0.4.0.2
- 0.4.0.3
- 0.4.0.4
- 0.4.0.5
- 0.4.0.11
- 0.4.0.12
- 0.4.0.13
- 0.4.1.0
- 0.4.1.1
author: L. Thomas van Binsbergen
latest: 0.4.1.1
description-type: haddock
description: |-
  The package gll provides generalised top-down parsing according to the
  (R)GLL parsing algorithm [Scott and Johnstone 2016].

  The user can either invoke the GLL
  parser directly by importing "GLL.Parser" and providing a
  value of the Grammar datatype in (exported by "GLL.Parser").
  Alternatively, the user can import "GLL.Combinators" to write combinator expressions
  from which a grammar of the required form is extracted.
  The combinators enable applying arbitrary semantic actions to parse results.
  The documentation of the respective packages provides more information.

  The main motivation for this package
  is the development of Domain Specific Languages (DSLs).
  More specifically: designing DSLs with minimal differences between
  between abstract and concrete syntax (abstract syntax is often ambiguous).

  Please email any questions, comments and suggestions to the
  maintainer.
license-name: BSD-3-Clause
