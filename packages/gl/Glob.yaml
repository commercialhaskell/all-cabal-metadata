homepage: http://iki.fi/matti.niemenmaa/glob/
changelog-type: text
hash: 17cbe8f4f023d3288d168f5eb34f9fd1125348ece2682bad2137ed8a06d5d0d6
test-bench-deps:
  test-framework-hunit: '>=0.2 && <1'
  test-framework: '>=0.2 && <1'
  base: '>=4 && <5'
  filepath: '>=1.1 && <1.5'
  test-framework-quickcheck2: '>=0.3 && <1'
  dlist: '>=0.4 && <1.1'
  HUnit: '>=1.2 && <1.7'
  containers: <0.7
  transformers: '>=0.2 && <0.6'
  QuickCheck: '>=2 && <3'
  transformers-compat: '>=0.3 && <0.8'
  directory: <1.4
maintainer: Matti Niemenmaa <matti.niemenmaa+glob@iki.fi>
synopsis: Globbing library
changelog: "0.10.1, 2020-07-19:\n\tUpdated code and dependencies to support dlist-1.0.\n\n\tCabal-Version
  minimum bumped to 1.10 as Hackage now rejects older minima.\n\n0.10.0, 2018-12-19:\n\tBug
  fix: \"**/\" matched hidden directories in some scenarios even when\n\t         matchDotsImplicitly
  was set to False.\n\t         Thanks to Travis Sunderland for the report as well
  as the fix.\n\n0.9.3, 2018-09-22:\n\tUpdated dependencies to allow containers-0.7
  (GHC 8.6). Thanks to\n\tchessai for the merge request.\n\n\tUpdated tests to compile
  with GHC 8.6.\n\n0.9.2, 2018-02-26:\n\tUpdated dependencies to allow transformers-compat-0.6.\n\n0.9.1,
  2017-11-04:\n\tMade Tests.Utils use Ints instead of Floats to avoid spurious failures\n\tthat
  aren't of any concern.\n\n\tUpdated test dependencies to allow HUnit-1.6.\n\n0.9.0,
  2017-10-01:\n\tThanks to Harry Garrood for many contributions to this release.\n\n\tNew
  functions, data types, and constants:\n\t\tSystem.FilePath.Glob.isLiteral :: Pattern
  -> Bool\n\t\t\tTells whether a Pattern is a literal file path.\n\n\t\t\tThanks to
  Simon Hengel and Harry Garrood for the\n\t\t\tfeature request.\n\n\t\tSystem.FilePath.Glob.GlobOptions\n\t\t\tOptions
  for the glob* family of IO functions.\n\n\t\tSystem.FilePath.Glob.globDefault ::
  GlobOptions\n\t\t\tUse matchDefault and don't return unmatched files.\n\n\n\tChanged
  function types:\n\t\tSystem.FilePath.Glob.globDir :: [Pattern] -> FilePath -> IO
  [[FilePath]]\n\t\t\tNo longer returns unmatched paths, like globDir1.\n\n\t\tSystem.FilePath.Glob.globDirWith
  :: GlobOptions -> [Pattern] -> FilePath -> IO ([[FilePath]], Maybe [FilePath])\n\t\t\tTakes
  GlobOptions instead of MatchOptions, and returns\n\t\t\tunmatched paths in a Maybe
  corresponding to whether they\n\t\t\twere requested in the options or not.\n\n\t\t\tThis
  is a significant performance boost for all glob*\n\t\t\tfunctions when unmatched
  file paths are not desired.\n\n\tOptimization: when unmatched file paths are not
  requested, glob and\n\t              globDir1 use commonDirectory to avoid extra\n\t
  \             getDirectoryContents calls at the start.\n\tOptimization: character
  ranges containing . or / are simplified more\n\t              than before, especially
  when they make the entire pattern\n\t              incapable of matching anything.\n\tOptimization:
  extension separator matching where the extension is\n\t              surrounded
  by other literals (e.g. \"*.txt\" or \"foo.*\" or\n\t              simply \"foo.txt\")
  should be quicker in general, and the\n\t              Patterns should be smaller.
  (This adds to the number of\n\t              places where the code assumes that
  the extension separator\n\t              is the '.' character.)\n\n\tBug fix: commonDirectory
  should no longer add extra directory separators\n\t         to the Pattern.\n\tBug
  fix: the glob* functions should now place slashes correctly when\n\t         using
  recursively matching patterns with extra slashes, such as\n\t         \"**//foo\".\n\tBug
  fix: number ranges are no longer optimized to single characters, so\n\t         that
  leading zeroes are handled correctly: e.g. \"<0-9>\" didn't\n\t         match \"007\".\n\tBug
  fix: \"//\" did not match itself.\n\tBug fix: \".//\" did not match itself.\n\tBug
  fix: \"x\" did not match \".//x\" (with ignoreDotSlash enabled).\n\tBug fix: \"<-><->\"
  matched single digit numbers.\n\tBug fix: \"<0-0><1-1>\" didn't match \"01\".\n\n0.8.0,
  2017-05-27:\n        Added instance IsString Pattern, thanks to Mitsutoshi Aoe.\n\n0.7.14,
  2016-12-29:\n\tUpdate dependencies to allow directory-1.3.\n\n0.7.13, 2016-11-25:\n\tUpdate
  test dependencies to allow HUnit-1.5.\n\n0.7.12, 2016-10-07:\n\tUpdate test dependencies
  to allow HUnit-1.4.\n\n0.7.11, 2016-08-08:\n\tGot rid of tests/Utils.hs to fix test
  compilation on case-insensitive\n\tfilesystems (tests/Utils.hs vs tests/Tests/Utils.hs).\n\n0.7.10,
  2016-07-18:\n\tUpdate dependencies to allow dlist-0.8.\n\n0.7.9, 2016-07-02:\n\tAdd
  missing Utils module to test suite, so that the tests provided with\n\tthe sdist
  tarball actually run.\n\n0.7.8, 2016-07-01:\n\tAdd dependency on transformers-compat
  to allow using\n\tControl.Monad.Trans.Except also with older library versions.\n\n0.7.7,
  2016-06-28:\n\tUpdate test dependencies to allow HUnit-1.3.\n\n0.7.6, 2016-06-28:\n\tUpdate
  dependencies to allow filepath-1.4.\n\n\tAdded Cabal Source-Repository metadata,
  pointing to GitHub.\n\n\tIntegrated tests with Cabal so that they can be run with
  \"cabal test\".\n\n\tGot rid of deprecation warnings by using Control.Monad.Trans.Except\n\tinstead
  of Control.Monad.Trans.Error.\n\n\tAdded Semigroup instance, bringing in a new dependency
  on semigroups on\n\tpre-8.0 GHC versions.\n\n0.7.5, 2014-05-08:\n\tUpdate dependencies
  to allow transformers-0.4.\n\n0.7.4, 2014-03-18:\n\tUpdate dependencies to allow
  dlist-0.7.\n\n0.7.3, 2013-12-01:\n\tUpdate dependencies to allow dlist-0.6.\n\n0.7.2,
  2012-10-18:\n\tUpdate dependencies to allow directory-1.2.\n\n0.7.1, 2012-07-03:\n\tUpdate
  dependencies to allow transformers-0.3, and generally tighten\n\tthem according
  to the policy.\n\n0.7, 2012-01-03:\n\tChanged function types:\n\t\tSystem.FilePath.Glob.glob
  :: String -> IO [FilePath]\n\t\t\tNow takes a String to be compiled instead of an
  already-compiled\n\t\t\tPattern.\n\n\tAdded a README and more basic usage documentation.\n\n0.6.1,
  2011-09-14:\n\tBug fix: globDir should now ignore the given directory when given
  an\n\t         absolute path on Windows.\n\n\tDoc fix: noted that globDir doesn't
  actually fully ignore the given\n\t         directory if the Pattern starts with
  a path separator.\n\n0.6, 2011-09-12:\n\tNew functions:\n\t\tSystem.FilePath.Glob.glob
  :: Pattern -> IO [FilePath]\n\n\tChange: globDir, given a Pattern starting with
  a path separator, now ignores\n\t\t\t  the given directory. Thus e.g. globDir (compile
  \"/*\") d gives the\n\t\t\t  contents of \"/\" regardless of the value of d.\n\n\t\t\t
  \ Thanks to Max Bolingbroke for the feature request.\n\n\tChanged dependency on
  mtl to transformers.\n\n0.5.1, 2010-11-23:\n\tUpdate dependencies to allow for mtl
  2.0.\n\n0.5, 2009-12-01:\n\tNew functions:\n\t\tSystem.FilePath.Glob.globDir ::
  Pattern -> FilePath -> IO [FilePath]\n\n0.4, 2009-01-31:\n\tNew functions:\n\t\tSystem.FilePath.Glob.commonDirectory
  :: Pattern -> (FilePath, Pattern)\n\n\t\tSystem.FilePath.Glob.simplify  :: Pattern
  -> Pattern\n\t\tSystem.FilePath.Glob.decompile :: Pattern -> String\n\n\t\tSystem.FilePath.Glob.tryCompileWith
  :: CompOptions -> String -> Either String Pattern\n\t\tSystem.FilePath.Glob.compileWith
  \   :: CompOptions -> String -> Pattern\n\t\tSystem.FilePath.Glob.compDefault    ::
  CompOptions\n\t\tSystem.FilePath.Glob.compPosix      :: CompOptions\n\n\t\tSystem.FilePath.Glob.matchWith
  \    :: MatchOptions -> Pattern -> FilePath -> Bool\n\t\tSystem.FilePath.Glob.globDirWith
  \  :: MatchOptions -> [Pattern] -> FilePath -> IO ([[FilePath]], [FilePath])\n\t\tSystem.FilePath.Glob.matchDefault
  \ :: MatchOptions\n\t\tSystem.FilePath.Glob.matchPosix    :: MatchOptions\n\n\t\tSystem.FilePath.Glob.Primitives.literal
  \          :: String -> Pattern\n\t\tSystem.FilePath.Glob.Primitives.singleWildcard
  \   :: Pattern\n\t\tSystem.FilePath.Glob.Primitives.wildcard          :: Pattern\n\t\tSystem.FilePath.Glob.Primitives.recursiveWildcard
  :: Pattern\n\t\tSystem.FilePath.Glob.Primitives.charRange         :: Bool -> [Either
  Char (Char,Char)] -> Pattern\n\t\tSystem.FilePath.Glob.Primitives.numberRange       ::
  Maybe Integer -> Maybe Integer -> Pattern\n\n\tRemoved functions:\n\t\tSystem.FilePath.Glob.tryCompile
  (no longer needed / superceded by tryCompileWith)\n\n\tNew instances:\n\t\tMonoid
  Pattern\n\t\tRead Pattern\n\n\tChange: \"..\" can now be matched, by patterns such
  as \".*\".\n\tChange: globDir, given \"\" as the directory, uses getCurrentDirectory.\n\tChange:
  globDir now keeps track of the number of path separators, thus\n\t        \"a//*\"
  will return \"a//b\" instead of \"a/b\" as a match result.\n\tChange: if character
  ranges begin with ! or ^, these characters are now\n\t        considered the start
  of the range: [^-~] is the range ^ through ~,\n\t        not the inverse of [-~].\n\n\tRegression
  fix: handle directories without read permissions even more\n\t                properly.\n\n\tBug
  fix: globDir doesn't convert patterns like \"a./b\" to \"ab\".\n\tBug fix: the Show
  instance used to show \"[?]\" as the very different \"?\" (and\n\t         a few
  similar cases).\n\tBug fix: \"//./\" wasn't getting optimized properly.\n\tBug fix:
  \".//a\" matched \"/a\" and not \"a\" or \"./a\".\n\tBug fix: \"f**/a\" didn't match
  \"foo/a\".\n\tBug fix: \".**/a\" didn't match \".foo/a\".\n\tBug fix: \".**/a\"
  matched \"../a\".\n\tBug fixes: globDir and match, in general, handled patterns
  starting with\n\t           \".*\" or \".**/\" quite differently.\n\tBug fix: globDir
  never matched \"foo/\" to the directory \"foo\".\n\tBug fix: globDir never matched
  \"foo**/\" to the directory \"foo\".\n\tBug fix: show (compile \"[a!b]\") resulted
  in \"[!ab]\".\n\n0.3.2, 2008-12-20:\n\tRegression fix: handle directories without
  read permissions properly.\n\n\tConvenience for developers: -XTemplateHaskell no
  longer barfs on\n\tCompile.hs.\n\n0.3.1, 2008-10-31:\n\tCorrected the Cabal-Version
  field.\n\n0.3, 2008-10-19:\n\tFurther performance improvements to globDir.\n\tBug
  fix: handle empty pattern lists correctly in globDir.\n\tAdded dependency: Win32,
  for Windows OSs.\n\n0.2, 2008-10-18:\n\tPerformance improvements to globDir, no
  functionality changes.\n\tAdded dependency: dlist.\n\n0.1, 2008-10-17:\n\tInitial
  release.\n\n\tFunctions:\n\t\tSystem.FilePath.Glob.tryCompile :: String -> Either
  String Pattern\n\t\tSystem.FilePath.Glob.compile    :: String -> Pattern\n\t\tSystem.FilePath.Glob.match
  \     :: Pattern -> FilePath -> Bool\n\t\tSystem.FilePath.Glob.globDir    :: [Pattern]
  -> FilePath -> IO ([[FilePath]], [FilePath])\n\n\tDependencies: base, containers,
  directory, filepath, mtl.\n"
basic-deps:
  base: '>=4 && <5'
  filepath: '>=1.1 && <1.5'
  dlist: '>=0.4 && <1.1'
  containers: <0.7
  transformers: '>=0.2 && <0.6'
  transformers-compat: '>=0.3 && <0.8'
  directory: <1.4
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- '0.4'
- '0.5'
- 0.5.1
- '0.6'
- 0.6.1
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
- 0.7.10
- 0.7.11
- 0.7.12
- 0.7.13
- 0.7.14
- 0.8.0
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
- 0.10.0
- 0.10.1
author: Matti Niemenmaa
latest: 0.10.1
description-type: text
description: "This is Glob, a Haskell library for globbing, i.e. pattern matching
  file paths\nakin to the POSIX glob() function. Haddock documentation is included,
  and can\nbe built with the 'cabal haddock' command. Basic usage info is repeated
  below:\n\nMatching pattern (a String) against filepath (a FilePath):\n\n\tmatch
  (compile pattern) filepath\n\nMatching a pattern against all paths in the current
  working directory:\n\n\tglob pattern\n\nMatching a pattern against all paths in
  a given directory (a FilePath):\n\n\tglobDir1 (compile pattern) directorypath\n\nMatching
  a list of patterns against all paths in a given directory, returning\nthe matches
  for each pattern as well as the paths not matched by any of the\npatterns:\n\n\tglobDir
  (map compile patterns) directorypath\n"
license-name: BSD-3-Clause
