all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.2.1
- 0.0.2.3
- 0.0.3.0
- 0.0.3.2
- 0.0.4.0
- 0.0.4.2
author: Luis Pedro Coelho
basic-deps:
  base: '>4.8 && <5'
  bytestring: '>=0.10 && <0.11'
changelog: "Version 0.0.4.2 2019-11-11 by luispedro\n\t* Fix non-ASCII keys\n\nVersion
  0.0.4.1 2019-11-05 by luispedro\n\t* Fix Python extension compilation\n\nVersion
  0.0.4.0 2017-11-27 by luispedro\n\t* Load hash table into memory\n\nVersion 0.0.3.2
  2017-11-09 by luispedro\n\t* Fix Haskell distribution\n\nVersion 0.0.3.1 2017-11-09
  by luispedro\n\t* Add rtable.c to distributions\n\nVersion 0.0.3.0 2017-11-09 by
  luispedro\n\t* Better hash function\n\nVersion 0.0.2.3 2017-10-24 by luispedro\n\t*
  Fix crashes on very large hashes\n\nVersion 0.0.2.2 2017-10-23 by luispedro\n\t*
  Better error message for ftruncate failures\n\nVersion 0.0.2.1 2017-10-12 by luispedro\n\t*
  Export reserve() in Python interface\n\nVersion 0.0.2.0 2017-10-05 by luispedro\n\t*
  Python improvement: support generic types through struct\n\t* Do not crash when
  attempting to write to RO tables\n\t* More flexible option checking\n\t* Better
  error messages\n\nVersion 0.0.1.2 2017-06-27 by luispedro\n\t* Fix cabal release:
  include C header files in extra-source-files\n\nVersion 0.0.1.1 2017-06-27 by luispedro\n\t*
  Fix cabal release: include C header files\n\nVersion 0.0.1 2017-06-27 by luispedro\n\t*
  First release. Basic funcionality\n"
changelog-type: text
description: "# Disk-based hashtable\n\n[![Travis](https://api.travis-ci.org/luispedro/diskhash.png)](https://travis-ci.org/luispedro/diskhash)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n\nA
  simple disk-based hash table (i.e., persistent hash table).\n\nIt is a hashtable
  implemented on memory-mapped disk, so that it can be loaded\nwith a single `mmap()`
  system call and used in memory directly (being as fast\nas an in-memory hashtable
  once it is loaded from disk).\n\nThe code is in C, wrappers are provided for Python,
  Haskell, and C++. The\nwrappers follow similar APIs with variations to accommodate
  the language\nspecificity. They all use the same underlying code, so you can open
  a hashtable\ncreated in C from Haskell, modify it within your Haskell code, and
  later open\nthe result in Python.\n\nCross-language functionality will only work
  for simple types where you can\ncontrol their binary representation (64-bit integers,
  for example).\n\nReading does not touch the disk representation at all and, thus,
  can be done on\ntop of read-only files or using multiple threads (and different
  processes will\nshare the memory: the operating system does that for you). Writing
  or modifying\nvalues is, however, not thread-safe.\n\n## Examples\n\nThe following
  examples all create a hashtable to store longs (`int64_t`), then\nset the value
  associated with the key `\"key\"` to 9. In the current API, the\nmaximum size of
  the keys needs to be pre-specified, which is the value `15`\nbelow.\n\n### Raw C\n\n```c\n#include
  <stdio.h>\n#include <inttypes.h>\n#include \"diskhash.h\"\n\nint main(void) {\n
  \   HashTableOpts opts;\n    opts.key_maxlen = 15;\n    opts.object_datalen = sizeof(int64_t);\n
  \   char* err = NULL;\n    HashTable* ht = dht_open(\"testing.dht\", opts, O_RDWR|O_CREAT,
  &err);\n    if (!ht) {\n        if (!err) err = \"Unknown error\";\n        fprintf(stderr,
  \"Failed opening hash table: %s.\\n\", err);\n        return 1;\n    }\n    long
  i = 9;\n    dht_insert(ht, \"key\", &i);\n    \n    long* val = (long*) dht_lookup(ht,
  \"key\");\n    printf(\"Looked up value: %l\\n\", *val);\n\n    dht_free(ht);\n
  \   return 0;\n}\n```\n\nThe C API relies on error codes and error strings (the
  `&err` argument above).\nThe header file has [decent\ndocumentation](https://github.com/luispedro/diskhash/blob/master/src/diskhash.h).\n\n###
  Haskell\n\nIn Haskell, you have different types/functions for read-write and read-only\nhashtables.
  Read-write operations are `IO` operations, read-only hashtables are\npure.\n\nRead
  write example:\n\n```haskell\nimport Data.DiskHash\nimport Data.Int\nmain = do\n
  \   ht <- htOpenRW \"testing.dht\" 15\n    htInsertRW ht \"key\" (9 :: Int64)\n
  \   val <- htLookupRW \"key\" ht\n    print val\n```\n\nRead only example (`htLookupRO`
  is pure in this case):\n\n```haskell\nimport Data.DiskHash\nimport Data.Int\nmain
  = do\n    ht <- htOpenRO \"testing.dht\" 15\n    let val :: Int64\n        val =
  htLookupRO \"key\" ht\n    print val\n```\n\n\n### Python\n\nPython's interface
  is based on the [struct\nmodule](https://docs.python.org/3/library/struct.html).
  For example, `'ll'`\nrefers to a pair of 64-bit ints (_longs_):\n\n```python\nimport
  diskhash\ntb = diskhash.StructHash(\"testing.dht\", 15, 'll', 'rw')\ntb.insert(\"key\",
  1, 2)\nprint(tb.lookup(\"key\"))\n```\n\nThe Python interface is currently Python
  3 only. Patches to extend it to 2.7\nare welcome, but it's not a priority.\n\n\n###
  C++\n\nIn C++, a simple wrapper is defined, which provides a modicum of type-safety.\nYou
  use the `DiskHash<T>` template. Additionally, errors are reported through\nexceptions
  (both `std::bad_alloc` and `std::runtime_error` can be thrown) and\nnot return codes.\n\n```c++\n#include
  <iostream>\n#include <string>\n\n#include <diskhash.hpp>\n\nint main() {\n    const
  int key_maxlen = 15;\n    dht::DiskHash<uint64_t> ht(\"testing.dht\", key_maxlen,
  dht::DHOpenRW);\n    std::string line;\n    uint64_t ix = 0;\n    while (std::getline(std::cine,
  line)) {\n        if (line.length() > key_maxlen) {\n            std::cerr << \"Key
  too long: '\" << line << \"'. Aborting.\\n\";\n            return 2;\n        }\n
  \       const bool inserted = ht.insert(line.c_str(), ix);\n        if (!inserted)
  {\n            std::cerr  << \"Found repeated key '\" << line << \"' (ignored).\\n\";\n
  \       }\n        ++ix;\n    }\n    return 0;\n}\n```\n\n## Stability\n\nThis is
  _beta_ software. It is good enough that I am using it, but the API can\nchange in
  the future with little warning. The binary format is versioned (the\nmagic string
  encodes its version, so changes can be detected and you will get\nan error message
  in the future rather than some silent misbehaviour.\n\n[Automated unit testing](https://travis-ci.org/luispedro/diskhash)
  ensures that\nbasic mistakes will not go uncaught.\n\n## Limitations\n\n- You must
  specify the maximum key size. This can be worked around either by\n  pre-hashing
  the keys (with a strong hash) or using multiple hash tables for\n  different key
  sizes. Neither is currently implemented in diskhash.\n\n- You cannot delete objects.
  This was not a necessity for my uses, so it was\n  not implemented. A simple implementation
  could be done by marking objects as\n  \"deleted\" in place and recompacting when
  the hash table size changes or with\n  an explicit `dht_gc()` call. It may also
  be important to add functionality to\n  shrink hashtables so as to not waste disk
  space.\n\n- The algorithm is a rather naÃ¯ve implementation of linear addression.
  It would\n  not be hard to switch to [robin hood\n  hashing](https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/)\n
  \ and this may indeed happen in the near future.\n\nLicense: MIT\n\n"
description-type: markdown
hash: 8c95a00cd0122f57f63c41ef3c39b3530e1179eca674718516d0c3619a4a9ced
homepage: ''
latest: 0.0.4.2
license-name: MIT
maintainer: Luis Pedro Coelho
synopsis: Disk-based hash table
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>4.8 && <5'
  bytestring: '>=0.10 && <0.11'
  directory: '>=0'
  diskhash: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  test-framework-quickcheck2: '>=0'
  test-framework-th: '>=0'
