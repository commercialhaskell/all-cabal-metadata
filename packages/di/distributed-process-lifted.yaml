all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.3.0.1
author: Jeremy Huffman
basic-deps:
  base: <5
  deepseq: '>=1.2 && <1.5'
  distributed-process: '>=0.5.1 && <0.8'
  distributed-process-monad-control: '>=0.5 && <0.6'
  lifted-base: '>=0.2 && <0.3'
  monad-control: '>=0.3 && <1.1'
  mtl: '>=2.0 && <2.3'
  network-transport: '>=0.2 && <0.6'
  transformers: '>=0.4 && <0.6'
  transformers-base: '>=0.4.1 && <=0.5.0'
changelog: ''
changelog-type: ''
description: |-
  This package provides typeclasses and functions for lifting functions and control operations (such as spawnLocal) from the @Process@ monad
  into transformer stacks based on the Process monad. It uses
  <http://hackage.haskell.org/package/monad-control-1.0.0.1/docs/Control-Monad-Trans-Control.html#t:MonadTransControl MonadTransControl>
  and a new typeclass 'Control.Distributed.Process.Lifted.Class.MonadProcessBase' which plays the same role as
  <http://hackage.haskell.org/package/monad-control-1.0.0.1/docs/Control-Monad-Trans-Control.html#t:MonadBaseControl MonadBaseControl>.
  Instances are provided for all the <http://hackage.haskell.org/package/transformers transformers> types - so stacks based on any of these
  (e.g. @ReaderT Config Process a@) can be used seamlessly.

  The Control.Distributed.Process.Lifted module exports all the same symbols as found in
  Control.Distributed.Process, but they are all generalized.
  Where appropriate it re-exports the more general functions from lifted-base (e.g. catch) rather than the versions re-implemented for @Process@.
description-type: haddock
hash: c7dc9474a9d09ad66e0337ab79851e333f1563fc3a07107048866269451e6ce6
homepage: https://github.com/jeremyjh/distributed-process-lifted
latest: 0.3.0.1
license-name: BSD-3-Clause
maintainer: jeremy@jeremyhuffman.com
synopsis: monad-control style typeclass and transformer instances for Process monad.
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.4 && <5'
  binary: '>=0'
  distributed-process: '>=0'
  distributed-process-lifted: '>=0'
  lifted-base: '>=0'
  mtl: '>=0'
  network: '>=0'
  network-transport: '>=0'
  network-transport-tcp: '>=0.6 && <0.7'
  rematch: '>=0.2 && <0.3'
  test-framework: '>=0.6 && <0.9'
  test-framework-hunit: '>=0.3 && <0.4'
  transformers: '>=0'
