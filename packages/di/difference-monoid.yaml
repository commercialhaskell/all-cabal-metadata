all-versions:
- 0.1.0.0
author: Donnacha OisÃ­n Kidney
basic-deps:
  adjunctions: '>=0'
  base: '>=4.7 && <5'
  comonad: '>=0'
  deepseq: '>=0'
  distributive: '>=0'
  groups: '>=0'
  semigroupoids: '>=0'
changelog: |
  # Changelog for difference-monoid

  ## Unreleased changes
changelog-type: markdown
description: |
  # difference-monoid

  This package provides the Difference Monoid, which adds subtraction to
  arbitrary monoids.

  This has a number of uses:

  * `Diff (Product a)` will give you a type similar to
  Data.Ratio. Here, the "subtraction" operation is division. For
  example:

      ```haskell
      >>> (1 :-: 2) <> (3 :-: 4) :: Diff (Product Int)
      Product {getProduct = 3} :-: Product {getProduct = 8}
      ```

  * In a similar vein, `Diff (Sum a)` will add subtraction
  to a numeric type:

      ```haskell
      >>> runDiff (-) (diff 2 <> diff 3 <> invert (diff 4)) :: Sum Natural
      Sum {getSum = 1}
      ```

      This will let you work with nonnegative types, where you need some
      form of subtraction (for, e.g., differences, hence the name), and
      you only want to check for underflow once.

  * Using the above example, in particular, we get a monoid for averages:

      ```haskell
      >>> import Data.Function (on)
      >>> let avg = runDiff ((%) `on` getProduct.getSum) . foldMap (fmap Sum . diff . Product)
      >>> avg [1,4,3,2,5]
      3 % 1
      ```

  The Monoid and Semigroup laws hold in a pretty
  straightforward way, provided the underlying type also follows those
  laws.

  For the Group laws, the underlying type must be a
  cancellative semigroup.

  A cancellative semigroup is one where

  * `a <> b = a <> c` implies `b = c`
  * `b <> a = c <> a` implies `b = c`

  If this does not hold, than the equivalence only holds modulo the
  the addition of some constant

  Most common semigroups are cancellative, however notable
  exceptions include the cross product of vectors, matrix
  multiplication, and sets:

  ```haskell
  fromList [1] <> fromList [1,2] = fromList [1] <> fromList [2]`
  ```

  This type is known formally as the [Grothendieck group](https://en.wikipedia.org/wiki/Grothendieck_group).

  The package also provides the `Parity` monad and comonad, which is left-adjunct to the difference monoid.
description-type: markdown
hash: ffe3451263d7dee42b1bc26a6bac0c132589e69371669b600d773ebf4ce10f01
homepage: https://github.com/oisdk/difference-monoid#readme
latest: 0.1.0.0
license-name: MIT
maintainer: mail@doisinkidney.com
synopsis: ''
test-bench-deps:
  QuickCheck: '>=0'
  adjunctions: '>=0'
  base: '>=4.7 && <5'
  comonad: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  difference-monoid: '>=0'
  distributive: '>=0'
  doctest: '>=0'
  groups: '>=0'
  hedgehog: '>=0'
  hedgehog-checkers: '>=0'
  semigroupoids: '>=0'
