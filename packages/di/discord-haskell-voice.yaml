homepage: https://github.com/yutotakano/discord-haskell-voice#readme
changelog-type: markdown
hash: 2d06e8ba1a6de3ca8753b68a429dd66d4f07ed87f99059db7e1ca8334ca5be85
test-bench-deps: {}
maintainer: moa17stock@gmail.com
synopsis: Voice support for discord-haskell.
changelog: |
  # Changelog for discord-haskell-voice

  ## Unreleased changes

  ## 2.2.2

  - Update `discord-haskell` dependency to 1.12.0
  - Bump copyright to 2022
  - Fix incomplete pattern match crash in the example bot when using `bot --bash-completion-script`

  ## 2.2.1

  - Patch README having incorrect non-published details after Hackage publication.

  ## 2.2.0

  - Change the definition of `Voice` from a type alias exposing dangerous internal handles, to a newtype wrapper. This also changes the definition of `liftDiscord` to maintain identical behaviour.
  - Update `discord-haskell` dependency to 1.11.0

  ## 2.1.0

  - Removed `updateSpeakingStatus` from the publicly exported function list for `Discord.Voice`.

  ## 2.0.0

  - Rewrite the entire library (see #1).
  - Introduce the `Voice` monad, and all functions in it: `join`, `play`, and all other variants of `play`.
  - Add `lens` as a dependency for internal library use.
  - Add `conduit` as the main method of piping and transforming audio on the fly.
  - Remove all previous functions: `joinVoice`, `leaveVoice`, `playPCM`, etc.
  - Add package documentation to public modules, and make sure the abstraction layer is solid (don't export useless internals).
  - Rename the JoinSpecificVC example to BasicMusicBot and add a `bot volume` command to change the volume.

  ## 0.0.1

  - Initial release.
  - Implement `joinVoice`, `leaveVoice`, etc and use `DiscordVoiceHandle` to maintain a reference to the voice handle.
  - Add JoinAllVC and JoinSpecificVC as example usages of the library.
basic-deps:
  BoundedChan: ==1.0.3.0
  bytestring: '>=0.10.12.0 && <0.11'
  unliftio: '>=0.2.18 && <0.3'
  stm: '>=2.5.0.0 && <2.5.1'
  base: '>=4.7 && <5'
  time: '>=1.9.3 && <=1.13'
  text: '>=1.2.4.1 && <2'
  saltine: '>=0.1.1.1 && <0.2'
  safe-exceptions: '>=0.1.7.1 && <0.1.8'
  process: '>=1.6.9.0 && <1.7'
  network: '>=3.1.1.1 && <3.2'
  async: '>=2.2.3 && <2.4'
  websockets: '>=0.12.7.2 && <0.12.8'
  conduit: (==1.3.4.2 && ==1.3.4.1) && ==1.3.4.1
  lens: '>=4.19.2 && <5'
  binary: ==0.8.*
  wuss: '>=1.1.18 && <=1.2'
  mtl: ==2.2.2
  discord-haskell: ==1.12.0
  optparse-applicative: '>=0.15.1.0 && <0.17'
  stm-containers: ==1.2
  discord-haskell-voice: -any
  aeson: ==1.5.6.0
  opus: ==0.1.0.0
all-versions:
- 2.2.0
- 2.2.1
- 2.2.2
author: Yuto Takano
latest: 2.2.2
description-type: markdown
description: "# discord-haskell-voice\n\n![hackage version](https://img.shields.io/hackage/v/discord-haskell-voice?color=%235e5184)\n![discord-haskell
  version dependency](https://img.shields.io/badge/discord--haskell%20ver.-1.12.0-lightblue)\n\nWelcome
  to `discord-haskell-voice`! This library provides you with a high-level\ninterface
  for interacting with Discord's Voice API, building on top of the\n[`discord-haskell`](https://hackage.haskell.org/package/discord-haskell)
  library\nby Karl.\n\nFor a quick intuitive introduction to what this library enables
  you to do, see\nthe following snippet of code:\n\n```hs\nrickroll :: Channel ->
  DiscordHandler ()\nrickroll c@(ChannelVoice {}) = do\n    void $ runVoice $ do\n
  \       join (channelGuild c) (channelId c)\n        playYouTube \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n```\n\nThe
  library actively uses and supports conduit, which enables you to write\nsomething
  like the following as well!\n\n```hs\nrickrollHalfVolume :: Channel -> DiscordHandler
  ()\nrickrollHalfVolume c@(ChannelVoice {}) = do\n    void $ runVoice $ do\n        join
  (channelGuild c) (channelId c)        \n        let halfAmplitude = awaitForever
  $ \\current ->\n                yield $ round $ fromIntegral current * 0.5\n        playYouTube'
  \"rickroll\" $ packInt16C .| halfAmplitude .| unpackInt16C\n        liftIO $ print
  \"finished playing!\"\n```\n\n## Requirements\n\n- The library uses [`saltine`](https://github.com/tel/saltine)
  for encryption\nand decryption of audio packets. This requires the appropriate libraries
  to be\ninstalled on your system. See their README for information.\n- The library
  requires Opus libraries to be installed on your system. The\n`libopus-dev` package
  available on package repositories should be sufficient\non most \\*nix systems.
  Windows is unexplored yet (WSL works).\n- If you are to use any variants of `playFile`,
  `playYouTube`, you will need\nFFmpeg installed. To specify a custom executable name,
  see the `-With` function\nvariants.\n- If you are to use any variants of `playYouTube`,
  you will additionally need\nyoutube-dl installed. This is used to get the stream
  URL to pass to FFmpeg. To\nspecify a custom executable name, use `playYouTubeWith`.\n\n##
  Features\n\nWhat is supported:\n\n- Can join/leave Discord voice channels. It is
  possible to join multiple of them\nsimultaneously (one per sever) and stream different
  contents to each.\n- It is also possible for many voice channels (across many servers)
  and play the\nsame content, radio/subscriber-style.\n- You can play arbitrary PCM
  audio, arbitrary audio (with FFmpeg), and arbitrary\ninternet audio (with youtube-dl).\n-
  You can transform audio arbitrarily using Conduit.\n- As it streams content, the
  library /should/ use constant memory (unverified).\n- OPUS encoding and specific
  implementation details such as handshakes and\nencryption are done opaquely, and
  a nice abstraction layer is provided.\n\nWhat is not supported:\n\n- Decrypting
  audio packets sent from Discord (other people's voices), and\ndecoding them to PCM.\n\nSee
  `examples/BasicMusicBot.hs` for a bot that uses many advanced features of\nthe library,
  including dynamically adjusting the stream audio using a TVar\n(and allowing users
  to change the TVar using a `/volume` command).\n\n## Installation\n\nThis library
  is available on Hackage, at https://hackage.haskell.org/package/discord-haskell-voice.\n\n###
  Cabal\n\nTo use it in your Cabal-based project, add `discord-haskell-voice` as a
  dependency in your `.cabal` file:\n\n```\n# --- myproject.cabal <truncated>\n build-depends:\n
  \     base >=4.7 && <5\n    , discord-haskell ==1.12.0\n    , discord-haskell-voice
  ==2.2.2\n```\n\n### Stack\n\nTo use it in your Stack-based project, add `discord-haskell-voice`
  in both your `package.yaml` and `stack.yaml` files (since this library is not available
  in Stackage for the same reason `discord-haskell` is not on Stackage)\n\n```\n#
  --- stack.yaml <truncated>\nextra-deps:\n- discord-haskell-1.12.0\n- discord-haskell-voice-2.2.2\n```\n\n```\n#
  --- package.yaml <truncated>\ndependencies:\n- base >= 4.7 && < 5\n- discord-haskell
  == 1.12.0\n- discord-haskell-voice == 2.2.2\n```\n\n## Documentation\n\nSee the
  Haddock documentation on the Hackage page, at https://hackage.haskell.org/package/discord-haskell-voice/docs/Discord-Voice.html.\n\n##
  Future Plans\n\n- Use `stm-conduit` and `stm` for a safer Chan?\n- Look into SubprocessException
  seemingly never been thrown (e.g. when SIGINT\nis signalled to the libarry while
  FFmpeg is running)\n- Consider, document, and improve the distinction of errors
  (VoiceError) vs\nexceptions, and note down why any choices are made\n"
license-name: MIT
