all-versions:
- 2.2.0
- 2.2.1
- 2.2.2
- 2.3.0
- 2.3.1
- 3.0.0
author: Yuto Takano <moa17stock@gmail.com>
basic-deps:
  BoundedChan: ==1.0.3.0
  aeson: '>=1.5 && <1.6 || >=2.0 && <2.3'
  async: '>=2.2.3 && <2.4'
  base: '>=4.7 && <5'
  binary: '>=0.8 && <0.9'
  bytestring: '>=0.10.12.0 && <0.13'
  conduit: '>=1.3.4.2 && <1.4.0.0'
  conduit-extra: ==1.3.6
  discord-haskell: '>=1.12.0 && <=1.17.1'
  discord-haskell-voice: '>=0'
  microlens: '>=0.4.11.2 && <0.5'
  microlens-th: '>=0.4.3.10 && <0.5'
  mtl: <2.4
  network: '>=3.1.1.1 && <3.2'
  optparse-applicative: '>=0.15.1.0 && <0.19'
  opus: ==0.3.0.0
  safe-exceptions: '>=0.1.7.1 && <0.1.8'
  saltine: '>=0.1.1.1 && <0.3'
  stm: '>=2.5.0.0 && <2.6'
  stm-containers: <1.4
  text: '>=1.2.4.1 && <3'
  time: '>=1.9.3 && <1.15'
  unliftio: '>=0.2.18 && <0.3'
  websockets: '>=0.12.7.2 && <0.14'
  wuss: '>=1.1.18 && <2.1.0.0'
changelog: |
  # Changelog for discord-haskell-voice

  ## Unreleased changes

  ## 3.0.0 — 2025 March

  - **Breaking API changes**
    - Replaced previously separate playing functions with a single `play` function
    - New `AudioResource` type represents a resource to be played, made with e.g. `createYoutubeResource`
    - New audio transformation abilities via FFmpeg flags and Haskell conduits
    - Use FFmpeg's direct Ogg/Opus output to skip the FFmpeg->PCM->Opus translation if there are no Haskell conduits that operate on PCM
    - Can now specify a codec in `play` to skip on using FFmpeg at all if input is already PCM or Opus
    - Can now use `ffprobe` to automatically detect if the input resource is already PCM or Opus and intelligently skip FFmpeg
    - New dependency on `typed-process` for safer external process
    - New dependency on `opus` from Hackage instead of direct git source
    - Remove ExceptT from the Voice monad stack
    - Remove `SubprocessException` type from the library as it became unused
    - Remove `InvalidPayloadOrder` from the `VoiceError` ADT since it became unused

  - Bug Fixes
    - Fix `OpusBufferTooSmall` when receiving Opus data due to buffer being half the size it should be
    - Fix the library crashing when joining a call with another user already in it, which triggers Opcodes 11/18/20 before Opcode 4
    - Fix `leave` causing MVar thread deadlock due to the BoundedChan consumer thread being killed
    - Fix possibility of audio artifacts when sending multiple audio resources back-to-back due to incorrect silence frames [#45](https://github.com/yutotakano/discord-haskell-voice/pull/45)
    - Fix posibility of the last few bytes of Opus frames being cut off during transmission due to a buffer too small [#45](https://github.com/yutotakano/discord-haskell-voice/pull/45)

  - Miscellaneous
    - Support GHC 8.10.7, 9.0.2, 9.2.4, and 9.6.6
    - Improve BasicMusicBot example to be less lisp-y in terms of brackets, and fix all warnings
    - Improve error messages when parsing Ogg containers fail
    - Use `DerivingStrategies` in the library code to make explicit where deriving typeclasses are from
    - Add a compile flag (`-use-crypton`) to use a `crypton`-based encryption backend, which removes the necessity for libsodium
    - Remove `containers` dependency
    - Relax package bounds:
      - `aeson` from ==1.5.6.0 to <2.3
      - `bytestring` from <0.11 to <0.13
      - `conduit` from <=1.3.4.2 to <1.4.0.0
      - `mtl` from ==2.2.2 to <2.4
      - `saltine` from <0.2 to <0.4
      - `stm` from <2.5.1 to <2.6
      - `text` from <2 to <3
      - `time` from <=1.13 to <1.15
      - `websockets` from <0.12.8 to <0.14
      - `wuss` from <=1.2 to <2.1
      - `discord-haskell` from <= 1.14.0 to <= 1.17.1
    - Add build CI for Cabal & Stack for all supported GHC versions except 9.6.6
    - Renamed `master` branch to `main`
    - Updated copyright to current year and include contributors where applicable
    - Added link to GitHub Sponsors
    - Updated Haddock for all functions and added examples and usage to many functions
    - Added upper bound of `<0.5` to microlens and microlens-th

  ## 2.3.1 — 2022 July

  - Update `discord-haskell` dependency bounds to `>= 1.12.0 && <= 1.14.0`.
  - Use `UnliftIO.MVar` functions internally for MVar operations in `DiscordHandler`
  - `IOException`s thrown by e.g. createProcess during `runVoice` are no longer caught and subdued - they are propagated to the user.

  ## 2.3.0 — 2022 May

  - Export `playYouTubeWith` and `playYouTubeWith'` from `Discord.Voice`.
  - Update `discord-haskell` dependency bounds to `>= 1.12.0 && <= 1.13.0`.
  - Migrate from `lens` to `microlens`, following the `opus` package doing the same.

  ## 2.2.2 — 2022 February

  - Update `discord-haskell` dependency to 1.12.0
  - Bump copyright to 2022
  - Fix incomplete pattern match crash in the example bot when using `bot --bash-completion-script`

  ## 2.2.1 — 2022 January

  - Patch README having incorrect non-published details after Hackage publication.

  ## 2.2.0 — 2022 January

  - Change the definition of `Voice` from a type alias exposing dangerous internal handles, to a newtype wrapper. This also changes the definition of `liftDiscord` to maintain identical behaviour.
  - Update `discord-haskell` dependency to 1.11.0

  ## 2.1.0 — 2022 January

  - Removed `updateSpeakingStatus` from the publicly exported function list for `Discord.Voice`.

  ## 2.0.0 — 2021 December

  - Rewrite the entire library (see #1).
  - Introduce the `Voice` monad, and all functions in it: `join`, `play`, and all other variants of `play`.
  - Add `lens` as a dependency for internal library use.
  - Add `conduit` as the main method of piping and transforming audio on the fly.
  - Remove all previous functions: `joinVoice`, `leaveVoice`, `playPCM`, etc.
  - Add package documentation to public modules, and make sure the abstraction layer is solid (don't export useless internals).
  - Rename the JoinSpecificVC example to BasicMusicBot and add a `bot volume` command to change the volume.

  ## 0.0.1 — 2021 June

  - Initial release.
  - Implement `joinVoice`, `leaveVoice`, etc and use `DiscordVoiceHandle` to maintain a reference to the voice handle.
  - Add JoinAllVC and JoinSpecificVC as example usages of the library.
changelog-type: markdown
description: |
  # discord-haskell-voice

  [![hackage version](https://img.shields.io/hackage/v/discord-haskell-voice?color=7565a8)](https://hackage.haskell.org/package/discord-haskell-voice)
  [![discord-haskell version dependency](https://img.shields.io/badge/discord--haskell-%3E=1.12.0%20%26%26%20%3C=1.17.1-677eab)](https://hackage.haskell.org/package/discord-haskell)
  ![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/yutotakano/discord-haskell-voice/build_cabal.yml)

  Welcome to `discord-haskell-voice`! This library provides you with a high-level
  interface for interacting with Discord's Voice API, building on top of the
  [`discord-haskell`](https://hackage.haskell.org/package/discord-haskell) library.

  For a quick intuitive introduction to what this library enables you to do, see
  the following snippet of code:

  ```hs
  rickroll :: Channel -> DiscordHandler ()
  rickroll c@(ChannelVoice {}) = do
      runVoice $ do
          join (channelGuild c) (channelId c)
          res <- createYoutubeResource "https://www.youtube.com/watch?v=dQw4w9WgXcQ" Nothing
          play res UnknownCodec
  ```

  The library actively uses and supports conduit, which enables you to write
  something like the following as well! (Spoiler: it plays 'Never Gonna Give You
  Up' by Rick Astley at half the volume then prints to stdout.)

  ```hs
  rickrollHalfVolume :: Channel -> DiscordHandler ()
  rickrollHalfVolume c@(ChannelVoice {}) = do
      runVoice $ do
          join (channelGuild c) (channelId c)
          let halfAmplitude = awaitForever $ \current ->
                  yield $ round $ fromIntegral current * 0.5
          res <- createYoutubeResource "rickroll" $ HaskellTransformation $ packInt16C .| halfAmplitude .| unpackInt16C
          play res UnknownCodec
          liftIO $ print "finished playing!"
  ```

  Scroll down for a more in-depth features list.

  ## Requirements

  - `libsodium`: We depend on [`saltine`](https://github.com/tel/saltine) for
    encryption and decryption of audio packets. This is a NaCl binding and thus
    requires libsodium to be installed on your system. See their README for
    installation information.
    - An alternative is provided via a compile flag, which is to use `crypton` as
      a backend instead, which requires no native dependencies. The security of
      this library has not been vetted however, so use with caution.
  - `libopus`: We require Opus libraries to be installed on your system. Please
    follow the README of the [Haskell Opus package](https://github.com/yutotakano/opus).
  - `ffmpeg`: It is heavily recommended to have FFmpeg installed and available in
    PATH. Without FFmpeg, you will not be able to transcode any non-PCM non-Opus
    files, bytestrings, or YouTube media.
  - `yt-dlp`: It is equally heavily recommended to have yt-dlp installed and
    available in PATH. Without yt-dlp, you will not be able to use
    `createYoutubeResource`.
  - `ffprobe`: It is optional to have FFprobe installed and available in PATH.
    Without FFprobe, you will not be able to use `ProbeCodec` to check if a given
    file, bytestream, or YouTube video can avoid transcoding via FFmpeg if it's
    already PCM or Opus-encoded.

  ## Features

  What is supported:

  - Can join/leave Discord voice channels.
    - Can join multiple of them simultaneously (one per sever) and stream
      different content to each.
    - Can join many voice channels (across many servers) and simulcast the same
      content, radio/subscriber-style.
  - Can play arbitrary PCM/Opus audio from a file or byte stream
  - Can play arbitrary audio using FFmpeg to transcode
  - Can intelligently skip transcoding based on source format using ffprobe
  - Can play arbitrary internet audio using yt-dlp, including live streams
  - Can transform audio arbitrarily using either FFmpeg flags or Conduits that
    operate on bytestreams
  - As it streams content, the library should use constant memory (unverified)

  Where possible, specific details like method of encryption, protocol handshakes,
  packet encoding etc have been abstracted away. As a result, this library is able
  to offer a high-level productive API interface similar to discord.js and
  discord.py libraries.

  What is not supported:

  - Decrypting audio packets sent from Discord (other people's voices), and
    decoding them to PCM. This isn't particularly well-documented by Discord and
    will thus likely never be supported by this library.

  ## Installation

  This library is available on Hackage, at https://hackage.haskell.org/package/discord-haskell-voice.

  ### Cabal

  To use it in your Cabal-based project, add `discord-haskell-voice` as a
  dependency in your `.cabal` file:

  ```yaml
  # --- myproject.cabal <truncated>
   build-depends:
        base >=4.7 && <5
      , discord-haskell ==1.17.1
      , discord-haskell-voice ==3.0.0
  ```

  ### Stack

  To use it in your Stack-based project, add `discord-haskell-voice` in both your
  `package.yaml` and `stack.yaml` files (since this library is not available in
  Stackage for the same reason `discord-haskell` is not on Stackage):

  ```yaml
  # --- stack.yaml <truncated>
  extra-deps:
  - discord-haskell-1.17.1
  - discord-haskell-voice-3.0.0
  ```

  ```yaml
  # --- package.yaml <truncated>
  dependencies:
  - base >= 4.7 && < 5
  - discord-haskell == 1.17.1
  - discord-haskell-voice == 3.0.0
  ```

  ## Documentation

  See the Haddock documentation on the Hackage page, at
  https://hackage.haskell.org/package/discord-haskell-voice/docs/Discord-Voice.html.

  ## Examples

  See `examples/BasicMusicBot.hs` for a bot that uses many advanced features of
  the library, including dynamically adjusting the stream audio using a TVar
  (and allowing users to change the TVar using a `/volume` command).
description-type: markdown
hash: 4eb006bc89c49ade9df43209f954a232ff9b5b3ddc2e49848d892446a51d9e6d
homepage: https://github.com/yutotakano/discord-haskell-voice
latest: 3.0.0
license-name: MIT
maintainer: Yuto Takano <moa17stock@gmail.com>
synopsis: Voice support for discord-haskell.
test-bench-deps: {}
