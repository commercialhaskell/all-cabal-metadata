all-versions:
- 0.1.0.0
- 0.1.1.0
author: Laurie Clark-Michalek
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <4.8'
  bytestring: '>=0'
  containers: '>=0'
  exceptions: '>=0'
  lens: '>=0'
  mtl: '>=0'
  text: '>=1.2.0.3 && <1.3'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  wreq: '>=0'
changelog: ''
changelog-type: ''
description: |
  DigitalOcean
  ============

  A Haskell Digital Ocean API.

  Exposes a lens based interface onto the Digital Ocean API. Fairly feature
  complete.

  Error Handling & IO Monads
  --------------------------

  Instead of enforcing a monad to return, all functions that do IO and stuff have a
  type something along the lines of:

      getSSHKeys :: (Error e, MonadError e m, MonadIO m) => Config -> m [SSHKey]

  Translated to human, this just means that the monad `m` that is returned can
  1) encapsulate IO, and 2) represent an error, of type `e`. This is useful if you
  want to use `ExceptT` or something similarly fun to represent your errors.
  However, for simple use, you will be relived to hear that `m` may be the plain
  old `IO` monad, which will represent its errors by throwing `IOException`
  exceptions.

  This means, despite the confusing type signature, we may write things such as:

      main = do
        auth <- fmap head getArgs -- Get the auth from the cmd line
        keys <- getSSHKeys . Config . pack $ auth -- Get the ssh keys
        putStrLn . show $ keys -- And display them

  See the ./examples directory for further usage

  TODO:
  -----

  * Pagination
  * Tests
  * HTTP session reuse
description-type: markdown
hash: ce8ed5469aa40aa7697e8b839d0b55813abcefb1a2515b04cb8d00162a765807
homepage: ''
latest: 0.1.1.0
license-name: AGPL-3.0-only
maintainer: lclarkmichalek@gmail.com
synopsis: A client library for the DigitalOcean API
test-bench-deps:
  DigitalOcean: '>=0'
  base: '>=0'
  hspec: '>=2.0'
  lens: '>=0'
  mtl: '>=0'
  text: '>=0'
