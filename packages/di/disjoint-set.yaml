all-versions:
- '0.1'
- '0.2'
author: Maxwell Sayles, Myles Maxfield
basic-deps:
  base: '>=3 && <5'
  containers: '>=0.3'
  mtl: '>=2'
  transformers: '>=0.3'
changelog: ''
changelog-type: ''
description: |-
  This is a persistent data structure for disjoint sets.

  The algorithm is described in "Introduction to
  Algorithms" by Cormen, et al. The implementation here
  uses both union by rank and path compression. We
  incur an O(logn) overhead because of the use of
  persistent maps.

  Data.IntDisjointSet is as strict as possible.
description-type: haddock
hash: db5cae53700b35a56c623737bdd5fb4ea472d79ba14ac2697e920ad30c82efe9
homepage: https://github.com/maxwellsayles/disjoint-set
latest: '0.2'
license-name: BSD-3-Clause
maintainer: <maxwellsayles@gmail.com>, <myles.maxfield@gmail.com>
synopsis: Persistent disjoint-sets, a.k.a union-find.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=3 && <5'
  containers: '>=0.3'
  mtl: '>=2'
  transformers: '>=0.3'
