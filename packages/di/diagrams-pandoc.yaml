all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- 0.3.1.1
- '0.4'
- 0.4.1
author: Daniel Bergey
basic-deps:
  base: '>=4.16 && <4.22'
  diagrams-builder: '>=0.7 && <0.9'
  diagrams-cairo: '>=1.3 && <1.6'
  diagrams-core: '>=1.4 && <1.6'
  diagrams-lib: '>=1.3 && <1.6'
  diagrams-pandoc: '>=0'
  diagrams-svg: '>=1.4 && <1.6'
  directory: '>=1.2 && <1.4'
  filepath: '>=1.3 && <1.6'
  hashable: '>=1.2 && <1.6'
  linear: '>=1.10 && <1.24'
  optparse-applicative: '>=0.11 && <0.20'
  pandoc: '>=3.0 && <3.8'
  pandoc-types: '>=1.23 && <1.24'
  svg-builder: '>=0.1 && <0.2'
  text: '>=1.2 && <2.2'
changelog: |
  ## v0.4.1 (2025-06-30)

  - Allow:
    - `base-4.20` (GHC 9.10) and `base-4.21` (GHC 9.12)
    - `filepath-1.5`
    - `linear-1.23`
    - `hashable-1.5`
    - `optparse-applicative-0.19`
    - `pandoc` up through 3.7
    - `diagrams-lib-1.5`
    - `diagrams-cairo-1.5`
    - `diagrams-svg-1.5`
  - Drop support for GHC < 9.2

  ## v0.4 (2024-02-29)

    - New support for figures ([#23](https://github.com/diagrams/diagrams-pandoc/pull/23); thanks to Berk Özkütük)
    - New test suite ([#22](https://github.com/diagrams/diagrams-pandoc/pull/22); thanks to Berk Özkütük)
    - Allow `base-4.19`, `text-2.1`, `tasty-1.5`
    - Test on GHC 9.8

  ## v0.3.1.1 (2023-07-10)

    - Update upper bounds to allow:
        - `base-4.18`
        - `text-2.0`
        - `pandoc-types-1.23`
        - `linear-1.22`
        - `diagrams-core-1.5`
        - `hashable-1.4`
        - `optparse-applicative-0.18`
    - Test up through GHC 9.6

  ## v0.3.1 (2020-06-11)

    - New `-a` option for outputting an absolute path
    - New `-b` option for choosing backend, and add SVG support
    - Relax many upper bounds
    - Update to pandoc-types-1.20

  ## v0.3 (2016-02-23)

    - Choose output type based on Pandoc output format
    - Set diagram size from Attributes in Pandoc IR / markdown
    - Support latest `pandoc-types`
changelog-type: markdown
description: |
  [![Build Status](https://travis-ci.org/diagrams/diagrams-pandoc.svg?branch=master)](https://travis-ci.org/diagrams/diagrams-pandoc)

  A [pandoc](http://johnmacfarlane.net/pandoc/) filter to express
  diagrams inline using the haskell EDSL
  [diagrams](http://projects.haskell.org/diagrams/).

  ## Usage

  Create an input file called `demo.md` with the following text:

  ``` markdown
      This is how to draw a circle:
      ~~~ diagram
      example = circle 1
      ~~~
  ```

  Install diagrams-pandoc, then run pandoc as follows:

  ``` shell
      pandoc -t html demo.md --filter diagrams-pandoc -o demo.html -s
  ```

  The file demo.html should now have an img tag pointing at a PNG of a circle.

  ## Attributes

  You can specify attributes to control how the diagram is generated.
  The following, for example,
  ``` markdown
      ~~~ {.diagram width=800 height=400 caption="A circle"}
      example = circle 1
      ~~~
  ```
  will override the default width and height of the generated diagram, and
  provide a caption for it. The following attributes are supported:

  * `width`: The width of the generated diagram, in pixels. The default is 500.
  * `height`: The height of the generated diagram, in pixels. The default is 200.
  * `caption`: The caption of the diagram. Providing a caption makes the diagram
  appear as a figure, rather than an inline image. Diagrams have no caption by default.
  * `alt`: The alt text of the diagram. The caption is used as the default value
  if it is provided, otherwise it is empty.

  ## Details

  `diagrams-pandoc` compiles code blocks containing diagrams expressions
  and includes the resulting images in the pandoc markup.  It is meant
  to be run as a
  [pandoc filter](http://johnmacfarlane.net/pandoc/scripting.html) as
  shown above.

  `diagrams-pandoc` evaluates the diagrams expression `example` by
  default. This can be modified by passing a command line argument.

  `diagrams-pandoc` is aware of two code block classes.  A block with
  the `diagram` class will be replaced by the resulting image---the code
  will not appear in the output.  A block with the `diagram-haskell`
  class will produce both an image and a (syntax highlighted) code
  block.  The input block is replaced by image appears before the code
  block, and the `diagram-haskell` class is replaced by the `haskell`
  class, so that pandoc can perform syntax highlighting as usual.

  `diagrams-pandoc` produces images in the `pdf` format when used with
  the `latex` and `beamer` writers of `pandoc` and produced `png` output
  otherwise.

  I have only tested with pandoc's markdown reader.  In particular, the
  rst reader does not attach classes to code blocks, only to Div elements.

  ## Installing

  `diagrams-pandoc` is on Hackage.  To install, run `cabal install diagrams-pandoc`

  ## TODO

  * use pandoc output type to pick an image file format
  * for formats which are more human-readable (eg, markdown, rst), leave
    code block alone?
  * provide command-line flags to override default behavior
  * add Backends besides Cairo
  * Support RST by handling `Div class=diagram [CodeBlock foo bar]` the same as `CodeBlock class=diagram bar`
  * Alternate install directions using `stack`
description-type: markdown
hash: 01b1dfcdaa22599edc932a00769dbee7c8e810206bb6f0bf724afa0527859492
homepage: ''
latest: 0.4.1
license-name: BSD-3-Clause
maintainer: diagrams-discuss@googlegroups.com
synopsis: A Pandoc filter to express diagrams inline using the Haskell EDSL _Diagrams_
test-bench-deps:
  SVGFonts: '>=1.8.0 && <1.9'
  base: '>=4.16 && <4.22'
  bytestring: '>=0.10.10 && <0.13'
  diagrams-pandoc: '>=0'
  directory: '>=1.2 && <1.4'
  filepath: '>=1.3 && <1.6'
  pandoc: '>=3.0 && <3.8'
  pandoc-types: '>=1.23 && <1.24'
  tasty: '>=1.4.3 && <1.6'
  tasty-golden: '>=2.3.5 && <2.4'
  text: '>=1.2 && <2.2'
