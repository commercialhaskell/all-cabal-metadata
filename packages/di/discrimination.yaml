all-versions:
- '0'
- '0.1'
- 0.2.1
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
author: Edward A. Kmett
basic-deps:
  array: '>=0.5.1.0 && <0.6'
  base: '>=4.9 && <5'
  containers: '>=0.5.6.2 && <0.7'
  contravariant: '>=1.5.3 && <2'
  deepseq: '>=1.4.1.1 && <1.5'
  ghc-prim: '>=0'
  hashable: '>=1.2.7.0 && <1.5'
  integer-gmp: '>=1.0 && <1.1'
  primitive: '>=0.7.1.0 && <0.9'
  promises: '>=0.3 && <0.4'
  transformers: '>=0.4.2.0 && <0.7'
changelog: |
  ## 0.5 [2022-06-15]

  * `Eq` is a superclass of `Grouping`, `Ord` is a superclass of `Ordering`.
  * Drop support for GHC prior 8

  ## 0.4.1 [2021-01-08]

  * GHC-9.0 compatibility
  * Added `Ordering` discrimination
  * Fix `Sorting Int8` and `Sorting Int16` instances
  * Fix `Integer` and `Natural` instances
  * Add `NonEmpty` discrimination

  ## 0.4

  * Added `Natural`, `Integer` and `()` discrimination

  ## 0.3

  * Fixed a corner case where `conquer` would lie and return an empty equivalence class when fed no inputs.

  ## 0.2.1

  * `promises` 0.3 support
  * `vector` 0.11 support
  * `transformers` 0.5 support
  * `transformers-compat` support
  * ghc 8 support

  ## 0.2

  * `grouping` is now much more efficient.

  ## 0.1

  * `grouping` is now productive. This means it can start spitting out results as it goes! To do this I created the `promises` package and switched to using it behind the scenes for many combinators that consume a `Group`. This has a bunch of knock-on effects:
    * `grouping` is now working properly with respect to its law!
    * `grouping` now uses an American-flag style top-down radix sort rather than a bottom up radix sort for all operations. This is sadly required for productivity. This will use a lot more memory for intermediate arrays, as we don't get to return them to storage after we're done.
    * We now use much smaller intermediate arrays for `grouping`. Should we do the same for `sorting`?

  ## 0

  * Initialized repository
changelog-type: markdown
description: |
  discrimination
  ==============

  [![Hackage](https://img.shields.io/hackage/v/discrimination.svg)](https://hackage.haskell.org/package/discrimination) [![Build Status](https://github.com/ekmett/discrimination/workflows/Haskell-CI/badge.svg)](https://github.com/ekmett/discrimination/actions?query=workflow%3AHaskell-CI)

  This package provides linear time sorting, partitioning, and joins for a wide array of Haskell data types. This work is based on a
  "final encoding" of the ideas presented in [multiple](http://hjemmesider.diku.dk/~henglein/papers/henglein2011a.pdf) [papers](http://hjemmesider.diku.dk/~henglein/papers/henglein2011c.pdf) and [talks](https://www.youtube.com/watch?v=sz9ZlZIRDAg) by [Fritz Henglein](http://hjemmesider.diku.dk/~henglein).

  By adopting a final encoding we can enjoy many instances for standard classes, lawfully, without quotienting.

  Contact Information
  -------------------

  Contributions and bug reports are welcome!

  Please feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.

  -Edward Kmett
description-type: markdown
hash: e26e4ca43fcff537964d0c0b7b7c73372815e590355233afc09589f93c98f093
homepage: http://github.com/ekmett/discrimination/
latest: '0.5'
license-name: BSD-3-Clause
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Fast generic linear-time sorting, joins and container construction.
test-bench-deps:
  QuickCheck: '>=2.14.2'
  base: '>=4.8'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  discrimination: '>=0'
  ghc-prim: '>=0'
  hashable: '>=0'
  primitive: '>=0'
  quickcheck-instances: '>=0'
  splitmix: '>=0.1 && <0.2'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  vector-algorithms: '>=0'
