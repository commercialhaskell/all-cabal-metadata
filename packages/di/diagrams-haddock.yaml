all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.2.0
- '0.2'
- 0.2.1
- 0.2.1.1
- 0.2.1.2
- 0.2.1.3
- 0.2.1.4
- 0.2.1.5
- 0.2.1.6
- 0.2.2
- 0.2.2.1
- 0.2.2.2
- 0.2.2.3
- 0.2.2.4
- 0.2.2.5
- 0.2.2.6
- 0.2.2.7
- 0.2.2.8
- 0.2.2.9
- 0.2.2.10
- 0.2.2.11
- 0.2.2.12
- 0.2.2.13
- 0.2.2.14
- '0.3'
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
- 0.3.0.5
- 0.3.0.6
- 0.3.0.7
- 0.3.0.9
- 0.3.0.10
- '0.4'
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 0.4.1
- 0.4.1.1
- 0.4.1.2
author: Brent Yorgey
basic-deps:
  Cabal: '>=2.2 && <3.11'
  ansi-terminal: '>=0.5 && <1.1'
  base: '>=4.4 && <4.19'
  base64-bytestring: '>=1 && <1.3'
  bytestring: '>=0.9 && <0.13'
  cmdargs: '>=0.8 && <0.11'
  containers: '>=0.4 && <0.7'
  cpphs: '>=1.15 && <1.21'
  diagrams-builder: '>=0.5 && <0.9'
  diagrams-haddock: '>=0'
  diagrams-lib: '>=1.4 && <1.5'
  diagrams-svg: '>=1.4 && <1.5'
  directory: '>=1.3 && <1.4'
  filepath: '>=1.4 && <1.5'
  haskell-src-exts: '>=1.18 && <1.24'
  lens: '>=3.8 && <5.3'
  linear: '>=1.10 && <1.23'
  mtl: '>=2.0 && <2.4'
  parsec: '>=3 && <3.2'
  split: '>=0.2 && <0.3'
  strict: '>=0.3 && <0.6'
  svg-builder: '>=0.1 && <0.2'
  text: '>=0.11 && <2.1'
  uniplate: '>=1.6 && <1.7'
  unliftio: '>=0.2.12 && <0.3'
changelog: "## [v0.4.1.2](https://github.com/diagrams/diagrams-haddock/tree/v0.4.1.2)
  (2023-07-10)\n\n- Update upper bounds to allow:\n    - `base-4.17` and `base-4.18`\n
  \   - `mtl-2.3`\n    - `bytestring-0.12`\n    - `strict-0.5`\n    - `lens-5.2`\n
  \   - `linear-1.22`\n    - `text-2.0`\n    - `ansi-terminal-1.0`\n    - `Cabal-3.10`\n-
  Test on GHC 9.4 and 9.6\n\n## [v0.4.1.1](https://github.com/diagrams/diagrams-haddock/tree/v0.4.1.1)
  (2021-11-09)\n\n- Allow `Cabal-3.6`\n\n- r1: allow `base-4.16` and `lens-5.1`; test
  with GHC 9.2\n\n## [v0.4.1](https://github.com/diagrams/diagrams-haddock/tree/v0.4.1)
  (2021-08-12)\n\n- Allow `base-4.15`, `bytestring-0.11`, `strict-0.4`, `lens-5.0`,\n
  \ `base64-bytestring-1.2`, `ansi-terminal-0.11`, `Cabal-3.4`,\n  `QuickCheck-2.14`,
  `tasty-1.4`\n- Switch from `cautious-file` to `unliftio` package for safe file writing.\n\n##
  [v0.4.0.3](https://github.com/diagrams/diagrams-haddock/tree/v0.4.0.3) (2019-02-09)\n\nMore
  upper bound updates:\n\n- Allow `base-4.12`, `containers-0.6`, `lens-4.17`, `Cabal-2.4`,\n
  \   `QuickCheck-2.12`, `tasty-1.2`\n\n## [v0.4.0.2](https://github.com/diagrams/diagrams-haddock/tree/v0.4.0.2)
  (2018-06-25)\n\nA bunch of upper bound updates etc.:\n\n- Allow `lens-4.16`, `Cabal-2.2`
  `QuickCheck-2.11`,\n  `haskell-src-exts-1.20`, `tasty-1.1`, `tasty-quickcheck-0.10`,\n
  \ `ansi-terminal-0.8`\n- Updates to work with several different versions of `Cabal`\n\n##
  [v0.4.0.1](https://github.com/diagrams/diagrams-haddock/tree/v0.4.0.1) (2016-11-28)\n\n-
  Allow `haskell-src-exts-1.19` and `haskell-src-exts-simple-1.19`\n\n## [v0.4](https://github.com/diagrams/diagrams-haddock/tree/v0.4)
  (2016-10-26)\n\n- Build with `ghc-8.0`\n- Improved error message when `setup-config`
  can't be read\n- Fix bug in CPP handling\n- Replace `lucid-svg` with `svg-builder`\n-
  Allow `diagrams-svg-1.4`\n- Require `diagrams-lib-1.4`\n- Allow `haskell-src-exts-1.18`\n-
  Allow `diagrams-builder-0.8`\n- Allow `lens-4.15`\n\n## [v0.3.0.10](https://github.com/diagrams/diagrams-haddock/tree/v0.3.0.10)
  (2015-12-06)\n\n- allow `haskell-src-exts-1.17.*`\n\n## [v0.3.0.9](https://github.com/diagrams/diagrams-haddock/tree/v0.3.0.9)
  (2015-11-20)\n\n- Allow `lucid-svg-0.6`\n- Fix broken v0.3.0.8\n\n## [v0.3.0.8](https://github.com/diagrams/diagrams-haddock/tree/v0.3.0.8)
  (2015-11-15)\n\n- Don't use this version.\n\n## [v0.3.0.7](https://github.com/diagrams/diagrams-haddock/tree/v0.3.0.7)
  (2015-09-22)\n\n- Allow `lens-4.13`, `linear-1.20`, and `tasty-0.11`\n\n[Full Changelog](https://github.com/diagrams/diagrams-haddock/compare/v0.3.0.6...v0.3.0.7)\n\n##
  [v0.3.0.6](https://github.com/diagrams/diagrams-haddock/tree/v0.3.0.6) (2015-07-19)\n\n[Full
  Changelog](https://github.com/diagrams/diagrams-haddock/compare/v0.3.0.5...v0.3.0.6)\n\n0.3.0.5
  (10 July 2015)\n-----------------------\n\n- Allow `lucid-svg-0.5\n\n## [v0.3.0.4](https://github.com/diagrams/diagrams-haddock/tree/v0.3.0.4)
  (2015-05-26)\n\n[Full Changelog](https://github.com/diagrams/diagrams-haddock/compare/v0.3.0.3...v0.3.0.4)\n\n0.3.0.3
  (29 April 2015)\n-----------------------\n\n- Allow `diagrams-svg-1.3.1\n\n0.3.0.2
  (29 April 2015)\n-----------------------\n\n- allow QuickCheck-2.8 in test suite\n\n0.3.0.1
  (20 April 2015)\n-----------------------\n\n- ghc-7.10 compatability\n\n0.3 (19
  April 2015)\n-------------------\n\n- Allow `diagrams-builder-0.7`, `diagrams-lib-1.3`,
  and `diagrams-svg-1.3`\n\n0.2.2.14 (2 April 2015)\n-----------------------\n\n -
  allow `lens-4.9`\n - allow `vector-space-0.10`\n\n0.2.2.13 (13 Jan 2015)\n----------------------\n\n-
  Allow `vector-space-0.9`\n- Allow `lens-4.7`\n- Allow `Cabal-1.22`\n- Allow `tasty-1.10`\n\n0.2.2.12
  (20 November 2014)\n---------------------------\n\n- Allow `lens-4.6`\n- Allow `text-1.2`\n-
  Allow and require `haskell-src-exts-1.16`\n\n\n0.2.2.11 (22 August 2014)\n-------------------------\n\n
  \ - Allow lens-4.4\n\n0.2.2.10 (5 June 2014)\n----------------------\n\n  - allow
  `diagrams-builder-0.6`\n\n0.2.2.9 (2 June 2014)\n---------------------\n\n  - allow
  `lens-4.2` in the test suite as well\n\n0.2.2.8 (28 May 2014)\n---------------------\n\n
  \ - allow `diagrams-lib-1.2`, `diagrams-core-1.2`\n  - allow `cabal-1.20`\n  - allow
  `mtl-2.2`\n  - allow `lens-4.2`\n\n0.2.2.7 (16 April 2014)\n-----------------------\n\n
  \ - allow `haskell-src-exts-1.15` in test suite\n\n0.2.2.6 (15 April 2014)\n-----------------------\n\n
  \ - allow `haskell-src-exts-1.15`\n\n0.2.2.5 (7 April 2014)\n----------------------\n\n
  \ - switch to tasty framework for tests, and allow `QuickCheck-2.7`\n\n0.2.2.4 (20
  March 2014)\n----------------------\n\n  - allow `lens-4.1`\n\n0.2.2.3 (8 March
  2014)\n----------------------\n\n    - allow `lens-4.0` in test suite too\n\n0.2.2.2
  (6 March 2014)\n----------------------\n\n    - allow diagrams-lib-1.1\n\n0.2.2.1
  (12 February 2014)\n--------------------------\n\n    - allow lens-4.0\n\n0.2.2
  (27 January 2014)\n-----------------------\n\n    - require diagrams-builder-0.5\n\n0.2.1.6
  (15 January 2014)\n-------------------------\n\n    - allow text-1.1\n\n0.2.1.5
  (31 December 2013)\n--------------------------\n\n    - allow text-1.0\n\t- allow
  lens-3.10 for the test suite\n\n0.2.1.4 (26 November 2013)\n--------------------------\n\n
  \   - require diagrams-builder-0.4.2, allowing the use of IO actions\n      producing
  diagrams\n\n0.2.1.3 (24 November 2013)\n--------------------------\n\n    - update
  `README`: `extra-doc-files` field in `.cabal` is now supported\n      by Hackage\n
  \   - allow diagrams-lib-1.0 and diagrams-svg-1.0\n\n0.2.1.2 (14 November 2013)\n--------------------------\n\n
  \   - allow base-4.7\n    - allow lens-3.10\n\n0.2.1.1 (14 October 2013)\n-------------------------\n\n
  \   - bug fix: correctly handle hsenv environments with no name\n\n0.2.1 (11 September
  2013)\n-------------------------\n\n    - prettier progress output and error logging\n
  \   - allow Cabal-1.18\n    - require diagrams-svg >= 0.8.0.1\n\n0.2 (2 September
  2013)\n----------------------\n\n    - Take active hsenv into account when looking
  for distdir (closes #18)\n    - add an option to generate data URIs instead of external
  SVGs\n    - base generated diagram file names on module name + diagram name,\n      so
  diagrams with the same name in different files no longer\n      clobber each other\n\n0.1.2.0
  (1 September 2013)\n--------------------------\n\n    - part before # is now optional
  when writing a new diagram URL\n\n0.1.1.2 (22 August 2013)\n------------------------\n\n
  \   - update for haskell-src-exts 1.14\n    - 'extra-html-files' is now called 'extra-doc-files'\n\n0.1.1.1
  (1 August 2013)\n-----------------------\n\n  * allow `diagrams-lib-0.7` and `diagrams-svg-0.7`\n\n0.1.1.0
  (23 June 2013)\n----------------------\n\n  * Add -d option for specifying dist
  dir\n\n0.1.0.1 (27 March 2013)\n-----------------------\n\n  * bump upper bounds:\n
  \     - allow lens-3.9\n      - allow QuickCheck-2.6\n\n0.1.0.0 (23 March 2013)\n-----------------------\n\nInitial
  release!\n"
changelog-type: markdown
description: "[![Build Status](https://travis-ci.org/diagrams/diagrams-haddock.png?branch=master)](http://travis-ci.org/diagrams/diagrams-haddock)\n\n#
  diagrams-haddock\n\n`diagrams-haddock` is a preprocessor which allows embedding
  images\ngenerated using the [diagrams\nframework](http://projects.haskell.org/diagrams/)
  within Haddock\ndocumentation.  The code to generate images is embedded directly\nwithin
  the source file itself (and the code can be included in the\nHaddock output or not,
  as you wish).  `diagrams-haddock` takes care of\ngenerating SVG images and linking
  them into the Haddock output.\n\n## Installing\n\nJust `cabal install diagrams-haddock`.
  \ If you have any trouble, ask\nin the `#diagrams` freenode IRC channel, or file
  a ticket on the\n[bug tracker](http://github.com/diagrams/diagrams-haddock/issues).\n\n##
  On the design of `diagrams-haddock`\n\nBefore getting into the details of using
  `diagrams-haddock`, it should\nbe noted that `diagrams-haddock` has been carefully
  designed so that\n*you only have to maintain a single copy of your source files*.
  \ In\nparticular, you do *not* have to maintain one copy of your source\nfiles with
  embedded diagrams code and another copy where the diagrams\ncode has been replaced
  by images.  If you find yourself scratching\nyour head over the quirky ways that
  `diagrams-haddock` works, now you\nwill know why.\n\n## An important caveat\n\n`diagrams-haddock`
  modifies files *in place*!  While we have worked\nhard to ensure that it cannot
  make catastrophic changes to your files,\nyou would be wise to **only run `diagrams-haddock`
  on files under\nversion control** so you can easily examine and (if necessary) undo\nthe
  changes it makes.  (Of course, being a conscientious developer,\nyou would never
  work with source files not under version control,\nright?)\n\n## Adding diagrams
  to source files\n\nHaddock supports inline links to images with the syntax `<<URL>>`.
  \ To\nindicate an image which should be automatically generated from some\ndiagrams
  code, use the special syntax\n`<<URL#diagram=name&key1=val1&key2=val2&...>>`.  The
  URL will be\nautomatically filled in by `diagrams-haddock`, so when you first\ncreate
  an inline image placeholder you can simply omit it (or put any\narbitrary text in
  its place).  For example, you might write\n\n    <<#diagram=mySquare&width=200&height=300>>\n\nindicating
  an image which should be generated using the definition of\n`mySquare`, with a maximum
  width of 200 and maximum height of 300.\n(Incidentally, this syntax is used because
  everything following the\n`#` symbol will be ignored by browsers.)\n\nContinuing
  with the above example, you must also provide a definition\nof `mySquare`. You must
  provide it in a code block, which must be set\noff by bird tracks (that is, greater-than
  symbols followed by at least\none space).  For example,\n\n``` haskell\n-- > mySquare
  = square 1 # fc blue # myTransf\n-- > myTransf = rotateBy (1/27)\n```\n\nIn this
  case, `mySquare` has type `Diagram SVG R2`.  Additionally, you\nmay give identifiers
  of type `IO (Diagram SVG R2)`; in that case the\n`IO` action will be run to determine
  the diagram to render.  This can\nbe useful, for example, when producing a diagram
  built from some\nexternal data or using randomness.\n\nYou can choose to have the
  code block included in the Haddock output\nor not, simply by putting it in a Haddock
  comment or not.  Note that\nthe code block defining `mySquare` can be anywhere in
  the same file;\nit does not have to be right before or right after the diagram URL\nreferencing
  it.\n\n## Code block dependency analysis\n\n`diagrams-haddock` does a simple dependency
  analysis to determine\nwhich code blocks should be in scope while compiling each
  diagram.\nFirst, it locates a code block containing a binding for the requested\ndiagram
  name.  Then, it pulls in any code blocks containing bindings\nfor identifiers referenced
  by this code block, and so on transitively.\n(Note that this analysis is overly
  simplistic and does not take things\nlike shadowing into account; this may sometimes
  cause additional code\nblocks to be included which would not be included with a
  more careful\nanalysis.)\n\nThis has a few implications.  First, code blocks containing
  irrelevant\nbindings will not be considered.  It is common to have code blocks\nwhich
  are intended simply to show some example code---they may not\neven be valid Haskell.
  \ However, as long as such code blocks do not\ncontain any bindings of names used
  by a diagram, they will be ignored.\nFor example:\n\n``` haskell\n-- The algorithm
  works by doing the equivalent of\n--\n-- > rep = uncurry replicate\n-- >\n-- > algo
  = map rep . zip [1..]\n--\n-- as illustrated below:\n--\n-- <<#diagram=algoIllustration&width=400>>\n--\n--
  > algoIllustration = ...\n```\n\nThe first code block shown above (beginning `rep
  = ...`) contains some\nbindings, but none of those bindings are referenced by any
  diagram\nURLs, so the code block is ignored.\n\nAnother convenient implication is
  that supporting code can be put in\nseparate code blocks and even shared between
  diagrams.  For example:\n\n``` haskell\n-- > makeitblue d = d # fc blue # lc blue\n--\n--
  Here is a blue circle:\n--\n-- <<#diagram=blueC&width=200>>\n--\n-- > blueC = circle
  1 # makeitblue\n--\n-- And here is a blue square:\n--\n-- <<#diagram=blueS&width=200>>\n--\n--
  > blueS = square 1 # makeitblue\n```\n\nThis also means that diagrams are recompiled
  only when necessary.  For\nexample, if the definition of `blueC` is changed, only
  `blueC` will be\nrecompiled.  If the definition of `makeitblue` is changed, both\n`blueC`
  and `blueS` will be recompiled.\n\n## Invoking diagrams-haddock\n\nInvoking the
  `diagrams-haddock` tool is simple: just give it a\nlist of targets, like so:\n\n```\ndiagrams-haddock
  foo.hs baz/bar.lhs ~/src/some-cabal-directory\n```\n\n* For file targets, `diagrams-haddock`
  simply processes the given file.\n\n* Directory targets are assumed to contain Cabal
  packages, which\n  themselves contain a library. `diagrams-haddock` then finds and\n
  \ processes the source files corresponding to all modules exported by\n  the library.
  \ (Note that `diagrams-haddock` does not currently run on\n  unexported modules
  or on the source code for executables, but if you\n  have a use case for either,
  just file a [feature\n  request](https://github.com/diagrams/diagrams-haddock/issues);
  they\n  shouldn't be too hard to add.)\n\nAlso, if you simply invoke `diagrams-haddock`
  with no targets, it will\nprocess the Cabal package in the current directory.\n\n`diagrams-haddock`
  also takes a few command-line options which can be\nused to customize its behavior:\n\n*
  `-c`, `--cachedir`: When diagrams are compiled, their source code is\n  hashed and
  the output image stored in a file like `068fe.......342.svg`,\n  with the value
  of the hash as the name of the file.  This way, if\n  the source code for a diagram
  has not changed in between invocations\n  of `diagrams-haddock`, it does not need
  to be recompiled.  This\n  option lets you specify the directory where such cached
  SVG files\n  should be stored; the default is `.diagrams-cache`.\n\n* `-o`, `--outputdir`:
  This is the directory into which the final\n  output images will be produced.  The
  default is `diagrams`.\n\n* `-d`, `--distdir`: When building diagrams for a cabal
  package, this\n  is the directory in which `diagrams-haddock` should look for the\n
  \ `setup-config` file (*i.e.* the output of `cabal configure`).  An\n  explicit
  value for this flag takes precedence; next,\n  `diagrams-haddock` checks whether
  there is an active\n  [hsenv](http://hackage.haskell.org/package/hsenv) environment,
  and\n  if so uses `dist_<hsenv name>`; otherwise, it defaults to using\n  `dist`.\n\n*
  `-i`, `--includedirs`: `diagrams-haddock` does its best to process\n  files with
  CPP directives, even extracting information about where\n  to find `#include`s from
  the `.cabal` file, but sometimes it might\n  need a little help.  This option lets
  you specify additional\n  directories in which `diagrams-haddock` should look when
  searching\n  for `#include`d files.\n\n* `--cppdefines`: likewise, this option allows
  you to specify\n  additional names that should be `#define`d when CPP is run.\n\n*
  `--dataURIs`: embed the generated SVG images directly in the source\n  code with
  [data URIs](http://en.wikipedia.org/wiki/Data_URI_scheme‎)\n  (the default is to
  generate external SVG files and link to them).\n  See the section below for a discussion
  of the tradeoffs involved.\n\n* `-q`, `--quiet`: `diagrams-haddock` normally prints
  some logging\n  information to indicate what it is doing; this option silences the\n
  \ output.\n\n## Workflow and Cabal setup\n\nThere are two ways one may include generated
  SVG images with your\ndocumentation: as data URIs, or as external images.  The two
  options\nare discussed below, along with pros and cons of each.  Note that in\neither
  case, consumers of your library (including Hackage itself) do\n*not* need to have
  `diagrams-haddock` installed in order to build your\ndocumentation.\n\n### Using
  data URIs\n\nIf you pass the `--dataURIs` option to `diagrams-haddock`, any\ngenerated
  images will be embedded directly in your source file (and\nhence also in the HTML
  ultimately produced by `haddock`) as\n[data URIs](http://en.wikipedia.org/wiki/Data_URI_scheme‎).
  \ To use\nthis method,\n\n1. Include inline diagrams code and URLs in your source
  code.\n2. Run `diagrams-haddock --dataURIs`.\n3. Commit the resulting URL changes
  to your source files.\n\nThe benefit of this scheme is that there are no extra files
  to deal\nwith, and no need to alter your `.cabal` file in any way.  The\ndownside
  is that it significantly bloats your source code, and may\nmake it extremely inconvenient
  to edit without some sort of tool\nsupport (*e.g.* an editor that can \"collapse\"
  certain sections of the\nsource file).\n\n### Using external images\n\nBy default,
  `diagrams-haddock` generates external SVG image files.\nThis makes for much less
  invasive changes to your source files, but\nrequires some work to manage the extra
  files.  To use this method,\n\n1. Include inline diagrams code and URLs in your
  source code.\n2. Run `diagrams-haddock`.\n3. Commit the resulting URL changes to
  your source files *and* the\n   produced SVG files.\n4. Arrange to have the SVG
  files installed along with your package's\n   Haddock documentation (more on this
  below).\n\nThe generated SVG files need to be copied in alongside the generated\nHaddock
  documentation.  There are two ways to accomplish this:\n\n1.  As of `Cabal-1.18`,
  the `.cabal` file format has acquired\n    an `extra-doc-files` field, specifying
  files which should be\n    copied in alongside generated Haddock documentation.
  \ So the\n    preferred method is to add something like\n\n    ```\n\textra-source-files:
  README.md, CHANGES.md, diagrams/*.svg\n    extra-doc-files: diagrams/*.svg\n    ```\n\n
  \   to your `.cabal` file.  Note that you must list the generated\n    images in
  *both* the `extra-source-files` field (so they will be\n    included in your package
  tarball) and the `extra-doc-files` field\n    (so they will be copied alongside
  generated Haddock\n    documentation).  Hackage is now built on `Cabal-1.18`, so\n
  \   uploading a package using the `extra-doc-files` field in this way\n    works
  just fine.\n\n2.  If you need to make your documentation buildable with a pre-`1.18`\n
  \   version of `cabal-install`, it is possible to take advantage of\n    `cabal`'s
  system of user hooks to manually copy the images right\n    after the Haddock documentation
  is generated.  Add something like\n\n    ```\n    build-type: Custom\n    extra-source-files:
  diagrams/*.svg\n    ```\n\n    to your `.cabal` file, and then put something like
  the following in your\n    `Setup.hs`:\n\n    ``` haskell\n    import           Data.List
  \                (isSuffixOf)\n    import           Distribution.Simple\n    import
  \          Distribution.Simple.Setup (Flag (..), HaddockFlags,\n                                                haddockDistPref)\n
  \   import           Distribution.Simple.Utils (copyFiles)\n    import           Distribution.Text
  \        (display)\n    import           Distribution.Verbosity    (normal)\n    import
  \          System.Directory          (getDirectoryContents)\n    import           System.FilePath
  \          ((</>))\n\n    -- Ugly hack, logic copied from Distribution.Simple.Haddock\n
  \   haddockOutputDir :: Package pkg => HaddockFlags -> pkg -> FilePath\n    haddockOutputDir
  flags pkg = destDir\n       where\n         baseDir = case haddockDistPref flags
  of\n                          NoFlag -> \".\"\n                          Flag x
  -> x\n         destDir = baseDir </> \"doc\" </> \"html\" </> display (packageName
  pkg)\n\n    diagramsDir = \"diagrams\"\n\n    main :: IO ()\n    main = defaultMainWithHooks
  simpleUserHooks\n             { postHaddock = \\args flags pkg lbi -> do\n                 dias
  <- filter (\"svg\" `isSuffixOf`) `fmap` getDirectoryContents diagramsDir\n                 copyFiles
  normal (haddockOutputDir flags pkg)\n                   (map (\\d -> (\"\", diagramsDir
  </> d)) dias)\n                 postHaddock simpleUserHooks args flags pkg lbi\n
  \            }\n    ```\n\n    It may not be pretty, but it works!\n\n## File encodings\n\nFor
  now, `diagrams-haddock` assumes that all `.hs` and `.lhs` files\nare encoded using
  UTF-8.  If you would like to use it with source\nfiles stored using some other encoding,
  feel free to [file a feature\nrequest](https://github.com/diagrams/diagrams-haddock/issues).\n\n##
  The diagrams-haddock library\n\nFor most use cases, simply using the `diagrams-haddock`
  executable\nshould get you what you want.  Note, however, that the internals are\nalso
  exposed as a library, making it possible to do all sorts of crazy\nstuff you might
  dream up.  Let us know what you do with it!\n\n## Reporting bugs\n\nPlease report
  any bugs, feature requests, *etc.*, on the [github issue\ntracker](https://github.com/diagrams/diagrams-haddock/issues).\n"
description-type: markdown
hash: df85fadeaf243bbdef999be504ac759fe3a271a43eedd34228189598f3639b1b
homepage: https://diagrams.github.io/
latest: 0.4.1.2
license-name: BSD-3-Clause
maintainer: diagrams-discuss@googlegroups.com
synopsis: Preprocessor for embedding diagrams in Haddock documentation
test-bench-deps:
  QuickCheck: '>=2.4 && <2.15'
  base: '>=0'
  containers: '>=0.4 && <0.7'
  diagrams-haddock: '>=0'
  haskell-src-exts: '>=1.18 && <1.24'
  lens: '>=3.8 && <5.3'
  parsec: '>=3 && <3.2'
  tasty: '>=0.8 && <1.5'
  tasty-quickcheck: '>=0.8 && <0.11'
