all-versions:
- '1.0'
- 1.0.1
- 1.0.2
- '1.1'
- '1.2'
- '1.3'
- 1.3.1
- 1.3.2
- 1.3.3
- 1.3.4
- 1.3.5
author: Renzo Carbonara
basic-deps:
  base: '>=4.9 && <5.0'
  conduit: '>=0'
  containers: '>=0'
  di-core: '>=0'
  exceptions: '>=0'
  monad-control: '>=0'
  mtl: '>=0'
  pipes: '>=0'
  pipes-safe: '>=0'
  primitive: '>=0'
  resourcet: '>=0'
  stm: '>=0'
  streaming: '>=0'
  transformers: '>=0'
  transformers-base: '>=0'
  unliftio-core: '>=0'
changelog: |+
  # Version 1.3.5

  * Add optional support for `conduit` and `resourcet`.


  # Version 1.3.4

  * Fix typo in `unliftio-core` Cabal flag.


  # Version 1.3.3

  * Add `MonadBase`, `MonadBaseControl`, `PrimMonad` and `MonadSafe` instances
    for `DiT`.

  * Add Cabal flags for optional third-party libraries support: `monad-control`,
    `pipes`, `pipes-safe`, `primitive`, `streaming`, `transformers-base`,
    `unliftio-core`.


  # Version 1.3.2

  * Add `MonadUnliftIO` instance for `DiT`.

  * Add `MonadDi` instance for `streaming`'s `Stream`.


  # Version 1.3.1

  * Add `MonadError` instance for `DiT`.

  # Version 1.3

  * The `MonadThrow` instance for `DiT` doesn't log exceptions automatically any
    more. This is because otherwise catching and re-throwing exceptions in
    downstream code, by default, ends up logging the same exception more than
    once.

  * A `throw` function behaving as the previous `MonadThrow` instance for `DiT`
    was introduced.

  * Documentation improvements.


  # Version 1.2

  * The `MonadMask` constraint added in Version 1.1 is gone, effecively
    undoing the breaking change introduced in Version 1.1.


  # Version 1.1

  * **BREAKING CHANGE:** The `MonadThrow` instance for `DiT level path msg
    m` instance now relies on `Di.Core.throw`, potentially logging
    exceptions _at the throw site_.  This introduces a new `MonadMask m`
    instance constraint which can't be satisfied by `STM`. There is a
    `DiT level path msg STM` instance that skips logging exceptions (which
    is the only sensible behavior, anyway). However, if your `m` is not
    exactly `STM` but some wrapper around it, you will need to provide a
    `MonadThrow` instance manually or use `Di.Core.throw'` directly. On
    the other hand, satisfying this `MonadMask` constraint should be easy
    for monads that can run `IO`.

  * Added `onException`.

  # Version 1.0.2

  * Backwards compatibility with `mtl < 2.2.2`.

  # Version 1.0.1

  * Backwards compatibility with `transformers < 0.5.3`.

  # Version 1.0

  * This is a new library part of the `di-core` ecosystem.
    Consider this first release of the new ecosystem a preview release: The API is
    likely to stay stable, but extensive testing, formalization and tooling is
    due.

changelog-type: markdown
description: |+
  # di-monad

  Monadic API to [di-core](https://hackage.haskell.org/package/di-core)
  providing an [mtl](https://hackage.haskell.org/package/mtl) experience.

  [![Build Status](https://travis-ci.org/k0001/di.svg?branch=master)](https://travis-ci.org/k0001/di)

  See the [BSD3 LICENSE](https://github.com/k0001/di/blob/master/di-monad/LICENSE.txt)
  file to learn about the legal terms and conditions for this library.

description-type: markdown
hash: 897ea9312acea378b57436bad84dd8a2066161fb5d66c63158a933e511510e72
homepage: https://github.com/k0001/di
latest: 1.3.5
license-name: BSD-3-Clause
maintainer: renÎ»ren.zone
synopsis: mtl flavoured typeful hierarchical structured logging for di-core.
test-bench-deps: {}
