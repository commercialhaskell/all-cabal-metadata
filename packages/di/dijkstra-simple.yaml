all-versions:
- 0.1.0
author: Gautier DI FOLCO
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.2.1 && <0.7'
  fingertree: '>=0.1.4.0 && <0.1.5'
changelog: |
  ### 0.1.0

   - Introduce the library
changelog-type: markdown
description: |
  # dijkstra-simple

  A simpler Dijkstra shortest paths implementation

  ## Basic usage
  This section contains basic step-by-step usage of the library.

  The first step is to build a direct graph:

  ```
  exampleGraph :: Graph Char Int
  exampleGraph = Graph $ M.fromList [
                                      ('A', [EdgeTo 'B' 3, EdgeTo 'C' 1])
                                    , ('B', [EdgeTo 'A' 3, EdgeTo 'C' 7, EdgeTo 'D' 5, EdgeTo 'E' 1])
                                    , ('C', [EdgeTo 'A' 1, EdgeTo 'B' 7, EdgeTo 'D' 2])
                                    , ('D', [EdgeTo 'B' 5, EdgeTo 'C' 2, EdgeTo 'E' 5])
                                    , ('E', [EdgeTo 'B' 1, EdgeTo 'D' 7])
                                    ]
  ```

  Then pick or create a weighter (see `Graph.DijkstraSimple.Weighters`)
  and apply it all:

  ```
  lightestPaths exampleGraph 'C' weighter
  ```

  It will give all the reacheable vertices from `'C'` and associated shortest path:

  ```
  Paths $ M.fromList [
                       ('A', Path (fromList "AC") 1)
                     , ('B', Path (fromList "BAC") 3)
                     , ('C', Path (fromList "CAC") 1)
                     , ('D', Path (fromList "DC") 2)
                     , ('E', Path (fromList "EBAC") 3)
                     ]
  ```
description-type: markdown
hash: c8ef4401c26369aaea1531eafb59a253cfe9b88f5608c4874e7a9e4d64d0133a
homepage: https://github.com/blackheaven/dijkstra-simple#readme
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: gautier.difolco@gmail.com
synopsis: A simpler Dijkstra shortest paths implementation
test-bench-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.2.1 && <0.7'
  dijkstra-simple: '>=0'
  fingertree: '>=0.1.4.0 && <0.1.5'
  hspec: '>=2.7.1 && <2.8'
