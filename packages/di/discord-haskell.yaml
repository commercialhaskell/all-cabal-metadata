homepage: https://github.com/discord-haskell/discord-haskell
changelog-type: markdown
hash: 29e94370c861952a39a1d136decc6577e6f65d9ec582d98f33df09b6ad547216
test-bench-deps: {}
maintainer: ksfish5@gmail.com
synopsis: Write bots for Discord in Haskell
changelog: "# Changelog\n\nView on github for newest version: https://github.com/discord-haskell/discord-haskell/blob/master/changelog.md\n\nDiscord
  API changes, so use the most recent version at all times\n\n## master\n\n## 1.14.0\n\n[yutotakano](https://github.com/discord-haskell/discord-haskell/pull/124)
  Replace JuicyPixels image parsing with a mimetype check. Make image handling consistent:
  use `parseStickerImage` fro sticker images. Use `parseAvatarImage` for avatars.\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/123/files)
  Make webhook API smaller, each constructor takes in a `Maybe WebhookToken`. Passing
  `Nothing` will continue to work as normal.\n\n[Annwan](https://github.com/discord-haskell/discord-haskell/pull/123)
  Huge documentation flourish. Removed deprecated AppCommandPermissions func & fix
  presences typo\n\n[yutotakano](https://github.com/discord-haskell/discord-haskell/pull/121)
  Replace `OverwriteId` with `Either RoleId UserId` in `ChannelPermission` requests,
  and remove the `type` field from `ChannelPermissionsOpts`\n\n## 1.13.0\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/117)
  Shorten ApplicationCommand names! To update search [the pull-request](https://github.com/discord-haskell/discord-haskell/pull/117/files)
  for what the names are replaced with\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/116)
  Typesafe Snowflakes (guildid, channelid, userid, etcid)\n\nImprove `restCall` type
  error messages https://github.com/discord-haskell/discord-haskell/issues/102\n\n##
  1.12.5\n\n[Annwan](https://github.com/discord-haskell/discord-haskell/pull/109)
  Add `ScheduledEvent` rest API\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/110)
  Add stickers API\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/111)
  Add ModifyGuildMember 'timeout' option\n\n## 1.12.4\n\nLibrary won't crash if something
  fails to parse. Errors are printed to the log\n\n## 1.12.3\n\nAdd another CreateMessage
  flag option, stop crashing on unknown flags.\n\n## 1.12.2\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/107)
  `EditMessage` takes full `MessageDetailedOpts` (instead of Embed)\n\nRemoved `CreateMessageUploadFile`
  (use `CreateMessageDetailed { MessageDetailedOpts { messageDetailedFile } }`)\n\n##
  1.12.1\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/103)
  Add threads, switch api to V10, Update Guild data fields\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/104)
  Add model interaction and components\n\n## 1.12.0\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/96)
  breaking changes and fixes to application commands, interactions, and components,
  and updates elsewhere\n\n## 1.11.0\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/88)
  did a LOT of work wrangling the discord API for interactions and commands!\n\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/94)
  fixed a parse error with webhooktoken\n\n\nrename fields `messageText` -> `messageContent`,
  `messageChannel` -> `messageChannelId`\n\n## 1.10.0\n\n[drewolson](https://github.com/discord-haskell/discord-haskell/pull/80)
  allows parsing an optional guild region\n\n[L0neGamer](https://github.com/discord-haskell/discord-haskell/pull/82)
  add 'animated' flag for Emoji\n\nRemoved `CreateGuild` rest call! You can only do
  it if your bot is in fewer than 10 guilds, and it's [a pain to support](https://discord.com/developers/docs/resources/guild#create-guild).
  Just do it manually.\n\nAdded `Read` instance to complement `Show` for lots of types.
  Removed ToJSON for `Channel`. \n\n## 1.9.1\n\nAdd [color attribute for CreateEmbed](https://github.com/discord-haskell/discord-haskell/issues/78)\n\nRewrite
  [EventLoop.hs](https://github.com/discord-haskell/discord-haskell/issues/70) to
  be easier to modify\n\nRename a bunch of internal handles so they have more consistent
  names\n\n## 1.8.9\n\nHandle both aeson 1.0 and 2.0 [(breaking changes broke builds)](https://github.com/discord-haskell/discord-haskell/issues/77)\n\nSimplify
  [some examples](https://github.com/discord-haskell/discord-haskell/issues/71)\n\n##
  1.8.8\n\nRemove git artifacts from [examples/ping-pong.hs](https://github.com/discord-haskell/discord-haskell/issues/69)\n\n##
  1.8.7\n\nAdd [Stage channel](https://github.com/discord-haskell/discord-haskell/issues/68)
  and a catch-all Unknown channel so we stop crashing on new releases (?)\n\n## 1.8.6\n\nAdd
  [missing fields](https://github.com/discord-haskell/discord-haskell/issues/67) to
  ChannelGuildCategory\n\n## 1.8.5\n\n Fix examples/ping-pong.hs compilation error
  https://github.com/discord-haskell/discord-haskell/issues/65\n\n## 1.8.4\n\n[yutotakano](https://github.com/discord-haskell/discord-haskell/pull/64)
  Added discord replies type, and message constructor\n\n## 1.8.3\n\nBot no longer
  disconnects randomly (hopefully)  https://github.com/discord-haskell/discord-haskell/issues/62\n\n##
  1.8.2\n\nAdded 'Competing' activity https://github.com/discord-haskell/discord-haskell/issues/61\n\nResend
  the last Activity settings on Resume fixing https://github.com/discord-haskell/discord-haskell/issues/60\n##
  1.8.1\n\nAdded `MessageReaction` to Message https://github.com/discord-haskell/discord-haskell/issues/56\n\n##
  1.8.0\n\nFixed [null parent_id on channel](https://github.com/discord-haskell/discord-haskell/issues/55)\n\n##
  1.7.0\n\n[elikoga](https://github.com/discord-haskell/discord-haskell/pull/51) Changed
  to use `ReaderT` interface\n\n[elikoga](https://github.com/discord-haskell/discord-haskell/pull/50)
  Fixed compiler warnings\n\nChanged api url to new `discord.com`\n\n## 1.6.1\n\nChanged
  discordapp.com to discord.com in accordance with official discord policy \n\n[rexim](https://github.com/discord-haskell/discord-haskell/pull/41)
  Add `Emoji.user` field. Who uploaded the emoji\n\n## 1.6.0\n\nAdd News Channel and
  StorePage Channel. Fix crash `Unknown channel type:5`\n\nAdd NSFW and UserRateLimit
  to `Channel` type\n\n## 1.5.1\n\nFix `EditMessage` rest request, send JSON\n\n##
  1.5.0\n\n[rexim](https://github.com/discord-haskell/discord-haskell/pull/35) Add
  `Read` instance for `Snowflake`\n\n## 1.4.0\n\nRename `SubEmbed` to `EmbedPart`\n\nNew
  and improved Embed API: Add `CreateEmbed` record and `createEmbed :: CreateEmbed
  -> Embed`\n\n`CreateEmbedImageUpload` implementation inspired by [Flutterlice](https://github.com/discord-haskell/discord-haskell/pull/32)\n\n##
  1.3.0\n\n[PixeLinc](https://github.com/discord-haskell/discord-haskell/pull/33)
  Add `DeleteSingleReaction` rest-request, Add GuildId to `ReactinInfo`, Add `MESSAGE_REACTION_REMOVE_EMOJI`
  gateway event\n\n`GetReactions` actually returns the User objects request\n\nRename
  `Ban` to `GuildBan`\n\nRe-export UTCTime from `time` package\n\n## 1.2.0\n\n[MDeltaX](https://github.com/discord-haskell/discord-haskell/pull/27)
  Fixed typo: depreciated --> deprecated\n\n[MDeltaX](https://github.com/discord-haskell/discord-haskell/pull/29)
  More consistency: RoleID --> RoleId\n\n[MDeltaX](https://github.com/discord-haskell/discord-haskell/pull/29)
  Fix ModifyGuildRole: Post --> Patch && optional args\n\n[Hippu](https://github.com/discord-haskell/discord-haskell/pull/31)
  Won't crash on integer-nonces in ChannelMessage-events (usually strings)\n\n## 1.1.3\n\nMinor
  improvements to rate-limiting like using newer `X-RateLimit-Reset-After` header\n\n##
  1.1.2\n\n[michalrus](https://github.com/discord-haskell/discord-haskell/issues/25)
  Fix `DeleteGuildRole` parse exception\n\n## 1.1.1\n\nFix ModifyGuildRolePositions
  results in 400 Bad Request issue\n\n## 1.1.0\n\nUpgrade req to 2.x major version.\n\n##
  1.0.0\n\nGoing through some major updates to the library. Expect types to change
  and things to break.\n\nCompare the [old ping-pong](https://github.com/discord-haskell/discord-haskell/blob/20f7f8556823a754c76d01484118a5abf336530b/examples/ping-pong.hs)\nto
  the [new ping-pong](https://github.com/discord-haskell/discord-haskell/blob/7eaa6ca068f945603de7f43f6f270c2dbecd3c85/examples/ping-pong.hs)\n\nAdded
  a few rest ADT types\n\n## 0.8.4\n\n[marcotoniut](https://github.com/discord-haskell/discord-haskell/pull/18)
  Improved changed Embed ADT to have optional fields, and improved two field names\n\nAdd
  `ModifyGuildMember`, `AddGuildMember`, `AddGuildMemberRole`, `AddGuildMemberRole`,
  `RemoveGuildmembeRole`, `GetGuildBan`, `GetGuildVanityURL` rest data types\n\n##
  0.8.3\n\nSimplify Message Author from `Either WebhookId User` to `User`\n\nAdd `loginRestGatewayWithLog`\n\n###
  0.8.2\n\nHardcode CreateReaction delay so bots can add reactions 4 times faster\n\n[MP2E](https://github.com/discord-haskell/discord-haskell/pull/14)
  Fixed parse error on GuildBanAdd + GuildBanRevoke: user\\_object instead the whole
  object\n\n### 0.8.1\n\n[MP2E](https://github.com/discord-haskell/discord-haskell/pull/11)
  Fixed parse error on GuildRoleDelete: role_id instead of role\n\n### 0.8.0\n\n`MessageUpdate`
  does not contain a full Message object, just `ChannelId` `MessageId`\n\nMessage
  Author changed from `User` to `Either WebhookId User`\n\nAdd Webhook ADT\n\nAdd
  requests: GetInvite, DeleteInvite\n\nUpdateStatusVoiceOpts takes Bool for Mute\n\n`Unavailable`
  becomes `GuildUnavailable`\n\n### 0.7.1\n\n[t1m0thyj](https://github.com/discord-haskell/discord-haskell/pull/6/files)
  Typo in RequestGuildMemberOpts fields fixed.\n\n[t1m0thyj](https://github.com/discord-haskell/discord-haskell/pull/6/files)
  Added Activity, ActivityType ADT\n\nUpdateStatusTypes became UpdateStatusType (singular
  ADT)\n\n[t1m0thyj](https://github.com/discord-haskell/discord-haskell/pull/7) Retry
  connection on 1001 websocket close\n\n### 0.7.0\n\nSnowflake -> named id\n\nAdd
  requests: ModifyChanPositions, CreateGuildChannel\n\nChanged constructors of Channel
  to have prefix \"Channel\", isGuildChannel --> channelIsInGuild\n\nChange Emoji
  Id ADTs\n\n### 0.6.0\n\nAdd requests: CreateGuildEmoji, GroupDMRemoveRecipient,
  ModifyCurrentUser, EditChannelPermissions, CreateChannelInvite, GroupDMAddRecipient,
  ModifyGuild\n\nrestCall, readCache pass errors as an ADT, including underling http
  exceptions\n\nOnly add \"Bot \" prefix to secret token if it's not there\n\n###
  0.5.1\n\nsendCommand with GatewaySendable types\n\n### 0.5.0\n\nrestCall with Request
  types\n\nnextEvent with Event types\n"
basic-deps:
  http-client: '>=0.6 && <0.7'
  emoji: ==0.1.*
  bytestring: '>=0.10 && <0.11'
  unliftio: ==0.2.*
  MonadRandom: '>=0.5 && <0.6'
  base: ==4.*
  time: '>=1.9 && <1.10'
  base64-bytestring: '>=1.1 && <1.2'
  text: ==1.2.*
  safe-exceptions: '>=0.1 && <0.2'
  http-api-data: '>=0.4 && <0.5'
  async: '>=2.2 && <2.3'
  websockets: '>=0.12 && <0.13'
  req: '>=3.9 && <3.10'
  data-default: '>=0.7 && <0.8'
  containers: '>=0.6 && <0.7'
  iso8601-time: '>=0.1 && <0.2'
  wuss: '>=1.1 && <1.2'
  mtl: '>=2.2 && <2.3'
  discord-haskell: -any
  scientific: '>=0.3 && <0.4'
  aeson: '>=1.5 && <1.6'
all-versions:
- 0.5.0
- 0.5.1
- 0.6.0
- 0.7.0
- 0.7.1
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.2.0
- 1.3.0
- 1.4.0
- 1.5.0
- 1.5.1
- 1.5.2
- 1.6.0
- 1.6.1
- 1.7.0
- 1.8.0
- 1.8.1
- 1.8.2
- 1.8.3
- 1.8.4
- 1.8.5
- 1.8.6
- 1.8.7
- 1.8.8
- 1.8.9
- 1.9.0
- 1.9.1
- 1.9.2
- 1.10.0
- 1.11.0
- 1.12.0
- 1.12.1
- 1.12.2
- 1.12.3
- 1.12.4
- 1.12.5
- 1.13.0
- 1.14.0
author: Karl
latest: 1.14.0
description-type: markdown
description: |
  # discord-haskell        [![CI Status](https://github.com/discord-haskell/discord-haskell/actions/workflows/main.yml/badge.svg)](https://github.com/discord-haskell/discord-haskell/actions/)        [![Hackage version](http://img.shields.io/hackage/v/discord-haskell.svg?label=Hackage)](https://hackage.haskell.org/package/discord-haskell)              [![Discord server](https://discord.com/api/guilds/918577626954739722/widget.png?style=shield)](https://discord.gg/eaRAGgX3bK)


  Build that discord bot in Haskell! Also checkout the
  [calamity haskell library](https://github.com/nitros12/calamity)
  for a more advanced interface.


  #### Documentation

  #### [[installing](./docs/installing.md)] [[debugging](./docs/debugging.md)] [[creating-bot](./docs/creating-bot.md)]

  #### [[app-commands](./docs/applicationcommands.md)] [[components](./docs/components.md)] [[cache](./docs/cache.md)] [[embeds](./docs/embeds.md)] [[emoji](./docs/emoji.md)] [[intents](./docs/intents.md)] [[voice](./docs/voice.md)]

  #### [[design](./docs/design.md)] [[contributing](./docs/contributing.md)] [[todo](./docs/todo.md)]

  #### Example

  This is an example bot that replies "pong" to messages that start with "ping". Checkout the [other examples](./examples/) for things like state management.

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}  -- allows "string literals" to be Text
  import           Control.Monad (when, void)
  import           UnliftIO.Concurrent
  import           Data.Text (isPrefixOf, toLower, Text)
  import qualified Data.Text.IO as TIO

  import           Discord
  import           Discord.Types
  import qualified Discord.Requests as R

  -- | Replies "pong" to every message that starts with "ping"
  pingpongExample :: IO ()
  pingpongExample = do
      userFacingError <- runDiscord $ def
               { discordToken = "Bot ZZZZZZZZZZZZZZZZZZZ"
               , discordOnEvent = eventHandler
               , discordOnLog = \s -> TIO.putStrLn s >> TIO.putStrLn ""
               } -- if you see OnLog error, post in the discord / open an issue

      TIO.putStrLn userFacingError
      -- userFacingError is an unrecoverable error
      -- put normal 'cleanup' code in discordOnEnd (see examples)

  eventHandler :: Event -> DiscordHandler ()
  eventHandler event = case event of
      MessageCreate m -> when (isPing m && not (fromBot m)) $ do
          void $ restCall (R.CreateReaction (messageChannelId m, messageId m) "eyes")
          threadDelay (2 * 10^6)
          void $ restCall (R.CreateMessage (messageChannelId m) "Pong!")
      _ -> return ()

  fromBot :: Message -> Bool
  fromBot = userIsBot . messageAuthor

  isPing :: Message -> Bool
  isPing = ("ping" `isPrefixOf`) . toLower . messageContent
  ```

  #### Discord Server

  Ask questions, get updates, request features, etc in the project discord server: <https://discord.gg/eaRAGgX3bK>

  #### Official Discord Documentation

  This api closley matches the [official discord documentation](https://discord.com/developers/docs/intro),
  which lists the rest requests, gateway events, and gateway sendables.

  You can use the docs to check the name of something you want to do. For example:
  the docs list a [Get Channel](https://discord.com/developers/docs/resources/channel#get-channel) API path,
  which translates to discord-haskell's rest request ADT for `GetChannel` of type `ChannelId -> ChannelRequest Channel`.

  #### Open an Issue

  If something goes wrong: check the error message (optional: check [the debugging logs](./docs/debugging.md)), make sure you have the most recent version, ask on discord, or open a github issue.
license-name: MIT
