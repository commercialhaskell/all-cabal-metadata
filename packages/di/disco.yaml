all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.4
- 0.1.5
- 0.1.6
- '0.2'
author: Disco team
basic-deps:
  QuickCheck: '>=2.9 && <2.16'
  algebraic-graphs: '>=0.5 && <0.8'
  arithmoi: '>=0.10 && <0.14'
  base: '>=4.8 && <4.21'
  boxes: '>=0.1.5 && <0.2'
  constraints: '>=0.13.4 && <0.15'
  containers: '>=0.5 && <0.8'
  directory: '>=0'
  disco: '>=0'
  edit-distance: '>=0.2 && <0.3'
  exact-combinatorics: '>=0.2 && <0.3'
  exceptions: '>=0.10 && <0.11'
  fgl: '>=5.5 && <5.9'
  filepath: '>=0'
  haskeline: '>=0.8 && <0.9'
  infinite-list: '>=0.1 && <0.2'
  integer-logarithms: '>=1.0 && <1.1'
  lens: '>=4.14 && <5.4'
  megaparsec: '>=6.1.1 && <9.7'
  mtl: '>=2.2 && <2.4'
  oeis2: '>=1.0.9 && <1.1'
  optparse-applicative: '>=0.12 && <0.19'
  parser-combinators: '>=1.0.0 && <1.4'
  polysemy: '>=1.6.0.0 && <1.10'
  polysemy-plugin: '>=0.4 && <0.5'
  pretty-show: '>=1.10 && <1.11'
  prettyprinter: '>=1.7 && <1.8'
  random: '>=1.2.1.1 && <1.3'
  reflection: '>=2.1.7 && <2.2'
  simple-enumeration: '>=0.2 && <0.3'
  split: '>=0.2 && <0.3'
  splitmix: '>=0.1 && <0.2'
  text: '>=2.0.2 && <2.2'
  transformers: '>=0.4 && <0.7'
  unbound-generics: '>=0.4.4 && <0.5'
changelog: |
  * 0.2 (22 January 2025)

    - Allow `><` as syntax for product types
    - Use syntax `T` and `F` for booleans
    - New `:table` command
    - Suggest alternate variable names based on edit distance
    - Fix crash when computing `0^(-1)`
    - `min` and `max` are now prefix instead of infix
    - Display multiple example types for things with nontrivial polymorphism (#388)
    - Randomness primitives (Justin Grubbs, #390)
    - Automatic memoization (Justin Grubbs, #394)
    - Remove decimal output
    - Function pattern coverage checking (Colin Phillips, #434)
    - A lot more documentation, including the start of a "gentle
      introduction"
    - Add support for GHC 9.10 and drop 9.4
    - Better parser for `:load` (#430)
    - Better test result reporting (#428)

  * 0.1.6 (16 December 2023)

    - A bunch more documentation
    - Allow `!=` as a synonym for `/=`
    - Allow `=<` and `=>` as aliases for `<=` and `>=`, respectively
    - Better reporting of test results
    - Load standard library modules immediately on startup
    - `:doc` now works for case expressions, wildcard patterns, `unit`
      and `Unit`
    - Allow optional commas on either side of an ellipsis (#361)
    - Propositions can be combined with binary operators (thanks to
      @cally-cmd)

  * 0.1.5 (12 March 2022)

    - Syntax errors in function definitions now result in much more
      helpful error messages.  Before, it would just complain about
      something being wrong with the '=' sign.
      ([#346](https://github.com/disco-lang/disco/issues/346))

  * 0.1.4 (10 March 2022)

    - New features or syntax
        - `if` and `when` are now synonyms

    - Bug fixes
        - Only allow constructing sets and bags with element types
          that can be compared ([#306](https://github.com/disco-lang/disco/issues/306))

    - UI
        - Test results are now printed in the same order in which
          they were declared

  * 0.1.3.1 (5 March 2022)

    - Fix [#340](https://github.com/disco-lang/disco/issues/340): disco
      no longer crashes when encountering an undefined name at runtime,
      but prints a nice error message instead.

  * 0.1.3.0 (3 March 2022)

    - New features or syntax
        - `∈` now works as a synonym for `elem`
        - add `→` and `↔` as synonyms for `->`, `<->`

    - Additional documentation for `|~|`, `power`

    - UI
        - `--help`, `--version`, and the welcome message now all report
          the current version number
        - Typechecking errors now report the name of the thing being
          typechecked when the failure occurred
        - The values of top-level expressions are now printed when
          `:load`ing

  * 0.1.2.0 (12 February 2022)

    - New features or syntax
        - Add `String` type synonym
        - New `iff` / `<->` operator
        - New Cartesian product operator `><`
        - `|~|` notation now denotes container size in addition to
          absolute value

    - Documentation
        - `:doc` command now works on many more things
        - A lot of additional documentation and some improved error
          messages

    - A few small bug fixes related to parsing

  * 0.1.1.0 (21 January 2022)

    - `->`, `/\`, `\/` syntax for implies, and, or
    - `truthtable.disco` example
    - Coinductively check user-defined types for qualifiers (#317)
    - Additional documentation

  * 0.1.0.0 (17 January 2022): initial release
changelog-type: markdown
description: |
  [![Build Status](https://travis-ci.org/disco-lang/disco.svg?branch=master)](https://travis-ci.org/disco-lang/disco)
  [![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.md)

  Disco is a programming language intended to teach basic functional
  programming principles in the context of a discrete mathematics
  course.

  Design principles
  -----------------

  * Includes those features, and *only* those features, useful in the
    context of a discrete math course. This is *not* intended to be a
    general-purpose language.
  * Syntax is as close to standard *mathematical* practice as possible,
    to make it easier for mathematicians to pick up, and to reduce as
    much as possible the incongruity between the language and the
    mathematics being explored and modeled.
  * Tooling, error messages, etc. are very important---the language
    needs to be accessible to undergrads with no prior programming
    experience. (However, this principle is, as of yet, only
    that---there is no tooling or nice error messages to speak of.)

  Feel free to look around, ask questions, etc.  You can also
  [contribute](CONTRIBUTING.md)---collaborators are most welcome.

  Community
  ---------

  Check out the disco IRC channel, `#disco-lang` on Libera.Chat.  If
  you're not familiar with IRC, you can connect via [this web client](https://kiwiirc.com/nextclient/irc.libera.chat/?nick=Guest?#disco-lang).

  Documentation
  -------------

  Documentation is [hosted on
  readthedocs.io](http://disco-lang.readthedocs.io/en/latest/).

  Contributing
  ------------

  If you'd like to contribute to disco development, check out
  [CONTRIBUTING.md](CONTRIBUTING.md).

  Building disco
  --------------

  - The first step is to install the Haskell programming language (the
    language in which Disco is implemented).  If you don't already have
    Haskell installed, you can [follow the directions
    here](http://ozark.hendrix.edu/~yorgey/install-haskell.html).

  - Now, at a command prompt, run `cabal update`, which will download
    the latest information about Haskell packages.

  - Now run `cabal install disco` at a command prompt.

      - Note that this may take a very long time, on the order of an
        hour or so.
      - The good news is that most of this work only needs to be done
        once, even if you later install an updated version of disco.
        Even if installation fails partway through, the work already
        completed up to that point need not be redone.
      - On OSX, if building fails with an error like `ghc: could not
        execute: opt`, it means you need to install LLVM.  The easiest
        way to do this is to first [follow the instructions to install
        Homebrew](https://brew.sh/) (if you don't already have it), and
        then type

            brew install llvm

        at a terminal prompt.

          - If this fails with an error like `Could not resolve HEAD to
            a revision`, then try running these two commands at a
            terminal prompt:

                rm -rf $(brew --repo homebrew/core)
                brew tap homebrew/core

            Then re-run the `brew install llvm` command.

          - After installing `llvm`, you may need to close and re-open
            the terminal before running `cabal install disco` again.

  - If it works, you should be able to now type `disco` at a command
    prompt, which should display a message like this:

      ```
      Welcome to Disco!

      A language for programming discrete mathematics.

      Disco>
      ```

  - If installation seems like it succeeded but the `disco` command is
    not recognized, it may be an issue with your path environment
    variable settings.  Try running `disco` using an explicit path:
      - `~/.cabal/bin/disco` on Linux, OSX, or WSL2
      - `C:\cabal\bin\disco` on Windows
      - If those don't work, poke around and see if you can figure
        out where the `cabal/bin` folder is on your computer, and
        run `disco` from there.
      - If you wish, you may add the `cabal/bin` folder (wherever it is
        located) to your `Path` (Windows) or `PATH` (Linux/OSX)
        environment variable, so that you can run disco simply by typing
        `disco`.  However, this step is optional.

  - On Windows, if disco crashes with an error about `foldr` after you
    try to type anything (or if it simply closes the entire window when
    you type anything), the problem is probably that you need to [enable
    UTF-8 mode](https://github.com/disco-lang/disco/issues/253).

      - Open a command prompt, and type

            chcp 65001

      - Now start `disco` as before (by typing `disco` or
        `C:\cabal\bin\disco` or whatever worked).

      - You will have to do this every time you run disco.
        Alternatively, you can create a file called `disco.cmd`
        containing those two commands, for example:

            chcp 65001
            C:\cabal\bin\disco

        Now you can simply double-click on `disco.cmd` to run disco.

  If you encounter any difficulties, please let me know --- either come
  talk to me or [open a GitHub
  issue](https://github.com/disco-lang/disco/issues/new).  These
  instructions will be kept up-to-date with whatever helpful tips or
  workarounds I learn. So even if you encounter a difficulty but figure
  out the solution youself, let me know --- that way I can include the
  problem and solution here so others can benefit!
description-type: markdown
hash: faec155a4af3c4b78944eea47a4791c9ba21ed62c53db16536b3928e19ff2fc4
homepage: ''
latest: '0.2'
license-name: BSD-3-Clause
maintainer: byorgey@gmail.com
synopsis: Functional programming language for teaching discrete math.
test-bench-deps:
  base: '>=4.7 && <4.21'
  bytestring: '>=0.9 && <0.13'
  directory: '>=1.2 && <1.4'
  disco: '>=0'
  filepath: '>=1.4 && <1.6'
  process: '>=1.4 && <1.7'
  tasty: '>=0.10 && <1.6'
  tasty-golden: '>=2.3 && <2.4'
