all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.4
- 0.1.5
author: Tillmann Vogt
basic-deps:
  JuicyPixels: '>=3.1.5 && <3.4'
  attoparsec: '>=0.10'
  base: '>=4 && <5'
  base64-bytestring: '>=0'
  blaze-builder: '>=0'
  blaze-markup: '>=0'
  bytestring: '>=0'
  colour: '>=0'
  conduit: '>=0'
  conduit-extra: '>=0'
  containers: '>=0'
  css-text: '>=0'
  data-default: '>=0.8 && <0.9'
  diagrams-core: '>=1.3 && <1.6'
  diagrams-lib: '>=1.3 && <1.6'
  digits: '>=0'
  either: '>=4.4'
  linear: '>=1.11.3'
  resourcet: '>=0'
  semigroups: '>=0'
  split: '>=0'
  system-filepath: '>=0'
  text: '>=0.11'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  xml-conduit: '>=1.3'
  xml-types: '>=0.3 && <0.4'
changelog: |
  # v0.1.5 (3 April 2025)

  - Update SVG parser to account for optional comma separation of values ([#21](https://github.com/diagrams/diagrams-input/pull/21), thanks to @Chobbes)
  - Allow `diagrams-lib-1.5` and test on GHC 9.12

  # v0.1.4 (5 Nov 2024)

  - Require `data-default-0.8`

  # v0.1.3.1 (24 Sep 2024)

  - Test up to GHC 9.10
  - Fix a few warnings

  # v0.1.3 (20 June 2023)

  - Add new function `readSVGLBS` to read an SVG directly from a lazy
    `ByteString` (thanks to Igor Moreno)

  # v0.1.2 (14 June 2023)

  - Fix parsing bug that was causing some paths to be read
    incorrectly ([#17](https://github.com/diagrams/diagrams-input/issues/17))
  - Test with GHC 9.6

  # v0.1.1 (8 Jan 2023)

  - Fix example in documentation
  - Fix `readSVGFile` function to return `Left` for any exception
    generated during parsing (thanks to Hans Roland Senn)

  # v0.1 (25 March 2022)

  - initial release
changelog-type: markdown
description: "# diagrams-input\n\ndiagrams-input provides functions to parse several
  input formats for [diagrams](https://github.com/diagrams):\n- Raster images: PNG,
  JPG, ...  (using [Juicy.Pixels](https://github.com/Twinside/Juicy.Pixels))\n- SVG
  (using [xml-conduit](https://github.com/snoyberg/xml/tree/master/xml-conduit) and
  [attoparsec](https://github.com/bos/attoparsec))\n\nIn the future it would be nice
  to have:\n- HTML + CSS (We need CSS anyway if we want to implement the SVG parser
  properly).\n  HTML could be a good exercise for developing layouting functions.\n-
  PDF\n- Collada (3d)\n- Obj (3d)\n\n# Usage\nThe main functions are [loadimageEmbedded](https://github.com/diagrams/diagrams-input/blob/21b58f8bfed86e0a96865848c680d465027a638e/src/Diagrams/TwoD/Input.hs#L34)
  and [loadImageExternal](https://github.com/diagrams/diagrams-input/blob/21b58f8bfed86e0a96865848c680d465027a638e/src/Diagrams/TwoD/Input.hs#L44)
  that return either a Left error-message or a Right diagram.\nSee the [diagrams manual](http://projects.haskell.org/diagrams/doc/manual.html#images).\n\n#
  The SVG Parser\nThe SVG parser evolved like maybe most others also did: By taking
  some SVG images, focussing on one image, getting it displayed correctly. See if
  the changes affect other images positively. Figuring out what is the most important
  thing to fix next. The SVG 1.1 spec was used.\nFor testing purposes [diagrams-input-test](https://github.com/diagrams/diagrams-input-test)
  reads and writes all images in a directory.\n\n### Supported Tags\nSupport of [SVG
  1.1](http://www.w3.org/TR/SVG/):\n\n| Tags               |   Support                                          |
  Partial Support |  Missing      |\n| -------------------|:--------------------------------------------------:|:---------------:|:-------------:|\n|
  Document Structure:| \\<svg\\>\\<g\\>\\<defs\\>\\<desc\\>\\<title\\>\\<symbol\\>\\<use\\>
  \          | \\<image\\>         | \\<switch\\>      |\n| Style tag:         | Yes
  \                                               | CSS             |               |\n|
  Path tag:          | All commands                                       |                 |
  \              |\n| Basic Shapes:      | \\<rect\\>\\<circle\\>\\<ellipse\\>\\<line\\>\\<polyline\\>\\<polygon\\>
  \  |                 |               |\n| Text tag:          | Pass the tag through
  to diagrams-svg or replace it with outlines from the font tag | | |\n| Filling,
  Stroking and Marker Symbols: |                                 |                 |
  \\<marker\\>      |\n| Gradients, Patterns: | Linear and Radial Gradients                      |
  \                | \\<pattern\\>     |\n| Clipping, Masking: | Clipping                                           |
  \                | \\<mask\\>        |\n| Filter effects     | No, not supported
  by diagrams                      |                 |               |\n| Linking
  \           | No                                                 |                 |
  \              |\n| Animation          | No, SVG Animation will likely be replaced
  by [Web Animations](http://www.w3.org/TR/web-animations/) | | |\n| Fonts:             |
  It is planned to integrate SVGFonts                |                 |               |\n|
  Metadata           | No                                                 |                 |
  \              |\n| Inkscape tags      | No                                                 |
  \                |               |\n\n### TODO\n- [ ] fill = \"none\" => path open\n-
  [ ] Scale viewbox to width and height\n- [ ] marker tag\n- [ ] Transform exceptions
  into Left values in Image.hs (if monad transformers and conduit is easy for you
  please help me)\n- [ ] inherit-attribute\n- [ ] display-attribute\n- [ ] Integrate
  SVGFonts, because it is too much entangled with SVG to be separate\n- [ ] loadIamgeExternal
  for SVG\n\n### A Walk through the Code\n1. [Input.hs](https://github.com/diagrams/diagrams-input/blob/master/src/Diagrams/TwoD/Input.hs)
  contains the main functions [loadimageEmbedded](https://github.com/diagrams/diagrams-input/blob/21b58f8bfed86e0a96865848c680d465027a638e/src/Diagrams/TwoD/Input.hs#L34)
  and [loadImageExternal](https://github.com/diagrams/diagrams-input/blob/21b58f8bfed86e0a96865848c680d465027a638e/src/Diagrams/TwoD/Input.hs#L44).
  They call [readimage](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/TwoD/Image.hs#L59)
  from [JuicyPixels](https://github.com/Twinside/Juicy.Pixels) and [readSVGFile](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/ReadSVG.hs#L184-L186)
  from [ReadSVG.hs](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/ReadSVG.hs).\n2.
  In [ReadSVG.hs](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/ReadSVG.hs)
  the xml file is [parsed](https://github.com/diagrams/diagrams-input/blob/d8e2d9ee91b0e23fa1fea69d892101395cd5f8e7/src/Diagrams/SVG/ReadSVG.hs#L210)
  and translated into a [tree](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/Tree.hs#L52-L84).
  That was necessary because there need to be at least two passes because of references
  with the \\<use\\>-tag. The tree has Constructors that take functions that expect
  data (like css) that is only known after the first pass.\n3. All the [nodes](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/Tree.hs#L132-L157)
  of the tree are stored in a [key value storage](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/ReadSVG.hs#L195-L197).
  \n   Every node contains the whole subtree, but this is no problem because of lazy
  evaluation\n4. Gradients that have nested references to other gradients are [flattened](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/Tree.hs#L193-L243)
  into one gradient.\n5. References are [inserted](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/Tree.hs#L256-L281)
  using the key-value-storage and everything is combined into one [diagram](https://github.com/diagrams/diagrams-input/blob/afcb278dbbaee2d58deacb58d9294810bb7606c0/src/Diagrams/SVG/ReadSVG.hs#L191-L192).\n\n###
  Other SVG Parsers\n- Haskell: [svg-tree](https://github.com/Twinside/svg-tree) (currently
  not targeted at `diagrams`)\n- Java: [Processing](https://github.com/processing/processing/blob/7f63dad6f21db722fe98d7a1f2afaa3de6c17b4c/core/src/processing/core/PShapeSVG.java)\n-
  Java: [Apache Batik](https://github.com/apache/batik)\n- Javascript: [canvg](https://github.com/gabelerner/canvg)\n"
description-type: markdown
hash: 135104e3b5c4b912f30b8d863e9d4e40783ad4c296e2d516533bb92df14291d5
homepage: ''
latest: 0.1.5
license-name: BSD-3-Clause
maintainer: diagrams-discuss@googlegroups.com
synopsis: Parse raster and SVG files for diagrams
test-bench-deps: {}
