all-versions:
- 0.1.0.0
- 0.1.1.0
author: Dixon Sean Low Yan Feng
basic-deps:
  aeson: ^>=2.2.3.0
  aeson-pretty: ^>=0.8.10
  base: '>=4.19 && <5'
  base64-bytestring: ^>=1.2.1.0
  bytestring: ^>=0.12.1.0
  commonmark: ^>=0.2.6.1
  containers: ^>=0.7
  crypton: ^>=1.0.4
  directory: ^>=1.3.8.5
  filepath: ^>=1.4.301.0
  ipynb: ^>=0.2
  libyaml: ^>=0.1.4
  megaparsec: ^>=9.7.0
  memory: ^>=0.18.0
  mime-types: ^>=0.1.2.0
  mtl: '>=2.3.1 && <2.4'
  nbparts: '>=0'
  optparse-applicative: ^>=0.19.0.0
  parsec: ^>=3.1.18.0
  text: '>=2.1.1 && <2.2'
  transformers: ^>=0.6.0.0
  yaml: ^>=0.11.11.2
changelog: |
  # `nbparts` Changelog

  ## v0.1.1.0

  - Fix incorrect serialisation of `FormatJson` in the manifest file.

    - For backward compatibility, `nbparts` will still be able to deserialise the incorrect representation.

  - Media directories (`media` and `outputs-media`) will now only be created if necessary (i.e., when there are media to export).

  - Packing will no longer fail when the outputs file is missing. Instead, `nbparts` will warn and assume that the notebook has no outputs.

  ## v0.1.0.0

  - Initial release.
changelog-type: markdown
description: |
  # `nbparts`

  [![Build](https://github.com/dixslyf/nbparts/actions/workflows/build.yaml/badge.svg?branch=master&event=push)](https://github.com/dixslyf/nbparts/actions/workflows/build.yaml)
  [![Build (Nix)](https://github.com/dixslyf/nbparts/actions/workflows/build-nix.yaml/badge.svg?branch=master&event=push)](https://github.com/dixslyf/nbparts/actions/workflows/build-nix.yaml)
  ![Hackage Version](https://img.shields.io/hackage/v/nbparts?label=Hackage)

  `nbparts` is a tool for splitting Jupyter notebooks into its "parts":

  - sources (code and Markdown content),

  - outputs, and

  - metadata.

  These parts can be re-assembled back into an equivalent Jupyter notebook.
  The goal is to make it easier to store and diff Jupyter notebooks in text-based version control systems like Git.

  ## Features

  - **Unpack**: Split a Jupyter notebook into its sources, outputs and metadata.

  - **Pack**: Reconstruct the original Jupyter notebook from unpacked parts.

  - **Formats**:
      - Sources can be exported as _YAML_, _JSON_ or _Markdown_.

      - Outputs and metadata can be exported as _YAML_ or _JSON_.

  - **Binary outputs and attachments** (e.g. PNG images, Markdown attachments) are extracted as files alongside the parts.

  - **Roundtrip safety**: `unpack` followed by `pack` yields a notebook semantically equivalent to the original.
    Markdown and code formatting is preserved.

      The only known caveat at this point in time is that,
      when re-encoding binary attachments and outputs into base64,
      `nbparts` always performs line wrapping after 76 characters;
      however, not all Jupyter notebook platforms perform line wrapping
      on the base64 strings, so although the content reconstructed by `nbparts`
      is the same, the formatting may slightly differ.

  ## Motivation

  Jupyter notebooks are widely used for data exploration and analysis,
  but because they are large JSON documents,
  storing them in version control systems like Git is painful:

  - Attachments, execution outputs and metadata add significant noise to diffs
    and overshadow meaningful changes.

  - Even after removing metadata and binary outputs from a notebook,
    the diffs for small edits to code or Markdown content are a little difficult to read
    due to syntactic JSON elements.

  - Collaborating on notebooks is hard when every commit contains unrelated noise.

  Tools like Jupytext (awesome tool!) help by representing notebook sources as plaintext.
  `nbparts` complements this idea by splitting a notebook not only into its sources,
  but also into its outputs and metadata, as separate parts.
  This gives us more flexibility:

  - If you only care about the source code and Markdown,
    you can ignore the outputs and metadata.

  - If outputs or metadata matter for reproducibility,
    you can commit them alongside the sources.
    Since attachments and binary outputs are extracted,
    you may even use tools like Git LFS for versioning them.

  ## Installation

  ### Cabal

  `nbparts` can be installed with Cabal.

  You may first want to update Cabal's package database:

  ```
  cabal update
  ```

  Then, run:

  ```
  cabal install nbparts
  ```

  ### Pre-Built Binaries

  Static binaries for x86_64 Linux are available from the [releases](https://github.com/dixslyf/nbparts/releases).

  Unfortunately, no binary releases are available for macOS and Windows at this point in time (contributions welcome!).
  Please refer to [Compiling from Source](#compiling-from-source).

  ## Basic Usage

  Unpack a notebook with all parts exported to YAML:

  ```sh
  # This will create a `notebook.ipynb.nbparts` directory.
  nbparts unpack notebook.ipynb
  ```

  Pack the parts back into a notebook:

  ```
  nbparts pack notebook.ipynb.nbparts -o notebook-repacked.ipynb
  ```

  Unpack a notebook, with sources exported to Markdown:

  ```
  nbparts unpack notebook.ipynb --sources-format markdown
  ```

  For more options, see:

  ```
  nbparts --help
  ```

  ## Compiling From Source

  ### Cabal

  `nbparts` uses Cabal for building and packaging.

  To build and install `nbparts`, ensure you have Cabal and GHC installed.

  Update Cabal's package database:

  ```
  cabal update
  ```

  Now, clone the repository and `cd` into it. Then, run:

  ```
  cabal install
  ```

  ### Nix

  `nbparts` provides a Nix flake for building x86_64 Linux binaries.

  To build:

  ```
  nix build github:dixslyf/nbparts#nbparts
  ```

  To run:

  ```
  nix run github:dixslyf/nbparts#nbparts
  ```

  Static binaries can be built using Nix and are exposed as the `nbparts-static` flake output:

  ```
  nix build github:dixslyf/nbparts#nbparts-static
  ```

  ```
  nix run github:dixslyf/nbparts#nbparts-static
  ```

  ## Running Tests

  `nbparts` uses Hspec and Hedgehog for testing.

  To run `nbparts`'s tests,
  clone the repository and `cd` into it.
  Then, run:

  ```
  cabal test
  ```

  ### Nix

  Tests can also be run with Nix:

  ```
  nix run github:dixslyf/nbparts#nbparts:test:test-nbparts
  ```
description-type: markdown
hash: 393f53cc1e13c3d48bd4f7875de1d0e1ff255c9c1fa4e86f904b09781f4361b7
homepage: https://github.com/dixslyf/nbparts
latest: 0.1.1.0
license-name: Apache-2.0
maintainer: root@dixslyf.dev
synopsis: Unpack a Jupyter notebook into its sources, metadata and outputs
test-bench-deps:
  aeson: ^>=2.2.3.0
  base: '>=4.19 && <5'
  bytestring: ^>=0.12.1.0
  commonmark: ^>=0.2.6.1
  containers: ^>=0.7
  directory: ^>=1.3.8.5
  filepath: ^>=1.4.301.0
  hedgehog: ^>=1.5
  hspec: ^>=2.11.12
  hspec-hedgehog: ^>=0.3.0.0
  ipynb: ^>=0.2
  mime-types: ^>=0.1.2.0
  mtl: ^>=2.3.1
  nbparts: '>=0'
  parsec: ^>=3.1.18.0
  req: ^>=3.13.4
  scientific: ^>=0.3.8.0
  temporary: ^>=1.3
  text: ^>=2.1.1
  vector: ^>=0.13.2.0
  yaml: ^>=0.11.11.2
