homepage: https://github.com/haskell-game/fungen
changelog-type: markdown
hash: bae05df97f826769eb2eb085a1ef498fbdeaea9da695ad1a84e9fcd13e624d73
test-bench-deps: {}
maintainer: Simon Michael <simon@joyful.com>
synopsis: A lightweight, cross-platform, OpenGL-based game engine.
changelog: |
  ## 1.2 2023-09-01

  * fix warnings
  * convert to unix line endings
  * test up to GHC 9.6
  * require GHC >= 8.10

  ## 1.1.1 2020-10-18

  * restore support for GHC 8.0 - 8.6, fix hackage haddock docs

  ## 1.1 2020-10-18

  * drop custom website, update readme
  * set up CI testing
  * update for GHC 8.8, 8.10

  ## 1.0.1 2016-08-18

  * add stack config for GHC 8
  * fix building with current stackage/OpenGL/GLUT
  * fix examples' wrong dependency

  ## 1.0 2015-09-21

  * support GHC 7.10
  * support stack
  * repo moved to haskell-game organisation

  ## 0.4.6.1 2014-10-09

  * update changelog

  ## 0.4.6 2014-10-09

  * move to github, enable issue tracker

  ## 0.4.5 2014-10-08

  * add executables to run examples (fungen-hello, fungen-pong, fungen-worms)

  ## 0.4.4 2014-10-07

  * add missing files to cabal file (Samuel GÃ©lineau)
  * support & require latest OpenGL 2.9
  * make IOGame also a Functor and Applicative, for ghc 7.10

  ## 0.4.3 2014-04-05

  * set upper bound on OpenGL to avoid build failure with OpenGL 2.9

  ## 0.4.2 2013-08-07

  * add q as quit key to examples
  * fix buggy input when holding down keys on windows

  ## 0.4.1 2013-08-06

  * reorganised and exposed more haddocks

  ## 0.4 2013-08-05

  * a new hakyll-based website, incorporating the old site
  * tested with GHC 7.6
  * input handlers now receive mouse position and modifier state
    (inspired by Pradeep Kumar).  See fungentest.hs for examples.
  * more haddocks

  ## 0.3 2011-02-13, Simon Michael

  * updated for GHC 6.12 & base 4
  * module names simplified
  * beginning of haddockification
  * docs moved into repo
  * published to darcsden, hackage, wiki, haskell-cafe, #haskell-game, reddit

  ## 0.1-hackage 2008-09-17, Miloslav Raus

  * first hackage release
  * updated for GHC 6.10
  * cabalised
  * Tested under Win32 & Linux/Intel. Known glitches: Flickering under linux
    (at least on my shitty laptop). Weird pong paddle behavior under Win32.

  ## 0.1-ghc6.8 2008-02-26, Simon Michael

  * updated for GHC 6.8
  * slight tweaks to examples
  * public darcs repo

  ## 0.1 2002, Andre Furtado

  * first public release
basic-deps:
  OpenGL: -any
  GLUT: -any
  base: '>=4.9 && <5'
  base-compat: -any
  random: -any
  FunGEn: ==1.2
all-versions:
- '0.1'
- '0.3'
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.6.1
- '1.0'
- 1.0.1
- '1.1'
- 1.1.1
- '1.2'
author: Andre Furtado <awbf@cin.ufpe.br>
latest: '1.2'
description-type: markdown
description: "# **FunGEn** (**Fun**ctional **G**ame **En**gine)\n\n<a href=\"https://github.com/haskell-game/fungen/blob/master/examples/hello.hs#L1\"\n
  \ ><img border=0 src=\"site/logo.gif\" title=\"Click to see the hello world example\"
  style=\"margin-top:2em;\"></a>\n\nFunGEn is a BSD-licensed, cross-platform, OpenGL-based
  game engine written in Haskell. \nCreated by Andre Furtado in 2002, it's the oldest
  Haskell game engine,\nand with very few dependencies and two example games,\nit's
  one of the easiest ways to get started with Haskell game development.\n\nFunGEn
  provides:\n\n* Initialization, updating, removing, rendering and grouping routines
  for game objects\n* Definition of a game background (or map), including texture-based
  maps and tile maps\n* Reading and intepretation of the player's keyboard and mouse
  input\n* Collision detection\n* Time-based functions and pre-defined game actions\n*
  Loading and displaying of 24-bit bitmap files\n* Some debugging and game performance
  evaluation facilities\n\nLimitations:\n\n* No sound support \n  (consider adding
  \n  [OpenAL](https://hackage.haskell.org/package/OpenAL), \n  [elerea](https://hackage.haskell.org/package/elerea),
  or \n  [sdl2-mixer](https://hackage.haskell.org/package/sdl2-mixer))\n\n[Simon Michael](https://joyful.com)
  provides infrequent maintenance for this package,\nand chat support in #haskell-game
  on Matrix or Libera IRC (nick: `sm`). \nThere is no issue tracker and no email support.\n\nI
  don't have time to do more with it, but this package is still useful\nand could
  attract users, given a little TLC and a slick home page.\nWould you like to take
  it over ? Maintainers or co-maintainers wanted!\n\n<a href=\"https://github.com/haskell-game/fungen/blob/master/examples/pong/pong.hs#L1\"\n
  \ ><img border=0 src=\"site/pong.png\" title=\"Click to see the pong example\" style=\"margin-top:2em;\"></a>\n<a
  href=\"https://github.com/haskell-game/fungen/blob/master/examples/worms/worms.hs#L1\"\n
  \ ><img border=0 src=\"site/worms.png\" title=\"Click to see the worms (snake) example\"
  style=\"margin-top:1em;\"></a>\n\n## Install\n\nInstall the OpenGL C libraries,
  if not already installed on your system.\nEg on Ubuntu/Debian:\n```\n$ sudo apt
  install freeglut3-dev\n```\n If you don't know whether they are already installed,
  try the next step and watch for \"missing C library\" errors.\n\n### Latest released:\n\n([changes](https://hackage.haskell.org/package/FunGEn/changelog))\n```\n$
  stack install FunGEn    # or cabal install\n```\nMake sure `~/.local/bin` (stack)
  or `~/.cabal/bin` (cabal) or the windows equivalent are in your shell PATH, then
  run the example games:\n\n```\n$ fungen-hello\n$ fungen-pong\n$ fungen-worms\n```\n\n###
  Latest unreleased:\n\n([changes](https://github.com/haskell-game/fungen/blob/master/CHANGES.md#L1))\n\n```\n$
  git clone https://github.com/haskell-game/fungen\n$ cd fungen\n$ stack build    #
  or cabal build\n$ stack exec fungen-hello\n$ stack exec fungen-pong\n$ stack exec
  fungen-worms\n``````\n\n\n## Docs\n\n- https://github.com/haskell-game/fungen#readme\n-
  [Changelog](CHANGES.md)\n- Andre's tutorial, [original](https://htmlpreview.github.io/?https://github.com/haskell-game/fungen/blob/master/site/example.html)
  or [reformatted](TUTORIAL.md#fungen-pong-tutorial) version\n- [Haddock API docs](https://hackage.haskell.org/package/FunGEn/docs/Graphics-UI-Fungen.html)\n-
  [FunGEn package](https://hackage.haskell.org/package/FunGEn) on Hackage\n- [FunGEn
  questions](https://stackoverflow.com/search?tab=newest&q=fungen) on Stack Overflow\n-
  [Andre's old site](https://www.cin.ufpe.br/~haskell/fungen)\n- #haskell-game chat
  on Matrix or on Libera IRC (currently separate, not bridged)\n- [/r/haskellgamedev](https://www.reddit.com/r/haskellgamedev)
  reddit\n- [haskell-cafe](https://www.haskell.org/haskellwiki/Mailing_lists) mail
  list\n- Haskell wiki: [Game_Development](https://www.haskell.org/haskellwiki/Game_Development)\n-
  Haskell wiki: [OpenGL tutorial](https://www.haskell.org/haskellwiki/OpenGLTutorial1)\n\n\n##
  History\n\nExcerpts from Andre's website in 2002:\n\n**What is a game engine?**\n\nA
  game engine can be considered as a library that provides game facilities\nto a game
  programmer. When using a game engine, the programmer must\nspecify when the game
  events happen, rather than how they are\nimplemented. A same functionality may have
  its implementation varying from\nplatform to platform, in the case the engine is
  platform-independent. The\nmain advantage of a game engine is that it can be reused
  to the\ndevelopment of many different kind of games, in an automated way, saving
  a\nlot of programming time.\n\n**Why Haskell?**\n\nWe believe that Haskell is a
  great language to develop games, because of\nits high level of abstraction and the
  generation of a more concise,\nelegant and shorter code. This is great for code
  maintenance and\nunderstanding. Combining the power of Haskell with the facilities
  provided\nby game engines seems a promising project. You can find more info on\nHaskell
  in its official site.\n\n**What is HOpenGL?**\n\nHOpenGL stands for Haskell Open
  Graphics Library. Actually, it is a\nbinding to one of the most famous graphics
  libraries around the world\n(OpenGL) and its auxiliary toolkit (GLUT). In other
  words, it makes\npossible to call OpenGL/GLUT routines (which were written in the
  C\nlanguage) when programming in Haskell. You can find more info on HOpenGL\nin
  my HOpenGL Tutorial site, or in its official site.\n\n**<s>Current</s> 2002 Status**\n\nSome
  feedback indicated that the first version of FunGEn was not as \"functional\" as
  it was desired: some game issues were still being dealt through an imperative fashion.
  This way, the authors of this project decided to change the game engine philosophy:
  programmers should describe a game as a set of \"specifications\" rather than defining
  its behavior imperatively. One plausible alternative for accomplishing this task
  is porting the Clean Game Library (CGL) to Haskell, adding some FunGEn specific
  features. Hence, this is the actual status of the FunGEn project: it is being rebuilt
  in order to provide game programming mechanisms following the CGL concepts. This
  really demands some time, but the authors expect a new version to be released soon.\n\n...
  PLEASE NOTE: this is the very first version of FunGEn, and it was released just
  to get some feedback from game programmers. You are strongly invited to <A HREF=\"mailto:awbf@cin.ufpe.br\">tell</A>
  your game programming experiences with FunGEn, helping us to release a definitive,
  stable version). Ok, after this disclaimer, please fell yourself free to take a
  quick tour in the site; it contains a lot of useful information for those who are
  really interested in trying a new game programming experience. Nice coding...\n\n**Todo**\n\nHere
  you have a list of some upcoming FunGEn features, and some other\ndesired features
  (but with no implementation prevision yet).\n\n- Support map scrolling (coming soon);\n-
  Support mouse input management (coming soon);\n- Make a polygon map definition avaiable
  (coming soon);\n- Make sound avaible to non-Win32 platforms;\n- Create, if possible,
  some operators to avoid the excessive (x <- ...) syntax;\n- Support auto-animated
  objects;\n- Create a GLUT independent font support (or perhaps extend it);\n- Improve
  the installation process;\n- Upgrade FunGEn to be both a 2D (bidimensional) and
  2D 1/2 (bi and a half dimensional) engine;\n- Create a map editor/generator (possibly
  in other language, or using the brand new Haskell GUI...);\n- Take courage to start
  thinking about the 3D world...\n\nWould you like to suggest a feature? Feel free
  to do it. Would you like to\nimplement a feature? Please do it! Keep in touch.\n\n**Credits**\n\nFunGEn
  was created by Andre Furtado, Computation Science graduation\nstudent at the Informatics
  Center (CIn) of the Federal University of\nPernambuco (UFPE), as part of a Scientific
  Iniciation (PIBIC/CNPq)\nresearch project (Creating a Game Platform Using Haskell),
  oriented by\nlecturer Andre Santos (PhD, 1995, University of Glasgow), who was\nresponsible
  for figuring out a lot of FunGEn implementation details.\n\nI would like to thank
  also the following people who contributed for the development of FunGEn:\n\n- Sven
  Panne\n- Jay Cox\n- Geber Ramalho\n- Carlos Andre Pessoa\n- Charles Madeira\n- Monique
  Monteiro\n- The people at the Haskell mailing lists\n\nFunGEn can be distributed
  freely, in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY\nor FITNESS FOR A PARTICULAR PURPOSE. I
  would thank you if you cite my name\nand this site if you are going to use FunGEn
  for other things besides home\nprogramming.\n"
license-name: BSD-3-Clause
