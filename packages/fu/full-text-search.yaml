all-versions:
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.3
- 0.2.1.4
- 0.2.2.0
- 0.2.2.2
- 0.2.2.3
author: Duncan Coutts
basic-deps:
  array: '>=0.4 && <0.6'
  base: '>=4.16 && <4.22'
  containers: '>=0.4 && <0.8'
  text: '>=0.11 && <2.2'
  vector: '>=0.11 && <0.14'
changelog: "0.2.2.3 Ben Gamari <ben@well-typed.com> January 2025\n\t* Introduce compatibility
  with GHCs up to 9.12\n\t* Drop compatibility with GHC versions pre-9.2\n\n0.2.2.2
  Adam Gundry <adam@well-typed.com> March 2023\n\t* Fix bug in 0.2.2.1 autosuggest
  patch\n\n0.2.2.1 Adam Gundry <adam@well-typed.com> March 2023\n\t* Fix autosuggest
  query performance bug on large datasets\n\n0.2.2.0 Adam Gundry <adam@well-typed.com>
  November 2022\n\t* Add queryAutosuggestPredicate and queryAutosuggestMatchingDocuments\n
  \       * Compatibility with GHC 8.10 to 9.4 and new package versions\n\n0.2.1.4
  Mikolaj Konarski <mikolaj@well-typed.com> August 2017\n        * Compatibility with
  GHC 8.0.2 and new package versions (no API changes)\n\n0.2.1.3 Duncan Coutts <duncan@well-typed.com>
  May 2015\n        * Compatibility with GHC 7.10 (no API changes)\n\n0.2.1.2 Adam
  Gundry <adam@well-typed.com> July 2014\n        * Compatibility with GHC 7.8 (no
  API changes)\n\n0.2.1.1 Duncan Coutts <duncan@well-typed.com> May 2014\n        *
  Fix for NaN scores with a doc field that is empty for all docs\n        * Add instance
  Show NoFeatures\n\n0.2.1.0 Duncan Coutts <duncan@well-typed.com> March 2014\n        *
  Add auto-complete / auto-suggest feature\n        * Add demo program\n        *
  Moved QC props into a separate test suite\n        * Work sponsored by IRIS Connect
  Ltd.\n\n0.2.0.0 Duncan Coutts <duncan@well-typed.com> Feb 2014\n        * Initial
  version as a separate library\n\n0.1.1.0 Duncan Coutts <duncan@community.haskell.org>
  Nov 2013\n        * Add \"explain\" mode for query\n        * Add non-term feature
  scores\n\n0.1.0.1 Duncan Coutts <duncan@community.haskell.org> Sept 2013\n        *
  Fix bug in index update (thanks to Matthew Gruen)\n\n0.1.0.0 Duncan Coutts <duncan@community.haskell.org>
  July 2013\n        * Initial version (included in hackage-server)\n\n"
changelog-type: text
description: |-
  An in-memory full text search engine library. It lets you
  run full-text queries on a collection of your documents.

  Features:

  * Keyword queries and auto-complete\/auto-suggest queries.

  * Can search over any type of \"document\".
    (You explain how to extract search terms from them.)

  * Supports documents with multiple fields
    (e.g. title, body)

  * Supports documents with non-term features
    (e.g. quality score, page rank)

  * Uses the state of the art BM25F ranking function

  * Adjustable ranking parameters (including field weights
    and non-term feature scores)

  * In-memory but quite compact. It does not keep a copy of
    your original documents.

  * Quick incremental index updates, making it possible to
    keep your text search in-sync with your data.

  It is independent of the document type, so you have to
  write the document-specific parts: extracting search terms
  and any stop words, case-normalisation or stemming. This
  is quite easy using libraries such as
  <https://hackage.haskell.org/package/tokenize tokenize> and
  <https://hackage.haskell.org/package/snowball snowball>.

  The source package includes a demo to illustrate how to
  use the library. The demo is a simplified version of how
  the library is used in the
  <https://hackage.haskell.org/package/hackage-server hackage-server>
  where it provides the backend for the package search feature.
description-type: haddock
hash: b15911698b71869cd70dd2e98987b9620f49ad0f1a32174131c2d7d18cf07434
homepage: ''
latest: 0.2.2.3
license-name: BSD-3-Clause
maintainer: |-
  Duncan Coutts <duncan@well-typed.com>,
  Adam Gundry <adam@well-typed.com>
synopsis: In-memory full text search engine
test-bench-deps:
  QuickCheck: '>=2 && <3'
  array: '>=0.4 && <0.6'
  base: '>=4.16 && <4.22'
  containers: '>=0.4 && <0.8'
  tasty: '>=0.8'
  tasty-quickcheck: '>=0.8'
  text: '>=0.11 && <2.2'
  vector: '>=0.11 && <0.14'
