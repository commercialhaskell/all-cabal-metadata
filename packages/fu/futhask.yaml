all-versions:
- 0.1.0
- 0.2.0
author: Gusten Isfeldt
basic-deps:
  base: '>=4.7 && <4.15'
  directory: '>=1.3.3 && <1.4'
  futhask: '>=0'
  raw-strings-qq: '>=1.1 && <1.2'
  split: '>=0.2.3 && <0.3'
changelog: |-
  # Changelog for futhask

  ## Unreleased changes
  Change in the name of the Monad from `FT` to `Fut`. This is a breaking change, but in principle a simple search and replace should fix it. The motivation for the change is both that it is more descriptive, and the introduction of the transformer. `FutT` simply looks better then `FTT`, especially in names using CamelCase. The original name `FT` was inspired by `ST`, since they both use rigid type variables for similar purposes.
changelog-type: markdown
description: "# Futhask\nFuthask is a code generator that aims to create safe, Haskell
  friendly wrappers for Futhark libraries.\n\n## Installation\n    stack install\n\n##
  Use\n### Generate Code\n    futhask [Backend] [Futhark.h] [HaskellSourceDir] [ModuleName]\n\n####
  Example\n    futhark opencl --library myprogram.fut\n    futhask opencl myprogram.h
  src MyLibrary\n\nFor a simple example of how generated haskell code can be used,
  see [FuthaskExample](https://gitlab.com/Gusten_Isfeldt/futhaskexample)\n\n### Import
  Code\n    import [ModuleName]\n    import [ModuleName].Entries\n    \nIf using `stack`
  add `c-sources: [Futhark.c]` to the `library` section of `package.yaml`\n\n####
  OpenCL\n    extra-libraries: OpenCL \n\n#### CUDA\n    include-dirs: /opt/cuda/include\n
  \   extra-lib-dirs: /opt/cuda/lib\n    extra-libraries: cuda cudart nvrtc\n\n###
  Dependencies\n`transformers` and `massiv` are required for all backends.\nThe codes
  generated for OpenCL and CUDA, both refer to types from the `OpenCL` and `cuda`
  packages respectively. This is only relevant if one wants to use certain functions
  in the raw interface, but, without modification, the generated code will not compile
  without these dependencies.\n\n## Generated Code\nThe generated code can be split
  in two main parts, raw and wrapped. The raw interface is simply the C-functions
  wrapped in the `IO`-monad, providing no added safety and requiring manual memory
  management. The wrapped interface uses `newForeignPtr` to introduce all Futhark
  pointers to the GC, and provides function types closer to those used within Futhark,
  returning tuples instead of writing to pointers.\n\n### Context Generation\n    getContext
  :: [ContextOption] -> IO Context\n\nAvailable context options will depend on backend
  used.\n\n### The Fut monad\nTo make the wrappers safe, and reduce clutter from explicitly
  passing around the context, the `Fut` monad is introduced. The `Fut` monad is an
  environment monad that implicitly passes the context around as necessary. Like the
  `ST` monad, the `Fut` monad is parameterised by a rigid type variable to prevent
  references to the context from escaping the monad.\n\nTo run computations, the function\n\n
  \   runFutIn :: Context -> (forall c. Fut c a) -> a\n\nis used. Additionally\n\n
  \   runFutWith :: [ContextOption] -> (forall c. Fut c a) -> a\n    runFut :: (forall
  c. Fut c a) -> a\n\nare defined for convienience for cases where the context doesn't
  need to be reused.\n\n### The FutT transformer\nFor more flexibility, the FutT monad
  transformer can be used. For convenience the type synonyms\n\n    type Fut c = FutT
  c Identity\n    type FutIO c = FutT c IO\n\nare defined, but entry-points are in
  the general `Monad m => FutT c m`.\n\nTo run the transformer \n    \n    runFutTIn
  :: Context -> (forall c. FutT c m a) -> m a\n    runFutTWith :: [ContextOption]
  -> (forall c. FutT c m a) -> m a\n    runFutT :: (forall c. FutT c m a) -> m a\n\nFor
  lifting\n\n    mapFutT :: (m a -> n b) -> FutT c m a -> FutT c n b\n    map2FutT
  :: (m a -> n b -> k c) -> FutT c' m a -> FutT c' n b -> FutT c' k c\n    pureFut
  :: Monad m => Fut c a -> FutT c m a\n    unsafeFromFutIO :: FutIO c a -> Fut c a\n\n####
  Running transformer stacks\nWhen using `FutT c` with other transformers in a stack
  the type of the function running the monad may need to be defined explicitly. \nIn
  the same way as `runFutT`, these signatures require an explicit `forall` to force
  `c` to be fully polymorphic.\n\n    runMyMonad :: (forall c. MyMonad c a) -> a \n\nThis
  requires the `RankNTypes` extension.\n\n### Input and Output\nFor conversion between
  Futhark values and Haskell values, two classes are defined.\n\n    class Input fo
  ho where\n        toFuthark :: Monad m => ho -> FutT c m (fo c) \n\n    class Output
  fo ho where\n        fromFuthark :: Monad m => fo c -> FutT c m ho\n\nInstances
  of Input and Output are generated for all transparent Futhark-arrays. The Haskell
  representation is `Array S` from `Data.Massiv.Array`. The absence of functional
  dependencies in the definitions might require more explicit type signatures, but
  gives more flexibility to define new instances. For tuples of instances, functions
  on the form `fromFutharkTN`, where `N` is the tuple size, are defined.\n\n### Memory
  management\nAll of the wrapped values have finalizers, and should *eventually* be
  garbage collected. However, GHCs GC does not know how much memory the context is
  using, and so collection will not always be triggered frequently enough. This is
  primarily an issue when the program iterates on Futhark values, without any Haskell-side
  allocations.\n\nOne way to deal with this is to manually manage the memory using\n\n
  \   finalizeFO :: (MonadIO m, FutharkObject wrapped raw) => wrapped c -> FutT c
  m ()\n\nAs with any manual memory management, the programmer is responsible for
  ensuring that the finalized value will not be used afterwards. For cases where the
  object is used in more than one thread without synchronisation,\n\n    addReferenceFO
  :: (MonadIO m, FutharkObject wrapped raw) => wrapped c -> FutT c m ()\n\ncan be
  used. `addReferenceFO` increments the reference counter of the object and `finalizeFO`
  will just decrement this counter until it's `0`.\n\n\n"
description-type: markdown
hash: 6de73ffd251cc00df6e6b64f7321c430f5bd8e57602f35b27d626395e8d187f9
homepage: ''
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: isfeldt@kth.se
synopsis: Generate Haskell wrappers for Futhark libraries
test-bench-deps: {}
