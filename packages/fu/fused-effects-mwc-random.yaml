all-versions:
- 0.1.0.0
author: Patrick Thomson
basic-deps:
  base: '>=4.10 && <4.16'
  fused-effects: ^>=1.1
  mwc-random: '>=0.13.6 && <0.15'
  primitive: '>=0.6.4 && <0.8'
  template-haskell: '>=2.12'
  transformers: '>=0.5.2 && <0.6'
  vector: ^>=0.12
changelog: |
  # Changelog

  `fused-effects-mwc-random` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/patrickt/fused-effects-mwc-random/releases
changelog-type: markdown
description: |
  # fused-effects-mwc-random

  [![Hackage](https://img.shields.io/hackage/v/fused-effects-mwc-random.svg?logo=haskell)](https://hackage.haskell.org/package/fused-effects-mwc-random)
  [![BSD3 license](https://img.shields.io/badge/license-BSD3-blue.svg)](LICENSE)

  High-quality uniformly-distributed pseudorandom number generation as an effect.

  This library provides a `Random` effect that piggybacks atop the `mwc-random` package, which produces high-quality random numbers in efficient time. A carrier type (`Control.Carrier.Random.Lifted`) encapsulates generator state and provides a convenient API to invoke system random number generation or pass a predefined seed. The `mwc-random` package is finely tuned; as such, this package should be an industrial-strength source of random numbers, suitable for tight loops.

  Please note that the [MWC-256](https://en.wikipedia.org/wiki/Multiply-with-carry_pseudorandom_number_generator) algorithm that underlies `mwc-random` is *not* cryptographically secure and should not be used for such purposes. Crypto code should use [`cryptonite`](https://hackage.haskell.org/package/cryptonite), as I'm sure you already know.

  For more advanced users, there exists also a module (`Control.Carrier.Random.Instances`) that provides the orphan instances required to use most `fused-effect` stacks with the `PrimMonad` machinery that powers `mwc-random`. This module is most useful when porting monad transformer stacks that already use the `mwc-random` API, or if you need to drop into the native `mwc-random` API.
description-type: markdown
hash: 330a38137dbc4d43bed72c8771128916ef0238b5f54b57f2b46239170c0ab8ac
homepage: https://github.com/fused-effects/fused-effects-mwc-random
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: patrickt@github.com
synopsis: High-quality random number generation as an effect.
test-bench-deps:
  base: '>=0'
  fused-effects: '>=0'
  fused-effects-mwc-random: '>=0'
  fused-effects-random: '>=0'
  gauge: ^>=0.2.5
  mwc-random: '>=0'
  vector: '>=0'
