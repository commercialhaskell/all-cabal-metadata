all-versions:
- 0.1.1.0
- 0.1.1.1
author: Koji Miyazato
basic-deps:
  adjunctions: '>=4.4.2 && <4.5'
  auto-lift-classes: '>=1.0.1 && <1.2'
  base: '>=4.16 && <5'
  bifunctors: '>=5.6.1 && <5.7'
  comonad: '>=5.0.8 && <5.1'
  day-comonoid: '>=0.1 && <0.2'
  free: '>=5.2 && <5.3'
  free-applicative-t: '>=0.1.0 && <0.2'
  kan-extensions: '>=5 && <5.3'
  transformers: '>=0.6.1 && <0.7'
changelog: |
  # Revision history for functor-monad

  ## 0.1.1.1 -- 2024-09-29

  * Add a module `TrailAsAdjunction` to the examples directory,
    just as an explanation of theoretical background.

  * Fix some documentation errors

  ## 0.1.1.0 -- 2024-02-07

  * The first published version

  ## 0.1.0.0 (review) -- 2023-12-23

  * First version
changelog-type: markdown
description: "# functor-monad: Monads on category of Functors\n\nThis package provides
  `FFunctor` and `FMonad`,\neach corresponds to `Functor` and `Monad` but higher-order.\n\n|
  \     | a Functor `f`   | a FFunctor `ff` |\n|----|----|----|\n| Takes | `a :: Type`
  | `g :: Type -> Type`, `Functor g` |\n| Makes | `f a :: Type` | `ff g :: Type ->
  Type`, `Functor (ff g)` |\n| Methods | `fmap :: (a -> b) -> f a -> f b` | `ffmap
  :: (Functor g, Functor h) => (g ~> h) -> (ff g ~> ff h)` |\n\n|      | a Monad `m`
  \  | a FMonad `mm` |\n|----|----|----|\n| Superclass | Functor | FFunctor |\n| Methods
  | `return = pure :: a -> m a` | `fpure :: (Functor g) => g ~> mm g` |\n|        |
  `(=<<) :: (a -> m b) -> m a -> m b` | `fbind :: (Functor g, Functor h) => (g ~>
  mm h) -> (mm g ~> mm h)` |\n|        | `join :: m (m a) -> m a` | `fjoin :: (Functor
  g) => mm (mm g) ~> mm g` |\n\nSee also: https://viercc.github.io/blog/posts/2020-08-23-fmonad.html
  (Japanese article)\n\n## Motivational examples\n\nMany types defined in [base](https://hackage.haskell.org/package/base-4.18.1.0)
  and popolar libraries like\n[transformers](https://hackage.haskell.org/package/transformers-0.6.1.1)
  take a parameter expecting a `Functor`.\nHere are two, simple examples.\n\n```haskell\n--
  From \"base\", Data.Functor.Sum\ndata Sum f g x = InL (f x) | InR (g x)\ninstance
  (Functor f, Functor g) => Functor (Sum f g)\n\n-- From \"transformers\", Control.Monad.Trans.Reader\nnewtype
  ReaderT r m x = ReaderT { runReaderT :: r -> m x }\ninstance (Functor m) => Functor
  (ReaderT r m)\n```\n\nThese types often have a way to map a natural transformation,
  an arrow between two `Functor`s,\nover that parameter.\n\n```haskell\n-- The type
  of natural transformations\ntype (~>) f g = forall x. f x -> g x\n\nmapRight ::
  (g ~> g') -> Sum f g ~> Sum f g'\nmapRight _  (InL fx) = InL fx\nmapRight nt (InR
  gx) = InR (nt gx)\n\nmapReaderT :: (m a -> n b) -> ReaderT r m a -> ReaderT r n
  b\n\n-- mapReaderT can be used to map natural transformation\nmapReaderT' :: (m
  ~> n) -> (ReaderT r m ~> ReaderT r n)\nmapReaderT' naturalTrans = mapReaderT naturalTrans\n```\n\nThe
  type class `FFunctor` abstracts type constructors equipped with such a function.\n\n```haskell\nclass
  (forall g. Functor g => Functor (ff g)) => FFunctor ff where\n    ffmap :: (Functor
  g, Functor h) => (g ~> h) -> ff g x -> ff h x\n\nffmap :: (Functor g, Functor g')
  => (g ~> g') -> Sum f g x -> Sum f g' x\nffmap :: (Functor m, Functor n)  => (m
  ~> n) -> ReaderT r m x -> ReaderT r n x\n```\n\nNot all but many `FFunctor` instances
  can, in addition to `ffmap`, support `Monad`-like operations.\nThis package provide
  another type class `FMonad` to represent such operations.\n\n```haskell\nclass (FFunctor
  mm) => FMonad mm where\n    fpure :: (Functor g) => g ~> mm g\n    fbind :: (Functor
  g, Functor h) => (g ~> ff h) -> ff g a -> ff h a\n```\n\nBoth of the above examples,
  `Sum` and `ReaderT r`, have `FMonad` instances.\n\n```haskell\ninstance Functor
  f => FMonad (Sum f) where\n    fpure :: (Functor g) => g ~> Sum f g\n    fpure =
  InR\n\n    fbind :: (Functor g, Functor h) => (g ~> Sum f h) -> Sum f g a -> Sum
  f h a\n    fbind _ (InL fa) = InL fa\n    fbind k (InR ga) = k ga\n\ninstance FMonad
  (ReaderT r) where\n    fpure :: (Functor m) => m ~> ReaderT r m\n    -- return ::
  x -> (e -> x)\n    fpure = ReaderT . return\n\n    fbind :: (Functor m, Functor
  n) => (m ~> ReaderT r n) -> ReaderT r m a -> ReaderT r n a\n    -- join :: (e ->
  e -> x) -> (e -> x)\n    fbind k = ReaderT . (>>= runReaderT . k) . runReaderT \n```\n\n##
  Comparison against similar type classes\n\nThere are packages with very similar
  type classes, but they are more or less different to this package.\n\n* From [hkd](https://hackage.haskell.org/package/hkd):
  `FFunctor`\n  \n  There is a class named `FFunctor` in `hkd` package too. It represents
  a functor from /category of type constructors/ `k -> Type` to\n  the category of
  usual types and functions.\n\n  Since it is not an endofunctor, there can be no
  `Monad`-like classes on them.\n\n  Another package [rank2classes](https://hackage.haskell.org/package/rank2classes)
  also provides the same class `Rank2.Functor`.\n  \n* From [mmorph](https://hackage.haskell.org/package/mmorph-1.2.0):
  `MFunctor`, `MMonad`\n\n  `MFunctor` is a class for endofunctors on the category
  of `Monad`s and monad homomorphisms.\n  If `T` is a `MFunctor`, it takes a `Monad
  m` and constructs `Monad (T m)`,\n  and its `hoist` method takes a *Monad morphism*
  `m ~> n` and returns a new *Monad morphism* `T m ~> T n`.\n\n  On the other hand,
  this library is about endofunctors on the category of `Functor`s and natural transformations,\n
  \ which are similar but definitely distinct concept.\n\n  For example, `Sum f` in
  the example above is not an instance of `MFunctor`, since there are no general way
  to make `Sum f m` a `Monad`\n  for arbitrary `Monad m`.\n\n  ```\n  instance Functor
  f => FFunctor (Sum f)\n  instance Functor f => MFunctor (Sum f) -- Can be written,
  but it will violate the requirement to be MFunctor\n  ```\n\n* From [index-core](https://hackage.haskell.org/package/index-core):
  `IFunctor`, `IMonad`\n\n  They are endofunctors on the category of type constructors
  of kind `k -> Type` and polymorphic functions `t :: forall (x :: k). f x -> g x`.\n
  \ \n  While any instance of `FFunctor` from this package can be faithfully represented
  as a `IFunctor`, some instances can't be an instance of `IFunctor` _as is_.\n  Most
  notably, [Free](https://hackage.haskell.org/package/free-5.1.8/docs/Control-Monad-Free.html#t:Free)
  can't be an instance of `IFunctor` directly,\n  because `Free` needs `Functor h`
  to be able to implement `fmapI`, the method of `IFunctor`.\n\n  ```haskell\n  class
  IFunctor ff where\n    fmapI :: (g ~> h) -> (ff g ~> ff h)\n  ```\n\n  There exists
  a workaround: you can use another representation of `Free f` which doesn't require
  `Functor f` to be a `Functor` itself,\n  for example `Program` from [operational](https://hackage.haskell.org/package/operational)
  package.\n\n  This package avoids the neccesity of the workaround by admitting the
  restriction that the parameter of `FFunctor` must always be a `Functor`.\n  Therefore,
  `FFunctor` gives up instances which don't take `Functor` parameter, for example,
  a type constructor `F` with kind `F :: (Nat -> Type) -> Nat -> Type`.\n\n* From
  [functor-combinators](https://hackage.haskell.org/package/functor-combinators-0.4.1.2):
  `HFunctor`, `Inject`, `HBind`\n\n  This package can be thought of as a more developed
  version of `index-core`, since they share the base assumption.\n  The tradeoff between
  this package is the same: some `FFunctor` instances can only be `HFunctor` via alternative
  representations.\n  Same applies for `FMonad` versus `Inject + HBind`.\n"
description-type: markdown
hash: a6ab388ba40fea2dd591cd30f202c77146d1113b9053178f9c05131cd4f8823c
homepage: https://github.com/viercc/functor-monad/tree/main/functor-monad
latest: 0.1.1.1
license-name: BSD-3-Clause
maintainer: Koji Miyazato <viercc@gmail.com>
synopsis: 'FFunctor: functors on (the usual) Functors'
test-bench-deps:
  base: '>=0'
  comonad: '>=0'
  free: '>=0'
  functor-monad: '>=0'
  kan-extensions: '>=0'
  transformers: '>=0'
