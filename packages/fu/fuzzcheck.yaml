all-versions:
- 0.1.1
author: John Wiegley
basic-deps:
  QuickCheck: '>=0'
  base: '>=4.3 && <5'
  lifted-base: '>=0'
  monad-control: '>=0'
  random: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "# FuzzCheck\n\nFuzzCheck is a library much like QuickCheck, except that
  instead of test the\nproperties of pure functions, it tests the behavior of applicative
  or monadic\ncode.\n\nFor example, with QuickCheck you would check a property of
  a function as\nfollows:\n\n    prop_reverse xs = xs == reverse (reverse xs)\n    \n
  \   >>> quickCheck prop_reverse\n\nThis would generate a list of random length and
  contents, and ensure that the\nstated property is maintained for each instance.\n\nFuzzCheck
  is for testing monadic (or applicative) code, which may only be\ntestable in the
  context of other operations.  For example, let's test some\nsimple FFI code:\n\n
  \   prop_bs_ffi = do\n        mem <- \"allocate buffer\" ?> pure malloc\n        n
  <- \"pick a number\"     ?> return <$> gen (choose (40::Int,100))\n        \"poke\"
  \                  ?> poke <$> arg mem <*> arg n\n        x <- \"peek at memory\"
  \   ?> peek <$> arg mem\n        \"make sure it matches\"   ?> (@?=) <$> arg x <*>
  arg n\n        \"free the buffer\"        ?> free <$> arg mem\n\n## FuzzCheck interface\n\nThere
  are just three special details introduced by FuzzCheck, the `?>`\noperator, and
  the `arg`, `rand` and `gen` combinators.\n\n    \"label\" ?> action\n    \nThis
  runs a `Fuzz` action.  If an exception occurs, the label is printed\nalong with
  the exception.\n\n    let x = \"Hello\"\n    \"label\" ?> f <$> arg x\n    \nThis
  executes a *monadic* function `f`, passing it the argument `x`.  This is\nequivalent
  to using `f x` in the surrounding monad, except that if an\nexception is generated,
  the error report looks like this:\n\n    f \"Hello\": <text of actual exception
  here>\n\nYou may also use `rand`, which is just a shorter synonym for QuickCheck's\n`arbitrary`,
  for generating a type-appropriate random value automatically:\n\n    \"label\" ?>
  f <$> rand\n\nAnother option is to use `gen`, which takes for its argument any combinator\nfrom
  QuickCheck that generates an appropriately typed `Gen` value.  For\nexample:\n\n
  \   \"label\" ?> f <$> gen (choose (1,10))\n    \nThis tests `f` by passing it a
  randomly chosen integer from the given range.\nIf an exception occurs, the actual
  integer that caused the problem is shown:\n\n    f 9: <text of actual exception
  here>\n    \nThat's it.  To run the test, call `fuzzCheck` on the property:\n\n
  \   >>> fuzzCheck prop_bs_ffi2\n    +++ OK, passed 100 tests.\n    \nYou can use
  `fuzzCheck'` if you want to change the number of tests executed,\nor if you want
  to associate cleanup code with the test after it runs, whether\nor not it succeeds.\n\n##
  Simplifying tests\n\nThe role of `?>` is to assign a label to each operation (to
  assist with error\nreporting in case of failure), and to execute the `Fuzz` action
  in its\nenclosing Monad.  A fuzz test may occur within any monad supporting `MonadIO`\nand
  `MonadBaseControl IO` (for the purpose of catching exceptions), which\nmeans that
  if we're testing code in IO, we can limit the use of `?>` to only\nthose cases we
  expect might fail:\n\n    prop_bs_ffi2 = do\n        mem <- malloc\n        n <-
  \"pick a number\"  ?> return <$> gen (choose (40::Int,100))\n        \"poke\"                ?>
  poke <$> arg mem <*> arg n\n        x <- \"peek at memory\" ?> peek <$> arg mem\n
  \       x @?= n\n        free mem\n\n**NOTE**: Using `gen` does not mean that that
  specific function is invoked 100\ntimes at that point in the monadic block.  Instead,
  the entire block passed to\n`fuzzCheck` is executed 100 times, with each occurence
  of `gen` producing a\nnew value at each run.\n\n## Integration with Hspec and HUnit\n\nThis
  all integrates quite nicely with Hspec and Hunit.  For example, this is\nfrom the
  smoke tests for this library:\n\n    hspec $ it \"works with an FFI example\" $
  fuzzCheck $ do\n        mem <- malloc\n        n <- \"pick a number\"  ?> return
  <$> gen (choose (40::Int,100))\n        \"poke\"                ?> poke <$> arg
  mem <*> arg n\n        x <- \"peek at memory\" ?> peek <$> arg mem\n        x @?=
  n\n        free mem\n\n## See also\n\nAlthough this library was written before I
  had found\n[this paper](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.118.9528)\nand
  `Test.QuickCheck.Monadic`, the results are somewhat similar (the paper\nuses `name`
  instead of `?>`, while `arg` is the same).\n\n    \n"
description-type: markdown
hash: f00d2c2eafe4d60e877a1d3d91d6595147ef41682ace3ca8d0dc386f7d70bbe8
homepage: https://github.com/fpco/fuzzcheck
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: John Wiegley <johnw@fpcomplete.com>
synopsis: A simple checker for stress testing monadic code
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  fuzzcheck: '>=0'
  hspec: '>=0'
  hspec-expectations: '>=0'
