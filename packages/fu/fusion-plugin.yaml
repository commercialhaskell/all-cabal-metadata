homepage: https://github.com/composewell/fusion-plugin
changelog-type: markdown
hash: e4196836053741ddbbc4749cc1b6f5df8ea1821678c3d041e20eef93826e7399
test-bench-deps: {}
maintainer: streamly@composewell.com
synopsis: GHC plugin to make stream fusion more predictable.
changelog: |
  ## 0.2.5

  * Support ghc-9.4.2

  ## 0.2.4

  * Suport ghc-9.2.2
  * `dump-core` CLI flag support for ghc-9.2.x

  ## 0.2.3

  * Enhancement: Support ghc-9.0.1
  * Note: `dump-core` command line flag does not work for ghc-9.0.1

  ## 0.2.2

  ### Enhancements

  - Plugin now forces inline on binders that return a type annotated with Fuse.
  - `Fusion.Plugin` now accepts new command line arguments to control the
    verbosity of the plugin's reporting phase. Refer to `README.md` for usage.

  ## 0.2.1

  ### Enhancements

  - `Fusion.Plugin` now accepts a command line argument `dump-core` to
    dump the core from each core-to-core pass in a separate file.

  ## 0.2.0

  ### Breaking Change
  - Fusion.Plugin.Types is no longer exported from this package. If you
    want to annotate the types in your library, use the package
    fusion-plugin-types.

  ## 0.1.1

  ### Bug Fixes

  - Now compiles successfully on old GHC versions till 7.10.3.

  ## 0.1.0

  * Initial release
basic-deps:
  ghc: '>=7.10.3 && <9.5'
  base: '>=4.0 && <5.0'
  time: '>=1.5 && <1.14'
  syb: '>=0.7 && <0.8'
  filepath: '>=1.4 && <1.5'
  containers: '>=0.5.6.2 && <0.7'
  fusion-plugin-types: '>=0.1 && <0.2'
  transformers: '>=0.4 && <0.7'
  directory: '>=1.2.2.0 && <1.4'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
author: Pranay Sashank
latest: 0.2.5
description-type: markdown
description: |
  # fusion-plugin

  [![Hackage](https://img.shields.io/hackage/v/fusion-plugin.svg?style=flat)](https://hackage.haskell.org/package/fusion-plugin)
  ![](https://github.com/composewell/fusion-plugin/workflows/Haskell%20CI/badge.svg)


  ## Motivation

  The goal of stream fusion is to eliminate constructors of
  internal state used in a stream. For example, in case of
  [streamly](https://github.com/composewell/streamly) streams, the
  constructors of `Step` type, `Yield`, `Skip` and `Stop` would get
  eliminated by fusion.  Similarly, constructors of any other intermediate
  state types get eliminated when stream fusion works correctly. See the papers
  in the reference section for more details on stream fusion.

  Stream fusion depends on the GHC case-of-case transformations
  eliminating intermediate constructors.  Case-of-case transformation in
  turn depends on inlining. During core-to-core transformations GHC may
  create several internal bindings (e.g. join points) which may not get
  inlined because their size is too big. Even though we know that after
  fusion the resulting code would be smaller and more efficient. The
  programmer cannot force inlining of these bindings as there is no way
  for the programmer to address these bindings at the source level because
  they are internal, generated during core-to-core transformations. As a result
  stream fusion fails unpredictably depending on whether GHC was able to inline
  the internal bindings or not.

  [See GHC ticket #17075](https://gitlab.haskell.org/ghc/ghc/issues/17075) for
  more details.

  ## Solution

  This plugin provides the programmer with a way to annotate certain
  types using a `Fuse` pragma from the
  [fusion-plugin-types](https://hackage.haskell.org/package/fusion-plugin-types)
  package. The programmer would annotate the types that are to be
  eliminated by fusion. During the simplifier phase the plugin goes
  through the relevant bindings and if one of these types are found
  inside a binding then that binding is marked to be inlined
  irrespective of the size.

  ## Using the plugin

  This plugin was primarily motivated by
  [streamly](https://github.com/composewell/streamly) but it can be used in
  general.

  To use this plugin, add this package to your `build-depends`
  and pass the following to your ghc-options:
  `ghc-options: -O2 -fplugin=Fusion.Plugin`

  ### Plugin options

  Note: dump-core does not work for GHC-9.0.x.

  `-fplugin-opt=Fusion.Plugin:dump-core`: dump core after each
  core-to-core transformation. Output from each transformation is printed
  in a different file.

  `-fplugin-opt=Fusion.Plugin:verbose=1`: report unfused functions. Verbosity
  levels `2`, `3`, `4` can be used for more verbose output.

  ## See also

  If you are a library author looking to annotate the types, you need to
  use the
  [fusion-plugin-types](https://hackage.haskell.org/package/fusion-plugin-types)
  package.

  ## Contributing

  All contributions are welcome!  The code is available under Apache-2.0
  license [on github](https://github.com/composewell/fusion-plugin).  In
  case you have any questions or suggestions please contact [the
  maintainers](mailto:streamly@composewell.com).

  We would be happy to see this work getting integrated with GHC as a fix for
  [GHC ticket #17075](https://gitlab.haskell.org/ghc/ghc/issues/17075), any help
  with that would be appreciated.

  ## References

  * [Stream Fusion: Practical shortcut fusion for coinductive sequence types](https://ora.ox.ac.uk/objects/uuid:b4971f57-2b94-4fdf-a5c0-98d6935a44da)
  * [Stream Fusion From Lists to Streams to Nothing at All](https://www.researchgate.net/publication/221241130_Stream_Fusion_From_Lists_to_Streams_to_Nothing_at_All)
license-name: Apache-2.0
