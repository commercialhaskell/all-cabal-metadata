homepage: https://github.com/laserpants/fuzzyset-haskell#readme
changelog-type: ''
hash: 344e16deedb43da5cabae558450e5710843cff7ac2f3073be9db453c6f3a3fb7
test-bench-deps:
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.19.1 && <0.3.0.0'
  hspec: '>=2.10.10 && <2.12'
  text: '>=2.0.2 && <2.1.0'
  text-metrics: '>=0.3.2 && <0.4.0'
  ieee754: '>=0.8.0 && <0.9'
  mtl: '>=2.2.2 && <2.4.0'
  fuzzyset: -any
  transformers: '>=0.5.6.2 && <0.7.0.0'
  vector: '>=0.13.0.0 && <0.14.0.0'
maintainer: hildenjohannes@gmail.com
synopsis: Fuzzy set data structure for approximate string matching
changelog: ''
basic-deps:
  base: '>=4.7 && <5'
  unordered-containers: '>=0.2.19.1 && <0.3.0.0'
  text: '>=2.0.2 && <2.1.0'
  text-metrics: '>=0.3.2 && <0.4.0'
  mtl: '>=2.2.2 && <2.4.0'
  transformers: '>=0.5.6.2 && <0.7.0.0'
  vector: '>=0.13.0.0 && <0.14.0.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.3.0
- 0.3.1
author: Heikki Johannes HildÃ©n
latest: 0.3.1
description-type: markdown
description: |
  # fuzzyset-haskell

  [![Haskell CI](https://github.com/laserpants/fuzzyset-haskell/actions/workflows/haskell.yml/badge.svg)](https://github.com/laserpants/fuzzyset-haskell/actions/workflows/haskell.yml)
  [![License](https://img.shields.io/badge/license-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)
  [![Language](https://img.shields.io/badge/language-Haskell-yellow.svg)](https://www.haskell.org/)
  [![Hackage](https://img.shields.io/hackage/v/fuzzyset.svg)](http://hackage.haskell.org/package/fuzzyset)

  A fuzzy string set data structure for approximate string matching.

  In a nutshell:

  1. Add data to the set (see `add`, `add_`, `addMany`, and `addMany_`)
  2. Query the set (see `find`, `findMin`, `findOne`, `findOneMin`, `closestMatchMin`, and `closestMatch`)

  Refer to the [Haddock docs](http://hackage.haskell.org/package/fuzzyset) for details.

  ## Example

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  module Main where                                                               ```

  import Control.Monad.Trans.Class (lift)
  import Data.Text (Text)
  import Data.FuzzySet (FuzzySearchT, add_, closestMatch, runDefaultFuzzySearchT)

  findMovie :: Text -> FuzzySearchT IO (Maybe Text)
  findMovie = closestMatch

  prog :: FuzzySearchT IO ()
  prog = do
    add_ "Jurassic Park"
    add_ "Terminator"
    add_ "The Matrix"
    result <- findMovie "The Percolator"
    lift (print result)

  main :: IO ()
  main = runDefaultFuzzySearchT prog
  ```
license-name: BSD-3-Clause
