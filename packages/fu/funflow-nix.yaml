all-versions:
- 0.1.0.0
author: Matthew Pickering
basic-deps:
  base: '>=4.10 && <5'
  funflow: '>=1.4'
  funflow-nix: '>=0'
  modern-uri: '>=0'
  path: '>=0'
  path-io: '>=0'
  text: '>=0'
changelog: |
  # Revision history for funflow-nix

  ## 0.1.0.0 -- 2018-11-16

  * Initial Release
changelog-type: markdown
description: |+
  `funflow-nix` provides functions for creating flows which run in a nix
  environment.

  The library exposes the `NixConfig` data type which allows you to specify the
  environment and command to run. This is then turned into a flow using `nix`.

  A complete example can be seen in `examples/Simple.hs`.

  We can pin the version of nixpkgs we want to use by specifying a tarball to
  use as the source.

  ```
  tarballSource :: NixpkgsSource
  tarballSource = NixpkgsTarball [uri|https://github.com/NixOS/nixpkgs/archive/a19357241973538212b5cb435dde84ad25cbe337.tar.gz|]

  nixConfig :: Environment -> NixConfig
  nixConfig senv =
    NixShellConfig {
      environment = senv
      , command = "jq"
      , args = [ParamText "--version"]
      , env = []
      , stdout = StdOutCapture
      , nixpkgsSource = tarballSource
    }
  ```

  Once the config has been specified. It can be turned into a flow by using the
  `nix` function.


  ```
  jqVersionPkg :: SimpleFlow () String
  jqVersionPkg = readString_ <<< nix (\() -> nixConfig (PackageList ["jq"]))
  ```

description-type: markdown
hash: 5dcb6f3172e11125a05dabd6f8b7aa4d8357af9d2139e7d2dbb70c2cd8072d8d
homepage: ''
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: matthewtpickering@gmail.com
synopsis: Utility functions for using funflow with nix
test-bench-deps:
  async: '>=0'
  base: <5
  containers: '>=0'
  data-default: '>=0.7'
  directory: '>=0'
  filepath: '>=0'
  funflow: '>=0'
  funflow-nix: '>=0'
  modern-uri: '>=0'
  path: '>=0'
  path-io: '>=0'
  process: '>=0'
  random: '>=0'
  safe-exceptions: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  temporary: '>=0'
  unix: '>=0'
