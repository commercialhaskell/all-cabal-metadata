all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: Adrian Sieber
basic-deps:
  base: '>=4.18.2 && <5'
  monoid-subclasses: '>=1.2.5 && <1.3'
  protolude: '>=0.3.4 && <0.4'
changelog: ''
changelog-type: ''
description: |
  # Fuzzily

  Fuzzy string search library in Haskell.
  Uses `TextualMonoid` from
  [monoid-subclasses](https://hackage.haskell.org/package/monoid-subclasses)
  to be able to run on different types of strings.

  This is a fork of Joomy Korkut's [fuzzy](https://github.com/joom/fuzzy),
  which itselft was a port of the JavaScript library
  [mattyork/fuzzy](https://github.com/mattyork/fuzzy).

  It's main difference is more readable code and a cleaner API:

  - Descriptive variable names
  - ADTs instead of booleans
  - â€¦

  It was initially forked to be used in [TaskLite](https://tasklite.org/)'s
  `find` sub-command.


  ## Usage

  ```haskell
  > import Text.Fuzzily

  > match HandleCase ("", "") id "fnt" "infinite"
  Just (Fuzzy
          { original = "infinite"
          , rendered = "infinite"
          , score = 3
          })

  > match IgnoreCase ("<", ">") fst "hsk" ("Haskell", 1995)
  Just (Fuzzy
          { original = ("Haskell", 1995)
          , rendered = "<H>a<s><k>ell"
          , score = 5
          })

  > langs = [("Standard ML", 1990), ("OCaml", 1996), ("Scala", 2003)]
  > filter IgnoreCase ("<", ">") fst "ML" langs
  [ Fuzzy
      { original = ("Standard ML", 1990)
      , rendered = "Standard <M><L>"
      , score = 4
      }
  , Fuzzy
      { original = ("OCaml", 1996)
      , rendered = "OCa<m><l>"
      , score = 4
      }
  ]

  > simpleFilter "vm" ["vim", "emacs", "virtual machine"]
  ["vim", "virtual machine"]

  > test "brd" "bread"
  True
  ```
description-type: markdown
hash: dfb7cc0083a42cc0460e23d2205724cd47c4ef58cac1d2edd8f51ac0284e36f2
homepage: https://github.com/ad-si/Fuzzily
latest: 0.2.1.0
license-name: ISC
maintainer: mail@adriansieber.com
synopsis: Filters a list based on a fuzzy string search
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  base: '>=4.18.2 && <5'
  fuzzily: '>=0'
  protolude: '>=0.3.4 && <0.4'
