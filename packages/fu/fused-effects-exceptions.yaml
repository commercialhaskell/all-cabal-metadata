homepage: https://github.com/fused-effects/fused-effects-exceptions#readme
changelog-type: markdown
hash: b29e5150f8669c22f2c76686aaae8c1f876928ac57e7a186242355ac39d3da8d
test-bench-deps:
  base: -any
  tasty-hunit: ^>=0.10
  fused-effects: -any
  transformers: -any
  tasty: ^>=1.2
  fused-effects-exceptions: -any
maintainer: patrickt@github.com
synopsis: Handle exceptions thrown in IO with fused-effects.
changelog: |
  # 1.1.0.1

  * GHC 9 support.

  # 1.1.0.0

  * Port to fused-effects 1.1.

  # 1.0.0.0

  * Port to fused-effects 1.0.
  * Add `Control.Effect.Exception`, which wraps the entirety of `base`'s `Control.Exception`.
  * Add `Control.Carrier.State.IORef`, a state carrier that does not drop writes.
  * Remove `Catch` effect in favor of `Control.Effect.Exception`.

  # 0.2.0.0

  Bump lower bound of `fused-effects` to 0.5.

  # 0.1.1.0

  Depend on `unliftio-core` for unlifting.

  # 0.1.0.0

  Initial release.
basic-deps:
  base: '>=4.7 && <5'
  fused-effects: '>=1.1'
  transformers: '>=0.4 && <0.6'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 1.0.0.0
- 1.1.0.0
- 1.1.0.1
author: Josh Vera, Patrick Thomson, and Rob Rix
latest: 1.1.0.1
description-type: markdown
description: |
  # fused-effects-exceptions

  [![Hackage](https://img.shields.io/hackage/v/fused-effects-exceptions.svg)](https://hackage.haskell.org/package/fused-effects-exceptions)
  [![BSD3 license](https://img.shields.io/badge/license-BSD3-blue.svg)](LICENSE)
  [![Build Status](https://action-badges.now.sh/fused-effects/fused-effects-exceptions)](https://github.com/fused-effects/fused-effects-exceptions/actions)

  <!--
  Setup, hidden from the rendered markdown.

  ```haskell
  {-# LANGUAGE ScopedTypeVariables, TypeApplications #-}
  module Main (module Main) where

  import Control.Carrier.State.Strict
  import Control.Effect.Exception

  main :: IO ()
  main = pure ()
  ```
  -->


  This package provides `Control.Effect.Exception`, a module that wraps the [`Control.Exception`](http://hackage.haskell.org/package/base/docs/Control-Exception.html) API from `base` with the vocabulary provided by the [`fused-effects`](http://hackage.haskell.org/package/fused-effects) library. These functions interact with GHC's support for dynamic exceptions, including functions like `catch` for exception handling and `bracket` for resource management.

  Please be aware that injudicious use of these functions may provoke surprising interactions with carriers that thread a monadic state as a parameter, Ã  la the `Control.Carrier.State` types provided by `fused-effects`. For example, a function like `finally`, which does not thread any state from its body to its handler block, may discard state writes in cleanup handlers:

  ```haskell
  discardsState :: IO Char
  discardsState = execState 'a' ((throwIO (userError "urk") `finally` put @Char 'z')
      `catch` (\(_ :: IOException) -> pure ()))
  ```

  Though the `put @Char 'z'` statement is evaluated, its effect is ultimately discarded; the result of executing the above is `'a'`. If this behavior is a concern, a `Control.Carrier.State.IORef` carrier is provided, which fixes this issue given access to a `MonadIO` constraint. If it is not a concern (such as if the cleanup block is only run for its effects in `IO`), then the `StateC` carriers from `fused-effects` will suffice. For more information about the issues associated with this approach, consult Alexis King's excellent [Demystifying `MonadBaseControl`](https://lexi-lambda.github.io/blog/2019/09/07/demystifying-monadbasecontrol/).

  Prior versions of this package provided a `Catch` effect; this has been excised in favor of the more-general `Control.Effect.Exception`, which provides more functionality without requiring any additional carriers beyond a `Lift IO` effect.
license-name: BSD-3-Clause
