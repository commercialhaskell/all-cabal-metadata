homepage: http://github.com/ekmett/rcu/
changelog-type: markdown
hash: 9f0b0b8df53933620ace5bda9356a851e967e4a66cf6efe8b546cc7c9fbe74d1
test-bench-deps:
  rcu: -any
  rdtsc: '>=1.3.0.1'
  base: '>=4.8 && <5'
  time: '>=1.5.0.1'
  criterion: '>=1.1'
  doctest: '>=0.11.1 && <0.19'
  containers: '>=0.5'
  ghc-prim: '>=0.3'
  transformers: '>=0.4 && <0.6'
  optparse-applicative: '>=0.11'
  parallel: -any
  deepseq: '>=1.4.1'
  primitive: '>=0.6'
maintainer: Edward A. Kmett <ekmett@gmail.com>, Ted Cooper <anthezium@gmail.com>
synopsis: Read-Copy-Update for Haskell
changelog: |+
  ## 0.2.4 [2019.05.02]
  ---------------------
  * Support building with `base-4.13` (GHC 8.8).

  ## 0.2.3 [2018.08.01]
  ---------------------
  * Add `MonadFail` instances for `ReadingRCU` and `WritingRCU`.

  ## 0.2.2 [2018.02.06]
  ---------------------
  * Include `HLint.hs` with the tarball distribution, fixing the `hlint`
    test suite.

  ## 0.2.1
  --------
  * Support `doctest-0.12`

  ## 0.2
  ------
  * Revamp `Setup.hs` to use `cabal-doctest`. This makes it build
    with `Cabal-2.0`, and makes the `doctest`s work with `cabal new-build` and
    sandboxes.

  ## 0
  ----
  * Initial version

basic-deps:
  rcu: -any
  fail: ==4.9.*
  base: '>=4.8 && <5'
  ghc-prim: '>=0.3'
  atomic-primops: '>=0.8'
  transformers: '>=0.4 && <0.6'
  parallel: '>=3.2 && <3.3'
  primitive: '>=0.6'
all-versions:
- '0'
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
author: Ted Cooper and Edward A. Kmett
latest: 0.2.4
description-type: markdown
description: |
  ## rcu

  [![Hackage](https://img.shields.io/hackage/v/rcu.svg)](https://hackage.haskell.org/package/rcu) [![Build Status](https://secure.travis-ci.org/ekmett/rcu.png?branch=master)](http://travis-ci.org/ekmett/rcu)

  This package is an exploration of Read-Copy Update in Haskell based on [Relativistic Programming in Haskell](http://web.cecs.pdx.edu/~theod/papers/haskell2015.pdf) by Cooper and Walpole.  It includes a sound QSBR-based implementation and an attempt at an STM-based implementation.

  In the spirit of [A Relativistic Enhancement to Software Transactional Memory](https://www.usenix.org/legacy/events/hotpar11/tech/final_files/Howard.pdf)
   by Howard and Walpole, we could extend the STM implementation to allow reads and writes on the same data in parallel, writes to disjoint data in parallel, and force readers to agree that writes before a `synchronize` happened before writes after it.

  Development on this project proceeded in a burst of enthusiasm after Edward saw Ted's poster presentation at ICFP 2015, and yet somehow he managed to shanghai Ted into helping maintain this copy of his own work.

  ## Contact Information

  Contributions and bug reports are welcome!

  Please feel free to contact us through github or on the #haskell IRC channel on irc.freenode.net.

  -Edward Kmett and Ted Cooper
license-name: BSD-3-Clause
