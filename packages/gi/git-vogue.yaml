all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.1.1
- 0.2.2.1
- 0.2.2.2
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
author: Anchor Engineering (defunct)
basic-deps:
  Diff: '>=0'
  base: '>=4.8 && <5'
  bifunctors: '>=0'
  containers: '>=0'
  cpphs: '>=0'
  directory: '>=0'
  filepath: '>=0'
  formatting: '>=0'
  git-vogue: '>=0'
  haskell-src-exts: '>=0'
  hlint: '>=2'
  hscolour: '>=0'
  optparse-applicative: '>=0.11'
  process: '>=0'
  split: '>=0'
  strict: '>=0'
  stylish-haskell: '>=0.7'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
  unix: '>=0'
changelog: |
  2018-05-12 v0.3.0.2 Christian Marie <christian@ponies.io>
          * compatibility: GHC 8.4.2
          * plugins: cabal plugin only works with Cabal >=2.2, now optional via the cabal flag

  2018-05-12 v0.3.0.1 Christian Marie <christian@ponies.io>
          * tests: update unit tests

  2018-05-12 v0.3.0.0 Christian Marie <christian@ponies.io>
          * plugins: disable ghc-mod until it builds with ghc 8.x, only latest
                     stack LTS and beyond will be supported
          * misc: Setup.hs ported to cabal 2, greatly simplifying things
  2017-08-25 v0.2.2.2 Christian Marie <christian@ponies.io>
          * plugins: cabal plugin ignores dubious warning about AllRightsReserved
                     license
          * plugins: hlint plugin now exits with correct codes

  2017-08-14 v0.2.2.1 Christian Marie <christian@ponies.io>
          * dependencies: Bump ghc-mod, hlint and stylish-haskell to be inline
                          with latest stack-9.0 lts
          * plugins: ghc-mod will only work with >=5.8 now due CPP allergy
          * plugins: packunused plugin now vacuously succeeds if binary not found

  2015-01-30 v0.2.0.1 Christian Marie <christian@ponies.io>
          * dependencies: Drop list-tries dependency

  2015-01-21 v0.2.0.0 Christian Marie <christian@ponies.io>
          * plugins: All plugins now support multiple repositories
          * plugins: Output is formatted and streamed as it is generated
          * git-vogue: Provide interface for plugin enabling/disabling
          * git-vogue: Modular VCS architecture introduced
          * git-vogue: Allow checking of a single file via git-vogue check file

  2015-01-05 v0.1.0.4 Christian Marie <christian@ponies.io>
          * plugins: Allow disabling of plugins via git config

  2015-01-05 v0.1.0.3 Christian Marie <christian@ponies.io>
          * Initial public release
changelog-type: text
description: "git-vogue - A framework for pre-commit checks \n=========================================================\n\n[![Travis
  Status](http://travis-ci.org/christian-marie/git-vogue.png?branch=master)](https://travis-ci.org/christian-marie/git-vogue)\n\nIntended
  to be used as a git pre-commit hook, *git-vogue* encourages developers\nto keep
  their Haskell code [\"en vogue\"][1] by providing a framework for\nchecking code
  quality and some supporting plugins.\n\nCurrently, *git-vogue* ships with the following
  plugins:\n\n* [cabal][6]\n* [hlint][2]\n* [stylish-haskell][4] with automatic fixing\n*
  [ghc-mod][5] (not with ghc8 , yet)\n\n[1]: https://www.youtube.com/watch?v=GuJQSAiODqI\n[2]:
  http://hackage.haskell.org/package/hlint\n[4]: https://hackage.haskell.org/package/stylish-haskell\n[5]:
  https://hackage.haskell.org/package/ghc-mod\n[6]: https://hackage.haskell.org/package/Cabal\n\nQuickstart\n----------\n\n```bash\ncabal
  install git-vogue\n```\n\nOR\n\n```\ngit clone https://github.com/christian-marie/git-vogue.git\ncd
  git-vogue\nstack install\n```\n\nIf you wish to set up pre-commit hooks (recommended):\n\n```bash\ngit
  vogue init\n```\n\nWith pre-commit hooks set up, `git vogue check` will be run before
  every\ncommit. If you wish to check the whole repository, run `git vogue check --all`.\n\nYou
  can attempt to automatically rectify any problems discovered via `git vogue\nfix`
  and `git vogue fix --all`. The only plugin that currently supports this\nauto-fixing
  is stylish-haskell.\n\n# Plugin discovery/disabling\n\nRunning `git-vogue plugins`
  will show you which plugins are currently detected\nand enabled. This set can be
  tweaked on a per-repository basis with git-vogue\nenable and git-vogue disable.\n\nAlternatively
  you can disable plugins on a per-system basis by adding the file\nname to the `vogue.disable`
  key in your git global configuration:\n\n````bash\ngit config --global --add vogue.disable
  cabal\n````\n\n# Plugins\n\n## cabal\n\nChecks your .cabal file for packaging problems.
  Can not fix problems\nautomatically.\n\n## hlint\n\nChecks .hs files for linting
  issues, respects `HLint.hs` in the top level of\nthe repository. Can not fix problems
  automatically.\n\n## ghc-mod\n\nChecks .hs files (excluding `HLint.hs` and `Setup.hs`)
  as per ghc-mod check.\nghc-mod can be temperamental, so if this fails to run the
  plugin will allow the\ncommit to pass. Can not fix problems automatically.\n\n##
  stylish-haskell\n\nChecks if .hs files would have been modified by stylish-haskell.
  Respects\n`.stylish-haskell.yaml`. Can fix problems automatically.\n\nUninstalling
  \n------------\n\nTo remove a `git-vogue init` configured pre-commit hook, run:\n\n```bash\nrm
  .git/hooks/pre-commit\n```\n\n[Here are instructions](https://www.youtube.com/watch?v=4qXD5l-ZlfA)
  for\nuninstalling a cabal package.\n\nPhilosophy\n---------\n\nAt Anchor Engineering,
  we're pretty un-dogmatic about using one editor or even\none OS for development.
  As such, we've found ourselves in need of a common\nbenchmark for linting, formatting
  and code quality checks.\n\nWe wanted a tool that would:\n\n* Install in one command\n*
  Require nothing to be learned for a new developer\n* Tell that developer what they
  need to fix in the code that they modify and\n  that code only.\n\ngit-vogue aims
  to satisfy these needs, whilst saving developers from the\ndrudgery of installing,
  configuring and running each of these tools\nindependently.\n\nPlugin specification\n-------------------\n\n**The
  interface** for an executable (to be called by git-vogue) is a command\nline argument,
  one of {check,fix,name}, followed by a list of files that are to\nbe checked, and
  then a list of all the files in the repository that are not\nignored. These lists
  are newline separated. \n\nThe plugin can assume that the CWD will be set to the
  top-level directory of\nthe package.\n\nHere's how you might run stylish-haskell
  on all files in the current directory:\n\n```\ncd dir-to-check;\npath-to-libexec/git-vogue-stylish
  check \"$(find .)\" \"$(find .)\"\n```\n\n## Invariants for well-behaved plugin
  commands\n\n* `name` will return a human-readable name one line\n* `check` will
  not modify any files\n* `check` will exit with a return code of:\n    * No errors
  - 0\n    * Errors need fixing - 1\n    * Catastrophic failure to check - 2\n* `fix`
  is idempotent\n* `fix` will exit with a return code of:\n    * The code is now good
  (changes may or may not have been made) - 0\n    * Some errors remain - 1\n    *
  Catastrophic failure to check - 2\n* If `fix` returns \"success\" (return code 0),
  `check` must no longer fail\n"
description-type: markdown
hash: 496d3d17ce2bfc3c302f809188b0a63e3c792ba83e53c84e2a1e3cc15689d12b
homepage: https://github.com/christian-marie/git-vogue
latest: 0.3.0.2
license-name: BSD-3-Clause
maintainer: Christian Marie <christian@ponies.io>, Oswyn Brent <oztastic703@gmail.com>
synopsis: A framework for pre-commit checks.
test-bench-deps:
  base: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  git-vogue: '>=0'
  hspec: '>=0'
  process: '>=0'
  temporary: '>=0'
