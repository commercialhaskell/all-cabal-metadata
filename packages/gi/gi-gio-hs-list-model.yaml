homepage: https://git.coop/akshay/gi-gio-hs-list-model#gi-gio-hs-list-model
changelog-type: markdown
hash: 0b802d0b0aab7cc64ef68f18a11d094297db63f46f68274361a42197d27bbcfc
test-bench-deps: {}
maintainer: itsakshaymankar@gmail.com
synopsis: Haskell implementation of GListModel interface from gi-gio
changelog: |
  # Revision history for gi-gio-hs-list-model

  ## 0.1.0.1 -- 2021-08-2021

  * Remove `stamp` from C struct for the list store.
  * Disable debug logging by default

  ## 0.1.0.0 -- 2021-08-2021

  * First version. Released on an unsuspecting world.
basic-deps:
  haskell-gi-base: -any
  gi-gio: -any
  base: ^>=4.14.1.0
  gi-gobject: -any
  containers: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Akshay Mankar
latest: 0.1.0.1
description-type: markdown
description: |
  # gi-gio-hs-list-model

  This library implements the `GListModelInterface` which is required for using
  `ListView`. The library can be used in two ways:
  1. use the provided `SeqStore` which uses a `Seq` underneath to store the list,
     or
  2. implement functions required for `CustomStoreImpl` in the way `SeqStore`
     does.

  ## Example use of `SeqStore` with `ListView`

  ```haskell
  data Person = Person { name :: Text, age :: Int }

  mkListView :: IO Gtk.ListView
  mkListView workChan messageViewStore = do
    factory <- new Gtk.SignalListItemFactory [ On #setup createEmptyItem
                                             , On #bind populateItem
                                             ]

    model <- seqStoreNew [ Person "Faizal Khan" 30
                         , Person "Ramadhir Singh" 60
                         ]

    selection <- new Gtk.SingleSelection [#model := model]
    new Gtk.ListView [ #model := selection, #factory := factory]

  createEmptyItem :: Gtk.ListItem -> IO ()
  createEmptyItem listItem = do
    label <- new Gtk.Label []
    set listItem [#child := label]

  populateItem :: Gtk.ListItem -> IO ()
  populateItem listItem = do
    item <- fromJust <$> get listItem #item
    person <- fromJust <$> CustomStoreItem.fromObject @Person storeItem

    child <- fromJust <$> get convListItem #child
    label <- fromJust <$> Gtk.castTo Gtk.Label child
    set label [ #label := name person <> ", " <> Text.pack (show (age person)) ]
  ```
license-name: LGPL-2.1-only
