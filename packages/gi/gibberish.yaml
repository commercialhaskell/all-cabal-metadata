all-versions:
- 3.0.0.0
author: Sean D Gillespie
basic-deps:
  MonadRandom: ^>=0.6
  aeson: '>=2.2 && <2.3'
  aeson-pretty: '>=0.8.10 && <0.9'
  base: '>=4.16 && <4.20'
  bytestring: '>=0.11 && <0.13'
  containers: '>=0.6 && <0.7'
  deepseq: '>=1.4 && <1.6'
  directory: ^>=1.3
  filepath: ^>=1.4
  gibberish: '>=0'
  mtl: '>=2.3 && <2.4'
  optparse-applicative: '>=0.18.1 && <0.19'
  random: '>=1.2 && <1.3'
  text: '>=1.2 && <2.2'
  text-show: '>=3.10 && <3.11'
  transformers: '>=0.6.1 && <0.7'
changelog: ''
changelog-type: ''
description: |
  # Gibberish
  ![Build Status](https://github.com/sgillespie/gibberish/actions/workflows/build.yaml/badge.svg)

  Gibberish generates pronounceable passwords that are easy-to-remember and hard-to-guess. Gibberish
  can also generate pseudo english passphrases.

  ## Prerequisites

  In order to build Gibberish, you will need

   * [GHC](https://www.haskell.org/downloads/) (tested on 9.6.2), _or_
   * [Nix](https://nixos.org/download/) (tested on 2.18.1)

  ## Installing

  Gibberish is on [Hackage](https://hackage.haskell.org/package/gibberish). The `gibber`
  executable can be installed with _cabal-install_:

      cabal install gibberish

  ## Building

  The `gibber` executable can be built with _cabal-install_:

      cabal build

  On Nix, the it can be built with:

      nix build

  ## Running

  Genarate a list of passwords:

      gibber <length>

  Generate random phrases (1 per line):

      gibber --passphrases <min-length> <max-length>

  To see all available options:

      gibber --help

  ## API Documentation

  The full API documentation is on hackage at
  https://hackage.haskell.org/package/gibberish/docs. The documentation can also be built with:

      cabal haddock

  ## API Example

  Gibberish can be used to generate words or phrases in Haskell code. For example: generate
  a word by using `Data.Gibberish`:


      import Data.Gibberish
      import Data.Text (Text ())
      ...
      -- Generate a word of length 10
      fooGen :: IO Text
      fooGen = do
        gen <- getStdGen
        trigraph <- loadTrigraph English

      let opts =
            GenPasswordOpts
              { woptsCapitals = False,
                woptsDigits = False,
                woptsSpecials = False,
                woptsTrigraph = trigraph,
                woptsLength = 10
              }

      let (word, _) = usingPass gen (genPassword opts)
      pure (unWord word)

  ## Authors
  Sean Gillespie <sean@mistersg.net>

  ## Acknowledgements

  Gibberish is based on Tom Van Vleck's work on 3rd order approximation to english for
  generating passwords. Gibberish is based on his [javascript
  generator](http://www.multicians.org/thvv/gpw-js.html).

  ## LICENSE

  Gibberish is licensed under the MIT license. Please see [LICENSE](LICENSE) for details
description-type: markdown
hash: c96231cef1c7b7005c10925be174dfa74f8fd2d48e412ddc2d3a80169351cc9d
homepage: https://www.github.com/sgillespie/gibberish
latest: 3.0.0.0
license-name: MIT
maintainer: sean@mistersg.net
synopsis: Generate easy-to-remember, hard-to-guess passwords
test-bench-deps:
  MonadRandom: '>=0.6 && <0.7'
  aeson: '>=2.2 && <2.3'
  aeson-pretty: '>=0.8.10 && <0.9'
  base: '>=4.16 && <4.20'
  bytestring: '>=0.11 && <0.13'
  containers: '>=0.6 && <0.7'
  criterion: ^>=1.6
  deepseq: '>=1.4 && <1.6'
  filepath: '>=1.4 && <1.5'
  gibberish: '>=0'
  hedgehog: '>=1.4 && <1.5'
  hspec: '>=2.11 && <2.12'
  hspec-hedgehog: '>=0.1.1 && <0.2'
  mtl: '>=2.3 && <2.4'
  random: '>=1.2 && <1.3'
  tasty: '>=1.5 && <1.6'
  tasty-golden: '>=2.3.5 && <2.4'
  tasty-hedgehog: '>=1.4.0 && <1.5'
  tasty-th: '>=0.1.7 && <0.2'
  text: '>=1.2 && <2.2'
  text-show: '>=3.10 && <3.11'
  transformers: '>=0.6.1 && <0.7'
