all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.3.3
- 0.1.4.0
- 0.1.5.0
- 0.1.6.0
- 0.1.6.1
- 0.1.6.2
- 0.1.6.3
- 0.1.7.0
author: Michael Snoyman, Adam C. Foltzer
basic-deps:
  base: '>=4.9.1 && <5'
  bytestring: '>=0'
  directory: '>=0'
  filepath: '>=0'
  process: '>=0'
  template-haskell: '>=0'
  th-compat: '>=0'
changelog: |
  # ChangeLog for githash

  ## 0.1.7.0

  * Expose giFiles to users.

  ## 0.1.6.3

  * Specify protocol.file.allow=always for latest git [#28](https://github.com/snoyberg/githash/pull/28)

  ## 0.1.6.2

  * Fixed bugs; now this library's Template Haskell functions are much more
    likely on recompilation to detect Git update that doesn't affect workspace:
    e.g. `git switch -c <new_branch>` (equivalently
    `git checkout -b <new_branch>`) and `git commit --amend --only`.
    Implemented in [#23](https://github.com/snoyberg/githash/pull/23).

  ## 0.1.6.1

  * [Support template-haskell 2.17](https://github.com/snoyberg/githash/pull/22)

  ## 0.1.6.0

  * Always include patchlevel and hash in git-describe output

  * Don't let user's configured initial branch name break tests

  ## 0.1.5.0

  * Add git tag output via git-describe

  ## 0.1.4.0

  * Add git-describe output

  ## 0.1.3.3

  * Add git-worktree support [#13](https://github.com/snoyberg/githash/issues/13)

  ## 0.1.3.2

  * Test suite works outside of a Git repo [#12](https://github.com/snoyberg/githash/issues/12)

  ## 0.1.3.1

  * Clean up some warnings (addresses [fpco/optparse-simple#11](https://github.com/fpco/optparse-simple/issues/11))

  ## 0.1.3.0

  * Catch exceptions thrown by `readCreateProcessWithExitCode` to deal
    with missing `git` executable
    [#7](https://github.com/snoyberg/githash/issues/7)

  ## 0.1.2.0

  * Add `tGitInfoTry` and `tGitInfoCwdTry`

  ## 0.1.1.0

  * Add message of the most recent commit

  ## 0.1.0.1

  * Update the test suite

  ## 0.1.0.0

  * Initial release
changelog-type: markdown
description: |
  # githash

  [![Build Status](https://dev.azure.com/snoyberg/githash/_apis/build/status/snoyberg.githash?branchName=master)](https://dev.azure.com/snoyberg/githash/_build/latest?definitionId=11&branchName=master)

  Some handy Template Haskell splices for including the current git hash
  and branch in the code of your project. Useful for including in panic
  messages, `--version` output, or diagnostic info for more informative
  bug reports.

  Most of the complication in the `GitHash` module is due to the various
  places the current git hash might be stored:

  1. Detached HEAD: the hash is in `.git/HEAD`
  2. On a branch or tag: the hash is in a file pointed to by `.git/HEAD`
  in a location like `.git/refs/heads`
  3. On a branch or tag but in a repository with packed refs: the hash is
  in `.git/packed-refs`

  These situations all arise under normal development workflows, but
  there might be further scenarios that cause problems. Let me know if
  you run into them!
description-type: markdown
hash: cb405aed03e1da9a5ea7601e4d7eea3739104a8a6e47ac4970e079d616326836
homepage: https://github.com/snoyberg/githash#readme
latest: 0.1.7.0
license-name: BSD-3-Clause
maintainer: michael@snoyman.com
synopsis: Compile git revision info into Haskell projects
test-bench-deps:
  base: '>=4.9.1 && <5'
  bytestring: '>=0'
  directory: '>=0'
  filepath: '>=0'
  githash: '>=0'
  hspec: '>=0'
  process: '>=0'
  template-haskell: '>=0'
  temporary: '>=0'
  th-compat: '>=0'
  unliftio: '>=0'
