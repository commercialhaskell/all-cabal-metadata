homepage: https://iu-parfunc.github.io/gibbon/
changelog-type: markdown
hash: 663c2a47c97aa6103107c95741e65842a279b176e1837dd0499ed4ab896fe679
test-bench-deps: {}
maintainer: rrnewton@gmail.com
synopsis: A compiler for operating on serialized trees.
changelog: |
  # 0.1
basic-deps:
  base: '>=4 && <5'
all-versions:
- '0.1'
author: Ryan Newton
latest: '0.1'
description-type: haddock
description: |-
  Gibbon is an experimental compiler that transforms
  high-level functional programs to operate on serialized
  data.

  Typically, programs that process tree-like data
  represent trees using pointer-based data structures in
  memory (one heap object per-leaf and per-node) because such
  a layout is convenient to manipulate in a high-level
  programming language. This is also generally distinct from
  the representation of the data in serialized form on disk,
  which means that a program must perform some sort or
  marshaling when working with serialized data.
  Gibbon unifies the in-memory and serialized formats,
  transforming recursive functions to operate directly on
  serialized data.

  Additionally, while the pointer-based structure is efficient
  for random access and shape-changing modifications,
  it can be inefficient for traversals that process most or
  all of a tree in bulk. The Gibbon project aims to explore
  optimizations of recursive tree transforms by changing how
  trees are stored in memory.
license-name: BSD-3-Clause
