all-versions:
- '0.1'
- 0.1.0.1
- 0.1.0.2
- 0.1.1
- 0.1.2
- 0.1.2.1
- '0.2'
- 0.2.0.1
- '0.3'
- 0.3.0.1
- 0.3.1
- 0.3.2
- 0.3.2.1
- 0.3.2.2
- 0.3.3.0
- 0.3.3.1
- 0.3.3.2
author: Joachim Breitner
basic-deps:
  aeson: '>=0.7 && <1.3'
  base: '>=4.6 && <4.10'
  bytestring: '>=0.10 && <0.11'
  cassava: '>=0.4 && <0.5'
  concurrent-output: '>=1.7 && <1.8'
  containers: '>=0.4 && <0.6'
  directory: '>=1.2 && <1.4'
  extra: '>=1 && <1.6'
  file-embed: '>=0.0.9 && <0.0.11'
  filepath: '>=1.3 && <1.5'
  gitlib: '>=3.1.0.2 && <3.2'
  gitlib-libgit2: '>=0'
  scientific: '>=0.3 && <0.4'
  shake: '>=0.13 && <0.16'
  split: '>=0.2 && <0.3'
  tagged: '>=0.7 && <0.9'
  text: '>=0.11 && <1.3'
  transformers: '>=0.4 && <0.6'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.10 && <0.13'
  yaml: '>=0.8 && <0.9'
changelog: ''
changelog-type: ''
description: "Gipeda -- the Git Performance Dashboard\n=======================================\n\nWhat
  is gipeda?\n---------------\n\nGipeda is a a tool that presents data from your program’s
  benchmark suite (or\nany other source), with nice tables and shiny graphs.\n\n\nIt
  is only a frontend and does not help with or care about collecting the data.\nSo
  it is up to you whether you have a polling shell script loop, a post-commit\nhook
  or a elaborate jenkins setup. As long as the performance data ends up in\nthe `logs/`
  directory, gipeda is happy.\n\nGipeda produces static pages. In fact, the (single)
  html file and the\naccompagning JavaScript code is completely static. Gipeda just
  generates a\nlarge number of json files. This has the advantage of easy deployment:
  Just put\ngipeda in your webspace of copy the files to some static web hosting and
  you\nare done. This putts very little load on your server, is cache friendly and
  has\nno security problems.\n\nDo you want to see it live? Check out these:\n\n *
  [Demo page], visualizing fairly boring stuff about gipeda itself.\n * [GHC’s gipeda
  installation].\n\n[Demo page]: http://perf.haskell.org/gipeda\n[GHC’s gipeda installation]:
  https://perf.haskell.org/ghc\n\nSetting it up\n-------------\n\n * Clone gipeda
  somewhere, possibly directly into your webspace.\n * Install a Haskell compiler,
  including the `cabal` tool.\n * Install a few packages\n\n        apt-get install
  git unzip libssl-dev libfile-slurp-perl libipc-run-perl libicu-dev\n\n * Install
  the dependencies:\n\n        cabal install --only-dependencies\n\n * Compile it:\n\n
  \       cabal install --bindir=.\n\n * Create a `gipeda.yaml`. You can look at the
  example file.\n * Clone the repository of your project into `repository/`. A bare
  clone is\n   sufficient, e.g.\n\n        git clone  --bare git://git.haskell.org/ghc.git
  repository\n\n * Download a bunch of JavaScript libraries by running `./install-jslibs.sh`.\t\n\nGipeda
  does not work without at least some logs, so lets add them.\n\nAdding data\n-----------\n\nGipeda
  expect simple CSV files for each revision, of the form\n\n    benchmark1;1000\n
  \   benchmark2;20.123\n    benchmark3;0\n\nBut likely your benchmark suite does
  not generate them in this format directly.\nHence, put whatever format you have
  (text base logs, JUnit reports, whatever)\ninto the directory `logs`, named `<gitrev>.log`,
  e.g.\n`logs/0279a7d327a3b962ffa93a95d47ea5d9ee31e25c.log`.\n\nThen create a script
  `log2csv` that expects the filename of such a log on\nthe command line and produces
  the desired CSV file.\n\nRunning gipeda\n--------------\n\nWith everything in place,
  you can now run\n\n    ./gipeda\n\nand it will create a bunch of JSON files in `site/out/`.
  \ With `./gipda -j4`\nyou can parallelize it.\n\nYou should do this everytime a
  new log file appears in `logs/`. You should also\nmake sure your repository is up-to-date,
  e.g. by running `git -C repository\npull` or, if it is a bare clone, `git -C repository
  fetch origin\n\"+refs/heads/*:refs/heads/*\" --prune`.\n\nUsing gipeda\n-------------\n\nFinally,
  you simply point your browser to the `site/index.html`. The page\nshould be mostly
  self-explanatory. If you don’t see anything, it might be\nbecause of the filter
  in the top-right corner. Try to enable all buttons, even\nthe `=`.\n\nTo host this
  on a webserver, just put the `site/` directory in your webspace.\n\nHacking on gipeda\n-----------------\n\nGipeda
  doesn't do much; it mostly assembles the data and creates nice reports.\nThe rough
  pipeline is as follows:\n\n * Directory `logs/` contains project-specific data per
  git commit that has\n   been benchmarked. gipeda will run `log2csv` on these files
  to generate the\n   files in `site/out/results`. `logs` may be a normal directory,
  or (for disk\n   space efficiency) a bare git repository. This step is optional.\n
  * Directory `site/out/results` contains one csv file per git commit. The\n   format
  is simple, as there are two columns: benchmark name and a numerical\n   value.\n
  * From these files, gipeda generates a number of JSON files, some per commit\n   (`report`,
  `summaries`), some global (`settings`, `latest-summaries`).\n\n   A crucial idea
  here is that these JSON files are all but fragments of a\n   theoretical global
  JSON document. In other words: You could combine them\n   (using a naive JSON object
  merge) and there would be no conflicts, and the\n   result could be used by the
  client as well.\n * The client (`site/index.html` and `site/js/gipeda.js`) is a
  fairly standard\n   HTML+JS application using jquery, bootstrap, handlebars.\n\nBugs,
  Code, Contact\n-------------------\n\nPlease reports bugs and missing features at
  the [GitHub bugtracker]. This is\nalso where you can find the [source code].\n\nGipeda
  was written by [Joachim Breitner] and is licensed under a permissive MIT\n[license].\n\n[GitHub
  bugtracker]: https://github.com/nomeata/gipeda/issues\n[source code]: https://github.com/nomeata/gipeda\n[Joachim
  Breitner]: http://www.joachim-breitner.de/\n[license]: https://github.com/nomeata/gipeda/blob/LICENSE\n"
description-type: markdown
hash: 5c707805505dfeba24904b3856e9749a2e70f576f00d94e72470d85d14b7736e
homepage: https://github.com/nomeata/gipeda
latest: 0.3.3.2
license-name: MIT
maintainer: mail@joachim-breitner.de
synopsis: Git Performance Dashboard
test-bench-deps: {}
