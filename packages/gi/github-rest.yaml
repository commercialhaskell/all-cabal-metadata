homepage: https://github.com/brandonchinn178/github-rest#readme
changelog-type: markdown
hash: 3e5a39386073c35d8d9bcab41ecec16ef17765806f95f61be2b8ade4d75925cc
test-bench-deps:
  bytestring: -any
  base: -any
  tasty-golden: -any
  text: -any
  tasty-quickcheck: '>=0.8.1'
  mtl: -any
  tasty-hunit: -any
  github-rest: -any
  tasty: -any
  aeson-qq: -any
  http-types: -any
  aeson: '>=1.5.6.0'
maintainer: Brandon Chinn <brandonchinn178@gmail.com>
synopsis: Query the GitHub REST API programmatically
changelog: |
  # v1.1.3

  * Add support for GHC 9.4 + 9.6
  * Drop support for GHC < 9
  * Set the `X-GitHub-Api-Version` header instead of setting the API version in the `Accept` header ([#33](https://github.com/brandonchinn178/github-rest/issues/33))

  # v1.1.2

  * Add support for `jwt-0.11.0`

  # v1.1.1

  * Add support for `aeson-2.0.0.0`

  # v1.1.0

  * Rename `GitHubState` to `GitHubSettings`
  * Remove `queryGitHubPage'` -- implement `queryGitHubPage` in `MonadGitHubREST` instead.
  * Expose `queryGitHubPageIO` if users want to manually implement `MonadGitHubREST`
  * Add `DecodeError` error

  # v1.0.3

  * Fix goldens after GitHub changed documentation URL

  # v1.0.2

  * Remove `MonadFail` constraint on `MonadGitHubREST`
  * Support `unliftio-core-0.2.0.0`

  # v1.0.1

  Bundle test files in release tarball

  # v1.0.0

  Initial release:

  * Implement `queryGitHub` and `GHEndpoint`
  * Implement `GitHubT` and `MonadGitHubREST`
basic-deps:
  http-client: '>=0.5.13 && <0.8'
  bytestring: <0.12
  unliftio: <0.3
  base: '>=4.15 && <5'
  time: <1.13
  text: <2.1
  jwt: '>=0.9 && <0.12'
  unliftio-core: <0.3
  http-client-tls: <0.4
  mtl: <2.4
  transformers: <0.7
  scientific: <0.4
  http-types: '>=0.11 && <0.13'
  aeson: <3
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
author: Brandon Chinn <brandonchinn178@gmail.com>
latest: 1.1.3
description-type: markdown
description: |
  # github-rest

  [![GitHub Actions](https://img.shields.io/github/actions/workflow/status/brandonchinn178/github-rest/ci.yml?branch=main)](https://github.com/brandonchinn178/github-rest/actions?query=branch%3Amain)
  [![Codecov](https://codecov.io/gh/brandonchinn178/github-rest/branch/main/graph/badge.svg?token=8TErU2ntw9)](https://codecov.io/gh/brandonchinn178/github-rest)
  [![Hackage](https://img.shields.io/hackage/v/github-rest)](https://hackage.haskell.org/package/github-rest)

  A package providing a more flexible interface to accessing the [GitHub API](https://developer.github.com/v3/).
  Endpoints are created using the `GHEndpoint` constructor and are executed with
  the `queryGitHub` function in the `GitHubT` monad.

  ## Quickstart

  This quickstart will demonstrate querying endpoints in a hypothetical public
  GitHub repo `alice/my-project`.

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# OPTIONS_GHC -fno-warn-type-defaults #-}

  import Data.Text (Text)
  import GitHub.REST
  import Network.HTTP.Types (StdMethod(..))

  default (Text)

  main = do
    let state = GitHubSettings
          { token = Nothing
            -- ^ An authentication token to use, if any.
          , userAgent = "alice/my-project"
            -- ^ GitHub requires this to be set to a User Agent specific to your
            -- application: https://developer.github.com/v3/#user-agent-required
          , apiVersion = "v3"
            -- ^ Specifies the API version to query: https://developer.github.com/v3/media/
          }

    runGitHubT state $ do

      -- Get information for the "main" branch
      -- https://developer.github.com/v3/git/refs/#get-a-single-reference
      ref <- queryGitHub GHEndpoint
        { method = GET
          -- Colon-prefixed components in the endpoint will be interpolated by
          -- the values in 'endpointVals'.
          -- In this case, "/repos/alice/my-project/git/refs/heads/main"
        , endpoint = "/repos/:owner/:repo/git/refs/:ref"
        , endpointVals =
          [ "owner" := "alice"
          , "repo" := "my-project"
          , "ref" := "heads/main"
          ]
        , ghData = []
        }

      -- 'github-rest' provides a '.:' helper for when the API guarantees that a
      -- key in a JSON object exists
      --
      -- The result of 'queryGitHub' is anything that's an instance of FromJSON,
      -- if using manually-defined data types is preferred over using '.:'. This
      -- package can be easily used with the aeson-schemas library, which
      -- provides a type-safe way to query JSON data.
      let sha :: Text
          sha = ref .: "object" .: "sha"

      -- Create a new branch called "foo"
      -- https://developer.github.com/v3/git/refs/#create-a-reference
      queryGitHub GHEndpoint
        { method = POST
        , endpoint = "/repos/:owner/:repo/git/refs"
        , endpointVals =
          [ "owner" := "alice"
          , "repo" := "my-project"
          ]
        , ghData =
          [ "ref" := "refs/heads/foo"
          , "sha" := sha
          ]
        }
  ```

  ## Comparison to other libraries

  The `github` package provides a decent API for querying the GitHub API,
  and it defines Haskell data types for each endpoint. These data types can
  be used as the result of `queryGitHub`.

  This package provides a different interface for people with different tastes:

  * `github-rest` informs the user exactly which GitHub endpoint is being hit
    (e.g. `/repos/:owner/:repo`). Users no longer need to spend time trying to
    scour documentation to find the corresponding function for an endpoint.

  * `github-rest` passes authentication once, with requests executed in a single
    monadic context. The `github` package requires passing in an authentication
    token every time a request is executed

  * In the same vein, `github-rest` provides a monad transformer that handles all
    GitHub state needed to execute `queryGitHub`. `github` runs everything in
    `IO`, expecting the caller to keep track of GitHub state manually.

  * `github-rest` allows usage with [`aeson-schemas`](http://hackage.haskell.org/package/aeson-schemas)
license-name: BSD-3-Clause
