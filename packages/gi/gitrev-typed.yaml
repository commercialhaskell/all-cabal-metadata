all-versions:
- '0.1'
author: Adam C. Foltzer, Thomas Bidne
basic-deps:
  base: '>=4.15.0.0 && <4.22'
  directory: '>=1.3.8.0 && <1.4'
  exceptions: ^>=0.10.4
  file-io: ^>=0.1.1
  filepath: '>=1.5.0.1 && <1.6'
  os-string: ^>=2.0.0
  process: '>=1.6.13.2 && <1.7'
  template-haskell: '>=2.17.0.0 && <2.24'
  text: '>=0.1.1 && <2.2'
changelog: |
  # Revision history for gitrev-typed

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  Note that the first version, `0.1`, is relative to its parent from which it was
  forked: https://github.com/acfoltzer/gitrev

  ## [0.1] -- 2025-05-07
  ### Changed
  * Updated GHC support to `>= 9 && < 9.13`.

  ### Added
  * Added `Development.GitRev.Typed` for typed TH interface.
  * Added `Development.GitRev.Typed.OsString` for `OsString` support.
  * Added variants that return typed errors (`Either`), rather than just a
    default string "UNKNOWN".
  * Added support for obtaining data via environment variables for e.g.
    "out-of-tree" builds.
  * New git queries: short hash, git diff, git tree.
  * Added support for user-defined custom git queries.

  ### Fixed
  * Possibly fixed locale bug by switching from prelude
    `readFile :: FilePath -> IO String` to
    `file-io.readFile' :: OsPath -> IO ByteString` and decoding to UTF-8.

  [0.1]: https://github.com/tbidne/gitrev-typed/releases/tag/0.1
changelog-type: markdown
description: "<div align=\"center\">\n\n# Gitrev-typed\n\n## Embedding git metadata
  in haskell projects\n\n[![Hackage](https://img.shields.io/hackage/v/gitrev-typed)](https://hackage.haskell.org/package/gitrev-typed)\n![haskell](https://img.shields.io/static/v1?label=&message=9.0%20-%209.12&logo=haskell&logoColor=655889&labelColor=2f353e&color=655889)\n[![ci](http://img.shields.io/github/actions/workflow/status/tbidne/gitrev-typed/ci.yaml?branch=main)](https://github.com/tbidne/gitrev-typed/actions/workflows/ci.yaml)\n[![BSD-3-Clause](https://img.shields.io/github/license/tbidne/gitrev-typed?color=blue)](https://opensource.org/licenses/BSD-3-Clause)\n\n</div>\n\n---\n\n\n#
  Index\n- [Description](#description)\n  - [1. Development.GitRev](#1-developmentgitrev)\n
  \ - [2. Development.GitRev.Typed](#2-developmentgitrevtyped)\n    - [Out-of-tree
  builds](#out-of-tree-builds)\n  - [3. Development.GitRev.Typed.OsString](#3-developmentgitrevtypedosstring)\n-
  [Library Comparisons](#library-comparisons)\n  - [Gitrev](#gitrev)\n  - [Githash](#githash)\n\n#
  Description\n\nThis is a fork of the popular [`gitrev`](https://hackage.haskell.org/package/gitrev)
  package, offering Template Haskell splices for git revision information.\n\nThere
  are three interfaces:\n\n## 1. `Development.GitRev`\n\nThis module provides the
  same interface as `gitrev`'s `Development.GitRev` i.e. untyped splices:\n\n```haskell\n--
  Definition in Development.GitRev\ngitHash :: ExpQ\n```\n\n```haskell\n{-# LANGUAGE
  TemplateHaskell #-}\n\nimport Development.GitRev qualified as GR\n\n-- Returns a
  hash like \"e67e943dd03744d3f93c21f84e127744e6a04543\" or\n-- \"UNKNOWN\", if something
  goes wrong.\nmyHash :: String\nmyHash = $(GR.gitHash)\n```\n\n## 2. `Development.GitRev.Typed`\n\nThis
  module -- on the other hand -- provides typed splices e.g.\n\n```haskell\n-- Definition
  in Development.GitRev.Typed\ngitHash :: Code Q String\n```\n\n```haskell\n{-# LANGUAGE
  TemplateHaskell #-}\n\nimport Development.GitRev.Typed qualified as GRT\n\n-- Returns
  a hash like \"e67e943dd03744d3f93c21f84e127744e6a04543\" or\n-- \"UNKNOWN\", if
  something goes wrong.\nmyHash :: String\nmyHash = $$(GRT.gitHash)\n```\n\nWe also
  provide combinators for defining custom behavior. For instance, we can instead define
  a variant that fails at compile-time instead of returning the string `UNKNOWN`.\n\n```haskell\n--
  gitHashQ :: Q (Either GitError String)\n-- projectError :: Q (Either e String) ->
  Q String\n-- qToCode :: Q a -> Code Q a\nmyHashOrDie :: String\nmyHashOrDie = $$(GRT.qToCode
  $ GRT.projectError GRT.gitHashQ)\n```\n\n### Out-of-tree builds\n\nFurthermore,
  we have workarounds for \"out-of-tree\" builds:\n\n```haskell\n{-# LANGUAGE OverloadedLists
  #-}\n\nmyHashEnv :: Code Q String\nmyHashEnv = toCode gitHash\n  where\n    toCode
  :: Q (Either (Exceptions GitRevError) String) -> Code Q String\n    toCode = GRT.qToCode
  . GRT.projectError\n\n    gitHash :: Q (Either (Exceptions GitRevError) String)\n
  \   gitHash =\n      -- Tries, in order:\n      --\n      -- 1. Retrieving the git
  hash, as normal.\n      -- 2. Running the git action under the directory pointed
  to by the\n      --    environment variable EXAMPLE_HOME, if it exists.\n      --
  3. Looking up environment variable EXAMPLE_HASH, returning the\n      --    value
  if it exists.\n      GRT.firstSuccessQ\n        [ GRT.embedGitError GRT.gitHashQ,\n
  \         GRT.runGitInEnvDirQ \"EXAMPLE_HOME\" GRT.gitHashQ\n          GRT.embedEnvError
  $ GRT.envValQ \"EXAMPLE_HASH\",\n        ]\n```\n\nFor example, `myHashEnv` will
  work for `cabal install` if we include the\nenvironment variable:\n\n```sh\n$ export
  EXAMPLE_HOME=$(pwd); cabal install example\n```\n\nThis function will also work
  with nix flakes:\n\n```nix\n# flake.nix\nlet\n  compiler = pkgs.haskell.packages.\"ghc9101\";\nin\n{\n
  \ # Using nixpkgs haskell infra i.e. developPackage.\n  packages.default = compiler.developPackage
  {\n    name = \"example\";\n    root = ./.;\n    returnShellEnv = false;\n    modifier
  =\n      drv:\n      let\n        drv' = pkgs.haskell.lib.addBuildTools drv [\n
  \         compiler.cabal-install\n          compiler.ghc\n          pkgs.git\n          pkgs.zlib\n
  \       ];\n      in\n      drv'.overrideAttrs (oldAttrs: {\n        EXAMPLE_HASH
  = \"${self.rev or self.dirtyRev}\";\n      });\n  };\n};\n```\n\nSee the `example`
  in the [repo](https://github.com/tbidne/gitrev-typed/) for example usage, and `Development.GitRev.Typed`
  for full documentation.\n\n## 3. `Development.GitRev.Typed.OsString`\n\n`Development.GitRev.Typed`
  for `OsString` rather than `String`.\n\n# Library Comparisons\n\n## Overview\n\n-
  \U0001F315: Supported.\n- \U0001F313: Partial support.\n- \U0001F311: Not supported.\n\n|
  \U0001F447 Feature / Library \U0001F449   | `gitrev-typed` | `gitrev` | `githash`
  |\n|---------------------------|----------------|----------|-----------|\n| Maintained
  \               | \U0001F315             | \U0001F311       | \U0001F313        |\n|
  Untyped TH                | \U0001F315             | \U0001F315       | \U0001F311
  \       |\n| Typed TH                  | \U0001F315             | \U0001F311       |
  \U0001F315        |\n| Custom git queries        | \U0001F315             | \U0001F311
  \      | \U0001F311        |\n| \"Out-of-tree\" workarounds | \U0001F315             |
  \U0001F311       | \U0001F311        |\n| `OsString` support        | \U0001F315
  \            | \U0001F311       | \U0001F311        |\n\n## Gitrev\n\n- As stated,
  this is a fork of `gitrev`. While `gitrev` has been admirably stable for many years,
  it was officially declared unmaintained in January 2024, and the [repo](https://github.com/acfoltzer/gitrev/)
  was archived.\n\n- Not only is `gitrev-typed` currently maintained, it offers the
  new, typed interface. Additionally, `gitrev-typed` resolves a number of open `gitrev`
  issues (see the [changelog](./CHANGELOG.md)).\n\n## Githash\n\n- [`Githash`](https://hackage.haskell.org/package/githash)
  is another `gitrev` fork, though it takes a different approach. Rather than offering
  multiple, individual git queries, `githash` returns a single one with all of the
  (pre-defined) git data at once. The user can then take whatever subset they wish.\n\n
  \ This provides nice ergonomics when you want to run multiple queries at once, though
  it is arguably wasteful when you just want one or two. It also makes it harder to
  fit custom user queries into the API.\n\n- Both `githash` and `gitrev-typed` have
  a typed TH interface (unlike `gitrev`).\n\n- `githash` does not support custom git
  queries, workarounds for \"out-of-tree\" builds, or `OsString`.\n"
description-type: markdown
hash: 905b696dec9c52486290cfef2d3156420de83f5b21bfb0821a37822f40ee1568
homepage: https://github.com/tbidne/gitrev-typed
latest: '0.1'
license-name: BSD-3-Clause
maintainer: Thomas Bidne <tbidne@protonmail.com>
synopsis: Compile git revision info into Haskell projects
test-bench-deps:
  base: '>=0'
  env-guard: ^>=0.2
  gitrev-typed: '>=0'
  os-string: '>=0'
  tasty: '>=1.1.0.3 && <1.6'
  tasty-hunit: '>=0.9 && <0.11'
  template-haskell: '>=0'
  text: '>=0'
