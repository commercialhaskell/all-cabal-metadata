all-versions:
- 1.0.0.0
author: Josep Bigorra
basic-deps:
  aeson: '>=0'
  async: '>=0'
  base: <5
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  keys: '>=0'
  mtl: '>=0'
  neat-interpolation: '>=0'
  optics: '>=0'
  optparse-applicative: '>=0'
  random: '>=0'
  relude: '>=0'
  sqlite-simple: '>=0'
  text: '>=0'
  time: '>=0'
  uuid: '>=0'
changelog: ''
changelog-type: ''
description: "* Yggdrasil Schema\n\n#+begin_html\n<div>\n<img src=\"https://img.shields.io/badge/Haskell-5D4F85?logo=haskell&logoColor=fff&style=plastic\"
  alt=\"Haskell\"/>\n<img src=\"https://img.shields.io/badge/SQLite-4169E1?logo=sqlite&logoColor=fff&style=plastic\"
  alt=\"SQLite\"/>\n<img src=\"https://img.shields.io/badge/Nix-5277C3?logo=nixos&logoColor=fff&style=plastic\"
  alt=\"Nix\"/>\n</div>\n#+end_html\n\nYggdrasil Schema is a Haskell-based tool for
  managing database migrations.\nInspired by tools like Flyway, or Liquibase, it automates
  the process of applying migrations, keeping track of which migrations have been
  executed, and ensuring they only run once.\n\nYggdrasil Schema is designed to be
  simple, extensible, and adaptable to various storage engines.\n\nInitially, it supports
  SQLite, but its architecture is open for future extensions to support additional
  storage engines.\nAs of now available as library only, in the future also as CLI
  standalone tool (with optparse-applicative).\n\n#+begin_html\n<div>\n<img src=\"./resources/img/yggdrasil.webp\"/>\n</div>\n#+end_html\n\n**
  Features\n\n- Automatically applies missing migrations to your database\n- Tracks
  migration history to ensure each migration is run exactly once\n- Written in Haskell
  with a focus on functional programming principles\n- Supports SQLite out of the
  box, other storage engines should be easy to add, and we are open for contributions\n\n**
  Usage\n\nOnce installed, you can use Yggdrasil to apply migrations to your database.\n\nBy
  default, Yggdrasil SQLite branch looks for migration files in the ~./resources/migrations/sqlite/~
  directory.\n\n*NOTE* : Keep in mind this slash ( / ) at the end is very important.\n\nAll
  you need is a directory with migration files.\nThe only requirement in naming the
  files is that they start with a number and a dash, so that the order can be determined.\n\nExamples
  of valid files: ~0-init-my-database.sql~ , ~100-another migration with spaces.txt~\n\nTo
  get things working properly, please ensure that your first migration, called something
  like ~0-yggdrasil.sql~ contains the following:\n#+begin_src sql\nCREATE TABLE yggdrasil
  (\n  identifier TEXT NOT NULL PRIMARY KEY,\n  order_value INTEGER NOT NULl,\n  file_name
  TEXT NOT NULL,\n  ran_at TEXT NOT NULL\n);\n\n#+end_src\n\n** Extending Yggdrasil\n\nYggdrasil
  is built with extension in mind. You can easily add support for other databases
  by implementing a new storage engine backend. \n\n** Contributing\n\nWe welcome
  contributions from the community. Whether it's bug fixes, new features, or documentation
  improvements, feel free to open a pull request or an issue.\n\n** License\n\nThis
  project is licensed under the GNU Lesser GPL License v3. See the COPYING file for
  more details.\n\n"
description-type: text
hash: f4d6619243a4a022046bebfb3e7e894c8c513bee6dfef5a54c32a34a992f6a88
homepage: https://github.com/jjba23/yggdrasil-schema
latest: 1.0.0.0
license-name: LGPL-3.0-only
maintainer: Josep Bigorra <jjbigorra@gmail.com>
synopsis: ''
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  async: '>=0'
  base: <5
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  hspec: '>=0'
  keys: '>=0'
  mtl: '>=0'
  neat-interpolation: '>=0'
  optics: '>=0'
  optparse-applicative: '>=0'
  random: '>=0'
  relude: '>=0'
  sqlite-simple: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  text: '>=0'
  time: '>=0'
  uuid: '>=0'
  yggdrasil-schema: '>=0'
