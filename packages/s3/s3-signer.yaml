all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
author: David Johnson <djohnson.m@gmail.com>, William Casarin <jb55@jb55.com>
basic-deps:
  base: '>=4 && <5'
  base64-bytestring: '>=0'
  blaze-builder: '>=0.4'
  byteable: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=1.2'
  cryptohash: '>=0'
  http-types: '>=0'
  time: '>=0'
  utf8-string: '>=0'
changelog: ''
changelog-type: ''
description: "s3-signer\n======\n![Hackage](https://img.shields.io/hackage/v/s3-signer.svg)\n![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/s3-signer.svg)\n![Haskell Programming
  Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3 License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n![Build
  Status](https://api.travis-ci.org/dmjio/s3-signer.svg?branch=master)\n\ns3-signer
  is intended to be an aid in building secure cloud-based services with\nAWS. This
  library generates cryptographically secure URLs that\nexpire at a user-defined interval.
  These URLs can be used to offload\nthe process of uploading and downloading large
  files, freeing your\nwebserver to focus on other things.\n\n### Features\n - Minimal
  depedencies\n - Web framework agnostic\n - Reduces web server load\n - Simple API\n
  - Ideal for AJAX direct-to-s3 upload scenarios\n\n### Documentation\n[S3 Query String
  Request Authentication](http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n\n###
  Implementation\n\n> AWS Specification\n\n```shell\nSignature = URL-Encode( Base64(
  HMAC-SHA1( YourSecretAccessKeyID,UTF-8-Encoding-Of( StringToSign ) ) ) );\n```\n>
  Haskell Implementation\n\n```haskell\nmodule Network.S3.Sign  ( sign ) where\n\nimport
  \          Crypto.Hash.SHA1       (hash)\nimport           Crypto.MAC.HMAC        (hmac)\nimport
  qualified Data.ByteString.Base64 as B64\nimport           Data.ByteString.UTF8   (ByteString)\nimport
  \          Network.HTTP.Types.URI (urlEncode)\n\n-- | HMAC-SHA1 Encrypted Signature\nsign
  :: ByteString -> ByteString -> ByteString\nsign secretKey url = urlEncode True .
  B64.encode $ hmac hash 64 secretKey url\n```\n\n### Use Case\n```haskell\n{-# LANGUAGE
  OverloadedStrings #-}\n\nmodule Main where\n\nimport           Network.S3\n\nmain
  :: IO ()\nmain = print =<< generateS3URL credentials request\n  where\n     credentials
  = S3Keys \"<public-key-goes-here>\" \"<secret-key-goes-here>\"\n     request     =
  S3Request S3GET \"application/zip\" \"bucket-name\" \"file-name.extension\" 3 --
  3 secs until expired\n```\n### Result\n```haskell\nS3URL {\n      signedRequest
  =\n         \"https://bucket-name.s3.amazonaws.com/file-name.extension?AWSAccessKeyId=<public-key-goes-here>&Expires=1402346638&Signature=1XraY%2Bhp117I5CTKNKPc6%2BiihRA%3D\"\n
  \    }\n```\n\n### Snap integration - Downloads\n```haskell\n-- Quick and dirty
  example\ntype FileID = ByteString\n\nmakeS3URL :: FileID -> IO S3URL\nmakeS3URL
  fileId = generateS3URL credentials request\n  where\n    credentials = S3Keys \"<public-key-goes-here>\"
  \"<secret-key-goes-here>\"\n    request     = S3Request S3GET \"application/zip\"
  \"bucket-name\" (fileId <> \".zip\") 3 \n\ndownloadFile :: Handler App (AuthManager
  App) ()\ndownloadFile = method POST $ currentUserId >>= maybe the404 handleDownload\n
  \ where handleDownload uid = do\n          Just fileId <- getParam \"fileId\"\n
  \         -- Ensure file being requested belongs to user else 403...\n          S3URL
  url <- liftIO $ makeS3URL fileId\n          redirect' url 302\n```\n### Direct to
  S3 AJAX Uploads\n   - Configure S3 Bucket CORS Policy settings\n   - [CORS Docs](http://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html#how-do-i-enable-cors)\n\n```xml\n<?xml
  version=\"1.0\" encoding=\"UTF-8\"?>\n<CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n
  \   <CORSRule>\n        <AllowedOrigin>https://my-url-goes-here.com</AllowedOrigin>\n
  \       <AllowedMethod>PUT</AllowedMethod>\n        <AllowedHeader>*</AllowedHeader>\n
  \   </CORSRule>\n</CORSConfiguration>\n```\n   - Retrieve PUT Request URL via AJAX
  \n\n```haskell\ntype FileID = ByteString\n\nmakeS3URL :: FileID -> IO S3URL\nmakeS3URL
  fileId = generateS3URL credentials request\n  where\n    credentials = S3Keys \"<public-key-goes-here>\"
  \"<secret-key-goes-here>\"\n    request     = S3Request S3PUT \"application/zip\"
  \"bucket-name\" (fileId <> \".zip\") 3 \n\ngetUploadURL :: Handler App (AuthManager
  App) ()\ngetUploadURL = method POST $ currentUserId >>= maybe the404 handleDownload\n
  \ where handleDownload _ = do\n          Just fileId <- getParam \"fileId\"\n          writeJSON
  =<< Data.Text.Encoding.decodeUtf8 <$> liftIO (makeS3URL fileId)\n```\n   - Embed
  FileReader blob data to request\n   - Send upload request\n\n```javascript\nvar
  xhr = new XMLHttpRequest();\nxhr.open('PUT', url /* S3-URL generated from server
  */);\nxhr.setRequestHeader('Content-Type', 'application/zip'); /* whatever http-content-type
  makes sense */\nxhr.setRequestHeader('x-amz-acl', 'public-read');\n\n/* upload completion
  check */\nxhr.onreadystatechange = function(e) {\n    if (this.readyState === 4
  && this.status === 200) \n          console.log('upload complete');\n};\n\n/* Amazon
  gives you progress information on AJAX Uploads */\nxhr.upload.addEventListener(\"progress\",
  function(evt) {\n       if (evt.lengthComputable) {\n          var v = (evt.loaded
  / evt.total) * 100,\n          val = Math.round(v) + '%',\n          console.log('Completed:
  ' + val);\n      }\n}, false);\n\n/* error handling */\nxhr.upload.addEventListener(\"error\",
  function(evt) {\n   console.log(\"There has been an error :(\");\n}, false);\n\n/*
  Commence upload */\nxhr.send(file); // file here is a blob from the file reader
  API\n```\n### File Reader Info\n[How to read file data from the browser](https://developer.mozilla.org/en-US/docs/Web/API/FileReader)\n\n###
  Troubleshoooting\n- Why do I keep getting 403 forbidden when I attempt to upload
  or  download from a pre-signed URL?\n  * Ask yourself the following:\n    - Are
  my keys specified correctly?\n    - Did I configure the CORS settings on my bucket
  properly?\n    - Still trouble? [Make an issue](https://github.com/dmjio/s3-signer/issues)\n-
  Why are my URLs expiring faster than the specified time?\n  * Ask yourself the following:\n
  \   - Is my server's clock synchronized with AWS? [See wiki for NTP info](https://github.com/dmjio/s3-signer/wiki/If-URLs-expire-too-quickly)\n\n###
  FAQ\n- Why didn't you use HMAC-SHA256?\n  * It's 30% slower, and for all intents
  and purposes no more secure\n    than HMAC-SHA1 (no known vulnerabilities exist
  for it, to my knowledge). Plain\n    SHA1 is a different story. Collisions can be
  found, but there is\n    no known way to apply those to HMAC-SHA1.\n  * For the
  curious [SHA-1 is broken](https://www.schneier.com/blog/archives/2005/02/sha1_broken.html)\n
  \ * For the paranoid (Schneier quote from same article above)\n  * [Relevant SO
  Post](http://stackoverflow.com/questions/3334524/hmac-security-is-the-security-of-the-hmac-based-on-sha-1-affected-by-the-colli)\n\n>
  This attack builds on previous attacks on SHA-0 and SHA-1, and is\n> a major, major
  cryptanalytic result. It pretty much puts a bullet\n> into SHA-1 as a hash function
  for digital signatures (although it\n> **doesn't** **affect** applications such
  as **HMAC** where collisions aren't important).\n\n\n  \n\n\n"
description-type: markdown
hash: b0db4a06247a167b9e20ea9c97eb57ca2f0261d7bd0f41670e8276fad2de8627
homepage: https://github.com/dmjio/s3-signer
latest: 0.5.0.0
license-name: BSD-3-Clause
maintainer: David Johnson <djohnson.m@gmail.com>
synopsis: Pre-signed Amazon S3 URLs
test-bench-deps:
  base: '>=4 && <5'
  base64-bytestring: '>=0'
  blaze-builder: '>=0.4'
  byteable: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=1.2'
  cryptohash: '>=0'
  http-types: '>=0'
  time: '>=0'
  utf8-string: '>=0'
