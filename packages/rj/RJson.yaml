all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- 0.3.7
author: Alex Drummond
basic-deps:
  array: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  iconv: '>=0'
  mtl: '>=0'
  parsec: '>=0'
  syb-with-class: '>=0'
changelog: ''
changelog-type: ''
description: "************************************************************************\n|
  RJSon 0.3.7                                                          |\n| Author:
  Alex Drummond                                                |\n|                                                                      |\n|
  Thanks to Dustin DeWeese and Audrey Tang for patches fixing bugs in  | \n| the parser.
  \                                                         |\n| Thanks to Adam Langley
  for a patch fixing the lack of support for    |\n| null JSON values.                                                    |\n|
  Thanks to Maarten for fixing an inconsistency in the behavior of    |\n| serialization/parsing.
  \                                              |\n************************************************************************\n\nThis
  is some documentation on how to use the RJson library.  I wrote a\nblog post about
  an older version of the library which may contain some\nuseful information on using
  syb-with-class:\n\nhttp://lingnerd.blogspot.com/2007/12/pushing-haskells-type-system-to-limits.html\n\n------------------------------------------------------------------------\n\nNot
  all features of the library are covered in this document yet.\n\nIMPORTANT: Be sure
  to check the end of this README, which details a\ncouple of issues with the library
  you should be aware of before using\nit.\n\n------------------------------------------------------------------------\n\nSuppose
  we have the following datatypes:\n\n    data TestRecord2 = TestRecord2 {\n       _c
  :: Int,\n       _d :: String\n    } deriving Show\n\n    data TestRecord1 = TestRecord1
  {\n       _a :: String,\n       _b :: TestRecord2\n    } deriving Show\n\nIn order
  to use RJson, we first have to derive instances of Data and\nTypeable for these
  types.  The following options/modules are required:\n\n    {-# OPTIONS_GHC\n     -XTemplateHaskell\n
  \    -XFlexibleInstances\n     -XMultiParamTypeClasses\n     -XFlexibleContexts\n
  \    -XUndecidableInstances #-}\n    import Text.RJson\n    import Data.Generics.SYB.WithClass.Basics\n
  \   import Data.Generics.SYB.WithClass.Derive\n\nThe following Template Haskell
  code can be used to derive the\ninstances automatically:\n\n    $(derive[''TestRecord1,
  ''TestRecord2])\n\nNow we can use the 'toJson' function to serialize TestRecord1
  and\nTestRecord2 structures. For example, the expression\n\n    toJson (TestRecord1
  { _a=\"foo\", _b=TestRecord2 { _c=5, _d=\"bar\"}})\n\nwill evaluate to the following
  JsonData object:\n\n    {\"a\":\"foo\",\"b\":{\"c\":5,\"d\":\"bar\"}\n\nYou can
  just pass this object to 'show' to convert it to a string, or\nuse the 'toJsonString'
  utility function. The current implementation of\n'show' outputs ASCII-only strings,
  using \"\\uXXXX\" escape sequences for\nunicode characters.  Note that the initial
  underscores have been\nstripped from the field names.  This is the default behavior,
  but we\ncould override it by adding an instance to the TranslateField class:\n\n
  \   instance TranslateField TestRecord1 where\n        translateField _dummy x =
  x\n    instance TranslateField TestRecord2 where\n        translateField _dummy
  x = x\n\nNow if we call 'toJson', the underscores will not be removed:\n\n    {\"_a\":\"foo\",\"_b\":{\"_c\":5,\"_d\":\"bar\"}\n\nThe
  'fromJson' function is used to deserialize a JsonData object.\nUsually, it is easier
  to use 'fromJsonString', which parses a string\nto a JsonData object and then passes
  the result to 'fromJson'. The\nfollowing expression will evaluate to Just the same
  TestRecord1\nstructure that we passed to 'toJson' earlier:\n\n    fromJsonString
  (undefined :: TestRecord1)\n                   \"{\\\"_a\\\":\\\"foo\\\",\\\"_b\\\":{\\\"_c\\\":5,\\\"_d\\\":\\\"bar\\\"}}\"\n
  \   --> Right (TestRecord1 { _a=\"foo\", _b=TestRecord2 { _c=5, _d=\"bar\"}})\n\nThe
  first parameter of 'fromJsonString' (and 'fromJson') is a dummy\nvalue specifying
  the type of the record which is being deserialized.\nNote that the preceding instance
  of TranslateField is in effect here\n(the JSON object keys begin with underscores).\n\nThe
  'fromJsonString' function assumes that the string it is passed is\na true unicode
  string. For this reason, if you have obtained your JSON\nString using the standard
  Haskell IO libraries, you may not get the\ncorrect behavior with unicode strings
  (since your String will be a\nsequence of bytes rather than code points). It is
  usually better to\nget the raw JSON data into a ByteString and then use\n'fromJsonByteString',
  which automatically detects and decodes unicode\nstrings.\n\nThe JsonData type has
  the following definition:\n\n    data JsonData = JDString String                   |\n
  \                   JDNumber Double                   |\n                    JDArray
  [JsonData]                |\n                    JDBool Bool                       |\n
  \                   JDNull                            |\n                    JDObject
  (M.Map String JsonData)\n\nYou can implement custom serialization and deserialization
  behavior\nby adding instances to the ToJson and FromJson classes respectively.\nSuppose
  that we have the following enum type:\n\n    data Direction = Forward | Back | Left
  | Right deriving Show\n    $(derive[''Direction])\n\nAs will be explained shortly,
  the default serialization behavior is\nfor the values of this enum to be converted
  to empty JSON lists, which\nis probably not what you want. In order to convert them
  to and from\nthe appropriate strings, the following instance definitions can be\nadded:\n\n
  \   instance ToJson Direction where\n        toJson North   = JDString \"north\"\n
  \       toJson South   = JDString \"south\"\n        toJson East    = JDString \"east\"\n
  \       toJson West    = JDString \"west\"\n    instance FromJson Direction where\n
  \       fromJson _dummy (JDString \"north\")  = Right North\n        fromJson _dummy
  (JDString \"south\")  = Right South\n        fromJson _dummy (JDString \"east\")
  \  = Right East\n        fromJson _dummy (JDString \"west\")   = Right West\n        fromJson
  _dummy _                   = Left \"Deserialization error for 'Direction'\"\n\nIn
  fact, RJson provides 'enumToJson' and 'enumFromJson' functions\nwhich automate the
  definition of instances of this sort. The preceding\ninstance definitions could
  equivalently be written as follows:\n\n    instance ToJson Direction where\n        toJson
  = enumToJson firstCharToLower\n    instance FromJson Direction where\n        fromJson
  = enumFromJson firstCharToUpper\n\nThe first arguments to 'enumToJson' and 'enumFromJson'
  are\n(String->String) functions used for converting Haskell enum\nconstructor names
  to JSON strings and vice versa. The functions\n'firstCharToUpper' and 'firstCharToLower'
  are provided by RJson.\n\nDefault serialization/deserialization behavior is as follows:\n\n
  \   Haskell primitive types   <-->  Corresponding JSON type\n    Haskell records
  \          <-->  JSON objects\n    Haskell tupels            <-->  Heterogenous
  JSON arrays\n    Haskell algebraic types &\n    newtypes                  <-->  JSON
  array of arguments given to\n                                    constructor. First
  constructor\n                                    always used when deserializing.\n
  \                                   (Not a very useful default.)\n\nBoth ToJson
  and FromJson have some other methods which can be used to\ncustomize serialization
  behavior (check the Haddock\ndocumentation). For example, you can specify default
  field values for\nJSON objects.  Note that there is no default implementation of
  the\n'toJson' or 'fromJson' methods, so if you are overriding other methods\nin
  an instance declaration of ToJson or FromJson, you can set 'toJson'\nand 'fromJson'
  to 'genericToJson' and 'genericFromJson' respectively\nin order to get the default
  behavior.\n\nThe 'Union' type can be used to implement a kind of crude inheritance\nfor
  Haskell record types.  The type has a single binary constructor\n('Union'). Unions
  are serialized by serializing each of the arguments\nto the constructor, then merging
  the resulting JSON objects into a\nsingle object.  If any of the arguments of the
  constructor does not\nserialize to a JSON object then a runtime error will occur.
  \ To create\nunions of more than two records, just use `Union` as an infix\nconstructor.
  \ Type synonyms are defined for complex unions of this\nkind (Union3 a b c, Union4
  a b c d, etc. etc.)\n\n------------------------------------------------------------------------\n\nWARNING:
  Record types with strict constructors will lead to runtime\nerrors when using 'fromJson'
  ('toJson' will still work fine). This is\nbecause it seems to be necessary to temporarily
  create records with\ndummy field values. If the fields are strict, these dummy values
  get\nevaluated, leading to an exception being raised.\n\nOTHER WEIRD BUG: You cannot
  have a field of type X and a field whose\ntype is a synonym of X in the same record.
  This leads to weird\ncompile-time errors if you try to serialize the record. I have
  no idea\nwhy (but this is normally easy to work around).\n"
description-type: text
hash: 09d8193caa55b4d4e3ee7e59f17d6659a8bbb3cc01db8b5975864dc2832ff0a7
homepage: ''
latest: 0.3.7
license-name: BSD-3-Clause
maintainer: a.d.drummond@gmail.com
synopsis: A reflective JSON serializer/parser.
test-bench-deps: {}
