all-versions:
- 1.0.0.2
- 1.0.1.0
- 1.0.1.1
- 1.0.1.2
author: Mitchell Dalvi Rosen, Travis Staton
basic-deps:
  base: ^>=4.12 || ^>=4.13 || ^>=4.14 || ^>=4.15 || ^>=4.16 || ^>=4.17 || ^>=4.18
    || ^>=4.19 || ^>=4.20
  containers: ^>=0.6 || ^>=0.7
  int-supply: ^>=1.0.0
changelog: |
  ## [1.0.1.2] - July 15, 2024

  - Bugfix [#33](https://github.com/awkward-squad/ki/issues/33): A scope could erroneously fail to propagate an exception
    to one of its children.
  - Refactor: depend on (rather than inline) `int-supply` package.

  ## [1.0.1.1] - October 10, 2023

  - Compat: support GHC 9.8.1

  ## [1.0.1.0] - April 3, 2023

  - Change [#25](https://github.com/awkward-squad/ki/pull/25): Attempting to fork a thread in a closing scope now acts as
    if it were a child being terminated due to the scope closing. Previously, attempting to fork a thread in a closing
    scope would throw a runtime exception like `error "ki: scope closed"`.
  - Change [#27](https://github.com/awkward-squad/ki/pull/27): Calling `awaitAll` on a closed scope now returns `()`
    instead of blocking forever.

  ## [1.0.0.2] - January 25, 2023

  - Bugfix [#20](https://github.com/awkward-squad/ki/pull/20): previously, a child thread could deadlock when attempting
    to propagate an exception to its parent.

  ## [1.0.0.1] - August 14, 2022

  - Compat: support GHC 9.4.1

  ## [1.0.0] - June 30, 2022

  - Breaking: Remove `Context` type, `Ki.Implicit` module, and the ability to soft-cancel a `Scope`.
  - Breaking: Remove `Duration` type and its associated API, including `waitFor` and `awaitFor`.
  - Breaking: Remove `Ki.Internal` module.
  - Breaking: Generalize `async` to `forkTry`.
  - Breaking: Generalize `forkWithUnmask` to `forkWith`.
  - Breaking: Make `fork_` take an `IO Void` rather than an `IO ()`.
  - Breaking: Make `fork` create an unmasked thread, rather than inherit the parent's masking state.
  - Breaking: Rename `waitSTM` to `awaitAll` (replacing the old `wait` in `IO`).

  - Change: Make `scoped` kill threads in the order they were created.

  - Bugfix: Fix small memory leak related to closing a scope.
  - Bugfix: Fix subtle bug related to GHC's treatment of deadlocked threads.
  - Bugfix: make `async` (now `forkTry`) propagate async exceptions.
  - Bugfix: make `scoped` safe to run with asynchronous exceptions masked.
  - Bugfix: propagate exceptions to creator of scope, not creator of thread

  - Performance: Use atomic fetch-and-add rather than a `TVar` to track internal child thread ids.

  ## [0.2.0] - December 17, 2020

  - Breaking: Remove `ThreadFailed` exception wrapper.
  - Breaking: Rename `cancelScope` to `cancel`.

  ## [0.1.0.1] - November 30, 2020

  - Misc: Replace `AtomicCounter` with `Int` to drop the `atomic-primops` dependency.

  - Bounds: Lower `cabal-version` from 3.0 to 2.2 because `stack` cannot parse 3.0.

  ## [0.1.0] - November 11, 2020

  - Initial release.
changelog-type: markdown
description: |
  | `ki` | `ki-unlifted` |
  | --- | --- |
  | [![GitHub CI](https://github.com/awkward-squad/ki/workflows/Haskell-CI/badge.svg)](https://github.com/awkward-squad/ki/actions) | |
  | [![Hackage](https://img.shields.io/hackage/v/ki.svg?label=ki&logo=haskell)](https://hackage.haskell.org/package/ki) | [![Hackage](https://img.shields.io/hackage/v/ki-unlifted.svg?label=ki-unlifted&logo=haskell)](https://hackage.haskell.org/package/ki-unlifted) |
  | [![Stackage LTS](https://stackage.org/package/ki/badge/lts)](https://www.stackage.org/lts/package/ki) | [![Stackage LTS](https://stackage.org/package/ki-unlifted/badge/lts)](https://www.stackage.org/lts/package/ki-unlifted) |
  | [![Stackage Nightly](https://stackage.org/package/ki/badge/nightly)](https://www.stackage.org/nightly/package/ki) | [![Stackage Nightly](https://stackage.org/package/ki-unlifted/badge/nightly)](https://www.stackage.org/nightly/package/ki-unlifted) |
  | [![Dependencies](https://img.shields.io/hackage-deps/v/ki)](https://packdeps.haskellers.com/reverse/ki) | [![Dependencies](https://img.shields.io/hackage-deps/v/ki-unlifted)](https://packdeps.haskellers.com/reverse/ki-unlifted) |

  # Overview

  `ki` is a lightweight structured-concurrency library inspired by many other projects and blog posts:

  * [libdill](http://libdill.org/)
  * [trio](https://github.com/python-trio/trio)
  * [Kotlin coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html)
  * [Notes on structured concurrency, or: Go statement considered harmful](https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful)
  * [Structured Concurrency in High-level Languages](https://250bpm.com/blog:124)
  * [Update on Structured Concurrency](https://250bpm.com/blog:137)
  * [Two Approaches to Structured Concurrency](https://250bpm.com/blog:139)
  * [libdill: Structured Concurrency for C](https://libdill.org/structured-concurrency.html)

  A previous version of `ki` also included a mechanism for soft-cancellation/graceful shutdown, which took inspiration
  from:

  * [Go Concurrency Patterns: Context](https://blog.golang.org/context)
  * [.NET 4 Cancellation Framework](https://devblogs.microsoft.com/pfxteam/net-4-cancellation-framework)
  * [Timeouts and cancellation for humans](https://vorpus.org/blog/timeouts-and-cancellation-for-humans)
  * [Graceful Shutdown](https://250bpm.com/blog:146)

  However, this feature was removed (perhaps temporarily) because the design of the API was unsatisfactory.

  # Documentation

  [Hackage documentation](https://hackage.haskell.org/package/ki/docs/Ki.html)

  # Example: Happy Eyeballs

  The [Happy Eyeballs](https://en.wikipedia.org/wiki/Happy_Eyeballs) algorithm is a particularly common example used to
  demonstrate the advantages of structured concurrency, because it is simple to describe, but can be surprisingly
  difficult to implement.

  The problem can be abstractly described as follows: we have a small set of actions to run, each of which can take
  arbitrarily long, or fail. Each action is a different way of computing the same value, so we only need to wait for
  one action to return successfully. We don't want to run the actions one at a time (because that is likely to take too
  long), nor all at once (because that is an improper use of resources). Rather, we will begin executing the first action,
  then wait 250 milliseconds, then begin executing the second, and so on, until one returns successfully.

  There are of course a number of ways to implement this algorithm. We'll do something non-optimal, but simple. Let's get
  the imports out of the way first.

  ```haskell
  import Control.Concurrent
  import Control.Monad (when)
  import Control.Monad.STM (atomically)
  import Data.Function ((&))
  import Data.Functor (void)
  import Data.List qualified as List
  import Data.Maybe (isJust)
  import Ki qualified
  ```

  Next, let's define a `staggeredSpawner` helper that implements the majority of the core algorithm: given a list of
  actions, spawn them all at 250 millisecond intervals. After all actions are spawned, we block until all of them have
  returned.

  ```haskell
  staggeredSpawner :: [IO ()] -> IO ()
  staggeredSpawner actions = do
    Ki.scoped \scope -> do
      actions
        & map (\action -> void (Ki.fork scope action))
        & List.intersperse (threadDelay 250_000)
        & sequence_
      atomically (Ki.awaitAll scope)
  ```

  And finally, we wrap this helper with `happyEyeballs`, which accepts a list of actions, and returns when one action
  returns successfully, or returns `Nothing` if all actions fail. Note that in a real implementation, we may want to
  consider what to do if an action throws an exception. Here, we trust each action to signal failure by returning
  `Nothing`.

  ```haskell
  happyEyeballs :: [IO (Maybe a)] -> IO (Maybe a)
  happyEyeballs actions = do
    resultVar <- newEmptyMVar

    let worker action = do
          result <- action
          when (isJust result) do
            _ <- tryPutMVar resultVar result
            pure ()

    Ki.scoped \scope -> do
      _ <-
        Ki.fork scope do
          staggeredSpawner (map worker actions)
          tryPutMVar resultVar Nothing
      takeMVar resultVar
  ```
description-type: markdown
hash: 8cdaa700fa51f0fbd92ae7f86c9409b1890cb91687bed6f4dde2a13449682459
homepage: https://github.com/awkward-squad/ki
latest: 1.0.1.2
license-name: BSD-3-Clause
maintainer: Mitchell Dalvi Rosen <mitchellwrosen@gmail.com>, Travis Staton <hello@travisstaton.com>
synopsis: A lightweight structured concurrency library
test-bench-deps:
  base: ^>=4.12 || ^>=4.13 || ^>=4.14 || ^>=4.15 || ^>=4.16 || ^>=4.17 || ^>=4.18
    || ^>=4.19 || ^>=4.20
  ki: '>=0'
  stm: ^>=2.5
  tasty: ^>=1.4.2 || ^>=1.5
  tasty-hunit: ^>=0.10
