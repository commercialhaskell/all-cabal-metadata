all-versions:
- 0.1.0.0
- 0.1.0.1
author: Solomon Bothwell
basic-deps:
  base: '>4 && <5'
  mtl: '>=2.2.2 && <2.4'
  profunctors: '>=5.6.2 && <5.7'
  semigroupoids: '>=6.0.0 && <6.1'
  these: '>=1.2 && <1.3'
  witherable: '>=0.4.2 && <0.5'
changelog: |
  # Revision history for kindly-functors

  ## Upcoming

  ## 0.1.0.1 -- 2024-02-04

  * Initial Release.
changelog-type: markdown
description: "Kindly Functors\n===============\n\n\U0001F6A8 **WORK IN PROGRESS**
  \U0001F6A8\n\n[![kindly-functors::CI](https://github.com/solomon-b/kindly-functors/actions/workflows/nix.yml/badge.svg)](https://github.com/solomon-b/kindly-functors/actions/workflows/nix.yml)\n[![kindly-functors::CI](https://github.com/solomon-b/kindly-functors/actions/workflows/cabal.yml/badge.svg)](https://github.com/solomon-b/kindly-functors/actions/workflows/cabal.yml)\n\n\nA
  category polymorphic `Functor` typeclass based on the work of [IcelandJack](https://www.reddit.com/r/haskell/comments/eoo16m/base_category_polymorphic_functor_and_functorof/?utm_source=reddit&utm_medium=usertext&utm_name=haskell&utm_content=t1_khkwtph)
  and [Ed Kmett](https://gist.github.com/ekmett/b26363fc0f38777a637d) allowing you
  to pick out arbitrary kinds and variances for your functors.\n\nThis library offers
  direct access to the `FunctorOf` and `Functor` classes defined in the above work
  but also a slightly more familiar API for one, two, and three parameter functors.\n```haskell\ntype
  Functor f = FunctorOf (->) (->)\ntype Contravariant f = FunctorOf Op (->)\ntype
  Invariant f = FunctorOf (<->) (->)\ntype Filterable f = FunctorOf (Star Maybe) (->)\ntype
  Bifunctor p = FunctorOf (->) (Nat (->) (->))\ntype Profunctor p = FunctorOf Op (Nat
  (->) (->))\ntype Trifunctor p = FunctorOf cat1 (Nat cat2 (Nat cat3 cat4))\n```\n\n`fmap`,
  `bimap`, `lmap`, and `rmap` have been made polymorphic over variances:\n```\n> fmap
  show (Identity True)\nIdentity \"True\"\n\n> getPredicate (fmap (Op read) (Predicate
  not)) \"True\"\nFalse\n\n> lmap show (True, False)\n(\"True\",False)\n\n> lmap (Op
  read) not \"True\"\nFalse\n\n> rmap show (True, False)\n(True,\"False\")\n\n> bimap
  show read (Left True)\nLeft \"True\"\n\n> bimap (read @Int) show (\"1\", True)\n(1,\"True\")\n\n>
  bimap (Op (read @Int)) show (+1) \"0\"\n\"1\"\n\n> trimap show show show (True,
  False, ())\n(\"True\",\"False\",\"()\")\n```\n\n# How does this work?\n\nThe above
  functions are all just instantions of `map1`, `map2`, and `map3`:\n```\n> map1 show
  (True, False, ())\n(True,False,\"()\")\n\n> map1 show (Left True)\nLeft True\n\n>
  map2 show (True, False, ())\n(True,\"False\",())\n\n> map3 show (True, False, ())\n(\"True\",False,())\n```\n\nBecareful
  when using these directly as GHC might pick out a surprising instance:\n```\n> map2
  show (Left True)\nLeft \"True\"\n```\n\nThese functions themselves are a frontend
  for `map` from the (kindly) `Functor` class:\n\n```haskell\ntype Functor :: (from
  -> to) -> Constraint\nclass (Category (Dom f), Category (Cod f)) => Functor (f ::
  from -> to) where\n  type Dom f :: from -> from -> Type\n  type Cod f :: to -> to
  -> Type\n\n  map :: Dom f a b -> Cod f (f a) (f b)\n\n-- NOTE: These these classes
  are labeled from right to left:\nk\nclass (FunctorOf cat (->) p) => MapArg1 cat
  p | p -> cat where\n  map1 :: (a `cat` b) -> p a -> p b\n  map1 = map\n\nclass (FunctorOf
  cat1 (cat2 ~> (->)) p) => MapArg2 cat1 cat2 p | p -> cat2 cat2 where\n  map2 ::
  (a `cat1` b) -> forall x. p a x -> p b x\n  map2 = runNat . map\n\nclass (FunctorOf
  cat1 (cat2 ~> cat3 ~> (->)) p) => MapArg3 cat1 cat2 cat3 p | p -> cat1 cat2 cat3
  where\n  map3 :: (a `cat1` b) -> forall x y. p a x y -> p b x y\n  map3 f = runNat
  (runNat (map f))\n```\n"
description-type: markdown
hash: 6b42ae92ae4a54ebffb7ac76080ebd7e5dc3e6a8da928eea83ce1c6485565fa3
homepage: https://www.github.com/solomon-b/kindly-functors
latest: 0.1.0.1
license-name: MIT
maintainer: ssbothwell@gmail.com
synopsis: A category polymorphic `Functor` typeclass
test-bench-deps:
  base: '>4 && <5'
  hspec: '>=0'
  kindly-functors: '>=0'
