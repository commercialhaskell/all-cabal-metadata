all-versions:
- 0.4.1
- 0.4.1.1
- 0.5.0.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.5.1.4
- 0.6.0.0
- 0.7.0.0
- 0.7.0.1
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.5
- 0.9.0.0
- 0.10.0.0
- 0.10.0.1
- 0.11.0.0
- 0.12.0.0
- 0.12.0.1
- 0.13.0.0
- 0.13.1.0
- 0.13.1.1
- 0.13.1.2
- 0.13.2.0
- 0.13.2.2
- 0.13.3.0
- 0.13.3.1
- 0.13.3.2
- 0.13.4.0
- 0.13.5.0
- 0.13.6.0
- 0.14.0.0
- 0.15.0.1
- 0.15.0.2
- 0.15.1.0
author: Bryan O'Sullivan <bos@serpentine.com>
basic-deps:
  base: '>=4.9 && <5'
  math-functions: '>=0.2.1.0'
  primitive: '>=0.6.2'
  random: '>=1.2 && <1.3'
  time: '>=0'
  vector: '>=0.7'
changelog: "## Changes in 0.15.1.0\n\n  * Additon of binomial sampler using the rejection
  sampling method in\n    Kachitvichyanukul, V. and Schmeiser, B. W.  Binomial Random\n
  \   Variate Generation.  Communications of the ACM, 31, 2 (February,\n    1988)
  216. <https://dl.acm.org/doi/pdf/10.1145/42372.42381>. A more\n    efficient basis
  for e.g. the beta binomial distribution:\n\t`beta a b g >>= \\p -> binomial n p
  g`.\n\n## Changes in 0.15.0.2\n\n  * Doctests on 32-bit platforms are fixed. (#79)\n\n\n##
  Changes in 0.15.0.1\n\n  * Bug in generation of Int/Word in both uniform and uniformR
  is fixed. (#75)\n\n\n## Changes in 0.15.0.0\n\n  * `withSystemRandomST` and `createSystemSeed`
  are added.\n\n  * `withSystemRandom` is deprecated.\n\n  * `random>=1.2` is dependency
  of `mwc-random`.\n\n  * Instances for type classes `StatefulGen` & `FrozenGen` defined
  in random-1.2\n    are added for `Gen`.\n\n  * Functions in `System.Random.MWC.Distributions`
  and\n    `System.Random.MWC.CondensedTable` now work with arbitrary `StatefulGen`\n\n
  \ * `System.Random.MWC.uniformVector` now works with arbitrary `StatefulGen` as\n
  \   well and uses in-place initialization instead of `generateM`. It should be\n
  \   faster for anything but IO and ST (those shoud remain same).\n\n\n## Changes
  in 0.14.0.0\n\n  * Low level functions for acquiring random data for initialization\n
  \   of PRGN state is moved to `System.Random.MWC.SeedSource` module\n\n  * Ensure
  that carry is always correct when restoring PRNG state from\n    seed. Only affects
  users who create 258 element seed manually.\n    (#63, #65)\n\n\n## Changes in 0.13.6.0\n\n
  \ * `tablePoisson` now can handle Î»>1923, see #59 for details.\n    That required
  intoduction of dependency on math-functions.\n\n\n## Changes in 0.13.5.0\n\n  *
  `logCategorical` added\n\n## Changes in 0.13.4.0\n\n  * `withSystemRandom` uses
  RtlGenRandom for seeding generator on windows\n\n\n## Changes in 0.13.3.1\n\n  *
  primitive-0.6 compatibility\n\n\n## Changes in 0.13.3.0\n\n  * Monadic variant of
  vector shuffle added: `uniformShuffleM`\n\n  * Context on `uniformShuffle` loosened\n\n\n##
  Changes in 0.13.2.2\n\n  * Fixed crash during gen. initialization on Windows when
  stderr\n    is not available (#36).\n\n## Changes in 0.13.2.0\n\n  * Generators
  for beta, Bernoully, Dirichlet and categorical distributions\n    added.\n\n  *
  Functions for generating random shuffles added.\n\n\n## Changes in 0.13.1.2\n\n
  \ * GHC 7.9 support\n\n\n## Changes in 0.13.1.1\n\n  * Long standing performance
  problem in normal distribution fixed (#16)\n\n\n## Changes in 0.13.1.0\n\n  * `createSystemRandom`
  added\n\n\n## Changes in 0.13.0.0\n\n  * Workaround for GHC bug 8072 (bug 25). GHC
  7.6 on 32-bit platrofms is\n    affected.\n\n  * Generators for truncated exponential
  and geometric distributions\n    added.\n\n\n## Changes in 0.12.0.0\n\n  * Fucntion
  `asGenIO` and `asGenST` added.\n\n  * Generation of discrete random variates using
  condensed tables\n    methed. Tables for Poisson and binomial distributions are\n
  \   provided.\n"
changelog-type: markdown
description: |
  # Efficient, general purpose pseudo-random number generation
  [![Build
  Status](https://github.com/haskell/mwc-random/workflows/Haskell-CI/badge.svg)](https://github.com/haskell/mwc-random/actions)

  This package provides the System.Random.MWC module, a Haskell library
  for generating high-quality pseudo-random numbers in a space- and
  time-efficient way.


  # Get involved!

  Please report bugs via the
  [github issue tracker](https://github.com/haskell/mwc-random/issues).

  Master [git repository](https://github.com/haskell/mwc-random):

  * `git clone https://github.com/haskell/mwc-random.git`


  # Authors

  This library is written and maintained by Bryan O'Sullivan,
  <bos@serpentine.com>.
description-type: markdown
hash: 47180645318f2bce3c481b01d350d518aa8dd0f6b6d730cf5945db0ad78ab334
homepage: https://github.com/haskell/mwc-random
latest: 0.15.1.0
license-name: BSD-2-Clause
maintainer: Alexey Khudyakov <alexey.skladnoy@gmail.com>
synopsis: Fast, high quality pseudo random number generation
test-bench-deps:
  QuickCheck: '>=2.2'
  base: <5
  bytestring: '>=0'
  doctest: '>=0.15 && <0.23'
  math-functions: '>=0.3.4'
  mersenne-random: '>=0'
  mtl: '>=0'
  mwc-random: '>=0'
  primitive: '>=0'
  random: '>=1.2'
  tasty: '>=1.3.1'
  tasty-bench: '>=0.3'
  tasty-hunit: '>=0'
  tasty-papi: '>=0.1.2'
  tasty-quickcheck: '>=0'
  vector: '>=0.12.1'
