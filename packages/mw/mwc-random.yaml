homepage: https://github.com/bos/mwc-random
changelog-type: markdown
hash: 50082409799461f5cc468f62131f7e50d270156c6b285c072e699140630c4cc7
test-bench-deps:
  bytestring: -any
  mwc-random: -any
  base: <5
  doctest: '>=0.15 && <0.19'
  gauge: '>=0.2.5'
  mersenne-random: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  random: '>=1.2'
  tasty: '>=1.3.1'
  QuickCheck: '>=2.2'
  primitive: -any
  vector: '>=0.12.1'
maintainer: Bryan O'Sullivan <bos@serpentine.com>
synopsis: Fast, high quality pseudo random number generation
changelog: |
  ## Changes in 0.15.0.2

    * Doctests on 32-bit platforms are fixed. (#79)


  ## Changes in 0.15.0.1

    * Bug in generation of Int/Word in both uniform and uniformR is fixed. (#75)


  ## Changes in 0.15.0.0

    * `withSystemRandomST` and `createSystemSeed` are added.

    * `withSystemRandom` is deprecated.

    * `random>=1.2` is dependency of `mwc-random`.

    * Instances for type classes `StatefulGen` & `FrozenGen` defined in random-1.2
      are added for `Gen`.

    * Functions in `System.Random.MWC.Distributions` and
      `System.Random.MWC.CondensedTable` now work with arbitrary `StatefulGen`

    * `System.Random.MWC.uniformVector` now works with arbitrary `StatefulGen` as
      well and uses in-place initialization instead of `generateM`. It should be
      faster for anything but IO and ST (those shoud remain same).


  ## Changes in 0.14.0.0

    * Low level functions for acquiring random data for initialization
      of PRGN state is moved to `System.Random.MWC.SeedSource` module

    * Ensure that carry is always correct when restoring PRNG state from
      seed. Only affects users who create 258 element seed manually.
      (#63, #65)


  ## Changes in 0.13.6.0

    * `tablePoisson` now can handle Î»>1923, see #59 for details.
      That required intoduction of dependency on math-functions.


  ## Changes in 0.13.5.0

    * `logCategorical` added

  ## Changes in 0.13.4.0

    * `withSystemRandom` uses RtlGenRandom for seeding generator on windows


  ## Changes in 0.13.3.1

    * primitive-0.6 compatibility


  ## Changes in 0.13.3.0

    * Monadic variant of vector shuffle added: `uniformShuffleM`

    * Context on `uniformShuffle` loosened


  ## Changes in 0.13.2.2

    * Fixed crash during gen. initialization on Windows when stderr
      is not available (#36).

  ## Changes in 0.13.2.0

    * Generators for beta, Bernoully, Dirichlet and categorical distributions
      added.

    * Functions for generating random shuffles added.


  ## Changes in 0.13.1.2

    * GHC 7.9 support


  ## Changes in 0.13.1.1

    * Long standing performance problem in normal distribution fixed (#16)


  ## Changes in 0.13.1.0

    * `createSystemRandom` added


  ## Changes in 0.13.0.0

    * Workaround for GHC bug 8072 (bug 25). GHC 7.6 on 32-bit platrofms is
      affected.

    * Generators for truncated exponential and geometric distributions
      added.


  ## Changes in 0.12.0.0

    * Fucntion `asGenIO` and `asGenST` added.

    * Generation of discrete random variates using condensed tables
      methed. Tables for Poisson and binomial distributions are
      provided.
basic-deps:
  base: '>=4.8 && <5'
  time: -any
  math-functions: '>=0.2.1.0'
  random: '>=1.2'
  primitive: '>=0.6.2'
  vector: '>=0.7'
all-versions:
- 0.4.1
- 0.4.1.1
- 0.5.0.0
- 0.5.1.1
- 0.5.1.2
- 0.5.1.3
- 0.5.1.4
- 0.6.0.0
- 0.7.0.0
- 0.7.0.1
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.5
- 0.9.0.0
- 0.10.0.0
- 0.10.0.1
- 0.11.0.0
- 0.12.0.0
- 0.12.0.1
- 0.13.0.0
- 0.13.1.0
- 0.13.1.1
- 0.13.1.2
- 0.13.2.0
- 0.13.2.2
- 0.13.3.0
- 0.13.3.1
- 0.13.3.2
- 0.13.4.0
- 0.13.5.0
- 0.13.6.0
- 0.14.0.0
- 0.15.0.1
- 0.15.0.2
author: Bryan O'Sullivan <bos@serpentine.com>
latest: 0.15.0.2
description-type: markdown
description: |
  # Efficient, general purpose pseudo-random number generation
  [![Build
  Status](https://github.com/haskell/mwc-random/workflows/Haskell-CI/badge.svg)](https://github.com/haskell/mwc-random/actions)

  This package provides the System.Random.MWC module, a Haskell library
  for generating high-quality pseudo-random numbers in a space- and
  time-efficient way.


  # Get involved!

  Please report bugs via the
  [github issue tracker](http://github.com/haskell/mwc-random).

  Master git [git repository](http://github.com/haskell/mwc-random):

  * `git clone git://github.com/bos/mwc-random.git`


  # Authors

  This library is written and maintained by Bryan O'Sullivan,
  <bos@serpentine.com>.
license-name: BSD-3-Clause
