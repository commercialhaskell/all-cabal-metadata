all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.0.6
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.7.0.3
- 0.7.0.4
- 0.7.0.5
- 0.7.0.6
- 0.7.0.7
- 0.7.0.8
- 0.7.1.0
- 0.7.1.1
- 0.7.1.2
- 0.7.1.3
- 0.7.1.4
- 0.7.2.0
- 0.7.2.1
- 0.7.2.2
- 0.7.3.0
author: Luke Clifton
basic-deps:
  async: '>=2.2.1 && <2.3'
  base: '>=4.9 && <4.21'
  bytestring: '>=0.10.10 && <0.13'
  containers: '>=0.5.11 && <0.7'
  deepseq: '>=1.4.3 && <1.5'
  directory: '>=1.3.1 && <1.4'
  filepath: '>=1.4.2 && <1.5'
  mtl: '>=2.2.2 && <2.4'
  process: '>=1.6.3 && <1.7'
  shh: '>=0'
  split: '>=0.2.3 && <0.3'
  stringsearch: '>=0.3.6.6 && <0.4'
  template-haskell: '>=2.13.0 && <2.23'
  temporary: '>=0'
  unix: '>=2.7.2 && <2.9'
  utf8-string: '>=0'
changelog: |
  # Revision history for shh

  ## 0.7.3.0 -- 2023-12-19

  * Add a `--debug` flag, and default to being less noisy on startup.

  ## 0.7.1.4 -- 2021-07-01

  * Fix a bug where `|>` was too strict, causing SIGPIPE
    to be triggered (ResourceVanished).

  ## 0.7.1.3 -- 2021-06-30

  * Expose the ToFilePath class.

  ## 0.7.1.2 -- 2021-06-30

  * Remove assumptions introduced in 0.7.1.0 about UTF-8. Arbitrary filenames
    will now work as they should.

  ## 0.7.1.1 -- 2021-06-30

  * Changes to work on GHC 9

  ## 0.7.1.0 -- 2020-09-05

  * Assume UTF-8 encoding in places. This is a temporary workaround until we
    can remove all encoding assumptions.

  ## 0.7.0.8 -- 2020-05-28

  * Flush std buffers before executing a process to make interaction
    with Haskells standard IO system more predictable.
  * Various bug fixes

  ## 0.7.0.3 -- 2019-08-21

  Allow optionally capturing stdout on failure exceptions

  ## 0.7.0.1 -- 2019-08-12

  Change how we test for library installation.

  ## 0.7.0.0 -- 2019-08-06

  This is a fairly major refactor which consolidates a bunch of type classes
  and simplifies a few things.

  * ExecArgs, Unit, PipeResult, PipeFailure are all gone and replaced
    with Command and Shell type classes.
  * Renamed various functions.
    * catchFailure -> tryFailure
    * catchCode    -> exitCode
  * Remove some unnecessary utf8 decoding.


  ## 0.6.0.0 -- 2019-06-26

  This change doesn't remove any functions or majorly change any semantics,
  but it will break everything. We now use ByteString instead of String as
  the basis for interaction with the OS. This has the potential to improve
  performance, but most importantly, helps with correctness.

  * Switch to a ByteString interface, in the process fixing up a bunch of
    unicode issues.
  * Encode String type arguments as utf8.

  ## 0.5.0.0 -- 2019-05-23

  * Change how identifiers are encoded to avoid clashes in all scenarios
    (Potentially breaking change)

  ## 0.4.0.0 -- 2019-04-20

  * Pre-compile Shell.hs for faster loading of shh shell
  * Introduce `nativeProc` interface and related functions (`pureProc`...)
  * Allow type-changing `|>` which enables `capture` and
    similar "processes" to replace the less consistent `readProc`
    family of functions.  `s <- readProc $ echo "Hello"` can now
    be written `s <- echo "Hello" |> capture`. This allows capturing
    within the `Proc` monad to manipulate the stream in Haskell.
  * Introduce `xargs1` function which can replace some uses of the `xargs`
    utility, and provides a type-checked, and spell-checked interface
    similar to `xargs`.

  ## 0.3.X.X -- 2019-03-10

  * Changes how lazy reading works. We no longer terminate the process, we
    just close the handles and wait for the process to terminate naturally.

    This eliminates a source of non-determinism

  ## 0.2.X.X -- 2019-01-23

  * Extended the ExecArg typeclass to handle lists.

  ## 0.1.X.X  -- 2018-11-02

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# Shh\n\n[![](https://img.shields.io/hackage/v/shh.svg?colorB=%23999&label=shh)](http://hackage.haskell.org/package/shh)\n[![](https://img.shields.io/hackage/v/shh-extras.svg?colorB=%23999&label=shh-extras)](http://hackage.haskell.org/package/shh-extras)\n[![](https://builds.sr.ht/~lukec/shh/nix.yml.svg)](https://builds.sr.ht/~lukec/shh/commits/nix.yml)\n\n<details><summary>\nShh
  is a library to enable convenient shell-like programming in Haskell.\nIt works well
  in scripts, and from GHCi, allowing you to use GHCi as a shell.\n</summary>\n\n```haskell\n{-#
  LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE ExtendedDefaultRules
  #-}\n{-# LANGUAGE QuasiQuotes #-}\nmodule Readme (test) where\n\nimport Shh\n\nimport
  System.Environment\nimport Control.Concurrent.Async\nimport Prelude hiding (head)\nimport
  Test.Tasty\nimport Test.Tasty.HUnit\nimport Test.Tasty.QuickCheck\nimport qualified
  System.Directory\nimport qualified Data.ByteString.Lazy.Char8 as Char8\nimport Data.List
  (nub)\nimport Data.Char\nimport PyF\n\nload SearchPath [\"echo\", \"base64\", \"cat\",
  \"head\", \"sleep\", \"mktemp\", \"ls\", \"wc\", \"find\", \"tr\", \"users\", \"sha256sum\",
  \"false\", \"true\"]\n\ncurl :: Cmd\ncurl = true\n\ntest :: IO ()\ntest = do\n```\n\n</details>\n\nIt's
  primary purpose is in replacing shell scripts. As such, many\nfunctions are provided
  to mimic the shell environment, and porting shell\nscripts to shh should be fairly
  straightforward. A simple\n[\"cargo culting\" port](docs/porting.md) should work
  in most situations,\nand perhaps be even more robust than the original.\n\nIt is
  also a wrapper tool around launching GHCi as a shell.\n\nIt supports\n\n * Automatically
  defining a function for each executable on your `$PATH`\n   using template Haskell,
  as well as a runtime check to ensure they all\n   exist on startup.\n\n * Redirection
  of stdout and stderr\n       \n   ```haskell\n     -- Redirect stdout\n     echo
  \"Hello\" &> StdErr\n     echo \"Hello\" &> Truncate \".tmp_file\"\n   \n     --
  Redirect stderr\n     echo \"Hello\" &!> Append \"/dev/null\"\n     echo \"Hello\"
  &!> StdOut\n   ```\n\n\n * Piping stdout or stderr to the input of a chained process\n
  \  \n   ```haskell\n     cat \"/dev/urandom\" |> base64 |> head \"-n\" 5\n   ```\n\n
  * Multiple processes sequentially feeding a single process\n\n   ```haskell\n     (echo
  1 >> echo 2) |> cat\n   ```\n\n * Use of Haskell's concurrency primitives.\n\n   ```haskell\n
  \    race (sleep 1 >> echo \"Slept for 1\") (sleep 2 >> echo \"Slept for 2\")\n\n
  \  ```\n\n   ```haskell\n     mapConcurrently_ (\\url -> curl \"-Ls\" url |> wc)\n
  \      [ \"https://raw.githubusercontent.com/luke-clifton/shh/master/shell.nix\"\n
  \      , \"https://raw.githubusercontent.com/luke-clifton/shh/master/README.md\"\n
  \      ]\n   ```\n\n * Capturing of process output\n\n   ```haskell\n     s <- echo
  \"Hello\" |> tr \"-d\" \"l\" |> capture\n     print s\n\n     loggedIn <- nub .
  Char8.words <$> (users |> capture)\n     putStrLn $ \"Logged in users: \" ++ show
  loggedIn\n\n     mapM_ Char8.putStrLn =<< (find \"-maxdepth\" 1 \"-print0\" |> captureEndBy0)\n
  \  ```\n\n * Capturing infinite output of a process lazily\n\n   ```haskell\n     cat
  \"/dev/urandom\"\n       |> base64\n       |> readInput (mapM_ Char8.putStrLn .
  take 3 . Char8.lines)\n   ```\n\n * Write strings to stdin of a process.\n\n   ```haskell\n
  \    writeOutput \"Hello\\n\" |> cat\n     -- Hello\n\n     \"Hello\" >>> sha256sum\n\n
  \    sha256sum <<< \"Hello\"\n   ```\n\n * Proper exceptions, when a process exits
  with a failure code, an exception\n   is thrown. You can catch these normally. The
  exception includes the error\n   code, the command, and all it's arguments.\n\n
  \  ```haskell\n     false \"Ha, it died\"\n     --  *** Exception: Command `false
  \"Ha, it died\"` failed [exit 1]\n   ```\n   ```haskell\n     exitCode false\n     --
  \ 1\n   ```\n\n * \"Native\" processes, i.e. Haskell functions that behave like
  a process.\n\n   ```haskell\n     echo \"Hello\" |> pureProc (Char8.map toUpper)
  |> tr \"-d\" \"L\"\n     -- HEO\n   ```\n\n * And much, much more! Look at the documentation
  on Hackage for a\n   comprehensive overview of all the possibilities.\n\n## Mnemonics
  \n\nShh has many symbols that might seem intimidating at first, but there\nis a
  simple mnemonic for them.\n\n    |     Piping. Looks like a pipe, same as in POSIX
  shells.\n    &     Redirection, think of the shell `2>&1`\n    >,<   The direction
  of flow of a command\n    !     Operate on stderr instead of stdout\n\nSo, for example,\n\n
  \   ls |> cat      Pipe the stdout of `ls` into stdin of `cat`\n    cat <| ls      Same
  as above\n    ls &> StdErr   Redirect stdout of `ls` to wherever stderr is going.\n
  \   StdErr <& ls   Same as above\n    ls &!> StdOut  Redirect stderr of `ls` to
  wherever stdout is going.\n    StdOut <!& ls  Same as above\n\n## Globbing\n\nCurrently
  Shh does not have any built in globbing support. Rather, it is\ncurrently suggested
  to use another library to do globbing. For example,\nusing the [Glob](http://hackage.haskell.org/package/Glob)
  package, it is\npossible to do something like\n\n    wc \"--\" =<< glob \"*.md\"\n\nCertainly
  more verbose than the Bash equivalent, however, also more explicit,\nwhich is probably
  a good thing. If this turns out to be too cumbersome, we\nmight introduce a more
  succinct globbing feature, though it will always be\nexplicit, and thus always more
  verbose than most other shells.\n\n## String Interpolation/Expansion/Substitution\n\nString
  interpolation, much like globbing, is left to an external library.\nI lightweight,
  zero-dependency solution is to use [PyF](https://hackage.haskell.org/package/PyF),\nwhich,
  since 0.10.0.1, has no dependencies other than ones included with GHC.\n\n```haskell\ngreet
  =  do\n    user <- getEnv \"USER\"\n    echo [fmt|Hello, {user}!|]\n```\n\n## Usage\n\nSome
  of the features in Shh require that you use the threaded runtime.\nPlease compile
  with the `-threaded` flag to avoid deadlocks.\n\nEnable Template Haskell and load
  the environment. It is also strongly\nrecommended to use `ExtendedDefaultRules`.
  This is especially important\nif you want to use `OverloadedStrings`.\n\n    {-#
  LANGUAGE TemplateHaskell #-}\n    {-# LANGUAGE ExtendedDefaultRules #-}\n    $(loadEnv
  SearchPath)\n\nYou now have all your executables available as simple Haskell\nfunctions.
  If you don't want to load your entire environment you\ncan load specific commands
  directly:\n\n    load SearchPath [\"echo\", \"grep\", \"cat\", \"ls\"]\n\nIf you
  want to check that all the dependencies still exist, you can use\n`missingExecutables
  :: IO [String]`, which will tell you if anything is\nmissing.\n\nFor use in a project,
  it makes sense to have a dedicated module for your\nproject which does the template
  Haskell above. This will prevent recompilation\nof all the executables, and also
  allow you to easily namespace them to\navoid collisions with normal Haskell functions.\n\n###
  Usage in GHCi\n\nIf you want `^D` to be recognised as a EOF marker (when running
  commands\nthat read from stdin) when running in GHCi, you will need to run the\n`initInteractive`
  function. This sets the line buffering appropriately and\nensures the terminal is
  in canonical mode.\n\n### Shh as a Shell\n\nThere is a tool called `shh` which is
  a fairly small wrapper around launching\nGHCi which automatically loads your environment
  and allows you to have custom\nconfig when using GHCi as a shell.\n\nTo install
  it, one option is to use `cabal new-install`\n\n```bash\ncabal new-install --lib
  shh\ncabal new-install --lib shh-extras\n```\n\nThe `shh` binary will look in your
  `$SHH_DIR` (defaults to `$HOME/.shh`) for\na `Shell.hs`, `init.ghci` and `wrapper`
  files. If these don't exist default\nones will be created.\n\nThe `Shell.hs` file
  should contain any top level definitions that you would\nlike to be available in
  your Shell. By default it loads your environment.\n\nThe `init.ghci` file is loaded
  by GHCi after your `.ghci` files. This lets\nyou specify settings that you want
  to take effect when using GHCi as a shell.\nBy default it sets a shell-like prompt.\n\nThe
  `wrapper` file is an executable that is called with the command that is\nto be executed.
  By default it just calls `exec` with the arguments passed to\nit. The use-case for
  this is to be able to set up the environment for `shh`.\nYou might, for example,
  wrap the execution in a `nix-shell`. Either way,\nit is up to you to make sure that
  the compiler, and packages you require are\navailable, either globally, or provided
  by the `wrapper` script.\n\n#### Faster Startup\n\n`shh` precompiles your `Shell.hs`
  file so that starting up `shh` is very\nquick on subsequent launches. Unfortunately,
  `shh` isn't quite able to detect\nthis perfectly. If you see GHCi telling you that
  it is `Compiling Shell`,\nand you notice the delay when starting `shh`, try manually
  forcing a rebuild\nby passing in the `--rebuild` argument to `shh`.\n\nThis is particularly
  likely to happen if you upgrade your GHC, or installed\npackages, or even `shh`
  itself.\n\n#### Nix Wrapper Example\n\nThe following snippet could act as a `wrapper`
  file to set up a suitable\nenvironment using `nix-shell`\n\n    #! /usr/bin/env
  nix-shell\n    #! nix-shell -i bash -p \"(haskellPackages.ghcWithPackages (p: with
  p; [shh shh-extras]))\"\n    exec \"$@\"\n\n### Script Usage\n\n#### Nix\n\nNixpkgs
  provides a `writeHaskellBin` function which is very convenient for\nwriting quick
  scripts for your Nix setup.\n\n```nix\nwriters.writeHaskellBin \"example\" {libraries
  = [haskellPackages.shh];} ''\n  {-# LANGUAGE TemplateHaskell #-}\n  import Shh\n\n
  \ -- Load binaries from Nix packages. The dependencies will be captured\n  -- in
  the closure.\n  loadFromBins [\"${git}\", \"${coreutils}\", \"${curl}\"]\n\n  main
  :: IO ()\n  main = do\n    cat \"/a/file\"\n    cp \"/a/file\" \"/b/file\"\n''\n```\n\n##
  Alternatives\n\nThere are quite a few players in the \"shell programming for Haskell\"
  field.\n\nThis table attempts to summarise some of the differences.\n\n * `Pipe
  Style` refers to how processes are joined together, \"native\" means\n   that the
  mechanisms provided by the OS are used, while \"via Haskell\" means\n   that the
  data is read into the Haskell process, and then written into the\n   subprocess.\n
  * `Via Shell` refers to whether subprocesses are launched directly or via\n   a
  shell (which can provide a \"native\" piping solution at the cost of\n   composability)\n
  * `Run in IO` refers to whether commands need to be prefixed with `run` or\n   similar
  functions to actually execute them.\n * `TH Helper` refers to whether the use of
  TH to generate Haskell functions\n   based on commands found at compile time is
  encouraged in the main library.\n * `Monadic Subshell` refers to the ability to
  join multiple processes together\n   and feed them all from the same input and to
  the same output.\n   `echo a | (cat; echo b) | wc -l` should report that 2 lines
  appeared.\n\n\n| Library | Pipe Style  | Via Shell | Run in IO | Threadsafe `cd`
  | TH Helper | Monadic Subshell | Redirect `stderr` |\n|---------|-------------|-----------|-----------|-----------------|-----------|------------------|-------------------|\n|
  Shh     | Native      | No        | Yes       | No              | Yes       | Yes
  \             | Yes               |\n| Shelly  | Via Haskell | Yes       | No        |
  Yes             | No        | No               | Yes               |\n| Turtle  |
  Via Haskell | Optional  | No        | ?               | No        | No (Alternative)
  | Yes               |\n| shell-conduit | Via Haskell | Optional | No   | ?               |
  Yes       | Yes              | No?               |\n\n\n### Errors\n\n| Library
  | Exception on non-zero | Contains arguments | Contains `stderr` | Terminates pipeline
  |\n|---------|-----------------------|--------------------|-------------------|---------------------|\n|
  Shh     | Yes                   | Yes                | Optional          | Yes                 |\n|
  Shelly  | Yes                   | Yes                | Yes               | Yes                 |\n|
  Turtle  | Sometimes             | No                 | No                | ?                   |\n|
  shell-conduit | Yes             | Yes                | No                | No                  |\n\n"
description-type: markdown
hash: 38ee0901245cd6240c3be3be4dff3a1f9544c8bae0cc9a8636beed3a15ce75c7
homepage: ''
latest: 0.7.3.0
license-name: BSD-3-Clause
maintainer: lukec@themk.net
synopsis: Simple shell scripting from Haskell
test-bench-deps:
  PyF: '>=0'
  async: '>=0'
  base: '>=4.9'
  bytestring: '>=0'
  directory: '>=0'
  filepath: '>=0'
  shh: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  utf8-string: '>=0'
