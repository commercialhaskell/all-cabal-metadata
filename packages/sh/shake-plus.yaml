all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.4.1
- 0.1.5.0
- 0.1.6.0
- 0.1.7.0
- 0.1.8.0
- 0.1.9.0
- 0.1.10.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.3.3.1
- 0.3.4.0
author: Daniel Firth
basic-deps:
  base: '>=4.7 && <5'
  extra: '>=0'
  path: '>=0'
  rio: '>=0'
  shake: '>=0'
changelog: |
  # Changelog for shake-plus

  ## v0.3.4.0

  * Fix for GHC 9's simplified subsumption change.

  ## v0.3.3.0

  * Re-export `RuleResult` and `ShakeValue`.

  ## v0.3.2.0

  * Re-export `Development.Shake.Forward`.

  ## v0.3.1.0

  * Remove unnecessary comonad dependency.

  ## v0.3.0.0

  * Drop dependency on path-like.
  * Drop dependency on within.
  * Drop `Development.Shake.Plus.Loaders` module.
  * Restore monomorphic `Path` variants of everything.
  * Move `within` style combinators to [shake-plus-extended](https://hackage.haskell.org/package/shake-plus-extended).

  ## v0.2.0.0

  * Add dependency on [path-like](https://hackage.haskell.org/package/path-like).
  * Update interface to use `FileLike` and `DirLike` and drop `Path` and `Within` specific variants.

  ## v0.1.10.0

  * Add unlifted versions of `parallel`, `forP` and `par`.

  ## v0.1.9.0

  * Add lower bound to aeson.
  * Remove hashable dependency.

  ## v0.1.8.0

  * Reexport `Development.Shake.Classes` and `Development.Shake.RuleResult`.

  ## v0.1.7.0

  * Add `runSimpleShakePlus` for quickrunning with args and a log function.

  ## v0.1.6.0

  * Re-export `Path` and `Within`.

  ## v0.1.5.0

  * Add `getDirectoryFilesWithinIO` and `getDirectoryFilesWithinIO'`

  ## v0.1.4.0

  * Re-export `Development.Shake.shakeArgs`.

  ## v0.1.3.0

  * Re-export `Development.Shake.Command` with lifted `command` and `command_`.

  ## v0.1.2.0

  * Add `copyFileWithin'` and `copyFileChangedWithin`.

  ## v0.1.1.0

  * Make `Within` style functions more consistent in that they actually take `Within` values
    across the board.
  * Make `batchLoad` functions more consistent and usable.
  * `need` and `want` variants now take any `Traversable`.

  ## v0.1.0.0

  * Update to `within-0.1.1.0` which changes the data type to an `Env` comonad.
  * Drop the `loadSortFilterApply` loader functions in favour of a simpler
    `batchLoad` set of functions which accepts a loading function which can be
    cached.
  * Add enough documentation to get started.

  ## v0.0.2.1

  * Add functions based on [Within](https://hackage.haskell.org/package/path) to better
    keep track of source and target directories.
  * Reexport more shake functions to remove need to import vanilla shake qualified.
  * Add convenience functions `loadSortFilterApply` and `loadSortFilterApplyW` for batch
    loading via `MonadAction`.
  * Add more of the API surface with `Path` and `Within` including variants of `need`, `want`
    `readFile`, `writeFile`.

  ## v0.0.1.0

  * Initial sketch of shake-plus with reexported functions. Mostly oracles,
    filepaths and directory functions using
    [Path](https://hackage.haskell.org/package/path), and `MonadAction`,
    `MonadUnliftAction` and `MonadRules` with `ReaderT` transformers in a similar
    style to [RIO](https://hackage.haskell.org/package/rio)
changelog-type: markdown
description: |
  # Shake+ - Super Powered Shake

  Attempt at a batteries included Shake. We reexport replacements for the main
  utility functions of Shake with the following adjustments whereever possible.

  * Well-typed paths using the [path](https://hackage.haskell.org/package/path)
    library.
  * New type classes `MonadAction`, `MonadUnliftAction` and `MonadRules` with
    concrete `ReaderT` transformers:
    * `RAction r a = RAction (ReaderT r Action a)` and
    * `ShakePlus r a = ShakePlus (ReaderT r Rules a)`
  * `Text` instead of `String` wherever it is appropriate.

  ## Paths

  Using the [path](https://hackage.haskell.org/package/path) library is kind of a
  no brainer. I lose a lot of time to problems that could be avoided by using
  this library, so it's everywhere. The names for these functions shadow the
  existing names, so you may want to `import qualified Development.Shake` while
  this library progresses if you have other `FilePath` based Shake rules that
  you want to mix into your build.

  The standard `Development.Shake.FilePath` functions for directory manipulation
  are not re-exported in full, and you should use the functions in the path
  library (such as `replaceExtension`) and other path-based libraries. This will
  probably change.

  `FilePattern`s are kept as-is, as `Path` is strongly normalizing it makes
  sense to keep these as `Strings`.

  ## RAction

  The `ReaderT r Action a` transformer (called `RAction`) is similar to the
  [RIO](https://hackage.haskell.org/package/rio) type and should be used
  similarly. In fact, you can reuse the logging functions from `RIO` within any
  `RAction` block, which is one of the main motivators for having an `Action`
  which is also a `MonadReader`. If you need to reuse an existing shake
  `Action` in an `RAction`, use `liftAction`.

  ## runShakePlus

  The main entry point to this library is the `runShakePlus` function, which
  collapses a `ReaderT r Rules ()` to a `Rules ()` and passes the environment to
  each underlying `RAction`. The `r`s in `ShakePlus` and the underlying
  `RAction`s have to match. A typical setup might look like this.

  ```{.haskell}
  let r = --setup env here
  shake shakeOptions $ do

      -- include some regular shake rules.

      runShakePlus r $ do

        -- some shake-plus rules.
  ```
description-type: markdown
hash: 3a0815ba4775c148045620ba0165676d484c125f0090a6211eeae7a7c810e2ab
homepage: ''
latest: 0.3.4.0
license-name: MIT
maintainer: dan.firth@homotopic.tech
synopsis: Re-export of Shake using well-typed paths and ReaderT.
test-bench-deps: {}
