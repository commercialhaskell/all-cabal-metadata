all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.3.0
- 0.1.3.1
- 0.1.3.2
- 0.1.4.0
author: Patrick Brisbin
basic-deps:
  base: '>=4.18.2.1 && <5'
  megaparsec: '>=9.5.0'
  text: '>=2.0.2'
changelog: |
  ## [*Unreleased*](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.4.0...main)

  ## [v0.1.4.0](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.3.2...v0.1.4.0)

  - Add `quote` and `join` ([@999years](https://github.com/pbrisbin/hs-shellwords/pull/11))

  ## [v0.1.3.2](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.3.1...v0.1.3.2)

  - Fix bugs around `=` handling, adjacent strings, and escaped-backslash

  ## [v0.1.3.1](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.3.0...v0.1.3.1)

  - Fix incorrect lower bound on `base`

  ## [v0.1.3.0](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.2.1...v0.1.3.0)

  - Define reserved characters, to enable delimited parsing `$(<words)`
  - Export `Parser`-related functions, to enable incorporating in a larger parser

  ## [v0.1.2.1](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.2.0...v0.1.2.1)

  - Strip surrounding whitespace before parsing
  - Fix mis-handling of escaped spaces in certain kinds of flags

  ## [v0.1.2.0](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.1.0...v0.1.2.0)

  - `parse` works on `String` now, use `parseText` for the `Text` interface

  ## [v0.1.1.0](https://github.com/pbrisbin/hs-shellwords/compare/v0.1.0.0...v0.1.1.0)

  - Bugfixes that I can't remember

  ## [v0.1.0.0](https://github.com/pbrisbin/hs-shellwords/tree/v0.1.0.0)

  First released version.
changelog-type: markdown
description: |
  # ShellWords

  [![Hackage](https://img.shields.io/hackage/v/shellwords.svg?style=flat)](https://hackage.haskell.org/package/shellwords)
  [![Stackage Nightly](http://stackage.org/package/shellwords/badge/nightly)](http://stackage.org/nightly/package/shellwords)
  [![Stackage LTS](http://stackage.org/package/shellwords/badge/lts)](http://stackage.org/lts/package/shellwords)
  [![CI](https://github.com/pbrisbin/hs-shellwords/actions/workflows/ci.yml/badge.svg)](https://github.com/pbrisbin/hs-shellwords/actions/workflows/ci.yml)

  Parse a string into words, like a shell would.

  ## Motivation

  If you want to execute a specific command with input given to you from an
  untrusted source, you should not give that text as-is to a shell:

  ```hs
  let userInput = "push origin main"

  callCommand $ "git " <> userInput
  -- Forward output of the push command...
  ```

  You may be tempted to do this because you want to correctly handle quoting and
  other notoriously-difficult word-splitting problems. But doing so is a severe
  security vulnerability:

  ```hs
  let userInput = "push origin main; cat /etc/passwd"

  callCommand $ "git " <> userInput
  -- Forward output of the push command...
  -- And then dump /etc/passwd. Oops.
  ```

  Furthermore, any attempts to sanitize the string are unlikely to be 100%
  affective and should be avoided. The only safe way to do this is to not use a
  shell intermediary, and always `exec` a process directly:

  ```hs
  let userInput = "push origin main"

  callProcess "git" $ words userInput
  -- Forward output of the push command...
  ```

  Now, there's no vulnerability:

  ```hs
  let userInput = "push origin main; cat /etc/passwd"

  callProcess "git" $ words userInput
  -- Invalid usage. :)
  ```

  The new problem (but not a security-related one!) is how to correctly parse a
  string like `"push origin main"` into command arguments. The rules are complex
  enough that you probably want to get a library to do it.

  So here we are.

  ## Example

  ```hs
  Right args <- parse "some -complex --command=\"Line And\" 'More'"

  callProcess cmd args
  --
  -- Is equivalent to:
  --
  -- > callProcess cmd ["some", "-complex", "--command=Line And", "More"]
  --
  ```

  ## Unsafe Usage

  The following is a perfectly reasonable thing one might do with this library:

  ```hs
  Right (cmd:args) <- parse userInput

  callProcess cmd args
  ```

  However, if:

  1. `userInput` is un-trusted, and
  1. You do no further validation of what `cmd` can be,

  Then this re-introduces the original security vulnerability and, at that point,
  you might as well just pass `userInput` to a shell.

  ## Lineage

  This package is inspired by and named after

  - [`python-shellwords`][python-shellwords], which was itself inspired by
  - [`go-shellwords`][go-shellwords], which was itself inspired by
  - [`Parser::CommandLine`][parser-commandline]

  [python-shellwords]: https://github.com/mozillazg/python-shellwords
  [go-shellwords]: https://github.com/mattn/go-shellwords
  [parser-commandline]: https://github.com/Songmu/p5-Parse-CommandLine

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
description-type: markdown
hash: b5d67ee434d0e738daa5e288595cc18d48c08e8e2ec616e5c303f1a4a27bc72a
homepage: https://github.com/pbrisbin/hs-shellwords#readme
latest: 0.1.4.0
license-name: MIT
maintainer: pbrisbin@gmail.com
synopsis: Parse strings into words, like a shell would
test-bench-deps:
  base: '>=4.18.2.1 && <5'
  hspec: '>=2.11.9'
  megaparsec: '>=9.5.0'
  shellwords: '>=0'
