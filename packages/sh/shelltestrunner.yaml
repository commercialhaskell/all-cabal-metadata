homepage: https://github.com/simonmichael/shelltestrunner
changelog-type: text
hash: 117ca45b3e37b21f4e341e2df764ba4f461229d45270bc0d13917a5e4c7dc87d
test-bench-deps: {}
maintainer: Simon Michael <simon@joyful.com>
synopsis: Easy, repeatable testing of CLI programs/commands
changelog: |
  1.10 (2023-09-12)

  User-visible changes:

  * GHC 9.6 compatibility (Andreas Abel)
  * Add --print for printing tests and/or converting file format (#24, Jakob Schöttl)
  * Print test line number on failure (#14, Taavi Väljaots)
  * Add --shell option to select shell (#17, FC Stegerman)
  * Fix format1's handling of angle brackets in test data (#16)
  * Add -p short flag for --precise
  * -h means --help, not --hide-successes
  * Clarify 300 char regex limit message

  Other:

  * Set up CI testing (#18 FC Stegerman, Simon Michael)
  * Improve bash-related tests (#20, FC Stegerman, Simon Michael)
  * Improved tests

  1.9 (2018/1/14)

  * two new test file formats have been added, allowing input re-use and lighter syntax
  * new -l/--list flag lists the tests found
  * new -D/--defmacro option allows text substitution (Taavi Valjaots)
  * new --xmlout option saves test results as xml (Taavi Valjaots)
  * tests with Windows line endings now also work on unix (Taavi Valjaots)
  * shelltestrunner's tests should now pass on Windows (Taavi Valjaots)
  * flags formerly passed through to test-framework are now built in
  * >>>= with nothing after it now matches any exit status
  * failure messages now show the test command (John Chee)
  * include shelltestrunner's tests in cabal sdist archive (Iustin Pop)
  * build with latest deps and stackage resolvers
  * process dep update (Andrés Sicard-Ramírez)
  * shelltestrunner's code and home page have moved to github

  1.3.5 (2015/3/30)

  * fix Applicative warning with ghc 7.10
  * allow utf8-string <1.1

  1.3.4 (2014/5/28)

  * drop cabal-file-th, support GHC 7.8.2

  1.3.3 (2014/5/25)

  * allow process 1.2, regex-tdfa-1.2
  * add a hackage-compatible changelog

  1.3.2 (2013/11/13)

  * increase upper bound on Diff package

  1.3.1 (2012/12/28)

  * fix cabal file typo breaking the build

  1.3 (2012/12/28)

  * support latest Diff, cmdargs, test-framework; tested with GHC 7.6.1 (Magnus Therning)

  * fix unicode handling on GHC >= 7.2

  1.2.1 (2012/3/12)

  * use the more up-to-date filemanip package for easier Debian packaging

  1.2 (2012/2/26)

  * support latest cmdargs, test-framework, and GHC 7.4
  * more readable non-quoted failure output by default; for quoted output, use -p/--precise
  * the --all, --diff and --precise options now interact well

  1.1 (2011/8/25)

  * bump process dependency to allow building with GHC 7.2.1
  * new -a/--all flag shows all failure output without truncating

  1.0 (2011/7/23)

  * New home page/docs
  * The >>>= field is now required; you may need to add it to your existing tests
  * Input and expected output can now contain lines beginning with #
  * Multiple tests in a file may now have whitespace between them
  * The -i/--implicit option has been dropped
  * New -d/--diff option shows test failures as a unified diff when possible, including line numbers to help locate the problem
  * New -x/--exclude option skips certain test files (eg platform-specific ones)
  * Passing arguments through to test-framework is now more robust
  * Fixed: parsing could fail when input contained left angle brackets
  * Fixed: some test files generated an extra blank test at the end

  0.9 (2010/9/3)

  * show plain non-ansi output by default, add --color option
  * better handling of non-ascii test data. We assume that non-ascii file
    paths, command-line arguments etc. are UTF-8 encoded on unix systems
    (cf http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html),
    and that GHC 6.12 or greater is used. Then:
    - non-ascii test file paths should render correctly, eg in failure messages
    - non-ascii test commands should run correctly
    - non-ascii expected output should match correctly
    - non-ascii regular expressions should match correctly. (Caveat: not
      thoroughly tested, this may break certain regexps, )
  * use regex-tdfa instead of pcre-light for better windows compatibility
    To avoid a memory leak in current regex-tdfa, only regular expressions
    up to 300 characters in size are supported. Also, DOTALL is no longer
    enabled and probably fewer regexp constructs are supported.  There are
    still issues on windows/wine but in theory this will help.
  * tighten up dependencies

  0.8 (2010/4/9)

  * rename executable to shelltest. The package might also be renamed at some point.
  * better built-in help
  * shell tests now include a full command line, making them more readable
    and self-contained. The --with option can be used to replace the first
    word with something else, unless the test command line begins with a
    space.
  * we also accept directory arguments, searching for test files below
    them, with two new options:
      --execdir        execute tested command in same directory as test file
      --extension=EXT  file extension of test files (default=.test)

  0.7 (2010/3/5)

  * more robust parsing
    - --debug-parse parses test files and stops
    - regexps now support escaped forward slash (\/)
    - bad regexps now fail at startup
    - command-line arguments are required in a test, and may be blank
    - a >>>= is no longer required to separate multiple tests in a file
    - comments can be appended to delimiter lines
    - comments can appear at end of file
    - files need not have a final newline
    - files containing nothing, all comments, or valid tests are allowed; anything else is rejected
    - somewhat better errors
    - allow indented input
  * support negative (-) and negatively-matched (!) numeric exit codes
  * let . in regexps match newline
  * warn but continue when a test file fails to parse
  * output cleanups, trim large output
  * more flexible --implicit flag
  * switch to the more robust and faster pcre-light regexp lib

  0.6 (2009/7/15)

  * allow multiple tests per file, handle bad executable better

  0.5 (2009/7/14)

  * show failure output in proper order

  0.4 (2009/7/14)

  * run commands in a more robust way to avoid hangs
    This fixes hanging when a command generates large output, and hopefully
    all other deadlocks. The output is consumed strictly. Thanks to Ganesh
    Sittampalam for his help with this.
  * --implicit-tests flag providing implicit tests for omitted fields
  * --debug flag
  * regular expression matching
  * disallow interspersed foreign options which confused parseargs
  * change comment character to #

  0.3 (2009/7/11)

  * misc. bugfixes/improvements

  0.2 (2009/7/10)

  * bugfix, build with -threaded

  0.1 (2009/7/10)

  * shelltestrunner, a generic shell command stdout/stderr/exit status tester
basic-deps:
  test-framework-hunit: '>=0.2'
  hspec-contrib: '>=0.5.1.1'
  test-framework: '>=0.3.2'
  filemanip: '>=0.3'
  base: '>=4 && <5'
  Diff: '>=0.2.0'
  hspec: '>=2.9.0'
  hspec-core: '>=2.9.0'
  filepath: '>=1.0'
  process: -any
  parsec: -any
  HUnit: -any
  utf8-string: '>=0.3.5'
  regex-tdfa: '>=1.1'
  cmdargs: '>=0.7'
  pretty-show: '>=1.6.5'
  safe: -any
  directory: '>=1.0'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- '0.9'
- '1.0'
- '1.1'
- '1.2'
- 1.2.1
- '1.3'
- 1.3.1
- 1.3.2
- 1.3.3
- 1.3.4
- 1.3.5
- '1.9'
- 1.9.0.1
- '1.10'
author: Simon Michael <simon@joyful.com>
latest: '1.10'
description-type: markdown
description: "<div align=center>\n<h1 style=\"margin:0;\">Easy, repeatable testing
  of CLI programs/commands</h1>\n<img src=\"site/title2.png\">\n\n  [Install](#install)\n|
  [Usage](#usage)\n| [Options](#options)\n| [Test formats](#test-formats)\n| [Support/Contribute](#supportcontribute)\n|
  [Credits](#credits)\n</div>\n\n**shelltestrunner** (executable: `shelltest`) is
  a portable\ncommand-line tool for testing command-line programs, or general shell\ncommands,
  released under GPLv3+.  It reads simple test specifications\ndefining a command
  to run, some input, and the expected output,\nstderr, and exit status.  It can run
  tests in parallel, selectively,\nwith a timeout, in color, etc. \n\n## Install\n\nThere
  may be a new-enough \n[packaged version](https://repology.org/metapackage/shelltestrunner/badges)\non
  your platform. Eg:\n\n|||\n|----------------|---------------------------------------\n|
  Debian/Ubuntu: | **`apt install shelltestrunner`**\n| Gentoo:        | **`emerge
  shelltestrunner`**\n\nOr, build the latest release on any major platform:\n\n|||\n|----------------|---------------------------------------\n|
  stack:         | **[get stack](https://docs.haskellstack.org)**, **`stack install
  shelltestrunner-1.10`**\n| cabal:         | **`cabal update; cabal install shelltestrunner-1.10`**\n\n##
  Usage\n\nHere's a test file containing three simple tests.\nThey're called \"shell
  tests\" because any shell command line can be tested.\nA test contains:\n\n- `<`
  and one or more lines of input to be provided on stdin (optional)\n- `$` and the
  command line to test (required)\n- zero or more lines of expected stdout output,
  or a regexp (optional)\n- `>2` and zero or more lines of expected stderr output,
  or a regexp (optional)\n- `>=` and an expected exit code, or a regexp (optional)\n\n<!--
  keep synced with tests/examples -->\n```\n# 1. Test that the \"echo\" command (a
  shell builtin, usually)\n# prints its argument on stdout, prints nothing on stderr,\n#
  and exits with a zero exit code.\n\n$ echo a\na\n\n# 2. Test that echo with no arguments
  prints a blank line,\n# no stderr output, and exits with zero.\n# Since the output
  ends with whitespace, this time we must write\n# the exit code test (>=) explicitly,
  to act as a delimiter.\n\n$ echo\n\n>=\n\n# 3. Test that cat with a bad flag prints
  nothing on stdout,\n# an error containing \"unrecognized option\" or \"illegal option\"
  on stderr,\n# and exits with non-zero status.\n\n$ cat --no-such-flag\n>2 /(unrecognized|illegal)
  option/\n>= !0\n\n```\n\nTo run these tests:\n\n```\n$ shelltest examples.test\n:examples.test:1:
  [OK]\n:examples.test:2: [OK]\n:examples.test:3: [OK]\n\n         Test Cases  Total
  \n Passed  3           3     \n Failed  0           0     \n Total   3           3
  \    \n```\n\nThat's the basics! \nThere are also some alternate test formats you'll
  read about below.\n\n## Options\n\n<!-- shelltest --help | sed -e '/^shelltest file
  formats/,$d' -->\n```\nshelltest 1.10\n\nshelltest [OPTIONS] [TESTFILES|TESTDIRS]\n\nCommon
  flags:\n  -l --list             List the names of all tests found\n  -i --include=PAT
  \     Include tests whose name contains this glob pattern\n                        (eg:
  -i1 -i{4,5,6})\n  -x --exclude=STR      Exclude test files whose path contains STR\n
  \ -a --all              Show all output without truncating, even if large\n  -c
  --color            Show colored output if your terminal supports it\n  -d --diff
  \            Show differences between expected/actual output\n  -p --precise          Show
  expected/actual output precisely, with quoting\n     --hide-successes   Show only
  test failures\n  -f --fail-fast        Only hspec: stop tests on first failure\n
  \    --xmlout=FILE      Save test results to FILE in XML format.\n  -D --defmacro=D=DEF
  \  Define a macro D to be replaced by DEF while parsing\n                        test
  files.\n     --execdir          Run tests from within each test file's directory\n
  \    --extension=EXT    File suffix of test files (default: .test)\n  -w --with=EXE
  \        Replace the first word of test commands with EXE\n                        (unindented
  commands only)\n  -o --timeout=SECS     Number of seconds a test may run (default:
  no limit)\n  -j --threads=N        Number of threads for running tests (default:
  1)\n     --shell=EXE        The shell program to use (must accept -c CMD;\n                        default:
  /bin/sh on POSIX, cmd.exe on Windows)\n     --debug            Show debug info while
  running\n     --debug-parse      Show test file parsing results and stop\nPrint
  test file:\n     --print[=FORMAT]   Print test files in specified format (default:
  v3).\n     --hspec            Use hspec to run tests.\n  -h --help             Display
  help message\n  -V --version          Print version information\n     --numeric-version
  \ Print just the version number\n\n```\n    \n`shelltest` accepts one or more test
  file or directory arguments.\nA directory means all files below it named `*.test`
  (customisable with `--extension`).\n\nBy default, test commands are run with `/bin/sh`
  on POSIX systems\nand with `CMD` on Windows; you can change this with the `--shell`
  option.\n\nBy default, tests run in the directory in which you ran `shelltest`;\nwith
  `--execdir` they will run in each test file's directory instead.\n\n`--include`
  selects only tests whose name (file name plus intra-file sequence number) matches
  a\n[.gitignore-style pattern](https://batterseapower.github.io/test-framework#the-console-test-runner),\nwhile
  `--exclude` skips tests based on their file path.\nThese can be used eg to focus
  on a particular test, or to skip tests intended for a different platform.\n\n`-D/--defmacro`
  defines a macro that is replaced by preprocessor before any tests are parsed and
  run.\n\n`-w/--with` replaces the first word of all test commands with something\nelse,
  which can be useful for testing alternate versions of a\nprogram. Commands which
  have been prefixed by an extra space will\nnot be affected by this option.\n\n`--hide-successes`
  gives quieter output, reporting only failed tests.\n\nLong flags can be abbreviated
  to a unique prefix.\n \n\nFor example, the command:\n\n    $ shelltest tests -i
  args -c -j8 -o1 -DCONF_FILE=test/myconf.cfq --hide\n\n- runs the tests defined in
  any `*.test` file in or below the `tests/` directory\n- whose names contain \"`args`\"\n-
  in colour if possible\n- with up to 8 tests running in parallel\n- allowing no more
  than 1 second for each test\n- replacing the text \"`CONF_FILE`\" in all tests with
  \"`test/myconf.cfq`\"\n- reporting only the failures.\n\n## Test formats\n\nshelltestrunner
  supports three test file formats:\n\n| Format name           | Description                                                   |
  Delimiters, in order       |\n|-----------------------|---------------------------------------------------------------|----------------------------|\n|
  format 1 (deprecated) | command is first; exit status is required                     |
  `(none) <<< >>> >>>2 >>>=` |\n| format 2 (verbose)    | input is first, can be reused;
  all but command can be omitted | `<<<    $$$ >>> >>>2 >>>=` |\n| format 3 (preferred)
  \ | same as format 2 but with short delimiters                    | `<      $   >
  \  >2   >=`   |\n\nTo read each file, shelltestrunner tries the formats in this
  order: format 2, then format 3, then format 1.\nWithin a file, all tests should
  use the same format.\n\nHere are the formats in detail, from oldest to newest.\nYou
  should use format 3; or if that clashes with your data, then format 2.\n\n### Format
  1\n\nThis old format is included for backward compatibility with old tests.\n\nTest
  files contain one or more individual tests, each consisting of a\none-line shell
  command, optional input, expected standard output\nand/or error output, and a (required)
  exit status.\n\n    # COMMENTS OR BLANK LINES\n    COMMAND LINE\n    <<<\n    INPUT\n
  \   >>>\n    EXPECTED OUTPUT (OR >>> /REGEXP/)\n    >>>2\n    EXPECTED STDERR (OR
  >>>2 /REGEXP/)\n    >>>= EXPECTED EXIT STATUS (OR >>>= /REGEXP/)\n\nWhen not specified,
  stdout/stderr are ignored.\nA space before the command protects it from -w/--with.\n\nExamples:
  \n[shelltestrunner](https://github.com/simonmichael/shelltestrunner/tree/master/tests/format1),\n[Agda](https://github.com/agda/agda/tree/master/src/size-solver/test),\n[berp](https://github.com/bjpop/berp/tree/master/test/regression),\n[cblrepo](https://github.com/magthe/cblrepo/tree/master/tests).\n\n###
  Format 2\n\nThis is supported by shelltestrunner 1.9+. \nIt improves on format 1
  in two ways: it allows tests to reuse the same input,\nand it allows delimiters/test
  clauses to be omitted, with more useful defaults.\n\nTest files contain one or more
  test groups. \nA test group consists of some optional standard input and one or
  more tests.\nEach test is a one-line shell command followed by optional expected
  standard output, \nerror output and/or numeric exit status, separated by delimiters.\n\n
  \   # COMMENTS OR BLANK LINES\n    <<<\n    INPUT\n    $$$ COMMAND LINE\n    >>>\n
  \   EXPECTED OUTPUT (OR >>> /REGEX/)\n    >>>2\n    EXPECTED STDERR (OR >>>2 /REGEX/)\n
  \   >>>= EXPECTED EXIT STATUS (OR >>>= /REGEX/ OR >>>=)\n    # COMMENTS OR BLANK
  LINES\n    ADDITIONAL TESTS FOR THIS INPUT\n    ADDITIONAL TEST GROUPS WITH DIFFERENT
  INPUT\n\nAll test parts are optional except the command line.\nIf not specified,
  stdout and stderr are expected to be empty\nand exit status is expected to be zero.\n\nTwo
  spaces between `$$$` and the command protects it from -w/--with.\n\nThe `<<<` delimiter
  is optional for the first input in a file.\nWithout it, input begins at the first
  non-blank/comment line.\nInput ends at the `$$$` delimiter. You can't put a comment
  before the first `$$$`.\n\nThe `>>>` delimiter is optional except when matching
  via regex.\nExpected output/stderr extends to the next `>>>2` or `>>>=` if present,\nor
  to the last non-blank/comment line before the next `<<<` or `$$$` or file end.\n`/REGEX/`
  regular expression patterns may be used instead of\nspecifying the expected output
  in full. The regex syntax is\n[regex-tdfa](https://hackage.haskell.org/package/regex-tdfa)'s,
  plus\nyou can put `!` before `/REGEX/` to negate the match.\n\nThe [exit status](https://en.wikipedia.org/wiki/Exit_status)
  is a\nnumber, normally 0 for a successful exit.  This too can be prefixed\nwith
  `!` to negate the match, or you can use a `/REGEX/` pattern.\nA `>>>=` with nothing
  after it ignores the exit status.\n\nExamples: <!-- keep synced with tests/examples
  -->\n\nAll delimiters explicit:\n\n    # cat copies its input to stdout\n    <<<\n
  \   foo\n    $$$ cat\n    >>>\n    foo\n\n    # or, given a bad flag, prints a platform-specific
  error and exits with non-zero status\n    $$$ cat --no-such-flag\n    >>>2 /(unrecognized|illegal)
  option/\n    >>>= !0\n\n    # echo ignores the input and prints a newline.\n    #
  We need the >>>= (or a >>>2) to delimit the whitespace which\n    # would otherwise
  be ignored.\n    $$$ echo\n    >>>\n\n    >>>=\n\nNon-required `<<<` and `>>>` delimiters
  omitted:\n\n    foo\n    $$$ cat\n    foo\n\n    $$$ cat --no-such-flag\n    >>>2
  /(unrecognized|illegal) option/\n    >>>= !0\n\n    $$$ echo\n\n    >>>=\n\n###
  Format 3\n\nThis is supported by shelltestrunner 1.9+. \nIt is the preferred format
  - like format 2 but with more convenient short delimiters:\n\n    # COMMENTS OR
  BLANK LINES\n    <\n    INPUT\n    $ COMMAND LINE\n    >\n    EXPECTED OUTPUT (OR
  > /REGEX/)\n    >2\n    EXPECTED STDERR (OR >2 /REGEX/)\n    >= EXPECTED EXIT STATUS
  (OR >= /REGEX/ OR >=)\n    # COMMENTS OR BLANK LINES\n    ADDITIONAL TESTS FOR THIS
  INPUT\n    ADDITIONAL TEST GROUPS WITH DIFFERENT INPUT\n\nExamples: <!-- keep synced
  with tests/examples -->\n\nAll delimiters explicit:\n\n    # cat copies its input
  to stdout\n    <\n    foo\n    $ cat\n    >\n    foo\n\n    # or, given a bad flag,
  prints a platform-specific error and exits with non-zero status\n    $ cat --no-such-flag\n
  \   >2 /(unrecognized|illegal) option/\n    >= !0\n\n    # echo ignores the input
  and prints a newline.\n    # We use an explicit >= (or >2) to delimit the whitespace
  which\n    # would otherwise be ignored.\n    $ echo\n    >\n\n    >=\n\nNon-required
  `<` and `>` delimiters omitted:\n\n    foo\n    $ cat\n    foo\n\n    $ cat --no-such-flag\n
  \   >2 /(unrecognized|illegal) option/\n    >= !0\n\n    $ echo\n\n    >2\n\nAlso:\n[above](#usage),\n[shelltestrunner](https://github.com/simonmichael/shelltestrunner/tree/master/tests/format3),\n[hledger](https://github.com/simonmichael/hledger/tree/master/hledger/test).\n\n##
  Printing tests\n\nThe `--print` option prints tests to stdout.\nThis can be used
  to convert between test formats.\nFormat 1, 2, and 3 are supported.\n\nHere are
  some issues to be aware of when converting between formats:\n\n- Printing v1 as
  v2/v3\n  - A `>>>= 0` often gets converted to a `>>>2 //` or `>2 //`, when `>=`
  or nothing would be preferred.\n    This is semantically accurate, because v1 ignores
  out/err by default, and v2/v3 check for zero exit by default,\n    and therefore
  the safest conversion; but it's annoying\n- Printing v3 as v3\n  - loses comments
  at the top of the file, even above an explicit < delimiter\n  - may lose other data\n-
  A missing newline at EOF will not be preserved.\n- v2/v3 allow shared input, but
  v1 does not\n- A file containing only comments may be emptied\n\nIn general, always
  review the result of a conversion yourself before committing it.\n\n## Support/Contribute\n\n|||\n|----------------------|--------------------------------------------------|\n|
  Released version:    | https://hackage.haskell.org/package/shelltestrunner\n| Changelog:
  \          | https://hackage.haskell.org/package/shelltestrunner/changelog\n| Code
  \                | https://github.com/simonmichael/shelltestrunner\n| Issues               |
  https://github.com/simonmichael/shelltestrunner/issues\n| Chat                 |
  Contact sm in the #hledger:matrix.org room on matrix or the #hledger channel on
  libera.chat\n<!-- | Email                | [simon@joyful.com](mailto:simon@joyful.com?subject=[shelltestrunner])
  -->\n\n[2012 user survey](https://docs.google.com/spreadsheet/pub?key=0Au47MrJax8HpdGpZSzdhWHlCUkJpR2hjX1MwMWFoUEE&single=true&gid=3&output=html).\n\nFeedback,
  testing, code, documentation, packaging, blogging, and funding are most welcome.\n\n<div
  id=\"donate-buttons\">\n<a title=\"Donate via Paypal\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=2PLCMR67L4G3E\"><img
  src=\"/site/paypal.gif\" alt=\"Paypal\"></a>\n</div>\n\n## Credits\n\n[Simon Michael](https://joyful.com)
  wrote shelltestrunner,\ninspired by John Wiegley's tests for Ledger.\n\nCode contributors:\nAndreas
  Abel,\nAndrés Sicard-Ramírez,\nBernie Pope,\nFelix C. Stegerman,\nIustin Pop,\nJakob
  Schöttl\nJohn Chee.\nJohn Macfarlane,\nSergei Trofimovich,\nTaavi Väljaots,\nTrygve
  Laugstøl,\n\nshelltestrunner depends on several fine libraries,\nin particular Max
  Bolingbroke's test-framework,\nand of course on the Glorious Haskell Compiler.\n\nThe
  Blade Runner font is by Phil Steinschneider.\n\n<!-- https://www.explore-science-fiction-movies.com/blade-runner-movie-quotes.html
  -->\n"
license-name: LicenseRef-GPL
