all-versions:
- '0.0'
- '0.1'
author: Brandon Simmons
basic-deps:
  base: <5
  proxy-kindness: ==0.1
  tagged: '>=0'
  template-haskell: '>=2 && <3'
changelog: ''
changelog-type: ''
description: "`shapely-data` is a haskell library [up here on hackage](http://hackage.haskell.org/package/shapely-data)\nfor
  working with algebraic datatypes in a simple generic form made up of\nhaskell's
  primitive product, sum and unit types: `(,)`, `Either`, and `()`.\n\nYou can install
  it with\n\n    cabal install shapely-data\n\n# Motivation and examples\n\nIn order
  from most to least important to me, here are the concerns that\nmotivated the library:\n\n-
  Provide a good story for `(,)`/`Either` as a /lingua franca/ generic\n  representation
  that other library writers can use without dependencies,\n  encouraging abstractions
  in terms of products and sums (motivated\n  specifically by my work on\n  [`simple-actors`](http://hackage.haskell.org/package/simple-actors).\n\n-
  Support algebraic operations on ADTs, making types composable\n\n    -- multiplication:\n
  \   let a = (X,(X,(X,())))\n        b = Left (Y,(Y,())) :: Either (Y,(Y,())) (Z,())\n
  \       ab = a >*< b\n     in ab == ( Left (X,(X,(X,(Y,(Y,()))))) \n                ::
  Either (X,(X,(X,(Y,(Y,()))))) (X,(X,(X,(Z,())))) )\n\n    -- exponentiation:\n    fanout
  (head,(tail,(Prelude.length,()))) [1..3]    == (1,([2,3],(3,())))\n    (unfanin
  (_4 `ary` (shiftl . Sh.reverse)) 1 2 3 4) == (3,(2,(1,(4,()))))\n\n- Support powerful,
  typed conversions between `Shapely` types\n\n    data F1 = F1 (Maybe F1) (Maybe
  [Int]) deriving Eq\n    data F2 = F2 (Maybe F2) (Maybe [Int]) deriving Eq\n    f2
  :: F2\n    f2 = coerce (F1 Nothing $ Just [1..3])\n\n    data Tsil a = Snoc (Tsil
  a) a | Lin deriving Eq\n    truth = massage \"123\" == Snoc (Snoc (Snoc Lin '3')
  '2') '1'\n    \nLowest on the list is supporting abstracting over different recursion
  schemes\nor supporting generic traversals and folds, though some basic support is\nplanned.\n\nFinally,
  in at least some cases this can completely replace `GHC.Generics` and\nmay be a
  bit simpler. See `examples/Generics.hs` for an example of the\n[`GHC.Generics` wiki
  example](http://www.haskell.org/haskellwiki/GHC.Generics)\nported to `shapely-data`.
  And for a nice view on the changes that were\nrequired, do:\n\n    git show 3a65e95
  | perl /usr/share/doc/git/contrib/diff-highlight/diff-highlight\n\n\n## Why not
  GHC.Generics?\n\nThe `GHC.Generics` representation has a lot of metadata and a complex\nstructure
  that can be useful in deriving default instances; more important to\nus is to have
  a simple, canonical representation such that two types that\ndiffer only in constructor
  names can be expected to have identical generic\nrepresentations. \n\nThis supports
  APIs that are type-agnostic (e.g. a database library that returns\na generic `Product`,
  convertible later with `to`), and allows us to define\nalgebraic operations and
  composition & conversion functions.\n"
description-type: markdown
hash: 3fdc2c9d9acd667bca525fec90eca6363e76476e96a4ce863c460963639c8c18
homepage: 'http://github.com/jberryman/shapely-data '
latest: '0.1'
license-name: BSD-3-Clause
maintainer: brandon.m.simmons@gmail.com
synopsis: Generics using @(,)@ and @Either@, with algebraic operations and typed conversions
test-bench-deps:
  QuickCheck: '>=2'
  base: <5
  containers: '>=0'
  proxy-kindness: ==0.1
  shapely-data: '>=0'
  tagged: '>=0'
  template-haskell: '>=2 && <3'
