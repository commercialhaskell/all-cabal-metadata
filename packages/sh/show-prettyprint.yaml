all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.2
- 0.1.2.1
- '0.2'
- 0.2.0.1
- 0.2.0.2
- 0.2.1
- 0.2.2
- 0.2.3
- '0.3'
- 0.3.0.1
author: David Luposchainsky <dluposchainsky (λ) google>
basic-deps:
  ansi-wl-pprint: '>=0'
  base: '>=4.8 && <5'
  prettyprinter: '>=1.2'
  trifecta: '>=1.6 && <1.8'
changelog: |
  # 0.3.0.1

  - Fix dependencies of Doctest suite

  # 0.3

  - Fix lists not being prettified at the top level (#6)
  - Fix lists in nested data structures not being aligned (#6)

  # 0.2.3

  - Fix escaping of backslashes (#5)
  - Fix a bug with ambiguous types on newer cabal new-repl runs (#4)

  # 0.2.{1,2}

  Add functions to prettify to `Doc` instead of just supporting `String`,

  ```haskell
  prettifyToDoc :: String -> Doc ann
  prettyShowDoc :: Show a => a -> Doc ann
  ```

  # 0.2.0.1

  Tagged the wrong version as 0.2 on Github. Releasing a new version with an
  updated tag to remedy this.

  # 0.2

  Prettyprint based on the `prettyprinter` library, instead of `ansi-wl-pprint`.
  To support the `Diagnostic` module, the Trifecta-generated `Doc` has to be
  rendered still, so we cannot drop the dependency on ansi-wl-pprint just yet.
changelog-type: markdown
description: |
  Prettyprint `Show` output
  =========================

  Output of nested data structures by `Show` instances is often very hard to read.
  This package offers a simple function to insert line breaks and indentation into
  that ouput so that the semantics are unchanged, but makes it *much* easier to
  read.

  The package does not rely on a parser for actual Haskell; instead, it merely
  reacts on parentheses, commas and the like. This makes it fairly robust even in
  the face of invalid `Show` instances, that may not produce valid Haskell code.



  ## Examples

  ### Artificial

  ```haskell
  Hello Foo ("(Bar", Haha) (Baz (A { foo = C, bar = D, qux = (E,"He)llo World!",G,
      H,[A,B,c,d,e,Fghi]) } ) (B,C) [Baz A1 B2, (Baz A3 (B4)), (Baz A5 (B6)), (Baz
      (A7) B8)]) (Foo) (Bar) (Baz (A) (B))

  ==>

  Hello Foo ("(Bar",Haha)
            (Baz (A {foo = C
                    ,bar = D
                    ,qux = (E
                           ,"He)llo World!"
                           ,G
                           ,H
                           ,[A,B,c,d,e,Fghi])})
                 (B,C)
                 [Baz A1 B2
                 ,(Baz A3 (B4))
                 ,(Baz A5 (B6))
                 ,(Baz (A7) B8)])
            (Foo)
            (Bar)
            (Baz (A) (B))
  ```

  ### Inspired by a real AST

  ```haskell
  Set  (fromList [(Name "A string with (parenthesis",Ann  (Entry (Quality 1 1)
      (Ann  False) (Ann  (Map [Ann  (Bound (Ann  (Id "lorem"))),Ann  (Variable
      (Ann  (Id "ipsum")))])))),(Name "string",Ann  (Entry (Quality 1 1) (Ann
      True) (Ann  (Internal (Ann  (Reduce (Ann  (Id "dolor")) (Ann  (Id "sit")))))
      ))),(Name "Another } here",Ann  (Entry (Quality 1 1) (Ann  (Or [Ann  (Not
      (Ann  (Is (Ann  Flagged) (Ann  Type) (Ann  (Multi [Ann  (Literal (Ann  One))
      ]))))),Ann  (Is (Ann  Flagged) (Ann  Type) (Ann  (Multi [Ann  (Literal (Ann
      Three))]))),Ann  (Is (Ann  Flagged) (Ann  Type) (Ann  (Multi [Ann  (Literal
      (Ann  Two))])))])) (Ann  (Internal (Ann  (Concat (Ann  (Id "amet"))))))))])

  ==>

  Set (fromList [(Name "A string with (parenthesis"
                 ,Ann (Entry (Quality 1 1)
                             (Ann False)
                             (Ann (Map [Ann (Bound (Ann (Id "lorem")))
                                       ,Ann (Variable (Ann (Id "ipsum")))]))))
                ,(Name "string"
                 ,Ann (Entry (Quality 1 1)
                             (Ann True)
                             (Ann (Internal (Ann (Reduce (Ann (Id "dolor"))
                                                         (Ann (Id "sit"))))))))
                ,(Name "Another } here"
                 ,Ann (Entry (Quality 1 1)
                             (Ann (Or [Ann (Not (Ann (Is (Ann Flagged)
                                                         (Ann Type)
                                                         (Ann (Multi [Ann (Literal (Ann One))])))))
                                      ,Ann (Is (Ann Flagged)
                                               (Ann Type)
                                               (Ann (Multi [Ann (Literal (Ann Three))])))
                                      ,Ann (Is (Ann Flagged)
                                               (Ann Type)
                                               (Ann (Multi [Ann (Literal (Ann Two))])))]))
                             (Ann (Internal (Ann (Concat (Ann (Id "amet"))))))))])
  ```
description-type: markdown
hash: faef168f20f3e676abba1964d4a7589aa1accab13c745ecd551cdaa202bbdae9
homepage: https://github.com/quchen/show-prettyprint#readme
latest: 0.3.0.1
license-name: BSD-3-Clause
maintainer: David Luposchainsky <dluposchainsky (λ) google>
synopsis: |-
  Robust prettyprinter for output of auto-generated Show
  instances
test-bench-deps:
  base: '>=0'
  containers: '>=0'
  doctest: '>=0.9'
  prettyprinter: '>=0'
  trifecta: '>=0'
