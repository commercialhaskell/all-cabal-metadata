homepage: https://github.com/icidasset/shikensu#readme
changelog-type: markdown
hash: b3a8ec81fdb5a869fc7d05e24de76d156519f20854decf0a54e4e3a55b86a926
test-bench-deps:
  bytestring: '>=0.10 && <0.12'
  flow: ==1.*
  base: '>=4.9 && <5'
  unordered-containers: ==0.2.*
  text: ==1.*
  filepath: ==1.*
  tasty-hunit: ==0.*
  tasty: ==1.*
  Glob: '>=0.7 && <1'
  aeson: ==2.*
  directory: ==1.*
maintainer: Steven Vandevelde <icid.asset@gmail.com>
synopsis: Run a sequence of functions on in-memory representations of files
changelog: "# Changelog\n\n### v0.4.0\n\nUpdate dependencies, in particular, aeson
  v2.\n\n\n### v0.3.11\n\nAdd CHANGELOG and README to the stack tarball.\n\n### v0.3.10\n\nAdded
  missing test files to the stack tarball.\n\n### v0.3.9\n\nAdjusted version ranges
  for test dependencies.\n\n### v0.3.8\n\n- Update dependencies\n- Add `Shikensu.Contrib.transformContent`
  as an alias for `renderContent`\n- Add `Shikensu.Contrib.setContent`\n\n### v0.3.7\n\n-
  Windows support\n\n### v0.3.6\n\n- Use Stackage Nightly\n\n### v0.3.5\n\n- Fix package.yaml
  file (nothing was exported)\n\n### v0.3.4\n\n- Some light refactoring\n- Types are
  now in an internal module and __re-exported in the main Shikensu module__\n\n###
  v0.3.3\n\n- Rename `(⚡)` and `(⚡⚡)` to `(~>)` and `(!~>)` respectively\n\n### v0.3.2\n\n-
  Fix code in comment \U0001F926‍♂️\n\n### v0.3.1\n\n- Adjust `base` version range
  to fix cabal compile failures on older versions of GHC (pre 7.10)\n\n### v0.3.0\n\n-
  Added `listRelative` and it's flipped relative\n- Updated dependencies\n\n\n###
  v0.2.1\n\n- Fix order of the `list` function parameters\n\n### v0.2.0\n\n- Split
  up `Utilities` to internal and non-internal\n- Add more `Utilities` (sequence utils,
  metadata helpers, etc.)\n- Clean up code\n\n\n### v0.1.3\n\n- Fix `Contrib.prefixDirname`
  which didn't change `pathToRoot` and `parentPath` like it should\n\n### v0.1.2 -
  v0.1.1\n\n- Fix code samples in docs\n\n### v0.1.0\n\n- Initial release \U0001F389\n"
basic-deps:
  bytestring: '>=0.10 && <0.12'
  flow: ==1.*
  base: '>=4.9 && <5'
  unordered-containers: ==0.2.*
  text: ==1.*
  filepath: ==1.*
  Glob: '>=0.7 && <1'
  aeson: ==2.*
  directory: ==1.*
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- 0.3.7
- 0.3.8
- 0.3.9
- 0.3.10
- 0.3.11
- 0.4.0
author: ''
latest: 0.4.0
description-type: markdown
description: "# Shīkensu\n\n> シーケンス    \n> Sequence\n\nRun a sequence of functions
  on in-memory representations of files.  \n__Build static websites with ease__, without
  conforming to a specific structure.\n\n[![](https://www.stackage.org/package/shikensu/badge/nightly?label=version)](https://www.stackage.org/package/shikensu)\n[![](https://travis-ci.org/icidasset/shikensu.svg?branch=master)](https://travis-ci.org/icidasset/shikensu)\n[![](https://ci.appveyor.com/api/projects/status/github/icidasset/shikensu?branch=master&svg=true)](https://ci.appveyor.com/project/icidasset/shikensu)\n\n\n\n###
  Markdown example\n\n\n```haskell\nimport Shikensu\nimport Shikensu.Contrib (clone,
  copyPropsToMetadata, permalink, renameExt, renderContent)\nimport Shikensu.Contrib.IO
  (read, write)\n\nimport Data.ByteString (ByteString)\nimport Flow\nimport Prelude
  hiding (read)\nimport qualified Data.Text.Encoding as Text (decodeUtf8, encodeUtf8)\n\n\nmain
  :: IO Dictionary\nmain =\n  -- This IO operation will read the files matching the
  glob pattern `src/**/*.md`,\n  -- transform them (see the `flow` function) and then
  write them to the `build` directory.\n  dictionary_io\n\n\ndictionary_io :: IO Dictionary\ndictionary_io
  =\n    Shikensu.listRelative [\"src/**/*.md\"] \"./\"\n        >>= read\n        >>=
  flow\n        >>= write \"./build\"\n\n\nflow :: Dictionary -> IO Dictionary\nflow
  =\n       renameExt \".md\" \".html\"\n    .> permalink \"index\"\n    .> clone
  \"index.html\" \"200.html\"\n    .> copyPropsToMetadata\n    .> renderContent markdownRenderer\n
  \   .> return\n\n\nmarkdownRenderer :: Definition -> Maybe ByteString\nmarkdownRenderer
  def =\n    content def\n        |> fmap Text.decodeUtf8\n        |> fmap Markdown.render\n
  \       |> fmap Text.encodeUtf8\n```\n\nThis lists all the markdown files in the
  `./src` directory  \nand then does the following in this exact order:\n\n1. Change
  the extension of each matched file to `.html`.\n2. Change the path of each matched
  file to `%matched_path/%file_basename/index.%file_extension`.\n3. Make an in-memory
  copy of the file that has the `index.html` path.\n4. Copy the information of each
  definition (aka. file) to its metadata \"object\"\n   (so we can use that information
  in our content renderer).\n5. Map the `content` property of each definition\n   (in
  this case we are rendering markdown).\n6. __{post-flow}__ Write to the `./build`
  directory.\n\n\n\n### Why?\n\nBecause this allows me to easily define a workflow
  for building a static website, and more specifically:\n\n- Have a clear overview
  of what's happening.\n- Do a bunch of actions in memory and then write it to disk
  in one go.\n- Have a list of information about the other files in the project which
  can then be shared with, for example, templates.\n\n\n\n### Usage examples\n\n-
  [Simple example](https://github.com/icidasset/ongaku-ryoho/blob/47139dd903494beccb9d18bb23261ae85f7d510e/system/Main.hs#L17)\n-
  [Slightly more complicated example](https://github.com/icidasset/icidasset/blob/f6acd52525abe38286aebe915dd4e97a9d3add33/system/Build/Main.hs#L33)\n"
license-name: MIT
