all-versions:
- '0.0'
- '0.1'
- '1.0'
- '1.1'
- '2.0'
- '3.0'
- '4.0'
- '4.1'
- '4.2'
- '4.3'
- '4.4'
- '4.5'
- 4.5.1
- 4.5.2
- 4.6.0
- 4.6.1
- 4.7.0
- 5.0.0
author: Chris Done
basic-deps:
  async: '>=2.0.1.5'
  base: '>=4 && <5'
  bytestring: '>=0'
  conduit: '>=1.3'
  conduit-extra: '>=0'
  directory: '>=0'
  filepath: '>=0'
  monads-tf: '>=0'
  process: '>=1.2.1.0'
  resourcet: '>=1.2.0'
  semigroups: '>=0'
  split: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0'
  unix: '>=2.7.0.1'
  unliftio: '>=0'
changelog: |
  # 5.0.0

  * Generalize from IO to MonadUnliftIO m => m. See [PR 17](https://github.com/psibi/shell-conduit/pull/17)
  * More detter exclusion of disallowed names.

  # 4.7.0

  * Port it for newer conduit and resourcet

  # 4.6.2

  * Add test for piping feature

  # 4.6.1

  * Fix import error in Stackage: https://github.com/fpco/stackage/issues/2355

  # 4.6.0

  * Add basic tests code
  * Accept list as variadic command line arguments.
    `mkdir "-p" ["folder1", "folder2"]` works now.
  * TRAVIS CI added
changelog-type: markdown
description: "shell-conduit [![Hackage](https://img.shields.io/hackage/v/shell-conduit.svg?style=flat)](https://hackage.haskell.org/package/shell-conduit)
  [![Build Status](https://travis-ci.org/psibi/shell-conduit.svg?branch=master)](https://travis-ci.org/psibi/shell-conduit)\n=====\n\nWrite
  shell scripts with Conduit. Still in the experimental phase.\n\n[Haddock API documentation](https://www.stackage.org/package/shell-conduit).\n\n###
  Examples\n\n##### Cloning and initializing a repo\n\n``` haskell\nimport Control.Monad.IO.Class\nimport
  Data.Conduit.Shell\nimport System.Directory\n\nmain =\n  run (do exists <- liftIO
  (doesDirectoryExist \"fpco\")\n          if exists\n             then rm \"fpco/.hsenvs\"
  \"-rf\"\n             else git \"clone\" \"git@github.com:fpco/fpco.git\"\n          liftIO
  (setCurrentDirectory \"fpco\")\n          shell \"./dev-scripts/update-repo.sh\"\n
  \         shell \"./dev-scripts/build-all.sh\"\n          alertDone)\n```\n\n#####
  Piping\n\nPiping of processes and normal conduits is possible:\n\n``` haskell\nλ>
  run (ls $| grep \".*\" $| shell \"cat\" $| conduit (CL.map (S8.map toUpper)))\nDIST\nEXAMPLES\nLICENSE\nREADME.MD\nSETUP.HS\nSHELL-CONDUIT.CABAL\nSRC\nTAGS\nTODO.ORG\n```\n\n#####
  Running actions in sequence and piping\n\nResults are outputted to stdout unless
  piped into other processes:\n\n``` haskell\nλ> run (do shell \"echo sup\"; shell
  \"echo hi\")\nsup\nhi\nλ> run (do shell \"echo sup\" $| sed \"s/u/a/\"; shell \"echo
  hi\")\nsap\nhi\n```\n\n##### Streaming\n\nLive streaming between pipes like in normal
  shell scripting is\npossible:\n\n``` haskell\nλ> run (do tail' \"/tmp/example.txt\"
  \"-f\" $| grep \"--line-buffered\" \"Hello\")\nHello, world!\nOh, hello!\n```\n\n(Remember
  that `grep` needs `--line-buffered` if it is to output things\nline-by-line).\n\n#####
  Handling exit failures\n\nProcess errors can be ignored by using the Alternative
  instance.\n\n``` haskell\nimport Control.Applicative\nimport Control.Monad.Fix\nimport
  Data.Conduit.Shell\n\nmain =\n  run (do ls\n          echo \"Restarting server ...
  ?\"\n          killall name \"-q\" <|> return ()\n          fix (\\loop ->\n                 do
  echo \"Waiting for it to terminate ...\"\n                    sleep \"1\"\n                    (ps
  \"-C\" name >> loop) <|> return ())\n          shell \"dist/build/ircbrowse/ircbrowse
  ircbrowse.conf\")\n  where name = \"ircbrowse\"\n```\n\n##### Running custom things\n\nYou
  can run processes directly:\n\n``` haskell\nλ> run (proc \"ls\" [])\ndist\t  LICENSE
  \   Setup.hs\t\t  src\tTODO.org\nexamples  README.md  shell-conduit.cabal  TAGS\n```\n\nOr
  shell commands:\n\n``` haskell\nλ> run (shell \"ls\")\ndist\t  LICENSE    Setup.hs\t\t
  \ src\tTODO.org\nexamples  README.md  shell-conduit.cabal  TAGS\n```\n\nOr conduits:\n\n```
  haskell\nλ> run (cat $| conduit (awaitForever yield))\nhello\nhello\nInterrupted.\n```\n\n#####
  Keyboard configuration\n\n``` haskell\nimport Data.Conduit.Shell\nmain =\n  run
  (do xmodmap \".xmodmap\"\n          xset \"r\" \"rate\" \"150\" \"50\")\n```\n\n###
  How it works\n\nAll executable names in the `PATH` at compile-time are brought into\nscope
  as runnable process conduits e.g. `ls` or `grep`.\n\nAll processes are bound as
  variadic process calling functions, like this:\n\n``` haskell\nrmdir :: ProcessType
  r => r\nls :: ProcessType r => r\n```\n\nBut ultimately the types end up being:\n\n```
  haskell\nrmdir \"foo\" :: Segment r\nls :: Segment r\nls \".\" :: Segment r\n```\n\nEtc.\n\nRun
  all shell scripts with\n\n``` haskell\nrun :: Segment r -> IO r\n```\n\nThe `Segment`
  type has a handy `Alternative` instance.\n\n### String types\n\nIf using `OverloadedStrings`
  so that you can use `Text` for arguments,\nthen also enable `ExtendedDefaultRules`,
  otherwise you'll get\nambiguous type errors.\n\n``` haskell\n{-# LANGUAGE ExtendedDefaultRules
  #-}\n```\n\nBut this isn't necessary if you don't need to use `Text` yet. Strings\nliterals
  will be interpreted as `String`. Though you can pass a value\nof type `Text` or
  any instance of `CmdArg` without needing conversions.\n\n### Other modules\n\nYou
  might want to import the regular Conduit modules qualified, too:\n\n``` haskell\nimport
  qualified Data.Conduit.List as CL\n```\n\nWhich contains handy functions for working
  on streams in a\nlist-like way. See the rest of the handy modules for Conduit in\n[conduit-extra](http://hackage.haskell.org/package/conduit-extra).\n\nAlso
  of interest is\n[csv-conduit](http://hackage.haskell.org/package/csv-conduit),\n[html-conduit](http://hackage.haskell.org/package/html-conduit),
  and\n[http-conduit](http://hackage.haskell.org/package/http-conduit).\n\nFinally,
  see the Conduit category on Hackage for other useful\nlibraries: <http://hackage.haskell.org/packages/#cat:Conduit>\n\nAll
  of these general purpose Conduits can be used in shell\nscripting.\n"
description-type: markdown
hash: 7eccba01bbecbf0134448f64a754f0edbd6c5c035367028035f0fb383865dd9f
homepage: https://github.com/psibi/shell-conduit
latest: 5.0.0
license-name: BSD-3-Clause
maintainer: Sibi Prabakaran <sibi@psibi.in>
synopsis: Write shell scripts with Conduit
test-bench-deps:
  base: '>=4.5 && <5'
  bytestring: '>=0'
  conduit: '>=0'
  conduit-extra: '>=0'
  hspec: '>=2.1 && <3'
  hspec-expectations: '>=0'
  shell-conduit: '>=0'
  template-haskell: '>=0'
