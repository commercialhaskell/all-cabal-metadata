all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
author: ''
basic-deps:
  annotated-exception: '>=0.2.0.4'
  base: '>=4.16.4.0 && <5'
  containers: '>=0.6.5.1'
  esqueleto: '>=3.5.10.0'
  mtl: '>=2.2.2'
  persistent: '>=2.14.5.0'
  text: '>=1.2.5.0'
  unliftio-core: '>=0.2.1.0'
changelog: |
  ## [_Unreleased_](https://github.com/freckle/persistent-sql-lifted/compare/persistent-sql-lifted-v0.4.0.0...main)

  ## [v0.4.0.0](https://github.com/freckle/persistent-sql-lifted/compare/persistent-sql-lifted-v0.3.0.0...persistent-sql-lifted-v0.4.0.0)

  Remove `selectKeys` because Persistent's Conduit-based utilities are of dubious correctness.

  Add:

  - `deleteWhereCount`
  - `existsBy`
  - `getFieldName`
  - `getTableName`
  - `insertUnique_`
  - `rawExecute`
  - `rawExecuteCount`
  - `rawSql`
  - `updateWhereCount`

  ## [v0.3.0.0](https://github.com/freckle/persistent-sql-lifted/compare/persistent-sql-lifted-v0.2.0.0...persistent-sql-lifted-v0.3.0.0)

  Remove `rand`; supports `esqueleto-3.6`.

  ## [v0.2.0.0](https://github.com/freckle/persistent-sql-lifted/compare/persistent-sql-lifted-v0.1.1.0...persistent-sql-lifted-v0.2.0.0)

  New modules:

  - `Database.Persist.Sql.Lifted.Expression`
  - `Database.Persist.Sql.Lifted.Expression.Bool`
  - `Database.Persist.Sql.Lifted.Expression.Case`
  - `Database.Persist.Sql.Lifted.Expression.Comparison`
  - `Database.Persist.Sql.Lifted.Expression.Constant`
  - `Database.Persist.Sql.Lifted.Expression.Count`
  - `Database.Persist.Sql.Lifted.Expression.Exists`
  - `Database.Persist.Sql.Lifted.Expression.Insert`
  - `Database.Persist.Sql.Lifted.Expression.Key`
  - `Database.Persist.Sql.Lifted.Expression.List`
  - `Database.Persist.Sql.Lifted.Expression.Maybe`
  - `Database.Persist.Sql.Lifted.Expression.Number`
  - `Database.Persist.Sql.Lifted.Expression.OrderBy`
  - `Database.Persist.Sql.Lifted.Expression.Projection`
  - `Database.Persist.Sql.Lifted.Expression.String`
  - `Database.Persist.Sql.Lifted.Expression.SubSelect`
  - `Database.Persist.Sql.Lifted.Expression.Table`
  - `Database.Persist.Sql.Lifted.Expression.Type`
  - `Database.Persist.Sql.Lifted.Expression.Update`
  - `Database.Persist.Sql.Lifted.Filter`
  - `Database.Persist.Sql.Lifted.From`
  - `Database.Persist.Sql.Lifted.Query`
  - `Database.Persist.Sql.Lifted.Query.Aggregate`
  - `Database.Persist.Sql.Lifted.Query.CommonTableExpressions`
  - `Database.Persist.Sql.Lifted.Query.Core`
  - `Database.Persist.Sql.Lifted.Query.Locking`
  - `Database.Persist.Sql.Lifted.Query.SetOperations`
  - `Database.Persist.Sql.Lifted.Query.Update`
  - `Database.Persist.Sql.Lifted.Update`

  ## [v0.1.1.0](https://github.com/freckle/persistent-sql-lifted/compare/persistent-sql-lifted-v0.1.0.0...persistent-sql-lifted-v0.1.1.0)

  New:

  - `transactionSave`
  - `transactionSaveWithIsolation`
  - `transactionUndo`
  - `transactionUndoWithIsolation`

  ## [v0.1.0.0](https://github.com/freckle/persistent-sql-lifted/tree/persistent-sql-lifted-v0.1.0.0/persistent-sql-lifted)

  First release, sprouted from `freckle-app-1.20.3.0`.
changelog-type: markdown
description: |
  # persistent-sql-lifted

  This package introduces two classes:

  - `MonadSqlBackend m`, for monadic contexts `m` in which a `SqlBackend` is available

  - `MonadSqlBackend db m`, for monadic contexts `m` in which we can execute a SQL
    transaction of type `db a` and get a result `m a`. (The type `db` should have an
    instance of `MonadSqlBackend`.)

  Additionally, this package provides variants of query-running utilities from
  [persistent] and [esqueleto] which are

  1. Concretized to use `SqlBackend`;
  2. Generalized to a `MonadSqlBackend m` constraint rather than `ReaderT backend m`;
  3. Wrapped in [checkpointCallStack] so that exceptions will include call stacks.

  How to migrate from vanilla persistent/esqueleto:

  - Instead of [SqlPersistT], use a `MonadSqlBackend` constraint.
  - Define an instance of `MonadSqlTx` for your application Monad that specifies how
    your application runs database transactions, e.g. by running [runSqlPool].
  - Instead of calling `runSqlPool` directly from the rest of your application code,
    use the `runSqlTx` method from the `MonadSqlTx` class.

    [checkpointCallStack]: https://hackage.haskell.org/package/annotated-exception-0.3.0.2/docs/Control-Exception-Annotated-UnliftIO.html
    [esqueleto]: https://hackage.haskell.org/package/esqueleto
    [persistent]: https://hackage.haskell.org/package/persistent
    [runSqlPool]: https://hackage.haskell.org/package/persistent-2.14.6.3/docs/Database-Persist-Sql.html#v:runSqlPool
    [SqlPersistT]: https://hackage.haskell.org/package/persistent-2.14.6.3/docs/Database-Persist-Sql.html#t:SqlPersistT
description-type: markdown
hash: ee19887ce5d057589214c0258819438835b861bac359a17d791b372901de2c2f
homepage: https://github.com/freckle/persistent-sql-lifted#readme
latest: 0.4.0.0
license-name: MIT
maintainer: Freckle Education
synopsis: Monad classes for running queries with Persistent and Esqueleto
test-bench-deps: {}
