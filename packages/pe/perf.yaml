all-versions:
- 0.1.1
- 0.1.2
- 0.2.0
- 0.3.0
- 0.3.1.0
- 0.3.1.1
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.5.0.0
- 0.6.0
- 0.7.0
- 0.8.0
- 0.9.0
- 0.10.0
- 0.10.1
- 0.10.2
- 0.10.3
- 0.11.0.0
- 0.12.0.0
- 0.12.0.1
author: Tony Day, Marco Zocca
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6 && <0.8'
  deepseq: '>=1.4.4 && <1.6'
  formatn: '>=0.2.1 && <0.4'
  gauge: '>=0.2.5 && <0.3'
  mtl: '>=2.2.2 && <2.4'
  numhask-space: '>=0.10 && <0.12'
  optparse-applicative: '>=0.17 && <0.19'
  perf: '>=0'
  rdtsc: '>=1.3 && <1.4'
  recursion-schemes: '>=5.2.2 && <5.3'
  text: '>=1.2 && <2.2'
  time: '>=1.9 && <1.13'
  vector: '>=0.12.3 && <0.14'
changelog: |
  0.12.0.0
  ===
  * added reportMain and support for executable development.
  * refactored app/perf-explore
  * created app/perf-bench and aded as a `cabal bench` thing.

  0.11.0.0
  ===
  * added Perf.Count
  * GHC 9.6.2 support

  0.10.0
  ===
  * GHC 9.2.1 support
  * inclusion of BigO

  0.9.0
  ===
  * Removed deepseq dependency

  0.8.0
  ===
  * GHC 9.0.1 support
  * internal fixes to remove numhask dependency
changelog-type: markdown
description: "#+TITLE: perf\n#+PROPERTY: header-args :exports both\n#+PROPERTY: header-args
  :eval no-export\n\n[[https://hackage.haskell.org/package/perf][file:https://img.shields.io/hackage/v/perf.svg]]
  [[https://github.com/tonyday567/perf/actions?query=workflow%3Ahaskell-ci][file:https://github.com/tonyday567/perf/workflows/haskell-ci/badge.svg]]\n\n*
  Introduction\n\n~perf~ provides some ideas, code and a library for low-level performance
  measurement for Haskell hacking. The library:\n\n- provides a monad transformer,
  ~PerfT~, as a light-weight wrapper for use on existing code. ~PerfT~ modifications
  can be included in code bases, as opposed to performance being separated code and
  \ process, with any effects able to be erased at compile time with ~evalPerfT~.\n\n-
  focuses on using the [[https://en.wikipedia.org/wiki/Time_Stamp_Counter][rdtsc]]
  instruction set that comes with the x86 chip to measure accurate time performance
  as number of clock cycles.\n\n- abstracts the concept of what is being measured,
  so that concepts such as counters, debug checks, time and space performance can
  be treated equivalently.\n\n* Setup\n\nNote that running this readme.org is very
  slow compared with an external process which accesses the compiled version of the
  library.\n\n#+begin_src haskell-ng :results output\n:r\n:set -Wno-type-defaults\n:set
  -Wno-unused-do-bind\n:set -Wno-name-shadowing\n:set -XOverloadedStrings\n:set -XOverloadedLabels\nimport
  Perf\nimport Data.FormatN\nimport qualified Data.Text as Text\nimport qualified
  Data.Text.IO as Text\nimport qualified Data.Map.Strict as Map\nimport Control.Monad\nimport
  Data.Bifunctor\nputStrLn \"ok\"\n#+end_src\n\n#+RESULTS:\n#+begin_example\nBuild
  profile: -w ghc-9.8.1 -O1\nIn order, the following will be built (use -v for more
  details):\n - perf-0.12.0.1 (lib) (first run)\nPreprocessing library for perf-0.12.0.1..\nGHCi,
  version 9.8.1: https://www.haskell.org/ghc/  :? for help\nLoaded GHCi configuration
  from /Users/tonyday/haskell/perf/.ghci\n[ 1 of 10] Compiling Perf.Stats       (
  src/Perf/Stats.hs, interpreted )\n[ 2 of 10] Compiling Perf.Types       ( src/Perf/Types.hs,
  interpreted )\n[ 3 of 10] Compiling Perf.Time        ( src/Perf/Time.hs, interpreted
  )\n[ 4 of 10] Compiling Perf.Space       ( src/Perf/Space.hs, interpreted )\n[ 5
  of 10] Compiling Perf.Count       ( src/Perf/Count.hs, interpreted )\n[ 6 of 10]
  Compiling Perf.Measure     ( src/Perf/Measure.hs, interpreted )\n[ 7 of 10] Compiling
  Perf.Report      ( src/Perf/Report.hs, interpreted )\n[ 8 of 10] Compiling Perf.BigO
  \       ( src/Perf/BigO.hs, interpreted )\n[ 9 of 10] Compiling Perf.Algos       (
  src/Perf/Algos.hs, interpreted )\n[10 of 10] Compiling Perf             ( src/Perf.hs,
  interpreted )\nOk, 10 modules loaded.\nOk, 10 modules loaded.\nok\n#+end_example\n\n*
  Time\n** What is a tick?\n\nThe fundamental operation of Perf.Time is tick, which
  sandwiches a (strict) function application between two readings of the rdstc chip.\n\n#+begin_src
  haskell-ng :results output :exports both\n:t tick\n#+end_src\n\n#+RESULTS:\n: tick
  :: (a -> b) -> a -> IO (Cycles, b)\n\ntick returns in the IO monad, because reading
  a cycle counter is an IO effect. The trivial but fundamental point is that performance
  measurement effects the computation being measured.\n\nUnlike benchmarking-style
  libraries, such as criterion, the result of the computation is passed through along
  with the cycle count. In this way, the `Perf` monad can be inserted into the midst
  of a computation in an attempt to measure performance in-situ as opposed to sitting
  off in a separate and perhaps unrepresentative process.\n\n** tick_\n\ntick_ measures
  the number of cycles between two clock reads.\n\n#+begin_src haskell-ng :results
  output :exports both\n:t tick_\n#+end_src\n\n#+RESULTS:\n: tick_ :: IO Cycles\n\n\n#+begin_src
  haskell-ng :results output :exports both\nfmap word <$> replicateM 10 tick_\n#+end_src\n\n#+RESULTS:\n:
  [3063,1201,990,978,945,948,951,948,951,948]\n\n** multiple ticks\n\n#+begin_src
  haskell-ng :results output :exports both\nfmap (fmap (word . fst)) . replicateM
  10 $ tick (const ()) ()\n#+end_src\n\n#+RESULTS:\n: [12104,5040,4868,4508,4188,4172,4800,4748,5760,4216]\n\nHere,
  ~const () ()~ was evaluated and took 6.1k cycles for the first effect, reducing
  down to 2.6k after 10 effects. What it did in that time we will never know, really,
  at least from usage of ~perf~. 2.2k cycles is, on my 2.5GHz machine equal to 2200
  / 2.5e9 = 8.8e-7 of a second or 880 nanoseconds.\n\n** tickIO\n\n~tickIO~ measures
  the evaluation of an IO value.\n\n#+begin_src haskell-ng :results output :exports
  both\n:t tickIO\n#+end_src\n\n#+RESULTS:\n: tickIO :: IO a -> IO (Cycles, a)\n\n#+begin_src
  haskell-ng :results output :exports both\nfmap (fmap (word . fst)) . replicateM
  10 $ tickIO (pure ())\n#+end_src\n\n#+RESULTS:\n: [10084,3588,4104,2844,2916,3140,2800,2848,2848,2804]\n\n**
  sum example\n\n#+begin_src haskell-ng :exports both\nfmap (expt (Just 2) . fromIntegral)
  . fst <$> ticks 10 sum ([1..10000] :: [Double])\n#+end_src\n\n#+RESULTS:\n: [\"1.7e6\",\"6.1e5\",\"6.2e5\",\"5.4e5\",\"4.3e5\",\"4.1e5\",\"4.1e5\",\"4.3e5\",\"4.1e5\",\"4.1e5\"]\n\n\n#+begin_src
  haskell-ng :results output :exports both\nts <- ticks 10000 sum ([1..1000] :: [Double])\nprint
  $ average (fmap fromIntegral $ fst ts)\n#+end_src\n\n#+RESULTS:\n: 30411.6957\n\n*
  PerfT\n\n~PerfT~ allows for multiple measurement points and is polymorphic in what
  is being measured. It returns a Map of results held in State.\n\nCompare a lower-level
  usage of ticks, measuring the average of summing to one thousand over one thousand
  trials:\n\n#+begin_src haskell-ng :results output :exports both\nfirst (average
  . fmap fromIntegral) <$> ticks 1000 sum [1..1000]\n#+end_src\n\n#+RESULTS:\n: (50914.804,500500)\n\n...
  with PerfT usage\n\n#+begin_src haskell-ng :results output :exports both\nsecond
  (fmap (average . fmap fromIntegral)) <$> runPerfT (times 1000) (sum |$| [1..1000])\n#+end_src\n\n#+RESULTS:\n:
  (500500,fromList [(\"\",44362.311)])\n\nComparing performance of sum versus a list
  fusion approach:\n\n#+begin_src haskell-ng :results output :exports both\nfmap (average
  . fmap fromIntegral) <$> (execPerfT (times 1000) $ do; (fap \"sum\" sum [1..1000]);
  (fap \"fusion\" (\\x -> sum [1..x]) 1000))\n#+end_src\n\n#+RESULTS:\n: fromList
  [(\"fusion\",97804.085),(\"sum\",45053.771)]\n\nAn IO example\n\n#+begin_src haskell-ng\nexampleIO'
  :: IO ()\nexampleIO' = do\n  txt <- Text.readFile \"src/Perf.hs\"\n  let n = Text.length
  txt\n  Text.putStrLn $ \"length of file is: \" <> Text.pack (show n)\n#+end_src\n\n#+begin_src
  haskell-ng :results output :exports both\nexampleIO = execPerfT time (do\n  txt
  <- fam \"file_read\" (Text.readFile \"src/Perf.hs\")\n  n <- fap \"length\" Text.length
  txt\n  fam \"print_result\" (Text.putStrLn $ \"length of file is: \" <> Text.pack
  (show n)))\n#+end_src\n\n#+begin_src sh :results output :exports both\nperf-explore
  --exampleIO\n#+end_src\n\n#+RESULTS:\n#+begin_example\nlength of file is: 1794\nlength
  of file is: 1794\n\nlabel1          label2          label3          old result      new
  result      change\n\nnormal          file-read       time            5.96e5          6.58e5
  \         slightly-degraded\nnormal          length          time            1.10e4
  \         7.12e3          improvement\nnormal          print-result    time            1.44e5
  \         5.70e4          improvement\nouter           file-read       time            1.36e5
  \         1.39e5\nouter           length          time            1.45e3          1.33e3
  \         improvement\nouter           outer-total     time            1.67e5          1.50e5
  \         improvement\nouter           print-result    time            2.70e4          6.26e3
  \         improvement\n#+end_example\n\n* perf-explore\n\n~perf-explore~ contains
  some exploratory routines used to develop =perf=\n\n#+begin_src sh :results output
  :exports both\nperf-explore --help\n#+end_src\n\n#+RESULTS:\n#+begin_example\nexamples
  of perf usage\n\nUsage: perf-explore [-n|--runs ARG]\n                    [--best
  | --median | --average | --averagesecs]\n                    [--time | --space |
  --spacetime | --allocation | --count]\n                    [-g|--golden ARG] [--nocheck]
  [-r|--record]\n                    [--header | --noheader] [--error ARG] [--warning
  ARG]\n                    [--improved ARG]\n                    [--sums | --lengths
  | --nub | --examples | --example |\n                      --exampleIO | --noops
  | --ticks | --gauge]\n                    [-l|--length ARG]\n                    [--sumFuse
  | --sum | --lengthF | --constFuse | --mapInc |\n                      --noOp]\n\n
  \ perf exploration\n\nAvailable options:\n  -n,--runs ARG            number of runs
  to perform\n  --best                   report upper decile\n  --median                 report
  median\n  --average                report average\n  --averagesecs            report
  average in seconds\n  --time                   measure time performance\n  --space
  \                 measure space performance\n  --spacetime              measure
  both space and time performance\n  --allocation             measure bytes allocated\n
  \ --count                  measure count\n  -g,--golden ARG          golden file
  name\n  --nocheck                do not check versus the golden file\n  -r,--record
  \             record the result to the golden file\n  --header                 include
  headers\n  --noheader               dont include headers\n  --error ARG              error
  level\n  --warning ARG            warning level\n  --improved ARG           improved
  level\n  --sums                   run on sum algorithms\n  --lengths                run
  on length algorithms\n  --nub                    nub test\n  --examples               run
  on example algorithms\n  --example                run on the example algorithm\n
  \ --exampleIO              exampleIO test\n  --noops                  noops test\n
  \ --ticks                  tick test\n  --gauge                  gauge runs on exmaple
  for comparison\n  -l,--length ARG          length of list\n  --sumFuse                fused
  sum pipeline\n  --sum                    sum\n  --lengthF                foldr id
  length\n  --constFuse              fused const pipeline\n  --mapInc                 fmap
  (+1)\n  --noOp                   const ()\n  -h,--help                Show this
  help text\n#+end_example\n\n#+begin_src haskell-ng :results output :exports both\nfmap
  averageI <$> execPerfT (times 10000) (sum |$| [1..1000])\n#+end_src\n\n#+RESULTS:\n:
  fromList [(\"\",35729.9518)]\n\nThe equivalent to the above code is:\n\n#+begin_src
  sh :results output :exports both\nperf-explore -n 10000 -l 1000 --sum --nocheck\n#+end_src\n\n#+RESULTS:\n:
  label1          label2          results\n:\n: sum             time            1.47e4\n\n**
  noops\n\nThis no-op experiment is useful to understand the pure time performance
  of the machinery around measurement. It can be (re)run with:\n\n#+begin_src sh :results
  output :exports both\nperf-explore --noops\n#+end_src\n\n#+RESULTS:\n#+begin_example\nlabel1
  \         label2          label3          results\n\nconst           1st             time
  \           6.05e3\nconst           2nd             time            2.80e1\nconst
  \          3rd             time            3.60e1\nconst           4th             time
  \           3.20e1\nconst           average         time            4.11e1\nconst
  \          best            time            2.74e1\nconst           median          time
  \           3.54e1\npure            1st             time            6.46e3\npure
  \           2nd             time            7.60e1\npure            3rd             time
  \           4.00e1\npure            4th             time            4.00e1\npure
  \           average         time            4.28e1\npure            best            time
  \           2.82e1\npure            median          time            3.64e1\nNo golden
  file found. To create one, run with '-r'\n#+end_example\n\n** measurement context\n\nExploration
  of how the code surrounding measurement effects performance.\n\n#+begin_src sh :results
  drawer :exports both\nperf-explore -n 1000 -l 1000 --ticks --nocheck\n#+end_src\n\n#+RESULTS:\n:results:\n|
  \              | stepTime |   tick | tickForce | tickForceArgs | tickLazy | tickWHNF
  |  times |\n| sumAux        |   1.46e4 | 1.51e4 |    1.65e4 |        1.45e4 |   1.96e1
  |   1.45e4 | 1.46e4 |\n| sumCata       |   1.45e4 | 1.82e4 |    1.45e4 |        1.45e4
  |   1.99e1 |   1.46e4 | 1.48e4 |\n| sumCo         |   1.45e4 | 1.46e4 |    1.46e4
  |        1.63e4 |   2.02e1 |   1.45e4 | 1.44e4 |\n| sumCoCase     |   1.44e4 | 1.51e4
  |    1.61e4 |        1.46e4 |   2.78e1 |   2.10e4 | 1.49e4 |\n| sumCoGo       |
  \  2.61e4 | 1.46e4 |    3.82e4 |        2.55e4 |   2.04e1 |   1.45e4 | 2.59e4 |\n|
  sumF          |   1.34e4 | 1.34e4 |    2.01e4 |        1.64e4 |   2.01e1 |   1.33e4
  | 1.33e4 |\n| sumFlip       |   1.37e4 | 1.34e4 |    1.34e4 |        1.33e4 |   2.06e1
  |   1.41e4 | 1.33e4 |\n| sumFlipLazy   |   1.33e4 | 1.34e4 |    1.33e4 |        1.34e4
  |   2.01e1 |   1.37e4 | 1.34e4 |\n| sumFoldr      |   1.44e4 | 1.45e4 |    2.18e4
  |        1.68e4 |   3.22e1 |   1.54e4 | 1.45e4 |\n| sumFuse       |   3.19e3 | 1.98e3
  |    1.93e3 |        2.19e3 |   1.98e1 |   1.83e3 | 3.15e3 |\n| sumFuseFoldl' |
  \  1.88e3 | 2.46e3 |    2.02e3 |        2.27e3 |   2.39e1 |   2.38e3 | 2.15e3 |\n|
  sumFuseFoldr  |   5.79e3 | 6.01e3 |    3.70e3 |        3.70e3 |   2.00e1 |   3.70e3
  | 6.11e3 |\n| sumFusePoly   |   2.67e3 | 2.68e3 |    2.65e3 |        2.29e3 |   2.73e1
  |   2.44e3 | 2.60e3 |\n| sumLambda     |   1.59e4 | 1.35e4 |    1.47e4 |        1.99e4
  |   1.99e1 |   1.36e4 | 1.34e4 |\n| sumMono       |   1.38e4 | 1.69e4 |    1.35e4
  |        1.36e4 |   2.04e1 |   1.37e4 | 1.34e4 |\n| sumPoly       |   1.99e4 | 1.42e4
  |    1.35e4 |        1.73e4 |   1.97e1 |   1.35e4 | 1.51e4 |\n| sumSum        |
  \  1.34e4 | 1.36e4 |    1.34e4 |        1.35e4 |   1.99e1 |   1.34e4 | 2.01e4 |\n|
  sumTail       |   2.03e4 | 1.37e4 |    1.34e4 |        1.34e4 |   1.99e1 |   1.34e4
  | 2.01e4 |\n| sumTailLazy   |   1.34e4 | 1.66e4 |    1.33e4 |        1.41e4 |   1.99e1
  |   1.35e4 | 1.33e4 |\n:end:\n\n*** short list\n#+begin_src sh :results drawer :exports
  both\nperf-explore -n 10000 -l 10 --best --ticks\n#+end_src\n\n#+RESULTS:\n:results:\n|
  \              | stepTime |   tick | tickForce | tickForceArgs | tickLazy | tickWHNF
  |  times |\n| sumAux        |   1.81e2 | 2.33e2 |    1.81e2 |        1.82e2 |   1.32e1
  |   1.83e2 | 1.82e2 |\n| sumCata       |   1.81e2 | 2.33e2 |    1.81e2 |        1.82e2
  |   1.33e1 |   2.33e2 | 1.81e2 |\n| sumCo         |   2.10e2 | 2.33e2 |    2.13e2
  |        2.11e2 |   2.49e1 |   2.33e2 | 2.10e2 |\n| sumCoCase     |   1.81e2 | 2.47e2
  |    1.82e2 |        1.82e2 |   1.83e1 |   2.47e2 | 1.81e2 |\n| sumCoGo       |
  \  1.81e2 | 2.34e2 |    2.34e2 |        2.34e2 |   1.33e1 |   2.33e2 | 1.82e2 |\n|
  sumF          |   1.03e2 | 2.22e2 |    1.05e2 |        1.04e2 |   1.88e1 |   1.83e2
  | 1.04e2 |\n| sumFlip       |   1.13e2 | 1.28e2 |    1.20e2 |        1.20e2 |   1.88e1
  |   1.17e2 | 1.63e2 |\n| sumFlipLazy   |   1.13e2 | 2.07e2 |    1.76e2 |        1.20e2
  |   2.49e1 |   2.04e2 | 1.01e2 |\n| sumFoldr      |   1.81e2 | 2.66e2 |    2.65e2
  |        1.81e2 |   1.88e1 |   2.65e2 | 1.81e2 |\n| sumFuse       |   2.58e1 | 2.71e1
  |    2.85e1 |        3.36e1 |   1.36e1 |   3.36e1 | 3.42e1 |\n| sumFuseFoldl' |
  \  5.04e1 | 2.71e1 |    5.11e1 |        5.08e1 |   1.41e1 |   2.65e1 | 3.96e1 |\n|
  sumFuseFoldr  |   8.16e1 | 8.61e1 |    6.26e1 |        7.34e1 |   1.25e1 |   8.47e1
  | 8.54e1 |\n| sumFusePoly   |   4.19e1 | 5.82e1 |    4.26e1 |        5.81e1 |   1.30e1
  |   5.91e1 | 4.30e1 |\n| sumLambda     |   1.39e2 | 1.30e2 |    1.60e2 |        1.63e2
  |   1.33e1 |   1.29e2 | 1.43e2 |\n| sumMono       |   8.04e1 | 1.43e2 |    8.64e1
  |        8.41e1 |   1.83e1 |   1.15e2 | 8.16e1 |\n| sumPoly       |   1.16e2 | 1.29e2
  |    1.44e2 |        1.21e2 |   2.49e1 |   1.30e2 | 1.18e2 |\n| sumSum        |
  \  1.02e2 | 1.03e2 |    1.04e2 |        1.05e2 |   1.33e1 |   1.02e2 | 1.04e2 |\n|
  sumTail       |   1.40e2 | 1.37e2 |    1.31e2 |        1.31e2 |   1.36e1 |   1.45e2
  | 1.42e2 |\n| sumTailLazy   |   1.06e2 | 1.78e2 |    1.12e2 |        1.12e2 |   1.84e1
  |   2.25e2 | 1.09e2 |\n:end:\n\n\n*** long list\n#+begin_src sh :results drawer
  :exports both\nperf-explore -n 100 -l 100000 --best --ticks\n#+end_src\n\n#+RESULTS:\n:results:\n|
  \              | stepTime |   tick | tickForce | tickForceArgs | tickLazy | tickWHNF
  |  times |\n| sumAux        |   2.82e6 | 2.70e6 |    2.66e6 |        2.75e6 |   1.83e1
  |   2.70e6 | 2.79e6 |\n| sumCata       |   2.71e6 | 2.69e6 |    2.63e6 |        2.64e6
  |   1.28e1 |   2.68e6 | 2.75e6 |\n| sumCo         |   2.71e6 | 2.73e6 |    2.63e6
  |        2.64e6 |   2.52e1 |   2.71e6 | 2.73e6 |\n| sumCoCase     |   2.69e6 | 2.70e6
  |    2.70e6 |        2.65e6 |   1.85e1 |   2.76e6 | 2.67e6 |\n| sumCoGo       |
  \  2.68e6 | 2.77e6 |    2.65e6 |        2.63e6 |   1.82e1 |   2.75e6 | 2.69e6 |\n|
  sumF          |   1.24e6 | 1.24e6 |    1.24e6 |        1.24e6 |   1.26e1 |   1.24e6
  | 1.27e6 |\n| sumFlip       |   1.16e6 | 1.14e6 |    1.14e6 |        1.16e6 |   1.35e1
  |   1.13e6 | 1.16e6 |\n| sumFlipLazy   |   1.03e6 | 1.03e6 |    1.03e6 |        1.02e6
  |   1.37e1 |   1.03e6 | 1.03e6 |\n| sumFoldr      |   2.76e6 | 2.83e6 |    2.66e6
  |        2.67e6 |   1.82e1 |   2.81e6 | 2.74e6 |\n| sumFuse       |   1.45e5 | 1.45e5
  |    1.45e5 |        1.44e5 |   1.39e1 |   1.45e5 | 1.45e5 |\n| sumFuseFoldl' |
  \  1.45e5 | 1.45e5 |    1.45e5 |        1.46e5 |   1.35e1 |   1.45e5 | 1.45e5 |\n|
  sumFuseFoldr  |   1.76e6 | 1.77e6 |    1.75e6 |        1.75e6 |   1.90e1 |   1.76e6
  | 1.75e6 |\n| sumFusePoly   |   1.45e5 | 2.00e5 |    1.45e5 |        1.45e5 |   1.32e1
  |   1.68e5 | 1.45e5 |\n| sumLambda     |   9.35e5 | 9.52e5 |    9.35e5 |        9.38e5
  |   2.48e1 |   9.46e5 | 9.44e5 |\n| sumMono       |   1.13e6 | 1.12e6 |    1.11e6
  |        1.11e6 |   1.23e1 |   1.11e6 | 1.11e6 |\n| sumPoly       |   1.03e6 | 1.04e6
  |    1.02e6 |        1.03e6 |   1.32e1 |   1.03e6 | 1.03e6 |\n| sumSum        |
  \  1.20e6 | 1.22e6 |    1.20e6 |        1.19e6 |   1.32e1 |   1.22e6 | 1.20e6 |\n|
  sumTail       |   1.22e6 | 1.22e6 |    1.22e6 |        1.22e6 |   1.28e1 |   1.22e6
  | 1.22e6 |\n| sumTailLazy   |   1.16e6 | 1.19e6 |    1.18e6 |        1.16e6 |   1.29e1
  |   1.18e6 | 1.16e6 |\n:end:\n\n** sums\n\n#+begin_src sh :output drawer :exports
  both\nperf-explore -n 1000 -l 1000 --sums\n#+end_src\n\n#+RESULTS:\n#+begin_example\nlabel1
  \         label2          old result      new result      change\n\nsumAux          time
  \           1.51e4          1.46e4\nsumCata         time            1.55e4          1.46e4
  \         improvement\nsumCo           time            1.55e4          2.01e4          degraded\nsumCoCase
  \      time            1.57e4          1.47e4          improvement\nsumCoGo         time
  \           1.54e4          1.69e4          slightly-degraded\nsumF            time
  \           1.33e4          2.02e4          degraded\nsumFlip         time            1.41e4
  \         1.36e4\nsumFlipLazy     time            1.47e4          1.93e4          degraded\nsumFoldr
  \       time            1.56e4          1.75e4          slightly-degraded\nsumFuse
  \        time            1.66e3          2.61e3          degraded\nsumFuseFoldl'
  \  time            1.71e3          2.70e3          degraded\nsumFuseFoldr    time
  \           5.83e3          6.72e3          slightly-degraded\nsumFusePoly     time
  \           2.12e3          2.64e3          degraded\nsumLambda       time            1.47e4
  \         1.39e4          improvement\nsumMono         time            1.73e4          1.40e4
  \         improvement\nsumPoly         time            1.87e4          1.36e4          improvement\nsumSum
  \         time            1.33e4          1.34e4\nsumTail         time            1.47e4
  \         1.40e4          improvement\nsumTailLazy     time            1.44e4          1.34e4
  \         improvement\n#+end_example\n\n** lengths\n\n#+begin_src sh :exports both\nperf-explore
  -n 1000 -l 1000 --lengths\n#+end_src\n\n#+RESULTS:\n#+begin_example\nlabel1          label2
  \         old result      new result      change\n\nlengthAux       time            1.45e4
  \         1.60e4          slightly-degraded\nlengthCo        time            1.64e4
  \         1.39e4          improvement\nlengthCoCase    time            1.78e4          1.31e4
  \         improvement\nlengthF         time            1.06e4          1.10e4\nlengthFMono
  \    time            1.05e4          1.05e4\nlengthFlip      time            1.11e4
  \         1.07e4\nlengthFlipLazy  time            1.13e4          1.07e4          improvement\nlengthFoldr
  \    time            1.27e4          1.33e4          slightly-degraded\nlengthFoldrConsttime
  \           1.27e4          1.36e4          slightly-degraded\nlengthTail      time
  \           1.08e4          1.10e4\nlengthTailLazy  time            1.15e4          1.03e4
  \         improvement\n#+end_example\n\n** Gauge comparison\n\n#+begin_src sh :results
  output :exports both\nperf-explore -n 1000 -l 1000 --average --gauge\n#+end_src\n\n#+RESULTS:\n#+begin_example\nsumFuse\nbenchmarking
  function ... \rfunction                                 time                 849.4
  ns\n\nbenchmarking function ... \rfunction                                 time
  \                848.6 ns\n\nsum\nbenchmarking function ... \rfunction                                 time
  \                3.786 μs\n\nbenchmarking function ... \rfunction                                 time
  \                3.791 μs\n\nlengthF\nbenchmarking function ... \rfunction                                 time
  \                1.863 μs\n\nbenchmarking function ... \rfunction                                 time
  \                1.872 μs\n\nconstFuse\nbenchmarking function ... \rfunction                                 time
  \                571.0 ns\n\nbenchmarking function ... \rfunction                                 time
  \                1.080 μs\n\nmapInc\nbenchmarking function ... \rfunction                                 time
  \                9.203 ns\n\nbenchmarking function ... \rfunction                                 time
  \                15.99 μs\n\nnoop\nbenchmarking function ... \rfunction                                 time
  \                5.770 ns\n\nbenchmarking function ... \rfunction                                 time
  \                4.740 ns\n\n#+end_example\n\n** Space\n\nData is collected from
  GHCStats\n\n- allocated_bytes\n- gcs\n- gcdetails_live_bytes\n- max_live_bytes\n-
  max_mem_in_use_bytes\n\n#+begin_src sh :results ouput :exports both\nperf-explore
  -n 10 -l 100000 --space +RTS -T -RTS\n#+end_src\n\n#+RESULTS:\n: label1          label2
  \         results\n:\n: sum             MaxMem          4.61e6\n: sum             allocated
  \      4.19e5\n: sum             gcLiveBytes     2.19e5\n: sum             gcollects
  \      1.00e-1\n: sum             maxLiveBytes    0.00e0\n: No golden file found.
  To create one, run with '-r'\n\n* Perf.BigO\n\nPerf.BigO represents functionality
  to determine the complexity order for a computation.\n\nWe could do a regression
  and minimise the error term, but we know that the largest run contains the most
  information; we would need to weight the simulations according to some heuristic.\n\nInstead,
  we:\n\n- estimate the order factor for each possible Order, from N3 to N0, setting
  the highest n run constant factor to zero,\n- pick the order based on lowest absolute
  error result summed across all the runs,\n\n#+begin_src haskell-ng :results output
  :exports both\nimport qualified Prelude as P\nimport Data.List (nub)\nestOrder (\\x
  -> sum $ nub [1..x]) 10 [1,10,100,1000]\n#+end_src\n\n#+RESULTS:\n: BigOrder {bigOrder
  = N2, bigFactor = 13.375059, bigConstant = 0.0}\n\n* References\n\n[[https://github.com/haskell-perf/checklist][The
  Haskell performance checklist]]\n\n[[https://github.com/ndmitchell/spaceleak][ndmitchell/spaceleak:
  Notes on space leaks]]\n\n** Core\n\n[[https://ghc.gitlab.haskell.org/ghc/doc/users_guide/debugging.html#options-debugging][5.13.
  Debugging the compiler]]\n\n#+begin_src sh\nghc app/speed.hs -ddump-simpl -ddump-to-file
  -fforce-recomp -dlint -O\n#+end_src\n\n[[https://wiki.haskell.org/Performance/GHC#Looking_at_the_Core][haskell
  wiki: Looking at the Core]]\n\n[[https://godbolt.org/][godbolt]]\n\n[[https://gitlab.haskell.org/ghc/ghc/-/issues/15185][ghc
  issue 15185: Enum instance for IntX / WordX are inefficient]]\n\n[[https://fixpt.de/blog/2017-12-04-strictness-analysis-part-1.html][fixpt
  - All About Strictness Analysis (part 1)]]\n\n** Profiling\n*** setup\n[[https://ghc.gitlab.haskell.org/ghc/doc/users_guide/profiling.html#prof-heap][8.
  Profiling]]\n\nA typical configuration step for profiling:\n\n#+begin_src sh :results
  output\ncabal configure --enable-library-profiling --enable-executable-profiling
  -fprof-auto -fprof -write-ghc-environment-files=always\n#+end_src\n\nA cabal.project.local
  with profiling enabled:\n\n#+begin_quote\nwrite-ghc-environment-files: always\nignore-project:
  False\nflags: +prof +prof-auto\nlibrary-profiling: True\nexecutable-profiling: True\n#+end_quote\n\nExamples
  from markup-parse R&D:\n\nExecutable compilation:\n\n#+begin_src sh :results output\nghc
  -prof -fprof-auto -rtsopts app/speed0.hs -threaded -fforce-recomp\n#+end_src\n\nExecutable
  run:\n\n#+begin_src sh :results output\napp/speed0 +RTS -s -p -hc -l -RTS\n#+end_src\n\n***
  Space usage output (-s)\n\n#+begin_example\n885,263,472 bytes allocated in the heap\n
  \      8,507,448 bytes copied during GC\n         163,200 bytes maximum residency
  (4 sample(s))\n          27,752 bytes maximum slop\n               6 MiB total memory
  in use (0 MiB lost due to fragmentation)\n\n                                     Tot
  time (elapsed)  Avg pause  Max pause\n  Gen  0       207 colls,     0 par    0.009s
  \  0.010s     0.0001s    0.0002s\n  Gen  1         4 colls,     0 par    0.001s
  \  0.001s     0.0004s    0.0005s\n\n  TASKS: 4 (1 bound, 3 peak workers (3 total),
  using -N1)\n\n  SPARKS: 0 (0 converted, 0 overflowed, 0 dud, 0 GC'd, 0 fizzled)\n\n
  \ INIT    time    0.006s  (  0.006s elapsed)\n  MUT     time    0.367s  (  0.360s
  elapsed)\n  GC      time    0.010s  (  0.011s elapsed)\n  RP      time    0.000s
  \ (  0.000s elapsed)\n  PROF    time    0.000s  (  0.000s elapsed)\n  EXIT    time
  \   0.001s  (  0.001s elapsed)\n  Total   time    0.384s  (  0.380s elapsed)\n#+end_example\n\n***
  Cost center profile (-p)\n\nDumped to speed0.prof\n\n#+begin_example\nCOST CENTRE
  MODULE                SRC                                            %time %alloc\n\ntoken
  \      MarkupParse           src/MarkupParse.hs:(259,1)-(260,20)             50.2
  \  50.4\nwrappedQ'   MarkupParse.FlatParse src/MarkupParse/FlatParse.hs:(215,1)-(217,78)
  \  20.8   23.1\nws_         MarkupParse.FlatParse src/MarkupParse/FlatParse.hs:(135,1)-(146,4)
  \   14.3    5.5\neq          MarkupParse.FlatParse src/MarkupParse/FlatParse.hs:243:1-30
  \          10.6   11.1\ngather      MarkupParse           src/MarkupParse.hs:(420,1)-(428,100)
  \            2.4    3.7\nrunParser   FlatParse.Basic       src/FlatParse/Basic.hs:(217,1)-(225,24)
  \         1.0    6.0\n#+end_example\n\n*** heap analysis (-hc -l)\n\n#+begin_src
  sh :results output\neventlog2html speed0.eventlog\n#+end_src\n\nProduces speed0.eventlog.html
  which contains heap charts.\n\n** Cache speed\n\nThe average cycles per + operation
  can get down to about 0.7 cycles, and there are about 4 cache registers per cycle,
  so a sum pipeline uses 2.8 register instructions per +.\n\n| Cache             |
  Cycles         |\n|-------------------|----------------|\n| register          |
  4 per cycle    |\n| L1 Cache access   | 3-4 cycles     |\n| L2 Cache access   |
  11-12 cycles   |\n| L3 unified access | 30 - 40        |\n| DRAM hit          |
  195 cycles     |\n| L1 miss           | 40 cycles      |\n| L2 miss           |
  >600 cycles     |\n\n\n"
description-type: text
hash: 8ae58c3061b6492866447814e806e2372908fd74e954cf8f964dcd0760bda9fd
homepage: https://github.com/tonyday567/perf#readme
latest: 0.12.0.1
license-name: BSD-3-Clause
maintainer: tonyday567@gmail.com
synopsis: Low-level run time measurement.
test-bench-deps:
  base: '>=4.7 && <5'
  perf: '>=0'
