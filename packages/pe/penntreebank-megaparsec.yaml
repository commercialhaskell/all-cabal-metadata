all-versions:
- 0.1.0
- 0.2.0
author: Nori Hayashi
basic-deps:
  base: '>=4.11 && <5'
  containers: '>=0.5 && <0.7'
  megaparsec: '>=8.0 && <9'
  mtl: '>=2.2.2 && <3'
  template-haskell: '>=2.13 && <3'
  transformers: '>=0.4 && <0.6'
changelog: ''
changelog-type: ''
description: "# penntreebank-megaparsec :: Megaparsec parsers for trees in the Penn
  Treebank format\n![Travis CI build :: master](https://img.shields.io/travis/aslemen/penntreebank-megaparsec/master?label=Travis%20CI%20build%20%3A%3A%20master)\n\nThis
  Haskell package provides parsers for syntactic trees annotated \n    in the Penn
  Treebank format, powered \n    by [Megaparsec](https://hackage.haskell.org/package/megaparsec).\n\nIt
  supports vertical composition of custom label parsers with tree parsers,\n    which
  means you can customize your label parsers \n    and use these parsers to perform
  parsing of labels\n    at the same time as that of trees.\nFor the following example
  of categorial grammar trees,\n\n```\n(A/B (B He)\n     (B\\<A/B> thinks))\n```\n\nthe
  result of tree parsing is:\n\n```haskell\nNode \"A/B\" [\n    Node \"B\" [\n        Node
  \"He\" []\n    ], \n    Node \"B\\<A/B>\" [\n        Node \"thinks\" []\n    ]\n]
  \n```\n\nwhich you can make followed by a secondary parsing of labels (= categories):\n\n```haskell\nNode
  (CatRight (Atom B) (Atom A)) [\n    Node (Atom B) [\n        Node (Lex \"He\") []\n
  \   ], \n    Node (CatLeft (Atom B) (CatRight (Atom B) (Atom A))) [\n        Node
  (Lex \"thinks\") []\n    ]\n] \n```\n\n## Usage \n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n\nimport Data.Tree.Parser.Penn.Megaparsec.Char
  as TC\nimport Data.Text (Text)\nimport Text.Megaparsec as MegaP\n\n-- define the
  node type\ndata PennNode = NonTerm Text | Term Text deriving (Show)\n\n-- define
  the node parsers\ninstance {-# OVERLAPS #-} TC.ParsableAsTerm Text PennNode where\n
  \   pNonTerm = NonTerm <$> MegaP.takeRest\n    pTerm = Term <$> MegaP.takeRest\n\n--
  specify and disambiguate the type of the input stream \nparser :: (Monad m) => TC.PennTreeParserT
  Text m PennNode\nparser = TC.pTree\n\nmain :: IO ()\nmain = MegaP.parseTest parser
  \"(A (B C (D E)))\"\n\n```"
description-type: markdown
hash: 01eca915493bfa80e3f7d9b311878cba7c1f581cbd42bdf9d0160e56f4af85fc
homepage: https://github.com/aslemen/penntreebank-megaparsec#readme
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: Nori Hayashi <net@hayashi-lin.net>
synopsis: Parser combinators for trees in the Penn Treebank format
test-bench-deps:
  base: '>=4.11 && <5'
  containers: '>=0.5 && <0.7'
  hspec: '>=2.0 && <3.0'
  megaparsec: '>=8.0 && <9'
  mtl: '>=2.2.2 && <3'
  penntreebank-megaparsec: '>=0'
  template-haskell: '>=2.13 && <3'
  text: '>=0.2 && <1.3'
  transformers: '>=0.4 && <0.6'
