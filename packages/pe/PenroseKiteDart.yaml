all-versions:
- 1.0.0
- 1.1.0
- '1.2'
- 1.2.1
- '1.3'
- '1.4'
- 1.4.1
- 1.4.2
- 1.4.3
- 1.4.4
- 1.4.5
author: Chris Reade
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.7 && <0.7'
  diagrams-lib: '>=1.4.6 && <1.5'
changelog: "# Revision history for PenroseKiteDart\n\n## version 1.4.5  -- 2025-8-3\nadded:\n
  \   class P3_DrawableLabelled (instances VPatch, Tgraph)\n    with labelColourSizeP3,
  labelSizeP3, labelledP3\n\n    drawjP3 (renamed from dashjP3)\n    fillOnlyPieceDK\n
  \   drawjPiece (renamed from dashjPiece)\n    drawnEdges (renamed from pieceEdges)\n\n
  \   decomposeFaces\n    fillOnlyPieceDK\n\nexposed:\n    P3_Patch, bothDir, missingRevs,
  extractLowestJoin\n\ngeneralised:\n    phiVMap\n\ndeprecated:\n    dashjP3, dashjPiece,
  pieceEdges (all renamed)\n\n## version 1.4.4  -- 2025-7-9\n\nFixed bug in remainder
  faces for new partComposeF\n\nAdded new module `TileLibP3` for drawing P3 tilings.\nThis
  is now included in `PKD` export list\nwith example `testRhombus` in module `TgraphExamples`.\n\n##
  version 1.4.3  -- 2025-7-1\n\nFixed bug in `partComposing`.\n(partCompFacesFrom
  was assuming forced to get remainders.)\nThis is now incorporated in partComposeFaces
  and partComposeFacesF\nand partCompFacesFrom is now removed.\n\n## version 1.4.2
  \ -- 2025-7-1\n\nDartWingInfo has an extra field (unMapped)\n\nImproved composing
  performance (now a Strict module)\nNew: partCompFacesFrom (used instead of composeFaceGroups
  in composing)\n\n## version 1.4.1  -- 2025-6-26\nForce module is now Strict (significantly
  improves space usage)\n(HalfTile, Decompose, Relabelling also made Strict\nand Prelude
  StrictData)\n\nForceState now an instance of class HasFaces\n\nNew: boundaryEdgeFilter\n
  \ (used instead of boundaryFilter to simplify UFinders)\n\n\n## version 1.4 -- 2025-6-12\n\nChanged
  module Tgraphs to module Tgraph.Extras\n\n### New HasFaces class\n\nIntroduced to
  define common functions for \n[TileFace], Tgraph, VPatch, BoundaryState, Forced\n\nBreaking
  Name Changes for\n    nullGraph -> nullFaces\n    graphBoundary -> boundary\n    facesBoundary
  -> boundary\n    graphDedges -> dedges\n    facesDedges  -> dedges\n    facesVSet
  -> vertexSet\n    facesMaxV -> maxV\n    graphBoundaryVs -> boundaryVs\n    boundaryVertexSet
  -> vertexSet\n    facesEdges -> completeEdges\n    graphEdges -> completeEdges\n
  \   boundaryLoopsG -> boundaryLoops\n    graphEFMap -> buildEFMap\n\n    Also changed
  selector in BoundaryState to boundaryDedges (but note boundary generalised)\n\nGeneralised
  (to use HasFaces)\n    boundary\n    faces\n    maxV\n    vertexSet\n    boundaryVs\n
  \   internalEdges\n    phiEdges\n    nonPhiEdges\n    vertexFacesMap\n    dedgesFacesMap\n
  \   buildEFMap\n    extractLowestJoin\n    lowestJoin\n    locateVertices\n    locateVerticesGen\n
  \   touchingVertices\n    boundaryEdgeSet\n    commonBdry\n    boundaryVertexSet\n
  \   internalVertexSet\n    boundaryLoops\n    evalFaces\n    ldarts,rdarts,lkites,rkites,
  kites, darts\n    crossingBVs\n    crossingBoundaries\n    connected\n    defaultAlignment\n
  \   findEdgeLoops\n    hasEdgeLoops\n    conflictingDedges\n\nBreaking: No longer
  exported:\nfindLoops, axisJoin, drawEdge (use drawLocatedEdge), drawEdges (use drawLocatedEdges),\ncrossingVertices,
  tryFindThirdV, makeGenerator (use newUpdateGenerator)\n\n### Try changed\nChanged
  the type for Try to use ShowS instead of String\n(ShowS = String -> String)\n\nNew:
  failReport, failReports, tryAtLeastOne\n\nBreaking:\n   Occurrences of \n        Left
  s :: Try a\n    need to be replaced by \n        failReport s \n    or\n        Left
  (s<>)\n\nAn instance of Show(ShowS) is provided in order to show Try results\n\n###
  Changes to Forced\n\nForced is no longer a Functor.\n\nInstead, 4 specific safe
  cases for changing a Forced Forcible\n(New)\nrecoverGraphF,boundaryStateF,makeBoundaryStateF,initFSF\n\nData
  constructor Forced is no longer exported but\n(New)\nlabelAsForced :: a -> Forced
  a (for use only when the argument is known to be forced)\n\n(New)\ntryDartAndKiteF
  - version of tryDartAndKiteForced with explicitly forced results.\ntryCheckCasesDKF,
  checkCasesDKF - special case to report any counter example found\nwhen trying to
  add a dart and kite to a boundary edge of an explicitly Forced forcible.\n \nRemoved
  warning pragma for makeUncheckedTgraph\n\n## version 1.3 -- 2025-5-19\n\n(New)\nIntroduced
  newtype operator Forced\nto enable restricting functions which require a forced
  argument.\nForced a is an explicitly forced version of a.\n\nBreaking changes:\n\nRemoved:
  \nuncheckedCompose (use new composeF with explicitly Forced Tgraph)\nuncheckedPartCompose
  (use new partComposeF with explicitly Forced Tgraph)\n\nChanged types (to make use
  of Forced) for:\ncompForce\nallCompForce\nmaxCompForce\nboundaryVCovering\nboundaryECovering\nsingleChoiceEdges\n\nRemoved
  deprecated: \nnoFails (use runTry . concatFails)\ncolourMaybeDKG (use colourDKG
  with transparent)\nfillMaybeDK (use fillDK with transparent)\nfillMaybePieceDK (use
  fillPieceDK with transparent)\n\nRenamed:\ntryOneStepF is now tryOneStepForce\n\nOther
  changes:\n\n(New)\nforgetF :: Forced a -> a (to unwrap explicitly Forced)\ntryForceF
  (to create explicitly Forced)\nforceF (to create explicitly Forced)\ncomposeF ::
  Forced Tgraph -> Forced Tgraph\npartComposeF :: Forced Tgraph -> ([TileFace], Forced
  Tgraph)\n\nAdded warning in PKD for makeUncheckedTgraph\n\n\n## version 1.2.1 --
  2025-4-2\n\nAdded: drawBoundaryJoins, joinDashing\n\nRenamed: drawEdge, drawEdges
  as drawLocatedEdge, drawLocatedEdges\nDepracating: drawEdge, drawEdges\n\nGeneralised:
  colourDKG, fillDK, fillKD, fillPieceDK, fillOnlyPiece\nto work with AlphaColours
  as well as Colours\n\nDeprecating: colourMaybeDKG, fillMaybeDK, fillMaybePieceDK\n\nAdded
  (strict) makeRD, makeLD, makeRK, makeLK to Tgraph.Prelude\n\n\n## version 1.2 --
  2024-12-1\n\nRelease candidate:\nIntroduced getDartInfoForced and improved performance
  of uncheckedPartCompose and uncheckedCompose\nremoved: composedFaces = snd . partComposeFaces
  \ (all in Tgraph.Compose)\n\nSignificant improvement on space usage (fixing leaks)\nadding
  StrictData to modules Tgraph.HalfTile, Tgraph.Compose, Tgraph.Force.\nmakeUncheckedTgraph
  now strictly evaluates its argument list of faces.\n\nMade UpdateGenerator a newtype
  in Tgraph.Force\n\n## 1.1.1 -- 2024-11-15\n\nExposed combineUpdateGenerators in
  Tgraph.Force\n\nReordered lists of faces in some basic example Tgraphs\n(to ensure
  tails of the list are also valid as Tgraphs)\n\n## 1.1.0 -- 2024-09-28\n\nRelease
  candidate: \n\nAdded module CheckBackend with class OKBackend. This is really a
  class synonym for the constraints on a suitable Backend\nfor drawing tilings. Most
  types involving a backend b now have a constraint OKBackend b => ...\n\nRemoved
  type synonym: type Diagram2D b = QDiagram b V2 Double Any (no longer needed with
  the above constraint).\n\nNo longer exporting: differing, changeVFMap, forcedDecomp
  (= force . decompose).\n\nMoved makeTgraph to Tgraph.Prelude.\nMoved emplaceChoices
  to TgraphExamples and added example.\nMoved module Tgraph.Try out of Tgraph (so
  now module Try).\n\ntryStepForceWith now raises an error for negative number of
  steps.\n\nAdded graphBoundaryVs to Tgraph.Prelude.\nAdded tryBoundaryFaceGraph to
  Tgraphs\n\nMade ForceState an instance of Show.\n\nImproved haddock comments in
  Tgraph.Force.\n\nChanged dash sizes for join edges (in dashjOnly).\n\n## 1.0.0 --
  2024-04-08\n\nRelease candidate: \n\nAdded upper bounds on dependencies\n\nAdded
  new drawEmpire and changed drawEmpire1, drawEmpire2 to showEmpire1, showEmpire2\n\n##
  0.10.0.0 -- 2024-04-1\n\nRemoved some examples in TgraphExamples and export of some
  auxiliary functions in Tgraph.Relabelling\n\n## 0.9.1.0 -- 2024-03-12\n\nTgraph.Try
  as a separate module (instead of part of Tgraph.Prelude)\nAdded labelColourSize
  in DrawableLabelled with labelSize as special case\nChanges to labelSize and line
  widths in some diagrams and drawing functions.\nRemoved labelSmall, labelLarge.\nAdded
  drawTrackedTgraphAligned.\nBoth restrictVP and relevantVP now check for missing
  locations.\n\n## 0.8.0.2 -- 2024-02-25\n\nDocumentation changes only.\n\n## 0.8.0.1
  -- 2024-02-24\n\nFewer exported functions (Tgraph.Prelude, Tgraph.Relabelling),
  some renaming\n\n## 0.7.0.0 -- 2024-02-18\n\nExport of modules specified and changed
  (with more hiding)\n\n## 0.6.0.0 -- 2024-02-17\n\nNow as a standalone library\n\n##
  0.5.2.0 -- 2024-02-14\n\nAdded PKD (overall wrapper module).\n\n## 0.5.1.0 -- 2024-02-13\n\nRemoved
  Tgraph.Convert (Conversions now included in Tgraph.Prelude)\n\n## 0.5.0.0 -- 2024-01-26\n\n(Removed
  ChosenBackEnd)\nOnly Main now imports a Backend (in preparation for creating library
  only).\nTypes have been generalised in modules that were previously using Backend
  B \ne.g.\n\n    pCompFig :: Diagram B\n\nhas become\n\n    pCompFig :: Renderable
  (Path V2 Double) b => Diagram2D b\n\n\n## 0.4.0.0 -- 2023-10-27\n\nTgraphs now defined
  as newType\n\n## 0.3.0.0 -- 2023-10-19\n\nModules: \n    src/\n      HalfTile.hs
  \             -- (Half)Tile constructors - used by TileLib and Tgraph.Prelude\n
  \     ChosenBackend.hs         -- switch between e.g. SVG or PostScript\n      TileLib.hs
  \              -- Drawing of Pieces (and Patches)\n      Tgraphs.hs               --
  Main Graph Ops (imports and reexports all modules in Tgraph and adds extra ops)\n
  \     Tgraph/\n         Tgraph.Prelude.hs     -- (imports and reexports HalfTile)\n
  \        Tgraph.Decompose.hs\n         Tgraph.Compose.hs\n         Tgraph.Force.hs\n
  \        Tgraph.Convert.hs     -- Converting Tgraphs to VPatches (and drawing both)\n
  \     TgraphExamples.hs\n\n## 0.2.0.0 -- 2022-03-31\n\nRestructured modules\n\nGraphs
  and Graph ops are collected in Tgraphs.hs\nConverting functions (and VPatch definition)
  are in Tgraph.Convert.hs\nGraph example figures are in TgraphExamples.hs\n\nOriginal
  underlying Tile ops and tile drawing are in TileLib.hs\n\n## 0.2.0.0 -- 2021-06-18\n\nNew
  Graph representations and operations on graphs (decomposeG, composeG, force, and
  more)\nTools to convert to Patches for drawing etc and also intermediate VPatches,
  to display Vertex information.\n\nKey changes to original TileLib.hs : \n\n1.  New
  versions of tile halves using polymorphic versions of constructors in HalfTile.hs\n2.
  \ Pieces (replaces Components)\n3.  Redefining Patches as a list of Located Pieces
  (Pieces with point position rather than an offset vector)\n4.  Making Patches transformable
  (so that scale, rotate, translate can be used instead of specialised versions)\n\nalso
  fillDK became fillDK' with new version of fillDK\n\n## 0.1.0.0 -- 2021-03-16\n\nFirst
  version.\nVector representations and drawing tools for tile components and patches
  plus decompose and inflate operations.\nDescribed in <https://readerunner.wordpress.com/2021/03/20/diagrams-for-penrose-tiles/>\n"
changelog-type: markdown
description: "# PenroseKiteDart\n\nAuthor: Chris Reade\n\nMarch 2021 - 2025\n\nSee
  LICENSE file\n\n## Penrose Kites and Darts\n\nPenrose\\'s kite and dart tiles have
  the property that they can tile the entire plane aperiodicly.\nThere are rules to
  ensure legal tilings with the kites and darts.\nLegal tilings can still get stuck
  (so cannot be continued to cover the entire plane) - these are called incorrect
  tilings.\n\nThis package is a Haskell library of tools to build, draw and explore
  finite tilings with kites and darts, making use of the \nHaskell Diagrams package.\n\n##
  Using the Package\n\nYou will need the Haskell Diagrams package\nto be installed
  as well as this package (PenroseKiteDart). (See [Haskell Diagrams](https://diagrams.github.io)).\nOnce
  installed, a Main.hs module to produce diagrams should import a chosen backend for
  Diagrams such as the default (SVG)\nalong with Diagrams.Prelude\n\n    module Main
  (main) where\n    \n    import Diagrams.Backend.SVG.CmdLine\n    import Diagrams.Prelude\n\nplus
  (for Penrose Kite and Dart tilings)\n\n    import PKD\n\nand optionally\n\n    import
  TgraphExamples\n\nThen to ouput someExample figure\n\n    fig::Diagram B\n    fig
  = someExample\n\n    main :: IO ()\n    main = mainWith fig\n\nWhen the code is
  executed it will generate an SVG file.\n(See the Haskell Diagrams package for more
  details on producing diagrams.)\n\n## Tgraphs to Describe Finite Tilings\n\nTile
  Graphs (`Tgraph`s) use a simple planar graph representation for finite patches of
  tiles.\nA `Tgraph` is made from a list of faces with type `TileFace` each of which
  is a half-dart or a half-kite.\nEach `TileFace` is thus a triangle with three positive
  Int vertices and a constructor\n`LD` (left dart), `RD` (right dart), `LK` (left
  kite), `RK` (right kite).\n\nFor example a fool consists of two kites and a dart
  (= 4 half kites and 2 half darts):\n\n    fool :: Tgraph\n    fool = makeTgraph
  [RD (1,2,3),LD (1,3,4)   -- right and left dart\n                      ,LK (5,3,2),RK
  (5,2,7)   -- left and right kite\n                      ,RK (5,4,3),LK (5,6,4)   --
  right and left kite\n                      ]\n\nThe function\n\n    makeTgraph ::
  [TileFace] -> Tgraph\n\nperforms checks to make sure the tiling is legal, raising
  an error if there is a problem.\nTo produce a diagram, we simply draw the `Tgraph`\n\n
  \   foolFigure :: Diagram B\n    foolFigure = labelled draw fool\n\n\n## Modules\n\nModule
  `PKD` is the main module which imports and re-exports everything.\nThat is, module
  `TileLib` and `TileLibP3` and the Tgraph modules\n`Tgraph.Compose`, `Tgraph.Decompose`,
  `Tgraph.Force`, `Tgraph.Relabelling`, `Tgraph.Prelude`, `Tgraph.Extras`.\n\n`Try`
  is imported and re-exported by `Tgraph.Prelude` (used for results of partial functions).\n\n`HalfTile`
  is imported and re-exported by `Tgraph.Prelude` (with the constructors `LD`,`RD`,`LK`,`RK`).\n\n`CheckBackend`
  is imported by `TileLib` which rexports class `OKBackend`.\n(The constraint `OKBackend
  b =>` is used extensively in the library to abstract types from any particular Backend).\n\n`TgraphExamples`
  contains example Tgraphs and Diagrams.\n\nNew in version 1.4.4 `TileLibP3` is for
  converting to and drawing\nPenrose\\'s P3 tilings (rhombuses)\n\n## Further Information\n\nA
  more detailed User Guide for the PenroseKiteDart package can be found at\n\n- [PenroseKiteDart
  User Guide](https://readerunner.wordpress.com/2024/04/08/penrosekitedart-user-guides/)\n\n\n"
description-type: markdown
hash: f976e099d9221e58b72450acccf5b5742426f9f6d05884d52fbb4222110d812c
homepage: https://github.com/chrisreade/PenroseKiteDart#readme
latest: 1.4.5
license-name: BSD-3-Clause
maintainer: chrisreade@mac.com
synopsis: Library to explore Penrose's Kite and Dart Tilings.
test-bench-deps:
  PenroseKiteDart: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0.6.7 && <0.7'
  diagrams-lib: '>=1.4.6 && <1.5'
  hspec: '>=2.10.10 && <2.12'
