all-versions:
- '0.1'
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
author: Brett Letner <brettletner@gmail.com>
basic-deps:
  Cabal: '>=0'
  array: '>=0'
  base: <5
  cmdargs: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  derive: '>=0'
  directory: '>=0'
  filepath: '>=0'
  grm: '>=0'
  mtl: '>=0'
  old-time: '>=0'
  pec: '>=0'
  process: '>=0'
  shake: '>=0.2.9'
  syb: '>=0'
  uniplate: '>=0'
  wl-pprint: '>=0'
changelog: |-
  Changes since the last release:
    - eliminated inline Haskell code in pec syntax (that was an ugly idea :)
    - rewrite to better support multiple backends
    - added C backend support
    - now using grm instead of bnfc
    - added stack, queue, deque container types to pec lib
    - more test cases including some project euler
changelog-type: text
description: |
  Introducing the pec language and pec embedded compiler.

  The intent of pec is to provide a drop-in replacement for C, but with
  modern language features.  Pec is a procedural language with a
  functional/declarative feel.  Programming in pec is very similar to
  monadic programming in Haskell.  The primary use case for pec is to
  provide a productive environment for writing safe, efficient, embedded
  applications.

  Feature list
    - Easy C integration
    - No garbage collection
    - Strong typing with Hindley-Milner type inference
    - Safe pointers, no indexing out of bounds
    - Variants, arrays, tuples, records, arbitrary sized integers
    - User defined, polymorphic data structures
    - Parametric polymorphism, limited ad-hoc polymorphism
    - Modules
    - Compiles to C and LLVM
    - Haskell-ish syntax/layout
    - BSD license

  Building
    - type 'make'
    - resolve all hackage dependencies
    - type 'make' again
    - go and get a cup of coffee :)

  Pec (the language and the compiler) is in the alpha stage of
  development.  The compiler is implemented in Haskell and has a very
  small codebase (thanks to several existing Haskell tools/libraries).

  You can download and install pec via cabal or access the git
  repository on github (git@github.com:stevezhee/pec.git).  You'll need
  to have a c compiler installed to build the examples.

  Any feedback on the design and/or implementation of pec would be
  greatly appreciated :)

  Thanks,
  Brett
  brettletner at gmail dot com
description-type: text
hash: e106b799e0a1a4c0926d941cd7fa26619fa1276875cee588961fdaad6daef43a
homepage: ''
latest: 0.2.3
license-name: BSD-3-Clause
maintainer: Brett Letner <brettletner@gmail.com>
synopsis: pec embedded compiler
test-bench-deps: {}
