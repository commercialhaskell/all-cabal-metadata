all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
- 0.0.0.7
- 0.0.0.8
- 0.0.0.9
- 0.0.0.10
- 0.0.0.11
- 0.0.0.12
- 0.0.0.13
- 0.0.0.14
- 0.0.0.15
- 0.0.0.16
- 0.0.0.17
- 0.0.0.18
- 0.0.0.19
- 0.0.0.20
- 0.0.0.21
- 0.0.0.22
- 0.0.0.23
- 0.0.0.24
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.4.1
- 0.1.4.2
- 0.1.4.3
- 0.1.4.4
- 0.1.4.5
- 0.1.5.5
- 0.1.6.0
- 0.1.6.1
- 0.1.6.2
- 0.1.6.3
- 0.1.6.4
- 0.1.6.5
- 0.1.6.6
- 0.1.6.7
- 0.1.6.8
- 0.1.6.9
- 0.1.6.10
author: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
basic-deps:
  asn1-encoding: '>=0.9 && <0.10'
  asn1-types: '>=0.3 && <0.4'
  base: '>=4 && <5'
  bytable: '>=0.1 && <0.2'
  bytestring: '>=0.10 && <0.11'
  cipher-aes: '>=0.2 && <0.3'
  crypto-numbers: '>=0.2 && <0.3'
  crypto-pubkey: '>=0.2 && <0.3'
  crypto-pubkey-types: '>=0.4 && <0.5'
  crypto-random: '>=0.0 && <0.1'
  cryptohash: '>=0.11 && <0.12'
  handle-like: '>=0.1 && <0.2'
  monad-control: '>=1.0 && <1.1'
  monads-tf: '>=0.1 && <0.2'
  pem: '>=0.2 && <0.3'
  peyotls-codec: '>=0.3 && <0.4'
  stm: '>=2.4 && <2.5'
  transformers-base: '>=0.4 && <0.5'
  x509: '>=1.5 && <1.6'
  x509-store: '>=1.5 && <1.6'
  x509-validation: '>=1.5 && <1.6'
changelog: ''
changelog-type: ''
description: "Currently implement the TLS1.2 protocol (RFC 5246, RFC 4492) only,\nand
  support the following cipher suites.\n\n* TLS_RSA_WITH_AES_128_CBC_SHA\n\n* TLS_RSA_WITH_AES_128_CBC_SHA256\n\n*
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n\n* TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\n\n* TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\n\n*
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n\n* TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\n\n*
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\n\nimplement the following curves\n\n* SEC
  p256r1\n\nAnd support client certificate with the following algorithms.\n\n* RSA
  with SHA256\n\n* ECDSA with SHA256\n\nAnd support secure renegotiation (RFC 5746)\n\nCurrently
  not implement the following features.\n\n* session resumption (RFC 5077)\n\n* curves
  other than SEC p256r1\n\nServer sample\n\n* file: examples/simpleServer.hs\n\nlocalhost.key:
  key file\n\n> -----BEGIN RSA PRIVATE KEY-----\n> ...\n> -----END RSA PRIVATE KEY-----\n\nlocalhost.crt:
  certificate file\n\n> -----BEGIN CERTIFICATE-----\n> ...\n> -----END CERTIFICATE-----\n\nexamples/simpleServer.hs\n\nextensions\n\n*
  OverloadedStrings\n\n* PackageImports\n\n> import Control.Applicative\n> import
  Control.Monad\n> import \"monads-tf\" Control.Monad.State\n> import Control.Concurrent\n>
  import Data.HandleLike\n> import Network\n> import Network.PeyoTLS.Server\n> import
  Network.PeyoTLS.ReadFile\n> import \"crypto-random\" Crypto.Random\n>\n> import
  qualified Data.ByteString as BS\n> import qualified Data.ByteString.Char8 as BSC\n>\n>
  main :: IO ()\n> main = do\n>\tk <- readKey \"localhost.key\"\n>\tc <- readCertificateChain
  [\"localhost.crt\"]\n>\tg0 <- cprgCreate <$> createEntropyPool :: IO SystemRNG\n>\tsoc
  <- listenOn $ PortNumber 443\n>\tvoid . (`runStateT` g0) . forever $ do\n>\t\t(h,
  _, _) <- liftIO $ accept soc\n>\t\tg <- StateT $ return . cprgFork\n>\t\tliftIO
  . forkIO . (`run` g) $ do\n>\t\t\tp <- open h [\"TLS_RSA_WITH_AES_128_CBC_SHA\"]
  [(k, c)]\n>\t\t\t\tNothing\n>\t\t\tdoUntil BS.null (hlGetLine p) >>= liftIO . mapM_
  BSC.putStrLn\n>\t\t\thlPut p $ BS.concat [\n>\t\t\t\t\"HTTP/1.1 200 OK\\r\\n\",\n>\t\t\t\t\"Transfer-Encoding:
  chunked\\r\\n\",\n>\t\t\t\t\"Content-Type: text/plain\\r\\n\\r\\n\",\n>\t\t\t\t\"5\\r\\nHello0\\r\\n\\r\\n\"
  ]\n>\t\t\thlClose p\n>\n> doUntil :: Monad m => (a -> Bool) -> m a -> m [a]\n> doUntil
  p rd = rd >>= \\x ->\n>\t(if p x then return . (: []) else (`liftM` doUntil p rd)
  . (:)) x\n\nClient sample (only show HTTP header)\n\n* file: examples/simpleClient.hs\n\ncacert.pem:
  self-signed root certificate to validate server\n\n> -----BEGIN CERTIFICATE-----\n>
  ...\n> -----END CERTIFICATE-----\n\nexamples/simpleClient.hs\n\nextensions\n\n*
  OverloadedStrings\n\n* PackageImports\n\n> import Control.Applicative\n> import
  Control.Monad\n> import \"monads-tf\" Control.Monad.Trans\n> import Data.HandleLike\n>
  import Network\n> import Network.PeyoTLS.ReadFile\n> import Network.PeyoTLS.Client\n>
  import \"crypto-random\" Crypto.Random\n>\n> import qualified Data.ByteString.Char8
  as BSC\n>\n> main :: IO ()\n> main = do\n> \tca <- readCertificateStore [\"cacert.pem\"]\n>
  \th <- connectTo \"localhost\" $ PortNumber 443\n> \tg <- cprgCreate <$> createEntropyPool
  :: IO SystemRNG\n> \t(`run` g) $ do\n> \t\tp <- open' h \"localhost\" [\"TLS_RSA_WITH_AES_128_CBC_SHA\"]
  [] ca\n>\t\tnms <- getNames p\n> \t\thlPut p \"GET / HTTP/1.1 \\r\\n\"\n> \t\thlPut
  p \"Host: localhost\\r\\n\\r\\n\"\n> \t\tdoUntil BSC.null (hlGetLine p) >>= liftIO
  . mapM_ BSC.putStrLn\n> \t\thlClose p\n>\n> doUntil :: Monad m => (a -> Bool) ->
  m a -> m [a]\n> doUntil p rd = rd >>= \\x ->\n> \t(if p x then return . (: []) else
  (`liftM` doUntil p rd) . (:)) x\n\nClient certificate server\n\n* file: examples/clcertServer.hs\n\n>
  % diff examples/simpleServer.hs examples/clcertServer.hs\n> 19a20\n> >\tca <- readCertificateStore
  [\"cacert.pem\"]\n> 27c28\n> <\t\t\t\tNothing\n> ---\n> >\t\t\t\t$ Just ca\n\nClient
  certificate client (RSA certificate)\n\n* file: examples/clcertClient.hs\n\n> %
  diff examples/simpleClient.hs examples/clcertClient.hs\n> 15a16,17\n> >\trk <- readKey
  \"client_rsa.key\"\n> >\trc <- readCertificateChain [\"client_rsa.crt\"]\n> 20c22\n>
  <\t\tp <- open' h \"localhost\" [\"TLS_RSA_WITH_AES_128_CBC_SHA\"] [] ca\n> ---\n>
  >\t\tp <- open' h \"localhost\" [\"TLS_RSA_WITH_AES_128_CBC_SHA\"] [(rk, rc)] ca\n\nClient
  certificate client (ECDSA or RSA certificate)\n\n* file: examples/clcertEcdsaClient.hs\n\n>
  % diff examples/clcertClient.hs examples/clcertEcdsaClient.hs\n> 17a18,19\n> >\tek
  <- readKey \"client_ecdsa.key\"\n> >\tec <- readCertificateChain [\"client_ecdsa.crt\"]\n>
  22c24\n> <\t\tp <- open' h \"localhost\" [\"TLS_RSA_WITH_AES_128_CBC_SHA\"] [(rk,
  rc)] ca\n> ---\n> >\t\tp <- open' h \"localhost\" [\"TLS_RSA_WITH_AES_128_CBC_SHA\"]
  [(ek, ec), (rk, rc)] ca\n\nECC server (use ECC or RSA depending on client)\n\n*
  file: examples/eccServer.hs\n\n> % diff examples/simpleServer.hs examples/eccServer.hs\n>
  15a16,26\n> > cipherSuites :: [CipherSuite]\n> > cipherSuites = [\n> >       \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n> >       \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n> >       \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n> >       \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_RSA_WITH_AES_128_CBC_SHA\" ]\n> >\n> 18,19c29,32\n> <       k <- readKey
  \"localhost.key\"\n> <       c <- readCertificateChain [\"localhost.crt\"]\n> ---\n>
  >       rk <- readKey \"localhost.key\"\n> >       rc <- readCertificateChain [\"localhost.crt\"]\n>
  >       ek <- readKey \"localhost_ecdsa.key\"\n> >       ec <- readCertificateChain
  [\"localhost_ecdsa.crt\"]\n> 26c39\n> <                       p <- open h [\"TLS_RSA_WITH_AES_128_CBC_SHA\"]
  [(k, c)]\n> ---\n> >                       p <- open h cipherSuites [(rk, rc), (ek,
  ec)]\n\nECC client (use ECC or RSA depending on server)\n\n* file: examples/eccClient.hs\n\n>
  % diff examples/simpleClient.hs examples/eccClient.hs\n> 13a14,24\n> > cipherSuites
  :: [CipherSuite]\n> > cipherSuites = [\n> >       \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA\",\n> >       \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\",\n> >       \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n> >       \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n>
  >       \"TLS_RSA_WITH_AES_128_CBC_SHA\" ]\n> >\n> 20c31\n> <               p <-
  open' h \"localhost\" [\"TLS_RSA_WITH_AES_128_CBC_SHA\"] [] ca\n> ---\n> >               p
  <- open' h \"localhost\" cipherSuites [] ca\n"
description-type: haddock
hash: 74924f40ad3bb6a4d6c34007ee12808b4e8f152d531691f09e1591f367c5f921
homepage: https://github.com/YoshikuniJujo/peyotls/wiki
latest: 0.1.6.10
license-name: BSD-3-Clause
maintainer: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
synopsis: Pretty Easy YOshikuni-made TLS library
test-bench-deps:
  base: '>=4 && <5'
  bytestring: '>=0.10 && <0.11'
  crypto-random: '>=0.0 && <0.1'
  handle-like: '>=0.1 && <0.2'
  network: '>=2.4 && <2.5'
  peyotls: '>=0'
  random: '>=1.0 && <1.1'
  stm: '>=2.4 && <2.5'
  x509: '>=1.5 && <1.6'
  x509-store: '>=1.5 && <1.6'
