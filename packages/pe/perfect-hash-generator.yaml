homepage: https://github.com/kostmo/perfect-hash-generator#readme
changelog-type: markdown
hash: 0a0c71a4ff572db04b49e8d0083472f9b2395276f066419f0b6eaa5bce75a69a
test-bench-deps:
  test-framework-hunit: -any
  bytestring: -any
  test-framework: -any
  perfect-hash-generator: -any
  base: '>=4.5 && <5'
  unordered-containers: -any
  text: -any
  data-default: -any
  HUnit: -any
  containers: -any
  binary: -any
  hashable: -any
  optparse-applicative: -any
  random: -any
  vector: -any
maintainer: Karl Ostmo <kostmo@gmail.com>
synopsis: Perfect minimal hashing implementation in native Haskell
changelog: |
  ## 0.2.0.1 (Feb. 2018)

  * Fixed a foldr vs. foldl bug with algorithmic implications

  ## 1.0.0 (June 2022)

  * Changed input type from `HashMap` to `Map`
  * Removed superfluous internal map lookups by threading values alongside keys throughout the algorithm
  * Used newtypes internally for algorithmic clarity
basic-deps:
  bytestring: -any
  perfect-hash-generator: -any
  base: '>=4.5 && <5'
  unordered-containers: -any
  text: -any
  filepath: -any
  data-default: -any
  sorted-list: -any
  containers: -any
  binary: -any
  hashable: -any
  optparse-applicative: -any
  random: -any
  data-ordlist: -any
  vector: -any
  directory: -any
all-versions:
- 1.0.0
author: Karl Ostmo <kostmo@gmail.com>
latest: 1.0.0
description-type: haddock
description: |-
  A <https://en.wikipedia.org/wiki/Perfect_hash_function perfect hash function> for a set @S@ is a hash function that maps distinct elements in @S@ to a set of integers, with __no collisions__. A <https://en.wikipedia.org/wiki/Perfect_hash_function#Minimal_perfect_hash_function minimal perfect hash function> is a perfect hash function that maps @n@ keys to @n@ __consecutive__ integers, e.g. the numbers from @0@ to @n-1@.

  In contrast with the <https://hackage.haskell.org/package/PerfectHash PerfectHash package>, which is a binding to a C-based library, this package is a fully-native Haskell implementation.

  It is intended primarily for generating C code for embedded applications (compare to @<https://www.gnu.org/software/gperf/manual/gperf.html#Search-Structures gperf>@). The output of this tool is a pair of arrays that can be included in generated C code for __<https://en.wikipedia.org/wiki/C_dynamic_memory_allocation allocation-free> hash tables__.

  Though conceivably this data structure could be used directly in Haskell applications as a read-only hash table, it is not recommened, as lookups are about 10x slower than <https://hackage.haskell.org/package/unordered-containers/docs/Data-HashMap-Strict.html#t:HashMap HashMap>.

  This implementation was adapted from <http://stevehanov.ca/blog/index.php?id=119 Steve Hanov's Blog>.

  = Usage
  The library is written generically to hash both strings and raw integers according to the <http://isthe.com/chongo/tech/comp/fnv/ FNV-1a algorithm>. Integers are split by octets before hashing.

  > import Data.PerfectHash.Construction (createMinimalPerfectHash)
  > import qualified Data.Map as Map
  >
  > tuples = [
  >    (1000, 1)
  >  , (5555, 2)
  >  , (9876, 3)
  >  ]
  >
  > lookup_table = createMinimalPerfectHash $ Map.fromList tuples

  Generation of C code based on the arrays in @lookup_table@ is left as an exercise to the reader. Algorithm documentation in the "Data.PerfectHash.Hashing" and "Data.PerfectHash.Lookup" modules will be helpful.

  = Demo
  See the @hash-perfectly-strings-demo@ and @hash-perfectly-ints-demo@, as well as the test suite, for working examples.

  > $ stack build
  > $ stack exec hash-perfectly-strings-demo
license-name: Apache-2.0
