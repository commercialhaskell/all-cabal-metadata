all-versions:
- '0.1'
- '0.2'
author: Dustin DeWeese
basic-deps:
  base: <5
  containers: '>=0'
  filepath: '>=0'
  haskeline: '>=0'
  logict: '>=0'
  mtl: '>=0'
  parsec: '>=0'
changelog: ''
changelog-type: ''
description: "Peg Programming Language\n========================\n\nOverview\n--------\n\nPeg
  is a lazy non-deterministic concatenative programming language inspired by Haskell,
  Joy, and Prolog.\n\nIn contrast to most concatenative programming languages, Peg
  starts evaluation from the right, evaluating arguments to the left as needed.\n\nFor
  example, even though the word `no` can never be resolved:\n\n    no 1 2 + --> no
  3\n\nThis is because `+` requires only two arguments on the stack.\n\nAnother demonstration
  of laziness:\n\n    0 [1+] iterate\n\nThis creates the infinite stack `.. 3 2 1
  0`.  Try `pop`ing a few times to see how it works.\n\nBranching is accomplished
  with the choice operator `\\/`. Both paths are followed non-deterministically.  Paths
  are terminated when a word cannot be resolved.\n\nMultiple definitions for a word
  cause the definitions to be substituted non-deterministically.  This allows words
  (even built-in words) to be extended for new types.\n\nFor example, to extend `sqrt`
  to operate on the word `Four`:\n\n    [Four eq? Two swap assert] \"sqrt\" :def\n\nA
  word can only be resolved if the word can operate on its arguments.  The built-in
  words `assert` and `deny` can only be resolved on the arguments `True` and `False`
  respectively.  `ifte` is provided as part of the library.\n\n    [ 1 ] 2 \\/ popr
  --> [ ] 1\n\nThe basic types are integers, floats, characters, words, and stacks.
  \ As with the top level stack, these stacks are evaluated lazily.  Stacks are 'live',
  and will be evaluated as demanded, by such words as `popr`.  There is no way to
  directly extract an item from the left, and there is no way to extract an item without
  evaluation.\n\n    [1 2 3 +] popr --> [1] 5\n\nA string literal is a stack consisting
  only of characters.  They are read and displayed backwards from stacks, to make
  them readable.\n\n    ['o' 'l' 'l' 'e' 'h'] --> \"hello\"\n    \"hello\" 0 pushr
  --> ['o' 'l' 'l' 'e' 'h' 0]\n\nPeg is flat, in that any expression can be divided
  on white space (except inside a literal), the pieces evaluated independently, and
  when the results are concatenated, evaluate to an equivalent expression to the original
  expression.\n\nExample:\n\n    [ 1 2 + ] popr --> [ ] 3\n    [ 1 2 +        -->
  [ 3\n    ] popr         --> ] popr\n    [ 3 ] popr     --> [ ] 3\n\nInstead of using
  a monad to implement pure functional I/O, Peg simply uses a token representing the
  state of the world, `IO`.  Words that perform I/O must require `IO` as an argument.
  \ If the word does not put it back, it will destroy the world.\n\n`IO` can only
  be introduced from the top-level, by typing `IO`.  In other places, such as definitions
  and `read`, `IO` is parsed as a word with no special meaning.\n\nBuilt-in Words\n--------------\n\nThe
  format below is:\n\n`input stack` `word` --> `output stack` \\/ `alternate output
  stack` -- notes\n\n--------------------------------\n\n`x` `pop` --> \n\n`x` `y`
  `swap` --> `y` `x`\n\n`x` `dup` --> `x` `x`\n\n`[` `xn` .. `x0` `]` --> `[xn ..
  x0]` -- gathers stack items into a list until `[` if possible\n\n`[ .. ]` `x` `pushr`
  --> `[ .. x]`\n\n`[ .. x]` `popr` --> `[ .. ]` `x` -- forces evaluation of `x`\n\n`[
  .. x]` `[y ..]` `.` --> `[ .. x y .. ]` -- concatenates stacks without evaluating
  anything\n\n`[ .. ]` `dupnull?` --> `[ .. ]` (`True` \\/ `False`) -- indicates if
  the stack is empty, works on partial stacks\n\n`True` `assert` --> -- only resolves
  if the argument is `True`\n\n`False` `deny` --> -- opposite of assert\n\n`x` `y`
  `\\/` --> `x` \\/ `y` -- continues execution non-deterministically with `x` and
  `y`\n\n`int?`, `float?`, `word?`, `list?`, `char?`, `string?` -- test type of argument,
  returning `True` or `False`\n \n`x` `y` `eq?` --> `True` \\/ `False` -- is `x` a
  primitive type (non-stack) equal to `y` (also not a stack)\n\n`[ .. ]` `\"word-name\"`
  `:def` --> -- define the word `word-name` to be equivalent to the stack argument\n\n`\"word-name\"`
  `:undef` --> -- undefine the word `word-name`\n\n`[ .. ]` `$` --> ` .. ` -- append
  stack argument to upper level stack and execute\n\n`x` `y` `seq` --> `x` `y` --
  force evaluation of `x`\n\n`x` `show` --> `\"x\"` -- convert `x` into string representation\n\n`\"x\"`
  `read` --> `x` -- convert string representation of `x` into `x`, opposite of `show`\n\n`+`,
  `-`, `*`, `div`, `^`, `^^`, `**`, `exp`, `sqrt`, `log`, `logBase`, `sin`, `tan`,
  `cos`, `asin`, `atan`, `acos`, `sinh`, `tanh`, `cosh`, `asinh`, `atanh`, `acosh`,
  `<`, `<=`, `>`, `>=`, `realToFrac`, `round`, `floor`, `ceiling` -- numeric and comparison
  words defined as in Haskell Prelude\n\n`getChar`, `putChar`, `getLine`, `putStr`,
  `putStrLn` -- similar to Haskell Prelude.  Instead of running in IO monad, they
  require `IO` as the first argument, putting it back after executing\n\nA simple
  IO example:\n\n    IO \"What's your name?\" putStrLn getLine \"!\" \"Hello \" splice
  putStrLn\n\nPeg supports a curly bracket notation to allow for case statements and
  do-notation.  Curly braces trivially reduce to a nested stack.\n\n`{` --> `[` `[`\n\n`;`
  --> `]` `[`\n\n`}` --> `]` `]`\n\nUsage with `case`:\n\n    b {1 a; 2 b} case -->
  2\n\nLibrary: lib.peg\n----------------\n\nMost words are based on the Haskell Prelude,
  some stack combinators are taken from Joy.\n\n`foldr` and `foldl` are swapped from
  the Haskell definitions, because \"lists\" are stacks, and elements are added to
  the right side of a stack.  Similarly for `scanr` and `scanl`.\n\nMost of the Haskell
  Prelude is implemented, except words that aren't very useful or are replaced by
  a built-in word.\n\nRunning the Peg Interpreter\n---------------------------\n\nBuild
  the interpreter using Cabal (cabal configure; cabal build)\n\nJust call the `peg`
  executable with source files to be loaded (such as lib.peg) as arguments.\n\nThe
  interpreter evaluates the input after pressing `Enter`.  The results will be printed
  after the next prompt, allowing you to edit the results.  If the cursor is not on
  the right, a word did not have enough arguments to be evaluated; the cursor will
  be placed so that you can provide the missing arguments.  If there are multiple
  results, up to 8 results will be printed, but only the first will appear at the
  prompt.  If there are no results, the result `no` is shown, which is equivalent
  (defined in `lib.peg`).\n\n[Haskeline](http://hackage.haskell.org/package/haskeline)
  provides the line editing interface.  Clearing the input and pressing `Enter` will
  exit the interpreter.\n\nFuture\n------\n\n### I/O\n\nI have tried modeling I/O
  after Haskell's monad approach, but monads seem to be better suited to applicative
  languages, despite being possible in a concatenative language.\n\nI have implemented
  a different method of performing I/O in a pure functional way, as described above
  (I/O words require an `IO` token.)  This may allow more flexible use of I/O than
  a monad; threads could be spawned with `IO dup` and ended with `IO pop`.  Also,
  more complex operations may be possible, requiring multiple `IO`s.\n\n### Type System\n\nThe
  current idea is to use explicit type checks (such as `int?`) instead of introducing
  a different syntax for type annotations.  This would allow the type system to be
  extended using the base language, and support dependent typing.  It would also allow
  optional run time typing.\n\nThe interpreter is currently dynamically typed, but
  I would like to make the compiler support static type checking, by proving that
  the result of a computation cannot be `no`.  The compiler could also optimize away
  types and most non-determinism.  I do realize that, in general, static type checking
  will be undecidable.  The compiler will be designed to resolve undecidable types
  interactively with the user.\n\nThe language would not change significantly.  Product
  types are built from stacks, such as `[1 2 Ratio]`, and sum types are created using
  `\\/`, such as `[1 Left] \\/ ['a' Right]`, using undefined words at the top of the
  stack as tags.  Constructors can be created as the matching lowercase word, such
  as `x left --> [x Left]`.  Using the same word as the tag results in an infinitely
  nested stack, so the values can never be retrieved.\n\nI have done some work on
  types in `types.peg`, which extends some words to operate on type tags.\n\n### Modules\n\nI
  will need to add a module system to allow encapsulation.\n\n### Compiler\n\nThe
  compiler will first target C, to allow easy portability.  I am interested in running
  Peg code in embedded systems, especially because it is difficult to use other high-level
  languages such as Haskell on most microcontrollers.\n"
description-type: markdown
hash: 14ca7980fa0f3889381b6e15f03a73ea21cc607621e031bdf06227fa1019a400
homepage: http://github.com/HackerFoo/peg
latest: '0.2'
license-name: GPL-3.0-only
maintainer: dustin.deweese@gmail.com
synopsis: a lazy non-deterministic concatenative programming language
test-bench-deps: {}
