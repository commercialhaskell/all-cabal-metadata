all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
author: Naushadh <naushadh@protonmail.com>, Felipe Lessa <felipe.lessa@gmail.com>,
  Michael Snoyman
basic-deps:
  aeson: '>=1.0 && <2.3'
  base: '>=4.9 && <4.19'
  bytestring: '>=0.10.8 && <0.13'
  conduit: '>=1.2.12 && <1.4'
  containers: '>=0.5 && <0.7'
  io-streams: '>=1.2 && <2.0'
  monad-logger: '>=0.3.0 && <0.4'
  mysql-haskell: '>=1.0 && <2.0'
  network: '>=2.3 && <4.0'
  persistent: '>=2.10.0 && <3'
  persistent-mysql-pure: '>=0'
  resource-pool: <0.5
  resourcet: '>=1.1 && <1.4'
  text: '>=1.2 && <2.1 || ^>=2.1'
  time: '>=1.5.0 && <1.13'
  tls: '>=1.3.5 && <1.6 || ^>=1.7.1 || ^>=1.8.0'
  transformers: '>=0.5 && <0.7'
  unliftio-core: <0.3
changelog: |
  # ChangeLog for `persistent-mysql-pure`

  ## 1.0.2
  + update bounds

  ## 1.0.1
  + depend on mysql-haskell again since I got hackage access

  ## 1.0.0
  + fork from  `persistent-mysql-haskell`.
  + Use persistent-mysql-pure under the hood.
  + Delete all other persistent stuff.
  + Add CI
  + Add autobump action for constraints
  + Add nightly build

  ## 0.6.0

  - Port [#977](https://github.com/yesodweb/persistent/pull/977) from `persistent-mysql`: Support Stackage Nightly
  - Added `constraint=` attribute to allow users to specify foreign reference constraint names.
  - Port [#894](https://github.com/yesodweb/persistent/pull/894) from `persistent-mysql`: Remove deprecated `SomeField` type and pattern synonym. Use `HandleUpdateCollision` type instead and the `copyField` function instead of `SomeField`   constructor/pattern.

  ## 0.5.2

  - Fix [stackage#4312](https://github.com/commercialhaskell/stackage/issues/4312): Relax `network` version bound.

  ## 0.5.1

  - [#9](https://github.com/naushadh/persistent/pull/9) Add `insertEntityOnDuplicateKeyUpdate` and `insertEntityManyOnDuplicateKeyUpdate` functions

  ## 0.5.0

  - Port [#812](https://github.com/yesodweb/persistent/pull/812) from `persistent-mysql`: Add support for SQL isolation levels
  - Port [#833](https://github.com/yesodweb/persistent/pull/833) from `persistent-mysql`: `repsertMany` now matches `mapM_ (uncurry repsert)` and is atomic.

  ## 0.4.2

  - [#7](https://github.com/naushadh/persistent/pull/7) Fix boolean conversion bug.

  ## 0.4.1

  - Fix [#2](https://github.com/naushadh/persistent/issues/2): Better compatibility with `yesod` scaffold.

  ## 0.4.0

  - Port [#770](https://github.com/yesodweb/persistent/pull/770) from `persistent-mysql`: Performance enhancements for bulk writes.
  - Port [#773](https://github.com/yesodweb/persistent/pull/773) from `persistent-mysql`: Support new conduit release. Includes bundled changes from other PRs.
    - [#723](https://github.com/yesodweb/persistent/pull/723) More BackendCompatible generalizations.
    - [#760](https://github.com/yesodweb/persistent/pull/760) Rename SomeField type to HandleUpdateCollision.

  ## 0.3.6

  - Port [#752](https://github.com/yesodweb/persistent/pull/754) from `persistent-mysql`: Fix mysql sqltype migrations.

  ## 0.3.5

  - Updated `selectSource` implementation to stream results instead of loading everything into memory.

  ## 0.3.4.1

  - Fix a haddock issue down-streamed from [#693](https://github.com/yesodweb/persistent/pull/693).

  ## 0.3.4

  - Port [#693](https://github.com/yesodweb/persistent/pull/693) from `persistent-mysql`: Extend the `SomeField` type to allow `insertManyOnDuplicateKeyUpdate` to conditionally copy values.
  - Port [#702](https://github.com/yesodweb/persistent/pull/702) from `persistent-mysql`: Fix behavior of `insertManyOnDuplicateKeyUpdate` to ignore duplicate key exceptions when no updates specified.
  - Bumped TLS bounds to be in [sync with `mysql-haskell`](https://github.com/winterland1989/mysql-haskell/pull/15) and land ourselves [back on stackage](https://github.com/fpco/stackage/pull/2956).

  ## 0.3.3

  - Port from `persistent-mysql`: MySQL on duplicate key update [#674](https://github.com/yesodweb/persistent/pull/674).

  ## 0.3.2.1

  - Port from `persistent-mysql`: Prevent spurious no-op migrations when `default=NULL` is specified - revised version [#672](https://github.com/yesodweb/persistent/pull/672) (which fixes bug [#671](https://github.com/yesodweb/persistent/issues/671) introduced by the earlier attempt [#641](https://github.com/yesodweb/persistent/pull/641)).

  ## 0.3.2.0

  - Added conditional declaration of `Show` instance for mysql-haskell's `ConnectInfo` for compatibility with `mysql-haskell-0.8.1.0+`.

  ## 0.3.1.0

  - Fixed compiler warnings in `stack --pedantic` mode so the project can run upstream tests on Travis.
  - Minor README enhancements for badges and fixed URL for example when viewing outside of Github.

  ## 0.3.0.0

  - Added API for setting [TLS client parameters](https://hackage.haskell.org/package/mysql-haskell-0.8.0.0/docs/Database-MySQL-TLS.html) for secure MySQL connections.
  - Exported [Data.TLSSetting](https://hackage.haskell.org/package/tcp-streams-1.0.0.0/docs/Data-TLSSetting.html) for convenient usage of TLS.

  ## 0.2.1.0

  - Bumped up version to update README.

  ## 0.2.0.0

  - Added APIs for setting port number and character encoding.
  - Updated type signature for mkMySQLConnectInfo to align with mysql-haskell.

  ## 0.1.1.0

  - Bumped up version to include README and example.

  ## 0.1.0.0

  - Ported persistent-mysql 2.6 to use mysql-haskell as the underlying database driver.
  - Deprecated MySQLConf and ConnectInfo native constructor and default instance in favor of mk functions for better forward compatibility. See http://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility.
changelog-type: markdown
description: |
  # persistent-mysql-pure

  [![hackage version](https://img.shields.io/hackage/v/persistent-mysql-pure.svg)](https://hackage.haskell.org/package/persistent-mysql-pure)

  This is a fork of persistent-mysql-haskell.
  Using the latest [branch](https://github.com/chordify/persistent/tree/persistent-mysql-haskell-9.2)
  from chordify.

  A pure haskell backend for [persistent](https://github.com/yesodweb/persistent) using the MySQL database server.
  Internally it uses the [mysql-pure](https://github.com/jappeace/mysql-pure) driver in order to access the database.

  See [example/Main.hs](https://github.com/naushadh/persistent/blob/persistent-mysql-pure/persistent-mysql-pure/example/Main.hs) for how this MySQL backend can be used with Persistent.

  ### Motivation

  `persistent-mysql` uses [mysql](https://hackage.haskell.org/package/mysql) (via [mysql-simple](https://hackage.haskell.org/package/mysql-simple)) as the database driver. `mysql` is a haskell FFI wrapper for `mysqlclient` written in C.

  Reasons to use a pure haskell driver:

  - `mysql` has [concurrency issues](https://ro-che.info/articles/2015-04-17-safe-concurrent-mysql-pure) as noted by [@feuerbach](https://github.com/feuerbach).

  - [mysql-pure](https://hackage.haskell.org/package/mysql-pure), a pure haskell driver by [@winterland1989](https://github.com/winterland1989), outperforms `mysql-simple` in benchmarks (see hackage or project repo).

  - better portability and possible static compilation of an entire project that uses `persistent-mysql`.

  - result streaming support means persistent [`selectSource` streams data from database](http://www.jakubkonka.com/2014/01/23/conduit-haskell.html). Effectively addressing [#657 selectSource does not stream results](https://github.com/yesodweb/persistent/issues/657).

  - a newtype-d `MySQLConnectInfo` allows adding configuring _how_ persistent and the underlying driver are glued. Ex: [#679](https://github.com/yesodweb/persistent/issues/679) can be elegantly addressed in this library.

  Personal experience on replacing `mysql-simple` with `mysql-pure` in a project:

  - Performance gains consistent with benchmark.

  - Smoother deployment to [AWS](https://en.wikipedia.org/wiki/Amazon_Machine_Image), since `mysql` appears to have a hard dependency on the oracle version of `libmysqlclient` that does not work with the open source variant that is available by default on Amazon Linux (and possibly on other Linux distros).

  ### Potential issues moving from persistent-mysql to persistent-mysql-pure

  `ConnectInfo` and `defaultConnectInfo` are not the same between `mysql` and `mysql-pure`, therefore this package is not a 100% drop in replacement for persistent-mysql from the connection configuration perspective.

  - `mysql-pure` does not allow provide an API for the entirety of [mysqlclient options](https://hackage.haskell.org/package/mysql-0.1.4/docs/Database-MySQL-Base.html#t:Option). Therefore neither can this package.

  - Given the inevitable incompatibility with `persistent-mysql`, and in the interest of [providing a forward-compatible API](http://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility), `ConnectInfo` internals and `defaultConnectInfo` have been deprecated. However the similar utility can be achieved like so:

      ```diff
      import Database.Persist.MySQL

      connectInfo :: MySQLConnectInfo
      - connectInfo = defaultConnectInfo
      -             { connectHost     = "localhost"
      -             , connectUser     = "test"
      -             , connectPassword = "test"
      -             , connectDatabase = "test"
      -             }
      + connectInfo = mkMySQLConnectInfo "localhost" "test" "test" "test"

      connectInfoNewPort :: MySQLConnectInfo
      - connectInfoNewPort = connectInfo { connectPort = 3307 }
      + connectInfoNewPort = setMySQLConnectInfoPort 3307 connectInfo

      connectInfoNewCharSet :: MySQLConnectInfo
      - connectInfoNewCharSet = connectInfo { connectOptions = [CharsetName "utf8"] }
      + connectInfoNewCharSet = setMySQLConnectInfoCharset 33 connectInfo

      ```

  - `mysql-pure` and `mysql` have different APIs/mechanisms for securing the
  connection to MySQL. `persistent-mysql-pure` exposes an API to utilize
  [TLS client params](https://hackage.haskell.org/package/mysql-pure/docs/Database-MySQL-TLS.html)
  that ships with `mysql-pure`.

      ```diff
      connectInfoCustomCaStore :: MySQLConnectInfo
      - connectInfoCustomCaStore = connectInfo { connectSSL = Just customCaParams }
      + connectInfoCustomCaStore = setMySQLConnectInfoTLS customCaParams connectInfo
          where
      -         customCaParams = defaultSSLInfo { sslCAPath = "foobar.pem" }
      +         customCaParams = makeClientParams $ CustomCAStore "foobar.pem"
      ```


  Aside from connection configuration, persistent-mysql-pure is functionally on par with persistent-mysql (as of writing this). This can be seen by [comparing persistent-test between this fork and upstream](https://github.com/yesodweb/persistent/compare/master...naushadh:persistent-mysql-pure#diff-028f5df7b2b9c5c8b0fa670fc8c69bff).

  #### Yesod

  In order to use `persistent-mysql-pure` with `yesod` you have to modify `Settings.hs`:

    ```diff
    - import Database.Persist.MySQL     (MySQLConf (..))
    + import Database.Persist.MySQL     (MySQLConf, mkMySQLConf, myConnInfo, myPoolSize, setMySQLConnectInfoCharset)
    ```

    ```diff
    - import qualified Database.MySQL.Base as MySQL
    ```

    ```diff
    -         -- This code enables MySQL's strict mode, without which MySQL will truncate data.
    -         -- See https://github.com/yesodweb/persistent/wiki/Database-Configuration#strict-mode for details
    -         -- If you choose to keep strict mode enabled, it's recommended that you enable it in your my.cnf file so that it's also enabled for your MySQL console sessions.
    -         -- (If you enable it in your my.cnf file, you can delete this code).
    -         let appDatabaseConf = fromYamlAppDatabaseConf { myConnInfo = (myConnInfo fromYamlAppDatabaseConf) {
    -                 MySQL.connectOptions =
    -                   ( MySQL.connectOptions (myConnInfo fromYamlAppDatabaseConf)) ++ [MySQL.InitCommand "SET SESSION sql_mode = 'STRICT_ALL_TABLES';\0"]
    -               }
    -             }
    ```

  And in `Application.hs`:

    ```diff
    - import qualified Database.MySQL.Base as MySQL
    ```

    ```diff
      import Network.Wai.Handler.Warp             (Settings, defaultSettings,
                                                   defaultShouldDisplayException,
                                                   runSettings, setHost,
    -                                              setFork, setOnOpen, setOnClose,
    +                                              setFork,
                                                   setOnException, setPort, getPort)
    ```

    ```diff
    -     -- See http://www.yesodweb.com/blog/2016/11/use-mysql-safely-in-yesod
    -     MySQL.initLibrary
    ```

    ```diff
    -     $ setOnOpen (const $ MySQL.initThread >> return True)
    -     $ setOnClose (const MySQL.endThread)
    ```

  Optionally you may enable the MYSQL strict mode (in each transaction)
  by modifying `Foundation.hs` (or editing the `my.cnf` server configuration):

    ```diff
    - import Database.Persist.Sql (ConnectionPool, runSqlPool)
    + import Database.Persist.Sql (ConnectionPool, rawExecute, runSqlPool)
    ```

    ```diff
    -         runSqlPool action $ appConnPool master
    +         runSqlPool
    +           (rawExecute "SET SESSION sql_mode = 'STRICT_ALL_TABLES'" [] >> action)
    +           (appConnPool master)
    ```

  ### FAQs

  #### Why isn't this part of the main/upstream persistent repo?

  - TLDR: Upstream wants to gauge community interest before absorbing this backend into the main repo.
  - Long version: See [issue yesodweb/persistent/issues/659](https://github.com/yesodweb/persistent/issues/659).

  #### persistent-mysql supports X but persistent-mysql-pure API doesn't. Why?

  - Internals (getters/setters) of MySQLConnectInfo and `defaultConnectInfo` are intentionally masked for [forward compatibility](http://www.snoyman.com/blog/2016/11/designing-apis-for-extensibility).

  - For all others, feel free to open an issue and/or submit a PR.

  #### Does persistent-mysql-pure ship with tests?

  - It does! :) `persistent-test` is fully re-used with an additional flag to specifically test persistent-mysql-pure.

      - [CI/Travis](https://travis-ci.org/naushadh/persistent), see [.travis.yml](../.travis.yml).

      - Local,
      ```bash
      stack test persistent-test --flag persistent-test:mysql_haskell --exec persistent-test
      ```
description-type: markdown
hash: 0c9ff959455977f074f4edc7b8082bc8ea44511ce40d72b895422e62451486a4
homepage: http://www.yesodweb.com/book/persistent
latest: 1.0.2
license-name: MIT
maintainer: Jappie <hi@jappie.me>
synopsis: A pure haskell backend for the persistent library using MySQL database server.
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=4.9 && <5'
  bytestring: '>=0'
  containers: '>=0'
  fast-logger: '>=0'
  hspec: '>=2.4'
  http-api-data: '>=0'
  monad-logger: '>=0'
  mysql-haskell: '>=0.8'
  path-pieces: '>=0'
  persistent: '>=0'
  persistent-mysql-pure: '>=0'
  persistent-qq: '>=0'
  persistent-test: '>=0'
  quickcheck-instances: '>=0'
  resourcet: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unliftio-core: '>=0'
