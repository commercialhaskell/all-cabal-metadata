all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.3
- 0.1.1
- 0.2.0
author: Tristan Ravitch
basic-deps:
  base: '>=4 && <5'
  deepseq: '>=1 && <1.5'
  transformers: '>=0.3 && <0.6'
changelog: |
  # v0.2.0

  - Fix the slicing/take/drop operations

    The operations now have worse performance (linear), but are at least correct.  They will be replaced by more efficient implementations in later version.

  - Implement additional fold variants (David Feuer @treeowl)
  - Improve the representation of the `Vector (David Feuer @treeowl)

    It is now more compact and unboxes better. This removes some "impossible" cases from the code.

  - Strictness fixes (David Feuer @treeowl)

    Includes making `snoc` more strict, which should improve performance.

  - Fix the traversal order in `traverse`

    Before, the tail was traversed in the wrong order.
changelog-type: markdown
description: |
  # Persistent Vector

  A library providing persistent (purely functional) vectors for Haskell
  based on array mapped tries.

  ## Description

  These persistent vectors are modeled on the persistent vector used by
  clojure, with an API modeled after Data.Sequence from the containers
  library.  This data structure is *spine strict* and is not useful for
  incremental consumption.  If you need that, stick to lists.  It is
  still lazy in the elements.

  While per-element operations are O(log(n)), the internal tree can
  never be more than 7 or 8 deep.  Thus, they are effectively constant
  time.

  This implementation adds O(1) slicing support for vectors that I do
  not believe clojure supports.  The implementation cheats, though, and
  slices can retain references to objects that cannot be indexed.

  ## Performance

  Performance is an important consideration for a data structure like
  this.  The package contains a criterion benchmark suite that attempts
  to compare the performance of persistent vectors against a variety of
  existing persistent data structures.  As an overview of the results I
  have observed:

   * Traversing and building lists is faster than the same operations
     with persistent vectors.

   * (Strict) left folds over persistent vectors are faster than left
     folds over Sequences.  Right folds over Sequences are faster than
     right folds over vectors.

   * Indexing persistent vectors is faster than indexing sequences and
     IntMaps (and, of course, lists).

   * Appending to vectors is slightly faster than appending to a Sequence.
     It is much faster than appending to an IntMap.

   * Updating an element at an index in a vector is *slower* than
     updating an index in a Sequence (but still faster than an IntMap).

  Overall, it seems like persistent vectors are efficient at most tasks.
  If you only need a (strict) left fold, they are efficient for
  traversal.  Indexing and construction are very fast, but Sequences are
  superior for element-wise updates.

  ## Implementation

  ## TODO

   * More of the Data.Sequence API

   * More efficient Eq and Ord instances.  This is tricky in the
     presence of slicing.  There are faster implementations for unsliced
     inputs.

   * Implement something to make parallel reductions simple (maybe
     something like vector-strategies)

   * Implement cons.  Cons can use the space that is hidden by the
     offset cheaply.  It can also make a variant of pushTail
     (pushHead) that allocates fragments of preceeding sub-trees.
     Each cons call will modify the offset of its result vector.
description-type: markdown
hash: 77495d7f4c31f6e9b65eb707f25049fa15670d3d9e233e65e4cdb0732b44341d
homepage: https://github.com/travitch/persistent-vector
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: tristan@ravit.ch
synopsis: A persistent sequence based on array mapped tries
test-bench-deps:
  QuickCheck: '>2.4 && <2.15'
  base: '>=4 && <5'
  containers: '>=0'
  criterion: '>=1 && <1.6'
  deepseq: '>=0'
  persistent-vector: '>=0'
  test-framework: '>=0.6 && <0.9'
  test-framework-quickcheck2: '>=0.3 && <0.4'
