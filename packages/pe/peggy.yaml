all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
- 0.2.0.1
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.1.1
- 0.3.2
author: Hideyuki Tanaka
basic-deps:
  ListLike: '>=3.1 && <3.2'
  base: '>=4 && <5'
  hashtables: '>=1.0 && <1.1'
  haskell-src-meta: '>=0.5'
  monad-control: '>=0.3 && <0.4'
  mtl: '>=2.0'
  peggy: '>=0'
  template-haskell: '>=2.5 && <2.9'
changelog: ''
changelog-type: ''
description: |
  # Peggy: A Parser Generator of Parsing Expression Grammer (PEG) #

  # About

  This is an yet another parser generator of Parsing Expression Grammer (PEG) which is:

  * Simple
  * Concise
  * Fast
  * Modern

  # Usage

  You can find a recent stable release in Hackage DB.
  You can install this as following instruction:

  ~~~ {.bash}
  $ cabal update
  $ cabal install Peggy
  ~~~

  # Why should you use Peggy?

  Haskell has commonly used parser generators, one of them are Alex/Happy.
  But I think Alex/Happy are not good in these points:

  * Generates regacy codes

  Alex uses only too basic libraries.
  It does not use monad-transformers, iteratee, ListLike, Text, and so on.

  * Tradisional Regexp/CFG based parser

  Parsec has no good error recovery.

  unnun, kannun...

  ...

  # Quick Start

  Here is an example of parsing arithmetic expressions.

  ~~~ {.haskell}
  {-# QuasiQuotes #-}
  {-# Language FlexibleContexts #-}

  import Text.Peggy

  [peggy|
  exp :: Double
    = exp "+" fact  { $1 + $2 }
    / exp "-" fact  { $1 - $2 }
    / fact
  fact :: Double
    = fact "*" term { $1 * $2 }
    / fact "/" term { $1 / $2 }
    / term
  term :: Double
    = "(" exp ")"
    / number
  number ::: Double
    = ([1-9][0-9]*) { read $1 }
  |]

  main :: IO ()
  main =
    print . parse exp =<< getContents
  ~~~
description-type: markdown
hash: 89882df36deb9d9670c0923da0d43c63e197247771cc14b15f1cda2784872312
homepage: http://tanakh.github.com/Peggy
latest: 0.3.2
license-name: BSD-3-Clause
maintainer: Hideyuki Tanaka <tanaka.hideyuki@gmail.com>
synopsis: The Parser Generator for Haskell
test-bench-deps: {}
