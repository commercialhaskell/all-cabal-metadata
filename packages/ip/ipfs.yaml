homepage: https://github.com/fission-suite/ipfs-haskell#readme
changelog-type: ''
hash: 1a6f8b8ec4d8cf1e1bd8f5ed7a2a1a0758855c1304d3dc60101ec1ca16dacf69
test-bench-deps:
  envy: -any
  rio: -any
  bytestring: -any
  lens-aeson: -any
  flow: -any
  base: <5
  servant-client: -any
  text: -any
  doctest: -any
  servant: -any
  lens: -any
  regex-compat: -any
  servant-multipart-api: -any
  servant-multipart: -any
  directory-tree: -any
  network-ip: -any
  swagger2: -any
  monad-logger: -any
  QuickCheck: -any
  servant-multipart-client: -any
  Glob: -any
  aeson: -any
  yaml: -any
  http-media: -any
  vector: -any
  directory: -any
maintainer: |-
  brooklyn@fission.codes,
  daniel@fission.codes,
  steven@fission.codes,
  james@fission.codes
synopsis: Access IPFS locally and remotely
changelog: ''
basic-deps:
  envy: -any
  rio: -any
  bytestring: -any
  flow: -any
  base: <5
  servant-client: -any
  text: -any
  servant: -any
  lens: -any
  regex-compat: -any
  servant-multipart-api: -any
  servant-multipart: -any
  network-ip: -any
  swagger2: -any
  monad-logger: -any
  servant-multipart-client: -any
  Glob: -any
  aeson: -any
  http-media: -any
  vector: -any
all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.3.1
- 1.1.4.0
- 1.1.5.0
- 1.1.5.1
- 1.2.0.0
- 1.3.0.0
- 1.3.0.1
- 1.3.0.2
- 1.3.0.3
- 1.3.1
- 1.3.2
- 1.4.0
author: |-
  Brooklyn Zelenka,
  Daniel Holmgren,
  Steven Vandevelde,
  James Walker
latest: 1.4.0
description-type: markdown
description: "# ipfs-haskell\n\n[![Build Status](https://travis-ci.org/fission-suite/PROJECTNAME.svg?branch=master)](https://travis-ci.org/fission-suite/ipfs-haskell)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/fission-suite/blob/master/LICENSE)\n[![Maintainability](https://api.codeclimate.com/v1/badges/44fb6a8a0cfd88bc41ef/maintainability)](https://codeclimate.com/github/fission-suite/ipfs-haskell/maintainability)\n[![Built
  by FISSION](https://img.shields.io/badge/âŒ˜-Built_by_FISSION-purple.svg)](https://fission.codes)\n[![Discord](https://img.shields.io/discord/478735028319158273.svg)](https://discord.gg/zAQBDEq)\n[![Discourse](https://img.shields.io/discourse/https/talk.fission.codes/topics)](https://talk.fission.codes)\n\nDocumentation:
  [ipfs on hackage](http://hackage.haskell.org/package/ipfs)\n\nA library for integrating
  IPFS into your haskell applications. Interact with the IPFS network by shelling
  out to a local IPFS node or communicating via the HTTP interface of a remote node.
  \n\n# QuickStart\n\nDefine instances for `MonadLocalIPFS` and/or `MonadRemoteIPFS`.
  Each requires only one function:\n\n```haskell\nclass Monad m => MonadRemoteIPFS
  m where\n  runRemote :: Servant.ClientM a -> m (Either Servant.ClientError a)\n\nclass
  Monad m => MonadLocalIPFS m where\n  runLocal ::\n       [IPFS.Opt]\n    -> Lazy.ByteString\n
  \   -> m (Either Process.Error Process.RawMessage)\n```\n\nWe use RIO processes
  to shell out to a local IPFS node and Servant for HTTP requests to a remote node.\n\nAfter
  that, simply add `MonadLocalIPFS m` as a constraint to a function and you'll be
  able to call IPFS within it.\nFor instance:\n```haskell\nimport           Network.IPFS\nimport
  qualified Network.IPFS.Add        as IPFS\nimport           Network.IPFS.File.Types
  as File\n\nadd ::\n  MonadLocalIPFS  m\n  => File.Serialzed\n  -> m ()\nadd (Serialized
  rawData) = IPFS.addRaw rawData >>= \\case\n  Right newCID -> \n    -- ...\n  Left
  err ->\n    -- ...\n\n```\n\nYou can see example instances below:\n```haskell\ninstance\n
  \ ( HasProcessContext cfg\n  , HasLogFunc cfg\n  , Has IPFS.BinPath cfg\n  , Has
  IPFS.Timeout cfg\n  )\n  => MonadLocalIPFS (RIO cfg) where\n    runLocal opts arg
  = do\n      IPFS.BinPath ipfs <- view hasLens\n      IPFS.Timeout secs <- view hasLens\n
  \     let opts' = (\"--timeout=\" <> show secs <> \"s\") : opts\n\n      runProc
  readProcess ipfs (byteStringInput arg) byteStringOutput opts' >>= \\case\n        (ExitSuccess,
  contents, _) ->\n          return $ Right contents\n        (ExitFailure _, _, stdErr)\n
  \         | Lazy.isSuffixOf \"context deadline exceeded\" stdErr ->\n              return
  . Left $ Process.Timeout secs\n          | otherwise ->\n            return . Left
  $ Process.UnknownErr stdErr\n\ninstance\n  ( Has IPFS.URL     cfg\n  , Has HTTP.Manager
  cfg\n  )\n  => MonadRemoteIPFS (RIO cfg) where\n    runRemote query = do\n      IPFS.URL
  url <- view hasLens\n      manager      <- view hasLens\n\n      url\n        &
  mkClientEnv manager\n        & runClientM query\n        & liftIO\n```\n"
license-name: Apache-2.0
