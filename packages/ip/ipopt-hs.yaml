all-versions:
- 0.0.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.4.2.0
- 0.5.0.0
- 0.5.1.0
author: Adam Vogt <vogt.adam@gmail.com>
basic-deps:
  ad: '>=4.2'
  ansi-wl-pprint: '>=0.6.7'
  base: <5
  containers: <0.6
  lens: '>=3.7 && <5'
  mtl: '>=2 && <3'
  template-haskell: '>=0'
  uu-parsinglib: '>=2.8'
  vector: '>=0.10 && <0.11'
  vector-space: '>=0.8.6'
changelog: |
  # Jan 12, 2016
  Release 0.5.1

  * Compile with ghc-7.10
changelog-type: markdown
description: |-
  a haskell binding to the nonlinear programming solver
  <http://projects.coin-or.org/Ipopt Ipopt>. Bindings to
  <http://ab-initio.mit.edu/wiki/index.php/NLopt NLopt> are
  also included.

  [@installation@]
  needs the c library ipopt installed. Also by default a binding to
  nlopt is included. Nlopt by default does not include shared libraries,
  which seems to be needed to run things from ghci (ie. you need to
  @./configure --enable-shared@ when building nlopt).

  A embedded language, similar to the one provided by glpk-hs, is
  defined in "Ipopt.NLP". The goal is to define problems at a level
  similar to other "algebraic modeling languages", but retain some
  of the safety and flexibility available in haskell. There is some
  overhead <http://code.haskell.org/~aavogt/ipopt-hs/examples/bench.html>
  but perhaps it is negligible for your uses.

  Current limitations include:

  * copying in every iteration happens between between
  "Data.Vector.Storable" and "Data.Vector" might be avoidable
  somehow.  Currently it is done because AD needs a Traversable
  structure, but Storable vectors are not traversable. Note that
  there is a "Numeric.AD.Mode.Forward.Double" but as yet none
  for Vectors of Double

  * sparseness of derivatives isn't used

  * no binding to sensitivity parts as-implemented in ipopt
description-type: haddock
hash: c15acd554cc68dc4e58fa7a8d9eddd792d5dee160fc71f327a4a006f390af15c
homepage: ''
latest: 0.5.1.0
license-name: BSD-3-Clause
maintainer: Adam Vogt <vogt.adam@gmail.com>
synopsis: haskell binding to ipopt and nlopt including automatic differentiation
test-bench-deps: {}
