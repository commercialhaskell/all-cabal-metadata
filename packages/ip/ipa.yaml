homepage: https://gitlab.com/ngua/ipa-hs/-/blob/master/README.org
changelog-type: text
hash: 13219c78faaf5b609ac0f560cee8f8fd2093d0a0868d74c58cbbb4052bf1c5e8
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  ipa: -any
maintainer: rory.hayford@protonmail.com
synopsis: Internal Phonetic Alphabet (IPA)
changelog: |
  * 0.1
  + Initial release
  * 0.2
  + Major changes:
    - ~toXSampa~ and ~toXSampa'~ added to ~ReprIPA~ typeclass. Most (but not all) of the ~Segment~, ~SegmentalFeature~, and ~SuprasegmentalFeature~ values representable in IPA now have an X-SAMPA equivalent
    - The partial ~toIPA'~ and ~toXSampa'~ methods now return the new ~IPAException~ in the event of failure, instead of simply ~error~
  + Bugfixes:
    - There were some issues with voiced/voiceless pairs in v0.1, where the wrong variant had the voiceless diacritic
basic-deps:
  base: '>=4.10 && <=5'
  unicode-transforms: ^>=0.3.7
  text: ^>=1.2.4
all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
author: Rory Tyler Hayford
latest: '0.2'
description-type: text
description: "* ipa\n** About\n~ipa~ is a Haskell library for dealing with International
  Phonetic Alphabet (IPA) transcriptions. It provides a set of datatypes for working
  with speech segments and suprasegmentals which can be represented using IPA transcription.\n**
  Usage\nIPA values can be created by constructing ~Segment~ or ~Syllable~ values
  and applying ~toIPA~.\nFor instance:\n#+begin_src haskell\n{-# LANGUAGE PatternSynonyms
  #-}\n{-# LANGUAGE OverloadedStrings #-}\n    \nimport           Language.IPA\nimport
  qualified Data.Text.IO as T\n\nmain :: IO ()                \nmain = maybe message
  (T.putStrLn . unIPA) (toIPA b)\n  where\n    b       = PulmonicConsonant Voiced
  Bilabial Plosive\n    message = T.putStrLn \"Invalid or unrepresentable segment!\"\n
  \    \n#+end_src\n~Segment~ and ~Syllable~ values can be adorned with additional
  articulatory information as well, and can further be nested to created more complex
  structures, e.g.:\n#+begin_src haskell\nsomeComplexVowel :: Segment\nsomeComplexVowel
  = WithSegmentalFeature \n    (SuperScriptNumeric 255)\n    (WithSegmentalFeature
  \n     (Length OverLong)\n     (WithSegmentalFeature \n      Compressed\n      (Vowel
  Close Back Unrounded)))\n-- ɯᵝːː²⁵⁵ \n   \n#+end_src\n~IPA~ is an instance of ~Semigroup~,
  so values can be concatenated with ~<>~:\n#+begin_src haskell\nsomeSyllables ::
  Maybe IPA\nsomeSyllables = (<>) <$> toIPA syllable1 <*> toIPA syllable2\n  where\n
  \   syllable1 =\n        WithSuprasegmentalFeature Linking\n                                  (Syllable
  [ WithSegmentalFeature \n                                              (Length Long)\n
  \                                             (Vowel Close Back Rounded)\n                                            ])\n\n
  \   syllable2 = Syllable [ PulmonicConsonant Voiced Palatal Approximant\n                         ,
  Vowel OpenMid Front Unrounded\n                         , Vowel Mid Central Unrounded\n
  \                        ]\n-- uː‿jɛə                        \n\n#+end_src\n~toIPA~
  is a method of the ~ReprIPA~ typeclass; I decided a typeclass was best in order
  to allow users to create their own instances if the library-supplied ones were insufficient.
  You could create an instance, for example, for a hypothetical ~Mora~ datatype, etc...\n**
  License\nThis library is distributed under the BSD 3-Clause revised license.\n**
  TODO TODO\n- [ ] Export constant values for common segments\n- [ ] Convenience functions
  for wrapping IPA values in different trasncription delimiters (phonemic, phonetic,
  etc...)\n- [X] Support for X-SAMPA transcription\n- [ ] Support for IPA <-> X-SAMPA
  conversion\n- [ ] Parsing and validation of user-supplied IPA and XSampa literals\n-
  [ ] Quasi quoter for making segment construction somewhat less painful\n"
license-name: BSD-3-Clause
