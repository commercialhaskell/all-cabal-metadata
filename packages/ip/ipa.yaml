homepage: https://gitlab.com/ngua/ipa-hs/-/blob/master/README.org
changelog-type: text
hash: 24d0c470de1008107ae5c7b7ced3715676b0c40e58cbb25c1562e036ef1cf5b3
test-bench-deps:
  base: -any
  hspec: -any
  text: -any
  ipa: -any
maintainer: rory.hayford@protonmail.com
synopsis: Internal Phonetic Alphabet (IPA)
changelog: |
  * 0.3
  + Breaking changes:
    - ~parseIPA~ method added to ~ReprIPA~ typeclass to parse values from text in IPA
    - X-SAMPA-related methods have been moved from ~ReprIPA~ to the new ~ReprXSampa~ typeclass, which also includes the new ~parseXSampa~ method
    - ~toIPA'~ and ~toXSampa'~ have been removed as methods, and are now functions (with the same behavior as the previous default implementation) exported from ~Language.IPA~
    - New ~Vowel~ type with three variants: ~Pure~, ~Diphthongized~, and ~Triphthongized~. The ~Vowel~ constructor of ~Segment~ now takes a variant of this type as a parameter. There are also three new pattern synonyms that produce ~Segments~: ~PureVowel~, ~Diphthong~, and ~Triphthong~, corresponding to the ~Vowel~ constructors
    - Constraints for the ~ReprIPA~ for ~Syllable~ instance have changed: was previously just ~Traversable~, now also includes ~Monoid~ and ~Applicative~. This is to allow for polymorphism in the syllable parser
    - A data constructor has been added to ~Segment~: ~Optional~, which represents speech segments that are conventionally (and unofficially) written inside parentheses
    - ~SuperscriptNumeric~ has been removed; it is replaced by a new data constructor for ~SuprasegmentalFeature~: ~ToneNumber~
  + Other changes:
    - New utilities for determining literal text validity, membership in different categories of segments, converting between different notations, etc...
    - ~ReprIPA~ is now in a separate module (~Language.IPA.Class~, along with ~ReprXSampa~); ~Language.IPA~ still re-exports it
    - New ~mkXSampa~ smart constructor validates that the underlying text value only contains ASCII characters
  * 0.2
  + Breaking changes:
    - ~toXSampa~ and ~toXSampa'~ added to ~ReprIPA~ typeclass. Most (but not all) of the ~Segment~, ~SegmentalFeature~, and ~SuprasegmentalFeature~ values representable in IPA now have an X-SAMPA equivalent
    - The partial ~toIPA'~ and ~toXSampa'~ methods now return the new ~IPAException~ in the event of failure, instead of simply calling ~error~
  + Bugfixes:
    - There were some issues with voiced/voiceless pairs in v0.1, where the wrong variant had the voiceless diacritic
  * 0.1
  + Initial release
basic-deps:
  base: '>=4.10 && <=5'
  unicode-transforms: ^>=0.3.7
  text: ^>=1.2.4
  attoparsec: ^>=0.13.2
all-versions:
- 0.1.0.0
- 0.1.0.1
- '0.2'
- '0.3'
author: Rory Tyler Hayford
latest: '0.3'
description-type: text
description: "* ipa\n** About\n~ipa~ is a Haskell library for dealing with International
  Phonetic Alphabet (IPA) transcriptions. It provides a set of datatypes for working
  with speech segments and suprasegmentals which can be represented using IPA transcription.
  Speech sounds can be converted to their IPA representations or parsed from text
  written in IPA notation. It also supports most of the ASCII-only X-SAMPA transcription
  scheme.\n** Usage\nIPA values can be created by constructing ~Segment~ or ~Syllable~
  values and applying ~toIPA~.\nFor instance:\n#+begin_src haskell\n{-# LANGUAGE PatternSynonyms
  #-}\n{-# LANGUAGE OverloadedStrings #-}\n    \nimport           Language.IPA\nimport
  qualified Data.Text.IO as T\n\nmain :: IO ()                \nmain = maybe message
  (T.putStrLn . unIPA) (toIPA b)\n  where\n    b       = PulmonicConsonant Voiced
  Bilabial Plosive\n    message = T.putStrLn \"Invalid or unrepresentable segment!\"\n
  \    \n#+end_src\n~Segment~ and ~Syllable~ values can be adorned with additional
  articulatory information as well, and can further be nested to created more complex
  structures, e.g.:\n#+begin_src haskell\nsomeComplexVowel :: Segment\nsomeComplexVowel
  = WithSegmentalFeature \n    (WithSegmentalFeature \n     (Length OverLong)\n     (WithSegmentalFeature
  \n      Compressed\n      (Vowel Close Back Unrounded))\n-- ɯᵝːː\n   \n#+end_src\n~IPA~
  is an instance of ~Semigroup~, so values can be concatenated with ~<>~:\n#+begin_src
  haskell\nsomeSyllables :: Maybe IPA\nsomeSyllables = (<>) <$> toIPA syllable1 <*>
  toIPA syllable2\n  where\n    syllable1 =\n        WithSuprasegmentalFeature Linking\n
  \                                 (Syllable [ WithSegmentalFeature \n                                              (Length
  Long)\n                                              (Vowel Close Back Rounded)\n
  \                                           ])\n\n    syllable2 = Syllable [ PulmonicConsonant
  Voiced Palatal Approximant\n                         , Vowel OpenMid Front Unrounded\n
  \                        , Vowel Mid Central Unrounded\n                         ]\n--
  uː‿jɛə                        \n\n#+end_src\n~toIPA~ is a method of the ~ReprIPA~
  typeclass; I decided a typeclass was best in order to allow users to create their
  own instances if the library-supplied ones were insufficient. You could create an
  instance, for example, for a hypothetical ~Mora~ datatype, etc...\n** License\nThis
  library is distributed under the BSD 3-Clause revised license.\n** TODO TODO\n-
  [ ] Export constant values for common segments\n- [ ] Convenience functions for
  wrapping IPA values in different transcription delimiters (phonemic, phonetic, etc...)\n-
  [X] Support for X-SAMPA transcription\n- [X] Support for IPA <-> X-SAMPA conversion\n-
  [X] Parsing and validation of user-supplied IPA and XSampa literals\n- [ ] Quasi
  quoter for making segment construction somewhat less painful\n"
license-name: BSD-3-Clause
