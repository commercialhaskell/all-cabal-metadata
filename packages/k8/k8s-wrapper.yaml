all-versions:
- 0.1.0.0
author: Alexander Vershilov
basic-deps:
  async: ^>=2.2.4
  base: '>=4.14.3.0 && <5.0'
  http-types: ^>=0.12.3
  stm: '>=2.4 && <3.0'
  text: ^>=1.2.4.1
  wai: '>=0'
  wai-middleware-prometheus: '>=0'
  warp: '>=0'
changelog: |
  # Revision history for k8s-wrapper

  ## 0.1.0.0 -- 2022-03-13

  * First version.
changelog-type: markdown
description: "k8s-wrapper is a [wai](https://hackage.haskell.org/package/wai) application
  that is designed to wrap your service running in a k8s\nenvironment and provide
  the additional functionality needed for a fully-featured application\nto operate.
  It accomplishes it in several ways:\n\n  1. **Health and liveness Endpoints** —
  the feature provides information on the current state\n     of the application,
  allowing k8s to control execution, restart application, manage rollouts\n     and
  route traffic\n  2. **Startup and Teardown Control** — the application's statup
  and teardown processes are managed\n     by `k8s-wrapper`, ensuring that your service
  operates smoothly\n  3. **Graceful Shutdown Endpoint** — This feature enables graceful
  shutdown of your service.\n  4. **Metrics Enpoint** — Metrics are exposed on a dedicated
  endpoint, allowing for easy monitoring\n     of your application's performance\n\nBy
  utilizing k8s-wrapper, you can simplify the management of your service and ensure
  that it runs\nreliably in a k8s environment\n\n# Get Started\n\nIn order to use
  k8s application you should do:\n\n1. All k8s-wrapper to the list of dependencies
  in the cabal file:\n\n```cabal\nexecutable mega-service\n  build-depends: base >=
  4.4,\n    k8s-wrapper,\n    ...\n  ...\n```\n\n2. In the main file use:\n\n```haskell\nimport
  Network.K8s.Application as K8s\n\nmain :: IO ()\nmain = do\n  let runReadynessCheck
  = do \n        -- In this function we check if the traffic can be routed to the\n
  \       -- application. If this function returns False traffic will not\n        --
  be routed to the application.\n        pure True\n  let runLivenessCheck = do\n
  \       -- Check if the application is in a workable state. If returns `False`\n
  \       -- then k8s based on it's rules may restart the application.\n        pure
  True\n  let initializeServer = do\n        -- This function is used to initialize
  the service, for example\n        -- setup connection to the databases, check config
  files, register metrics\n        _ <- register ghcMetrics\n        -- While this
  function is executing k8s-wrapper replies the\n        -- status on it's interface.\n
  \n        -- This function returns created resources that may be needed for the\n
  \       -- application.\n        pure ()\n  withK8sEndpoint\n    K8s.defConfig --
  Default configuration\n    K8sChecks{ runReadynessCheck, runLivenessCheck }\n    initializeServer\n
  \   (\\resources -> Warp.run application_port (yourApp resources)) \n```\n\nAfter
  settings k8s-wrapper will start the interface on the port 10120 (can be redefinen
  in the config),\nthat provides endpoints:\n\n   - **/started** — provides information
  if application is started\n   - **/ready** — provides information if application
  can accept the traffic\n   - **/health** — provides information if application is
  healthy\n   - **/stop** — preStop hook — requests application teardown\n   - `/_metrics`
  - output metrics for the application\n  \nFor the machine readable format you can
  check `spec.yaml` file provided with the package\nthat provides openapi v3 definition
  of the endpoints.\n\n"
description-type: markdown
hash: 079d9920ded030462f8237958da8ce38cb19fe5d8e21981947f7bd9fbea61e18
homepage: https://github.com/cheopslab/k8s-wrapper
latest: 0.1.0.0
license-name: MPL-2.0
maintainer: alexander.vershilov@sirius.online, backend-dev@sirius.online
synopsis: Application wrapper for the k8s environment
test-bench-deps:
  async: ^>=2.2.4
  base: '>=4.14.3.0 && <5.0'
  http-client: '>=0'
  http-types: '>=0'
  k8s-wrapper: '>=0'
  lens: ^>=5.1
  stm: '>=2.4 && <3.0'
  tasty: ^>=1.4.2.1
  tasty-hunit: ^>=0.10.0.3
  text: ^>=1.2.4.1
