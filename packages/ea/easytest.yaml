all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- '0.3'
author: Joel Burget, Paul Chiusano
basic-deps:
  base: '>=4.5 && <=5'
  call-stack: '>=0.1'
  hedgehog: '>=0.6 && <=0.6.1'
  mtl: '>=0'
  profunctors: '>=0'
  split: '>=0.2.3'
  stm: '>=0'
  tagged: '>=0'
  transformers: '>=0'
changelog: |
  ## 0.3.0 (3/6/2019)

  * Switch backend of the library to build on the hedgehog library
  * Change `Test` from kind `* -> *` to kind `*`. See [my note](https://github.com/joelburget/easytest/issues/22#issuecomment-469039853) for motivation. In short, this fixes a lot of bugs and we now support property testing.

  Upgrading:

  `Test` now has kind `*`. It's no longer a functor, applicative, monad, etc.
  - You can build an atomic test with `unitTest` (/ `example`) or `propertyTest`.
  - Also see `bracket`, `bracket_`, and `finally` for tests with setup / teardown.
  - `tests` and `scope` work as before. I mention them here because they're the
    other way to build tests.

  Removed:
  - `expect b`          -> `assert b`
  - `expectEq a b`      -> `a === b`
  - `expectJust`        -> `matches _Just`
  - `expectRight`       -> `matches _Right`
  - `expectRightNoShow` -> `matches _Right`
  - `expectLeft`        -> `matches _Left`
  - `expectLeftNoShow`  -> `matches _Left`

  ## 0.2.1 (10/24/2018)

  * [Fix build errors for GHC 8.6](https://github.com/joelburget/easytest/commit/9bb30ec16671c0ec74835a52290b6508143a368f), [prevent building on GHC before 7.10](https://github.com/joelburget/easytest/pull/15/commits/f6d0ac50fa5a351a30b576567306121d67c0973a)
  * [Only print emojis for Unicode-capable terminals](https://github.com/joelburget/easytest/commit/e3f12612df46a6367693fd4ad47eedf91c35a079)

  ## 0.2 (3/27/2018)

  * [`expectRight` now shows `Left`s. `expectRightNoShow` replicates the old functionality.](https://github.com/joelburget/easytest/commit/c2d5dccc97dcdb925ebc39c36fcde9ff8d894f77)
  * [Call stacks now longer show EasyTest porcelain.](https://github.com/joelburget/easytest/commit/0b7064915a5b9c9de0115ebb6fc2fa49b2c4776e)
  * [`expectJust` and `expectRight` now return unit](https://github.com/joelburget/easytest/commit/ef5d4e9fd03c1008c810ee09a4f4c459d4e26bdb)

  ## 0.1.1 (3/25/2018)

  * [Add ghc 7.10.3 compatibility.](https://github.com/joelburget/easytest/commit/4acfad507cefc3fb2c0d588f1fbe0e4d583a762d)
  * [allow async 2.2, ghc 8.4 compatibility](https://github.com/joelburget/easytest/commit/6c20c18988dd756d8088c9d0318b597be15c9229)
  * [build with latest stackage nightly](https://github.com/joelburget/easytest/commit/2ea7f7520b39ac74b576414e4e1df75f596ed7b4)

  ## 0.1 (3/6/2018)

  Initial release.
changelog-type: markdown
description: |-
  EasyTest is a simple testing toolkit for unit- and property-testing. It's based on the hedgehog property-testing system. Here's an example usage:

  > module Main where
  >
  > import           EasyTest
  > import qualified Hedgehog.Gen   as Gen
  > import qualified Hedgehog.Range as Range
  >
  > suite :: Test
  > suite = tests
  >   [ scope "addition.ex1" $ unitTest $ 1 + 1 === 2
  >   , scope "addition.ex2" $ unitTest $ 2 + 3 === 5
  >   , scope "list.reversal" $ property $ do
  >       ns <- forAll $
  >         Gen.list (Range.singleton 10) (Gen.int Range.constantBounded)
  >       reverse (reverse ns) === ns
  >   -- equivalent to `scope "addition.ex3"`
  >   , scope "addition" . scope "ex3" $ unitTest $ 3 + 3 === 6
  >   , scope "always passes" $ unitTest success -- record a success result
  >   , scope "failing test" $ crash "oh noes!!"
  >   ]
  >
  > -- NB: `run suite` would run all tests, but we only run
  > -- tests whose scopes are prefixed by "addition"
  > main :: IO Summary
  > main = runOnly "addition" suite

  This generates the output:

  > ━━━ runOnly "addition" ━━━
  >   ✓ addition.ex1 passed 1 test.
  >   ✓ addition.ex2 passed 1 test.
  >   ⚐ list.reversal gave up after 1 discard, passed 0 tests.
  >   ✓ addition.ex3 passed 1 test.
  >   ⚐ always passes gave up after 1 discard, passed 0 tests.
  >   ⚐ failing test gave up after 1 discard, passed 0 tests.
  >   ⚐ 3 gave up, 3 succeeded.
  We write tests with ordinary Haskell code, with control flow explicit and under programmer control.
description-type: haddock
hash: d4b776102cc8bfd62ec3a2e0e8e2b2c5796a323dab5ad866a32567512a76554a
homepage: https://github.com/joelburget/easytest
latest: '0.3'
license-name: MIT
maintainer: Joel Burget <joelburget@gmail.com>
synopsis: Simple, expressive testing library
test-bench-deps:
  base: '>=0'
  directory: '>=0'
  easytest: '>=0'
  hedgehog: '>=0'
  profunctors: '>=0'
  transformers: '>=0'
  unix: '>=0'
