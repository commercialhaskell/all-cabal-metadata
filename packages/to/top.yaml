all-versions:
- '0.2'
- 0.2.2
- 0.2.4
author: Pasqualino `Titto` Assini
basic-deps:
  acid-state: '>=0.14.2 && <0.15'
  async: '>=2.1.1 && <3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.6.0 && <0.11'
  containers: '>=0.5 && <0.6'
  data-default-class: '>=0'
  deepseq: '>=1.4 && <1.5'
  extra: '>=1.4.10 && <2'
  filepath: '>=1.4.0.0 && <1.5'
  flat: '>=0.3 && <0.4'
  hslogger: '>=0'
  mtl: '>=2.2.1 && <2.3'
  pipes: '>=4.1.9 && <5'
  pretty: '>=1.1.2 && <1.2'
  safecopy: '>=0.9.3 && <1'
  template-haskell: '>=2.10.0.0 && <3'
  text: '>=0'
  transformers: '>=0.4.2.0 && <0.6'
  websockets: '>=0.9.8.2 && <0.13'
  zm: '>=0.3 && <0.4'
changelog: ''
changelog-type: ''
description: "\n[![Build Status](https://travis-ci.org/Quid2/top.svg?branch=master)](https://travis-ci.org/Quid2/top)\n[![Hackage
  version](https://img.shields.io/hackage/v/top.svg)](http://hackage.haskell.org/package/top)\n[![Stackage
  Nightly](http://stackage.org/package/top/badge/nightly)](http://stackage.org/nightly/package/top)\n[![Stackage
  LTS](http://stackage.org/package/top/badge/lts)](http://stackage.org/lts/package/top)\n\nHaskell
  API for [Top (Type Oriented Protocol)](http://quid2.org/docs/Top.pdf).\n\n### Why
  Bother?\n\nImagine visiting your favourite open shelf library or bookshop and discovering
  that overnight some ill-advised employee has reordered the whole collection by publishing
  house. All books from Oxford University Press or Penguin are now neatly grouped
  together.\n\nThat would look nice and orderly for sure, with all those similarly
  designed book spines standing side by side.\n\nBut obviously, this semblance of
  order would be nothing but a travesty as it would be close to impossible to locate
  what you are really after, and that's usually not \"some book from Penguin\" but
  rather a book about Thai cooking or the latest novel by Mo Yan.\n\nWake up, it was
  just a nightmare. Nobody would be so stupid to order human knowledge in such a nonsensical
  way, would they?\n\nExcept, now that you make me think about it, this is exactly
  how information is ordered by default in the ultimate library, the Internet. On
  the World Wide Web, for example, information is accessed by website, and a website
  is nothing but a collection of information made available from some publisher. And
  that, unsurprisingly, causes a bit of trouble when you are actually looking for
  some specific type of information.\n\nSomeone had to fix the problem, patiently
  reorganising the Internet library by type and subject, and in fact [someone](http://google.com)
  did and, as reward for their efforts, even managed to make a [little dough](http://finance.yahoo.com/q?s=GOOG)
  out of it. Who said that being a good librarian doesn't pay the bills?\n\n\nThe
  root of the problem is the way information is accessed and transferred on the Internet.
  The communication protocol at the heart of the Web, the [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol),
  as in fact those of most widely used Internet systems, is a point-to-point protocol.\n\nPoint-to-point
  simply means that information flows from A to B where A and B are publishers and/or
  consumers of information. It is the simplest but not always the most convenient
  form of communication as it's often the case that A does not in fact want to communicate
  with B at all, but would rather talk about *something* or exchange some specific
  *type* of information.\n\nSay for example that you have some excellent jokes that
  you would be willing to share with the world. You don't want to call Joe and then
  Jake and then Marian to make them laugh. You want to make people, not a specific
  person, laugh. Now say that you could simply define what a joke is and then start
  sending them out and that anyone interested could tune in and have a good time reading
  them and sending out their own.\n\nWe might define a joke, in a very simple way,
  as:\n\n```haskell\nJoke ≡ Joke Text\n````\nthat basically means: 'a joke is just
  a text marked as being a joke'.\n\nAnd then we could simply start sending out jokes
  by writing a little program that says something like:\n\n```haskell\njokesChannel
  <- openChannelOfType Joke\n\nsend jokesChannel (Joke \"Notice on an Italian bus:
  don’t talk to the driver, he needs his hands.\")\n```\nFunny eh :-)?\n\nMaybe not,
  but that's not a problem, you are free to send out your own jokes.\n\nBecause what
  we have just done, by the simple act of defining some type of information and sending
  out an item of that type, is to create a big fat global channel where jokes can
  now flow.\n\nAnd that's precisely how Top, the type oriented protocol, works.\n\n###
  Top (Type Oriented Protocol)\n\nTop is a minimalist content-oriented transport protocol
  ([spec](http://quid2.org/docs/Top.pdf)).\n\nIn Top, all communication takes place
  on bi-directional *typed* channels, that's to say on channels that transfer only
  values of a well-defined algebraic data type.\n\nData does not flow from A to B
  but rather all data of the same type flows on a single, globally unique, channel
  and anyone can define new data types and send and receive data values.\n\nYou can
  [see it in action](http://quid2.org/app/ui).\n\nUnder the *Channels* tab are listed
  the currently open channels, every channel has a type and you can see its full definition
  by clicking on *Definition*.\n\nDefinitions are just [plain algebraic data types](https://github.com/Quid2/zm).\n\nFor
  example, you should see a *Message* channel that is used to implement a simple chat
  system. Click on *Show Values* to inspect the value being transferred and then use
  the [chat user interface](http://quid2.org/app/chat) to login and send a couple
  of messages and see them appear on the channel.\n\nUnder the *Types* tab is the
  list of types known to the system.\n\n#### Minimalist but Evolvable\n\nTop does
  not provide any other service beyond full-duplex typed communication, any other
  service (e.g. identification or encryption) has to be provided by the clients themselves
  but that can be done easily and independently by simply creating data types that
  stands for the additional functionality required.\n\n### Usage\n\nUsing Top can
  be as simple as:\n\n```haskell\n{-# LANGUAGE DeriveGeneric ,DeriveAnyClass #-}\nimport
  Network.Top\n\n-- |Send a message and then print out all messages received\nmain
  = runApp def ByType $ \\conn -> do\n  logLevel DEBUG\n  output conn Message {fromUser=\"robin\",content=TextMessage
  \"Hello!\"}\n  loop conn\n    where loop conn = input conn >>= print >> loop conn\n\n--
  Data model for a very simple chat system\ndata Message = Message {\n     fromUser::String\n
  \   ,content::Content\n    } deriving (Eq, Ord, Read, Show, Generic , Flat, Model)\n\ndata
  Content =\n    TextMessage String\n\n    | HTMLMessage String\n    deriving (Eq,
  Ord, Read, Show, Generic, Flat, Model)\n```\n<sup>[Source Code](https://github.com/tittoassini/top-apps/blob/master/app/hello.hs)</sup>\n\nFor
  examples of stand-alone and www applications see:\n\n* [top-apps-ghcjs](https://github.com/Quid2/top-apps-ghcjs)\n
  \ * Example WWW applications for [top](https://github.com/Quid2/top), using [ghcjs](https://github.com/ghcjs/ghcjs).\n*
  [top-apps](https://github.com/Quid2/top-apps)\n  * Example applications for [top](https://github.com/Quid2/top).\n\n####
  Installation\n\n Get the latest stable version from [hackage](https://hackage.haskell.org/package/top).\n\n####
  Compatibility\n\nTested with:\n  * [ghc](https://www.haskell.org/ghc/) 7.10.3, 8.0.1
  and 8.0.2 (x64)\n  * [ghcjs](https://github.com/ghcjs/ghcjs)\n\nSo it can be used
  to develop both stand alone and WWW applications.\n\n### The Top Service.\n\nThough
  Top is eventually meant to develop into a distributed, vendor-free, protocol compatible
  with multiple transport protocols, its current implementation is provided by a single
  central router that supports [websockets](https://en.wikipedia.org/wiki/WebSocket)
  and therefore full-duplex, HTTP compatible channels.\n\nTERMS OF SERVICE:\n* The
  Top service is offered by Quid2 Limited - Registered in England and Wales - Reg
  No: 09213600.\n* There is no charge for fair usage of the Top service. \n* Fair
  usage is defined as any usage that does not lead to a *de facto* denial of service
  to other users or that imposes unreasonable expense on its maintainer.\n* By using
  the Top service you accept that the service is offered \"as is\" with no express
  or implied warranty for availability, performance, consistency, longevity or functionality.\n\n"
description-type: markdown
hash: 843c30d7a634fb5dca4c61cf673f22eca9e3965f1827e9d778c191b954ef32df
homepage: http://github.com/tittoassini/top
latest: 0.2.4
license-name: BSD-3-Clause
maintainer: tittoassini@gmail.com
synopsis: Top (typed oriented protocol) API
test-bench-deps:
  base: '>=0'
  directory: '>=1.2 && <2'
  doctest: '>=0.11.1 && <0.14'
  filemanip: '>=0.3.6.3 && <0.3.7'
  tasty: '>=0.11 && <0.13'
  tasty-hunit: '>=0.8 && <0.11'
  top: '>=0'
  zm: '>=0'
