all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.3.1
- 0.5.3.2
author: Ilya V. Portnov
basic-deps:
  Glob: '>=0'
  ansi-terminal: '>=0'
  base: '>=3 && <=5'
  base-unicode-symbols: '>=0.2.2.1'
  containers: '>=0'
  data-hash: '>=0'
  dates: '>=0.1.2.0'
  directory: '>=0'
  dyre: '>=0'
  filepath: '>=0'
  mtl: '>=0'
  parsec: '>=3'
  process: '>=0'
  regex-pcre: '>=0'
  syb: '>=0'
  time: '>=0'
  utf8-string: '>=0'
changelog: ''
changelog-type: ''
description: "todos README\n============\nIlya V. Portnov <portnov84@rambler.ru>\n\ntodos
  is a simple TODO manager. TODO records theirself are described in\nplain-text file,
  and todos allows you to show only needed of them. So, todos\nworks as specialized
  `grep' utility.\n\nBy default, output format is the same as input; so, you can combine
  several\n`todos' instances into unix pipes. \n\nIf source files are not given in
  the commandline, file with name \"TODO\" in\ncurrent directory is used. If \"-\"
  is given as file name, todos will read\nstandart input.\n\ntodos supports two formats
  of input files. In first case, file contains TODOS\nrecords and only them. In «alternative»
  format, source files can contain any\ntext, but it's ignored; only lines starting
  with given prefix (\"TODO: \" by\ndefault) are parsed. So, alternative format enable
  you to grep TODO records\nfrom any files, for example, program source files.\n\nFollowing
  is format of TODO record:\n\n    [spaces]status (dates) [TAGS] title (depends) description\n\nHere
  [spaces] is optional indent with spaces, «status» — is status of record\n(for example,
  URGENT or DONE; can be any word), «dates» give info about dates\n(see below), «TAGS»
  is a comma-separated list of tags in brackets, «title» is\ntitle of record, «depends»
  — comma-separated list of depends (titles of other\nrecords) in parenthesis, «description»
  is description of the record. All fields\nexcept status and title are optional.
  If «-w» option is specified, status field\nis not read (it's optional; when it's
  present, it will be part of title).\nDescription is separated from title with not
  less than 2 spaces. \n\nUsing different indents one can create sub-records (and,
  so, trees of records).\nMoreover, depends are interpreted in same way as sub-records.
  So, one can\ncreate not only trees of records, but arbitrary graphs of records (even\ncycled).
  When cycled graphs are used, user should control for rational level of\nhierarchy
  (for example, one can bound height of output tree using -p option).\n\nDates information
  is described in parenthesis, as not more than 3 records,\nseparated with semicolon.
  Each records has format «date type: date». Date type\ncan be one of: start, end,
  deadline. For dates, many formats are supported; for\nexample, «18 Feb», or «02/18/2010»,
  «2010/02/18» are all valid dates. One can\neven use relative dates specification
  here, such as «in 2 weeks» or «2 days\nago», but there is no point to this: all
  dates are counted from program start\ndate.\n\nNext commandline options are supported:\n\n
  \ -1           --only-first              show only first matching entry\n  -c           --color
  \                  show colored output\n  -H           --highlight               instead
  of filtering TODOs, just highlight matching the query\n  -I           --show-ids
  \               show IDs of todos\n  -A[PREFIX]   --prefix[=PREFIX]         use
  alternate parser: read only lines starting with PREFIX\n               --dot                     output
  entries in DOT (graphviz) format\n  -D FORMAT    --format=FORMAT           use FORMAT
  to format items\n  -k[STRING]   --indent-with[=STRING]    use STRING instead of
  two spaces for items indentation\n  -w           --no-status               do not
  read status field from TODOs\n               --set-status=STRING       force all
  TODOs status to be equal to STRING\n               --set-root-status=STRING  force
  statuses of root TODOs to be equal to STRING\n  -F           --by-file                 group
  TODOs by source file\n  -T           --by-tag                  group TODOs by tag\n
  \ -Z           --by-status               group TODOs by status\n  -p N         --prune=N
  \                limit tree height to N\n  -m N         --min-depth=N             show
  first N levels of tree unconditionally\n  -t TAG       --tag=TAG                 find
  items marked with TAG\n  -g PATTERN   --grep=PATTERN            find items with
  PATTERN in name\n  -G PATTERN   --description=PATTERN     find items with PATTERN
  in description\n  -s STRING    --status=STRING           find items with status
  equal to STRING\n  -i STRING    --id=STRING               find items with ID equal
  to STRING\n  -a           --and                     logical AND\n  -o           --or
  \                     logical OR\n  -n           --not                     logical
  NOT\n               --sort=FIELD              specify sorting\n  -e[COMMAND]  --exec[=COMMAND]
  \         run COMMAND on each matching entry\n  -S DATE      --start-date=DATE         find
  items with start date bounded with DATE\n  -E DATE      --end-date=DATE           find
  items with end date bounded with DATE\n  -d DATE      --deadline=DATE           find
  items with deadline bounded with DATE\n  -h           --help                    display
  this help\n\nDates in the commandline are specified in any of supported formats.
  There\nrelative dates specifications are useful: how about something like «todos\n--deadline=yesterday»?
  ;)\n\nWhen «-H» option is specified, items are not filtered at all (all items will
  be\nprinted). Instead, items matching to your query will be highlighted. This works\nonly
  with «-c» option.\n\nWhen «-I» option is specified, for each TODO it's unique identifier
  is shown.\nThat ID is simply hash  from item's title, status, tags and description,
  so\nonly identical items will have identical ID. One can ask todos to show item\nwith
  specified ID using «-i» option.\n\nWith «-k» option one can specify another indentation
  string instead of default\ntwo spaces. For example, `todos -k\"| \"` will print
  vertical lines between items\nof same level. «-k» option without argument will force
  todos to not use\nindentation at all.\n\nFor «--format» and «--exec» options, printf-style
  format strings should be\nspecified. Following substitution sequences are supported:\n\n%n
  :: title of the record\n%t :: list of record's tags\n%s :: status of the record\n%p
  :: prefix before record in source file\n%d :: description of the record\n%f :: name
  of file, in which record was found\n%l :: number of line in source file\n%D :: dates
  of item\n\nBackslash-escaping is supported too. Supported sequences are: `\\t \\n
  \\v \\b`.\n\nFor example, «todos -tBUG -e\"vi %f +%l\"» command for each record
  with «BUG» tag\nwill open vi with corresponding file on corresponding line.\n\nWhen
  «--dot» option is specified, todos will output a graph definition for DOT\n(graphviz),
  instead of normal output. For example, you can try\n\n  todos --dot | dot -Tpng
  -o todos.png\n\nand then see the file todos.png. Items with status «GROUP» will
  become DOT's\nclusters. More precisely, if one item have «GROUP» status, it will
  become a\ncluster, and all it's children will be inside that cluster. There is a\nlimitation
  in DOT: it can not draw graphs where one item is in several clusters\nproperly,
  it will draw such item only in one cluster.\n\ntodos can read configuration files:
  `~/.config/todos/todos.conf` («global») and\n`./.todos.conf` («local»). Also, if
  there is not `./.todos.conf`, todos looks\nfor file named `.todos.conf` in all ancestor
  directories. For example, if\ncurrent directory is `/home/user/work/projects`, these
  files are checked:\n\n  * `/home/user/work/projects/.todos.conf`\n  * `/home/user/work/.todos.conf`\n
  \ * `/home/user/.todos.conf`\n  * `/home/.todos.conf`\n  * `/.todos.conf`\n\nIf
  one of these files is found, todos checks if it starts with «%» (single\npercent
  character) word. If so, options from «ancestor» config file are\nprepended to options
  from this file. Otherwise, ancestor config is not read.\n\nConfig files contain
  command line options, in the same format as in the\ncommandline. Resulting commandline
  is composed as: (options in global config)\n+ (options in local config) + (options
  in the actual command line). If there is\nno one of configs, todos will ignore it.\n\nFor
  example, if  `/home/user/work/projects/.todos.conf` file contents is `% --dot`,\nand
  `/home/user/work/.todos.conf` contains `-A -F`, «effective command line» would be\n`-A
  -F --dot`.\n\nConfig files might be specified in the command line. `@path/to/file.conf`\noption
  will force todos to read options from `path/to/file.conf`, and add them\nto «effective
  command line» before other command line options.\n`@@path/to/file.conf` is almost
  the same, but here todos will not read «global»\nand «local» configs at all. Specifying
  only `@@` in the command line, one can\ndisable reading config files at all.\n\nMoreover,
  todos could be customized in «xmonad way». You write file\n`~/.config/todos/todos.hs`
  and run todos. todos will compile and run that file.\nSimplest example of `todos.hs`
  possible is `todos.hs` in this directory. A bit\nmore complex example:\n\n.................................................................\n
  \   import System.Console.ANSI\n\n    import Todos\n\n    main :: IO ()\n    main
  = todos $ defaultConfig {\n                      itemConsoleColor = myItemColor\n
  \                  }\n\n    myItemColor item =\n      if itemStatus item == \":\"\n
  \        then Just (Dull, Blue)\n         else Nothing\n.................................................................\n\nSo,
  items with \":\" status will be printed in blue color.\n\n"
description-type: text
hash: 9ea5e2be1f660e895ab4c1e4f5ff53cda528cccadbac0ad649e6efe49ac3b935
homepage: http://gitorious.org/todos
latest: 0.5.3.2
license-name: BSD-3-Clause
maintainer: portnov84@rambler.ru
synopsis: Easy-to-use TODOs manager.
test-bench-deps: {}
