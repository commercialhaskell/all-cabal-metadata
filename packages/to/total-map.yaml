all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
- 0.0.8
- 0.1.0
- 0.1.3
author: Conal Elliott
basic-deps:
  base: <5
  containers: '>=0'
  semiring-num: '>=1.6.0.4'
changelog: |
  # Change log for total-map

  ## 0.1.0

  *   Derived `Show` instance.
  *   `infixl 9 !`
  *   `DetectableZero` instance.
  *   Added a change log.

  ## 0.0.8

  *   `Semiring` and `StarSemiring` instances.

  ## 0.0.7

  *   `Semigroup` instance.

  ## 0.0.6

  *   `codomain`
changelog-type: markdown
description: |
  The usual finite map type (`Map` from `Data.Map`) is not an applicative functor, as it doesn't have a pure.
  Consequently, it's also not a monad.
  On the other hand, we can decompose `Map` into two parts: a *total* map, and `Maybe`, i.e.,

      type Map k v = TMap k (Maybe v)

  The type `TMap` of total maps does have `Applicative` and `Monad` instances, and hence this hypothetically rebuilt `Map` would as well.

  The idea for `TMap` is introduced in the paper [*Denotational design with type class morphisms*](http://conal.net/papers/type-class-morphisms/).
  The meaning `Map k v` is given by its semantic function

      (!) :: Map k v -> (k -> v)

  The type class morphism (TCM) principle then exactly dictates the meanings of several class instances for `TMap`, including `Functor`, `Applicative`, `Monad`, and `Monoid`.
  For instance, `(!)` must be a monoid (homo)morphism, i.e.,

      (!) mempty == mempty
      (!) (s `mappend` t) == (!) s `mappend` (!) t

  The current implementation of `TMap` is via `Data.Map`.
description-type: markdown
hash: 081b917276323564e6d6ebaaf20c14d8ffc0a260cf3f29113c2577f774a272f1
homepage: http://github.com/conal/total-map/
latest: 0.1.3
license-name: BSD-3-Clause
maintainer: conal@conal.net
synopsis: Finitely represented total maps
test-bench-deps: {}
