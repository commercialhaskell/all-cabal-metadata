all-versions:
- 0.1.0.0
- 0.1.1.1
author: Ed Wastell
basic-deps:
  adjunctions: '>=4.4 && <4.5'
  base: '>=4.9 && <4.13'
  distributive: '>=0.5 && <0.7'
  generics-sop: '>=0.3 && <0.6'
  lens: '>=4.16 && <4.20'
changelog: |
  # Revision history for TotalMap

  ## 0.1.1.0 -- 2019-01-17

  Exposed TotalMap's constructor

  ## 0.1.0.0  -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "Total Map\n===============\n\nOften one may have an enum type representing
  all possible keys of something, and wishes to store some data associated with it.
  In this case you have two options - use a function or a Map from containers. A function
  works, but can be difficult to update and has not Eq or Show instances. A map solves
  this issue, but gives no guarantee that a key has associated data - all functions
  become partial. This library offers a different way of solving this problem.\n\nA
  `TotalMap k a` is a total mapping from a key of type `k` to a value of type `a`;
  each `k` will have exactly one `a`. It permits many instances, including `Show`
  and `Eq`. \n\nExample\n------\n\nLet us create and example. We start with some imports
  and some language pragmas.\n\n```haskell\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE
  DeriveGeneric #-}\n\nimport TotalMap\n\nimport Control.Lens\nimport Control.Monad
  (void)\nimport Data.Functor.Rep (tabulate)\nimport qualified GHC.Generics as GHC
  (Generic)\nimport Generics.SOP\n```\n\nTotalMap uses generics-sop internally, so
  we require it as an import. We also require some typeclasses introduced by lens.\n\nFor
  our example, we shall create a dummy program for sending out peoples fortunes based
  on their star sign. We shall create a star sign type.\n\n```haskell\ndata StarSign\n
  \ = Aries\n  | Taurus\n  | Gemini\n  | Cancer\n  | Leo\n  | Virgo\n  | Scorpio\n
  \ | Sagittarius\n  | Capricorn\n  | Aquarius\n  | Pisces\n  deriving (Eq, Show,
  GHC.Generic, Generic)\n```\n\nNote the derivation of both `GHC.Generic` and `Generic`.
  These are required to guarantee that `StarSign`'s constructors take no imports.\n\nWe
  have a list of people, and we can partition them based on their star sign.\n\n```haskell\ndata
  Date = Date\n  { month :: Int\n  , day :: Int\n  } deriving (Eq, Show)\n\ndata Person
  = Person\n  { name :: String\n  , email :: String\n  , birthDate :: Date\n  } deriving
  (Eq, Show)\n\nsignFromDate :: Date -> StarSign\nsignFromDate = undefined\n\npeopleSign
  :: [Person] -> TotalMap StarSign [Person]\npeopleSign ps = tabulate $ \\s -> filter
  ((==) s . signFromDate . birthDate) ps\n```\n\nWe could send people an email with
  their fortune.\n\n```haskell\nsendFortune :: String -> String -> StarSign -> IO
  ()\nsendFortune = undefined\n\nsendFortunes :: [Person] -> IO ()\nsendFortunes =\n
  \ void .\n  itraverse (\\sign -> mapM_ (\\p -> sendFortune (name p) (email p) sign))
  .\n  peopleSign\n```\n\nFuture\n-----\n\n* Come up with a better example\n* Is Lens
  necessary. It is useful, but it is a huge dependency.\n\n\nThe following is required
  to make tests compile.\n\n```haskell\nmain :: IO ()\nmain = return ()\n```\n"
description-type: markdown
hash: 392f55909d1ef00f93bfb2cab73dcd9b7e199625939f0c38ec9950fc8da0fce2
homepage: ''
latest: 0.1.1.1
license-name: MIT
maintainer: ed@wastell.co.uk
synopsis: A total map datatype
test-bench-deps:
  TotalMap: '>=0'
  adjunctions: '>=4.4 && <4.5'
  base: '>=4.8 && <4.13'
  distributive: '>=0.5 && <0.7'
  generics-sop: '>=0.3 && <0.6'
  lens: '>=4.16 && <4.20'
  markdown-unlit: '>=0.5 && <0.6'
