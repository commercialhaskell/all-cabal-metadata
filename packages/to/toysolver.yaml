homepage: https://github.com/msakai/toysolver/
changelog-type: markdown
hash: 42f1df894d45a04407e7098b93f691b5565296a13679c6af4fac1f632069e6e2
test-bench-deps:
  bytestring: -any
  mwc-random: -any
  tasty-th: -any
  base: -any
  data-default-class: -any
  unordered-containers: -any
  text: -any
  vector-space: -any
  megaparsec: -any
  toysolver: -any
  criterion: '>=1.0 && <1.7'
  parsec: '>=3.1.2 && <4'
  array: -any
  pseudo-boolean: -any
  lattices: -any
  containers: -any
  OptDir: -any
  data-interval: -any
  intern: -any
  tasty-quickcheck: '>=0.8 && <0.11'
  mtl: -any
  hashable: -any
  tasty-hunit: '>=0.9 && <0.11'
  transformers: -any
  tasty: '>=0.10.1'
  deepseq: -any
  scientific: -any
  bytestring-builder: -any
  QuickCheck: '>=2.8 && <3'
  finite-field: '>=0.7.0 && <1.0.0'
  pretty: -any
  transformers-compat: -any
  vector: -any
maintainer: masahiro.sakai@gmail.com
synopsis: Assorted decision procedures for SAT, SMT, Max-SAT, PB, MIP, etc
changelog: |+
  0.8.0
  -----

  * Separate Formula type from `ToySolver.SAT.Encoder.Tseitin` into `ToySolver.SAT.Formula` (#74)
  * Use `megaparsec` as default PB parser and add `--pb-fast-parser` option to use `attoparsec` (#71)
  * Update lower bounds of dependency packages
  * Add `--maxsat-compact-v-line` option for printing MaxSAT solution in the new compact format (#65)
  * Fix `ToySolver.SAT`.Printer and its toysat's output for Max-SAT problems  (#64)
  * Support new WCNF file format (#63)
  * Use bytestring-encoding-0.1.1.0 because bytestring-encoding-0.1.0.0 has a memory corruption bug (#62)
  * Remove deprecated API (#56)
  * Support GHC-9.2 (#76) and stop supporting GHC 8.0, 8.2, and 8.4 (#50)

  0.7.0
  -----

  * add `toysat-ipasir` foreign library which implements [IPASIR](https://github.com/biotomas/ipasir) API for incremental SAT solving.
  * `ToySolver.SAT`
    * Restructure SAT solver modules under `ToySolver.SAT.Solver.*`
    * add `SequentialCounter`, `ParallelCounter` and `Totalizer` as methods for encoding cardinality constraints
    * add `PackedLit` type to reduce memory footprint
    * use structure of array (SOA) approach to reduce memory footprint
    * add `setLearnCallback`/`clearLearnCallback` and `setTerminateCallback`/`clearTerminateCallback` which correspond to [IPASIR](https://github.com/biotomas/ipasir)'s `ipasir_set_learn()` and `ipasir_set_terminate()`.
    * add `clearLogger`
    * change `getFailedAssumptions` and `getAssumptionsImplications` to return `IntSet` instead of `[Int]`
  * separate `ToySolver.Data.MIP.*` into new [MIP](http://hackage.haskell.org/package/MIP) package's `Numeric.Optimization.MIP.*`
  * add `ToySolver.Data.Polynomial.Interpolation.Hermite`
  * add `ToySolver.Graph.Base` and `ToySolver.Graph.MaxCut`
  * add `ToySolver.Converter.SAT2MIS`
  * `ToySolver.Graph.ShortestPath`: fix vertex type to `Int` instead of arbitrary `Hashable` type
  * stop supporting GHC-7.10
  * add `ExtraBoundsChecking` flag for debugging

  0.6.0
  -----
  * new solvers:
    * `ToySolver.SAT.SLS.ProbSAT` and sample `probsat` program
  * new converters:
    * `ToySolver.Converter.NAESAT`
    * `ToySolver.Converter.SAT2MaxCut`
    * `ToySolver.Converter.SAT2MaxSAT`: SAT and 3-SAT to Max-2-SAT converter
    * `ToySolver.Converter.QBF2IPC`
    * `ToySolver.Converter.QUBO`: QUBOâ†”IsingModel converter
  * new file format API:
    * merge `ToySolver.Text.MaxSAT`, `ToySolver.Text.GCNF`, `ToySolver.Text.QDimacs`, and `ToySolver.Text.CNF`
      info `ToySolver.FileFormat` and `ToySolver.FileFormat.CNF`
    * allow reading/writing `gzip`ped CNF/WCNF/GCNF/QDimacs/LP/MPS files
  * rename modules:
    * `ToySolver.Arith.Simplex2` to `ToySolver.Arith.Simplex`
    * `ToySolver.Arith.MIPSolver2` to `ToySolver.Arith.MIP`
    * `ToySolver.Data.Var` to `ToySolver.Data.IntVar`
  * `ToySolver.SAT`:
    * add `cancel` function for interruption
    * introduce `PackedClause` type
  * `ToySolver.Arith.Simplex`
    * introduce `Config` data type
    * implement bound tightening
  * switch from `System.Console.GetOpt` to `optparse-applicative`
  * stop supporting GHC-7.8

  0.5.0
  -----
  * new solvers:
    * `ToySolver.BitVector`
    * `ToySolver.Combinatorial.BipartiteMatching`
    * `ToySolver.Combinatorial.HittingSet.DAA`
    * `ToySolver.Combinatorial.HittingSet.MARCO`
    * `ToySolver.Arith.DifferenceLogic`
    * `ToySolver.Graph.ShortestPath`
    * `ToySolver.QBF`
  * `toysat`
    * add `--init-sp` option to initialize variable state using survey propagation
    * allow using `UBCSAT` when solving PBO/WBO problems
  * `toysmt`
    * suport bit-vector logic
  * `toyconvert`
    * `pbconvert` and `lpconvert` were merged into a single command `toyconvert`
    * add `--ksat=NUMBER` option to convert to k-SAT formula
    * add `--linearlize` and `--linearizer-pb` options
    * add `--remove-usercuts` option
  * add new modules to `ToySolver.Converter`
    * `ToySolver.Converter.GCNF2MaxSAT`
    * `ToySolver.Converter.MIP2PB`
    * `ToySolver.Converter.PBLinearlization`
    * `ToySolver.Converter.SAT2KSAT`
  * `ToySolver.SAT`
    * introduce type classes for adding constraints
    * `ToySolver.SAT.Encoder.Tseitin`: add XOR and Full-adder encoder
    * `ToySolver.SAT.Encoder.PB`: add functionality to encode PB constraint using adder networks and sorting networks
    * `ToySolver.SAT.MUS.Enum`: add `GurvichKhachiyan1999` and `MARCO` to the MUS enumeration methods
    * implement learning rate based branching heuristics
    * add `ToySolver.SAT.ExistentialQuantification`
    * add `ToySolver.SAT.Store.CNF` and `ToySolver.SAT.Store.PB`
    * implement survey propagation as `ToySolver.SAT.MessagePassing.SurveyPropagation`
  * `Data.MIP`
    * parameterize Problem type with coefficient type and use `Scientific` as default
    * introduce `Status` type
    * add solution file parsers: `ToySolver.Data.MIP.Solution.{CBC,CPLEX,GLPK,Gurobi,SCIP}`
    * add solver wrapper modules: `ToySolver.MIP.Solver.{CBC,CPLEX,Glpsol,GurobiCl,LPSolve,SCIP}`
  * add a QDimacs parser as `ToySolver.Text.QDimacs`
  * add `ToySolver.Text.CNF`, `ToySolver.Text.QDimacs`
  * switch to use `megaparsec`
  * use `clock` package for measuring duration
  * add simple numberlink solver sample

  0.4.0
  -----
  * add experimental SMT (Satisfiablity Modulo Theories) solver 'toysmt', which supports theory of uninterpreted functions and linear real arithmetics.
  * fix toysat to output model in Max-SAT format instead of PB/WBO format when solving Max-SAT problems
  * add experimental getAssumptionsImplications functions to ToySolver.SAT module.
  * add getFixedLiterals to ToySolver.SAT module.
  * use 'mwc-random' package instead of 'random' package.
  * introduce 'Config' data type in ToySolver.SAT to simplify configulation management.
  * add subset-sum problem solver
  * implement backracking and explanation generation in simplex solver and congruence closure solver.

  0.3.0
  -----
  * split OPB/WBO file library into a serarate 'pseudo-boolean' library.

basic-deps:
  MIP: '>=0.1.1.0 && <0.2'
  heaps: -any
  bytestring: '>=0.9.2.1 && <0.12'
  mwc-random: '>=0.13.1 && <0.16'
  ansi-wl-pprint: -any
  case-insensitive: -any
  haskeline: '>=0.7 && <0.9'
  split: -any
  stm: '>=2.3'
  xml-conduit: -any
  base: '>=4.12 && <4.17'
  data-default-class: -any
  time: '>=1.5.0'
  unordered-containers: '>=0.2.3 && <0.3.0'
  text: '>=1.1.0.0'
  vector-space: '>=0.8.6'
  primes: -any
  clock: '>=0.7.1'
  megaparsec: '>=7 && <10'
  unbounded-delays: -any
  toysolver: -any
  filepath: -any
  process: '>=1.1.0.2'
  parsec: '>=3.1.2 && <4'
  data-default: -any
  semigroups: '>=0.17'
  array: '>=0.5'
  pseudo-boolean: '>=0.1.3.0 && <0.2.0.0'
  queue: -any
  log-domain: -any
  bytestring-encoding: '>=0.1.1.0'
  lattices: -any
  containers: '>=0.5.8'
  OptDir: -any
  loop: '>=0.3.0 && <1.0.0'
  hashtables: -any
  ghc-prim: -any
  data-interval: '>=2.0.1 && <2.2.0'
  intern: '>=0.9.1.2 && <1.0.0.0'
  zlib: -any
  mtl: '>=2.1.2'
  hashable: '>=1.2 && <1.5.0.0'
  attoparsec: -any
  transformers: '>=0.2'
  temporary: '>=1.2'
  optparse-applicative: '>=0.13'
  sign: '>=0.2.0 && <1.0.0'
  deepseq: -any
  extended-reals: '>=0.1 && <1.0'
  scientific: -any
  bytestring-builder: -any
  multiset: -any
  finite-field: '>=0.9.0 && <1.0.0'
  pretty: '>=1.1.2.0 && <1.2'
  template-haskell: -any
  primitive: '>=0.6'
  transformers-compat: '>=0.3'
  vector: '>=0.11'
  directory: -any
all-versions:
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.4.1
- 0.0.5
- 0.0.6
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.7.0
- 0.8.0
author: Masahiro Sakai (masahiro.sakai@gmail.com)
latest: 0.8.0
description-type: markdown
description: "toysolver\n=========\n\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![Join
  the chat at https://gitter.im/msakai/toysolver](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/msakai/toysolver)\n\nHackage:\n[![Hackage](https://img.shields.io/hackage/v/toysolver.svg)](https://hackage.haskell.org/package/toysolver)\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/toysolver.svg)](https://packdeps.haskellers.com/feed?needle=toysolver)\n[![Hackage
  CI](https://matrix.hackage.haskell.org/api/v2/packages/toysolver/badge)](https://matrix.hackage.haskell.org/#/package/toysolver)\n\nDev:\n[![Build
  Status (AppVeyor)](https://ci.appveyor.com/api/projects/status/w7g615sp8ysiqk7w/branch/master?svg=true)](https://ci.appveyor.com/project/msakai/toysolver/branch/master)\n[![Build
  Status (GitHub Actions)](https://github.com/msakai/toysolver/workflows/build/badge.svg)](https://github.com/msakai/toysolver/actions)\n[![Coverage
  Status](https://coveralls.io/repos/msakai/toysolver/badge.svg)](https://coveralls.io/r/msakai/toysolver)\n\nIt
  provides solver implementations of various problems including SAT, SMT, Max-SAT,
  PBS (Pseudo Boolean Satisfaction), PBO (Pseudo Boolean Optimization), MILP (Mixed
  Integer Linear Programming) and non-linear real arithmetic.\n\nIn particular it
  contains moderately-fast pure-Haskell SAT solver 'toysat'.\n\nInstallation\n------------\n\nSee
  [INSTALL.md](INSTALL.md).\n\nUsage\n-----\n\nThis package includes several commands.\n\n###
  toysolver\n\nArithmetic solver for the following problems:\n\n* Mixed Integer Liner
  Programming (MILP or MIP)\n* Boolean SATisfiability problem (SAT)\n* PB\n    * Pseudo
  Boolean Satisfaction (PBS)\n    * Pseudo Boolean Optimization (PBO)\n    * Weighted
  Boolean Optimization (WBO)\n* Max-SAT families\n    * Max-SAT\n    * Partial Max-SAT\n
  \   * Weighted Max-SAT\n    * Weighted Partial Max-SAT\n* Real Closed Field\n\nUsage:\n\n
  \   toysolver [OPTION...] [file.lp|file.mps]\n    toysolver --lp [OPTION...] [file.lp|file.mps]\n
  \   toysolver --sat [OPTION...] [file.cnf]\n    toysolver --pb [OPTION...] [file.opb]\n
  \   toysolver --wbo [OPTION...] [file.wbo]\n    toysolver --maxsat [OPTION...] [file.cnf|file.wcnf]\n\n
  \   -h  --help           show help\n    -v  --version        show version number\n
  \       --solver=SOLVER  mip (default), omega-test, cooper, cad, old-mip, ct\n\n###
  toysat\n\nSAT-based solver for the following problems:\n\n* SAT\n    * Boolean SATisfiability
  problem (SAT)\n    * Minimally Unsatisfiable Subset (MUS)\n    * Group-Oriented
  MUS (GMUS)\n* PB\n    * Pseudo Boolean Satisfaction (PBS)\n    * Pseudo Boolean
  Optimization (PBO)\n    * Weighted Boolean Optimization (WBO)\n* Max-SAT families\n
  \   * Max-SAT\n    * Partial Max-SAT\n    * Weighted Max-SAT\n    * Weighted Partial
  Max-SAT\n* Integer Programming (all variables must be bounded)\n\nUsage:\n\n    toysat
  [file.cnf|-]\n    toysat --sat [file.cnf|-]\n    toysat --mus [file.gcnf|file.cnf|-]\n
  \   toysat --pb [file.opb|-]\n    toysat --wbo [file.wbo|-]\n    toysat --maxsat
  [file.cnf|file.wcnf|-]\n    toysat --lp [file.lp|file.mps|-]\n\nPB'12 competition
  result: \n\n* toysat placed 2nd in PARTIAL-BIGINT-LIN and SOFT-BIGINT-LIN categories\n*
  toysat placed 4th in PARTIAL-SMALLINT-LIN and SOFT-SMALLINT-LIN categories\n* toysat
  placed 8th in OPT-BIGINT-LIN category\n\n### toysmt\n\nSMT solver based on toysat.\n\nUsage:\n\n
  \   toysmt [file.smt2]\n\nCurrently only QF_UF, QF_RDL, QF_LRA, QF_UFRDL and QF_UFLRA
  logic are supported.\n\n### toyfmf\n\nSAT-based finite model finder for first order
  logic (FOL).\n\nUsage:\n\n    toyfmf [file.tptp] [size]\n\n### toyconvert\n\nConverter
  between various problem files.\n\nUsage:\n\n    toyconvert -o [outputfile] [inputfile]\n\nSupported
  formats:\n\n* Input formats: .cnf .wcnf .opb .wbo .gcnf .lp .mps\n* Output formats:
  .cnf .wcnf .opb .wbo .lsp .lp .mps .smp .smt2 .ys\n\nBindings\n--------\n\n* [ersatz-toysat](http://hackage.haskell.org/package/ersatz-toysat)
  -  toysat backend driver for [ersatz](http://hackage.haskell.org/package/ersatz)\n*
  [satchmo-toysat](http://hackage.haskell.org/package/satchmo-toysat) - toysat backend
  driver for [satchmo](http://hackage.haskell.org/package/satchmo)\n\nSpin-off projects
  and packages\n------------------------------\n\n* [bytestring-encoding](https://github.com/msakai/bytestring-encoding)\n*
  [data-interval](https://github.com/msakai/data-interval)\t\n* [extended-reals](https://github.com/msakai/extended-reals)\n*
  [finite-field](https://github.com/msakai/finite-field)\n* [MIP](https://github.com/msakai/haskell-MIP)\n*
  [OptDir](https://github.com/msakai/haskell-optdir)\n* [pseudo-boolean](https://github.com/msakai/pseudo-boolean)\n*
  [sign](https://github.com/msakai/sign)\n"
license-name: BSD-3-Clause
