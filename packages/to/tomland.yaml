all-versions:
- 0.0.0
- 0.1.0
- 0.2.0
- 0.2.1
- '0.3'
- 0.3.1
- 0.4.0
- 0.5.0
- 1.0.0
- 1.0.1.0
- 1.1.0.0
- 1.1.0.1
- 1.2.0.0
- 1.2.1.0
- 1.3.0.0
- 1.3.1.0
- 1.3.2.0
- 1.3.3.0
- 1.3.3.1
- 1.3.3.2
author: Dmitrii Kovanikov, Veronika Romashkina
basic-deps:
  base: '>=4.11 && <4.21'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.5.7 && <0.8'
  deepseq: '>=1.4 && <1.6'
  hashable: '>=1.3.1.0 && <1.5'
  megaparsec: '>=7.0.5 && <9.7'
  mtl: '>=2.2 && <2.4'
  parser-combinators: '>=1.1.0 && <1.4'
  text: '>=1.2 && <2.2'
  time: '>=1.8 && <1.15'
  tomland: '>=0'
  transformers: '>=0.5 && <0.7'
  unordered-containers: '>=0.2.7 && <0.3'
  validation-selective: '>=0.1.0 && <0.3'
changelog: "# Changelog\n\n`tomland` uses [PVP Versioning][1].\nThe changelog is available
  [on GitHub][2].\n\n## 1.3.3.2 – Oct 5, 2022\n\n* [#395](https://github.com/kowainik/tomland/issues/395):\n
  \ Support GHC-9.2.4.\n* Upgrade `text` to version `2`.\n* Upgrade `hedgehog` and
  `hspec`.\n\n## \U0001F341 1.3.3.1 — Nov 8, 2021\n\n* Disable building executables
  by default\n* Bump up dependencies:\n    * Allow `bytestring-0.11.*`\n    * Allow
  `hashable-1.4.0.0`\n    * Allow `megaparsec-9.2.0`\n    * Allow `time-1.13`\n    *
  Allow `transformers-0.6.*`\n\n## \U0001F95E 1.3.3.0 — Mar 14, 2021\n\n* [#370](https://github.com/kowainik/tomland/issues/370):\n
  \ Support GHC-9.0.1.\n* [#368](https://github.com/kowainik/tomland/issues/368):\n
  \ Upgrade `hashable` lower bound to 1.3.1.0.\n* Sort keys in pretty printing by
  default.\n\n## \U0001F402 1.3.2.0 — Feb 12, 2021\n\n* [#186](https://github.com/kowainik/tomland/issues/186):\n
  \ Implement TOML difference. Add `decodeExact` and `decodeFileExact`.\n* [#325](https://github.com/kowainik/tomland/issues/325):\n
  \ Add ability to one or multiline printing to `PrintOptions` for arrays.\n* [#329](https://github.com/kowainik/tomland/issues/329):\n
  \ Add `_Harcoded` codec and `hardcoded` combinator.\n* [#333](https://github.com/kowainik/tomland/issues/333):\n
  \ Fix bug with parsing leading zeroes in numeric values.\n* [#334](https://github.com/kowainik/tomland/issues/334):\n
  \ Escape unicode characters correctly in `encode`.\n* [#364](https://github.com/kowainik/tomland/issues/364):\n
  \ Update GHC from `8.10.2` to `8.10.4`.\n* [#358](https://github.com/kowainik/tomland/issues/358):\n
  \ Upgrade `parser-combinators` upper bound to allow `1.3`.\n\n## 1.3.1.0 — Sep 21,
  2020\n\n* [#331](https://github.com/kowainik/tomland/issues/331):\n  Support hexidecimal,
  octal and binary values with underscores.\n* [#335](https://github.com/kowainik/tomland/issues/335):\n
  \ Consider table array keys in `tableMap`s as well.\n* [#338](https://github.com/kowainik/tomland/issues/338):\n
  \ Allow `megaparsec-9.0` and `hspec-megaparsec-2.2`.\n* Update GHC from `8.8.3`
  to `8.8.4`, from `8.10.1` to `8.10.2`.\n\n## 1.3.0.0 — May 19, 2020\n\n* [#253](https://github.com/kowainik/tomland/issues/253):\n
  \ Support GHC-8.10.1. Move to GHC-8.8.3 from 8.8.1.\n* Drop support of GHC-8.2.2.\n*
  [#271](https://github.com/kowainik/tomland/issues/271):\n  Use `Validation` from
  `validation-selective` in `TomlEnv`.\n  This allows to accumulate and display all
  errors that occurs during the\n  decoding phase.\n  All  previous decode functions
  return list of all `TomlDecodeError`s.\n\n  __Note:__ Due to the specific of `Validation`
  data type, there is no `Monad`\n  instanse of `Codec` anymore. However, this doesn't
  limit any previously\n  released features.\n* Add `decodeValidation`, `decodeFileValidation`
  functions to return\n  `Validation` instead of `Either`.\n* [#263](https://github.com/kowainik/tomland/issues/263):\n
  \ Simplify `Codec` abstraction. Instead of having `Codec r w c a`\n  now it is `Codec
  TomlEnv TomlState c a`.\n\n  Remove `BiCodec` as it is simple `TomlCodec` with this
  change.\n* [#256](https://github.com/kowainik/tomland/issues/256),\n  [#278](https://github.com/kowainik/tomland/issues/278):\n
  \ Rename modules to simplify module structure.\n\n  __Migration guide:__ If you
  use `Toml` module (as advised by the library) then\n  no changes required in your
  code.\n   If you import some particular modules from `tomland` here is the renaming\n
  \  scheme you can use to apply to your imports:\n\n   | __Old__ | __New__ |\n   |-----|-----|\n
  \  | `Toml.Bi` | `Toml.Codec` |\n   | `Toml.Bi.Combinators` | `Toml.Codec.Combinator`
  |\n   | `Toml.Bi.Monad` | `Toml.Codec.Types` |\n   | `Toml.Bi.Code` | `Toml.Codec.Code`
  or `Toml.Codec.Types` or `Toml.Codec.Error` |\n   | `Toml.Bi.Map` | `Toml.Codec.BiMap`
  or `Toml.Codec.BiMap.Conversion` |\n   | `Toml.Generic` | `Toml.Codec.Generic` |\n
  \  | `Toml.Edsl` | `Toml.Type.Edsl` |\n   | `Toml.Printer` | `Toml.Type.Printer`
  |\n   | `Toml.PrefixTree` | `Toml.Type.PrefixTree` or `Toml.Type.Key` |\n\n\n* [#283](https://github.com/kowainik/tomland/issues/283):\n
  \ Documentation improvements:\n    - Add Codec Tables to each kind of codecs with
  examples\n    - Add high-level description to each reexported module\n    - Add
  @since annotations\n    - Improve README\n    - Add more examples into functions\n*
  [#237](https://github.com/kowainik/tomland/issues/237):\n  Add `BiMap` `_Validate`
  and codecs `validate` and `validateIf` for custom\n  validation.\n* [#289](https://github.com/kowainik/tomland/issues/289):\n
  \ Add `_Coerce` `TomlBiMap`.\n* [#270](https://github.com/kowainik/tomland/issues/270):\n
  \ Add `pair` and `triple` codecs for tuples.\n* [#261](https://github.com/kowainik/tomland/issues/261):\n
  \ Implement `tableMap` codec to use TOML keys as `Map` keys.\n* [#243](https://github.com/kowainik/tomland/issues/243):\n
  \ Implement `hashMap`, `tableHashMap`, `intMap`, `tableIntMap` codec\n  combinators.\n*
  Add `intSet` codec.\n* Add `_KeyInt` `BiMap`for key-as-int approach.\n* [#242](https://github.com/kowainik/tomland/issues/242):\n
  \ Add `HasCodec` instances for `Map`, `HashMap` and `IntMap` for\n  `Generic` deriving.\n*
  [#272](https://github.com/kowainik/tomland/issues/272):\n  Add `TomlTable` newtype
  to be used in generic `DerivingVia`.\n* [#251](https://github.com/kowainik/tomland/issues/251):\n
  \ Implement `ByteStringAsText`, `ByteStringAsBytes`, `LByteStringAsText`,\n  `LByteStringAsBytes`
  newtypes. Add corresponding `HasCodec` instances for\n  these data types.\n* [#311](https://github.com/kowainik/tomland/issues/311):\n
  \ Reimplement custom `TomlState` instead of using `MaybeT` and `State`.\n* Rename
  `ParseException` to `TomlParseError`.\n* Rename `DecodeException` to `TomlDecodeError`.\n*
  Add `TableArrayNotFound` constructor to `TomlDecodeError`.\n* Remove `TrivialError`
  and `TypeMismatch` constructors of the `TomlDecodeError`\n  type.\n* [#313](https://github.com/kowainik/tomland/issues/313):\n
  \ Store `Key` in the `BiMapError` constructor of `TomlDecodeError`.\n* Add `decodeFileEither`
  and `encodeToFile` functions.\n* Fix `sum` and `product` behaviour on missing fields.
  Now it returns the\n  wrapper of `mempty` instead of failure.\n* [#302](https://github.com/kowainik/tomland/issues/302):\n
  \ `nonEmpty` codec throws `TableArrayNotFound` instead of `TableNotFound`.\n* [#318](https://github.com/kowainik/tomland/issues/318):\n
  \ Export a function for parsing TOML keys `parseKey`.\n* [#310](https://github.com/kowainik/tomland/issues/310):\n
  \ Add tests on all kinds of `TomlDecodeError` with `decode` function.\n* [#218](https://github.com/kowainik/tomland/issues/218):\n
  \ Add tests for TOML validation.\n* [#252](https://github.com/kowainik/tomland/issues/252):\n
  \ Move to `hspec-*` family of libraries from `tasty-*`.\n* [#297](https://github.com/kowainik/tomland/issues/297):\n
  \ Tests parallelism and speed-up.\n* [#246](https://github.com/kowainik/tomland/issues/246):\n
  \ Bump up `megaparsec` version to `8.0.0`.\n\n## 1.2.1.0 — Nov 6, 2019\n\n* [#203](https://github.com/kowainik/tomland/issues/203):\n
  \ Implement codecs for `Map`-like data structures.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#241](https://github.com/kowainik/tomland/issues/241):\n  Implement codecs for
  `Monoid` wrappers:\n  `all`, `any`, `sum`, `product`, `first`, `last`.\n  (by [@vrom911](https://github.com/vrom911))\n\n##
  1.2.0.0 — Oct 12, 2019\n\n* [#216](https://github.com/kowainik/tomland/issues/216):\n
  \ Refactor TOML parser significantly. Check for some validation errors.\n  (by [@chshersh](https://github.com/chshersh))\n*
  [#213](https://github.com/kowainik/tomland/issues/213):\n  Support GHC-8.8.1.\n
  \ (by [@vrom911](https://github.com/vrom911))\n* [#226](https://github.com/kowainik/tomland/issues/226):\n
  \ Add `dimatch` combinator for better support of sum types.\n  (by [@Nimor111](https://github.com/Nimor111))\n*
  [#219](https://github.com/kowainik/tomland/issues/219):\n  Add INLINE pragmas to
  code.\n  (by [@willbasky](https://github.com/willbasky))\n* [#204](https://github.com/kowainik/tomland/issues/204):\n
  \ Implement bidirectional codecs to work with `ByteString` as array of bytes.\n
  \ (by [@crtschin](https://github.com/crtschin))\n* [#201](https://github.com/kowainik/tomland/issues/201):\n
  \ Implement `set` and `hashSet` combinators for array of tables.\n  (by [@SanchayanMaity](https://github.com/SanchayanMaity))\n*
  [#215](https://github.com/kowainik/tomland/issues/215):\n  Move benchmarks to separate
  repository\n  [toml-benchmarks](https://github.com/kowainik/toml-benchmarks).\n
  \ (by [@kutyel](https://github.com/kutyel))\n* [#209](https://github.com/kowainik/tomland/issues/209):\n
  \ Bump up `parser-combinators` to `1.2.0`.\n  (by [@vrom911](https://github.com/vrom911))\n*
  [#198](https://github.com/kowainik/tomland/issues/198):\n  Improve test generators.\n
  \ (by [@gabrielelana](https://github.com/gabrielelana)\n  , [@chshersh](https://github.com/chshersh)\n
  \ )\n\n## 1.1.0.1 — Jul 10, 2019\n\n* [#206](https://github.com/kowainik/tomland/issues/206):\n
  \ Fix in parser of inline tables inside tables, add tests for official TOML examples\n
  \ (by [@jiegillet](https://github.com/jiegillet))\n\n## 1.1.0.0 — Jul 8, 2019\n\n*
  [#154](https://github.com/kowainik/tomland/issues/154):\n  Implement `Generic` bidirectional
  codecs\n  (by [@chshersh](https://github.com/chshersh)).\n* [#145](https://github.com/kowainik/tomland/issues/145):\n
  \ Add support for inline table arrays\n  (by [@jiegillet](https://github.com/jiegillet)).\n*
  [#195](https://github.com/kowainik/tomland/issues/195):\n  Fix an exponential parser
  behavior for parsing table of arrays\n  (by [@jiegillet](https://github.com/jiegillet)).\n*
  [#190](https://github.com/kowainik/tomland/issues/190):\n  Add `enumBounded` codec
  for nullary sum types\n  (by [@mxxo](https://github.com/mxxo)).\n* [#189](https://github.com/kowainik/tomland/issues/189):\n
  \ **Breaking change:** Implement custom table sorting by keys. Also fields of\n
  \ the `PrintOptions` data type were renamed according to style guide\n  (by [@ramanshah](https://github.com/ramanshah)).\n\n
  \ __Before:__\n\n  ```haskell\n  data PrintOptions = PrintOptions\n      { shouldSort
  :: Bool\n      , indent     :: Int\n      } deriving (Show)\n  ```\n\n  __Now:__\n\n
  \ ```haskell\n  data PrintOptions = PrintOptions\n      { printOptionsSorting ::
  !(Maybe (Key -> Key -> Ordering))\n      , printOptionsIndent  :: !Int\n      }\n
  \ ```\n\n  __Migration guide:__ If you used `indent` field, use `printOptionsIndent`\n
  \ instead. If you used `shouldSort`, use `printOptionsSorting` instead and pass\n
  \ `Nothing` instead of `False` or `Just compare` instead of `True`.\n\n## 1.0.1.0
  — May 17, 2019\n\n* [#177](https://github.com/kowainik/tomland/issues/177):\n  Add
  a more extensive property generator for `Piece`.\n* [#187](https://github.com/kowainik/tomland/issues/187):\n
  \ Bump up to `hedgehog-1.0`.\n* Support GHC 8.6.5\n\n## 1.0.0 — Jan 14, 2019\n\n*
  [#13](https://github.com/kowainik/tomland/issues/13):\n  Support array of tables.\n\n
  \ + [#131](https://github.com/kowainik/tomland/issues/131):\n    Uncommenting `tomlTableArrays`
  from `TOML`.\n  + [#134](https://github.com/kowainik/tomland/issues/134):\n    Pretty
  printer arrays of tables and golden tests.\n  + [#143](https://github.com/kowainik/tomland/issues/143):\n
  \   Parser for arrays of tables.\n  + [#155](https://github.com/kowainik/tomland/issues/155):\n
  \   Add `list` and `nonEmpty` combinators for coding lists of custom user types.\n
  \ + [#142](https://github.com/kowainik/tomland/issues/142):\n    Adding EDSL support
  for arrays of tables.\n  + [#144](https://github.com/kowainik/tomland/issues/144):\n
  \   Added tests for arrays of tables.\n\n* [#140](https://github.com/kowainik/tomland/issues/140):\n
  \ **Breaking change:** Replace `wrapper` by `diwrap`.\n\n  _Migration guide:_ change
  `Toml.wrapper Toml.text \"foo\"` to `Toml.diwrap (Toml.text \"foo\")`.\n* [#152](https://github.com/kowainik/tomland/issues/152):\n
  \ **Breaking change:** Removing `mdimap`.\n\n  _Migration guide:_ change `Toml.mdimap
  showX parseX (Toml.text \"foo\")` to `Toml.textBy showX parseX \"foo\"`.\n* [#137](https://github.com/kowainik/tomland/issues/137):\n
  \ Replace `Maybe` with `Either` in `BiMap`.\n* [#174](https://github.com/kowainik/tomland/issues/174):\n
  \ Add `_LText` and `lazyText` codecs.\n* [#163](https://github.com/kowainik/tomland/issues/163):\n
  \  Move all time data types from nested `DateTime` to `Value`.\n* [#146](https://github.com/kowainik/tomland/issues/146):\n
  \ Allow underscores in floats.\n* [#64](https://github.com/kowainik/tomland/issues/64):\n
  \ Integer parser doesn't accept leading zeros.\n* [#50](https://github.com/kowainik/tomland/issues/50):\n
  \  Add property-based tests for encoder and decoder.\n* [#119](https://github.com/kowainik/tomland/issues/119):\n
  \ Add property-based tests for `BiMap`.\n* [#149](https://github.com/kowainik/tomland/issues/149):\n
  \ Removing records syntax from `PrefixTree`.\n\n## 0.5.0 — Nov 12, 2018\n\n* [#81](https://github.com/kowainik/tomland/issues/81):\n
  \ **Breaking change:** Rename data types.\n\n  _Migration guide:_ rename `Bijection`
  to `Codec`, `Bi` to `BiCodec` and\n  `BiToml` to `TomlCodec`.\n* [#82](https://github.com/kowainik/tomland/issues/82):\n
  \ **Breaking change:** Remove `maybeT`. Add `dioptional` instead.\n\n  _Migration
  guide:_ replace `Toml.maybeT Toml.int \"foo\"` with `Toml.dioptional (Toml.int \"foo\")`.\n*
  [#95](https://github.com/kowainik/tomland/issues/95):\n  **Breaking change:** Swap
  fields in `BiMap`s for consistency with `lens` package.\n\n  _Migration guide:_
  reverse order of composition when using `BiMap`s.\n* [#98](https://github.com/kowainik/tomland/issues/98):\n
  \ Implement benchmarks for `tomland` and compare with `htoml` and `htoml-megaparsec`
  libraries.\n* [#130](https://github.com/kowainik/tomland/issues/130):\n  Added combinators
  to `Toml.Bi.Combinators`.\n* [#115](https://github.com/kowainik/tomland/issues/115):\n
  \ Added time combinators to `Toml.BiMap` and `Toml.Bi.Combinators`.\n* [#99](https://github.com/kowainik/tomland/issues/99):\n
  \ Split `Toml.Parser` file into smaller files.\n* [#22](https://github.com/kowainik/tomland/issues/22):\n
  \ Report proper type checking error during parsing.\n* [#14](https://github.com/kowainik/tomland/issues/14):\n
  \ Add support for inline tables parsing.\n* [#70](https://github.com/kowainik/tomland/issues/70):\n
  \ Add `_TextBy` and `_Read` combinators.\n* [#11](https://github.com/kowainik/tomland/issues/11):\n
  \ Add `PrintOptions` (sorting, indentation) for pretty printer.\n* [#17](https://github.com/kowainik/tomland/issues/17):\n
  \ Allow underscores in integers*.\n* [#90](https://github.com/kowainik/tomland/issues/90):\n
  \ Migrate to megaparsec 7.0.\n* [#85](https://github.com/kowainik/tomland/issues/85):\n
  \ Add `Date` generator for property-based tests.\n* [#88](https://github.com/kowainik/tomland/issues/88):\n
  \ Add `Array` generator for property-based tests.\n* [#86](https://github.com/kowainik/tomland/issues/86):\n
  \ Improve `String` generator for property-based tests.\n* [#87](https://github.com/kowainik/tomland/issues/87):\n
  \ Improve `Double` generator for property-based tests.\n* Add support for GHC 8.6.1.\n
  \ Add support for GHC 8.4.4.\n  Drop support for GHC 8.0.2.\n* [#109](https://github.com/kowainik/tomland/issues/109):\n
  \ Add function `decodeToml`.\n\n## 0.4.0\n\n* [#54](https://github.com/kowainik/tomland/issues/54):\n
  \ Add support for sum types.\n  Rename `Prism` to `BiMap`.\n  Rename `bijectionMaker`
  to `match`.\n  Add `string` codec.\n\n## 0.3.1\n\n* [#19](https://github.com/kowainik/tomland/issues/19):\n
  \ Add proper parsing of floating point numbers.\n* [#15](https://github.com/kowainik/tomland/issues/15):\n
  \ Add parsing of multiline strings.\n* [#40](https://github.com/kowainik/tomland/issues/40):\n
  \ Support full-featured string parser.\n* [#18](https://github.com/kowainik/tomland/issues/18):\n
  \ Add dates parsing.\n* Add useful combinators for `newtype` wrappers.\n* [#58](https://github.com/kowainik/tomland/issues/58):\n
  \ Add `decodeFile` function.\n\n## 0.3\n\n* [#60](https://github.com/kowainik/tomland/issues/60):\n
  \ **Breaking change:** Replace `Valuer` with `Prism`.\n\n  _Migration guide:_ replace
  any `fooV` with corresponding prism `_Foo`.\n* [#66](https://github.com/kowainik/tomland/issues/66):\n
  \ **Breaking change:** Introduce consistent names according to Haskell types.\n\n
  \ _Migration guide:_ see issue details to know which names to use.\n* [#8](https://github.com/kowainik/tomland/issues/8):\n
  \ Create EDSL for easier TOML data type writing.\n* [#10](https://github.com/kowainik/tomland/issues/10):\n
  \ Add `Semigroup` and `Monoid` instances for `PrefixTree` and `TOML`.\n  Add property
  tests on laws.\n* [#20](https://github.com/kowainik/tomland/issues/20):\n  Add parsing
  of hexadecimal, octal, and binary integer numbers.\n* [#26](https://github.com/kowainik/tomland/issues/26):\n
  \ Implement unit tests for TOML parsers.\n  Allow terminating commas inside an array.\n
  \ Allow comments before and after any value inside an array.\n  Allow keys to be
  literal strings.\n\n## 0.2.1\n\n* Make `table` parser work with `maybeP`.\n* [#39](https://github.com/kowainik/tomland/issues/39):\n
  \ Implement `prettyException` function for `DecodeException`.\n\n## 0.2.0\n\n* Switch
  names for `decode` and `encode` functions.\n* [#47](https://github.com/kowainik/tomland/issues/47):\n
  \ Rename `dimapBijection` to `dimap`. Introduce `mdimap` combinator.\n* [#37](https://github.com/kowainik/tomland/issues/37):\n
  \ Add tables support for bidirectional conversion.\n\n## 0.1.0\n\n* [#16](https://github.com/kowainik/tomland/issues/16):\n
  \ Add parser for literal strings.\n* Add `IsString` instance for `Key` data type.\n*
  [#38](https://github.com/kowainik/tomland/issues/38):\n  Add bidirectional converter
  for array.\n* [#21](https://github.com/kowainik/tomland/issues/21):\n  Report expected
  vs. actual type error in parsing.\n* [#44](https://github.com/kowainik/tomland/issues/44):\n
  \ Add bidirectional converter for `Maybe`.\n\n## 0.0.0\n\n* [#3](https://github.com/kowainik/tomland/issues/3):\n
  \ Implement basic TOML parser with `megaparsec`.\n* [#7](https://github.com/kowainik/tomland/issues/7):\n
  \ Implement type safe version of `Value` type as GADT.\n* [#4](https://github.com/kowainik/tomland/issues/4):\n
  \ Implement basic pretty-printer.\n* [#1](https://github.com/kowainik/tomland/issues/1):\n
  \ Implement types representing TOML configuration.\n* Initially created.\n\n[1]:
  https://pvp.haskell.org\n[2]: https://github.com/kowainik/tomland/releases\n"
changelog-type: markdown
description: |
  # tomland

  ![palm](https://user-images.githubusercontent.com/4276606/51088259-7a777000-176e-11e9-9d76-6be4023c0ac3.png)

  [![GitHub CI](https://github.com/kowainik/tomland/workflows/CI/badge.svg)](https://github.com/kowainik/tomland/actions)
  [![AppVeyor CI](https://ci.appveyor.com/api/projects/status/github/kowainik/tomland?branch=main&svg=true)](https://ci.appveyor.com/project/kowainik/tomland)
  [![Hackage](https://img.shields.io/hackage/v/tomland.svg?logo=haskell)](https://hackage.haskell.org/package/tomland)
  [![Stackage LTS](http://stackage.org/package/tomland/badge/lts)](http://stackage.org/lts/package/tomland)
  [![Stackage Nightly](http://stackage.org/package/tomland/badge/nightly)](http://stackage.org/nightly/package/tomland)
  [![MPL-2.0 license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/kowainik/tomland/blob/main/LICENSE)

  > “A library is like an island in the middle of a vast sea of ignorance,
  > particularly if the library is very tall and the surrounding area has been
  > flooded.”

  > ― Lemony Snicket, Horseradish

  `tomland` is a Haskell library for _Bidirectional TOML
  Serialization_. It provides the composable interface for implementing
  [TOML](https://github.com/toml-lang/toml) codecs. If you want to use
  TOML as a configuration for your tool or application, you can use
  `tomland` to easily convert in both ways between textual TOML
  representation and Haskell types.

  ✍️ `tomland` supports [TOML spec version 0.5.0](https://github.com/toml-lang/toml/wiki#v050-compliant).

  The following blog post has more details about the library design and
  internal implementation details:

  * [`tomland`: Bidirectional TOML Serialization](https://kowainik.github.io/posts/2019-01-14-tomland)

  This README contains a basic usage example of the `tomland` library. All code
  below can be compiled and run with the following command:

  ```
  cabal run readme
  ```

  ## Preamble: imports and language extensions

  Since this is a literate haskell file, we need to specify all our language
  extensions and imports up front.

  ```haskell
  {-# OPTIONS -Wno-unused-top-binds #-}

  {-# LANGUAGE LambdaCase        #-}
  {-# LANGUAGE OverloadedStrings #-}

  import Control.Applicative ((<|>))
  import Data.Text (Text)
  import Data.Time (Day)
  import Toml (TomlCodec, (.=))

  import qualified Data.Text.IO as TIO
  import qualified Toml
  ```

  `tomland` is designed for qualified imports and intended to be imported
  as follows:

  ```haskell ignore
  import Toml (TomlCodec, (.=))  -- add 'TomlBiMap' and 'Key' here optionally
  import qualified Toml
  ```

  ## Data type: parsing and printing

  We're going to parse TOML configuration from
  [`examples/readme.toml`](examples/readme.toml) file. The configuration
  contains the following description of our data:

  ```toml
  server.port        = 8080
  server.codes       = [ 5, 10, 42 ]
  server.description = """
  This is production server.
  Don't touch it!
  """

  [mail]
      host = "smtp.gmail.com"
      send-if-inactive = false

  [[user]]
     guestId = 42

  [[user]]
     guestId = 114

  [[user]]
      login = "Foo Bar"
      createdAt = 2020-05-19
  ```

  The above static configuration describes `Settings` for some
  server. It has several top-level fields, a table with the name `mail`
  and an array of tables with the name `user` that stores list of
  different types of users.

  We can model such TOML using the following Haskell data types:

  ```haskell
  data Settings = Settings
      { settingsPort        :: !Port
      , settingsDescription :: !Text
      , settingsCodes       :: [Int]
      , settingsMail        :: !Mail
      , settingsUsers       :: ![User]
      }

  data Mail = Mail
      { mailHost           :: !Host
      , mailSendIfInactive :: !Bool
      }

  data User
      = Guest !Integer  -- id of guest
      | Registered !RegisteredUser  -- login and createdAt of registered user

  data RegisteredUser = RegisteredUser
      { registeredUserLogin     :: !Text
      , registeredUserCreatedAt :: !Day
      }

  newtype Port = Port Int
  newtype Host = Host Text
  ```

  Using the `tomland` library, you can write bidirectional converters for these types
  with the following guidelines and helper functions:

  1. If your fields are some simple primitive types like `Int` or `Text` you can just
     use standard codecs like `Toml.int` and `Toml.text`.
  2. If you want to parse `newtype`s, use `Toml.diwrap` to wrap parsers for
     underlying `newtype` representation.
  3. For parsing nested data types, use `Toml.table`. But it requires to specify
     this data type as TOML table in the `.toml` file.
  4. If you have lists of custom data types, use `Toml.list`. Such lists are
     represented as _array of tables_ in TOML. If you have lists of the primitive types
     like `Int`, `Bool`, `Double`, `Text` or time types, that you can use
     `Toml.arrayOf` and parse arrays of values.
  5. If you have sets of custom data types, use `Toml.set` or `Toml.HashSet`. Such
     sets are represented as array of tables in TOML.
  6. For parsing sum types, use `Toml.dimatch`. This requires writing matching functions
     for the constructors of the sum type.
  7. `tomland` separates conversion between Haskell types and TOML values from
     matching values by keys. Converters between types and values have type
     `TomlBiMap` and are named with capital letter started with underscore. Main
     type for TOML codecs is called `TomlCodec`. To lift `TomlBiMap` to
     `TomlCodec` you need to use `Toml.match` function.

  ```haskell
  settingsCodec :: TomlCodec Settings
  settingsCodec = Settings
      <$> Toml.diwrap (Toml.int  "server.port")       .= settingsPort
      <*> Toml.text              "server.description" .= settingsDescription
      <*> Toml.arrayOf Toml._Int "server.codes"       .= settingsCodes
      <*> Toml.table mailCodec   "mail"               .= settingsMail
      <*> Toml.list  userCodec   "user"               .= settingsUsers

  mailCodec :: TomlCodec Mail
  mailCodec = Mail
      <$> Toml.diwrap (Toml.text "host") .= mailHost
      <*> Toml.bool "send-if-inactive"   .= mailSendIfInactive

  matchGuest :: User -> Maybe Integer
  matchGuest = \case
     Guest i -> Just i
     _ -> Nothing

  matchRegistered :: User -> Maybe RegisteredUser
  matchRegistered = \case
     Registered u -> Just u
     _ -> Nothing

  userCodec :: TomlCodec User
  userCodec =
          Toml.dimatch matchGuest      Guest      (Toml.integer "guestId")
      <|> Toml.dimatch matchRegistered Registered registeredUserCodec

  registeredUserCodec :: TomlCodec RegisteredUser
  registeredUserCodec = RegisteredUser
      <$> Toml.text "login"     .= registeredUserLogin
      <*> Toml.day  "createdAt" .= registeredUserCreatedAt
  ```

  And now we are ready to parse our TOML and print the result back to see whether
  everything is okay.

  ```haskell
  main :: IO ()
  main = do
      tomlRes <- Toml.decodeFileEither settingsCodec "examples/readme.toml"
      case tomlRes of
          Left errs      -> TIO.putStrLn $ Toml.prettyTomlDecodeErrors errs
          Right settings -> TIO.putStrLn $ Toml.encode settingsCodec settings
  ```

  ## Benchmarks and comparison with other libraries

  You can find benchmarks of the `tomland` library in the following repository:

  * [kowainik/toml-benchmarks](https://github.com/kowainik/toml-benchmarks)

  Since `tomland` uses 2-step approach with converting text to
  intermediate AST and only then decoding Haskell type from this AST,
  benchmarks are also implemented in a way to reflect this difference.

  | Library            | parse :: Text -> AST | transform :: AST -> Haskell |
  |--------------------|----------------------|-----------------------------|
  | `tomland`          | `305.5 μs`           | `1.280 μs`                  |
  | `htoml`            | `852.8 μs`           | `33.37 μs`                  |
  | `htoml-megaparsec` | `295.0 μs`           | `33.62 μs`                  |
  | `toml-parser`      | `164.6 μs`           | `1.101 μs`                  |

  In addition to the above numbers, `tomland` has several features that
  make it unique:

  1. `tomland` is the only Haskell library that has pretty-printing.
  2. `tomland` is compatible with the latest TOML spec while other libraries are not.
  3. `tomland` is bidirectional, which means that your encoding and
     decoding are consistent with each other by construction.
  4. `tomland` provides abilities for `Generic` and `DerivingVia`
     deriving out-of-the-box.
  5. Despite being the fastest, `toml-parser` doesn’t support the array
     of tables and because of that it’s hardly possible to specify the list
     of custom data types in TOML with this library. In addition,
     `toml-parser` doesn’t have ways to convert TOML AST to custom
     Haskell types and `htoml*` libraries use typeclasses-based approach
     via `aeson` library.

  ## Acknowledgement

  Icons made by [Freepik](http://www.freepik.com) from [www.flaticon.com](https://www.flaticon.com/) is licensed by [CC 3.0 BY](http://creativecommons.org/licenses/by/3.0/).
description-type: markdown
hash: a3b5b7b268e5e66b6423d802203646bc26dde50b00cad4a88dd2ca3f39c882f8
homepage: https://github.com/kowainik/tomland
latest: 1.3.3.2
license-name: MPL-2.0
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Bidirectional TOML serialization
test-bench-deps:
  base: '>=4.11 && <4.21'
  bytestring: '>=0'
  containers: '>=0.5.7 && <0.7'
  directory: ^>=1.3
  hashable: '>=0'
  hedgehog: '>=1.0.1 && <1.5'
  hspec: '>=2.7.1 && <2.12'
  hspec-hedgehog: ^>=0.0.1
  hspec-megaparsec: '>=2.0.0 && <2.3.0'
  megaparsec: '>=0'
  text: '>=0'
  time: '>=0'
  tomland: '>=0'
  unordered-containers: '>=0'
