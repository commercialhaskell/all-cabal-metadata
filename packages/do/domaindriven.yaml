homepage: https://github.com/tommyengstrom/domaindriven#readme
changelog-type: markdown
hash: ee95e6cd3f83639123921ba2e4e4e566176248e6dfcc0f57191191ee1945ae2e
test-bench-deps:
  warp: '>=3.3.23 && <3.4'
  http-client: '>=0.7.13.1 && <0.8'
  exceptions: '>=0.10.4 && <0.11'
  domaindriven-core: '>=0.5.0 && <0.6'
  base: '>=4.7 && <5'
  servant-client: ==0.19.*
  hspec: '>=2.9.7 && <2.10'
  text: '>=1.2.5.0 && <1.3'
  quickcheck-arbitrary-adt: '>=0.3.1.0 && <0.4'
  async: '>=2.2.4 && <2.3'
  quickcheck-classes: '>=0.6.5.0 && <0.7'
  servant-server: '>=0.19.2 && <0.20'
  containers: '>=0.6.5.1 && <0.7'
  openapi3: '>=3.2.2 && <3.3'
  domaindriven: '>=0.5.0 && <0.6'
  mtl: '>=2.2.2 && <2.3'
  deepseq: '>=1.4.6.1 && <1.5'
  QuickCheck: '>=2.14.2 && <2.15'
  aeson: '>=2.0.3 && <2.2'
maintainer: tommy@tommyengstrom.com
synopsis: Batteries included event sourcing and CQRS
changelog: |
  # Changelog for domaindriven

  ## 0.5.0

  First release published on hackage.
basic-deps:
  exceptions: '>=0.10.4 && <0.11'
  domaindriven-core: '>=0.5.0 && <0.6'
  bytestring: '>=0.11.3 && <0.12'
  unliftio: '>=0.2.0.1 && <0.3'
  base: '>=4.7 && <5'
  time: '>=1.11.1.1 && <1.12'
  unordered-containers: '>=0.2.19.1 && <0.3'
  text: '>=1.2.5.0 && <1.3'
  uuid: '>=1.3.15 && <1.4'
  async: '>=2.2.4 && <2.3'
  servant-server: '>=0.19.2 && <0.20'
  containers: '>=0.6.5.1 && <0.7'
  openapi3: '>=3.2.2 && <3.3'
  postgresql-simple: '>=0.6.4 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  generic-lens: '>=2.2.1.0 && <2.3'
  transformers: '>=0.5.6.2 && <0.6'
  random: '>=1.2.1.1 && <1.3'
  deepseq: '>=1.4.6.1 && <1.5'
  unliftio-pool: '>=0.2.2.0 && <0.3'
  http-types: '>=0.12.3 && <0.13'
  microlens: '>=0.4.12.0 && <0.5'
  aeson: '>=2.0.3 && <2.2'
  template-haskell: '>=2.18.0.0 && <2.19'
  streamly: '>=0.8.1.1 && <0.9'
  vector: '>=0.12.3.1 && <0.13'
all-versions:
- 0.5.0
author: Tommy EngstrÃ¶m
latest: 0.5.0
description-type: markdown
description: "# DomainDriven\n\nDomainDriven is a batteries included synchronous event
  sourcing and CQRS library. The goal of this library is to allow you to implement
  DDD principles without focusing on the boilerplate. \n\nIt uses `Template Haskell`
  we generate a Servant server from the specification and we aim to keep the specification
  as succinct as we can.\n\n## The idea\n\n- Use a GADT to specify the actions, what
  will be translated into `GET`s and `POST`s.\n- Make each event update run in a transaction,
  thereby avoiding the eventual consistency issues commonly associated with event
  sourcing.\n\n## How it works\n\nIn order to implement a model in `domaindriven`
  you have to define:\n- The model (current state)\n- The events\n- How to update
  the model when new events come in\n- The actions (queries and commands)\n- How to
  handle actions \n\n### Model\n\nThe model is the current state of the system. This
  is what you normally would keep in a database, but as this is an event sourced system
  the state is not fundamental as it can be recalculated.\n\nCurrently all implemented
  persistence strategies all keep the state in memory.\n\n### Events\n\nEvents are
  things that happened in the past. The event you define represent all the changes
  that can occur in the system.\n\nEvents should be specified in past tens.\n```haskell\n\ndata
  Event\n    = IncreasedCounter\n    | DecreasedCounter\n```\n\n### Event handler\n\nThe
  model is calculated as a fold over the stream of events. As events happened in the
  past we can never refuse to handle them. This means the event handler is simply:\n\n```
  haskell\napplyEvent :: Model -> Stored Event -> Model\n```\n\nwhere Stored is defined
  as:\n``` haskell\ndata Stored a = Stored\n    { storedEvent     :: a\n    , storedTimestamp
  :: UTCTime\n    , storedUUID      :: UUID\n    }\n```\n\n### Commands\n\nCommands
  are defined using a GADT with one type parameter representing the return type. For
  example:\n\n``` haskell\n-- Same as: data StorageAction (x :: ParamPart) method
  a where\ndata StorageAction :: Action where\n    GetFile\n        :: P x \"fileId\"
  UUID \n        -> StorageAction x Query ByteString\n    AddFile\n        :: P x
  \"fileContent\" ByteString \n        -> StorageAction Cmd UUID\n    RemoveFile \n
  \       :: P x \"fileId\" UUID \n        -> StorageAction Cmd ()\n```\n\n### Action
  handler\n\nActions, in contrast to events, are allowed to fail. If an action succeeds
  we need to return a value of the type specified by the constructor and, if it was
  a command, a list of events. The action handler do not update the state.\n\nIn addition
  you may need to make requests, read from disk, or perform other side effects in
  order to calculate the result.\n\n`ActionHandler` is defined as:\n\n``` haskell\ntype
  ActionHandler model event m c =\n    forall method a. c 'ParamType method a -> HandlerType
  method model event m a\n```\n\nIn practice this means you specify actions as\n\n```haskell\n\ndata
  CounterAction x method return where\n   GetCounter ::CounterAction x Query Int\n
  \  IncreaseCounter ::CounterAction x Cmd Int\n   DecreaseCounter ::CounterAction
  x Cmd Int\n```\n\nand the corresponding handler as\n\n```haskell\nhandleAction ::
  ActionHandler CounterAction CounterEvent IO a \nhandleAction = \\case\n    GetCounter
  \     -> Query $ pure -- Query is just `model -> IO a`\n    IncreaseCounter -> Cmd
  $ \\_ ->  `model -> IO (model -> a, [CounterEvent])`\n        pure (id -- return
  state as is, after the event is applied\n             , [CounterIncreased])\n    DecreaseCounter
  -> Cmd $ \\counter -> do\n        when (counter < 1) (throwM NegativeNotSupported)\n
  \       pure (id, [CounterDecreased])\n```\n\nA `Query` takes a `model -> m a`,
  i.e. you get access to the model and the ability to run monadic efficts. `Query`s
  will be translates into `GET` in the generated API.\n\nA `Cmd` has the additional
  ability of emitting events. It takes a `model -> m (model -> a, [event])`. The return
  value is specified as a function from the updated model to the return type. This
  way we can, in the Counter example, return the new value after the event handler
  has run.\n\n\n### Generating the server\n\n\nNow we have defined the core parts
  of our service. We can now generate the server using the template-haskell function
  `mkServer`. It takes two arguments: The server config and the name of the GADT representing
  the actions. E.g. `$(mkServer counterActionConfig ''CounterAction)`.\n\nThe `ServerConfig`,
  `storeActionConfig` in this example, contains the API options for the for the Action
  and all it's sub actions, as well as a all parameter names. This can be tenerated
  with `$(mkServerConfig \"counterActionConfig\")`, but due to TemplateHaskell's stage
  restrictions it cannot run in the same file as `mkServer`.\n\n\n### Simple example\n\nMinimal
  example can be found in [examples/simple/Main.hs](examples/simple/Main.hs), this
  uses the model defined in [models/Models/Counter.hs](models/Models/Counter.hs)\n\n\n"
license-name: BSD-3-Clause
