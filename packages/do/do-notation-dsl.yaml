all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.3
author: Yang Bo
basic-deps:
  base: '>=4.8 && <5'
changelog: |
  # Changelog for dsl

  ## Unreleased changes
changelog-type: markdown
description: |
  # Dsl

  The `Prelude.>>=` combinator limits the return type as a `m b`, which cause Monads not composable. In order to ease this restrictions, this proposal introduces another type class `Dsl` for do notation.

  Motivation
  ----------

  Monads do not compose. Normally a `do` block cannot contains operators defined in different monad instances.

  The state of art solution is [using only one monad](http://okmij.org/ftp/Haskell/extensible/) `Eff`, which forwards all monadic bind operations to custom effect handlers, instead of defining new monads.

  However, the `Eff` approach is heavy weight than ordinary monad. It's not very convenient to create an additional indirect layer for simple use cases.

  The  `Eff` approach of bypassing  `>>=` combinator is quite embarrassing. Since  `>>=` settles on our logo, In this proposal we present a new approach to enable multiple operations at once by improving  `>>=`. This proposal aims to port the approach used in [Dsl.scala](https://github.com/ThoughtWorksInc/Dsl.scala) to Haskell. This approach improves the extensibility of `>>=`.
description-type: markdown
hash: a1b425b01ff76eed06777adf92923ea4697cacb9264ce3ce263a3e646095d074
homepage: https://github.com/Atry/do-notation-dsl#readme
latest: 0.1.0.3
license-name: BSD-3-Clause
maintainer: pop.atry@gmail.com
synopsis: An alternative to monads
test-bench-deps:
  base: '>=4.8 && <5'
  containers: '>=0'
  do-notation-dsl: '>=0'
  doctest: '>=0'
  doctest-discover: '>=0'
  temporary: '>=0'
