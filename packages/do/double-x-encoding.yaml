all-versions:
- 1.1.0.0
- 1.1.1
- 1.2.0
- 1.2.1
author: Adrian Sieber
basic-deps:
  Cabal-syntax: '>=3.10 && <3.12'
  base: '>=4.18 && <4.20'
  text: '>=2.0 && <2.2'
changelog: ''
changelog-type: ''
description: "# Double X Encoding\n\nEncoding scheme to encode any Unicode string\nwith
  only characters from `[0-9a-zA-Z_]`.\nTherefore it's quite similar to URL percent-encoding.\nIt's
  especially useful for GraphQL ID generation.\n\nConstraints for the encoding scheme:\n\n1.
  Common IDs like `file_format`, `fileFormat`, `FileFormat`,\n    `FILE_FORMAT`, `__file_format__`,
  … must not be altered\n1. Support all Unicode characters\n1. Characters of the ASCII
  range must lead to shorter encodings\n1. Optional support for encoding leading digits
  (like in `1_file_format`)\n    to fulfill constraints of some ID schemes (e.g. GraphQL's).\n\n\n##
  Examples\n\nInput | Output\n------|-------\n`camelCaseId` | `camelCaseId`\n`snake_case_id`
  | `snake_case_id`\n`__Schema` | `__Schema`\n`doxxing` | `doxxing`\n`DOXXING` | `DOXXXXXXING`\n`id
  with spaces` | `idXX0withXX0spaces`\n`id-with.special$chars!` | `idXXDwithXXEspecialXX4charsXX1`\n`id_with_ümläutß`
  | `id_with_XXaaapmmlXXaaaoeutXXaaanp`\n`Emoji: \U0001F605` | `EmojiXXGXX0XXbpgaf`\n`Multi
  Byte Emoji: \U0001F468‍\U0001F9B2` | `MultiXX0ByteXX0EmojiXXGXX0XXbpegiXXacaanXXbpjlc`\n`\\u{100000}`
  | `XXYbaaaaa`\n`\\u{10ffff}` | `XXYbapppp`\n\nWith encoding of leading digit and
  double underscore activated\n(necessary for GraphQL ID generation):\n\nInput | Output\n------|-------\n`1FileFormat`
  | `XXZ1FileFormat`\n`__index__` | `XXRXXRindexXXRXXR`\n\n\n## Explanation\n\nThe
  encoding scheme is based on the following rules:\n\n1. All characters in `[0-9A-Za-z_]`
  except for `XX` are encoded as is\n1. `XX` is encoded as `XXXXXX`\n1. All other
  printable characters inside the ASCII range\n    are encoded as a sequence of 3
  characters: `XX[0-9A-W]`\n1. All other Unicode code points until `U+fffff` (e.g.
  Emojis)\n    are encoded as a sequence of 7 characters:\n    `XX[a-p]{5}`, where
  the 5 characters are the hexadecimal representation\n    with an alternative hex
  alphabet ranging from\n    `a` to `p` instead of `0` to `f`.\n1. All Unicode code
  points in the Supplementary Private Use Area-B\n    (`U+100000` to `U+10ffff`) are
  encoded as a sequence of 9 characters:\n    `XXY[a-p]{6}`\n\nIf the optional leading
  digit encoding is enabled,\na leading digit is encoded as `XXZ[0-9]`.\n\nIf the
  optional double underscore encoding is enabled,\ndouble underscores are encoded
  as `XXRXXR`.\n\n\n## Installation\n\n- Haskell: [Via Hackage](https://hackage.haskell.org/package/double-x-encoding)\n-
  Other languages: \\\n    The code is not yet available via common package managers.\n
  \   Please copy the code into your project for the time being.\n"
description-type: markdown
hash: 9dfc5a74ad82f507a5adeeddc7e32545cde04d11716fc44cd9bd2160bb38fb4c
homepage: https://github.com/Airsequel/double-x-encoding#readme
latest: 1.2.1
license-name: ISC
maintainer: adrian@feram.io
synopsis: Encoding scheme to encode any Unicode string with only [0-9a-zA-Z_]
test-bench-deps:
  Cabal-syntax: '>=3.10 && <3.12'
  base: '>=4.18 && <4.20'
  double-x-encoding: '>=0'
  text: '>=2.0 && <2.2'
