homepage: https://gitlab.com/ngua/do-spaces-hs
changelog-type: text
hash: d9e38876973471b3e974e1e5fd495b79223cfeed867403416e13d6cfb2b75983
test-bench-deps:
  exceptions: ^>=0.10
  bytestring: '>=0.9'
  case-insensitive: '>=1.0 && <1.3'
  extra: '>=1.6 && <1.8'
  base: '>=4.13 && <5'
  time: '>=1.8 && <1.12'
  hspec: '>=2.0 && <3.0'
  text: ==1.2.*
  conduit: ==1.3.*
  do-spaces: -any
  conduit-extra: ==1.3.*
  containers: ^>=0.6
  microlens-ghc: '>=0.4.10 && <0.4.13'
  http-client-tls: ^>=0.3.5
  mtl: ^>=2.2
  generic-lens: '>=1.1 && <2.2'
  http-conduit: ^>=2.3
  resourcet: ^>=1.2
  http-types: ==0.12.*
  microlens: '>=0.4.10 && <0.4.13'
maintainer: rory.hayford@protonmail.com
synopsis: DigitalOcean Spaces API bindings
changelog: |
  #+TITLE: Changelog

  * v0.1
  Initial release
basic-deps:
  exceptions: ^>=0.10
  bytestring: '>=0.9'
  case-insensitive: '>=1.0 && <1.3'
  extra: '>=1.6 && <1.8'
  xml-conduit: '>=1.8.0.1 && <1.10'
  base: '>=4.13 && <5'
  time: '>=1.8 && <1.12'
  text: ^>=1.2
  filepath: ^>=1.4
  conduit: ^>=1.3
  conduit-extra: ^>=1.3
  memory: '>=0.14 && <0.16'
  config-ini: ^>=0.2
  containers: ^>=0.6
  http-client-tls: ^>=0.3.5
  mime-types: '>=0.1.0.7 && <0.1.1'
  cryptonite: '>=0.25 && <0.29'
  mtl: ^>=2.2
  base16-bytestring: -any
  generic-lens: '>=1.1 && <2.2'
  transformers: ^>=0.5
  http-conduit: ^>=2.3
  http-types: ^>=0.12
  microlens: '>=0.4.10 && <0.4.13'
all-versions:
- 0.1.0
author: Rory Tyler Hayford
latest: 0.1.0
description-type: text
description: "#+TITLE: do-spaces\n\n* About\n  ~do-spaces~ is a Haskell library providing
  complete bindings to DigitalOcean's Spaces API, an Amazon s3-compatible object storage
  service. It offers bindings for:\n   - object CRUD\n   - bucket CRUD\n   - bucket
  and object ACLs\n   - bucket lifecycles\n   - bucket CORS configuration\n\n* Usage\n~Network.DO.Spaces~
  exposes the types and actions requires to make transactions through the Spaces API.
  The first step is to configure a client by supplying your credentials and a region:\n#+begin_src
  haskell\nsomeTransaction = do\n    mySpaces <- newSpaces NewYork (FromFile \"~/.spaces-secrets\"
  Nothing)\n    runSpaces mySpaces $ ...\n#+end_src\nThere are a few options for supplying
  your credentials. See ~newSpaces~ in ~Network.DO.Spaces~ for more details.\n\n~Network.DO.Spaces~
  exposes several convenience actions for common transactions. These are simple wrappers
  around instances of the ~Action~ typeclass. Each of the actions must be run via
  ~runSpaces~ with a ~Spaces~ client configuration. If more granular control is required,
  especially in the case of actions which take several optional parameters (e.g.,
  ~ListBucket~), you can directly import the ~Action~ instance, construct it, and
  run it with ~runAction~. These are available from the ~Network.DO.Spaces.Actions~
  module.\n\nEach action returns a ~SpacesResponse~ record with two fields. The optional
  ~metadata~ field contains information about the response. The data returned from
  the transaction can be accessed through the polymorphic ~result~ field. Retention
  of metadata and response information can be configured in ~runAction~, but all of
  the convenience actions exported from ~Network.DO.Spaces~ keep metadata.\n\nA small
  example:\n\n#+begin_src haskell\n{-# LANGUAGE DataKinds #-}    \n{-# LANGUAGE TypeApplications
  #-}    \n    \nimport Data.Sequence         ( Seq )\nimport Data.Generics.Product
  ( HasField(field) )\nimport Lens.Micro -- or whatever compatible lens library you
  fancy\nimport Network.DO.Spaces\n\nmyObjects :: IO (Seq ObjectInfo)\nmyObjects =
  do\n    -- Load your credentials configuration from environment variables\n    spaces
  <- newSpaces Singapore (FromEnv Nothing)\n    -- Use the @mkBucket@ smart constructor,
  which will validate the name you provide\n    -- and ensure it conforms to Spaces
  API specifications\n    bucket <- mkBucket \"my-real-bucket\"\n    -- List the contents
  of your bucket. @listBucket@ will list all entries until the\n    -- Spaces limit
  of 1,000. There are several variants of this action in\n    -- \"Network.DO.Spaces\"
  with different options \n    response <- runSpaces spaces $ listBucket bucket\n
  \   -- See the note about accessing record fields below\n    return $ response ^.
  field @\"result\" . field @\"objects\"\n\n#+end_src\n\n** A note about records\nMany
  transactions available through the Spaces API feature the same parameters. This
  necessitates dealing with duplicate fields in records that represent these transactions.
  For example, nearly every ~Action~ instance has a ~bucket~ field. I am not a fan
  of certain approaches to dealing with this problem: I am /highly/ averse to using
  pseudo-Hungarian Notation as record field prefixes, and I do not like using the
  leading-underscore name mangling approach in lenses. My personal preference is using
  the ~generic-lens~ package, and the library uses this internally along with ~DuplicateRecordFields~
  etc.... There are a few options available when you use this library:\n\n*** Use
  ~generic-lens~ with ~OverloadedLabels~\nThis is my personal preference. Note that
  I did *not* use the overloaded labels in the library itself, due to the (necessary)
  orphan ~IsLabel~ instance in ~generic-lens~. If you'd like to see an example of
  this, refer to the ~io-tests~ directory in this repository.\n\n*** Use ~generic-lens~
  with ~field~\nThis is the approach that the library uses internally, along with
  punning and wildcards; requires ~DataKinds~ and ~TypeApplications~ to use ~field~.\n\n***
  Use ~getField~\nYou can import ~getField~ from ~GHC.Records~ and use that to access
  record fields. Unfortunately, ~setField~ still hasn't been implemented in GHC.\n\n***
  Use the record selectors\nRecord selectors can be accessed by importing the relevant
  module directly, as they are not exported from ~Network.DO.Spaces~. You might want
  to import different types qualified, due to the aforementioned proliferation of
  record field duplication.\n\n* But why?\nSpaces is nominally compatible with existing
  Amazon S3 SDKs and clients, so it might seem redundant to create a dedicated client
  library for the service. DigitalOcean's endpoints and regions are different from
  Amazon's, however, requiring a stringly-typed region when configuring clients. True
  to form, Amazon client libraries written in Haskell (e.g., ~Amazonka~) tend to use
  an ADT to represent regions, precluding their use with Spaces. Furthermore, using
  an entire Amazon client might be overkill for an application that only requires
  the s3 functionality, unnecessarily requiring a heavyweight dependency.\n\n* Testing\nThere
  are two test suites: a suite that tests pure functionality as well as one that runs
  actual IO transactions against DigitalOcean's Spaces API. *Run the latter suite
  at your own risk*. See ~Main.hs~ for a full disclaimer, but in short: running the
  full IO tests can cause irretrievable harm to the data in your Spaces account and
  may incur charges on your DigitalOcean account. Caveat emptor!\n\n* License\n  This
  library is distributed under the BSD three-clause license\n"
license-name: BSD-3-Clause
