homepage: https://hub.darcs.net/thielema/doctest-extract/
changelog-type: ''
hash: 914dba62468c8fe0f80468d403b299a3403fd702cd997e80425887857ee39888
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Alternative doctest implementation that extracts comments to modules
changelog: ''
basic-deps:
  base: '>=4.5 && <5'
  semigroups: '>=0.18.5 && <0.21'
  utility-ht: '>=0.0.16 && <0.1'
  doctest-lib: '>=0.0 && <0.2'
  non-empty: '>=0.3.3 && <0.4'
  pathtype: '>=0.8 && <0.9'
  transformers: '>=0.5.6 && <0.7'
  optparse-applicative: '>=0.11 && <0.19'
all-versions:
- '0.1'
- 0.1.0.1
- 0.1.1
- 0.1.1.1
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.1.1.1
description-type: markdown
description: |
  # Known Issues

  *   For compatibility with original `doctest` parser
      you cannot write

      ~~~~
      {-# LANGUAGE MyPreferredExtension #-}
      ~~~~

      Instead you must write

      ~~~~
      :set -XMyPreferredExtension
      ~~~~

  * In Literal Haskell files
    only `\\begin{code} ... \\end{code}` blocks are scanned,
    but not bird style code blocks.

  * `prop>` does not support multi-line code,
    because both original `doctest` and `haddock` do not support it.

  * IO tests are not supported as `doctest` examples, so far.
    We need a syntactic distinction for IO tests,
    because `doctest-extract` does not employ a type-checker.
    We could mark IO tests
    with a specific `id` function, as in `ioTest $ runMyTest`
    or a type annotation, as in `runMyTest :: IO ()`.
license-name: BSD-3-Clause
