all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.4.0.0
- 0.4.3.0
- 0.5.0.0
- 0.5.0.3
author: Alexander Thiemann <thiemann@cp-med.com>
basic-deps:
  aeson: '>=0.8'
  aeson-pretty: '>=0.7'
  attoparsec: '>=0.11'
  base: '>=4.6 && <5'
  base16-bytestring: '>=0.1'
  bytestring: '>=0.10'
  conduit: '>=1.1'
  conduit-combinators: '>=0.2 && <2.0'
  conduit-extra: '>=1.1'
  containers: '>=0.5'
  cryptohash: '>=0.11'
  directory: '>=1.2'
  dockercook: '>=0'
  filepath: '>=1.3'
  hashable: '>=1.2'
  hslogger: '>=1.2.6'
  http-client: '>=0.4.18.1'
  lens: '>=4.7'
  monad-logger: '>=0.3'
  mtl: '>=2.1'
  optparse-applicative: '>=0.11.0.1'
  persistent-sqlite: '>=1.3'
  persistent-template: '>=1.3'
  process: '>=1.1'
  regex-compat: '>=0.95'
  resourcet: '>=1.1'
  retry: '>=0.5'
  stm: '>=2.4'
  streaming-commons: '>=0.1'
  system-filepath: '>=0.4'
  temporary: '>=1.2'
  text: '>=1.1'
  time: '>=1.4'
  transformers: '>=0.3'
  unix: '>=2.5'
  unordered-containers: '>=0.2'
  vector: '>=0.10'
  wreq: '>=0.3'
changelog: ''
changelog-type: ''
description: "dockercook\n=====\n\n[![Build Status](https://travis-ci.org/factisresearch/dockercook.svg)](https://travis-ci.org/factisresearch/dockercook)\n\nBuild
  and manage multiple docker image layers to speed up deployment. For\na tutorial
  see below or the example directory.\n\n# Install\n\nRequirements: GHC7.8 and cabal
  or stack\n\n* From Hackage: `cabal install dockercook`\n* From Source: `git clone
  https://github.com/factisresearch/dockercook.git && cd dockercook && cabal install`\n*
  From Source (stack): `git clone https://github.com/factisresearch/dockercook.git
  && cd dockercook && stack setup && stack install`\n\n# Commands\n\n```\nUsage: dockercook
  [-v|--verbosity INT] COMMAND\n  Speed up docker image building\n\nAvailable options:\n
  \ -h,--help                Show this help text\n  -v,--verbosity INT       log levels
  for 0 - 3\n\nAvailable commands:\n  cook                     Cook docker images\n
  \ check                    Validate a Dockercook file\n  sync                     Sync
  local state with remote docker server\n  version                  Show programs
  version\n  timing                   Looking build times for image\n  init                     Enable
  dockercook for current project / directory\n```\n\n# Cookfile Directives\n\n## BASE
  COOK [cookfile]\n\nDefine the current cookfiles parent cookfile. You can only use
  this\ndirective once at the top and you can't use it in combination with `BASE\nDOCKER
  [dockerimage]`.\n\n## BASE DOCKER [dockerimage]\n\nThe cook-image will depend on
  an existing docker image. You can only use this\ndirective once at the top and you
  can't use it in combination with `BASE\nDOCKER [dockerimage]`.\n\n## INCLUDE [filepattern]\n\nInclude
  and depend on a file. You can use this anywhere in your cook file,\nbut it will
  be moved to the top before `UNPACK [target_dir]`.\n\n## UNPACK [target_dir]\n\nAll
  included files will be unpacked to this directory. It will also ensure\nthat the
  directory exists. Requires a tar binary inside your\ndocker-container. You can only
  use this directive once.\n\n## BEGIN\n\nBegin a transaction. You can only put `SCRIPT
  [script]` and `RUN\n[bash_cmd]` commands inside a transaction. All commands inside
  the\ntransaction will result in a single layer.\n\n## COMMIT\n\nCommit a transaction.
  This is only possible if you began a transaction ;-)\n\n## SCRIPT [script]\n\nRun
  a bash script and put it's result at the current position in the\ndockerfile.\n\n##
  DOWNLOAD [url] [filepath]\n\nDownload a file from `[url]` to `[filepath]` in your
  docker\ncontainer. The server must set one of the following headers and support\nHEAD
  requests: Last-Modified, ETag, Content-MD5\n\n## PREPARE [shell-command]\n\nThis
  shell command is executed in an empty directory and is useful to copy\nadditional
  files into the build context. Any file that you copy in the\nworking directory of
  the shell-command will be available in your cook file\nfrom the `/_cookpreps` directory.
  All `PREPARE` commands in one file will be\nexecuted in the same preparation directory.
  For more information check the\nexample.\n\n## COOKCOPY [cookfile] [image-dir] [target-dir]\n\nCopy
  a file or directory from an image described by `[cookfile]` to\n`/_cookpreps/[target-dir]`
  in your current context. This can be very\nuseful for binary-only containers. Behind
  the scenes this starts the\nimage (entrypoint is set to `\"\"`), uses `docker cp`
  to extract files and then kills the container.\n\n## COOKVAR [var-name] [default-value]\n\nThis
  allows compile time environment variables. They can be set using `--set-var` (multiple
  times) with the `dockercook cook` command. The default value is optional. A `COOKVAR`
  directive is translated to dockers `ENV` command and populated with the correct
  value. If a `COOKVAR` does not have a default value and is not supplied via `--set-var`
  the build will fail.\n\n## All Docker-Commands\n\nMost other docker-commands are
  allowed in Cookfiles. `ADD` and `COPY`\ncommands are not recommended, as the dependencies
  aren't tracked. The\n`FROM` command is not allowed.\n\n# Emacs support\n\nThere's
  a basic `cookfile-mode.el` in the repository :-)\n\n# Motivation / Tutorial\n\nConsider
  the following Dockerfile for a sample nodejs project:\n\n### Dockerfile\n```\nFROM
  ubuntu:14.04\nRUN apt-get update\nRUN apt-get install -y nodejs npm\nRUN ln -s /usr/bin/nodejs
  /usr/bin/node\nRUN mkdir /app\nADD package.json /app/package.json\nWORKDIR /app\nRUN
  npm install\nADD . /app\nCMD node ./app.js \n```\n\nWe have two branches for this
  nodejs project with the following `package.json`:\n\n### Branch A: package.json\n```\n{\n
  \   \"name\": \"sample-app\",\n    \"version\": \"0.1.0\",\n    \"dependencies\"
  : {\n        \"bloomfilter\"   :  \"0.0.12\",\n        \"express\" :  \"2.1.x\",\n
  \       \"mongoose\" :  \"2.2.x\",\n        \"moment\": \"2.5.x\"\n    }\n}\n```\n\n###
  Branch B: package.json\n```\n{\n    \"name\": \"sample-app\",\n    \"version\":
  \"0.1.1\",\n    \"dependencies\" : {\n        \"bloomfilter\"   :  \"0.0.12\",\n
  \       \"express\" :  \"3.4.x\",\n        \"mongoose\" :  \"3.6.x\",\n        \"moment\":
  \"2.5.x\",\n        \"request\": \"2.34.x\"\n    }\n}\n```\n\nBuilding these two
  branches alternately on the same machine using docker and the Dockerfile above you'll
  notice the following behaviour:\n\n* docker build branch A (from scratch)\n* docker
  build branch B (starts at “ADD package.json /app”)\n* docker build branch B (from
  cache)\n* docker build branch A (starts at “ADD package.json /app”)\n* docker build
  branch A (from cache)\n* docker build branch B (starts at “ADD package.json /app”)\n\nLot's
  of time is wasted reinstalling the packages over and over again. (See: [Build caching:
  what invalids cache and not?](http://kimh.github.io/blog/en/docker/gotchas-in-writing-dockerfile-en/#build_caching_what_invalids_cache_and_not))\n\nYou
  can solve this by [building more efficient Dockerfiles](http://bitjudo.com/blog/2014/03/13/building-efficient-dockerfiles-node-dot-js/),
  but then you'd need two \"package images\" and two \"app images\" for your two branches
  and manage, delete and update these manually.\n\n`dockercook` solves this issue
  by slicing the repository and managing those \"intermediate\" images for you. Back
  to our sample node js app, you would create three `cook` Files:\n\n### system.cook\n```\nBASE
  DOCKER ubuntu:14.04\nBEGIN\nRUN apt-get update\nRUN apt-get install -y nodejs npm\nRUN
  apt-get clean\nRUN ln -s /usr/bin/nodejs /usr/bin/node\nCOMMIT\n```\n\n### node-pkg.cook\n```\nBASE
  COOK system.cook\nINCLUDE package.json\nUNPACK /app\nWORKDIR /app\nRUN npm install\n```\n\n###
  app.cook\n```\nBASE COOK node-pkg.cook\nINCLUDE *.js\nUNPACK /app\nCMD node ./app.js\n```\n\nNow
  you'd build your repository branches using `dockercook cook`:\n\n```\n$ cd $HOME/my-repo\n$
  dockercook init # only the first time\n$ git checkout branchA\n...\n$ dockercook
  cook cookfiles/app.cook\n...\n$ cd $HOME/my-repo && git checkout branchB\n...\n$
  dockercook cook cookfiles/app.cook\n```\nYou'll notice the following behaviour:\n\n*
  build branch A (builds: system + node-pkg + app)\n* build branch B (builds: node-pkg’
  + app’)\n* build branch B (builds: app’)\n* build branch A (builds: app)\n* build
  branch A (builds: -)\n* build branch B (builds: -)\n\nLot's of time is saved because
  you don't need to reinstall all your packages dependencies everytime you switch
  branches.\n\n# Related work\n\n* [docker-buildcache](https://github.com/baremetal/docker-buildcache)\n\n"
description-type: markdown
hash: 5b49f5d66aa56b1abbab0c2c64cc5ee5fc58cc895be3896db5affb0797f03f2e
homepage: https://github.com/factisresearch/dockercook
latest: 0.5.0.3
license-name: MIT
maintainer: Alexander Thiemann <thiemann@cp-med.com>
synopsis: A build tool for multiple docker image layers
test-bench-deps:
  HTF: '>=0.12.2.3'
  base: '>=4.6 && <5'
  dockercook: '>=0'
  text: '>=0'
  vector: '>=0'
