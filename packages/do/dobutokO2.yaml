all-versions:
- 0.45.2.0
- 0.45.3.0
author: OleksandrZhabenko
basic-deps:
  aftovolio: ==0.8.0.0
  base: '>=4.13 && <5'
  bytestring: '>=0.10.6 && <1'
  directory: '>=1.2.7 && <1.7'
  end-of-exe: ==0.1.2.0
  mmsyn2-array: ==0.3.1.1
  mmsyn7l: ==0.9.2.0
  mmsyn7ukr-array: ==0.3.0.0
  mmsyn7ukr-common: ==0.3.1.0
  process: '>=1.4 && <1.9'
  quantizer: ==0.4.0.0
  vector: '>=0.11 && <0.14'
changelog: "# Revision history for dobutokO2\n\n## 0.1.0.0 -- 2020-03-04\n\n* First
  version. Released on an unsuspecting world.\n\n## 0.2.0.0 -- 2020-03-05\n\n* Second
  version. Added the functionality connected with octaves. Some documentation and
  code improvements.\n\n## 0.3.0.0 -- 2020-03-06\n\n* Third version. Added the opportunity
  to specify more parameters: additionally basic sound duration and the level of obertones
  influence the generated sounds.\nFixed issues with possibly incorrect argument sending
  to the SoX executable. Some documentation and code improvements.\n\n## 0.3.1.0 --
  2020-03-06\n\n* Third version revised A. Fixed issues with not being compiled because
  of the ambiguous variables and wrong function application.\n\n## 0.3.1.1 -- 2020-03-06\n\n*
  Third version revised B. Some documentation improvements for README.markdown file.\n\n##
  0.4.0.0 -- 2020-03-07\n\n* Fourth version. Fixed issues with wrongly realized rhythm
  behaviour. Now it corresponds to the documented.\n\n## 0.5.0.0 -- 2020-03-07\n\n*
  Fifth version. Added the possibility to specify an existing file by its absolute
  path to be used as a source for the sound information for SoX to generate the\nresulting
  file. Some documentation improvements.\n\n## 0.5.1.0 -- 2020-03-07\n\n* Fifth version
  revised A. Fixed issue with the order of actions in 'dobutokO2' function.\n\n##
  0.5.2.0 -- 2020-03-07\n\n* Fifth version revised B. Fixed issue with the name of
  the recorded informational sound file in the 'recAndProcess' function.\n\n## 0.5.3.0
  -- 2020-03-07\n\n* Fifth version revised C. Fixed issue with the noise reduction
  in the 'recAndProcess' function for the existing at the beginning file\n(it is not
  done at all in such a case). \n\n## 0.6.1.0 -- 2020-03-08\n\n* Sixth version revised
  A. Fixed issue with 'signsFromString' function that leads to performance penalty
  and to cycling. \n\n## 0.7.0.0 -- 2020-03-10\n\n* Seventh version. Added new explicit
  dependency (mmsyn2) that earlier was implicit. Added the opportunity to define in
  how many times the amplitude\nfor the second lower note is greater than for the
  main one and to define the music intervals for the notes (if any). Some improvements
  for the documentation.\n\n## 0.7.1.0 -- 2020-03-10\n\n* Seventh version revised
  A. Fixed issue with being not compiled because of the implicit dependency being
  not explicitly specified.\n\n## 0.7.1.1 -- 2020-03-10\n\n* Seventh version revised
  B. Fixed issue with improper README.markdown file information.\n\n## 0.7.2.0 --
  2020-03-11\n\n* Seventh version revised C. Improved README.markdown file. Added
  exporting for all the basic functions in the DobutokO.Sound module.\n\n## 0.7.2.1
  -- 2020-03-11\n\n* Seventh version revised D. Fixed issue with being not compiled
  because of the syntactic error.\n\n## 0.8.0.0 -- 2020-03-12\n\n* Eigth version.
  Added the new functions to the library that allow to produce richer sounds especially
  'oberSoXSynth2FDN' one. The user can now specify a\nfunction to be passed as an
  argument to it and obtain therefore own obertones formula. Added OPTIONS_GHC pragma
  to the module DobutokO.Sound.\n\n## 0.8.0.1 -- 2020-03-12\n\n* Eigth version revised
  A. Added the new functions to the exporting by the library.\n\n## 0.8.1.0 -- 2020-03-12\n\n*
  Eigth version revised B. Changed the sophisticated mechanism to provide real obertones
  in the 'oberSoXSynth2FDN' function.\n\n## 0.8.2.0 -- 2020-03-12\n\n* Eigth version
  revised C. Changed the sophisticated mechanism to provide real obertones in the
  'oberSoXSynth2FDN' function. Fixed issues with some zeroes\nin the functions. Some
  code improvements that give more stability. Documentation improvement.\n\n## 0.9.0.0
  -- 2020-03-13\n\n* Ninth version. Changed the module structure to four modules.
  Added new functions in the DobutokO.Sound.Functional module to filter possible beats.
  Changed some\nexports for DobutokO.Sound module.\n\n## 0.9.1.0 -- 2020-03-14\n\n*
  Ninth version revised A. Removed two functions from DobutokO.Sound.Functional module
  because of their inefficient work that leads to very long\n(possibly infinitely)
  computation. \n\n## 0.10.0.0 -- 2020-03-14\n\n* Tenth version. Added again the possibility
  to filter possible beats. Added new simple functions that are likely to work with
  previously prepared\nVector (Double, Double) that satisfies some constraints. Some
  documentation imrovement. Some performance optimizations.\n\n## 0.10.1.0 -- 2020-03-14\n\n*
  Tenth version revised A. Some documentation improvements. Some performance optimizations.\n\n##
  0.11.0.0 -- 2020-03-16\n\n* Eleventh version. Added a second executable O2help that
  can be used to convert multiline Ukrainian text input to the needed String for the
  dobutokO2\nprogram. Rewritten DobutokO.Sound.Executable module to provide more modularity.
  \n\n## 0.11.0.1 -- 2020-03-16\n\n* Eleventh version revised A. Some documentation
  improvement of README.markdown file.\n\n## 0.11.1.0 -- 2020-03-16\n\n* Eleventh
  version revised B. Inserted the functionality of the second auxiliary executable
  O2help into the single one -- dobutokO2 with \"0\" first command\nline option. Changed
  the information in the README.markdown file appropriately.\n\n## 0.11.2.0 -- 2020-03-16\n\n*
  Eleventh version revised C. Fixed issue with being not compiled because of not properly
  defined arguments for a function 'o2help'\nin the DobutokO.Sound.Executable module.\n\n##
  0.12.0.0 -- 2020-03-17\n\n* Twelfth version. Added a possibility to produce sound
  in the dobutokO2 function with only one input provided for the first command line
  option \"7\". Made\nfunctions in the DobutokO.Sound.Executable module more modular
  so this grows a possibility to reuse them. Added new functions for the new functionality.
  Some\ndocumentation improvements. Added as additional file \"text.dat.txt\" an example
  of the configuration for \"7\" first command line input. \n\n## 0.13.0.0 -- 2020-03-18\n\n*
  Thirteenth version. Fixed issues connected with that SoX is by default for some
  distributions unable to work with a quantity of given files significantly more\nthan
  1000. This led to that the program and functions could not work properly with some
  big amounts of data or sound data source files of some sizes. Now the\nprogram and
  library work with them in a much more stable manner using temporary additional files.
  Some documentation, code and export improvements.\n\n## 0.14.0.0 -- 2020-03-19\n\n*
  Fourteenth version. Fixed issues connected with unneeded empty extensionless intermediate
  files in the current directory. Added the possibility to create\nthe resulting \"end.wav\"
  file and to clean the disk space from \"result*\" files by adding two new first
  command line options \"8\" and \"80\". Please, use the last\none with a special
  attention. See README.markdown for more information. Fixed issues with negative
  frequencies and durations possible in the\nDobutokO.Sound.Functional functions.
  Added some more error messages to make debugging easier.\n\n## 0.15.0.0 -- 2020-03-20\n\n*
  Fifteenth version. Added an opportunity to work not only with octaves but also with
  n-th elements sets of consequential notes with the variants\nof 2, 3, 4, 6, or 9
  notes. Octave from such a perspective is a set of 12 notes. Some documentation improvements
  for the README.markdown file.\n\n## 0.15.1.0 -- 2020-03-20\n\n* Fifteenth version
  revised A. Fixed issue with the wrong mapping between the first command line arguments
  and the executable behaviour. Added the needed\nbehaviour for the \"61\" first command
  line option. Some improvement for the README.markdown file.\n\n## 0.16.0.0 -- 2020-03-23\n\n*
  Sixteenth version. Changed dependency version for directory package. Some documentation
  improvements for README.markdown file. Added a new module\nDobutokO.Sound.IntermediateF
  to work with intermediate files. Changed the names of the some functions in DobutokO.Sound
  module and its exports.\n\n## 0.17.0.0 -- 2020-03-25\n\n* Seventeenth version. Added
  a few functions ('reverbE', 'reverb1E' etc.) to work with SoX effects to DobutokO.Sound.IntermediateF
  module. Added some additional\ninformation in a dobutokO2.cabal file.\n\n## 0.17.1.0
  -- 2020-03-25\n\n* Seventeenth version revised A. Fixed issues with being not compiled
  and duplicate export in 'DobutokO.Sound.IntermediateF'. Added two new functions\n'soxE'
  and 'soxE1'. \n\n## 0.18.0.0 -- 2020-03-26\n\n* Eighteenth version. Added three
  new functions to the DobutokO.Sound.IntermediateF module for recording and playing
  of the files.\nSome documentation improvements.\n\n## 0.19.0.0 -- 2020-03-27\n\n*
  Nineteenth version. Added a new module DobutokO.Sound.ParseList to parse entered
  list of Int. Added the possibility to use \"99\" and \"999\" first command line\noptions
  that allows to play and edit with SoX effects applied respectively the sequence
  of the \"result\\*wav\" files in the current directory. Added functions\nto realize
  the functionality to different modules. Some documentation improvements.\n\n## 0.19.1.0
  -- 2020-03-28\n\n* Nineteenth version revised A. Fixed issue with the infinite lists
  and thus the divergent functions. Changed some functions and fulfilled them with
  a limitation\nparameter. Some minor documentation improvements.\n\n## 0.20.0.0 --
  2020-03-28\n\n* Twentieth version. Improved behaviour of the functions in the DobutokO.Sound.Functional
  module. Added new functions to produce melodies. Some minor\ndocumentation improvements.\n\n##
  0.21.0.0 -- 2020-03-30\n\n* Twenty-first version. Starting from the version 0.21.0.0
  the package extends its library functions with the possibility to create not only\nsingle
  notes or intervals of sounds playing simultaneously but also sets of three, four,
  five, six, seven or more sounds played simultanously\nwith their obertones. For
  more information, please, refer to the documentation for the DobutokO.Sound.Functional
  module. Added the needed functionality\nfor this. Rearrange modules DobutokO.Sound
  and DobutokO.Sound.Functional to provide more flexibility and shorten the code.
  Added new generalized functions\nto the DobutokO.Sound.Functional module. Some documentation
  improvements.\n\n## 0.22.0.0 -- 2020-04-02\n\n* Twenty-second version. Added 1G
  generalized functions to the DobutokO.Sound.Functional module. They allow additional
  volume adjustment in dB given by\nan additional vector of Double values for the
  overtones. Changed the names of the functions and documentation from 'ober' ('Ober')
  to English 'over'\n('Over'). Fixed issue with 'partialTest_k' function for being
  not generated overtones files for the indices that can be without a remainder divided
  by\n50. Some code and documentation improvements.\n\n## 0.22.1.0 -- 2020-04-02\n\n*
  Twenty-second version revised A. Fixed issues with being not compiled because of
  the syntaxis issues.\n\n## 0.23.0.0 -- 2020-04-03\n\n* Twenty-third version. Added
  2G generalized functions to the DobutokO.Sound.Functional, and DobutokO.Sound.IntermediateF,
  and to DobutokO.Sound.Executable\nmodules. They allow to specify sound quality of
  the resulting files using additional parameter. Added also additional (including
  1G) functions\nto the same modules. Some code and documentation improvements. Added
  new command line options with \"2\" at the end.\n\n## 0.24.0.0 -- 2020-04-04\n\n*
  Twenty-fourth version. Fixed issue with being not compiled because of the unsupported
  operator (<$>) for GHC 7.8.4. Added possibilities to\nwork with DobutokO.Sound.Functional
  module function f more explicitly by three functions 'maybeFFromStrVec', 'fVecCoefs'
  and 'showFFromStrVec'. Provided\ninformation about examples in the GitHub repository
  dobutokO2-examples. Some code and documentation improvements. \n\n## 0.24.1.0 --
  2020-04-04\n\n* Twenty-fourth version revised A. Fixed issue with being not compiled
  because of the mapM_ applied for list and not vector for GHC 7.8.4.\nSome code and
  documentation improvements. \n\n## 0.24.2.0 -- 2020-04-06\n\n* Twenty-fourth version
  revised B. Fixed issue with overwritten \"result.wav\" file in some functions. Now
  the program works as expected for these functions. Some minor documentation improvements.
  \n\n## 0.24.3.0 -- 2020-04-06\n\n* Twenty-fourth version revised C. Fixed issue
  with being not compiled code because of the wrong type signature. \n\n## 0.24.4.0
  -- 2020-04-07\n\n* Twenty-fourth version revised D. Fixed issues with segmentation
  faults in some functions. Added two new functions to the DobutokO.Sound.Functional\nmodule.
  Improved stability.\n\n## 0.24.5.0 -- 2020-04-07\n\n* Twenty-fourth version revised
  E. Fixed issues with too silent sound for overtones. Imroved precision settings
  for functions so that it is expected\nthe generated sound to be more expressive.
  Improved stability. \n\n## 0.24.6.0 -- 2020-04-07\n\n* Twenty-fourth version revised
  F. Fixed issue with being not compiled.\n\n## 0.25.0.0 -- 2020-04-09\n\n* Twenty-fifth
  version. Added more possibilities to edit function f from the DobutokO.Sound.Functional
  module. \n\n## 0.26.0.0 -- 2020-04-09\n\n* Twenty-sixth version. Added more possibilities
  to edit function f from the DobutokO.Sound.Functional module. Now they include also
  gRem functions and\npossibilities to work with two OvertonesO. Some code and documentation
  improvements in the DobutokO.Sound.Functional module. \n\n## 0.27.0.0 -- 2020-04-10\n\n*
  Twenty-seventh version. Added more possibilities to edit intermediate sound files
  with silence and fading to avoid clipping while concatenating them\nwith SoX by
  default. Extended also the possibilities of the dobutokO2 executable with fading
  for \"00\" first command line option. Some documentation and\ncode improvements.\n\n##
  0.27.1.0 -- 2020-04-11\n\n* Twenty-seventh version revised A. Fixed issue with functions
  'freqsOverlapOvers' and 'elemsOverlapOvers' with wrongly defined for multiple situations.\nNow
  they works properly. \n\n## 0.28.0.0 -- 2020-04-14\n\n* Twenty-eigth version. Some
  code in existing modules generalization. Added a new explicit dependency -- bytestring
  package (earlier it was implicit \ndependency for the package dependencies). Added
  a new module DobutokO.Sound.Keyboard to deal with textual and possibly binary source
  of variativity. \nSome minor documentation improvements.\n\n## 0.29.0.0 -- 2020-04-14\n\n*
  Twenty-ninth version. Recent code in the DobutokO.Sound.Executable generalization.
  Added new functions for this. Added info about \nthe YouTube list with some of the
  generated sounds as videos. Some minor documentation improvements.\n\n## 0.30.0.0
  -- 2020-04-15\n\n* Thirtieth version. Recent code in the DobutokO.Sound.Executable
  generalization. Added a new function 'soundGen3G_O2G' for this. It allows very general
  \napproach to generation of the changing timbre for a solo sounds and their sequences.
  Some documentation improvements.\n\n## 0.31.0.0 -- 2020-04-16\n\n* Thirty-first
  version. Added a new functionality with splitting the 'OvertonesO' to the DobutokO.Sound.Functional
  module. \n\n## 0.32.0.0 -- 2020-04-17\n\n* Thirty-second version. Made a way the
  greatest amplitudes are treated in the splitting functions for OvertonesO better
  defined. Added a new generalization for the \nsplitting functionality to the DobutokO.Sound.Functional
  module. Some documentation improvements.\n\n## 0.33.0.0 -- 2020-04-20\n\n* Thirty-third
  version. Changed some functions to reduce unneeded parameter functions and arguments
  in the DobutokO.Sound.Functional and DobutokO.Sound.Executable \nmodules. Added
  new functions to change elements of the OvertonesO 'fChangeFElem' and 'fChangeFElems'.
  Some documentation improvements.\n\n## 0.34.0.0 -- 2020-04-21\n\n* Thirty-fourth
  version. Fixed issues with deprecated documentation for 0.33.0.0 version. Added
  new functions to the DobutokO.Sound.Keyboard \nmodule to provide more control over
  reading from the files and stdin. Some documentation improvements.\n\n## 0.35.0.0
  -- 2020-04-22\n\n* Thirty-fifth version. Added generalized versions for splitting
  functions (library). Some code improvements (reducing duplication). Some documentation
  \nimprovements. Some descriptive changes in the dobutokO2.cabal file.\n\n## 0.35.1.0
  -- 2020-04-22\n\n* Thirty-fifth version revised A. Fixed issues with some wrongly
  defined parameters for the new MN functions. Some documentation improvements.\n\n##
  0.35.2.0 -- 2020-04-22\n\n* Thirty-fifth version revised B. Fixed issues with some
  other wrongly defined parameters for the new MN functions.\n\n## 0.36.0.0 -- 2020-04-25\n\n*
  Thirty-sixth version. Changed the structure of imported modules: now DobutokO.Sound.Functional
  imports DobutokO.Sound.IntermediateF and not vice versa \nas has been earlier. Added
  new 4G functions and rewritten a lot of previous ones so that now they support generation
  not only the sounds but also pauses \nand you can specify your own durations. Added
  new type synonyms and functions to work with them. Added new 5G functions to work
  with Intervals \nand 6G functions to work with Strengths (volume levels). Some documentation
  and code improvements.\n\n## 0.36.1.0 -- 2020-04-25\n\n* Thirty-sixth version revised
  A. Fixed issues with being not compiled for GHC 7.8.4 because of inappropriate length
  usage for vectors in \nDobutokO.Sound.Functonal module.\n\n## 0.36.2.0 -- 2020-04-25\n\n*
  Thirty-sixth version revised B. Fixed issues with being not compiled for GHC 7.8.4
  because of inappropriate some functions usage in \nDobutokO.Sound.Functonal module.\n\n##
  0.36.3.0 -- 2020-04-26\n\n* Thirty-sixth version revised C. Fixed issues with zero
  durations for SoX \"synth\" effect. Some documentation improvements.\n\n## 0.37.0.0
  -- 2020-04-28\n\n* Thirty-seventh version. Added new functions to work with dB and
  corresponding type synonyms StrengthsDb and Strengths to DobutokO.Sound.Functional
  \nmodule. Fixed issues with being filtered to empty vector for durations. Added
  generalized versions for fading functions in the \nDobutokO.Sound.IntermediateF
  module. Added the \"002\" option to the executable and respective functions to DobutokO.Sound.Executable
  module. \nAdded \"united\" variants for the '6GS' functions (where the 'Strengths'
  and 'Durations' are obtained from the same Ukrainian text). \nSome documentation
  improvements.\n\n## 0.37.1.0 -- 2020-04-28\n\n* Thirty-seventh version revised A.
  Fixed issues with the negative argument for the SoX \"synth\" effect in the DobutokO.Sound
  module.\n\n## 0.38.0.0 -- 2020-05-02\n\n* Thirty-eigth version. Added new datatype
  Params to DobutokO.Sound.Functional module. Added new generalized functions to work
  with Params to \nDobutokO.Sound.Functional and DobutokO.Sound modules. They allow
  to use tonalities in compositions. Although a great part of the already existed
  \nfunctions in the modules provides very similar behaviour to the some variant of
  the new ones they still are left in the modules.\n\n## 0.38.1.0 -- 2020-05-04\n\n*
  Thirty-eigth version revised A. Fixed issue with being not exported constructors
  in a Params datatype. \n\n## 0.39.0.0 -- 2020-05-07\n\n* Thirty-ninth version. Added
  new functions with Params to DobutokO.Sound.Executable module. Changed the structure
  of the modules DobutokO.Sound.Functional \nand DobutokO.Sound.Executable into more
  logical one. Added three new functions for special SoX effects to the DobutokO.Sound.IntermediateF
  module. \nSome minor documentation improvements.\n\n## 0.39.0.1 -- 2020-05-08\n\n*
  Thirty-ninth version revised A. Some documentation improvements.\n\n## 0.39.1.0
  -- 2020-05-14\n\n* Thirty-ninth version revised B. Changed bounds for the dependencies
  so that now also GHC 8.10* series are supported. Added new predicates to work with
  Params \nto DobutokO.Sound.Functional module for better access to inner structure
  of it. Changed also a volume and durations of the sounds taken from \nthe loudness
  and durations respectively of the Ukrainian sounds representations in the mmsyn6ukr
  package accordingly to that ones of the new. \nSome documentation improvements.
  \n\n## 0.40.0.0 -- 2020-05-19\n\n* Fourtieth version. Added mmsyn7l as a dependency.
  Moved some functions from DobutokO.Sound.IntermediateF module to MMSyn7l module.
  This \nallows to use their functionality without necessary installation of the dobutokO2
  package (only mmsyn7* series using).\n\n## 0.41.0.0 -- 2020-05-20\n\n* Fourty-first
  version. Completely changed the modules structure added new ones and rearranged
  the existing, module DobutokO.Sound splitted into three \ndifferent modules: DobutokO.Sound.Overtones,
  DobutokO.Sound.Uniq and DobutokO.Sound.Octaves. This was done to simplify compilation
  and to produce more \nlogical and semantic structure. The most complicated functions
  from DobutokO.Sound.Functional module are moved to a new package dobutokO3. Some
  code \nimprovements.\n\n## 0.42.0.0 -- 2020-06-24\n\n* Fourty-second version. Changed
  Double to Float in the modules where possible to reduce redundancy and to open access
  to new possibilities. The shift is inspired \nby: https://www.youtube.com/watch?v=FYTZkE5BZ-0\nSome
  minor code and documentation improvements.\n\n## 0.43.0.0 -- 2020-08-16\n\n* Fourty-third
  version. Added a new dependecy uniqueness-periods with more efficient calculations
  of the uniquenessPeriods function. Changed the dependencies boundaries. \n\n## 0.44.0.0
  -- 2024-12-19\n\n* Fourty-fourth version. Added github repository and bug reporting.
  Updated the dependencies, so that now there is aftovolio included. Some minor code
  improvements.\n\n## 0.44.1.0 -- 2024-12-20\n\n* Fourty-fourth version revised A.
  Fixed some issues with ported code.\n\n## 0.45.0.0 -- 2025-02-16\n\n* Fourty-fifth
  version. Added new module DobutokO.Sound.Aftovolio.Ukrainian.Filter with the function
  that can be used for creation of the rhythmic patterns from the Ukrainian text.\n\n##
  0.45.1.0 -- 2025-02-16\n\n* Fourty-fifth version revised A. Fixed issue with empty
  export of the module DobutokO.Sound.Aftovolio.Ukrainian.Filter.\n\n ## 0.45.1.1
  -- 2025-02-16\n\n* Fourty-fifth version revised B. Fixed issues with documentation
  for the module DobutokO.Sound.Aftovolio.Ukrainian.Filter and case of empty last
  argument.\n\n## 0.45.2.0 -- 2025-02-24\n\n* Fourty-fifth version revised C. Updated
  the dependency boundaries. Some documentations improvements.\n\n## 0.45.3.0 -- 2025-05-28\n\n*
  Fourty-fifth version revised D. Updated the dependency boundaries.\n"
changelog-type: markdown
description: "Helps to create experimental music from a file (or its part) and a Ukrainian
  text. \nIt can also generate a timbre for the notes. Uses SoX inside.\n\n\n                *****
  Usage *****\n                =================\n\nYou can use it as a library or
  as an executable.\n\nPlease, check before executing whether there is no \"x.wav\",
  \"test\\*.wav\",\n\"result\\*.wav\" and \"end.wav\" files in the current directory,
  because they\ncan be overwritten. The same can be said about \"nx\\*.wav\" files
  in the directory.\n\nFor the executable you enter in the terminal:\n\ndobutokO2
  { 0 | 1 | 11 | 2 | 21 | 3 | 31 | 4 | 41 | 5 | 51 | 6 | 7 } {fileName} {Ukrainian
  text}\n\nOR:\n\ndobutokO2 { 8 | 80 | 9 | 99 | 999 }\n\nOR:\n\ndobutokO2 { 82 | 820
  | 92 | 992 | 9992 } {volatile symbols together, e. g. \"0\"} {quality control, see
  information below}\n\nOR:\n\ndobutokO2 { 00 | 002 } {beginning symbols for the filenames
  \"fade\" effect to be applied to} {quality control, see information below}\n\n  where
  filename is:\n  the full name of the file to be recorded in the current directory
  or\n  the full absolute path to the sound .wav file (or other one format\n  that
  is supported by your SoX installation) to obtain sound information from.\n\nIf the
  first command line argument equals to one of the numbers below, then\nthe program
  behaves as follows:\n\n  \"1\", or \"3\", or \"5\" ->  then the executable uses
  the overTones functions,\n    so for the given parameters the overtones are the
  same for every call.\n\n  \"2\", or \"4\", or \"6\" -> then the program uses uniqOverTones
  functions.\n\n  \"3\", or \"4\", or \"5\", or \"6\" -> the program uses additional
  String to define\n    signs for the harmonics coefficients for overtones.\n\n  \"11\",
  or \"21\", or \"31\", or \"41\", or \"51\", or \"61\" -> the program works as for\n
  \    the respective inputs with only the first character in the option\n       (e.
  g. for \"51\", this is \"5\"), but uses not octaves, but n-th elements sets\n         of
  consequential notes consisting of 2, 3, 4, 6, or 9 elements (called\n           'enky').
  The usual octave is from such point of view a 12th elements set\n             of
  consequential notes. This allows to create more 'condensed' and\n               'narrower'
  compositions that being more defined can be at the\n                 same time more
  precise.\n\n  \"9\" -> the program works with existing \"result\\*.wav\" files and
  you can replace\n     some of them by other one(s) or their sequences. This allows
  to create files,\n       then edit them using this first command line option (possibly
  for several\n         times) and at last create a resulting melody file with \"8\"
  or \"80\" options.\n\n  \"99\" -> the program takes a filename (it is a first command
  line argument and it is\n     ignored) and the rest of the command line argument
  (they are treated as command\n       line arguments to the SoX 'play' command).
  Then the program prompts you to\n         specify the needed indeces for the \"result\\*.wav\"
  files in the current\n           directory (e. g. they can be obtained by executing
  the dobutokO2 with\n             the first command line argument less than \"8\",
  or produced by some\n               other means). You can specify multiple lists
  of Int to select the\n                 needed files to be played with effects. Afterwards,
  the program\n                   just plays these selected files applying the specified
  SoX\n                     effects to them consequently. For example:\n    dobutokO2
  9 reverb -w\n                       will play the selected (during execution) files
  with the\n                         SoX \"reverb -w\" effect. For more information
  on effects,\n                           please, refer to the SoX documentation.\n\n
  \ \"999\" -> similarly to \"99\", but instead of playing the files, SoX actually\n
  \     applies to them these effects and overwrites the files with the obtained ones.\n
  \       It is convenient way to test the sounding effects with firstly run the\n
  \         dobutokO2 with \"99\" first command line argument, and then, if suitable,\n
  \           with \"999\" one. Be aware, that after running with the latter one,
  the\n              program cannot restore the files that were changed to their previous\n
  \               state, so be careful while running.\n                           \n
  \ In more details:\n\n  \"0\" -> the program just converts multiline Ukrainian text
  from stdin\n     into a String and prints it to stdout. No other arguments are used.\n\n
  \ \"00\" -> the program applies \"fade q 0.01 -0.0\" SoX effect to every \"zs\\*.wav\"\n
  \    (or instead of them to every \"zs\\*.flac\") file in the current directory.
  \n       The 'zs' here is specified by the second command line argument.\n        This
  allows to avoid clipping while just simply concatenating the files into\n          one
  with SoX. The mentioned clipping can be desirable in some circumstances\n            but
  generally is not necessary or is redundant. For more information,\n              please,
  refer to the SoX documentation and to that one for 'fadeAllE'\n                function
  in the DobutokO.Sound.IntermediateF module.\n                \n  \"002\" -> the
  program applies \"fade q 0.002 -0.0\" SoX effect to every \"zs\\*.wav\"\n     (or
  instead of them to every \"zs\\*.flac\") file in the current directory. \n       Works
  similarly to the option \"00\" (see above).\n\n  \"1\" -> basic functionality without
  the possibility to define individual overtones.\n\n  \"11\" -> the same as \"1\",
  but works with enky. See general information above.\n  \n  \"2\" -> basic functionality
  with the possibility to define individual overtones.\n     In such a case, another
  text gives the other overtones.\n\n  \"21\" -> the same as \"2\", but works with
  enky. See general information above.\n\n  \"3\" -> adittionally to basic functionality
  gives an opportunity \n     to specify the signs for the harmonics coefficients
  for overtones\n       by additional String.\n\n  \"31\" -> the same as \"3\", but
  works with enky. See general information above.\n\n  \"4\" -> similarly to \"2\"
  gives an opportunity to specify the signs\n     for the harmonics coefficients for
  overtones by additional String.\n\n  \"41\" -> the same as \"4\", but works with
  enky. See general information above.\n\n  \"5\" -> additionally to that one functionality
  provided by \"3\" gives\n     an opportunity to specify in how many times the amplitude
  for\n       the second lower note (if any) is greater, than the amplitude\n         for
  the main note and specify the intervals to be used\n           for every note.\n\n
  \ \"51\" -> the same as \"5\", but works with enky. See general information above.\n\n
  \ \"6\" -> the same as \"5\", but you can define also overtones by an additional
  String.\n\n  \"61\" -> the same as \"6\", but works with enky. See general information
  above.\n\n  \"7\" -> the program behaves like for the \"5\" option, but generates\n
  \    overtones using additional String and allows maximum control over\n       the
  parameters. Besides, all the needed information it obtains from\n         the singular
  formatted input, which can be ended with a keyboard keys\n           combination
  that means an end of input (e. g. for Unices, that is\n             probably Ctrl
  + D). '@' are separators for the input parts\n               for their respective
  parts. For more information about the\n                 format of the single input,
  see:\n        https://drive.google.com/open?id=10Z_GRZR4TKoL5KXfqPm-t-4humuHN0O4\n
  \                 The file is also provided with the package as text.dat.txt.\n
  \                  The last two or three inputs (an input just here means\n                     a
  textual input between two '@') can be omitted, the\n                       program
  will work also but with less control for\n                         the user possible.\n\n
  \  \"8\" -> the program just creates from input \"result\\*\" files the \"end.wav\"
  by\n     concatenating them into one. It is mostly useful after some processment\n
  \      on the \"result\\*\" files after previous execution with other lesser first\n
  \        command line arguments to get the test final sound file. It can be then\n
  \          listened to and probably remade again by editing the \"result\\*\" files\n
  \            and running the program with this option again. In such a case,\n               none
  from the other command line arguments is important for the\n                 program
  running, so they all can be simply omitted.\n\n   \"80\" -> the same as \"8\" but
  with one important difference that the program if\n     succeeded in creation of
  the \"end.wav\" file, then removes all other \"result\\*\"\n       files from the
  current directory, so you cannot reverse the successful action\n         back and
  try again with just the same files. In such a case, you need to\n           repeat
  all the process of creation of \"result\\*\" files. Be aware and use\n             with
  care!\n\n  \"82\" -> the same as \"8\", but you can specify the sound quality parameters
  for the\n     resulted file and choose whether it will be in WAV or FLAC format.
  To specify\n       this additional processing information, use as a third command
  line argument\n          (after the first \"82\" and the volatile second one) 4
  consequent symbols:\n            3 digits and 1 letter ('f' -- for FLAC one and
  'w' for WAV one). The first\n              two digits are a code for rate and the
  third one -- a code for bit depth\n                ('1' -- for 16 bit and '2' --
  for 24 bit). The list of possible first\n                  two digits and their
  corresponding frequency rate in Hz:\n\n                     \"11\" -> 11025\n\n
  \                    \"16\" -> 16000\n\n                     \"17\" -> 176400\n\n
  \                    \"19\" -> 192000\n\n                     \"32\" -> 32000\n\n
  \                    \"44\" -> 44100\n\n                     \"48\" -> 48000\n\n
  \                    \"80\" -> 8000\n\n                     \"96\" -> 96000\n\n
  \                    The default one behaviour is equivalent to \"221w\".\n\n  \"820\"
  -> the same as \"80\", but similarly to \"82\" it gives you the opportunity to\n
  \     specify sound quality parameters in just the same way.\n\n  \"9\", \"99\",
  or \"999\" -> see the information above.\n\n  \"92\", \"992\", or \"9992\" -> similar
  to the above line, but with the opportunity to\n      specify sound quality parameters
  in just the same way as for \"82\" option.\n         These are considered still
  highly experimental and not well tested,\n            so use them not for production.\n
  \          \n   _  -> the program behaves like for the \"5\" option, but generates\n
  \    overtones using additional String and allows maximum control over\n        the
  parameters.\n\nAfter the program executing (it takes some time) with the first command
  line\noptions except \"80\" there are files \"result\\*.wav\" in the directory.\nThese
  are the resulting melody generated in their order preserved.\n\nThe program now
  lifts the frequencies to the octave or to the enka with the number,\nwhich you can
  specify during its execution.\n\nYou can use the default values (backward compatible
  with the 0.2.0.0 version \nif the first command line option does not consist of
  two digits and the last one\nis not a '0' or '1') by simply pressing 'Enter' while
  being prompted and\nthe informational message contains the line about the default
  value.\n\nSince the 0.21.0.0 version the package extends its library functions with\nthe
  possibility to create not only single notes or intervals of sounds playing\nsimultaneously
  but also sets of three, four, five, six, seven or more sounds\nplayed simultaneously
  with their overtones. For more information, please, refer\nto the documentation
  for the DobutokO.Sound.Functional module.\n\nSince the 0.22.1.0 version the library
  functions are extended also with the\npossibility to adjust volume for the overtones
  using generalized functions '1G'\nwith adjustment being represented in dB. For more
  information, please, refer\nto the documentation for the DobutokO.Sound.Functional
  module.\n\nSince the 0.23.0.0 version the library includes functions '2G': generalized\nones
  in the DobutokO.Sound.Functional, and DobutokO.Sound.IntermediateF, and\nDobutokO.Sound.Executable
  modules. They allow to specify sound quality\nof the resulting files using additional
  parameter.\n\nSince the 0.24.0.0 version the library includes functions to work
  more explicitly\nwith f function in the DobutokO.Sound.Functional module. They are
  based on the\nsimplest (but still meaningful) multiplicative data fitting.\n\nSince
  the 0.31.0.0 version the library includes functions to split the sound \ninto several
  simultaneously sounding similar ones. For more information, please, \nrefer to the
  DobutokO.Sound.Functional module.\n\nSince the 0.36.0.0 version the library includes
  functions to provide your own \nvariants of durations, intervals and volume adjustments
  and the possibilities \nto generate speech-like music with most of parameters obtained
  from the Ukrainian \nlanguage texts.\n\nSince the 0.38.0.0 version the library includes
  new datatype Params in the \nDobutokO.Sound.Functional module and various functions
  to work with it. It \nallows to use tonalities or something close to them. For more
  information, \nplease, refer to DobutokO.Sound.Functional and DobutokO.Sound modules.\n\nSince
  the 0.39.0.0 version there are some additional effects and opportunities \nin the
  DobutokO.Sound.Functional and DobutokO.Sound.IntermediateF modules. Some \nfunctions
  in the library were moved from the DobutokO.Sound.Executable module \nto the DobutokO.Sound.Functional
  module because of logics of the module structure \nand semantics.\n\n** Note:\n\n*
  Better to execute in the RAM. Need rather a lot of space on the disk for\nthe resulting
  file \"end.wav\" and auxiliary files (MBs) for a short sound\nin the second command
  line arguments.\n\n                ***** Examples *****\n                ====================\n\nStarting
  from the 0.24.0.0 version, you can refer to examples in the GitHub special\nrepository
  (https://github.com/OleksandrZhabenko/dobutokO2-examples/). \nYou can also see some
  of the generated sounds on the YouTube list:\nhttps://www.youtube.com/playlist?list=PLuG3zSZWV7yollV9nMPcRtm3udVuYVlFS\n\n\n
  \               ***** Support for not Sound File Variativity Sources *****\n                ==========================================================\n
  \               \nSince 0.28.0.0 version the library supports not only the sound
  file as a \nvariativity source but also other types of files. They are used through
  \na special reencoding using lazy bytestrings. For more information, please, \nrefer
  to DobutokO.Sound.Keyboard module.                \n\nSince 0.41.0.0 version the
  module structure is completely changed: there were added \nnew ones and rearranged
  the existing, module DobutokO.Sound splitted into three \ndifferent modules: DobutokO.Sound.Overtones,
  DobutokO.Sound.Uniq and \nDobutokO.Sound.Octaves. This was done to simplify compilation
  and to produce more \nlogical and semantic structure. The most complicated functions
  from \nDobutokO.Sound.Functional module are moved to a new package dobutokO3. Some
  code \nimprovements.\n\nSince 0.42.0.0 version it uses Float instead of Double where
  possible. Double precision \nis redundant. The shift is inspired by: https://www.youtube.com/watch?v=FYTZkE5BZ-0\n\n"
description-type: markdown
hash: 91a533ed2fc4a217c0bbb60486f01281162d98e37ac1c7f0a551cc1d99388939
homepage: https://hackage.haskell.org/package/dobutokO2
latest: 0.45.3.0
license-name: MIT
maintainer: olexandr.zhabenko@yahoo.com
synopsis: Helps to create experimental music from a file (or its part) and a Ukrainian
  text.
test-bench-deps: {}
