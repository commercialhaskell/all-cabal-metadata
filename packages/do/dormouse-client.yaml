homepage: https://dormouse.io/client.html
changelog-type: markdown
hash: 1807b7f175daecef8d924a5996361443d4e396b905872c48b2080e460f3df4c0
test-bench-deps:
  http-client: '>=0.6.4.1 && <0.8.0'
  bytestring: '>=0.10.8 && <0.11.0'
  case-insensitive: '>=1.2.1.0 && <2.0.0'
  base: '>=4.7 && <5'
  hspec: '>=2.0.0 && <3'
  text: '>=1.2.4 && <2.0.0'
  safe-exceptions: '>=0.1.7 && <0.2.0'
  http-api-data: '>=0.4.1.1 && <0.5'
  streamly-bytestring: '>=0.1.2 && <0.2'
  hedgehog: '>=1.0.1 && <2'
  containers: '>=0.6.2.1 && <0.7'
  http-client-tls: '>=0.3.5.3 && <0.4'
  mtl: '>=2.2.2 && <3'
  attoparsec: '>=0.13.2.4 && <0.15'
  dormouse-uri: -any
  hspec-hedgehog: '>=0.0.1.2 && <0.1'
  scientific: '>=0.3.6.2 && <0.4'
  hspec-discover: '>=2.0.0 && <3'
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=2.0 && <3.0'
  template-haskell: '>=2.15.0 && <3.0.0'
  streamly: '>=0.8.0 && <0.9'
  vector: '>=0.12.0.3 && <0.13'
maintainer: phil@novelfs.org
synopsis: Simple, type-safe and testable HTTP client
changelog: |
  # Changelog for dormouse-client

  ## v0.2.0.0

  - Added `IsUrl url` constraint to functions in `MonadDormouseTestClient` so that `asAnyUrl` can be applied to the supplied urls.  This facilitates testing correct urls are supplied.

  ## Unreleased changes
basic-deps:
  http-client: '>=0.6.4.1 && <0.8.0'
  bytestring: '>=0.10.8 && <0.11.0'
  case-insensitive: '>=1.2.1.0 && <2.0.0'
  base: '>=4.7 && <5'
  text: '>=1.2.4 && <2.0.0'
  safe-exceptions: '>=0.1.7 && <0.2.0'
  http-api-data: '>=0.4.1.1 && <0.5'
  streamly-bytestring: '>=0.1.2 && <0.2'
  containers: '>=0.6.2.1 && <0.7'
  http-client-tls: '>=0.3.5.3 && <0.4'
  mtl: '>=2.2.2 && <3'
  attoparsec: '>=0.13.2.4 && <0.15'
  dormouse-uri: -any
  http-types: '>=0.12.3 && <0.13'
  aeson: '>=2.0 && <3.0'
  template-haskell: '>=2.15.0 && <3.0.0'
  streamly: '>=0.8.0 && <0.9'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.2.1.0
author: Phil Curzon
latest: 0.2.1.0
description-type: markdown
description: "# Dormouse-Client\n\nDormouse is an HTTP client that will help you REST.\n\nIt
  was designed with the following objectives in mind:\n       \n  - HTTP requests
  and responses should be modelled by a simple, immutable Haskell Record.\n  - Real
  HTTP calls should be made via an abstraction layer (`MonadDormouseClient`) so testing
  and mocking is painless.\n  - Illegal requests should be unrepresentable, such as
  HTTP GET requests with a content body.\n  - It should be possible to enforce a protocol
  (e.g. https) at the type level.\n  - It should be possible to handle large request
  and response bodies via constant memory streaming.\n\nExample use:\n\n```haskell\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE QuasiQuotes
  #-}\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Control.Monad.IO.Class\nimport Data.Aeson.TH
  \nimport Dormouse.Client\nimport GHC.Generics (Generic)\nimport Dormouse.Url.QQ\n\ndata
  UserDetails = UserDetails \n  { name :: String\n  , nickname :: String\n  , email
  :: String\n  } deriving (Eq, Show, Generic)\n\nderiveJSON defaultOptions ''UserDetails\n\ndata
  EchoedJson a = EchoedJson \n  { echoedjson :: a\n  } deriving (Eq, Show, Generic)\n\nderiveJSON
  defaultOptions {fieldLabelModifier = drop 6} ''EchoedJson\n\nmain :: IO ()\nmain
  = do\n  manager <- newManager tlsManagerSettings\n  runDormouseClient (DormouseClientConfig
  { clientManager = manager }) $ do\n    let \n      userDetails = UserDetails \n
  \       { name = \"James T. Kirk\"\n        , nickname = \"Jim\"\n        , email
  = \"james.t.kirk@starfleet.com\"\n        }\n      req = accept json $ supplyBody
  json userDetails $ post [https|https://postman-echo.com/post|]\n    response ::
  HttpResponse (EchoedJson UserDetails) <- expect req\n    liftIO $ print response\n
  \   return ()\n```\n\n## Building requests\n\n### GET requests\n\nBuilding a GET
  request is simple using a `Url` (Please see the [Dormouse-Uri](../dormouse-uri/README.md)
  documentation for more details of how to safely create and construct `Url`s).\n\n```haskell\npostmanEchoGetUrl
  :: Url \"http\"\npostmanEchoGetUrl = [http|http://postman-echo.com/get?foo1=bar1&foo2=bar2/|]\n\npostmanEchoGetReq
  :: HttpRequest (Url \"http\") \"GET\" Empty EmptyPayload acceptTag\npostmanEchoGetReq
  = get postmanEchoGetUrl\n```\n\nIt is often useful to tell Dormouse about the expected
  `Content-Type` of the response in advance so that the correct `Accept` headers can
  be sent:\n\n```haskell\npostmanEchoGetReq' :: HttpRequest (Url \"http\") \"GET\"
  Empty EmptyPayload JsonPayload\npostmanEchoGetReq' = accept json $ get postmanEchoGetUrl\n```\n\n###
  POST requests\n\nYou can build POST requests in the same way\n\n```haskell\npostmanEchoPostUrl
  :: Url \"https\"\npostmanEchoPostUrl = [https|https://postman-echo.com/post|]\n\npostmanEchoPostReq
  :: HttpRequest (Url \"https\") \"POST\" Empty EmptyPayload JsonPayload\npostmanEchoPostReq
  = accept json $ post postmanEchoPostUrl\n```\n\n## Expecting a response\n\nSince
  we're expecting json, we also need data types and `FromJSON` instances to interpret
  the response with.  Let's start with an example to handle the GET request.\n\n```haskell\n{-#
  LANGUAGE DeriveGeneric #-}\n```\n\n```haskell\ndata Args = Args \n  { foo1 :: String\n
  \ , foo2 :: String\n  } deriving (Eq, Show, Generic)\n\ndata PostmanEchoResponse
  = PostmanEchoResponse\n  { args :: Args\n  } deriving (Eq, Show, Generic)\n```\n\n\nOnce
  the request has been built, you can send it and expect a response of a particular
  type in any `MonadDormouseClient m`.\n\n```haskell\nsendPostmanEchoGetReq :: (MonadDormouseClient
  m, MonadThrow m) => m PostmanEchoResponse\nsendPostmanEchoGetReq = do\n  (resp ::
  HttpResponse PostmanEchoResponse) <- expect postmanEchoGetReq'\n  return $ responseBody
  resp\n```\n\n## Running Dormouse\n\nDormouse is not opinionated about how you run
  it.  \n\nYou can use a concrete type.\n\n```haskell\nmain :: IO ()\nmain = do\n
  \ manager <- newManager tlsManagerSettings\n  postmanResponse <- runDormouseClient
  (DormouseClientConfig { clientManager = manager }) sendPostmanEchoGetReq\n  print
  postmanResponse\n```\n\nYou can integrate the `DormouseClientT` Monad Transformer
  into your transformer stack.\n\n```haskell\nmain :: IO ()\nmain = do\n  manager
  <- newManager tlsManagerSettings\n  postmanResponse <- runDormouseClientT (DormouseClientConfig
  { clientManager = manager }) sendPostmanEchoGetReq\n  print postmanResponse\n```\n\nYou
  can also integrate into your own Application monad using the `sendHttp` function
  from `Dormouse.Client.MonadIOImpl` and by providing an instance of `HasDormouseConfig`
  for your application environment.\n\n```haskell\ndata MyEnv = MyEnv \n  { dormouseEnv
  :: DormouseClientConfig\n  }\n\ninstance HasDormouseClientConfigMyEnv where\n  getDormouseClientConfig
  = dormouseEnv\n\nnewtype AppM a = AppM\n  { unAppM :: ReaderT Env IO a \n  } deriving
  (Functor, Applicative, Monad, MonadReader Env, MonadIO, MonadThrow)\n\ninstance
  MonadDormouseClient (AppM) where\n  send = IOImpl.sendHttp\n\nrunAppM :: Env ->
  AppM a -> IO a\nrunAppM deps app = flip runReaderT deps $ unAppM app\n```\n"
license-name: BSD-3-Clause
