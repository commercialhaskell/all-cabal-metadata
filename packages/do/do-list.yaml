all-versions:
- 0.8.0
- 0.8.1
- 0.9.0
- 0.9.1
- 1.0.0
- 1.0.1
author: Taras Serduke
basic-deps:
  base: <5
changelog: |
  # Change Log

  ## 1.0.1 (2016-09-19)
  * Links to Stackage in readme
  * Minor cabal package fixes

  ## 1.0.0 (2016-09-12)
  * Added DoMonoid with IsString and IsList instances
  * Replaced DList with DoMonoid for DoList -> better performance
  * Removed toDList function
  * Removed dependency on dlist
  * Added more usage examples
  * Better readme
  * More benchmarks
  * Documentation edits
  * Added Hackage badge

  ## 0.9.1 (2016-09-10)
  * IsList instance
  * More bechmarks

  ## 0.9.0 (2016-09-08)
  * Changed back result type of item to polymorphic
  * Added IsString instance
  * Renamed unDoList to toDList
  * Documentation edits
  * Added benchmarks

  ## 0.8.1 (2016-09-07)
  * Reified result type of item to ()
  * Added note about Control.Monad.Writer
  * Minor documentation edits
changelog-type: markdown
description: |
  # do-list [![do-list][stackage-badge]][do-list] [![do-list][hackage-badge]][hackage]
  Do notation for free.

  ## Summary
  [do-list] makes it easy to use do notation. You can construct lists or monoids using [`DoList`] or [`DoMonoid`] modules respectively. [do-list] is designed to work well with `OverloadedStrings` and `OverloadedLists` extensions. See examples.

  As alternative there is a canonical [`Writer`] without overloading support.

  ## Examples

  ### Benchmarks
  ```haskell
  {-# LANGUAGE OverloadedLists #-}

  module Main (main) where

  import Criterion.Main
  import Data.DoList (DoList, item, toList)

  main :: IO ()
  main = defaultMain $ toList $ do
    doBench "add"  $ whnf (2 +) (1 :: Int)
    doBench "sub" $ whnf (2 -) (1 :: Int)
    -- Regular criterion benchmarks are injected via list overloading
    [multBench, divBench]

  multBench, divBench :: Benchmark
  multBench = bench "mult" $ whnf (2 *) (2 :: Int)
  divBench = bench "div" $ whnf (2 `div`) (2 :: Int)

  -- Now we can define benchmarks with do notation.
  doBench :: String -> Benchmarkable -> DoList Benchmark
  doBench name = item . bench name
  ```

  ### Multiline Text
  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# OPTIONS_GHC -fno-warn-unused-do-bind #-}

  module Main (main) where

  import Data.DoMonoid (runDoM)
  import Data.Text.IO as T (putStr)

  main :: IO ()
  main = T.putStr $ runDoM $ do
    -- Lines are combined using Text.append
    "fib 0 = 0\n"
    "fib 1 = 1\n"
    "fib n = fib (n-1) + fib (n-2)\n"
  ```

  ### Indentation
  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# OPTIONS_GHC -fno-warn-unused-do-bind #-}

  module Main (main) where

  import Data.DoList (DoList, fromList, toList)
  import Data.Text as T (Text, append, unlines)
  import Data.Text.IO as T (putStr)

  main :: IO ()
  main = T.putStr $ T.unlines $ toList $ do
    "Here goes indented list:"
    indent $ do
      "1. Item 1"
      indent $ do
        "* Item a"
        "* Item b"
      "2. Item 2"
      "3. Item 3"

  indent :: DoList Text -> DoList Text
  -- fromList and toList are no-ops
  indent = fromList . map (append "  ") . toList
  ```

  [do-list]: https://www.stackage.org/package/do-list
  [hackage]: https://hackage.haskell.org/package/do-list
  [hackage-badge]: https://img.shields.io/hackage/v/do-list.svg
  [stackage-badge]: https://www.stackage.org/package/do-list/badge/lts
  [`DoList`]: https://hackage.haskell.org/package/do-list/docs/Data-DoList.html
  [`DoMonoid`]: https://hackage.haskell.org/package/do-list/docs/Data-DoMonoid.html
  [`Writer`]: https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-Writer-Lazy.html
description-type: markdown
hash: d7d018b33e04ab5caa1fe7bb3a551ce14ae8b64ec0d459a6c38666164310b611
homepage: https://github.com/tserduke/do-list#readme
latest: 1.0.1
license-name: BSD-3-Clause
maintainer: taras.serduke@gmail.com
synopsis: Do notation for free
test-bench-deps:
  base: <5
  criterion: '>=0'
  do-list: '>=0'
  hspec: '>=0'
  mtl: '>=0'
  text: '>=0'
