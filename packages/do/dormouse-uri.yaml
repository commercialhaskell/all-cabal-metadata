all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
author: Phil Curzon
basic-deps:
  attoparsec: '>=0.13.2.4 && <0.15'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8 && <0.12.0'
  case-insensitive: '>=1.2.1.0 && <2.0.0'
  containers: '>=0.6.2.1 && <0.7'
  http-types: '>=0.12.3 && <0.13'
  safe-exceptions: '>=0.1.7 && <0.2.0'
  template-haskell: '>=2.15.0 && <3.0.0'
  text: '>=2.0.0 && <3.0.0'
changelog: |
  # Changelog for dormouse-uri

  ## v0.2.0.0

  - Uri type no longer includes Relative References
  - New UriReference type can hold Uri or Relative References
  - New QuasiQuoter for UriReference
  - Use of Username/Password are removed as this usage is deprecated as per RFC 3986, UserInfo type is now used instead

  ## Unreleased changes
changelog-type: markdown
description: |
  # Dormouse-Uri

  Dormouse-Uri provides type safe handling of `Uri`s and `Url`s.

  `Uri` sytax is well defined according to [RFC 3986](https://tools.ietf.org/html/rfc3986), Dormouse-Uri parses and encodes `Uri`s according to the syntax defined in this document.

  We define `Url` as an absolute URI associated with web resources, the current version of Dormouse-Uri restricts `Url`s to the `http` and `https` schemes.

  Dormouse-Uri has the following features:

   - The `Uri`/`Url` data types use `Data.Text` internally, this allows you to freely include percent-decoded characters which will be properly rendered when the `Url`/`Uri` is encoded.
   - Quasiquoters to allow safe construction of `Uri`/`Url`s from string literals.
   - `DataKinds` allow `Url`s to be restricted to the `http` or `https` schemes are the type level.
   - A UrlBuilder syntax to allow type-safe construction/concatenation of `Url`s from their components, e.g. path and query parameters.

   ## Constructing Uris

   ```haskell
  {-# LANGUAGE QuasiQuotes #-}

  import Dormouse.Uri
  import Dormouse.Uri.QQ

  telUri :: Uri
  telUri = [uri|tel:+1-816-555-1212|]

  mailtoUri :: Uri
  mailtoUri = [uri|mailto:John.Doe@example.com|]

  httpUri :: Uri
  httpUri = [uri|http://haskell.org|]
   ```

   ## Constructing Urls

  You can construct Urls using the helper QuasiQuoters:

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE QuasiQuotes #-}

  import Dormouse.Url
  import Dormouse.Url.QQ

  githubHttpsUrl :: Url "https"
  githubHttpsUrl = [https|https://github.com|]

  githubHttpUrl :: Url "http"
  githubHttpUrl = [http|http://github.com|]

  githubAnyUrl :: AnyUrl
  githubAnyUrl = [url|http://github.com|]
  ```

  You can use the Url Builder syntax to modify an existing Url safely to include paths, adding the import:

  ```haskell
  import Dormouse.Url.Builder
  ```

  To allow:

  ```haskell
  dormouseHttpsUrl :: Url "https"
  dormouseHttpsUrl = githubHttpsUrl </> "TheInnerLight" </> "dormouse"
  ```

  The Url will be constructed safely so that any characters that wouldn't normally be allowed in a Url path are percent-encoded before the url is resolved by Dormouse.

  You can also handle query parameters using similar syntax:

  ```haskell
  searchUrl :: Url "https"
  searchUrl = [https|https://google.com|] </> "search" ? "q" =: ("haskell" :: String)
  ```
description-type: markdown
hash: 40a7d3a46a1d3be51b31388d1d6911db7f1566d202c40b257aa2ffc8b7bbcba8
homepage: https://dormouse.io/uri.html
latest: 0.3.0.0
license-name: BSD-3-Clause
maintainer: phil@novelfs.org
synopsis: Library for type-safe representations of Uri/Urls
test-bench-deps:
  attoparsec: '>=0.13.2.4 && <0.15'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.8 && <0.12.0'
  case-insensitive: '>=1.2.1.0 && <2.0.0'
  containers: '>=0.6.2.1 && <0.7'
  hedgehog: '>=0'
  hspec: '>=2.0.0 && <3'
  hspec-discover: '>=2.0.0 && <3'
  hspec-hedgehog: '>=0'
  http-types: '>=0.12.3 && <0.13'
  safe-exceptions: '>=0.1.7 && <0.2.0'
  scientific: '>=0.3.6.2 && <0.4'
  template-haskell: '>=2.15.0 && <3.0.0'
  text: '>=2.0.0 && <3.0.0'
  vector: '>=0'
