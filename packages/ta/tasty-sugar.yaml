homepage: https://github.com/kquick/tasty-sugar
changelog-type: markdown
hash: 46623f671f3c89c73778c6618877fb87d2912074bf0e77852a7f3992d6c3be35
test-bench-deps:
  logict: -any
  base: '>=4'
  tasty-hedgehog: '>=1.4 && <1.5'
  text: -any
  filepath: -any
  hedgehog: '>=1.1 && <1.3'
  tasty-sugar-internal: -any
  tasty-sugar: -any
  raw-strings-qq: '>=1.1 && <1.2'
  tasty-hunit: ==0.10.*
  pretty-show: '>=1.9 && <1.11'
  prettyprinter: -any
  transformers: -any
  tasty: -any
maintainer: kquick@galois.com
synopsis: Tests defined by Search Using Golden Answer References
changelog: |
  # Revision history for tasty-sugar

  ## 2.2.0.0 -- 2023-05-03

   * Added `rangedParamAdjuster` helper function.
   * Added `sweetAdjuster` field to `CUBE`.
   * The `findSugarIn` function is now monadic with a MonadIO constraint (ato
     support sweetAdjuster functionality).
   * Exports `candidateToPath`, which was added in a previous version but not made
     publicly available.
   * The `--showsearch` output is switched to sorted order and provides a (correct)
     total count.
   * Parameter names are included in the test names along with the value.

  ## 2.1.0.0 -- 2023-03-20

   * Now supports the ability for the expected file to have the same name as the
     root file.  This is a trivial match, but still allows for capture of
     parameters and associated files.  Major version bump because this may result
     in additional, unexpected matches; to get the original behavior use the (new)
     `distinctResults` modifier on the `findSugar` results.
   * Support for GHC 9.6

  ## 2.0.1.0 -- 2023-01-09

   * Support for GHC 9.4.

  ## 2.0.0.1 -- 2022-11-10

   * Fixed arithmetic underflow exception.  This only happened when an
     unconstrained parameter value was used and a subdirectory matched a
     constrained parameter value.

   * Fixed test group name for unconstrained parameters to use the actual parameter
     value (if available).

  ## 2.0 -- 2022-11-07

   * Performance improvements.  Now scales better when there are more parameters.

   * Improved expected and associated file matching and Expected results parameter
     identification.  This may result in different results than the 1.x version of
     tasty-sugar!

     * Parameter values explicit in the root match but not in the expected file are
       now reported as Explicit in the expParamsMatch because they explicitly match
       part of one of the filenames.  This also means that files which were
       previously provided as expectations are no longer matched because the better
       root parameter matches exclude them.

     * Expectations are selected by best ParamMatch values, in order of parameter
       name, with ties resolved in favor of the longest expected filename.

   * The --showsearch can now also report internal stats for tasty-sugar.

  ## 1.3.0.2 -- 2022-09-06

   * Add test files to cabal's `extra-sources` so they are included in the package
     (thanks to Felix Yan).

  ## 1.3.0.1 -- 2022-06-29

   * Bump optparse-applicative upper bound to allow 0.17 series.

  ## 1.3.0.0 -- 2022-06-28

   * Add `inputDirs` to `CUBE` to replace single `inputDir`.  Allows test action
     files to be spread across various directories.  The `inputDir` is still
     supported for backward-compatibility, but the `inputDirs` is preferred.

   * Any input directory can be specified with a trailing asterisk
     (e.g. "test/data/*") in which case all subdirectories of that root directory
     will be scanned.

     - Any file (root, expected, or associated) may come from any directory (the
       files in a single Sweet Expectation do not all need to occur in
       the same subdirectory).

     - The parameter matching will also consider subdirectory names (prioritized
       over filename parameter matches).

   * `SweetExplanation` `results` field is a single entry instead of an array.

   * Added `getParamVal` function to extract the value (if any) from any
     `ParamMatch`.

   * Fixed some bugs in filename analysis and parameter determination.

  ## 1.2.0.0 -- 2022-05-16

   * Update for logict 0.8.0.0 breaking change.
   * Fix small issues in example usage haddock.

  ## 1.1.1.0 -- 2021-04-19

   * Use 'kvitable' to render `--showsearch` output.
   * Update build warnings and refactor code to remove potential partial
     results.
   * Fix tasty ingredients option double-defaulting.
   * Add dependency constraint bounds.
   * Update haddock usage for usage changes.

  ## 1.1.0.0 -- 2021-01-31

   * Allow multiple tests to be generated for each `Expectation` via
     `withSugarGroups` function.  The `withSugarGroups` third argument
     function (the test generator) now returns a list instead of a
     single test.  While roughly the same effect could have been
     achieved by the test generator function using a `testGroup` to wrap
     multiple tests, this change allows both (a) multiple tests to be
     generated without requiring another level in the test heirarchy,
     and (b) the generator can return an empty list if there should not
     be any tests generated for the specified `Expectation`.

  ## 1.0.2.0 -- 2021-01-31

   * Export `paramMatchVal` utility function

   * Fix over-trimming of `Expectation` matches

   * Fix identification ranking of associated files


  ## 1.0.1.1 -- 2021-01-18

   * Fix error where an expected set of matches could match multiple
     root names where the root names contain separators.

  ## 1.0.1.0 -- 2021-01-18

   * Associated files are now ranked based on the number of parameter
     components in the name and only the highest number of matches are
     provided.  Previously all possible matches were supplied, which
     meant that "more generic" associations caused an Expectation in
     addition to the "more specific" associations.  Now only the "more
     specific" assocations cause an Expectation.

   * Better indentation on Expectation information for --showsearch.

  ## 1.0.0.0 -- 2021-01-14

   * Allow multiple CUBE inputs for a single test session; Sweets are a semigroup.

   * Run the withSugarGroups mkSweets in MonadIO instead of pure.

   * Remove blank lines in --showsearch output.

  ## 0.2.0.0 -- 2021-01-12

   * Renamed CUBE "source" to "rootName"

   * Updated Sweets structure to show root match base and match name

   * Rewritten implementation using Logic capabilities.  Clarified many
     corner cases and fully implemented all logic.

  * Significantly enhanced testing.

   * Updated documentation.

  ## 0.1.0.0 -- 2019-12-24

  * Initial version.
basic-deps:
  logict: '>=0.7.0.3 && <0.9'
  filemanip: '>=0.3 && <0.4'
  base: '>=4.10 && <5'
  text: -any
  filepath: -any
  tasty-sugar-internal: -any
  containers: -any
  prettyprinter: '>=1.7.0 && <1.8'
  optparse-applicative: '>=0.15 && <0.18'
  tasty: '>=1.2 && <1.5'
  directory: -any
all-versions:
- 0.2.0.0
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.1.0.0
- 1.1.1.0
- 1.2.0.0
- 1.3.0.0
- 1.3.0.1
- 1.3.0.2
- 2.0.0.0
- 2.0.0.1
- 2.0.1.0
- 2.1.0.0
- 2.2.0.0
author: Kevin Quick
latest: 2.2.0.0
description-type: text
description: "#+TITLE:  Tasty SUGAR - Search Using Golden Answer References\n#+AUTHOR:
  Kevin Quick <kquick@galois.com>\n\n* Tasty SUGAR -  Search Using Golden Answer References\n\n
  \ The ~tasty-sugar~ package extends the tasty testing framework with\n  the ability
  to generate tests based on golden answer files found for\n  specific inputs.  Multiple
  answers may be specified with different\n  parameterization, and there can be associated
  files that are\n  presented to the test as well.\n\n  The primary use of tasty-sugar
  is to _generate test cases_ based on\n  the contents of a directory, where the presence
  of various files\n  determine which tests are generated.\n\n** Elements of tasty-sugar:\n\n
  \   * Tasty.Sugar.CUBE :: Configuration Using Base Expectations\n\n         Describes
  the configuration for tasty-sugar tests, including\n         where they are located
  and what syntax the files should have.\n\n    * Tasty.Sugar.Sweets :: Specifications
  With Existing Expected Testing Samples\n\n         The tasty-sugar library uses
  one or more CUBE's to generate a\n         set of test configurations based on the
  existing files found,\n         outputting a list of Sweets representing the existing
  test\n         data.\n\n#     * KWQ: something to generate the tests\n#     * KWQ:
  name of the test runner to show the tests\n#     * KWQ: a test runner or option
  to write new outputs\n\n* How to use tasty-sugar\n\n  Full information on tasty-sugar
  features and capabilities will be\n  provided in a later [[id:de026768-f805-4d30-8299-522cdd70926b][Detailed
  Information]] section, but this is a\n  quick introduction describing various testing
  use cases and how\n  tasty-sugar can be used in those use cases.\n\n  For these
  motivational use cases, the example scenario basis is that\n  the target to be tested
  is a tool to parse binary ELF files and\n  generate various output information about
  those files (e.g. similar\n  to objdump, but in a Haskell library form).\n\n** Single
  Expected Output per Test\n\n  * Scenario :: When running a test, it generates output
  that should\n                be compared to the expected data maintained in a file.\n
  \               There is a simple, single expected output for each\n                test,
  and no inputs other than the test name.\n\n  For the example scenario, several actual
  ELF binary files were\n  collected and placed in the ~test/samples~ directory:\n\n
  \  #+BEGIN_EXAMPLE\n   $ ls test/samples\n   empty.txt\n   fibonacci.c\n   fibonacci\n
  \  foo.tar\n   hello.c\n   hello\n   ls.c\n   ls\n   tmux.c\n   tmux\n   $\n   #+END_EXAMPLE\n\n
  \  Note that there are a couple of non-ELF files in there as well, to\n   verify
  the errors generated by our library when given\n\n   The actual outputs aren't known
  yet, but tasty-sugar can help with\n   that.  Setup the tasty-sugar CUBE configuration
  as follows:\n\n   #+BEGIN_EXAMPLE\n   cube = mkCUBE { inputDirs = [ \"test/samples\"
  ]\n                 , rootName = \"*.c\"\n                 , expectedSuffix = \"exp\"\n
  \                , associatedNames = [ (\"binary\", \"\") ]\n                 }\n
  \  main = do testSweets <- findSugar cube\n             tests <- withSugarGroups
  testSweets testGroup $\n               \\sweets expIdx expectation -> return $\n
  \                testCase (rootMatchName sweets <> \" #\" <> show expIdx) $ do\n
  \                  let Just binaryName = lookup \"binary\" $ associated expectation\n
  \                  r <- runTestOn binaryName\n                   e <- readFile $
  expectedFile expectation\n                   r @?= e\n             defaultMain $
  testGroup \"elf\" tests\n\n   runTestOn :: FilePath -> IO String\n   runTestOn f
  = ...\n   #+END_EXAMPLE\n\n   The tasty-sugar framework does not provide the actual
  testing: that\n   is still provided by the developer.  Instead, the tasty-sugar\n
  \  framework reads the contents of the ~test/samples~ directory and\n   analyses
  the available files to create a list of tests that should\n   be run.  The tasty-sugar
  package also provides a function that can\n   organize the tests and invoke the
  user's test function once for\n   each test configuration.\n\n   If the tests are
  run at this point, the tasty-sugar framework will\n   do nothing.\n\n   Why?\n\n
  \  The tasty-sugar framework will ignore any files in the target\n   directory that
  do not have an associated expected file describing\n   the expected output.  This
  can be confirmed by running the tests\n   with the ~--showsearch~ argument, which
  will use an alternate tasty\n   ingredient that does not actually run the tests
  but write out the\n   search process and search results.\n\n   To get actual tests
  to run, simply create an expected file for each\n   of the input candidates.  The
  contents of the file can be empty, or\n   any random data.\n\n   Running the tests
  now will result in a test created for each input\n   file that has a corresponding
  ~*.exp~ file.  Note that tasty-sweet\n   doesn't actually read in any of the files,
  just invokes the test\n   creation function with the Sweets and Expectation data
  structures\n   that let the test do whatever is appropriate.\n\n   #+BEGIN_EXAMPLE\n
  \  $ ls test/samples\n   empty.txt\n   empty.txt.exp\n   fibonacci\n   finonacci.c\n
  \  fibonacci.exp\n   foo.tar\n   foo.tar.exp\n   hello\n   hello.c\n   hello.exp\n
  \  ls\n   ls.c\n   ls.exp\n   tmux\n   tmux.c\n   $\n   #+END_EXAMPLE\n\n   Note
  that ~empty.txt~ and ~foo.tar~ will be ignored, even though\n   there is an ~.exp~
  file for them because they don't match the\n   source target of ~*.c~.  Similarly,
  ~tmux~ will be ignored because\n   there is no ~.exp~ file for it.\n\n   At this
  point, any changes to the target library that cause output\n   changes will be identified
  when running the tests.\n\n** Single Input and Output per Test\n\n  * Scenario ::
  Similar to the previous scenario, but there is a file\n                containing
  the expected input needed by the test to\n                generate the output.\n\n
  \ To extend the previous example, let us assume that in addition to\n  the pre-existing
  binaries that we will be generating a number of\n  \"interesting\" binaries to run
  the target library on.  These will be\n  kept in a different directory where a different
  part of the build\n  will compile the sources to generate the binaries for testing:\n\n
  \ #+BEGIN_EXAMPLE\n  $ ls test/src_samples\n  foo.c\n  foo\n  foo.expct\n  simple.c\n
  \ simple\n  simple.expct\n  recursive.rs\n  recursive\n  recursive.expct\n  functional.hs\n
  \ functional\n  functional.expct\n  $\n  #+END_EXAMPLE\n\n  Note that there are
  several different source types (C, Rust,\n  Haskell) involved, but each of them
  has an associated output binary\n  that the target library should be tested on.\n\n
  \ In an initial approach, the source files can be ignored by the\n  testing code:
  simply create a ~FILE.expct~ file for each of the\n  binaries and use the same ~Tasty.Sugar.CUBE~
  configuration for this\n  directory as for the previous directory.\n\n  However
  however an approach where the actual test written by the\n  user needs access to
  the source file itself for some reason.  This\n  can be handled by specifying an
  \"associated\" file in the\n  ~Tasty.Sugar.CUBE~ configuration:\n\n   #+BEGIN_EXAMPLE\n
  \  cube = mkCUBE { inputDirs = [ \"test/samples\" ]\n                 , rootName
  = \"*.exe\"\n                 , expectedSuffix = \"expct\"\n                 , associatedNames
  = [ (\"c-source\", \".c\")\n                                     , (\"rust-source\",
  \".rs\")\n                                     , (\"haskell\", \".hs)\n                                     ]\n
  \                }\n\n   ingredients = includingOptions sugarOptions :\n                 sugarIngredients
  [cube] <> defaultIngredients\n\n   main = do testSweets <- findSugar cube\n             tests
  <- withSugarGroups testSweets testGroup $\n               \\sweets expIdx expectation
  -> return $\n                 testCase (rootMatchName sweets <> \" #\" <> show expIdx)
  $ do\n                   e <- readFile $ expectedFile expectation\n                   let
  assoc = associated expectation\n                       f = rootFile sweets\n                   r
  <- case lookup \"c-source\" assoc of\n                          Just c -> runCTestOn
  f\n                          Nothing ->\n                            case lookup
  \"rust-source\" assoc of\n                              Just r -> runRustTestOn
  f\n                              Nothing ->\n                                runHaskellTestOn
  f\n                   r @?= e\n             defaultMainWithIngredients ingredients
  $\n               testGroup \"elf\" tests\n\n   runCTestOn :: FilePath -> IO String\n
  \  runCTestOn f = ...\n\n   runRustTestOn :: FilePath -> IO String\n   runRustTestOn
  f = ...\n\n   runHaskellTestOn :: FilePath -> IO String\n   runHaskellTestOn f =
  ...\n   #+END_EXAMPLE\n\n  Now when tasty-sugar generates the test configurations,
  each test\n  will have a name, a source file, an expected file, and a single\n  associated
  file.  The test is free to use these files in any way it\n  sees fit.  For the configuration
  above, there would be 4 test\n  configurations provided to the test:\n\n  | Test
  Name  | Input File | Expected File    | Associated Files                |\n  |------------+------------+------------------+---------------------------------|\n
  \ | simple     | simple     | simple.expct     | (\"c-source\", \"simple.c\")        |\n
  \ | foo        | foo        | foo.expct        | (\"c-source\", \"foo.c\")           |\n
  \ | recursive  | recursive  | recursive.expct  | (\"rust-source\", \"recursive.rs\")
  |\n  | functional | functional | functional.expct | (\"haskell\", \"functional.hs\")
  \   |\n\n  Note that if both \"simple.c\" and \"simple.hs\" files existed, then
  the\n  simple test configuration would get both as associated files.\n\n** Single
  Input with different parameters producing different outputs\n\n  * Scenario :: For
  each input file, multiple tests should be run,\n                each with different
  parameters, and the expected\n                output may or may not depend on the
  parameter.\n\n  Using the previous example scenario, let's now assume that for each\n
  \ of the source sample files, two different executables were built:\n  one with
  and one without optimization.  Additionally, if they were a\n  C source file, then
  there was a version built with GCC and a version\n  built with Clang.  The output
  executables are now named accordingly:\n\n  #+BEGIN_EXAMPLE\n  $ ls test/src_samples\n
  \ foo.c\n  foo.noopt.clang.exe\n  foo.O0.gcc.exe\n  foo.opt.clang.exe\n  foo.O2.gcc.exe\n
  \ foo.O3.gcc.exe\n  simple.c\n  simple.noopt.clang.exe\n  simple.noopt.gcc.exe\n
  \ simple.opt-clang.exe\n  simple-opt.gcc-exe\n  recursive.rs\n  recursive.noopt.exe\n
  \ recursive.opt.exe\n  functional.hs\n  functional.noopt.exe\n  functional.opt.exe\n
  \ $\n  #+END_EXAMPLE\n\n  While the filenames are fairly regular, there are different
  numbers\n  of executables and different naming conventions for different files.\n\n
  \ The opt/noopt/O0/O2/O3 and gcc/clang information is known to\n  tasty-sugar as
  a \"parameter\".  Parameters can appear in the filename\n  in a specific order,
  and each parameter may have one of a set of\n  valid values (e.g. gcc or clang)
  or it may have any (free-form)\n  value (as with the optimization specification).\n\n
  \ The ~Tasty.Sugar.CUBE~ confguration for is scenario is updated to:\n\n   #+BEGIN_EXAMPLE\n
  \  cube = mkCUBE { inputDirs = [ \"test/samples\" ]\n                 , rootName
  = \"*\"\n                 , separators = \"-.\"\n                 , expectedSuffix
  = \"expct\"\n                 , associatedNames = [ (\"c-source\", \".c\")\n                                     ,
  (\"rust-source\", \".rs\")\n                                     , (\"haskell\",
  \".hs\")\n                                     ]\n                 , validParams
  = [\n                    (\"optimization\", Nothing)\n                   ,(\"c-compiler\",
  Just [\"gcc\", \"clang\"])\n                   ]\n                 }\n\n   ingredients
  = includingOptions sugarOptions :\n                 sugarIngredients [cube] <> defaultIngredients\n\n
  \  main = do testSweets <- findSugar cube\n             tests <- withSugarGroups
  testSweets testGroup $\n               \\sweets expIdx expectation -> return $\n
  \                testCase (rootMatchName sweets <> \" #\" <> show expIdx) $ do\n
  \                  e <- readFile $ expectedFile expectation\n                   let
  assoc = associated expectation\n                       f = rootFile sweets\n                   r
  <- case lookup \"c-source\" assoc of\n                          Just c -> runCTestOn
  f\n                          Nothing ->\n                            case lookup
  \"rust-source\" assoc of\n                              Just r -> runRustTestOn
  f\n                              Nothing -> runHaskellTestOn f\n                   r
  @?= e\n             defaultMainWithIngredients ingredients $\n             testGroup
  \"elf\" tests\n\n   runCTestOn :: FilePath -> String\n   runCTestOn f = ...\n\n
  \  runRustTestOn :: FilePath -> String\n   runRustTestOn f = ...\n\n   runHaskellTestOn
  :: FilePath -> String\n   runHaskellTestOn f = ...\n   #+END_EXAMPLE\n\n  Parameters
  are separated by designated separator characters and must\n  appear in the order
  declared.  The default separators are \".\" and\n  \"-\" (e.g. both of the two optimized
  executable files for the\n  simple.c source above are accepted).  \n\n  Filenames
  may omit later parameter values: the file is assumed to\n  apply to all unspecified
  parameter values if there is no more\n  specific override.  This can be very useful
  to avoid repetition and\n  copying when specifying test files.  \n\n  In the above
  example, a ~simple.expected~ file would be used for all\n  four executables, but
  if there was also a\n  ~simple.noopt-gcc.expected~ and a ~simple-opt.expected~ then
  the\n  former would be used only for the ~simple.noopt.gcc.exe~ and the\n  latter
  would be used for both the ~gcc~ and the ~clang~ executables,\n  leaving the ~sample.expected~
  to be used only for the\n  ~simple.opt-clang.exe~ file.\n\n** Parameter ranges\n\n
  \ In some cases, there are a large number of possible parameter values, but the\n
  \ expected files change for only some of the parameter variations.  While this\n
  \ could normally be handled by an expected file with no corresponding parameter\n
  \ value in its name to represent the default case, this is somewhat more\n  difficult
  when there are multiple \"defaults\".  This is handled by _parameter\n  ranges_.\n\n
  \ As an example parameter range, consider a situation that might test the output\n
  \ of the llvm assembler.  The llvm assembler output tends to be unchanged over a\n
  \ couple of versions, but then there will be a change (e.g. adding a new LLVM\n
  \ assembly instruction in llvm version 14) that will change the output, but the\n
  \ new format will become the default output.\n\n  Conventionally, having a ~target.ll~
  assembly file as the original default\n  expected file means that for every version
  starting at 14, there will be a\n  specific expected file (e.g. ~target-llvm14.ll~,
  ~target-llvm15.ll~,\n  ~target-llvm16.ll~, ...) even though all of those files are
  identical.\n\n  To address this, the parameter values can specify an upper or lower
  range limit\n  and use the ~rangedParamAdjuster~ to adjust the Expectations generated.
  \ Using\n  this, the expected files could be something like ~target-llvm_pre12.ll~,\n
  \ ~target-llvm_pre14.ll~, ~target.ll~, along with an indication that the\n  parameter
  value of ~llvm_preN~ formed an upper limit.  When used this way, the\n  ~target-llvm_pre12.ll~
  file will be chosen for versions 10 and 11 of llvm, the\n  ~target-llvm_pre14.ll~
  file would be chosen for versions 12 and 13 of llvm, and\n  the ~target.ll~ file
  would be chosen for llvm version 14 or higher.\n\n  For more information, see the
  documentation for the ~rangedParamAdjuster~\n  helper function, and the corresponding
  tests.\n\n# ** Multiple Inputs with different parameters producing different outputs\n#
  \n#     KWQ...\n\n* Comparisons\n\n** tasty-KAT\n\n  * The tasty-KAT package reads
  both the inputs and the outputs from a\n    single file, instaed of allowing the
  inputs to be a separate file\n    that can be processed by the target under test.\n\n
  \   + The tasty-sugar package allows inputs and outputs to be in\n      separate
  files, and additional \"associated\" files to be provided\n      as inputs to the
  test.\n\n  * The tasty-KAT package inputs and outputs must be specifiable in a\n
  \   file with other KAT markup; this does not easily handle text\n    markup conflicts
  and binary inputs/outputs.\n\n    + The tasty-sugar package does not attempt to
  interpret the\n      contents of the files, but simply passes them to the test\n
  \     itself.\n\n  * The tasty-KAT package does not allow auxiliary files, or different\n
  \   parameterized tests.\n\n    + As mentioned above, tasty-sugar allows multiple
  auxiliary files\n      per tests, and allows test inputs and expected outputs to
  be\n      filename parameterized (with either constrained or free-form\n      parameter
  values).\n\n** tasty-golden\n\n  * The tasty-golden package requires a 1:1 association
  between tests\n    and corresponding golden expected output files; it does not\n
  \   support file-provided inputs, or associated files.\n\n    + The tasty-sugar
  package allows multiple associated files in\n      addition to the primary input
  file.\n\n    + The tasty-sugar package supports parameterization of expected\n      results
  (and associated files) as part of the filenames to allow\n      multiple tests per
  input.\n\n  * The tasty-golden package will write the expected results if the\n
  \   expected file is missing.\n\n    + The tasty-sugar package does not actually
  read or write any of\n      the files identified, it simply provides the names of
  the files\n      to the test generator function.  The user's test code is\n      responsible
  for all file processing.\n\n** tasty-silver\n\n  Similar to tasty-golden in functionality.\n\n**
  Features unique to tasty-sugar\n\n  * Multiple potential outputs, parameterized
  by filename elements.\n\n  * Multiple associated input files.\n\n  * Search analysis
  mode showing how tests are generated based on the\n    available files.\n\n  * Automatic
  grouping of generated tests by parameter values.\n\n* Limitations\n\n  * Huge numbers
  of directories or files will cause performance slowdowns\n  * Will throw any exception
  that the listDirectory function can throw.\n\n* Detailed Information\n  :PROPERTIES:\n
  \ :ID:       de026768-f805-4d30-8299-522cdd70926b\n  :END:\n\n** Requirements\n\n
  \ * There must be a root (input) file to feed to the test\n\n  * There must be one
  or more \"expected\" results files for a root file\n\n  * There may be associated
  files for the root file required for the test\n\n  * All three groups of files may
  be parameterized by additional fields.\n\n  * All fields are represented by a common
  basename with optional\n    parameters and required associated suffixes, separated
  by\n    allowable separators.\n\n  All of the above may utilize globbing as provided
  by System.FilePath.Glob\n\n* Examples\n\n** Example:\n\n For example, a test which
  would verify that the size of a compiled\n file meets the expectations would specify:\n\n
  #+BEGIN_EXAMPLE\n CUBE =\n   { inputDirs = [ \"tests/samples\" ]  -- relative to
  cabal file\n   , separators = \".-\"\n   , rootName = \"*.c\"\n   , associatedNames
  = [ (\"exe\", \"exe\")\n                       , (\"object\", \"o\")\n                       ]\n
  \  , expectedSuffix = \"expected\"\n   , validParams = [ (\"arch\" : Just [\"ppc\",
  \"x86_64\"]) ]\n   }\n #+END_EXAMPLE\n\n And given the following directory configuration:\n\n
  #+BEGIN_EXAMPLE\n tests/samples/\n    foo.c\n    bar.c\n    bar.exe\n    bar.ppc.exe\n
  \   bar.expected\n    cow.c\n    cow.ppc.exe\n    cow.x86_64.exe\n    cow.expected\n
  \   cow.ppc-expected\n    cow.x86.expected\n    moo.c\n    moo.exe\n    moo-expected\n
  \   dog.exe\n    dog.expected\n #+END_EXAMPLE\n\n The result would be:\n\n #+BEGIN_EXAMPLE\n
  sweets =\n   [ Sweets\n     { rootMatchName = \"bar\"\n     , rootBaseName = \"bar\"\n
  \    , rootFile = \"tests/samples/bar.c\"\n     , expected =\n         [ Expectation\n
  \          { expectedFile = \"tests/samples/bar.expected\"\n           , associated
  = [ (\"exe\", \"tests/samples/bar.exe\") ]\n           , expParamsMatch = []\n           }\n
  \        , Expectation\n           { expectedFile = \"tests/samples/bar.expected\"\n
  \          , associated = [ (\"exe\", \"tests/samples/bar.ppc.exe\") ]\n           ,
  expParamsMatch = [ (\"arch\", \"ppc\") ]\n           }\n         ]\n     },\n   ,
  Sweets\n     { rootMatchName = \"cow\"\n     , rootBaseName = \"cow\"\n     , rootFile
  = \"tests/samples/cow.c\"\n     , expected =\n         [ Expectation\n           {
  expectedFile = \"tests/samples/cow.ppc-expected\"\n           , associated = [ (\"exe\",
  \"tests/samples/cow.ppc.exe\") ]\n           , expParamsMatch = [ { \"arch\", \"ppc\"
  } ]\n           }\n         , Expectedfile\n           { expectedFile = \"tests/samples/cow.expected\"\n
  \          , associated = [ (\"exe\", \"tests/samples/cow.x86_64.exe\") ]\n           ,
  expParamsMatch = [ (\"arch\", \"x86_64\") ]\n           }\n         ]\n     },\n
  \  , Sweets\n     { rootMatchName = \"moo\"\n     , rootBaseName = \"moo\"\n     ,
  rootFile = \"tests/samples/moo.c\"\n     , expected =\n         [ Expectation\n
  \          { expectedFile = \"tests/samples/moo-expected\"\n           , associated
  = [ (\"exe\", \"tests/samples/moo.exe\") ]\n           , expParamsMatch = []\n           }\n
  \        ]\n     },\n #+END_EXAMPLE\n\n* FAQ\n\n  Why do the configurations need
  to be described by a ~Tasty.Sugar.CUBE~\n  data object?  Why can't they be passed
  in on the command-line?\n\n  * Answer :: They could be, but there are a couple of
  issues that\n              would make that more awkward:\n\n              1. There
  would need to be a number of command-line\n                 arguments to describe
  all of the CUBE information.\n\n              2. The tasty framework provides command-line
  parsing and\n                 argument handling (and expects to do so).  Handling\n
  \                some command-line arguments prior to tasty and some\n                 within
  tasty would be difficult and brittle (and also\n                 note that the set
  of all tests must be known *prior*\n                 to invoking the tasty main
  code; they cannot be added\n                 dynamically after that point).\n\n
  \             3. Testing should be consistent: relying on user-input during\n                 testing
  would return different results for different input.\n"
license-name: ISC
