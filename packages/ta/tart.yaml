all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- '0.3'
author: Jonathan Daugherty
basic-deps:
  array: '>=0'
  base: '>=4.9 && <5'
  binary: '>=0'
  brick: '>=0.52 && <0.58'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  microlens-platform: '>=0'
  microlens-th: '>=0'
  mtl: '>=0'
  tart: '>=0'
  text: '>=0'
  text-zipper: '>=0'
  vector: '>=0'
  vty: '>=5.17.1 && <6.0'
changelog: |2

  0.3
  ---

  Package changes:
   * Added `libonly` flag (defaults to `False`) to control whether to
     build the `tart` executable.
   * Raised the `brick` upper bound.
   * Raised the `vty` upper bound.

  0.2
  ---

  `tart` tool changes:
   * When inserting a new layer, also select it and make that selection
     part of the undo action.
   * Attribute style selector now uses more descriptive labels for style
     options.

  Tart library changes:
   * Added a dependency on the `text` package.
   * The type of some fields was changed from `String` to
     `Text` (`TartFile` / `tartFileCanvasNames`, `TartFileDataV1`
     / `tartFileDataV1CanvasNames`, `TartFileDataV2` /
     `tartFileDataV2CanvasNames`)
   * Added `Tart.Canvas.canvasFromString` and changed `canvasFromText` to
     take a `Text` input rather than a `String`.
   * Relaxed bounds on `vty`.

  0.1.2
  -----

  Bug fixes:
   * Exceptions triggered during an attempt to save to an invalid path no
     longer cause a crash and are now reported to the user (#4)
   * Canvas size dialog fields are now clickable (#5)

  0.1.1
  -----

   * Added a new saving UI and keybinding to trigger it (C-s). Previously
     the only opportunity to save was on quitting.

  0.1
  ---

  * First version.
changelog-type: markdown
description: |
  tart - terminal art program
  ===========================

  ```
   _____  _    ____ _____  _
  (_   _)/ \  |    (_   _)| |
    | | / ^ \ |  O  || |  |_|
    | |/ ___ \|  _ < | |   _
    |_|_/   \_|_| \_\|_|  |_|
  ```

  Tart is a program that provides an image-editor-like interface to
  creating ASCII art - in the terminal, with your mouse! This program is
  written using my purely-functional terminal user interface toolkit,
  [Brick](https://github.com/jtdaugherty/brick).

  ![](screenshots/2.png)

  Building
  ========

  `tart` is a Haskell project. You'll need
  [GHC](https://www.haskell.org/ghc/) (preferably at least 8.2) and
  [cabal-install](http://hackage.haskell.org/package/cabal-install)
  (preferably at least 2.0). Then:

  ```
  $ cabal update
  $ git clone https://github.com/jtdaugherty/tart.git
  $ cd tart
  $ cabal new-build
  $ $(find . -name tart -type f)
  ```

  By default, `tart` is built as both a library and a command-line tool.
  But if you want to use tart only for its Haskell library and avoid the
  additional executable dependencies, you can build with the `libonly`
  cabal build flag.

  Features
  ========

  - Drawing tools: freehand, line, box, flood fill, text string
  - Utility tools: repaint, restyle, eyedropper, eraser
  - Multiple graphical styles for boxes
  - Named image layers with reordering, visibility toggling
  - Character selection for freehand and flood fill tools
  - Set foreground color, background color, and text style independently
  - Full mouse interaction and keyboard shortcuts
  - Paste text from clipboard into canvas
  - Undo and redo
  - Text styles: bold, blink, underline, reverse video
  - Load and save ASCII art files (binary)
  - Save plain versions of ASCII art for embedding in documents
  - Save color versions of ASCII art with terminal escape sequences for
    printing to terminals
  - Import existing plaintext files as the basis for new ASCII art files
  - Set arbitrary canvas size

  Terminal Emulator Support
  =========================

  `tart` has been tested extensively with the following terminal emulators
  and is known to work well with them:

   * OS X: `iTerm2`
   * OS X: `Terminal.app`

  Please let me know if you use `tart` with another emulator and let me
  know how well it works!

  Keybindings
  ===========

  Tools / styles:
  - `0`..`9`: select tool
  - `y`: open the attribute style selector
  - `!`/`@`/`#`/`$`: select attribute style
  - `f`/`b`: open foreground / background palette selectors
  - `c`: set tool drawing character (where applicable)
  - `<`/`>`: decrease / increase tool size (where applicable)
  - `Esc`: cancel tool drag (e.g. box)

  Canvas:
  - `w`/`a`/`s`/`d`: move canvas
  - `C`: re-center canvas
  - `v`: set canvas size
  - `-`/`+`: decrease / increase canvas size

  Layers:
  - `C-a`: add new layer
  - `C-r`: rename current layer
  - `C-n`/`C-p`: select next/previous layer
  - `C-x`: delete selected layer
  - `C-u`/`C-d`: move current layer up / down
  - `C-v`: toggle selected layer's visibility
  - `C-l`: toggle visibility of layer list

  General:
  - `q`: quit (and optionally save)
  - `C-s`: save
  - `u`: undo
  - `r`: redo
  - OS paste: paste text into canvas

  How It Works
  ============

  Tart requires a terminal with mouse support. You use various tools (such
  as freehand drawing, boxes, etc.) to draw ASCII pictures. You can set a
  current foreground and background color. You can also resize the drawing
  canvas to get the desired output size. When you're finished, you can
  save to disk, at which point Tart creates three files:

   * A binary file (say `foo.tart`) suitable for reloading with Tart for
     further editing later
   * A text file `foo.color.txt` containing the ASCII art with terminal
     color escape sequences, suitable for emitting to terminals
   * A text file `foo.plain.txt` containing the ASCII art without terminal
     color escape sequences, suitable for embedding in documentation

  Contributing
  ============

  If you decide to contribute, that's great! Here are some guidelines you
  should consider to make submitting patches easier for all concerned:

   - If you want to take on big things, talk to me first; let's have a
     design/vision discussion before you start coding. Create a GitHub
     issue and we can use that as the place to hash things out.
   - Please make changes consistent with the conventions I've used in the
     codebase.
   - Please adjust or provide Haddock and/or user guide documentation
     relevant to any changes you make.
description-type: markdown
hash: fee7f6fce3588aff3d06c00a50b2adbf6623f1f1a5d61c103594ce68d5201459
homepage: https://github.com/jtdaugherty/tart/
latest: '0.3'
license-name: BSD-3-Clause
maintainer: cygnus@foobox.com
synopsis: Terminal Art
test-bench-deps: {}
