all-versions:
- 0.1.0
author: Scott Murphy <scottmurphy09@gmail.com>
basic-deps:
  aeson: '>=0'
  base: '>=4 && <5'
  bimap: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  groundhog: '>=0'
  groundhog-converters: '>=0'
  groundhog-sqlite: '>=0'
  groundhog-th: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
changelog: |+
  # Revision history for tasty-groundhog-converters

  ## 0.1.0  -- 2016-03-18

  * First version. Released on an unsuspecting world.

changelog-type: markdown
description: "# tasty-groundhog-converters\nThis library provides a tasty, test harness
  for groundhog and groundhog-converters.\n\nThe key functions are:\n``` haskell\nroundTripConverter
  :: Arbitrary a => TestName -> (a -> a -> Bool) -> (Converter a b) -> TestTree\n```\n\nand
  \n\n``` haskell\ngoldenSqlConverter :: (PersistEntity b) =>  TestName ->  FilePath
  -> a ->   (b -> b -> Bool) -> Converter a b  ->   TestTree\n```\n\nWhich provide
  tests for serialization (goldenSqlConverter).\nand isomorphism (roundTripConverter).\n\nThese
  two together allow a user to quickly add simple testing to a database project using
  groundhog.\n\n## Usage\nFrom the example:\n\n\n``` haskell\ndata Group = Group {\n
  \    _people :: Map Integer Person\n         }\n deriving (Eq)\n\n\n-- | A wrapped
  representation of a Person\ndata Person = Person { _unPerson :: String}\n  deriving
  (Eq)\n\n\n-- | To Build up the converter we have to have an arbitrary instance\ninstance
  Arbitrary Person where\n  arbitrary = Person <$> arbitrary\n\n-- | An Isomorphism
  between the representation that is pleasent to use in haskell\n-- and the one that
  makes sense to store i.e. 'PersistEntity' \npersonMapConverter :: Converter (Map
  Integer Person) [(Int64,String)]\npersonMapConverter = mapConverter `composeConverter`
  fmapConverter (bicomposeConverter integerConverter personConverter)\n\n-- | This
  converter is embedded in 'personMapConverter'\npersonConverter :: Converter Person
  String\npersonConverter = (_unPerson,Person)\n\n\n-- | A declaration for group.\nmkPersist
  defaultCodegenConfig [groundhog|\n- entity: Group\n  constructors:\n  - name: Group\n
  \   fields:\n      - name: _people\n        dbName: people\n        exprName: MappedIdToPerson\n
  \       converter: personMapConverter\n- primitive: Person\n  converter: personConverter\n\n\n|]\n\n\n--
  | build a golden test (a single test designed to make sure a representation stays
  constant over time).\n-- The aGroup provided is only used the first time the test
  is used.  The converter at the top level here\n-- is just (id, id) and (==) is used
  because there is an Eq instance on Group.\nexampleGoldenSqlConverter :: TestTree\nexampleGoldenSqlConverter
  = goldenSqlConverter \"Test The test GoldenSqlConverter\" \"TestGolden\" aGroup
  (==) (id,id) \n  where\n    aGroup = Group somePeople\n    somePeople = (Map.fromList
  . zip [1 ..] . fmap Person ) [\"Margret\"]\n\n-- | There are no database hits on
  a round trip test\n-- Converter makes the claim that a Converter is an Isomorphism
  between the two DataTypes.\n-- Round trip tests should verify this.\nexampleRoundTripTest
  :: TestTree\nexampleRoundTripTest = roundTripConverter \"roundtrip personMapConverter\"
  (==) personMapConverter \n\n-- | call the example test\ntastyTest :: IO ()\ntastyTest
  = defaultMain allTests\n where\n    allTests = testGroup \"all example groundhog
  converter tests\" [ exampleGoldenSqlConverter\n                                                                 ,
  exampleRoundTripTest]\n```\n\n\n"
description-type: markdown
hash: 92feb330ab15911f86b45141982217260ffc5ad5c83fbf5a57a8884066e5d88d
homepage: ''
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: Scott Murphy <scottmurphy09@gmail.com>
synopsis: 'Tasty Tests for groundhog converters                        '
test-bench-deps: {}
