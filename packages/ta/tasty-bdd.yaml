all-versions:
- 0.1.0.0
- 0.1.0.1
author: Paolo Veronelli, Pavlo Kerestey
basic-deps:
  HUnit: '>=0'
  base: '>=4.7 && <5'
  exceptions: '>=0'
  free: '>=0'
  microlens: '>=0'
  microlens-th: '>=0'
  mtl: '>=0'
  pretty: '>=0'
  pretty-show: '>=0'
  tagged: '>=0'
  tasty: '>=0'
  tasty-fail-fast: '>=0'
  tasty-hunit: '>=0'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
  tree-diff: '>=0'
changelog: ''
changelog-type: ''
description: "[![CircleCI](https://circleci.com/gh/ptek/tasty-bdd/tree/master.svg?style=svg)](https://circleci.com/gh/ptek/tasty-bdd/tree/master)\n\n#
  Behavior-driven development \n\n## A [Haskell](https://www.haskell.org/) Behavior
  Driven Development framework featuring:\n\n* A type constrained language to express\n
  \ *  *Given* as ordered preconditions or\n  *  *GivenAndAfter* as oredered preconditions
  with reversed order of teardown actions (sort of resource management)\n  *  One
  only *When* to introduce a last precondition and catch it's output to be fed to\n
  \ *  Some *Then* tests that will receive the output of *When*\n* Support for do
  notation via free monad for composing _givens_ and _thens_ \n* One monad independent
  pure interpreter\n* One driver for the great [tasty](https://github.com/feuerbach/tasty)
  test library,  monad parametrized\n* Support for [tasty-fail-fast](https://hackage.haskell.org/package/tasty-fail-fast)
  strategy flag which will not execute the teardown actions of the failed test\n*
  A sophisticated form of value introspection to show the differences on equality
  failure from [tree-diff](https://github.com/phadej/tree-diffdifftree) package \n*
  Recursive test decorators to prepend or append action to all the tests inside a
  test tree\n\n## Background\n\n[Behavior Driven Development](https://en.wikipedia.org/wiki/Behavior-driven_development)
  is a software development process that emerged from test-driven development (TDD)
  and is based on principles of [Hoare Logic](https://en.wikipedia.org/wiki/Hoare_logic).
  The process requires a strict structure of the tests - {Given} When {Then} - to
  make them understandable.\n\n## Example\n\n```haskell\nimport Test.Tasty.Bdd\n\ntests
  :: TestTree\ntests = testBdd \"Test sequence\" \n    $ Given (print \"Some effect\")\n
  \   $ Given (print \"Another effect\")\n    $ GivenAndAfter (print \"Aquiring resource\"
  >> return \"Resource 1\")\n                    (print . (\"Release \"++))\n    $
  GivenAndAfter (print \"Aquiring resource\" >> return \"Resource 2\")\n                    (print
  . (\"Release \"++))\n    $ When (print \"Action returning\" >> return ([1..10]++[100..106])
  :: IO [Int])\n    $ Then (@?= ([1..10]++[700..706]))\n    $ End\n```\n"
description-type: markdown
hash: af807364b168857219e317e27bd1f74318068181f872656f6b853541175e1342
homepage: https://gitlab.com/devs.global.de/tasty-bdd
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: paolo.veronelli@gmail.com
synopsis: BDD tests language and tasty provider
test-bench-deps:
  HUnit: '>=0'
  aeson: '>=0'
  aeson-qq: '>=0'
  base: '>=4.7 && <5'
  exceptions: '>=0'
  mtl: '>=0'
  qm-interpolated-string: '>=0'
  regex-posix: '>=0'
  tasty: '>=0'
  tasty-bdd: '>=0'
  tasty-expected-failure: '>=0'
  tasty-fail-fast: '>=0'
  tasty-hunit: '>=0'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
