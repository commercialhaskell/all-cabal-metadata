homepage: https://whetstone.private.storage/privatestorage/tahoe-chk
changelog-type: markdown
hash: 96a40907f662b07571e1d515dd3b90a740691b73a80b86bb45cda64923ca7fa9
test-bench-deps:
  bytestring: '>=0.10.8.2 && <0.12'
  base: '>=4.7 && <5'
  tasty-hedgehog: '>=1.0.0.2 && <1.5'
  base64-bytestring: '>=1.0.0.3 && <1.3'
  text: '>=1.2.3.1 && <2.2'
  megaparsec: '>=8.0 && <9.3'
  filepath: '>=1.4.2 && <1.5'
  hedgehog: '>=1.0.3 && <1.5'
  tree-diff: '>=0.1 && <0.3'
  memory: '>=0.15 && <0.19'
  containers: '>=0.6.0.1 && <0.7'
  base32: '>=0.2.1 && <0.4'
  lens: '>=5.0 && <5.3'
  binary: '>=0.8.6 && <0.9'
  tahoe-chk: -any
  cryptonite: '>=0.27 && <0.31'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  fec: '>=0.1.1 && <0.2'
  temporary: '>=1.3 && <1.4'
  tasty: '>=1.2.3 && <1.5'
  scientific: '>=0.3.6.2 && <0.4'
  aeson: '>=1.4.7 && <2.2'
  yaml: '>=0.11.5.0 && <0.11.9.0 || >=0.11.9.0.0 && <0.12'
  vector: '>=0.12.1.2 && <0.13'
  directory: '>=1.3.3 && <1.4'
maintainer: PrivateStorage.io, Inc.
synopsis: The Tahoe-LAFS' Content-Hash-Key (CHK) cryptographic protocol.
changelog: |
  # Changelog for tahoe-lafs-immutable-uploader

  ## 0.2.0.0 (2023-10-02)

  * `decode` now checks the fingerprint in the read capability against the URI
    extension block in shares being decoded and signals an error instead of
    performing decoding if there are not enough shares where they match. (#18)

  * `decode` now checks the consistency of the "share hash tree" information in
    each share and signals an error instead of performing decoding if there are
    not enough shares where it is consistent. (#19)

  * `decode` now checks the consistency of each share's "blocks" and signals an
    error instead of performing decoding if there are not enough consistent
    blocks to complete decoding. (#20)

  * `decode` now checks the consistency of the ciphertext "segments" and signals
    an error instead of completing decoding if the segment hashes do not match
    the expected values. (#21)

  * Many changes to data types to reflect more of the scheme at the type level.
    Most of these changes are to (exposed) implementation details rather than
    the primary high-level interface and should not impact most applications.

  * The `cereal`, `cipher-aes128`, `crypto-api`, `tagged`, and `monad-loop`
    direct dependencies have been dropped.  `cryptonite` (already a dependency)
    is now used for AES128 operations. (!54)

  ## 0.1.0.2

  * `taggedPairHash` now respects the size parameter passed to it.
  * The CHK capability parsers now signal error on overflow for the `n`, `k`, and `size` parameters.
  * The UEB parser now signals error on overflow for `num_segments`,
    `needed_shares`, `total_shares`, and `n` and `k` in the codec parameter
    fields.

  ## 0.1.0.1

  * Switch from `base64` to `base64-bytestring` to avoid an encoding bug on ARM
    with GHC 8.6.5.

  ## 0.1.0.0

  * Initial release.
  * Support for encoding and decoding data using Tahoe-LAFS' CHK protocol.
basic-deps:
  bytestring: '>=0.10.8.2 && <0.12'
  extra: '>=1.7.7 && <1.8'
  network-byte-order: '>=0.1.5 && <0.2'
  base: '>=4.7 && <5'
  parser-combinators: '>=1.2.1 && <1.4'
  base64-bytestring: '>=1.0.0.3 && <1.3'
  text: '>=1.2.3.1 && <2.2'
  megaparsec: '>=8.0 && <9.3'
  filepath: '>=1.4.2 && <1.5'
  async: '>=2.2.2 && <2.3'
  tree-diff: '>=0.1 && <0.3'
  memory: '>=0.15 && <0.19'
  utility-ht: '>=0.0.15 && <0.1'
  containers: '>=0.6.0.1 && <0.7'
  base32: '>=0.2.1 && <0.4'
  lens: '>=5.0 && <5.3'
  binary: '>=0.8.6 && <0.9'
  tahoe-chk: -any
  cryptonite: '>=0.27 && <0.31'
  concurrency: '>=1.11 && <2'
  fec: '>=0.1.1 && <0.2'
  optparse-applicative: '>=0.15.1.0 && <0.19'
  deepseq: '>=1.1 && <1.6'
  aeson: '>=1.4.7 && <2.2'
  primitive: '>=0.7.0.1 && <0.8'
  directory: '>=1.3.3 && <1.4'
all-versions:
- 0.1.0.2
- 0.2.0.0
author: Jean-Paul Calderone and others
latest: 0.2.0.0
description-type: markdown
description: |
  # Tahoe-CHK

  ## What is it?

  Tahoe-CHK is a Haskell implementation of the [Tahoe-LAFS](https://tahoe-lafs.org/) CHK crytographic protocol.
  It aims for bit-for-bit compatibility with the original Python implementation.

  It will not include an implementation of any network protocol for transferring CHK shares.
  However, its APIs are intended to be easy to integrate with such an implementation.

  ### What is the current state?

  * Convergent encryption is supported and compatible with Tahoe-LAFS.
  * CHK encoding is implemented but some cases are unsupported:
    * It is not allowed that k == 1 or k == n.
  * CHK decoding is implemented with the same limitations as for encoding.
    * The decoding process:
      * Authenticates the data being decoded using the capability.
      * Ensures the integrity of the data being decoded using the embedded hashes.

  ## Why does it exist?

  A Haskell implementation can be used in places the original Python implementation cannot be
  (for example, runtime environments where it is difficult to have a Python interpreter).
  Additionally,
  with the benefit of the experience gained from creating and maintaining the Python implementation,
  a number of implementation decisions can be made differently to produce a more efficient, more flexible, simpler implementation and API.
  Also,
  the Python implementation claims no public library API for users outside of the Tahoe-LAFS project itself.
license-name: BSD-3-Clause
