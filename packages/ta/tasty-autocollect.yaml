homepage: https://github.com/brandonchinn178/tasty-autocollect#readme
changelog-type: markdown
hash: b3901b38fbfca92dc296cebbf49ca4df7ea0eee23666b34c4713f854cdd04843
test-bench-deps:
  tasty-autocollect: -any
  bytestring: -any
  base: -any
  tasty-golden: -any
  text: -any
  filepath: -any
  containers: -any
  explainable-predicates: -any
  typed-process: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  temporary: -any
  tasty: -any
  directory: -any
maintainer: Brandon Chinn <brandonchinn178@gmail.com>
synopsis: Autocollection of tasty tests.
changelog: |
  # v0.4.0

  * Drop support for GHC 8.10
  * Added support for where clauses in `test_prop`, where the where clause may reference the generated arguments in `test_prop`
  * Don't autocollect invalid module names
  * Enable importing configuration from other files

  # v0.3.2.0

  * Added support for GHC 9.4

  # v0.3.1.0

  * Fix bug where errors in Main module would show the path of the temporary file instead of the original file
  * Ignore binary files in test directory

  # v0.3.0.0

  * Fix bug when omitting signature after specifying a signature for a prior test
  * Add support for `_expectFail`, `_expectFailBecause`, `_ignoreTest`, `_ignoreTestBecause` suffixes

  # v0.2.0.0

  * Fix build for GHC 8.10.2
  * Greatly simplify framework by replacing `test_testCase` with just `test = testCase ...`

  # v0.1.0.0

  Initial release
basic-deps:
  ghc: '>=9.0 && <9.5'
  tasty-autocollect: -any
  bytestring: '>=0.10 && <0.12'
  base: '>=4.14 && <5'
  tasty-expected-failure: '>=0.11 && <1'
  text: '>=1.2.3.2 && <3'
  filepath: '>=1.4.2.1 && <2'
  containers: '>=0.6.2.1 && <0.7'
  transformers: '>=0.5.6.2 && <1'
  tasty: '>=1.4.2.1 && <2'
  template-haskell: '>=2.16 && <2.20'
  directory: '>=1.3.6.0 && <2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0
author: Brandon Chinn <brandonchinn178@gmail.com>
latest: 0.4.0
description-type: markdown
description: "# tasty-autocollect\n\n[![](https://img.shields.io/github/actions/workflow/status/brandonchinn178/tasty-autocollect/ci.yml?branch=main)](https://github.com/brandonchinn178/tasty-autocollect/actions)\n[![](https://img.shields.io/codecov/c/gh/brandonchinn178/tasty-autocollect)](https://app.codecov.io/gh/brandonchinn178/tasty-autocollect)\n[![](https://img.shields.io/hackage/v/tasty-autocollect)](https://hackage.haskell.org/package/tasty-autocollect)\n\nA
  preprocessor/compiler plugin that will automatically collect Tasty tests and generate
  a main file to run all the tests.\n\nDesign goals:\n* Don't use any weird syntax
  so that syntax highlighters, linters, and formatters still work\n* Avoid universally
  exporting the whole test module, so that GHC can warn about unused test helpers\n*
  Support arbitrary test functions (e.g. user-defined test helpers or third-party
  tasty libraries)\n* Minimal dependencies\n  * Only uses boot libraries, with two
  exceptions: `tasty` + `tasty-expected-failure`\n\n## Quickstart\n\n1. Add the following
  to your `package.yaml` or `.cabal` file:\n\n    ```yaml\n    tests:\n      my-library-tests:\n
  \       ghc-options: -F -pgmF=tasty-autocollect\n        build-tools:\n          -
  tasty-autocollect:tasty-autocollect\n        ...\n        dependencies:\n          -
  tasty-autocollect\n          - ...\n    ```\n    ```cabal\n    test-suite my-library-tests\n
  \     ghc-options: -F -pgmF=tasty-autocollect\n      build-tool-depends:\n        tasty-autocollect:tasty-autocollect\n
  \     ...\n      build-depends:\n        tasty-autocollect\n        ...\n    ```\n\n1.
  Write your main file to contain just:\n\n    ```hs\n    {- AUTOCOLLECT.MAIN -}\n
  \   ```\n\n1. Write your tests:\n\n    ```hs\n    {- AUTOCOLLECT.TEST -}\n\n    module
  MyTest (\n      {- AUTOCOLLECT.TEST.export -}\n    ) where\n\n    import Test.Tasty.Golden\n
  \   import Test.Tasty.HUnit\n    import Test.Tasty.QuickCheck\n\n    test =\n      testCase
  \"Addition\" $ do\n        1 + 1 @?= (2 :: Int)\n        2 + 2 @?= (4 :: Int)\n\n
  \   -- See the \"Integration with QuickCheck/SmallCheck/etc.\" section\n    -- for
  a more seamless integration\n    test =\n      testProperty \"reverse . reverse
  === id\" $ \\xs ->\n        (reverse . reverse) xs === id (xs :: [Int])\n\n    test
  =\n      goldenVsString \"Example golden test\" \"test/golden/example.golden\" $\n
  \       pure \"example\"\n\n    test =\n      testGroup \"manually defining a test
  group\"\n        [ testCase \"some test\" $ pure ()\n        , testCase \"some other
  test\" $ pure ()\n        ]\n    ```\n\n## Features\n\nIn addition to automatically
  collecting tests, this library also provides some additional functionality out-of-the-box,
  to make writing + managing tests a seamless experience.\n\n### Integration with
  QuickCheck/SmallCheck/etc.\n\nProperty test frameworks like QuickCheck or SmallCheck
  work better when defining the types of arguments instead of using lambdas. So there's
  a special syntax for defining properties:\n\n```hs\ntest_prop :: [Int] -> Property\ntest_prop
  \"reverse . reverse === id\" xs = (reverse . reverse) xs === id xs\n```\n\nThis
  will be rewritten to the equivalent of:\n\n```hs\ntest =\n  testProperty\n    \"reverse
  . reverse === id\"\n    ( (\\xs -> (reverse . reverse) xs === id xs)\n        ::
  [Int] -> Property\n    )\n```\n\n### Marking tests as \"TODO\"\n\nIf you're of the
  Test Driven Development (TDD) mentality, you might want to specify what tests you
  want to write before actually writing any code. In this workflow, you might not
  even know what kind of test you want to write (e.g. HUnit, QuickCheck, etc.).\n\nWith
  `tasty-autocollect`, you can use `test_todo` to write down tests you'd like to write.
  By default, they'll pass with a \"TODO\" message, but you can also pass `--fail-todos`
  at runtime to make them fail instead.\n\n```hs\ntest_todo = \"a test to implement
  later\"\n```\n\n### Defining batches of tests\n\nWith `tasty-autocollect`, you can
  write a set of tests in one definition without needing to nest them within a test
  group. For example,\n\n```hs\ntest_batch =\n  [ testCase (\"test #\" ++ show x)
  $ pure ()\n  | x <- [1, 5, 10 :: Int]\n  ]\n```\n\nis equivalent to writing:\n\n```hs\ntest
  = testCase \"test #1\" $ pure ()\n\ntest = testCase \"test #5\" $ pure ()\n\ntest
  = testCase \"test #10\" $ pure ()\n```\n\n### Integration with `tasty-expected-failures`\n\nIf
  you need to mark a test as an expected failure or just unconditionally skip a test,
  you can add an appropriate suffix to your test. For example:\n\n```hs\ntest_expectFail
  = testCase \"this test should fail\" $ ...\n\ntest_expectFailBecause \"Issue #123\"
  = testCase \"this test should fail\" $ ...\n\ntest_ignoreTest = testCase \"this
  test is skipped\" $ ...\n\ntest_ignoreTestBecause \"Issue #123\" = testCase \"this
  test is skipped\" $ ...\n```\n\nThe last example will be converted into the equivalent
  of:\n\n```hs\ntasty_test_4 :: TestTree\ntasty_test_4 =\n  ignoreTestBecause \"Issue
  #123\" $\n    testCase \"this test is skipped\" $ ...\n```\n\nIt also works in combination
  with other test types, e.g. with `test_batch` to skip the entire batch of tests:\n\n```hs\ntest_batch_expectFail
  =\n  [ testCase (\"this test should fail: \" ++ show x) ...\n  | x <- ...\n  ]\n\ntest_prop_expectFailBecause
  :: Int -> Property\ntest_prop_expectFailBecause \"Issue #123\" \"some property\"
  x = x === x\n```\n\n## Configuration\n\n`tasty-autocollect` can be configured by
  adding `k = v` lines to the same block comment as `AUTOCOLLECT.MAIN`; e.g.\n\n```hs\n{-
  AUTOCOLLECT.MAIN\nsuite_name = foo\n\n# comments can start with a hash symbol\ngroup_type
  = flat\n-}\n```\n\n* `import`: A comma separated list of files (relative to the
  Main file) containing configuration to import\n    * Recommended file extension:
  `.conf`\n    * Configuration in files later in the list override configuration in
  files earlier in the list\n    * Configuration in the Main file override imported
  configuration\n\n* `suite_name`: The name to use in the `testGroup` at the root
  of the test suite `TestTree` (defaults to the path of the main file)\n\n* `group_type`:
  How the tests should be grouped (defaults to `modules`)\n    * `flat`: All the tests
  are in the same namespace\n        ```\n        Main.hs\n          test 1: OK\n
  \         test 2: OK\n          test 3: OK\n        ```\n\n    * `modules`: Tests
  are grouped by their module\n        ```\n        Main.hs\n          Test.Module1\n
  \           test1: OK\n            test2: OK\n          Test.Module2\n            test3:
  OK\n        ```\n\n    * `tree`: Tests are grouped by their module, which is broken
  out into a tree\n        ```\n        Main.hs\n          Test\n            Module1\n
  \             test1: OK\n              test2: OK\n            Module2\n              test3:
  OK\n        ```\n\n* `strip_suffix`: The suffix to strip from a test module, e.g.
  `strip_suffix = Test` will relabel a `Foo.BarTest` module to `Foo.Bar`\n\n* `ingredients`:
  A comma-separated list of extra tasty ingredients to include, e.g.\n\n    ```\n
  \   ingredients = SomeLibrary.ingredient1, SomeLibrary.ingredient2\n    ```\n\n*
  `ingredients_override`: By default, `ingredients` will add the ingredients in front
  of the default `tasty` ingredients. When `true`, does not automatically include
  the default `tasty` ingredients, for complete control over the ingredient order.\n\n*
  `custom_main`: If you'd like fine-grained control over how the `Main` module is
  generated (e.g. if you're using `NoImplicitPrelude` or custom preludes), set this
  to `true`. When set, it will do the following replacements:\n    * `{- AUTOCOLLECT.MAIN.imports
  -}`: replaced with the import lines needed for the tests.\n    * `{- AUTOCOLLECT.MAIN.tests
  -}`: replaced with the `[TestTree]` list, all on one line. If you're using a formatter
  or linter, it might be helpful to do `tests = id {- AUTOCOLLECT.MAIN.tests -}` so
  that the code still parses.\n\n    Due to current limitations, the above comments
  need to be matched exactly (e.g. not with `--` comments or extra whitespace).\n\n##
  Comparison with `tasty-discover`\n\nAdvantages:\n* Supports test functions with
  multiple arguments (e.g. `tasty-golden`)\n* Avoids hardcoding testers like `unit_`
  or `prop_`\n* Avoids rewriting test label twice in function name\n* Avoids test
  name restrictions\n    * Because `tasty-discover` couples the function name with
  the test label, you can't do things like use punctuation in the test label. So `tasty-discover`
  doesn't allow writing the equivalent of `testProperty \"reverse . reverse === id\"`.\n*
  More features out-of-the-box (see \"Features\" section)\n* More configurable\n    *
  More configuration options\n    * Configuration is more extensible, since configuration
  is parsed from a comment in the main module instead of as preprocessor arguments\n\nDisadvantages:\n*
  Uses both a preprocessor and a plugin (`tasty-discover` only uses a preprocessor)\n
  \   * Haven't tested performance yet, but I wouldn't be surprised if there's a non-negligible
  performance cost\n\n## Appendix\n\n### Debugging \n\nTo inspect the generated Main
  module, build with `-keep-tmp-files`, and look in `$TMPDIR` for a `ghc_1.hspp` file.
  (Upstream tickets: [GHC](https://gitlab.haskell.org/ghc/ghc/-/issues/22258), [Stack](https://github.com/commercialhaskell/stack/issues/5892))\n\nTo
  inspect the converted test modules, build with `-ddump-rn -ddump-to-file` and look
  for the `.dump-rn` files in `.stack-work/` or `dist-newstyle/`.\n\n### Note for
  Ormolu/Fourmolu\n\nIf you're using Ormolu or Fourmolu, use `-- $AUTOCOLLECT.TEST.export$`
  instead; otherwise, the comment will be moved out of the export list.\n\nThis works
  around the issue by reusing Haddock's named section syntax, but it shouldn't be
  an issue because you shouldn't be building Haddocks for test modules. If this becomes
  a problem for you, please open an issue.\n\nUpstream ticket: https://github.com/tweag/ormolu/issues/906\n\n###
  How it works\n\nThe `package.yaml`/`.cabal` snippet registers `tasty-autocollect`
  as a preprocessor, which does one of three things at the very beginning of compilation:\n\n1.
  If the file contains `{- AUTOCOLLECT.MAIN -}`, find all test modules and generate
  a main module.\n2. If the file contains `{- AUTOCOLLECT.TEST -}`, register the `tasty-autocollect`
  GHC plugin to rewrite tests (see below).\n3. Otherwise, do nothing\n\nIn a test
  file, the plugin will search for any functions named `test`. It will then rename
  the function to `tasty_test_N`, where `N` is an autoincrementing, unique number.
  Then it will collect all the tests into a `tasty_tests :: [TestTree]` binding, which
  is exported at the location of the `{- AUTOCOLLECT.TEST.export -}` comment.\n"
license-name: BSD-3-Clause
