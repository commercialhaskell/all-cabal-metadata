all-versions:
- 0.1.0.0
author: Stephanie Weirich
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
  mtl: '>=0'
  pretty: '>=0'
  transformers: '>=0'
  unbound: '>=0'
changelog: ''
changelog-type: ''
description: "An implementation of a type-preserving Compiler, derived from the paper\n\n[From
  System F to Typed Assembly Language](https://www.cs.princeton.edu/~dpw/papers/tal-toplas.pdf)\nby
  Morrisett, Walker, Crary, Glew\n\nI was inspired to implement this paper while preparing
  a \n[talk](https://www.youtube.com/watch?v=Epbaka9uTQ4) for Papers We Love Philadelphia.
  \n\nThe implementation includes all passes described in the paper:\n\n* F ==> K
  \  (Typed CPS conversion)\n* K ==> C   (Polymorphic closure conversion)\n* C ==>
  H   (Hoisting, reuses the C language)\n* H ==> A   (Allocation)\n* A ==> TAL (Code
  generation)\n\nEach language (F, K, C, A, TAL) is defined in the corresponding source\nfile.
  These implementations include the abstract syntax, small-step\noperational semantics,
  and type checker for the languages. The file\n[Util.hs](src/Util.hs) contains definitions
  common to all implementations.\n\nThe compiler itself is in the file [Translate.hs](src/Translate.hs).
  \ To run\nthe compiler, load this file into ghci and try out one of the sample programs\nfrom
  [F.hs](src/F.hs).\n\nIn particular, you can try\n\n     Translate*> printM $ compile
  F.sixfact\n\nto see the TAL output for the factorial function applied to six.\n\nIf
  you would like to compile and then run this function you can try:\n\n     Translate*>
  test F.sixfact\n"
description-type: markdown
hash: ce9149126798ef047b365c8cd7dacd2b8cdd3f9dc08cbba067db3f770587e672
homepage: https://github.com/sweirich/tal
latest: 0.1.0.0
license-name: MIT
maintainer: sweirich@cis.upenn.edu
synopsis: An implementation of Typed Assembly Language (Morrisett, Walker, Crary,
  Glew)
test-bench-deps: {}
