homepage: https://whetstone.private.storage/PrivateStorage/tahoe-ssk
changelog-type: markdown
hash: c0d01c3d193aa565f6651ad5857ad7840fe0e058505ce4b3ed241f6dd3ddb60c
test-bench-deps:
  bytestring: '>=0.10.8.2 && <0.11'
  base: '>=4.7 && <5'
  tasty-hedgehog: '>=1.0.0.2 && <1.2'
  text: '>=1.2.3.1 && <1.3'
  megaparsec: '>=8.0 && <9.3'
  asn1-types: '>=0.3.4 && <0.4'
  hedgehog: '>=1.0.3 && <1.1'
  tahoe-ssk: -any
  memory: '>=0.15 && <0.17'
  tahoe-capabilities: '>=0.1 && <0.2'
  x509: '>=1.7.5 && <1.8'
  base32: '>=0.2.1 && <0.3'
  binary: '>=0.8.6 && <0.9'
  tahoe-chk: '>=0.1 && <0.2'
  cryptonite: '>=0.27 && <0.30'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty: '>=1.2.3 && <1.5'
  asn1-encoding: '>=0.9.6 && <0.10'
maintainer: exarkun@twistedmatrix.com
synopsis: An implementation of the Tahoe-LAFS SSK cryptographic protocols
changelog: |
  # Changelog for tahoe-ssk

  ## 0.2.1.0

  * Add Ord instances for StorageIndex, Verifier, Reader, and Writer.
  * Add ConfidentialShowable instances for SDMF, Verifier, Reader, and Writer.
  * Deprecate dangerRealShow.

  ## 0.2.0.0

  * Add the IV as a parameter to Tahoe.SDMF.encode.
    The IV must be the value used to create the ciphertext so Tahoe.SDMF.encode cannot randomly generate one.
  * Add Tahoe.SDMF.randomIV for randomly generating a new IV.

  ## 0.1.0.0

  * Initial release.
  * Very basic non-verifying decoding support.
  * Enough encoding support for simple round-trip tests for the decoding functionality.
basic-deps:
  cereal: '>=0.5.8.1 && <0.6'
  bytestring: '>=0.10.8.2 && <0.11'
  base: '>=4.7 && <5'
  text: '>=1.2.3.1 && <1.3'
  megaparsec: '>=8.0 && <9.3'
  asn1-types: '>=0.3.4 && <0.4'
  tahoe-ssk: -any
  memory: '>=0.15 && <0.17'
  containers: '>=0.6.0.1 && <0.7'
  tahoe-capabilities: ==0.1.*
  x509: '>=1.7.5 && <1.8'
  base32: '>=0.2.1 && <0.3'
  binary: '>=0.8.6 && <0.9'
  tahoe-chk: '>=0.1 && <0.2'
  cryptonite: '>=0.27 && <0.30'
  asn1-encoding: '>=0.9.6 && <0.10'
all-versions:
- 0.2.1.0
author: Jean-Paul Calderone
latest: 0.2.1.0
description-type: markdown
description: "# tahoe-ssk\n\n## What is it?\n\nTahoe-SSK is a Haskell implementation
  of the [Tahoe-LAFS](https://tahoe-lafs.org/) SSK crytographic protocols.\nThis includes
  (S)mall (D)istributed (M)utable (F)iles (SDMF) and (M)edium (D)istributed (M)utable
  (F)iles (MDMF).\nIt aims for bit-for-bit compatibility with the original Python
  implementation.\n\nIt will not include an implementation of any network protocol
  for transferring SSK shares.\nHowever, its APIs are intended to be easy to integrate
  with such an implementation.\n\n### What is the current state?\n\n* SDMF write,
  read, and verify capabilities can be parsed and serialized.\n* SDMF shares can be
  deserialized, decoded, and decrypted.\n  * The cryptographic integrity and authenticity
  is not verified.\n* Plaintext can be encrypted, encoded into shares, and the shares
  serialized to bytes.\n  * Not all fields of the shares contain correctly initialized
  values.\n  * Enough fields are correctly populated to recover the original plaintext.\n\n##
  Why does it exist?\n\nA Haskell implementation can be used in places the original
  Python implementation cannot be\n(for example, runtime environments where it is
  difficult to have a Python interpreter).\nAdditionally,\nwith the benefit of the
  experience gained from creating and maintaining the Python implementation,\na number
  of implementation decisions can be made differently to produce a more efficient,
  more flexible, simpler implementation and API.\nAlso,\nthe Python implementation
  claims no public library API for users outside of the Tahoe-LAFS project itself.\n\n##
  Cryptographic Library Choice\n\nThis library uses cryptonite for cryptography,\nmotivated
  by the following considerations.\n\nSDMF uses\n* SHA256 for tagged hashes for key
  derivation and for integrity (XXX right word?) checks on some data.\n* AES128 for
  encryption of the signature key and the application plaintext data.\n* RSA for signatures
  proving write authority.\n\nThere are a number of Haskell libraries that provide
  all of these:\n\n* Crypto\n  * Does not support the AES mode we require (CTR).\n\n*
  HsOpenSSL\n  * Bindings to a C library, OpenSSL, which may complicate the build
  process.\n  * OpenSSL's security and reliability track record also leaves something
  to be desired.\n\n* cryptonite\n  * Has all of the primitive cryptographic functionality
  we need.\n\nWe want a library that:\n\n* Can be used with reflex-platform\n  * ghc
  8.6.5 compatible\n* Can be cross-compiled to different targets from x86_64-linux\n
  \ * Mainly armeabi and armv7\n* Is suitable for real-world security purposes\n  *
  not a demo or a toy library\n    * documents its limitations\n  * is well-tested\n
  \ * avoids real-world pitfalls (side-channel attacks, etc), not just textbook issues\n
  \ * has more than a handful of other users\n  * is well-maintained\n    * developers
  are responsive to security reports\n    * has a channel for security-related disclosures\n\t*
  has sound documentation for proper, safe usage\n\nAnd,\nof course,\nimplements the
  required functionality.\n\n### SHA256\n\nThere are a number of Haskell libraries
  that provide this primitive:\n\n* Crypto\n* HsOpenSSL\n* SHA\n* cryptohash\n* cryptonite\n*
  dhall\n* hashing\n* nettle\n* sbv\n* tls\n\n### AES128\n\n* Crypto\n* HsOpenSSL\n*
  cipher-aes\n* cipher-aes128\n* crypto\n* cryptocipher\n* cryptonite\n* cryptostore\n*
  nettle\n\n### RSA\n\nSDMF depends on RSA for signatures proving write authority.\n\n*
  Crypto\n* HsOpenSSL\n* RSA\n* cryptonite\n"
license-name: BSD-3-Clause
