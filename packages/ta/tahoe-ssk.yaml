homepage: https://whetstone.private.storage/PrivateStorage/tahoe-ssk
changelog-type: markdown
hash: 472a9438ecac665a1c052c6b6ed724bc401c733a29543dccc5e9db30562dad9b
test-bench-deps:
  bytestring: '>=0.10.8.2 && <0.11'
  base: '>=4.7 && <5'
  tasty-hedgehog: '>=1.0.0.2 && <1.2'
  text: '>=1.2.3.1 && <1.3'
  megaparsec: '>=8.0 && <9.3'
  asn1-types: '>=0.3.4 && <0.4'
  hedgehog: '>=1.0.3 && <1.1'
  tahoe-ssk: -any
  memory: '>=0.15 && <0.17'
  tahoe-capabilities: '>=0.1 && <0.2'
  x509: '>=1.7.5 && <1.8'
  base32: '>=0.2.1 && <0.3'
  binary: '>=0.8.6 && <0.9'
  tahoe-chk: '>=0.2 && <0.3'
  cryptonite: '>=0.27 && <0.30'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty: '>=1.2.3 && <1.5'
  asn1-encoding: '>=0.9.6 && <0.10'
maintainer: exarkun@twistedmatrix.com
synopsis: An implementation of the Tahoe-LAFS SSK cryptographic protocols
changelog: |
  # Changelog for tahoe-ssk

  ## 0.3.0.0 (Unreleased)

  * Updated the tahoe-chk dependency to 0.2.0.0.

  ## 0.2.1.0

  * Add Ord instances for StorageIndex, Verifier, Reader, and Writer.
  * Add ConfidentialShowable instances for SDMF, Verifier, Reader, and Writer.
  * Deprecate dangerRealShow.

  ## 0.2.0.0

  * Add the IV as a parameter to Tahoe.SDMF.encode.
    The IV must be the value used to create the ciphertext so Tahoe.SDMF.encode cannot randomly generate one.
  * Add Tahoe.SDMF.randomIV for randomly generating a new IV.

  ## 0.1.0.0

  * Initial release.
  * Very basic non-verifying decoding support.
  * Enough encoding support for simple round-trip tests for the decoding functionality.
basic-deps:
  cereal: '>=0.5.8.1 && <0.6'
  bytestring: '>=0.10.8.2 && <0.11'
  base: '>=4.7 && <5'
  text: '>=1.2.3.1 && <1.3'
  megaparsec: '>=8.0 && <9.3'
  asn1-types: '>=0.3.4 && <0.4'
  tahoe-ssk: -any
  memory: '>=0.15 && <0.17'
  containers: '>=0.6.0.1 && <0.7'
  tahoe-capabilities: ==0.1.*
  x509: '>=1.7.5 && <1.8'
  base32: '>=0.2.1 && <0.3'
  binary: '>=0.8.6 && <0.9'
  tahoe-chk: '>=0.2 && <0.3'
  cryptonite: '>=0.27 && <0.30'
  asn1-encoding: '>=0.9.6 && <0.10'
all-versions:
- 0.2.1.0
- 0.3.0.0
author: Jean-Paul Calderone
latest: 0.3.0.0
description-type: markdown
description: |
  # tahoe-ssk

  ## What is it?

  Tahoe-SSK is a Haskell implementation of the [Tahoe-LAFS](https://tahoe-lafs.org/) SSK crytographic protocols.
  This includes (S)mall (D)istributed (M)utable (F)iles (SDMF) and (M)edium (D)istributed (M)utable (F)iles (MDMF).
  It aims for bit-for-bit compatibility with the original Python implementation.

  It will not include an implementation of any network protocol for transferring SSK shares.
  However, its APIs are intended to be easy to integrate with such an implementation.

  ### What is the current state?

  * SDMF write, read, and verify capabilities can be parsed and serialized.
  * SDMF shares can be deserialized, decoded, and decrypted.
    * The cryptographic integrity is not verified:
      * a share's block hashes are not checked against the share's block hash tree
      * the root of the computed share hash tree is not checked against share's pre-computed share hash tree root
    * The cryptographic authenticity is not verified:
      * signatures on the data are not checked

  * Plaintext can be encrypted, encoded into shares, and the shares serialized to bytes.
    * Not all fields of the shares contain correctly initialized values.
    * Enough fields are correctly populated to recover the original plaintext.

  ## Why does it exist?

  A Haskell implementation can be used in places the original Python implementation cannot be
  (for example, runtime environments where it is difficult to have a Python interpreter).
  Additionally,
  with the benefit of the experience gained from creating and maintaining the Python implementation,
  a number of implementation decisions can be made differently to produce a more efficient, more flexible, simpler implementation and API.
  Also,
  the Python implementation claims no public library API for users outside of the Tahoe-LAFS project itself.

  ## Cryptographic Library Choice

  This library uses cryptonite for cryptography,
  motivated by the following considerations.

  SDMF uses
  * SHA256 for tagged hashes for key derivation and for integrity (XXX right word?) checks on some data.
  * AES128 for encryption of the signature key and the application plaintext data.
  * RSA for signatures proving write authority.

  There are a number of Haskell libraries that provide all of these:

  * Crypto
    * Does not support the AES mode we require (CTR).

  * HsOpenSSL
    * Bindings to a C library, OpenSSL, which may complicate the build process.
    * OpenSSL's security and reliability track record also leaves something to be desired.

  * cryptonite
    * Has all of the primitive cryptographic functionality we need.

  We want a library that:

  * Can be used with reflex-platform
    * ghc 8.6.5 compatible
  * Can be cross-compiled to different targets from x86_64-linux
    * Mainly armeabi and armv7
  * Is suitable for real-world security purposes
    * not a demo or a toy library
      * documents its limitations
    * is well-tested
    * avoids real-world pitfalls (side-channel attacks, etc), not just textbook issues
    * has more than a handful of other users
    * is well-maintained
      * developers are responsive to security reports
      * has a channel for security-related disclosures
      * has sound documentation for proper, safe usage

  And,
  of course,
  implements the required functionality.

  ### SHA256

  There are a number of Haskell libraries that provide this primitive:

  * Crypto
  * HsOpenSSL
  * SHA
  * cryptohash
  * cryptonite
  * dhall
  * hashing
  * nettle
  * sbv
  * tls

  ### AES128

  * Crypto
  * HsOpenSSL
  * cipher-aes
  * cipher-aes128
  * crypto
  * cryptocipher
  * cryptonite
  * cryptostore
  * nettle

  ### RSA

  SDMF depends on RSA for signatures proving write authority.

  * Crypto
  * HsOpenSSL
  * RSA
  * cryptonite
license-name: BSD-3-Clause
