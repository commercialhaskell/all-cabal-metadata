homepage: https://github.com/maralorn/haskell-taskwarrior
changelog-type: markdown
hash: a607bcf72c547bf31417f7a7192ace73e93d161c62dc749d70d885153d794a0a
test-bench-deps:
  base: -any
  time: -any
  unordered-containers: -any
  hspec: '>=2.7.1 && <2.9'
  text: -any
  uuid: -any
  quickcheck-instances: ^>=0.3.22
  taskwarrior: -any
  QuickCheck: '>=2.13.2 && <2.15'
  aeson: -any
maintainer: Malte Brandy <malte.brandy@maralorn.de>
synopsis: Types and aeson instances for taskwarrior tasks
changelog: |
  # Revision history for taskwarrior

  ## 0.3.0.0

  * Only export `id` and `urgency` when non default.
  * Change use of `[]` to `Set` because that matches the semantic better.

  ## 0.2.1.0

  * Add helpers for onAdd and onModify hooks.
  * Fix a bug where JSON without an `id` ar `urgency` key would be wrongly rejected.

  ## 0.2.0.0

  ### Breaking changes

  * data Status: Removed RecurringChild, renamed RecurringParent to Recurring.

  ### Other API changes

  * RecurringChild is now a new Type and a Maybe field of Task.
  * Added the fields 'id' and 'urgency' to Task. They were regarded as UDAs before.
  * Now exporting the data consructors of Priority
  * Added To- and FromJSON for Status
  * Add FromJSON for Priority and improved Parser errors for it

  ### Documentation

  * Added documentation about adherence to the specification
  * Improved linking in the docs
  * Expanded README regarding help and contributions

  ### Development

  * Github actions will now check formatting and linking in haddocks

  ### Thanks

  Thanks to @ryantrinkle and @tom-audm for their contributions, which triggered this release.

  ## 0.1.2.4

  * Fix a bug where recurring masks where parsed wrong
  * Further (small) documentation improvementes

  ## 0.1.2.3

  * Documentation improvements
  * Loosen some dependency bounds

  ## 0.1.2.2

  * Add `StrictData` pragma for better performance.

  ## 0.1.2.1

  * Remove string-interpolate dependency

  ## 0.1.2.0 -- 2019-12-23

  * Added `getUUIDs` function.

  ## 0.1.1.0 -- 2019-12-06

  * Added `makeTask` and `createTask` functions.

  ## 0.1.0.0 -- 2019-11-08

  * First version. Includes the data types, `saveTasks` and `getTasks`.
basic-deps:
  bytestring: '>=0.10.8.2 && <0.12'
  base: '>=4.11 && <4.16'
  time: '>=1.8.0.2 && <1.13'
  unordered-containers: ^>=0.2.9.0
  text: ^>=1.2.3.0
  uuid: ^>=1.3.13
  process: ^>=1.6.5.0
  containers: '>=0.5.0.0 && <0.7'
  random: '>=1.1 && <1.3'
  aeson: '>=1.4.2.0 && <1.6'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
author: Malte Brandy <malte.brandy@maralorn.de>
latest: 0.3.0.0
description-type: markdown
description: |
  # taskwarrior

  [![Hackage](https://img.shields.io/hackage/v/taskwarrior.svg)](https://hackage.haskell.org/package/taskwarrior)
  [![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fmaralorn%2Fhaskell-taskwarrior%2Fbadge%3Fref%3Dmaster)](https://actions-badge.atrox.dev/maralorn/haskell-taskwarrior/goto?ref=master)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/taskwarrior.svg)](http://packdeps.haskellers.com/reverse/taskwarrior)

  ## About

  [Taskwarrior](https://taskwarrior.org) is a feature rich command-line task management tool.

  This Haskell library contains

  * a data type to represent a taskwarrior task
  * Aeson instances to deserialize and serialize a task according to the taskwarrior import/export specifications
  * IO actions to load and manipulate tasks by calling the `task` command. (Since this is the encouraged way to library design by the taskwarrior developers.)

  ## Usage

  Install `taskwarrior` from hackage. Have a look at `Taskwarrior.IO.getTasks` to get started.

  This example prints the description of (at the most) 5 pending tasks.
  ```haskell
  import Taskwarrior.IO (getTasks)
  import Taskwarrior.Task as Task

  main :: IO ()
  main = do
    tasks <- getTasks ["+PENDING", "limit:5"]
    print $ Task.description <$> tasks
  ```

  ## Contributions

  Any form of issue reports, general feedback, feature requests or suggestions and of course code contributions are highly welcome.

  Also I'd be curious to know what you use this library for.

  This project uses brittany in default configuration as code formatter.
  The tests on github will check for hlints, missing docs and unapplied formatting.

  ## Help & Contact

  You can always open an issue on GitHub. You can also ask in `#haskell-taskwarrior` on freenode irc. If you don‘t have an irc client you can log in via [the webchat](https://webchat.freenode.net/#haskell-taskwarrior).
  Shooting @maralorn a mail is also an option. But of course that won’t be public and therefore not help anyone else.
license-name: AGPL-3.0-or-later
