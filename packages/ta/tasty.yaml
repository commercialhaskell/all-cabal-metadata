homepage: https://github.com/UnkindPartition/tasty
changelog-type: markdown
hash: 4f97a51e348ec1d5fcbc9fa0dae5e33ff41d8ce4f679a306bf7a46dc52f7a1ba
test-bench-deps: {}
maintainer: Roman Cheplyaka <roma@ro-che.info>
synopsis: Modern and extensible testing framework
changelog: |
  Changes
  =======

  Version 1.4.2.1
  ---------------

  Fix warnings under GHC 9.2

  Version 1.4.2
  -------------

  * Add `consoleTestReporterWithHook`
  * Suggest pattern to rerun an individual failing test
  * Add `Test.Tasty.Patterns.Printer`

  Version 1.4.1
  -------------

  Deduplicate command line options when there is more than one TestReporter.
  Expose the function that does that, `uniqueOptionDescriptions`.

  Version 1.4.0.3
  ---------------

  Fix CPP warning/error `macro expansion producing 'defined' has undefined behavior`

  Version 1.4.0.2
  ---------------

  Automatically disable the dependency on the `clock` package when compiled by ghcjs.

  Version 1.4.0.1
  ---------------

  The only point of this release is to introduce compatibility with GHCs back to 7.0
  (see https://github.com/UnkindPartition/tasty/pull/287).

  Note, however, that these changes are not merged to the master branch, and the
  future releases will only support the GHC/base versions from the last 5 years,
  as per our usual policy. To test with even older GHCs, you'll have to use this
  particular version of tasty (or have the constraint solver pick it for you when
  testing with older GHCs).

  The source of this release is in the `support-old-ghcs` branch of the tasty
  repository.

  Version 1.4
  -----------

  * Change the `TreeFold` data type to give all functions access to `OptionSet`
  * Fix a bug where a looping failure message escaped the time out set for the
      test
  * Fix a bug where pattern changes inside the `TestTree` weren't respected

  Version 1.3.1
  -------------

  * Add an ability for a test provider to print colorful/formatted output

  Version 1.3
  -----------

  * `IsOption` has a new method `showDefaultValue` for customizing how
    `defaultValue`s are rendered in the `--help` output.
  * Drop support for GHCs older than 5 years
  * Do not install handlers for the signals that dump core
  * Export the `AnsiTricks` type/option
  * In addition to a `Parser`, `optionParser` and `suiteOptionParser` now return
    a `[String]` representing warning messages:
    * A warning is emitted if an `IsOption` instance defines multiple options in
      the implementation of `optionCLParser`.
    * An warning is emitted if an `IsOption` instance's `optionCLParser`
      implementation assigns a default value (e.g., with
      `Options.Applicative.value`), as this interferes with `tasty`'s ability to
      read environment variable arguments.

  Version 1.2.3
  -------------

  * Expose `computeStatistics` from `Test.Tasty.Ingredients.ConsoleReporter`.
  * Ensure that `finally` and `bracket` work as expected inside tests
    when the test suite is interrupted by Ctrl-C.

  Version 1.2.2
  -------------

  * Expose timed and getTime
  * Add parseOptions
  * Allow to disable ANSI tricks with --ansi-tricks=false

  Version 1.2.1
  -------------

  * Document and expose installSignalHandlers
  * Enable colors in Emacs and other almost-ANSI-capable terminals

  Version 1.2
  -----------

  Make it possible to declare dependencies between tests (see the README for
  details)

  Version 1.1.0.4
  ---------------

  Make tasty work with GHCJS

  Version 1.1.0.3
  ---------------

  Fix compatibility with GHC 8.6

  Version 1.1.0.2
  ---------------

  Fix a bug where some (mostly Asian) characters would break alignment in the
  terminal output

  Version 1.1.0.1
  ---------------

  Fix a bug where `-l` was still using `/` instead of `.` as a field separator

  Version 1.1
  -----------

  **NOTE**: This major release contains some breaking changes to the semantics of patterns.
  In the original pattern design I didn't notice the conflict between using `/` as
  a field separator and as the AWK syntax for pattern matching `/.../`.

  The new patterns have been around for a relatively short time (5 months), so
  hopefully the breakage won't be too big. I'm sorry about any problems caused by
  the change.

  See <https://github.com/UnkindPartition/tasty/issues/220> for the discussion.

  * The field separator in patterns is changed from slash (`/`) to period (`.`),
    and `.` is now allowed in raw patterns.

    The field separator is used to join the group names and the test
    name when comparing to a pattern such as `-p foo` or `-p /foo/`.

    If you used

        -p 'foo/bar'

    or

        -p '/foo\/bar/'

    before, now you should use

        -p 'foo.bar'
    or

        -p '/foo.bar/'

    if you meant "test/group `bar` inside group `foo`, or

        -p '/foo\/bar/'

    if you meant "test/group containing `foo/bar` in the name".

    The need for escaping the slash inside the `/.../` pattern was precisely the
    motivation for this change.

  * Raw patterns (ones that are not AWK expressions) may no longer contain slashes
    (`/`).

    So

        -p 'foo/bar'

    is no longer allowed, and

        -p '/foo/'

    is now parsed as an AWK expression `/foo/`, whereas before it
    was treated as a raw pattern and converted to `/\/foo\//`.

    The reason for this change is that `/foo/` is a valid AWK expression
    and should be parsed as such.

  * Raw patterns may now contain hyphens, so e.g. `-p type-checking` now works.

    In theory this makes some valid AWK expressions (such as `NF-2`) not to be
    parsed as such, but they are either unlikely to be useful or could also be
    expressed in other ways (`NF!=2`).

  * Several new exports, mostly for testing/debugging patterns:

    * `TestPattern` now has a `Show` instance; `TestPattern` and `Expr` now have
        `Eq` instances.
    * The constructors of `TestPattern` are now exported.
    * `parseAwkExpr` is introduced and can be used in ghci to see how an AWK
        expression is parsed. (For parsing test patterns, which include raw
        patterns in addition to AWK expression, use `parseTestPattern`.)

  Version 1.0.1.1
  ---------------

  Fix a bug where a test suite that uses resources would hang if interrupted

  Version 1.0.1
  -------------

  * Add a `safeReadBool` function, for case-insensitive parsing of boolean options
  * Convert all tasty's own options to case-insensitive

  Version 1.0.0.1
  ---------------

  Adjust lower bounds for the dependencies (mtl and optparse-applicative)

  Version 1.0
  -----------

  * New pattern language (see the README and/or the [blog post][awk])
  * Make the `clock` dependency optional

  [awk]: https://ro-che.info/articles/2018-01-08-tasty-new-patterns

  Version 0.12.0.1
  ----------------

  Fix compatibility with GHC 8.4

  Version 0.12
  ------------

  Backward compat breaking revision of `Test.Tasty.Ingredients.ConsoleReporter`
  that exposes the name of tests/groups.

  Version 0.11.3
  --------------

  Expose and document several of the internals of
  `Test.Tasty.Ingredients.ConsoleReporter`.

  Version 0.11.2.5
  ----------------

  Fix compatibility with GHC 7.4

  Version 0.11.2.4
  ----------------

  1. Make the `--quiet` mode more efficient on a large number of tests
  2. Fix a bug where a cursor would disappear if the test suite was terminated by
     a signal other than SIGINT.

  Version 0.11.2.3
  ----------------

  Make filtering tests (`-p`) work faster

  Version 0.11.2.2
  ----------------

  Fix a critical bug in the quiet mode (`-q`/`--quiet`):
  the exit status could be wrong or the test suite could hang.

  Version 0.11.2.1
  ----------------

  Fix compatibility with the latest `unbounded-delays`

  Version 0.11.2
  --------------

  Add `composeReporters`, a function to run multiple reporter ingredients

  Version 0.11.1
  --------------

  Introduce `mkOptionCLParser` and `mkFlagCLParser`

  Version 0.11.0.4
  ----------------

  Fix compatibility with `optparse-applicative-0.13`

  Version 0.11.0.3
  ----------------

  Switch from `regex-tdfa-rc` to `regex-tdfa`, which got a new maintainer.

  Version 0.11.0.2
  ----------------

  Clarify `IsTest`â€™s specification with regard to exceptions

  Version 0.11.0.1
  ----------------

  Use monotonic clock when measuring durations.

  Version 0.11
  ------------

  New field `resultShortDescription` of `Result`

  Version 0.10.1.2
  ----------------

  * Improve the docs
  * Fix compatibility with GHC HEAD

  Version 0.10.1.1
  ----------------

  * Prevent parsing non-positive number of threads via program options (#104)
  * Buffer output to avoid slowdowns when printing test results (#101)
  * Default to using the maximum number of available cores for test execution

  Version 0.10.1
  --------------

  Export `Test.Tasty.Runners.formatMessage`

  Version 0.10.0.4
  ----------------

  Don't output ANSI codes for the Emacs terminal emulator

  Version 0.10.0.3
  ----------------

  Better handle the situation when there are no ingredients to run

  Version 0.10.0.2
  ----------------

  Split the changelog into per-project changelogs

  Version 0.10.0.1
  ----------------

  Update to optparse-applicative 0.11

  Version 0.10
  ------------

  * Add the `--color` option
  * Timings
      * Introduce the `Time` type synonym
      * Change the types of `launchTestTree` and `TestReporter` to accept the
        total run time
      * `consoleTestReporter` now displays the timings

  Version 0.9.0.1
  ---------------

  Upgrade to optparse-applicative-0.10.

  Version 0.8.1.3
  ---------------

  Be careful not to export the `Show (a -> b)` instance, see
  <https://github.com/UnkindPartition/tasty/issues/71>

  Version 0.8.1.2
  ---------------

  Hide cursor when running tests

  Version 0.8.1.1
  ---------------

  Fix for GHC 7.9

  Version 0.8.0.4
  ---------------

  Remove the old 'colors' flag description from the cabal file

  Version 0.8.0.2
  ---------------

  Make ansi-terminal an unconditional dependency

  Version 0.8
  -----------

  * `Test.Tasty.Ingredients` is now exposed
  * `Test.Tasty.Ingredients.Basic` is added, which exports the ingredients defined
      in the `tasty` package. These exports should now be used instead of ones
      exported from `Test.Tasty.Runners`
  * The `Result` type is now structured a bit differently. Providers now should
    use `testPassed` and `testFailed` functions instead of constructing `Result`s
    directly.
  * Add Â«quiet modeÂ» (see README)
  * Add Â«hide successesÂ» mode (see README)
  * Add short command-line options: `-j` for `--num-threads`, `-p` for `--pattern`
  * Add timeout support
  * `AppMonoid` is renamed to `Traversal` for consistency with the 'reducers'
    package. Another similar wrapper, `Ap`, is introduced.
  * Fix a resources bug (resources were not released if the test suite was
    interrupted)
  * The type of `launchTestTree` is changed. It now takes a continuation as an
    argument. This is necessary to fix the bug mentioned above.
  * Add `flagCLParser` to be used as the `optionCLParser` implementation for
    boolean options.
  * Add the ability to pass options via environment

  Version 0.7
  -----------

  * Use `regex-tdfa` instead of `regex-posix` (which is a native
    implementation, and as such is more portable)
  * `foldTestTree` now takes the algebra in the form of a record rather than
    multiple arguments, to minimize breakage when new nodes are added or
    existing ones change
  * `withResource` now passes the IO action to get the resource to the inner test tree

  Version 0.6
  -----------

  * Better handling of exceptions that arise during resource creation or
    disposal
  * Expose the `AppMonoid` wrapper
  * Add `askOption` and `inludingOptions`

  Version 0.5.2.1
  ---------------

  Depend on ansi-terminal >= 0.6.1. This fixes some issues with colors on Windows.

  Version 0.5.2
  -------------

  * Export `Result` and `Progress` from `Test.Tasty.Runners`
  * Make it clear that only GHC 7.4+ is supported

  Version 0.5.1
  -------------

  Export `ResourceSpec` from `Test.Tasty.Runners`

  Version 0.5
  -----------

  Add a capability to acquire and release resources. See the Â«ResourcesÂ» section
  in the `Test.Tasty` docs.

  For the end users, the API is backwards-compatible.

  Test runners may have to be adjusted â€” there is a new constructor of `TestTree`
  and a new argument of `foldTestTree`.

  Version 0.4.2
  -------------

  Add `defaultIngredients`

  Version 0.4.1.1
  ---------------

  Print the failure description in red

  Version 0.4.0.1
  ---------------

  Fix a bug ([#25](https://github.com/UnkindPartition/tasty/issues/25))

  Version 0.4
  -----------

  The big change in this release is introduction of ingredients, which is a
  replacement for runners. But unless you have a custom runner, this is unlikely
  to affect you much.

  The `Ingredient` data type has replaced the `Runner` type.

  The following functions have been renamed and possibly changed their types:

  * `defaultMainWithRunner` â†’ `defaultMainWithIngredients`
  * `treeOptionParser` â†’ `suiteOptionParser`
  * `getTreeOptions` â†’ `treeOptions`
  * `runUI` â†’ `consoleTestReporter`

  Added in this release:

  * `suiteOptions`
  * `optionParser`
  * functions operating on ingredients
  * `testsNames`
  * the `listingTests` ingredient and its option, `ListTests`

  `NumThreads` is no longer a core option, but is automatically included in the
  test reporting ingredients (see its haddock).

  Version 0.3.1
  -------------

  * Proper reporting of (some) non-terminating tests (#15)
  * Upgrade to optparse-applicative 0.6

  Version 0.3
  -----------

  * Restrict dependency versions
  * Fix a bug where non-terminating test would lead to a deadlock (#15)

  Version 0.2
  -----------

  * Add an `execRunner` function
  * Make `Runner` return `IO Bool`

  Version 0.1.1
  -------------

  Set lower bound on optparse-applicative dependency version
basic-deps:
  unix: -any
  stm: '>=2.3'
  base: '>=4.9 && <5'
  clock: '>=0.4.4.0'
  unbounded-delays: '>=0.1'
  tagged: '>=0.5'
  containers: -any
  ansi-terminal: '>=0.9'
  wcwidth: -any
  mtl: '>=2.1.3.1'
  optparse-applicative: '>=0.14'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.0.1
- 0.4.1.1
- 0.4.2
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.2.1
- '0.6'
- '0.7'
- '0.8'
- 0.8.0.2
- 0.8.0.4
- 0.8.1.1
- 0.8.1.2
- 0.8.1.3
- 0.9.0.1
- '0.10'
- 0.10.0.1
- 0.10.0.2
- 0.10.0.3
- 0.10.0.4
- 0.10.1
- 0.10.1.1
- 0.10.1.2
- '0.11'
- 0.11.0.1
- 0.11.0.2
- 0.11.0.3
- 0.11.0.4
- 0.11.1
- 0.11.2
- 0.11.2.1
- 0.11.2.2
- 0.11.2.3
- 0.11.2.4
- 0.11.2.5
- 0.11.3
- '0.12'
- 0.12.0.1
- '1.0'
- 1.0.0.1
- 1.0.1
- 1.0.1.1
- '1.1'
- 1.1.0.1
- 1.1.0.2
- 1.1.0.3
- 1.1.0.4
- '1.2'
- 1.2.1
- 1.2.2
- 1.2.3
- '1.3'
- 1.3.1
- '1.4'
- 1.4.0.1
- 1.4.0.2
- 1.4.0.3
- 1.4.1
- 1.4.2
- 1.4.2.1
author: Roman Cheplyaka <roma@ro-che.info>
latest: 1.4.2.1
description-type: markdown
description: "# Tasty\n\n**Tasty** is a modern testing framework for Haskell.\n\nIt
  lets you combine your unit tests, golden tests, QuickCheck/SmallCheck\nproperties,
  and any other types of tests into a single test suite.\n\nFeatures:\n\n* Run tests
  in parallel but report results in a deterministic order\n* Filter the tests to be
  run using patterns specified on the command line\n* Hierarchical, colored display
  of test results\n* Reporting of test statistics\n* Acquire and release resources
  (sockets, temporary files etc.) that can be\n  shared among several tests\n* Extensibility:
  add your own test providers and ingredients (runners) above and\n  beyond those
  provided\n\nTo find out what's new, read the **[change log][]**.\n\n[change log]:
  https://github.com/UnkindPartition/tasty/blob/master/core/CHANGELOG.md\n\n## Example\n\nHere's
  how your `test.hs` might look like:\n\n```haskell\nimport Test.Tasty\nimport Test.Tasty.SmallCheck
  as SC\nimport Test.Tasty.QuickCheck as QC\nimport Test.Tasty.HUnit\n\nimport Data.List\nimport
  Data.Ord\n\nmain = defaultMain tests\n\ntests :: TestTree\ntests = testGroup \"Tests\"
  [properties, unitTests]\n\nproperties :: TestTree\nproperties = testGroup \"Properties\"
  [scProps, qcProps]\n\nscProps = testGroup \"(checked by SmallCheck)\"\n  [ SC.testProperty
  \"sort == sort . reverse\" $\n      \\list -> sort (list :: [Int]) == sort (reverse
  list)\n  , SC.testProperty \"Fermat's little theorem\" $\n      \\x -> ((x :: Integer)^7
  - x) `mod` 7 == 0\n  -- the following property does not hold\n  , SC.testProperty
  \"Fermat's last theorem\" $\n      \\x y z n ->\n        (n :: Integer) >= 3 SC.==>
  x^n + y^n /= (z^n :: Integer)\n  ]\n\nqcProps = testGroup \"(checked by QuickCheck)\"\n
  \ [ QC.testProperty \"sort == sort . reverse\" $\n      \\list -> sort (list ::
  [Int]) == sort (reverse list)\n  , QC.testProperty \"Fermat's little theorem\" $\n
  \     \\x -> ((x :: Integer)^7 - x) `mod` 7 == 0\n  -- the following property does
  not hold\n  , QC.testProperty \"Fermat's last theorem\" $\n      \\x y z n ->\n
  \       (n :: Integer) >= 3 QC.==> x^n + y^n /= (z^n :: Integer)\n  ]\n\nunitTests
  = testGroup \"Unit tests\"\n  [ testCase \"List comparison (different length)\"
  $\n      [1, 2, 3] `compare` [1,2] @?= GT\n\n  -- the following test does not hold\n
  \ , testCase \"List comparison (same length)\" $\n      [1, 2, 3] `compare` [1,2,2]
  @?= LT\n  ]\n```\n\nAnd here is the output of the above program:\n\n![](https://raw.github.com/UnkindPartition/tasty/master/screenshot.png)\n\n(Note
  that whether QuickCheck finds a counterexample to the third property is\ndetermined
  by chance.)\n\n## Packages\n\n[tasty][] is the core package. It contains basic definitions
  and APIs and a\nconsole runner.\n\n[tasty]: https://hackage.haskell.org/package/tasty\n\nIn
  order to create a test suite, you also need to install one or more Â«providersÂ» (see\nbelow).\n\n###
  Providers\n\nThe following providers exist:\n\n* [tasty-hunit](https://hackage.haskell.org/package/tasty-hunit)
  â€” for unit tests\n  (based on [HUnit](https://hackage.haskell.org/package/HUnit))\n*
  [tasty-golden][] â€” for golden\n  tests, which are unit tests whose results are kept
  in files\n* [tasty-smallcheck](https://hackage.haskell.org/package/tasty-smallcheck)
  â€”\n  exhaustive property-based testing\n  (based on [smallcheck](https://hackage.haskell.org/package/smallcheck))\n*
  [tasty-quickcheck](https://hackage.haskell.org/package/tasty-quickcheck) â€” for randomized\n
  \ property-based testing (based on [QuickCheck](http://hackage.haskell.org/package/QuickCheck))\n*
  [tasty-hedgehog](https://hackage.haskell.org/package/tasty-hedgehog) â€” for randomized\n
  \ property-based testing (based on [Hedgehog](https://hackage.haskell.org/package/hedgehog))\n*
  [tasty-hspec](https://hackage.haskell.org/package/tasty-hspec) â€” for\n  [Hspec](https://hspec.github.io/)
  tests\n* [tasty-leancheck](https://hackage.haskell.org/package/tasty-leancheck)
  â€” for\n  enumerative property-based testing\n  (based on [LeanCheck](https://hackage.haskell.org/package/leancheck))\n*
  [tasty-program](https://hackage.haskell.org/package/tasty-program) â€” run\n  external
  program and test whether it terminates successfully\n* [tasty-wai](https://hackage.haskell.org/package/tasty-wai)
  â€” \n  for testing [wai](https://hackage.haskell.org/wai) endpoints.\n* [tasty-inspection-testing](https://hackage.haskell.org/package/tasty-inspection-testing)
  â€”\n  for compile-time testing of code properties\n  (based on [inspection-testing](http://hackage.haskell.org/package/inspection-testing)).\n\n[tasty-golden]:
  https://hackage.haskell.org/package/tasty-golden\n\nIt's easy to create custom providers
  using the API from `Test.Tasty.Providers`.\n\n### Ingredients\n\nIngredients represent
  different actions that you can perform on your test suite.\nOne obvious ingredient
  that you want to include is one that runs tests and\nreports the progress and results.\n\nAnother
  standard ingredient is one that simply prints the names of all tests.\n\nIt is possible
  to write custom ingredients using the API from `Test.Tasty.Runners`.\n\nSome ingredients
  that can enhance your test suite are:\n\n* [tasty-ant-xml](https://hackage.haskell.org/package/tasty-ant-xml)
  adds a\n  possibility to write the test results in a machine-readable XML format,
  which\n  is understood by various CI systems and IDEs\n* [tasty-rerun](https://hackage.haskell.org/package/tasty-rerun)
  adds support for\n  minimal test reruns by recording previous test runs and using
  this information\n  to filter the test tree. For example, you can use this ingredient
  to only run\n  failed tests, or only run tests that threw an exception.\n* [tasty-html](https://hackage.haskell.org/package/tasty-html)
  adds the\n  possibility to write the test results as a HTML file\n* [tasty-stats](https://hackage.haskell.org/package/tasty-stats)
  adds the\n  possibility to collect statistics of the test suite in a CSV file.\n\n###
  Other packages\n\n* [tasty-th](https://hackage.haskell.org/package/tasty-th) automatically\ndiscovers
  tests based on the function names and generate the boilerplate code for\nyou\n*
  [tasty-hunit-adapter](https://hackage.haskell.org/package/tasty-hunit-adapter)\n
  \ converts existing HUnit test suites into tasty test suites\n* [tasty-discover](https://hackage.haskell.org/package/tasty-discover)
  automatically discovers\nyour tests.\n* [tasty-expected-failure](https://hackage.haskell.org/package/tasty-expected-failure)
  provides\ntest markers for when you expect failures or wish to ignore tests.\n*
  [tasty-bench](https://hackage.haskell.org/package/tasty-bench) covers performance\nregression
  testing and extends `tasty` to a benchmark framework\nsimilar to `criterion` and
  `gauge`.\n\n\n## Options\n\nOptions allow one to customize the run-time behavior
  of the test suite, such\nas:\n\n* mode of operation (run tests, list tests, run
  tests quietly etc.)\n* which tests are run (see Â«PatternsÂ» below)\n* parameters
  of individual providers (like depth of search for SmallCheck)\n\n### Setting options\n\nThere
  are two main ways to set options:\n\n#### Runtime\n\nWhen using the standard console
  runner, the options can be passed on the\ncommand line or via environment variables.
  To see the available options, run\nyour test suite with the `--help` flag. The output
  will look something like this\n(depending on which ingredients and providers the
  test suite uses):\n\n```\n% ./test --help\nMmm... tasty test suite\n\nUsage: test
  [-p|--pattern PATTERN] [-t|--timeout DURATION] [-l|--list-tests]\n            [-j|--num-threads
  NUMBER] [-q|--quiet] [--hide-successes]\n            [--color never|always|auto]
  [--ansi-tricks ARG]\n            [--smallcheck-depth NUMBER] [--smallcheck-max-count
  NUMBER]\n            [--quickcheck-tests NUMBER] [--quickcheck-replay SEED]\n            [--quickcheck-show-replay]
  [--quickcheck-max-size NUMBER]\n            [--quickcheck-max-ratio NUMBER] [--quickcheck-verbose]\n
  \           [--quickcheck-shrinks NUMBER]\n\nAvailable options:\n  -h,--help                Show
  this help text\n  -p,--pattern PATTERN     Select only tests which satisfy a pattern
  or awk\n                           expression\n  -t,--timeout DURATION    Timeout
  for individual tests (suffixes: ms,s,m,h;\n                           default: s)\n
  \ -l,--list-tests          Do not run the tests; just print their names\n  -j,--num-threads
  NUMBER  Number of threads to use for tests execution\n                           (default:
  # of cores/capabilities)\n  -q,--quiet               Do not produce any output;
  indicate success only by\n                           the exit code\n  --hide-successes
  \        Do not print tests that passed successfully\n  --color never|always|auto\n
  \                          When to use colored output (default: auto)\n  --ansi-tricks
  ARG        Enable various ANSI terminal tricks. Can be set to\n                           'true'
  or 'false'. (default: true)\n  --smallcheck-depth NUMBER\n                           Depth
  to use for smallcheck tests\n  --smallcheck-max-count NUMBER\n                           Maximum
  smallcheck test count\n  --quickcheck-tests NUMBER\n                           Number
  of test cases for QuickCheck to generate.\n                           Underscores
  accepted: e.g. 10_000_000\n  --quickcheck-replay SEED Random seed to use for replaying
  a previous test run\n                           (use same --quickcheck-max-size)\n
  \ --quickcheck-show-replay Show a replay token for replaying tests\n  --quickcheck-max-size
  NUMBER\n                           Size of the biggest test cases quickcheck generates\n
  \ --quickcheck-max-ratio NUMBER\n                           Maximum number of discared
  tests per successful test\n                           before giving up\n  --quickcheck-verbose
  \    Show the generated test cases\n  --quickcheck-shrinks NUMBER\n                           Number
  of shrinks allowed before QuickCheck will fail\n                           a test\n```\n\nEvery
  option can be passed via environment. To obtain the environment variable\nname from
  the option name, replace hyphens `-` with underscores `_`, capitalize\nall letters,
  and prepend `TASTY_`. For example, the environment equivalent of\n`--smallcheck-depth`
  is `TASTY_SMALLCHECK_DEPTH`.\n\nNote on boolean options: by convention, boolean
  (\"on/off\") options are specified\nusing a switch on the command line, for example
  `--quickcheck-show-replay`\ninstead of `--quickcheck-show-replay=true`. However,
  when\npassed via the environment, the option value needs to be `True` or `False`\n(case-insensitive),
  e.g. `TASTY_QUICKCHECK_SHOW_REPLAY=true`.\n\nIf you're using a non-console runner,
  please refer to its documentation to find\nout how to configure options during the
  run time.\n\n#### Compile-time\n\nYou can also specify options in the test suite
  itself, using\n`localOption`. It can be applied not only to the whole test tree,
  but also to\nindividual tests or subgroups, so that different tests can be run with\ndifferent
  options.\n\nIt is possible to combine run-time and compile-time options, too, by
  using\n`adjustOption`. For example, make the overall testing depth configurable\nduring
  the run time, but increase or decrease it slightly for individual\ntests.\n\nThis
  method currently doesn't work for ingredient options, such as `--quiet` or\n`--num-threads`.
  You can set them by setting the corresponding environment\nvariable before calling
  `defaultMain`:\n\n<a id=\"num_threads_example\">\n\n```haskell\nimport Test.Tasty\nimport
  System.Environment\n\nmain = do\n  setEnv \"TASTY_NUM_THREADS\" \"1\"\n  defaultMain
  _\n```\n\n### Patterns\n\nIt is possible to restrict the set of executed tests using
  the `-p/--pattern`\noption.\n\nTasty patterns are very powerful, but if you just
  want to quickly run tests containing `foo`\nsomewhere in their name or in the name
  of an enclosing test group, you can just\npass `-p foo`. If you need more power,
  or if that didn't work as expected, read\non.\n\nA pattern is an [awk expression][awk].
  When the expression is evaluated, the field `$1`\nis set to the outermost test group
  name, `$2` is set to the next test group\nname, and so on up to `$NF`, which is
  set to the test's own name. The field `$0`\nis set to all other fields concatenated
  using `.` as a separator.\n\n[awk]: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html#tag_20_06_13_02\n\nAs
  an example, consider a test inside two test groups:\n\n```\n  testGroup \"One\"
  [ testGroup \"Two\" [ testCase \"Three\" _ ] ]\n```\n\nWhen a pattern is evaluated
  for the above test case, the available fields and variables are:\n\n    $0 = \"One.Two.Three\"\n
  \   $1 = \"One\"\n    $2 = \"Two\"\n    $3 = \"Three\"\n    NF = 3\n\nHere are some
  examples of awk expressions accepted as patterns:\n\n* `$2 == \"Two\"` â€” select
  the subgroup `Two`\n* `$2 == \"Two\" && $3 == \"Three\"`  â€” select the test or subgroup
  named `Three` in the subgroup named `Two`\n* `$2 == \"Two\" || $2 == \"Twenty-two\"`
  â€” select two subgroups\n* `$0 !~ /skip/` or `! /skip/` â€” select tests whose full
  names (including group names) do not contain the word `skip`\n* `$NF !~ /skip/`
  â€” select tests whose own names (but not group names) do not contain the word `skip`\n*
  `$(NF-1) ~ /QuickCheck/` â€” select tests whose immediate parent group name\n    contains
  `QuickCheck`\n\nAs an extension to the awk expression language, if a pattern `pat`
  contains only\nletters, digits, and characters from the set `._ -` (period, underscore,
  space, hyphen),\nit is treated like `/pat/` (and therefore matched against `$0`).\nThis
  is so that we can use `-p foo` as a shortcut for `-p /foo/`.\n\nThe only deviation
  from awk that you will likely notice is that Tasty\ndoes not implement regular expression
  matching.\nInstead, `$1 ~ /foo/` means that the string `foo` occurs somewhere in
  `$1`,\ncase-sensitively. We want to avoid a heavy dependency of `regex-tdfa` or\nsimilar
  libraries; however, if there is demand, regular expression support could\nbe added
  under a cabal flag.\n\nThe following operators are supported (in the order of decreasing
  precedence):\n\n<center>\n<table>\n<tr>\n<th>\n<p><b>Syntax</b></p>\n</th>\n<th>\n<p><b>Name</b></p>\n</th>\n<th>\n<p><b>Type
  of Result</b></p>\n</th>\n<th>\n<p><b>Associativity</b></p>\n</th>\n</tr>\n\n<tr>\n<td>\n<p><code>(expr)</code></p>\n</td>\n<td>\n<p>Grouping</p>\n</td>\n<td>\n<p>Type
  of <code>expr</code></p>\n</td>\n<td>\n<p>N/A</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>$expr</code></p>\n</td>\n<td>\n<p>Field
  reference</p>\n</td>\n<td>\n<p>String</p>\n</td>\n<td>\n<p>N/A</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>!expr</code></p>\n<p><code>-expr</code></p>\n</td>\n<td>\n<p>Logical
  not</p>\n<p>Unary minus</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>N/A</p>\n<p>N/A</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  + expr</code></p>\n<p><code>expr - expr</code></p>\n</td>\n<td>\n<p>Addition</p>\n<p>Subtraction</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>Left</p>\n<p>Left</p>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<p><code>expr
  expr</code></p>\n</td>\n<td>\n<p>String concatenation</p>\n</td>\n<td>\n<p>String</p>\n</td>\n<td>\n<p>Right</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  &lt; expr</code></p>\n<p><code>expr &lt;= expr</code></p>\n<p><code>expr != expr</code></p>\n<p><code>expr
  == expr</code></p>\n<p><code>expr &gt; expr</code></p>\n<p><code>expr &gt;= expr</code></p>\n</td>\n<td>\n<p>Less
  than</p>\n<p>Less than or equal to</p>\n<p>Not equal to</p>\n<p>Equal to</p>\n<p>Greater
  than</p>\n<p>Greater than or equal to</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n<p>None</p>\n</td>\n</tr>\n\n\n<tr>\n<td>\n<p><code>expr
  ~ pat</code></p>\n<p><code>expr !~ pat</code></p>\n<p>(<code>pat</code> must be
  a literal, not an expression, e.g. <code>/foo/</code>)</p>\n</td>\n<td>\n<p>Substring
  match</p>\n<p>No substring match</p>\n</td>\n<td>\n<p>Numeric</p>\n<p>Numeric</p>\n</td>\n<td>\n<p>None</p>\n<p>None</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  &amp;&amp; expr</code></p>\n</td>\n<td>\n<p>Logical AND</p>\n</td>\n<td>\n<p>Numeric</p>\n</td>\n<td>\n<p>Left</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr
  || expr</code></p>\n</td>\n<td>\n<p>Logical OR</p>\n</td>\n<td>\n<p>Numeric</p>\n</td>\n<td>\n<p>Left</p>\n</td>\n</tr>\n\n<tr>\n<td>\n<p><code>expr1
  ? expr2 : expr3</code></p>\n</td>\n<td>\n<p>Conditional expression</p>\n</td>\n<td>\n<p>Type
  of selected<br><code>expr2</code> or <code>expr3</code></p>\n</td>\n<td>\n<p>Right</p>\n</td>\n</tr>\n\n</table>\n</center>\n\nThe
  following built-in functions are supported:\n\n```\nsubstr(s,Â m[,Â n])\n```\nReturn
  the at most `n`-character substring of `s` that begins at\nposition `m`, numbering
  from 1. If `n` is omitted, or if `n` specifies\nmore characters than are left in
  the string, the length of the substring\nwill be limited by the length of the string
  `s`.\n\n```\ntolower(s)\n```\n\nConvert the string `s` to lower case.\n\n```\ntoupper(s)\n```\n\nConvert
  the string `s` to upper case.\n\n```\nmatch(s, pat)\n```\n\nReturn the position,
  in characters, numbering from 1, in string `s` where the\npattern `pat` occurs,
  or zero if it does not occur at all.\n`pat` must be a literal, not an expression,
  e.g. `/foo/`.\n\n```\nlength([s])\n```\n\nReturn the length, in characters, of its
  argument taken as a string, or of the whole record, `$0`, if there is no argument.\n\n###
  Running tests in parallel\n\nIn order to run tests in parallel, you have to do the
  following:\n\n* Compile (or, more precisely, *link*) your test program with the
  `-threaded`\n  flag;\n* Launch the program with `+RTS -N -RTS`.\n\n### Timeout\n\nTo
  apply timeout to individual tests, use the `--timeout` (or `-t`) command-line\noption,
  or set the option in your test suite using the `mkTimeout` function.\n\nTimeouts
  can be fractional, and can be optionally followed by a suffix `ms`\n(milliseconds),
  `s` (seconds), `m` (minutes), or `h` (hours). When there's no\nsuffix, seconds are
  assumed.\n\nExample:\n\n    ./test --timeout=0.5m\n\nsets a 30 seconds timeout for
  each individual test.\n\n### Options controlling console output\n\nThe following
  options control behavior of the standard console interface:\n\n<dl>\n<dt><code>-q,--quiet</code></dt>\n<dd>\n
  \ Run the tests but don't output anything. The result is indicated only by the\n
  \ exit code, which is 1 if at least one test has failed, and 0 if all tests\n  have
  passed. Execution stops when the first failure is detected, so not all\n  tests
  are necessarily run.\n  This may be useful for various batch systems, such as commit
  hooks.\n</dd>\n<dt><code>--hide-successes</code></dt>\n<dd>Report only the tests
  that has failed. Especially useful when the\nnumber of tests is large.</dd>\n<dt><code>-l,--list-tests</code></dt>\n<dd>Don't
  run the tests; only list their names, in the format accepted by\n<code>--pattern</code>.</dd>\n<dt><code>--color</code></dt>\n<dd>Whether
  to produce colorful output. Accepted values: <code>never</code>,\n<code>always</code>,
  <code>auto</code>. <code>auto</code> means that colors will\nonly be enabled when
  output goes to a terminal and is the default value.</dd>\n</dl>\n\n### Custom options\n\nIt
  is possible to add custom options, too.\n\nTo do that,\n\n1. Define a datatype to
  represent the option, and make it an instance of\n   `IsOption`\n2. Register the
  options with the `includingOptions` ingredient\n3. To query the option value, use
  `askOption`.\n\nSee the [Custom options in Tasty][custom-options-article] article
  for some examples.\n\n## Project organization and integration with Cabal\n\nThere
  may be several ways to organize your project. What follows is not\nTasty's requirements
  but my recommendations.\n\n### Tests for a library\n\nPlace your test suite sources
  in a dedicated subdirectory (called `tests`\nhere) instead of putting them among
  the main library sources.\n\nThe directory structure will be as follows:\n\n    my-project/\n
  \     my-project.cabal\n      src/\n        ...\n      tests/\n        test.hs\n
  \       Mod1.hs\n        Mod2.hs\n        ...\n\n`test.hs` is where your `main`
  function is defined. The tests may be\ncontained in `test.hs` or spread across multiple
  modules (`Mod1.hs`, `Mod2.hs`,\n...) which are then imported by `test.hs`.\n\nAdd
  the following section to the cabal file (`my-project.cabal`):\n\n    test-suite
  test\n      default-language:\n        Haskell2010\n      type:\n        exitcode-stdio-1.0\n
  \     hs-source-dirs:\n        tests\n      main-is:\n        test.hs\n      build-depends:\n
  \         base >= 4 && < 5\n        , tasty >= 0.7 -- insert the current version
  here\n        , my-project   -- depend on the library we're testing\n        , ...\n\n###
  Tests for a program\n\nAll the above applies, except you can't depend on the library
  if there's no\nlibrary. You have two options:\n\n* Re-organize the project into
  a library and a program, so that both the\n  program and the test suite depend on
  this new library. The library can be\n  declared in the same cabal file.\n* Add
  your program sources directory to the `Hs-source-dirs`. Note that this\n  will lead
  to double compilation (once for the program and once for the test\n  suite).\n\n##
  Dependencies\n\nTasty executes tests in parallel to make them finish faster.\nIf
  this parallelism is not desirable, you can declare *dependencies* between\ntests,
  so that one test will not start until certain other tests finish.\n\nDependencies
  are declared using the `after` combinator:\n\n* `after AllFinish \"pattern\" my_tests`
  will execute the test tree `my_tests` only after all\n    tests that match the pattern
  finish.\n* `after AllSucceed \"pattern\" my_tests` will execute the test tree `my_tests`
  only after all\n    tests that match the pattern finish **and** only if they all
  succeed. If at\n    least one dependency fails, then `my_tests` will be skipped.\n\nThe
  relevant types are:\n\n``` haskell\nafter\n  :: DependencyType -- ^ whether to run
  the tests even if some of the dependencies fail\n  -> String         -- ^ the pattern\n
  \ -> TestTree       -- ^ the subtree that depends on other tests\n  -> TestTree
  \      -- ^ the subtree annotated with dependency information\n\ndata DependencyType
  = AllSucceed | AllFinish\n```\n\nThe pattern follows the same AWK-like syntax and
  semantics as described in\n[Patterns](#patterns). There is also a variant named
  `after_` that accepts the\nAST of the pattern instead of a textual representation.\n\nLet's
  consider some typical examples. (A note about terminology: here\nby \"resource\"
  I mean anything stateful and external to the test: it could be a file,\na database
  record, or even a value stored in an `IORef` that's shared among\ntests. The resource
  may or may not be managed by `withResource`.)\n\n1. Two tests, Test A and Test B,
  access the same shared resource and cannot be\n   run concurrently. To achieve this,
  make Test A a dependency of Test B:\n\n   ``` haskell\n   testGroup \"Tests accessing
  the same resource\"\n     [ testCase \"Test A\" $ ...\n     , after AllFinish \"Test
  A\" $\n         testCase \"Test B\" $ ...\n     ]\n   ```\n\n1. Test A creates a
  resource and Test B uses that resource. Like above, we make\n   Test A a dependency
  of Test B, except now we don't want to run Test B if Test\n   A failed because the
  resource may not have been set up properly. So we use\n   `AllSucceed` instead of
  `AllFinish`\n\n   ``` haskell\n   testGroup \"Tests creating and using a resource\"\n
  \    [ testCase \"Test A\" $ ...\n     , after AllSucceed \"Test A\" $\n         testCase
  \"Test B\" $ ...\n     ]\n   ```\n\nHere are some caveats to keep in mind regarding
  dependencies in Tasty:\n\n1. If Test B depends on Test A, remember that either of
  them may be filtered out\n   using the `--pattern` option. Collecting the dependency
  info happens *after*\n   filtering. Therefore, if Test A is filtered out, Test B
  will run\n   unconditionally, and if Test B is filtered out, it simply won't run.\n1.
  Tasty does not currently check whether the pattern in a dependency matches\n   anything
  at all, so make sure your patterns are correct and do not contain\n   typos. Fortunately,
  misspecified dependencies usually lead to test failures\n   and so can be detected
  that way.\n1. Dependencies shouldn't form a cycle, otherwise Tasty with fail with
  the\n   message \"Test dependencies form a loop.\" A common cause of this is a test\n
  \  matching its own dependency pattern.\n1. Using dependencies may introduce quadratic
  complexity. Specifically,\n   resolving dependencies is *O(number_of_tests Ã— number_of_dependencies)*,\n
  \  since each pattern has to be matched against each test name. As a guideline,\n
  \  if you have up to 1000 tests, the overhead will be negligible, but if you\n   have
  thousands of tests or more, then you probably shouldn't have more than a\n   few
  dependencies.\n\n   Additionally, it is recommended that the dependencies follow
  the\n   natural order of tests, i.e. that the later tests in the test tree depend
  on\n   the earlier ones and not vice versa. If the execution order mandated by the\n
  \  dependencies is sufficiently different from the natural order of tests in the\n
  \  test tree, searching for the next test to execute may also have an\n   overhead
  quadratic in the number of tests.\n\n\n## FAQ\n\n1.  **Q**: When my tests write
  to stdout/stderr, the output is garbled. Why is that and\n    what do I do?\n\n
  \   **A**: It is not recommended that you print anything to the console when using
  the\n    console test reporter (which is the default one).\n    See [#103](https://github.com/UnkindPartition/tasty/issues/103)
  for the\n    discussion.\n\n    Some ideas on how to work around this:\n\n    *
  Use [testCaseSteps](https://hackage.haskell.org/package/tasty-hunit/docs/Test-Tasty-HUnit.html#v:testCaseSteps)
  (for tasty-hunit only).\n    * Use a test reporter that does not print to the console
  (like tasty-ant-xml).\n    * Write your output to files instead.\n\n2.  **Q**: Why
  doesn't the `--hide-successes` option work properly? The test headings\n    show
  up and/or the output appears garbled.\n\n    **A**: This can happen sometimes when
  the terminal is narrower than the\n    output. A workaround is to disable ANSI tricks:
  pass `--ansi-tricks=false`\n    on the command line or set `TASTY_ANSI_TRICKS=false`
  in the environment.\n\n    See [issue #152](https://github.com/UnkindPartition/tasty/issues/152).\n\n3.
  **Q**: Patterns with slashes do not work on Windows. How can I fix it?\n  \n   **A**:
  If you are running Git for Windows terminal, it has a habit of converting slashes
  \n   to backslashes. Set `MSYS_NO_PATHCONV=1` to prevent this behaviour, or follow
  other \n   suggestions from [Known Issues](https://github.com/git-for-windows/build-extra/blob/main/ReleaseNotes.md#known-issues).\n
  \  \n## Press\n\nBlog posts and other publications related to tasty. If you wrote
  or just found\nsomething not mentioned here, send a pull request!\n\n* [Holy Haskell
  Project Starter](https://yannesposito.com/Scratch/en/blog/Holy-Haskell-Starter/)\n*
  [First time testing, also with FP Complete](https://levischuck.com/posts/2013-11-13-first-testing-and-fpcomplete.html)\n
  \ (tasty has been added to stackage since then)\n* [24 Days of Hackage: tasty](https://ocharles.org.uk/blog/posts/2013-12-03-24-days-of-hackage-tasty.html)\n*
  [Resources in Tasty](https://ro-che.info/articles/2013-12-10-tasty-resources)\n*
  [Custom options in Tasty][custom-options-article]\n* [Resources in Tasty (update)](https://ro-che.info/articles/2013-12-29-tasty-resources-2)\n*
  [Announcing tasty-rerun](https://ocharles.org.uk/blog/posts/2014-01-20-announcing-tasty-rerun.html)\n*
  [Code testing in Haskell revisited (with Tasty)](http://ics.p.lodz.pl/~stolarek/blog/2014/01/code-testing-in-haskell-revisited-with-tasty/)\n*
  [New patterns in tasty][awk-patterns-article]\n* [Screencast: Dynamic Test Suites
  in Haskell using Hspec and Tasty](https://www.youtube.com/watch?v=PGsDvgmZF7A)\n*
  [Automatically generated directories for tasty tests][tasty-directories]\n\n[custom-options-article]:
  https://ro-che.info/articles/2013-12-20-tasty-custom-options.html\n[awk-patterns-article]:
  https://ro-che.info/articles/2018-01-08-tasty-new-patterns\n[tasty-directories]:
  https://nmattia.com/posts/2018-04-30-tasty-test-names.html\n\n## GHC version support
  policy\n\nWe only support the GHC/base versions [from the last 5 years](https://wiki.haskell.org/Base_package#Versions).\n\nMaintainers\n-----------\n\n[Roman
  Cheplyaka](https://github.com/UnkindPartition) is the primary maintainer.\n\n[Oliver
  Charles](https://github.com/ocharles) is the backup maintainer. Please\nget in touch
  with him if the primary maintainer cannot be reached.\n"
license-name: MIT
