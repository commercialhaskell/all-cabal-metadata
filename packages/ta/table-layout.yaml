homepage: https://github.com/muesli4/table-layout
changelog-type: markdown
hash: dc135515fac3c91bed5e628df0f4297ed91aff5e7388f6ddaf5be4b08cd6d557
test-bench-deps:
  doclayout: '>=0.3 && <0.5'
  base: '>=4.9 && <4.19'
  data-default-class: '>=0.1.2 && <0.2'
  hspec: -any
  text: -any
  HUnit: '>=1.3'
  QuickCheck: '>=2.8 && <2.15'
maintainer: muesli4@gmail.com
synopsis: Format tabular data as grid or table.
changelog: |+
  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).

  ## [Unreleased]

  ## [1.0.0.0] - 2023-11-17

  This release would not have been possible without the tireless work of Stephen
  Morgan.

  ### Added

  - Add `asciiDoubleS` table style.
  - Add combinators for removing outer borders of tables.
  - Provide general versions of grid and table functions that generate output for
    `StringBuilder` instances.
  - Add dependency to `doclayout` and `text`.
  - Add `WideString` and `WideText` to support multi-width character input. (#8)
  - Custom vertical separators can now be specified in the table header
    specification in a hierarchic manner.
  - Add simplified table style specification with `LineStyle` and many new
    combinators.
  - Add `Cell` instance for `Data.Text`, `Data.Either`, `Data.Maybe`.
  - Add versions of functions for tables and grids that return `ColModInfo`s.
  - Provide functions to work with `Formatted`.
  - Add safe versions of the `trim` function. (#35)
  - Add `expandBetween` `LenSpec` which provides a lower and an upper bound for
    the width of a column. (#35)
  - Add explicit defaults for data types (#26).
  - Provide more functions to derive `ColModInfo`.
  - Add `TableSpec` to specify tables.

  ### Changed

  - Changed version bounds of `base`, `QuickCheck`, and `data-default-class`.
  - Remove dependency on `data-default-instances-base`.
  - Improve performance of Cell and StringBuilder instances
  - Generalize `Formatted` to provide nested color formatting. (#11)
  - Change `TableStyle` to use `String` as basic building blocks of tables. (#17)
  - Add more separator types to `TableStyle`.
  - Accept arbitrary instances of `Cell` as header titles.
  - Lower requirements for `Cell` instances:  Cells no longer need to be able to
    drop characters.
  - Drop `Monoid` requirement for vertical alignment.
  - Rendering functions for tables now use `TableSpec`.
  - Renamed functions to derive `ColModInfo`.


  ### Fixed

  - Fix recently introduced errors which made text justification completely
    unusable.  Add test coverage for relevant functions. (#15)

  ## [0.9.0.2] - 2020-12-20

  ### Fixed

  - Fix error in `fitWords` that was reversing the word order.  This also affects
    `justify` and `justifyWords`. (#14)

  ## [0.9.0.1] - 2020-06-14

  ### Added

  - Provide functions for concatenation `concatRow`, `concatLines`, and
    `concatGrid`. (#10)

  ### Fixed

  - Fix an error with `applyCutInfo` that created a string of wrong length in
    case the cut mark was of unequal length and the view was outside of the cell.


  ## [0.9.0.0] - 2020-04-10

  ### Added

  - Add `Text.Layout.Table.Cell.Formatted`. A `Cell` instance is provided that
    enables formatting text correctly with inline text formatting commands.
  - Add helpers to generate tables for Pandoc in the module
    `Text.Layout.Table.Pandoc`.
  - Add `Cell` type class: This enables using different input string types.
  - Add `StringBuilder` type class. This enables generating output in different
    ways.
  - Add test case for left-biased trim.

  ### Changed

  - Change input type of a lot of functions to use the `Cell` type class. This
    might break some code but will require only a type annotation to fix.
  - Rework and simplify formatting functions with `Cell` and `StringBuilder`. This
    includes improvements in test coverage.
  - Reorganize module structure:
      * Modules of types used for specification do now start with
        `Text.Layout.Table.Spec.`.
      * Move a lot of the code in `Text.Layout.Table` into sub-modules.

  ### Fixed

  - Fix an error with text justification for lines that contain only one word and
    add a test case. (#6)
  - Fix an error where cut marks where applied wrongly on the right side.

basic-deps:
  doclayout: '>=0.3 && <0.5'
  base: '>=4.9 && <4.19'
  data-default-class: '>=0.1.2 && <0.2'
  text: -any
all-versions:
- 0.5.1.1
- 0.5.2.0
- 0.6.0.0
- 0.6.0.1
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.0.2
- 0.8.0.3
- 0.8.0.4
- 0.8.0.5
- 0.9.0.0
- 0.9.0.1
- 0.9.1.0
- 1.0.0.0
author: Moritz Bruder
latest: 1.0.0.0
description-type: markdown
description: "# table-layout [![Hackage version](https://img.shields.io/hackage/v/table-layout.svg?label=Hackage)](https://hackage.haskell.org/package/table-layout)\n\nThis
  package can be used to render character-based table layouts which should be displayed
  with monospace fonts.\n\n## Purpose\n\nThe focus of this library lies on rendering
  cells with different styles per column:\n* Columns can be fixed in size or expanding
  to make content fit.\n* Whenever content has to be cut, it is possible to indicate
  this with special strings, which are called cut marks.\n* Columns can be positionally
  aligned as `left`, `right` or `center`.\n* Columns may also be aligned at certain
  character occurence with respect to the other cells of that column. One such purpose
  is to display floating point numbers.\n\nThose specifications are then applied to
  a list of rows. A row is simply a list of a cell. A cell is a type that implements
  the `Cell` type class.\n\nTypically cells are rendered as a grid, but it is also
  possible to render tables with simulated lines, including styling support. Such
  tables can use optional headers and multiple lines per cell. Multi-line content
  can be aligned vertically, with respect to the other horizontally adjacent cells,
  and text can be rendered justified.\n\n## Tutorial\n\n### Grids\n\nRender some text
  rows as grid:\n``` hs\n> let g = [[\"top left\", \"top right\"], [\"bottom left\",
  \"bottom right\"]]\n> putStrLn $ gridString [column expand left def def, column
  expand right def def] g\n```\n`gridString` will join cells with a whitespace and
  rows with a newline character. The result is not spectacular but does look as expected:\n```\ntop
  left       top right\nbottom left bottom right\n```\nThere are sensible default
  values for all column specification types, even for columns. We could have used
  just `def` for the first column.\n\n### Number Columns\n\nAdditionally some common
  types are provided. A particularly useful one is `numCol`:\n``` hs\n> import Numeric\n>
  let toRow d = [showFFloat Nothing d \"\"]\n> mapM_ putStrLn $ gridLines [numCol]
  $ toRow <$> [1.2, 100.5, 0.037, 5000.00001]\n```\nThis will display the given numbers
  as a dot-aligned single column:\n```\n   1.2    \n 100.5    \n   0.037\n5000.00001\n```\n\n###
  Improving Readability of Grids\n\nBig grids are usually not that readable. To improve
  their readability, two functions are provided:\n\n* `altLines` will apply the given
  function in an alternating pattern. E.g., color every second row grey.\n* `checkeredCells`
  will checker cells with 2 different functions.\n\nA good way to use this would be
  the [ansi-terminal package][], provided you are using a terminal to output your
  text. Another way to introduce color into cells is the `Formatted` type:\n```\n>
  :set -XOverloadedStrings\n> import Text.Layout.Table.Cell.Formatted\n> import System.Console.ANSI.Codes\n>
  let red s = formatted (setSGRCode [SetColor Foreground Dull Red]) (plain s) (setSGRCode
  [Reset])\n> let g = [[\"Jim\", \"1203\"], [\"Jane\", \"523\"], [\"Jack\", red \"-959000\"]]\n>
  putStrLn $ gridString [def, numCol] g\n```\nThis way the color can depend on the
  cell content.\n\n### Tables\n\nFor more complex data, grids do not offer as much
  visibility. Sometimes we want to explicitly display a table, for example, as output
  in a database application. `tableLines` and `tableString` are used to create a table.\n\n```
  hs\n> let t = headerlessTableS [def , numCol] unicodeRoundS [rowG [\"Jack\", \"184.74\"],
  rowG [\"Jane\", \"162.2\"]]\n> putStrLn $ tableString t\n```\nA row group is a group
  of rows which are not visually separated from each other. Thus multiple rows form
  one cell.\n\nIn addition we specify the style and an optional header. By default
  the header is not visible. This will yield the following result:\n```\n╭──────┬────────╮\n│
  Jack │ 184.74 │\n├──────┼────────┤\n│ Jane │ 162.2  │\n╰──────┴────────╯\n```\n\n###
  Table Headers\n\nOptionally we can use table headers. `titlesH` will center titles,
  whereas `fullH` allows more control:\n\n``` hs\n> let cs = [fixedLeftCol 10, column
  (fixed 10) center dotAlign def]\n> let h = (titlesH [\"Text\", \"Number\"])\n> let
  rgs = [rowG [\"A very long text\", \"0.42000000\"], rowG [\"Short text\", \"100200.5\"]]\n>
  let t = columnHeaderTableS cs unicodeS h rgs\n> putStrLn $ tableString t\n```\nHeaders
  are always displayed with a different style than the other columns (centered by
  default). A maximum column width is respected, otherwise a header may acquire additional
  space.\n```\n┌────────────┬────────────┐\n│    Text    │   Number   │\n╞════════════╪════════════╡\n│
  A very lo… │   0.42000… │\n├────────────┼────────────┤\n│ Short text │ …00.5      │\n└────────────┴────────────┘\n```\n###
  Vertical positioning and justified text\nBecause a row group consists of multiple
  lines, we may also want to align the content of cells vertically, especially when
  we do not know how many lines there will be.  The following piece of code will display
  a left-justified text alongside the length of the text:\n``` hs\n> let txt = \"Lorem
  ipsum ...\" \n> let rgs = [colsAllG center [justifyText 50 txt, [show $ length txt]]]\n>
  let cs = [fixedLeftCol 50, numCol]\n> let h = titlesH [\"Text\", \"Length\"]\n>
  let t = columnHeaderTableS cs asciiS h rgs\n> putStrLn $ tableString t\n```\n`colsAllG`
  will merge the given columns into a row group with the given positioning:\n```\n+----------------------------------------------------+--------+\n|
  \                       Text                        | Length |\n+----------------------------------------------------+--------+\n|
  Lorem  ipsum dolor sit amet, consectetur adipisici |        |\n| elit,  sed eiusmod
  \ tempor incidunt  ut labore  et |        |\n| dolore magna aliqua. Ut enim ad minim
  veniam, quis |        |\n| nostrud   exercitation  ullamco  laboris  nisi  ut |
  \       |\n| aliquid  ex ea  commodi consequat.  Quis aute iure |    429 |\n| reprehenderit
  \  in  voluptate  velit  esse  cillum |        |\n| dolore  eu fugiat  nulla pariatur.
  \ Excepteur sint |        |\n| obcaecat cupiditat non proident, sunt in culpa qui
  |        |\n| officia deserunt mollit anim id est laborum.       |        |\n+----------------------------------------------------+--------+\n```\nAdditionally,
  the positioning can be specified for each column with `colsG`.  For grids `colsAsRows`
  and `colsAsRowsAll` are provided.\n\n## Contact\n\n* Please report issues and suggestions
  to the GitHub page.\n* Any kind of feedback is welcome.\n* Contributions are much
  appreciated. Contact me first for bigger changes.\n\n[ansi-terminal package]: http://hackage.haskell.org/package/ansi-terminal\n"
license-name: BSD-3-Clause
