homepage: https://whetstone.private.storage/PrivateStorage/tahoe-directory
changelog-type: markdown
hash: a9f959d311825b932e7045c5bda3bc97735a98b0c96b0cd2406caaa95c96ed38
test-bench-deps:
  bytestring: '>=0.10.8.2 && <0.11'
  base: '>=4 && <5.0'
  tasty-hedgehog: '>=1.0.0.2 && <1.2'
  text: '>=1.2.3.1 && <1.3'
  megaparsec: '>=8.0 && <9.3'
  tahoe-directory: -any
  hedgehog: '>=1.0.3 && <1.1'
  tahoe-capabilities: '>=0.1 && <0.2'
  tasty-hunit: '>=0.10.0.2 && <0.11'
  tasty: '>=1.2.3 && <1.5'
maintainer: exarkun@twistedmatrix.com
synopsis: Tahoe-LAFS directory-like abstraction for collections of data objects.
changelog: |
  # Revision history for tahoe-directory

  ## 0.1.0.0 -- 2023-08-17

  * First version. Released on an unsuspecting world.
  * Support for parsing and serializing CHK and SDMF directory capability strings.
  * Support for parsing and serializing directories
    (lists of name, capability, metadata tuples).
basic-deps:
  bytestring: '>=0.10.8.2 && <0.11'
  base: '>=4 && <5.0'
  text: '>=1.2.3.1 && <1.3'
  megaparsec: '>=8.0 && <9.3'
  tahoe-ssk: '>=0.2.1.0 && <0.4'
  tahoe-capabilities: '>=0.1 && <0.2'
  tahoe-chk: '>=0.1 && <0.3'
all-versions:
- 0.1.0.0
author: Jean-Paul Calderone and others
latest: 0.1.0.0
description-type: markdown
description: |
  # tahoe-directory

  ## What is it?

  Tahoe-Directory is a Haskell implementation of the [Tahoe-LAFS](https://tahoe-lafs.org/) filesystem directory-like abstraction for managing collections of data objects.
  This includes a parser and serializer for the persisted form of these collections.
  It also includes Haskell-friendly abstract representations of and operations on the data.
  It aims for bit-for-bit compatibility with the original Python implementation.

  It will not include an implementation of any network protocol for transferring directories.
  However, its APIs are intended to be easy to integrate with such an implementation.

  ### What is the current state?

  * Verify and read CHK directory capability strings can be parsed and serialized.
  * Verify, read, and write SDMF directory capability strings can be parsed and serialized.
  * Directories themselves can be parsed and serialized.
    * However, capability strings and metadata in directory entries are left as byte strings.

  ## Why does it exist?

  A Haskell implementation can be used in places the original Python implementation cannot be
  (for example, runtime environments where it is difficult to have a Python interpreter).
  Additionally,
  with the benefit of the experience gained from creating and maintaining the Python implementation,
  a number of implementation decisions can be made differently to produce a more efficient, more flexible, simpler implementation and API.
  Also,
  the Python implementation claims no public library API for users outside of the Tahoe-LAFS project itself.
license-name: BSD-3-Clause
