all-versions:
- '0.8'
- 0.8.1
- 0.8.2
author: Daniel Lyons
basic-deps:
  base: <5
  parsec: <4
  xhtml: '>=0'
changelog: ''
changelog-type: ''
description: "tablify - a simple utility for formatting CSV files.\nby Daniel Lyons
  <fusion@storytotell.org>\n\nWhat it does:\n\n Tablify is a simple program which
  does nothing but parse CSV files and render\n them into various display-friendly
  formats. I spend a fair amount of my time\n dealing with data migration and sometimes
  it's handy to look at the data\n directly or publish it in such a fashion as other
  people may find it\n convenient.\n\n Tablify does not understand every possible
  CSV format; I took the CSV code\n from the book Real World Haskell. I am not particularly
  interested in adding\n support for other varieties of CSV because this parser seems
  to handle the\n common cases and generally if you are getting something else, it's
  because \n you asked for something weird. Please let me know if this is not the
  case for \n you.\n\n A major rationale for this application was that I noticed that
  there are some\n nice characters in the Unicode standard for drawing boxes. I used
  to draw\n boxes for text files like this:\n\n +--------------+-----+\n | Name         |
  Age |\n +--------------+-----+\n | Daniel Lyons | 28  |\n | Reid Givens  | 29  |\n
  +--------------+-----+\n\n This works OK (it's what MySQL and PostgreSQL's command
  line clients do,\n after all.) But how much cooler does this look:\n\n ┌──────────────┬─────┐\n
  │ name         │ age │\n ├──────────────┼─────┤\n │ Daniel Lyons │ 28  │\n │ Reid
  Givens  │ 29  │\n └──────────────┴─────┘\n\n If you have a nice Unicode font like
  Menlo on your machine, that should look\n freaking awesome. This is what you get
  using the -U flag. If you want the old\n fugly ASCII table, use -A.\n\n Anyway,
  it occurred to me while writing it that I could quite easily support\n a few other
  formats, so I wrote an HTML output routine and a TBL output\n routine, TBL being
  part of troff or groff depending on your system.\n\n The HTML output routine escapes
  HTML entities (<, > and &). I expect if you\n actually use TBL you will want to
  tinker with what it gives you. I haven't\n embellished the system with any justification
  alternatives besides left\n justification; this is really only an issue for the
  Unicode output option.\n\n The program assumes that your input and your output are
  both UTF-8. There are\n utilities you can use such as iconv to fix files coming
  in or going out if\n that's not your situation. You may specify many files on the
  command line, or\n - if you want it to read from standard input.\n\n Enjoy!\n\nDependencies:\n\n
  • GHC (Glasgow Haskell Compiler) — http://www.haskell.org/ghc/\n • utf8-string library
  — http://hackage.haskell.org/package/utf8-string\n\nThese are generally included
  with GHC:\n\n • parsec\n • regex-compat\n • haskell98\n\nBuilding:\n\n Run these
  three commands ($ represents your shell's prompt):\n\n $ runhaskell Setup.hs configure\n
  $ runhaskell Setup.hs build\n $ sudo runhaskell Setup.hs install\n\n Alternatively,
  if you have the cabal utility installed, you can run:\n\n $ cabal configure\n $
  cabal build\n $ cabal install\n\nContacting me:\n\n If you run into any bugs or
  think of a feature you'd like me to add, please\n email me at fusion@storytotell.org
  and tell me about it.\n"
description-type: text
hash: bf75570f49a0bcf1f5cd4d972873f581b2b4707b292c6b7c538886e4bf1cb35e
homepage: http://www.storytotell.org/code/tablify
latest: 0.8.2
license-name: BSD-3-Clause
maintainer: Daniel Lyons <fusion@storytotell.org>
synopsis: Tool to render CSV into tables of various formats
test-bench-deps: {}
