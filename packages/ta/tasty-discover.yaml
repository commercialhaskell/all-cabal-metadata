all-versions:
- 1.0.0
- 1.0.1
- 1.1.0
- 2.0.0
- 2.0.1
- 2.0.2
- 2.0.3
- 3.0.0
- 3.0.1
- 3.0.2
- 4.0.0
- 4.1.0
- 4.1.1
- 4.1.2
- 4.1.3
- 4.1.4
- 4.1.5
- 4.2.0
- 4.2.1
- 4.2.2
- 4.2.3
- 4.2.4
- 5.0.0
- 5.0.1
- 5.0.2
- 5.1.0
- 5.2.0
author: Luke Murphy
basic-deps:
  Glob: '>=0.8 && <1.0'
  ansi-terminal: '>=1.0 && <2.0'
  base: '>=4.11 && <5'
  containers: '>=0.4 && <1.0'
  directory: '>=1.1 && <2.0'
  filepath: '>=1.3 && <2.0'
  tasty: '>=1.3 && <2.0'
  tasty-discover: '>=0'
changelog: |
  # Change Log

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog] and this project adheres to
  [Semantic Versioning].

  [Keep a Changelog]: http://keepachangelog.com/
  [Semantic Versioning]: http://semver.org/

  ## [Unreleased]

  ### Added

  ### Fixed

  ### Changed

  ### Removed

  # 5.2.0 [2025-10-25]

  ### Added
  - `applySkips` function for skipping entire test trees with individual test visibility
    - Traverses test trees and replaces tests with skipped placeholders
    - Shows each test as `[SKIPPED]` in yellow when skip condition is met
    - Useful for platform-specific test suites with `Flavored (IO TestTree)`
    - Preserves test group structure while showing which tests would run
  - Comprehensive platform expression tests covering all operators and edge cases
    - Added tests for `!darwin`, `!mingw32`, `!unix` negations
    - Added tests for complex AND/OR expressions
    - Added tests for edge cases like unknown platforms (freebsd)

  ### Changed
  - Migrated release process to tag-triggered workflow
    - Release workflow now triggers when version tags (e.g., v5.2.0) are pushed
    - Removed automatic tag creation from CI
    - Updated release documentation to reflect tag-based process
  - `--inplace` option now only overwrites file if content has changed
    - Prevents unnecessary file modification timestamps
    - Reduces build system churn when generated file is identical

  # 5.1.0 [2025-08-10]

  ### Added
  - Assertion newtype wrapper for HUnit-style assertions with comprehensive documentation and examples (see #74)
  - Platform-specific test examples and documentation showing skip/platform usage (see #69)
  - Support for GHC 9.12.2 in tested configurations (see #53)
  - Reproduction test for symlink crash issue (see #38)
  - New `--no-main` option for generating modules without main function (see #54)
  - Support for custom tests with `Tasty` instances using `tasty_` prefix
  - New `TastyInfo` type providing access to test metadata in custom tests
  - **`Flavored` type**: General-purpose mechanism for transforming `TestTree`s generated by `tasty_` functions
    - Allows applying transformations like skipping, timeouts, metadata, grouping, etc.
    - Extensible design with `flavoring :: TestTree -> TestTree` transformation function
    - Integrates seamlessly with custom test types through `Tasty` instances
  - **Skip test functionality**: Added `SkipTest` option type and `skip` function
    - `SkipTest` newtype with `IsOption` instance for Tasty options
    - `skip :: TestTree -> TestTree` function to skip any test tree
    - Skipped tests show as `[SKIPPED]` in yellow in test output
    - Works with `Flavored` type for advanced skip patterns
  - Comprehensive documentation for all test type variations
  - Step-by-step testing support for HUnit tests
  - IO-based test generation for TestTrees
  - AI development guidelines in AI_GUIDELINES.md
  - Comprehensive coding style guide in CODING_STYLE.md
  - Multiline block comment handling in test discovery (resolves #10)

  ### Fixed
  - Fixed backup file import generation bug - prevents `.hs.orig` and `.hs.bak` files from being processed (see #58)
  - Fixed directory handling in glob patterns - directories are now filtered out when using `--modules` flag (resolves #12)
  - Fixed HLint warnings in generated code
  - Fixed warnings in Generator.hs and added Unsafe.hs module
  - Fixed broken links in documentation
  - Fixed test discovery incorrectly finding tests inside `{- -}` block comments (resolves #10)

  ### Changed
  - Enhanced documentation for skip and platform guidance (see #72)
  - Cleaned up cabal file configuration
  - Improved test discovery patterns from `*.hs*` to `*.hs` to avoid backup files
  - Enhanced documentation with more test type examples
  - Added regression tests for backup file handling and directory filtering
  - Added preprocessing step to remove block comments before test discovery
  - Enhanced test discovery with proper nested block comment support

  ### Removed
  - Removed `project.sh` build script

  # 5.0.0 [2022-07-08]

  - Fix tasty-hedgehog `testProperty` deprecation warning

  # 4.2.4 [2022-05-22]

  - Support for custom test libraries
  - Version module
  - Deduplicate imports in generated code
  - Rename library directory to src
  - Move existing library modules to Test.Discover.Internal

  # 4.2.3 [2022-05-21]

  - Added `--search-dir DIR` option
  - Adds an `--in-place` flag to write the generated driver to the source file.

  # 4.2.1 [2018-06-06]

  ## Changed
  - Migrated source code hosting to https://git.coop/lwm/tasty-discover.

  # 4.2.0 [2018-03-03]

  ## Fixed
  - Actually support `scprop_` prefixed SmallCheck test cases (see issue [#140]).

  [#140]: https://github.com/lwm/tasty-discover/issues/140

  # 4.1.5 [2018-02-26]

  ## Fixed
  - Fixed multi-byte string issue (see pull request [#138]).

  [#138]: https://github.com/lwm/tasty-discover/pull/138

  # 4.1.4 [2018-02-25]

  ## Added
  - Windows OS continuous integration build (see pull request [#136]).

  ## Fixed
  - Test failure related to path handling on Windows OS (see pull request [#136]).
  - Resolved upstream tasty-hedgehog nightly blocking issue (see issue [#131]).

  [#136]: https://github.com/lwm/tasty-discover/pull/136
  [#131]: https://github.com/lwm/tasty-discover/issues/131

  # 4.1.3 [2018-01-01]

  ## Fixed
  - Re-enable on Stackage due to tasty/tasty-hedgehog failure (see issue [#132]).

  [#132]: https://github.com/lwm/tasty-discover/pull/132

  # 4.1.2 [2017-12-19]

  ## Fixed
  - Escaping issues for the Windows platform (see issue [#124]).

  [#124]: https://github.com/lwm/tasty-discover/issues/124

  # 4.1.1 [2017-09-26]

  ## Fixed
  - Incorrect test case doing bad comparison (see issue [#123]).

  [#123]: https://github.com/lwm/tasty-discover/issues/123

  # 4.1.0 [2017-09-26]

  ## Fixed
  - Find tests recursively in test directory. (see pull request [#122]).

  ## Added
  - Add ability to override tasty arguments (see pull request [#120]).

  [#120]: https://github.com/lwm/tasty-discover/pull/120
  [#122]: https://github.com/lwm/tasty-discover/pull/122

  # 4.0.0 [2017-09-01]

  ## Changed
  - Deprecated `--[no-]module-suffix` for `--modules` (see pull request [#117]).
  - Deprecated `--ignore-module` for `--ignores` (see pull request [#117]).

  ## Added
  - `tasty-hedgehog` is now a supported test library.

  ## Removed
  - `case_` prefixes have been removed.

  [#117]: https://github.com/lwm/tasty-discover/pull/117

  # 3.0.2 [2017-06-05]

  ### Fixed
  - Make upper bounds for dependencies looser.
  - Fix typo in README.md option documentation.

  ### Remove
  - Remove TOC, the hyperlinks weren't working on Hackage.

  # 3.0.1 [2017-06-04]

  ### Fixed
  - Fixed CHANGELOG.md rendering for Hackage (see pull request [#106]).

  ### Added
  - Add missing --tree-display documentation note (see pull request [#107]).

  [#107]: https://github.com/lwm/tasty-discover/pull/107
  [#106]: https://github.com/lwm/tasty-discover/pull/106

  # 3.0.0 [2017-06-03]

  ### Added
  - Add --tree-display configuration option (see pull request [#103]).

  ### Changed
  - Deprecate `case_` in favour of `unit_` for HUnit test cases (see pull request [#97]).

  ### Fixed
  - Correctly handle sub-directories when using --no-module-suffix (see pull request [#102]).

  [#97]: https://github.com/lwm/tasty-discover/pull/97
  [#102]: https://github.com/lwm/tasty-discover/pull/102
  [#103]: https://github.com/lwm/tasty-discover/pull/103

  # 2.0.3 [2017-04-13]

  ### Fixed
  - Make the Cabal description more clear for Hackage.

  # 2.0.2 [2017-04-13]

  ### Added
  - README.md and CHANGELOG.md included for Hackage (see pull request [#96]).
  - Re-add stylish-haskell automated checking (see pull request [#88]).

  [#88]: https://github.com/lwm/tasty-discover/pull/88
  [#96]: https://github.com/lwm/tasty-discover/pull/96

  ## 2.0.1 [2017-03-18]

  ### Fixed
  - Fix flaky test comparison (see pull request [#86]).

  [#86]: https://github.com/lwm/tasty-discover/pull/86

  ### Removed
  - Remove the Test.Tasty.Type module (see pull request [#83]).

  [#83]: https://github.com/lwm/tasty-discover/pull/83

  ## 2.0.0 [2017-03-15]

  ### Added
  - Add new hpack format.
  - Add generator style test discovery from tasty-auto.
  - Add new configuration options: debug, ingredients and module name.
  - Add unit tests for all functionality.

  ### Fixed
  - Re-license to MIT.

  ### Removed
  - RTD documentation.
  - TemplateHaskell dependency
  - Example project and integration test project.

  ### Changed
  - Move all tests into test folder.

  ## 1.1.0 [2017-01-19]

  ### Added
  - Add --ignore-module configuration option.

  ## 1.0.1 [2017-11-13]

  ### Added
  - Add Cabal and Documentation testing on Travis CI.

  ### Fixed
  - Include missing extra-source-files.
  - Slim down LICENSE.md and mark as GPL-3 in Cabal file.

  ## 1.0.0 [2016-11-04]

  ### Added
  - Add documentation on RTD.
  - Release on Hackage and Stackage.

  ## 0.0.3 [2016-09-20]

  ### Added
  - --no-module-suffix configuration option.

  ## 0.0.2 [2016-02-20]

  ### Added
  - --module-suffix configuration option.

  ## 0.0.1 [2016-02-13]

  - tasty-discover initial release.
changelog-type: markdown
description: "[![CircleCI](https://circleci.com/gh/haskell-works/tasty-discover/tree/master.svg?style=svg)](https://circleci.com/gh/haskell-works/tasty-discover/tree/master)\n[![tasty-discover-nightly](http://stackage.org/package/tasty-discover/badge/nightly)](http://stackage.org/nightly/package/tasty-discover)\n[![tasty-discover-lts](http://stackage.org/package/tasty-discover/badge/lts)](http://stackage.org/lts/package/tasty-discover)\n[![Hackage
  Status](https://img.shields.io/hackage/v/tasty-discover.svg)](http://hackage.haskell.org/package/tasty-discover)\n[![GitHub
  license](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://raw.githubusercontent.com/haskell-works/tasty-discover/main/LICENSE)\n\n#
  tasty-discover\n\n- [Getting Started](#getting-started)\n  * [Create Test Driver
  File](#create-test-driver-file)\n  * [Configure Cabal or Hpack Test Suite](#configure-cabal-or-hpack-test-suite)\n-
  [Write Tests](#write-tests)\n  * [Test Transformations (Flavored, skip, platform)](#test-transformations-flavored-skip-platform)\n
  \   - [Flavored (test transformations)](#flavored-test-transformations)\n    - [Skipping
  Tests](#skipping-tests)\n    - [Platform-Specific Tests](#platform-specific-tests)\n
  \   - [Combining skip and platform](#combining-skip-and-platform)\n    - [Using
  skip and platform (guidelines)](#using-skip-and-platform-guidelines)\n  * [Comment
  Handling](#comment-handling)\n- [Customise Discovery](#customise-discovery)\n  *
  [No Arguments](#no-arguments)\n  * [With Arguments](#with-arguments)\n  * [Custom
  Main Function](#custom-main-function)\n- [Example Project](#example-project)\n-
  [Change Log](#change-log)\n- [Deprecation Policy](#deprecation-policy)\n- [Contributing](#contributing)\n-
  [FAQ](#frequently-asked-questions)\n- [Maintenance](#maintenance)\n- [Releasing](#releasing)\n-
  [Acknowledgements](#acknowledgements)\n- [AI Guidelines](AI_GUIDELINES.md)\n- [Coding
  Style](CODING_STYLE.md)\n\nHaskell auto-magic test discovery and runner for the
  [tasty test framework].\n\n[tasty test framework]: https://github.com/feuerbach/tasty\n\nPrefix
  your test case names and `tasty-discover` will discover, collect and run\nthem.
  All popular Haskell test libraries are covered. Configure once then just\nwrite
  your tests. Remember to add your test modules to your Cabal/Hpack\nfiles. Tasty
  ingredients are included along with various configuration options\nfor different
  use cases.\n\n**Recent improvements include:**\n- New `--no-main` option for custom
  test runners\n- **Platform-specific test filtering** with `platform` function and
  logical expressions\n- **Skip test functionality** with `skip` function and yellow
  `[SKIPPED]` output\n- **`Flavored` type** for general-purpose test transformations
  with extensible design\n- Enhanced support for custom test types with `Tasty` instances\n-
  Better handling of backup files and directories in test discovery\n- Intelligent
  block comment handling to prevent false test discovery\n- Comprehensive documentation
  with more test examples\n\nSee below for full documentation and examples.\n\n# Getting
  Started\n\nThere are 4 simple steps:\n\n  1. [Create a test driver file in the test
  directory](#create-test-driver-file)\n  2. [Mark the driver file as the `main-is`
  in the test suite](#configure-cabal-or-hpack-test-suite)\n  3. [Mark tests with
  the correct prefixes](#write-tests)\n  4. [Customise test discovery as needed](#customise-discovery)\n\nCheck
  out the [example project](#example-project) to get moving quickly.\n\n## Create
  Test Driver File\n\nYou can name this file anything you want but it must contain
  the correct\npreprocessor definition for `tasty-discover` to run and to detect the\nconfiguration.
  It should be at the top level of the test directory.\n\nFor example (in `test/Driver.hs`):\n\n```\n{-#
  OPTIONS_GHC -F -pgmF tasty-discover #-}\n```\nfollowing example, the test driver
  file is called `Driver.hs`:\n\n```\ntest-suite test\n  type: exitcode-stdio-1.0\n
  \ main-is: Driver.hs\n  hs-source-dirs: test\n  build-depends: base\n```\n\nIf you
  use [hpack], that might look like:\n\n[hpack]: https://github.com/sol/hpack\n\n```
  yaml\ntests:\n  test:\n    main: \"Driver.hs\"\n    source-dirs: \"test\"\n    dependencies:\n
  \   - \"base\"\n```\n\nTo ensure that `tasty-discover` is available even without
  installation, add this\nto the test suite in your cabal file:\n\n```\n  build-tool-depends:\n
  \   tasty-discover:tasty-discover\n```\n\nSee [`hpack` documentation](https://github.com/sol/hpack)
  for `stack` equivalent.\n\n# Write Tests\n\nCreate test modules and prefix the test
  function name with an identifier that\ncorresponds to the testing library you wish
  to run the test with:\n\n  - **prop_**: [QuickCheck](http://hackage.haskell.org/package/tasty-quickcheck)
  properties.\n  - **scprop_**: [SmallCheck](http://hackage.haskell.org/package/tasty-smallcheck)
  properties.\n  - **hprop_**: [Hedgehog](http://hackage.haskell.org/package/tasty-hedgehog)
  properties.\n  - **unit_**: [HUnit](http://hackage.haskell.org/package/tasty-hunit)
  test cases.\n  - **spec_**: [Hspec](http://hackage.haskell.org/package/tasty-hspec)
  specifications.\n  - **test_**: [Tasty](http://hackage.haskell.org/package/tasty)
  TestTrees.\n  - **tasty_**: Custom tests with [Tasty](http://hackage.haskell.org/package/tasty)
  instances.\n\nHere is an example test module with a bunch of different tests:\n\n```
  haskell\n{-# LANGUAGE ScopedTypeVariables #-}\n\nmodule ExampleTest where\n\nimport
  Data.List\nimport Test.Tasty\nimport Test.Tasty.Discover\nimport Test.Tasty.HUnit\nimport
  Test.Tasty.Hspec\nimport Test.Tasty.QuickCheck\nimport Test.Tasty.SmallCheck\nimport
  qualified Test.Tasty.Hedgehog as TH\nimport qualified Hedgehog as H\nimport qualified
  Hedgehog.Gen as G\nimport qualified Hedgehog.Range as R\n\n-- HUnit test case\nunit_listCompare
  :: IO ()\nunit_listCompare = [1, 2, 3] `compare` [1,2] @?= GT\n\n-- HUnit test case
  with additional info\nunit_listInfo :: IO String\nunit_listInfo = return \"This
  test provides info\"\n\n-- HUnit test case with steps\nunit_listSteps :: (String
  -> IO ()) -> IO ()\nunit_listSteps step = do\n  step \"Setting up test data\"\n
  \ step \"Running the test\"\n  [1, 2, 3] `compare` [1,2] @?= GT\n\n-- QuickCheck
  property\nprop_additionCommutative :: Int -> Int -> Bool\nprop_additionCommutative
  a b = a + b == b + a\n\n-- SmallCheck property\nscprop_sortReverse :: [Int] -> Bool\nscprop_sortReverse
  list = sort list == sort (reverse list)\n\n-- Hedgehog property\nhprop_reverseReverse
  :: H.Property\nhprop_reverseReverse = H.property $ do\n  xs <- H.forAll $ G.list
  (R.linear 0 100) G.alpha\n  reverse (reverse xs) H.=== xs\n\n-- Hspec specification\nspec_prelude
  :: Spec\nspec_prelude = describe \"Prelude.head\" $ do\n  it \"returns the first
  element of a list\" $ do\n    head [23 ..] `shouldBe` (23 :: Int)\n\n-- Simple Tasty
  TestTree\ntest_addition :: TestTree\ntest_addition = testProperty \"Addition commutes\"
  $ \\(a :: Int) (b :: Int) -> a + b == b + a\n\n-- List of Tasty TestTrees\ntest_multiplication
  :: [TestTree]\ntest_multiplication =\n  [ testProperty \"Multiplication commutes\"
  $ \\(a :: Int) (b :: Int) -> a * b == b * a\n  , testProperty \"One is identity\"
  $ \\(a :: Int) -> a * 1 == a\n  ]\n\n-- IO Tasty TestTree\ntest_generateTree ::
  IO TestTree\ntest_generateTree = do\n  input <- pure \"Some input\"\n  pure $ testCase
  input $ pure ()\n\n-- IO List of Tasty TestTrees\ntest_generateTrees :: IO [TestTree]\ntest_generateTrees
  = do\n  inputs <- pure [\"First input\", \"Second input\"]\n  pure $ map (\\s ->
  testCase s $ pure ()) inputs\n\n-- Custom test with Tasty instance\n--\n-- Write
  a test for anything with a Tasty instance\n-- In order to use Flavored with tasty_
  functions, add tasty-discover as a library\n-- dependency to your test component
  in the cabal file.\n\ndata CustomTest = CustomTest String Assertion\n\ninstance
  Tasty CustomTest where\n  tasty info (CustomTest prefix act) =\n    pure $ testCase
  (prefix ++ descriptionOf info) act\n\ntasty_myTest :: CustomTest\ntasty_myTest =
  CustomTest \"Custom: \" $ pure ()\n\n-- Custom Tasty TestTree (can be any TestTree)\ntasty_customGroup
  :: TestTree\ntasty_customGroup = testGroup \"Custom Test Group\"\n  [ testCase \"nested
  test 1\" $ return ()\n  , testCase \"nested test 2\" $ (1 + 1) @?= (2 :: Int)\n
  \ ]\n```\n\n## Test Transformations (Flavored, skip, platform)\n\nThis section covers
  how to transform tests using the Flavored pattern and how to apply skip and platform
  filters effectively.\n\n### Flavored (test transformations)\n\nThe `Flavored` type
  provides a general-purpose mechanism for transforming `TestTree`s generated by `tasty_`
  functions before they are added to the test suite. This allows you to apply various
  options and modifications to your tests.\n\nYou can create flavored tests using
  the `flavored` constructor:\n\n```haskell\nflavored :: (TestTree -> TestTree) ->
  a -> Flavored a\n```\n\n#### Examples\n\n```haskell\nimport Test.Tasty.Discover
  (Flavored, flavored, skip)\n\n-- Skip a custom property test\ntasty_skipProperty
  :: Flavored Property\ntasty_skipProperty = flavored skip $ property $ do\n  -- This
  test will be skipped and show as [SKIPPED] in yellow\n  H.failure\n```\n\nWhen tests
  are skipped, they will show as `[SKIPPED]` in yellow in the test output and won't
  actually execute.\n\n### Skipping Tests\n\nYou can skip tests using the skip functionality
  provided by tasty-discover. There are multiple ways to skip tests:\n\nFor a high-level
  overview of when to use flavored vs direct application, see\n[Using skip and platform
  (guidelines)](#using-skip-and-platform-guidelines).\n\n#### Using the `skip` function\n\nYou
  can use the `skip` function to skip any TestTree:\n\n```haskell\nimport Test.Tasty.Discover
  (skip)\n\n-- Skip a simple test\ntest_skipThis :: TestTree\ntest_skipThis = skip
  $ testCase \"this will be skipped\" $ pure ()\n\n-- Skip a property test\nprop_skipThis
  :: Property -> TestTree\nprop_skipThis p = skip $ testProperty \"skipped property\"
  p\n```\n\n**Potential future uses:**\nThe `Flavored` mechanism is designed to be
  extensible and could be used for other `TestTree` transformations such as:\n- Setting
  test timeouts\n- Adding test metadata or descriptions\n- Grouping tests under custom
  names\n- Setting resource dependencies\n- Applying multiple transformations in sequence\n\n####
  Important: How to skip a tasty_ test\n\nGuideline (TL;DR): To skip a `tasty_` test
  so it shows `[SKIPPED]` and doesn’t run, wrap it with `flavored skip`:\n\n```haskell\nimport
  Test.Tasty.Discover (Flavored, flavored, skip)\n\n-- Skips at the TestTree level
  (preferred for tasty_ tests)\ntasty_mySkipped :: Flavored TestTree\ntasty_mySkipped
  = flavored skip $ testCase \"will be skipped\" $ pure ()\n```\n\nDetails (why this
  matters): Applying `skip` directly to an already-constructed\n`TestTree` marks only
  that subtree as skipped. The test body can detect it via\n`askOption`, but the outer
  `Tasty` instance (used by `tasty_` functions) may not\nrender a top-level `[SKIPPED]`
  placeholder because the option is applied after\nthe instance decides how to wrap
  the node. Using `flavored skip` applies the\ntransformation early so the instance
  can short-circuit and substitute a skipped\nplaceholder.\n\nFor completeness, a
  direct `skip` example that observes the option inside the test:\n\n```haskell\n--
  Direct skip on a TestTree: the test can read SkipTest via askOption, but the\n--
  outer instance may not show a top-level [SKIPPED] marker for this node.\ntest_directSkip
  :: TestTree\ntest_directSkip = skip $ askOption $ \\(TD.SkipTest shouldSkip) ->\n
  \ testCase \"observes SkipTest inside\" $ assertBool \"expected SkipTest\" shouldSkip\n```\n\nUsing
  `Flavored` ensures the `skip` is visible to the `Tasty` instance early enough to
  short-circuit with a skipped placeholder.\n\n```\n\n### Platform-Specific Tests\n\nYou
  can conditionally run tests based on the current operating platform using the `platform`
  function provided by tasty-discover. This is useful for tests that only work on
  specific operating systems or need to be excluded from certain platforms.\n\nFor
  general guidance and composition patterns with `skip`, see\n[Using skip and platform
  (guidelines)](#using-skip-and-platform-guidelines).\n\nThe `platform` function takes
  a platform expression string and a `TestTree`, returning a `TestTree` that will
  only run if the expression evaluates to true for the current platform:\n\n```haskell\nimport
  Test.Tasty.Discover (platform)\n\n-- Run only on Linux\ntasty_linuxOnly :: TestTree\ntasty_linuxOnly
  = platform \"linux\" $ testCase \"Linux-specific functionality\" $ do\n  -- This
  test only runs on Linux\n  pure ()\n\n-- Run on all platforms except Windows  \ntasty_notWindows
  :: TestTree  \ntasty_notWindows = platform \"!windows\" $ testCase \"Non-Windows
  functionality\" $ do\n  -- This test runs on all platforms except Windows\n  pure
  ()\n\n-- Run on Unix-like systems (Linux or Darwin)\ntasty_unixLike :: TestTree\ntasty_unixLike
  = platform \"unix\" $ testCase \"Unix-like systems\" $ do\n  -- This test runs on
  Linux and Darwin (Unix-like systems)\n  pure ()\n```\n\n#### Platform Expression
  Syntax\n\nPlatform expressions support the following syntax:\n\n**Platform Names:**\n-
  `\"linux\"` - Linux systems\n- `\"darwin\"` - macOS systems \n- `\"windows\"` -
  Windows systems (mapped to \"mingw32\" internally)\n- `\"mingw32\"` - Windows systems
  (actual System.Info.os value)\n- `\"unix\"` - Unix-like systems (matches both \"linux\"
  and \"darwin\")\n\n**Logical Operators:**\n- `\"!\"` (NOT) - Negation, e.g., `\"!windows\"`
  means \"not Windows\"\n- `\"&\"` (AND) - Conjunction, e.g., `\"!windows & !darwin\"`
  means \"neither Windows nor Darwin\"\n- `\"|\"` (OR) - Disjunction, e.g., `\"linux
  | darwin\"` means \"Linux or Darwin\"\n\n**Complex Examples:**\n```haskell\n-- Run
  on platforms that are neither Windows nor Darwin (e.g., Linux)\ntasty_complexPlatform1
  :: TestTree\ntasty_complexPlatform1 = platform \"!windows & !darwin\" $ testCase
  \"Neither Windows nor Darwin\" $ do\n  pure ()\n\n-- Run on either Linux or Darwin,
  but not Windows\ntasty_complexPlatform2 :: TestTree\ntasty_complexPlatform2 = platform
  \"linux | darwin\" $ testCase \"Linux or Darwin only\" $ do\n  pure ()\n```\n\n####
  Using `Flavored` with Platform Filtering\n\nYou can combine platform filtering with
  other test transformations using the `Flavored` type:\n\n```haskell\nimport Test.Tasty.Discover
  (Flavored, flavored, platform)\n\n-- Apply platform filtering to custom test types\ntasty_platformFlavored
  :: Flavored TestTree\ntasty_platformFlavored = flavored (platform \"!windows\")
  $ testCase \"Advanced platform test\" $ do\n  pure ()\n\n-- Platform-specific property
  test\ntasty_platformProperty :: Flavored Property  \ntasty_platformProperty = flavored
  (platform \"unix\") $ property $ do\n  -- This hedgehog property only runs on Unix-like
  systems\n  x <- H.forAll $ G.int (R.linear 1 100)\n  x H.=== x\n```\n\n#### Combining
  skip and platform\n\nPlatform filtering can be combined with other tasty-discover
  features:\n\n```haskell\n-- Platform filtering with test skipping\ntasty_platformAndSkip
  :: TestTree\ntasty_platformAndSkip = platform \"linux\" $ skip $ testCase \"Linux
  test that's also skipped\" $ do\n  -- This would only run on Linux, but it's also
  skipped\n  pure ()\n\n-- Platform filtering with test groups\ntasty_platformGroup
  :: TestTree\ntasty_platformGroup = platform \"unix\" $ testGroup \"Unix-only tests\"\n
  \ [ testCase \"Unix test 1\" $ pure ()\n  , testCase \"Unix test 2\" $ pure ()\n
  \ , testProperty \"Unix property\" $ \\(x :: Int) -> x >= 0 || x < 0\n  ]\n```\n\nPlatform
  filtering works by checking the current platform against the expression at runtime.
  If the expression evaluates to `False`, the test is automatically skipped using
  the same mechanism as the `skip` function.\n\n#### Skipping entire test trees with
  `applySkips`\n\nWhen you want to skip an entire test tree (such as a group of tests)
  and have each individual test show as `[SKIPPED]` in the output, use the `applySkips`
  function:\n\n```haskell\nimport Test.Tasty.Discover (Flavored, flavored, platform,
  applySkips)\n\n-- Skip an entire test group on Darwin\ntasty_testTree_no_darwin
  :: Flavored (IO TestTree)\ntasty_testTree_no_darwin =\n  flavored (platform \"!darwin\")
  $ pure $\n    applySkips $ testGroup \"Non-Darwin group\"\n      [ testProperty
  \"Test 1\" $ \\(x :: Int) -> x == x\n      , testCase \"Test 2\" $ pure ()\n      ,
  testProperty \"Test 3\" $ \\(x :: Int) -> x >= 0 || x < 0\n      ]\n```\n\nOn Darwin,
  this will display all tests as skipped in yellow:\n\n```\nNon-Darwin group\n  Test
  1 [SKIPPED]: OK\n  Test 2 [SKIPPED]: OK\n  Test 3 [SKIPPED]: OK\n```\n\nThe `applySkips`
  function:\n- Checks the `SkipTest` option (set by functions like `skip` or `platform`)\n-
  Traverses the entire test tree and replaces each individual test with a skipped
  placeholder\n- Preserves the test group structure\n- Shows `[SKIPPED]` in yellow
  for each test\n\nThis is particularly useful for platform-specific test suites where
  you want to see which tests would run on other platforms, rather than hiding the
  entire group.\n\n### Using skip and platform (guidelines)\n\nTL;DR:\n- For tests
  exposed via `tasty_` functions, prefer the `Flavored` pattern to apply\n  transformations
  like `skip` and `platform` so they take effect at the TestTree level and can short-circuit
  execution.\n- Applying `skip` directly to an already-constructed `TestTree` marks
  the subtree as skipped. The test can observe this via `askOption`, but the outer
  `Tasty` instance may not show a top-level `[SKIPPED]` placeholder.\n\nExamples:\n\n```haskell\nimport
  Test.Tasty.Discover (Flavored, flavored, skip, platform)\nimport Test.Tasty (TestTree,
  testCase)\n\n-- Skip (preferred for tasty_ tests):\ntasty_mySkipped :: Flavored
  TestTree\ntasty_mySkipped = flavored skip $ testCase \"will be skipped\" $ pure
  ()\n\n-- Platform filter with Flavored:\ntasty_linuxOnly :: Flavored TestTree\ntasty_linuxOnly
  = flavored (platform \"linux\") $ testCase \"Linux only\" $ pure ()\n\n-- Compose
  platform and skip:\ntasty_linuxButSkipped :: Flavored TestTree\ntasty_linuxButSkipped
  = flavored (platform \"linux\") $ flavored skip $ testCase \"won't run\" $ pure
  ()\n\n-- Direct skip on a TestTree (observed inside the test):\ntest_directSkip
  :: TestTree\ntest_directSkip = skip $ askOption $ \\(TD.SkipTest shouldSkip) ->\n
  \ testCase \"observes SkipTest inside\" $ assertBool \"expected SkipTest\" shouldSkip\n```\n\nPlatform
  expressions:\n- Names: \"linux\", \"darwin\", \"windows\" (mapped to \"mingw32\"),
  \"mingw32\", and \"unix\" (matches both linux and darwin)\n- Operators: `!` (NOT),
  `&` (AND), `|` (OR)\n- Examples:\n  - `platform \"!windows & !darwin\"` — neither
  Windows nor Darwin\n  - `platform \"linux | darwin\"` — Linux or Darwin\n  - `platform
  \"unix\"` — Linux or Darwin\n\n## Test Type Variations\n\n### HUnit Tests (`unit_`
  prefix)\n\nThe `unit_` prefix supports three different function signatures:\n  ###
  Tasty TestTrees (`test_` prefix)\n- `unit_testName :: IO ()` - Basic test case\n-
  `unit_testName :: IO String` - Test case that provides additional info\n- `unit_testName
  :: (String -> IO ()) -> IO ()` - Test case with steps\n\n### Tasty TestTrees (`test_`
  prefix)\n\nThe `test_` prefix supports four different function signatures:\n\n-
  `test_testName :: TestTree` - A single test tree\n- `test_testName :: [TestTree]`
  - A list of test trees (automatically grouped)\n- `test_testName :: IO TestTree`
  - A test tree generated in IO\n- `test_testName :: IO [TestTree]` - A list of test
  trees generated in IO\n\n### Custom Tests (`tasty_` prefix)\n\nThe `tasty_` prefix
  works with any type that has a `Tasty` instance:\n\n- Built-in instances for `TestTree`,
  `[TestTree]`, `IO TestTree`, `IO [TestTree]`\n- Custom instances for your own data
  types\n- Provides access to test metadata through `TastyInfo`\n\n### Organizing
  Tests with `testGroup`\n\nThe `testGroup` function is Tasty's way of organizing
  tests into hierarchical groups. You can use it in several ways:\n\n**In `test_`
  functions:**\n```haskell\ntest_arithmeticTests :: TestTree\ntest_arithmeticTests
  = testGroup \"Arithmetic Operations\"\n  [ testCase \"addition\" $ 2 + 2 @?= 4\n
  \ , testCase \"multiplication\" $ 3 * 4 @?= 12\n  , testProperty \"commutativity\"
  $ \\a b -> a + b == b + (a :: Int)\n  ]\n```\n\n**In `tasty_` functions:**\n```haskell\ntasty_myTestSuite
  :: TestTree\ntasty_myTestSuite = testGroup \"My Test Suite\"\n  [ testGroup \"Unit
  Tests\"\n      [ testCase \"test 1\" $ pure ()\n      , testCase \"test 2\" $ pure
  ()\n      ]\n  , testGroup \"Properties\"\n      [ testProperty \"prop 1\" $ \\x
  -> x == (x :: Int)\n      ]\n  ]\n```\n\n**In list form with `test_` functions:**\n```haskell\ntest_groupedTests
  :: [TestTree]\ntest_groupedTests =\n  [ testGroup \"Group 1\" [testCase \"test A\"
  $ pure ()]\n  , testGroup \"Group 2\" [testCase \"test B\" $ pure ()]\n  ]\n```\n\nThis
  creates nested test hierarchies that make test output more organized and easier
  to navigate.\n\n## Comment Handling\n\n`tasty-discover` intelligently handles Haskell
  comments during test discovery to prevent false positives:\n\n### Block Comments\n\nTests
  inside multiline block comments are automatically ignored:\n\n```haskell\nmodule
  MyTest where\n\n-- This test will be discovered\nunit_validTest :: IO ()\nunit_validTest
  = pure ()\n\n{- This test will be ignored\nunit_commentedOut :: IO ()\nunit_commentedOut
  = pure ()\n-}\n\n{- Nested comments are also handled correctly\n{- Even deeply nested
  ones\nunit_deeplyNested :: IO ()\nunit_deeplyNested = pure ()\n-}\nunit_alsoIgnored
  :: IO ()\nunit_alsoIgnored = pure ()\n-}\n```\n\n### Line Comments\n\nLine comments
  (starting with `--`) are handled by the Haskell lexer and don't interfere with test
  discovery:\n\n```haskell\n-- unit_thisIsIgnored :: IO ()\nunit_thisIsFound :: IO
  ()  -- This test will be discovered\nunit_thisIsFound = pure ()\n```\n\nThis feature
  prevents compilation errors that would occur if `tasty-discover` tried to reference
  tests that are commented out, making it easier to temporarily disable tests during
  development.\n\n# Customise Discovery\n\nYou configure `tasty-discover` by passing
  options to the test driver file.\n\n## No Arguments\n\nExample: `{-# OPTIONS_GHC
  -F -pgmF tasty-discover -optF --debug #-}`\n\n  - **--debug**: Output the contents
  of the generated module while testing.\n  - **--tree-display**: Display the test
  output results hierarchically.\n  - **--no-main**: Generate a module without a main
  function, exporting `tests` and `ingredients` instead.\n\n## With Arguments\n\nExample:
  `{-# OPTIONS_GHC -F -pgmF tasty-discover -optF --modules=\"*CustomTest.hs\" #-}`\n\n
  \ - **--modules**: Which test modules to discover (with glob pattern).\n  - **--search-dir**:
  Where to look for tests. This is a directory relative\n    to the location of the
  source file. By default, this is the directory\n    of the source file.\"\n  - **--ignores**:
  Which test modules to ignore (with glob pattern).\n  - **--generated-module**: The
  name of the generated test module.\n  - **--ingredient**: Tasty ingredients to add
  to your test runner.\n  - **--inplace**: Has the generated code written to the source
  file.\n\nIt is also possible to override [tasty test options] with `-optF`:\n\n[tasty
  test options]: https://github.com/feuerbach/tasty#options\n\n``` bash\n{-# OPTIONS_GHC
  -F -pgmF tasty-discover -optF --hide-successes #-}\n```\n\n## Custom Main Function\n\nThe
  `--no-main` option allows you to write your own custom main function while still
  using tasty-discover for test discovery. This is useful when you need to:\n\n- Apply
  custom test transformations or wrappers\n- Add custom logging or output formatting\n-
  Integrate with custom test runners or CI systems\n- Control exactly how tests are
  executed\n\n### Example Usage\n\nCreate your test discovery file (e.g., `test/Tests.hs`):\n\n```haskell\n{-#
  OPTIONS_GHC -F -pgmF tasty-discover -optF --no-main -optF --generated-module -optF
  Tests #-}\n```\n\nThen create your custom main file (e.g., `test/Main.hs`):\n\n```haskell\nmodule
  Main where\n\nimport qualified Tests\nimport qualified Test.Tasty as T\n\nmain ::
  IO ()\nmain = do\n  putStrLn \"=== Custom Test Runner ===\"\n\n  -- Get discovered
  tests and ingredients\n  discoveredTests <- Tests.tests\n\n  -- Apply custom transformations\n
  \ let wrappedTests = T.testGroup \"My Custom Tests\" [discoveredTests]\n\n  -- Run
  with custom configuration\n  T.defaultMainWithIngredients Tests.ingredients wrappedTests\n```\n\nConfigure
  your cabal test suite to use the custom main:\n\n```\ntest-suite my-tests\n  type:
  exitcode-stdio-1.0\n  main-is: Main.hs\n  other-modules: Tests\n  hs-source-dirs:
  test\n  build-depends: base, tasty\n  build-tool-depends: tasty-discover:tasty-discover\n```\n\n#
  Example Project\n\nSee the [testing for this package] for a fully configured example.\n\n[testing
  for this package]: https://github.com/haskell-works/tasty-discover/tree/main/test\n\n#
  Change Log\n\nPlease see the [CHANGELOG.md] for the latest changes.\n\nWe try to
  keep [tagged releases] in our release process, if you care about that.\n\n[CHANGELOG.md]:
  https://github.com/haskell-works/tasty-discover/blob/main/CHANGELOG.md\n[tagged
  releases]: https://github.com/haskell-works/tasty-discover/releases\n\n# Releasing\n\nThis
  project's release flow is automated via GitHub Actions and triggered by pushing
  version tags.\n\nRelease checklist:\n\n1) Prepare notes\n- Update `CHANGELOG.md`:
  move items from \"Unreleased\" to a new version section with the current date.\n\n2)
  Bump version\n- Edit `tasty-discover.cabal` and set `version:` to the new version
  (e.g., `5.x.y`).\n\n3) Commit changes\n- Commit the changes: `git commit -m \"Release
  X.Y.Z\"`\n- Push the commit: `git push origin main`\n\n4) Create and push tag\n-
  Create a git tag: `git tag -a vX.Y.Z -m \"Release version X.Y.Z\"`\n- Push the tag:
  `git push origin vX.Y.Z`\n\n5) CI does the rest (automated)\n- When the tag is pushed,
  GitHub Actions automatically:\n  - Runs the full test suite\n  - Validates the cabal
  project with `cabal check`\n  - Builds source distributions (`cabal v2-sdist`)\n
  \ - Uploads to Hackage (requires repo secrets `HACKAGE_USER`/`HACKAGE_PASS`)\n  -
  Creates a draft GitHub Release for the tag\n\n6) Publish release\n- Go to https://github.com/haskell-works/tasty-discover/releases\n-
  Edit the draft GitHub Release notes if needed and publish\n\nNotes:\n- The workflow
  is defined in `.github/workflows/haskell.yml`.\n- The release workflow only triggers
  on tags matching `v[0-9]+.[0-9]+.[0-9]+` (e.g., v5.2.0).\n- Keep `tested-with` in
  the cabal file up to date with CI's GHC matrix.\n\n# Deprecation Policy\n\nIf a
  breaking change is implemented, you'll see a major version increase, an\nentry in
  the [change log] and a compile-time error with a deprecation warning\nand clear
  instructions on how to upgrade. Please do complain if we're doing\nthis too much.\n\n[change
  log]: https://github.com/haskell-works/tasty-discover/blob/main/CHANGELOG.md\n\n#
  Contributing\n\nAll contributions welcome! The continuous integration suite is pretty\ncomprehensive,
  so just get hacking and add a test case - there are *plenty* of\nexamples, so this
  should be simple - and I'll get to review your change ASAP.\n\nPlease follow the
  guidelines in [CODING_STYLE.md](CODING_STYLE.md) for consistent code formatting
  and patterns.\n\nFor AI assistants and detailed development guidelines, see [AI_GUIDELINES.md](AI_GUIDELINES.md).\n\n#
  Frequently Asked Questions\n\n## Deleting Tests Breaks The Test Run\n\nThis is a
  known limitation and has been reported. No fix is planned unless you have time.\n\nPlease
  see [#145](https://github.com/haskell-works/tasty-discover/issues/145) for more
  information.\n\n# Maintenance\n\nIf you're interested in helping maintain this package,
  please let [@newhoggy] know!\n\nIt doesn't take much time (max ~3 hours a month)
  and all we need to do is:\n\n  * Triage issues that are raised.\n  * Review pull
  requests from contributors.\n  * Fix bugs when present.\n  * Make releases.\n  *
  Manage bounds issues on Stackage.\n\nYou can [create an issue] or drop him a line
  at **lukewm AT riseup DOT NET**.\n\n[@newhoggy]: https://twitter.com/newhoggy\n[create
  an issue]: https://github.com/haskell-works/tasty-discover/issues/new\n\n# Acknowledgements\n\nThanks
  to [hspec-discover] and [tasty-auto] for making this possible.\n\nA huge thanks
  to the growing list of contributors.\n\n[hspec-discover]: https://hspec.github.io/hspec-discover.html\n[tasty-auto]:
  https://github.com/minad/tasty-auto\n"
description-type: markdown
hash: 7b628789945bdbe38f1f5e3913b4ee05707b9d17057945fa079f69706fae547c
homepage: https://github.com/haskell-works/tasty-discover
latest: 5.2.0
license-name: MIT
maintainer: John Ky <newhoggy@gmail.com>
synopsis: Test discovery for the tasty framework.
test-bench-deps:
  ansi-terminal: '>=1.0 && <2.0'
  base: '>=4.11 && <5'
  bytestring: '>=0.9 && <1.0'
  containers: '>=0.4 && <1.0'
  directory: '>=1.1 && <2.0'
  filepath: '>=1.3 && <2.0'
  hedgehog: '>=1.0 && <2.0'
  hspec: '>=2.7 && <2.12'
  hspec-core: '>=2.7.10 && <2.12'
  process: '>=1.6 && <2.0'
  tasty: '>=1.3 && <2.0'
  tasty-discover: '>=0'
  tasty-expected-failure: '>=0.12 && <0.13'
  tasty-golden: '>=2.0 && <3.0'
  tasty-hedgehog: '>=1.2 && <2.0'
  tasty-hspec: '>=1.1 && <1.3'
  tasty-hunit: '>=0.10 && <0.11'
  tasty-quickcheck: '>=0.10 && <0.11'
  tasty-smallcheck: '>=0.8 && <1.0'
  temporary: '>=1.3 && <1.4'
