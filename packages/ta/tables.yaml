all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.1.1
author: Edward A. Kmett
basic-deps:
  base: '>=4.3 && <5'
  binary: '>=0.5 && <0.8'
  cereal: '>=0.3 && <0.5'
  comonad: '>=4 && <5'
  containers: '>=0.4 && <0.6'
  deepseq: '>=1.3 && <1.5'
  hashable: '>=1.1 && <1.3'
  lens: '>=4 && <5'
  profunctors: '>=4 && <5'
  safecopy: '>=0.6.3 && <0.9'
  template-haskell: '>=2.7 && <2.11'
  transformers: '>=0.2 && <0.5'
  transformers-compat: '>=0.1 && <1'
  unordered-containers: '>=0.2 && <0.3'
changelog: |
  0.4.1.1
  ----
  * GHC 7.10 compatibility

  0.4.1
  ----

  0.4
  ----

  0.3.1
  -----
  * Improved `Setup.lhs` to work with more versions of `cabal`.
  * Internal compatibility with changes in `lens` 3.10 to `anon`.

  0.3
  ---
  * Instances for `SafeCopy`, `Binary` and `Cereal`
  * Added `insert'`

  0.2
  ---
  * Generalized Autoincrement
  * Better type inference for key types
  * More aggressive inlining

  0.1
  ---
  * Initial public release
  * Repository initialized
changelog-type: markdown
description: |
  Tables
  ======

  [![Build Status](https://secure.travis-ci.org/ekmett/tables.png?branch=master)](http://travis-ci.org/ekmett/tables)

  This package provides simple in memory data tables with multiple indices.

  Examples
  --------

  So if we load `examples/Foo.hs` into `ghci`, we start with:

  ```haskell
  >>> test
  fromList [ Foo {fooId = 1, fooBar = "One", fooBaz = 1.0}
           , Foo {fooId = 2, fooBar = "Two", fooBaz = 2.0}
           , Foo {fooId = 3, fooBar = "Three", fooBaz = 3.0}
           , Foo {fooId = 4, fooBar = "Four", fooBaz = 4.0}
           , Foo {fooId = 5, fooBar = "Five", fooBaz = 5.0} ]
  ```

  We use uppercase constructor names to match on built-in keys

  ```haskell
  >>> test ^. with FooId (<) 3
  fromList [ Foo {fooId = 1, fooBar = "One", fooBaz = 1.0}
           , Foo {fooId = 2, fooBar = "Two", fooBaz = 2.0} ]
  ```

  Then we can use any lowercase field accessor (or any other function) to do a non-keyed lookup or filter

  ```haskell
  >>> test ^. with (length . fooBar) (<=) 3
  fromList [ Foo {fooId = 1, fooBar = "One", fooBaz = 1.0}
           , Foo {fooId = 2, fooBar = "Two", fooBaz = 2.0} ]
  ```

  You can delete by assigning to that filtered table:

  ```haskell
  >>> test & with (length . fooBar) (<=) 3 .~ empty
  fromList [ Foo {fooId = 3, fooBar = "Three", fooBaz = 3.0}
           , Foo {fooId = 4, fooBar = "Four", fooBaz = 4.0}
           , Foo {fooId = 5, fooBar = "Five", fooBaz = 5.0} ]
  ```

  You can edit the actual type of the fields if the table is configured to allow it:

  ```haskell
  >>> test & rows.fooBar_ %~ length
  fromList [ Foo {fooId = 1, fooBar = 3, fooBaz = 1.0}
           , Foo {fooId = 2, fooBar = 3, fooBaz = 2.0}
           , Foo {fooId = 3, fooBar = 5, fooBaz = 3.0}
           , Foo {fooId = 4, fooBar = 4, fooBaz = 4.0}
           , Foo {fooId = 5, fooBar = 4, fooBaz = 5.0} ]
  ```

  If you edit multiple fields, the edits all take place at the same time. so we can offset or swap a bunch of keys:

  ```haskell
  >>> test & with FooId (>=) 2.rows.fooId_ +~ 1
  fromList [ Foo {fooId = 1, fooBar = "One", fooBaz = 1.0}
           , Foo {fooId = 3, fooBar = "Two", fooBaz = 2.0}
           , Foo {fooId = 4, fooBar = "Three", fooBaz = 3.0}
           , Foo {fooId = 5, fooBar = "Four", fooBaz = 4.0}
           , Foo {fooId = 6, fooBar = "Five", fooBaz = 5.0} ]
  ```

  We can do grouping by arbitrary functions or fields similarly

  ```haskell
  >>> test ^@.. group (length.fooBar)
  [ (3, fromList [ Foo {fooId = 1, fooBar = "One", fooBaz = 1.0}
                 , Foo {fooId = 2, fooBar = "Two", fooBaz = 2.0} ])
  , (4, fromList [ Foo {fooId = 4, fooBar = "Four", fooBaz = 4.0}
                 , Foo {fooId = 5, fooBar = "Five", fooBaz = 5.0} ])
  , (5, fromList [Foo {fooId = 3, fooBar = "Three", fooBaz = 3.0} ])
  ]
  ```

  Contact Information
  -------------------

  Contributions and bug reports are welcome!

  Please feel free to contact me through github or on the #haskell or #haskell-lens IRC channels on irc.freenode.net.

  -Edward Kmett
description-type: markdown
hash: bb3716d304cc07f3946ff6afe51287de1061a364e9affa8b36934fa82bb97b1e
homepage: http://github.com/ekmett/tables/
latest: 0.4.1.1
license-name: BSD-3-Clause
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: In-memory storage with multiple keys using lenses and traversals
test-bench-deps:
  base: '>=0'
  containers: '>=0'
  directory: '>=1.0'
  doctest: '>=0.9.1'
  filepath: '>=0'
  lens: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
