homepage: ''
changelog-type: markdown
hash: b608e97e66288161f1e97e8c5b2281f67b8760b8b7e19886d024fba89bfb3ff1
test-bench-deps: {}
maintainer: aikrahguzar@gmail.com
synopsis: Line oriented fast enough text search
changelog: "# Revision history for Search\n\n## 0.1.0.0 -- 2021-05-28\n\n* First version.
  Released on an unsuspecting world.\n\n## 0.1.0.1 -- 20121-05-28\n\n* Minor internal
  changes to relax bounds on bytestring. Enables building with ghc-8.10.2. \n"
basic-deps:
  microlens-th: ^>=0.4.3.9
  bytestring: '>=0.10.10 && <0.11'
  colorful-monoids: '>=0.2.1 && <0.3'
  unix: '>=2.7.2 && <2.8'
  base: '>=4.14.1 && <5'
  vector-sized: '>=1.4.3 && <1.5'
  unordered-containers: '>=0.2.13 && <0.3'
  text: ^>=1.2.4.1
  vty: ^>=5.33
  talash: -any
  intro: ^>=0.9.0.0
  ghc-compact: '>=0.1.0 && <0.3'
  containers: '>=0.6.2 && <0.7'
  vector-algorithms: ^>=0.8.0.4
  alfred-margaret: ^>=1.1.1.0
  microlens: ^>=0.4.12.0
  brick: '>=0.60 && <0.70'
  vector: ^>=0.12.3.0
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Rahguzar
latest: 0.1.0.1
description-type: haddock
description: |2-

  This library provides searching a large number of candidates against a query using a given style. Two styles are provided. The default
  is orderless style in which a match occurs if the words in the query all occur in the candidate regardless of the order of their occurrence.
  A fuzzy style is also provided in which a candidate matches if all the characters of the query occur in it in order.

  There is also a TUI searcher\/selector interface provided using a [brick](https:\/\/hackage.haskell.org\/package\/brick) app. Like an extremely
  barebones version of @fzf@ and mostly intended to be a starting point that has to be configured according to the needs or else it can be embedded into other
  applications to provide a selection interface.

  There is also a piped searcher\/seeker provided in which searcher runs in the background and can be used by a seeker communicating with it using named
  pipes.

  The is also a demo executable for both the brick app and piped version that gets the candidates for the @stdin@. Use @talash help@ for usage information.

  Some care has been taken to make the searcher performant. On my laptop searching using the tui app to search all files in my @\/usr\/local@ with
  @60K@ items, the search results appear almost instantly. Searching among about @340K@ files in @\/usr\/share@ there is some but bearable lag
  between the keypresses and the search results. While searching between @1264K@ files, that @fd@ finds from @\/@ there is a lag of a second or so
  before the results appear. The three scenarios consume about @50 MiB@ , @130 MiB@ and @500 MiB@ of memory respectively which is almost entirely due
  to the @Vector Text@ storing the candidates.

  The nice string matching interface provided by [alfred-margaret](https:\/\/hackage.haskell.org\/package\/alfred-margaret) is responsible for a
  big part of the performance. While [vector-sized](https:\/\/hackage.haskell.org\/package\/vector-sized) is responsible for most of memory
  efficieny. Performance can potentially be further improved by using all the cores but it is good enough for my typical use cases of searching among
  a few thousand or at most a few tens of thousands of candidates. As a result parallel matching is unlikely to be implemented.

  The package is lightly maintained, bugs reports are welcome but any action on them will be slow. Patches are welcome for 1. bugfixes
  2. simple performance improvements 3. Adding mouse bindings to tui 4. New search styles, especially a better fuzzy one, that matches each word in
  the query fuzzily but the words themselves can be matched in any order (I am not sure what is a sensible implementation of this).
license-name: GPL-3.0-only
