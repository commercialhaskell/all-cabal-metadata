homepage: https://github.com/aikrahguzar/talash
changelog-type: markdown
hash: 37ccd1ad13fc03891026de0e7f6e12c85cd296641393b4fb9552ed63d9de2b09
test-bench-deps: {}
maintainer: rahguzar@zohomail.eu
synopsis: Line oriented fast enough text search
changelog: "# Revision history for Search\n\n## 0.1.0.0 -- 2021-05-28\n\n* First version.
  Released on an unsuspecting world.\n\n## 0.1.0.1 -- 20121-05-28\n\n* Minor internal
  changes to relax bounds on bytestring. Enables building with ghc-8.10.2. \n\n##
  0.1.1.0 -- 20121-06-05\n\n* FileTree is now a record.\n* Some internal changes to
  get it to build on somewhat older versions of ghc. Tested with 8.2.2 \n\n## 0.1.1.1
  -- 2021-06-06\n\n* Removed the spurious dependency on containers.\n* Loosened some
  bounds on the packages.\n\n## 0.3 -- 2022-09-25\n\n* Use a new chunked interface
  which gives much better code sharing and improves performance too.\n* Various internal
  refactors. \n* A lot of documentation either outdated/doesn't exist as a result
  and needs to be revamped.\n"
basic-deps:
  bitvec: -any
  microlens-th: '>=0.4.0 && <0.5'
  bytestring: '>=0.10.8 && <0.12'
  colorful-monoids: '>=0.2.1 && <0.3'
  extra: -any
  unix: '>=2.7.2 && <2.8'
  base: '>=4.10.1 && <5'
  vector-sized: '>=1.4.0 && <1.5'
  unordered-containers: '>=0.2.9 && <0.3'
  text: ^>=2.0
  vty: '>=5.36'
  talash: -any
  ghc-compact: '>=0.1.0 && <0.3'
  containers: -any
  io-streams: -any
  mtl: -any
  vector-algorithms: ^>=0.8.0.3
  vector-th-unbox: -any
  alfred-margaret: ^>=2.0
  microlens: '>=0.4.0 && <0.5'
  brick: '>=1.0 && <1.2'
  primitive: -any
  safe: -any
  vector: ^>=0.12.1
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.1.1
- 0.3.0
author: Rahguzar
latest: 0.3.0
description-type: haddock
description: |2-

  This library provides searching a large number of candidates against a query using a given style. Two styles are provided. The default
  is orderless style in which a match occurs if the words in the query all occur in the candidate regardless of the order of their occurrence.
  A fuzzy style is also provided in which a candidate matches if all the characters of the query occur in it in order.

  There is also a TUI searcher\/selector interface provided using a [brick](https:\/\/hackage.haskell.org\/package\/brick) app. Like an extremely
  barebones version of @fzf@ and mostly intended to be a starting point that has to be configured according to the needs or else it can be embedded into other
  applications to provide a selection interface.

  There is also a piped searcher\/seeker provided in which searcher runs in the background and can be used by a seeker communicating with it using named
  pipes.

  The is also a demo executable for both the brick app and piped version that gets the candidates for the @stdin@. Use @talash help@ for usage information.

  Some care has been taken to make the searcher performant. The nice string matching interface provided by [alfred-margaret](https:\/\/hackage.haskell.org\/package\/alfred-margaret) is responsible for a
  big part of the performance. While [vector-sized](https:\/\/hackage.haskell.org\/package\/vector-sized) is responsible for most of memory
  efficieny. Performance can potentially be further improved by using all the cores but it is good enough for my typical use cases of searching among
  a few thousand or at most a few tens of thousands of candidates. As a result parallel matching is unlikely to be implemented.

  The package is lightly maintained, bugs reports are welcome but any action on them will be slow. Patches are welcome for 1. bugfixes
  2. simple performance improvements 3. Adding mouse bindings to tui 4. New search styles, especially a better fuzzy one, that matches each word in
  the query fuzzily but the words themselves can be matched in any order (I am not sure what is a sensible implementation of this).
license-name: GPL-3.0-only
