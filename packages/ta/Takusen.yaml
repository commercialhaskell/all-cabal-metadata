all-versions:
- '0.7'
- '0.8'
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.8.7
author: Alistair Bayley, Oleg Kiselyov
basic-deps:
  base: '>=4 && <5'
  mtl: '>=0'
  old-time: '>=0'
  time: '>=0'
changelog: ''
changelog-type: ''
description: "Installing\r\n----------\r\nPrerequisites: GHC >= 6.6, Cabal >= 1.6,
  filepath\r\n\r\nNote that on Windows you will require cabal-1.6.0.2 for ghc-6.6,\r\nas
  there is a bug in cabal-1.6.0.1 which breaks it on ghc-6.6 on Windows.\r\ncabal-1.6.0.1,
  which is bundled with ghc-6.10, is fine for ghc-6.8 and later.\r\n\r\n(It was possible
  to use Takusen with GHC-6.4; see notes in separate section\r\nbelow.)\r\n\r\nTo
  run or build Setup.hs you will need filepath installed.\r\nThis is only needed by
  Setup.hs, and is not required by Takusen itself.\r\nfilepath comes with ghc-6.8
  and later, but is a separate download and\r\ninstall for ghc-6.6.\r\n\r\nEnsure
  that the database libraries for any particular database you plan\r\nto use are in
  your path e.g. ensure that %ORACLE_HOME%\\bin is in your path.\r\nIf the library
  is not in your path, then the buildtools won't be found,\r\nand the configure will
  fail.\r\n\r\nThe installation uses Cabal configurations. Each of the backends is\r\nenabled
  by a flag, and the flags are all False by default. If you want\r\nto enable a particular
  backend, you must enable its flag with -f\r\ne.g. Setup configure -fodbc -foracle
  -fpostgres -fsqlite\r\n\r\nTypical build, after unzipping the distribution archive
  (Takusen-?.?.gz):\r\n  $ ghc --make Setup\r\n  $ Setup configure -fodbc -foracle
  -fpostgres -fsqlite\r\n  $ Setup build\r\n  $ Setup install\r\n\r\nTypical build,
  using darcs to get latest code:\r\n  $ mkdir takusen\r\n  $ cd takusen\r\n  $ darcs
  get http://darcs.haskell.org/takusen\r\n  $ ghc --make Setup\r\n  $ Setup configure
  -fodbc -foracle -fpostgres -fsqlite\r\n  $ Setup build\r\n  $ Setup install\r\n\r\nIt
  may be that you also need to specify library or include dirs in the\r\nsetup configure
  step. For example, the Oracle Instant Client on Linux\r\nputs header files in a
  different location from normal i.e. not under\r\n$ORACLE_HOME. In that case you
  will have to use --extra-include-dirs=...,\r\nand possibly --extra-lib-dirs=...,
  in the configure step.\r\n\r\nSetup under ghc-6.6 expects the sqlite.h header file
  to be in the same\r\nlocation as sqlite3.exe. You can get sqlite3.h from the sqlite
  source bundle,\r\nand rename to sqlite.h.\r\n  \r\n\r\n\r\nUsing i.e. Writing data
  access code\r\n-----------------------------------\r\nThere are extensive instructions
  and examples in the Haddock docs\r\nfor module Database.Enumerator:\r\n\r\nhttp://hackage.haskell.org/packages/archive/Takusen/0.8.6/doc/html/Database-Enumerator.html\r\n\r\nThis
  should give you most, if not all, of the information you need to\r\ncreate a program
  that uses Takusen.\r\n\r\nHere's a little hello-world test case that uses Sqlite:\r\n\r\n{-#
  LANGUAGE ScopedTypeVariables #-}\r\nmodule Main where\r\nimport Database.Sqlite.Enumerator\r\nimport
  Control.Monad.Trans (liftIO)\r\nmain = flip catchDB reportRethrow $\r\n  withSession
  (connect \"sqlite_db\") (do\r\n    let iter (s::String) (_::String) = result s\r\n
  \   result <- doQuery (sql \"select 'Hello world.'\") iter \"\"\r\n    liftIO (putStrLn
  result)\r\n    )\r\n\r\nIf this is Main.hs, then\r\n  $ ghc --make Main -o hello\r\nshould
  build a \"hello\" executable.\r\n\r\n\r\n\r\nPaths, GHCi & runhaskell\r\n------------------------\r\nJust
  as with ensuring that your path is correctly set when building Takusen,\r\nyou must
  also ensure it is correctly set when building your programs.\r\nIf it is not correct,
  then you are likely to see linker errors.\r\n\r\nThe Cabal build script (Setup.hs)
  looks for various executables\r\non your path, in order to configure, or validate
  the configuration.\r\nFor example:\r\n - the Oracle configuration checks that sqlplus
  is available before continuing\r\n - The PostgreSQL configuration uses the pg_config
  program to get the library\r\n   and include directory locations.\r\n\r\nIf you
  install a new back-end, you will need to re-run the installation\r\nprocess to be
  able to use it.\r\n\r\n\r\n\r\nPostgreSQL gotchas on Windows\r\n-----------------------------\r\nThe
  PostgreSQL client library is called libpq.dll on Windows, rather than\r\nthe more
  typical pq.dll. This is fine when using ghc to compile, as gnu ld\r\nis able to
  figure out that this is the library to use when you pass it -lpq,\r\nbut ghci is
  not quite so slick, and it fails to load the library.\r\n\r\nThere is any easy workaround,
  which is to copy libpq.dll and rename it to\r\npq.dll. If you do this, then you
  should be able to use ghci with PostgreSQL\r\nwithout problems. Don't forget to
  ensure that PostgreSQL's bin is in your path.\r\n\r\nIn the past I've had problems
  with older versions of PostgreSQL and\r\nghc-6.4.1. Specifically, the call to PQprepare
  would segfault.\r\nThis occured with C programs (i.e. no Haskell) compiled with
  the gcc\r\nand ld that came with ghc-6.4.1. If ld (version 2.15.91) was replaced\r\nwith
  an older one (2.13.91) from MSYS then the test program worked.\r\n\r\nWith PostgreSQL
  8.1.5.1 and ghc-6.6 (gcc 3.4.5 (mingw special)\r\nand ld 2.15.94) this problem seems
  to have vanished.\r\n\r\n\r\n\r\nOracle gotchas on Windows\r\n-------------------------\r\nSome
  users have reported linker errors because their Oracle bin contains\r\nhsbase.dll,
  which is an Oracle library related to Heterogenous Services.\r\nThis DLL overrides
  GHC's HSbase.dll, and therefore causes linker errors.\r\n\r\nIf you can control
  your Oracle client installation then either\r\n - don't choose Heterogenous Services
  when you install,\r\n   or re-run the installer and remove it, or\r\n - rename hsbase.dll
  in Oracle bin.\r\n\r\n\r\n\r\nGHC-6.4 and Takusen\r\n-------------------\r\nIt was
  possible to use Takusen with GHC-6.4.\r\nWe no longer test this configuration, so
  you may need to do some work\r\nit you want to go down this path.\r\n\r\nYou will
  need to install Data.Time, which is quite a chore on Windows\r\nbecause of the dependencies.
  You will also need MSYS installed in order\r\nto be able to run autoreconf, so get
  that out of the way first.\r\n\r\nThe summary for Windows is:\r\n\r\ndarcs get --partial
  http://www-users.cs.york.ac.uk/~ndm/filepath/\r\n(or download and unzip the prepared
  distribution)\r\nnormal cabal configure, build, install\r\n\r\ndarcs get --partial
  http://www.cse.unsw.edu.au/~dons/code/fps\r\n(or download and unzip the prepared
  distribution)\r\nnormal cabal configure, build, install\r\n\r\ndarcs get http://darcs.haskell.org/packages/Win32\r\nEdit
  Win32.cabal, add fps to build-depends.\r\nnormal cabal configure, build, install\r\n\r\ndarcs
  get http://semantic.org/TimeLib/TimeLib\r\nThere are two packages here: time and
  fixed. Ignore time.\r\nGo into fixed and do cabal configure, build, install\r\n\r\ndarcs
  get http://darcs.haskell.org/packages/time\r\nEdit time.cabal, add fixed and Win32
  to build-depends.\r\ncreate Setup.hs:\r\n  import Distribution.Simple\r\n  main
  = defaultMainWithHooks defaultUserHooks\r\nFrom MSYS shell, not Windows cmd.exe:\r\n
  \ $ autoreconf\r\n  $ ghc --make Setup\r\n  $ Setup configure\r\n  $ Setup build\r\n
  \ $ Setup install\r\n\r\nAnd finally, build Takusen with the normal cabal configure,\r\nbuild,
  install.\r\n"
description-type: text
hash: 21bfa99f1c128966a64e835bcfe770a3f1624d91fd81f329bb79ee411182cf9c
homepage: ''
latest: 0.8.7
license-name: BSD-3-Clause
maintainer: dagit@codersbase.com, alistair@abayley.org, oleg@pobox.com
synopsis: Database library with left-fold interface, for PostgreSQL, Oracle, SQLite,
  ODBC.
test-bench-deps: {}
