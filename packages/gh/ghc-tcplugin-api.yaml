homepage: https://github.com/sheaf/ghc-tcplugin-api
changelog-type: markdown
hash: 6ba733814e0ae7c04272984f3568e604e002f431e9ee4d889c976783e1f596e1
test-bench-deps: {}
maintainer: Sam Derbyshire
synopsis: An API for type-checker plugins.
changelog: "\r\n# Version 0.7.1.0 (2022-01-04)\r\n\r\n- `newWanted` now always uses
  the `CtLoc` information that it is provided with,\r\n  as opposed to obtaining some
  information from the monadic environment.\r\n  This means you no longer need to
  wrap calls to `newWanted` in `setCtLocM`\r\n  to ensure that GHC reports the correct
  source span when reporting unsolved\r\n  Wanteds in error messages.\r\n\r\n- Remove
  the `newDerived` function, as Derived constraints are going to be\r\n  removed from
  GHC.\r\n\r\n# Version 0.7.0.0 (2021-12-31)\r\n\r\n- Re-export functions for dealing
  with type-level literals,\r\n  such as `mkNumLitTy` and `isStrLitTy`.\r\n\r\n- Re-export
  functions for splitting apart type applications, such as\r\n  `splitAppTy_maybe`
  and `tyConAppTyCon_maybe`.\r\n\r\n- Redefine and re-export `mkUncheckedIntExpr`
  for GHC versions prior to 9.0.\r\n\r\n- Re-export some basic types from `GHC.Types.Basic`
  such as `Arity`,\r\n  `PromotionFlag` and `Boxity`.\r\n\r\n- Re-export `GHC.Builtin.Names`
  and `GHC.Builin.Types.Prim`.\r\n\r\n- Provide `MonadThings` instances for `TcPluginM`
  monads.\r\n\r\n# Version 0.6.1.0 (2021-12-13)\r\n\r\n- Re-export various useful
  types and functions to deal with type and coercion variables.\r\n\r\n- Re-export
  a few types and functions to deal with source locations.\r\n\r\n- Remove some re-exports
  for constructing function types, as not all functions make sense\r\n  across all
  GHC versions supported by the library.\r\n\r\n- Re-export `panic` and `pprPanic`.\r\n\r\n#
  Version 0.6.0.0 (2021-12-13)\r\n\r\n- Add support for GHC 8.8.\r\n\r\n- Re-export
  `evDataConApp`, which is useful for constructing typeclass dictionaries.\r\n\r\n#
  Version 0.5.1.0 (2021-08-31)\r\n\r\n- Fix a bug in the type-family rewriting compatibility
  layer (GHC 8.10, 9.0, 9.2)\r\n  by correctly downgrading the coercion used to cast
  the evidence, when necessary.\r\n\r\n# Version 0.5.0.0 (2021-08-30)\r\n\r\n- Re-export
  some additional types and functions that are useful for inspecting\r\n  and constructing
  evidence terms, such as `mkTyVar`, `newName`, `mkLocalId`, `lookupEvBind`...\r\n\r\n#
  Version 0.4.1.0 (2021-08-24)\r\n\r\n- Re-export a few GHC modules, such as GHC.Core.Make
  and GHC.Plugins.\r\n  These re-exports might be changed to be more selective in
  the future\r\n  to aid cross-version compatibility.\r\n\r\n# Version 0.4.0.0 (2021-08-24)\r\n\r\n-
  Adapt to GHC 9.4 changes in the `TcPluginSolveResult` datatype:\r\n  are now able
  to solve and emit constraints even when reporting\r\n  a contradiction. This can
  help with error messages.\r\n  Unfortunately these extra constraints will be dropped
  in versions\r\n  of GHC prior to 9.4.\r\n\r\n- Add a utility module for name resolution
  using constrained traversals.\r\n\r\n- Add compatibility for GHC 8.10.\r\n\r\n#
  Version 0.3.1.0 (2021-08-09)\r\n\r\nEnsure that the coercions stored in `Reduction`s
  are always\r\noriented left-to-right, by making the internal rewriting compatibility
  layer\r\nalso use left-to-right coercions.\r\n\r\n# Version 0.3.0.0 (2021-08-04)\r\n\r\nAccount
  for changes in rewriting in GHC 9.4:\r\n\r\n  - rewriter plugins can no longer emit
  new Wanted constraints\r\n    if they don't rewrite the type family application;\r\n
  \ - coercions in the rewriter are now oriented left-to-right,\r\n    requiring `mkTyFamAppReduction`
  to be adapted.\r\n\r\n# Version 0.2.0.0 (2021-07-22)\r\n\r\nInitial release on Hackage.\r\n"
basic-deps:
  ghc: '>=8.8 && <9.5'
  base: '>=4.13.0 && <4.18'
  transformers: '>=0.5 && <0.6'
all-versions:
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.7.1.0
author: Sam Derbyshire
latest: 0.7.1.0
description-type: haddock
description: |-
  This library provides a streamlined monadic interface
  for writing GHC type-checking plugins.

  Each stage in a type-checking plugin (initialisation, solving, rewriting,
  shutdown) has a corresponding monad, preventing operations that are only
  allowed in some stages to be used in the other stages.
  Operations that work across multiple stages are overloaded across monads
  using MTL-like typeclasses.

  Some operations, like creating evidence for constraints or creating
  custom type error messages, are also simplified.

  Please refer to the <https://github.com/sheaf/ghc-tcplugin-api associated GitHub repository>
  for example usage.
license-name: BSD-3-Clause
