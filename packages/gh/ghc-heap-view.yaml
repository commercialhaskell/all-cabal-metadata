homepage: ''
changelog-type: ''
hash: cab6eac485c7c7e908a207b74017ad18776ede91c72cad3a4295fc452048f48c
test-bench-deps:
  base: -any
  ghc-heap-view: -any
  deepseq: -any
maintainer: Joachim Breitner <mail@joachim-breitner.de>
synopsis: Extract the heap representation of Haskell values and thunks
changelog: ''
basic-deps:
  bytestring: '>=0.10.2'
  base: '>=4.12 && <4.17'
  containers: -any
  binary: -any
  ghc-heap: -any
  transformers: -any
  template-haskell: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.3.0.1
- 0.3.0.2
- 0.3.0.3
- 0.3.0.4
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- '0.5'
- 0.5.0.1
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.6
- 0.5.7
- 0.5.8
- 0.5.9
- 0.5.10
- 0.5.11
- 0.6.0
- 0.6.1
- 0.6.2
- 0.6.3
author: Joachim Breitner, Dennis Felsing
latest: 0.6.3
description-type: haddock
description: |-
  This library provides functions to introspect the Haskell heap, for example
  to investigate sharing and lazy evaluation. As this is tied to the internals
  of the compiler, it only works with specific versions. This version supports,
  GHC 8.8. For GHC 8.6 use version 0.6.0. For older GHC versions see
  ghc-heap-view-0.5.10.

  It has been inspired by (and taken code from) the vacuum package and the GHCi
  debugger, but also allows to investigate thunks and other closures.

  This package also provides a new GHCi-command, @:printHeap@, which allows you
  to inspect the current heap representation of a value, including sharing and
  cyclic references. To enable the command, you need to load the included ghci
  script or add it to @~/.ghci@, as explained by @cabal install@. Once it is
  set up, you can do this:

  >> let value = "A Value"
  >> let x = (value, if head value == 'A' then value else "", cycle [True, False])
  >> :printHeap x
  >let x1 = _bco
  >    x21 = []
  >in (x1,_bco,_bco)
  >> length (take 100 (show x)) `seq` return () -- evaluate everything
  >> :printHeap x
  >let x1 = "A Value"
  >    x16 = True : False : x16
  >in (x1,x1,x16)

  You can change the maximum recursion depth using @:setPrintHeapDepth@:

  >> :setPrintHeapDepth 3
  >> :printHeap x
  >let x1 = C# 'A' : ... : ...
  >in (x1,x1,True : ... : ...)

  If the view is impaired by blackholes (written @_bh@), running
  @System.Mem.performGC@ usually helps.

  The work on this package has been supported by the Deutsche Telekom Stiftung
  (<http://telekom-stiftung.de>).
license-name: BSD-3-Clause
