homepage: https://github.com/haskell/haskell-language-server/tree/master/ghcide#readme
changelog-type: markdown
hash: ece6dcb18b8abb9dbedf543577ac0f87c3ce0dc9100b840aec98132e976bfc53
test-bench-deps:
  shake: -any
  haddock-library: -any
  lsp-test: ^>=0.14
  ghc: -any
  lsp: -any
  bytestring: -any
  extra: -any
  base: ==4.*
  tasty-expected-failure: -any
  unordered-containers: -any
  text: -any
  safe-exceptions: -any
  filepath: -any
  process: -any
  shake-bench: ==0.1.*
  async: -any
  hls-graph: -any
  data-default: -any
  ghc-typelits-knownnat: -any
  containers: -any
  ghcide: -any
  lens: -any
  quickcheck-instances: -any
  binary: -any
  rope-utf16-splay: -any
  regex-tdfa: ^>=1.3.1
  tasty-quickcheck: -any
  network-uri: -any
  tasty-hunit: -any
  tasty-rerun: -any
  optparse-applicative: -any
  tasty: -any
  QuickCheck: -any
  hls-plugin-api: -any
  aeson: -any
  lsp-types: -any
  safe: -any
  yaml: -any
  directory: -any
maintainer: Ghcide contributors
synopsis: The core of an IDE
changelog: |
  ### 1.3.0.0 (2021-05-09)
  * Replace unsafe getmodtime with unix package (#1778) - Pepe Iborra
  * Progress reporting improvements (#1784) - Pepe Iborra
  * Unify session loading using implicit-hie (#1783) - fendor
  * Fix remove constraint (#1578) - Kostas Dermentzis
  * Fix wrong extend import while type constuctor and data constructor have the same name (#1775) - Lei Zhu
  * Imporve vscode extension schema generation (#1742) - Potato Hatsue
  * Add hls-graph abstracting over shake (#1748) - Neil Mitchell
  * Tease apart the custom SYB from ExactPrint (#1746) - Sandy Maguire
  * fix class method completion (#1741) - Lei Zhu
  * Fix: #1690 - Infix typed holes are now filled using infix notation (#1708) - Oliver Madine

  ### 1.2.0.2 (2021-04-13)
  * Bracketing for snippet completions (#1709) - Oliver Madine
  * Don't suggest destruct actions for already-destructed terms (#1715) - Sandy Maguire

  ### 1.2.0.1 (2021-04-12)
  * restore compat. with haddock-library 1.8 (#1717) - Pepe Iborra

  ### 1.2.0 (2021-04-11)
  * Emit holes as diagnostics (#1653) - Sandy Maguire
  * Fix ghcide and HLS enter lsp mode by default (#1692) - Potato Hatsue
  * support custom Ide commands (#1666) - Pepe Iborra
  * ghcide - enable ApplicativeDo everywhere (#1667) - Pepe Iborra
  * Intelligent derivations of Semigroup and Monoid for Wingman (#1671) - Sandy Maguire
  * Avoid creating IsFileOfInterest keys for non workspace files (#1661) - Pepe Iborra
  * Fix a wingman bug caused by mismanaged stale data (#1657) - Sandy Maguire
  * Skip tracing unless eventlog is enabled (#1658) - Pepe Iborra
  * optimize ambiguity import suggestions (#1669) - Lei Zhu
  * Replace Barrier with MVar in lsp main (#1668) - Potato Hatsue
  * Add bounds for Diff (#1665) - Potato Hatsue
  * log exceptions before killing the server (#1651) - Pepe Iborra
  * Fix importing type operators (#1644) - Potato Hatsue
  * Shut the Shake session on exit, instead of restarting it (#1655) - Pepe Iborra
  * Do not override custom user commands (#1650) - Pepe Iborra
  * Civilized indexing progress reporting (#1633) - Pepe Iborra
  * Avoid reordering plugins (#1629) - Pepe Iborra
  * Update to lsp-1.2 (#1631) - wz1000
  * Use custom config for completions plugin (#1619) - Potato Hatsue
  * Configurable I/O handles (#1617) - Pepe Iborra
  * Add test data files to extra-source-files (#1605) - Javier Neira
  * Allow for customizable Haskell views of Property types (#1608) - Sandy Maguire
  * Extract hls-test-utils (#1606) - Potato Hatsue
  * Add ability for plugins to handle file change notifications (#1588) - Pepe Iborra
  * Bump haddock-library to 1.10.0 (#1598) - Potato Hatsue
  * Use CiInterface/SkInterface for typeclass symbols (#1592) - FW
  * Relax ghcides upper bound on base16-bytestring (#1595) - maralorn
  * Regularize custom config of plugins (#1576) - Potato Hatsue
  * Avoid duplicating known targets and import paths (#1590) - Pepe Iborra
  * Update homepage and other urls for ghcide (#1580) - Felix Yan
  * Add custom code action kinds for import related code actions (#1570) - Potato Hatsue
  * Use TextEdit to insert new imports (#1554) - Potato Hatsue

  ### 1.1.0 (2021-03-09)
  * Add an option to control progress reporting (#1513) - Pepe Iborra
  * Fix missing parens of auto extending imports (#1526) - Potato Hatsue
  * Avoid redundant work in diagnostics pass (#1514) - Pepe Iborra
  * Avoid always rerunning GetModificationTime for interface files too (#1506) - Pepe Iborra
  * Demote implicit cradle warn to logging (#1511) - Javier Neira
  * Drive GetModificationTime using watched file events (#1487) - Pepe Iborra
  * Make type lenses plugin configurable (#1491) - Potato Hatsue
  * Context-aware ExactPrint grafting for HsExpr (#1489) - Sandy Maguire
  * Register IDE configuration when called via the command line (#1495) - wz1000
  * Faster ModSummary fingerprints (#1485) - Pepe Iborra
  * Make sure to give the correct DynFlags to the recompilation checker (#1459) - Pepe Iborra
  * Customize the unitId used for the fake internal component (#1435) - Pepe Iborra
  * Extract the qualified name from already imported module (#1445) - Potato Hatsue
  * Add code action for importing class methods (#1428) - Potato Hatsue
  * Reformat all files (#1439) - Junyoung/Clare Jang
  * Minor performance optimizations (#1432) - Pepe Iborra

  ### 1.0.0 (2021-03-04)
  * Fix the handling of default HLS config again (#1419) - Pepe Iborra
  * Hlint hints. (#1227) - Peter Wicks Stringfield
  * Use object code for TH+UnboxedTuples/Sums (#1382) - wz1000
  * Add a pre commit hook for code formatting (#1384) - Junyoung/Clare Jang
  ### 0.7.5 (2021-02-17)
  * Tone down some logInfos to logDebug (#1385) - Pepe Iborra
  * Show window message when auto extending import lists (#1371) - Potato Hatsue
  * Catch GHC errors in listing module names (#1367) - Potato Hatsue
  * Upgrade to lsp-1.0 (#1284) - wz1000
  * Added Development.IDE.Main (#1338) - Pepe Iborra
  * Fix completion snippets on DuplicateRecordFields (#1360) - Potato Hatsue
  * Add code action for hiding shadowed identifiers from imports (#1322) - Potato Hatsue
  * Make find-definition work better with multi-components (#1357) - wz1000
  * Index files on first open (#1358) - wz1000
  * Fix code actions regression (#1349) - Pepe Iborra

  ### 0.7.4 (2021-02-08)
  * Support for references via hiedb (#704) - wz1000
  * Fix space leak on cradle reloads (#1316) - Pepe Iborra
  * Trigger extending import only when the item is not in scope (#1309) - Potato Hatsue
  * Don't extend the import list with child if the parent has already been imported as (..) (#1302) - Potato Hatsue
  * FindImports typo (minor) (#1291) - Andy
  * Reenable auto extend imports and drop snippets for infix completions (#1266) - Pepe Iborra
  * ghcide: Implements a CodeAction to disambiguate ambiguous symbols (#1264) - Hiromi Ishii
  * Restore code actions order (#1273) - Pepe Iborra

  ### 0.7.3 (2021-02-04)
  * Add custom cache layer for session loading (#1197) - (fendor)
  * Remove invalid exports (#1193) - (Kostas Dermentzis)
  * Use exact print to suggestExtendImport - (Potato Hatsue)
  * Add code actions for disabling a warning in the current file (#1235) - (George Thomas)
  * Limit completions to top 40 (#1218) - (Pepe Iborra)
  * Add traces for HLS providers (#1222) - (Pepe Iborra)
  * Use exact print for suggest missing constraint code actions (#1221) - (Pepe Iborra)
  * Parenthesise type operators when extending import lists (#1212) - (Thomas Winant)

  ### 0.7.2 (2021-01-14)
  * Expose shakeOptions used - (Pepe Iborra)

  ### 0.7.1 (2021-01-13)
  * Fix sticky diagnostics bug (#1188) - (Pepe Iborra)
  * Use completionSnippetsOn flag (#1195) - (Yuya Kono)
  * Update tested-with GHC in cabal config - (jneira)
  * Do not disable parallel GC by default (#1190) - (Pepe Iborra)
  * Fix module outline becoming stale after switching branches (#1189) - (Pepe Iborra)
  * Make adding missing constraint work in presence of 'forall' (fixes #1164) (#1177) - (Jan Hrcek)
  * Bump haskell-lsp to 0.23 (#1146) - (Potato Hatsue)
  * Fix #723 (Instance declarations in hs-boot files result in GHC errors) (#781) - (Ben Simms)
  * Also suggest importing methods without parent class (#766) - (Thomas Winant)
  * Update links to issues/PRs in ghcide tests. (#1142) - (Peter Wicks Stringfield)
  * fix suggestAddTypeAnnotation regex (#760) - (Kostas Dermentzis)

  ### 0.7.0 (2021-01-03)
  * Ghcide now loads HLS plugins internally - (Pepe Iborra)
  * Retry a failed cradle if the cradle descriptor changes (#762) - (Pepe Iborra)
  * Fix extend imports regression (#769) - (Pepe Iborra)
  * Perform memory measurement on SIGUSR1 (#761) - (Pepe Iborra)

  ### 0.6.0.2 (2020-12-26)
  * Fix disappearing diagnostics bug (#959) - (Pepe Iborra)
  * Deduplicate module not found diagnostics (#952) - (Pepe Iborra)
  * Use qualified module name from diagnostics in suggestNewImport (#945) - (Potato Hatsue)
  * Disable auto extend import snippets in completions (these need a bit more work)

  ### 0.6.0.1 (2020-12-13)
  * Fix build with GHC 8.8.2 and 8.8.3 - (Javier Neira)
  * Update old URLs still pointing to digital-asset - (Jan Hrcek)

  ### 0.6.0 (2020-12-06)
  * Completions: extend explicit import list automatically (#930) - (Guru Devanla)
  * Completions for identifiers not in explicit import lists (#919) - (Guru Devanla)
  * Completions for record fields (#900) - (Guru Devanla)
  * Bugfix: add constructors to import lists correctly (#916) - (Potato Hatsue)
  * Bugfix: respect qualified identifiers (#938) - (Pepe Iborra)
  * Bugfix: partial `pathToId` (#926) - (Samuel Ainsworth)
  * Bugfix: import suggestions when there's more than one option (#913) - (Guru Devanla)
  * Bugfix: parenthesize operators when exporting (#906) - (Potato Hatsue)
  * Opentelemetry traces and heapsize memory analysis (#922) - (Michalis Pardalos / Pepe Iborra)
  * Make Filetargets absolute before continue using them (#914) - (fendor)
  * Do not enable every "unnecessary" warning by default (#907) - (Alejandro Serrano)
  * Update implicit-hie to 0.3.0 (#905) - (Avi Dessauer)

  ### 0.5.0 (2020-11-07)
  * Use implicit-hie-0.1.2.0 (#880) - (Javier Neira)
  * Clarify and downgrade implicit-hie message (#883) - (Avi Dessauer)
  * Switch back to bytecode (#873) - (wz1000)
  * Add code action for remove all redundant imports (#867) - (Potato Hatsue)
  * Fix pretty printer for diagnostic ranges (#871) - (Martin Huschenbett)
  * Canonicalize import dirs (#870) - (Pepe Iborra)
  * Do not show internal hole names (#852) - (Alejandro Serrano)
  * Downgrade file watch debug log to logDebug from logInfo (#848) - (Matthew Pickering)
  * Pull in local bindings (#845) - (Sandy Maguire)
  * Use object code for Template Haskell, emit desugarer warnings (#836) - (wz1000)
  * Fix code action for adding missing constraints to type signatures (#839) - (Jan Hrcek)
  * Fix duplicated completions (#837) - (Vitalii)
  * FileExists: set one watcher instead of thousands (#831) - (Michael Peyton Jones)
  * Drop 8.4 support (#834) - (wz1000)
  * Add GetHieAsts rule, Replace SpanInfo, add support for DocumentHighlight and scope-aware completions for local variables (#784) - (wz1000)
  * Tag unused warning as such (#815) - (Alejandro Serrano)
  * Update instructions for stty error in windows (#825) - (Javier Neira)
  * Fix docs tooltip for base libraries on Windows (#814) - (Nick Dunets)
  * Fix documentation (or source) link when html file is less specific than module (#766) - (Nick Dunets)
  * Add completion tests for records. (#804) - (Guru Devanla)
  * Restore identifiers missing from hi file (#741) - (maralorn)
  * Fix import suggestions when dot is typed (#800) - (Marcelo Lazaroni)

  ### 0.4.0 (2020-09-15)
  * Fixes for GHC source plugins: dotpreprocessor works now - (srid)
  * Use implicit-hie when no explicit hie.yaml (#782) - (Javier Neira)
  * Extend position mapping with fuzzy ranges (#785) - (wz1000)
  * Sort import suggestions (#793) - (Pepe Iborra)
  * Save source files with HIE files (#701) - (fendor)
  * Fully asynchronous request handling (#767) - (Pepe Iborra)
  * Refinement holes (#748) - (Pepe Iborra)
  * Fix haddock to markdown conversion (#757) - (George Thomas)
  * Expose `getCompletionsLSP` to allow completions in hls (#756) - (wz1000)
  * Suggestions for missing imports from local modules (#739) - (Pepe Iborra)
  * Dynamically load libm on Linux for each new session (#723) - (Luke Lau)
  * Use InitializeParams.rootUri for initial session setup (#713) - (shaurya gupta)
  * Show documentation on hover for symbols defined in the same module (#691) - (wz1000)
  * Suggest open imports (#740) - (Pepe Iborra)
  * module Development.IDE (#724) - (Pepe Iborra)
  * Ignore -Werror (#738) - (Pepe Iborra)
  * Fix issue #710: fix suggest delete binding  (#728) - (Ray Shih)
  * Generate doc file URL via LSP (to fix it for Windows) (#721) - (Nick Dunets)
  * Fix `.hie` file location for `.hs-boot` files (#690) - (wz1000)
  * Use argsVerbose to determine log level in test mode (#717) - (Ziyang Liu)
  * output which cradle files were found (#716) - (Adam Sandberg Eriksson)
  * Typecheck entire project on Initial Load and typecheck reverse dependencies of a file on saving (#688) - (wz1000)

  ### 0.3.0 (2020-09-02)

  * CI: remove (internal) DA Slack notifications (#750) - (Gary Verhaegen)
  * Add session-loader to hie.yaml (#714) - (Luke Lau)
  * Codeaction for exporting unused top-level bindings (#711) - (shaurya gupta)
  * Add links to haddock and hscolour pages in documentation (#699) - (Luke Lau)
  * Expose GHC.Compat module (#709) - (Pepe Iborra)
  * Move session loading logic into ghcide library (#697) - (Luke Lau)
  * Code action: remove redundant constraints for type signature (#692) - (Denis Frezzato)
  * Fix Binary instance of Q to handle empty file paths (#707) - (Moritz Kiefer)
  * Populate ms_hs_date in GetModSummary rule (#694) - (Pepe Iborra)
  * Allow GHC plugins to be called with an updated StringBuffer (#698) - (Alfredo Di Napoli)
  * Relax upper bounds for GHC 8.10.1 (#705) - (Pepe Iborra)
  * Obtain the GHC libdir at runtime (#696) - (Luke Lau)
  * Expect bench experiments to fail with Cabal (#704) - (Pepe Iborra)
  * Bump lodash from 4.17.15 to 4.17.19 in /extension (#702) - (dependabot[bot])
  * Update to hie-bios 0.6.1 (#693) - (fendor)
  * Backport HIE files to GHC 8.6 (#689) - (wz1000)
  * Performance improvements for GetSpanInfo (#681) - (Pepe Iborra)
  * Code action add default type annotation to remove `-Wtype-defaults` warning (#680) - (Serhii)
  * Use a global namecache to read `.hie` files (#677) - (wz1000)
  * Completions need not depend on typecheck of the current file (#670) - (Pepe Iborra)
  * Fix spaninfo Haddocks for local modules (#678) - (Pepe Iborra)
  * Avoid excessive retypechecking of TH codebases (#673) - (Pepe Iborra)
  * Use stale information if it's available to answer requests quickly (#624) - (Matthew Pickering)
  * Code action: add constraint (#653) - (Denis Frezzato)
  * Make BenchHist non buildable by default and save logs (#666) - (Pepe Iborra)
  * Delete unused top level binding code action (#657) - (Serhii)
  * stack810.yaml: bump (#651) - (Domen Kozar)
  * Fix debouncer for 0 delay (#662) - (Pepe Iborra)
  * Interface file fixes (#645) - (Pepe Iborra)
  * Retry GHC 8.10 on Windows (#661) - (Moritz Kiefer)
  * Finer dependencies for GhcSessionFun (#643) - (Pepe Iborra)
  * Send WorkDoneProgressEnd only when work is done (#649) - (Pepe Iborra)
  * Add a note on differential benchmarks (#647) - (Pepe Iborra)
  * Cache a ghc session per file of interest (#630) - (Pepe Iborra)
  * Remove `Strict` from the language extensions used for code actions (#638) - (Torsten Schmits)
  * Report progress when setting up cradle (#644) - (Luke Lau)
  * Fix crash when writing to a Barrier more than once (#637) - (Pepe Iborra)
  * Write a cabal.project file in the benchmark example (#640) - (Pepe Iborra)
  * Performance analysis over time (#629) - (Pepe Iborra)
  * More benchmarks (#625) - (Pepe Iborra)
  * Canonicalize the locations in the cradle tests (#628) - (Luke Lau)
  * Add hie.yaml.stack and use none cradle for test data (#626) - (Javier Neira)
  * Fix a bug in getHiFileRule (#623) - (Pepe Iborra)
  * ghc initialization error handling (#609) - (Pepe Iborra)
  * Fix regression in getSpanInfoRule (#622) - (Pepe Iborra)
  * Restore Shake profiling (#621) - (Pepe Iborra)
  * Use a better noRange (#612) - (Neil Mitchell)
  * Add back a .ghci file (#607) - (Neil Mitchell)
  * #573, make haddock errors warnings with the word Haddock in front (#608) - (Neil Mitchell)
  * Implement Goto Type Definition (#533) - (Matthew Pickering)
  * remove unnecessary FileExists dependency in GetHiFile (#589) - (Pepe Iborra)
  * ShakeSession and shakeEnqueue (#554) - (Pepe Iborra)
  * Benchmark suite (#590) - (Pepe Iborra)

  ### 0.2.0 (2020-06-02)

  * Multi-component support (thanks @mpickering)
  * Support for GHC 8.10 (thanks @sheaf and @chshersh)
  * Fix some TH issues (thanks @mpickering)
  * Automatically pick up changes to cradle dependencies (e.g. cabal
    files) (thanks @jinwoo)
  * Track dependencies when using `qAddDependentFile` (thanks @mpickering)
  * Add record fields to document symbols outline (thanks @bubba)
  * Fix some space leaks (thanks @mpickering)
  * Strip redundant path information from diagnostics (thanks @tek)
  * Fix import suggestions for operators (thanks @eddiemundo)
  * Significant reductions in memory usage by using interfaces and `.hie` files (thanks
    @pepeiborra)
  * Minor improvements to completions
  * More comprehensive suggestions for missing imports (thanks @pepeiborra)
  * Group imports in document outline (thanks @fendor)
  * Upgrade to haskell-lsp-0.22 (thanks @bubba)
  * Upgrade to hie-bios 0.5 (thanks @fendor)

  ### 0.1.0 (2020-02-04)

  * Code action for inserting new definitions (see #309).
  * Better default GC settings (see #329 and #333).
  * Various performance improvements (see #322 and #384).
  * Improvements to hover information (see #317 and #338).
  * Support GHC 8.8.2 (see #355).
  * Include keywords in completions (see #351).
  * Fix some issues with aborted requests (see #353).
  * Use hie-bios 0.4.0 (see #382).
  * Avoid stuck progress reporting (see #400).
  * Only show progress notifications after 0.1s (see #392).
  * Progress reporting is now in terms of the number of files rather
    than the number of shake rules (see #379).

  ### 0.0.6 (2020-01-10)

  * Fix type in hover information for do-notation and list
    comprehensions (see #243).
  * Fix hover and goto-definition for multi-clause definitions (see #252).
  * Upgrade to `hie-bios-0.3` (see #257)
  * Upgrade to `haskell-lsp-0.19` (see #254)
  * Code lenses for missing signatures are displayed even if the warning
    has not been enabled. The warning itself will not be shown if it is
    not enabled. (see #232)
  * Define `__GHCIDE__` when running CPP to allow for `ghcide`-specific
    workarounds. (see #264)
  * Fix some filepath normalization issues. (see #266)
  * Fix build with `shake-0.18.4` (see #272)
  * Fix hover for type constructors and type classes. (see #267)
  * Support custom preprocessors (see #282)
  * Add support for code completions (see #227)
  * Code action for removing redundant symbols from imports (see #290)
  * Support document symbol requests (see #293)
  * Show CPP errors as diagnostics (see #296)
  * Code action for adding suggested imports (see #295)

  ### 0.0.5 (2019-12-12)

  * Support for GHC plugins (see #192)
  * Update to haskell-lsp 0.18 (see #203)
  * Initial support for `TemplateHaskell` (see #222)
  * Code lenses for missing signatures. These are only shown if
    `-Wmissing-signatures` is enabled. (see #224)
  * Fix path normalisation on Windows (see #225)
  * Fix flickering of the progress indicator (see #230)

  ### 0.0.4 (2019-10-20)

  * Add a ``--version`` cli option (thanks @jacg)
  * Update to use progress reporting as defined in LSP 3.15. The VSCode
    extension has also been updated and should now be making use of
    this.
  * Properly declare that we should support code actions. This helps
    with some clients that rely on this information to enable code
    actions (thanks @jacg).
  * Fix a race condition caused by sharing the finder cache between
    concurrent compilations.
  * Avoid normalizing include dirs. This avoids issues where the same
    file ends up twice in the module graph, e.g., with different casing
    for drive letters.

  ### 0.0.3 (2019-09-21)
basic-deps:
  shake: -any
  haddock-library: '>=1.8 && <1.11'
  lsp-test: -any
  ghc: '>=8.6'
  monoid-subclasses: -any
  lsp: ==1.2.*
  cryptohash-sha1: '>=0.11.100 && <0.12'
  ghc-check: '>=0.5.0.4'
  bytestring: -any
  dependent-sum: -any
  fingertree: -any
  case-insensitive: -any
  unliftio: -any
  extra: '>=1.7.4 && <1.7.10'
  unix: -any
  hiedb: ==0.4.1.*
  stm: -any
  base: ==4.*
  time: -any
  sqlite-simple: -any
  Diff: ^>=0.4.0
  aeson-pretty: -any
  unordered-containers: '>=0.2.10.0'
  text: -any
  hie-compat: ^>=0.2.0.0
  dependent-map: -any
  safe-exceptions: -any
  syb: -any
  ghc-exactprint: -any
  filepath: -any
  gitrev: -any
  process: -any
  async: -any
  implicit-hie-cradle: '>=0.3.0.5 && <0.4'
  dlist: -any
  hls-graph: ==1.4.*
  data-default: -any
  hie-bios: '>=0.7.1 && <0.9.0'
  array: -any
  bytestring-encoding: -any
  sorted-list: -any
  containers: -any
  ghcide: -any
  lens: -any
  unliftio-core: -any
  ghc-paths: -any
  ghc-boot: -any
  binary: -any
  utf8-string: -any
  rope-utf16-splay: -any
  hslogger: -any
  regex-tdfa: '>=1.3.1.0'
  fuzzy: -any
  ghc-trace-events: -any
  retrie: -any
  network-uri: -any
  mtl: -any
  hashable: -any
  vector-algorithms: -any
  base16-bytestring: '>=0.1.1 && <1.1'
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  parallel: -any
  deepseq: -any
  opentelemetry: '>=0.6.1'
  ghc-boot-th: -any
  hls-plugin-api: '>=1.2.0.0 && <1.3'
  Glob: -any
  aeson: -any
  lsp-types: '>=1.3.0.1 && <1.4'
  safe: -any
  heapsize: ==0.3.*
  vector: -any
  prettyprinter-ansi-terminal: -any
  directory: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.0.1
- 0.6.0.2
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.3.0
- 0.7.4.0
- 0.7.5.0
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
- 1.2.0.2
- 1.3.0.0
- 1.4.0.1
- 1.4.0.2
- 1.4.0.3
- 1.4.1.0
- 1.4.2.0
- 1.4.2.1
author: Digital Asset and Ghcide contributors
latest: 1.4.2.1
description-type: markdown
description: |
  # `ghcide` - A library for building Haskell IDE tooling

  Our vision is that you should build an IDE by combining:

  ![vscode](https://raw.githubusercontent.com/haskell/ghcide/master/img/vscode2.png)

  * [`hie-bios`](https://github.com/mpickering/hie-bios) for determining where your files are, what are their dependencies, what extensions are enabled and so on;
  * `ghcide` (i.e. this library) for defining how to type check, when to type check, and producing diagnostic messages;
  * A bunch of plugins that haven't yet been written, e.g. [`hie-hlint`](https://github.com/ndmitchell/hlint) and [`hie-ormolu`](https://github.com/tweag/ormolu), to choose which features you want;
  * [`haskell-lsp`](https://github.com/alanz/haskell-lsp) for sending those messages to a [Language Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/) server;
  * An LSP client for your editor.

  There are more details about our approach [in this blog post](https://4ta.uk/p/shaking-up-the-ide).

  ## Features

  `ghcide` already exports the following features via the lsp protocol:

  | Feature | LSP name |
  | - | - |
  | Display error messages (parse errors, typecheck errors, etc.) and enabled warnings. | diagnostics |
  | Go to definition in local package | definition  |
  | Display type and source module of values | hover |
  | Remove redundant imports, replace suggested typos for values and module imports, fill type holes, insert missing type signatures, add suggested ghc extensions  | codeAction (quickfix) |


  ## Limitations to Multi-Component support

  `ghcide` supports loading multiple components into the same session so that
  features such as go-to definition work across components. However, there are
  some limitations to this.

  1. You will get much better results currently manually specifying the hie.yaml file.
  Until tools like cabal and stack provide the right interface to support multi-component
  projects, it is always advised to specify explicitly how your project partitions.
  2. Cross-component features only work if you have loaded at least one file
  from each component.
  3. There is a known issue where if you have three components, such that A depends on B which depends on C
  then if you load A and C into the session but not B then under certain situations you
  can get strange errors about a type coming from two different places. See [this repo](https://github.com/fendor/ghcide-bad-interface-files) for
  a simple reproduction of the bug.

  ## Using it

  `ghcide` is not an end-user tool, [don't use `ghcide`](https://neilmitchell.blogspot.com/2020/09/dont-use-ghcide-anymore-directly.html) directly (more about the rationale [here](https://github.com/haskell/ghcide/pull/939)).

   [`haskell-language-server`](http://github.com/haskell/haskell-language-server) is an LSP server built on top of `ghcide` with additional features and a user friendly deployment model. To get it, simply install the [Haskell extension](https://marketplace.visualstudio.com/items?itemName=haskell.haskell) in VS Code, or download prebuilt binaries from the [haskell-language-server](https://github.com/haskell/haskell-language-server) project page.


  The instructions below are meant for developers interested in setting up ghcide as an LSP server for testing purposes.

  ### Install `ghcide`

  #### With Nix

  Note that you need to compile `ghcide` with the same `ghc` as the project you are working on.

  1. If the `ghc` you are using matches the version (or better is) from `nixpkgs` it‘s easiest to use the `ghcide` from `nixpkgs`. You can do so via
     ```
     nix-env -iA haskellPackages.ghcide
     ```
     or e.g. including `pkgs.haskellPackages.ghcide` in your projects `shell.nix`.
     Depending on your `nixpkgs` channel that might not be the newest `ghcide`, though.

  2. If your `ghc` does not match nixpkgs you should try the [ghcide-nix repository](https://github.com/cachix/ghcide-nix)
     which provides a `ghcide` via the `haskell.nix` infrastructure.

  #### With Cabal or Stack

  First install the `ghcide` binary using `stack` or `cabal`, e.g.

  1. `git clone https://github.com/haskell/ghcide.git`
  2. `cd ghcide`
  3. `cabal install` or `stack install` (and make sure `~/.local/bin` is on your `$PATH`)

  It's important that `ghcide` is compiled with the same compiler you use to build your projects.

  ### Test `ghcide`

  Next, check that `ghcide` is capable of loading your code. Change to the project directory and run `ghcide`, which will try and load everything using the same code as the IDE, but in a way that's much easier to understand. For example, taking the example of [`shake`](https://github.com/ndmitchell/shake), running `ghcide` gives some error messages and warnings before reporting at the end:

  ```console
  Files that failed:
   * .\model\Main.hs
   * .\model\Model.hs
   * .\model\Test.hs
   * .\model\Util.hs
   * .\output\docs\Main.hs
   * .\output\docs\Part_Architecture_md.hs
  Completed (152 worked, 6 failed)
  ```

  Of the 158 files in Shake, as of this moment, 152 can be loaded by the IDE, but 6 can't (error messages for the reasons they can't be loaded are given earlier). The failing files are all prototype work or test output, meaning I can confidently use Shake.

  The `ghcide` executable mostly relies on [`hie-bios`](https://github.com/mpickering/hie-bios) to do the difficult work of setting up your GHC environment. If it doesn't work, see [the `hie-bios` manual](https://github.com/mpickering/hie-bios#readme) to get it working. My default fallback is to figure it out by hand and create a `direct` style [`hie.yaml`](https://github.com/ndmitchell/shake/blob/master/hie.yaml) listing the command line arguments to load the project.

  If you can't get `ghcide` working outside the editor, see [this setup troubleshooting guide](docs/Setup.md). Once you have got `ghcide` working outside the editor, the next step is to pick which editor to integrate with.

  ### Optimal project setup

  `ghcide` has been designed to handle projects with hundreds or thousands of modules. If `ghci` can handle it, then `ghcide` should be able to handle it. The only caveat is that this currently requires GHC >= 8.6, and that the first time a module is loaded in the editor will trigger generation of support files in the background if those do not already exist.

  ### Configuration

  `ghcide` accepts the following lsp configuration options:

  ```typescript
  {
    // When to check the dependents of a module
    // AlwaysCheck means retypechecking them on every change
    // CheckOnSave means dependent/parent modules will only be checked when you save
    // "CheckOnSaveAndClose" by default
    checkParents : "NeverCheck" | "CheckOnClose" | "CheckOnSaveAndClose" | "AlwaysCheck" | ,
    // Whether to check the entire project on initial load
    // true by default
    checkProject : boolean

  }
  ```

  ### Using with VS Code

  The [Haskell](https://marketplace.visualstudio.com/items?itemName=haskell.haskell) extension has a setting for ghcide.

  ### Using with Atom

  You can follow the [instructions](https://github.com/moodmosaic/ide-haskell-ghcide#readme) to install with `apm`.

  ### Using with Sublime Text

  * Install [LSP](https://packagecontrol.io/packages/LSP)
  * Press Ctrl+Shift+P or Cmd+Shift+P in Sublime Text and search for *Preferences: LSP Settings*, then paste these settings
  ```
  {
    "clients":
    {
      "ghcide":
      {
        "enabled"   : true,
        "languageId": "haskell",
        "command"   : ["ghcide", "--lsp"],
        "scopes"    : ["source.haskell"],
        "syntaxes"  : ["Packages/Haskell/Haskell.sublime-syntax"]
      }
    }
  }
  ```

  ### Using with Emacs

  If you don't already have [MELPA](https://melpa.org/#/) package installation configured, visit MELPA [getting started](https://melpa.org/#/getting-started) page to get set up. Then, install [`use-package`](https://melpa.org/#/use-package).

  Now you have a choice of two different Emacs packages which can be used to communicate with the `ghcide` LSP server:

  + `lsp-ui`
  + `eglot` (requires Emacs 26.1+)

  In each case, you can enable support by adding the shown lines to your `.emacs`:

  #### lsp-ui

  ```elisp
  ;; LSP
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  (use-package yasnippet
    :ensure t)
  (use-package lsp-mode
    :ensure t
    :hook (haskell-mode . lsp)
    :commands lsp)
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
  (use-package lsp-haskell
   :ensure t
   :config
   (setq lsp-haskell-process-path-hie "ghcide")
   (setq lsp-haskell-process-args-hie '())
   ;; Comment/uncomment this line to see interactions between lsp client/server.
   ;;(setq lsp-log-io t)
  )
  ```

  #### eglot

  ````elisp
  (use-package eglot
    :ensure t
    :config
    (add-to-list 'eglot-server-programs '(haskell-mode . ("ghcide" "--lsp"))))
  ````

  ### Using with Vim/Neovim

  #### LanguageClient-neovim
  Install [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)

  Add this to your vim config:
  ```vim
  let g:LanguageClient_rootMarkers = ['*.cabal', 'stack.yaml']
  let g:LanguageClient_serverCommands = {
      \ 'rust': ['rls'],
      \ 'haskell': ['ghcide', '--lsp'],
      \ }
  ```

  Refer to `:he LanguageClient` for more details on usage and configuration.

  #### vim-lsp
  Install [vim-lsp](https://github.com/prabirshrestha/vim-lsp).

  Add this to your vim config:

  ```vim
  au User lsp_setup call lsp#register_server({
      \ 'name': 'ghcide',
      \ 'cmd': {server_info->['/your/path/to/ghcide', '--lsp']},
      \ 'whitelist': ['haskell'],
      \ })
  ```

  To verify it works move your cursor over a symbol and run `:LspHover`.

  ### coc.nvim

  Install [coc.nvim](https://github.com/neoclide/coc.nvim)

  Add this to your coc-settings.json (which you can edit with :CocConfig):

  ```json
  {
    "languageserver": {
      "haskell": {
        "command": "ghcide",
        "args": [
          "--lsp"
        ],
        "rootPatterns": [
          ".stack.yaml",
          ".hie-bios",
          "BUILD.bazel",
          "cabal.config",
          "package.yaml"
        ],
        "filetypes": [
          "hs",
          "lhs",
          "haskell"
        ]
      }
    }
  }
  ```

  Here's a nice article on setting up neovim and coc: [Vim and Haskell in
  2019](http://marco-lopes.com/articles/Vim-and-Haskell-in-2019/) (this is actually for haskell-ide, not ghcide)

  Here is a Docker container that pins down the build and configuration for
  Neovim and ghcide on a minimal Debian 10 base system:
  [docker-ghcide-neovim](https://github.com/carlohamalainen/docker-ghcide-neovim/).

  ### SpaceVim

  In the `autocomplete` layer, add the `autocomplete_method` option to force the use of `coc`:

  ```toml
  [[layers]]
    name = 'autocomplete'
    auto-completion-return-key-behavior = "complete"
    auto-completion-tab-key-behavior = "smart"
    [options]
      autocomplete_method = "coc"
  ```

  Add this to your coc-settings.json (which you can edit with :CocConfig):

  ```json
  {
    "languageserver": {
      "haskell": {
        "command": "ghcide",
        "args": [
          "--lsp"
        ],
        "rootPatterns": [
          ".stack.yaml",
          ".hie-bios",
          "BUILD.bazel",
          "cabal.config",
          "package.yaml"
        ],
        "filetypes": [
          "hs",
          "lhs",
          "haskell"
        ]
      }
    }
  }
  ```

  This example above describes a setup in which `ghcide` is installed
  using `stack install ghcide` within a project.

  ### Using with Kakoune

  Install [kak-lsp](https://github.com/ul/kak-lsp).

  Change `kak-lsp.toml` to include this:

  ```toml
  [language.haskell]
  filetypes = ["haskell"]
  roots = ["Setup.hs", "stack.yaml", "*.cabal", "cabal.project", "hie.yaml"]
  command = "ghcide"
  args = ["--lsp"]
  ```

  ## Hacking on ghcide

  To build and work on `ghcide` itself, you should use cabal, e.g.,
  running `cabal test` will execute the test suite. You can use `stack test` too, but
  note that some tests will fail, and none of the maintainers are currently using `stack`.

  If you are using Nix, there is a Cachix nix-shell cache for all the supported platforms: `cachix use haskell-ghcide`.

  If you are using Windows, you should disable the `auto.crlf` setting and configure your editor to use LF line endings, directly or making it use the existing `.editor-config`.

  If you are chasing down test failures, you can use the tasty-rerun feature by running tests as

      cabal test --test-options"--rerun"

  This writes a log file called `.tasty-rerun-log` of the failures, and only runs those.
  See the [tasty-rerun](https://hackage.haskell.org/package/tasty-rerun-1.1.17/docs/Test-Tasty-Ingredients-Rerun.html) documentation for other options.

  If you are touching performance sensitive code, take the time to run a differential
  benchmark between HEAD and master using the benchHist script. This assumes that
  "master" points to the upstream master.

  Run the benchmarks with `cabal bench`.

  It should take around 15 minutes and the results will be stored in the `bench-results` folder. To interpret the results, see the comments in the `bench/hist/Main.hs` module.

  More details in [bench/README](bench/README.md)


  ## History and relationship to other Haskell IDE's

  The teams behind this project and the [`haskell-ide-engine`](https://github.com/haskell/haskell-ide-engine#readme) have agreed to join forces under the [`haskell-language-server` project](https://github.com/haskell/haskell-language-server), see the [original announcement](https://neilmitchell.blogspot.com/2020/01/one-haskell-ide-to-rule-them-all.html). The technical work is ongoing, with the likely model being that this project serves as the core, while plugins and integrations are kept in the [`haskell-language-server` project](https://github.com/haskell/haskell-language-server).

  The code behind `ghcide` was originally developed by [Digital Asset](https://digitalasset.com/) as part of the [DAML programming language](https://github.com/digital-asset/daml). DAML is a smart contract language targeting distributed-ledger runtimes, based on [GHC](https://www.haskell.org/ghc/) with custom language extensions. The DAML programming language has [an IDE](https://webide.daml.com/), and work was done to separate off a reusable Haskell-only IDE (what is now `ghcide`) which the [DAML IDE then builds upon](https://github.com/digital-asset/daml/tree/master/compiler/damlc). Since that time, there have been various [non-Digital Asset contributors](https://github.com/haskell/ghcide/graphs/contributors), in addition to continued investment by Digital Asset. The project has been handed over to Haskell.org as of September 2020.

  The Haskell community [has](https://github.com/DanielG/ghc-mod) [various](https://github.com/chrisdone/intero) [IDE](https://github.com/rikvdkleij/intellij-haskell) [choices](http://leksah.org/), but the one that had been gathering momentum is [`haskell-ide-engine`](https://github.com/haskell/haskell-ide-engine#readme). Our project owes a debt of gratitude to the `haskell-ide-engine`. We reuse libraries from their ecosystem, including [`hie-bios`](https://github.com/mpickering/hie-bios#readme) (a likely future environment setup layer in `haskell-ide-engine`), [`haskell-lsp`](https://github.com/alanz/haskell-lsp#readme) and [`lsp-test`](https://github.com/bubba/lsp-test#readme) (the `haskell-ide-engine` [LSP protocol](https://microsoft.github.io/language-server-protocol/) pieces). We make heavy use of their contributions to GHC itself, in particular the work to make GHC take string buffers rather than files.

  The best summary of the architecture of `ghcide` is available [this talk](https://www.youtube.com/watch?v=cijsaeWNf2E&list=PLxxF72uPfQVRdAsvj7THoys-nVj-oc4Ss) ([slides](https://ndmitchell.com/downloads/slides-making_a_haskell_ide-07_sep_2019.pdf)), given at [MuniHac 2019](https://munihac.de/2019.html). However, since that talk the project has renamed from `hie-core` to `ghcide`, and the repo has moved to [this location](https://github.com/haskell/ghcide/).
license-name: Apache-2.0
