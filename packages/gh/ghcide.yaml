homepage: https://github.com/haskell/ghcide#readme
changelog-type: markdown
hash: 79bfcd2f540b8a6c63de2ed47ae6f278ebb5280bfb50db81687506a62f3975f8
test-bench-deps:
  shake: -any
  haddock-library: -any
  lsp-test: ==0.13.0.0
  ghc: -any
  lsp: -any
  bytestring: -any
  extra: -any
  base: ==4.*
  tasty-expected-failure: -any
  text: -any
  safe-exceptions: -any
  filepath: -any
  process: -any
  shake-bench: ==0.1.*
  data-default: -any
  ghc-typelits-knownnat: -any
  containers: -any
  ghcide: -any
  lens: -any
  quickcheck-instances: -any
  binary: -any
  rope-utf16-splay: -any
  tasty-quickcheck: -any
  network-uri: -any
  tasty-hunit: -any
  tasty-rerun: -any
  optparse-applicative: -any
  tasty: -any
  QuickCheck: -any
  hls-plugin-api: -any
  aeson: -any
  lsp-types: -any
  safe: -any
  yaml: -any
  directory: -any
maintainer: Ghcide contributors
synopsis: The core of an IDE
changelog: "### 0.7.5 (2021-02-??)\r\n* Tone down some logInfos to logDebug (#1385)
  - Pepe Iborra\r\n* Show window message when auto extending import lists (#1371)
  - Potato Hatsue\r\n* Catch GHC errors in listing module names (#1367) - Potato Hatsue\r\n*
  Upgrade to lsp-1.0 (#1284) - wz1000\r\n* Added Development.IDE.Main (#1338) - Pepe
  Iborra\r\n* Fix completion snippets on DuplicateRecordFields (#1360) - Potato Hatsue\r\n*
  Add code action for hiding shadowed identifiers from imports (#1322) - Potato Hatsue\r\n*
  Make find-definition work better with multi-components (#1357) - wz1000\r\n* Index
  files on first open (#1358) - wz1000\r\n* Fix code actions regression (#1349) -
  Pepe Iborra\r\n\r\n### 0.7.4 (2021-02-08)\r\n* Support for references via hiedb
  (#704) - wz1000\r\n* Fix space leak on cradle reloads (#1316) - Pepe Iborra\r\n*
  Trigger extending import only when the item is not in scope (#1309) - Potato Hatsue\r\n*
  Don't extend the import list with child if the parent has already been imported
  as (..) (#1302) - Potato Hatsue\r\n* FindImports typo (minor) (#1291) - Andy\r\n*
  Reenable auto extend imports and drop snippets for infix completions (#1266) - Pepe
  Iborra\r\n* ghcide: Implements a CodeAction to disambiguate ambiguous symbols (#1264)
  - Hiromi Ishii\r\n* Restore code actions order (#1273) - Pepe Iborra\r\n\r\n###
  0.7.3 (2021-02-04)\r\n* Add custom cache layer for session loading (#1197) - (fendor)\r\n*
  Remove invalid exports (#1193) - (Kostas Dermentzis)\r\n* Use exact print to suggestExtendImport
  - (Potato Hatsue)\r\n* Add code actions for disabling a warning in the current file
  (#1235) - (George Thomas)\r\n* Limit completions to top 40 (#1218) - (Pepe Iborra)\r\n*
  Add traces for HLS providers (#1222) - (Pepe Iborra)\r\n* Use exact print for suggest
  missing constraint code actions (#1221) - (Pepe Iborra)\r\n* Parenthesise type operators
  when extending import lists (#1212) - (Thomas Winant)\r\n\r\n### 0.7.2 (2021-01-14)\r\n*
  Expose shakeOptions used - (Pepe Iborra)\r\n\r\n### 0.7.1 (2021-01-13)\r\n* Fix
  sticky diagnostics bug (#1188) - (Pepe Iborra)\r\n* Use completionSnippetsOn flag
  (#1195) - (Yuya Kono)\r\n* Update tested-with GHC in cabal config - (jneira)\r\n*
  Do not disable parallel GC by default (#1190) - (Pepe Iborra)\r\n* Fix module outline
  becoming stale after switching branches (#1189) - (Pepe Iborra)\r\n* Make adding
  missing constraint work in presence of 'forall' (fixes #1164) (#1177) - (Jan Hrcek)\r\n*
  Bump haskell-lsp to 0.23 (#1146) - (Potato Hatsue)\r\n* Fix #723 (Instance declarations
  in hs-boot files result in GHC errors) (#781) - (Ben Simms)\r\n* Also suggest importing
  methods without parent class (#766) - (Thomas Winant)\r\n* Update links to issues/PRs
  in ghcide tests. (#1142) - (Peter Wicks Stringfield)\r\n* fix suggestAddTypeAnnotation
  regex (#760) - (Kostas Dermentzis)\r\n\r\n### 0.7.0 (2021-01-03)\r\n* Ghcide now
  loads HLS plugins internally - (Pepe Iborra)\r\n* Retry a failed cradle if the cradle
  descriptor changes (#762) - (Pepe Iborra)\r\n* Fix extend imports regression (#769)
  - (Pepe Iborra)\r\n* Perform memory measurement on SIGUSR1 (#761) - (Pepe Iborra)\r\n\r\n###
  0.6.0.2 (2020-12-26)\r\n* Fix disappearing diagnostics bug (#959) - (Pepe Iborra)\r\n*
  Deduplicate module not found diagnostics (#952) - (Pepe Iborra)\r\n* Use qualified
  module name from diagnostics in suggestNewImport (#945) - (Potato Hatsue)\r\n* Disable
  auto extend import snippets in completions (these need a bit more work)\r\n\r\n###
  0.6.0.1 (2020-12-13)\r\n* Fix build with GHC 8.8.2 and 8.8.3 - (Javier Neira)\r\n*
  Update old URLs still pointing to digital-asset - (Jan Hrcek)\r\n\r\n### 0.6.0 (2020-12-06)\r\n*
  Completions: extend explicit import list automatically (#930) - (Guru Devanla)\r\n*
  Completions for identifiers not in explicit import lists (#919) - (Guru Devanla)\r\n*
  Completions for record fields (#900) - (Guru Devanla)\r\n* Bugfix: add constructors
  to import lists correctly (#916) - (Potato Hatsue)\r\n* Bugfix: respect qualified
  identifiers (#938) - (Pepe Iborra)\r\n* Bugfix: partial `pathToId` (#926) - (Samuel
  Ainsworth)\r\n* Bugfix: import suggestions when there's more than one option (#913)
  - (Guru Devanla)\r\n* Bugfix: parenthesize operators when exporting (#906) - (Potato
  Hatsue)\r\n* Opentelemetry traces and heapsize memory analysis (#922) - (Michalis
  Pardalos / Pepe Iborra)\r\n* Make Filetargets absolute before continue using them
  (#914) - (fendor)\r\n* Do not enable every \"unnecessary\" warning by default (#907)
  - (Alejandro Serrano)\r\n* Update implicit-hie to 0.3.0 (#905) - (Avi Dessauer)\r\n\r\n###
  0.5.0 (2020-11-07)\r\n* Use implicit-hie-0.1.2.0 (#880) - (Javier Neira)\r\n* Clarify
  and downgrade implicit-hie message (#883) - (Avi Dessauer)\r\n* Switch back to bytecode
  (#873) - (wz1000)\r\n* Add code action for remove all redundant imports (#867) -
  (Potato Hatsue)\r\n* Fix pretty printer for diagnostic ranges (#871) - (Martin Huschenbett)\r\n*
  Canonicalize import dirs (#870) - (Pepe Iborra)\r\n* Do not show internal hole names
  (#852) - (Alejandro Serrano)\r\n* Downgrade file watch debug log to logDebug from
  logInfo (#848) - (Matthew Pickering)\r\n* Pull in local bindings (#845) - (Sandy
  Maguire)\r\n* Use object code for Template Haskell, emit desugarer warnings (#836)
  - (wz1000)\r\n* Fix code action for adding missing constraints to type signatures
  (#839) - (Jan Hrcek)\r\n* Fix duplicated completions (#837) - (Vitalii)\r\n* FileExists:
  set one watcher instead of thousands (#831) - (Michael Peyton Jones)\r\n* Drop 8.4
  support (#834) - (wz1000)\r\n* Add GetHieAsts rule, Replace SpanInfo, add support
  for DocumentHighlight and scope-aware completions for local variables (#784) - (wz1000)\r\n*
  Tag unused warning as such (#815) - (Alejandro Serrano)\r\n* Update instructions
  for stty error in windows (#825) - (Javier Neira)\r\n* Fix docs tooltip for base
  libraries on Windows (#814) - (Nick Dunets)\r\n* Fix documentation (or source) link
  when html file is less specific than module (#766) - (Nick Dunets)\r\n* Add completion
  tests for records. (#804) - (Guru Devanla)\r\n* Restore identifiers missing from
  hi file (#741) - (maralorn)\r\n* Fix import suggestions when dot is typed (#800)
  - (Marcelo Lazaroni)\r\n\r\n### 0.4.0 (2020-09-15)\r\n* Fixes for GHC source plugins:
  dotpreprocessor works now - (srid)\r\n* Use implicit-hie when no explicit hie.yaml
  (#782) - (Javier Neira)\r\n* Extend position mapping with fuzzy ranges (#785) -
  (wz1000)\r\n* Sort import suggestions (#793) - (Pepe Iborra)\r\n* Save source files
  with HIE files (#701) - (fendor)\r\n* Fully asynchronous request handling (#767)
  - (Pepe Iborra)\r\n* Refinement holes (#748) - (Pepe Iborra)\r\n* Fix haddock to
  markdown conversion (#757) - (George Thomas)\r\n* Expose `getCompletionsLSP` to
  allow completions in hls (#756) - (wz1000)\r\n* Suggestions for missing imports
  from local modules (#739) - (Pepe Iborra)\r\n* Dynamically load libm on Linux for
  each new session (#723) - (Luke Lau)\r\n* Use InitializeParams.rootUri for initial
  session setup (#713) - (shaurya gupta)\r\n* Show documentation on hover for symbols
  defined in the same module (#691) - (wz1000)\r\n* Suggest open imports (#740) -
  (Pepe Iborra)\r\n* module Development.IDE (#724) - (Pepe Iborra)\r\n* Ignore -Werror
  (#738) - (Pepe Iborra)\r\n* Fix issue #710: fix suggest delete binding  (#728) -
  (Ray Shih)\r\n* Generate doc file URL via LSP (to fix it for Windows) (#721) - (Nick
  Dunets)\r\n* Fix `.hie` file location for `.hs-boot` files (#690) - (wz1000)\r\n*
  Use argsVerbose to determine log level in test mode (#717) - (Ziyang Liu)\r\n* output
  which cradle files were found (#716) - (Adam Sandberg Eriksson)\r\n* Typecheck entire
  project on Initial Load and typecheck reverse dependencies of a file on saving (#688)
  - (wz1000)\r\n\r\n### 0.3.0 (2020-09-02)\r\n\r\n* CI: remove (internal) DA Slack
  notifications (#750) - (Gary Verhaegen)\r\n* Add session-loader to hie.yaml (#714)
  - (Luke Lau)\r\n* Codeaction for exporting unused top-level bindings (#711) - (shaurya
  gupta)\r\n* Add links to haddock and hscolour pages in documentation (#699) - (Luke
  Lau)\r\n* Expose GHC.Compat module (#709) - (Pepe Iborra)\r\n* Move session loading
  logic into ghcide library (#697) - (Luke Lau)\r\n* Code action: remove redundant
  constraints for type signature (#692) - (Denis Frezzato)\r\n* Fix Binary instance
  of Q to handle empty file paths (#707) - (Moritz Kiefer)\r\n* Populate ms_hs_date
  in GetModSummary rule (#694) - (Pepe Iborra)\r\n* Allow GHC plugins to be called
  with an updated StringBuffer (#698) - (Alfredo Di Napoli)\r\n* Relax upper bounds
  for GHC 8.10.1 (#705) - (Pepe Iborra)\r\n* Obtain the GHC libdir at runtime (#696)
  - (Luke Lau)\r\n* Expect bench experiments to fail with Cabal (#704) - (Pepe Iborra)\r\n*
  Bump lodash from 4.17.15 to 4.17.19 in /extension (#702) - (dependabot[bot])\r\n*
  Update to hie-bios 0.6.1 (#693) - (fendor)\r\n* Backport HIE files to GHC 8.6 (#689)
  - (wz1000)\r\n* Performance improvements for GetSpanInfo (#681) - (Pepe Iborra)\r\n*
  Code action add default type annotation to remove `-Wtype-defaults` warning (#680)
  - (Serhii)\r\n* Use a global namecache to read `.hie` files (#677) - (wz1000)\r\n*
  Completions need not depend on typecheck of the current file (#670) - (Pepe Iborra)\r\n*
  Fix spaninfo Haddocks for local modules (#678) - (Pepe Iborra)\r\n* Avoid excessive
  retypechecking of TH codebases (#673) - (Pepe Iborra)\r\n* Use stale information
  if it's available to answer requests quickly (#624) - (Matthew Pickering)\r\n* Code
  action: add constraint (#653) - (Denis Frezzato)\r\n* Make BenchHist non buildable
  by default and save logs (#666) - (Pepe Iborra)\r\n* Delete unused top level binding
  code action (#657) - (Serhii)\r\n* stack810.yaml: bump (#651) - (Domen Kozar)\r\n*
  Fix debouncer for 0 delay (#662) - (Pepe Iborra)\r\n* Interface file fixes (#645)
  - (Pepe Iborra)\r\n* Retry GHC 8.10 on Windows (#661) - (Moritz Kiefer)\r\n* Finer
  dependencies for GhcSessionFun (#643) - (Pepe Iborra)\r\n* Send WorkDoneProgressEnd
  only when work is done (#649) - (Pepe Iborra)\r\n* Add a note on differential benchmarks
  (#647) - (Pepe Iborra)\r\n* Cache a ghc session per file of interest (#630) - (Pepe
  Iborra)\r\n* Remove `Strict` from the language extensions used for code actions
  (#638) - (Torsten Schmits)\r\n* Report progress when setting up cradle (#644) -
  (Luke Lau)\r\n* Fix crash when writing to a Barrier more than once (#637) - (Pepe
  Iborra)\r\n* Write a cabal.project file in the benchmark example (#640) - (Pepe
  Iborra)\r\n* Performance analysis over time (#629) - (Pepe Iborra)\r\n* More benchmarks
  (#625) - (Pepe Iborra)\r\n* Canonicalize the locations in the cradle tests (#628)
  - (Luke Lau)\r\n* Add hie.yaml.stack and use none cradle for test data (#626) -
  (Javier Neira)\r\n* Fix a bug in getHiFileRule (#623) - (Pepe Iborra)\r\n* ghc initialization
  error handling (#609) - (Pepe Iborra)\r\n* Fix regression in getSpanInfoRule (#622)
  - (Pepe Iborra)\r\n* Restore Shake profiling (#621) - (Pepe Iborra)\r\n* Use a better
  noRange (#612) - (Neil Mitchell)\r\n* Add back a .ghci file (#607) - (Neil Mitchell)\r\n*
  #573, make haddock errors warnings with the word Haddock in front (#608) - (Neil
  Mitchell)\r\n* Implement Goto Type Definition (#533) - (Matthew Pickering)\r\n*
  remove unnecessary FileExists dependency in GetHiFile (#589) - (Pepe Iborra)\r\n*
  ShakeSession and shakeEnqueue (#554) - (Pepe Iborra)\r\n* Benchmark suite (#590)
  - (Pepe Iborra)\r\n\r\n### 0.2.0 (2020-06-02)\r\n\r\n* Multi-component support (thanks
  @mpickering)\r\n* Support for GHC 8.10 (thanks @sheaf and @chshersh)\r\n* Fix some
  TH issues (thanks @mpickering)\r\n* Automatically pick up changes to cradle dependencies
  (e.g. cabal\r\n  files) (thanks @jinwoo)\r\n* Track dependencies when using `qAddDependentFile`
  (thanks @mpickering)\r\n* Add record fields to document symbols outline (thanks
  @bubba)\r\n* Fix some space leaks (thanks @mpickering)\r\n* Strip redundant path
  information from diagnostics (thanks @tek)\r\n* Fix import suggestions for operators
  (thanks @eddiemundo)\r\n* Significant reductions in memory usage by using interfaces
  and `.hie` files (thanks\r\n  @pepeiborra)\r\n* Minor improvements to completions\r\n*
  More comprehensive suggestions for missing imports (thanks @pepeiborra)\r\n* Group
  imports in document outline (thanks @fendor)\r\n* Upgrade to haskell-lsp-0.22 (thanks
  @bubba)\r\n* Upgrade to hie-bios 0.5 (thanks @fendor)\r\n\r\n### 0.1.0 (2020-02-04)\r\n\r\n*
  Code action for inserting new definitions (see #309).\r\n* Better default GC settings
  (see #329 and #333).\r\n* Various performance improvements (see #322 and #384).\r\n*
  Improvements to hover information (see #317 and #338).\r\n* Support GHC 8.8.2 (see
  #355).\r\n* Include keywords in completions (see #351).\r\n* Fix some issues with
  aborted requests (see #353).\r\n* Use hie-bios 0.4.0 (see #382).\r\n* Avoid stuck
  progress reporting (see #400).\r\n* Only show progress notifications after 0.1s
  (see #392).\r\n* Progress reporting is now in terms of the number of files rather\r\n
  \ than the number of shake rules (see #379).\r\n\r\n### 0.0.6 (2020-01-10)\r\n\r\n*
  Fix type in hover information for do-notation and list\r\n  comprehensions (see
  #243).\r\n* Fix hover and goto-definition for multi-clause definitions (see #252).\r\n*
  Upgrade to `hie-bios-0.3` (see #257)\r\n* Upgrade to `haskell-lsp-0.19` (see #254)\r\n*
  Code lenses for missing signatures are displayed even if the warning\r\n  has not
  been enabled. The warning itself will not be shown if it is\r\n  not enabled. (see
  #232)\r\n* Define `__GHCIDE__` when running CPP to allow for `ghcide`-specific\r\n
  \ workarounds. (see #264)\r\n* Fix some filepath normalization issues. (see #266)\r\n*
  Fix build with `shake-0.18.4` (see #272)\r\n* Fix hover for type constructors and
  type classes. (see #267)\r\n* Support custom preprocessors (see #282)\r\n* Add support
  for code completions (see #227)\r\n* Code action for removing redundant symbols
  from imports (see #290)\r\n* Support document symbol requests (see #293)\r\n* Show
  CPP errors as diagnostics (see #296)\r\n* Code action for adding suggested imports
  (see #295)\r\n\r\n### 0.0.5 (2019-12-12)\r\n\r\n* Support for GHC plugins (see #192)\r\n*
  Update to haskell-lsp 0.18 (see #203)\r\n* Initial support for `TemplateHaskell`
  (see #222)\r\n* Code lenses for missing signatures. These are only shown if\r\n
  \ `-Wmissing-signatures` is enabled. (see #224)\r\n* Fix path normalisation on Windows
  (see #225)\r\n* Fix flickering of the progress indicator (see #230)\r\n\r\n### 0.0.4
  (2019-10-20)\r\n\r\n* Add a ``--version`` cli option (thanks @jacg)\r\n* Update
  to use progress reporting as defined in LSP 3.15. The VSCode\r\n  extension has
  also been updated and should now be making use of\r\n  this.\r\n* Properly declare
  that we should support code actions. This helps\r\n  with some clients that rely
  on this information to enable code\r\n  actions (thanks @jacg).\r\n* Fix a race
  condition caused by sharing the finder cache between\r\n  concurrent compilations.\r\n*
  Avoid normalizing include dirs. This avoids issues where the same\r\n  file ends
  up twice in the module graph, e.g., with different casing\r\n  for drive letters.\r\n\r\n###
  0.0.3 (2019-09-21)\r\n"
basic-deps:
  shake: '>=0.18.4'
  haddock-library: '>=1.8 && <1.10'
  lsp-test: ==0.13.0.0
  ghc: '>=8.6'
  lsp: ==1.1.1.0
  cryptohash-sha1: '>=0.11.100 && <0.12'
  ghc-check: '>=0.5.0.1'
  bytestring: -any
  dependent-sum: -any
  fingertree: -any
  case-insensitive: -any
  unliftio: -any
  extra: '>=1.7.4'
  unix: -any
  hiedb: ==0.3.0.1
  stm: -any
  base: ==4.*
  time: -any
  sqlite-simple: -any
  Diff: -any
  unordered-containers: '>=0.2.10.0'
  text: -any
  hie-compat: ^>=0.1.0.0
  dependent-map: -any
  safe-exceptions: -any
  syb: -any
  ghc-exactprint: -any
  filepath: -any
  gitrev: -any
  process: -any
  async: -any
  implicit-hie-cradle: '>=0.3.0.2 && <0.4'
  dlist: -any
  data-default: -any
  hie-bios: '>=0.7.1 && <0.8.0'
  array: -any
  bytestring-encoding: -any
  sorted-list: -any
  containers: -any
  ghcide: -any
  lens: -any
  unliftio-core: -any
  ghc-paths: -any
  ghc-boot: -any
  binary: -any
  utf8-string: -any
  rope-utf16-splay: -any
  hslogger: -any
  regex-tdfa: '>=1.3.1.0'
  fuzzy: -any
  retrie: -any
  network-uri: -any
  mtl: -any
  hashable: -any
  base16-bytestring: '>=0.1.1 && <0.2'
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  parallel: -any
  deepseq: -any
  opentelemetry: '>=0.6.1'
  ghc-boot-th: -any
  hls-plugin-api: '>=1.0.0.0 && <1.1'
  Glob: -any
  aeson: -any
  lsp-types: ==1.1.*
  safe: -any
  heapsize: ==0.3.*
  vector: -any
  prettyprinter-ansi-terminal: -any
  directory: -any
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.6.0.1
- 0.6.0.2
- 0.7.0.0
- 0.7.1.0
- 0.7.2.0
- 0.7.3.0
- 0.7.4.0
- 0.7.5.0
- 1.0.0.0
author: Digital Asset and Ghcide contributors
latest: 1.0.0.0
description-type: markdown
description: "# `ghcide` - A library for building Haskell IDE tooling\r\n\r\nOur vision
  is that you should build an IDE by combining:\r\n\r\n![vscode](https://raw.githubusercontent.com/haskell/ghcide/master/img/vscode2.png)\r\n\r\n*
  [`hie-bios`](https://github.com/mpickering/hie-bios) for determining where your
  files are, what are their dependencies, what extensions are enabled and so on;\r\n*
  `ghcide` (i.e. this library) for defining how to type check, when to type check,
  and producing diagnostic messages;\r\n* A bunch of plugins that haven't yet been
  written, e.g. [`hie-hlint`](https://github.com/ndmitchell/hlint) and [`hie-ormolu`](https://github.com/tweag/ormolu),
  to choose which features you want;\r\n* [`haskell-lsp`](https://github.com/alanz/haskell-lsp)
  for sending those messages to a [Language Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/)
  server;\r\n* An LSP client for your editor.\r\n\r\nThere are more details about
  our approach [in this blog post](https://4ta.uk/p/shaking-up-the-ide).\r\n\r\n##
  Features\r\n\r\n`ghcide` already exports the following features via the lsp protocol:\r\n\r\n|
  Feature | LSP name |\r\n| - | - |\r\n| Display error messages (parse errors, typecheck
  errors, etc.) and enabled warnings. | diagnostics |\r\n| Go to definition in local
  package | definition  |\r\n| Display type and source module of values | hover |\r\n|
  Remove redundant imports, replace suggested typos for values and module imports,
  fill type holes, insert missing type signatures, add suggested ghc extensions  |
  codeAction (quickfix) |\r\n\r\n\r\n## Limitations to Multi-Component support\r\n\r\n`ghcide`
  supports loading multiple components into the same session so that\r\nfeatures such
  as go-to definition work across components. However, there are\r\nsome limitations
  to this.\r\n\r\n1. You will get much better results currently manually specifying
  the hie.yaml file.\r\nUntil tools like cabal and stack provide the right interface
  to support multi-component\r\nprojects, it is always advised to specify explicitly
  how your project partitions.\r\n2. Cross-component features only work if you have
  loaded at least one file\r\nfrom each component.\r\n3. There is a known issue where
  if you have three components, such that A depends on B which depends on C\r\nthen
  if you load A and C into the session but not B then under certain situations you\r\ncan
  get strange errors about a type coming from two different places. See [this repo](https://github.com/fendor/ghcide-bad-interface-files)
  for\r\na simple reproduction of the bug.\r\n\r\n## Using it\r\n\r\n`ghcide` is not
  an end-user tool, [don't use `ghcide`](https://neilmitchell.blogspot.com/2020/09/dont-use-ghcide-anymore-directly.html)
  directly (more about the rationale [here](https://github.com/haskell/ghcide/pull/939)).\r\n\r\n
  [`haskell-language-server`](http://github.com/haskell/haskell-language-server) is
  an LSP server built on top of `ghcide` with additional features and a user friendly
  deployment model. To get it, simply install the [Haskell extension](https://marketplace.visualstudio.com/items?itemName=haskell.haskell)
  in VS Code, or download prebuilt binaries from the [haskell-language-server](https://github.com/haskell/haskell-language-server)
  project page.\r\n\r\n\r\nThe instructions below are meant for developers interested
  in setting up ghcide as an LSP server for testing purposes.\r\n\r\n### Install `ghcide`\r\n\r\n####
  With Nix\r\n\r\nNote that you need to compile `ghcide` with the same `ghc` as the
  project you are working on.\r\n\r\n1. If the `ghc` you are using matches the version
  (or better is) from `nixpkgs` it‘s easiest to use the `ghcide` from `nixpkgs`. You
  can do so via\r\n   ```\r\n   nix-env -iA haskellPackages.ghcide\r\n   ```\r\n   or
  e.g. including `pkgs.haskellPackages.ghcide` in your projects `shell.nix`.\r\n   Depending
  on your `nixpkgs` channel that might not be the newest `ghcide`, though.\r\n\r\n2.
  If your `ghc` does not match nixpkgs you should try the [ghcide-nix repository](https://github.com/cachix/ghcide-nix)\r\n
  \  which provides a `ghcide` via the `haskell.nix` infrastructure.\r\n\r\n#### With
  Cabal or Stack\r\n\r\nFirst install the `ghcide` binary using `stack` or `cabal`,
  e.g.\r\n\r\n1. `git clone https://github.com/haskell/ghcide.git`\r\n2. `cd ghcide`\r\n3.
  `cabal install` or `stack install` (and make sure `~/.local/bin` is on your `$PATH`)\r\n\r\nIt's
  important that `ghcide` is compiled with the same compiler you use to build your
  projects.\r\n\r\n### Test `ghcide`\r\n\r\nNext, check that `ghcide` is capable of
  loading your code. Change to the project directory and run `ghcide`, which will
  try and load everything using the same code as the IDE, but in a way that's much
  easier to understand. For example, taking the example of [`shake`](https://github.com/ndmitchell/shake),
  running `ghcide` gives some error messages and warnings before reporting at the
  end:\r\n\r\n```console\r\nFiles that failed:\r\n * .\\model\\Main.hs\r\n * .\\model\\Model.hs\r\n
  * .\\model\\Test.hs\r\n * .\\model\\Util.hs\r\n * .\\output\\docs\\Main.hs\r\n *
  .\\output\\docs\\Part_Architecture_md.hs\r\nCompleted (152 worked, 6 failed)\r\n```\r\n\r\nOf
  the 158 files in Shake, as of this moment, 152 can be loaded by the IDE, but 6 can't
  (error messages for the reasons they can't be loaded are given earlier). The failing
  files are all prototype work or test output, meaning I can confidently use Shake.\r\n\r\nThe
  `ghcide` executable mostly relies on [`hie-bios`](https://github.com/mpickering/hie-bios)
  to do the difficult work of setting up your GHC environment. If it doesn't work,
  see [the `hie-bios` manual](https://github.com/mpickering/hie-bios#readme) to get
  it working. My default fallback is to figure it out by hand and create a `direct`
  style [`hie.yaml`](https://github.com/ndmitchell/shake/blob/master/hie.yaml) listing
  the command line arguments to load the project.\r\n\r\nIf you can't get `ghcide`
  working outside the editor, see [this setup troubleshooting guide](docs/Setup.md).
  Once you have got `ghcide` working outside the editor, the next step is to pick
  which editor to integrate with.\r\n\r\n### Optimal project setup\r\n\r\n`ghcide`
  has been designed to handle projects with hundreds or thousands of modules. If `ghci`
  can handle it, then `ghcide` should be able to handle it. The only caveat is that
  this currently requires GHC >= 8.6, and that the first time a module is loaded in
  the editor will trigger generation of support files in the background if those do
  not already exist.\r\n\r\n### Configuration\r\n\r\n`ghcide` accepts the following
  lsp configuration options:\r\n\r\n```typescript\r\n{\r\n  // When to check the dependents
  of a module\r\n  // AlwaysCheck means retypechecking them on every change\r\n  //
  CheckOnSave means dependent/parent modules will only be checked when you save\r\n
  \ // \"CheckOnSaveAndClose\" by default\r\n  checkParents : \"NeverCheck\" | \"CheckOnClose\"
  | \"CheckOnSaveAndClose\" | \"AlwaysCheck\" | ,\r\n  // Whether to check the entire
  project on initial load\r\n  // true by default\r\n  checkProject : boolean\r\n\r\n}\r\n```\r\n\r\n###
  Using with VS Code\r\n\r\nThe [Haskell](https://marketplace.visualstudio.com/items?itemName=haskell.haskell)
  extension has a setting for ghcide.\r\n\r\n### Using with Atom\r\n\r\nYou can follow
  the [instructions](https://github.com/moodmosaic/ide-haskell-ghcide#readme) to install
  with `apm`.\r\n\r\n### Using with Sublime Text\r\n\r\n* Install [LSP](https://packagecontrol.io/packages/LSP)\r\n*
  Press Ctrl+Shift+P or Cmd+Shift+P in Sublime Text and search for *Preferences: LSP
  Settings*, then paste these settings\r\n```\r\n{\r\n  \"clients\":\r\n  {\r\n    \"ghcide\":\r\n
  \   {\r\n      \"enabled\"   : true,\r\n      \"languageId\": \"haskell\",\r\n      \"command\"
  \  : [\"ghcide\", \"--lsp\"],\r\n      \"scopes\"    : [\"source.haskell\"],\r\n
  \     \"syntaxes\"  : [\"Packages/Haskell/Haskell.sublime-syntax\"]\r\n    }\r\n
  \ }\r\n}\r\n```\r\n\r\n### Using with Emacs\r\n\r\nIf you don't already have [MELPA](https://melpa.org/#/)
  package installation configured, visit MELPA [getting started](https://melpa.org/#/getting-started)
  page to get set up. Then, install [`use-package`](https://melpa.org/#/use-package).\r\n\r\nNow
  you have a choice of two different Emacs packages which can be used to communicate
  with the `ghcide` LSP server:\r\n\r\n+ `lsp-ui`\r\n+ `eglot` (requires Emacs 26.1+)\r\n\r\nIn
  each case, you can enable support by adding the shown lines to your `.emacs`:\r\n\r\n####
  lsp-ui\r\n\r\n```elisp\r\n;; LSP\r\n(use-package flycheck\r\n  :ensure t\r\n  :init\r\n
  \ (global-flycheck-mode t))\r\n(use-package yasnippet\r\n  :ensure t)\r\n(use-package
  lsp-mode\r\n  :ensure t\r\n  :hook (haskell-mode . lsp)\r\n  :commands lsp)\r\n(use-package
  lsp-ui\r\n  :ensure t\r\n  :commands lsp-ui-mode)\r\n(use-package lsp-haskell\r\n
  :ensure t\r\n :config\r\n (setq lsp-haskell-process-path-hie \"ghcide\")\r\n (setq
  lsp-haskell-process-args-hie '())\r\n ;; Comment/uncomment this line to see interactions
  between lsp client/server.\r\n ;;(setq lsp-log-io t)\r\n)\r\n```\r\n\r\n#### eglot\r\n\r\n````elisp\r\n(use-package
  eglot\r\n  :ensure t\r\n  :config\r\n  (add-to-list 'eglot-server-programs '(haskell-mode
  . (\"ghcide\" \"--lsp\"))))\r\n````\r\n\r\n### Using with Vim/Neovim\r\n\r\n####
  LanguageClient-neovim\r\nInstall [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\r\n\r\nAdd
  this to your vim config:\r\n```vim\r\nlet g:LanguageClient_rootMarkers = ['*.cabal',
  'stack.yaml']\r\nlet g:LanguageClient_serverCommands = {\r\n    \\ 'rust': ['rls'],\r\n
  \   \\ 'haskell': ['ghcide', '--lsp'],\r\n    \\ }\r\n```\r\n\r\nRefer to `:he LanguageClient`
  for more details on usage and configuration.\r\n\r\n#### vim-lsp\r\nInstall [vim-lsp](https://github.com/prabirshrestha/vim-lsp).\r\n\r\nAdd
  this to your vim config:\r\n\r\n```vim\r\nau User lsp_setup call lsp#register_server({\r\n
  \   \\ 'name': 'ghcide',\r\n    \\ 'cmd': {server_info->['/your/path/to/ghcide',
  '--lsp']},\r\n    \\ 'whitelist': ['haskell'],\r\n    \\ })\r\n```\r\n\r\nTo verify
  it works move your cursor over a symbol and run `:LspHover`.\r\n\r\n### coc.nvim\r\n\r\nInstall
  [coc.nvim](https://github.com/neoclide/coc.nvim)\r\n\r\nAdd this to your coc-settings.json
  (which you can edit with :CocConfig):\r\n\r\n```json\r\n{\r\n  \"languageserver\":
  {\r\n    \"haskell\": {\r\n      \"command\": \"ghcide\",\r\n      \"args\": [\r\n
  \       \"--lsp\"\r\n      ],\r\n      \"rootPatterns\": [\r\n        \".stack.yaml\",\r\n
  \       \".hie-bios\",\r\n        \"BUILD.bazel\",\r\n        \"cabal.config\",\r\n
  \       \"package.yaml\"\r\n      ],\r\n      \"filetypes\": [\r\n        \"hs\",\r\n
  \       \"lhs\",\r\n        \"haskell\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHere's
  a nice article on setting up neovim and coc: [Vim and Haskell in\r\n2019](http://marco-lopes.com/articles/Vim-and-Haskell-in-2019/)
  (this is actually for haskell-ide, not ghcide)\r\n\r\nHere is a Docker container
  that pins down the build and configuration for\r\nNeovim and ghcide on a minimal
  Debian 10 base system:\r\n[docker-ghcide-neovim](https://github.com/carlohamalainen/docker-ghcide-neovim/).\r\n\r\n###
  SpaceVim\r\n\r\nIn the `autocomplete` layer, add the `autocomplete_method` option
  to force the use of `coc`:\r\n\r\n```toml\r\n[[layers]]\r\n  name = 'autocomplete'\r\n
  \ auto-completion-return-key-behavior = \"complete\"\r\n  auto-completion-tab-key-behavior
  = \"smart\"\r\n  [options]\r\n    autocomplete_method = \"coc\"\r\n```\r\n\r\nAdd
  this to your coc-settings.json (which you can edit with :CocConfig):\r\n\r\n```json\r\n{\r\n
  \ \"languageserver\": {\r\n    \"haskell\": {\r\n      \"command\": \"ghcide\",\r\n
  \     \"args\": [\r\n        \"--lsp\"\r\n      ],\r\n      \"rootPatterns\": [\r\n
  \       \".stack.yaml\",\r\n        \".hie-bios\",\r\n        \"BUILD.bazel\",\r\n
  \       \"cabal.config\",\r\n        \"package.yaml\"\r\n      ],\r\n      \"filetypes\":
  [\r\n        \"hs\",\r\n        \"lhs\",\r\n        \"haskell\"\r\n      ]\r\n    }\r\n
  \ }\r\n}\r\n```\r\n\r\nThis example above describes a setup in which `ghcide` is
  installed\r\nusing `stack install ghcide` within a project.\r\n\r\n### Using with
  Kakoune\r\n\r\nInstall [kak-lsp](https://github.com/ul/kak-lsp).\r\n\r\nChange `kak-lsp.toml`
  to include this:\r\n\r\n```toml\r\n[language.haskell]\r\nfiletypes = [\"haskell\"]\r\nroots
  = [\"Setup.hs\", \"stack.yaml\", \"*.cabal\", \"cabal.project\", \"hie.yaml\"]\r\ncommand
  = \"ghcide\"\r\nargs = [\"--lsp\"]\r\n```\r\n\r\n## Hacking on ghcide\r\n\r\nTo
  build and work on `ghcide` itself, you should use cabal, e.g.,\r\nrunning `cabal
  test` will execute the test suite. You can use `stack test` too, but\r\nnote that
  some tests will fail, and none of the maintainers are currently using `stack`.\r\n\r\nIf
  you are using Nix, there is a Cachix nix-shell cache for all the supported platforms:
  `cachix use haskell-ghcide`.\r\n\r\nIf you are using Windows, you should disable
  the `auto.crlf` setting and configure your editor to use LF line endings, directly
  or making it use the existing `.editor-config`.\r\n\r\nIf you are chasing down test
  failures, you can use the tasty-rerun feature by running tests as\r\n\r\n    cabal
  test --test-options\"--rerun\"\r\n\r\nThis writes a log file called `.tasty-rerun-log`
  of the failures, and only runs those.\r\nSee the [tasty-rerun](https://hackage.haskell.org/package/tasty-rerun-1.1.17/docs/Test-Tasty-Ingredients-Rerun.html)
  documentation for other options.\r\n\r\nIf you are touching performance sensitive
  code, take the time to run a differential\r\nbenchmark between HEAD and master using
  the benchHist script. This assumes that\r\n\"master\" points to the upstream master.\r\n\r\nRun
  the benchmarks with `cabal bench`.\r\n\r\nIt should take around 15 minutes and the
  results will be stored in the `bench-results` folder. To interpret the results,
  see the comments in the `bench/hist/Main.hs` module.\r\n\r\nMore details in [bench/README](bench/README.md)\r\n\r\n\r\n##
  History and relationship to other Haskell IDE's\r\n\r\nThe teams behind this project
  and the [`haskell-ide-engine`](https://github.com/haskell/haskell-ide-engine#readme)
  have agreed to join forces under the [`haskell-language-server` project](https://github.com/haskell/haskell-language-server),
  see the [original announcement](https://neilmitchell.blogspot.com/2020/01/one-haskell-ide-to-rule-them-all.html).
  The technical work is ongoing, with the likely model being that this project serves
  as the core, while plugins and integrations are kept in the [`haskell-language-server`
  project](https://github.com/haskell/haskell-language-server).\r\n\r\nThe code behind
  `ghcide` was originally developed by [Digital Asset](https://digitalasset.com/)
  as part of the [DAML programming language](https://github.com/digital-asset/daml).
  DAML is a smart contract language targeting distributed-ledger runtimes, based on
  [GHC](https://www.haskell.org/ghc/) with custom language extensions. The DAML programming
  language has [an IDE](https://webide.daml.com/), and work was done to separate off
  a reusable Haskell-only IDE (what is now `ghcide`) which the [DAML IDE then builds
  upon](https://github.com/digital-asset/daml/tree/master/compiler/damlc). Since that
  time, there have been various [non-Digital Asset contributors](https://github.com/haskell/ghcide/graphs/contributors),
  in addition to continued investment by Digital Asset. The project has been handed
  over to Haskell.org as of September 2020.\r\n\r\nThe Haskell community [has](https://github.com/DanielG/ghc-mod)
  [various](https://github.com/chrisdone/intero) [IDE](https://github.com/rikvdkleij/intellij-haskell)
  [choices](http://leksah.org/), but the one that had been gathering momentum is [`haskell-ide-engine`](https://github.com/haskell/haskell-ide-engine#readme).
  Our project owes a debt of gratitude to the `haskell-ide-engine`. We reuse libraries
  from their ecosystem, including [`hie-bios`](https://github.com/mpickering/hie-bios#readme)
  (a likely future environment setup layer in `haskell-ide-engine`), [`haskell-lsp`](https://github.com/alanz/haskell-lsp#readme)
  and [`lsp-test`](https://github.com/bubba/lsp-test#readme) (the `haskell-ide-engine`
  [LSP protocol](https://microsoft.github.io/language-server-protocol/) pieces). We
  make heavy use of their contributions to GHC itself, in particular the work to make
  GHC take string buffers rather than files.\r\n\r\nThe best summary of the architecture
  of `ghcide` is available [this talk](https://www.youtube.com/watch?v=cijsaeWNf2E&list=PLxxF72uPfQVRdAsvj7THoys-nVj-oc4Ss)
  ([slides](https://ndmitchell.com/downloads/slides-making_a_haskell_ide-07_sep_2019.pdf)),
  given at [MuniHac 2019](https://munihac.de/2019.html). However, since that talk
  the project has renamed from `hie-core` to `ghcide`, and the repo has moved to [this
  location](https://github.com/haskell/ghcide/).\r\n"
license-name: Apache-2.0
