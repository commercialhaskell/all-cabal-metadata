all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
author: Takenobu Tani
basic-deps:
  base: '>=4.7 && <5'
  binary: '>=0'
changelog: |
  # Changelog for ghci-hexcalc

  ## 0.1.1.0  -- Jul. 2019

  * Add floating operations:
    - .@float, .@double, hex2float, float2hex, hex2double, double2hex


  ## 0.1.0.2  -- Mar. 2019

  * Update properties to use `suchThat` instead of `==>`


  ## 0.1.0.1  -- Oct. 2018

  * Update cabal file for test
  * Update README and example


  ## 0.1.0.0  -- Oct. 2018

  * First version.
changelog-type: markdown
description: "<p align=\"left\"><img src=\"http://takenobu-hs.github.io/downloads/images/haskell-logo-s.png\"/></p>\n\nGHCi
  as a Hex-Calculator interactive\n====================================\n\nThe GHCi
  (REPL for Haskell) is a very useful interactive tool, it's not only for debugging
  :)  \nThis package \"ghci-hexcalc\" is an interactive hex-calculator using Haskell/GHCi.\nThis
  is a simple and casual tool like Perl and Excel for our daily work.\n\nInteractive
  oriented features:\n* Short-named operators and functions\n* Show values in hexadecimal
  format by default\n* Suppress type annotation of numeric literals by type inference\n*
  Postfix-notation available \n* Highlight available\n\nSee also [description on Hackage](https://hackage.haskell.org/package/ghci-hexcalc).\n\nContents\n--------\n\n
  \ * [Run](#run)\n  * [Example of use](#example-of-use)\n  * [Specification](#specification)\n
  \ * [Appendix](#appendix)\n\n\nRun\n---\n\nBare GHCi:\n```\n$ ghci src/Data/GHex.hs\n```\nor\n```\n$
  ghci -ghci-script example/example.ghci\n```\n\nStack:\n```\n$ stack exec -- ghci
  \ src/Data/GHex.hs\n```\n\n\nExample of use\n--------------\n\n#### Numeric literals
  by `Hex` type annotation\n\nThe value of `Hex` type is shown as hexadecimal format.\n\n```\nghci>
  1 :: Hex\n0x0000_0000_0000_0001\n```\n\n```\nghci> 0xff :: Hex\n0x0000_0000_0000_00ff\n```\n\n```\nghci>
  0b1011 :: Hex\n0x0000_0000_0000_000b\n```\n\n```\nghci> 16 + 3 :: Hex\n0x0000_0000_0000_0013\n```\n\n####
  Variables on GHCi\n\nYou could use variables of Haskell syntax on GHCi.\n\n```\nghci>
  x = 255 :: Hex\nghci> x + 3\nghci> y = it       -- `it` is GHCi's variable. It stores
  the previous result.\n```\n\n#### Arithmetic operations\n\nYou could also use arithmetic
  operators in `Hex` type.\n\n```\nghci> x + 3\nghci> (x * 256) -1\nghci> x + 2^10\nghci>
  neg x\n```\n\n#### Logical operations\n\nNumeric literals applied to functions of
  this package are inferred as `Hex` type.\n\n```\nghci> 0xff .& 6\nghci> 256 .| 16\nghci>
  100 .^ 5\nghci> inv 255\n```\n\n#### Shift operations\n\n```\nghci> 1 .<< 16\nghci>
  256 .>> 1\n```\n\n\n#### Div and mod operations\n\n```\nghci> 0xff0000 ./ 256\nghci>
  0xfedc .% 256\n```\n\n#### Generate bit and byte with position\n\n```\nghci> bit1
  15\n0x0000_0000_0000_8000\n```\n\n```\nghci> bits 7 4\n0x0000_0000_0000_00f0\n```\n\n```\nghci>
  bitList [15, 14, 1]\n0x0000_0000_0000_c002\n```\n\n```\nghci> byte1 2\n0x0000_0000_00ff_0000\n```\n\n```\nghci>
  bytes 4 3\n0x0000_00ff_ff00_0000\n```\n\n#### Extract and replace bits\n```\nghci>
  gets 0xabcd 15 12\n0x0000_0000_0000_000a\n```\n```\nghci> puts 0xabcd 15 12 7\n0x0000_0000_0000_7bcd\n```\n\n####
  Set and clear bits\n\n```\nghci> sbits 0x1234 11 8\n0x0000_0000_0000_1f34\n```\n\n```\nghci>
  cbits 0x1234 7 4\n0x0000_0000_0000_1204\n```\n\n\n#### Get asserted bit positions
  and count bits\n\n```\nghci> pos1 0x0081\n[7,0]\n```\n\n```\nghci> pos0 $ inv 0x0100\n[8]\n```\n\n```\nghci>
  count1 0b11001\n3\n```\n\n\n#### Permute, split and merge\n\n```\nghci> gather 0x12345678
  0x0ff000f0\n0x0000_0000_0000_0237\n```\n\n```\nghci> scatter 0x12345678 0xff00ff00
  0xabcd\n0x0000_0000_ab34_cd78\n```\n\n```\nghci> (3,0b101) .++ (2,0b11)\n(5,0x0000_0000_0000_0017)\n```\n\n\n####
  Predefined-constants\n\n```\nghci> mega\n0x0000_0000_0010_0000\n```\n\n```\nghci>
  giga\n0x0000_0000_4000_0000\n```\n\n```\nghci> 4 * giga - 1\n0x0000_0000_ffff_ffff\n```\n\n```\nghci>
  2^32 ./ giga\n0x0000_0000_0000_0004\n```\n\n#### Postfix-notation\n\nThe operator
  `.@` is an operator for postfix notation.\nIt's the same as `Data.Function.(&)`.\n\nThe
  following two are the same:\n\n```\nghci> pos1 0xf0\n[7,6,5,4]\n```\n\n```\nghci>
  0xf0 .@pos1\n[7,6,5,4]\n```\n\n\n#### Formatting for hex, bin, dec, Tera,Giga,Mega,Kilo,
  signed and floating\n\nFormatting functions convert a `Hex` type value to a string
  type for each format.  \n\n```\nghci> 2^16 .@hex\n\"0x0000_0000_0001_0000\"\n```\n\n```\nghci>
  100 .@bin\n\"0b110_0100\"\n```\n\n```\nghci> 100 .@bin16\n\"0b0000_0000_0110_0100\"\n```\n\n```\nghci>
  giga .@dec\n\"1073741824\"\n```\n\n```\nghci> bit 43 .@decT\n\"8\"\n```\n\n```\nghci>
  0xffffffffffffffff .@signed\n\"-1\"\n```\n\n```\nghci> 0x3fc00000 .@float\n\"1.5\"\n```\n\n\n####
  Hilighting specified bits\n\nThe function `color` highlights specified bits. It
  inverts the color in the ANSI sequence for the specified bits.\n\n```\nghci> 0xff
  .@color (bits 7 4)\n0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1111_1111\n
  \                                                                       ^^^^\n```\n\n```\nghci>
  0xffffffff .@color mega\n0b0000_0000_0000_0000_0000_0000_0000_0000_1111_1111_1111_1111_1111_1111_1111_1111\n
  \                                                      ^\n```\n\n```\nghci> 0 .@color
  (bitList [54,53,4,3,2])\n0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000\n
  \            ^^                                                            ^ ^^\n```\n\n\n####
  Input and convert\n\nThe function `inputRawHexIO`  inputs a string and converts
  it to a `Hex` type.\n\n```\nghci> inputRawHexIO\nff aa  (your input)\nghci> x =
  it\nghci> x\n0x0000_0000_0000_ffaa\n```\n\n```\nghci> x <- inputRawHexIO\nff aa
  \ (your input)\nghci> x\n0x0000_0000_0000_ffaa\n```\n\n\n#### Floating conversion
  examples\n\n```\nghci> float2hex 1.0\n0x0000_0000_3f80_0000\n```\n\n```\nghci> hex2float
  0x3fc00000\n1.5\n```\n\n```\nghci> double2hex 1.0\n0x3ff0_0000_0000_0000\n```\n\n```\nghci>
  hex2double 0x40091eb851eb851f\n3.14\n```\n\n\n#### Combination examples\n\n```\nghci>
  x .| bit1 18\nghci> (x .<< 4) .& 0xf0\nghci> bit1 33 ./ giga\nghci> 2 * mega .@dec\nghci>
  4 * tera .@pos1\nghci> foldr1 (.|) [0xa, 0xcc, 0xd1b]\nghci> 0 .@color (tera .|
  giga .| mega .| kilo)\n```\n\n#### Using Data.Bits library\n\n`Hex` type is deriving
  `Data.Bits` type. So you could use functions of `Data.Bits`.\n\n```\nghci> x `testBit`
  8\nghci> x `clearBit` 15\nghci> x .&. 0xff\nghci> x `rotateL` 4\nghci> countLeadingZeros
  x\n```\n\n#### Clear screen\n\n```\nghci> cls\n```\n\n#### Simple help\n\nShow simple
  usage:\n\n```\nghci> usage\n```\n\nListing APIs with `:browse` ghci command:\n\n```\nghci>
  :browse\nnewtype Hex = Hex Word\n(.&) :: Hex -> Hex -> Hex\n(.|) :: Hex -> Hex ->
  Hex\n(.^) :: Hex -> Hex -> Hex\ninv :: Hex -> Hex\n  :\n```\n\nWhen you run with
  `ghci -haddock`, you could also use `:doc` ghci command (ghc8.6 or later):\n\n```\nghci>
  :doc bits\n Set bits from n1 to n2\n\n >>> bits 15 8\n 0x0000_0000_0000_ff00\n```\n\n\nSpecification\n-------------\n\nPlease
  see also [Hackage document](http://hackage.haskell.org/package/ghci-hexcalc/docs/Data-GHex.html)
  in detail.\n\n#### General\n\n* Core type:\n  * The core type of this package is
  the `Hex` type.\n  * `Hex` type is implemented in unsigned `Word`.\n  * `Hex` type
  is 64 bit length on x86_64.\n* Operators and functions:\n  * Operators in this package
  begin with `.`(dot), like `.&` and `.|`.\n  * Most functions align bits to the LSB
  side.\n\n\n#### Numeric literals by `Hex` type annotation\n\n| Operation                     |
  Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `:: Hex`                      | Type annotation for basic type `Hex`  |\n| `255
  :: Hex`                  | Decimal number literal                |\n| `0xff :: Hex`
  \                | Hexadecimal number literal            |\n| `0b1101 :: Hex`               |
  binary number literal                 |\n\t\t\t\t\n\n#### Derived operations\n\n|
  Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  Many operations               | Eq, Ord, Num, Enum, Real, Bounded, Integral, Bits
  and FiniteBits class available  |\n\n\n#### Postfix operator\n\n| Operation                     |
  Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `.@`                          | Postfix-notation operator             |\n\n\n####
  Arithmetic operations\n\n| Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `+`, `-`, `*`, `^`, ...       | Num, Real class available             |\n| `neg`
  x1                      | Negation. (inv x1 + 1)                |\n| `signext` x1
  n1               | Sign extention                        |\n| x1 `./` x2                    |
  Integer division                      |\n| x1 `.%` x2                    | Integer
  modulo                        |\n\n\n#### Logical operations\n\n| Operation                     |
  Description                           |\n|:------------------------------|:--------------------------------------|\n|
  x1 `.&` x2                    | Bitwise \"and\"                         |\n| x1
  `.\\|` x2                   | Bitwise \"or\"                          |\n| x1 `.^`
  x2                    | Bitwise \"xor\"                         |\n| `inv` x1                      |
  Bitwise \"not\" (invert)                |\n\n\n#### Shift operations\n\n| Operation
  \                    | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  x1 `.<<` n1                   | Logical left shift                    |\n| x1 `.>>`
  n1                   | Logical right shift                   |\n\n\n#### Generate
  bit and byte with position\n\n| Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `bit1` n1                     | Set a bit                             |\n| `bits`
  n1 n2                  | Set bits from n1 to n2                |\n| `bitList` [n1,
  n2, ... nn]    | Set bits with List                    |\n| `byte1` n1                    |
  Set a byte                            |\n| `bytes` n1 n2                 | Set bytes
  from n1 to n2               |\n| `mask` n1                     | Set bits from 0
  to n1                 |\n\n\n#### Extract and replace bits\n\n| Operation                     |
  Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `gets` x1 n1 n2               | Extract bits from n1 to n2            |\n| `puts`
  x1 n1 n2 x2            | Replace bits from n1 to n2            |\n|                               |
  \                                      |\n| `getBit1`  x1 n1              | Extract
  bit at n1                     |\n| `getBits`  x1 n1 n2           | Synonym to gets
  \                      |\n| `getByte1` x1 n1              | Extract bytes from n1
  to 0            |\n| `getBytes` x1 n1 n2           | Extract bytes from n1 to n2
  \          |\n| `putBit1`  x1 n1 x2           | Replace byte at n1                    |\n|
  `putBits`  x1 n1 n2 x2        | Synonym to puts                       |\n| `putBytes`
  x1 n1 n2 x2        | Replace bytes from n1 to n2           |\n\n\n#### Set and clear
  bits\n\n| Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `sbits` x1 n1 n2              | Set bits from n1 to n2 of x1          |\n| `cbits`
  x1 n1 n2              | Clear bits from n1 to n2 of x1        |\n\n\n#### Get asserted
  bit positions and count bits\n\n| Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `pos1` x1                     | Get bit positions asserted with 1     |\n| `pos0`
  x1                     | Get bit positions asserted with 0     |\n|                               |
  \                                      |\n| `range` x1                    | Get
  upper and lower boundaries        |\n|                               |                                       |\n|
  `count1` x1                   | Count bit-1                           |\n| `count0`
  x1                   | Count bit-0                           |\n\n\n#### Permute\n\n|
  Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `bitrev` x1                   | Reverse bits                          |\n| `byterev`
  x1                  | Reverse bytes                         |\n|                               |
  \                                      |\n| `gather` x1 x2                | Gather
  bits from x1 by x2             |\n| `scatter` x1 x2 x3            | Scatter bits
  from x3 to x1 by x2      |\n\n\n#### Split and merge\n\n| Operation                     |
  Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `splitBits` x1                | Split bits to List                    |\n| `splitBytes`
  x1               | Split bytes to List                   |\n| `mergeBits` [x1, x2,
  .. xn]   | Merge bits from List                  |\n| `mergeBytes` [x1, x2, .. xn]
  \ | Merge bytes from List                 |\n|                               |                                       |\n|
  `splitPairs` [n1, .. nn] x1   | Split bits to pair of (length,Hex)    |\n| `mergePairs`
  [(n1,x1),..]     | Merge bits from pair of (length,Hex)  |\n| (n1,x1) `.++` (n2,x2)
  \        | Concatinate pairs of (length,Hex)     |\n\n\n#### Predefined-constants\n\n|
  Constant                      | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `exa`                         | 2^60 (It's not 10^18)                 |\n| `peta`
  \                       | 2^50 (It's not 10^15)                 |\n| `tera`                        |
  2^40 (It's not 10^12)                 |\n| `giga`                        | 2^30
  (It's not 10^9)                  |\n| `mega`                        | 2^20 (It's
  not 10^6)                  |\n| `kilo`                        | 2^10 (It's not 10^3)
  \                 |\n|                               |                                       |\n|
  `zero`                        | 0                                     |\n| `one`
  \                        | 1                                     |\n| `all0`                        |
  0x0                                   |\n| `all1`                        | inv all0
  \                             |\n|                               |                                       |\n|
  `hexBitSize`                  | 64 on x86_64. Thus size of `Word`     |\n| `hexBitSeq`
  \                  | [hexBitSize-1, hexBitSize-2, .. 0]    |\n\n\n#### Formatting
  for hex, bin, dec, Tera,Giga,Mega,Kilo, signed and floating\n\n| Operation                     |
  Description                             |\n|:------------------------------|:----------------------------------------|\n|
  `.@hex`                       | Show in hexadecimal string              |\n| `.@hex8`
  \                     | Show in hexadecimal string of 8bit      |\n| `.@hex16`                     |
  Show in hexadecimal string of 16bit     |\n| `.@hex32`                     | Show
  in hexadecimal string of 32bit     |\n| `.@hex64`                     | Show in
  hexadecimal string of 64bit     |\n| `.@hexN` n1                   | Show in hexadecimal
  string of n1 bit    |\n|                               |                                         |\n|
  `.@bin`                       | Show in binary string                   |\n| `.@bin8`
  \                     | Show in binary string of 8bit           |\n| `.@bin16`                     |
  Show in binary string of 16bit          |\n| `.@bin32`                     | Show
  in binary string of 32bit          |\n| `.@bin64`                     | Show in
  binary string of 64bit          |\n| `.@binN` n1                   | Show in binary
  string of n1 bit         |\n|                               |                                         |\n|
  `.@dec`                       | Show in decimal string                  |\n| `.@decE`
  \                     | Show in decimal of Exa unit             |\n| `.@decP`                      |
  Show in decimal of Peta unit            |\n| `.@decT`                      | Show
  in decimal of Tera unit            |\n| `.@decG`                      | Show in
  decimal of Giga unit            |\n| `.@decM`                      | Show in decimal
  of Mega unit            |\n| `.@decK`                      | Show in decimal of
  Kilo unit            |\n|                               |                                         |\n|
  `.@signed`                    | Show in singed decimal with `Word`      |\n|                               |
  \                                        |\n| `.@float`                     | Show
  in float string                    |\n| `.@double`                    | Show in
  double string                   |\n|                               |                                         |\n|
  `.@hexSized`                  | Show in hexadecimal string of (len,Hex) |\n| `.@binSized`
  \                 | Show in binary string of (len,Hex)      |\n\n\n#### Hilighting
  and pretty-print\n\n| Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `color` x1 x2                 | Highlight bit of x1 specified with x2 |\n| `ppr`
  fun x1                  | Print x1 applied with fun             |\n\n\n#### Input
  and convert\n\n| Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `inputRawHexIO`               | Input string and convert to Hex type  |\n\n\n####
  Floating convert\n\n| Operation                     | Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `float2hex`                   | Convert Float to Hex type             |\n| `hex2float`
  \                  | Convert Hex to Float type             |\n| `double2hex`                  |
  Convert Double to Hex type            |\n| `hex2double`                  | Convert
  Hex to Double type            |\n\n\n#### Miscellaneous\n\n| Operation                     |
  Description                           |\n|:------------------------------|:--------------------------------------|\n|
  `cls`                         | Clear screen by ANSI sequence         |\n| `usage`
  \                      | Show simple help                      |\n\n\nAppendix\n--------\n\n####
  GHC language extention for numeric literals\n\nWhen `-XBinaryLiterals` extention
  enabled, you can use binary literals on GHC and GHCi, like `0b1101`.\n\nWhen `-XNumericUnderscores`
  extention enabled, you can use underscores in numeric literals on GHC and GHCi,
  like `0xff_ff`.\n`-XNumericUnderscores` extension is available GHC 8.6 or later.\n\nGHC
  language extensions can be described in `~/.ghci` or `./ghci` file:\n```\n:set -XBinaryLiterals\n:set
  -XNumericUnderscores\n```\n\nGHC language extensions can also be specified as an
  option when starting GHC and GHCi:\n```bash\n$ ghci -XBinaryLiterals -XNumericUnderscores\n```\n\n\n####
  Shell alias\n\nIt is useful to set the alias of the shell:\n```bash\nalias ghex=\"(cd
  $XXX/ghci-hexcalc; ghci -ghci-script example/example.ghci)\"\n```\n\n\n#### Expression
  evaluation mode of GHC\n\nYou can also run in one shot mode (a expression evaluation
  mod) by `ghc -e`:\n```bash\n$ ghc src/Data/GHex.hs -e '4 * giga'\n0x0000_0004_0000_0000\n```\n\n\n####
  Default declaration on GHCi\n\nWith the [`default` declaration](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#extended-rules-around-default-declarations),
  integer literals are inferred as `Hex` types.\n\n```\nghci> default (Hex)\nghci>
  255\n0x0000_0000_0000_00ff\n```\n"
description-type: markdown
hash: f8aecafe6bde8c7966100bde6a49e492d62080bd7ef832cb96a05b3bb87cd977
homepage: https://github.com/takenobu-hs/ghci-hexcalc
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: takenobu.hs@gmail.com
synopsis: GHCi as a Hex Calculator interactive
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  binary: '>=0'
  doctest: '>=0'
  ghci-hexcalc: '>=0'
