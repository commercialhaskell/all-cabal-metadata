all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.1.5.0
author: Zachary Wood
basic-deps:
  base: '>=4.14 && <4.22'
  bytestring: '>=0.10 && <0.13'
  ghc: '>=8.10.7 && <9.13'
  ghc-boot: '>=8.10.7 && <9.13'
  template-haskell: '>=2.16.0 && <2.24'
changelog: |
  # 0.1.5.0

   * Support GHC 9.12

  # 0.1.4.0

   * Support GHC 9.10

  # 0.1.3.0

   * Support GHC 9.8

  # 0.1.2.0

   * Support GHC 9.6

  # 0.1.1.0

   * Support GHC 9.4

  # 0.1.0.0

  Initial release.
changelog-type: markdown
description: |
  # ghc-hs-meta

  Generate Template Haskell expressions from Haskell source code using the GHC parser.
  This package runs on GHC versions 8.10, 9.0, 9.2, 9.4, 9.6, 9.8 and 9.10.

  ## Usage

  Pass a String containing Haskell source code to `parseExp`.
  Example from the tests:

  ```haskell
  case parseExp "a @b" of
      Right exp -> exp `shouldBe` TH.AppTypeE (TH.VarE (TH.mkName "a")) (TH.VarT (TH.mkName "b"))
      Left (_, _, errMsg) -> error errMsg
  ```

  See Hackage documentation for more documentation.

  ## Thank you, PyF

  This code originated from the excellent parser included in the [`PyF`](https://github.com/guibou/PyF) package.
  I extracted the relevant code and refactored/renamed things to be usable in a more general context.
  Without PyF, this could wouldn't have been possible. Thank you!

  The original license for PyF can be found in the `LICENSE-PyF` file included in this repository.
description-type: markdown
hash: b354f93a535396bf341f7fb0daf8c8f2898e3463632f0b1cfd2b1423ba9f8a07
homepage: ''
latest: 0.1.5.0
license-name: BSD-3-Clause
maintainer: amesgen@amesgen.de
synopsis: Translate Haskell source to Template Haskell expression
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  ghc: '>=0'
  ghc-boot: '>=0'
  ghc-hs-meta: '>=0'
  hspec: '>=0'
  template-haskell: '>=0'
