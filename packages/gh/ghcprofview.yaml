homepage: https://github.com/portnov/ghcprofview-hs#readme
changelog-type: markdown
hash: b1299372d917ed498bf3d23a1b854a754a6c46ef2769958930f3767c7f0a635b
test-bench-deps: {}
maintainer: portnov84@rambler.ru
synopsis: GHC .prof files viewer
changelog: |
  # Changelog for gtk3test

  ## Unreleased changes
basic-deps:
  haskell-gi-base: -any
  base: '>=4.7 && <5'
  text: -any
  gi-gtk: <4
  containers: -any
  regex-tdfa: -any
  ghc-prof: -any
  mtl: '>=2.2'
  scientific: -any
  aeson: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Ilya V. Portnov
latest: 0.1.0.2
description-type: markdown
description: "ghcprofview README\n==================\n\n[![Build Status](https://travis-ci.org/portnov/ghcprofview-hs.svg?branch=master)](https://travis-ci.org/portnov/ghcprofview-hs)
  \n\nThis is GHC `.prof` files viewer, implemented in Haskell + Gtk3.\n\nUnlike [profiterole][1]
  and [profiteur][2], `ghcprofview` uses a traditional\napproach to profiling. It
  allows you to view cost centres tree as it is and\nbrowse it interactively, and
  allows you to do some actions that you may be used\nto in, for example, Java's `visualvm`.\n\nSee
  also a very similar application in Python + Qt5 - [ghcprofview-py][3].\n\n[1]: https://hackage.haskell.org/package/profiterole\n[2]:
  https://hackage.haskell.org/package/profiteur\n[3]: https://github.com/portnov/ghcprofview-py\n\n![Screenshot](https://user-images.githubusercontent.com/284644/61590344-1a57ff80-abd1-11e9-93ce-dfc316c825ae.png)\n\nFeatures\n--------\n\n*
  GUI is tab-oriented. Default tab is called \"All\" and contains the whole tree.\n
  \ Other tabs may appear when you do filtering or some other actions. You may\n  close
  unneeded tabs.\n* Two additional columns in addition to what we have in standard
  GHC's text `.prof` output:\n  * Time Relative: share of \"Time Inherited\" of this
  item with relation to it's\n    parent item. For example, if this item has \"Time
  Inherited\" 20%, and it's\n    parent has \"Time Inherited\" 30%, then \"Time Relative\"
  is 20% / 30% =\n    66.66%.\n  * Alloc Relative: same, but about \"Alloc Inherited\".\n*
  Click on column header to sort by that column.\n* Right-click on table header to
  select which columns to display.\n* Double-click at the edge of column header to
  adjust column width automatically.\n* Use Search and Next buttons to search function
  by name. There are three\n  search modes available: Contains (search by substring),
  Exact (search for\n  exact match), Reg.Exp (search by regular expression).\n* Use
  filters to display interesting records only. Filter results will be shown\n  in
  separate tab.\n  * Supported fields for filtering are: Entries, Time Individual,
  Alloc\n    Individual, Time Inherited, Alloc Inherited, Module (by substring match),\n
  \   Source (by substring match).\n  * Filter works by AND; so if you set Entries
  = 5, Module = \"Gui\", then you\n    will be searching for items that have entries
  >= 5 AND in module \"Gui\".\n  * Logic of filter application to the tree is the
  following: it keeps an item\n    if that item conforms to filter conditions, OR
  if it has child items that\n    conform to filter condition.\n* \"Narrow view to
  selected item\" in right-click menu. This will open a tab and\n  show only selected
  item and it's descendants.\n* \"Group all outgoing calls\" in right-click menu.
  This does the following:\n  * Searches for all occurences of selected function in
  the tree.\n  * Merges call subtrees of these occurences into new tree; for example,
  if\n    function \"search\" appeared in one place with \"time inherited\" of 15%,
  and\n    in another place with 10%, then in the merged tree you will see it with\n
  \   25%.\n  * Displays the result in a new tab.\n* \"Group all incoming calls\"
  in right-click menu. This does the following:\n  * Searches for all occurences of
  selected function in the tree.\n  * Reverses call stacks of found occurences and
  merges them into a new tree.\n    So in that tree, the root will be the item you
  selected, and it's children\n    will be all functions that call the selected function,
  and so on. Numbers\n    are merged similar to \"group all outgoing calls\" function.\n
  \ * Displays the result in a new tab.\n* Text format of `.prof` files is supported;
  there is support for Json format,\n  but it is buggy currently.\n\nInstallation\n------------\n\nInstall
  it by `stack`:\n\n    $ git clone https://github.com/portnov/ghcprofview-hs.git\n
  \   $ cd ghcprofview-hs/\n    $ stack install\n\n"
license-name: BSD-3-Clause
