all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
author: Rodrigo Mesquita
basic-deps:
  aeson: '>=2.2.3 && <2.3'
  array: '>=0.5.8 && <0.6'
  async: '>=2.2.5 && <2.3'
  base: '>4.21 && <5'
  binary: '>=0.8.9 && <0.11'
  bytestring: '>=0.12.1 && <0.13'
  containers: '>=0.7 && <0.9'
  dap: '>=0.2 && <1'
  directory: '>=1.3.9.0 && <1.4'
  exceptions: '>=0.10.9 && <0.11'
  filepath: '>=1.5.4 && <1.6'
  ghc: '>=9.13 && <9.14'
  ghc-debugger: '>=0'
  ghci: '>=9.13 && <9.14'
  hie-bios: '>=0.15 && <0.16'
  mtl: '>=2.3 && <3'
  process: '>=1.6.25 && <1.7'
  text: '>=2.1 && <2.3'
  unix: '>=2.8.6 && <2.9'
changelog: |
  # Revision history for ghc-debugger

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# GHC Debugger\n\nStatus: **Work In Progress**\n\nWe are working on
  a first class debugger for Haskell.\nIt is still not ready for general consumption!\n\nWe
  will properly announce through the common channels the debugger when the\nfirst
  major release is ready.\n\n![CI badge](https://github.com/well-typed/ghc-debugger/actions/workflows/debugger.yaml/badge.svg)
  ![Hackage badge](https://img.shields.io/hackage/v/ghc-debugger.svg)\n\n# Installation\n\n>
  [!WARNING]\n> `ghc-debug-adapter` is only supported by the latest nightly GHC version.\n>
  The first release it will be compatible with is GHC 9.14.\n\nTo install and use
  the GHC debugger, you need the executable `ghc-debug-adapter`\nand the VSCode extension
  `haskell-debugger-extension`.\n\nSince `ghc-debug-adapter` implements the [Debug
  Adapter Protocol\n(DAP)](https://microsoft.github.io/debug-adapter-protocol/), it
  also supports\ndebugging with tools such as vim, neovim, or emacs -- as long as
  a DAP client is\ninstalled and the `launch` arguments for `ghc-debug-adapter` configured.\n\nTo
  build, install, and run `ghc-debug-adapter` you currently need a nightly\nversion
  of GHC in PATH. You can get one using\n[GHCup](https://ghcup.readthedocs.io/en/latest/guide/),
  or [building from source](https://gitlab.haskell.org/ghc/ghc/-/wikis/building/preparation):\n```\nghcup
  config add-release-channel https://ghc.gitlab.haskell.org/ghcup-metadata/ghcup-nightlies-0.0.7.yaml\nghcup
  install ghc latest-nightly \nPATH=$(dirname $(ghcup whereis ghc latest-nightly)):$PATH
  cabal install ghc-debugger:ghc-debug-adapter --enable-executable-dynamic --allow-newer=ghc-bignum,containers,time,ghc\n```\n\nTo
  run the debugger, the same nightly version of GHC needs to be in PATH. Make\nsure
  the DAP client knows this. For instance, to launch VSCode use:\n```\nPATH=$(dirname
  $(ghcup whereis ghc latest-nightly)):$PATH code /path/to/proj\n```\nCurrently, to
  install the debugger extension, download the `.vsix` file from the\nGitHub release
  artifacts and drag and drop it to the extensions side panel. In\nthe future we will
  release it on the marketplace.\n\n# Usage\n\nTo use the debugger in VSCode, select
  the debugger tab, select Haskell Debugger,\nand create a `launch.json` file by clicking
  the debugger settings icon (next to\nthe green run button).\n\nThe `launch.json`
  file contains some settings about the debugger session here.\nNamely:\n\n| Setting
  | Description |\n| --- | --- |\n| `entryFile`    | the relative path from the project
  root to the file with the entry point for execution                                                                                                |\n|
  `entryPoint`   | the name of the function that is called to start execution                                                                                                                            |\n|
  `entryArgs`    | the arguments passed to the `entryPoint`. If the `entryPoint` is
  `main`, these arguments are passed as environment arguments (as in `getArgs`) rather
  than direct function arguments. |\n| `extraGhcArgs` | additional flags to pass to
  the ghc invocation that loads the program for debugging.                                                                                                  |\n\nChange
  them accordingly.\n\nTo run the debugger, simply hit the green run button.\nSee
  the Features section below for what is currently supported.\n\nNote: Listing global
  variables is only supported in GHC versions newer than May 6, 2025\n\n# Related
  Work\n\n`ghc-debug-adapter` is inspired by the original\n[`haskell-debug-adapter`](https://github.com/phoityne/haskell-debug-adapter/)
  by @phoityne.\n\n`ghc-debug-adapter` improves on the original ideas implemented
  in\n`haskell-debug-adapter` but makes them more robust by implementing the debugger\ndirectly
  via the GHC API (similarly to HLS), rather than by communicating with a\ncustom
  `ghci` process.\n\nWe have been doing custom work on GHC to support debugging in
  a predictable,\nrobust, and more performant way. That is why `ghc-debug-adapter`
  is only\ncompatible with the latest and greatest GHC. If you want to debug using
  an older\nGHC version (9.12 and older), please check out `haskell-debug-adapter`.\n\nTo
  implement the Debug Adapter Protocol (DAP) server part, we are using the\n[`dap`](https://hackage.haskell.org/package/dap-0.2.0.0)
  library by @dmjio.\n`dap` is a framework for building language-agnostic DAP.\n\nThe
  `ghc-debug-adapter` is transparently compatible with most projects (simple,\nCabal,
  Stack, custom `hie.yaml`) because\nit uses [`hie-bios`](https://github.com/haskell/hie-bios)
  to figure out the\nright flags to prepare the GHC session with.\n\n\n# Features\n\nMany
  not listed! Here are a few things:\n\n## Stepping\n\n- [x] Continue (resume execution
  forward)\n- [x] Next (step within local function)\n- [x] Step into (single step
  to next immediate tick)\n- [ ] Step out (execute until end of function and break
  after the call)\n\n### In Reverse\n\n- [ ] Local step backwards (ie reverse of Next)\n-
  [ ] Single step backwards (ie reverse of Step into)\n- [ ] Continue backwards (resume
  execution backwards until a breakpoint is hit)\n\n## Breakpoints\n\n- [x] Module
  breakpoints\n- [x] Function breakpoints\n- [x] Exception breakpoints\n- [ ] Data
  breakpoints\n- [ ] Instruction breakpoints\n\n### Conditionals\n- [ ] Conditional
  breakpoints     (breakpoint is hit only if condition is satisfied)\n- [ ] Hit conditional
  breakpoints (stop after N number of hits)\n\n# Building from source\n\nTo build
  `ghc-debug-adapter`:\n```\ncabal build -w /path/to/recent/ghc exe:ghc-debug-adapter\n```\n\nTo
  build the VSCode extension\n```\ncd vscode-extension\nnix-build\n```\n\n## Testing\n\n```\ncd
  test/integration-tests\nnix-shell\nmake GHC=/path/to/recent/ghc \\\n     DEBUGGER=$(cd
  ../.. && cabal list-bin -w /path/to/recent/ghc exe:ghc-debug-adapter)\n```\n"
description-type: markdown
hash: bfcd04225eb34421483a9c2788e1e74896df3d3b01dc118ba6279088161cdb42
homepage: https://github.com/well-typed/ghc-debugger
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: rodrigo@well-typed.com
synopsis: A step-through machine-interface debugger for GHC Haskell
test-bench-deps:
  base: '>=4.14'
  ghc-debugger: '>=0'
