homepage: https://github.com/arybczak/ghc-tags
changelog-type: markdown
hash: b1bc08777ee158c6d8eaa1115167271c3dcfee4e1186d82108e1d16f92541000
test-bench-deps: {}
maintainer: andrzej@rybczak.net
synopsis: Utility for generating ctags and etags with GHC API.
changelog: |
  # ghc-tags-1.3 (2021-05-23)
  * Properly escape ex mode search commands.
  * Fix parsing of generated ctags file.
  * Remove non-ascii kind symbols (ctags).
  * Make generation of Ex mode search commands optional (ctags).
  * Don't check stored mtimes if there are no tags.

  # ghc-tags-1.2 (2021-05-22)
  * Fix sorting of ctags.
  * Express addresses of ctags as ex commands.
  * Improve performance of parsing a ctags file.

  # ghc-tags-1.1 (2021-05-18)
  * Fix compatibility with GHC 8.10.
  * Drop support for GHC 8.8.
  * Make output flag `ctags` compatible.
  * Increase allocation area to 4MB for better performance.

  # ghc-tags-1.0 (2021-05-17)
  * Initial release.
basic-deps:
  bytestring: -any
  stm: -any
  base: '>=4.14 && <4.16'
  time: -any
  unordered-containers: -any
  text: -any
  filepath: -any
  process: -any
  async: -any
  containers: -any
  ghc-paths: -any
  attoparsec: -any
  temporary: -any
  optparse-applicative: -any
  deepseq: -any
  aeson: <2.0.0.0
  ghc-lib: ==9.0.*
  yaml: -any
  vector: -any
  directory: -any
all-versions:
- '1.0'
- '1.1'
- '1.2'
- '1.3'
author: Andrzej Rybczak
latest: '1.3'
description-type: markdown
description: |
  # ghc-tags

  [![Build Status](https://github.com/arybczak/ghc-tags/workflows/Haskell-CI/badge.svg?branch=master)](https://github.com/arybczak/ghc-tags/actions?query=branch%3Amaster)
  [![Hackage](https://img.shields.io/hackage/v/ghc-tags.svg)](https://hackage.haskell.org/package/ghc-tags)

  A command line tool that generates etags (Emacs) and ctags (Vim, VSCode with
  [ctagsx](https://marketplace.visualstudio.com/items?itemName=jtanx.ctagsx) etc.)
  for efficient code navigation (jump to definition).

  Main features:
  * Leverages GHC API to obtain accurate information.
  * Uses multiple CPU cores when processing source files.
  * Supports fast incremental updates.

  Supported file extensions:
  * `.hs`
  * `.hs-boot`
  * `.lhs`
  * `.x` (requires `alex`)
  * `.hsc` (requires `hsc2hs`)

  ## Usage

  For simple projects, i.e. the ones that don't use C pre-processor in non-trivial
  ways nor include any C sources it should be enough to execute `ghc-tags -e` (for
  etags) or `ghc-tags -c` (for ctags) in the root directory of the project.

  For more complicated projects you need to create the configuration file
  (`ghc-tags.yaml` by default). It can contain the following keys:

  * `source_paths` - a list of paths for `ghc-tags` to process. Directories are
    traversed recursively.
  * `exclude_paths` - a list of paths for `ghc-tags` to exclude from processing.
  * `language` - the flavour of Haskell, either `Haskell98` or `Haskell2010`.
  * `extensions` - a list of GHC language extensions to enable when parsing. Note
    that GHC needs much less extensions for parsing alone, so you should almost
    never need to override this.
  * `cpp_includes` - include paths for the C pre-processor.
  * `cpp_options` - other options for the C pre-processor, e.g. defines (usually
    undefined `MIN_VERSION_x` macros will go here).

  If any of these keys is not specified, an appropriate default value will be
  picked instead. You can inspect the defaults by executing `ghc-tags --default`.

  **Note:** it is possible to specify multiple project configurations in the
  configuration file by separating them with `---`. For example, here is a
  configuration for GHC on Linux (compiler, utils and base):

  ```yaml
  source_paths:
  - compiler

  cpp_includes:
  - _build/stage1/compiler/build
  - compiler
  - includes/dist-derivedconstants/header

  ---

  source_paths:
  - libraries/base

  exclude_paths:
  - libraries/base/GHC/Conc/POSIX/Const.hsc
  - libraries/base/GHC/Event/Windows.hsc
  - libraries/base/GHC/Event/Windows/ConsoleEvent.hsc
  - libraries/base/GHC/Event/Windows/FFI.hsc
  - libraries/base/GHC/IO/Windows/Handle.hsc
  - libraries/base/System/CPUTime/Windows.hsc
  - libraries/base/tests

  cpp_includes:
  - _build/stage1/libraries/base/build/include
  - includes
  - libraries/base/include

  ---

  source_paths:
  - libraries/ghc-bignum

  exclude_paths:
  - libraries/ghc-bignum/src/GHC/Num/Backend/Selected.hs

  cpp_includes:
  - libraries/ghc-bignum/include

  ---

  source_paths:
  - libraries/ghc-boot
  - libraries/ghc-boot-th
  - libraries/ghc-compact
  - libraries/ghc-heap
  - libraries/ghc-prim

  exclude_paths:
  - libraries/ghc-compact/tests
  - libraries/ghc-heap/tests
  - libraries/ghc-prim/tests
  ```

  ## Acknowledgments

  Thanks to Marcin Szamotulski for his work on
  [ghc-tags-plugin](https://github.com/coot/ghc-tags-plugin) `ghc-tags` is based on.
license-name: MPL-2.0
