homepage: https://gitlab.haskell.org/haskell/ghcup-hs
changelog-type: ''
hash: 240620e1614bffc91d735e430a7b4b714b2f79d963a86a952e357521f51b9624
test-bench-deps:
  bytestring: ^>=0.10
  base: '>=4.13 && <5'
  hspec: ^>=2.7.10
  text: ^>=1.2.4.0
  generic-arbitrary: ^>=0.1.0
  hspec-golden-aeson: ^>=0.9
  quickcheck-arbitrary-adt: ^>=0.3.1.0
  versions: '>=4.0.1 && <5.1'
  ghcup: -any
  containers: ^>=0.6
  uri-bytestring: ^>=0.3.2.2
  QuickCheck: ^>=2.14.1
maintainer: hasufell@posteo.de
synopsis: ghc toolchain installer
changelog: ''
basic-deps:
  haskus-utils-variant: '>=3.0 && <3.2'
  bytestring: ==0.10.*
  case-insensitive: ^>=1.2.1.0
  unix: ^>=2.7
  bz2: '>=0.5.0.5 && <1.1'
  split: ^>=0.2.3.4
  Cabal: -any
  base: '>=4.13 && <5'
  disk-free-space: ^>=0.1.0.1
  time: ^>=1.9.3
  aeson-pretty: ^>=0.8.8
  unordered-containers: ^>=0.2.10.0
  text: '>=1.2.4.0 && <1.3'
  os-release: ^>=1.0.0
  unix-bytestring: ^>=0.3.7.3
  safe-exceptions: ==0.1.*
  megaparsec: '>=8.0.0 && <9.1'
  haskus-utils-types: ^>=1.5
  filepath: '>=1.4.2.1 && <1.5'
  async: '>=2.2.3 && <2.3'
  word8: ^>=0.1.3
  HsYAML-aeson: '>=0.2.0.0 && <0.3'
  casing: ^>=0.1.4.1
  versions: '>=4.0.1 && <5.1'
  ghcup: -any
  containers: ==0.6.*
  uri-bytestring: '>=0.3.2.2 && <0.4'
  unliftio-core: ^>=0.2.0.1
  lzma-static: ^>=5.2.5.3
  binary: ^>=0.8.6.0
  pretty-terminal: '>=0.1.0.0 && <0.2'
  utf8-string: ^>=1.0
  cryptohash-sha256: ^>=0.11.101.0
  optics: ==0.4.*
  regex-posix: ==0.96.*
  zlib: ^>=0.6.2.2
  mtl: ==2.2.*
  libarchive: '>=3.0.3.0 && <3.1'
  base16-bytestring: '>=0.1.1.6 && <1.1'
  transformers: ==0.5.*
  cabal-plan: ^>=0.7.2
  temporary: ^>=1.3
  optparse-applicative: '>=0.15.1.0 && <0.17'
  deepseq: '>=1.4.4.0 && <1.5'
  strict-base: ^>=0.4
  resourcet: '>=1.2.2 && <1.3'
  pretty: '>=1.1.3.1 && <1.2'
  aeson: '>=1.4 && <1.6'
  template-haskell: '>=2.7 && <2.18'
  safe: '>=0.3.18 && <0.4'
  vector: ^>=0.12
  directory: ^>=1.3.6.0
all-versions:
- 0.1.14.1
- 0.1.14.2
- 0.1.17.2
author: Julian Ospald
latest: 0.1.17.2
description-type: markdown
description: "`ghcup` makes it easy to install specific versions of `ghc` on GNU/Linux,\nmacOS
  (aka Darwin), FreeBSD and Windows and can also bootstrap a fresh Haskell developer
  environment from scratch.\nIt follows the unix UNIX philosophy of [do one thing
  and do it well](https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well).\n\nSimilar
  in scope to [rustup](https://github.com/rust-lang-nursery/rustup.rs), [pyenv](https://github.com/pyenv/pyenv)
  and [jenv](http://www.jenv.be).\n\n## Table of Contents\n\n[![Join the chat at Libera.chat](https://img.shields.io/badge/chat-on%20libera%20IRC-brightgreen.svg)](https://kiwiirc.com/nextclient/irc.libera.chat/?nick=Guest%7C?#haskell,#haskell-ghcup)\n[![Join
  the chat at Matrix.org](https://img.shields.io/matrix/haskell-tooling:matrix.org?label=chat%20on%20matrix.org)](https://app.element.io/#/room/#haskell-tooling:matrix.org)\n[![Join
  the chat at Discord](https://img.shields.io/discord/280033776820813825?label=chat%20on%20discord)](https://discord.gg/pKYf3zDQU7)\n[![Join
  the chat at https://gitter.im/haskell/ghcup](https://badges.gitter.im/haskell/ghcup.svg)](https://gitter.im/haskell/ghcup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n<a
  href=\"https://opencollective.com/ghcup#category-CONTRIBUTE\"><img src=\"https://opencollective.com/webpack/donate/button@2x.png?color=blue\"
  alt=\"Donate\" width=\"150\"></a>\n\n   * [Installation](#installation)\n     *
  [Supported platforms](#supported-platforms)\n     * [Manual install](#manual-install)\n
  \    * [Vim integration](#vim-integration)\n   * [Usage](#usage)\n     * [Configuration](#configuration)\n
  \    * [GPG verification](#gpg-verification)\n     * [Manpages](#manpages)\n     *
  [Shell-completion](#shell-completion)\n     * [Compiling GHC from source](#compiling-ghc-from-source)\n
  \    * [XDG support](#xdg-support)\n     * [Env variables](#env-variables)\n     *
  [Installing custom bindists](#installing-custom-bindists)\n     * [Isolated Installs](#isolated-installs)\n
  \    * [CI](#ci)\n     * [Tips and tricks](#tips-and-tricks)\n   * [Design goals](#design-goals)\n
  \  * [How](#how)\n   * [Known users](#known-users)\n   * [Known problems](#known-problems)\n
  \  * [FAQ](#faq)\n\n## Installation\n\nMost users should follow the instructions
  at [https://www.haskell.org/ghcup/](https://www.haskell.org/ghcup/).\nAdvanced users
  may want to perform a [manual installation](#manual-install).\n\n### Supported platforms\n\nThis
  list may not be exhaustive and specifies support for bindists only.\n\n| Platform
  | Architecture | ghcup | GHC | cabal | HLS | stack | \n| ------ | ------ | ------
  | ------ | ------ | ------ | ------ |\n| Windows 7 | amd64 | ❔ | ✅ | ✅ | ✅ | ✅ |\n|
  Windows 10 | amd64 | ✅ | ✅ | ✅ | ✅ | ✅ |\n| Windows Server 2016 | amd64 | ✅ | ✅
  | ✅ | ✅ | ✅ |\n| Windows Server 2019 | amd64 | ✅ | ✅ | ✅ | ✅ | ✅ |\n| Windows Server
  2022 | amd64 | ✅ | ✅ | ✅ | ✅ | ✅ |\n| Windows WSL1 | amd64 | ❌ | ❔ | ❔ | ❔ | ❔ |\n|
  Windows WSL2 | amd64 | ✅ | ✅ | ✅ | ✅ | ✅ |\n| MacOS >=13 | amd64 | ✅ | ✅ | ✅ | ✅
  | ✅ |\n| MacOS <13 | amd64 | ❌ | ❔ | ❔ | ❔ | ❔ |\n| MacOS | aarch64 | ✅ | ✅ | ✅
  | ⚠️ | ❌ |\n| FreeBSD | amd64 | ✅ | ⚠️ | ✅ | ⚠️ | ❌ |\n| Linux generic | x86 | ✅
  | ✅ | ✅ | ✅ | ✅ |\n| Linux generic | amd64 | ✅ | ✅ | ✅ | ✅ | ✅ |\n| Linux generic
  | aarch64 | ✅ | ⚠️ | ✅ | ⚠️ | ❌ |\n| Linux generic | armv7 | ✅ | ⚠️ | ✅ | ⚠️ | ❌
  |\n\n#### Windows 7\n\nMay or may not work, several issues:\n\n* https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/140\n*
  https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/197\n\n#### WSL1\n\nUnsupported.
  GHC may or may not work. Upgrade to WSL2.\n\n#### MacOS <13\n\nNot supported. Would
  require separate binaries, since >=13 binaries are incompatible.\nPlease upgrade.\n\n####
  MacOS aarch64\n\nHLS bindists are still experimental. Stack is theoretically supported,
  but has no binaries yet.\n\n#### FreeBSD\n\nLacks some upstream bindists and may
  need compat libs, since most bindists are built on FreeBSD-12.\nHLS bindists are
  experimental.\n\n#### Linux ARMv7/AARCH64\n\nLower availability of bindists. HLS
  only has experimental ones. Stack not supported currently.\n\n### Manual install\n\nDownload
  the binary for your platform at [https://downloads.haskell.org/~ghcup/](https://downloads.haskell.org/~ghcup/)\nand
  place it into your `PATH` anywhere.\n\nThen adjust your `PATH` in `~/.bashrc` (or
  similar, depending on your shell) like so:\n\n```sh\nexport PATH=\"$HOME/.cabal/bin:$HOME/.ghcup/bin:$PATH\"\n```\n\n###
  Vim integration\n\nSee [ghcup.vim](https://github.com/hasufell/ghcup.vim).\n\n##
  Usage\n\nSee `ghcup --help`.\n\nFor the simple interactive TUI, run:\n\n```sh\nghcup
  tui\n```\n\nFor the full functionality via cli:\n\n```sh\n# list available ghc/cabal
  versions\nghcup list\n\n# install the recommended GHC version\nghcup install ghc\n\n#
  install a specific GHC version\nghcup install ghc 8.2.2\n\n# set the currently \"active\"
  GHC version\nghcup set ghc 8.4.4\n\n# install cabal-install\nghcup install cabal\n\n#
  update ghcup itself\nghcup upgrade\n```\n\nGHCup works very well with [`cabal-install`](https://hackage.haskell.org/package/cabal-install),
  which\nhandles your haskell packages and can demand that [a specific version](https://cabal.readthedocs.io/en/latest/nix-local-build.html#cfg-flag---with-compiler)
  \ of `ghc` is available, which `ghcup` can do.\n\n### Configuration\n\nA configuration
  file can be put in `~/.ghcup/config.yaml`. The default config file\nexplaining all
  possible configurations can be found in this repo: [config.yaml](./data/config.yaml).\n\nPartial
  configuration is fine. Command line options always override the config file settings.\n\n###
  GPG verification\n\nGHCup supports verifying the GPG signature of the metadata file.
  The metadata file then contains SHA256 hashes of all downloads, so\nthis is cryptographically
  secure.\n\nFirst, obtain the gpg key:\n\n```sh\ngpg --batch --keyserver keys.openpgp.org
  --recv-keys 7784930957807690A66EBDBE3786C5262ECB4A3F\n```\n\nThen verify the gpg
  key in one of these ways:\n\n1. find out where I live and visit me to do offline
  key signing\n2. figure out my mobile phone number and call me to verify the fingerprint\n3.
  more boring: contact me on Libera IRC (`maerwald`) and verify the fingerprint\n\nOnce
  you've verified the key, you have to figure out if you trust me.\n\nIf you trust
  me, then you can configure gpg in `~/.ghcup/config.yaml`:\n\n```yml\ngpg-setting:
  GPGLax # GPGStrict | GPGLax | GPGNone\n```\n\nIn `GPGStrict` mode, ghcup will fail
  if verification fails. In `GPGLax` mode it will just print a warning.\nYou can also
  pass the mode via `ghcup --gpg <strict|lax|none>`.\n\n### Manpages\n\nFor man pages
  to work you need [man-db](http://man-db.nongnu.org/) as your `man` provider, then
  issue `man ghc`. Manpages only work for the currently set ghc.\n`MANPATH` may be
  required to be unset.\n\n### Shell-completion\n\nShell completions are in [scripts/shell-completions](./scripts/shell-completions)
  directory of this repository.\n\nFor bash: install `shell-completions/bash`\nas
  e.g. `/etc/bash_completion.d/ghcup` (depending on distro)\nand make sure your bashrc
  sources the startup script\n(`/usr/share/bash-completion/bash_completion` on some
  distros).\n\n### Compiling GHC from source\n\nCompiling from source is supported
  for both source tarballs and arbitrary git refs. See `ghcup compile ghc --help`\nfor
  a list of all available options.\n\nIf you need to overwrite the existing `build.mk`,
  check the default files\nin [data/build_mk](./data/build_mk), copy them somewhere,
  adjust them and\npass `--config path/to/build.mk` to `ghcup compile ghc`.\nCommon
  `build.mk` options are explained [here](https://gitlab.haskell.org/ghc/ghc/-/wikis/building/using#build-configuration).\n\nMake
  sure your system meets all the [prerequisites](https://gitlab.haskell.org/ghc/ghc/-/wikis/building/preparation).\n\n####
  Cross support\n\nghcup can compile and install a cross GHC for any target. However,
  this\nrequires that the build host has a complete cross toolchain and various\nlibraries
  installed for the target platform.\n\nConsult the GHC documentation on the [prerequisites](https://gitlab.haskell.org/ghc/ghc/-/wikis/building/cross-compiling#tools-to-install).\nFor
  distributions with non-standard locations of cross toolchain and\nlibraries, this
  may need some tweaking of `build.mk` or configure args.\nSee `ghcup compile ghc
  --help` for further information.\n\n### XDG support\n\nTo enable XDG style directories,
  set the environment variable `GHCUP_USE_XDG_DIRS` to anything.\n\nThen you can control
  the locations via XDG environment variables as such:\n\n* `XDG_DATA_HOME`: GHCs
  will be unpacked in `ghcup/ghc` subdir (default: `~/.local/share`)\n* `XDG_CACHE_HOME`:
  logs and download files will be stored in `ghcup` subdir (default: `~/.cache`)\n*
  `XDG_BIN_HOME`: binaries end up here (default: `~/.local/bin`)\n* `XDG_CONFIG_HOME`:
  the config file is stored in `ghcup` subdir as `config.yaml` (default: `~/.config`)\n\n**Note
  that `ghcup` makes some assumptions about structure of files in `XDG_BIN_HOME`.
  So if you have other tools\ninstalling e.g. stack/cabal/ghc into it, this will likely
  clash. In that case consider disabling XDG support.**\n\n### Env variables\n\nThis
  is the complete list of env variables that change GHCup behavior:\n\n* `GHCUP_USE_XDG_DIRS`:
  see [XDG support](#xdg-support) above\n* `TMPDIR`: where ghcup does the work (unpacking,
  building, ...)\n* `GHCUP_INSTALL_BASE_PREFIX`: the base of ghcup (default: `$HOME`)\n*
  `GHCUP_CURL_OPTS`: additional options that can be passed to curl\n* `GHCUP_WGET_OPTS`:
  additional options that can be passed to wget\n* `GHCUP_GPG_OPTS`: additional options
  that can be passed to gpg\n* `GHCUP_SKIP_UPDATE_CHECK`: Skip the (possibly annoying)
  update check when you run a command\n* `CC`/`LD` etc.: full environment is passed
  to the build system when compiling GHC via GHCup\n\n### Installing custom bindists\n\nThere
  are a couple of good use cases to install custom bindists:\n\n1. manually built
  bindists (e.g. with patches)\n  - example: `ghcup install ghc -u 'file:///home/mearwald/tmp/ghc-eff-patches/ghc-8.10.2-x86_64-deb10-linux.tar.xz'
  8.10.2-eff`\n2. GHC head CI bindists\n  - example: `ghcup install ghc -u 'https://gitlab.haskell.org/api/v4/projects/1/jobs/artifacts/master/raw/ghc-x86_64-fedora27-linux.tar.xz?job=validate-x86_64-linux-fedora27'
  head`\n3. DWARF bindists\n  - example: `ghcup install ghc -u 'https://downloads.haskell.org/~ghc/8.10.2/ghc-8.10.2-x86_64-deb10-linux-dwarf.tar.xz'
  8.10.2-dwarf`\n\nSince the version parser is pretty lax, `8.10.2-eff` and `head`
  are both valid versions\nand produce the binaries `ghc-8.10.2-eff` and `ghc-head`
  respectively.\nGHCup always needs to know which version the bindist corresponds
  to (this is not automatically\ndetected).\n\n### Isolated installs\n\nGhcup also
  enables you to install a tool (GHC, Cabal, HLS, Stack) at an isolated location of
  your choosing.\nThese installs, as the name suggests, are separate from your main
  installs and DO NOT conflict with them.\n\n\n- No symlinks are made to these isolated
  installed tools, you'd have to manually point to them wherever you intend to use
  them.\n\n- These installs, can also NOT be deleted from ghcup, you'd have to go
  and manually delete these.\n\nYou need to use the `--isolate` or `-i` flag followed
  by the directory path.\n\nExamples:-\n\n1. install an isolated GHC version at location
  /home/user/isolated_dir/ghc/  \n   - `ghcup install ghc 8.10.5 --isolate /home/user/isolated_dir/ghc`\n\n2.
  isolated install Cabal at a location you desire  \n   - `ghcup install cabal --isolate
  /home/username/my_isolated_dir/`\n\n3. do an isolated install with a custom bindist
  \ \n   - `ghcup install ghc --isolate /home/username/my_isolated_dir/ -u 'https://gitlab.haskell.org/api/v4/projects/1/jobs/artifacts/master/raw/ghc-x86_64-fedora27-linux.tar.xz?job=validate-x86_64-linux-fedora27'
  head`\n\n4. isolated install HLS  \n   - `ghcup install hls --isolate /home/username/dir/hls/`\n\n5.
  you can even compile ghc to an isolated location.  \n   - `ghcup compile ghc -j
  4 -v 9.0.1 -b 8.10.5 -i /home/username/my/dir/ghc` \n   ---  \n\n### CI\n\nOn windows,
  ghcup can be installed automatically on a CI runner like so:\n\n```ps\nSet-ExecutionPolicy
  Bypass -Scope Process -Force;[System.Net.ServicePointManager]::SecurityProtocol
  = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;Invoke-Command -ScriptBlock
  ([ScriptBlock]::Create((Invoke-WebRequest https://www.haskell.org/ghcup/sh/bootstrap-haskell.ps1
  -UseBasicParsing))) -ArgumentList $false,$true,$true,$false,$false,$false,$false,\"C:\\\"\n```\n\nOn
  linux/darwin/freebsd, run the following on your runner:\n\n```sh\ncurl --proto '=https'
  --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1
  BOOTSTRAP_HASKELL_MINIMAL=1 sh\n```\n\nThis will just install `ghcup` and on windows
  additionally `msys2`.\n\n#### Example github workflow\n\nOn github workflows you
  can use https://github.com/haskell/actions/\n\nIf you want to install ghcup manually
  though, here's an example config:\n\n```yml\nname: Haskell CI\n\non:\n  push:\n
  \   branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build-cabal:\n\n
  \   runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n
  \       os: [ubuntu-latest, macOS-latest, windows-latest]\n        ghc: ['8.10.7',
  '9.0.1']\n        cabal: ['3.4.0.0']\n\n    steps:\n    - uses: actions/checkout@v2\n\n
  \   - if: matrix.os == 'windows-latest'\n      name: Install ghcup on windows\n
  \     run: Set-ExecutionPolicy Bypass -Scope Process -Force;[System.Net.ServicePointManager]::SecurityProtocol
  = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;Invoke-Command -ScriptBlock
  ([ScriptBlock]::Create((Invoke-WebRequest https://www.haskell.org/ghcup/sh/bootstrap-haskell.ps1
  -UseBasicParsing))) -ArgumentList $false,$true,$true,$false,$false,$false,$false,\"C:\\\"\n\n
  \   - if: matrix.os == 'windows-latest'\n      name: Add ghcup to PATH\n      run:
  echo \"/c/ghcup/bin\" >> $GITHUB_PATH\n      shell: bash\n\n    - if: matrix.os
  != 'windows-latest'\n      name: Install ghcup on non-windows\n      run: curl --proto
  '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1
  BOOTSTRAP_HASKELL_MINIMAL=1 sh\n\n    - name: Install ghc/cabal\n      run: |\n
  \       ghcup install ghc ${{ matrix.ghc }}\n        ghcup install cabal ${{ matrix.cabal
  }}\n      shell: bash\n\n    - name: Update cabal index\n      run: cabal update\n
  \     shell: bash\n\n    - name: Build\n      run: cabal build --enable-tests --enable-benchmarks\n
  \     shell: bash\n\n    - name: Run tests\n      run: cabal test\n      shell:
  bash\n```\n   \n### Tips and tricks\n\n#### with_ghc wrapper (e.g. for HLS)\n\nDue
  to some HLS [bugs](https://github.com/mpickering/hie-bios/issues/194) it's necessary
  that the `ghc` in PATH\nis the one defined in `cabal.project`. With some simple
  shell functions, we can start our editor with the appropriate\npath prepended.\n\nFor
  bash, in e.g. `~/.bashrc` define:\n\n```sh\nwith_ghc() {\n  local np=$(ghcup --offline
  whereis -d ghc $1 || { ghcup --cache install ghc $1 && ghcup whereis -d ghc $1 ;})\n
  \ if [ -e \"${np}\" ] ; then\n    shift\n    PATH=\"$np:$PATH\" \"$@\"\n  else\n
  \   >&2 echo \"Cannot find or install GHC version $1\"\n    return 1\n  fi\n}\n```\n\nFor
  fish shell, in e.g. `~/.config/fish/config.fish` define:\n\n```fish\nfunction with_ghc\n
  \ set --local np (ghcup --offline whereis -d ghc $argv[1] ; or begin ghcup --cache
  install ghc $argv[1] ; and ghcup whereis -d ghc $argv[1] ; end)\n  if test -e \"$np\"\n
  \   PATH=\"$np:$PATH\" $argv[2..-1]\n  else\n    echo \"Cannot find or install GHC
  version $argv[1]\" 1>&2\n    return 1\n  end\nend\n```\n\nThen start a new shell
  and issue:\n\n```sh\n# replace 'code' with your editor\nwith_ghc 8.10.5 code path/to/haskell/source\n```\n\nCabal
  and HLS will now see `8.10.5` as the primary GHC, without the need to\nrun `ghcup
  set` all the time when switching between projects.\n\n## Design goals\n\n1. simplicity\n2.
  non-interactive\n3. portable (eh)\n4. do one thing and do it well (UNIX philosophy)\n\n###
  Non-goals\n\n1. invoking `sudo`, `apt-get` or *any* package manager\n2. handling
  system packages\n3. handling cabal projects\n4. being a stack alternative\n\n##
  How\n\nInstalls a specified GHC version into `~/.ghcup/ghc/<ver>`, and places `ghc-<ver>`
  symlinks in `~/.ghcup/bin/`.\n\nOptionally, an unversioned `ghc` link can point
  to a default version of your choice.\n\nThis uses precompiled GHC binaries that
  have been compiled on fedora/debian by [upstream GHC](https://www.haskell.org/ghc/download_ghc_8_6_1.html#binaries).\n\nAlternatively,
  you can also tell it to compile from source (note that this might fail due to missing
  requirements).\n\nIn addition this script can also install `cabal-install`.\n\n##
  Known users\n\n* Github actions:\n\t- [actions/virtual-environments](https://github.com/actions/virtual-environments)\n\t-
  [haskell/actions/setup](https://github.com/haskell/actions/tree/main/setup)\n* mirrors:\n\t-
  [sjtug](https://mirror.sjtu.edu.cn/docs/ghcup)\n* tools:\n\t- [vabal](https://github.com/Franciman/vabal)\n\n##
  Known problems\n\n### Custom ghc version names\n\nWhen installing ghc bindists with
  custom version names as outlined in\n[installing custom bindists](#installing-custom-bindists),
  then cabal might\nbe unable to find the correct `ghc-pkg` (also see [#73](https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/73))\nif
  you use `cabal build --with-compiler=ghc-foo`. Instead, point it to the full path,
  such as:\n`cabal build --with-compiler=$HOME/.ghcup/ghc/<version-name>/bin/ghc`
  or set that GHC version\nas the current one via: `ghcup set ghc <version-name>`.\n\nThis
  problem doesn't exist for regularly installed GHC versions.\n\n### Limited distributions
  supported\n\nCurrently only GNU/Linux distributions compatible with the [upstream
  GHC](https://www.haskell.org/ghc/download_ghc_8_6_1.html#binaries) binaries are
  supported.\n\n### Precompiled binaries\n\nSince this uses precompiled binaries you
  may run into\nseveral problems.\n\n#### Missing libtinfo (ncurses)\n\nYou may run
  into problems with *ncurses* and **missing libtinfo**, in case\nyour distribution
  doesn't use the legacy way of building\nncurses and has no compatibility symlinks
  in place.\n\nAsk your distributor on how to solve this or\ntry to compile from source
  via `ghcup compile <version>`.\n\n#### Libnuma required\n\nThis was a [bug](https://ghc.haskell.org/trac/ghc/ticket/15688)
  in the build system of some GHC versions that lead to\nunconditionally enabled libnuma
  support. To mitigate this you might have to install the libnuma\npackage of your
  distribution. See [here](https://gitlab.haskell.org/haskell/ghcup/issues/58) for
  a discussion.\n\n### Compilation\n\nAlthough this script can compile GHC for you,
  it's just a very thin\nwrapper around the build system. It makes no effort in trying\nto
  figure out whether you have the correct toolchain and\nthe correct dependencies.
  Refer to [the official docs](https://ghc.haskell.org/trac/ghc/wiki/Building/Preparation/Linux)\non
  how to prepare your environment for building GHC.\n\n### Stack support\n\nThere
  may be a number of bugs when trying to make ghcup installed GHC versions work with
  stack,\nsuch as:\n\n- https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/188\n\nFurther,
  stack's upgrade procedure may break/confuse ghcup. There are a number of integration\nissues
  discussed here:\n\n- https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/153\n\n###
  Windows support\n\nWindows support is in early stages. Since windows doesn't support
  symbolic links properly,\nghcup uses a [shimgen wrapper](https://github.com/71/scoop-better-shimexe).
  It seems to work\nwell, but there may be unknown issues with that approach.\n\nWindows
  7 and Powershell 2.0 aren't well supported at the moment, also see:\n\n- https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/140\n-
  https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/197\n\n## FAQ\n\n### Why reimplement
  stack?\n\nGHCup is not a reimplementation of stack. The only common part is automatic
  installation of GHC,\nbut even that differs in scope and design.\n\n### Why should
  I use ghcup over stack?\n\nGHCup is not a replacement for stack. Instead, it supports
  installing and managing stack versions.\nIt does the same for cabal, GHC and HLS.
  As such, It doesn't make a workflow choice for you.\n\n### Why should I let ghcup
  manage stack?\n\nYou don't need to. However, some users seem to prefer to have a
  central tool that manages cabal and stack\nat the same time. Additionally, it can
  allow better sharing of GHC installation across these tools.\nAlso see:\n\n* https://docs.haskellstack.org/en/stable/yaml_configuration/#system-ghc\n*
  https://github.com/commercialhaskell/stack/pull/5585\n\n### Why does ghcup not use
  stack code?\n\nOddly, this question has been asked a couple of times. For the curious,
  here are a few reasons:\n\n1. GHCup started as a shell script. At the time of rewriting
  it in Haskell, the authors didn't even know that stack exposes *some* of its [installation
  API](https://hackage.haskell.org/package/stack-2.5.1.1/docs/Stack-Setup.html)\n2.
  Even if they did, it doesn't seem it would have satisfied their needs\n\t  - it
  didn't support cabal installation, which was the main motivation behind GHCup back
  then\n\t  - depending on a codebase as big as stack for a central part of one's
  application without having a short contribution pipeline would likely have caused
  stagnation or resulted in simply copy-pasting the relevant code in order to adjust
  it\n\t  - it's not clear how GHCup would have been implemented with the provided
  API. It seems the codebases are fairly different. GHCup does a lot of symlink handling
  to expose a central `bin/` directory that users can easily put in PATH, without
  having to worry about anything more. It also provides explicit removal functionality,
  GHC cross-compilation, a TUI, etc etc.\n3. GHCup is built around unix principles
  and supposed to be simple.\n\n### Why not unify...\n\n#### ...stack and Cabal and
  do away with standalone installers\n\nGHCup is not involved in such decisions. cabal-install
  and stack might have a\nsufficiently different user experience to warrant having
  a choice.\n\n#### ...installer implementations and have a common library\n\nThis
  sounds like an interesting goal. However, GHC installation isn't a hard engineering
  problem\nand the shared code wouldn't be too exciting. For such an effort to make
  sense, all involved\nparties would need to collaborate and have a short pipeline
  to get patches in.\n\nIt's true this would solve the integration problem, but following
  unix principles, we can\ndo similar via **hooks**. Both cabal and stack can support
  installation hooks. These hooks\ncan then call into ghcup or anything else, also
  see:\n\n* https://github.com/haskell/cabal/issues/7394\n* https://github.com/commercialhaskell/stack/pull/5585\n\n####
  ...installers (like, all of it)\n\nSo far, there hasn't been an **open** discussion
  about this. Is this even a good idea?\nSometimes projects converge eventually if
  their overlap is big enough, sometimes they don't.\n\nWhile unification sounds like
  a simplification of the ecosystem, it also takes away choice.\nTake `curl` and `wget`
  as an example.\n\nHow bad do we need this?\n\n### Why not support windows?\n\nWindows
  is supported since GHCup version 0.1.15.1.\n\n### Why the haskell reimplementation?\n\nGHCup
  started as a portable posix shell script of maybe 50 LOC. GHC installation itself
  can be carried out in\nabout ~3 lines of shell code (download, unpack , configure+make
  install). However, much convenient functionality\nhas been added since, as well
  as ensuring that all operations are safe and correct. The shell script ended up
  with\nover 2k LOC, which was very hard to maintain.\n\nThe main concern when switching
  from a portable shell script to haskell was platform/architecture support.\nHowever,
  ghcup now re-uses GHCs CI infrastructure and as such is perfectly in sync with all
  platforms that\nGHC supports.\n\n### Is GHCup affiliated with the Haskell Foundation?\n\nThere
  has been some collaboration: Windows and Stack support were mainly requested by
  the Haskell Foundation\nand those seemed interesting features to add.\n\nOther than
  that, GHCup is dedicated only to its users and is supported by haskell.org through
  hosting and CI\ninfrastructure.\n"
license-name: LGPL-3.0-only
