all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- 0.2.1
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.6
- 0.5.7
- 0.5.8
- 0.5.9
- 0.5.10
- 0.6.1
- 0.6.2
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
- 0.7.10
author: Christiaan Baaij
basic-deps:
  base: '>=4.9 && <5'
  containers: '>=0.5.7.1 && <0.8'
  ghc: '>=8.0.1 && <9.12'
  ghc-tcplugins-extra: '>=0.3.1'
  integer-gmp: '>=1.0 && <1.1'
  transformers: '>=0.5.2.0 && <0.7'
changelog: "# Changelog for the [`ghc-typelits-natnormalise`](http://hackage.haskell.org/package/ghc-typelits-natnormalise)
  package\r\n\r\n## 0.7.10 *May 22nd 2024*\r\n* Support for GHC 9.10.1\r\n\r\n## 0.7.9
  *October 10th 2023*\r\n* Support for GHC 9.8.1\r\n\r\n## 0.7.8 *February 20th 2023*\r\n*
  Try and outright solve substituted constraints, the same as is done with the unsubstituted
  constraint. Partially Fixes [#65](https://github.com/clash-lang/ghc-typelits-natnormalise/issues/65).\r\n*
  Support for GHC-9.6.0.20230210\r\n\r\n## 0.7.7 *October 10th 2022*\r\n* Solve unflattened
  wanteds instead of the wanteds passed to the plugin. Fixes [#1901]https://github.com/clash-lang/clash-compiler/issues/1901.\r\n*
  Add support for GHC 9.4\r\n\r\n## 0.7.6 *June 20th 2021*\r\n* Do not vacuously solve
  `forall a b . 1 <=? a^b ~ True`\r\n* Do not solve constraints within `KnownNat`,
  leave that to https://hackage.haskell.org/package/ghc-typelits-knonwnnat\r\n\r\n##
  0.7.5 *June 17th 2021*\r\n* Fixes [#52](https://github.com/clash-lang/ghc-typelits-natnormalise/issues/50)
  Plugin doesn't solve inside arbitrary class constraints\r\n* Build on GHC 9.2.0.20210422\r\n\r\n##
  0.7.4 *February 12th 2021*\r\n* Fixes [#50](https://github.com/clash-lang/ghc-typelits-natnormalise/issues/50)
  `x ^ C ~ y` erroneously deemed hard insoluable, a contradiction, when `C` is some
  type family other than +,-,*,^\r\n\r\n## 0.7.3 *January 1st 2021*\r\n* Build on
  GHC 9.0.1-rc1\r\n\r\n## 0.7.2 *March 9 2020*\r\n* Fixes [#44](https://github.com/clash-lang/ghc-typelits-natnormalise/issues/44)
  infinite loop due to boxed equality\r\n\r\n## 0.7.1 *February 6th 2020*\r\n* Add
  support for GHC 8.10.1-alpha2\r\n* Fixes [#23](https://github.com/clash-lang/ghc-typelits-natnormalise/issues/23):
  Can't figure out `+` commutes in some contexts on GHC 8.6.3\r\n* Fixes [#28](https://github.com/clash-lang/ghc-typelits-natnormalise/issues/28):
  Using the solver seems to break GHC\r\n* Fixes [#34](https://github.com/clash-lang/ghc-typelits-natnormalise/issues/34):
  inequality solver mishandles subtraction\r\n\r\n## 0.7 *August 26th 2019*\r\n* Require
  KnownNat constraints when solving with constants\r\n\r\n## 0.6.2 *July 10th 2018*\r\n*
  Add support for GHC 8.6.1-alpha1\r\n* Solve larger inequalities from smaller inequalities,
  e.g.\r\n  * `a <= n` implies `a <= n + 1`\r\n\r\n## 0.6.1 *May 9th 2018*\r\n* Stop
  solving `x + y ~ a + b` by asking GHC to solve `x ~ a` and `y ~ b` as\r\n  this
  leads to a situation where we find a solution that is not the most\r\n  general.\r\n*
  Stop using the smallest solution to an inequality to solve an equality, as\r\n  this
  leads to finding solutions that are not the most general.\r\n* Solve smaller inequalities
  from larger inequalities, e.g.\r\n  * `1 <= 2*x` implies `1 <= x`\r\n  * `x + 2
  <= y` implies `x <= y` and `2 <= y`\r\n\r\n## 0.6 *April 23rd 2018*\r\n* Solving
  constraints with `a-b` will emit `b <= a` constraints. e.g. solving\r\n  `n-1+1
  ~ n` will emit a `1 <= n` constraint.\r\n  * If you need subtraction to be treated
  as addition with a negated operarand\r\n    run with `-fplugin-opt GHC.TypeLits.Normalise:allow-negated-numbers`,
  and\r\n    the `b <= a` constraint won't be emitted. Note that doing so can lead
  to\r\n    unsound behaviour.\r\n* Try to solve equalities using smallest solution
  of inequalities:\r\n  * Solve `x + 1 ~ y` using `1 <= y` => `x + 1 ~ 1` => `x ~
  0`\r\n* Solve inequalities using simple transitivity rules:\r\n  * `2 <= x` implies
  `1 <= x`\r\n  * `x <= 9` implies `x <= 10`\r\n* Solve inequalities using _simple_
  monotonicity of addition rules:\r\n  * `2 <= x` implies `2 + 2*x <= 3*x`\r\n* Solve
  inequalities using _simple_ monotonicity of multiplication rules:\r\n  * `1 <= x`
  implies `1 <= 3*x`\r\n* Solve inequalities using _simple_ monotonicity of exponentiation
  rules:\r\n  * `1 <= x` implies `2 <= 2^x`\r\n* Solve inequalities using powers of
  2 and monotonicity of exponentiation:\r\n  * `2 <= x` implies `2^(2 + 2*x) <= 2^(3*x)`\r\n\r\n##
  0.5.10 *April 15th 2018*\r\n* Add support for GHC 8.5.20180306\r\n\r\n## 0.5.9 *March
  17th 2018*\r\n* Add support for GHC 8.4.1\r\n\r\n## 0.5.8 *January 4th 2018*\r\n*
  Add support for GHC 8.4.1-alpha1\r\n\r\n## 0.5.7 *November 7th 2017*\r\n* Solve
  inequalities such as: `1 <= a + 3`\r\n\r\n## 0.5.6 *October 31st 2017*\r\n* Fixes
  bugs:\r\n  * `(x + 1) ~ (2 * y)` no longer implies `((2 * (y - 1)) + 1) ~ x`\r\n\r\n##
  0.5.5 *October 22nd 2017*\r\n* Solve inequalities when their normal forms are the
  same, i.e.\r\n  * `(2 <= (2 ^ (n + d)))` implies `(2 <= (2 ^ (d + n)))`\r\n* Find
  more unifications:\r\n  * `8^x - 2*4^x ~ 8^y - 2*4^y ==> [x := y]`\r\n\r\n## 0.5.4
  *October 14th 2017*\r\n* Perform normalisations such as: `2^x * 4^x ==> 8^x`\r\n\r\n##
  0.5.3 *May 15th 2017*\r\n* Add support for GHC 8.2\r\n\r\n## 0.5.2 *January 15th
  2017*\r\n* Fixes bugs:\r\n  * Reification from SOP to Type sometimes loses product
  terms\r\n\r\n## 0.5.1 *September 29th 2016*\r\n* Fixes bugs:\r\n  * Cannot solve
  an equality for the second time in a definition group\r\n\r\n## 0.5 *August 17th
  2016*\r\n* Solve simple inequalities, i.e.:\r\n  * `a  <= a + 1`\r\n  * `2a <= 3a`\r\n
  \ * `1  <= a^b`\r\n\r\n## 0.4.6 *July 21th 2016*\r\n* Reduce \"x^(-y) * x^y\" to
  1\r\n* Fixes bugs:\r\n  * Subtraction in exponent induces infinite loop\r\n\r\n##
  0.4.5 *July 20th 2016*\r\n* Fixes bugs:\r\n  * Reifying negative exponent causes
  GHC panic\r\n\r\n## 0.4.4 *July 19th 2016*\r\n* Fixes bugs:\r\n  * Rounding error
  in `logBase` calculation\r\n\r\n## 0.4.3 *July 18th 2016*\r\n* Fixes bugs:\r\n  *
  False positive: \"f :: (CLog 2 (2 ^ n) ~ n, (1 <=? n) ~ True) => Proxy n -> Proxy
  (n+d)\"\r\n\r\n## 0.4.2 *July 8th 2016*\r\n* Find more unifications:\r\n  * `(2*e
  ^ d) ~ (2*e*a*c) ==> [a*c := 2*e ^ (d-1)]`\r\n  * `a^d * a^e ~ a^c ==> [c := d +
  e]`\r\n  * `x+5 ~ y ==> [x := y - 5]`, but only when `x+5 ~ y` is a given constraint\r\n\r\n##
  0.4.1 *February 4th 2016*\r\n* Find more unifications:\r\n  * `F x y k z ~ F x y
  (k-1+1) z` ==> [k := k], where `F` can be any type function\r\n\r\n## 0.4 *January
  19th 2016*\r\n* Stop using 'provenance' hack to create conditional evidence (GHC
  8.0+ only)\r\n* Find more unifications:\r\n  * `F x + 2 - 1 - 1 ~ F x` ==> [F x
  := F x], where `F` can be any type function with result `Nat`.\r\n\r\n## 0.3.2\r\n*
  Find more unifications:\r\n  * `(z ^ a) ~ (z ^ b) ==> [a := b]`\r\n  * `(i ^ a)
  ~ j ==> [a := round (logBase i j)]`, when `i` and `j` are integers, and `ceiling
  (logBase i j) == floor (logBase i j)`.\r\n\r\n## 0.3.1 *October 19th 2015*\r\n*
  Find more unifications:\r\n  * `(i * a) ~ j ==> [a := div j i]`, when `i` and `j`
  are integers, and `mod j i == 0`.\r\n  * `(i * a) + j ~ k  ==> [a := div (k-j) i]`,
  when `i`, `j`, and `k` are integers, and `k-j >= 0` and `mod (k-j) i == 0`.\r\n\r\n##
  0.3 *June 3rd 2015*\r\n* Find more unifications:\r\n  * `<TyApp xs> + x ~ 2 + x
  ==> [<TyApp xs> ~ 2]`\r\n* Fixes bugs:\r\n  * Unifying `a*b ~ b` now returns `[a
  ~ 1]`; before it erroneously returned `[a ~ ]`, which is interpred as `[a ~ 0]`...\r\n
  \ * Unifying `a+b ~ b` now returns `[a ~ 0]`; before it returned the undesirable,
  though equal, `[a ~ ]`\r\n\r\n## 0.2.1 *May 6th 2015*\r\n* Update `Eq` instance
  of `SOP`: Empty SOP is equal to 0\r\n\r\n## 0.2 *April 22nd 2015*\r\n* Finds more
  unifications:\r\n  * `(2 + a) ~ 5  ==>  [a := 3]`\r\n  * `(3 * a) ~ 0  ==>  [a :=
  0]`\r\n\r\n## 0.1.2 *April 21st 2015*\r\n* Don't simplify expressions with negative
  exponents\r\n\r\n## 0.1.1 *April 17th 2015*\r\n* Add workaround for https://ghc.haskell.org/trac/ghc/ticket/10301\r\n\r\n##
  0.1 *March 30th 2015*\r\n* Initial release\r\n"
changelog-type: markdown
description: "# ghc-typelits-natnormalise\r\n\r\n[![Build Status](https://github.com/clash-lang/ghc-typelits-natnormalise/actions/workflows/haskell-ci.yml/badge.svg?branch=master)](https://github.com/clash-lang/ghc-typelits-natnormalise/actions)\r\n[![Hackage](https://img.shields.io/hackage/v/ghc-typelits-natnormalise.svg)](https://hackage.haskell.org/package/ghc-typelits-natnormalise)\r\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-natnormalise.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-natnormalise)\r\n\r\nA
  type checker plugin for GHC that can solve _equalities_ and _inequalities_\r\nof
  types of kind `Nat`, where these types are either:\r\n\r\n* Type-level naturals\r\n*
  Type variables\r\n* Applications of the arithmetic expressions `(+,-,*,^)`.\r\n\r\nIt
  solves these equalities by normalising them to _sort-of_\r\n`SOP` (Sum-of-Products)
  form, and then perform a\r\nsimple syntactic equality.\r\n\r\nFor example, this
  solver can prove the equality between:\r\n\r\n```\r\n(x + 2)^(y + 2)\r\n```\r\n\r\nand\r\n\r\n```\r\n4*x*(2
  + x)^y + 4*(2 + x)^y + (2 + x)^y*x^2\r\n```\r\n\r\nBecause the latter is actually
  the `SOP` normal form\r\nof the former.\r\n\r\nTo use the plugin, add\r\n\r\n```\r\n{-#
  OPTIONS_GHC -fplugin GHC.TypeLits.Normalise #-}\r\n```\r\n\r\nTo the header of your
  file.\r\n"
description-type: markdown
hash: 8e519fe832b4ff5bb7f9348d79c2850799cffe58db6ff175d7c0997f07b30313
homepage: http://www.clash-lang.org/
latest: 0.7.10
license-name: BSD-2-Clause
maintainer: christiaan.baaij@gmail.com
synopsis: GHC typechecker plugin for types of kind GHC.TypeLits.Nat
test-bench-deps:
  base: '>=4.8 && <5'
  ghc-typelits-natnormalise: '>=0'
  tasty: '>=0.10'
  tasty-hunit: '>=0.9'
  template-haskell: '>=2.11.0.0'
