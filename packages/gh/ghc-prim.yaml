homepage: ''
changelog-type: markdown
hash: 2fe4921ec62a1655c7598b466c4e05bb9eb7ae5cdf7cef230d1258e7764ee089
test-bench-deps: {}
maintainer: libraries@haskell.org
synopsis: GHC primitives
changelog: "## 0.11.0\n\n- Shipped with GHC 9.8.1\n\n- Primitive pointer comparison
  functions are now levity-polymorphic, e.g.\n\n  ```haskell\n  sameArray# :: forall
  {l} (a :: TYPE (BoxedRep l)). Array# a -> Array# a -> Int#\n  ```\n\n  This change
  affects the following functions:\n    - `sameArray#`, `sameMutableArray#`,\n    -
  `sameSmallArray#`, `sameSmallMutableArray#`,\n    - `sameMutVar#`, `sameTVar#`,
  `sameMVar#`\n    - `sameIOPort#`, `eqStableName#`.\n\n- `keepAlive#` and `touch#`
  are now polymorphic in their state token (#23163; [CLC#152](https://github.com/haskell/core-libraries-committee/issues/152))\n\n-
  Several new primops were added:\n\n  - `copyMutableByteArrayNonOverlapping#`\n  -
  `copyAddrToAddr#`\n  - `copyAddrToAddrNonOverlapping#`\n  - `setAddrRange#`\n\n-
  New primops for fused multiply-add operations. These primops combine a\n  multiplication
  and an addition, compiling to a single instruction when\n  the `-mfma` flag is enabled
  and the architecture supports it.\n\n  The new primops are `fmaddFloat#, fmsubFloat#,
  fnmaddFloat#, fnmsubFloat# :: Float# -> Float# -> Float# -> Float#`\n  and `fmaddDouble#,
  fmsubDouble#, fnmaddDouble#, fnmsubDouble# :: Double# -> Double# -> Double# -> Double#`.\n\n
  \ These implement the following operations, while performing one single\n  rounding
  at the end, leading to a more accurate result:\n\n    - `fmaddFloat# x y z`, `fmaddDouble#
  x y z` compute `x * y + z`.\n    - `fmsubFloat# x y z`, `fmsubDouble# x y z` compute
  `x * y - z`.\n    - `fnmaddFloat# x y z`, `fnmaddDouble# x y z` compute `- x * y
  + z`.\n    - `fnmsubFloat# x y z`, `fnmsubDouble# x y z` compute `- x * y - z`.\n\n
  \ Warning: on unsupported architectures, the software emulation provided by\n  the
  fallback to the C standard library is not guaranteed to be IEEE-compliant.\n\n-
  `Unit`, `Tuple0`, `Tuple1`, `Tuple2`, `Tuple3` and so on (up to `Tuple64`)\n  are
  now exported from `GHC.Tuple.Prim` and reexported from `GHC.Tuple`.\n\n## 0.10.0\n\n-
  Shipped with GHC 9.6.1\n\n- The `listThreads#` primop was added, allowing the user
  to enumerate all\n  threads (running and blocked) in the program:\n  ```haskell\n
  \ listThreads# :: State# RealWorld -> (# State# RealWorld, Array# ThreadId# #)\n
  \ ```\n\n- The type of the `labelThread#` primop was changed from:\n  ```haskell\n
  \ labelThread# :: ThreadId# -> Addr# -> State# RealWorld -> State# RealWorld\n  ```\n
  \ to\n  ```haskell\n  labelThread# :: ThreadId# -> ByteArray# -> State# RealWorld
  -> State# RealWorld\n  ```\n  Where the `ByteArray#` must contain a UTF-8-encoded
  string.\n\n- The `threadLabel#` primop was added, allowing the user to query the
  label of\n  a given `ThreadId#`.\n\n- `isByteArrayPinned#` now only considers an
  array pinned if it was explicitly pinned\n  by the user. This is required to avoid
  ghc issue [#22255](https://gitlab.haskell.org/ghc/ghc/-/issues/22255)\n  which showed
  that the old behaviour could cause segfaults when used in combination\n  with compact
  regions.\n  We are working on ways to allow users and library authors to get back
  the\n  performance benefits of the old behaviour where possible.\n\n- `List` is
  now exported from `GHC.Types`.\n\n## 0.9.0 *August 2022*\n\n- Shipped with GHC 9.4.1\n\n-
  `magicDict` has been renamed to `withDict` and is now defined in\n  `GHC.Magic.Dict`
  instead of `GHC.Prim`. `withDict` now has the type:\n\n  ```haskell\n  withDict
  :: forall {rr :: RuntimeRep} st dt (r :: TYPE rr). st -> (dt => r) -> r\n  ```\n\n
  \ Unlike `magicDict`, `withDict` can be used without defining an\n  intermediate
  data type. For example, the `withTypeable` function from the\n  `Data.Typeable`
  module can now be defined as:\n\n  ```haskell\n  withTypeable :: forall k (a ::
  k) rep (r :: TYPE rep). ()\n               => TypeRep a -> (Typeable a => r) ->
  r\n  withTypeable rep k = withDict @(TypeRep a) @(Typeable a) rep k\n  ```\n\n  Note
  that the explicit type applications are required, as the call to\n  `withDict` would
  be ambiguous otherwise.\n\n- Primitive types and functions which handle boxed values
  are now levity-polymorphic,\n  meaning that they now also work with unlifted boxed
  values (i.e. values whose type\n  has kind `TYPE (BoxedRep Unlifted)`).\n\n  The
  following type constructors are now levity-polymorphic:\n\n    - `Array#`, `SmallArray#`,
  `Weak#`, `StablePtr#`, `StableName#`,\n\n    - `MutableArray#`, `SmallMutableArray#`,
  `MutVar#`,\n      `TVar#`, `MVar#`, `IOPort#`.\n\n  For example, `Array#` used to
  have kind:\n\n  ```haskell\n  Type -> UnliftedType\n  ```\n\n  but it now has kind:\n\n
  \ ```haskell\n  forall {l :: Levity}. TYPE (BoxedRep l) -> UnliftedType\n  ```\n\n
  \ Similarly, `MutVar#` used to have kind:\n\n  ```haskell\n  Type -> Type -> UnliftedType\n
  \ ```\n\n  but it now has kind:\n\n  ```haskell\n  forall {l :: Levity}. Type ->
  TYPE (BoxedRep l) -> UnliftedType\n  ```\n\n  This means that in `Array# a`, `MutableArray#
  s a`, `MutVar# s a`, ...,\n  the element type `a`, must always be boxed, but it
  can now either be lifted\n  or unlifted.\n  In particular, arrays and mutable variables
  can now be used to store\n  other arrays and mutable variables.\n\n  All functions
  which use these updated primitive types are also levity-polymorphic:\n\n    - all
  array operations (reading/writing/copying/...), for both arrays and small arrays,\n
  \     mutable and immutable:\n\n      - `newArray#`, `readArray#`, `writeArray#`,
  `sizeofArray#`, `sizeofMutableArray#`, `indexArray#`,\n        `unsafeFreezeArray#`,
  `unsafeThawArray#`, `copyArray#`, `copyMutableArray#`, `cloneArray#`,\n        `cloneMutableArray#`,
  `freezeArray#`, `thawArray#`, `casArray#`,\n\n      - `newSmallArray#`, `shrinkSmallMutableArray#`,
  `readSmallArray#`, `writeSmallArray#`, `sizeofSmallArray#`,\n        `getSizeofSmallMutableArray#`,
  `indexSmallArray#`, `unsafeFreezeSmallArray#`,\n        `unsafeThawSmallArray#`,
  `copySmallArray#`, `copySmallMutableArray#`, `cloneSmallArray#`,\n        `cloneSmallMutableArray#`,
  `freezeSmallArray#`, `thawSmallArray#`, `casSmallArray#`,\n\n    - `newMutVar#`,
  `readMutVar#`, `writeMutVar#`,`casMutVar#`,\n\n    - operations on `MVar#` and `TVar#`:\n\n
  \     - `newTVar#`, `readTVar#`, `readTVarIO#`, `writeTVar#`,\n\n      - `newMVar#`,
  `takeMVar#`, `tryTakeMVar#`, `putMVar#`,\n        `tryPutMVar#`, `readMVar#`, `tryReadMVar#`,\n\n
  \   - `STM` operations `atomically#`, `retry#`, `catchRetry#` and `catchSTM#`.\n\n
  \   - `newIOPort#`, `readIOPort#`, `writeIOPort#`,\n\n    - `mkWeak#`, `mkWeakNoFinalizer#`,
  `addCFinalizerToWeak#`, `deRefWeak#`, `finalizeWeak#`,\n\n    - `makeStablePtr#`,
  `deRefStablePtr#`, `eqStablePtr#`, `makeStableName#`, `stableNameToInt#`,\n\n  For
  example, the full type of `newMutVar#` is now:\n\n  ```haskell\n  newMutVar#\n    ::
  forall {l :: Levity} s (a :: TYPE (BoxedRep l)).\n       a -> State# s -> (# State#
  s, MVar# s a #)\n  ```\n\n  and the full type of `writeSmallArray#` is:\n\n  ```haskell\n
  \ writeSmallArray#\n    :: forall {l :: Levity} s (a :: TYPE ('BoxedRep l)).\n       SmallMutableArray#
  s a -> Int# -> a -> State# s -> State# s\n  ```\n\n- `ArrayArray#` and `MutableArrayArray#`
  have been moved from `GHC.Prim` to `GHC.Exts`.\n  They are deprecated, because their
  functionality is now subsumed by `Array#`\n  and `MutableArray#`.\n\n- `mkWeak#`,
  `mkWeakNoFinalizer#`, `touch#` and `keepAlive#` are now\n  levity-polymorphic instead
  of representation-polymorphic. For instance:\n\n  ```haskell\n  mkWeakNoFinalizer#\n
  \   :: forall {l :: Levity} {k :: Levity}\n              (a :: TYPE ('BoxedRep l))\n
  \             (b :: TYPE ('BoxedRep k)).\n       a -> b -> State# RealWorld -> (#
  State# RealWorld, Weak# b #)\n  ```\n\n  That is, the type signature now quantifies
  over the `Levity` of `a`\n  instead of its `RuntimeRep`. In addition, this variable
  is now inferred,\n  instead of specified, meaning that it is no longer eligible
  for visible type application.\n  Note that `b` is now also levity-polymorphic, due
  to the change outlined in the\n  previous point.\n\n- Primitive functions for throwing
  and catching exceptions are now more polymorphic\n  than before. For example, `catch#`
  now has type:\n\n  ```haskell\n  catch#\n    :: forall {r :: RuntimeRep} {l :: Levity}\n
  \             (a :: TYPE r)\n              (b :: TYPE ('BoxedRep l)).\n        (
  State# RealWorld -> (# State# RealWorld, a #) )\n    -> ( b -> State# RealWorld
  -> (# State# RealWorld, a #) )\n    -> State# RealWorld -> (# State# RealWorld,
  a #)\n  ```\n\n  The following functions are concerned:\n\n    - `catch#`,\n\n    -
  `raise#`, `raiseIO#`,\n\n    - `maskAsyncExceptions#`, `maskUninterruptible#`, `unmaskAsyncExceptions#`.\n\n
  \ Note in particular that `raise#` is now both representation-polymorphic\n  (with
  an inferred `RuntimeRep` argument) and levity-polymorphic, with type:\n\n  ```haskell\n
  \ raise# :: forall {l :: Levity} {r :: RuntimeRep}\n                   (a :: TYPE
  (BoxedRep l))\n                   (b :: TYPE r).\n            a -> b\n  ```\n\n-
  ``fork#`` and ``forkOn#`` are now representation-polymorphic. For example, ``fork#``\n
  \ now has type: ::\n\n      fork# :: forall {r :: RuntimeRep} (a :: TYPE r).\n               (State#
  RealWorld -> (# State# RealWorld, a #))\n            -> (State# RealWorld -> (#
  State# RealWorld, a #))\n\n- `reallyUnsafePtrEquality#` has been made more general,
  as it is now\n   both levity-polymorphic and heterogeneous:\n\n  ```haskell\n  reallyUnsafePtrEquality#\n
  \   :: forall {l :: Levity} {k :: Levity}\n              (a :: TYPE (BoxedRep l))\n
  \             (b :: TYPE (BoxedRep k))\n    . a -> b -> Int#\n  ```\n\n   This means
  that `reallyUnsafePtrEquality#` can be used on primitive arrays\n   such as `Array#`
  and `ByteArray#`. It can also be used on values of\n   different types, without
  needing to call `unsafeCoerce#`.\n\n- The following functions have been moved from
  `GHC.Prim` to `GHC.Exts`:\n  - `sameMutableArray#`, `sameSmallMutableArray#`, `sameMutableByteArray#`\n
  \    and `sameMutableArrayArray#`,\n  - `sameMutVar#`, `sameTVar#` and`sameMVar#`,\n
  \ - `sameIOPort#`,\n  - `eqStableName#`.\n\n- The following functions have been
  added to `GHC.Exts`:\n\n  ```haskell\n  sameArray# :: Array# a -> Array# a -> Int#\n
  \ sameSmallArray# :: SmallArray# a -> SmallArray# a -> Int#\n  sameByteArray# ::
  ByteArray# -> ByteArray# -> Int#\n  sameArrayArray# :: ArrayArray# -> ArrayArray#
  -> Int#\n  ```\n\n## 0.8.0\n\n- Change array access primops to use type with size
  maxing the element size:\n\n   - `index{Int,Word}<N>Array# :: ByteArray# -> Int#
  -> {Int,Word}<N>#`\n   - `indexWord8ArrayAs{Int,Word}<N># :: ByteArray# -> Int#
  -> {Int,Word}<N>#`\n   - `read{Int,Word}<N>Array# :: MutableByteArray# s -> Int#
  -> State# s -> (# State# s, {Int,Word}<N># #)`\n   - `write{Int,Word}<N>Array# ::
  MutableByteArray# s -> Int# -> {Int,Word}<N># -> State# s -> State# s`\n   - `readWord8ArrayAs{Int,Word}<N>#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, {Int,Word}<N># #)`\n
  \  - `writeWord8ArrayAs{Int,Word}<N># :: MutableByteArray# s -> Int# -> {Int,Word}<N>#
  -> State# s -> State# s`\n\n  This was already the for the 64-bit access primops,
  but not the smaller ones.\n\n- Rename some numeric prim type conversion primops:\n\n
  \  - `extend{Int,Word}<N>#` -> `extend<N>To{Int,Word}#`\n   - `narrow{Int,Word}<N>#`
  -> `intTo{Int,Word}<N>#`\n\n- Add primops for atomic compare and swap for sizes
  other that wordsize:\n\n   \tcasInt8Array# :: MutableByteArray# s -> Int# -> Int8#
  -> Int8# -> State# s -> (# State# s, Int8# #)\n\tcasInt16Array# :: MutableByteArray#
  s -> Int# -> Int16# -> Int16# -> State# s -> (# State# s, Int16# #)\n\tcasInt32Array#
  :: MutableByteArray# s -> Int# -> Int32# -> Int32# -> State# s -> (# State# s, Int32#
  #)\n\tcasInt64Array# :: MutableByteArray# s -> Int# -> Int64# -> Int64# -> State#
  s -> (# State# s, Int64# #)\n\tatomicCasWord8Addr# :: Addr# -> Word8# -> Word8#
  -> State# s -> (# State# s, Word8# #)\n\tatomicCasWord16Addr# :: Addr# -> Word16#
  -> Word16# -> State# s -> (# State# s, Word16# #)\n\tatomicCasWord32Addr# :: Addr#
  -> Word32# -> Word32# -> State# s -> (# State# s, Word32# #)\n\tatomicCasWord64Addr#
  :: Addr# -> WORD64 -> WORD64 -> State# s -> (# State# s, WORD64 #)\n\n## 0.7.0\n\n-
  Shipped with GHC 9.0.1\n\n- Add known-key `cstringLength#` to `GHC.CString`. This
  is just the\n  C function `strlen`, but a built-in rewrite rule allows GHC to\n
  \ compute the result at compile time when the argument is known.\n\n- In order to
  support unicode better the following functions in `GHC.CString`\n  gained UTF8 counterparts:\n\n
  \       unpackAppendCStringUtf8# :: Addr# -> [Char] -> [Char]\n        unpackFoldrCStringUtf8#
  :: Addr# -> (Char -> a -> a) -> a -> a\n\n- unpackFoldrCString* variants can now
  inline in phase [0].\n\n  If the folding function is known this allows for unboxing
  of the\n  Char argument resulting in much faster code.\n\n- Renamed the singleton
  tuple `GHC.Tuple.Unit` to `GHC.Tuple.Solo`.\n\n- Add primops for atomic exchange:\n\n
  \       atomicExchangeAddrAddr# :: Addr# -> Addr# -> State# s -> (# State# s, Addr#
  #)\n        atomicExchangeWordAddr# :: Addr# -> Word# -> State# s -> (# State# s,
  Word# #)\n\n- Add primops for atomic compare and swap at a given Addr#:\n\n        atomicCasAddrAddr#
  :: Addr# -> Addr# -> Addr# -> State# s -> (# State# s, Addr# #)\n        atomicCasWordAddr#
  :: Addr# -> Word# -> Word# -> State# s -> (# State# s, Word# #)\n\n- Add an explicit
  fixity for `(~)` and `(~~)`:\n\n        infix 4 ~, ~~\n\n- Introduce `keepAlive#`
  to replace `touch#` in controlling object lifetime without\n  the soundness issues
  of the latter (see\n  [#17760](https://gitlab.haskell.org/ghc/ghc/-/issues/17760)).\n\n##
  0.6.1\n\n- Shipped with GHC 8.10.1\n\n- Add primop for shrinking `SmallMutableArray#`\n
  \ to `GHC.Prim`:\n\n        shrinkSmallMutableArray# :: SmallMutableArray# s a ->
  Int# -> State# s -> State# s\n\n  Note that `resizeSmallMutableArray#` is not included
  as\n  as primitive. It has been implemented in library space in\n  `GHC.Exts`. See
  the release notes of `base`.\n\n- Added to `GHC.Prim`:\n\n        closureSize# ::
  a -> Int#\n\n- Added to `GHC.Prim`:\n\n        bitReverse# :: Word# -> Word#\n        bitReverse8#
  :: Word# -> Word#\n        bitReverse16# :: Word# -> Word#\n        bitReverse32#
  :: Word# -> Word#\n        bitReverse64# :: Word# -> Word#\n\n  `bitReverse#` is
  a primop that, for a `Word` of 8, 16, 32 or 64 bits,\n  reverses the order of its
  bits e.g. `0b110001` becomes `0b100011`.\n  These primitives use optimized machine
  instructions when available.\n\n- Add Int# multiplication primop:\n\n      timesInt2#
  :: Int# -> Int# -> (# Int#, Int#, Int# #)\n\n   `timesInt2#` computes the multiplication
  of its two parameters and returns a\n   triple (isHighNeeded,high,low) where high
  and low are respectively the high\n   and low bits of the double-word result. isHighNeeded
  is a cheap way to test\n   if the high word is a sign-extension of the low word
  (isHighNeeded = 0#) or\n   not (isHighNeeded = 1#).\n\n## 0.6.0\n\n- Shipped with
  GHC 8.8.1\n\n- Added to `GHC.Prim`:\n\n        traceBinaryEvent# :: Addr# -> Int#
  -> State# s -> State# s\n\n## 0.5.3\n\n- Shipped with GHC 8.6.1\n\n- Added to `GHC.Prim`:\n\n
  \       addWordC# :: Word# -> Word# -> (# Word#, Int# #)\n\n- `unpackClosure#` can
  now unpack any valid Haskell closure.\n  Previously it returned empty pointer and
  non-pointer arrays\n  for thunks.\n\n- Add unaligned bytearray access primops (#4442)\n\n
  \        readWord8ArrayAsChar# :: MutableByteArray# s -> Int# -> State# s -> (#
  State# s, Char# #)\n         readWord8ArrayAsAddr# :: MutableByteArray# s -> Int#
  -> State# s -> (# State# s, Addr# #)\n         readWord8ArrayAsFloat# :: MutableByteArray#
  s -> Int# -> State# s -> (# State# s, Float# #)\n         readWord8ArrayAsDouble#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Double# #)\n         readWord8ArrayAsStablePtr#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, StablePtr# #)\n         readWord8ArrayAsInt16#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Int16# #)\n         readWord8ArrayAsInt32#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Int32# #)\n         readWord8ArrayAsInt64#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Int64# #)\n         readWord8ArrayAsInt#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Int# #)\n\n         readWord8ArrayAsWord16#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Word16# #)\n         readWord8ArrayAsWord32#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Word32# #)\n         readWord8ArrayAsWord64#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Word64# #)\n         readWord8ArrayAsWord#
  :: MutableByteArray# s -> Int# -> State# s -> (# State# s, Word# #)\n\n         writeWord8ArrayAsChar#
  :: MutableByteArray# s -> Int# -> Char# -> State# s -> State# s\n         writeWord8ArrayAsAddr#
  :: MutableByteArray# s -> Int# -> Addr# -> State# s -> State# s\n         writeWord8ArrayAsFloat#
  :: MutableByteArray# s -> Int# -> Float# -> State# s -> State# s\n         writeWord8ArrayAsDouble#
  :: MutableByteArray# s -> Int# -> Double# -> State# s -> State# s\n         writeWord8ArrayAsStablePtr#
  :: MutableByteArray# s -> Int# -> StablePtr# -> State# s -> State# s\n\n         writeWord8ArrayAsInt16#
  :: MutableByteArray# s -> Int# -> Int16# -> State# s -> State# s\n         writeWord8ArrayAsInt32#
  :: MutableByteArray# s -> Int# -> Int32# -> State# s -> State# s\n         writeWord8ArrayAsInt64#
  :: MutableByteArray# s -> Int# -> Int64# -> State# s -> State# s\n         writeWord8ArrayAsInt#
  :: MutableByteArray# s -> Int# -> Int# -> State# s -> State# s\n\n         writeWord8ArrayAsWord16#
  :: MutableByteArray# s -> Int# -> Word16# -> State# s -> State# s\n         writeWord8ArrayAsWord32#
  :: MutableByteArray# s -> Int# -> Word32# -> State# s -> State# s\n         writeWord8ArrayAsWord64#
  :: MutableByteArray# s -> Int# -> Word64# -> State# s -> State# s\n         writeWord8ArrayAsWord#
  :: MutableByteArray# s -> Int# -> Word# -> State# s -> State# s\n\n## 0.5.2.0\n\n-
  Shipped with GHC 8.4.1\n\n- Added to `GHC.Prim`:\n\n        compareByteArrays# ::
  ByteArray# -> Int# -> ByteArray# -> Int# -> Int# -> Int#\n\n- Don't allocate a thunk
  for each unpacked UTF-8 character in `unpackCStringUtf8#`\n\n## 0.5.1.1 *November
  2017*\n\n- Shipped with GHC 8.2.2\n\n- Changed strictness properties of `catchRetry#`
  (#14171)\n\n## 0.5.1.0 *July 2017*\n\n- Shipped with GHC 8.2.1\n\n- Added to `GHC.Prim`:\n\n
  \       fabsDouble# :: Double# -> Double#\n        fabsFloat# :: Float# -> Float#\n
  \       isByteArrayPinned# :: ByteArray# -> Int#\n        isMutableByteArrayPinned#
  :: MutableByteArray# s -> Int#\n        anyToAddr# :: a -> State# (RealWorld) ->
  (# State# (RealWorld),Addr# #)\n\n- New primitives for compact regions in `GHC.Prim`:\n\n
  \       Compact#\n        compactNew#\n        compactResize#\n        compactContains#\n
  \       compactContainsAny#\n        compactGetFirstBlock#\n        compactGetNextBlock#\n
  \       compactAllocateBlock#\n        compactFixupPointers#\n        compactAdd#\n
  \       compactAddWithSharing#\n        compactSize#\n\n- Generalised `noDuplicate#`
  from\n\n        noDuplicate# :: State# (RealWorld) -> State# (RealWorld)\n\n    to\n\n
  \       noDuplicate# :: State# s -> State# s\n\n\n## 0.5.0.0\n\n- Shipped with GHC
  8.0.1\n\n- `GHC.Classes`: new `class IP (a :: Symbol) b | a -> b`\n\n- `GHC.Prim`:
  changed type signatures from\n\n        check# :: (State# RealWorld -> (# State#
  RealWorld, a #)) -> State# RealWorld -> (# State# RealWorld, () #)\n        finalizeWeak#
  :: Weak# a -> State# RealWorld -> (# State# RealWorld, Int#, State# RealWorld ->
  (# State# RealWorld, () #) #)\n        mkWeak# :: a -> b -> c -> State# RealWorld
  -> (# State# RealWorld, Weak# b #)\n\n    to\n\n        check# :: (State# RealWorld
  -> (# State# RealWorld, a #)) -> State# RealWorld -> State# RealWorld\n        finalizeWeak#
  :: Weak# a -> State# RealWorld -> (# State# RealWorld, Int#, State# RealWorld ->
  (# State# RealWorld, b #) #)\n        mkWeak# :: a -> b -> (State# RealWorld ->
  (# State# RealWorld, c #)) -> State# RealWorld -> (# State# RealWorld, Weak# b #)\n\n-
  Removed from `GHC.Prim`:\n\n        parAt# :: b -> a -> Int# -> Int# -> Int# ->
  Int# -> c -> Int#\n        parAtAbs# :: a -> Int# -> Int# -> Int# -> Int# -> Int#
  -> b -> Int#\n        parAtForNow# :: b -> a -> Int# -> Int# -> Int# -> Int# ->
  c -> Int#\n        parAtRel# :: a -> Int# -> Int# -> Int# -> Int# -> Int# -> b ->
  Int#\n        parGlobal# :: a -> Int# -> Int# -> Int# -> Int# -> b -> Int#\n        parLocal#
  :: a -> Int# -> Int# -> Int# -> Int# -> b -> Int#\n\n- Added to `GHC.Prim`:\n\n
  \       getSizeofMutableByteArray# :: MutableByteArray# d -> State# d -> (# State#
  d, Int# #)\n        subWordC# :: Word# -> Word# -> (# Word#, Int# #)\n        runRW#
  :: (State# RealWorld -> (# State# RealWorld, o #)) -> (# State# RealWorld, o #)\n\n-
  Added to `GHC.Types`:\n\n        data Module = Module TrName TrName\n        data
  Nat\n        data Symbol\n        data TrName = TrNameS Addr# | TrNameD [Char]\n
  \       data TyCon = TyCon Word# Word# Module TrName\n"
basic-deps:
  rts: ==1.0.*
all-versions:
- 0.3.1.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.5.1.1
- 0.5.2.0
- 0.5.3
- 0.6.1
- 0.7.0
- 0.8.0
- 0.9.0
- 0.10.0
- 0.11.0
author: ''
latest: 0.11.0
description-type: haddock
description: |-
  This package contains the primitive types and operations supplied by GHC.
  It is an internal package, only for the use of GHC developers.
  GHC users should not use it!  If you do use it then expect
  breaking changes at any time without warning.  You should prefer
  to import @GHC.Exts@ from the @base@ package instead.
license-name: BSD-3-Clause
