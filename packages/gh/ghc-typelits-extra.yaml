all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.8
- 0.5.0
author: Christiaan Baaij
basic-deps:
  base: '>=4.8 && <5'
  containers: '>=0.5.7.1 && <0.9'
  ghc: '>=8.8 && <9.17'
  ghc-prim: '>=0.5 && <1.0'
  ghc-tcplugin-api: '>=0.18.1.0 && <0.19'
  ghc-typelits-knownnat: '>=0.7.2 && <0.9'
  ghc-typelits-natnormalise: '>=0.9 && <0.10'
  integer-gmp: '>=1.0 && <1.1'
  template-haskell: '>=2.15 && <2.25'
  transformers: '>=0.4.2.0 && <0.7'
changelog: |
  # Changelog for the [`ghc-typelits-extra`](http://hackage.haskell.org/package/ghc-typelits-extra) package

  # 0.5.0 *October 17th 2025*
  * Add support for GHC 9.14
  * Uses https://hackage.haskell.org/package/ghc-tcplugin-api to make supporting new GHC versions easier
  * Support for GHC versions older than 8.8 is dropped

  # 0.4.8 *March 4th 2025*
  * Add support for GHC 9.12.1

  # 0.4.7 *May 22nd, 2024*
  * Add support for GHC 9.10.1
  * Fix Plugin silently fails when normalizing <= in GHC 9.4+ [#50](https://github.com/clash-lang/ghc-typelits-extra/issues/50)
  * Fix faulty lookup for `Mod` and `Div` in GHC >= 9.2

  # 0.4.6 *October 10th 2023*
  * Support for GHC-9.8.1

  # 0.4.5 *February 20th 2023*
  * Support for GHC-9.6.0.20230210

  # 0.4.4 *October 21st 2022*
  * Add support for GHC 9.4

  # 0.4.3 *June 18th 2021*
  * Add support for GHC 9.2.0.20210422

  # 0.4.2 *January 1st 2021*
  * Add support for GHC 9.0.1-rc1

  # 0.4.1 *November 10 2020*
  * Reduce `n <=? Max (n + p) p` to `True`

  # 0.4 *March 9 2020*
  * `Max` short-circuits on zero, but is stuckness preserving. i.e. `Max (0-1) 0` reduces to `(0-1)`
  * Reduce inside arithmetic equations. e.g. `1 + a ~ Max 0 a + CLog 2 2`

  # 0.3.3 *February 6th 2020*
  * Add support for GHC 8.10.1-alpha2

  # 0.3.2 *January 18th 2020*
  * Fix https://github.com/clash-lang/clash-compiler/issues/1019

  # 0.3.1 *August 26th 2019*
  * Reduce `a <=? Max a b` to `True`
  * Reduce `n ~ (Max a b) => a <=? n` to `True`
  * Prove `Max (1 + n) 1 ~ (n+1)`

  # 0.3 *September 14th 2018*
  * Move `KnownNat2` instances for GHC 8.4's `Div` and `Mod` from `ghc-typelits-extra` to `ghc-typelits-knownnat`

  # 0.2.6 *Julty 10th 2018*
  * Add support for GHC-8.6.1-alpha1

  # 0.2.5 *May 9th 2018*
  * Add support for ghc-typelits-natnormalise-0.6

  # 0.2.4 *January 4th 2018*
  * Add support for GHC-8.4.1-alpha1

  # 0.2.3 *May 15th 2017*
  * Support GHC 8.2
  * `Max`, `Min`, `GCD`, and `LCM` now have a commutativity property [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)
  * Reduce `GCD 0 x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)
  * Reduce `GCD 1 x` to `1` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)
  * Reduce `GCD x x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)
  * Reduce `LCM 0 x` to `0` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)
  * Reduce `LCM 1 x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)
  * Reduce `LCM x x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)
  * Reduce `Max (0-1) 0` to `0` [#10](https://github.com/clash-lang/ghc-typelits-extra/issues/10)
  * Reduce `Min (0-1) 0` to `0 - 1` [#10](https://github.com/clash-lang/ghc-typelits-extra/issues/10)
  * Fixes bugs:
    * Solver turns LCM into GCD [#8](https://github.com/clash-lang/ghc-typelits-extra/issues/8)
    * Solver turns Max into Min

  # 0.2.2 *January 15th 2017*
  * Reduce `Min n (n+1)` to `n`
  * Reduce `Max n (n+1)` to `n+1`
  * Reduce cases like `1 <=? Div 18 6` to `True`
  * Add a type-level division that rounds up: `type DivRU n d = Div (n + (d - 1)) d`
  * Add a type-level `divMod` : `DivMod :: Nat -> Nat -> '(Nat, Nat)`

  # 0.2.1 *September 29th 2016*
  * Reduce `Max n n` to `n`
  * Reduce `Min n n` to `n`

  # 0.2 *August 19th 2016*
  * New type-level operations:
    * `Max`: type-level `max`
    * `Min`: type-level `min`
    * `Div`: type-level `div`
    * `Mod`: type-level `mod`
    * `FLog`: floor of logBase
    * `Log`: exact integer logBase (i.e. where `floor (logBase b x) ~ ceiling (logBase b x)` holds)
    * `LCM`: type-level `lcm`
  * Fixes bugs:
    * `CLog b 1` doesn't reduce to `0`

  ## 0.1.3 *July 19th 2016*
  * Fixes bugs:
    * Rounding error in `CLog` calculation

  ## 0.1.2 *July 8th 2016*
  * Solve KnownNat constraints over CLog and GCD, i.e., KnownNat (CLog 2 4)

  ## 0.1.1 *January 20th 2016*
  * Compile on GHC 8.0+

  ## 0.1 *October 21st 2015*
  * Initial release
changelog-type: markdown
description: |
  # ghc-typelits-extra

  [![Build Status](https://github.com/clash-lang/ghc-typelits-extra/actions/workflows/haskell-ci.yml/badge.svg?branch=master)](https://github.com/clash-lang/ghc-typelits-extra/actions)
  [![Hackage](https://img.shields.io/hackage/v/ghc-typelits-extra.svg)](https://hackage.haskell.org/package/ghc-typelits-extra)
  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-extra.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-extra)

  Extra type-level operations on GHC.TypeLits.Nat and a custom solver implemented
  as a GHC type-checker plugin:

  * `GHC.TypeLits.Extra.Max`: type-level [max](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:max)
  * `GHC.TypeLits.Extra.Min`: type-level [min](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:min)
  * `GHC.TypeLits.Extra.Div`: type-level [div](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:div)
  * `GHC.TypeLits.Extra.Mod`: type-level [mod](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:mod)
  * `GHC.TypeLits.Extra.FLog`: type-level equivalent of [integerLogBase#](https://hackage.haskell.org/package/base-4.17.0.0/docs/GHC-Integer-Logarithms.html#v:integerLogBase-35-)
     .i.e. the exact integer equivalent to "`floor (logBase x y)`"
  * `GHC.TypeLits.Extra.CLog`: type-level equivalent of _the ceiling of_ [integerLogBase#](https://hackage.haskell.org/package/base-4.17.0.0/docs/GHC-Integer-Logarithms.html#v:integerLogBase-35-)
     .i.e. the exact integer equivalent to "`ceiling (logBase x y)`"
  * 'GHC.TypeLits.Extra.Log': type-level equivalent of <https://hackage.haskell.org/package/base-4.17.0.0/docs/GHC-Integer-Logarithms.html#v:integerLogBase-35- integerLogBase#>
       where the operation only reduces when "`floor (logBase b x) ~ ceiling (logBase b x)`"
  * `GHC.TypeLits.Extra.GCD`: a type-level [gcd](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:gcd)
  * `GHC.TypeLits.Extra.LCM`: a type-level [lcm](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:lcm)
description-type: markdown
hash: 27b76e1f4eb71ad80df2d7907262da3c99358abdfb5d3c60cd1ada38dff12dee
homepage: http://www.clash-lang.org/
latest: 0.5.0
license-name: BSD-2-Clause
maintainer: christiaan.baaij@gmail.com
synopsis: Additional type-level operations on GHC.TypeLits.Nat
test-bench-deps:
  base: '>=4.8 && <5'
  ghc-typelits-extra: '>=0'
  ghc-typelits-knownnat: '>=0.8.2'
  ghc-typelits-natnormalise: '>=0.9.0'
  tasty: '>=0.10'
  tasty-hunit: '>=0.9'
