all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
author: Christiaan Baaij
basic-deps:
  base: '>=4.8 && <5'
  containers: '>=0.5.7.1 && <0.8'
  ghc: '>=7.10 && <9.12'
  ghc-prim: '>=0.5 && <1.0'
  ghc-tcplugins-extra: '>=0.3.1'
  ghc-typelits-knownnat: '>=0.7.2 && <0.8'
  ghc-typelits-natnormalise: '>=0.7.1 && <0.8'
  integer-gmp: '>=1.0 && <1.1'
  transformers: '>=0.4.2.0 && <0.7'
changelog: "# Changelog for the [`ghc-typelits-extra`](http://hackage.haskell.org/package/ghc-typelits-extra)
  package\r\n\r\n# 0.4.7 *May 22nd, 2024*\r\n* Add support for GHC 9.10.1\r\n* Fix
  Plugin silently fails when normalizing <= in GHC 9.4+ [#50](https://github.com/clash-lang/ghc-typelits-extra/issues/50)\r\n*
  Fix faulty lookup for `Mod` and `Div` in GHC >= 9.2\r\n\r\n# 0.4.6 *October 10th
  2023*\r\n* Support for GHC-9.8.1\r\n\r\n# 0.4.5 *February 20th 2023*\r\n* Support
  for GHC-9.6.0.20230210\r\n\r\n# 0.4.4 *October 21st 2022*\r\n* Add support for GHC
  9.4\r\n\r\n# 0.4.3 *June 18th 2021*\r\n* Add support for GHC 9.2.0.20210422\r\n\r\n#
  0.4.2 *January 1st 2021*\r\n* Add support for GHC 9.0.1-rc1\r\n\r\n# 0.4.1 *November
  10 2020*\r\n* Reduce `n <=? Max (n + p) p` to `True`\r\n\r\n# 0.4 *March 9 2020*\r\n*
  `Max` short-circuits on zero, but is stuckness preserving. i.e. `Max (0-1) 0` reduces
  to `(0-1)`\r\n* Reduce inside arithmetic equations. e.g. `1 + a ~ Max 0 a + CLog
  2 2`\r\n\r\n# 0.3.3 *February 6th 2020*\r\n* Add support for GHC 8.10.1-alpha2\r\n\r\n#
  0.3.2 *January 18th 2020*\r\n* Fix https://github.com/clash-lang/clash-compiler/issues/1019\r\n\r\n#
  0.3.1 *August 26th 2019*\r\n* Reduce `a <=? Max a b` to `True`\r\n* Reduce `n ~
  (Max a b) => a <=? n` to `True`\r\n* Prove `Max (1 + n) 1 ~ (n+1)`\r\n\r\n# 0.3
  *September 14th 2018*\r\n* Move `KnownNat2` instances for GHC 8.4's `Div` and `Mod`
  from `ghc-typelits-extra` to `ghc-typelits-knownnat`\r\n\r\n# 0.2.6 *Julty 10th
  2018*\r\n* Add support for GHC-8.6.1-alpha1\r\n\r\n# 0.2.5 *May 9th 2018*\r\n* Add
  support for ghc-typelits-natnormalise-0.6\r\n\r\n# 0.2.4 *January 4th 2018*\r\n*
  Add support for GHC-8.4.1-alpha1\r\n\r\n# 0.2.3 *May 15th 2017*\r\n* Support GHC
  8.2\r\n* `Max`, `Min`, `GCD`, and `LCM` now have a commutativity property [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)\r\n*
  Reduce `GCD 0 x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)\r\n*
  Reduce `GCD 1 x` to `1` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)\r\n*
  Reduce `GCD x x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)\r\n*
  Reduce `LCM 0 x` to `0` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)\r\n*
  Reduce `LCM 1 x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)\r\n*
  Reduce `LCM x x` to `x` [#9](https://github.com/clash-lang/ghc-typelits-extra/issues/9)\r\n*
  Reduce `Max (0-1) 0` to `0` [#10](https://github.com/clash-lang/ghc-typelits-extra/issues/10)\r\n*
  Reduce `Min (0-1) 0` to `0 - 1` [#10](https://github.com/clash-lang/ghc-typelits-extra/issues/10)\r\n*
  Fixes bugs:\r\n  * Solver turns LCM into GCD [#8](https://github.com/clash-lang/ghc-typelits-extra/issues/8)\r\n
  \ * Solver turns Max into Min\r\n\r\n# 0.2.2 *January 15th 2017*\r\n* Reduce `Min
  n (n+1)` to `n`\r\n* Reduce `Max n (n+1)` to `n+1`\r\n* Reduce cases like `1 <=?
  Div 18 6` to `True`\r\n* Add a type-level division that rounds up: `type DivRU n
  d = Div (n + (d - 1)) d`\r\n* Add a type-level `divMod` : `DivMod :: Nat -> Nat
  -> '(Nat, Nat)`\r\n\r\n# 0.2.1 *September 29th 2016*\r\n* Reduce `Max n n` to `n`\r\n*
  Reduce `Min n n` to `n`\r\n\r\n# 0.2 *August 19th 2016*\r\n* New type-level operations:\r\n
  \ * `Max`: type-level `max`\r\n  * `Min`: type-level `min`\r\n  * `Div`: type-level
  `div`\r\n  * `Mod`: type-level `mod`\r\n  * `FLog`: floor of logBase\r\n  * `Log`:
  exact integer logBase (i.e. where `floor (logBase b x) ~ ceiling (logBase b x)`
  holds)\r\n  * `LCM`: type-level `lcm`\r\n* Fixes bugs:\r\n  * `CLog b 1` doesn't
  reduce to `0`\r\n\r\n## 0.1.3 *July 19th 2016*\r\n* Fixes bugs:\r\n  * Rounding
  error in `CLog` calculation\r\n\r\n## 0.1.2 *July 8th 2016*\r\n* Solve KnownNat
  constraints over CLog and GCD, i.e., KnownNat (CLog 2 4)\r\n\r\n## 0.1.1 *January
  20th 2016*\r\n* Compile on GHC 8.0+\r\n\r\n## 0.1 *October 21st 2015*\r\n* Initial
  release\r\n"
changelog-type: markdown
description: "# ghc-typelits-extra\r\n\r\n[![Build Status](https://github.com/clash-lang/ghc-typelits-extra/actions/workflows/haskell-ci.yml/badge.svg?branch=master)](https://github.com/clash-lang/ghc-typelits-extra/actions)\r\n[![Hackage](https://img.shields.io/hackage/v/ghc-typelits-extra.svg)](https://hackage.haskell.org/package/ghc-typelits-extra)\r\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-extra.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-extra)\r\n\r\nExtra
  type-level operations on GHC.TypeLits.Nat and a custom solver implemented\r\nas
  a GHC type-checker plugin:\r\n\r\n* `GHC.TypeLits.Extra.Max`: type-level [max](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:max)\r\n*
  `GHC.TypeLits.Extra.Min`: type-level [min](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:min)\r\n*
  `GHC.TypeLits.Extra.Div`: type-level [div](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:div)\r\n*
  `GHC.TypeLits.Extra.Mod`: type-level [mod](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:mod)\r\n*
  `GHC.TypeLits.Extra.FLog`: type-level equivalent of [integerLogBase#](https://hackage.haskell.org/package/base-4.17.0.0/docs/GHC-Integer-Logarithms.html#v:integerLogBase-35-)\r\n
  \  .i.e. the exact integer equivalent to \"`floor (logBase x y)`\"\r\n* `GHC.TypeLits.Extra.CLog`:
  type-level equivalent of _the ceiling of_ [integerLogBase#](https://hackage.haskell.org/package/base-4.17.0.0/docs/GHC-Integer-Logarithms.html#v:integerLogBase-35-)\r\n
  \  .i.e. the exact integer equivalent to \"`ceiling (logBase x y)`\"\r\n* 'GHC.TypeLits.Extra.Log':
  type-level equivalent of <https://hackage.haskell.org/package/base-4.17.0.0/docs/GHC-Integer-Logarithms.html#v:integerLogBase-35-
  integerLogBase#>\r\n     where the operation only reduces when \"`floor (logBase
  b x) ~ ceiling (logBase b x)`\"\r\n* `GHC.TypeLits.Extra.GCD`: a type-level [gcd](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:gcd)\r\n*
  `GHC.TypeLits.Extra.LCM`: a type-level [lcm](http://hackage.haskell.org/package/base-4.8.2.0/docs/Prelude.html#v:lcm)\r\n"
description-type: markdown
hash: 4c3b457fbe61cc02445ed556c7650e39e628c34ed06dcdffbdc1d1b6017e3035
homepage: http://www.clash-lang.org/
latest: 0.4.7
license-name: BSD-2-Clause
maintainer: christiaan.baaij@gmail.com
synopsis: Additional type-level operations on GHC.TypeLits.Nat
test-bench-deps:
  base: '>=4.8 && <5'
  ghc-typelits-extra: '>=0'
  ghc-typelits-knownnat: '>=0.7.2'
  ghc-typelits-natnormalise: '>=0.7.1'
  tasty: '>=0.10'
  tasty-hunit: '>=0.9'
