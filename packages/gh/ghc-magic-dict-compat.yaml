all-versions:
- 0.0.0.0
author: Hiromi ISHII
basic-deps:
  base: '>=4.7 && <5'
  dlist: '>=0'
  ghc: '>=0'
  ghc-prim: '>=0'
  ghc-tcplugins-extra: '>=0'
changelog: |
  # Changelog for `ghc-magic-dict-compat`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## 0.0.0.0 - 2023-12-31

  ### Added

  - First Release

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "# ghc-magic-dict-compat - A compatibility layer and GHC Plugin for `withDict`
  magic function\n\nSince GHC 9.4, the compiler provides magic type-class `WithDict`
  and its member function `withDict`:\n\n```haskell\nwithDict :: \n  forall cls meth
  {rr} (r :: Type rr).\n  WithDict cls meth =>\n  meth ->\n  (cls => r) ->\n  r\n```\n\nThis
  is the much safer version of `unsafeCoerce` to (unsafely) produce an instance dictionary
  for singleton classes dynamically - the compiler checks the preconditions statically
  at the compile time. Although it is potentially unsafe, this combinator is particularly
  useful when one writes the library manipulating instance dictionary dynamically.\n\nThis
  package provides a thin compatibility layer for `withDict` from `GHC.Magic.Dict`
  for GHC <9.4.\nThe package consists of the following two modules:\n\n- `GHC.Magic.Dict.Compat`\n-
  `GHC.Magic.Dict.Plugin`\n\nAll you have to do is to import `GHC.Magic.Dict.Compat`
  and put the following at the top of modules calling `withDict`:\n\n```haskell\n{-#
  OPTIONS_GHC -fplugin GHC.Magic.Dict.Plugin #-}\n```\n\n`GHC.Magic.Dict.Compat` provides
  a type-class `WithDict` and `withDict` combinator for GHC <9.4; it just re-expose
  them for GHC >= 9.4.\nFor GHC <9.4, user-facing API is almost the same, except for
  `withDict` is _not_ a member function of `WithDict`.\nThis is to prevent user-defined
  instances of `WithDict` by imposing unsolvable default signatures for hidden member
  functions.\nStill, users can refer to `WithDict` the constraint and use `withDict`
  function almost the same way as in GHC >=9.4, so this subtle difference should not
  be a big problem.\n\nAs users cannot define the instance of `WithDict` manually,
  the `GHC.Magic.Dict.Compat` module alone is not enough.\nHere, the GHC Plugin `GHC.Magic.Dict.Plugin`
  comes into play. For GHC <9.4, the plugin generates the dictionary for `WithDict`
  dynamically at the compile time, employing the almost the same logic as GHC >= 9.4.
  For newer GHC, it does no-op.\n\n## Usage\n\n1. Import `withDict` (and `WithDict`
  if necessary) from `GHC.Magic.Dict.Compat`\n2. Enable GHC Plugin `GHC.Magic.Dict.Plugin`
  either by placing `{-# GHC_OPTIONS -fplugin GHC.Magic.Dict.Plugin #-}` at the top
  or adding `-fplugin GHC.Magic.Dict.Plugin` to `ghc-options` of the package.\n\nWith
  this, you can freely use `withDict` both with GHC <9.4 and >=9.4.\n\n### Example\n\n```hs\n{-#
  LANGUAGE RankNTypes, ScopedTypeVariables, TypeApplications, ConstraintKinds #-}\n{-#
  GHC_OPTIONS -fplugin GHC.Magic.Dict.Plugin #-}\nmodule MyModule where\nimport GHC.Magic.Dict.Compat\n\nclass
  Given a where\n  given :: a\n\ngive :: a -> (Given a => r) -> r\ngive = withDict
  @(Given a) @a\n```\n"
description-type: markdown
hash: 612f7bfcbb91b5622142bc74dc4f38b164ade648e1d7f71cff2d68ae984d173b
homepage: https://github.com/konn/ghc-magic-dict-compat#readme
latest: 0.0.0.0
license-name: BSD-3-Clause
maintainer: konn.jinro_at_gmail.com
synopsis: A compatibility layer and GHC plugin for `withDict` from "GHC.Magic.Dict".
test-bench-deps:
  base: '>=4.7 && <5'
  falsify: '>=0'
  ghc-magic-dict-compat: '>=0'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-hunit: '>=0'
