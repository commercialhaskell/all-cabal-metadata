homepage: http://clash-lang.org/
changelog-type: markdown
hash: 7d4c315c51ac2e1d5ab92634b87448de7d08f91dd06535f957344b386b49087f
test-bench-deps:
  base: '>=4.8 && <5'
  ghc-typelits-knownnat: -any
  ghc-typelits-natnormalise: '>=0.7.1 && <0.8'
  tasty-quickcheck: '>=0.8'
  tasty-hunit: '>=0.9'
  tasty: '>=0.10'
maintainer: christiaan.baaij@gmail.com
synopsis: Derive KnownNat constraints from other KnownNat constraints
changelog: |
  # Changelog for the [`ghc-typelits-knownnat`](http://hackage.haskell.org/package/ghc-typelits-knownnat) package

  ## 0.7.5 *February 10th 2021*
  * Raise upper limit for TH dep to allow building on ghc-9.0.1

  ## 0.7.4 *January 1st 2021*
  * Add support for GHC 9.0.1-rc1

  ## 0.7.3 *July 25th 2020*
  * Fix https://github.com/clash-lang/clash-compiler/issues/1454

  ## 0.7.2 *February 6th 2020*
   * Add support for GHC 8.10.0-alpha2

  ## 0.7.1 *October 8th 2019*
  * Fix [#29](https://github.com/clash-lang/ghc-typelits-knownnat/issues/29)
  * Fix [#30](https://github.com/clash-lang/ghc-typelits-knownnat/issues/30)

  ## 0.7 *August 26th 2018*
  * Solve "known" type-level Booleans, also inside `If` (GHC 8.6+)

  ## 0.6 *September 14th 2018*
  * Move `KnownNat2` instances for `Div` and `Mod` from `ghc-typelits-extra` to `ghc-typelits-knownnat`

  ## 0.5 *May 9th 2018*
  * Fix Inferred constraint is too strong [#19](https://github.com/clash-lang/ghc-typelits-knownnat/issues/19)

  ## 0.4.2 *April 15th 2018*
  * Add support for GHC 8.5.20180306

  ## 0.4.1 *March 17th, 2018*
  * Add support for GHC 8.4.1

  ## 0.4 *January 4th, 2018*
  * Add partial GHC 8.4.1-alpha1 support
  * Drop `singletons` dependency [#15](https://github.com/clash-lang/ghc-typelits-knownnat/issues/15)
    * `KnownNatN` classes no longer have the `KnownNatFN` associated type family

  ## 0.3.1 *August 17th 2017*
  * Fix testsuite for GHC 8.2.1

  ## 0.3 *May 15th 2017*
  * GHC 8.2.1 support: Underlying representation for `KnownNat` in GHC 8.2 is `Natural`, meaning users of this plugin will need to update their code to use `Natural` for GHC 8.2 as well.

  ## 0.2.4 *April 10th 2017*
  * New features:
    * Derive constraints for unary functions via a `KnownNat1` instance; thanks to @nshepperd [#11](https://github.com/clash-lang/ghc-typelits-knownnat/pull/11)
    * Use type-substituted [G]iven KnownNats (partial solve for [#13](https://github.com/clash-lang/ghc-typelits-knownnat/issues/13))

  ## 0.2.3 *January 15th 2017*
  * Solve normalised literal constraints, i.e.:
    * `KnownNat (((addrSize + 1) - (addrSize - 1))) ~ KnownNat 2`

  ## 0.2.2 *September 29th 2016*
  * New features:
    * Derive smaller constraints from larger constraints when they differ by a single variable, i.e. `KnownNat (a + b), KnownNat b` implies `KnownNat a`.

  ## 0.2.1 *August 19th 2016*
  * Fixes bugs:
    * Source location of derived wanted constraints is, erroneously, always set to line 1, column 1

  ## 0.2 *August 17th 2016*
  * New features:
    * Handle `GHC.TypeLits.-`
    * Handle custom, user-defined, type-level operations
    * Thanks to Gabor Greif (@ggreif): derive smaller from larger constraints, i.e. `KnownNat (n+1)` implies `KnownNat n`

  ## 0.1.2
  * New features: Solve "complex" KnownNat constraints involving arbitrary type-functions, as long as there is a given KnownNat constraint for this type functions.

  ## 0.1.1 *August 11th 2016*
  * Fixes bug: panic on a non-given KnownNat constraint variable

  ## 0.1 *August 10th 2016*
  * Initial release
basic-deps:
  ghc: '>=8.0.1 && <9.2'
  base: '>=4.9 && <5'
  ghc-tcplugins-extra: '>=0.3.1'
  integer-gmp: '>=0.5.1.0'
  ghc-typelits-natnormalise: '>=0.7.1 && <0.8'
  ghc-prim: '>=0.4.0.0 && <0.8'
  transformers: '>=0.5.2.0 && <0.6'
  template-haskell: '>=2.11.0.0 && <2.18'
all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- '0.5'
- 0.5.1
- '0.6'
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
author: Christiaan Baaij
latest: 0.7.5
description-type: markdown
description: |
  # ghc-typelits-knownnat

  [![Build Status](https://secure.travis-ci.org/clash-lang/ghc-typelits-knownnat.svg?branch=master)](http://travis-ci.org/clash-lang/ghc-typelits-knownnat)
  [![Hackage](https://img.shields.io/hackage/v/ghc-typelits-knownnat.svg)](https://hackage.haskell.org/package/ghc-typelits-knownnat)
  [![Hackage Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-knownnat.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-knownnat)

  A type checker plugin for GHC that can derive "complex" `KnownNat`
  constraints from other simple/variable `KnownNat` constraints. i.e. without this
  plugin, you must have both a `KnownNat n` and a `KnownNat (n+2)` constraint in
  the type signature of the following function:

  ```haskell
  f :: forall n . (KnownNat n, KnownNat (n+2)) => Proxy n -> Integer
  f _ = natVal (Proxy :: Proxy n) + natVal (Proxy :: Proxy (n+2))
  ```

  Using the plugin you can omit the `KnownNat (n+2)` constraint:

  ```haskell
  f :: forall n . KnownNat n => Proxy n -> Integer
  f _ = natVal (Proxy :: Proxy n) + natVal (Proxy :: Proxy (n+2))
  ```

  The plugin can derive `KnownNat` constraints for types consisting of:

  * Type variables, when there is a corresponding `KnownNat` constraint
  * Type-level naturals
  * Applications of the arithmetic expression: `{+,-,*,^}`
  * Type functions, when there is either:
    * a matching given `KnownNat` constraint; or
    * a corresponding `KnownNat<N>` instance for the type function

  To elaborate the latter points, given the type family `Min`:

  ```haskell
  type family Min (a :: Nat) (b :: Nat) :: Nat where
    Min 0 b = 0
    Min a b = If (a <=? b) a b
  ```

  the plugin can derive a `KnownNat (Min x y + 1)` constraint given only a
  `KnownNat (Min x y)` constraint:

  ```haskell
  g :: forall x y . (KnownNat (Min x y)) => Proxy x -> Proxy y -> Integer
  g _ _ = natVal (Proxy :: Proxy (Min x y + 1))
  ```

  And, given the type family `Max`:

  ```haskell
  type family Max (a :: Nat) (b :: Nat) :: Nat where
    Max 0 b = b
    Max a b = If (a <=? b) b a
  ```

  and corresponding `KnownNat2` instance:

  ```haskell
  instance (KnownNat a, KnownNat b) => KnownNat2 "TestFunctions.Max" a b where
    natSing2 = let x = natVal (Proxy @a)
                   y = natVal (Proxy @b)
                   z = max x y
               in  SNatKn z
    {-# INLINE natSing2 #-}
  ```

  the plugin can derive a `KnownNat (Max x y + 1)` constraint given only a
  `KnownNat x` and `KnownNat y` constraint:

  ```haskell
  h :: forall x y . (KnownNat x, KnownNat y) => Proxy x -> Proxy y -> Integer
  h _ _ = natVal (Proxy :: Proxy (Max x y + 1))
  ```

  To use the plugin, add the

  ```
  OPTIONS_GHC -fplugin GHC.TypeLits.KnownNat.Solver
  ```

  Pragma to the header of your file.
license-name: BSD-2-Clause
