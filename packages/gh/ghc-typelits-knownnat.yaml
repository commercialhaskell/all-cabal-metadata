all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- '0.3'
- 0.3.1
- '0.4'
- 0.4.1
- 0.4.2
- '0.5'
- 0.5.1
- '0.6'
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
- 0.7.10
- 0.7.12
author: Christiaan Baaij
basic-deps:
  base: '>=4.9 && <5'
  ghc: '>=8.0.1 && <9.12'
  ghc-prim: '>=0.4.0.0 && <0.12'
  ghc-tcplugins-extra: '>=0.3.1'
  ghc-typelits-natnormalise: '>=0.7.1 && <0.8'
  integer-gmp: '>=0.5.1.0'
  template-haskell: '>=2.11.0.0 && <2.23'
  transformers: '>=0.5.2.0 && <0.7'
changelog: "# Changelog for the [`ghc-typelits-knownnat`](http://hackage.haskell.org/package/ghc-typelits-knownnat)
  package\r\n\r\n## 0.7.12 *May 22nd, 2024*\r\n* Support for GHC 9.10.1\r\n\r\n##
  0.7.11\r\n* Fix infinite loop between plugin and solver pipeline\r\n\r\n## 0.7.10
  *November 14th 2023*\r\n* Work around [GHC issue 23109](https://gitlab.haskell.org/ghc/ghc/-/issues/23109)\r\n\r\n##
  0.7.9 *October 10th 2023*\r\n* Support for GHC 9.8.1\r\n\r\n## 0.7.8 *February 20th
  2023*\r\n* Support for GHC-9.6.0.20230210\r\n\r\n## 0.7.7 *October 10th 2022*\r\n*
  Add support for GHC 9.4\r\n\r\n## 0.7.6 *June 18th 2021*\r\n* Add support for GHC
  9.2.0.20210422\r\n\r\n## 0.7.5 *February 10th 2021*\r\n* Raise upper limit for TH
  dep to allow building on ghc-9.0.1\r\n\r\n## 0.7.4 *January 1st 2021*\r\n* Add support
  for GHC 9.0.1-rc1\r\n\r\n## 0.7.3 *July 25th 2020*\r\n* Fix https://github.com/clash-lang/clash-compiler/issues/1454\r\n\r\n##
  0.7.2 *February 6th 2020*\r\n * Add support for GHC 8.10.0-alpha2\r\n\r\n## 0.7.1
  *October 8th 2019*\r\n* Fix [#29](https://github.com/clash-lang/ghc-typelits-knownnat/issues/29)\r\n*
  Fix [#30](https://github.com/clash-lang/ghc-typelits-knownnat/issues/30)\r\n\r\n##
  0.7 *August 26th 2018*\r\n* Solve \"known\" type-level Booleans, also inside `If`
  (GHC 8.6+)\r\n\r\n## 0.6 *September 14th 2018*\r\n* Move `KnownNat2` instances for
  `Div` and `Mod` from `ghc-typelits-extra` to `ghc-typelits-knownnat`\r\n\r\n## 0.5
  *May 9th 2018*\r\n* Fix Inferred constraint is too strong [#19](https://github.com/clash-lang/ghc-typelits-knownnat/issues/19)\r\n\r\n##
  0.4.2 *April 15th 2018*\r\n* Add support for GHC 8.5.20180306\r\n\r\n## 0.4.1 *March
  17th, 2018*\r\n* Add support for GHC 8.4.1\r\n\r\n## 0.4 *January 4th, 2018*\r\n*
  Add partial GHC 8.4.1-alpha1 support\r\n* Drop `singletons` dependency [#15](https://github.com/clash-lang/ghc-typelits-knownnat/issues/15)\r\n
  \ * `KnownNatN` classes no longer have the `KnownNatFN` associated type family\r\n\r\n##
  0.3.1 *August 17th 2017*\r\n* Fix testsuite for GHC 8.2.1\r\n\r\n## 0.3 *May 15th
  2017*\r\n* GHC 8.2.1 support: Underlying representation for `KnownNat` in GHC 8.2
  is `Natural`, meaning users of this plugin will need to update their code to use
  `Natural` for GHC 8.2 as well.\r\n\r\n## 0.2.4 *April 10th 2017*\r\n* New features:\r\n
  \ * Derive constraints for unary functions via a `KnownNat1` instance; thanks to
  @nshepperd [#11](https://github.com/clash-lang/ghc-typelits-knownnat/pull/11)\r\n
  \ * Use type-substituted [G]iven KnownNats (partial solve for [#13](https://github.com/clash-lang/ghc-typelits-knownnat/issues/13))\r\n\r\n##
  0.2.3 *January 15th 2017*\r\n* Solve normalised literal constraints, i.e.:\r\n  *
  `KnownNat (((addrSize + 1) - (addrSize - 1))) ~ KnownNat 2`\r\n\r\n## 0.2.2 *September
  29th 2016*\r\n* New features:\r\n  * Derive smaller constraints from larger constraints
  when they differ by a single variable, i.e. `KnownNat (a + b), KnownNat b` implies
  `KnownNat a`.\r\n\r\n## 0.2.1 *August 19th 2016*\r\n* Fixes bugs:\r\n  * Source
  location of derived wanted constraints is, erroneously, always set to line 1, column
  1\r\n\r\n## 0.2 *August 17th 2016*\r\n* New features:\r\n  * Handle `GHC.TypeLits.-`\r\n
  \ * Handle custom, user-defined, type-level operations\r\n  * Thanks to Gabor Greif
  (@ggreif): derive smaller from larger constraints, i.e. `KnownNat (n+1)` implies
  `KnownNat n`\r\n\r\n## 0.1.2\r\n* New features: Solve \"complex\" KnownNat constraints
  involving arbitrary type-functions, as long as there is a given KnownNat constraint
  for this type functions.\r\n\r\n## 0.1.1 *August 11th 2016*\r\n* Fixes bug: panic
  on a non-given KnownNat constraint variable\r\n\r\n## 0.1 *August 10th 2016*\r\n*
  Initial release\r\n"
changelog-type: markdown
description: "# ghc-typelits-knownnat\r\n\r\n[![Build Status](https://github.com/clash-lang/ghc-typelits-knownnat/actions/workflows/haskell-ci.yml/badge.svg?branch=master)](https://github.com/clash-lang/ghc-typelits-knownnat/actions)\r\n[![Hackage](https://img.shields.io/hackage/v/ghc-typelits-knownnat.svg)](https://hackage.haskell.org/package/ghc-typelits-knownnat)\r\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/ghc-typelits-knownnat.svg?style=flat)](http://packdeps.haskellers.com/feed?needle=exact%3Aghc-typelits-knownnat)\r\n\r\nA
  type checker plugin for GHC that can derive \"complex\" `KnownNat`\r\nconstraints
  from other simple/variable `KnownNat` constraints. i.e. without this\r\nplugin,
  you must have both a `KnownNat n` and a `KnownNat (n+2)` constraint in\r\nthe type
  signature of the following function:\r\n\r\n```haskell\r\nf :: forall n . (KnownNat
  n, KnownNat (n+2)) => Proxy n -> Integer\r\nf _ = natVal (Proxy :: Proxy n) + natVal
  (Proxy :: Proxy (n+2))\r\n```\r\n\r\nUsing the plugin you can omit the `KnownNat
  (n+2)` constraint:\r\n\r\n```haskell\r\nf :: forall n . KnownNat n => Proxy n ->
  Integer\r\nf _ = natVal (Proxy :: Proxy n) + natVal (Proxy :: Proxy (n+2))\r\n```\r\n\r\nThe
  plugin can derive `KnownNat` constraints for types consisting of:\r\n\r\n* Type
  variables, when there is a corresponding `KnownNat` constraint\r\n* Type-level naturals\r\n*
  Applications of the arithmetic expression: `{+,-,*,^}`\r\n* Type functions, when
  there is either:\r\n  * a matching given `KnownNat` constraint; or\r\n  * a corresponding
  `KnownNat<N>` instance for the type function\r\n\r\nTo elaborate the latter points,
  given the type family `Min`:\r\n\r\n```haskell\r\ntype family Min (a :: Nat) (b
  :: Nat) :: Nat where\r\n  Min 0 b = 0\r\n  Min a b = If (a <=? b) a b\r\n```\r\n\r\nthe
  plugin can derive a `KnownNat (Min x y + 1)` constraint given only a\r\n`KnownNat
  (Min x y)` constraint:\r\n\r\n```haskell\r\ng :: forall x y . (KnownNat (Min x y))
  => Proxy x -> Proxy y -> Integer\r\ng _ _ = natVal (Proxy :: Proxy (Min x y + 1))\r\n```\r\n\r\nAnd,
  given the type family `Max`:\r\n\r\n```haskell\r\ntype family Max (a :: Nat) (b
  :: Nat) :: Nat where\r\n  Max 0 b = b\r\n  Max a b = If (a <=? b) b a\r\n```\r\n\r\nand
  corresponding `KnownNat2` instance:\r\n\r\n```haskell\r\ninstance (KnownNat a, KnownNat
  b) => KnownNat2 \"TestFunctions.Max\" a b where\r\n  natSing2 = let x = natVal (Proxy
  @a)\r\n                 y = natVal (Proxy @b)\r\n                 z = max x y\r\n
  \            in  SNatKn z\r\n  {-# INLINE natSing2 #-}\r\n```\r\n\r\nthe plugin
  can derive a `KnownNat (Max x y + 1)` constraint given only a\r\n`KnownNat x` and
  `KnownNat y` constraint:\r\n\r\n```haskell\r\nh :: forall x y . (KnownNat x, KnownNat
  y) => Proxy x -> Proxy y -> Integer\r\nh _ _ = natVal (Proxy :: Proxy (Max x y +
  1))\r\n```\r\n\r\nTo use the plugin, add the\r\n\r\n```\r\nOPTIONS_GHC -fplugin
  GHC.TypeLits.KnownNat.Solver\r\n```\r\n\r\nPragma to the header of your file.\r\n"
description-type: markdown
hash: 493475ea80380139115a944fb436b619714f1b5859470525cd8792dfb7ba12ec
homepage: http://clash-lang.org/
latest: 0.7.12
license-name: BSD-2-Clause
maintainer: christiaan.baaij@gmail.com
synopsis: Derive KnownNat constraints from other KnownNat constraints
test-bench-deps:
  base: '>=4.8 && <5'
  ghc-typelits-knownnat: '>=0'
  ghc-typelits-natnormalise: '>=0.7.1 && <0.8'
  tasty: '>=0.10'
  tasty-hunit: '>=0.9'
  tasty-quickcheck: '>=0.8'
