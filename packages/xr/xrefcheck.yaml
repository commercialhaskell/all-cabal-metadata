all-versions:
- 0.1.0.0
- 0.1.1
- 0.1.1.1
- 0.1.1.2
- 0.1.2
- 0.1.3
- '0.2'
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
author: Kostya Ivanov, Serokell
basic-deps:
  Glob: '>=0'
  aeson: '>=0'
  aeson-casing: '>=0'
  async: '>=0'
  base: '>=4.14.3.0 && <5'
  bytestring: '>=0'
  cmark-gfm: '>=0.2.5'
  code-page: '>=0'
  containers: '>=0'
  crypton-connection: '>=0'
  directory: '>=0'
  dlist: '>=0'
  filepath: '>=0'
  fmt: '>=0'
  ftp-client: '>=0'
  http-client: '>=0'
  http-types: '>=0'
  lens: '>=0'
  modern-uri: '>=0'
  mtl: '>=0'
  nyan-interpolation: '>=0'
  o-clock: '>=0'
  optparse-applicative: '>=0'
  pretty-terminal: '>=0'
  process: '>=0'
  reflection: '>=0'
  regex-tdfa: '>=0'
  req: '>=0'
  safe-exceptions: '>=0'
  tagsoup: '>=0'
  text: '>=0'
  text-metrics: '>=0'
  time: '>=0'
  transformers: '>=0'
  universum: '>=0'
  uri-bytestring: '>=0'
  with-utf8: '>=0'
  xrefcheck: '>=0'
  yaml: '>=0'
changelog: |
  <!--
   - SPDX-FileCopyrightText: 2021 Serokell <https://serokell.io>
   -
   - SPDX-License-Identifier: MPL-2.0
   -->

  Unreleased
  ==========

  0.3.1
  ==========

  * [#311](https://github.com/serokell/xrefcheck/issues/311)
    + Fix a "resource exhausted" crash on repositories containing a large number
      of Markdown files.

  0.3.0
  ==========

  * [#176](https://github.com/serokell/xrefcheck/pull/176)
    + Enabled `autolink` extension for `cmark-gfm`, so now we're finding strings
      like `www.google.com` or `https://google.com`, treating them as links
      and checking.
  * [#175](https://github.com/serokell/xrefcheck/pull/175)
    + Reorganize top-level config keys.
  * [#178](https://github.com/serokell/xrefcheck/pull/178)
    + Rename exclusion-related config options.
  * [#183](https://github.com/serokell/xrefcheck/pull/183)
    + Add support for image links.
  * [#199](https://github.com/serokell/xrefcheck/pull/199)
    + Now annotation
      `<!-- xrefcheck: ignore all -->` instead of `<!-- xrefcheck: ignore file -->`
      should be used to disable checking for links in file, so it's clearer that
      file itself is not ignored (and links can target it).
  * [#215](https://github.com/serokell/xrefcheck/pull/215)
    + Now we notify user when there are scannable files that were not added to Git
      yet. Also added CLI option `--include-untracked` to scan such files and treat
      as existing.
  * [#191](https://github.com/serokell/xrefcheck/pull/191)
    + Now we consider slash `/` (and only it) as path separator in local links for all OS,
      so xrefcheck's report is OS-independent
    + Use utf-8 compatible codepage on Windows
  * [#224](https://github.com/serokell/xrefcheck/pull/224)
    + Now the program output does not contain unicode characters that are not widely supported.
  * [#229](https://github.com/serokell/xrefcheck/pull/229)
    + Now we call references to anchors in current file (e.g. `[a](#b)`) as
    `file-local` references instead of calling them `current file` (which was ambiguous).
  * [#233](https://github.com/serokell/xrefcheck/pull/233)
    + Now xrefcheck does not follow redirect links by default. It fails for permanent
      redirect responses (i.e. 301 and 308) and passes for temporary ones (i.e. 302, 303, 307).
  * [#231](https://github.com/serokell/xrefcheck/pull/231)
    + Anchor analysis takes now into account the appropriate case-sensitivity depending on
      the configured Markdown flavour.
  * [#254](https://github.com/serokell/xrefcheck/pull/254)
    + Now the `dump-config` command does not overwrite a file unless explicitly told with a
      `--force` flag. Also, a `--stdout` flag allows to print the config to stdout instead.
  * [#250](https://github.com/serokell/xrefcheck/pull/250)
    + Now the redirect behavior for external references can be modified via rules in the
      configuration file with the `externalRefRedirects` parameter.
  * [#261](https://github.com/serokell/xrefcheck/pull/261)
    + Symlinks are now not processed by the scanner.
  * [#268](https://github.com/serokell/xrefcheck/pull/268)
    + Added CLI option `--color` that enables ANSI colors in output.
    + Changed the output coloring defaults to show colors when `CI` env variable is `true`.
  * [#271](https://github.com/serokell/xrefcheck/pull/271)
    + Now Xrefcheck is able to follow relative redirects.
  * [#262](https://github.com/serokell/xrefcheck/pull/262)
    + Now Xrefcheck includes a scanner that verifies the repository symlinks.
  * [#307](https://github.com/serokell/xrefcheck/pull/307)
    + The output of Xrefcheck is now more legible.
    + Add the `--print-unix-paths` (`-u`) flag to print paths in Unix style (with
      forward slashes) on all platforms.

  0.2.2
  ==========

  * [#145](https://github.com/serokell/xrefcheck/pull/145)
    + Add check that there is no unknown fields in config.
  * [#158](https://github.com/serokell/xrefcheck/pull/158)
    + Fixed bug when we reported footnotes as broken links.
  * [#163](https://github.com/serokell/xrefcheck/pull/163)
    + Fixed an issue where the progress bar thread might be unexpectedly cancelled and jumble up the output.
  * [#184](https://github.com/serokell/xrefcheck/pull/184)
    + Make `flavor` a required parameter.
  * [#182](https://github.com/serokell/xrefcheck/pull/182)
    + Now we call references to anchors in current file (e.g. `[a](#b)`) as
    `current file` references instead of calling them `local` (which was ambiguous).
  * [#188](https://github.com/serokell/xrefcheck/pull/188)
    + Added CLI option `--no-colors` that disables ANSI colors in output.
    + Automatically disable coloring if it is not supported
  * [#152](https://github.com/serokell/xrefcheck/pull/152)
    + Now we report links that target a file outside repository (e.g. `/../a.md`)
      as broken (with message `Link targets a local file outside repository`).
      Same for links that are using directories outside repository (e.g. `/../repo/a.md`),
      since such things are not supported by GitHub markdown renderer.
  * [#174](https://github.com/serokell/xrefcheck/pull/174)
    + Make xrefcheck only scan files that are tracked by git.
    + Fixed bug where links to ignored files were valid.
    + Fixed bug where links with trailing slashes were invalid.
  * [#198](https://github.com/serokell/xrefcheck/pull/198)
    + Now we're checking globs in config fields and CLI args (e.g. `ignored`),
      they must be valid globs relative to repository root (`foo/*` instead of `/foo/*`)
  * [#196](https://github.com/serokell/xrefcheck/pull/196)
    + Now `xrefcheck: ignore link` annotation expects a link to ignore in next markdown node,
      instead of expecting link in whole rest of file.
      If you've got `Expected a LINK after "ignore link" annotation` message, see
      PR's description for examples and details.

  0.2.1
  ==========

  * [#127](https://github.com/serokell/xrefcheck/pull/127)
    + Support `Retry-After` headers with dates.
  * [#117](https://github.com/serokell/xrefcheck/pull/117)
    + Forbid verifying a single file using `--root` command line option.
  * [#115](https://github.com/serokell/xrefcheck/pull/115)
    + Improved parsing of anchor html tags inside headers.
  * [#109](https://github.com/serokell/xrefcheck/pull/109)
    + Fixed bug when prefixing `--ignored` and `--root` paths with `./`
  * [#85](https://github.com/serokell/xrefcheck/pull/85)
    + Make possible to specify whether ignore localhost links, use
    `check-localhost` CLA argument (by default localhost links will not be checked).
    + Make possible to ignore auth failures (assume 'protected' links
      valid), use `ignoreAuthFailures` parameter of config.
  * [#66](https://github.com/serokell/xrefcheck/pull/66)
    + Added support for ftp links.
  * [#74](https://github.com/serokell/xrefcheck/pull/83)
    + Add the duplication detection & verification result caching algorithm for external references.
  * [#82](https://github.com/serokell/xrefcheck/pull/82)
    + Fix the issue of having the lowest level context duplicated, caused by the root's trailing path separator.
  * [#88](https://github.com/serokell/xrefcheck/pull/88)
    + Handle the "429 too many requests" errors & attempt to eliminate them during verification.
  * [#128](https://github.com/serokell/xrefcheck/pull/128)
    + Make `ignoreRefs` a required parameter.
  * [#129](https://github.com/serokell/xrefcheck/pull/129)
    + Add support for the `id` attribute in anchors.
  * [#116](https://github.com/serokell/xrefcheck/pull/116)
    + Allow certain reserved characters to be present in the query strings of the URLs.
  * [#130](https://github.com/serokell/xrefcheck/pull/130)
    + Fixed bug with ignoring checks for relative anchors.
  * [#132](https://github.com/serokell/xrefcheck/pull/132)
    + Display URL parsing errors.
  * [#131](https://github.com/serokell/xrefcheck/pull/131)
    + Add support for glob patterns to `ignored` and `notScanned`.
    + Remove support for directory names from `ignored` and `notScanned`.
    + Fix bug with `ignored` not ignoring files with broken xrefcheck annotations.
  * [#142](https://github.com/serokell/xrefcheck/pull/142)
    + Remove `check-localhost` CLI option and `checkLocalhost` config option.
    + Add a regex matching localhost links to the `ignoreRefs` field of the default config.
  * [#68](https://github.com/serokell/xrefcheck/pull/68)
    + Recognise manual HTML-anchors inside headers.
  * [#141](https://github.com/serokell/xrefcheck/pull/141)
    + Dump all the errors from different files.
    + Fix bug where no errors were reported about broken link annotation and unrecognised annotation.
  * [#159](https://github.com/serokell/xrefcheck/pull/159)
    + Make all config options optional.

  0.2
  ==========

  * [#57](https://github.com/serokell/xrefcheck/pull/57)
    + Added `flavor` field to config.
      Also see [config sample](tests/configs/github-config.yaml).
    + Config generated with `dump-config` CLI command now depends on the provided repository type.

  0.1.3
  =======

  * [#58](https://github.com/serokell/xrefcheck/pull/58)
    + Switch to lts-17.3.
  * [#53](https://github.com/serokell/xrefcheck/pull/53)
    + Make possible to include a regular expression in
      `ignoreRefs` parameter of config to ignore external
      references.
    + Add support of right in-place ignoring annotations
      such as `ignore file`, `ignore paragraph` and `ignore link`.

  0.1.2
  =======

  * [#44](https://github.com/serokell/xrefcheck/pull/44)
    + Decide whether to show progress bar by default depending on `CI` env variable.
    + Added `--progress` option.

  0.1.1.2
  =======

  * [#34](https://github.com/serokell/xrefcheck/pull/34)
    + Do not depend on `autoexporter` and `base-noprelude`.

  0.1.1.1
  =======

  * [#30](https://github.com/serokell/xrefcheck/pull/32)
    + Do not depend on `loot-prelude` package.

  0.1.1
  =======

  * [#19](https://github.com/serokell/xrefcheck/pull/24)
    + Make `ignored` in config consider only exact matches.
    + Improve virtual files consideration.
    + Add `ignored` CLI option.

  0.1.0.0
  =======

  Initial release.
changelog-type: markdown
description: |
  <!--
   - SPDX-FileCopyrightText: 2018-2021 Serokell <https://serokell.io>
   -
   - SPDX-License-Identifier: MPL-2.0
   -->

  # Xrefcheck

  ![Build status](https://github.com/serokell/xrefcheck/actions/workflows/ci.yml/badge.svg)
  <img referrerpolicy="no-referrer-when-downgrade" src="https://static.scarf.sh/a.png?x-pxid=bdf72cff-c1f1-4b3a-97f0-5083dbb77fa6" />

  Xrefcheck is a tool for verifying local and external references in a repository's documentation that is quick, easy to setup, and suitable to be run on a CI pipeline.

  <img src="./docs/output-sample/output-sample.png" alt="Output sample" width="600"/>

  ## Motivation [↑](#xrefcheck)

  As a project evolves, links in markdown documentation have a tendency to become broken. This is usually because:
  1. A file has been moved;
  2. A markdown header has been renamed;
  3. An external site has ceased to exist.

  This tool will help you to keep references in order.
  You can run `xrefcheck` continuously in your CI pipeline,
  and it will let you know when it finds a broken link.

  ## Aims [↑](#xrefcheck)

  Comparing to alternative solutions, this tool tries to achieve the following points:

  * Quickness
    * References are verified in parallel.
    * References with the same target URI are only verified once.
    * It first attempts to verify external links with a `HEAD` request; only when that fails does it try a `GET` request.
  * Resilience
    * When you have many links to the same domain, the service is likely to start replying with "429 Too Many Requests".
      When this happens, `xrefcheck` will wait the requested amount of seconds before retrying.
  * Easy setup - no extra actions required, just run `xrefcheck` in the repository root.
  * Conservative verifier allows using this tool in CI, no false positives (e.g. on sites which require authentication) should be reported.

  ## Features [↑](#xrefcheck)

  * Supports both GitHub and GitLab flavored markdown.
  * Supports Windows and Unix systems.
  * Supports relative and absolute local links.
  * Supports external links (`http`, `https`, `ftp` and `ftps`).
  * Detects broken and ambiguous anchors in local links.
  * Integration with GitHub Actions.

  ## Dependencies [↑](#xrefcheck)

  Xrefcheck requires you to have `git` version 2.18.0 or later in your PATH.

  ## Usage [↑](#xrefcheck)

  We provide the following ways for you to use xrefcheck:

  - [GitHub Actions](https://github.com/marketplace/actions/xrefcheck)
  - [Statically linked binaries](https://github.com/serokell/xrefcheck/releases), e. g. on Linux:
    ```
    mkdir -p bin/
    wget --quiet -O bin/xrefcheck https://serokell.gateway.scarf.sh/xrefcheck/latest/xrefcheck-x86_64-linux
    chmod +x bin/xrefcheck
    bin/xrefcheck
    ```
  - [Docker image](https://hub.docker.com/r/serokell/xrefcheck)
    ```
    docker pull serokell.docker.scarf.sh/serokell/xrefcheck
    ```
  - [Building from source](#build-instructions-)
  - Nix
    ```
    nix shell -f https://github.com/serokell/xrefcheck/archive/master.tar.gz -c xrefcheck
    ```

  If none of those are suitable for you, please open an issue!

  To find all broken links in a repository, simply run `xrefcheck` from its root folder:

  ```sh
  xrefcheck
  ```

  To also display a list of all links and anchors:

  ```sh
  xrefcheck --verbose
  ```

  For description of other options:

  ```sh
  xrefcheck --help
  ```

  To configure `xrefcheck`, run:

  ```sh
  xrefcheck dump-config --type GitHub
  ```

  This will create a `.xrefcheck.yaml` file with all the configuration
  options, [here's an example](tests/configs/github-config.yaml).
  This file should be committed to your repository.

  ## Build instructions [↑](#xrefcheck)

  Run `stack install` to build everything and install the executable.
  If you wish to use `cabal`, you need to run [`stack2cabal`](https://hackage.haskell.org/package/stack2cabal) first!

  ### Run on Windows [↑](#xrefcheck)

  On Windows, executable requires some dynamic libraries (DLLs).
  They are shipped together with executable in [releases page](https://github.com/serokell/xrefcheck/releases).
  If you have built executable from source using `stack install`,
  those DLLs are downloaded by stack to a location that is not on `%PATH%` by default.
  There are several ways to fix this:
  - Add `%LocalAppData%\Programs\stack\x86_64-windows\msys2-<...>\mingw64\bin` to your PATH
  - run `stack exec xrefcheck.exe -- <args>` instead of `xrefcheck.exe <args>`
  - add DLLs from archive from releases page to a folder containing `xrefcheck.exe`

  ## FAQ [↑](#xrefcheck)

  1. How do I ignore specific files?
      * To ignore a specific file, you can either use the `--ignore <glob pattern>` command-line option,
      or the `ignore` list in the config file. Links _to_ those files will be reported as errors, links _from_ those files will not be verified.

  1. How do I ignore specific links?
      * Add an entry to the `ignoreLocalRefsTo` or `ignoreExternalRefsTo` lists in the config file.
      * Alternatively, add a `<!-- xrefcheck: ignore link -->` annotation before the link:
        ```md
        <!-- xrefcheck: ignore link -->
        Link to some [invalid resource](https://fictitious.uri/).
        ```
        ```md
        A [valid link](https://www.google.com)
        followed by an <!-- xrefcheck: ignore link --> [invalid link](https://fictitious.uri/).
        ```
      * You can also use a `<!-- xrefcheck: ignore paragraph -->` annotation to ignore all links in a paragraph.

  1. How do I ignore all links from a specific markdown file?
      * Add a glob pattern to the `ignoreRefsFrom` list in the config file.
      * Or add a `<!-- xrefcheck: ignore all -->` at the top of the file.

  1. How do I ignore all external links?
      * If you wish to ignore all http/ftp links, you can use `--mode local-only`.

  1. How does `xrefcheck` handle links that require authentication?
      * It's common for projects to contain links to protected resources.
        By default, when `xrefcheck` attempts to verify a link and is faced with a `403 Forbidden` or a `401 Unauthorized`, it assumes the link is valid.
      * This behavior can be disabled by setting `ignoreAuthFailures: false` in the config file.

  1. How does `xrefcheck` handle redirects?
      * The rules from the default configuration are as follows:
        * Permanent redirects (i.e. 301 and 308) are reported as errors.
        * There are no rules for other redirects, except for a special GitLab case, so they are assumed to be valid.
      * Redirect rules can be specified with the `externalRefRedirects` parameter within `networking`, which accepts an array of
        rules with keys `from`, `to`, `on` and `outcome`. The rule applied is the first one that matches with
        the `from`, `to` and `on` fields, if any, where
        * `from` is a regular expression, as in `ignoreExternalRefsTo`, for the source link in a single redirection step. Its absence means that
          every link matches.
        * `to` is a regular expression for the target link in a single redirection step. Its absence also means that every link matches.
        * `on` accepts `temporary`, `permanent` or a specific redirect HTTP code. Its absence also means that
          every response code matches.
        * The `outcome` parameter accepts `valid`, `invalid` or `follow`. The last one follows the redirect by applying the
          same configuration rules.

        For example, this configuration forbids 307 redirects to a specific domain and makes redirections from HTTP to HTTPS to be followed:

        ```
        externalRefRedirects:
          - to: "https?://forbidden.com.*"
            on: 307
            outcome: invalid
          - from: "http://.*"
            to: "https://.*"
            outcome: follow
        ```

        The first one applies if both of them match.

      * The number of redirects allowed in a single redirect chain is limited and can be configured with the
        `maxRedirectFollows` parameter, also within `networking`. A number smaller than 0 disables the limit.

  1. How does `xrefcheck` handle localhost links?
      * By default, `xrefcheck` will ignore links to localhost.
      * This behavior can be disabled by removing the corresponding entry from the `ignoreExternalRefsTo` list in the config file.

  ## Further work [↑](#xrefcheck)

  - [ ] Support link detection in different languages, not only Markdown.
    - [ ] Haskell Haddock is first in turn.

  ## A comparison with other solutions [↑](#xrefcheck)

  * [linky](https://github.com/mattias-p/linky) - a well-configurable verifier written in Rust, scans one specified file at a time and works well with system utilities like `find`.
    This tool requires some configuring before it can be applied to a repository or added to CI.
  * [awesome_bot](https://github.com/dkhamsing/awesome_bot) - a solution written in Ruby that can be easily included in CI or integrated into GitHub.
    Its features include duplicated URLs detection, specifying allowed HTTP error codes and reporting generation.
    At the moment of writing, it scans only external references and checking anchors is not possible.
  * [remark-validate-links](https://github.com/remarkjs/remark-validate-links) and [remark-lint-no-dead-urls](https://github.com/davidtheclark/remark-lint-no-dead-urls) - highly configurable JavaScript solution for checking local and external links respectively.
    It is able to check multiple repositories at once if they are gathered in one folder.
    Doesn't handle "429 Too Many Requests", so false positives are likely when you have many links to the same domain.
  * [markdown-link-check](https://github.com/tcort/markdown-link-check) - another checker written in JavaScript, scans one specific file at a time.
    Supports `mailto:` link resolution.
  * [url-checker](https://github.com/paramt/url-checker) - GitHub Action which checks external links in specified files.
    Does not check local links.
  * [linkcheck](https://github.com/filiph/linkcheck) - advanced site crawler, verifies links in `HTML` files. There are other solutions for this particular task which we don't mention here.

  At the moment of writing, the listed solutions don't support ftp/ftps links.

  ## Issue tracker [↑](#xrefcheck)

  We use GitHub issues as our issue tracker.
  You can login using your GitHub account to leave a comment or create a new issue.

  ## For Contributors [↑](#xrefcheck)

  Please see [CONTRIBUTING.md](/.github/CONTRIBUTING.md) for more information.

  ## About Serokell [↑](#xrefcheck)

  Xrefcheck is maintained and funded with ❤️ by [Serokell](https://serokell.io/).
  The names and logo for Serokell are trademark of Serokell OÜ.

  We love open source software! See [our other projects](https://serokell.io/community?utm_source=github) or [hire us](https://serokell.io/hire-us?utm_source=github) to design, develop and grow your idea!
description-type: markdown
hash: 084031f0ca79e8cd39752c2d2ae73a3bb4e037c64bfcdd367e5d45beeb888271
homepage: https://github.com/serokell/xrefcheck#readme
latest: 0.3.1
license-name: MPL-2.0
maintainer: Serokell <hi@serokell.io>
synopsis: ''
test-bench-deps:
  base: '>=4.14.3.0 && <5'
  case-insensitive: '>=0'
  cmark-gfm: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  http-types: '>=0'
  lens: '>=0'
  modern-uri: '>=0'
  nyan-interpolation: '>=0'
  o-clock: '>=0'
  optparse-applicative: '>=0'
  reflection: '>=0'
  regex-tdfa: '>=0'
  scotty: '>=0'
  tagged: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  time: '>=0'
  universum: '>=0'
  uri-bytestring: '>=0'
  wai: '>=0'
  warp: '>=0'
  xrefcheck: '>=0'
  yaml: '>=0'
