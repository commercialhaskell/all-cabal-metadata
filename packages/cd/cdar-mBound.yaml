homepage: ''
changelog-type: ''
hash: e4a0c312bc763f50cc3e5cbdc711fbfe810ba627a88ec135e004638f93356728
test-bench-deps:
  tasty-smallcheck: -any
  base: -any
  criterion: -any
  smallcheck: -any
  integer-gmp: -any
  containers: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  tasty: -any
  parallel: -any
  deepseq: -any
  QuickCheck: -any
  cdar-mBound: -any
maintainer: mikkonecny@gmail.com
synopsis: Exact real arithmetic using Centred Dyadic Approximations
changelog: ''
basic-deps:
  base: '>=4.7 && <4.15'
  integer-gmp: -any
  containers: -any
  deepseq: -any
  cdar-mBound: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Jens Blanck, Michal Konecny
latest: 0.1.0.2
description-type: markdown
description: "# CDAR (cdar-mBound)\n\nImplementation of computable real numbers, which
  is also often referred to as Exact Real Arithmetic.\n\nPlease see [section at the
  bottom](#variation-mbound-vs-master) how this branch (mBound) differs from the master
  branch.\n\n## Computable Real Numbers\n\nComputable real numbers form a countable
  subset of the real numbers. It contains all real numbers that can be described by
  a finite program.  This includes all numbers that are commonly used in mathematics,
  including π and e. It is also closed under all field operations and all common transcendental
  functions such as exponential and trigonometric functions.\n\n### Interval Arithmetic
  and Computable Real numbers\n\nThis implementation used interval arithmetic internally
  but that doesn't mean that this is _Interval Arithmetic_. Computable real numbers
  are _exact_, so we are working under the assumption that arbitrary good approximations
  of input values can be found. This is obviously different from interval arithmetic
  where one of the main starting points is that input values may not be exact.\n\n###
  This implementation\n\nIs based on Centred Dyadic Approximations as described in
  [Blanck 2006](http://cs.swan.ac.uk/~csjens/pdf/centred.pdf).\n\nIt is also heavily
  inspired by the [iRRAM](http://irram.uni-trier.de/) implementation by Norbert Müller.
  In particular, it uses nested intervals rather than Cauchy sequences with a computable
  modulus function.\n\nThis is implementation should have comparable efficiency to
  implementations using Cauchy sequences for shallow expressions. However, for deeply
  nested expressions, such as iterated functions, it should be significantly faster.\n\nEach
  computable real can be viewed as an infinite list of rapidly shrinking intervals.
  Thus, laziness of Haskell is used to keep the computations finite.\n\n### Other
  Related stuff on Hackage\n\n* [**MPFR**](https://hackage.haskell.org/package/hmpfr-0.4.3/docs/Data-Number-MPFR.html)
  Arbitrary precision floating point numbers with specified rounding modes. While
  arbitrary precision can be used it is still fixed for a computation so this is still
  floating point arithmetic, but with larger precision.\n\n* [**AERN2**](https://hackage.haskell.org/package/aern2-real)
  Computable real numbers and continuous functions using Cauchy sequences. \n\n  *
  AERN2 uses on the CDAR type `Approx` as safely-rounded multi-precision floating-point
  numbers and builds interval arithmetic on top of them.\n\n* [**ireal**](http://hackage.haskell.org/package/ireal)
  Computable real numbers using Cauchy sequences with a fixed modulus.\n\n* [**constrible**](http://hackage.haskell.org/package/constructible)
  From the description this appears to be the real closure of the field of rational
  numbers. This allows for decidable equality, but excludes transcendental functions.\n\n*
  [**exact-real**](http://hackage.haskell.org/package/exact-real) Computable real
  numbers using Cauchy sequences with a fixed modulus.\n\n* **ERA** (Can't find a
  link at the moment) Computable real number using Cauchy sequences with computable
  modulus.\n\n## Comparison with ireal and AERN2\n\n(https://github.com/michalkonecny/haskell-reals-comparison)\n\n##
  Installation\n\nShould build under `stack`.\n\n## Motivation\n\nAlthough the terminology
  Exact Real Arithmetic promises the ability to compute arbitrarily the result with
  huge precision, this is not the real strength of this implementation. It is certainly
  possible to compute 10000 digits of π, and it doesn't take very long. But, even
  more useful is the fact that if you ask for 10 digits from your resulting computable
  real number, then you will get 10 correct digits even if the computation has to
  compute intermediate values with much higher precision.\n\nMain usage cases:\n*
  To provide _exact_ results for important computations.\n* To provide numerical computations
  without having to understand the problems of floating point computations. See [Goldberg
  1991](http://dl.acm.org/citation.cfm?id=103163).\n* To provide numerical analysis
  without having to do error analysis.\n\nA word of warning though: Some operations
  are, by necessity, partial. In particular, comparisons are partial, and so is 1/x
  near 0.\n\n<!-- ## Examples -->\n\n## Variation mBound vs master\n\nIn the mBounds
  branch, each `Approx` has an additional integer component, called `mBound`, a bound
  for the number of bits in the integer component `m`.  Thus there is a limit on the
  bit size of the results of arithmetic operations.\nIn the original variation, the
  size of `m` could grow arbitrarily for large numbers.  \n`mBound` plays a similar
  role for `Approx` numbers as mantissa size does for floating-point numbers.\n"
license-name: BSD-3-Clause
