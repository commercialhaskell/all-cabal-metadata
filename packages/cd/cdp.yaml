homepage: https://github.com/arsalan0c/cdp-hs#readme
changelog-type: ''
hash: 9bee4afce64f38db9e296d5b812d950a8fb01df591c8e9ace01ba67be329be37
test-bench-deps:
  cdp: -any
  bytestring: ==0.10.12.0
  extra: ==1.7.9
  base: ==4.14.3.0
  hspec: -any
  text: ==1.2.4.1
  monad-loops: ==0.4.3
  filepath: ==1.4.2.1
  process: ==1.6.13.2
  websockets: ==0.12.7.3
  data-default: ==0.7.1.1
  containers: ==0.6.5.1
  network-uri: ==2.6.4.1
  mtl: ==2.2.2
  random: ==1.2.0
  http-conduit: ==2.3.8
  aeson: ==1.5.6.0
  vector: ==0.12.3.1
  directory: ==1.3.6.0
maintainer: Arsalan Cheema
synopsis: A library for the Chrome Devtools Protocol (CDP)
changelog: ''
basic-deps:
  cdp: -any
  bytestring: ==0.10.12.0
  extra: ==1.7.9
  base: ==4.14.3.0
  blaze-markup: -any
  base64-bytestring: -any
  text: ==1.2.4.1
  monad-loops: ==0.4.3
  filepath: ==1.4.2.1
  process: ==1.6.13.2
  websockets: ==0.12.7.3
  data-default: ==0.7.1.1
  containers: ==0.6.5.1
  utf8-string: -any
  network-uri: ==2.6.4.1
  mtl: ==2.2.2
  blaze-html: -any
  random: ==1.2.0
  http-conduit: ==2.3.8
  aeson: ==1.5.6.0
  vector: ==0.12.3.1
  directory: ==1.3.6.0
all-versions:
- 0.0.1.0
author: Arsalan Cheema
latest: 0.0.1.0
description-type: markdown
description: "[![build](https://github.com/arsalan0c/cdp-hs/actions/workflows/build.yaml/badge.svg)](https://github.com/arsalan0c/cdp-hs/actions/workflows/build.yaml)\n#
  cdp-hs\n\nA Haskell library for the [Chrome Devtools Protocol (CDP)](https://chromedevtools.github.io/devtools-protocol/),
  generated from the protocol's definition files.\n\n## Example usage\n\nEnsure Chrome
  is running with the remote debugging port enabled:\n\n```\n$ chromium --headless
  --remote-debugging-port=9222 https://wikipedia.com\n```\n\nThe following program
  can be used to print a page to PDF, with Base64 encoded data being read in chunks:\n\n```hs\n{-#
  LANGUAGE OverloadedStrings   #-}\n\nmodule Main where\n\nimport Data.Maybe\nimport
  Data.Default\nimport qualified Data.ByteString.Base64.Lazy as Base64\nimport qualified
  Data.ByteString.Lazy as BL\nimport qualified Data.Text as T\nimport qualified Data.Text.Lazy
  as TL\nimport qualified Data.Text.Lazy.Encoding as TL\n\nimport qualified CDP as
  CDP\n\nmain :: IO ()\nmain = do\n    let cfg = def\n    CDP.runClient cfg printPDF\n\nprintPDF
  :: CDP.Handle -> IO ()\nprintPDF handle = do\n    -- send the Page.printToPDF command\n
  \   r <- CDP.sendCommandWait handle $ CDP.pPagePrintToPDF\n        { CDP.pPagePrintToPDFTransferMode
  = Just CDP.PPagePrintToPDFTransferModeReturnAsStream\n        }\n\n    -- obtain
  stream handle from which to read pdf data\n    let streamHandle = fromJust . CDP.pagePrintToPDFStream
  $ r\n\n    -- read pdf data 24000 bytes at a time\n    let params = CDP.PIORead
  streamHandle Nothing $ Just 24000\n    reads <- whileTrue (not . CDP.iOReadEof)
  $ CDP.sendCommandWait handle params\n    let dat = map decode reads\n    BL.writeFile
  \"mypdf.pdf\" $ BL.concat dat\n\ndecode :: CDP.IORead -> BL.ByteString\ndecode ior
  = if (CDP.iOReadBase64Encoded ior == Just True)\n    then Base64.decodeLenient lbs\n
  \   else lbs\n  where\n    lbs = TL.encodeUtf8 . TL.fromStrict . CDP.iOReadData
  $ ior\n\nwhileTrue :: Monad m => (a -> Bool) -> m a -> m [a]\nwhileTrue f act =
  do\n    a <- act\n    if f a\n        then pure . (a :) =<< whileTrue f act\n        else
  pure [a]\n```\n\n## Generating the CDP library\n\n```\ncabal run cdp-gen\n```\n\n##
  Current state\n\n[Project board](https://github.com/users/arsalan0c/projects/1)\n\nCommands
  and events for all non-deprecated domains are supported.\nThe following session
  functionalities are supported:\n- creating a session: obtain a session id by using
  the `pTargetAttachToTarget` function to send a `Target.attachToTarget` command,
  passing `True` for the flatten argument\n- send a command for a particular session:
  use the `sendCommandForSession` function with a session id\n- subscribe to events
  for a particular session: \n  1. register a handler with a session id \n  2. send
  the command to enable events for the domain, with the same session id\n\n## Contributing\n\nPRs
  are welcome! If you would like to discuss changes or have any feedback, feel free
  to open an [issue](https://github.com/arsalan0c/cdp-hs/issues).\n\n\n## Acknowledgements\n\nThis
  began as a [Summer of Haskell](https://summer.haskell.org) / [GSoC](https://summerofcode.withgoogle.com)
  project. Albert Krewinkel ([@tarleb](https://github.com/tarleb)), Jasper Van der
  Jeugt ([@jaspervdj](https://github.com/jaspervdj)) and Romain Lesur ([@RLesur](https://github.com/rlesur))
  provided valuable feedback and support which along with raising the library's quality,
  has made this all the more enjoyable to work on.\n\n## References\n\n- https://jaspervdj.be/posts/2013-09-01-controlling-chromium-in-haskell.html\n-
  https://www.jsonrpc.org/specification\n"
license-name: BSD-3-Clause
