all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.1.4
- 0.1.1.5
- 0.1.2
- 0.1.2.1
- 0.1.2.2
- 0.1.3
- 0.1.3.1
- 0.1.4
- 0.1.4.1
- 0.1.5
- 0.1.6
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.4
- 0.2.5
author: Michael Snoyman
basic-deps:
  base: '>=4.12 && <5'
  stm: '>=0'
changelog: |
  # ChangeLog for auto-update

  ## 0.2.5

  * Thread less autoupdate
    [#1018](https://github.com/yesodweb/wai/pull/1018)

  ## 0.2.4

  * Simple refactoring.

  ## 0.2.3

  * [#996](https://github.com/yesodweb/wai/pull/996):
    Refactored the `Control.Debounce` logic to not leak threads.
  * [#996](https://github.com/yesodweb/wai/pull/996):
    Added extra `DebounceEdge` options for different types of debouncing.
    * `LeadingMute`: Action on first trigger, and ignore any triggers during cooldown
    * `TrailingDelay`: First trigger starts cooldown, and
      triggers during cooldown extend the cooldown. Action when cooldown expires.

  ## 0.2.2

  * NewAPI: updateThreadName, reaperThreadName, debounceThreadName:
    Names can be given via this field to threads
    for GHC.Conc.Sync.listThreads.

  ## 0.2.1

  * Labeling threads.

  ## 0.2.0

  * Creating Reaper.Internal to export Reaper constructor.
  * Hiding Reaper constructor.
  * [#985](https://github.com/yesodweb/wai/pull/985):
    Add `reaperModify` to the `Reaper` API, allowing workload modification outside
    of the main `reaperAction` loop.

  ## 0.1.6

  * [#756](https://github.com/yesodweb/wai/pull/756):
    Add control of activation on leading vs. trailing edges for Control.Debounce

  ## 0.1.5

  * [#752](https://github.com/yesodweb/wai/pull/752):
    Using the Strict and StrictData language extensions for GHC >8.

  ## 0.1.4.1

  * [#693](https://github.com/yesodweb/wai/pull/693):
    Improve documentation for `reaperAction` function.
  * [#732](https://github.com/yesodweb/wai/pull/732):
    Fixed memory leak in `reaperAdd` function.

  ## 0.1.4

  * Provide updateActionModify API in AutoUpdate [#547](https://github.com/yesodweb/wai/pull/547)

  ## 0.1.3.1

  * Doc improvements

  ## 0.1.3

  * Adding a new AIP - reaperKill

  ## 0.1.2

  * Added Control.Debounce
changelog-type: markdown
description: |
  ## auto-update

  A common problem is the desire to have an action run at a scheduled interval,
  but only if it is needed. For example, instead of having every web request
  result in a new `getCurrentTime` call, we'd like to have a single worker thread
  run every second, updating an `IORef`. However, if the request frequency is
  less than once per second, this is a pessimization, and worse, kills idle GC.

  This library allows you to define actions which will either be performed by a
  dedicated thread or, in times of low volume, will be executed by the calling
  thread.

  For original use case, see [yesod-scaffold issue #15](https://github.com/yesodweb/yesod-scaffold/pull/15).
description-type: markdown
hash: 475203ef9fc17093b74cc8a7d52607a1ad47fffb4ae1fa720dcbcb5777eb3340
homepage: https://github.com/yesodweb/wai
latest: 0.2.5
license-name: MIT
maintainer: michael@snoyman.com
synopsis: Efficiently run periodic, on-demand actions
test-bench-deps:
  HUnit: '>=0'
  auto-update: '>=0'
  base: '>=0'
  exceptions: '>=0'
  hspec: '>=0'
  retry: '>=0'
