homepage: ''
changelog-type: markdown
hash: 52f79cd529da7177163a7986566cc33a464da39c13ce2c7291e1e2ea0f4c8ca0
test-bench-deps: {}
maintainer: Taylor Fausak
synopsis: Automatically re-export modules.
changelog: |
  # Change log

  Autoexporter follows the [Package Versioning Policy](https://pvp.haskell.org).
  You can find release notes [on GitHub](https://github.com/tfausak/autoexporter/releases).
basic-deps:
  base: '>=4.15.0 && <4.18'
  filepath: '>=1.4.2 && <1.5'
  Cabal-syntax: '>=3.8.1 && <3.9'
  autoexporter: -any
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.1.1
- 0.1.2
- 0.1.4
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 1.0.0
- 1.1.0
- 1.1.1
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.7
- 1.1.9
- 1.1.10
- 1.1.11
- 1.1.13
- 1.1.14
- 1.1.15
- 1.1.16
- 1.1.17
- 1.1.18
- 1.1.19
- 1.1.20
- 2.0.0.1
- 2.0.0.2
- 2.0.0.3
- 2.0.0.4
author: ''
latest: 2.0.0.4
description-type: markdown
description: |
  # Autoexporter

  [![CI](https://github.com/tfausak/autoexporter/workflows/CI/badge.svg)](https://github.com/tfausak/autoexporter/actions)
  [![Hackage](https://img.shields.io/hackage/v/autoexporter)](https://hackage.haskell.org/package/autoexporter)
  [![Stackage](https://www.stackage.org/package/autoexporter/badge/nightly?label=stackage)](https://www.stackage.org/package/autoexporter)

  Autoexporter automatically re-exports Haskell modules.

  Let's say you have a module `M` that just exports some other modules. It might
  look like this:

  ``` haskell
  module M
    ( module M.A
    , module M.B
    ) where

  import M.A
  import M.B
  ```

  This code is error-prone. If you add a new module, say `M.C`, you have to
  remember to come back to this file and re-export it. And this code is tedious
  to write. You have to list each module twice. You can do a little better, but
  not much.

  ``` haskell
  module M (module X) where
  import M.A as X
  import M.B as X
  ```

  Now you don't have to write every module twice, but you still have to remember
  to re-export everything. And the generated documentation for this module
  doesn't include anything about the exported modules.

  Autoexporter handles this for you. Instead of either of the above approaches,
  simply drop this into the `M` module:

  ``` haskell
  {-# OPTIONS_GHC -F -pgmF autoexporter #-}
  ```

  That will generate code that looks like this:

  ``` haskell
  module M (
    module M.A,
    module M.B,
  ) where
  import M.A
  import M.B
  ```

  Autoexporter will generally behave as you'd expect, but there are a couple
  things to look out for:

  - You cannot selectively include or exclude any modules.

  - By default, only immediate children will be re-exported. If you use this in
    some module `M`, it won't pull in `M.A.B`. If you need deep re-exporting,
    please pass `--deep` to Autoexporter like this:

    ```haskell
    {-# OPTIONS_GHC -F -pgmF autoexporter -optF --deep #-}
    ```
license-name: MIT
