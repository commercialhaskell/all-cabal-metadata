all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
author: Lars Kuhtz
basic-deps:
  base: '>=4.11 && <5'
  bytestring: '>=0.10'
  cuckoo: '>=0'
  hashes: '>=0.2'
  primitive: '>=0.6.4.0'
changelog: |
  # Revision history for cuckoo

  ## 0.3.1 -- 2021-10-20

  *   Change signatures of `saltedFnv1aPtr` and `saltedSipHashPtr` to
      run in `IO`.
  *   Raise lower bound on hashes package to 0.2.


  ## 0.3.0 -- 2021-09-30

  *   Rename hash functions provided hash functions to

      *   `saltedSipHashStorable`
      *   `saltedSipHashByteString`
      *   `saltedSipHashPtr`
      *   `saltedFnv1aStorable`
      *   `saltedFnv1aByteString`
      *   `saltedFnv1aPtr`

  *   Use [hashes](https://hackage.haskell.org/package/hashes) package for hash
      functions and drop dependency on
      [memory](https://hackage.haskell.org/package/memory).

      The [bytestring](https://hackage.haskell.org/package/bytestring) package is
      is added as a new dependency.

  *   Move implementation of hash functions from
      `Data.Cuckoo.Internal` to `Data.Cuckoo.Internal.HashFunctions`.

  ## 0.2.2 -- 2021-06-24

  * Support GHC-9

  ## 0.2.1 -- 2020-08-06

  * Support random-1.2.0

  * Fix doctest test-suite

  * Relax lower bound of primitive to 0.6.4.0

  ## 0.2.0.1 -- 2019-08-20

  * Fixed and improved example.

  ## 0.2.0.0 -- 2019-08-20

  * The PRNG from the random package is new the default. Added cabal flags for
    using `mwc-random` or `pcg-random` instead.

  * Changed order of type parameters for `newCuckooHash`. The type of the monad is
    moved to the end, because its usually inferred from the context.

  * Capacity (in items) parameter must be at least 64.

  * Fixed the result of `sizeInAllocatedBytes`.

  * Added examples to `Data.Cuckoo` along with a doctests test-suite.

  * Various documentation fixes and improvements in `Data.Cuckoo`.

  ## 0.1.0.0 -- 2019-08-06

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |+
  [![Hackage](https://img.shields.io/hackage/v/cuckoo.svg?logo=haskell)](https://hackage.haskell.org/package/cuckoo)

  Haskell implementation of Cuckoo filters as described in

  [B. Fan, D.G. Anderson, M. Kaminsky, M.D. Mitzenmacher. Cuckoo Filter:
  Practically Better Than Bloom. In Proc. CoNEXT,
  2014.](https://www.cs.cmu.edu/~dga/papers/cuckoo-conext2014.pdf)

  Cuckoo filters are a data structure for probabilistic set membership. They
  support insertion, deletion, and membership queries for set elements.

  Membership queries may return false positive results. But queries don't return
  false negative results.

  Unlike Bloom filters, Cuckoo filters maintain an upper bound on the false
  positive rate that is independent of the load of the filter. However, insertion
  of new elements in the filter can fail. For typical configurations this
  probability is very small for load factors smaller than 90 percent.

  The implementation allows the user to specify the bucket size and the fingerprint
  size in addition to the capacity of the filter. The user can also provide custom
  functions for computing the primary hash and fingerprint.

  ## Installation

  ```bash
  cabal install cuckoo
  ```

  For running the test-suites

  ```bash
  cabal test cuckoo
  ```

  For running the benchmarks

  ```bash
  cabal bench cuckoo
  ```

  ## Example

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE TypeApplications #-}
  {-# LANGUAGE TypeFamilies #-}
  {-# OPTIONS_GHC -fno-warn-orphans #-}

  import Control.Monad (filterM)
  import Data.Cuckoo
  import Data.List ((\\))

  -- Define CuckooFilterHash instance (this uses the default implementation)
  instance CuckooFilterHash Int

  main :: IO ()
  main = do
      -- Create Filter for a minimum of 500000 entries
      f <- newCuckooFilter @4 @8 @Int 0 500000

      -- Insert 450000 items
      failed <- filterM (fmap not . insert f) [0..500000-1]

      -- Query inserted items
      missing <- filterM (fmap not . member f) [0..500000-1]

      -- Test for false positives
      false <- filterM (member f) [500000..1000000 - 1]

      -- Report results
      putStrLn $ "failed inserts: " <> show (length failed)
      putStrLn $ "false positives: " <> show (length false)
      putStrLn $ "false positive rate (%): " <> show @Double (fromIntegral (length false) * 100 / 500000)
      putStrLn $ "missing (must be 0): " <> show (length $ missing \\ failed)

      -- Filter properties
      putStrLn $ "capacity: " <> show (capacityInItems f)
      putStrLn $ "size in allocated bytes: " <> show (sizeInAllocatedBytes f)

      -- computing the following is a bit slow
      c <- itemCount f
      putStrLn $ "item count: " <> show c
      lf <- loadFactor f
      putStrLn $ "load factor (%): " <> show lf
      putStrLn $ "bits per item: " <> show @Double (fromIntegral (sizeInAllocatedBytes f) * 8 / fromIntegral c)
  ```

  Which produces the following results:

  ```bash
  $ ghc -o main -threaded -O -with-rtsopts=-N Main.hs
  [1 of 1] Compiling Main             ( Main.hs, Main.o )
  Linking main ...
  $ ./main
  failed inserts: 0
  false positives: 14796
  false postive rate (%): 2.9592
  missing (must be 0): 0
  capacity: 524288
  size in allocated bytes: 524292
  item count: 500000
  load factor (%): 95.367431640625
  bits per item: 8.388672
  ```

  Another example can be found in the file
  [bench/SpellChecker.hs](https://github.com/larskuhtz/cuckoo/blob/master/bench/SpellChecker.hs).

description-type: markdown
hash: c9650cf4bd89376ec7052c178ed2484d6d802a59dec5832a0d8eab0f2b072ac3
homepage: https://github.com/larskuhtz/cuckoo
latest: 0.3.1
license-name: BSD-3-Clause
maintainer: lakuhtz@gmail.com
synopsis: Haskell Implementation of Cuckoo Filters
test-bench-deps:
  QuickCheck: '>=2.13'
  base: '>=4.11 && <5'
  blake2: '>=0.3'
  bytestring: '>=0.10'
  criterion: '>=1.5'
  cuckoo: '>=0'
  doctest: '>=0.18'
  hashable: '>=1.3'
  stopwatch: '>=0.1'
