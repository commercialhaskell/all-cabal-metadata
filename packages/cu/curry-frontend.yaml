all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.7
- 0.2.8
- 0.2.9
- 0.2.10
- 0.2.11
- 0.2.12
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 2.0.0
author: |-
  Wolfgang Lux, Martin Engelke, Bernd Brassel, Holger Siegel,
  Bjoern Peemoeller, Finn Teegen
basic-deps:
  base: '>=4.11 && <4.15'
  binary: '>=0.8 && <0.9'
  bytestring: '>=0.10 && <0.11'
  containers: '>=0.6 && <0.7'
  curry-frontend: '>=0'
  directory: '>=1.2 && <1.4'
  extra: '>=1.4.6 && <1.8'
  file-embed: '>=0.0 && <0.1'
  filepath: '>=1.4 && <1.5'
  mtl: '>=2.2 && <2.3'
  network-uri: '>=2.6 && <2.7'
  parsec: '>=3.1 && <3.2'
  pretty: '>=1.1 && <1.2'
  process: '>=1.6 && <1.7'
  set-extra: '>=1.4 && <1.5'
  template-haskell: '>=2.10 && <2.16'
  time: '>=1.9 && <2.0'
  transformers: '>=0.5 && <0.6'
changelog: |+
  Change log for curry-frontend
  =============================

  Version 2.0.0
  =============

    * Implemented the "MonadFail-Proposal" for curry
      (see <https://wiki.haskell.org/MonadFail_Proposal>)
    * Data class (see <https://arxiv.org/abs/1908.10607>)
    * Fixed bug with partially imported Typeclasses
    * Fixed bug with parsing of empty blocks
    * Fixed bug with re-export of record labels

  Version 1.0.4
  =============

    * Fixed bug in type checking of instances
    * Fixed bugs in deriving of `Bounded` instances.

  Version 1.0.3
  =============

    * Fixed bug in type checking of typeclasses

  Version 1.0.2
  =============

    * Added 'short-ast' and 'ast' as new compilation targets
    * Fixed bug with wrong type of free variables in the intermediate language.
    * Fixed bug with generated default implementations of nullary class methods.
    * Fixed bug in desugaring of record patterns.
    * Fixed bug that external data declarations weren't considered when
      AbstractCurry was generated

  Version 1.0.1
  =============

    * Fixed bug with wrong order of super classes in selector functions
      generated by the dictionary transformation.
    * Changed desugaring of numeric literals. It now generates calls to the
      functions `Prelude.fromInt` and `Prelude.fromFloat`.
    * Fixed bug with wrong original names of imported record labels
    * Fixed bug when compiling type constructor classes with super classes
    * Adjusted warning message for potentially unreachable pattern matches

  Version 1.0.0
  =============

    * Added support for typeclasses as known from Haskell

  Version 0.4.2
  =============

    * Improved readability of environment information in dumps
      (option dump-simple)
    * Added option to dump all bindings instead of just local ones
      (dump-all-bindings)
    * Introduced annotated FlatCurry as a new output format
      (annotated-flat)

  Version 0.4.1
  =============

    * Added a simple cabal test suite
    * Split import of interfaces/modules and expansion and checking of
      import specifications into two modules.
    * Improved error messages generated by export check (fixes #1253)
    * Split checking and expansion of export specification into two
      subsequent steps (by Yannik Potdevin, fixes #1335)
    * Consider parenthesized type expressions in the Curry AST (by Katharina Rahf)
    * Added syntax extension `ExistentialQuantification` that allows the use
      of existentially quantified types in data and newtype constructors
    * Fixed bug that type declarations weren't syntax checked

  Version 0.4.0
  =============

    * Refactored AbstractCurry generation

    * Complete refactoring of FlatCurry generation

    * Removed support for Curry's record syntax and introduced Haskell's record
      syntax instead

    * During desugaring record updates are translated to fcase-expressions instead
      of introducing explicit update functions

    * HTML generation now places HTML files for hierarchical modules into
      files named `<Module>_curry.html`, i.e., no sub-folders reflecting
      the the module name hierarchy are generated. In addition, if the option
      `--html-dir` is not given, the current directory is used as the output
      directory.

    * Removed record type extensions

    * Enabled declaration of (mutually) recursive record types

    * Removed expansion of record types in type error messages

    * Replaced `MessageM` monad with `CYT` monads and moved `CYT` monads
      to package `curry-base`

    * Implemented warnings for overlapping module aliases - fixes #14

    * The check for overlapping rules has been completely refactored and
      improved to now also handle rigid case expressions.

    * The check for missing pattern matching alternatives now correctly handles
      String literals - fixes #1048.

    * Added warnings for top-level functions without type signatures - fixes #769

    * Moved pretty-printing of types from Checks.TypeCheck to Base.CurryTypes

    * Type synonyms in typed expressions are now desugared - fixes #921

    * Declaration of operator precedence is now optional in infix operator
      declarations

    * Moved module `InterfaceEquivalence` to curry-base
      (`Curry.Syntax.InterfaceEquivalence`)

    * Converted literate Haskell files into simple Haskell files

    * Removed support for FlatCurry XML files.

    * Added syntax extension `NegativeLiterals` to translate negated literals
      into negative literals instead of a call to `Prelude.negate` and
      `Prelude.negateFloat`, respectively.

    * The frontend now considers options pragmas of the following form:

      ~~~ {.curry}
      {-# OPTIONS_CYMAKE opt1 ... optn #-}
      ~~~

      The string following `OPTIONS_CYMAKE` will be split at white spaces
      and treated like an ordinary command line argument string.

      If one wishes to provide options containing spaces, e.g., directory
      paths or alike, this can be achieved by quoting the respective argument
      using either `'single quotes'` or `'double quotes'` (may bot be mixed).

      Note that *following options are excluded*:

        * A change of the current mode
          (e.g., change from compilation to HTML generation)
        * A change of the import  paths
        * A change of the library paths
        * A change of the compilation targets
          (e.g., change from FlatCurry to AbstractCurry)

      These options can only be set via the command line.

    * Refactored the source code HTML generation.
      The generation now supports full Curry with all supported extensions,
      i.e., it supports pragmas, record types and functional patterns.
      Furthermore, the created HTML has been simplified, and updated towards
      HTML 5.

    * The HTML generation now accepts an option `--htmldir=dir` to specify
      the output directory of the generated HTML files.

  Version 0.3.10
  ==============

    * Various improvements of the internal structure.

    * Improved status messages. The compilation status message are now of the form

          [m of n] Compiling/Skipping <Module> (<source file>, <target file>)

    * Implemented support for custom preprocessors. It is now possible to run
      a custom preprocessor command via the following options:

      * `-F` enables support for a preprocessor
      * `-pgmF <cmd>` set the preprocessor command to `<cmd>`
      * `-optF <arg>` adds an additional argument to the preprocessor command
        (can be repeated to add multiple arguments)

      The preprocessor is applied to all source files which are (re)compiled
      after unliterating *and after determining the import list*.
      Consequently, adding modules via the preprocessor will results in
      compilation errors due to missing imports.
      On the other hand, the frontend will automatically determine changed
      files which are then handed to the preprocessor.

      The command is called with at least three arguments:

       #. The (normalised) file name of the source file currently processed.
          **This name is intended only for reference.**
       #. The name of the file containing the (potentially unliterated)
          contents of the original file.
          **This is the file the preprocessor should read from.**
       #. The name of the file where the preprocessed source code should go to.
          **This is the file the preprocessor should write to.**
       #. Optionally, any additional arguments specified using `-optF`.

  Version 0.3.9
  =============

    * Simplified verbosity options by merging options "-v1" and "-v2".
      Now only "-v0" and "-v1" are supported.

    * Fixed bug in non-exhaustive pattern matching check which occured
      when retrieving the siblings of a constructor imported using an alias.

    * Fixed bug when using functional patterns in `case`-expressions.
      Functional patterns are only allowed in the patterns of a function
      definition and forbidden elsewhere, i.e., in `case`-expressions,
      `do`-sequences, list comprehensions or lambda expressions.

    * Implementation of module pragmas added. Module pragmas of the following
      types are now parsed and represented in the abstract syntax tree:

      ~~~ {.curry}
      {-# LANGUAGE LANG_EXT+ #-}
      {-# OPTIONS "string" #-}
      {-# OPTIONS_TOOL "string" #-}
      module Main where
      ~~~

      where

        - `LANGEXT+` is a non-empty, comma-separated list of the following
          language extensions: `AnonFreeVars`, `FunctionalPatterns`,
          `NoImplicitPrelude`, `Records`
        - `TOOL` is either `KICS2`, `PAKCS`, or some other tool, represented
          as `Unknown String`.

      While the distinct language pragmas enable the respective language
      extensions, the OPTIONS pragma is ignored.

      All other texts given in the pragma braces is ignored and treated as
      a nested comment.

    * Error message for different arities of function equations now also
      report the corresponding source code positions.

  Version 0.3.8
  =============

    * Implemented warnings for non-exhaustive pattern matchings
      both in function declarations and `case`-expressions - fixes #349.

    * Extended options to enable/disable certain types of warnings.

    * Fixed problem when defining an operator directly after an import statement
      without import restrictions - fixes #494.

    * Fixed bug w.r.t. polymorphically typed local variables - fixes #480.

    * Fixed missing polymorphism in record labels - fixes #445.

    * Dumping of intermediate structures improved.

    * Fixed bug in type checking w.r.t. recursive type synonyms - fixes 489.

    * Reactivation of Curry interface files.
      During adaption of the MCC frontend to FlatCurry the Curry interface
      files have been deactivated and replaced by FlatCurry's interface
      files. To allow the later addition of type classes to Curry,
      they have now been reactivated.

    * Implemented missing semantics of functional patterns in combination
      with non-linear left-hand-sides and as-patterns.

    * Various improvements.

  Version 0.3.7
  =============

    * Support for typed FlatCurry expressions added. Now additional type
      information given by the programmer as in

      ~~~ {.curry}
      null (unknown :: [()])
      ~~~

      is represented in FlatCurry and cann therefore be processed by other
      programs like PAKCS or KICS2.

  Version 0.3.6
  =============

    * Error messages are now sorted according to their source code position.

  Version 0.3.5
  =============

    * Improved reporting of mutiple type signatures.

  Version 0.3.4
  =============

    * Bug in renaming phase fixed.

  Version 0.3.3
  =============

    * Corrected translation of `fcase`-expressions.

  Version 0.3.2
  =============

    * Non-linear left-hand-sides now work with guarded expressions - fixes #328.

    * Implemented precedence check - fixes #327.

    * Case completion refactored and corrected - fixes #323.

    * Various improvements and refactorings.

  Version 0.3.1
  =============

    * Corrected renaming of anonymous free variables - fixes #288.

  Version 0.3.0
  =============

    * Massive refactoring of the previous version.

    * All compiler warnings removed.

    * Fixed various implementation bugs (#9, #16, #19, #29, #289).

changelog-type: markdown
description: "# Curry Frontend\n\nThe frontend lexes, parses, type-checks and transforms
  Curry source files into a variety of intermediate formats, including\n\n* **FlatCurry**
  for program analyzers and backends\n* **AbstractCurry** for program manipulation
  tools\n* **HTML** for documentation\n\nIt is used by the two major Curry compilers,
  [PAKCS](https://git.ps.informatik.uni-kiel.de/curry/pakcs) and\n[KiCS2](https://git.ps.informatik.uni-kiel.de/curry/kics2).\n\n##
  Requirements\n\n* Make sure that a recent version of Haskell Stack is installed
  on your computer\n\n## Building\n\n* To build the project, run `make`.\n* To test
  the project, run `make runtests`.\n\nThe built executable will be located at `bin/curry-frontend`.\n\n##
  Usage\n\nFor a detailed overview of the available options, you can use the following
  command:\n\n`curry-frontend --help`\n\n### Available Formats\n\n```\n--flat  : Generate
  a FlatCurry (.fcy) and FlatInterface (.fint) file\n--xml   : Generate a FlatXML
  (_flat.xml) file\n--acy   : Generate a (type-inferred) AbstractCurry (.acy) file\n--uacy
  \ : Generate an untyped AbstractCurry (.uacy) file\n```\n\nThe generation of an
  untyped AbstractCurry program is performed without\ntype checking (i.e. programs
  with type checks will compile). All functions\nwill either have the type signature
  specified in the source or, if not\navailable, the dummy type `prelude.untyped`.\n\nFlatCurry
  files will always be generated for the imported modules,\nsince the interfaces are
  required for static-semantic analysis and type\ninference (only for typed AbstractCurry).\n\n##
  Remarks\n\n- To use the PAKCS libraries (especially for the `Prelude`), the environment\n
  \ variable `PAKCS_LIB` has to point to the correct paths, e.g. using\n  \n  `export
  PAKCS_LIB=[pakcs path]/pacs/lib:[pakcs path]/pacs/lib/meta:...`\n\n  where `[pakcs
  path]` is the directory containing the PAKCS distribution.\n\n- In contrast to PAKCS,
  the frontend allow use of anonymous variables\n  (denoted by an underscore `_`)
  in type declarations, e.g.\n  \n  ```curry\n  data T _ = c\n  ```\n\n## Known Issues\n\n[See
  GitLab](https://git.ps.informatik.uni-kiel.de/curry/curry-frontend/-/issues)\n"
description-type: markdown
hash: 1ab22474f89db792dc9fb3b01a5b5e7ae13c487595919c151dd41dbf57ad715b
homepage: http://curry-language.org
latest: 2.0.0
license-name: BSD-3-Clause
maintainer: fte@informatik.uni-kiel.de
synopsis: |-
  Compile the functional logic language Curry to several
  intermediate formats
test-bench-deps:
  Cabal: '>=1.20'
  base: '>=4.11'
  bytestring: '>=0.10'
  containers: '>=0'
  curry-frontend: '>=0'
  directory: '>=1.2.0.1'
  extra: '>=1.4.6'
  file-embed: '>=0'
  filepath: '>=0'
  mtl: '>=0'
  network-uri: '>=2.6'
  pretty: '>=0'
  process: '>=0'
  set-extra: '>=0'
  template-haskell: '>=2.10'
  transformers: '>=0'
