all-versions:
- 2.0.0.0
- 3.0.0.0
- 3.0.0.1
author: Chordify
basic-deps:
  aeson: '>=0.7.0.0'
  base: '>=4 && <5'
  bson: '>=0.2.0'
  deepseq: '>=0'
  random: '>=1.0.0.0'
  safe: '>=0.2'
  text: '>=1.0.0.0'
changelog: "# Changelog\n\n## v3.0.0.0 (2018-03-13)\n\n- Review Currency strictness\n-
  Add deepseq's NFData instance for Currency & Alpha\n- Manually write Show & Read
  instance for Alpha (compile-time & performance gain)\n- Remove currency constructors
  in favor of helper `fromAlpha` \n- Add property tests to verify various instances
  \n\n\n## v2.0.0.0 (2017-09-11)\n\n- Remove Swagger instances. It would be better
  to push them upstream to the swagger2 repository.\n\n\n## v1.0.0.0 (2017-08-29)\n
  \ \n- Provide 2 types `Currency` and `Alpha`\n- Provide constructors for each currency
  and Alpha code listed in the standard\n- Provide a list of all `Currency`\n- Provide
  instances for:\n  - Show\n  - Eq\n  - Read\n  - Generic\n  - Data\n  - Typeable\n
  \ - FromJSON (aeson)\n  - ToJSON   (aeson)\n  - ToSchema (swagger2)\n  - Val      (bson)\n
  \ - Random   (random)\n  - Ord (Alpha only)\n  - Enum (Alpha only\n  - Bounded (Alpha
  only)\n"
changelog-type: markdown
description: "# Currency Codes (ISO-4217) [![](https://img.shields.io/hackage/v/currency-codes.svg)](https://hackage.haskell.org/package/currency-codes)\n\n##
  Overview \n\nThis package mainly provides 2 data types to represent and manipulate
  currencies according to\nthe [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)
  standard. \n\nIt also provides a handful of instances for common typeclasses (`Show`,
  `Read`, `Random`, `ToJSON`, `FromJSON`, `Val`, `Data`, `Typeable`, `Generic`, `NFData`).
  \n\n## Example\n\n```hs\nimport           Data.Aeson     (ToJSON(..))\nimport           Data.Currency
  \ (Currency, Alpha(..))\nimport           GHC.Generics   (Generic)\nimport qualified
  Safe\nimport qualified Data.Aeson     as Aeson\nimport qualified Data.Currency  as
  Currency\n\n\nmyCurrencies :: [Currency]\nmyCurrencies =\n  [ Currency.fromAlpha
  EUR\n  , Currency.fromAlpha USD\n  ]\n\ndata Transaction = Transaction\n  { amount
  \  :: Integer\n  , currency :: Currency\n  } deriving (Eq, Show, Generic)\n\ninstance
  ToJSON Transaction where\n  toJSON = \n    Aeson.genericToJSON Aeson.defaultOptions\n```\n\n##
  License\n\n[MIT Â© 2017-2018 Chordify](https://gitlab.com/chordify/currency-codes/blob/master/LICENSE)\n"
description-type: markdown
hash: a4b24669dd91e805b11d9eb267becd0ba6d726927e535e03d5f3f368f44c1cf4
homepage: https://github.com/chordify/currency-codes
latest: 3.0.0.1
license-name: MIT
maintainer: Matthias Benkort <matthias.benkort@gmail.com>
synopsis: ISO-4217 Currency Codes
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=0'
  bson: '>=0'
  currency-codes: '>=0'
  hspec: '>=0'
