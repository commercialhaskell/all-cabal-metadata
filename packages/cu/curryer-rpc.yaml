all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- 0.3.7
- 0.3.8
- 0.4.0
- 0.5.0
author: AgentM
basic-deps:
  asn1-types: '>=0'
  async: '>=0'
  base: '>=4.12 && <=4.21'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  crypton-x509: '>=0'
  crypton-x509-store: '>=0'
  crypton-x509-system: '>=0'
  curryer-rpc: '>=0'
  data-default: '>=0'
  exceptions: '>=0'
  fast-builder: '>=0'
  hashable: '>=0'
  network: '>=0'
  network-byte-order: '>=0'
  optparse-generic: '>=0'
  stm: '>=0'
  stm-containers: '>=0'
  streaming-commons: '>=0'
  streamly: ==0.10.1
  streamly-bytestring: '>=0.2.2'
  streamly-core: '>=0.2.2'
  text: '>=0'
  time: '>=0'
  tls: '>=2.1.11'
  uuid: '>=0'
  winery: '>=0'
changelog: "# v0.5.0 (2025-08-31)\n\n* add encryption support via TLS\n* add optional
  authentication support via mutual TLS\n\n# v0.4.0 (2025-03-29)\n\n* add ability
  to serve and connect to IPv6 and Unix domain sockets (#5)\n\n# v0.3.8 (2024-12-20)\n\n*
  add support for winery 1.5 but don't require it\n\n# v0.3.7 (2024-08-24)\n\n* enable
  building with GHC 9.6, 9.8, 9.10\n\t\n# v0.3.6 (2024-07-20)\n\n* update to streamly
  0.10.1\n* update to streamly-bytestring 0.2.2 which includes a critical fix related
  to pinned arrays used within streamly\n\n# v0.3.5 (2024-01-12)\n\n* disable extraneous
  debug logging\n\n# v0.3.4 (2024-01-12)\n\n* revert to streamly 0.9.0 due to corruption
  bug in streamly-0.10.0\n\n# v0.3.3 (2024-01-07)\n\n* use streamly 0.10.0 and streamly-core
  0.2.0\n\n# v0.3.2 (2023-12-30)\n\n* enable support for GHC 9.4\n\n# v0.3.1 (2023-10-30)\n\n*
  enable TCP_NODELAY to reduce intermessage latency\n\n# v0.3.0 (2023-04-01)\n\n*
  require streamly 0.9.0+\n\n# v0.2.2 (2022-08-17)\n\n* add support for GHC 9.2\n\t\n#
  v0.2.1 (2021-12-28)\n\n* bump up streamly dependency to 0.8.1 due to streamly internals
  API change since 0.8.0\n\n# v0.2 (2021-12-13)\n\n* update for streamly 0.8.0 (we
  are no longer pegged to a pre-release streamly)\n\n# v0.1 (2020-12-27)\n\n* initial
  release to support [Project:M36](https://github.com/agentm/project-m36)\n\t\n"
changelog-type: markdown
description: "# Curryer - Fast Haskell-to-Haskell RPC\n\nCurryer (pun intended) is
  a fast, Haskell-exclusive RPC (remote procedure call) library. By using the latest
  Haskell serialization and streaming libraries, curryer aims to be the fastest and
  easiest means of communicating between Haskell-based processes.\n\nCurryer is inspired
  by the now unmaintained [distributed-process](https://hackage.haskell.org/package/distributed-process)
  library, but is lighter-weight and uses a higher-performance serialization package.\n\n##
  Features\n\n* blocking and non-blocking remote function calls\n* asynchronous server-to-client
  callbacks (for server-initiated notifications)\n* timeouts\n* leverages [winery](https://hackage.haskell.org/package/winery)
  for high-performance serialization\n\n## Requirements\n\n* GHC 9.0+\n\n## Code Example\n\n[Server](examples/SimpleKeyValueServer.hs):\n\n```haskell\ndata
  SetKey = SetKey String String\n  deriving (Generic, Show)\n  deriving Serialise
  via WineryVariant SetKey\n\ndata GetKey = GetKey String\n  deriving (Generic, Show)\n
  \ deriving Serialise via WineryVariant GetKey\n\nmain :: IO ()\nmain = do\n  kvmap
  <- M.newIO\n  void $ serve kvRequestHandlers kvmap localHostAddr 8765 Nothing\n
  \ \nkvRequestHandlers :: RequestHandlers (M.Map String String)\nkvRequestHandlers
  = [ RequestHandler $ \\state (SetKey k v) ->\n                        atomically
  $ M.insert v k (connectionServerState state)\n                    , RequestHandler
  $ \\state (GetKey k) ->\n                        atomically $ M.lookup k (connectionServerState
  state)\n                    ]\n```\n\n[Client](examples/SimpleKeyValueClient.hs):\n\n```haskell\ndata
  SetKey = SetKey String String\n  deriving (Generic, Show)\n  deriving Serialise
  via WineryVariant SetKey\n\ndata GetKey = GetKey String\n  deriving (Generic, Show)\n
  \ deriving Serialise via WineryVariant GetKey\n\ndata CommandOptions = Get {name
  :: String}\n                    | Set {name :: String, value :: String}\n                    deriving
  (Generic, Show)\n\ninstance ParseRecord CommandOptions\n                    \nmain
  :: IO ()\nmain = do\n  opts <- getRecord \"SimpleKeyValueClient\"\n  conn <- connect
  [] localHostAddr 8765\n  case opts of\n    Get k -> do\n      eRet <- call conn
  (GetKey k)\n      case eRet of\n        Left err -> error (show err)\n        Right
  (Just val) -> putStrLn val\n        Right Nothing -> error \"no such key\"\n    Set
  k v -> do\n      eRet <- call conn (SetKey k v)\n      case eRet of\n        Left
  err -> error (show err)\n        Right () -> pure ()\n\n```\n"
description-type: markdown
hash: a2cc3a269de133c43bd65cf25441b033566c237e63d98df476225a440ce0f597
homepage: https://github.com/agentm/curryer
latest: 0.5.0
license-name: LicenseRef-PublicDomain
maintainer: agentm@themactionfaction.com
synopsis: Fast, Haskell RPC
test-bench-deps:
  async: '>=0'
  base: '>=0'
  bytestring: '>=0'
  criterion: '>=0'
  curryer-rpc: '>=0'
  directory: '>=0'
  filepath: '>=0'
  network: '>=0'
  process: '>=0'
  stm: '>=0'
  streamly-bytestring: '>=0.2.1'
  streamly-core: '>=0.1.0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  tls: '>=0'
  winery: '>=0'
