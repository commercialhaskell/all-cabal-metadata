all-versions:
- 0.1.1.0
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.3.0.0
- 0.3.0.1
author: Clemens Schmid
basic-deps:
  MonadRandom: '>=0.6 && <1'
  base: '>=4.14 && <5'
  currycarbon: '>=0'
  filepath: '>=1.4 && <1.5'
  math-functions: '>=0.3 && <0.4'
  optparse-applicative: '>=0.16 && <0.19'
  parsec: '>=3.1 && <3.2'
  random: '>1.2 && <1.3'
  vector: '>=0.12 && <0.14'
changelog: "- V 0.3.0.1: The golden tests can not run on stackage as it stands, so
  I hid them behind an environment variable.\n- V 0.3.0.0: Major update with multiple
  breaking changes and new features:\n\t- Added a new mechanism to draw random age
  samples from a CalPDF (`sampleAgesFromCalPDF :: AgeSamplingConf -> CalPDF -> RandomAgeSample`).
  This is available from the command line with the options `samplesFile`, `--seed`,
  and `-n`/`--nrSamples`.\n\t- Added a new concept to the `CalExpr` data type: Age
  ranges with uniform probability for each year in the range (`TimeWindowBP` and `TimeWindowBCAD`).\n\t-
  Reworked the encoding and evaluation mechanism for calibration expressions:\n\t\t-
  Introduced the `NamedCalExpr` as a wrapper around `CalExpr` with an identifier,
  and then adjusted the ID generation for `CalPDF`s to prioritize this identifier.\n\t\t-
  Reworked the CLI DSL to support a standardized configuration language syntax implemented
  in a new module `ParserHelpers.hs`. This introduces a set of flexible functions
  (`calExpr()`, `uncalC14()`, `rangeBP()`, `rangeBCAD()`, `sum()` and `product()`)
  which generally complement the previously available syntax and operators. The old
  syntax is mostly preserved as syntactic sugar for the new, more standardized syntax.
  Unfortunately this is not entirely seamless: The change breaks some expressions
  that were valid before (e.g. `\"3000,30 + 3020,50\"`). They now require additional
  parentheses to pass (so e.g. `\"(3000,30) + (3020,50)\"`).\n\t\t- Added some unit
  tests to cover the increasingly complex DSL.\n\t- Changed the output files from
  .csv to .tsv and to a more meaningful and consistent set of column names.\n\t- Slightly
  adjusted the rendering of the pretty, human-focussed command line output.\n\t- Updated
  and improved the command line documentation.\n\t- Renamed some CLI arguments:\n\t\t-
  `--calibrationCurveFile` -> `--calCurveFile`\n\t\t- `--calCurveSegmentFile` -> `--calCurveSegFile`\n\t\t-
  `--calCurveMatrixFile` -> `--calCurveMatFile`\n\t- Changed the CLI behaviour with
  \ `--calCurveSegFile` and `--calCurveMatFile`: currycarbon now fails with these
  options if the first sample is not a single, uncalibrated radiocarbon date (so `uncalC14()`).\n\t-
  Added a simple golden test system with some basic calls to the `currycarbon` CLI
  tool.\n\t- Switched to a new GHC version (v9.4.7) and stackage resolver version
  (lts-21.17).\n- V 0.2.1.2: Maintenance: Switched to a newer compiler/resolver version,
  lifted some dependency restrictions, ran stylish-haskell on the entire codebase,
  updated the github actions, deprecated the haddock documentation for the dev version
  on GitHub.\n- V 0.2.1.1: Lifted some restrictions regarding the upper version bounds
  of dependencies.\n- V 0.2.1.0: Added a mechanism to detect terminal encoding and
  fall back on a simpler CLI plot if it is not UTF-8.\n- V 0.2.0.1: Brought sample
  names back to default CLI output.\n- V 0.2.0.0: Added sum (and product) calibration
  and made the necessary changes to various interfaces (including CLI) to make this
  functionality accessible.\n- V 0.1.2.0: Added simple summary data (`CalRangeSummary`
  with calibrated median age + begin and end of 1- and 2-sigma ranges) to `CalC14`
  and the CLI output and plot. The latter got refactored and enhanced in the process.
  `HDR`s are now \"ordered\", so `_hdrstart` actually stores the older and `_hdrstop`
  the younger date.\n- V 0.1.1.0: Complete rewrite of the CLI output handling to avoid
  a memory leak.\n- V 0.1.0.0: Switch to PVP versioning (https://pvp.haskell.org/).\n-
  V 0.24.4: Removed big dependencies bytestring and statistics.\n- V 0.24.3: Multiple
  changes in .cabal to make cabal check happy.\n- V 0.24.2: Found and fixed another
  severe bug in `renderCalCurve`.\n- V 0.24.1: Fixed a serious bug in `renderCalCurveMatrix`.\n-
  V 0.24.0: Introduced more precise data types to distinguish years BP and years BC/AD.\n-
  V 0.23.1: Small changes to the instances of some general types.\n- V 0.23.0: Renamed
  multiple functions to make the naming of operations for parsing, reading, from-file
  reading, rendering and writing consistent across data types.\n- V 0.22.0: Changed
  the interface of the important `calibrateDates` function with a new config data
  type `CalibrateDatesConf`.\n- V 0.21.3: Refactored the calibration curve interpolation.\n-
  V 0.21.2: Introduced doctest and added some tiny examples/tests to try it out.\n-
  V 0.21.1: Split up the calibration module for better readability.\n- V 0.21.0: Added
  a neat CLI density plot for calibrated dates.\n- V 0.20.2: Some performance improvements
  for the calibration of large numbers of dates.\n- V 0.20.1: Better (parsing) error
  handling.\n- V 0.20.0: Added an option `--allowOutside` to allow for calibrations
  to run outside the range of the calibration curve.\n- V 0.19.0: Added functionality
  to filter out dates outside of the range of the calibration curve and report an
  error in this case.\n- V 0.18.0: Implemented calibration with a StudentT distribution
  to mimic Bchron and established that as the new default. Reimplemented the `--method`
  option of the CLI tool to reflect that change.\n- V 0.17.0: Changed argument order
  in the `CalCurve` data type to adjust to the order in `.14C` files.\n- V 0.16.0:
  Refactoring in the library to simplify and clarify the interface.\n- V 0.15.0: Added
  another calibration algorithm (following the implementation by Andrew Parnell in
  Bchron) and a method switch for the CLI.\n- V 0.14.0: Introduced strictness, which
  brought a significant increase in performance. See the discussion here: https://old.reddit.com/r/haskell/comments/picjy6/how_could_i_improve_the_performance_of_my/.\n-
  V 0.13.0: Major rewrite with the vector library - includes multiple bugfixes, but
  is surprisingly slow.\n- V 0.12.0: Renamed some core functions.\n- V 0.11.0: Made
  calibration curve interpolation optional and turned it off by default.\n- V 0.10.0:
  Simplified CLI interface by dropping the `calibrate` subcommand (`currycarbon` is
  sufficient now) and by repurposing `-q` from `--quickOut` to `--quiet`.\n- V 0.9.0:
  Made `--hdrFile` output a lot more machine-readable.\n- V 0.8.0: Added option `--calibrationCurveFile`
  to calibrate with different calibration curves.\n- V 0.7.2: More documentation,
  small changes in code layout and renamed CLI module that provides `runCalibrate`.\n-
  V 0.7.1: Added type documentation with haddock and replaced the existing types with
  record types.\n- V 0.7.0: Changed the date input interface once more.\n- V 0.6.0:
  Changed the date input interface, because parenthesis can be part of valid lab numbers.\n-
  V 0.5.2: Fixed parallel evaluation (deepseq forced memory-intensive, non-lazy behaviour).\n-
  V 0.5.1: Added github release action (copied from poseidon-hs).\n- V 0.5.0: Added
  file input for dates to calibrate.\n- V 0.4.0: Made output calibrated dates negative
  numbers for BC and positive for AD - and adjusted HDR printing accordingly.\n- V
  0.3.2: Some optimisation.\n- V 0.3.1: Added automatic filling of unknown sample
  names.\n- V 0.3.0: Simplified interface.\n- V 0.2.1: Removed ascii plot functionality.\n-
  V 0.2.0: Added parallel processing for the main calibration operation.\n- V 0.1.0:
  First basically working version.\n"
changelog-type: markdown
description: "[![GitHub Workflow Status](https://github.com/nevrome/currycarbon/actions/workflows/normalCheck.yml/badge.svg)](https://github.com/nevrome/currycarbon/actions/workflows/normalCheck.yml)\n[![Coverage
  Status](https://img.shields.io/codecov/c/github/nevrome/currycarbon/master.svg)](https://codecov.io/github/nevrome/currycarbon?branch=master)\n[![GitHub
  release (latest by date including pre-releases)](https://img.shields.io/github/v/release/nevrome/currycarbon?include_prereleases)
  \n![GitHub all releases](https://img.shields.io/github/downloads/nevrome/currycarbon/total)](https://github.com/nevrome/currycarbon/releases)\n\n#
  currycarbon\n\nRadiocarbon calibration module written in and for [Haskell](https://www.haskell.org).
  Comes with a small CLI app to run calibration on the command line.\n\n### Library\n\nThe
  Haskell library is available on Hackage [here](https://hackage.haskell.org/package/currycarbon)
  and on Stackage [here](https://www.stackage.org/package/currycarbon).\n\n### CLI
  app\n\nFor stable release versions we automatically prepare statically built binaries
  that can be downloaded and run directly.\n\nYou can download them here: [ [Linux
  \U0001F4E5](https://github.com/nevrome/currycarbon/releases/latest/download/currycarbon-Linux)
  | [macOS \U0001F4E5](https://github.com/nevrome/currycarbon/releases/latest/download/currycarbon-macOS)
  ]. Older release versions (some with Windows builds) are available [here](https://github.com/nevrome/currycarbon/releases).\n\nSo
  in Linux you can run the following commands to get started:\n\n```bash\n# download
  the current stable release binary\nwget https://github.com/nevrome/currycarbon/releases/latest/download/currycarbon-Linux\n#
  make it executable\nchmod +x currycarbon-Linux\n# test it\n./currycarbon-Linux \"Sample1,4990,30\"\n```\n\n```\ncurrycarbon
  v0.3.0.1 (UTF-8)\nMethod: Bchron {distribution = StudentTDist {ndf = 100.0}}\nCurve:
  IntCal20\nCalibrating...\nCalEXPR: [1] Sample1:4990±30BP\nCalibrated: 3936BC >>
  3794BC > 3757BC < 3662BC << 3654BC\n1-sigma: 3794-3707BC, 3666-3662BC\n2-sigma:
  3936-3874BC, 3804-3697BC, 3684-3654BC\n                                     ▁▁▁
  \   ▁▁▁▁\n                                   ▁▁▒▒▒▁▁▁▁▒▒▒▒▁\n                                   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒
  \      ▁\n                  ▁▁              ▁▒▒▒▒▒▒▒▒▒▒▒▒▒▒▁     ▁▒\n                ▁▁▒▒▁
  \            ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒    ▁▒▒▁\n           ▁▁▁▁▁▒▒▒▒▒▁          ▁▁▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▁▁▁▁▒▒▒▒▁\n
  \       ▁▁▁▒▒▒▒▒▒▒▒▒▒▒▁▁▁▁▁▁▁▁▁▁▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▁\n -3950 ┄─────────┬───────────────┬────────────────┬─────────┄
  -3640\n           >                      >     ^               < <\n                                  ────────────────
  \     ─\n           ───────────           ──────────────────  ──────\nDone.\n```\n\n```\nUsage:
  currycarbon [--version] [CalEXPRs] [-i|--inputFile FILE]\n                   [--calCurveFile
  FILE] [--method DSL] [--allowOutside]\n                   [--noInterpolation] [-q|--quiet]
  [--densityFile FILE]\n                   [--hdrFile FILE]\n                   [[--seed
  INT] (-n|--nrSamples INT) --samplesFile FILE]\n                   [--calCurveSegFile
  FILE] [--calCurveMatFile FILE]\n\n  Intercept calibration of radiocarbon dates\n\nAvailable
  options:\n  -h,--help                Show this help text\n  --version                Show
  version\n  CalEXPRs                 ---\n                           A string to
  specify \"calibration expressions\", so\n                           small chronological
  models for individual events.\n                           These can include uncalibrated
  radiocarbon ages,\n                           uniform age ranges and operations
  to combine the\n                           resulting age probability distribution
  as sums or\n                           products.\n                           The
  expression language includes the following\n                           functions:\n\n
  \                          - calExpr(id = STRING, expr = EXPR)\n                           -
  uncalC14(id = STRING, yearBP = INT, sigma = INT)\n                           - rangeBP(id
  = STRING, start = INT, stop = INT)\n                           - rangeBCAD(id =
  STRING, start = INT, stop = INT)\n                           - sum(a = EXPR, b =
  EXPR)\n                           - product(a = EXPR, b = EXPR)\n\n                           The
  order of arguments is fixed, but the argument\n                           names
  '<arg> =' can be left out. The 'id' arguments\n                           are optional.
  Some functions can be shortened with\n                           syntactic sugar:\n\n
  \                          - calExpr(STRING, EXPR) -> id: EXPR\n                           -
  uncalC14(STRING, INT, INT) -> STRING,INT,INT\n                           - sum(EXPR,
  EXPR) -> EXPR + EXPR\n                           - product(EXPR, EXPR) -> EXPR *
  EXPR\n\n                           Parentheses '()' can be used to specify the\n
  \                          evaluation order within an expression. Multiple\n                           expressions
  can be chained, separated by ';'.\n\n                           Examples:\n                           1.
  Calibrate a single radiocarbon date with a mean\n                           age
  BP and a one sigma standard deviation:\n                           \"3000,30\" or
  \"uncalC14(yearBP = 3000, sigma = 30)\"\n                           2. Calibrate
  two radiocarbon dates and sum them:\n                           \"(3000,30) + (3100,40)\"
  or\n                           \"sum(uncalC14(3000,30), uncalC14(3100,40))\"\n                           3.
  Compile a complex, named expression:\n                           \"Ex3: ((3000,30)
  + (3100,40)) * rangeBP(3200,3000)\"\n                           ---\n  -i,--inputFile
  FILE      A file with a list of calibration expressions.\n                           Formatted
  just as CalEXPRs, but with a new line for\n                           each input
  expression. CalEXPRs and --inputFile can\n                           be combined
  and you can provide multiple instances of\n                           --inputFile.
  Note that syntactic sugar allows to read\n                           simple radiocarbon
  dates from a headless .csv file\n                           with one sample per
  row: <sample name>,<mean age\n                           BP>,<one sigma standard
  deviation>.\n  --calCurveFile FILE      Path to an calibration curve file in '.14c'
  format.\n                           The calibration curve will be read and used
  for\n                           calibration. If no file is provided, currycarbon
  will\n                           use the 'intcal20' curve.\n  --method DSL             The
  calibration algorithm that should be used:\n                           '<Method>,<Distribution>,<NumberOfDegreesOfFreedom>'.\n
  \                          The default setting is equivalent to\n                           \"Bchron,StudentT,100\"
  which copies the algorithm\n                           implemented in the Bchron
  R package. For the Bchron\n                           algorithm with a normal distribution\n
  \                          (\"Bchron,Normal\") the degrees of freedom argument is\n
  \                          not relevant\n                           Alternatively
  we implemented \"MatrixMult\", which\n                           comes without further
  arguments.\n  --allowOutside           Allow calibrations to run outside the range
  of the\n                           calibration curve.\n  --noInterpolation        Do
  not interpolate the calibration curve.\n  -q,--quiet               Suppress the
  printing of calibration results to the\n                           command line.\n
  \ --densityFile FILE       Path to an output file to store output densities per\n
  \                          CalEXPR and calender year.\n  --hdrFile FILE           Path
  to an output file to store the high probability\n                           density
  regions for each CalEXPR.\n  --seed INT               Seed for the random number
  generator for age\n                           sampling. The default causes currycarbon
  to fall back\n                           to a random seed. (default: Nothing)\n
  \ -n,--nrSamples INT       Number of age samples to draw per CalEXPR.\n  --samplesFile
  FILE       Path to an output file to store age samples for each\n                           CalEXPR.\n
  \ --calCurveSegFile FILE   Path to an output file to store the relevant,\n                           interpolated
  calibration curve segment for the first\n                           (!) input date.
  This option as well as\n                           --calCurveMatFile are meant for
  debugging.\n  --calCurveMatFile FILE   Path to an output file which stores the relevant,\n
  \                          interpolated calibration curve segment for the first\n
  \                          (!) input date in a wide matrix format.\n```\n\n### For
  developers who want to edit the code\n\nTo install the latest development version
  you can follow these steps:\n\n1. Install the Haskell build tool [Stack](https://docs.haskellstack.org/en/stable/README/)\n2.
  Clone the repository\n3. Execute `stack install` inside the repository to build
  the tool and automatically copy the executables to `~/.local/bin` (which you may
  want to add to your path). This will install the compiler and all dependencies into
  folders that won't interfere with any installation you might already have.\n\n####
  Running the golden tests\n\nBecause the golden tests can not run on stackage as
  they are set up now (see the discussion [here](https://github.com/nevrome/currycarbon/issues/17))
  I hid them behind an environment variable. You can run them with\n\n```bash\nCURRY_RUN_GOLDEN=true
  stack test --pedantic\n```\n\nJust calling `stack test --pedantic` without this
  variable will skip any test with the pattern `\"Golden\"` in their descriptors.\n\n####
  Preparing a new stable release\n\nThe Github Actions script in `.github/workflows/release.yml`
  registers a new draft release and automatically builds and uploads currycarbon binaries
  when a new Git tag with the prefix `v*` is pushed. \n\n```bash\n# locally register
  a new tag (e.g. 0.3.1)\ngit tag -a v0.3.1 -m \"see CHANGELOG.md\"\n# push tag\ngit
  push origin v0.3.1\n```\n\nIn case of a failing build delete the tag and the release
  draft on Github and then delete the tag locally with\n\n```bash\ngit tag -d v0.3.1\n```\n\nbefore
  rerunning the procedure above.\n\n#### Profiling\n\n```\nstack build --profile\nstack
  exec --profile -- currycarbon \"1000,200;2000,200;3000,200;4000,200;5000,200;6000,200;7000,200;8000,200\"
  -q --densityFile /dev/null +RTS -p\nstack exec -- currycarbon \"1000,200;2000,200;3000,200;4000,200;5000,200;6000,200;7000,200;8000,200\"
  -q --densityFile /dev/null +RTS -s\n```\n"
description-type: markdown
hash: e129650de90760d1522484c784c866e112af997dd45bdf35abc2c38ee93b674a
homepage: https://github.com/nevrome/currycarbon
latest: 0.3.0.1
license-name: MIT
maintainer: clemens@nevrome.de
synopsis: A package for simple, fast radiocarbon calibration
test-bench-deps:
  base: '>=4.9 && <5'
  currycarbon: '>=0'
  hspec: '>=2 && <3'
  hspec-core: '>=2.10 && <3'
  process: '>=1.6 && <1.7'
