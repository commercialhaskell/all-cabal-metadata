all-versions:
- 1.0.0
- 1.1.0
- 1.2.0
- 1.3.0
- 1.4.0
- 1.4.1
- 1.4.2
- 2.0.0
- 2.1.0
- 2.1.1
- 2.1.2
- 2.2.0
- 2.3.0
- 2.3.1
author: Jappie Klooster
basic-deps:
  base: '>=4.7 && <4.15'
  cut-the-crap: '>=0'
  exceptions: '>=0'
  generic-lens: '>=0'
  lens: '>=0'
  network-uri: '>=0'
  optparse-applicative: '>=0'
  random: '>=0'
  regex-tdfa: '>=0'
  shelly: '>=0'
  system-filepath: '>=0'
  temporary: '>=0'
  text: '>=0'
  time: '>=0'
  unliftio-core: '>=0'
changelog: "# Change log for cut-the-crap\n\n## Version 2.3.1 - 2020.11.05\n\n+ Fix
  ssl cert check failure for the bundle. We disable it.\n+ Fix final segment being
  cut off.\n\n## Version 2.3.0 - 2020.11.01\n\n+ Hide extractDir from cutvideo\n  this
  is just a string, so shouldn't matter.\n+ Better default options.\n  The result
  is cut much less aggressive making it more watchable.\n  These defaults are also
  used on [videocut.org](https://videocut.org/)\n+ Improve CLI docs on various options.\n+
  Fix bug where setting a relative workdir breaks the program.\n+ Add better bundle
  support which now isn't depended on nixpkgs\n  releases.\n+ Add version to help
  output.\n\n## Version 2.2.0 - 2020.10.28\n\n+ Add wrapper for shelly that always
  flushes stdout\n  This should make the log more consistent\n+ Fix scrambling bug.\n
  \ Previously we used the file system to organize fragment order,\n  now we use the
  silence detection list instead.\n  This is much more robust\n\n## Version 2.1.2
  - 2020.10.25\n\nFix bug where youtube-dl sometimes doesn't write .mkv files\nfor
  certain websites, such as twitch (#52).\n\n## Version 2.1.1 - 2020.10.11\n\n+ add
  build-tools: c2hs to fix nix build\n\n## Version 2.1.0 - 2020.10.11\n\n+ Automatic
  cleanup of downloaded files\n  This is less annoying and also useful for the hosted
  version.\n+ Add static executable support\n  This works for all linux versions,
  and allows us to drop ubuntu package support.\n+ Add default output argument (convenience
  for debugging)\n+ Expose download functions\n\n### Docs\n\n+ All shell commands
  run through same function\n  This allowed me to improve logging, which better shows
  what goes on.\n+ Add better help docs for input format\n  We tell give hints on
  how to convert to mkv format.\n+ Add default use case docs in readme.\n+ Fix up
  readme docs with new cli\n\n### Cleanup\n\n+ nix: Move upstream patch to separate
  file and let default.nix depend on that\n+ Drop support for Ubuntu\n+ Delete segmentsize
  options which was unused.\n\n### Bug fixes\n\n+ Fix development shell to use nix
  cabal dependencies\n+ Better default options that work with most videos.\n+ Set
  the merge format for youtube dl to always be mkv to prevent issue (fixing the file
  not found bug)\n\n## Version 2.0.0 - 2020.10.09\n\n- Better install instructions\n-
  `defaut.nix` in project root now links to ffmpeg\n- return parse result from `runListenCut`\n-
  Make input file and output file positional\n- Add support for parsing uri and downloading
  automatically\n\n## Version 1.4.2 - 2020.08.31\n- add c2hs to build tools so we
  don't need to modify nixpkgs\n\n## Version 1.4.1 - 2020.08.30\n- Add changelog\n-
  Try fix nixpkgs and hackage build.\n- Add seperate CI target\n- Change overlay to
  be a copy of nixpkgs\n\n### Known issues\n\nIt's unlikely the subtitle generation\nwill
  be able to find the model dir:\n\nhttps://github.com/jappeace/cut-the-crap/issues/45\n\nBut
  this release at least fixes building,\nso that editing works again.\n\n## Version
  1.4.0 - 2020.08.01\n- Add prototype buggy subtitle generation feature\n\n## Version
  1.3.0 - 2020.07.24\n- Fix more bugs.\n- Remove redundant code\n\n## Version 1.2.0
  - 2020.07.23\n- Fix bugs.\n- Better UX\n\n## Version 1.0.0 - 2019.12.23 \n- Initial
  release.\n"
changelog-type: markdown
description: "![logo](doc/logo.png)\n\n[![Jappiejappie](https://img.shields.io/badge/twitch.tv-jappiejappie-purple?logo=twitch)](https://www.twitch.tv/jappiejappie)\n[![Jappiejappie](https://img.shields.io/badge/Youtube-jappieklooster-red?logo=Youtube)](https://www.Youtube.com/channel/UCQxmXSQEYyCeBC6urMWRPVw)\n[![Build
  status](https://img.shields.io/travis/jappeace/cut-the-crap)](https://travis-ci.org/jappeace/cut-the-crap/builds/)\n[![Jappiejappie](https://img.shields.io/badge/discord-jappiejappie-black?logo=discord)](https://discord.gg/Hp4agqy)\n\n>
  Bless This Mess\n\nCut the crap is an automatic video editing program for streamers.\nIt
  can cut out uninteresting parts by detecting silences.\nThis was inspired by [jumpcutter](https://github.com/carykh/jumpcutter),\nwhere
  this program can get better quality results\nby using an (optional) dedicated microphone
  track.\nThis prevents cutting of [quieter consonants](https://youtu.be/DQ8orIurGxw?t=675)\nfor
  example.\nUsing ffmpeg more efficiently also produces faster results and\nis less
  error prone.\n\nYoutube has different requirements from streams then twitch does.\nWe
  want to cut out boring parts.\nJumpcut has solved that problem partly and this program\nbuilds
  on top of that idea.\nAt the moment we use ffmpeg for silence detection, \nthen
  we do some maths to figure out which segments are sounded,\nwhich is combined into
  the output video.\n\nIn the future we will add support for a music track\nwhich
  will not be chopped up.\n\n# Install\n\n## From source \nInstall the [nix package](https://nixos.org/download.html)
  manager.\n\n```shell\ngit clone https://github.com/jappeace/cut-the-crap\ncd cut-the-crap\nnix-build
  .\nresult/bin/cut-the-crap\n```\n\n## Bundle build (staticly linked bundled with
  runtime deps)\nFrom version 2.1.1 and onwards these nix bundles will be attached
  to releases on the [release page](https://github.com/jappeace/cut-the-crap/releases).\nThese
  should work on any Linux distribution.\nDownload the executable from the [release
  page](https://github.com/jappeace/cut-the-crap/releases).\n\nUnder the hood we use
  [nix-bundle](https://github.com/matthewbauer/nix-bundle) for this.\nThese are so
  large because everything from libc to youtube-dl are packaged within.\n\n## Nix/Nixos\n\n+
  Run `nix-env -iA nixos.haskellPackages.cut-the-crap` or add to systemPackages.\n+
  simply run `cut-the-crap` to display usage instructions.\n\nThis only works for
  nixpkgs that have cut-the-crap >= 1.4.2 or =< 1.3\nThere were some build issues
  with 1.4.0 and 1.4.1 (now fixed)\n\n\n# Usage notes\n\nUp to date help is available
  in the program itself:\n```\ncut-the-crap\n```\n\nRun the program:\n\n```\ncut-the-crap
  listen https://www.youtube.com/watch?v=_PB6Hdi4R7M\n```\n\nIt works both with youtube
  or twitch videos (VODS).\nThe program simply passes the URL to [youtube-dl](https://github.com/ytdl-org/youtube-dl).\n\nWe
  can also run it on a local file of course:\n```\ncut-the-crap listen somelocalfile.mkv\n```\n\nThere
  is also a work in progress subtitle generation:\n```\ncut-the-crap subtitles https://www.youtube.com/watch?v=_PB6Hdi4R7M\n```\n\n\n##
  Noise gate\nMake sure to record with a noise gate on your microphone.\nThis will
  cut out background buzzing and allow you to use a more aggressive\nthreshold on
  noise detection.\n\n## OBS tracks\n\nSetup OBS so that you record the microphone
  and the desktop audio\non [separate tracks](https://obsproject.com/forum/resources/obs-studio-high-quality-recording-and-multiple-audio-tracks.221/).\nIn
  my own setup I have track 1 for combining all audio, track 2 for just the microphone
  and track 3 for desktop audio.\nThen I can use:\n\n```shell\n    cut-the-crap listen
  ./recordFromObs.mkv ./someOut.mkv --voiceTrack 2 --musicTrack 3\n```\n\nSo we throw
  away track 1, we use track 2 for silence detection, and track 3 get's mixed in after
  cutting is complete.\nIf you don't want music being mixed back into the result,\nfor
  example for further editing,\nyou can also leave that argument out.\nI did this
  for example to mix back in the music of the original file later.\n\n## Test data\nIt
  maybe a bit awkward to record yourself just for testing data.\nTo get some easy
  test date we can use youtube-dl, and make it a bit shorter with ffmpeg,\nfor example:\n\n```shell\nyoutube-dl
  \"https://www.youtube.com/watch?v=kCpQ4aTzlis\" && ffmpeg -i \"Opening Ceremony
  & 'Languages all the way down' by Rob Rix - ZuriHac 2020-kCpQ4aTzlis.mkv\" -t 00:20:00.00
  -c copy input.mkv\n```\n\n# Use case\nI'm using this program to record my [stream](https://www.twitch.tv/jappiejappie)\nand
  upload it to my\n[Youtube channel](https://www.Youtube.com/channel/UCQxmXSQEYyCeBC6urMWRPVw).\n\nThe
  concrete result is that your audience retention percentage will go up since the
  videos\nwill be shorter, and more engaging.\nSometimes on stream I have intro screens
  for example which completely get removed,\nand other times I'm simply thinking.\nReducing
  videos by 30% is not uncommon in my case, which means by default\n30% more retention.\nYou
  could even decide to edit after that which means you have to spend less time\non
  cutting out silences and more time on making it look cool.\n\nFeel free to use or
  modify this program however you like.\nPull requests are appreciated.\n\n# Features\n\n##
  Track based silence detection\nIt is possible to specify one audio output as speech
  track.\nThis will be used to for silence detection only.\nThe result is very precise
  silence detection.\n\n## Separate music track\nAnother track would be background
  and won't be modified at all.\nIn the end it just get's cut of how far it is.\n\nThis
  way we get good music and interesting stream.\nAnother idea is to remix an entirely
  different source of music\ninto the video, so we can play copyrighted music on stream\nand
  Youtube friendly music on Youtube.\n\n# Design\nThis project is mostly a wrapper
  around ffmpeg.\nWe use Haskell for shell programming.\n\nWe first figure out what's
  going on with the video.\nFor example we do silence detection or speech recogontion,
  maybe even motion detection etc.\nAfter the analyze phase we act in the edit phase.\nWhere
  we for example cut.\nFinally we produce some result.\n\nThe [shelly](http://hackage.haskell.org/package/shelly)
  library was chosen in support of shell programming.\nOriginally we used [turtle](http://hackage.haskell.org/package/turtle),\nbut
  that library is much more complicated to use because it assumes you\nwant to do
  stream programming,\ncreating several unexpected bugs.\nSo we replaced it with shelly
  and noticabally reduced code complexity.\nNow it's truly a 'dumb' wrapper around
  ffmpeg.\n\n## Why not to extend jumpcutter directly?\nI wish to build out this idea
  more to essentially\nmake all streams look like human edited Youtube videos.\nAlthough
  I'm familiar with python,\nI (am or feel) more productive in haskell,\ntherefore
  I chose to integrate with,\nand eventually replace jumpcutter.\nOn stream we've
  determined most of the functionality is basically\nffmpeg.\nHaskell also opens up
  the ability to do direct native ffmpeg\nintegration,\nwhere we use ffmpeg as a library
  instead of calling it as a CLI\nprogram.\n\nOne glaring limitation I've encountered
  with jumpcutter is that\nit can't handle larger video files (2 hour 30 minutes +).\nScipy
  throws an exception complaining the wav is to big.\nSince this program doesn't use
  scipy it doesn't have that issue.\n\nIt also appears like jumpcutter is unmaintained.\n\n#
  Alternatives\nThis idea is obviously not new,\nconsidering ffmpeg has first class
  support for it.\nThese are listed in no particular order:\n\n+ [jumpcutter](https://github.com/carykh/jumpcutter)\n+
  [jumpcutter laumans fork](https://github.com/Lamaun/jumpcutter)\n+ [Auto editor](https://github.com/WyattBlue/auto-editor)\n+
  https://www.kapwing.com/tools/mute-video\n+ https://www.videomaker.com/forum/topic/how-to-remove-silence-from-a-video-automatically\n\nAuto
  editor seems actively maintained and packed with features.\nIt's target audience
  is different, whereas I wish to host this project on\n[videocut.org](https://videocut.org/)
  and make it available to everyone,\nauto editor is to be a command line tool.\n"
description-type: markdown
hash: 3cd22d2b940a705a937905c94e576e80e7f5cb1f1d2d3aaa9c890f8a4bf88350
homepage: ''
latest: 2.3.1
license-name: MIT
maintainer: jappieklooster@hotmail.com
synopsis: Cuts out uninteresting parts of videos by detecting silences.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <4.15'
  exceptions: '>=0'
  generic-lens: '>=0'
  hspec: '>=0'
  hspec-core: '>=0'
  lens: '>=0'
  network-uri: '>=0'
  optparse-applicative: '>=0'
  quickcheck-classes: '>=0'
  random: '>=0'
  regex-tdfa: '>=0'
  shelly: '>=0'
  system-filepath: '>=0'
  temporary: '>=0'
  text: '>=0'
  time: '>=0'
  unliftio-core: '>=0'
