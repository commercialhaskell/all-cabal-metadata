all-versions:
- '0.2'
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.6
- 0.3.0.0
- 0.3.0.1
- 0.3.0.2
author: James Cook <mokus@deepbondi.net>
basic-deps:
  MonadPrompt: '>=1.0 && <1.1'
  base: '>=3 && <5'
  bytestring: '>=0'
  mtl: '>=2 && <3'
  random: '>=1.2.0'
  transformers: '>=0.2 && <0.7'
changelog: |
  * Changes in 0.3.0.0:

    * Drop usage of `random-source` in favor of `random`
    * Add `Prim` type that resembles one from `random-source`
    * Add `RGen` type that serves the same purpose as `StdRandom` in `random-source`

  * Changes in 0.2.0.6: None. (Pacify Hackage.)

  * Changes in 0.2.0.4: Update for GHC 8.8.

  * Changes in 0.2.0.3: Version bump for transformers dependency.

  * Changes in 0.2.0.2: Version bump for transformers dependency.

  * Changes in 0.2.0.1: Version bump for transformers dependency.
changelog-type: markdown
description: |-
  Random number generation based on modeling random
  variables by an abstract type ('RVar') which can be
  composed and manipulated monadically and sampled in
  either monadic or \"pure\" styles.

  The primary purpose of this library is to support
  defining and sampling a wide variety of high quality
  random variables.  Quality is prioritized over speed,
  but performance is an important goal too.

  In my testing, I have found it capable of speed
  comparable to other Haskell libraries, but still
  a fair bit slower than straight C implementations of
  the same algorithms.
description-type: haddock
hash: 919fcb81a0f9e7f448f47db38ae35794d04336c6e8396cfde51be782cf6287ec
homepage: https://github.com/haskell-numerics/random-fu
latest: 0.3.0.2
license-name: LicenseRef-PublicDomain
maintainer: Dominic Steinitz <dominic@steinitz.org>
synopsis: Random Variables
test-bench-deps: {}
