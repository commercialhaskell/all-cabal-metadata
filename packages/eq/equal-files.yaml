homepage: http://code.haskell.org/~thielema/equal-files/
changelog-type: ''
hash: 9344cedd83cf866e1b445e2d2a4e8506e69f8bdf8cfd852afafb4a7a8be55e84
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Shell command for finding equal files
changelog: ''
basic-deps:
  explicit-exception: '>=0.1 && <0.3'
  bytestring: '>=0.9 && <0.12'
  filemanip: '>=0.3.5 && <0.4'
  base: '>=3 && <5'
  utility-ht: '>=0.0.1 && <0.1'
  transformers: '>=0.2 && <0.7'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.2.1
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.5.1
- 0.0.5.2
- 0.0.5.3
- 0.0.5.4
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.0.5.4
description-type: haddock
description: |-
  Shell command that finds files with equal content in a given set of files.
  This is useful for finding duplicates in a set of documents
  where the same document might have been stored by accident with different names.
  Use it like

  > equal-files `find my_dir -type f`

  or

  > find my_dir -type f | xargs equal-files

  If the file names contain spaces, better use

  > find my_dir -type f -printf "'%p'\n" | xargs equal-files

  or

  > equal_files -r my_dir

  The program reads all input files simultaneously,
  driven by sorting and grouping of their content.
  However be prepared that due to the simultaneous access
  you may exceed the admissible number of opened files.
  Thus you may prefer to run it like

  > equal_files -r -p 512 my_dir

  The program can be used as a nice example of a declarative
  yet efficient implementation of a non-trivial algorithm,
  that is enabled by lazy evaluation.
license-name: LicenseRef-GPL
