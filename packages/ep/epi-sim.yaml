homepage: https://github.com/aezarebski/epi-sim#readme
changelog-type: markdown
hash: 4e4ab8af0e21ce96988841ad700dea3ee147981b30630cc06d6bd552aeee922b
test-bench-deps:
  bytestring: -any
  mwc-random: -any
  base: -any
  hspec: -any
  statistics: -any
  epi-sim: -any
  aeson: -any
  primitive: -any
  vector: -any
maintainer: aezarebski@gmail.com
synopsis: A library for simulating epidemics as birth-death processes.
changelog: "# Changelog for epi-sim\n\n## 0.7.0\n\n- Simulation functions (eg `simulationWithGenIO`)
  return either the simulated\n  events of the summary produced by the termination
  handler if the simulation\n  terminated early.\n- The `InhomBDSCODPop` now records
  the number of individuals that have been\n  removed and there are getter functions
  exported to access this information.\n- Add `TerminationHandler` to provide better
  control over early termination of\n  simulations. For example, this makes it possible
  to terminate the simulation\n  early if certain stopping conditions are met and
  to call a function that\n  summarises why the simulation is being terminated. This
  will break old code in\n  that the `configuration` functions provided by the example
  models all now have\n  an additional parameter of type `Maybe TerminationHandler`.\n\n##
  0.6.0\n\n- Improve documentation.\n- Allow a flexible start time of the simulation
  so it does not assume a start\n  time of zero.\n- Rename a bunch of the simulation
  functions so their use case is clearer.\n\n## 0.5.2\n\n- Include helper functions
  in `Epidemic.Types.Simulation` to make it easier to\n  create PRNG with or without
  a fixed seed.\n\n## 0.5.1\n\n- Bug fix and tidy up some code.\n\n## 0.5.0\n\n- Add
  absolute times to the extinction and stopping time events to provide a\n  consistent
  interface.\n- Add the `aggregated` function to help aggregated individual level
  samples into\n  population level samples. This is tested in `aggregationTests`.\n-
  Add `TimeStamp` type class to abstract working with types that have an\n  absolute
  time associated with them.\n- Add `TimeInterval` type for working with intervals
  of time, there are also\n  some helper functions to make it easier to work with
  intervals.\n- Add the `maybeNextTimed` helper function and clean up some code in
  the `Time`\n  module.\n- Extend `ModelParameters` class to have an `eventWeights`
  to provide a vector\n  of event weights for computing which event actually occurred.\n\n##
  0.4.2\n\n- Include `simulationWithGenIO` and add `scRequireCherry` to the\n  `SimulationConfiguration`
  record type to make it easier to control how\n  simulations are conditioned upon
  particular observations.\n- Documentation.\n- Bug fix in edge case of no sequenced
  samples.\n\n## 0.4.1\n\n- Update the `simulationWithSystemRandom` function so that
  this works again.\n\n## 0.4.0.0\n\n- The following changes to the `EpidemicEvent`
  type will be the real sticking\n  point in moving from `0.3.0.0` to `0.4.0.0`:\n
  \ \n```\n-- | Events that can occur in an epidemic with their absolute time.\ndata
  EpidemicEvent\n  = Infection AbsoluteTime Person Person -- ^ infection time, infector,
  infectee\n  | Removal AbsoluteTime Person -- ^ removal without observation\n  |
  Sampling AbsoluteTime Person -- ^ removal and inclusion in phylogeny\n  | Catastrophe
  AbsoluteTime People -- ^ scheduled sampling of lineages\n  | Occurrence AbsoluteTime
  Person -- ^ removal and observed by not in phylogeny\n  | Disaster AbsoluteTime
  People -- ^ scheduled occurrence of lineages\n  | Extinction -- ^ epidemic went
  extinct time time can be recovered from the preceeding removal\n  | StoppingTime
  -- ^ the simulation reached the stopping time\n  deriving (Show, Generic, Eq)\n```\n\nbecomes\n\n```\n--
  | Events that can occur in an epidemic with their absolute time.\ndata EpidemicEvent\n
  \ = Infection AbsoluteTime Infector Infectee\n  | Removal AbsoluteTime Person\n
  \ | IndividualSample\n      { indSampTime :: AbsoluteTime\n      , indSampPerson
  :: Person\n      , indSampSeq :: Bool\n      }\n  | PopulationSample\n      { popSampTime
  :: AbsoluteTime\n      , popSampPeople :: People\n      , popSampSeq :: Bool\n      }\n
  \ | Extinction -- ^ epidemic went extinct time time can be recovered from the preceeding
  removal\n  | StoppingTime -- ^ the simulation reached the stopping time\n  deriving
  (Show, Generic, Eq)\n```\n \n- Remove CSV export, now there is only JSON export.
  If you want to include an\n  orphan instance for working with `cassava` the following
  might be useful\n\n```\ninstance Csv.ToRecord EpidemicEvent where\n  toRecord e
  =\n    case e of\n      (Infection time person1 person2) ->\n        Csv.record\n
  \         [ \"infection\"\n          , Csv.toField time\n          , Csv.toField
  person1\n          , Csv.toField person2\n          ]\n      (Removal time person)
  ->\n        Csv.record [\"removal\", Csv.toField time, Csv.toField person, \"NA\"]\n
  \     (Sampling time person) ->\n        Csv.record [\"sampling\", Csv.toField time,
  Csv.toField person, \"NA\"]\n      (Catastrophe time people) ->\n        Csv.record
  [\"catastrophe\", Csv.toField time, Csv.toField people, \"NA\"]\n      (Occurrence
  time person) ->\n        Csv.record [\"occurrence\", Csv.toField time, Csv.toField
  person, \"NA\"]\n      (Disaster time people) ->\n        Csv.record [\"disaster\",
  Csv.toField time, Csv.toField people, \"NA\"]\n      Extinction -> Csv.record [\"extinction\",
  \"NA\", \"NA\", \"NA\"]\n      StoppingTime -> Csv.record [\"stop\", \"NA\", \"NA\",
  \"NA\"]\n```\n\n- Move the Newick material into `Epidemic.Types.Newick`.\n- Remvoe
  the `TransmissionTree` and `SampleTree` data types because there is\n  already the
  `EpidemicTree` and `ReconstructedTree` in the\n  `Epidemic.Types.Events` which should
  be used preferentially.\n- Remove dependency on `trifecta` since this functionality
  is not necessary.\n\n## 0.3.0.0\n\n- Add an `ARCHITECTURE.md` file to outline the
  structure of this package.\n- Move all the temporal types into their own submodule
  `Epidemic.Types.Time` so\n  they are easier to isolate.\n- Provide a `Epidemic.Types.Observations`
  module to provide the functionality\n  surrounding extracting the observed events
  from a simulation.\n- Add `Extinction` and `StoppingTime` constructors for the `EpidemicEvent`
  type\n  so that we can encode why the simulation finished in the events. As a result\n
  \ of this change, every simulation that was not terminated early should end with\n
  \ an `Extinction` event or a `StoppingTime` event.\n- Update the resolver to 17.2\n-
  Extend the `ModelParameters` class to include a `Population` parameter type\n  since
  this is needed to compute event rates in for the logistic model.\n- Create `Epidemic.Type.Simulation`
  module for types relating to running generic\n  simulations from the models to avoid
  confusion as to where these are defined.\n- Move class definitions into corresponding
  `Epidemic.Type.X` modules.\n- Add a `Epidemic.Model.LogisticBDSD` module implementing
  a logistic birth-death\n  process with unscheduled sampling and scheduled unsequenced
  sampling.\n- Move the models into a new `Epidemic.Model` module so that it is clearer
  that\n  these are really just examples of putting together functionality provided
  by\n  the rest of the library.\n- Use a new type `Identifier` to represent identities
  of people rather than a\n  raw integer this way it is clearer what it really is.\n-
  Replace `Time` with `AbsoluteTime` and `TimeDelta` types to make it explicit\n  what
  is being represented.\n- Reduce the number of models that are included to the more
  interesting subset.\n\n## 0.2.2.0\n\n- Clean up for a release candidate.\n\n## 0.2.1.0\n\n-
  Update the stack resolver to `lts-16.17` and add bounds on the package\n  versions
  to use.\n- Remove dependency upon `epi-types` by moving its modules into this package
  and\n  include the tests from that package.\n- Remove unused `Setup.hs` file.\n\n##
  0.2.0.1\n\n- Improve documentation in `Epidemic.BDSCOD`.\n- Upgrade to `epi-types-0.2.1.2`
  for the bug fix.\n\n## 0.2.0.0\n\n- Predicates such as `isSampling` and `isOccurrence`
  have been replaced with\n  clearer named alternatives: `isNonReconTreeObservation`
  and `isReconTreeLeaf`\n  to avoid uncertainty about whether scheduled events are
  included.\n- Upgrade to `epi-types-0.2.1.0` which adds substantial amounts of Newick\n
  \ functionality meaning this can be removed.\n\n## 0.1.9.0\n\n- Upgrade to `epi-types-0.2.0.0`
  which makes a lot of functions redundant so\n  they have been removed.\n\n## 0.1.8.8\n\n-
  Upgrade to `epi-types-0.1.1.1` and remove `joinTimed` since it is no longer\n  needed.\n\n##
  0.1.8.7\n\n- Upgrade to `epi-types-0.1.1.0` and start using the `Timed *` class.\n\n##
  0.1.8.6\n\n- Use `-j2` to slightly improve compilation time.\n- Include a `observedEvents`
  function which was missing from the\n  `InhomogeneousBDS` module.\n\n## 0.1.8.5\n\n-
  Start using cabal directly without hpack.\n- Move time dependent parameters into
  a `epi-sim` package so they are easier to\n  share, and import them here.\n\n##
  0.1.8.4\n\n- Improve documentation of construction of `inhomBDSRates` and include
  a test to\n  check this conforms to expectations.\n- Implement a birth-death-sampling
  model with time-dependent birth rates and\n  include an example of what this returns
  in the README.\n\n## 0.1.8.3\n\n- Improve error handling in `birth-death-lines.R`.\n-
  Refactor some of the plotting code in `birth-death-lines.R` to make it easier\n
  \ to maintain.\n- Use the `future` and `furrr` packages in R to generate the visualisation
  of a\n  simulation in parallel since the serial version is frustratingly slow. Both\n
  \ packages are on CRAN so it does not seem unreasonable.\n\n## 0.1.8.2\n\n- Include
  an additional parameter in the `simulation` and\n  `simulationWithSystemRandom`
  to determine whether the simulation should be\n  conditioned on having at least
  two sampled leaves in the reconstructed tree.\n  It does this by repeatedly simulating
  until such a tree is acheved.\n\n## 0.1.8.1\n\n- Implement an example of the inhomogeneous
  birth-death process and include it\n  in the `README`.\n- Fix broken example using
  the BDSCOD model and organise examples in `examples/`\n  rather than just the single
  one in `app/`.\n\n## 0.1.8.0\n\n- Define an inhomogeneous birth-death process in
  `InhomogeneousBD`.\n- Define an inhomogeneous exponential random sampler using `Timed
  Rate`s.\n- Extend the `ModelParameters` class to have a `birthProb` function.\n-
  Include a `Timed` type for time varying values.\n- Include a test that the final
  size of a birth-death simulation is\n  approximately correct.\n- Format the changelog
  to make it easier to read outside of a browser.\n- Fix naming convention and exports
  in the `BirthDeath`, `BirthDeathSampling`\n  and `BirthDeathSamplingOccurrence`modules
  to conform to the pattern used in\n  the `BDSCOD` module and move `simulation` into
  the `Utility` module since it\n  is common between all models\n- Adjust the type
  of the `ModelParameters` interface to include potential time\n  dependence.\n\n##
  0.1.7.2\n\n- Make `Event` an instance of `FromRecord` to match with `ToRecord`.\n\n##
  0.1.7.1\n\n- Provide `vis/birth-death-lines.R` which visualises a simulation.\n\n##
  0.1.7.0\n\n- Provide `vis/ott.R` to visualise observations through time and make\n
  \ `vis/ltt.R` ignore disasters.\n- Replace some Catastrophe specific functions with
  equivalents for handling\n  scheduled events more generally\n  + `noCatastrophe`
  becomes `noScheduledEvent`\n  + `firstCatastrophe` becomes `firstScheduled`\n- Change
  the naming of the BDSCO model to be consistent with the new BDSCOD\n  model.\n-
  Implement a birth-death-sampling-catastrophe-occurrence-disaster model in\n  `Epidemic.BDSCOD`.\n\n##
  0.1.6.2\n\n- Update the visualisation code in `vis/ltt.R` such that it parses the\n
  \ catastrophe events to draw the LTT.\n- BUG FIX: In the observed events catastrophes
  are replicated when they should\n  not be.\n\n## 0.1.6.1\n\n- Include a visualisation
  script for the LTT of reconstructed trees: `vis/ltt.R`\n  which is described in
  the README.\n\n## 0.1.6.0\n\n- Move the `ToField` declarations into the `Epidemic`
  module to avoid orphaned\n  instance and select a representation for multiple people
  in the CSV output.\n- Implement a birth-death-sampling-catastrophe-occurrence model
  in\n  `Epidemic.BirthDeathSamplingCatastropheOccurrence`; it's a shame about the\n
  \ length of the name.\n- Include a contructor for catastrophe events in which multiple
  people can be\n  sampled simultaneously.\n\n## 0.1.5.1\n\n- Include a `.gitignore`.\n-
  Improved documentation with `haddock`.\n\n## 0.1.5.0\n\n- Include some testing with
  `hspec`.\n- The `Epidemic.BirthDeathSamplingOccurrence` module now has a function
  to\n  extract the observable events.\n- Change the simulation functions to return
  events in the order they occurred.\n- Change the configuration functions to take
  tuples of model parameters.\n\n## 0.1.4.0\n\n- Make `Event` an instance of the `Ord`
  typeclass.\n- Implement types and conversion functions for a `TransmissionTree`
  and a\n  `SampleTree`.\n- Implement a parser and printer for Newick in `Epidemic.Utility`.\n\n##
  0.1.3.0\n\n- Implement a birth-death-sampling-occurrence model in\n  `Epidemic.BirthDeathSamplingOccurrence`.\n-
  Implement a visualisation of the birth-death-sampling LTT in\n  `vis/birthDeathSamplingVisualisation.R`.\n-
  Implement a birth-death-sampling model in `Epidemic.BirthDeathSampling`.\n\n## 0.1.2.0\n\n-
  Implement a visualisation of the infection network in\n  `vis/infection-tree.vg.json`.\n-
  Implement `Epidemic.Utility.eventsAsJsonTree`.\n- Move the `Epidemic.Simulation`
  module to `Epidemic.Utility`.\n\n## 0.1.1.0\n\n- Write the output to CSV using `cassava`\n\n##
  0.1.0.0\n\n- Basic prototype to simulate a constant rate birth-death process.\n"
basic-deps:
  bytestring: '>=0.10.10 && <0.11'
  mwc-random: '>=0.14.0 && <0.16'
  base: '>=4.14.1 && <4.15'
  hspec: '>=2.7.6 && <2.8'
  statistics: '>=0.15.2 && <0.16'
  aeson: '>=1.4.7 && <1.6'
  primitive: '>=0.7.0 && <0.8'
  vector: '>=0.12.1 && <0.13'
all-versions:
- 0.2.2.0
- 0.4.2
- 0.7.0
author: Alexander Zarebski
latest: 0.7.0
description-type: markdown
description: |
  # epi-sim

  A library for simulating stochastic epidemic models, with a focus on
  phylodynamics and observation models.

  ## Epidemic events

  A realisation of the model is represented by a list of `EpidemicEvent`s which
  describe the events that occurred.

  ## Available models

  Although this package supports the definition of new models there are some that
  are implemented already in the `Epidemic.Model` module. Implemented models
  include:

  1. Birth-Death-Sampling-Catastrophe-Occurrence-Disaster (see `BDSCOD.hs`)
  2. Inhomogeneous Birth-Death-Sampling (see `InhomogeneousBDS.hs`)
  3. Inhomogeneous Birth-Death-Sampling-Catastrophe-Occurrence-Disaster (see
     `InhomogeneousBDSCOD.hs`)
  4. Logistic Birth-Death-Sampling-Disaster (see `LogisticBDSD.hs`)
license-name: MIT
