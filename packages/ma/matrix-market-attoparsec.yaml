all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
- 0.1.1.0
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
author: Marco Zocca
basic-deps:
  attoparsec: '>=0.10'
  base: '>=4.7 && <5'
  bytestring: '>=0.9'
  exceptions: '>=0'
  scientific: '>=0.3.3.8'
changelog: |
  0.1.1.2

  Expose writeArray' and readArray' as well

  0.1.1.0

  Add ExportError exception

  0.1.0.1

  Add MatrixMarket module from `accelerate-examples` SMVM
changelog-type: markdown
description: "# matrix-market-attoparsec\n\n[![Build Status](https://travis-ci.org/ocramz/matrix-market-attoparsec.png)](https://travis-ci.org/ocramz/matrix-market-attoparsec)\n\nAttoparsec
  parser for the NIST Matrix Market format [0].\n\nThe library also contains functions
  for serializing matrix data to text file.\n\n## User guide\n\nThe module `Data.Matrix.MatrixMarket`
  exports the user interface:\n\n    readMatrix :: FilePath -> IO (Matrix S.Scientific)\n\n
  \   readArray :: FilePath -> IO (Array S.Scientific)\n\n    writeMatrix :: Show
  a => FilePath -> Matrix a -> IO ()\n \n    writeArray :: Show a => FilePath -> Array
  a -> IO ()  \n\nThe first two functions contain the parsing logic, and make use
  of `scientific` for parsing numerical data in scientific notation.\n\nAs of version
  0.1.1 there are also intermediate functions `readMatrix'`, `readArray'`, `writeMatrix'`
  and `writeArray'` that do not touch the filesystem but (de-)serialize from/to lazy
  ByteString.\n\n\n### Naming convention\n\nWe follow the MatrixMarket format definitions,
  by which a \"Matrix\" is _sparse_ and stored in coordinate format (row, column,
  entry), whereas an \"Array\" is a _dense_ grid of numbers, stored in column-oriented
  form.\nAlgebraic vectors, such as the right-hand sides of equation systems, are
  stored as n-by-1 Arrays.\n\n## Testing\n\n`test/LibSpec.hs` contains a simple read/write/read
  sanity test for the included Matrix Marked data files (`fidapm05.mtx` and `fidapm05_rhs1.mtx`):\n\n
  \   m0 <- readMatrix fname   -- load original\n    writeMatrix ftemp m0     -- save
  as temp\n    m1 <- readMatrix ftemp   -- load temp\n    m0 `shouldBe` m1         --
  compare temp with original\n\n\n## References\n\n[0] [http://math.nist.gov/MatrixMarket/](http://math.nist.gov/MatrixMarket/)\n"
description-type: markdown
hash: 495f7de76088388b7eeeeddf189873c5b8401e859cf22bd7a0aa441f50aabd98
homepage: https://github.com/ocramz/matrix-market-attoparsec
latest: 0.1.1.3
license-name: BSD-2-Clause
maintainer: zocca marco gmail
synopsis: Parsing and serialization functions for the NIST Matrix Market format
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  hspec: '>=0'
  matrix-market-attoparsec: '>=0'
