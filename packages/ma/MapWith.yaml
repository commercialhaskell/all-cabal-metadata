all-versions:
- 0.1.0.0
- 0.2.0.0
author: David James
basic-deps:
  base: '>=4.9.1 && <4.15'
changelog: "# Revision history for MapWith\r\n\r\n## 0.1.0.0 -- 2020-06-24\r\n* First
  release\r\n\r\n## 0.2.0.0 -- 2020-08-25\r\n* Significant performance improvements
  (including fusion)\r\n* New Features:\r\n   * An Injector can inject multiple values
  (for example adj2Elts)\r\n   * New Injectors:\r\n      * evenElt\r\n      * foldlElts
  and foldl1Elts\r\n      * adj2Elts\r\n   * New utility functions:\r\n      * withFirst\r\n
  \     * withLast\r\n* Breaking Changes:\r\n   * eltFrom (& similar) now consume
  a List, not a Foldable. (They never used any features of Foldables, other than converting
  them to a list).\r\n   * Injector functions have two changes. To convert Injectors,
  change `(\\a s -> ... (i, s'))` to `(\\a s -> ... (s', app1 i))`:\r\n      * the
  order of the output pair is reversed for consistancy with state transformers, `mapAccumL`,
  etc. It's now `(new-state, injection-values)`.\r\n      * the injector types and
  values now need to be instances of CurryTF.\r\n* Improved documentation including
  examples and benchmark stats.\r\n* Also tested in GHC 8.10.1\r\n     \r\n"
changelog-type: markdown
description: "# MapWith [![Stackage version](https://www.stackage.org/package/MapWith/badge/nightly?label=Stackage)](https://www.stackage.org/package/MapWith)
  [![Hackage version](https://img.shields.io/hackage/v/MapWith.svg?label=Hackage)](https://hackage.haskell.org/package/MapWith)
  [![build status](https://img.shields.io/travis/davjam/MapWith/master.svg?label=Travis%20build)](https://travis-ci.com/github/davjam/MapWith)\r\n\r\n`mapWith`:
  like `fmap`, but can \"inject\" additional parameters such as whether first (or
  last) element, etc.\r\n\r\n# Background\r\n\r\nI often want to map over a list,
  but do something slightly different with the first or last element.\r\n\r\nFor a
  long time I used [markbounds](https://stackoverflow.com/questions/14114011/haskell-map-operation-with-different-first-and-last-functions#answer-53282575),\r\nbut
  also wanted something that:\r\n\r\n- works on structures other than lists (`mapWith`
  works on all `Traversable` types);\r\n- can provide additional types of parameter
  (not just first/last), such as:\r\n  - index from start/end;\r\n  - the previous/next
  element; and\r\n- makes it easy to create new types of parameter to provide; and\r\n-
  can provide any number of separate parameters to a function (not just a 3-tuple).\r\n\r\nSo,
  after only 2 years, I built a small library to do all of these.\r\n\r\n# Examples\r\n\r\nPassing
  a \"standard combination\" of isFirst and isLast parameters:\r\n\r\n```\r\nlet g
  x f l = [star f, x, star l]; star b = if b then '*' else ' '\r\nin withFirstLast
  g \"fred\"\r\n[\"*f \", \" r \", \" e \", \" d*\"]\r\n```\r\n\r\nPassing a custom
  combination of different types of parameter \r\n(the index from the start, whether
  it's the last element, and elements from another list applied from the right):\r\n\r\n```\r\nlet
  g x n l e = concat [[x], show n, if l then \"*\" else \"-\", e]\r\nin mapWith (g
  ^-> eltIx & isLast <-^ eltFrom [\"x\",\"yy\",\"z\",\"zzzz\",\"y\"]) \"fred\"\r\n[\"f0-zzzz\",\"r1-z\",\"e2-yy\",\"d3*x\"]\r\n```\r\n\r\nMore
  examples are [here](doc/examples.hs).\r\n\r\n# Questions/Doubts\r\n\r\nNote that
  this is my first library and my first use of cabal, so I've probably done some dumb
  things.\r\n\r\nSome things I wonder:\r\n\r\n- Doesn't this already exist? (It feels
  like it should!)\r\n- Should I name it `Data.Traversable.MapWith`? Or are such names
  \"reserved\" for \"official\" libraries, or something? Would this name impact my
  own file/directory structures?\r\n\r\n# Future Work\r\n\r\nAreas for potential improvement
  in later releases:\r\n\r\n- Performance investigations and hopefully improvements,
  in particular:\r\n  - fusion for eltFrom Injectors (unlikely, given the reasons
  it's not possible for zipWith, but we'll see).\r\n  - enhancements for \"stateful\"
  \"from the right\" Injectors (unlikely, given [this](https://stackoverflow.com/questions/63504127/haskell-pinned-or-stack-memory-for-performance)).\r\n\r\n-
  CurryTF: avoid tuples? (The tuple `(7, ())` is interpreted by `CurryTF` as an application
  of a single value `7`, but by `Data.Tuple.Curry` as two values: `7` and `()`,\r\n
  \ which I think is slightly more confusing than it needs to be.)\r\n\r\n"
description-type: markdown
hash: 6e8ccc02bf6684b26367c39b7c4f275da1dd4a0a36fc2c0fef469d58c485dfae
homepage: https://github.com/davjam/MapWith#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: dj112358@outlook.com
synopsis: 'mapWith: like fmap, but with additional parameters (isFirst, isLast, etc).'
test-bench-deps:
  base: '>=0'
