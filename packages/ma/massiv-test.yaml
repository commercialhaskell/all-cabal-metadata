homepage: https://github.com/lehins/massiv
changelog-type: markdown
hash: 0017c1454fffd26a41d686f2062b4c287323de644883e44895b4f6d8d450b2ba
test-bench-deps:
  scheduler: -any
  bytestring: -any
  mwc-random: -any
  base: -any
  hspec: -any
  massiv-test: -any
  massiv: '>=0.6'
  genvalidity-hspec: -any
  data-default: -any
  containers: -any
  deepseq: -any
  QuickCheck: -any
  primitive: -any
  vector: -any
maintainer: alexey@kuleshevi.ch
synopsis: Library that contains generators, properties and tests for Massiv Array
  Library.
changelog: |
  # 0.1.6

  * Fix expectations for matrix multiplications. Empty arrays now always produce empty arrays.

  # 0.1.5

  * Add numeric tests
  * Add floating point comparison with epsilon functions:
    * `epsilonExpect`
    * `epsilonFoldableExpect`
    * `epsilonMaybeEq`
    * `epsilonEq`
    * `epsilonEqDouble`
    * `epsilonEqFloat`


  # 0.1.4

  * Add `ArrDW`

  # 0.1.0

  * Initial release.
basic-deps:
  exceptions: -any
  scheduler: -any
  bytestring: -any
  unliftio: -any
  base: '>=4.9 && <5'
  data-default-class: -any
  hspec: -any
  massiv: '>=0.5.9 && <1'
  deepseq: -any
  QuickCheck: -any
  primitive: -any
  vector: -any
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.3.1
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.6.1
author: Alexey Kuleshevich
latest: 0.1.6.1
description-type: markdown
description: |+
  # massiv-test

  This package is designed for users of `massiv`, that would like to do some testing of
  their code, while reusing functionality that has already been written for testing `massiv`
  itsef. This library is still a work in progress, nevertheless it is at a fairly usable
  state. Below is a list of use case for this package.

  ## QuickCheck generators

  First and foremost this package provides `Arbitrary` and `CoArbitrary` instances for the
  relevant types available in `massiv`, as well as few extra handy `newtype` wrappers that
  can be very useful for writing property tests for libraries and applications that depends
  on `massiv`.

  ## Reusable spec

  Another important use case is for advanced users that came up with their own index types
  or array representations and would like to run a standard set of specs on their instance
  implementations. For example a custom `Index ix`, or `Mutable r ix e` instances can use a
  predefined collection of `hspec` specs and/or `QuickCheck` properties to validate their
  implementation.

  ## Test suite for `massiv`

  Internally `massiv-test` package contains all of the tests that are used on `massiv`. The
  whole test suite has been extracted out to make the `massiv` package lighter as well as to
  make the test functionality reusable, without impacting the dependency footprint of the
  user that does not need the testing functionlity.

  Because of this usecase, the major version of `massiv-test` is expected to increase with
  almost every release of `massiv`.

  ## Doctests

  Together with examples in haddock it is possible to describe various properties. Those
  examples and properties can be tested with doctests, but such properties can not be tested
  without QuickCheck generators readily available for import, for that reason `doctest` test
  section of `massiv` also depends on `massiv-test`.

  # More info

  For more info on `massiv` and related libraries refer to
  [README](https://github.com/lehins/massiv/blob/master/README.md) on github.


license-name: BSD-3-Clause
