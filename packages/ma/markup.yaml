all-versions:
- 3.1.0
- 4.0.0
- 4.0.1
- 4.0.2
- 4.0.3
- 4.0.4
- 4.1.0
- 4.2.0
author: Athan Clark
basic-deps:
  attoparsec-uri: '>=0.0.4'
  base: '>=4.8 && <5'
  blaze-html: '>=0'
  blaze-markup: '>=0'
  clay: '>=0'
  comonad: '>=0'
  lucid: '>=2.5'
  mmorph: '>=0'
  monad-control: '>=0'
  monad-logger: '>=0'
  mtl: '>=0'
  path: '>=0'
  path-extra: '>=0.2.0'
  resourcet: '>=0'
  text: '>=0'
  transformers-base: '>=0'
  urlpath: '>=9.0.0'
changelog: ''
changelog-type: ''
description: "[![MIT License](http://img.shields.io/badge/license-MIT-brightgreen.svg)](https://tldrlegal.com/license/mit-license)\n[![Hackage](http://img.shields.io/badge/hackage-0.0.3-brightgreen.svg)](https://hackage.haskell.org/package/markup)\n[![Stories
  in Ready](https://badge.waffle.io/athanclark/markup.png?label=ready&title=Ready)](https://waffle.io/athanclark/markup)\n\nmarkup\n======\n\n>
  **WARNING**: This project is in it's infancy, please don't expect it to work. \n>
  Thank you :)\n\nA generic interface to chunks of markup.\n\nIn this library, we
  try to ambiguate _types_ of markup via data types, namely \n`Image` and `JavaScript`
  as examples. From here, we can issue a call to \n`renderMarkup` on these abstract
  labels, which will return some markup wrapped \nin a monad - in our case, we've
  made a few monad readers to represent the \ndifferent ways a single idea can be
  deployed as markup.\n\nWe have three different deployment schemes - inline, hosted,
  and local. Inline \nmarkup simply tries to take the information in question and
  insert it inside the \nmarkup. Hosted markup simply takes the idea and expects it
  to be somewhere else, \npossibly hosted in a CDN. Local markup tries to utilize
  \n[urlpath](https://github.com/athanclark/urlpath) as the means of representing
  a \nlocal link (absolute, relative, and grounded methods are in another monad -
  \ninside the `HtmlT m ()` of lucid, in this case. Urlpath isn't supported for \nBlaze-html.)\n\n##
  Installation\n\n```bash\ncabal install markup\n```\n\n## Usage\n\nIt's a little
  awkward at the moment:\n\n```haskell\nimage' = renderMarkup Image :: Monad m =>
  HostedMarkupT m T.Text (Html ())\n\nimage = runHostedMarkupT image' \"foo.png\"\n\nλ>
  renderText image\n\n<img src=\"foo.png\">\n```\n\nWe could also overload the `run*`
  monad transformer actions of each deployment \nscheme, allowing for the decision
  to be made just with a type coersion. Maybe in \nv0.0.2 :)\n\nHere is the same example,
  going relative instead:\n\n```haskell\nimage' = renderMarkup Image :: (Monad m,
  Url UrlString AbsoluteUrl) => LocalMarkupT UrlString m (HtmlT AbsoluteUrl ())\n\nλ>
  (runUrlReader $ renderTextT $ runIdentity $ runLocalMarkupT image' $\n     \"foo.png\"
  <?> (\"key\",\"bar\")\n   ) \"example.com\"\n\n\"<img src=\\\"example.com/foo.png?key=bar\\\">\"\n```\n\n##
  How to run tests\n\n```\ncabal configure --enable-tests && cabal build && cabal
  test\n```\n\n## Contributing\n\nFork, PR, repeat.\n"
description-type: markdown
hash: a6ce6104543e74cb629b576be55fed7e20b2e019b55a9a3ec219b9dbe32fa93d
homepage: https://github.com/athanclark/markup#readme
latest: 4.2.0
license-name: BSD-3-Clause
maintainer: athan.clark@localcooking.com
synopsis: Abstraction for HTML-embedded content
test-bench-deps: {}
