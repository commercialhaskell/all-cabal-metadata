all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.1.0.0
- 0.1.0.1
- 0.1.1
- 0.1.1.1
- 0.2.0.0
- 0.2.1.0
author: Tony Day
basic-deps:
  base: '>=4.14 && <5'
  bytestring: '>=0.11.3 && <0.13'
  containers: '>=0.6 && <0.9'
  deepseq: '>=1.4 && <1.6'
  flatparse: '>=0.3.5 && <0.6'
  string-interpolate: '>=0.3 && <0.4'
  these: '>=1.1 && <1.3'
changelog: |
  0.2.1
  ===

  - added Data instances


  0.2.0
  ===

  - switched to Diff for testing round-trips
  - removed MarkupParse.Patch
  - renamed MarkupParse.FlatParse to MarkupParse.Internal.FlatParse and removed unused exports. Added non-stable note.
  - moved ParserWarn, runParser_ & runParserWarn to MarkupParse.
  - changed diff executable to markupparse-diff.

  0.1.1
  ===

  - fixed escape bug
  - bumped tasty & text upper bounds

  0.1.0
  ===

  - Added RenderStyle
  - rename: Warn <== Result
  - refactored Markup structure
  - created OpenTagType
  - rename: NameTag <== TagName
  - Element type synonym for Tree Token
  - suffixed parsers with a 'P'

  0.0.0
  ===

  Initial split away from chart-svg
changelog-type: markdown
description: "# markup-parse\n\n[![img](https://img.shields.io/hackage/v/markup-parse.svg)](https://hackage.haskell.org/package/markup-parse)\n[![img](https://github.com/tonyday567/markup-parse/actions/workflows/haskell-ci.yml/badge.svg)](https://github.com/tonyday567/markup-parse/actions/workflows/haskell-ci.yml)\n\n`markup-parse`
  parses and prints a subset of common XML & HTML structured data, from and to strict
  bytestrings\n\n\n# Development\n\n    :r\n    :set -Wno-type-defaults\n    :set
  -Wno-name-shadowing\n    :set -XOverloadedStrings\n    :set -XTemplateHaskell\n
  \   :set -XQuasiQuotes\n    import Control.Monad\n    import MarkupParse\n    import
  MarkupParse.Internal.FlatParse\n    import Data.ByteString qualified as B\n    import
  Data.ByteString.Char8 qualified as C\n    import Data.Map.Strict qualified as Map\n
  \   import Data.Function\n    import FlatParse.Basic hiding (take)\n    import Data.String.Interpolate\n
  \   import Control.Monad\n    bs <- B.readFile \"other/line.svg\"\n    C.length
  bs\n\n    [1 of 2] Compiling MarkupParse.Internal.FlatParse ( src/MarkupParse/Internal/FlatParse.hs,
  interpreted ) [Flags changed]\n    Ok, two modules reloaded.\n    7554\n\n\n# Main
  Pipeline types\n\n    :t tokenize Html\n    :t gather Html\n    :t normalize\n    :t
  degather\n    :t detokenize Html\n    :t tokenize Html >=> gather Html >=> (normalize
  >>> pure) >=> degather Html >=> (fmap (detokenize Html) >>> pure)\n\n    tokenize
  Html :: ByteString -> Warn [Token]\n    gather Html :: [Token] -> Warn Markup\n
  \   normalize :: Markup -> Markup\n    degather :: Standard -> Markup -> Warn [Token]\n
  \   detokenize Html :: Token -> ByteString\n    tokenize Html >=> gather Html >=>
  (normalize >>> pure) >=> degather Html >=> (fmap (detokenize Html) >>> pure)\n      ::
  ByteString -> These [MarkupWarning] [ByteString]\n\n\n## tests\n\n\n### Round trip
  equality\n\n    m = markup_ Xml bs\n    m == (markup_ Xml $ markdown_ Compact Xml
  m)\n\n    True\n\n\n### wiki diff test debug\n\n    bs <- B.readFile \"other/Parsing
  - Wikipedia.html\"\n    m = markup_ Html bs\n    m == (markup_ Html $ markdown_
  Compact Html m)\n\n    True\n\n\n# Reference\n\n[HTML Standard](https://html.spec.whatwg.org/#toc-syntax)\n\n[Are
  (non-void) self-closing tags valid in HTML5? - Stack Overflow](https://stackoverflow.com/questions/3558119/are-non-void-self-closing-tags-valid-in-html5)\n\n[Extensible
  Markup Language (XML) 1.0 (Fifth Edition)](https://www.w3.org/TR/xml/)\n\n\n## Prior
  Art\n\n[html-parse](https://hackage.haskell.org/package/html-parse) is an attoparsec-based
  parser for HTML. The HTML parsing here has referenced this parsing logic for HTML
  elements.\n\n[blaze-markup](https://hackage.haskell.org/package/blaze-markup) &
  [lucid](https://hackage.haskell.org/package/lucid) are HTML DSLs and printers, but
  not parsers.\n\n[xeno](https://hackage.haskell.org/package/xeno) is an &ldquo;event-based&rdquo;
  XML parser with a more complicated base markup type.\n\n[XMLParser](https://hackage.haskell.org/package/XMLParser)
  & [hexml](https://hackage.haskell.org/package/hexml) are parsec-based parsers.\n\n\n#
  Performance\n\n\n## perf\n\nThe [perf](https://hackage.haskell.org/package/perf)
  library has been used to measure performance of the library.\n\n    Running 1 benchmarks...\n
  \   Benchmark markup-parse-speed: RUNNING...\n    label1          label2          old
  result      new result      change\n    \n    gather          time            9.33e4
  \         7.73e4          improvement\n    html-parse tokenstime            1.21e6
  \         1.17e6\n    html-parse tree time            6.61e4          7.59e4          slightly-degraded\n
  \   markdown        time            3.75e5          3.92e5\n    markup          time
  \           4.72e5          5.20e5          slightly-degraded\n    normalize       time
  \           2.80e5          3.04e5          slightly-degraded\n    tokenize        time
  \           8.59e5          8.67e5\n    Benchmark markup-parse-speed: FINISH\n\n\n##
  Profiling\n\nProfiling is used to aid library development:\n\n    cabal configure
  --enable-library-profiling --enable-executable-profiling -fprof-auto -fprof --write-ghc-environment-files=always
  --enable-benchmarks -O2\n\ncabal.project.local\n\n    write-ghc-environment-files:
  always\n    ignore-project: False\n    flags: +prof +prof-auto\n    library-profiling:
  True\n    executable-profiling: True\n\nProfiling slow the main functions significantly:\n\n
  \   ./app/speed -n 1000 --best -c +RTS -s -p -hc -l -RTS\n    label1              label2
  \             old_result          new_result          status\n    \n    gather              time
  \               2.08e4              3.01e4              degraded\n    html-parse
  tokens   time                4.70e5              1.72e6              degraded\n
  \   html-parse tree     time                2.30e4              3.85e4              degraded\n
  \   markdown            time                3.51e5              5.70e5              degraded\n
  \   markup              time                2.10e5              1.05e6              degraded\n
  \   normalize           time                8.43e4              1.90e5              degraded\n
  \   tokenize            time                1.94e5              1.02e6              degraded\n
  \      4,520,989,296 bytes allocated in the heap\n       2,668,887,592 bytes copied
  during GC\n         287,122,272 bytes maximum residency (21 sample(s))\n           1,572,000
  bytes maximum slop\n                 560 MiB total memory in use (0 MiB lost due
  to fragmentation)\n    \n                                         Tot time (elapsed)
  \ Avg pause  Max pause\n      Gen  0      1073 colls,     0 par    0.471s   0.479s
  \    0.0004s    0.0024s\n      Gen  1        21 colls,     0 par    2.428s   2.575s
  \    0.1226s    0.3303s\n    \n      INIT    time    0.007s  (  0.008s elapsed)\n
  \     MUT     time    2.142s  (  1.945s elapsed)\n      GC      time    1.904s  (
  \ 2.071s elapsed)\n      RP      time    0.000s  (  0.000s elapsed)\n      PROF
  \   time    0.995s  (  0.982s elapsed)\n      EXIT    time    0.026s  (  0.000s
  elapsed)\n      Total   time    5.074s  (  5.006s elapsed)\n    \n      %GC     time
  \      0.0%  (0.0% elapsed)\n    \n      Alloc rate    2,110,654,040 bytes per MUT
  second\n    \n      Productivity  61.8% of total user, 58.5% of total elapsed\n\n"
description-type: markdown
hash: 655c449b5d5e19a78d257a99b884c91af669a320cab17e5643fde80068b2e2b9
homepage: https://github.com/tonyday567/markup-parse#readme
latest: 0.2.1.0
license-name: BSD-3-Clause
maintainer: tonyday567@gmail.com
synopsis: A markup parser.
test-bench-deps:
  Diff: '>=1.0 && <1.1'
  base: '>=4.14 && <5'
  bytestring: '>=0.11.3 && <0.13'
  doctest-parallel: '>=0.3 && <0.5'
  markup-parse: '>=0'
  tasty: '>=1.2 && <1.6'
  tasty-golden: '>=2.3.1.1 && <2.4'
