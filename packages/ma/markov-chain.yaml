homepage: http://code.haskell.org/~thielema/markov-chain/
changelog-type: ''
hash: 8fd3ff1c40ba5463efe4f74608f5989d12a724e7bdaf3c3b1487cb696fc31783
test-bench-deps: {}
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Markov Chains for generating random sequences with a user definable behaviour.
changelog: ''
basic-deps:
  base: '>=2 && <5'
  containers: '>=0.1 && <1.0'
  transformers: '>=0.0.1 && <0.7'
  random: '>=1.0 && <2.0'
all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.3.1
- 0.0.3.2
- 0.0.3.3
- 0.0.3.4
author: Henning Thielemann <haskell@henning-thielemann.de>
latest: 0.0.3.4
description-type: haddock
description: |-
  This library can be used to generate random sequences of anything
  with a behaviour that is adapted to some training data.
  Input a marketing text or a speech and
  recompose it to another arbitrary text of this sort.
  Input a dictionary of person names and create new names.
  Input a sequence of notes and get out a new melody.
  Input a set of Haskell modules and generate ...
  nice idea but the result will certainly have neither correct syntax nor types.
  I think, it's a good thing about Haskell, that you cannot fool it so easily.
  The idea is very simple:
  The algorithm analyses your input\/training data
  with respect to how likely an @a@ or @e@ follows the letters @r@ and @e@.
  Then on recomposition it chooses subsequent letters randomly
  according to the frequencies found in the training data.
  This library is well suited for /bull-shit generators/.
license-name: LicenseRef-GPL
