homepage: https://code.mathr.co.uk/mandulia
changelog-type: ''
hash: f0e4f653451867582160e542d7b93d53134befc5f397c7fa1f0b77deb2a1830c
test-bench-deps: {}
maintainer: claude@mathr.co.uk
synopsis: A zooming visualisation of the Mandelbrot Set as many Julia Sets.
changelog: ''
basic-deps:
  bytestring: -any
  GLUT: '>=2.2'
  base: '>=4.6 && <5'
  time: -any
  filepath: -any
  array: -any
  containers: '>=0.5'
  hslua: '>=0.2 && <0.4'
  directory: -any
all-versions:
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- 0.8.0.1
author: Claude Heiland-Allen
latest: 0.8.0.1
description-type: text
description: |
  Mandulia
  ========

  Mandelbrot/Julia set explorer.


  Invocation
  ----------

  Multi-core CPU with lots of RAM recommended:

      mandulia configuration

  Currently there is one preset configurations available:
  'main' -- keyboard navigation with randomized attract mode.

  To render videos (see below):

      mandulia configuration |
      ppmtoy4m -S444 -F25:1 |
      ffmpeg2theora -v 8 -f yuv4mpegpipe -o mandulia.ogv -


  Controls
  --------

  'main' defines the following key bindings:

  Escape   -- quit
  F11      -- toggle full screen
  a        -- enter attract mode immediately
  r        -- record for 10 minutes (assuming 25fps)
  s        -- record for 1 frame (aka screenshot)

  Note that recording is via PPM images on 'stdout', so to avoid flooding
  your terminal with binary data be sure to redirect it somewhere else.

  As a side-effect, the following count as 'activity':

  PageUp   -- zoom in
  PageDown -- zoom out
  cursors  -- move around
  End      -- stop moving
  Home     -- return to base
  [ ]      -- change speed
  #        -- reset speed
  { }      -- change weight
  ~        -- reset weight

  Attract mode is entered after 1 minute (assuming 25fps) of inactivity,
  and left on any activity.

  Other configurations may differ, check their sources for details.


  Scripting
  ---------

  Mandulia can be reconfigured without recompilation, using Lua scripts.
  The first (non RTS) argument to 'mandulia' will be executed on startup.
  First it will try to load it as a file, then via Lua's 'require()'.
  See 'defaults.lua' to see the available interface, and 'main.lua' for an
  example of keyboard navigation.  Note that some variables only take
  effect on startup, and later modification will be ignored.
license-name: GPL-3.0-only
