all-versions:
- 0.1.5.1
- 0.1.6.2
- 0.1.6.4
- 0.1.6.7
author: Alexandr Sadovnikov
basic-deps:
  aeson: '>=1.4.7.0 && <1.5'
  array: '>=0.5.4.0 && <0.6'
  base: '>=4.7 && <5'
  bimap: '>=0.4.0 && <0.5'
  containers: '>=0.6.2.1 && <0.7'
  ilist: '>=0.4.0.0 && <0.5'
  lens: '>=4.18.1 && <4.19'
  linear: '>=1.20.9 && <1.21'
  matrix: '>=0.3.6.1 && <0.4'
  mtl: '>=2.2.2 && <2.3'
  random: '>=1.1 && <1.2'
  vector: '>=0.12.1.2 && <0.13'
changelog: ''
changelog-type: ''
description: "# Math.Grads\n\n[![Travis](https://img.shields.io/travis/biocad/math-grads.svg)](https://travis-ci.org/biocad/math-grads)\n[![hackage](https://img.shields.io/hackage/v/math-grads.svg)](https://hackage.haskell.org/package/math-grads)\n[![hackage-deps](https://img.shields.io/hackage-deps/v/math-grads.svg)](https://hackage.haskell.org/package/math-grads)\n\nMath.Grads
  is library that provides graph-like data structures\nand various useful algorithms
  for analysis of these data structures.\n\nIts main feature is that all of provided
  type classes, data structures and \nfunctions are written in most abstract way possible
  to meet different demands\nin functionality.\n\n## Data Structures\n\n### Graph\n\nGraph
  is a type class that upon being instantiated gives data structure\nproperties of
  graph-like object.\n\n### GenericGraph\n\nGenericGraph is a data structure that
  describes undirected graphs and is\nparametrized by type of graph's vertices and
  type of graph's edges. \nSo it's really up to the developer what will be stored
  in Generic Graph's vertices\nand edges.\n\nGenericGraph is honest instance of Graph,
  therefore it can be used in all functions\nthat require their parameters to be Graphs.\n\n##
  Algorithms\n\n### Ullmann's subgraph isomorphism algorithm\n\nMath.Grads contains
  implementation of Ullmann's subgraph isomorphism \n[algorithm](https://www.cs.bgu.ac.il/~dinitz/Course/SS-12/Ullman_Algorithm.pdf).\nThere
  are several functions that one can find helpful in order to check two graphs\nfor
  isomorphism or subgraph isomorphism: \n\n* `isIso` checks whether two graphs are
  isomorphic;\n* `isIsoSub` checks whether second graph has subgraph isomorphic to
  the first one;\n* `getIso` finds matching of vertices of first graph to vertices
  of subgraph in second graph that\nis isomorphic to the first graph;\n* `getMultiIso`
  finds all such matchings.\n\nIn order for these functions to work graphs that are
  being passed to them have to also\nbe instances of `GComparable` type class.\n\nDefinition
  of this class is as follows:\n\n```haskell\nclass (Graph g1, Graph g2) => GComparable
  g1 v1 e1 g2 v2 e2 where\n  vComparator :: g1 v1 e1 -> g2 v2 e2 -> VComparator v1
  v2\n  eComparator :: g1 v1 e1 -> g2 v2 e2 -> EComparator e1 e2\n\n-- | Function
  that checks whether two vertices are identical.\ntype VComparator v1 v2 = VertexIndex
  -> VertexIndex -> Bool\n\n-- | Function that checks whether two edges are identical.\ntype
  EComparator e1 e2 = GraphEdge e1 -> GraphEdge e2 -> Bool\n```\n\nSo, basically,
  if two `Graph`s are `GComparable` with each other there exist\ntwo functions that
  are responsible for establishing equality between vertices and edges\nof such Graphs.\n\nHere
  Math.Grads gets its chance to shine, because developer isn't constrained to \nwhat
  we (as developers of Math.Grads) thought would be an appropriate way for comparing
  \nvertices and edges of your data structure. We give the developers opportunity
  to define \nsuch relations for their data structures themselves. \n\nMaybe you want
  to know surroundings of two vertices in order to compare them, maybe \nyou don't
  â€” the choice is yours!\n\n### Algorithm for calculation of planar graph's coordinates\n\nMath.Grads
  provides algorithm for calculation of coordinates of planar graphs.\nIts main idea
  is that most such graphs used in practice can be represented \nas union of systems
  of conjugated cycles and paths that connect these systems.\n\nSo, if you know, that
  your planar graph looks just like this \n(for example, small molecules from chemistry
  perfectly fit \ninto the definition of graphs that can be drawn correctly by the
  algorithm), \nyou may find `getCoordsForGraph` function quite useful.\n\nAlgorithm
  first draws systems of conjugated cycles, then draws paths between them,\nunites
  systems with path and using random generator samples different conformations\nof
  resulting graph until conformation without self-intersections (that's why graph
  needs\nto be planar) is found.\n\nOnce again, in order for you graph to be drawn
  you need to make it an instance of\nspecial type class:\n\n```haskell\nclass Graph
  g => Drawable g v e where\n  edgeFixator :: g v e -> EdgeFixator e\n  edgeFixator
  = const $ (,) []\n  \ntype EdgeFixator e = CoordMap -> (EdgeList e, CoordMap)\n```\n\n`edgeFixator`
  is function that given `Graph` returns other function that somehow transforms \ncoordinates
  of graph before sampling and states, which edges of graph shouldn't change their
  coordinates\nduring sampling ('fixates' them, if you will). As you can see, `edgeFixator`
  has default implementation,\nso if you don't want such functionality, just instantiate
  your graph as `Drawable` without\ngetting into such details.\n\n### Miscellaneous
  functions on graphs\n\nMath.Grads also provides all other kinds of graph algorithms
  that you might find useful:\nyour depth-first searches, breadth-first searches,
  functions to find cycles in graphs and so on.\n"
description-type: markdown
hash: 96ae5f4170a9640fad31c9234e78aa9c1c1137265d6b8e985b15becfa671d330
homepage: https://github.com/biocad/math-grads#readme
latest: 0.1.6.7
license-name: BSD-3-Clause
maintainer: artemkondyukov, AlexKaneRUS, vks4git
synopsis: Library containing graph data structures and graph algorithms
test-bench-deps:
  array: '>=0.5.4.0 && <0.6'
  base: '>=4.13.0.0 && <4.14'
  containers: '>=0.6.2.1 && <0.7'
  hspec: '>=2.7.1 && <2.8'
  math-grads: '>=0'
  random: '>=1.1 && <1.2'
