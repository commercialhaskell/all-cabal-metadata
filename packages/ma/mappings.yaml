homepage: https://github.com/jcranch/mapping#readme
changelog-type: markdown
hash: 5340c08ad311fc4d90562feebc674ca20746fdd0c436bd8c791cd25109ec35c4
test-bench-deps:
  mappings: -any
  base: '>=4.16 && <4.20'
  indexed-traversable: '>=0.1.1 && <0.2'
  hspec: ==2.11.*
  cond: '>=0.5.1 && <0.6'
  containers: '>=0.6.6 && <0.8'
  formatting: '>=7.0.0 && <7.3'
  partialord: '>=0.0.2 && <0.1'
maintainer: j.d.cranch@sheffield.ac.uk
synopsis: Types which represent functions k -> v
changelog: |
  ## [0.1.0.0] - 2023-11-09

  * `baseLength` and `decisionLength` functions
  * rewritten the counting functions

  ## [0.0.1.0] - 2023-11-05

  Initial version
basic-deps:
  mappings: -any
  base: '>=4.16 && <4.20'
  indexed-traversable: '>=0.1.1 && <0.2'
  cond: '>=0.5.1 && <0.6'
  containers: '>=0.6.6 && <0.8'
  formatting: '>=7.0.0 && <7.3'
  partialord: '>=0.0.2 && <0.1'
all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.1.0.0
- 0.2.0.0
author: James Cranch
latest: 0.2.0.0
description-type: markdown
description: |+
  # Mappings

  ## What's it do?

  This package does two jobs:

  * It offers a general typeclass [`Mapping`](src/Data/Mapping.hs) for
    types which represent functions `k -> v` (for fixed `k`, but
    arbitrary ordered `v`).

    There are some fairly straightforward examples which build up
    mappings where `k` is `Either`, or a pair, or `Maybe`, or `Bool`.

  * Three less trivial implementations are provided:

      * [Decision diagrams](src/Data/Mapping/Decision.hs), with nodes
         which may themselves be an arbitrary `Mapping` (there is some
         code for viewing these in the `examples` directory);

      * [Piecewise constant maps](src/Data/Mapping/Piecewise.hs) on an
         ordered domain `k`;

      * [Maps equipped with a default value](src/Data/Mapping/MapWithDefault.hs).


  ## Why did I bother?

  The aim is to use decision diagrams with nodes that are piecewise
  constant maps to store monomials for Grobner basis algorithms.

license-name: BSD-3-Clause
