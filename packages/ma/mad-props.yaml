all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: Chris Penner
basic-deps:
  MonadRandom: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0'
  lens: '>=0'
  logict: '>=0'
  mad-props: '>=0'
  mtl: '>=0'
  psqueues: '>=0'
  random: '>=0'
  random-shuffle: '>=0'
  raw-strings-qq: '>=0'
  transformers: '>=0'
changelog: |
  # Changelog for wave-function-collapse

  ## Unreleased changes
changelog-type: markdown
description: "# Mad Props\n\n[Hackage & Docs](http://hackage.haskell.org/package/mad-props)\n\nMad
  props is a simple generalized propagator framework. This means it's pretty good
  at expressing and solving generalized [constraint satisfaction problems](https://en.wikipedia.org/wiki/Constraint_satisfaction_problem).\n\nNote
  that `mad-props` doesn't use lattice filters for propagation, nor does it yet support
  dynamic choice of propagator elements (though you can specify choice ordering through
  the container type you choose). Those things are more a bit more complicated.\n\nThere
  are many other constraint solvers out there, probably most of them are faster than
  this one, but for those who like the comfort and type-safety of working in Haskell,
  I've gotcha covered.\n\nWith other constraint solvers it can be a bit of a pain
  to express your problem; you either need to compress your problem down to relations
  between boolean variables, or try to cram your problem into their particular format.
  Mad Props uses a Monadic DSL for expressing the variables in your problem and the
  relationships between them, meaning you can use normal Haskell to express your problem.\n\nIt's
  still unfinished and undergoing rapid iteration and experimentation, so I wouldn't
  base any major projects on it yet.\n\n## Example: Sudoku\n\nWe'll write a quick
  Sudoku solver using Propagators.\n\nHere's a problem which Telegraph has claimed
  to be [\"the world's hardest Sudoku\"](https://www.telegraph.co.uk/news/science/science-news/9359579/Worlds-hardest-sudoku-can-you-crack-it.html).
  Let's see if we can crack it.\n\n```haskell\nhardestProblem :: [String]\nhardestProblem
  = tail . lines $ [r|\n8........\n..36.....\n.7..9.2..\n.5...7...\n....457..\n...1...3.\n..1....68\n..85...1.\n.9....4..|]\n```\n\nSudoku
  is a constraint satisfaction problem, the \"constraints\" are that each of the numbers
  1-9 are represented in each row, column and 3x3 grid. \n\n```haskell\ntxtToBoard
  :: [String] -> [[S.Set Int]]\ntxtToBoard = (fmap . fmap) possibilities\n  where\n
  \   possibilities :: Char -> S.Set Int\n    possibilities '.' = S.fromList [1..9]\n
  \   possibilities a = S.fromList [read [a]]\n\nhardestBoard :: [[S.Set Int]]\nhardestBoard
  = txtToBoard hardestProblem\n```\n\nWe've now got our problem as a list of rows
  of 'cells', each cell is a set containing the possible numbers for that cell.\n\nWe
  need to express the constraint that each 'region' (i.e. row, column and 'block')
  can only have one of each number in them. We'll write some helper function for collecting
  the regions of the puzzle:\n\n```haskell\nrowsOf, colsOf, blocksOf :: [[a]] -> [[a]]\nrowsOf
  = id\ncolsOf = transpose\nblocksOf = chunksOf 9 . concat . concat . fmap transpose
  . chunksOf 3 . transpose\n```\n\nNow we can worry about telling the system about
  our constraints. \n\nWe can now introduce the constraints of Sudoku as relations
  between cells. The cells in each region are related to one other in the sense that
  **their values must be disjoint**. No two cells in each quadrant can have the same
  value. \n\n```haskell\n-- | Given a board of 'PVar's, link the appropriate cells
  with 'disjoint' constraints\nlinkBoardCells :: [[PVar S.Set Int]] -> Prop ()\nlinkBoardCells
  xs = do\n    let rows = rowsOf xs\n    let cols = colsOf xs\n    let blocks = blocksOf
  xs\n    for_ (rows <> cols <> blocks) $ \\region -> do\n        let uniquePairings
  = [(a, b) | a <- region, b <- region, a /= b]\n        for_ uniquePairings $ \\(a,
  b) -> constrain a b disj\n  where\n    disj :: Ord a => a -> S.Set a -> S.Set a\n
  \   disj x xs = S.delete x xs\n```\n\nThis function introduces a few new types,
  namely `Prop` and `Pvar`. We'll show how `PVar`s are actually created soon, but
  the gist of this function is that we map over each 'region' and relate every variable
  to every other one.\n\n`Prop` is a monad which allows us to create and link `PVar`s
  together. It keeps track of the constraints on all of our variables and will eventually
  build a graph that the library uses to solve the problem.\n\nWe call the `constrain`
  function to state that no cell pairing within a region should have the same number.\n\n`constrain`
  accepts two `PVar`s and a function, the function takes a 'choice' from the first
  variable and uses it to constrain the 'options' from the second. In this case, if
  the first variable is fixed to a specific value we 'propagate' by removing all matching
  values from the other variable's pool, you can see the implementation of the `disj`
  helper above. The information about this constraint is stored inside the `Prop`
  monad.\n\nSet disjunction is symmetric, propagators in general are not, so we'll
  need to 'constrain' in each direction. Luckily our loop will process each pair twice,
  so we'll run this once in each direction.\n\nHere's the real signature in case you're
  curious: \n\n```haskell\nconstrain :: Monad m\n          => PVar f a\n          ->
  PVar g b\n          -> (a -> g b -> g b)\n          -> PropT m ()\n```\n\nWe're
  almost there; we've got a way to constrain a board of `PVar`s, but we need to make
  the board of `PVar`s somehow!\n\nThis is pretty easy; we can make a `PVar` by calling
  `newPVar` and passing it a container full of possible options the variable could
  be. We'll convert our `[[S.Set Int]]` into `[[PVar S.Set Int]]` by traversing the
  structure using `newPVar`.\n\n```haskell\n-- | Given a sudoku board, apply the necessary
  constraints and return a result board of 'PVar's.\nconstrainBoard :: [[S.Set Int]]->
  Prop [[PVar S.Set Int]]\nconstrainBoard board = do\n    vars <- (traverse . traverse)
  newPVar board\n    linkBoardCells vars\n    return vars\n```\n\nHere's the signature
  of `newPVar` in case you're curious:\n\n```haskell\nnewPVar :: (Monad m, Foldable
  f, Typeable f, Typeable a) \n        => f a \n        -> PropT m (PVar f a)\n```\n\nNow
  that we've got our problem set up we need to execute it!\n\n```haskell\n-- Solve
  a given sudoku board and print it to screen\nsolvePuzzle :: [[S.Set Int]] -> IO
  ()\nsolvePuzzle puz = do\n    -- We know it will succeed, but in general you should
  handle failure safely\n    let Just results = solve (fmap . fmap) $ constrainBoard
  puz\n    putStrLn $ boardToText results\n```\n\n`solvePuzzle` will print a solution
  for any valid puzzle you pass it. It accepts a puzzle, builds and constrains the
  cells, then calls `solve` which will find a valid solution for the constraints we
  provided if possible. We pass it a 'finalizer' function which accepts a function
  for resolving any `PVar` to its 'solved' result. In our case we just use `fmap .
  fmap` to map the resolver over every PVar in the board returned from `constrainBoard`.
  If all went well we'll have the solution of each cell! Then we'll print it out.\n\nUnfortunately
  `solve` has a bit of a complicated signature, there are simpler versions, but unfortunately
  they're not possible until GHC supports proper ImpredicativeTypes.\n\n```haskell\nsolve
  :: forall a r.\n        -- A finalizer which accepts a PVar 'resolver' as an argument\n
  \       -- alongside the result of the Prop setup, and returns some result\n        ((forall
  f x. PVar f x -> x) -> a -> r)\n      -> Prop a\n      -> (Maybe r)\n```\n\nWe can
  plug in our hardest sudoku and after a second or two we'll print out the answer!\n\n```haskell\n>>>
  solvePuzzle hardestBoard\n812753649\n943682175\n675491283\n154237896\n369845721\n287169534\n521974368\n438526917\n796318452\n```\n\nYou
  can double check it for me, but I'm pretty sure that's a valid solution!\n\n## Example:
  N-Queens\n\nJust for fun, here's the N-Queens problem\n\n```haskell\n{-# LANGUAGE
  ScopedTypeVariables #-}\n{-# LANGUAGE ViewPatterns #-}\nmodule Examples.NQueens
  where\n\nimport qualified Data.Set as S\nimport Props\nimport Data.Foldable\nimport
  Data.List\n\n-- | A board coordinate\ntype Coord = (Int, Int)\n\n-- | Given a number
  of queens, constrain them to not overlap\nconstrainQueens :: Int -> Prop [PVar S.Set
  Coord]\nconstrainQueens n = do\n    -- All possible grid locations\n    let locations
  = S.fromList [(x, y) | x <- [0..n - 1], y <- [0..n - 1]]\n    -- Each queen could
  initially be placed anywhere\n    let queens = replicate n locations\n    -- Make
  a PVar for each queen's location\n    queenVars <- traverse newPVar queens\n    --
  Each pair of queens must not overlap\n    let queenPairs = [(a, b) | a <- queenVars,
  b <- queenVars, a /= b]\n    for_ queenPairs $ \\(a, b) -> require (\\x y -> not
  $ overlapping x y) a b\n    return queenVars\n\n-- | Check whether two queens overlap
  with each other (i.e. could kill each other)\noverlapping :: Coord -> Coord -> Bool\noverlapping
  (x, y) (x', y')\n  -- Same Row\n  | x == x' = True\n  -- Same Column\n  | y == y'
  = True\n  -- Same Diagonal 1\n  | x - x' == y - y' = True\n  -- Same Diagonal 2\n
  \ | x + y == x' + y' = True\n  | otherwise = False\n\n-- | Print an nQueens puzzle
  to a string.\nshowSolution :: Int -> [Coord] -> String\nshowSolution n (S.fromList
  -> qs) =\n    let str = toChar . (`S.member` qs) <$> [(x, y) | x <- [0..n-1], y
  <- [0..n-1]]\n     in unlines . chunksOf n $ str\n  where\n    toChar :: Bool ->
  Char\n    toChar True = 'Q'\n    toChar False = '.'\n\n    chunksOf :: Int -> [a]
  -> [[a]]\n    chunksOf n = unfoldr go\n      where\n        go [] = Nothing\n        go
  xs = Just (take n xs, drop n xs)\n\n-- | Solve and print an N-Queens puzzle\nnQueens
  :: Int -> IO ()\nnQueens n = do\n    let Just results = solve fmap (constrainQueens
  n)\n    putStrLn $ showSolution n results\n\n-- | Solve and print all possible solutions
  of an N-Queens puzzle\n-- This will include duplicates.\nnQueensAll :: Int -> IO
  ()\nnQueensAll n = do\n    let results = solveAll (constrainQueens n)\n    traverse_
  (putStrLn . showSolution n) results\n```\n\n## Performance\n\nThis is a generalized
  solution, so performance suffers in relation to a tool built for the job (e.g. It's
  not as fast as dedicated Sudoku solvers); but it does \"pretty well\".\n"
description-type: markdown
hash: 0c482eef92c3c3e29edca207b32b220c870bbc61090ed315933a27179b1529b0
homepage: https://github.com/ChrisPenner/mad-props#readme
latest: 0.2.1.0
license-name: BSD-3-Clause
maintainer: christopher.penner@gmail.com
synopsis: Monadic DSL for building constraint solvers using basic propagators.
test-bench-deps: {}
