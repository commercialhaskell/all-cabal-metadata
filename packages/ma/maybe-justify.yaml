all-versions:
- 0.1.0.0
author: taksuyu
basic-deps:
  base: '>=4 && <5'
changelog: ''
changelog-type: ''
description: |
  # Maybe you just need justify?

  We've all used `Maybe` in a control flow

  ```haskell
  if f x then Just x else Nothing
  ```

  but why not have

  ```haskell
  justify id f x
  ```

  multiple constraints?

  ```haskell
  justify id (\a -> f a && g a) x
  ```

  want a silly `id` for `Maybe`?

  ```haskell
  justify fromJust isJust (Just x)
  ```

  This seems like such a no brainer that I'm surprised it isn't in
  `Data.Maybe` so I'm proposing that it should be and this library is
  just the start.

  ## What about licensing issues?

  Since I know there will be some talk about licensing, I already took
  the step and used the unlicense. If that isn't enough, just send a
  pull request changing it to an appropriate license and I'll accept.

  ## What do I do while this isn't in Data.Maybe?

  Then just go ahead and pull in `maybe-justify` from cabal!
description-type: markdown
hash: 9fbb639e3924a5c72bf813caece89c1529039fab3431fa28731dae96b52aaa07
homepage: ''
latest: 0.1.0.0
license-name: LicenseRef-PublicDomain
maintainer: tak@ispabuse.org
synopsis: Simple higher order function for Maybe
test-bench-deps:
  base: '>=0'
  maybe-justify: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
