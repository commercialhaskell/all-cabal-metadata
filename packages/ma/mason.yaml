all-versions:
- '0'
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
author: Fumiaki Kinoshita
basic-deps:
  array: '>=0'
  base: '>=4.12.0.0 && <5'
  bytestring: '>=0'
  ghc-prim: '>=0'
  network: '>=2.7 && <3.2'
  text: '>=0'
changelog: "## 0.2.5\r\n\r\n* Supported GHC 9.2.1\r\n\r\n## 0.2.4\r\n\r\n* Generalised
  the argument `intersperse`, `unlines`, `unwords` from a list to any `Foldable`\r\n*
  Supported GHC 9.0.1\r\n\r\n## 0.2.3\r\n\r\n* Added `intDecPadded`\r\n* Exported
  backend types: `StrictByteStringBackend`, `LazyByteStringBackend` and `BufferedIOBackend`\r\n\r\n##
  0.2.2\r\n\r\n* Added `withPopper` and `toStreamingBody`\r\n* Added `viaShow`\r\n*
  Added `intersperse`, `unwords` and `unlines`\r\n* Optmised the internal representation\r\n\r\n##
  0.2.1\r\n\r\n* Added `Mason.Builder.Compat`\r\n\r\n## 0.2\r\n\r\n* Added `doubleFixed`,
  `doubleSI` and `doubleExp`\r\n* Added `textUtf8`\r\n* Added `prefixVarInt`, `wordVLQ`
  and `intVLQ`\r\n* Renamed `padded` and `zeroPadded` to `paddedBoundedPrim` and `zeroPaddedBoundedPrim`
  respectively\r\n* Added `Mason.Builder.Dynamic`\r\n\r\n## 0 -- 2019-12-05\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n"
changelog-type: markdown
description: "mason: alacritous builder library\r\n====\r\n\r\n[![Build Status](https://travis-ci.com/fumieval/mason.svg?branch=master)](https://travis-ci.com/fumieval/mason)\r\n[![Hackage](https://img.shields.io/hackage/v/mason)](https://hackage.haskell.org/package/mason)\r\n\r\nmason
  is a builder & IO library.\r\n\r\n* __Fast__: much faster than bytestring's Builder.\r\n*
  __Extensible__: Builders can be consumed in a user-defined way.\r\n* __Hackable__:
  Low-level APIs are exposed. It's easy to plug in even pointer-level operations.\r\n\r\n`Mason.Builder`
  has API mostly compatible with `Data.ByteString.Builder` but there are some additions
  to the original API:\r\n\r\n* `toStrictByteString` produces a strict `ByteString`
  directly.\r\n* `hPutBuilderLen` writes a builder to a handle and returns the number
  of bytes.\r\n* `sendBuilder` sends the content of `Builder` over a socket.\r\n*
  `withPopper` turns a builder into http-client's[GivesPopper](http://hackage.haskell.org/package/http-client-0.7.2.1/docs/Network-HTTP-Client.html#t:GivesPopper)\r\n*
  `toStreamingBody` creates wai's [StreamingBody](http://hackage.haskell.org/package/wai-3.2.2.1/docs/Network-Wai.html#t:StreamingBody)\r\n\r\nUsage\r\n----\r\n\r\nReplace
  `Data.ByteString.Builder` with `Mason.Builder`. Note that if you have `Builder`
  in the type signature, you'll need `RankNTypes` extensions because of the design
  explained below. Alternatively, you can also import `Mason.Builder.Compat` which
  has an API almost compatible with `Data.ByteString.Builder`.\r\n\r\nPerformance\r\n----\r\n\r\nAs
  long as the code is optimised, mason's builder can be very fast (twice or more as
  bytestring). Make sure that functions returning `Builder`s are well inlined.\r\n\r\nSerialisation
  of JSON-like structure:\r\n\r\n```\r\nmason/hPutBuilder                        mean
  274.7 μs  ( +- 49.40 μs  )\r\nfast-builder/hPutBuilder                 mean 399.9
  μs  ( +- 76.05 μs  )\r\nbytestring/hPutBuilder                   mean 335.1 μs  (
  +- 86.96 μs  )\r\nmason/toStrictByteString                 mean 106.6 μs  ( +- 6.680
  μs  )\r\nfast-builder/toStrictByteString          mean 254.8 μs  ( +- 31.64 μs  )\r\nbytestring/toLazyByteString
  \             mean 283.3 μs  ( +- 24.26 μs  )\r\nmason/toLazyByteString                   mean
  127.2 μs  ( +- 25.86 μs  )\r\nfast-builder/toLazyByteString            mean 249.0
  μs  ( +- 25.60 μs  )\r\nbytestring/toLazyByteString              mean 263.4 μs  (
  +- 9.401 μs  )\r\n```\r\n\r\nIn the same benchmark application, the allocation footprint
  of mason is feathery.\r\n\r\n```\r\ntoStrictByteString\r\nmason           291,112
  \   0\r\nfast-builder    991,016    0\r\nbytestring    1,158,584    0 (toStrict
  . toLazyByteString)\r\n\r\ntoLazyByteString\r\nCase          Allocated  GCs\r\nmason
  \          228,936    0\r\nfast-builder    903,752    0\r\nbytestring    1,101,448
  \   0\r\n```\r\n\r\n`doubleDec` employs Grisu3 which grants ~20x speedup over `show`-based
  implementation.\r\n\r\n```\r\nmason/double                             mean 116.2
  ns  ( +- 6.654 ns  )\r\nfast-builder/double                      mean 2.183 μs  (
  +- 85.80 ns  )\r\nbytestring/double                        mean 2.312 μs  ( +- 118.8
  ns  )\r\n```\r\n\r\nYou can find more benchmarks below:\r\n\r\n* [bytes-builder-shootout](https://github.com/andrewthad/bytes-builder-shootout)\r\n\r\n<details>\r\n<summary>Click
  to expand</summary>\r\n<pre>\r\ntreeToHex-2000/small-bytearray-builder   mean 44.01
  μs  ( +- 1.620 μs  )\r\ntreeToHex-2000/fast-builder              mean 34.40 μs  (
  +- 390.1 ns  )\r\ntreeToHex-2000/bytestring                mean 58.76 μs  ( +- 3.843
  μs  )\r\ntreeToHex-2000/mason                     mean 41.08 μs  ( +- 180.8 ns  )\r\ntreeToHex-9000/small-bytearray-builder
  \  mean 191.8 μs  ( +- 1.835 μs  )\r\ntreeToHex-9000/bytestring                mean
  284.8 μs  ( +- 1.156 μs  )\r\ntreeToHex-9000/mason                     mean 181.2
  μs  ( +- 386.3 ns  )\r\nshort-text-tree-1000/small-bytearray-builder mean 26.54
  μs  ( +- 34.08 ns  )\r\nshort-text-tree-1000/fast-builder        mean 37.51 μs  (
  +- 99.85 ns  )\r\nshort-text-tree-1000/bytestring          mean 37.95 μs  ( +- 167.5
  ns  )\r\nshort-text-tree-1000/mason               mean 26.87 μs  ( +- 312.4 ns  )\r\nbyte-tree-2000/small-bytearray-builder
  \  mean 30.53 μs  ( +- 51.53 ns  )\r\nbyte-tree-2000/fast-builder              mean
  26.91 μs  ( +- 592.2 ns  )\r\nbyte-tree-2000/bytestring                mean 54.40
  μs  ( +- 1.743 μs  )\r\nbyte-tree-2000/mason                     mean 34.34 μs  (
  +- 193.5 ns  )\r\n</pre>\r\n</details>\r\n\r\n* [haskell-perf/strict-bytestring-builder](https://github.com/haskell-perf/strict-bytestring-builders)\r\n\r\n<details>\r\n<summary>Click
  to expand</summary>\r\n<pre>\r\naveragedAppends-1/byteStringStrictBuilder mean 116.3
  ns  ( +- 6.479 ns  )\r\naveragedAppends-1/byteStringTreeBuilder  mean 181.7 ns  (
  +- 20.88 ns  )\r\naveragedAppends-1/fastBuilder            mean 181.5 ns  ( +- 7.219
  ns  )\r\naveragedAppends-1/bufferBuilder          mean 728.5 ns  ( +- 9.114 ns  )\r\naveragedAppends-1/byteString
  \            mean 358.7 ns  ( +- 4.663 ns  )\r\naveragedAppends-1/blazeBuilder           mean
  356.0 ns  ( +- 7.604 ns  )\r\naveragedAppends-1/binary                 mean 635.0
  ns  ( +- 7.936 ns  )\r\naveragedAppends-1/cereal                 mean 638.6 ns  (
  +- 12.40 ns  )\r\naveragedAppends-1/mason                  mean 155.2 ns  ( +- 2.000
  ns  )\r\naveragedAppends-100/byteStringStrictBuilder mean 7.290 μs  ( +- 99.74 ns
  \ )\r\naveragedAppends-100/byteStringTreeBuilder mean 13.40 μs  ( +- 283.4 ns  )\r\naveragedAppends-100/fastBuilder
  \         mean 13.07 μs  ( +- 418.2 ns  )\r\naveragedAppends-100/bufferBuilder        mean
  19.57 μs  ( +- 5.644 μs  )\r\naveragedAppends-100/byteString           mean 17.31
  μs  ( +- 1.609 μs  )\r\naveragedAppends-100/blazeBuilder         mean 19.15 μs  (
  +- 6.533 μs  )\r\naveragedAppends-100/binary               mean 48.26 μs  ( +- 727.1
  ns  )\r\naveragedAppends-100/cereal               mean 51.57 μs  ( +- 21.81 μs  )\r\naveragedAppends-100/mason
  \               mean 12.07 μs  ( +- 233.8 ns  )\r\naveragedAppends-10000/byteStringStrictBuilder
  mean 1.038 ms  ( +- 18.63 μs  )\r\naveragedAppends-10000/byteStringTreeBuilder mean
  1.989 ms  ( +- 70.63 μs  )\r\naveragedAppends-10000/fastBuilder        mean 1.611
  ms  ( +- 42.24 μs  )\r\naveragedAppends-10000/bufferBuilder      mean 1.895 ms  (
  +- 25.09 μs  )\r\naveragedAppends-10000/byteString         mean 2.248 ms  ( +- 40.99
  μs  )\r\naveragedAppends-10000/blazeBuilder       mean 2.394 ms  ( +- 1.016 ms  )\r\naveragedAppends-10000/binary
  \            mean 6.503 ms  ( +- 157.6 μs  )\r\naveragedAppends-10000/cereal             mean
  6.458 ms  ( +- 221.6 μs  )\r\naveragedAppends-10000/mason              mean 1.738
  ms  ( +- 25.89 μs  )\r\nregularConcat-100/byteStringStrictBuilder mean 1.606 μs
  \ ( +- 32.93 ns  )\r\nregularConcat-100/byteStringTreeBuilder  mean 2.000 μs  (
  +- 43.73 ns  )\r\nregularConcat-100/fastBuilder            mean 1.364 μs  ( +- 37.95
  ns  )\r\nregularConcat-100/bufferBuilder          mean 2.204 μs  ( +- 48.40 ns  )\r\nregularConcat-100/byteString
  \            mean 1.253 μs  ( +- 25.68 ns  )\r\nregularConcat-100/blazeBuilder           mean
  1.317 μs  ( +- 24.05 ns  )\r\nregularConcat-100/binary                 mean 2.845
  μs  ( +- 62.24 ns  )\r\nregularConcat-100/cereal                 mean 3.021 μs  (
  +- 48.53 ns  )\r\nregularConcat-100/mason                  mean 1.405 μs  ( +- 35.11
  ns  )\r\nregularConcat-10000/byteStringStrictBuilder mean 321.3 μs  ( +- 11.13 μs
  \ )\r\nregularConcat-10000/byteStringTreeBuilder mean 349.1 μs  ( +- 4.359 μs  )\r\nregularConcat-10000/fastBuilder
  \         mean 121.0 μs  ( +- 1.755 μs  )\r\nregularConcat-10000/bufferBuilder        mean
  156.1 μs  ( +- 2.050 μs  )\r\nregularConcat-10000/byteString           mean 106.6
  μs  ( +- 1.355 μs  )\r\nregularConcat-10000/blazeBuilder         mean 110.8 μs  (
  +- 1.397 μs  )\r\nregularConcat-10000/binary               mean 308.1 μs  ( +- 5.346
  μs  )\r\nregularConcat-10000/cereal               mean 352.0 μs  ( +- 6.142 μs  )\r\nregularConcat-10000/mason
  \               mean 130.2 μs  ( +- 10.39 μs  )\r\n</pre>\r\n</details>\r\n\r\nArchitecture\r\n----\r\n\r\nMason's
  builder is a function that takes a purpose-dependent environment and a buffer. There
  is little intermediate structure involved; almost everything runs in one pass. This
  design is inspired by [fast-builder](http://hackage.haskell.org/package/fast-builder).\r\n\r\n```haskell\r\ntype
  Builder = forall s. Buildable s => BuilderFor s\r\n\r\nnewtype BuilderFor s = Builder
  { unBuilder :: s -> Buffer -> IO Buffer }\r\n\r\ndata Buffer = Buffer\r\n  { bEnd
  :: {-# UNPACK #-} !(Ptr Word8) -- ^ end of the buffer (next to the last byte)\r\n
  \ , bCur :: {-# UNPACK #-} !(Ptr Word8) -- ^ current position\r\n  }\r\n\r\nclass
  Buildable s where\r\n  byteString :: B.ByteString -> BuilderFor s\r\n  flush ::
  BuilderFor s\r\n  allocate :: Int -> BuilderFor s\r\n```\r\n\r\nInstances of the
  `Buildable` class implement purpose-specific behaviour (e.g. exponentially allocate
  a buffer, flush to disk). This generic interface also allows creative uses of Builders
  such as on-the-fly compression.\r\n\r\n`Builder` has a smart constructor called
  `ensure`:\r\n\r\n```haskell\r\nensure :: Int -> (Buffer -> IO Buffer) -> Builder\r\n```\r\n\r\n`ensure
  n f` secures at least `n` bytes in the buffer and passes the pointer to `f`. This
  gives rise to monoid homorphism; namely, `ensure m f <> ensure n g` will fuse into
  `ensure (m + n) (f >=> g)` so don't worry about the overhead of bound checking.\r\n\r\nCreating
  your own primitives\r\n----\r\n\r\nThe easiest way to create a new primitive is
  `withPtr`, a simplified version of `ensure`. This is quite convenient for calling
  foreign functions or anything low-level.\r\n\r\n```haskell\r\n-- | Construct a 'Builder'
  from a \"poke\" function.\r\nwithPtr :: Int -- ^ number of bytes to allocate (if
  needed)\r\n  -> (Ptr Word8 -> IO (Ptr Word8)) -- ^ return a next pointer after writing\r\n
  \ -> Builder\r\n\r\ngrisu v = withPtr 24 $ \\ptr -> do\r\n  n <- dtoa_grisu3 v ptr\r\n
  \ return $ plusPtr ptr (fromIntegral n)\r\n\r\nforeign import ccall unsafe \"static
  dtoa_grisu3\"\r\n  dtoa_grisu3 :: Double -> Ptr Word8 -> IO CInt\r\n```\r\n"
description-type: markdown
hash: 87e6233cf21222c2bb3392e453ad9ee4257a850c75bfb2537461f60574ce87e9
homepage: ''
latest: 0.2.6
license-name: BSD-3-Clause
maintainer: fumiexcel@gmail.com
synopsis: Fast and extensible bytestring builder
test-bench-deps: {}
