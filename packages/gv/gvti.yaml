homepage: https://hackage.haskell.org/package/gvti
changelog-type: markdown
hash: ad8210fd5c652ef3e1f2aff301266bbde4acf176fb3a09cafcbb9ed5299796e8
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: GraphViz Tabular Interface
changelog: |+
  # Revision history for gvti

  ## 0.1.0.0 -- 2022-11-12

  * First version. Released on an unsuspecting world. Is a fork of the now deprecated mmsyn4 package.

  ## 0.1.1.0 -- 2022-11-12

  * First version revised A. Some documentation improvements.


basic-deps:
  mmsyn3: ==0.1.6.0
  base: '>=4.7 && <5'
  process: '>=1.2 && <2'
  directory: ==1.*
all-versions:
- 0.1.0.0
- 0.1.1.0
author: OleksandrZhabenko
latest: 0.1.1.0
description-type: markdown
description: "             \n             ***** Usage *****\n             -----------------\n\n1.
  After installation the executable gvti is created.\n Afterwards, it is used to process
  files. So, open an\n  office spreadsheet program, e. g.\n   [LibreOffice Calc](https://libreoffice.org).\n
  \ \n2. Begin to enter the text in the cells. You can use\n Unicode characters. No
  quotation marks should be used,\n  instead use some special delimiter except '@'
  sign.\n  \n3. Do not use colons, instead when needed switch to the\n nearest cell
  to the right.\n \n4. To make a text visually highlighted (yellowish), start\n the
  cell with an ’@’ sign.\n \n5. Lines in the table create different chains in the\n
  resulting graph. To produce an arrow to the text in the\n cell, enter it in the
  next cell in the row to the right.\n \n6. To make several arrows from the cell,
  switch to the\n next cell to the right for this parent one (the cell that\n  will
  be a parent for several other cells), enter needed\n   new texts there and in the
  located below cells.\n   \n7. Usually, you can search the needed text with Ctrl+F
  if\n needed.\n \n8. Empty lines in the table do not influence the resulting\n visualization.
  Above each line, except the first one,\n  there must be at least one filled cell.
  It must be\n   located above the text on the new line or even further\n    to the
  right above. Otherwise, the program will\n     produce no reasonably useful output.\n
  \    \n9. After entering all the text, export the sheet as a \n  \"*.csv\" file
  using colons (':') as separator \n    in the working directory. Otherwise, the program
  \n      won’t work.\n      \n10. Run the appropriate executable gvti in the terminal
  \n  or from the command line while being in the directory \n    with the created
  .csv file. Specify as a command line \n      argument its name. While executing
  a program enter \n        a basic name of the file to be saved. DO use \n          alphanumeric
  symbols and dashes if needed. \n            Then specify the needed visualization
  scheme \n              by specifying the appropriate character \n                in
  the terminal and the format of the \n                  resulting visualization file
  (refer to \n                    GraphViz documentation for the default \n                      list
  of formats). For more information, \n                        see the \n  [GraphViz
  documentation](https://www.graphviz.org/documentation/).\n                \n11.
  Your first visualization is then created.\n\n12. Save the spreadsheet document as
  a spreadsheet file (if you \n  worked with spreadsheets, otherwise this step can
  be omitted).\n\n13. Repeat the steps from 2 to 12 as needed to produce\n more visualizations.\n
  \n14. Afterwards, you have a list of graphics files, a list of .gv \n files as source
  files for Graphviz, and a saved spreadsheet file. \n   Then you can use the produced
  visualizations for some other \n     documents.\n\n    ***** Usage of the Next Command
  Line Arguments after the First One *****\n    ------------------------------------------------------------------------\n\ngvti
  executable supports the following further \ncommand lines arguments (given after
  the first one -- see above):\n\n-c... — dots are instead of one letter to specify
  the first character \n  of the GraphViz command (e. g. \\'n\\' — for \\'neato\\')\n\n-f...
  — dots are instead of two letters to specify the format (according to \n  the 'getFormat')
  of the GraphViz command (e. g. \\'jp\\' — for \\'jpg\\')\n\nBesides, supports the
  following further \ncommand line arguments (additionally to the previous ones):\n\n-b...
  — dots are instead of the basic name for the created files (the \nname without prefixes
  and extensions)\n\n-s... — dots are instead of one digit to specify the GraphViz
  splines \nfunctionality. 0 — for \"splines=false\"; 1 — for \"splines=true\"; \n2
  — for \"splines=ortho\"; 3 — for \"splines=polyline\". The default \none is \"splines=true\".\n\n-y
  — (if present) means that the '@' signs will be removed from the created \nfiles.\n\n-g
  — (if present) means that instead of the exporting from the spreadsheets,\nyou can
  use gvti specifications (see as an example the following).\n\nThey can be given
  in any combinations (if needed) or omitted. In the latter \none case the program
  will prompt you the needed information (but this is \nnot the case for a separator,
  which must be specified in such a way to be \nused instead).\n\n** Example of .gvti
  File Format Usage\n\nCreate a file example.gvti\n\nActually, the file extension
  is not important, but it must be a usual text file.\n\nEnter there:\n\n@example:GraphViz:visualization\n2,tabular
  interface:using neato\n3,glue:GraphViz\n4,spreadsheets\n\nAfterwards, save the file
  and quit the editing program.\n\nInstall the gvti package using cabal:\n\ncabal
  v1-install gvti\n\nThen run in the terminal:\n\ngvti -g example.gvti -cneato -y\nPlease,
  input the basic name of the visualization file!\nexample.neato\nPlease, specify
  the splines mode for GraphViz (see the documentation for GraphViz)\n0 -- for \"splines=false\"\n1
  -- for \"splines=true\"\n2 -- for \"splines=ortho\"\n3 -- for \"splines=polyline\"\nThe
  default one is \"splines=true\"\n1\nThe visualization will be created without the
  at-sign.\nPlease, specify the GraphViz output format for the file: \n\"do\" -- for
  -Tdot\"\n\"xd\" -- for -Txdot\"\n\"ps\" -- for -Tps\"\n\"pd\" -- for -Tpdf\"\n\"sv\"
  -- for -Tsvg\"\n\"sz\" -- for -Tsvgz\"\n\"fi\" -- for -Tfig\"\n\"pn\" -- for -Tpng\"\n\"gi\"
  -- for -Tgif\"\n\"jp\" -- for -Tjpg\"\n\"je\" -- for -Tjpeg\"\n\"js\" -- for -Tjson\"\n\"im\"
  -- for -Timap\"\n\"cm\" -- for -Tcmapx\"\notherwise there will be used the default
  -Tsvg\nsv\n\nAfterwards, you will have a visualization in the svg format in the
  directory. Here, it is:\n\nhttps://hackage.haskell.org/package/gvti-0.1.1.0/src/4895040000.example.neato.gv.svg\n\n\n"
license-name: MIT
