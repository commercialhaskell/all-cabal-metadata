homepage: https://hackage.haskell.org/package/gvti
changelog-type: markdown
hash: 15d7f5f703f6ff3991ae7ef05c1d4b0c184cd237aa36f7948bce3d99fc1f5618
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: GraphViz Tabular Interface
changelog: |+
  # Revision history for mmsyn4

  ## 0.1.0.0 -- 2019-10-17

  * First version. Released on an unsuspecting world.

  ## 0.1.1.0 -- 2019-10-18

  * First version revised A. Some documentation and .cabal file improvements.

  ## 0.1.1.1 -- 2019-10-18

  * First version revised B. Some minor documentation and .cabal file improvements.

  ## 0.1.2.0 -- 2019-10-22

  * First version revised C. Changed the output files scheme. Avoided a pipe redirection in the terminal.
   Some minor documentation and .cabal file improvements.

  ## 0.1.3.0 -- 2019-12-16

  * First version revised D. Added the possibility to avoid using the at-sign in the resulting visualization file. Added the possibility to choose
  different splines schemes according to the GraphViz documentation.

  ## 0.1.4.0 -- 2019-12-17

  * First version revised E. Added filtering for not to duplicate records in the
  .gv file. Some minor documentation improvement.

  ## 0.1.5.0 -- 2019-12-24

  * First version revised F. Changed dependency bounds so that it can now be compiled for GHC 8.8.1.

  ## 0.1.6.0 -- 2020-01-31

  * First version revised G. Changed README to README.markdown

  ## 0.2.0.0 -- 2020-05-14

  * Second version. Changed the bounds for dependencies so that now also GHC 8.10* series is supported. Changed a module structur so that now it has
  additional module MMSyn4 with almost all functions in it (they mostly are not exported because of their specific usage). Added possibility
  to specify another basic file to work with except 1.csv. Added a possibility to specify an output graphics format. Some code and
  documentation improvements.

  ## 0.3.0.0 -- 2020-05-16

  * Third version. The code is almost fully rewritten. Fixed issues with wrong processing and formatting of the file. Fixed issue with double
  printed prompt message in the MMSyn4 module. Changed the exported and imported functions and dependencies for modules. Added the possibility
  to specify three additional command line arguments to specify the command to be executed to create the visualization file and its format.
  So, now the program behavior can be basically controlled with command line arguments.

  ## 0.3.1.0 -- 2020-05-16

  * Third version revised A. Added CPP pre-processor to support compilation also for GHC-7.8* series.

  ## 0.3.1.1 -- 2020-05-16

  * Third version revised B. Trying the same as above with more specific syntaxis and LANGUAGE CPP pragma.

  ## 0.4.0.0 -- 2020-05-19

  * Fourth version. Added the new command line arguments "-y", "-s...", "-b..." to specify whether to remove the '@' markers, which option is used to splines
  GraphViz functionality and what is the basic name for the created files respectively. For this changed the functions. Some documentation additions
  respectively.

  ## 0.5.0.0 -- 2020-10-29

  * Fifth version. Changed the inlining policies. Some minor code improvements. Boundaries changes for dependencies.

  ## 0.6.0.0 -- 2020-12-15

  * Sixth version. Switched to the GHC.Arr module from the base package. Removed vector and mmsyn2 as dependencies.
  Some code improvements.

  ## 0.6.1.0 -- 2020-12-15

  * Sixth version revised A. Removed also mmsyn2-array as a dependency.

  ## 0.6.2.0 -- 2020-12-16

  * Sixth version revised B. Fixed issue with incorrectly defined fold that has led to incorrect some results.

  ## 0.6.3.0 -- 2020-12-16

  * Sixth version revised C. Fixed another issue with incorrectly defined fold that has led to incorrect some results.

  ## 0.6.4.0 -- 2022-08-13

  * Sixth version revised D. Updated the dependencies so  that the newer versions of the dependencies
  are supported.

basic-deps:
  mmsyn3: ==0.1.6.0
  base: '>=4.7 && <5'
  process: '>=1.2 && <2'
  directory: ==1.*
all-versions:
- 0.1.0.0
author: OleksandrZhabenko
latest: 0.1.0.0
description-type: markdown
description: "             \n             ***** Usage *****\n             -----------------\n\n1.
  After installation the executable gvti is created.\n Afterwards, it is used to process
  files. So, open an\n  office spreadsheet program, e. g.\n   [LibreOffice Calc](https://libreoffice.org).\n
  \ \n2. Begin to enter the text in the cells. You can use\n Unicode characters. No
  quotation marks should be used,\n  instead use some special delimiter except '@'
  sign.\n  \n3. Do not use colons, instead when needed switch to the\n nearest cell
  to the right.\n \n4. To make a text visually highlighted (yellowish), start\n the
  cell with an ’@’ sign.\n \n5. Lines in the table create different chains in the\n
  resulting graph. To produce an arrow to the text in the\n cell, enter it in the
  next cell in the row to the right.\n \n6. To make several arrows from the cell,
  switch to the\n next cell to the right for this parent one (the cell that\n  will
  be a parent for several other cells), enter needed\n   new texts there and in the
  located below cells.\n   \n7. Usually, you can search the needed text with Ctrl+F
  if\n needed.\n \n8. Empty lines in the table do not influence the resulting\n visualization.
  Above each line, except the first one,\n  there must be at least one filled cell.
  It must be\n   located above the text on the new line or even further\n    to the
  right above. Otherwise, the program will\n     produce no reasonably useful output.\n
  \    \n9. After entering all the text, export the sheet as a \n  \"*.csv\" file
  using colons (':') as separator \n    in the working directory. Otherwise, the program
  \n      won’t work.\n      \n10. Run the appropriate executable gvti in the terminal
  \n  or from the command line while being in the directory \n    with the created
  .csv file. Specify as a command line \n      argument its name. While executing
  a program enter \n        a basic name of the file to be saved. DO use \n          alphanumeric
  symbols and dashes if needed. \n            Then specify the needed visualization
  scheme \n              by specifying the appropriate character \n                in
  the terminal and the format of the \n                  resulting visualization file
  (refer to \n                    GraphViz documentation for the default \n                      list
  of formats). For more information, \n                        see the \n  [GraphViz
  documentation](https://www.graphviz.org/documentation/).\n                \n11.
  Your first visualization is then created.\n\n12. Save the spreadsheet document as
  a spreadsheet file (if you \n  worked with spreadsheets, otherwise this step can
  be omitted).\n\n13. Repeat the steps from 2 to 12 as needed to produce\n more visualizations.\n
  \n14. Afterwards, you have a list of graphics files, a list of .gv \n files as source
  files for Graphviz, and a saved spreadsheet file. \n   Then you can use the produced
  visualizations for some other \n     documents.\n\n    ***** Usage of the Next Command
  Line Arguments after the First One *****\n    ------------------------------------------------------------------------\n\ngvti
  executable supports the following further \ncommand lines arguments (given after
  the first one -- see above):\n\n-c... -- dots are instead of one letter to specify
  the first character \n  of the GraphViz command (e. g. \\'n\\' -- for \\'neato\\')\n\n-f...
  -- dots are instead of two letters to specify the format (according to \n  the 'getFormat')
  of the GraphViz command (e. g. \\'jp\\' -- for \\'jpg\\')\n\nBesides, supports the
  following further \ncommand line arguments (additionally to the previous ones):\n\n-b...
  -- dots are instead of the basic name for the created files (the \nname without
  prefixes and extensions)\n\n-s... -- dots are instead of one digit to specify the
  GraphViz splines \nfunctionality. 0 -- for \"splines=false\"; 1 -- for \"splines=true\";
  \n2 -- for \"splines=ortho\"; 3 -- for \"splines=polyline\". The default \none is
  \"splines=true\".\n\n-y -- (if present) means that the '@' signs will be removed
  from the created \nfiles.\n\nThey can be given in any combinations (if needed) or
  omitted. In the latter \none case the program will prompt you the needed information
  (but this is \nnot the case for a separator, which must be specified in such a way
  to be \nused instead).\n"
license-name: MIT
