homepage: https://github.com/stla/numerical-integration#readme
changelog-type: markdown
hash: ecfb93783042d7d379979fdb58d42f78b2243ce7c3e7f4ed433ac91005970814
test-bench-deps: {}
maintainer: laurent_step@outlook.fr
synopsis: Numerical integration.
changelog: "# Changelog for `numerical-integration`\r\n\r\n## 0.1.0.0 - 2023-08-30\r\n\r\nFirst
  release.\r\n\r\n\r\n## 0.1.1.0 - 2023-09-18\r\n\r\n- New data type `IntegralResult`
  to store the result (value, error, code), instead of in a triplet.\r\n\r\n- Replaced
  `Double` with `CDouble` and `Int` with `CInt`.\r\n\r\n\r\n## 0.1.2.0 - 2023-09-19\r\n\r\n-
  Avoided `CDouble`. \r\n\r\n- Completed README.\r\n\r\n"
basic-deps:
  base: '>=4.7 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
author: Stéphane Laurent
latest: 0.1.2.0
description-type: markdown
description: "# numerical-integration\r\n\r\nOne-dimensional numerical integration
  using the \r\n['NumericalIntegration'](https://github.com/tbs1980/NumericalIntegration)
  C++ library.\r\n\r\n___\r\n\r\n***Example.*** Integrate x² between 0 and 1 with
  desired relative error 1e-5 and \r\nusing 200 subdivisions. Exact value: 1/3.\r\n\r\n```haskell\r\nexample
  :: IO IntegralResult -- value, error estimate, error code\r\nexample = integration
  (\\x -> x*x) 0 1 1e-5 200\r\n-- IntegralResult {\r\n--   _value = 0.3333333333333334,
  \r\n--   _error = 3.7007434154171895e-15, \r\n--   _code = 0\r\n-- }\r\n```\r\n\r\nThe
  error code 0 indicates the success.\r\n\r\n___\r\n\r\n***A highly oscillatory function.***
  The function shown below is highly \r\noscillatory. It is know that the exact value
  of its integral from `0` to `1` \r\nis `π exp(-10) / 2 ≈ 7.131404e-05`.\r\n\r\n![](https://github.com/stla/numerical-integration/blob/72d163587de7c5b21bb789da3ef2a068f3048d89/images/oscillatoryFunction.gif)\r\n\r\nLet's
  try to evaluate it with R with 200000 subdivisions. \r\n\r\n```r\r\nf <- function(x)
  {\r\n  5*cos(2*x/(1-x)) / (25*(1-x)**2 + x**2)\r\n}\r\nintegrate(f, 0, 1, subdivisions
  = 200000)\r\n# 7.76249e-05 with absolute error < 3.7e-05\r\n```\r\nR does not complain,
  however the result is not very good. \r\n\r\nNow let's try with the present library,
  with 100000 subdivisions.\r\n\r\n```haskell\r\nintgr :: IO IntegralResult \r\nintgr
  = integration (\\t -> 5 * cos(2*t/(1-t)) / (25*(1-t)**2 + t**2)) 0 1 1e-4 100000\r\n--
  IntegralResult {\r\n--    _value = 7.131328051415349e-5, \r\n--    _error = 4.991435083852171e-7,
  \r\n--    _code = 2\r\n-- }\r\n```\r\nAs compared to R, the computation is very
  slow. But the result is quite better. \r\nNote that the error code is 2, thereby
  indicating a failure of convergence. \r\nSo let's try 250000 subdivisions. This
  will take a while.\r\n\r\n```haskell\r\nintgr :: IO IntegralResult \r\nintgr = integration
  (\\t -> 5 * cos(2*t/(1-t)) / (25*(1-t)**2 + t**2)) 0 1 1e-4 250000\r\n-- IntegralResult
  {\r\n--   _value = 7.131328051415349e-5, \r\n--   _error = 4.991435083852171e-7,
  \r\n--   _code = 2\r\n-- }\r\n```\r\n\r\nThe result is the same!\r\n\r\nNote that
  in the C++ code of 'numerical-integration', I fixed the desired \r\nabsolute error
  to 0. I'm not sure it is a good idea.\r\n\r\n___\r\n\r\n***The tanh-sinh procedure.***\r\nI
  don't master the Haskell library 'integration' but I give it a try below. \r\nIt
  implements the tanh-sinh quadrature.\r\n\r\n```haskell\r\nimport Numeric.Integration.TanhSinh\r\n\r\ntanhsinh
  :: Result\r\ntanhsinh = absolute 1e-6 $ parTrap (\\t -> 5 * cos(2*t/(1-t)) / (25*(1-t)**2
  + t**2)) 0 1\r\n-- Result {\r\n--   result = -6.463872646093162e-3, \r\n--   errorEstimate
  = 2.577460946077898e-2, \r\n--   evaluations = 769\r\n-- }\r\n```\r\nThe result
  is totally wrong, which is not surprising in view of the weak \r\nnumber of evaluations.
  But again, I don't master this library so I will\r\nnot conclude anything from this
  result.\r\n"
license-name: BSD-3-Clause
