homepage: https://github.com/msakai/numeric-optimization-ad#readme
changelog-type: markdown
hash: 3773ee99f8f3cf9c9a9eb30fcbf42d88e152706229157b5bd92dc522b8fe2b8e
test-bench-deps:
  numeric-optimization-ad: -any
  base: '>=4.12 && <5'
  data-default-class: -any
  hspec: '>=2.7.1 && <3.0'
  HUnit: '>=1.6.0.0 && <1.7'
  containers: '>=0.6.0.1 && <0.7'
  numeric-optimization: '>=0.1.0.0 && <0.2.0.0'
maintainer: masahiro.sakai@gmail.com
synopsis: Wrapper of numeric-optimization package for using with AD package
changelog: |
  # Changelog for `numeric-optimization-ad`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
basic-deps:
  numeric-optimization-ad: -any
  reflection: '>=2.1.5'
  base: '>=4.12 && <5'
  data-default-class: -any
  ad: '>=4.3.6 && <4.6'
  numeric-optimization: '>=0.1.0.0 && <0.2.0.0'
  hmatrix: '>=0.20.0.0'
  primitive: '>=0.6.4.0'
  vector: '>=0.12.0.2 && <0.14'
all-versions:
- 0.1.0.0
author: Masahiro Sakai
latest: 0.1.0.0
description-type: markdown
description: |
  # numeric-optimization-ad

  Wrapper of [numeric-optimization](https://hackage.haskell.org/package/numeric-optimization) package for using with [ad](https://hackage.haskell.org/package/ad) package

  ## Example Usage

  ```haskell
  {-# LANGUAGE FlexibleContexts #-}
  import Numeric.Optimization.AD

  main :: IO ()
  main = do
    result <- minimize LBFGS def rosenbrock Nothing [] [-3,-4]
    print (resultSuccess result)  -- True
    print (resultSolution result)  -- [0.999999999009131,0.9999999981094296]
    print (resultValue result)  -- 1.8129771632403013e-18

  -- https://en.wikipedia.org/wiki/Rosenbrock_function
  rosenbrock :: Floating a => [a] -> a
  -- rosenbrock :: Reifies s Tape => [Reverse s Double] -> Reverse s Double
  rosenbrock [x,y] = sq (1 - x) + 100 * sq (y - sq x)

  sq :: Floating a => a -> a
  sq x = x ** 2
  ```
license-name: BSD-3-Clause
