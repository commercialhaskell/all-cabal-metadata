homepage: https://github.com/msakai/nonlinear-optimization-ad#readme
changelog-type: markdown
hash: e341ecfcaee455142c61b856df3bbfcd4f0cfbab2f75c9c5e96cc40134ccf2c2
test-bench-deps:
  base: '>=4.12 && <5'
  data-default-class: '>=0.1.2.0 && <0.2'
  hspec: '>=2.7.1 && <3.0'
  HUnit: '>=1.6.0.0 && <1.7'
  containers: '>=0.6.0.1 && <0.7'
  numeric-optimization: -any
  hmatrix: -any
  vector: '>=0.12.0.2 && <0.14'
maintainer: masahiro.sakai@gmail.com
synopsis: Unified interface to various numerical optimization algorithms
changelog: |
  # Changelog for `numeric-optimization`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## 0.1.1.0 - 2023-06-21

  * Support L-BFGS-B algorithm (when `with-lbfgsb` is enabled)
  * Add some algorithm specific parameters
  * Add instructions for installing dependent libraries
  * Add `with-lbfgs` flag, which is `true` by default, but you can turn-off
    the flag to build without L-BFGS.
  * Add some instances of standard type classes: `Eq OptimizationException`,
    `Show Result`, and `Show Statistics`.
  * Return correct statistics for L-BFGS and L-BFGS-B.
  * Fix many bugs

  ## 0.1.0.1 - 2023-06-03

  * Various documentation fixes
  * Fix `build-examples` flag to work

  ## 0.1.0.0 - 2023-06-03

  * Initial release.
basic-deps:
  base: '>=4.12 && <5'
  data-default-class: '>=0.1.2.0 && <0.2'
  constraints: -any
  lbfgs: ==0.1.*
  numeric-optimization: -any
  numeric-limits: ==0.1.*
  hmatrix: '>=0.20.0.0'
  primitive: '>=0.6.4.0'
  vector: '>=0.12.0.2 && <0.14'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
author: Masahiro Sakai
latest: 0.1.1.0
description-type: markdown
description: "# numeric-optimization\n\n[![Hackage](https://img.shields.io/hackage/v/numeric-optimization.svg)](https://hackage.haskell.org/package/numeric-optimization)\n[![Hackage
  Deps](https://img.shields.io/hackage-deps/v/numeric-optimization.svg)](https://packdeps.haskellers.com/feed?needle=numeric-optimization)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\nUnified
  interface to various numerical optimization algorithms.\n\nThe aim of the package
  is to provide a convenient interface like Python's [scipy.optimize](https://docs.scipy.org/doc/scipy/reference/optimize.html).\n\nNote
  that the package name is numeric-optimization and not numeri**cal**-optimization.\nThe
  name `numeric-optimization` comes from the module name `Numeric.Optimization`.\n\n\n##
  Example Usage\n\n```haskell\n{-# LANGUAGE OverloadedLists #-}\nimport Data.Vector.Storable
  (Vector)\nimport Numeric.Optimization\n\nmain :: IO ()\nmain = do\n  result <- minimize
  LBFGS def (WithGrad rosenbrock rosenbrock') [-3,-4]\n  print (resultSuccess result)
  \ -- True\n  print (resultSolution result)  -- [0.999999999009131,0.9999999981094296]\n
  \ print (resultValue result)  -- 1.8129771632403013e-18\n\n-- https://en.wikipedia.org/wiki/Rosenbrock_function\nrosenbrock
  :: Vector Double -> Double\nrosenbrock [x,y] = sq (1 - x) + 100 * sq (y - sq x)\n\nrosenbrock'
  :: Vector Double -> Vector Double\nrosenbrock' [x,y] =\n  [ 2 * (1 - x) * (-1) +
  100 * 2 * (y - sq x) * (-2) * x\n  , 100 * 2 * (y - sq x)\n  ]\n\nsq :: Floating
  a => a -> a\nsq x = x ** 2\n```\n\n## Supported Algorithms\n\n|Algorithm|Solver
  implemention|Haskell binding| |\n|---------|-------------------|---------------|-|\n|CG\\_DESCENT|[CG_DESCENT-C](https://www.math.lsu.edu/~hozhang/SoftArchive/CG_DESCENT-C-3.0.tar.gz)|[nonlinear-optimization](https://hackage.haskell.org/package/nonlinear-optimization)|Requires
  `with-cg-descent` flag|\n|Limited memory BFGS (L-BFGS)|[liblbfgs](https://github.com/chokkan/liblbfgs)|[lbfgs](https://hackage.haskell.org/package/lbfgs)|\n|Limited
  memory BFGS with bounds constraints (L-BFGS-B)|[L-BFGS-B](http://users.iems.northwestern.edu/~nocedal/lbfgsb.html)|[l-bfgs-b](https://hackage.haskell.org/package/l-bfgs-b)|Requires
  `with-lbfgsb` flag|\n|Newton's method|Pure Haskell implementation using [HMatrix](https://hackage.haskell.org/package/hmatrix)|-|\n\n##
  Installation\n\n### Installing Prerequisites\n\n#### BLAS and LAPACK\n\nYou may
  need to install BLAS and LAPACK for `hmatrix`.\n\n##### Windows (MSYS2):\n```\n$
  pacman -S mingw-w64-x86_64-lapack\n```\n\nor if you use MSYS2 installed by `stack`\n\n```\n$
  stack exec -- pacman -S mingw-w64-x86_64-lapack\n```\n\n##### Debian and Ubuntu
  Linux:\n```\n$ apt-get install libblas-dev liblapack-dev\n```\n\n`libblas-dev` and
  `liblapack-dev` are reference implementations.\nYou need to install optimized ones
  for better performance.\n(See [DebianScience/LinearAlgebraLibraries](https://wiki.debian.org/DebianScience/LinearAlgebraLibraries))\n\n\n#####
  macOS\n\nBy default `hmatrix` uses BLAS and LAPACK provided by Accelerate Framework
  provided by macOS.\n\n#### liblbfgsb\n\nIf you want to use L-BFGS-B, you have to
  install the development package of `liblbfgsb`.\n\n##### Ubuntu Linux:\n```\n$ apt-get
  install liblbfgsb-dev\n```\n\n##### Homebrew (macOS and Linux): \n```\n$ brew install
  msakai/tap/liblbfgsb\n```\n\n##### Windows (MSYS2):\n```\n$ wget https://github.com/msakai/mingw-w64-liblbfgsb/releases/download/v3.0-1/mingw-w64-x86_64-liblbfgsb-3.0-1-any.pkg.tar.zst\n$
  pacman -U mingw-w64-x86_64-liblbfgsb-3.0-1-any.pkg.tar.zst\n```\n\nor if you use
  MSYS2 installed by `stack`\n\n```\n$ wget https://github.com/msakai/mingw-w64-liblbfgsb/releases/download/v3.0-1/mingw-w64-x86_64-liblbfgsb-3.0-1-any.pkg.tar.zst\n$
  stack exec -- pacman -Sy\n$ stack exec -- pacman -U mingw-w64-x86_64-liblbfgsb-3.0-1-any.pkg.tar.zst\n```\n\n##
  Related Packages\n\n* Packages for using with automatic differentiation:\n  * [numeric-optimization-ad](https://hackage.haskell.org/package/numeric-optimization-ad)
  for using with [ad](https://hackage.haskell.org/package/ad) package\n  * [numeric-optimization-backprop](https://hackage.haskell.org/package/numeric-optimization-backprop)
  for using with [backprop](https://hackage.haskell.org/package/backprop) package\n*
  [MIP](https://hackage.haskell.org/package/MIP) for solving linear programming and
  mixed-integer linear programming problems\n\n## LICENSE\n\nThe code in thie packaged
  is licensed under [BSD-3-Clause](LIENSE).\n\nIf you enable `with-cg-descent` flag,
  it uses GPL-licensed packages and the resulting binary should be distributed under
  GPL.\n"
license-name: BSD-3-Clause
