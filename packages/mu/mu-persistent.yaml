homepage: https://higherkindness.io/mu-haskell/db/
changelog-type: ''
hash: f19fe050f03e18a367aac9b61b4c757a23351f25e116b5285a4842abc7ddd097
test-bench-deps: {}
maintainer: flavio.corpa@47deg.com
synopsis: Utilities for interoperation between Mu and Persistent
changelog: ''
basic-deps:
  mu-schema: ==0.3.*
  base: '>=4.12 && <5'
  persistent: '>=2.10 && <3'
  resource-pool: '>=0.2 && <0.3'
  monad-logger: '>=0.3 && <0.4'
  transformers: '>=0.5 && <0.6'
  resourcet: '>=1.2 && <2'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
author: Flavio Corpa, Alejandro Serrano
latest: 0.3.1.0
description-type: markdown
description: "# mu-persistent\n\nThis are some utilities to integrate easily with
  `persistent` while using Mu.\n\n## Usage\n\nSay you have for example, the following
  `Entity`:\n\n```haskell\nmkPersist sqlSettings [persistLowerCase|\nPerson\n  name
  T.Text\n  age  Int32\n  deriving Show Generic\n|]\n```\n\nBut in your `proto3`,
  the `Person` message is defined as:\n\n```protobuf\nmessage PersonRequest {\n  int64
  identifier = 1;\n}\n\nmessage Person {\n  PersonRequest pid = 1;\n  string name
  = 2;\n  int32 age = 3;\n}\n```\n\nHow can you derive the correct `ToSchema` instances
  that `Mu` needs to work with that nested `Id` that belongs to another message? \U0001F914\n\nYou
  can use `WithEntityNestedId`, along with a custom field mapping and `DerivingVia`
  to do all the work for you!\n\n```haskell\n{-# language DerivingVia #-}\n\ntype
  PersonFieldMapping\n  = '[ \"personAge\" ':-> \"age\", \"personName\" ':-> \"name\"
  ]\n\nderiving via (WithEntityNestedId \"Person\" PersonFieldMapping (Entity Person))\n
  \ instance ToSchema Maybe PersistentSchema \"Person\" (Entity Person)\n```\n\nFor
  a more complete example of usage, please check [the example with `persistent`](https://github.com/higherkindness/mu-haskell/blob/master/examples/with-persistent/src/Schema.hs).\n"
license-name: Apache-2.0
