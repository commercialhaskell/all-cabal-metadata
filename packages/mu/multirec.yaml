all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- 0.5.1
- '0.6'
- '0.7'
- 0.7.1
- 0.7.2
- 0.7.3
- 0.7.4
- 0.7.5
- 0.7.6
- 0.7.7
- 0.7.8
- 0.7.9
author: |-
  Alexey Rodriguez,
  Stefan Holdermans,
  Andres Löh,
  Johan Jeuring
basic-deps:
  base: '>=3.0 && <5'
  template-haskell: '>=2.4 && <2.15'
changelog: ''
changelog-type: ''
description: |-
  Many generic programs require information about the recursive positions
  of a datatype. Examples include the generic fold, generic rewriting or
  the Zipper data structure. Several generic programming systems allow to
  write such functions by viewing datatypes as fixed points of a pattern
  functor. Traditionally, this view has been limited to so-called regular
  datatypes such as lists and binary trees. In particular, families of
  mutually recursive datatypes have been excluded.

  With the multirec library, we provide a mechanism to talk about fixed
  points of families of datatypes that may be mutually recursive. On top
  of this representations, generic functions such as the fold or the Zipper
  can then be defined.

  We expect that the library will be especially interesting for compiler
  writers, because ASTs are typically families of mutually recursive datatypes,
  and with multirec it becomes easy to write generic functions on ASTs.

  The library is based on ideas described in the paper:

  *  Alexey Rodriguez, Stefan Holdermans, Andres Löh, Johan Jeuring.
  /Generic programming with fixed points for mutually recursive datatypes/.
  ICFP 2009.
description-type: haddock
hash: b4ab87843b21bef0e9604012bfb0320c2ab6ae934c2ef5c84b7495b0cad68296
homepage: http://www.cs.uu.nl/wiki/GenericProgramming/Multirec
latest: 0.7.9
license-name: BSD-3-Clause
maintainer: generics@haskell.org
synopsis: Generic programming for families of recursive datatypes
test-bench-deps:
  base: '>=3.0 && <5'
  multirec: '>=0'
