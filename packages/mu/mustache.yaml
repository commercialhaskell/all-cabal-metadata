all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.4.0.1
- 0.5.0.0
- 0.5.1.0
- '1.0'
- 1.0.1
- 1.0.2
- '2.0'
- 2.0.1
- '2.1'
- 2.1.2
- 2.1.3
- 2.1.4
- 2.2.1
- 2.2.2
- 2.2.3
- 2.3.0
- 2.3.1
- 2.3.2
- 2.4.0
- 2.4.1
- 2.4.2
- 2.4.3
author: Justus Adam
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  cmdargs: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  mtl: '>=2.2.1'
  mustache: '>=0'
  parsec: '>=0'
  scientific: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  th-lift: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  yaml: '>=0'
changelog: "# Mustache library changelog\r\n\r\n## v2.4.3\r\n\r\n- Adds compatibility
  with `text >= 2.1.2`.\r\n\r\n## v2.4.2\r\n\r\n- Also treat Null as falsey in inverted
  sections\r\n\r\n## v2.4.1\r\n\r\n- Compatibility with `containers >= 0.2.17`\r\n\r\n##
  v2.4.0\r\n\r\n- Support for aeson 2\r\n\r\n## v2.3.2\r\n\r\n- Added support for
  GHC 9.0.1\r\n\r\n## v2.3.0\r\n\r\n- Changed `EitherT` to `ExceptT` (deprecation)\r\n-
  removed `getFile` from public API\r\n\r\n## v2.2.3\r\n\r\n- Quick fix to prevent
  catchSubstitute from reporting substitutions to the\r\n  renderer.\r\n\r\n## v2.2.2\r\n\r\n-
  Added a function to catch a substitution result\r\n\r\n## v2.2.1\r\n\r\n- Quickfix
  for an issue with resolving in context\r\n\r\n## v2.2\r\n\r\n- changed substitution
  into a new monad\r\n    + easier usage in lambdas and lambdas can now do nested
  substitution\r\n\r\n## v2.1.4\r\n\r\n- Treat Null as falsy in sections\r\n\r\n##
  v2.1.3\r\n\r\n- Added excaping for the apostrophe \"'\" as per xml spec, courtesy
  to @tfausak\r\n\r\n## v2.1.2\r\n\r\n- Fixed template cache again, as the spec requires
  access to the previous cache\r\n  in partials as well\r\n\r\n## v2.1.1\r\n\r\n-
  Fixed an error where the substitution of partials would not use the template\r\n
  \ cache of the new partial\r\n\r\n## v2.1\r\n\r\n- Added API preserving checked
  substitution with 'checkedSubstitute' and\r\n  'checkedSubstituteValue'\r\n- Better
  and more ToMustache instances. No longer are all sequences of\r\n  characters serialised
  as strings\r\n\r\n## v2.0\r\n\r\n- Added QuasiQuotes and template Haskell functions
  for compile time template\r\n  embedding.\r\n\r\n## v1.0\r\n\r\n- Stabilised API's\r\n\r\n##
  v0.5.1.0rc-7\r\n\r\n- Removed dependency tagsoup\r\n- Added ToMustache instances
  for some numbers\r\n\r\n## v0.5.0.0rc-6\r\n\r\n- Removed any dependency on ghc 7.10-type
  OverlappingInstances\r\n- Resolved String/List overlapping instances\r\n\r\n## v0.4.0.1rc-5\r\n\r\n-
  Added a necessary OVERLAPPABLE pragma\r\n\r\n## v0.4.0.0rc-4 (current stable version)\r\n\r\n-
  Removed `conversion` and `conversion-text` dependency.\r\n- Subsequently removed
  any dependency on overlapping instances\r\n- Readded support for ghc version 7.8\r\n-
  Removed `Char -> Value` instance of `ToMustache` (because of overlap)\r\n- Renamed
  `AST`\r\n\r\n## v0.3.1.0rc-3\r\n\r\n- Added infix precedence to conversion operators\r\n-
  Added `INLINEABLE` pragma to conversion functions\r\n\r\n## v0.3.0.1rc-2\r\n\r\n-
  Dropped GHC 7.8 support in favor of efficient and easy data conversion.\r\n\r\n##
  v0.3.0.0rc-1\r\n\r\n- improved documentation\r\n- fixed a bug with scope\r\n- small
  interface changes\r\n"
changelog-type: markdown
description: "# mustache\r\n\r\n![Build Status](https://github.com/JustusAdam/mustache/actions/workflows/build.yml/badge.svg)\r\n[![Hackage](https://img.shields.io/hackage/v/mustache.svg)](https://hackage.haskell.org/package/mustache)\r\n[![Join
  the chat at https://gitter.im/JustusAdam/mustache](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/JustusAdam/mustache?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nHaskell
  implementation of [mustache templates][mustache-homepage].\r\n\r\n[mustache-homepage]:
  https://mustache.github.io\r\n\r\nImplements the official [specs version 1.1.3](https://github.com/mustache/spec/releases/tag/v1.1.3)\r\n\r\n##
  Motivation\r\n\r\nThe old Haskell implementation of mustache templates [hastache][]
  seemed pretty abandoned to me. This implementation aims to be much easier to use
  and (fingers crossed) better maintained.\r\n\r\n[hastache]: https://hackage.haskell.org/package/hastache\r\n\r\nSince
  it is so easy to use and requires but a few files of code, I've also written a small
  executable that compiles and renders mustache templates with data input from json
  or yaml files.\r\n\r\n## Usage\r\n\r\n### Library\r\n\r\nPlease refer to the [documentation][]
  on hackage.\r\n\r\n[documentation]: https://hackage.haskell.org/package/mustache\r\n\r\n###
  Executable `haskell-mustache`\r\n\r\n    $ haskell-mustache --help\r\n    Simple
  mustache template substitution\r\n\r\n    arguments [OPTIONS] TEMPLATE [DATA-FILES]\r\n\r\n
  \   Common flags:\r\n      -t --templatedirs[=DIRECTORY]  The directory in which
  to search for the\r\n                                     templates\r\n      -?
  --help                      Display help message\r\n      -V --version                   Print
  version information\r\n\r\nCurrent implementation substitutes the `TEMPLATE` once
  with each `DATA-FILE`\r\n\r\n#### Example\r\n\r\n    $ haskell-mustache my-template-file
  data-file-1.json data-file-2.json data-file-3.json\r\n\r\n## Roadmap\r\n\r\n- [x]
  String parser for mustache templates\r\n- [x] Template substitution\r\n- [x] Standalone
  executable\r\n- [x] Support for 'set delimiter'\r\n- [x] More efficiency using `Text`
  rather than `String`\r\n- [x] More efficient Text parsing\r\n- [x] Test coverage
  provided via the official [specs](https://github.com/mustache/spec)\r\n- [x] Haddock
  documentation\r\n- [ ] More instances for `ToMustache` typeclass\r\n"
description-type: markdown
hash: 71f2876423f9d7a6216722aed58b33abd7312115fce1d278ecffa3c4de596fce
homepage: https://github.com/JustusAdam/mustache#readme
latest: 2.4.3
license-name: BSD-3-Clause
maintainer: dev@justus.science
synopsis: A mustache template parser library.
test-bench-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  base-unicode-symbols: '>=0'
  bytestring: '>=0'
  directory: '>=0'
  filepath: '>=0'
  hspec: '>=0'
  lens: '>=0'
  mustache: '>=0'
  process: '>=0'
  tar: '>=0'
  temporary: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  wreq: '>=0'
  yaml: '>=0'
  zlib: '>=0'
