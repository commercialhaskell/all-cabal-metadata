all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 1.0.0
- 2.0.0
author: Owen Shepherd
basic-deps:
  base: '>=4.0 && <5'
changelog: |
  # Revision history for multi-except

  ## Unreleased

  * Actually give the user a useful collection of errors

  ## 1.0.0 -- 2024-01-03

  * Split into two libraries, `multi-except`, and `multi-except:semigroupoid-instances`
  * Migrated to custom dlist, removing the dependency
  * Support more GHC versions (tested down to 7.0.4)

  ## 0.3.0.0 -- 2021-06-06

  * Switch to dlist-nonempty package

  ## 0.2.1.0 -- 2021-05-31

  * Added Bifunctor instance
  * Added Foldable instance
  * Added Traversable instance

  ## 0.2.0.0 -- 2021-05-29

  * Changed order of type variables in `succeed`
  * Now required GHC >= 6.8.1 due to ScopedTypeVariables usage

  ## 0.1.4.0 -- 2021-05-26

  * Added join, fromEitherPoly, throwErrors

  ## 0.1.3.0 -- 2021-05-26

  * Exposed fromEither

  ## 0.1.2.0 -- 2021-05-26

  * Added fromEither

  ## 0.1.1.0 -- 2021-05-11

  * Added Alt instance from semigroupoids

  ## 0.1.0.0 -- 2021-05-11

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # multi-except

  [![Hackage version](https://img.shields.io/hackage/v/multi-except?color=purple)](https://hackage.haskell.org/package/multi-except)
  [![CI Status](https://img.shields.io/github/actions/workflow/status/414owen/multi-except/haskell-ci.yml)](https://github.com/414owen/multi-except/actions)
  [![GitHub License](https://img.shields.io/github/license/414owen/multi-except)](https://github.com/414owen/multi-except/blob/master/LICENSE)

  multi-except - succeed, or return one or more errors

  ## Adding the dependency

  ```
  -- in your cabal file
    -- Add the main package (only depends on base!)
    , multi-except
    -- For the Alt instance (depends on semigroupoids)
    , multi-except:semigroupoid-instances
  ```

  ## Usage


  ```haskell
  {-# LANGUAGE ApplicativeDo #-}

  import Control.Applicative.MultiExcept

  errors :: MultiExcept String (Int, Int, Int)
  errors = do
    a <- throwError "no monad instance"
    b <- pure 12
    c <- throwError "i am scared"
    pure (a, b, c)

  -- errors: Errors ["no monad instance", "i am scared"]
  ```

  The use of `ApplicativeDo` is significant and necessary for using
  `MultiExcept` with do notation.

  `MultiExcept` is not a `Monad`, only an `Applicative`, so a few constraints
  apply, such as not being able to determine the structure of the rest of the
  computation based on a previously do-bound value. If the previous sentence was
  confusing, then you might want to consider using a writer monad instead.

  To compose with other applicative effects, you can use
  [`Data.Functor.Compose`](https://hackage.haskell.org/package/base-4.19.0.0/docs/Data-Functor-Compose.html).
description-type: markdown
hash: 7230080f5882ea38c5bab9cc34405d53d9368ad3e43d5bcdeadbd6f63af98d6c
homepage: https://github.com/414owen/multi-except
latest: 2.0.0
license-name: MIT
maintainer: owen@owen.cafe
synopsis: Multiple Exceptions
test-bench-deps:
  base: '>=0'
  hspec: '>=2 && <3'
  multi-except: '>=0'
  semigroupoids: '>=1 && <7'
