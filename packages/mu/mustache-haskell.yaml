all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
author: Daniel Choi
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <4.8'
  bytestring: '>=0'
  directory: '>=0'
  mustache-haskell: '>=0'
  optparse-applicative: '>=0.11.0 && <0.12.0'
  parsec: '>=0'
  pretty-show: '>=0'
  scientific: '>=0.3.0.0 && <0.4.0.0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "# mustache-haskell\n\nA Haskell implementation of mustache templates.
  Expects input data to be JSON. \n\nShould be compatible with the the [mustache\nspecification](http://mustache.github.io/mustache.5.html).
  \ Except lambdas are\nnot supported.\n\nSupported syntax:\n\n* basic variables\n*
  sections\n* inverted sections\n* comments (are suppressed)\n* partials\n* set delimiter\n\nThis
  project currently only provides a command line interface.\nLater versions will provide
  a library API for templating ToJSON\ninstances.\n\n\n## Install\n\nYou need the
  Haskell platform on your system.\n\n```\ncabal install mustache-haskell\n```\n\nOr
  alternatively\n\n``` \ngit clone git@github.com:danchoi/mustache-haskell.git\ncd
  mustache-haskell\ncabal sandbox init\ncabal install\n# Now copy .cabal-sandbox/bin/mus
  to your PATH\n```\n\n## Usage\n\n```\nmus template.mustache < input.json\n```\n\n```\nmus
  \n\nUsage: mus [-c] [-d TEMPLATE_DIRECTORY] TEMPLATE_FILE\n  A Haskell implementation
  of Mustache templates. On STDIN provide the JSON to\n  insert into the template.\n\nAvailable
  options:\n  -h,--help                Show this help text\n  -c                       Just
  output parse tree of template file\n  -d TEMPLATE_DIRECTORY    Template directory\n```\n\n##
  List separator syntax\n\nmustache-haskell adds one additional feature to the mustache
  specification.  If\nyou are outputing elements of a list, you can designate an optional
  list\nseparator with the following syntax:\n\n\n```\n{{#hobbies, }}{{name}}{{/hobbies}}\n```\n\nThis
  designates `\", \"` as the list separator and will output\n\n```\nsewing, brewing,
  cooking\n```\n\nwhen the input is \n\n```json\n{\"hobbies\":[{\"name\":\"sewing\"},{\"name\":\"brewing\"},{\"name\":\"cooking\"}]}\n```\n\n\n##
  Performance\n\nIn a few informal tests, \n\n```\nmus template.mustache < input.json\n```\n\nis
  about 10x faster than the Ruby mustache gem command-line implementation,\n\n```\nmustache
  - template.mustache < input.json\n```\n\n\n## Related projects\n\n* [whiskers](https://github.com/nejstastnejsistene/whiskers)
  Mustache templates with Template Haskell ([reddit](http://www.reddit.com/r/haskell/comments/2kjgg2/whiskers_moustache_templates_with_template_haskell/))\n*
  [hastache](https://github.com/lymar/hastache) Haskell implementation of Mustache
  templates\n* [mustache2hs](http://hackage.haskell.org/package/mustache2hs) takes
  in Haskell records (single data constructor only) and a list of mustache template
  and record name pairs, and generates Haskell code for functions that take an escape
  function and one of the records\n* [mustache.go](https://github.com/hoisie/mustache)
  an implementation of the mustache template language in Go\n\n\n"
description-type: markdown
hash: 31ec5097abf3cf11ae39230043505c8ee895b688d2c90692e545f916ed0bba2e
homepage: https://github.com/danchoi/mustache-haskell
latest: 0.1.0.5
license-name: MIT
maintainer: dhchoi@gmail.com
synopsis: Straight implementation of mustache templates
test-bench-deps: {}
