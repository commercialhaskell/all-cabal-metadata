all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.1.0
author: Maria Beatriz Walter Costa, Christian Hoener zu Siederdissen, 2017
basic-deps:
  ADPfusion: '>=0.5.2 && <0.5.3'
  ADPfusionSet: '>=0.0.0 && <0.0.1'
  BiobaseXNA: '>=0.9.3 && <0.9.4'
  DPutils: '>=0.0.1 && <0.0.2'
  FormalGrammars: '>=0.3.1 && <0.3.2'
  MutationOrder: '>=0'
  OrderedBits: '>=0.0.1 && <0.0.2'
  PrimitiveArray: '>=0.8.0 && <0.8.1'
  PrimitiveArray-Pretty: '>=0.0.0 && <0.0.1'
  ShortestPathProblems: '>=0.0.0 && <0.0.1'
  ViennaRNA-bindings: '>=0.233.1 && <0.233.2'
  aeson: '>=1.1'
  attoparsec: '>=0.13'
  base: '>=4.7 && <5.0'
  bimaps: '>=0.1.0 && <0.1.1'
  bytestring: '>=0'
  bytestring-trie: '>=0.2'
  cereal: '>=0.5'
  cereal-vector: '>=0.2'
  cmdargs: '>=0.10'
  containers: '>=0'
  deepseq: '>=1.4'
  directory: '>=0'
  errors: '>=2.0'
  file-embed: '>=0.0.8'
  filemanip: '>=0.3'
  filepath: '>=0'
  hashable: '>=1.2'
  lens: '>=4.0'
  log-domain: '>=0.10'
  mtl: '>=0'
  parallel: '>=3.2'
  serialize-instances: '>=0.1'
  split: '>=0.2'
  text: '>=1.0'
  unordered-containers: '>=0.2.7'
  vector: '>=0.11'
  vector-strategies: '>=0.4'
  zlib: '>=0.6'
changelog: |+
  0.0.1.0
  -------

  - new model that includes back-mutations (up to a small constant number)
  - compensatory mutations

  0.0.0.2
  -------

  - updated readme
  - included readme as manual

  0.0.0.1
  -------

  - initial checkin
  - travis-ci integration

changelog-type: markdown
description: "[![Build Status](https://travis-ci.org/choener/MutationOrder.svg?branch=master)](https://travis-ci.org/choener/MutationOrder)\n\nDetermine
  the most likely order of mutations from one RNA sequence to another.\n\n    Walter
  Costa, Maria Beatriz and Hoener zu Siederdissen, Christian and Tulpan, Dan and Stadler,
  Peter F. and Nowick, Katja  \n    *Uncovering the Structural Evolution of the Human
  Accelerated Region 1*  \n    2017, submitted  \n    [preprint](http://www.bioinf.uni-leipzig.de/~choener/pdfs/wal-hoe-2017.pdf)
  \ \n\n# General information\n\nGiven two RNA sequences, one ancestral, and one extant,
  we want to determine\nthe most likely path of evolution under different measures
  of fitness.\n\nThis program produces the (i) maximum-likelihood path, (ii) all end\nprobabilities,
  (iii) all start-end probabilities, (iv) all edge probabilities,\nand (v) the maximum
  expected accuracy path for these two RNA sequences.\n\nIn detail:  \n(i)   gives
  the optimal path(s) for the fitness function  \n(ii)  gives for each nucleotide
  polymorphism, how likely it is, that this mutation was introduced *last*  \n(iii)
  looks at all pairs of (first mutation, last mutation) and gives the probability
  that these two mutations are the begin and end of the chain of mutations  \n(iv)
  \ yields for all pairs of nodes (i -> j) the probability that this path occurs,
  over the whole ensemble of all possible paths  \n(v)   produces the path of maximal
  weight using the probabilities produced in (iv)  \n\n# Usage instructions\n\n##
  sequence generation\n\nFirst, the sequence data base needs to be created. The following
  assumptions are being made:\n- chimp_118.fa is the origin sequence.\n- human_118.fa
  is the target sequence.\n- all known mutations are to be ordered.\n- One intermediate
  (or backmutation) is allowed. This will already lead to an\n  expansion of the sequence
  space from ca. 250K sequences to 83.6M sequences!\n  Use your local compute cluster
  or download our precalculated data.\n\nThe following command will prepare the working
  database and populate the seqs subdirectory.\n\n    mkdir workdb\n    mkdir workdb/seqs\n
  \   mkdir workdb/rnafold\n    ./MutationOrder gensequences -w workdb --ancestral
  chimp_118.fa -e human_118.fa -g 1 --sequencelimit 100000000 --alphabet=ACGT --seqsperfile=100000\n\n##
  example usage\n\nWe assume that you have two Fasta files, *chimp_118.fa* and *human_118.fa*
  but\nthey can be named however is convenient. Each file has to contain exactly one\nsequence
  and both sequences have to be of the same length.\n\nFor testing with chimp and
  human, the provided chimp-human.json.gz database\nshould be used, otherwise the
  initial foldings will be recalculated. All\nrequired files are available under 'Binaries'
  at the bottom of the page.\n\nIn case, you don't want or can't use the provided
  work database, run\n./MutationOrder with --verbose\n\nWe then run\n\n    ./MutationOrder
  --workdb chimp-human.json.gz --scoretype pairdistcen --onlypositive --outputprefix
  test chimp_118.fa human_118.fa\n\nThis will generate ```test.run```, ```test-edge.eps```,
  and\n```test-meaorder.eps```.\n\nThe ```test.run``` file provides extensive output
  of the optimal path, the\nfirst-last probabilities, the edge probabilities, and
  the mea output. This\nconforms to (i) -- (v) mentioned above.\n\nThe two ```eps```
  files give a graphical representation of the edge\nprobabilities, for the ```meaorder```
  in order of the path of maximum expected\naccuracy.\n\nThe work database collects
  intermediate structures and their folding and is\nonly created once. The initial
  run will, however, take some time. I.e. for\n'HAR1' this requires 1-4 hours depending
  on the machine. Further runs complete\n*much* faster. In minutes for HAR1.\n\n##
  Command-line options\n\n    --help        provides short help\n    --verbose     will
  show folding steps during the initial run\n\n    -w\n     --workdb=ITEM              the
  database where to store intermediate foldings\n    -t\n    --temperature=NUM           annealing
  temperature. Values close to 0 favor optimal paths. The default is 1.0\n    --fillweight=FILLWEIGHT
  \    provides logarithmic and linear fill styles for probability plots. The full
  style always fills the box\n    --fillstyle=FILLSTYLE       normally, boxes are
  sized, but all in the same color. This changes the opacity of the color as well.
  Does not work well for eps files\n    --cooptcount=INT            how many co-optimals
  to count for (the count in the .run file is produced differently)\n    --cooptprint=INT
  \           how many co-optimals to actually print\n    --outprefix=ITEM            how
  to prefix all output files\n    --scoretype=SCORETYPE       choose 'mfe', 'centroid',
  'pairdistmfe', or 'pairdistcen' for the evaluation of each mutational step\n    --positivesquared
  \          square positive energies to penalize bad moves\n    --onlypositive              minimize
  only over penalties, not energy gains\n    --equalstart                each possible
  mutation is selected with equal probability as the initial one\n    --posscaled=NUM,NUM
  \        in =x,y will exponentiate all numbers >=x by the constant y. For value
  k>=x, we have k^y\n    --lkupfile=ITEM             developer option to feed the
  initial work database with known foldings (usable but very raw and undocumented.
  needs 5-line rnafold output)\n    --showmanual                will show this manual\n\nThe
  allowed score types are:  \n\n    mfe\nwhich optimizes based on the minimum free
  energy of each intermediate sequence\n    centroid\nwhich instead looks at the energy
  of the centroid structure\n    pairdistmfe\nwhich minimizes the base pair distance
  between following mutations using mfe structures\n    pairdistcen\nwhich minimizes
  the base pair distance between following mutations using centroid structures\n\n\n\n#
  Installation\n\nPre-built binaries for Linux are avaiable under [github\nreleases](https://github.com/choener/MutationOrder/releases)\n\nFollow
  [this\nlink](http://www.bioinf.uni-leipzig.de/~choener/software/MutationOrder.html)
  to\nthe bottom of the page for instructions to build from source.\n\n\n\n#### Contact\n\nChristian
  Hoener zu Siederdissen  \nLeipzig University, Leipzig, Germany  \nchoener@bioinf.uni-leipzig.de
  \ \nhttp://www.bioinf.uni-leipzig.de/~choener/  \n\n"
description-type: markdown
hash: 129dbb81fade83599432336eefef48c4f971d8c67c76cd5a242c8c86b0ac4749
homepage: https://github.com/choener/MutationOrder
latest: 0.0.1.0
license-name: GPL-3.0-only
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Most likely order of mutation events in RNA
test-bench-deps:
  MutationOrder: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  tasty: '>=0.11'
  tasty-quickcheck: '>=0.8'
  tasty-th: '>=0.1'
  vector: '>=0'
