all-versions:
- 0.3.0.1
author: Lucas V. R.
basic-deps:
  base: '>=4.16 && <4.19'
changelog: |
  # Revision history for multiwalk

  ## 0.3.0.1 -- 2023-07-17
  * Improve haddocks.

  ## 0.3.0.0 -- 2023-07-08
  * Add `Spec` kind, in particular `SpecSelf` for matching the type itself.

  ## 0.2.0.0 -- 2023-07-07
  * Change order of type arguments for `walkM`

  ## 0.1.0.0 -- 2023-04-05

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# MultiWalk\n\nThis library provides functionality for traversing data
  types recursively,\nacting on multiple types during the same traversal. In spirit,
  it is similar to\nthe `Walk` type class from `Pandoc.Walk`, but generalizes it by
  allowing\nmultiple types to be targeted by the traversal. Also, by default it only\nrequires
  an `Applicative` constraint on the action, making it suitable for\nsituations where
  you don't have a `Monad` (for instance, traversing within a\ncomposition of monads).\n\nSay,
  for instance, you want to query all code snippets from a Pandoc document,\nincluding
  both `Inline` and `Block` ones, such that the list of results is *in\nthe same order*
  as they appear in the document. There is no way to do this with\nPandoc's `Walk`
  type class, because it only supports querying or walking with\none type at once.
  With MultiWalk you are able to do this with a single query\nfunction that targets
  both types, and it'll look something like this:\n\n```haskell\nmulti :: Block ->
  [Text]\nmulti = buildMultiQ @PTag $ \\sub list ->\n    list ?> blks sub\n         ?>
  inls sub\n  where\n    blks _ (CodeBlock _ c) = [c]\n    blks f x = f x\n    inls
  _ (Code _ c) = [c]\n    inls f x = f x\n```\n\n(note, however, that this library
  does not ship with default instances for\nPandoc, so you will have to define them
  yourself. You can find a basic Pandoc\ninstance for reference, and the function
  above, in `Benchmark.hs` inside the\ntest directory.)\n\nAnother use case is when
  you want to modify a data type, perhaps targeting\nmultiple subtypes, and you want
  to do that inside a functor that is\n`Applicative` but not a `Monad`. Such functors
  may sound unusual, but one of the\ninteresting places where they appear are in composition
  of monads, which need\nnot be a monad itself. \n\nYou can find a use of such monad
  compositions in my other library\n[here](https://github.com/lucasvreis/org-mode-hs/blob/main/org-exporters/src/Org/Exporters/Processing/InternalLinks.hs).\nIt's
  used for resolving cross-references inside documents inside the functor\n`Compose
  M F`, where `M` is a state monad which holds the links it has found so\nfar, and
  `F` is a reader which receives the _final, future state_ (that will\nonly be ready
  _at the end of the computation_). In this way I can walk across\nthe document only
  once, registering and applying cross references at the same\ntime. Note that this
  is composition is semantically different from using monad\ntransformers, because
  they would require the reader state to be supplied before\nthe final state is available.\n"
description-type: markdown
hash: 6df03c682295a8050b8116e2631f170e4ac2916d683b76621a8741d320f3e530
homepage: ''
latest: 0.3.0.1
license-name: GPL-3.0-or-later
maintainer: '@lucasvr:matrix.org'
synopsis: Traverse data types via generics, acting on multiple types simultaneously.
test-bench-deps:
  base: '>=0'
  bytestring: '>=0.11.4 && <0.12'
  commonmark: '>=0.2.2 && <0.3'
  commonmark-pandoc: '>=0.2.1 && <0.3'
  deepseq: '>=1.4.6 && <1.5'
  multiwalk: '>=0'
  pandoc-types: '>=1.23 && <1.24'
  tasty: '>=1.4.3 && <1.5'
  tasty-bench: '>=0.3.3 && <0.4'
  tasty-hunit: '>=0.10.0 && <0.11'
  text: '>=1.2.5 && <2.1'
  transformers: '>=0.5.6 && <0.7'
