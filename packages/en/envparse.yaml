all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
- '0.4'
- 0.4.1
- 0.5.0
- 0.6.0
author: Matvey Aksenov
basic-deps:
  base: '>=4.6 && <5'
  containers: '>=0'
changelog: |
  0.6.0
  =====

  A PVP-compliant re-release of 0.5.2 with no changes. (I missed a breaking change back in 0.5.1.)

  0.5.2
  =====

    * Added `eitherReader`. (https://github.com/supki/envparse/pull/24)

  0.5.1
  =====

    * Added configurable maximum info block width (https://github.com/supki/envparse/pull/21).

    * Added `instance (Field e a, ...) => Field e (Maybe a)` for generic environment parsing. (https://github.com/supki/envparse/pull/16)

  0.5
  ===

    * Added `char`.

    * Fixed masking parse errors with default values. (https://github.com/supki/envparse/issues/8)

    * Replaced `keep` with `sensitive`. All variables are kept in the environment after a successul parse
      except those wrapped in `sensitive`. (https://github.com/supki/envparse/issues/9)

  0.4.1
  =====

    * Supported GHC 8.4.3.


  0.4
  ===

    * Supported GHC 8.0.1.

    * On GHC 7.8 and newer, as a secutiry measure, all declared variables are unset by the end of
      a successful parse.  If you want to keep the variable in the environment, use the `keep` modifier.
      (https://github.com/supki/envparse/pull/7)

  0.3.4
  =====

    * Added `splitOn`.

  0.3.3
  =====

    * Removed the unnecessary `AsEmpty` and `AsUnset` constraints on the error type
      in the `flag` and `switch` parsers.

  0.3.2
  =====

    * Added `showDef`.

  0.3.1
  =====

    * Supported `Generic`ally derived `Parser`s on GHC 7.10.

  0.3.0
  =====

    * Supported user-defined `Reader` errors. (https://github.com/supki/envparse/pull/4)

    * Widened the range of GHC versions to test the library with from 7.6–7.8 to 7.6–HEAD.

  0.2.2
  =====

    * Added `helpDoc`, a `Parser` pretty-printer for use in error messages.

  0.2.1
  =====

    * Cosmetic changes in the help output.

  0.2.0
  =====

    * Added `prefixed`.

    * Added `parseOr`, a slightly generalized version of `parse`.

    * Renamed `parseTest` to `parsePure`.

  0.1.0
  =====

    * Initial release.
changelog-type: markdown
description: |
  envparse
  ========
  [![Build status](https://github.com/supki/envparse/actions/workflows/ci.yml/badge.svg)](https://github.com/supki/envparse/actions/workflows/ci.yml)

  [optparse-applicative][0], but for environment variables

  See `example/Main.hs` for an executable example

  As to why anyone would want to use environment to configure their applications, here's [what some folks think][1] about it.

    [0]: https://hackage.haskell.org/package/optparse-applicative
    [1]: https://12factor.net/config
description-type: markdown
hash: df4483a7cf9829349b65248e2d6d692a83da807ae2cc3908013d3787a8d17251
homepage: https://supki.github.io/envparse
latest: 0.6.0
license-name: BSD-3-Clause
maintainer: matvey.aksenov@gmail.com
synopsis: Parse environment variables
test-bench-deps:
  base: '>=4.6 && <5'
  containers: '>=0'
  envparse: '>=0'
  hspec: '>=0'
  text: '>=0'
