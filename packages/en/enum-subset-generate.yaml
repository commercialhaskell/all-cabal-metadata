all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Georg Rudoy
basic-deps:
  base: '>=4.7 && <5'
  microlens: '>=0'
  template-haskell: '>=0'
changelog: |
  # Changelog for enum-subset-generate

  ## 0.1.0.3

  * Reverse compatibility with `template-haskell < 2.21.0.0`.

  ## 0.1.0.2

  * Compatibility with `template-haskell-2.21.0.0`.

  ## 0.1.0.1

  * Compatibility with `template-haskell-2.18.0.0`.

  ## 0.1.0.0

  * Initial release.
changelog-type: markdown
description: |
  # enum-subset-generate

  [![Build Status](https://travis-ci.org/0xd34df00d/enum-subset-generate.svg?branch=master)](https://travis-ci.org/0xd34df00d/enum-subset-generate)

  Generates an ADT having a subset of constructors of some other ADT along with a
  pair of functions to map between the two.

  ## Motivation

  Consider implementing FFI bindings for a library. The lower level (directly
  mapping the C API onto Haskell) might expose an enumeration as an ADT, not all
  values of which might make sense for higher-level well-typed code. In this case
  the higher-level bindings might instead expose the generated ADT.

  As an example, consider a parser library for a language like C++ or Java. A
  cursor pointing to a node in an AST might have a property like
  ```c
  enum AccessSpecifier {
      AS_Invalid,
      AS_Public,
      AS_Protected,
      AS_Private
  };

  AccessSpecifier getAccessSpecifier(Cursor*);
  ```

  Access specifier doesn't make much sense for a node representing a `for`-loop,
  hence the `AS_Invalid` member.

  A low-level Haskell bindings library might translate this enum into
  ```haskell
  module Library.Bindings.FFI where

  -- ...

  data AccessSpecifier = Invalid
                       | Public
                       | Protected
                       | Private
                       deriving (Eq, Ord, Show)

  getAccessSpecifier :: Cursor -> BindingsMonad AccessSpecifier
  ```

  A more type-safe wrapper around this might introduce typed cursors and add a
  constraint to the function:
  ```haskell
  module Library.Bindings.Pure where

  import qualified Library.Bindings.FFI as FFI

  accessSpecifier :: HasAccessSpecifier t => Cursor t -> FFI.AccessSpecifier
  ```
  so this `accessSpecifier` is guaranteed to always produce a non-`Invalid`
  result. But since it's not explicitly stated in the types, the calling code will
  not be able to know about this, so the compiler's case analyzer might still
  require handling the case of `Invalid`.

  Using this library, one might instead just do
  ```haskell
  -- Generate an AccessSpecifier in this module using FFI.AccessSpecifier
  -- but without the FFI.Invalid constructor.
  mkEnum ''FFI.AccessSpecifier ['FFI.Invalid]

  accessSpecifier :: HasAccessSpecifier t => Cursor t -> AccessSpecifier
  ```
description-type: markdown
hash: 3dad1937444f41ceaaaac50906e5e0d6fb7ea855c5dffd27a53de460c4e65c96
homepage: https://github.com/0xd34df00d/enum-subset-generate#readme
latest: 0.1.0.3
license-name: BSD-3-Clause
maintainer: 0xd34df00d@gmail.com
synopsis: Generate an ADT being a subset of another ADT, and the corresponding mappings.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  enum-subset-generate: '>=0'
  generic-random: '>=0'
  hspec: '>=0'
  microlens: '>=0'
  template-haskell: '>=0'
