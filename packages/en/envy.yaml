all-versions:
- 1.0.0.0
- 1.3.0.0
- 1.3.0.1
- 1.3.0.2
- 1.5.0.0
- 1.5.1.0
- 2.0.0.0
- 2.1.0.0
- 2.1.1.0
- 2.1.2.0
- 2.1.3.0
author: David Johnson, Tim Adams, Eric Mertens, Nicolas Rolland
basic-deps:
  base: '>=4.11 && <5'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.5 && <0.7'
  mtl: '>=2.2 && <2.3 || >=2.3 && <2.4'
  text: '>=1.2 && <1.3 || >=2.0 && <2.2'
  time: '>=1.5 && <2.0'
  transformers: '>=0.4 && <0.7'
changelog: ''
changelog-type: ''
description: "envy\n===================\n[![Hackage](https://img.shields.io/hackage/v/envy.svg)](https://hackage.haskell.org/package/envy)\n[![Hackage
  Dependencies](https://img.shields.io/hackage-deps/v/envy.svg)](https://packdeps.haskellers.com/feed?needle=envy)\n![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)\n![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)\n[![Build Status](https://travis-ci.org/dmjio/envy.svg?branch=master)](https://travis-ci.org/dmjio/envy)\n\nLet's
  face it, dealing with environment variables in Haskell isn't that satisfying.\n\n```haskell\nimport
  System.Environment\nimport Data.Text (pack)\nimport Text.Read (readMaybe)\n\ndata
  ConnectInfo = ConnectInfo {\n  pgPort :: Int\n  pgURL  :: Text\n} deriving (Show,
  Eq)\n\ngetPGPort :: IO ConnectInfo\ngetPGPort = do\n  portResult <- lookupEnv \"PG_PORT\"\n
  \ urlResult  <- lookupEnv \"PG_URL\"\n  case (portResult, urlResult) of\n    (Just
  port, Just url) ->\n      case readMaybe port :: Maybe Int of\n\tNothing -> error
  \"PG_PORT isn't a number\"\n\tJust portNum -> return $ ConnectInfo portNum (pack
  url)\n    (Nothing, _) -> error \"Couldn't find PG_PORT\"\n    (_, Nothing) -> error
  \"Couldn't find PG_URL\"\n    -- Pretty gross right...\n```\n\nAnother attempt to
  remedy the lookup madness is with a `MaybeT IO a`. See below.\n```haskell\n{-# LANGUAGE
  GeneralizedNewtypeDeriving #-}\n\nimport Control.Applicative\nimport Control.Monad.Trans.Maybe\nimport
  Control.Monad.IO.Class\nimport System.Environment\n\nnewtype Env a = Env { unEnv
  :: MaybeT IO a }\n    deriving (Functor, Applicative, Monad, MonadIO, Alternative,
  MonadPlus)\n\ngetEnv :: Env a -> IO (Maybe a)\ngetEnv env = runMaybeT (unEnv env)\n\nenv
  :: String -> Env a\nenv key = Env (MaybeT (lookupEnv key))\n\nconnectInfo :: Env
  ConnectInfo\nconnectInfo = ConnectInfo\n   <$> env \"PG_HOST\"\n   <*> env \"PG_PORT\"\n
  \  <*> env \"PG_USER\"\n   <*> env \"PG_PASS\"\n   <*> env \"PG_DB\"\n```\nThis
  abstraction falls short in two areas:\n  - Lookups don't return any information
  when a variable doesn't exist (just a `Nothing`)\n  - Lookups don't attempt to parse
  the returned type into something meaningful (everything is returned as a `String`
  because `lookupEnv :: String -> IO (Maybe String)`)\n\nWhat if we could apply aeson's
  `FromJSON` / `ToJSON` pattern to give us variable lookups that provide both key-lookup
  and parse failure information?\nArmed with the `GeneralizedNewTypeDeriving` extension
  we can derive instances of `Var` that will parse to and from an environment variable.
  The `Var` typeclass is simply:\n```haskell\nclass Var a where\n  toVar   :: a ->
  String\n  fromVar :: String -> Maybe a\n```\nWith instances for most concrete and
  primitive types supported (`Word8` - `Word64`, `Int`, `Integer`, `String`, `Text`,
  etc.) the `Var` class is easily deriveable. The `FromEnv` typeclass provides a parser
  type that is an instance of `MonadError String` and `MonadIO`. This allows for connection
  pool initialization inside of our environment parser and custom error handling.
  The `ToEnv` class allows us to create an environment configuration given any `a`.
  See below for an example.\n\n```haskell\n{-# LANGUAGE ScopedTypeVariables        #-}\n{-#
  LANGUAGE RecordWildCards            #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving
  #-}\n{-# LANGUAGE OverloadedStrings          #-}\n{-# LANGUAGE DeriveDataTypeable
  \        #-}\n------------------------------------------------------------------------------\nmodule
  Main ( main ) where\n------------------------------------------------------------------------------\nimport
  \          Control.Applicative\nimport           Control.Exception\nimport           Control.Monad\nimport
  \          Data.Either\nimport           Data.Word\nimport           System.Environment\nimport
  \          System.Envy\n------------------------------------------------------------------------------\ndata
  ConnectInfo = ConnectInfo {\n      pgHost :: String\n    , pgPort :: Word16\n    ,
  pgUser :: String\n    , pgPass :: String\n    , pgDB   :: String\n  } deriving (Show)\n\n------------------------------------------------------------------------------\n--
  | FromEnv instances support popular aeson combinators *and* IO\n-- for dealing with
  connection pool initialization. `env` is equivalent to (.:) in `aeson`\n-- and `envMaybe`
  is equivalent to (.:?), except here the lookups are impure.\ninstance FromEnv ConnectInfo
  where\n  fromEnv _ =\n    ConnectInfo <$> envMaybe \"PG_HOST\" .!= \"localhost\"\n\t\t<*>
  env \"PG_PORT\"\n\t\t<*> env \"PG_USER\"\n\t\t<*> env \"PG_PASS\"\n\t\t<*> env \"PG_DB\"\n\n------------------------------------------------------------------------------\n--
  | To Environment Instances\n-- (.=) is a smart constructor for producing types of
  `EnvVar` (which ensures\n-- that Strings are set properly in an environment so they
  can be parsed properly\ninstance ToEnv ConnectInfo where\n  toEnv ConnectInfo {..}
  = makeEnv\n       [ \"PG_HOST\" .= pgHost\n       , \"PG_PORT\" .= pgPort\n       ,
  \"PG_USER\" .= pgUser\n       , \"PG_PASS\" .= pgPass\n       , \"PG_DB\"   .= pgDB\n
  \      ]\n\n------------------------------------------------------------------------------\n--
  | Example\nmain :: IO ()\nmain = do\n   setEnvironment (toEnv :: EnvList ConnectInfo)\n
  \  print =<< do decodeEnv :: IO (Either String ConnectInfo)\n   -- unsetEnvironment
  (toEnv :: EnvList ConnectInfo)  -- remove when done\n```\n\nOur parser might also
  make use a set of an optional default values provided by the user,\nfor dealing
  with errors when reading from the environment\n\n```haskell\ninstance FromEnv ConnectInfo
  where\n  fromEnv Nothing =\n    ConnectInfo <$> envMaybe \"PG_HOST\" .!= \"localhost\"\n\t\t<*>
  env \"PG_PORT\"\n\t\t<*> env \"PG_USER\"\n\t\t<*> env \"PG_PASS\"\n\t\t<*> env \"PG_DB\"\n\n
  \ fromEnv (Just def) =\n    ConnectInfo <$> envMaybe \"PG_HOST\" .!= (pgHost def)\n\t\t<*>
  envMaybe \"PG_PORT\" .!= (pgPort def)\n\t\t<*> env \"PG_USER\" .!= (pgUser def)\n\t\t<*>
  env \"PG_PASS\" .!= (pgPass def)\n\t\t<*> env \"PG_DB\" .!= (pgDB def)\n```\n\n\n*Note*:
  As of base 4.7 `setEnv` and `getEnv` throw an `IOException` if a `=` is present
  in an environment. `envy` catches these synchronous exceptions and delivers them\npurely
  to the end user.\n\nGenerics\n===================\n\nAs of version `1.0`, all `FromEnv`
  instance boilerplate can be completely removed thanks to `GHC.Generics`! Below is
  an example.\n\n```haskell\n{-# LANGUAGE DeriveGeneric #-}\nmodule Main where\n\nimport
  System.Envy\nimport GHC.Generics\nimport System.Environment.Blank\n\n-- This record
  corresponds to our environment, where the field names become the variable names,
  and the values the environment variable value\ndata PGConfig = PGConfig {\n    pgHost
  :: String -- \"PG_HOST\"\n  , pgPort :: Int    -- \"PG_PORT\"\n  } deriving (Generic,
  Show)\n\ninstance FromEnv PGConfig\n-- Generically creates instance for retrieving
  environment variables (PG_HOST, PG_PORT)\n\nmain :: IO ()\nmain = do\n  _ <- setEnv
  \"PG_HOST\" \"valueFromEnv\" True\n  _ <- setEnv \"PG_PORT\"  \"66354651\" True\n
  \ print =<< do decodeEnv :: IO (Either String PGConfig)\n -- > PGConfig { pgHost
  = \"valueFromEnv\", pgPort = 66354651 }\n```\n\nIf the variables are not found in
  the environment, the parser will currently fail with an error about the first missing
  field.\n\nThe user can decide to provide a default value, whose fields will be used
  by the generic instance, if retrieving them from the environment fails.\n\n```haskell\ndefConfig
  :: PGConfig\ndefConfig = PGConfig \"localhost\" 5432\n\nmain :: IO ()\nmain = do\n
  \ _ <- setEnv \"PG_HOST\" \"customURL\" True\n  print =<< decodeWithDefaults defConfig\n
  -- > PGConfig { pgHost = \"customURL\", pgPort = 5432 }\n```\n\nSuppose you'd like
  to customize the field name (i.e. add your own prefix, or drop the existing record
  prefix). This too is possible. See below.\n\n```haskell\n{-# LANGUAGE DeriveGeneric
  #-}\nmodule Main where\n\nimport System.Envy\nimport GHC.Generics\n\ndata PGConfig
  = PGConfig {\n    connectHost :: String -- \"PG_HOST\"\n  , connectPort :: Int    --
  \"PG_PORT\"\n  } deriving (Generic, Show)\n\ninstance DefConfig PGConfig where\n
  \ defConfig = PGConfig \"localhost\" 5432\n\n-- All fields will be converted to
  uppercase\ninstance FromEnv PGConfig where\n  fromEnv = gFromEnvCustom Option {\n
  \                   dropPrefixCount = 7\n                  , customPrefix = \"CUSTOM\"\n\t\t
  \ }\n\nmain :: IO ()\nmain =\n  _ <- setEnv \"CUSTOM_HOST\" \"customUrl\" True\n
  \ print =<< do decodeEnv :: IO (Either String PGConfig)\n -- PGConfig { pgHost =
  \"customUrl\", pgPort = 5432 }\n```\n\nIt's also possible to avoid typeclasses altogether
  using `runEnv` with `gFromEnvCustom`.\n\n```haskell\n{-# LANGUAGE DeriveGeneric
  #-}\nmodule Main where\n\nimport System.Envy\nimport GHC.Generics\n\ndata PGConfig
  = PGConfig {\n    pgHost :: String -- \"PG_HOST\"\n  , pgPort :: Int    -- \"PG_PORT\"\n
  \ } deriving (Generic, Show)\n\n-- All fields will be converted to uppercase\ngetPGEnv
  :: IO (Either String PGConfig)\ngetPGEnv = runEnv $ gFromEnvCustom defOption\n                                   (Just
  (PGConfig \"localhost\" 5432))\n\nmain :: IO ()\nmain = print =<< getPGEnv\n --
  PGConfig { pgHost = \"localhost\", pgPort = 5432 }\n```\n"
description-type: markdown
hash: 1d4f3c09d8db62d7ff5e2d63c90368cb5703d57b57605145bec33bf1ab8edd22
homepage: ''
latest: 2.1.3.0
license-name: BSD-3-Clause
maintainer: djohnson.m@gmail.com
synopsis: An environmentally friendly way to deal with environment variables
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  envy: '>=0'
  hspec: '>=0'
  mtl: '>=0'
  quickcheck-instances: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
