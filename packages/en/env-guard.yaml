all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
author: Thomas Bidne
basic-deps:
  base: '>=4.14.0.0 && <4.22'
changelog: |
  # Revision history for env-guard

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## [0.2.1] -- 2025-07-17
  ### Changed
  * Fixed `Show ExpectEnv` instance constructor name.
  * Explicitly Re-export `ExpectEnv` data constructors from
    `System.Environment.Guard`.
  * Doctests use cabal external command, hence no longer part of test suite.
    Therefore `--enable-tests` will no longer incur a GHC dependency.

  ## [0.2] -- 2022-07-02
  ### Changed
  * Rename `guardExpected` functions to `guardEquals` to better match ExpectEnv type.

  ## [0.1.1] -- 2022-07-01
  ### Added
  * Add higher-level `withGuard` combinator.
  * Add "OrElse" pattern.

  ## [0.1] -- 2022-06-29

  * First version. Released on an unsuspecting world.

  [0.2.1]: https://github.com/tbidne/env-guard/compare/0.2..0.2.1
  [0.2]: https://github.com/tbidne/env-guard/compare/0.1.1..0.2
  [0.1.1]: https://github.com/tbidne/env-guard/compare/0.1..0.1.1
  [0.1]: https://github.com/tbidne/env-guard/releases/tag/0.1
changelog-type: markdown
description: |-
  <div align="center">

  # env-guard

  [![Hackage](https://img.shields.io/hackage/v/env-guard)](https://hackage.haskell.org/package/env-guard)
  [![ci](http://img.shields.io/github/actions/workflow/status/tbidne/env-guard/ci.yaml?branch=main)](https://github.com/tbidne/env-guard/actions/workflows/ci.yaml)
  [![MIT](https://img.shields.io/github/license/tbidne/env-guard?color=blue)](https://opensource.org/licenses/MIT)

  </div>

  # Introduction

  This package is used to guard `IO` actions behind an environment variable.

  # Examples

  ## Simple

  ```haskell
  guardSet :: String -> IO a -> IO (Maybe a)

  -- Run function if env var AppEnv is set (to anything).
  guardSet "AppEnv" runProd
  ```

  ```haskell
  guardEquals :: String -> String -> IO a -> IO (Maybe a)

  -- Run function if env var AppEnv is set to "prod" (case-insensitive).
  guardEquals "AppEnv" "prod" runProd
  ```

  ```haskell
  guardPredicate :: String -> (String -> Bool) -> IO a -> IO (Maybe a)

  -- Run function if env var AppEnv's value satisfies the predicate.
  guardPredicate "AppEnv" (\s -> s == "staging" || s == "dev") runTests
  ```

  ## Higher-Level Combinators

  ```haskell
  -- withGuard uses the 'ExpectEnv' type to determine which of the above three
  -- functions to call.
  withGuard :: String -> ExpectEnv -> IO a -> IO (Maybe a)

  -- equivalent to 'guardSet "BUILD_DOCS" buildDocs'.
  withGuard "BUILD_DOCS" ExpectEnvSet buildDocs

  -- equivalent to 'guardEquals "BUILD_DOCS" "true" buildDocs'.
  withGuard "BUILD_DOCS" (ExpectEnvEquals "true") buildDocs
  ```

  ```haskell
  -- guardOrElse runs one of two IO actions, depending on the success of the env
  -- variable lookup.
  guardOrElse :: String -> ExpectEnv -> IO a -> IO e -> IO (Either e a)

  -- Runs runA if DO_A is set; otherwise runs runB.
  guardOrElse "DO_A" ExpectEnvSet runA runB

  -- guardOrElse' specialized to the same type.
  guardOrElse' :: String -> ExpectEnv -> IO a -> IO a -> IO a

  -- Runs runTests if RUN_TESTS is set; otherwise prints a message.
  guardOrElse' "RUN_TESTS" ExpectEnvSet runTests (putStrLn "*** Tests Disabled ***")
  ```
description-type: markdown
hash: f50499a07c5eddc8309b9896363e9861a28091f4f96254f9b76bc34426e25c79
homepage: https://github.com/tbidne/env-guard/
latest: 0.2.1
license-name: MIT
maintainer: tbidne@protonmail.com
synopsis: Conditionally running IO actions based on environment variables.
test-bench-deps: {}
