all-versions:
- 0.0.0
- 0.1.0
- 0.1.1
- 0.2.1
- 0.2.2
author: Sam Boosalis
basic-deps:
  array: '>=0.5'
  base: '>=4.7 && <5'
  containers: '>=0.5'
  deepseq: '>=1.3'
  enumerate: '>=0'
  ghc-prim: '>=0.3'
  spiros: '>=0'
  template-haskell: '>=2.9'
  vinyl: '>=0.5'
changelog: ''
changelog-type: ''
description: |
  # enumerate

  [![Hackage](https://img.shields.io/hackage/v/enumerate.svg)](https://hackage.haskell.org/package/enumerate)
  [![Build Status](https://secure.travis-ci.org/sboosali/enumerate.svg)](http://travis-ci.org/sboosali/enumerate)

  Enumerate all the values in a finite type (automatically). Provides:

  1. a typeclass for enumerating all values in a finite type,
  2. a generic instance for automatically deriving it, and

  # example

  ```haskell
      {-# LANGUAGE DeriveGeneric, DeriveAnyClass #-}
      import Data.Enumerate (Enumerable(..))
      import Data.Generics (Generics)

      data CrudOp = Add | Edit | Delete | View
       deriving (Eq,Ord,Enum,Bounded,Generic,Enumerable)
      data Route = Home | Person CrudOp | House CrudOp
       deriving (Eq,Ord,Generic,Enumerable)

      >>> enumerated :: [Route]
      [Home, Person Add, Person Edit, Person Delete, Person View, House Add, House Edit, House Delete, House View]
  ```

  # (extensive) documentation:
  https://hackage.haskell.org/package/enumerate/docs/Enumerate.html

  http://sboosali.github.io/documentation/enumerate/Enumerate.html (when hackage won't build the haddocks)

  # related:

  To reify functions, partial or total, into a Map,
  see [enumerate-function](https://github.com/sboosali/enumerate-function).
description-type: markdown
hash: d9461683af275a6e091d9effc013caa3e7e4db24ca833677470dd3311e8d892d
homepage: https://github.com/sboosali/enumerate
latest: 0.2.2
license-name: MIT
maintainer: samboosalis@gmail.com
synopsis: enumerate all the values in a finite type (automatically)
test-bench-deps: {}
