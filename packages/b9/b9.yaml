all-versions:
- 0.2.0
- 0.2.1
- 0.2.3
- 0.2.4
- 0.2.5
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.7
- 0.5.8
- 0.5.9
- 0.5.10
- 0.5.13
- 0.5.14
- 0.5.15
- 0.5.16
- 0.5.17
- 0.5.18
- 0.5.19
- 0.5.20
- 0.5.21
- 0.5.30
- 0.5.41
- 0.5.42
- 0.5.43
- 0.5.47
- 0.5.48
- 0.5.49
- 0.5.50
- 0.5.51
- 0.5.52
- 0.5.63
- 0.5.65
- 0.5.66
- 0.5.67
- 0.5.68
- 0.5.68.1
- 0.5.68.2
- 0.5.68.3
- 0.5.68.4
- 0.5.69.0
- 1.0.0
- 1.0.1
- 1.1.0
- 1.1.1
- 2.0.0
- 2.1.0
- 3.1.0
- 3.2.0
- 3.2.3
author: Sven Heyll <svh@posteo.de>
basic-deps:
  ConfigFile: '>=1.1.4 && <1.2'
  QuickCheck: '>=2.5 && <3'
  aeson: '>=1.4 && <1.5'
  async: '>=2 && <3'
  b9: '>=0'
  base: '>=4.12 && <5'
  base64-bytestring: '>=1 && <2'
  bifunctors: '>=5 && <6'
  binary: '>=0.8 && <0.9'
  boxes: '>=0.1 && <0.2'
  bytestring: '>=0.10.8 && <1'
  conduit: '>=1 && <2'
  conduit-extra: '>=1 && <2'
  containers: '>=0.6 && <1'
  directory: '>=1.3 && <2'
  exceptions: '>=0.10 && <0.11'
  extensible-effects: '>=5 && <6'
  filepath: '>=1.4 && <1.5'
  free: '>=4.12 && <6'
  hashable: '>=1.2 && <2'
  hspec: '>=2.7 && <2.8'
  hspec-expectations: '>=0.8 && <0.9'
  lens: '>=4 && <5'
  monad-control: '>=1 && <2'
  mtl: '>=2 && <3'
  neat-interpolation: '>=0.3 && <1'
  optparse-applicative: '>=0.13 && <1'
  parallel: '>=3.2 && <4'
  parsec: '>=3.1 && <4'
  posix-pty: '>=0.2 && <1'
  pretty: '>=1.1 && <2'
  pretty-show: '>=1.6 && <2'
  process: '>=1.4 && <2'
  random: '>=1.1 && <2'
  shake: '>=0.17.6 && <0.20'
  syb: '>=0.6 && <1'
  tagged: '>=0.8 && <0.9'
  template: '>=0.2 && <1'
  temporary: '>=1.3 && <1.4'
  text: '>=1.2 && <1.3'
  time: '>=1.6 && <2'
  transformers: '>=0.5 && <1'
  unix: '>=2.7 && <3'
  unordered-containers: '>=0.2 && <1'
  vector: '>=0.11 && <1'
  with-utf8: '>=0'
  yaml: '>=0.8 && <1'
changelog: "# Changelog for B9\n\n## 3.2.3\n\n* Provide nix flake\n\n## 3.2.2\n\n*
  Relax version dependencies\n\n## 3.2.1\n\n* Use with-utf8 package to get around
  `invalid argument (invalid character)` kind of\n  problems.\n\n## 3.2.0\n\n* Workarounds
  for libvirtd path length restrictions; \n  Libvirt doesn't like paths longer than
  63\n* Add config file option `image_file_names_shortener_base_path`\n\n## 3.1.0\n\n*
  Introduced `getVirtualSizeForRawImage`, `cmdStdout`, `hostCmdStdoutEither`, `HostCommandStdout`.\n*
  More stable parsing of qemu-img info output in `getVirtualSizeForRawImage`.\n* Fixes
  a bug were size files contain garbage if newer versions of qemu-img are used.\n\n##
  3.0.0\n\n* Run the libvirt_lxc builder in an artificial pseudo-terminal if b9c is
  run\n  outside a terminal.\n* Relax version constraints for `hashable` dependency\n\n###
  Breaking Changes\n\n* Change B9 configuration API: Change the field to a list\n\n##
  2.1.0\n\n* Add a new config parameter for the default Ext4 file system attributes.
  \n* `Ext4_64` is deprecated from now on, please use `Ext4` and configure the\n  `ext4_attributes:
  [\"64bit\"]`.\n\n## 2.0.0\n\n### Breaking Changes\n\n* Specify upper version bounds
  for all project dependencies\n* Move the `interactive` flag from the `B9Config`
  to the `BuildInfo`\n  * `isInteractive` now requires the `BuildInfoReader` effect
  \n  * Add the `runB9Interactive` function, that can by used to \n    make the `bsIsInteractive`
  field in `BuildInfo` `True`\n  * Add the `cmdInteractive` function, that executes
  a command \n    with inherited stdin/stdout if `runB9Interactive` was called.\n
  \ * Remove the interactivity functionality from the `cmd` function   \n\n### Minor
  Changes\n\n* Fix bug in the parsing of `console` key in the `systemd-nspawn` \n
  \ configuration section: When a user specifies `console: pipe` \n  this effects
  will be the same as if `console: read-only` was specified.\n* Fix bug where the
  timeout factor configuration option given in a \n  configuration file is ignored.\n\n##
  1.1.1\n\n* When `unique_build_dirs` __is enabled:__ \n    use a truely random build-id,
  such that no matter how much\n    or how little time passes between two consequitive
  builds, the `BUILD_ID`s \n    will always differ with the same probability.\n\n##
  1.1.0\n\n* Fix unintended deletion of images that are wrongly classified as obsolete.\n*
  Add a configuration parameter for guarding operations, for which \n  no timeout
  values was specified: `default_timeout_seconds`.  \n* Introduce a configuration
  parameter to specify an optional **timeout factor**.\n  Since the introduction of
  __SystemdNspawn__ support, most invokation of \n  external system commands, e.g.
  `mount`, are guarded by short timeouts.\n  During testing I discovered that some
  systems are just slower and might \n  run into a timeout.\n  To mitigate that, a
  user can now configure a **timeout factor** that is \n  applied to the internal,
  hard-coded time values.\n* Change NIX expressions to use `haskellPackages`\n  instead
  of `myHaskellPackages`.\n\n## 1.0.1\n\n* Remove dhall\n* Cleanup `b9.cabal`\n* Replace
  `fail` with `error`\n\n## 1.0.0\n\n* Add `SystemdNspawn` support\n* Improve command
  execution\n* Improve nix build expressions\n\n## 0.5.69.0\n\n* Add new `ImageResize`
  option `ShrinkToMinimumAndIncrease`\n* Remove the byte unit from `SizeUnit`\n* Add
  new utility functions to `B9.DiskImages` for image size calculations\n\n## 0.5.68.3\n\n*
  Fix issue #10: The CLI parameter `--network host` is ignored\n* Flush the log output
  after every log message to stdout\n\n## 0.5.68.2\n\n* Fix a bug in the shared image
  Shake rule causing unnecessary rebuilds\n\n* Rename the `buildDirRoot` string template
  environment variable to `buildDir`\n\n## 0.5.68.1\n\n* Fix positional argument enumeration
  in the `Enviromnent`; CLI arguments\n  are passed via the keys `arg_1 .. arg_N`
  in the `Environment`.\n  They are currently passed in reverse order and start from
  `arg_0`\n  instead of `arg_1`. See github issues #6 and #9.\n\n* Fix #7 shared image
  meta info download and\n  generalize and simplify `B9ConfigOverrid` while at it.\n\n*
  Remove `Trying to load config file` messages\n\n* Fix #8 - resurrect the environment
  variable `buildDirRoot`.\n\n## 0.5.68\n\n* Allow version specific config file resolution\n\n
  \ B9 changes the config file format from time to time. To enable\n  simultaneous
  use of different B9 versions with conflicting config file formats\n  the user may
  provide version specific default config files, and B9 will\n  prefer the file matching
  its own version most closely.\n\n  When loading its config file, B9 will now look
  for, and prefer\n  config files suffixed with the longest matching version.\n\n
  \ For example: If B9 has version 0.5.68 these config files will be tried:\n\n  *
  ~/.b9/b9.conf.0.5.68\n  * ~/.b9/b9.conf.0.5\n  * ~/.b9/b9.conf.0\n  * ~/.b9/b9.conf\n\n
  \ If custom config file path are passed to B9 they will be tried first, and\n  also
  with the version appended.\n  For example, when runing `b9c -c other-config-path
  list` these paths would be tried:\n\n  * other-config-path.0.5.68\n  * other-config-path.0.5\n
  \ * other-config-path.0\n  * other-config-path\n  * /home/sven/.b9/b9.conf.0.5.68\n
  \ * /home/sven/.b9/b9.conf.0.5\n  * /home/sven/.b9/b9.conf.0\n  * /home/sven/.b9/b9.conf\n\n##
  0.5.67\n\n* Iron out UTF-8 decoding issues\n\n  * Use `Data.Text` in more places\n\n
  \ * Remove `ByteStringGenerator`\n\n  * Change `ToContentGenerator` to produce only
  (strict) `Data.Text.Text`s\n\n* Add `B9.Text` a module with conversion functions
  for different string types.\n\n* Add helper functions and type for Erlang parsing:\n\n
  \ * `textToErlangAst`,\n\n  * `stringToErlangAst` and\n\n  * `ErlangAST`\n\n## 0.5.66\n\n*
  Fix the Nix package:\n\n  * Get rid of the virsh path configuration item\n\n  *
  Allow setting the path to @/.../libexec/libvirt_lxc@ via environment variable\n\n##
  0.5.65\n\n* Refactor the B9 Monad to use `extensible-effects`\n\n## 0.5.64\n\n*
  Refactor and prepare for more drastic changes\n\n* Fix runtime errors due to `undefined`
  values in the environment\n\n## 0.5.63\n\n* Depend on `shake-0.17.6` to fix build
  errors\n\n## 0.5.62\n\n* Rewrite `B9.Shake.SharedImageRules` in line with\n  Shake's
  example for custom rules\n\n* Replace `ConcatableSyntax` by using `Binary` instances,
  and also\n\n  * Remove/Inline `encodeSyntax` by using `Binary.encode`\n\n  * Rename
  `decodeSyntax` to `decodeOrFail'` and delegate to `Binary.decodeOrFail`.\n\n* Add
  a newtype wrapper around `YamlObject` for **cloud-init** yaml documents\n  `CloudConfigYaml`\n\n
  \ This new type serves the purpose of add the `#cloud-config`\n  line to the top
  of the generated yaml document,\n  as [required by cloud-init](https://cloudinit.readthedocs.io/en/latest/topics/format.html#cloud-config-data).\n\n
  \ The `Binary` instance adds this **header line** and\n  delegates the rendering
  of the yaml document to\n  `YamlObject`.\n\n* Remove the rendering of this header
  line in the `YamlObject`\n  `Binary` instance.\n\n* Rename `RenderYaml` to `RenderYamlObject`
  In order to prevent unexpected\n  runtime behaviour in code that uses this library.\n\n*
  Introduce the type `Environment` that replaces the ubiquotus `[(String, String)]`\n
  \ by a lazy `Text` based `HashMap`.\n\n* Add `addLocalPositionalArguments`\n\n*
  Rename the previous `B9.Artifact.Content` to `B9.Artifact.Content`\n\n* Introduce
  `ContentGenerator` as an open, extensible alternative\n  to `Content`, `AST` and
  `CanRender` in the module\n  `B9.Artifact.Content`\n* Rename-and-Split refactor
  `B9.ArtifactSource{Impl}` to `B9.Artifact.Generator.{..}`\n\n* Move `CanRender`
  from `B9.Artifact.Content.AST` to `B9.Artifact.Content`\n\n* Switch to lazy `Text`s
  and `ByteString`s where possible, since B9 might\n  read/generate large files.\n\n*
  Rename `CanRender` to `ToContentGenerator`\n  and change the method signatur to
  return the new `ContentGenerator` type\n\n* Fix spelling: Rename B9Invokation to
  B9Invocation\n\n* Rename `FromAST` to `FromAST`\n\n* Rearrange modules for content
  generation:\n\n  * Introduce `Content.FromByteString`\n\n  * Remove deprecated `Concatenation`\n"
changelog-type: markdown
description: "# B9 - A Benign VM-Build Tool [![changelog](https://img.shields.io/badge/changelog-green.svg?style=flat)](CHANGELOG.md)\n\n[![Build
  Status](https://travis-ci.org/sheyll/b9-vm-image-builder.svg)](https://travis-ci.org/sheyll/b9-vm-image-builder)
  [![Hackage](https://img.shields.io/badge/hackage-B9-green.svg?style=flat)](http://hackage.haskell.org/package/b9)\n\n**NOTE:
  The feature list is not completely implemented yet!**\n\n**NOTE: Sometimes the [CHANGELOG.md](./CHANGELOG.md)
  contains additional documentation!**\n\n## Quick-Start\n\n### Mission Statement\n\n**B9**
  is an executable and a Haskell library, that consumes a Haskell \nterm describing
  the generation of VM-Images. \n\nA few core `data` types form an EDSL, and describe
  virtual machine images.\n`B9` contains a library as well as an executable to interpret
  the EDSL.\n\nSuch a term can then be stored into a **text file** and is interpreted\nby
  a **command line invokation**. \n\n### Installation \n\n### Installation on NixOS\n\n*
  As **command line utility** in current directory:\n\n      $ nix-env -f https://github.com/sheyll/b9-vm-image-builder/archive/3.2.0.tar.gz
  -iA b9c\n    \n### Runtime dependencies\n\nTo be able to use B9 install:\n\n* Linux\n*
  qemu\n* ext4 tools\n* genisoimage\n* mtools\n* vfat tools\n* ssh\n* rsync\n* bash\n*
  wget\n* sudo (optional)\n\n#### `LibVirtLXC` support\n\n* lxc\n* libvirt with lxc
  support (libvirt-driver-lxc, libvirt-daemon-lxc,...)\n* virsh\n\nB9 has been tested
  with libvirt version 1.2.12.\n\nMake sure that all neccessary daemons, e.g. `libvirtd.service`,
  `lxc.service`,..\nare active, that SELinux is configured correctly and that the
  `nbd` kernel\nmodule is loaded.\n\nIf neccessary create a libvirt network configuration,
  e.g. by using\nthe GUI front-end`virt-manager`.\n\nDepending upon the libvirt and
  lxc configuration of the system it might be\nnessary to allow the user, that will
  execute `b9c`, password-less `sudo` for\nthese commands:\n\n* `virsh`\n* `rm`\n*
  `cat`\n* `cp`\n* `mv`\n\n#### For `SystemdNspawn` support\n\n* systemd\n\n#### For
  `Podman` support (TODO)\n\n* podman \n\n#### For `Docker` support (TODO)\n\n* docker
  \n\n\nAfter installing B9 (either from a binary package or by building from source)\nall
  its glory is availbe through a single executable called `b9c`.\n\nWhen `b9c` is
  started for the first time, it creates a configuration file in\nthe users home directory
  called `~/.b9/b9.conf`. The path to that file can be\nchanged using command line
  arguments. Execute:\n\n    b9c -h\n\nfor a list of command line parameters and commands.\n\n`b9c`
  command line arguments always follow this pattern:\n\n    b9c <global-options> <command>
  <command-options> -- <build-script-extra-args>\n\nTo enable B9 to work correctly
  on your machine edit the config file and make\nnecessary adaptions.\n\n## General
  Overview \n\n\nUse B9 to compile your software into a deployable set of Linux-VM-
  or\nconfiguration images, from a set of scripts and input files and templates.\n\nThe
  main goal of this tool is to provide a build tool to increase automation and\nreduce
  redundancy when creating configured, ready-to-run VM-images.\n\nOne big thing is
  that it can produce many machines and cloud-configs from a\nsingle build file, because
  build files can describe concrete as well as\nparameterized generators. It can create
  parameterized VM-Images by uploading\n(e.g. system-)files assembled by syntax aware
  template application and\ncombination, all statically checked by during the build.\n\nThis
  sets B9 apart from e.g. cloud-init or other configuration management\nsystems that
  provide configuration through user provided dynamic script-programs,\nwhich rely
  on the user to contain correct error handling.\n\nThe general idea is the same as
  in statically type programming languages: catch\nerrors as early as possible without
  relying on the user to create a covering set\nof tests/error checks.\n\nCertain
  sacrifies were made; there might be a steep laerning curve, but you will\neventually
  get there. The tool at hand works stable and reliable. \n\nAll builds happen in
  isolation, i.e. by default in random build directories, and\nare cleaned on failure.
  \n\nAlso, B9 does not modify cached images. \nWork on VM-Images is always done on
  a copy of an image, and to speed\nthings up, it is possible to explicitly use copy-on-write
  images.\n\nB9 creates bootable virtual machine images, without necessarily using\nvirtualization
  itself.\n\nIn essence B9 is a tool for _creation_, _configuration_ and _sharing_
  of VM images and\nall peripheral artifacts, it creates:\n\n* VMDK/QCOW2/Raw VM images\n*
  Converted, extracted and resized copies of existing vm images\n* Empty VM images
  with extended 4 file system\n* Cloud-Config Images\n* Text files from template files
  with variable interpolation\n* Erlang OTP sys.config files\n\n### Make VM Disk Images
  \n\n* Extract partitions from MRB Partitioned images\n* Create, resuse, resize EXT-4
  on Qcow2, vmdk or raw Images \n* Run commands on images to create new image, similar
  to what docker build does, \n  * Using libvirt-lxc \n  * Using docker \n  * Using
  systemd-nspawn\n\n### Manage Disk Images \n\n* Cache images locally\n* Distribute
  cached images via SCP\n\n### Assemble Cloud-init Configuration\n\n* Merge YAML Expressions\n*
  Merge Erlang Terms \n* Load local files \n* Load files from HTTP servers\n* Support
  `${identifier}` variable interpolation \n* Create cloud-init \n  * ISO images \n
  \ * Floppy images \n  * yaml files\n\n### Input files \n\nThe input files can be
  in:\n\n* Dhall format **TODO**\n* Haskell values interpreted by the `Read` instances.\n\n###
  Usage as Library \n\n* Use as a Haskell library\n\n### Configuration \n\nB9 uses
  a *`.ini` - style* configuration file.\n\n### Incremental Builds \n\nB9 uses `shake`
  so some degree of incremental build is available.\n\n## B9 build files\n\nIf you
  really need to write these file, you are basically f'ed.\n\nFor now, look at existing
  config files and read the sources, if anything,\nmake sure to read at least the
  chapter _Anger-Management_ before throwing stuff\naround.\n\nMore documentation
  is comming soon!\n\n### General Structure\n\nA B9 configuration describes a single
  `ArtifactGenerator`. It generates files\nbelonging to a VM, such as qcow2/raw/vmdk-image
  file(s) and e.g. cloud-init ISO\nimage files.\n\nJust to recap: a `something.b9`
  build file _is_ always ever only a mere\n`ArtifactGenerator` literal, no matter
  how many `Let`, `Each`, `Artifacts`,\netc... you see flying around there.\n\n###
  Creating artifacts\n\nTo get any _real_ artifact out of an artifact generator use
  the `Artifact`\nconstructor. It takes _2_ parameters an arbitrary id and a describtion
  of what\nthe artifact consists of:\n\n     Artifact (IID \"some_instance_id\")\n
  \             (VmImages ... | CloudInit ...)\n\nAn artifact can either be a (set
  of) VM-disk-image(s) likely in combination\nwith some shell script to install software,
  etc _or_ a static collection of\nfiles put on a cloud-init image(VFAT or ISO or
  directory).\n\n#### Defining artifact generators that produce vm image files\n\nTo
  produce vm image files, e.g. with some software installed use the `VmImages`\nartifact
  generator. It has only _2_ parameters:\n\n     VmImages\n        [ ... disk image
  targets ... ]\n        ( ... installation script ...)\n\nOf course it must be wrapped
  in an `Artifact` definition, so we get this structure:\n\n     Artifact (IID \"my_first_image\")\n
  \      (VmImages [...] (...))\n\n##### ImageTargets\n\nThe first argument to `VmImages`
  is a list of `ImageTarget`. Each describes\na single VM-disk-image. The syntax is:\n\n
  \   ImageTarget\n      ImageDestination\n      ImageSource\n      MountPoint\n\n*
  An `ImageDestination` specifies if/where to put the output image.\n* An `ImageSource`
  specifies how the image is created or from where it is taken.\n* A `MountPoint`
  specifies where to mount the image during the execution of an\n  optional `VmBuild`-script.\n\n####
  Parameterized artifact generators\n\nB9 supports `$varnam` variable interpolation
  in all strings anywhere in an\n`ArtifactGenerator`:\n\n* All filenames and paths\n*
  All id strings and names\n* Template files included via e.g. `Template`\n* In every
  string in `VmScript`s (e.g. in `Run \"${cmd}\" [\"${world}\"]`)\n* Also in all included
  template files (e.g. included via `Template`)\n\nParameters can be defined using
  `Let`, `Each` and special command line\narguments.\n\nTo pass parameters via the
  command line, append them after the argument delimiter\noption `--` which ends the
  list of regular b9c arguments:\n\n    b9c -v build -f file1.b9 .. -- arg_1 arg_2
  ...\n\nThe parameters are bound to `${arg_1}`, `${arg_2}`, that is variables indicating\nthe
  corresponding _position_ on the command line.\n\nTo define variables using `Let`,
  write:\n\n    Let [key-value-pairs, ...]\n        [artifactgenerators, ...]\n\nAll
  key-value bindings defined in the first list are available in every artifact\ngenerator
  contained in the second list (_body_).\n\nA key-value binding, e.g. `(\"hostname\",
  \"www.acme.org\")`, consist of two strings\non parens seperated by a `,` (comma).
  The left string is the key, and the right\nstring is the value.\n\nThis `(\"webserver\",
  \"www.${domainname}\")` is an example to show that the _value_\nmay also contain
  a variable reference. (Of course, only to variabled defined\n_before_)\n\n### Anger-Management\n\nB9
  build files contain a single literal `ArtifactGenerator` value\nin Haskell syntax.
  B9 currently 'parses' the config file without any\nerror checking, so writing config
  files is VERY frustrating without\nsome tricks:\n\n#### Trick 1\n\nStart with a
  working file and run\n\n    b9c reformat -f <filename>\n\nafter each modification.
  The `reformat` command only parses and - hence the\nname - (re-) formats/pretty-prints
  the files passed with `-f` options.\n\nYou will immediately know if a modification
  broke the file.\n\nNOTE: If your build file refers to any `${arg_...}` positional
  arguments pass\nthem to `reformat` using `--` followed by the argument list.\n\n####
  Trick 2\n\nObtain and build the sources of B9, start an interactive haskell shell
  with the\nB9 code loaded and try to paste the contents of the config file to see
  if ghci\naccepts it. Use the ghci macros `:{` and `:}` to begin and end a multi-line
  input\nand paste the raw contents of the config file in question in between.\n\n
  \   $ cabal install\n    $ cabal repl\n\n    ... (many lines omitted) ...\n\n    *B9>
  :{\n    *B9| Artifact (IID \"filer\")\n    *B9|   (VmImages [ ImageTarget\n    *B9|
  \                (LocalFile (Image \"EXPORT/machines/filer/disks/0.vmdk\" Vmdk Ext4)\n
  \   *B9|                             KeepSize)\n    *B9|                 (From \"fedora-20-prod\"
  KeepSize)\n    *B9|                 (MountPoint \"/\")\n    *B9|             , ImageTarget\n
  \   *B9|                 (LocalFile (Image \"EXPORT/machines/filer/disks/1.vmdk\"
  Vmdk Ext4)\n    *B9|                             KeepSize)\n    *B9|                 (EmptyImage
  \"audio_files\" Ext4 Raw (ImageSize 64 GB))\n    *B9|                 (MountPoint
  \"/export/lb/audio\")\n    *B9|             ]\n    *B9|             (VmScript X86_64\n
  \   *B9|               [ SharedDirectoryRO \"./filer\" (MountPoint \"/mnt/build_root\")\n
  \   *B9|               , SharedDirectoryRO \"../_common/upload\" (MountPoint \"/mnt/common\")]\n
  \   *B9|               (Begin\n    *B9|                  [ Run \"dhclient\" []\n
  \   *B9|                  , In \"/mnt/build_root\" [ Run \"./machine-\" [] ]\n    *B9|
  \                 , In \"/mnt/common\" [ Run \"./post_export.sh\" [] ]\n    *B9|
  \                 ])))\n    *B9| :}\n\n    Artifact (IID \"filer\") (VmImages\n
  \   [ImageTarget (LocalFile (Image \"EXPORT/machines/filer/disks/0.vmdk\" Vmdk Ext4)
  KeepSize)\n    (From \"fedora-20-prod\" KeepSize) (MountPoint \"/\"),ImageTarget\n
  \   (LocalFile (Image \"EXPORT/machines/filer/disks/1.vmdk\" Vmdk Ext4) KeepSize)\n
  \   (EmptyImage \"audio_files\" Ext4 Raw (ImageSize 64 GB)) (MountPoint \"/export/lb/audio\")]\n
  \   (VmScript X86_64\n    [SharedDirectoryRO \"./filer\" (MountPoint \"/mnt/build_root\"),\n
  \   SharedDirectoryRO \"../_common/upload\" (MountPoint \"/mnt/common\")]\n    (Begin
  [Run \"dhclient\" [],In \"/mnt/build_root\" [Run \"./machine-\" []],In\n    \"/mnt/common\"
  [Run \"./post_export.sh\" []]])))\n\n## B9 Config File Reference\n\nThis is an example
  of a B9 configuration file, by default found in\n`~/.b9/b9.conf` and uses the **ini-file**
  format.\n\nSome of the options can also be specified on the command line\nand in
  environment variables.\n\nA path to an alternative config file can given on the
  command lines.\n\nWhen the default config file does not exist, `b9c` will create
  it from \ndefault values.\n\n\nThis example is the current default configuration:\n\n
  \   [global]\n    build_dir_root: /foo/binary\n    keep_temp_dirs: False\n    log_file:
  /tmp/b9.log\n    max_cached_shared_images: 2\n    repository: tilia\n    repository_cache:
  InB9UserDir \"repo-cache\"\n    unique_build_dirs: True\n    verbosity: LogInfo\n
  \   default_timeout_seconds: 3600\n    timeout_factor: 4\n\n    [libvirt-lxc]\n
  \   connection: lxc:///\n    emulator_path: /usr/lib/libvirt/libvirt_lxc\n    guest_capabilities:
  [CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]\n
  \   guest_ram_size: RamSize 1 GB\n    network: Nothing\n    use_sudo: True\n\n    [podman]\n
  \   guest_capabilities: [CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]\n
  \   network: default\n\n    [systemdNspawn]\n    console: read-only\n    executable:
  /nix/store/bl92gd78ygdwmc94lrqy20ych0lrfis5-systemd-243.7/bin/systemd-nspawn\n    extra_args:
  \"--user foo\"\n    guest_capabilities: [CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]\n
  \   max_lifetime_seconds: 14400\n    use_sudo: True\n\n    [docker]\n    guest_capabilities:
  [CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]\n
  \   network: default \n\n\n### The `[global]` Section\n\n\n#### `build_dir_root`:
  \n\n* Default: `Nothing`\n\n_TODO document this option._\n\n#### `keep_temp_dirs`:
  \n\n* Default: `False`\n\n_TODO document this option._\n\n#### `log_file`: \n\n*
  Default: `Nothing`\n\n_TODO document this option._\n\n#### `max_cached_shared_images`:
  \n\n* Default: `Just 2`\n\n_TODO document this option._\n\n#### `repository`: \n\n*
  Default: `Nothing`\n\n_TODO document this option._\n\n#### `repository_cache`: \n\n*
  Default: `Just (InB9UserDir \"repo-cache\")`\n\n_TODO document this option._\n\n####
  `unique_build_dirs`: \n\n* Default: `True`\n\n_TODO document this option._\n\n####
  `verbosity`: \n\n* Default: `Just LogInfo`\n\n_TODO document this option._\n\n####
  `default_timeout_seconds` \n\n* optional default timeout, applied to all external
  calls:\n\n\n#### `timeout_factor`\n\n* optional factor(natural numbers) that every
  timeout value is multiplied by,\n  for slower systems.\n\n### The `[libvirt-lxc]`
  Section\n\n#### `connection`\n\n* Default: `lxc:///`\n\n_TODO document this option._\n\n####
  `emulator_path`\n\n* Default: `Just \"/usr/lib/libvirt/libvirt_lxc\"`\n\n_TODO document
  this option._\n\n#### `guest_capabilities`\n\n* Default: `[CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]`\n\n_TODO
  document this option._\n\n#### `guest_ram_size`\n\n* Default: `RamSize 1 GB`\n\n_TODO
  document this option._\n\n#### `network`\n\n* Default: `Nothing`\n\n_TODO document
  this option._\n\n#### `use_sudo`\n\n* Default: `True`\n\n_TODO document this option._\n\n###
  The `[podman]` Section\n\n**Since: 1.0.0**\n\n#### `guest_capabilities`\n\n* Default:
  `[CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]`\n\n_TODO
  document this option._\n\n#### `network`\n\n* Default: `Nothing`\n\n_TODO document
  this option._\n\n### The `[systemdNspawn]` Section \n\n**Since: 1.0.0**\n\n####
  `console`\n\n* Default: `read-only`\n* Valid Values:\n   * `read-only`\n   * `interactive`\n
  \  * `passive`\n   * `pipe`\n\nThis corresponds to the `--console=<...>` parameter
  to `systemd-nspawn`.\n\nIf the value is set to `interactive` the execution of \nany
  `VmScript`s through `systemd-nspawn` will be _interactive_ \nby using `stdin`, `stdout`
  and `stderr` of the `b9c` process.\n\n#### `executable`\n\n* Default: `Nothing`\n\n_TODO
  document this option._\n\n#### `extra_args`\n\n* Default: `Nothing`\n\n_TODO document
  this option._\n\n#### `guest_capabilities`\n\n* Default: `[CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]`\n\n_TODO
  document this option._\n\n#### `max_lifetime_seconds`\n\n* Default: `Just 14400`\n\n_TODO
  document this option._\n\n#### `use_sudo`\n\n* Default: `True`\n\n_TODO document
  this option._\n\n### The `[docker]` Section\n\n**Since: 1.0.0**\n\n#### `guest_capabilities`\n\n*
  Default: `[CAP_MKNOD,CAP_SYS_ADMIN,CAP_SYS_CHROOT,CAP_SETGID,CAP_SETUID,CAP_NET_BIND_SERVICE,CAP_SETPCAP,CAP_SYS_PTRACE,CAP_SYS_MODULE]`\n\n_TODO
  document this option._\n\n#### `network`\n\n* Default: `Nothing`\n\n_TODO document
  this option._\n\n#### `ext4_attributes`\n\n* Default: `[]`\n\nList of options for
  `mkfs.ext4 -O`.\n\n#### `image_file_names_shortener_base_path`\n\n* Default: `Nothing`\n\nIf
  `(Just \"/path\")` is specified, images passed to libvirt are hard linked to \na
  random subdirectory in `/path/`, such that the name will be short enough\nto match
  libvirtds file name length restriction.\nNOTE: The hard links have to be on the
  same file system as their targets.\n\nTogether with `keep_temp_dirs` the paths can
  be inspected, but also have to \nbe manually removed.\n"
description-type: markdown
hash: db01ae33735b07b02f23aeb2586cd2f62d0e2bfee63dd7bd3ac9542fc8442286
homepage: https://github.com/sheyll/b9-vm-image-builder
latest: 3.2.3
license-name: MIT
maintainer: svh@posteo.de
synopsis: A tool and library for building virtual machine images.
test-bench-deps:
  QuickCheck: '>=2.5 && <3'
  aeson: '>=1.4 && <1.5'
  b9: '>=0'
  base: '>=4.12 && <5'
  binary: '>=0.8 && <0.9'
  bytestring: '>=0.10.8 && <1'
  containers: '>=0.6 && <1'
  directory: '>=1.3 && <2'
  extensible-effects: '>=5 && <6'
  filepath: '>=1.4 && <1.5'
  hspec: '>=2.7 && <2.8'
  hspec-expectations: '>=0.8 && <0.9'
  lens: '>=4 && <5'
  neat-interpolation: '>=0.3 && <1'
  optparse-applicative: '>=0.13 && <1'
  process: '>=1.4 && <2'
  shake: '>=0.17.6 && <0.20'
  text: '>=1.2 && <1.3'
  unordered-containers: '>=0.2 && <1'
  vector: '>=0.11 && <1'
  yaml: '>=0.8 && <1'
