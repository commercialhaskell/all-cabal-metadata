homepage: http://github.com/jgm/yst
changelog-type: text
hash: 3a516e145f47c776c6688c7650883a2198610836127e6f22ad53aae5292a8856
test-bench-deps: {}
maintainer: jgm@berkeley.edu
synopsis: |-
  Builds a static website from templates and data in YAML or
  CSV files.
changelog: |
  yst 0.7.2 (released 04 Feb 2023)

    * Require pandoc > 3 (#56).

  yst 0.7.1.3 (released 16 Jul 2022)

    * Remove support for old versions of time (#54).
    * Require aeson >= 2 and update code (#55).

  yst 0.7.1.2 (released 12 Aug 2021)

    * Use latest HStringTemplate so we can build with GHC 9.

  yst 0.7.1.1 (released 12 Aug 2021)

    * Fixes to work with pandoc 2.14.1.
    * Give informative error messages on YAML parse failure.

  yst 0.7.1 (released 25 Nov 2019)

    * Fixes to work with pandoc 2.8.
    * Add cabal.project and GitHub actions ci.

  yst 0.7.0.1 (released 27 Feb 2019)

    * Support recent pandoc versions.
    * Demo - remove HTML calling nav.js.

  yst 0.7 (released 07 Mar 2018)

    * Added NavStyle type.
    * Added navstyle field to Site.
    * Added navstyle parameter to config.yaml (values `top` or `side`).
      This controls the CSS used for the menu.  Top is default as
      before.
    * Removed old js/nav.js and css/hk-pyg.css from the demo site.

  yst 0.6.0.1 (released 20 Feb 2018)

    * Update to work with pandoc 2.1.

  yst 0.6 (released 29 Oct 2017)

    * Update to work with (and require) pandoc 2.0.

  yst 0.5.1.2 (released 19 Sep 2017)

    * Update demo style to use Bootstrap's navbar instead of tree
      (Jacob Mitchell).
    * Remove unused code in nav menu rendering (Jacob Mitchell).
    * Fix some warnings (Jacob Mitchell).
    * Make `$nav$` compatible with Bootstrap (Jacob Mitchell).
    * Fixed typo (#45).
    * Allow latest aeson.
    * Allow pandoc 1.19.x.

  yst 0.5.1.1 (released 22 Mar 2016)

    * Allow pandoc 1.17, aeson 0.11.
    * Prefix `js/nav` file with `$root$` for nested paths (Cody Reichert).

  yst 0.5.1 (released 02 Jan 2015)

    * Allow building with pandoc 1.16.x.

  yst 0.5.0.4 (released 01 Jul 2015)

    * Allow building with pandoc 1.15.x.

  yst 0.5.0.3 (released 02 Jun 2015)

    * Updated to use pandoc 1.14, aeson 0.9, time 0.5.
    * Use HTML5 in rendering pandoc.
    * Added code to default css to collapse menu at "small" size.

  yst 0.5.0.2 (released 14 Mar 2015)

    * Improved menus, using unfolding tree instead of pop-ups.
    * Transparent background on menu.

  yst 0.5.0.1 (released 13 Mar 2015)

    * Minor menu formatting tweaks.
    * Use sitetitle for default header.

  yst 0.5 (released 13 Mar 2015)

    * Use Bootstrap 3 instead of YUI CSS framework.
    * Use lucid instead of xhtml to generate menu.

  yst 0.4.1.1 (released 29 Sep 2014)

    * Allow compilation with latest aeson, pandoc.

  yst 0.4.1 (released 30 May 2014)

    * Fix rendering of integers in YAML when compiled against
      recent versions of aeson.
    * Added HAS to WHERE condition in queries (Ohad Kammar).

  yst 0.4.0.1 (released 15 Sep 2013)

    * Removed unneeded build-depends.

  yst 0.4 (released 15 Sep 2013)

    * Use yaml package instead of HsSyck.
    * Data.Yaml no longer exports nodeToYamlNode.  (We use ToJSON
      and FromJSON instances instead.)

  yst 0.3.1.2 (released 15 Sep 2013)

    * Updated to compile with pandoc 1.12.

  yst 0.3.1.1 (released 08 Mar 2013)

    * Updated to compile with pandoc 1.11.

  yst 0.3.1 (released 19 Jan 2013)

    * Updated to compile with pandoc 1.10, directory 1.2.

  yst 0.3.0.1 (released 23 Oct 2012)

    * Allow compilation with latest HStringTemplate.

    * Fixed deprecated uses of Prelude's `catch`.

  yst 0.3 (released 20 Oct 2012)

    * Added support for loading data from Sqlite3 databases.
      (Sigurd Meldgaard)

    * Allow `sourcedir`, `datadir`, `filesdir` to specify a list
      of directories, searched in order. (Christopher League)
basic-deps:
  lucid: '>=2.9'
  split: -any
  HStringTemplate: '>=0.8.8'
  base: '>=4.13 && <5'
  time: '>=1.5'
  HDBC: -any
  text: -any
  filepath: -any
  parsec: -any
  csv: -any
  containers: -any
  pandoc: '>=3.0.1'
  HDBC-sqlite3: -any
  scientific: '>=0.2'
  aeson: '>=2.0'
  yaml: -any
  directory: -any
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.2.1
- 0.2.3
- 0.2.3.1
- 0.2.3.2
- 0.2.4
- 0.2.4.1
- '0.3'
- 0.3.0.1
- 0.3.1
- 0.3.1.1
- 0.3.1.2
- '0.4'
- 0.4.0.1
- 0.4.1
- 0.4.1.1
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.1
- 0.5.1.1
- 0.5.1.2
- '0.6'
- 0.6.0.1
- '0.7'
- 0.7.0.1
- 0.7.1
- 0.7.1.1
- 0.7.1.2
- 0.7.1.3
- 0.7.2
author: John MacFarlane
latest: 0.7.2
description-type: markdown
description: "`yst` - static websites from YAML and string templates\n======================================================\n\n`yst`
  is a tool for generating a static website by filling [string\ntemplate][]s with
  data taken from [YAML][] or [CSV][] text files or\n[SQLite3][] file based databases.
  This approach\ncombines the speed, security, and ease of deployment of a static\nwebsite
  with the flexibility and maintainability of a dynamic site that\nseparates presentation
  and data.\n\nInstalling yst\n--------------\n\n`yst` is written in Haskell. The
  easiest way to install `yst` is by using\nHaskell's [cabal install][] tool. The
  best way to get this tool is to\ninstall the [Haskell platform][], which includes
  a complete installation\nof the [GHC][] compiler and the `cabal` executable.\n\nOnce
  you have `cabal`, you can install yst with two commands:\n\n    cabal update\n    cabal
  install yst\n\n(Note that by default, `cabal` installs the `yst` executable into\na
  special directory:  `~/.cabal/bin` on unix systems.  You will need\nto make sure
  that directory is in your system path.)\n\nIf you get the error \"yst-0.2.3 depends
  on template-haskell-2.4.0.0\nwhich failed to install,\" then try the following:\n\n
  \   cabal install syb-with-class-0.6\n    cabal install yst\n\nGetting started\n---------------\n\nTo
  get started with `yst`, use the command:\n\n    yst create mysite\n\nThis will create
  a directory `mysite` and populate it with the files\nneeded for a sample site.  Change
  to this directory and run `yst` with\nno arguments to create the site:\n\n    cd
  mysite\n    yst\n\nThe site will be created in the `site` directory.  Open up `site/index.html`\nto
  take a look.\n\nThe configuration file `index.yaml` tells `yst` which pages to build,\nand
  from which templates and data files.  Let's take a look, so we can see\nwhat went
  into `index.html`. The file is a YAML list of YAML hashes\n(name/value pairs). The
  first item is\n\n    - url      : index.html\n      title    : Home\n      template
  : index.st\n      requires : event.st\n      data     :\n        recentevents :
  FROM events.yaml ORDER BY date DESC LIMIT 2\n\nThis says:  build the page `index.html`
  from the string template `index.st`\n(and subtemplate `event.st`) and data from
  `events.yaml`. Sort this data\n(a list of events) by date in descending order, and
  discard all but the\nfirst two items. Put the resulting data in the string template
  attribute\n`recentevents`. Give the page the title \"Home.\"\n\nNow take a look
  at `events.yaml`, the data source. Again it is a YAML\nlist of YAML hashes, each
  item in the list representing one event.\nThe first is:\n\n    - date: 2009-06-28\n
  \     speaker:  Sam Smith\n      title: Building a static website\n\nPretty self-explanatory!
  \ Try adding a new event, then rebuild the\nsite by typing `yst` and see how it
  looks.\n\nIf you have problems, make sure `events.yaml` is a valid YAML file.\nStructure
  is shown through indentation, so make sure things line\nup right.  And occasionally
  you may need to use quotation marks\naround string values---for example, when a
  title contains a colon.\n\nThere's one more ingredient in our recipe---the string
  templates.\nTake a look at `index.st`, the template from which `index.html`\nis
  built:\n\n    # Welcome\n    \n    Here's our website. Have a look around.\n    \n
  \   Our last two events:\n    \n    $recentevents:event()$\n    \n    For a complete
  list of events, see the [events](events.html) page.\n\nThe first thing to notice
  is that this is in [markdown][] format (or,\nto be precise, markdown with [pandoc][]
  extensions).  So, for example,\nthe first line is a level-one header, and there
  is a hyperlink\nto the events page on the last line.\n\nThe second thing to notice
  is the bit between dollar signs.\nThis is a placeholder for some formatted data.
  \ The rendered\ntemplate will include the list `recentevents` (remember, this\nwas
  populated from `events.yaml` after some transformations---see\nabove).  And each
  element of this list will be formatted by\na subtemplate called `event.st`:\n\n
  \   - $if(it.speaker)$$it.speaker; separator=\" and \"$, $endif$ *$it.title$*.\n\nLet's
  break this down.  The whole line will print a bulleted list\nitem. `it` here refers
  to the event that is being processed by the\ntemplate. So the first part says: if
  this event has a `speaker` field,\nprint the speaker, or, if the `speaker` field
  is a list, print all the\nspeakers separated by the word \"and\", followed by a
  comma. And the\nsecond part says, print the contents of the `title` field, surrounding\nit
  with asterisks (which is the markdown way of making it *emphasized*).\n\n(See the
  [string template][] documentation for details of template syntax,\nand examples.)
  \n\nIf you look at `index.html`, you'll see this rough structure, but in\nan HTML
  file, not a markdown file. `yst` converts the rendered markdown\ntemplate to HTML
  (using pandoc), and inserts it into a \"layout\" file\ncalled `layout.html.st`.
  \ If you look at this file, you'll see that it's\nan HTML file with blanks for `$contents$`
  and `$nav$`.  The `$contents$`\nblank gets filled by the rendered template, converted
  to HTML, and\nthe `$nav$` blank gets filled by an HTML navigation menu (an unordered\nlist
  with links).\n\nTo summarize our example, then: `yst` sorts and filters the data
  in\n`events.yaml` according to our instructions; inserts this data into\nthe `events.st`
  template, formatting each item using the `event.st`\ntemplate; uses pandoc to convert
  the rendered template to HTML;\nconstructs a navigation menu; and puts the contents
  and navigation\nmenu in the layout template `layout.html.st`. The result is our
  page,\n`index.html`.\n\nReference\n---------\n\n### The `yst` command\n\nSynopsis:\n\n
  \   yst                    # rebuilds site, using default config.yaml\n    yst -f
  myconf.yaml     # rebuilds site, using myconf.yaml as config\n    yst create newsite
  \    # creates a starter (demo) site in newsite directory\n\nWhen run without arguments,
  `yst` looks at `index.yaml` to determine\nthe dependencies of each page, and rebuilds
  only the pages whose\ndependencies have changed since the last build.\n\nIn order
  for this to work properly, you must be sure to list all\nsubtemplates included recursively
  in the main page template using\nthe `requires` field.  This field takes a single
  filename or a\nYAML list, which may be in either of two formats:\n\n    requires:
  [event.st, date.st]\n\nor\n\n    requires:\n      - event.st\n      - date.st\n\nIf
  you don't list all the subtemplates needed to render a page\nunder `requires`, `yst`
  will still work, but it might sometimes\nfail to rebuild a page when one of these
  subtemplates has been changed.\n\n### `config.yaml`\n\nThe configuration file specifies
  the following:\n\n- `indexfile`: the filename of the index file (default: `index.yaml`)\n-
  `title`:  the title of the whole site\n- `sourcedir`:  list of directories containing
  templates and page sources\n  (default: `.`)\n- `datadir`:  list of directories
  containing yaml data files (default: `.`)\n- `filesdir`: list of directories containing
  static files (default: `files`)\n- `layout`: the default layout template for the
  site, relative to\n  `sourcedir` (default: `layout.html.st`)\n- `navstyle`: either
  `top` for a top menu or `side` for a side\n  menu\n\nThe directories specified by
  `sourcedir` and `datadir` are searched in\norder to find source/template or data
  files, respectively.  This allows\nfor a `../templates` directory to be shared among
  multiple sites, for\nexample.  Static files are merged from the contents of all
  directories\nin `filesdir`. All of these accept a string as a singleton list.\n\n###
  `index.yaml` and submenus\n\nThe index file is a YAML list of pages. Each page may
  have the following\nfields:\n\n- `url`:   the relative URL of the page to be built\n-
  `title`:   the title of the page\n- `template`:   the main string template from
  which the page will be built\n- `source`:   the markdown source from which the page
  will be built\n- `requires`:   other files changes to which should trigger a page
  rebuild\n  (primarily subtemplates of the main page template)\n- `data`:   string
  template attributes, data sources, and transformations\n  (see below)\n- `layout`:
  \  a layout template to use, if other than the site default\n- `inmenu`:   if 'no',
  the page will not be included in the site navigation\n   menu\n\nEach page must
  have at least `url`, `title`, and either `template` or\n`source`. Values for `template`,
  `source`, and `layout` are relative to\n`sourcedir` specified in `config.yaml`.\n\nThe
  pages may be organized into a tree-like hierarchy, which will be\nreflected in the
  site navigation menu.  It is easiest to see how this\nworks by example:\n\n    -
  Rooms:\n      - url      : room101.html\n        title    : Room 101\n        source
  \  : room101.txt\n    \n      - url      : room203.html\n        title    : Room
  203\n        source   : room203.txt\n\nHere we have a subtree called \"Rooms\" with
  two pages under it.\nSubtrees can contain other subtrees.  Just be consistent about
  indentation.\n\n### The `data` field\n\nThe `data` field in `index.yaml` can populate
  any number of\nstringtemplate attributes with data from YAML or CSV files or SQLite3\ndatabases.
  \ The syntax is easiest to explain by example (note that the\nkeywords do not have
  to be in ALL CAPS, although they may, and the\nquery doesn't have to end with a
  semicolon, though it may):\n\n    data:\n        events:  from events.yaml order
  by date desc group by title then location\n        people:  from people.csv order
  by birthday then lastname where\n                  birthstate = 'CA' limit 5\n        beststudents:
  from students.sqlite \n                  query \"select * from students where grade
  > 5\"\n                  order by name\n\nFirst we have the name of the stringtemplate
  attribute to be populated\n(say, `events`).  Then, after the colon, we have the
  data source\n(`events.yaml`). If the data source is an SQLite3 database, it should
  be\nfollowed by a query that is a quoted string.\n\nThe data source is followed
  by  one or more *transformations*, which will\nbe applied in order.  Here are the
  possible transformations.  In\nwhat follows, brackets denote an optional component,
  `|` denotes\nalternatives, and `*` indicates that the component may be repeated\nseveral
  times:\n\n`ORDER BY field [ASC|DESC] [THEN field [ASC|DESC]]*`\n\n>   Sorts a list
  by comparing the value of `field`.  `ASC`\n(the default) means \"ascending\", and
  `DESC` means \"descending\".\nThe keyword `THEN` is used to separate fields that
  will be\ncompared in order.  So, if we are ordering by `birthday then lastname`,\nwe
  will compare birthdays, and if these are equal, we will break\nthe tie by comparing
  last names. \n\n`GROUP BY field [THEN field]*`\n\n>   Converts a list into a list
  of lists, where each sublist contains\nonly items with the same value for `field`.
  \ So, for example,\n`group by date` takes a list of events and produces a list of\nlists
  of items, where each sublist contains events occuring at\na single date.  `GROUP
  BY date THEN venue` would produce a list\nof lists of lists, and so on.\n\n`LIMIT
  n`\n\n>   Removes all but the *n* top items from a list.  *n* must be a number.\n\n`WHERE
  condition`\n\n>   Selects only items that meet a condition.\n\n> A *condition* in
  a `WHERE` statement is a Boolean combination (using\n`NOT`, `AND`, `OR`, and parentheses
  for disambiguation) of *basic\nconditions*.  A *basic condition* is either of the
  form `value op\nvalue`, where `value` may be either a fieldname or a constant, or
  of\nthe form `HAS fieldname' where `fieldname' is a string constant.  Note\nthat
  all constants must be enclosed in quotes.  `op` may be one of the\nfollowing: `=`,
  `>=`, `<=`, `>`, `<` and 'contains'.\n\n> The basic condition `arg1 contains arg2`
  succeeds if and only if\n`arg1` is a fieldname whose value is a list containing
  the value of\n`arg2`.\n\n> The basic condition `HAS fieldname' succeeds if and only
  if the item\nhas the fieldname as a field. For example, `HAS \"data\"'. \n\nNote
  that the order of transformations is significant.  You can get\ndifferent results
  if you use `LIMIT` before or after `ORDER BY`,\nfor example.\n\nIf you want to specify
  an attribute's value directly, rather than\nreading it from a file, just omit the
  \"FROM\":\n\n    data:\n      deadline: 11/20/2009\n\nAny YAML value can be given
  to an attribute in this way.\n\n### Static files\n\nAny file or subdirectory in
  the `files` directory (or whatever is\nthe value of `filesdir` in `config.yaml`)
  will be copied verbatim to\nthe site.  So this is the place to put javascripts,
  css files, images,\nPDFs, and the like.\n\n### Date fields\n\n`yst` will recognize
  date fields in data files automatically, if the\ndates are in one of the following
  formats:\n\n - the locale's standard date format\n - MM/DD/YYYY (e.g. 04/28/1953)\n
  - MM/DD/YY (e.g. 04/28/53)\n - YYYY-MM-DD (e.g. 1953-04-28)\n - DD MON YYYY (e.g.
  28 Apr 1953)\n\nDates may be formatted in templates using a stringtemplate \"format\"\ndirective.
  There's an example in the demo file `date.st`:\n\n    $it; format=\"%B %d, %Y\"$\n\nThe
  following codes may be used in format strings (taken from\nHaskell's `Date.Time.Format`
  documentation):\n\n- `%D` :   same as `%m/%d/%y`\n- `%F` :   same as `%Y-%m-%d`\n-
  `%x` :   as dateFmt locale (e.g. `%m/%d/%y`)\n- `%Y` :   year\n- `%y` :   last two
  digits of year, 00 - 99\n- `%C` :   century (being the first two digits of the year),
  00 - 99\n- `%B` :   month name, long form (fst from months locale), January - December\n-
  `%b, %h` :   month name, short form (snd from months locale), Jan - Dec\n- `%m`
  :   month of year, leading 0 as needed, 01 - 12\n- `%d` :   day of month, leading
  0 as needed, 01 - 31\n- `%e` :   day of month, leading space as needed, 1 - 31\n-
  `%j` :   day of year for Ordinal Date format, 001 - 366\n- `%G` :   year for Week
  Date format\n- `%g` :   last two digits of year for Week Date format, 00 - 99\n-
  `%f` :   century (first two digits of year) for Week Date format, 00 - 99\n- `%V`
  :   week for Week Date format, 01 - 53\n- `%u` :   day for Week Date format, 1 -
  7\n- `%a` :   day of week, short form (snd from wDays locale), Sun - Sat\n- `%A`
  :   day of week, long form (fst from wDays locale), Sunday - Saturday\n- `%U` :
  \  week number of year, where weeks start on Sunday (as sundayStartWeek), 00 - 53\n-
  `%w` :   day of week number, 0 (= Sunday) - 6 (= Saturday)\n- `%W` :   week number
  of year, where weeks start on Monday (as mondayStartWeek), 00 - 53\n\n### Lists
  as values\n\nIn some cases, a field may have one or several values.  For example,
  an\nevent might occur at a date or a date range, and an article may have one\nauthor
  or a list of authors.\n\nAn elegant way to handle these cases is to let the field
  take either a\nscalar or a list value, and use stringtemplate's \"separator\" directive\nto
  format the result appropriately.  So, for example, in our `events.yaml`\nwe have:\n\n
  \   - date: 2009-06-28\n      speaker:  Sam Smith\n      title: Building a static
  website\n    \n    - date:  2009-04-15\n      speaker:\n        - Sam Smith\n        -
  '[Jim Jones](http://foo.bar/baz)'\n      title: Advantages of static websites\n
  \   \n    - date:\n        - 2009-04-20\n        - 2009-04-22\n      title: Seminar
  on web security\n    \n    - date: 2009-04-15\n      speaker: Jim Jones\n      title:
  \ XSS attacks for dummies\n\nNote that the `date` field is sometimes a single date,
  sometimes a\nlist (with start and end date of a range), and the `speaker` field
  is\nsometimes a single speaker, and sometimes a range.\n\nHere is how we handle
  the date in `eventgroup.st`:\n\n    **$first(it).date:date(); separator=\" - \"$**\n\nHere
  `first(it).date` is the raw data, which may be a single date\nor a list.  `first(it).date:date()`
  is the result of formatting each\ndate using the `date.st` template (discussed above).
  \ And\n`first(it).date:date; separator=\" - \"` is the result of taking this\nlist
  of formatted dates and concatenating them, separated by a hyphen.\nWhen there is
  just one date, we just get a date. When there are two,\nwe get a date range.\n\nWe
  can use the same trick in the case of `speaker`.  If `it` is\nan event record, then
  `it.speaker; separator=\" and \"` will be\neither a single speaker (if the value
  is not a list) or a list\nof speakers separated by \"and\" (if it is a list).\n\nIn
  sorting lists with `order by`, `yst` compares two lists by\ncomparing the first
  members, then (in case of a tie) the second\nmembers, and so on.  If one item is
  a list and the other a scalar,\nthe scalar is compared to the first item of the
  list.  So, in\nthe example above, `Seminar on web security` will be sorted\nan earlier
  than an event with date `2009-04-21`, and later than\nan event with date range `2009-04-20
  - 2009-04-21`.\n\n### YAML gotchas\n\nIf you have a colon in a YAML value, be sure
  to enclose it in quotes,\nor you'll get an error.  So,\n\n    title:  \"Cheever:
  A Life\"\n\nnot\n\n    title:  Cheever: A Life\n\nOr (especially if the string is
  long), use `>` or `|` for a wrapped\nor unwrapped multiline string literal:\n\n
  \   title: |\n      A very long string that\n      goes on and on.\n\n      You
  can even have blank lines,\n      but be sure to maintain indentation.\n\n### Using
  CSV files instead of YAML\n\nIf you like, you can use a CSV file instead of YAML
  for your data source.\nJust give it the extension `.csv`.  In `index.yaml`, you'd
  have:\n\n    data:\n      events: from events.csv order by date desc\n\nThis can
  be handy if you're using existing data, because spreadsheets\nand databases can
  easily be dumped to CSV. In the case of a SQL\ndatabase, you can use a query like
  this to get the CSV:\n\n    SELECT * INTO OUTFILE 'result.csv'\n    FIELDS TERMINATED
  BY ',' OPTIONALLY ENCLOSED BY '\"'\n    LINES TERMINATED BY '\\n'\n    FROM my_table;\n\n(Thanks
  to\n<http://www.terminally-incoherent.com/blog/2006/07/20/dump-mysql-table-into-csv-file/>.)\n\n###
  Using a SQLite database as data source\n\nYou can also get the data directly from
  a database. Just give the file\nname from the database followed by a query quoted
  in \"'s\n\nIn this way you can do joins and other advanced operations on your\ndata
  before handing them over to yst:\n\n    data:\n      meetings : FROM data.sqlite
  \n                 QUERY \"select * from meetings \n                   left outer
  join persons\n                   on meetings.speaker = persons.name\"\n\n### Using
  HTML in the templates\n\nMarkdown allows raw HTML to be used, so you can embed HTML
  in templates.\nPandoc's extended markdown is different from standard markdown in
  that\nit parses text within HTML block elements as markdown.  So, for example,\nyou
  can include a section in `<div>` tags, or use raw `<ul>` and `<li>`\ntags instead
  of markdown formatting.\n\n### Layout templates\n\nLayout files are also string
  templates, but they are not treated as\nmarkdown by default.  They should use a
  double extension to indicate\nthe format.  So, for example, an HTML layout could
  be `standard.html.st`,\nand a LaTeX layout could be `printed.tex.st`.  `yst` will
  convert the\npage contents appropriately for the format of the layout template.\nHere
  are the supported formats and extensions:\n\n- HTML:   `.html.st`, `.xhtml.st`\n-
  LaTeX:   `.tex.st`, `.latex.st`\n- ConTeXt:   `.context.st`\n- Groff man:   `.`1`.st`\n-
  Rich text format:   `.rtf.st`\n- Texinfo:   `.texi.st`\n- DocBook:   `.db.st`\n-
  OpenDocument XML:   `.fodt.st`\n- Plain text (markdown):   `.txt.st`, `.markdown.st`\n\nThe
  demo site shows how you can use `yst` to produce a LaTeX document\nfrom the same
  data sources you use to produce HTML pages.\n\nThe following stringtemplate attributes
  are defined when layouts\nare rendered:\n\n- `$contents$`:   the result of rendering
  the page and converting to the layout's format\n- `$nav$`:   an HTML navigation
  menu created from `index.yaml`\n- `$gendate$`:   the date the page was generated\n-
  `$sitetitle$`:   the site title from `config.yaml`\n- `$pagetitle$`:   the page
  title as defined in `index.yaml`\n- `$root$`: the path to the website's root, relative
  to the page being\n  rendered.  So, for example, if we are rendering `rooms/room503.html`,\n
  \ `$root$` will have the value `../`. Put `$root$` in front of relative URLs\n  in
  your layout file, so that the links aren't broken on pages in\n  subdirectories.\n\n###
  Previewing a site\n\nIf you use only relative URLs in your site, you can preview
  it by\nopening any of the HTML files in site in your web browser. If you use\nabsolute
  links, this won't work, but you can use Jinjing Wang's simple\nstatic web server
  `maid`:\n\n    cabal update\n    cabal install maid\n\nTo use maid to preview your
  site, just change to the site directory and\nstart `maid`:\n\n    cd site\n    maid\n\nThe
  site will appear at <http://localhost:3000>.  If you want to serve it\nat another
  port, just pass the port number as an argument to `maid`:\n\n    maid 5999\n\n##
  Development\n\n### Source code\n\nyst's source code lives on github at <http://github.com/jgm/yst/tree/master>.\nYou
  can clone the repository with\n\n   git://github.com/jgm/yst.git\n\nTo install the
  development code once you've checked it out, just do\n\n    cabal install\n\n(But
  please stick to the released version if you don't like things to break\nunexpectedly!)\n\n###
  Reporting bugs\n\nIf you find a bug, please report it using\n[the issue tracker
  on yst's github page](http://github.com/jgm/yst/issues).\n\n\n[string template]:
  http://www.stringtemplate.org/\n[YAML]: http://www.yaml.org/\n[CSV]: http://en.wikipedia.org/wiki/Comma-separated_values\n[SQLite3]:
  http://www.sqlite.org/\n[cabal install]: http://hackage.haskell.org/trac/hackage/wiki/CabalInstall\n[Haskell
  platform]: http://hackage.haskell.org/platform/\n[markdown]: http://daringfireball.com/markdown\n[pandoc]:
  http://johnmacfarlane.net/pandoc/\n[vim]: http://www.vim.org/\n[GHC]: http://www.haskell.org/ghc/\n\n"
license-name: GPL-2.0-or-later
