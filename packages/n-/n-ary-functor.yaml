all-versions:
- 0.1.0.0
- '1.0'
author: Samuel GÃ©lineau
basic-deps:
  base: '>=4.9 && <5'
  natural-transformation: '>=0.4'
  transformers: '>=0'
changelog: "## New in 1.0\n\n* Breaking change: all instances now need to specify
  the variance of all type\n  parameters.\n* Breaking change: instances of the form
  `NFunctor (f a)` are no longer\n  allowed. Instead, write `NFunctor f` and use `NonvariantT`
  to indicate that\n  `a` cannot be mapped.\n* `NFunctor` is now even more general:
  in addition to generalizing `Functor`,\n  `Bifunctor`, `Trifunctor`, etc., it now
  also generalizes `Contravariant`,\n  `Invariant`, and `Profunctor`!\n* Introducing
  new infix operators corresponding to each variance. `(<#>)` is\n  still used for
  covariant type parameters, so after updating the instances,\n  all the call sites
  which were using the 0.1 API should still work. `(>#<)` is\n  used for contravariant
  type parameters, `(<#>/>#<)` is used for invariant\n  type parameters, which can
  be mapped given both a covariant and a\n  contravariant function, and `(\U0001F47B#\U0001F47B)`
  is used for phantom type parameters.\n* Introducing the `(-#-)` operator, which
  can be used instead of any other\n  operator in order to leave the corresponding
  type parameter untouched.\n* Introducing support for mapping over type parameters
  of kind `* -> *` using\n  natural transformations. The corresponding infix operators
  have two hashes:\n  the covariant operator is `(<##>)`, the contravariant operator
  is `(>##<)`,\n  etc.\n* Introducing the `VarianceTransformer` typeclass, via which
  you can add\n  support for other variances and other kinds.\n* It is no longer needed
  (nor allowed) to write both an `NFunctor Either`\n  instance and an `NFunctor (Either
  a)` instance corresponding to `Either`'s\n  `Bifunctor` and `Functor` instances.
  Instead, the `NFunctor (Either a)`\n  instance is derived from the `NFunctor Either`
  instance.\n\n## New in 0.1.0.0\n\n* Initial release of the `NFunctor` typeclass\n"
changelog-type: markdown
description: "# N-ary Functors [![Hackage](https://img.shields.io/hackage/v/n-ary-functor.svg)](https://hackage.haskell.org/package/n-ary-functor)
  [![Build Status](https://secure.travis-ci.org/gelisam/n-ary-functor.png?branch=master)](https://travis-ci.org/gelisam/n-ary-functor)\n\n##
  Using existing instances\n\n[`Functor`](https://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#t:Functor)
  and [`Bifunctor`](https://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Bifunctor.html#t:Bifunctor)
  are both in `base`, but what about `Trifunctor`? `Quadrifunctor`? There must be
  a better solution than creating an infinite tower of typeclasses. Here's the API
  I managed to implement:\n\n```haskell\n> nmap <#> (+1) <#> (+2) $ (0, 0)\n(1,2)\n\n>
  nmap <#> (+1) <#> (+2) <#> (+3) $ (0, 0, 0)\n(1,2,3)\n\n> nmap <#> (+1) <#> (+2)
  <#> (+3) <#> (+4) $ (0, 0, 0, 0)\n(1,2,3,4)\n```\n\nWhat about [`Contravariant`](https://www.stackage.org/haddock/lts-14.20/base-4.12.0.0/Data-Functor-Contravariant.html#t:Contravariant)
  and [`Profunctor`](https://www.stackage.org/haddock/lts-14.20/profunctors-5.3/Data-Profunctor.html#t:Profunctor)?
  No need to define `Bicontravariant` nor `Noobfunctor`, the `NFunctor` typeclass
  supports contravariant type-parameters too!\n\n```haskell\n> let intToInt       =
  \                           succ\n> let intToString    = nmap            <#> show
  $ succ\n> let stringToString = nmap >#< length <#> show $ succ\n> intToInt 3\n4\n>
  intToString 3\n\"4\"\n> stringToString \"foo\"\n\"4\"\n```\n\nAs the examples above
  demonstrate, n-ary-functor has an equivalent for both the `Functor ((->) a)` instance
  and the `Profunctor (->)` instance. Even better: when writing your own instance,
  you only need to define an `NFunctor (->)` instance, and the `NFunctor ((->) a)`
  instance will be derived for you. `NFunctor ((->) a b)` too, but that's less useful
  since that `nmap` is just the identity function.\n\nThat's not all! Consider a type
  like `StateT s m a`. The last type parameter is covariant, but what about the first
  two? Well, `s -> m (a, s)` has both positive and negative occurences of `s`, so
  you need both an `s -> t` and a `t -> s` function in order to turn a `StateT s m
  a` into a `StateT t m a`. And what about `m`? You need a natural transformation
  `forall a. m a -> n a`. Yes, n-ary-functor supports these too!\n\n```haskell\n>
  let stateIntIdentityInt    = ((`div` 2) <$> get) >>= lift . Identity\n> let stateStringMaybeString
  = nmap\n                       <#>/>#< (flip replicate '.', length)  -- (s -> t,
  t -> s)\n                          <##> NT (Just . runIdentity)       -- NT (forall
  a. m a -> n a)\n                           <#> show                          --
  a -> b\n                             $ stateIntIdentityInt\n> runStateT stateIntIdentityInt
  4\nIdentity (2,4)\n> runStateT stateStringMaybeString \"four\"\nJust (\"2\",\"....\")\n```\n\nNotice
  how even in such a complicated case, no type annotations are needed, as n-ary-functor
  is written with type inference in mind.\n\n\n## Defining your own instance\n\nWhen
  defining an instance of `NFunctor`, you need to specify the variance of every type
  parameter using a \"variance stack\" ending with `(->)`. Here is the instance for
  `(,,)`, whose three type parameters are covariant:\n\n```haskell\ninstance NFunctor
  (,,) where\n  type VarianceStack (,,) = CovariantT (CovariantT (CovariantT (->)))\n
  \ nmap = CovariantT $ \\f1\n      -> CovariantT $ \\f2\n      -> CovariantT $ \\f3\n
  \     -> \\(x1,x2,x3)\n      -> (f1 x1, f2 x2, f3 x3)\n```\n\nIts `nmap` then receives
  3 functions, which it applies to the 3 components of the 3-tuple.\n\nHere is a more
  complicated instance, that of `StateT`:\n\n```haskell\ninstance NFunctor StateT
  where\n  type VarianceStack StateT = InvariantT (Covariant1T (CovariantT (->)))\n
  \ nmap = InvariantT  $ \\(f1, f1')\n      -> Covariant1T $ \\f2\n      -> CovariantT
  \ $ \\f3\n      -> \\body\n      -> StateT $ \\s'\n      -> fmap (f3 *** f1) $ unwrapNT
  f2 $ runStateT body $ f1' s'\n```\n\nThe `s` type parameter is \"invariant\", a
  standard but confusing name which does _not_ mean that the parameter cannot vary,
  but rather that we need both an `s -> t` and a `t -> s`. The `m` parameter is covariant,
  but for a type parameter of kind `* -> *`, so we follow the [convention](http://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Functor-Classes.html)
  and add a `1` to the name of the variance transformer, hence `Covariant1T`.\n\n\n##
  Defining your own variance transformer\n\nWe've seen plenty of strange variances
  already and n-ary-functor provides stranger ones still (can you guess what the `\U0001F47B#\U0001F47B`
  operator does?), but if your type parameters vary in an even more unusual way, you
  can define your own variance transformer. Here's what the definition of `CovariantT`
  looks like:\n\n```haskell\nnewtype CovariantT to f g = CovariantT\n  { (<#>) ::
  forall a b\n           . (a -> b)\n          -> f a `to` g b\n  }\n```\n\nOne thing
  which is unusual in that newtype definition is that instead of naming the eliminator
  `unCovariantT`, we give it the infix name `(<#>)`. See [this blog post](http://gelisam.blogspot.com/2017/12/n-ary-functors.html#ergonomics)
  for more details on that aspect.\n\nLet's look at the type wrapped by the newtype.
  `to` is the rest of the variance stack, so in the simplest case, `to` is just `(->)`,
  in which case the wrapped type is `(a -> b) -> f a -> g b`, which is really close
  to the type of `fmap`. The reason we produce a `g b` instead of an `f b` is because
  previous type parameters might already be mapped; for example, in `nmap <#> show
  <#> show $ (0, 0)`, the overall transformation has type `(,) Int Int -> (,) String
  String`, so from the point of view of the second `(<#>)`, `f` is `(,) Int` and `g`
  is `(,) String`.\n\nOne last thing is that variance transformers must implement
  the `VarianceTransformer` typeclass. It simply ensures that there exists a neutral
  argument, in this case `id`, which doesn't change the type parameter at all.\n\n```haskell\ninstance
  VarianceTransformer CovariantT a where\n  t -#- () = t <#> id\n```\n\n\n### Flavor
  example\n\nA concrete situation in which you'd want to define your own variance
  transformer is if you have a DataKind type parameter which corresponds to a number
  of other types via type families.\n\n```haskell\nimport qualified Data.ByteString
  \     as Strict\nimport qualified Data.ByteString.Lazy as Lazy\nimport qualified
  Data.Text            as Strict\nimport qualified Data.Text.Lazy       as Lazy\n\ndata
  Flavor\n  = Strict\n  | Lazy\n\ntype family ByteString (flavor :: Flavor) :: * where\n
  \ ByteString 'Lazy   = Lazy.ByteString\n  ByteString 'Strict = Strict.ByteString\n\ntype
  family Text (flavor :: Flavor) :: * where\n  Text 'Lazy   = Lazy.Text\n  Text 'Strict
  = Strict.Text\n\ndata File (flavor :: Flavor) = File\n  { name     :: Text flavor\n
  \ , size     :: Int\n  , contents :: ByteString flavor\n  }\n```\n\nIn order to
  convert a `File 'Lazy` to a `File 'Strict`, we need to map both the underlying `Text
  'Lazy` to a `Text 'Strict` and the underlying `ByteString 'Lazy` to a `ByteString
  'Strict`. So those are exactly the two functions our custom variance transformer
  will ask for:\n\n```haskell\nnewtype FlavorvariantT to f g = FlavorvariantT\n  {
  (\U0001F60B#\U0001F60B) :: forall flavor1 flavor2\n           . ( ByteString flavor1
  -> ByteString flavor2\n             , Text       flavor1 -> Text       flavor2\n
  \            )\n          -> f flavor1 `to` g flavor2\n  }\n\ninstance VarianceTransformer
  FlavorvariantT a where\n  t -#- () = t \U0001F60B#\U0001F60B (id, id)\n```\n\nWe
  can now implement our `NFunctor File` instance by specifying that its `flavor` type
  parameter is flavorvariant.\n\n```haskell\ninstance NFunctor File where\n  type
  VarianceStack File = FlavorvariantT (->)\n  nmap = FlavorvariantT $ \\(f, g)\n      ->
  \\(File n s c)\n      -> File (g n) s (f c)\n```\n"
description-type: markdown
hash: 872004369a56b1e13e7c6a71281d818304115bf238f9431c128a73552aec284f
homepage: https://github.com/gelisam/n-ary-functor
latest: '1.0'
license-name: LicenseRef-PublicDomain
maintainer: gelisam+github@gmail.com
synopsis: An n-ary version of Functor
test-bench-deps:
  base: '>4 && <5'
  doctest: '>=0'
  n-ary-functor: '>=0'
