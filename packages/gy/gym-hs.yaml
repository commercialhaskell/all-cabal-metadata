all-versions:
- 0.1.0.0
- 0.1.0.1
author: Ben West
basic-deps:
  aeson: '>=2.0 && <2.3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.6 && <0.8'
  gym-hs: '>=0'
  process: '>=1.6 && <1.7'
  scientific: '>=0.3 && <0.4'
  text: '>=1.2 && <2.2'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.12 && <0.14'
changelog: |-
  # Changelog

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

  ## [Unreleased]

  ## [0.1.0.0] - 2025-07-07

  ### Added
  - Initial release of gym-hs
  - Basic Gymnasium environment bindings
  - Type-safe API for actions and observations
  - Subprocess-based Python interoperability
  - Support for environment creation, reset, step, and render operations
  - Comprehensive error handling with GymError types
  - Automatic resource management and cleanup
  - JSON-based communication protocol
  - Support for all standard Gymnasium environments (CartPole, MountainCar, etc.)
  - Complete test suite with hspec
  - Example application demonstrating usage
  - Documentation and README

  ### Core Features
  - `makeEnv` - Create Gymnasium environments
  - `reset` - Reset environments to initial state
  - `step` - Take actions in environments
  - `render` - Render environment visualization
  - `closeEnv` - Clean up environment resources

  ### Dependencies
  - base >= 4.7 && < 5
  - process >= 1.6
  - aeson >= 2.0
  - bytestring >= 0.10
  - text >= 1.2
  - vector >= 0.12
  - containers >= 0.6
  - unordered-containers >= 0.2
  - scientific >= 0.3

  ### Requirements
  - GHC 9.2+
  - Python 3.8+
  - Gymnasium Python library (`pip install gymnasium`)

  [Unreleased]: https://github.com/gym-hs/gym-hs/compare/v0.1.0.0...HEAD
  [0.1.0.0]: https://github.com/gym-hs/gym-hs/releases/tag/v0.1.0.0
changelog-type: markdown
description: "# Haskell Gymnasium\n\nA Haskell library that provides bindings to OpenAI
  Gymnasium environments, enabling you to call any Gymnasium environment from Haskell.
  Implemented by spawning a python subprocess and using stdio to communicate with
  it.\n\n## Quick Start\n\n### Building\n\n```bash\ncabal build\n```\n\n### Running
  the Example\n\n```bash\ncabal run gym-hs-example\n```\n\nThis will create a CartPole-v1
  environment and run 5 random steps.\n\n### Running Tests\n\n```bash\ncabal test\n```\n\n##
  Usage Example\n\n```haskell\n{-# LANGUAGE OverloadedStrings #-}\nimport Data.Aeson
  (Value(Number))\nimport Gym.Environment\nimport Gym.Core\n\nmain :: IO ()\nmain
  = do\n  result <- makeEnv \"CartPole-v1\"\n  case result of\n    Left err -> print
  err\n    Right env -> do\n      -- Reset environment\n      resetResult <- reset
  env\n      case resetResult of\n        Left err -> print err\n        Right (Observation
  obs) -> do\n          putStrLn $ \"Initial observation: \" ++ show obs\n          \n
  \         -- Take an action (0 = left, 1 = right for CartPole)\n          stepResult
  <- step env (Action (Number 0))\n          case stepResult of\n            Left
  err -> print err\n            Right result -> do\n              putStrLn $ \"Reward:
  \" ++ show (stepReward result)\n              putStrLn $ \"Done: \" ++ show (stepTerminated
  result)\n      \n      -- Clean up\n      closeEnv env\n```\n\nA full example using
  Gymnasium to implement a DQN solving CartPole is [here](https://github.com/Xodarap/hs-gym-example)."
description-type: markdown
hash: 178a564a9a43ecfb2c72bb7638b667a827f77c115d18cb34166e3640f44e575e
homepage: https://github.com/Xodarap/haskell-gymnasium
latest: 0.1.0.1
license-name: MIT
maintainer: xodarap00@gmail.com
synopsis: Haskell bindings for OpenAI Gymnasium
test-bench-deps:
  aeson: '>=2.0 && <2.3'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.6 && <0.8'
  gym-hs: '>=0'
  hspec: '>=2.7 && <2.12'
  process: '>=1.6 && <1.7'
  scientific: '>=0.3 && <0.4'
  text: '>=1.2 && <2.2'
  unordered-containers: '>=0.2 && <0.3'
  vector: '>=0.12 && <0.14'
