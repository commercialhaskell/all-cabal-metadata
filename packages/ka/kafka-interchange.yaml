all-versions:
- 0.2.0.0
author: Andrew Martin
basic-deps:
  base: '>=4.11 && <5'
  bytebuild: '>=0.3.14'
  byteslice: '>=0.1.1.0 && <0.3.0.0'
  bytesmith: '>=0.3 && <0.4'
  bytestring: '>=0.11'
  castagnoli: '>=0.2.0.1'
  chronos: '>=1.1.5'
  containers: '>=0.5'
  contiguous: '>=0.6'
  ip: '>=1.5.0 && <1.8'
  mtl: '>=2.2.2'
  natural-arithmetic: '>=0.1.3'
  primitive: '>=0.9.0.0 && <0.10'
  primitive-unaligned: '>=0.1.1.0 && <0.2.0.0'
  stm: '>=2.5.0.0'
  text: '>=2.0'
  text-short: '>=0.1.5'
  torsor: '>=0.1 && <0.2'
  transformers: '>=0.5 && <0.7'
  wide-word: '>=0.1.5'
  zigzag: '>=0.0.1'
changelog: ''
changelog-type: ''
description: |
  # kafka-interchange

  This library provides serialization and deserialization for exchanges
  with Kafka. This takes the form of: data types, encode functions, and
  decode functions. This library is not a Kafka client. A Kafka client must
  be a much more opinionated piece of software. The purpose of this library
  is for Kafka clients to be built on top of it.

  ## Module Structure

  There are two module namespaces in this library: `Kafka.Interchange` and
  `Kafka.Data`. Pseudoregex for modules in the `Kafka.Interchange` namespace:

      Kafka.Interchange.{msgtype}.(Request|Response).V[0-9]+

  For example:

      Kafka.Interchange.Message.Request.V2
      Kafka.Interchange.Message.Response.V1
      Kafka.Interchange.Produce.Request.V9

  The message type "Message" is special. It's the wrapper that all other message
  types are serialized inside of. Request modules include a encode function.
  Response modules include a decode function.

  Some shared types are used by both requests and responses. For such types, we
  use the `Kafka.Data` namespace. For example:

      Kafka.Data.Acknowledgments

  These are not versioned, and they include both encode and decode functions.
description-type: markdown
hash: 4d9696af98aa8f88fbd5e17eb80f1e4f4a293d5f6f93062dff56fae5f9414865
homepage: ''
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: amartin@layer3com.com
synopsis: Serialization for kafka wire protocol
test-bench-deps:
  aeson: '>=2.1.2.1'
  base: '>=0'
  base16: '>=1.0'
  bytebuild: '>=0'
  byteslice: '>=0'
  bytesmith: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  kafka-interchange: '>=0'
  pretty-show: '>=1.10'
  primitive: '>=0.9'
  primitive-unlifted: '>=0'
  tasty: '>=0'
  tasty-golden: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  wide-word: '>=0.1.5'
