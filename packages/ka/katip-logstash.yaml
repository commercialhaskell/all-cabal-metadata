homepage: https://github.com/mbg/logstash#readme
changelog-type: markdown
hash: beca18c81821fb7c0219704a41c79167722787bd3162b24cd7bed8254e3334b0
test-bench-deps: {}
maintainer: github@michael-gale.co.uk
synopsis: Logstash backend for katip.
changelog: |-
  # Changelog for logstash

  ## v0.1.0.1

  - Fixes a bug which caused `LogstashConnection`s from a `LogstashPool` to not get released properly in `runLogstashPool`
  ## v0.1

  - First release with support for connecting to `tcp` (incl. TLS) Logstash inputs and the `json_lines` codec.
basic-deps:
  katip: <0.9
  unliftio: <0.3
  stm: <2.6
  base: '>=4.7 && <5'
  text: <1.3
  retry: <0.9
  stm-chans: <3.1
  transformers: <0.6
  aeson: <1.6
  logstash: <0.2
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Michael B. Gale
latest: 0.1.0.1
description-type: markdown
description: "# Haskell client library for Logstash\n\n![MIT](https://img.shields.io/github/license/mbg/logstash)\n![CI](https://github.com/mbg/logstash/workflows/Build/badge.svg?branch=master)\n![stackage-nightly](https://github.com/mbg/logstash/workflows/stackage-nightly/badge.svg)\n[![logstash](https://img.shields.io/hackage/v/logstash)](https://hackage.haskell.org/package/logstash)\n\nThis
  library implements a client for Logstash in Haskell. The following features are
  currently supported:\n\n- Connections to Logstash via TCP or TLS (`tcp` input type).\n-
  Support for the `json_lines` codec out of the box and custom codecs can be implemented
  (arbitrary `ByteString` data can be sent across the connections).\n- This library
  can either be used without any logging framework, as a backend for [`monad-logger`](http://hackage.haskell.org/package/monad-logger/),
  or as a backend for [`katip`](http://hackage.haskell.org/package/katip/).\n- Log
  messages can either be written synchronously or asynchronously.\n\nFor example,
  to connect to a Logstash server via TCP at `127.0.0.1:5000` (configuration given
  by `def`) and send a JSON document synchronously with a timeout of 1s and the default
  retry policy from [`Control.Retry`](https://hackage.haskell.org/package/retry/docs/Control-Retry.html):\n\n```haskell\ndata
  Doc = Doc String\n\ninstance ToJSON Doc where\n    toJSON (Doc msg) = object [ \"message\"
  .= msg ]\n\nmain :: IO ()\nmain = runLogstashConn (logstashTcp def) retryPolicyDefault
  1000000 $\n    stashJsonLine (Doc \"Hello World\")\n```\n\nOnly the `tcp` input
  type (with or without TLS) is currently supported. For example, without TLS, the
  Logstash input configuration should roughly be:\n\n```conf\ninput {\n    tcp {\n
  \       port => 5000\n        codec => \"json_lines\"\n    }\n}\n```\n\nWith TLS,
  the expected Logstash configuration should roughly be:\n\n```conf\ninput {\n    tcp
  {\n        port => 5000\n        ssl_cert => \"/usr/share/logstash/tls/cert.pem\"\n
  \       ssl_key => \"/usr/share/logstash/tls/key.pem\"\n        ssl_key_passphrase
  => \"foobar\"\n        ssl_enable => true \n        ssl_verify => false\n        codec
  => \"json_lines\"\n    }\n}\n```\n\n## Configuring connections\n\nConnections to
  Logstash are represented by the `LogstashConnection` type. To connect to Logstash
  via `tcp` use the `Logstash.TCP` module which exports four principal functions.
  Note that none of these functions establish any connections when they are called
  - instead, they allow `runLogstashConn` and `runLogstashPool` to establish connections/reuse
  them as needed:\n\n- `logstashTcp` which, given a hostname and a port, will produce
  an `Acquire` that can be used with `runLogstashConn`.\n- `logstashTcpPool` which,
  given a hostname and a port, will produce a `Pool` that can be used with `runLogstashPool`.\n-
  `logstashTls` which, given a hostname, a port, and TLS client parameters, will produce
  an `Acquire` that can be used with `runLogstashConn`.\n- `logstashTlsPool` which,
  given a hostname, a port, and TLS client parameters, will produce a `Pool` that
  can be used with `runLogstashPool`.\n\nFor `logstashTls` and `logstashTlsPool`,
  TLS `ClientParams` are required. It is worth noting that the `defaultParamsClient`
  function in the `tls` package does **not** set any supported ciphers and does **not**
  load the system trust store by default. For relatively sane defaults, it is worth
  using `newDefaultClientParams` from [`network-simple-tls`](http://hackage.haskell.org/package/network-simple-tls/)
  instead. For example:\n\n```haskell\nmain :: IO ()\nmain = do \n    params <- newDefaultClientParams
  (\"127.0.0.1\", \"\")\n\n    runLogstashConn (logstashTls def params) retryPolicyDefault
  1000000 $ \n        stashJsonLine myDocument\n```\n\n## Logging things\n\nThe `Logstash`
  module exports functions for synchronous and asynchronous logging. Synchronous logging
  is acceptable for applications or parts of applications that are largely single-threaded
  where blocking on writes to Logstash is not an issue. For multi-threaded applications,
  such as web applications or services, you may wish to write log messages to Logstash
  asynchronously instead. In the latter model, log messages are added to a bounded
  queue which is processed asynchronously by worker threads. \n\n### Synchronously\n\nThe
  logging functions exported by the `Logstash` module are backend-independent can
  be invoked synchronously with `runLogstash`, which is overloaded to work with either
  `Acquire LogstashConnection` or `LogstashPool` (`Pool LogstashConnection`) values
  and maps to one of the two implementations described below. In either case, you
  must supply a retry policy and a timeout (in microseconds). The retry policy determines
  whether performing the logging action should be re-attempted if an exception occurs.
  The order of operations is:\n\n1. The retry policy is applied.\n2. A connection
  is established using the provided Logstash context.\n3. The timeout is applied.\n4.
  The Logstash computation is executed.\n\nIf the computation is successful, each
  step will only be executed once. If an exception is raised by the computation or
  the timeout, the connection to the Logstash server is terminated and the exception
  propagated to the retry policy. If the retry policy determines that the computation
  should be re-attempted, steps 2-4 will happen again. The timeout applies to every
  attempt individually and should be chosen appropriately in conjunction with the
  retry policy in mind.\n\nDepending on whether the Logstash context is a `Acquire
  LogstashConnection` value or a `LogstashPool` (`Pool LogstashConnection`) value,
  the `runLogstash` functions maps to one of:\n\n- `runLogstashConn` for `Acquire
  LogstashConnection` (e.g. the result of `logstashTcp` or `logstashTls`).\n- `runLogstashPool`
  for `Pool LogstashConnection` (e.g. the result of `logstashTcpPool` or `logstashTlsPool`).
  If a connection is available in the pool, that connection will be used. If no connection
  is available but there is an empty space in the pool, a new connection will be established.
  If neither is true, this function blocks until a connection is available. The computation
  that is provided as the second argument is then run with the connection. In the
  event of an exception, the connection is not returned to the pool.\n\n#### Stashing
  things by hand\n\nThe following functions allow sending data synchronously via the
  Logstash connection:\n\n- `stash` is a general-purpose function for sending `ByteString`
  data to the server. No further processing is performed on the data.\n- `stashJsonLine`
  is for use with the `json_line` codec. The argument is encoded as JSON and a `\\n`
  character is appended, which is then sent to the server. \n\nAny exception raised
  by the above `stash`ing functions will likely be due to a bad connection. The `runLogstash`
  functions apply the retry policy before establishing a connection, so in the event
  that an exception is raised, a new connection will be established for the next attempt.\n\n###
  Asynchronously\n\nThe `withLogstashQueue` function is used for asynchronous logging.
  When called, it sets up a bounded queue that is then used to communicate log messages
  to worker threads which dispatch them to Logstash. A minimal example with default
  settings is shown below:\n\n```haskell\ndata Doc = Doc String\n\ninstance ToJSON
  Doc where\n    toJSON (Doc msg) = object [ \"message\" .= msg ]\n\nmain :: IO ()\nmain
  = do\n    let ctx = logstashTcp def\n    let cfg = defaultLogstashQueueCfg ctx\n
  \   \n    withLogstashQueue cfg (const stashJsonLine) [] $ \\queue -> do\n        atomically
  $ writeTBMQueue queue (Doc \"Hello World\")\n```\n\nThe `[]` given to `withLogstashQueue`
  allows installing exception handlers that are used to handle the case where a log
  message has exhausted the retry policy. This can e.g. be used to fall back to the
  standard output for logging as a last resort and to stop the worker thread from
  getting terminated by an exception that may be recoverable.\n\nThe queue is automatically
  closed when the inner computation returns. The worker threads will continue running
  until the queue is empty and then terminate. `withLogstashQueue` will not return
  until all worker threads have returned.\n\n### Usage with `monad-logger`\n[![monad-logger-logstash](https://img.shields.io/hackage/v/monad-logger-logstash)](https://hackage.haskell.org/package/monad-logger-logstash)\n\nThe
  `monad-logger-logstash` package provides convenience functions and types for working
  with [`monad-logger`](http://hackage.haskell.org/package/monad-logger/). \n\n####
  Synchronous logging\n\nThe following example demonstrates how to use the `runLogstashLoggingT`
  function with a TCP connection to Logstash, the default retry policy from [`Control.Retry`](https://hackage.haskell.org/package/retry/docs/Control-Retry.html),
  a 1s timeout for each attempt, and the `json_lines` codec:\n\n```haskell\nmain ::
  IO ()\nmain = do \n    let ctx = logstashTcp def\n    runLogstashLoggingT ctx retryPolicyDefault
  1000000 (const stashJsonLine) $ \n        logInfoN \"Hello World\"\n```\n\nEach
  call to a logging function such as `logInfoN` in the example will result in the
  log message being written to Logstash synchronously. \n\n#### Asynchronous logging\n\nThe
  `withLogstashLoggingT` function is the analogue of `withLogstashQueue` for `monad-logger`.
  It performs the same setup as `withLogstashQueue`, but automatically adds all log
  messages from logging functions to the queue. A minimal example with default settings
  is:\n\n```haskell\nmain :: IO ()\nmain = do \n    let ctx = logstashTcp def\n    withLogstashLoggingT
  (defaultLogstashQueueCfg ctx) (const stashJsonLine) [] $ \n        logInfoN \"Hello
  World\"\n```\n\nWhile `withLogstashLoggingT` is useful for scenarios where there
  is a single producer for which log messages should be dispatched asynchronously,
  we may wish to share the same queue among several producers. For such applications,
  the `runTBMQueueLoggingT` in combination with `withLogstashQueue` is a better fit:\n\n```haskell\nmain
  :: IO ()\nmain = do \n    let ctx = logstashTcp def\n    let cfg = defaultLogstashQueueCfg
  ctx\n\n    withLogstashQueue cfg (const stashJsonLine) [] $ \\queue -> do\n        thread
  <- async $ runTBMQueueLoggingT queue $ do\n            liftIO $ threadDelay (60*1000*1000)\n
  \           logInfoN \"I am consumer #2\" \n        \n        runTBMQueueLoggingT
  queue $ do \n            logInfoN \"I am consumer #1\"\n\n        wait thread\n```\n\n###
  Usage with `katip`\n[![katip-logstash](https://img.shields.io/hackage/v/katip-logstash)](https://hackage.haskell.org/package/katip-logstash)\n\nThe
  `katip-logstash` package provides convenience functions and types for working with
  [`katip`](http://hackage.haskell.org/package/katip/). \n\n#### Asynchronous logging\n\nThe
  `withLogstashScribe` function is the analogue of `withLogstashQueue` for `katip`.
  It performs the same setup as `withLogstashQueue`, but provides a `Scribe` instead
  of the raw queue. A minimal example with default settings is (adapted from the `katip`
  documentation):\n\n```haskell\nmain :: IO ()\nmain = do \n    let ctx = logstashTcp
  def\n    withLogstashScribe (defaultLogstashQueueCfg ctx) (const $ pure True) (itemJson
  V3) (const stashJsonLine) [] $ \\logstashScribe -> do\n        let makeLogEnv =
  registerScribe \"logstash\" logstashScribe defaultScribeSettings =<< initLogEnv
  \"MyApp\" \"production\"\n        bracket makeLogEnv closeScribes $ \\le -> do\n
  \           let initialContext = ()\n            let initialNamespace = \"main\"\n
  \           runKatipContextT le initialContext initialNamespace $ do\n                $(logTM)
  InfoS \"Hello World\"\n```\n"
license-name: MIT
