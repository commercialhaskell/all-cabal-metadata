all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.1
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.4.0.1
- 0.4.0.2
author: Walter Schulze
basic-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  either: '>=0'
  extra: '>=0'
  hxt: '>=0'
  ilist: '>=0'
  json: '>=0'
  katydid: '>=0'
  mtl: '>=0'
  parsec: '>=0'
  regex-tdfa: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: |-
  # 0.4.0.2

  Regenerated docs

  # 0.4.0.1

  Moved all files into move idiomatic folders.

  # 0.3.1.0

  Fixed build, by removing internal uses of outdated EitherT.

  # 0.3.0.1

  New Smart constructors and user defined functions

  # 0.2.0.1

  Fixed parsing of builtin regex and contains functions.

  # 0.2.0.0

  New benchmarks

  # 0.1.1.0

  Cleanup

  # 0.1.0.0

  First version
changelog-type: markdown
description: "# Katydid\n\n[![Build Status](https://travis-ci.org/katydid/katydid-haskell.svg?branch=master)](https://travis-ci.org/katydid/katydid-haskell)\n\nA
  Haskell implementation of Katydid.\n\n![Katydid Logo](https://cdn.rawgit.com/katydid/katydid.github.io/master/logo.png)\n\nThis
  includes:\n\n  - [Relapse](https://katydid.github.io/katydid-haskell/Relapse.html):
  Validation Language \n  - Parsers: [JSON](https://katydid.github.io/katydid-haskell/Json.html)
  and [XML](https://katydid.github.io/katydid-haskell/Xml.html)\n\n[Documentation
  for katydid](http://katydid.github.io/)\n\n[Documentation for katydid-haskell](https://katydid.github.io/katydid-haskell/)\n\n[Documentation
  for katydid-haskell/Relapse](https://katydid.github.io/katydid-haskell/Relapse.html)\n\nAll
  JSON and XML tests from [the language agnostic test suite](https://github.com/katydid/testsuite)
  [passes].\n\n[Hackage](https://hackage.haskell.org/package/katydid)\n\n## Example\n\nValidating
  a single structure can be done using the validate function:\n```haskell\nvalidate
  :: Tree t => Grammar -> [t] -> Bool\n```\n\n, where a tree is a class in the [Parsers](https://katydid.github.io/katydid-haskell/Parsers.html)
  module:\n```haskell\nclass Tree a where\n    getLabel :: a -> Label\n    getChildren
  :: a -> [a]\n```\n\nHere is an example that validates a single JSON tree:\n```haskell\nmain
  = either \n    (\\err -> putStrLn $ \"error:\" ++ err) \n    (\\valid -> if valid
  \n        then putStrLn \"dragons exist\" \n        else putStrLn \"dragons are
  fictional\"\n    ) $\n    Relapse.validate <$> \n        Relapse.parse \".DragonsExist
  == true\" <*> \n        Json.decodeJSON \"{\\\"DragonsExist\\\": false}\"\n```\n\n##
  Efficiency\n\nIf you want to validate multiple trees using the same grammar then
  the filter function does some internal memoization, which makes a huge difference.\n\n```haskell\nfilter
  :: Tree t => Grammar -> [[t]] -> [[t]]\n```\n\n## User Defined Functions\n\nIf you
  want to create your own extra functions for operating on the leaves,\nthen you can
  inject them into the parse function:\n\n```haskell\nmain = either\n    (\\err ->
  putStrLn $ \"error:\" ++ err)\n    (\\valid -> if valid\n        then putStrLn \"prime
  birthday !!!\"\n        else putStrLn \"JOMO\"\n    ) $\n    Relapse.validate <$>\n
  \       Relapse.parseWithUDFs userLib \".Survived->isPrime($int)\" <*>\n        Json.decodeJSON
  \"{\\\"Survived\\\": 104743}\"\n```\n\nDefining your own user library to inject
  is easy.\nThe `Expr` library provides many useful helper functions:\n\n```haskell\nimport
  Data.Numbers.Primes (isPrime)\nimport Data.Katydid.Relapse.Expr\n\nuserLib :: String
  -> [AnyExpr] -> Either String AnyExpr\nuserLib \"isPrime\" args = mkIsPrime args\nuserLib
  n _ = throwError $ \"undefined function: \" ++ n\n\nmkIsPrime :: [AnyExpr] -> Either
  String AnyExpr\nmkIsPrime args = do {\n    arg <- assertArgs1 \"isPrime\" args;\n
  \   mkBoolExpr . isPrimeExpr <$> assertInt arg;\n}\n\nisPrimeExpr :: Integral a
  => Expr a -> Expr Bool\nisPrimeExpr numExpr = trimBool Expr {\n    desc = mkDesc
  \"isPrime\" [desc numExpr]\n    , eval = \\fieldValue -> isPrime <$> eval numExpr
  fieldValue\n}\n```\n\n## Roadmap\n\n  - Protobuf parser\n  - Profile and Optimize
  (bring up to par with Go version)\n  - Typed DSL (Combinator)"
description-type: markdown
hash: 2db35b05755abc06be87d37ab6d727bc12116c0642f77d44c63b8dca08db9940
homepage: https://github.com/katydid/katydid-haskell#readme
latest: 0.4.0.2
license-name: BSD-3-Clause
maintainer: awalterschulze@gmail.com
synopsis: A haskell implementation of Katydid
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  containers: '>=0'
  criterion: '>=1.2.2'
  deepseq: '>=0'
  directory: '>=0'
  either: '>=0'
  extra: '>=0'
  filepath: '>=0'
  hxt: '>=0'
  ilist: '>=0'
  json: '>=0'
  katydid: '>=0'
  mtl: '>=0'
  parsec: '>=0'
  primes: '>=0'
  regex-tdfa: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  transformers: '>=0'
