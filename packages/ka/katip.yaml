all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.1.4
- 0.3.1.5
- 0.4.0.0
- 0.4.1.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.1.0
- 0.5.2.0
- 0.5.3.0
- 0.5.4.0
- 0.5.5.0
- 0.5.5.1
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.2.1
- 0.6.3.0
- 0.7.0.0
- 0.8.0.0
- 0.8.1.0
- 0.8.2.0
- 0.8.3.0
- 0.8.4.0
- 0.8.5.0
- 0.8.6.0
- 0.8.7.0
- 0.8.7.1
- 0.8.7.2
- 0.8.7.3
- 0.8.7.4
- 0.8.8.0
- 0.8.8.1
- 0.8.8.2
- 0.8.8.4
author: Ozgun Ataman, Michael Xavier
basic-deps:
  aeson: '>=1.0.0.0'
  async: '>=2.0.0.0 && <3.0.0.0'
  auto-update: '>=0.1'
  base: '>=4.9.0.0 && <5'
  bytestring: '>=0.9'
  containers: '>=0.4'
  either: '>=4'
  hostname: '>=1.0'
  microlens: '>=0.2.0.0'
  microlens-th: '>=0.1.0.0'
  monad-control: '>=1.0'
  mtl: '>=2.0'
  old-locale: '>=1.0'
  resourcet: '>=1.2.0'
  safe-exceptions: '>=0.1.0.0'
  scientific: '>=0.3.3.0'
  semigroups: '>=0'
  stm: '>=2.4.4.1'
  string-conv: '>=0.1'
  template-haskell: '>=2.8'
  text: '>=1.2.4.0'
  time: '>=1'
  transformers: '>=0.3'
  transformers-base: '>=0.3'
  transformers-compat: '>=0'
  unix: '>=2.5 && <2.9'
  unliftio-core: '>=0.1'
  unordered-containers: '>=0.2'
  vector: '>=0'
changelog: |
  0.8.8.4
  =======
  * Fix build on GHC 9.6 and below [#160](https://github.com/Soostone/katip/pull/160)

  0.8.8.3
  =======
  * Don't rely on package names in `getLoc` [#159](https://github.com/Soostone/katip/pull/159)

  0.8.8.2
  =======
  * Performance improvements [#152](https://github.com/Soostone/katip/pull/152)

  0.8.8.1
  =======
  * Improve logging performance (4x) via inlining [#151](https://github.com/Soostone/katip/pull/151)

  0.8.8.0
  =======
  * Add support for rendering arrays in the log context to the handle scribe [#150](https://github.com/Soostone/katip/pull/150)

  0.8.7.4
  =======
  * Allow up to GHC 9.6 for Windows [#145](https://github.com/Soostone/katip/pull/145)

  0.8.7.3
  =======
  * unix 2.8 compatibility [#143](https://github.com/Soostone/katip/pull/143)

  0.8.7.2
  =======
  * MTL 2.3 compatibility [#140](https://github.com/Soostone/katip/pull/140)

  0.8.7.1
  =======
  * Text 2 compatibility [#138](https://github.com/Soostone/katip/pull/138)

  0.8.7.0
  =======
  * Aeson 2 compatibility [#131](https://github.com/Soostone/katip/pull/131)

  0.8.6.0
  =======
  * GHC 8.10 compatibility

  0.8.5.0
  =======
  * Add MonadResource instances [#121](https://github.com/Soostone/katip/pull/121)

  0.8.4.0
  =======
  * Add support for unliftio-core 0.2 while maintaining backwards-compatible support for 0.1

  0.8.3.0
  =======

  * Add `logKatipItem` function and reimplement `logItem` to use it. [vlatkoB](https://github.com/vlatkoB)

  0.8.2.0
  =======
  * Add `MonadFail` instances for `base` >= 4.9.0.0 [Koray Al](https://github.com/korayal)

  0.8.1.0
  =======
  * Export `logLoc`. Credit to [Brian McKenna](https://github.com/puffnfresh)

  0.8.0.0
  =======
  * **Breaking change**: switch from severity based log level filtering to
    user-definable `PermitFunc`. To upgrade, any time you initialize one
    of the standard scribes, rather than providing a severity like
    `InfoS`, instead pass in `(permitItem InfoS)`. Credit to
    [vlatkoB](https://github.com/vlatkoB).
  * Update some misformatted and outdated docs.
  * Set lower bound of base to 4.9.0.0, the version shipped with GHC
    8.0.2. Support for GHC versions older than that is removed.
  * Update default formatter of Handle scribe to format pid as `[PID
    1234]` instead of `[1234]` and `[ThreadId 1234]` instead of
    `[1234]`.
  * Add missing `Bounded` instance for `Verbosity`. This allows you to
    easily enumerate all verbosities via `[minBound..maxBound]`.

  0.7.0.0
  =======
  * Exclusively use HasCallstack for location reporting in errors. Credit to [Domen Kožar](https://github.com/domenkozar)
  * Drop support for GHC 7.x

  0.6.3.0
  =======
  * Add `ToJSON`/`FromJSON` instances for Verbosity. Credit to [Aleksey Khudyakov](https://github.com/Shimuuar).

  0.6.2.1
  =======
  * Add `mkHandleScribeWithFormatter`. This allows control over the format of log items going to a handle. Credit to [Tristan Bull](https://github.com/tmbull) for the implementation.
  * Documentation fixes. Credit to [Domen Kožar](https://github.com/domenkozar) for the implementation.
  * Add `jsonFormat` handle formatter.
  * Deprecate `formatItem` which is now replaced by `bracketFormat`.

  0.6.1.0
  =======
  * Loosen deps
  * Support latest STM

  0.6.0.0
  =======
  * Drop ListT instance due to deprecations.
  * Loosen dependencies.

  0.5.5.1
  =======
  * Decrease default timer resolution from 1s to 1ms.

  0.5.5.0
  =======
  * Export `runNoLoggingT` and `NoLoggingT` constructor.
  * Delegate MonadReader instance for `NoLoggingT`.

  0.5.4.0
  =======
  * Loosen bounds on resourcet and template-haskell.
  * Add convenience function askLoggerIO.

  0.5.3.0
  =======
  * Add MonadUnliftIO instances.
  * Add NoLoggingT

  0.5.2.0
  =======
  * Allow newer versions of either by conditionally adding instances for the removed EitherT interface.

  0.5.1.0
  =======
  * Add mkFileScribe, a specialization of mkHandleScribe for files that manages the handle automatically.

  0.5.0.4
  =======
  * Loosen Win32 upper bound to run with GHC 8.2 on Windows.

  0.5.0.3
  =======
  * Add worked example of Katip/KatipContext to the haddocks.

  0.5.0.2
  =======
  * Export Katip.Compat for Windows users.

  0.5.0.1
  =======
  * Fix numeric formatting in Handle scribe.
  * Bump deps for GHC 8.2.1

  0.5.0.0
  =======
  * Improved documentation.
  * Add built-in buffering to scribes.
    Scribes now allocate a bounded queue (with configurable size). Rather than writes being synchronous to all scribes, they simply attempt to write into the bounded queue of each scribe. If any of the scribes is too far behind and the queue is full, the write is dropped. This also means that closing scribes is now an IO operation that happens synchrounsly.
  * Added local-like functions to Katip and KatipContext typeclasses. This allows us to generalize `katipNoLogging`, `katipAddNamespace`, and `katipAddContext` to be available to anything with a `Katip` or `KatipContext` instance rather than having to reimplement these functions all the time.

  0.4.1.0
  =======
  * Add Katip instances for Strict StateT, WriterT, RWST.
  * Add Katip instances for Lazy RWST.

  0.4.0.0
  =======
  * Drop unsafe _ioLogEnv for safe ioLogEnv

  0.3.1.5
  =======
  * Add Semigroup instance for LogStr.

  0.3.1.4
  =======
  * Loosen deps on aeson to allow 1.1.0.0

  0.3.1.3
  =======
  * Fix build on windows

  0.3.1.2
  =======
  * Add some missing test files

  0.3.1.1
  =======
  * Fix some example code that wasn't building
  * Make FromJSON instance for Severity case insensitive.

  0.3.1.0
  =======
  * Add support for aeson 1.0.x
  * Add Katip.Format.Time module and use much more efficient time formatting code in the Handle scribe.

  0.3.0.0
  =======
  * Switch from `regex-tdfa-rc` to `regex-tdfa`.
  * Add `katipNoLogging` combinator.
  * Add `Semigroup` instances.
  * Drop `ToJSON` superclass requirement fro `ToObject`. Instead,
    `ToObject` will provide a default instance for types with an
    instance for `ToJSON`. This gets us to the same place as before
    without having to add a broader instance for something that's only
    going to show up in logs as an Object.
  * Add a simple MVar lock for file handle scribes to avoid interleaved
    log lines from concurrent inputs.

  0.2.0.0
  =======

  * Add GHC implicit callstack support, add logLoc.
  * Drop lens in favor of type-compatible, lighter microlens.
  * Renamed `logEnvNs` to clearer `logEnvApp`
  * Added `katipAddNamespace` and `katipAddContext`
  * Fixed nested objects not rendering in Handle scribe.
  * LogContexts Monoid instance is now right-biased rather than left
    biased. This better fits the use case. For instance `ctx1 <> ctx2`
    will prefer keys in `ctx2` if there are conflicts. This makes the
    most sense because functions like `katipAddContext` will `mappend`
    on the right side.
  * LogContext internally uses a `Seq` instead of a list for better
    complexity on context add.
  * Improved documentation.

  0.1.1.0
  ==============

  * Set upper bounds for a few dependencies.
  * Add ExceptT instance for Katip typeclass

  0.1.0.0
  ==============

  * Initial release
changelog-type: markdown
description: |
  # Katip [![Build Status](https://travis-ci.org/Soostone/katip.svg?branch=master)](https://travis-ci.org/Soostone/katip)

  Katip is a structured logging framework for Haskell.

  ![Katip](https://github.com/Soostone/katip/blob/master/katip/katip.jpg)

  Kâtip (pronounced kah-tip) is the Turkish word for scribe.

  ## Features

  * *Structured:* Logs are structured, meaning they can be individually
    tagged with key value data (JSON Objects). This helps you add
    critical details to log messages before you need them so that when
    you do, they are available. Katip exposes a typeclass for log
    payloads so that you can use rich, domain-specific Haskell types to
    add context that will be automatically merged in with existing log
    context.

  * *Easy Integration:* Katip was designed to be easily integrated
    into existing monads. By using typeclasses for logging facilities,
    individual subsystems and even libraries can easily add their own
    namespacing and context without having any knowledge of their
    logging environment.

  * *Practical Use:* Katip comes with a set of convenience facilities
    built-in, so it can be used without much headache even in small
    projects.

      * A `Handle` backend for logging to files in simple settings.

      * A `AnyLogPayload` key-value type that makes it easy to log
        structured columns on the fly without having to define new data
        types.

      * A `Monadic` interface where logging namespace can be obtained
        from the monad context.

      * Multiple variants of the fundamental logging functions for
        optionally including fields and line-number information.

  * *Extensible:* Can be easily extended (even at runtime) to output to
    multiple backends at once (known as scribes). See
    `katip-elasticsearch` as an example. Backends for other forms of
    storage are trivial to write, including both hosted database systems
    and SaaS logging providers.

  * *Debug-Friendly:* Critical details for monitoring production systems
    such as host, PID, thread id, module and line location are
    automatically captured. User-specified attributes such as
    environment (e.g. Production, Test, Dev) and system name are also
    captured.

  * *Configurable:* Can be adjusted on a per-scribe basis both with
    verbosity and severity.

      * *Verbosity* dictates how much of the log structure should
        actually get logged. In code you can capture highly detailed
        metadata and decide how much of that gets emitted to each backend.

      * *Severity* AKA "log level" is specified with each message and
        individual scribes can decide whether or not to record that
        severity. It is even possible to at runtime swap out and replace
        loggers, allowing for swapping in verbose debug logging at runtime
        if you want.

  * *Battle-Tested:* Katip has been integrated into several production
    systems since 2015 and has logged hundreds of millions of messages
    to files and ElasticSearch.


  ## Examples

  Be sure to look in the
  [examples](https://github.com/Soostone/katip/blob/master/katip/examples)
  directory for some examples of how to integrate Katip into your own
  stack.


  ## Contributors

  * [Ozgun Ataman](https://github.com/ozataman)
  * [Michael Xavier](https://github.com/MichaelXavier)
  * [Doug Beardsley](https://github.com/mightybyte)
  * [Leonid Onokhov](https://github.com/sopvop)
  * [Alexander Vershilov](https://github.com/qnikst)
  * [Chris Martin](https://github.com/chris-martin)
  * [Domen Kožar](https://github.com/domenkozar)
  * [Tristan Bull](https://github.com/tmbull)
  * [Aleksey Khudyakov](https://github.com/Shimuuar)
description-type: markdown
hash: 838dbca1738516cc18708be3bec0f0d51fa021b022dd55e045e3e94bc3ee4d14
homepage: https://github.com/Soostone/katip
latest: 0.8.8.4
license-name: BSD-3-Clause
maintainer: michael.xavier@soostone.com
synopsis: A structured logging framework.
test-bench-deps:
  aeson: '>=0'
  async: '>=0'
  base: '>=0'
  blaze-builder: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  criterion: '>=1.1.0.0'
  deepseq: '>=0'
  directory: '>=0'
  filepath: '>=0'
  katip: '>=0'
  microlens: '>=0'
  quickcheck-instances: '>=0'
  regex-tdfa: '>=0'
  safe-exceptions: '>=0'
  stm: '>=0'
  tasty: '>=0.10.1.2'
  tasty-golden: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  time: '>=0'
  time-locale-compat: '>=0.1.0.1'
  transformers: '>=0'
  unix: '>=0'
  unordered-containers: '>=0'
