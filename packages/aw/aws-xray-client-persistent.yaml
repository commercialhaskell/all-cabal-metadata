homepage: https://github.com/freckle/aws-xray-client#readme
changelog-type: markdown
hash: dcb2e35f5463c88d58b5d15befd0dd12f7f142a7c4f3b1d26f7acf9ab073bef6
test-bench-deps: {}
maintainer: engineering@freckle.com
synopsis: A client for AWS X-Ray integration with Persistent.
changelog: |
  ## [*Unreleased*](https://github.com/freckle/aws-xray-client/compare/aws-xray-client-persistent-v0.1.0.2...main)

  None

  ## [v0.1.0.2](https://github.com/freckle/aws-xray-client/compare/aws-xray-client-persistent-v0.1.0.1...aws-xray-client-persistent-v0.1.0.2)

  - Build on GHC 8.10

  ## [v0.1.0.1](https://github.com/freckle/aws-xray-client/compare/aws-xray-client-persistent-v0.1.0.0...aws-xray-client-persistent-v0.1.0.1)

  - Add explicit import for `SqlBackend` fields

  ## [v0.1.0.0](https://github.com/freckle/aws-xray-client/tree/aws-xray-client-persistent-v0.1.0.0)

  First tagged release.
basic-deps:
  base: '>=4.14.3.0 && <5'
  time: '>=1.9.3'
  persistent: '>=2.13.3.0'
  text: '>=1.2.4.1'
  conduit: '>=1.3.4.2'
  containers: '>=0.6.5.1'
  lens: '>=4.19.2'
  random: '>=1.2.0'
  resourcet: '>=1.2.4.3'
  aws-xray-client: '>=0.1.0.1'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.4
author: Freckle R&D
latest: 0.1.0.4
description-type: markdown
description: "# aws-xray-client-persistent\n\nA Haskell client for integrating AWS
  X-Ray with [Persistent](https://hackage.haskell.org/package/persistent).\n\nTo use
  this, you may want choose to define a helper to annotate traces\n\n```hs\n\n-- ...\n\nimport
  Data.Pool\nimport Database.Persist.Sql\nimport Network.AWS.XRayClient.Persistent\n\n--
  ...\n\nrunSqlPoolXRay\n  :: (backend ~ SqlBackend, MonadUnliftIO m)\n  => Text\n
  \ -- ^ Subsegment name\n  --\n  -- The top-level subsegment will be named @\\\"<this>
  runSqlPool\\\"@ and the,\n  -- with a lower-level subsegment named @\\\"<this> query\\\"@.\n
  \ --\n  -> XRayVaultData -- ^ Vault data to trace with\n  -> ReaderT backend m a\n
  \ -> Pool backend\n  -> m a\nrunSqlPoolXRay name vaultData action pool =\n  traceXRaySubsegment'
  vaultData (name <> \" runSqlPool\") id\n    $ withRunInIO\n    $ \\run -> withResource
  pool $ \\backend -> do\n        let\n          sendTrace = atomicallyAddVaultDataSubsegment
  vaultData\n          stdGenIORef = xrayVaultDataStdGen vaultData\n          subsegmentName
  = name <> \" query\"\n        run . runSqlConn action =<< liftIO\n          (xraySqlBackend
  sendTrace stdGenIORef subsegmentName backend)\n```\n\nThen you can use this in your
  `runDB` definition to trace DB calls\n\n```hs\n-- ...\ninstance YesodPersist App
  where\n  type YesodPersistBackend App = SqlBackend\n  runDB action = do\n    pool
  <- getsYesod appPool\n    mVaultData <- vaultDataFromRequest <$> waiRequest\n      \n
  \   -- ...\n\n    maybe runSqlPool (runSqlPoolXRay \"runDB\") mVaultData action'
  pool\n```\n"
license-name: MIT
