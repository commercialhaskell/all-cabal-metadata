all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
author: Bellroy Tech Team <haskell@bellroy.com>
basic-deps:
  base: '>=4.12 && <4.21'
  deriving-compat: '>=0.5.10 && <0.7'
  hashable: '>=1.3.0.0 && <1.6'
  microlens-pro: ^>=0.2
  tagged: ^>=0.8
  text: ^>=1.2.3 || ^>=2.0 || ^>=2.1
changelog: |
  # Revision history for aws-arn

  ## 0.3.3.0 -- 2025-01-16

  * Remove direct dependency on `profunctors`.
  * Add `Network.AWS.ARN.States` with support for State Machine ARNs.

  ## 0.3.2.0 -- 2024-08-22

  * Use prisms and isos from `microlens-pro`.

  ## 0.3.1.0 -- 2023-03-01

  * Add `Network.AWS.ARN.S3` with support for S3 bucket and object ARNs.

  ## 0.3.0.0 -- 2022-10-14

  * Reinstate the improper `Iso'`s from version 0.1.x; the 0.2.0.0
    lenses were also unlawful and the `Iso'`s are more ergonomic.

  ## 0.2.0.0 -- 2022-07-19

  * Rename `fromFoo`/`toFoo` to `renderFoo`/`parseFoo`:
    - `Network.AWS.ARN.toARN` -> `Network.AWS.ARN.parseARN`
    - `Network.AWS.ARN.fromARN` -> `Network.AWS.ARN.renderARN`
    - `Network.AWS.ARN.Lambda.fromFunction` -> `Network.AWS.ARN.renderFunction`
    - `Network.AWS.ARN.Lambda.toFunction` -> `Network.AWS.ARN.parseFunction`
  * Remove the leading underscore and prefix on record names. This makes
    for a nicer interface when using the
    [generic-lens](https://hackage.haskell.org/package/generic-lens) and
    [generic-optics](https://hackage.haskell.org/package/generic-optics)
    libraries, which are now the preferred way to lens into individual
    fields.
  * Remove dependency on `lens`; depend instead on `profunctors` (to
    provide `Prism'`s).
  * `Network.AWS.ARN.colons`: Provide a `Lens'` instead of an unlawful `Iso'`.
  * `Network.AWS.ARN.slashes`: Provide a `Lens'` instead of an unlawful `Iso'.`

  ## 0.1.0.1 -- 2021-12-16

  * Support GHC 9.0.1, GHC 9.2.1, and `hashable <1.5`.

  ## 0.1.0.0 -- 2021-04-07

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # aws-arn

  ![CI Status](https://github.com/bellroy/aws-arn/actions/workflows/haskell-ci.yml/badge.svg)

  This library provides a type representing [Amazon Resource Names
  (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html),
  and parsing/unparsing functions for them. When combined with
  [`generic-lens`](https://hackage.haskell.org/package/generic-lens) or
  [`generic-optics`](https://hackage.haskell.org/package/generic-optics),
  the provided prisms make it very convenient to rewrite parts of ARNs.

  Start reading at the `Network.AWS.ARN` module, which defines the core
  data type and includes some examples.

  The `ARN` type is not designed to be a 100% correct-by-construction
  representation of only valid ARNs; it is designed to be a lightweight
  way to destructure and reassemble ARNs to be used in place of string
  munging.

  The library aims to provide additional parsers for destructuring the
  "resource" part of an ARN, but many are missing right now. PRs to add
  this support for more AWS resource types are **especially** welcome.

  ## Guide: adding a resource

  Cribbing from an existing module (e.g., `Network.AWS.ARN.Lambda`) is
  probably the easiest way to start, but here is an explicit process to
  add a new resource:

  1. Create a module for the AWS service, if it doesn't already
     exist. Example: `src/Network/AWS/ARN/Lambda.hs`.

  2. Define a record `Foo` to represent the parsed resource part of an
     ARN, and derive (at least) `Eq`, `Ord`, `Hashable`, `Show` and
     `Generic`:

     ```haskell
     data Function = Function
     { name :: Text,
       qualifier :: Maybe Text
     }
     deriving (Eq, Ord, Hashable, Show, Generic)
     ```

  3. Define `parseFoo` and `renderFoo` functions that attempt to parse
     and unparse the resource part of the ARN:

     ```haskell
     parseFunction :: Text -> Maybe Function
     renderFunction :: Function -> Text
     ```

     **Remark:** If you need to write tests for these functions, the
     corresponding module should live at
     `test/Network/AWS/ARN/SomeAWSServiceTest.hs`

  4. Define a `_Foo` `Prism'` that combines the parsing/unparsing
     functions above:

     ```haskell
     _Function :: Prism' Text Function
     _Function = prism' fromFunction toFunction
     ```

  5. Add the records, their fields, its parsing/unparsing functions, and
     prisms to the service module's export list:

     ```haskell
     module Network.AWS.ARN.Lambda
       ( -- * Functions
         Function (..),
         parseFunction,
         renderFunction,

         -- ** Prisms
         _Function,
       )
     ```

  6. Test your work and make a PR.

  ## Formatting code

  The formatters used in this repo are provided by `shell.nix`:

  - `*.hs`: [`ormolu`](https://github.com/tweag/ormolu)
  - `*.cabal`:
    [`cabal-fmt`](https://hackage.haskell.org/package/cabal-fmt)
    (`cabal-fmt --inplace aws-arn.cabal`)
  - `*.nix`:
    [`nixpkgs-fmt`](https://github.com/nix-community/nixpkgs-fmt)
    (`nixpkgs-fmt *.nix`)

  ## Regenerating CI

  This repo uses `haskell-ci`, which is provided by `shell.nix`:

  ```shell
  haskell-ci regenerate
  ```

  ### Fixing CI not being able to install tools

  So you ran the above command but `haskell-ci` couldn't install one of its tools
  (e.g. `hlint`, `doctest`) due to version incompatibilities. `haskell-ci`
  selects particular versions by default, but this can be changed with command
  line flags (e.g. `--hlint-version '>=3.5 && <3.6'`, `--doctest-version ==0.20.1`).
  If you do this, please check
  [`haskell-ci`](https://github.com/haskell-CI/haskell-ci); if the HEAD version
  does not select the latest version of a tool, please contribute a PR to that
  repository.
description-type: markdown
hash: 7aefb8525dfbfef8f6f9dc2eab0de46369243a37cac027ceee94392a7b5b7bb8
homepage: ''
latest: 0.3.3.0
license-name: BSD-3-Clause
maintainer: Bellroy Tech Team <haskell@bellroy.com>
synopsis: Types and optics for manipulating Amazon Resource Names (ARNs)
test-bench-deps:
  aws-arn: '>=0'
  base: '>=4.12 && <4.21'
  deriving-compat: '>=0.5.10 && <0.7'
  microlens-pro: ^>=0.2
  tagged: ^>=0.8
  tasty: ^>=1.4.0.2 || ^>=1.5
  tasty-hunit: ^>=0.10.0.3
  text: ^>=1.2.3 || ^>=2.0 || ^>=2.1
