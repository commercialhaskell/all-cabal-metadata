all-versions:
- 1.0.0
- 1.0.1
- 1.0.2
- 2.0.0
- 2.0.1
- 2.0.2
author: Dobromir Nikolov
basic-deps:
  aeson: '>=0'
  aws-lambda-haskell-runtime: '>=4.0.0'
  base: '>=4.7 && <5'
  binary: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  http-types: '>=0'
  iproute: '>=0'
  network: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vault: '>=0'
  wai: '>=0'
changelog: |
  # Changelog for aws-lambda-haskell-runtime-wai

  ## 2.0.2

  * Make registering multiple wai handlers possible (via `waiHandler`).
  * Make registering multiple handlers with multiple Wai Applications possible (via `runMultipleWaiApplications`).
  * Use version `4.1.1` of `aws-lambda-haskell-runtime`.

  ## 2.0.1

  * Use version `4.1.0` of `aws-lambda-haskell-runtime` that fixes [#101](https://github.com/theam/aws-lambda-haskell-runtime/issues/101).

  ## 2.0.0

  * Use version [`4.0.0`](https://github.com/theam/aws-lambda-haskell-runtime/pull/97) of `aws-lambda-haskell-runtime`.
  * New handler types that allow you to support ALB or even API Gateway + ALB at once.

  ## 1.0.3

  * Now taking the Wai request path from API Gateway's 'proxy' path parameter. This prevents the resource path from messing up your Wai application routing.

  ## 1.0.2

  * Switched to aws-lambda-haskell-runtime 3.0.3

  ## 1.0.1

  * Removed forgotten print statements
  * Applied a [temporary hotfix](https://github.com/eir-forsakring/aws-lambda-haskell-runtime-wai/pull/4) for handling query parameters
changelog-type: markdown
description: "# aws-lambda-haskell-runtime-wai [![Hackage](https://img.shields.io/hackage/v/aws-lambda-haskell-runtime-wai.svg?style=flat)](http://hackage.haskell.org/package/aws-lambda-haskell-runtime-wai)
  ![Haskell CI](https://github.com/eir-forsakring/aws-lambda-haskell-runtime-wai/workflows/Haskell%20CI/badge.svg)\n\n##
  Quick start\n\n1. Set up your project to use AWS Lambda by following the instructions
  on the [aws-lambda-haskell-runtime website](https://theam.github.io/aws-lambda-haskell-runtime/).\n2.
  Use the `waiHandler` function from `AWS.Lambda.Wai` to convert your [`wai`](https://hackage.haskell.org/package/wai)
  application to a handler. There are two ways to do this.\n\n```haskell\n-- 1. Pass
  in the initializeApplicationFunction\n-- this will call initializeApplication per
  each call\nhandler :: WaiHandler ()\nhandler = waiHandler initializeApplication\n\n--
  Wai application initialization logic\ninitializeApplication :: IO Application\ninitializeApplication
  = ...\n``` \n\n```haskell\n-- 2. Store the Application inside your custom context
  and provide a getter function\n-- this will initialize the application once per
  cold start and keep it alive while the lambda is warm\nhandler :: WaiHandler MyAppConfig\nhandler
  = waiHandler' getWaiApp\n\ndata MyAppConfig =\n  MyAppConfig\n    { getWaiApp ::
  Application }\n```\n\nFor a complete example see [theam/aws-lambda-haskell-runtime/tree/master/examples/wai-app](https://github.com/theam/aws-lambda-haskell-runtime/tree/master/examples/wai-app)\n"
description-type: markdown
hash: 459c183c37e99e13c83002bedb2dc58c2257d2741aeec3f86571ee58361e9404
homepage: https://github.com/eir-forsakring/aws-lambda-haskell-runtime-wai#readme
latest: 2.0.2
license-name: BSD-3-Clause
maintainer: dnikolovv@hotmail.com
synopsis: Run wai applications on AWS Lambda
test-bench-deps:
  aeson: '>=0'
  aws-lambda-haskell-runtime: '>=4.0.0'
  aws-lambda-haskell-runtime-wai: '>=0'
  base: '>=4.7 && <5'
  binary: '>=0'
  bytestring: '>=0'
  case-insensitive: '>=0'
  http-types: '>=0'
  iproute: '>=0'
  network: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vault: '>=0'
  wai: '>=0'
