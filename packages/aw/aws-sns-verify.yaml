homepage: https://github.com/freckle/aws-sns-verify#readme
changelog-type: markdown
hash: f95fd9b417d25925afff7f16f59362d015bbd8ecb6f64df73cae4e85b428ecab
test-bench-deps:
  warp: -any
  aws-sns-verify: -any
  wai: -any
  crypton-x509-validation: -any
  base: '>=4.7 && <5'
  hspec: -any
  text: -any
  async: -any
  regex-tdfa: -any
  aeson-qq: -any
  http-types: -any
maintainer: engineering@freckle.com
synopsis: Parse and verify AWS SNS messages
changelog: |
  ## [_Unreleased_](https://github.com/freckle/aws-sns-verify/compare/v0.0.0.3...main)

  ## [v0.0.0.3](https://github.com/freckle/aws-sns-verify/compare/v0.0.0.2...v0.0.0.3)

  - Migrate to `crypton-x509*`
  - Remove CI for GHC's 8.6 and 8.8

  ## [v0.0.0.2](https://github.com/freckle/aws-sns-verify/compare/v0.0.0.1...v0.0.0.2)

  - Validate PEM has come from AWS before checking signature.

  ## [v0.0.0.1](https://github.com/freckle/aws-sns-verify/compare/v0.0.0.0...v0.0.0.1)

  - Fix typo in subscribe signature

  ## [v0.0.0.0](https://github.com/freckle/aws-sns-verify/releases/tag/v0.0.0.0)

  - Initial release.
  - Handle JSON parsing.
  - Handle validation of payload signatures via X509.
  - Handle response to subscription messages.
basic-deps:
  bytestring: '>=0.10.8.2'
  crypton-x509-validation: -any
  base: '>=4.7 && <5'
  text: '>=1.2.3.1'
  pem: '>=0.2.4'
  memory: '>=0.14.18'
  crypton-x509: -any
  regex-tdfa: '>=1.2.3.1'
  network-uri: '>=2.6.1.0'
  errors: '>=2.3.0'
  http-conduit: '>=2.3.2'
  aeson: '>=1.3.1.1'
all-versions:
- 0.0.0.0
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
author: Freckle
latest: 0.0.0.3
description-type: markdown
description: |
  # aws-sns-verify

  Consumers utilizing SNS need to do 3 tasks:

  1. Parse the message JSON
  2. Validate signed signatures
  3. Handle subscriptions

  This library encapsulates those actions.

  ```hs
  myEchoWebhook :: MonadHandler m => m ()
  myEchoWebhook = do
    message <- verifySNSMessage =<< requireInsecureJsonBody
    logDebugN message
  ```

  ## Sign For Test

  Signatures for testing are produced with the self signed certificate in this
  repository.

  ```sh
  cat unsigned.txt | openssl dgst -sha1 -sign tests/key.pem | openssl base64
  ```

  The certificate was produced with

  ```sh
  openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout tests/key.pem -out tests/cert.pem
  ```
license-name: MIT
