all-versions:
- 0.4.1.2
- 0.4.1.3
- 0.4.2.0
- 0.4.2.1
- 0.4.3.0
author: Alexander Ignatyev
basic-deps:
  base: '>=4.7 && <5'
  matrix: '>=0.3.4.4'
  time: '>=0'
changelog: ''
changelog-type: ''
description: "# Amateur astronomical computations\r\n\r\n[![Build Status](https://travis-ci.org/aligusnet/astro.svg?branch=master)](https://travis-ci.org/aligusnet/astro)\r\n[![Coverage
  Status](https://coveralls.io/repos/github/aligusnet/astro/badge.svg)](https://coveralls.io/github/aligusnet/astro)\r\n[![Documentation](https://img.shields.io/badge/astro-documentation-blue.svg)](https://aligusnet.github.io/astro-docs/doc/index.html)\r\n[![Hackage](https://img.shields.io/hackage/v/astro.svg)](https://hackage.haskell.org/package/astro)
  \r\n\r\n\r\n## Usage\r\n\r\n### Install stack\r\n\r\nIt will take care of everything.\r\n\r\n[Get
  started with Stack](https://www.fpcomplete.com/haskell/get-started/)\r\n\r\n###
  Build the project\r\n\r\n    stack build\r\n\r\n### Run unit tests\r\n\r\n    stack
  test\r\n\r\n## Documentation\r\n\r\n### Useful types\r\n\r\n#### Decimal hours and
  Decimal degrees\r\n\r\nTypes to represent hours (used in celestial coordinate systems
  and as time zone) and degrees (used in coordinate systems).\r\n\r\n```haskell\r\nimport
  Data.Astro.Types\r\n\r\n-- 10h 15m 19.7s\r\ndh :: DecimalHours\r\ndh = fromHMS 10
  15 19.7\r\n-- DH 10.255472222222222\r\n\r\n(h, m, s) = toHMS dh\r\n-- (10,15,19.699999999999562)\r\n\r\n\r\n--
  51°28′40″\r\ndd :: DecimalDegrees\r\ndd = fromDMS 51 28 40\r\n-- DD 51.477777777777774\r\n\r\n(d,
  m, s) = toDMS dd\r\n-- (51,28,39.999999999987494)\r\n```\r\n\r\n#### Geographic
  Coordinates\r\n\r\n```haskell\r\nimport Data.Astro.Types\r\n\r\n-- the Royal Observatory,
  Greenwich\r\nro :: GeographicCoordinates\r\nro = GeoC (fromDMS 51 28 40) (-(fromDMS
  0 0 5))\r\n-- GeoC {geoLatitude = DD 51.4778, geoLongitude = DD (-0.0014)}\r\n```\r\n\r\n###
  Time\r\n\r\nThe main time datetime type used in the library is `JulianDate` defined
  in `Data.Astro.Time.JulianDate`. JulianDate is just a number of days since noon
  of 1 January 4713 BC:\r\n\r\n```haskell\r\nimport Data.Astro.Time.JulianDate\r\n\r\n--
  2017-06-25 9:29:00 (GMT)\r\njd :: JulianDate\r\njd = fromYMDHMS 2017 6 25 9 29 0\r\n--
  JD 2457929.895138889\r\n```\r\n\r\n`LocalCiviTime` and `LocalCivilDate` are Julian
  dates with time zones:\r\n\r\n```haskell\r\nimport Data.Astro.Time.JulianDate\r\nimport
  Data.Astro.Types\r\n\r\n-- 2017-06-25 10:29:00 +0100 (BST)\r\nlct :: LocalCivilTime\r\nlct
  = lctFromYMDHMS (DH 1) 2017 6 25 10 29 0\r\n-- 2017-06-25 10:29:00.0000 +1.0\r\n\r\nlctJD
  :: JulianDate\r\nlctJD = lctUniversalTime lct\r\n-- JD 2457929.895138889\r\n\r\nlctTZ
  :: DecimalHours\r\nlctTZ = lctTimeZone lct\r\n-- DH 1.0\r\n\r\nlcd :: LocalCivilDate\r\nlcd
  = lcdFromYMD (DH 1) 2017 6 25\r\n\r\nlcdJD :: JulianDate\r\nlcdJD = lcdDate lcd\r\n--
  JD 2457929.5\r\n\r\nlcdTZ :: DecimalHours\r\nlcdTZ = lcdTimeZone lcd\r\n-- DH 1.0\r\n```\r\n\r\n###
  Celestial coordinate systems\r\n\r\nThe celestical coordinate systems are defined
  in `Data.Astro.Coordinate`.\r\n\r\nIf you would like to locate Sirius in the sky
  you need to know the altitude or 'how far up' angle in the sky and azimuth - 'how
  far round' angle from the north direction to the east. this describes the __Horizontal
  coordinate system__:\r\n\r\n![alt Horizontal coordinate system](https://upload.wikimedia.org/wikipedia/commons/f/f7/Azimuth-Altitude_schematic.svg
  \"Horizontal coordinate system\")\r\n\r\n\r\n```haskell\r\nimport Data.Astro.Coordinate\r\nimport
  Data.Astro.Types\r\n\r\nhc :: HorizonCoordinates\r\nhc = HC (DD 30.5) (DD 180)\r\n--
  HC {hAltitude = DD 30.0, hAzimuth = DD 180.0}\r\n```\r\n\r\nUnfortunately the Horizontal
  coordinate system values depend on the position of the observer. And it's not handy
  when you need to share coordinates of some celestial object with your friend in
  Japan.\r\n\r\nThe second coordinate system is the __Equatorial coordinate system__.
  This coordinate system uses the location of the centre of the Earth as the zero
  point so it does not depend on the observer's location.\r\n\r\nWe have two flavours
  of equatorial coordinates:\r\n\r\n* the first one uses the _vernal equinox_ as a
  starting direction for the 'how far round' coordinate (__right ascension, &#x3B1;__),\r\n\r\n*
  the second one uses the _meridian_ instead of the vernal equinox (__hour angle__).\r\n\r\nWe
  can consider the second one as a transition coordinate system between the horizontal
  one and the 'true' equatorial one.\r\n\r\n\r\n```haskell\r\nimport Data.Astro.Coordinate\r\nimport
  Data.Astro.Types\r\n\r\nec1 :: EquatorialCoordinates1\r\nec1 = EC1 (DD 71.7) (DH
  8)\r\n-- EC1 {e1Declination = DD 71.7, e1RightAscension = DH 8.0}\r\n\r\nec2 ::
  EquatorialCoordinates2\r\nec2 = EC1 (DD 77.7) (DH 11)\r\n-- EC2 {e2Declination =
  DD 77.7, e2HoursAngle = DH 11.0}\r\n```\r\n\r\n#### Transformations\r\n\r\nSay,
  now is 2017-06-25 10:29 BST and we are somewhere near the Royal Observatory, Greenwich.\r\n\r\nLet
  convert the current location of the Sun in horizon coordinates (altitude: 49°18′21.77″,
  azimuth: 118°55′19.53″) to equatorial coordinates and back to horizon ones:\r\n\r\n```haskell\r\nimport
  Data.Astro.Time.JulianDate\r\nimport Data.Astro.Coordinate\r\nimport Data.Astro.Types\r\n\r\nro
  :: GeographicCoordinates\r\nro = GeoC (fromDMS 51 28 40) (-(fromDMS 0 0 5))\r\n\r\ndt
  :: LocalCivilTime\r\ndt = lctFromYMDHMS (DH 1) 2017 6 25 10 29 0\r\n\r\nsunHC ::
  HorizonCoordinates\r\nsunHC = HC (fromDMS 49 18 21.77) (fromDMS 118 55 19.53)\r\n--
  HC {hAltitude = DD 49.30604722222222, hAzimuth = DD 118.92209166666666}\r\n\r\nsunEC2
  :: EquatorialCoordinates2\r\nsunEC2 = horizonToEquatorial (geoLatitude ro) sunHC\r\n--
  EC2 {e2Declination = DD 23.378295912623855, e2HoursAngle = DH 21.437117068873537}\r\n\r\nsunEC1
  :: EquatorialCoordinates1\r\nsunEC1 = EC1 (e2Declination sunEC2) (haToRA (e2HoursAngle
  sunEC2) (geoLongitude ro) (lctUniversalTime dt))\r\n-- EC1 {e1Declination = DD 23.378295912623855,
  e1RightAscension = DH 6.29383725890224}\r\n\r\n\r\nsunEC2' :: EquatorialCoordinates2\r\nsunEC2'
  = EC2 (e1Declination sunEC1) (raToHA (e1RightAscension sunEC1) (geoLongitude ro)
  (lctUniversalTime dt))\r\n-- EC2 {e2Declination = DD 23.378295912623855, e2HoursAngle
  = DH 21.437117068873537}\r\n\r\nsunHC' :: HorizonCoordinates\r\nsunHC' = equatorialToHorizon
  (geoLatitude ro) sunEC2'\r\n-- HC {hAltitude = DD 49.30604722222222, hAzimuth =
  DD 118.92209166666666}\r\n```\r\n\r\nYou can use function-shortcuts to simplify
  transformation EquatorialCoordinates1 <-> HorizonCoordinates: `ec1ToHC` and `hcToEC1`:\r\n\r\n```haskell\r\nimport
  Data.Astro.Time.JulianDate\r\nimport Data.Astro.Coordinate\r\nimport Data.Astro.Types\r\n\r\nro
  :: GeographicCoordinates\r\nro = GeoC (fromDMS 51 28 40) (-(fromDMS 0 0 5))\r\n\r\ndt
  :: LocalCivilTime\r\ndt = lctFromYMDHMS (DH 1) 2017 6 25 10 29 0\r\n\r\nsunHC ::
  HorizonCoordinates\r\nsunHC = HC (fromDMS 49 18 21.77) (fromDMS 118 55 19.53)\r\n--
  HC {hAltitude = DD 49.30604722222222, hAzimuth = DD 118.92209166666666}\r\n\r\nsunEC1
  :: EquatorialCoordinates1\r\nsunEC1 = hcToEC1 ro (lctUniversalTime dt) sunHC\r\n--
  EC1 {e1Declination = DD 23.378295912623855, e1RightAscension = DH 6.29383725890224}\r\n\r\nsunHC'
  :: HorizonCoordinates\r\nsunHC' = ec1ToHC ro (lctUniversalTime dt) sunEC1\r\n--
  HC {hAltitude = DD 49.30604722222222, hAzimuth = DD 118.92209166666666}\r\n```\r\n\r\n###
  Stars\r\n\r\nThe ancient astronomers noted that there were 2 types of stars: some
  of them were fixed, travelling the same way across the sky every sidereal day and
  another were wanderers (planetai in ancient Greek).\r\n\r\nOf course, stars are
  not fixed, they are travelling with high speeds but distances to them are so high
  that their movement is very difficult to note. So we can assume that they are fixed
  for our purposes.\r\n\r\nGiven the \"fixed\" equatorial coordinates of the star
  we only need to transform them to the horizon coordinates to find out where the
  star in the sky.\r\n\r\nIn the example below we will use `Data.Astro.Star` module
  which defines equatorial coordinates of some stars:\r\n\r\n```haskell\r\nimport
  Data.Astro.Time.JulianDate\r\nimport Data.Astro.Coordinate\r\nimport Data.Astro.Types\r\nimport
  Data.Astro.Star\r\n\r\n\r\nro :: GeographicCoordinates\r\nro = GeoC (fromDMS 51
  28 40) (-(fromDMS 0 0 5))\r\n\r\ndt :: LocalCivilTime\r\ndt = lctFromYMDHMS (DH
  1) 2017 6 25 10 29 0\r\n\r\n-- Calculate location of Betelgeuse\r\n\r\nbetelgeuseEC1
  :: EquatorialCoordinates1\r\nbetelgeuseEC1 = starCoordinates Betelgeuse\r\n-- EC1
  {e1Declination = DD 7.407064, e1RightAscension = DH 5.919529}\r\n\r\nbetelgeuseHC
  :: HorizonCoordinates\r\nbetelgeuseHC = ec1ToHC ro (lctUniversalTime dt) betelgeuseEC1\r\n--
  HC {hAltitude = DD 38.30483892505852, hAzimuth = DD 136.75755644642248}\r\n```\r\n\r\n####
  Rise and Set\r\n\r\n`Data.Astro.CelestialObject.RiseSet` module defines `RiseSet`
  type to represent time and azimuth of rise and set.\r\n\r\nLet calculate rise and
  set time of Rigel:\r\n\r\n```haskell\r\nimport Data.Astro.Time.JulianDate\r\nimport
  Data.Astro.Coordinate\r\nimport Data.Astro.Types\r\nimport Data.Astro.Effects\r\nimport
  Data.Astro.CelestialObject.RiseSet\r\nimport Data.Astro.Star\r\n\r\n\r\nro :: GeographicCoordinates\r\nro
  = GeoC (fromDMS 51 28 40) (-(fromDMS 0 0 5))\r\n\r\ntoday :: LocalCivilDate\r\ntoday
  = lcdFromYMD (DH 1) 2017 6 25\r\n\r\n-- Calculate location of Betelgeuse\r\n\r\nrigelEC1
  :: EquatorialCoordinates1\r\nrigelEC1 = starCoordinates Rigel\r\n\r\nverticalShift
  :: DecimalDegrees\r\nverticalShift = refract (DD 0) 12 1012\r\n-- DD 0.5660098245614035\r\n\r\nrigelRiseSet
  :: RiseSetLCT\r\nrigelRiseSet = riseAndSetLCT ro today verticalShift rigelEC1\r\n--
  RiseSet (2017-06-25 06:38:18.4713 +1.0,DD 102.51249855335433) (2017-06-25 17:20:33.4902
  +1.0,DD 257.48750144664564)\r\n```\r\n\r\nAs we can see Rigel rose today at 06:38:18
  and will set at 17:20:33, azimuths of rise and set 102.51° and 257.49° correspondingly.\r\n\r\nWe
  used `refract` function of `Data.Astro.Effects` module with reasonable default parameters
  to calculate vertical shift.\r\n\r\n### Planets\r\n\r\nThe planets is completely
  different story. We cannot assume that the planets have \"fixed\" location in equatorial
  coordinates like stars.\r\n\r\nWhat we can do is to describe details of the planets'
  orbit and calculate their positions at any given moment.\r\n\r\nPlanets and planet
  details are defined in `Data.Astro.Planet` module. `j2010PlanetDetails` returns
  details for the given planet.\r\nThis module also defines `planetPosition`, `planetDistance1`
  and `planetAngularDiameter` to calculate position of the given planet, distance
  to the planet and angular size of the planet correspondingly.\r\n\r\n`1` at the
  end of the `planetDistance1` means that this function uses not very precise method
  to do calculations. Sometimes there are `2`-methods available in the library, but
  not always.\r\n\r\nLet us do some planets-related calculations.\r\n\r\nDo some initialisation:\r\n\r\n```haskell\r\nimport
  Data.Astro.Time.JulianDate\r\nimport Data.Astro.Coordinate\r\nimport Data.Astro.Types\r\nimport
  Data.Astro.Effects\r\nimport Data.Astro.CelestialObject.RiseSet\r\nimport Data.Astro.Planet\r\n\r\nro
  :: GeographicCoordinates\r\nro = GeoC (fromDMS 51 28 40) (-(fromDMS 0 0 5))\r\n\r\ndt
  :: LocalCivilTime\r\ndt = lctFromYMDHMS (DH 1) 2017 6 25 10 29 0\r\n\r\ntoday ::
  LocalCivilDate\r\ntoday = lcdFromYMD (DH 1) 2017 6 25\r\n\r\njupiterDetails :: PlanetDetails\r\njupiterDetails
  = j2010PlanetDetails Jupiter\r\n\r\nearthDetails :: PlanetDetails\r\nearthDetails
  = j2010PlanetDetails Earth\r\n\r\njupiterPosition :: JulianDate -> EquatorialCoordinates1\r\njupiterPosition
  = planetPosition planetTrueAnomaly1 jupiterDetails earthDetails\r\n\r\n```\r\n\r\nCalculate
  Jupiter's coordinates:\r\n\r\n```haskell\r\njupiterEC1 :: EquatorialCoordinates1\r\njupiterEC1
  = jupiterPosition (lctUniversalTime dt)\r\n-- EC1 {e1Declination = DD (-4.104626810672402),
  e1RightAscension = DH 12.863365504382228}\r\n\r\njupiterHC :: HorizonCoordinates\r\njupiterHC
  = ec1ToHC ro (lctUniversalTime dt) jupiterEC1\r\n-- HC {hAltitude = DD (-30.67914598469227),
  hAzimuth = DD 52.29376845044007}\r\n```\r\n\r\nAs be can see Jupiter is below the
  horizon now (the altitude is negative), that's unfortunate.\r\n\r\nNow let us calculate
  distance to Jupiter:\r\n\r\n```haskell\r\njupiterDistance :: AstronomicalUnits\r\njupiterDistance
  = planetDistance1 jupiterDetails earthDetails (lctUniversalTime dt)\r\n-- AU 5.193435872521039\r\n```\r\n\r\n1
  Astronomical Unit is an average distance from the Earth to the Sun.\r\n\r\nand calculate
  an angular size now:\r\n\r\n```haskell\r\njupiterAngularSize :: DecimalDegrees\r\njupiterAngularSize
  = planetAngularDiameter jupiterDetails jupiterDistance\r\n-- DD 1.052289877865987e-2\r\n\r\ntoDMS
  jupiterAngularSize\r\n-- (0,0,37.88243560317554)\r\n```\r\n\r\n#### Rise and Set\r\n\r\nCalculate
  rise and set times of planets are not easy task, because planets change their equatorial
  coordinates during the day.\r\n\r\n`riseAndSet2` function of `Data.Astro.CelestialObject.RiseSet`
  module applies iterative approach: calculates rise and set date for midday coordinates
  and then recalculates rise time for rise coordinates and set for set coordinates
  obtained from the previous step:\r\n\r\n```haskell\r\nverticalShift :: DecimalDegrees\r\nverticalShift
  = refract (DD 0) 12 1012\r\n-- DD 0.5660098245614035\r\n\r\njupiterRiseSet :: RiseSetMB\r\njupiterRiseSet
  = riseAndSet2 0.000001 jupiterPosition ro verticalShift today\r\n-- RiseSet\r\n--
  \   (Just (2017-06-25 13:53:27.3109 +1.0,DD 95.88943953535569))\r\n--    (Just (2017-06-25
  01:21:23.5835 +1.0,DD 264.1289033612776))\r\n```\r\n\r\nWe can see now why at 10
  am Jupiter is below horizon because it will rise only at 1:53 pm.\r\n\r\n\r\n###
  Sun\r\n\r\nSome examples of doing the Sun's related calculations:\r\n\r\n```haskell\r\nimport
  Data.Astro.Time.JulianDate\r\nimport Data.Astro.Coordinate\r\nimport Data.Astro.Types\r\nimport
  Data.Astro.Sun\r\n\r\nro :: GeographicCoordinates\r\nro = GeoC (fromDMS 51 28 40)
  (-(fromDMS 0 0 5))\r\n\r\ndt :: LocalCivilTime\r\ndt = lctFromYMDHMS (DH 1) 2017
  6 25 10 29 0\r\n\r\ntoday :: LocalCivilDate\r\ntoday = lcdFromYMD (DH 1) 2017 6
  25\r\n\r\njd :: JulianDate\r\njd = lctUniversalTime dt\r\n\r\nverticalShift :: DecimalDegrees\r\nverticalShift
  = refract (DD 0) 12 1012\r\n\r\n-- distance from the Earth to the Sun in kilometres\r\ndistance
  :: Double\r\ndistance = sunDistance jd\r\n-- 1.5206375976421073e8\r\n\r\n-- Angular
  Size\r\nangularSize :: DecimalDegrees\r\nangularSize = sunAngularSize jd\r\n-- DD
  0.5244849215333616\r\n\r\n-- The Sun's coordinates\r\nec1 :: EquatorialCoordinates1\r\nec1
  = sunPosition2 jd\r\n-- EC1 {e1Declination = DD 23.37339098989099, e1RightAscension
  = DH 6.29262026252748}\r\n\r\nhc :: HorizonCoordinates\r\nhc = ec1ToHC ro jd ec1\r\n--
  HC {hAltitude = DD 49.312050979507404, hAzimuth = DD 118.94723825710143}\r\n\r\n\r\n--
  Rise and Set\r\nriseSet :: RiseSetMB\r\nriseSet = sunRiseAndSet ro 0.833333 today\r\n--
  RiseSet\r\n--    (Just (2017-06-25 04:44:04.3304 +1.0,DD 49.043237261724215))\r\n--
  \   (Just (2017-06-25 21:21:14.4565 +1.0,DD 310.91655607595595))\r\n```\r\n\r\n\r\n###
  Moon\r\n\r\nThe Moon's related calculations. `Data.Astro.Moon` module defines 2
  new types of functions we haven't seen before: `moonPhase` and `moonBrightLimbPositionAngle`
  which calculate the phase (the area of the visible segment expressed as a fraction
  of the whole disk) and the position-angle which is the angle of the midpoint of
  the illuminated limb measured eastwards from the north point of the disk.\r\n\r\n\r\n```haskell\r\nimport
  Data.Astro.Time.JulianDate\r\nimport Data.Astro.Coordinate\r\nimport Data.Astro.Types\r\nimport
  Data.Astro.Effects\r\nimport Data.Astro.CelestialObject.RiseSet\r\nimport Data.Astro.Moon\r\n\r\nro
  :: GeographicCoordinates\r\nro = GeoC (fromDMS 51 28 40) (-(fromDMS 0 0 5))\r\n\r\ndt
  :: LocalCivilTime\r\ndt = lctFromYMDHMS (DH 1) 2017 6 25 10 29 0\r\n\r\ntoday ::
  LocalCivilDate\r\ntoday = lcdFromYMD (DH 1) 2017 6 25\r\n\r\njd :: JulianDate\r\njd
  = lctUniversalTime dt\r\n\r\n-- distance from the Earth to the Moon in kilometres\r\nmdu
  :: MoonDistanceUnits\r\nmdu = moonDistance1 j2010MoonDetails jd\r\n-- MDU 0.9550170577020396\r\n\r\ndistance
  :: Double\r\ndistance = mduToKm mdu\r\n-- 367109.51199772174\r\n\r\n-- Angular Size\r\nangularSize
  :: DecimalDegrees\r\nangularSize = moonAngularSize mdu\r\n-- DD 0.5425033990980761\r\n\r\n--
  The Moon's coordinates\r\nposition :: JulianDate -> EquatorialCoordinates1\r\nposition
  = moonPosition1 j2010MoonDetails\r\n\r\nec1 :: EquatorialCoordinates1\r\nec1 = position
  jd\r\n-- EC1 {e1Declination = DD 18.706180658927323, e1RightAscension = DH 7.56710547682055}\r\n\r\nhc
  :: HorizonCoordinates\r\nhc = ec1ToHC ro jd ec1\r\n-- HC {hAltitude = DD 34.57694951316064,
  hAzimuth = DD 103.91119101451832}\r\n\r\n-- Rise and Set\r\nriseSet :: RiseSetMB\r\nriseSet
  = riseAndSet2 0.000001 position ro verticalShift today\r\n-- RiseSet\r\n--    (Just
  (2017-06-25 06:22:51.4858 +1.0,DD 57.81458864497365))\r\n--    (Just (2017-06-25
  22:28:20.3023 +1.0,DD 300.4168238905249))\r\n\r\n-- Phase\r\nphase :: Double\r\nphase
  = moonPhase j2010MoonDetails jd\r\n-- 2.4716141948212922e-2\r\n\r\n\r\nsunEC1 ::
  EquatorialCoordinates1\r\nsunEC1 = sunPosition2 jd\r\n-- EC1 {e1Declination = DD
  23.37339098989099, e1RightAscension = DH 6.29262026252748}\r\n\r\nlimbAngle :: DecimalDegrees\r\nlimbAngle
  = moonBrightLimbPositionAngle ec1 sunEC1\r\n-- DD 287.9869373767473\r\n```\r\n"
description-type: markdown
hash: b660c6d248b247343b416b6c9dd622b031f8f2703f12fef29e1e51c97abc914c
homepage: https://github.com/aligusnet/astro
latest: 0.4.3.0
license-name: BSD-3-Clause
maintainer: Alexander Ignatyev
synopsis: Amateur astronomical computations
test-bench-deps:
  HUnit: '>=1.3.1.1'
  QuickCheck: '>=2.8.2'
  astro: '>=0'
  base: '>=0'
  test-framework: '>=0.8.1.1'
  test-framework-hunit: '>=0.3.0.2'
  test-framework-quickcheck2: '>=0.3.0.3'
  time: '>=0'
