all-versions:
- 0.1.7
- 0.2.0
- 0.2.0.2
- 0.3.0.0
author: Moritz Clasmeier
basic-deps:
  base: '>=4.7 && <5'
  formatting: '>=0'
  lifted-async: '>=0'
  microlens: '>=0'
  microlens-th: '>=0'
  monad-logger: '>=0'
  safe-exceptions: '>=0'
  stm: '>=0'
  text: '>=0'
  unliftio: '>=0'
  unliftio-core: '>=0'
changelog: ''
changelog-type: ''
description: |
  # async-refresh [![Hackage version](https://img.shields.io/hackage/v/async-refresh.svg?label=Hackage)](https://hackage.haskell.org/package/async-refresh) [![Stackage version](https://www.stackage.org/package/async-refresh/badge/lts?label=Stackage)](https://www.stackage.org/package/async-refresh) [![Build Status](https://travis-ci.org/mtesseract/async-refresh.svg?branch=master)](https://travis-ci.org/mtesseract/async-refresh)

  ### About

  This is Haskell library implementing the logic for refreshing of
  expiring data according to user-provided actions.

  ### Usage

  - Create a new configuration using `newAsyncRefreshConf`, providing
    the action to be used for data refreshing.

  - Adjust the configuration using the `asyncRefreshConfSet*` functions,
    in particular using `asyncRefreshConfSetCallback`.

  - Use `newAsyncRefresh` to initiate a new thread managing the
    asynchronous refreshing.

  ### Example

  The following IO action produces a `TVar` which is updated every ten
  seconds to contain the current time (wrapped in an `Either
  SomeException`, because refreshing may fail).

  ```
  periodicTimeUpdater :: IO (TVar (Either SomeException UTCTime))
  periodicTimeUpdater = runStderrLoggingT $ do
    timeStore <- liftIO $ newTVarIO (Left (toException NotFound))
    let conf = newAsyncRefreshConf (RefreshResult <$> liftIO getCurrentTime <*> pure Nothing)
          & asyncRefreshConfSetLabel "CurrentTime updated every 10 seconds"
          & asyncRefreshConfSetDefaultInterval (10 * 10^3)
          & asyncRefreshConfSetCallback (liftIO . atomically . writeTVar timeStore . fmap refreshResult)
    _ <- newAsyncRefresh conf
    return timeStore
  ```
description-type: markdown
hash: 319441b58a67e256222aa6751f51fba525caba3182a27152a6d71e986aff91eb
homepage: https://github.com/mtesseract/async-refresh
latest: 0.3.0.0
license-name: BSD-3-Clause
maintainer: mtesseract@silverratio.net
synopsis: Package implementing core logic for refreshing of expiring data.
test-bench-deps:
  HUnit: '>=0'
  async-refresh: '>=0'
  base: '>=0'
  criterion: '>=0'
  monad-logger: '>=0'
  stm: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  text: '>=0'
