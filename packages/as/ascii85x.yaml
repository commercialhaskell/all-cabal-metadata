all-versions:
- 0.2.4.1
author: Nigel Stepp
basic-deps:
  JuicyPixels: '>=3.3 && <4'
  array: '>=0.5 && <0.6'
  ascii85x: '>=0'
  attoparsec: '>=0.13 && <0.15'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.12'
  optparse-applicative: '>=0.18.1 && <0.19'
  text: '>=1.2 && <3'
  vector: '>=0.12 && <1'
changelog: |
  # Changelog for ascii85x

  ## 0.2.4.1

  - Dependency updates

  ## 0.2.4.0

  - Handle GDB variables

  ## 0.2.3.0

  - Handle window settings

  ## 0.2.2.0

  - Handle ZRCL settings

  ## 0.2.1.0

  - Handle picture variables

  ## 0.2.0.0

  - Also parse Backup files
  - Significant refactor

  ## 0.1.2.1

  - Internal change: Added testing

  ## 0.1.2.0

  - Added complete set of variable IDs
  - Make real/comlex a type parameter for some variable types

  ## Unreleased changes
changelog-type: markdown
description: "# ascii85x\n\n## Introduction\n\nThis module is meant to display information
  from\nTI-85 variable files in a human readable way.\n\nThere were a few reasons
  for making this in 2021:\n\n1. ascii85p, an ancient program for displaying\n   program
  text, does not come with source code\n2. TokenIDE, a more modern and very featureful\n
  \  tool, is written in C#, and I didn't want to\n   use mono.\n3. TokenIDE also
  does not come with source code.\n4. Just let me have some fun.\n\n## Background\n\nPerhaps
  you, like many technically minded folks who\nwent through school with their trusty
  TI calculator,\nhave a catalog of TI-BASIC programs that you wrote\nfor both fun
  and utility.\n\nIf I look through my backup directory and see `RND.85p`,\nI might
  wonder what's in there and try `vim RND.85p`:\n\n```\n**TI85**^Z^L^@Group file dated
  Sun Sep 26 16:12:47 202^@^@^L^A^G^@^A^A^R^CRND^A^Aÿ^@D0^@^K3AoD0^@^K3BoD0^@^K3CoD0^@^K3DoD0^@^K3SoD0^@^K=^DoD100^@^K=^Eo¡D35^@^K=^FoD35^@^K=^GoD25^@^K=^BoD5^@^K=^Coìo<91>o<83>oÛ^P^PCUD22^@^Q@^P3CSD500^@^Q^QoØ^P^P¥^PApD2^@^Q^QPD1^@^QoÙo3A`D1^@^K3AoÚo3B`D1^@^K3BoÞo3C`D1^@^K3Co3S`^P3Aa3B^Q^K3So<98>^P3CqD5^@/3Aa3B^Qo<98>^P3CqD5^@/3Sq3C^QoÞoë^PD2^@/D1^@/3Aoë^PD3^@/D1^@/3Boë^PD4^@/D1^@/3Sq3Cv?\n```\n\nNot
  so nice. As mentioned above, there are some options for decoding these files, but
  they didn't work for me, so I made `ascii85x`.\n\n```\n$ ascii85x RND.85p\n\nProgram
  \"RND\":\n0→A\n0→B\n0→C\n0→D\n0→S\n0→xMin\n100→xMax\n-35→yMin\n35→yMax\n25→xScl\n5→yScl\nClLCD\nFnOff
  \nClDrw\nWhile ((getKy≠22) and (C<=500))\nIf ((int(rand*2))==1)\nThen\nA+1→A\nElse\nB+1→B\nEnd\nC+1→C\nS+(A-B)→S\nPtOn(C/5,A-B)\nPtOn(C/5,S/C)\nEnd\nOutpt(2,1,A\nOutpt(3,1,B\nOutpt(4,1,S/C\n```\n\nMuch
  better!\n\n## Usage\n\n`ascii85x` will read and display any variable or group file
  as output by the TI-85 link backup utility.\nThe variable types supported are:\n\n|
  Type       | Extension |\n|------------|-----------|\n|RealValue   | 85n       |\n|ComplexValue|
  85c       |\n|Vector      | 85v       |\n|List        | 85l       |\n|Matrix      |
  85m       |\n|Constant    | 85k       |\n|Equation    | 85y       |\n|String      |
  85s       |\n|Program     | 85p       |\n|Picture     | 85i       |\n|Settings    |
  85?       |\n|GDB         | 85d       |\n\nA group file (`85g`) may contain many
  of these types of variables.\n\n```\n$ ascii85x --help\nUsage: ascii85x [-i|--info]
  [-D|--debug] [-v|--verbose] VARFILE [-V|--version]\n  Convert TI-85 variable files
  to text\n\nAvailable options:\n  -i,--info                Show file info only\n
  \ -D,--debug               Show extra variable details\n  -v,--verbose             Show
  variable file summary\n  VARFILE                  85x variable file\n  -V,--version
  \            Show version only\n  -h,--help                Show this help text\n```\n\n"
description-type: markdown
hash: 4147a09daf0c1eacd172f54220f98d453b1fc89d18b314aad3851258c2a37f20
homepage: https://github.com/nstepp/ascii85x#readme
latest: 0.2.4.1
license-name: BSD-3-Clause
maintainer: stepp@atistar.net
synopsis: Displays TI-85 variable files as text
test-bench-deps:
  JuicyPixels: '>=3.3 && <4'
  array: '>=0.5 && <0.6'
  ascii85x: '>=0'
  attoparsec: '>=0.13 && <0.15'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.12'
  hedgehog: '>=0'
  text: '>=1.2 && <3'
  vector: '>=0.12 && <1'
