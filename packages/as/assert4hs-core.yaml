all-versions:
- 0.1.0
author: Pawel Nosal
basic-deps:
  base: '>=4.7 && <5'
  data-default: '>=0.7.1.1'
  pretty-diff: '>=0.4.0.0'
  text: '>=1.2.4.1'
changelog: |-
  # Changelog for assert4hs

  ## 0.1.0

  - Initial release
  - Assertions for `Either` type
  - Assertions for `Maybe` type
  - Assertions for `List` type
  - Assertions for `Exceptions`
  - Basic assertions for `Foldable` types
  - Implementation of core assertions
  - assertion over infinitive data structure or not terminating predicates do not hang all test and timeout is reported
  - the timeout for assertion is configurable now

  ## Unreleased changes
changelog-type: markdown
description: "# assert4hs\n\n This library aims to provide a set of combinators to
  assert arbitrary nested data structures.\n The inspiration of this library is AssertJ
  for Java, the composition of assertions was inspired by `lens` library.\n\n New
  assertions can be easily written and composed with other assertions. All failed
  assertions are gathered and presented to the user.\n\n```haskell\n  data Foo = Foo
  {name :: String, age :: Int} deriving (Show, Eq)\n\n  assertThat (Foo \"someName\"
  15) $\n       isEqualTo (Foo \"someN1ame\" 15)\n       . focus age\n       . tag
  \"age\"\n       . isGreaterThan 20\n```\n\n result in\n\n```haskell\n  given Foo
  {name = \"someName\", age = 15} should be equal to Foo {name = \"someN1ame\", age
  = 15}\n  Foo {name = \"someName\", age = 15}\n  ╷\n  │\n  ╵\n  Foo {name = \"someN1ame\",
  age = 15}\n                    ▲\n  [age] given 15 should be greater than 20\n```\n\n####
  Examples\n\n##### Simple assertion\n\n```haskell\n  result = 10\n  assertThat result
  $ isEqual 10\n```\n\n##### Composing assertion\n\n Assertions are composable, this
  allows verifying multiple conditions during one test case.\n\n```haskell\n  result
  = 10\n  assertThat result $ \n      isGreaterThan 5 \n      . isLowerThan 20\n \n
  \n >>> given 4 should be greater than 5\n```\n\n##### Focusing on part of data structure\n\n
  Sometimes it is convenient to transform the subject under test and execute assertions
  on the extracted part of it. For this purpose, we have a `focus` function.\n\n```haskell\n
  \ data Foo = Foo {name :: String, age :: Int} deriving (Show, Eq)\n\n  assertThat
  (Foo \"someName\" 15) $\n      isEqualTo (Foo \"someName\" 15)\n      . focus age\n
  \     . isGreaterThan 20\n      . isLowerEqualThan 5\n\n  >>> given 15 should be
  greater than 20 \n  >>> given 15 should be lower or equal to 5\n```\n\n##### Changing
  subject uder test\n\nThe `focus` function allows to transform the subject under
  test, but the original subject is lost. Function `inside` is similar to the function
  `focus`, but preserve theoriginal subject under test.\n\n```haskell\ndata Foo =
  Foo {name :: String, age :: Int} deriving (Show, Eq)\n\nassertThat (Foo \"someName\"
  15) $\n    inside age (isGreaterThan 20 . isLowerEqualThan 5)\n    . focus name
  \n    . isEqualTo \"someName1\" \n\n>>> given 15 should be greater than 20\n>>>
  \n>>> given 15 should be lower or equal to 5\n>>> \n>>> given \"someName\" should
  be equal to \"someName1\"\n>>> \"someName\"\n>>> ╷\n>>> │\n>>> ╵\n>>> \"someName1\"\n>>>
  \         ▲\n```\n\n##### Tagging assertions\n\nOnce our test grows, it is hard
  to spot which assertions failed and why. That is why function `tag` exists, one
  can name assertion and give it a more readable name for failure message.\n\n```haskell\n\ndata
  Foo = Foo {name :: String, age :: Int} deriving (Show, Eq)\n\nassertThat (Foo \"someName\"
  15) $\n  inside age (tag \"age\" . isGreaterThan 20 . isLowerEqualThan 5)\n    .
  tag \"name\"\n    . focus name\n    . isEqualTo \"someName1\"\n    . tag \"should
  not be equal\"\n    . isNotEqualTo \"someName\"\n\n>>> [age] given 15 should be
  greater than 20\n>>> \n>>> [age] given 15 should be lower or equal to 5\n>>> \n>>>
  [name] given \"someName\" should be equal to \"someName1\"\n>>> \"someName\"\n>>>
  ╷\n>>> │\n>>> ╵\n>>> \"someName1\"\n>>>          ▲\n>>> \n>>> [name.should not be
  equal] given \"someName\" should be not equal to \"someName\"\n```\n\n##### Custom
  assertions\n\n It is sometimes convenient to create a custom assertion which explicitly
  describes what is testing. For this purpose we have `simpleAssertion` function\n\n```haskell\nisSuitableForEmployment
  :: Assertion Foo\nisSuitableForEmployment =\n    simpleAssertion (\\a -> age a >
  17) (\\a -> \"new employee must be 18 years or older, but it has \" <> show (age
  a))\n    . simpleAssertion (\\a -> age a < 70) (\\a -> \"must be younger than 70
  years old, but it has \" <> show (age a))\n\nassertThat (Foo \"someName\" 15) isSuitableForEmployment\n\n>>>
  new employee must be 18 years or older, but it has 15\n\nassertThat (Foo \"someName\"
  76) isSuitableForEmployment\n\n>>> must be younger than 70 years old, but it has
  76\n\n```\n\n#### Related projects\n\n[assert4hs-hspec](https://github.com/paweln1986/assert4hs-hspec)
  - integration point of assert4hs and [hspec](https://hackage.haskell.org/package/hspec)\n\n[assert4hs-tasty](https://github.com/paweln1986/assert4hs-tasty)
  - integration point of assert4hs and [tasty](https://hackage.haskell.org/package/tasty)"
description-type: markdown
hash: e8ee6b689af98736ff2190e4d6a0b5f34a7da95250f4aabfb317855076c20518
homepage: https://github.com/paweln1986/assert4hs-core#readme
latest: 0.1.0
license-name: MIT
maintainer: p.nosal1986@gmail.com
synopsis: A set of assertion for writing more readable tests cases
test-bench-deps:
  assert4hs-core: '>=0'
  base: '>=4.7 && <5'
  data-default: '>=0.7.1.1'
  hspec: '>=2.7.8'
  hspec-discover: '>=2.7.8'
  pretty-diff: '>=0.4.0.0'
  text: '>=1.2.4.1'
