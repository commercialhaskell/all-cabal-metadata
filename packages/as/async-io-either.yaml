all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Sean Chalmers
basic-deps:
  async: '>0.2'
  base: '>=4.7 && <5'
  retry: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: |
  Async IO Either
  ===============

  This is a tiny package that captures a pattern I've been using a lot...

  Essentially I am tired of needing something of (IO a) and it so often coming with exceptions
  that are not indicated in the type. Generally speaking my application, like many others, is
  just going to throw in the towel when an exception occurs, but I would prefer it if a value was
  provided. This would then allow me to decide just what sort of tantrum my application will throw.

  I've tried to understand the different manners of handling exceptions in Haskell, and I'm sure there
  is a better or more fitting approach. But this is what I have for now.
description-type: markdown
hash: e6506492c8c8bde16a886175a361241e475a380f7cc2aef13018863b0e3c81c0
homepage: https://github.com/mankyKitty/async-io-either#readme
latest: 0.1.0.4
license-name: BSD-3-Clause
maintainer: sclhiannan@gmail.com
synopsis: Could be useful
test-bench-deps: {}
