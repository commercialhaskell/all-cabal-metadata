all-versions:
- 0.1.2
- 0.2.0
author: Keito Kajitani
basic-deps:
  base: '>=4.7 && <5'
changelog: |
  ## 0.2.0

  - Add `nullPath` for auxiliary types.
  - Add `toList :: ASTPath -> [String]`.

  ## 0.1.0

  Initial version
changelog-type: markdown
description: |
  # ast-path

  AST-path is a representation for predicting program properties.

  AST-path is described in the paper "A General Path-Based Representation for Predicting Program Properties" (PLDI'2018) <https://arxiv.org/abs/1803.09544>
  and used at <https://code2vec.org/> and at <https://code2seq.org/>.

  This package is a third-party implementation of AST-path.
  But the idea of AST-path is not restricted to AST.
  So the implementation of this package accepts any algebraic data types.

  ```
  {-# LANGUAGE DeriveGeneric #-}
  import Data.ASTPath

  data Tree a = Leaf a | Node (Tree a) (Tree a)
    deriving (Eq, Show, Generic)

  instance AST a => AST (Tree a)
  instance AST Int where
    astPathWithHalf = terminalPath show

  >>> astPath $ Node (Leaf 0) (Node (Leaf 1) (Leaf 2))
  [("Node",["Leaf","1"],["Leaf","2"]),("Node",["Leaf","0"],["Node","Leaf","1"]),("Node",["Leaf","0"],["Node","Leaf","2"])]
  ```
description-type: markdown
hash: f61afc091412403dd487e46e84ab87e3ae3c4e0fc53ae7487f2fa4d29444e1f3
homepage: https://github.com/ijaketak/ast-path#readme
latest: 0.2.0
license-name: BSD-3-Clause
maintainer: ijaketak@gmail.com
synopsis: vocabulary representation for predicting program properties
test-bench-deps:
  ast-path: '>=0'
  base: '>=4.7 && <5'
  tasty: '>=0'
  tasty-hunit: '>=0'
