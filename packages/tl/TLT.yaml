all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
author: John Maraist
basic-deps:
  STMonadTrans: '>=0.4.6 && <0.5'
  TLT: '>=0'
  ansi-terminal: '>=0.11.1 && <0.12'
  base: '>=4.14.1 && <4.15 || >=4.15.1 && <4.16 || >=4.16.0 && <4.17'
  free: '>=5.1.7 && <5.2'
  mtl: '>=2.2.2 && <2.3'
  resourcet: '>=1.2.4 && <1.3'
  transformers: '>=0.5.6 && <0.6'
changelog: "# Changelog for TLT\n\n- 0.5.0 :: Add a variation of @noUncaught@ to disguish
  @Show@ and\n  non-@Show@ exception types in TLT failure reporting.\n  \n  Various
  improvement to the documentation.\n\n- 0.4.0 :: Adding a class, instance declarations,
  and functions for\n  inspecting exceptions thrown from an `ExceptT` transformer
  layer.\n  \n  Corrections to the Haddock documentation.\n\n- 0.3.0 :: Significant
  refactoring, organizing the contents of the\n  module @Test.TLT@ into submodules,
  with @Test.TLT@ only re-exporting\n  the core functionality.\n\n- 0.2.0 :: Divided
  the `tlt` function for running tests, to separate\n  `tltCore` for just running
  tests from formatted output of test\n  results.  The former is intended for running
  TLT in other\n  frameworks.  Also prunes some unneeded dependencies.\n\n- 0.1.0
  :: First release.  Patch 1 re-arranged documentation.\n\n## Unreleased changes\n\nNone
  in this version.\n"
changelog-type: markdown
description: "# TLT\n\nTLT is a Haskell test framework oriented towards stacked monad\ntransformers.
  \ TLT has no explicit test specifications.  Tests are run\nwhere declared, with
  results accumulated and reported at the end.\nTests can live in an arbitrary monad
  transformer so long as the `TLT`\ntransformer is part of the stack.  Some control
  of the results display\nis available.\n\nSee also the TLT Haddock page for additional
  examples.\n\n# Overview\n\nA TLT test is a command in the `TLT` monad transformer.
  \ There is no\nseparation between the specification and execution of a test; TLT\nmakes
  no record of an executable test itself, only of its result.  So\nin the main instance
  for testing, the core `IO` monad should be\nwrapped in the `TLT` transformer, and
  in whatever other layers are\nalso to be tested.\n\nIn TLT, all tests are associated
  with a string which names or\notherwise describes the test.  Each test is introduced
  with one of the\n`~:`, `~::`, or `~::-` infix operators.\n\nThe simplest tests simply
  look for a `True` boolean value.  These\ntests are introduced with `~::` or `~::-`.
  \ The difference between the\ntwo is whether the boolean value is the result of
  a pure `Bool`\nexpression, or whether it is returned as the result of a computation.\nIn
  TLT, we distinguish between the two cases by including a trailing\nhyphen `-` to
  operators on pure expressions, and omitting the hyphen\nfrom operators on monadic
  arguments.  So these two tests will both\npass,\n\n    \"2 is 2 as single Bool\"
  ~::- 2 == 2\n    \"2 is 2 a returned Bool\" ~:: return $ 2 == 2\n\nThe `~:` operator
  introduces a more general form of test.  The\nright-hand side of `~:` should be
  an `Assertion` formed with one of\nTLT's built-in assertion operators, or returned
  from a package's\ncustom assertions.  `Assertion`s can give more detailed failure\ninformation
  then simple `Bool`s.\n\nSyntactically, most assertions are infix operators which
  start with a\n`@` character.  The value to the left of the operator is the expected\nvalue,
  and the symbol to the right is (or returns) the value under\ntest.  A hyphen or
  `P` suffixes assertion operators which operate on\npure values; for operators without
  the trailing hyphen, the value\nunder test should is expected to be returned as
  the result of a\nmonadic computation (as with `~::` and `~::-`).\n\nTLT provides
  these assertion operators:\n\n| Operator                       | Meaning                               |\n|
  ------------------------------ | ------------------------------------- |\n| `expected
  @== monadic`     | The actual result must be equal to the given expected result.
  \      |\n| `expected @==- expr`       |                                       |\n|
  `unexpected @/= monadic`  | The actual result must differ from the given unexpected
  result.        |\n| `unexpected @/=- expr`    |                                       |\n|
  `expected @< monadic`      | The actual result must be greater than the given lower
  bound.  |\n| `expected @<- expr`        |                                       |\n|
  `expected @    monadic`    | The actual result must be less than the given upper
  bound.        |\n| `expected @>- expr`        |                                       |\n|
  `expected @<= monadic`     | The actual result must be greater than or equal to
  the given lower bound.     |\n| `expected @<=- expr`       |                                 |\n|
  `expected @>= monadic`     | The actual result must be less than or equal to the
  given upper bound.   |\n| `expected @>=- expr`       |                                       |\n|
  `empty monadic`              | The actual result must be an empty `Traversable`
  structure.    |\n| `emptyP expr`                |                                       |\n|
  `nonempty monadic`           | The actual result must be a nonempty `Traversable`
  structure.  |\n| `nonemptyP expr`             |                                       |\n|
  `nothing monadic`            | The actual result must be `Nothing` (in a `Maybe`-typed
  value)   |\n| `nothingP expr`              |                                       |\n|
  `assertFailed message`       | Trivial assertions, intended for the less interesting
  branches of conditional and selection expressions.  |\n| `assertSuccess`                |
  |\n\nNote that although the assertions are in pairs of one for testing a\npure expression
  value, and one for testing the result returned from a\nmonadic computation, in all
  of the builtin binary assertions the\n/expected/ value argument is always a pure
  value, not itself monadic.\n\nThe `inGroup` function allows related tests to be
  reported as a group.\nThe function takes two arguments, a `String` name for the
  group, and\nthe `TLT` computation housing its tests.  Groups have impact only in\nterms
  of organizing the output you see in the final report of tests\nrun.\n\nIt is straightforward
  to write new `Assertion`s for project-specific\ntest criteria: they are simply functions
  returning monadic values.\nThere are several functions in the final section of this
  document\nwhich transform pure predicates into `Assertion`s, or which transform\none
  form of `Assertion` into another.\n\nThere are also special forms for validating
  the normal termination of\ncomputations including an `ExceptT` monad transformer
  layer:\n\n - `noUncaught` and `noUncaught_` each take an `ExceptT` computation\n
  \  (which may itself contain additional TLT tests) as an argument, and\n   expects
  that computation to finish without finding an uncaught\n   exception thrown from
  it.  The `noUncaught` function requires the\n   exception type to be an instance
  of `Show`; the `noUncaught_`\n   function operates on any exception.\n\n - `uncaught`
  also takes an `ExceptT` computation as an argument, but\n   does expects it to throw
  an uncaught exception.  This computation\n   may contain additional TLT tests, but
  it should be noted that any\n   tests which would have been executed after a `throwE`
  will either\n   be executed, nor be recorded for test result reporting.\n\n - `uncaughtWith`
  is like `uncaught`, but takes an additional function\n   argument which receives
  the thrown exception for additional\n   examination.\n   \nThese three functions
  generally require a declaration of an instance\nof `MonadTLTExcept` for the monadic
  type under test.  This class\ndecribes the relationship among the overall monad
  stack, the `ExceptT`\nlayer with it, and the TLT transformer within the `ExceptT`
  layer.\nWith these inclusion requirements, these functions do require a more\nspecific
  monad stack structure than the rest of TLT.\n\n# Examples\n\nThese examples are
  from the sample executables and test suite of\nthe `TLT` package.\n\n## A simple
  example\n\nThe tests in this example are vacuous, but they show a simple\nsetup
  with both passing and failing tests.\n\n    main :: IO ()\n    main = do\n      tlt
  test\n\n    test :: Monad m =    TLT m ()\n    test = do\n      \"True passes\"
  ~::- True\n      \"2 is 3 as single Bool\" ~::- 2 == 3\n      \"2 is 2 as single
  Bool\" ~::- 2 == 2\n      inGroup \"== assertions\" $ do\n        inGroup \"pure\"
  $ do\n          \"2 is 3 as pure assertion\" ~: 2 @==- 3\n          \"2 is 2 as
  pure assertion\" ~: 2 @==- 2\n        inGroup \"monadic\" $ do\n          \"2 is
  3 as result\" ~: 2 @== return 3\n          \"2 is 2 as result\" ~: 2 @== return
  2\n      inGroup \"/= pure assertions\" $ do\n        \"2 not 3\" ~: 2 @/=- 3\n
  \       \"2 not 2\" ~: 2 @/=- 2\n      \"2 not 3 as result\" ~: 2 @/= return 3\n
  \     \"2 not 2 as result\" ~: 2 @/= return 2\n\nRunning these tests should give:\n\n
  \   Running tests:\n    - 2 is 3 as single Bool: FAIL Expected True but got False\n
  \   - == assertions:\n      - pure:\n        - 2 is 3 as pure assertion: FAIL Expected
  2 but got 3\n      - monadic:\n        - 2 is 3 as result: FAIL Expected 2 but got
  3\n    - /= pure assertions:\n      - 2 not 2: FAIL Expected other than 2 but got
  2\n    - 2 not 2 as result: FAIL Expected other than 2 but got 2\n    Found 5 errors
  in 11 tests; exiting\n\nNote that only failing tests appear.  This can be configured
  in the\n`test` command: add a call at the beginning of `test` to\n`reportAllTestResults`
  to control this behavior:\n\n    test :: Monad m =    TLT m ()\n    test = do\n
  \     reportAllTestResults True\n      \"True passes\" ~::- True\n      ...\n\nand
  the output will be\n\n    Running tests:\n    - True passes: Pass\n    - 2 is 3
  as single Bool: FAIL Expected True but got False\n    - 2 is 2 as single Bool: Pass\n
  \   - == assertions:\n      - pure:\n        - 2 is 3 as pure assertion: FAIL Expected
  2 but got 3\n        - 2 is 2 as pure assertion: Pass\n      - monadic:\n        -
  2 is 3 as result: FAIL Expected 2 but got 3\n        - 2 is 2 as result: Pass\n
  \   - /= pure assertions:\n      - 2 not 3: Pass\n      - 2 not 2: FAIL Expected
  other than 2 but got 2\n    - 2 not 3 as result: Pass\n    - 2 not 2 as result:
  FAIL Expected other than 2 but got 2\n    Found 5 errors in 11 tests; exiting\n\n##
  Testing monad transformers\n\nIn the previous example `TLT` was the outermost (in
  fact only)\nmonad transformer, but it can appear at any level of the test\nsuite's
  application stack.  Using `TLT` at other than the top\nlevel is easiest when all
  of the transformers which might wrap it\nare declared as instances of `MonadTLT`.\n\nConsider
  an application which declares two monad transformers\n`M1T` and `M2T`.  For simplicity
  here we take them to be just\naliases for `IdentityT`:\n\n    newtype Monad m =
  \   M1T m a = M1T { unwrap1 :: IdentityT m a }\n    runM1T :: Monad m =    M1T m
  a -    m a\n    runM1T = runIdentityT . unwrap1\n\n    newtype Monad m =    M2T
  m a = M2T { unwrap2 :: IdentityT m a }\n    runM2T :: Monad m =    M2T m a -    m
  a\n    runM2T = runIdentityT . unwrap2\n\nAnd we elide the usual details of including
  each of them in\n`Functor`, `Applicative`, `Monad` and `MonadTrans`.  We can\ndeclare
  instances of each in `MonadTLT`,\n\n    instance MonadTLT m n =    MonadTLT (M1T
  m) n where\n      liftTLT = lift . liftTLT\n\nand similarly for `M2T`.  Note that
  this declaration does require\n`FlexibleInstances` (because `n` does not appear
  in the instance\ntype), `MultiParamTypeClasses` (because we must mention both the
  top\ntransformer `m` and the monadic type `n` directly wrapped by `TLT`\nwithin
  `m`), and `UndecidableInstances` (because `n` is not smaller in\nthe recursive context
  of `MonadTLT`, which is not actually a problem\nbecause in the definition of `MonadTLT`,
  `n` is functionally dependent\non `m`, which /is/ smaller in the recursive context)
  in the module\nwhere the `MonadTLT` instance is declared.\n\nNow it is convenient
  to test both transformers:\n\n    ttest = do\n      runM1T $ inGroup \"M1T tests\"
  $ m1tests\n      runM2T $ inGroup \"M2T tests\" $ m2tests\n\n    m1tests = M1T $
  do\n      \"3 is 3 as pure assertion\" ~: 3 @==- 3\n      \"4 is 4 as pure assertion\"
  ~: 4 @==- 4\n\n    m2tests = M2T $ do\n      \"5 is 5 as pure assertion\" ~: 5 @==-
  5\n      \"6 is 6 as pure assertion\" ~: 6 @==- 6\n\nIt is not necessary, for example,
  to harvest test declarations\nfrom the executions of the `MnT`s for assembly into
  an overall\ntest declaration.\n\n## Testing with exceptions\n\nThese tests will
  pass:\n\n    do\n      noUncaught \"extest1\" $ do\n        \"6 is 6 as pure assertion\"
  ~: 6 @==- 6\n        \"7 is 7 as pure assertion\" ~: 7 @==- 7\n      uncaught \"extest2\"
  $ do\n        \"8 is 8 as pure assertion\" ~: 8 @==- 8\n        throwE \"Boom\"\n
  \       \"9 is 9 as pure assertion\" ~: 9 @==- 9\n      uncaughtWith \"extest3\"\n\t
  \   (do \"10 is 10 as pure assertion\" ~: 10 @==- 10\n            throwE \"Boom\"\n
  \           11 is 11 as pure assertion\" ~: 11 @==- 11) h\n        (\\e -> \"The
  exception should be \\\"Boom\\\"\"\n                 ~: \"Boom\" @==- e)\n\nThis
  test will fail because it expects no thrown exceptions, but does\nobserve one:\n\n
  \   noUncaught \"extest1x\" $ do\n      \"6 is 6 as pure assertion\" ~: 6 @==- 6\n
  \     throwE \"Boom\"\n      \"7 is 7 as pure assertion\" ~: 7 @==- 7\n\nThis test
  will fail because it expects a thrown exception, but the\nsubcomputation ends normally:\n\n
  \   uncaught \"extest2x\" $ do\n      \"8 is 8 as pure assertion\" ~: 8 @==- 8\n
  \     \"9 is 9 as pure assertion\" ~: 9 @==- 9\n\nFinally, this test will record
  an error \nagainst `\"The exception should be \\\"Boom\\\"\"`,\nalthough no error
  will be logged against `\"extest3x\"`\nsince only the absence of an exception would
  be logged at that point.\n\n    uncaughtWith \"extest3x\"\n\t  (do throwE \"Bang\"\n
  \         \"10 is 10 as pure assertion\" ~: 10 @==- 10\n          \"11 is 11 as
  pure assertion\" ~: 11 @==- 11)\n\t  (\\e -> lift (\"The exception should be \\\"Boom\\\"\"
  ~: \"Boom\" @==- e)\n"
description-type: markdown
hash: 12e7b7ad8fcb912ce82147444198ab036b3a3b746c0ad0159e8b21d79b2fde7a
homepage: https://github.com/jphmrst/TLT#readme
latest: 0.5.0.0
license-name: LGPL-3.0-only
maintainer: haskell-tlt@maraist.org
synopsis: Testing in monads and transformers without explicit specs
test-bench-deps:
  STMonadTrans: '>=0.4.6 && <0.5'
  TLT: '>=0'
  ansi-terminal: '>=0.11.1 && <0.12'
  base: '>=4.14.1 && <4.15 || >=4.15.1 && <4.16 || >=4.16.0 && <4.17'
  free: '>=5.1.7 && <5.2'
  mtl: '>=2.2.2 && <2.3'
  resourcet: '>=1.2.4 && <1.3'
  transformers: '>=0.5.6 && <0.6'
