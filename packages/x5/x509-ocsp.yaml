all-versions:
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
author: Alexey Radkov <alexey.radkov@gmail.com>
basic-deps:
  asn1-encoding: '>=0'
  asn1-types: '>=0'
  base: '>=4.8 && <5'
  bytestring: '>=0'
  cryptohash-sha1: '>=0'
  crypton-x509: '>=0'
  crypton-x509-validation: '>=0'
changelog: |+
  ### 0.4.0.0

  - Field *ocspRespCerts* of *OCSPResponseVerificationData* now contains a list
    of *signed certificates* augmented by *DER*-encoded *tbsCertificate* as defined
    in *rfc5280*. This enables check of the OCSP Signature Authority Delegation.
    See a basic implementation of the check in the *client-ocsp* example.

  ### 0.3.1.0

  - Add function *getOCSPResponseVerificationData'* which is similar to
    *getOCSPResponseVerificationData* except it accepts the OCSP response payload
    in *ASN.1* format. See how it can be used in the *client-ocsp* example.

  ### 0.3.0.0

  - Add function *getOCSPResponseVerificationData* to help verify the signature of
    the OCSP response. See how it can be used in the *client-ocsp* example.

  ### 0.2.0.0

  - **Breaking changes**: flip the order of arguments in *encodeOCSPRequestASN1*
    and *encodeOCSPRequest* (the new order is *cert &#8594; issuerCert*).
  - Various improvements in the *client-ocsp* example.

  ### 0.1.1.0

  - Improvements in module *Data.X509.AIA*.
    + Throw an error when trying to encode *CA Issuers* data as this is not
      implemented.
    + Allow decoding of all variants of *string-like* *accessLocation* data.
    + List limitations of the module in the documentation.

  ### 0.1.0.0

  - Initial version.

changelog-type: markdown
description: |+
  Basic X509 OCSP implementation in Haskell
  =========================================

  [![Build Status](https://github.com/lyokha/x509-ocsp/workflows/CI/badge.svg)](https://github.com/lyokha/x509-ocsp/actions?query=workflow%3ACI)
  [![Hackage](https://img.shields.io/hackage/v/x509-ocsp.svg?label=hackage%20%7C%20x509-ocsp&logo=haskell&logoColor=%239580D1)](https://hackage.haskell.org/package/x509-ocsp)

  This module helps building OCSP requests and parse OCSP responses in Haskell.

  There are many scenarios of OCSP use. One of the simplest practical use cases
  for clients is sending OCSP requests to the OCSP responder upon validation of
  the server certificate during the TLS handshake. See the basic implementation
  of this scenario in directory [*client-ocsp*](test/client-ocsp). To test this
  scenario, run

  ```ShellSession
  $ cd test/client-ocsp
  $ cabal build
  $ nginx -c /path/to/x509-ocsp/test/client-ocsp/nginx.conf
  ```

  You may need to make the root certificate trusted by the system before running
  Nginx. Below is how to do this in *Fedora*.

  ```ShellSession
  $ sudo trust anchor --store ../data/certs/root/rootCA.crt
  $ sudo update-ca-trust
  ```

  Now let's create a database file *index.txt* (its path must be equal to what
  written in clause *database* in file *../data/certs/openssl.cnf*),

  ```ShellSession
  $ touch ../data/index.txt
  ```

  and put there the server certificate.

  ```ShellSession
  $ openssl ca -valid ../data/certs/server/server.crt -keyfile ../data/certs/root/rootCA.key -cert ../data/certs/root/rootCA.crt -config ../data/certs/openssl.cnf
  ```

  The certificate has *good* status because we used option *-valid*. Run OpenSSL
  OCSP responder in a separate terminal window to see what it will print out.

  ```ShellSession
  $ openssl ocsp -index ../data/index.txt -port 8081 -rsigner ../data/certs/root/rootCA.crt -rkey ../data/certs/root/rootCA.key -CA ../data/certs/root/rootCA.crt -text
  ```

  Run the test. It should print *Response: In backend 8010*.

  ```ShellSession
  $ cabal run
  Response: In backend 8010
  ```

  The output of the OCSP responder must contain details of the request and the
  response.

  Let's revoke the certificate.

  ```ShellSession
  $ openssl ca -revoke ../data/certs/server/server.crt -keyfile ../data/certs/root/rootCA.key -cert ../data/certs/root/rootCA.crt -config ../data/certs/openssl.cnf
  ```

  Restart the OCSP responder and look at what *cabal run* will print (you may also
  run *cabal run* twice instead of restarting the responder).

  ```ShellSession
  $ cabal run
  client-ocsp: HttpExceptionRequest Request {
    host                 = "localhost"
    port                 = 8010
    secure               = True
    requestHeaders       = []
    path                 = "/"
    queryString          = ""
    method               = "GET"
    proxy                = Nothing
    rawBody              = False
    redirectCount        = 10
    responseTimeout      = ResponseTimeoutDefault
    requestVersion       = HTTP/1.1
    proxySecureMode      = ProxySecureWithConnect
  }
   (InternalException (HandshakeFailed (Error_Protocol "certificate rejected: [CacheSaysNo \"OCSP: bad certificate status OCSPRespCertRevoked\"]" CertificateUnknown)))
  ```

   The certificate has been revoked and the handshake fails.

description-type: markdown
hash: 7a0c8a86d5604acfcf0ca86130f2ff3f9f7e66efd5688e528dc7b21ccde1d958
homepage: https://github.com/lyokha/x509-ocsp
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: Alexey Radkov <alexey.radkov@gmail.com>
synopsis: Basic X509 OCSP implementation
test-bench-deps:
  HUnit: '>=1.6.1.0'
  asn1-encoding: '>=0'
  asn1-types: '>=0'
  base: '>=4.8 && <5'
  bytestring: '>=0'
  crypton-x509: '>=0'
  crypton-x509-validation: '>=0'
  pem: '>=0'
  x509-ocsp: '>=0'
