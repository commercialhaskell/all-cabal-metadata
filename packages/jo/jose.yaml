all-versions:
- 0.1.26.0
- 0.1.27.0
- 0.2.31.0
- 0.2.33.0
- 0.2.38.0
- 0.2.38.1
- 0.3.38.0
- 0.3.41.0
- 0.3.41.1
- 0.3.41.2
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.0.3
- 0.4.0.4
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.0.5
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
- 0.6.0.3
- 0.7.0.0
- 0.8.0.0
- 0.8.1.0
- 0.8.2.0
- 0.8.2.1
- 0.8.3
- 0.8.3.1
- 0.8.4
- 0.8.4.1
- 0.8.5
- 0.8.5.1
- '0.9'
- '0.10'
- 0.10.0.1
- '0.11'
author: Fraser Tweedale
basic-deps:
  aeson: '>=2.0.1.0 && <3'
  base: '>=4.13 && <5'
  base64-bytestring: '>=1.2.1.0 && <1.3'
  bytestring: '>=0.10 && <0.13'
  concise: '>=0.1'
  containers: '>=0.5'
  crypton: '>=0.31'
  crypton-x509: '>=1.7.6'
  jose: '>=0'
  lens: '>=4.16'
  memory: '>=0.7'
  monad-time: '>=0.3'
  mtl: '>=2.2.1'
  network-uri: '>=2.6'
  template-haskell: '>=2.11'
  text: '>=1.1'
  time: '>=1.5'
  unix: '>=0'
changelog: |
  ## Version 0.11 (2023-10-31)

  - Migrate to the *crypton* library ecosystem.  *crypton* was a hard
    fork of *cryptonite*, which was no longer maintained.  With this
    change, the minimum supported version of GHC increased to 8.8.
    There are no other notable changes in this release.

  - The `v0.10` series is the last release series to support
    *cryptonite*.  It will continue to receive important bug fixes
    until the end of 2024.


  ## Version 0.10 (2022-09-01)

  - Introduce `newtype JOSE e m a` which behaves like `ExceptT e m a`
    but also has `instance (MonadRandom m) => MonadRandom (JOSE e m)`.
    The orphan `MonadRandom` instances were removed. ([#91][])

  - Parameterise `JWT` over the claims data type.  This is a
    cleaner mechanism to support applications that use additional
    claims beyond those registered by RFC 7519.  `unregisteredClaims`
    and `addClaim` are deprecated and will be removed in a future
    release. ([#39][])

  - Add Ed448 and X448 support. ([#74][])

  - Add secp256k1 curve support (RFC 8812).

  - Added `checkJWK :: (MonadError e m, AsError e) => JWK -> m ()`.
    This action performs some key usability checks.  In particular
    it identifies too-small symmetric keys.  ([#46][])

  - Removed `QuickCheck` instances.  *jose* no longer depends on
    `QuickCheck`.  ([#106][])

  - Removed orphan `ToJSON` and `FromJSON` instances for `URI`.

  - Fail signature verification when curve does not match algorithm.
    This is an additional defence against curve substitution attacks.

  - Improved error reporting when constructing a JWK from an X.509
    certificate with ECDSA key.

  - Make compatible with `mtl == 2.3.*` ([#107][])

  - Make compatible with `monad-time == 0.4`

  [#39]: https://github.com/frasertweedale/hs-jose/issues/39
  [#46]: https://github.com/frasertweedale/hs-jose/issues/46
  [#74]: https://github.com/frasertweedale/hs-jose/issues/74
  [#91]: https://github.com/frasertweedale/hs-jose/issues/91
  [#106]: https://github.com/frasertweedale/hs-jose/issues/106
  [#107]: https://github.com/frasertweedale/hs-jose/issues/107


  ## Older versions

  See Git commit history
changelog-type: markdown
description: |
  # jose - JSON Object Signing and Encryption & JWT (JSON Web Token)

  *jose* is a Haskell implementation of [JSON Object Signing and
  Encryption (JOSE)](https://datatracker.ietf.org/wg/jose/) and [JSON
  Web Token (JWT)](https://tools.ietf.org/html/rfc7519).

  The JSON Web Signature (JWS; RFC 7515) implementation is complete.
  JSON Web Encryption (JWE; RFC 7516) is not yet implemented.

  **EdDSA** signatures (RFC 8037) and secp256k1 signatures (RFC 8812)
  are supported.

  JWK Thumbprint (RFC 7638) is supported.

  [Contributions](#contributing) are welcome.

  ## Security

  If you discover a security issue in this library, please email me
  the details, ideally with a proof of concept (`frase @ frase.id.au`
  ; [PGP key](https://pgp.mit.edu/pks/lookup?op=get&search=0x4B5390524111E1E2)).

  Before reporting an issue, please note the following known
  vulnerabilities:

  - The **ECDSA** implementation is vulnerable to **timing attacks** and
    should therefore only be used for verification.

  and the following known **not-vulnerabilities**:

  - The library is not vulnerable to [JWS **algorithm substitution
    attacks**](
    https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/).
    Haskell's type system excludes this attack.

  - The default JWS validation settings reject the **`"none"`
    algorithm**, as [required by RFC 7518](
    https://tools.ietf.org/html/rfc7518#section-3.6).

  - The library is not vulnerable to ECDH [**invalid curve attacks**](
    https://blogs.adobe.com/security/2017/03/critical-vulnerability-uncovered-in-json-encryption.html)
    because JWE is not implemented.


  ## Interoperability issues

  The following known interoperability issues will not be addressed,
  so please do not open issues:

  - Some JOSE tools and libraries permit the use of **short keys**, in
    violation of the RFCs.  This implementation rejects JWS or JWT
    objects minted with short keys, as required by the RFCs.

  - The *Auth0* software produces objects with an [invalid `"x5t"`
    parameter](
    https://community.auth0.com/questions/7227/certificate-thumbprint-is-longer-than-20-bytes).
    The datum [should be a base64url-encoded SHA-1 digest](
    https://tools.ietf.org/html/rfc7515#section-4.1.7), but *Auth0*
    produces a base64url-encoded hex-encoded SHA-1 digest.  The object
    can be repaired
    ([example](https://github.com/frasertweedale/hs-jose/issues/54#issuecomment-356460452))
    so that this library will admit it, unless the offending parameter
    is part of the *JWS Protected Header* in which case you are out of
    luck (until *Auth0* bring their implementation into compliance).

  - JWKs with leading null bytes in the RSA `"n"` parameter (a
    [violation of RFC
    7518](https://tools.ietf.org/html/rfc7518#section-2)) have been
    [seen in the
    wild](https://github.com/frasertweedale/hs-jose/issues/68).  This
    library rejects nonconformant JWKs.  If you know which
    programs/libraries produce such objects, please file bugs against
    them.  It is straightforward to repair these keys:
    base64url-decode the offending parameter, drop the leading null
    byte, base64url-encode again then update the JSON object.


  ## Contributing

  Bug reports, patches, feature requests, code review, crypto review,
  examples and documentation are welcome.

  If you are wondering about how or whether to implement some feature
  or fix, please open an issue where it can be discussed.  I
  appreciate your efforts, but I do not wish such efforts to be
  misplaced.

  To submit a patch, please use ``git send-email`` or open a pull
  request.  Write a [well formed commit message](
  http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
  If your patch is nontrivial, update the copyright notice at the top
  of the modified files.
description-type: markdown
hash: bb915151f3a824538f346f8cf307a2c4c29909cbb3f35cdb628c490aa6b0d331
homepage: https://github.com/frasertweedale/hs-jose
latest: '0.11'
license-name: Apache-2.0
maintainer: frase@frase.id.au
synopsis: JSON Object Signing and Encryption (JOSE) and JSON Web Token (JWT) library
test-bench-deps:
  aeson: '>=0'
  base: '>=4.13 && <5'
  base64-bytestring: '>=0'
  bytestring: '>=0.10 && <0.13'
  concise: '>=0'
  containers: '>=0'
  crypton: '>=0'
  crypton-x509: '>=0'
  hedgehog: '>=0'
  hspec: '>=0'
  jose: '>=0'
  lens: '>=4.16'
  mtl: '>=2.2.1'
  network-uri: '>=0'
  pem: '>=0'
  tasty: '>=0'
  tasty-hedgehog: '>=1.2'
  tasty-hspec: '>=1.0'
  time: '>=0'
