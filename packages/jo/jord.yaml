all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.5.0.0
- 0.6.0.0
- 1.0.0.0
- 2.0.0.0
author: Cedric Liegeois
basic-deps:
  base: '>=4.9 && <5'
  criterion: '>=0'
  jord: '>=0'
changelog: "### 2.0.0.0\r\n\r\n- API change - all modules should be imported as qualified\r\n-
  API change - Position has been split between Geodetic & Geocentric\r\n- API change
  - positions conversion/transformation are provided by Positions module\r\n- API
  change - GreatCicle: interpolate -> interpolated, isInsideSurface -> enclosedBy\r\n-
  API change - Geodesic data type provides initialBearing, finalBearing, length and
  functions are removed\r\n- API change - LocalFrames -> Local\r\n- API change - provide
  separate data type for horizontal positions and positions with height\r\n- New API
  \   - GreatCircle: turn & side\r\n- New API    - Polygon: simple, circle, arc, contains
  & triangulate\r\n- New API    - Triangle: contains, circumcentre & centroid\r\n-
  Bug Fix    - GreatCircle.intersection correctly handles minor arcs crossing the
  equator\r\n- Bug Fix    - All Geodetic positions built from a n-vector have the
  correct angle resolution\r\n- Bump stack resolver to lts-16.11\r\n- Examples in
  readme are compile to make sure they are valid\r\n- Use github actions for CI\r\n\r\n###
  1.0.0.1\r\n\r\n- Fixed typo in doc\r\n- Bumped stack resolver to latest\r\n\r\n###
  1.0.0.0\r\n\r\n- New API (does not allow mixing position in different coordinate
  systems)\r\n- Exact solution for both direct and inverse geodetic problems (Vincenty)\r\n-
  Conversion between different coordinate systems\r\n\r\n### 0.6.0.0\r\n\r\n- Fixed
  Ellipsoid: constructor expected inverseFlattening and not flattening\r\n\r\n###
  0.5.0.0\r\n\r\n- Added Benchmarks\r\n- Added GreatArc\r\n- Added GreatArc from tuple
  of positions\r\n- Added GreatArc from GreatCircle\r\n- Added GreatArc from Track
  and Duration\r\n- Added alongTrackDistance\r\n- Added GreatArcs intersection\r\n\r\n###
  0.4.2.0\r\n\r\n- Fixed intercept\r\n- jord-exe renamed jord-repl\r\n\r\n### 0.4.1.0\r\n\r\n-
  Fixed interceptBySpeed\r\n- Nautical miles symbol is \"nm\"\r\n- REPL: intercept
  for intercept, interceptBySpeed and interceptByTime\r\n- REPL: show length and speed
  in user selected unit\r\n\r\n### 0.4.0.0\r\n\r\n- Added ECEF, frames and delta to
  REPL\r\n- Added Speed\r\n- Added Duration\r\n- Added Kinematics: course, position,
  CPA and intercept\r\n\r\n### 0.3.1.0\r\n\r\n- Added ECEF position\r\n- Added Frames
  (Body, Local, North East Down)\r\n- Added delta and target from position(s), frame
  and earth model\r\n- Added earth models (WGS84, WGS72, GRS80 and derived spherical
  models)\r\n- Builds against LTS 12.2 (GHC 8.4.3) and LTS 11.18 (GHC 8.2.2)\r\n\r\n###
  0.2.0.0\r\n\r\n- GeoPos -> LatLong\r\n- Split Position from GreatCircle\r\n- require
  base >= 4.9\r\n\r\n### 0.1.0.0\r\n\r\n- Initial version\r\n"
changelog-type: markdown
description: "# Jord - Geographical Position Calculations\r\n\r\n[![GitHub CI](https://github.com/ofmooseandmen/jord/workflows/CI/badge.svg)](https://github.com/ofmooseandmen/jord/actions)\r\n[![Hackage](https://img.shields.io/hackage/v/jord.svg)](http://hackage.haskell.org/package/jord)\r\n[![license](https://img.shields.io/badge/license-BSD3-lightgray.svg)](https://opensource.org/licenses/BSD-3-Clause)\r\n\r\n>
  __Jord__ [_Swedish_] is __Earth__ [_English_]\r\n\r\n## What is this?\r\n\r\nJord
  is a [Haskell](https://www.haskell.org) library that implements various geographical
  position calculations using the algorithms described in [Gade, K. (2010) - A Non-singular
  Horizontal Position Representation](http://www.navlab.net/Publications/A_Nonsingular_Horizontal_Position_Representation.pdf),\r\n[Shudde,
  Rex H. (1986) - Some tactical algorithms for spherical geometry](https://calhoun.nps.edu/bitstream/handle/10945/29516/sometacticalalgo00shud.pdf)
  and [Vincenty, T. (1975) - Direct and Inverse Solutions of Geodesics on the Ellipsoid](https://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf):\r\n\r\n-
  conversion between ECEF (earth-centred, earth-fixed), latitude/longitude and [*n*-vector](https://www.navlab.net/nvector)
  positions for spherical and ellipsoidal earth model,\r\n- conversion between latitude/longitude
  and *n*-vector positions,\r\n- local frames (body; local level, wander azimuth;
  north, east, down): delta between positions, target position from reference position
  and delta,\r\n- great circles: surface distance, initial & final bearing, interpolated
  position, great circle intersections, cross track distance, ...,\r\n- geodesic:
  surface distance, initial & final bearing and destination,\r\n- kinematics: position
  from p0, bearing and speed, closest point of approach between tracks, intercept
  (time, speed, minimum speed),\r\n- transformation between coordinate systems (both
  fixed and time-dependent).\r\n- polygon triangulation\r\n\r\n## How do I build it?\r\n\r\nIf
  you have [Stack](https://docs.haskellstack.org/en/stable/README/), then:\r\n```sh\r\n$
  stack build --test\r\n```\r\n\r\nIf you have [Cabal](https://www.haskell.org/cabal/),
  then:\r\n```sh\r\n$ cabal v2-build\r\n$ cabal v2-test\r\n```\r\n\r\n## How do I
  use it?\r\n\r\n[See documentation on Hackage](http://hackage.haskell.org/package/jord/docs/Data-Geo-Jord.html)\r\n\r\nImport
  the core functional modules as qualified:\r\n\r\n```haskell\r\nimport qualified
  Data.Geo.Jord.Angle as Angle\r\nimport qualified Data.Geo.Jord.Duration as Duration\r\nimport
  qualified Data.Geo.Jord.Geocentric as Geocentric\r\nimport qualified Data.Geo.Jord.Geodetic
  as Geodetic\r\nimport qualified Data.Geo.Jord.Geodesic as Geodesic\r\nimport qualified
  Data.Geo.Jord.GreatCircle as GreatCircle\r\nimport qualified Data.Geo.Jord.Kinematics
  as Kinematics\r\nimport qualified Data.Geo.Jord.Length as Length\r\nimport qualified
  Data.Geo.Jord.Local as Local\r\nimport qualified Data.Geo.Jord.Polygon as Polygon\r\nimport
  qualified Data.Geo.Jord.Positions as Positions\r\nimport qualified Data.Geo.Jord.Speed
  as Speed\r\nimport qualified Data.Geo.Jord.Tx as Tx\r\n```\r\n\r\nNote: modules
  can be selectively imported as non-qualified, but i.m.o. the code reads better when
  modules are imported qualified.\r\n\r\nImport models and transformation parameters:\r\n\r\n```haskell\r\nimport
  Data.Geo.Jord.Model (Epoch(..))\r\nimport Data.Geo.Jord.Models\r\nimport qualified
  Data.Geo.Jord.Txs as Txs\r\n```\r\n\r\n## Solutions to the 10 examples from [NavLab](https://www.navlab.net/nvector)\r\n\r\n###
  Example 1: A and B to delta\r\n\r\n*Given two positions, A and B as latitudes, longitudes
  and depths relative to Earth, E.*\r\n\r\n*Find the exact vector between the two
  positions, given in meters north, east, and down, and find the direction (azimuth)\r\nto
  B, relative to north. Assume WGS-84 ellipsoid. The given depths are from the ellipsoid
  surface. Use position A to\r\ndefine north, east, and down directions. (Due to the
  curvature of Earth and different directions to the North Pole,\r\nthe north, east,
  and down directions will change (relative to Earth) for different places. A must
  be outside the poles\r\nfor the north and east directions to be defined.)*\r\n\r\n```haskell\r\nexample1
  :: IO()\r\nexample1 = do\r\n    let pA = Geodetic.latLongHeightPos 1 2 (Length.metres
  3) WGS84\r\n    let pB = Geodetic.latLongHeightPos 4 5 (Length.metres 6) WGS84\r\n\r\n
  \   let ned = Local.nedBetween pA pB\r\n    -- Ned {north = 331.730863099km, east
  = 332.998501491km, down = 17.39830421km}\r\n\r\n    let slantRange = Local.slantRange
  ned\r\n    -- 470.357383823km\r\n\r\n    let bearing = Local.bearing ned\r\n    --
  45°6'33.346\"\r\n\r\n    let elevation = Local.elevation ned\r\n    -- -2°7'11.381\"\r\n\r\n
  \   putStrLn (\"NavLab, Example1: A and B to delta\\n\\\r\n              \\  delta
  \     = \" ++ (show ned) ++ \"\\n\\\r\n              \\  slantRange = \" ++ (show
  slantRange) ++ \"\\n\\\r\n              \\  bearing    = \" ++ (show bearing) ++
  \"\\n\\\r\n              \\  elevation  = \" ++ (show elevation) ++ \"\\n\")\r\n```\r\n\r\n###
  Example 2: B and delta to C\r\n\r\n*A radar or sonar attached to a vehicle B (Body
  coordinate frame) measures the distance and direction to an object C.\r\nWe assume
  that the distance and two angles (typically bearing and elevation relative to B)
  are already combined to the\r\nvector p_BC_B (i.e. the vector from B to C, decomposed
  in B). The position of B is given as n_EB_E and z_EB, and the\r\norientation (attitude)
  of B is given as R_NB (this rotation matrix can be found from roll/pitch/yaw by
  using zyx2R).*\r\n\r\n*Find the exact position of object C as n-vector and depth
  ( n_EC_E and z_EC ), assuming Earth ellipsoid with semi-major\r\naxis a and flattening
  f. For WGS-72, use a = 6 378 135 m and f = 1/298.26.*\r\n\r\n```haskell\r\nexample2
  :: IO()\r\nexample2 = do\r\n    let frameB =\r\n            Local.frameB\r\n                (Angle.decimalDegrees
  40)\r\n                (Angle.decimalDegrees 20)\r\n                (Angle.decimalDegrees
  30)\r\n    let pB = Geodetic.nvectorHeightPos 1 2 3 (Length.metres 400) WGS72\r\n
  \   let delta = Local.deltaMetres 3000 2000 100\r\n\r\n    let pC = Local.destination
  pB frameB delta\r\n    -- 53°18'46.839\"N,63°29'6.179\"E 406.006017m (WGS72)\r\n\r\n
  \   putStrLn (\"NavLab, Example 2: B and delta to C\\n\\\r\n              \\  pC
  = \" ++ (show pC) ++ \"\\n\")\r\n```\r\n\r\n### Example 3: ECEF-vector to geodetic
  latitude\r\n\r\n*Position B is given as an “ECEF-vector” p_EB_E (i.e. a vector from
  E, the center of the Earth, to B, decomposed in E).\r\nFind the geodetic latitude,
  longitude and height (latEB, lonEB and hEB), assuming WGS-84 ellipsoid.*\r\n\r\n```haskell\r\nexample3
  :: IO()\r\nexample3 = do\r\n    let ecef = Geocentric.metresPos 5733900.0 (-6371000.0)
  7008100.000000001 WGS84\r\n\r\n    let geod = Positions.toGeodetic ecef\r\n    --
  39°22'43.495\"N,48°0'46.035\"W 4702.059834295km (WGS84)\r\n\r\n    putStrLn (\"NavLab,
  3: ECEF-vector to geodetic latitude\\n\\\r\n              \\  geodetic pos = \"
  ++ (show geod) ++ \"\\n\")\r\n```\r\n\r\n### Example 4: Geodetic latitude to ECEF-vector\r\n\r\n*Geodetic
  latitude, longitude and height are given for position B as latEB, lonEB and hEB,
  find the ECEF-vector\r\nfor this position, p_EB_E.*\r\n\r\n```haskell\r\nexample4
  :: IO()\r\nexample4 = do\r\n    let geod = Geodetic.latLongHeightPos 1 2 (Length.metres
  3) WGS84\r\n\r\n    let ecef = Positions.toGeocentric geod\r\n    -- Position {gx
  = 6373.290277218km, gy = 222.560200675km, gz = 110.568827182km, model = WGS84}\r\n\r\n
  \   putStrLn (\"NavLab, 4: Geodetic latitude to ECEF-vector\\n\\\r\n              \\
  \ geocentric pos = \" ++ (show ecef) ++ \"\\n\")\r\n```\r\n\r\n### Example 5: Surface
  distance\r\n\r\n*Find the surface distance sAB (i.e. great circle distance) between
  two positions A and B. The heights of A and B are\r\nignored, i.e. if they don’t
  have zero height, we seek the distance between the points that are at the surface
  of the\r\nEarth, directly above/below A and B. The Euclidean distance (chord length)
  dAB should also be found.\r\nUse Earth radius 6371e3 m. Compare the results with
  exact calculations for the WGS-84 ellipsoid.*\r\n\r\n```haskell\r\nexample5 :: IO()\r\nexample5
  = do\r\n    let pA = Geodetic.s84Pos 88 0\r\n    let pB = Geodetic.s84Pos 89 (-170)\r\n\r\n
  \   let distance = GreatCircle.distance pA pB\r\n    -- 332.456901835km\r\n\r\n
  \   putStrLn (\"NavLab, 5: Surface distance\\n\\\r\n              \\  distance =
  \" ++ (show distance) ++ \"\\n\")\r\n```\r\n\r\n### Example 6: Interpolated position\r\n\r\n*Given
  the position of B at time t0 and t1, n_EB_E(t0) and n_EB_E(t1).*\r\n\r\n*Find an
  interpolated position at time ti, n_EB_E(ti). All positions are given as n-vectors.*\r\n\r\n```haskell\r\nexample6
  :: IO()\r\nexample6 = do\r\n    let pA = Geodetic.s84Pos 89 0\r\n    let pB = Geodetic.s84Pos
  89 180\r\n    let f = 0.6\r\n\r\n    let interpolated = GreatCircle.interpolated
  pA pB f\r\n    -- 89°47'59.929\"N,180°0'0.000\"E (S84)\r\n\r\n    putStrLn (\"NavLab,
  6: Interpolated position\\n\\\r\n              \\  interpolated = \" ++ (show interpolated)
  ++ \"\\n\")\r\n```\r\n\r\n### Example 7: Mean position\r\n\r\n*Three positions A,
  B, and C are given as n-vectors n_EA_E, n_EB_E, and n_EC_E. Find the mean position,
  M, given as\r\nn_EM_E. Note that the calculation is independent of the depths of
  the positions.*\r\n\r\n```haskell\r\nexample7 :: IO()\r\nexample7 = do\r\n    let
  ps =\r\n            [ Geodetic.s84Pos 90 0\r\n            , Geodetic.s84Pos 60 10\r\n
  \           , Geodetic.s84Pos 50 (-20)\r\n            ]\r\n\r\n    let mean = GreatCircle.mean
  ps\r\n    -- Just 67°14'10.150\"N,6°55'3.040\"W (S84)\r\n\r\n    putStrLn (\"NavLab,
  Example 7: Mean position\\n\\\r\n              \\  mean = \" ++ (show mean) ++ \"\\n\")\r\n```\r\n\r\n###
  Example 8: A and azimuth/distance to B\r\n\r\n*We have an initial position A, direction
  of travel given as an azimuth (bearing) relative to north (clockwise), and finally
  the distance to travel along a great circle given as sAB. Use Earth radius 6371e3
  m to find the destination\r\npoint B.*\r\n\r\n*In geodesy this is known as “The
  first geodetic problem” or “The direct geodetic problem” for a sphere, and we see
  that this is similar to Example 2, but now the delta is given as an azimuth and
  a great circle distance.\r\n(“The second/inverse geodetic problem” for a sphere
  is already solved in Examples 1 and 5.)*\r\n\r\n```haskell\r\nexample8 :: IO()\r\nexample8
  = do\r\n    let p = Geodetic.s84Pos 80 (-90)\r\n    let bearing = Angle.decimalDegrees
  200\r\n    let distance = Length.metres 1000\r\n\r\n    let dest = GreatCircle.destination
  p bearing distance\r\n    -- 79°59'29.575\"N,90°1'3.714\"W (S84)\r\n\r\n    putStrLn
  (\"NavLab, Example 8: A and azimuth/distance to B\\n\\\r\n              \\  destination
  = \" ++ (show dest) ++ \"\\n\")\r\n```\r\n\r\n### Example 9: Intersection of two
  paths\r\n\r\n*Define a path from two given positions (at the surface of a spherical
  Earth), as the great circle that goes through the two points.*\r\n\r\n*Path A is
  given by A1 and A2, while path B is given by B1 and B2.*\r\n\r\n*Find the position
  C where the two great circles intersect.*\r\n\r\n```haskell\r\nexample9 :: IO()\r\nexample9
  = do\r\n    let a1 = Geodetic.s84Pos 51.885 0.235\r\n    let a2 = Geodetic.s84Pos
  48.269 13.093\r\n    let b1 = Geodetic.s84Pos 49.008 2.549\r\n    let b2 = Geodetic.s84Pos
  56.283 11.304\r\n\r\n    let ga = GreatCircle.through a1 a2\r\n    let gb = GreatCircle.through
  b1 b2\r\n    let intersections = GreatCircle.intersections <$> ga <*> gb\r\n    --
  Just (Just (50°54'6.260\"N,4°29'39.052\"E (S84),50°54'6.260\"S,175°30'20.947\"W
  (S84)))\r\n\r\n    let ma = GreatCircle.minorArc a1 a2\r\n    let mb = GreatCircle.minorArc
  b1 b2\r\n    let intersection = GreatCircle.intersection <$> ma <*> mb\r\n    --
  Just (Just 50°54'6.260\"N,4°29'39.052\"E (S84))\r\n\r\n    putStrLn (\"NavLab, Example
  9: Intersection of two paths\\n\\\r\n              \\  great circle intersections
  = \" ++ (show intersections) ++ \"\\n\\\r\n              \\  minor arc intersection
  \    = \" ++ (show intersection) ++ \"\\n\")\r\n```\r\n\r\n### Example 10: Cross
  track distance\r\n\r\n*Path A is given by the two positions A1 and A2 (similar to
  the previous example).\r\n\r\n*Find the cross track distance sxt between the path
  A (i.e. the great circle through A1 and A2) and the position B\r\n(i.e. the shortest
  distance at the surface, between the great circle and B).*\r\n\r\n```haskell\r\nexample10
  :: IO()\r\nexample10 = do\r\n    let p = Geodetic.s84Pos 1 0.1\r\n    let gc = GreatCircle.through
  (Geodetic.s84Pos 0 0) (Geodetic.s84Pos 10 0)\r\n\r\n    let sxt = fmap (\\g -> GreatCircle.crossTrackDistance
  p g) gc\r\n    -- Just 11.117814411km\r\n\r\n    putStrLn (\"NavLab, Example 10:
  Cross track distance\\n\\\r\n              \\  cross track distance = \" ++ (show
  sxt) ++ \"\\n\")\r\n```\r\n\r\n## Solutions to the geodesic problems (Vincenty)\r\n\r\n###
  Example 11: Inverse problem\r\n\r\n*Given the coordinates of the two points (Φ1,
  L1) and (Φ2, L2), the inverse problem finds the azimuths α1, α2 and the ellipsoidal
  distance s.*\r\n\r\n```haskell\r\nexample11 :: IO()\r\nexample11 = do\r\n    let
  pA = Geodetic.wgs84Pos 88 0\r\n    let pB = Geodetic.wgs84Pos 89 (-170)\r\n\r\n
  \   let inv = Geodesic.inverse pA pB\r\n    let initialBearing = fmap Geodesic.initialBearing
  inv\r\n    -- Just (Just 356°40'8.701\")\r\n\r\n    let finalBearing = fmap Geodesic.finalBearing
  inv\r\n    -- Just (Just 186°40'19.615\")\r\n\r\n    let distance = fmap Geodesic.length
  inv\r\n    -- Just 333.947509469km\r\n\r\n    putStrLn (\"Geodesic, Example 11:
  Inverse problem\\n\\\r\n              \\    initial bearing = \" ++ (show initialBearing)
  ++ \"\\n\\\r\n              \\    final bearing   = \" ++ (show finalBearing) ++
  \"\\n\\\r\n              \\    distance        = \" ++ (show distance) ++ \"\\n\")\r\n```\r\n\r\n###
  Example 12: Direct problem\r\n\r\n*Given an initial point (Φ1, L1) and initial azimuth,
  α1, and a distance, s, along the geodesic the problem is to find the end point (Φ2,
  L2) and azimuth, α2.*\r\n\r\n```haskell\r\nexample12 :: IO()\r\nexample12 = do\r\n
  \   let p = Geodetic.wgs84Pos 80 (-90)\r\n    let bearing = Angle.decimalDegrees
  200\r\n    let distance = Length.metres 1000\r\n\r\n    let dct = Geodesic.direct
  p bearing distance\r\n    let destination = fmap Geodesic.endPosition dct\r\n    --
  Just 79°59'29.701\"N,90°1'3.436\"W (WGS84)\r\n\r\n    let finalBearing = fmap Geodesic.finalBearing
  dct\r\n    -- Just (Just 199°58'57.528\")\r\n\r\n    putStrLn (\"Geodesic, Example
  12: Direct problem\\n\\\r\n              \\    destination   = \" ++ (show destination)
  ++ \"\\n\\\r\n              \\    final bearing = \" ++ (show finalBearing) ++ \"\\n\")\r\n```\r\n\r\n##
  Solutions to kinematics problems\r\n\r\n### Example 13: Closest point of approach\r\n\r\n*The
  Closest Point of Approach (CPA) refers to the positions at which two dynamically
  moving objects reach their\r\nclosest possible distance.*\r\n\r\n```haskell\r\nexample13
  :: IO()\r\nexample13 = do\r\n    let ownship = Kinematics.Track\r\n                     (Geodetic.s84Pos
  20 (-60))\r\n                     (Angle.decimalDegrees 10)\r\n                     (Speed.knots
  15)\r\n    let intruder = Kinematics.Track\r\n                       (Geodetic.s84Pos
  34 (-50))\r\n                       (Angle.decimalDegrees 220)\r\n                       (Speed.knots
  300)\r\n\r\n    let cpa = Kinematics.cpa ownship intruder\r\n    let timeToCpa =
  fmap Kinematics.timeToCpa cpa\r\n    -- Just 3H9M56.155S\r\n\r\n    let distanceAtCpa
  = fmap Kinematics.distanceAtCpa cpa\r\n    -- Just 124.231730834km\r\n\r\n    let
  cpaOwnshipPosition = fmap Kinematics.cpaOwnshipPosition cpa\r\n    -- Just 20°46'43.641\"N,59°51'11.225\"W
  (S84)\r\n\r\n    let cpaIntruderPosition = fmap Kinematics.cpaIntruderPosition cpa\r\n
  \   -- Just 21°24'8.523\"N,60°50'48.159\"W (S84)\r\n\r\n    putStrLn (\"Kinematics,
  Example 13: Closest point of approach\\n\\\r\n              \\    time to CPA      =
  \" ++ (show timeToCpa) ++ \"\\n\\\r\n              \\    distance at CPA  = \" ++
  (show distanceAtCpa) ++ \"\\n\\\r\n              \\    CPA ownship pos  = \" ++
  (show cpaOwnshipPosition) ++ \"\\n\\\r\n              \\    CPA intruder pos = \"
  ++ (show cpaIntruderPosition) ++ \"\\n\")\r\n```\r\n\r\n### Example 14: Speed required
  to intercept target\r\n\r\n*Inputs are the initial latitude and longitude of an
  interceptor and a target, and the target course and speed.\r\nAlso input is the
  time of the desired intercept. Outputs are the speed required of the interceptor,
  the course\r\nof the interceptor, the distance travelled to intercept, and the latitude
  and longitude of the intercept.*\r\n\r\n```haskell\r\nexample14 :: IO()\r\nexample14
  = do\r\n    let track = Kinematics.Track\r\n                    (Geodetic.s84Pos
  34 (-50))\r\n                    (Angle.decimalDegrees 220)\r\n                    (Speed.knots
  600)\r\n    let interceptor = Geodetic.s84Pos 20 (-60)\r\n    let interceptTime
  = Duration.seconds 2700\r\n\r\n    let intercept = Kinematics.interceptByTime track
  interceptor interceptTime\r\n    let distanceToIntercept = fmap Kinematics.distanceToIntercept
  intercept\r\n    -- Just 1015.302358852km\r\n\r\n    let interceptPosition = fmap
  Kinematics.interceptPosition intercept\r\n    -- Just 28°8'12.046\"N,55°27'21.411\"W
  (S84)\r\n\r\n    let interceptorBearing = fmap Kinematics.interceptorBearing intercept\r\n
  \   -- Just 26°7'11.649\"\r\n\r\n    let interceptorSpeed = fmap Kinematics.interceptorSpeed
  intercept\r\n    -- Just 1353.736478km/h\r\n\r\n    putStrLn (\"Kinematics, Example
  14: Speed required to intercept target\\n\\\r\n              \\    distance to intercept
  = \" ++ (show distanceToIntercept) ++ \"\\n\\\r\n              \\    intercept position
  \   = \" ++ (show interceptPosition) ++ \"\\n\\\r\n              \\    interceptor
  bearing   = \" ++ (show interceptorBearing) ++ \"\\n\\\r\n              \\    interceptor
  speed     = \" ++ (show interceptorSpeed) ++ \"\\n\")\r\n```\r\n\r\n### Example
  15: Time required to intercept target\r\n\r\n*Inputs are the initial latitude and
  longitude of an interceptor and a target, and the target course and speed. For a\r\ngiven
  interceptor speed, it may or may not be possible to make an intercept.*\r\n\r\n*The
  first algorithm is to compute the minimum interceptor speed required to achieve
  intercept and the time required to\r\nmake such and intercept.*\r\n\r\n*The second
  algorithm queries the user to input an interceptor speed. If the speed is at least
  that required for intercept\r\nthen the time required to intercept is computed.*\r\n\r\n```haskell\r\nexample15
  :: IO()\r\nexample15 = do\r\n    let track = Kinematics.Track\r\n                    (Geodetic.s84Pos
  34 (-50))\r\n                    (Angle.decimalDegrees 220)\r\n                    (Speed.knots
  600)\r\n    let interceptor = Geodetic.s84Pos 20 (-60)\r\n\r\n    let minIntercept
  = Kinematics.intercept track interceptor\r\n    let minTimeToIntercept = fmap Kinematics.timeToIntercept
  minIntercept\r\n    -- Just 1H39M53.831S\r\n\r\n    let minDistanceToIntercept =
  fmap Kinematics.distanceToIntercept minIntercept\r\n    -- Just 162.294627463km\r\n\r\n
  \   let minInterceptPosition = fmap Kinematics.interceptPosition minIntercept\r\n
  \   -- Just 20°43'42.305\"N,61°20'56.848\"W (S84)\r\n\r\n    let minInterceptorBearing
  = fmap Kinematics.interceptorBearing minIntercept\r\n    -- Just 300°10'18.053\"\r\n\r\n
  \   let minInterceptorSpeed = fmap Kinematics.interceptorSpeed minIntercept\r\n
  \   -- Just 97.476999km/h\r\n\r\n    putStrLn (\"Kinematics, Example 15: Time required
  to intercept target (min)\\n\\\r\n              \\    time to intercept     = \"
  ++ (show minTimeToIntercept) ++ \"\\n\\\r\n              \\    distance to intercept
  = \" ++ (show minDistanceToIntercept) ++ \"\\n\\\r\n              \\    intercept
  position    = \" ++ (show minInterceptPosition) ++ \"\\n\\\r\n              \\    interceptor
  bearing   = \" ++ (show minInterceptorBearing) ++ \"\\n\\\r\n              \\    interceptor
  speed     = \" ++ (show minInterceptorSpeed) ++ \"\\n\")\r\n\r\n    let interceptSpeed
  = Speed.knots 700\r\n\r\n    let intercept = Kinematics.interceptBySpeed track interceptor
  interceptSpeed\r\n    let timeToIntercept = fmap Kinematics.timeToIntercept intercept\r\n
  \   -- Just 0H46M4.692S\r\n\r\n    let distanceToIntercept = fmap Kinematics.distanceToIntercept
  intercept\r\n    -- Just 995.596069189km\r\n\r\n    let interceptPosition = fmap
  Kinematics.interceptPosition intercept\r\n    -- Just 27°59'36.764\"N,55°34'43.852\"W(S84)\r\n\r\n
  \   let interceptorBearing = fmap Kinematics.interceptorBearing intercept\r\n    --
  Just 25°56'7.484\"\r\n\r\n    putStrLn (\"Kinematics, Example 15: Time required
  to intercept target\\n\\\r\n              \\    time to intercept     = \" ++ (show
  timeToIntercept) ++ \"\\n\\\r\n              \\    distance to intercept = \" ++
  (show distanceToIntercept) ++ \"\\n\\\r\n              \\    intercept position
  \   = \" ++ (show interceptPosition) ++ \"\\n\\\r\n              \\    interceptor
  bearing   = \" ++ (show interceptorBearing) ++ \"\\n\")\r\n```\r\n## Solutions to
  coordinates transformation problems\r\n\r\n### Example 16: Transformation between
  fixed models \r\n\r\nConvert the coordinates of a geocentric position between the
  WGS84 model and the NAD83 model.\r\n\r\n```haskell\r\nexample16 :: IO()\r\nexample16
  = do\r\n    let pWGS84 = Geocentric.metresPos 4193790.895437 454436.195118 4768166.813801
  WGS84 \r\n\r\n    -- using explicit parameters:\r\n    let tx = Tx.params Txs.from_WGS84_to_NAD83
  \r\n    let pNAD83 = Positions.transform' pWGS84 NAD83 tx\r\n    -- Position {gx
  = 4193.792080781km, gy = 454.433921298km, gz = 4768.16615479km, model = NAD83}\r\n\r\n
  \   -- using the transformation graph:\r\n    let pNAD83' = Positions.transform
  pWGS84 NAD83 Txs.fixed\r\n    -- Just (Position {gx = 4193.792080781km, gy = 454.433921298km,
  gz = 4768.16615479km, model = NAD83})\r\n\r\n    putStrLn (\"Coordinates transformation,
  Example 16: WGS84 -> NAD83\\n\\\r\n              \\    WGS84 = \" ++ (show pWGS84)
  ++ \"\\n\\\r\n              \\    NAD83 = \" ++ (show pNAD83) ++ \"\\n\\\r\n              \\
  \   NAD83 = \" ++ (show pNAD83') ++ \"\\n\")\r\n```\r\n\r\n### Example 17: Transformation
  between time dependent models \r\n\r\nConvert the coordinates of a geocentric position
  between the ITRF2014, ITRF2000 and NAD83 (CORS96) models \r\n\r\n```haskell\r\nexample17
  :: IO()\r\nexample17 = do\r\n    let pITRF2014 = Geocentric.metresPos 4193790.895437
  454436.195118 4768166.813801 ITRF2014 \r\n\r\n    -- using explicit parameters:\r\n
  \   let tx = Tx.params Txs.from_ITRF2014_to_ITRF2000\r\n    let pITRF2000 = Positions.transformAt'
  pITRF2014 (Epoch 2014.0) ITRF2000 tx \r\n    -- Position {gx = 4193.790907273km,
  gy = 454.436197881km, gz = 4768.166792308km, model = ITRF2000}\r\n\r\n    -- using
  the transformation graph (goes via ITRF2000):\r\n    let pNAD83 = Positions.transformAt
  pITRF2014 (Epoch 2014.0) NAD83_CORS96 Txs.timeDependent \r\n    -- Just (Position
  {gx = 4193.791801305km, gy = 454.433876376km, gz = 4768.166397281km, model = NAD83_CORS96})\r\n\r\n
  \   putStrLn (\"Coordinates transformation, Example 17: ITRF2014 -> ITRF2000 ->
  NAD83 (CORS96)\\n\\\r\n              \\    ITRF2014       = \" ++ (show pITRF2014)
  ++ \"\\n\\\r\n              \\    ITRF2000       = \" ++ (show pITRF2000) ++ \"\\n\\\r\n
  \             \\    NAD83 (CORS96) = \" ++ (show pNAD83) ++ \"\\n\")\r\n```\r\n***\r\n\r\n##
  Solutions to polygon triangulation\r\n\r\n### Example 18: Triangulation of a simple
  polygon\r\n\r\n```haskell\r\nexample18 :: IO()\r\nexample18 = do\r\n    let p =
  Polygon.simple\r\n                [ Geodetic.s84Pos 45 45\r\n                , Geodetic.s84Pos
  (-45) 45\r\n                , Geodetic.s84Pos (-45) (-45)\r\n                , Geodetic.s84Pos
  45 (-45)\r\n                ]\r\n\r\n    let ts = fmap Polygon.triangulate p\r\n
  \   -- Right [ Triangle 45°0'0.000\"N,45°0'0.000\"W (S84) 45°0'0.000\"N,45°0'0.000\"E
  (S84) 45°0'0.000\"S,45°0'0.000\"E (S84)\r\n    --       , Triangle 45°0'0.000\"S,45°0'0.000\"E
  (S84) 45°0'0.000\"S,45°0'0.000\"W (S84) 45°0'0.000\"N,45°0'0.000\"W (S84)\r\n    --
  \      ]\r\n\r\n    putStrLn (\"Polygon triangulation, Example 18: Simple polygon\\n\\\r\n
  \             \\    triangles = \" ++ (show ts) ++ \"\\n\")   \r\n```\r\n\r\n###
  Example 19: Triangulation of a circle\r\n\r\n```haskell\r\nexample19 :: IO()\r\nexample19
  = do\r\n    let p = Polygon.circle (Geodetic.s84Pos 0 0) (Length.kilometres 10)
  10\r\n\r\n    let ts = fmap Polygon.triangulate p\r\n    -- Right [ Triangle 0°4'21.923\"N,0°3'10.298\"W
  (S84) 0°5'23.755\"N,0°0'0.000\"E (S84) 0°4'21.923\"N,0°3'10.298\"E (S84)\r\n    --
  \      , Triangle 0°4'21.923\"N,0°3'10.298\"W (S84) 0°4'21.923\"N,0°3'10.298\"E
  (S84) 0°1'40.045\"N,0°5'7.909\"E (S84)\r\n    --       , Triangle 0°4'21.923\"N,0°3'10.298\"W
  (S84) 0°1'40.045\"N,0°5'7.909\"E (S84) 0°1'40.045\"S,0°5'7.909\"E (S84)\r\n    --
  \      , Triangle 0°4'21.923\"N,0°3'10.298\"W (S84) 0°1'40.045\"S,0°5'7.909\"E (S84)
  0°4'21.923\"S,0°3'10.298\"E (S84)\r\n    --       , Triangle 0°4'21.923\"N,0°3'10.298\"W
  (S84) 0°4'21.923\"S,0°3'10.298\"E (S84) 0°5'23.755\"S,0°0'0.000\"E (S84)\r\n    --
  \      , Triangle 0°4'21.923\"N,0°3'10.298\"W (S84) 0°5'23.755\"S,0°0'0.000\"E (S84)
  0°4'21.923\"S,0°3'10.298\"W (S84)\r\n    --       , Triangle 0°4'21.923\"N,0°3'10.298\"W
  (S84) 0°4'21.923\"S,0°3'10.298\"W (S84) 0°1'40.045\"S,0°5'7.909\"W (S84)\r\n    --
  \      , Triangle 0°1'40.045\"S,0°5'7.909\"W (S84) 0°1'40.045\"N,0°5'7.909\"W (S84)
  0°4'21.923\"N,0°3'10.298\"W (S84)\r\n    --       ]\r\n\r\n    putStrLn (\"Polygon
  triangulation, Example 19: Circle\\n\\\r\n              \\    triangles = \" ++
  (show ts) ++ \"\\n\")   \r\n```\r\n\r\n### Example 20: Triangulation of an arc\r\n\r\n```haskell\r\nexample20
  :: IO()\r\nexample20 = do\r\n    let p = Polygon.arc (Geodetic.s84Pos 0 0) (Length.kilometres
  10) (Angle.decimalDegrees 10) (Angle.decimalDegrees  20) 5\r\n\r\n    let ts = fmap
  Polygon.triangulate p\r\n    -- Right [ Triangle 0°5'4.230\"N,0°1'50.730\"E (S84)
  0°5'18.836\"N,0°0'56.219\"E (S84) 0°5'16.081\"N,0°1'10.073\"E (S84)\r\n    --       ,
  Triangle 0°5'4.230\"N,0°1'50.730\"E (S84) 0°5'16.081\"N,0°1'10.073\"E (S84) 0°5'12.723\"N,0°1'23.794\"E
  (S84)\r\n    --       , Triangle 0°5'12.723\"N,0°1'23.794\"E (S84) 0°5'8.770\"N,0°1'37.355\"E
  (S84) 0°5'4.230\"N,0°1'50.730\"E (S84)\r\n    --       ]\r\n\r\n    putStrLn (\"Polygon
  triangulation, Example 20: Arc\\n\\\r\n              \\    triangles = \" ++ (show
  ts) ++ \"\\n\")   \r\n```\r\n\r\n```haskell\r\nmain :: IO()\r\nmain = do\r\n    example1\r\n
  \   example2\r\n    example3\r\n    example4\r\n    example5\r\n    example6\r\n
  \   example7\r\n    example8\r\n    example9\r\n    example10\r\n    example11\r\n
  \   example12\r\n    example13\r\n    example14\r\n    example15\r\n    example16\r\n
  \   example17\r\n    example18\r\n    example19\r\n    example20\r\n```\r\n"
description-type: markdown
hash: cac9c6c8135ad1335ac2ce185c4114d2c9bcfab225f158b18082134056dfb14f
homepage: https://github.com/ofmooseandmen/jord
latest: 2.0.0.0
license-name: BSD-3-Clause
maintainer: Cedric Liegeois <ofmooseandmen@yahoo.com>
synopsis: Geographical Position Calculations
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  base: '>=4.9 && <5'
  hspec: '>=2 && <3'
  jord: '>=0'
  markdown-unlit: '>=0'
