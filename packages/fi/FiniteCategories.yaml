homepage: https://gitlab.utc.fr/gsabbagh/FiniteCategories
changelog-type: markdown
hash: a99a0ed3c53d94a4555c999e7542d67a9c3c800f0df7712e654df92431d57663
test-bench-deps:
  FiniteCategories: -any
  base: '>=4.15.0.0 && <4.16'
  text: '>=1.2.4 && <1.3'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.11 && <1.7'
  graphviz: '>=2999.20.1 && <2999.21'
  WeakSets: '>=1.4.0.0 && <1.4.0.1'
  containers: '>=0.6.4 && <0.7'
  fgl: '>=5.7.0 && <5.8'
  random: '>=1.2.1 && <1.3'
  directory: '>=1.3.6 && <1.4'
maintainer: guillaumesabbagh@protonmail.com
synopsis: Finite categories and usual categorical constructions on them.
changelog: "# Revision history for FiniteCategories\r\n\r\n## 0.1.0.0 -- 2022-03-21\r\n\r\n*
  First version.\r\n\r\n## 0.2.0.0 -- 2023-03-13\r\n\r\n* Separation between Category
  and FiniteCategory typeclasses, new architecture for the project, Kan extensions,
  etc."
basic-deps:
  base: '>=4.15.0.0 && <4.16'
  text: '>=1.2.4 && <1.3'
  filepath: '>=1.4.2 && <1.5'
  process: '>=1.6.11 && <1.7'
  graphviz: '>=2999.20.1 && <2999.21'
  WeakSets: '>=1.4.0.0 && <1.4.0.1'
  containers: '>=0.6.4 && <0.7'
  fgl: '>=5.7.0 && <5.8'
  random: '>=1.2.1 && <1.3'
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Guillaume Sabbagh
latest: 0.2.0.0
description-type: markdown
description: "# FiniteCategories\r\n\r\nThe goal of this project is to represent small
  finite categories in order to make usual constructions automatically on them (e.g.
  (co)limits, (co)completion, adjunctions, etc.)\r\n\r\n## Table of Contents\r\n1.
  [General Info](#general-info)\r\n2. [Technologies](#technologies)\r\n3. [Installation](#installation)\r\n4.
  [Collaboration](#collaboration)\r\n5. [Examples](#examples)\r\n\r\n## General Info\r\n\r\nThis
  package provides tools to create categories at the value level. This is different
  from the __Hask__ category where types are objects in a category with an infinite
  number of objects and arrows, here we construct categories where objects and arrows
  are arbitrary values so that we can change categories during runtime. Each category
  implements two functions following the category structure axioms : `ar` which returns
  arrows between two objects of the category and `identity` which returns the identity
  of an object. Each `FiniteCategory` implements an additional function : `ob` which
  returns the objects of the category. Thanks to theses functions, we can construct
  automatically all the usual constructions on the categories (limits and colimits,
  adjunctions, Yoneda embedding, etc.) Functors are different from usual `Functor`
  typeclass, we store functors as mapping between objects and morphisms of two categories
  which respect the category structure.\r\n\r\nThis package is also different from
  the package `data-category` because we can enumerate objects and arrows in a category.
  \ This allows us to construct limit, colimits, adjunctions, etc. automatically for
  arbitrary finite categories. On the other hand, we loose typecheck at compilation
  time which ensures that composition is sound in __Hask__, composition in our package
  might lead to an error raised during runtime.\r\n\r\n## Technologies\r\n\r\nThe
  project uses GraphViz for visualizing the categories created.\r\n\r\nThere is another
  version no longer maintained programmed in Python : [repository link](https://gitlab.utc.fr/gsabbagh/modification-de-categories)\r\n\r\n##
  Installation\r\n\r\nTo use the graphviz exports, you must first install graphviz
  (see [graphviz website](https://graphviz.org/download/)) and make sure that Graphviz
  folder is in the path (dot should be a callable program from your terminal, if you
  are on Windows see [this tutorial](https://stackoverflow.com/questions/44272416/how-to-add-a-folder-to-path-environment-variable-in-windows-10-with-screensho#44272417)
  and if you are on unix see [this tutorial]( https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path)).\r\n\r\nThen
  you can check the numerous examples provided to understand how to use the package.\r\n\r\n##
  Collaboration\r\n\r\nAll contributions are appreciated! Contact me by email for
  any information.\r\n\r\n## Usage\r\n\r\nTo run all examples of the project, clone
  the repository and run in a terminal from the repository the following command :\r\n\r\n```cabal
  test```\r\n\r\nYou can then find the graphviz output in the folder `OutputGraphViz/`.\r\n\r\n\r\n##
  Examples\r\n\r\nA category exported with graphviz looks like the following image
  : \r\n\r\n![Category](https://gitlab.utc.fr/gsabbagh/FiniteCategories/-/raw/master/Images/ExampleCategory.png)\r\n\r\nA
  diagram on this category selecting two objects C and D is represented next :\r\n\r\n![Diagram](https://gitlab.utc.fr/gsabbagh/FiniteCategories/-/raw/master/Images/ExampleDiagram.png)\r\n\r\nA
  cone on this diagram follows, the apex of the cone is in green, its legs are in
  yellow and the diagram is in blue :\r\n\r\n![Cone](https://gitlab.utc.fr/gsabbagh/FiniteCategories/-/raw/master/Images/ExampleCone.png)\r\n\r\nThe
  limiting cone is represented below, it is the product of the two objects C and D.\r\n\r\n![Limit](https://gitlab.utc.fr/gsabbagh/FiniteCategories/-/raw/master/Images/ExampleLimit.png)\r\n"
license-name: GPL-3.0-or-later
