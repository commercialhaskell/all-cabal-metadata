all-versions:
- 0.1.0.0
- 1.0.0.0
author: Matej Nižník
basic-deps:
  base: '>=4.13 && <5'
  containers: '>=0.6.0.1 && <0.9'
  template-haskell: '>=2.15 && <2.24'
  transformers: '>=0.6 && <0.7'
changelog: |
  # Changelog for `first-class-instances`

  ## 1.0.0.0

  - Overhaul

      + `FCI` provides the core features for manipulating classes and instances.
      + `FCI.Base` applies these features to classes from the *base* standard library.
      + `FCI.Unsafe` exports `(==>)` which is unsafe.
      + `FCI.TH` exports extra options for `mkDict`

  ## 0.2.0.0
  - Remove `Newtype` [[MR](https://gitlab.com/thematten/first-class-instances/-/merge_requests/5)]
  - Add support for GHC 8.8 [[MR](https://gitlab.com/thematten/first-class-instances/-/merge_requests/5)]
changelog-type: markdown
description: |
  # First-class instances

  GHC compiles type classes as data types. *first-class-instaces* makes that
  correspondence explicit with a simple but powerful mechanism to define instances.
  This enables implementations of [*deriving* as libraries](https://hackage.haskell.org/package/ad-lib).

  ## Overview

  ### Type classes as data types

  Type classes are associated to data types using the `mkDict` command.

  Example:

  ```haskell
  class Monoid a where
    mempty :: a
    (<>) :: a -> a -> a

  mkDict ''Monoid
  ```

  That generates the following data type:

  ```haskell
  data DictMonoid a = Monoid
    { _mempty :: a
    , (|<>) :: a -> a -> a
    }
  ```

  ### Dictionaries

  The `Dict` type family maps constraints to their corresponding dictionary types.

  ```haskell
  type family Dict (c :: Constraint) :: Type    -- Defined in FCI

  type instance Dict (Monoid a) = DictMonoid a  -- also from mkDict ''Monoid
  ```

  A constraint `c` can be reflected as a dictionary:

  ```haskell
  dict @c :: c => Dict c
  ```

  ### Instances from dictionaries

  A dictionary `d` can be reified as an instance.

  Example:

  ```haskell
  instanceDict [| d :: Dict (Monoid T) |]
  ```

  That generates the following instance:

  ```haskell
  instance Monoid T where
    mempty = _mempty d
    (<>) = (|<>) d
  ```

  ## Show me the types

  The core API of *first-class-instances*:

  ```haskell
  {- module FCI -}

  type Dict :: Constraint -> Type

  dict :: forall c. c => Dict c

  mkDict :: Name -> Q [Dec]

  instanceDict :: Q Type -> Q [Dec]


  {- module FCI.Unsafe -}

  (==>) :: forall c r. Dict c -> (c => r) -> r
  ```

  ## Deriving as a library

  These simple primitives can be used to implement "deriving as a library".
  The adventure continues in [*ad-lib*](https://hackage.haskell.org/package/ad-lib).

  ## Related work

  - The [*reflection*](https://hackage.haskell.org/package/reflection) library
    is another approach to convert constraints into first-class values,
    and back. It provides a solution for implicit configuration, rather than
    deriving type class instances for user-defined types.

  - In Agda,
    [all data types are type classes](https://agda.readthedocs.io/en/latest/language/instance-arguments.html),
    exemplifying the orthogonality of declaring a data type, and passing values
    implicitly as instances.
    Haskell requires instances to be globally unique: there must not be two instances
    `Monoid T` for the same `T`.
description-type: markdown
hash: 14fe9de396a124b8c8792dd4f5567df8b072500e3c88bbdbb1154d18c7fd435e
homepage: ''
latest: 1.0.0.0
license-name: BSD-3-Clause
maintainer: lysxia@gmail.com
synopsis: First class typeclass instances
test-bench-deps:
  base: '>=0'
  first-class-instances: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  template-haskell: '>=0'
