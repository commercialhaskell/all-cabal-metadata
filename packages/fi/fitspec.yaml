homepage: https://github.com/rudymatela/fitspec#readme
changelog-type: ''
hash: 07d4498f28085936e176ec27b495eef02776c5abc3f9aeef5e15dea36e2042a4
test-bench-deps:
  base: ==4.*
  leancheck: -any
  fitspec: -any
  pretty: -any
maintainer: Rudy Matela <rudy@matela.com.br>
synopsis: refining property sets for testing Haskell programs
changelog: ''
basic-deps:
  base: '>=4 && <5'
  leancheck: '>=0.9.6'
  cmdargs: -any
  template-haskell: -any
all-versions:
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.4
- 0.4.5
- 0.4.6
- 0.4.7
- 0.4.8
- 0.4.10
author: Rudy Matela,  Colin Runciman
latest: 0.4.10
description-type: markdown
description: "FitSpec\n=======\n\n[![FitSpec Build Status][build-status]][build-log]\n[![FitSpec
  on Hackage][hackage-version]][fitspec-on-hackage]\n[![FitSpec on Stackage LTS][stackage-lts-badge]][fitspec-on-stackage-lts]\n[![FitSpec
  on Stackage Nightly][stackage-nightly-badge]][fitspec-on-stackage-nightly]\n\n![FitSpec
  logo][fitspec-logo]\n\nFitSpec provides automated assistance in the task of refining
  test properties\nfor [Haskell] functions.  FitSpec tests mutant variations of functions
  under\ntest against a given property set, recording any surviving mutants that pass\nall
  tests.  FitSpec then reports:\n\n* *surviving mutants:*\n  indicating incompleteness
  of properties,\n  prompting the user to amend a property or to add a new one;\n*
  *conjectures:*\n  indicating redundancy in the property set,\n  prompting the user
  to remove properties so to reduce the cost of testing.\n\nInstalling FitSpec\n------------------\n\nTo
  install the [latest FitSpec version from Hackage], just:\n\n    $ cabal install
  fitspec\n\nPre-requisites are [cmdargs] and [leancheck].\nThey should be automatically
  resolved and installed by [Cabal].\n\nStarting from Cabal v3.0, you need to pass
  `--lib` as an argument to\n`cabal install`:\n\n\t$ cabal install fitspec --lib\n\n\nUsing
  FitSpec\n-------------\n\nAs an example, consider the following properties describing
  a `sort` function:\n\n    prop_ordered xs = ordered (sort xs)\n    prop_length xs
  = length (sort xs) == length xs\n    prop_elem x xs = elem x (sort xs) == elem x
  xs\n    prop_notElem x xs = notElem x (sort xs) == notElem x xs\n    prop_min x
  xs = head (sort (x:xs)) == minimum (x:xs)\n\nWe provide the above properties to
  FitSpec in the following program:\n\n    import Test.FitSpec\n    import Data.List\n\n
  \   properties sort =\n      [ property $ \\xs -> ordered (sort xs)\n      , property
  $ \\xs -> length (sort xs) == length xs\n      , property $ \\x xs -> elem x (sort
  xs) == elem x xs\n      , property $ \\x xs -> notElem x (sort xs) == notElem x
  xs\n      , property $ \\x xs -> head (sort (x:xs)) == minimum (x:xs)\n      ]\n
  \     where\n      ordered (x:y:xs) = x <= y && ordered (y:xs)\n      ordered _
  \       = True\n\n    main = mainWith args { names = [\"sort xs\"]\n                         ,
  nMutants = 4000\n                         , nTests = 4000\n                         ,
  timeout = 0\n                         }\n                    (sort::[Word2]->[Word2])\n
  \                   properties\n\nThe above program reports, after a few seconds,
  that our property set is\napparently *neither minimal nor complete*.\n\n    $ ./fitspec-sort\n
  \   Apparent incomplete and non-minimal specification based on\n    4000 test cases
  for each of properties 1, 2, 3, 4 and 5\n    for each of 4000 mutant variations.\n\n
  \   3 survivors (99% killed), smallest:\n      \\xs -> case xs of\n               [0,0,1]
  -> [0,1,1]\n               _ -> sort xs\n\n    apparent minimal property subsets:
  \ {1,2,3} {1,2,4}\n    conjectures:  {3}    =  {4}     96% killed (weak)\n                  {1,3}
  ==> {5}     98% killed (weak)\n\n*Completeness:* Of 4000 mutants, 3 survive testing
  against our 5 properties.\nThe surviving mutant is clearly not a valid implementation
  of `sort`, but\nindeed satisfies those properties.  As a specification, the property
  set is\n*incomplete* as it omits to require that sorting preserves the number of\noccurrences
  of each element value: `\\x xs -> count x (sort xs) == count x xs`\n\n*Minimality:*\nSo
  far as testing has revealed, properties 3 and 4 are equivalent and property\n5 follows
  from 1 and 3 (conjectures).  It is *up to the user* to check whether\nthese conjectures
  are true.  Indeed they are, so in future testing we could\nsafely omit properties
  4 and 5.\n\n*Refinement:* If we omit redundant properties, and add a property to
  kill the\nsurviving mutant, our refined properties are:\n\n    properties sort =\n
  \     [ \\xs ->   ordered (sort xs)\n      , \\xs ->    length (sort xs) == length
  xs\n      , \\x xs ->  elem x (sort xs) == elem x xs\n      , \\x xs -> count x
  (sort xs) == count x xs\n      ]\n\n(The implementation of `count` is left as an
  exercise to the reader.)\n\nFitSpec now reports:\n\n    Apparent complete but non-minimal
  specification based on\n    4000 test cases for each of properties 1, 2, 3 and 4\n
  \   for each of 4000 mutant variations.\n\n    0 survivors (100% killed).\n\n    apparent
  minimal property subsets:  {1,4}\n    conjectures:  {4} ==> {2,3}     99% killed
  (weak)\n\nAs reported, properties 2 and 3 are implied by property 4, since that
  is true,\nwe can safely remove properties 2 and 3 to arrive at a minimal and complete\npropety
  set.\n\n\n### User-defined datatypes\n\nIf you want to use FitSpec to analyse functions
  over user-defined datatypes,\nthose datatypes should be made instances of the [Listable],
  [Mutable] and\n[ShowMutable] typeclasses.  Check the Haddock documentation of each
  class for\nhow to define instances manually.  If datatypes do not follow a data
  invariant,\ninstances can be automatically derived using [TH] by:\n\n    deriveMutable
  ''DataType\n\n\nMore documentation\n------------------\n\nFor more examples, see
  the [eg](eg) and [bench](bench) folders.\n\nFor further documentation, consult the
  [doc](doc) folder and [FitSpec API]\ndocumentation on Hackage.\n\nFitSpec has been
  subject to a paper, see the\n[FitSpec paper on Haskell Symposium 2016](https://matela.com.br/paper/fitspec.pdf).\nFitSpec
  is also subject to a chapter in a [PhD Thesis (2017)].\n\n[Listable]:    https://hackage.haskell.org/package/leancheck/docs/Test-LeanCheck.html#t:Listable\n[Mutable]:
  \    https://hackage.haskell.org/package/fitspec/docs/Test-FitSpec.html#t:Mutable\n[ShowMutable]:
  https://hackage.haskell.org/package/fitspec/docs/Test-FitSpec.html#t:ShowMutable\n[FitSpec
  API]: https://hackage.haskell.org/package/fitspec/docs/Test-FitSpec.html\n\n[leancheck]:
  https://hackage.haskell.org/package/leancheck\n[cmdargs]:   https://hackage.haskell.org/package/cmdargs\n[pretty]:
  \   https://hackage.haskell.org/package/pretty\n\n[TH]:      https://wiki.haskell.org/Template_Haskell\n[Cabal]:
  \  https://www.haskell.org/cabal\n[Haskell]: https://www.haskell.org/\n[PhD Thesis
  (2017)]: https://matela.com.br/paper/rudy-phd-thesis-2017.pdf\n\n[fitspec-logo]:
  https://github.com/rudymatela/fitspec/raw/master/doc/fitspec.svg?sanitize=true\n\n[build-log]:
  \   https://github.com/rudymatela/fitspec/actions/workflows/build.yml\n[build-status]:
  https://github.com/rudymatela/fitspec/actions/workflows/build.yml/badge.svg\n[hackage-version]:
  https://img.shields.io/hackage/v/fitspec.svg\n[fitspec-on-hackage]:                  https://hackage.haskell.org/package/fitspec\n[latest
  FitSpec version from Hackage]: https://hackage.haskell.org/package/fitspec\n[stackage-lts-badge]:
  \         https://stackage.org/package/fitspec/badge/lts\n[stackage-nightly-badge]:
  \     https://stackage.org/package/fitspec/badge/nightly\n[fitspec-on-stackage]:
  \        https://stackage.org/package/fitspec\n[fitspec-on-stackage-lts]:     https://stackage.org/lts/package/fitspec\n[fitspec-on-stackage-nightly]:
  https://stackage.org/nightly/package/fitspec\n"
license-name: BSD-3-Clause
