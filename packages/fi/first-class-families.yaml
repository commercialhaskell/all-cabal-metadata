all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.8.0.0
- 0.8.0.1
- 0.8.1.0
- 0.8.2.0
author: Li-yao Xia
basic-deps:
  base: '>=4.9 && <5'
changelog: "# 0.8.2.0 - 2025-10-12\r\n\r\n- Add `Fcf.Utils.Assert` and `Fcf.Utils.AssertNot`.\r\n-
  Export everything in `Fcf`\r\n\r\n# 0.8.1.0\r\n\r\n- Add `(Fcf.Combinators.>>=)`\r\n-
  Resolve warnings about deprecated `TypeInType`\r\n\r\n# 0.8.0.1\r\n\r\n- Bump upper
  bounds for GHC 9.0\r\n- Update doctests for cabal-docspec\r\n\r\n# 0.8.0.0\r\n\r\n-
  Add modules\r\n    + `Fcf.Data.Symbol` (currently just reexports `Symbol`) (thanks
  to gspia)\r\n    + `Fcf.Data.Function`\r\n    + \"Overloaded type families\" (\"type-level
  type classes\")\r\n        * `Fcf.Class.Ord`\r\n        * `Fcf.Class.Monoid`\r\n
  \       * `Fcf.Class.Monoid.Types` (which exports just an `Endo a` to wrap `a ->
  Exp a`)\r\n        * `Fcf.Class.Functor`\r\n        * `Fcf.Class.Bifunctor`\r\n
  \       * `Fcf.Class.Foldable`\r\n\r\n- Add functions in `Fcf.Data.List`:\r\n  `Intersperse`,
  `Intercalate`, `Span`, `Break`, `Tails`, `IsPrefixOf`,\r\n  `IsSuffixOf`, `IsInfixOf`,
  `Partition`.\r\n- Generalize `Foldr`, `Concat` and `ConcatMap` to foldable types.\r\n\r\n-
  Remove deprecated `Guarded`, `Guard((:=))`, `Otherwise`.\r\n- Deprecate `Fcf.Classes`\r\n\r\n#
  0.7.0.0\r\n\r\n- Add `Unfoldr`, `Concat`, `ConcatMap`, `Replicate`, `Take`, `Drop`,\r\n
  \ `TakeWhile`, `DropWhile`, `Reverse` to `Data.List`. (thanks to gspia)\r\n- Change
  `Elem`, `Lookup`, `Zip` to be `data` instead of `type` synonyms.\r\n- Fix performance
  of `Filter` and `Find`.\r\n\r\n# 0.6.0.0\r\n\r\n- Add `Fcf.Utils.Case` (thanks to
  TheMatten)\r\n- Deprecate `Fcf.Bool.Guarded`\r\n- GHC 8.8 compatibility\r\n\r\n#
  0.5.0.0\r\n\r\n- Modularized library\r\n\r\n- `Fcf.Utils`:\r\n\r\n    + Add `TError`\r\n
  \   + Rename `Collapse` to `Constraints`\r\n\r\n- `Fcf.Data.List`: Added `Cons`,
  `Last`, `Init`, `Elem`\r\n\r\n# 0.4.0.0\r\n\r\n- New functions (thanks to blmage)\r\n\r\n
  \   + `LiftM`, `LiftM2`, `LiftM3`\r\n    + `(<=)`, `(>=)`, `(<)`, `(>)`\r\n    +
  `Guarded`, `Guard((:=))`, `Otherwise`\r\n\r\n# 0.3.0.1\r\n\r\n- GHC 8.6 compatibility\r\n\r\n#
  0.3.0.0\r\n\r\n- More new functions, (thanks to isovector)\r\n\r\n# 0.2.0.0\r\n\r\n-
  A whole bunch of basic functions (thanks to isovector)\r\n- Remove `Traverse` (now
  `Map`), `BimapPair`, `BimapEither` (now `Bimap`)\r\n\r\n# 0.1.0.0\r\n\r\nInitial
  version\r\n"
changelog-type: markdown
description: |
  # First-class type families [![Hackage](https://img.shields.io/hackage/v/first-class-families.svg)](https://hackage.haskell.org/package/first-class-families) [![Build Status](https://travis-ci.org/Lysxia/first-class-families.svg)](https://travis-ci.org/Lysxia/first-class-families)

  First-class type families are type-level functions that can be
  composed using higher-order functions.

  The core of the idea is an extensible kind of "type-level expressions"
  and an open type family for evaluating such expressions.

  ```haskell
  type Exp (k :: Type) :: Type
  type family Eval (e :: Exp k) :: k
  ```

  This library provides that core foundation,
  and also exports basic first-class type families.

  ## Example

  For example, consider this simple type family:

  ```haskell
  type family   FromMaybe (a :: k) (m :: Maybe k) :: k
  type instance FromMaybe a 'Nothing  = a
  type instance FromMaybe a ('Just b) = b
  ```

  With first-class-families (fcfs), it translates to a `data` declaration
  and instances for a single `Eval` family:

  ```haskell
  import Fcf

  data FromMaybe :: k -> Maybe k -> Exp k
  type instance Eval (FromMaybe a 'Nothing)  = a
  type instance Eval (FromMaybe a ('Just b)) = b
  ```

  That way, the `FromMaybe` constructor can be partially applied,
  and passed to higher-order fcfs such as `Map`:

  ```haskell
  Eval (Map (FromMaybe 0) '[ 'Just 1, 'Nothing ])  =  '[ 1, 0 ] :: [Nat]
  ```

  Essential language extensions:

  ```haskell
  {-# LANGUAGE
      DataKinds,
      PolyKinds,
      TypeFamilies,
      TypeInType,
      TypeOperators,
      UndecidableInstances #-}
  ```

  ## Overview

  - `Fcf.Core`: definition of `Exp` and `Eval`.
  - `Fcf.Combinators`: general combinators to compose first-class families.
  - `Fcf.Data.*`: first-class families on common data types.
  - `Fcf.Class.*`: overloaded first-class families.
  - `Fcf.Utils`: miscellaneous.

  The top-level module `Fcf` is a prelude to get acquainted with the library.
  For regular use, import what you need from the specialized modules
  above, preferably with explicit import lists.

  ```haskell
  import Fcf                       -- Simple but fragile

  import Fcf.Class.Functor (FMap)  -- Explicit and robust
  ```

  ## Features

  ### Overloaded type families

  Value-level functions can be overloaded using type classes.
  Type families---type-level functions---are open by design,
  so overloading is as easy as just declaring them with more general types.

  ```haskell
  data Map :: (a -> Exp b) -> f a -> Exp (f b)

  -- Instances for f = []
  type instance Eval (Map f '[]) = '[]
  type instance Eval (Map f (x ': xs)) = Eval (f x) ': Eval (Map f xs)

  -- Instances for f = Maybe
  type instance Eval (Map f 'Nothing) = 'Nothing
  type instance Eval (Map f ('Just x)) = 'Just (Eval (f x))
  ```

  ## See also

  - [Haskell with only one type family](http://blog.poisson.chat/posts/2018-08-06-one-type-family.html)
  - [Overloaded type families](https://blog.poisson.chat/posts/2018-09-29-overloaded-families.html)
  - [The *singletons* library](https://hackage.haskell.org/package/singletons)

  ---

  Contributions are welcome. Feel free to open an issue or make a PR on
  [Github](https://github.com/Lysxia/first-class-families)!
description-type: markdown
hash: 146f656a446fba803aa44176c03c7e0cbe6daae4fa9db9d67ffb1e1ab08ce779
homepage: https://github.com/Lysxia/first-class-families#readme
latest: 0.8.2.0
license-name: MIT
maintainer: lysxia@gmail.com
synopsis: First-class type families
test-bench-deps:
  base: '>=0'
  first-class-families: '>=0'
