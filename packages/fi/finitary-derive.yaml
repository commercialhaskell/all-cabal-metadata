all-versions:
- 1.0.0.1
- 2.2.0.0
- 2.2.0.1
- 3.0.0.1
author: Koz Ross
basic-deps:
  base: '>=4.11 && <4.16'
  binary: '>=0.8.5.1 && <0.11'
  bitvec: '>=1.1.1.0 && <1.2'
  coercible-utils: '>=0.0.0 && <0.1'
  deepseq: '>=1.4.3.0 && <1.5'
  finitary: '>=1.2.0.0 && <2.2'
  finite-typelits: '>=0.1.4.2 && <0.2'
  ghc-typelits-extra: '>=0.3.1 && <0.5'
  ghc-typelits-knownnat: '>=0.7 && <0.8'
  hashable: '>=1.3.0.0 && <1.4'
  integer-gmp: '>=1.0.2.0 && <1.2'
  primitive: '>=0.7.1.0 && <0.8'
  vector: '>=0.12.0.3 && <0.13'
  vector-binary-instances: '>=0.2.5.1 && <0.3'
  vector-instances: '>=3.4 && <3.5'
changelog: "# Revision history for finitary-derive\r\n\r\n## 3.0.0.1 -- 2021-02-10\r\n\r\n*
  Use ``ByteArray`` for packed data internally,\r\n  re-using the ``BigNat`` functionality
  where possible.\r\n  This significantly improves the performance of packing/unpacking
  operations.\r\n* Export internal packing/unpacking functions and newtype wrappers.\r\n*
  Add ``COMPLETE`` pragmas to ``Packed`` pattern synonyms.\r\n* Adapt to using ``ghc-bignum``
  on GHC 9.0 and above.\r\n\r\n## 2.2.0.1 -- 2021-02-09\r\n\r\n* Update bounds for
  compatibility with GHC 9.0\r\n\r\n## 2.2.0.0 -- 2019-11-27\r\n\r\n* Fix definition
  of ``Packed`` for ``PackInto`` to actually agree with the\r\n  documentation.\r\n\r\n##
  2.1.0.0 -- 2019-11-24\r\n\r\n* Fix bug in ``Ord`` instances for the ``Pack*`` types.\r\n*
  Fix definition of ``Packed`` pattern to actually agree with the documentation.\r\n*
  Define a ``newtype`` wrapper for better provision of ``Binary`` and\r\n  ``Hashable``
  instances for ``Vector``s of ``PackBits`` types.\r\n* Remove ``Hashable`` and ``Binary``
  instances for ``PackBits`` (both\r\n  varieties).\r\n* Fix documentation typoes.\r\n\r\n##
  2.0.0.0 -- 2019-11-23\r\n\r\n* Remove ``Data.Finitary.Pack``.\r\n* Add ``Data.Finitary.PackBits``,
  ``Data.Finitary.PackWords``,\r\n  ``Data.Finitary.PackBytes``, ``Data.Finitary.PackBits.Unsafe``
  and\r\n  ``Data.Finitary.PackInto``\r\n* Refactor 'packing-agnostic' functionality
  into ``Data.Finitary.Finiteness``.\r\n* A lot of documentation changes.\r\n\r\n##
  1.0.0.1 -- 2019-09-21\r\n\r\n* Fix documentation.\r\n* Raise bounds on ``finitary``
  to avoid critical bugs.\r\n* Raise bounds on ``base`` for test (for honesty reasons).\r\n\r\n##
  1.0.0.0 -- 2019-09-17\r\n\r\n* First version. Released on an unsuspecting world.\r\n"
changelog-type: markdown
description: "# ``finitary-derive``\r\n\r\n## What's this all about, then?\r\n\r\nHave
  you ever written an ``Unbox`` instance for a user-defined type? I hope not,\r\nbecause
  it's a [uniquely tedious chore][1]. If your type is more complex, this\r\ncan be
  difficult, fiddly, and frustrating. ``Storable`` is not much better. This\r\nis
  the kind of 'work' that we as Haskellers ought not to put up with.\r\n\r\nNow, you
  don't have to! As long as your type is [``Finitary``][2], you can now\r\nget ``Unbox``
  and ``Storable`` (as well as a whole bunch of other) instances \r\n_almost_ automagically:\r\n\r\n```haskell\r\n{-#
  LANGUAGE DeriveAnyClass #-}\r\n{-# LANGUAGE DeriveGeneric #-}\r\n{-# LANGUAGE DerivingVia
  #-}\r\n\r\nimport Data.Finitary\r\nimport Data.Finitary.Finiteness\r\nimport Data.Finitary.PackInto\r\nimport
  Data.Word\r\nimport Data.Hashable\r\n\r\nimport qualified Data.Vector.Unboxed as
  VU\r\nimport qualified Data.Vector.Storable as VS\r\n\r\ndata Foo = Bar | Baz (Word8,
  Word8) | Quux Word16\r\n  deriving (Eq, Generic, Finitary)\r\n  deriving (Ord, Bounded,
  Hashable, NFData, Binary) via (Finiteness Foo)\r\n\r\nsomeVector :: VU.Vector (PackInto
  Foo Word64)\r\nsomeVector = VU.fromList . fmap Packed $ [Bar, Baz 0x0 0xf, Quux
  0x134]\r\n\r\nsomeStorableVector :: VS.Vector (PackInto Foo Word64)\r\nsomeStorableVector
  = VS.fromList . fmap Packed $ [Bar, Baz 0x0 0xf, Quux 0x134]\r\n```\r\n\r\nIf you
  don't have access to ``DerivingVia``, you can still get the benefits of\r\nthis
  library -- just use ``Finitary a`` instead of ``a``. As it is a ``newtype``, \r\nyou
  can ``coerce`` through it if you care about efficiency.\r\n\r\n## What's the deal
  with ``Unbox`` and ``Storable`` exactly? What's with all the ``Pack`` types?\r\n\r\nEssentially,
  being ``Finitary`` means that there's a finite set of indexes, one\r\nfor each inhabitant.
  That means we can essentially represent any inhabitant as a\r\nfixed-length number.
  It's on the basis of this that we can 'magic up'\r\n``Storable`` and ``Unbox``.\r\n\r\nHowever,
  how we _represent_ this fixed-length number isn't immediately obvious.\r\nWe have
  a couple of options:\r\n\r\n- A string of bits\r\n- A string of bytes\r\n- An array
  of machine words\r\n\r\nAdditionally, if we have _another_ finitary type whose cardinality
  is not\r\nsmaller, we could potentially 'borrow' its instances as well. Which of
  these\r\nchoices is appropriate isn't obvious in general: it depends on whether
  you care\r\nabout space or speed, the cardinality of the type, and a bunch of other
  things\r\ntoo. As we believe that the best people to judge tradeoffs like these
  are the\r\npeople using our library, we provide _all_ of these options for you to
  choose\r\nfrom, so that you can choose the one that best suits you.\r\n\r\n## So...
  what's the difference exactly?\r\n\r\n``PackBits`` represents indexes as strings
  of bits. This is the most compact\r\nrepresentation possible (honestly, [maths says
  so][6]), but the least efficient, \r\nas accessing individual bits is slower on
  most architectures than whole bytes or words.\r\nUnless you've got large ``Vector``s,
  you probably don't need this encoding, but\r\nif space is at an absolute premium,
  this is the best choice. \r\n\r\n``PackBytes`` instead represents indexes as byte
  strings. This is a more\r\nefficient choice than a string of bits, but can still
  be slow for architectures\r\nwhich prefer whole-word access. It's also fairly compact,
  especially if your\r\narchitecture has big ``Word``s.\r\n\r\n``PackWords`` represents
  indexes as fixed-length arrays of ``Word``s. This is\r\nthe most efficient encoding
  from the point of view of random reads and writes,\r\nbut will likely waste a lot
  of space, unless your type is _extremely_ large (as\r\nin, multiple copies of ``Word``
  large).  \r\n\r\nLastly, ``PackInto`` lets you choose another finitary type whose
  instances you\r\nwant to 'borrow', and will use that type as a representation. This
  is the most\r\nflexible, and should be preferred whenever possible. However, it
  requires that a\r\ntype of appropriate cardinality (at least as big as the one you
  want to encode)\r\nexists, and has the appropriate instances. \r\n\r\n## Why can't
  I ``DerivingVia`` through these ``Pack`` types?\r\n\r\nFor ``Unbox``, the short
  answer is 'role restrictions on unboxed vectors'. If\r\nyou want a more detailed
  explanation, check out the [GHC wiki on roles][3], as\r\nwell as the [implementation
  of ``Data.Vector.Unboxed``][4]. You might also want\r\nto check out [stuff about
  data families][5]. \r\n\r\nAdditionally, there is some tension in the design. We
  could have made one of two\r\nchoices: either define ``Pack`` types as transparent
  ``newtype``s, and encode or\r\ndecode whenever a type class method required it;
  or define ``Pack`` types as\r\nopaque, and encode or decode only when the values
  were constructed or\r\ndeconstructed. Ultimately, we went with the second option,
  as it makes the\r\noccurences of encodes and decodes explicit to the user. Had we
  gone with the\r\nfirst choice, it would be unclear where encodes and decodes occur,
  especially\r\nwhen using functions built from type class methods. We believe this
  clarity is\r\nworth the inability to use ``DerivingVia`` to define ``Storable``
  instances.\r\n\r\n## Why do ``PackBytes``, ``PackWords`` and ``PackInto`` have ``Storable``
  instances, but not ``PackBits``?\r\n\r\nBecause it's not clear what this instance
  should look like. Let's suppose you want to bit-pack a\r\ntype ``Giraffe`` with
  cardinality 11 - what should ``sizeOf`` for ``PackBits\r\nGiraffe`` be? How about
  ``alignment``? The only obvious solution is padding, but\r\nin this case, you might
  as well use ``PackBytes``, ``PackWords`` or\r\n``PackInto``, since then you'll at
  least know what you're getting, and are\r\nexplicit about it.\r\n\r\n## Sounds good!
  Can I use it?\r\n\r\nCertainly - we've tested on the following (all x86_64 only):\r\n\r\n*
  __GNU/Linux:__ GHC 8.4.4, 8.6.5, 8.8.1\r\n* __macOS:__ GHC 8.8.1\r\n* __Windows:__
  GHC 8.10.4, 9.0.1\r\n\r\nIf you would like support for any additional GHC versions,
  let us know.\r\nUnfortunately, while the library will _build_ on 8.4.4, due to\r\n``hedgehog-classes``
  being limited to 8.6+, tests cannot be run on this version.\r\n\r\nIf you build
  and use this library successfully on any other platforms, we'd like\r\nto know too
  - it'd be beneficial even if nothing breaks, and _especially_ if\r\nsomething does.\r\n\r\n##
  License\r\n\r\nThis library is under the GNU General Public License, version 3 or
  later (SPDX\r\ncode ``GPL-3.0-or-later``). For more details, see the ``LICENSE.md``
  file.\r\n\r\n[1]: http://hackage.haskell.org/package/vector-0.12.0.3/docs/Data-Vector-Unboxed.html\r\n[2]:
  https://hackage.haskell.org/package/finitary-1.0.0.1/docs/Data-Finitary.html#t:Finitary\r\n[3]:
  https://gitlab.haskell.org/ghc/ghc/wikis/roles\r\n[4]: http://hackage.haskell.org/package/vector-0.12.0.3/docs/src/Data.Vector.Unboxed.Base.html\r\n[5]:
  https://wiki.haskell.org/GHC/Type_families\r\n[6]: https://en.wikipedia.org/wiki/Kraft%E2%80%93McMillan_inequality\r\n"
description-type: markdown
hash: 795d09c07878126eddc35a9830abd72d5f65d68ae8f81c7588194adceea93fe6
homepage: https://notabug.org/sheaf/finitary-derive
latest: 3.0.0.1
license-name: GPL-3.0-or-later
maintainer: Sam Derbyshire
synopsis: |-
  Flexible and easy deriving of type classes for finitary
  types.
test-bench-deps:
  base: '>=4.11 && <4.16'
  binary: '>=0.8.5.1 && <0.11'
  deepseq: '>=1.4.3.0 && <1.5'
  finitary: '>=1.2.0.0 && <2.2'
  finitary-derive: '>=0'
  finite-typelits: '>=0.1.4.2 && <0.2'
  hashable: '>=1.3.0.0 && <1.4'
  hedgehog: '>=1.0.1 && <1.1'
  hedgehog-classes: '>=0.2.4 && <0.3'
  vector: '>=0.12.0.3 && <0.13'
