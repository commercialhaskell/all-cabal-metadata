all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.1.0
- 2.1.0
- 2.2.0
- 2.3.0
- 2.4.0
- 2.5.0
author: Evan Laforge
basic-deps:
  Cabal: '>=0'
  base: '>=3 && <5'
  containers: '>=0'
  cpphs: '>=0'
  deepseq: '>=0'
  directory: '>=0'
  filepath: '>=0'
  ghc-lib-parser: '>=9.6 && <9.8'
  ghc-lib-parser-ex: '>=9.6 && <9.8'
  ghc-paths: '>=0'
  mtl: '>=0'
  pretty: '>=0'
  process: '>=0'
  split: '>=0'
  text: '>=0'
  time: '>=0'
  uniplate: '>=0'
changelog: |
  ### 2.5.0

  - update to ghc-lib-parser 9.6, should support at least ghc 9.4 and 9.6

  - add --package-cache flag, to read from a specific package cache.  Should be
  faster than ghc-pkg.

  ### 2.4.0

  - Support cabal v2, look for .ghc.environment.* and get pkgs from there.

  - Look for config in ~/.config/fix-imports in addition to ./.fix-imports.

  - Switch from haskell-src-exts to ghc-lib-parser.  This fixes a bunch of
  parsing bugs.  Along the way I fixed a bug where locally bound names were
  misinterpreted as unqualified names.

  - Detect and abort on CPP in the import block, instead of silently deleting it.

  ### 2.3.0

  - add --edit flag, so I can just replace imports, instead of the whole file

  - add logging, and show findModule info when passed --debug

  - Add --config flag to explicitly set the config file.

  ### 2.2.0

  - fix bugs where pretty printing didn't work right for
  leave-space-for-unqualified

  - add `format: columns=n` field

  - separate qualify-as fields with ; instead of ,

  - fix a bug where I didn't allow _ in unqualified import names

  - better error reporting

  ### 2.1.0

  - unqualified syntax changed to support multiple imports per module

  - add `format: leave-space-for-qualified` and `format: no-group`

  - add import-as config option

      E.g. import Data.Text.Lazy as DTL, instead of always having to qualify
      as a suffix, like Lazy, or Text.Lazy.

  - various bugs with unqualified imports

  #### 2.0.0

  - add support for unqualified imports for explicitly configured symbols, via
  the `unqualified` field in `.fix-imports`

  - significant speed improvement, reuse the loaded pkg index instead of asking
  ghc-pkg find-module

  - --debug now emits timing metrics

  - import-order-{first,last} are exact matches, or are prefix matches if they
  have a trailing dot

  - prio-module-{high,low} are now exact matches instead of prefix

  #### 1.1.0

  - Rename import-order to import-order-first, and add import-order-last.

  #### 1.0.5

  - support haskell-src-exts > 1.16

  - add 'language' field to .fix-imports, to turn on local extensions

  #### 1.0.3 and 1.0.4

  - upgrade to haskell-src-exts-1.16

  #### 1.0.2

  - Fix bug where a qualified import with >1 dot wasn't found.  And don't
  mess with Prelude.

  #### 1.0.1

  - Fix a bunch of bugs: properly recognize unqualified imports as imports,
  never import the current module, don't pick up modules with the same suffix
  but a different name.

  #### 1.0.0

  - Change name from FixImports to fix-imports, which is more unixy.

  - Change ghc-pkg parsing from String to Text.  It's noticeably faster.

  - Add a more flexible system for prioritizing imports.
  When there are several possibilities for a module name, they are all given
  to a single function to decide.  The config file moved from
  fix-imports-priority to .fix-imports and can now specify sort orders for
  packages and modules by prefix.

  - Make -i includes for non-existent dirs ignored instead of causing an
  error.
changelog-type: markdown
description: |
  `fix-imports` is a small standalone program to manage the import block of a
  haskell program.  It will try to add import lines for qualified names
  with no corresponding import, remove unused import lines, and keep the
  import block sorted, with optional rules for grouping.

  Support for unqualified imports is limited to symbols you explicitly configure,
  so if you list `System.FilePath ((</>))`, it will add that import when you use
  it, or remove when it's no longer used, but it won't go search modules for
  unqualified imports.

  It doesn't mess with non-managed unqualified imports, so you can still use
  unqualified imports, you just have to do it manually.

  Since it's a unix-style filter, it should be possible to integrate into any
  editor.  There's an example vimrc to bind to a key in vim.

  ### Usage:

  Normally you would integrate it with your editor (see `vimrc` for a vim
  example), but for testing, here's an example invocation:

      fix-imports -i src -i test src/A/B/C.hs <src/A/B/C.hs
      [ fixed contents of A/B/C.hs, or an error ]

  The `-i` flag is like ghc's `-i` flag, it will add an aditional root to the
  module search path.  The example will find modules in both `test/*` and
  `src/*`, in addition to the package db.

  `fix-imports` will look for `.ghc.environment.*` in the current directory
  and use it for pkgs to search.  This is created by cabal v2, but only if
  you have `write-ghc-environment-files: always` in `cabal.project`.
  Otherwise, it assumes cabal v1 and will use the `ghc-pkg` command to use
  the global package db.

  If it doesn't seem to see packages you think it should, run with `--debug`
  to see what it sees.

  I don't use stack, but my understanding is this is enough to get `ghc-pkg`
  working:

      export GHC_PACKAGE_PATH=$(stack path --ghc-package-path)
description-type: markdown
hash: 0697ebb9f3b9153179c9af0bcb60f07bb098ff878c4619c363a7a659e6a37736
homepage: ''
latest: 2.5.0
license-name: BSD-3-Clause
maintainer: Evan Laforge <qdunkan@gmail.com>
synopsis: Program to manage the imports of a haskell module
test-bench-deps:
  Cabal: '>=0'
  base: '>=3 && <5'
  containers: '>=0'
  cpphs: '>=0'
  deepseq: '>=0'
  directory: '>=0'
  filepath: '>=0'
  ghc-lib-parser: '>=9.6 && <9.8'
  ghc-lib-parser-ex: '>=9.6 && <9.8'
  ghc-paths: '>=0'
  mtl: '>=0'
  pretty: '>=0'
  process: '>=0'
  split: '>=0'
  test-karya: '>=0'
  text: '>=0'
  time: '>=0'
  uniplate: '>=0'
