all-versions:
- 1.1.0.0
- 1.1.0.1
- 1.2.0.0
- 2.1.1.0
- 2.1.1.1
- 2.1.2.0
author: Koz Ross
basic-deps:
  base: '>=4.12 && <5'
  bitvec: '>=1.0.3.0 && <1.2'
  finite-typelits: ^>=0.1.4.2
  ghc-typelits-knownnat: ^>=0.7.2
  ghc-typelits-natnormalise: ^>=0.7.2
  primitive: ^>=0.7.0.1
  template-haskell: '>=2.14.0.0 && <3.0.0.0'
  typelits-witnesses: ^>=0.4.0.1
  vector: ^>=0.12.1.2
  vector-sized: '>=1.4.1.0 && <1.6'
changelog: "# Revision history for finitary\r\n\r\n## 2.1.2.0 -- 2024-05-06\r\n\r\n*
  Allow `typelits-witnesses-0.4.0.1`, and bump upper bounds of\r\n  `hspec` and `hspec-hedgehog`
  in the test component (thanks to viercc).\r\n\r\n## 2.1.1.1 -- 2022-12-03\r\n\r\n*
  Bump some upper bounds, including `base`.\r\n\r\n## 2.1.1.0 -- 2021-02-11\r\n\r\n*
  Work around a bug in `fromIntegral :: Natural -> Integer` in GHC 9.0 (GHC issue
  #19345).\r\n\r\n## 2.1.0.1 -- 2021-02-09\r\n\r\n* Fix incorrect instance for `Finite
  a => Finite ( Down a )`\r\n* Add cabal flags to give the option of removing dependencies
  on `vector` and `bitvec`\r\n* Ensure GHC 9.0 compatibility\r\n\r\n## 2.0.0.0 --
  2020-05-05\r\n\r\n* Support GHC 8.10\r\n* Remove support for GHCs older than 8.6\r\n*
  Remove dependency on ``coercible-utils``\r\n* ``previous`` and ``next`` now return
  ``Maybe``s\r\n* Better tests\r\n* Better documentation\r\n\r\n## 1.2.0.0 -- 2019-10-17\r\n\r\n*
  Remove ``nextSkipping`` and ``previousSkipping`` as unnecessary.\r\n* Add (and note)
  support for GHC 8.2.2.\r\n* Remove MTL dependency.\r\n* Remove ``enumerate*`` class
  methods.\r\n* Add ``inhabitants``, ``inhabitantsFrom``, ``inhabitantsTo``,\r\n  ``inhabitantsFromTo``.\r\n\r\n##
  1.1.0.0 -- 2019-09-21\r\n\r\n* Repair a disagreement between ``Ord`` and ``Finitary``
  derivations via\r\n  ``Generic`` (thanks jle`!).\r\n* Fix serious bug with ``next``
  and ``previous``.\r\n\r\n## 1.0.0.1 -- 2019-09-17\r\n\r\n* Fix README (no code changes).\r\n\r\n##
  1.0.0.0 -- 2019-09-17\r\n\r\n* Rewritten documentation to be more clear, and state
  more laws.\r\n* Added ``nextSkipping`` and ``previousSkipping`` methods to allow
  'skipping\r\n  over' some elements when enumerating in a more efficient manner.\r\n*
  Added ``Eq a`` as a constraint for ``Finitary a`` instances (as without it,\r\n
  \ the laws don't make much sense).\r\n* Fixed numerous typoes and unclear statements.\r\n*
  Stated that ``Finitary`` must be order-preserving relative any instances with\r\n
  \ ``Ord`` instances; existing instances modified to follow this law.\r\n* Added
  more tests.\r\n* Fixed odd issue with some element cardinalities and lengths for
  sized\r\n  ``Vector`` instances.\r\n* Tightened bounds to be more conservative.\r\n*
  Support GHC 8.8.\r\n\r\n## 0.1.0.0 -- 2019-09-10\r\n\r\n* First version. Released
  on an unsuspecting world.\r\n"
changelog-type: markdown
description: "# ``finitary``\r\n\r\n## What's all this about?\r\n\r\n``finitary``
  allows us to specify that a type is _finite_ (that is, contains\r\nfinitely many
  inhabitants which are not ``_|_``), and have confirmation of this\r\nfact by GHC.
  Additionally, it offers a ``Generics``-based auto-derivation\r\ninterface for this,
  as well as multiple helper functions that are enabled by all\r\nthis machinery.\r\n\r\n###
  Why is this a big deal?\r\n\r\nConsider ``Enum``. It's not difficult to see that
  ``Enum`` has issues:\r\n\r\n#### It's partial all over the place\r\n\r\nWhat will
  this code do?\r\n\r\n```haskell\r\ntoEnum 3 :: Bool\r\n```\r\n\r\nThe answer is
  'a runtime error'. How about this?\r\n\r\n```haskell\r\nsucc True\r\n```\r\n\r\nThe
  answer, again, is 'a runtime error'. Many of the methods provided by ``Enum``\r\nare
  partial like this, because many types that happen to be ``Enum`` instances\r\nhave
  cardinalities (much) smaller than ``Int``, which necessitates leaving some\r\n``Int``
  values 'out'.\r\n\r\nThe converse is not much better: on some platforms, ``Int``
  has _smaller_\r\ncardinality than some types with ``Enum`` instances in ``base``.
  For example, on \r\na platform where ``Int`` is 32 bits wide, the ``Word64`` instance
  will definitely \r\ncause problems, as it's 'too big'.\r\n\r\n#### It gives us almost
  no information\r\n\r\nAn ``Enum`` instance says that a type can be munged to and
  from an ``Int``...\r\nsomehow. While ``base`` and the Haskell Report certainly provide
  some limits \r\non its behaviour, a lot of questions remain unanswered, including:\r\n\r\n*
  How many inhabitants does this type have?\r\n* What are the 'safe' values of ``Int``
  I can feed to ``toEnum``?\r\n* For any ``x``, is ``toEnum . (+ 1) . fromEnum $ x``
  safe (in that it'll give\r\n  us a value instead of blowing up)?\r\n\r\n#### We
  don't have a (default) way to auto-derive it\r\n\r\nQuoting ``base``:\r\n\r\n> Instances
  of ``Enum`` may be derived for any enumeration type (types whose\r\n> constructors
  have no fields).\r\n\r\nBut what if your type has fields, especially when they're
  instances of ``Enum``? \r\nUnfortunately, no auto-derivation for you. While this
  stance makes some sense, \r\nit's still rather inconvenient.\r\n\r\n## OK, so what
  are you offering instead?\r\n\r\nThe core of ``finitary`` is the ``Finitary`` type
  class. If we have an instance\r\nof ``Finitary`` for some type ``a``, we have a
  witness to an isomorphism between\r\n``a`` and some ``(KnownNat n) => Finite n``.
  More precisely, we (together with GHC)\r\nknow:\r\n\r\n* That ``a`` has finitely-many
  non-``_|_`` inhabitants\r\n* The value of ``n``, which is the _cardinality_ of ``a``
  (how many inhabitants we have exactly)\r\n* Two functions to 'witness' the isomorphism,
  namely ``fromFinite :: Finite n ->\r\n  a`` and ``toFinite :: a -> Finite n``\r\n\r\n###
  How does ``Finitary`` solve the issues behind ``Enum``?\r\n\r\n#### Everything is
  total, forever\r\n\r\nThere is no way to call ``fromFinite`` or ``toFinite`` with
  an 'inappropriate'\r\nargument. We always know - if you give me a ``Finite n``,
  I will give you back a\r\n(unique) ``a``, guaranteed.\r\n\r\n#### We learn a lot
  from a type having a ``Finitary`` instance\r\n\r\nAside from cardinality, we also
  inherently get the ability to:\r\n\r\n* Have a 'starting' and 'ending' value (assuming
  the cardinality of the type\r\n  isn't zero); and\r\n* Get the 'next' or 'previous'
  value, or report that it doesn't exist.\r\n\r\nAll of this is safe, total and can
  be relied upon. Check out the documentation\r\nfor more details - all of this functionality
  is provided. We also have functions\r\nto help enumerate values of ``Finitary``
  types.\r\n\r\n#### But what about auto-derivation?\r\n\r\nWe have you covered. If
  you want to auto-derive an instance of\r\n``Finitary`` for your type, you absolutely
  can, using the power of\r\n``GHC.Generics``:\r\n\r\n```haskell\r\n{-# LANGUAGE DataKinds
  #-}\r\n{-# LANGUAGE DeriveAnyClass #-}\r\n{-# LANGUAGE DeriveGeneric #-}\r\n{-#
  LANGUAGE DerivingStrategies #-}\r\n\r\nimport Data.Finitary (Finitary)\r\nimport
  Data.Vector.Sized (Vector)\r\nimport Data.Word (Word8)\r\nimport GHC.Generics (Generic)\r\n\r\ndata
  Foo = Bar | Baz (Word8, Word8) | Quux (Vector 4 Bool)\r\n  deriving stock (Eq, Generic)\r\n
  \ deriving anyclass (Finitary) \r\n```\r\n\r\nFurthermore, GHC will even calculate
  the cardinality for you. To assist in this,\r\nwe have provided as many instances
  of ``Finitary`` for 'base' types as possible - \r\nsee the documentation for full
  details.\r\n\r\n### That all seems rather cool - what else can I do with this?\r\n\r\nKnowing
  that a type has finite cardinality is usable for many things - all of\r\nwhich we
  plan to provide. Some examples (with links once we have working, tested\r\ncode)
  include:\r\n\r\n* [Automatic derivation of instances][1]\r\n* Type-safe refinement\r\n*
  Random generation and stream sampling\r\n* Efficient sets, allowing operations like
  complements and a ``Monoid`` under\r\n  intersection\r\n* Efficient maps\r\n* Various
  clever ``lens`` tricks\r\n\r\nIf there's something else interesting you think can
  be done with this, let us\r\nknow: it might make it onto this list, and into code.\r\n\r\n##
  What will this work on?\r\n\r\nCurrently, we support GHC versions ranging from 8.6
  to 9.0.\r\n\r\nThe library has been tested on x86_64, GNU/Linux and Windows.\r\nIf
  you have results on other platforms or architectures, please let us know too!\r\n\r\n##
  License\r\n\r\nThis library is under the GNU General Public License, version 3 or
  later (SPDX\r\ncode ``GPL-3.0-or-later``). For more details, see the ``LICENSE.md``
  file.\r\n\r\n[1]: https://notabug.org/sheaf/finitary-derive\r\n"
description-type: markdown
hash: d1c0827e7be60f65a47f9204db7373edf9b704f97bfa3cebae5edf6c821102e3
homepage: https://notabug.org/sheaf/finitary
latest: 2.1.2.0
license-name: GPL-3.0-or-later
maintainer: Sam Derbyshire
synopsis: A better, more type-safe Enum.
test-bench-deps:
  base: '>=0'
  bitvec: '>=0'
  finitary: '>=0'
  finite-typelits: '>=0'
  ghc-typelits-knownnat: '>=0'
  ghc-typelits-natnormalise: '>=0'
  hedgehog: '>=1.0.2 && <1.3'
  hspec: '>=2.7.1 && <3.0'
  hspec-hedgehog: '>=0.0.1.2 && <0.2'
  primitive: '>=0'
  template-haskell: '>=0'
  typelits-witnesses: '>=0'
  vector: '>=0'
  vector-sized: '>=0'
