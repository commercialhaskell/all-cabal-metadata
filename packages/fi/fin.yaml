homepage: https://github.com/phadej/vec
changelog-type: markdown
hash: 5ca172171e34d1261bc59497daae429a205ff2ad255ba21906b9a33902456462
test-bench-deps:
  base: -any
  tagged: -any
  inspection-testing: '>=0.2.0.1 && <0.6'
  fin: -any
maintainer: Oleg.Grenrus <oleg.grenrus@iki.fi>
synopsis: 'Nat and Fin: peano naturals and finite numbers'
changelog: "## 0.2.1\n\n- Add `boring` instances\n- Explicitly implement `>=` and
  `>` for `Nat`.\n- `<=`, `>=` and `min` for `Nat` are lazier\n- Add `NFData (SNat
  n)` instance\n- Add `GEq`, `GCompare`, `GNFData`, `GShow` (from `some` package)
  instances for `SNat`.\n\n## 0.2\n\n- `SNat` is now what was called `InlineInduction`.\n
  \ To migrate code from `fin-0.1` to `fin-0.2` it's often enough to\n  replace `InlineInduction`
  with `SNatI`, and `inlineInduction` with `induction`. \n- Explicitly mark all modules
  as Safe or Trustworthy.\n\n## 0.1.2\n\n- Add `universe-base` `Universe` and `Finite`
  instances\n\n## 0.1.1\n\n- Add `isMin` and `isMax`\n- Add `mirror`, `weakenRight1`
  and `weakenLeft1`\n- Add `Mult2` and `DivMod2`\n- Explicitly derive `Typeable SNat`
  and `Typeable LEProof`\n- Derive `Typeable` for `Z` and `S` on GHC-7.8 explicitly\n-
  Add `QuickCheck` instances for `Nat` and `Fin`\n\n## 0.1\n\n- Rename `Fin` constructors
  to `FZ` and `FS`.\n  Now you can have both `Nat` and `Fin` imported unqualified
  in a single module.\n\n## 0.0.3\n\n- Add `Data.Type.Nat.LE`, `Data.Type.Nat.LT`
  and `Data.Type.Nat.LE.ReflStep`\n  modules\n- Add `withSNat` and `discreteNat`\n\n##
  0.0.2\n\n- In `Fin` add: `append` and `split`\n- Add `(Enum a, Enum b) => Enum (Either
  a b)` instance\n\n## 0.0.1\n\n- GHC-8.4.1 / base-4.11 support\n\n## 0\n\n- First
  version. Released on an unsuspecting world.\n"
basic-deps:
  dec: '>=0.0.4 && <0.1'
  base: '>=4.7 && <4.18'
  universe-base: '>=1.1.2 && <1.2'
  some: '>=1.0.3 && <1.1'
  boring: '>=0.2 && <0.3'
  bifunctors: '>=5.5.3 && <5.6'
  hashable: '>=1.2.7.0 && <1.5'
  deepseq: '>=1.3.0.2 && <1.5'
  QuickCheck: '>=2.13.2 && <2.15'
all-versions:
- '0'
- 0.0.1
- 0.0.2
- 0.0.3
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: 0.2.1
description-type: haddock
description: |-
  This package provides two simple types, and some tools to work with them.
  Also on type level as @DataKinds@.

  @
  \-- Peano naturals
  data Nat = Z | S Nat

  \-- Finite naturals
  data Fin (n :: Nat) where
  \    Z :: Fin ('S n)
  \    S :: Fin n -> Fin ('Nat.S n)
  @

  [vec](https://hackage.haskell.org/package/vec) implements length-indexed
  (sized) lists using this package for indexes.

  The "Data.Fin.Enum" module let's work generically with enumerations.

  See [Hasochism: the pleasure and pain of dependently typed haskell programming](https://doi.org/10.1145/2503778.2503786)
  by Sam Lindley and Conor McBride for answers to /how/ and /why/.
  Read [APLicative Programming with Naperian Functors](https://doi.org/10.1007/978-3-662-54434-1_21)
  by Jeremy Gibbons for (not so) different ones.

  === Similar packages

  * [finite-typelits](https://hackage.haskell.org/package/finite-typelits)
  . Is a great package, but uses @GHC.TypeLits@.

  * [type-natural](https://hackage.haskell.org/package/type-natural) depends
  on @singletons@ package. @fin@ will try to stay light on the dependencies,
  and support as many GHC versions as practical.

  * [peano](https://hackage.haskell.org/package/peano) is very incomplete

  * [nat](https://hackage.haskell.org/package/nat) as well.

  * [PeanoWitnesses](https://hackage.haskell.org/package/PeanoWitnesses)
  doesn't use @DataKinds@.

  * [type-combinators](https://hackage.haskell.org/package/type-combinators)
  is big package too.
license-name: BSD-3-Clause
