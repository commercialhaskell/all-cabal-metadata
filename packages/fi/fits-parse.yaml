all-versions:
- 0.0.1
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- 0.4.1
author: Zac Slade
basic-deps:
  JuicyPixels: '>=3.3.9 && <3.4'
  base: '>=4.7 && <5'
  binary: '>=0.8.9.1 && <0.9'
  bytestring: '>=0.11.5.3 && <0.12'
  fast-logger: '>=3.2.3 && <3.3'
  fits-parse: '>=0'
  megaparsec: '>=9.5.0 && <9.6'
  microlens: '>=0.4.13.1 && <0.5'
  microlens-th: '>=0.4.3.15 && <0.5'
  optparse-applicative: '>=0.18.1.0 && <0.19'
  statistics: '>=0.16.2.1 && <0.17'
  text: '>=2.0.2 && <2.1'
  text-latin1: '>=0.3.1 && <0.4'
  vector: '>=0.13.1.0 && <0.14'
changelog: ''
changelog-type: ''
description: |+
  [![Build Status](https://travis-ci.com/krakrjak/fits-parse.svg?branch=master)](https://travis-ci.com/krakrjak/fits-parse)
  [![Documentation Status](https://readthedocs.org/projects/fits-parse/badge/?version=latest)](https://fits-parse.readthedocs.io/en/latest/?badge=latest)

  # fits-parse

  FITS - Flexible Image Transport System

  This project focuses on building a Haskell native parser for FITS files. This file format is used widely by Astronomers and those analyzing astronomical data. There is currently a C library called `fitsio` and a Haskell wrapper for the library. However, this library can be cumbersome to use and the Haskell bindings are very thin and close to the metal of the `fitsio` library. This project focuses on providing good Haskell bindings and datatypes by implementing the FITS spec directly in Haskell, without the need for a C library. The reference for this work comes from NASA in the US. Conformance is currently limited to the Version 4.0 specification with no extensions. See [the NASA site](https://fits.gsfc.nasa.gov/fits_standard.html) for more details and to download the spec.

  # Reading Documentation

  The [readthedocs](https://fits-parse.readthedocs.org) pages contain documentation for the *examples*.
  The [API Haddock](https://krakrjak.github.io/fits-parse/index.html) docs for the *master* branch are
  on github.io, release documentation will be on [Hackage](https://hackage.haskell.org/package/fits-parse).

  You can build the Haddocks for offline use with `stack build --haddock`.

  # RTD Building

  To build the [readthedocs](https://fits-parse.readthedocs.org) docs you need `sphinx`. To install it
  locally for a single user use `pip` with the `--user` option to install `sphinx` and `sphinx-rtd-theme`.
  Alternatively, on Ubuntu you can install the `python3-sphinx` and `python3-sphinx-rtd-theme` package.


description-type: markdown
hash: a86fd1686f4e9e9c2df41b413b907c554eb2cdaa05d929c58b4e8a35ad1abe3f
homepage: https://github.com/krakrjak/fits-parse#readme
latest: 0.4.1
license-name: BSD-2-Clause
maintainer: |-
  Zac Slade <krakrjak@gmail.com>,
  Sean Hess
synopsis: Parse FITS files
test-bench-deps:
  base: '>=4.7 && <5'
  bytestring: '>=0.11.5.3 && <0.12'
  fits-parse: '>=0'
  megaparsec: '>=9.5.0 && <9.6'
  microlens: '>=0.4.13.1 && <0.5'
  microlens-th: '>=0.4.3.15 && <0.5'
  mtl: '>=2.3.1 && <2.4'
  tasty: '>=1.4.3 && <1.5'
  tasty-hunit: '>=0.10.2 && <0.11'
  text: '>=2.0.2 && <2.1'
