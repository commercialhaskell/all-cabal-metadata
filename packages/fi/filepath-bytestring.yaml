homepage: ''
changelog-type: text
hash: 2be5af1d5eb01bcf2b36b036b501a3bb2cf7e96ca57930332d170eca246da86b
test-bench-deps:
  bytestring: '>=0.11.2.0'
  base: -any
  filepath: '>=1.4.2 && <=1.4.2.1'
  criterion: -any
  QuickCheck: '>=2.7 && <2.15'
  filepath-bytestring: -any
maintainer: Joey Hess <id@joeyh.name>
synopsis: Library for manipulating RawFilePaths in a cross platform way.
changelog: |
  filepath-bytestring (1.4.2.1.12) unstable; urgency=medium

    * Relax bounds to allow base 4.17 (ghc 9.4).

   -- Joey Hess <id@joeyh.name>  Thu, 20 Oct 2022 13:25:40 -0400

  filepath-bytestring (1.4.2.1.11) unstable; urgency=medium

    * Deprecated this library, since filepath has added OsPath that
      is based on a bytestring.

   -- Joey Hess <id@joeyh.name>  Sat, 23 Jul 2022 12:41:53 -0400

  filepath-bytestring (1.4.2.1.10) unstable; urgency=medium

    * Depend on bytestring-0.11.2.0, and use it to implement encodeFilePath
      and decodeFilePath, whose code was previously copied from it.

   -- Joey Hess <id@joeyh.name>  Wed, 08 Dec 2021 18:55:24 -0400

  filepath-bytestring (1.4.2.1.9) unstable; urgency=medium

    * Relax bounds to allow base 4.16 (ghc 9.2).

   -- Joey Hess <id@joeyh.name>  Fri, 03 Dec 2021 11:49:58 -0400

  filepath-bytestring (1.4.2.1.8) unstable; urgency=medium

    * Faster implementations of encodeFilePath and decodeFilePath.
      They are approximately 2x and 3x as fast, respectively.
    * encodeFilePath and decodeFilePath used to truncate at the first
      NUL. The new implementations do not do this. Since unix filepaths
      cannot contain NUL, this behavior change is can't cause any problems,
      unless the functions are used for values that are not actually
      valid filepaths.
    * Support cabal bench to benchmark the library.

   -- Joey Hess <id@joeyh.name>  Wed, 11 Aug 2021 12:17:15 -0400

  filepath-bytestring (1.4.2.1.7) unstable; urgency=medium

    * Relax QuickCheck bounds to allow 2.14.
    * Relax base bounds so it will build with ghc 9.0.1.

   -- Joey Hess <id@joeyh.name>  Wed, 17 Mar 2021 08:11:27 -0400

  filepath-bytestring (1.4.2.1.6) unstable; urgency=medium

    * Added makeValid. All functions from filepath are now implemented.

   -- Joey Hess <id@joeyh.name>  Thu, 02 Jan 2020 16:05:49 -0400

  filepath-bytestring (1.4.2.1.5) unstable; urgency=medium

    * Allow building with filepath-1.4.2 as well as 1.4.2.1;
      there are no behavior or API differences between the two versions.

   -- Joey Hess <id@joeyh.name>  Wed, 01 Jan 2020 14:24:18 -0400

  filepath-bytestring (1.4.2.1.4) unstable; urgency=medium

    * Added splitSearchPath and getSearchPath.
    * Fix bug in makeRelative, caught by test suite.
    * Added quickcheck tests for equalFilePath and makeRelative.

   -- Joey Hess <id@joeyh.name>  Wed, 01 Jan 2020 11:58:31 -0400

  filepath-bytestring (1.4.2.1.3) unstable; urgency=medium

    * Added equalFilePath.
    * Added makeRelative.

   -- Joey Hess <id@joeyh.name>  Mon, 30 Dec 2019 13:07:31 -0400

  filepath-bytestring (1.4.2.1.2) unstable; urgency=medium

    * Fix build with ghc 8.0 (pre-Semigroup Monoid transition)

   -- Joey Hess <id@joeyh.name>  Mon, 30 Dec 2019 12:18:15 -0400

  filepath-bytestring (1.4.2.1.1) unstable; urgency=medium

    * When running on Windows, RawFilePath is assumed to be encoded with
      UTF-8, rather than the windows default of UTF-16. This lets the user
      use OverloadedStrings for RawFilePaths embedded in their code.
    * Added two conversion functions, encodeFilePath and decodeFilePath.
    * Added normalise.
    * Optimise with -O2, a benchmark shows that improves the speed
      of </> by around 7%.
    * Inline </>, which speeds it up by around 3%.

   -- Joey Hess <id@joeyh.name>  Wed, 18 Dec 2019 13:42:16 -0400

  filepath-bytestring (1.4.2.1.0) unstable; urgency=medium

    * Initial release, based on filepath 1.4.2.1.

   -- Joey Hess <id@joeyh.name>  Tue, 10 Dec 2019 15:21:14 -0400
basic-deps:
  bytestring: '>=0.11.2.0'
  unix: -any
  base: '>=4 && <4.18'
all-versions:
- 1.4.2.1.0
- 1.4.2.1.1
- 1.4.2.1.2
- 1.4.2.1.3
- 1.4.2.1.4
- 1.4.2.1.5
- 1.4.2.1.6
- 1.4.2.1.7
- 1.4.2.1.8
- 1.4.2.1.9
- 1.4.2.1.10
- 1.4.2.1.11
- 1.4.2.1.12
author: Neil Mitchell <ndmitchell@gmail.com>
latest: 1.4.2.1.12
description-type: markdown
description: |
  # FilePath [![Hackage version](https://img.shields.io/hackage/v/filepath.svg?label=Hackage)](https://hackage.haskell.org/package/filepath) [![Linux build status](https://img.shields.io/travis/haskell/filepath/master.svg?label=Linux%20build)](https://travis-ci.org/haskell/filepath) [![Windows build status](https://img.shields.io/appveyor/ci/ndmitchell/filepath/master.svg?label=Windows%20build)](https://ci.appveyor.com/project/ndmitchell/filepath)

  The `filepath-bytestring` package provides functionality for manipulating `RawFilePath` values (`ByteString`s).
  Its interface is equivilant to the `filepath` package.
  It provides three modules:

  * [`System.FilePath.Posix.ByteString`](http://hackage.haskell.org/package/filepath-bytestring/docs/System-FilePath-Posix-ByteString.html) manipulates POSIX/Linux style `RawFilePath` values (with `/` as the path separator).
  * [`System.FilePath.Windows.ByteString`](http://hackage.haskell.org/package/filepath-bytestring/docs/System-FilePath-Windows-ByteString.html) manipulates Windows style `RawFilePath` values (with either `\` or `/` as the path separator, and deals with drives).
  * [`System.FilePath.ByteString`](http://hackage.haskell.org/package/filepath-bytestring/docs/System-FilePath-ByteString.html) is an alias for the module appropriate to your platform.

  All three modules provide the same API, and the same documentation (calling out differences in the different variants).

  ### Developer notes

  This package's version should be the same as the `filepath` it's derived
  from, with an added revision number.

  Most of the code is in `System/FilePath/Internal.hs` which is `#include`'d into both `System/FilePath/Posix.hs` and `System/FilePath/Windows.hs` with the `IS_WINDOWS` CPP define set to either `True` or `False`. This Internal module is a bit weird in that it isn't really a Haskell module, but is more an include file.

  The library has extensive doc tests. Anything starting with `-- >` is transformed into a doc test as a predicate that must evaluate to `True`. These tests follow a few rules:

  * Tests prefixed with `Windows:` or `Posix:` are only tested against that specific implementation - otherwise tests are run against both implementations.
  * Any single letter variable, e.g. `x`, is considered universal quantification, and is checked with `QuickCheck`.
  * If `Valid x =>` appears at the start of a doc test, that means the property will only be tested with `x` passing the `isValid` predicate.

  Also, all exported functions are quickchecked against the ones from
  `filepath` to make sure thay generate equivilant results.

  The tests can be generated by `Generate.hs` in the root of the repo, and will be placed in `tests/TestGen.hs`. The `TestGen.hs` file is checked into the repo, and the CI scripts check that `TestGen.hs` is in sync with what would be generated a fresh - if you don't regenerate `TestGen.hs` the CI will fail.

  The `.ghci` file is set up to allow you to type `ghci` to open the library, then `:go` will regenerate the tests and run them.
license-name: BSD-3-Clause
