all-versions:
- 0.1.0.0
author: Chris Penner
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  blaze-html: '>=0'
  firefly: '>=0'
  mtl: '>=0'
  text: '>=0'
  wai: '>=0'
changelog: ''
changelog-type: ''
description: "# Firefly\n\n- [Example App](./firefly-example/app/Main.hs)\n- [Hackage
  Docs](http://hackage.haskell.org/package/firefly-0.1.0.0/docs/Web-Firefly.html)\n\nFirefly
  is dead simple http framework written in Haskell.\n\nIt strives for simplicity in
  implementation (and in use).\nIt's great for people learning Haskell, fiddling with
  Monads,\nor who just need a really simple server for something.\n\nHere's the minimal
  app:\n\n```haskell\n{-# language OverloadedStrings #-}\nimport Web.Firefly\nimport
  qualified Data.Text as T\n\nmain :: IO ()\nmain = run 3000 app\n\napp :: App ()\napp
  = do\n  route \"/hello\" (return \"hello\" :: Handler T.Text)\n```\n\nJust that
  easy!\n\nCheck out the [Example App](./firefly-example/app/Main.hs) for more!\n\nSpecify
  your routes using regex patterns, the first one which matches will run.\n\n`Handler`
  is a monad with access to the incoming request. You can access parts\nof it using
  helpers, then return a response.\n\nHere are some valid response types and their
  inferred Content-Type\n\n- `Data.Text.Text`: `text/plain` \n- `Data.Aeson.Value`:
  `application/json` \n- `Blaze.Html.Html`: `text/html`\n\nThere are more in `Web.Firefly.Response`.\n\nYou
  can specify your status code using `(body, Status)` where body is any of\nthe above
  types and Status is an Integer status code.\n\nOr, add headers too with `(body,
  Status, HeaderMap)` where `HeaderMap` is a map\nof names to values.\n\n## Examples\n\nLet's
  write some more interesting handlers:\n\n```haskell\nhello :: App T.Text\nhello
  = do\n  -- | Get the 'name' query param from the url, if it doesn't exist use 'Stranger'\n
  \ name <- getQuery \"name\"\n  -- If we just return some Text the response will
  be status 200 with a Content-Type of \"text/plain\"\n  return $ \"Hello \" <> fromMaybe
  \"Stranger\" name\n```\n\nHere's an example of responding with JSON:\n\n```haskell\nimport
  Data.Aeson (ToJSON, FromJSON)\nimport GHC.Generics (Generic)\nimport qualified Data.Text
  as T\nimport qualified Network.Wai as W\nimport Web.Firefly\n\ndata User = User\n
  \ { username::T.Text\n  , age::Int\n  } deriving (Generic, ToJSON, FromJSON) --
  Derive JSON instances\n\n-- A reguler 'ol user\nsteve :: User\nsteve = User{username=\"Steve\",
  age=26}\n\n-- | Get a user by username\ngetUser :: App W.Response\ngetUser = do\n
  \ uname <- getQuery \"username\"\n  return $ case uname of\n             -- The
  Json constructor signals to serialize the value and respond as \"application/json\"\n
  \            Just \"steve\" -> toResponse $ Json steve \n             Just name
  -> toResponse (\"Couldn't find user: \" `mappend` name, notFound404)\n             Nothing
  -> toResponse (\"Please provide a 'username' parameter\" :: T.Text, badRequest400)\n```\n\n##
  Should I/Shouldn't I use Firefly?\n\nYou should use Firefly if:\n\n- You're intimidated
  by monads and want to learn more!\n- You want to write a hobby project\n- You like
  understanding the stack you're working with (The whole lib is ~300 lines without
  docs/imports)\n\nDon't use Firefly if:\n\n- You'll have thousands of users\n- You
  want the most performant server possible\n- You want to have lots of helper libs
  available\n"
description-type: markdown
hash: 09aa0a30c966e87f5794e29b23dff9d7c37c6965cd17c424e11323534a0e8793
homepage: https://github.com/ChrisPenner/Firefly#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: christopher.penner@gmail.com
synopsis: A simple example using Firefly
test-bench-deps: {}
