all-versions:
- 0.2.0.0
- 0.3.0.0
author: see AUTHORS
basic-deps:
  base: '>=4.5.0.0 && <5'
  cairo: '>=0'
  containers: '>=0'
  gtk: '>=0'
  llvm-general: <3.3.12 || >=3.4 && <3.4.3
  llvm-general-pure: '>=0'
  mtl: '>=0'
  process: '>=0'
  rail-compiler-editor: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "\uFEFF# A Rail compiler written in Haskell [![Build Status](https://travis-ci.org/SWP-Ubau-SoSe2014-Haskell/SWPSoSe14.svg?branch=master)](https://travis-ci.org/SWP-Ubau-SoSe2014-Haskell/SWPSoSe14)\n\nThis
  is (or rather: will become) a compiler for the esoteric programming\nlanguage [Rail](http://esolangs.org/wiki/Rail),
  written in Haskell.\n\n## Contents of this repository\n\n- `documentation` contains
  additional documentation.\n  - The main documentation will be found in the code.\n-
  `src` contains the Rail compiler and editor (written in Haskell).\n- `tests` contains
  the hunit tests\n- `integration-tests` contains integration tests\n  - see section
  `tests` for more information.\n\n## Development\n\nIf you plan to contribute to
  the project,\nmake sure that your contribution does not break any tests and hlint
  is happy.\n\n### Coding conventions\n\nThough not applied consistently until now,\nthere
  are some things which would be really NICE to have:\n\n- Set indetations to 2 spaces\n-
  Remove trailing white spaces\n- Do not retab/reformat other people's code, especially
  not in a commit which\n  contains some logical changes as well\n- One logical change
  per commit\n- Integrate [hlint](https://hackage.haskell.org/package/hlint) to your
  editor of\n  choice and try to stick to the suggestions it makes\n- Would be cool,
  if lines are not longer than 80 characters\n\n### Module testing with HUnit\n\n`tests`
  contains a `Main.hs` file that runs an HUnit test with a list of test\nfunctions.
  For each module `src/[module-name].hs` of the compiler pipeline\nexists a corresponding
  test file `tests/T[module-name].hs` exporting a list of\ntest functions for the
  named module. In the `Main.hs` file the list that is\ntested by HUnit, is concatenated
  by the exported test lists of all test modules.\n\n### Integration tests\n\nIntegration
  tests are stored in `integration-tests` in three subdirectories:\n- `passing/` contains
  tests that are testing already implemented features and\n  that already passed before\n-
  `failing/` contains tests that are testing already implemented features but\n  never
  passed\n- `future/` contains tests that are testing functionality that will be added\n
  \  in the future\n\nEach test consists of two files. A rail program `[test-name].rail`
  and an\nio-file `[test-name].io`.\n\nThe io-file specifies test cases, i.e. a set
  of inputs\nwith the expected corresponding outputs of the rail-program.\n\nInput
  and output as well as the test cases themselves are separated by a hash\ntag. If
  an input has more than one value, they are separated by a newline. Consider\na rail
  program adding two numbers and printing the result (without any newlines). A\ncorresponding
  io-file with two test cases could look as follows:\n\n```\n3\n5\n#\n8\n#\n21\n56\n#\n77\n```\n\n**NOTE
  1:** printed newlines have to be stated explicitly. Consider a hello-world\nprogram
  printing `Hello World\\n` (without any input). The io-file has to look\nas follows:\n\n```\n#\nHello
  World\\n\n```\n\n**NOTE 2:** The expected output is only tested against `stdout`.
  If you want to test the output\non `stderr` as well, you can add another section
  to a test case, separated by a single `%` line:\n\n```\nThis is the input.\n#\nThis
  is the expected output on stdout.\n%\nThis is the expected output on stderr.\n#\nAnother
  input.\n#\nAnother stdout output.\n```\n\n**NOTE 3:** Lines containing only a single
  `%` or `#` character always delimit sections as\ndescribed above. There is no way
  to escape them, sorry.\n\n`tests/integration_tests.sh` is a script written in bash.
  It iterates over all\nrail programs in `passing/`, compiles each of them using the
  current version of\nour rail compiler and retrieves runnable llvm-code, i.e. it
  already links it\nwith the stack implementation, etc. For each input/output value,
  it puts the\ninput into the llvm-binary and compares the actual output with the
  current\noutput. The result will be printed to stdout.\n\n## Dependencies / Building
  the Compiler\n\n- Install cabal (package cabal-install in most distributions)\n-
  Install llvm, versions llvm-3.3 and llvm-3.4 work.\n- run `cabal update`\n- If you
  don't use llvm-3.4 you manually need to install the corresponding haskell bindings,
  i.e.: `cabal install llvm-general-3.3.11.2`\n- Switch to project folder\n- Run `cabal
  install --enable-tests` to install all dependencies and build the project\n- `cabal
  test` to run the tests\n- Run the compiler with `dist/build/SWPSoSe14/SWPSoSe14
  -c -i <Source.rail> -o output`\n- You still need to link the stack manually if you
  want to have executables:\n  `llvm-link <compiled.ll> src/RailCompiler/*.ll -o executable`\n\n##
  Documentation\n\nYou can generate the compiler documentation using `cabal haddock
  --executables\n--haddock-options --ignore-all-exports` from the root project directory.\n\n##
  Branching model\n\nCurrently, there are several (long-lived) team branches and one
  main development branch,\n`master`. The `master` branch should always contain something
  that \"works\" to\nsome degree, i. e. it should never break.\n\nAll team branches
  are merged into the `master` branch on a regular basis.\n\n### Team branches\n\nThe
  following team branches exist. Except for `master`, all branches not mentioned\nhere
  are to be considered (short-lived) feature branches.\n\n- `gui`: Contains everything
  with a graphical user interface, most notably the debugger\n    and the graphical
  Rail editor.\n- `intertarget-code`: Contains code for the backend, for intermediate
  code generation and\n    for code optimization.\n- `preproc-lexer`: Contains code
  for the preprocessor and lexer components.\n- `synsem-analysis`: Contains code for
  the syntactic/semantic analysis.\n\n## Additional Information\n\nFor additional
  information take a look at our wiki pages: https://github.com/SWP-Ubau-SoSe2014-Haskell/SWPSoSe14/wiki\n"
description-type: markdown
hash: 4dda557266e02606ea5ffff2c63e723e5ec70cbcd2a6729e451929b1200a2026
homepage: https://github.com/SWP-Ubau-SoSe2014-Haskell/SWPSoSe14
latest: 0.3.0.0
license-name: MIT
maintainer: borgers@mi.fu-berlin.de
synopsis: Compiler and editor for the esolang rail.
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.5.0.0 && <5'
  containers: '>=0'
  process: '>=0'
  rail-compiler-editor: '>=0'
