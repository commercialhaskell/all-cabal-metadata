all-versions:
- '0.1'
- '0.2'
- 0.2.1.1
- '1.0'
- 1.0.1
- 1.0.2
- '1.1'
- 1.1.0.1
- '1.2'
- 1.2.1
- '1.3'
- 1.3.1
- 1.3.1.1
- 1.3.1.2
- 1.3.2.1
- '1.4'
- 1.4.0.1
- 1.4.1
- 1.4.2
- 1.4.3
- 1.4.4
- 1.4.6
- '1.5'
- 1.5.1
- 1.5.2
- 1.5.3
- 1.5.3.1
author: Mario Blažević
basic-deps:
  base: '>=4.10 && <5'
  data-functor-logistic: <0.1
  distributive: <0.7
  template-haskell: '>=2.11 && <2.23'
  transformers: '>=0.5 && <0.7'
changelog: |
  Version 1.5.3.1
  ---------------
  * Bumped the upper bound of the `template-haskell` dependency.

  Version 1.5.3
  ---------------
  * Fixed compilation with GHC 9.8.1 and `template-haskell` 2.22

  Version 1.5.2
  ---------------
  * Fixed the generated TH instance contexts for GADTs.
  * Fixed the generated signature of the `deliver` instance method in presence of `InstanceSigs`.
  * Bumped the upper bound of the `template-haskell` dependency.

  Version 1.5.1
  ---------------
  * Fixed the `Rank2.TH` templates on GHC < 9.2 with no `OverloadedRecordDot` support to revert to their
    1.4.6 behaviour.

  Version 1.5
  ---------------
  * The `Rank2.TH` templates have changed, are now applicable with `DuplicateRecordFields` provided that
    `OverloadedRecordDot` is enabled.
  * `Rank2.TH.deriveLogistic` also needs `ScopedTypeVariables` and `InstanceSigs` extensions to generate
    proper record updates.

  Version 1.4.6
  ---------------
  * Added the `Logistic` type class, `getters` and `setters`
  * Added `Rank2.TH.deriveLogistic`, included it in `deriveAll`
  * Compiling with GHC 9.4.2
  * Forward compatibility with `TypeFamilies`

  Version 1.4.4
  ---------------
  * Tested with GHC 9.2.1, incremented the upper `template-haskell` dependency bound
  * Generalized the TH generation to handle PolyRec types
  * Incremented the lower bound of rank2classes' `base` dependency, thanks to phadej

  Version 1.4.3
  ---------------
  * Fixed links to standard rank-1 classes in Haddock documentation
  * Fixed issue #23 with the `traverse` template generated for sum types with a fieldless constructor
  * Incremented upper dependency bounds

  Version 1.4.2
  ---------------
  * Fixed compatibility with GHC 9 - PR by Felix Yan

  Version 1.4.1
  ---------------
  * Fixed the templates for multi-constructor records
  * Made Rank2.TH.unsafeDeriveApply even more unsafe

  Version 1.4
  ---------------
  * Added Rank2.Compose :: ((* -> *) -> *) -> (* -> *) -> ((* -> *) -> *)
  * Matched the precedence of <$> and <*> operators with Prelude
  * Relaxed the lower bound of base dependency to 4.10

  Version 1.3.2.1
  ---------------
  * Incremented the upper bound of the template-haskell dependency

  Version 1.3.2
  ---------------
  * Exported the `$` synonym for `apply`

  Version 1.3.1.2
  ---------------
  * Fixed doctest module name issue
  * Incremented the lower bound of base dependency

  Version 1.3.1.1
  ---------------
  * Fixed the doctests after cabal get

  Version 1.3.1
  ---------------
  * Added missing markdown-unlit dependency
  * Strictified one argument of Rank2.<$> and Rank2.<*>

  Version 1.3
  ---------------
  * Added `newtype Flip` to exports - PR by Jeremy List
  * Generating INLINE pragmas from Rank2.TH
  * Generating the proper constraints on derived instances where needed

  Version 1.2.1
  ---------------
  * Added unsafeDeriveApply

  Version 1.2
  ---------------
  * Added the class instances for Data.Functor.Const
  * Fixed and optimized the Foldable/Traversable instance code generated for bare fields in Rank2.TH

  Version 1.1
  ---------------
  * Replaced own `Product` data type by the one from `Data.Functor.Product`
  * Added instances of `Data.Functor.Sum`
  * Removed the TH generation of partial Apply and Distributive instances
  * Covered more constructor cases in TH code
  * Added use-template-haskell flag, true by default - PR by Dridus

  Version 1.0.2
  ---------------
  * Fixed the bounds and `Semigroup` to compile with GHC 8.4.1
  * Added the ~> type synonym
  * Fixed `deriveFunctor` for record fields with concrete types - PR by Tom Smalley

  Version 1.0.1
  ---------------
  * Fixed the doctests

  Version 1.0
  ---------------
  * Swapped `distributeWith` with `cotraverse`
  * Documentation improvements

  Version 0.2.1.1
  ---------------
  * Corrected the README

  Version 0.2.1
  ---------------
  * Incremented the dependency bounds for GHC 8.2.1

  Version 0.2
  ---------------
  * Introduced `DistributiveTraversable` as a generalization of `Distributive`
  * Export "cotraverse" and "cotraverseTraversable"
  * Added `liftA3`, `liftA4`, `liftA5`
  * Added more convienence functions
  * Fixed grammatical errors and overlong lines

  Version 0.1.1
  ---------------
  * Generalized the classes with `{-# LANGUAGE PolyKinds" #-}`

  Version 0.1
  ---------------
  * Initial release
changelog-type: markdown
description: "Rank 2 Classes\n==============\n\n### The standard constructor type
  classes in the parallel rank-2 universe ###\n\nThe rank2 package exports module
  `Rank2`, meant to be imported qualified like this:\n\n~~~ {.haskell}\n{-# LANGUAGE
  RankNTypes, TemplateHaskell, TypeOperators #-}\nmodule MyModule where\nimport qualified
  Rank2\nimport qualified Rank2.TH\n~~~\n\nSeveral more imports for the examples...\n\n~~~
  {.haskell}\nimport Data.Functor.Classes (Show1, showsPrec1)\nimport Data.Functor.Identity
  (Identity(..))\nimport Data.Functor.Const (Const(..))\nimport Data.List (find)\n~~~\n\nThe
  `Rank2` import will make available the following type classes:\n\n  * [Rank2.Functor](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Functor)\n
  \ * [Rank2.Apply](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Apply)\n
  \ * [Rank2.Applicative](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Applicative)\n
  \ * [Rank2.Foldable](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Foldable)\n
  \ * [Rank2.Traversable](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Traversable)\n
  \ * [Rank2.Distributive](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Distributive)\n
  \ * [Rank2.Logistic](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Logistic)\n\nThe
  methods of these type classes all have rank-2 types. The class instances are data
  types of kind `(k -> *) -> *`,\none example of which would be a database record
  with different field types but all wrapped by the same type\nconstructor:\n\n~~~
  {.haskell}\ndata Person f = Person{\n   name           :: f String,\n   age            ::
  f Int,\n   mother, father :: f (Maybe PersonVerified)\n   }\n~~~\n\nBy wrapping
  each field we have declared a generalized record type. It can made to play different
  roles by switching the\nvalue of the parameter `f`. Some examples would be\n\n~~~
  {.haskell}\ntype PersonVerified = Person Identity\ntype PersonText = Person (Const
  String)\ntype PersonWithErrors = Person (Either String)\ntype PersonDatabase = [PersonVerified]\ntype
  PersonDatabaseByColumns = Person []\n~~~\n\nIf you wish to have the standard [Eq](http://hackage.haskell.org/package/base/docs/Data-Eq.html#t:Eq)
  and\n[Show](http://hackage.haskell.org/package/base/docs/Text-Show.html#t:Show)
  instances for a record type like `Person`,\nit's best if they refer to the\n[Eq1](http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Classes.html#t:Eq1)
  and\n[Show1](http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Classes.html#t:Show1)
  instances for its\nparameter `f`:\n\n~~~ {.haskell}\ninstance Show1 f => Show (Person
  f) where\n   showsPrec prec person rest =\n       \"Person{\" ++ separator ++ \"name=\"
  ++ showsPrec1 prec' (name person)\n            (\",\" ++ separator ++ \"age=\" ++
  showsPrec1 prec' (age person)\n            (\",\" ++ separator ++ \"mother=\" ++
  showsPrec1 prec' (mother person)\n            (\",\" ++ separator ++ \"father=\"
  ++ showsPrec1 prec' (father person)\n            (\"}\" ++ rest))))\n        where
  prec' = succ prec\n              separator = \"\\n\" ++ replicate prec' ' '\n~~~\n\nYou
  can create the rank-2 class instances for your data types manually, or you can generate
  the instances using the\ntemplates imported from the `Rank2.TH` module with a single
  line of code per data type:\n\n~~~ {.haskell}\n$(Rank2.TH.deriveAll ''Person)\n~~~\n\nEither
  way, once you have the rank-2 type class instances, you can use them to easily convert
  between records with\ndifferent parameters `f`.\n\n### Record construction and modification
  examples ###\n\nIn case of our `Person` record, a couple of helper functions will
  prove handy:\n\n~~~ {.haskell}\nfindPerson :: PersonDatabase -> String -> Maybe
  PersonVerified\nfindPerson db nameToFind = find ((nameToFind ==) . runIdentity .
  name) db\n   \npersonByName :: PersonDatabase -> String -> Either String (Maybe
  PersonVerified)\npersonByName db personName\n   | null personName = Right Nothing\n
  \  | p@Just{} <- findPerson db personName = Right p\n   | otherwise = Left (\"Nobody
  by name of \" ++ personName)\n~~~\n\nNow we can start by constructing a `Person`
  record with rank-2 functions for fields. This record is not so much a person\nas
  a field-by-field person verifier:\n \n~~~ {.haskell}\npersonChecker :: PersonDatabase
  -> Person (Const String Rank2.~> Either String)\npersonChecker db =\n   Person{name=
  Rank2.Arrow (Right . getConst),\n          age= Rank2.Arrow $ \\(Const age)->\n
  \              case reads age\n               of [(n, \"\")] -> Right n\n                  _
  -> Left (age ++ \" is not an integer\"),\n          mother= Rank2.Arrow (personByName
  db . getConst),\n          father= Rank2.Arrow (personByName db . getConst)}\n~~~\n\nWe
  can apply it using the [Rank2.<*>](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#v:-60--42--62-)\nmethod
  of the [Rank2.Apply](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#t:Apply)
  type class to a bunch\nof textual fields for `Person`, and get back either errors
  or proper field values:\n\n~~~ {.haskell}\nverify :: PersonDatabase -> PersonText
  -> PersonWithErrors\nverify db person = personChecker db Rank2.<*> person\n~~~\n\nIf
  there are no errors, we can get a fully verified record by applying\n[Rank2.traverse](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#v:traverse)
  to the result:\n\n~~~ {.haskell}\ncompleteVerified :: PersonWithErrors -> Either
  String PersonVerified\ncompleteVerified = Rank2.traverse (Identity <$>)\n~~~\n\nor
  we can go in the opposite direction with\n[Rank2.<$>](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#v:-60--36--62-):\n\n~~~
  {.haskell}\nuncompleteVerified :: PersonVerified -> PersonWithErrors\nuncompleteVerified
  = Rank2.fmap (Right . runIdentity)\n~~~\n\nIf on the other hand there *are* errors,
  we can collect them using\n[Rank2.foldMap](http://hackage.haskell.org/package/rank2classes/docs/Rank2.html#v:foldMap):\n\n~~~
  {.haskell}\nverificationErrors :: PersonWithErrors -> [String]\nverificationErrors
  = Rank2.foldMap (either (:[]) (const []))\n~~~\n\nHere is an example GHCi session:\n\n~~~
  {.haskell}\n-- |\n-- >>> :{\n--let Right alice = completeVerified $\n--                  verify
  [] Person{name= Const \"Alice\", age= Const \"44\",\n--                                   mother=
  Const \"\", father= Const \"\"}\n--    Right bob = completeVerified $\n--                verify
  [] Person{name= Const \"Bob\", age= Const \"45\",\n--                                 mother=
  Const \"\", father= Const \"\"}\n--    Right charlie = completeVerified $\n--                    verify
  [alice, bob] Person{name= Const \"Charlie\", age= Const \"19\",\n--                                               mother=
  Const \"Alice\", father= Const \"Bob\"}\n-- :}\n-- \n-- >>> charlie\n-- Person{\n--
  \ name=Identity \"Charlie\",\n--  age=Identity 19,\n--  mother=Identity (Just Person{\n--
  \            name=(Identity \"Alice\"),\n--             age=(Identity 44),\n--             mother=(Identity
  Nothing),\n--             father=(Identity Nothing)}),\n--  father=Identity (Just
  Person{\n--             name=(Identity \"Bob\"),\n--             age=(Identity 45),\n--
  \            mother=(Identity Nothing),\n--             father=(Identity Nothing)})}\n--
  >>> :{\n--let dave = verify [alice, bob, charlie]\n--           Person{name= Const
  \"Dave\", age= Const \"young\",\n--                  mother= Const \"Lise\", father=
  Const \"Mike\"}\n-- :}\n--\n-- >>> dave\n-- Person{\n--  name=Right \"Dave\",\n--
  \ age=Left \"young is not an integer\",\n--  mother=Left \"Nobody by name of Lise\",\n--
  \ father=Left \"Nobody by name of Mike\"}\n-- >>> completeVerified dave\n-- Left
  \"young is not an integer\"\n-- >>> verificationErrors  dave\n-- [\"young is not
  an integer\",\"Nobody by name of Lise\",\"Nobody by name of Mike\"]\n-- >>> Rank2.distribute
  [alice, bob, charlie]\n-- Person{\n--  name=Compose [Identity \"Alice\",Identity
  \"Bob\",Identity \"Charlie\"],\n--  age=Compose [Identity 44,Identity 45,Identity
  19],\n--  mother=Compose [Identity Nothing,Identity Nothing,Identity (Just Person{\n--
  \            name=(Identity \"Alice\"),\n--             age=(Identity 44),\n--             mother=(Identity
  Nothing),\n--             father=(Identity Nothing)})],\n--  father=Compose [Identity
  Nothing,Identity Nothing,Identity (Just Person{\n--             name=(Identity \"Bob\"),\n--
  \            age=(Identity 45),\n--             mother=(Identity Nothing),\n--             father=(Identity
  Nothing)})]}\n~~~\n\n### Related works ###\n\nThis package is one of several implementations
  of a pattern that is often called *Higher-Kinded Data*. Other examples\ninclude
  [hkd-lens](https://hackage.haskell.org/package/hkd-lens),\n[barbies](https://hackage.haskell.org/package/barbies),
  and [higgledy](https://hackage.haskell.org/package/higgledy).\n\nGrammars are another
  use case that is almost, but not quite, entirely unlike database records. See\n[grammatical-parsers](https://github.com/blamario/grampa/tree/master/grammatical-parsers)
  or\n[construct](https://hackage.haskell.org/package/construct) for examples.\n\nBoth
  database records and grammars are flat structures. If your use case involves trees
  of rank-2 records, this\npackage will probably not suffice. Consider using\n[deep-transformations](https://hackage.haskell.org/package/deep-transformations)
  instead.\n"
description-type: markdown
hash: 827b3f64133dff57fad0b02d1cdb3bef28934b64f14b3f43a6c3a5b345f478c0
homepage: https://github.com/blamario/grampa/tree/master/rank2classes
latest: 1.5.3.1
license-name: BSD-3-Clause
maintainer: Mario Blažević <blamario@protonmail.com>
synopsis: standard type constructor class hierarchy, only with methods of rank 2 types
test-bench-deps:
  base: '>=0'
  data-functor-logistic: <0.1
  distributive: <0.7
  doctest: '>=0.8'
  rank2classes: '>=0'
  tasty: <2
  tasty-hunit: <1
