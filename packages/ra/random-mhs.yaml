all-versions:
- 1.3.2
author: ''
basic-deps:
  base: '>=4.9 && <5'
  bytestring: '>=0.10.4 && <0.13'
  data-array-byte: '>=0.1 && <9.9'
  deepseq: '>=1.1 && <2'
  mtl: '>=2.2 && <2.4'
  splitmix: '>=0.1 && <0.2'
  transformers: '>=0.4 && <0.7'
changelog: "# 1.3.2\n\n* Fix `setStdGen` not being threadsafe: [#190](https://github.com/haskell/random/pull/190)\n*
  Make `getStdRandom` lazy in the value being generated: [#190](https://github.com/haskell/random/pull/190)\n\n#
  1.3.1\n\n* Add missing `SplitGen` instance for `StateGen`: [#183](https://github.com/haskell/random/pull/183)\n\n#
  1.3.0\n\n* Improve floating point value generation and avoid degenerate cases: [#172](https://github.com/haskell/random/pull/172)\n*
  Add `Uniform` instance for `Maybe` and `Either`: [#167](https://github.com/haskell/random/pull/167)\n*
  Add `Seed`, `SeedGen`, `seedSize`, `seedSizeProxy`, `mkSeed` and `unSeed`:\n  [#162](https://github.com/haskell/random/pull/162)\n*
  Add `mkSeedFromByteString`, `unSeedToByteString`, `withSeed`, `withSeedM`, `withSeedFile`,\n
  \ `seedGenTypeName`, `nonEmptyToSeed`, `nonEmptyFromSeed`, `withSeedM`, `withSeedMutableGen`
  and `withSeedMutableGen_`\n* Add `SplitGen` and `splitGen`: [#160](https://github.com/haskell/random/pull/160)\n*
  Add `unifromShuffleList` and `unifromShuffleListM`: [#140](https://github.com/haskell/random/pull/140)\n*
  Add `uniformWordR`: [#140](https://github.com/haskell/random/pull/140)\n* Add `mkStdGen64`:
  [#155](https://github.com/haskell/random/pull/155)\n* Add `uniformListRM`, `uniformList`,
  `uniformListR`, `uniforms` and `uniformRs`:\n  [#154](https://github.com/haskell/random/pull/154)\n*
  Add compatibility with recently added `ByteArray` to `base`:\n  [#153](https://github.com/haskell/random/pull/153)\n
  \ * Switch to using `ByteArray` for type class implementation instead of\n    `ShortByteString`\n
  \ * Add `unsafeUniformFillMutableByteArray` to `RandomGen` and a helper function\n
  \   `defaultUnsafeUniformFillMutableByteArray` that makes implementation\n    for
  most instances easier.\n  * Add `uniformByteArray`, `uniformByteString` and `uniformFillMutableByteArray`\n
  \ * Deprecate `genByteString` in favor of `uniformByteString`\n  * Add `uniformByteArrayM`
  to `StatefulGen`\n  * Add `uniformByteStringM` and `uniformShortByteStringM`\n  *
  Deprecate `System.Random.Stateful.uniformShortByteString` in favor of `uniformShortByteStringM`
  for\n    consistent naming and a future plan of removing it from `StatefulGen`\n
  \   type class\n  * Add a pure `System.Random.uniformShortByteString` generating
  function.\n  * Deprecate `genShortByteString` in favor of `System.Random.uniformShortByteString`\n
  \ * Expose a helper function `fillByteArrayST`, that can be used for\n    defining
  implementation for `uniformByteArrayM`\n  * Deprecate `genShortByteStringST` and
  `genShortByteStringIO` in favor of `fillByteArrayST`\n* Improve `FrozenGen` interface:
  [#149](https://github.com/haskell/random/pull/149)\n  * Move `thawGen` from `FreezeGen`
  into the new `ThawGen` type class. Fixes an issue with\n    an unlawful instance
  of `StateGen` for `FreezeGen`.\n  * Add `modifyGen` and `overwriteGen` to the `FrozenGen`
  type class\n  * Switch `splitGenM` to use `SplitGen` and `FrozenGen` instead of
  deprecated `RandomGenM`\n  * Add `splitMutableGenM`\n  * Switch `randomM` and `randomRM`
  to use `FrozenGen` instead of `RandomGenM`\n  * Deprecate `RandomGenM` in favor
  of a more powerful `FrozenGen`\n* Add `isInRangeOrd` and `isInRangeEnum` that can
  be used for implementing `isInRange`:\n  [#148](https://github.com/haskell/random/pull/148)\n*
  Add `isInRange` to `UniformRange`: [#78](https://github.com/haskell/random/pull/78)\n*
  Add default implementation for `uniformRM` using `Generics`:\n  [#92](https://github.com/haskell/random/pull/92)\n\n#
  1.2.1\n\n* Fix support for ghc-9.2 [#99](https://github.com/haskell/random/pull/99)\n*
  Fix performance regression for ghc-9.0 [#101](https://github.com/haskell/random/pull/101)\n*
  Add `uniformEnumM` and `uniformEnumRM`\n* Add `initStdGen` [#103](https://github.com/haskell/random/pull/103)\n*
  Add `globalStdGen` [#117](https://github.com/haskell/random/pull/117)\n* Add `runStateGenST_`\n*
  Ensure that default implementation of `ShortByteString` generation uses\n  unpinned
  memory. [#116](https://github.com/haskell/random/pull/116)\n* Fix [#54](https://github.com/haskell/random/issues/54)
  with\n  [#68](https://github.com/haskell/random/pull/68) - if exactly one value
  in the\n  range of floating point is infinite, then `uniformRM`/`randomR` returns
  that\n  value.\n* Add default implementation of `uniformM` that uses `Generic`\n
  \ [#70](https://github.com/haskell/random/pull/70)\n* `Random` instance for `CBool`
  [#77](https://github.com/haskell/random/pull/77)\n* Addition of `TGen` and `TGenM`
  [#95](https://github.com/haskell/random/pull/95)\n* Addition of tuple instances
  for `Random` up to 7-tuple\n  [#72](https://github.com/haskell/random/pull/72)\n\n#
  1.2.0\n\n1. Breaking change which mostly maintains backwards compatibility, see\n
  \  \"Breaking Changes\" below.\n2. Support for monadic generators e.g. [mwc-random](https://hackage.haskell.org/package/mwc-random).\n3.
  Monadic adapters for pure generators (providing a uniform monadic\n   interface
  to pure and monadic generators).\n4. Faster in all cases except one by more than
  x18 (N.B. x18 not 18%) and\n   some cases (depending on the type) faster by more
  than x1000 - see\n   below for benchmarks.\n5. Passes a large number of random number
  test suites:\n   * [dieharder](http://webhome.phy.duke.edu/~rgb/General/dieharder.php
  \"venerable\")\n   * [TestU01 (SmallCrush, Crush, BigCrush)](http://simul.iro.umontreal.ca/testu01/tu01.html
  \"venerable\")\n   * [PractRand](http://pracrand.sourceforge.net/ \"active\")\n
  \  * [gjrand](http://gjrand.sourceforge.net/ \"active\")\n   * See [random-quality](https://github.com/tweag/random-quality)\n
  \    for details on how to do this yourself.\n6. Better quality split as judged
  by these\n\t[tests](https://www.cambridge.org/core/journals/journal-of-functional-programming/article/evaluation-of-splittable-pseudorandom-generators/3EBAA9F14939C5BB5560E32D1A132637).
  Again\n\tsee [random-quality](https://github.com/tweag/random-quality) for\n\tdetails
  on how to do this yourself.\n7. Unbiased generation of ranges.\n8. Updated tests
  and benchmarks.\n9. [Continuous integration](https://travis-ci.org/github/haskell/random).\n\n###
  Breaking Changes\n\nVersion 1.2.0 introduces these breaking changes:\n\n* requires
  `base >= 4.8` (GHC-7.10)\n* `StdGen` is no longer an instance of `Read`\n* `randomIO`
  and `randomRIO` were extracted from the `Random` class into\n  separate functions\n\nIn
  addition, there may be import clashes with new functions, e.g. `uniform` and\n`uniformR`.\n\n###
  Deprecations\n\nVersion 1.2.0 introduces `genWord64`, `genWord32` and similar methods
  to the\n`RandomGen` class. The significantly slower method `next` and its companion\n`genRange`
  are now deprecated.\n\n### Issues Addressed\n\n Issue Number | Description | Comment\n--------------|-------------|--------\n
  [25](https://github.com/haskell/random/issues/25) | The seeds generated by split
  are not independent | Fixed: changed algorithm to SplitMix, which provides a robust
  split operation\n [26](https://github.com/haskell/random/issues/26) | Add Random
  instances for tuples | Addressed: added `Uniform` instances for up to 6-tuples\n
  [44](https://github.com/haskell/random/issues/44) | Add Random instance for Natural
  | Addressed: added UniformRange instance for Natural\n [51](https://github.com/haskell/random/issues/51)
  | Very low throughput | Fixed: see benchmarks below\n [53](https://github.com/haskell/random/issues/53)
  | incorrect distribution of randomR for floating-point numbers | (\\*)\n [55](https://github.com/haskell/random/issues/55)
  | System/Random.hs:43:1: warning: [-Wtabs] | Fixed: No more tabs\n [58](https://github.com/haskell/random/issues/58)
  | Why does random for Float and Double produce exactly 24 or 53 bits? | (\\*)\n
  [59](https://github.com/haskell/random/issues/59) | read :: StdGen fails for strings
  longer than 6 | Addressed: StdGen is no longer an instance of Read\n\n#### Comments\n\n(\\*)
  1.2 samples more bits but does not sample every `Float` or\n`Double`. There are
  methods to do this but they have some downsides;\nsee [here](https://github.com/idontgetoutmuch/random/issues/105)
  for a\nfuller discussion.\n\n## Benchmarks\n\nHere are some benchmarks run on a
  3.1 GHz Intel Core i7. The full\nbenchmarks can be run using e.g. `stack bench`.
  The benchmarks are\nmeasured in milliseconds per 100,000 generations. In some cases,
  the\nperformance is over x1000 times better; the minimum performance\nincrease for
  the types listed below is more than x36.\n\n Name       | 1.1 Mean | 1.2 Mean\n------------|----------|----------\n
  Float      |   27.819 |    0.305\n Double     |   50.644 |    0.328\n Integer    |
  \  42.332 |    0.332\n Word       |   40.739 |    0.027\n Int        |   43.847
  |    0.028\n Char       |   17.009 |    0.462\n Bool       |   17.542 |    0.027\n\n#
  1.1\n  * breaking change to `randomIValInteger` to improve RNG quality and performance\n
  \   see https://github.com/haskell/random/pull/4 and\n    ghc https://ghc.haskell.org/trac/ghc/ticket/8898\n
  \ * correct documentation about generated range of Int32 sized values of type Int\n
  \   https://github.com/haskell/random/pull/7\n  * fix memory leaks by using strict
  fields and strict atomicModifyIORef'\n    https://github.com/haskell/random/pull/8\n
  \   related to ghc trac tickets  #7936 and #4218\n  * support for base < 4.6 (which
  doesnt provide strict atomicModifyIORef')\n    and integrating Travis CI support.\n
  \   https://github.com/haskell/random/pull/12\n  * fix C type in test suite https://github.com/haskell/random/pull/9\n\n#
  1.0.1.1\nbump for overflow bug fixes\n\n# 1.0.1.2\nbump for ticket 8704, build fusion\n\n#
  1.0.1.0\nbump for bug fixes,\n\n# 1.0.0.4\nbumped version for float/double range
  bugfix\n"
changelog-type: markdown
description: |
  # The Haskell Standard Library

  ## Random Number Generation

  ### MHS version
  This a fork of the `random` package to be able to compile it with MicroHs.
  The `random` package maintainers do not want to make these changes.
  The package still works with GHC.

  ### Description

  This library provides a basic interface for (splittable) pseudo-random number
  generators.

  The API documentation can be found here:

  > http://hackage.haskell.org/package/random/docs/System-Random.html

  An [older version][haskell98-version] of this library is included with GHC in
  the `haskell98` package. This newer version is included in the [Haskell
  Platform][haskell-platform].

  Please report bugs in the [GitHub issue tracker][issue-tracker] (no longer in
  the GHC trac).

  [haskell-platform]: http://www.haskell.org/platform/contents.html
  [haskell98-version]: https://downloads.haskell.org/~ghc/7.6.3/docs/html/libraries/haskell98/Random.html
  [issue-tracker]: https://github.com/haskell/random/issues
description-type: markdown
hash: bf93be6f3b855ff3ffafad96008aeb41cc1e710b0ea0ee1b4a8f83169f7a68bb
homepage: ''
latest: 1.3.2
license-name: BSD-3-Clause
maintainer: lennart@augustsson.net
synopsis: Pseudo-random number generation
test-bench-deps:
  base: '>=4.9 && <5'
  bytestring: '>=0'
  containers: '>=0.5 && <0.8'
  mtl: '>=0'
  primitive: '>=0'
  random: '>=0'
  rdtsc: '>=0'
  smallcheck: '>=1.2 && <1.3'
  split: '>=0.2 && <0.3'
  splitmix: '>=0.1 && <0.2'
  stm: '>=0'
  tasty: '>=1.0 && <1.6'
  tasty-bench: '>=0'
  tasty-hunit: '>=0.10 && <0.11'
  tasty-inspection-testing: '>=0'
  tasty-smallcheck: '>=0.8 && <0.9'
  time: '>=1.4 && <1.13'
  transformers: '>=0'
