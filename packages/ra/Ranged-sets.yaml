all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.3.0
- 0.4.0
author: Paul Johnson
basic-deps:
  HUnit: '>=0'
  QuickCheck: '>=2'
  base: '>=4.11 && <5'
changelog: |
  Version 0.0.2
  -------------

  Fixed the infinite loop with infinite sets, at least as far as possible.
  Added lots more QuickCheck properties.
  Added subset predicates.
  Added infix operators.

  Version 0.0.3
  -------------

  Removed support for infinite sets.  They sometimes still work, but generally
  are more trouble than they are worth.  There is no simple set of rules for
  client applications to guarantee termination.

  Replaced the "deriving" clause for the Range type with instance declarations.
  Empty ranges created with different bounds will now test as equal.  All
  empty ranges now compare as less than all non-empty ranges.  "show" returns
  a string such as "3.5 < x <= 4.6", or "x < 23".

  Removed "maybeRange".

  Changed "rangeIntersection" to return a "Range" instead of a "Maybe Range".
  If the intersection is empty then it returns an empty range instead of
  Nothing.

  Renamed "rangeEmpty" to "rangeIsEmpty" for consistency with "rSetIsEmpty"

  Added "emptyRange" and "fullRange"



  Version 0.0.4
  -------------

  Added Monoid instances and singleton ranges, courtesy of Jean-Philippe
  Bernardy.

  Version 0.2.0
  -------------

  Reorganised and extended tests.
  Added "rangeIsFull" predicate.

  Version 0.2.1
  -------------
  Require QuickCheck < 2.

  Version 0.3.0
  -------------
  Require QuickCheck >= 2.4. This changes the API for the Arbitrary and CoArbitrary
  instances, so it gets a version number bump.

  Version 0.4.0
  -------------

  Added Semigroup instance.
  Enabled "cabal test".
  Master repository now on GitHub.
changelog-type: text
description: "Ranged Sets for Haskell\n=======================\n\nRanged sets allow
  programming with sets of values that are described\nby a list of ranges.  A value
  is a member of the set if it lies within\none of the ranges.  The ranges in a set
  are ordered and\nnon-overlapping, so the standard set operations can be implemented
  by\nmerge algorithms in O(n) time.\n\nLicense\n-------\n\nCurrently the Ranged Set
  library is under the BSD 3 license.  This is\na very permissive license.  I am hoping
  that Ranged Sets will\neventually become part of the Base library, and at that point
  the\nimplementation will have to be issued under the same license as the\nrest of
  the library (which in practice probably means different\nlicenses for different
  compiler versions).  As I understand it the BSD\n3 license will allow this without
  me having to get either assignment\nof copyright or explicit permission from everyone
  who submits\ncontributions.\n\n\nBoundaries\n----------\n\nModule Data.Ranged.Boundaries
  defines the Boundary type.  A boundary\ndivides an ordered type into values above
  and below the boundary.  No\nvalue can ever sit on a boundary.\n\nTwo boundaries
  are equal if they divide the values at the same point.\nThis definition of equality
  causes an implementation problem because\nsome types are \"discrete\".  For instance
  there is no value between the\ncharacters 'a' and 'b', or between the integers 3
  and 4.  However\nthere are values between 3.0 and 4.0.  Similarly for strings, there\nare
  values between \"a\" and \"b\" such as \"aa\", \"ab\", and so on.  This is\nimportant
  because \"BoundaryAbove 3\" is equal to \"BoundaryBelow 4\".  3\nis below both boundaries,
  and 4 is above both.  Hence they divide the\nintegers at the same place.  But on
  the other hand \"BoundaryAbove 3.0\"\nand \"BoundaryBelow 4.0\" are not equal because
  3.5 is above the first\nand below the second.\n\nTo solve this the DiscreteOrdered
  class is defined, which provides a\nfunction \"adjacent\".  Two values x1 and x3
  are adjacent if x1 < x3 and\nthere does not exist an x2 such that x1 < x2 < x3.
  \ This provides the\ndistinction necessary for boundary equality to be defined for
  all\nordered types.  The ordered types from the prelude are instances of\nDiscreteOrdered,
  and others can be added by defining \"adjacent\".  The\nfunctions \"enumAdjacent\"
  and \"boundedAdjacent\" are provided for\ninstances of Enum and Bounded.  Lists
  and tuples of DiscreteOrdered\ntypes are also instances of DiscreteOrdered.\n\nThis
  approach was suggested by Ben Rudiak-Gould on\ncomp.lang.functional.\n\nIn theory
  the Float and Double types should be treated as enumerated\nbecause they are held
  in fixed-length data fields, and hence must have\npairs of values that are adjacent.
  \ However they are treated as\ncontinuous here for two reasons:\n\n   * The Float
  and Double types are practical approximations to Real\n     numbers, which are continuous.
  \ Hence it makes sense for Float\n     and Double to pretend to share this property.\n\n
  \  * There is no standard way to determine the adjacency of Float and\n     Double
  values in Haskell.  \"succ 3.0\" returns 4.0, which is not\n     appropriate here.\n\n\nRanges\n------\n\nModule
  Data.Ranged.Ranges defines the Range type.  A range has a lower and an\nupper Boundary.\n\nSet-like
  operations are defined on ranges, but they return variable\nnumbers of results,
  and hence return either Maybe Range or [Range].\n\n\nRangedSet\n---------\n\nModule
  Data.Ranged.RangedSet defines the RSet type.  This is the\nactual ranged set type.
  \ It is constructed from a list of ranges.\nThere are two functions to do this:\n\n
  \  * makeRangedSet takes a finite list of ranges that may overlap or be\n     out
  of order.  It sorts them and merges overlapping ranges using\n     the normaliseRangeList
  function.\n     \n   * unsafeRangedSet takes a list of ranges that must be in order
  and not\n     overlapping.  The behaviour of the resulting set is not defined if
  this\n     precondition is not met.\n     \nIn theory the standard QuickCheck generator
  for RSet could generate an\narbitrary list of ranges and then normalise them, but
  in practice this\ntends to produce a very small number of ranges because of the
  high\nprobability of overlaps.  So instead an arbitrary list of boundaries\nis generated
  and these are then sorted and paired off into\nnon-overlapping ranges.\n\n\nInfinite
  Sets\n-------------\n\nIn theory, thanks to lazy evaluation ranged sets can handle
  infinite\nlists of ranges.  These are known as \"infinite sets\".  Note that this\nis
  not the same as a set with a final upper bound of \"AboveAll\".\n\nUnfortunately
  there is no simple way to guarantee that computations on\ninfinite sets will terminate.
  \ So infinite sets are not supported.\n\nQuickCheck and Tests\n--------------------\n\nAll
  the types in the Ranged Set library are instances of Arbitrary from\nthe QuickCheck
  library, and the source code includes a number of\nimportant properties for Ranges
  and RSets defined using QuickCheck.  These \ncan be treated as a formal specification
  of the properties of these types.\n\nThe tests can be run by going into the \"tests\"
  directory and saying\n\"make all\".  A coverage report is generated, and detailed
  HTML coverage will\nbe found in \"tests/Report\".  \"make clean\" to delete all
  the generated files.\n"
description-type: text
hash: 04bb4ce482fbdc052c9ee3346ba210986b33002b8c3440b714d62750144f86b6
homepage: https://github.com/PaulJohnson/Ranged-sets
latest: 0.4.0
license-name: BSD-3-Clause
maintainer: paul@cogito.org.uk
synopsis: Ranged sets for Haskell
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=4.11 && <5'
