homepage: https://github.com/YoshikuniJujo/ranged-list#readme
changelog-type: markdown
hash: b06a509bbc257e633ed876affdef66c419658fe6cf3c2f43ce942cad8df7f01d
test-bench-deps:
  ranged-list: -any
  typecheck-plugin-nat-simple: -any
  base: '>=4.7 && <5'
  doctest: -any
maintainer: PAF01143@nifty.ne.jp
synopsis: The list like structure whose length or range of length can be specified
changelog: |
  # Changelog for ranged-list

  ## Unreleased changes
basic-deps:
  typecheck-plugin-nat-simple: -any
  base: '>=4.7 && <5'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.1
- 0.1.2.0
author: Yoshikuni Jujo
latest: 0.1.2.0
description-type: markdown
description: "# ranged-list\n\n## What's this\n\nThis package provides lists whose
  lengths are determined by the type and\nlists whose ranges of lengths are determined
  by the type.\n\n```haskell\nsample1 :: LengthL 3 Integer\nsample1 = 1 :. 2 :. 3
  :. NilL\n\nsample2 :: LengthR 3 Integer\nsample2 = NilR :+ 1 :+ 2 :+ 3\n\nsample3
  :: RangeL 2 5 Integer\nsample3 = 1 :. 2 :. 3 :.. 4 :.. NilL\n\nsample4 :: RangeR
  2 5 Integer\nsample4 = NilR :++ 1 :++ 2 :+ 3 :+ 4\n```\n\n`LengthL 3 Integer` and
  `LengthR 3 Integer` are lists who have just 3 `Integer`.\n`RangeL 2 5 Integer` and
  `RangeR 2 5 Integer` are lists whose element numbers\nare 2 at minimum and 5 at
  maximum.\n`LengthL 3 Integer` and `RangeL 2 5 Integer` are\npushed or poped a element
  from left.\n`LengthR 3 Integer` and `RangeR 2 5 Integer` are\npushed or poped a
  element from right.\n\n## Motivation\n\nSuppose you want to take elements from list.
  You can use `take` like following.\n\n```\nxs = take 3 \"Hello, world!\"\n```\n\nThe
  length of `xs` is lesser or equal `3`.\nBut you cannot use this knowledge when you
  write next code.\nYou should check the argument of a next function.\n\n```haskell\nfun
  :: [Char] -> ...\nfun [] = ...\nfun [x] = ...\nfun [x, y] = ...\nfun [x, y, z] =
  ...\nfun _ = error \"bad argument\"\n```\nIf you use `LengthL 3 Char`,\nyou don't
  need to mind the argument has more than 3 elements.\n\n```haskell\nfun :: LengthL
  3 Char -> ...\nfun (x :. y :. z :. NilL) = ...\n```\n\n## LengthL\n\n### To make
  rectangles from a number list\n\nSuppose you want to make a value which represent
  a rectangle.\nYou have a number list.\nThe numbers are a left border, a top border,
  a width and a height of\na rectangle in order.\nThe numbers of the first rectangle
  are followed by\nthe numbers of a second rectangle,\nand the numbers of the second
  rectangle are followed by\nthe numbers of a third rectangle,\nand so on.\n\n```\n[left1,
  top1, width1, height1, left2, top2, width2, height2, left3, ...]\n```\n\nThe list
  of numbers defined above are covert to a following list.\n\n```\n[Rect left1 top1
  width1 height1, Rect left2 top2 width2 height2, Rect left3 ...]\n```\n\nThe code
  is following. (View `sample/rectangle.hs`)\n\n```haskell:sample/rectangle.hs\nimport
  Data.Length.Length\n\ndata Rect = Rect {\n\tleft :: Double, top :: Double,\n\twidth
  :: Double, height :: Double } derivins Show\n\nmakeRect :: Length 4 Double -> Rect\nmakeRect
  (l :. t :. w :. h :. NilL) = Rect l t w h\n\nmain :: IO ()\nmain = print $ map makeRect
  . fst $ chunksL [3, 5, 15, 2, 8, 4, 1, 9, 3, 5]\n```\n\nThe function `chunksL` return
  a value of type `([LengthL n a], RangeL 0 (n - 1) a)`.\nThe first value of this
  tuple is a list of `n` elements of type `a`.\nAnd the second value of this tuple
  is rest elements.\nThe number of the rest elements is `0` at minimum and `n - 1`
  at maximum.\n\nTry running.\n\n```\n% stack ghc sample/rectangle.hs\n% ./sample/rectangle\n[Rect
  {left = 3.0, top = 5.0, width = 15.0, height = 2.0},\nRect {left = 8.0, top = 4.0,
  width = 1.0, height = 9.0)}\n```\n\n### To take Word64 from bit list\n\nLet's define
  function to take a 64 bit word from bit list. (View `sample/word64.hs`)\nThe language
  extensions and the import list are following.\n\n```haskell:sample/word64.hs\n{-#
  LANGUAGE LambdaCase #-}\n{-# LANGUAGE MonoLocalBinds #-}\n{-# LANGUAGE DAtaKinds,
  TypeOperators #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# OPTIONS_GHC -Wall -fno-warn-tabs
  #-}\n\nimport GHC.TypeNats\nimport Data.Foldable\nimport Data.List.Length\nimport
  Data.List.Range\nimport Data.Bits\nimport Data.Word\nimport Numeric\n```\n\nYou
  define function `takeL` to take `n` elements from list.\n\n```haskell:sample/word64.hs\ntakeL
  :: (LoosenLMax 0 (n - 1) n, Unfoldr 0 n n, ListToLengthL n) =>\n\ta -> [a] -> LengthL
  n a\ntakeL d = either ((`fillL` d) . loosenLMax) fst . splitL\n```\n\nThe function
  `splitL` split a list and get n element lengthed list (`LengthL n a`) and a rest
  of the list.\nIf the list does not contain enough elements, then it returns a left
  value. It is a list of type `RangeL 0 (n - 1) a`.\nThe function `loosenLMax` convert
  the type `RangeL 0 (n - 1)` into `RangeL 0 n`.\nAnd the function `fillL` fill the
  list with default value `d` to get a list `LengthL n a`.\nTry it.\n\n```\n% stack
  ghci sample/word64.hs\n> :set -XDataKinds\n> takeL '@' \"Hello, world!\" :: LengthL
  5 Char\n'H' :. ('e' :. ('l' :. ('l' :. ('o' :. NilL))))\n> takeL 'W' \"Hi!\" ::
  LengthL 5 Char\n'H' :. ('i' :. ('!' :. ('@' :. ('@' :. NilL))))\n```\n\nYou define
  data type which represent a bit as follow.\n\n```haskell:sample/word64.hs\ndata
  Bit = O | I deriving Show\n\nboolToBit :: Bool -> Bit\nboolToBit = \\case False
  -> O; True -> I\n\nbitToNum63 :: (Num n, Bits n) => Bit -> n\nbitToNum63 = \\case
  O -> 0; I -> 1 `shiftL` 63\n```\n\n`O` is 0 and `I` is 1.\nFunction `boolToBit`
  converts a value of `Bool` into a value of `Bit`.\nFunction `bitToNum63` converts
  a value of `Bit` into a number.\nIt converte the bit as a 63rd bit.\n\nYou define
  the function which convert a bit list into 64 bit word.\n\n```haskell:sample/word64.hs\nbitsToWord64
  :: LengthL 64 Bit -> Word64\nbitsToWord64 = foldl' (\\w b -> w `shiftR` 1 .|. bitToNum63
  b) 0\n```\n\nIt gets a bit from the left end.\nIt put the bit on a 63rd position
  of a 64 bit word.\nThen it gets a next bit.\nIt shifts 64 bit word to the right.\nAnd
  it put the bit on a 63rd position of a 64 bit word.\nIt continue in the same way.\n\nYou
  define the function which take 64 bit word from a bit list expressed\nas string.\n\n```haskell:sample/word64.hs\ntakeWord64
  :: String -> Word64\ntakeWord64 = bitsToWord64 . takeL O . (boolToBit . (== '*')
  <$>)\n```\n\nThe argument of this function is a string.\nThe string represent a
  bit sequence.\nCharacter \\'\\*\\' is 1 and character \\'.\\' is 0.\n\nYou define
  sample string and try it in function `main`.\n\n```haskell:sample/word64.hs\nsample1,
  sample2 :: String\nsample1 = \"...*..*..*...........*...**********...*************............******\"\nsample2
  = \"...*..*..*...........*..\"\n\nmain :: IO ()\nmain = do\n\tputStrLn $ takeWord64
  sample1 `showHex` \"\"\n\tputStrLn $ takeWord64 sample2 `showHex` \"\"\n```\n\nTry
  it.\n\n```\n% stack ghc sample/word64.hs\n% ./sample/word64\n8007ffc7fe200248\n200248\n```\n\n##
  LengthR\n\n### To push and pop from right\n\nA value of the type `LengthR n a` is
  a list of values of the type `a`.\nThe length of the list is `n`.\nAnd you can push
  and pop an element from right.\nTry it. (view `sample/LengthR.hs`)\n\n```haskell:sample/LengthR.hs\n{-#
  LANGUAGE DataKinds #-}\n{-# OPTIONS_GHC -Wall -fno-warn-tabs #-}\n\nmodule LengthR
  where\n\nimport Data.List.Length\n\nhello :: LengthR 5 Char\nhello = NilR :+ 'h'
  :+ 'e' :+ 'l' :+ 'l' :+ 'o'\n```\n\nThe value `hello` is a list of characters which
  length is `5`.\nLet\\'s push the character `'!'` from right.\n\n```\n% stack ghci
  sample/LengthR.hs\n> hello\n((((NilR :+ 'h') :+ 'e') :+ 'l') :+ 'l') :+ 'o'\n> hello
  :+ '!'\n(((((NilR :+ 'h') :+ 'e') :+ 'l') :+ 'l') :+ 'o') :+ '!'\n```\n\n### To
  show 4 points of rectangles\n\n#### function `fourPoints` and headers\n\nYou want
  to calculate four points of rectangle\nfrom the left-top point, width and height
  of the rectangle.\nYou define function `fourPoints`. (View `sample/fourPointsOfRect.hs`)\n\n```haskell:sample/fourPointsOfRect.hs\nfourPoints
  :: LengthR 4 Double -> LengthR 4 (Double, Double)\nfourPoints (NilR :+ l :+ t :+
  w :+ h) =\n\tNilR :+ (l, t) :+ (l + w, t) :+ (l, t + h) :+ (l + w, t + h)\n```\n\nYou
  add language extensions and modules to import.\n\n```haskell:sample/fourPointsOfRect.hs\n{-#
  LANGUAGE BlockArguments, LambdaCase #-}\n{-# LANGUAGE ScopedTypeVariables, TypeApplications
  #-}\n{-# LANGUAGE DataKinds, TypeOperators #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE
  MultiParamTypeClasses, FlexibleContexts, FlexibleInstances,\n\tUndecidableInstances
  #-}\n{-# OPTIONS_GHC -Wall -fno-warn-tabs -fplugin=Plugin.TypeCheck.Nat.Simple #-}\n\nimport
  GHC.TypeNats\nimport Control.Monad.Fix\nimport Control.Monad.Catch\nimport Data.List.Length\nimport
  Text.Read\n```\n\nTry it.\n\n```\n% stack ghci sample/fourPointsOfRect.hs\n> fourPoints
  $ NilR :+ 300 :+ 200 :+ 50 :+ 30\n(((NilR :+ (300.0,200.0)) :+ (350.0,200.0)) :+
  (300.0,230.0)) :+ (350.0,230.0)\n```\n\n#### to input values interactively\n\nYou
  want to input values of a left bound, a top bound, a width and a height\ninteractively.\nYou
  want to delete the last value and reinput a new value.\nFirst of all, you define
  two data type,\n`DeleteOr a` and `NothingToDeleteException`.\n\n```haskell:sample/fourPointsOfRect.hs\ndata
  DeleteOr a = Delete | Value a deriving Show\ndata NothingToDeleteException = NothingToDeleteException
  deriving Show\ninstance Exception NothingToDeleteException\n```\n\nAnd you define
  the function `getElems` as a class function.\n\n```haskell:sample/fourPointsOfRect.hs\nclass
  GetElems n v where\n\tgetElems :: MonadThrow m =>\n\t\tLengthR n a -> m (Maybe (DeleteOr
  a)) -> m (LengthR (n + v) a)\n\ninstance GetElems 0 0 where getElems NilR _ = pure
  NilR\n\ninstance {-# OVERLAPPABLE #-} 1 <= n => GetElems n 0 where\n\tgetElems xs@(_
  :+ _) _ = pure xs\n\ninstance {-# OVERLAPPABLE #-} GetElems 1 (v - 1) => GetElems
  0 v where\n\tgetElems NilR gt = gt >>= \\case\n\t\tNothing -> getElems NilR gt\n\t\tJust
  Delete -> throwM NothingToDeleteException\n\t\tJust (Value x) -> getElem @1 @(v
  - 1) (NilR :+ x) gt\n\ninstance {-# OVERLAPPABLE #-}\n\t(1 <= n, GetElems (n - 1)
  (v + 1), GetElems (n + 1) (v - 1)) =>\n\tGetElems n v where\n\tgetElems xa@(xs :+
  _) gt = gt >>= \\case\n\t\tNothing -> getElems xa gt\n\t\tJust Delete -> getElems
  @(n - 1) @(v + 1) xs gt\n\t\tJust (Value x) -> getElems @(n + 1) @(v - 1) (xa :+
  x) gt\n```\n\n##### class GetElems n v\n\nThe class function `getElems` has two
  arguments.\nThe first argument is a list of values which are already inputed.\nThe
  second argument is a monad which returns 3 kinds of values,\na value which represents
  to delete, a new value to push to the list\nor a value which represents to do nothing.\n\n#####
  instance GetElems 0 0\n\n`n == 0` and `v == 0` means that the function `getElems`
  get\n a list of no elements and return a list of no elements.\n\n##### instance
  GetElems n 0\n\n`v == 0` means that the function `getElems` get a list and\nreturn
  the list as it is.\n\n##### instance GetElems 0 v\n\n`n == 0` means that there are
  no already inputed elements.\nThe monad returns 3 kind of values.\nIf it returns
  `Nothing`, then it rerun the whole as `getElems NilR gt`.\nIf it returns `Just Delete`,
  then `NothingToDeleteException` occurs.\nIf it returns `Just (Value x)`,\nthen it
  set the already-inputed elements to `NilR :+ x` and rerun the whole.\n\n##### instance
  GetElems n v\n\nThe monad `gt` returns 3 kind of values.\nIf it returns `Nothing`,
  then rerun the whole as `getElems xa gt`.\nIf it returns `Just Delete`,\nthen it
  remove an element from the already-inputed list\nand rerun the whole.\nIf it returns
  `Just (Value x)`,\nthen it set the already-inputed elements to `xa :+ x` and rerun
  the whole.\n\n##### to try it\n\nTry it.\n\n```\n% stack ghci sample/fourPointsOfRect.hs\n>
  :set -XDataKinds -XBlockArguments -XLambdaCase\n> getElems NilR (Just . Value <$>
  getLine) :: IO (LengthR 3 String)\nfoo\nbar\nbaz\n((NilR :+ \"foo\") :+ \"bar\")
  :+ \"baz\"\n> gt = (<$> getLine) \\case \"\" -> Nothing; \"d' -> Just Delete; s
  -> Just (Value s)\n> getElems NilR gt :: IO (LengthR 3 String)\nfoo\nbar\nd\nboo\n\nbaz\n((NilR
  :+ \"foo\") :+ \"boo\") :+ \"baz\"\n> getElems NilR gt :: IO (LengthR 3 String)\nfoo\nbar\nd\nd\nhoge\npiyo\nbaz\n((NilR
  :+ \"hoge\") :+ \"piyo\") :+ \"baz\"\n> getElems NilR gt :: IO (LengthR 3 String)\nfoo\nbar\nd\nd\nd\n***
  Exception: NothingToDeleteException\n```\n\n### function `titles`\n\nYou define
  the function `titles` which show values as string with title.\n\n```haskell:sample/fourPointsOfRect.hs\ntitles
  :: (Show a, Applicative (LengthR n)) =>\n\tInt -> LengthR n String -> LengthR n
  a -> LengthR n String\ntitles n ts xs = (\\t x -> t ++ replicate (n - length t)
  ' ' ++ \": \" ++ show x)\n\t<$> ts <*> xs\n```\n\nTry it.\n\n```\n% stack ghci sample/fourPointsOfRect.hs\n>
  titles 5 (NilR :+ \"foo\" :+ \"bar\" :+ \"baz\") (NilR :+ 123 :+ 456 :+ 789)\n((NilR
  :+ \"foo  : 123\") :+ \"bar  : 456\") :+ \"baz  : 789\"\n```\n\n### function `printResult`\n\nYou
  define the function `printResult` which show values expressing a rectangle\nand
  4 points of rectangle.\n\n```haskell:sample/fourPointsOfRect.hs\nprintResult ::
  LengthR 4 Double -> IO ()\nprintResult r = do\n\tputStrLn \"\"\n\tputStrLn `mapM_`
  titles 6 t r; putStrLn \"\"\n\tputStrLn `mapM_` titles 12 u (fourPoints r); putStrLn
  \"\"\n\twhere\n\tt = NilR :+ \"left :+ \"top\" :+ \"width\" :+ \"height\"\n\tu =
  NIlR :+ \"left-top\" :+ \"right-top\" :+ \"left-bottom\" :+ \"right-bottom\"\n```\n\nTry
  it.\n\n```\n% stack ghci sample/fourPointsOfRect.hs\n> printResult $ NilR :+ 300
  :+ 200 :+ 70 :+ 50\n\nleft  : 300.0\ntop   : 200.0\nwidth : 70.0\nheight: 50.0\n\nleft-top
  \   : (300.0,200.0)\nright-top   : (370.0,200.0)\nleft-bottom : (300.0,250.0)\nright-bottom:
  (370.0,250.0)\n```\n\n### function `getRect`\n\nYou define the function `getRect`
  which gets user input to make rectangle.\n\n```haskell:sample/fourPointsOfRect.hs\ngetRect
  :: forall n . GetElems n (4 - n) =>\n\tLengthR n Double -> IO (LengthR 4 Double)\ngetRect
  xs = (<$) <$> id <*> printRect =<<\n\tgetElems @n @(4 - n) xs ((<$> getLine) \\case\n\t\t\"d\"
  -> Just Delete; l -> Value <*> readMaybe l)\n\t`catch`\n\t\\(_ :: NothingToDeleteException)
  ->\n\t\tputStrLn *** Nothing to delete.\" >> getRect @0 NilR\n```\n\nIt gets a user
  input with `getLine`.\nIf it is `\"d\"`, then it deletes the last input.\nIf there
  are nothing to delete, then `NothingToDeleteException` occur.\nIt catches this exception
  and shows error message and rerun `getRect`.\n\n### function `main`\n\nYou define
  function `main`.\n\n```haskell:sample/fourPointsOfRect.hs\nmain :: IO ()\nmain =
  getRect NilR >>= fix \\go xa@(xs :+ _) -> getLine >>= \\case\n\t\"q\" -> pure ()\n\t\"d\"
  -> go =<< getRect xs\n\t_ -> putStrLn \"q or d\" >> go xa\n```\n\nIt call function
  `getRect` with list of `0` elements (`NilR`).\nAnd it repeats function `getRect`
  with list of `4 - 1` elements (`xs`)\nif you input `\"d\"`.\n\n```\n% stack ghc
  sample/fourPointsOfRect.hs\n% ./sample/fourPointsOfRect\n500\n300\n75\n50\n\nleft
  \ : 500.0\ntop   : 300.0\nwidth : 75.0\nheight: 50.0\n\nleft-top    : (500.0,300.0)\nright-top
  \  : (575.0,300.0)\nleft-bottom : (500.0,350.0)\nright-bottom: (575.0,350.0)\n\nd\nd\n125\n100\n\nleft
  \ : 500.0\ntop   : 300.0\nwidth : 125.0\nheight: 100.0\n\nleft-top    : (500.0,300.0)\nright-top
  \  : (625.0,300.0)\nleft-bottom : (500.0,400.0)\nright-bottom: (625.0,400.0)\n\nd\nd\nd\nd\nd\n***
  Nothing to delete.\n2000\n1500\n90\n50\n\nleft  : 2000.0\ntop   : 1500.0\nwidth
  : 90.0\nheight: 50.0\n\nleft-top    : (2000.0,1500.0)\nright-top   : (2090.0,1500.0)\nleft-bottom
  : (2000.0,1550.0)\nright-bottom: (2090.0,1550.0)\n\nq\n```\n\n## RangeL and RangeR\n\n###
  To specify the range of a number of elements of a list\n\nYou can specify the range
  of a number of elements of a list.\nThere is a data type `RangeL n m a`.\nIt represents
  a list which have a type `a` element.\nAnd its length is `n` at minimum and `m`
  at maximum.\n\n```\n% stack ghci\n> :module Data.List.Range\n> :set -XDataKinds\n>
  'h' :. 'e' :. 'l' :. 'l' :.. 'o' :.. NilL :: RangeL 3 8 Char\n'h' :. ('e' :. ('l'
  :. ('l' :.. ('o' :.. NilL))))\n```\n\n### To get passwords\n\nSuppose you want to
  get a password\nwhose length is 8 at minimum and 127 at maximum.\nFirst of all,
  you define headers.\n\n```haskell:sample/password.hs\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# OPTIONS_GHC
  -Wall -fno-warn-tabs #-}\n\nimport Data.List.Range\nimport System.IO\n\nimport qualified
  Data.ByteString.Char8 as BSC\n```\n\nYou define `type Password`.\n\n```haskell:sample/password.hs\ntype
  Password = RangeL 8 127 Char\n```\n\nIt is a list of `Char`.\nIts length is 8 at
  minimum and 127 at maximum.\n\nYou define a function `getRangedString`.\nIt recieves
  a user input.\nIt return a just value if the length of the input is within range.\nIt
  return a nothing value if the length of the input is out of range.\n\n```haskell:sample/password.hs\ngetRangedPassword
  :: Unfoldr 0 n m => IO (Maybe (RangeL n m Char))\ngetRangedPassword = do\n\te <-
  hGetEcho stdin\n\thSetEcho stdin False\n\tunfoldrMRangeMaybe ((/= '\\n') <$> hLookAhead
  stdin) getChar\n\t\t<* hSetEcho stdin e\n```\n\nIt makes echo of stdin off.\nIt
  gets characters until you input `'\\n'`.\nAnd it makes echo of stdin on.\n\n```\n%
  stack ghci sample/password.hs\n> :set -XDataKinds\n> getRangedPassword :: IO (Maybe
  Password)\n(Input \"foobarbaz\")\nJust ('f' :. ('o' :. ('o' :. ('b' :. ('a' :. ('r'
  :. ('b' :. ('a' :. ('z' :..NilL)))))))))\n> getRangedPassword :: IO (Maybe Password)\n(Input
  \"foo\")\nNothing\n> getRangedPassword :: IO (Maybe (RangeL 2 5 Char))\n(Input \"foobar\")\nNothing\n>
  r\n```\n\nYou want to convert a value of type `Password` into a value of `ByteString`.\nYou
  can use other packages if you get password as a value of `ByteString`.\n\n```haskell:sample/password.hs\npasswordToByteString
  :: Password -> BSC.ByteString\npasswordToByteString = foldr BSC.cons \"\"\n```\n\nYou
  define function `main` to try it.\n\n```haskell:sample/password.hs\nmain :: IO ()\nmain
  = do\n\tp <- getRangedPassword\n\tprint p\n\tmaybe (eror \"bad password length\")
  BSC.putStrLn $ passwordToByteString <$> p\n```\n\nTry it.\n\n```\n% stack ghc sample/password.hs\n%
  ./sample/password\n(Input \"foobarbaz\")\nJust ('f' :. ('o' :. ('o' :. ('b' :. ('a'
  :. ('r' :. ('b' :. ('a' :. ('z' :.. NilL)))))))))\nfoobarbaz\n```\n\n### Finger
  Tree\n\nThe next example is Finger Tree.\n\n[Finger Trees: A Simple General-purpose
  Data Structure](https://www.staff.city.ac.uk/~ross/papers/FingerTree.html)\n\n####
  Language Extension and Import List\n\nLet's make headers.\n\n```haskell:sample/fingertree.hs\n{-#
  LANGUAGE ScopedTypeVariables, TypeApplications, InstanceSigs #-}\n{-# LANGUAGE DataKinds,
  TypeOperators #-}You\n{-# LANGUAGE MultiParamTypeClasses, FlexibleContexts, FlexibleInstances,\n\tUndecidableInstances
  #-}\n{-# OPTIONS_GHC -Wall -fno-warn-tabs -fplugin=Plugin.TypeCheck.Nat.Simple #-}\n\nimport
  GHC.TypeNats\nimport Data.List.Range\n```\n\n#### Types\n\nYou can describe Finger
  Tree as follows.\n\n```haskell:sample/fingertree.hs\ndata FingerTree a\n\t= Enpty
  | Single a\n\t| Deep (DigitL a) (FingerTree (Node a)) (DigitR a)\n\tderiving Show\n\ntype
  Node = RangeL 2 3\ntype DigitL = RangeL 1 4\ntype DigitR = RangeR 1 4\n```\n\nA
  list of type `Node a` contains two or three elements of type `a`.\nA list of type
  `DigitL a` contains one elements at minimum and\nfour elements at maximum.\nA list
  of type `DigitR a` contains the same number of elements as `DigitL a`.\nBut you
  can push and pop a element from right.\n\n#### To push from left\n\nYou define the
  function which Add a new element to the left of the sequence.\nFirst of all you
  define the function to push an element to a list of type `DigitL a`.\n\n```haskell:sample/fingertree.hs\ninfixr
  5 <||\n\n(<||) :: a -> DigitL a -> Either (DigitL a) (DigitL a, Node a)\na <|| b
  :. NilL = Left $ a :. b :.. NilL\na <|| b :. c :.. NilL = Left $ a :. b :.. c :..
  NilL\na <|| b :. c :.. d :.. NilL = Left $ a :. b :.. c :.. d :.. NilL\na <|| b
  :. c :.. d :.. e :.. NilL =\n\tRight (a :. b :.. NilL, c :. d :. e :.. NilL)\n```\n\nIf
  the original list has fewer elements than four,\nthen it return a left value list
  which contains the added value.\nIf the original list has just four elements,\nthen
  it returns a right value tuple which contain the value of type `DigitL a`\nand the
  value of type `Node a`.\n\nYou can define the function which add a new element to
  the left of the sequence.\n\n```haskell:sample/fingertree.hs\ninfixr 5 <|\n\n(<|)
  :: a -> FingerTree a -> FingerTree a\na <| Empty = Single a\na <| Single a = Deep
  (a :. NilL) Empty (NilR :+ b)\na <| Deep pr m sf = case a <|| pr of\n\tLeft pr'
  -> Deep pr' m sf\n\tRight (pr', n3) -> Deep pr' (n3 <| m) sf\n```\n\nIt pushes three
  of the elements as a `Node`, leaving two behind.\n\nYou also require the liftings
  of `<|`.\n\n```haskell:sample/fingertree.hs\ninfixr 5 <|.\n\n(<|.) :: Foldable t
  => t a -> FingerTree a -> FingerTree a\n(<|.) = flip $ foldr (<|)\n```\n\nTo make
  finger tree from a list or other foldable structure,\nyou define a function `toTree`.\n\n```haskell:sample/fingertree.hs\ntoTree
  :: Foldable t => t a -> FingerTree a\ntoTree = (<|. Empty)\n```\n\n#### To push
  from right\n\nAdding to the right end of the sequence is the mirror image of the
  above.\n\n```haskell:sample/fingertree.hs\ninfixl 5 ||>, |>, |>.\n\n(||>) :: DigitR
  a -> a -> Either (DigitR a) (Node a, DigitR a)\nNilR :+ a ||> b = Left $ NilR :++
  a :+ b\nNilR :++ a :+ b ||> c = Left $ NilR :++ a :++ b :+ c\nNIlR :++ a :++ b :+
  c ||> d = Left $ NilR :++ a :++ b :++ c :+ d\nNilR :++ a :++ b :++ c :+ d ||> e
  =\n\tRight (a :. b :. c :.. NilL, NilR :++ d :+ e)\n\n(|>) :: FingerTree a -> a
  -> FingerTree a\nEmpty |> a = Single a\nSingle a |> b = Deep (a :. NilL) Empty (NilR
  :+ b)\nDeep pr m sf |> a = case sf ||> a of\n\tLeft sf' -> Deep pr m sf'\n\tRight
  (n3, sf') -> Deep pr (m |> n3) sf'\n\n(|>.) :: Foldable t => FingerTree a -> t a
  -> FingerTree a\n(|>.) = foldl (|>)\n```\n\n#### To pop from left\n\nTo deconstruct
  a sequence, you define a function `uncons`.\n\n```haskell:sample/fingertree.hs\nuncons
  :: FingerTree a -> Maybe (a, FingerTree a)\nuncons Empty = Nothing\nuncons (Single
  x) = Just (x, Empty)\nuncons (Deep (a :. pr') m sf) = Just (a, deepL pr' m sf)\n\ndeepL
  :: RangeL 0 3 a -> FingerTree (Node a) -> DigitR a -> FingerTree a\ndeepL NilL m
  sf = case uncons m of\n\tNothing -> toTree sf\n\tJust (n, m') -> Deep (loosenL n)
  m' sf\ndeepL (a :.. pr) m sf = Deep (loosenL $ a :. pr) m sf\n```\n\nSince the prefix
  `pr` of a `Deep` tree contains at least one element,\nyou can get its head.\nHowever,
  the tail of the prefix may be empty,\nand thus unsuitable as a first argument to
  the Deep constructor.\nHence you define a smart constructor that differs from `Deep`
  by allowing the\nprefix to contain zero to three elements,\nand in the empty case
  uses a `uncons` of the middle tree to construct a tree of\nthe correct shape.\n\n####
  Concatenation\n\nFirst of all you define a function which devide a list into a list
  of `Node`.\nThe original list has 3 elements at minimum and 12 elements at maximum.\nThe
  returned list has 1 node at minimum and 4 nodes at maximum.\nThe function has a
  type like the following.\n\n```haskell\nfun :: RangeL 3 12 a -> RangeL 1 4 (Node
  a)\n```\n\nYou can define a more general function like the following.\n\n```haskell\nfun
  :: RangeL 3 m a -> RangeL 1 w (Node a)\n```\n\n`m` is 3 times `w`.\n\nYou define
  a class.\n\n```haskell:sample/fingertree.hs\nclass Nodes m w where nodes :: RangeL
  3 m a -> RangeL 1 w (Node a)\n```\n\nAnd you define instance when `m` is 3 and `w`
  is 1.\n\n```haskell:sample/fingertree.hs\ninstance Nodes 3 1 where nodes = (:. NilL)
  . loosenL\t\n```\n\nAnd you define instance of general case.\n\n```haskell:sample/fingertree.hs\ninstance
  {-# OVERLAPPABLE #-} (2 <= w, Nodes (m - 3) (w - 1)) => Nodes m w where\n\tnodes
  :: forall a . RangeL 3 m a -> RangeL 1 w (Node a)\n\tnodes (a :. b :. c :. NilL)
  = (a :. b :. c :.. NilL) :. NilL\n\tnodes (a :. b :. c :. d :.. NilL) =\n\t\t(a
  :. b :. NilL) :. (c :. d :. NilL) :.. NilL\n\tnodes (a :. b :. c :. d :.. e :..
  NilL) =\n\t\t(a :. b :. c :.. NilL) :. (d :. e :. NilL) :.. NilL\n\tnodes (a :.
  b :. c :. d :.. e :.. f :.. xs) =\n\t\t(a :. b :. c :.. NilL) .:..\n\t\t\tnodes
  @(m - 3) @(w - 1) (d :. e :. f :. xs)\n```\n\nTry it.\n\n```\n% stack ghci sample/fingertree.hs\n>
  :set -XTypeApplications -XDataKinds\n> xs = 1 :. 2 :. 3 :. 4 :.. 5 :.. 6 :.. 7 :..
  8 :.. NilL :: RangeL 3 12 Integer\n> nodes @12 @4 xs\n(1 :. (2 :. (3 :.. NilL)))
  :. ((4 :. (5 :. (6 :.. NilL))) :.. ((7 :. (8 :. NilL)) :.. NilL))\n> :type it\nit
  :: Num a => RangeL 1 4 (Node a)\n```\n\nYou can combine the two digit argument into
  a list of Nodes\nwith the function `nodes`.\nYou can obtain a recursive function
  by\ngeneralizing the concatenation function to take an additional list of elements.\n\n```haskell:sample/fingertree.hs\napp3
  :: FingerTree a -> RangeL 1 4 a -> FingerTree a -> FingerTree a\napp3 Empty m xs
  = m <|. xs\napp3 xs m Empty = xs |>. m\napp3 (Single x) m xs = x <| m <|. xs\napp3
  xs m (Single x) = xs |>. m |> x\napp3 (Deep pr1 m1 sf1) m (Deep pr2 m2 sf2) =\n\tDeep
  pr1 (app3 m1 (nodes $ sf1 ++.. m ++. pr2) m2) sf2\n```\n\nTo concatenate two finger
  trees, you take a head element from a second sequence.\n\n```haskell:sample/fingertree.hs\n(><)
  :: FingerTree a -> FingerTree a -> FingerTree a\nl >< r = case uncons r of Nothing
  -> l; Just (x, r') -> app3 l (x :. NilL) r'\n```\n"
license-name: BSD-3-Clause
