homepage: https://sr.ht/~brendanrbrown/random-cycle
changelog-type: markdown
hash: 14fa00f5bcdd4b513df54f0e0ccb5cb3c5fdd77692396b2678e81118172d6f76
test-bench-deps:
  base: '>=4.16.3.0 && <4.17'
  criterion: -any
  random-cycle: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  vector-algorithms: -any
  random: -any
  tasty: -any
  algebraic-graphs: -any
  vector: -any
maintainer: brendanrbrown@runbox.com
synopsis: Uniform draws of partitions and cycle-partitions, with thinning.
changelog: |
  # Revision history for random-cycle

  ## 0.1.2.0 -- 2023-11-19

  * Fixes a bug in 'uniformCyclePartitionThin'.

  ## 0.1.1.0 -- 2023-05-07

  * Adds Sattolo's algorithm to sample full cycles.
  * Documentation fixes.

  ## 0.1.0.1 -- 2023-04-18

  * Documentation fixes and base package bounds loosened.

  ## 0.1.0.0 -- 2023-04-17

  * First version. Released on an unsuspecting world.
basic-deps:
  mwc-random: -any
  base: '>=4.14.3.0 && <4.18.0.0'
  random: -any
  primitive: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
author: Brendan Brown
latest: 0.1.2.0
description-type: markdown
description: "\n[![builds.sr.ht status](https://builds.sr.ht/~brendanrbrown/random-cycle/.svg)](https://builds.sr.ht/~brendanrbrown/random-cycle/?)\n\n##
  Summary\nA Haskell library for efficient uniform random sampling of cycle partition\ngraphs
  on sets of vertices, and partitions of lists or vectors. Selection can\nbe subject
  to conditions.\n\n## Cycle partitions\nA cycle partition graph on a set of vertices
  V is a directed graph G = (E,\nV) such that for each i in V there exists a unique
  j in V such that (i,\nj) in E. In other words, it is a partition of V into a graph
  with disjoint\n[cycle graphs](https://en.wikipedia.org/wiki/Cycle_graph).\n\nDefine
  C(V) to be the set of cycle partitions graphs of V.\n`uniformCyclePartition` samples
  from the uniform distribution on C(V), in\nO(|V|) time.\n\nTo do so, it relies on
  the fact that \n\nσ -> (i, σ(i))  , for i = 1..|V|\n\ndefines a bijective map between
  the permutations σ  on |V| distinct elements\nand the edge sets of C(V). Therefore,
  sampling a uniform cycle partition\nwithout conditions is as simple as sampling
  a uniform permutation.\n\nNote self-loops are allowed in the possible configurations.\n\n`uniformCyclePartitionThin`
  samples uniformly from the set of cycle partition\ngraphs satisfying a predicate,
  in O(n/p) time on average, where p is the\nproportion of cycle partition graphs
  satisfying the predicate. It works by\nrejection sampling, so the user is asked
  to provide a maximum number of\nsampling attempts to guarantee termination.\n\n##
  List or vector partitions\nThis package provides functions to draw uniform samples
  from all 2^(n-1)\npossible partitions of an ordered list (or vector). `uniformPartition`
  selects\na single element uniformly across all possible partitions in O(n) time,
  and\n`uniformPartitionThin` samples uniformly conditional on a predicate in O(n/p)\ntime
  on average, where `p` is the proportion of elements for which the\npredicate is
  `True`.\n\nOnly the partitioning is randomized: Input list order is preserved.\n\nThe
  samplers randomize the placement of each breakpoint in the partition. In\nother
  words the sample space is viewed as a perfect binary tree, and random\nselection
  is a random walk from root to leaf. The implementation samples a bit\narray to determine
  the walk path instead of creating an actual tree structure,\nfor efficiency.\n\nAt
  the moment, the `uniformPartitionThin` is implemented only for lists.\n\n### Short-circuiting\nThe
  predicate provided to `uniformPartitionThin` checks each partition element,\na chunk
  of elements in the original list, in turn. Since partitions are built\nlazily, the
  sampler will short-circuit and start sampling a new partition after\nthe first partition
  element for which the predicate is `False`. This is just a\nconsequence of the short-circuiting
  in `base` package function `all`.\n\nSimilarly, if the predicate itself is short-circuiting,
  the sampler will\nshort-circuit.\n\n## Contributing\n\n### Tickets\n\nSend by email,
  without need for an account, to ~brendanrbrown/random-cycle@todo.sr.ht\n\n[Man pages](https://man.sr.ht/todo.sr.ht/)
  for tickets on SourceHut,\nparticularly the \"Email access\" section.\n\n### Patches\n<!--TODO:
  link to git send-email and imap resources-->\n\nMan pages for [sending patches upstream](https://man.sr.ht/git.sr.ht/#sending-patches-upstream).\n"
license-name: GPL-3.0-or-later
