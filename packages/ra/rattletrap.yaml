all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.2.0
- 0.3.0
- 0.4.0
- 0.4.1
- 1.0.0
- 2.0.0
- 2.1.0
- 2.1.1
- 2.1.2
- 2.1.3
- 2.1.4
- 2.1.5
- 2.2.0
- 2.2.1
- 2.2.2
- 2.2.3
- 2.2.4
- 2.3.0
- 2.3.1
- 2.4.0
- 2.5.0
- 2.5.1
- 2.5.2
- 3.0.0
- 3.1.0
- 3.1.1
- 3.1.2
- 4.0.0
- 4.0.1
- 4.0.2
- 4.0.3
- 4.0.4
- 4.0.5
- 4.0.6
- 4.0.7
- 4.0.8
- 4.0.9
- 4.1.0
- 4.1.1
- 4.1.2
- 5.0.0
- 5.0.1
- 6.0.0
- 6.0.1
- 6.0.2
- 6.1.0
- 6.2.0
- 6.2.1
- 6.2.2
- 6.2.3
- 6.3.0
- 6.3.1
- 6.3.2
- 6.4.0
- 7.0.0
- 7.0.1
- 7.0.2
- 7.0.3
- 8.0.0
- 9.0.0
- 9.0.1
- 9.0.2
- 9.0.3
- 9.0.4
- 9.0.5
- 9.0.6
- 9.0.7
- 9.0.8
- 9.0.9
- 9.0.10
- 9.1.0
- 9.1.1
- 9.1.2
- 9.1.3
- 9.1.4
- 9.2.0
- 9.3.0
- 9.3.1
- 9.3.2
- 9.3.3
- 9.4.0
- 9.4.1
- 10.0.0
- 10.0.6
- 10.0.7
- 11.0.0
- 11.0.1
- 11.1.0
- 11.1.1
- 11.2.0
- 11.2.1
- 11.2.3
- 11.2.4
- 11.2.5
- 11.2.6
- 11.2.7
- 11.2.8
- 11.2.9
- 11.2.10
- 11.2.11
- 11.2.12
- 11.2.13
- 11.2.14
- 12.0.0
- 12.0.1
- 12.0.2
- 12.0.3
- 12.1.0
- 12.1.1
- 12.1.2
- 12.1.3
- 13.0.1
- 13.0.2
- 13.0.3
- 13.1.0
author: ''
basic-deps:
  aeson: ^>=2.1.2.1 || ^>=2.2.2.0
  aeson-pretty: ^>=0.8.10
  array: ^>=0.5.5.0
  base: '>=4.18.0.0 && <4.19 || >=4.19.0.0 && <4.20 || >=4.20.0.0 && <4.21'
  bytestring: ^>=0.11.4.0 || ^>=0.12.0.2
  containers: ^>=0.6.7 || ^>=0.7
  filepath: ^>=1.4.100.1 || ^>=1.5.2.0
  http-client: ^>=0.7.17
  http-client-tls: ^>=0.3.6.3
  rattletrap: '>=0'
  text: ^>=2.0.2 || ^>=2.1
changelog: |
  # Change log

  Rattletrap uses [Semantic Versioning][].
  The change log is available through the [releases on GitHub][].

  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html
  [releases on GitHub]: https://github.com/tfausak/rattletrap/releases
changelog-type: markdown
description: |
  # [Rattletrap](https://github.com/tfausak/rattletrap)

  [![CI](https://github.com/tfausak/rattletrap/actions/workflows/ci.yml/badge.svg)](https://github.com/tfausak/rattletrap/actions/workflows/ci.yml)
  [![Hackage](https://badgen.net/hackage/v/rattletrap)](https://hackage.haskell.org/package/rattletrap)

  Rattletrap parses and generates [Rocket League][] replays. Parsing replays can
  be used to analyze data in order to collect high-level statistics like players
  and points, or low-level details like positions and cameras. Generating replays
  can be used to modify replays in order to force everyone into the same car or
  change the map a game was played on.

  Rattletrap supports every version of Rocket League up to [2.43][], which was
  released on 2024-04-16. If a replay can be played by the Rocket League client,
  it can be parsed by Rattletrap. (If not, that's a bug. Please report it!)

  ## Install

  Rattletrap is a command-line application. You should only use it if you're
  comfortable running things in terminals or command prompts. Otherwise consider
  using another tool like [Ball Chasing][].

  The best way to get Rattletrap is by downloading [the latest release][] for
  your platform.

  Rattletrap is written in [Haskell][]. If you'd like to use a program written in
  a different language, consider one of the following:

  - <https://github.com/jjbott/RocketLeagueReplayParser> (C#)
  - <https://github.com/nickbabcock/rrrocket> (Rust)
  - <https://github.com/Bakkes/CPPRP> (C++)

  ## Replays

  Rocket League saves your replays in a folder that depends on your operating
  system.

  - Windows:
    - `%UserProfile%/Documents/My Games/Rocket League/TAGame/Demos`
    - For example: `C:/Users/Taylor/Documents/My Games/Rocket League/TAGame/Demos`
  - macOS:
    - `$HOME/Library/Application Support/Rocket League/TAGame/Demos`
    - For example: `/Users/taylor/Library/Application Support/Rocket League/TAGame/Demos`
  - Linux:
    - `$HOME/.local/share/Rocket League/TAGame/Demos`
    - For example: `/home/taylor/.local/share/Rocket League/TAGame/Demos`

  ## Interface

  Rattletrap is a command line application.

  ``` sh
  $ rattletrap --help
  ```

  ```
  rattletrap version 12.0.0
    -c           --compact         minify JSON output
    -f           --fast            only encode or decode the header
    -h           --help            show the help
    -i FILE|URL  --input=FILE|URL  input file or URL
    -m MODE      --mode=MODE       decode or encode
    -o FILE      --output=FILE     output file
                 --schema          output the schema
                 --skip-crc        skip the CRC
    -v           --version         show the version
  ```

  By default Rattletrap will try to determine the appropriate mode (either decode
  or encode) based on the file extensions of the input or output. You can
  override this behavior by passing `--mode` (or `-m`) with either `decode` or
  `encode`.

  Input extension | Output extension | Mode
  ---             | ---              | ---
  `.replay`       | anything         | `decode` (parse)
  `.json`         | anything         | `encode` (generate)
  anything        | `.replay`        | `encode` (generate)
  anything        | `.json`          | `decode` (parse)
  anything        | anything         | `decode` (parse)

  ## Parse

  Rattletrap can parse (decode) Rocket League replays and output them as JSON.

  ``` sh
  $ rattletrap --input http://example.com/input.replay --output output.json
  # or
  $ rattletrap -i input.replay -o output.json
  # or
  $ rattletrap < input.replay > output.json
  ```

  The input argument can either be a local path or a URL.

  By default the JSON is pretty-printed. To minify the JSON, pass `--compact` (or
  `-c`) to Rattletrap. Even when the JSON is minified, it's extremely large. The
  output can be up to 100 times larger than the input. For example, a 1.5 MB
  replay turns into 31 MB of minified JSON or 159 MB of pretty-printed JSON.

  ## Generate

  Rattletrap can also generate (encode) Rocket League replays from JSON files.

  ``` sh
  $ rattletrap --input http://example.com/input.json --output output.replay
  # or
  $ rattletrap -i input.json -o output.replay
  # or
  $ rattletrap --mode encode < input.json > output.replay
  ```

  The input argument can either be a local path or a URL.

  If the JSON was generated by Rattletrap, the output replay will be bit-for-bit
  identical to the input replay.

  ## Modify

  By inserting another program between parsing and generating, Rattletrap can be
  used to modify replays.

  ``` sh
  $ rattletrap -i input.replay |
    modify-replay-json |
    rattletrap -o output.replay
  ```

  [Rattletrap]: https://github.com/tfausak/rattletrap
  [Rocket League]: https://www.rocketleague.com
  [2.43]: https://www.rocketleague.com/en/news/patch-notes-v2-43
  [Ball Chasing]: https://ballchasing.com
  [the latest release]: https://github.com/tfausak/rattletrap/releases/latest
description-type: markdown
hash: 0263cdffbacbbd904a81d98281b5274a47019e281b1acd1d5fa549fa3cc21986
homepage: ''
latest: 13.1.0
license-name: MIT
maintainer: Taylor Fausak
synopsis: Parse and generate Rocket League replays.
test-bench-deps:
  base: ^>=4.18.0.0 || ^>=4.19.0.0 || ^>=4.20.0.0
  bytestring: '>=0'
  filepath: '>=0'
  rattletrap: '>=0'
