all-versions:
- 0.1.0.0
- 0.2.0.0
author: Owen Bechtel
basic-deps:
  Color: '>=0.4.0 && <0.5'
  base: '>=4.17.2.1 && <5'
  linear: '>=1.23.2 && <1.24'
  massiv: '>=1.0.5 && <1.1'
  massiv-io: '>=1.0.0 && <1.1'
  mtl: '>=2.2.2 && <2.3'
  random: '>=1.3.0 && <1.4'
changelog: |-
  # Revision history for raytrace

  ## 0.1.0.0 &mdash; 2025-07-18

  * First version. Released on an unsuspecting world.

  ## 0.2.0.0 &mdash; 2025-07-31

  * New material model allowing ray redirection
  * Added camera setting `cs_redirectTargets`
  * Added triangles and meshes
  * Added `planeShape` function
  * Added time parameter to `Geometry`, allowing for motion blur
  * Different type signatures for `boxJoin`, `boxHull`, and `bvhTree`
  * Removed `autoTree` function
  * New materials: `anisotropic` and `lommelSeeliger`
  * Volumes can be non-convex
  * All rays are normalized
changelog-type: markdown
description: "# raytrace\n\nA Haskell library for rendering images using path tracing.
  Inspired by the book series [Ray Tracing in One Weekend](https://raytracing.github.io/)
  by Peter Shirley and Steve Hollasch.\n\n[View on Hackage](https://hackage.haskell.org/package/raytrace)\n\nFeatures:\n*
  Spheres, parallelograms, and boxes\n* Triangle meshes (with a parser for .obj files)\n*
  Volumes (fog, subsurface scattering)\n* A variety of materials, with behaviors including
  light emission and refraction (you can define additional materials in Haskell)\n*
  Texture mapping\n* Perlin noise for procedurally generated textures\n* Parallel
  computation of pixels (if you compile your program with the flags `-threaded -rtsopts
  -with-rtsopts=-N`)\n* Bounding volume hierarchies\n* The ability to prioritize light
  sources when choosing a scattered ray direction, leading to faster convergence without
  sacrificing accuracy (see the section \"Ray Redirection\" below)\n* Transformed
  instances\n* Motion blur\n* Optional defocusing to simulate a real camera lens\n\n![Example](https://raw.githubusercontent.com/UnaryPlus/raytrace/refs/heads/main/demo1.png)\n\nThe
  image above, with 405 million top-level rays, was generated on my laptop in about
  8 minutes. The blurriness in the foreground and background is due to defocusing,
  wherein only a single plane is in focus. The following image demonstrates texture
  mapping, light sources, motion blur, and fog. (The code for both of these images
  was based on code in the aforementioned books.)\n\n![Example](https://raw.githubusercontent.com/UnaryPlus/raytrace/refs/heads/main/demo2.png)\n\nHere
  is an image demonstrating polygonal meshes and subsurface scattering:\n\n![Example](https://raw.githubusercontent.com/UnaryPlus/raytrace/refs/heads/main/pawn_demo.png)\n\n##
  Example Code\n\n```haskell\nmodule Main where\n\nimport Graphics.Ray\nimport Linear
  (V3(V3))\nimport System.Random (mkStdGen)\nimport Data.Functor.Identity (Identity)\n\nworld
  :: Geometry Identity Material\nworld = group\n  [ lambertian (checkerTexture 20
  10 0.2 0.8) <$ sphere (V3 0 0 0) 1\n  , lambertian (constantTexture (V3 0 0.2 0.5))
  <$ sphere (V3 0 (-1000) 0) 999\n  , mirror (constantTexture 0.8) <$ parallelogram
  (V3 (-3.25) (-1) (-0.75)) (V3 1.25 0 (-1.25)) (V3 0 2 0)\n  ]\n\nsettings :: CameraSettings\nsettings
  = defaultCameraSettings\n  { cs_center = V3 (-0.75) 0 2\n  , cs_lookAt = V3 0 0
  (-1)\n  , cs_aspectRatio = 16 / 9\n  , cs_imageWidth = 600\n  , cs_samplesPerPixel
  = 50\n  }\n\nmain :: IO ()\nmain = \n  let seed = mkStdGen 100 in\n  writeImage
  \"example_image.png\" (raytrace settings world seed)\n```\n\nThis produces the following
  image:\n\n![Example](https://raw.githubusercontent.com/UnaryPlus/raytrace/refs/heads/main/example_image.png)\n\n##
  Ray Redirection\n\nFor scenes with small light sources, the basic path tracing algorithm
  can result in very noisy images, as most rays never reach a light source. To reduce
  the noise, we can alter the distribution of scattered ray directions, increasing
  the probability of sending a ray toward a light source and decreasing the probability
  of other directions. This sounds like it would introduce bias and make surfaces
  appear brighter than they should, but we can correct for that by weighting the resulting
  colors, downweighting directions that we have made more common and upweighting directions
  that we have made less common. The mathematical basis for this is known as [Monte
  Carlo integration](https://en.wikipedia.org/wiki/Monte_Carlo_integration), specifically
  the \"importance sampling\" method.\n\nHere is an example using the [Cornell Box](https://en.wikipedia.org/wiki/Cornell_box).
  The first image was generated with `cs_redirectTargets = []` (the default), and
  the second with `cs_redirectTargets = [ (0.25, V3 343 554 332, V3 (-130) 0 0, V3
  0 0 (-105)) ]`. (This means that 25% of scattered rays are sent toward a random
  point on the parallelogram defined by the three vectors, which happens to be the
  light source.) Both images were generated with the same number of samples per pixel
  (200), but the second image is much less noisy. It also took half as long to render
  due to rays terminating at the light sooner.\n\n![Cornell box without redirection](https://raw.githubusercontent.com/UnaryPlus/raytrace/refs/heads/main/cornell_box_noisy.png)\n\n![Cornell
  box with redirection](https://raw.githubusercontent.com/UnaryPlus/raytrace/refs/heads/main/cornell_box_redirect.png)\n\nOf
  course, the second image still has some noise, which could be reduced by increasing
  the number of samples per pixel."
description-type: markdown
hash: 84d46cc82f0b1880f0ececb6aa2b546ab8af4d86766d24fe9f0537000d16102a
homepage: ''
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: ombspring@gmail.com
synopsis: Ray tracing library
test-bench-deps:
  Color: '>=0.4.0 && <0.5'
  base: '>=4.17.2.1 && <5'
  linear: '>=1.23.2 && <1.24'
  massiv: '>=1.0.5 && <1.1'
  massiv-io: '>=1.0.0 && <1.1'
  mtl: '>=2.2.2 && <2.3'
  random: '>=1.3.0 && <1.4'
  raytrace: '>=0'
