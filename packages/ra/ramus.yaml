all-versions:
- 0.0.1
- 0.1.0
- 0.1.1
- 0.1.2
author: ''
basic-deps:
  base: '>=4 && <5'
changelog: ''
changelog-type: ''
description: "# Ramus\r\n\r\nRamus is a lightweight FRP-like library heavily inspired
  by the Elm Signal implementation,\r\nin fact, it's a direct port of the [purescript-signal](https://github.com/bodil/purescript-signal)
  library,\r\nin Haskell.\r\nWhere possible and sensible, it tries to maintain API
  equivalence with Elm.\r\n\r\nSee [the Elm documentation](http://elm-lang.org:1234/guide/reactivity#signals)
  for details on usage and principles.\r\n\r\n## Haskell Usage Patterns\r\n\r\nHaskell
  depends on `IO` to manage side effects, where Elm's runtime generally manages them
  for you.\r\n`ramus` provides the `Signal.runSignal` function for running effectful
  signals.\r\n\r\n```haskell\r\nmodule Main where\r\n\r\nimport Signal\r\n\r\nhello
  :: Signal String\r\nhello = constant \"Hello Joe!\"\r\n\r\nhelloEffect :: Signal
  (IO ())\r\nhelloEffect = hello ~> print\r\n\r\nmain :: IO ()\r\nmain = runSignal
  helloEffect\r\n```\r\n\r\nThis simple example takes a constant signal which contains
  the string `\"Hello Joe!\"`\r\nand maps it over the `print` function, which has
  the type `(Show a) => a -> IO()`, thus taking the `String`\r\ncontent of the signal
  and turning it into an effect which logs the provided string to the user's console.\r\n\r\nThis
  gives us a `Signal (IO ())`. We use `runSignal` to take the signal of effects and
  run each effect\r\nin turnâ€”in our case, just the one effect which prints `\"Hello
  Joe!\"` to the console.\r\n\r\n## API Documentation\r\n\r\n* [Module documentation
  on Hackage](https://hackage.haskell.org/package/ramus)\r\n\r\n## Usage Examples\r\n\r\n*
  TODO\r\n"
description-type: markdown
hash: 35ce0b908ccebcc60324b8195347872610dee0f086290e7e381f589474ca397f
homepage: https://github.com/NickSeagull/ramus#readme
latest: 0.1.2
license-name: MIT
maintainer: Nikita Tchayka
synopsis: Elm signal system for Haskell
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4 && <5'
  criterion: '>=0'
  hspec: '>=0'
  quickcheck-io: '>=0'
  ramus: '>=0'
