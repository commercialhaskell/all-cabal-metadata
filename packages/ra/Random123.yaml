all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.2.0
author: Bogdan Opanchuk <bogdan@opanchuk.net>
basic-deps:
  array: '>=0.4'
  base: '>=4.7.0.0 && <5.0'
  data-dword: '>=0'
  random: '>=1.0.0.0'
changelog: ''
changelog-type: ''
description: |
  Random123
  =========

  This is a Haskell port of counter-based random number generators from `Random123 library <http://www.thesalmons.org/john/random123/>`_ v1.07 (with a minor bugfix).
  The description of algorithms can be also found in `Salmon et al., P. Int. C. High. Perform. 16 (2011) <http://dx.doi.org/doi:10.1145/2063384.2063405>`_.


  Contributing
  ------------

  When making changes to the library, run (or update, if necessary) functionality tests.
  This can be done as

  ::

      $ cabal configure --enable-tests
      $ cabal build
      $ cabal test

  or just by executing ``cd test; ./test.sh``.
  You can also check the performance by running benchmarks as

  ::

      $ cabal configure --enable-benchmarks
      $ cabal build
      $ cabal bench

  or by executing ``cd test; ./test_perf.sh``.
  Benchmarks will create a report file ``test_perf.html``
  in the folder where they were executed from.


  TODO
  ----

  * Performance issues:

      * According to Salmon et al., Threefry-4x64 should be the fastest algorithm on CPUs.
        This is not what I'm seeing; need to investigate it further.
        If it is made faster, it should be used as the default bijection for ``CBRNG32/64``
        instead of ``philox4``.

      * 32-bit Threefry shows suprisingly low performance (see ``Bijection`` benchmark group).

      * In general, there seems to be a lot of optimizations that can be done,
        in particular in terms of strategically placed strictness enforcement.

  * Current ``split`` implementation is a quick solution that kind of works
    (much like ``StdGen``'s one).
    A mathematically robust implementation is required
    (and CBRNGs by nature should be well-suited for this).
    Moreover, it would be great to have some tests that could distinguish
    "bad" ``split`` from a "good" one.
description-type: text
hash: 179a04fbc3ea8cb5de1f8e3501f643d91a6c1a73fb7b4f60b26761e038f50f3c
homepage: http://github.com/Manticore/haskell-random123
latest: 0.2.0
license-name: MIT
maintainer: Bogdan Opanchuk <bogdan@opanchuk.net>
synopsis: Haskell port of Random123 library
test-bench-deps:
  HUnit: '>=1.2'
  QuickCheck: '>=2.5'
  Random123: '>=0'
  base: '>=4.7 && <5.0'
  criterion: '>=1.0'
  random: '>=1.0'
  test-framework: '>=0.8'
  test-framework-hunit: '>=0.3'
  test-framework-quickcheck2: '>=0.3'
