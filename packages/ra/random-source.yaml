homepage: https://github.com/mokus0/random-fu
changelog-type: markdown
hash: 1374ea12324d240f6399695f1a1a4897fe36950d9a605c189925b8a2489fc569
test-bench-deps: {}
maintainer: James Cook <mokus@deepbondi.net>
synopsis: Generic basis for random number generators
changelog: |
  * Changes in 0.3.0.11: Revert 0.3.0.10 changes (which accidentally removed the Random.Source.PureMT module and added an overlapping instance).

  * Changes in 0.3.0.8: Add MonadRandom instance for MWC generator and RWS transformer.

  * Changes in 0.3.0.6: Fixed overzealous fix in 0.3.0.5.  The people responsible for sacking the people who have been sacked, etc., have been sacked.

  * Changes in 0.3.0.5: Renamed some internal modules and accidentally some external ones too.  Whoops.  Please don't use this version, it will only end in tears.

  * Changes in 0.3.0.4: Fixed a typo that broke building with MTL-1

  * Changes in 0.3.0.3: Fixes for GHC's deprecation of Foreign.unsafePerformIO

  * Changes in 0.3.0.2: Fixes for GHC 7.2.*'s crazy Template Haskell changes.
basic-deps:
  mwc-random: -any
  mersenne-random-pure64: -any
  base: '>=4 && <4.16'
  flexible-defaults: '>=0.0.0.2'
  syb: -any
  mtl: '>=2.0 && <2.3'
  th-extras: -any
  random: '>=1.2.0 && <1.3'
  stateref: '>=0.3 && <0.4'
  template-haskell: -any
  primitive: -any
all-versions:
- '0.3'
- 0.3.0.2
- 0.3.0.4
- 0.3.0.5
- 0.3.0.6
- 0.3.0.8
- 0.3.0.11
- 0.3.0.12
- 0.3.0.13
author: James Cook <mokus@deepbondi.net>
latest: 0.3.0.13
description-type: markdown
description: |
  This is now **deprecated** and it is better to use the
  [random](https://hackage.haskell.org/package/random "well maintained")
  package as the source of randomness.

  Here's what you might have written before:

  ```
  import qualified Data.Random as Random
  import qualified Data.Random.Distribution.Bernoulli as Bernoulli

  main :: IO ()
  main = do
    x <- Random.sample $ Bernoulli.Bernoulli (0.5 :: Double) :: IO Double
    print x
  ```

  And here's what you should write now (but there are many other options):

  ```
  import qualified System.Random.Stateful as Random.Stateful
  import qualified Data.Random as Random
  import qualified Data.Random.Distribution.Bernoulli as Bernoulli
  import qualified Control.Monad.Reader as Reader

  main :: IO ()
  main = do
    stdgen <- Random.Stateful.newIOGenM =<< Random.Stateful.newStdGen
    x <- Reader.runReaderT (Random.sample $ Bernoulli.Bernoulli (0.5 :: Double)) stdgen
          :: IO Double
    print x
  ```
license-name: LicenseRef-PublicDomain
