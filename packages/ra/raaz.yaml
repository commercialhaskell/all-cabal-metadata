homepage: https://github.com/raaz-crypto/raaz
changelog-type: markdown
hash: 870d51671237fe196239f4f19e5b6121df2eceffee3247d0c2701c69d78bbadc
test-bench-deps:
  criterion-measurement: '>=0.1'
  bench-types: -any
  aead-api: -any
  bytestring: '>=0.10 && <0.12'
  encrypt-api: -any
  bench-csprg: -any
  base: '>=4.11 && <4.16'
  hspec: -any
  raaz: -any
  test-core: -any
  test-digest: -any
  HUnit: '>=1.2'
  bench-prim: -any
  test-auth-implementation: -any
  implementation: -any
  digest-api: -any
  xchacha-indef: -any
  attoparsec: -any
  deepseq: ==1.4.*
  test-auth: -any
  core: -any
  QuickCheck: '>=2.4'
  hspec-discover: -any
  pretty: -any
  test-cipher: -any
  vector: ==0.12.*
maintainer: ppk@cse.iitk.ac.in
synopsis: Fast and type safe cryptography.
changelog: "# Change log for [raaz].\n\n## [0.3.0] - May 20, 2021\n\n  This is a major
  rewrite of the raaz library with significant change in the\n  API and internals.\n\n*
  Platform requirements\n\n  - Cabal >= 3.0.0.0\n  - GHC   >= 8.4\n\n* User facing
  interface\n\n  - Top level `Raaz` module centred around cryptographic operation\n
  \   instead of specific primitives. This release supports the\n    following operations\n\n\t-
  message digest provided via Blake2b\n\t- message authentication provided via Blake2b\n\t-
  authenticated encryption via XChaCha20Poly1305\n\n  - Explicit primitive based interface
  meant only for interworking\n    with other library.\n\n  - Dropped support for
  SHA1, SHA224, SHA384, HMAC, and AES-CBC,\n\tmainly to concentrate efforts and reach
  stable release soon.\n\n  - Pluggable interface for primitive implementations and
  entropy\n    source (recommended only for advanced users)\n\n* Internal changes.\n\n
  \ - Use libverse for the low level FFI implementations. From now on\n    newer primitives
  will be coded up in verse instead of hand written\n    C/assembly. (See https://github.com/raaz-crypto/libverse/>)\n\n
  \ - Backpack based modules and signatures instead of classes for\n    primitive
  implementation. Simplifies the library and allows easy\n    plugging in of custom
  implementations.\n\n* CSPRG and Entropy\n\n  - Entropy on linux: uses getrandom
  by default with flag to fall back\n\tto `/dev/urandom`.\n\n  - The raaz command
  now exposes the sub-command entropy (just like\n\trand) mainly for system entropy
  quality checking.\n\n  - A host-endian variant of chacha20 keystream for csprg.\n\n
  \ - Backpack based pluggable entropy source (recommended only for\n\tadvanced users).\n\n*
  Type level improvements.\n\n  - Using Data.Proxy.Proxy to get rid of some uses of
  undefined.\n\n  - Primitives block sizes to type level.\n\n  - Aligned pointer with
  alignment at type level.\n\n* Other changes.\n\n  - Cross testing implementations
  with the monocypher library\n\n  - Licensing changed to Apache-2.0 OR BSD-3-Clause
  dual licensing.\n\n## [0.2.3] - 25 April, 2021\n\nThis is a minor release just update
  package dependencies.\n\n\n## [0.2.2] - 13 December, 2020\n\nThis is a minor release
  just update package dependencies.\n\n* Get raaz to work with the latest ghcs.\n\n##
  [0.2.1] - 25 March, 2019\n\nThis is a minor release just to get the latest ghc.\n\n*
  Get raaz to work with latest ghcs.\n\n## [0.2.0] - 24 August, 2017\n\n* Some cpu
  detection builtin for GCC. Would come handy in future for\n  selection of primitives
  are runtime.\n* BLAKE2b, BLAKE2s added.\n* system entropy: Experimental support
  for linux getrandom call\n* removed depreciated `liftSubMT` from Memory.\n* Got
  rid of the class `MemoryMonad`, instead introduced a more specific\n  `MemoryThread`.
  This allows to treat monads like `RT mem` much like\n  `MT mem`, including possibility
  of running an action on a sub-memory.\n* combinator to randomise memory cells.\n*
  hardened the prg so that a compromise on the current prg state will\n  not expose
  previously generated data.\n* OpenBSD/NetBSD: fix incorrect arc4random call.\n*
  Basic Unix man-page for the raaz command.\n* Windows support is now included. The
  missing pieces were system\n  entropy and memory locking which is now available.\n\n##
  [0.1.1] - 2nd  March, 2017\n\n* Failing build on big endian machines (#306) fixed.\n\n##
  [0.1.0] - 28th February, 2017\n\n* Stream cipher chacha20 added.\n* Added a PRG
  that uses chacha20, seeded with system entropy\n* Sha1 highly depreciated in view
  of reported collision.\n* We now have super command `raaz` with subcommands\n  -
  `checksum`: as a replacement for the old checksum executable\n  - `rand`: for generating
  random bytes.\n\nLow level changes\n\n* Reworked alignment considerations.\n\n  -
  New Alignment type\n\n  - Ways for implementations to demand that the input buffer
  be aligned\n\t(mainly to facilitate more efficient SIMD implementations).\n\n\n*
  Num instance from LengthUnit removed, Monoid instance added (See\n  issue:#247)\n\n\n##
  [0.0.2] - July 25, 2016.\n\nThis release comes with very little changes.\n\n* Encoding:
  translation between formats using the `translate`\n  combinator\n* Encoding formats:
  base64\n* Bug fix in base16 character verification (Commit: d6eca4c37b0b)\n* Dropped
  `isSuccessful` from export list of Equality.\n\n## [0.0.1] - June 21, 2016.\n\n*
  Basic cryptographic types.\n* Hashes: sha1, sha256, sha512, sha224, sha384 and their
  HMACs\n* Ciphers: AES-CBC with key-sizes 128, 192 and 256\n* Encoding formats: base16\n\n[0.0.1]:
  <http://github.com/raaz-crypto/raaz/releases/tag/v0.0.1>\n[0.0.2]: <http://github.com/raaz-crypto/raaz/releases/tag/v0.0.2>\n[0.1.0]:
  <http://github.com/raaz-crypto/raaz/releases/tag/v0.1.0>\n[0.1.1]: <http://github.com/raaz-crypto/raaz/releases/tag/v0.1.1>\n[0.2.0]:
  <http://github.com/raaz-crypto/raaz/releases/tag/v0.2.0>\n[0.2.1]: <http://github.com/raaz-crypto/raaz/releases/tag/v0.2.1>\n[0.2.2]:
  <http://github.com/raaz-crypto/raaz/releases/tag/v0.2.2>\n[0.3.0]: <http://github.com/raaz-crypto/raaz/releases/tag/v0.3.0>\n[raaz]:
  \ <http://github.com/raaz-crypto/raaz/>\n"
basic-deps:
  aead-api: -any
  bytestring: '>=0.10 && <0.12'
  mac-indef: -any
  base: '>=4.11 && <4.16'
  auth-api: -any
  libverse: -any
  raaz: -any
  random-api: -any
  implementation: -any
  digest-api: -any
  xchacha-indef: -any
  optparse-applicative: '>=0.13.0.0'
  deepseq: ==1.4.*
  core: -any
  vector: ==0.12.*
all-versions:
- 0.0.1
- 0.0.2
- 0.1.0
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.3.0
author: Piyush P Kurur
latest: 0.3.0
description-type: markdown
description: "Raaz: A secure cryptographic library\n====================================\n\n[![Apache-2.0
  OR BSD-3-Clause][shields-license]](#legal)\n[![][ci-build]][github-actions]\n[![][ci-checks]][github-actions]\n[![Hackage][hackage-badge]][hackage]\n[![Hackage
  Dependencies][hackage-deps-badge]][hackage-deps]\n\nRaaz is a cryptographic library
  in Haskell that provide a high level\nand safe access to a lot of cryptographic
  operations. The library can\nbe used for standalone cryptographic applications as
  well as for\nimplementing other network protocols. Some of the features that are\nunique
  to raaz are the following\n\n1. Pervasive use of types for better safety.\n2. Default
  choice of primitives and implementations are safe.\n3. Mechanism to have multiple
  implementations for any given\n   cryptographic primitives. An advanced user who
  has an in-depth\n   knowledge of the platform should be able to plugin the desired\n
  \  implementation.\n4. Strong emphasis on API design with through documentation.\n\nBuilding\n--------\n\nThe
  recommended way to install raaz is through `cabal-install` version\n3.0 or above.
  We also need a version of GHC that supports backpack\n(for details on which version
  of GHC is supported, refer to our\n[CI-builds][github-actions]).\n\n    cabal build\n\tcabal
  test\n\tcabal install\n\nOnline documentation\n--------------------\n\n- [Latest
  release][doc-latest]\n- [Release candidate][doc-candidate]\n\nAbout the name\n--------------\n\nThe
  word `Raaz` (&#x0930;&#x093E;&#x095B;) stands for secret in Hindi.\n\n\nLegal\n-----\n\nCopyright
  2012 Piyush P Kurur\n\nThe library is licensed under\n\n* Apache License, Version
  2.0\n  <http://www.apache.org/licenses/LICENSE-2.0>\n* BSD 3-Clause license\n  <https://opensource.org/licenses/BSD-3-Clause>\n\nYou
  may not use this software except in compliance with one of the\nabove Licenses (*at
  your option*).\n\nSPDX-License-Identifier: (Apache-2.0 OR  BSD-3-Clause)\n\nUnless
  required by applicable law or agreed to in writing, software\ndistributed under
  these Licenses is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or\nimplied. For the exact terms and conditions see
  the accompanying\nLICENSE file.\n\n\n[wiki]: <https://github.com/raaz-crypto/raaz/wiki>
  \"Raaz Wiki\"\n[repo]: <https://github.com/raaz-crypto/raaz> \"Raaz on github\"\n[blake2]:
  <https://blake2.net/> \"Blake2 hash function\"\n[emailgroups]: <https://groups.google.com/forum/#!forum/hraaz>
  \"Raaz on Google groups\"\n[hackage]:       <https://hackage.haskell.org/package/raaz>\n[hackage-badge]:
  <https://img.shields.io/hackage/v/raaz.svg>\n[hackage-deps-badge]: <https://img.shields.io/hackage-deps/v/raaz.svg>\n[hackage-deps]:
  <https://packdeps.haskellers.com/feed?needle=raaz>\n[shields-license]: <https://img.shields.io/badge/License-Apache--2.0%20OR%20BSD--3--Clause-informational.svg>\n[ci-build]:
  <https://github.com/raaz-crypto/raaz/workflows/Build/badge.svg> \"Building source\"\n[ci-checks]:
  <https://github.com/raaz-crypto/raaz/workflows/Checks/badge.svg> \"Source code checks\"\n[github-actions]:
  <https://github.com/raaz-crypto/raaz/actions> \"Github actions\"\n[doc-latest]:
  <https://hackage.haskell.org/package/raaz>\n[doc-candidate]: <https://hackage.haskell.org/package/raaz-0.3.0/candidate>\n"
license-name: (Apache-2.0 OR BSD-3-Clause)
