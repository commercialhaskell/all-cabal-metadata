all-versions:
- 0.0.0.1
- 0.0.0.3
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.1.3
- 0.0.2.0
author: Robert Fischer
basic-deps:
  base: '>=4.14.1.0 && <5'
  bytestring: '>=0.10.12.0'
  data-default: '>=0.7.1.1'
  deepseq: '>=1.4.4.0'
  text: '>=1.2.4.1'
  text-conversions: '>=0.3.1'
  time: '>=1.9.3'
  wide-word: '>=0.1.1.2'
changelog: ''
changelog-type: ''
description: "# SnowChecked\n\n## A Checksummed UID Generator based on Twitter's Snowflake\n\nUnique
  ids are useful, but traditional GUID/UUID formats are lengthy, inefficient, and
  hard for humans to use. Twitter\ncreated a novel format for UIDs called [\"Snowflake\"](https://developer.twitter.com/en/docs/twitter-ids)
  which addressed\nthese issues, with the added benefit that the UIDs monotonically
  increase over time.\nThis library extends the Snowflake format by adding checksum
  bits at the end. If you use this library with\nthe number of checksum bits set to
  0, then you have a Snowflake implementation.\n\nThis extension is valuable because
  the checksum detects error on input. If you're using ids in a human setting\n(eg:
  having users type them in or scan them from QR codes), then the checksum is valuable
  to catch typos,\nmiscommunications, and other input issues.\n\nLike Snowflake, this
  algorithm uses some bits from the timestamp, some bits from a counter, and some
  bits of the node id.\nThis algorithm extends Snowflake by also using some bits to
  store the checksum, which derives from the sum of the other\nparts.\n\nThis implementation
  allows the number of bits in the id to range from 0 bits to 255^4 bits. The default
  configuration uses\n64 bits, with 40 bits used for time, 10 bits used for the counter,
  8 bits used for the node id, and 6 bits for the checksum.\nThe odds of a false positive
  on the checksum is `1/(2^checkbits)`, so the odds of a false positive in the default
  configuration\nis ~1.5%. \n\n## Encoding\n\nIf you want to marshall a flake, then
  you can use the encodings in the `Encoding` sub-packages of this library. Implementations\ninclude
  a `ByteString` (strict or lazy), any `Text`-like value (using base 16), or any `Integral`
  value.\n\n# Credit\n\nThis project derives distantly from the [`snowfake` package
  on Hackage](https://hackage.haskell.org/package/snowflake).\n"
description-type: markdown
hash: 21d00c3bd8dbf50554b968d0955272579af67de50562132b8b53f947b3aba4bc
homepage: https://github.com/robertfischer/hs-snowflake-checked#readme
latest: 0.0.2.0
license-name: Apache-2.0
maintainer: smokejumperit@gmail.com
synopsis: A checksummed variation on Twitter's Snowflake UID generation algorithm
test-bench-deps:
  base: '>=4.14.1.0 && <5'
  bytestring: '>=0.10.12.0'
  data-default: '>=0.7.1.1'
  deepseq: '>=1.4.4.0'
  hedgehog: '>=0'
  snowchecked: '>=0'
  text: '>=1.2.4.1'
  text-conversions: '>=0.3.1'
  time: '>=1.9.3'
  unliftio: '>=0'
  wide-word: '>=0.1.1.2'
