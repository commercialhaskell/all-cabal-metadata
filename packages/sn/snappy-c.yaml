all-versions:
- 0.1.0
author: Finley McIlwaine, Edsko de Vries
basic-deps:
  base: '>=4.14 && <4.20'
  bytestring: '>=0.11 && <0.13'
  conduit: '>=1.3.5 && <1.4'
  data-default: '>=0.7 && <0.8'
  digest: '>=0.0.2 && <0.0.3'
  mtl: '>=2.2.2 && <2.4'
  optparse-applicative: '>=0.18 && <0.19'
  snappy-c: '>=0'
changelog: |
  # Revision history for snappy-c

  ## 0.1.0 -- 2024-02-09

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # snappy-c

  ![CI Status Badge](https://github.com/well-typed/snappy-c/actions/workflows/haskell-ci.yml/badge.svg)

  Haskell bindings to the C API of [Snappy][snappy]: A fast compression library.

  # Usage

  > [!IMPORTANT]
  > To use this package, you must have the Snappy library installed **and visible
  > to `cabal`**.

  If your build fails with a message like:
  ```
  Error: cabal-3.10.1.0: Missing dependency on a foreign library:
  * Missing (or bad) C library: snappy
  ```

  You need to explicitly configure the include and library paths via cabal. One
  way to do so is to add something like this to your `cabal.project`
  configuration:

  ```cabal
  package snappy-c
    extra-include-dirs:
      /path/to/snappy/include
    extra-lib-dirs:
      /path/to/snappy/lib
  ```

  In my case, on a mac using homebrew, the following suffices:

  ```cabal
  package snappy-c
    extra-lib-dirs:
      /opt/homebrew/lib
    extra-include-dirs:
      /opt/homebrew/include
  ```

  We wouldn't need to do this if the Snappy library supported pkg-config
  configuration, but as of writing [they do
  not](https://github.com/google/snappy/pull/86#issuecomment-552237257).

  ## Installing Snappy

  The [Snappy][snappy] library is available most package managers.

  ### Homebrew

  ```
  brew install snappy
  ```

  ### APT

  ```
  apt-get install libsnappy-dev
  ```


  # Performance

  snappy-c stays true to the speedy spirit of Snappy compression.

  The package includes a benchmark suite that compares the compression,
  decompression, and roundtrip performance of this package against
  - a [pre-existing (unmaintained) Snappy
    implementation](https://hackage.haskell.org/package/snappy), and
  - the [zlib package's](https://hackage.haskell.org/package/zlib) zlib and gzip
    compression format implementations.

  Run the benchmarks with:
  ```
  cabal run bench-snappy-c -- --time-limit 5 -o bench.html
  ```

  > [!IMPORTANT]
  > To build the benchmarks, you will need to set `extra-include-dirs` and
  > `extra-lib-dirs` for the `snappy` package as you did for `snappy-c` (see
  > [Usage](#usage)).

  Here's a screenshot from the generated bench.html file:

  ![benchmark results](https://raw.githubusercontent.com/well-typed/snappy-c/main/.github/assets/bench-results.png)

  ## `snappy-cli` performance

  <!-- Compressing and decompressing the the [enwik9 test
  data](https://mattmahoney.net/dc/textdata.html) (~953MB) 5 times in a minimally
  controlled yet consistent environment resulted in the following average times:

  | Tool         | Compress time (s) | Decompress time (s)  |
  | ------------ | ----------------- | -------------------- |
  | `snappy-cli` | 2.074             | 0.61                 |
  | `snzip`      | 2.312             | 1.07                 |
  | `gzip`       | 26.51             | 1.38                 | -->

  See
  [snappy-cli/README.md](https://github.com/well-typed/snappy-c/tree/main/snappy-cli)
  for a demonstration of the performance of this library in a CLI tool.

  <!-- Links -->
  [snappy]: https://github.com/google/snappy
description-type: markdown
hash: d79733db50552dc471710be8a16cc5f4fb69f210ece15fb430a50cb02a24f014
homepage: ''
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: finley@well-typed.com
synopsis: 'Bindings to Google''s Snappy: A fast compression library'
test-bench-deps:
  base: '>=4.14 && <4.20'
  bytestring: '>=0.11 && <0.13'
  criterion: '>=1.6.3 && <1.7'
  deepseq: '>=1.4 && <1.6'
  random: '>=1.2.1 && <1.3'
  snappy-c: '>=0'
  snappy-lazy: '>=0.1 && <0.2'
  tasty: '>=1.5 && <1.6'
  tasty-hunit: '>=0.10 && <0.11'
  tasty-quickcheck: '>=0.10 && <0.11'
  zlib: '>=0.6.3 && <0.8'
