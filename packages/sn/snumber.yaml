homepage: https://github.com/google/hs-dependent-literals#readme
changelog-type: markdown
hash: 4323184b123fee9e9085574e96318b80e0dfb9f30e3b87f60f41093bc33c080a
test-bench-deps: {}
maintainer: Andrew Pritchard <awpr@google.com>
synopsis: Integer singletons with flexible representation
changelog: |
  # 0.3.0 (2021-11-05)

  * Get type-level `Ord` from the new `type-compare` compatibility library.
  * Get `SOrdering` from `type-compare` under the new name `OrderingI`.
    * It's no longer exported from `Data.SNumber`; depend on `type-compare` or a
      new-enough version of `base`.

  # 0.2.0 (2021-10-24)

  * Downgrade the `unSNumber` field selector to be unidirectional.
    * It could previously be used with record update syntax to construct invalid
      `SNumbers` out of valid ones.
    * Migration: Replace record updates of `unSNumber` with `N#`.
  * Add an `SN` pattern synonym for safely extracting an `SNumber` value without
    `MagicHash`.

  # 0.1.0.0 (2021-09-08)

  Initial version.
basic-deps:
  base: '>=4.12 && <4.17'
  type-compare: '>=0.1.1 && <0.2'
  numeric-kinds: '>=0.1 && <0.3'
all-versions:
- 0.1.0.0
- 0.2.0
- 0.3.0
author: Andrew Pritchard <awpr@google.com>
latest: 0.3.0
description-type: haddock
description: |-
  This provides singletons-style witnesses for type-level integers, and some
  limited arithmetic operations on them.  Instead of working with (invisible,
  implicitly-passed) 'KnownNat' instances, you can work with (visible,
  explicitly-mentioned) 'SNumber' values, and can freely convert between the
  two forms.

  This primarily exists in support of
  <https://hackage.haskell.org/package/dependent-literals-plugin dependent-literals-plugin>.
license-name: Apache-2.0
