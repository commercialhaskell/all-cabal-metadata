all-versions:
- 0.2.0.0
- 0.3.0.0
- 0.3.0.2
- 0.3.0.3
author: phlummox
basic-deps:
  base: '>=4.8 && <5'
  bytestring: '>=0'
  cmdargs: '>=0'
  directory: '>=0'
  filepath: '>=0'
  http-client: '>=0'
  http-client-tls: '>=0'
  http-types: '>=0'
  hup: '>=0'
  lifted-base: '>=0'
  mtl: '>=2.2.1'
  shelly: '>=1.6.6 && <1.8.0'
  split: '>=0'
  tagsoup: '>=0'
  tar: '>=0'
  text: <2.0
  transformers: '>=0'
  zlib: '>=0'
changelog: |+
  # Changelog for Hup

  Major changes to the library API and executable behaviour will be
  documented here.

  ## 0.3.0.3

  - Library API: no changes.
  - Executable behaviour: the environment variable used to pass in a password
    has changed from PASSWORD to HUP_HACKAGE_PASSWORD.
    (Fixes [#14](https://github.com/phlummox/hup/issues/14))
  - Repository changes:
    - Renamed source code directories
    - Did some (API-unchanging) tidying of source code files
    - Got basic builds and tests working on Windows and MacOS again
      (fixes [#7](https://github.com/phlummox/hup/issues/7))
    - Added a "smoke test" (test of basic app functionality)
      against an instance of hackage-server running in a Docker
      container.

  ## 0.3.0.2

  - Library API: no changes.
  - Executable behaviour: no change.
  - Changes to code and cabal file:
    - Tightened bounds on dependencies, to avoid known
      incompatible versions of dependencies.
    - Internal tidying of unused imports, trailing whitespace,
      missing sigs etc.
    - Enabled extra ghc warning flags during build.
    - Shifted "stack.yaml" out of top directory - poor form :/
    - Added some extra compilation flags (e.g.
      for tests that are unlikely to run without "stack",
      like doctests).

  ## 0.3.0.1

  - Library API: no changes.
  - Executable behaviour: no change.
  - Some changes to README and Travis config file, and
    thus to the deployed "releases" binary, though.

  ## 0.3.0.0

  - Bug fixes
  - Updated documentation, added a "quick usage" section and troubleshooting
  - `hup` now checks whether `cabal` is in the package snapshot binaries
    directory, and installs it if not.
  - Added `packbuild` and `packboth` commands.
  - Added a program test to .travis.yml

  ## 0.2.0.0

  - Bug fixes
  - Allow an Upload to store contents of file to be uploaded.
  - Support older versions of directory and http-client
  - Allow extra args to be passed to cabal when configuring or when
    running haddock.
  - Added hspec and docstring tests
  - Now running travis CI on a range of platforms and ghc versions.


changelog-type: markdown
description: "# hup [![Hackage version](https://img.shields.io/hackage/v/hup.svg?label=Hackage)](https://hackage.haskell.org/package/hup)\n\n[![Build
  Status](https://github.com/phlummox/hup/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/phlummox/hup/actions/workflows/ci.yml)\n[![Windows
  build status](https://ci.appveyor.com/api/projects/status/htfimtle01wo328u/branch/master?svg=true&passingText=Windows%20build%20passing&failingText=Windows%20build%20failing&pendingText=Windows%20build%20pending)](https://ci.appveyor.com/project/phlummox/hup/branch/master)\n\nSmall
  program for building and uploading packages and documentation\nbuilt with the [`stack`][stack]
  build tool to a hackage server.\n\n[stack]: https://www.haskellstack.org/\n\nFor
  instance, to build and upload package documentation to\n<https://hackage.haskell.org/>
  for a package candidate:\n\n```\n$ hup docboth --candidate --user myHackageUserID
  --password myHackagePassword\n```\n\nInstead of providing a password on the command
  line, you can set the\n`HUP_HACKAGE_PASSWORD` environment variable and `hup` will
  use that as the\npassword.\n\nIn addition to `stack`, `hup` requires the `cabal`
  executable,\nbut will install an appropriate `cabal` if it doesn't find one in the\nbinaries
  for the package snapshot your project is using.\n\n## Installation\n\nThe recommended
  install method is to run:\n\n```\n$ stack --resolver=lts-11 build --copy-bins hup\n```\n\nOn
  Linux, this will install `hup` to your `~/.local/bin` directory --\nensure that
  it's on your PATH, and you're good to go.\n\n## Quick usage\n\nTry:\n\n```\n$ cd
  /path/to/my/project\n$ stack build\n$ hup packboth -u myHackageUserID -p myHackagePassword\n$
  hup docboth -u myHackageUserID -p myHackagePassword\n```\n\n## Usage\n\n\n* `hup
  [COMMAND] ... [OPTIONS]`\n\n  Build and/or upload packages or documentation to a
  hackage server. A server\n  url should be of the format PROTOCOL://SERVER[:PORT]/,
  and defaults to\n  https://hackage.haskell.org/ if not specified.\n  \n  A password
  can also be given in the HUP_HACKAGE_PASSWORD environment variable\n  instead of
  on the command line.\n  \n  'hup --help=all' will give help for all commands.\n\n*
  Commands:\n\n        packbuild  Build source distribution .tgz for a package.\n
  \       packup     Upload FILE as a package (or candidate package).\n        packboth
  \  Build source distribution .tgz and upload as package (or\n                   candidate
  package).\n        docbuild   Build documentation for a package.\n        docup
  \     Upload FILE as documentation.\n        docboth    Build and upload documentation
  for a package.\n      \n* Common flags:\n\n        -v --verbose          be verbose\n
  \       -h --help             Display help message\n        -V --version          Print
  version information\n           --numeric-version  Print just the version number\n
  \     \n\n  '--help=bash' will output code for bash command-line completion.\n\n###
  Subcommand details\n\n\n\n* `hup packbuild [OPTIONS]`\n\n  Build source distribution
  .tgz for a package.\n\n* `hup packup [OPTIONS] FILE`\n\n  Upload FILE as a package
  (or candidate package).\n\n  Flags:\n\n        -s --server=URL       \n        -c
  --candidate        \n        -u --user=USER        \n        -p --password=PASSWORD\n*
  `hup packboth [OPTIONS]`\n\n  Build source distribution .tgz and upload as package
  (or candidate package).\n\n  Flags:\n\n        -s --server=URL       \n        -c
  --candidate        \n        -u --user=USER        \n        -p --password=PASSWORD\n*
  `hup docbuild [OPTIONS]`\n\n  Build documentation for a package.\n\n  Flags:\n\n
  \       -e --executables             Run haddock for Executables targets\n        -t
  --tests                   Run haddock for Test Suite targets\n        -i --internal
  \               Run haddock for internal modules and include\n                                     all
  symbols\n           --haddock-arguments=ARGS  extra args to pass to haddock\n        -q
  --quick                   quick build - don't build docco for\n                                     dependencies
  (links may be broken)\n* `hup docup [OPTIONS] FILE`\n\n  Upload FILE as documentation.\n\n
  \ Flags:\n\n        -s --server=URL       \n        -c --candidate        \n        -u
  --user=USER        \n        -p --password=PASSWORD\n* `hup docboth [OPTIONS]`\n\n
  \ Build and upload documentation for a package.\n\n  Flags:\n\n        -e --executables
  \            Run haddock for Executables targets\n        -t --tests                   Run
  haddock for Test Suite targets\n        -i --internal                Run haddock
  for internal modules and include\n                                     all symbols\n
  \          --haddock-arguments=ARGS  extra args to pass to haddock\n        -q --quick
  \                  quick build - don't build docco for\n                                     dependencies
  (links may be broken)\n        -s --server=URL            \n        -c --candidate
  \            \n        -u --user=USER             \n        -p --password=PASSWORD
  \    \n\n\n## Library API\n\nFor documentation of the library, see the [Hackage
  documentation][hackage-hup].\n\n[hackage-hup]: https://hackage.haskell.org/package/hup\n\n##
  Troubleshooting\n\n### I get an error during upload that says \"...: does not exist
  (no such protocol name: tcp)\"\n\nThis is not actually a bug in `hup`, but is found
  in e.g. Docker containers\nthat don't have all the packages needed for networking
  - see e.g.\n[here](https://stackoverflow.com/questions/46322773/yesod-app-in-docker-container-cant-make-network-requests)
  on StackOverflow.\n\nYou will need to install networking packages appropriate for
  your distro - on Ubuntu, something like ca-certificates, libgnutls28 (or another
  version of the GNU TLS library), and netbase.\n\n### I get some sort of error when
  building documents that says \"...haddock: internal error: ... hGetContents: invalid
  argument (invalid byte sequence)\"\n\nAgain, this isn't actually a bug in `hup`,
  but happens (e.g. in Docker\ncontainers) when the system locale is not properly
  set up (see a bug report\n[here](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=871839)
  arising from a\nsimilar issue). Annoyingly, `haddock` depends on the locale being
  properly set,\nthough it doesn't really seem necessary.\n\nTry running `locale-gen
  \"en_US.UTF-8\"` to generate an appropriate UTF-8\nlocale, and `export LC_ALL=\"en_US.UTF-8\"`
  so that the locale can be found\nfrom environment variables.\n\n## Bash command-line
  completion\n\nTo enable bash command-completion:\n\nRun\n\n```\n$ hup --help=bash
  > hup.complete\n```\n\nthen either \"`source hup.complete`\" or \"`. hup.complete`\".\n\n##
  Defaults\n\nUses \"`https://hackage.haskell.org/`\" as the default server location,\nbut
  see the `DefaultServerUrl` module if you want to patch this to\nsomething else before
  installing.\n\n## Bugs and limitations\n\n- Some very basic tests of library and
  app functionality are run on MS Windows\n  and MacOS virtual machines using GitHub
  and Appveyor's CI/CD capabilities, but\n  no extensive testing on those platforms
  is performed.\n\n## Feature requests\n\nSo that actual bugs and defects aren't cluttered
  by other issues,\nproposed features and feature requests are maintained as *closed*
  issues on\nGitHub with the labels \"enhancement\" and \"incomplete\"\n(see [here][feature-requests]).\n\n[feature-requests]:
  https://github.com/phlummox/hup/issues?q=is%3Aissue+is%3Aclosed+label%3Aenhancement+label%3Aincomplete\n\n##
  Credits\n\n`hup` is a Haskellified version of [Oleg Grenrus's script][oleg],\nwhich
  is a stack-enabled version of [Eric Mertens's script][eric].\n\n[oleg]: http://web.archive.org/web/20210209123501/https://github.com/mstksg/binary-orphans/commit/3f106567260c1a9bb3063d49948201675876ad12.patch\n[eric]:
  http://web.archive.org/web/20210209124009/https://github.com/ekmett/lens/commit/12b08783a3e44d46b41553d8a57560c6e68cf7e1.patch\n\n<!--\n
  \ vim: syntax=markdown\n-->\n"
description-type: markdown
hash: 50f04c701bafdd910c0beca78b9ec511a6c29c91d69e0983174b4a6fff115730
homepage: https://github.com/phlummox/hup
latest: 0.3.0.3
license-name: BSD-2-Clause
maintainer: phlummox2@gmail.com
synopsis: Upload packages and/or documentation to a hackage server
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0'
  filepath: '>=0'
  hspec: '>=0'
  hspec-core: '>=0'
  hspec-wai: <0.10
  http-client: '>=0'
  http-types: '>=0'
  hup: '>=0'
  mtl: '>=0'
  network: '>=0'
  scotty: '>=0'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
  vector: '>=0'
  wai: '>=0'
  wai-extra: '>=0'
  warp: '>=0'
