all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.7.1.0
- 0.7.1.1
- 0.8.0.0
- 0.8.0.1
- 0.9.0.0
- 0.9.1.0
author: blockfrost.io
basic-deps:
  base: '>=4.7 && <5'
  blockfrost-api: '>=0.12.1'
  blockfrost-client: '>=0'
  blockfrost-client-core: ^>=0.6
  bytestring: '>=0'
  data-default: '>=0'
  directory: '>=0'
  filepath: '>=0'
  mtl: '>=0'
  servant: '>=0.18 && <0.21'
  servant-client: '>=0'
  servant-client-core: '>=0'
  text: '>=0'
changelog: |+
  # Version [0.9.1.0](https://github.com/blockfrost/blockfrost-haskell/compare/client-0.9.0.0...client-0.9.1.0) (2024-09-25)

  * Fix return type of `getTxCBOR` from `[TransactionCBOR]` to `TransactionCBOR`.

  # Version [0.9.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/client-0.8.0.1...client-0.9.0.0) (2024-09-19)

  * Additions
    * `ProtocolParams` extended with Conway related protocol parameters and raw cost models [#59](https://github.com/blockfrost/blockfrost-haskell/pull/59)
    * Mempool endpoints [#62](https://github.com/blockfrost/blockfrost-haskell/pull/62)
    * `getTxCBOR` for `/txs/:hash/cbor` [#63](https://github.com/blockfrost/blockfrost-haskell/pull/63)

  # Version [0.8.0.1](https://github.com/blockfrost/blockfrost-haskell/compare/client-0.8.0.0...client-0.8.0.1) (2024-01-16)

  * GHC 9.6.3 compatibility

  # Version [0.8.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/client-0.7.1.1...client-0.8.0.0) (2023-12-18)

  * Allow servant `0.20` [#41](https://github.com/blockfrost/blockfrost-haskell/pull/41)
  * Additions [#43](https://github.com/blockfrost/blockfrost-haskell/pull/43)
    * `getAccountAssociatedAddressesTotal` for `/accounts/:stake_address/addresses/total`
    * `getAddressInfoExtended` for `/addresses/:address/extended`
    * `listPoolsExtended` for `/pools/extended`
    * `/utils` API
      * `deriveShelleyAddress` for `/utils/addresses/xpub/:xpub/:role/:index`
      * `txEvaluate` for `/utils/txs/evaluate` endpoint
      * `txEvaluateUTXOs` for `/utils/txs/evaluate/utxos` endpoint

  # Version [0.7.1.1](https://github.com/blockfrost/blockfrost-haskell/compare/v0.7.1.0...client-0.7.1.1) (2023-01-10)

  * Allow blockfrost-api `0.8`

  # Version [0.7.1.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.7.0.0...v0.7.1.0) (2023-01-03)

  * Additions
    * `getNetworkEras` query for `/network/eras` endpoint [#33](https://github.com/blockfrost/blockfrost-haskell/pull/33/)

  # Version [0.7.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.6.0.0...v0.7.0.0) (2022-10-11)

  * Changes
    * `listScript` and `listScripts'` now return `ScriptHashList` newtype
      instead of `[ScriptHash]` due to overlapping instance conflicts

  # Version [0.6.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.5.0.0...v0.6.0.0) (2022-08-31)

  * Additions
    * `getScriptDatumCBOR` query for `/scripts/datum/{datum-hash}/cbor` endpoint

  # Version [0.5.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.4.0.1...v0.5.0.0) (2022-06-06)

  * Fix return types of `getEpochStakeByPool` and `getEpochStakeByPool'`
    from `StakeDistribution` to `PoolStakeDistribution`

  # Version [0.4.0.1](https://github.com/blockfrost/blockfrost-haskell/compare/v0.4.0.0...v0.4.0.1) (2022-04-05)

  * Allow servant `0.19`

  # Version [0.4.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.3.1.0...v0.4.0.0) (2022-03-09)

  * Build with `blockfrost-api 0.4`

  # Version [0.3.1.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.3.0.0...v0.3.1.0) (2022-02-17)

  * Additions
    * `getBlockAffectedAddresses` for `/blocks/${hash_or_number}/addresses` endpoint (Affected addresses in a block)

  # Version [0.3.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.2.1.0...v0.3.0.0) (2022-02-07)

  * Changes
    * Client functions switched to tagless variants using `MonadBlockfrost` allowing to use custom base monad
      for client functions.  Provided instances for `BlockfrostClient`, `IO` and `ClientM`.

  * Additions
    * Export `getTxRedeemers` from `Blockfrost.Client`

  # Version [0.2.1.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.2.0.0...v0.2.1.0) (2021-11-15)

  * Additions
    * `getAccountAssociatedAddresses` query for `/accounts/{stake_address}/addresses` endpoint
    * `getAccountAssociatedAssets` query for `/accounts/{stake_address}/addresses/assets` endpoint

  # Version [0.2.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.1.0.0...v0.2.0.0) (2021-10-29)

  * Alonzo additions
    * `getTxRedeemers` for `/txs/${hash}/redeemers` endpoint
    * `listScripts` for `/scripts` endpoint, principled `listScripts'`
    * `getScript` for `/scripts/${script_hash}` endpoint
    * `getScriptRedeemers` for `/scripts/${script_hash}/redeemers` endpoint, principled `getScriptRedeemers'`
    * `getAddressUtxosAsset` for `/addresses/${address}/utxos/${asset}`, principled `getAddressUtxosAsset'`
    * `getScriptDatum` for `/scripts/datum/${datum_hash}` endpoint
    * `getScriptJSON` for `/scripts/${script_hash}/json` endpoint
    * `getScriptCBOR` for `/scripts/${script_hash}/cbor` endpoint

  # Version [0.1.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/initial...v0.1.0.0) (2021-09-14)

  * Added `allPages`, re-exported couple more pagination helpers
  * Initial release

  ---

  `blockfrost-client` uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org

changelog-type: markdown
description: |
  # blockfrost-client

  Haskell SDK for [Blockfrost.io](https://blockfrost.io) API.

  ## Development shell

  ```sh
  nix-shell # from repository root, optional
  cabal repl blockfrost-client
  ```

  ## Usage

  [Blockfrost.io](https://blockfrost.io) API token is required to use this SDK.

  ### Obtaining token

  Create a project at [blockfrost.io](https://blockfrost.io) and save the
  generated token to a file.

  For authentication, client uses a `Project` type which carries an environment and a token itself, for example `Project Testnet "someToken"`.

  #### Project from file

  Instead of constructing this type manually, you can load the `Project`
  from file using `projectFromFile "/secrets/blockfrost-testnet-token"`.

  In this case, token needs to be prefixed with the enviromnent to which
  it belongs to. The format expected is `<env><token>` (similar to human readable
  identifiers used for Cardano keys and addresses), examples:

  * `testnet123notArealToken`
  * `mainnet456notRealEither`
  * `ipfs789mightBeARealOne`

  ### Using environment variables

  In similar manner to loading project from file, you can use
  `projectFromEnv` function to load the `Project` from file
  pointed to by `BLOCKFROST_TOKEN_PATH` environment variable.

  For custom variable name, a principled version `projectFromEnv' "CUSTOM_ENV_VAR"` can be used instead.

  ## Exploring the API

  You can now perform queries from `cabal repl blockfrost-client`, an example session follows:

  ```haskell
  λ: testnet <- projectFromFile "/secrets/blockfrost.testnet.token"
  λ: testnet
  Project {projectEnv = Testnet, projectId = "censored"}
  λ: runBlockfrost testnet $ getLatestBlock
  Right (Block {_blockTime = 1629716610s, ... })
  λ: runBlockfrost testnet $ listPools
  Right [PoolId "pool1adur9jcn0dkjpm3v8ayf94yn3fe5xfk2rqfz7rfpuh6cw6evd7w", ... ]
  ```

  ## Pagination and sorting

  Some API functions have a variant with trailing `'`. These accept
  `Paged` and `SortOrder` arguments for querying multiple pages
  and setting a custom sort order.

  For example to query the second page of pool list, we can use `listPools'`

  ```haskell
  λ: runBlockfrost testnet $ listPools' (page 2) desc
  ```

  To use default ordering (which is `asc` or `Ascending`), you can just use re-exported `def` from [Data.Default](https://hackage.haskell.org/package/data-default/docs/Data-Default.html).

  ```haskell
  λ: runBlockfrost testnet $ listPools' (page 2) def
  ```

  Similar, to just change an ordering but use default page size and a first page:

  ```haskell
  λ: runBlockfrost testnet $ listPools' def desc
  ```

  ## Catching errors

  We can use `tryError` inside `BlockfrostClient` monad to try a call,
  when we it may fail (dealing with external inputs, enumerating addresses).

  Complete program example with error handling:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE ScopedTypeVariables #-}
  module Main
    where

  import Blockfrost.Client

  main = do
    -- reads token from BLOCKFROST_TOKEN_PATH
    -- environment variable. It expects token
    -- prefixed with Blockfrost environment name
    -- e.g.: testnet-someTokenHash
    prj <- projectFromEnv
    res <- runBlockfrost prj $ do
      latestBlocks <- getLatestBlock
      (ers :: Either BlockfrostError [AccountReward]) <-
          tryError $ getAccountRewards "gonnaFail"
      pure (latestBlocks, ers)

    print res
  ```
description-type: markdown
hash: f72cae38d971fafa5f9d74b758eb7163f4e2232197e87b2365df819eefd7ecaf
homepage: https://github.com/blockfrost/blockfrost-haskell
latest: 0.9.1.0
license-name: Apache-2.0
maintainer: srk@48.io
synopsis: blockfrost.io basic client
test-bench-deps:
  base: '>=4.7 && <5'
  blockfrost-client: '>=0'
  hspec: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  tasty-hunit: '>=0'
