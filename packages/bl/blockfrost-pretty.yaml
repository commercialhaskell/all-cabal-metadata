homepage: https://github.com/blockfrost/blockfrost-haskell
changelog-type: markdown
hash: fc391eb9cc156b19f93f4fc38ff4f1791de40ccd32612333c0f99cf2421c46ad
test-bench-deps: {}
maintainer: srk@48.io
synopsis: blockfrost.io pretty-printing utilities
changelog: |+
  # Version [0.1.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/initial...0.1.0.0) (2021-09-14)

  * Initial release

  ---

  `blockfrost-pretty` uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org

basic-deps:
  safe-money: -any
  base: '>=4.7 && <5'
  time: -any
  text: -any
  blockfrost-api: -any
  data-default: -any
  lens: -any
  prettyprinter: -any
  prettyprinter-ansi-terminal: -any
all-versions:
- 0.1.0.0
author: blockfrost.io
latest: 0.1.0.0
description-type: markdown
description: |
  # blockfrost-pretty

  Pretty printing for Ada/Lovelace values and
  some Blockfrost types.

  Example of pretty printing lovelace values.

  ```haskell
  λ: :set -XNumericUnderscores
  λ: import Blockfrost.Pretty
  λ: import Data.Text.IO
  λ: Data.Text.IO.putStrLn $ prettyLovelaces 123_456
  123 456 lovelaces
  λ: Data.Text.IO.putStrLn $ prettyLovelaces 42_123_456
  42.123456 ₳
  λ: Data.Text.IO.putStrLn $ prettyLovelaces' testnetConfig 42_123_456
  42.123456 t₳
  λ: Data.Text.IO.putStrLn $ prettyLovelaces' (testnetConfig { pcUnicode = False }) 42_123_456
  42.123456 tADA
  ```

  ## Using `Prettyprinter`

  To pretty print a `Block` to terminal with colors,
  we use [prettyprinter](https://hackage.haskell.org/package/prettyprinter) package
  with [prettyprinter-ansi-terminal](https://hackage.haskell.org/package/prettyprinter-ansi-terminal).

  Example:

  ```haskell
  λ: import Prettyprinter
  λ: import Prettyprinter.Render.Terminal
  λ: import Data.Text.IO

  λ: Data.Text.IO.putStrLn $ renderStrict $ layoutPretty defaultLayoutOptions $ prettyBlock b
  ```
license-name: Apache-2.0
