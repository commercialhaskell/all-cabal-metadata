all-versions:
- 0.0.0.0
- 0.0.0.1
author: ''
basic-deps:
  Blammo: '>=2.0.0.0'
  aeson: '>=1.5.2.0'
  base: '>=4.13.0.0 && <5'
  bytestring: '>=0.10.10.1'
  case-insensitive: '>=1.2.1.0'
  clock: '>=0.8'
  http-types: '>=0.12.3'
  monad-logger-aeson: '>=0.4.0.3'
  text: '>=1.2.4.0'
  unliftio-core: '>=0.1.2.0'
  wai: '>=3.2.2.1'
changelog: |
  ## [_Unreleased_](https://github.com/freckle/blammo/compare/Blammo-wai-v0.0.0.1..main)

  ## [v0.0.0.1](https://github.com/freckle/blammo/compare/Blammo-wai-v0.0.0.0...Blammo-wai-v0.0.0.1)

  - Don't show invalid details when logging raw responses

  ## [v0.0.0.0](https://github.com/freckle/blammo/tree/Blammo-wai-v0.0.0.0/Blammo-wai)

  First release
changelog-type: markdown
description: |
  # Blammo-wai

  Integration of [Blammo](https://hackage.haskell.org/package/Blammo)
  with [wai](https://hackage.haskell.org/package/wai).

  <!--
  ```haskell
  {-# LANGUAGE DeriveAnyClass #-}
  {-# LANGUAGE DeriveGeneric #-}
  {-# LANGUAGE DerivingVia #-}
  {-# LANGUAGE EmptyCase #-}
  {-# LANGUAGE EmptyDataDeriving #-}
  {-# LANGUAGE TypeFamilies #-}

  module Main (module Main) where

  import Prelude

  import Control.Exception (displayException)
  import Control.Monad (when)
  import Data.Aeson
  import Data.Text (Text)
  import Text.Markdown.Unlit ()
  import Control.Lens (lens)
  ```
  -->

  ```haskell
  -- Blammo
  import Blammo.Logging

  -- wai
  import Network.Wai (Middleware)

  -- Blammo-wai
  import Network.Wai.Middleware.Logging

  -- warp
  import qualified Network.Wai.Handler.Warp as Warp

  -- yesod
  import Yesod.Core (Yesod)
  import qualified Yesod.Core as Yesod
  ```

  <!--
  ```haskell
  main :: IO ()
  main = pure ()
  ```
  -->

  ```haskell
  data App = App
    { appLogger :: Logger
    -- etc.
    }

  instance HasLogger App where
    loggerL = lens appLogger $ \x y -> x {appLogger = y}
  ```

  ## Integration with WAI

  ```haskell
  waiMiddleware :: App -> Middleware
  waiMiddleware app =
    addThreadContext ["app" .= ("my-app" :: Text)]
      . requestLogger app
      . Yesod.defaultMiddlewaresNoLogging
  ```

  ## Integration with Warp

  ```haskell
  warpSettings :: App -> Warp.Settings
  warpSettings app = Warp.setOnException onEx $ Warp.defaultSettings
   where
    onEx _req ex =
      when (Warp.defaultShouldDisplayException ex)
        $ runWithLogger app
        $ logError
        $ "Warp exception" :# ["exception" .= displayException ex]
  ```

  ## Integration with Yesod

  <!--
  ```haskell
  instance Yesod.RenderRoute App where
    data Route App deriving stock Eq
    renderRoute = \case{}
  ```
  -->

  ```haskell
  instance Yesod App where
    messageLoggerSource app _logger loc source level msg =
      runWithLogger app $ monadLoggerLog loc source level msg
  ```
description-type: markdown
hash: 82f8e220b1c816aad7631c5a67e207a15e3e87e8e73d2ea5d3ebe98863d3856c
homepage: https://github.com/freckle/blammo#readme
latest: 0.0.0.1
license-name: MIT
maintainer: Freckle Education
synopsis: Using Blammo with WAI
test-bench-deps:
  Blammo: '>=2.0.0.0'
  Blammo-wai: '>=0'
  aeson: '>=1.5.2.0'
  base: '>=4.13.0.0 && <5'
  lens: '>=4.18.1'
  markdown-unlit: '>=0.5.1'
  text: '>=1.2.4.0'
  wai: '>=3.2.2.1'
  warp: '>=3.3.13'
  yesod-core: '>=1.6.18.8'
