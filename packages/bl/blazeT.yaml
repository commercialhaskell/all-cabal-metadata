all-versions:
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
author: Johannes Gerer
basic-deps:
  base: '>=4.0.0.0 && <5'
  blaze-builder: '>=0.2'
  blaze-html: '>=0.6.0.0'
  blaze-markup: '>=0.6.0.0'
  bytestring: '>=0'
  mtl: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: "# blazeT [![Build Status](https://travis-ci.org/johannesgerer/blazeT.svg?branch=master)](https://travis-ci.org/johannesgerer/blazeT)
  [![Hackage](https://img.shields.io/hackage/v/blazeT.svg)](https://hackage.haskell.org/package/blazeT)\n\nA
  true monad (transformer) version of the\n[blaze-markup](https://hackage.haskell.org/package/blaze-markup)
  and\n[blaze-html](https://hackage.haskell.org/package/blaze-html)\nlibraries:\n\n>
  BlazeHtml is a blazingly fast HTML combinator library for the\n> Haskell programming
  language. It embeds HTML templates in Haskell\n> code for optimal efficiency and
  composability.\n\n— from https://jaspervdj.be/blaze/.\n\n## What’s wrong with blaze?\n\nBlaze’s
  `Markup` and `Html` **cannot be used as Monads**, let alone Monad transformers.\n\nWhile
  blaze's `Markup` and `Html` types have `Monad` instances and can\nleverage the concise
  `do` notation, they do not satisfy the\n[Monad Laws](https://hackage.haskell.org/package/base-4.8.0.0/docs/Control-Monad.html#t:Monad).\n\n##
  How do Monads help? - Use Cases\n\nThe `MarkupT` Monad Transformer enables us to
  write Markup (e.g. HTML)\ntemplates that have access to all those Monads you cannot
  live without\nanymore.\n\nThe first things that come to mind:\n\n* Accessing an
  environment\n([MonadReader](https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Reader-Class.html))\n*
  Logging and other diagnostic output\n([MonadWriter](https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Writer-Class.html)),\n*
  `IO` (e.g. for database access)\n\n\nThe reason for the existence of this library
  is its use\nin [Lykah](http://johannesgerer.com/Lykah), which powers my personal\nwebsite\n[http://johannesgerer.com](http://johannesgerer.com/johannesgerer.com).
  In\nLykah, the HTML templates have access to the whole site structure (to\nbuild
  things like menus or blog post lists) and automatically check,\ninsert and keep
  track of referenced pages and assets, which turns out\nto be very useful functionality
  of a static website generator.\n\n## Usage\n\n### Integrating with your existing
  code\n\nThe library is intended to serve as a drop-in replacement for the\n`blaze-markup`
  and `blaze-html` libraries and should be backwards\ncompatible:\n\nSimply replace
  your `module Text.Blaze.*` imports with `module\nText.BlazeT.*` and it should give
  the same results.\n\nFor usage of blaze check out\ntheir [documentation](https://jaspervdj.be/blaze/).\n\n###
  Unleash the monads\n\n[Text.BlazeT](https://hackage.haskell.org/package/blazeT/docs/Text-BlazeT.html)\nexports
  `runWith` and `execWith`, which work on any\n`Text.BlazeT.Renderer.*`. The rendered
  markup will be returned within\nthe base monad, whose actions can be\n[`lift`ed](https://hackage.haskell.org/package/transformers-0.5.2.0/docs/Control-Monad-Trans-Class.html)\ninto
  the Markup, as shown in the following example (from\n[here](src/Readme.hs)):\n\n```Haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nimport Data.Time (getCurrentTime)\nimport Text.BlazeT.Html5
  hiding (main)\nimport Text.BlazeT.Renderer.String\nimport Control.Monad.Trans.Class
  (lift)\n\n-- Backwords compatible Blaze HTML\nold :: Markup\nold = do\n  p $ \"created
  with blaze-html\"\n\n-- BlazeT HTML with lifted IO actions\nnew :: MarkupT IO ()\nnew
  = do\n  time <- lift getCurrentTime\n  p $ string $ \"created with blazeT at \"
  ++ show time\n\nmain :: IO ()\nmain = do\n  putStrLn $            renderMarkup old\n
  \ putStrLn =<< execWith renderMarkup new\n  \n```\n\nprints: \n\n```HTML\n<p>created
  with blaze-html</p>\n<p>created with blazeT at 2016-10-26 01:09:16.969147361 UTC</p>\n```\n\n##
  Installation\n\n1. To make it available on your system (or sandbox) use `cabal install
  blazeT`. \n\n2. To play around with the source, obtain by cloning this repo or use\n
  \  `cabal get blazet`, enter the directory and run:\n\n```bash\ncabal sandbox init
  #optional\ncabal install\n```\n    \n## Documentation on [Hackage](https://hackage.haskell.org/package/blazeT)\n\n##
  Implementation\n\n... is contained\nin\n[Text.BlazeT.Internals](https://hackage.haskell.org/package/blazeT/docs/Text-BlazeT-Internals.html).\n\nEverything
  is build around the simple `newtype` definition of the\n`MarkupT` transformer, which
  makes use\nthe\n[Monoid](https://hackage.haskell.org/package/base-4.7.0.2/docs/Data-Monoid.html)
  instance\nof `Blaze.Markup` and is simply a `WriterT` writing `Blaze.Markup`:\n\n```Haskell\nnewtype
  MarkupT m a = MarkupT { fromMarkupT :: WriterT B.Markup m a }\n```\n\nThe old `Text.Blaze.Markup`
  type is replaced by a rank-2 version of\nthe transformer:\n\n```Haskell\ntype Markup
  = forall m . Monad m => MarkupT m ()\n```\n\nWrappers used to lift all `Blaze` entities
  into `BlazeT` are trivially\nexpressible using basic `WriterT` class methods. Wrapping\n`Blaze.Markup`
  is simply `WriterT.tell`:\n\n```Haskell\nwrapMarkupT :: Monad m => B.Markup -> MarkupT
  m ()\nwrapMarkupT = tell\n```\nWrapping functions that modify `Blaze.Markup` is
  simply  `WriterT.censor`:\n\n```Haskell\nwrapMarkupT2 :: Monad m => (B.Markup ->
  B.Markup) -> MarkupT m a -> MarkupT m a\nwrapMarkupT2 = censor\n```\n\n"
description-type: markdown
hash: ec58f39b205084106580d2ff09f2a27a268268252813a87b2e4e6782eede2101
homepage: http://johannesgerer.com/blazeT
latest: 0.0.6
license-name: MIT
maintainer: Johannes Gerer <oss@johannesgerer.com>
synopsis: A true monad (transformer) version of the blaze-markup and blaze-html libraries
test-bench-deps: {}
