all-versions:
- 0.1.0.0
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
author: Tobias Markus <tobias AT miglix DOT eu>
basic-deps:
  arithmoi: '>=0.3 && <0.10'
  base: '>=4.7 && <4.13'
  binary: '>=0.7 && <0.9'
  bytestring: '>=0.9 && <0.11'
  hashable: '>=1.2 && <1.4'
  hedis: '>=0.5 && <0.13'
changelog: |
  0.1.0.4
  ------
  * Compatibility with GHC 8.6/base-4.12

  0.1.0.3
  ------
  * Compatibility with GHC 8.0/base-4.9

  0.1.0.2
  ------
  * Fix bad Hackage upload of 0.1.0.2 (it accidentally contained a
    breaking API change to be released in a later version)

  0.1.0.1
  ------
  * README improvements
  * Compatibility with GHC 7.8/base-4.7
  * Test suite improvements

  0.1.0.0
  ------
  Initial release
changelog-type: markdown
description: |
  # bloomfilter-redis [![Build Status](https://travis-ci.org/hesiod/bloomfilter-redis.svg?branch=master)](https://travis-ci.org/hesiod/bloomfilter-redis)

  Distributed bloom filters on Redis (using the Hedis client).

  The hash family algorithm is partly inspired by
  [Brian O'Sullivan's bloomfilter package](https://hackage.haskell.org/package/bloomfilter).

  ## Features

  * Implementation of the FNV-1/FNV-1a hash function is included
  * Automatic derivation of a hash family from a single hash function
    as described by Kirsch and Mitzenmacher
  * The bloom filter is distributed without extra effort since
    Redis does the heavy lifting
  * Every `Hashable` type can be added to the bloom filter
  * Every `Binary` type can be hashed

  ## Benchmark and Testing suite

  A benchmark for the FNV hash function is included and can
  be invoked using `cabal bench` or `stack bench`.
  An HTML report is generated as `report.html`.

  A testing suite using `tasty` is included.

  ## Further Information
  ### Todo

  * Separate the FNV hash function into a separate package
  * The actual operations (`addBF`, `queryBF`, etc) should
    ideally live in a `MonadReader (Bloom a)`, but this requires
    some work on the Hedis side because of `RedisCtx`

  ### Caveats

  * The only supported FNV hash sizes are 32 and 64 bits.
    Support for larger widths is a matter of having a
    data type with instances for `FiniteBits` and `Num`.
  * The offset basis (`fnvOffsetBasis`) is not correctly
    computed, although this has absolutely no effect on
    the performance of the hash function in practice.
description-type: markdown
hash: 6f4df0323101a73b1ecc8cc913089eb84ebacb12fc67af3de1ee673095fb8bb7
homepage: ''
latest: 0.1.0.4
license-name: BSD-3-Clause
maintainer: Tobias Markus <tobias AT miglix DOT eu>
synopsis: Distributed bloom filters on Redis (using the Hedis client).
test-bench-deps:
  QuickCheck: '>=2.8 && <2.13'
  base: '>=0'
  bloomfilter-redis: '>=0'
  bytestring: '>=0.9 && <0.11'
  criterion: '>=1.1 && <1.6'
  hashable: '>=1.2 && <1.4'
  hedis: '>=0.5 && <0.13'
  random: '>=1.1 && <1.2'
  tasty: '>=0.8 && <1.3'
  tasty-hunit: '>=0.9 && <0.11'
  tasty-quickcheck: '>=0.8 && <0.11'
  tasty-rerun: '>=1.1 && <1.2'
