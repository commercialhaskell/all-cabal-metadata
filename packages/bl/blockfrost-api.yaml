homepage: https://github.com/blockfrost/blockfrost-haskell
changelog-type: markdown
hash: 613b892ba0c9621fc92e91eb5fed5c88cc560cef8891dab9fece3e04fcb3300c
test-bench-deps:
  safe-money: -any
  bytestring: -any
  base: '>=4.7 && <5'
  hspec: -any
  text: -any
  blockfrost-api: -any
  tasty-hspec: -any
  data-default: -any
  raw-strings-qq: -any
  tasty-hunit: -any
  tasty: -any
  aeson: -any
  vector: -any
maintainer: srk@48.io
synopsis: API definitions for blockfrost.io
changelog: |+
  # Version [0.3.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.2.1.0...v0.3.0.0) (2022-02-07)

  * Changes
    * `UtxoInput` and `UtxoOutput` `dataHash` fields changed from `Maybe Text` to `Maybe DataHash`
    * `TransactionRedeemer`
      * `scriptHash` field changed from `Maybe Text` to `Maybe ScriptHash`
      * `datumHash` field changed from `Maybe Text` to `Maybe DatumHash`

  * Additions
    * `Transaction` grows `Bool`ean `validContract` field
    * Lenses for `TransactionRedeemer`

  # Version [0.2.1.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.2.0.0...v0.2.1.0) (2021-11-15)

  * Additions
    * `ToSample` instances for `ScriptDatum`, `ScriptJSON`, `ScriptCBOR`
    * `/accounts/{stake_address}/addresses` endpoint
    * `/accounts/{stake_address}/addresses/assets` endpoint

  # Version [0.2.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/v0.1.0.0...v0.2.0.0) (2021-10-29)

  * Breaking changes
    * `AddressUTXO` renamed to `AddressUtxo` along with its fields
    * `ProtocolParams` `collateralPercent` field type changed from `Double` to `Integer`
    * `TransactionMetaCBOR` now uses `metadata` field instead of `CBORMetadata` which holds the same CBOR value as before but without `\\x` prefix

  * Alonzo additions
    * `collateral` field to `UtxoInput`
    * `redeemerCount` field to `Transaction`
    * `dataHash` field to `UtxoInput` and `UtxoOutput`
    * `dataHash` field to `AdressUTXO`
    * `outputIndex` field to `UtxoOutput`
    * `script` field to `AddressInfo`
    * `datumHash` field to `ScriptRedeemer`
    * `scriptHash` and `datumHash` field to `TransactionRedeemer`
    * `NetworkSupply`
      * `locked` field representing supply locked by all scripts
      * `treasury` field (current treasury supply)
      * `reserves` field (current reserves supply)
    * `/txs/${hash}/redeemers` endpoint with `TransactionRedeemer` and `ValidationPurpose` types
    * Epoch cost model parameters to `ProtocolParams`
    * `/scripts` endpoint and `ScriptHash` newtype
    * `/scripts/${script_hash}` endpoint with `Script` data type
    * `/scripts/${script_hash}/redeemers` endpoint with `ScriptRedeemer` data type
    * `/scripts/datum/${datum_hash}` endpoint with `ScriptDatum` data type
    * `/scripts/${script_hash}/json` endpoint with `ScriptJSON` data type
    * `/scripts/${script_hash}/cbor` endpoint with `ScriptCBOR` data type

  * Other
   * Added `liveDelegators` field to `PoolInfo`

  # Version [0.1.0.0](https://github.com/blockfrost/blockfrost-haskell/compare/initial...v0.1.0.0) (2021-09-14)

  * Initial release

  ---

  `blockfrost-api` uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org

basic-deps:
  safe-money: -any
  servant-docs: -any
  bytestring: -any
  base: '>=4.7 && <5'
  data-default-class: -any
  time: -any
  text: -any
  servant: ^>=0.18
  lens: -any
  quickcheck-instances: -any
  servant-multipart-api: -any
  deriving-aeson: -any
  QuickCheck: -any
  aeson: -any
  template-haskell: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.0
author: blockfrost.io
latest: 0.3.0.0
description-type: markdown
description: |
  # blockfrost-api

  Core types and Servant API definitions.

  ## Exploring data types

  All data types have a `ToSample` instance
  for [servant-docs](https://hackage.haskell.org/package/servant-docs)
  which can be used to get a sample response in `cabal repl`:

  ``` haskell
  λ: import Data.Proxy
  λ: import Servant.Docs
  λ: Just block = toSample (Proxy :: Proxy Block)
  λ: _blockHash block
  BlockHash "4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
  ```

  ## Lenses

  Instead of using long record names, it is recommended
  to use provided lenses and a [lens](https://hackage.haskell.org/package/lens) or similar package.

  ``` haskell
  λ: import Control.Lens (^.)
  λ: import Blockfrost.Lens
  λ: block ^. epoch
  Just (Epoch 425)
  ```

  ## Monetary values

  Ada values and values of assets are represented using [`Discrete`](https://hackage.haskell.org/package/safe-money/docs/Money.html#t:Discrete) type
  from [safe-money](https://hackage.haskell.org/package/safe-money) library.

  We use a type alias `type Lovelaces = Money.Discrete "ADA" "lovelace"`
  for Ada values and [`SomeDiscrete`](https://hackage.haskell.org/package/safe-money/docs/Money.html#t:SomeDiscrete) for asset values. This should allow working
  with monetary values safely, preventing summing different currencies.
  See the [blog post](https://ren.zone/articles/safe-money) by the library author.

  ``` haskell
  λ: block ^. fees
  Just (Discrete "ADA" 1000000%1 592661)
  ```
license-name: Apache-2.0
