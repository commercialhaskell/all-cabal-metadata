all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
author: Athan Clark
basic-deps:
  QuickCheck: '>=0'
  attoparsec: '>=0'
  attoparsec-binary: '>=0.2'
  base: '>=4.8 && <4.12'
  bytestring: '>=0'
  pipes: '>=4.0 && <4.4'
  pipes-bytestring: '>=2.1.6'
  pipes-text: '>=0.0.2.5'
  text: '>=0'
  vector-sized: '>=0'
changelog: |
  # Changelog for z85-bytestring

  ## Unreleased changes
changelog-type: markdown
description: |
  # z85

  [z85](https://rfc.zeromq.org/spec:32/Z85/) is a binary string codec, like hexadecimal or base64, but has a higher density
  of compression than the former, due to its use of a higher base value of 85 than base 64. ByteStrings just need to be
  a length of a multiple of 4 (a Word32String might be a better name).

  There are multiple layers of exposed implementation in this package

  - `Word32 <-> Vector 4 Z85Char` for low level work
  - Attoparsec `Parser ByteString <-> Parser Text` for slightly higher level parsing of strict data
  - Pipes `Pipe ByteString Text <-> Pipe Text ByteString` for encoding / decoding streams of strict data
  - Casual `Lazy.ByteString ~ Lazy.Text` functions for encoding / decoding lazy data.
description-type: markdown
hash: a498a4ae735587ae3e2e427b4f7c5c54fe2c0b40bf91e19d4ca3ebb931dbb991
homepage: https://github.com/athanclark/z85#readme
latest: 0.0.2
license-name: BSD-3-Clause
maintainer: athan.clark@localcooking.com
synopsis: Implementation of the z85 binary codec
test-bench-deps:
  QuickCheck: '>=0'
  attoparsec: '>=0'
  attoparsec-binary: '>=0.2'
  base: '>=4.8 && <4.12'
  bytestring: '>=0'
  pipes: '>=4.0 && <4.4'
  pipes-bytestring: '>=2.1.6'
  pipes-text: '>=0.0.2.5'
  quickcheck-instances: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  vector-sized: '>=0'
  z85: '>=0'
