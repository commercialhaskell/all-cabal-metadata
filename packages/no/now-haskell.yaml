all-versions:
- 0.1.0.0
author: Ian Duncan
basic-deps:
  Cabal: '>=0'
  aeson: '>=1.0 && <2.0'
  aeson-pretty: '>=0'
  base: '>=4.7 && <5.0'
  base64-bytestring: '>1.0 && <2.0'
  bytestring: '>=0.10.0 && <0.11'
  case-insensitive: '>=0'
  containers: '>=0.5.0.0 && <0.8'
  deepseq: '>=1.4 && <1.6'
  directory: '>=0'
  exceptions: '>=0.4'
  filepath: '>=0'
  fused-effects: '>=0'
  ghc-lib-parser: '>=0'
  http-api-data: '>=0.3.4 && <0.5'
  http-client: '>=0.5 && <0.6'
  http-client-tls: '>=0'
  http-media: '>=0.4 && <0.8'
  http-types: '>=0.8 && <0.13'
  iso8601-time: '>=0.1.3 && <0.2.0'
  katip: '>=0.8 && <1.0'
  memory: '>=0'
  microlens: '>=0.4.3 && <0.5'
  mtl: '>=2.2.1'
  network: '>=2.6.2 && <2.9'
  random: '>=1.1'
  safe-exceptions: <0.2
  stack: '>=0'
  text: '>=0.11 && <1.3'
  time: '>=1.5 && <1.10'
  transformers: '>=0.4.0.0'
  unordered-containers: '>=0'
  vector: '>=0.10.9 && <0.13'
  wai: '>=0'
  yaml: '>=0'
changelog: ''
changelog-type: ''
description: "## OpenAPI Auto-Generated [http-client](https://www.stackage.org/lts-10.0/package/http-client-0.5.7.1)
  Bindings to `AWS Lambda Runtime API`\n\nThe library in `lib` provides auto-generated-from-OpenAPI
  [http-client](https://www.stackage.org/lts-10.0/package/http-client-0.5.7.1) bindings
  to the AWS Lambda Runtime API API.\n\nOpenApi Version: 3.0.0\n\n## Installation\n\nInstallation
  follows the standard approach to installing Stack-based projects.\n\n1. Install
  the [Haskell `stack` tool](http://docs.haskellstack.org/en/stable/README).\n2. To
  build the package, and generate the documentation (recommended):\n```\nstack haddock\n```\nwhich
  will generate docs for this lib in the `docs` folder.\n\nTo generate the docs in
  the normal location (to enable hyperlinks to external libs), remove \n```\nbuild:\n
  \ haddock-arguments:\n    haddock-args:\n    - \"--odir=./docs\"\n```\nfrom the
  stack.yaml file and run `stack haddock` again.\n\n3. To run unit tests:\n```\nstack
  test\n```\n\n## OpenAPI-Generator\n\nThe code generator that produced this library,
  and which explains how\nto obtain and use the openapi-generator cli tool lives at\n\nhttps://openapi-generator.tech\n\nThe
  _generator-name_ argument (`--generator-name`) passed to the cli tool used should
  be\n\n```\nhaskell-http-client\n```\n\n### Unsupported OpenAPI Features\n\n* Model
  Inheritance\n\nThis is beta software; other cases may not be supported.\n\n### Codegen
  \"additional properties\" parameters\n\nThese options allow some customization of
  the code generation process.\n\n**haskell-http-client additional properties:**\n\n|
  OPTION                          | DESCRIPTION                                                                                                                   |
  DEFAULT  | ACTUAL                                |\n| -------------------------------
  | -----------------------------------------------------------------------------------------------------------------------------
  | -------- | ------------------------------------- |\n| allowFromJsonNulls              |
  allow JSON Null during model decoding from JSON                                                                               |
  true     | true              |\n| allowNonUniqueOperationIds      | allow *different*
  API modules to contain the same operationId. Each API must be imported qualified
  \                           | false    | false    |\n| allowToJsonNulls                |
  allow emitting JSON Null during model encoding to JSON                                                                        |
  false    | false                |\n| baseModule                      | Set the base
  module namespace                                                                                                 |
  \         | AWSLambdaRuntime                      |\n| cabalPackage                    |
  Set the cabal package name, which consists of one or more alphanumeric words separated
  by hyphens                             |          | aws-lambda-runtime                    |\n|
  cabalVersion                    | Set the cabal version number, consisting of a
  sequence of one or more integers separated by dots                              |
  0.1.0.0  | 0.1.0.0                    |\n| customTestInstanceModule        | test
  module used to provide typeclass instances for types not known by the generator
  \                                         |          |         |\n| configType                      |
  Set the name of the type used for configuration                                                                               |
  \         | AWSLambdaRuntimeConfig                      |\n| dateFormat                      |
  format string used to parse/render a date                                                                                     |
  %Y-%m-%d | %Y-%m-%d                      |\n| dateTimeFormat                  |
  format string used to parse/render a datetime. (Defaults to [formatISO8601Millis][1]
  when not provided)                       |          |                   |\n| generateEnums
  \                  | Generate specific datatypes for OpenAPI enums                                                                                 |
  true     | true                   |\n| generateFormUrlEncodedInstances | Generate
  FromForm/ToForm instances for models used by x-www-form-urlencoded operations (model
  fields must be primitive types) | true     | true |\n| generateLenses                  |
  Generate Lens optics for Models                                                                                               |
  true     | true                  |\n| generateModelConstructors       | Generate
  smart constructors (only supply required fields) for models                                                          |
  true     | true       |\n| inlineMimeTypes                 | Inline (hardcode) the
  content-type and accept parameters on operations, when there is only 1 option                           |
  true     | true                 |\n| modelDeriving                   | Additional
  classes to include in the deriving() clause of Models                                                              |
  \         |                    |\n| requestType                     | Set the name
  of the type used to generate requests                                                                            |
  \         | AWSLambdaRuntimeRequest                     |\n| strictFields                    |
  Add strictness annotations to all model fields                                                                                |
  true     | true                  |\n| useKatip                        | Sets the
  default value for the UseKatip cabal flag. If true, the katip package provides logging
  instead of monad-logger       | true     | true                      |\n\n[1]: https://www.stackage.org/haddock/lts-9.0/iso8601-time-0.1.4/Data-Time-ISO8601.html#v:formatISO8601Millis\n\nAn
  example setting _strictFields_ and _dateTimeFormat_:\n\n```\njava -jar openapi-generator-cli.jar
  generate -i petstore.yaml -g haskell-http-client -o output/haskell-http-client -DstrictFields=true
  -DdateTimeFormat=\"%Y-%m-%dT%H:%M:%S%Q%z\"\n```\n\nView the full list of Codegen
  \"config option\" parameters with the command:\n\n```\njava -jar openapi-generator-cli.jar
  config-help -g haskell-http-client\n```\n\n## Usage Notes\n\n### Example Petstore
  Haddock documentation\n\nAn example of the generated haddock documentation targeting
  the server http://petstore.swagger.io/ (Petstore) can be found [here][2]\n\n[2]:
  https://hackage.haskell.org/package/swagger-petstore\n\n### Example Petstore App\n\nAn
  example application using the auto-generated haskell-http-client bindings for the
  server http://petstore.swagger.io/ can be found [here][3]\n\n[3]: https://github.com/openapitools/openapi-generator/tree/master/samples/client/petstore/haskell-http-client/example-app\n\nThis
  library is intended to be imported qualified.\n\n### Modules\n\n| MODULE              |
  NOTES                                               |\n| ------------------- | ---------------------------------------------------
  |\n| AWSLambdaRuntime.Client    | use the \"dispatch\" functions to send requests
  \      |\n| AWSLambdaRuntime.Core      | core funcions, config and request types
  \            |\n| AWSLambdaRuntime.API       | construct api requests                              |\n|
  AWSLambdaRuntime.Model     | describes api models                                |\n|
  AWSLambdaRuntime.MimeTypes | encoding/decoding MIME types (content-types/accept)
  |\n| AWSLambdaRuntime.ModelLens | lenses for model fields                             |\n|
  AWSLambdaRuntime.Logging   | logging functions and utils                         |\n\n\n###
  MimeTypes\n\nThis library adds type safety around what OpenAPI specifies as\nProduces
  and Consumes for each Operation (e.g. the list of MIME types an\nOperation can Produce
  (using 'accept' headers) and Consume (using 'content-type' headers).\n\nFor example,
  if there is an Operation named _addFoo_, there will be a\ndata type generated named
  _AddFoo_ (note the capitalization), which\ndescribes additional constraints and
  actions on the _addFoo_ operation\nvia its typeclass instances. These typeclass
  instances can be viewed\nin GHCi or via the Haddocks.\n\n* required parameters are
  included as function arguments to _addFoo_\n* optional non-body parameters are included
  by using  `applyOptionalParam`\n* optional body parameters are set by using  `setBodyParam`\n\nExample
  code generated for pretend _addFoo_ operation: \n\n```haskell\ndata AddFoo \t\ninstance
  Consumes AddFoo MimeJSON\ninstance Produces AddFoo MimeJSON\ninstance Produces AddFoo
  MimeXML\ninstance HasBodyParam AddFoo FooModel\ninstance HasOptionalParam AddFoo
  FooName\ninstance HasOptionalParam AddFoo FooId\n```\n\nthis would indicate that:\n\n*
  the _addFoo_ operation can consume JSON\n* the _addFoo_ operation produces JSON
  or XML, depending on the argument passed to the dispatch function\n* the _addFoo_
  operation can set it's body param of _FooModel_ via `setBodyParam`\n* the _addFoo_
  operation can set 2 different optional parameters via `applyOptionalParam`\n\nIf
  the OpenAPI spec doesn't declare it can accept or produce a certain\nMIME type for
  a given Operation, you should either add a Produces or\nConsumes instance for the
  desired MIME types (assuming the server\nsupports it), use `dispatchLbsUnsafe` or
  modify the OpenAPI spec and\nrun the generator again.\n\nNew MIME type instances
  can be added via MimeType/MimeRender/MimeUnrender\n\nOnly JSON instances are generated
  by default, and in some case\nx-www-form-urlencoded instances (FromFrom, ToForm)
  will also be\ngenerated if the model fields are primitive types, and there are\nOperations
  using x-www-form-urlencoded which use those models.\n\n### Authentication\n\nA haskell
  data type will be generated for each OpenAPI authentication type.\n\nIf for example
  the AuthMethod `AuthOAuthFoo` is generated for OAuth operations, then\n`addAuthMethod`
  should be used to add the AuthMethod config.\n\nWhen a request is dispatched, if
  a matching auth method is found in\nthe config, it will be applied to the request.\n\n###
  Example\n\n```haskell\nmgr <- newManager defaultManagerSettings\nconfig0 <- withStdoutLogging
  =<< newConfig \nlet config = config0\n    `addAuthMethod` AuthOAuthFoo \"secret-key\"\n\nlet
  addFooRequest = \n  addFoo \n    (ContentType MimeJSON) \n    (Accept MimeXML) \n
  \   (ParamBar paramBar)\n    (ParamQux paramQux)\n    modelBaz\n  `applyOptionalParam`
  FooId 1\n  `applyOptionalParam` FooName \"name\"\n  `setHeader` [(\"qux_header\",\"xxyy\")]\naddFooResult
  <- dispatchMime mgr config addFooRequest\n```\n\nSee the example app and the haddocks
  for details.\n"
description-type: markdown
hash: e5c1af2157003cd0ae52b36cf0db73742a434f7d1c2e87445183c3bf7a50887c
homepage: ''
latest: 0.1.0.0
license-name: MIT
maintainer: ian@iankduncan.com
synopsis: Zeit Now haskell-side integration and introspection tools.
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  aws-lambda-runtime: '>=0'
  base: '>=4.7 && <5.0'
  bytestring: '>=0.10.0 && <0.11'
  containers: '>=0'
  hspec: '>=1.8'
  iso8601-time: '>=0'
  mtl: '>=2.2.1'
  semigroups: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0.4.0.0'
  unordered-containers: '>=0'
  vector: '>=0'
