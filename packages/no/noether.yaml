all-versions:
- 0.0.1
author: ''
basic-deps:
  array: '>=0'
  async: '>=0'
  base: <=5.1.0.0
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  ghc-prim: '>=0'
  hashable: '>=0'
  mtl: '>=0'
  mtl-compat: '>=0'
  noether: '>=0'
  pretty-show: '>=0'
  safe: '>=0'
  stm: '>=0'
  text: '>=0'
  transformers: '>=0'
  vector: '>=0'
changelog: |
  # Change log

  noether uses [Semantic Versioning][].
  The change log is available through the [releases on GitHub][].

  [Semantic Versioning]: http://semver.org/spec/v2.0.0.html
  [releases on GitHub]: https://github.com/mrkgnao/noether/releases
changelog-type: markdown
description: "[![ii](https://img.shields.io/badge/IncoherentInstances-%E2%9C%93-brightgreen.svg)]()\n\n#
  Noether\n\nA very WIP number theory / abstract algebra playground in Haskell. \n\nThe
  part I'm working on at present develops a highly polymorphic numeric hierarchy.
  Unlike almost every other project (including the great `subhask`, which is by far
  the biggest inspiration for this project), all typeclasses representing algebraic
  structures are \"tagged\" with the operations that the base type supports. The intention
  is to have, without newtyping, things like automatically specified *L*-vector space
  instances for any *K*-vector space with *K / L* a (nice) field extension.\n\nWhile
  it may not be inevitable, my inexperienced preliminary encoding of these ideas has
  delightful consequences like\n\n```haskell\ninstance {-# INCOHERENT #-}\n         (
  DotProductSpace' k v\n         , DotProductSpace' k w\n         , p ~ Add\n         ,
  m ~ Mul\n         ) => InnerProductSpace DotProduct p m k Add (v, w) where\n```\n\nthat
  I don't know how to \"kill with fire\".\n\nObviously, I'm still exploring the design
  space to try and find a good balance between avoiding arbitrary choices (e.g. no
  privileged `Monoid` instances for `Double` and the like) and a useful level of type
  inference. In large part, this means that I'm trying not to run up against trouble
  with instance resolution and failing hard (see above), or discovering that associated
  types are sometimes less permissive than one would like.\n\nThe numeric hierarchy,
  at present, extends to functions like this:\n\n```haskell\n(%<) :: LeftModule' r
  v => r -> v -> v\nr %< v = leftAct AddP AddP MulP r v\n\n-- | Linear interpolation.\n--
  lerp λ v w = λv + (1 - λ)w\nlerp\n  :: VectorSpace' r v\n  => r -> v -> v -> v\nlerp
  lambda v w = lambda %< v + w >% (one - lambda)\n\nlol :: (Complex Double, Complex
  Double)\nlol =\n  (1, 3) * lerp lambda (3, 3) (4, 5) + (1, 0) >% lambda + v + lambda
  %< w +\n  (lambda, -lambda)\n\n  where\n    lambda :: Complex Double\n    lambda
  = 0.3 :+ 1\n\n    v = (3, 3)\n    w = (2, 7)\n```\n\nA preliminary implementation
  of linear maps between (what should be) free modules is being developed after the
  design in Conal Elliott's \"Reimagining matrices\". The added polymorphism and lack
  of fixed `Scalar a`-esque base fields is an interesting challenge, and Conal's basic
  GADT decomposition of linear maps changes in my case to\n\n```haskell\ndata (\\>)
  :: (* -> * -> * -> *) where\n```\n\nwhere the first \"slot\" is for the base field.
  With a nice `~>` type operator (which is basically `$`), a linear map between two
  *k*-vector space types `a` and `b` has the type \n\n```haskell\nfunc :: k \\> a
  ~> b\n```\n\npaving the way for the representation of the category _k_-**Vect**
  as `(\\>) k :: (* -> * -> *)`.\n\nSome sample function signatures:\n\n```haskell\n\n--
  | Converts a linear map into a function.\napply :: k \\> a ~> b -> a -> b\n\ncompose\n
  \ :: k \\> a ~> b\n  -> k \\>      b ~> c\n  -> k \\> a ~>      c\n```\n\nUsage
  looks like this for now:\n\n```\n> apply (rotate (pi / 4 :: Double)) (1,1)\n(1.1102230246251565e-16,1.414213562373095)\n```\n\n#
  Other stuff\n\nSome other stuff I'm thinking about includes polymorphic numeric
  literals, possibly along the lines of this:\n\n```haskell\ntype family NumericLit
  (n :: Nat) = (c :: * -> Constraint) where\n  NumericLit 0 = Neutral Add\n  NumericLit
  1 = Neutral Mul\n  -- NumericLit 2 = Field Add Mul\n  -- NumericLit n = NumericLit
  (n - 1)\n  NumericLit n = Ring Add Mul\n\nfromIntegerP :: forall n a. (KnownNat
  n, NumericLit n a) => Proxy n -> a\nfromIntegerP p =\n  case sameNat p (Proxy ::
  Proxy 0) of\n    Just prf -> gcastWith prf zero'\n    Nothing -> case sameNat p
  (Proxy :: Proxy 1) of\n      Just prf -> gcastWith prf one'\n      Nothing -> undefined
  -- unsafeCoerce (val (Proxy :: Proxy a))\n        -- where\n        --   val ::
  (Field Add Mul b) => Proxy b -> b\n        --   val _ = one + undefined -- fromIntegerP
  (Proxy :: Proxy (n - 1))\n```\n\nThe original core of the project is a short implementation
  of elliptic curve addition over Q, which I've put on hold temporarily as I try to
  work out the issues outlined above first. This part uses a Protolude \"fork\" called
  Lemmata that I expect will evolve over time.\n"
description-type: markdown
hash: 378164763a2434792d957ea6d7986ba2d066e613805922bda26b8fa684d86f44
homepage: https://github.com/mrkgnao/noether#readme
latest: 0.0.1
license-name: MIT
maintainer: Soham Chowdhury
synopsis: Math in Haskell.
test-bench-deps:
  base: '>=0'
  criterion: '>=0'
  hedgehog: '>=0'
  noether: '>=0'
