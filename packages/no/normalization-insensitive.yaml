homepage: https://github.com/ppelleti/normalization-insensitive
changelog-type: text
hash: 9d8031744f357ff60b0d185a4cf54a5f524a0586f6e7d6457cfc837c0210b060
test-bench-deps:
  test-framework-hunit: '>=0.2.4 && <0.4'
  bytestring: '>=0.9 && <0.12'
  test-framework: '>=0.2.4 && <0.9'
  base: '>=4.7 && <5'
  text: '>=1.1.1 && <1.3'
  criterion: '>=0.6.1 && <1.6'
  normalization-insensitive: -any
  HUnit: '>=1.2.2 && <1.7'
  hashable: '>=1.0 && <1.5'
  deepseq: '>=1.1 && <1.5'
maintainer: Patrick Pelletier <code@funwithsoftware.org>
synopsis: Normalization insensitive string comparison
changelog: |
  2.0.2

  * Support bytestring-0.11.x, criterion-1.5.x, hashable-1.3.x
  * This required pulling in semigroups as a dependency, and NI is now
    an instance of Semigroup


  2.0.1

  * Expose 'normalized'


  2.0.0.1

  * Avoid using Data.ByteString.UTF8.Normalize, which was deprecated in
    unicode-transforms-0.2.0


  2.0

  * New package normalization-insensitive based on case-insensitive-1.2.0.5
basic-deps:
  bytestring: '>=0.9 && <0.12'
  base: '>=4.7 && <5'
  unicode-transforms: '>=0.1.0.1 && <0.4'
  text: '>=1.1.1 && <1.3'
  hashable: '>=1.0 && <1.5'
  deepseq: '>=1.1 && <1.5'
all-versions:
- '2.0'
- 2.0.0.1
- 2.0.1
- 2.0.2
author: |-
  Bas van Dijk,
  Patrick Pelletier
latest: 2.0.2
description-type: markdown
description: |
  Latest:
  [![Hackage](https://img.shields.io/hackage/v/normalization-insensitive.svg)](https://hackage.haskell.org/package/normalization-insensitive)
  Linux:
  [![Build Status](https://travis-ci.org/ppelleti/normalization-insensitive.svg?branch=master)](https://travis-ci.org/ppelleti/normalization-insensitive)
  Windows:
  [![Build status](https://ci.appveyor.com/api/projects/status/0qhwhc1cfsphf263/branch/master?svg=true)](https://ci.appveyor.com/project/ppelleti/normalization-insensitive/branch/master)

  The module `Data.Unicode.NormalizationInsensitive` provides the `NI`
  type constructor which can be parameterized by a string-like type like:
  `String`, `ByteString`, `Text`, etc.. Comparisons of values of the resulting
  type will be insensitive to normalization.

  This is very similar in spirit to the [`case-insensitive`][1] package, and is
  in fact based on the same code.

  This package uses [NFC][2] internally, although that shouldn't matter to
  you, unless you use `unsafeMk`.

  [1]: https://hackage.haskell.org/package/case-insensitive
  [2]: https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms
license-name: BSD-3-Clause
