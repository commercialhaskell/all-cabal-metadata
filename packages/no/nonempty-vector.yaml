all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.1.0
- 0.2.2.0
- 0.2.3
- 0.2.4
author: Emily Pillmore
basic-deps:
  base: '>=4.16 && <4.22'
  deepseq: '>=0'
  primitive: '>=0.6 && <0.10'
  vector: '>=0.12 && <0.14'
changelog: |
  # Revision history for nonempty-vector

  ## 0.2.3

  * Support GHC 9.8.x

  ## 0.2.2.0

  * Drop support for GHC<8.10, update CI, bump bounds for `primitive`.
  * Added `partitionWith` from `vector`. [(#11)](https://github.com/emilypi/nonempty-vector/pull/11) - Thanks @AlistairB!

  ## 0.2.1.0

  * Added `consV` and `snocV` primitives for consing a vector to create a nonempty one. [(#8)](https://github.com/emilypi/nonempty-vector/pull/8) - Thanks @AlistairB!
  * Updated CI and cabal support
  * Expose constructors in new `Data.Vector.NonEmpty.Internal` module
  * Modules are now marked trustworthy
  * `@since` annotations have been added.

  ## 0.2.0.2

  * Removed spurious dependency on `semigroups`

  ## 0.2.0.1

  * Missed a strictness tick in `postscanl'`

  * INLINE pragma for slice

  ## 0.2.0.0

  * Remove naughty `Generic`, and `Alternative` instances as they can construct empty `NonEmptyVector`s

  * Handwritten `Read` and `Read1` instances with safe cons

  * Added `uncons`, `unsnoc`, `replicate1`, `generate1`, `iterateN1`, `unsafeCreate`, `unsafeCreateT`, `unfoldr1`, `unfoldr1N`, `unfoldr1M`, `unfoldr1NM`,

  * Added `unsafeFromList`, `unsafeFromVector`, and `fromNonEmptyN1`

  * Add `ifilterM`

  * Add doctests for all new functions + many familiar ones

  ## 0.1.0.0

  * Remove `MonadFail` instance for the sake of backcompat with LTS < 13
  * Drop Cabal version down to 2.0

  ## 0.0.1.1 -- 2019-10-20

  * Export `toMVector` and `fromMVector`
  * clean up docs

  ## 0.0.1.0 -- 2019-10-20

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # Non-empty Vectors

  ![Build Status](https://github.com/emilypi/nonempty-vector/actions/workflows/haskell-ci.yml/badge.svg) [![Hackage](https://img.shields.io/hackage/v/nonempty-vector.svg)](https://hackage.haskell.org/package/nonempty-vector)

  This package presents thin wrappers around mutable and immutable [Data.Vector](https://hackage.haskell.org/package/vector) types that enforce non-emptiness. The entire Vector API is supported for both sets of boxed vectors, with future plans to support unboxed, primitive, storable, and generic vectors.

  There are no external dependencies that are not already in `base`.
description-type: markdown
hash: 4d3ae65f1356afae372be81310d9ca16e602d7a6e3102163f6db47725860536e
homepage: https://github.com/emilypi/nonempty-vector
latest: 0.2.4
license-name: BSD-3-Clause
maintainer: emilypi@cohomolo.gy
synopsis: Non-empty vectors
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.16 && <4.22'
  nonempty-vector: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  vector: '>=0'
