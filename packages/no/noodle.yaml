all-versions:
- 0.0.18
- 0.0.19
author: Jesse Rudolph
basic-deps:
  base: '>=3 && <=5'
  directory: '>=0'
  filepath: '>=0'
  noodle: '>=0'
changelog: ''
changelog-type: ''
description: |-
  The @noodle@ Programming Language Interpreter

  Noodle is two things. It is a programming language, and it is this implementation
  of that programming language.

  /Briefly.../

  Noodle (the language) is functional, latently typed, and statically scoped.
  Noodle has no language level concept of mutable state.
  Data abstraction is handled with 'scope bound' wrappers that prevent pattern matching on some value outside
  of some mutually recursive scope.
  Numbers are arbitrary precision integer ratios.
  Operators are (possibly) high order functions with special application rules that omit evaluation of the
  right operand if their application to the left operand does not return a function.
  Modules are mutually recursive internally, are first class, and can be parameterized by constructing them with functions.
  Rather than arrays or linked lists, the most basic compound data structure in noodle is a binary tree, or 'product'.


  the primary points of interest in this package are:

  [@noodle@]      the option directed command line interface

  [@noodle-repl@] the read-eval-print-loop

  [@noodle-eval@] an interface for evaluating a single noodle
  expression (computation) from stdin


  You may also incorporate noodle into your own program as a library,
  but this is /even less documented/ than the /completely undocumented/ command
  line interface... so I don't know why you would want to do this.
description-type: haddock
hash: 32c53cd39e7b56774c778ca847e3a26c633e154d5091dac78cf557fa81cb6bb2
homepage: https://github.com/jessopher/noodle
latest: 0.0.19
license-name: LicenseRef-OtherLicense
maintainer: Jesse Rudolph
synopsis: the noodle programming language
test-bench-deps: {}
