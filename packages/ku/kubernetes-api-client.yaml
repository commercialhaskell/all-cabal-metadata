all-versions:
- 0.6.0.0
- 0.6.0.1
- 0.6.1.0
author: ''
basic-deps:
  aeson: '>=1.2 && <3'
  attoparsec: '>=0.13'
  base: '>=4.7 && <5.0'
  base64-bytestring: '>=0'
  bytestring: '>=0.10'
  containers: '>=0.5'
  crypton-connection: '>=0'
  crypton-x509: '>=1.7'
  crypton-x509-store: '>=1.6'
  crypton-x509-system: '>=1.6'
  crypton-x509-validation: '>=1.6'
  data-default-class: '>=0.1'
  either: '>=5.0'
  filepath: '>=1.4'
  hoauth2: '>=1.11 && <=3'
  http-client: '>=0.5 && <0.8'
  http-client-tls: '>=0.3'
  jose-jwt: '>=0.8'
  jsonpath: '>=0.1 && <0.4'
  kubernetes-api: '>=0'
  megaparsec: '>=9 && <10'
  microlens: '>=0.4'
  mtl: '>=2.2'
  oidc-client: '>=0.4'
  pem: '>=0.2'
  safe-exceptions: '>=0.1.0.0'
  stm: '>=2.4'
  streaming-bytestring: '>=0.1 && <0.4'
  text: '>=0.11 && <3'
  time: '>=1.8'
  timerep: '>=2.0'
  tls: '>=1.4.1'
  typed-process: '>=0.2'
  uri-bytestring: '>=0.3'
  yaml: '>=0.8.32'
changelog: ''
changelog-type: ''
description: |
  # kubernetes-api-client

  ## Example

  ### Load KubeConfig file

  ```haskell
  import Control.Concurrent.STM (atomically, newTVar)
  import Kubernetes.Client      (KubeConfigSource (..), mkKubeClientConfig)
  import Kubernetes.OpenAPI     (Accept (..), MimeJSON (..), dispatchMime)

  import qualified Data.Map                      as Map
  import qualified Kubernetes.OpenAPI.API.CoreV1 as CoreV1

  main :: IO ()
  main = do
      oidcCache <- atomically $ newTVar $ Map.fromList []
      (mgr, kcfg) <- mkKubeClientConfig oidcCache $ KubeConfigFile "/path/to/kubeconfig"
      dispatchMime
              mgr
              kcfg
              (CoreV1.listPodForAllNamespaces (Accept MimeJSON))
          >>= print
  ```

  ### Load InCluster Config

  ```haskell
  import Control.Concurrent.STM (atomically, newTVar)
  import Data.Function          ((&))
  import Kubernetes.Client      (KubeConfigSource (..), mkKubeClientConfig)
  import Kubernetes.OpenAPI     (Accept (..), MimeJSON (..), dispatchMime)
  import Network.TLS            (credentialLoadX509)

  import qualified Data.Map                      as Map
  import qualified Kubernetes.OpenAPI.API.CoreV1 as CoreV1

  main :: IO ()
  main = do
      oidcCache <- atomically $ newTVar $ Map.fromList []
      (mgr, kcfg) <- mkKubeClientConfig oidcCache KubeConfigCluster
      dispatchMime
              mgr
              kcfg
              (CoreV1.listPodForAllNamespaces (Accept MimeJSON))
          >>= print
  ```

  ### Load config from URL and paths

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  module Main where

  import           Data.Function                 ((&))
  import           Kubernetes.Client             (defaultTLSClientParams,
                                                  disableServerCertValidation,
                                                  disableServerNameValidation,
                                                  disableValidateAuthMethods,
                                                  loadPEMCerts, newManager,
                                                  setCAStore, setClientCert,
                                                  setMasterURI, setTokenAuth)
  import           Kubernetes.OpenAPI            (Accept (..), MimeJSON (..),
                                                  dispatchMime, newConfig)
  import qualified Kubernetes.OpenAPI.API.CoreV1 as CoreV1
  import           Network.TLS                   (credentialLoadX509)

  main :: IO ()
  main = do
      -- We need to first create a Kubernetes.Core.KubernetesConfig and a Network.HTTP.Client.Manager.
      -- Currently we need to construct these objects manually. Work is underway to construct these
      -- objects automatically from a kubeconfig file. See https://github.com/kubernetes-client/haskell/issues/2.
      kcfg <-
          newConfig
          & fmap (setMasterURI "https://mycluster.example.com")    -- fill in master URI
          & fmap (setTokenAuth "mytoken")                          -- if using token auth
          & fmap disableValidateAuthMethods                        -- if using client cert auth
      myCAStore <- loadPEMCerts "/path/to/ca.crt"                  -- if using custom CA certs
      myCert    <-                                                 -- if using client cert
          credentialLoadX509 "/path/to/client.crt" "/path/to/client.key"
              >>= either error return
      tlsParams <-
          defaultTLSClientParams
          & fmap disableServerNameValidation -- if master address is specified as an IP address
          & fmap disableServerCertValidation -- if you don't want to validate the server cert at all (insecure)
          & fmap (setCAStore myCAStore)      -- if using custom CA certs
          & fmap (setClientCert myCert)      -- if using client cert
      manager <- newManager tlsParams
      dispatchMime
              manager
              kcfg
              (CoreV1.listPodForAllNamespaces (Accept MimeJSON))
          >>= print
  ```

  ## Watch Example
  Following is a simple example which
  just streams to stdout. First some setup - this assumes kubernetes is accessible
  at http://localhost:8001, e.g. after running `kubectl proxy`:

  ```haskell
  > import qualified Data.ByteString.Streaming.Char8 as Q

  > manager <- newManager defaultManagerSettings
  > defaultConfig <- newConfig
  > config = defaultConfig { configHost = "http://localhost:8001", configValidateAuthMethods = False }
  > request = listEndpointsForAllNamespaces (Accept MimeJSON)
  ```

  Launching 'dispatchWatch' with the above we get a stream of endpoints data:

  ```haskell
   > dispatchWatch manager config request Q.stdout
   {"type":\"ADDED\","object":{"kind":\"Endpoints\","apiVersion":"v1","metadata":{"name":"heapster" ....
  ```

  A more complex example involving some ggprocessing of the stream, the following
  prints out the event types of each event. First, define functions to allow us apply
  a parser to a stream:


  ```haskell
  import Data.Aeson
  import qualified Data.ByteString.Streaming.Char8 as Q
  import Data.JsonStream.Parser
  import qualified Streaming.Prelude as S

  -- | Parse the stream using the given parser.
  streamParse ::
    FromJSON a =>
      Parser a
      -> Q.ByteString IO r
      -> Stream (Of [a]) IO r
  streamParse parser byteStream = do
    byteStream & Q.lines & parseEvent parser

  -- | Parse a single event from the stream.
  parseEvent ::
    (FromJSON a, Monad m) =>
      Parser a
      -> Stream (Q.ByteString m) m r
      -> Stream (Of [a]) m r
  parseEvent parser byteStream = S.map (parseByteString parser) (S.mapped Q.toStrict byteStream)
  ```

  Next, define the parser and apply it to the stream:

  ```haskell
  > eventParser = value :: Parser (WatchEvent V1Endpoints)
  > withResponseBody body = streamParse eventParser body & S.map (map eventType)
  > dispatchWatch manager config request (S.print . withResponseBody)
  [\"ADDED\"]
  [\"ADDED\"]
  [\"MODIFIED\"]
  ...
  ```

  Packages in this example:
    * Data.Aeson -- from [aeson](https://hackage.haskell.org/package/aeson)
    * Data.ByteString.Streaming.Char8 from [streaming-bytestring](https://hackage.haskell.org/package/streaming-bytestring-0.1.5/docs/Data-ByteString-Streaming-Char8.html)
    * Data.JsonStream.Parser from [json-stream](https://hackage.haskell.org/package/json-stream-0.4.1.5/docs/Data-JsonStream-Parser.html)
    * Streaming.Prelude from [streaming](https://hackage.haskell.org/package/streaming-0.2.0.0/docs/Streaming-Prelude.html)
description-type: markdown
hash: f86b284b564102b0efb84e13bbc20048194e30e14834676d8ce724cfd3f0ad4c
homepage: ''
latest: 0.6.1.0
license-name: Apache-2.0
maintainer: Tom McLaughlin <tom@codedown.io>
synopsis: Client library for Kubernetes
test-bench-deps:
  aeson: '>=1.2 && <3'
  attoparsec: '>=0.13'
  base: '>=4.7 && <5.0'
  base64-bytestring: '>=0'
  bytestring: '>=0.10'
  containers: '>=0.5'
  crypton-connection: '>=0'
  crypton-x509: '>=1.7'
  crypton-x509-store: '>=1.6'
  crypton-x509-system: '>=1.6'
  crypton-x509-validation: '>=1.6'
  data-default-class: '>=0.1'
  either: '>=5.0'
  file-embed: '>=0'
  filepath: '>=1.4'
  hoauth2: '>=1.11 && <=3'
  hspec: '>=0'
  hspec-attoparsec: '>=0'
  hspec-megaparsec: '>=0'
  http-client: '>=0.5 && <0.8'
  http-client-tls: '>=0.3'
  jose-jwt: '>=0.8'
  jsonpath: '>=0.1 && <0.4'
  kubernetes-api: '>=0'
  kubernetes-api-client: '>=0'
  megaparsec: '>=9 && <10'
  microlens: '>=0.4'
  mtl: '>=2.2'
  oidc-client: '>=0.4'
  pem: '>=0.2'
  safe-exceptions: '>=0.1.0.0'
  stm: '>=2.4'
  streaming-bytestring: '>=0.1 && <0.4'
  text: '>=0.11 && <3'
  time: '>=1.8'
  timerep: '>=2.0'
  tls: '>=1.4.1'
  typed-process: '>=0.2'
  uri-bytestring: '>=0.3'
  yaml: '>=0.8.32'
