all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.3
- 0.2.4
- 0.2.5
author: Julian K. Arni
basic-deps:
  base: '>=4.9 && <4.11'
  bookkeeper: '>=0'
  data-default-class: '>=0'
  markdown-unlit: '>=0'
  type-level-sets: '>=0'
changelog: |
  # 0.2.4

  * Added 'rlens' and lens 'IsLabel' instance.

  # 0.2.3

  * Implement 'fromRecord' for converting values from record.

  # 0.2.2.0

  * Add 'Data.Default' instance

  # 0.2.1.0

  * Add 'Gettable', 'Settable', 'Modifiable' type synonyms.

  # 0.2.0.0

  * Added Eq instance
  * Added Show instance
  * Changed the implementation of 'set' and 'modify'. It no longer needs
    'ChooseFirst' to be in scope, and the class constraints changed.
  * Removed 'ChooseFirst'.

  # 0.1.0.0

  * Initial release
changelog-type: markdown
description: |
  # Bookkeeper [![Build Status][ci-img]][ci]

  Bookkeeper is a new Haskell library that uses the new OverloadedLabels feature
  of GHC 8 to provide a new take on datatypes and records:

  ~~~ {.haskell}
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE TypeOperators #-}
  {-# LANGUAGE OverloadedLabels #-}
  import Bookkeeper


  jane :: Book '[ "name" :=> String, "age" :=> Int ]
  jane = emptyBook
       & #name =: "Jane"
       & #age =: 30

  -- >>> jane
  -- Book {age = 30, name = "Jane"}
  -- >>> jane ?: #name
  -- "Jane"
  ~~~

  It bears some similarities to Nikita Volkov's [record](https://nikita-volkov.github.io/record/)
  library, but requires no Template Haskell.

  Accesing a field that does not exist is a type error, made nicer with GHCs new
  custom type errors:

  ~~~ {.haskell}
   -- >>> jane ?: #address
  --   â€¢ The provided Book does not contain the field "address"
  --     Book type:
  --     '["age" ':-> Int, "name" ':-> String]
  ~~~


  The order in which fields are inserted or appear in types does not matter. That
  is, in:

  ~~~ {.haskell}
  -- type A = Book '[ "field1" :=> Int,  "field2" :=> Bool]
  -- type B = Book '[ "field2" :=> Bool, "field1" :=> Int ]
  ~~~

  Types `A` and `B` are the same.

  You can set, modify, or get fields. See the haddocks for more information.


  ~~~ {.haskell}
  main :: IO ()
  main = return ()
  ~~~

  [ci-img]:   https://travis-ci.org/turingjump/bookkeeper.svg?branch=master
  [ci]:       https://travis-ci.org/turingjump/bookkeeper
description-type: markdown
hash: 1e115dc336d17b4d32f09d78dc90ad209b377331df8073f970f9f7169c95104a
homepage: http://github.com/turingjump/bookkeeper#readme
latest: 0.2.5
license-name: BSD-3-Clause
maintainer: jkarni@gmail.com
synopsis: Anonymous records and overloaded labels
test-bench-deps:
  Glob: '>=0.7 && <0.9'
  QuickCheck: '>=2.8 && <2.11'
  base: '>=4.9 && <4.11'
  bookkeeper: '>=0'
  criterion: '>=0'
  data-default-class: '>=0'
  doctest: '>=0.9 && <0.12'
  hspec: '>2 && <3'
  type-level-sets: '>=0'
  yaml: '>=0.8 && <0.9'
