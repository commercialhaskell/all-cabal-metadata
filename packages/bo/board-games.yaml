all-versions:
- '0.1'
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- '0.2'
- 0.2.1
- '0.3'
- '0.4'
author: Henning Thielemann <haskell@henning-thielemann.de>
basic-deps:
  QuickCheck: '>2.0 && <3.0'
  array: '>=0.1 && <0.6'
  base: '>=2 && <5'
  board-games: '>=0'
  boxes: '>=0.1.5 && <0.2'
  cgi: '>=3001.1 && <3002'
  combinatorial: '>=0.1 && <0.2'
  containers: '>=0.2 && <0.9'
  enummapset: '>=0.1 && <0.8'
  explicit-exception: '>=0.1.7 && <0.3'
  haha: '>=0.3.1 && <0.4'
  html: '>=1.0 && <1.1'
  httpd-shed: '>=0.4 && <0.5'
  network-uri: '>=2.6 && <2.8'
  non-empty: '>=0.2 && <0.4'
  random: '>=1.0 && <1.4'
  semigroups: '>=0.18 && <0.21'
  shell-utility: '>=0.0 && <0.2'
  transformers: '>=0.2.2 && <0.7'
  utility-ht: '>=0.0.3 && <0.1'
changelog: |
  # Change log for the `board-games` package

  ## 0.4

   * `Labyrinth`: New game "Das verrÃ¼ckte Labyrinth".

  ## 0.3

   * `Mastermind.CodeSet`:
     Move from `Set` to `EnumSet` since this is three to ten times faster.
     It works best for alphabets with contiguous `fromEnum`-associated `Int`s,
     but even if not it should not be much worse than `Set`.
     If this is still too slow for you, you might consider mapping your alphabet
     to a contiguous set of `Int`s first.
     I tried to maintain both `Set` and `EnumSet` in one interface.
     It is possible even in Haskell 98 using explicit method dictionaries.
     However, it gets complicated and I am afraid
     that the speed advantage is diminished by the generalization overhead.

  ## 0.2.1

   * add criterion benchmarks for `Mastermind`

  ## 0.2

   * improved game strategy for `Mastermind`

  ## 0.1

   * hierarchical module names
changelog-type: markdown
description: |-
  Three games that might run as CGI script in a web server:
  Connect Four, Rows&Columns, Mastermind.
  Additionally there is a CLI-only game: Das verrueckte Labyrinth.

  Check running versions at
  <http://www.henning-thielemann.de/VierGewinnt> and
  <http://www.henning-thielemann.de/ZeilenSpalten>.

  You can build an example web server by installing with

  > cabal install board-games -fbuildExamples

  Then start the server with

  > ./dist/build/board-games/board-games

  and play the games in your browser at the URL
  <http://localhost:8080/>.

  Currently the games use German texts.
  I wanted to use gettext, but this is not thread-safe.
description-type: haddock
hash: 2f085a2ba7e58a5eeb5b1b621292be7ba3489e1d1b9be52c2cc4ba6510565cf1
homepage: http://code.haskell.org/~thielema/games/
latest: '0.4'
license-name: LicenseRef-GPL
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Three games for inclusion in a web server
test-bench-deps:
  QuickCheck: '>=0'
  array: '>=0'
  base: '>=0'
  board-games: '>=0'
  containers: '>=0'
  criterion: '>=0.6 && <1.7'
  doctest-exitcode-stdio: '>=0.0 && <0.1'
  doctest-lib: '>=0.1 && <0.2'
  enummapset: '>=0'
  non-empty: '>=0.3.1'
  parallel: '>=3.2.1 && <3.3'
  random: '>=0'
  transformers: '>=0'
  utility-ht: '>=0'
