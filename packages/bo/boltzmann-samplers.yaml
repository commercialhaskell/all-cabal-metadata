all-versions:
- 0.1.0.0
- 0.1.1.0
author: Li-yao Xia
basic-deps:
  MonadRandom: '>=0'
  QuickCheck: '>=0'
  ad: '>=0'
  base: '>=4.8 && <5'
  containers: '>=0'
  hashable: '>=0'
  hmatrix: '>=0'
  ieee754: '>=0'
  mtl: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: |
  # 0.1.1.0

  - Added Semigroup Nat instance, for compatibility with GHC 8.4
changelog-type: markdown
description: |
  Boltzmann samplers [![Hackage](https://img.shields.io/hackage/v/boltzmann-samplers.svg)](https://hackage.haskell.org/package/generic-random) [![Build Status](https://travis-ci.org/Lysxia/generic-random.svg)](https://travis-ci.org/Lysxia/boltzmann-samplers)
  ==================

  `Boltzmann.Data`
  ----------------

  Define sized random generators for `Data.Data` generic types.

  ```haskell
      {-# LANGUAGE DeriveDataTypeable #-}

      import Data.Data
      import Test.QuickCheck
      import Boltzmann.Data

      data Term = Lambda Int Term | App Term Term | Var Int
        deriving (Show, Data)

      instance Arbitrary Term where
        arbitrary = sized $ generatorPWith [positiveInts]

      positiveInts :: Alias Gen
      positiveInts =
        alias $ \() -> fmap getPositive arbitrary :: Gen Int

      main = sample (arbitrary :: Gen Term)
  ```

  - Objects of the same size (number of constructors) occur with the same
    probability (see Duchon et al., references below).
  - Implements rejection sampling and pointing.
  - Works with QuickCheck and MonadRandom, but also similar user-defined monads
    for randomness (just implement `MonadRandomLike`).
  - Can be tweaked somewhat with user defined generators.

  `Boltzmann.Species`
  -------------------

  An experimental interface to obtain Boltzmann samplers from an applicative
  specification of a combinatorial system.

  No documentation (yet).

  References
  ----------

  - The core theory of Boltzmann samplers is described in
    [Boltzmann Samplers for the Random Generation of Combinatorial Structures](http://algo.inria.fr/flajolet/Publications/DuFlLoSc04.pdf),
    P. Duchon, P. Flajolet, G. Louchard, G. Schaeffer.

  - The numerical evaluation of recursively defined generating functions
    is taken from
    [Boltzmann Oracle for Combinatorial Systems](http://www.dmtcs.org/pdfpapers/dmAI0132.pdf),
    C. Pivoteau, B. Salvy, M. Soria.
description-type: markdown
hash: d4a5ee732777aec9355e20720dec3d95aea3987763f36cb9b5673fe78ba74228
homepage: https://github.com/Lysxia/boltzmann-samplers#readme
latest: 0.1.1.0
license-name: MIT
maintainer: lysxia@gmail.com
synopsis: Uniform random generators
test-bench-deps: {}
