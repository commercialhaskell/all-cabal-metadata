all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
author: Edsko de Vries, Finley McIlwaine
basic-deps:
  base: '>=4.12 && <4.19'
  bytestring: '>=0.10 && <0.12'
  containers: '>=0.6 && <0.7'
  generics-sop: '>=0.5 && <0.6'
  sop-core: '>=0.5 && <0.6'
  text: '>=1.2 && <2.1'
  vector: '>=0.13 && <0.14'
  wide-word: '>=0.1 && <0.2'
changelog: |
  # Revision history for borsh

  ## 0.3.0 -- 2023-03-17

  * Introduce `BorshMaxSize`
  * Rename `Struct` (for deriving-via) to `AsStruct`
  * Introduce `AsEnum` (for deriving-via) alongside `AsStruct`
    (this is also the reason for the renaming: `Enum` is in the prelude.)
  * Remove the generic defaults for `ToBorsh`, `FromBorsh`, `BorshSize` and
    `MaxBorshSize`; users should instead use `AsEnum` or `AsStruct` (#10).

  ## 0.2.0 -- 2022-11-15

  * Remove dependency on `memory`
  * Don't newtype-wrap `Int128` and `Word128`
  * Improve documentation of the incremental interface
  * Make size argument to `FixedSizeArray` nominal

  ## 0.1.0 -- 2022-11-11

  * First released version
changelog-type: markdown
description: |-
  This package provides type classes and combinators for
  serialisation\/deserialisation to\/from [Borsh](https://borsh.io/) format.
  Unlike [CBOR](http://cbor.io/), Borsh is a non self-describing serialisation
  format. It is designed such that any object serialises to a canonical and
  deterministic string of bytes.

  The library supports incremental encoding and incremental decoding, and
  supports the use of the @ST@ monad in the decoder for efficient decoding for
  types such as arrays. However, the library has currently not been optimized
  for speed, and there may well be low-hanging fruit to make it faster.
description-type: haddock
hash: e0b95d8254271b5e35660c1133d80fe3c77510c99fb2a0f7f008f3db943105d8
homepage: ''
latest: 0.3.0
license-name: BSD-3-Clause
maintainer: edsko@well-typed.com
synopsis: Implementation of BORSH serialisation
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.12 && <4.19'
  borsh: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  generics-sop: '>=0'
  optics-core: '>=0'
  profunctors: '>=0'
  quickcheck-instances: '>=0'
  sop-core: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  wide-word: '>=0'
