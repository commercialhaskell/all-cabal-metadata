homepage: http://github.com/ekmett/bound/
changelog-type: markdown
hash: e986ac4701291fa4c7e7144aef893e32e9f49bdd399a4221d1d8d766e3139280
test-bench-deps:
  void: -any
  bound: -any
  base: '>=4.5 && <5'
  deriving-compat: '>=0.3.4 && <0.7'
  transformers: -any
  transformers-compat: -any
  vector: '>=0.12'
maintainer: Edward A. Kmett <ekmett@gmail.com>
synopsis: Making de Bruijn Succ Less
changelog: "2.0.6 [2023.01.18]\r\n------------------\r\n* Allow the examples to build
  with `base-4.18.*` (GHC 9.6).\r\n\r\n2.0.5 [2022.05.07]\r\n------------------\r\n*
  Allow building with `transformers-0.6.*`.\r\n\r\n2.0.4 [2021.11.07]\r\n------------------\r\n*
  Allow building with `template-haskell-2.18` (GHC 9.2).\r\n* The `Bound.TH` module
  no longer requires the `TemplateHaskell` extension\r\n  (only `TemplateHaskellQuotes`)
  when building with GHC 9.0 or later.\r\n* Drop support for pre-8.0 versions of GHC.\r\n\r\n2.0.3
  [2021.02.05]\r\n------------------\r\n* Allow the examples to build with `vector-0.12.2`
  or later.\r\n* The build-type has been changed from `Custom` to `Simple`.\r\n  To
  achieve this, the `doctests` test suite has been removed in favor of using [`cabal-docspec`](https://github.com/phadej/cabal-extras/tree/master/cabal-docspec)
  to run the doctests.\r\n\r\n2.0.2 [2020.10.01]\r\n------------------\r\n* Allow
  building with GHC 9.0.\r\n\r\n2.0.1\r\n-----\r\n* Add `abstractEither` and `instantiateEither`
  to `Bound.Scope`, and\r\n  add `abstractEitherName` and `instantiateEitherName`
  to `Bound.Scope.Name`\r\n* Add `Generic(1)` instances for `Name` and `Scope`\r\n*
  Support `doctest-0.12`\r\n\r\n2\r\n-\r\n* GHC 8.0 and 8.2 support\r\n* Converted
  from `prelude-extras` to `transformers` + `transformers-compat` for the `Eq1`, `Ord1`,
  `Show1`, and `Read1` functionality.\r\n* `makeBound` supports `Functor` components\r\n*
  Add `MFunctor` instance for `Scope`\r\n* Add `NFData` instances for `Name`, `Scope`,
  and `Var`\r\n* Revamp `Setup.hs` to use `cabal-doctest`. This makes it build\r\n
  \ with `Cabal-1.25`, and makes the `doctest`s work with `cabal new-build` and\r\n
  \ sandboxes.\r\n\r\n1.0.7\r\n------\r\n* Added an `-f-template-haskell` option to
  allow disabling `template-haskell` support. This is an unsupported configuration
  but may be useful for expert users in sandbox configurations.\r\n* Support `cereal`
  0.5\r\n\r\n1.0.6\r\n-----\r\n* Compiles warning-free on GHC 7.10\r\n\r\n1.0.5\r\n-----\r\n*
  Widened version bound on `bifunctors`.\r\n* Widened version bound on `profunctors`.\r\n\r\n1.0.4\r\n-----\r\n*
  Widened version bound on `transformers`.\r\n\r\n1.0.3\r\n-----\r\n* Added `bitransverseScope`.\r\n\r\n1.0.2\r\n-----\r\n*
  Removed unneccesary constraint on `hoistScope`.\r\n\r\n1.0.1\r\n-----\r\n* Added
  a monomorphic `hoistScope` for `Bound.Scope.Simple`\r\n\r\n1.0\r\n---\r\n* Added
  instances for `Bound` for all of the `mtl` monads.\r\n* Added `Data` and `Typeable`
  support to both versions of `Scope`\r\n* Added the missing `Applictive` instance
  to `Bound.Scope.Simple`\r\n* Moved `hoistScope`, `bitraverseScope`, `transverseScope`,
  and `instantiateVars` here from the `ermine` compiler.\r\n\r\n0.9.1.1\r\n-------\r\n*
  Updated to work with `bifunctors` 4.0\r\n\r\n0.9.1\r\n-----\r\n* Updated to work
  with `comonad` 4.0 and `profunctors` 4.0\r\n\r\n0.9\r\n---\r\n* Added the missing
  instance for `Applicative (Scope b f)`\r\n\r\n0.8.1\r\n-----\r\n* SafeHaskell support\r\n\r\n0.8\r\n---\r\n*
  Added `Serial`, `Binary` and `Serialize` instances for `Scope`.\r\n\r\n0.7\r\n---\r\n*
  Added `Hashable`, `Hashable1` and `Hashable2` instances where appropriate for `Name`,
  `Var` and `Scope`.\r\n\r\n0.6.1\r\n-----\r\n* More aggressive inlining\r\n* Added
  `unvar`, `_B`, `_F` to `Bound.Var`.\r\n* Added `_Name` to `Bound.Name`.\r\n\r\n0.6\r\n---\r\n*
  Support for `prelude-extras` 0.3\r\n\r\n0.5.1\r\n-----\r\n* Removed my personal
  inter-package dependency upper bounds\r\n* Updated doctest suite to use exact versions.\r\n\r\n0.5\r\n---\r\n*
  Created a `doctest`-based test suite\r\n* Added many examples\r\n* 100% haddock
  coverage\r\n* Added the `Name` `Comonad`, to help retain names for bound variables.\r\n*
  Bumped dependencies\r\n"
basic-deps:
  cereal: '>=0.4.1 && <0.6'
  base: '>=4.9 && <5'
  comonad: '>=5 && <6'
  th-abstraction: '>=0.4 && <0.6'
  bifunctors: '>=5 && <6'
  binary: '>=0.8.3 && <0.9'
  mmorph: '>=1.0 && <1.3'
  hashable: '>=1.2.5.0 && <1.5'
  transformers: '>=0.5 && <0.7'
  deepseq: '>=1.4.2 && <1.5'
  template-haskell: '>=2.11.1 && <3.0'
  transformers-compat: '>=0.5 && <1'
  profunctors: '>=3.3 && <6'
  bytes: '>=0.15.2 && <1'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- '0.2'
- 0.2.1
- 0.3.1
- 0.3.2
- '0.4'
- '0.5'
- 0.5.0.1
- 0.5.0.2
- 0.5.1
- '0.6'
- 0.6.1
- '0.7'
- '0.8'
- 0.8.1
- '0.9'
- 0.9.0.1
- 0.9.1
- 0.9.1.1
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- '2'
- 2.0.1
- 2.0.2
- 2.0.3
- 2.0.4
- 2.0.5
- 2.0.6
author: Edward A. Kmett
latest: 2.0.6
description-type: markdown
description: "Bound\r\n=====\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/bound.svg)](https://hackage.haskell.org/package/bound)
  [![Build Status](https://github.com/ekmett/bound/workflows/Haskell-CI/badge.svg)](https://github.com/ekmett/bound/actions?query=workflow%3AHaskell-CI)\r\n\r\nGoals\r\n-----\r\n\r\nThis
  library provides convenient combinators for working with \"locally-nameless\" terms.
  These can be useful\r\nwhen writing a type checker, evaluator, parser, or pretty
  printer for terms that contain binders like forall\r\nor lambda, as they ease the
  task of avoiding variable capture and testing for alpha-equivalence.\r\n\r\nSee
  [the documentation](http://hackage.haskell.org/package/bound) on hackage for more
  information, but here is an example:\r\n\r\n```haskell\r\n{-# LANGUAGE DeriveFunctor
  #-}\r\n{-# LANGUAGE DeriveFoldable #-}\r\n{-# LANGUAGE DeriveTraversable #-}\r\n{-#
  LANGUAGE TemplateHaskell #-}\r\n\r\nimport Bound\r\nimport Control.Applicative\r\nimport
  Control.Monad\r\nimport Data.Functor.Classes\r\nimport Data.Foldable\r\nimport Data.Traversable\r\nimport
  Data.Eq.Deriving (deriveEq1)      -- these two are from the\r\nimport Text.Show.Deriving
  (deriveShow1)  -- deriving-compat package\r\n\r\ninfixl 9 :@\r\ndata Exp a = V a
  | Exp a :@ Exp a | Lam (Scope () Exp a)\r\n  deriving (Eq,Show,Functor,Foldable,Traversable)\r\n\r\ninstance
  Applicative Exp where pure = V; (<*>) = ap\r\n\r\ninstance Monad Exp where\r\n  return
  = V\r\n  V a      >>= f = f a\r\n  (x :@ y) >>= f = (x >>= f) :@ (y >>= f)\r\n  Lam
  e    >>= f = Lam (e >>>= f)\r\n\r\nlam :: Eq a => a -> Exp a -> Exp a\r\nlam v b
  = Lam (abstract1 v b)\r\n\r\nwhnf :: Exp a -> Exp a\r\nwhnf (f :@ a) = case whnf
  f of\r\n  Lam b -> whnf (instantiate1 a b)\r\n  f'    -> f' :@ a\r\nwhnf e = e\r\n\r\nderiveEq1
  ''Exp\r\nderiveShow1 ''Exp\r\n\r\nmain :: IO ()\r\nmain = do\r\n  let term = lam
  'x' (V 'x') :@ V 'y'\r\n  print term         -- Lam (Scope (V (B ()))) :@ V 'y'\r\n
  \ print $ whnf term  -- V 'y'\r\n```\r\n\r\n   There are longer examples in the
  [examples/ folder](https://github.com/ekmett/bound/tree/master/examples).\r\n\r\nContact
  Information\r\n-------------------\r\n\r\nContributions and bug reports are welcome!\r\n\r\nPlease
  feel free to contact me through github or on the #haskell IRC channel on irc.freenode.net.\r\n\r\n-Edward
  Kmett\r\n\r\n"
license-name: BSD-3-Clause
