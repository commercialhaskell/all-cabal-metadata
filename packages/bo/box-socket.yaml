all-versions:
- 0.0.1
- 0.0.2
- 0.1.1
- 0.1.2
- 0.2.0
- 0.3.0
- 0.4.0
- 0.4.1
- 0.5.0.0
- 0.5.1.0
author: Tony Day
basic-deps:
  async: '>=2.2.3 && <2.3'
  base: '>=4.8 && <5'
  box: '>=0.9.3 && <0.10'
  box-socket: '>=0'
  bytestring: '>=0.11.3 && <0.13'
  network-simple: '>=0.4 && <0.5'
  optparse-applicative: '>=0.17 && <0.19'
  profunctors: '>=5.6 && <5.7'
  text: '>=1.2 && <2.2'
  websockets: '>=0.12 && <0.13'
changelog: |+
  0.5
  ===
  * complete refactor

  * aligned TCP api with Websockets

  * Action & Codensity-based API surface

changelog-type: markdown
description: |
  #+TITLE: box-socket

  [[https://hackage.haskell.org/package/box][file:https://img.shields.io/hackage/v/box-socket.svg]] [[https://github.com/tonyday567/box/actions?query=workflow%3Ahaskell-ci][file:https://github.com/tonyday567/box-socket/workflows/haskell-ci/badge.svg]]

  Socket API based on the box library, with websockets and TCP support.

  * Usage

  #+begin_src haskell-ng
  :set -XOverloadedStrings
  import Box
  import Box.Socket.Types
  import Box.Websocket
  #+end_src

  IO client:

  #+begin_src haskell-ng :results output
  clientBox defaultSocketConfig (CloseAfter 0) (stdBox "q")
  #+end_src

  IO server:

  #+begin_src haskell-ng :results output
  serverBox defaultSocketConfig (CloseAfter 0) (stdBox "q")
  #+end_src

  See examples in Box.Websocket.Example and Box.TCP.Example for a variety of usage.

  * Design

  - The API attempts to be similar for TCP and Websocket

  - A Codensity, continuation passing style is encouraged, similar to the box library.
description-type: text
hash: 515f9e3edd5268555d20e1222395d4528d45fab06a376a5902f7e7f2254e9c72
homepage: https://github.com/tonyday567/box-socket#readme
latest: 0.5.1.0
license-name: BSD-3-Clause
maintainer: tonyday567@gmail.com
synopsis: Box websockets
test-bench-deps: {}
