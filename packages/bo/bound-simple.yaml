all-versions:
- 0.1.0.0
- 0.2.0.0
author: Marco Zocca
basic-deps:
  base: '>=4.7 && <5'
  transformers: '>=0'
changelog: |
  0.1

  first version
changelog-type: markdown
description: "# bound-simple\n\nA lightweight implementation of 'bound'. Provides
  much of the functionality of Bound.Scope.Simple, without the large dependency footprint.\n\n##
  Example \n\nThe function `whnf` beta-reduces a term of the untyped lambda calculus.\n\nIn
  the code below, we first declare a type `Exp` for terms, using the `Scope` type
  within the constructor for a lambda abstraction. To this we add a few instances
  necessary for showing and traversing the terms. The Monad instance takes care of
  variable substitution.\nAfter that, abstraction and application are implemented
  in terms of abstract1 and instantiate1.\nThe `test` function declares a term `(\\x
  . x) y` , then prints it and its reduced form.\n\n\n\n```haskell\n{-# LANGUAGE DeriveFunctor
  #-}\n{-# LANGUAGE DeriveFoldable #-}\n{-# LANGUAGE DeriveTraversable #-}\n{-# LANGUAGE
  DerivingVia #-}\n\nimport Control.Monad (ap)\nimport Bound.Simple (Scope, Bound(..),
  abstract1, instantiate1)\nimport Data.Functor.Classes (Show1)\nimport Data.Functor.Classes.Generic
  (Generically(..))\nimport GHC.Generics (Generic1)\n\ninfixl 9 :@\ndata Exp a = V
  a | Exp a :@ Exp a | Lam (Scope () Exp a)\n  deriving (Show, Functor, Foldable,
  Traversable, Generic1)\n  deriving (Show1) via Generically Exp\n\ninstance Applicative
  Exp where pure = V; k <*> m = ap k m\n\ninstance Monad Exp where\n  return = V\n
  \ V a      >>= f = f a\n  (x :@ y) >>= f = (x >>= f) :@ (y >>= f)\n  Lam e    >>=
  f = Lam (e >>>= f)\n\nlam :: Eq a => a -> Exp a -> Exp a\nlam v b = Lam (abstract1
  v b)\n\nwhnf :: Exp a -> Exp a\nwhnf (e1 :@ e2) = case whnf e1 of\n  Lam b -> whnf
  (instantiate1 e2 b)\n  f'    -> f' :@ e2\nwhnf e = e\n\ntest :: IO ()\ntest = do\n
  \ let term = lam x (V x) :@ V y\n  print term         -- Lam (Scope (V (B ())))
  :@ V y\n  print $ whnf term  -- V y\n```\n"
description-type: markdown
hash: 63626b55ac494cc99e79802eeec88ea069eb13b14c0fdbbf7d1ad6839b30b3bc
homepage: https://github.com/ocramz/bound-simple
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: ocramz
synopsis: A lightweight implementation of 'bound'
test-bench-deps:
  base: '>=0'
  bound-simple: '>=0'
  hspec: '>=0'
