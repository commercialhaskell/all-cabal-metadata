all-versions:
- 0.1.1.0
author: mangoiv
basic-deps:
  base: '>=4.16 && <5'
changelog: |
  # Revision history for HTree

  ## 0.1.0.0 -- 2024-07-21

  * initial release
changelog-type: markdown
description: "\n[![built with nix](https://img.shields.io/badge/built%20with-nix-%235277C3?logo=nixos)](https://nixos.org/)\n[![built
  on haskell](https://img.shields.io/badge/built%20on-haskell-%235D4F85?logo=haskell)](https://www.haskell.org/)\n![ci](https://ci.mangoiv.com/api/badges/5/status.svg)\n[![haddock](https://img.shields.io/badge/haddock-mangoiv.com-e0b0ff)](https://mangoiv.com/htree)\n\n#
  `htree`: heterogeneous rose tree \n\nThis library implements a heterogeneous rose-tree
  (`HTree`) that is indexed by a\ntype-level rosetree (`TyTree`). \n\nIt also offers
  some useful functions, highlights include:\n- searching in the tree and creating
  evidence on the term-level via typeclasses\n- record-dot syntax for accessing elements
  in the tree.\n- mapping and traversing trees\n\n## to develop\n\n- with `direnv`:
  `direnv allow` \n- only with nix: `nix develop`\n- to run all checks: `nix flake
  check -Lv`\n  systems configurations\n- build with nix `nix build` (or on `ghc96`,
  `nix build .#ghc96-htree`)\n- documentation in the form of continuously deployed
  haddock can be found at [mangoiv.srht.site](https://mangoiv.srht.site/htree/index.html)\n\n##
  example\n\n```haskell\npattern I :: forall a. a -> Identity a\npattern I a = Identity
  a\n\n-- the type that the tree is going to be indexed by\ntype Ex =\n  TyNode Int\n
  \  [ TyNode Int\n       [ TyNode Int '[]\n       , TyNode Bool '[]\n       , TyNode
  String '[ TyNode Int '[]]\n       ]\n    , TyNode Int '[]\n    ]\n\n-- we create
  an HTree of the example type 'Ex'\nex :: HTree Identity Ex\nex =\n  HNode 5 do\n
  \   HNode 12 do\n      HNode 13 HNil\n        ::: HNode (I False) HNil\n        :::
  HNode \"test\" (HNode 9 HNil ::: HNil)\n        ::: HNil\n      ::: HNode 43 HNil\n
  \     ::: HNil\n    \n\n-- we can create a labeled Tree and search via DFS and BFS
  in it\n-- the search happens on the type-level\ntype LabeledTree = TyNodeL \"top\"
  Int\n  [ TyNodeL \"inter\" Int '[ TyNodeL \"foo\" Int '[] ]\n  , TyNodeL \"foo\"
  Int '[]\n  ]\n\n-- >>> getElem @'DFS @\"foo\" @Int Proxy labeledTree\n-- Identity
  69\n-- >>> getElem @'BFS @\"foo\" @Int Proxy labeledTree\n-- Identity 67\nlabeledTree
  :: HTree Identity LabeledTree\nlabeledTree = 42 `HNodeL` HNodeL 4 (HNodeL 69 HNil
  ::: HNil) ::: HNodeL 67 HNil ::: HNil\n```\n"
description-type: markdown
hash: ea8e3a8f42df2496a126a873c681bb59f1fe8ca2880f6eba1ca14b5a59ead997
homepage: ''
latest: 0.1.1.0
license-name: AGPL-3.0-or-later
maintainer: contact@mangoiv.com
synopsis: a library to build and work with heterogeneous, type level indexed rose
  trees
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.16 && <5'
  containers: '>=0'
  hspec: '>=0'
  htree: '>=0'
  quickcheck-instances: '>=0'
  template-haskell: '>=0'
  th-compat: '>=0'
