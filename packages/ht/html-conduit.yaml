homepage: https://github.com/snoyberg/xml
changelog-type: markdown
hash: 14c6d87d10cd2ae77a548c71101fa09b7d86bb8cdf14646588b3dcce06ddd6a3
test-bench-deps:
  bytestring: -any
  xml-conduit: -any
  base: -any
  hspec: '>=1.3'
  text: -any
  html-conduit: -any
  HUnit: -any
  containers: -any
  deepseq: -any
maintainer: michael@snoyman.com
synopsis: Parse HTML documents using xml-conduit datatypes.
changelog: |
  # ChangeLog for `html-conduit`

  ## 1.3.2.2

  * Fix handling of mixed case void tags [#167](https://github.com/snoyberg/xml/issues/167)

  ## 1.3.2.1

  * Allow xml-conduit 1.9

  ## 1.3.2

  * Fix a bug that was removing `<` symbols in script tags.

  ## 1.3.1

  * Inline tagstream-conduit for entity decoding in attribute value bug
    fix.

  ## 1.3.0

  * Upgrade to conduit 1.3

  ## 1.2.1.2

  * Remove an upper bound
  * Doc improvement

  ## 1.2.1.1

  * Allow xml-conduit 1.4

  ## 1.2.1

  * Add strict and lazy text parsing [#66](https://github.com/snoyberg/xml/pull/66)

  ## 1.2.0

  * Drop system-filepath

  ## 1.1.1.2

  * Fix a bug with double-unescaping of entities
basic-deps:
  bytestring: -any
  xml-conduit: '>=1.3'
  base: '>=4 && <5'
  text: -any
  conduit: '>=1.3'
  conduit-extra: -any
  containers: -any
  xml-types: '>=0.3 && <0.4'
  attoparsec: -any
  transformers: -any
  resourcet: '>=1.2'
all-versions:
- 0.0.0
- 0.0.1
- 0.1.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 1.1.0
- 1.1.0.1
- 1.1.0.2
- 1.1.0.3
- 1.1.0.4
- 1.1.0.5
- 1.1.0.6
- 1.1.1
- 1.1.1.1
- 1.1.1.2
- 1.2.0
- 1.2.1
- 1.2.1.1
- 1.2.1.2
- 1.3.0
- 1.3.1
- 1.3.2
- 1.3.2.1
- 1.3.2.2
author: Michael Snoyman
latest: 1.3.2.2
description-type: markdown
description: |
  This package uses tagstream-conduit for its parser. It automatically balances
  mismatched tags, so that there shouldn't be any parse failures. It does not
  handle a full HTML document rendering, such as adding missing html and head
  tags. Note that, since version 1.3.1, it uses an inlined copy of
  tagstream-conduit with entity decoding bugfixes applied.

  Simple usage example:

  ```haskell
  #!/usr/bin/env stack
  {- stack --install-ghc --resolver lts-6.23 runghc
     --package http-conduit --package html-conduit
  -}
  {-# LANGUAGE OverloadedStrings #-}
  import qualified Data.Text.IO        as T
  import           Network.HTTP.Simple (httpSink)
  import           Text.HTML.DOM       (sinkDoc)
  import           Text.XML.Cursor     (attributeIs, content, element,
                                        fromDocument, ($//), (&/), (&//))

  main :: IO ()
  main = do
      doc <- httpSink "http://www.yesodweb.com/book" $ const sinkDoc
      let cursor = fromDocument doc
      T.putStrLn "Chapters in the Yesod book:\n"
      mapM_ T.putStrLn
        $ cursor
        $// attributeIs "class" "main-listing"
        &// element "li"
        &/ element "a"
        &/ content
  ```
license-name: MIT
