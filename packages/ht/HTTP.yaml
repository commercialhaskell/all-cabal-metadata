homepage: https://github.com/haskell/HTTP
changelog-type: text
hash: 16ee1212245c6e7cf0905b039689b55dbe8386a2b450094055e536d30c89ba76
test-bench-deps:
  test-framework-hunit: '>=0.3.0 && <0.4'
  bytestring: -any
  test-framework: '>=0.2.0 && <0.9'
  split: '>=0.1.3 && <0.3'
  base: -any
  httpd-shed: '>=0.4 && <0.5'
  network: '>=2.6'
  pureMD5: '>=0.2.4 && <2.2'
  HUnit: '>=1.2.0.1 && <1.7'
  network-uri: ==2.6.*
  mtl: -any
  HTTP: -any
  deepseq: '>=1.3.0.0 && <1.5'
maintainer: Ganesh Sittampalam <ganesh@earth.li>
synopsis: A library for client-side HTTP
changelog: "Version 4000.4.0: release 2022-02-22\n * Restrict to GHC >=7.6 and associated
  cleanups (Andreas Abel)\n * Drop deprecated instance Error (Andreas Abel)\n * Preparation
  for mtl-2.3 (Andreas Abel)\n * General tidying (Andreas Abel)\n * Support GHC 9.2
  (Bodigrim)\n\nVersion 4000.3.16: release 2021-03-20\n * Support GHC-9.0 (Oleg Genrus)\n
  * Various dependency bumps (multiple people)\n * Try all addresses returned by getAddrInfo
  (Fraser Tweedale)\n\nVersion ?\n\n * If the URI contains \"user:pass@\" part, use
  it for Basic Authorization\n * Add a test harness.\n * Don't leak a socket when
  getHostAddr throws an exception.\n * Send cookies in request format, not response
  format.\n * Moved BrowserAction to be a StateT IO, with instances for\n   Applicative,
  MonadIO, MonadState.\n * Add method to control size of connection pool.\n * Consider
  both host and port when reusing connections.\n * Handle response code 304 \"not
  modified\" properly.\n * Fix digest authentication by fixing md5 output string rep.\n
  * Make the default user agent string follow the package version.\n * Document lack
  of HTTPS support and fail when clients try\n   to use it instead of silently falling
  back to HTTP.\n * Add helper to set the request type and body.\n\nVersion 4000.1.2:
  release 2011-08-11\n * Turn off buffering for the debug log.\n * Update installation
  instructions.\n * Bump base dependency to support GHC 7.2.\n\nVersion 4000.1.1:
  release 2010-11-28\n * Be tolerant of LF (instead of CRLF which is the spec) in
  responses.\n\nVersion 4000.1.0: release 2010-11-09\n * Retroactively fixed CHANGES
  to refer to 4000.x.x instead of\n   4004.x.x.\n * Fix problem with close looping
  on certain URLs due to trying\n   to munch the rest of the stream even on EOF. Modified
  from\n   a fix by Daniel Wagner.\n    * This involves a new class member for HStream
  and is thus an\n      API change, but one that will only affect clients that\n      define
  their own payload type to replace String/ByteString.\n * Applied patch by Antoine
  Latter to fix problem with 301 and 307\n   redirects.\n\nVersion 4000.0.10: release
  2010-10-29\n * Bump base dependency to support GHC 7.0.\n * Stop using 'fail' from
  the Either monad and instead build Left\n   values explicitly; the behaviour of
  fail is changing in GHC 7.0\n   and this avoids being sensitive to the change.\n\nVersion
  4000.0.9: release 2009-12-20\n\n * Export headerMap from Network.HTTP.Headers\n
  \  (suggested by David Leuschner.)\n * Fix Network.TCP.{isTCPConnectedTo,isConnectedTo}
  to be useful.\n * Always delay closing non-persistent connections until we reach
  EOF.\n   Delaying it until then is vital when reading the response out as a \n   lazy
  ByteString; all of the I/O may not have happened by the time we\n   were returning
  the HTTP response. Bug manifested itself occasionally\n   with larger responses.
  Courtesy of Valery Vorotyntsev; both untiring bug\n   hunt and fix.\n * drop unused
  type argument from Network.Browser.BrowserEvent; needlessly general.\n   (patch
  provided by Daniel Wagner.)\n\nVersion 4000.0.8: release 2009-08-05\n\n * Incorporated
  proxy setting lookup and parsing contribution\n   by Eric Kow; provided in Network.HTTP.Proxy\n
  * Factor out HTTP Cookies and Auth handling into separate\n   modules Network.HTTP.Cookie,
  Network.HTTP.Auth\n * new Network.Browser functionality for hooking up the\n   proxy
  detection code in Network.HTTP.Proxy:\n\n      setCheckForProxy :: Bool -> BrowserAction
  t ()\n      getCheckForProxy :: BrowserAction t Bool\n\n   If you do 'setCheckForProxy
  True' within a browser\n   session, the proxy-checking code will be called upon.\n
  \  Use 'getCheckForProxy' to get the current setting for\n   this flag.\n\n * Network.Browser:
  if HTTP Basic Auth is allowed and\n   server doesn't 401-challenge with an WWW-Authenticate:\n
  \  header, simply assume / realm and proceed. Preferable\n   than failing, even
  if server is the wrong.\n\nVersion 4000.0.7: release 2009-05-22\n\n * Minor release.\n
  * Added \n     Network.TCP.openSocketStream :: (BufferType t)\n                                  =>
  String {-host-}\n\t\t\t\t  -> Socket\n\t\t\t\t  -> IO (HandleStream t)\n\n   for
  interfacing to pre-existing @Socket@s. Contributed and\n   suggested by <http://trac.haskell.org/http/ticket/7>.\n\nVersion
  4000.0.6: release 2009-04-21; changes from 4000.0.5\n\n * Network.Browser: use HTTP.HandleStream.sendHTTP_notify,
  not HTTP.sendHTTP_notify\n   when issuing requests. The latter runs the risk of
  undoing request normalization.\n * Network.HTTP.Base.normalizeRequest: when normalizing
  proxy-bound requests,\n   insert a Host: header if none present. Set it to the destination
  server authority,\n   not the proxy.\n * Network.Browser: don't fail on seeing invalid
  cookie values, but report them\n   as errors and continue.\n\nVersion 4000.0.5:
  release 2009-03-30; changes from 4000.0.4\n\n * Get serious about comments and Haddock
  documentation.\n * Cleaned up normalization of requests, fixing bugs and bringing
  together\n   previous disparate attempts at handling this.\n * RequestMethod now
  supports custom verbs; use the (Custom String) constructor\n * Beef up Network.HTTP.Base's
  support for normalizing requests and URIs:\n \n    * added splitRequestURI which
  divides a URI into two; the Authority portion\n      (as a String) and the input
  URI sans the authority portion. Useful when\n      wanting to split up a request's
  URI into its Host: and abs_path pieces.\n    * added normalizeRequest :: Bool ->
  Request ty -> Request ty, which \n      fixes up a requests URI path and Host: info
  depending on whether it is\n      destined for a proxy or not (controlled by the
  Bool.)\n    * moved defaultRequest, defaultRequest_, libUA from Network.Browser\n
  \     to Network.HTTP.Base\n    * added mkRequest :: RequestMethod -> URI -> Bool
  -> Request ty\n      for constructing normalized&sane Request bases on top of which\n
  \     you can add custom headers, body payload etc.\n\n"
basic-deps:
  bytestring: '>=0.9.1.5 && <0.12'
  base: '>=4.6.0.0 && <4.17'
  time: '>=1.1.2.3 && <1.13'
  network: '>=2.6 && <3.2'
  parsec: '>=2.0 && <3.2'
  array: '>=0.3.0.2 && <0.6'
  network-uri: ==2.6.*
  mtl: '>=2.0.0.0 && <2.4'
  transformers: '>=0.2.0.0 && <0.7'
all-versions:
- 3000.0.0
- 3001.0.0
- 3001.0.1
- 3001.0.2
- 3001.0.3
- 3001.0.4
- 3001.1.3
- 3001.1.4
- 3001.1.5
- 4000.0.0
- 4000.0.1
- 4000.0.2
- 4000.0.3
- 4000.0.4
- 4000.0.5
- 4000.0.6
- 4000.0.7
- 4000.0.8
- 4000.0.9
- 4000.0.10
- 4000.1.0
- 4000.1.1
- 4000.1.2
- 4000.2.0
- 4000.2.1
- 4000.2.2
- 4000.2.3
- 4000.2.4
- 4000.2.5
- 4000.2.6
- 4000.2.7
- 4000.2.8
- 4000.2.9
- 4000.2.10
- 4000.2.11
- 4000.2.12
- 4000.2.13
- 4000.2.14
- 4000.2.15
- 4000.2.16
- 4000.2.16.1
- 4000.2.17
- 4000.2.18
- 4000.2.19
- 4000.2.20
- 4000.2.21
- 4000.2.22
- 4000.2.23
- 4000.3.0
- 4000.3.1
- 4000.3.2
- 4000.3.3
- 4000.3.4
- 4000.3.5
- 4000.3.6
- 4000.3.7
- 4000.3.8
- 4000.3.9
- 4000.3.10
- 4000.3.11
- 4000.3.12
- 4000.3.13
- 4000.3.14
- 4000.3.15
- 4000.3.16
- 4000.4.0
- 4000.4.1
author: Warrick Gray <warrick.gray@hotmail.com>
latest: 4000.4.1
description-type: haddock
description: |
  The HTTP package supports client-side web programming in Haskell. It lets you set up
  HTTP connections, transmitting requests and processing the responses coming back, all
  from within the comforts of Haskell. It's dependent on the network package to operate,
  but other than that, the implementation is all written in Haskell.

  A basic API for issuing single HTTP requests + receiving responses is provided. On top
  of that, a session-level abstraction is also on offer  (the @BrowserAction@ monad);
  it taking care of handling the management of persistent connections, proxies,
  state (cookies) and authentication credentials required to handle multi-step
  interactions with a web server.

  The representation of the bytes flowing across is extensible via the use of a type class,
  letting you pick the representation of requests and responses that best fits your use.
  Some pre-packaged, common instances are provided for you (@ByteString@, @String@).

  Here's an example use:

  >
  >    do
  >      rsp <- Network.HTTP.simpleHTTP (getRequest "http://www.haskell.org/")
  >              -- fetch document and return it (as a 'String'.)
  >      fmap (take 100) (getResponseBody rsp)
  >
  >    do
  >      (_, rsp)
  >         <- Network.Browser.browse $ do
  >               setAllowRedirects True -- handle HTTP redirects
  >               request $ getRequest "http://www.haskell.org/"
  >      return (take 100 (rspBody rsp))

  __Note:__ This package does not support HTTPS connections.
  If you need HTTPS, take a look at the following packages:

  * <http://hackage.haskell.org/package/http-streams http-streams>

  * <http://hackage.haskell.org/package/http-client http-client> (in combination with
  <http://hackage.haskell.org/package/http-client-tls http-client-tls>)

  * <http://hackage.haskell.org/package/req req>

  * <http://hackage.haskell.org/package/wreq wreq>
license-name: BSD-3-Clause
