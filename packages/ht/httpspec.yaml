all-versions:
- '0.1'
- 0.3.0.1
author: David Leuschner, Stefan Wehr
basic-deps:
  HTTP: '>=0'
  MissingH: '>=0'
  base: '>=4 && <5'
  bidispec: '>=0'
  bytestring: '>=0'
  cgi: '>=0'
  containers: '>=0'
  encoding: '>=0.6'
  filepath: '>=0'
  hxt: '>8.3'
  hxthelper: '>=0'
  mtl: '>=0'
  network: '>=0'
  pretty: '>=0'
  safe: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Using httpspec you can write a specification for a HTTP request/response
  defining the method, headers, url parameters and the body.  This
  specification bidirectionally maps an abstract request/response data
  type to a concrete realisation as a HTTP request/response.  The
  specification can be used to generate HTTP requests/responses from an
  abstract description and it can be used to parse a HTTP request/response
  into such an abstract description.  The idea is very similar to the way
  pickling of XML data is described in HXT.
  For example, the abstract representation of an authentication request
  and response could be described as
  data AuthUserReq
  = AuthUserReq
  { authUser_user :: String
  , authUser_pass :: String
  }
  data AuthUserRes
  = AuthUserOk { authUserOk_sid :: String }
  | AuthUserFailed
  Using httpspec you can define a mapping between HTTP and these types:
  instance HasReqSpec AuthUserReq where
  reqSpec =
  rsMeth Http.POST $
  rsPath "/authenticate-user" $
  rsWrap (uncurry AuthUserReq, \(AuthUserReq a b) -> (a,b)) $
  rsPair (rsParam "uid") (rsParam "pass")
  instance HasResSpec AuthUserRes where
  resSpec =
  rsSwitch
  [ rsCase (AuthUserOk,authUserOk_sid) $
  rsStatus 200 $
  rsContentType "text/plain" $
  rsEncodingFixed UTF8 $
  rsBody
  , rsCaseConst AuthUserFailed $
  rsStatus 403
  ]
description-type: haddock
hash: 9d67e0dd2c8faa2a9e016247e510685436de13393e58e43b0e20b33c98cb9299
homepage: ''
latest: 0.3.0.1
license-name: LicenseRef-LGPL
maintainer: David Leuschner <leuschner@openfactis.org>
synopsis: Specification of HTTP request/response generators and parsers
test-bench-deps: {}
