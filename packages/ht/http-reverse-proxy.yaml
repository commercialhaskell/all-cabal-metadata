homepage: https://github.com/fpco/http-reverse-proxy
changelog-type: markdown
hash: 0eb27277306b4950046bf9acc2c721f219d6e9eb939d950cd8cc32c4b9433800
test-bench-deps:
  warp: '>=2.1'
  http-reverse-proxy: -any
  streaming-commons: -any
  bytestring: -any
  wai: -any
  unliftio: -any
  base: <10
  hspec: '>=1.3'
  network: -any
  conduit: '>=1.1'
  conduit-extra: -any
  blaze-builder: -any
  transformers: -any
  http-conduit: '>=2.3'
  resourcet: -any
  http-types: -any
maintainer: michael@fpcomplete.com
synopsis: Reverse proxy HTTP requests, either over raw sockets or with WAI
changelog: |
  ## 0.6.0.2

  * Add `wpsLogRequest` function which provides the ability to log the
    constructed `Request`.

  ## 0.6.0.1

  * Introduce a "semi cached body" to let the beginning of a request body be retried [#34](https://github.com/fpco/http-reverse-proxy/issues/34)

  ## 0.6.0

  * Switch over to `unliftio` and conduit 1.3
  * Drop dependency on `data-default-class`, drop `Default` instances

  ## 0.5.0.1

  * Support http-conduit 2.3 in test suite [#26](https://github.com/fpco/http-reverse-proxy/issues/26)

  ## 0.5.0

  * update `wpsProcessBody` to accept response's initial request

  ## 0.4.5

  * add `Eq, Ord, Show, Read` instances to `ProxyDest`

  ## 0.4.4

  * add `rawTcpProxyTo` which can handle proxying connections without http headers
    [#21](https://github.com/fpco/http-reverse-proxy/issues/21)

  ## 0.4.3.3

  * `fixReqHeaders` may create weird `x-real-ip` header [#19](https://github.com/fpco/http-reverse-proxy/issues/19)

  ## 0.4.3.2

  * Minor doc cleanup

  ## 0.4.3.1

  * Use CPP so we can work with `http-client` pre and post 0.5 [#17](https://github.com/fpco/http-reverse-proxy/pull/17)

  ## 0.4.3

  * Allow proxying to HTTPS servers. [#15](https://github.com/fpco/http-reverse-proxy/pull/15)

  ## 0.4.2

  *  Add configurable timeouts [#8](https://github.com/fpco/http-reverse-proxy/pull/8)

  ## 0.4.1.3

  * Include README.md and ChangeLog.md
basic-deps:
  http-client: '>=0.3'
  streaming-commons: -any
  bytestring: '>=0.9'
  wai: '>=3.0'
  case-insensitive: '>=0.4'
  unliftio: '>=0.2'
  base: '>=4.11 && <5'
  text: '>=0.11'
  network: -any
  word8: '>=0.0'
  conduit: '>=1.3'
  conduit-extra: -any
  containers: -any
  blaze-builder: '>=0.3'
  transformers: -any
  wai-logger: -any
  resourcet: -any
  http-types: '>=0.6'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.1
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.1.1.4
- 0.1.1.5
- 0.1.1.6
- 0.2.0
- 0.2.1
- 0.2.1.1
- 0.3.0
- 0.3.0.1
- 0.3.1
- 0.3.1.1
- 0.3.1.2
- 0.3.1.3
- 0.3.1.4
- 0.3.1.5
- 0.3.1.6
- 0.3.1.7
- 0.3.1.8
- 0.4.0
- 0.4.0.1
- 0.4.1.2
- 0.4.1.3
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.3.2
- 0.4.3.3
- 0.4.4
- 0.4.5
- 0.5.0
- 0.5.0.1
- 0.6.0
- 0.6.0.1
author: Michael Snoyman
latest: 0.6.0.1
description-type: markdown
description: |
  http-reverse-proxy
  ==================

  Provides a simple means of reverse-proxying HTTP requests. The raw approach
  uses the same technique as leveraged by keter, whereas the WAI approach
  performs full request/response parsing via WAI and http-conduit.

  ## Raw example

  The following sets up raw reverse proxying from local port 3000 to
  www.example.com, port 80.

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}
  import Network.HTTP.ReverseProxy
  import Data.Conduit.Network

  main :: IO ()
  main = runTCPServer (serverSettings 3000 "*") $ \appData ->
      rawProxyTo
          (\_headers -> return $ Right $ ProxyDest "www.example.com" 80)
          appData
  ```
license-name: BSD-3-Clause
