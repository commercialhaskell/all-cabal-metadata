all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
- 0.0.4.1
- 0.0.4.2
- 0.0.4.3
- 0.0.4.4
- 0.0.5.1
author: Théophile Choutri
basic-deps:
  base: '>=4.12 && <5.0'
  bytestring: ^>=0.12
  colourista: ^>=0.1
  directory: '>=0'
  literatex: '>=0'
  mtl: '>=0'
  parsec: ^>=3.1
  pg-entity: '>=0'
  pg-transact: '>=0.3 && <0.4'
  postgresql-simple: '>=0.7 && <0.8'
  resource-pool: '>=0.4 && <0.5'
  shake: '>=0'
  template-haskell: '>=2.15.0.0 && <2.23.0.0.0'
  text: '>=2.1 && <2.2'
  text-display: ^>=1.0
  text-manipulate: ^>=0.3
  time: '>=1.14 && <1.15'
  uuid: '>=0'
  vector: ^>=0.13
changelog: "# Revision history for Entity\n\n## 0.0.5.1 -- 2025-04-23\n\n* Update
  dependencies\n\n## 0.0.5.0 -- 2024-01-19\n\n* Update version of `bytestring` to
  0.12, `text` to 2.1 and `postgresql-simple` to 0.7 ([#72](https://github.com/tchoutri/pg-entity/pull/72))\n\n##
  0.0.4.4 -- 2023-12-23\n* Remove extraneous quoting of table name in _selectWithFields\n\n##
  0.0.4.3 -- 2023-06-26\n* Fix the URL of the tutorial\n* Bump version bounds for
  `base`, `resource-pool` and `template-haskell` \n* Bump supported minor GHC versions\n*
  Internalise `Database.PostgreSQL.Entity.Internal.BlogPost` for the tests\n\n## 0.0.3.0
  -- 2022-10-30\n\n* Fix compilation with resource-pool <0.3 (#51)\n\n## 0.0.2.0 --
  2022-08-27\n\nThis is an experimental release\n\n* Add `queryOne_`, which takes
  no params and returns 0 or 1 results.\n* Add `FieldModifiers` deriving option, which
  takes multiple modifiers:\n  * `StripPrefix (prefix :: Symbol)`: You can remove
  a certain prefix from your field names\n  * `CamelTo (separator :: Symbol)` and
  its variants, `CamelToSnake` and `CamelToKebab`: Transform field names written\n
  \ in CamelCase to snake\\_case, kebab-case, or with a custom separator.\n* Remove
  redundant metadata about the query nature when logging the query\n* Add `selectOneWhereIn`
  that can match a row's column in a value of user-provided values\n* Add `selectOrderBy`
  to specify a vector of sorting specs (field + sorting keyword) with your select.\n*
  Fix primary key detection in generic deriving\n* Remove `withPool'`.\n* When using
  `resource-pool-0.3`, the type of `withPool` reflects the removal of `MonadBaseControl`
  from the upstream.\n* The `prod` Cabal flag is introduced. At this time, it disables
  the stdout logging of queries\n* Add an `upsert` function\n* Stop filtering out
  unknown fields passed to `_where`. PostgreSQL will report them better than we do.\n\n##
  0.0.1.0 -- 2021-11-05\n\n* First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "<h1 align=\"center\">\n  pg-entity\n</h1>\n\n<p align=\"center\">\n<a
  href=\"https://github.com/tchoutri/pg-entity/actions\">\n  <img src=\"https://img.shields.io/github/actions/workflow/status/tchoutri/pg-entity/ci.yml?style=flat-square\"
  alt=\"CI badge\" />\n</a>\n<a href=\"https://haskell.org\">\n  <img src=\"https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&style=flat-square\"
  alt=\"made with Haskell\"/>\n</a>\n<a href=\"https://hackage.haskell.org/package/pg-entity\">\n
  \ <img src=\"https://img.shields.io/hackage/v/pg-entity?style=flat-square\" alt=\"Hackage\"
  />\n</a>\n</p>\n\nThis library is a pleasant layer on top of [postgresql-simple][pg-simple]
  to safely expand the fields of a table when\nwriting SQL queries.  \nIt aims to
  be a convenient middle-ground between rigid ORMs and hand-rolled SQL query strings.
  Here is its philosophy:\n\n* The serialisation/deserialisation part is left to the
  consumer, so you have to go with your own FromRow/ToRow instances.\n  You are encouraged
  to adopt data types in your application that model your business domain, rather
  than restrict yourself within the limits of what\n  an SQL schema can represent.
  Use an intermediate Data Access Object (DAO) that can easily be serialised and deserialised\n
  \ to and from a SQL schema, to and from which you will morph your business data-types.\n*
  Illegal states are made harder (but not impossible) to represent. Generic deriving
  of entities is encouraged, and\n  quasi-quoters are provided to denote fields in
  a safer way. \n* Escape hatches are provided at every level. The types that are
  manipulated are Query for which an `IsString` instance exists.\n  Don't force yourself
  to use the higher-level API if the lower-level combinators work for you, and if
  those don't either, “Just Write SQL”™.\n\nIts dependency footprint is optimised
  for my own setups, and as such it makes use of [text][text], [vector][vector] and\n[pg-transact][pg-transact].\n\n\n\nTable
  of Contents\n=================\n\n* [Documentation](#documentation)\n  * [Escape
  hatches](#escape-hatches)\n* [Acknowledgements](#acknowledgements)\n\n## Documentation\n\n*
  [Tutorial][docs-url]\n\nThis library aims to be thoroughly tested, by the means
  of Oleg Grenrus' [cabal-docspec][docspec]\nand more traditional tests for database
  roundtrips.\n\nI aim to produce and maintain a decent documentation, therefore do
  not hesitate to raise an issue if you feel that\nsomething is badly explained and
  should be improved.\n\n\n### Escape hatches\n\nSafe SQL generation is a complex
  subject, and it is far from being the objective of this library. The main topic
  it\naddresses is listing the fields of a table, which is definitely something easier.
  This is why every level of this wrapper\nis fully exposed, so that you can drop
  down a level at your convience.\n\nIt is my personal belief, firmly rooted in experience,
  that we should not aim to produce statically-checked SQL and have\nit \"verified\"
  by the compiler. The techniques that would allow that in Haskell are still far from
  being optimised and\nergonomic. As such, this library makes no effort to produce
  semantically valid SQL queries, because one would have to\nencode the semantics
  of SQL in the type system (or in a rule engine of some sort), and this is clearly
  not the kind of\nthings I want to spend my youth on.\n\nEach function is tested
  for its output with doctests, and the ones that cannot (due to database connections)
  are tested\nin the more traditional test-suite.\n\nThe conclusion is : Test your
  DB queries. Test the encoding/decoding. Make roundtrip tests for your data-structures.\n\n##
  Acknowledgements \n\nI wish to thank\n\n* Clément Delafargue, whose [anorm-pg-entity][anorm-pg-entity]
  library and its [initial port in Haskell][entity-blogpost-fretlink]\n  are the spiritual
  parents of this library\n* Koz Ross, for his piercing eyes and his immense patience\n*
  Joe Kachmar, who enlightened me many times\n\n[docs]: https://img.shields.io/badge/Tutorial%20and%20Guides-pg--entity-blueviolet\n[docs-url]:
  https://hackage.haskell.org/package/pg-entity/src/docs/book/index.html\n[docspec]:
  https://github.com/phadej/cabal-extras/blob/master/cabal-docspec/MANUAL.md\n[pg-transact-hspec]:
  https://github.com/jfischoff/pg-transact-hspec.git\n[entity-blogpost-fretlink]:
  https://blog.clement.delafargue.name/posts/2020-09-23-yet-another-unsafe-db-layer.html\n[anorm-pg-entity]:
  https://github.com/CleverCloud/anorm-pg-entity\n[pg-simple]: https://hackage.haskell.org/package/postgresql-simple\n[pg-transact]:
  https://hackage.haskell.org/package/pg-transact\n[text]: https://hackage.haskell.org/package/text\n[vector]:
  https://hackage.haskell.org/package/vector\n[CI-badge]: https://img.shields.io/github/workflow/status/tchoutri/pg-entity/CI?style=flat-square\n[CI-url]:
  https://github.com/tchoutri/pg-entity/actions\n[simple-haskell]: https://img.shields.io/badge/Simple-Haskell-purple?style=flat-square\n[BlogPost-module]:
  https://github.com/tchoutri/pg-entity/blob/main/src/Database/PostgreSQL/Entity/Internal/BlogPost.hs\n\n"
description-type: markdown
hash: f3197633bfba1d4cdd3a584c8ed700fd6b4f3c6f4f824adb7be9683b6c85980d
homepage: https://hackage.haskell.org/package/pg-entity/src/docs/book/index.html
latest: 0.0.5.1
license-name: MIT
maintainer: Théophile Choutri
synopsis: A pleasant PostgreSQL layer
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  envparse: '>=0'
  hedgehog: '>=0'
  mtl: '>=0'
  optics-core: '>=0'
  pg-entity: '>=0'
  pg-transact: '>=0'
  postgresql-migration: ^>=0.2
  postgresql-simple: '>=0'
  resource-pool: '>=0'
  safe-exceptions: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  time: '>=0'
  uuid: '>=0'
  vector: '>=0'
