homepage: https://www.grammaticalframework.org
changelog-type: markdown
hash: 7cf0c301c6e03b40100d2fd2fb751b73435f3246749b384ab264f9a0e9748cc6
test-bench-deps: {}
maintainer: kr.angelov@gmail.com
synopsis: Bindings to the C version of the PGF runtime
changelog: |
  ## 1.3.0

  - Add completion support.

  ## 1.2.1

  - Remove deprecated `pgf_print_expr_tuple`.
  - Added an API for cloning expressions/types/literals.

  ## 1.2.0

  - Stop `pgf-shell` from being built by default.
  - parseToChart also returns the category.
  - bugfix in bracketedLinearize.

  ## 1.1.0

  - Remove SG library.

  ## 1.0.0

  - Everything up until 2020-07-11.
basic-deps:
  base: '>=4.3 && <5'
  containers: -any
  pretty: -any
all-versions:
- 1.2.0
- 1.2.1
- 1.3.0
author: Krasimir Angelov
latest: 1.3.0
description-type: markdown
description: "# PGF2\n\nThis is a Haskell binding to the PGF runtime written in C.\n\nThe
  exposed modules are:\n\n- `PGF2`: a user API similar to Python and Java APIs\n-
  `PGF2.Internal`: an internal module with FFI definitions for the relevant C functions\n\n##
  How to compile\n\n**Important:** You must have the C runtime already installed and
  available on your system.\nSee <https://github.com/GrammaticalFramework/gf-core/blob/master/src/runtime/c/INSTALL>\n\nOnce
  the runtine is installed, you can install the library to your global Cabal installation:\n\n```\ncabal
  install pgf2 --extra-lib-dirs=/usr/local/lib\n```\n\nor add it to your `stack.yaml`
  file:\n\n```yaml\nextra-deps:\n  - pgf2\nextra-lib-dirs:\n  - /usr/local/lib\n```\n\n##
  How to use\n\nSimply import `PGF2` in your Haskell program.\nThe Cabal infrastructure
  will make sure to tell the compiler where to find the relevant modules.\n\n## Example\n\n```haskell\nmodule
  Main where\n\nimport PGF2\nimport qualified Data.Map as Map\n\nmain = do\n  pgf
  <- readPGF \"App12.pgf\"\n  let Just eng = Map.lookup \"AppEng\" (languages pgf)\n
  \ \n  -- Parsing\n  let res = parse eng (startCat pgf) \"this is a small theatre\"\n
  \ let ParseOk ((tree,prob):rest) = res\n  print tree\n  \n  -- Linearisation\n  let
  Just expr = readExpr \"AdjCN (PositA red_A) (UseN theatre_N)\"\n  let s = linearize
  eng expr\n  print s\n```\n"
license-name: LGPL-3.0-only
