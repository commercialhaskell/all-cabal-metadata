homepage: https://gitlab.com/daniel-casanueva/haskell/mysql-json-table
changelog-type: markdown
hash: b89a4a68e283090baeaf8d86bbf5039a0d9585f86c0776e8beb05d478d18aebd
test-bench-deps: {}
maintainer: Daniel Casanueva (daniel.casanueva `at` proton.me)
synopsis: Using MySQL to store id-to-json tables.
changelog: |-
  ## 0.1.2.0
  * Re-export: `ConnectInfo`, `defaultConnectInfo`, `Connection`.
  * New function: `withSQL`.
  * Fix id table creation.
  * Fixes for id table queries.

  ## 0.1.1.0
  * Add new function: `moveId`.

  ## 0.1.0.1
  * Add lower bound for mysql-simple dependency.

  ## 0.1.0.0
  * Initial release.
basic-deps:
  exceptions: -any
  bytestring: -any
  mysql: -any
  base: <5
  conduit: -any
  mysql-json-table: -any
  aeson: -any
  mysql-simple: '>=0.4.8'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
author: Daniel Casanueva (daniel.casanueva `at` proton.me)
latest: 0.1.2.0
description-type: markdown
description: |-
  # mysql-json-table

  Using mysql to store id-to-json tables.

  A table would look something like this:

  |       id       |        data        |
  |----------------|--------------------|
  | Row identifier | JSON-encoded value |

  ## Why would you do this?

  To re-use mysql-server capabilities without having to deal with table reshaping.
  If changes come down the road, the data content might change, but the table stays the same.
  JSON can easily be made compatible between versions, making for smoother releases and rollbacks.
  It's also simple, and I like simple.

  ## Documentation

  Haddock documentation can be found [here](https://daniel-casanueva.gitlab.io/haskell/mysql-json-table/doc)
  (based on the main branch).
license-name: MIT
