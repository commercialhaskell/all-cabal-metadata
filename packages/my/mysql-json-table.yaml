all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.1.4.0
author: Daniel Casanueva (daniel.casanueva `at` proton.me)
basic-deps:
  aeson: '>=0'
  base: <5
  bytestring: '>=0'
  conduit: '>=0'
  exceptions: '>=0'
  hashable: '>=0'
  http-api-data: '>=0'
  mysql: '>=0'
  mysql-json-table: '>=0'
  mysql-simple: '>=0.4.8'
changelog: |
  ## 0.1.4.0
  * Add `Hashable` instance for the `Id` type.

  ## 0.1.3.0
  * New instances for `Id`:
    - `FromJSONKey`
    - `ToJSONKey`
    - `FromHttpApiData`
    - `ToHttpApiData`

  ## 0.1.2.0
  * Re-export: `ConnectInfo`, `defaultConnectInfo`, `Connection`.
  * New function: `withSQL`.
  * Fix id table creation.
  * Fixes for id table queries.

  ## 0.1.1.0
  * Add new function: `moveId`.

  ## 0.1.0.1
  * Add lower bound for mysql-simple dependency.

  ## 0.1.0.0
  * Initial release.
changelog-type: markdown
description: |-
  # mysql-json-table

  Using mysql to store id-to-json tables.

  A table would look something like this:

  |       id       |        data        |
  |----------------|--------------------|
  | Row identifier | JSON-encoded value |

  ## Why would you do this?

  To re-use mysql-server capabilities without having to deal with table reshaping.
  If changes come down the road, the data content might change, but the table stays the same.
  JSON can easily be made compatible between versions, making for smoother releases and rollbacks.
  It's also simple, and I like simple.

  ## Documentation

  Haddock documentation can be found [here](https://daniel-casanueva.gitlab.io/haskell/mysql-json-table/doc)
  (based on the main branch).
description-type: markdown
hash: fd94ad0ed32ddc1409ee2094b761dce1ca12fe70a000464b9ed30f2b120f9a53
homepage: https://gitlab.com/daniel-casanueva/haskell/mysql-json-table
latest: 0.1.4.0
license-name: MIT
maintainer: Daniel Casanueva (daniel.casanueva `at` proton.me)
synopsis: Using MySQL to store id-to-json tables.
test-bench-deps: {}
