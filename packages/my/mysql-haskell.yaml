all-versions:
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.7.0.0
- 0.7.1.0
- 0.8.0.0
- 0.8.1.0
- 0.8.2.0
- 0.8.3.0
- 0.8.4.0
- 0.8.4.1
- 0.8.4.2
- 0.8.4.3
- 1.1.0
- 1.1.2
- 1.1.3
- 1.1.4
- 1.1.5
- 1.1.6
author: winterland1989
basic-deps:
  base: '>=4.7 && <4.19.0 || ^>=4.19.0 || ^>=4.20.0'
  binary: '>=0.8.3 && <0.9'
  blaze-textual: '>=0.2 && <0.3'
  bytestring: '>=0.10.2.0 && <0.12 || ^>=0.12.0'
  bytestring-lexing: '>=0.5 && <0.6'
  crypton: '>=0.31 && <0.40 || ^>=1.0.0'
  crypton-x509: '>=1.5 && <2.0'
  crypton-x509-store: '>=1.5 && <2.0'
  crypton-x509-system: '>=1.5 && <2.0'
  data-default-class: '>=0.1.2 && <0.2'
  deepseq: '>=1.4.6 && <1.5 || ^>=1.5.0'
  io-streams: '>=1.2 && <2.0'
  memory: '>=0.14.4 && <0.19'
  monad-loops: '>=0.4 && <0.5'
  network: '>=2.3 && <4.0'
  pem: '>=0.2.4 && <0.3'
  scientific: '>=0.3 && <0.4'
  text: '>=1.1 && <2.1 || ^>=2.1'
  time: '>=1.5.0 && <1.12 || ^>=1.12.2 || ^>=1.14'
  tls: '>=1.7.0 && <1.8 || ^>=1.8.0 || ^>=1.9.0 || ^>=2.0.0 || ^>=2.1.0'
  vector: '>=0.8 && <0.13 || ^>=0.13.0'
  word-compat: '>=0.0 && <0.1'
changelog: "# Revision history for mysql-haskell\n\n## 1.1.6 -- 2024.10.23 \n+ bump
  constraints\n\n## 1.1.5 -- 2024.06.25\n+ bump constraints\n\n## 1.1.4 -- 2024.02.17
  \n+ bump constraints\n\n## 1.1.3 -- 2023.08.30\n+ bump constraints\n\n## 1.1.2 --
  2023.08.14\n\n+ Fix package name of changelog\n+ Drop support for RC4 chipher which
  is depracated\n+ drop dependency on binary-ieee754, which was unused.\n+ Fix text
  2 support, thanks @RikvanToor\n\n## 1.1.1 -- 2023.08.14\n\n+ cleaned up some warnings\n+
  Merge back into mysql-haskell after gaining hackage access.\n+ Deprecate mysql-pure
  in favor of old hackage\n  since it's only been out for a day this sort off\n  stream
  lines upgrading for most applications.\n  Cabal will just figure it out, rather
  then\n  users having to \"find\" mysql-pure.\n  I'll just make a bonus announcement
  to\n  let people not depend on mysql-pure.\n\n## 1.1.0 -- 2023.08.12 \nThere was
  a bunch of stuff unrelated to mysql\nwhich I purged.\nIf you need any on these go
  depend on the \nrespective unmaintained package.\n\n+ Delete module System.IO.Streams.UnixSocket\n+
  Dleete module Data.Binary.Parser.Char8\n+ Delete module System.IO.Streams.Binary\n\n##
  1.0.2 -- 2023.08.12 \n+ Bump dependencies, go all into crypton\n+ merge tcp-streams
  into the package\n\n## 1.0.1 -- 2023.08.12 \n+ add json testfiles as extra source
  files to make tests pass in nix builds\n\n## 1.0.0 -- 2023.08.12 \n\n+ Fork from
  mysql-haskell into mysql-pure\n+ add flake\n+ merge packages:\n  + word24\n  + binary-parsers\n
  \ + wirestreams\n  \n  This involved copying over all source files,\n  furthermore
  I copied in all tests and benchmarks.\n  The tests are now one giant test suite.\n
  \ I temporarly disabled the mysql tests as they need a mysql\n  database to run
  which won't work nicely with CI right now.\n  However you can run these locally
  by uncommenting that line.\n+ Add CI which relies on native cabal instead of stack\n+
  Add an action to automatically bump version.\n+ Add nightly build cron job.\n\n##
  0.8.4.3 -- 2020-11-04\n\n* Fix build with GHC 8.8.\n\n## 0.8.4.2 -- 2019-01-22\n\n*
  Fix [stackage#4312](https://github.com/commercialhaskell/stackage/issues/4312):
  Relax `network` bounds.\n\n## 0.8.4.1 -- 2018-10-23\n\n* Relax `tasty` version bound
  to build with latest stackage. [#26](https://github.com/winterland1989/mysql-haskell/pull/26)\n\n##
  0.8.4.0  -- 2018-10-23\n\n* Add `executeMany_` to execute batch SQLs, [#26](https://github.com/winterland1989/mysql-haskell/issues/26).\n*
  Optimize connection closing sequence, [#20](https://github.com/winterland1989/mysql-haskell/pull/20),
  [#25](https://github.com/winterland1989/mysql-haskell/pull/25).\n\n## 0.8.3.0  --
  2017-10-09\n\n* Remove unnecessary exports from `Database.MySQL.Base`.\n* Reuse
  TCP connection when using TLS.\n* Clean up some compiler warnings.\n\n## 0.8.2.0
  \ -- 2017-10-09\n\nCourtesy of naushadh, `mysql-haskell` will be on stackage again.\n\n*
  Update to use `tcp-streams-1.x`.\n* Fix compatibility with new  `tls/memory` version.\n\n##
  0.8.1.0  -- 2016-11-09\n\n* Add `Show` instance to `ConnectInfo`.\n* Add proper
  version bound for `binary`.\n\n## 0.8.0.0  -- 2016-11-09\n\n* Add `ciCharset` field
  to support `utf8mb4` charset.\n* Add `BitMap` field to `COM_STMT_EXECUTE`, and [#8](https://github.com/winterland1989/mysql-haskell/pull/8)
  by [alexbiehl](https://github.com/alexbiehl).\n\n## 0.7.1.0 -- 2016-11-21\n\n* Add
  `QueryParam` class and `Param` datatype for multi-valued parameter(s) by [naushadh](https://github.com/naushadh).\n\n##
  0.7.0.0 -- 2016-11-09\n\n* Split openssl support to [mysql-haskell-openssl](http://hackage.haskell.org/package/mysql-haskell-openssl).\n*
  Expose `Database.MySQL.Connection` module due to this split, it shouldn't be used
  by user directly.\n\n## 0.6.0.0 -- 2016-10-25\n\n* Use binary-ieee754 for older
  binary compatibility.\n* Clean up `Database.MySQL.Protocol.MySQLValue` 's export.\n\n##
  0.5.1.0 -- 2016-10-20\n\n* Add `queryVector`, `queryVector_` and `queryStmtVector`.\n*
  Use binary-parsers to speed up binary parsers.\n\n## 0.5.0.0 -- 2016-8-22\n\n* Export
  exception types.\n* Fix a regression cause password authentication failed, add tests.\n*
  Fix a reading order bug cause 'prepareStmt/prepareStmtDetail' failed.\n\n## 0.4.0.0
  -- 2016-8-22\n\n* Enable TLS support via `tls` package, add benchmarks.\n\n## 0.3.0.0
  \ -- 2016-8-22\n\n* Fix tls connection, change TLS implementation to HsOpenSSL,
  add benchmarks.\n* Fix a bug in 'putLenEncInt' which cause sending large field fail.\n*
  Various optimizations.\n\n## 0.2.0.0  -- 2016-8-19\n\n* Fix OK packet decoder.\n*
  Fix sending large packet(>16M).\n* Add `executeMany`, `withTransaction` to Base
  module.\n* Add timestamp field to `RowBinLogEvent`.\n* Add test, add insert benchmark.\n\n##
  0.1.0.0  -- 2016-8-16\n\n* First version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "mysql-haskell\n=============\n\n[![Hackage](https://img.shields.io/hackage/v/mysql-haskell.svg?style=flat)](http://hackage.haskell.org/package/mysql-haskell)\n\n`mysql-haskell`
  is a MySQL driver written entirely in haskell.\n\n<a href=\"http://chordify.net/\"><img
  height=42 src='https://chordify.net/img/about/slide_250_1.jpg'></a>\n\nIs it fast?\n----------\n\nIn
  short, `select`(decode) is about 1.5 times slower than pure c/c++ but 5 times faster
  than `mysql-simple`, `insert` (encode) is about 1.5 times slower than pure c/c++,
  there're many factors involved(tls, prepared statment, batch using multiple statement):\n\n<img
  src=\"https://github.com/jappeace/mysql-pure/blob/master/benchmark/result.png?raw=true\"
  width=\"100%\">\n\nAbove figures showed the time to:\n\n* perform a \"select * from
  employees\" from a [sample table](https://github.com/datacharmer/test_db)\n* insert
  1000 rows into a 29-columns table per thread with auto-commit off.\n\nThe benchmarks
  are run by my MacBook Pro 13' 2015.\n\nMotivation\n----------\n\nWhile MySQL may
  not be the most advanced sql database, it's widely used among China companies, including
  but not limited to Baidu, Alibaba, Tecent etc., but haskell's MySQL support is not
  ideal, we only have a very basic MySQL binding written by Bryan O'Sullivan, and
  some higher level wrapper built on it, which have some problems:\n\n+ lack of prepared
  statment and binary protocol support.\n\n+ limited concurrency due to FFI.\n\n+
  no replication protocol support.\n\n`mysql-pure` is intended to solve these problems,
  and provide foundation for higher level libraries such as groundhog and persistent,
  so that accessing MySQL is both fast and easy in haskell.\n\nGuide\n-----\n\nThe
  `Database.MySQL.Base` module provides everything you need to start making queries:\n\n```haskell\n{-#
  LANGUAGE OverloadedStrings #-}\n\nmodule Main where\n\nimport Database.MySQL.Base\nimport
  qualified System.IO.Streams as Streams\n\nmain :: IO () \nmain = do\n    conn <-
  connect\n        defaultConnectInfo {ciUser = \"username\", ciPassword = \"password\",
  ciDatabase = \"dbname\"}\n    (defs, is) <- query_ conn \"SELECT * FROM some_table\"\n
  \   print =<< Streams.toList is\n```\n\n`query/query_` will return a column definition
  list, and an `InputStream` of rows, you should consume this stream completely before
  start new queries.\n\nIt's recommanded to use prepared statement to improve query
  speed:\n\n```haskell\n    ...\n    s <- prepareStmt conn \"SELECT * FROM some_table
  where person_age > ?\"\n    ...\n    (defs, is) <- queryStmt conn s [MySQLInt32U
  18]\n    ...\n```\n\nIf you want to do batch inserting/deleting/updating, you can
  use `executeMany` to save considerable time.\n\nThe `Database.MySQL.BinLog` module
  provides binlog listenning functions and row-based event decoder, following program
  will automatically get last binlog position, and print every row event it receives:\n\n```haskell\n{-#
  LANGUAGE LambdaCase #-}\nmodule Main where\n\nimport           Control.Monad         (forever)\nimport
  qualified Database.MySQL.BinLog as MySQL\nimport qualified System.IO.Streams     as
  Streams\n\nmain :: IO () \nmain = do\n    conn <- MySQL.connect \n        MySQL.defaultConnectInfo\n
  \         { MySQL.ciUser = \"username\"\n          , MySQL.ciPassword = \"password\"\n
  \         , MySQL.ciDatabase = \"dbname\"\n          }\n    MySQL.getLastBinLogTracker
  conn >>= \\ case\n        Just tracker -> do\n            es <- MySQL.decodeRowBinLogEvent
  =<< MySQL.dumpBinLog conn 1024 tracker False\n            forever $ do\n                Streams.read
  es >>= \\ case\n                    Just v  -> print v\n                    Nothing
  -> return ()\n        Nothing -> error \"can't get latest binlog position\"\n```\n\nBuild
  Test Benchmark\n--------------------\n\nJust use the old way:\n\n```bash\ngit clone
  https://github.com/winterland1989/mysql-pure.git\ncd mysql-pure\ncabal install --enable-tests
  --only-dependencies\ncabal build\n```\n\nRunning tests require:\n\n* A local MySQL
  server, a user `testMySQLHaskell` and a database `testMySQLHaskell`, you can do
  it use following script:\n\n```bash\nmysql -u root -e \"CREATE DATABASE IF NOT EXISTS
  testMySQLHaskell;\"\nmysql -u root -e \"CREATE USER 'testMySQLHaskell'@'localhost'
  IDENTIFIED BY ''\"\nmysql -u root -e \"GRANT ALL PRIVILEGES ON testMySQLHaskell.*
  TO 'testMySQLHaskell'@'localhost'\"\nmysql -u root -e \"FLUSH PRIVILEGES\"\n```\n\n*
  Enable binlog by adding `log_bin = filename` to `my.cnf` or add `--log-bin=filename`
  to the server, and grant replication access to `testMySQLHaskell` with:\n\n```bash\nmysql
  -u root -e \"GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'testMySQLHaskell'@'localhost';\"\n```\n\n*
  Set `binlog_format` to `ROW`.\n\n* Set `max_allowed_packet` to larger than 256M(for
  test large packet).\n\nNew features will be automatically tested by inspecting MySQL
  server's version, travis is keeping an eye on following combinations:\n\n+ CABALVER=1.18
  GHCVER=7.8.4  MYSQLVER=5.5\n+ CABALVER=1.22 GHCVER=7.10.2 MYSQLVER=5.5\n+ CABALVER=1.24
  GHCVER=8.0.1  MYSQLVER=5.5\n+ CABALVER=1.24 GHCVER=8.0.1  MYSQLVER=5.6\n+ CABALVER=1.24
  GHCVER=8.0.1  MYSQLVER=5.7\n\nPlease reference `.travis.yml` if you have problems
  with setting up test environment.\n\nEnter benchmark directory and run `./bench.sh`
  to benchmark 1) c++ version 2) mysql-pure 3) FFI version mysql, you may need to:\n\n+
  Modify `bench.sh`(change the include path) to get c++ version compiled.\n+ Modify
  `mysql-pure-bench.cabal`(change the openssl's lib path) to get haskell version compiled.\n+
  Setup MySQL's TLS support, modify `MySQLHaskellOpenSSL.hs/MySQLHaskellTLS.hs` to
  change the CA file's path, and certificate's subject name.\n+ Adjust rts options
  `-N` to get best results.\n\nWith `-N10` on my company's 24-core machine, binary
  protocol performs almost identical to c version!\n\nReference\n---------\n\n[MySQL
  official site](https://dev.mysql.com/doc/internals/en/) provided intensive document,
  but without following project, `mysql-pure` may not be written at all:\n\n+ [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java)\n\n+
  [canal](https://github.com/alibaba/canal)\n\n+ [go mysql toolkit](https://github.com/siddontang/go-mysql)\n\n+
  [python binlog parser](https://github.com/noplay/python-mysql-replication)\n\nLicense\n-------\n\nCopyright
  (c) 2016, winterland1989\n\nAll rights reserved.\n\nRedistribution and use in source
  and binary forms, with or without\nmodification, are permitted provided that the
  following conditions are met:\n\n    * Redistributions of source code must retain
  the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n
  \   * Redistributions in binary form must reproduce the above\n      copyright notice,
  this list of conditions and the following\n      disclaimer in the documentation
  and/or other materials provided\n      with the distribution.\n\n    * Neither the
  name of winterland1989 nor the names of other\n      contributors may be used to
  endorse or promote products derived\n      from this software without specific prior
  written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS
  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
  OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY
  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.\n"
description-type: markdown
hash: faffbc9bf0a1ea669562501eedbc2fa0a6757c7dc9cccc452675199ddb000388
homepage: https://github.com/winterland1989/mysql-haskell
latest: 1.1.6
license-name: BSD-3-Clause
maintainer: hi@jappie.me
synopsis: pure haskell MySQL driver
test-bench-deps:
  QuickCheck: '>=2.7'
  attoparsec: '>=0'
  base: '>=0'
  binary: '>=0.8'
  bytestring: '>=0.10'
  bytestring-lexing: '>=0.5'
  case-insensitive: '>=0'
  containers: '>=0'
  criterion: '>=1.1 && <1.2 || >=1.6.3 && <1.7'
  deepseq: '>=1.2 && <2'
  directory: '>=0'
  filepath: '>=0'
  http-types: '>=0'
  io-streams: '>=0'
  mysql-haskell: '>=0'
  network: '>=0'
  quickcheck-instances: '>=0'
  scanner: '>=0'
  scientific: '>=0.3.0'
  tasty: '>=0.11 && <2.0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0.8'
  text: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
