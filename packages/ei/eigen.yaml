all-versions:
- 1.1.2
- 1.2.1
- 1.2.2
- 1.2.4
- 1.2.5
- 2.0.0
- 2.0.1
- 2.1.6
- 2.1.7
- 3.3.4.0
- 3.3.4.1
- 3.3.4.2
- 3.3.7.0
author: Oleg Sidorkin <oleg.sidorkin@gmail.com>
basic-deps:
  base: '>=4.10 && <5'
  binary: '>=0.8.0.0 && <0.8.6.0'
  bytestring: '>=0.10.4.0 && <0.11.0.0'
  constraints: '>=0.10.0 && <0.11.0'
  ghc-prim: '>=0'
  primitive: '>=0.6.4.0 && <0.7'
  transformers: '>=0.3 && <0.6'
  vector: '>=0.5 && <0.13'
changelog: ''
changelog-type: ''
description: |-
  __NOTE__: This library does not follow PVP. Instead, it follows Eigen's versioning. Version
  X.Y.Z.W means that the Eigen version is X.Y.Z, and the haskell release is W, where each W
  release is for bug fixes/API improvements.

  This module provides Haskell binding for <http://eigen.tuxfamily.org/ Eigen C++ library>.

  Eigen is versatile.

  * It supports all matrix sizes, from small fixed-size matrices to arbitrarily large dense matrices, and even sparse matrices.

  * It supports all standard numeric types, including std::complex, integers, and is easily extensible to custom numeric types.

  * It supports various <http://eigen.tuxfamily.org/dox/group__TopicLinearAlgebraDecompositions.html matrix decompositions> and <http://eigen.tuxfamily.org/dox/group__TutorialGeometry.html geometry features>.

  * Its ecosystem of <http://eigen.tuxfamily.org/dox/unsupported/index.html unsupported modules> provides many specialized features such as non-linear optimization, matrix functions, a polynomial solver, FFT, and much more.

  Eigen is fast.

  * Expression templates allow to intelligently remove temporaries and enable <http://eigen.tuxfamily.org/dox/TopicLazyEvaluation.html lazy evaluation>, when that is appropriate.

  * <http://eigen.tuxfamily.org/index.php?title=FAQ#Vectorization Explicit vectorization> is performed for SSE 2\/3\/4, ARM NEON, and AltiVec instruction sets, with graceful fallback to non-vectorized code.

  * Fixed-size matrices are fully optimized: dynamic memory allocation is avoided, and the loops are unrolled when that makes sense.

  * For large matrices, special attention is paid to cache-friendliness.

  Eigen is reliable.

  * Algorithms are carefully selected for reliability. Reliability trade-offs are <http://eigen.tuxfamily.org/dox/group__TopicLinearAlgebraDecompositions.html clearly documented> and <http://eigen.tuxfamily.org/dox/classEigen_1_1JacobiSVD.html extremely> <http://eigen.tuxfamily.org/dox/classEigen_1_1FullPivHouseholderQR.html safe> <http://eigen.tuxfamily.org/dox/classEigen_1_1FullPivLU.html decompositions> are available.

  * Eigen is thoroughly tested through its own <http://eigen.tuxfamily.org/index.php?title=Tests test suite> (over 500 executables), the standard BLAS test suite, and parts of the LAPACK test suite.

  Eigen is elegant.

  * The API is extremely <http://eigen.tuxfamily.org/index.php?title=API_Showcase clean and expressive> while feeling natural to C++ programmers, thanks to expression templates.

  * Implementing an algorithm on top of Eigen feels like just copying pseudocode.

  Eigen has good compiler support as we run our test suite against many compilers to guarantee reliability and work around any compiler bugs.
  Eigen also is standard C++98 and maintains very reasonable compilation times.

  Eigen is licensed under the MPL2, which is a simple weak copyleft license. Common questions about the MPL2 are answered in the official MPL2 FAQ at <http://www.mozilla.org/MPL/2.0/FAQ.html>.

  Note that currently, a few features in Eigen rely on third-party code licensed under the LGPL: SimplicialCholesky, AMD ordering, and constrained_cg. Such features are explicitly disabled by compiling Eigen with the EIGEN_MPL2_ONLY preprocessor symbol defined.

  Virtually any software may use Eigen. For example, closed-source software may use Eigen without having to disclose its own source code. Many proprietary and closed-source software projects are using Eigen right now, as well as many BSD-licensed projects.

  Documentation at the most extent replicates original <http://eigen.tuxfamily.org/dox/ Eigen documentation>.
description-type: haddock
hash: 7c24a86426b238e02ba0ac2179cc44997518b443a13828ed7a791fe49a6dffa5
homepage: https://github.com/chessai/eigen
latest: 3.3.7.0
license-name: BSD-3-Clause
maintainer: chessai <chessai1996@gmail.com>
synopsis: 'Eigen C++ library (linear algebra: matrices, sparse matrices, vectors,
  numerical solvers).'
test-bench-deps:
  base: '>=0'
  binary: '>=0'
  bytestring: '>=0'
  eigen: '>=0'
  ghc-prim: '>=0'
  mtl: '>=0'
  primitive: '>=0'
  transformers: '>=0'
  vector: '>=0'
