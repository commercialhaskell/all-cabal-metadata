homepage: https://github.com/MercuryTechnologies/slack-web
changelog-type: markdown
hash: 8a61e7c947cd168164bde55f2cb22d858744ad17b1f95a34f2632740079831e5
test-bench-deps:
  bytestring: -any
  base: -any
  th-compat: -any
  time: -any
  aeson-pretty: -any
  hspec: -any
  text: -any
  generic-arbitrary: -any
  hspec-core: -any
  quickcheck-instances: -any
  string-variants: -any
  fakepull: -any
  mtl: -any
  pretty-simple: ^>=4.1
  classy-prelude: -any
  slack-web: -any
  hspec-golden: -any
  QuickCheck: -any
  string-conversions: -any
  aeson: -any
  template-haskell: -any
maintainer: Jade Lovelace <software at lfcode dot ca>
synopsis: Bindings for the Slack web API
changelog: |
  # 1.6.1.0 (2022-12-16)

  * [#124](https://github.com/MercuryTechnologies/slack-web/pull/124)
    Parse [Slack incoming emails](https://slack.com/help/articles/206819278-Send-emails-to-Slack)
    without throwing an error.

  # 1.6.0.0 (2022-12-14)

  ## Breaking changes

  * `usersList` now takes a `User.ListReq` object. You can construct one with
    `data-default`'s `def` function to get the previous behaviour.

  ## New features

  * [#120](https://github.com/MercuryTechnologies/slack-web/pull/120)
    Add file share event parsing support.

    Increase bounds on pretty-simple to 4.1 to mitigate a bug added in 4.0.

  * [#121](https://github.com/MercuryTechnologies/slack-web/pull/120)
    Add pagination of `users.list`

  # 1.5.0.1

  * [#119](https://github.com/MercuryTechnologies/slack-web/pull/119) Fix a typo
    in rich text decoding.

  # 1.5.0.0

  ## Breaking changes

  - `PostMsgRsp` uses a `Text` instead of a `String` for the ts.
  - `PostMsgReq` uses `Maybe` for the `text` since it is optional if blocks or
    attachments are provided.

  The following fields are now Maybe since they have been found to be absent in
  some responses:

  - `ChannelConversation.channelSharedTeamIds`
  - `ChannelConversation.channelIsMember`
  - `ChannelConversation.channelNumMembers`

  ### Breaking changes since development versions

  - The `SlackBlockSection` constructor has a new `Maybe` field for accessories.

  ## New features

  - `chat.update` bindings [#112](https://github.com/MercuryTechnologies/slack-web/pull/112)
  - `users.conversations` bindings [#109](https://github.com/MercuryTechnologies/slack-web/pull/109)
  - Generic pagination, making new requests easy to paginate
    [#105](https://github.com/MercuryTechnologies/slack-web/pull/105)
  - Expose an Internal module, allowing for new endpoints to be defined without
    changing slack-web
    [#99](https://github.com/MercuryTechnologies/slack-web/pull/99)
  - Three experimental features:
    - Schemas for the Events API
      [#107](https://github.com/MercuryTechnologies/slack-web/pull/107)
    - Request verification for webhooks
      [#106](https://github.com/MercuryTechnologies/slack-web/pull/106)
    - Support for [Blocks](https://api.slack.com/block-kit) including a builder,
      headers, and accessories
      [#100](https://github.com/MercuryTechnologies/slack-web/pull/100),
      [#115](https://github.com/MercuryTechnologies/slack-web/pull/115),
      [#116](https://github.com/MercuryTechnologies/slack-web/pull/116)

  ## Bug fixes

  - Conversation parse errors will pick the variant first, *then* let it fail.
    Messages now identify the correct variant and missing fields.
    [#108](https://github.com/MercuryTechnologies/slack-web/pull/108)

  ## Project updates

  [Mercury](https://mercury.com) now maintains this library.

  CI has been rewritten, and a Nix flake is now provided.

  We have gathered a fair corpus of sample data from Slack through the course of
  writing [Slacklinker](https://github.com/MercuryTechnologies/Slacklinker),
  which has been used to write a new snapshot test suite.

  Thanks to Daniel Brice, Dennis Hennen, Claire Violet, Evan Relf, Jake Keuhlen,
  Rebecca Turner, Matthew Mongeau, and Kevin Tang for their contributions to this
  release!

  # 0.3.0.1

  - Use Authorization header (44c3cf1)

  # 0.1.0

  ## Methods

  ### New

  - `api.test`
  - `auth.test`
  - `channels.create`
  - `chat.postMessage`
basic-deps:
  http-client: '>=0.5 && <0.8'
  either: -any
  bytestring: -any
  butcher: -any
  base: '>=4.11 && <4.18'
  data-default-class: -any
  time: -any
  servant-client: '>=0.16 && <0.20'
  unordered-containers: -any
  text: ==1.2.* || ==2.0.*
  http-api-data: '>=0.3 && <0.6'
  megaparsec: '>=5.0 && <10'
  servant-client-core: '>=0.16 && <0.20'
  monad-loops: -any
  servant: '>=0.16 && <0.20'
  containers: -any
  string-variants: '>=0.1.0.1'
  refined: -any
  http-client-tls: '>=0.3 && <0.4'
  cryptonite: -any
  mtl: -any
  pretty-simple: ^>=4.1
  classy-prelude: -any
  hashable: -any
  base16-bytestring: -any
  transformers: -any
  errors: -any
  deepseq: -any
  slack-web: -any
  scientific: -any
  string-conversions: -any
  aeson: '>=2.0 && <2.2'
  mono-traversable: -any
  vector: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.0.6
- 0.2.0.7
- 0.2.0.8
- 0.2.0.9
- 0.2.0.10
- 0.2.0.11
- 0.2.0.12
- 0.2.1.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 1.5.0.0
- 1.5.0.1
- 1.6.0.0
- 1.6.1.0
author: Juan Pedro Villa Isaza <jpvillaisaza@gmail.com>, Jade Lovelace <software at
  lfcode dot ca>, Dennis Hennen <dennis@mercury.com>
latest: 1.6.1.0
description-type: markdown
description: |
  # Haskell bindings for the Slack web API

  - Hackage: <https://hackage.haskell.org/package/slack-web>

  - Slack web API: <https://api.slack.com/web>

  ## Example

  ```
  > import qualified Web.Slack as Slack
  ```

  ```
  > import qualified Web.Slack.Api as Api
  ```

  ```
  > :set -XOverloadedStrings
  ```

  ```
  > slackConfig <- Slack.mkSlackConfig token
  ```

  ```
  > Slack.apiTest (Slack.slackConfigManager slackConfig) Api.mkTestReq
  Right ...
  ```

  ```
  > Slack.apiTest (Slack.slackConfigManager slackConfig) Api.mkTestReq { Api.testReqFoo = Just "bar" }
  Right ...
  ```

  ## Contributing

  This repository provides a `flake.nix` file which offers pre-commit hooks and
  haskell-language-server. We use `fourmolu` for formatting, which is verified in
  CI.

  To use the flake, run `nix develop`, which will get you `cabal` and everything
  else you need to work on `slack-web`.

  Pull requests are welcome!

  ## License

  Licensed under the MIT license. See [LICENSE.md](LICENSE.md).
license-name: MIT
