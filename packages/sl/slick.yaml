all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.2.0.0
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.1.0.0
- 1.1.1.0
- 1.1.2.0
- 1.1.2.1
- 1.1.2.2
- 1.2.0.0
- 1.2.1.0
author: Chris Penner
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  directory: '>=0'
  extra: '>=0'
  mustache: '>=0'
  pandoc: '>=0'
  shake: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
changelog: |
  # Changelog for slick

  ## 1.1.2.2
  - Add missing export for loadUsingMeta

  ## 1.1.2.1
  - Add missing export for orgModeToHTML'

  ## 1.1.2.0
  - Upgrade to lts-18.9 and add support for org-mode documents.

  ## 1.1.1.1
  - Upgrade to lts-17.8 and ghc-8.10.4

  ## 1.1.1.0
  - Add `loadUsingMeta` to allow specifying a separate pandoc meta writer.

  ## 1.1.0.0
  - Upgrade to lts-16.29

  ## 1.0.1.0
  - Add `makePandocReaderWithMetaWriter` and `makePandocReaderWithMetaWriter'` for reading in resources with custom Pandoc Writers for metadata.

  ## 1.0.0.0
  - Deprecate Slick.Caching, Simplify all other exports down.
  - Switch to recommending `Shake.Development.Forward`

  ## 0.2.0.0
  - Allow IO in `makePandocReader` and `makePandocWriter` to allow use of complex filters, etc.

  ## 0.1.1.0
  - Add gfm markdown options on writer extensions
      - this should allow pandoc to auto-generate id's on header tags

  ## 0.1.0.1
  - Docs update

  ## 0.1.0.0
  - Initial release

  ## Unreleased changes
changelog-type: markdown
description: "# Slick\n\nWant to get started quickly? Check out the [Slick site template](https://github.com/ChrisPenner/slick-template)!\n\nSlick
  is a static site generator written and configured using Haskell. It's the spiritual
  successor to my previous\nstatic-site generator project [SitePipe](https://github.com/chrispenner/SitePipe/);
  but is faster, simpler, and more\neasily used in combination with other tools.\n\nSlick
  provides a small set of tools and combinators for building static\nwebsites on top
  of the [Shake](https://shakebuild.com/) build system. Shake is\nadaptable, fast,
  reliable, and caches aggressively so it's a sensible tool for\nstatic-site builds,
  but figuring out how to get started can be a bit abstract. Slick aims to answer
  the question of\n'how do I get a site building?' while giving you the necessary
  tools and examples to figure out how to accomplish your\ngoals.\n\nSee the [hackage
  docs](https://hackage.haskell.org/package/slick) for in depth help on available
  combinators.\n\nIf you would rather see live examples than documentation, you can
  check out:\n\n- my own blog at https://chrispenner.ca [source](https://github.com/ChrisPenner/ChrisPenner.github.io/blob/site/app/Main.hs)\n-
  eviefp blog at https://eevie.ro/ [source](https://github.com/eviefp/eviefp.github.io/blob/main/app/Main.hs)\n\n#
  Overview\n\nHere's a quick overview of what Slick can do:\n\n- Slick uses the Shake
  build tool; the same used by ghcide! We recommend using `Development.Shake.Forward`;
  it auto-discovers which resources it should cache as you go! This means a blazing
  fast static site builder without all the annoying dependency tracking.\n-   Slick
  provides helpers for loading in blog-post-like things using Pandoc under the hood;\n
  \   -   This means that if Pandoc can read it, you can use it with Slick!\n    -
  \  Write your blog posts in Markdown or LaTeX and render it to\n        syntax-highlighted
  HTML!\n    -   Slick processes Pandoc (and LaTeX) metadata into a usable form (as
  an\n        [Aeson](https://hackage.haskell.org/package/aeson) Value object) which
  you can manipulate as you please.\n- Slick provides combinators for rendering [Mustache
  templates](https://mustache.github.io/)\n    - Slick wraps Justus Adam's [Mustache](http://hackage.haskell.org/package/mustache-2.3.0/docs/Text-Mustache.html)\n
  \       library and provides cached template rendering with awareness of changes
  to templates, partials, and Mustache\n        objects.\n    - It's a thin wrapper
  so you can still use things like Mustache functions, etc. if you like!\n- Provides
  only the individual tools without opinions about how to wire them up; if you want
  to load blog posts from \n    a database and render them out using Blaze html; well
  go ahead, we can help with that!\n- Provides caching of arbitrary (JSON serializable)
  objects using Shake resulting in super-fast rebuild times! \n\nAnother static site
  generator? What about Hakyll/Jekyll?\n--------------------------------------------------------\n\nYup,
  yet another static site generator. I've tried using Hakyll and Jekyll on\ndifferent
  occasions and found there was too much magic going on with all of the\nmonadic contexts
  for me to understand how to customize things for my use-cases.\nEven adding simple
  tags/categories to my blog seemed far more complex then it\nneeded to be; Hakyll
  specifically got me really bogged down; what was the\nCompiler monad? How does an
  Item work? How do I add a custom field? Why\ncouldn't I just edit data directly
  like I'm used to doing in Haskell? They\nseemed a bit too opinionated without giving
  me escape hatches to wire in my own\nfunctionality. If they're working for you,
  then great! But they weren't working\nfor me, so that's where SitePipe and subsequently
  Slick came from.\n\nQuick Start\n---------------\n\nWant to get started quickly?
  Check out the [Slick site template](https://github.com/ChrisPenner/slick-template)
  and follow the steps there.\n\n\n# Example Site:\n\nHere's an example of using slick
  to build an ENTIRE blog with full automatic asset caching.\n\n```haskell\n{-# LANGUAGE
  DeriveGeneric #-}\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE OverloadedStrings
  #-}\n\nmodule Main where\n\nimport           Control.Lens\nimport           Control.Monad\nimport
  \          Data.Aeson                 as A\nimport           Data.Aeson.Lens\nimport
  \          Development.Shake\nimport           Development.Shake.Classes\nimport
  \          Development.Shake.Forward\nimport           Development.Shake.FilePath\nimport
  \          GHC.Generics               (Generic)\nimport           Slick\nimport
  qualified Data.Text                  as T\n\noutputFolder :: FilePath\noutputFolder
  = \"docs/\"\n\n-- | Data for the index page\ndata IndexInfo =\n  IndexInfo\n    {
  posts :: [Post]\n    } deriving (Generic, Show, FromJSON, ToJSON)\n\n-- | Data for
  a blog post\ndata Post =\n    Post { title   :: String\n         , author  :: String\n
  \        , content :: String\n         , url     :: String\n         , date    ::
  String\n         , image   :: Maybe String\n         }\n    deriving (Generic, Eq,
  Ord, Show, FromJSON, ToJSON, Binary)\n\n-- | given a list of posts this will build
  a table of contents\nbuildIndex :: [Post] -> Action ()\nbuildIndex posts' = do\n
  \ indexT <- compileTemplate' \"site/templates/index.html\"\n  let indexInfo = IndexInfo
  {posts = posts'}\n      indexHTML = T.unpack $ substitute indexT (toJSON indexInfo)\n
  \ writeFile' (outputFolder </> \"index.html\") indexHTML\n\n-- | Find and build
  all posts\nbuildPosts :: Action [Post]\nbuildPosts = do\n  pPaths <- getDirectoryFiles
  \".\" [\"site/posts//*.md\"]\n  forP pPaths buildPost\n\n-- | Load a post, process
  metadata, write it to output, then return the post object\n-- Detects changes to
  either post content or template\nbuildPost :: FilePath -> Action Post\nbuildPost
  srcPath = cacheAction (\"build\" :: T.Text, srcPath) $ do\n  liftIO . putStrLn $
  \"Rebuilding post: \" <> srcPath\n  postContent <- readFile' srcPath\n  -- load
  post content and metadata as JSON blob\n  postData <- markdownToHTML . T.pack $
  postContent\n  let postUrl = T.pack . dropDirectory1 $ srcPath -<.> \"html\"\n      withPostUrl
  = _Object . at \"url\" ?~ String postUrl\n  -- Add additional metadata we've been
  able to compute\n  let fullPostData = withPostUrl $ postData\n  template <- compileTemplate'
  \"site/templates/post.html\"\n  writeFile' (outputFolder </> T.unpack postUrl) .
  T.unpack $ substitute template fullPostData\n  -- Convert the metadata into a Post
  object\n  convert fullPostData\n\n-- | Copy all static files from the listed folders
  to their destination\ncopyStaticFiles :: Action ()\ncopyStaticFiles = do\n    filepaths
  <- getDirectoryFiles \"./site/\" [\"images//*\", \"css//*\", \"js//*\"]\n    void
  $ forP filepaths $ \\filepath ->\n        copyFileChanged (\"site\" </> filepath)
  (outputFolder </> filepath)\n\n-- | Specific build rules for the Shake system\n--
  \  defines workflow to build the website\nbuildRules :: Action ()\nbuildRules =
  do\n  allPosts <- buildPosts\n  buildIndex allPosts\n  copyStaticFiles\n\n-- | Kick
  it all off\nmain :: IO ()\nmain = do\n  let shOpts =\n        forwardOptions $ shakeOptions\n
  \         { shakeVerbosity = Chatty\n          , shakeLintInside = [\"./site/\"]\n
  \         }\n  shakeArgsForward shOpts buildRules\n```\n\nNot pictured above is:\n\n-
  Using custom Pandoc readers to load other document types, there are many helpers
  for this in the [slick library](https://hackage.haskell.org/package/slick)\n- Using
  custom build tools like sassy css or js minifiers; you can do these things using
  [Shake](https://hackage.haskell.org/package/shake) directly.\n\n\n# Caching guide\n\nShake
  takes care of most of the tricky parts, but there're still a few things you need
  to know.\n\nCache-busting in Slick works using [`Development.Shake.Forward`](https://hackage.haskell.org/package/shake/docs/Development-Shake-Forward.html).
  The idea is that you can wrap actions with [`cacheAction`](https://hackage.haskell.org/package/shake-0.18.3/docs/Development-Shake-Forward.html#v:cacheAction),
  providing an unique identifier for each time it runs. Shake will track any dependencies
  which are triggered during the first run of that action and can use them to detect
  when that particular action must be re-run. Typically you'll want to cache an action
  for each \"thing\" you have to load, e.g. when you load a post, or when you build
  a page. You can also nest these caches if you like.\n\nWhen using `cacheAction`
  Shake will automatically serialize and store the results of that action to disk
  so that on a later build it can simply 'hydrate' that asset without running the
  command. For this reason, your data models should probably implement `Binary`. Here's
  an example data model:\n\n```haskell\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE
  DeriveAnyClass #-}\n\nimport Data.Aeson (ToJSON, FromJSON)\nimport Development.Shake.Classes
  (Binary)\nimport GHC.Generics (Generic)\n\n-- | Data for a blog post\ndata Post
  =\n    Post { title   :: String\n         , author  :: String\n         , content
  :: String\n         , url     :: String\n         , date    :: String\n         ,
  image   :: Maybe String\n         }\n    deriving (Generic, Eq, Ord, Show, FromJSON,
  ToJSON, Binary)\n```\n\nIf you need to run arbitrary shell commands you can use
  [`cache`](https://hackage.haskell.org/package/shake-0.18.3/docs/Development-Shake-Forward.html#v:cache);
  it will do its best to track file use during the run of the command and cache-bust
  on that; results may vary. It's likely better to use explicit tracking commands
  like `readFile'` when possible, (or even just use `readFile'` on the files you depend
  on, then throw away the results. It's equivalent to explicitly depending on the
  file contents).\n\nShake has many dependency tracking combinators available; whenever
  possible you should use the shake variants of these (e.g. `copyFileChanged`, `readFile'`,
  `writeFile'`, etc.). This will allow shake to detect when and what it needs to rebuild.\n\nNote:
  You'll likely need to delete `.shake` in your working directory after editing your
  `Main.hs` file as shake can get confused if rules change without it noticing.\n"
description-type: markdown
hash: d93072d73598db6158a537a6498c842af20bca700bc2093e8aca61e09173e105
homepage: https://github.com/ChrisPenner/slick#readme
latest: 1.2.1.0
license-name: BSD-3-Clause
maintainer: example@example.com
synopsis: A quick & easy static site builder built with shake and pandoc.
test-bench-deps: {}
