all-versions:
- '1.0'
- '1.3'
- 1.3.1
- 1.4.0
author: Andrei Barbu <andrei@0xab.com>
basic-deps:
  base: '>=3 && <5'
  containers: '>=0'
  mtl: '>=2'
  nondeterminism: '>=1.4'
changelog: ''
changelog-type: ''
description: "# CSP\n\n[![Build Status](http://circleci-badges-max.herokuapp.com/img/abarbu/csp-haskell/master?token=91512eefc213cc37bd2c8d8e418debab8cb3efec)](https://circleci.com/gh/abarbu/csp-haskell/tree/master)\n\nThis
  package is available via\n[Hackage where its documentation resides](https://hackage.haskell.org/package/csp).
  It\nprovides a solver for constraint satisfaction problems by implementing\na `CSP`
  monad. Currently it only implements arc consistency but other\nkinds of constraints
  will be added.\n\nBelow is a Sudoku solver, project Euler problem 96.\n\n```haskell\nimport
  Data.List\nimport Control.Monad.CSP\n\nmapAllPairsM_ :: Monad m => (a -> a -> m
  b) -> [a] -> m ()\nmapAllPairsM_ f []     = return ()\nmapAllPairsM_ f (_:[]) =
  return ()\nmapAllPairsM_ f (a:l) = mapM_ (f a) l >> mapAllPairsM_ f l\n\nsolveSudoku
  :: (Enum a, Eq a, Num a) => [[a]] -> [[a]]\nsolveSudoku puzzle = oneCSPSolution
  $ do\n  dvs <- mapM (mapM (\\a -> mkDV $ if a == 0 then [1 .. 9] else [a])) puzzle\n
  \ mapM_ assertRowConstraints dvs\n  mapM_ assertRowConstraints $ transpose dvs\n
  \ sequence_ [assertSquareConstraints dvs x y | x <- [0,3,6], y <- [0,3,6]]\n  return
  dvs\n      where assertRowConstraints =  mapAllPairsM_ (constraint2 (/=))\n            assertSquareConstraints
  dvs i j = \n                mapAllPairsM_ (constraint2 (/=)) [(dvs !! x) !! y |
  x <- [i..i+2], y <- [j..j+2]]\n\nsudoku3 = [[0,0,0,0,0,0,9,0,7],\n           [0,0,0,4,2,0,1,8,0],\n
  \          [0,0,0,7,0,5,0,2,6],\n           [1,0,0,9,0,4,0,0,0],\n           [0,5,0,0,0,0,0,4,0],\n
  \          [0,0,0,5,0,7,0,0,9],\n           [9,2,0,1,0,8,0,0,0],\n           [0,3,4,0,5,9,0,0,0],\n
  \          [5,0,7,0,0,0,0,0,0]]\n\nsolveSudoku sudoku3\n```\n    \n## Future\n\n
  - Allow a randomized execution order for CSPs\n - CSPs don't need to use IO internally.
  ST is enough.\n - Constraint synthesis. Already facilitated by the fact that\n   constraints
  are internally nondeterministic\n - Other constraint types for CSPs, right now only
  AC is implemented\n - n-ary heterogeneous constraints \n"
description-type: markdown
hash: 051beb4864f737ea42377918e0c13a7aef4ee5c6f4f39993cc224f6f5bbf470d
homepage: ''
latest: 1.4.0
license-name: LicenseRef-LGPL
maintainer: Andrei Barbu <andrei@0xab.com>
synopsis: Discrete constraint satisfaction problem (CSP) solver.
test-bench-deps:
  base: '>=4 && <5'
  csp: '>=0'
  nondeterminism: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
