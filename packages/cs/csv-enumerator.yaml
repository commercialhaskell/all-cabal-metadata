all-versions:
- '0.8'
- 0.8.2
- 0.9.0
- 0.9.2
- 0.9.2.1
- 0.9.3
- 0.9.5
- 0.10.1.0
- 0.10.1.1
- 0.10.2.0
author: 'Ozgun Ataman '
basic-deps:
  attoparsec: '>=0.10'
  attoparsec-enumerator: '>=0.2'
  base: '>=4 && <5'
  bytestring: '>=0'
  containers: '>=0.3'
  directory: '>=0'
  enumerator: '>=0.4.5'
  safe: '>=0'
  transformers: '>=0.2'
  unix-compat: '>=0.2.1.1'
changelog: ''
changelog-type: ''
description: "# README\n\n## CSV Files and Haskell\n\nCSV files are the de-facto standard
  in many cases of data transfer,\nparticularly when dealing with enterprise application
  or disparate database\nsystems.\n\nWhile there are a number of csv libraries in
  Haskell, at the time of this\nproject's start in 2010, there wasn't one that provided
  all of the following:\n\n* Full flexibility in quote characters, separators, input/output\n*
  Constant space operation\n* Robust parsing and error resiliency\n* Fast operation\n*
  Convenient interface that supports a variety of use cases\n\nThis library is an
  attempt to close these gaps.\n\n\n## This package\n\ncsv-enumerator is an enumerator-based
  CSV parsing library that is easy to use,\nflexible and fast. Furthermore, it provides
  ways to use constant-space during\noperation, which is absolutely critical in many
  real world use cases.\n\n\n### Introduction\n\n* ByteStrings are used for everything\n*
  There are 2 basic row types and they implement *exactly* the same operations,\n
  \ so you can chose the right one for the job at hand:\n  - type MapRow = Map ByteString
  ByteString\n  - type Row = [ByteString]\n* Folding over a CSV file can be thought
  of as the most basic operation.\n* Higher level convenience functions are provided
  to \"map\" over CSV files,\n  modifying and transforming them along the way.\n*
  Helpers are provided for simple input/output of CSV files for simple use\n  cases.\n*
  For extreme / advanced use cases, the user can drop down to the\n  Enumerator/Iteratee
  level and do interleaved IO among other things.\n\n### API Docs\n\nThe API is quite
  well documented and I would encourage you to keep it handy.\n\n### Speed\n\nWhile
  fast operation is of concern, I have so far cared more about correct\noperation
  and a flexible API. Please let me know if you notice any performance\nregressions
  or optimization opportunities.\n\n\n### Usage Examples\n\n#### Example 1: Basic
  Operation \n\n    {-# LANGUAGE OverloadedStrings #-}\n\n    import Data.CSV.Enumerator\n
  \   import Data.Char (isSpace)\n    import qualified Data.Map as M\n    import Data.Map
  ((!))\n\n    -- Naive whitespace stripper\n    strip = reverse . B.dropWhile isSpace
  . reverse . B.dropWhile isSpace\n\n    -- A function that takes a row and \"emits\"
  zero or more rows as output.\n    processRow :: MapRow -> [MapRow]\n    processRow
  row = [M.insert \"Column1\" fixedCol row]\n      where fixedCol = strip (row ! \"Column1\")\n\n
  \   main = mapCSVFile \"InputFile.csv\" defCSVSettings procesRow \"OutputFile.csv\"\n\nand
  we are done. \n\n\nFurther examples to be provided at a later time.\n\n\n\n### TODO
  - Next Steps\n\n* Refactor all operations to use iterCSV as the basic building block
  --\n  in progress.\n* The CSVeable typeclass can be refactored to have a more minimal
  definition.\n* Get mapCSVFiles out of the typeclass if possible.\n* Need to think
  about specializing an Exception type for the library and\n  properly notifying the
  user when parsing-related problems occur.\n* Some operations can be further broken
  down to their atoms, increasing the\n  flexibility of the library.\n* Operating
  on Text in addition to ByteString would be phenomenal.\n* A test-suite needs to
  be added.\n* Some benchmarking would be nice.\n\n\nAny and all kinds of help is
  much appreciated!\n\n"
description-type: markdown
hash: 7c8a75b0098da44d63359f5d9030ef67e14db761d6130d00a98daeef9e84c17f
homepage: http://github.com/ozataman/csv-enumerator
latest: 0.10.2.0
license-name: BSD-3-Clause
maintainer: Ozgun Ataman <ozataman@gmail.com>
synopsis: 'A flexible, fast, enumerator-based CSV parser library for Haskell.  '
test-bench-deps: {}
