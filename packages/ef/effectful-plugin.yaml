homepage: ''
changelog-type: markdown
hash: efbf31de4f6b35463488c96a55b7674b953a3126e1f073eea5697863b85a3273
test-bench-deps:
  effectful-plugin: -any
  base: -any
  effectful-core: -any
maintainer: andrzej@rybczak.net
synopsis: A GHC plugin for improving disambiguation of effects.
changelog: |
  # effectful-plugin-1.1.0.1 (2023-03-13)
  * Show accurate error message in GHC >= 9.4 if `Effectful.Internal.Effect` is
    not found.

  # effectful-plugin-1.1.0.0 (2023-01-23)
  * Add support for GHC 9.4 and 9.6.

  # effectful-plugin-1.0.0.0 (2022-07-13)
  * Initial release.
basic-deps:
  ghc: '>=8.6 && <9.7'
  base: '>=4.13 && <5'
  ghc-tcplugins-extra: '>=0.3 && <0.5'
  containers: '>=0.5'
  effectful-core: '>=1.0.0.0 && <3.0.0.0'
all-versions:
- 1.0.0.0
- 1.1.0.0
- 1.1.0.1
author: Andrzej Rybczak
latest: 1.1.0.1
description-type: markdown
description: |
  # `effectful-plugin`

  A GHC plugin for improving disambiguation of effects.

  ## Usage

  To enable the plugin, add the following GHC option to your project file:

  ```
  ghc-options: -fplugin=Effectful.Plugin
  ```

  ## What it does

  The following code:

  ```haskell
  action :: (State Int :> es, State String :> es) => Eff es ()
  action = do
    x <- get
    put (x + 1)
  ```

  will not compile out of the box because `GHC` doesn't know that you meant to
  `get` an `Int` since the function `+` as well as the literal `1` are
  polymorphic. You have to write:

  ```haskell
  action :: (State Int :> es, State String :> es) => Eff es ()
  action = do
    x <- get @Int
    put (x + 1)
  ```

  Which is slightly annoying. This plugin tells `GHC` extra information so code
  like this can type-check without having to spell types to the compiler.

  ## Acknowledgements

  Thanks to Xy Ren for her work on
  [cleff-plugin](https://hackage.haskell.org/package/cleff-plugin)
  `effectful-plugin` is based on.
license-name: BSD-3-Clause
