all-versions:
- 0.1.0.0
- 0.1.0.1
author: Frederick Pringle
basic-deps:
  base: '>=4 && <5'
  effectful-core: '>=2.3 && <2.7'
  effectful-postgresql: '>=0.1 && <0.2'
  effectful-th: '>=1.0.0.1 && <1.0.1'
  opaleye: '>=0.9 && <0.11'
  postgresql-simple: '>=0.7 && <0.8'
  product-profunctors: '>=0.9 && <0.12'
changelog: |
  # Changelog

  All notable changes to `effectful-opaleye` will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
  and this project adheres to [Haskell Package Versioning Policy](https://pvp.haskell.org).

  ## [Unreleased]

  ## [0.1.0.1] - 04.08.2025

  ### Changed

  - Increased upper bounds on `effectful-core` to support `2.6`

  ## [0.1.0.0] - 22.07.2025

  ### Added

  - First edition of the package, ready for feedback.
  - 100% documentation coverage.
  - Reasonably detailed READMEs.
  - CI that builds and tests the packages for each version of GHC in the `tested-with` field.

  [unreleased]: https://github.com/fpringle/effectful-postgresql/compare/v0.1.0.1...HEAD
  [0.1.0.1]: https://github.com/fpringle/effectful-postgresql/releases/tag/v0.1.0.1
  [0.1.0.0]: https://github.com/fpringle/effectful-postgresql/releases/tag/v0.1.0.0
changelog-type: markdown
description: |
  # effectful-opaleye

  This package provides an `effectful` effect for [Opaleye](https://hackage.haskell.org/package/opaleye) operations.

  It combines the very safe, high-level syntax of Opaleye, with the `WithConnection` abstraction of [effectful-postgresql](https://github.com/fpringle/effectful-postgresql/blob/main/effectful-postgresql#readme).

  ## Effectful functions

  In the `Opaleye` effect we can perform the 4 main operations permitted by Opaleye: query, insert, delete, and update.

  ```haskell
  {-# LANGUAGE Arrows #-}
  import Control.Arrow
  import Effectful.Opaleye as EO
  import qualified Opaleye as O

  insertAndList :: (EO.Opaleye :> es) => Eff es [User]
  insertAndList = do
    EO.runInsert $ O.Insert userTable [User {firstName = "Nuala"}] O.rCount Nothing

    EO.runDelete $ O.Delete userTable isAdmin O.rCount

    EO.runUpdate $ O.Update userTable (\user -> user {updatedAt = O.now}) isAdmin O.rCount

    EO.runSelect $ proc () -> do
      user <- O.selectTable userTable -< ()
      O.restrict -< firstName user `O.in_` (O.toFields <$> ["Anna", "Boris", "Carla"])
      returnA -< user
  ```

  ## Interpreters

  To run the `Opaleye` effect we can use the `WithConnection` effect from [effectful-postgresql](https://github.com/fpringle/effectful-postgresql/blob/main/effectful-postgresql#readme):

  ```haskell
  import Effectful.PostgreSQL as EP
  import Effectful.Opaleye as EO

  doOpaleyeStuff :: (WithConnection :> es) => Eff es [User]
  doOpaleyeStuff = EO.runOpaleyeWithConnection insertAndList
  ```

  The `WithConnection` effect can then be dispatched using one of its [interpreters](https://github.com/fpringle/effectful-postgresql/blob/main/effectful-postgresql#interpreters).
  Or, to skip that entirely, we can just use `runOpaleyeConnection`:

  ```haskell
  doOpaleyeStuff :: PSQL.Connection -> Eff es [User]
  doOpaleyeStuff conn = EO.runOpaleyeConnection conn insertAndList
  ```
description-type: markdown
hash: 3a8103c1022df0e8da79bf8dfc2d20dba1eaca4852891097757bf00efff58867
homepage: https://github.com/fpringle/effectful-postgresql
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: frederick.pringle@fpringle.com
synopsis: effectful support for high-level PostgreSQL operations via Opaleye.
test-bench-deps: {}
