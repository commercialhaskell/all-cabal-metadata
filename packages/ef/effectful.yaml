all-versions:
- 1.0.0.0
- 1.1.0.0
- 1.2.0.0
- 2.0.0.0
- 2.1.0.0
- 2.2.0.0
- 2.2.1.0
- 2.2.2.0
- 2.3.0.0
- 2.3.1.0
- 2.4.0.0
author: Andrzej Rybczak
basic-deps:
  async: '>=2.2.2'
  base: '>=4.14 && <5'
  bytestring: '>=0.10'
  directory: '>=1.3.2'
  effectful-core: '>=2.4.0.0 && <2.4.1.0'
  process: '>=1.6.9'
  stm: '>=2.5.0.0'
  strict-mutable-base: '>=1.1.0.0'
  time: '>=1.9.2'
  unliftio: '>=0.2.20'
changelog: |
  # effectful-2.4.0.0 (2024-10-08)
  * Add utility functions for handling effects that take the effect handler as the
    last parameter to `Effectful.Dispatch.Dynamic`.
  * Add utility functions for handling first order effects to
    `Effectful.Dispatch.Dynamic`.
  * Improve `Effectful.Labeled`, add `Effectful.Labeled.Error`,
    `Effectful.Labeled.Reader`, `Effectful.Labeled.State` and
    `Effectful.Labeled.Writer`.
  * Add `throwErrorWith` and `throwError_` to `Effectful.Error.Static` and
    `Effectful.Error.Dynamic`.
  * Add `HasCallStack` constraints where appropriate for better debugging
    experience.
  * Add a `SeqForkUnlift` strategy to support running unlifting functions outside
    of the scope of effects they capture.
  * Add `Effectful.Exception` with appropriate re-exports from the
    `safe-exceptions` library.
  * Add `Effectful.Concurrent.Chan.Strict`.
  * Add `Effectful.Prim.IORef` and `Effectful.Prim.IORef.Strict`.
  * **Bugfixes**:
    - Ensure that a `LocalEnv` is only used in a thread it belongs to.
    - Properly roll back changes made to the environment when `OnEmptyRollback`
      policy for the `NonDet` effect is selected.
    - Fix a bug in `stateM` and `modifyM` of thread local `State` effect that
      might've caused dropped state updates
      ([#237](https://github.com/haskell-effectful/effectful/issues/237)).
  * **Breaking changes**:
    - `localSeqLend`, `localLend`, `localSeqBorrow` and `localBorrow` now take a
      list of effects instead of a single one.
    - `Effectful.Error.Static.throwError` now requires the error type to have a
      `Show` constraint. If this is not the case for some of your error types, use
      `throwError_` for them.
    - `ThrowError` operation from the dynamic version of the `Error` effect was
      replaced with `ThrowErrorWith`.
    - `stateEnv` and `modifyEnv` now take pure modification functions. If you rely
      on their old forms, switch to a combination of `getEnv` and `putEnv`.
    - `runStateMVar`, `evalStateMVar` and `execStateMVar` now take a strict
      `MVar'` from the `strict-mutable-base` package.
    - `Effectful.Concurrent.MVar.Strict` is now a lifted version of
      `Control.Concurrent.MVar.Strict` from `strict-mutable-base`. The original
      module was renamed to `Effectful.Concurrent.MVar.Strict.Compat` and
      deprecated.

  # effectful-2.3.1.0 (2024-06-07)
  * Drop support for GHC 8.8.
  * Remove inaccurate information from the `Show` instance of `ErrorWrapper`.
  * Add `Effectful.Provider.List`, generalization of `Effectful.Provider`.
  * Respect `withFrozenCallStack` used by callers of `send`.
  * Support exchange of effects between the environment of the handler and the
    local one via `localSeqLend`, `localLend`, `localSeqBorrow` and `localBorrow`
    from `Effectful.Dispatch.Dynamic`.

  # effectful-2.3.0.0 (2023-09-13)
  * Deprecate `withConcEffToIO`.
  * Make `withEffToIO` take an explicit unlifting strategy for the sake of
    consistency with unlifting functions from `Effectful.Dispatch.Dynamic` and
    easier to understand API.
  * Add support for turning an effect handler into an effectful operation via the
    `Provider` effect.
  * Add `runErrorWith` and `runErrorNoCallStackWith` to `Effectful.Error.Dynamic`
    and `Effectful.Error.Static`.
  * Add support for having multiple effects of the same type in scope via the
    `Labeled` effect.
  * Add various `ByteString` related functions to the `FileSystem` effect.
  * Add the `Console` effect.

  # effectful-2.2.2.0 (2023-01-11)
  * Add `withSeqEffToIO` and `withConcEffToIO` to `Effectful`.
  * Use strict `IORef` and `MVar` variants where appropriate.
  * Make `inject` work with effect stacks sharing a polymorphic suffix.

  # effectful-2.2.1.0 (2022-11-09)
  * Add `localSeqLift` and `localLift` to `Effectful.Dispatch.Dynamic`.

  # effectful-2.2.0.0 (2022-10-24)
  * Change `PrimState` for `Eff` from `RealWorld` to `PrimStateEff` to prevent the
    `Prim` effect from executing arbitrary `IO` actions via `ioToPrim`.
  * Deprecate `(:>>)` as [GHC can't efficiently deal with type
    families](https://github.com/haskell-effectful/effectful/issues/52#issuecomment-1269155485).
  * Add support for the `Alternative` and `MonadPlus` instances for `Eff` via the
    `NonDet` effect.

  # effectful-2.1.0.0 (2022-08-22)
  * Include the `e :> localEs` constraint in the `EffectHandler` to allow more
    flexibility in handling higher order effects.
  * Do not include internal stack frames in `throwError` from
    `Effectful.Error.Dynamic`.

  # effectful-2.0.0.0 (2022-08-12)
  * Make storage references in the environment immutable.
  * Remove `checkSizeEnv` and `forkEnv` from
    `Effectful.Dispatch.Static.Primitive`.
  * Add internal versioning of effects to prevent leakage of `unsafeCoerce`.
  * Make `interpose` and `impose` properly interact with other handlers.

  # effectful-1.2.0.0 (2022-07-28)
  * Change `SuffixOf` to `SharedSuffix` and make it behave as advertised.
  * Add `raiseWith`.

  # effectful-1.1.0.0 (2022-07-19)
  * Don't reset the `UnliftStrategy` to `SeqUnlift` inside the continuation of
    `withEffToIO`.
  * Add `withReader`.

  # effectful-1.0.0.0 (2022-07-13)
  * Initial release.
changelog-type: markdown
description: |
  # effectful

  [![Build Status](https://github.com/haskell-effectful/effectful/workflows/Haskell-CI/badge.svg?branch=master)](https://github.com/haskell-effectful/effectful/actions?query=branch%3Amaster)
  [![Hackage](https://img.shields.io/hackage/v/effectful.svg)](https://hackage.haskell.org/package/effectful)
  [![Dependencies](https://img.shields.io/hackage-deps/v/effectful.svg)](https://packdeps.haskellers.com/feed?needle=andrzej@rybczak.net)
  [![Stackage LTS](https://www.stackage.org/package/effectful/badge/lts)](https://www.stackage.org/lts/package/effectful)
  [![Stackage Nightly](https://www.stackage.org/package/effectful/badge/nightly)](https://www.stackage.org/nightly/package/effectful)


  <img src="https://user-images.githubusercontent.com/387658/127747903-f728437f-2ee4-47b8-9f0c-5102fd44c8e4.png" width="128">

  An easy to use, fast extensible effects library with seamless integration with
  the existing Haskell ecosystem.

  Main features:

  1. Very fast
     ([benchmarks](https://github.com/haskell-effectful/effectful/tree/master/benchmarks/README.md)).

  2. Easy to use API (comparable with usage of the [MonadUnliftIO](https://hackage.haskell.org/package/unliftio-core/docs/Control-Monad-IO-Unlift.html#t:MonadUnliftIO) class).

  3. Correct semantics in presence of runtime exceptions (no more discarded state
     updates).

  4. Seamless integration with the existing ecosystem (`exceptions`,
     `monad-control`, `unliftio-core`, `resourcet` etc.).

  5. Support for thread local and shared state (e.g. `StateT` provides a thread
     local state, while `MVar` holds a shared state, both approaches have their
     merits).

  6. Support for statically (implementation determined at compile time) and
     dynamically (implementation determined at run time) dispatched effects.

  ## Motivation

  Do we really need yet another library for handling effects? There's
  [freer-simple](https://hackage.haskell.org/package/freer-simple),
  [fused-effects](https://hackage.haskell.org/package/fused-effects),
  [polysemy](https://hackage.haskell.org/package/polysemy),
  [eff](https://github.com/lexi-lambda/eff) and probably a few more.

  It needs to be noted that of all of them only the work-in-progress `eff` library
  is a promising proposition because of reasonable performance characteristics
  (see the talk [Effects for Less](https://www.youtube.com/watch?v=0jI-AlWEwYI)
  for more information) and potential for good interoperability with the existing
  ecosystem.

  The second point is arguably the most important, because it allows focusing on
  things that matter instead of reinventing all kinds of wheels, hence being a
  necessary condition for broader adoption of the library.

  Unfortunately, the development of `eff` has stalled due to a
  [few](https://github.com/hasura/eff/issues/13)
  [subtle](https://github.com/hasura/eff/issues/7)
  [issues](https://github.com/hasura/eff/issues/12) related to its use of
  delimited continuations underneath.

  ### What about `mtl`?

  It's true that its "effects as classes" approach is widely known and used often.

  However:

  - `mtl` style effects are
    [slow](https://github.com/haskell-effectful/effectful/tree/master/benchmarks/README.md).

  - The majority of popular monad transformers (except `ReaderT`) used for effect
    implementations are rife with [subtle
    issues](https://github.com/haskell-effectful/effectful/tree/master/transformers.md).

  These are problematic enough that the [ReaderT design
  pattern](https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/) was
  invented. Its fundamentals are solid, but it's not an effect system.

  A solution? Use the `ReaderT` pattern as a base and build around it to make an
  extensible effects library! This is where `effectful` comes in. The `Eff` monad
  it uses is essentially a `ReaderT` over `IO` on steroids, allowing us to extend
  its environment with data types representing effects.

  This concept is quite simple, so:

  - It's reasonably easy to understand what is going on under the hood.

  - The `Eff` monad being a reader allows for seamless interoperability with
    ubiquitous classes such as `MonadBaseControl` and `MonadUnliftIO` and solves
    [issues](https://github.com/haskell-effectful/effectful/tree/master/transformers.md)
    of monad transformers mentioned above.

  What is more, the `Eff` monad is concrete, so GHC has many possibilities for
  optimization, which results in a very fast code at a default optimization
  level. There is no need to explicitly mark functions with `INLINE` pragmas or
  enable additional optimization passes, it just works.

  ### Any downsides?

  As always, there's no free lunch. The `Eff` monad doesn't support effect
  handlers that require the ability to suspend or capture the rest of the
  computation and resume it later (potentially multiple times). This prevents
  `effectful` from providing (in particular):

  - A `NonDet` effect handler that executes multiple
  [`Alternative`](https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Alternative)
  branches and collects their results.

  - A `Coroutine` effect.

  It needs to be noted however that such `NonDet` effect handler in existing
  libraries is
  [broken](https://github.com/lexi-lambda/eff/blob/8c4df4bf54faf22456354be18095b14825be5e85/notes/semantics-zoo.md)
  and none of the ones with support for higher order effects provide the
  `Coroutine` effect, so arguably it's not a big loss.

  If you need such capability in your application, there are well established
  libraries such as [conduit](https://hackage.haskell.org/package/conduit) or
  [list-t](https://hackage.haskell.org/package/list-t) that can be used with
  `effectful` without any hassle.

  ### Summary

  `effectful` is an extensible effects library that aims to be the replacement
  for:

  - The bare `ReaderT` pattern by being essentially its enriched version.

  - Monad transformer stacks typically encountered in the wild (i.e. consisting of
    a dozen of newtype'd `ExceptT`, `ReaderT`, `StateT` and `WriterT` transformers
    and their derivatives) by providing equivalent effects with improved
    semantics, performance, usability and making it easy to reuse them for your
    own effects.

  It doesn't try to make monad transformers obsolete, so you're free to
  use it with `ConduitT`, `ContT`, `ListT` etc. when necessary.

  ## Package structure

  The library is split among several packages:

  - The [`effectful-core`](https://hackage.haskell.org/package/effectful-core)
    package contains the core of the library along with basic effects. It aims for
    a small dependency footprint and provides building blocks for more advanced
    effects.

  - The [`effectful-plugin`](https://hackage.haskell.org/package/effectful-plugin)
    package provides an optional GHC plugin for improving disambiguation of
    effects (see
    [here](https://github.com/haskell-effectful/effectful/blob/master/effectful-plugin/README.md)
    for more information).

  - The [`effectful-th`](https://hackage.haskell.org/package/effectful-th) package
    provides utilities for generating bits of effect-related boilerplate via
    Template Haskell.

  - The [`effectful`](https://hackage.haskell.org/package/effectful) package
    re-exports public modules of `effectful-core` and additionally provides most
    features of the [`unliftio`](https://hackage.haskell.org/package/unliftio)
    package divided into appropriate effects.

  ## Examples

  For the examples see the *Introduction* sections of
  [`Effectful.Dispatch.Dynamic`](https://hackage.haskell.org/package/effectful-core/docs/Effectful-Dispatch-Dynamic.html)
  and
  [`Effectful.Dispatch.Static`](https://hackage.haskell.org/package/effectful-core/docs/Effectful-Dispatch-Static.html)
  (when in doubt, start with dynamic dispatch).

  ## Acknowledgements

  To all contributors of existing effect libraries - thank you for putting the
  time and effort to explore the space. In particular, conversations in issue
  trackers of `cleff`, `eff`, `freer-simple`, `fused-effects` and `polysemy`
  repositories were invaluable in helping me discover and understand challenges in
  the space.

  ### Resources

  Resources that inspired the rise of this library and had a lot of impact on its
  design.

  Talks:

  * [Effects for Less](https://www.youtube.com/watch?v=0jI-AlWEwYI) by Alexis King.

  * [Monad Transformer State](https://www.youtube.com/watch?v=KZIN9f9rI34) by Michael Snoyman.

  Blog posts:

  * [ReaderT design pattern](https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/) by Michael Snoyman.

  * [Exceptions Best Practices](https://www.fpcomplete.com/blog/2016/11/exceptions-best-practices-haskell/) by Michael Snoyman.

  ----------------------------------------

  <div>Icons made by <a href="https://www.freepik.com" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a></div>
description-type: markdown
hash: 007a300e61347bcdd39806f355171df2768ae5868294a6dccdf4bd492c2ea328
homepage: ''
latest: 2.4.0.0
license-name: BSD-3-Clause
maintainer: andrzej@rybczak.net
synopsis: An easy to use, performant extensible effects library.
test-bench-deps:
  async: '>=0'
  base: '>=0'
  containers: '>=0'
  effectful: '>=0'
  effectful-core: '>=0'
  exceptions: '>=0'
  lifted-base: '>=0'
  primitive: '>=0'
  safe-exceptions: '>=0'
  strict-mutable-base: '>=0'
  tasty: '>=0'
  tasty-bench: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  unix: '>=0'
  unliftio: '>=0'
