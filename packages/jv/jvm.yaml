homepage: http://github.com/tweag/inline-java/tree/master/jvm#readme
changelog-type: ''
hash: 771e635a34a9729799bacd136085c3fb69eb78783cf272874ac7c90f382817dc
test-bench-deps:
  bytestring: -any
  base: '>=4.8 && <5'
  jni: -any
  hspec: -any
  text: '>=1.2'
  quickcheck-text: -any
  criterion: -any
  jvm: -any
  singletons: -any
  deepseq: '>=1.4.2'
  QuickCheck: -any
maintainer: m@tweag.io
synopsis: Call JVM methods from Haskell.
changelog: ''
basic-deps:
  exceptions: '>=0.8'
  bytestring: '>=0.10'
  base: '>=4.14 && <5'
  jni: '>=0.8.0 && <0.9'
  text: '>=1.2'
  constraints: '>=0.8'
  singletons: '>=2.6'
  distributed-closure: '>=0.3'
  choice: '>=0.1'
  template-haskell: -any
  vector: '>=0.11'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.2.0
- 0.2.1
- 0.2.2
- 0.3.0
- 0.4.0.1
- 0.4.1
- 0.4.2
- 0.5.0
- 0.6.0
author: Tweag I/O
latest: 0.6.0
description-type: markdown
description: |
  # jvm: Call any JVM function from Haskell

  [![jvm on Stackage LTS](http://stackage.org/package/jvm/badge/lts)](http://stackage.org/lts/package/jvm)
  [![jvm on Stackage Nightly](http://stackage.org/package/jvm/badge/nightly)](http://stackage.org/nightly/package/jvm)

  This package enables calling any JVM function from Haskell. If you'd
  like to call JVM methods using Java syntax and hence get the Java
  compiler to scope check and type check all your foreign calls, see
  [inline-java][inline-java], which builds on top of this package.

  [inline-java]: https://github.com/tweag/inline-java#readme

  # Example

  Graphical Hello World using Java Swing:

  ```Haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE GeneralizedNewtypeDeriving #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE UndecidableInstances #-}

  import Data.Text (Text)
  import Language.Java

  newtype JOptionPane = JOptionPane (J ('Class "javax.swing.JOptionPane"))
    deriving Coercible

  main :: IO ()
  main = withJVM [] $ do
      message <- reflect ("Hello World!" :: Text)
      callStatic
        (classOf (undefined :: JOptionPane))
        "showMessageDialog"
        nullComponent
        (upcast message)
    where
      nullComponent :: J ('Class "java.awt.Component")
      nullComponent = jnull
  ```
license-name: BSD-3-Clause
