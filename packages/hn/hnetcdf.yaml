all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
author: Ian Ross
basic-deps:
  base: '>=4.3 && <5'
  containers: '>=0.5.0.0 && <0.7'
  filepath: '>=1.4 && <1.5'
  hnetcdf: '>=0'
  repa: '>=3.4 && <3.5'
  transformers: '>=0.2 && <0.6'
  vector: '>=0.12 && <0.13'
changelog: |
  0.3.0.0
  -------
  * Breaking change: fix problem with hmatrix API -- replace
    `HRowMajorMatrix` and `HColumnMajorMatrix` with single `HMatrix`
    type and manage data ordering internally.

  0.2.1.0
  -------
  * Update to work with hmatrix 0.16

  0.2.0.0
  -------
  * Add partial output API
changelog-type: markdown
description: |
  hnetcdf
  =======

  [![Build Status](https://travis-ci.org/ian-ross/hnetcdf.svg?branch=master)](https://travis-ci.org/ian-ross/hnetcdf)

  Haskell NetCDF library: as well as conventional low-level FFI bindings
  to the functions in the NetCDF library (in the `Data.NetCDF.Raw`
  modules), `hnetcdf` provides a higher-level Haskell interface
  (currently only for reading data).  This higher-level interface aims
  to provide a "container polymorphic" view of NetCDF data allowing
  NetCDF variables to be read into `Storable` `Vectors` and Repa arrays
  easily.

  For example:

  ``` haskell
  import Data.NetCDF
  import Foreign.C
  import qualified Data.Vector.Storable as SV
  ...
  type SVRet = IO (Either NcError (SV.Vector a))
  ...
    enc <- openFile "tst.nc" ReadMode
    case enc of
      Right nc -> do
        eval <- get nc "varname" :: SVRet CDouble
        ...
  ```

  gets the full contents of a NetCDF variable as a `Storable` `Vector`,
  while the following code reads the same variable (assumed to be
  three-dimensional) into a Repa array:

  ``` haskell
  import Data.NetCDF
  import Foreign.C
  import qualified Data.Array.Repa as R
  import qualified Data.Array.Repa.Eval as RE
  import Data.Array.Repa.Repr.ForeignPtr (F)
  ...
  type RepaRet3 a = IO (Either NcError (R.Array F R.DIM3 a))
  ...
    enc <- openFile "tst.nc" ReadMode
    case enc of
      Right nc -> do
        eval <- get nc "varname" :: RepaRet3 CDouble
        ...
  ```
description-type: markdown
hash: 32bcbfd5f30b16834f98b4a71a8fa0e9440b307506999b441b3aadb8c1f8c7d1
homepage: https://github.com/ian-ross/hnetcdf
latest: 0.5.0.0
license-name: BSD-3-Clause
maintainer: ian@skybluetrades.net
synopsis: Haskell NetCDF library
test-bench-deps:
  HUnit: '>=1.6 && <1.7'
  QuickCheck: '>=2.10 && <2.13'
  base: '>=4.3 && <5'
  containers: '>=0'
  directory: '>=0'
  errors: '>=0'
  hnetcdf: '>=0'
  repa: '>=0'
  test-framework: '>=0.8 && <0.9'
  test-framework-hunit: '>=0.3 && <0.4'
  test-framework-quickcheck2: '>=0.3 && <0.4'
  vector: '>=0'
