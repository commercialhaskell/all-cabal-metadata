all-versions:
- 0.4.0
author: Jared Tobin
basic-deps:
  base: '>=4.12 && <5'
  hnock: '>=0'
  parsec: '>=3.1.13.0 && <3.2'
  text: '>=1.2.3.0 && <1.3'
changelog: |+
  # Changelog

  - 0.4.0 (2019-09-29)
      Use ''Natural' rather than 'Integer' for Atoms.

  - 0.3.0 (2019-02-01)
      Use 'Integer' rather than 'Int' for Atoms.

  - 0.2.0 (2019-01-30)
      Misc upgrades to support Nock 4K.

  - 0.1.0 (2018-07-15)
      A basic Nock 5K interpreter.

changelog-type: text
description: |+
  # hnock

  [![Build Status](https://travis-ci.org/jtobin/hnock.svg?branch=master)](https://travis-ci.org/jtobin/hnock)
  [![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/jtobin/hnock/blob/master/LICENSE)

  A [Nock][nock] interpreter.

  ## Install

  Use a simple

  ```
  stack install
  ```

  to build the `hnock` binary and get it moved somewhere on your PATH.  If you
  just want to build the binary, you can use `stack build`.

  ## Usage

  From bash, simply pipe Nock expressions into the `hnock` executable:

  ```
  $ echo '*[[[4 5] [6 14 15]] [0 7]]' | hnock
  [14 15]
  ```

  For playing around in GHCi, import the `Nock` library and use `hnock` to parse
  and evaluate Nock expressions:

  ```
  *Nock> hnock "*[[[4 5] [6 14 15]] [0 7]]"
  [14 15]
  ```

  To evaluate raw nock Nouns, i.e. to compute `nock(a)` for some noun `a`, use
  the `nock` function:

  ```
  *Nock> let expression = hnock "[[[4 5] [6 14 15]] [0 7]]"
  *Nock> expression
  [[[4 5] [6 [14 15]]] [0 7]]
  *Nock> nock expression
  [14 15]
  ```

  ## Testing

  Use a simple `stack test` to run the test suite.

  ## See Also

  * [A Nock Interpreter][anin]

  [nock]: https://urbit.org/docs/learn/arvo/nock/definition/
  [anin]: https://jtobin.io/nock

description-type: markdown
hash: 4ebad7c746401c99930044a5ff306b516acf66004895816e125276795e5429ab
homepage: https://github.com/jtobin/hnock
latest: 0.4.0
license-name: MIT
maintainer: jared@jtobin.io
synopsis: A Nock interpreter.
test-bench-deps:
  base: '>=4.12'
  hnock: '>=0'
