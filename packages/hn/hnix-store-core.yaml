all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.5.0.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.8.0.0
author: Shea Levy
basic-deps:
  attoparsec: '>=0'
  base: '>=4.12 && <5'
  base16-bytestring: '>=1.0'
  base64-bytestring: '>=1.2.1'
  bytestring: '>=0'
  constraints-extras: '>=0'
  containers: '>=0'
  crypton: '>=0'
  data-default-class: '>=0'
  dependent-sum: '>0.7'
  dependent-sum-template: '>=0.2.0.1 && <0.3'
  filepath: '>=0'
  hashable: '>=0'
  memory: '>=0'
  nix-derivation: '>=1.1.1 && <2'
  some: '>1.0.5 && <2'
  text: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: "# [0.8.0.0](https://github.com/haskell-nix/hnix-store/compare/core-0.7.0.0...core-0.8.0.0)
  2024-07-31\n\n* Changes:\n   * `System.Nix.StorePath.makeStorePathName` renamed
  to `System.Nix.StorePath.mkStorePathName`\n   * `System.Nix.ReadOnlyStore` moved
  to `hnix-store-readonly` package\n     and renamed to `System.Nix.Store.ReadOnly`
  [#247](https://github.com/haskell-nix/hnix-store/pull/247)\n   * `System.Nix.Nar*`
  moved to `hnix-store-nar` package [#247](https://github.com/haskell-nix/hnix-store/pull/247)\n
  \  * `Arbitrary` instances moved to `hnix-store-tests` package [#241](https://github.com/haskell-nix/hnix-store/pull/241)\n
  \  * `System.Nix.Internal` namespace was removed [#236](https://github.com/haskell-nix/hnix-store/pull/236)\n
  \  * `StorePathMetadata` converted to `Metadata a` [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n
  \    * Moved to `System.Nix.StorePath.Metadata` [#236](https://github.com/haskell-nix/hnix-store/pull/236)\n
  \  * Constructors of `StorePathName` and `StorePathHashPart` are no longer\n     exported.
  Use respective `mkStorePath..` functions. [#230](https://github.com/haskell-nix/hnix-store/pull/230)\n
  \  * `StorePath` constructor is no longer exported.\n     Prefer `parsePath` or
  `parsePathFromText`.\n     If needed to construct a path directly, use `unsafeMakeStorePath`
  [#247](https://github.com/haskell-nix/hnix-store/pull/247)\n   * `StorePathSet`
  type alias is no more, use `HashSet StorePath` [#230](https://github.com/haskell-nix/hnix-store/pull/230)\n
  \  * `makeStorePath` and `parsePath` now returns `Either InvalidPathError StorePath`
  [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n   * `BuildResult`s
  `timesBuild` field changes type from `Integer` to `Int` [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n\n*
  Additions:\n   * `System.Nix.Store.Types` with `FileIngestionMethod`, `PathFilter`,
  `RepairMode` types  [#247](https://github.com/haskell-nix/hnix-store/pull/247)\n
  \    `FileIngestionMethod` was previously called `NarHashMode`\n   * `System.Nix.StorePath.parsePathFromText`
  [#236](https://github.com/haskell-nix/hnix-store/pull/236)\n   * `Default StoreDir`
  instance [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n   * `System.Nix.StorePath.storePathHashPartToText`
  [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n   * Added `Generic`
  and `Show` instances for\n     `Signature` and `NarSignature` [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n
  \  * Added `Eq` and `Ord` instances for `SomeNamedDigest` [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n
  \  * `BuildStatus` grows `NoSubstituters` and `ResolvesToAlreadyValid` constructors
  [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n   * `InvalidPathError`
  replacing previous stringy error [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n
  \  * Added `Arbitrary` instances for (exported by default) [#230](https://github.com/haskell-nix/hnix-store/pull/230)\n
  \    * `StorePath`\n     * `StorePathName`\n     * `StorePathHashPart`\n     * `StoreDir`\n
  \  * Added `Arbitrary` instances for [#231](https://github.com/haskell-nix/hnix-store/pull/231)\n
  \    * `BuildMode`\n     * `BuildStatus`\n     * `BuildResult`\n     * `Derivation
  StorePath Text`\n     * `DerivationOutput StorePath Text`\n\n# [0.7.0.0](https://github.com/haskell-nix/hnix-store/compare/core-0.6.1.0...core-0.7.0.0)
  2023-11-15\n\n* Changes:\n    * `StorePath` no longer carries `storePathRoot` field
  and we\n      have a stand-alone `StoreDir` type instead to be used instead of `FilePath`\n
  \     when store root directory is needed as a context [#216](https://github.com/haskell-nix/hnix-store/pull/216)\n\n*
  Fixes:\n    * NAR encoding and decoding now supports case-insensitive filesystems
  [#218](https://github.com/haskell-nix/hnix-store/pull/218)\n      * The \"case hack\"
  replicates the behavior of the `use-case-hack` option in Nix, which adds a suffix
  to conflicting filenames.\n        This feature is enabled by default on macOS (darwin).\n\n*
  Additions:\n      * `data NarOptions` has been added to configure NAR encoding and
  decoding. The `optUseCaseHack` field can be used to enable or disable the case hack
  [#218](https://github.com/haskell-nix/hnix-store/pull/218)\n      * New `streamNarIOWithOptions`
  and `runParserWithOptions` functions have been added to `System.Nix.Nar` to support
  the new configurable options [#218](https://github.com/haskell-nix/hnix-store/pull/218)\n\n#
  [0.6.1.0](https://github.com/haskell-nix/hnix-store/compare/core-0.6.0.0...core-0.6.1.0)
  2023-01-02\n\n* Fixes:\n\n    * NAR serialization compatibility (symlinks, directory
  symlinks, UTF-8 handling) [#201](https://github.com/haskell-nix/hnix-store/pull/201)
  [#203](https://github.com/haskell-nix/hnix-store/pull/203)\n\n# [0.6.0.0](https://github.com/haskell-nix/hnix-store/compare/core-0.5.0.0...core-0.6.0.0)
  2022-06-06\n\n* Breaking:\n\n    * `streamNarIO` changes type and returns `NarSource
  m` [#177](https://github.com/haskell-nix/hnix-store/pull/177)\n      * `FilePath`
  can turn to `NarSource m` using `dumpPath`\n      * `ByteString` can turn to `NarSource
  m` using `dumpString`\n\n# [0.5.0.0](https://github.com/haskell-nix/hnix-store/compare/0.4.3.0...core-0.5.0.0)
  2021-06-10\n\n* Breaking:\n\n  * `System.Nix.Hash`:\n    * Migration from packages
  `cryptohash-` -> `cryptonite` [#157](https://github.com/haskell-nix/hnix-store/pull/157/commits/97146b41cc87327625e02b81971aeb2fd7d66a3f)\n
  \     * rm `newtype Digest` in favour of `cryptonite: newtype Digest`\n      * rm
  `data HashAlgorithm` in favour of `cryptonite: class HashAlgorithm`\n      * rm
  `class ValidAlgo` in favour of `cryptonite: class HashAlgorithm`.\n      * `class
  NamedAlgo` removed `hashSize` in favour of `cryptonite: class HashAlgorithm: hashDigestSize`.
  Former became a subclass of the latter.\n      * rm `hash` in favour of `cryptonite:
  hash`\n      * rm `hashLazy` in favour of `cryptonite: hashlazy`\n    * Base encoding/decoding
  function for hashes (digests) changed (due to changes in type system & separation
  of specially truncated Nix Store hasing) [#157](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)\n
  \     * `encode(InBase -> DigestWith)`\n      * `decode(Base -> DigestWith)`\n  *
  `System.Nix.StorePath` [#157](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)\n
  \   * rm `type StorePathHashAlgo = 'Truncated 20 'SHA256` in favour of `StorePathHashPart`
  & `mkStorePathHashPart`.\n    * rm `unStorePathName`, please use `GHC: coerce` for
  `StorePathName <-> Text`, `StorePathName` data constructor is provided.\n  * `Internal`
  modules now have export lists, if something, please contact.\n\n* Additional:\n\n
  \ * Support of GHC 9.0 [#157](https://github.com/haskell-nix/hnix-store/pull/157/commits/97146b41cc87327625e02b81971aeb2fd7d66a3f)\n
  \ * `System.Nix.StorePath` [#157](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)\n
  \   * exposed `StorePathName` data constructor to API.\n    * added `newtype StorePathHashPart
  = StorePathHashPart ByteString`.\n      * added builder `mkStorePathHashPart ::
  ByteString -> StorePathHashPart`\n  * `System.Nix.Hash` [#157](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)\n
  \   * Nix store (which are specially truncated) hashes are now handled separately
  from other hashes:\n      * add `mkStorePathHash` - a function to create a content
  into Nix storepath-style hash:\n        `mkStorePathHash :: HashAlgorithm a => ByteString
  -> ByteString`\n        but recommend to at once use `mkStorePathHashPart`.\n\n#
  [0.4.3.0](https://github.com/haskell-nix/hnix-store/compare/0.4.2.0...0.4.3.0) 2021-05-30\n\n*
  Additional:\n  * `System.Nix.ReadonlyStore`: add a readonly `computeStorePathForPath`
  [b85f7c8](https://github.com/haskell-nix/hnix-store/commit/b85f7c875fe6b0bca939ffbcd8b9bd0ab1598aa0)\n
  \ * `System.Nix.ReadonlyStore`: `computeStorePathForPath`: force SHA256 as it's
  the only valid choice [db71ece](https://github.com/haskell-nix/hnix-store/commit/db71ecea3109c0ba270fa98a9041a8556e35217f)\n
  \ * `makeTextPath`: order the references [5fddf3c](https://github.com/haskell-nix/hnix-store/commit/5fddf3c66ba1bcabb72c4d6b6e09fb41a7acd62c)\n\n#
  [0.4.2.0](https://github.com/haskell-nix/hnix-store/compare/0.4.1.0...0.4.2.0) 2021-03-12\n\n*
  Additional:\n  * Cabal now properly states `tasty-discover` as `build-tool-depends`
  [5d03ffc](https://github.com/haskell-nix/hnix-store/commit/5d03ffc4cde9448df05e84838ece70cc83b1b6c)
  \n  * Added explicit `hie.yml` cradle description for `cabal` to help Haskell Language
  Server to work with monorepo [5bad385](https://github.com/haskell-nix/hnix-store/commit/b5ad38573d27e0732d0fadfebd98de1f753b4f07)\n
  \ * Removed vacuous `Setup.hs`, it was throwing-off HLS, and anyway file is vacuous
  and gets deprecated by Cabal itself [a5b7a61](https://github.com/haskell-nix/hnix-store/commit/a5b7a614c0e0e11147a93b9a197c2a443afa3244)\n
  \ * Nix dev env: removed GHC 8.6.5 support, afaik it is not even in Nixpkgs anymore
  [cf04083](https://github.com/haskell-nix/hnix-store/commit/cf04083aba98ad40d183d1e26251101816cc07ae)\n
  \ * Test suite: fixed nar test for the envs without `/proc` (test suite now works
  on `macOS`) [2a897ab](https://github.com/haskell-nix/hnix-store/commit/2a897ab581c0501587ce04da6d6e3a6f543b1d72)\n\n\n#
  [0.4.1.0](https://github.com/haskell-nix/hnix-store/compare/0.4.0.0...0.4.1.0) 2021-01-16\n\n*
  Big clean-up of dependencies.\n\n# [0.4.0.0](https://github.com/haskell-nix/hnix-store/compare/0.3.0.0...0.4.0.0)
  2020-12-30\n\n* `System.Nix.Hash` no longer exports `encodeBase16, decodeBase16`
  and their `Base32` counterparts.\n    These were replaced by `encodeInBase` and
  `decodeBase` functions\n    accepting `BaseEncoding` data type [#87](https://github.com/haskell-nix/hnix-store/pull/87)\n*
  Support `base16-bytestring >= 1` [#86](https://github.com/haskell-nix/hnix-store/pull/86)
  [#100](https://github.com/haskell-nix/hnix-store/pull/100)\n\n# 0.3.0.0 -- 2020-11-29\n\n*
  `System.Nix.Nar` changes API to support NAR format streaming:\n  * `buildNarIO ::
  FilePath -> Handle -> IO ()` - Create a NAR from a regular filesystem object, stream
  it out on the Handle\n  * `unpackNarIO :: Handle -> FilePath -> IO ()` - Recreate
  filesystem object from a NAR file accessed by the Handle\n* `StorePath` type changed
  to simple variant without type level\nsymbolic store path root.\n* Added `makeFixedOutputPath`
  to `System.Nix.ReadonlyStore`\n* Added `decodeBase16` and `decodeBase32` to `System.Nix.Hash`\n*
  `System.Nix.StorePath` module now provides\n  * `storePathToFilePath` and `storePathToText`
  helpers\n  * `storePathToNarInfo` for converting paths to `narinfo` URLs\n  * `parsePath`
  function\n  * `pathParser` Attoparsec parser\n* Added `System.Nix.Build` module\n*
  Added `System.Nix.Derivation` module\n* Removed `System.Nix.Util` module, moved
  to `hnix-store-remote`\n* Added base64 and SHA512 hash support\n\n# 0.2.0.0 -- 2020-03-12\n\nRemoved
  `System.Nix.Store`. We may reintroduce it later when multiple backends\nexist and
  we can tell what common effects they should share.\n\n# 0.1.0.0  -- 2019-03-18\n\n*
  First version.\n\n---\n\n`hnix-store-core` uses [PVP Versioning][1].\n\n[1]: https://pvp.haskell.org\n"
changelog-type: markdown
description: |
  # hnix-store-core

  Core types and functions for interacting with the Nix store.

  [System.Nix.StorePath]: ./src/System/Nix/StorePath.hs
description-type: markdown
hash: c94fe476a9166b23b9bb593b583b30157cb7ab90c4f6b04a5a3a6dc075a21d9d
homepage: https://github.com/haskell-nix/hnix-store
latest: 0.8.0.0
license-name: Apache-2.0
maintainer: srk@48.io
synopsis: Core types used for interacting with the Nix store.
test-bench-deps:
  attoparsec: '>=0'
  base: '>=0'
  base16-bytestring: '>=0'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  crypton: '>=0'
  data-default-class: '>=0'
  hnix-store-core: '>=0'
  hspec: '>=0'
  tasty: '>=0'
  tasty-golden: '>=0'
  tasty-hspec: '>=0'
  text: '>=0'
  time: '>=0'
  unordered-containers: '>=0'
