homepage: https://github.com/haskell-nix/hnix-store
changelog-type: markdown
hash: 16084729c4df762f438bd0f564b17d9555a2ce53c172af357de35dec8c81c747
test-bench-deps:
  bytestring: -any
  unix: -any
  base: -any
  tasty-golden: -any
  base64-bytestring: -any
  hspec: -any
  text: -any
  tasty-hspec: -any
  filepath: -any
  process: -any
  containers: -any
  binary: -any
  cryptonite: -any
  tasty-quickcheck: -any
  tasty-hunit: -any
  base16-bytestring: -any
  attoparsec: -any
  temporary: -any
  tasty: -any
  hnix-store-core: -any
  directory: -any
maintainer: shea@shealevy.com
synopsis: Core effects for interacting with the Nix store.
changelog: "# ChangeLog\n\n## [0.5.0.0](https://github.com/haskell-nix/hnix-store/compare/0.4.3.0...core-0.5.0.0)
  2021-06-10\n\n* Breaking:\n\n  * `System.Nix.Hash`:\n    * [(link)](https://github.com/haskell-nix/hnix-store/pull/157/commits/97146b41cc87327625e02b81971aeb2fd7d66a3f)
  Migration from packages `cryptohash-` -> `cryptonite`:\n      * rm `newtype Digest`
  in favour of `cryptonite: newtype Digest`\n      * rm `data HashAlgorithm` in favour
  of `cryptonite: class HashAlgorithm`\n      * rm `class ValidAlgo` in favour of
  `cryptonite: class HashAlgorithm`.\n      * `class NamedAlgo` removed `hashSize`
  in favour of `cryptonite: class HashAlgorithm: hashDigestSize`. Former became a
  subclass of the latter.\n      * rm `hash` in favour of `cryptonite: hash`\n      *
  rm `hashLazy` in favour of `cryptonite: hashlazy`\n    * [(link)](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)
  Base encoding/decoding function for hashes (digests) changed (due to changes in
  type system & separation of specially truncated Nix Store hasing):\n      * `encode(InBase
  -> DigestWith)`\n      * `decode(Base -> DigestWith)`\n  * [(link)](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)
  `System.Nix.StorePath`:\n    * rm `type StorePathHashAlgo = 'Truncated 20 'SHA256`
  in favour of `StorePathHashPart` & `mkStorePathHashPart`.\n    * rm `unStorePathName`,
  please use `GHC: coerce` for `StorePathName <-> Text`, `StorePathName` data constructor
  is provided.\n  * `Internal` modules now have export lists, if something, please
  contact.\n\n\n* Additional:\n\n  * [(link)](https://github.com/haskell-nix/hnix-store/pull/157/commits/97146b41cc87327625e02b81971aeb2fd7d66a3f)
  Support of GHC 9.0.\n\n  * [(link)](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)
  `System.Nix.StorePath`:\n    * exposed `StorePathName` data constructor to API.\n
  \   * added `newtype StorePathHashPart = StorePathHashPart ByteString`.\n      *
  added builder `mkStorePathHashPart :: ByteString -> StorePathHashPart`\n  * [(link)](https://github.com/haskell-nix/hnix-store/pull/157/commits/2af74986de8aef1a13dbfc955886f9935ca246a3)
  `System.Nix.Hash`:\n    * Nix store (which are specially truncated) hashes are now
  handled separately from other hashes:\n      * add `mkStorePathHash` - a function
  to create a content into Nix storepath-style hash:\n        `mkStorePathHash ::
  HashAlgorithm a => ByteString -> ByteString`\n        but recommend to at once use
  `mkStorePathHashPart`.\n    \n\n## [0.4.3.0](https://github.com/haskell-nix/hnix-store/compare/0.4.2.0...0.4.3.0)
  2021-05-30\n\n* Additional:\n  * [(link)](https://github.com/haskell-nix/hnix-store/commit/b85f7c875fe6b0bca939ffbcd8b9bd0ab1598aa0)
  `System.Nix.ReadonlyStore`: add a readonly `computeStorePathForPath`\n  * [(link)](https://github.com/haskell-nix/hnix-store/commit/db71ecea3109c0ba270fa98a9041a8556e35217f)
  `System.Nix.ReadonlyStore`: `computeStorePathForPath`: force SHA256 as it's the
  only valid choice\n  * [(link)](https://github.com/haskell-nix/hnix-store/commit/5fddf3c66ba1bcabb72c4d6b6e09fb41a7acd62c):
  `makeTextPath`: order the references\n\n## [0.4.2.0](https://github.com/haskell-nix/hnix-store/compare/0.4.1.0...0.4.2.0)
  2021-03-12\n\n* Additional:\n\n  * [(link)](https://github.com/haskell-nix/hnix-store/commit/5d03ffc43cde9448df05e84838ece70cc83b1b6c)
  Cabal now properly states `tasty-discover` as `build-tool-depends`.\n\n  * [(link)](https://github.com/haskell-nix/hnix-store/commit/b5ad38573d27e0732d0fadfebd98de1f753b4f07)
  added explicit `hie.yml` cradle description for `cabal` to help Haskell Language
  Server to work with monorepo.\n\n  * [(link)](https://github.com/haskell-nix/hnix-store/commit/a5b7a614c0e0e11147a93b9a197c2a443afa3244)
  rm vacuous `Setup.hs`, it was throwing-off HLS, and anyway file is vacuous and gets
  deprecated by Cabal itself.\n\n  * [(link)](https://github.com/haskell-nix/hnix-store/commit/cf04083aba98ad40d183d1e26251101816cc07ae)
  Nix dev env: removed GHC 8.6.5 support, afaik it is not even in Nixpkgs anymore.\n\n
  \ * [(link)](https://github.com/haskell-nix/hnix-store/commit/2a897ab581c0501587ce04da6d6e3a6f543b1d72)
  Test suite: fixed nar test for the envs without `/proc` (test suite now works on
  `macOS`).\n\n\n## [0.4.1.0](https://github.com/haskell-nix/hnix-store/compare/0.4.0.0...0.4.1.0)
  2021-01-16\n\n* Big clean-up of dependencies.\n\n## [0.4.0.0](https://github.com/haskell-nix/hnix-store/compare/0.3.0.0...0.4.0.0)
  2020-12-30\n\n* `System.Nix.Hash` no longer exports `encodeBase16, decodeBase16`
  and their `Base32` counterparts.\n    These were replaced by `encodeInBase` and
  `decodeBase` functions\n    accepting `BaseEncoding` data type [#87](https://github.com/haskell-nix/hnix-store/pull/87)\n*
  Support `base16-bytestring >= 1` [#86](https://github.com/haskell-nix/hnix-store/pull/86)
  [#100](https://github.com/haskell-nix/hnix-store/pull/100)\n\n## 0.3.0.0 -- 2020-11-29\n\n*
  `System.Nix.Nar` changes API to support NAR format streaming:\n  * `buildNarIO ::
  FilePath -> Handle -> IO ()` - Create a NAR from a regular filesystem object, stream
  it out on the Handle\n  * `unpackNarIO :: Handle -> FilePath -> IO ()` - Recreate
  filesystem object from a NAR file accessed by the Handle\n* `StorePath` type changed
  to simple variant without type level\nsymbolic store path root.\n* Added `makeFixedOutputPath`
  to `System.Nix.ReadonlyStore`\n* Added `decodeBase16` and `decodeBase32` to `System.Nix.Hash`\n*
  `System.Nix.StorePath` module now provides\n  * `storePathToFilePath` and `storePathToText`
  helpers\n  * `storePathToNarInfo` for converting paths to `narinfo` URLs\n  * `parsePath`
  function\n  * `pathParser` Attoparsec parser\n* Added `System.Nix.Build` module\n*
  Added `System.Nix.Derivation` module\n* Removed `System.Nix.Util` module, moved
  to `hnix-store-remote`\n* Added base64 and SHA512 hash support\n\n## 0.2.0.0 --
  2020-03-12\n\nRemoved `System.Nix.Store`. We may reintroduce it later when multiple
  backends\nexist and we can tell what common effects they should share.\n\n## 0.1.0.0
  \ -- 2019-03-18\n\n* First version.\n"
basic-deps:
  cereal: <0.6
  bytestring: <0.11
  unix: <2.8
  base: '>=4.11 && <4.16'
  time: <1.10
  base64-bytestring: <1.3
  unordered-containers: <0.3
  text: <1.3
  saltine: <0.3
  monad-control: <1.1
  filepath: <1.5
  nix-derivation: '>=1.1.1 && <2'
  lifted-base: <0.3
  memory: <0.17
  containers: <0.7
  cryptonite: <0.30
  mtl: <2.3
  hashable: <1.5
  base16-bytestring: <1.1
  attoparsec: <0.15
  algebraic-graphs: '>=0.5 && <0.6'
  vector: <0.13
  directory: <1.4
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.0.1
- 0.4.0.0
- 0.4.1.0
- 0.4.2.0
- 0.4.3.0
- 0.5.0.0
author: Shea Levy
latest: 0.5.0.0
description-type: markdown
description: |
  # hnix-store-core

  Core effects for interacting with the Nix store.

  See `NarEffects` in [System.Nix.Internal.Nar.Effects] and the [System.Nix.StorePath] for the available operations
  on the store.

  [System.Nix.Internal.Nar.Effects]: ./src/System/Nix/Internal/Nar/Effects.hs
  [System.Nix.StorePath]: ./src/System/Nix/StorePath.hs


  # Tests

   - `ghcid --command "cabal repl test-suite:format-tests" --test="Main.main"`
license-name: Apache-2.0
