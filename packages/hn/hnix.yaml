homepage: https://github.com/haskell-nix/hnix#readme
changelog-type: markdown
hash: cba7cacb96480b2222b1b27e0602d9c8570d6de0adb032a35b8d4b5896e3d48c
test-bench-deps:
  exceptions: -any
  serialise: -any
  bytestring: -any
  data-fix: -any
  tasty-th: -any
  unix: -any
  split: -any
  base: -any
  time: -any
  tasty-hedgehog: -any
  Diff: -any
  unordered-containers: -any
  text: -any
  megaparsec: -any
  filepath: -any
  criterion: -any
  process: -any
  hedgehog: -any
  containers: -any
  hnix: -any
  mtl: -any
  tasty-hunit: -any
  pretty-show: -any
  base16-bytestring: -any
  prettyprinter: -any
  transformers: -any
  optparse-applicative: -any
  tasty: -any
  deepseq: -any
  Glob: -any
  template-haskell: -any
  neat-interpolation: -any
  directory: -any
maintainer: johnw@newartisans.com
synopsis: Haskell implementation of the Nix language
changelog: |2

  # Changelog

  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.12.0...master#files_bucket) Progress


  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.11.1...0.12.0#files_bucket) 0.12.0 (2021-01-05)

  * *Disclaimer*: Current `derivationStrict` primOp implementation and so every evaluation of a derivation into a store path currently relies on the `hnix-store-remote`, which for those operations relies on the running `nix-daemon`, and so operations use/produce effects into the `/nix/store`. Be cautious - it is effectful.

  * Introduction:
    * New module `Nix.Effects.Derivation`.
    * Operations on derivations:
      * old got principled implementations.
      * also new operations got introduced.
    * Implementation of the `derivationStrict` primOp.

  * Breaking:
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `Nix.Effects`: **class** `MonadStore` got principled implementation.
      * `addPath'` got principled into `addToStore`.
      * `toFile_` got principled into `addTextToStore'`.
      * For help & easy migration you may use `addPath` & `toFile_` `addTextToStore` standalone functions in the module.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `Nix.Effects.Basic`: `defaultDerivationStrict` got reimplemented & moved into `Nix.Effects.Derivation`.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `Nix.Standard`: instance for `MonadStore (Fix1T t m)` got principled accoding to class `MonadStore` changes.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `Nix.Fresh.Basic`: instance for `MonadStore (StdIdT m)` got principled.

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) **New module `Nix.Effects.Derivation`**: [HNix(0.12.0):Nix.Effects.Derivation documentation](https://hackage.haskell.org/package/hnix-0.12.0/docs/Nix-Effects-Derivation.html).
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/9bcfbbe88ff0bd8d803296193ee1d8603dc5289e) `Nix.Convert`: Principled `NVPath -> NixString` coercion.
      * In a form of principled `instance FromValue NixString m (NValue' t f m (NValue t f m))`.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/a8e6d28fdb98a1c34f425c8395338fdabe96becc) `Nix.String`: Allow custom computations inside string contexts.
      * By providing `runWithStringContext{T,}'` methods into the API.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/e45f7632c51a9657f6e8d54c39fd4d21c466d85f) Includded support for new `base16-bytestring`, which advertices 2x-4x speed increase of its operations.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `Nix.Effects`: `addPath` & `toFile_` standalone functions got principled implementation through the internal use of the new `MonadStore` type class implementation.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `Nix.Effects`: added `addTextToStore`, `parseStoreResult` implementations.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `Nix.Effects`: added type synonyms `{RecursiveFlag, RepairFlag, StorePathName, FilePathFilter, StorePathSet}`.
    * [(link)](https://github.com/haskell-nix/hnix/pull/760) `Nix.Exec`: Fixed the rendering of internal `Frames`.
      * Which is an internal mechanism of a project to passing around messages with their context, still to be used internally).
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/3bba5549273c892c60aad5dd6d5058a8db40efbf) `HNix / Nix`: The library now also uses `hnix-store-remote`.
    * [(link)](https://github.com/haskell-nix/hnix/pull/554/commits/06b0fca9fd607eb2e995f003424e797a41ffa5b7) `cabal.project`: project uses `cryptohash-sha512` override, the `hnix-store-core` requires it from `hnix` and uses that override also. [Detailed info](https://github.com/haskell-hvr/cryptohash-sha512/pull/5#issuecomment-752796913). We promise to attend to this issue, probably by migrating to `cryptonite` in the nearest releases.

  Future note: The HNix is a big project. During the initial development and currently the API for simplicity exposes allmost all functions, types, etc. Big open API means a big effort to create/maintain a quite noisy changelog and you parsing through it, and also creates a frequent requirements to mark releases as major and bother you due to some type changes in some parts that may not be used or applicable to be public API.

  This year the most gracious API clean-up would happen, we would check and keep open what Hackage projects are using from the API, and the other parts would be open on the request by a way of rapid minor releases. That clean-up is also a work toward splitting the project into several packages some time in the future (split would be into something like Expressions, Evaluation, Executable, Extra), which migration also would be done most thoughful and graceful as possible, with as much easiness and automation provided for migration downstream as possible. If all goes as planned - all downstream would need to do is to get and run our script that would migrate our old map of module imports to new ones, and maybe manually add those newly formed packages into `.cabal` description.

  If it is possible, please, try to switch & use the higher-level API functions where it is applicable. Thank you.


  ### [(diff)](https://github.com/haskell-nix/hnix/compare/0.11.0...0.11.1#files_bucket) 0.11.1 (2020-12-09)

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/commit/d32a6fbaf3df1c8879d1b19a18f21c031a73e56c) `Nix.Builtins`: `isString` fixed - It used to return `True` for values coercible to string like derivations and paths. It only accepts string values now.
    * [(link)](https://github.com/haskell-nix/hnix/commit/53b4db2525a8f074d8c262fa7b66ce97e5820890) `Nix.Builtins`: `substring` fixed - Negative lengths used to capture an empty string. Now they capture the whole rmeainder of the string.
    * [(link)](https://github.com/haskell-nix/hnix/commit/dc31c5e64f8c7aaaea14cac0134bd47544533e67) `Nix.Effects`: `pathExists` fixed - Now also works with directories.
    * [(link)](https://github.com/haskell-nix/hnix/commit/e2ad934492eeac9881527610e4a1c1cf31ea1115) `Nix.Parser`: `->` is now properly right-associative (was non-associative).
    * [(link)](https://github.com/haskell-nix/hnix/commit/50baea5e1e482be3c4fcc13c9a45b1083243f681) `Nix.Parser`: Nix `assert` parser (`nixAssert` function) now accepts top-level Nix format also (which means also accepts all kinds of statements), before that it accepted only regular Nix expressions.
    * [(link)](https://github.com/haskell-nix/hnix/commit/59698de7185dfae508e5ccea4377a82023c4a0d5) `Nix.Render`: `renderLocation` now also shows/handles location of errors in raw strings.


  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.10.1...0.11.0#files_bucket) 0.11.0 (2020-11-02)

  * Breaking:
    * [(link)](https://github.com/haskell-nix/hnix/pull/740) Deleted incorrect `instance Generic1 NKeyName` from `module Nix.Expr.Types`.
    * [(link)](https://github.com/haskell-nix/hnix/pull/739) Parentheses now are properly included in the location annotation for Nix expressions, change of `nixParens` in `module Nix.Parser` essentially results in the change of all module `nix*` function results, essentially making results of the whole module more proper.

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/pull/741) Fix QQ Text lifting error: work around of [GHC#12596 "can't find interface-file declaration"](https://gitlab.haskell.org/ghc/ghc/-/issues/12596).
    * [(link)](https://github.com/haskell-nix/hnix/pull/744) Fix comments inclusion into location annotations, by using pre-whitespace position for source end locations.


  ### [(diff)](https://github.com/haskell-nix/hnix/compare/0.10.0...0.10.1#files_bucket) 0.10.1 (2020-09-13)

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/pull/715) `{Binding, NExpr, NExprF, NKeyName}` gained `Ord1` instances.
      * These instances were required by downstream projects to be able to use newer HNix.
    * [(link)](https://github.com/haskell-nix/hnix/pull/712) CLI gained `--long-version` option for gathering a detailed debug information.
      * Currently, reports Git commit and its date.
      * [(link)](https://github.com/haskell-nix/hnix/issues/718) Currently does not work in case of use of the `nix-build`, in which case simply returns `UNKNOWN` placeholder.


  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.9.1...0.10.0#files_bucket) 0.10.0 (2020-09-12)

  * Breaking:
    * [(link)](https://github.com/haskell-nix/hnix/pull/699) Removed `NExpr` `{FromJSON, ToJSON}` instances.
      * This also removed the JSON output feature for unevaluated expression trees.

  * Additional:
    * [(link)](https://github.com/haskell-nix/hnix/pull/703) CLI gained `--version` option.
    * Dependencies:
      * [(link)](https://github.com/haskell-nix/hnix/pull/686) Requires last major `data-fix` (`0.3`).
      * [(link)](https://github.com/haskell-nix/hnix/pull/679) Requires last major `prettyprinter` (`1.7`).


  ### [(diff)](https://github.com/haskell-nix/hnix/compare/0.9.0...0.9.1#files_bucket) 0.9.1 (2020-07-13)

  * Additional:
    * REPL:
      * Better tab completion.
      * Accepting multi-line input.
      * Support for passing evaluated expression result of `hnix --eval -E`.
        to REPL as an `input` variable.
      * Support for loading `.hnixrc` from the current directory.
    * Reporting of `builtins.nixVersion` bumped from 2.0 to 2.3.
    * Dependencies:
      * Freed from: `{interpolate, contravariant, semigroups, generic-random, tasty-quickcheck}`.
      * Requires last major `repline` (`0.4`).


  ## [(diff)](https://github.com/haskell-nix/hnix/compare/0.8.0...0.9.0#files_bucket) 0.9.0 (2020-06-15)

  * Breaking:
    * Removed instances due to migration to `haskeline 0.8`:
      * `instance MonadException m => MonadException(StateT(HashMap FilePath NExprLoc) m)`.
      * `instance MonadException m => MonadException(Fix1T StandardTF m)`.
    * Dependencies:
      * Requires last major `haskeline` (`0.8`).

  * Additional:
    * Library: Official support for `GHC 8.4 - 8.10`.
    * Executable complies only under `GHC 8.10`.

  * Changelog started. Previous release was `0.8.0`.


  ---

  HNix uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org
basic-deps:
  http-client: '>=0.5.14 && <0.6 || >=0.6.4 && <0.7'
  exceptions: '>=0.10.0 && <0.11'
  free: ==5.1.*
  hnix-store-remote: '>=0.4.0 && <0.5'
  serialise: '>=0.2.1 && <0.3'
  semialign: '>=1 && <1.2'
  bytestring: '>=0.10.8 && <0.11'
  these: '>=1.0.1 && <1.2'
  lens-family: '>=1.2.2 && <2.2'
  logict: '>=0.6.0 && <0.7 || >=0.7.0.2 && <0.8'
  data-fix: '>=0.3.0 && <0.4'
  unix: '>=2.7.2 && <2.8'
  haskeline: '>=0.8.0.0 && <0.9'
  hashing: '>=0.1.0 && <0.2'
  split: '>=0.2.3 && <0.3'
  base: '>=4.11 && <5'
  time: '>=1.8.0 && <1.9 || >=1.9.3 && <1.10'
  comonad: '>=5.0.4 && <5.1'
  parser-combinators: '>=1.0.1 && <1.3'
  deriving-compat: '>=0.3 && <0.6'
  semialign-indexed: '>=1 && <1.2'
  unordered-containers: '>=0.2.9 && <0.3'
  text: '>=1.2.3 && <1.3'
  megaparsec: '>=7.0 && <9.1'
  syb: '>=0.7 && <0.8'
  monad-control: '>=1.0.2 && <1.1'
  filepath: '>=1.4.2 && <1.5'
  gitrev: '>=1.1.0 && <1.4'
  process: '>=1.6.3 && <1.7'
  ref-tf: '>=0.4.0 && <0.5'
  lens-family-th: '>=0.5.0 && <0.6'
  array: '>=0.4 && <0.6'
  lens-family-core: '>=1.2.2 && <2.2'
  repline: '>=0.4.0.0 && <0.5'
  xml: '>=1.3.14 && <1.4'
  containers: '>=0.5.11.0 && <0.7'
  some: '>=1.0.1 && <1.1'
  hnix: -any
  binary: '>=0.8.5 && <0.9'
  regex-tdfa: '>=1.2.3 && <1.4'
  http-client-tls: '>=0.3.5 && <0.4'
  mtl: '>=2.2.2 && <2.3'
  hashable: '>=1.2.5 && <1.3.1'
  transformers-base: '>=0.4.5 && <0.5'
  pretty-show: '>=1.9.5 && <1.11'
  base16-bytestring: '>=0.1.1 && <1.1'
  prettyprinter: '>=1.7.0 && <1.8'
  transformers: '>=0.5.5 && <0.6'
  optparse-applicative: '>=0.14.3 && <0.17'
  hnix-store-core: '>=0.4.0 && <0.5'
  deepseq: '>=1.4.3 && <1.5'
  scientific: '>=0.3.6 && <0.4'
  monadlist: '>=0.0.2 && <0.1'
  http-types: '>=0.12.2 && <0.13'
  aeson: '>=1.4.2 && <1.6'
  template-haskell: '>=2.13 && <2.17'
  vector: '>=0.12.0 && <0.13'
  neat-interpolation: '>=0.4 && <0.6'
  directory: '>=1.3.1 && <1.4'
all-versions:
- 0.2.0
- 0.2.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.6.0
- 0.6.1
- 0.7.0
- 0.7.1
- 0.8.0
- 0.9.0
- 0.9.1
- 0.10.0
- 0.10.1
- 0.11.0
- 0.11.1
- 0.12.0
- 0.12.0.1
author: John Wiegley
latest: 0.12.0.1
description-type: markdown
description: "[![Chatroom Gitter](https://img.shields.io/badge/Chatroom-Gitter-%23753a88)](https://gitter.im/haskell-nix/Lobby)\n[![Hackage](https://img.shields.io/hackage/v/hnix?color=%235e5086&label=Latest%20release%20on%20Hackage)](https://hackage.haskell.org/package/hnix)\n[![Hackage
  Matrix Builder](https://img.shields.io/badge/Hackage%20Matrix-Builder-%235e5086)](https://matrix.hackage.haskell.org/package/hnix)\n[![Bounds](https://img.shields.io/hackage-deps/v/hnix?label=Released%20dep%20bounds)](https://packdeps.haskellers.com/feed?needle=hnix)\n[![Hydra
  CI](https://img.shields.io/badge/Nixpkgs%20Hydra-CI-%234f72bb)](https://hydra.nixos.org/job/nixpkgs/trunk/haskellPackages.hnix.x86_64-linux#tabs-status)\n[![Repology
  page](https://img.shields.io/badge/Repology-page-%23005500)](https://repology.org/project/haskell:hnix/versions)\n\n\n#
  hnix\n\nParser, evaluator and type checker for the Nix language written in Haskell.\n\n\n##
  Contents\n\n<!-- TOC generates automatically, do not bother editing any further
  TOC text -->\n<!-- START doctoc generated TOC please keep comment here to allow
  auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n-
  [Prerequisites](#prerequisites)\n- [Getting Started](#getting-started)\n  - [Cachix
  prebuild binary caches](#cachix-prebuild-binary-caches)\n  - [Development using
  Cabal](#development-using-cabal)\n    - [Building the project](#building-the-project)\n
  \     - [With benchmarks](#with-benchmarks)\n      - [With profiling](#with-profiling)\n
  \     - [With full debug info](#with-full-debug-info)\n    - [Run HNix](#run-hnix)\n
  \ - [Use of the Nix-build](#use-of-the-nix-build)\n    - [Run benchmarks](#run-benchmarks)\n
  \   - [With profiling](#with-profiling-1)\n    - [With full debug info](#with-full-debug-info-1)\n
  \   - [Run the result](#run-the-result)\n- [Development status loop with amazing
  `ghcid`](#development-status-loop-with-amazing-ghcid)\n- [Using the HNix REPL](#using-the-hnix-repl)\n-
  [Nix laziness](#nix-laziness)\n- [Contributing](#contributing)\n- [Evaluating Nixpkgs
  with HNix](#evaluating-nixpkgs-with-hnix)\n\n<!-- END doctoc generated TOC please
  keep comment here to allow auto update -->\n\n\n## Prerequisites\nTooling is WIP,
  `nix-shell` and `nix-store` are still used for their purpose, so, to access them
  Nix is required to be installed.\n\n*Disclaimer*: Current `derivationStrict` primOp
  implementation and so every evaluation of a derivation into a store path currently
  relies on the `hnix-store-remote`, which for those operations relies on the running
  `nix-daemon`, and so operations use/produce effects into the `/nix/store`. Be cautious
  - it is effectful.\n\n## Getting Started\n\n```shell\n# Note: --recursive\ngit clone
  --recursive 'https://github.com/haskell-nix/hnix.git'\ncd hnix\n```\n\n\n### Cachix
  prebuild binary caches\n\nIf you opt in to use of Nix environment, please enable
  the official HNix Cachix binary cache:\n\n1. Go through https://cachix.org/ and
  set it up.\n\n2. Run: `cachix use hnix`\n\n\n### Development using Cabal\n\nCabal
  [Quickstart](https://cabal.readthedocs.io/en/3.4/nix-local-build.html).\n\n1. (Optional),
  to enter the projects reproducible Nix environment:\n```shell\nnix-shell\n```\n
  \ \n2. Building:\n```shell\ncabal v2-configure\ncabal v2-build\n```\n\n3. Loading
  the project into `ghci` REPL:\n```shell\ncabal v2-repl\n```\n\n4. Testing:\n\n*
  Default suite:\n```shell\ncabal v2-test\n```\n\n* All available tests:\n```shell\nenv
  ALL_TESTS=yes cabal v2-test\n```\n\n* Selected (list of tests is in `tests/Main.hs`):\n```shell\nenv
  NIXPKGS_TESTS=yes PRETTY_TESTS=1 cabal v2-test\n```\n\n#### Building the project\n\n#####
  With benchmarks\n\nTo run benchmarks:\n\n```shell\ncabal v2-bench\n```\n\n#####
  With profiling\n\nTo build `hnix` with profiling enabled:\n\n```shell\ncabal v2-configure
  --enable-tests --enable-profiling --flags=profiling\ncabal v2-run hnix -- <args>
  +RTS -p\n```\n\n##### With full debug info\n\nTo build `hnix` for debugging, with
  full tracing output and stack traces:\n\n```shell\ncabal v2-configure --enable-tests
  --enable-profiling --flags=profiling --flags=tracing\ncabal v2-run hnix -- -v5 --trace
  <args> +RTS -xc\n```\n\nNote that this going to run quite slowly, but would give
  the most information as to what happens during parsing & evaluation.\n\n\n#### Run
  HNix\n```shell\ncabal v2-run hnix -- --help\n```\n(`--` is for separation between
  `cabal` & `hnix` args)\n\n\n### Use of the Nix-build\n\nThere is a number of build
  options to use with `nix-build`, documentation of them is in: `./default.nix`, keys
  essentially pass-through the [Nixpkgs Haskell Lib API](https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/haskell-modules/lib.nix).\n\nOptions
  can be used as:\n```shell\nnix-build \\\n  --arg <option1> <argument1> \\\n  --arg
  <option2> <argument2> \\\n  --argstr <option3> \"<strinTypeArg>\"\n```\n\n#### Run
  benchmarks\n\n```shell\nnix-build \\\n  --arg disableOptimization false \\\n  --arg
  enableDeadCodeElimination true \\\n  --arg doStrip true \\\n  --arg doBenchmark
  true\n```\n\n#### With profiling\n\n```shell\nnix-build \\\n  --arg disableOptimization
  false \\\n  --arg enableDeadCodeElimination true \\\n  --arg enableLibraryProfiling
  true \\\n  --arg enableExecutableProfiling true\n```\n\n#### With full debug info\n\n```shell\nnix-build
  \\\n  --arg disableOptimization false \\\n  --arg enableDeadCodeElimination true
  \\\n  --arg doBenchmark true \\\n  --arg doStrip false \\\n  --arg enableLibraryProfiling
  true \\\n  --arg enableExecutableProfiling true\n  --arg doTracing true \\\n  --arg
  enableDWARFDebugging true\n```\n\n#### Run the result\n\n```shell\n./result/bin/hnix\n```\n\n##
  Development status loop with amazing [`ghcid`](https://github.com/ndmitchell/ghcid)\n\n```shell\nghcid
  --command=\"cabal v2-repl --repl-options=-fno-code --repl-options=-fno-break-on-exception
  --repl-options=-fno-break-on-error --repl-options=-v1 --repl-options=-ferror-spans
  --repl-options=-j\"\n```\n(optional) To use projects reproducible environment, wrap
  `ghcid ...` command into a `nix-shell --command ' '`.\n\nFor simplicity `alias`
  the command in your shell.\n\n\n## Using the HNix REPL\n\nEnter in:\n```shell\nhnix
  --repl\n```\n\nEvaluate an expression:\n```shell\nhnix --eval -E '(import <nixpkgs>
  {}).pkgs.hello' --repl\n```\nThis also binds the evaluated expression result to
  the `input` variable, so that variable can be inspected.\n\nUse the `:help` command
  for a list of all available REPL commands.\n\n## Nix laziness\n\nNix is a lazy language
  with the ability of recursion, so by default REPL and eval prints are lazy:\n\n```shell\nhnix
  \\\n  --eval \\\n  --expr '{ x = true; }'\n  \n{ x = \"<CYCLE>\"; }\n```\n\nTo disable
  laziness add the `--strict` to commands or `:set strict` in the REPL.\n\n```shell\nhnix
  \\\n  --eval \\\n  # Strictly \\\n  --strict \\\n  --expr '{ x = true; }'\n  \n{
  x = true; }\n```\n\n## Contributing\n\n1. If something in the [quests](https://github.com/haskell-nix/hnix/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22+no%3Aassignee)
  looks interesting, look through the thread and leave a comment taking it, to let
  others know you're working on it.\n\n2. You are free to chat with everyone on [Gitter](https://gitter.im/haskell-nix/Lobby).\n\n3.
  When the pull request is ready to be submitted, to save time - please, test it with:\n\n```shell\ngit
  submodule update --init --recursive\nnix-shell --run \"LANGUAGE_TESTS=yes cabal
  v2-test\"\n```\n\nPlease, check that all tests that were passing prior (most probably
  all tests mentioned in the command) are still passing for the PR, it is faster to
  check that locally than through CI. It's OK if no new tests are passing.\n\n## Evaluating
  Nixpkgs with HNix\n\nCurrently, the main high-level goal is to be able to evaluate
  all of Nixpkgs:\n\n```shell\nhnix --eval -E \"import <nixpkgs> {}\" --find\n```\n"
license-name: BSD-3-Clause
