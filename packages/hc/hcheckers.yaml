homepage: https://github.com/portnov/hcheckers#readme
changelog-type: markdown
hash: a5dfb9dde915bb6d408210d89a0ea559efa2c6a6bbbfcf7f5544037715ab79d1
test-bench-deps: {}
maintainer: portnov84@rambler.ru
synopsis: Implementation of checkers ("draughts") board game - server application
changelog: |
  # Changelog for hcheckers

  ## Unreleased changes
basic-deps:
  warp: -any
  exceptions: -any
  bits: -any
  bytestring: -any
  mwc-random: -any
  ekg-core: -any
  wai: -any
  heavy-logger: -any
  unix: -any
  stm: -any
  base: '>=4.7 && <5'
  hsyslog: -any
  text-format-heavy: -any
  unordered-containers: -any
  text: -any
  unix-bytestring: -any
  clock: -any
  megaparsec: -any
  monad-metrics: -any
  filepath: -any
  network: -any
  data-default: -any
  array: -any
  ekg: -any
  random-shuffle: -any
  fast-logger: -any
  random-access-file: -any
  containers: -any
  concurrent-extra: -any
  binary: -any
  store: -any
  hashtables: -any
  mtl: -any
  hashable: -any
  optparse-applicative: -any
  random: -any
  stm-containers: -any
  scotty: -any
  http-types: -any
  microlens: -any
  aeson: -any
  template-haskell: -any
  psqueues: -any
  yaml: -any
  vector: -any
  bytes: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Ilya V. Portnov
latest: 0.1.0.1
description-type: markdown
description: "# hcheckers README\n\n## What this is\n\nHCheckers is a relatively simple
  implementation of checkers board game (also known as \"draughts\").\nThe core is
  written in Haskell, and the GUI is written in Python + Qt5. Some\nday, probably,
  there will be a web-based JS client to play from browser.\n\nIt is possible to play:\n\n*
  Human vs computer (either user or computer plays white);\n* Human vs human.\n\n##
  What this is not\n\nHCheckers is not about to compete with well-known and highly
  optimized\ncommercial checkers software. It will hardly do any good in playing versus\nhuman
  checkers grossmaster.\nHCheckers does not contain any pre-populated openings or
  endgames database, and\nit actually does not know how to play checkers - it only
  knows the rules.\n\nBut this is not either a \"look-what-i-did-in-one-evening\"
  project. HCheckers\nhas full support of several rules, has decent UI, supports UI
  localization, and\nplays not so bad for amateur.\n\n## Project goals\n\n* Fun of
  development. For not-so-seasoned Haskell programmers, or people who are\n  not-so-expirienced
  in writing games, this can show some examples. For that,\n  I'm not going to optimize
  every possible bit: code readability is in\n  priority. For that, HCheckers is not
  going to be faster than software written\n  in C++ with economy of every bit of
  memory.\n* Fun of game. HCheckers can play well enough for not-so-seasoned draughtsmen.\n\n\n##
  Features\n\nThe code is general enough to implement a wide range of checkers variants.\nThe
  following are implemented at the moment:\n\n* Russian\n* Simple russian (russian
  draughts without kings)\n* Diagonal russian (russian draughts with different initial
  setup)\n* Spancirety (russian draughts on 8x10 board)\n* English (checkers)\n* International
  draughts (10x10)\n* Brazilian (rules of international draughts on 8x8 board)\n*
  Canadian draughts (12x12)\n* Turkish draughts (orthogonal)\n* Armenian draughts
  (Tama)\n\nIt is possible to implement different AI algorithms; currently there is
  only\none, based on standard alpha-beta pruning. The algorithm has some number of\nparameters,
  which can be tuned to choose between better play and performance.\n\nHCheckers can
  use persistent cache; it can help in calculating more turns, but\nit can grow very
  large and eat a lot of RAM.\n\n## Current state\n\nAt the moment, HCheckers has
  most of core functionality implemented, but there\nare some outstanding issues (please
  refer to github's issue tracker).\nMost wanted planned things to do are:\n\n* User
  documentation (#22)\n* Code documentation (#1)\n* Spectators support (#9)\n\n##
  Installation\n\n### Server part\n\nFor the server part, there are two options available.\n\n###
  Ubuntu package\n\nLast package that I released is available in github releases.
  Please refer to\nhttps://github.com/portnov/hcheckers/releases .\n\nTo build a newer
  package,\n\n```\n$ git clone https://github.com/portnov/hcheckers.git\n$ cd hcheckers/docker/\n$
  ./build-ubuntu-package.sh\n```\n\nThe package will be available under `docker/target`
  subdirectory. \nUse `sudo dpkg -i hcheckersd_0.1.0.0-1_amd64.deb` to install it.\n\n###
  Docker image\n\nFor non-debian based systems, the only \"easily distributed\" form
  for now is the\ndocker container.\n\n```\n$ git clone https://github.com/portnov/hcheckers.git\n$
  cd hcheckers/docker/\n$ ./build-plain-builder.sh\n$ ./build-plain.sh\n$ ./run-plain.sh\n```\n\n###
  Client part\n\nPython client can be installed in two ways:\n\n1) Via `pip`:\n\n```\n$
  cd hcheckers/python/\n$ sudo pip3 install .\n```\n\n2) Using debian package (on
  debian-based systems).\n\nLast package that I released is available in github releases.
  Please refer to\nhttps://github.com/portnov/hcheckers/releases .\n\nTo build a newer
  package, execute\n\n```\n$ sudo apt-get install python3-stdeb\n$ cd hcheckers/python/\n$
  ./build_deb.sh\n```\n\nTo install a package, do\n\n```\n$ sudo apt install python3-pyqt5
  python3-pyqt5.qtsvg python3-pyqt5.qtmultimedia\n$ sudo dpkg -i deb_dist/python3-hcheckers_0.1.0.0-1_all.deb\n```\n\nAfter
  client is installed (either via `pip` or `deb` package), you can run it with\n\n```\n$
  hcheckersc.py\n```\n\n## Running development version\n\nYou can run HCheckers without
  actually installing it; it is mostly useful while developing it.\n\n```\n$ sudo
  apt-get install stack\n$ cd hcheckers/\n$ stack build\n```\n\nRun server:\n\n```\n$
  stack exec hcheckersd\n```\n\nRun client:\n```\n$ cd python/\n$ python hcheckersc.py\n```\n\n"
license-name: BSD-3-Clause
