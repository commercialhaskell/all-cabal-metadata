homepage: https://github.com/ivanperez-keera/dunai
changelog-type: text
hash: 06f75101fc87566f00e09b6c941384a98e1e1393eac721976e5b714d9c4a1f68
test-bench-deps:
  dunai: -any
  base: '>=4 && <5'
  tasty-hunit: -any
  transformers: -any
  tasty: -any
maintainer: ivan.perez@keera.co.uk
synopsis: Generalised reactive framework supporting classic, arrowized and monadic
  FRP.
changelog: |
  2022-06-21 Ivan Perez <ivan.perez@keera.co.uk>
          * dunai.cabal: Version bump (0.8.3) (#302).
          * src/: Simplify implementation of switch (#276), remove redundant
            imports (#281), remove redundant pragma (#282), use external
            Void type (#79), remove redundant imports (#283), disable warning
            pertaining to orphan instances (#284), style fixes (partial) (#285),
            fix missing re-export of Control.Arrow (#286), further style fixes
            (partial) (#287), avoid name shadowing (#291), remove outdated
            comments (#289), remove unused pragmas (#290), remove unnecessary
            comment (#293), reimplement function without TupleSections (#293),
            standardize haddock comment (#294), add missing documentation (#288),
            disable warning due to use of ListT (#297), fix oudated comment
            (#299), horizontal alignment style changes (#301).
          * README.md: Re-structure README (#300).

  2022-04-21 Ivan Perez <ivan.perez@keera.co.uk>
          * dunai.cabal: Version bump (0.8.2) (#280), syntax rules (#271),
            declare CHANGELOG (#273), declare subdir of source-repository (#272).
          * src/: Fix haddock syntax error in documentation of switch (#274),
            introduce new dSwitch function (#275), syntax rules (#277), remove
            unused module Ultrametric (#278), remove unused module
            CausalCommutative (#279).

  2021-10-21 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/: Code cleaning.
          * dunai.cabal: Version bump (0.8.1).
          * README.md: update example to new API, fix broken link, update badge,
            fix typo.
          * Thanks: @DireWolf707.

  2021-09-06 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/: Code cleaning.
          * dunai.cabal: Version bump (0.8.0).
          * README.md: support for GHC 8.10.
          * Thanks: @walseb, @turion, @bgluzman, @mezzomondo.

  2020-04-18 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/: Add new utilities. Fix behaviour of listToMaybeS.
          * dunai.cabal: Version bump (0.7.0).
          * README.md: support for GHC 8.8.
          * Cleaning and hlinting changes.
          * Thanks: @turion, @Linearity.

  2020-01-25 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/: Remove Data.VectorSpace.
          * src:/: Fix error in documentation of embed.
          * dunai.cabal: use simple-affine-space. Version bump (0.6.0).
          * README.md: support for GHC 8.6. Add links to videos. Fix typos.
          * Thanks: @chriz-keera, @turion, @Rizary, @dynomite567,
            @alexmarginean16.

  2019-09-29 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/: Fixes error in List on older versions of GHC.
          * dunai.cabal: exposes List support. Version bump (0.5.2.1).

  2019-09-29 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/: Fixes error in List support implementation.
          * dunai.cabal: exposes List support. Version bump (0.5.2).

  2018-11-03 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/: Fixes failed patterns in do notation.
          * dunai.cabal: Version bump (0.5.1).
          * Thanks: @turion, @ggreif.

  2018-11-03 Ivan Perez <ivan.perez@keera.co.uk>
          * src:/ Renames lifting functions, moves definitions around.
          * dunai.cabal: Version bump (0.5).
          * Thanks: @turion.

  2017-12-05 Ivan Perez <ivan.perez@keera.co.uk>
          * Adds support for random numbers using MonadRandom
            (thanks Jonathan Thaler -- @thalerjonathan).
          * Removes MSF constructor from many definitions
            (by Manuel Bärenz -- @turion).
          * Adds support for older GHC versions.
          * Moves some definitions/modules around.
          * dunai.cabal: Version bump (0.4).
          * examples/: Changes licenses, updates examples to use new API.

  2017-10-31 Ivan Perez <ivan.perez@keera.co.uk>
          * src/: Re-structure modules, completes documentation.
          * stack.yaml: New stack configuration.
          * Fixes compilation errors with older versions of GHC.
          * dunai.cabal: Version bump (0.3), adds repo URL, documentation.
          * examples/: Updates examples to use new API.

  Copyright (c) 2016, Ivan Perez and Manuel Bärenz.
  All rights reserved.
basic-deps:
  MonadRandom: -any
  base: '>=4.6 && <5'
  simple-affine-space: -any
  transformers-base: -any
  transformers: -any
all-versions:
- 0.0.1.0
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.2.1
- 0.6.0
- 0.7.0
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
author: Ivan Perez, Manuel Bärenz
latest: 0.8.3
description-type: haddock
description: |-
  Dunai is a DSL for strongly-typed CPS-based composable transformations.

  Dunai is based on a concept of Monadic Stream Functions (MSFs). MSFs are
  transformations defined by a function
  @unMSF :: MSF m a b -> a -> m (b, MSF m a b)@ that executes one step of a
  simulation, and produces an output in a monadic context, and a continuation
  to be used for future steps.

  MSFs are a generalisation of the implementation mechanism used by Yampa,
  Wormholes and other FRP and reactive implementations.

  When combined with different monads, they produce interesting effects. For
  example, when combined with the @Maybe@ monad, they become transformations
  that may stop producing outputs (and continuations). The @Either@ monad gives
  rise to MSFs that end with a result (akin to Tasks in Yampa, and Monadic
  FRP).

  Flattening, that is, going from some structure @MSF (t m) a b@ to @MSF m a b@
  for a specific transformer @t@ often gives rise to known FRP constructs. For
  instance, flattening with @EitherT@ gives rise to switching, and flattening
  with @ListT@ gives rise to parallelism with broadcasting.

  MSFs can be used to implement many FRP variants, including Arrowized FRP,
  Classic FRP, and plain reactive programming. Arrowized and applicative syntax
  are both supported.

  For a very detailed introduction to MSFs, see:
  <http://dl.acm.org/citation.cfm?id=2976010>
  (mirror: <http://www.cs.nott.ac.uk/~psxip1/#FRPRefactored>).
license-name: BSD-3-Clause
