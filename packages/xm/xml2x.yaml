all-versions:
- '0.2'
- '0.4'
- 0.4.1
- 0.4.2
author: Ketil Malde
basic-deps:
  array: '>=0'
  base: '>3 && <4.2'
  bio: '>=0.3.4'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  xhtml: '>=0'
changelog: ''
changelog-type: ''
description: "\nSYNOPSIS\n\n    xml2x - convert blast output in XML format, either
  to a (csv)\n\t    table suitable for e.g. importing into Excel or OOCalc, or\n\t
  \   to HTML.  Optionally annotating the output with GO terms\n\t    and KEGG KOs.\n\nINSTALLATION\n\n
  \   The usual cabal routine, should also be possible to compile via\n    the Makefile.\n\nUSAGE\n\n
  \   xml2x [options] xmlfile1 xmlfile2...\n\n    Use -v if you are on an interactive
  terminal to keep track of\n    progress.\n\n    Output format is specified with
  -C (CSV) or -H (HTML), with -C\n    being the default.  Note that only one output
  format can be used\n    at a time.\n\nCSV OUTPUT\n\n    For CSV output, the following
  modes are supported\n\n      --all    - output all blast matches (HSPs), one per
  line\n      --top    - output only the top hit for each input sequence\n      --region
  - output top hit for regions that overlap <50%\n\n    Use -o to specify an output
  file, the default is to output to\n    standard out.\n\nHTML OUTPUT\n\n    For HTML
  output, a directory called \"blast.d\" is created (or\n    re-used if already present),
  and an index is constructed in a file\n    named \"index.html\" in the current directory.
  \ The index lists some\n    information about the highest scoring blast hit, and
  links to the\n    file displaying the alignment.\n\n    The directory contains one
  HTML file per input\n    sequence, and uses a HTML table to rendering the alignments.\n
  \   Color codes indicate level of identity (not total match score or\n    E-value!),
  so short, brightly red matches may have lower score than long gray\n    ones.  Frame
  (for BLASTX) or strand (for BLASTN) is indicated as\n    text for each match.\n\n
  \   The files are named consistently, so if you run BLAST in both\n    directions
  (i.e.  swapping -i and -d), you should be able to go\n    back and forth by clicking
  on the sequence names.\n\nANNOTATIONS\n\n    Options include --annotations to specify
  the mapping between\n    UniProt accessions and GO terms.  This file is usually
  called\n    \"gene_association.goa_uniprot\", and is available from the GO\n    consortium
  [1].  The file is several GB, you may want to consider\n    trimming it down a bit
  by filtering out the automatic (IEA)\n    annotations - however, xml2x will first
  scan the blast output to\n    extract only relevant GO annotations, so keeping it
  all in memory\n    is not necessary.\n\n    Additionally, you can use --ontology
  to specify the description of\n    the GO terms, and the output will then be somewhat
  more\n    meaningful.  The file is usually called \"gene_ontology.obo\",\n    similarly
  available [2].\n\n    You can also add KEGG annotations with the -k (or --kegg-organism)\n
  \   option. This option takes a file prefix as a parameter, and\n    for a prefix
  $P, expects to find files $P_uniprot.list and\n    $P_ko.list.  These files are
  read, and used to mapp KEGG KOs to\n    each UniProt hit.  Available from [3].\n\nBUGS\n\n
  \   XML parsing is slow, but ndm said he'd look into it.\n\n    Must be compiled
  with -smp to avoid huge memory requirements, but\n    the plus side is that with
  -smp, we use a lot less RAM than\n    AutoFact.\n\nREFERENCES\n\n    [1] http://www.geneontology.org/ontology/gene_ontology.obo\n
  \   [2] ftp://ftp.ebi.ac.uk/pub/databases/GO/goa/UNIPROT/\n    [3] ftp://ftp.genome.jp/pub/kegg/genes/organisms/\n"
description-type: text
hash: e7e7ff48d9c8b25e0eeb72914e2bb6dc11eeed868e7d8ba2432e805ad017fac1
homepage: ''
latest: 0.4.2
license-name: LicenseRef-GPL
maintainer: Ketil Malde <ketil@malde.org>
synopsis: Convert BLAST output in XML format to CSV or HTML
test-bench-deps: {}
