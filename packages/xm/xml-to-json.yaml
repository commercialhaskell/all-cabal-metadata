all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 1.0.0
- 1.0.1
- 2.0.0
- 2.0.1
author: Noam Lewis
basic-deps:
  aeson: '>=0'
  base: '>=4.5.0 && <5'
  bytestring: '>=0'
  containers: '>=0'
  curl: '>=0'
  hashable: '>=0'
  hxt: '>=0'
  hxt-curl: '>=0'
  hxt-expat: '>=0'
  hxt-tagsoup: '>=0'
  regex-posix: '>=0'
  tagsoup: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
  xml-to-json: '>=0'
changelog: ''
changelog-type: ''
description: "# xml-to-json\n\nFast & easy library & command line tool for converting
  XML files to JSON.\n\n## **Heads up!** The project has been split into two projects.
  See **[xml-to-json-fast](https://github.com/sinelaw/xml-to-json-fast)** for a low-memory-usage
  version that has less features.\n\n\n## Contents\n* [Overview](#overview)\n* [Installation](#installation)\n*
  [Usage](#usage)\n* [Example output](#example-output)\n* [Performance](#performance)\n\n\n##
  Overview\n\nxml-to-json converts xml to json. It includes a Haskell library and
  a command-line tool.\n\nxml-to-json ships with two different executables:\n\n1.
  `xml-to-json-fast` (\"fast\") uses a lot less memory, but you can't control the
  output. Can be used on XML files of any size.\n2. `xml-to-json` (\"classic\") provides
  some control over json output format, but uses a lot of memory. Suitable for smaller
  files.\n\n### \"Fast\" xml-to-json-fast\n\nThe so-called \"fast\" version (which
  uses a lot less memory) has been forked into a separate project, [xml-to-json-fast](https://github.com/sinelaw/xml-to-json-fast).\n\n###
  \"Classic\" xml-to-json\n\nThe fully featured \"classic\" `xml-to-json` provides
  compact json output that's designed to be easy to store and process using JSON-based
  databases, such as [mongoDB](http://www.mongodb.org/) or [CouchDB](http://couchdb.apache.org/).
  In fact, the original motivation for xml-to-json was to store and query a large
  (~10GB) XML-based dataset, using an off-the-shelf scalable JSON database.\n\nWhen
  using \"classic\" xml-to-json, the input XML must be valid.\n\nCurrently the xml-to-json
  processes XMLs according to lossy rules designed to produce sensibly minimal output.
  If you need to convert without losing information at all consider something like
  the XSLT offered by the [jsonml project](http://www.jsonml.org/). Unlike jsonml,
  this tool - xml-to-json - produces json output similar (but not identical) to the
  [xml2json-xslt project](http://code.google.com/p/xml2json-xslt/).\n\n#### Implementation
  Notes\n\nxml-to-json is implemented in [Haskell](http://www.haskell.org).\n\nAs
  of this writing, xml-to-json uses [hxt](http://hackage.haskell.org/package/hxt)
  with the [expat](http://expat.sourceforge.net/)-based [hxt-expat](http://hackage.haskell.org/package/hxt-expat)
  parser. The pure Haskell parsers for hxt [all seem to have memory issues](http://stackoverflow.com/q/2292729/562906)
  which hxt-expat doesn't.\n\n\n## Installation\n\n**Note for Windows users**: Only
  local files, not URLs, are supported as command line arguments. This is because
  **curl** doesn't compile on my (windows + cygwin) machine out-of-the-box.\n\nTo
  install the **release version**: Since xml-to-json is implemented in Haskell, \"all
  you need to do\" is install the latest [Haskell platform](http://www.haskell.org/platform/)
  for your system, and then run:\n\n```\ncabal update\ncabal install xml-to-json\n```\n\nTo
  install **from source**: Clone this repository locally, and then (assuming you have
  [Haskell platform](http://www.haskell.org/platform/) installed) run `cabal install`:\n\n```\ncd
  xml-to-json\ncabal install\n```\n\n## Usage\n\n### Basic usage\n\nJust run the tool
  with the filename as a single argument, and direct the stdout to a file or a pipe:\n\n>
  xml-to-json myfile.xml > myfile.js\n\n\n### Classic `xml-to-json`: Advanced Usage\n\nUse
  the `--help` option to see the full command line options.\n\nHere's a (possibly
  outdated) snapshot of the `--help` output:\n\n```\nUsage: <program> [OPTION...]
  files...\n  -h      --help                      Show this help\n  -t TAG  --tag-name=TAG
  \             Start conversion with nodes named TAG (ignoring all parent nodes)\n
  \ -s      --skip-roots                Ignore the selected nodes, and start converting
  from their children\n                                      (can be combined with
  the 'start-tag' option to process only children of the matching nodes)\n  -a      --as-array
  \                 Output the resulting objects in a top-level JSON array\n  -m      --multiline
  \                When using 'as-array' output, print each of top-level json object
  on a seperate line.\n                                      (If not using 'as-array',
  this option will be on regardless, and output is always line-seperated.)\n          --no-collapse-text=PATTERN
  \ For elements with tag matching regex PATTERN only:\n\t  \t\t\t      Don't collapse
  elements that only contain text into a simple string property.\n                                      Instead,
  always emit '.value' properties for text nodes, even if an element contains only
  text.\n                                      (Output 'schema' will be more stable.)\n
  \         --no-ignore-nulls           Don't ignore nulls (and do output them) in
  the top level of output objects\n```\n\n## Example output\n\nInput file:\n\n```\n<?xml
  version=\"1.0\"?>\n<!DOCTYPE Test>\n<Tests>\n  <Test Name=\"The First Test\">\n
  \   <SomeText>Some simple text</SomeText>\n    <SomeMoreText>More text</SomeMoreText>\n
  \   <Description Format=\"FooFormat\">\nJust a dummy\n<!-- comment -->\nXml file.\n
  \   </Description>\n  </Test>\n  <Test Name=\"Second\"/>\n</Tests>\n```\n\nJSON
  output using default settings:\n```\n{\"Tests\":{\"Test\":[{\"Name\":\"The First
  Test\",\"SomeText\":\"Some simple text\",\"Description\":{\"Format\":\"FooFormat\",\"value\":\"Just
  a dummy\\n\\nXml file.\"}},{\"Name\":\"Second\"}]}}\n```\n\nFormatted for readability
  (not the actual output):\n\n```\n{\n   \"Tests\":{\n      \"Test\":[\n         {\n
  \           \"Name\":\"The First Test\",\n\t    \"SomeMoreText\":\"More text\",\n
  \           \"SomeText\":\"Some simple text\",\n            \"Description\":{\n
  \              \"Format\":\"FooFormat\",\n               \"value\":\"Just a dummy\\n\\nXml
  file.\"\n            }\n         },\n         {\n            \"Name\":\"Second\"\n
  \        }\n      ]\n   }\n}\n```\n\nNote that currently xml-to-json does not retain
  the order of elements / attributes.\n \nUsing the various options you can control
  various aspects of the output such as:\n\n* At which top-level nodes the conversion
  starts to work (-t)\n* Whether to wrap the output in a top-level JSON array,\n*
  Whether or not to collapse simple string elements, such as the <SomeText> element
  in the example, into a simple string property (you can specify a regular expression
  pattern to decide which nodes to collapse)\n* And more...\n\nUse the `--help` option
  to see a full list of options.\n\n\n## Performance of \"classic\" xml-to-json\n\nThe
  \"classic\" xml-to-json cannot operate on large files. However, it is fast when
  operating on multiple small files. For large XML files, the speed on a core-i5 machine
  is about 2MB of xml / sec, with a 100MB XML file resulting in a 56MB json output.
  It took about 10 minutes to process 1GB of xml data. The main performance limit
  is memory - only one single-threaded process was running since every single large
  file (tens of megabytes) consumes a lot of memory - about 50 times the size of the
  file.\n\nA few simple tests have shown this to be at least twice as fast as [jsonml's
  xlst-based converter](http://www.jsonml.org/xml/) (however, the outputs are not
  similar, as stated above).\n\nCurrently the program processes files serially. If
  run in parallel on many small XML files (<5MB) the performance becomes cpu-bound
  and processing may be *much* faster, depending on the architecture. A simple test
  showed performance of about 5MB / sec (on the same core-i5).\n\n\n"
description-type: markdown
hash: cdb650659931c9a8ebbdc6cb6a77a5b8337af964be7483f9e88ba67cbe59f87a
homepage: https://github.com/sinelaw/xml-to-json
latest: 2.0.1
license-name: MIT
maintainer: jones.noamle@gmail.com
synopsis: Library and command line tool for converting XML files to json
test-bench-deps: {}
