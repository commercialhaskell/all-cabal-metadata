homepage: https://github.com/MrcJkb/xml-prettify-text
changelog-type: markdown
hash: dd7d1f251db84c8070b6c7e3b25262db19a28d2025415259f895df7e3ac4ecaf
test-bench-deps:
  base: '>=4.14.3.0 && <5'
  tasty-golden: '>=2.3.4 && <2.4'
  text: '>=1.2.4.1 && <1.3'
  filepath: '>=1.4.2.1 && <1.5'
  protolude: '>=0.3.0 && <0.4'
  gauge: -any
  xml-prettify-text: -any
  tasty: '>=1.4.2 && <1.5'
maintainer: Marc Jakobi <mrcjkb89@outlook.com>
synopsis: XML pretty printer
changelog: |
  # Changelog

  `xml-prettify-text` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 1.0.0.1

  * Use [`with-utf8`](https://hackage.haskell.org/package/with-utf8) to fix encoding error in command-line app.

  ## 1.0.0.0

  * Initial release version.

  ## 0.0.0.0

  * Initially created.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/MrcJkb/xml-prettify-text/releases
basic-deps:
  base: '>=4.14.3.0 && <5'
  text: '>=1.2.4.1 && <1.3'
  with-utf8: '>=1.0.2.3 && <1.1'
  text-show: '>=3.9.2 && <3.10'
  protolude: '>=0.3.0 && <0.4'
  xml-prettify-text: -any
  mtl: '>=2.2.2 && <2.3'
  optparse-applicative: '>=0.16.1.0 && <0.17'
all-versions:
- 1.0.0.1
author: Marc Jakobi
latest: 1.0.0.1
description-type: markdown
description: "# xml-prettify-text\n\nXML pretty printer based on [xml-prettify](https://github.com/rosenbergdm/xml-prettify)
  by David M. Rosenberg. Modified to work with `Text` instead of `String` and tuned
  for improved performance.\n\n[![Build status](https://img.shields.io/travis/MrcJkb/xml-prettify-text.svg?logo=travis)](https://app.travis-ci.com/MrcJkb/xml-prettify-text)\n[![Hackage](https://img.shields.io/hackage/v/xml-prettify-text.svg?logo=haskell)](https://hackage.haskell.org/package/xml-prettify-text)\n[![Stackage
  Lts](http://stackage.org/package/xml-prettify-text/badge/lts)](http://stackage.org/lts/package/xml-prettify-text)\n[![Stackage
  Nightly](http://stackage.org/package/xml-prettify-text/badge/nightly)](http://stackage.org/nightly/package/xml-prettify-text)\n[![GPL-2.0-only
  license](https://img.shields.io/badge/license-GPL--2.0--only-blue.svg)](LICENSE)\n\n##
  Usage ##\n```bash\nUsage: xml-prettify ((-f|--file FILE_NAME) | (-t|--text XML_TEXT))\n
  \                   [(-o|--out FILE_NAME) | (-c|--console)]\n                    [--indent-style
  <TAB | SPACE SIZE>] [--eol <LF | CR | CRLF>]\n  Pretty-prints XML text\n\nAvailable
  options:\n  -f,--file FILE_NAME      XML file to pretty-print\n  -t,--text XML_TEXT
  \      XML text to pretty-print\n  -o,--out FILE_NAME       XML file to pretty-print
  to\n  -c,--console             Output the pretty-printed XML to the console\n  --indent-style
  <TAB | SPACE SIZE>\n                           The indent style (TAB or SPACE\n
  \                          INDENT_SIZE) (default: SPACE 2)\n  --eol <LF | CR | CRLF>
  \  The line-break style: Line Feed (LF), Carriage Return\n                           (CR),
  or both (CRLF) (default: LF)\n  -h,--help                Show this help text\n  ```\n\n##
  Motivation ##\nWhy re-implement [xml-prettify](https://github.com/rosenbergdm/xml-prettify)?
  \n- I am not satisfied with the [Text.PrettyPrint](https://hackage.haskell.org/package/pretty-1.1.3.6/docs/Text-PrettyPrint.html#t:Doc)
  output.\n- `xml-prettify` produces good output, but with poor performance.\n- `xml-prettify`
  appears not to be maintained (I haven't been able to use it as a library in modern
  projects).\n- Some more configurability (see TODOs) would be great.\n- A good project
  for me to practise profiling and benchmarking in Haskell.\n\n## TODO ##\n- [x] Port
  xml-prettify for use with Text\n- [x] Refactor for better readability\n- [x] Implement
  golden tests\n- [x] Profile, benchmark & squeeze performance\n- [x] Add options
  for specifying newlines, indent-style, indent-size, etc.\n- [x] Create cli app\n\n"
license-name: GPL-2.0-only
