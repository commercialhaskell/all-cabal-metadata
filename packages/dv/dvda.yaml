all-versions:
- '0.1'
- 0.1.1
- 0.2.0
- 0.2.1
- 0.2.2
- '0.3'
- 0.3.0.1
- 0.3.1
- 0.3.2
- 0.3.2.1
- '0.4'
author: Greg Horn
basic-deps:
  base: '>=4 && <5'
  containers: '>=0.5'
  hashable: '>=1.2'
  hashtables: '>=1.1.0'
  mtl: '>=0'
  unordered-containers: '>=0.2'
  vector: '>=0.10'
changelog: ''
changelog-type: ''
description: |-
  dvda == DVDA Verifiably Differentiates Algorithmically

  This library provides a symbolic scalar type `Dvda.Expr` which is
  manipulated mathematically through its Num\/Fractional\/Floating instances.

  Automatic differentiation can be performed with `Dvda.AD`. Expressions can be turned into
  computational graphs (@FunGraph@s) using toFunGraph. This uses unsafe reification for performance reasons,
  and explicit common subexpression elimination using hashing can be performed using `Dvda.CSE`

  @FunGraph@s can be converted to C code and MATLAB mex functions. In the future there will be JIT compilation
  so you can call these functions efficiently from Haskell.

  Pretty graphviz plots!

  To get started check out the source for `Dvda.Examples`
description-type: haddock
hash: 1cd3ef7761e90d9755698cbf741323503af0df9f579e1e2a7529d931e080eb66
homepage: ''
latest: '0.4'
license-name: BSD-3-Clause
maintainer: gregmainland@gmail.edu
synopsis: Efficient automatic differentiation and code generation
test-bench-deps:
  QuickCheck: '>=0'
  ad: '>=0'
  base: '>=0'
  containers: '>=0'
  directory: '>=0'
  dvda: '>=0'
  fgl: '>=0'
  file-location: '>=0'
  graphviz: '>=0'
  hashable: '>=0'
  hashtables: '>=0'
  mtl: '>=0'
  process: '>=0'
  test-framework: '>=0'
  test-framework-quickcheck2: '>=0'
  unordered-containers: '>=0'
