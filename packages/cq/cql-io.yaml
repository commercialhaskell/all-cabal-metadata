all-versions:
- 0.9.6
- 0.9.7
- 0.10.1
- 0.12.0
- 0.12.1
- 0.12.2
- 0.13.0
- 0.13.1
- 0.13.2
- 0.14.1
- 0.14.2
- 0.14.3
- 0.14.4
- 0.14.5
- 0.15.2
- 0.16.0
- 1.0.0
- 1.0.1
- 1.0.1.1
- 1.1.0
- 1.1.1
- 2.0.0
author: Toralf Wittner
basic-deps:
  base: '>=0'
  cql: '>=0'
  cql-io: '>=0'
changelog: |
  2.0.0
  -----
  - Support multiple control connections with an upper limit and policy-controlled
    priority.
  - Cabal file improvements: bounds, version, etc.
  - Switch from unmaintained cryptonite to crypton
  - Add sufficient API tools for token-routing aware policy:
    - Accessors to lookup the replication for a keyspace, and to get the replicas
      for a given prepared query and its query values.
  - Pass prepared query and values to policy when selecting host
  - Track replication information for keyspaces and nodes
  - Better handling of prepared queries: Prevent re-prepare if the user has
    eagerly prepared a query.
  - Better code sharing between default policies.
  - Host events to pass Hosts, not addresses. This allows policies to better
    handle ups and downs, as well as re-numbering. It makes it easier to write a
    policy that prefers a given DC.
  - Track peers more carefully, and track them via UUID, not address.
  - Allow connection upgrading via min-max protocol version. Instead of setting a
    fixed protocol version, allow setting a min and max, and upgrade when
    possible.

  Breaking Changes:
  - Policy has a new `priority` function
  - Policy Events now have `Host`s instead of addresses, except for the new
    `AddrDown` for the case of a `HostDown` CQL event where the `Host` in question
    can't be found.
  - Policy `select` function accepts an additional argument with token-based
    routing information if it is available.
  - Settings has `_minProtoVer` and `_maxProtoVer` instead of `_protoVersion`
  - Settings has an additional field `_maxControlConnections`

  Porting Guide:
    If using one of the included policies, the only necessary change should be to
  set a minimum and maximum protocol versions instead of a single version.
    If not using an included policy, an existing policy can be ported by ignoring
  the additional argument to select, and by adjusting the event handler to handle
  `Host`s rather than addresses. Hosts have an address field, so porting should be
  straightforward. However, the changed policy API makes it possible to have a
  token aware routing policy. It's worth taking a look at that while porting. The
  improved `HostEvent` API should make it easier to handle host renumbering more
  gracefully as well.

  1.1.1
  -----
  - Compatibility with `network >= 3`.

  1.1.0
  -----
  - Improve configuration of retry settings and refactor exceptions
    (https://gitlab.com/twittner/cql-io/issues/13).
  - Document and export the 'getResult' function alongside the low-level
    query API.
  - Replace monad-control with unliftio.
  - Remove dependency on tinylog, introducing a minimal logging interface that can
    be hooked up to any logging library. Tinylog integration has moved to
    the new cql-io-tinylog library.

  1.0.1.1
  -------
  - Add more documentation on queries.

  1.0.1
  ------
  - Address an issue whereby Cassandra 'Error' responses might be mistakenly
    thrown by the (internal) withRetries function, possibly leading to
    problems with the automatic (re-)preparation of prepared queries upon
    'Unprepared' server responses.

  1.0.0
  ------
  - Add support for CQL V4 binary protocol.
  - Remove support for CQL V2 binary protocol.
  - Add support for SASL-based authentication handlers.
  - Bugfix: Retries for error responses were not handled correctly.
  - Update and extend test suite.
  - Require `cql >= 4.0`

  0.16.0
  ------
  - Update Cabal settings to allow `cql` >= 3.1

  0.15.2
  ------
  - Update `async` dependency

  0.15.1
  ------
  - Use `retry >= 0.7` instead of internal module

  0.15.0
  ------
  - Add experimental TLS support

  0.14.5
  ------
  - Add `trans` to execute "lightweight transactions"

  0.14.4
  ------
  - Update dependencies

  0.14.3
  ------
  - Bugfixes

  0.14.2
  ------
  - Export `PrepareStrategy` from `Database.CQL.IO`

  0.14.1
  ------
  - Support for prepared queries
  - Bugfixes
  - `Control.Retry` module update to match version 0.6

  0.13.2
  ------
  - Retry on `IOException`
  - Update dependencies

  0.13.1
  ------
  - Support `monad-control` 1.*

  0.13.0
  ------
  - Add `setMaxRecvBuffer` option

  0.12.2
  ------
  - Update dependencies

  0.12.1
  ------
  - Update dependencies

  0.12.0
  ------
  - Remove wait-queue
  - Add more type-class instances

  0.10.0
  ------
  - Add `MonadClient` type-class
  - Add retry settings

  0.9.7
  -----
  - Bugfix release

  0.9.6
  -----
  - Initial release
changelog-type: text
description: |+
  CQL Cassandra driver
  ====================

  This library uses the [cql](http://hackage.haskell.org/package/cql) library
  which implements Cassandra's CQL protocol and complements it with the
  neccessary I/O operations. The feature-set includes:

  *Node discovery*

  The driver discovers nodes automatically from a small set of bootstrap nodes.

  *Customisable load-balancing policies*

  In addition to pre-built LB policies such as round-robin, users of this
  library can provide their own policies if desired.

  *Support for connection streams*

  Requests can be multiplexed over a few connections.

  *Customisable retry settings*

  Support for default retry settings as well as local overrides per query.

  *Prepared queries*

  Prepared queries are an optimisation which parse and prepare a query only
  once on Cassandra nodes but execute it many times with different concrete
  values.

  *TLS support*

  Client to node communication can optionally use transport layer security
  (using HsOpenSSL).

  Testing
  =======

  The tests assume that a CQL cluster is available and running. The host should
  either be available at localhost, or the environment variable CASSANDRA_HOST. To
  spin up a single host for a simple test, you can do the following:

  ```
  docker run --rm -ti --cpus 4 --memory 8G --name cql-io-cassandra \
    -p ::1:9042:9042 -v /tmp/cql-io-test-data:/var/lib/cassandra \
    --env MAX_HEAP_SIZE=1536M --env NEW_HEAP_SIZE=256M cassandra:5.0.5-jammy
  ```

  License
  =======

  See [LICENSE](./LICENSE).

  Cassandra Logo License
  ======================

  Copyright Â© 2018 Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at https://www.apache.org/licenses/LICENSE-2.0. Unless required by
  applicable law or agreed to in writing, software distributed under the License
  is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.

description-type: markdown
hash: a55739f946d44d2cb82fc70c290e86020dda0b17f71178d5a3a42fa3b1763543
homepage: https://github.com/iteratee/cql-io
latest: 2.0.0
license-name: MPL-2.0
maintainer: Kyle Butt <kyle@iteratee.net>
synopsis: Cassandra CQL client.
test-bench-deps:
  Decimal: '>=0'
  QuickCheck: '>=0'
  async: '>=0'
  base: '>=0'
  containers: '>=0'
  cql: '>=0'
  cql-io: '>=0'
  formatting: '>=0'
  iproute: '>=0'
  mtl: '>=0'
  primes: '>=0'
  raw-strings-qq: '>=0'
  tasty: '>=0.11'
  tasty-hunit: '>=0.9'
  tasty-quickcheck: '>=0.8'
  text: '>=0'
  time: '>=0'
  uuid: '>=0'
...
