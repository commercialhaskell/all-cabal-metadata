all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.2.0.0
author: Sebastian Galkin
basic-deps:
  base: '>=4.10.0.0 && <4.13'
  binary: '>=0.8.5.1'
  bytestring: '>=0.10.8.0'
  deepseq: '>=1.4.3.0'
  filepath: '>=1.4.1.2'
  hbf: '>=0'
  optparse-applicative: '>=0.14.0.0'
  parsec: '>=3.1.13.0'
  primitive: '>=0.6.2.0'
  text: '>=1.2.2.0'
  transformers: '>=0.5.2.0'
  vector: '>=0.12.0.1'
changelog: |
  # Revision history for hbf

  ## 0.1.0.0 -- 2018-06-25

  First version. Compiler working. VM working.

  ## 0.1.0.1 -- 2018-06-25

  Minor changes to README and metadata

  ## 0.1.0.2 -- 2018-06-26

  Minor changes to README and travis script

  ## 0.2.0.0 -- 2018-07-04

    - Use strict StateT for tests.
    - Fix hpack escape for ghc-options
changelog-type: markdown
description: "# HBF [![Build Status](https://travis-ci.org/paraseba/hbf.svg?branch=master)](https://travis-ci.org/paraseba/hbf)
  [![Hackage](https://img.shields.io/hackage/v/hbf.svg)](https://hackage.haskell.org/package/hbf)\n\n\n\nAn
  unoptimized Brainfuck optimizing compiler and evaluator.\n\n[HBF](https://github.com/paraseba/hbf)
  can compile standard Brainfuck code into an optimized\nIntermediate Representation
  (IR). This IR can later be executed for faster Brainfuck program\nevaluation.\n\n\n##
  Getting Started\n\n### Installing\nUse your preferred method for installing HBF
  from [Hackage](https://hackage.haskell.org/package/hbf).\nIf you prefer to build
  from source you can use cabal.\n\n### Usage\n\nLet's say you have a Brainfuck program
  in the file `mandelbrot.bf`, for example,\nyou can get one [here](https://github.com/pablojorge/brainfuck/blob/master/programs/mandelbrot.bf)\n\nYou
  can compile the program to the Intermediate Representation using the `hbfc` executable
  provided by this project:\n\n```\nhbfc mandelbrot.bf\n```\n\nThat will create a
  file `mandelbrot.bfc` in the same directory. If you want the output in a different\npath
  you cane use `--output` option to `hbfc`\n\nNow, you can run the compiled program:\n\n```\nhbf
  mandelbrot.bfc\n```\n\nand get something like:\n\n![Mandelbrot](https://raw.githubusercontent.com/paraseba/hbf/e86d1ffebcb0795a7c2c6081e2dd27c4154db066/mandelbrot.png)\n\n\nThere
  are several options  to both the compiler and the evaluator, to modify levels of
  optimization, output and others. Try\n`--help` to learn more.\n\n\n## Hacking\nHBF
  has heavily documented code. You can read the documentation on [Hackage](https://hackage.haskell.org/package/hbf).\n\nAll
  the optimizations are implemented in the [compiler](https://hackage.haskell.org/package/hbf/docs/HBF-Compiler.html),
  \nfor an example, you can look at the documentation for\n[`mulOpt`](https://hackage.haskell.org/package/hbf-0.1.0.1/docs/HBF-Compiler.html#v:mulOpt).\n\n\n###
  Running the tests\n\n```\ncabal test\n```\n\nTest coverage report for the last build
  can be found [here](https://paraseba.github.io/hbf/coverage/hpc_index.html).\n\n###
  Running the benchmarks\n\n```\ncabal bench\n```\n\n## License\n\nThis project is
  licensed under the GPL-3 License - see the [LICENSE](LICENSE) file for details\n\nCopyright
  2018 Sebastian Galkin.\n\n## Acknowledgments\n\nThis work is based on the excellent
  project [bfoptimization](https://github.com/matslina/bfoptimization) by matslina:
  \n\n"
description-type: markdown
hash: 361f6cd2447c9d1d8252c09c7f7c7357dd29f0f227fdb4b45bfb5f270f637070
homepage: https://github.com/paraseba/hbf
latest: 0.2.0.0
license-name: GPL-3.0-only
maintainer: paraseba@gmail.com
synopsis: An optimizing Brainfuck compiler and evaluator
test-bench-deps:
  HUnit: '>=1.3.1.0'
  base: '>=4.10.0.0 && <4.13'
  binary: '>=0.8.5.1'
  bytestring: '>=0.10.8.0'
  criterion: '>=1.1.4.0'
  deepseq: '>=1.4.3.0'
  doctest: '>=0'
  filepath: '>=1.4.1.2'
  hbf: '>=0'
  hedgehog: '>=0.5'
  hedgehog-checkers: '>=0.1.0.0'
  optparse-applicative: '>=0.14.0.0'
  parsec: '>=3.1.13.0'
  primitive: '>=0.6.2.0'
  smallcheck: '>=1.1'
  tasty: '>=0.11.2.1'
  tasty-discover: '>=2.0.0'
  tasty-hedgehog: '>=0.1.0.0'
  tasty-hunit: '>=0.9.2'
  tasty-smallcheck: '>=0.8'
  temporary: '>=1.2.0.3'
  text: '>=1.2.2.0'
  transformers: '>=0.5.2.0'
  vector: '>=0.12.0.1'
