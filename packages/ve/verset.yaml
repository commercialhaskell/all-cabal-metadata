homepage: https://github.com/andrevdm/verset#readme
changelog-type: ''
hash: cefa1df940766f2cfa39220504d43d0f20675c7c42b55b6b80f353901c677801
test-bench-deps: {}
maintainer: andre@andrevdm.com
synopsis: Small alternative prelude
changelog: ''
basic-deps:
  bytestring: '>=0.10.10 && <0.12'
  extra: '>=1.7.9 && <1.8'
  base: '>=4.9 && <5'
  time: '>=1.9.3 && <1.10'
  text: '>=1.2.4 && <1.3'
  uuid: '>=1.3.15 && <1.4'
  containers: '>=0.6.0 && <0.7'
  mtl: '>=2.2.2 && <2.3'
  safe: '>=0.3.19 && <0.4'
all-versions:
- 0.0.1.5
author: Andre Van Der Merwe
latest: 0.0.1.5
description-type: markdown
description: "# Verset\n\n[![Haskell-CI](https://github.com/andrevdm/verset/actions/workflows/haskell-ci.yml/badge.svg?branch=master)](https://github.com/andrevdm/verset/actions/workflows/haskell-ci.yml)\n\nSmall
  Haskell alternative prelude based on [Protolude](https://hackage.haskell.org/package/protolude)
  and [Intro](https://hackage.haskell.org/package/intro)\n\n## Why\n(*At least it
  is not a monad tutorial*)\n\nThere are some great alternative preludes around but
  I find most of them either too large or too opinionated. \nWhat I'd rather have
  is a minimal prelude and then layer additional changes over it. \nObviously if the
  other preludes suit you better, then Verset is not for you :) \n\n## Goals\n - Very
  small\n - Minimal dependencies\n - Removes partial functions where possible\n -
  It be easy to switch from `Verset` to other preludes\n\n## Notes\n - `catch`, `finally`
  etc are not exported. This makes it easier to use e.g. `Control.Exception.Safe`,
  `UnliftIO.Exception` etc for safer exception without having to hide all the defaults\n
  - No transformers are exposed but `lift` is\n - Simple `IsString` helpers (from
  Protolude)\n - `identity` rather than `id` (from Protolude)\n - `String` is not
  exported use `[Char]`. This is to discourage its use.\n\n\n### If you want to reduce
  imports\n\nIf you want to use Verset but would rather avoid imports in all your
  modules. There are at least two optios\n\n1) Create a module with the imports you
  always use and import that along with Verset\n\n```haskell\n{-# LANGUAGE NoImplicitPrelude
  #-}\n\nmodule Verse\n    ( (Control.Lens.^.)\n    , (Control.Lens.^..)\n    ) where\n\nimport
  \          Verset\nimport qualified Control.Lens\n```\n\n```haskell\nmodule Demo
  where\n  import           Verset\n  import           Verse\n  import qualified Whatever
  as W\n```\n\n\n2) Similar to the method above but reexport verset\n\n```haskell\n{-#
  LANGUAGE NoImplicitPrelude #-}\n\nmodule Verse\n    ( module Verset\n    , (Control.Lens.^.)\n
  \   , (Control.Lens.^..)\n    ) where\n\nimport           Verset\nimport qualified
  Control.Lens\n```\n\n```haskell\nmodule Demo where\n  import           Verse\n  import
  qualified Whatever as W\n```\n\n#### But...\n\nPersonally I happy with imports as
  I think it makes the code more explicit. However if you want to avoid them using
  something like the above methods I think there are still benefits to Verset.\n  -
  Verset is not getting in your way.\n  - You can define company wide defaults, project
  wide defaults or both\n\n\n## Compatibility\n\nTested with GHC 8.7.10, 9.0.1 and
  9.2.1\n"
license-name: MIT
