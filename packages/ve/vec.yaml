all-versions:
- '0'
- '0.1'
- 0.1.1
- 0.1.1.1
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- 0.5.1
author: Oleg Grenrus <oleg.grenrus@iki.fi>
basic-deps:
  QuickCheck: ^>=2.14.2 || ^>=2.15.0.1
  adjunctions: ^>=4.4.2
  base: '>=4.12.0.0 && <4.22'
  boring: ^>=0.2.2
  deepseq: '>=1.4.4.0 && <1.6'
  distributive: ^>=0.6.2
  fin: ^>=0.3.1
  hashable: ^>=1.4.4.0 || ^>=1.5.0.0
  indexed-traversable: ^>=0.1.4
  semigroupoids: ^>=6.0.1
  transformers: '>=0.5.6.2 && <0.7'
changelog: |
  # Revision history for vec

  ## 0.5.1

  - Support GHC-8.6.5...9.10.1

  ## 0.5

  - Remove PigeonHole module. It didn't work well.

  ## 0.4.1

  - Add `boring` instances
  - Add `dfoldr`, `dfoldl` and `dfoldl'`
  - Implement `Lazy.reverse` using `dfoldl`

  ## 0.4

  - Support `fin-0.2`
  - Add `indexed-traversable` instances
  - Explicitly mark all modules as Safe or Trustworthy.
  - Add `Eq1`, `Ord1` and `Show1` instances
  - Add `init`, `last` and `toNonEmpty`

  ## 0.3.0.1

  - Fix `product`

  ## 0.3

  - Split `lens` utilities into [`vec-lens`](https://hackage.haskell.org/package/vec-lens) package.
  - Add `snoc` and `reverse` operations
  - Add `repeat`
  - Drop dependency on `base-compat`
  - Add explicit `tabulate`

  ## 0.2

  - Add `Data.Vec.DataFamily.SpineStrict.gix`
  - Add `Data.Vec.DataFamily.SpineStrict.ix` requires `InlineInduction`

  ## 0.1.1.1

  - Use `fin-0.1`

  ## 0.1.1

  - Add `Data.Vec.DataFamily.SpineStrict` module
  - Add `Data.Vec.DataFamily.SpineStrict.Pigeonhole` module:
    this let us define `Representable` in a handy way.

  ## 0.1

  - Reverse dependencies with `boring`.
  - GHC-8.4.1 support

  ## 0

  - First version. Released on an unsuspecting world.
changelog-type: markdown
description: |-
  This package provides length-indexed (sized) lists, also known as vectors.

  @
  data Vec n a where
  \    VNil  :: Vec 'Nat.Z a
  \    (:::) :: a -> Vec n a -> Vec ('Nat.S n) a
  @

  The functions are implemented in four flavours:

  * __naive__: with explicit recursion. It's simple, constraint-less, yet slow.

  * __pull__: using @Fin n -> a@ representation, which fuses well,
  but makes some programs hard to write. And

  * __data-family__: which allows lazy pattern matching

  * __inline__: which exploits how GHC dictionary inlining works, unrolling
  recursion if the size of 'Vec' is known statically.

  As best approach depends on the application, @vec@ doesn't do any magic
  transformation. Benchmark your code.

  This package uses [fin](https://hackage.haskell.org/package/fin), i.e. not @GHC.TypeLits@, for indexes.

  For @lens@ or @optics@ support see [vec-lens](https://hackage.haskell.org/package/vec-lens) and [vec-optics](https://hackage.haskell.org/package/vec-optics) packages respectively.

  See [Hasochism: the pleasure and pain of dependently typed haskell programming](https://doi.org/10.1145/2503778.2503786)
  by Sam Lindley and Conor McBride for answers to /how/ and /why/.
  Read [APLicative Programming with Naperian Functors](https://doi.org/10.1007/978-3-662-54434-1_21)
  by Jeremy Gibbons for (not so) different ones.

  === Similar packages

  * [linear](https://hackage.haskell.org/package/linear) has 'V' type,
  which uses 'Vector' from @vector@ package as backing store.
  @Vec@ is a real GADT, but tries to provide as many useful instances (upto @lens@).

  * [vector-sized](https://hackage.haskell.org/package/vector-sized)
  Great package using @GHC.TypeLits@. Current version (0.6.1.0) uses
  @finite-typelits@ and @Int@ indexes.

  * [sized-vector](https://hackage.haskell.org/package/sized-vector) depends
  on @singletons@ package. @vec@ isn't light on dependencies either,
  but try to provide wide GHC support.

  * [fixed-vector](https://hackage.haskell.org/package/fixed-vector)

  * [sized](https://hackage.haskell.org/package/sized) also depends
  on a @singletons@ package. The @Sized f n a@ type is generalisation of
  @linear@'s @V@ for any @ListLike@.

  * [clash-prelude](https://hackage.haskell.org/package/clash-prelude)
  is a kitchen sink package, which has @CLaSH.Sized.Vector@ module.
  Also depends on @singletons@.
description-type: haddock
hash: 45df4cf52501cbde9badac82d3cf945070c87c8cc8e2301d3904e066fc828631
homepage: https://github.com/phadej/vec
latest: 0.5.1
license-name: BSD-3-Clause
maintainer: Oleg.Grenrus <oleg.grenrus@iki.fi>
synopsis: 'Vec: length-indexed (sized) list'
test-bench-deps:
  base: '>=0'
  criterion: ^>=1.6.3.0
  fin: '>=0'
  inspection-testing: ^>=0.5.0.3 || ^>=0.6
  tagged: '>=0'
  vec: '>=0'
  vector: '>=0'
