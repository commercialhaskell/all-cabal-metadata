all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- '0.2'
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.3.1
- 0.2.3.2
- 0.2.3.3
- 0.2.3.4
- 0.2.3.5
- 0.2.4
- 0.2.5
- 0.2.5.1
- 0.2.5.2
author: Don Stewart
basic-deps:
  base: '>=4.5 && <5'
  binary: '>=0.5 && <0.11'
  vector: '>=0.6 && <0.14'
changelog: ''
changelog-type: ''
description: |-
  Instances for Binary for the types defined in the vector package,
  making it easy to serialize vectors to and from disk. We use the
  generic interface to vectors, so all vector types are supported.
  Specific instances are provided for unboxed, boxed and storable
  vectors.
  .
  To serialize a vector:
  .
  > *Data.Vector.Binary> let v = Data.Vector.fromList [1..10]
  > *Data.Vector.Binary> v
  > fromList [1,2,3,4,5,6,7,8,9,10] :: Data.Vector.Vector
  > *Data.Vector.Binary> encode v
  > Chunk "\NUL\NUL\NUL\NUL\NUL...\NUL\NUL\NUL\t\NUL\NUL\NUL\NUL\n" Empty
  .
  Which you can in turn compress before writing to disk:
  .
  > compress . encode $ v
  > Chunk "\US\139\b\NUL\NUL\N...\229\240,\254:\NUL\NUL\NUL" Empty
  .
  Try the cereal-vector package if you are looking for Data.Serialize
  instances.
description-type: haddock
hash: 9ba8f2c5a9527821ab47bbd991dd7b7533bcaa68662c84c4f16b871655117ceb
homepage: https://github.com/haskell/vector-binary-instances
latest: 0.2.5.2
license-name: BSD-3-Clause
maintainer: dons00@gmail.com, bos@serpentine.com, Ben Gamari <ben@smart-cactus.org>
synopsis: Instances of Data.Binary for vector
test-bench-deps:
  base: '>=4.7'
  binary: '>=0'
  bytestring: '>=0'
  deepseq: '>=0'
  tasty: '>=0'
  tasty-bench: '>=0'
  tasty-quickcheck: '>=0'
  vector: '>=0'
  vector-binary-instances: '>=0'
