all-versions:
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.5.0.1
- 0.6.0.0
- 0.6.0.1
- 0.6.0.2
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
author: Yann Herklotz
basic-deps:
  DRBG: '>=0.5 && <0.6'
  array: '>=0.5 && <0.6'
  base: '>=4.7 && <5'
  binary: '>=0.8.5.1 && <0.9'
  blaze-html: '>=0.9.0.1 && <0.10'
  bytestring: '>=0.10 && <0.11'
  cryptonite: '>=0.25 && <0.27'
  deepseq: '>=1.4.3.0 && <1.5'
  exceptions: '>=0.10.0 && <0.11'
  fgl: '>=5.6 && <5.8'
  fgl-visualize: '>=0.1 && <0.2'
  filepath: '>=1.4.2 && <1.5'
  gitrev: '>=1.3.1 && <1.4'
  hedgehog: '>=1.0 && <1.2'
  lens: '>=4.16.1 && <4.19'
  lifted-base: '>=0.2.3 && <0.3'
  memory: '>=0.14 && <0.16'
  monad-control: '>=1.0.2 && <1.1'
  mtl: '>=2.2.2 && <2.3'
  optparse-applicative: '>=0.14 && <0.16'
  parsec: '>=3.1 && <3.2'
  prettyprinter: '>=1.2.0.1 && <1.7'
  random: '>=1.1 && <1.2'
  recursion-schemes: '>=5.0.2 && <5.2'
  shakespeare: '>=2 && <2.1'
  shelly: '>=1.8.0 && <1.10'
  statistics: '>=0.14.0.2 && <0.16'
  template-haskell: '>=2.13.0 && <2.16'
  text: '>=1.2 && <1.3'
  time: '>=1.8.0.2 && <1.10'
  tomland: '>=1.0 && <1.3'
  transformers: '>=0.5 && <0.6'
  transformers-base: '>=0.4.5 && <0.5'
  unordered-containers: '>=0.2.10 && <0.3'
  vector: '>=0.12.0.1 && <0.13'
  verismith: '>=0'
changelog: ''
changelog-type: ''
description: "# Verismith [![Build Status](https://travis-ci.com/ymherklotz/verismith.svg?token=qfBKKGwxeWkjDsy7e16x&branch=master)](https://travis-ci.com/ymherklotz/verismith)\n\nVerilog
  Fuzzer to test the major verilog compilers by generating random, valid and deterministic
  Verilog.\n\nIt currently supports the following synthesis tools:\n\n- [Yosys](http://www.clifford.at/yosys/)\n-
  [Xst](https://www.xilinx.com/support/documentation/sw_manuals/xilinx11/ise_c_using_xst_for_synthesis.htm)\n-
  [Vivado](https://www.xilinx.com/products/design-tools/ise-design-suite.html)\n-
  [Quartus](https://www.intel.com/content/www/us/en/programmable/downloads/download-center.html)\n\nand
  the following simulator:\n\n- [Icarus Verilog](http://iverilog.icarus.com)\n\n##
  Supported Verilog Constructs\n\nThe fuzzer generates combinational and behavioural
  Verilog to test the various tools. The most notable constructs that are supported
  and generated are the following:\n\n- module definitions with parameter definitions,
  inputs and outputs\n- module items, such as instantiations, continuous assignment,
  always blocks,\n  initial blocks, parameter and local parameter declarations\n-
  most expressions, for example concatenation, arithmetic operations, ternary\n    conditional
  operator\n- behavioural code in sequential always blocks\n- behavioural control
  flow such as if-else and for loops\n- declaration of wires and variables of any
  size, signed or unsigned\n- bit selection from wires and variables\n\n## Reported
  bugs\n\n11 bugs have been reported and confirmed to be bugs by the vendors, out
  of which 4 have been fixed. 1 bug has also been found in the Icarus Verilog simulator
  as a side effect of using it to verify equivalence check results.\n\n### Yosys\n\n|
  Type          | Issue                                                      | Confirmed
  | Fixed |\n|---------------|------------------------------------------------------------|-----------|-------|\n|
  Mis-synthesis | [Issue 1531](https://github.com/YosysHQ/yosys/issues/1531) | ✓         |
  ✓     |\n| Mis-synthesis | [Issue 1243](https://github.com/YosysHQ/yosys/issues/1243)
  | ✓         | ✓     |\n| Mis-synthesis | [Issue 1047](https://github.com/YosysHQ/yosys/issues/1047)
  | ✓         | ✓     |\n| Mis-synthesis | [Issue 997](https://github.com/YosysHQ/yosys/issues/997)
  \  | ✓         | ✓     |\n| Crash         | [Issue 993](https://github.com/YosysHQ/yosys/issues/993)
  \  | ✓         | ✓     |\n\n### Vivado\n\n| Type          | Issue                                                                                                                               |
  Confirmed | Fixed |\n|---------------|-------------------------------------------------------------------------------------------------------------------------------------|-----------|-------|\n|
  Crash         | [Forum 981787](https://forums.xilinx.com/t5/Synthesis/Vivado-2019-1-Verilog-If-statement-nesting-crash/td-p/981787)
  \                | ✓         | ✓     |\n| Crash         | [Forum 981136](https://forums.xilinx.com/t5/Synthesis/Vivado-2018-3-synthesis-crash/td-p/981136)
  \                                   | ✓         | ✓     |\n| Mis-synthesis | [Forum
  981789](https://forums.xilinx.com/t5/Synthesis/Vivado-2019-1-Unsigned-bit-extension-in-if-statement/td-p/981789)
  \            | ✓         | ✓     |\n| Mis-synthesis | [Forum 982518](https://forums.xilinx.com/t5/Synthesis/Vivado-2019-1-Signed-with-shift-in-condition-synthesis-mistmatch/td-p/982518)
  | ✓         | ✓     |\n| Mis-synthesis | [Forum 982419](https://forums.xilinx.com/t5/Synthesis/Vivado-2019-1-Bit-selection-synthesis-mismatch/td-p/982419)
  \                  | ✓         | ✓     |\n\n### Icarus Verilog\n\n| Type           |
  Issue                                                           | Confirmed | Fixed
  |\n|----------------|-----------------------------------------------------------------|-----------|-------|\n|
  Mis-simulation | [Issue 283](https://github.com/steveicarus/iverilog/issues/283)
  | ✓         | ✓     |\n\n## Install the Fuzzer\n\nThe fuzzer now supports building
  with [nix](https://nixos.org/nix/manual/), which pulls in all the extra dependencies
  that are needed to build the project. The main files and their functions are described
  below:\n\n- `default.nix`: describes the main Haskell package and it's dependencies
  that\n  have to be pulled in.\n- `shell.nix`: describes how to set up a shell with
  `nix-shell` which has all\n  the needed dependencies present.\n- `release.nix`:
  passes the versions of the packages that should be used to the\n  description of
  the fuzzer in `default.nix`, which also overrides some\n  dependencies so that everything
  builds nicely. The exact versions of the\n  packages that should be overridden are
  in [nix](/nix).\n\nIt may be possible to build it purely with [cabal-install](https://hackage.haskell.org/package/cabal-install),
  however it may not have all the right versions of the dependencies that are needed.\n\nInstead,
  stack could be used and the `stack.yaml` file could contain the overrides that are
  used by nix.\n\n### Build from hackage\n\nSome external packages are required to
  use Verismith properly:\n\n- [Yosys](https://github.com/yosyshq/yosys) with ABC\n-
  [SymbiYosys](https://github.com/YosysHQ/SymbiYosys)\n- [Icarus Verilog](http://iverilog.icarus.com/)\n-
  (Optional) [Z3](https://github.com/Z3Prover/z3)\n- (Optional) [Xst](https://www.xilinx.com/support/documentation/sw_manuals/xilinx11/ise_c_using_xst_for_synthesis.htm)\n-
  (Optional) [Vivado](https://www.xilinx.com/products/design-tools/ise-design-suite.html)\n-
  (Optional) [Quartus](https://www.intel.com/content/www/us/en/programmable/downloads/download-center.html)\n\nA
  stable version of Verismith is available on [hackage](https://hackage.haskell.org/package/verismith)
  and can be installed using cabal directly without having to build the project from
  the repository:\n\n**Note**: Only **GHC 8.6.5** is currently supported, work is
  going on to support newer versions of GHC.\n\n``` shell\ncabal install verismith\n```\n\nIt
  will be placed under the `bin` cabal folder which can be added to your path to run
  Verismith.\n\n### Build with nix from source\n\nNix build is completely supported,
  therefore if nix is installed, building the project is as simple as\n\n``` shell\nnix-build\n```\n\nIf
  one wants to work in the project with all the right dependencies loaded, one can
  use\n\n``` shell\nnix-shell\n```\n\nand use cabal to build and run the program.\n\n###
  Build with cabal from source\n\nAfter entering a development environment with `nix-shell`,
  the project can safely be built with `cabal-install`. However, even without `nix`,
  the project can still be built with cabal alone using:\n\n``` shell\ncabal configure\ncabal
  build\n```\n\nVerismith can then be run using:\n\n``` shell\ncabal run verismith\n```\n\n##
  Configuration\n\nVerismith can be configured using a [TOML](https://github.com/toml-lang/toml)
  file. There are four main sections in the configuration file, an example can be
  seen [here](/examples/config.toml).\n\n### Information section \n\nContains information
  about the command line tool being used, such as the hash of the commit it was compiled
  with and the version of the tool. The tool then verifies that these match the current
  configuration, and will emit a warning if they do not. This ensures that if one
  wants a deterministic run and is therefore passing a seed to the generation, that
  it will always give the same result. Different versions might change some aspects
  of the Verilog generation, which would affect how a seed would generate Verilog.\n\n###
  Probability section \n\nProvides a way to assign frequency values to each of the
  nodes in the AST. During the state-based generation, each node is chosen randomly
  based on those probabilities. This provides a simple way to drastically change the
  Verilog that is generated, by changing how often a construct is chosen or by not
  generating a construct at all.\n\n### Property section \n\nChanges properties of
  the generated Verilog code, such as the size of the output, maximum statement or
  module depth and sampling method of Verilog programs. This section also allows a
  seed to be specified, which would mean that only that particular seed will be used
  in the fuzz run. This is extremely useful when wanting to replay a specific failure
  and the output is missing.\n\n### Synthesiser section \n\nAccepts a list of synthesisers
  which will be fuzzed. These have to first be defined in the code and implement the
  required interface. They can then be configured by having a name assigned to them
  and the name of the output Verilog file. By each having a different name, multiple
  instances of the same synthesiser can be included in a fuzz run. The instances might
  differ in the optimisations that are performed, or in the version of the synthesiser.\n\n##
  Benchmark Results\n\nCurrent benchmark results to compare against.\n\n``` text\nbenchmarking
  generation/default\ntime                 65.16 ms   (42.67 ms .. 84.90 ms)\n                     0.837
  R²   (0.722 R² .. 0.966 R²)\nmean                 82.87 ms   (71.13 ms .. 105.9
  ms)\nstd dev              27.59 ms   (15.80 ms .. 42.35 ms)\nvariance introduced
  by outliers: 90% (severely inflated)\n\nbenchmarking generation/depth\ntime                 860.8
  ms   (2.031 ms .. 1.488 s)\n                     0.900 R²   (0.668 R² .. 1.000 R²)\nmean
  \                483.9 ms   (254.1 ms .. 647.6 ms)\nstd dev              224.4 ms
  \  (100.8 ms .. 283.5 ms)\nvariance introduced by outliers: 74% (severely inflated)\n\nbenchmarking
  generation/size\ntime                 541.1 ms   (-749.1 ms .. 1.263 s)\n                     0.568
  R²   (0.005 R² .. 1.000 R²)\nmean                 698.8 ms   (498.2 ms .. 897.5
  ms)\nstd dev              229.8 ms   (195.0 ms .. 239.7 ms)\nvariance introduced
  by outliers: 73% (severely inflated)\n\n```\n\n## Resources\n\nThe following resources
  provide more details about the in depth implementation of Verismith:\n\n- [Verismith
  FPGA '20](https://yannherklotz.com/docs/verismith/verismith_paper.pdf)\n- [Verismith
  thesis](https://yannherklotz.com/docs/verismith/verismith_thesis.pdf)\n- [Verismith
  slides](https://yannherklotz.com/docs/verismith/verismith_slides.pdf): Presented
  to the Circuits and Systems group at Imperial College on the 01/07/2019.\n- [Verismith
  poster](https://yannherklotz.com/docs/verismith/verismith_poster.pdf): Presented
  at the [Microsoft Research PhD Workshop](https://www.microsoft.com/en-us/research/event/phd-workshop-on-next-generation-cloud-infrastructure/)
  on 25/11/2019.\n\n## Publication\n\nIf you use Verismith in your research, please
  cite our [FPGA '20 paper](https://yannherklotz.com/docs/verismith/verismith_paper.pdf)\n\n```
  text\n@inproceedings{herklotz_verismith_fpga2020,\n  author = {Yann Herklotz and
  John Wickerson},\n  title = {Finding and Understanding Bugs in {FPGA} Synthesis
  Tools},\n  year = 2020,\n  booktitle = {ACM/SIGDA Int. Symp. on Field-Programmable
  Gate Arrays},\n  doi = {10.1145/3373087.3375310},\n  isbn = {978-1-4503-7099-8/20/02},\n
  \ keywords = {automated testing, compiler defect, compiler testing, random program
  generation, random testing},\n  location = {Seaside, CA, USA},\n  numpages = 11,\n
  \ publisher = {ACM},\n  series = {FPGA '20},\n}\n```\n\n## License\n\nVerismith
  is not free software. This non-commercial release can only be used for evaluation,
  research, educational and personal purposes. A commercial version of Verismith,
  without this restriction and with professional support, can be purchased from Imperial
  College London. See the file [LICENSE](/LICENSE) for more information.\n\n## Acknowledgement\n\nClifford
  Wolf's [VlogHammer](http://www.clifford.at/yosys/vloghammer.html) is an existing
  Verilog fuzzer that generates random Verilog to test how expressions are handled
  in synthesis tools and simulators. It was the inspiration for thegeneral structure
  of this fuzzer, which extends the fuzzing to the behavioural parts of Verilog.\n\nTom
  Hawkins' Verilog parser was used to write the lexer, the parser was then rewritten
  using [Parsec](https://hackage.haskell.org/package/parsec).\n"
description-type: markdown
hash: e354b63869512e3ef14b4808cf8990abd6c6a01ecb3e27f7e7eed1d36c72f847
homepage: https://github.com/ymherklotz/verismith#readme
latest: 1.0.0.2
license-name: GPL-3.0-only
maintainer: yann [at] yannherklotz [dot] com
synopsis: Random verilog generation and simulator testing.
test-bench-deps:
  base: '>=4 && <5'
  criterion: '>=1.5.5 && <1.6'
  fgl: '>=5.6 && <5.8'
  hedgehog: '>=1.0 && <1.2'
  lens: '>=4.16.1 && <4.19'
  parsec: '>=3.1 && <3.2'
  shakespeare: '>=2 && <2.1'
  tasty: '>=1.0.1.1 && <1.3'
  tasty-hedgehog: '>=1.0 && <1.1'
  tasty-hunit: '>=0.10 && <0.11'
  text: '>=1.2 && <1.3'
  verismith: '>=0'
