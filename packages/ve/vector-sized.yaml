homepage: https://github.com/expipiplus1/vector-sized#readme
changelog-type: markdown
hash: 900bfb7b358b2f40ae817d2f04e320db800d255d179b2bd3e07b44d6343093f5
test-bench-deps: {}
maintainer: whats.our.vector.victor@monoid.al
synopsis: Size tagged vectors
changelog: "# Change Log\n\n## WIP\n\n## [1.5.0] - 2021-08-25\n\n- Change indexes
  used by `accum` from `Int` to `Finite`.\n\n## [1.4.4] - 2021-06-26\n\n- Add `ix'`\n\n##
  [1.4.3.1] - 2020-12-13\n\n- Fix Bits instance, shiftl and shiftr were incorrect\n\n##
  [1.4.3] - 2020-12-08\n\n- Add Primitive flavour of sized vectors\n- Add `instance
  Bits (v a) => Bits (Vector v n a)`\n\nThanks to @Bodigrim and @mstksg\n\n## [1.4.2]
  - 2020-08-20\n\n- Add `instance Unbox a, KnownNat n) => Unbox (Vector n a)`\n- Add
  `zipVectorsUnsafe`\n\n## [1.4.1.0] - 2020-05-04\n\n- GHC 8.10 compatibility\n\n##
  [1.4.0.0] - 2019-09-12\n\n- Remove Generic instance, see\n  https://github.com/expipiplus1/vector-sized/issues/79\n-
  Add Binary instance\n- Loosen bounds on dependencies\n\n## [1.3.0.0] - 2019-05-28\n\n-
  Correct type of accumulating fold functions\n\n## [1.2.0.1] - 2019-05-22\n\n- Loosen
  upper bounds on dependencies\n\n## [1.2.0.0] - 2018-12-05\n\n- Add ``Hashable``
  instances\n- Generalize ``concatMap``\n- Various code and documentation cleanup\n-
  Add ``SomeSized`` pattern\n\n## [1.1.1.0] - 2018-11-13\n\n- Fix build and add CI
  for 8.6.2\n\n## [1.1.0.0] - 2018-11-08\n\n- Generalise Ix instance\n- Add Unboxed
  vectors\n- Fiddle extension guarding\n\nThanks everyone!\n\n## [1.0.5.0] - 2018-10-17\n\n-
  Add Ix instance\n- Add Comonad instance\n\nThanks mpilgrem and KingoftheHomeless\n\n##
  [1.0.4.1] - 2018-09-04\n\n- Fix compilation on ghc 8.6.\n\n## [1.0.4.0] - 2018-07-14\n\n-
  Add Monad instance for boxed vectors.\n\n## [1.0.3.1] - 2018-07-10\n\n- Loosen upper
  bound on `distributive`\n\n## [1.0.3.0] - 2018-06-24\n\n- Remove redundant KnownNat
  constraints\n\n## [1.0.2.0] - 2018-05-15\n\n- `not-home` haddock annotations for
  Internal modules, for more helpful linking\n- Fix build with indexed-list-literals-0.2.1.0\n\n##
  [1.0.1.0] - 2018-04-12\n\n- Add Representable and Distributive instances for sized
  boxed vectors\n- Use newer version of indexed-list-literals to allow a fully featured
  compile on ghc 8.4\n\n## [1.0.0.0] - 2018-03-20\n\n- More functions using `Finite`
  instead of `Int`\n- Add `Read` and `Semigroup` instances\n- Performance improvements
  for `Applicative`\n- Add a `knownLength` function\n- Add `fromTuple` (ghc < 8.3
  for now)\n- Add sized variants of mutable vectors \n- Expose sized vector constructors
  from Internal modules\n\nHuge thanks to all the contributors!\n\n## [0.6.1.0] -
  2017-08-04\n- Add lenses ix, _head and _last\n\n## [0.6.0.0] - 2017-06-07\n- Make
  ordering of additions in types be more consistent\n- Make slice more general\n-
  `Num`, `Fractional`, and `Floating` instances for vectors\n\n## [0.5.1.0] - 2017-02-01\n-
  Loosen upper bound on `vector`\n\n## [0.5.0.0] - 2017-01-04\n- Use `Finite` from
  `finite-typelits` for indexing.\n\n## [0.4.1.0] - 2016-11-24\n- Add `withSized`
  and `withSizedList`\n\n## [0.4.0.1] - 2016-11-12\n- Raise lower bound on base to
  4.9\n\n## [0.4.0.0] - 2016-11-01\n- Correct type signature on `index'`\n\n## [0.3.3.0]
  - 2016-08-10\n- Add instances for Data, Typeable and Generic\n\n## [0.3.2.0] - 2016-03-29\n-
  Add overlapping Monoid instance for zero length vectors\n\n## [0.3.1.0] - 2016-03-29\n-
  Add Monoid instance\n\n## [0.3.0.0] - 2016-03-22\n- Export all of the available
  functionality from Data.Vector.Generic.\n- Add Storable\n- Add Unboxed\n\n## [0.2.0.0]
  - 2016-02-29\n- Tighter bounds on base to avoid compiling with GHC < 7.10.\n\n##
  [0.1.0.0] - 2016-02-28\n- Initial release.\n"
basic-deps:
  base: '>=4.9 && <5'
  comonad: '>=4 && <6'
  adjunctions: '>=4.3 && <4.5'
  distributive: '>=0.5 && <0.7'
  binary: '>=0.8.3.0'
  indexed-list-literals: '>=0.2.0.0'
  hashable: '>=1.2.4.0'
  deepseq: '>=1.1 && <1.5'
  finite-typelits: '>=0.1'
  primitive: '>=0.5 && <0.9'
  vector: '>=0.11 && <0.14'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.2.0
- 0.3.3.0
- 0.4.0.0
- 0.4.0.1
- 0.4.1.0
- 0.5.0.0
- 0.5.1.0
- 0.6.1.0
- 1.0.0.0
- 1.0.1.0
- 1.0.2.0
- 1.0.3.0
- 1.0.3.1
- 1.0.4.0
- 1.1.0.0
- 1.1.1.0
- 1.2.0.0
- 1.2.0.1
- 1.4.0.0
- 1.4.1.0
- 1.4.2
- 1.4.3.1
- 1.4.4
- 1.5.0
author: Joe Hermaszewski
latest: 1.5.0
description-type: markdown
description: "# ``vector-sized`` [![Hackage][hackage-shield]][hackage]\n\nThis package
  exports a newtype tagging the vectors from the [``vector``][1]\npackage with a type-level
  natural representing their size. It also exports\nfunctions from ``vector`` whose
  size can be determined ahead of time,\nappropriately retyped.\n\nCurrently, we provide
  size-tagged versions of the following:\n\n* [``Data.Vector.Vector``][2], in ``Data.Vector.Sized``\n*
  [``Data.Vector.Generic.Vector``][5], in ``Data.Vector.Generic.Sized``\n* [``Data.Vector.Storable.Vector``][3],
  in ``Data.Vector.Storable.Sized``\n* [``Data.Vector.Unboxed.Vector``][4], in ``Data.Vector.Unboxed.Sized``\n\nWe
  also provide mutable versions of each of the above. Additionally, we include\nfunctions
  for converting to and from 'unsized' vectors and lists, using\nCPS-style existentials.\n\nThe
  code in this package is based on the initial work by Ben Gamari in a [PR for\n``vulkan``][7].\n\n##
  How is this different to ``fixed-vector``?\n\nThis package is fairly similar to
  [``fixed-vector``][6], as both libraries are\ndesigned to provide vectors of statically
  known length. However, the\nimplementations used are different, with different tradeoffs.
  ``vector-sized``\nuses a newtype wrapper around vectors from ``vector``, and is
  thus able to\nhandle vectors of arbitrary length. However, this approach requires
  us to carry\na runtime representation of length, which is a significant memory overhead
  for\nsmall vectors. ``fixed-vector`` instead defines all functions as manipulations\nof
  Church-encoded product types of the form ``∀r. (a → a → r) → r`` (for 2D\nvectors),
  allowing it to work for both arbitrary product types (like ``data V2 a\n= V2 a a``)
  and opaque length-parameterized vectors. However, as a consequence\nof this implementation
  choice, ``fixed-vector`` cannot handle vectors whose size\nexceeds tens of elements.\n\n[1]:
  https://hackage.haskell.org/package/vector\n[2]: https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector.html#t:Vector\n[3]:
  https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Storable.html#t:Vector\n[4]:
  https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Unboxed.html#t:Vector\n[5]:
  https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Generic.html#t:Vector
  \ \n[6]: https://hackage.haskell.org/package/fixed-vector\n[7]: https://github.com/expipiplus1/vulkan/pull/1\n[hackage-shield]:
  https://img.shields.io/badge/hackage-v1.2.0.0-blue.svg \n[hackage]: http://hackage.haskell.org/package/vector-sized\n"
license-name: BSD-3-Clause
