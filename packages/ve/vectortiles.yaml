all-versions:
- 1.0.0
- 1.1.0
- 1.1.1
- 1.2.0
- 1.2.0.1
- 1.2.0.2
- 1.2.0.4
- 1.2.0.5
- 1.2.0.6
- 1.3.0
- 1.4.0
- 1.5.0
- 1.5.1
author: Colin Woodbury
basic-deps:
  base: '>=4.9 && <5'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: ^>=1.4
  hashable: '>=0'
  mtl: '>=0'
  protocol-buffers: ^>=2.4
  protocol-buffers-descriptor: ^>=2.4
  text: ^>=1.2
  transformers: ^>=0.5
  unordered-containers: '>=0'
  vector: '>=0.11 && <0.13'
changelog: |
  Changelog
  =========

  ## 1.5.1
  - GHC 8.8.2 support.

  ## 1.5.0
  - **Breaking:** Removed the `distance` function.
  - Regenerated schema code to match modern versions of `protocol-buffers`.

  ## 1.4.0
  - **Breaking:** `Feature` is now explicit about what `Vector` type it holds
  - Performance improvements

  ## 1.2.0.3
  - Performance improvements during metadata encoding.

  ## 1.2.0.2
  - Bump `vector` upper bound.

  ## 1.2.0.1
  - Remove the redundant `Monoid` instance for `Point`.

  ## 1.2.0

  #### Front End
  - `VectorTile` now holds a lazy `Map` internally, instead of a `Vector`. Use
  the `ix` Lens, giving it a layer name, to hone in on individual Layers
  quickly.
  - Users an optionally use the new `fromProtobuf` function directly from
  `Geography.VectorTile.Protobuf` if they wish to be semantically explicit
  about the backend conversion. Otherwise, they can still use the top-level
  `tile` function.

  #### Back End
  - Reworked internals for Protobuf conversion. Most code moved to an
  `Internal` module.

  ## 1.1.1
  - Removed the `StrictData` pragma. Turns out laziness is faster.
changelog-type: markdown
description: "VectorTiles\n===========\n\n[![Build Status](https://travis-ci.org/fosskers/vectortiles.svg?branch=master)](https://travis-ci.org/fosskers/vectortiles)\n[![Hackage](https://img.shields.io/hackage/v/vectortiles.svg?style=flat)](https://hackage.haskell.org/package/vectortiles)\n[![Stackage
  Nightly](http://stackage.org/package/vectortiles/badge/nightly)](http://stackage.org/nightly/package/vectortiles)\n[![Stackage
  LTS](http://stackage.org/package/vectortiles/badge/lts)](http://stackage.org/lts/package/vectortiles)\n\nWhat
  are VectorTiles?\n---------------------\nInvented by [Mapbox](https://www.mapbox.com/),
  VectorTiles are a combination\nof finite-sized tiles and vector geometries. Mapbox
  maintains the\nofficial implementation spec for VectorTile codecs.\n\nVectorTiles
  are advantageous over raster tiles in that:\n\n1. They are typically smaller to
  store\n2. They can be easily transformed (rotated, etc.) in real time\n3. They allow
  for continuous (as opposed to step-wise) zoom in Slippy Maps.\n\nRaw VectorTile
  data is stored in the protobuf format. Any codec implementing\n[the spec](https://github.com/mapbox/vector-tile-spec/tree/master/2.1)
  must\ndecode and encode data according to [this *.proto*\nschema](https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto).\n\nWhat
  is this library?\n---------------------\n`vectortiles` is a minimum viable implementation
  of **Version 2.1** of the\nVectorTile spec. It aims to be a solid reference to implement\nother
  codecs. `vectortiles` exposes a small API of conversion functions between raw\nprotobuf
  data and a higher-level `VectorTile` type that is more condusive to\nfurther processing.
  `vectortiles` also exposes fairly simplistic (yet sensible)\nimplementations of
  the typical GIS `Geometry` types:\n\n* Point\n* LineString\n* Polygon\n\nFor ease
  of encoding and decoding, each `Geometry` type and its `Multi`\ncounterpart (i.e.
  *Multipoint*) are considered the same thing, a `Vector` of\nthat `Geometry`.\n\n####
  Efficiency\n\nThis library is not micro-optimized, but does leverage some \"for-free\"\naspects
  of Haskell to remain usable:\n\n* `Point` is implemented as a [Record Pattern\nSynonym](https://downloads.haskell.org/~ghc/8.0.1/docs/html/users_guide/glasgow_exts.html#record-patsyn)\nto
  hide the fact it's just a vanilla tuple of `Int`s. This allows us to use\nthe more
  efficient unboxed `Vector`s with it:\n\n```haskell\n-- | Access a Point's values
  with the `x` and `y` functions.\ntype Point = (Int,Int)\npattern Point :: Int ->
  Int -> (Int, Int)\npattern Point{x, y} = (x, y)\n```\n\n* Some types (like `LineString`)
  are implemented as a `newtype` for its\ncompile-time unboxing:\n\n```haskell\nimport
  qualified Data.Vector.Unboxed as U\n\nnewtype LineString = LineString { lsPoints
  :: U.Vector Point }\n```\n\n* All lenses are `INLINE`d.\n\n#### Performance\n\nBenchmarks
  can be run with `stack bench`, provided [the stack\ntool](http://docs.haskellstack.org/en/stable/README/)
  is installed. The \nfollowing results are from a 2016 Lenovo ThinkPad Carbon X1
  with an \nIntel Core i7 processor, comparing this library with a \n[Python library
  of similar functionality]\n(https://github.com/mapzen/mapbox-vector-tile). All\nbenchmarking
  code is available in the `bench` directory.\n\n*Note: 1 ms = 1000 μs*\n\n##### Decoding\n\n|
  | One Point | One LineString | One Polygon | roads.mvt (40kb, 15 layers)\n| ---
  | --- | --- | --- | --- |\n| CPython 3.5.2 | 63 μs | 70 μs | 84 μs | 76 ms |\n|
  PyPy 5.3 | 116 μs | 210 μs | 211 μs | 12 ms |\n| Haskell | 3.6 μs | 5 μs | 5.8 μs
  | 17.1 ms\n\n*The Haskell times are measuring data evaluation to their Normal Form
  (fully\nevaluated form).*\n\n*The Python class decoded to is the builtin `dict`
  class.*\n\n##### Encoding\n\n| | One Point | One LineString | One Polygon | roads.mvt\n|
  --- | --- | --- | --- | --- |\n| CPython 3.5.2 | 218 μs | 278 μs | 703 μs | N/A
  |\n| Haskell | 3.2 μs | 4.4 μs | 5 μs | 11.1 ms\n\n*Certain encoding benchmarks
  for Python were not possible.*\n\n##### Data Access (Fetching first Polygon)\n\n|
  |  One Polygon | roads.mvt (`water` layer)\n| --- | --- | --- |\n| CPython 3.5.2
  | 84 μs | 78 ms |\n| PyPy 5.3 | 31 μs | 7.9 ms |\n| Haskell | 3.4 μs | 6.8 ms |\n\n*The
  operation being benchmarked is `ByteString -> Polygon`, meaning we\ninclude the
  decoding time to account for speed gains afforded by laziness.*\n\n##### Conclusions\n\n-
  **Laziness pays off.** In Haskell, just fetching some specific data field\nis faster
  than decoding the entire structure.\n- **Python data fetches are fast.** They are
  based on the `dict` class, so\nfetch operations will be as fast as `dict` is.\n-
  **PyPy results are enigmatic.** Python3 seems to do much better \"off the\nblock\",
  but given time the PyPy JIT overtakes it. Fetching layer names also\nseems to be
  faster than decoding the entire object, somehow. This may be due\nto the JIT being
  clever, noticing we aren't using the rest of the structure.\n\nQuestions & Issues\n------------------\n\nSimply
  parsing raw protobuf data is not enough to work with VectorTiles,\nsince the spec
  also defines how said data is to be interpreted once parsed.\nIn writing a codec,
  there are a number of things one must consider:\n\n#### Hand written schema code
  vs `protoc` use\n\nMany languages have a \"protobuf compiler\" which can take a
  `.proto` file and\ngenerate schema code to access parsed data. There are PROs and
  CONs to taking\nthis approach.\n\nPROs for using a `protoc`-like program:\n\n* All
  accessor code is written for you\n* Update process when new official `.proto` is
  released is clearer\n\nPROs for writing your own schema:\n\n* Its your code, so
  you have more control. Bugs are easier to chase\n* The code will likely be much
  shorter\n\nIn the case of two Haskell protobuf libraries which were compared, the\nhand-written
  one allowed for a 50-line schema, while the other\nauto-generated a 550-line one.\n\n####
  Extension Support\n\nThe protobuf spec leaves room for additional:\n\n* `Value`
  types in the key-value metadata maps\n* fields in a `Layer`\n* fields in a `Tile`\n*
  use of the `UNKNOWN` geometry type\n\nIn writing a codec, these can be completely
  ignored. However, they\nare permitted by the spec, and some tools may encode data
  using them.\n\n#### Feature/Geometry Polymorphism\n\nAt the protobuf level, Features
  of Points, LineStrings, and Polygons are all mixed\ninto a single list, distinguished
  only by a `GeomType` label. At a high level, you may\nwish to separate these specifically.
  This library does just that:\n\n```haskell\ndata Layer = Layer { _version :: Int\n
  \                  , _name :: Text\n                   , _points :: V.Vector (Feature
  Point)\n                   , _linestrings :: V.Vector (Feature LineString)\n                   ,
  _polygons :: V.Vector (Feature Polygon)\n                   , _extent :: Int\n                   }\n```\nAs
  opposed to having a single field named `features`, which contains all\nfeatures
  unified by some superclass / trait / generic.\n\n*Claim:* Having separate accessors
  for each geometry type yields a \"heavier\"\nAPI, but gives more power, is more
  performant, and less complex.\n\n#### Layer / Feature Coupling\n\nLayers and Features
  have coupled data at the protobuf level. In order to achieve\nhigher compression
  ratios, Layers contain all metadata in key/value lists to\nbe shared across their
  Features, while those Features store only indices\ninto those lists. As a result,
  functions converting protobuf-level Feature\nobjects into a high-level type need
  to be passed those key/value lists from\nthe parent Layer.  and a more isomorphic:\n\n```haskell\nfeature
  :: Geometry g => RawFeature -> Either Text (Feature g)\n```\nis not possible.\n\n####
  Polygon Definition\n\nVersion 2 of the spec mainly clarified language surrounding
  how polygons\nshould be decoded. [This Github\nissue](https://github.com/mapbox/vector-tile-spec/issues/80)
  reports another\n\"gotcha\" associated with the definition of polygons.\n\n####
  Sanity Checks / Error Handling\n\nThe protobuf data can be malformed in a number
  of ways. The amount of sanity\nchecking that occurs while decoding depends on willingness
  to sacrifice \nperformance. For instance, here is a constraint found in the spec\nregarding
  feature metadata:\n\n> Every key index MUST be unique within that feature such that
  no other\n> attribute pair within that feature has the same key index. A feature
  MUST\n> have an even number of tag fields. A feature tag field MUST NOT contain
  a\n> key index or value index greater than or equal to the number of elements in\n>
  the layer's keys or values set, respectively.\n\nTips\n----\n> Decode what is encoded,
  and encode what is decoded.\n\nEncoding and decoding functions should be as close
  to isomorphisms as possible.\n\n> (0,0) is in the top-left corner.\n\n> Know binary
  arithmetic well.\n\nLists of Geometry commands/values are Z-encoded. See the `zig`
  and `unzig`\nfunctions in `Geometry.VectorTile.Geometry`.\n"
description-type: markdown
hash: cd36573aadc0bcc89612561aefe9a0c00c0e038d264e73a47fa5bc5e50ee094d
homepage: https://github.com/fosskers/vectortiles
latest: 1.5.1
license-name: BSD-3-Clause
maintainer: colin@fosskers.ca
synopsis: GIS Vector Tiles, as defined by Mapbox.
test-bench-deps:
  base: '>=4.9 && <5'
  bytestring: '>=0'
  containers: '>=0'
  criterion: '>=1.1 && <1.6'
  microlens: ^>=0.4
  microlens-platform: '>=0.3 && <0.5'
  protocol-buffers: ^>=2.4
  tasty: '>=0.10.1.2'
  tasty-hunit: '>=0.9.2'
  text: ^>=1.2
  unordered-containers: '>=0'
  vector: '>=0.11 && <0.13'
  vectortiles: '>=0'
