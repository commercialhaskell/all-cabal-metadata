homepage: http://github.com/LeventErkok/sbvPlugin
changelog-type: markdown
hash: 8350ea373cbf9e4948334e1e6829678ba8be12891013b82e440c2567a9863cdb
test-bench-deps:
  base: '>=4.11 && <5'
  tasty-golden: -any
  filepath: -any
  process: -any
  sbvPlugin: -any
  tasty: -any
  directory: -any
maintainer: Levent Erkok (erkokl@gmail.com)
synopsis: Formally prove properties of Haskell programs using SBV/SMT
changelog: "* Hackage: <http://hackage.haskell.org/package/sbvPlugin>\n* GitHub:  <http://github.com/LeventErkok/sbvPlugin>\n\n*
  Latest Hackage released version: 9.0.1, 2021-03-22\n\n### Version 9.0.1, 2021-03-22\n
  \ * Changes required to compile with GHC 9.0.1\n  * SBVPlugin version now matches
  the version of GHC we compiled it with.\n    It might work with newer versions of
  GHC, though not tested/guaranteed.\n  * Bump up sbv dependence to >= 8.13\n\n###
  Version 0.12, 2020-09-05\n  * Changes required to compile with GHC 8.10.2\n  * Bump
  up sbv dependence to >= 8.8\n\n### Version 0.11, 2019-01-14\n\n  * Changes required
  to compile with GHC 8.6.3\n  * Bump up sbv dependence to >= 8.0\n  * Clean-up/improve
  test cases\n\n### Version 0.10, 2017-07-29\n\n  * Changes required to compile with
  GHC 8.2.1/8.2.2.\n  * Bump up sbv dependence to >= 7.4\n\n### Version 0.9, 2017-07-19\n\n
  \ * Sync-up with recent modifications to SBV. No user visible changes.\n  * Bump
  up sbv dependence to >= 7.0\n\n### Version 0.8, 2017-01-12\n\n  * Fix broken links,
  thanks to Stephan Renatus for the patch.\n  * Add the 'Proved' type, which allows
  for easily tagging a type for proof,\n    without the need for an explicit annotation.
  Thanks to Nickolas Fotopoulos\n    for the patch.\n  * Bump up sbv dependence to
  > 5.14\n  \n### Version 0.7, 2016-06-06\n\n  * Compile with GHC-8.0. Plugin at least
  requires GHC-8.0.1 and SBV 5.12\n  * Fix a few dead links\n\n### Version 0.6, 2016-01-01\n\n
  \ * Support for list expressions of the form [x .. y] and\n    [x, y .. z]; so long
  as the x, y, and z are all concrete.\n  * Simplify some of the expressions in BitTricks
  using\n    the new list-construction support.\n  * Added more proofs to the BitTricks
  example\n\n### Version 0.5, 2015-12-26\n \n  * Allow higher-order (i.e., function)
  arguments to theorems.\n  * Rework uninterpreted functions, generalize types\n  *
  Simplify cabal file; no need to ship gold-files for tests\n  * Add merge-sort example
  \"Data/SBV/Plugin/Examples/MergeSort.hs\"\n  * Add bit-tricks example \"Data/SBV/Plugin/Examples/BitTricks.hs\"\n\n###
  Version 0.4, 2015-12-24\n\n  * Support for case-alternatives producing lists/tuples\n
  \   and functions. In the list case, we require that both\n    alternatives produce
  equal-length lists, as otherwise\n    there is no way to merge the two results.\n
  \ * More test cases.\n\n### Version 0.3, 2015-12-21\n  \n  * Added the micro-controller
  example, adapted from\n    the original SBV variant by Anthony Cowley:\n    <http://acowley.github.io/NYHUG/FunctionalRoboticist.pdf>\n
  \ * Add the \"skip\" option for the plugin itself. Handy when\n    compiling the
  plugin itself!\n\n### Version 0.2, 2015-12-21\n\n  * Further fleshing of internals\n
  \ * Support for case-expressions\n  * Support for uninterpreted types/functions\n
  \ * Lots of test cases, refactoring.\n\n### Version 0.1, 2015-12-06\n\n  * Basic
  functionality. Initial design exploration.\n  * The plugin functional on base values,
  but there\n    are a lot of rough edges around the details.\n    Please report any
  issues you might find!\n"
basic-deps:
  ghc: -any
  sbv: '>=8.13'
  base: '>=4.11 && <5'
  containers: -any
  ghc-prim: -any
  mtl: -any
  template-haskell: -any
all-versions:
- '0.8'
- '0.9'
- '0.10'
- '0.11'
- '0.12'
- 9.0.1
author: Levent Erkok
latest: 9.0.1
description-type: markdown
description: "## SBVPlugin: SBV Plugin for GHC\n\nOn Hackage: http://hackage.haskell.org/package/sbvPlugin\n\n[![Build
  Status](http://img.shields.io/travis/LeventErkok/sbvPlugin.svg?label=Build)](http://travis-ci.org/LeventErkok/sbvPlugin)\n\n###
  Example\n\n```haskell\n{-# OPTIONS_GHC -fplugin=Data.SBV.Plugin #-}\n\nmodule Test
  where\n\nimport Data.SBV.Plugin\n\ntest :: Proved (Integer -> Integer -> Bool)\ntest
  x y = x + y >= x - y\n```\n\n*Note the GHC option on the very first line. Either
  add this to your file, or pass `-fplugin=Data.SBV.Plugin` as an\nargument to GHC,
  either on the command line or via cabal. Same trick also works for GHCi.*\n\nThe
  `Proved` type simply wraps over the type of the predicate you are trying to prove,
  typically a function\nreturning a `Bool` value. It tells the plugin to treat the
  input as a theorem that needs to be proved.\nWhen compiled, we get:\n\n```\n$ ghc
  -c Test.hs\n\n[SBV] Test.hs:8:1-4 Proving \"test\", using Z3.\n[Z3] Falsifiable.
  Counter-example:\n  x =  0 :: Integer\n  y = -1 :: Integer\n[SBV] Failed. (Use option
  'IgnoreFailure' to continue.)\n```\n\nNote that the compilation will be aborted,
  since the theorem doesn't hold. If you load this file in GHCi, it will simply\nfail
  and drop you back to the GHCi prompt.\n\n### Annotation style\nWhile the `Proved`
  type should suffice for simple uses, the plugin takes a number of arguments to modify\noptions
  and pick underlying solvers. In this case, an explicit annotation can be provided:\n\n```haskell\n{-#
  OPTIONS_GHC -fplugin=Data.SBV.Plugin #-}\n\nmodule Test where\n\nimport Data.SBV.Plugin\n\n{-#
  ANN test theorem {options = [IgnoreFailure]} #-}\ntest :: Integer -> Integer ->
  Bool\ntest x y = x == y -- clearly not True!\n```\n\nThe above, for instance, tells
  the plugin to ignore failed proofs (`IgnoreFailure`). This is useful when you\nhave
  a failing theorem that you are still working on, to make sure GHC continues compilation
  instead of stopping\ncompilation and erroring out at that point.\n\n### Available
  options\n\nThe plugin currently understands the following options. Multiple options
  can be given at the same time \nby comma separating them.\n\n```haskell\ndata SBVOption
  =\n   IgnoreFailure  -- ^ Continue even if proof fails\n | Skip String    -- ^ Skip
  the proof. Can be handy for properties that we currently do not want to focus on.\n
  | Verbose        -- ^ Produce verbose output, good for debugging\n | Debug          --
  ^ Produce really verbose output, use only when things go really wrong!\n | QuickCheck
  \    -- ^ Perform quickCheck\n | Uninterpret    -- ^ Uninterpret this binding for
  proof purposes\n | Names [String] -- ^ Use these names for the arguments; need not
  be exhaustive\n | ListSize Int   -- ^ If a list-input is found, use this length.
  If not specified, we will complain!\n | Z3             -- ^ Use Z3\n | Yices          --
  ^ Use Yices\n | Boolector      -- ^ Use Boolector\n | CVC4           -- ^ Use CVC4\n
  | MathSAT        -- ^ Use MathSAT\n | ABC            -- ^ Use ABC\n | AnySolver
  \     -- ^ Run all installed solvers in parallel, and report the result from the
  first to finish\n```\n\n### Using SBVPlugin from GHCi\nThe plugin should work from
  GHCi with no changes.  Note that when run from GHCi, the plugin will\nbehave as
  if the `IgnoreFailure` argument is given on all annotations, so that failures do
  not stop\nthe load process.\n\n### Thanks\nThe following people reported bugs, provided
  comments/feedback, or contributed to the development of SBVPlugin in\nvarious ways:
  Nickolas Fotopoulos and Stephan Renatus.\n"
license-name: BSD-3-Clause
