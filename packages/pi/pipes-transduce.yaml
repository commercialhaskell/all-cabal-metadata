all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.3.0
- 0.3.0.0
- 0.3.0.1
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.3.4.0
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- 0.4.3.1
- 0.4.3.2
- 0.4.4.0
author: Daniel Diaz
basic-deps:
  base: '>=4.9 && <5'
  bifunctors: '>=5.0'
  bytestring: '>=0.9.2.1'
  conceit: '>=0.4.0.0'
  foldl: '>=1.4.0'
  free: '>=4.0'
  microlens: '>=0.4.2.0'
  pipes: '>=4 && <5'
  pipes-bytestring: '>=0'
  pipes-concurrency: '>=2.0.2'
  pipes-group: '>=1.0.1'
  pipes-parse: '>=0'
  pipes-safe: '>=0'
  pipes-text: '>=0.0.1.0'
  streaming: '>=0.1.0.19'
  text: '>=0.11.2.0'
  transformers: '>=0.4.0.0'
  void: '>=0.6'
changelog: "0.4.4.0\n=======\n- Bumped lower bound for foldl.\n\n0.4.3.0\n=======\n-
  Bumped base dependency.\n\n0.4.2.0\n=======\n- Semigroup instance for Fold.\n- New
  dependency on the \"streaming\" package.\n- Added withStreamCont, withStreamCont',
  withFallibleStreamCont,\n  withFallibleStreamCont'. \n\n0.4.1.0\n=======\n\n- The
  transducer1/Transducer thing is kind of akward. De-emphasized in the\n  docs. Use
  the newly added functions instead.\n- Added asUtf8, asUtf8x, bothAsUtf8x, asFoldedLines,
  combinedLines,\n  combinedLinesPrefixing.\n- New Pipes.Transduce.Internal module.\n\n0.4.0.0\n=======\n\n-
  depend on microlens\n- compatibility with foldl 1.2.\n\n0.3.4.0\n=======\n\n- removed
  lens-family dependency.\n- solved bom problem.\n\n0.3.3.0\n=======\n\n- Made it
  compile in GHC 7.8.4.\n\n0.3.2.0\n=======\n\n- Added \"eachLine\" function.\n\n0.3.1.0\n=======\n\n-
  Solved bug in \"combined\", added a test.\n\n0.3.0.0\n=======\n\n- Dropped unneeded
  deps.\n\n0.2.3.0\n=======\n\n- More efficient Applicative for Fold2\n\n0.2.0.0\n=======\n\n-
  Added folds of two Producers.\n- Name changes.\n"
changelog-type: text
description: "## What's in this library?\n\nA pair of fold-like datatypes that consume\n[Producers](http://hackage.haskell.org/package/pipes-4.1.7/docs/Pipes.html#t:Producer)\nfrom
  [pipes](http://hackage.haskell.org/package/pipes) and can be constructed\nin a variety
  of ways, in particular from the more versatile folds in Gabriel\nGonzalez's [foldl](http://hackage.haskell.org/package/foldl)
  package.\n\nThe **Fold1** consumes a single **Producer**, while the **Fold2** datatype\nconsumes
  two **Producer**s concurrently.\n\n## Why was this library created?\n\nI wanted
  a fold-like datatype for Producers that allowed \"bracketing\"\noperations like
  \"withFile\".\n\nI also wanted to be able to fold two Producers concurrently (for
  example, merge\nthe piped stdout & stderr streams of an external process into one
  unified\nstream).\n\nFinally, I wanted the fold-like datatype to have a \"failure
  option\" baked in.\n\nIf you don't need any of that, you are better off using **pipes**
  and/or\n**foldl** by themselves. \n\n## Where can I find working examples for this
  library?\n\nThere are none yet.\n"
description-type: markdown
hash: 30b7ee1324ff504d1f357ad8818923b854ee70270b91aedd90d88e3f5f37b073
homepage: ''
latest: 0.4.4.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: Interfacing pipes with foldl folds.
test-bench-deps:
  base: '>=4.9 && <5'
  doctest: '>=0.10.1'
  foldl: '>=1.4'
  free: '>=4'
  pipes: '>=4'
  pipes-transduce: '>=0'
  tasty: '>=0.10.1.1'
  tasty-hunit: '>=0.9.2'
  text: '>=0'
