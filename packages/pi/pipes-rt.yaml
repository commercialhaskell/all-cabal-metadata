all-versions:
- 0.3.0
- 0.4.0
- 0.4.1
- 0.4.2
- 0.5.0
author: Greg Hale
basic-deps:
  base: '>=4.2 && <4.9'
  mwc-random: '>=0.13 && <0.14'
  pipes: '>=4 && <4.2'
  pipes-rt: '>=0'
  time: '>=1.4 && <1.6'
changelog: ''
changelog-type: ''
description: "pipes-rt\n========\n\n[![Build Status](https://travis-ci.org/imalsogreg/pipes-rt.svg?branch=master)](https://travis-ci.org/imalsogreg/pipes-rt.svg?branch=master)\n\nA
  few pipes to yield values at a steady rate, as a poisson process, or according to
  the values themselves\n\nFor example:\n\n```\nλ: import Pipes\nλ: import qualified
  Pipes.Prelude as PP\nλ: import Pipes.RealTime\nλ: import Data.Time\nλ: import Data.Time.Clock
  \n\nλ: -- Pass values at 2 Hz\nλ: runEffect $ each [1..4] >-> steadyCat 2 >-> PP.print\n
  \ [1/2 second pause...]\n1 [1/2 second pause...]\n2 [1/2 second pause...]\n3 [1/2
  second pause...]\n4 [1/2 second pause...]\n\nλ: -- Pass Values at 100 Hz, printing
  arrival times\nλ: runEffect $ for (each [1..10] >-> steadyCat 100) (const $ lift
  (getCurrentTime >>= print))\n2013-10-10 19:55:53.944484 UTC  \n2013-10-10 19:55:53.954939
  UTC      [          ]\n2013-10-10 19:55:53.964623 UTC    [              ]\n2013-10-10
  19:55:53.975125 UTC  [   .. pauses ..    ]\n2013-10-10 19:55:53.984759 UTC    [
  \             ]\n2013-10-10 19:55:53.994345 UTC      [          ]\n2013-10-10 19:55:54.004886
  UTC\n2013-10-10 19:55:54.01449 UTC\n2013-10-10 19:55:54.025124 UTC\n2013-10-10 19:55:54.034661
  UTC\n\nλ: -- Pass values with Poisson timing, average 4 Hz, print data and arrival
  time\nλ: runEffect $ for (each \"Testing\" >-> poissonCat 4) (\\c -> lift (getCurrentTime
  >>= \\t -> print (c,t)))\n('T',2013-10-10 19:57:29.707621 UTC)\n('e',2013-10-10
  19:57:29.710815 UTC)\n('s',2013-10-10 19:57:29.71766 UTC)\n('t',2013-10-10 19:57:29.726371
  UTC)\n('i',2013-10-10 19:57:29.74401 UTC)\n('n',2013-10-10 19:57:29.744338 UTC)\n('g',2013-10-10
  19:57:29.759882 UTC)\n\nλ: -- Get timestamps from the data being piped\nλ: import
  Data.Char\nλ: let timeOfChar = (/ 10) . fromIntegral . (\\c -> ord c - ord 'a')\nλ:
  runEffect $ for (each \"abcdwxyz\" >-> relativeTimeCat timeOfChar) (\\v -> lift
  (getCurrentTime >>= \\t -> print (v,t)))\n('a',2013-11-07 15:54:05.645025 UTC)   [
  .. short pause .. ]\n('b',2013-11-07 15:54:05.745847 UTC)   [ .. short pause ..
  ]\n('c',2013-11-07 15:54:05.845771 UTC)   [ .. short pause .. ]\n('d',2013-11-07
  15:54:05.945533 UTC)   [ .. long  pause .. ]\n('w',2013-11-07 15:54:07.847302 UTC)
  \  [ .. short pause .. ]\n('x',2013-11-07 15:54:07.946071 UTC)   [ .. short pause
  .. ]\n('y',2013-11-07 15:54:08.045846 UTC)   [ .. short pause .. ]\n('z',2013-11-07
  15:54:08.145573 UTC)   [ .. short pause .. ]\n\nλ: -- \"Delay\" the output by -2
  seconds, which means\nλ: -- skip ahead by 2 seconds\nλ: let myPrint = (\\v -> (getCurrentTime
  >>= \\t -> print (v,t))) :: Char -> IO ()\nλ: runEffect $ for (each \"abcdwxyz\"
  >-> relativeTimeCatDelayedBy timeOfChar (-0.2)) (lift . myPrint)\n('c',2013-11-08
  02:55:37.131626 UTC)\n('d',2013-11-08 02:55:37.232347 UTC)   [ .. we discarded the
  early data .. ]\n('w',2013-11-08 02:55:39.134008 UTC)   [ .. and jumped in immediately
  \  .. ]  \n('x',2013-11-08 02:55:39.232772 UTC)   [ .. at 'c'                      ..
  ]\n('y',2013-11-08 02:55:39.332545 UTC)\n('z',2013-11-08 02:55:39.432303 UTC)\n\n```\n"
description-type: markdown
hash: a9bfce30c18db1929640857ab1df4a64f401071a709cfcdc44159aece2ec75d3
homepage: http://github.com/ImAlsoGreg/pipes-rt
latest: 0.5.0
license-name: BSD-3-Clause
maintainer: Greg Hale <imalsogreg@gmail.com>
synopsis: A few pipes to control the timing of yields
test-bench-deps: {}
