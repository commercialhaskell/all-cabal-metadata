homepage: https://github.com/aaronallen8455/pinned-warnings#readme
changelog-type: markdown
hash: a933b88f6380a0f5c87ee156e43a1d6e84f97043273216843f7e1fc8f9ee5b76
test-bench-deps:
  pinned-warnings: -any
  bytestring: -any
  base: -any
  tasty-hunit: -any
  tasty: -any
maintainer: aaronallen8455@gmail.com
synopsis: Preserve warnings in a GHCi session
changelog: |
  # Revision history for pinned-warnings

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  ghc: '>=8.8 && <9.1'
  bytestring: '>=0.10.12 && <0.11'
  base: '>=4.14.1 && <5'
  time: '>=1.9.3 && <1.10'
  containers: '>=0.6.2 && <0.7'
  transformers: '>=0.5.6 && <0.6'
  directory: '>=1.3.6 && <1.4'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
author: Aaron Allen
latest: 0.1.0.8
description-type: markdown
description: |
  # Pinned Warnings

  ### The problem
  When working in GHCi, it's easy to lose track of warnings from modules other
  than the one you are currently editing. Having to reload the project to catch
  any warnings you might have missed is painful.

  ### The solution
  This package has a GHC plugin that allows you to see all the current warnings
  from all modules in GHCi by calling a special `showWarnings` function.

  ### Usage
  You can start GHCi in your project with one of the following commands to enable
  the necessary plugin. Add `pinned-warnings` as a package dependency to avoid
  having to include the additional argument.
  ```
  cabal update
  cabal new-repl -b pinned-warnings --repl-options="-fplugin PinnedWarnings"

  stack update
  stack repl --package pinned-warnings --ghci-options "-fplugin PinnedWarnings"
  ```
  Then you must add the `ShowWarnings` module to the GHCi context:
  ```
  :m + ShowWarnings
  ```
  Now all active warnings can be viewed by evaluating `showWarnings`.

  ### Tip
  You can define a custom GHCi command in your `.ghci` file that adds the
  `ShowWarnings` module and calls `showWarnings`:
  ```
  :def sw (\_ -> pure ":m + ShowWarnings \n showWarnings")
  ```
  With this you can simply use `:sw` to view warnings.

  ### Fixing warnings
  There is limited functionality for automatically fixing warnings. Currently
  only warnings due to redundant module import statements are corrected but there
  is room for improvement in this regard.

  To use this functionality, have the `ShowWarnings` module added to your GHCi
  session then evaluate `fixWarnings`.

  ### Known limitations
  - Warnings that aren't for a specific module are not captured.
  - Only the versions of GHC specified in the cabal file are supported (8.10, 9.0)
  - If you make changes to files and call `showWarnings` without reloading first,
    the messages may not be referencing the right code anymore.
license-name: BSD-3-Clause
