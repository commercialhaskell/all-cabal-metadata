all-versions:
- 1.0.0
author: Gabriella Gonzalez
basic-deps:
  aeson: '>=0'
  base: '>=4.15.0.0 && <5'
  containers: '>=0'
  http-api-data: '>=0'
  http-client: '>=0'
  http-client-tls: '>=0'
  pinecone: '>=0'
  scientific: '>=0'
  servant: '>=0'
  servant-client: '>=0'
  servant-client-core: '>=0'
  text: '>=0'
  time: '>=0'
  vector: '>=0'
changelog: |
  1.0.0:

  - Initial release
changelog-type: markdown
description: |
  # `pinecone`

  This provides a binding to Pinecone's API using `servant`

  Example usage:

  ```haskell
  {-# LANGUAGE BlockArguments #-}
  {-# LANGUAGE DuplicateRecordFields #-}
  {-# LANGUAGE NamedFieldPuns #-}
  {-# LANGUAGE RecordWildCards #-}
  {-# LANGUAGE OverloadedStrings #-}

  import Pinecone
  import Pinecone.Indexes
  import Pinecone.Search
  import Pinecone.Vectors

  import qualified Control.Exception as Exception
  import qualified Data.Text as Text
  import qualified System.Environment as Environment

  main :: IO ()
  main = do
      controlEnv <- getClientEnv "https://api.pinecone.io"

      key <- Environment.getEnv "PINECONE_KEY"

      let token = Text.pack key

      let ControlMethods{..} = makeControlMethods controlEnv token

      let open = createIndexWithEmbedding _CreateIndexWithEmbedding
              { name = "test"
              , cloud = AWS
              , region = "us-east-1"
              , embed = EmbedRequest
                  { model = "llama-text-embed-v2"
                  , metric = Nothing
                  , read_parameters = Nothing
                  , write_parameters = Nothing
                  }
              }

      let close IndexModel{ name } = deleteIndex name

      Exception.bracket open close \IndexModel{ name, host } -> do
          let waitUntilIndexReady = do
                  IndexModel{ status } <- describeIndex name

                  let Status{ ready } = status

                  if ready
                      then return ()
                      else waitUntilIndexReady

          waitUntilIndexReady

          dataEnv <- getClientEnv host

          let DataMethods{..} = makeDataMethods dataEnv token

          upsertText "test" _Record{ id = "hi", text = "Hello, world!" }
          upsertText "test" _Record{ id = "bye", text = "Goodbye, world!" }

          -- Pinecone is eventually consistent, so we have to wait
          let waitUntilVectorsReady = do
                  IndexStats{ totalVectorCount } <- getIndexStats _GetIndexStats

                  if totalVectorCount == 2
                      then return ()
                      else waitUntilVectorsReady

          waitUntilVectorsReady

          Hits{ hits } <- searchWithText "test" SearchWithText
              { query = _Query{ top_k = 1, input = Just "best greeting"  }
              , fields = Nothing
              , rerank = Nothing
              }

          print (fmap _id hits) -- ["hi"]
  ```
description-type: markdown
hash: 369a1eb2c330020f6e47f9b02ba391dd8f766c5bb6479e47a8732d6cd18e3898
homepage: ''
latest: 1.0.0
license-name: BSD-3-Clause
maintainer: GenuineGabriella@gmail.com
synopsis: Servant bindings to Pinecone
test-bench-deps:
  base: '>=0'
  pinecone: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  vector: '>=0'
