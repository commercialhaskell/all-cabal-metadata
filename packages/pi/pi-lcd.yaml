all-versions:
- 0.1.0.0
- 0.1.1.0
author: Patrick Pelletier
basic-deps:
  base: '>=4.6 && <5'
  bytestring: '>=0.10.0.2 && <0.11'
  clock: '>=0.7.2 && <0.9'
  deepseq: '>=1.3 && <1.5'
  pi-lcd: '>=0'
  text: '>=1.1 && <1.3'
  unix: '>=2.7 && <2.8'
  unordered-containers: '>=0.2.4 && <0.3'
changelog: |
  <!-- -*- text -*- prevent Emacs from formatting ChangeLog incorrectly -->
  # Revision history for pi-lcd

  ## 0.1.1.0  -- 2017-04-27

  * Fix space leak

  * Mask async exceptions to make operations atomic.

  * Improved documentation.

  ## 0.1.0.0  -- 2017-02-17

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  [![Hackage](https://img.shields.io/hackage/v/pi-lcd.svg)](https://hackage.haskell.org/package/pi-lcd)
  [![Build Status](https://travis-ci.org/ppelleti/pi-lcd.svg?branch=master)](https://travis-ci.org/ppelleti/pi-lcd)

  This package allows using an
  [Adafruit character LCD and keypad kit][1] on a Raspberry Pi from
  Haskell.  The LCD+Keypad Kit has a 16x2 character LCD, an RGB LED
  backlight, and five buttons.  It works on all models of Raspberry Pi,
  and plugs into the GPIO header.  It only uses the I²C pins on the
  header.

  This library automatically handles Unicode, using the LCD controller's
  built-in characters where possible, and using the "custom characters"
  feature, along with a [5x8 font][3] bundled with this package, to
  emulate Unicode characters which are not built-in.  The user of the
  library can also define their own custom characters.

  Everything you need to use one of these LCDs is exposed in the
  `System.Hardware.PiLcd` module.  The submodules are only exposed
  because they might be useful to reuse for other types of hardware,
  such as if you are using an MCP23017 port expander or an HD44780
  display controller in some other context.  But if you're using the
  Adafruit character LCD and keypad kit, all you need is
  `System.Hardware.PiLcd`.

  Before using this package, you'll need to make sure that
  [I²C is enabled][2] on your Raspberry Pi, under "Advanced Options" in
  `raspi-config`.

  Using `PiLcd` is as easy as:

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import System.Hardware.PiLcd

  main = do
    lcd <- openPiLcd defaultLcdAddress defaultLcdOptions
    updateDisplay lcd ["Hello,", "World!"]
    setBacklightColor lcd Cyan
    closePiLcd lcd
  ```

  There are additional examples in the `examples` directory.

  This library is specifically designed to work with GHC 7.6.3 and up,
  and to not use Template Haskell, so it will work with the
  system-supplied version of GHC on Raspbian "Jessie."  Just do
  `sudo apt-get install ghc cabal-install` and you're good to go.  (You
  should also increase the swap space by editing `/etc/dphys-swapfile`.)
  There are other ways to install more recent versions of GHC if you
  want; see the [wiki page][5] for details.

  This is a fairly early release, and there might be breaking changes in
  the future.  Please contact me, by filing a GitHub issue, or by
  [email][4], if you have any feedback on the library.  I'd also be
  curious to hear how the library is being used!

  [![LCD with Haskell logo](http://funwithsoftware.org/images/2017-Haskell-LCD-800px.jpg)](https://www.flickr.com/photos/107479024@N04/32593808450/)

  [1]: https://www.adafruit.com/categories/808
  [2]: https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c
  [3]: https://www.cl.cam.ac.uk/~mgk25/ucs-fonts.html
  [4]: http://funwithsoftware.org/contact.html
  [5]: https://wiki.haskell.org/Raspberry_Pi
description-type: markdown
hash: ba4a230a55fe836dd0148dee3be169975f8867d81fe1983885981edc4ce9773e
homepage: https://github.com/ppelleti/pi-lcd
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: code@funwithsoftware.org
synopsis: Control an Adafruit character LCD and keypad kit on a Raspberry Pi
test-bench-deps: {}
