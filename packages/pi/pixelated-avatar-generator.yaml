all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
author: Christopher Wells
basic-deps:
  JuicyPixels: '>=3.2.7'
  async: '>=2.0.2'
  base: '>=4.7 && <5'
  bytestring: '>=0.10.6.0'
  cli: '>=0.1.2'
  pixelated-avatar-generator: '>=0'
  pureMD5: '>=2.1.0.0'
  random: '>=1.0.0.2'
  split: '>=0.2.3.0'
changelog: |
  # Changelog

  ## 0.1.3
  * Create new executable program.
  * Make several small internal fixes.
  * Add badges for Hackage and Stackage to readme.

  ## 0.1.2
  * Add missing test files to Cabal config, to allow tests to pass from Hackage package.

  ## 0.1.1
  * Implement saving with different image formats.
  * Add image format conversion functions for PNG, GIF, and TIFF.
  * Change the example image in the readme file.
  * Add a link to the Hackage package to the readme file.
  * Document the process of making a release of the package.
  * Add information on the library to the readme file.
  * Improve the documentation of the library.
  * Improve some of the avatar colors.

  ## 0.1.0
  * Implement generation and saving of avatars.
  * Implement avatar upscaling.
  * Create example executable program that makes use of the library.
changelog-type: markdown
description: |
  # Pixelated Avatar Generator [![Travis CI Status](https://api.travis-ci.org/ExcaliburZero/pixelated-avatar-generator.svg)](https://travis-ci.org/ExcaliburZero/pixelated-avatar-generator) [![Coverage Status](https://coveralls.io/repos/github/ExcaliburZero/pixelated-avatar-generator/badge.svg?branch=master)](https://coveralls.io/github/ExcaliburZero/pixelated-avatar-generator?branch=master) [![Hackage](https://img.shields.io/hackage/v/pixelated-avatar-generator.svg)](https://hackage.haskell.org/package/pixelated-avatar-generator) [![pixelated-avatar-generator on Stackage Nightly](https://www.stackage.org/package/pixelated-avatar-generator/badge/nightly)](http://stackage.org/nightly/package/pixelated-avatar-generator)
  Pixelated Avatar Generator is a Haskell library and application for generating pixelated avatar images from seed values.

  ```haskell
  import Graphics.Avatars.Pixelated

  createAndSaveAvatar :: String -> FilePath -> IO ()
  createAndSaveAvatar s path = saveAvatar avatar path
    where avatar = scaleAvatar 32 $ generateAvatar seed
          seed   = createSeed s
  ```

  ![Some examples of avatars generated by the library.](example_image.png)

  ## Library
  Pixelated Avatar Generator is a library which provides functions and data types for generating, altering, and saving pixelated avatars.

  For information on how to use the library, see the documentation for the [`Graphics.Avatars.Pixelated`](https://hackage.haskell.org/package/pixelated-avatar-generator/docs/Graphics-Avatars-Pixelated.html) module.

  ### Documentation
  The documentation for the latest release of the library can be found in [the library's Hackage entry](https://hackage.haskell.org/package/pixelated-avatar-generator).

  Documentation of the development versions of the library can be generated by running the following command in the main directory of the project:

  ```
  $ stack haddock
  ```

  The generated html documentation can then be found in the following directory:

  ```
  .stack-work/dist/x86_64-linux/Cabal-1.22.5.0/doc
  ```

  ## Executable
  An executable program for generating avatar image files is also provided. It can generate several avatar images concurrently to given file locations.

  The executable can be installed along with the library by running the following command:

  ```
  $ stack install pixelated-avatar-generator
  ```

  The executable can then by run by calling it with the desired filepath(s) of the output file(s) including the `.png` extension.

  ```
  $ pixelated-avatar-generator image1.png image2.png
  Successfully created 2 avatars.
  ```

  By default, the avatars are at a size of 256x256px. Though the size can be changed by using a custom scaling factor via the `--scaling-factor` flag.

  ### Usage
  ```
  Usage: pixelated-avatar-generator FILEPATH_1 [FILEPATH_2] [FILEPATH_3] ...

  FILEPATH_(1...)   -- The locations to save generated avatars at. "img/test.png"

  Options:

       --scaling-factor
           Use a custom scaling factor. The scaling factor is multiplied by 8 to
           get the dimensions of the image. For example, a scaling factor of 4
           would yield a 32x32px image. The default scaling factor is 32.
  ```

  ## License
  The source code of Pixelated Avatar Generator is available under the [MIT license](https://opensource.org/licenses/MIT), see `LICENSE` for more information.
description-type: markdown
hash: d6907fa2b5d54fa252347ea3f092509c6f245b119a34a568be68095feac7082a
homepage: https://github.com/ExcaliburZero/pixelated-avatar-generator
latest: 0.1.3
license-name: MIT
maintainer: cwellsny@nycap.rr.com
synopsis: A library and application for generating pixelated avatars.
test-bench-deps:
  JuicyPixels: '>=3.2.7'
  QuickCheck: '>=0'
  base: '>=0'
  bytestring: '>=0.10.6.0'
  hspec: '>=0'
  pixelated-avatar-generator: '>=0'
