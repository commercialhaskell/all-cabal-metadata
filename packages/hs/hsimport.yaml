all-versions:
- '0.1'
- 0.1.1
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.6.1
- 0.2.6.2
- 0.2.6.3
- 0.2.6.4
- 0.2.6.5
- 0.2.6.6
- 0.2.6.7
- 0.2.6.8
- 0.2.7
- 0.2.8
- 0.2.9
- 0.2.10
- 0.2.11
- '0.3'
- '0.4'
- '0.5'
- 0.5.1
- 0.5.2
- '0.6'
- 0.6.1
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.6.6
- 0.6.7
- '0.7'
- 0.7.1
- 0.8.0
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- 0.8.6
- 0.8.8
- 0.9.0
- 0.10.0
- 0.11.0
author: Daniel Trstenjak
basic-deps:
  attoparsec: '>=0.10.4.0 && <0.14'
  base: '>=3 && <5'
  cmdargs: '>=0.10.5 && <0.11'
  directory: '>=1.2.0.1 && <1.4'
  dyre: '>=0.8 && <0.9'
  haskell-src-exts: '>=1.18.0 && <1.24'
  hsimport: '>=0'
  ilist: '>=0.1 && <0.5'
  microlens: '>=0.4 && <0.5'
  mtl: '>=2.1.2 && <2.3'
  split: '>=0.2.2 && <0.3'
  text: '>=0.11.3.1 && <1.3'
changelog: |
  0.11.0
  ------
  * Add option '--hiding' to hide symbols from import

  0.10.0
  ------
  * Ensure that no imports are placed inbetween cpp directives

  0.9.0
  -----
  * Support haddock comments

  0.8.8
  -----
  * Update README

  0.8.7
  -----
  * Raise upper bound of 'haskell-src-exts'
  * Tested with ghc 8.6.3

  0.8.6
  -----
  * Raise upper bounds of tasty
  * Tested with GHC 8.4.2

  0.8.5
  -----
  * Raise upper bounds of tasty and haskell-src-exts

  0.8.3
  -----
  * Raise upper bound of directory

  0.8.2
  -----
  * Update README

  0.8.1
  -----
  * Use SrcSpan info of haskell-src-exts instead of parsing import declarations by hand

  0.8.0
  -----
  * Changes for haskell-src-exts 1.18.0
  * Support GHC 8.0.1

  0.7.1
  -----
  * Switch from lens to microlens (for faster compiling)

  0.7
  ---
  * Changes for haskell-src-exts 1.17.0

  0.6.7
  -----
  * More robust handling of invalid Haskell source code

  0.6.6
  -----
  * Raise upper bounds of dependencies

  0.6.5
  -----
  * Support GHC 7.10.1

  0.6.4
  -----
  * Raise upper bounds of dependencies

  0.6.3
  -----
  * Raise upper bounds of dependencies

  0.6.2
  -----
  * Fixing build failure of tasty 0.8.1.3

  0.6.1
  -----
  * Changes for haskell-src-exts 1.16.0

  0.6
  ---
  * Add option '--as'

      $> hsimport -m 'Control.Monad' --as 'CM' SomeSource.hs
      => import Control.Monad as CM

  0.5.2
  -----
  * Build/tested with GHC 7.8.3

  0.5.1
  -----
  * Better handling of multi line imports like:

     import Control.Monad
        (when)

     import Control.Monad
        ( when
        , unless
        )
changelog-type: text
description: "hsimport\n========\n\nA command line program for extending the import
  list of a Haskell source file.\n\n`hsimport` gets the module name and the symbol
  name to import as arguments,\nparses the given source file using the library `haskell-src-exts`
  and then tries\nto only extend the import list if it's necessary. If the symbol
  is already\nimported or if the whole module is already imported, then the given
  source file\nisn't changed.\n\nInstallation\n------------\n\n    cabal install hsimport\n\nExamples\n--------\n\n
  \   $> hsimport -m 'Control.Monad' SomeSource.hs\n    => import Control.Monad\n\n
  \   $> hsimport -m 'Control.Monad' -s 'when' SomeSource.hs\n    => import Control.Monad
  (when)\n\n    $> hsimport -m 'Control.Monad' -q 'CM' SomeSource.hs\n    => import
  qualified Control.Monad as CM\n\n    $> hsimport -m 'Control.Monad' --as 'CM' SomeSource.hs\n
  \   => import Control.Monad as CM\n\n    $> hsimport -m 'Data.Maybe' -s 'Maybe'\n
  \   => import Data.Maybe (Maybe)\n\n    $> hsimport -m 'Data.Maybe' -s 'Maybe' -a\n
  \   => import Data.Maybe (Maybe(..))\n\n    $> hsimport -m 'Data.Maybe' -s 'Maybe'
  -w 'Just'\n    => import Data.Maybe (Maybe(Just))\n\n    $> hsimport -m 'Data.Maybe'
  -s 'Maybe' -w 'Just' -w 'Nothing'\n    => import Data.Maybe (Maybe(Just, Nothing))\n\nConfiguration\n-------------\n\nThe
  easiest way to configure `hsimport` is by creating a `cabal` project.\nAn example
  for this is [here](<https://github.com/dan-t/hsimport-config>).\n\n\nThe other way
  - which most likely isn't worth the hassle - is by writting a `~/.config/hsimport/hsimport.hs`
  file:\n\n    -- ~/.config/hsimport/hsimport.hs\n    import qualified Language.Haskell.Exts
  as HS\n    import HsImport\n\n    main :: IO ()\n    main = hsimport $ defaultConfig
  { prettyPrint = prettyPrint, findImportPos = findImportPos }\n       where\n          --
  This is a bogus implementation of prettyPrint, because it doesn't handle the\n          --
  qualified import case nor does it considers any explicitely imported or hidden symbols.\n
  \         prettyPrint :: ImportDecl -> String\n          prettyPrint (ImportDecl
  { HS.importModule = HS.ModuleName _ modName }) =\n             \"import \" ++ modName\n\n
  \         -- This findImportPos implementation will always add the new import declaration\n
  \         -- at the end of the current ones. The data type ImportPos has the two
  constructors\n          -- After and Before.\n          findImportPos :: ImportDecl
  -> [ImportDecl] -> Maybe ImportPos\n          findImportPos         _             []
  = Nothing\n          findImportPos newImport currentImports = Just . After . last
  $ currentImports\n\nThe position of the configuration file depends on the result
  of `getUserConfigDir \"hsimport\"`,\nwhich is a function from the package [xdg-basedir](<https://hackage.haskell.org/package/xdg-basedir>),\non
  linux like systems it is `~/.config/hsimport/hsimport.hs`.\n\nIf you've modified
  the configuration file, then the next call of `hsimport` will ensure a rebuild.\nIf
  you've installed `hsimport` with `cabal install`, without using a sandbox, then
  this should just work.\n\nIf you've build `hsimport` inside of a sandbox, then you
  most likely have to temporary modify the\n`GHC_PACKAGE_PATH` for the next call of
  `hsimport`, to point `ghc` to the global database and\nto the package database of
  the sandbox.\n\n    # global package database\n    $> export GLOBAL_PKG_DB=/usr/lib/ghc/package.conf.d/\n\n
  \   # hsimport sandbox package database\n    $> export SANDBOX_PKG_DB=/home/you/hsimport-build-dir/.cabal-sandbox/*-packages.conf.d/\n\n
  \   $> GHC_PACKAGE_PATH=$GLOBAL_PKG_DB:$SANDBOX_PKG_DB hsimport --help\n\nText Editor
  Integration\n-----------------------\n\n[vim-hsimport](<https://github.com/dan-t/vim-hsimport>)\n\nCommand
  Line Usage\n------------------\n\n    $> hsimport --help\n    hsimport [OPTIONS]
  [SOURCEFILE]\n      A command line program for extending the import list of a Haskell
  source\n      file.\n    \n    Common flags:\n      -m --modulename=ITEM     The
  module to import\n      -s --symbolname=ITEM     The symbol to import, if empty,
  the entire module\n                               is imported\n      -a --all                 All
  constructors or methods of the symbol should\n                               be
  imported: 'Symbol(..)'\n      -w --with=ITEM           The constructors or methods
  of the symbol\n                               should be imported: 'Symbol(With)'\n
  \     -q --qualifiedname=ITEM  The name to use for a qualified module import\n      -o
  --outputsrcfile=FILE  Save modified source file to file, if empty, the\n                               source
  file is modified inplace\n      -h --help                Display help message\n
  \     -v --version             Print version information\n\nIssues\n------\n\nThere
  is some rudimentarily handling for code using CPP, but the import statements\nmight
  be added at the wrong place, because the lines containing CPP directives\nare ignored
  and therefore they aren't considered in the source line count.\n"
description-type: markdown
hash: 5e5ee7b7dc8e173d0d261f751d4f52941d2934da67bb226bda4992399e72fe04
homepage: ''
latest: 0.11.0
license-name: BSD-3-Clause
maintainer: power.walross@gmail.com
synopsis: Extend the import list of a Haskell source file
test-bench-deps:
  base: '>=3 && <5'
  bytestring: '>=0.10.8.2 && <0.11'
  filepath: '>=1.3.0.1 && <1.5'
  haskell-src-exts: '>=0'
  hsimport: '>=0'
  tasty: '>=0.9.0.1 && <1.3'
  tasty-golden: '>=2.2.0.1 && <2.4'
  utf8-string: '>=1.0.1.1 && <1.1'
