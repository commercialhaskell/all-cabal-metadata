homepage: https://github.com/freckle/hs-opentelemetry-awsxray#readme
changelog-type: markdown
hash: dec49a81296c91a64a5a7037ac967c0f952974eed6c92de56e58b0eef58561c1
test-bench-deps:
  base: '>=4.11.1.0 && <5'
  unordered-containers: -any
  hspec: -any
  text: -any
  hs-opentelemetry-api: -any
  hs-opentelemetry-awsxray: -any
maintainer: Freckle Education
synopsis: '[synopsis]'
changelog: |
  ## [_Unreleased_](https://github.com/freckle/hs-opentelemetry-awsxray/compare/v0.1.0.1...main)

  ## [v0.1.0.1](https://github.com/freckle/hs-opentelemetry-awsxray/compare/v0.1.0.0...v0.1.0.1)

  - Add top-level re-export module

  ## [v0.1.0.0](https://github.com/freckle/hs-opentelemetry-awsxray/tree/v0.1.0.0)

  First tagged release.
basic-deps:
  bytestring: -any
  unliftio: -any
  base: '>=4.11.1.0 && <5'
  time: -any
  unordered-containers: -any
  text: -any
  hs-opentelemetry-api: -any
  memory: -any
  unliftio-core: -any
  hs-opentelemetry-sdk: -any
  random: '>=1.2.1'
  errors: -any
  http-types: -any
  microlens: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
author: ''
latest: 0.1.0.1
description-type: markdown
description: |
  # AWS X-Ray Support for hs-opentelemetry

  <!-- TODO
  [![Hackage](https://img.shields.io/hackage/v/hs-opentelemetry-awsxray.svg?style=flat)](https://hackage.haskell.org/package/hs-opentelemetry-awsxray)
  [![Stackage Nightly](http://stackage.org/package/hs-opentelemetry-awsxray/badge/nightly)](http://stackage.org/nightly/package/hs-opentelemetry-awsxray)
  [![Stackage LTS](http://stackage.org/package/hs-opentelemetry-awsxray/badge/lts)](http://stackage.org/lts/package/hs-opentelemetry-awsxray)
  -->

  [![CI](https://github.com/freckle/hs-opentelemetry-awsxray/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/hs-opentelemetry-awsxray/actions/workflows/ci.yml)

  An `IdGenerator` and `Propagator` for [`hs-opentelemetry-sdk`][sdk] that
  generates and propagates `TraceId` and `SpanId` values that are [compatible with
  AWS X-Ray][xray].

  [sdk]: https://hackage.haskell.org/package/hs-opentelemetry-sdk
  [xray]: https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids

  ## Usage

  The API currently exposed by the `hs-opentelemetry-sdk` package lacks a
  convenient way to modify the `TracerProviderOptions` (to tell it to use our
  generator/propagator) as part of initialization. You basically have to
  re-implement the internals of `initializeTracerProvider` to do so.

  While we plan to open a PR upstream to address the lack of API here, the
  workaround approach has at least been been encapsulated in a module of this
  library for convenience:

  ```hs
  import OpenTelemetry.AWSXRay
  import OpenTelemetry.Trace
  import OpenTelemetry.Trace.Setup
  import OpenTelemetry.Trace.Setup.Lens

  main :: IO ()
  main = do
    withTracerProvider modifyTracerProviderOptions $ \tracerProvider -> do
      let tracer = makeTracer tracerProvider "my-app" tracerOptions

      -- do something with tracer

  modifyTracerProviderOptions :: TracerProviderOptions -> TracerProviderOptions
  modifyTracerProviderOptions =
    idGeneratorL .~ awsXRayIdGenerator
      . propagatorL <>~ awsXRayContextPropagator
  ```

  This example uses lens, but you certainly don't have to.

  ## Additional References

  - https://docs.aws.amazon.com/xray/latest/devguide/xray-services-adot.html
  - https://aws.amazon.com/blogs/opensource/migrating-x-ray-tracing-to-aws-distro-for-opentelemetry/

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
