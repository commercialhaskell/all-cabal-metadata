all-versions:
- 0.1.0
author: Junji Hashimoto
basic-deps:
  base: '>=4.6 && <5'
  containers: '>=0'
  shakespeare: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: |
  ## 0.1.0

  * First Release
changelog-type: markdown
description: "# HsVerilog: Synthesizable Verilog DSL supporting for multiple clock
  and reset\n\n[![Hackage version](https://img.shields.io/hackage/v/hsverilog.svg?style=flat)](https://hackage.haskell.org/package/hsverilog)
  \ [![Build Status](https://travis-ci.org/junjihashimoto/hsverilog.png?branch=master)](https://travis-ci.org/junjihashimoto/hsverilog)
  [![Coverage Status](https://coveralls.io/repos/junjihashimoto/hsverilog/badge.png)](https://coveralls.io/r/junjihashimoto/hsverilog)\n\n##
  Getting started\n\nInstall this from Hackage.\n\n    cabal update && cabal install
  hsverilog\n\n## Usage\n\nSyntax is similar to Verilog.\nSee tests/test.hs and following
  examples.\n\n\n### counter circuit\n\n```\ncircuit \"counter\" $ do\n  clk <- input
  \"clk\" Bit\n  rstn <- input \"rstn\" Bit\n  _ <- output \"dout\" $ 7><0\n  reg
  \"dout\" (7><0) [Posedge clk,Negedge rstn] $ \\dout ->\n    If (Not (S rstn)) 0
  $\n      If (Eq dout 7) \n        0\n        (dout + 1)\n```\n"
description-type: markdown
hash: 83c904b85746c977c8c154df42c7aee26336febbd76041267395fda0d0168140
homepage: ''
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: junji.hashimoto@gmail.com
synopsis: Synthesizable Verilog DSL supporting for multiple clock and reset
test-bench-deps:
  base: '>=0'
  containers: '>=0'
  hspec: '>=0'
  hspec-contrib: '>=0'
  hspec-expectations-lifted: '>=0'
  hsverilog: '>=0'
  shakespeare: '>=0'
  text: '>=0'
  transformers: '>=0'
