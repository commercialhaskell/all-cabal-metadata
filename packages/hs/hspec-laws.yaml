all-versions:
- 0.0.0
author: Simon Hengel <sol@typeful.net>
basic-deps:
  QuickCheck: '>=0'
  base: '>=4 && <5'
  hspec: '>=1.4'
changelog: ''
changelog-type: ''
description: |
  # Reusable specifications
  (similar in spirit to [checkers](http://hackage.haskell.org/package/checkers))

  ## Check Monoid laws

  `shouldSatisfyMonoidLaws` can be used to specify, that a given type should
  satisfy the Monoid laws.

  ~~~ {.haskell .literate}
  -- file Spec.hs
  import Test.Hspec
  import Test.Hspec.Laws

  main :: IO ()
  main = hspec $ do
    describe "List as a Monoid" $
      shouldSatisfyMonoidLaws (undefined :: [Int])
  ~~~

  Running this produces a nice spec.

  ~~~
  $ runhaskell Spec.hs

  List as a Monoid
    mempty
      - is a left identity
      - is a right identity

    mappend
      - is associative

  Finished in 0.1142 seconds
  3 examples, 0 failures
  ~~~
description-type: text
hash: 68d3aaf92af0b386a479c18243e80f258ad478b6437163a7f557e0918ade91b9
homepage: ''
latest: 0.0.0
license-name: MIT
maintainer: Simon Hengel <sol@typeful.net>
synopsis: Document and test laws for standard type classes
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4 && <5'
  hspec: '>=0'
  hspec-laws: '>=0'
  markdown-unlit: '>=0'
