all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
author: Mitchell Vitez
basic-deps:
  base: '>=0'
  containers: '>=0'
  cpython: '>=3.5.1'
  mtl: '>=0'
  template-haskell: '>=0'
  text: '>=0'
changelog: |
  # ChangeLog

  ## 0.3.0

  Use the new CPython.Simple API

  ## 0.2.0

  Update cpython version to be >= 3.5

  ## 0.1.0

  Initial bindings to (most of) PyAutoGUI
changelog-type: markdown
description: "# hsautogui\n\nHaskell bindings for [PyAutoGUI](https://pyautogui.readthedocs.io)\n\n##
  About\n\nThese are straightforward Haskell bindings for PyAutoGUI, a library for
  automating user interaction tasks, using haskell-cpython. \n\nThis is just about
  the simplest possible example:\n\n```haskell\nimport AutoGUI\nmain = do\n  initialize\n
  \ write \"Hello, world!\"\n```\n\nThis doesn't just print `Hello, world!` to the
  screen, but instead simulates a user typing it in.\n\n## Language Comparison\n\nThe
  following Haskell and Python examples do the same thing:\n\n```haskell\nimport AutoGUI\nimport
  Control.Monad (forM_)\n\nmain :: IO ()\nmain = do\n  initialize\n  putStrLn \"3
  seconds until beeping begins\"\n  sleep 3\n  forM_ [1..100] $ \\i -> do\n    write
  \"beep\"\n    press [key|enter|]\n    sleep 0.5\n```\n\n```python\nimport pyautogui\nimport
  time\n\nprint('3 seconds until beeping begins')\ntime.sleep(3)\n\nfor i in range(1,
  101):\n    pyautogui.write('beep')\n    pyautogui.press('enter')\n    time.sleep(0.5)\n```\n\n##
  Constructing a `Key`\n\nBecause not all valid `Text`s are valid `Key`s, we need
  a way to check that `Key`s are valid when creating them. This leads to `mkKey ::
  Text -> Maybe Key`. However, using the `key` quasiquoter, we can sidestep having
  to use `Maybe` by catching invalid keys at compile time. For example, `[key|backspace|]`
  is a valid `Key` which we can construct and check at compile time.\n\nThis is especially
  useful for some data that looks like this, where there are way too many values (and
  values with strange characters) for a sum type to be especially handy, but we want
  to check validity in some way. We generally know which keys we want to use at compile
  time.\n\n## Overview\n\n### General\n\n### Debug\n- `pause :: Double -> IO ()` -
  Set a number of seconds to wait in between autogui actions\n- `failsafe :: Bool
  -> IO ()` - When set to true, move the mouse to the upper-left corner of the screen
  to throw a Python exception, and quit the program\n- `sleep :: Double -> IO ()`
  - Sleep for a given fractional number of seconds\n\n### Info\n- `size :: IO (Integer,
  Integer)` - (screenWidth, screenHeight) of the primary monitor in pixels\n- `position
  :: IO (Integer, Integer)` - (x, y) position of the mouse\n- `onScreen :: Integer
  -> Integer -> IO Bool` - Test whether (x, y) is within the screen size\n\n### Keyboard\n-
  `write :: Text -> IO ()` - Write out some Text as though it were entered with the
  keyboard\n- `typewrite :: Text -> IO ()` - Write out some Text as though it were
  entered with the keyboard, newline is enter\n- `typewriteKeys :: [Key] -> IO ()`
  - Write out some Text as though it were entered with the keyboard, newline is enter\n-
  `writeWithInterval :: Text -> Double -> IO ()` - Write out some Text as though it
  were entered with the keyboard, with a specified number of seconds between keypresses\n-
  `press :: Key -> IO ()` - Simulate a keypress\n- `keyDown :: Key -> IO ()` - Simulate
  holding a key down\n- `keyUp :: Key -> IO ()` - Simulate releasing a key\n- `hotkey
  :: [Key] -> IO ()` - Press a key combination\n\n### Keys\n- `key :: QuasiQuoter`
  - This quasiquoter lets you use [key|enter|] at compile time, so you don't get a
  Maybe as you would from mkKey\n- `mkKey :: Text -> Maybe Key`\n- `keyToText :: Key
  -> Text`\n- `isValidKey :: Text -> Bool`\n- `keys :: Set Key`\n\n### Message Boxes\n-
  `alert :: Text -> IO ()` - Show a box onscreen until dismissed\n- `confirm :: Text
  -> IO Bool` - Show a box onscreen until a user hits OK or Cancel. Return True on
  OK, False on Cancel, and False if user closes the box\n- `password :: Text -> IO
  Text` - Show a box onscreen, allowing user to enter some screened text. Return empty
  string if user closes the box\n- `prompt :: Text -> IO Text` - Show a box onscreen,
  allowing user to enter some text. Return empty string if user closes the box\n\n###
  Mouse\n- `moveTo :: Integer -> Integer -> IO ()` - Move the mouse to an (x, y) position\n-
  `moveToDuration :: Integer -> Integer -> Double -> IO ()` - Move the mouse to an
  (x, y) position, over a number of seconds\n- `moveRel :: Integer -> Integer -> IO
  ()` - Move the mouse relative to where it is now\n- `moveRelDuration :: Integer
  -> Integer -> Double -> IO ()` - Move the mouse relative to where it is now, over
  a number of seconds\n- `click :: MouseButton -> IO ()` - Click the specified mouse
  button\n- `leftClick :: IO ()` - Left click the mouse\n- `doubleClick :: IO ()`
  - Double click the mouse\n- `tripleClick :: IO ()` - Triple click the mouse\n- `rightClick
  :: IO ()` - Right click the mouse\n- `middleClick :: IO ()` - Middle click the mouse\n-
  `moveAndClick :: Integer -> Integer -> IO ()` - Move the mouse to some (x, y) position
  and click there\n- `drag :: Integer -> Integer -> IO ()` - Clicks and drags the
  mouse through a motion of (x, y)\n- `dragDuration :: Integer -> Integer -> Double
  -> IO ()` - Clicks and drags the mouse through a motion of (x, y), over a number
  of seconds\n- `dragTo :: Integer -> Integer -> IO ()` - Clicks and drags the mouse
  to the position (x, y)\n- `dragToDuration :: Integer -> Integer -> Double -> IO
  ()` - Clicks and drags the mouse to the position (x, y), over a number of seconds\n-
  `dragRel :: Integer -> Integer -> IO ()` - Clicks and drags the mouse through a
  motion of (x, y)\n- `dragRelDuration :: Integer -> Integer -> Double -> IO ()` -
  Clicks and drags the mouse through a motion of (x, y)\n- `scroll :: Integer -> IO
  ()` - Scroll up (positive) or down (negative)\n- `mouseDown :: IO ()` - Press the
  mouse button down\n- `mouseUp :: IO ()` - Release the mouse button\n\n### Screen\n-
  `locateOnScreen :: FilePath -> IO (Maybe (Integer, Integer, Integer, Integer))`
  - Return (left, top, width, height) of first place the image is found\n- `locateCenterOnScreen
  :: FilePath -> IO (Maybe (Integer, Integer))` - Return (x, y) of center of an image,
  if the image is found\n\n"
description-type: markdown
hash: 7379c633f5bd74b735e31a90d8ad8ec84a2634cfca72c32f9a8e40a241bb8893
homepage: https://github.com/mitchellvitez/hsautogui#readme
latest: 0.3.0
license-name: BSD-3-Clause
maintainer: mitchell@vitez.me
synopsis: Haskell bindings for PyAutoGUI, a library for automating user interaction
test-bench-deps:
  base: '>=4.7 && <5'
  cpython: '>=3.5.1'
  hsautogui: '>=0'
  hspec: '>=0'
