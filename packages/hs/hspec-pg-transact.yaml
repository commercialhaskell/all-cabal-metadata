homepage: https://github.com/jfischoff/pg-transact-hspec#readme
changelog-type: ''
hash: 5350b93a07ff1e728377b27d37b503165cd906d54618398142b2008fcc08257a
test-bench-deps:
  tmp-postgres: -any
  base: '>=4.7 && <5'
  hspec: -any
  hspec-core: -any
  hspec-pg-transact: -any
  postgresql-simple: -any
  pg-transact: -any
maintainer: jonathangfischoff@gmail.com
synopsis: Helpers for creating database tests with hspec and pg-transact
changelog: ''
basic-deps:
  bytestring: -any
  tmp-postgres: -any
  base: '>=4.7 && <5'
  hspec: -any
  text: -any
  resource-pool: -any
  postgresql-simple: -any
  pg-transact: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
author: Jonathan Fischoff
latest: 0.1.0.3
description-type: markdown
description: |
  # hspec-pg-transact [![CI](https://github.com/jfischoff/pg-transact-hspec/actions/workflows/ci.yml/badge.svg)](https://github.com/jfischoff/pg-transact-hspec/actions/workflows/ci.yml)

  Helpers for creating database tests with hspec and pg-transact

  hspec-pg-transact utilizes tmp-postgres to automatically and connect to a
  temporary instance of postgres on a random port.

   ```haskell
  describeDB migrate "Query" $
    itDB "work" $ do
      execute_ [sql|
        INSERT INTO things
        VALUES (‘me’) |]
      query_ [sql|
        SELECT name
          FROM things |]
        `shouldReturn` [Only "me"]
   ```

  In the example above describeDB wraps describe with a beforeAll hook for
  creating a db and a afterAll hook for stopping a db.

  Tests can be written with itDB which is wrapper around it that uses the passed
  in TestDB to run a db transaction automatically for the test.

  The libary also provides a few other functions for more fine grained control
  over running transactions in tests.
license-name: BSD-3-Clause
