all-versions:
- 0.1.0.0
author: Sam May
basic-deps:
  base: '>=4.9 && <4.15'
  bitwise: '>=0.1 && <1.1'
  bytestring: '>=0.9 && <0.12'
  containers: <0.7
  hscdio: '>=0'
  mtl: <2.3
  optparse-applicative: '>=0'
  text: '>=0.3 && <1.3'
  vector: <0.13
changelog: "The Haskell bindings for libcdio follow the Haskell-standard [Package\nVersioning
  Policy](https://pvp.haskell.org), where the first three numbers\nindicate version
  (types/presence of exported symbols), the fourth number\nindicates patch (underlying
  behaviour and/or backend code), and the fifth\nindicates revision (docs, packaging,
  etc.)  This is in contrast to the C\nlibcdio itself, which (recently) uses Semantic
  Versioning; the only real\ndifference is that the first *two* numbers of the bindings
  signal a breaking\nchange, while the base library signals that with only *one*.\n\n\n##
  v/0.1.0.0.  Unreleased\n\nInitial release with nearly all of 'cdio/cdio.h' translated,
  but not necessarily\ntested, documented, or stabilized.\n\n\n### Added\n\n* f/1.1.1.
  \ Translate all core symbols brought in by simply using `#include \"cdio/cdio.h`.\n
  \ For the full list of headers this includes, see `FEATURES`.\n  Also note that
  several symbols were left untranslated; see the documentation of `Foreign.Libcdio`
  for the list.\n\t* f/1.1.3.1.  Translate `cdio/cd_types.h` as it's used in some
  bitmasks above.\n\t* f/1.1.3.2.  Integrate log messages with the monad rather than
  (impurely) printing output.\n\t* f/1.1.4.2.  Translate `cdio/util.h` as it provides
  the conversion functions for `Bcd` values.\n* f/1.3.1. f/1.3.3.1. f/1.3.3.2. f/1.3.4.2.
  \ Rewrite the documentation of the above to be more clear, more comprehensive, and
  (occasionally) more correct.\n* (some of) f/1.4.1.  Just enough of the upstream
  tests to be sure the bindings are not going *completely* off the rails.\n* f/3.1.
  f/3.3. i/008.  Provide a smoother means of accessing the library to Haskell users.\n*
  i/002.  Close the low-hanging memory leaks from being returned allocated strings,
  without obfuscating the type system.\n* i/003. i/009.  Enforce a bit more type safety
  by binding integral/string types with typesafe wrappers.\n\n### Known issues\n\n*
  i/011.  On some systems, opening a Cdio session stops the drive from recognizing
  a manual (push-button) request to open the drive.  This also occurs with other libraries,
  so it's not purely a libcdio problem, Haskell bindings or otherwise, but I come
  across it much more frequently with the bindings than anywhere else.\n* i/021.  A
  `readLog` call will occasionally return unexpected entries.\n"
changelog-type: markdown
description: "# About\nIn C, [libcdio](https://www.gnu.org/software/libcdio/) provides
  a widely-ported \nand highly-usable library for retrieving data from CDs (and disc
  images).  This \nis an area which Haskell has thus far been lacking a solution for;
  while modern \ntechnology has admittedly been moving away from discs in favour of
  downloading \nfiles over the internet, there is still some utility in the medium
  for any \nprogrammers whose projects might involve external storage (note, however,
  that \n`libcdio` only allows /reading/ discs, and leaves /authoring/ to other \nlibraries).\n\nWhile
  the majority of the core library has been translated, many supplemental \nheaders
  (MMC commands, CD-Paranoia, etc.) are not yet available; for the \ncurrent progress
  see the [FEATURES](./FEATURES) file and the \n[ROADMAP](./ROADMAP.md) for the rough
  order in which those are planned to be \ndeveloped, and please do report any bugs
  you find (or even fix them yourself!)\n\n\n# License\n\nThe original `libcdio` is
  licensed under the GPL, and these bindings, of \ncourse, follow suit.  If you do
  use this in your own project, therefore, you \nare subject to the ambiguity of whether
  linking to a GPL library then requires \nyour own code to also be released under
  the GPL.  Look elsewhere for a full \ndiscussion on what arguments are given in
  that debate, but in short, the GPL \nsays that \"a work based on the Program\" must
  *also* be released under the GPL.\n\nTo err on the side of caution, if you use this
  library, release your code under \nthe GPL.  To do otherwise is to take a firm stance
  against the linking argument \nat best, violate the copyright at worst, and make
  GPL proponents angry at you \neither way.\n\n\n# Installation\n\n## Requirements\n\nAs
  with nearly every Haskell project, the `.cabal` file maintains the list of \ndependencies,
  and that should be taken as authoritative over anywhere else \nexcept Hackage revisions,
  and I'll try to keep the code up to date with those.\n\nNotably, the actual core
  of this package is the C `libcdio` library.  All \nbindings should fail gracefully
  for any version within the supported range, and \nso should be safe to call blindly,
  but this is accomplished via preprocessor \ncommands, and so *this package must
  be recompiled whenever the base libcdio \nversion changes*.  Minor version bumps
  to the underlying library (and certainly \npatch releases) should still run safely
  after being recompiled, but there may \nbe some unexpected behaviour: version 2.1
  added a few meta-values to the \n`Language` enum, for example, at values greater
  than 255, while the previous \nmaximum value was below that.  It is possible for
  a C compiler to have used a \nbyte representation for <2.1 and a larger one for
  >=2.1; something like that \ncould *possibly* result in things being set at/referenced
  from the wrong memory \noffset.\n\n\t* libcdio: >= 0.93 && < 2.2\n\t* c2hs: >= 0.26\n\t*
  ghc: >= 8.0\n\n## c2hs + ghc\n\nSome parts of the bindings have been written for
  the `c2hs` preprocessor, and \nwhile manual compilation is technically possible,
  it's much more involved than \nnecessary.  Instead, just use `cabal-install` or
  `stack` as usual.  If you \nreally do have to invoke `gcc` manually, however, run
  that preprocessor first:\n\n\tc2hs --cppopts=-E --cppopts=-Iinclude/ --include=.../
  src/Foreign/Libcdio/Types/Enums.chs\n\tc2hs --cppopts=-E --cppopts=-Iinclude/ --include=.../
  src/Foreign/Libcdio/Types/Offsets.chs\n\n\n# Usage\n\nThe original implementation
  revolves around a classically-C architecture of \nthreading a mutable (though opaque)
  pointer through through many function \ncalls.  For those used to that or who are
  following pre-existing guides, a \nset of low-level bindings mirroring that architecture
  may be found under \nthe \"Foreign.Libcdio\" tree; for anyone used to Haskell, the
  monadic \nbindings under \"Sound.Libcdio\" are recommended instead.  A lookup table
  for \ntranslating existing code and/or knowledge into each progressively higher-level
  \ninterface is provided in the documentation of the `Foreign.Libcdio.*` modules.\n\nAs
  a general rule, any project should /only/ import modules from a single set \nof
  bindings, not both, as while the datatypes can frequently be passed between \nthem,
  several function names have been reused and so may collide.\n\n\n# Contributing\n\nI
  welcome any patches, whether for bug fixes, new features, or anything else.  \nIf
  you just want to point out a bug or ask for some yet-unmentioned feature, I \nmaintain
  that list in [ISSUES](./ISSUES/); see the [README](./ISSUES/README.md) \nin that
  directory for the format if you want to submit something in a more \ncomplete form
  or contribute to any ongoing discussion, but otherwise feel free \nto simply [email
  me](mailto:ag@eitilt.life) and I'll wrangle it into the \nright form.\n\nIf you
  decide to contribute yourself, please enable the `dev` build flag.  \nFor the moment,
  it just enables all warnings I want to enforce in the code, but \nit might provide
  other aids in the future as well.  I've avoided enabling them \nduring everyday
  building as while an end user seeing a warning *might* feel \ninclined to fix the
  program, chances are it's just going to be ignored as the \nlist of built files
  scrolls by.\n\n\tcabal configure -fdev\n\nDepending on the size of your hack, I
  welcome either a diff file, or you can \nbundle your complete darcs patches with
  `darcs send`.  Either way, attach the \nchanges to an email addressed to ag@eitilt.life
  and I'll see about adding it to \nthe codebase.\n\n## Patch format\n\nIf you do
  send the latter, every patch should have a comment with a (at least \nmildly) descriptive
  name prefixed with a tag indicating the general category \naddressed by the patch:
  for fixing issues, that is an \"i/\" followed by the \nissue number (padded with
  leading zeros to three digits); for general \ndevelopment, \"f/\" followed by the
  best topic in the `FEATURES` key; for \ncompleteness, version tags are \"v/\" followed
  by the package reference followed \nby the version.  All are terminated with a final
  period.\n\nPlease do not squash patches.  Each patch should represent a minimal
  but \ncomplete change: certainly enough context to successfully compile, hopefully
  \nenough context to not break any previously-passing tests, and potentially \ncombining
  closely-related changes at your discretion, but if you wind up trying \nto decide
  between multiple tags or you're adding all of your work over the \nentire day, you
  should probably look closely at whether you can break the patch \napart any farther.\n\nAdditionally,
  make good use of the `--ask-deps` flag.  Until I get a CI \nintegration together,
  it's easy to miss a dependency, but do your best to \nselect anything which your
  patch may require to build successfully.\n"
description-type: markdown
hash: 93db7beaede2a27617436a17b89fba27f9e70be19ee0db6bd6569ceb1b3ecc98
homepage: https://ag.eitilt.life/hscdio
latest: 0.1.0.0
license-name: GPL-3.0-or-later
maintainer: sam@eitilt.life
synopsis: Haskell bindings to the libcdio disc-reading library.
test-bench-deps:
  HUnit: '>=1.1 && <1.7'
  base: '>=0'
  base-compat: '>=0.9.3 && <0.12'
  bytestring: '>=0'
  directory: '>=1.2.3 && <1.4'
  hedgehog: <1.1
  hedgehog-classes: '>=0.1.1.0 && <0.3'
  hscdio: '>=0'
  text: '>=0'
