all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.4
- 1.0.0.5
- 1.0.1.0
- 1.0.2.0
- 1.0.2.1
- 1.0.2.2
- 1.0.3.0
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.1.0
author: Freckle R&D
basic-deps:
  array: '>=0.5.4.0'
  base: '>=4.16.4.0 && <5'
  conduit: '>=1.3.5'
  containers: '>=0.6.5.1'
  directory: '>=1.3.6.2'
  exceptions: '>=0.10.4'
  filepath: '>=1.4.2.2'
  hspec-api: '>=2.10.0'
  hspec-core: '>=2.10.0'
  iso8601-time: '>=0.1.5'
  regex-base: '>=0.94.0.2'
  regex-tdfa: '>=1.3.2.1'
  text: '>=1.2.5.0'
  time: '>=1.11.1.1'
  xml-conduit: '>=1.9.1.2'
  xml-types: '>=0.3.8'
changelog: |
  ## [_Unreleased_](https://github.com/freckle/hspec-junit-formatter/compare/v1.1.1.0...main)

  ## [v1.1.1.0](https://github.com/freckle/hspec-junit-formatter/compare/v1.1.0.2...v1.1.1.0)

  - Add `Test.Hspec.JUnit.Formatter{,Env}`, for use as a [spec hook](https://hspec.github.io/hspec-discover.html#spec-hooks)
  - Drop support for `hspec < 0.10`

  ## [v1.1.0.2](https://github.com/freckle/hspec-junit-formatter/compare/v1.1.0.1...v1.1.0.2)

  - Support GHCs 9.0 and 9.2

  ## [v1.1.0.1](https://github.com/freckle/hspec-junit-formatter/compare/v1.1.0.0...v1.1.0.1)

  - Release with looser lower-bounds
  - CI against older GHCs

  ## [v1.1.0.0](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.3.0...v1.1.0.0)

  - Remove incorrectly-cased `Test.HSpec` modules

  ## [v1.0.3.0](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.2.2...v1.0.3.0)

  - Add `hspecJUnit` and environment-variable configuration
  - Fix `file` attribute not respecting source-path-prefix

  ## [v1.0.2.2](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.2.1...v1.0.2.2)

  - Add `file` and `line` attributes in `testcase` nodes

  ## [v1.0.2.1](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.2.0...v1.0.2.1)

  - Support for prefixing reported source paths (e.g. if in a monorepo)
  - Ensure tests pass within unpacked release tarball

  ## [v1.0.2.0](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.1.0...v1.0.2.0)

  - Create `Test.Hspec` module-space and deprecate misspelled `Test.HSpec` modules
  - Introduce `configWithJUnit` and `JUnitConfig`

  ## [v1.0.1.0](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.0.4...v1.0.1.0)

  - Format function can be used directly without `withConfig` or `runJUnitSpec`.
  - Test case duration is now supported.
  - Failure locations are listed for some result types.
  - Timestamps in the resulting XML now display the start time of formatting.

  ## [v1.0.0.4](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.0.3...v1.0.0.4)

  - Bring `base` bound back in to fix release

  ## [v1.0.0.3](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.0.2...v1.0.0.3)

  - Remove dependencies upper bounds

  ## [v1.0.0.2](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.0.1...v1.0.0.2)

  - Less restrictive upper bound on `base`

  ## [v1.0.0.1](https://github.com/freckle/hspec-junit-formatter/compare/v1.0.0.0...v1.0.0.1)

  - Bump `base` dep

  ## [v1.0.0.0](https://github.com/freckle/hspec-junit-formatter/tree/v1.0.0.0)

  Initial release.
changelog-type: markdown
description: |
  # hspec-junit-formatter

  [![Hackage](https://img.shields.io/hackage/v/hspec-junit-formatter.svg?style=flat)](https://hackage.haskell.org/package/hspec-junit-formatter)
  [![Stackage Nightly](http://stackage.org/package/hspec-junit-formatter/badge/nightly)](http://stackage.org/nightly/package/hspec-junit-formatter)
  [![Stackage LTS](http://stackage.org/package/hspec-junit-formatter/badge/lts)](http://stackage.org/lts/package/hspec-junit-formatter)
  [![CI](https://github.com/freckle/hspec-junit-formatter/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/hspec-junit-formatter/actions/workflows/ci.yml)

  A `JUnit` XML runner/formatter for [`hspec`](http://hspec.github.io/).

  <!--
  ```haskell
  {-# OPTIONS_GHC -Wno-unused-top-binds #-}

  module Main (main) where
  import Prelude
  import Text.Markdown.Unlit ()

  -- Used in a later example
  import qualified Test.Hspec.JUnit.Formatter.Env as FormatterEnv
  ```
  -->

  ## Usage (with `hspec-discover`)

  Place the following in `test/SpecHook.hs`:

  ```haskell
  import Test.Hspec
  import Test.Hspec.JUnit.Config
  import qualified Test.Hspec.JUnit.Formatter as Formatter

  hook :: Spec -> Spec
  hook = Formatter.use $ defaultJUnitConfig "test-suite"
  ```

  This _replaces_ the usual formatter, so only a JUnit report is generated and no
  other output is visible.

  ### Registering instead of using

  To make the JUnit formatter available for use with `--format`, but not used by
  default, use `register`:

  ```haskell
  hook2 :: Spec -> Spec
  hook2 = Formatter.register $ defaultJUnitConfig "test-suite"
  ```


  ### Adding a JUnit report

  To produce a JUnit report _in addition to normal output_, use `add`:

  ```haskell
  hook3 :: Spec -> Spec
  hook3 = Formatter.add $ defaultJUnitConfig "test-suite"
  ```

  ### Environment Configuration

  To configure things via @JUNIT_@-prefixed environment variables, import
  `Formatter.Env` instead. It exports all the same functions:

  ```hs
  import qualified Test.Hspec.JUnit.Formatter.Env as FormatterEnv
  ```

  And set the necessary variables,

  ```
  JUNIT_OUTPUT_DIRECTORY=/tmp
  JUNIT_SUITE_NAME=my-tests
  ```

  ```haskell
  hook4 :: Spec -> Spec
  hook4 = FormatterEnv.add
  ```

  ### Environment Enabling

  To only apply a hook if `JUNIT_ENABLED=1`, wrap it in `whenEnabled`:

  ```
  JUNIT_ENABLED=1
  ```

  ```haskell
  hook5 :: Spec -> Spec
  hook5 = FormatterEnv.whenEnabled FormatterEnv.add
  ```

  ### Without `hspec-discover`

  Hooks are just functions of type `Spec -> Spec`, so you can apply them right
  before calling `hspec` in `main`:

  ```haskell
  main :: IO ()
  main = hspec $ FormatterEnv.whenEnabled FormatterEnv.add spec

  spec :: Spec
  spec = describe "Addition" $ do
    it "adds" $ do
      2 + 2 `shouldBe` (4 :: Int)
  ```

  ## Golden Testing

  This project's test suite uses [hspec-golden][] to generate an XML report for
  [`ExampleSpec.hs`](./tests/ExampleSpec.hs) and then compare that with golden XML
  files checked into the repository. If your work changes things in a
  functionally-correct way, but that diverges from the golden XML files, you need
  to regenerate them.

  1. Run `rm tests/golden*.xml`
  2. Run the specs again

  We maintain specific golden XML files for GHC 8.x vs 9.x, so you will need to
  re-run the test suite with at least one of each series to regenerate all the
  necessary files.

  ---

  [LICENSE](./LICENSE)
description-type: markdown
hash: fa2c908a6272c9e68f9c47bb70fa51333762dc90e7fc00c4abd6ca14501630cb
homepage: https://github.com/freckle/hspec-junit-formatter#readme
latest: 1.1.1.0
license-name: MIT
maintainer: engineering@freckle.com
synopsis: A JUnit XML runner/formatter for hspec
test-bench-deps:
  base: '>=4.16.4.0 && <5'
  containers: '>=0.6.5.1'
  filepath: '>=1.4.2.2'
  hspec: '>=2.10.0'
  hspec-golden: '>=0.2.1.0'
  hspec-junit-formatter: '>=0'
  markdown-unlit: '>=0.5.1'
  temporary: '>=1.3'
  text: '>=1.2.5.0'
  xml-conduit: '>=1.9.1.2'
