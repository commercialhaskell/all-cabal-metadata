all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
- 0.2.6.0
- 0.2.7.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.5.2.0
author: Stéphane Laurent
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.4.1 && <0.8'
  extra: '>=1.7 && <1.8'
  hashable: '>=1.3.4.0 && <1.5'
  matrix: '>=0.3.6.0 && <0.4'
  numeric-prelude: '>=0.4.4 && <0.5'
  text: '>=1.2.5.0 && <2.2'
  unordered-containers: '>=0.2.17.0 && <0.3'
changelog: "# Changelog for `hspray`\r\n\r\nAll notable changes to this project will
  be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand
  this project adheres to the\r\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\r\n\r\n\r\n##
  0.1.0.0 - 2022-12-11\r\n\r\nFirst release.\r\n\r\n\r\n## 0.1.1.0 - 2022-12-12\r\n\r\n*
  New functions `toList`, `sprayTerms` and `bombieriSpray`.\r\n\r\n* New operation
  `.^`, to multiply a spray by an integer.\r\n\r\n* Added some unit tests.\r\n\r\n\r\n##
  0.1.2.0 - 2023-02-24\r\n\r\nNew function `derivSpray`, to differentiate a spray.\r\n\r\n\r\n##
  0.1.3.0 - 2023-08-29\r\n\r\n* `Powers(..)` is now exported.\r\n\r\n* Completed the
  README to show how to deal with symbolic coefficients.\r\n\r\n\r\n## 0.2.0.0 - 2024-03-14\r\n\r\n*
  New functions `prettySpray'` and `prettySprayXYZ`.\r\n\r\n* New function `substituteSpray`.\r\n\r\n*
  New function `sprayDivision`, to perform the division of a spray by a list \r\nof
  sprays.\r\n\r\n* New function `groebner`, to compute a Gröbner basis of a list of
  sprays.\r\n\r\n* New function `isSymmetricSpray`, to check whether a spray is a
  symmetric \r\npolynomial.\r\n\r\n* New function `isPolynomialOf`, to check whether
  a spray can be expressed as \r\na polynomial of a given list of sprays.\r\n\r\n\r\n##
  0.2.1.0 - 2024-03-22\r\n\r\n* New functions `permuteVariables` and `swapVariables`.\r\n\r\n*
  New function `resultant`, to compute the resultant of two sprays.\r\n\r\n* New function
  `subresultants`, to compute the subresultants of two sprays.\r\n\r\n\r\n## 0.2.1.1
  - 2024-03-25\r\n\r\n* Improved the documentation.\r\n\r\n* Flipped the order of
  appearance of the terms in the output of the \r\n`prettySpray` functions.\r\n\r\n\r\n##
  0.2.2.0 - 2024-03-26\r\n\r\n* Fixed an error in `esPolynomial`, which resulted to
  a bug in \r\n`isSymmetricSpray`.\r\n\r\n\r\n## 0.2.3.0 - 2024-03-28\r\n\r\n* New
  unit tests.\r\n\r\n* Fixed `resultant` and `subresultants`: the variables of the
  sprays they \r\nreturn were incorrect.\r\n\r\n* New function `gcdQX`, to compute
  the greatest common divisor of two \r\nunivariate sprays with rational coefficients.\r\n\r\n\r\n##
  0.2.4.0 - 2024-03-30\r\n\r\n* Flipped the order of the arguments in `permuteVariables`
  and `swapVariables`.\r\n\r\n* New function `gcdSpray`, to compute the greatest common
  divisor of two sprays\r\nwith coefficients in a field. \r\n\r\n* The function `gcdQX`
  has been removed since `gcdSpray` is more general.\r\n\r\n* The function `sprayDivision`
  has been renamed to `sprayDivisionRemainder`.\r\n\r\n* New function `sprayDivision`,
  returning the quotient and the remainder of the \r\ndivision of two sprays.\r\n\r\n\r\n##
  0.2.5.0 - 2024-04-02\r\n\r\n* New function `resultant'` which computes the resultant
  of two sprays with \r\ncoefficients in a field. Thus it is less general than the
  function `resultant` \r\nbut it is more efficient. \r\n\r\n* Fixed a small mistake
  in `isSymmetricSpray` and `isPolynomialOf`: these \r\nfunctions didn't deal with
  the constant term of the spray.\r\n\r\n* New function `psPolynomial` which computes
  the power sum polynomials.\r\n\r\n* A particular type of sprays, namely `SymbolicSpray
  a`, has been introduced. \r\nThe coefficients of these sprays are ratios of univariate
  polynomials with `a` \r\ncoefficients. There is a specialization `SymbolicQSpray`
  for the case when `a` \r\nis a type of rational numbers. The necessary instances
  have been defined and \r\nthere is the function `prettySymbolic(Q)Spray` to display
  such sprays. There are \r\nalso some functions to perform evaluation of such sprays.\r\n\r\n\r\n##
  0.2.6.0 - 2024-04-15\r\n\r\n* New function `collinearSprays` which checks whether
  two sprays are collinear.\r\n\r\n* The function `isPolynomialOf` threw an error
  when the number of variables in\r\nthe spray to be tested was less than the number
  of variables in the list of \r\nsprays. That is me who programmed this error and
  this was wrong: for example, \r\n`x = p1 - p2^*^p3` with `p1 = x + y^*^z`, `p2 =
  y`, and `p3 = z`.\r\n\r\n* New functions to print sprays with numeric coefficients,
  such as \r\n`prettyNumSpray` and `prettyQSpray`.\r\n\r\n* The functions `prettySpray`,
  `prettySpray'` and `prettySpray''` have been \r\nchanged.\r\n\r\n* New functions
  to print symbolic sprays.\r\n\r\n* Documentation and README have been improved.\r\n\r\n\r\n##
  0.2.7.0 - 2024-04-19\r\n\r\n* Defined `qlone`, which is the same as `lone` but always
  returns a rational \r\nspray (a `QSpray` spray).\r\n\r\n* The function `sprayDivision`
  ran into an infinite loop when the divisor was\r\nconstant. This has been fixed.\r\n\r\n*
  New function `characteristicPolynomial`, to compute the characteristic \r\npolynomial
  of a matrix. \r\n\r\n* Gegenbauer polynomials. They have been implemented mainly
  to provide an \r\nillustration of the type `Spray (Spray a)` in README.\r\n\r\n*
  New function `evalSpraySpray`, to evaluate the spray coefficients of a \r\n`Spray
  (Spray a)` spray, thereby yielding a `Spray a` spray.\r\n\r\n* New type `RatioOfSprays
  a`, whose objects represent ratios of polynomials \r\nrepresented by two `Spray
  a` objects. Thus the type `Spray (RatioOfSprays a)` \r\nallows more possibilities
  than the type `SymbolicSpray a` because it is not \r\nrestricted to univariate fractions
  of polynomials, and obviously it also \r\nallows more possibilities than the type
  `Spray (Spray a)`. Instances and \r\narithmetic operations for these ratios of sprays
  have been defined. The result \r\nof an arithmetic operation always is an irreducible
  fraction. See README for \r\nexamples.\r\n\r\n* Jacobi polynomials. They have been
  implemented mainly to experiment the type \r\n`Spray (RatioOfSprays a)`. By the
  way, this type has been named \r\n`ParametricSpray a`, but this is possibly temporary.\r\n\r\n*
  The class `HasVariables a` has been introduced in order to have some functions\r\nwhich
  apply to both `Spray a` objects and `RatioOfSprays a` objects.\r\n\r\n* The function
  `derivSpray` no longer exists. To get a derivative of a spray, \r\nuse the `derivative`
  function, which is also applicable to a ratio of sprays \r\n(this is a method of
  the class `HasVariables`).\r\n\r\n* A spray with coefficients in a field can now
  be divided by a scalar by using\r\nthe `/>` operator. This operator can also be
  used to divide a ratio of sprays \r\n(with coefficients in a field) by a scalar.\r\n\r\n\r\n##
  0.3.0.0 - 2024-04-21\r\n\r\n* The type `SymbolicSpray a` has been renamed to `OneParameterSpray
  a`, and \r\nall functions names which contained the string `Symbolic` have been
  changed by\r\nreplacing `Symbolic` with `OnePerameter`.\r\n\r\n* The class `HasVariables`,
  which is instantiated for `Spray` and \r\n`RatioOfSprays`, has a new method `changeVariables`
  allowing to perform \r\npolynomial transformations of the variables of a spray and
  of a ratio of \r\nsprays. For sprays, this is the same as the `composeSpray` function.\r\n\r\n*
  The class `HasVariables` is now also instantiated for `RatioOfPolynomials`.\r\n\r\n*
  The type alias `ParametricSpray a = Spray (RatioOfSprays a)` has been kept \r\nand
  the type alias `SimpleParametricSpray a = Spray (Spray a)` has been \r\nintroduced.
  We say that a `Spray b` spray is parametric when `b` has the \r\n`HasVariables`
  instance. So this applies to a `ParametricSpray a` spray, to \r\na `SimpleParametricSpray
  a` spray, and also to a `OneParameterSpray a` spray\r\n(recall that `OneParameterSpray
  a = Spray (RatioOfPolynomials a)`).\r\n\r\n* Functions to print `ParametricSpray`
  sprays and `SimpleParametricSpray` \r\nsprays.\r\n\r\n* Function `numberOfParameters`,
  returning the number of parameters of a \r\nparametric spray, that is to say the
  number of variables occurring in the \r\ncoefficients of this spray.\r\n\r\n* Function
  `changeParameters`, to perform polynomial transformations of the \r\nparameters
  of a parametric spray.\r\n\r\n* Function `substituteParameters`, to replace the
  parameters of a parametric \r\nspray with some values. For a `SimpleParametricSpray`
  spray, this function is \r\nthe same as `evalSpraySpray`(which will probably disappear
  in the future).\r\n\r\n* Function `evalParametricSpray`, to replace the variables
  of a parametric \r\nspray with some values.\r\n\r\n\r\n## 0.4.0.0 - 2024-04-27\r\n\r\n*
  The efficiency of the arithmetic on the `RatioOfSprays` fractions of \r\npolynomials
  has been greatly improved for the univariate case. According to \r\nsome benchmarks
  on the Jack polynomials, the `ParametricSpray` sprays with \r\nonly one parameter
  are now more efficient than the `OneParameterSpray` sprays.\r\n\r\n* For this reason,
  the Jack polynomials with a symbolic Jack parameter, \r\nimplemented in the 'jackpolynomials'
  package, are represented by \r\n`ParametricSpray` sprays in a new version of the
  package, while there were \r\npreviously represented by `OneParameterSpray` sprays.\r\n\r\n*
  Slight improvements of the code in general.\r\n\r\n* Function `lone'` to construct
  monomials like `x_n^p` more efficiently than \r\n`lone n ^**^ p`.\r\n\r\n* Function
  `monomial` to construct monomials like `x_1^4.x_3^7`.\r\n\r\n\r\n## 0.5.0.0 - 2024-05-01\r\n\r\n*
  The class `HasVariables` has been renamed to `FunctionLike`, and the \r\narithmetic
  operations for sprays (`^+^`, `^-^`, `^*^`, `^**^`, `*^`) have \r\nbeen moved to
  this class. Therefore it is now possible to apply these \r\noperations to the ratios
  of sprays. Moreover, there are two new operators in \r\nthis class, `(+>)` and `(<+)`,
  which allow to add a constant to an object of\r\nthis class. For example, `x +>
  spray` gives the same result as \r\n`constantSpray x ^+^ spray` but is more efficient.\r\n\r\n*
  There was an error in `gcdSpray`.\r\n\r\n* There was a small mistake in `collinearSprays`.\r\n\r\n*
  The functions `changeParameters` and `changeVariables` did not remove the \r\npossibly
  null terms of their result.\r\n\r\n* The function `groebner` has been renamed to
  `groebnerBasis`.\r\n\r\n* Function `isHomogeneousSpray`, to check whether a spray
  defines a homogeneous\r\npolynomial.\r\n\r\n\r\n## 0.5.1.0 - 2024-05-03\r\n\r\n*
  An error in an internal function resulted in an error in `groebnerBasis`. It\r\nhas
  been fixed. \r\n\r\n* A limit on the number of elements of a Gröbner basis has been
  set in the \r\nalgorithm performed by `groebnerBasis`. When this limit is attained,
  an error \r\nis thrown. The reason of this limit is that I encountered an example
  of a \r\nlarge Gröbner basis and the algorithm took a quite long time.\r\n\r\n*
  There was an error in `esPolynomial`.\r\n\r\n* The `FunctionLike` class provides
  two new functions: `involvesVariable`, to\r\ncheck whether a variable is involved
  in a function-like object (a spray or a \r\nratio of sprays), and `dropVariables`,
  to drop a given number of leading \r\nvariables in a function-like object. The `dropVariables`
  functions is very \r\nunsafe: if a variable is dropped while it is involved, the
  result can be an \r\ninvalid function-like object.\r\n\r\n\r\n## 0.5.2.0 - 2024-05-05\r\n\r\n*
  Function `polynomialSubresultants`, to compute the polynomial subresultants \r\nof
  two sprays (while the `subresultants` function computes the principal \r\nsubresultants).\r\n\r\n*
  Function `sturmHabichtSequence`, to compute the Sturm-Habicht sequence of a \r\nspray.\r\n\r\n*
  Function `principalSturmHabichtSequence`, to compute the principal \r\nSturm-Habicht
  sequence of a spray.\r\n\r\n* Functions `numberOfRealRoots`, `numberOfRealRootsInOpenInterval`
  and \r\n`numberOfRealRootsInClosedInterval`, to compute the total number of real
  \r\nroots of a suitable univariate spray or its number of real roots in a given
  \r\ninterval. This can be very slow if the degree of the spray is not small."
changelog-type: markdown
description: "# hspray\r\n\r\n<!-- badges: start -->\r\n[![Stack-lts](https://github.com/stla/hspray/actions/workflows/Stack-lts.yml/badge.svg)](https://github.com/stla/hspray/actions/workflows/Stack-lts.yml)\r\n[![Stack-nightly](https://github.com/stla/hspray/actions/workflows/Stack-nightly.yml/badge.svg)](https://github.com/stla/hspray/actions/workflows/Stack-nightly.yml)\r\n<!--
  badges: end -->\r\n\r\n***Simple multivariate polynomials in Haskell.*** \r\nThis
  package deals with multivariate polynomials over a commutative ring, \r\nfractions
  of multivariate polynomials over a commutative field, and \r\nmultivariate polynomials
  with symbolic parameters in their coefficients.\r\n\r\n____\r\n\r\nThe main type
  provided by this package is `Spray a`. \r\nAn object of type `Spray a` represents
  a multivariate polynomial whose\r\ncoefficients are represented by the objects of
  type `a`. For example:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nx = lone
  1 :: Spray Double\r\ny = lone 2 :: Spray Double\r\nz = lone 3 :: Spray Double\r\npoly
  = (2 *^ (x^**^3 ^*^ y ^*^ z) ^+^ x^**^2) ^*^ (4 *^ (x ^*^ y ^*^ z))\r\nputStrLn
  $ prettyNumSpray poly\r\n-- 8.0*x^4.y^2.z^2 + 4.0*x^3.y.z\r\n```\r\n\r\nThis is
  the easiest way to construct a spray: first introduce the polynomial \r\nvariables
  with the `lone` function, and then combine them with arithmetic \r\noperations.\r\n\r\nThere
  are numerous functions to print a spray. If you don't like the letters \r\n`x`,
  `y`, `z` in the output of `prettyNumSpray`, you can use `prettyNumSprayXYZ` \r\nto
  change them to whatever you want:\r\n\r\n```haskell\r\nputStrLn $ prettyNumSprayXYZ
  [\"A\",\"B\",\"C\"] poly\r\n-- 8.0*A^4.B^2.C^2 + 4.0*A^3.B.C\r\n```\r\n\r\nNote
  that this function does not throw an error if you don't provide enough \r\nletters;
  in such a situation, it takes the first given letter and it appends \r\nit with
  the digit `i` to denote the `i`-th variable: \r\n\r\n```haskell\r\nputStrLn $ prettyNumSprayXYZ
  [\"A\",\"B\"] poly\r\n-- 8.0*A1^4.A2^2.A3^2 + 4.0*A1^3.A2.A3\r\n```\r\n\r\nThis
  is the same output as the one of `prettyNumSprayX1X2X3 \"A\" poly`.\r\n\r\nMore
  generally, one can use the type `Spray a` as long as the type `a` has \r\nthe instances
  `Eq` and `Algebra.Ring` (defined in the **numeric-prelude** \r\nlibrary). For example
  `a = Rational`:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nimport Data.Ratio\r\nx
  = lone 1 :: QSpray -- QSpray = Spray Rational\r\ny = lone 2 :: QSpray \r\nz = lone
  3 :: QSpray\r\npoly = ((2%3) *^ (x^**^3 ^*^ y ^*^ z) ^-^ x^**^2) ^*^ ((7%4) *^ (x
  ^*^ y ^*^ z))\r\nputStrLn $ prettyQSpray poly\r\n-- (7/6)*x^4.y^2.z^2 - (7/4)*x^3.y.z\r\n```\r\n\r\nOr
  `a = Spray Double`:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nalpha = lone
  1 :: Spray Double\r\nx = lone 1 :: Spray (Spray Double)\r\ny = lone 2 :: Spray (Spray
  Double)\r\npoly = ((alpha *^ x) ^+^ (alpha *^ y))^**^2  \r\nshowSprayXYZ' (prettyNumSprayXYZ
  [\"alpha\"]) [\"x\",\"y\"] poly\r\n-- (alpha^2)*x^2 + (2.0*alpha^2)*x.y + (alpha^2)*y^2\r\n```\r\n\r\nWe
  will come back to these sprays of type `Spray (Spray a)`. They can \r\nbe used to
  represent parametric polynomials.\r\n\r\n\r\n#### Evaluation of a spray:\r\n\r\n```haskell\r\nimport
  Math.Algebra.Hspray\r\nx = lone 1 :: Spray Double\r\ny = lone 2 :: Spray Double\r\nz
  = lone 3 :: Spray Double\r\nspray = 2 *^ (x ^*^ y ^*^ z) \r\n-- evaluate spray at
  x=2, y=1, z=2\r\nevalSpray spray [2, 1, 2]\r\n-- 8.0\r\n```\r\n\r\n#### Partial
  evaluation:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nimport Data.Ratio\r\nx1
  = lone 1 :: Spray Rational\r\nx2 = lone 2 :: Spray Rational\r\nx3 = lone 3 :: Spray
  Rational\r\nspray = x1^**^2 ^+^ x2 ^+^ x3 ^-^ unitSpray\r\nputStrLn $ prettyQSprayX1X2X3
  \"x\" spray\r\n-- x1^2 + x2 + x3 - 1\r\n--\r\n-- substitute x1 -> 2 and x3 -> 3,
  and don't substitute x2\r\nspray' = substituteSpray [Just 2, Nothing, Just 3] spray\r\nputStrLn
  $ prettyQSprayX1X2X3 \"x\" spray'\r\n-- x2 + 6\r\n```\r\n\r\n#### Differentiation
  of a spray:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nx = lone 1 :: Spray
  Double\r\ny = lone 2 :: Spray Double\r\nz = lone 3 :: Spray Double\r\nspray = 2
  *^ (x ^*^ y ^*^ z) ^+^ (3 *^ x^**^2)\r\nputStrLn $ prettyNumSpray spray\r\n-- 3.0*x^2
  + 2.0*x.y.z\r\n--\r\n-- derivative with respect to x\r\nputStrLn $ prettyNumSpray
  $ derivative 1 spray\r\n-- 6.0*x + 2.0*y.z\"\r\n```\r\n\r\n## Gröbner bases\r\n\r\nAs
  of version 2.0.0, it is possible to compute a Gröbner basis of the ideal \r\ngenerated
  by a list of spray polynomials.\r\n\r\nOne of the numerous applications of Gröbner
  bases is the *implicitization* \r\nof a system of parametric equations. That means
  that they allow to get an \r\nimplicit equation equivalent to a given set of parametric
  equations, for \r\nexample an implicit equation of a parametrically defined surface.
  Let us give \r\nan example of implicitization for an *Enneper surface*. Here are
  the parametric\r\nequations of this surface:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nimport
  Data.Ratio ( (%) )\r\nu = qlone 1\r\nv = qlone 2\r\nx = 3*^u ^+^ 3*^(u ^*^ v^**^2)
  ^-^ u^**^3\r\ny = 3*^v ^+^ 3*^(u^**^2 ^*^ v) ^-^ v^**^3\r\nz = 3*^u^**^2 ^-^ 3*^v^**^2\r\n```\r\n\r\nThe
  first step of the implicitization is to compute a Gröbner basis of the \r\nfollowing
  list of polynomials:\r\n\r\n```haskell\r\ngenerators = [x ^-^ qlone 3, y ^-^ qlone
  4, z ^-^ qlone 5]\r\n```\r\n\r\nOnce the Gröbner basis is obtained, one has to identify
  which of its elements \r\ndo not involve the first two variables (`u` and `v`):\r\n\r\n```haskell\r\ngbasis
  = groebnerBasis generators True\r\nisFreeOfUV :: QSpray -> Bool\r\nisFreeOfUV p
  = not (involvesVariable p 1) && not (involvesVariable p 2)\r\nfreeOfUV = filter
  isFreeOfUV gbasis\r\n```\r\n\r\nThen the implicit equations (there can be several
  ones) are obtained by \r\nremoving the first two variables from these elements:\r\n\r\n```haskell\r\nresults
  = map (dropVariables 2) freeOfUV \r\n```\r\n\r\nHere we find only one implicit equation
  (i.e. `length results` is `1`). \r\nWe only partially display it because it is long:\r\n\r\n```haskell\r\nimplicitEquation
  = results !! 0\r\nputStrLn $ prettyQSpray implicitEquation\r\n-- x^6 - 3*x^4.y^2
  + (5/9)*x^4.z^3 + 6*x^4.z^2 - 3*x^4.z + 3*x^2.y^4 + ...\r\n```\r\n\r\nLet us check
  it is correct. We take a point on the Enneper surface, for \r\nexample the point
  corresponding to $u=1/4$ and $v=2/3$ ($u$ and $v$ range \r\nfrom $0$ to $1$):\r\n\r\n```haskell\r\nxyz
  = map (evaluateAt [1%4, 2%3]) [x, y, z]\r\n```\r\n\r\nIf the implicitization is
  correct, then the polynomial `implicitEquation` \r\nshould be zero at any point
  on the Enneper surface. This is true for our point:\r\n\r\n```haskell\r\nevaluateAt
  xyz implicitEquation == 0\r\n-- True\r\n```\r\n\r\nIn the [unit tests](https://github.com/stla/hspray/blob/main/tests/Main.hs),
  \r\nyou will find a more complex example of implicitization: the implicitization
  \r\nof the ellipse parametrically defined by $x = a \\cos t$ and $y = b \\sin t$.
  \r\nIt is more complex because there are the parameters $a$ and $b$ and because
  \r\none has to use the relation ${(\\cos t)}^2 + {(\\sin t)}^2 = 1$.\r\n\r\n\r\n##
  Easier usage \r\n\r\nTo construct a spray using the ordinary symbols `+`, `-`, `*`
  and `^`, \r\none can hide these operators from **Prelude** and import them from
  the \r\n**numeric-prelude** library; constructing a spray in this context is easier:\r\n\r\n```haskell\r\nimport
  Prelude hiding ((+), (-), (*), (^), (*>), (<*))\r\nimport qualified Prelude as P\r\nimport
  Algebra.Additive              \r\nimport Algebra.Module                \r\nimport
  Algebra.Ring                  \r\nimport Math.Algebra.Hspray\r\nimport Data.Ratio\r\nx
  = lone 1 :: QSpray \r\ny = lone 2 :: QSpray \r\nz = lone 3 :: QSpray\r\nspray  =
  ((2%3) *^ (x^**^3 ^*^ y ^*^ z) ^-^ x^**^2) ^*^ ((7%4) *^ (x ^*^ y ^*^ z))\r\nspray'
  = ((2%3) *^ (x^3 * y * z) - x^2) * ((7%4) *^ (x * y * z))\r\nspray == spray'\r\n--
  True\r\n```\r\n\r\nNote that `*>` could be used instead of `*^` but running `lambda
  *> spray` \r\npossibly throws an \"ambiguous type\" error regarding the type of
  `lambda`.\r\n\r\nMaybe better (I didn't try yet), follow the \"Usage\" section on
  the \r\n[Hackage page](https://hackage.haskell.org/package/numeric-prelude-0.4.4#usage)
  \r\nof **numeric-prelude**.\r\n\r\n\r\n## Symbolic parameters in the coefficients\r\n\r\nAssume
  you have the polynomial `a * (x² + y²) + 2b/3 * z`, \r\nwhere `a` and `b` are symbolic
  rational numbers. You can represent this \r\npolynomial by a `Spray (Spray Rational)`
  spray as follows:\r\n\r\n```haskell\r\nimport Prelude hiding ((*), (+), (-), (^))\r\nimport
  qualified Prelude as P\r\nimport Algebra.Additive              \r\nimport Algebra.Ring
  \                 \r\nimport Math.Algebra.Hspray\r\n\r\nx = lone 1 :: Spray (Spray
  Rational)\r\ny = lone 2 :: Spray (Spray Rational)\r\nz = lone 3 :: Spray (Spray
  Rational)\r\na = lone 1 :: Spray Rational\r\nb = lone 2 :: Spray Rational\r\n\r\nspray
  = a *^ (x^2 + y^2) + ((2 *^ b) /^ 3) *^ z \r\nputStrLn $ \r\n  showSprayXYZ' (prettyQSprayXYZ
  [\"a\",\"b\"]) [\"X\",\"Y\",\"Z\"] spray\r\n-- (a)*X^2 + (a)*Y^2 + ((2/3)*b)*Z\r\n```\r\n\r\nYou
  can extract the powers and the coefficients as follows:\r\n\r\n```haskell\r\nl =
  toList spray\r\nmap fst l\r\n-- [[0,0,1],[2],[0,2]]\r\nmap toList $ map snd l\r\n--
  [[([0,1],2 % 3)],[([1],1 % 1)],[([1],1 % 1)]]\r\n```\r\n\r\nThese `Spray (Spray
  a)` sprays can be very useful. They represent polynomials \r\nwhose coefficients
  polynomially depend on some parameters. \r\nActually there is a type alias of `Spray
  (Spray a)` in **hspray**, namely \r\n`SimpleParametricSpray a`, and there are some
  convenient functions to deal \r\nwith sprays of this type. There is also a type
  alias of \r\n`SimpleParametricSpray Rational`, namely `SimpleParametricQSpray`.\r\nFor
  example we can print our `SimpleParametricQSpray` spray `spray` as follows:\r\n\r\n```haskell\r\nputStrLn
  $ \r\n  prettySimpleParametricQSprayABCXYZ [\"a\",\"b\"] [\"X\",\"Y\",\"Z\"] spray\r\n--
  { a }*X^2 + { a }*Y^2 + { (2/3)*b }*Z\r\n```\r\n\r\nThe \r\n[Gegenbauer polynomials](https://en.wikipedia.org/wiki/Gegenbauer_polynomials)\r\nare
  a real-life example of polynomials that can be represented by \r\n`SimpleParametricQSpray`
  sprays. They are univariate polynomials whose \r\ncoefficients polynomially depend
  on a parameter $\\alpha$ (the polynomial \r\ndependency is clearly visible from
  the recurrence relation given on \r\nWikipedia). Here is their recursive implementation
  in **hspray**:\r\n\r\n```haskell\r\ngegenbauerPolynomial :: Int -> SimpleParametricQSpray
  \r\ngegenbauerPolynomial n \r\n  | n == 0 = unitSpray\r\n  | n == 1 = (2.^a) *^
  x\r\n  | otherwise = \r\n    (2.^(n'' ^+^ a) /^ n') *^ (x ^*^ gegenbauerPolynomial
  (n - 1))\r\n    ^-^ ((n'' ^+^ 2.^a ^-^ unitSpray) /^ n') *^ gegenbauerPolynomial
  (n - 2)\r\n  where \r\n    x = lone 1 :: SimpleParametricQSpray\r\n    a = lone
  1 :: QSpray\r\n    n'  = toRational n\r\n    n'' = constantSpray (n' - 1)\r\n```\r\n\r\nLet's
  try it:\r\n\r\n```haskell\r\nn = 3\r\ng = gegenbauerPolynomial n\r\nputStrLn $ \r\n
  \ prettySimpleParametricQSprayABCXYZ [\"alpha\"] [\"X\"]  g\r\n-- { (4/3)*alpha^3
  + 4*alpha^2 + (8/3)*alpha }*X^3 + { -2*alpha^2 - 2*alpha }*X\r\n```\r\n\r\nLet's
  check the differential equation given in the Wikipedia article:\r\n\r\n```haskell\r\ng'
  \ = derivative 1 g\r\ng'' = derivative 1 g'\r\nalpha = lone 1 :: QSpray\r\nx     =
  lone 1 :: SimpleParametricQSpray\r\nnAsSpray = constantSpray (toRational n)\r\nshouldBeZero
  = \r\n  (unitSpray ^-^ x^**^2) ^*^ g''\r\n    ^-^ (2.^alpha ^+^ unitSpray) *^ (x
  ^*^ g')\r\n      ^+^ n.^(nAsSpray ^+^ 2.^alpha) *^ g\r\nputStrLn $ prettySpray shouldBeZero\r\n--
  0\r\n```\r\n\r\nNow, how to substitute a value to the parameter $\\alpha$? For example,
  it is \r\nsaid in the Wikipedia article that this yields the Legendre polynomials
  for \r\n$\\alpha = 1/2$. The package provides the function `substituteParameters`
  to \r\nperform this task:\r\n\r\n```haskell\r\nimport Data.Ratio (%)\r\nputStrLn
  $ \r\n  prettyQSpray'' $ substituteParameters g [1%2]\r\n-- (5/2)*X^3 - (3/2)*X\r\n```\r\n\r\nThis
  is a `Spray Rational` spray.\r\n\r\nThe Wikipedia article also provides the value
  at $1$ of the Gegenbauer \r\npolynomials in function of $\\alpha$. We can get this
  value with \r\n`evalParametricSpray`:\r\n\r\n```haskell\r\nputStrLn $ \r\n  prettyQSprayXYZ
  [\"alpha\"] $ evalParametricSpray g [1]\r\n-- (4/3)*alpha^3 + 2*alpha^2 + (2/3)*alpha\r\n```\r\n\r\nThis
  is also a `Spray Rational` spray.\r\n\r\n\r\n## Ratios of sprays and general parametric
  sprays\r\n\r\nSince you have just seen that the type `Spray (Spray a)` is named
  \r\n`SimpleParametricSpray a`, you probably guessed there is also a more general
  \r\ntype named `ParametricSpray a`. Yes, and this is an alias of \r\n`Spray (RatioOfSprays
  a)`, where the type `RatioOfSprays a` has not been \r\ndiscussed yet. The objects
  of this type represent fractions of multivariate \r\npolynomials and so this type
  is a considerable enlargment of the `Spray a` \r\ntype. Thus the `Spray (RatioOfSprays
  a)` sprays can represent multivariate \r\npolynomials whose coefficients depend
  on some parameters, with a dependence \r\ndescribed by a fraction of polynomials
  in these parameters. Let's start with \r\na short presentation of the ratios of
  sprays.\r\n\r\n### The `RatioOfSprays` type\r\n\r\nThe type `RatioOfSprays a`, whose
  objects represent ratios of sprays, has \r\nbeen introduced in version 0.2.7.0.
  \r\nTo construct a ratio of sprays, apply `%//%` between its numerator and \r\nits
  denominator:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nx = qlone 1 -- shortcut
  for  lone 1 :: Spray Rational\r\ny = qlone 2 \r\nrOS = (x ^-^ y) %//% (x^**^2 ^-^
  y^**^2)\r\nputStrLn $ prettyRatioOfQSprays rOS\r\n-- [ 1 ] %//% [ x + y ]\r\n```\r\n\r\nThe
  `%//%` operator always returns an *irreducible fraction*. If you are \r\n***sure***
  that your numerator and your denominator are coprime, you can use\r\nthe `%:%` instead,
  to gain some efficiency. But if they are not coprime, this \r\ncan have unfortunate
  consequences.\r\n\r\nThe `RatioOfSprays a` type makes sense when `a` has a field
  instance, and then \r\nit has a field instance too. To use the field operations,
  import the necessary\r\nmodules from **numeric-prelude**, and hide these operations
  from the `Prelude`\r\nmodule; then you can also use the **numeric-prelude** operations
  for sprays, \r\ninstead of using `^+^`, `^-^`, `^*^`, `^**^`:\r\n\r\n```haskell\r\nimport
  Prelude hiding ((+), (-), (*), (/), (^), (*>), (<*))\r\nimport qualified Prelude
  as P\r\nimport Algebra.Additive              \r\nimport Algebra.Module\r\nimport
  Algebra.RightModule\r\nimport Algebra.Ring\r\nimport Algebra.Field              \r\nimport
  Math.Algebra.Hspray\r\nx = qlone 1  \r\ny = qlone 2 \r\np = x^2 - 3*^(x * y) + y^3
  \r\nq = x - y\r\nrOS1 = p^2 %//% q\r\nrOS2 = rOS1 + unitRatioOfSprays\r\nrOS = rOS1^2
  + rOS1*rOS2 - rOS1/rOS2 + rOS2 -- slow!\r\n(rOS1 + rOS2) * (rOS1 - rOS2) == rOS1^2
  - rOS2^2\r\n-- True\r\nrOS / rOS == unitRatioOfSprays\r\n-- True\r\n```\r\n\r\nActually,
  as of version 0.5.0.0, it is possible to apply the operations \r\n`^+^`, `^-^`,
  `^*^`, `^**^` and `*^` to the ratios of sprays.\r\n\r\nThe `RatioOfSprays a` type
  also has left and right module instances over `a` \r\nand over `Spray a` as well.
  That means you can multiply a ratio of sprays by\r\na scalar and by a spray, by
  using, depending on the side, either `*>` or `<*`:\r\n\r\n```haskell\r\nimport Data.Ratio
  ( (%) )\r\nrOS' = (3%4::Rational) *> rOS^2  +  p *> rOS\r\n```\r\n\r\nYou can also
  divide a ratio of sprays by a spray with `%/%`:\r\n\r\n```haskell\r\np *> (rOS'
  %/% p) == rOS'\r\n-- True\r\nrOS1 %/% p == p %//% q\r\n-- True\r\n```\r\n\r\nWhen
  `a` has a field instance, both a `Spray a` spray and a `RatioOfSprays a` \r\nratio
  of sprays can be divided by a scalar with the `/>` operator:\r\n\r\n```haskell\r\nk
  = 3 :: Rational\r\n(p /> k) *> rOS == p *> (rOS /> k)\r\n-- True\r\n```\r\n\r\nUse
  `evalRatioOfSprays` to evaluate a ratio of sprays:\r\n\r\n```haskell\r\nimport Data.Ratio
  ( (%) )\r\nf :: Algebra.Field.C a => a -> a -> a\r\nf u v = u^2 + u*v - u/v + v\r\nrOS
  == f rOS1 rOS2\r\n-- True\r\nvalues = [2%3, 7%4]\r\nr1 = evalRatioOfSprays rOS1
  values\r\nr2 = evalRatioOfSprays rOS2 values\r\nevalRatioOfSprays rOS values ==
  f r1 r2\r\n-- True\r\n```\r\n\r\n### The `ParametricSpray` type\r\n\r\nRecall that
  `SimpleParametricSpray a = Spray (Spray a)` and \r\n`ParametricSpray a = Spray (RatioOfSprays
  a)`, and we have the aliases \r\n`SimpleParametricQSpray = SimpleParametricSpray
  Rational` and \r\n`ParametricQSpray = ParametricSpray Rational`.\r\n\r\nThe functions
  `substituteParameters` and `evalParametricSpray`, that we \r\npreviously applied
  to a `SimpleParametricSpray a` spray, are also applicable \r\nto a `ParametricSpray
  a` spray. We didn't mention the function \r\n`changeParameters` yet, which is also
  applicable to these two types of \r\nparametric sprays. This function performs some
  polynomial transformations of \r\nthe parameters of a parametric spray. For example,
  consider the \r\n[Jacobi polynomials](https://en.wikipedia.org/wiki/Jacobi_polynomials).
  \r\nThey are univariate polynomials with two parameters $\\alpha$ and $\\beta$.
  \r\nThey are implemented in **hspray** as `ParametricQSpray` sprays. In fact \r\nit
  seems that the coefficients of the Jacobi polynomials *polynomially* \r\ndepend
  on $\\alpha$ and $\\beta$, and if this is true one could implement them \r\nas `SimpleParametricQSpray`
  sprays. I will come back to this point later. The \r\nrecurrence relation defining
  the Jacobi polynomials involves a division which \r\nmakes the type `ParametricQSpray`
  necessary anyway. \r\n\r\nThe `changeParameters` function is useful to derive the
  Gegenbauer polynomials \r\nfrom the Jacobi polynomials. Indeed, as asserted in the
  Wikipedia article, \r\nthe Gegenbauer polynomials coincide, up to a factor, with
  the Jacobi \r\npolynomials with parameters $\\alpha - 1/2$ and $\\alpha - 1/2$.
  Here is how \r\nto apply the `changeParameters` function to get this special case
  of Jacobi \r\npolynomials:\r\n\r\n```haskell\r\nimport Data.Ratio ( (%) )\r\nj =
  jacobiPolynomial 3\r\nalpha = qlone 1\r\nalpha' = alpha ^-^ constantSpray (1%2)\r\nj'
  = changeParameters j [alpha', alpha']\r\n```\r\n\r\nNow let's come back to the conjecture
  claiming that the coefficients of the \r\nJacobi polynomials *polynomially* depend
  on $\\alpha$ and $\\beta$, and thus \r\nthese polynomials can be represented by
  `SimpleParametricQSpray` sprays. \r\nMaybe this can be deduced from a formula given
  in the Wikipedia article, I \r\ndidn't spend some time on this problem. I made this
  conjecture because I \r\nobserved this fact for some small values of $n$, and I
  tried the function\r\n`canCoerceToSimpleParametricSpray` for other values, which
  always returned \r\n`True`. One can apply the function `asSimpleParametricSpray`
  to perform the \r\ncoercion.\r\n\r\n\r\n## The `OneParameterSpray` type\r\n\r\nThere
  is a third type of parametric sprays in the package, namely the \r\n`OneParameterSpray`
  sprays. The objects of this type represent \r\nmultivariate polynomials whose coefficients
  are fractions \r\nof polynomials *in only one variable* (the parameter). So they
  are less \r\ngeneral than the `ParametricSpray` sprays.\r\n\r\nThese sprays are
  no longer very useful. They have been introduced in version \r\n0.2.5.0 and this
  is the first type of parametric sprays that has been provided \r\nby the package.
  When the more general `ParametricSpray` sprays have been \r\nintroduced, I continued
  to develop the `OneParameterSpray` sprays because they\r\nwere more efficient than
  the univariate `ParametricSpray` sprays. But as of \r\nversion 0.4.0.0, this is
  no longer the case. This is what I concluded from \r\nsome benchmarks on the *Jack
  polynomials*, implemented in the\r\n[**jackpolynomials** package](https://github.com/stla/jackpolynomials).
  \r\n\r\nThese are sprays of type `Spray (RatioOfPolynomials a)`, where the type
  \r\n`RatioOfPolynomials a` deals with objects that represent fractions of \r\n*univariate*
  polynomials. The type of these univariate polynomials is \r\n`Polynomial a`. \r\n\r\nThe
  functions we have seen for the simple parametric sprays and the parametric \r\nsprays,
  `substituteParameters`, `evalParametricSpray`, and `changeParameters`, \r\nare also
  applicable to the one-parameter sprays. \r\n\r\nThe `OneParameterSpray` sprays were
  used in the \r\n[**jackpolynomials** package](https://github.com/stla/jackpolynomials)
  to \r\nrepresent the Jack polynomials with a symbolic Jack parameter but they have
  \r\nbeen replaced with the `ParametricSpray` sprays.\r\n\r\n\r\n## Other features\r\n\r\nOther
  features offered by the package include: resultant and subresultants of \r\ntwo
  polynomials, Sturm-Habicht sequence of a polynomial, number of real roots \r\nof
  a univariate polynomial, and greatest common divisor of two polynomials with \r\ncoefficients
  in a field."
description-type: markdown
hash: 3954e7f3156139b0d22fe3f51192c43ec6ff3f3082b359e72a6cc4f680d2d01b
homepage: https://github.com/stla/hspray#readme
latest: 0.5.2.0
license-name: GPL-3.0-only
maintainer: laurent_step@outlook.fr
synopsis: Multivariate polynomials and fractions of multivariate polynomials.
test-bench-deps:
  base: '>=4.7 && <5'
  hspray: '>=0'
  matrix: '>=0.3.6.0 && <0.4'
  numeric-prelude: '>=0.4.4 && <0.5'
  tasty: '>=1.4 && <1.6'
  tasty-bench: '>=0.3 && <0.4'
  tasty-hunit: '>=0.10 && <0.11'
  unordered-containers: '>=0.2.17.0 && <0.3'
