homepage: https://github.com/stla/hspray#readme
changelog-type: markdown
hash: 047f167b1559d091d6089bfb2ffd2468944e00c6d3034b338264f2774d62479e
test-bench-deps:
  base: '>=4.7 && <5'
  tasty-hunit: -any
  tasty: -any
  hspray: -any
maintainer: laurent_step@outlook.fr
synopsis: Multivariate polynomials.
changelog: |
  # Changelog for `hspray`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).


  ## 0.1.0.0 - 2022-12-11

  First release.


  ## 0.1.1.0 - 2022-12-12

  * New functions `toList`, `sprayTerms` and `bombieriSpray`.

  * New operation `.^` to multiply a spray by an integer.

  * Added some unit tests.
basic-deps:
  base: '>=4.7 && <5'
  unordered-containers: -any
  text: -any
  containers: -any
  hashable: -any
  numeric-prelude: -any
all-versions:
- 0.1.0.0
- 0.1.1.0
author: StÃ©phane Laurent
latest: 0.1.1.0
description-type: markdown
description: "# hspray\n\nSimple multivariate polynomials in Haskell.\n\n___\n\n\n```haskell\nimport
  Math.Algebra.Hspray\nx = lone 1 :: Spray Double\ny = lone 2 :: Spray Double\nz =
  lone 3 :: Spray Double\npoly = (2 *^ (x^**^3 ^*^ y ^*^ z) ^+^ x^**^2) ^*^ (4 *^
  (x ^*^ y ^*^ z))\nprettySpray show \"x\" poly\n-- \"(4.0) * x^(3, 1, 1) + (8.0)
  * x^(4, 2, 2)\"\n```\n\nMore generally, one can use the type `Spray a` as long as
  the type `a` has \nthe instances `Eq` and `Algebra.Ring` (defined in the **numeric-prelude**
  \nlibrary). For example `a = Rational`:\n\n```haskell\nimport Math.Algebra.Hspray\nimport
  Data.Ratio\nx = lone 1 :: Spray Rational\ny = lone 2 :: Spray Rational\nz = lone
  3 :: Spray Rational\npoly = ((2%3) *^ (x^**^3 ^*^ y ^*^ z) ^+^ x^**^2) ^*^ ((7%4)
  *^ (x ^*^ y ^*^ z))\nprettySpray show \"x\" poly\n-- \"(7 % 4) * x^(3, 1, 1) + (7
  % 6) * x^(4, 2, 2)\"\n```\n\nOr `a = Spray Double`:\n\n```haskell\nimport Math.Algebra.Hspray\np
  = lone 1 :: Spray Double\nx = lone 1 :: Spray (Spray Double)\ny = lone 2 :: Spray
  (Spray Double)\npoly = ((p *^ x) ^+^ (p *^ y))^**^2  \nprettySpray (prettySpray
  show \"a\") \"X\" poly\n-- \"((1.0) * a^(2)) * X^(0, 2) + ((2.0) * a^(2)) * X^(1,
  1) + ((1.0) * a^(2)) * X^(2)\"\n```\n\nEvaluation:\n\n```haskell\nimport Math.Algebra.Hspray\nx
  = lone 1 :: Spray Double\ny = lone 2 :: Spray Double\nz = lone 3 :: Spray Double\npoly
  = 2 *^ (x ^*^ y ^*^ z) \n-- evaluate poly at x=2, y=1, z=2\nevalSpray poly [2, 1,
  2]\n-- 8.0\n```\n\n"
license-name: GPL-3.0-only
