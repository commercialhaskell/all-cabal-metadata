all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- 0.2.5.0
author: Stéphane Laurent
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.6.4.1 && <0.8'
  hashable: '>=1.3.4.0 && <1.5'
  matrix: '>=0.3.6.0 && <0.4'
  numeric-prelude: '>=0.4.4 && <0.5'
  text: '>=1.2.5.0 && <2.2'
  unordered-containers: '>=0.2.17.0 && <0.3'
changelog: "# Changelog for `hspray`\r\n\r\nAll notable changes to this project will
  be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand
  this project adheres to the\r\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\r\n\r\n\r\n##
  0.1.0.0 - 2022-12-11\r\n\r\nFirst release.\r\n\r\n\r\n## 0.1.1.0 - 2022-12-12\r\n\r\n*
  New functions `toList`, `sprayTerms` and `bombieriSpray`.\r\n\r\n* New operation
  `.^`, to multiply a spray by an integer.\r\n\r\n* Added some unit tests.\r\n\r\n\r\n##
  0.1.2.0 - 2023-02-24\r\n\r\nNew function `derivSpray`, to differentiate a spray.\r\n\r\n\r\n##
  0.1.3.0 - 2023-08-29\r\n\r\n* `Powers(..)` is now exported.\r\n\r\n* Completed the
  README to show how to deal with symbolic coefficients.\r\n\r\n\r\n## 0.2.0.0 - 2024-03-14\r\n\r\n*
  New functions `prettySpray'` and `prettySprayXYZ`.\r\n\r\n* New function `substituteSpray`.\r\n\r\n*
  New function `sprayDivision`, to perform the division of a spray by a list of sprays.\r\n\r\n*
  New function `groebner`, to compute a Groebner basis of a list of sprays.\r\n\r\n*
  New function `isSymmetricSpray`, to check whether a spray is a symmetric polynomial.\r\n\r\n*
  New function `isPolynomialOf`, to check whether a spray can be expressed as a polynomial
  of a given list of sprays.\r\n\r\n\r\n## 0.2.1.0 - 2024-03-22\r\n\r\n* New functions
  `permuteVariables` and `swapVariables`.\r\n\r\n* New function `resultant`, to compute
  the resultant of two sprays.\r\n\r\n* New function `subresultants`, to compute the
  subresultants of two sprays.\r\n\r\n\r\n## 0.2.1.1 - 2024-03-25\r\n\r\n* Improved
  the documentation.\r\n\r\n* Flipped the order of appearance of the terms in the
  output of the `prettySpray` functions.\r\n\r\n\r\n## 0.2.2.0 - 2024-03-26\r\n\r\n*
  Fixed an error in `esPolynomial`, which resulted to a bug in `isSymmetricSpray`.\r\n\r\n\r\n##
  0.2.3.0 - 2024-03-28\r\n\r\n* New unit tests.\r\n\r\n* Fixed `resultant` and `subresultants`:
  the variables of the sprays they return were incorrect.\r\n\r\n* New function `gcdQX`,
  to compute the greatest common divisor of two univariate sprays with rational coefficients.\r\n\r\n\r\n##
  0.2.4.0 - 2024-03-30\r\n\r\n* Flipped the order of the arguments in `permuteVariables`
  and `swapVariables`.\r\n\r\n* New function `gcdSpray`, to compute the greatest common
  divisor of two sprays with coefficients in a field. \r\n\r\n* The function `gcdQX`
  has been removed since `gcdSpray` is more general.\r\n\r\n* The function `sprayDivision`
  has been renamed to `sprayDivisionRemainder`.\r\n\r\n* New function `sprayDivision`,
  returning the quotient and the remainder of the division of two sprays.\r\n\r\n\r\n##
  0.2.5.0 - 2024-04-02\r\n\r\n* New function `resultant'` which computes the resultant
  of two sprays with coefficients in a field. \r\nThus it is less general than the
  function `resultant` but it is more efficient. \r\n\r\n* Fixed a small mistake in
  `isSymmetricSpray` and `isPolynomialOf`: these functions didn't deal with \r\nthe
  constant term of the spray.\r\n\r\n* New function `psPolynomial` which computes
  the power sum polynomials.\r\n\r\n* A particular type of sprays, namely `SymbolicSpray
  a`, has been introduced. The coefficients of these \r\nsprays are ratios of univariate
  polynomials with `a` coefficients. There is a specialization \r\n`SymbolicQSpray`
  for the case when `a` is a type of rational numbers. The necessary instances have
  \r\nbeen defined and there is the function `prettySymbolic(Q)Spray` to display such
  sprays. There are also \r\nsome functions to perform evaluation of such sprays."
changelog-type: markdown
description: "# hspray\r\n\r\n<!-- badges: start -->\r\n[![Stack-lts](https://github.com/stla/hspray/actions/workflows/Stack-lts.yml/badge.svg)](https://github.com/stla/hspray/actions/workflows/Stack-lts.yml)\r\n[![Stack-nightly](https://github.com/stla/hspray/actions/workflows/Stack-nightly.yml/badge.svg)](https://github.com/stla/hspray/actions/workflows/Stack-nightly.yml)\r\n<!--
  badges: end -->\r\n\r\n*Simple multivariate polynomials in Haskell.*\r\n\r\n___\r\n\r\n\r\n```haskell\r\nimport
  Math.Algebra.Hspray\r\nx = lone 1 :: Spray Double\r\ny = lone 2 :: Spray Double\r\nz
  = lone 3 :: Spray Double\r\npoly = (2 *^ (x^**^3 ^*^ y ^*^ z) ^+^ x^**^2) ^*^ (4
  *^ (x ^*^ y ^*^ z))\r\nprettySpray show \"X\" poly\r\n-- \"(4.0) * X^(3, 1, 1) +
  (8.0) * X^(4, 2, 2)\"\r\n```\r\n\r\nMore generally, one can use the type `Spray
  a` as long as the type `a` has \r\nthe instances `Eq` and `Algebra.Ring` (defined
  in the **numeric-prelude** \r\nlibrary). For example `a = Rational`:\r\n\r\n```haskell\r\nimport
  Math.Algebra.Hspray\r\nimport Data.Ratio\r\nx = lone 1 :: Spray Rational\r\ny =
  lone 2 :: Spray Rational\r\nz = lone 3 :: Spray Rational\r\npoly = ((2%3) *^ (x^**^3
  ^*^ y ^*^ z) ^+^ x^**^2) ^*^ ((7%4) *^ (x ^*^ y ^*^ z))\r\nprettySpray show \"X\"
  poly\r\n-- \"(7 % 4) * X^(3, 1, 1) + (7 % 6) * X^(4, 2, 2)\"\r\n```\r\n\r\nOr `a
  = Spray Double`:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\np = lone 1 ::
  Spray Double\r\nx = lone 1 :: Spray (Spray Double)\r\ny = lone 2 :: Spray (Spray
  Double)\r\npoly = ((p *^ x) ^+^ (p *^ y))^**^2  \r\nprettySpray (prettySpray show
  \"a\") \"X\" poly\r\n-- \"((1.0) * a^(2)) * X^(0, 2) + ((2.0) * a^(2)) * X^(1, 1)
  + ((1.0) * a^(2)) * X^(2)\"\r\n```\r\n\r\n#### Evaluation:\r\n\r\n```haskell\r\nimport
  Math.Algebra.Hspray\r\nx = lone 1 :: Spray Double\r\ny = lone 2 :: Spray Double\r\nz
  = lone 3 :: Spray Double\r\npoly = 2 *^ (x ^*^ y ^*^ z) \r\n-- evaluate poly at
  x=2, y=1, z=2\r\nevalSpray poly [2, 1, 2]\r\n-- 8.0\r\n```\r\n\r\n#### Partial evaluation:\r\n\r\n```haskell\r\nimport
  Math.Algebra.Hspray\r\nimport Data.Ratio\r\nx1 = lone 1 :: Spray Rational\r\nx2
  = lone 2 :: Spray Rational\r\nx3 = lone 3 :: Spray Rational\r\npoly = x1^**^2 ^+^
  x2 ^+^ x3 ^-^ unitSpray\r\nprettySpray' poly\r\n-- \"((-1) % 1) + (1 % 1) x3 + (1
  % 1) x2 + (1 % 1) x1^2\"\r\n--\r\n-- substitute x1 -> 2 and x3 -> 3\r\npoly' = substituteSpray
  [Just 2, Nothing, Just 3] p\r\nprettySpray' poly'\r\n-- \"(6 % 1) + (1 % 1) x2\"\r\n```\r\n\r\n####
  Differentiation:\r\n\r\n```haskell\r\nimport Math.Algebra.Hspray\r\nx = lone 1 ::
  Spray Double\r\ny = lone 2 :: Spray Double\r\nz = lone 3 :: Spray Double\r\npoly
  = 2 *^ (x ^*^ y ^*^ z) ^+^ (3 *^ x^**^2)\r\n-- derivate with respect to x\r\nprettySpray
  show \"X\" $ derivSpray 1 poly\r\n-- \"(2.0) * X^(0, 1, 1) + (6.0) * X^(1)\"\r\n```\r\n\r\n##
  Gröbner bases\r\n\r\nAs of version 2.0.0, it is possible to compute a Gröbner basis.\r\n\r\n```haskell\r\nimport
  Math.Algebra.Hspray\r\nimport Data.Ratio\r\n-- define the elementary monomials\r\no
  = lone 0 :: Spray Rational\r\nx = lone 1 :: Spray Rational\r\ny = lone 2 :: Spray
  Rational\r\nz = lone 3 :: Spray Rational\r\n-- define three polynomials\r\np1 =
  x^**^2 ^+^ y ^+^ z ^-^ o -- X² + Y + Z - 1\r\np2 = x ^+^ y^**^2 ^+^ z ^-^ o -- X
  + Y² + Z - 1\r\np3 = x ^+^ y ^+^ z^**^2 ^-^ o -- X + Y + Z² - 1\r\n-- compute the
  reduced Gröbner basis\r\ngbasis = groebner [p1, p2, p3] True\r\n-- show result\r\nprettyResult
  = map prettySprayXYZ gbasis\r\nmapM_ print prettyResult\r\n-- \"((-1) % 1) + (1
  % 1) Z^2 + (1 % 1) Y + (1 % 1) X\"\r\n-- \"(1 % 1) Z + ((-1) % 1) Z^2 + ((-1) %
  1) Y + (1 % 1) Y^2\"\r\n-- \"((-1) % 2) Z^2 + (1 % 2) Z^4 + (1 % 1) YZ^2\"\r\n--
  \"((-1) % 1) Z^2 + (4 % 1) Z^3 + ((-4) % 1) Z^4 + (1 % 1) Z^6\"\r\n```\r\n\r\n\r\n##
  Easier usage \r\n\r\nTo construct a polynomial using the ordinary symbols `+`, `*`
  and `-`, \r\none can hide these operators from **Prelude** and import them from
  \r\nthe **numeric-prelude** library:\r\n\r\n```haskell\r\nimport Prelude hiding
  ((*), (+), (-))\r\nimport qualified Prelude as P\r\nimport Algebra.Additive              \r\nimport
  Algebra.Module                \r\nimport Algebra.Ring                  \r\nimport
  Math.Algebra.Hspray\r\n```\r\n\r\nOr, maybe better (I didn't try yet), follow the
  \"Usage\" section on the \r\n[Hackage page](https://hackage.haskell.org/package/numeric-prelude-0.4.4#usage)
  \r\nof **numeric-prelude**.\r\n\r\n## Symbolic coefficients\r\n\r\nAssume you have
  the polynomial `a * (x² + y²) + 2b/3 * z`, \r\nwhere `a` and `b` are symbolic coefficients.
  \r\nYou can define this polynomial as a `Spray` as follows:\r\n\r\n```haskell\r\nimport
  Prelude hiding ((*), (+), (-))\r\nimport qualified Prelude as P\r\nimport Algebra.Additive
  \             \r\nimport Algebra.Module                \r\nimport Algebra.Ring                  \r\nimport
  Math.Algebra.Hspray\r\nimport Data.Ratio\r\n\r\nx = lone 1 :: Spray (Spray Rational)\r\ny
  = lone 2 :: Spray (Spray Rational)\r\nz = lone 3 :: Spray (Spray Rational)\r\na
  = lone 1 :: Spray Rational\r\nb = lone 2 :: Spray Rational\r\n\r\npoly = a *^ (x*x
  + y*y) + ((2%3) *^ b) *^ z \r\nprettySpray (prettySpray show \"a\") \"X\" poly\r\n--
  \"((2 % 3) * a^(0, 1)) * X^(0, 0, 1) + ((1 % 1) * a^(1)) * X^(0, 2) + ((1 % 1) *
  a^(1)) * X^(2)\"\r\n```\r\n\r\nThe `prettySpray` function shows the expansion of
  the polynomial. \r\nYou can extract the powers and the coefficients as follows:\r\n\r\n```haskell\r\nl
  = toList poly\r\nmap fst l\r\n-- [[0,0,1],[2],[0,2]]\r\nmap toList $ map snd l\r\n--
  [[([0,1],2 % 3)],[([1],1 % 1)],[([1],1 % 1)]]\r\n```\r\n\r\n## The `SymbolicSpray`
  type\r\n\r\nIf you have only one symbolic coefficient, it is easier to deal with
  the sprays of type \r\n`SymbolicSpray`. These are sprays whose coefficients are
  ratios of univariate polynomials, \r\nso this allows more possibilities than a `Spray
  (Spray a)`. \r\nAssume you want to deal with the polynomial `4/5 * a/(a² + a + 1)
  * (x² + y²) + 2a/3 * yz`. \r\nThen you define it as follows:\r\n\r\n```haskell\r\nimport
  \          Prelude hiding ((*), (+), (-), (/), (^), (*>))\r\nimport qualified Prelude
  as P\r\nimport           Algebra.Additive              \r\nimport           Algebra.Module
  \           \r\nimport           Algebra.Ring\r\nimport           Algebra.Field
  \               \r\nimport           Math.Algebra.Hspray\r\nimport           Number.Ratio
  \      ( (%), T ( (:%) ) )\r\nx = lone 1 :: SymbolicQSpray \r\ny = lone 2 :: SymbolicQSpray
  \r\nz = lone 3 :: SymbolicQSpray \r\na = outerQVariable  \r\nsSpray \r\n  = ((4%5)
  *. (a :% (a^2 + a + one))) *> (x^2 + y^2)  +  (constQPoly (2%3) * a) *> (y * z)\r\nputStrLn
  $ prettySymbolicQSpray \"a\" sSpray\r\n-- ([(4/5)a] / [(1) + a + a^2])*x1^2 + ([(4/5)a]
  / [(1) + a + a^2])*x2^2 + ((2/3)a)*x2x3\r\n```\r\n\r\nThis pretty form of the symbolic
  qspray will be improved in a future version.\r\n\r\nThere are three possible evaluations
  of this symbolic spray:\r\n\r\n```haskell\r\n-- substitute a value for 'a':\r\nputStrLn
  $ prettySpray' $ evalSymbolicSpray sSpray (6%5)\r\n-- (24 % 91) x1^2 + (24 % 91)
  x2^2 + (4 % 5) x2x3\r\n\r\n-- substitue a value for 'a' and some values for 'x1',
  'x2', 'x3':\r\nevalSymbolicSpray' sSpray (6%5) [2, 3, 4%7]\r\n-- 24 % 5\r\n\r\n--
  substitue some values for 'x1', 'x2', 'x3':\r\nputStrLn $ \r\n  prettyRatioOfQPolynomials
  \"a\" $ evalSymbolicSpray'' sSpray [2, 3, 4%7]\r\n-- [(404/35)a + (8/7)a^2 + (8/7)a^3]
  / [(1) + a + a^2]\r\n```\r\n\r\nThe nice point regarding these ratios of univariate
  polynomials is that they are automatically \r\n\"simplified\". For example:\r\n\r\n```haskell\r\npolyFrac
  = (a^8 - one) :% (a - one)\r\nputStrLn $ prettyRatioOfQPolynomials \"a\" polyFrac\r\n--
  (1) + a + a^2 + a^3 + a^4 + a^5 + a^6 + a^7\r\n```\r\n\r\nMaybe you prefer the fractional
  form, but it is nice to see that this ratio of \r\npolynomials actually is a polynomial.\r\n\r\n\r\n##
  Other features\r\n\r\nResultant and subresultants of two polynomials, and greatest
  common divisor of two polynomials\r\nwith coefficients in a field."
description-type: markdown
hash: 0a9decffd6c2a9e0acf9b72fe8e8019e86ebc97e77639911e51c922038d7db21
homepage: https://github.com/stla/hspray#readme
latest: 0.2.5.0
license-name: GPL-3.0-only
maintainer: laurent_step@outlook.fr
synopsis: Multivariate polynomials.
test-bench-deps:
  base: '>=4.7 && <5'
  hspray: '>=0'
  numeric-prelude: '>=0.4.4 && <0.5'
  tasty: '>=1.4 && <1.6'
  tasty-bench: '>=0.3 && <0.4'
  tasty-hunit: '>=0.10 && <0.11'
