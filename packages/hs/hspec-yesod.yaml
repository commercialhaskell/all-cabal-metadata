all-versions:
- 0.1.0
- 0.2.0
- 0.2.0.1
author: Nubis <nubis@woobiz.com.ar>, Matt Parsons <parsonsmatt@gmail.com>
basic-deps:
  HUnit: '>=1.2'
  aeson: '>=0'
  attoparsec: '>=0.10'
  base: '>=4.10 && <5'
  blaze-builder: '>=0'
  blaze-html: '>=0.5'
  bytestring: '>=0.9'
  case-insensitive: '>=0.2'
  conduit: '>=0'
  containers: '>=0'
  cookie: '>=0'
  exceptions: '>=0'
  hspec-core: '>=2 && <3'
  html-conduit: '>=0.1'
  http-types: '>=0.7'
  memory: '>=0'
  mtl: '>=2.0.0'
  network: '>=3.0'
  pretty-show: '>=1.6'
  text: '>=0'
  time: '>=0'
  transformers: '>=0.2.2'
  wai: '>=3.0'
  wai-extra: '>=0'
  xml-conduit: '>=1.0'
  xml-types: '>=0.3'
  yesod-core: '>=1.6.17'
  yesod-test: '>=0'
changelog: "# ChangeLog for hspec-yesod\n\n## 0.2.0.1\n\n- Fixes unused import warnings
  in `Test.Hspec.Yesod.Internal`\n- `statusIs` now also prints the first 1024 characters
  of the request body, in certain circumstances.\n- `statusIs` output broken across
  multiple lines\n\n## 0.2.0\n\n- `statusIs` now prints the request method, path,
  and query string on failing requests\n- Tracks the latest request via `yedRequest`
  on `YesodExampleData`\n- Adds `getLatestRequest` and `requireLatestRequest` as helpful
  accessors for it \n- Adds `formatRequestBuilderDataForDebugging` to format the request
  for use in error messages\n- Adds a new `.Internal` module to access fields of `RequestBuilderData`\n\nTogether
  these changes are intended to allow for better error messages, like the one made
  to `statusIs`.\n\n## 0.1.0\n\n- Initial release and fork from `yesod-test`.\n"
changelog-type: markdown
description: "# hspec-yesod\r\n\r\nA fork of [`yesod-test`](https://hackage.haskell.org/package/yesod-test)
  that provides more integration with `hspec` features, like hooks.\r\n\r\n## README
  of `yesod-test`\r\n\r\nPragmatic integration tests for haskell web applications
  using WAI and optionally a database (Persistent).\r\n\r\nIts main goal is to encourage
  integration and system testing of web applications by making everything *easy to
  test*. \r\n\r\nYour tests are like browser sessions that keep track of cookies and
  the last\r\nvisited page. You can perform assertions on the content of HTML responses\r\nusing
  CSS selectors.\r\n\r\nYou can also easily build requests using forms present in
  the current page.\r\nThis is very useful for testing web applications built in yesod
  for example,\r\nwhere your forms may have field names generated by the framework
  or a randomly\r\ngenerated CSRF \"\\_token\" field.\r\n\r\nYour database is also
  directly available so you can use runDB to set up\r\nbackend pre-conditions, or
  to assert that your session is having the desired effect.\r\n\r\nThe testing facilities
  behind the scenes are HSpec (on top of HUnit).\r\n\r\nThe code sample below covers
  the core concepts of yesod-test. Check out the\r\n[yesod-scaffolding for usage in
  a complete application](https://github.com/yesodweb/yesod-scaffold/tree/postgres/test).\r\n\r\n```haskell\r\nspec
  :: Spec\r\nspec = withApp $ do\r\n    describe \"Basic navigation and assertions\"
  $ do\r\n      it \"Gets a page that has a form, with auto generated fields and token\"
  $ do\r\n        get (\"url/to/page/with/form\" :: Text) -- Load a page.\r\n        statusIs
  200 -- Assert the status was success.\r\n\r\n        bodyContains \"Hello Person\"
  -- Assert any part of the document contains some text.\r\n        \r\n        --
  Perform CSS queries and assertions.\r\n        htmlCount \"form .main\" 1 -- It
  matches 1 element.\r\n        htmlAllContain \"h1#mainTitle\" \"Sign Up Now!\" --
  All matches have some text.\r\n\r\n        -- Performs the POST using the current
  page to extract field values:\r\n        request $ do\r\n          setMethod \"POST\"\r\n
  \         setUrl SignupR\r\n          addToken -- Add the CSRF _token field with
  the currently shown value.\r\n\r\n          -- Lookup field by the text on the labels
  pointing to them.\r\n          byLabel \"Email:\" \"gustavo@cerati.com\"\r\n          byLabel
  \"Password:\" \"secret\"\r\n          byLabel \"Confirm:\" \"secret\"\r\n\r\n      it
  \"Sends another form, this one has a file\" $ do\r\n        request $ do\r\n          setMethod
  \"POST\"\r\n          setUrl (\"url/to/post/file/to\" :: Text)\r\n          -- You
  can easily add files, though you still need to provide the MIME type for them.\r\n
  \         addFile \"file_field_name\" \"path/to/local/file\" \"image/jpeg\"\r\n
  \         \r\n          -- And of course you can add any field if you know its name.\r\n
  \         addPostParam \"answer\" \"42\"\r\n\r\n        statusIs 302\r\n\r\n    describe
  \"Database access\" $ do\r\n      it \"selects the list\" $ do\r\n        -- See
  the Yesod scaffolding for the runDB implementation\r\n        msgs <- runDB $ selectList
  ([] :: [Filter Message]) []\r\n        assertEqual \"One Message in the DB\" 1 (length
  msgs)\r\n```\r\n\r\n"
description-type: markdown
hash: daef57c18f853bbef27f3a1b08242d8d7c99ae71019f0dc1d1b6a9c6a1a4e8e4
homepage: https://www.github.com/parsonsmatt/hspec-yesod
latest: 0.2.0.1
license-name: MIT
maintainer: Matt Parsons <parsonsmatt@gmail.com>
synopsis: A variation of yesod-test that follows hspec idioms more closely
test-bench-deps:
  HUnit: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  cookie: '>=0'
  hspec: '>=0'
  hspec-yesod: '>=0'
  html-conduit: '>=0'
  http-types: '>=0'
  text: '>=0'
  unliftio: '>=0'
  unliftio-core: '>=0'
  wai: '>=0'
  wai-extra: '>=0'
  xml-conduit: '>=0'
  yesod-core: '>=0'
  yesod-form: '>=1.6'
  yesod-test: '>=0'
