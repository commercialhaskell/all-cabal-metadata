homepage: https://github.com/parsonsmatt/hspec-hedgehog#readme
changelog-type: markdown
hash: 1f4c4c425ae709af59399dec5104fdc728b7f8da5988164b8fa84eeb849188c9
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: -any
  hedgehog: '>=1.0.2 && <2'
  hspec-hedgehog: -any
maintainer: parsonsmatt@gmail.com
synopsis: Integrate Hedgehog and Hspec!
changelog: |
  # Changelog for hspec-hedgehog

  ## 0.1.0.0

  - [#25](https://github.com/parsonsmatt/hspec-hedgehog/pull/25) @sol
      - Suppress internal source locations.
  - [#24](https://github.com/parsonsmatt/hspec-hedgehog/pull/24) @sol
      - Regard `--color` / `--no-color`.
  - [#23](https://github.com/parsonsmatt/hspec-hedgehog/pull/23) @ocharles
      - Improve type inference by constraining the base monad of `PropertyT` to
        `IO`.  This makes explicitly using `hedgehog` redundant in many
        situations.

  ## 0.0.1.2

  - [#7](https://github.com/parsonsmatt/hspec-hedgehog/pull/7) @parsonsmatt
      - Handle error states better by returning them in the instance rather than throwing an exception.
  - [#6](https://github.com/parsonsmatt/hspec-hedgehog/pull/6) @jezen
      - Bump lower bound on `hedgehog` to fix the build constraints.

  ## 0.0.1.1

  - [#2](https://github.com/parsonsmatt/hspec-hedgehog/pull/2) @lehins
      - Documentation fix
  - [#3](https://github.com/parsonsmatt/hspec-hedgehog/pull/3) @parsonsmatt
      - Respect the `maxSuccess`, `maxDiscardRatio`, and `maxShrinks` properties of QuickCheck's `Args` type.
      - Reexport `modifyArgs`, `modifyMaxSuccess`, `modifyMaxDiscardRatio`, `modifyMaxSize`, `modifyMaxShrings`

  ## 0.0.1.0

  - Initial Release
basic-deps:
  base: '>=4.7 && <5'
  hspec: '>=2.11.0 && <3'
  hspec-core: '>=2.11.0 && <3'
  hedgehog: '>=1.0.2 && <2'
  splitmix: '>=0.0.1 && <1'
  QuickCheck: '>=2.9.2 && <3'
all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.1.0.0
author: Matt Parsons
latest: 0.1.0.0
description-type: markdown
description: |
  # hspec-hedgehog

  [![Build Status](https://travis-ci.org/parsonsmatt/hspec-hedgehog.svg?branch=master)](https://travis-ci.org/parsonsmatt/hspec-hedgehog)

  An integration library for [hspec](https://hackage.haskell.org/package/hspec) and [hedgehog](https://hackage.haskell.org/package/hedgehog).

  Example:

  ```haskell
  import           Control.Concurrent     (threadDelay)
  import           Control.Monad.IO.Class (liftIO)
  import qualified Hedgehog.Gen           as Gen
  import qualified Hedgehog.Range         as Range
  import           Test.Hspec             (before, describe, hspec, it, shouldBe)
  import           Test.Hspec.Hedgehog    (PropertyT, diff, forAll, hedgehog,
                                           (/==), (===))

  main :: IO ()
  main = hspec $ do
      describe "regular tests" $ do
          it "works" $ do
              True `shouldBe` True

      describe "hedgehog" $ do
          it "is useful if you get an ambiguous error" $ hedgehog $ do
              "no ambiguity" === "no ambiguity"

      describe "hedgehog tests" $ do
          it "lets you use PropertyT directly" $ hedgehog $ do
              x <- forAll $ Gen.integral (Range.linear 0 1000)
              y <- forAll $ Gen.integral (Range.linear 0 5000)
              diff (x + y) (>=) x

          it "renders a progress bit" $ hedgehog $ do
              x <- forAll $ Gen.integral (Range.linear 0 1000)
              y <- forAll $ Gen.integral (Range.linear 1 5000)
              liftIO $ threadDelay (100 * x + y)

      describe "with hooks" $ do
          before (pure "Hello!") $ do
              it "has functions" $ \str -> hedgehog $
                  str === "Hello!"

              it "goes before or after" $ \str -> do
                  pure () :: PropertyT IO ()
                  str === "Hello!"

              it "generates" $ \str -> hedgehog $ do
                  wrongLen <- forAll $ Gen.integral (Range.linear 0 3)
                  length str /== wrongLen
  ```

  ## How does this differ from [`hw-hspec-hedgehog`](https://hackage.haskell.org/package/hw-hspec-hedgehog)?

  Good question!

  The `hw-spec-hedgehog` implementation does the easy thing.
  It calls Hedgehog's `check` function on the property, and if the property returns `True`, then it passes the test.
  If the property fails, then it renders an [uninformative failure message](https://twitter.com/mattoflambda/status/1234879820225400832) -  it's hardcoded to be:

  > Hedgehog property test failed

  And that's all you get!

  This library preserves Hedgehog's error message formatting, so you get [rich, insightful error messages](https://twitter.com/mattoflambda/status/1234880271406661633) just like Hedgehog intended.

  Furthermore, this library integrates with `hspec`'s support for the `QuickCheck` library.
  Any option that works with `QuickCheck` should work with `hedgehog` properties, so you can use `modifyMaxSuccess (\_ -> 10)` to set the total tests to be 10, rather than the default 100.

  Because it integrates directly with hspec, it also renders a familiar progress message while the test is running.
license-name: BSD-3-Clause
