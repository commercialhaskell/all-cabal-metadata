homepage: https://hslua.org/
changelog-type: markdown
hash: 0aaf5b7092acb52f9f88f2e134908b0eb71a523fa1d21db0d56c5b7ec56f0b84
test-bench-deps:
  hslua-marshalling: '>=2.1 && <2.2'
  base: '>=4.9.1 && <5'
  text: '>=1.2 && <2.1'
  filepath: '>=1.4 && <1.5'
  hslua-packaging: '>=2.1 && <2.2'
  hslua-module-path: -any
  hslua-core: '>=2.1 && <2.2'
  tasty-hunit: -any
  tasty: -any
  tasty-lua: '>=1.0 && <1.1'
maintainer: Albert Krewinkel <albert@zeitkraut.de>
synopsis: Lua module to work with file paths.
changelog: |
  # Changelog

  `hslua-module-paths` uses [PVP Versioning][].

  ## hslua-module-path-1.0.1

  -   Bumped upper bound of hslua-core and hslua-marshalling to
      allow their respective version 2.1.

  ## hslua-module-path-1.0.0

  -   Updated to hslua 2.0.

  ## hslua-module-path-0.1.0.1

  Released 2021-02-06.

  -   Changed minimal cabal version to 2.2.

  ## hslua-module-path-0.1.0

  Released 2021-02-02.

  -   Fixed `directory`. This was the same as normalize.
  -   Improved documentation.
  -   Added more tests.

  ## hslua-module-path-0.0.1

  Released 2021-02-01.

  -   Initially created.

    [PVP Versioning]: https://pvp.haskell.org
basic-deps:
  hslua-marshalling: '>=2.1 && <2.2'
  base: '>=4.9.1 && <5'
  text: '>=1.2 && <2.1'
  filepath: '>=1.4 && <1.5'
  hslua-packaging: '>=2.1 && <2.2'
  hslua-core: '>=2.1 && <2.2'
all-versions:
- 0.0.1
- 0.1.0
- 0.1.0.1
- 1.0.0
- 1.0.1
author: Albert Krewinkel
latest: 1.0.1
description-type: markdown
description: "# hslua-module-path\n\n[![GitHub CI][CI badge]](https://github.com/hslua/hslua-module-paths/actions)\n[![Hackage][Hackage
  badge]](https://hackage.haskell.org/package/hslua-module-path)\n[![Stackage Lts][Stackage
  Lts badge]](http://stackage.org/lts/package/hslua-module-path)\n[![Stackage Nightly][Stackage
  Nightly badge]](http://stackage.org/nightly/package/hslua-module-path)\n[![MIT license][License
  badge]](LICENSE)\n\n[CI badge]: https://img.shields.io/github/workflow/status/hslua/hslua/CI.svg?logo=github\n[Hackage
  badge]: https://img.shields.io/hackage/v/hslua-module-path.svg?logo=haskell\n[Stackage
  Lts badge]: http://stackage.org/package/hslua-module-path/badge/lts\n[Stackage Nightly
  badge]: http://stackage.org/package/hslua-module-path/badge/nightly\n[License badge]:
  https://img.shields.io/badge/license-MIT-blue.svg\n\nLua module to work with file
  paths.\n\n## path\n\nModule for file path manipulations.\n\n#### separator\n\nThe
  character that separates directories.\n\n#### search\\_path\\_separator\n\nThe character
  that is used to separate the entries in the `PATH`\nenvironment variable.\n\n###
  Functions\n\n#### directory (filepath)\n\nGet the directory name; move up one level.\n\nParameters:\n\nfilepath
  \ \npath (string)\n\nReturns:\n\n-   The filepath up to the last directory separator.
  (string)\n\n#### filename (filepath)\n\nGet the file name.\n\nParameters:\n\nfilepath
  \ \npath (string)\n\nReturns:\n\n-   File name part of the input path. (string)\n\n####
  is\\_absolute (filepath)\n\nChecks whether a path is absolute, i.e. not fixed to
  a root.\n\nParameters:\n\nfilepath  \npath (string)\n\nReturns:\n\n-   `true` iff
  `filepath` is an absolute path, `false` otherwise.\n    (boolean)\n\n#### is\\_relative
  (filepath)\n\nChecks whether a path is relative or fixed to a root.\n\nParameters:\n\nfilepath
  \ \npath (string)\n\nReturns:\n\n-   `true` iff `filepath` is a relative path, `false`
  otherwise.\n    (boolean)\n\n#### join (filepaths)\n\nJoin path elements back together
  by the directory separator.\n\nParameters:\n\nfilepaths  \npath components (list
  of strings)\n\nReturns:\n\n-   The joined path. (string)\n\n#### make\\_relative
  (path, root, unsafe)\n\nContract a filename, based on a relative path. Note that
  the resulting\npath will never introduce `..` paths, as the presence of symlinks
  means\n`../b` may not reach `a/b` if it starts from `a/c`. For a worked example\nsee
  [this blog\npost](http://neilmitchell.blogspot.co.uk/2015/10/filepaths-are-subtle-symlinks-are-hard.html).\n\nParameters:\n\npath
  \ \npath to be made relative (string)\n\nroot  \nroot path (string)\n\nunsafe  \nwhether
  to allow `..` in the result. (boolean)\n\nReturns:\n\n-   contracted filename (string)\n\n####
  normalize (filepath)\n\nNormalizes a path.\n\n-   `//` outside of the drive can
  be made blank\n-   `/` becomes the `path.separator`\n-   `./` -&gt; ’’\n-   an empty
  path becomes `.`\n\nParameters:\n\nfilepath  \npath (string)\n\nReturns:\n\n-   The
  normalized path. (string)\n\n#### split (filepath)\n\nSplits a path by the directory
  separator.\n\nParameters:\n\nfilepath  \npath (string)\n\nReturns:\n\n-   List of
  all path components. (list of strings)\n\n#### split\\_extension (filepath)\n\nSplits
  the last extension from a file path and returns the parts. The\nextension, if present,
  includes the leading separator; if the path has\nno extension, then the empty string
  is returned as the extension.\n\nParameters:\n\nfilepath  \npath (string)\n\nReturns:\n\n-
  \  filepath without extension (string)\n\n-   extension or empty string (string)\n\n####
  split\\_search\\_path (search\\_path)\n\nTakes a string and splits it on the `search_path_separator`
  character.\nBlank items are ignored on Windows, and converted to `.` on Posix. On\nWindows
  path elements are stripped of quotes.\n\nParameters:\n\nsearch\\_path  \nplatform-specific
  search path (string)\n\nReturns:\n\n-   list of directories in search path (list
  of strings)\n"
license-name: MIT
