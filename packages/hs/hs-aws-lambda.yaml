homepage: https://github.com/RobertFischer/hs-aws-lambda#readme
changelog-type: ''
hash: 8faf5ba11153e9f1f26071f24da56713bf813a87f34486867d0c856556547ad6
test-bench-deps:
  base: '>=4.7 && <5'
  hs-aws-lambda: -any
maintainer: smokejumperit@gmail.com
synopsis: A modern and easy-to-use wrapper for Docker-based Lambda implementations
changelog: ''
basic-deps:
  http-client: -any
  bytestring: -any
  case-insensitive: -any
  unliftio: -any
  base: '>=4.7 && <5'
  text: -any
  safe-exceptions: -any
  containers: -any
  deepseq: -any
  http-types: -any
  aeson: -any
all-versions:
- 0.1.0.1
- 0.1.0.2
author: Robert Fischer
latest: 0.1.0.2
description-type: markdown
description: "# The Library for Easily Writing Your Lambdas in Haskell\n\nHistorically,
  if you wanted to use Haskell to write your Lambdas, you had to use\n[a custom runtime](https://theam.github.io/aws-lambda-haskell-runtime/).
  \ However,\n[AWS now allows you to use Docker images instead](https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/),\nwhich
  simplifies deployments and\n[avoids some nasty problems](https://theam.github.io/aws-lambda-haskell-runtime/05-common-errors.html).\n\nThis
  library provides the translation layer that you need in order to fully leverage
  Lambda. It is implemented\nin a classy way for maximum flexibility, even if it makes
  the type signatures a bit complicated.  There is an\nexample of an implementation
  in the `example` folder, including a demonstration of how to do deployment.\nHere's
  the simplest usage, adapted slightly from the example:\n\n```haskell\n\nimport AWS.Lambda.RuntimeAPI
  ( runLambda )\nimport AWS.Lambda.RuntimeAPI.Types ( LambdaResult(..), LambdaInvocation(..)
  )\nimport Data.Aeson ( encode, Value )\nimport qualified Data.ByteString.Lazy.Char8
  as C8\n\n-- Two lines of boilerplate\nmain :: IO ()\nmain = runLambda handler\n\n--
  Your implementation's code\nhandler :: LambdaInvocation Value -> IO (LambdaResult
  String)\nhandler request = do\n\tputStrLn . C8.unpack $ encode request\n\treturn
  $ LambdaSuccess \"This is the result payload\"\n\n```\n\nThe request payload is
  wrapped in a `LambdaInvocation` type, which provides access to the\nparticular invocation
  that is being processed.  In this case, we're treating the type as an\nAeson `Value`,
  which represents any arbitrary JSON structure.\n\nYour handler is responsible for
  consuming that request and producing a `LambdaResult`. A\n`LambdaResult` instance
  is usually either `LambdaSuccess payload` or `LambdaError (Text, Text)`.\nIn the
  case of `LambdaSuccess`, the payload defines the \"result\" of the Lambda, and will
  be\ntransformed into JSON via the `ToJSON` typeclass.  In the case of\n`LambdaError`,
  the payload is `(ErrorType, ErrorMessage)`, which is passed to the Lambda\nRuntime
  API in order to give a meaningful error to the user.  There is also `LambdaNop`\nwhich
  does nothing, but that's intended for internal use only.\n\nAll of this executes
  in the `IO` monad in the example above, but you can use any\nmonad that implements
  `MonadUnliftIO`, `MonadFail`, and `MonadThrow`.\n\nAnd that's pretty much it.\n"
license-name: LicenseRef-PublicDomain
