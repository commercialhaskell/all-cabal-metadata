homepage: https://hslua.org/
changelog-type: markdown
hash: 103d0645b9baae00bd582206d174b369c908ff900a87eb282cd053addea2045a
test-bench-deps:
  bytestring: -any
  hslua-marshalling: '>=2.1 && <2.2'
  base: '>=4.8 && <5'
  hslua-objectorientation: '>=2.1 && <2.2'
  text: '>=1.2 && <2.1'
  hslua-packaging: -any
  mtl: '>=2.2 && <2.3'
  hslua-core: '>=2.1 && <2.2'
  tasty-hslua: -any
  tasty-hunit: '>=0.9'
  tasty: '>=0.11'
maintainer: albert+hslua@zeitkraut.de
synopsis: Utilities to build Lua modules.
changelog: |
  # Changelog

  `hslua-packaging` uses [PVP Versioning][].

  ## hslua-packaging-2.1.0

  Released 29-01-2022.

  -   Added function `documentation`: The documented function
      `documentation` is added and exported from module
      `HsLua.Packaging.Documentation`. It allows to retrieve the
      documentation of a given Lua object.

      This replaces `pushDocumentationFunction`, which was removed.

  -   Cleanup of Function module:

      -   `docsField` was moved to module Documentation.
      -   `pushDocumentation` is renamed to `getdocumentation` and
          moved to the Documentation module. It now returns the Lua
          type of the retrieved documentation value.

  -   Function `registerDocumentation` was changed: the documentation
      is no longer passed in but must be at the top of the stack.

  -   New functions `pushModuleDoc`, and `pushFunctionDoc`, pushing
      structured documentation objects for models and functions,
      respectively.

  -   Provide function `opt` to make a parameter optional. The
      function `optionalParameter` is deprecated, use `opt
      (parameter ...)` instead.

  -   Added function `udresult`; it defines a function result and is
      analogous to the existing `udparam` function.

  -   Added module `Convenience`, which defines many functions to
      make the definition of parameters and results easier for
      the most common types.

  -   Pushing a documented module now also registers the module's
      documentation.

  -   The module HsLua.Packaging.Rendering has been deprecated. It
      is no longer exported as part of HsLua.Packaging and must be
      imported explicitly if needed. It may be removed in the
      future. Use Lua objects retrievable with `getdocumentation`
      together with a custom renderer instead.

  -   Update to hslua-objectorientation-2.1.0. Lists are now
      writable. This entails a change to `deftype'`. See the
      changelog of hslua-objectorientation for details.

  -   Update to hslua-core 2.1.0 and hslua-marshalling 2.1.0.

  ## hslua-packaging-2.0.0

  Released 2021-10-21.

  -   Initially created. Contains modules previously found in the
      modules `Foreign.Lua.Call` and `Foreign.Lua.Module` from
      `hslua-1.3`.

  -   Moved module hierarchy from Foreign.Lua to HsLua.

  -   Added support for a “since” tag on documented functions;
      allows to mark the library version when a function was
      introduced in its present form.

  -   Improved syntax for the creation of documented functions.

  -   Documentation for functions is now stored in Lua; a method to
      access it is available as a HaskellFunction.

    [PVP Versioning]: https://pvp.haskell.org
basic-deps:
  hslua-marshalling: '>=2.1 && <2.2'
  base: '>=4.8 && <5'
  hslua-objectorientation: '>=2.1 && <2.2'
  text: '>=1.2 && <2.1'
  containers: '>=0.5.9 && <0.7'
  mtl: '>=2.2 && <2.3'
  hslua-core: '>=2.1 && <2.2'
all-versions:
- 2.0.0
- 2.1.0
author: Albert Krewinkel
latest: 2.1.0
description-type: markdown
description: |
  # hslua-packaging

  [![Build status][GitHub Actions badge]][GitHub Actions]
  [![AppVeyor Status]](https://ci.appveyor.com/project/tarleb/hslua-r2y18)
  [![Hackage]](https://hackage.haskell.org/package/hslua-packaging)

  Utilities to package up Haskell functions and values into a Lua
  module.

  [GitHub Actions badge]: https://img.shields.io/github/workflow/status/hslua/hslua/CI.svg?logo=github
  [GitHub Actions]: https://github.com/hslua/hslua/actions
  [AppVeyor Status]: https://ci.appveyor.com/api/projects/status/ldutrilgxhpcau94/branch/main?svg=true
  [Hackage]: https://img.shields.io/hackage/v/hslua-packaging.svg

  This package is part of [HsLua], a Haskell framework built around
  the embeddable scripting language [Lua].

  [HsLua]: https://hslua.org/
  [Lua]: https://lua.org/

  ## Functions

  It is rarely enough to just expose Haskell functions to Lua, they
  must also be documented. This library allows to combine both into
  one step, as one would do in source files.

  Functions can be exposed to Lua if they follow the type

      a_0 -> a_1 -> ... -> a_n -> LuaE e b

  where each a~i~, 0 ≤ i ≤ n can be retrieved from the Lua stack.

  Let's look at an example: we want to expose the *factorial*
  function, making use of Haskell's arbitrary size integers. Below
  is how we would document and expose it to Lua.

  ``` haskell
  -- | Calculate the factorial of a number.
  factorial :: DocumentedFunction Lua.Exception
  factorial = defun "factorial"
    ### liftPure (\n -> product [1..n])
    <#> n
    =#> productOfNumbers
    #? "Calculates the factorial of a positive integer."
    `since` makeVersion [1,0,0]
   where
     n :: Parameter Lua.Exception Integer
     n = parameter peekIntegral "integer"
           "n"
           "number for which the factorial is computed"

     productOfNumbers :: FunctionResults Lua.Exception Integer
     productOfNumbers =
       functionResult pushIntegral "integer"
         "produce of all numbers from 1 upto n"
  ```

  This produces a value which can be pushed to Lua as a function

  ``` haskell
  pushDocumentedFunction factorial
  setglobal "factorial"
  ```

  and can then be called from Lua

  ``` lua
  > factorial(4)
  24
  > factorial(23)
  "25852016738884976640000"
  ```

  The documentation can be rendered as Markdown with `renderFunction`:

  ```
  factorial (n)

  Calculates the factorial of a positive integer.

  *Since: 1.0.0*

  Parameters:

  n
  :   number for which the factorial is computed (integer)

  Returns:

   - product of all integers from 1 upto n (integer)
  ```
license-name: MIT
