homepage: https://hslua.org/
changelog-type: markdown
hash: 997d8bd06d406e18943472504a6207dff838383958eb2428e8c644150b055923
test-bench-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10.2 && <0.12'
  base: '>=4.8 && <5'
  text: '>=1.0 && <1.3'
  lua: '>=2.0 && <2.1'
  quickcheck-instances: '>=0.3'
  tasty-quickcheck: '>=0.8'
  mtl: '>=2.2 && <2.3'
  hslua-core: -any
  tasty-hunit: '>=0.9'
  tasty: '>=0.11'
  QuickCheck: '>=2.7'
  lua-arbitrary: '>=1.0'
maintainer: albert+hslua@zeitkraut.de
synopsis: Bindings to Lua, an embeddable scripting language
changelog: |
  # Changelog

  `hslua-core` uses [PVP Versioning][1].

  [1]: https://pvp.haskell.org

  ## hslua-core 2.0.0

  Release pending.

  - Error handling has been reworked completely. The type of
    exceptions used and handled by HsLua is now exposed to the type
    system. The type `Lua` makes use of a default error type. Custom
    error handling can be implemented by using the `LuaE` type with
    an exception type that is an instance of class `LuaError`.

  - Added new module HsLua.Core.Userdata. It contains thin wrappers
    around the functions available for creating
    Haskell-value-wrapping userdata objects.

  - Added new module HsLua.Core.Closures, containing functions to
    expose Haskell functions to Lua.

  - Reverted to using the auxlib `luaL_loadfile` function to load a
    Lua file. Previously files were opened and read in Haskell, but
    some functionality of the auxlib function was missing.

  ## hslua-core 1.0.0

  Released 2021-02-27.

  Extracted from hslua-1.3.0.
basic-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10.2 && <0.12'
  base: '>=4.8 && <5'
  text: '>=1.0 && <1.3'
  lua: '>=2.0 && <2.1'
  mtl: '>=2.2 && <2.3'
all-versions:
- 1.0.0
- 2.0.0
author: Albert Krewinkel, Gracjan Polak, Ömer Sinan Ağacan
latest: 2.0.0
description-type: markdown
description: |
  # hslua-core

  [![Build status][GitHub Actions badge]][GitHub Actions]
  [![AppVeyor Status]](https://ci.appveyor.com/project/tarleb/hslua-r2y18)
  [![Hackage]](https://hackage.haskell.org/package/hslua-core)

  Basic building blocks to interface Haskell and Lua in a
  Haskell-idiomatic style.

  [GitHub Actions badge]: https://img.shields.io/github/workflow/status/hslua/hslua/CI.svg?logo=github
  [GitHub Actions]: https://github.com/hslua/hslua/actions
  [AppVeyor Status]: https://ci.appveyor.com/api/projects/status/ldutrilgxhpcau94/branch/main?svg=true
  [Hackage]: https://img.shields.io/hackage/v/hslua-core.svg


  Overview
  --------

  [Lua] is a small, well-designed, embeddable scripting language. It
  has become the de-facto default to make programs extensible and is
  widely used everywhere from servers over games and desktop
  applications up to security software and embedded devices. This
  package provides the basic building blocks for coders to embed Lua
  into their programs.

  This package is part of [HsLua], a Haskell framework built around
  the embeddable scripting language [Lua].

  [HsLua]: https://hslua.org/
  [Lua]: https://lua.org/

  Interacting with Lua
  --------------------

  HsLua core provides the `Lua` type to define Lua operations. The
  operations are executed by calling `run`. A simple "Hello, World"
  program, using the Lua `print` function, is given below:

  ``` haskell
  import HsLua.Core.Lua as Lua

  main :: IO ()
  main = Lua.run prog
    where
      prog :: Lua ()
      prog = do
        Lua.openlibs  -- load Lua libraries so we can use 'print'
        Lua.getglobal "print"            -- push print function
        Lua.pushstring "Hello, World!"   -- push string argument
        Lua.call
          (NumArgs 1)    -- number of arguments passed to the function
          (NumResults 0) -- number of results expected
                         -- as return values
  ```

  ### The Lua stack

  Lua's API is stack-centered: most operations involve pushing
  values to the stack or receiving items from the stack. E.g.,
  calling a function is performed by pushing the function onto the
  stack, followed by the function arguments in the order they should
  be passed to the function. The API function `call` then invokes
  the function with given numbers of arguments, pops the function
  and parameters off the stack, and pushes the results.

      ,----------.
      |  arg 3   |
      +----------+
      |  arg 2   |
      +----------+
      |  arg 1   |
      +----------+                  ,----------.
      | function |    call 3 1      | result 1 |
      +----------+   ===========>   +----------+
      |          |                  |          |
      |  stack   |                  |  stack   |
      |          |                  |          |

  This package provides all basic building blocks to interact with
  the Lua stack. If you'd like more comfort, please consider using
  the `hslua-packaging` and `hslua-classes` packages.


  Error handling
  --------------

  Errors and exceptions must always be caught and converted when
  passing language boundaries. The exception type which can be
  handled is encoded as the type `e` in the monad `LuaE e`. Only
  exceptions of this type may be thrown; throwing different
  exceptions across language boundaries will lead to a program
  crash.

  Exceptions must support certain operations as defined by the
  `LuaError` typeclass. The class ensures that errors can be
  converted from and to Lua values, and that a new exception can be
  created from a String message.
license-name: MIT
