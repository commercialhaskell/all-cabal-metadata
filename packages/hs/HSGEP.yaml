all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
author: Matthew Sottile
basic-deps:
  base: '>=4 && <5'
  csv: '>=0'
  mersenne-random-pure64: '>=0'
  monad-mersenne-random: '>=0'
  mtl: '>=0'
  split: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "====================================================\n= HSGEP: Gene
  Expression Programming in Haskell    =\n= Version 0.1.3                                    =\n=
  Author: Matthew Sottile (mjsottile@computer.org) =\n====================================================\n\n**
  This code is released under the BSD3 Open Source License **\n\n0.0: Credits\n------------\n\nContributors:\n
  \ - Matthew Sottile (mjsottile@computer.org)\n  - Dmitrij Naumov\n\n1.0: Introduction\n-----------------\n\nThis
  package implements the Gene Expression Programming algorithm invented\nby Candida
  Ferreira.  See the following paper for a good, concise explanation\nof the method:\n\nFerreira,
  C., 2001. Gene Expression Programming: A New Adaptive\n  Algorithm for Solving Problems.
  Complex Systems, Vol. 13, issue 2:87-129.\n  http://www.gene-expression-programming.com/webpapers/abstracts.asp#01\n\nGEP
  is an evolutionary algorithm for solving optimization problems.  The\nintroduction
  to the paper cited above provides a good explanation of what\ndifferentiates GEP
  from GP and GAs.\n\n2.0: Background\n---------------\n\nThis project is an ancestor
  of an earlier effort to build a generic framework\nfor using GEP, originally in
  Java.  The move to a functional language\n(originally SML, now Haskell) was because:\n\n
  - At its core, GEP is focused on manipulating symbolic sequences and\n   tree structures.
  \ List and user defined data types in Haskell are very\n   well suited to this.\n\n
  - Functional languages naturally support functions being first class\n   citizens,
  being passed around as arguments to functions.  While\n   this abstraction is possible
  using object interfaces and\n   hierarchies (which is precisely what the Java version
  used), it\n   felt more cumbersome to manage and code up.\n\n - Pattern matching
  and strict type checking provide very strong\n   checks on the core of the library
  to ensure that some classes of\n   bugs are not present.  For example, being able
  to guarantee that a pattern\n   match is exhaustive at compile time is preferable
  to potential runtime\n   errors that may result if such compilation time checks
  are not performed.\n   \n\n3.0: Usage\n----------\n\nAt this point, the best places
  to look for documentation on using the\nlibrary is:\n\n- The Haddock documentation.\n-
  Looking at examples.\n\nThe most mature example currently included in the released
  code is the\nregression example.  In this example, a set of data points are provided\nand
  the optimization phase seeks to evolve a polynomial composed of\nbasic arithmetic
  (+-*/), sqrt, and exponentiation operations that best fits\nthe data points.  The
  example provided is fairly simplistic, and fails to\ninclude useful things like
  the ability to evolve constants as part of the\npolynomials.  In any case, it is
  sufficient to demonstrate the library.\n\nTo run a regression example, you can use
  example input parameter and data\nfiles from the Examples/Regression directory.
  \ For example, after building\nthe code, you can run the example \"test1\" as:\n\n./dist/build/HSGEP_Regression/HSGEP_Regression
  -i ./Examples/Regression/test1.in -f ./Examples/Regression/test1.csv\n\nThe current
  code will then evolve a solution that maximizes the fitness\nfunction (goodness
  of fit to the given data points), and will print it out.\nThe example will also
  attempt to connect to a machine running a Maxima\nserver to perform polynomial simplification
  to turn the long string of\nbasic arithmetic operators into a more useful polynomial.
  \ This is likely\ngoing to not work for most people, so either ignore the error,
  or tweak\nthe code to either disable it or run the Maxima server code somewhere.\n\n4.0:
  FAQ\n--------\n\n- Q: Is this library intended to be more than a toy?\n  A: Yes.
  \ It has been a testbed for me to get used to some of the\n     details related
  to releasing a properly packaged library to\n     the world on Hackage, so some
  of the core has been neglected while I\n     did things related to build, organization,
  and documentation.\n\n- Q: What are the plans for near-term new versions?\n  A:
  Lots.\n\n     - If a plotting library is available (e.g.: Chart), produce plots
  of\n       fitness over time.\n     - Add more examples, such as the CA Density
  classification task.\n     - Performance improvements.\n     - Go parallel -- there
  are many opportunities for parallelism during\n       the run of the algorithm,
  so it would be worth taking advantage of\n       them.\n     - Abstract out some
  of the patterns currently residing in each example,\n       such as the process
  of expressing indiduals as structures.  The\n       ultimate goal is to make the
  end-user code that uses the library as\n       simple as possible, so absorbing
  as much of this into the core of the\n       library will be a good step in that
  direction.\n"
description-type: text
hash: e08254e137f5e8603e4744639e3f30b7efdd6fc6589d8887d7831f97d881902a
homepage: http://github.com/mjsottile/hsgep/
latest: 0.1.5
license-name: BSD-3-Clause
maintainer: Matthew Sottile <mjsottile@computer.org>
synopsis: Gene Expression Programming evolutionary algorithm in Haskell
test-bench-deps: {}
