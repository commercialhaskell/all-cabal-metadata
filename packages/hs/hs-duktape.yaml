all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 1.0.0
author: Val Packett
basic-deps:
  aeson: '>=0'
  base: '>=4.3.0.0 && <5'
  bytestring: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  vector: '>=0'
changelog: ''
changelog-type: ''
description: "[![Hackage](https://img.shields.io/hackage/v/hs-duktape.svg?style=flat)](https://hackage.haskell.org/package/hs-duktape)\n[![Linux
  Build Status](https://img.shields.io/travis/myfreeweb/hs-duktape.svg?style=flat)](https://travis-ci.org/myfreeweb/hs-duktape)\n[![Windows
  Build Status](https://img.shields.io/appveyor/ci/myfreeweb/hs-duktape.svg?style=flat)](https://ci.appveyor.com/project/myfreeweb/hs-duktape)\n[![MIT
  License](https://img.shields.io/badge/mit-license-green.svg?style=flat)](https://tldrlegal.com/license/mit-license)\n\n#
  hs-duktape\n\nHaskell bindings for [duktape], a very compact embedded ECMAScript
  (JavaScript) engine.\n\n[duktape]: http://duktape.org\n\n## Usage\n\nHere's a simple
  REPL example:\n\n```haskell\nmodule Main where\n\nimport Scripting.Duktape\nimport
  Control.Monad (forever)\nimport Data.ByteString.Char8 (pack)\nimport System.IO (hFlush,
  stdout)\n\nmain :: IO ()\nmain = do\n  dukm <- createDuktapeCtx\n  case dukm of\n
  \   Nothing -> putStrLn \"I can't even (start Duktape)\"\n    Just duk -> forever
  $ do\n      putStr \"duktape> \"\n      hFlush stdout\n      retVal <- evalDuktape
  duk =<< return . pack =<< getLine\n      case retVal of\n        Left e -> putStrLn
  $ \"Duktape error: \" ++ e\n        Right Nothing -> putStrLn \"No result\"\n        Right
  (Just v) -> print v\n```\n\n[Aeson]'s `Value` type is used for exchanging values
  between Haskell and ECMAScript.  \n[lens-aeson] is a good library for working with
  `Value`, um, values.\n\nYou can also call functions that are on the global object
  (or any object that's on the global object):\n\n```haskell\ndukm <- createDuktapeCtx\nbresult
  <- callDuktape (fromJust dukm) Nothing \"boolTest\" [Bool True, Bool True, Bool
  False] -- boolTest(true, true, false)\naresult <- callDuktape (fromJust dukm) (Just
  \"NumFuns\") \"sum\" [Number 1, Number 2] -- NumFuns.sum(1, 2)\n```\n\nAnd expose
  Haskell functions (same as with calls: set on global or a property of global):\n\n```haskell\ndukm
  <- createDuktapeCtx\nlet dbl (Number x) = return $ Number $ x * 2 :: IO Value\n
  \   dbl _ = return $ String \"wtf\"\nreD <- exposeFnDuktape (fromJust ctx) Nothing
  \"double\" dbl \n```\n\nThe functions must be of type `IO ()`, `IO Value`, `Value
  -> IO Value`, `Value -> Value -> IO Value`... and so on.\n(Or with any `ToJSON`/`FromJSON`
  values instead of `Value`)\n\n### Advanced: Script execution timeout\n\nInstead
  of `createDuktapeCtx`, you can use `createGovernedHeap` to enforce termination via
  a timeout:\n\n```haskell\nallowQuarterSecond :: IO (IO Bool)\nallowQuarterSecond
  = do\n  initializedAt <- getCurrentTime\n  return $ do\n    now <- getCurrentTime\n
  \   let diff = diffUTCTime now initializedAt\n    return $ diff > 0.25\n\n\nguvnor
  <- allowQuarterSecond\nctx <- createGovernedHeap nullFunPtr nullFunPtr nullFunPtr
  guvnor nullFunPtr\nresult <- evalDuktape (fromJust ctx) \"while (true) {}\"\n--
  Left \"RangeError: execution timeout\"\n```\n\n[Aeson]: https://hackage.haskell.org/package/aeson\n[lens-aeson]:
  https://hackage.haskell.org/package/lens-aeson\n\n## Development\n\nNote: The duktape
  configure script invoked by Cabal/Stack requires python 2 with the PyYAML library
  installed. `pip install PyYAML` is one way to achieve this.\n\nUse [stack] to build.\n\n```bash\n$
  stack build\n\n$ stack test && rm tests.tix\n```\n\n[stack]: https://github.com/commercialhaskell/stack\n\n##
  Contributing\n\nPlease feel free to submit pull requests!\n\nBy participating in
  this project you agree to follow the [Contributor Code of Conduct](https://contributor-covenant.org/version/1/4/).\n\n[The
  list of contributors is available on GitHub](https://github.com/myfreeweb/hs-duktape/graphs/contributors).\n\n##
  License\n\nLicensed under the MIT license (see to the `LICENSE` file).  \nHaskell
  bindings: Copyright (c) 2015-2018 Greg V <greg@unrelenting.technology>  \nDuktape:
  Copyright (c) 2013-2016 by Duktape authors (see duktape/AUTHORS.rst)\n"
description-type: markdown
hash: 0a35406c67b988d68528da12f2de90f7b658305bdfaf24750006bf1245b79526
homepage: https://codeberg.org/valpackett/hs-duktape
latest: 1.0.0
license-name: MIT
maintainer: val@packett.cool
synopsis: Haskell bindings for a very compact embedded ECMAScript (JavaScript) engine.
test-bench-deps:
  aeson: '>=0'
  aeson-qq: '>=0'
  base: '>=4.3.0.0 && <5'
  bytestring: '>=0'
  hs-duktape: '>=0'
  hspec: '>=0'
  hspec-expectations-pretty-diff: '>=0'
  raw-strings-qq: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  time: '>=0'
