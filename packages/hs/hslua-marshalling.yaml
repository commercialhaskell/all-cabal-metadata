homepage: https://hslua.org/
changelog-type: markdown
hash: 4179d240a8ca8417a284e362f275e37f3cdf0ad0a0d1e682e036c8ae4a6d2471
test-bench-deps:
  bytestring: '>=0.10.2 && <0.12'
  hslua-marshalling: -any
  base: '>=4.8 && <5'
  text: '>=1.2 && <2.1'
  containers: '>=0.5.9 && <0.7'
  quickcheck-instances: '>=0.3'
  tasty-quickcheck: '>=0.8'
  mtl: '>=2.2 && <2.3'
  hslua-core: '>=2.0 && <2.2'
  tasty-hslua: -any
  tasty-hunit: '>=0.9'
  tasty: '>=0.11'
  QuickCheck: '>=2.7'
  lua-arbitrary: '>=1.0'
maintainer: albert+hslua@zeitkraut.de
synopsis: Marshalling of values between Haskell and Lua.
changelog: |
  # Changelog

  `hslua-marshalling` uses [PVP Versioning][].

  ## hslua-marshalling-2.1.0

  Released 29-01-2022.

  -   Updated to hslua-core-2.1.0.

  -   The `Success` constructor of the `Result` type is now strict;
      the `Failure` constructor remains lazy.

  -   The stack is checked before pushing or retrieving nested
      structures: Pushing or peeking a deeply nested structure could
      lead an overflow of the Lua stack. The functions `pushList`,
      `pushSet`, and `pushKeyValuePairs`, as well as `peekList`,
      `peekSet`, and `peekKeyValuePairs` now check that sufficient
      stack space is available before pushing another value to the
      stack.

  -   The function `toByteString` now requires a slot on the stack
      if the value at the given index is a number. It checks for
      available space before pushing to the stack, returning
      `Nothing` if no space is left on the stack.

  -   The `withContext` function is made more useful and now
      differs from `retrieving`. The string “retrieving” is added
      to the error context by `retrieving`, so `withContext` allows
      to define contexts without this prefix.

  -   New convenience function `pushAsTable`, making it easier to
      define a pusher function for values marshaled as tables.

  ## hslua-marshalling-2.0.1

  Released 2021-11-04.

  -   Allow `pushIterator` to skip values: If the function that
      pushes the values of a list item signals that it didn’t push
      any values, then that value will be skipped.

  ## hslua-marshalling-2.0.0

  Released 2021-10-21.

  -   Initially created. Contains modules previously found in the
      modules `Foreign.Lua.Peek` and `Foreign.Lua.Push` from
      `hslua-1.3`.

  -   Removed most functions from the Userdata module,
      incl. peekAny, pushAny. The functions don’t add much value
      over those in `HsLua.Core.Userdata`. Use UDTypes from
      hslua-packaging for a more comfortable method of exposing data
      via userdata values.

    [PVP Versioning]: https://pvp.haskell.org
basic-deps:
  bytestring: '>=0.10.2 && <0.12'
  base: '>=4.8 && <5'
  text: '>=1.2 && <2.1'
  containers: '>=0.5.9 && <0.7'
  mtl: '>=2.2 && <2.3'
  hslua-core: '>=2.0 && <2.2'
all-versions:
- 2.0.0
- 2.0.1
- 2.1.0
author: Albert Krewinkel, Gracjan Polak, Ömer Sinan Ağacan
latest: 2.1.0
description-type: markdown
description: |
  # hslua-marshalling

  [![Build status][GitHub Actions badge]][GitHub Actions]
  [![AppVeyor Status]](https://ci.appveyor.com/project/tarleb/hslua-r2y18)
  [![Hackage]](https://hackage.haskell.org/package/hslua-marshalling)

  Functions to marshal values from Haskell to Lua, and *vice versa*.

  This package is part of [HsLua], a Haskell framework built around
  the embeddable scripting language [Lua](https://lua.org).

  [GitHub Actions badge]: https://img.shields.io/github/workflow/status/hslua/hslua/CI.svg?logo=github
  [GitHub Actions]: https://github.com/hslua/hslua/actions
  [AppVeyor Status]: https://ci.appveyor.com/api/projects/status/ldutrilgxhpcau94/branch/main?svg=true
  [Hackage]: https://img.shields.io/hackage/v/hslua-marshalling.svg
  [HsLua]: https://hslua.org/
license-name: MIT
