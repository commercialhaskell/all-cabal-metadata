homepage: https://github.com/freckle/hspec-expectations-json#readme
changelog-type: markdown
hash: 4a739a8af23906355095d0f30185548505c5f978c90c4bcbf4ef1a002f81bdb3
test-bench-deps:
  hspec-expectations-json: -any
  base: '>=4.11 && <5'
  hspec: -any
  aeson-qq: -any
  QuickCheck: -any
  aeson: -any
maintainer: engineering@freckle.com
synopsis: Hspec expectations for JSON Values
changelog: |
  ## [_Unreleased_](https://github.com/freckle/hspec-expectations-json/compare/v1.0.1.0...main)

  ## [v1.0.2.0](https://github.com/freckle/hspec-expectations-json/compare/v1.0.1.1...v1.0.2.0)

  - Add `shouldBeJsonNormalized` and `Normalizer` to better support configurable matching
  - Added new option for `treatNullsAsMissing` that will treat nulls fields as if they are the same as omitted ones when doing a comparison

  ## [v1.0.1.1](https://github.com/freckle/hspec-expectations-json/compare/v1.0.1.0...v1.0.1.1)

  - Add invariant for all matchers for equality. (ex: forall a. a `shouldMatchJson` a)

  ## [v1.0.1.0](https://github.com/freckle/hspec-expectations-json/compare/v1.0.0.6...v1.0.1.0)

  - Colorize diff in expectation failure, if connected to a terminal or running on
    GitHub Actions.
  - Add a `.Lifted` module with `MonadIO` versions

  ## [v1.0.0.6](https://github.com/freckle/hspec-expectations-json/compare/v1.0.0.5...v1.0.0.6)

  - Support GHC 9.0 and 9.2
  - Re-add support for aeson-1.x

  ## [v1.0.0.5](https://github.com/freckle/hspec-expectations-json/compare/v1.0.0.4...v1.0.0.5)

  - Add lower bound for `aeson` 2.x

  ## [v1.0.0.4](https://github.com/freckle/hspec-expectations-json/compare/v1.0.0.3...v1.0.0.4)

  - Remove dependencies upper bounds

  ## [v1.0.0.3](https://github.com/freckle/hspec-expectations-json/compare/v1.0.0.2...v1.0.0.3)

  - Less restrictive upper bound on `base`

  ## [v1.0.0.2](https://github.com/freckle/hspec-expectations-json/compare/v1.0.0.1...v1.0.0.2)

  - Add explicit and relaxed `aeson` and `text` bounds

  ## [v1.0.0.1](https://github.com/freckle/hspec-expectations-json/compare/v1.0.0.0...v1.0.0.1)

  - Relax `base` (GHC) upper bound

  ## [v1.0.0.0](https://github.com/freckle/hspec-expectations-json/tree/v1.0.0.0)

  First tagged release.
basic-deps:
  base: '>=4.11 && <5'
  Diff: '>=0.3.4'
  aeson-pretty: '>=0.8.7'
  unordered-containers: '>=0.2.9.0'
  text: -any
  HUnit: '>=1.6.0.0'
  scientific: '>=0.3.6.2'
  aeson: '>=1.3.1.1'
  vector: '>=0.12.0.2'
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
- 1.0.0.5
- 1.0.0.6
- 1.0.0.7
- 1.0.2.0
author: Freckle Engineering
latest: 1.0.2.0
description-type: markdown
description: |
  # Hspec Expectations for JSON Values

  [![Hackage](https://img.shields.io/hackage/v/hspec-expectations-json.svg?style=flat)](https://hackage.haskell.org/package/hspec-expectations-json)
  [![Stackage Nightly](http://stackage.org/package/hspec-expectations-json/badge/nightly)](http://stackage.org/nightly/package/hspec-expectations-json)
  [![Stackage LTS](http://stackage.org/package/hspec-expectations-json/badge/lts)](http://stackage.org/lts/package/hspec-expectations-json)
  [![CI](https://github.com/freckle/hspec-expectations-json/actions/workflows/ci.yml/badge.svg)](https://github.com/freckle/hspec-expectations-json/actions/workflows/ci.yml)

  Comparing JSON `Value`s in Haskell tests comes with some challenges:

  - In API responses, additive changes are typically safe and an important way to
    evolve responses without breaking clients. Therefore, assertions against such
    responses often want to ignore any unexpected keys in `Object`s (at any
    depth), as any clients would.

  - Order often doesn't matter in API responses either, so it should be possible
    to assert equality regardless of `Array` ordering (again, at any depth).

  - When an assertion fails, showing the difference clearly needs to take the
    above into account (i.e. it can't show keys you've ignored, or ordering
    differences you didn't care about), and it has to display things clearly, e.g.
    as a diff.

  This library handles all these things.

  ## Usage

  **NOTE**: this is effectively a distillation of the [Haddocks][], please
  view them directly for your installed version, to ensure accurate information.

  [haddocks]: http://hackage.haskell.org/package/hspec-expectations-json/docs/Test-Hspec-Expectations-Json.html

  Four expectations exist with the following behaviors:

  | Assertion that **fails** on: | extra `Object` keys | wrong `Array` order |
  | ---------------------------- | ------------------- | ------------------- |
  | `shouldBeJson`               | Yes                 | Yes                 |
  | `shouldBeUnorderedJson`      | Yes                 | No                  |
  | `shouldMatchJson`            | No                  | No                  |
  | `shouldMatchOrderedJson`     | No                  | Yes                 |

  Each of these, when they fail, print a difference between the objects, where the
  expected-on object has been normalized to avoid indicating any of the
  differences your expectation is ignoring.

  ### `shouldBeJson`

  Passing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": true, "b": false } |] `shouldBeJson`
    [aesonQQ| { "a": true, "b": false } |]
  ```

  Failing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": true, "b": false } |] `shouldBeJson`
    [aesonQQ| { "a": true, "b": true  } |]
  ```

  ```diff
     {
         "a": true,
  ---    "b": true
  +++    "b": false
     }
  ```

  ### `shouldBeUnorderedJson`

  Passing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": [true, false], "b": false } |] `shouldBeUnorderedJson`
    [aesonQQ| { "a": [false, true], "b": false } |]
  ```

  Failing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": [true, false], "b": false, "c": true } |] `shouldBeUnorderedJson`
    [aesonQQ| { "a": [false, true], "b": true             } |]
  ```

  ```diff
     {
         "a": [
             false,
             true
         ],
  ---    "b": true
  +++    "b": false,
  +++    "c": true
     }
  ```

  ### `shouldMatchJson`

  Passing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": [true, false], "b": false, "c": true } |] `shouldMatchJson`
    [aesonQQ| { "a": [false, true], "b": false            } |]
  ```

  Failing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": [true, false], "b": false, "c": true } |] `shouldMatchJson`
    [aesonQQ| { "a": [false, true], "b": true             } |]
  ```

  ```diff
     {
         "a": [
             false,
             true
         ],
  ---    "b": true
  +++    "b": false
     }
  ```

  ### `shouldMatchOrderedJson`

  Passing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": [true, false], "b": false, "c": true } |] `shouldMatchOrderedJson`
    [aesonQQ| { "a": [true, false], "b": false            } |]
  ```

  Failing:

  ```hs
  catchFailure $
    [aesonQQ| { "a": [true, false], "b": false, "c": true } |] `shouldMatchOrderedJson`
    [aesonQQ| { "a": [false, true], "b": true             } |]
  ```

  ```diff
     {
         "a": [
  ---        false,
  ---        true
  +++        true,
  +++        false
         ],
  ---    "b": true
  +++    "b": false
     }
  ```

  ---

  [LICENSE](./LICENSE) | [CHANGELOG](./CHANGELOG.md)
license-name: MIT
