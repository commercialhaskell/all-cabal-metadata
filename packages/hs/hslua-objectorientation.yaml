homepage: https://hslua.org/
changelog-type: markdown
hash: 0a7703080502e1e40f74db581fbaac963ce12691f30ae3e2129055723ade15a9
test-bench-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10.2 && <0.12'
  hslua-marshalling: '>=2.2.1 && <2.3'
  base: '>=4.8 && <5'
  hslua-objectorientation: -any
  text: '>=1.2 && <2.1'
  containers: '>=0.5.9 && <0.7'
  quickcheck-instances: '>=0.3'
  tasty-quickcheck: '>=0.8'
  mtl: '>=2.2 && <2.4'
  hslua-core: '>=2.2.1 && <2.3'
  tasty-hslua: '>=1.0'
  tasty-hunit: '>=0.9'
  tasty: '>=0.11'
  QuickCheck: '>=2.7'
  lua-arbitrary: '>=1.0'
maintainer: albert+hslua@zeitkraut.de
synopsis: Object orientation tools for HsLua
changelog: |
  # Changelog

  `hslua-objectorientation` uses [PVP Versioning][].

  ## hslua-objectorientation-2.2.1

  Released 2022-06-19.

  -   Require hslua-core-2.2.1.

  -   Require hslua-marshalling-2.2.1.

  ## hslua-objectorientation-2.2.0.1

  Released 2022-05-20.

  -   Relax upper bound for mtl, allow mtl-2.3.

  ## hslua-objectorientation-2.2.0

  Released 2022-02-19.

  -   Require version 2.2 of hslua-core and hslua-marshalling.

  ## hslua-objectorientation-2.1.0

  Released 29-01-2022.

  -   Allow integers as aliases: Aliases can now be of type
      `AliasIndex`, so integers can now be defined as aliases for
      other properties. The function `alias` now takes an
      `AliasIndex` instead of a `Name`; the change entails
      modifications to the types `UDTypeWithList`, `UDType`, and
      `Member`. Also, `AliasIndex` is made into an instance of the
      Eq and Ord type classes.

  -   Reworked list representation of objects, allowing write access
      to list components.

      The `ListSpec` type has been updated and contains now a pair
      of pairs, where the inner pairs define how to push and
      retrieve lists, respectively. Users of the `deftypeGeneric'`
      function will have to update their code.

  -   Fixed some integer type declarations in C code. Some variables
      had been given incorrect types, like `int` instead of
      `lua_Integer`. They are usually the same, but may differ in
      some setups.

  -   Require hslua-core-2.1.0 and hslua-marshalling-2.1.0, or
      later.

  ## hslua-objectorientation-2.0.1

  Released 2021-11-04.

  -   Excludes absent properties from `pairs`: Properties that are
      optional and not present in a sum-type value are no longer
      included in the iterator output produced by `pairs` (i.e., the
      `__pairs` metamethod). Previously, the names of absent
      properties were pushed with a `nil` value.

  ## hslua-objectorientation-2.0.0

  Released 2021-10-21.

  -   Published without warning.

    [PVP Versioning]: https://pvp.haskell.org
basic-deps:
  exceptions: '>=0.8 && <0.11'
  bytestring: '>=0.10.2 && <0.12'
  hslua-marshalling: '>=2.2.1 && <2.3'
  base: '>=4.8 && <5'
  text: '>=1.2 && <2.1'
  containers: '>=0.5.9 && <0.7'
  mtl: '>=2.2 && <2.4'
  hslua-core: '>=2.2.1 && <2.3'
all-versions:
- 2.0.0
- 2.0.1
- 2.1.0
- 2.2.0
- 2.2.0.1
- 2.2.1
author: Albert Krewinkel
latest: 2.2.1
description-type: markdown
description: |
  # hslua-objectorientation

  [![Build status][GitHub Actions badge]][GitHub Actions]
  [![AppVeyor Status]](https://ci.appveyor.com/project/tarleb/hslua-r2y18)
  [![Hackage]](https://hackage.haskell.org/package/hslua-objectorientation)

  Expose Haskell data to Lua with an object oriented interface.


  [GitHub Actions badge]: https://img.shields.io/github/workflow/status/hslua/hslua/CI.svg?logo=github
  [GitHub Actions]: https://github.com/hslua/hslua/actions
  [AppVeyor Status]: https://ci.appveyor.com/api/projects/status/ldutrilgxhpcau94/branch/main?svg=true
  [Hackage]: https://img.shields.io/hackage/v/hslua-objectorientation.svg
license-name: MIT
