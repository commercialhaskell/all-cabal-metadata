homepage: https://github.com/dfordivam/hspec-webdriver-clone
changelog-type: markdown
hash: ff57cb1fc684f9f460fd777a6cf96f7df102c800fdc0fef9fadae938ef2b3d51
test-bench-deps: {}
maintainer: John Lenz <lenz@math.uic.edu>, Divam <dfordivam@gmail.com>
synopsis: Write end2end web application tests using webdriver and hspec
changelog: "## 1.2.2\n\n* Fix build with hspec >= 2.10\n\n## 1.2.1\n\n* Fix build
  with hspec >= 2.5\n* move to lts-12.9\n\n## 1.2.0\n\n*   The way capabilities are
  handled was simplified.  In the old API (1.1.0 and below) there was a typeclass
  TestCapabilities\n    and you had to create an enumeration (or use the default provided
  by this library) and then there was a Using typeclass that\n    allowed lists or
  a single capability.  All this complexity and abuse of typeclasses turned out to
  be unnecessary.  After \n    using hspec-webdriver in my own projects for several
  years, the best way to handle capabilities is in a utility module to have\n    a
  list `allBrowsers :: [Capabilities]` and then each session in the spec just passes
  `allBrowsers` to `using` (the XKCD exaple\n    in the documentation now uses this
  approach).  The `allBrowsers` value in the utility module can then be edited and
  changed to\n    specify which browsers/caps to use for the examples.\n\n    The
  actual API changes are as follows:\n\n    * TestCapabilities was removed.\n    *
  BrowserDefaults was removed and instead there are symbols `firefoxCaps`, `chromeCaps`,
  etc. which you can\n      use instead of BrowserDefaults.  Or you can ignore these
  and create your own capaiblities directly using\n      utility functions from the
  `webdriver` package.\n    * The Using typeclass was removed but the `using` helper
  function still exists as a standalone function.\n      You must now pass list of
  capabilities to `using` but otherwise the usage is the same.  As mentioned above,\n
  \     I suggest the argument to `using` is a list defined in a utility module similar
  to the XKCD example.\n      (In my large test code, no call to using needed to be
  changed).\n    * `session` and `sessionWith` changed to take a list of Capabilities,
  but when used with `using` the output of `using`\n      is still the input to `session`.
  \ Also, `sessionWith` takes a descriptive string to be used to better describe\n
  \     capabilities.\n\n* In previous versions, as soon as an example had an error
  the entire session was aborted.  This is still the default,\n  but there are now
  functions `runWDOptions` and `runWDWithOptions` which take a setting which can cause
  the session to continue\n  even if the example has an error.  There is an API change
  in the definition of the `WdExample` data constructor to take the\n  new options,
  but as long as you were using `runWD` and `runWDWith` and not using `WdExample`
  directly, there is no change\n  needed to your code.  `runWD` and `runWDWith` still
  have the same behavior as before; as soon as an error occurs, the entire\n  session
  is aborted.\n\n## 1.1.0\n\n* Support for webdriver 0.8.  The API in hspec-webdriver
  itself did not change, but we re-export WebDriver.Commands so I bumped the\n  major
  version. In fact, there were only a few minor changes in the Commands module (most
  of the changes in webdriver\n  were to session management which is handled internally),
  so it is likely that your test suite will compile without changes.\n\n## 1.0.3\n\n*
  Allow newer versions of hspec and HUnit\n\n## 1.0.2\n\n* Fix so that the package
  builds against webdriver 0.6.1\n\n## 1.0.1\n\n* Increase upper bound on hspec to
  allow hspec 2.1\n\n## 1.0.0\n\n* Update to hspec2.  All the same features are present
  but some of the types changed\n  to reflect hspec2 types.\n\n## 0.3.2\n\n* Update
  to the new hspec 1.12 API\n\n## 0.3.1\n\n* Convert inspectSession to turn into a
  pending example instead of throwing an error.\n\n## 0.3.0\n\n* Add support for testing
  multiple sessions at once\n    * multiSession, multiSessionWith, and runWDWith are
  the new functions\n    * the type of runWD and WDExample changed\n\n* Update to
  hspec 0.11 and webdriver 0.6\n    * changed sessionOn to sessionWith to work with
  new webdriver WDConfig\n    * TestCapabilities(newCaps) changed type to @c -> IO
  W.Capabilities@\n\n## 0.2.3\n\n* Add inspectSession to assist debugging the test
  suite\n\n## 0.2.2\n\n* Allow newer version of hspec\n\n## 0.2.1\n\n* Allow newer
  version of hspec\n\n## 0.2.0\n\n* Convert to use webdriver sessions\n\n## 0.1.0\n\n*
  Initial Release\n"
basic-deps:
  stm: '>=2.4'
  base: '>=4 && <5'
  unordered-containers: '>=0.2'
  hspec: '>=2.7 && <2.12'
  text: '>=0.11'
  hspec-core: '>=2.7 && <2.12'
  lifted-base: '>=0.2'
  data-default: '>=0.5'
  HUnit: '>=1.2'
  hashable: '>=1.2'
  transformers: '>=0.3'
  webdriver: '>=0.6.1'
  aeson: '>=0.8'
all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.2.2
- 0.2.3
- 0.3.0
- 0.3.1
- 0.3.2
- 1.0.0
- 1.0.1
- 1.0.2
- 1.0.3
- 1.1.0
- 1.2.0
- 1.2.1
- 1.2.2
author: John Lenz <lenz@math.uic.edu>
latest: 1.2.2
description-type: markdown
description: "This package integrates [hspec](http://hspec.github.io) with\n[hs-webdriver](https://hackage.haskell.org/package/webdriver),
  allowing you to write webdriver tests\nusing hspec.  This package contains no code
  testing the `hspec-webdriver` package itself.  The\n`webdriver-angular` package
  contains some test code which test both the Angular webdriver commands\nin `webdriver-angular`
  and some tests of functions in `hspec-webdriver`. \n"
license-name: MIT
