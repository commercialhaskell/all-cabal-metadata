all-versions:
- 0.3.0
- 0.3.1
- 0.4.0
author: Sigbjorn Finne <sof@forkIO.com>
basic-deps:
  base: '>=4'
  ghc-prim: '>=0'
changelog: "Version 0.4.0 - released 2009-04-18\r\n\r\n  * New major release, interop
  layer completely rewritten, fixed and extended\r\n    in many ways. Under the hood,
  dropped the use of C++/CIL in preference\r\n    for C#. This will stand us in much
  better stead when integrating the \r\n    interop layer with Mono, something that
  hasn't been done yet due (in\r\n    part) to the COM interop driven way that hs-dotnet
  activates and\r\n    calls out to a .NET runtime.\r\n\r\n  * Much better tool support
  for generating Haskell module wrappers \r\n    (tools/hswrap)\r\n\r\n  * Good support
  for working with generic .NET types and representing \r\n    them using parametric
  polymorphism (+ type classes.)\r\n\r\n  * Transparent wrapping up of Haskell function
  values as System.Func\r\n    objects.\r\n\r\n  * Haskell delegate implementation
  reworked and improved, correctly \r\n    using P/Invoke marshalling layer to unwrap
  .NET objects before \r\n    passing them to the underlying Haskell function closure.\r\n\r\n
  \ * Speedups and more code sharing. It's a dynamic, multi-layered (how\r\n    many
  I don't really want to think about at times.. ;-) ) interop\r\n    bridge though
  -- the looser coupling between the two environments\r\n    requires that -- so set
  your perf. expectations accordingly.\r\n\r\n  * More examples included, including
  how to use the wondrous LINQ via\r\n    hs-dotnet.\r\n\r\nVersion 0.3.1 - released
  2009-01-15\r\n\r\n * Fix .cabal issue wrt. base libraries.\r\n\r\nVersion 0.3.0
  - released 2009-01-14\r\n\r\n * First public release out the door.\r\n\r\n"
changelog-type: text
description: "== hs-dotnet: a pragmatic Haskell .NET interop layer ==\r\n\r\nThis
  is the README for hs-dotnet, a package that lets you access\r\nand use .NET code
  / classes from Haskell (and vice versa..) \r\nFeel the power!\r\n\r\n=== Web page
  ===\r\n\r\nMore info on the package, releases, etc can be found at\r\n\r\n  http://haskell.forkIO.com/dotnet\r\n\r\n\r\n===
  Getting started ===\r\n\r\nAfter having built _and_ installed the Cabal package,
  you're ready to\r\ngo. Have a look in the examples/ directory for some bare-bones\r\nexamples\r\n\r\n==
  Generating class wrappers ==\r\n\r\nWhile it is possible to access .NET without
  taking such a structured\r\napproach, you may choose to generate Haskell wrapper
  modules for the\r\n.NET-side classes you want to access. Writing these out by hand,
  and\r\nin a manner that's type-safe, gets tiresome after a while and unncessarily\r\nexposes
  you to RSI risks, so a tool is provided for this in... tools/\r\n\r\nSimply name
  the class you want to wrap up, possibly along with the -d\r\nflag, and it generates
  a Haskell module for the class. The tool has\r\na couple of shortcomings and limitations
  at the moment, but in most\r\ncases that should give you a workable Haskell module.
  \r\n\r\nImprovements to wrapper generation is still evolving and expanded to \r\nmake
  the interface to the .NET world more natural to the Haskell \r\nprogrammer.\r\n\r\n===
  Installation ===\r\n\r\nInstallation amounts to building and installing the Cabal
  package.\r\n\r\nNotice that you will have to perform the install step before you
  are\r\nable to use the package. The reason being that the supporting .NET\r\nassembly
  (and accompanying COM classes) needs to be installed(GACed)\r\nand published first.
  \r\n\r\nYou may manually do this step by running 'gacInstaller' on HsInvoker.dll\r\nand
  'regasm' on same.\r\n\r\n"
description-type: text
hash: 3dbee43ae6bbe9649b99a1e193d219c7d463ef22f2c4bbc6676ec08d39bf70fc
homepage: ''
latest: 0.4.0
license-name: BSD-3-Clause
maintainer: Sigbjorn Finne <sof@forkIO.com>
synopsis: Pragmatic .NET interop for Haskell
test-bench-deps: {}
