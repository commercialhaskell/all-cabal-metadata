homepage: https://github.com/plow-technologies/hspec-golden-aeson#readme
changelog-type: markdown
hash: aa17274114026661ba4dfc9c60c230673c8f408bd86482fd611d2d5cb6aff996
test-bench-deps:
  base: -any
  hspec: -any
  hspec-golden-aeson: -any
  hspec-core: -any
  quickcheck-arbitrary-adt: -any
  silently: -any
  transformers: -any
  QuickCheck: -any
  aeson: -any
  directory: -any
maintainer: mchaver@gmail.com
synopsis: Use tests to monitor changes in Aeson serialization
changelog: |
  # Revision history for hspec-golden-aeson

  ## 0.9.0.0 -- 2021-03-15
  * Breaking change: Objects are now serialized with sorted keys for better
    cross-platform compatibility

  ## 0.8.0.0 -- 2021-03-12

  * Breaking change: Seed is now an `Int32` so golden files are more portable. This
    requires regenerating all golden files which have a seed that overflows
  * Breaking change: Golden files are no longer generated automatically if they
    don't exist, to create them, set the `CREATE_MISSING_GOLDEN` environment variable.
    This is to prevent missing golden files from silently making golden tests
    degrade to round-trip tests
  * Add a `RECREATE_MISSING_GOLDEN` environemnt variable. When present it will
    cause golden files to be re-created if they cause the test to fail. This is
    useful for updating golden files when serialization has been purposedly
    modified and to update the seed if it breaks due to overflow now that it is
    only 32bit wide.

  ## 0.7.0.0 -- 2018-05-17

  * Breaking change: allow roundtripAndGoldenADTSpecs test to pass when random samples generated from the seed in the golden file do not produce the same Haskell samples, but yet decoding and re-encoding the golden file still produces the same bytes as in the golden file.
  * Add an additional faulty file ending in `.faulty.reencoded.json` when the byte-for-byte decode/encode round-trip fails. This allows you to compare the encoding changes without the noise of the random sample change. In this case, the test will output a message indicating whether decoding the golden file produces the same Haskell values as decoding the re-encoded files. If they produce the same values, that is likely a minor encoding change, but still a change so tests fail.
  * Add `RandomMismatchOption` to `Settings` so you can have the old behavior of failing tests when random samples change.

  ## 0.6.0.0 -- 2018-01-04

  * Test encoding in `roundtripAndGoldenADTSpecs' and 'roundtripAndGoldenADTSpecsWithSettings` functions. This may break current tests because only decoding was tested previously.

  ## 0.5.1.0 -- 2018-01-04

  * Remove 'Wredundant-constraints' flag.

  ## 0.5.0.0 -- 2018-01-02

  * Add 'Arbitrary' requirement for 'roundtripADTSpecs', 'roundtripAndGoldenADTSpecs' and 'roundtripAndGoldenADTSpecsWithSettings' because 'Arbitrary' was a redundant constrain for 'ToADTArbitrary' in quickcheck-arbitrary-adt.

  ## 0.4.0.0 -- 2017-12-10

  * Fix behavior for 'mkGoldenFileForType'. Intention is to create a file in a dir for each constructor, but it was only creating a file for one of the constructors of a type.

  ## 0.3.1.0 -- 2017-12-02

  * Expose 'roundtripAndGoldenSpecsWithSettings'.

  ## 0.3.0.0  -- 2017-11-14

  * Add mkGoldenFileForType.
  * Rename internal function fromTypeable to mkTypeNameInfo.
  * Move TopDir, ModuleName, TypeName, TypeNameInfo and mkTypeNameInfo into Test.Aeson.Internal.Util.

  ## 0.2.1.0  -- 2017-08-08

  * Added the ability to run an automated test withought needing a Show, Eq, or Typeable instance.
  * Cleaned up error messages, mostly involving redundant types

  ## 0.2.0.3  -- 2016-09-08

  * Tests were breaking because Test.Types.MismatchedToAndFromSerialization was
  missing from the cabal file.

  ## 0.2.0.2  -- 2016-09-07

  * Forgot to add fixes to the test, in previous version they were not compiling.

  ## 0.2.0.1  -- 2016-09-01

  * Fix error in 'goldenSpecsWithNote', behavior for useModuleNameAsSubDirectory was flipped around and also providing the module name surrounded by quotes.
  * Add more tests.

  ## 0.2.0.0  -- 2016-08-23

  * Make directory and golden file naming flexible.
  * Include optional Settings type that allows users to set the directory name and size of tests.
  * Require quickcheck-arbitrary-adt >= 0.2.0.0.

  ## 0.1.0.0  -- 2016-08-12

  * First version.
basic-deps:
  bytestring: -any
  base: '>=4.7 && <5'
  aeson-pretty: -any
  hspec: -any
  filepath: -any
  quickcheck-arbitrary-adt: '>=0.3.0.0'
  HUnit: -any
  transformers: -any
  random: -any
  QuickCheck: -any
  aeson: -any
  directory: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.1.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.7.0.0
- 0.9.0.0
author: James M.C. Haver II
latest: 0.9.0.0
description-type: markdown
description: "# hspec-golden-aeson\n\n## Arbitrary\n\nGoldenSpecs functions write
  golden files if they do not exist. When they do\nexist they use a seed from the
  golden file to create an arbitrary value of a\ntype and check if the serialization
  matches the file. If it fails it means\nthat there has been a change in the Aeson
  serialization or a change in the\ndata type.\n\nRoundtripSpecs make sure that a
  type is able to be encoded to JSON, decoded\nfrom JSON back to the original type,
  and equal the same value. If it fails\nthen there may be an issue with the ToJSON
  and FromJSON instances.\n\n## ToADTArbitrary\n\n`ToADTArbitrary` is a type class
  that helps create arbitrary values for every\nconstructor in a type. GoldenADTSpecs
  and RoundtripADTSpecs function similarly\nto their `Arbitrary` counterparts, but
  will specifically test each constructor.\nThis is very useful for sum types.\n\n##
  Usage\n\n```haskell\n{-# LANGUAGE DeriveGeneric #-}\n\n-- base\nimport GHC.Generics
  (Generic)\nimport Data.Proxy\n\n-- aeson\nimport Data.Aeson (ToJSON)\n\n-- QuickCheck\nimport
  Test.QuickCheck (Arbitrary (..), oneof)\n\n-- quickcheck-arbitrary-adt\nimport Test.QuickCheck.Arbitrary.ADT
  (ToADTArbitrary)\n\n-- hspec-golden-aeson\nimport Test.Aeson.GenericSpecs (mkGoldenFileForType)\n\n--
  product type\ndata Person =\n  Person\n    { name :: String\n    , address :: String\n
  \   , age :: Int\n    } deriving (Eq,Read,Show,Generic)\n\ninstance ToJSON Person\n\n--
  derive ToADTArbitrary generically\ninstance ToADTArbitrary Person\ninstance Arbitrary
  Person where\n  arbitrary = Person <$> arbitrary <*> arbitrary <*> arbitrary\n\n--
  sum type\ndata OnOrOff\n  = On\n  | Off\n  deriving (Eq,Read,Show,Generic)\n\ninstance
  ToJSON OnOrOff\n\n-- derive ToADTArbitrary generically\ninstance ToADTArbitrary
  OnOrOff\ninstance Arbitrary OnOrOff where\n  arbitrary = oneof [pure On, pure Off]\n\n\nmain
  :: IO ()\nmain = do\n  -- only create the golden files, do not run tests\n  mkGoldenFileForType
  10 (Proxy :: Proxy Person) \"golden\"\n  mkGoldenFileForType 10 (Proxy :: Proxy
  OnOrOff) \"golden\"\n  \n  -- for an arbitrary instance of each constructor\n  --
  make sure that ToJSON and FromJSON are defined such that \n  -- they same value
  is maintained\n  roundtripSpecs (Proxy :: Proxy Person)\n  roundtripSpecs (Proxy
  :: Proxy OnOrOff)\n\n  -- the first time it create files if they do not exist\n
  \ -- if they exist then it will test serialization against the files along with
  the roundtrip tests\n  -- files are saved in \"golden\" dir.\n  goldenSpecs (Proxy
  :: Proxy Person)\n  goldenSpecs (Proxy :: Proxy OnOrOff)\n  \n  -- use the module
  name as a dir when saving and opening files\n  goldenSpecs (defaultSettings { useModuleNameAsSubDirectory
  = True }) (Proxy :: Proxy Person)\n  goldenSpecs (defaultSettings { useModuleNameAsSubDirectory
  = True }) (Proxy :: Proxy OnOrOff)\n  \n  -- control the location of the golde files\n
  \ let topDir = \"json-tests\"\n  goldenSpecs (defaultSettings {goldenDirectoryOption
  = CustomDirectoryName topDir}) (Proxy :: Proxy Person)\n  goldenSpecs (defaultSettings
  {goldenDirectoryOption = CustomDirectoryName topDir}) (Proxy :: Proxy OnOrOff)\n\n```\n"
license-name: BSD-3-Clause
