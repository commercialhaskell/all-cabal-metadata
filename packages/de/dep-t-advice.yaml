all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.4.4.0
- 0.4.5.0
- 0.4.6.0
- 0.4.6.1
- 0.4.7.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
author: Daniel Diaz
basic-deps:
  base: '>=4.10.0.0 && <5'
  dep-t: ^>=0.6.1
  mtl: '>=2.2'
  sop-core: ^>=0.5.0.0
  transformers: '>=0.5.0.0'
  unliftio-core: '>=0.2.0.0'
changelog: "# Revision history for dep-t-advice\n\n## 0.6.2.0\n\n* Add `Dep.ReaderAdvice`
  and `Dep.IOAdvice`.\n\n## 0.6.1.0 \n\n* Export `MonadCallStack` https://github.com/danidiaz/dep-t-advice/issues/23\n\n*
  Export converted versions of `Dep.SimpleAdvice.Basic` from `Dep.Advice.Basic`.\n\n##
  0.6.0.0 \n\n* SyntheticCallStackException renamed to SyntheticStackTraceException.\n
  \ SyntheticStackTraceException now contains NonEmpty stack traces. \n\n  Also, for
  each frame, the full path in the environment to the component is\n  provided. This
  is helpful for Dep.Tagged components.\n  \n  [Issue #18](https://github.com/danidiaz/dep-t-advice/issues/18).\n\n*
  `Dep.Advice.component` can now treat components with nested records.\n\n* Removed
  deprecated modules.\n\n## 0.5.1.0 \n\n* `Control.Monad.whatever` renamed to `whatever`.
  \n\n  The old modules still remain, but deprecated.\n\n* Added `fromSimple_`.\n\n*
  Added `injectFailures` and `keepCallStack`.\n\n## 0.5.0.0 \n\n* The Advice type
  has changed to get rid of the existential type.\n  This breaks the 'makeAdvice'
  function.   \n* Added 'Control.Monad.Dep.SimpleAdvice' and 'Control.Monad.Dep.SimpleAdvice.Basic'.\n*
  Moved some \"basic\" advices.\n* Removed distributeDepT.\n* 'adviseRecord' now receives
  a 'NonEmpty' path-in-record, ordered innermost-first.\n* More flexible type for
  doLocally.\n\n## 0.4.7.0 \n\n* Added 'distributeDepT' and 'component'.\n\n## 0.4.6.1
  \n\n* Modified a signature to make it compile with GHC 9.0.1.\n\n## 0.4.6.0 \n\n*
  `adviseRecord` and `deceiveRecord` now work with records having fields wrapped in
  `Identity`.\n\n  This is for better compatibility with the [barbies](http://hackage.haskell.org/package/barbies)
  package.\n\n## 0.4.5.0 \n\n* Added runFromDep.\n\n  This required bumping the minimum
  version of dep-t to 0.4.4.0.\n\n## 0.4.4.0 \n\n* Added 'adviseRecord' and 'deceiveRecord'
  that manipulate entire\n  records-of-functions (also work on newtypes) instead of
  a single bare\n  function. \n\n  Useful when the components to put on the environment
  come in their own record\n  types.\n\n## 0.4.0.0 \n\n* Added 'deceive' function.\n\n*
  BREAKING CHANGE. The form of the 'HasX' constraints expected by 'Ensure' has\n  changed.
  Now they expect the effect monad as their first parameter. This is\n  in order to
  help with deriving.\n\n## 0.3.0.0 \n\n* BREAKING CHANGE. Removed the dependency
  on \"constraints\" to reduce the\n  dependency footprint. This changes the signature
  of restrictArgs.\n\n## 0.2.0.0 \n\n* BREAKING CHANGE. The Advice type is no longer
  parameterized by the `cem` and\n  `cr` constraints. Instead, it's directly parameterized
  by the types `e` of\n  the environment, `m` of the base monad and `r` of the result,
  which are left\n  polymorphic when needed. This simplifies a bunch of things. The
  `ca`\n  constraint paramter remains however.\n\n## 0.1.0.0 -- YYYY-mm-dd\n\n* First
  version. Released on an unsuspecting world.\n"
changelog-type: markdown
description: "# dep-t-advice\n\nThis package is a companion to\n[dep-t](http://hackage.haskell.org/package/dep-t).
  It provides a mechanism for\nhandling cross-cutting concerns in your application
  by adding \"advices\" to the\nfunctions in your record-of-functions, in a way that
  is composable and\nindependent of each function's particular number of arguments.\n\n[![dep-t-advice.png](https://i.postimg.cc/L8Cm279S/dep-t-advice.png)](https://postimg.cc/tsxKzBnv)\n\n##
  Rationale\n\nSo, you have decided to structure your program in a record-of-functions
  style,\nusing [dep-t](http://hackage.haskell.org/package/dep-t). Good choice!\n\nYou
  have already selected your functions, decided which base monad use for\n`DepT`,
  and now you are ready to construct the environment record, which serves\nas your
  [composition\nroot](https://stackoverflow.com/questions/6277771/what-is-a-composition-root-in-the-context-of-dependency-injection).\n\nNow
  seems like a good moment to handle some of those pesky [\"croscutting\nconcerns\"](https://en.wikipedia.org/wiki/Cross-cutting_concern),
  don't you\nthink?\n\nStuff like:\n\n- Logging\n- Caching\n- Monitoring\n- Validation\n-
  Setting up transaction boundaries.\n- Setting up exception handlers for uncaught
  exceptions.\n\nBut how will you go about it?\n\n### A perfectly simple and reasonable
  solution\n\nImagine that you want to make this function print its argument to stdout:\n\n
  \   foo :: Int -> DepT e_ IO () \n\nEasy enough:\n\n    foo' :: Int -> DepT e_ IO
  ()\n    foo' arg1 = do\n        liftIO $ putStrLn (show arg1)\n        foo arg1\n\nYou
  can even write your own general \"printArgs\" combinator:\n\n    printArgs :: Show
  a => (a -> DepT e_ IO ()) -> (a -> DepT e_ IO ())\n    printArgs f arg1 = do\n        liftIO
  $ putStrLn (show arg1)\n        f arg1\n\nYou could wrap `foo` in `printArgs` when
  constructing the record-of-functions,\nor perhaps you could modify the corresponding
  field after the record had been\nconstructed.\n\nThis solution works, and is easy
  to understand. There's an annoyance though:\nyou need a different version of `printArgs`
  for each number of arguments a\nfunction might have.\n\nAnd if you want to compose
  different combinators (say, `printArgs` and\n`printResult`) before applying them
  to functions, you need a composition\ncombinator specific for each number of arguments.\n\n###
  The solution using \"advices\"\n\nThe `Advice` datatype provided by this package
  encapsulates a transformation on\n`DepT`-effectful functions, *in a way that is
  polymorphic over the number of\narguments*. The same advice will work for functions
  with `0`, `1` or `N`\narguments.\n\nAdvices can't change the type of a function,
  but they might:\n\n- Analyze and change the values of the function's arguments.\n\n-
  Add additional effects to the function, either effects from the base monad, or effects
  from handlers found in the environment.\n\n- Change the result value of the function.\n\n-
  Sidestep the execution of the function altogether, providing al alternative result.\n\nHere's
  how a `printArgs` advice might be defined:\n\n    printArgs :: forall e_ m r. MonadIO
  m => Handle -> String -> Advice Show e_ m r\n    printArgs h prefix =\n      makeArgsAdvice\n
  \       ( \\args -> do\n            liftIO $ hPutStr h $ prefix ++ \":\"\n            hctraverse_
  (Proxy @Show) (\\(I a) -> liftIO (hPutStr h (\" \" ++ show a))) args\n            liftIO
  $ hPutStrLn h \"\\n\"\n            liftIO $ hFlush h\n            pure args\n        )\n\nThe
  advice receives the arguments of the function in the form of an [n-ary\nproduct](http://hackage.haskell.org/package/sop-core-0.5.0.1/docs/Data-SOP-NP.html#t:NP)\nfrom
  [sop-core](http://hackage.haskell.org/package/sop-core-0.5.0.1). But it\nmust be
  polymorphic on the shape of the type-level list which indexes the\nproduct. This
  makes the advice work for any number of parameters.\n\nThe advice would be applied
  like this:\n\n    advise (printArgs stdout \"foo args: \") foo\n\n## Advices should
  be applied at the composition root\n\nIt's worth emphasizing that advices should
  be applied at the [\"composition\nroot\"](https://stackoverflow.com/questions/6277771/what-is-a-composition-root-in-the-context-of-dependency-injection),\nthe
  place in our application in which all the disparate functions are assembled\nand
  we commit to a concrete monad, namely `DepT`.\n\nBefore being brought into the composition
  root, the functions need not be aware\nthat `DepT` exists. They might be working
  in some generic `MonadReader`\nenvironment, plus some constraints on that environment.\n\nOnce
  we decide to use `DepT`, we can apply the advice, because advice only\nworks on
  functions that end on a `DepT` action. Also, advice might depend on\nthe full gamut
  of functionality stored in the environment.\n\n## What about  `Dep.ReaderAdvice`
  and `Dep.IOAdvice`?\n\n`Advice`s from `Dep.Advice` require us to work with `DepT`,
  but `DepT` is kind\nof weird. Instead, we may might to use more common monads for
  our effects, like\n`ReaderT` o plain old `IO`.\n\nThat's why `Dep.ReaderAdvice`
  and `Dep.IOAdvice` exist: they provide alternative\nversions of the `Advice` type
  which work with those monads.\n\nAin't that a lot of code duplication? Why not have
  a single `Advice` type which\nworks with all monads? That leads us to...\n\n## What
  about `Dep.SimpleAdvice`?\n\n`Dep.SimpleAdvice` provides a version of the `Advice`
  type that can be used with\ndifferent concrete monads like `ReaderT` or `IO`.\n\nSee
  [this\nthread](https://discourse.haskell.org/t/decorate-your-records-of-functions-with-this-weird-trick/3675)\nin
  the Haskell Discourse for more info.\n\nThere's a catch, however. `Dep.SimpleAdvice`
  depends on the `coerce` mechanism\nof Haskell, and it can sometimes be finicky,
  for example when some required\nconstructor hasn't been imported, or when there
  are polymorphic functions\ninvolved.\n\nThat's the reason `Dep.ReaderAdvice` and
  `Dep.IOAdvice` are still necessary. For\ntheir particular monads, they work in more
  cases.\n\n## Historical aside\n\nAccording to Wikipedia, the term \"advice\" in
  the sense of aspect-oriented\nprogramming goes back to 1966. Quoting from [PILOT:
  A Step Toward Man-Computer\nSymbiosis](http://publications.csail.mit.edu/ai/browse/0200browse.shtml):\n\n>
  There are two ways a user can modify programs in this subjective model of\n> programming:
  he can modify the interface between procedures, or he can modify\n> the procedure
  itself. (Since procedures are themselves made up of procedures,\n> modifying a procedure
  at one level may correspond to modifying the interface\n> between procedures at
  a lower level.) Modifying the interface between\n> procedures is called advising.
  Modifying a procedure itself is editing.\n\n> Advising is the basic innovation in
  the model, and in the PILOT system.\n> Advising consists of inserting new procedures
  at any or all of the entry or\n> exit points to a particular procedure (or class
  of procedures). The\n> procedures inserted are called \"advice procedures\" or simply
  \"advice\".\n\n> Since each piece of advice is itself a procedure, it has its own
  entries and\n> exits. In particular, this means that the execution of advice can
  cause the\n> procedure that it modifies to be bypassed completely, e.g., by specifying
  as\n> an exit from the advice one of the exits from the original procedure; or the\n>
  advice may change essential variables and continue with the computation so\n> that
  the original procedure is executed, but with modified variables.\n> Finally, the
  advice may not alter the execution or affect the original\n> procedure at all, e.g.,
  it may merely perform some additional computation\n> such as printing a message
  or recording history. Since advice can be\n> conditional, the decision as to what
  is to be done can depend on the results\n> of the computation up to that point.\n\n>
  The principal advantage of advising is that the user need not be concerned\n> about
  the details of the actual changes in his program, nor the internal\n> representation
  of advice. He can treat the procedure to be advised *as a\n> unit*, a single block,
  and make changes to it without concern for the\n> particulars of this block. This
  may be contrasted with editing in which the\n> programmer must be cognizant of the
  internal structure of the procedure.\n\n[tweet](https://twitter.com/DiazCarrete/status/1446783366678949891).\n\n##
  Links\n\n- [Aspect Oriented Programming with\n  Spring](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop)\n
  \ and [Spring AOP\n  APIs](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-api).\n\n-
  [Using the “constraints” package to make a wrapped function less\n  polymorphic](https://stackoverflow.com/questions/65800809/using-the-constraints-package-to-make-a-wrapped-function-less-polymorphic)\n\n-
  [variadic-function](https://hackage.haskell.org/package/variadic-function) a\n  Hackage
  library which also deals with functions of any number of elements.\n  [Reddit\n
  \ thread](https://www.reddit.com/r/haskell/comments/oeyaz2/ann_typeablemock_mocks_that_can_fit_into_any/).\n\n-
  [Inferring the arity of zipWith, with lots of type-level hackery](https://www.youtube.com/watch?v=iGSKqcebhfs&t=957s).
  YouTube video.\n\n- [Functional Pearl: The Decorator Pattern in Haskell](https://twitter.com/DiazCarrete/status/1403985337513394178)\n\n
  \ > An arity-generic decorator needs to solve two problems: intercept recursive
  calls and handle functions of any arity uniformly\n\n"
description-type: markdown
hash: a2d9d86211bc46b3d51089a002b36241b2a6d1d308b51bee232e593da757ee62
homepage: ''
latest: 0.6.2.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: Giving good advice to functions in records-of-functions.
test-bench-deps:
  aeson: '>=0'
  barbies: '>=2.0.2.0 && <2.1'
  base: '>=4.10.0.0 && <5'
  containers: '>=0'
  criterion: ^>=1.5
  dep-t: '>=0.6.1 && <0.7'
  dep-t-advice: '>=0'
  doctest: ^>=0.20
  microlens: ^>=0.4.12.0
  mtl: '>=2.2'
  rank2classes: '>=1.4.1 && <1.5'
  sop-core: '>=0.5.0.0 && <0.6'
  tasty: '>=1.3.1'
  tasty-hunit: '>=0.10.0.2'
  template-haskell: '>=0'
  text: '>=0'
  transformers: '>=0.5.0.0'
  unliftio-core: '>=0.2.0.0'
