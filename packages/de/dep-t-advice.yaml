homepage: ''
changelog-type: markdown
hash: ab6dabf1952b1ab11d1df5bb0c72cf418066fd08bb6f3b286df8928682827efb
test-bench-deps:
  rank2classes: '>=1.4.1 && <1.5'
  sop-core: '>=0.5.0.0 && <0.6'
  base: '>=4.10.0.0 && <5'
  criterion: ^>=1.5
  doctest: ^>=0.17
  mtl: ==2.2.*
  tasty-hunit: '>=0.10.0.2'
  dep-t: '>=0.4.0.0 && <0.5'
  transformers: '>=0.5.0.0 && <0.6'
  tasty: '>=1.3.1'
  template-haskell: -any
  dep-t-advice: -any
maintainer: diaz_carrete@yahoo.com
synopsis: Giving good advice to functions in a DepT environment.
changelog: "# Revision history for dep-t-advice\r\n\r\n## 0.4.0.0 \r\n\r\n* Added
  'deceive' function.\r\n\r\n* BREAKING CHANGE. The form of the 'HasX' constraints
  expected by 'Ensure' has\r\n  changed. Now they expect the effect monad as their
  first parameter. This is\r\n  in order to help with deriving.\r\n\r\n## 0.3.0.0
  \r\n\r\n* BREAKING CHANGE. Removed the dependency on \"constraints\" to reduce the\r\n
  \ dependency footprint. This changes the signature of restrictArgs.\r\n\r\n## 0.2.0.0
  \r\n\r\n* BREAKING CHANGE. The Advice type is no longer parameterized by the `cem`
  and\r\n  `cr` constraints. Instead, it's directly parameterized by the types `e`
  of\r\n  the environment, `m` of the base monad and `r` of the result, which are
  left\r\n  polymorphic when needed. This simplifies a bunch of things. The `ca`\r\n
  \ constraint paramter remains however.\r\n\r\n## 0.1.0.0 -- YYYY-mm-dd\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n"
basic-deps:
  sop-core: ^>=0.5.0.0
  base: '>=4.10.0.0 && <5'
  dep-t: ^>=0.4.0.0
  transformers: ^>=0.5.0.0
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.0.1
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
author: Daniel Diaz
latest: 0.4.0.1
description-type: markdown
description: "# dep-t-advice\r\n\r\nThis package is a companion to\r\n[dep-t](http://hackage.haskell.org/package/dep-t).
  It provides a mechanism for\r\nhandling cross-cutting concerns in your application
  by adding \"advices\" to the\r\nfunctions in your record-of-functions, in a way
  that is composable and\r\nindependent of each function's particular number of arguments.\r\n\r\n##
  Rationale\r\n\r\nSo, you have decided to structure your program in a record-of-functions
  style,\r\nusing [dep-t](http://hackage.haskell.org/package/dep-t). Good choice!\r\n\r\nYou
  have already selected your functions, decided which base monad use for\r\n`DepT`,
  and now you are ready to construct the environment record, which serves\r\nas your
  [composition\r\nroot](https://stackoverflow.com/questions/6277771/what-is-a-composition-root-in-the-context-of-dependency-injection).\r\n\r\nNow
  seems like a good moment to handle some of those pesky [\"croscutting\r\nconcerns\"](https://en.wikipedia.org/wiki/Cross-cutting_concern),
  don't you\r\nthink?\r\n\r\nStuff like:\r\n\r\n- Logging\r\n- Caching\r\n- Monitoring\r\n-
  Validation\r\n- Setting up transaction boundaries.\r\n- Setting up exception handlers
  for uncaught exceptions.\r\n\r\nBut how will you go about it?\r\n\r\n### A perfectly
  simple and reasonable solution\r\n\r\nImagine that you want to make this function
  print its argument to stdout:\r\n\r\n    foo :: Int -> DepT e_ IO () \r\n\r\nEasy
  enough:\r\n\r\n    foo' :: Int -> DepT e_ IO ()\r\n    foo' arg1 = do\r\n        liftIO
  $ putStrLn (show arg1)\r\n        foo arg1\r\n\r\nYou can even write your own general
  \"printArgs\" combinator:\r\n\r\n    printArgs :: Show a => (a -> DepT e_ IO ())
  -> (a -> DepT e_ IO ())\r\n    printArgs f arg1 = do\r\n        liftIO $ putStrLn
  (show arg1)\r\n        f arg1\r\n\r\nYou could wrap `foo` in `printArgs` when constructing
  the record-of-functions,\r\nor perhaps you could modify the corresponding field
  after the record had been\r\nconstructed.\r\n\r\nThis solution works, and is easy
  to understand. There's an annoyance though:\r\nyou need a different version of `printArgs`
  for each number of arguments a\r\nfunction might have.\r\n\r\nAnd if you want to
  compose different combinators (say, `printArgs` and\r\n`printResult`) before applying
  them to functions, you need a composition\r\ncombinator specific for each number
  of arguments.\r\n\r\n### The solution using \"advices\"\r\n\r\nThe `Advice` datatype
  provided by this package encapsulates a transformation on\r\n`DepT`-effectful functions,
  *in a way that is polymorphic over the number of\r\narguments*. The same advice
  will work for functions with `0`, `1` or `N`\r\narguments.\r\n\r\nAdvices can't
  change the type of a function, but they might:\r\n\r\n- Analyze and change the values
  of the function's arguments.\r\n\r\n- Add additional effects to the function, either
  effects from the base monad, or effects from handlers found in the environment.\r\n\r\n-
  Change the result value of the function.\r\n\r\n- Sidestep the execution of the
  function altogether, providing al alternative result.\r\n\r\nHere's how a `printArgs`
  advice might be defined:\r\n\r\n    printArgs :: forall e_ m r. MonadIO m => Handle
  -> String -> Advice Show e_ m r\r\n    printArgs h prefix =\r\n      makeArgsAdvice\r\n
  \       ( \\args -> do\r\n            liftIO $ hPutStr h $ prefix ++ \":\"\r\n            hctraverse_
  (Proxy @Show) (\\(I a) -> liftIO (hPutStr h (\" \" ++ show a))) args\r\n            liftIO
  $ hPutStrLn h \"\\n\"\r\n            liftIO $ hFlush h\r\n            pure args\r\n
  \       )\r\n\r\nThe advice receives the arguments of the function in the form of
  an [n-ary\r\nproduct](http://hackage.haskell.org/package/sop-core-0.5.0.1/docs/Data-SOP-NP.html#t:NP)\r\nfrom
  [sop-core](http://hackage.haskell.org/package/sop-core-0.5.0.1). But it\r\nmust
  be polymorphic on the shape of the type-level list which indexes the\r\nproduct.
  This makes the advice work for any number of parameters.\r\n\r\nThe advice would
  be applied like this:\r\n\r\n    advise (printArgs stdout \"foo args: \") foo\r\n\r\n##
  Advices should be applied at the composition root\r\n\r\nIt's worth emphasizing
  that advices should be applied at the [\"composition\r\nroot\"](https://stackoverflow.com/questions/6277771/what-is-a-composition-root-in-the-context-of-dependency-injection),\r\nthe
  place in our application in which all the disparate functions are assembled\r\nand
  we commit to a concrete monad, namely `DepT`.\r\n\r\nBefore being brought into the
  composition root, the functions need not be aware\r\nthat `DepT` exists. They might
  be working in some generic `MonadReader`\r\nenvironment, plus some constraints on
  that environment.\r\n\r\nOnce we decide to use `DepT`, we can apply the advice,
  because advice only\r\nworks on functions that end on a `DepT` action. Also, advice
  might depend on\r\nthe full gamut of functionality stored in the environment.\r\n\r\n##
  Links\r\n\r\n- [Aspect Oriented Programming with\r\n  Spring](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop)\r\n
  \ and [Spring AOP\r\n  APIs](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-api).\r\n\r\n-
  [Using the “constraints” package to make a wrapped function less\r\n  polymorphic](https://stackoverflow.com/questions/65800809/using-the-constraints-package-to-make-a-wrapped-function-less-polymorphic)\r\n\r\n-
  [Dependency Injection Principles, Practices, and\r\n  Patterns](https://www.goodreads.com/book/show/44416307-dependency-injection-principles-practices-and-patterns)\r\n
  \ This is a good book on the general princples of DI. \r\n\r\n\r\n"
license-name: BSD-3-Clause
