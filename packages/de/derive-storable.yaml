all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.1.0
- 0.1.1.1
- 0.1.2.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
author: Mateusz Kloczko
basic-deps:
  base: '>=4.8 && <5'
changelog: |
  # Revision history for derive-storable

  ## 0.3.1.0  -- 2021-04-13

  * Added a non-internal getFilling helper [thanks to dpwiz](https://github.com/mkloczko/derive-storable/pull/8).


  ## 0.3.0.0  -- 2020-03-01

  * Removed instances module. A breaking change therefore bump to 0.3.

  ## 0.2.0.0  -- 2020-03-01

  * Added support for sum types enabled through additional option.

  ## 0.1.2.0  -- 2018-04-30

  * Added U1 instance for GHC.Generics.

  ## 0.1.1.1 rev1 -- 2018-03-20

  * Bump to GHC 8.4.1

  ## 0.1.1.1  -- 2017-10-05

  * Fixed a bug with POSIX types enabled on non POSIX systems.

  ## 0.1.1.0  -- 2017-07-19

  * Bumped to GHC 8.2.*

  ## 0.1.0.6  -- 2016-12-07

  * Made the information about performance problems more visible in README.md

  ## 0.1.0.4  -- 2016-11-29

  * Fixed the bug with Foreign.Storable.Generic.Internal.Instances module.
  * Removed two tests related to numbering of fields.

  ## 0.1.0.3  -- 2016-09-19

  * Changed the link in README to hackage repository.

  ## 0.1.0.2  -- 2016-09-11

  * Changed generic-storable to derive-storable in README.md
  * Added README.md to the package


  ## 0.1.0.0  -- 2016-09-08

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# Introduction\n\n[![Build Status](https://travis-ci.org/mkloczko/derive-storable.svg?branch=master)](https://travis-ci.org/mkloczko/derive-storable)\n\nThe
  `derive-storable` package allows you to automatically generate Storable instances
  for your datatypes. It uses GHC.Generics, which allows the coders to derive certain
  instances automatically. To derive a (G)Storable instance, the data-type has to:\n\n*
  ~~have only one constructor~~ There is now a `sumtypes` option for data-types with
  multiple constructors. See **Sum types** section for more.\n* all fields of the
  constructor need to be GStorable.\n* implement a Generic instance (`derive (Generic)`)\n\n###
  Sum types\n\nTo enable support for sum types, add a `-f sumtypes` option to `cabal
  new-build` or `cabal new-configure`. The library discerns between sum and non-sum
  types. Non-sum types have the same memory layout as C structs, while sum types correspond
  to tagged unions: \n\n```c\nstruct datatype {\n    unsigned char tag;\n    union
  { \n        constructor1 a;\n        constructor2 b;\n        ...\n    } val;\n};\n\n```\n\nNote
  - while it is possible to have an instance for a self/mutually recursive data-type,
  using methods for the data-type will result in infinite loop. So there is no support
  for recursion in data-types.\n\n### Note on performance\n\nThere are some problems
  with performance of derived Storable instances. For now there exists a solution
  in form of GHC Core plugin - [derive-storable-plugin](https://hackage.haskell.org/package/derive-storable-plugin).\n\n#
  Usage\n\nHere's an example:\n\n\n```haskell\n{-# LANGUAGE DeriveGeneric #-}\n\nimport
  Foreign.Storable\nimport Foreign.Storable.Generic\nimport Foreign.Ptr\nimport Foreign.Marshal.Alloc\n\nimport
  Generics.Deriving\n\ndata Position = Position {\n   x :: Double, \n   y :: Double\n}
  deriving (Show,Read, Generic)\n\ninstance GStorable Position\n\nupdatePosition ::
  Ptr Position -> Position -> IO ()\nupdatePosition ptr pos = poke ptr pos\n\n\nmain
  = do\n    let val = Position 0.0 10.0\n    ptr <- malloc :: IO (Ptr Position)      \n
  \   putStrLn \"Created a ptr with value of\"\n    putStrLn =<< show <$> peek ptr\n
  \   updatePosition ptr val\n    putStrLn \"And now the value of ptr is:\"   \n    putStrLn
  =<< show <$> peek ptr\n\n```\n\n"
description-type: markdown
hash: bd1c51c155a00e2be18325d553d6764dd678904a85647d6ba952af998e70aa59
homepage: https://www.github.com/mkloczko/derive-storable/
latest: 0.3.1.0
license-name: MIT
maintainer: mateusz.p.kloczko@gmail.com
synopsis: Derive Storable instances with GHC.Generics.
test-bench-deps:
  QuickCheck: '>=2.10'
  base: '>=4.8 && <5'
  criterion: '>=1.1.0'
  deepseq: '>=0'
  derive-storable: '>=0'
  hspec: '>=2.4'
