all-versions:
- 0.1.0.0
- 0.1.0.1
author: Yuji Yamamoto
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  template-haskell: '>=0'
changelog: |
  # Changelog for deriveJsonNoPrefix

  ## 0.1.0.1

  - Add tests.
  - Add more detailed README.

  ## 0.1.0.0

  Initial release.
changelog-type: markdown
description: "# deriveJsonNoPrefix\n\nTemplate Haskell macros to derive ToJSON/FromJSON
  instances in a more prefix-friendly manner.\n\n## Example\n\nSuppose you want to
  create a JSON like this:\n\n```json\n{\n    \"id\": \"ID STRING\",\n    \"max\":
  0.789,\n    \"min\": 0.123\n}\n```\n\nYou'd want to define a record type to derive
  the instance of [ToJSON](http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:ToJSON)
  (and possibly [FromJSON](http://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:FromJSON))
  automatically:\n\n```hs\n{-# LANGUAGE TemplateHaskell #-}\n\nimport Data.Aeson.TH\n\ndata
  SomeRecord = SomeRecord\n  { id :: String\n  , max :: Double\n  , min :: Double\n
  \ } deriving (Eq, Show)\n\n$(deriveToJSON ''SomeRecord)\n```\n\nBut you shouldn't
  define such a record because both `id`, `max`, and `min` are predefined functions
  of `Prelude`!!\n\nAs a workaround, we frequently prefix the record labels with their
  type name:\n\n```hs\ndata SomeRecord = SomeRecord\n  { someRecordId :: String\n
  \ , someRecordMax :: Double\n  , someRecordMin :: Double\n  } deriving (Eq, Show)\n```\n\nThen
  `deriveToJSON` with a modified option:\n\n```hs\nderiveToJSON Json.defaultOptions
  { fieldLabelModifier = firstLower . drop (length \"SomeRecord\") } ''SomeRecord\n```\n\nThat's
  almost exactly what `deriveToJsonNoTypeNamePrefix` does!!  \n`deriveToJsonNoTypeNamePrefix`
  is essentially defined as:\n\n```hs\nderiveToJsonNoTypeNamePrefix :: Name -> Q [Dec]\nderiveToJsonNoTypeNamePrefix
  deriver name =\n  deriveToJSON Json.defaultOptions { fieldLabelModifier = dropPrefix
  name } name\n```\n\nSo now, you don't have reimplement the `fieldLabelModifier`
  anymore!\n\n```hs\nimport Data.Aeson.DeriveNoPrefix\n\n$(deriveJsonNoTypeNamePrefix
  ''SomeRecord)\n```\n\n## Other libraries which would solve the same problem\n\n-
  [extensible](https://hackage.haskell.org/package/extensible).\n- And other libraries
  providing extensible records with `ToJSON` / `FromJSON` instances.\n\nSo use this
  package all of them are too heavy in learning cost / dependency footprint / etc.\n"
description-type: markdown
hash: 94a1bb89742781ccd9b790db2b2f72f8ab206cd57b0066052669758efb0a7c03
homepage: https://gitlab.com/igrep/deriveJsonNoPrefix
latest: 0.1.0.1
license-name: Apache-2.0
maintainer: whosekiteneverfly@gmail.com
synopsis: Derive ToJSON/FromJSON instances in a more prefix-friendly manner.
test-bench-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  deriveJsonNoPrefix: '>=0'
  hspec: '>=0'
  template-haskell: '>=0'
  text: '>=0'
  unordered-containers: '>=0'
