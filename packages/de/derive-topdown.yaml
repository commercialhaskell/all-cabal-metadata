all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.7
- 0.0.0.9
- 0.0.1.0
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.1.0.0
author: Song Zhang
basic-deps:
  base: '>=4.8 && <5'
  containers: '>=0'
  mtl: '>=0'
  primitive: '>=0'
  syb: '>=0'
  template-haskell: '>=0'
  th-abstraction: '>=0'
  th-expand-syns: '>=0'
  transformers: '>=0'
changelog: "derive-topdown\n======\nderive-topdown-0.1.0.0\n--------------\n- `0.1.0.0`\n
  \   * Almost a reimplementation the deriving and instance generation functions.\n\t*
  Implement class context generation. Now only necessary context type will be generated.
  \n    * This version only compatible for ghc-8.6 to ghc-9.10. ghc-8.4 and ghc-8.2
  can build but not able to run test cases.\n\n\nderive-topdown-0.0.3.0\n--------------\n-
  `0.0.3.0`\n\t* Adapt to GHC 9.0.\n\nderive-topdown-0.0.2.1\n--------------\n- `0.0.2.1`\n\t*
  Remove unnecessary dependencies for testing.\n\nderive-topdown-0.0.2.0\n--------------\n-
  `0.0.2.0`\n\t* Add deriving superclass functions. When you want to derive a class
  instance, not necessary to derive all its superclasses.\n\nderive-topdown-0.0.1.0\n--------------\n-
  `0.0.1.0`\n    * Imporve error message.Will print the types list when type is not
  data or newtype defined.\n\nderive-topdown-0.0.0.9\n--------------\n- `0.0.0.9`
  \n    * Changed API for `strategy_derivng(s)`. Deriving strategy should be specified
  first as the default grammar of `deriving`.\n    * Provided `deriving_with_breaks`
  function so that one can specify the types that prevent further standalone deriving
  declarations from generating process. This is mainly for `Generic` class. See the
  test of deriving `Generic` for `HsModule`.\n    * Fixed Strategy deriving problem.
  Deriving with NewtypeStrategy on data type defined by `data` keyword will be ignored.\n
  \   * Fixed problem with class context generation for phantom types. Phantom types
  will not be in the context now.\n    * Fixed `ArrowT` problem. It should be not
  a type variable and should appear in the context.\n    * Handled data constructor
  which contains explicit `forall`.\n    * Added test. It generates class instances
  for data types in `template-haskell` and `haskell-src`.\n\nderive-topdown-0.0.0.7\n--------------\n-
  `0.0.0.7` is a more carefully implemented version of derive-topdown.\nAll APIs are
  **totally** changed compared with 0.0.0.2. Originally it did not work with types
  that contain type synonyms and polymorphic types. It can work for most common cases
  in this version now.\n\nderive-topdown-0.0.0.2\n--------------\n- Fixed some cabal
  file and API problems.\n\nderive-topdown-0.0.0.1\n--------------\n- This is only
  an experimental implementation for deriving class instances from top to bottom.\nThere
  is a lot of deficiencies.\n"
changelog-type: markdown
description: "# derive-topdown\n[![Hackage version](https://img.shields.io/hackage/v/derive-topdown.svg?label=Hackage)](https://hackage.haskell.org/package/derive-topdown)
  [![Stackage version](https://www.stackage.org/package/derive-topdown/badge/lts?label=Stackage)](https://www.stackage.org/package/derive-topdown)\n\nThis
  is a Haskell project which will derive type class instances from top for a composite
  data type.\n\n## 1. Standalone deriving\nThere are functions named `deriving_`,
  `derivings`, `derivingss`. Please see the API for their types.\n\n``` haskell\n{-#
  LANGUAGE StandaloneDeriving,\n    ConstraintKinds,\n    UndecidableInstances,\n
  \   GADTs,\n    TemplateHaskell,\n    DeriveGeneric #-}\n{-# OPTIONS_GHC -ddump-splices
  #-}\n\nimport Data.Derive.TopDown\nimport GHC.Generics\nimport Data.Binary\nimport
  Data.Aeson\nimport Data.Aeson.TH\n\ndata Gender = Male | Female\ntype Age = Int\ndata
  Person a = P {name :: String , age :: Int, gender :: Gender}\ndata Department a
  = D {dname :: String , \n                        head :: Person a, \n                        staff
  :: [Person a]}\ndata Company a = C {cname :: String, \n                    departments
  :: [Department a]}\n\nderivings [''Eq, ''Ord, ''Generic] ''Company\n```\nYou will
  get:\n```haskell\nderivings [''Eq, ''Ord, ''Generic] ''Company\n======>\nderiving
  instance Eq Gender\nderiving instance Eq (Person a_acKV)\nderiving instance Eq a_acKU
  => Eq (Department a_acKU)\nderiving instance Eq a_acKT => Eq (Company a_acKT)\nderiving
  instance Ord Gender\nderiving instance Ord (Person a_acKV)\nderiving instance Ord
  a_acKU => Ord (Department a_acKU)\nderiving instance Ord a_acKT => Ord (Company
  a_acKT)\nderiving instance Generic Gender\nderiving instance Generic (Person a_acKV)\nderiving
  instance Generic (Department a_acKU)\nderiving instance Generic (Company a_acKT)\n```\n##
  2. Empty Instances generation\n\nFor empty class instances deriving, `instance_`,
  `instances`, `instancess` are provided. We can use it in this way.\n\n```haskell\ninstances
  [''Binary] ''Company\n======>\ninstance Binary Gender\ninstance Binary (Person a_af50)\ninstance
  Binary a_af4Z => Binary (Department a_af4Z)\ninstance Binary a_af4Y => Binary (Company
  a_af4Y)\n```\n## 3. Usage with Template Haskell\nFor generating instances with a
  template Haskell function, `derivingTH`, `derivingTHs` and `derivingTHss` can be
  used:\n```haskell\nderivingTHs\n    [(''ToJSON, deriveToJSON defaultOptions),\n
  \   (''FromJSON, deriveFromJSON defaultOptions)]\n    ''Company\n======>\ninstance
  ToJSON Gender where\n    toJSON\n    = \\ value_amQG\n        -> case value_amQG
  of {\n                Male -> String (text-1.2.2.2:Data.Text.pack \"Male\")\n                Female
  -> String (text-1.2.2.2:Data.Text.pack \"Female\") }\n    toEncoding\n    = \\ value_amQH\n
  \       -> case value_amQH of {\n                Male\n                -> Data.Aeson.Encoding.Internal.text\n
  \                   (text-1.2.2.2:Data.Text.pack \"Male\")\n                Female\n
  \               -> Data.Aeson.Encoding.Internal.text\n                    (text-1.2.2.2:Data.Text.pack
  \"Female\") }\ninstance ToJSON a_amqg => ToJSON (Person a_amqg) where\n    toJSON\n
  \   = \\ value_amQy\n    ...\n    ...\n```\nYou can use this this function with
  [`derive`](http://hackage.haskell.org/package/derive) package. However, it seems
  that this package is broken with GHC >= 802.\n\n## 4. Deriving the superclasses\n`Data.Derive.Superclass`
  provides `deriving_superclasses`, `strategy_deriving_superclasses` and newtype_deriving_superclasses,
  gnds can be used to derive class instance and its superclass instances. \n\nFor
  example:\n```haskell\ndata A = A\nderiving_superclasses ''Ord ''A\n```\nYou wil
  get:\n```haskell\nderiving_superclasses ''Ord ''A\n======>\nderiving instance Ord
  A\nderiving instance Eq A\n```\n\nMutual recursive type decalrations need to derive
  superclass together as the following:\n```haskell\nfmap concat (sequence [(deriving_superclasses
  ''Ord ''T2), (deriving_superclasses ''Ord ''T3)])\n```\nIn the code above, T2 and
  T3 are mutual recursive data types.\n\n## 5. Deriving with strategies in GHC 8.2\nIf
  you want to specify the strategy for deriving mechanism then `strategy_deriving`,
  `strategy_derivings` and `strategy_derivingss` can be used.\nThe 3 strategies for
  deriving `StockStrategy`,`AnyclassStrategy`,`NewtypeStrategy` are exposed when you
  import `TopDown`. They can be written as `stock`, `anyclass` as the default grammar.
  For `newtype`, you can write it as `newtype_` since there is a clison with `newtype`
  for data declaration. Please see [DerivingStrategies](https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/DerivingStrategies)\n\n##
  Note\n### Derive with breaks\nThe deriving process might be interrupted by a given
  list of type names. The generation process will stop on those give names. Please
  see the test case.\n\n### **NOTE**:  About deriving instances of Typeable\nThere
  is a bug with `isInstance` function when working with Typeable class. See [`ticket
  #11251`](https://ghc.haskell.org/trac/ghc/ticket/11251). So there might be problems
  if you really want to derive `Typeable` class. However, this bug should not affect
  you too much here since GHC now has `AutoDeriveTypeable` extension, which means
  you should never derive `Typeable` manually.\n\n### **NOTE**: You cannot derive
  a type synonym.\n`derive-topdown` will not work with `-XTypeSynonymInstances` language
  extension. The top node in the data declaration tree has to be a data or newtype.\n\nMore
  discussion about `derive-topdown`, please see [`ticket #10607`](https://ghc.haskell.org/trac/ghc/ticket/10607)\n"
description-type: markdown
hash: 04c7327d06318a88ec676aa2fbac22de5393d442910d3c2f00e02d8d0010263e
homepage: https://github.com/HaskellZhangSong/derive-topdown#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: Song Zhang <Haskell.Zhang.Song@hotmail.com>
synopsis: Derive type class instances
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.8 && <5'
  binary: '>=0'
  containers: '>=0'
  derive-topdown: '>=0'
  haskell-src: '>=0'
  mtl: '>=0'
  primitive: '>=0'
  syb: '>=0'
  template-haskell: '>=0'
  th-abstraction: '>=0'
  th-expand-syns: '>=0'
  transformers: '>=0'
