homepage: https://github.com/HaskellZhangSong/derive-topdown
changelog-type: markdown
hash: bef4e28e3accde4aabe4e3b9e96e04622b0bb08af41eb6fb8b151c0f38014cf5
test-bench-deps: {}
maintainer: songzh <Haskell.Zhang.Song@hotmail.com>
synopsis: Help Haskellers derive class instances for composited data types.
changelog: "derive-topdown\r\n======\r\nderive-topdown-0.0.3.0\r\n--------------\r\n-
  `0.0.3.0`\r\n\t* Adapt to GHC 9.0.\r\n\r\nderive-topdown-0.0.2.1\r\n--------------\r\n-
  `0.0.2.1`\r\n\t* Remove unnecessary dependencies for testing.\r\n\r\nderive-topdown-0.0.2.0\r\n--------------\r\n-
  `0.0.2.0`\r\n\t* Add deriving superclass functions. When you want to derive a class
  instance, not necessary to derive all its superclasses.\r\n\r\nderive-topdown-0.0.1.0\r\n--------------\r\n-
  `0.0.1.0`\r\n    * Imporve error message.Will print the types list when type is
  not data or newtype defined.\r\n\r\nderive-topdown-0.0.0.9\r\n--------------\r\n-
  `0.0.0.9` \r\n    * Changed API for `strategy_derivng(s)`. Deriving strategy should
  be specified first as the default grammar of `deriving`.\r\n    * Provided `deriving_with_breaks`
  function so that one can specify the types that prevent further standalone deriving
  declarations from generating process. This is mainly for `Generic` class. See the
  test of deriving `Generic` for `HsModule`.\r\n    * Fixed Strategy deriving problem.
  Deriving with NewtypeStrategy on data type defined by `data` keyword will be ignored.\r\n
  \   * Fixed problem with class context generation for phantom types. Phantom types
  will not be in the context now.\r\n    * Fixed `ArrowT` problem. It should be not
  a type variable and should appear in the context.\r\n    * Handled data constructor
  which contains explicit `forall`.\r\n    * Added test. It generates class instances
  for data types in `template-haskell` and `haskell-src`.\r\n\r\nderive-topdown-0.0.0.7\r\n--------------\r\n-
  `0.0.0.7` is a more carefully implemented version of derive-topdown.\r\nAll APIs
  are **totally** changed compared with 0.0.0.2. Originally it did not work with types
  that contain type synonyms and polymorphic types. It can work for most common cases
  in this version now.\r\n\r\nderive-topdown-0.0.0.2\r\n--------------\r\n- Fixed
  some cabal file and API problems.\r\n\r\nderive-topdown-0.0.0.1\r\n--------------\r\n-
  This is only an experimental implementation for deriving class instances from top
  to bottom.\r\nThere is a lot of deficiencies.\r\n"
basic-deps:
  base: '>=4.8 && <5.0'
  syb: '>=0.4'
  th-expand-syns: '>=0.4.3'
  mtl: '>=2.1.0'
  transformers: '>=0.4.2'
  template-haskell: '>=2.10'
  primitive: '>=0.6.2'
all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.7
- 0.0.0.9
- 0.0.1.0
- 0.0.2.0
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
author: songzh <Haskell.Zhang.Song@hotmail.com>
latest: 0.0.3.0
description-type: markdown
description: "# derive-topdown\r\n[![Hackage version](https://img.shields.io/hackage/v/derive-topdown.svg?label=Hackage)](https://hackage.haskell.org/package/derive-topdown)
  [![Stackage version](https://www.stackage.org/package/derive-topdown/badge/lts?label=Stackage)](https://www.stackage.org/package/derive-topdown)\r\n\r\nThis
  is a Haskell project which will derive type class instances from top for a composite
  data type\r\n\r\n\r\n### 1. Standalone deriving\r\nThere are functions named `deriving_`,
  `derivings`, `derivingss`. Please see the API for their types.\r\n\r\n\t{-# LANGUAGE
  StandaloneDeriving,\r\n\t\tConstraintKinds,\r\n\t\tUndecidableInstances,\r\n\t\tGADTs,\r\n\t\tTemplateHaskell,\r\n\t\tDeriveGeneric
  #-}\r\n\t{-# OPTIONS_GHC -ddump-splices #-}\r\n\t\r\n\timport Data.Derive.TopDown\r\n\timport
  GHC.Generics\r\n\timport Data.Binary\r\n\timoprt Data.Aeson\r\n\timport Data.Aeson.TH\r\n\r\n\tdata
  Gender = Male | Female\r\n\ttype Age = Int\r\n\tdata Person a = P {name :: String
  , age :: Int, gender :: Gender}\r\n\tdata Department a = D {dname :: String , \r\n\t\t\t\t\t\t
  \  head :: Person a, \r\n\t\t\t\t\t\t   staff :: [Person a]}\r\n\tdata Company a
  = C {cname :: String, \r\n\t                    departments :: [Department a]}\r\n\t\r\n\tderivings
  [''Eq, ''Ord, ''Generic] ''Company\r\n\r\nYou will get:\r\n\r\n\t\tderivings [''Eq,
  ''Ord, ''Generic] ''Company\r\n\t  ======>\r\n\t    deriving instance Eq Gender\r\n\t
  \   deriving instance Eq (Person a_acKV)\r\n\t    deriving instance Eq a_acKU =>
  Eq (Department a_acKU)\r\n\t    deriving instance Eq a_acKT => Eq (Company a_acKT)\r\n\t
  \   deriving instance Ord Gender\r\n\t    deriving instance Ord (Person a_acKV)\r\n\t
  \   deriving instance Ord a_acKU => Ord (Department a_acKU)\r\n\t    deriving instance
  Ord a_acKT => Ord (Company a_acKT)\r\n\t    deriving instance Generic Gender\r\n\t
  \   deriving instance Generic (Person a_acKV)\r\n\t    deriving instance Generic
  (Department a_acKU)\r\n\t    deriving instance Generic (Company a_acKT)\r\n\r\n###
  2. Empty Instances generation\r\n\r\nFor empty class instances deriving, `instance_`,
  `instances`, `instancess` are provided. We can use it in this way.\r\n\r\n\t    instances
  [''Binary] ''Company\r\n\t  ======>\r\n\t    instance Binary Gender\r\n\t    instance
  Binary (Person a_af50)\r\n\t    instance Binary a_af4Z => Binary (Department a_af4Z)\r\n\t
  \   instance Binary a_af4Y => Binary (Company a_af4Y)\r\n\r\n### 3. Usage with Template
  Haskell\r\nFor generating instances with a template Haskell function, `derivingTH`,
  `derivingTHs` and `derivingTHss` can be used:\r\n\t\r\n\t   derivingTHs\r\n\t      [(''ToJSON,
  deriveToJSON defaultOptions),\r\n\t       (''FromJSON, deriveFromJSON defaultOptions)]\r\n\t
  \     ''Company\r\n\t  ======>\r\n\t    instance ToJSON Gender where\r\n\t      toJSON\r\n\t
  \       = \\ value_amQG\r\n\t            -> case value_amQG of {\r\n\t                 Male
  -> String (text-1.2.2.2:Data.Text.pack \"Male\")\r\n\t                 Female ->
  String (text-1.2.2.2:Data.Text.pack \"Female\") }\r\n\t      toEncoding\r\n\t        =
  \\ value_amQH\r\n\t            -> case value_amQH of {\r\n\t                 Male\r\n\t
  \                  -> Data.Aeson.Encoding.Internal.text\r\n\t                        (text-1.2.2.2:Data.Text.pack
  \"Male\")\r\n\t                 Female\r\n\t                   -> Data.Aeson.Encoding.Internal.text\r\n\t
  \                       (text-1.2.2.2:Data.Text.pack \"Female\") }\r\n\t    instance
  ToJSON a_amqg => ToJSON (Person a_amqg) where\r\n\t      toJSON\r\n\t        = \\
  value_amQy\r\n\t        ...\r\n\t        ...\r\nYou can use this this function with
  [`derive`](http://hackage.haskell.org/package/derive) package. However, it seems
  that this package is broken with GHC >= 802.\r\n\r\n### 4. Deriving the superclasses\r\n`Data.Derive.Superclass`
  provides `deriving_superclasses`, `strategy_deriving_superclasses` and newtype_deriving_superclasses,
  gnds can be used to derive class instance and its superclass instances. \r\n\r\nFor
  example:\r\n\r\n\t    data A = A\r\n\t    deriving_superclasses ''Ord ''A\r\n\r\nYou
  wil get:\r\n\r\n\t    deriving_superclasses ''Ord ''A\r\n\t  ======>\r\n\t    deriving
  instance Ord A\r\n\t    deriving instance Eq A\r\n\r\n\r\n### 5. Deriving with strategies
  in GHC 8.2\r\nIf you want to specify the strategy for deriving mechanism then `strategy_deriving`,
  `strategy_derivings` and `strategy_derivingss` can be used.\r\nThe 3 strategies
  for deriving `StockStrategy`,`AnyclassStrategy`,`NewtypeStrategy` are exposed when
  you import `TopDown`. They can be written as `stock`, `anyclass` as the default
  grammar. For `newtype`, you can write it as `newtype_` since there is a clison with
  `newtype` for data declaration. Please see [DerivingStrategies](https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/DerivingStrategies)\r\n\r\n\r\n####
  **NOTE**:  About deriving instances of Typeable\r\nThere is a bug with `isInstance`
  function when working with Typeable class. See [`ticket #11251`](https://ghc.haskell.org/trac/ghc/ticket/11251).
  So there might be problems if you really want to derive `Typeable` class. However,
  this bug should not affect you too much here since GHC now has `AutoDeriveTypeable`
  extension, which means you should never derive `Typeable` manually.\r\n\r\n####
  **NOTE**: You cannot derive a type synonym.\r\n`derive-topdown` will not work with
  `-XTypeSynonymInstances` language extension. The top node in the data declaration
  tree has to be a data or newtype.\r\n\r\nMore discussion about `derive-topdown`,
  please see [`ticket #10607`](https://ghc.haskell.org/trac/ghc/ticket/10607)"
license-name: BSD-3-Clause
