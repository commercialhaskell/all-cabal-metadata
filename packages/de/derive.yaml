all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 2.0.0
- 2.0.1
- 2.1.0
- 2.2.0
- 2.3.0
- 2.3.0.1
- 2.3.0.2
- '2.4'
- 2.4.1
- 2.4.2
- 2.5.1
- 2.5.2
- 2.5.3
- 2.5.4
- 2.5.5
- 2.5.6
- 2.5.7
- 2.5.8
- 2.5.9
- 2.5.10
- 2.5.11
- 2.5.12
- 2.5.13
- 2.5.14
- 2.5.15
- 2.5.16
- 2.5.17
- 2.5.18
- 2.5.19
- 2.5.20
- 2.5.21
- 2.5.22
- 2.5.23
- 2.5.24
- 2.5.25
- 2.5.26
- '2.6'
- 2.6.1
- 2.6.2
- 2.6.3
- 2.6.4
- 2.6.5
author: Neil Mitchell <ndmitchell@gmail.com> and others
basic-deps:
  base: '>=4 && <5'
  bytestring: '>=0'
  containers: '>=0'
  derive: '>=0'
  directory: '>=0'
  filepath: '>=0'
  haskell-src-exts: '>=1.20 && <1.21'
  pretty: '>=0'
  process: '>=0'
  syb: '>=0'
  template-haskell: '>=0'
  transformers: '>=0.2'
  uniplate: '>=1.5 && <1.7'
changelog: |
  2.6.4
      Rewrite for haskell-src-exts == 1.20.*
      #27, disable a few more extensions by default (sync with the HLint list)
  2.6.3
      #24, support GHC 8.2
  2.6.2
      #19, more upgrade bug fixes
  2.6.1
      #19, allow haskell-src-exts-1.19
  2.6
      Remove lots of derivations that didn't seem useful (Eq, Show etc)
      Change to use annotated Haskell syntax trees
      Require haskell-src-exts-1.18
  2.5.26
      #17, fix incomplete pattern matches for certain types of data
  2.5.25
      #14, further GHC 8.0.1 updates
  2.5.24
      #14, update to GHC 8.0.1
      #15, move all the source files under src to speed up building
      Delete the FixedPpr module, was unused
  2.5.23
      Require haskell-src-exts-1.17
  2.5.22
      #7, #8 convert more types from TemplateHaskell
  2.5.21
      Fix the homepage link
  2.5.20
      #5, fix regression with higher-kinded constructors becoming context
  2.5.19
      Support GHC 7.10
  2.5.18
      #4, fix the read instance for nullary constructors
  2.5.17
      Upgrade to haskell-src-exts-1.16
      Remove GHC 7.2 support
  2.5.16
      Allow transformers-0.4 and above
  2.5.15
      Allow haskell-src-exts-1.15.*
  2.5.14
      #3, support GHC 7.9
  2.5.13
      #622, turn on more Haskell extensions
  2.5.12
      Upgrade to haskell-src-exts-1.14.*
  2.5.11
      Support GHC 7.6
  2.5.10
      Add derivation for Lens
      Modify the Typeable derivation to use mkTyCon3
  2.5.9
      Support the Template Haskell Unpacked constructor
  2.5.8
      Allow haskell-src-exts-1.13.*
  2.5.7
      Allow haskell-src-exts-1.12.*
  2.5.6
      Update the copyright year
      Allow transformers-0.3.*
  2.5.5
      #513, allow derive to be run as a preprocessor
      Improve the documentation for UniplateDirect
  2.5.4
      #394, allow tuple names in more places
      Fix error when deriving Binary on "data A = B"
  2.5.3
      GHC 7.2 compatibility
  2.5.2
      Relax the dependency on haskell-src-exts to < 1.12
  2.5.1
      Improve documentation for deriveMain
  2.5
      #257, add Data.DeriveMain.deriveMain, to allow user derivations
  2.4.2
      Relax the dependency on haskell-src-exts to < 1.11
      Start of changelog
changelog-type: text
description: "# Derive [![Hackage version](https://img.shields.io/hackage/v/derive.svg?label=Hackage)](https://hackage.haskell.org/package/derive)
  [![Build Status](https://img.shields.io/travis/ndmitchell/derive.svg)](https://travis-ci.org/ndmitchell/derive)\n\n**Warning:
  This package has no official maintainer anymore. Use at your own risk. You may wish
  to consider the built-in mechanism [`GHC.Generics`](https://hackage.haskell.org/package/base-4.11.1.0/docs/GHC-Generics.html)
  or libraries such as [`generic-deriving`](https://hackage.haskell.org/package/generic-deriving).**\n\nData.Derive
  is a library and a tool for deriving instances for Haskell programs. It is designed
  to work with custom derivations, SYB and Template Haskell mechanisms. The tool requires
  GHC, but the generated code is portable to all compilers. We see this tool as a
  competitor to <a href=\"http://repetae.net/computer/haskell/DrIFT/\">DrIFT</a>.\n\nThis
  document proceeds as follows:\n\n* Obtaining and Installing Data.Derive\n* Supported
  Derivations\n* Using the Derive Program\n* Using Template Haskell Derivations\n*
  Writing a New Derivation\n\n### Acknowledgements\n\nThanks to everyone who has submitted
  patches and given assistance, including: Twan van Laarhoven, Spencer Janssen, Andrea
  Vezzosi, Samuel Bronson, Joel Raymont, Benedikt Huber, Stefan O'Rear, Robin Green,
  Bertram Felgenhauer.\n\n\n## Obtaining and Installing Data.Derive\n\nInstallation
  follows the standard pattern of any Haskell library or program, type <tt>cabal update</tt>
  to update your local hackage database, then <tt>cabal install derive</tt> to install
  Derive.\n\n\n## Supported Derivations\n\nData.Derive is not limited to any prebuild
  set of derivations, see later for howto add your own. Out of the box, we provide
  instances for the following libraries.\n\n<!--\n-- GENERATED START\n-->\n\n* **[Arbitrary](http://hackage.haskell.org/packages/archive/QuickCheck/latest/doc/html/Test-QuickCheck.html#t%3AArbitrary)**
  - from the library [QuickCheck](http://hackage.haskell.org/package/QuickCheck)\n*
  **[ArbitraryOld](http://hackage.haskell.org/packages/archive/QuickCheck/1.2.0.0/doc/html/Test-QuickCheck.html#t%3AArbitraryOld)**
  - from the library [QuickCheck-1.2.0.0](http://hackage.haskell.org/package/QuickCheck-1.2.0.0)\n*
  **[Arities](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Class-Arities.html#t%3AArities)**
  - from the library [derive](http://hackage.haskell.org/package/derive)\n* **[Binary](http://hackage.haskell.org/packages/archive/binary/latest/doc/html/Data-Binary.html#t%3ABinary)**
  - from the library [binary](http://hackage.haskell.org/package/binary)\n* **[BinaryDefer](http://hackage.haskell.org/packages/archive/binarydefer/latest/doc/html/Data-Binary-Defer.html#t%3ABinaryDefer)**
  - from the library [binarydefer](http://hackage.haskell.org/package/binarydefer)\n*
  **[Bounded](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t%3ABounded)**
  - from the library [base](http://hackage.haskell.org/package/base)\n* **[DataAbstract](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Data.html#t%3ADataAbstract)**
  - from the library [base](http://hackage.haskell.org/package/base)\n* **[Default](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Class-Default.html#t%3ADefault)**
  - from the library [derive](http://hackage.haskell.org/package/derive)\n* **[EnumCyclic](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#t%3AEnum)**
  - from the library [base](http://hackage.haskell.org/package/base)\n* **[Fold](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Fold.html)**\n*
  **[From](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-From.html)**\n*
  **[Has](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Has.html)**\n*
  **[Is](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Is.html)**\n*
  **[JSON](http://hackage.haskell.org/packages/archive/json/latest/doc/html/Text-JSON.html#t%3AJSON)**
  - from the library [json](http://hackage.haskell.org/package/json)\n* **[LazySet](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-LazySet.html)**\n*
  **[Lens](http://hackage.haskell.org/packages/archive/data/lens/doc/html/Data-Lens-Common.html#t%3ALens)**
  - from the library [data-lens](http://hackage.haskell.org/package/data-lens)\n*
  **[Monoid](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Monoid.html#t%3AMonoid)**
  - from the library [base](http://hackage.haskell.org/package/base)\n* **[NFData](http://hackage.haskell.org/packages/archive/deepseq/latest/doc/html/Control-DeepSeq.html#t%3ANFData)**
  - from the library [deepseq](http://hackage.haskell.org/package/deepseq)\n* **[Ref](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Ref.html)**\n*
  **[Serial](http://hackage.haskell.org/packages/archive/smallcheck/latest/doc/html/Test-SmallCheck.html#t%3ASerial)**
  - from the library [smallcheck](http://hackage.haskell.org/package/smallcheck)\n*
  **[Serialize](http://hackage.haskell.org/packages/archive/cereal/latest/doc/html/Data-Serialize.html#t%3ASerialize)**
  - from the library [cereal](http://hackage.haskell.org/package/cereal)\n* **[Set](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Set.html)**\n*
  **[UniplateDirect](http://hackage.haskell.org/packages/archive/uniplate/latest/doc/html/Data-Generics-Uniplate-Direct.html#t%3AUniplateDirect)**
  - from the library [uniplate](http://hackage.haskell.org/package/uniplate)\n* **[UniplateTypeable](http://hackage.haskell.org/packages/archive/uniplate/latest/doc/html/Data-Generics-Uniplate-Typeable.html#t%3AUniplateTypeable)**
  - from the library [uniplate](http://hackage.haskell.org/package/uniplate)\n* **[Update](http://hackage.haskell.org/packages/archive/derive/latest/doc/html/Data-Derive-Update.html)**\n\n<!--\n--
  GENERATED STOP\n-->\n\n## Using the Derive program\n\nLet's imagine we've defined
  a data type:\n\n    data Color = RGB Int Int Int\n               | CMYK Int Int
  Int Int\n               deriving (Eq, Show)\n\nNow we wish to extend this to derive
  <tt>Binary</tt> and change to defining <tt>Eq</tt> using our library. To do this
  we simply add to the <tt>deriving</tt> clause.\n\n    data Color = RGB Int Int Int\n
  \              | CMYK Int Int Int Int\n               deriving (Show {-! Eq, Binary
  !-})\n\nOr alternatively write:\n\n    {-!\n    deriving instance Eq Color\n    deriving
  instance Binary Color\n    !-}\n\nNow running <tt>derive</tt> on the program containing
  this code will generate appropriate instances. How do you combine these instances
  back into the code? There are various mechanisms supported.\n\n### Appending to
  the module\n\nOne way is to append the text to the bottom of the module, this can
  be done by passing the <tt>--append</tt> flag. If this is done, Derive will generate
  the required instances and place them at the bottom of the file, along with a checksum.
  Do not modify these instances.\n\n### As a GHC preprocessor\n\nTo use Derive as
  a GHC preprocessor, add the following line at the top of the source file:\n\n    {-#
  OPTIONS_GHC -F -pgmFderive -optF-F #-}\n\nThis instructs GHC to apply a preprocessor
  (<tt>-F</tt>), and to use the preprocessor <tt>derive -F</tt>.\n\n### Using CPP\n\nOne
  way is to use CPP. Ensure your compiler is set up for compiling with the C Pre Processor.
  For example:\n\n    {-# LANGUAGE CPP #-}\n    {-# OPTIONS_DERIVE --output=file.h
  #-}\n\n    module ModuleName where\n    \n    #include \"file.h\"\n\n### Side-by-side
  Modules\n\nIf you had Colour.Type, and wished to place the Binary instance in Colour.Binary,
  this can be done with:\n\n    {-# OPTIONS_DERIVE --output=Binary.hs --module=Colour.Binary
  --import #-}\n\nHere you ask for the output to go to a particular file, give a specific
  module name and import this module. This will only work if the data structure is
  exported non-abstractly.\n\n## Using Template Haskell Derivations</h2>\n\nOne of
  Derive's advantages over DrIFT is support for <a href=\"http://www.haskell.org/th/\">Template
  Haskell</a> (abbreviated TH).  Derive can be invoked automatically during the compilation
  process, and transparently supports deriving across module boundaries. The main
  disadvantage of TH-based deriving is that it is only portable to compilers that
  support TH; currently that is GHC only.\n\nTo use the TH deriving system, with the
  same example as before:\n\n    {-# LANGUAGE TemplateHaskell #-}\n    import Data.DeriveTH\n
  \   import Data.Binary\n    \n    data Color = RGB Int Int Int\n               |
  CMYK Int Int Int Int\n               deriving (Show)\n    \n    $( derive makeEq
  ''Color )\n    $( derive makeBinary ''Color )\n\nWe need to tell the compiler to
  insert the instance using the TH <em>splice</em> construct, <tt>$( ... )</tt> (the
  spaces are optional).  The splice causes the compiler to run the function <tt>derive</tt>
  (exported from <tt>Data.DeriveTH</tt>), passing arguments <tt>makeFooBar</tt> and
  <tt>''Color</tt>.  The second argument deserves more explanation; it is a quoted
  symbol, somewhat like a quoted symbol in Lisp and with deliberately similar syntax.
  \ (Two apostrophes are used to specify that this name is to be resolved as a type
  constructor; just <tt>'Color</tt> would look for a <i>data</i> constructor named
  <tt>Color</tt>.)\n\n## Writing a New Derivation\n\nThere are two methods for writing
  a new derivation, guessing or coding. The guessing method is substantially easier
  if it will work for you, but is limited to derivations with the following properties:\n\n*
  Inductive - each derivation must be similar to the previous one. <tt>Binary</tt>
  does not have this property as a 1 item derivation does not have a tag, but a 2
  item derivation does.\n* Not inductive on the type - it must be an instance for
  the constructors, not for the type. <tt>Typeable</tt> violates this property by
  inducting on the free variables in the data type.\n* Not type based - the derivation
  must not change based on the types of the fields. <tt>Play</tt> and <tt>Functor</tt>
  both behave differently given differently typed fields.\n* Not record based - the
  derivation must not change on record fields. <tt>Show</tt> outputs the fields, so
  this is not allowed.\n\nIf however your instance does meet these properties, you
  can use derivation by guess. Many instances do meet these conditions, for examples
  see: <tt>Eq</tt>, <tt>Ord</tt>, <tt>Data</tt>, <tt>Serial</tt> etc. If however you
  need to code the derivation manually see examples such as <tt>Update</tt> and <tt>Functor</tt>.\n\n###
  Modifying Derive\n\nThe standard sequence for testing Derive is:\n\n    $ ghci Main.hs\n
  \   :main --generate\n    :reload\n    :main --test\n\nThe `--generate` option will
  automatically generate DSL's for derivations derived by example. The `--test` option
  runs all test comparisons and then loads the file with Template Haskell.\n\n###
  Coding a new derivation\n\nMy best suggestion, start with a similar instance, i.e.
  to make `Eq2` from `Eq` do:\n\n* Copy `Data/Derive/Eq.hs` to `Data/Derive/Eq2.hs`\n*
  Rename some of the bits in `Eq2.hs` from `Eq`\n* `ghci` -- load derive\n* `:main`
  --generate    -- this adds Eq2.hs to the .cabal/All.hs files etc\n* `:reload`             --
  reload with Eq2.hs\n\nNow fix up `Eq2.hs` appropriately.\n"
description-type: markdown
hash: 41480f98be28ca5a942f137f1ce17c2fc5e67040c434e8d3f4c45459b8bc6cbb
homepage: https://github.com/ndmitchell/derive#readme
latest: 2.6.5
license-name: BSD-3-Clause
maintainer: None
synopsis: A program and library to derive instances for data types
test-bench-deps: {}
