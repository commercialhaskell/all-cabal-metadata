homepage: ''
changelog-type: markdown
hash: abc80f155111de4656dce2cecc644332f6da2582ef7a8ac8f281fdb73a0e7f71
test-bench-deps:
  bytestring: -any
  base: -any
  deriving-aeson: -any
  aeson: -any
maintainer: fumiexcel@gmail.com
synopsis: Type driven generic aeson instance customisation
changelog: "# Revision history for deriving-aeson\r\n\r\n## 0.2.9\r\n\r\n* Fixed a
  bug in chaining `ConstructorTagModifier` & `FieldLabelModifier`\r\n\r\n## 0.2.8\r\n\r\n*
  Supported GHC 9.2\r\n* Supported aeson-2.0\r\n\r\n## 0.2.7\r\n\r\n* Added a `StringModifier`
  instance to a list of types\r\n* Added `Rename :: Symbol -> Symbol -> Type`\r\n\r\n##
  0.2.6\r\n\r\n* Added `StringModifier` instances to 3 and 4-tuples\r\n* Fixed the
  bug making `SumTwoElemArray` point `ObjectWithSingleField`\r\n\r\n## 0.2.5\r\n\r\n*
  Added a generic `CamelTo` constructor\r\n\r\n## 0.2.4\r\n\r\n* Added `RejectUnknownFields`\r\n\r\n##
  0.2.3\r\n\r\n* Fixed a bug in `SumTaggedObject`\r\n\r\n## 0.2.2\r\n\r\n* Added `UnwrapUnaryRecords`\r\n\r\n##
  0.2.1\r\n\r\n* Remove redundant type variables from `Sum*`\r\n\r\n## 0.2\r\n\r\n*
  Added `Sum*` for changing the encoding of variants\r\n* Added `Vanilla = CustomJSON
  '[]`\r\n* Renamed `ContructorTagModifier` to `ConstructorTagModifier`\r\n* Added
  `toEncoding` implementation to `CustomJSON`\r\n\r\n## 0.1.2\r\n\r\n* Reexported
  `CustomJSON(..)` from `Deriving.Aeson.Stock`\r\n\r\n## 0.1.1\r\n\r\n* Added `Deriving.Aeson.Stock`\r\n\r\n##
  0 -- 2020-02-26\r\n\r\n* First version. Released on an unsuspecting world.\r\n"
basic-deps:
  base: '>=4.12 && <5'
  aeson: '>=1.4.7.0 && <2.2'
all-versions:
- '0'
- 0.1.1
- 0.1.2
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.3
- 0.2.4
- 0.2.5
- 0.2.6
- 0.2.6.1
- 0.2.7
- 0.2.8
- 0.2.9
author: Fumiaki Kinoshita
latest: 0.2.9
description-type: markdown
description: "deriving-aeson\r\n====\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/deriving-aeson.svg)](https://hackage.haskell.org/package/deriving-aeson)\r\n![Haskell
  CI](https://github.com/fumieval/deriving-aeson/workflows/Haskell%20CI/badge.svg)\r\n[![Discord](https://img.shields.io/discord/664807830116892674?color=%237095ec&label=Discord&style=plastic)](https://discord.gg/DG93Tgs)\r\n\r\n![logo](https://github.com/fumieval/deriving-aeson/blob/master/logo/logo.png?raw=true)\r\n\r\nThis
  package provides a newtype wrapper where you can customise\r\n[aeson](https://hackage.haskell.org/package/aeson)'s
  generic methods using a\r\ntype-level interface, which synergises well with DerivingVia.\r\n\r\n```haskell\r\n{-#
  LANGUAGE DerivingVia, DataKinds, DeriveGeneric #-}\r\nimport Data.Aeson\r\nimport
  Deriving.Aeson\r\nimport qualified Data.ByteString.Lazy.Char8 as BL\r\n\r\ndata
  User = User\r\n  { userId :: Int\r\n  , userName :: String\r\n  , userAPIToken ::
  Maybe String\r\n  } deriving Generic\r\n  deriving (FromJSON, ToJSON)\r\n  via CustomJSON
  '[OmitNothingFields, FieldLabelModifier '[StripPrefix \"user\", CamelToSnake]] User\r\n\r\ntestData
  :: [User]\r\ntestData = [User 42 \"Alice\" Nothing, User 43 \"Bob\" (Just \"xyz\")]\r\n\r\nmain
  = BL.putStrLn $ encode testData\r\n-- [{\"name\":\"Alice\",\"id\":42},{\"api_token\":\"xyz\",\"name\":\"Bob\",\"id\":43}]\r\n```\r\n\r\n`Deriving.Aeson.Stock`
  contains some aliases for even less boilerplates.\r\n\r\n* `Prefixed str` = `CustomJSON
  '[FieldLabelModifier (StripPrefix str)]`\r\n* `PrefixedSnake str` = `CustomJSON
  '[FieldLabelModifier (StripPrefix str, CamelToSnake)]`\r\n* `Snake` = `CustomJSON
  '[FieldLabelModifier '[StripPrefix str, CamelToSnake]]`\r\n* `Vanilla` = `CustomJSON
  '[]`\r\n\r\nHow it works\r\n----\r\n\r\nThe wrapper type has a phantom type parameter
  `t`, a type-level builder of an [Option](http://hackage.haskell.org/package/aeson-1.4.6.0/docs/Data-Aeson.html#t:Options).\r\nType-level
  primitives are reduced to one `Option` by the `AesonOptions` class.\r\n\r\n```haskell\r\nnewtype
  CustomJSON t a = CustomJSON { unCustomJSON :: a }\r\n\r\nclass AesonOptions xs where\r\n
  \ aesonOptions :: Options\r\n\r\ninstance AesonOptions xs => AesonOptions (OmitNothingFields
  ': xs) where\r\n  aesonOptions = (aesonOptions @xs) { omitNothingFields = True }\r\n\r\n...\r\n```\r\n\r\nYou
  can use any (static) function for name modification by adding an instance of `StringModifier`.\r\n\r\n```haskell\r\ndata
  ToLower\r\ninstance StringModifier ToLower where\r\n  getStringModifier \"\" = \"\"\r\n
  \ getStringModifier (c : xs) = toLower c : xs\r\n```\r\n\r\nPrevious studies\r\n----\r\n\r\n*
  [Type-driven safe derivation of ToJSON and FromJSON, using DerivingVia in GHC 8.6
  and some type-level hacks](https://gist.github.com/konn/27c00f784dd883ec2b90eab8bc84a81d)\r\n*
  [Strip prefices from JSON representation](https://gist.github.com/fumieval/5c89205d418d5f9cafac801afbe94969)\r\n"
license-name: BSD-3-Clause
