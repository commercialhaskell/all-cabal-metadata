homepage: https://github.com/msakai/haskell-decision-diagrams#readme
changelog-type: markdown
hash: 9f82d39f7331f6836784fa89354986e436a4d62d810b8fb2b44dd10c6a0beb85
test-bench-deps:
  mwc-random: '>=0.13.6.0 && <0.16'
  tasty-th: '>=0.1.7 && <0.2'
  base: '>=4.11.0.0 && <5'
  doctest: -any
  containers: '>=0.5.11.0 && <0.7'
  quickcheck-instances: '>=0.3.19 && <0.4'
  tasty-quickcheck: ==0.10.*
  statistics: '>=0.14.0.2 && <0.17'
  tasty-hunit: '>=0.10.0.1 && <0.11'
  tasty: '>=1.1.0.4 && <1.5'
  deepseq: '>=1.4.3.0 && <1.5'
  decision-diagrams: -any
  QuickCheck: '>=2.11.3 && <2.15'
  vector: '>=0.12.0.2 && <0.14'
maintainer: masahiro.sakai@gmail.com
synopsis: Binary Decision Diagrams (BDD) and Zero-suppressed Binary Decision Diagrams
  (ZDD)
changelog: "# Changelog for `decision-diagrams` package\n\n## 0.2.0.0\n\n### Changes\n\n*
  Make `Leaf :: Bool -> BDD a` as a basic constructor instead of\n  `F`/`T` (in case
  of BDD) and `Empty`/`Base` (in case of ZDD), and\n  remove `F`/`T`.\n\n* `ZDD.toList`
  now returns sorted list\n\n* Change signature of `fold` and `fold'` of BDD\n  *
  Before: `b -> b -> (Int -> b -> b -> b) -> BDD a -> b`\n  * After: `(Int -> b ->
  b -> b) -> (Bool -> b) -> BDD a -> b`\n\n* Change signature of `fold` and `fold'`
  of ZDD (ditto)\n\n* Add `HasCallStack` to some functions that are expected to raise
  excpetions\n\n### Additions\n\n* Introduce signature functor type (`Sig`)\n\n* Add
  new operations:\n  * BDD:\n    * fixed point operators `lfp` and `gfp`\n    * satisfiability
  related functions: `anySat`, `allSat`, `anySatComplete`, `allSatComplete`, `countSat`,
  `uniformSatM`\n\t* pseudo-boolean constraint functions: `pbAtLeast`, `pbAtMost`,
  `pbExactly`, `pbExactlyIntegral`\n  * ZDD:\n    * `combinations`\n\t* pseudo-boolean
  constraint functions: `subsetsAtLeast`, `subsetsAtMost`, `subsetsExactly`, `subsetsExactlyIntegral`\n
  \ * Both BDD and ZDD\n    * `numNodes`\n    * `unfoldHashable` and `unfoldOrd`\n\n###
  Bug fixes\n\n* Fix laziness of `fold` and `fold'`\n\n### Other changes\n\n* Introduced
  `doctest`\n\n* Add other-extensions fields to `package.yaml`\n"
basic-deps:
  mwc-random: '>=0.13.6.0 && <0.16'
  reflection: '>=2.1.4 && <2.2'
  base: '>=4.11.0.0 && <5'
  unordered-containers: '>=0.2.9.0 && <0.3'
  containers: '>=0.5.11.0 && <0.7'
  hashtables: '>=1.2.3.1 && <1.4'
  intern: '>=0.9.1.2 && <1.0.0.0'
  hashable: '>=1.2.7.0 && <1.5'
  random: '>=1.1 && <1.3'
  primitive: '>=0.6.3.0 && <0.9'
  vector: '>=0.12.0.2 && <0.14'
all-versions:
- 0.1.0.0
- 0.2.0.0
author: Masahiro Sakai
latest: 0.2.0.0
description-type: markdown
description: |
  # decision-diagrams

  Hackage:
  [![Hackage](https://img.shields.io/hackage/v/decision-diagrams.svg)](https://hackage.haskell.org/package/decision-diagrams)
  [![Hackage Deps](https://img.shields.io/hackage-deps/v/decision-diagrams.svg)](https://packdeps.haskellers.com/feed?needle=decision-diagrams)
  [![Hackage CI](https://matrix.hackage.haskell.org/api/v2/packages/decision-diagrams/badge)](https://matrix.hackage.haskell.org/#/package/decision-diagrams)

  Dev:
  [![Build Status](https://github.com/msakai/haskell-decision-diagrams/actions/workflows/build.yaml/badge.svg)](https://github.com/msakai/haskell-decision-diagrams/actions/workflows/build.yaml)
  [![Coverage Status](https://coveralls.io/repos/msakai/haskell-decision-diagrams/badge.svg)](https://coveralls.io/r/msakai/haskell-decision-diagrams)

  [Binary Decision Diagrams (BDD)](https://en.wikipedia.org/wiki/Binary_decision_diagram) and [Zero-suppressed Binary Decision Diagrams (ZDD)](https://en.wikipedia.org/wiki/Zero-suppressed_decision_diagram) implementation in Haskell.

  BDD is a data stucture suitable for representing boolean functions (can be thought as a compressed representation of truth tables) and many operations on boolean functions can be performed efficiently.  ZDD is a variant of BDD suitable for representing (sparse) families of sets compactly.

  BDD/ZDD uses hash-consing for compact representation and efficient comparison, and we use [intern](https://hackage.haskell.org/package/intern) package for implementing hash-consing.

  ## Comparison with other BDD packages for Haskell

  |Package name|Repository|BDD|ZDD|Style|Implementation|Hash-consing / Fast equality test|
  |------------|----------|---|---|-----|--------------|---------------------------------|
  |[decision-diagrams](https://hackage.haskell.org/package/decision-diagrams) (this package)|[GitHub](https://github.com/msakai/haskell-decision-diagrams/)|✔️|✔️|pure|pure Haskell|✔️|
  |[zsdd](https://hackage.haskell.org/package/zsdd)|[GitHub](https://github.com/eddiejones2108/decision-diagrams) (deleted?)|✔️|✔️|monadic|pure Haskell|✔️|
  |[obdd](https://hackage.haskell.org/package/obdd)|[GitHub](https://github.com/jwaldmann/haskell-obdd)|✔️|-|pure|pure Haskell|-|
  |[HasCacBDD](https://hackage.haskell.org/package/HasCacBDD)|[GitHub](https://github.com/m4lvin/HasCacBDD)|✔️|-|pure|FFI|✔️|
  |[hBDD](https://hackage.haskell.org/package/hBDD) ([hBDD-CUDD](https://hackage.haskell.org/package/hBDD-CUDD), [hBDD-CMUBDD](https://hackage.haskell.org/package/hBDD-CMUBDD))|[GitHub](https://github.com/peteg/hBDD)|✔️|-|pure|FFI|✔️|
  |[cudd](https://hackage.haskell.org/package/cudd)|[GitHub](https://github.com/adamwalker/haskell_cudd)|✔️|-|both pure\*1 and monadic|FFI|✔️|

  \*1: `cudd`'s pure interface is different from normal Haskell data types (like ones in the [containers](https://hackage.haskell.org/package/containers) package, for example) because it requires `DDManager` argument.

  Please feel free to make a pull request for addition or correction to the comparision.
license-name: BSD-3-Clause
