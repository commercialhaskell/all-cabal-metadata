homepage: ''
changelog-type: markdown
hash: 9d065320f6151f93c40568e85826854fe3d5a23ea960610cbba5c73ff178d0c7
test-bench-deps:
  rank2classes: '>=1.4.1 && <1.5'
  barbies: ^>=2.0
  bytestring: -any
  sop-core: '>=0.5.0.0 && <0.6'
  base: '>=4.10.0.0 && <5'
  text: -any
  doctest: ^>=0.20
  containers: -any
  unliftio-core: '>=0.2.0.0'
  mtl: '>=2.2'
  tasty-hunit: '>=0.10.0.2'
  dep-t: -any
  transformers: '>=0.5.0.0'
  tasty: '>=1.3.1'
  aeson: '>=2.0'
  template-haskell: -any
maintainer: diaz_carrete@yahoo.com
synopsis: Dependency injection for records-of-functions.
changelog: "# Revision history for dep-t\n\n\n## 0.6.6\n\n* Added Dep.Phases. \n\n*
  Added Dep.Injects.\n\n## 0.6.5\n\n* Deprecated `Constructor`, `fixEnv` and the `Accum-`
  counterparts from `Dep.Env`.\n  \n  Created new versions in `Dep.Constructor`. The
  new versions are newtypes, not\n  type aliases.\n\n  Users trying to migrate should
  hide the old `Dep.Env` versions when importing\n  the module.\n\n  > import Dep.Env
  hiding (AccumConstructor, Constructor, accumConstructor, constructor, fixEnv, fixEnvAccum)\n\n*
  Deprecated the `Dep` type family from `Dep.Has`.\n\n* Shifted `DepT`-specific parts
  of the readme to `Control.Monad.Dep`.\n\n## 0.6.4\n\n* Added AccumConstructor, a
  generalization of Constructor that threads a\n  monoidal summary along with the
  environment record.\n\n* Now Dep.Env.Phased.traverseH and related functions provide
  a 'Typeable'\n  constraint on the polymorphic field variable in the function argument.\n\n
  \ This *should* be backwards compatible because, with the 'Typeable' constraint,\n
  \ the HOF is providing *more* info to the caller of 'traverseH' to work with.\n\n
  \ However it *does* cause a little breakage, because now you can't use FunctorT,\n
  \ TraversableT and ApplicativeT from the \"barbies\" library to implement Phased.\n
  \ But most of the time you would use Phased's own generic deriving anyway.\n\n##
  0.6.3\n\n* Now the Bare typeclass doesn't recurse inside Identity or Const.\n\n
  \ Strictly speaking, this is a breaking change, but the cases in which it breaks\n
  \ are very unlikely in practice: when using Identity or Const in the *middle* of\n
  \ a sequence of phases. Typically, these two applicatives will be used as the\n
  \ colophon of the sequence of phases.\n  \n  The motivation for the change is that
  letting Bare \"peek\" inside Identity and\n  Const made it difficult to write fromBare-using
  functions polymorphic on the\n  returned component. Bare got stuck on the component
  type variable and the\n  functions did not compile. This led to unnecessary code
  duplication. Stopping\n  at Identity means Bare never touches the type variable
  and doesn't get stuck.\n\n## 0.6.2\n\n* Moved `fromBare` and `toBare` from dep-t-dynamic.\n\n*
  Doc fix by @eyeinsky (PR #20)\n\n## 0.6.1.0\n\n* Re-export `Data.Functor.Constant`
  from `Control.Monad.Dep`. https://github.com/danidiaz/dep-t/issues/18\n\n## 0.6.0.0\n\n*
  Added module `Dep.Tagged`.\n\n* Changed the `Constructor` type synonym. \n\n  Now
  it takes a fully constructed environment type. \n\n  This is a backwards-incompatible
  change. Type signatures might need to be modified, not so much term level code.\n\n
  \ https://github.com/danidiaz/dep-t/issues/17\n\n* Removed deprecated modules.\n\n##
  0.5.1.0\n\n* `Control.Monad.Dep.Has` and `Control.Monad.Dep.Env` renamed as `Dep.Has`
  and `Dep.Env`.\n\n  The old modules still remain, but deprecated.\n\n## 0.5.0.0\n\n*
  `Phased` now has `Typeable` constraints. Should be a mostly backwards compatible\n
  \ change, as `Typeable` instances are automagically generated for most types.\n\n
  \ Motivated by https://github.com/danidiaz/dep-t-dynamic/issues/1\n\n## 0.4.6.0\n\n*
  added new module Control.Monad.Dep.Env with helpers for defining environments of
  records.\n\n## 0.4.5.0\n\n* added \"asCall\" to Control.Monad.Dep.Has\n\n## 0.4.4.0\n\n*
  added Control.Monad.Dep.Has, a generic \"Has\" typeclass which favors a style in
  which\n  the components come wrapped in records or newtypes.\n\n* added \"useEnv\"
  to Control.Monad.Dep.Class.\n\n## 0.4.0.0\n\nActually no breaking changes here,
  but a change in the recommended structure of\nthe HasX helper classes, and in how
  to write general code against those\ntypeclasses.\n\n* added Control.Monad.Dep.Class\n\n##
  0.1.3.0\n\n* re-exported Control.Monad.Trans\n\n## 0.1.2.0\n\n* re-exported Control.Monad.Reader.Class\n\n##
  0.1.1.0\n\n* Added NilEnv.\n\n## 0.1.0.2 \n\n* Minor documentation changes.\n\n##
  0.1.0.1 \n\n* Minor documentation changes.\n\n## 0.1.0.0 -- YYYY-mm-dd\n\n* First
  version. Released on an unsuspecting world.\n"
basic-deps:
  base: '>=4.10.0.0 && <5'
  unliftio-core: '>=0.2.0.0'
  mtl: '>=2.2'
  transformers: '>=0.5.0.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.4.0
- 0.4.5.0
- 0.4.6.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.3.0
- 0.6.4.0
- 0.6.5.0
- 0.6.6.0
author: Daniel Diaz
latest: 0.6.6.0
description-type: markdown
description: "# dep-t\n\nThis package provides various helpers for the \"record-of-functions\"
  style of\nstructuring Haskell applications. \n\nA record that groups related functions
  is considered a component. Hypothetical example:\n\n```\ndata Repository m = Repository\n
  \ { findById :: ResourceId -> m Resource,\n    save :: Resource -> m ()\n  } \n```\n\nThe
  record type is the component's \"interface\". A component's \"implementation\" is\ndefined
  by a constructor function that returns a value of the record type.\n\nWhen starting
  up, applications build a dependency injection environment\nwhich contains all the
  required components. And components read their *own* dependencies\nfrom the DI environment.
  The DI environment is akin to an\n[`ApplicationContext`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html)\nin
  object-oriented frameworks like [Java\nSpring](https://docs.spring.io/spring-framework/docs/current/reference/html/).\n\nIf
  components knew about the *concrete* DI environment, that would increase\ncoupling.
  Everything would depend on everything else. To avoid that, we resort\nto `Has`-style
  typeclasses so that each constructor function knows only about the\nparts of the
  environment that it needs, and nothing more. Those `Has`-style classes can\nbe tailor-made,
  but this package also provides a generic one. \n\nHypothetical example of constructor
  function:\n\n```\nmakeRepository :: (Has Logger m deps, Has SomeOtherDep m deps)
  => deps -> Repository m\n```\n\n*Very* loosely speaking, `Has`-style constraints
  correspond to [injected\nconstructor arguments](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-constructor-injection)
  in object-oriented DI frameworks.\n\n## Module structure\n\n```mermaid\n  graph
  TD;\n      Dep.Env-->Dep.Has;\n      Dep.Constructor-->Dep.Env;\n      Dep.Tagged;\n
  \     Control.Monad.Dep.Class-->Control.Monad.Reader;\n      Control.Monad.Dep-->Control.Monad.Reader;\n
  \     Control.Monad.Dep-->Control.Monad.Dep.Class;\n```\n\n- __Dep.Has__ provides
  a generic `Has` typeclass for locating dependencies in an\nenvironment. Usually,
  component implementations import this module.\n- __Dep.Env__ complements __Dep.Has__
  with helpers for building dependency injection environments. Usually, only the [composition
  root](https://stackoverflow.com/questions/6277771/what-is-a-composition-root-in-the-context-of-dependency-injection)
  of the application imports this module.\n- __Dep.Tagged__ is a helper for disambiguating
  dependencies in __Dep.Env__ environments.\n- __Dep.Constructor__ enables fixpoint-based
  dependency injection in __Dep.Env__ environments.\n- __Control.Monad.Dep__ provides
  the `DepT` monad transformer, a variant of `ReaderT`. You either want to use this
  or __Dep.Constructor__ in your composition root, but not both.\n- __Control.Monad.Dep.Class__
  is an extension of `MonadReader`, useful to program against both `ReaderT` and `DepT`.\n\n##
  Links\n\n- This library was extracted from my answer to [this Stack Overflow\n  question](https://stackoverflow.com/a/61782258/1364288).\n\n-
  The implementation of `mapDepT` was teased out in [this other SO question](https://stackoverflow.com/questions/65710657/writing-a-zooming-function-for-a-readert-like-monad-transformer).\n\n-
  An [SO\n  answer](https://stackoverflow.com/questions/57703898/how-to-call-impure-functions-from-pure-ones/57714058#57714058)\n
  \ about records-of-functions and the \"veil of polymorphism\".\n\n- The answers
  to [this SO\n  question](https://stackoverflow.com/questions/61642492/simplifying-the-invocation-of-functions-stored-inside-an-readert-environment)\n
  \ gave me the idea for how to \"instrument\" monadic functions (although the\n  original
  motive of the question was different).\n\n- I'm unsure of the relationship between
  `DepT` and the technique described in\n  [Adventures assembling records of\n  capabilities](https://discourse.haskell.org/t/adventures-assembling-records-of-capabilities/623)\n
  \ which relies on having \"open\" and \"closed\" versions of the environment\n  record,
  and getting the latter from the former by means of knot-tying. \n\n  It seems that,
  with `DepT`, functions in the environment obtain their\n  dependencies anew every
  time they are invoked. If we change a function in the\n  environment record, all
  other functions which depend on it will be affected\n  in subsequent invocations.
  I don't think this happens with \"Adventures...\" at\n  least when changing a \"closed\",
  already assembled record.\n\n  With `DepT` a function might use `local` if it knows
  enough about the\n  environment. That doesn't seem very useful for program logic;
  if fact it\n  sounds like a recipe for confusion. But it enables [complex\n  scenarios](https://www.baeldung.com/spring-abstract-routing-data-source)
  for\n  which the dependency graph needs to change in the middle of a request.\n\n
  \ All in all, perhaps `DepT` will be overkill in a lot of cases, offering\n  unneeded
  flexibility. Perhaps using `fixEnv` from `Dep.Env` will end up being\n  simpler.\n\n
  \ Unlike in \"Adventures...\" the `fixEnv` method doesn't use an extensible\n  record
  for the environment but, to keep things simple, a suitably\n  parameterized conventional
  one.\n\n- Another exploration of dependency injection with `ReaderT`:\n  [ReaderT-OpenProduct-Environment](https://github.com/keksnicoh/ReaderT-OpenProduct-Environment).\n\n-
  [The ReaderT design pattern](https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/).\n\n
  \ > Your application code will, in general, live in ReaderT Env IO. Define it as
  type App = ReaderT Env IO if you wish, or use a newtype wrapper instead of ReaderT
  directly.\n\n  > Optional: instead of directly using the App datatype, write your
  functions in terms of mtl-style typeclasses like MonadReader and MonadIO\n\n- [RIO](http://hackage.haskell.org/package/rio)
  is a featureful ReaderT-like /\n  prelude replacement library which favors monomorphic
  environments.\n\n- The [van Laarhoven Free Monad](http://r6.ca/blog/20140210T181244Z.html).\n\n
  \ > Swierstra notes that by summing together functors representing primitive I/O\n
  \ > actions and taking the free monad of that sum, we can produce values use\n  >
  multiple I/O feature sets. Values defined on a subset of features can be\n  > lifted
  into the free monad generated by the sum. The equivalent process can\n  > be performed
  with the van Laarhoven free monad by taking the product of\n  > records of the primitive
  operations. Values defined on a subset of features\n  > can be lifted by composing
  the van Laarhoven free monad with suitable\n  > projection functions that pick out
  the requisite primitive operations. \n\n  [Another post](https://www.tweag.io/blog/2019-03-20-capability-free-monad/van)
  about the van Laarhoven Free Monad. Is it related to the final encoding of Free
  monads described [here](https://blog.poisson.chat/posts/2021-10-20-initial-final-free-monad.html)?\n\n-
  [Interesting SO response](https://stackoverflow.com/a/634754/1364288) (from\n  2009)
  about the benefits of autowiring in Spring. The record-of-functions\n  approach
  in Haskell can't be said to provide true autowiring. You still need\n  to assemble
  the record manually, and field names in the record play the part\n  of Spring bean
  names. \n\n  > Right now I think the most important reason for using autowiring
  is that\n  > there's one less abstraction in your system to keep track of. The \"bean
  name\"\n  > is effectively gone. It turns out the bean name only exists because
  of xml. So\n  > a full layer of abstract indirections (where you would wire bean-name
  \"foo\"\n  > into bean \"bar\") is gone\n\n- [registry](http://hackage.haskell.org/package/registry)
  is a package that\n  implements an alternative approach to dependency injection,
  one different\n  from the `ReaderT`-based one. \n\n- [Printf(\"%s %s\", dependency,
  injection)](https://www.fredrikholmqvist.com/posts/print-dependency-injection/).
  Commented on [HN](https://news.ycombinator.com/item?id=28915630), [Lobsters](https://lobste.rs/s/4axrt6/printf_s_s_dependency_injection).\n\n-
  [Dependency Injection Principles, Practices, and\n  Patterns](https://www.goodreads.com/book/show/44416307-dependency-injection-principles-practices-and-patterns)\n
  \ This is a good book on the general princples of DI. \n\n- A [series of posts](https://twitter.com/ploeh/status/1485514524962738179)—by
  one of the authors of the DI book—about building a DI container.\n\n- [Lessons learned
  while writing a Haskell\n  application](https://gvolpe.com/blog/lessons-learned-while-writing-a-haskell-app/).\n
  \ This post recommends a \"polymorphic record of functions\" style, which fits\n
  \ the philosophy of this library.\n\n- One [big disadvantage](https://www.reddit.com/r/haskell/comments/r6foxv/opinions_on_reader_continuationbased_io/hmthsoy/)
  of the records-of-functions approach:\n\n  > representing effects as records of
  functions rather than typeclasses/fused effect invocations destroys inlining, so
  you’ll generate significantly worse Core if you use this on a hot path.\n\n- [ReaderT
  pattern is just extensible effects](https://www.reddit.com/r/haskell/comments/sjhatp/readert_pattern_is_just_extensible_effects/)\n\n"
license-name: BSD-3-Clause
