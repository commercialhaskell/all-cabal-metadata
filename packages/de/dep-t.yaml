homepage: ''
changelog-type: markdown
hash: 9a87fc3f828994e0931f0c7ce60d5448389ca98b564c497fe80ec72be7a6b2fe
test-bench-deps:
  rank2classes: '>=1.4.1 && <1.5'
  barbies: ^>=2.0
  bytestring: -any
  sop-core: '>=0.5.0.0 && <0.6'
  base: '>=4.10.0.0 && <5'
  text: -any
  doctest: ^>=0.20
  containers: -any
  unliftio-core: '>=0.2.0.0'
  mtl: '>=2.2'
  tasty-hunit: '>=0.10.0.2'
  dep-t: -any
  transformers: '>=0.5.0.0'
  tasty: '>=1.3.1'
  aeson: ^>=2.0
  template-haskell: -any
maintainer: diaz_carrete@yahoo.com
synopsis: Dependency injection for records-of-functions.
changelog: "# Revision history for dep-t\r\n\r\n## 0.6.2\r\n\r\n* Moved `fromBare`
  and `toBare` from dep-t-dynamic.\r\n\r\n* Doc fix by @eyeinsky (PR #20)\r\n\r\n##
  0.6.1.0\r\n\r\n* Re-export `Data.Functor.Constant` from `Control.Monad.Dep`. https://github.com/danidiaz/dep-t/issues/18\r\n\r\n##
  0.6.0.0\r\n\r\n* Added module `Dep.Tagged`.\r\n\r\n* Changed the `Constructor` type
  synonym. \r\n\r\n  Now it takes a fully constructed environment type. \r\n\r\n  This
  is a backwards-incompatible change. Type signatures might need to be modified, not
  so much term level code.\r\n\r\n  https://github.com/danidiaz/dep-t/issues/17\r\n\r\n*
  Removed deprecated modules.\r\n\r\n## 0.5.1.0\r\n\r\n* `Control.Monad.Dep.Has` and
  `Control.Monad.Dep.Env` renamed as `Dep.Has` and `Dep.Env`.\r\n\r\n  The old modules
  still remain, but deprecated.\r\n\r\n## 0.5.0.0\r\n\r\n* `Phased` now has `Typeable`
  constraints. Should be a mostly backwards compatible\r\n  change, as `Typeable`
  instances are automagically generated for most types.\r\n\r\n  Motivated by https://github.com/danidiaz/dep-t-dynamic/issues/1\r\n\r\n##
  0.4.6.0\r\n\r\n* added new module Control.Monad.Dep.Env with helpers for defining
  environments of records.\r\n\r\n## 0.4.5.0\r\n\r\n* added \"asCall\" to Control.Monad.Dep.Has\r\n\r\n##
  0.4.4.0\r\n\r\n* added Control.Monad.Dep.Has, a generic \"Has\" typeclass which
  favors a style in which\r\n  the components come wrapped in records or newtypes.\r\n\r\n*
  added \"useEnv\" to Control.Monad.Dep.Class.\r\n\r\n## 0.4.0.0\r\n\r\nActually no
  breaking changes here, but a change in the recommended structure of\r\nthe HasX
  helper classes, and in how to write general code against those\r\ntypeclasses.\r\n\r\n*
  added Control.Monad.Dep.Class\r\n\r\n## 0.1.3.0\r\n\r\n* re-exported Control.Monad.Trans\r\n\r\n##
  0.1.2.0\r\n\r\n* re-exported Control.Monad.Reader.Class\r\n\r\n## 0.1.1.0\r\n\r\n*
  Added NilEnv.\r\n\r\n## 0.1.0.2 \r\n\r\n* Minor documentation changes.\r\n\r\n##
  0.1.0.1 \r\n\r\n* Minor documentation changes.\r\n\r\n## 0.1.0.0 -- YYYY-mm-dd\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n"
basic-deps:
  base: '>=4.10.0.0 && <5'
  unliftio-core: '>=0.2.0.0'
  mtl: '>=2.2'
  transformers: '>=0.5.0.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.3.0
- 0.4.0.0
- 0.4.0.1
- 0.4.0.2
- 0.4.4.0
- 0.4.5.0
- 0.4.6.0
- 0.5.0.0
- 0.5.1.0
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
author: Daniel Diaz
latest: 0.6.2.0
description-type: markdown
description: "# dep-t\r\n\r\nThis package provides various helpers for the \"record-of-functions\"
  style of structuring Haskell applications. The guiding idea is that record-of-functions
  is a form of dependency injection, and the that the environment which contains the
  functions is akin to an [`ApplicationContext`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html)
  in object-oriented frameworks like [Java Spring](https://docs.spring.io/spring-framework/docs/current/reference/html/).\r\n\r\nIf
  every dependency knew about the concrete environment, that would increase coupling.
  The solution is to use `Has`-style classes so that each dependency knows only about
  those parts of the environment which it needs to function, and nothing more. Those
  `Has`-style classes can be tailor-made, but the package also provides a generic
  one. \r\n\r\n*Very* loosely speaking, `Has`-style constraints correspond to injected
  member variables in object-oriented frameworks.\r\n\r\n[![dep-t.png](https://i.postimg.cc/2j0qqkmJ/dep-t.png)](https://postimg.cc/V5bspcJB)\r\n\r\n-
  __Dep.Has__ contains a generic `Has` typeclass for locating dependencies in an environment.
  It can be useful independently of `ReaderT`, `DepT` or any monad transformer.\r\n-
  __Dep.Env__ complements __Dep.Has__, adding helpers for building environments of
  records.\r\n- __Dep.Tagged__ is a helper for disambiguating dependencies in __Dep.Env__
  environments.\r\n- __Control.Monad.Dep__ contains the `DepT` monad transformer,
  a variant of `ReaderT`.\r\n- __Control.Monad.Dep.Class__ is an extension of `MonadReader`,
  useful to program against both `ReaderT` and `DepT`.\r\n\r\n## The DepT transformer\r\n\r\n`DepT`
  is a\r\n[ReaderT](http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Reader.html)-like\r\nmonad
  transformer for dependency injection.\r\n\r\nThe difference with `ReaderT` is that
  `DepT` takes an enviroment whose type is\r\nparameterized by `DepT` itself.\r\n\r\n###
  Rationale\r\n\r\nTo perform dependency injection in Haskell, a common solution is
  to build a\r\nrecord of functions and pass it to the program logic using some variant
  of\r\n[`ReaderT`](http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Reader.html).\r\n\r\nTo
  avoid becoming tied to a concrete reader environment, let's define some\r\nauxiliary
  typeclasses that extract functions from a generic environment:\r\n\r\n    type HasLogger
  :: (Type -> Type) -> Type -> Constraint\r\n    class HasLogger d e | e -> d where\r\n
  \     logger :: e -> String -> d ()\r\n\r\n    type HasRepository :: (Type -> Type)
  -> Type -> Constraint\r\n    class HasRepository d e | e -> d where\r\n      repository
  :: e -> Int -> d ()\r\n\r\nWe see that the type `e` of the environment determines
  the monad `d` on which\r\nthe effects take place.\r\n\r\nHere's a monomorphic environment
  record with functions that have effects in `IO`:\r\n\r\n    type EnvIO :: Type\r\n
  \   data EnvIO = EnvIO\r\n      { _loggerIO :: String -> IO (),\r\n        _repositoryIO
  :: Int -> IO ()\r\n      }\r\n\r\n    instance HasLogger IO EnvIO where\r\n      logger
  = _loggerIO\r\n\r\n    instance HasRepository IO EnvIO where\r\n      repository
  = _repositoryIO\r\n\r\n[Record-of-functions-in-IO](https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/)
  is a simple technique which works well in many\r\nsituations. There are even [specialized\r\nlibraries](http://hackage.haskell.org/package/rio)
  that support it.\r\n\r\nHere's a function which can get its dependencies from the
  monomorphic\r\nenvironment:\r\n\r\n    mkControllerIO :: (HasLogger IO e, HasRepository
  IO e) => Int -> ReaderT e IO String\r\n    mkControllerIO x = do\r\n      e <- ask\r\n
  \     liftIO $ logger e \"I'm going to insert in the db!\"\r\n      liftIO $ repository
  e x\r\n      return \"view\"\r\n\r\nThat's all and well, but there are two issues
  that bug me:\r\n\r\n- We might want to write code that is innocent of `IO` and polymorphic
  over the\r\n  monad, to ensure that the program logic can't do some unexpected missile\r\n
  \ launch, or to allow testing our app in a \"pure\" way. \r\n\r\n- What if the repository
  function needs access to the logger, too? The\r\n  repository lives in the environment
  record, but isn't aware of it. That means\r\n  it can't use the `HasLogger` typeclass
  for easy and convenient dependency\r\n  injection. Why privilege the controller
  in such a way?\r\n\r\n  In a sufficiently complex app, the diverse functions that
  comprise it will be\r\n  organized in a big\r\n  [DAG](https://en.wikipedia.org/wiki/Directed_acyclic_graph)
  of dependencies.\r\n  And it would be nice if all the functions taking part in dependency
  injection\r\n  were treated uniformly; if all of them had access to (some view of)
  the\r\n  environment record.\r\n\r\nTo tackle these issues, we begin by giving the
  controller a more general signature:\r\n\r\n    mkControllerIO :: (HasLogger IO
  e, HasRepository IO e, MonadIO m, MonadReader e m) => Int -> m String\r\n\r\nNow
  the function can work in other reader-like monads besides `ReaderT`.\r\n\r\nLet's
  go one step further, and abstract away the `IO`, so that functions in the\r\nrecord
  can have effects in other monads:\r\n\r\n    mkController :: (HasLogger d e, HasRepository
  d e, LiftDep d m, MonadReader e m) => Int -> m String\r\n    mkController x = do\r\n
  \     e <- ask\r\n      liftD $ logger e \"I'm going to insert in the db!\"\r\n
  \     liftD $ repository e x\r\n      return \"view\"\r\n\r\nNow both the signature
  and the implementation have changed:\r\n\r\n- There's a new type variable `d`, the
  monad in which functions taken from the\r\n  environment `e` have their effects.\r\n\r\n-
  `MonadIO` has been replaced by `LiftDep` from `Control.Monad.Dep.Class`, a\r\n  constraint
  that says we can lift `d` effects into `m` (though it could still\r\n  make sense
  to require `MonadIO m` for effects not originating in the\r\n  environment).\r\n\r\n-
  Uses of `liftIO` have been replaced by `liftD`.\r\n\r\nIf all those constraints
  prove annoying to write, there's a convenient shorthand using the `MonadDep` type
  family:\r\n\r\n    mkController :: MonadDep [HasLogger, HasRepository] d e m =>
  Int -> m String\r\n\r\nThe new, more polymorphic `mkController` function can replace
  the original `mkControllerIO`:\r\n\r\n    mkControllerIO' :: (HasLogger IO e, HasRepository
  IO e) => Int -> ReaderT e IO String\r\n    mkControllerIO' = mkController\r\n\r\nNow
  let's focus on the environment record. We'll parameterize its type by a\r\nmonad:
  \r\n\r\n    type Env :: (Type -> Type) -> Type\r\n    data Env m = Env\r\n      {
  _logger :: String -> m (),\r\n        _repository :: Int -> m (),\r\n        _controller
  :: Int -> m String\r\n      }\r\n\r\n    instance HasLogger m (Env m) where\r\n
  \     logger = _logger\r\n\r\n    instance HasRepository m (Env m) where\r\n      repository
  = _repository\r\n\r\nNotice that the controller function is now part of the environment.
  No\r\nfavorites here!\r\n\r\nThe following implementation of the logger function
  has no dependencies besides\r\n`MonadIO`:\r\n\r\n    mkStdoutLogger :: MonadIO m
  => String -> m ()\r\n    mkStdoutLogger msg = liftIO (putStrLn msg)\r\n\r\nBut look
  at this implementation of the repository function. It gets hold of the\r\nlogger
  through `HasLogger`, just as the controller did:\r\n\r\n    mkStdoutRepository ::
  (MonadDep '[HasLogger] d e m, MonadIO m) => Int -> m ()\r\n    mkStdoutRepository
  entity = do\r\n      e <- ask\r\n      liftD $ logger e \"I'm going to write the
  entity!\"\r\n      liftIO $ print entity\r\n\r\nIt's about time we choose a concrete
  monad and assemble an environment record:\r\n\r\n    envIO :: Env (DepT Env IO)\r\n
  \   envIO =\r\n      let _logger = mkStdoutLogger\r\n          _repository = mkStdoutRepository\r\n
  \         _controller = mkController\r\n       in Env {_logger,  _repository, _controller}\r\n\r\nNot
  very complicated, except... what is that weird `DepT Env IO` doing there in\r\nthe
  signature? \r\n\r\nWell, that's the whole reason this library exists. For dependency
  injection to\r\nwork for *all* functions, `Env` needs to be parameterized with a
  monad that\r\nprovides that same `Env` environment. And trying to use a `ReaderT
  (Env\r\nsomething) IO` to parameterize `Env` won't fly; you'll get weird \"infinite\r\ntype\"
  kind of errors. So I created the `DepT` newtype over `ReaderT` to mollify\r\nthe
  compiler.\r\n\r\n`DepT` has `MonadReader` and `LiftDep` instances, so the effects
  of\r\n`mkController` can take place on it.\r\n\r\n### So how do we invoke the controller
  now?\r\n\r\nI suggest something like\r\n\r\n    runDepT (do e <- ask; _controller
  e 7) envIO \r\n\r\nor \r\n\r\n    (do e <- ask; _controller e 7) `runDepT` envIO
  \r\n\r\nThe companion package\r\n[dep-t-advice](http://hackage.haskell.org/package/dep-t-advice)
  has some more\r\nfunctions for running `DepT` computations.\r\n\r\n### How to avoid
  using \"ask\" and \"liftD\" before invoking a dependency?\r\n\r\nOne possible workaround
  (at the cost of more boilerplate) is to define helper\r\nfunctions like:  \r\n\r\n
  \   loggerD :: MonadDep '[HasLogger] d e m => String -> m ()\r\n    loggerD msg
  = asks logger >>= \\f -> liftD $ f msg\r\n\r\nWhich you can invoke like this:\r\n\r\n
  \   usesLoggerD :: MonadDep [HasLogger, HasRepository] d e m => Int -> m String\r\n
  \   usesLoggerD i = do\r\n      loggerD \"I'm calling the logger!\"\r\n      return
  \"foo\"\r\n\r\nThough perhaps this isn't worth the hassle.\r\n\r\n### How to use
  \"pure fakes\" during testing?\r\n\r\nThe [test suite](./test/tests.hs) has an example
  of using a `Writer` monad for\r\ncollecting the outputs of functions working as
  [\"test\r\ndoubles\"](https://martinfowler.com/bliki/TestDouble.html).\r\n\r\n###
  How to make a function \"see\" a different evironment from the one seen by its dependencies?\r\n\r\nSometimes
  we want a function in the environment to see a slightly different\r\nrecord from
  the record seen by the other functions, and in particular from the\r\nrecord seen
  by its own dependencies. \r\n\r\nFor example, the function might have a `HasLogger`
  constraint but we don't want\r\nit to use the default `HasLogger` instance of the
  environment.\r\n\r\nThe companion package\r\n[dep-t-advice](http://hackage.haskell.org/package/dep-t-advice)
  provides a\r\n`deceive` function that allows for this.\r\n\r\n### How to add AOP-ish
  \"aspects\" to functions in an environment?\r\n\r\nThe companion package\r\n[dep-t-advice](http://hackage.haskell.org/package/dep-t-advice)
  provides a\r\ngeneral method of extending the behaviour of `DepT`-effectful functions,
  in a\r\nway reminiscent of aspect-oriented programming.\r\n\r\n### What if I don't
  want to use DepT, or any other monad transformer for that matter?\r\n\r\nCheck out
  the function `fixEnv` in module `Dep.Env`, which\r\nprovides a transformer-less
  way to perform dependency injection, based on\r\nknot-tying.\r\n\r\nThat method
  requires an environment parameterized by _two_ type constructors:\r\none that wraps
  each field, and another that works as the effect monad for the\r\ncomponents.\r\n\r\n###
  DepT caveats\r\n\r\nThe structure of the `DepT` type might be prone to trigger a
  [known infelicity\r\nof the GHC\r\nsimplifier](https://twitter.com/DiazCarrete/status/1350116413445439493).\r\n\r\n##
  Links\r\n\r\n- This library was extracted from my answer to [this Stack Overflow\r\n
  \ question](https://stackoverflow.com/a/61782258/1364288).\r\n\r\n- The implementation
  of `mapDepT` was teased out in [this other SO question](https://stackoverflow.com/questions/65710657/writing-a-zooming-function-for-a-readert-like-monad-transformer).\r\n\r\n-
  An [SO\r\n  answer](https://stackoverflow.com/questions/57703898/how-to-call-impure-functions-from-pure-ones/57714058#57714058)\r\n
  \ about records-of-functions and the \"veil of polymorphism\".\r\n\r\n- The answers
  to [this SO\r\n  question](https://stackoverflow.com/questions/61642492/simplifying-the-invocation-of-functions-stored-inside-an-readert-environment)\r\n
  \ gave me the idea for how to \"instrument\" monadic functions (although the\r\n
  \ original motive of the question was different).\r\n\r\n- I'm unsure of the relationship
  between `DepT` and the technique described in\r\n  [Adventures assembling records
  of\r\n  capabilities](https://discourse.haskell.org/t/adventures-assembling-records-of-capabilities/623)\r\n
  \ which relies on having \"open\" and \"closed\" versions of the environment\r\n
  \ record, and getting the latter from the former by means of knot-tying. \r\n\r\n
  \ It seems that, with `DepT`, functions in the environment obtain their\r\n  dependencies
  anew every time they are invoked. If we change a function in the\r\n  environment
  record, all other functions which depend on it will be affected\r\n  in subsequent
  invocations. I don't think this happens with \"Adventures...\" at\r\n  least when
  changing a \"closed\", already assembled record.\r\n\r\n  With `DepT` a function
  might use `local` if it knows enough about the\r\n  environment. That doesn't seem
  very useful for program logic; if fact it\r\n  sounds like a recipe for confusion.
  But it enables [complex\r\n  scenarios](https://www.baeldung.com/spring-abstract-routing-data-source)
  for\r\n  which the dependency graph needs to change in the middle of a request.\r\n\r\n
  \ All in all, perhaps `DepT` will be overkill in a lot of cases, offering\r\n  unneeded
  flexibility. Perhaps using `fixEnv` from `Dep.Env` will end up being\r\n  simpler.\r\n\r\n
  \ Unlike in \"Adventures...\" the `fixEnv` method doesn't use an extensible\r\n
  \ record for the environment but, to keep things simple, a suitably\r\n  parameterized
  conventional one.\r\n\r\n- Another exploration of dependency injection with `ReaderT`:\r\n
  \ [ReaderT-OpenProduct-Environment](https://github.com/keksnicoh/ReaderT-OpenProduct-Environment).\r\n\r\n-
  [The ReaderT design pattern](https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/).\r\n\r\n
  \ > Your application code will, in general, live in ReaderT Env IO. Define it as
  type App = ReaderT Env IO if you wish, or use a newtype wrapper instead of ReaderT
  directly.\r\n\r\n  > Optional: instead of directly using the App datatype, write
  your functions in terms of mtl-style typeclasses like MonadReader and MonadIO\r\n\r\n-
  [RIO](http://hackage.haskell.org/package/rio) is a featureful ReaderT-like /\r\n
  \ prelude replacement library which favors monomorphic environments.\r\n\r\n- The
  [van Laarhoven Free Monad](http://r6.ca/blog/20140210T181244Z.html).\r\n\r\n  >
  Swierstra notes that by summing together functors representing primitive I/O\r\n
  \ > actions and taking the free monad of that sum, we can produce values use\r\n
  \ > multiple I/O feature sets. Values defined on a subset of features can be\r\n
  \ > lifted into the free monad generated by the sum. The equivalent process can\r\n
  \ > be performed with the van Laarhoven free monad by taking the product of\r\n
  \ > records of the primitive operations. Values defined on a subset of features\r\n
  \ > can be lifted by composing the van Laarhoven free monad with suitable\r\n  >
  projection functions that pick out the requisite primitive operations. \r\n\r\n
  \ [Another post](https://www.tweag.io/blog/2019-03-20-capability-free-monad/van)
  about the van Laarhoven Free Monad. Is it related to the final encoding of Free
  monads described [here](https://blog.poisson.chat/posts/2021-10-20-initial-final-free-monad.html)?\r\n\r\n-
  [Interesting SO response](https://stackoverflow.com/a/634754/1364288) (from\r\n
  \ 2009) about the benefits of autowiring in Spring. The record-of-functions\r\n
  \ approach in Haskell can't be said to provide true autowiring. You still need\r\n
  \ to assemble the record manually, and field names in the record play the part\r\n
  \ of Spring bean names. \r\n\r\n  > Right now I think the most important reason
  for using autowiring is that\r\n  > there's one less abstraction in your system
  to keep track of. The \"bean name\"\r\n  > is effectively gone. It turns out the
  bean name only exists because of xml. So\r\n  > a full layer of abstract indirections
  (where you would wire bean-name \"foo\"\r\n  > into bean \"bar\") is gone\r\n\r\n-
  [registry](http://hackage.haskell.org/package/registry) is a package that\r\n  implements
  an alternative approach to dependency injection, one different\r\n  from the `ReaderT`-based
  one. \r\n\r\n- [Printf(\"%s %s\", dependency, injection)](https://www.fredrikholmqvist.com/posts/print-dependency-injection/).
  Commented on [HN](https://news.ycombinator.com/item?id=28915630), [Lobsters](https://lobste.rs/s/4axrt6/printf_s_s_dependency_injection).\r\n\r\n-
  [Dependency Injection Principles, Practices, and\r\n  Patterns](https://www.goodreads.com/book/show/44416307-dependency-injection-principles-practices-and-patterns)\r\n
  \ This is a good book on the general princples of DI. \r\n\r\n- A [series of posts](https://twitter.com/ploeh/status/1485514524962738179)—by
  one of the authors of the DI book—about building a DI container.\r\n\r\n- [Lessons
  learned while writing a Haskell\r\n  application](https://gvolpe.com/blog/lessons-learned-while-writing-a-haskell-app/).\r\n
  \ This post recommends a \"polymorphic record of functions\" style, which fits\r\n
  \ the philosophy of this library.\r\n\r\n- One [big disadvantage](https://www.reddit.com/r/haskell/comments/r6foxv/opinions_on_reader_continuationbased_io/hmthsoy/)
  of the records-of-functions approach:\r\n\r\n  > representing effects as records
  of functions rather than typeclasses/fused effect invocations destroys inlining,
  so you’ll generate significantly worse Core if you use this on a hot path.\r\n\r\n-
  [ReaderT pattern is just extensible effects](https://www.reddit.com/r/haskell/comments/sjhatp/readert_pattern_is_just_extensible_effects/)\r\n\r\n"
license-name: BSD-3-Clause
