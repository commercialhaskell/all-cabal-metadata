all-versions:
- '0.1'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
basic-deps:
  defun-bool: '>=0.1 && <0.1.1'
  defun-core: '>=0.1 && <0.1.1'
  defun-sop: '>=0.1 && <0.1.1'
changelog: |
  ## 0.1

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |-
  The package @defun@ provides defunctionalization helpers, most importantly
  type family 'DeFun.Core.App' allowing to write higher-order type families.
  The @singletons@ package also has its own type family @Apply@,
  but the machinery is tied to the @Sing@ / singletons.

  Once @UnsaturatedTypeFamilies@ extension is implemented in GHC
  ([Proposal 242](https://github.com/ghc-proposals/ghc-proposals/pull/242)),
  this package will become more or less obsolete.

  In particular, the @Lam@ counterpart @SLambda@ is specialized to @Sing@ arguments.
  The @defun@'s @Lam@ is however fully general, so you can use your own singletons
  or (importantly) singleton-like arguments.

  The package provides few defunctionalized functions, and their term-level
  reflections using @SBool@ and @NP@ data types from @singletons-bool@ and @sop-core@
  packages respectively.

  This is the "batteries-included" variant with "many" dependencies; see the
  @defun-core@ package and other @defun-*@ dependencies if you need a more limited
  dependency footprint.

  The [first-class-families](https://hackage.haskell.org/package/first-class-families) package has slightly different design,
  in particular it doesn't reuse existing (nor define) own standalone type families.
  In @first-class-families@ everything has to be evaluated via its @Eval@ type family (which job is similar to @App@),
  but @defun@ only makes /higher-order/ type families look different.
  In short, ergonomics are a bit different.
description-type: haddock
hash: ba106a06ffcbddb96a3bc48cfe6474c80b99b4d43437906e240c3bbded4c57c1
homepage: ''
latest: '0.1'
license-name: BSD-3-Clause
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: Defunctionalization helpers
test-bench-deps:
  base: <5
  defun: '>=0'
  sop-core: '>=0'
