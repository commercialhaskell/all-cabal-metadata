homepage: https://github.com/stla/delaunayNd#readme
changelog-type: markdown
hash: f463f35fe18be8ab701a989773a431bd13daba831de51f32a428edaebc85ece4
test-bench-deps: {}
maintainer: laurent_step@outlook.fr
synopsis: Delaunay tessellation
changelog: "# Changelog for `delaunayNd`\r\n\r\n## 0.1.0.1 - 2023-11-15\r\n\r\nBuilt
  of v0.1.0.0 has failed because of a non-declarated header file.\r\n\r\n\r\n## 0.1.0.0
  - 2023-11-15\r\n\r\nFirst release.\r\n"
basic-deps:
  insert-ordered-containers: '>=0.2.5.3'
  extra: '>=1.7.7'
  split: '>=0.2.3.5'
  base: '>=4.9 && <5'
  Unique: '>=0.4.7.9'
  containers: '>=0.6.4.1'
  hashable: '>=1.3.5.0'
  ilist: '>=0.4.0.1'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: St√©phane Laurent
latest: 0.1.0.1
description-type: markdown
description: "# delaunayNd\r\n\r\n<!-- badges: start -->\r\n[![Stack-lts](https://github.com/stla/delaunayNd/actions/workflows/Stack-lts.yml/badge.svg)](https://github.com/stla/delaunayNd/actions/workflows/Stack-lts.yml)\r\n[![Stack-lts-Mac](https://github.com/stla/delaunayNd/actions/workflows/Stack-lts-Mac.yml/badge.svg)](https://github.com/stla/delaunayNd/actions/workflows/Stack-lts-Mac.yml)\r\n[![Stack-nightly](https://github.com/stla/delaunayNd/actions/workflows/Stack-nightly.yml/badge.svg)](https://github.com/stla/delaunayNd/actions/workflows/Stack-nightly.yml)\r\n<!--
  badges: end -->\r\n\r\nDelaunay tessellation in arbitrary dimension. \r\nBased on
  the `qhull` C library.\r\n\r\n___\r\n\r\nConsider this list of vertices (actually
  these are the vertices of a\r\npolyhedron):\r\n\r\n```haskell\r\nvertices :: [[Double]]\r\nvertices
  = [\r\n            [ -5, -5,  16 ]  -- 0\r\n          , [ -5,  8,   3 ]  -- 1\r\n
  \         , [  4, -1,   3 ]  -- 2\r\n          , [  4, -5,   7 ]  -- 3\r\n          ,
  [  4, -1, -10 ]  -- 4\r\n          , [  4, -5, -10 ]  -- 5\r\n          , [ -5,
  \ 8, -10 ]  -- 6\r\n          , [ -5, -5, -10 ]  -- 7\r\n                           ]\r\n```\r\n\r\nThe
  `delaunay` function splits the polyhedron into simplices, the *tiles* of the\r\ntesselation:\r\n\r\n```haskell\r\n>
  import Geometry.Delaunay\r\n> d <- delaunay vertices False False Nothing\r\n> _tiles
  d\r\nfromList\r\n  [ ( 0\r\n    , Tile\r\n        { _simplex =\r\n            Simplex\r\n
  \             { _vertices' =\r\n                  fromList\r\n                    [
  ( 2 , [ 4.0 , -1.0 , 3.0 ] )\r\n                    , ( 4 , [ 4.0 , -1.0 , -10.0
  ] )\r\n                    , ( 5 , [ 4.0 , -5.0 , -10.0 ] )\r\n                    ,
  ( 7 , [ -5.0 , -5.0 , -10.0 ] )\r\n                    ]\r\n              , _circumcenter
  =\r\n                  [ -0.5000000000000009 , -3.0 , -3.499999999999999 ]\r\n              ,
  _circumradius = 8.154753215150047\r\n              , _volume' = 78.0\r\n              }\r\n
  \       , _neighborsIds = fromList [ 1 , 3 ]\r\n        , _facetsIds = fromList
  [ 0 , 1 , 2 , 3 ]\r\n        , _family' = None\r\n        , _toporiented = False\r\n
  \       }\r\n    )\r\n  , ( 1\r\n    , Tile\r\n  ......\r\n```\r\n\r\nThe field
  `_tiles` is a map of `Tile` objects. The keys of the map are\r\nthe tiles identifiers.
  A `Tile` object has five fields:\r\n\r\n-   `_simplex`, a `Simplex` object;\r\n\r\n-
  \  `_neighborsIds`, a set of tiles identifiers, the neighbors of the tile;\r\n\r\n-
  \  `facetsIds`, a set of facets identifiers, the facets of the tile;\r\n\r\n-   `family'`,
  two tiles of the same family share the same circumcenter;\r\n\r\n-   `toporiented`,
  Boolean, whether the tile is top-oriented.\r\n\r\nA `Simplex` object has four fields:\r\n\r\n-
  \  `_vertices`, the vertices of the simplex, actually a map of the vertices\r\nidentifiers
  to their coordinates;\r\n\r\n-   `_circumcenter`, the coordinates of the circumcenter
  of the simplex;\r\n\r\n-   `_circumradius`, the circumradius;\r\n\r\n-   `_volume'`,
  the volume of the simplex (the area in dimension 2, the\r\n  length in dimension
  1).\r\n\r\nAnother field of the output of `delaunay` is `_tilefacets`:\r\n\r\n```haskell\r\n>
  _tilefacets d\r\nfromList\r\n  [ ( 0\r\n    , TileFacet\r\n        { _subsimplex
  =\r\n            Simplex\r\n              { _vertices' =\r\n                  fromList\r\n
  \                   [ ( 4 , [ 4.0 , -1.0 , -10.0 ] )\r\n                    , (
  5 , [ 4.0 , -5.0 , -10.0 ] )\r\n                    , ( 7 , [ -5.0 , -5.0 , -10.0
  ] )\r\n                    ]\r\n              , _circumcenter = [ -0.5000000000000009
  , -3.0 , -10.0 ]\r\n              , _circumradius = 4.924428900898053\r\n              ,
  _volume' = 36.0\r\n              }\r\n        , _facetOf = fromList [ 0 ]\r\n        ,
  _normal' = [ 0.0 , 0.0 , -1.0 ]\r\n        , _offset = -10.0\r\n        }\r\n    )\r\n
  \ , ( 1\r\n    , TileFacet\r\n        { _subsimplex =\r\n  ......\r\n```\r\n\r\nThis
  is a map of `TileFacet` objects. A tile facet is a subsimplex. The keys of\r\nthe
  map are the identifiers of the facets.\r\nA `TileFacet` object has four fields:
  `_subsimplex`, a `Simplex` object,\r\n`_facetOf`, the identifiers of the tiles this
  facet belongs to (a set of one\r\nor two integers), `_normal'`, the normal of the
  facet, and `offset`, the offset\r\nof the facet.\r\n\r\nThe output of `delaunay`
  also has a `_sites` field, the vertices with\r\nadditional information:\r\n\r\n```haskell\r\n>
  _sites d\r\nfromList\r\n  [ ( 0\r\n    , Site\r\n        { _point = [ -5.0 , -5.0
  , 16.0 ]\r\n        , _neighsitesIds = fromList [ 1 , 3 , 7 ]\r\n        , _neighfacetsIds
  = fromList [ 15 , 16 , 17 ]\r\n        , _neightilesIds = fromList [ 5 ]\r\n        }\r\n
  \   )\r\n  , ( 1\r\n    , Site\r\n  ......\r\n```\r\n\r\nThis is a map of `Site`
  objects. The keys of the map are the identifiers of\r\nthe vertices. A `Site` object
  has four fields:\r\n\r\n-   `_point`, the coordinates of the vertex;\r\n\r\n-   `_neighsitesIds`,
  the identifiers of the connected vertices;\r\n\r\n-   `_neighfacetsIds`, a set of
  integers, the identifiers of the facets the\r\nvertex belongs to;\r\n\r\n-   `_neightilesIds`,
  the set of the identifiers of the tiles the vertex belongs\r\nto.\r\n\r\nFinally,
  the output of `delaunay` has the `_edges'` field, providing the \r\nedges: \r\n\r\n```haskell\r\n>
  _edges' d\r\nfromList\r\n  [ ( Pair 0 1 , ( [ -5.0 , -5.0 , 16.0 ] , [ -5.0 , 8.0
  , 3.0 ] ) )\r\n  , ( Pair 0 3 , ( [ -5.0 , -5.0 , 16.0 ] , [ 4.0 , -5.0 , 7.0 ]
  ) )\r\n  , ......\r\n```"
license-name: GPL-3.0-only
