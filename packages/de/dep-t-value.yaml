homepage: ''
changelog-type: markdown
hash: a2a9e975ac3c6977f5f03a0ead4f2665194d8d658a483eb3b394bf8e08a33949
test-bench-deps:
  bytestring: '>=0.10.12.0'
  split: '>=0.2.3'
  base: '>=4.10.0.0 && <5'
  text: '>=1.2.5.0'
  filepath: '>=1.4.0.0'
  containers: '>=0.6.5.1'
  unliftio-core: '>=0.2.0.0'
  mtl: '>=2.2'
  tasty-hunit: '>=0.10.0.2'
  dep-t: ^>=0.6.1.0
  transformers: '>=0.5.0.0'
  tasty: '>=1.3.1'
  dep-t-value: -any
  aeson: '>=2.0.2.0'
  directory: '>=1.3.6.0'
maintainer: diaz_carrete@yahoo.com
synopsis: Pair resources files with types within your program.
changelog: "# Revision history for dep-t-value-sqlite\r\n\r\n## 0.1.0.0 -- YYYY-mm-dd\r\n\r\n*
  First version. Released on an unsuspecting world.\r\n"
basic-deps:
  bytestring: '>=0.10.12.0'
  split: '>=0.2.3'
  base: '>=4.10.0.0 && <5'
  text: '>=1.2.5.0'
  filepath: '>=1.4.0.0'
  containers: '>=0.6.5.1'
  unliftio-core: '>=0.2.0.0'
  mtl: '>=2.2'
  dep-t: ^>=0.6.1.0
  transformers: '>=0.5.0.0'
  aeson: '>=2.0.2.0'
  directory: '>=1.3.6.0'
all-versions:
- 0.1.0.0
author: Daniel Diaz
latest: 0.1.0.0
description-type: markdown
description: "# dep-t-value\r\n\r\nPair resources files with types within your program.\r\n\r\nPart
  of the [dep-t-framework](https://github.com/danidiaz/dep-t-framework). \r\n\r\n##
  How to use\r\n\r\n- Take a datatype that you want to associate to a resource file,
  and derive a `Dep.Resource.FromResource` instance for it.\r\n\r\n- Make your program
  logic take a `Value yourdatatype` record.\r\n\r\n- When assembling the global application
  environment,\r\n\r\n    - Use `dataDirLoader` to define a `Loader` that searches
  for resource files by following the datatype's module path, and uses the dataype's
  name as file name.\r\n\r\n    - Build the `Value yourdatatype` by using functions
  form `Dep.Value.JSON` or `Dep.Value.Text`.\r\n\r\n## Links\r\n\r\n- the built-in
  [`Paths_pkgname` mechanism for accessing data files from package code](https://cabal.readthedocs.io/en/latest/cabal-package.html#accessing-data-files-from-package-code).\r\n\r\n-
  the [data-files](https://cabal.readthedocs.io/en/latest/cabal-package.html#pkg-field-data-files)
  cabal field.\r\n\r\n    > If you decide to import the Paths_pkgname module then
  it must be listed\r\n    > in the other-modules field just like any other module
  in your package and\r\n    > on autogen-modules as the file is autogenerated.\r\n\r\n-
  the [data-dir](https://cabal.readthedocs.io/en/latest/cabal-package.html#pkg-field-data-dir)
  cabal field.\r\n\r\n- [prefix-independence](https://cabal.readthedocs.io/en/latest/setup-commands.html#prefix-independence)\r\n\r\n-
  [Paths in the simple build system](https://cabal.readthedocs.io/en/latest/setup-commands.html?#paths-in-the-simple-build-system)\r\n\r\n-
  GitHub issue: [Rework data-file handling to be file-embed-like?](https://github.com/haskell/cabal/issues/6096)
  \r\n\r\n- Another issue, opened by me: [Questions about prefix-independence for
  data files](https://github.com/haskell/cabal/issues/7888).\r\n\r\n- The \"prefix-independence\"
  feature seems to be in bad shape:\r\n\r\n    when (\"${pkgroot}\" `isPrefixOf` prefix
  dirs) $\r\n      warn verbosity $ \"Using ${pkgroot} in prefix \" ++ prefix dirs\r\n
  \                   ++ \" will not work if you rely on the Path_* module \"\r\n
  \                   ++ \" or other hard coded paths.  Cabal does not yet \"\r\n
  \                   ++ \" support fully  relocatable builds! \"\r\n                    ++
  \" See #462 #2302 #2994 #3305 #3473 #3586 #3909\"\r\n                    ++ \" #4097
  #4291 #4872\"\r\n\r\n- However, overriding the data dir using an environment variable
  is different from \"prefix-independence\" and it [*does* work](https://cabal.readthedocs.io/en/3.6/cabal-package.html?highlight=data-files#accessing-data-files-from-package-code):
  \r\n\r\n> The actual location of all these directories can be individually overridden
  at runtime using environment variables of the form pkg_name_var, where pkg_name
  is the name of the package with all hyphens converted into underscores, and var
  is either bindir, libdir, dynlibdir, datadir, libexedir or sysconfdir. For example,
  the configured data directory for pretty-show is controlled with the pretty_show_datadir
  environment variable.\r\n\r\n- [file-embed: Use Template Haskell to embed file contents
  directly.](https://hackage.haskell.org/package/file-embed)\r\n\r\n- [data-embed:
  Embed files and other binary blobs inside executables without Template Haskell.](https://hackage.haskell.org/package/data-embed)\r\n\r\n"
license-name: BSD-3-Clause
