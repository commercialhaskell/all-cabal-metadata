homepage: https://github.com/haskell-compat/deriving-compat
changelog-type: markdown
hash: d36924a93ed9c53753a7b9d4b89c04375d649bb0b81742c2547da38067816d7b
test-bench-deps:
  void: '>=0.5.10 && <1'
  base: '>=4.9 && <5'
  deriving-compat: -any
  hspec: '>=1.8'
  base-orphans: '>=0.5 && <1'
  tagged: '>=0.7 && <1'
  base-compat: '>=0.8.1 && <1'
  transformers: (>=0.2 && <0.4) || (>=0.5 && <0.7)
  QuickCheck: '>=2 && <3'
  template-haskell: '>=2.5 && <2.20'
  transformers-compat: '>=0.5'
maintainer: Ryan Scott <ryan.gl.scott@gmail.com>
synopsis: Backports of GHC deriving extensions
changelog: "### 0.6.2 [2022.12.07]\r\n* Make the test suite build with GHC 9.6 or
  later.\r\n\r\n### 0.6.1 [2022.05.07]\r\n* Backport [GHC!6955](https://gitlab.haskell.org/ghc/ghc/-/merge_requests/6955),\r\n
  \ which makes derived `Eq` instances check data constructor tags, which can\r\n
  \ improve runtime performance for data types with nullary constructors.\r\n* Allow
  building the test suite with `transformers-0.6.*`.\r\n\r\n## 0.6 [2021.08.29]\r\n*
  Allow building with `template-haskell-2.18.0.0` (GHC 9.2).\r\n* Using `deriveEnum`
  and `deriveIx` on poly-kinded data family instances may\r\n  now require the use
  of the `TypeInType` extension if using GHC 8.0, 8.2, or\r\n  8.4. (On later versions
  of GHC, `TypeInType`'s functionality has been folded\r\n  into `PolyKinds`.)\r\n*
  Support deriving `Eq`, `Ord`, and `Show` instances for data types with fields\r\n
  \ of type `Int32#` or `Word32#` on GHC 9.2 or later.\r\n* `deriveVia` now instantiates
  \"floating\" `via` type variables (i.e., type\r\n  variables mentioned in the `via`
  type that are not mentioned in the instance\r\n  context or the first argument to
  `Via`) to `Any` in the generated code. As a\r\n  result, `deriveVia` no longer generates
  code that produces `-Wunused-foralls`\r\n  warnings.\r\n\r\n### 0.5.10 [2020.09.30]\r\n*
  Allow building with `template-haskell-2.17.0.0` (GHC 9.0).\r\n\r\n### 0.5.9 [2019.06.08]\r\n*
  Have `deriveFunctor` and `deriveFoldable` derive implementations of `(<$)`\r\n  and
  `null`, which GHC starting doing in 8.2 and 8.4, respectively.\r\n* Fix a bug in
  which `deriveOrd{,1,2}` could generate incorrect code for data\r\n  types with a
  combination of nullary and non-nullary constructors.\r\n* Fix a bug in which `deriveFunctor`
  would fail on sufficiently complex uses\r\n  of rank-n types in constructor fields.\r\n*
  Fix a bug in which `deriveFunctor` and related functions would needlessly\r\n  reject
  data types whose last type parameters appear as oversaturated\r\n  arguments to
  a type family.\r\n\r\n### 0.5.8 [2019.11.26]\r\n* Allow building with GHC 8.10.\r\n\r\n###
  0.5.7 [2019.08.27]\r\n* Permit `deriveVia` to use \"floating\" `via` type variables,
  such as the `a`\r\n  in:\r\n\r\n  ```hs\r\n  deriveVia [t| forall a. Show MyInt
  `Via` Const Int a |]\r\n  ```\r\n\r\n### 0.5.6 [2019.05.02]\r\n* Support deriving
  `Eq`, `Ord`, and `Show` instances for data types with fields\r\n  of type `Int8#`,
  `Int16#`, `Word8#`, or `Word16#` on GHC 8.8 or later.\r\n\r\n### 0.5.5 [2019.04.26]\r\n*
  Support `th-abstraction-0.3` or later.\r\n\r\n### 0.5.4 [2019.01.21]\r\n* Expose
  `Internal` modules.\r\n\r\n### 0.5.3 [2019.01.20]\r\n* Fix a bug in which `deriveEnum`/`deriveIx`
  would generate ill-scoped code\r\n  for certain poly-kinded data types.\r\n\r\n###
  0.5.2 [2018.09.13]\r\n* Fix a bug (on GHC 8.7 and above) in which `deriveGND`/`deriveVia`
  would\r\n  generate ill-scoped code.\r\n\r\n### 0.5.1 [2018.07.11]\r\n* Have `deriveGND`/`deriveVia`
  throw an error if an incorrect number of\r\n  arguments are supplied to the type
  class.\r\n\r\n## 0.5 [2018.07.01]\r\n* Backport the changes to `GeneralizedNewtypeDeriving`
  and `DerivingVia` code\r\n  generation from\r\n  [Trac #15290](https://ghc.haskell.org/trac/ghc/ticket/15290).\r\n\r\n
  \ As a result, code generated by `deriveGND` or `deriveVia` now requires the\r\n
  \ `InstanceSigs` and `ScopedTypeVariables` language extensions. On the other\r\n
  \ hand, the generated code no longer requires the `ImpredicativeTypes`\r\n  extension
  (unless any class methods use higher-rank types).\r\n* Allow building with `containers-0.6`
  and `template-haskell-2.14`.\r\n\r\n### 0.4.3 [2018.06.16]\r\n* Fix a bug that caused
  debug-enabled GHC builds to panic when generating\r\n  code from this library (see\r\n
  \ [Trac #15270](https://ghc.haskell.org/trac/ghc/ticket/15270)).\r\n  The fix only
  affects the library's internals, so no changes are user-facing.\r\n\r\n### 0.4.2
  [2018.05.14]\r\n* Backport the fixes for GHC Trac\r\n  [#14364](https://ghc.haskell.org/trac/ghc/ticket/14364)\r\n
  \ and\r\n  [#14918](https://ghc.haskell.org/trac/ghc/ticket/14918),\r\n  which significantly
  improve the compliation times of derived `Read`\r\n  instances.\r\n\r\n### 0.4.1
  [2018.02.04]\r\n* Add `Data.Deriving.Via`, which allows emulating the behavior of
  the\r\n  `GeneralizedNewtypeDeriving` and `DerivingVia` extensions.\r\n* Test suite
  fixes for GHC 8.4.\r\n\r\n## 0.4 [2017.12.07]\r\n* Incorporate changes from the
  `EmptyDataDeriving` proposal (which is in GHC\r\n  as of 8.4):\r\n  * For derived
  `Eq` and `Ord` instances for empty data types, simply return\r\n    `True` and `EQ`,
  respectively, without inspecting the arguments.\r\n  * For derived `Read` instances
  for empty data types, simply return `pfail`\r\n    (without `parens`).\r\n  * For
  derived `Show` instances for empty data types, inspect the argument\r\n    (instead
  of `error`ing). In addition, add `showEmptyCaseBehavior` to\r\n    `ShowOptions`,
  which configures whether derived instances for empty data\r\n    types should use
  the `EmptyCase` extension (this is disabled by default).\r\n  * For derived `Functor`
  and `Traversable` instances for empty data\r\n    types, make `fmap` and `traverse`
  strict in its argument.\r\n  * For derived `Foldable` instances, do not error on
  empty data types.\r\n    Instead, simply return the folded state (for `foldr`) or
  `mempty` (for\r\n    `foldMap`), without inspecting the arguments.\r\n  * Add `FFTOptions`
  (`Functor`/`Foldable`/`Traversable` options) to\r\n    `Data.Functor.Deriving`,
  along with variants of existing functions that\r\n    take `FFTOptions` as an argument.
  For now, the only configurable option is\r\n    whether derived instances for empty
  data types should use the `EmptyCase`\r\n    extension (this is disabled by default).\r\n*
  Backport the fix to #13328. That is, when deriving `Functor` or\r\n  `Traversable`
  instances for data types where the last type variable is at\r\n  phantom role, generated
  `fmap`/`traverse` implementations now use `coerce`\r\n  for efficiency.\r\n* Rename
  `emptyCaseBehavior` from `Data.Functor.Deriving` to\r\n  `fftEmptyCaseBehavior`.\r\n\r\n###
  0.3.6 [2017.04.10]\r\n* Make `deriveTraversable` use `liftA2` in derived implementations
  of\r\n  `traverse` when possible, now that `liftA2` is a class method of\r\n  `Applicative`
  (as of GHC 8.2)\r\n* Make `deriveShow` use `showCommaSpace`, a change introduced
  in GHC 8.2\r\n\r\n### 0.3.5 [2016.12.12]\r\n* Fix bug in which derived `Ord` instances
  for datatypes with many constructors\r\n  would fail to typecheck\r\n\r\n### 0.3.4
  [2016.10.20]\r\n* Fix bug in which infix record selectors weren't shown with parentheses
  in derived `Show` instances\r\n* Fix bug in which record selectors weren't parsed
  correctly in derived `Read` instances\r\n\r\n### 0.3.3 [2016.09.11]\r\n* Add `Data.Bounded.Deriving`,
  which allows deriving `Bounded` with TH.\r\n* Add `Data.Enum.Deriving`, which allows
  deriving `Enum` with TH.\r\n* Add `Data.Ix.Deriving`, which allows deriving `Ix`
  with TH.\r\n* Fix bug in which derived `Show` instance would parenthesize the output
  too eagerly\r\n\r\n### 0.3.2\r\n* Incorporate a fix to GHC Trac #10858, which will
  be introduced in GHC 8.2\r\n* Fix bug in which derived `Ord` instances accidentally
  swapped their less-than(-or-equal-to) and greater-than(-or-equal-to) methods\r\n*
  Fix GHC HEAD build\r\n\r\n### 0.3.1\r\n* Allow deriving `Functor` and `Foldable`
  instances for datatypes containing unboxed tuples\r\n* Microoptimization in derived
  instances of higher-order versions of `Eq`, `Ord`, `Read`, and `Show`\r\n\r\n##
  0.3\r\n* Added `Data.Eq.Deriving`, which allows deriving `Eq`, `Eq1`, and `Eq2`
  with TH.\r\n* Added `Data.Ord.Deriving`, which allows deriving `Ord`, `Ord1`, and
  `Ord2` with TH.\r\n* Added `Data.Read.Deriving`, which allows deriving `Read`, `Read1`,
  and `Eq2` with TH.\r\n* Renamed `Text.Show.Deriving.Options` to `ShowOptions` so
  as to disambiguate it from the options datatypes in other `deriving-compat` modules.\r\n\r\n###
  0.2.2\r\n* Fixed a bug in `Text.Show.Deriving`'s treatment of unlifted types\r\n\r\n###
  0.2.1\r\n* Added `Text.Show.Deriving`, which allows deriving `Show`, `Show1`, and
  `Show2` with TH.\r\n\r\n## 0.2\r\n* Added support for GHC 8.0\r\n* Added `Data.Functor.Deriving`
  and `Data.Traversable.Deriving`, which allow deriving `Functor` and `Traversable`
  with TH.\r\n* Added `Data.Deriving`, which reexports all other modules\r\n\r\n##
  0.1\r\n* Initial commit\r\n"
basic-deps:
  base: '>=4.9 && <5'
  th-abstraction: '>=0.4 && <0.5'
  containers: '>=0.1 && <0.7'
  ghc-prim: -any
  transformers: (>=0.2 && <0.4) || (>=0.5 && <0.7)
  ghc-boot-th: -any
  template-haskell: '>=2.11 && <2.20'
  transformers-compat: '>=0.5'
all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- '0.3'
- 0.3.1
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- '0.4'
- 0.4.1
- 0.4.2
- 0.4.3
- '0.5'
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
- 0.5.5
- 0.5.6
- 0.5.7
- 0.5.8
- 0.5.9
- 0.5.10
- '0.6'
- 0.6.1
- 0.6.2
author: Ryan Scott
latest: 0.6.2
description-type: markdown
description: "# `deriving-compat`\r\n[![Hackage](https://img.shields.io/hackage/v/deriving-compat.svg)][Hackage:
  deriving-compat]\r\n[![Hackage Dependencies](https://img.shields.io/hackage-deps/v/deriving-compat.svg)](http://packdeps.haskellers.com/reverse/deriving-compat)\r\n[![Haskell
  Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)][Haskell.org]\r\n[![BSD3
  License](http://img.shields.io/badge/license-BSD3-brightgreen.svg)][tl;dr Legal:
  BSD3]\r\n[![Build Status](https://github.com/haskell-compat/deriving-compat/workflows/Haskell-CI/badge.svg)](https://github.com/haskell-compat/deriving-compat/actions?query=workflow%3AHaskell-CI)\r\n\r\n[Hackage:
  deriving-compat]:\r\n  http://hackage.haskell.org/package/deriving-compat\r\n  \"deriving-compat
  package on Hackage\"\r\n[Haskell.org]:\r\n  http://www.haskell.org\r\n  \"The Haskell
  Programming Language\"\r\n[tl;dr Legal: BSD3]:\r\n  https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\r\n
  \ \"BSD 3-Clause License (Revised)\"\r\n\r\n`deriving-compat` provides Template
  Haskell functions that mimic `deriving` extensions that were introduced or modified
  in recent versions of GHC. Currently, the following typeclasses/extensions are covered:\r\n\r\n*
  Deriving `Bounded`\r\n* Deriving `Enum`\r\n* Deriving `Ix`\r\n* Deriving `Eq`\r\n*
  Deriving `Ord`\r\n* Deriving `Read`\r\n* Deriving `Show`\r\n* `DeriveFoldable`\r\n*
  `DeriveFunctor`\r\n* `DeriveTraversable`\r\n* `GeneralizedNewtypeDeriving` (with
  GHC 8.2 or later)\r\n* `DerivingVia` (with GHC 8.2 or later)\r\n\r\nSee the `Data.Deriving`
  module for a full list of backported changes.\r\n\r\nIn addition, `deriving-compat`
  also provides some additional `deriving` functionality that has not yet been merged
  into upstream GHC. Aside from the GHC `deriving` extensions mentioned above, `deriving-compat`
  also permits deriving instances of classes in the `Data.Functor.Classes` module,
  covering the `Eq1`, `Eq2`, `Ord1`, `Ord2`, `Read1`, `Read2`, `Show1`, and `Show2`
  classes. This extra functionality is outside of the main scope of `deriving-compat`,
  as it does not backport extensions that exist in today's GHC. Nevertheless, the
  underlying Template Haskell machinery needed to derive `Eq` and friends extends
  very naturally to `Eq1` and friends, so this extra functionality is included in
  `deriving-compat` as a convenience.\r\n\r\nNote that some recent GHC typeclasses/extensions
  are not covered by this package:\r\n\r\n* `DeriveDataTypeable`\r\n* `DeriveGeneric`,
  which was introducted in GHC 7.2 for deriving `Generic` instances, and modified
  in GHC 7.6 to allow derivation of `Generic1` instances. Use `Generics.Deriving.TH`
  from [`generic-deriving`](http://hackage.haskell.org/package/generic-deriving) to
  derive `Generic(1)` using Template Haskell.\r\n* `DeriveLift`, which was introduced
  in GHC 8.0 for deriving `Lift` instances. Use `Language.Haskell.TH.Lift` from [`th-lift`](http://hackage.haskell.org/package/th-lift)
  to derive `Lift` using Template Haskell.\r\n* The `Bifunctor` typeclass, which was
  introduced in GHC 7.10, as well as the `Bifoldable` and `Bitraversable` typeclasses,
  which were introduced in GHC 8.2. Use `Data.Bifunctor.TH` from [`bifunctors`](http://hackage.haskell.org/package/bifunctors)
  to derive these typeclasses using Template Haskell.\r\n"
license-name: BSD-3-Clause
