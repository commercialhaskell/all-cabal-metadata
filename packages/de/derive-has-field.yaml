homepage: https://github.com/chiroptical/derive-has-field#readme
changelog-type: ''
hash: 93af354a452c57241e9b0dc4649a64090fd3b0a9d59e199cda598901f93550b5
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=2.10.10 && <2.11'
  derive-has-field: -any
  th-abstraction: '>0.4 && <0.7'
  template-haskell: '>=2.5 && <2.20'
maintainer: chiroptical@gmail.com
synopsis: Derive HasField instances with Template Haskell
changelog: ''
basic-deps:
  base: '>=4.7 && <5'
  th-abstraction: '>0.4 && <0.7'
  template-haskell: '>=2.5 && <2.20'
all-versions:
- 0.0.1.0
- 0.0.1.1
author: Barry Moore II
latest: 0.0.1.1
description-type: markdown
description: |
  Derive HasField instances
  ===

  The [`OverloadedRecordDot`][overloaded-record-dot] syntax is surprisingly nice.
  I really enjoy writing code with this extension and I was originally hesistant.

  [Persistent][persistent] has a really nice feature where it will automatically remove
  prefixes from models. Given a model like,

  ```
  BankAccount
    accountNumber String
  ```

  You would normally reference this field as `bankAccountAccountNumber`. However,
  with overloaded record dot you can write `bankAccount.accountNumber` which is
  much nicer.

  At work, I really wanted this for **every** record. With this library, I can
  write,

  ```haskell
  {-# LANGUAGE DataKinds #-}
  {-# LANGUAGE TemplateHaskell #-}

  import DeriveHasField

  data BankAccount =
    BankAccount
      { bankAccountAccountNumber :: String
      }

  deriveHasFieldWith (dropPrefix "bankAccount") ''BankAccount
  ```

  [overloaded-record-dot]: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/overloaded_record_dot.html
  [persistent]: https://github.com/yesodweb/persistent
license-name: MIT
