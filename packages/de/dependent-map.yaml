homepage: https://github.com/obsidiansystems/dependent-map
changelog-type: markdown
hash: 428be65dbb33ff63ea144b5f8b9f234dc0b0ab519d4f1b81b13a74ba334b1798
test-bench-deps: {}
maintainer: Obsidian Systems, LLC <maintainer@obsidian.systems>
synopsis: Dependent finite maps (partial dependent products)
changelog: |
  # Revision history for dependent-map

  ## 0.4.0.0 - 2020-03-26

  * Stop re-exporting `Some(..)`, `GCompare(..)`, and `GOrdering(..)` from `dependent-sum` (which itself re-exports from `some` in some versions).
  * Stop re-exporting `DSum(..)` from `dependent-sum`.

  ## 0.3.1.0 - 2020-03-26

  * Drop support for non-GHC compilers.
  * Drop support for GHC < 8.
  * Update maintainer and GitHub links.
  * Support `dependent-sum` 0.7.
  * Add `ffor`, `fforWithKey`, `forWithKey`, `forWithKey_`, and `traverseWithKey_` to `Data.Dependent.Map`.
  * Enable `PolyKinds` for `Data.Dependent.Map.Lens`.

  ## 0.3 - 2019-03-21

  * Change instances of Eq, Ord, Read, Show to use Has' from constraints-extras instead of *Tag classes.
  * This ends support for GHC 7.x.
basic-deps:
  dependent-sum: '>=0.6.1 && <0.8'
  constraints-extras: '>=0.2.3.0 && <0.5'
  base: '>=4.9 && <5'
  containers: '>=0.5.7.1 && <0.7'
all-versions:
- '0.1'
- 0.1.1
- 0.1.1.1
- 0.1.1.2
- 0.1.1.3
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
- 0.2.3.0
- 0.2.4.0
- '0.3'
- 0.3.1.0
- 0.4.0.0
author: James Cook <mokus@deepbondi.net>
latest: 0.4.0.0
description-type: markdown
description: |
  dependent-map [![Build Status](https://travis-ci.org/obsidiansystems/dependent-map.svg)](https://travis-ci.org/obsidiansystems/dependent-map) [![Hackage](https://img.shields.io/hackage/v/dependent-map.svg)](http://hackage.haskell.org/package/dependent-map)
  ==============

  This library defines a dependently-typed finite map type. It is derived from `Data.Map.Map` in the `containers` package, but rather than (conceptually) storing pairs indexed by the first component, it stores `DSum`s (from the `dependent-sum` package) indexed by tag. For example

  ```haskell
  {-# LANGUAGE FlexibleInstances #-}
  {-# LANGUAGE GADTs #-}
  {-# LANGUAGE MultiParamTypeClasses #-}
  {-# LANGUAGE TemplateHaskell #-}
  {-# LANGUAGE TypeFamilies #-}
  module Example where

  import Data.Constraint.Extras.TH (deriveArgDict)
  import Data.Dependent.Map (DMap, fromList, singleton, union, unionWithKey)
  import Data.Dependent.Sum ((==>))
  import Data.Functor.Identity (Identity(..))
  import Data.GADT.Compare.TH (deriveGCompare, deriveGEq)
  import Data.GADT.Show.TH (deriveGShow)

  data Tag a where
    StringKey :: Tag String
    IntKey    :: Tag Int
    DoubleKey :: Tag Double
  deriveGEq ''Tag
  deriveGCompare ''Tag
  deriveGShow ''Tag
  deriveArgDict ''Tag

  x :: DMap Tag Identity
  x = fromList [DoubleKey ==> pi, StringKey ==> "hello there"]

  y :: DMap Tag Identity
  y = singleton IntKey (Identity 42)

  z :: DMap Tag Identity
  z = y `union` fromList [DoubleKey ==> -1.1415926535897931]

  addFoo :: Tag v -> Identity v -> Identity v -> Identity v
  addFoo IntKey (Identity x) (Identity y) = Identity $ x + y
  addFoo DoubleKey (Identity x) (Identity y) = Identity $ x + y
  addFoo _ x _ = x

  main :: IO ()
  main = mapM_ print
    [ x, y, z
    , unionWithKey addFoo x z
    ]
  ```
license-name: LicenseRef-OtherLicense
