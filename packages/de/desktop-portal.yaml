homepage: https://github.com/Dretch/haskell-desktop-portal#readme
changelog-type: markdown
hash: 21fe93678fd7a9b1349f2e8fd01b200cb2a1c75ddc0d71993e9566bcab0a2c27
test-bench-deps:
  modern-uri: <0.4
  bytestring: <0.12
  unix: <2.8
  base: '>=4.7 && <5'
  data-default-class: <0.2
  hspec: '>=2 && <3'
  text: <2.1
  desktop-portal: -any
  process: <1.7
  network: <3.2
  containers: <0.7
  binary: <0.9
  dbus: '>=1.3.0 && <2'
  temporary: <1.4
  random: <1.3
  hspec-expectations: <0.9
  directory: <1.4
maintainer: garethdanielsmith@gmail.com
synopsis: Desktop Portal.
changelog: |-
  ## 0.4.0.0
  ### Removed
  - Remove `Desktop.Portal.Directories`. Use the directory package instead.

  ## 0.3.2.0
  ### Added
  - Add Camera Portal support.

  ## 0.3.1.0
  ### Added
  - Add Secret Portal support.

  ## 0.3.0.0
  ### Fixed
  - The OpenURI portal now supports OpenFile and OpenDirectory correctly. This uses the file descriptor support added with the Documents portal support.

  ## 0.2.2.0
  ### Added
  - Add Documents portal support.

  ## 0.2.1.0
  ### Added
  - Add OpenURI portal support.

  ## 0.2.0.0
  ### Changed
  - Functions now return FilePath instead of Text, where the value is always a file URI.

  ## 0.1.1.0
  ### Added
  - Add Settings portal support.

  ## 0.1.0.0
  ### Added
  - Make client connections explicit so they can be shared across requests and signal handlers.
  - Add Notification portal support.

  ## 0.0.1.0

  Initial release.
basic-deps:
  modern-uri: <0.4
  bytestring: <0.12
  unix: <2.8
  base: '>=4.7 && <5'
  data-default-class: <0.2
  text: <2.1
  network: <3.2
  containers: <0.7
  binary: <0.9
  dbus: '>=1.3.0 && <2'
  random: <1.3
  directory: <1.4
all-versions:
- 0.0.1.0
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.4.0.0
author: ''
latest: 0.4.0.0
description-type: markdown
description: |-
  # Haskell Desktop Portal

  A Haskell wrapper for the [XDG Desktop Portal](https://github.com/flatpak/xdg-desktop-portal) DBUS API. Like [libportal](https://github.com/flatpak/libportal), but written in Haskell. Primarily intended to support applications packaged as Flatpaks (see [monomer-flatpak-example](https://github.com/Dretch/monomer-flatpak-example)).

  ## Current Status
  - Unstable. Functionality and API may change considerably.

  ## FAQs
  - **Q. Why does this not use Template Haskell to generate interface code from the [XML API definitions](https://github.com/flatpak/xdg-desktop-portal/data)**?
  - **A.** The Portal API does not lend itself to code generation because inputs and outputs are mostly informally defined via vardicts rather than via simple positional parameters. Also the XML definitions are LGPL, which would make this library LGPL too.

  ## API Documentation

  See the generated docs on [Hackage](https://hackage.haskell.org/package/desktop-portal).

  ## Example Code

  The [monomer-flatpak-example](https://github.com/Dretch/monomer-flatpak-example) app includes example code for many of the APIs.

  ## Development Guide

  ### How to contribute
  - If you just want to add a wrapper for an API method that is not currently supported, open a PR.
  - If you want something less straightforward, open an issue to discuss it.

  ### General Guidelines
  - Module/function/field names should mimic the underlying portal API as much as possible.
  - Functions should generally be tested (see existing tests for examples).
  - API methods that take or return a variable set of values via a vardict should be translated into Haskell functions that take records called `...Options` and return records called `...Results`.
  - `...Options` records should have a `Default` instance where all fields have a reasonable empty value.
  - Record fields should not have unique prefixes.
  - API methods that return URIs that are known to always be `file:` URIs should be wrapped with functions returning [`Prelude.FilePath`](https://hackage.haskell.org/package/base-4.18.0.0/docs/Prelude.html#t:FilePath) (at some point this can be replaced with [`System.OsPath`](https://hackage.haskell.org/package/filepath-1.4.100.3/docs/System-OsPath.html#t:OsPath)). If they are not known to be file URIs, then [`Text.URI.URI`](https://hackage.haskell.org/package/modern-uri-0.3.6.0/docs/Text-URI.html#t:URI) should be returned.

  ### To format the source code
  ```bash
  # Should use Ormolu 0.7.1.0
  ormolu --mode inplace $(find . -name '*.hs')
  ```
license-name: MIT
