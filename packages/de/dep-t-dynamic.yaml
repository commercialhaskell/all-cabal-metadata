homepage: ''
changelog-type: markdown
hash: 0d9d30d5b148578c5f91b30fed9741db8e3b0829527a6cf543df247048bded06
test-bench-deps:
  bytestring: -any
  sop-core: '>=0.5.0.0 && <0.6'
  base: '>=4.10.0.0 && <5'
  unordered-containers: '>=0.2.14'
  text: -any
  dep-t-dynamic: -any
  doctest: ^>=0.20
  containers: -any
  unliftio-core: '>=0.2.0.0'
  mtl: '>=2.2'
  hashable: '>=1.0.1.1'
  tasty-hunit: '>=0.10.0.2'
  dep-t: '>=0.6.4.0 && <0.7'
  transformers: '>=0.5.0.0'
  tasty: '>=1.3.1'
  algebraic-graphs: ==0.6.*
  microlens: '>=0.4.12.0'
  aeson: ==2.0.*
  template-haskell: -any
  dep-t-advice: -any
maintainer: diaz_carrete@yahoo.com
synopsis: A dynamic environment for dependency injection.
changelog: |
  # Revision history for dep-t-dynamic

  ## 0.1.1.0

  * Small tweak for compatibility with the "extra Typeable constraint" change in
    dep-t 0.6.4.0.

  ## 0.1.0.2

  * `fromBare` and `toBare` moved to dep-t and re-exported from there.

  ## 0.1.0.1

  * Works with algebraic-graphs 0.6.
basic-deps:
  sop-core: ^>=0.5.0.0
  base: '>=4.10.0.0 && <5'
  unordered-containers: '>=0.2.14'
  hashable: '>=1.0.1.1'
  dep-t: '>=0.6.4.0 && <0.7'
  transformers: '>=0.5.0.0'
  algebraic-graphs: ^>=0.6
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
author: Daniel Diaz
latest: 0.1.1.0
description-type: markdown
description: "# dep-t-dynamic\n\nThis library is a compation to [dep-t](https://hackage.haskell.org/package/dep-t)
  and in particular it complements the [`Dep.Env`](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Dep-Env.html)
  module. It provides various types of dependency injection environments that are
  dynamically typed to some degree: missing dependencies are not detected at compilation
  time. Static checks are sacrificed for advantages like faster compilation.\n\n[![dep-t-dynamic.png](https://i.postimg.cc/DyP2zxcf/dep-t-dynamic.png)](https://postimg.cc/9rz38tSs)\n\n-
  **Dep.Dynamic** is the simplest dynamic environment, but it doesn't give many guarantees.\n-
  **Dep.Checked** and **Dep.SimpleChecked** give greater guarantees at the cost of
  more ceremony and explicitness. **Dep.Checked** can only be used with the [`DepT`](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Control-Monad-Dep.html)
  monad.\n\n## Rationale\n\nIn [dep-t](https://hackage.haskell.org/package/dep-t),
  functions list their dependences on \"injectable\" components by means of [`Has`](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Dep-Has.html)
  constraints. One step when creating your application is defining a big environment
  record whose fields are the components, and giving it suitable `Has` instances.\n\nEnvironments
  often have [two type parameters](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Dep-Env.html#g:6):
  \n\n- One is an `Applicative` \"phase\" that wraps each field and describes how
  far along we are in the process of constructing the environment (the `Identity`
  function correspond to a \"finished\" environment, ready to be used).\n- The other
  is the effect monad which parameterizes each component in the environment.\n\nUsually
  environments will be vanilla Haskell records. It has the advantage that \"missing\"
  dependencies are caught at compile-time. But using records might be undesirable
  is some cases:\n\n- For environments with a big number of components, compiling
  the environment type might be slow.\n- Defining the required `Has` instances for
  the environment might be a chore, even with the helpers from [`Dep.Env`](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Dep-Env.html#g:2).
  \ \n\n### How `Dep.Dynamic` helps\n\n`DynamicEnv` from `Dep.Dynamic` allows registering
  any component at runtime.\nBecause there aren't static fields to check, compilation
  is faster.\n\n`DynamicEnv` also has a [`Has`](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Dep-Has.html#t:Has)
  instance for *any* component! However, if the component hasn't been previously registered,
  [`dep`](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Dep-Has.html#v:dep)
  will throw an exception.\n\n\n### Isn't that a wee bit too unsafe?\n\nYeah, pretty
  much. It means that you can forget to add some seldomly-used\ndependency and then
  have an exception pop up at an inconvenient time when that\ndependency is first
  exercised.\n\nThat's where `Dep.Checked` and `Dep.SimpleChecked` may help.\n\n###
  How can the `-Checked` modules help?\n\nThey define wrappers around `DynamicEnv`
  that require you to list each component's dependencies as you add them to the environment.
  Then, before putting the environment to use, they let you check at runtime that
  the dependencies for all components are present in the environment.\n\nIt's more
  verbose and explicit, but safer. It makes easy to check in a unit test that the
  environment has been set up correctly.\n\nAs a side benefit, the `-Checked` modules
  give you the graph of dependencies as a value that you can analyze and [export](https://hackage.haskell.org/package/algebraic-graphs-0.5/docs/Algebra-Graph-Export-Dot.html)
  as a [DOT](https://en.wikipedia.org/wiki/DOT_(graph_description_language)) file.\n\n`Dep.Checked`
  can only be used when your dependencies live in the `DepT` monad. Use `Dep.SimpleChecked`
  otherwise.\n\n## Relationship with the \"registry\" package\n\nThis library is heavily
  inspired in the [registry](https://hackage.haskell.org/package/registry) package,
  which provides a `Typeable`-based method for performing dependency injection.\n\nThis
  library is more restrictive and less ergonomic in some aspects, but it fits better
  with how [dep-t](https://hackage.haskell.org/package/dep-t) works. \n\nSome notable
  differences with **registry**:\n\n- `Dep.Dynamic` only reports missing dependencies
  when the program logic first searches for them, while **registry** reports them
  when calling `withRegistry`.\n- `Dep.Checked` and `Dep.SimpleChecked` do allow you
  to find missing dependencies before running the program logic, but they force you
  to explicitly list the dependencies of each new component you add to the environment,
  something that **registry** doesn't require.\n- Unlike in **registry**, there are
  no specific [warmup](https://hackage.haskell.org/package/registry-0.2.1.0/docs/Data-Registry-Warmup.html#v:warmupOf)
  combinators. Allocating the resources required by a component must be done in an
  [`Applicative`](https://hackage.haskell.org/package/managed) \"phase\" of a [`Phased`](https://hackage.haskell.org/package/dep-t-0.6.0.0/docs/Dep-Env.html#t:Phased)
  environment. \n"
license-name: BSD-3-Clause
