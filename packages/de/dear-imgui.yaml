homepage: ''
changelog-type: markdown
hash: e6f84ef5f44f101649697273c9140290556392b64c03bfdd24436eb1b81adcd3
test-bench-deps: {}
maintainer: ollie@ocharles.org.uk, aenor.realm@gmail.com
synopsis: Haskell bindings for Dear ImGui.
changelog: |
  # Changelog for dear-imgui

  ## [2.1.0]

  - `imgui` updated to [1.88].
      * Breaking: `ImGuiKeyModFlags` renamed to `ImGuiModFlags`.

  ## [2.0.0]

  - `String` arguments replaced with `Text`.
    * Upgrading to `text-2` recommended to reap the UTF-8 benefits.

  ## [1.5.0]

  - Added table wrappers.
  - Added popup wrappers.
  - Added `selectableWith`/`SelectableOptions` to expose optional arguments.
  - Fix GHC-9.2 compatibility.

  ## [1.4.0]

  - `imgui` updated to [1.87].
  - Added `DearImGui.Vulkan.vulkanAddTexture`.
  - Added `DearImGui.GLFW.glfwCursorPosCallback`.
    * Apps that don't install backend callbacks, *must* call it themselves.
  - Added flags `use-wchar32` (default on) and `disable-obsolete` (default off).

  ## [1.3.1]

  - `imgui` updated to [1.86].

  ## [1.3.0]

  - Added `DearImGui.FontAtlas` and related `DearImGui.Raw.Font.*` bits.
  - Removed old font atlas functions from `DearImGui` and `DearImGui.Raw`.

  ## [1.2.2]

  - `imgui` updated to [1.85].

  ## [1.2.1]

  - Added `DearImGui.Raw.DrawList` for drawing primitives.
  - Added `DearImGui.Raw.IO` with attribute setters.
  - Added `DearImGui.Raw.ListClipper` for efficient list viewports.

  ## [1.2.0]

  - Fixed `nullPtr` in place of default arguments.
  - Added functions for getting window position and size.
  - Added `invisibleButton`.
  - Added `inputTextMultiline` and `inputTextWithHint`.
  - Changed `beginChild` and related `withChild*` to use full arguments.
  - Added `withChildContext` to run actions inside other child window.
  - Added `getCurrentContext`, `setCurrentContext`.
  - Added `image` and `imageButton`.
  - Added font atlas utilities.

  ## [1.1.0]

  - `imgui` updated to [1.84.2].
  - Removed unused Window argument from SDL `newFrame` to match 1.84.
  - Added GLFW backend callbacks.
  - Added more withXXX wrappers.

  ## [1.0.2]

  - Added `withID` and `ToID(..)` to make composable components possible.

  ## [1.0.1]

  - Fixed missing headers in source dist.

  ## [1.0.0]

  Initial Hackage release based on [1.83].

  [1.0.0]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.0.0
  [1.0.1]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.0.1
  [1.0.2]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.0.2
  [1.1.0]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.1.0
  [1.2.0]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.2.0
  [1.2.1]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.2.1
  [1.2.2]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.2.2
  [1.3.0]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.3.0
  [1.3.1]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.3.1
  [1.4.0]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.4.0
  [1.5.0]: https://github.com/haskell-game/dear-imgui.hs/tree/v1.5.0
  [2.0.0]: https://github.com/haskell-game/dear-imgui.hs/tree/v2.0.0

  [1.87]: https://github.com/ocornut/imgui/releases/tag/v1.87
  [1.86]: https://github.com/ocornut/imgui/releases/tag/v1.86
  [1.85]: https://github.com/ocornut/imgui/releases/tag/v1.85
  [1.84.2]: https://github.com/ocornut/imgui/releases/tag/v1.84.2
  [1.83]: https://github.com/ocornut/imgui/releases/tag/v1.83
basic-deps:
  inline-c: -any
  unliftio: -any
  base: '>=4.12 && <4.17'
  managed: -any
  text: -any
  dear-imgui: -any
  inline-c-cpp: -any
  sdl2: -any
  containers: -any
  StateVar: -any
  gl: -any
  dear-imgui-generator: -any
  vector: -any
all-versions:
- 1.0.1
- 1.0.2
- 1.1.0
- 1.2.0
- 1.2.1
- 1.2.2
- 1.3.0
- 1.3.1
- 1.4.0
- 1.5.0
- 2.0.0
- 2.1.0
author: Oliver Charles
latest: 2.1.0
description-type: markdown
description: |
  # Dear ImGui.hs

  > Dear ImGui is a **bloat-free graphical user interface library for C++**. It
  > outputs optimized vertex buffers that you can render anytime in your
  > 3D-pipeline enabled application. It is fast, portable, renderer agnostic and
  > self-contained (no external dependencies).

  This project contains Haskell bindings to the
  [ImGui](https://github.com/ocornut/imgui) project. This allows you to rapidly
  put together graphical user interfaces in Haskell, with a particular focus to
  games and graphics intensive applications.

  # Getting Started

  To get started, we'll build the following:

  ![](./Example.png)

  `dear-imgui.hs` can be used like a normal Haskell library. If you use Cabal,
  simply add `dear-imgui` to your `build-depends`. ImGui supports a variety of
  backends, and you will need to choose your backend at configuration time.
  Backends can be enabled using Cabal flags, and these can be set through the
  `cabal.project` file. For example, if you want to use a combination of SDL and
  OpenGL:

  ```
  package dear-imgui
    flags: +sdl +opengl3
  ```

  With this done, the following module is the "Hello, World!" of ImGui:

  ``` haskell
  {-# language BlockArguments #-}
  {-# language LambdaCase #-}
  {-# language OverloadedStrings #-}

  module Main ( main ) where

  import Control.Exception
  import Control.Monad.IO.Class
  import Control.Monad.Managed
  import DearImGui
  import DearImGui.OpenGL2
  import DearImGui.SDL
  import DearImGui.SDL.OpenGL
  import Graphics.GL
  import SDL

  main :: IO ()
  main = do
    -- Initialize SDL
    initializeAll

    runManaged do
      -- Create a window using SDL. As we're using OpenGL, we need to enable OpenGL too.
      window <- do
        let title = "Hello, Dear ImGui!"
        let config = defaultWindow { windowGraphicsContext = OpenGLContext defaultOpenGL }
        managed $ bracket (createWindow title config) destroyWindow

      -- Create an OpenGL context
      glContext <- managed $ bracket (glCreateContext window) glDeleteContext

      -- Create an ImGui context
      _ <- managed $ bracket createContext destroyContext

      -- Initialize ImGui's SDL2 backend
      _ <- managed_ $ bracket_ (sdl2InitForOpenGL window glContext) sdl2Shutdown

      -- Initialize ImGui's OpenGL backend
      _ <- managed_ $ bracket_ openGL2Init openGL2Shutdown

      liftIO $ mainLoop window


  mainLoop :: Window -> IO ()
  mainLoop window = unlessQuit do
    -- Tell ImGui we're starting a new frame
    openGL2NewFrame
    sdl2NewFrame
    newFrame

    -- Build the GUI
    withWindowOpen "Hello, ImGui!" do
      -- Add a text widget
      text "Hello, ImGui!"

      -- Add a button widget, and call 'putStrLn' when it's clicked
      button "Clickety Click" >>= \case
        False -> return ()
        True  -> putStrLn "Ow!"

    -- Show the ImGui demo window
    showDemoWindow

    -- Render
    glClear GL_COLOR_BUFFER_BIT

    render
    openGL2RenderDrawData =<< getDrawData

    glSwapWindow window

    mainLoop window

    where
      -- Process the event loop
      unlessQuit action = do
        shouldQuit <- checkEvents
        if shouldQuit then pure () else action

      checkEvents = do
        pollEventWithImGui >>= \case
          Nothing ->
            return False
          Just event ->
            (isQuit event ||) <$> checkEvents

      isQuit event =
        SDL.eventPayload event == SDL.QuitEvent
  ```

  # Hacking

  If you would like to help `dear-imgui`, here's how you can get started.

  The best path to development is using
  [Nix](https://nixos.org/guides/install-nix.html). Once you have Nix installed
  (either in your operating system, or by running NixOS), you can enter a
  development shell:

  ```
  $ nix-shell
  ```

  You should now be in a `bash` shell where you can run `cabal build all`,
  `cabal run readme`, etc.

  If you experience any difficulties, please don't hesistate to raise an issue.

  # Getting Help

  Feel free to raise bugs, questions and feature requests on the GitHub issue
  tracker.

  We have a Matrix room at
  [`#dear-imgui.hs:ocharles.org.uk`](https://matrix.to/#/#dear-imgui.hs:ocharles.org.uk).
license-name: BSD-3-Clause
