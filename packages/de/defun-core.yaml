homepage: ''
changelog-type: markdown
hash: 5c5a7e5978f5c51ac5cb590ba5775dc4566321f9b1d68bc9d0fca220dc247bfb
test-bench-deps: {}
maintainer: Oleg Grenrus <oleg.grenrus@iki.fi>
synopsis: 'Defunctionalization helpers: core definitions'
changelog: |
  ## 0.1

  * First version. Released on an unsuspecting world.
basic-deps:
  base: ^>=4.16.3.0 || ^>=4.17.2.0 || ^>=4.18.0.0 || ^>=4.19.0.0
all-versions:
- '0.1'
author: Oleg Grenrus <oleg.grenrus@iki.fi>
latest: '0.1'
description-type: haddock
description: |-
  The package @defun@ provides defunctionalization helpers, most importantly
  type family 'DeFun.Core.App' allowing to write higher-order type families.
  The @singletons@ package also has its own type family @Apply@,
  but the machinery is tied to the @Sing@ / singletons.

  In particular, the @Lam@ counterpart @SLambda@ is specialized to @Sing@ arguments.
  The @defun@'s @Lam@ is however fully general, so you can use your own singletons
  or (importantly) singleton-like arguments.

  The package provides few defunctionalized functions, and their term-level
  variants can be found in @defun-bool@ and @defun-sop@ packages,
  which use @SBool@ and @NP@ data types from @singletons-bool@ and @sop-core@
  packages respectively.
license-name: BSD-3-Clause
