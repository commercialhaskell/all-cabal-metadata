all-versions:
- 0.1.0
- 0.2.0
author: ncaq
basic-deps:
  base: '>=4.7 && <5'
  template-haskell: '>=0'
  unicode-show: '>=0'
changelog: |
  # Changelog for debug-trace-var

  ## Unreleased changes

  ## 0.2.0

  * added: traceMTH, see [Add function to trace without QuasiQuote by igrep · Pull Request #2 · ncaq/debug-trace-var](https://github.com/ncaq/debug-trace-var/pull/2)

  ## 0.1.0

  * added: first release
changelog-type: markdown
description: |
  [![Hackage](https://img.shields.io/hackage/v/debug-trace-var.svg)](https://hackage.haskell.org/package/debug-trace-var)
  [![Stackage LTS](http://stackage.org/package/debug-trace-var/badge/lts)](http://stackage.org/lts/package/debug-trace-var)

  # debug-trace-var

  When writing print debug, we often write.

  ~~~hs
  import           Debug.Trace

  main :: IO ()
  main = do
    let a = 1
    traceIO $ "a = " ++ show a
  ~~~

  This is troublesome to describe the name of the variable twice.

  With debug-trace-var you write variables only once.

  ~~~hs
  {-# LANGUAGE QuasiQuotes #-}
  import           Debug.Trace.Var

  main :: IO ()
  main = do
    let a = 1
    [traceVarIO|a|]
  ~~~

  or

  ~~~hs
  {-# LANGUAGE TemplateHaskell #-}
  import           Debug.Trace.Var

  main :: IO ()
  main = let a = 1 :: Int
         in $(traceMTH 'a)
  ~~~

  You may avoid name quotes that are confusing with character literals,
  Or often it may be to avoid the QuasiQuotes to destroy the syntax highlight of the text editor.

  # Example

  ~~~hs
  {-# LANGUAGE QuasiQuotes     #-}
  {-# LANGUAGE TemplateHaskell #-}

  import           Debug.Trace.Var

  -- > a
  -- n = 1
  -- s = "あ"
  a :: IO ()
  a = let n = 1
          s = "あ"
      in [traceVar|n|] ([traceVar|s|] return ())

  -- > b
  -- "n = 1
  -- n = 1"
  b :: String
  b = let n = 1
      in [traceVarId|n|]

  -- > c
  -- n = 344
  c :: IO ()
  c = let n = 344
      in [traceStackVar|n|] (return ())

  -- > d
  -- n = 344
  -- n = 344
  d :: IO ()
  d = do
    let n = 344
    [traceVarIO|n|]
    [traceVarIO|n|]

  -- > e
  -- n = 344
  e :: IO ()
  e = do
    let n = 344
    [traceVarM|n|]

  -- > f
  -- n = 344
  f :: IO ()
  f = let n = 344
      in $(traceMTH 'n)
  ~~~

  # Motivation

  I wanted to use Template Haskell.

  # One point advice

  You can use [ndmitchell/debug: Haskell library for debugging](https://github.com/ndmitchell/debug)
description-type: markdown
hash: 75a00bbb82b674ba75e7c75004bd921839666dbb587e5dda6a977f861dedf45f
homepage: https://github.com/ncaq/debug-trace-var#readme
latest: 0.2.0
license-name: MIT
maintainer: ncaq@ncaq.net
synopsis: You do not have to write variable names twice in Debug.Trace
test-bench-deps: {}
