homepage: http://github.com/jtobin/declarative
changelog-type: ''
hash: 55d6051a521d21c77e65f8905cfab3866f4f0fe8f2fa3cd41ebd9a6a7142582b
test-bench-deps:
  declarative: -any
  base: '>=4 && <6'
  mwc-probability: '>=2.0 && <3'
maintainer: jared@jtobin.ca
synopsis: DIY Markov Chains.
changelog: ''
basic-deps:
  base: '>=4 && <6'
  hasty-hamiltonian: '>=1.3 && <2'
  kan-extensions: '>=5 && <6'
  mcmc-types: '>=1.0.1 && <2'
  lens: '>=4 && <6'
  pipes: '>=4 && <5'
  transformers: '>=0.5 && <1.0'
  mighty-metropolis: '>=2.0 && <3'
  speedy-slice: '>=0.1.5 && <1'
  mwc-probability: '>=2.0 && <3'
  primitive: '>=0.6 && <1.0'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.2.1
- 0.2.2
- 0.2.3
- 0.3.3
- 0.3.4
- 0.4.0
- 0.5.0
- 0.5.1
- 0.5.2
- 0.5.3
- 0.5.4
author: Jared Tobin
latest: 0.5.4
description-type: haddock
description: |-
  This package presents a simple combinator language for Markov transition
  operators that are useful in MCMC.

  Any transition operators sharing the same stationary distribution and obeying
  the Markov and reversibility properties can be combined in a couple of ways,
  such that the resulting operator preserves the stationary distribution and
  desirable properties amenable for MCMC.

  We can deterministically concatenate operators end-to-end, or sample from
  a collection of them according to some probability distribution.  See
  <http://www.stat.umn.edu/geyer/f05/8931/n1998.pdf Geyer, 2005> for details.

  A useful strategy is to hedge one's 'sampling risk' by occasionally
  interleaving a computationally-expensive transition (such as a gradient-based
  algorithm like Hamiltonian Monte Carlo or NUTS) with cheap Metropolis
  transitions.

  > transition = frequency [
  >     (9, metropolis 1.0)
  >   , (1, hamiltonian 0.05 20)
  >   ]

  Alternatively: sample consecutively using the same algorithm, but over a
  range of different proposal distributions.

  > transition = concatAllT [
  >     slice 0.5
  >   , slice 1.0
  >   , slice 2.0
  >   ]

  Or just mix and match and see what happens!

  > transition =
  >   sampleT
  >     (sampleT (metropolis 0.5) (slice 0.1))
  >     (sampleT (hamiltonian 0.01 20) (metropolis 2.0))

  Check the test suite for example usage.
license-name: MIT
