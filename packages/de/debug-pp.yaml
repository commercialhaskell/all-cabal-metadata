all-versions:
- 0.1.0.0
- 0.1.1
author: Pepe Iborra
basic-deps:
  aeson: '>=0'
  base: '>=4.7 && <5'
  debug-hoed: '>=0'
  directory: '>=0'
  filepath: '>=0'
  yaml: '>=0'
changelog: ''
changelog-type: ''
description: "[![Travis Build Status](https://travis-ci.org/pepeiborra/debug-pp.svg)](https://travis-ci.org/pepeiborra/debug-pp)\n[![Hackage](https://img.shields.io/hackage/v/debug-pp.svg)](https://hackage.haskell.org/package/debug-pp)\n[![Stackage
  Nightly](http://stackage.org/package/debug-pp/badge/nightly)](http://stackage.org/nightly/package/debug-pp)\n#
  debug-pp\n\nA preprocessor for streamlining the `debug` instrumentation of a module
  or a package.\n\nDescription\n---------------\n\n`debug-pp` is a Haskell source
  preprocessor that performs the steps a programmer would need to follow in order
  to debug a module with the [`debug`](http://hackage.haskell.org/package/debug) package.
  That is:\n* append an import for the `Debug` module, and \n* wrap the body in a
  `debug` splice using a TH declaration quasiquote. \n\nUsage\n--------\n```\nusage:
  debug-pp [FILENAME] [SOURCE] [DEST]\nInstrument Haskell module for debugging from
  SOURCE (derived from FILENAME) and write\nstandard Haskell to DEST.\nIf no FILENAME,
  use SOURCE as the original name.\nIf no DEST or if DEST is `-', write to standard
  output.\nIf no SOURCE or if SOURCE is `-', read standard input.\n```\nTo instrument
  a module, add the following pragma to the top of the file:\n```\n{-# OPTIONS -F
  -pgmF debug-pp #-}\n```\n\nTo instrument an entire program, add the following line
  to your stack descriptor, or if you don't use stack, to your cabal descriptor:\n```\nghc-options:
  -F -pgmF debug-pp\n```\n\nIn both cases you will also need to modify your Cabal
  descriptor in order to:\n* add a dependency on the `debug` package, and\n* add a
  build tool depends on `debug-pp` (required Cabal 2.0) :\n```\nLibrary\n  ...\n  build-tool-depends:
  debug-pp:debug-pp\n```\nConfiguration\n-------------\n\nThe tool is customizable
  to some extent. It tries to find a config file in the\nfollowing order:\n\n2. `.debug-pp.yaml`
  in the current directory (useful for per-directory\n   settings)\n3. `.debug-pp.yaml`
  in the nearest ancestor directory (useful for\n   per-project settings)\n4. `debug-pp/config.yaml`
  in the platformâ€™s configuration directory\n   (on Windows, it is %APPDATA%, elsewhere
  it defaults to `~/.config` and\n   can be overridden by the `XDG_CONFIG_HOME` environment
  variable;\n   useful for user-wide settings)\n5. `.debug-pp.yaml` in your home directory
  (useful for user-wide\n   settings)\n6. The default settings.\n\nUse `debug-pp --defaults
  > .debug-pp.yaml` to dump a\nwell-documented default configuration to a file, this
  way you can get started\nquickly.\n\nThe configuration options include:\n* Exclude
  modules by name.\n* Instrument the `main` function to launch a web browser upon
  completion.\n* Select which language extensions are included automatically.\n* Configure
  the `debug-hoed` instrumentation to include e.g. deriving `Generic` and `Observable`
  instances\n\n\nMotivation\n-------------\n\n* Debugging individual functions is
  often impractical due to the declaration groups [restriction](http://ghc.readthedocs.io/en/8.0.1/glasgow_exts.html#ghc-flag--XTemplateHaskellQuotes)
  of Template Haskell. Therefore, it's often easier to debug an entire module.\n\n*
  However, error messages are much worse for TH quoted code. Errors like `Not in scope:
  data constructor Foo in line X` become `Not in scope: Foo, in the TH quotation ENTIRE
  MODULE HERE`. \n\n* Personally, quoting/unquoting the module by hand is annoying.
  Having a preprocessor do this for me is convenient, and can be easily tied to a
  Cabal flag or a stack command line arg.\n"
description-type: markdown
hash: e8e8ca331b4bb05b211e72e5fa07592623506b1b96957d712ae435b3460a90d3
homepage: https://github.com/pepeiborra/debug-hoed-pp#readme
latest: 0.1.1
license-name: BSD-3-Clause
maintainer: pepeiborra@gmail.com
synopsis: A preprocessor for the debug package
test-bench-deps: {}
