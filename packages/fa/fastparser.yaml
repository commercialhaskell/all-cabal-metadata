homepage: https://github.com/bartavelle/fastparser#readme
changelog-type: markdown
hash: 03b12cd40a2b20a51b3ea2b6f9e62f6b3bd2c6f997aedd5e5fc00205c8b5a70e
test-bench-deps:
  fastparser: -any
  bytestring: -any
  base: '>=4.13 && <5'
maintainer: bartavelle@gmail.com
synopsis: A fast, but bare bones, bytestring parser combinators library.
changelog: "v0.4.0\n\n  * Major bump because of embarrassing bug in `anyWord8` type
  signature ...\n\nv0.3.2\n\n  * New functions: `dropN`, `anyWord8`, `word8`.\n \nv0.3.1.2\n\n
  \ * Push bounds for the container package\n\nv0.3.1.1\n\n  * Merged [Typetetris](https://github.com/typetetris)
  PR, making the package compatible with GHC 8.4+\n\nv0.3.1\n\n * Added the satisfy
  function\n\nv0.3.0.1\n\n * Parser is now wrapped in Codensity, as the performance
  impact is minimal\n * Prototype benchmark suite\n\nv0.2.0\n\n * Dropped the lens
  dependency, for microlens\n"
basic-deps:
  bytestring: -any
  base: '>=4.13 && <5'
  vector-space: '>=0.10 && <1'
  kan-extensions: ==5.*
  containers: '>=0.5 && <0.7'
  thyme: '>=0.4 && <0.5'
  transformers: '>=0.4'
  bytestring-lexing: ==0.5.*
  microlens: ==0.4.*
all-versions:
- 0.3.0
- 0.3.0.1
- 0.3.1
- 0.3.1.1
- 0.3.1.2
- 0.3.2
- 0.4.0
- 0.5.0
- 0.6.0
author: Simon Marechal
latest: 0.6.0
description-type: markdown
description: |
  [![Build Status](https://travis-ci.org/bartavelle/fastparser.svg?branch=master)](https://travis-ci.org/bartavelle/fastparser)


  A very simple, backtracking, fast parser combinator library.

  It is measurably faster than [attoparsec](https://hackage.haskell.org/package/attoparsec) (36% in [this use case](https://hbtvl.banquise.net/posts/2015-12-14-fastParsing03.html)), but only works on strict `ByteString`, lacks many helper functions, and is not resumable.
  It also should consume a tiny bit less memory for equivalent operations.

  # When NOT to use fastparser

   * When performance is not the **most** pressing concern.
   * When you need to parse anything else but strict `ByteString`.
   * When you need to use a battle-tested library. While very simple, and in constant use by me, this package is still quite experimental.
   * When you need to parse large inputs that are not easily cut into many smaller pieces that can be parsed independently.

  # How to use fastparser

  `fastparser` works well with small pieces, such as individual log file lines. It is recommended to use it with a coroutine library (such as [conduit](http://hackage.haskell.org/package/conduit) or [pipe](http://hackage.haskell.org/package/pipes)), so that the input could be incrementaly consumed, cut into individual records, all of which would end up parsed independently.

  One such setup, with the `conduit` ecosystem, would look like:

      sourceFile "/tmp/foo" .| Data.Conduit.Binary.lines .| CL.map (parseOnly parser) .| ...

  Other than that, `fastparser` is fairly close to any other parser combinators library.
license-name: BSD-3-Clause
