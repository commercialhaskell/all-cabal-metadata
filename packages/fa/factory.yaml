homepage: https://functionalley.com/Factory/factory.html
changelog-type: markdown
hash: 4f560042e1c1be48f2d23fcef66b05379cc5cf9429900c796c0f6e8b7c8be03b
test-bench-deps:
  factory: -any
  toolshed: '>=0.17'
  base: '>=4.3 && <5'
  primes: '>=0.1'
  data-default: -any
  array: -any
  containers: -any
  random: -any
  deepseq: '>=1.1'
  QuickCheck: '>=2.2'
maintainer: mailto:factory@functionalley.com
synopsis: Rational arithmetic in an irrational world.
changelog: "# 2011-03-01 Dr. Alistair Ward <factory@functionalley.com>\n\n## 0.0.0.1\n*
  First version of the package.\n\n## 0.0.0.2\n* Created the modules; \"**Factory.Test.QuickCheck.Bounds**\",
  \"**Factory.Math.Implementations.Pi.Borwein**\" & \"**Factory.Test.Performance.Statistics**\".\n*
  Created a new module \"**Factory.Data.PrimeFactors**\", and migrated definitions
  from modules \"**Factory.Math.PrimeFactorisation**\" & \"**Factory.Math.Implementations.PrimeFactorisation**\".\n*
  Created the class `Factory.Math.Factorial.Factorial` and a new module \"**Factory.Math.Implementations.Factorial**\".\n*
  Moved existing implementation (`Bisection`) into the new module, with a new implementation
  (`PrimeFactorisation`).\n* Added the function `Factory.Math.Summation.sumR`.\n*
  Added a parameter to the functions `Factory.Math.DivideAndConquer.divideAndConquer`
  and `Factory.Data.Bounds.divideAndConquer`, to permit asymmetric bisection.\n* Added
  methods to class `Factory.Math.Pi.Algorithm` to permit the retrieval of *Pi* as
  a `Rational` or a `String`.\n* Renamed the function `Factory.Math.Precision.capPrecision`
  to `Factory.Math.Precision.simplify`.\n* Removed the module \"**Factory.Test.Performance.Exponential**\".\n*
  Removed the function `Factory.Math.Power.raise`, which was no more efficient than
  ghc's implementation of `(^)`.\n* Uploaded to [Hackage](https://hackage.haskell.org/package/factory).\n\n##
  0.1.0.0\n* Amended the *.cabal*-file to more correctly specify the dependency on
  package \"**toolshed**\".\n* Added the module \"**Factory.Math.Probability**\".\n*
  Renamed the module \"**Factory.Data.Bounds**\" to \"**Factory.Data.Interval**\",\nand
  added the functions; `Factory.Data.Interval.precisely`, `Factory.Data.Interval.shift`,
  `Factory.Data.Interval.closedUnitInterval`.\n* Guarded flag \"**eager-blackholing**\"
  in the *cabal*-file.\n\n## 0.1.0.1\n* Renamed classes **Factory.Math.[Primality,
  Pi, Factorial, SquareRoot, PrimeFactorisation].Algorithm** to **Factory.Math.[Primality,
  Pi, Factorial, SquareRoot, PrimeFactorisation].Algorithmic**, to distinguish them
  from the data-types which implement them.\n* Added the modules;\n\t+ \"**Factory.Math.Hyperoperation**\",\n\t+
  \"**Factory.Test.QuickCheck.Hyperoperation**\",\n\t+ \"**Factory.Test.Performance.Hyperoperation**\".\n*
  Added the modules\n\t+ \"**Factory.Math.Primes**\",\n\t+ \"**Factory.Math.Implementation.Primes**\",\n\t+
  \"**Factory.Test.Performance.Primes**\",\n\t+ \"**Factory.Test.QuickCheck.Primes**\"\n\t+
  \"**Factory.Data.PrimeWheel**\".\n* Added the function `Factory.Math.PrimeFactorisation.squareFree`.\n*
  Added rewrite-rules to specialise `Factory.Math.Power.isPerfectPower` for type-parameter=`Int`.\n*
  Recoded module \"**Factory.Math.Radix**\" to the interface `Data.Array.IArray.IArray`,
  rather than the data-type `Data.Array.Array`.\n\n## 0.1.0.2\n* Added `Factory.Math.Primes.primorial`.\n*
  Altered `Factory.Math.Implementations.Primes.trialDivision` to take an integer defining
  the size of a `Factory.Data.PrimeWheel`, from which candidates are extracted.\n*
  Removed the command-line option `primesPerformanceGraph`, which appears to memoise
  data from previous tests.\n* Uploaded to [Hackage](https://hackage.haskell.org/packages/hackage.html).\n\n##
  0.1.0.3\n* Qualified `Factory.Math.Implementations.Primes.trialDivision` with pragma
  \"**NOINLINE**\", to block optimization which conflicts with rewrite-rule for `Factory.Math.Implementations.Primes.sieveOfEratosthenes`
  !\n* Re-coded `Factory.Data.PrimeWheel.coprimes` and `Factory.Math.Implementations.Primes.sieveOfEratosthenes`,
  to use a map of lists, rather than a map of lists of lists.\n\n## 0.2.0.0\n* Separately
  coded the special-case of a **Factory.Data.PrimeWheel** of size zero, in `Factory.Math.Implementations.Primes.trialDivision`,
  to achieve better space-complexity.\n* Added `Factory.Data.PrimeWheel.estimateOptimalSize`.\n*
  Split module \"**Factory.Math.Implementations.Primes**\" into;\n\t+ \"**Factory.Math.Implementations.Primes.SieveOfEratosthenes**\",\n\t+
  \"**Factory.Math.Implementations.Primes.TurnersSieve**\",\n\t+ \"**Factory.Math.Implementations.Primes.TrialDivision**\",\n\t+
  and added a new module \"**Factory.Math.Implementations.Primes.SieveOfAtkin**\".
  This makes the rewrite-rules less fragile.\n* Coded `Factory.Math.Radix.digitalRoot`
  more concisely.\n* Split module \"**Factory.Math.Power**\" into an additional module
  \"**Factory.Math.PerfectPower**\".\n* Replaced `(+ 1)` and `(- 1)` with the faster
  calls `succ` and `pred`.\n* Used `Paths_factory.version` in **Main**, rather than
  hard-coding it.\n\n## 0.2.0.1\n* Changed by Lennart Augustsson, to replace `System`
  with `System.Environment` and `System.Exit`, and to remove dependency on **haskell98**.\n\n##
  0.2.0.2\n* Reacted to new module-hierarchy and addition of method `ToolShed.SelfValidate.getErrors`,
  in package \"**toolshed-0.13.0.0**\".\n* Made `Factory.Data.Interval.getLength`
  private.\n* Added `Factory.Data.Interval.mkBounded`.\n* Generalised **Factory.Math.Statistics**
  to accept any `Data.Foldable.Foldable` *Functor*, rather than merely lists.\n\n##
  0.2.0.3\n* Added class `Show` to some contexts in **Factory.Math.Radix**, for migration
  to **ghc-7.4**.\n\n## 0.2.0.4\n* Added classes `Eq` and `Show` to many contexts,
  for migration to **ghc-7.4**.\n* Minor re-formatting.\n\n## 0.2.0.5\n* Minor clarification
  of `Factory.Math.Implementations.Primality.witnessesCompositeness`.\n* Added details
  to any failure to parse the command-line arguments.\n* Defined package's name using
  program's name, in module \"**Main.hs**\".\n* Added `Factory.Math.Primes.mersenneNumbers`.\n*
  Replaced use of `mod` on positive integers, with the faster `rem`, in;\n\t+ `Factory.Math.Implementations.Pi.Spigot.Spigot.processColumns`,\n\t+
  `Factory.Math.Implementations.Primality.witnessesCompositeness`,\n\t+ `Factory.Math.Implementations.Primes.TrialDivision.isIndivisibleBy`,\n\t+
  `Factory.Math.Implementations.Primes.SieveOfAtkin.polynomialTypeLookup`,\n\t+ `Factory.Math.Implementations.Primes.SieveOfAtkin.findPolynomialSolutions`,\n\t+
  `Factory.Math.Implementations.Primes.TurnersSieve.turnersSieve`,\n\t+ `Factory.Math.PerfectPower.maybeSquareNumber`.\n*
  Replaced calls to `realToFrac` with `toRational` in;\n\t+ **Factory.Math.Implementations.SquareRoot**,\n\t+
  `Factory.Math.Statistics.getDispersionFromMean`,\n\t+ `Factory.Math.SquareRoot.getDiscrepancy`,\n\t+
  `Factory.Math.SquareRoot.getAccuracy`, to more clearly represent the required operation.\n\n##
  0.2.1.0\n* Refactored **Factory.Test.QuickCheck.QuickChecks**.\n* Remove redundant
  import of `Data.Ratio` from many modules.\n* Refactored `Factory.Math.Radix.encodes`
  to make use of `Data.List.genericLength`, & removed empty keyword `where`.\n* Explicitly
  closed standard-input in the executable.\n* Replaced calls to `error` from inside
  the IO-monad, with `Control.Monad.fail`.\n* Added function `Factory.Math.Precision.roundTo`.\n*
  Trapped command-line arguments to which garbage has been appended.\n* Corrected
  the output of `Main.main.optDescrList.printVersion`.\n* Removed the integral population-size
  parameter from `Factory.Math.Probability.generateContinuousPopulation` & `Factory.Math.Probability.generateDiscretePopulation`,
  making the result conceptually infinite.\n* Created class `Factory.Math.Probability.Distribution`,
  to which data-types `Factory.Math.Probability.ContinuousDistribution` & `Factory.Math.Probability.DiscreteDistribution`
  conform.\n* Added data-constructors `Factory.Math.Probability.ExponentialDistribution`,
  `Factory.Math.Probability.ShiftedGeometricDistribution` & `Factory.Math.Probability.LogNormal`.\n*
  Added command-line option \"**--plotDiscreteDistribution**\" to **Main**.\n* Removed
  Preprocessor-check on the version of package \"**toolshed**\", in modules \"**Factory/Math/Summation**\"
  & \"**Factory/Data/PrimeFactors**\".\n\n## 0.2.1.1\n* Added `Factory.Test.QuickCheck.Probability.prop_logNormalDistributionEqual`.\n*
  Removed pragma **INLINE** from `Factory.Math.Implementations.Primes.TrialDivision.isIndivisibleBy`,
  since to be effective it must be called with fully applied parameters (which it
  isn't).\n* Un eta-reduced `Factory.Math.Power.square`, since we want it to be inlined
  when called with one argument.\n* Tested with **haskell-platform-2013.2.0.0**.\n*
  Replaced preprocessor-directives with **build-depends** constraints in the *.cabal*-file.\n*
  Added function `Factory.Math.Statistics.getWeightedMean` & corresponding tests in
  module \"**Factory.Test.QuickCheck.Statistics**\".\n* Since `(<$>)` is exported
  from the Prelude from **base-4.8**, imported **Prelude** hiding `(<*>)` into module
  \"**Factory.Data.Monomial**\", since this symbol is defined locally for other purposes.\n*
  Either replaced instances of `(<$>)` with `fmap` to avoid ambiguity between **Control.Applicative**
  & **Prelude** which (from **base-4.8**) also exports this symbol, or hid the symbol
  when importing the **Prelude**.\n\n## 0.2.1.2\n* Hid `(<$>)` when importing the
  **Prelude** into module \"**src/Factory/Test/QuickCheck/Pi**\".\n* Added the compiler
  to the output returned for the command-line option \"**version**\".\n* Changed flag
  \"**threaded**\" in the *.cabal*-file to \"**manual**\".\n* Added **Default-language**-specification
  to the *.cabal*-file.\n* Added file \"**README.markdown**\".\n* Converted this file
  to markdown-format.\n* Replaced `System.Exit.exitWith (System.Exit.ExitFailure 1)`
  with `System.Exit.exitFailure` & `System.Exit.exitWith System.Exit.ExitSuccess`
  with `System.Exit.exitSuccess`.\n* Moved the entry-point to the test-suite from
  module \"**Main.hs**\" to \"**Test.hs**\", both to integrate with **cabal** & to
  minimise the dependencies of the executable.\n* Partitioned the source-files into
  directories \"**src-lib**\", \"**src-exe**\", & \"**src-test**\", & referenced them
  individually from the *.cabal*-file to avoid repeated compilation.\n* Used **CPP**
  to control the import of symbols from **Control.Applicative**.\n\n## 0.2.2.0\n*
  Corrected the markdown-syntax in this file.\n* Reverted to calling \"**error**\"
  rather than \"**Control.Monad.fail**\", since the **String**-argument for the latter
  is discarded in **Monad**-implementations other than **IO**.\n* Uploaded to [GitHub](https://github.com/functionalley/Factory.git).\n*
  Simplified file **src-test/Main.hs**.\n* Added file **.travis.yml** to control testing
  by <https://docs.travis-ci.com>.\n* Added file **.ghci**.\n* Replaced use of module
  **ToolShed.Defaultable** with **Data.Default**.\n* Re-code **Factory.Test.QuickCheck.Statistics**
  to **Data.Array.IArray** rather than **Data.Array**.\n* Added functions **Factory.Math.Statistics.getRootMeanSquare**
  **Factory.Test.QuickCheck.Statistics.prop_rootMeanSquare**.\n* Added function **Factory.Test.QuickCheck.Statistics.prop_standardDeviationRMS**.\n*
  Added **Eq** type-constraint to function **Factory.Math.Statistics.getWeightedMean**.\n*
  Tested with **ghc-8.0.1**.\n\n## 0.2.2.1\n* Commented-out flakey square-root test.\n\n##
  0.3.0.0\n* Used strictness to improve efficiency of functions **getMean**, **getRootMeanSquare**,
  **getWeightedMean** & replaced **error** with **Control.Exception.assert**, in module
  **Factory.Math.Statistics**\n* Replaced 'Data.List.genericLength' with the more
  efficient @fromIntegral . length@.\n* Removed dependency on **Distribution.Package.PackageName**.\n*
  Checked for null-string in **Factory.Math.Radix.fromBase**.\n\n## 0.3.1.0\n* Replaced
  \ '+negate' with 'subtract'.\n* Removed **Eq** type-constraint from **Factory.Math.Statistics.getWeightedMean**.\n*
  Added specialisation-pragmas to **Factory.Math.Statistics**.\n\n## 0.3.1.4\n\n##
  0.3.2.0\n* Added **Paths_factory** to **Other-modules** section of cabal file.\n*
  Accounted for **Semigroup** becoming a superclass of **Monoid** in **ghc-8.4**.\n\n##
  0.3.2.1\nChanged references to author's domain-name.\n\n## 0.3.2.2\nUpdated list
  of test-compilers.\n\n## 0.3.2.3\nAttempt to make tests more reliable.\n"
basic-deps:
  factory: -any
  toolshed: '>=0.17'
  Cabal: '>=1.10'
  base: '>=4.3 && <5'
  primes: '>=0.1'
  data-default: -any
  array: -any
  containers: -any
  random: -any
  parallel: '>=3.0'
  deepseq: '>=1.1'
all-versions:
- 0.0.0.2
- 0.1.0.0
- 0.1.0.2
- 0.1.0.3
- 0.2.0.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.0.4
- 0.2.0.5
- 0.2.1.0
- 0.2.1.1
- 0.2.1.2
- 0.2.2.1
- 0.3.0.0
- 0.3.1.4
- 0.3.2.0
- 0.3.2.1
- 0.3.2.2
- 0.3.2.3
author: Dr. Alistair Ward
latest: 0.3.2.3
description-type: markdown
description: |
  # **Factory**

  [![Build Status](https://travis-ci.com/functionalley/Factory.svg?branch=master)](https://travis-ci.com/functionalley/Factory)
  [![Hackage](https://img.shields.io/hackage/v/factory.svg)](https://hackage.haskell.org/package/factory)
  [![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
  [![Haskell](https://b.repl.ca/v1/language-haskell-yellow.png)](https://haskell.org)

  This is "**Factory**", a library of number-theory functions.

  ## Installation

  It can be built and installed using:

  * [Cabal](https://www.haskell.org/cabal/),
  * [The Haskell Tool Stack](https://docs.haskellstack.org/en/stable/README/).

  ## Documentation

  More information about this library can be found at [Factory](https://functionalley.com/Factory/factory.html).

  ## License

  For information on copying and distributing this package, see the file "**LICENSE**" in this directory.

  ## Bug-reporting

  Bug-reports should be emailed to <factory@functionalley.com>.

  ## Testing

  The test-suite can be run using:

  * "**cabal configure --enable-tests && cabal build && cabal test --show-details=always**",
  * "**stack test**",
  * "**make test**" issued from the product's installation-directory.

  ## Author

  This library is written and maintained by Dr. Alistair Ward.
license-name: GPL-3.0-or-later
