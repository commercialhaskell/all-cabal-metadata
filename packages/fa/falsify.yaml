homepage: ''
changelog-type: markdown
hash: a9ec175cfb20dc5afeedac69f424c77589729fce23733030abf22dc2053abc41
test-bench-deps:
  base: '>=4.12 && <4.19'
  falsify: -any
  data-default: -any
  containers: -any
  selective: -any
  tasty-hunit: '>=0.10 && <0.11'
  tasty: -any
  QuickCheck: '>=2.14 && <2.15'
maintainer: edsko@well-typed.com
synopsis: Property-based testing with internal integrated shrinking
changelog: |
  # Revision history for falsify

  ## 0.2.0 -- 2023-11-08

  * Avoid use of `Expr` in `at` (#48)
  * Add `oneof` (#54; Simon Kohlmeyer)
  * Generalize `Range`, so that it can be used for types like `Char` (#51).
    As a consequence, `Gen.integral` and `Gen.enum` are now deprecated, and
    superseded by `Gen.inRange`.
  * Add `GenDefault` class and `DerivingVia` helpers to derive generators
    (Eric Conlon; #61, #64).

  ## 0.1.1 -- 2023-04-07

  * Better verbose mode for test failures
  * New predicates: `split` and `pairwise`.
  * Shrink towards the _second_ half of the range in `withOrigin`

  ## 0.1.0 -- 2023-04-05

  * First release
basic-deps:
  optics-core: '>=0.3 && <0.5'
  bytestring: '>=0.10 && <0.12'
  sop-core: '>=0.5 && <0.6'
  base: '>=4.12 && <4.19'
  splitmix: '>=0.1 && <0.2'
  data-default: '>=0.7 && <0.8'
  tagged: '>=0.8 && <0.9'
  containers: '>=0.6 && <0.7'
  binary: '>=0.8 && <0.9'
  selective: '>=0.4 && <0.8'
  mtl: '>=2.2 && <2.4'
  base16-bytestring: '>=1.0 && <1.1'
  transformers: '>=0.5 && <0.7'
  optparse-applicative: '>=0.16 && <0.18'
  tasty: '>=1.3 && <1.5'
  vector: '>=0.12 && <0.14'
all-versions:
- 0.1.0
- 0.1.1
- 0.2.0
author: Edsko de Vries
latest: 0.2.0
description-type: haddock
description: |-
  This library provides property based testing with support
  for internal integrated shrinking: integrated in the sense
  of Hedgehog, meaning that there is no need to write a
  separate shrinker and generator; and internal in the sense
  of Hypothesis, meaning that this works well even across
  monadic bind. However, the actual techniques that power
  @falsify@ are quite different from both of these two
  libraries.

  Most users will probably want to use the integration with
  @<https://hackage.haskell.org/package/tasty tasty>@,
  and use "Test.Tasty.Falsify" as their main entrypoint
  into the library. The "Test.Falsify.Interactive" module
  can be used to experiment with the library in @ghci@.
license-name: BSD-3-Clause
