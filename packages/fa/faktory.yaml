homepage: https://github.com/frontrowed/faktory_worker_haskell#readme
changelog-type: markdown
hash: 3b7b935e028c53749f55ecf7be382339026d7385a453b6f41cc27fdc5bc1016d
test-bench-deps:
  base: '>=4.13 && <5'
  time: '>=1.9.3 && <1.12'
  hspec: '>=2.7.8 && <2.8'
  markdown-unlit: '>=0.5.1 && <0.6'
  async: '>=2.2.2 && <2.3'
  faktory: -any
  aeson: '>=1.5.5.1 && <1.6'
maintainer: engineering@freckle.com
synopsis: Faktory Worker for Haskell
changelog: |
  ## [*Unreleased*](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.2.1...main)

  None

  ## [v1.0.2.1](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.2.0...v1.0.2.1)

  - Fix bug in `at` parsing of consumed Job payloads

  ## [v1.0.2.0](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.6...v1.0.2.0)

  - Partial `BATCH` support (Enterprise only)
  - Support for `custom` field in Job payloads
  - Lower-level `buildJob` and `commandByteString` functions

  ## [v1.0.1.6](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.5...v1.0.1.6)

  - Relax dependencies upper bounds

  ## [v1.0.1.5](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.4...v1.0.1.5)

  - Maintain version bounds

  ## [v1.0.1.4](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.3...v1.0.1.4)

  - Various CI and dependency bounds changes

  ## [v1.0.1.3](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.2...v1.0.1.3)

  - Add support for queue namespacing

  ## [v1.0.1.2](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.1...v1.0.1.2)

  - Fix internal handling of invalid Server Replies

  ## [v1.0.1.1](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.1.0...v1.0.1.1)

  - Include non-OK reply in `commandOK` error
  - Build with GHC-8.8

  ## [v1.0.1.0](https://github.com/frontrowed/faktory_worker_haskell/compare/v1.0.0.0...v1.0.1.0)

  - Upgrade to `megaparsec-7`

  ## [v1.0.0.0](https://github.com/frontrowed/faktory_worker_haskell/tree/v1.0.0.0)

  Initial release.
basic-deps:
  bytestring: '>=0.10.12.0 && <0.12'
  aeson-casing: '>=0.2.0.0 && <0.3'
  unix: '>=2.7.2.2 && <2.8'
  base: '>=4.13 && <5'
  time: '>=1.9.3 && <1.12'
  unordered-containers: '>=0.2.13.0 && <0.3'
  text: '>1.2 && <1.4'
  safe-exceptions: '>=0.1.7.1 && <0.2'
  megaparsec: '>=9.0.1 && <9.1'
  network: '>=3.1.1.1 && <3.2'
  connection: '>=0.3.1 && <0.4'
  semigroups: '>=0.19.1 && <0.20'
  memory: '>=0.15.0 && <0.16'
  faktory: -any
  cryptonite: '>=0.27 && <0.29'
  mtl: '>=2.2.2 && <2.3'
  random: '>=1.1 && <1.3'
  scanner: '>=0.3.1 && <0.4'
  aeson: '>=1.5.5.1 && <1.6'
all-versions:
- 1.0.0.0
- 1.0.1.0
- 1.0.1.1
- 1.0.1.2
- 1.0.1.3
- 1.0.1.4
- 1.0.1.5
- 1.0.1.6
- 1.0.2.0
- 1.0.2.1
author: Freckle Engineering
latest: 1.0.2.1
description-type: text
description: |
  # faktory\_worker\_haskell

  [![CircleCI](https://circleci.com/gh/freckle/faktory_worker_haskell.svg?style=svg)](https://circleci.com/gh/freckle/faktory_worker_haskell)

  Haskell client and worker process for the Faktory background job server.

  Architecture overview from [Ruby client README](https://github.com/contribsys/faktory_worker_ruby#readme):

  ```
                         +--------------------+
                         |                    |
                         |     Faktory        |
                         |     Server         |
          +---------->>>>|                    +>>>>--------+
          |              |                    |            |
          |              |                    |            |
          |              +--------------------+            |
  +-----------------+                            +-------------------+
  |                 |                            |                   |
  |    Client       |                            |     Worker        |
  |    pushes       |                            |     pulls         |
  |     jobs        |                            |      jobs         |
  |                 |                            |                   |
  |                 |                            |                   |
  +-----------------+                            +-------------------+
  ```

  - Client - an API any process can use to push jobs to the Faktory server.
  - Worker - a process that pulls jobs from Faktory and executes them.
  - Server - the Faktory daemon which stores background jobs in queues to be
    processed by Workers.

  This package contains only the client and worker parts. The server part is
  [here](https://github.com/contribsys/faktory/)

  ## Installation

  - Hackage: http://hackage.haskell.org/package/faktory
  - Stackage: *Coming soon*

  ## Faktory Documentation

  See the [wiki](//github.com/contribsys/faktory/wiki) for more
  details.

  ## Usage

  <!--
  ```haskell
  import Data.Aeson
  import Prelude
  import Faktory.Producer
  import Faktory.Job
  import Faktory.Worker
  import GHC.Generics
  import Text.Markdown.Unlit ()

  {- Don't actually run anything -}
  main :: IO ()
  main = if True then pure () else (workerMain >> producerMain)
  workerMain :: IO ()
  producerMain :: IO ()
  ```
  -->

  ### Job

  Any value can be a "Job" that is pushed and pulled to and from Faktory via its
  `ToJSON` and `FromJSON` instances:

  ```haskell
  newtype MyJob = MyJob
    { myJobMessage :: String
    }
    deriving stock Generic
    deriving anyclass (ToJSON, FromJSON)
  ```

  ### Worker

  ```haskell
  workerMain = runWorkerEnv $ \job ->
    -- Process your Job here
    putStrLn $ myJobMessage job

    -- If any exception is thrown, the job will be marked as Failed in Faktory
    -- and retried. Note: you will not otherwise hear about any such exceptions,
    -- unless you catch-and-rethrow them yourself.
  ```

  ### Producer

  `Producer` wraps `Client` for push-only usage.

  ```haskell
  producerMain = do
    producer <- newProducerEnv

    jobId <- perform mempty producer $ MyJob "Hello world"

    print jobId

    closeProducer producer
  ```

  ### Configuration

  When using `envSettings`, the following variables will be used:

  - `FAKTORY_PROVIDER`: the name of another environment variable where the
    connection string can be found. Defaults to `FAKTORY_URL`.
  - `FAKTORY_URL` (or whatever you named in `FAKTORY_PROVIDER`): connection string
    to the Faktory server. Format is
    `tcp(+tls)://(:password@)host:port(/namespace)`. Defaults to
    `tcp://localhost:4719`. `namespace` is prependend to queue names on job
    submission and worker consumption.

  When using `envWorkerSettings`, the following variables are also used:

  - `FAKTORY_QUEUE`: the name of the queue to consume from. Default is "default".
  - `FAKTORY_WORKER_ID`: the Id to use for this Worker. Default is to assign a
    random one.

  ## Examples

  See the [examples](./examples). To run them:

  1. Run a local Faktory server

     ```console
     docker run --rm \
       --publish 7419:7419 \
       --publish 7420:7420 \
       contribsys/faktory
     ```

  1. Run the consumer example

     ```console
     % stack exec faktory-example-consumer
     Starting consumer loop
     ```

     (Assumes you've built the project.)

  1. Submit a Job through the producer example

     ```console
     % stack exec faktory-example-producer hello world
     Pushed job: "ljcjlbexbgun"
     ```

     *NOTE*: if you submit "BOOM" as a Job, the processing loop will raise an
     exception, so you can see how a Failed Job looks in Faktory.

  1. See that your Job was processed back in the consumer

     ```console
     % stack exec faktory-example-consumer
     Starting consumer loop
     hello world
     ```

  ## Development & Tests

  ```console
  stack build --dependencies-only --test --no-run-tests
  stack build --pedantic --test --no-run-tests
  stack build --pedantic --test
  ```

  - `FactorySpec` requires a local Faktory server is running, and it will flush
    all Jobs from this server as part of running the tests.
  - The tests for `BATCH` require testing against an Enterprise Faktory image

  ---

  [CHANGELOG](./CHANGELOG.md) | [LICENSE](./LICENSE)
license-name: MIT
