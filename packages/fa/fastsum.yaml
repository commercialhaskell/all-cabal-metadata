homepage: https://github.com/patrickt/fastsum#readme
changelog-type: markdown
hash: 7abc9ceddc3dfb67420c927c0e69d9248c9e8d5877f53cd8fb76a63e72ce7ddb
test-bench-deps: {}
maintainer: patrickt@github.com
synopsis: A fast open-union type suitable for 100+ contained alternatives
changelog: |
  # v0.2.0.0

  Support GHC 9.2 by enabling use of `template-haskell` versions >= 2.19.

  Add an `Eq1` constraint to the `Hashable1` constraint to satisfy newer `hashable` versions.

  # v0.1.1.1

  Enable use of `template-haskell` versions >= 2.15.

  # v0.1.1

  Added `projectGuard` and `NFData`/`NFData1` instances.

  # v0.1

  Initial release.
basic-deps:
  base: '>=4.7 && <5'
  fastsum: -any
  ghc-prim: '>=0.5 && <1'
  hashable: '>=1.2 && <2'
  deepseq: '>=1.4 && <2'
  template-haskell: '>=2.12 && <2.19'
all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
author: Rob Rix, Josh Vera, Allele Dev, Patrick Thomson
latest: 0.2.0.0
description-type: markdown
description: "# fastsum\n\nThis package provides `Data.Sum`, an open-union type, similar
  to the `Union` type that powers the implementation of [Oleg Kiselyov's extensible-effects
  library](http://okmij.org/ftp/Haskell/extensible/).\n\nUnlike most open-union implementations,
  this type is very fast to compile, even when the type-level list of alternatives
  contains hundreds of entries. Membership queries are constant-time, compiling to
  a single type-level natural lookup in a closed type family, unlike the traditional
  encoding of `Union`, which relies on recursive typeclass lookups. As such, this
  type lends itself to representing abstract syntax trees or other rich data structures.
  \n\nGHC 8's support for custom type errors provides readable type errors should
  membership constraints not be satisfied.\n\nIn order to achieve speed, this package
  makes fewer guarantees about what can be proven given a `Member` instance. If you
  require a richer vocabulary to describe the implications of membership, you should
  use the traditional implementation of open-unions.\n\n# Credits\n\nThis library
  is built on the work of Oleg Kiselyov, which was then modified by Allele Dev. It
  was extracted from Josh Vera's [effects](https://github.com/joshvera/effects/) library.
  Rob Rix implemented the `ElemIndex` type family and the `Apply` typeclass.\n"
license-name: BSD-3-Clause
