all-versions:
- 0.1.1.1
- 0.1.2.0
- 0.1.3.0
- 0.1.3.1
- 0.2.1.0
- 0.2.2.2
- 0.2.3.0
- 0.3.0.0
- 0.3.1.0
author: Marcus Völker
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0'
changelog: "# Changelog\r\n\r\n## 0.3\r\n\r\nHighlights:\r\n\r\n* Adding `Metaparser`,
  a parser that constructs a parser from a grammar similar to EBNF\r\n\r\n### 0.3.1\r\n\r\n*
  Adding `MonadFail` instances to `Parser` and `DCont`\r\n\r\n### 0.3.0\r\n\r\n* Merged
  `Atomics` and `Transformers` into `Prebuilt`\r\n* Removed deprecated `skipN`\r\n*
  Renamed `TokenStream` functions to share the names of `Prelude` functions on lists\r\n*
  Added `Metaparser`, a parser parsing a grammar into a parser\r\n* Added `pfix`,
  a fixed point combinator for parsers depending on their own result\r\n* Added convenience
  function `wrap` to `DCont`\r\n* Added `forceParse` function to parse assuming success\r\n*
  Added `surround` parser transformer for parsing parenthesised expressions\r\n\r\n##
  0.2\r\n\r\nHighlights:\r\n\r\n* Switching from list-based parsing to `TokenStream`\r\n\r\n###
  0.2.3\r\n\r\n* Added `nParse` (cParse for single token) and `try` (parse with Maybe)
  Transformers, `sInteger` (signed integers) Atomic\r\n\r\n### 0.2.2\r\n\r\n* Added
  Either instance for `TokenStream`\r\n* Auto-`success` atomic, atomics for splitting
  an integer into digits\r\n\r\n### 0.2.1\r\n\r\n* Deprecated `skipN`, replaced with
  `sDrop` \r\n\r\n### 0.2.0\r\n\r\n* Added `TokenStream`, an abstraction of lists\r\n*
  Used `TokenStream` to reformulate Atomics and Transformers\r\n\r\n## 0.1\r\n\r\nHighlights:\r\n\r\n*
  Initial Version\r\n\r\n### 0.1.4\r\n\r\n* Added `digit` and `letter` parsers\r\n\r\n###
  0.1.3\r\n\r\n* Improved testing facilities\r\n* Added `check` function\r\n\r\n##
  0.1.2\r\n\r\n### 0.1.2.0\r\n\r\n* Added `peek` function"
changelog-type: markdown
description: "# λParse  ![Travis-CI](https://travis-ci.org/MarcusVoelker/LParse.svg?branch=master)
  [![Hackage](https://img.shields.io/hackage/v/LParse.svg)](https://hackage.haskell.org/package/LParse)\r\n\r\nA
  parser library using monads and arrows. Supports both horizontal and vertical composition
  of parsers.\r\n\r\n# Short Guide\r\n\r\n## Creating a parser\r\n\r\nA parser is,
  at its heart, nothing more than a function that takes some input and either returns
  a result along with some residual, unconsumed input or that fails for some reason
  and returns an error message.\r\n\r\nSince LParse is written in continuation-passing-style,
  this is modelled with a concept of DoubleContinuations - continuations that not
  only take one function to continue with, but one function to continue with in the
  case of a successful computation and one function to continue with in the case of
  a failure. This, of course, gives rise to classic parser semantics: To concatenate
  two parsers, the second one is put into the successful continuation of the first
  one, while for an alternative we put the second parser into the failure continuation
  of the first one.\r\n\r\nThese semantics are modelled with Monads and Alternatives,
  respectively, to make use of the familar syntax of these classes:\r\n\r\n* `p1 >>
  p2` runs `p1` and `p2` in succession and gives the result of `p2` only\r\n* `(,)
  <$> p1 <*> p2` runs `p1` and `p2` in succession and gives the results of `p1` and
  `p2` as a pair\r\n* `p1 <|> p2` runs `p1`. On a success, its result is returned,
  on a fail, `p2` is run. On a success, its result is returned, on a failure, the
  whole parser fails\r\n\r\nThe parser can be built from scratch by constructing a
  parser object with the appropriate function, but a variety of common atomic parsers
  and parser transformers are provided in `Text.LParse.Atomics` and `Text.LParse.Transformers`,
  respectively.\r\n\r\nThe above construction is referred to as _horizontal composition_,
  i.e., running parsers successively on the same input.\r\nThe dual concept to this
  we refer to as _vertical composition_, where the result of one parser is fed into
  the next one as an input. An application for this could be one parser `lex` that
  transforms a string into a list of tokens (a lexer) and a second parser `par` that
  transforms a list of tokens into a syntax tree. Then we could join these to create
  a parser that directly transforms a string into a syntax tree as `lex >>> par`\r\n\r\nAs
  the notation above implies, LParse realises vertical composition with arrows enabling
  all the other features of arrows, such as the proc notation, to be used with parsers.\r\n\r\n##
  Running a parser\r\n\r\nOnce you have obtained a parser object that represents your
  entire parser, you have two options\r\n\r\n1. You can supply a success and a failure
  function. When the parser is run, the appropriate function will be called, either
  with the result of the parse or an error message\r\n\r\n2. You can retrieve the
  double continuation from the parser and continue to build with it. This is appropriate
  if your program itself is written in CPS."
description-type: markdown
hash: 323644ef88877c8d37098b2151aa9e3cf05d95af84f375786a8422d602cfb084
homepage: https://github.com/MarcusVoelker/LParse#readme
latest: 0.3.1.0
license-name: MIT
maintainer: marcus.voelker@rwth-aachen.de
synopsis: A continuation-based parser library
test-bench-deps:
  LParse: '>=0'
  base: '>=0'
