all-versions:
- 0.1.0.0
- 0.1.1.0
author: Daniel Firth
basic-deps:
  base: '>=4.7 && <5'
  composite-base: '>=0.7.0.0 && <0.8'
  fcf-containers: '>=0.5.0 && <0.7'
  first-class-families: '>=0.8.0.0 && <0.9'
  vinyl: '>=0.13.0 && <0.14'
changelog: |
  # Changelog for fcf-composite

  ## v0.1.1.0

  * Add `difference`, `union` and `intersection` operators.

  ## v0.1.0.0

  * Add `ToComposite` and `FromComposite` FCF expressions.
  * Add `Union`, `Difference` and `Intersection` FCF expressions.
changelog-type: markdown
description: |
  # fcf-composite

  [first-class-families](https://hackage.haskell.org/package/first-class-families) support for [composite](https://hackage.haskell.org/package/composite-base) records. This gives bidirection between a composite
  style `[s :-> a]` and `MapC s a` from
  [fcf-containers](https://hackage.haskell.org/package/fcf-containers).

  Using this we can compute record types via the Map
  [operations](https://hackage.haskell.org/package/fcf-containers-0.6.0/docs/Fcf-Data-MapC.html)
  in Fcf.

  ```{.haskell}
  data Difference :: [Type] -> [Type] -> Exp [Type]

  type instance Eval (Difference xs ys) = Eval (ToComposite =<< Fcf.Data.MapC.Difference (Eval (FromComposite xs)) (Eval (FromComposite ys)))

  type A = ["a" :-> Int, "b" :-> String, "c" :-> ()]

  type B = ["a" :-> Int, "c" :-> ()]

  myRec :: Record (Eval (Difference A B))
  myRec = "foo" :*: RNil -- checks!
  ```

  Note: The ordering of the fields is predictable, but not obvious and commutations matter, so you may need to use rcast liberally.
description-type: markdown
hash: 52419074d359e8132d2ac99e7daf3aca6a747883aa4dd22220a9897456af6522
homepage: ''
latest: 0.1.1.0
license-name: MIT
maintainer: dan.firth@homotopic.tech
synopsis: Type-level computation for composite using first-class-families.
test-bench-deps:
  base: '>=4.7 && <5'
  composite-base: '>=0.7.0.0 && <0.8'
  fcf-composite: '>=0'
  fcf-containers: '>=0.5.0 && <0.7'
  first-class-families: '>=0.8.0.0 && <0.9'
  tasty: '>=0'
  tasty-hunit: '>=0'
  vinyl: '>=0.13.0 && <0.14'
