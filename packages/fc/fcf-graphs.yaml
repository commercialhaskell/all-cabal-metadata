all-versions:
- 0.0.1.0
author: Daniel Firth
basic-deps:
  base: '>=4.7 && <5'
  fcf-containers: '>=0.6.0'
  first-class-families: '>=0.8.0'
changelog: |
  # Changelog for fcf-graphs

  ## v0.0.1.0

  * `Fcf.Data.Graph` definition and basic functions.
  * `Fcf.Data.AdjacencyMap` definition.
changelog-type: markdown
description: |
  # fcf-graphs

  fcf-graphs mimicks
  [algebraic-graphs](https://hackage.haskell.org/package/algebraic-graphs) but
  for type level computations using
  [first-class-families](https://hackage.haskell.org/package/first-class-families).

  Provided are the `Graph` and `AdjacencyMap` data types, and several functions
  for each. I believe this can reach api parity with algebraic-graphs. At the
  moment, not everything is implemented, but type-level `simplify` works which is
  interesting.

  Note that ordering of underlying lists/maps is a bit weird so be careful. See
  the doctests for examples, and see
  [fcf-containers](https://hackage.haskell.org/package/fcf-containers) for
  reference.
description-type: markdown
hash: 3920844dff69239bff2d0cf8bcc36da00b0cd38961344cb9386174c1c7909c72
homepage: ''
latest: 0.0.1.0
license-name: MIT
maintainer: dan.firth@homotopic.tech
synopsis: Type-level version of algebraic-graphs.
test-bench-deps:
  Glob: '>=0'
  base: '>=4.7 && <5'
  doctest: '>=0'
  fcf-containers: '>=0.6.0'
  fcf-graphs: '>=0'
  first-class-families: '>=0.8.0'
