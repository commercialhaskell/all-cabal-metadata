homepage: https://github.com/gspia/fcf-containers
changelog-type: markdown
hash: f6e178650b3470ab75a2068382b9034da1463d6400b02620ecf2eb657a9b8e6e
test-bench-deps:
  first-class-families: -any
  fcf-containers: -any
  base: -any
maintainer: iahogsp@gmail.com
synopsis: Data structures and algorithms for first-class-families
changelog: "\n# 0.7.2\n\n2023015\n\n- Add notes about defunctionalization and associated
  code examples\n- Add helper module for Foldl method (it would be better at first-class-families
  lib).\n\n# 0.7.1\n\n20220601\n\n - Clean up several modules (remove extra spaces
  and paranthesis)\n - Update doctest function and remove Glob dependency\n - Update
  ci pipeline to do tests with 9.0 and 9.2\n\n# 0.7.0\n\n20220424\n\n - Add preliminary
  support for Applicative and Monadic computations\n - Small whitespace fixes\n -
  Added dependency for mtl (to get Identity)\n - Add new compiler versions for tests
  and drop some old\n - Start referring to cabal version 3.0\n\n# 0.6.1\n\n20210130\n\nStart
  using the github actions and remove travis CI.\n\n# 0.6.0\n\n20210130\n\n - use
  symbol as text representation (we can split predefined char-sets, as shown\n   by
  the Csongor at https://kcsongor.github.io/symbol-parsing-haskell/ see also\n   the
  symbols-package)\n - and hie.yaml (for language server)\n - minor documentation
  fixes\n - add new example that really stresses ghc (Advent-of-code 2020, day 22b)\n
  - MToN to Alg.List (this generates Nat-list from M to N)\n - Nat equality and inequality
  test\n\n# 0.5.0\n\n20200323\n\n - start using version 0.8.0 of first-class-families\n
  - a documentation fix\n\n# 0.4.0\n\n20200216\n\n - add Para\n - add Histo\n - add
  NatF\n - and examples \n - correct the Text Length example\n - NatMap (mimick IntMap)\n\n#
  0.3.0\n\n20200209\n\n - a separate Sort module\n - add possibility to sort a list
  of lists\n - a Text module\n - several list functions (And, Or, All, Any, ..)\n
  - IsProperSubsetOf, IsSubsetOf in Set\n - add new example that uses MapC and Text\n\n#
  0.2.0\n\n - remove the methods that can be found from fcf 0.7.0\n - fix the examples
  that didn't work with ghc 8.8.1 test-doc\n - add Fcf.Data.Symbol module (comparison
  + other functions)\n - change some of the examples from using Eval to use =<< operator\n
  \  (less parenthesis and easier to read this way)\n - format the documentation a
  bit\n - add PowerSet and ToList into Set-module\n - add new test module\n\n# 0.1.0\n\nInitial
  version on 20200129. The next version probably comes out quickly after \nthis one.\n"
basic-deps:
  first-class-families: ==0.8.*
  fcf-containers: -any
  base: '>=4.9 && <4.18'
  ghc-prim: -any
  mtl: -any
all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
- 0.4.0
- 0.5.0
- 0.6.0
- 0.7.0
- 0.7.1
- 0.7.2
author: gspia
latest: 0.7.2
description-type: markdown
description: "# fcf-containers [![Hackage](https://img.shields.io/hackage/v/fcf-containers.svg)](https://hackage.haskell.org/package/fcf-containers)
  [![Build Status](https://travis-ci.org/gspia/fcf-containers.svg)](https://travis-ci.org/gspia/fcf-containers)\n\nFcf-containers
  mimicks the containers package but for type-level computations. \nThat is, we provide
  e.g. trees and maps. In addition to that, this package \ncontains some other type-level
  computation utilities. \n\nThese methods are based on the idea given in the\n[first-class-families](https://github.com/Lysxia/first-class-families)
  -package,\nor Fcf shortly. Fcf is the main dependency of fcf-containers. As some
  of the\nmethods fit badly under the name \"fcf-containers\", they might end up into
  \nthe Fcf or some other package to be created. So stay tuned, be patient, check
  \nthe [TODO.md](https://github.com/gspia/fcf-containers/blob/master/TODO.md) \nand
  send those PR's :)\n\n\nMotivation for calculating things on type-level or on compile-time
  \ninclude\n\n- increase the safety measures of runtime methods,\n- pre-calculate
  complex things once on compile time and not every time the\n  executable is run,
  \n- provide users a way to choose between different algorithms for solving\n  a
  problem based on problem instance properties (e.g. local vs network,\n  or small
  vs large) known in advance.\n \nWhy fcf-like? The kind of signatures used for functions
  might be easier to \nread for some people and the ability to apply partially a function
  is nice \ntool to have. The techniques that allows this are defunctionalization,
  \nencoding the functions with empty data types and the use of open type family \nto
  Eval the constructed expressions. \n \nIf you have other motivations, please do
  let us know! \n\nNote: some of the claims on the items in the above list are such
  that I \nbelieve/hope but really don't know at the moment nor do I know how check
  them. \nE.g. the matter of compile time vs run time. Yes, types are erased at compile
  \ntime but do they still leave something into executables: simple check by \ncomparing
  outputs of the orbit example and another program that has one method \nto print
  integer 42 and main, reveals that sizes are almost the same, but not \nexactly.\n\n\nThere
  are lot of open interesting questions. See \n[TODO.md](https://github.com/gspia/fcf-containers/blob/master/TODO.md)
  file. E.g. how combine \nthese techniques with singletons-lib and related techniques.
  \n\n\n\n## Installation and building \n\nFirst, get the repo with `git clone` and
  `cd` into the directory. \n\n```\nnix-shell \ncabal build \ncabal test \n```\n\nThe
  doc-tests both document and work as main testing mechanism for this lib. \n\nIf
  you don't use nix, `cabal install fcf-containers` should be enough. This\npackage
  has almost as good number of dependencies as the first-class-families.\n\n\n## Example\n\nSee
  [Orbits.hs](https://github.com/gspia/fcf-containers/blob/master/examples/Orbits.hs).
  \nIt shows how to solve a real problem,\nwhat PRAGMAs are probably needed etc.\n\n```\ncabal
  run orbits \n```\n\nThere is also another example that show how to use MapC, see\n[Haiku.hs](https://github.com/gspia/fcf-containers/blob/master/examples/Haiku.hs)\n\n```\ncabal
  run haiku \n```\n\nPlease, do take a look of the notes made for the Helsinki Haskell
  meetup\non 11th January 2023\n[notes](https://github.com/gspia/fcf-containers/blob/master/examples/20230111_hhslides.md)\nand
  the associated \n[code examples](https://github.com/gspia/fcf-containers/blob/master/examples/20230111_hhmeetup.hs).\n\n\n\n##
  Random Notes\n\n### Partiality and anonymous functions\n\nIn the end, everything
  has to be total. We just post-pone the totality checking\nwith defunctionalization
  in a way by trying to evaluate our functions as late\nas possible with the `Eval`
  function. \n\nWe don't have lambdas, but if you can write the helper function in
  point-free\nform, it might can be used directly without any global function definition.\nRemember,
  that `(<=<)` corresponds to term-level `(.)` and `(=<<)` to \nterm-level function
  application `($)`. See also Maguire's book \n(Thinking with Types).\n\n\n### Conflicting
  family instance declarations\n\nTransforming term-level Haskell code is relatively
  straigthforward. Often, \nlocal definitions in `where` and anonymous functions will
  be turned into \nseparate helper functions. \n\nOccasionally, the pattern matching
  is not quite enough. Please, consider\n\n```\nisPrefixOf              :: (Eq a)
  => [a] -> [a] -> Bool\nisPrefixOf [] _         =  True\nisPrefixOf _  []        =
  \ False\nisPrefixOf (x:xs) (y:ys)=  x == y && isPrefixOf xs ys\n```\n\nWe could
  try to define it as \n```\ndata IsPrefixOf :: [a] -> [a] -> Exp Bool\ntype instance
  Eval (IsPrefixOf '[] _) = 'True\ntype instance Eval (IsPrefixOf _ '[]) = 'False\ntype
  instance Eval (IsPrefixOf (x ': xs) (y ': ys)) =\n         Eval ((Eval (TyEq x y))
  && Eval (IsPrefixOf xs ys))\n```\n\nBut ghc does not like this definition: the first
  two type instances are\nconflicting together. Instead, in these situations we can
  use a helper type \nfamily:\n\n```\ndata IsPrefixOf :: [a] -> [a] -> Exp Bool\ntype
  instance Eval (IsPrefixOf xs ys) = IsPrefixOf_ xs ys\n\n-- helper for IsPrefixOf\ntype
  family IsPrefixOf_ (xs :: [a]) (ys :: [a]) :: Bool where\n    IsPrefixOf_ '[] _
  = 'True\n    IsPrefixOf_ _ '[] = 'False\n    IsPrefixOf_ (x ': xs) (y ': ys) =\n
  \        Eval ((Eval (TyEq x y)) && IsPrefixOf_ xs ys)\n```\n\n### Using `If`\n\nIf
  possible, try to avoid using `Eval` in the if-branches. \nFor example, consider\n```\n
  \   (If (Eval (s > 0) )\n        ( 'Just '( a, s TL.- 1 ))\n        'Nothing\n    )\n```\nand\n```\n
  \   (If (Eval (s > 0))\n        (Eval (Pure ( 'Just '( a, s TL.- 1 ))))\n        (Eval
  (Pure 'Nothing))\n    )\n```\n\nBoth compile and it is easy to end up in the latter
  form, especially if the \nbranch is more complex than in this example. \n\nThe former,
  however, is much better as it doesn't have to evaluate both branches\nand is thus
  more efficient.\n\n\n### Other\n\n\nThe `ghci` and `:kind!` command are your friends!\n\nSource
  also contains a lot of examples, see\n[fcf-containers](https://github.com/gspia/fcf-containers/tree/master/src/Fcf).\n\n\nHappy
  :kinding!\n"
license-name: BSD-3-Clause
