all-versions:
- '0.1'
- 0.1.1
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.5.1
- 0.1.5.2
- 0.1.5.3
author: Paul H Liu <paul@thev.net>, Eric Cheng <eric.cheng@aya.yale.edu>
basic-deps:
  array: '>=0'
  base: '>=4 && <5'
  containers: '>=0'
  ghc-prim: '>=0'
  haskell-src: '>=0'
  syb: '>=0'
  template-haskell: '>=0'
changelog: "commit fa6eeb086fb5330fed17d5d87626bb5f3ab5c0d8\nAuthor: Paul H. Liu <paul@thev.net>\nDate:
  \  Thu May 7 20:05:34 2015 -0700\n\n    Bump version to 0.1.5.3\n\ncommit 4c2a396a4f7e1589c37049e03bedc414ce7a745c\nMerge:
  31801f2 633e991\nAuthor: Paul H. Liu <paul@thev.net>\nDate:   Mon May 4 11:42:41
  2015 -0700\n\n    Merge branch 'alex-segura-master'\n\ncommit 633e99109df45083de835a2a95bff9f64b50b600\nAuthor:
  Paul H. Liu <paul@thev.net>\nDate:   Mon May 4 11:42:19 2015 -0700\n\n    Import
  Control.Applicative just in case\n\ncommit 11d39c28d510b7385c08f260da9dc0c5e0199ef4\nAuthor:
  Alex Segura <alex.segura@droitfintech.com>\nDate:   Sun May 3 13:37:58 2015 -0400\n\n
  \   Conditionals for TH version 2.10.0.0 compatibility\n\ncommit fd94207ca583d5dc0cbc34ebd71d6a24525660c6\nAuthor:
  Alex Segura <alex.segura@droitfintech.com>\nDate:   Sun May 3 13:37:39 2015 -0400\n\n
  \   Functor and applicative instances for State\n\ncommit 31801f274b1ad1d568ff6d0c6c3f31bd38e4210d\nAuthor:
  Paul H. Liu <paul@thev.net>\nDate:   Sat Jan 31 20:54:45 2015 -0800\n\n    Bump
  version to 0.1.5.2 to repack for hackage\n\ncommit be97a355398da2972d48e35a58277b7bc2e81ad3\nAuthor:
  Paul H. Liu <paul@thev.net>\nDate:   Wed Jan 14 14:30:00 2015 -0800\n\n    Bump
  version to 0.1.5.1\n\ncommit 1f378c1bedb1775e68a150e0e8eea54ef24a1a4d\nAuthor: Paul
  H. Liu <paul@thev.net>\nDate:   Wed Jan 14 14:29:28 2015 -0800\n\n    Add happy
  in build-tools\n\ncommit 720b4d1c753837d30c968e4ae885905da4ebc702\nAuthor: Paul
  H. Liu <paul@thev.net>\nDate:   Tue Sep 16 21:06:35 2014 -0700\n\n    Bump version
  to 0.1.5\n\ncommit b8e02e9541dc7792eb10faed41fc5a8abebb6992\nAuthor: Paul H. Liu
  <paul@thev.net>\nDate:   Mon May 12 13:32:56 2014 -0700\n\n    Minor updates after
  importing from darcs repo\n\ncommit 7f60b7942d22b85c09162d18a43e89ddd6942e0f\nAuthor:
  Paul Liu <paul@thev.net>\nDate:   Thu May 30 00:38:10 2013 -0700\n\n    Bump version
  to 0.1.4\n    \n    Ignore-this: db43c3ab8aa7ac71aa760aec41c111de\n    \n    darcs-hash:20130530073810-21fc0-36c5a463b1581dd05d42791e7cede095d24ea31a.gz\n\ncommit
  99d812076e9a99a05936ca9108058802170f1116\nAuthor: Paul Liu <paul@thev.net>\nDate:
  \  Tue May 14 20:09:56 2013 -0700\n\n    Remove obsolete GHC options from Makefile\n
  \   \n    Ignore-this: 646e5aafb5e22e348f89d549d9999c2a\n    \n    darcs-hash:20130515030956-21fc0-5bad573c83e73ab936a627ae0c34ae4199c91ad3.gz\n\ncommit
  6ac9aee8b3383410df74b74ccbdda31e384a0021\nAuthor: svenkeidel <svenkeidel@gmail.com>\nDate:
  \  Tue May 14 07:22:04 2013 -0700\n\n    fixes for compilation with ghc 7.6.3\n
  \   \n    Ignore-this: 892f3664fb5b6838bf8eaea00f68fbac\n    \n    Problem 1 Template
  Haskell:\n    In template-haskell <= 2.7.0.0, \"Kind\" is a own data type (see [1]).\n
  \   In template-haskell == 2.8.0.0, they made \"Kind\" a type alias of \"Type\"
  to\n    avoid duplication (see [2]).\n    \n    Problem 2 Catch:\n    Prelude in
  base == 4.6.0.0 discards the \"catch\" function. See [3] and [4]\n    \n    [1]
  http://hackage.haskell.org/packages/archive/template-haskell/2.7.0.0/doc/html/Language-Haskell-TH-Syntax.html#t:Kind\n
  \   [2] http://hackage.haskell.org/packages/archive/template-haskell/2.8.0.0/doc/html/Language-Haskell-TH-Syntax.html#t:Kind\n
  \   [3] http://hackage.haskell.org/packages/archive/base/4.5.0.0/doc/html/Prelude.html#v:catch\n
  \   [4] http://hackage.haskell.org/packages/archive/base/4.6.0.0/doc/html/Prelude.html\n
  \   \n    darcs-hash:20130514142204-ed0c8-2f42878bb90002ddf2dab4443130a21e8d8a141b.gz\n\ncommit
  4418c6e99cfb959fddeaf6ba8d6ed258091c5ffa\nAuthor: jwlato <jwlato@gmail.com>\nDate:
  \  Sun Jan 16 04:04:50 2011 -0800\n\n    add some type signatures to CCNF.lhs\n
  \   \n    Ignore-this: 398ad2e31a3a5b946b22e7c19fd5c9a7\n    \n    darcs-hash:20110116120450-2a6de-65ada54dfbac99bc90a83d37eb331335846ccaa9.gz\n\ncommit
  d2329a5999e4c6cbd280273e4cbb67be450379fd\nAuthor: jwlato <jwlato@gmail.com>\nDate:
  \  Sun Dec 5 11:59:35 2010 -0800\n\n    add \"normOpt\" result for \"Arr\" constructor
  (pure function arrows)\n    \n    Ignore-this: cb14152c16918dd7073f0e2bc79b7ee6\n
  \   \n    darcs-hash:20101205195935-2a6de-5e369dae27fee09f65d44decb1320a15ec1007cb.gz\n\ncommit
  e640e5a3701cff5d348cdae511a0bbd7e36aa817\nAuthor: paul <paul@thev.net>\nDate:   Mon
  Apr 12 21:01:06 2010 -0700\n\n    Normalize to loopD instead of loopB\n    \n    Ignore-this:
  104960eb5f2f07ba6871b4417fbe578c\n    add more test cases\n    add support for GHC
  6.12.1\n    bump version to 0.1.3.\n    \n    darcs-hash:20100413040106-da8e5-faa3202650da21b0a5ffe59de89d77034fa897da.gz\n\ncommit
  6fee434ae8366b4e766c085d613fd863a01bd54c\nAuthor: paul <paul@thev.net>\nDate:   Thu
  Sep 10 04:48:37 2009 -0700\n\n    initial code import from CCA-0.1.1\n    \n    Ignore-this:
  881e07e5163079af2723890e4d84a005\n    \n    darcs-hash:20090910114837-da8e5-391db8611a4682f6f5f49002af22f95fe6e7265d.gz\n"
changelog-type: text
description: "A prototype preprocessor for arrow notation.\n\nRoss Paterson <ross@soi.city.ac.uk>\n\nNote
  that recent versions of GHC support this notation directly, and\ngive better error
  messages to boot.\n\nRUNNING THE ARROW PREPROCESSOR\n\nThe program supports the
  following options:\n\n\t--pretty=STYLE\tpretty print in STYLE\n\t\t\t[offside|semicolon|inline|none]
  (default = offside)\n\t--help\t\tdisplay usage information\n\nTypically you create
  a Haskell module using the extended syntax, and\ncall it Foo.as (for arrow script).
  \ To convert this into a corresponding\nHaskell module, you say\n\n\tarrowp Foo.as
  >Foo.hs\nor\n\tarrowp Foo.as Foo.hs\n\nand then use Foo.hs with your favourite Haskell
  implementation.\nYou can also run it with no arguments at all:\n\n\tarrowp <Foo.as
  >Foo.hs\n\nbut then it won't have a file name to put in the error messages.\nSometimes
  the input has already been preprocessed, e.g. with unlit\n(from the GHC distribution).
  \ For this situation, you can specify both\nthe original file name (for error messages)
  and the input file name, as\nwell as the output file name (which is obligatory in
  this situation), e.g.\n\n\tunlit Foo.las Foo.as\n\tarrowp Foo.las Foo.as Foo.hs\n\nor
  equivalently as\n\n\tunlit Foo.las - | arrowp Foo.las - Foo.hs\n\n(both unlit and
  arrowp allow filename arguments of \"-\", meaning standard\ninput or output as appropriate.)\n\nWARNING:
  if you give the program 2 (or 3) arguments, the last one will\nbe overwritten.\n\nDIAGNOSING
  ERRORS IN YOUR CODE\n\nSyntax errors will be detected by the preprocessor, and the
  position in\nthe source where they were detected is reported.  (As usual, the actual\nerror
  may occur earlier.)  The preprocessor understands Haskell 98 plus\nmultiparameter
  type classes and the arrow extensions, but not some of\nthe other extensions supported
  by various Haskell implementations.\nThe preprocessor doesn't handle operator precedence,
  so it may copy\nsome erroneous expressions like `x == y == z'.  Otherwise, the output\nof
  the preprocessor should not generate any syntax errors -- if it does,\nplease report
  it.\n\nSemantic errors are more difficult for simple preprocessors like this one.\nThey
  will be detected by your Haskell implementation, whether they occur\nin the Haskell
  part or the arrows part, and are thus rather hard to\ntrace back to the original
  source.  If you use --pretty=none and feed\nthe output to GHC, the error it reports
  will refer to the first line\nof the declaration containing the error.  But if you
  need to read the\npreprocessor output to find the problem, omit the --pretty option.\n\nYou
  can reduce the above problems by putting the parts of your program\nthat need arrow
  syntax (and thus the preprocessor) in separate modules.\n\nBUGS\n\n- there is no
  type checking until the output is compiled,\n  resulting in incomprehensible error
  messages.\n- failable patterns are not handled as promised yet.\n  (And I'm starting
  to think they shouldn't be.)\n\nSOURCE NOTES\n\nThis is based on hsparser, by Sven
  Panne, Simon Marlow and Noel Winstanley.\nIt is now the haskell-src package distributed
  with GHC.\n\nMy changes are\n\n\tLexer -- a few lines adding extra symbols (all
  marked)\n\tParser -- a few marked lines and several rules at the end,\n\t\tmostly
  modified versions of existing rules.\n\tArrSyn, ArrCode, Utils -- new modules for
  arrow syntax.\n\nThe parser gives 2 shift/reduce conflicts, inherited from the original.\n\nThere
  was a reduce/reduce conflict:\n\n\tqual -> 'let' declist .\n\tqualA -> 'let' declist
  .\n\nbut I've kludged the grammar (see stmtA) to avoid it.\n"
description-type: text
hash: edd75c04d924ff1cf042a2e845b3c6e32da6eacc273865de5d9f0c9726c7f6f7
homepage: not available
latest: 0.1.5.3
license-name: BSD-3-Clause
maintainer: Paul H Liu <paul@thev.net>
synopsis: preprocessor and library for Causal Commutative Arrows (CCA)
test-bench-deps: {}
