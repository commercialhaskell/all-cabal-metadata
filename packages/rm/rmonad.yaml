all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- '0.6'
- '0.7'
- '0.8'
- 0.8.0.1
- 0.8.0.2
author: ''
basic-deps:
  base: <5
  containers: '>=0'
  suitable: '>=0.1 && <0.2'
  transformers: '>=0'
changelog: ''
changelog-type: ''
description: |2

  rmonad provides a restricted monad class in the Control.RMonad hierarchy.
  The class makes use of associated datatypes (available in GHC 6.8),
  using an idea learnt from Wolfgang Jeltsch:
  http://www.haskell.org/pipermail/haskell-cafe/2008-March/041084.html

  It also provides a way to treat a restricted monad as a normal monad
  using a generic wrapper type. This idea is described here:
  http://hsenag.livejournal.com/11803.html?nc=5

  See the haddock documentation for information on how to use it.

  darcs get http://code.haskell.org/rmonad

  TODO

  Add instances for all the mtl stuff. Consider also doing this for mtl-tf
  (namespacing issues?)

  Add all the normal monad combinators

  Should we use Monad etc rather than RMonad etc for naming?
   - Pro: standard modern namespacing conventions
   - Anti: Module names need to be different to allow co-existence

  Do we actually want RApplicative etc? Nasty because most restrictions aren't much use on function types
  DSELs are a good example of where Suitable could be closed over function types
description-type: text
hash: c91ddfffef7f6da59645460c844627ac5f4004f40fbeb5d90b60e14fc0de7ffc
homepage: ''
latest: 0.8.0.2
license-name: BSD-3-Clause
maintainer: Ganesh Sittampalam <ganesh@earth.li>
synopsis: Restricted monad library
test-bench-deps:
  HUnit: '>=0'
  base: '>=0'
  containers: '>=0'
  rmonad: '>=0'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
