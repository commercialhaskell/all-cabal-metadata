all-versions:
- 0.0.1.0
- 0.0.1.1
- 0.0.2.0
- 0.1.0.0
- 0.1.0.1
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
author: Daniel Firth
basic-deps:
  base: '>=4.7 && <5'
  comonad: '>=0'
  exceptions: '>=0'
  free: '>=0'
  hashable: '>=0'
  path: '>=0'
  path-like: '>=0.2.0.0'
changelog: |
  # Changelog for within

  ## v0.2.0.0

  * Add [path-like](https://hackage.haskell.org/package/path-like) and `PathLike` instance.

  ## v0.1.0.0

  * Change approach to `ComonadEnv` style newtype. `Within` can now store an arbitrary
    inner type whilst maintaining the convenience functions in the special case where
    the inner type is a `Path`.

  ## v0.0.2.0

  * Add `Hashable` and `Ord` instances for `Within`.

  ## v0.0.1.0

  * Add Within Type based on [path](https://hackage.haskell.org/package/path).
  Within is a path within another path.
  * Add several functions for moving between directories and mapping source
    names.
changelog-type: markdown
description: |
  # Within

  `Within` is a type for simply scoping well-typed paths. A `Within b a` is
  simply an `Env` comonad with the environment specialised to `Path b Dir`. This
  is useful for when you want to keep track of things that live within a parent
  folder and need the extra degree of articulation. You can construct a value `a`
  living within a `Path b Dir` using the `within` infix operator.

  ```{.haskell}
  5 `within` $(mkRelDir "foo")
  ```

  There are also convenience functions for dealing with the special case where
  the inner type is a `Path Rel File`, which represents a path to a file within a
  directory. This does not need to be an immediate child of the directory, and
  does not have to exist. You can assert that you can assert that an existing
  path lies in a directory by using `asWithin`, which throws if the directory is
  not a proper prefix of the `Path`.

  ```{.haskell}
  $(mkRelFile "foo/a.txt") `asWithin` $(mkRelDir "foo") -- fine
  $(mkRelFile "a.txt") `asWithin` $(mkRelDir "foo") -- throws NotAProperPrefix Exception
  ```

  You can also use `fromWithin` to get from a `Within a (Path Rel t)` to a `Path a t`.

  There are also `Eq`, `Show` and `Hashable` instances when the extract target is of
  that class.
description-type: markdown
hash: dc0a0cbd5143ef0a78d18a32424b570df901eb645d6a9347e6585e74125f5959
homepage: ''
latest: 0.2.0.1
license-name: MIT
maintainer: dan.firth@homotopic.tech
synopsis: A value within another path.
test-bench-deps: {}
