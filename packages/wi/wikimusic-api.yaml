all-versions:
- 1.1.0.1
- 1.2.0.8
author: Josep Bigorra
basic-deps:
  HTTP: '>=0'
  aeson: '>=0'
  async: '>=0'
  base: <5
  base64-bytestring: '>=0'
  beam-core: '>=0'
  beam-sqlite: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  contravariant-extras: '>=0'
  directory: '>=0'
  filepath: '>=0'
  free-alacarte: '>=0'
  keuringsdienst: '>=0'
  keys: '>=0'
  mime-mail: '>=0'
  mtl: '>=0'
  neat-interpolation: '>=0'
  openapi3: '>=0'
  optics: '>=0'
  optparse-applicative: '>=0'
  password: '>=0'
  password-types: '>=0'
  prometheus-client: '>=0'
  prometheus-metrics-ghc: '>=0'
  relude: '>=0'
  servant: '>=0'
  servant-openapi3: '>=0'
  servant-server: '>=0'
  smtp-mail: '>=0'
  sqlite-simple: '>=0'
  text: '>=0'
  time: '>=0'
  tomland: '>=0'
  uuid: '>=0'
  wai: '>=0'
  wai-cors: '>=0'
  wai-extra: '>=0'
  wai-logger: '>=0'
  wai-middleware-prometheus: '>=0'
  warp: '>=0'
  wikimusic-api: '>=0'
  wikimusic-api-spec: '>=0'
  wikimusic-model-hs: '>=0'
  word8: '>=0'
  yggdrasil-schema: '>=0'
changelog: ''
changelog-type: ''
description: "#+title: WikiMusic API\n\nAPI and Persistence layer to SQLite for WikiMusic,
  the invite-only private knowledge sharing of music community.\n\n/WikiMusic/\n\n#+begin_html\n<div>\n<img
  src=\"https://img.shields.io/badge/Haskell-5D4F85?logo=haskell&logoColor=fff&style=plastic\"
  alt=\"Haskell\"/>\n<img src=\"https://img.shields.io/badge/SQLite-4169E1?logo=sqlite&logoColor=fff&style=plastic\"
  alt=\"SQLite\"/>\n<img src=\"https://img.shields.io/badge/NixOS-5277C3?logo=nixos&logoColor=fff&style=plastic\"
  alt=\"NixOS\"/>\n<img src=\"https://img.shields.io/badge/GNU%20Emacs-7F5AB6?logo=gnuemacs&logoColor=fff&style=plastic\"
  alt=\"GNU Emacs\"/>\n</div>\n#+end_html\n\n\nWikiMusic as a software means an ingenious
  combination of a backend, a REST API, a database, and a user-interface to create
  a Content Management System (CMS) and a Gallery for music of all kinds, with educational
  intents.\n\nThis is 100% free software, licensed under the GNU General Public License
  v3 or later.\n[[https://www.gnu.org/licenses/gpl-3.0.en.html][Refer to the full
  license, on GNU's website]]\n\nThe WikiMusic project is an invite-only community,
  with the goal of knowledge sharing, and not for profit driven.\n\n[[https://www.buymeacoffee.com/jjbigorra][Please
  donate by clicking here]]. This helps us keep the underlying cloud infrastructure
  and Joe's work hours going strong.\n\nIn this Git repository you will find the source
  code behind WikiMusic's backend.\n\nTo see the living API spec of WikiMusic, also
  known as API definition, go to [[file:src/WikiMusic/Servant/ApiSpec.hs]]\n\n** Project
  structure\n\n~src/WikiMusic/~ harbours the Haskell code that makes the API work.
  Inside there you will find:\n- ~Console~ is a package with functionality related
  to logging to console / stdout.\n- ~Free~ is a package with free monadic definitions
  of the possible interactions with the WikiMusic system.\n- ~Interaction~ is a package
  with the implementation agnostic \"business logic\" of the WikiMusic system.\n-
  ~Model~ is a package with common data models to the entire system.\n- ~Persistence~
  is a package with the Persistence implementation of several ~Command~ and ~Query~
  interactions.\n- ~Smtp~ is a package that contains Smtp Mail related implementations.\n-
  ~Servant~ is a package that contains the API definition, routes and wiring of HTTP.\n-
  ~Boot.hs~ is the entry point to start this REST API.\n- ~Protolude.hs~ contains
  a custom tailor-made standard library (prelude) for WikiMusic, which helps developing.\n\n**
  Implementation details\n\nWikiMusic API is made using Haskell and free(er) monad
  techniques, along with great libraries made by the brilliant Haskell community.
  Some worthy mentions include servant, free-alacarte, wai, keuringsdienst, optics.\n\nUsing
  free(er) monads means that we can describe the business logic of certain layers
  at a very high abstraction level, and we are free to interpret this logic as we
  see fit, depending on the use case. This helps testing, decoupling, and maintaining
  code.\n\n** Installing and running\n\nThis Haskell project requires certain C /
  C++ libraries to run. Pay attention the the error messages at build time and install
  dependencies accordingly.\n\nWe recommend running WikiMusic API with the Nix package
  manager, and even better with NixOS, since this project has a close integrations
  for NixOS machines.\n\nOtherwise, on systems like Void Linux :\n#+begin_src\nsudo
  xbps-install zlib zlib-devel ncurses-libtinfo-devel\n#+end_src\n\nYou will also
  need a SQLite database to be accessible from WikiMusic API and running.\n\nWikiMusic
  will take care of the database schema migrations for you.\n\nThere are also example
  docker compose files ready to be used at the ~resources~ folder for your convenience.\n\n*
  User permission\n\nIn WikiMusic we have users of several kinds, with different privileges.
  See the table below for an understanding on what you can/cannot do depending on
  your rank.\n\nDemo user:\n\n| Resource | Create | Read | Update | Delete | Comment
  | Like/Dislike |\n|----------+--------+------+--------+--------+---------+--------------|\n|
  Song     | ❌     | ✅   | ❌     | ❌     | ✅      | ✅           |\n| Artist   | ❌
  \    | ✅   | ❌     | ❌     | ✅      | ✅           |\n| Genre    | ❌     | ✅   |
  ❌     | ❌     | ✅      | ✅           |\n| User     | ❌     | ❌   | ❌     | ❌     |
  N/A     | N/A          |\n\nLow-rank user:\n\n| Resource | Create | Read | Update
  | Delete | Comment | Like/Dislike |\n|----------+--------+------+--------+--------+---------+--------------|\n|
  Song     | ✅     | ✅   | ✅     | ❌     | ✅      | ✅           |\n| Artist   | ✅
  \    | ✅   | ✅     | ❌     | ✅      | ✅           |\n| Genre    | ✅     | ✅   |
  ✅     | ❌     | ✅      | ✅           |\n| User     | ❌     | ❌   | ❌     | ❌     |
  N/A     | N/A          |\n\nMaintainer user:\n\n| Resource | Create | Read | Update
  | Delete | Comment | Like/Dislike |\n|----------+--------+------+--------+--------+---------+--------------|\n|
  Song     | ✅     | ✅   | ✅     | ✅     | ✅      | ✅           |\n| Artist   | ✅
  \    | ✅   | ✅     | ✅     | ✅      | ✅           |\n| Genre    | ✅     | ✅   |
  ✅     | ✅     | ✅      | ✅           |\n| User     | ✅     | ✅   | ✅     | ❌     |
  N/A     | N/A          |\n\nSuper-user: can do everyting to the system!\n\n* NixOS\n\nEnter
  a nice shell provided by flakes, by doing ~nix develop~. You can also do ~nix build~
  to build the project with Nix.\n\nRun the API with for example: ~nix run . -- \"./resources/config/run-local.toml\"~
  .\n\n\n** Bare metal\n\nIt can be needed, if you want to run bare metal without
  direnv, to do things like this sometimes in the ~cabal.project~ (find by ~find /nix
  -name \"zlib.h*\"~):\n\n#+begin_src nix\npackage zlib\n    extra-include-dirs: /nix/store/686lhcz4bwg3wk09pi1xxjgzbxv7ys5q-zlib-1.3-dev/include\n
  \   extra-lib-dirs: /nix/store/4rx3vkkd91wkbhpflsplfga603cp1l1c-zlib-1.3/lib\n#+end_src\n\n*
  API documentation\n\nWhen running WikiMusic API, you can navigate to ~<url where
  you serve it>/swagger.json~ to get the OpenAPI spec for WikiMusic.\n\n\n* Example
  config file\n\nFor local runs you can take a look at [[file:resources/config/run-local.toml]].\n\n*
  Production environment diagram\n\n#+begin_src dot :file resources/images/production-env-diagram.png
  :exports results :mkdirp yes\n  digraph prodenv {\n  subgraph clusterA {\n  fontname=\"Inter,Helvetica,Arial,sans-serif\"\n
  \ node [ shape=\"box\", fontname=\"Inter,Helvetica,Arial,sans-serif\" ]\n  edge
  [ fontname=\"Inter,Helvetica,Arial,sans-serif\", arrowhead=\"rnormal\", arrowtail=\"dot\"
  ]\n\n  I1 [ label=\"api.wikimusic.jointhefreeworld.org via HTTPS\" ]\n  I2 [ label=\"AWS
  Cloudfront\" ]\n  I3 [ label=\"AWS EC2 t3.small instance\\nrunning NixOS\" ]\n  I4
  [ label=\"Haskell + Servant + SQLite\" ]\n  I5 [ label=\"GitLab CI/CD\" ]\n  I6
  [ label=\"AWS SQS queue\" ]\n\n\n  I1 -> I2;\n  I2 -> I3;\n  I3 -> I4;\n  I5 ->
  I6;\n  I3 -> I6;\n\n  }\n  }\n#+end_src\n\n#+RESULTS:\n[[file:resources/images/production-env-diagram.png]]\n\n\n*
  Project management\n\nFind below a list ideas and work being done on this project
  by all our contributors.\n\n** Work in progress\n*** WIP Finish cleaning persistence
  layer by using only Beam for all queries\n\n\n** Project backlog\n*** TODO Automated
  Cabal Hackage release in CI and version bumps\n*** TODO Recently viewed functionality\n***
  TODO Add optional lyrics for song textfield\n*** TODO Clock and identifier generation
  as free monads, take things to a higher level\n*** TODO Create and optimize custom
  Prelude, and clean all files imports\n*** TODO Improve reusability in ~fromString
  . T.unpack $ x~\n*** TODO Liked items list view (liked songs, liked genres)\n\n***
  TODO Create \"for profit\" version (premium offline pre-rendered) of WikiMusic,
  as app (read-only)\n*** TODO Ensure all data models are validated in requests\n***
  TODO Use more non-empty types and sets if possible\n*** TODO Remove unused dependencies\n***
  TODO Create black box tests for basic system functioning (with SQLite )\n****  Create
  SQLite assertion DSL for tests with Beam (check row exists)\n*** TODO Genre <> Song
  <> Artist relation\n*** TODO Drop SQL tables of user favourites, since opinions
  table will be used for it\n*** TODO Add forums \n*** TODO Validate and limit size
  and type of files being uploaded\n**** TODO GP5 support (song file upload)\n***
  TODO extract mail monad, service, templates and views into its own microservices,
  communicate via grpc if possible, otherwise REST and ensure retries and good logging\n***
  TODO Prometheus metrics and visualizations, use Grafana in Docker, also in production
  server\n*** TODO wikimusic marketing emails, asking for donation, recommending last
  added and last edited top 10 items\n*** TODO WikiMusic email about new website and
  its changelog, every commit automatic mail users?, new capabilities to all users
  marketing\n\n\n** Done\n*** DONE Migration to GitHub\nCLOSED: [2024-09-04 wo 22:05]\n***
  DONE fix email, do not expose Smtp credentials on GitHub\nCLOSED: [2024-09-04 wo
  17:23]\n"
description-type: text
hash: 51fa5ffdd1f4864c418f44b79116cf9366c00bde71db8c3b0cff1224fca6e39f
homepage: https://codeberg.org/jjba23/wikimusic-api
latest: 1.2.0.8
license-name: GPL-3.0-only
maintainer: Josep Bigorra <jjbigorra@gmail.com>
synopsis: ''
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  beam-core: '>=0'
  beam-sqlite: '>=0'
  containers: '>=0'
  directory: '>=0'
  hspec: '>=0'
  http-client: '>=0'
  http-types: '>=0'
  keuringsdienst: '>=0'
  neat-interpolation: '>=0'
  optics: '>=0'
  password: '>=0'
  password-types: '>=0'
  random: '>=0'
  relude: '>=0'
  sqlite-simple: '>=0'
  tasty: '>=0'
  tasty-hspec: '>=0'
  text: '>=0'
  time: '>=0'
  uuid: '>=0'
  wai: '>=0'
  wai-logger: '>=0'
  wikimusic-api: '>=0'
  wikimusic-api-spec: '>=0'
  wikimusic-model-hs: '>=0'
  yggdrasil-schema: '>=0'
