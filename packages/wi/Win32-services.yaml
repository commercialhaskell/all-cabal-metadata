all-versions:
- '0.1'
- 0.2.3
- 0.2.3.1
- 0.2.4
- 0.2.5
- 0.2.5.1
- '0.3'
- '0.4'
- 0.4.0.1
author: Michael Steele
basic-deps:
  Win32: '>=2.2 && <2.15'
  Win32-errors: '>=0.2 && <0.3'
  base: '>=4.5 && <5.0'
changelog: "# 0.4 series\r\n\r\n## 0.4.0.1\r\n\r\n* Update library dependencies to
  support GHC 8.6.5\r\n\r\n## 0.4\r\n\r\n* First released version that works for 64-bit
  GHC.\r\n  Before it only worked with 32-bit GHC.\r\n\r\n# 0.3 series\r\n\r\n## 0.3.1\r\n\r\n*
  Make it work with 64-bit GHC.\r\n\r\n* Update examples, to use ErrCode and Success
  from System.Win32.Error\r\n\r\n## 0.3\r\n\r\n* Bumped the version number.\r\n\r\n#
  0.2 series\r\n\r\n## 0.2.5.1\r\n\r\n* bugfix in \"simple\" example.\r\n\r\n## 0.2.5\r\n\r\n*
  Update library dependencies to support GHC 7.10.1.\r\n* Remove dependency on \"errors\"
  library.\r\n\r\n## 0.2.4\r\n\r\n* bug fix: eRROR_SERVICE_SPECIFIC_ERROR was mapped
  to the wrong code.\r\n\r\n* Add upper-version bounds to build dependencies.\r\n\r\n##
  0.2.3\r\n\r\n* Update library dependencies to support GHC 7.8.\r\n\r\n## 0.2.2\r\n\r\n*
  Update library dependencies to support GHC 7.6.\r\n\r\n## 0.2.1\r\n\r\n* bug fix:
  Services were failing to enter a STOPPED state. It is now the\r\n  user's responsibility
  to enter a stopped state in the service main function.\r\n  The 'startServiceCtrlDispatcher'
  function will continue to automatically put\r\n  the service into a START_PENDING
  state.\r\n\r\n## 0.2\r\n\r\n* Writing services of the WIN32_OWN_PROCESS type is
  now easier. Handler\r\n  registration is performed automatically. By the time the
  service main\r\n  function is entered, the service will already be in the 'START_PENDING'\r\n
  \ state. It is the user's responsibility to enter the 'RUNNING' state as soon\r\n
  \ as possible.\r\n\r\n* Once the service main function exits two things will occur.
  The service\r\n  will enter the 'STOPPED' state, and the handler function will be
  freed.\r\n\r\n* The 'registerServiceCtrlHandlerEx' function is no longer\r\n  exported.
  Handlers are registered automatically by the\r\n  'startServiceCtrlDispatcher' function.\r\n\r\n*
  The 'queryServiceStatus' function has been added.\r\n\r\n# 0.1 series\r\n\r\n##
  0.1\r\n\r\n* First release\r\n"
changelog-type: text
description: |
  This package provides a partial binding to the Win32 System Services
  API. It makes it easy to write Windows service applications using
  Haskell. This version supports both 32-bit and 64-bit versions of GHC.

  The binding is partial. Here are a few ways in which it differs from the
  official API:

  * Only services running within their own process are supported. These are
  processes of the "WIN32_OWN_PROCESS" type.

  * In cases where multiple versions of the same function exist (for
  compatibility), this binding only offers one of them.

  * None of the extended control codes are supported. Handlers you write will
  automatically report this to the operating system when such controls are
  received.

  * Only facilities for writing services are supported; not controlling them.

  Effort has been made to simplify using the API without hiding what is
  happening behind the scenes. Users are encouraged to read Microsoft's
  documentation under 'Dev Center - Desktop > Docs > Desktop app development
  documentation > System Services > Services'. The official example has been
  ported to Haskell. This can be found in the 'examples' directory of the
  source tree.

  /Simple Example and Usage/

  @
  module Main where

  import Control.Concurrent.MVar
  import System.Win32.Services

  main = do
  &#x20;   mStop <- newEmptyMVar
  &#x20;   startServiceCtrlDispatcher \"Test\" 3000 (handler mStop) $ \\_ _ h -> do
  &#x20;       setServiceStatus h running
  &#x20;       takeMVar mStop
  &#x20;       setServiceStatus h stopped

  handler mStop hStatus Stop = do
  &#x20;   setServiceStatus hStatus stopPending
  &#x20;   putMVar mStop ()
  &#x20;   return True
  handler _ _ Interrogate = return True
  handler _ _ _           = return False

  running = ServiceStatus Win32OwnProcess Running [AcceptStop] nO_ERROR 0 0 0
  stopped = ServiceStatus Win32OwnProcess Stopped [] nO_ERROR 0 0 0
  stopPending = ServiceStatus Win32OwnProcess StopPending [AcceptStop] nO_ERROR 0 0 0
  @

  @
  C:\programming\test\>ghc --make -threaded Main.hs
  [1 of 1] Compiling Main             ( Main.hs, Main.o )
  Linking Main.exe ...
  \<linker warnings omitted\>
  C:\\programming\\test\>copy Main.exe c:\\svc\\Test.exe
  1 file(s) copied.
  @

  Execute the following from an elevated command prompt to register the
  service:

  @
  C:\\svc\>sc create Test binPath= c:\\svc\\Test.exe
  [SC] CreateService SUCCESS
  @

  The service can now be started and stopped from the services console.

  Installation Notes:

  Depending on which version of GHC you are using you may also need to add
  a extra-lib-dirs directive. In GHC version 8.4.3 it works out of the box with
  the libadvapi32.a file in ...\\mingw\\x86_64-w64-mingw32\\lib.
  For older version you need to use a version from a Windows SDK. Your
  .cabal file will then need to be modified before installing. A simple `cabal
  install Win32-services` may not work. For example, If you are building on
  Windows 8 64-bit with the Windows 8 SDK the 'extra-lib-dirs' field will need
  to be changed to read as follows:

  @
  Extra-Lib-Dirs: \"C:\\\\Program Files (x86)\\\\Windows Kits\\\\8.0\\\\Lib\\\\win8\\\\um\\\\x86\"
  @

  If building with stack an option is to set it in stack.yaml.
  For example with the Windows 10 SDK installed with Build Tools for Visual Studio 2017:

  @
  extra-lib-dirs:
  - C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.15063.0\\um\\x64
  @
description-type: haddock
hash: 4972854be14f8e67fda7c1ad30aeaf73c517f7e1bdcb3447036036455eeb7db0
homepage: http://github.com/mikesteele81/win32-services
latest: 0.4.0.1
license-name: BSD-3-Clause
maintainer: Michael Steele <mikesteele81@gmail.com>
synopsis: Windows service applications
test-bench-deps: {}
