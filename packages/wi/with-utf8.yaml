all-versions:
- 1.0.0.0
- 1.0.1.0
- 1.0.2.0
- 1.0.2.1
- 1.0.2.2
- 1.0.2.3
- 1.0.2.4
- 1.1.0.0
author: Kirill Elagin <kirelagin@serokell.io>
basic-deps:
  base: '>=4.10 && <4.21'
  directory: '>=1.2.5.0 && <1.4'
  filepath: '>=1.0 && <1.6'
  process: '>=1.0.1.1 && <1.7'
  safe-exceptions: '>=0.1 && <0.2'
  text: '>=0.7 && <2.2'
  th-env: '>=0.1.0.0 && <0.2'
changelog: |
  # Changelog


  ## 1.1.0.0

  ### Changed

  - Allow newer versions of base and text to support GHC up to 9.8.
  - Deprecate Data.Text.IO.Utf8.


  ## 1.0.2.4

  ### Changed

  - Allow base 4.17, 4.18 (GHC 9.4, 9.6).
  - Allow text<2.1


  ## 1.0.2.3

  Support GHC 9.2.1.

  ### Changed

  - Allow base 4.16 (GHC 9.2.1).


  ## 1.0.2.2

  Windows support.

  ### Changed

  - Fix `utf8-troubleshoot` on Windows.


  ## 1.0.2.1

  A technical clean up release.

  ### Changed

  - Specify missing version bounds for dependencies.


  ## 1.0.2.0

  Improve `utf8-troubleshoot` to make it useful for identifying tricky cases.

  ### Changed

  - `utf8-troubleshoot`: improve available locale detection
  - `utf8-troubleshoot`: display raw results from C libraries


  ## 1.0.1.0

  GHC 8.10 compatibility and a new troubleshooting tool.

  ### Added

  - `utf8-troubleshoot` – the troubleshooting tool

  ### Changed

  - Bump `base` for GHC 8.10


  ## 1.0.0.0

  Initial release.

  ### Added

  - `withUtf8`
  - `withStdTerminalHandles`
  - `setHandleEncoding`
  - `withHandle`
  - `setTerminalHandleEncoding`
  - `withTerminalHandle`
  - `openFile`
  - `withFile`
  - `readFile`
  - `writeFile`
changelog-type: markdown
description: |
  # `with-utf8`

  Get your IO right on the first try.

  Reading files in Haskell is trickier than it could be due to the non-obvious
  interactions between file encodings and system locale. This library is meant
  to make it easy once and for all by providing “defaults” that make more sense
  in the modern world.

  See [this blog post][blog:post] for more details on why this library needs to
  exists and an explanation of some of the opinionated decisions it is based on.

  [blog:post]: https://serokell.io/blog/haskell-with-utf8


  ## Use

  See the documentation on Hackage for details, this is a quick summary.

  ### Step 1: Get it

  The [library is on Hackage][hackage:with-utf8],
  go ahead and add it to the dependencies of your project.

  [hackage:with-utf8]: https://hackage.haskell.org/package/with-utf8

  ### Step 2: Wrap your `main`

  Import `withUtf8` from `Main.Utf8` and wrap it around your `main`:

  ```haskell
  import Main.Utf8 (withUtf8)

  main :: IO ()
  main = withUtf8 $
    {- ... your main function ... -}
  ```

  This will make sure that if your program reads something from `stdin` or
  outputs something to `stdout`/`stderr`, it will not fail with a runtime
  error due to encoding issues.

  ### Step 3: Read files using UTF-8

  If you are going to read a text file (to be precise, if you are going to open
  a file in text mode), you’ll probably use `withFile`, `openFile`, or `readFile`.
  Grab the first two from `System.IO.Utf8` or the latter from `Data.Text.IO.Utf8`.
  Starting from `text-2.1`, `Data.Text.IO.Utf8` is available in the `text` package
  itself, hence this module in `with-utf8` is now deprecated.

  _Note: it is best to import these modules qualified._

  _Note: there is no `System.IO.Utf8.readFile` because it’s 2024 and
  you should not read `String`s from files._

  All these functions will make sure that the content will be treated as if it
  was encoded in UTF-8.

  If, for some reason, you really need to use `withFile`/`openFile` from `base`,
  or you got your file handle from somewhere else, wrap the code that works
  with it in a call to `withHandle` from `System.IO.Utf8`:

  ```haskell
  import qualified System.IO as IO
  import qualified System.IO.Utf8 as Utf8

  doSomethingWithAFile :: IO.Handle -> IO ()
  doSomethingWithAFile h = Utf8.withhandle h $ do
      {- ... work with the file ... -}
  ```

  ### Step 4: Write files using UTF-8

  When writing a file either open it using `withFile`/`openFile` from
  `System.IO.Utf8` or write to it directly with `writeFile` from
  `Data.Text.IO.Utf8`.
  Starting from `text-2.1`, `Data.Text.IO.Utf8` is available in the `text` package
  itself, hence this module in `with-utf8` is now deprecated.

  _Note: it is best to import these modules qualified._

  _Note: there is no `System.IO.Utf8.writeFile`._

  If, for some reason, you really need to use `withFile`/`openFile` from `base`,
  do the same as in the previous step.

  ## Troubleshooting

  Locales are pretty straightforward, but some people might have their terminals
  misconfigured for various reasons. To help troubleshoot any potential issues,
  this package comes with a tool called `utf8-troubleshoot`.

  This tool outputs some basic information about locale settings in the OS and
  what they end up being mapped to in Haskell. If you are looking for help,
  please, provide the output of this tool, or if you are helping someone,
  ask them to run this tool and provide the output.

  ## Contributing

  If you encounter any issues when using this library or have improvement ideas,
  please open report in issue on GitHub. You are also very welcome to submit
  pull request, if you feel like doing so.


  ## License

  [MPL-2.0] © [Serokell]

  [MPL-2.0]: https://spdx.org/licenses/MPL-2.0.html
  [Serokell]: https://serokell.io/
description-type: markdown
hash: fa2572f401717243e4f0daa08c0d46270d8ff41f7528e3e91847e14324034ec8
homepage: https://github.com/serokell/haskell-with-utf8#readme
latest: 1.1.0.0
license-name: MPL-2.0
maintainer: Kirill Elagin <kirelagin@serokell.io>
synopsis: Get your IO right on the first try
test-bench-deps:
  HUnit: '>=0'
  base: '>=4.10 && <4.21'
  deepseq: '>=0'
  hedgehog: '>=0'
  safe-exceptions: '>=0'
  tasty: '>=0'
  tasty-hedgehog: '>=0'
  tasty-hunit: '>=0'
  temporary: '>=0'
  text: '>=0.7 && <2.2'
  unix: '>=0'
  with-utf8: '>=0'
