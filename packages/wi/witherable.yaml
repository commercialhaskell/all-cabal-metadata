homepage: https://github.com/fumieval/witherable
changelog-type: markdown
hash: 81fd3b1e56e6d8c5b1acdbed06d49c72186902f7400139152afd70e37ad956d2
test-bench-deps:
  witherable: -any
  base: -any
  unordered-containers: -any
  containers: -any
  quickcheck-instances: -any
  tasty-quickcheck: -any
  hashable: -any
  transformers: -any
  tasty: -any
  QuickCheck: '>=2.14.2'
  vector: -any
maintainer: Fumiaki Kinoshita <fumiexcel@gmail.com>
synopsis: filterable traversable
changelog: |
  0.4.2
  -------

  * Supported GHC 9.2
  * Improved the instances for `vector`

  0.4.1
  -------
  * Added `ordNubBy`, `hashNubBy`, `ordNubByOf`, and `hashNubByOf`.
  * Use `alterF` for nub-function implementations
  * Implement `witherM` in `Witherable Vector` instance.
  * Mark modules as Trustworthy
  * `ordNub` and `hashNub` are productive, start to produce results immediately and work for infinite lists.

  0.4
  -------
  * `FilterableWithIndex` and `WitherableWithIndex` are now subclasses of the ones from [indexed-traversable](https://hackage.haskell.org/package/indexed-traversable)
  * Removed the orphan instances for `MonoidalMap`

  0.3.5
  -------

  * Make `wither` and `witherM` methods of `Witherable []` instance
    good consumers for list fusion.
  * Added instances for `Reverse`, `Backwards`, `ZipList`, and types from `GHC.Generics`
  * Added `Wither`, `WitherLike`, `Wither'` and `WitherLike'`, deprecating `Filter` and the variants
  * Moved `Filterable` and `Witherable` into a separate package, `witherable-class`

  0.3.4
  -------
  * Exported `WrappedFoldable`

  0.3.3
  -------

  * Added `FilterableWithIndex` and `WitherableWithIndex`.
  * Added `WrappedFoldable`

  0.3.2
  ----------

  * Added `Filterable (MonoidalMap k)` and `Witherable (MonoidalMap k)`

  0.3.1
  -------
  * Added `(<$?>)` as an alias for `mapMaybe`, with fixity matching `(<$>)`.
  * Added `(<&?>) = flip (<$?>)`, with fixity matching `(<&>)`.

  0.3
  -------
  * Added `(Filterable f, Filterable g) => Filterable (Product f g)`
  * Added `(Witherable f, Witherable g) => Witherable (Product f g)`
  * Added `(Filterable f, Filterable g) => Filterable (Sum f g)`
  * Added `(Witherable f, Witherable g) => Witherable (Sum f g)`
  * Added `Filterable f => Filterable (IdentityT f)`
  * Added `Witherable f => Witherable (IdentityT f)`
  * Switched from strict `HashMap` operations to lazy ones. This
    matches the behavior of the rest of the instances.
  * Changed the definition of `witherM`

  0.2
  -------
  * Added `Traversable t => Witherable (MaybeT t)`
  * New class: `Filterable`
    * `Witherable t` is equivalent to `(Traversable t, Filterable t)`
  * Removed `Chipped`

  0.1.3.3
  -------
  * Added `forMaybeOf` and `forMaybe`

  0.1.3.2
  -------
  * Exported `witherM`, `blightM`
  * Fixed the default definition of `catMaybes`

  0.1.3
  -------
  * Now `witherable` depends on `base-orphans` to prevent a tragedy of duplicate orphans
  * Added generalized combinators according to the `lens` convention

  0.1.2.3
  -------
  * Added `ordNub`, `hashNub`
  * Data.Witherable is now Trustworthy

  0.1.2.2
  -------
  * Added `Chipped`
basic-deps:
  indexed-traversable-instances: '>=0.1 && <0.2'
  base: '>=4.9 && <5'
  indexed-traversable: '>=0.1.1 && <0.2'
  unordered-containers: '>=0.2.12.0 && <0.3'
  base-orphans: '>=0.8.4 && <0.9'
  containers: '>=0.5.7.1 && <0.7'
  hashable: '>=1.2.7.0 && <1.5'
  transformers: '>=0.5.2.0 && <0.7'
  vector: '>=0.12.2.0 && <0.13'
all-versions:
- '0.0'
- '0.1'
- 0.1.1
- 0.1.1.1
- 0.1.2
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.3
- 0.1.3.2
- 0.1.3.3
- 0.1.3.4
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- '0.4'
- 0.4.1
- 0.4.2
author: Fumiaki Kinoshita
latest: 0.4.2
description-type: haddock
description: A stronger variant of `traverse` which can remove elements and generalised
  mapMaybe, catMaybes, filter
license-name: BSD-3-Clause
