all-versions:
- 1.0.0.0
author: Nathan Waivio
basic-deps:
  base: '>=4.7 && <5'
  cl3: '>=0'
  deepseq: '>=1.1 && <2'
  posit: '>=2022.0.1'
  random: '>=1.0 && <2'
changelog: |+
  # Revision history for cl3-posit

  ## 1.0.0.0  -- A Posit Cl3 Implementation

  * After a many year effort to implement Cl3 in Polymorphic Posit format
  * Branched cl3-posit-1.0 from the cl3-3.0.0.0 branch
  * Added a `Convert` class to Cl3, quite simular to the Posit Convert
  * Disabled benchmarks due to them being still under development

changelog-type: markdown
description: "\n```haskell\n--          CCCCCCCC      llllllllll                     3333333333\n--
  \     CCCCCCCCCCCCCCC    lllllllll                333333333333333333\n--    CCCCCCC
  \  CCCCCCCCC   lllllllll           3333333333       333333\n--   CCCCC            CCC
  \  llllllllll            333         ##   33333\n--  CCCCCC                   llllllllll
  \                      #    33333\n--  CCCCC                     llllllllll                          33333\n--
  \ CCCCC                       llllllllll          /      @    333333\n--  CCCCC
  \                       llllllllll        /|  +         33333\n--  CCCCC                        lllllllllll
  \      \\|  +         33333\n--  CCCCC                       lllllllllllll       \\
  \     @    333333\n--  CCCCC                     lllllll lllllll                     33333\n--
  \ CCCCC                    lllllll   lllllll                #    33333\n--   CCCCC
  \           CCC   lllllll     lllllll   333         ##   33333\n--    CCCCCCC    CCCCCCCCC
  lllllll       lllllll 3333333333       333333\n--      CCCCCCCCCCCCCCCC   lllllll
  \        lllllll   333333333333333333\n--          CCCCCCCCCC    lllllll           lllllll
  \     3333333333\n--\n--   \n--     PPPPPPP      OOO       SSSSSSS      IIIIIIIIII
  \ TTTTTTTTTTTTTTTT   \n--     PP    PP    O   O    SSS      SS        II             TT
  \           \n--     PP     PP  OO   OO SSS          S       II             TT            \n--
  \    PP     PP  OO   OO  SS                  II             TT            \n--     PP
  \   PP   OO   OO   S SSSSSSS          II             TT            \n--     PPPPPPP
  \   OO   OO     SSSSSSS S        II             TT            \n--     PP         OO
  \  OO             SS       II             TT            \n--     PP         OO   OO
  \  S         SSS      II             TT            \n--     PP          O   O     SS
  \    SSS        II             TT          \n--     PP           OOO       SSSSSSS
  \     IIIIIIIIII         TT            \n```\n\n\n\n# cl3-posit\n`cl3-posit` is
  a Haskell Library implementing standard functions for the [Algebra of Physical Space](https://en.wikipedia.org/wiki/Algebra_of_physical_space)
  Cl(3,0), using Posit Numbers as the Real approximation.\n\nThe goal of the `cl3-posit`
  library is to provide a specialized, safe, correct, Algebra of Physical Space implementation.\nThis
  library is suitable for physics simulations.  The library integrates into Haskell's
  standard prelude and has few dependencies.\nThe library uses a GADT data type to
  specialize to specific graded elements in the Algebra of Physical Space, implemented
  with a [posit](https://hackage.haskell.org/package/posit) Numbers as the Real approximation,
  prameterized over the word size.\n\n\n# GADT Interface\nThe constructors are specialized
  to single and double grade combinations and the general case of APS.\nUsing the
  specialized constructors helps the compiler to compile to code similar to that you
  would hand write.\nThe constructors follow the following conventions for basis.\n\n```haskell\nscalar
  = R e0\nvector = V3 e1 e2 e3\nbivector = BV e23 e31 e12\ntrivectorPseudoScalar =
  I e123\nparavector = PV e0 e1 e2 e3\nquarternion = H e0 e23 e31 e12\ncomplex = C
  e0 e123\nbiparavector = BPV e1 e2 e3 e23 e31 e12\noddparavector = ODD e1 e2 e3 e123\ntriparavector
  = TPV e23 e31 e12 e123\naps = APS e0 e1 e2 e3 e23 e31 e12 e123\n```\n# Usage\nIn
  MATLAB or Octave one can write: `sqrt(-25)` and get `5.0i`\n\nIn standard Haskell
  `sqrt (-25)` will produce `NaN`\n\nBut using the `cl3-posit` library `sqrt (-25)
  :: Cl3Posit64` will produce `I (5.00000000000000000000)`, and likewise `(I 5.0)^2`
  will produce `R (-25.00000000000000000000)`\n\nIf the unit imaginary is defined
  as `i = I 1`, expressions very similar to MATLAB can be formed `1.2 + 2.3*i` will
  produce `C (1.20000000000000000069) (2.29999999999999999931)`\n\nVector addition
  is also natural, two arbitrary vectors `v1 = V3 a1 a2 a3` and `v2 = V3 b1 b2 b3`
  can be added `v1 + v2` and scaled `2*(v1+v2)`\n\nThe dot product (inner product)
  of two arbitrary vectors is `toR $ v1 * v2`, that is the scalar part of the geometric
  product of two vectors.\n\nThe cross product is the Hodge Dual of the wedge product
  (outer product) `-i * toBV (v1*v2)`\n\nThe multiplication of two unit vectors is
  related to the rotor rotating from `u_from` to `u_to` like so `rot = sqrt $ u_to
  * u_from`\n\nAny arbitrary vector can be rotated by a rotor with the equation of
  `v' = rot * v * dag rot`\n\nRotors can also be formed with an axis unit vector `u`
  and real scalar angle `theta` in units of radians, it produces the versor (unit
  quaternion) `rot = exp $ (-i/2) * theta * u`\n\nFor special relativity with the
  velocity vector `v` and speed of light scalar `c`:\n* Beta is `beta = v / c`\n*
  Rapidity is `rapidity = atanh beta`\n* Gamma is `gamma = cosh rapidity`\n* Composition
  of velocities is simply adding the two rapidities and converting back to velocity\n*
  Proper Velocity is `w = c * sinh rapidity` or `w = gamma * v`\n* Four Velocity is
  a paravector `u = exp rapidity` where the real scalar part is `gamma * c` and the
  vector part is `w / c`\n* The Boost is `boost = exp $ rapidity / 2`\n\n# APS Basis\nWhere
  __e0__ is the scalar basis frequently refered to as \"1\", in other texts.\n\n__e1__,
  __e2__, and __e3__ are the vector basis of 3 orthonormal vectors.\n\n__e23__, __e31__,
  and __e12__ are the bivector basis, these are formed by the outer product of two
  vector basis. For instance in the case of __e23__, the outer product, or wedge product,
  is __e2__ /\\ __e3__, but because this can be simplified to the geometric product
  of __e2__ * __e3__ because the scalar part is zero for orthoginal vector basis'.
  \ The geometric product of the two basis vectors is further shortened for brevity
  to __e23__.\n\n__e123__ is the trivector basis, and is formed by the wedge product
  of __e1__ /\\ __e2__ /\\ __e3__, and likewise shortened to __e123__\n\n\n# Multiplication
  of the basis elements\nThe basis vectors multiply with the following multiplication
  table:\n\n|    Mult  |   e0 |   e1 |   e2 |   e3 |  e23 |  e31 |  e12 | e123 |\n|:--------:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|
  \  __e0__ |   e0 |   e1 |   e2 |   e3 |  e23 |  e31 |  e12 | e123 |\n|   __e1__
  |   e1 |   e0 |  e12 | -e31 | e123 |  -e3 |   e2 |  e23 |\n|   __e2__ |   e2 | -e12
  |   e0 |  e23 |   e3 | e123 |  -e1 |  e31 |\n|   __e3__ |   e3 |  e31 | -e23 |   e0
  |  -e2 |   e1 | e123 |  e12 |\n|  __e23__ |  e23 | e123 |  -e3 |   e2 |  -e0 | -e12
  |  e31 |  -e1 |\n|  __e31__ |  e31 |   e3 | e123 |  -e1 |  e12 |  -e0 | -e23 |  -e2
  |\n|  __e12__ |  e12 |  -e2 |   e1 | e123 | -e31 |  e23 |  -e0 |  -e3 |\n| __e123__
  | e123 |  e23 |  e31 |  e12 |  -e1 |  -e2 |  -e3 |  -e0 |\n\n\n# Multiplication
  of the GADT Constructors\nThe grade specialized type constructors multiply with
  the following multiplication table:\n\n| Mult    |  R |  V3 |  BV |   I |  PV |
  \  H |   C | BPV | ODD | TPV | APS |\n|:-------:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n|
  \ __R__ |  R |  V3 |  BV |   I |  PV |   H |   C | BPV | ODD | TPV | APS |\n|  __V3__
  |  V3 |   H | ODD |  BV | APS | ODD | BPV | APS | ODD | APS | APS |\n|  __BV__ |
  \ BV | ODD |   H |  V3 | APS |   H | BPV | APS | ODD | APS | APS |\n|   __I__ |
  \  I |  BV |  V3 |  R | TPV | ODD |   C | BPV |   H |  PV | APS |\n|  __PV__ |  PV
  | APS | APS | TPV | APS | APS | APS | APS | APS | APS | APS |\n|   __H__ |   H |
  ODD |   H | ODD | APS |   H | APS | APS | ODD | APS | APS |\n|   __C__ |   C | BPV
  | BPV |   C | APS | APS |   C | BPV | APS | APS | APS |\n| __BPV__ | BPV | APS |
  ODD | BPV | APS | APS | BPV | APS | APS | APS | APS |\n| __ODD__ | ODD | ODD | TPV
  |   H | APS | ODD | APS | APS |   H | APS | APS |\n| __TPV__ | TPV | APS | APS |
  \ PV | APS | APS | APS | APS | APS | APS | APS |\n| __APS__ | APS | APS | APS |
  APS | APS | APS | APS | APS | APS | APS | APS |\n\n\n# Performace Benchmarking\n\n*
  Under Development...\n\n# Saftey and Correctness\n\n* Liquid Haskell support Under
  Development...\n\n# Design Philosophy\nThe design space for Clifford Algebra libraries
  was explored quite a bit before the development of this library.  Initially the
  isomorphism of APS with 2x2 Complex Matrices was used, this had the draw back that
  multiplying the scalar 2 * 2 would incur all of the computational cost of multiplying
  two 2x2 complex matrices.\nThen the design was changed to lists that contained the
  basis' values, but lists are computationally slow and do not produce well optimized
  code.\nThen a single constructor data type for APS was developed, but this had all
  of the drawbacks of 2x2 complex matrices.\nThe specialized ADT Constructor version
  of the library was developed and it showed that it had some promise.\nMore of the
  design space was explored, a version of the Cl3 library was developed using Multi-parameter
  Type Classes and Functional Dependencies, this didn't appear to have much gained
  over the specialized ADT Syntax interface and it didn't use the standard Prelude
  classes like Num, Float, etc.  It was also difficult for me to figure out how to
  code a `reduce` function.\nSo the specialized ADT Constructor design of the Cl3
  library was finished and released.\nDo you GADT?  `Cl3` is now polymorphic with
  polymorphic `Posits`.\n\n# How does this fit in with the existing Haskell ecosystem?\nCl3
  is meant to be a [Linear](https://hackage.haskell.org/package/linear) killer based
  on Geometric Algebra.  The linear package\nconsists of many different types that
  are not easily combinable using the Num Class, and require many specialized functions
  each to multiply a different combination of types.\n\nThe [clifford](https://hackage.haskell.org/package/clifford)
  package uses the [Numeric Prelude](https://hackage.haskell.org/package/numeric-prelude),\nfor
  a Clifford Algebra of arbitrary signature that stores multivector blades in a list
  data structure.\n\nThe [clif](https://hackage.haskell.org/package/clif) is for symbolic
  computing using symbolic and numeric computations\nwith finite and infinite-dimensional
  Clifford algebras arising from arbitrary bilinear forms.  The libraries representation
  of a Cliffor also makes use of lists.\n"
description-type: markdown
hash: 06313dddc4d28fec31ee15978b564e6d32d2a5ead7d20af91913aa01e0a69e9b
homepage: https://github.com/waivio/cl3-posit
latest: 1.0.0.0
license-name: BSD-3-Clause
maintainer: Nathan Waivio <nathan.waivio@gmail.com>
synopsis: Clifford Algebra of three dimensional space, implemented with Posit numbers.
test-bench-deps:
  base: '>=4.7 && <5'
  cl3-posit: '>=0'
  posit: '>=0'
  random: '>=1.0 && <2'
  time: '>=1.0 && <2'
