homepage: https://github.com/2049foundation/clickhouse-haskell/
changelog-type: markdown
hash: 084c8ef54e517bd0964cb033bcdd6c8cd2b53201c32cd657fa84bd23e6888adb
test-bench-deps:
  http-client: '>=0.6.4 && <0.7'
  exceptions: '>=0.10.4 && <0.11'
  streaming-commons: '>=0.2.2 && <0.3'
  bytestring: '>=0.10.8 && <0.11'
  data-dword: '>=0.3.2 && <0.4'
  unix-time: '>=0.4.7 && <0.5'
  split: '>=0.2.3 && <0.3'
  base: '>=4.12 && <5'
  data-default-class: '>=0.1.2 && <0.2'
  time: '>=1.9 && <1.12'
  haxl: '>=2.3.0 && <2.4'
  unordered-containers: '>=0.2.13 && <0.3'
  hspec: '>=2.0 && <3'
  network-simple: '>=0.4.5 && <0.5'
  text: '>=1.2.4 && <1.3'
  uuid: '>=1.3.13 && <1.4'
  monad-loops: '>=0.4.3 && <0.5'
  resource-pool: '>=0.2.3 && <0.3'
  filepath: '>=1.4.1 && <1.5'
  network: '>=3.1.0 && <3.2'
  async: '>=2.2.2 && <2.3'
  word8: '>=0.1.3 && <0.2'
  tz: '>=0.1.3 && <0.2'
  parsec: '>=3.1.14 && <3.2'
  hashmap: '>=1.3.3 && <1.4'
  HUnit: '>=1.6 && <1.7'
  array: '>=0.5.1 && <0.6'
  containers: '>=0.5.7 && <0.7'
  io-streams: '>=1.5.2 && <1.6'
  binary: '>=0.8.3 && <0.9'
  monad-parallel: '>=0.7.2 && <0.8'
  network-ip: '>=0.3.0 && <0.4'
  uri-encode: '>=1.5.0 && <1.6'
  bytestring-to-vector: '>=0.3.0 && <0.4'
  mtl: '>=2.2.2 && <2.3'
  hashable: '>=1.2.7 && <1.4'
  attoparsec: '>=0.13.2 && <0.14'
  transformers: '>=0.5.2 && <0.6'
  clickhouse-haskell: -any
  QuickCheck: '>=2.13 && <3'
  aeson: '>=1.4.1 && <1.6'
  call-stack: '>=0.2.0 && <0.3'
  vector: '>=0.12.1 && <0.13'
maintainer: youshi@emqx.io
synopsis: A Haskell library as database client for Clickhouse
changelog: |
  # Revision history for clickhouse-haskell

  ## 0.1.0.0  -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  http-client: '>=0.6.4 && <0.7'
  exceptions: '>=0.10.4 && <0.11'
  streaming-commons: '>=0.2.2 && <0.3'
  bytestring: '>=0.10.8 && <0.11'
  data-dword: '>=0.3.2 && <0.4'
  unix-time: '>=0.4.7 && <0.5'
  split: '>=0.2.3 && <0.3'
  base: '>=4.12 && <5'
  data-default-class: '>=0.1.2 && <0.2'
  time: '>=1.9 && <1.12'
  haxl: '>=2.3.0 && <2.4'
  unordered-containers: '>=0.2.13 && <0.3'
  network-simple: '>=0.4.5 && <0.5'
  text: '>=1.2.3 && <1.3'
  uuid: '>=1.3.13 && <1.4'
  monad-loops: '>=0.4.3 && <0.5'
  resource-pool: '>=0.2.3 && <0.3'
  filepath: '>=1.4.1 && <1.5'
  network: '>=3.1.0 && <3.2'
  async: '>=2.2.2 && <2.3'
  word8: '>=0.1.3 && <0.2'
  tz: '>=0.1.3 && <0.2'
  parsec: '>=3.1.14 && <3.2'
  hashmap: '>=1.3.3 && <1.4'
  array: '>=0.5.1 && <0.6'
  containers: '>=0.5.7 && <0.7'
  io-streams: '>=1.5.2 && <1.6'
  binary: '>=0.8.3 && <0.9'
  monad-parallel: '>=0.7.2 && <0.8'
  network-ip: '>=0.3.0 && <0.4'
  uri-encode: '>=1.5.0 && <1.6'
  bytestring-to-vector: '>=0.3.0 && <0.4'
  mtl: '>=2.2.2 && <2.3'
  hashable: '>=1.2.7 && <1.4'
  attoparsec: '>=0.13.2 && <0.14'
  transformers: '>=0.5.2 && <0.6'
  aeson: '>=1.4.1 && <1.6'
  call-stack: '>=0.2.0 && <0.3'
  vector: '>=0.12.1 && <0.13'
all-versions:
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
author: Shi You
latest: 0.1.2.4
description-type: markdown
description: "**Clickhouse-haskell**\n======================\nClickHouse Haskell Driver
  with HTTP and native (TCP) interface support.\nSupport both insert and ordinary
  query.\nThis project has been heavily referenced from the python version. Link:
  https://github.com/mymarilyn/clickhouse-driver\n\n**Features**\n========\n\n* External
  Data for query processing\n* Types support\n    * [U]Int8/16/32/64\n    * String/FixedString(N)\n
  \   * Array(T)\n    * Nullable(T)\n    * Decimal\n    * SimpleAggregateFunction(F,
  T)\n    * Tuple(T1, T2, ...)\n    * Date/DateTime('timezone')/DateTime64('timezone')\n
  \   * Enum8/16\n    * Nested\n    * LowCardinality(T)\n    * UUID\n* Query progress
  information.\n* Block by block results streaming.\n* Reading query profile info.\n*
  Receiving server logs.\n* Applying Haxl(Concurrency library developed by Facebook)
  for caching query requests and concurrent querying processes.\n\n**Usage of the
  HTTP Client**\n=====\n\nIn the HTTP client, data can be fetched from Clickhouse
  server in the format of pure text string, and structured JSON in which user can
  read the value according to a given key.\n\n## **Example of data fetch using http
  client**\n```Haskell\nimport Database.ClickHouseDriver\nimport qualified Data.Text.IO
  as TIO\n\nmain :: IO()\nmain = do\n    env <- httpClient \"default\" \"\" --username
  and password\n    showtables <- runQuery env (getText \"SHOW TABLES\")\n    TIO.putStr
  showtables\n```\nResult\n```\n    Fetching 1 queries.\n    array0\n    array1\n
  \   array_t\n    array_test\n    array_test2\n    big\n    cardin\n    crd\n    crd2\n
  \   dt\n    int_test\n    ip\n    t\n    tande\n    tande2\n    tande3\n    test_table\n
  \   test_table2\n    test_table3\n    test_table4\n    test_table5\n    test_table6\n
  \   tuple\n    tuple2\n```\n```Haskell\n\n    puretext <- runQuery env (getText
  \"SELECT * FROM test_table\")\n    TIO.putStr puretext\n```\nstdout: \n```\n    Fetching
  1 queries.\n    9987654321      Suzuki  12507   [667]\n    9987654321      Suzuki
  \ 12507   [667]\n    0000000001      JOHN    1557    [45,45,45]\n    1234567890
  \     CONNOR  533     [1,2,3,4]\n    3543364534      MARRY   220     [0,1,2,3,121,2]\n
  \   2258864346      JAME    4452    [42,-10988,66,676,0]\n    0987654321      Connan
  \ 9984    [24]\n    0987654321      Connan  9984    [24]\n    9987654321      Suzuki
  \ 12507   [667]\n```\n```Haskell \n    json <- runQuery env (getJSON \"SELECT *
  FROM test_table\")\n    print json\n```\nstdout:\n```Haskell\n    Right [fromList
  [(\"numArray\",Array [Number 45.0,Number 45.0,Number 45.0]),(\"item\",   String
  \"JOHN\"),(\"id\",String \"0000000001\"),(\"number\",Number 1557.0)],fromList [(\"numArray\",Array
  [Number 1.0,Number 2.0,Number 3.0,Number 4.0]),(\"item\",String \"CONNOR\"),(\"id\",String
  \"1234567890\"),(\"number\",Number 533.0)],fromList [(\"numArray\",Array [Number
  0.0,Number 1.0,Number 2.0,Number 3.0,Number 121.0,Number 2.0]),(\"item\",String
  \"MARRY\"),(\"id\",String \"3543364534\"),(\"number\",Number 220.0)],fromList [(\"numArray\",Array
  [Number 42.0,Number -10988.0,Number 66.0,Number 676.0,Number 0.0]),(\"item\",String
  \"JAME\"),(\"id\",String \"2258864346\"),(\"number\",Number 4452.0)],fromList [(\"numArray\",Array
  [Number 24.0]),(\"item\",String \"Connan\"),(\"id\",String \"0987654321\"),(\"number\",Number
  9984.0)],fromList [(\"numArray\",Array [Number 24.0]),(\"item\",String \"Connan\"),(\"id\",String
  \"0987654321\"),(\"number\",Number 9984.0)],fromList [(\"numArray\",Array [Number
  667.0]),(\"item\",String \"Suzuki\"),(\"id\",String \"9987654321\"),(\"number\",Number
  12507.0)],fromList [(\"numArray\",Array [Number 667.0]),(\"item\",String \"Suzuki\"),(\"id\",String
  \"9987654321\"),(\"number\",Number 12507.0)],fromList [(\"numArray\",Array [Number
  667.0]),(\"item\",String \"Suzuki\"),(\"id\",String \"9987654321\"),(\"number\",Number
  12507.0)]]\n```\n\nThere is also a built-in Clickhouse type for user to send data
  in rows to Clickhouse server.\n\n## **Algebraic data type for the Clickhouse types**
  \n\n```Haskell \ndata ClickhouseType\n  = CKBool Bool\n  | CKInt8 Int8\n  | CKInt16
  Int16\n  | CKInt32 Int32\n  | CKInt64 Int64\n  | CKUInt8 Word8\n  | CKUInt16 Word16\n
  \ | CKUInt32 Word32\n  | CKUInt64 Word64\n  | CKString ByteString\n  | CKFixedLengthString
  Int ByteString\n  | CKTuple (Vector ClickhouseType)\n  | CKArray (Vector ClickhouseType)\n
  \ | CKDecimal32 Float\n  | CKDecimal64 Float\n  | CKDecimal128 Float\n  | CKIPv4
  IP4\n  | CKIPv6 IP6\n  | CKDate {\n    year :: !Integer,\n    month :: !Int,\n    day
  :: !Int \n  }\n  | CKNull\n  deriving (Show, Eq)\n```\n\n## **Example of sending
  data from memory**\n```Haskell\nmain = do\n  env <- httpClient \"default\" \"12345612341\"\n
  \ create <- exec \"CREATE TABLE test (x Int32) ENGINE = Memory\" env\n  print create\n
  \ isSuccess <- insertOneRow \"test\" [CKInt32 100] env\n  print isSuccess\n  result
  <- runQuery env (getText \"select * from test\")\n  TIO.putStr result\n```\nstdout:\n```\nRight
  \"Inserted successfully\"\nRight \"Inserted successfully\"\nFetching 1 queries.\n100\n```\n\n##
  **Example of sending data from CSV**\n```Haskell\nmain :: IO()\nmain = do\n    env
  <- httpClient \"default\" \"12345612341\"\n    isSuccess <- insertFromFile \"test_table\"
  CSV \"./test/example.csv\" env\n    putStr (case isSuccess of\n        Right y ->
  y\n        Left x -> CL8.unpack x)\n    query <- runQuery env (getText \"SELECT
  * FROM test_table\")\n    TIO.putStr query\n```\nwhere in example.csv\n```CSV\n0000000011,Bob,123,'[1,2,3]'\n0000000012,Bob,124,'[4,5,6]'\n0000000013,Bob,125,'[7,8,9,10]'\n0000000014,Bob,126,'[11,12,13]'\n```\n\nstdout:\n\n```\n0000000010
  \     Alice   123     [1,2,3]\n0000000010      Alice   123     [1,2,3]\n0000000010
  \     Alice   123     [1,2,3]\n0000000010      Alice   123     [1,2,3]\n0000000011
  \     Bob     123     [1,2,3]\n0000000012      Bob     124     [4,5,6]\n0000000013
  \     Bob     125     [7,8,9,10]\n0000000014      Bob     126     [11,12,13]\n```\n\n**Usage
  of the Native(TCP) interface**\n==========================\n\n## **Ping**\n```Haskell\n
  \   conn <- defaultClient\n    Database.ClickHouseDriver.ping conn\n```\nstdout:\n```\nJust
  \"PONG!\"\n```\n\n## **Example of making query with the native interface**\n```Haskell\nmain
  :: IO ()\nmain = do\n    env <- defaultClient --localhost 9000\n    res <- query
  env \"SHOW TABLES\" \n    print res\n```\nstdout:\n``` Haskell\n[[CKString \"test\"],[CKString
  \"test_table\"],[CKString \"test_table2\"]]\n```\n\n## **Example of making insert
  query with the native interface**\n```\nconn <- defaultClient\ninsertMany conn \"INSERT
  INTO crd VALUES\"\n          [\n            [CKString \"123\", CKString \"hi\"],\n
  \           [CKString \"456\", CKString \"lo\"]\n          ]\n```\nIn the terminal
  interface of clickhouse it will show:\n```\nid──┬─card─┐\n│ 123 │ hi   │\n│ 456
  │ lo   │\n```\n## **Use of Haxl for concurrency**\nWe can perform multiple fetches
  concurrently like this:\n```Haskell\nqueryTests :: GenHaxl u w (V.Vector (V.Vector
  ClickhouseType))\nqueryTests = do\n    one <- fetch \"SELECT * FROM UUID_test\"\n
  \   two <- fetch \"SELECT * FROM array_t\"\n    three <- fetch \"SHOW DATABASES\"\n
  \   four <- fetch \"SHOW TABLES\"\n    return $ V.concat [one, two ,three, four]\n\n```\n```\nFetching
  4 queries.\n[[CKString \"417ddc5d-e556-4d27-95dd-a34d84e46a50\"],...\n```\n\n##
  **Stream profile and process infomation**\n\nThe native interface supports reading
  infomations coming from server. Originally they come with the queried data wrapped
  in the algebraic data types:\n\n```Haskell\ndata CKResult = CKResult\n { query_result
  ::  Vector (Vector ClickhouseType),\n   query_info :: {-# UNPACK #-} ! QueryInfo\n
  }\n\ndata QueryInfo = QueryInfo \n { profile_info :: {-# UNPACK #-} !BlockStreamProfileInfo,\n
  \  progress :: {-# UNPACK #-} !Progress,\n   elapsed :: {-# UNPACK #-} !Word\n }\n\n
  data BlockStreamProfileInfo = ProfileInfo\n  { number_rows :: {-# UNPACK #-} !Word,\n
  \   blocks :: {-# UNPACK #-} !Word,\n    number_bytes :: {-# UNPACK #-} !Word,\n
  \   applied_limit :: {-# UNPACK #-} !Bool,\n    rows_before_limit :: {-# UNPACK
  #-} !Word,\n    calculated_rows_before_limit :: {-# UNPACK #-} !Bool\n  }\n\ndata
  Progress = Prog\n  { rows :: {-# UNPACK #-} !Word,\n    bytes :: {-# UNPACK #-}
  !Word,\n    total_rows :: {-# UNPACK #-} !Word,\n    written_rows :: {-# UNPACK
  #-} !Word,\n    written_bytes :: {-# UNPACK #-} !Word\n  }\n```\nOne can use executeWithInfo
  to get results that come with those information.\nFor example:\n```Haskell\nmain
  = do\n    conn <- defaultClient\n    res <- executeWithInfo \"show databases\" conn\n
  \   print $ query_result res\n    print $ query_info res\n```\nThe code above prints:\n```Haskell\n[[CKString
  \"_temporary_and_external_tables\"],[CKString \"default\"],[CKString \"system\"]]\n\nQueryInfo
  {profile_info = ProfileInfo {number_rows = 3, blocks = 1, number_bytes = 4224, applied_limit
  = True, rows_before_limit = 0, calculated_rows_before_limit = True}, progress =
  Prog {rows = 3, bytes = 331, total_rows = 0, written_rows = 0, written_bytes = 0},
  elapsed = 0}\n```"
license-name: MIT
