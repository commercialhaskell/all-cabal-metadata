all-versions:
- 0.1.0.0
- 0.2.0
- 0.2.0.1
author: Jose Iborra
basic-deps:
  Cabal: '>=0'
  base: '>=4.9 && <5'
  bytestring: '>=0'
  case-insensitive: '>=0'
  clr-host: '>=0.2.0.1'
  clr-marshal: '>=0'
  containers: '>=0'
  directory: '>=0'
  extra: '>=0'
  filepath: '>=0'
  here: '>=0'
  lens: '>=0'
  parsec: '>=0'
  pipes: '>=0'
  process: '>=0'
  split: '>=0'
  template-haskell: '>=0'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
changelog: |
  # Revision history for clr-inline

  ## 0.2.0  -- 2017-08-05
  * Experimental support for Haskell lambdas in the F# backend.

  ## 0.1.0.0  -- 2017-04-25

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "clr-inline\n==============\n[![Hackage](https://img.shields.io/hackage/v/clr-inline.svg)](https://hackage.haskell.org/package/clr-inline)\n[![Stackage
  Nightly](http://stackage.org/package/clr-inline/badge/nightly)](http://stackage.org/nightly/package/clr-inline)\n[![Unix
  build status](https://gitlab.com/tim-m89/clr-haskell/badges/master/build.svg)](https://gitlab.com/tim-m89/clr-haskell/commits/master)\n[![Windows
  Build Status](https://img.shields.io/appveyor/ci/TimMatthews/clr-haskell.svg?label=Windows%20build)](https://ci.appveyor.com/project/tim-m89/clr-haskell)\n\nNOTE:
  you will need GHC >= 8.2 to use this package in Windows.\n\nWhat is clr-inline\n=======================\n**clr-inline**
  provides a quasiquoter to inline F# and C# code in Haskell modules. \nIt was inspired
  by [`inline-java`], [`inline-c`] and [`inline-r`], and it is implemented\non top
  of [clr-host][clr-host] and [clr-marshal][clr-marshal] packages.\n\n[clr-host]:
  https://gitlab.com/tim-m89/clr-haskell/tree/master/libs/clr-host\n[clr-marshal]:
  https://gitlab.com/tim-m89/clr-haskell/tree/master/libs/clr-marshal\n[inline-java]:
  http://hackage.haskell.org/package/inline-java\n[inline-r]: http://hackage.haskell.org/package/inline-r\n[inline-c]:
  http://hackage.haskell.org/package/inline-c\n\nExample\n==========\n\nGraphical
  hello world using F# Winforms:\n\n```haskell\n{-# LANGUAGE ScopedTypeVariables #-}\n{-#
  LANGUAGE DataKinds #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE TemplateHaskell
  #-}\nmodule Main where\n\nimport Clr.Inline\n\n[fsharp|\n  open System.Windows.Forms\n
  \      |]\n\nmain = do\n  startClr\n  let text = \"Hello from Haskell\"\n  [fsharp|\n
  \       let form = new Form(Text=$text:string)\n        let button = new Button(Text=\"Click
  Me!\", Dock=DockStyle.Fill)\n        button.Click.Add(fun _ -> MessageBox.Show($text,
  \"Hey!\") |> ignore)\n        form.Controls.Add(button)\n        Application.Run(form)\n
  \        |]\n```\nFeatures\n==========\n* Inline F# / C# in Haskell.\n* Automatic
  unmarshalling of CLR primitive types into Haskell.\n* Reference types support including
  arrays and generics.\n* Refer to (`Quotable`) Haskell values inside F# / C# quotations.\n*
  Experimental support for Haskell lambdas in F#.\n  * See the InlineSpec.hs test
  module for examples of usage.\n  * Only mscorlib types are admitted, type resolution
  will crash at runtime otherwise.\n\nGetting Started\n===================\nInstall
  the `clr-inline` package from Hackage using your preferred package manager:\n\n
  \   $ cabal install clr-inline\n    $ stack install clr-inline\n\nBy default, `.Net`
  is used in Windows and `mono` in other systems. \nThis is driven by Cabal flags
  in the `clr-host` package.\n\nRequirements\n================\n`clr-inline` requires
  GHC >=8.0 for `mono`, and either GHC >=8.2 or a [linker preprocessor] for `.Net`.\n\n[linker
  preprocessor]: https://gitlab.com/tim-m89/clr-haskell/tree/master/utils/clr-win-linker\n\nCabal
  requires that the CLR compiler is in the application path at `cabal configure` time.
  \nThe module `Clr.Inline.Cabal` provides an optional Cabal user hook that can be
  added to a cabal\n Setup script to check for this automatically\n\nBug [#14090]
  in GHC 8.2.1 requires that the **StaticPointers** language extension is turned on
  in every module that\ncontains an inline F# or C# block. Moreover, the modules must
  have an unrestricted export list.\n\n[#14090]: http://ghc.haskell.org/trac/ghc/ticket/14090\n\nThe
  quasiquoters look for the F#/C# compiler binaries in the\napplication path. External
  dependencies and additional search paths can be provided to\nthe quasiquoter as
  configuration. Configuration creates a new quasiquoter;\nsince GHC does not allow
  calling a quasiquoter from the same module where it is\ndefined, the recommended
  practice is to configure the quasiquoters in a \ndedicated Config module. Example
  configuration for WPF dependencies:\n\n```haskell\nmodule WpfDeps where\n\nimport
  Clr.Inline\nimport Clr.Inline.Config\n\nwpf =\n  fsharp' $\n    defaultConfig\n
  \   { configDependencies =\n        [ \"System.Xaml\"\n        , \"WindowsBase\"\n
  \       , \"PresentationCore\"\n        , \"PresentationFramework\"\n        ]\n
  \   }\n```\n\n\nLICENSE\n==========\n\nCopyright (c) 2017 Jose Iborra\n\nclr-inline
  is free software and may be redistributed under the terms\nspecified in the [LICENSE](LICENSE)
  file.\n"
description-type: markdown
hash: 4f8e0e823f2fbc4ac9cb69aed19d1f1e285f392150085aeecfd2c79ab32baf58
homepage: https://gitlab.com/tim-m89/clr-haskell
latest: 0.2.0.1
license-name: BSD-3-Clause
maintainer: pepeiborra@gmail.com
synopsis: Quasiquoters for inline C# and F#
test-bench-deps:
  Cabal: '>=0'
  base: '>=4.9 && <5'
  bytestring: '>=0'
  case-insensitive: '>=0'
  clr-host: '>=0.2.0.1'
  clr-inline: '>=0'
  clr-marshal: '>=0'
  containers: '>=0'
  criterion: '>=0'
  directory: '>=0'
  extra: '>=0'
  filepath: '>=0'
  here: '>=0'
  hspec: '>=0'
  lens: '>=0'
  parsec: '>=0'
  pipes: '>=0'
  process: '>=0'
  split: '>=0'
  template-haskell: '>=0'
  temporary: '>=0'
  text: '>=0'
  transformers: '>=0'
