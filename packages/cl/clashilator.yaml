all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.3
author: Gergő Érdi
basic-deps:
  Cabal: '>=3.2.1 && <3.9'
  aeson: '>=1.5 && <3.0'
  base: '>=4.14 && <5'
  clash-ghc: '>=1.4.2 && <2.0'
  clash-lib: '>=1.4.2 && <2.0'
  containers: '>=0'
  filepath: '>=0'
  ghc: '>=0'
  lens: '>=0'
  optparse-applicative: '>=0'
  shake: '>=0'
  stache: '>=2.3 && <2.4'
  text: '>=0'
  unordered-containers: '>=0'
changelog: ''
changelog-type: ''
description: |
  # Clashilator: Automated Clash - Verilator integration

  This package provides Cabal `Setup.hs` functionality to automatically
  integrate Verilator into your Clash project.

  * Detailed introduction: <https://unsafePerform.IO/blog/2020-05-07-integrating_verilator_and_clash_via_cabal/>
  * Example project: <https://github.com/gergoerdi/clashilator-example>

  ## Usage

  Suppose you have a Clash circuit that you want to simulate using
  Verilator, and then write Haskell code to interact with that
  simulation. If your Clash code looks like this:

  ```
  topEntity
      :: "CLK" ::: Clock System
      -> "FOO" ::: Signal System Bit
      -> "BAR" ::: Signal System (Unsigned 4)
      -> ( "BAZ"  ::: Signal System (Unsigned 10)
         , "QUUX" ::: Signal System Bit
         )
  topEntity = ...
  makeTopEntity 'topEntity
  ```

  and you put this in your Cabal file (`x-clashilator-clock` can be
  omitted if you have only a single clock):

  ```
  custom-setup
    setup-depends: clashilator

  executable MySim
    main-is: simulator.hs
    x-clashilator-clock: CLK
    x-clashilator-top-is: MyCircuit
  ```

  then in your `simulator.hs`, you can import the "virtual" module
  `Clash.Clashilator.FFI` which provides the following definitions:

  ```
  data INPUT = INPUT
      { iFOO :: Bit
      , iBAR :: Word8
      }
      deriving (Show)
  instance Storable INPUT

  data OUTPUT = OUTPUT
      { oBAZ :: Word16
      , oQUUX :: Bit
      }
      deriving (Show)
  instance Storable OUTPUT

  data Sim

  simInit     :: IO (Ptr Sim)
  simShutdown :: Ptr Sim -> IO ()
  simStep     :: Ptr Sim -> Ptr INPUT -> Ptr OUTPUT -> IO ()
  ```

  Note that input and output buses are represented as the smallest
  possible `Word` type, to improve marshalling cost when crossing the
  Haskell-C++ barrier.
description-type: markdown
hash: c6147f9ec5f108ac1698b39c4adf322045590ba60542e9086d8d0170a0829c95
homepage: https://github.com/gergoerdi/clashilator#readme
latest: 0.1.3
license-name: MIT
maintainer: gergo@erdi.hu
synopsis: Automated Clash to Verilator bridge
test-bench-deps: {}
