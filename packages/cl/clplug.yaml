homepage: https://github.com/AutonomousOrganization/blitz#readme
changelog-type: markdown
hash: 74bdf27b21cc202236e0747c63bca1154b8a3be2885684a489fb7c4dae09020d
test-bench-deps:
  bytestring: <0.12
  base: '>=4.7 && <5'
  text: <1.3
  network: <3.2
  conduit: <1.4
  mtl: <2.3
  attoparsec: <0.15
  aeson: <2.1
  blitz: -any
maintainer: taylorsingletonfookes@live.com
synopsis: Create Core Lightning Plugins
changelog: |
  # Changelog for `clnplug`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
basic-deps:
  bytestring: <0.12
  base: '>=4.7 && <5'
  text: <1.3
  network: <3.2
  conduit: <1.4
  mtl: <2.3
  attoparsec: <0.15
  aeson: <2.1
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
author: Taylor Singleton-Fookes
latest: 0.3.3.0
description-type: markdown
description: "\n## Core Lightning Plug\n\nCreate core lightning ([lightningd](https://lightning.readthedocs.io/PLUGINS.html))
  plugins in haskell. \n\nTo get started you need to import the Library. It is on
  hackage as [clplug](https://hackage.haskell.org/package/clplug) or you can load
  it from github in the stack.yaml: \n```\nextra-deps:\n- git: https://github.com/autonomousorganization/blitz.git\n
  \ commit: a916dd3d74780e1023b161b4e85773ccc06051d4\n```\nOnce the library is imported
  there are two external modules. Data.Lightning is all of the data types for the
  manifest, the notification and the hooks. Control.Plugin contains the monadic context
  and interface to your node. \n\nA [manifest](https://lightning.readthedocs.io/PLUGINS.html#the-getmanifest-method)
  defines the interface your plugin will have with core lightning. \n\n```\nimport
  Data.Aeson\nimport Data.Lightning\nmanifest = object [\n       \"dynamic\" .= True\n
  \    , \"subscriptions\" .= ([] :: [Text] )\n     , \"options\" .= ([]::[Option])\n
  \    , \"rpcmethods\" .= ([\n         , RpcMethod \"command\" \"[label]\" \"description\"
  Nothing False\n         ])\n     , \"hooks\" .= ([Hook \"invoice_payment\" Nothing])\n
  \    , \"featurebits\" .= object [ ]\n     , \"notifications\" .= ([]::[Notification])\n
  \    ]\n```\n\nA start function runs in the InitMonad, it has access to a reader
  (ask) and to lightningCli. The data that returns from this function will initialize
  the state that is shared in the PluginMonad. If you want to run a service fork a
  thread within this function. \nThe lightningCli function interfaces to core lightnings
  rpc. The available functions depend on your version of core lightning and the set
  of plugins you have installed. You need to pass a Command that defines the data
  you want returned in a [filter](https://lightning.readthedocs.io/lightningd-rpc.7.html?highlight=filter#field-filtering).
  \n\n```\nimport Control.Plugin \nimport Control.Client\nstart = do \n    (rpcHandle,
  Init options config) <- ask\n    Just response <- lightningCli (Command \"getinfo\"
  filter params)\n    _ <- liftIO . forkIO $ < service > \n    return < state >\n```\n\nAn
  app function runs every time data comes in from the plugin. You define handlers
  that processes the data. If an id is present that means that core lightning is expecting
  a response and default node operation or the operation of other plugins may be pending
  your response. Use release to allow default to continue, reject to abort default
  behavior, and respond to send a custom response which in the case of custom rpcmethods
  will pass through back to the user. \n\n```\napp :: (Maybe Id, Method, Params) ->
  PluginMonad a b\napp (Just i, \"method\", params) = \n    if contition \n        then
  release i \n        else reject i      \n``` \n\nFinally use the plugin function
  to create an executable that can be installed as a plugin! \n\n```\nmain :: IO ()\nmain
  = plugin manifest start app\n\n```\n\n##### tipjar: bc1q5xx9mathvsl0unfwa3jlph379n46vu9cletshr\n\n"
license-name: BSD-3-Clause
