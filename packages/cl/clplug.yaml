all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.4.0.0
- 1.0.0.0
author: autonomousorganization
basic-deps:
  aeson: '>=2.2.1 && <2.3'
  attoparsec: '>=0.14.4 && <0.15'
  attoparsec-aeson: '>=2.2.0 && <2.3'
  base: '>=4.19 && <5'
  bytestring: '>=0.12.1 && <0.13'
  conduit: '>=1.3.5 && <1.4'
  mtl: '>=2.3.1 && <2.4'
  network: '>=3.1.4 && <3.2'
  stm: '>=2.5.2 && <2.6'
  text: '>=2.1.1 && <2.2'
changelog: "# Changelog for `clnplug`\n\nAll notable changes to this project will
  be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  this project adheres to the\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\n\n##
  Unreleased\n\n## 1.0.0.0 - 2024-05-25\n- I see now I probably shouldn't have put
  this on hackage.\n- This version simplifies the UI prefering Value over defining
  values that may be changed by core lightning.\n- (Major Bug Fix) Previous versions
  had incomplete parsing that led to leaking threads on unexpected data. \n- lightningCli
  is now an overloaded class so simpler interface is allowed i.e. (lightningCli \"getinfo\")
  or lightningCli (\"listpeers\", fromList [\"<peerid>\"])\n"
changelog-type: markdown
description: "\n## Core Lightning Plug\n\nCreate [Core Lightning](https://lightning.readthedocs.io/PLUGINS.html)
  plugins in haskell. \n\nUse `plugin` to create an executable that can be installed
  as a plugin! \n\n```\nmain = plugin manifest start app\n```\n\nA [manifest](https://lightning.readthedocs.io/PLUGINS.html#the-getmanifest-method)
  defines the interface with core lightning. It is just a Value but Plugin.Manifest
  has helper types to easily define it.  \n```\nmanifest = object [\n       \"dynamic\"
  .= True\n     , \"subscriptions\" .= ([] :: [Text] )\n     , \"options\" .= ([]::[Option])\n
  \    , \"rpcmethods\" .= ([\n         , RpcMethod \"command\" \"[label]\" \"description\"
  Nothing False\n         ])\n     , \"hooks\" .= ([Hook \"invoice_payment\" Nothing])\n
  \    , \"featurebits\" .= object [ ]\n     , \"notifications\" .= ([]::[Notification])\n
  \    ]\n```\n\nstart runs on startup and defines the initial state.\n```\nstart
  = do \n    _ <- lightningCli (\"getinfo\" :: Text)\n    _ <- liftIO . forkIO $ <
  service > \n    return < state >\n```\n\napp handler function allows you to monitor
  status (through notification), add rpc commands, or augment normal operation (through
  hooks). \n```\napp (Req (Just i) \"method\" params) = \n    if <condition> \n        then
  release i \n        else reject i      \n``` \n\nRemember any output to stdout will
  break the connection.\n\n##### tipjar: bc1q5xx9mathvsl0unfwa3jlph379n46vu9cletshr
  | lno1pgz8getnwstzzqehd9zs2y36z2504hv42g7ucg6cnzknhq9qde9x8j3xlmtgm5x30s\n\n"
description-type: markdown
hash: caf660d0ac3c738ac4d71aed349de2765afe890d39e3ad37cbc2306175cca0a2
homepage: ''
latest: 1.0.0.0
license-name: MIT
maintainer: autonomousorganization
synopsis: Easily add functionality to your lightning node
test-bench-deps:
  aeson: '>=2.2.1 && <2.3'
  attoparsec: '>=0.14.4 && <0.15'
  attoparsec-aeson: '>=2.2.0 && <2.3'
  base: '>=4.19 && <5'
  bytestring: '>=0.12.1 && <0.13'
  clplug: '>=0'
  conduit: '>=1.3.5 && <1.4'
  mtl: '>=2.3.1 && <2.4'
  network: '>=3.1.4 && <3.2'
  stm: '>=2.5.2 && <2.6'
  text: '>=2.1.1 && <2.2'
