homepage: https://github.com/AutonomousOrganization/clplug#readme
changelog-type: markdown
hash: e1dc0d44075b119317698bc03d475318538a37b1057083e9ca3657f5462bbbf9
test-bench-deps:
  bytestring: <0.12
  base: '>=4.7 && <5'
  text: <1.3
  network: <3.2
  conduit: <1.4
  clplug: -any
  mtl: <2.3
  attoparsec: <0.15
  aeson: <2.1
maintainer: taylorsingletonfookes@live.com
synopsis: Create Core Lightning Plugins
changelog: |
  # Changelog for `clnplug`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
basic-deps:
  fmt: <0.7
  bytestring: <0.12
  lens-aeson: <1.3
  base: '>=4.7 && <5'
  time: <1.12
  text: <1.3
  network: <3.2
  conduit: <1.4
  clplug: -any
  containers: <0.7
  lens: <5.2
  fgl: <5.8
  mtl: <2.3
  attoparsec: <0.15
  format-numbers: <0.2
  aeson: <2.1
  directory: <1.4
all-versions:
- 0.1.0.0
author: Taylor Singleton-Fookes
latest: 0.1.0.0
description-type: markdown
description: "\n## Core Lightning Plug\n\nCore lightning is a daemon ([lightningd](https://lightning.readthedocs.io/PLUGINS.html))
  that operates payment channels that allow you to send and receive bitcoin nearly
  instantly, with nearly zero fees with a high level of privacy. It does not compromise
  on any of the strengths of layer 1 bitcoin: no censorship, free speech, individual
  sovereignty, and impossible debasement. In fact it strengthens bitcoin because it
  encourages the operation of fully validating nodes, lightningd requires bitcoind.
  Clplug is a Haskell library that allows you to easily create extensions (called
  plugins) that extend or augment its functionality. \n\nTo create a plugin you only
  need to define three arguments:\n- `Manifest :: Value` - configuration of the interface
  with core lightning.\n- `PluginInit :: PlugInfo -> IO a` - startup function that
  returns the starting state\n- `PluginApp ::  (Maybe Id, Method, Params) -> PluginMonad`
  - data handler function\n\nThe transformer stack contains: \n- `ask` - a handle
  to lightning-rpc and environment info.\n- `get/put` - polymorphic state\n- `yield`
  - stdout to core lightning\n\nSeveral examples are included that are intended to
  be useful for (d)evelopers and node (o)perators \n- **movelog**\n    - o - specify
  logfile= to create a log file with fees earned and other coin movements\n    - d
  - a notification is subscribed, an option is added, and the state monad is used\n-
  **wallet** \n    - o - show available totals and channel balances: `lightning-cli
  wallet`\n    - d - a new rpc method is created\n- **routes** \n    - o - generate
  routes: `lightning-cli route` \n    - d - network graph is loaded and several rpc
  parameters are used\n\nOperators: the examples require option `allow-deprecated-apis=false`.
  To install a plugin you must: \n    - clone this repository\n    - `stack build`
  \n    - move or symlink the created executable file into the lightning directory
  (by default: `.lightning/plugins`) \n    \nThe main exports from the Library are
  `Control.Plugin`, `Control.Client`, and `Data.Lightning`. An upload and link to
  hackage is pending. This is a basic usage example: \n```haskell  \n{-# LANGUAGE
  \n      OverloadedStrings \n    , FlexibleContexts \n    , ViewPatterns\n    , RecordWildCards\n#-}
  \n\nmodule Main (main) where\n\n-- from clplug\nimport Data.Lightning \nimport Control.Plugin
  \ \nimport Control.Conduit\n--\n\nimport Data.Conduit \nimport Data.Aeson\nimport
  Data.Text\n\nmain = plugin manifest appState app\n\nmanifest :: Value \nmanifest
  = object [\n      \"dynamic\" .= True\n    , \"subscriptions\" .= ([\"channel_opened\"]
  :: [Text] ) \n    , \"options\" .= ([]::[Option])\n    , \"rpcmethods\" .= ([])
  \n    , \"hooks\" .= ([]::[Hook])\n    , \"featurebits\" .= object [ ]\n    , \"notifications\"
  .= ([]::[Notification])\n    ] \n\napp :: PluginApp () \napp (Nothing, \"channel_opened\",
  fromJSON -> Success (ChannelOpened {..})) = do\n    doublespend funding_txid \n
  \   where doublespend _ = pure ()\n\nappState = pure () \n```      \n\nUseful areas
  of  exploration and research are:\n- fee optimization\n- route selection\n- economic
  rebalancing\n- accidental channel closes\n\n##### Donation bitcoin addr: bc1q5xx9mathvsl0unfwa3jlph379n46vu9cletshr\n\nlightning
  only scales bitcoin if people run nodes\n"
license-name: BSD-3-Clause
