all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
- 0.4.0.0
author: Taylor Singleton-Fookes
basic-deps:
  aeson: <2.1
  attoparsec: <0.15
  base: '>=4.7 && <5'
  bytestring: <0.12
  conduit: <1.4
  mtl: <2.3
  network: <3.2
  text: <1.3
changelog: |
  # Changelog for `clnplug`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: "\n## Core Lightning Plug\n\nCreate [Core Lightning](https://lightning.readthedocs.io/PLUGINS.html)
  plugins in haskell. \n\nTo get started import the Library by adding it to your projects
  stack.yaml: \n```\nextra-deps:\n- clplug-0.4.0.0\n```\nOnce the library is imported
  there are two main imports. \n- Data.Lightning is all of the data types for the
  manifest, the notification and the hooks. \n- Control.Plugin contains the monadic
  context and interface to your node. \n\nThe steps to create a plugin are: \n\n-
  A [manifest](https://lightning.readthedocs.io/PLUGINS.html#the-getmanifest-method)
  defines the interface your plugin will have with core lightning. \n\n```\nimport
  Data.Aeson\nimport Data.Lightning\nmanifest = object [\n       \"dynamic\" .= True\n
  \    , \"subscriptions\" .= ([] :: [Text] )\n     , \"options\" .= ([]::[Option])\n
  \    , \"rpcmethods\" .= ([\n         , RpcMethod \"command\" \"[label]\" \"description\"
  Nothing False\n         ])\n     , \"hooks\" .= ([Hook \"invoice_payment\" Nothing])\n
  \    , \"featurebits\" .= object [ ]\n     , \"notifications\" .= ([]::[Notification])\n
  \    ]\n```\n\n- A start function that returns the initial state.\n\n```\nimport
  Control.Plugin \nimport Control.Client\nstart = do \n    (rpcHandle, Init options
  config) <- ask\n    Just response <- lightningCli (Command \"getinfo\" filter params)\n
  \   _ <- liftIO . forkIO $ < service > \n    return < state >\n```\n\n- An app function
  runs every time data comes in from the plugin. You define handlers that processes
  the data. If an id is present that means that core lightning is expecting a response
  and default node operation or the operation of other plugins may be pending your
  response. Use release to allow default to continue, reject to abort default behavior,
  and respond to send a custom response which in the case of custom rpcmethods will
  pass through back to the user. \n\n```\napp :: (Maybe Id, Method, Params) -> PluginMonad
  a b\napp (Just i, \"method\", params) = \n    if contition \n        then release
  i \n        else reject i      \n``` \n\n- Finally use the plugin function to create
  an executable that can be installed as a plugin! \n\n```\nmain :: IO ()\nmain =
  plugin manifest start app\n\n```\n\n##### tipjar: bc1q5xx9mathvsl0unfwa3jlph379n46vu9cletshr\n\n"
description-type: markdown
hash: 9343bd3c8610a1566509db4373d3f31b771c62a4a032c9c526f2f60e28029e17
homepage: https://github.com/AutonomousOrganization/clplug#readme
latest: 0.4.0.0
license-name: BSD-3-Clause
maintainer: taylorsingletonfookes@live.com
synopsis: Create Core Lightning Plugins
test-bench-deps:
  aeson: <2.1
  attoparsec: <0.15
  base: '>=4.7 && <5'
  bytestring: <0.12
  clplug: '>=0'
  conduit: <1.4
  mtl: <2.3
  network: <3.2
  text: <1.3
