homepage: https://github.com/re-xyr/cleff#readme
changelog-type: markdown
hash: d2bde97470e04ba6362e8a1d690da95676df0b053d8e6238692b4b0794285a1e
test-bench-deps:
  exceptions: ==0.10.*
  unliftio: '>=0.2.4 && <0.3'
  extra: -any
  cleff: -any
  base: '>=4.12 && <4.17'
  hspec: -any
  monad-control: '>=1 && <1.1'
  lifted-base: -any
  th-abstraction: '>=0.2 && <0.6'
  containers: '>=0.5 && <0.7'
  atomic-primops: ==0.8.*
  transformers-base: ==0.4.*
  microlens: '>=0.1 && <0.5'
  template-haskell: '>=2.14 && <2.19'
  primitive: '>=0.6.4 && <0.9'
maintainer: xy.r@outlook.com
synopsis: Fast and concise extensible effects
changelog: "# Changelog for `cleff`\n\n## 0.3.3.0 (2022-05-21)\n \n### Changed\n\n-
  Slight performance improvements\n\n### Added\n\n- `runStateLocal` that runs the
  `State` effect with thread-local semantics\n\n## 0.3.2.0 (2022-03-13)\n\n### Changed\n\n-
  Slight performance improvements\n- `(:>)` is now a typeclass by itself instead of
  a type synonym\n\n## 0.3.1.0 (2022-02-28)\n\n### Added\n\n- `makeEffect` is now
  capable of generating sending functions for operations using concrete `Eff`s for
  the monad type\n\n### Removed\n\n- Dependency on `rec-smallarray`\n\n## 0.3.0.1
  (2022-02-21)\n\nClarify changelog: new features that are listed \"Unreleased\" in
  0.3.0.0 changelog are in fact *released*\n\n## 0.3.0.0 (2022-02-21)\n\n### Changed\n\n-
  **[BREAKING]** Introduces an `OnException` primitive for `Mask` that replaces `Bracket`
  and `BracketOnError`\n  (note that this only affects the effect datatype; there
  is still `bracket` and `bracketOnError` *functions* with the same semantics)\n-
  `runError` and `mapError` are slightly (but observably) faster now\n\n### Added\n\n-
  `freshEnumToState` for `Fresh`\n- `onException` and `bracketOnError_` for `Mask`\n\n##
  0.2.1.0 (2022-02-13)\n\n### Added\n\n- Lifted convenience instances of `Bounded`,
  `Num`, `Fractional`, `Floating` and `IsString` for `Eff`\n- `MonadZip` instance
  from the `MonadComprehensions` extension for `Eff`\n- `runFreshAtomicCounter` for
  `Fresh`\n- `inputToReader`, `mapInput` and `bindInput` for `Input`\n- `mapOutput`
  and `bindOutput` for `Output`\n- `runStateIORef`, `runStateMVar` and `runStateTVar`
  for `State`\n\n## 0.2.0.0 (2022-02-06)\n\n### Changed\n\n- **[BREAKING]** Changed
  parameter order of `Handling` class from `e es esSend` to `esSend e es`\n- **[BREAKING]**
  Relaxed fundep of `Handling` to `esSend -> e es` (HO combinators may require `TypeApplication`
  more often)\n- Moved `Data.*` modules to `Cleff.Internal.*` so as not to pollute
  common namespaces\n\n### Added\n\n- `Trustworthy` flags for non-internal modules\n-
  `sendVia` for sending an effect operation along a transformation between effect
  stacks\n- `raiseUnder`, `raiseNUnder`, `raiseUnderN`, `raiseNUnderN` for introducing
  effects under other effects in the effect stack\n- `runWriterBatch` as a more efficient
  `Writer` interpreter that writes `listen`ed values in batch instead of in real time\n\n##
  0.1.0.0 (2022-01-31)\n\n- Initial API\n"
basic-deps:
  exceptions: ==0.10.*
  unliftio: '>=0.2.4 && <0.3'
  base: '>=4.12 && <4.19'
  monad-control: '>=1 && <1.1'
  th-abstraction: '>=0.2 && <0.6'
  containers: '>=0.5 && <0.7'
  atomic-primops: ==0.8.*
  transformers-base: ==0.4.*
  microlens: '>=0.1 && <0.5'
  template-haskell: '>=2.14 && <2.21'
  primitive: '>=0.6.4 && <0.9'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
- 0.3.0.1
- 0.3.1.0
- 0.3.2.0
- 0.3.3.0
author: Xy Ren
latest: 0.3.3.0
description-type: markdown
description: |
  # `cleff` - fast and concise extensible effects

  [![GitHub Workflow Status](https://img.shields.io/github/workflow/status/re-xyr/cleff/build)](https://github.com/re-xyr/cleff/actions/workflows/build.yaml)
  [![Hackage](https://img.shields.io/hackage/v/cleff)](https://hackage.haskell.org/package/cleff)

  `cleff` is an extensible effects library for Haskell, with a focus on the balance of performance, expressiveness and ease of use. It provides a set of predefined effects that you can conveniently reuse in your program, as well as low-boilerplate mechanisms for defining and interpreting new domain-specific effects on your own.

  In essence, `cleff` offers:

  - **Performance**:

    `cleff` does not use techniques like Freer monads or monad transformers. Instead, `cleff`'s `Eff` monad is essentially implemented as a `ReaderT IO`. This concrete formulation [allows more GHC optimizations to fire][alexis-talk], and has lower performance overhead. [In microbenchmarks](#benchmarks), `cleff` outperforms [`polysemy`] and even `mtl`.

    The only caveat is that `cleff` does not support nondeterminism and continuations in the `Eff` monad - but after all, [most effects libraries has broken nondeterminism support](https://github.com/polysemy-research/polysemy/issues/246), and we encourage users to wrap another monad transformer with support of nondeterminism (*e.g.* `ListT`) over the main `Eff` monad in such cases.

  - **Low boilerplate**:

    `cleff` supports user-defined effects and provides simple yet flexible API for implementing them. Implementations of effects are simply case-splitting functions, and users familiar with [`polysemy`] or [`freer-simple`] will find it very easy to get along with `cleff`. [Take a look at the examples](#example).

  - **Interoperability**:

    `cleff`'s simple underlying structure allows us to implement near-seamless interop with the current ecosystem, mainly classes like `MonadUnliftIO`, `MonadCatch` and `MonadBaseControl`. In other words, you can directly use libraries like `unliftio`, `exceptions` and `lifted-async` in `cleff` without writing any "adapter" code.

  - **Predictable semantics**:

    Traditional effect libraries have many surprising behaviors. For example, `mtl` reverts the state when an error is thrown, and has [a lot more subtleties when interacting with `IO`][readert]. `cleff` implements `State` and `Writer` as `IORef` operations, and `Error` as `Exceptions`, so it is able to interact well with `IO` and provide semantics that are predictable in the presence of concurrency and exceptions. Moreover, any potentially surprising behavior is carefully documented for each effect.

  - **Higher-order effects**:

    *Higher-order* effects are effects that "wraps" monadic computations, like `local`, `catchError` and `mask`. Implementing higher-order effects is often tedious, or outright not supported in most effect libraries. `polysemy` is the first library that aims to provide easy higher-order effects mechanism with its `Tactics` API. Following its path, `cleff` provides a set of combinators that can be used to implement higher-order effects. These combinators are as expressive as `polysemy`'s, and are also easier to use correctly.

  - **Ergonomics without sacrificing flexibility**:

    Unlike `mtl`, `cleff` doesn't have functional dependencies on effects, so you can have *e.g.* multiple `State` effects. As a side effect, GHC will sometimes ask you to provide which effect you're operating on via `TypeApplications`, or otherwise the effect usage will be ambiguous. This can be verbose at times, and we have a solution for that: [`cleff-plugin`](https://github.com/re-xyr/cleff/tree/master/cleff-plugin) is a GHC plugin that works like `mtl`'s functional dependencies, and can resolve most type ambiguities involving effects for you.

  ## Example

  This is the code that defines the classic `Teletype` effect. It only takes 20 lines to define the effect and two interpretations, one using stdio and another reading from and writing to a list:

  ```haskell
  import Cleff
  import Cleff.Input
  import Cleff.Output
  import Cleff.State
  import Data.Maybe (fromMaybe)

  -- Effect definition
  data Teletype :: Effect where
    ReadTTY :: Teletype m String
    WriteTTY :: String -> Teletype m ()
  makeEffect ''Teletype

  -- Effect Interpretation via IO
  runTeletypeIO :: IOE :> es => Eff (Teletype : es) a -> Eff es a
  runTeletypeIO = interpretIO \case
    ReadTTY    -> getLine
    WriteTTY s -> putStrLn s

  -- Effect interpretation via other pure effects
  runTeletypePure :: [String] -> Eff (Teletype : es) w -> Eff es [String]
  runTeletypePure tty = fmap (reverse . snd)
    . runState [] . outputToListState
    . runState tty . inputToListState
    . reinterpret2 \case
      ReadTTY -> fromMaybe "" <$> input
      WriteTTY msg -> output msg

  -- Using the effect

  echo :: Teletype :> es => Eff es ()
  echo = do
    x <- readTTY
    if null x then pure ()
      else writeTTY x >> echo

  echoPure :: [String] -> [String]
  echoPure input = runPure $ runTeletypePure input echo

  main :: IO ()
  main = runIOE $ runTeletypeIO echo
  ```

  See [`example/`](https://github.com/re-xyr/cleff/tree/master/example/) for more examples.

  ## Benchmarks

  These are the results of [`effectful`'s microbenchmarks](https://github.com/haskell-effectful/effectful/tree/master/benchmarks), compiled by GHC 8.10.7. Each diagram shows the average run time of each effect library's implementation of an identical program; lower is better. Each benchmark suite has two flavors - *shallow* and *deep* - where the shallow variant only uses necessary effects, and the deep variant adds 10 redundant `Reader` effects, to simulate more realistic scenarios. Keep in mind that these are *very short and synthetic programs*, and may or may not tell the accurate performance characteristics of different effect libraries in real use.

  - `countdown`: ![countdown benchmark result](https://raw.githubusercontent.com/re-xyr/cleff/master/docs/img/benchmark-countdown.png)
  - `filesize`: ![filesize benchmark result](https://raw.githubusercontent.com/re-xyr/cleff/master/docs/img/benchmark-filesize.png)

  ### Differences from `effectful`

  If you know about [`effectful`], you may notice that `cleff` and `effectful` seem to make many similar claims and have a similar underlying implementation. In microbenchmarks, `cleff` is slightly behind `effectful`. This may make you confused about the differences between the two libraries. To put it simply, `cleff` has a more versatile and expressive effect interpretation mechanism, and a lighter weight API. In contrast, `effectful` gains its performance advantage by providing static dispatch for some internal effects, which means they cannot have multiple interpretations.

  ## References

  These are the useful resources that inspired this library's design and implementation.

  Papers:

  - [Extensible Effect: An Alternative to Monad Transformers](https://okmij.org/ftp/Haskell/extensible/exteff.pdf) by Oleg Kiselyov, Amr Sabry, and Cameron Swords.
  - [Freer Monads, More Extensible Effects](https://okmij.org/ftp/Haskell/extensible/more.pdf) by Oleg Kiselyov, and Hiromi Ishii.

  Libraries:

  - [`eff`] by Alexis King and contributors.
  - [`effectful`] by Andrzej Rybczak and contributors.
  - [`freer-simple`] by Alexis King and contributors.
  - [`polysemy`] by Sandy Maguire and contributors.

  Talks:

  - [Effects for Less][alexis-talk] by Alexis King.
  - [Unresolved challenges of scoped effects, and what that means for `eff`][alexis-talk-2] by Alexis King.

  Blog posts:

  - [Asynchronous Exception Handling in Haskell](https://www.fpcomplete.com/blog/2018/04/async-exception-handling-haskell/) by Michael Snoyman.
  - [Polysemy: Mea Culpa](https://reasonablypolymorphic.com/blog/mea-culpa/) by Sandy Maguire.
  - [Polysemy Internals: The Effect-Interpreter Effect](https://reasonablypolymorphic.com/blog/tactics/) by Sandy Maguire.
  - [ReaderT design pattern][readert] by Michael Snoyman.
  - [Safe exception handling](https://www.fpcomplete.com/haskell/tutorial/exceptions/) by Michael Snoyman.

  [`polysemy`]: https://hackage.haskell.org/package/polysemy
  [`fused-effects`]: https://hackage.haskell.org/package/fused-effects
  [`effectful`]: https://github.com/arybczak/effectful
  [`eff`]: https://github.com/hasura/eff
  [`freer-simple`]: https://hackage.haskell.org/package/freer-simple
  [alexis-talk]: https://www.youtube.com/watch?v=0jI-AlWEwYI
  [alexis-talk-2]: https://www.twitch.tv/videos/1163853841
  [readert]: https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/
license-name: BSD-3-Clause
