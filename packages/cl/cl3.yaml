homepage: https://github.com/waivio/cl3
changelog-type: markdown
hash: f6c420297acbcb48a616cbca289b30c93b142e214075300f625fe239caa82bb8
test-bench-deps:
  cl3: -any
  base: '>=4.7 && <5'
  time: -any
  massiv: '>=1.0'
  criterion: '>=1.1 && <2'
  weigh: -any
  random: '>=1.0 && <2'
  vector: -any
maintainer: Nathan Waivio <nathan.waivio@gmail.com>
synopsis: Clifford Algebra of three dimensional space.
changelog: "# Revision history for cl3\n\n## 3.0.0.0  -- 2022-04-01\n\n* Added LiquidHaskell
  support\n* Added more memory efficient subtypes for R, V3, BV, I, PV, H, C, BPV,
  ODD, TPV\n* Added LiquidHaskell support: liquidhaskell >= 0.8.10\n* Sucessfully
  tested with: liquidhaskell-0.8.10.2 and Stackage lts-18.6\n* Added a LiquidHaskell
  flag to build: stack build --flag cl3:do-liquid\n* LiquidHaskell requires CPP Options:
  -DO_LIQUID -DO_NO_RANDOM -DO_NO_DERIVED -DO_NO_STORABLE\n* LiquidHaskell _|_ when:
  Random, Storable, or Derived instances are enabled\n* LiquidHaskell _|_ when: There
  is any number n.nn*e^-x see [Issue#1762](https://github.com/ucsd-progsys/liquidhaskell/issues/1762)
  for my 128*eps threshold, eventhough rationals are supposed to be supported\n* Added
  more memory efficient subtypes for R, V3, BV, I, PV, H, C, BPV, ODD, TPV, and APS\n*
  Namely: Cl3_R, Cl3_V3, Cl3_BV, Cl3_I, Cl3_PV, Cl3_H, Cl3_C, Cl3_BPV, Cl3_ODD, Cl3_TPV,
  and Cl3_APS\n* Added smart constructors to covert to/from the more memory efficient
  subtypes\n* Added a \"weigh\" based benchmark to verify that the more memory efficient
  subtypes are actually more memory efficent\n* Added a WeighStorableCl3 benchmark;
  command to run: stack bench cl3:bench-cl3-weigh\n* Added a NbodyMassiv benchmark;
  command to run: stack bench cl3:bench-cl3-massiv-nbody\n* Modified existing NbodyGameCl3
  benchmark; command to run: stack bench cl3:bench-cl3-nbody\n* LiquidHaskell found
  some interesting unsaftey in the definition of 'tan' and 'tanh'\n* Hopefully it's
  solved with a judicious use of 'reduce' for instances above R and I, in the affected
  'tan' and 'tanh' calls\n* Corrected spelling error sp: simi to semi, in the definition
  of a random unit vector\n* 'abssignum' why not calculate 'abs' once and use it twice\n*
  'absolute' only constructs an R\n\n\n## 2.0.0.0  -- 2020-06-20\n\n* Added work around
  for GHC 8.10 regression of Issue #15304 reproducing code changes from GHC MR 2608
  in the source files\n* Added 'BangPatterns' language extension\n* Added 'MultiWayIf'
  language extension\n* Added 'Control.DeepSeq' dependency for 'NFData' and 'rnf'\n*
  Added class instance for 'NFData'\n* Added 'randUnitary' for a random Unitary value
  in APS\n* Added CPP flags to Cl3 be able to turn off derived instances and the random
  dependancy\n* Added CPP flags to JonesCalculus to turn off the random dependancy\n*
  Added new function 'mIx' for the Inverse Hodge Star operator\n* Added new function
  'timesI' to easily multiply 'i' times something \n* Fixed 'compare' so that there
  will be a total order when comparing I with other I values\n* Refactored 'compare'
  so that lets were moved to a higher level\n* Refactored 'abs' so that (2*) was changed
  to (x + x) and common computations were let floated\n* Refactored 'abs' to reduce
  duplicate code with a helper function\n* Refactored 'signum' to inline more Double
  precesion math into the returned value\n* Refactored 'signum' to reduce duplicate
  code with a helper function\n* Added 'reimMag' helper function for calculating the
  magnitude of the real and imaginary grades of APS\n* Refactored 'recip' to use a
  helper function, moved some shared calculations to a 'let' binding\n* Removed the
  final 'reduce' from the Fractional instances\n* Refactored 'log' to convert the
  'sqrt' from inside the log to a '(/2)'\n* Refactored imaginary implementation of
  'log' to specialize the values at +/- 1 to be purly imaginary\n* Refactored imaginary
  implementation of 'sqrt' to inline more Double precision math into the 'C' constructor\n*
  Refactored imaginary implementation of 'sqrt' to specialize the values at 0 to be
  purly real\n* Refactored complex implementation of 'sqrt' to inline more Double
  precision math into the 'C' constructor\n* Refactored imaginary implementation of
  'sin' to specialize the values at 0 to be purly real\n* Refactored complex implementation
  of 'tan' to inline more Double precision math into the 'C' constructor\n* Refactored
  imaginary implementation of 'tan' to specialize the value at 0 to be purly real\n*
  Refactored real implementation of 'asin' to re-derive the implemenation to inline
  more Double precision math into the various constructors\n* Refactored imaginary
  implementation of 'asin' to specialize the value at 0 to be purly real\n* Refactored
  complex implementation of 'asin' to inline more Double precision math into the 'C'
  constructor\n* Refactored real implementation of 'acos' to re-derive the implemenation
  to inline more Double precision math into the various constructors\n* Refactored
  imaginary implementation of 'acos' to specialize the value at 0 to be purly real\n*
  Refactored complex implementation of 'acos' to inline more Double precision math
  into the 'C' constructor\n* Refactored complex implementation of 'acos' to specialize
  the value at 0 to be purly real\n* Refactored imaginary implementation of 'atan'
  to re-derive the implemenation to inline more Double precision math into the various
  constructors\n* Refactored complex implementation of 'atan' to inline more Double
  precision math into the 'C' constructor\n* Refactored complex implementation of
  'tanh' to inline more Double precision math into the 'C' constructor\n* Refactored
  imaginary implementation of 'asinh' to re-derive the implemenation to inline more
  Double precision math into the various constructors\n* Refactored complex implementation
  of 'asinh' to inline more Double precision math into the 'C' constructor\n* Refactored
  real implementation of 'acosh' to re-derive the implemenation to inline more Double
  precision math into the various constructors\n* Refactored imaginary implementation
  of 'acosh' to re-derive the implemenation to inline more Double precision math into
  the various constructors\n* Refactored complex implementation of 'acosh' to inline
  more Double precision math into the 'C' constructor\n* Refactored real implementation
  of 'atanh' to re-derive the implemenation to inline more Double precision math into
  the various constructors\n* Refactored imaginary implementation of 'atanh' to inline
  more Double precision math into the 'I' constructor\n* Refactored imaginary implementation
  of 'atanh' to specialize the value at 0 to be purly real\n* Refactored complex implementation
  of 'atanh' to inline more Double precision math into the 'C' constructor\n* Refactored
  'lsv' same as 'abs'\n* Refactored 'lsv' to guard the sqrt function so that negative
  values\n* Refactored 'lsv' to use a helper function to reduce duplicated code\n*
  Added 'loDisc' helper function to calculate lsv for PV and TPV\n* Implemented hlint's
  suggestion to remove parens around pattern for 'spectraldcmp' helper function 'dcmp'\n*
  Refactored 'dcmp' to order based on the RHS and to commonize the BPV and APS constructors\n*
  Implemented hlint's suggestion to remove parens around pattern for 'eigvals' helper
  function 'eigv'\n* Refactored 'eigv' to order based on the RHS and to commonize
  the BPV and APS constructors\n* Added 'dup' helper function to duplicate a value
  in a tuple\n* Implemented hlint's suggestion to remove parens around pattern for
  'project' helper function 'proj'\n* Refactored 'project' to use helper functions
  for single and double vector grade constructors\n* Added 'biTriDProj' helper function
  for generating projectors for double vector grades\n* Added 'triDProj' helper function
  for generating projectors for single vector grades\n* Refactored 'boost2colinear'
  to specialize and inline more Double precision math\n* Refactored 'isColinear' to
  be calculated with Double precision math with a helper function 'colinearHelper'\n*
  Corrected 'isColinear' to properly test for colinear even with non-reduced values\n*
  Added 'colinearHelper' function to calculate if the biparavector portion is colinear\n*
  Refactored 'hasNilpotent' to be calculated with Double precision math with a helper
  function 'nilpotentHelper'\n* Added 'nilpotentHelper' function to calculate if the
  biparavector portion is nilpotent\n* Implemented hlint's suggestion to remove '$'
  from 'projEigs'\n* Refactored 'reduce' to factor out a shared comparison and use
  a helper function\n* Refactored 'reduce' to re-order some of the comparisons to
  ones that are more common\n* Removed the old value of 'mI'\n* Performed the multiplication
  that was in 'tol' and 'tol''\n* Refactored 'recip'' to be in a point free style\n*
  Refactored 'sqrt'' to be in a point free style\n* Refactored 'tan'' to be in a point
  free style\n* Refactored 'asin'' to be in a point free style\n* Refactored 'acos''
  to be in a point free style\n* Refactored 'atan'' to be in a point free style\n*
  Refactored 'tanh'' to be in a point free style\n* Refactored 'asinh'' to be in a
  point free style\n* Refactored 'atanh'' to be in a point free style\n* Added random
  projectors, nilpotnents, and unitary cliffors, to the Random instance of Cl3\n*
  Refactored 'rangePV' to be more uniform and within the required range\n* Refactored
  'rangeH' to be more uniform and within the required range\n* Refactored 'rangeC'
  to be more uniform and within the required range\n* Refactored 'rangeBPV' to be
  more uniform and within the required range\n* Refactored 'rangeODD' to be more uniform
  and within the required range\n* Refactored 'rangeTPV' to be more uniform and within
  the required range\n* Refactored 'rangeAPS' to be more uniform and within the required
  range\n* Refactored 'randUnitV3' to be more uniform and not to be biased to the
  poles\n* Refactored 'randProjector' to inline more Double precision math into the
  PV constructor\n* Refactored 'randNilpotent' to inline more Double precision math
  into the BPV constructor\n* Added 'randUnitary' to generate random unitary Cliffors\n*
  Refactored 'vectorHelper' to use 'randUnitV3'\n* Rewrote the tests to use Criterion
  instead of QuickCheck\n* Changed the tests Arbitrary to 'randomRIO'\n* Changed the
  test's random input to be 5,000,000 Cliffors\n* Refactored the tests to use 'mIx'\n*
  Refactored the tests '≈≈' to be a mean squared error calculation compared to a threshold\n*
  Refactored the tests 'poles' to use a 'closeTo' function instead of '≈≈' to compare
  with eigenvalues\n* Added to the tests a 'closeTo' function to compare against eigenvalues
  in the complex plane using a Euclidean distance\n\n## 1.0.0.4  -- 2018-10-18\n\n*
  Found various improvements while preparing for NPFL specialized Jordan for BPV and
  APS\n* Removed all $! and replaced with $, found that this resolved compile time
  and space issues updated ghc track #15304\n* Removed -fno-worker-wrapper from the
  cabal file\n* Greatly simplified the implementation of boost2colinear also discovered
  while preparing for NPFL\n\n## 1.0.0.3  -- 2018-08-16\n\n* Factored out the view
  pattern (reduce -> cliffor) on several functions so it wasn't repeated in every
  pattern match\n* Added -fno-worker-wrapper to work around the compile time and space
  issues in ghc > 8.0\n\n## 1.0.0.2  -- 2018-06-19\n\n* Tested with GHC 7.8.4 and
  8.4.2\n* Lowered version bounds to support lts-2.22, base >= 4.7, QuickCheck >=
  2.7\n* Explicitly imported <$> from Control.Applicative to support the earlier versions
  of Base & GHC for the tests\n\n## 1.0.0.1  -- 2018-06-10\n\n* Used Stack to test
  different versions of GHC.\n* Removed {-# OPTIONS_GHC -fno-warn-unused-top-binds
  #-} from Cl3.hs to better support earlier versions of GHC, and it was no longer
  needed.\n* Loosened version bound for QuickCheck to work better with earlier versions
  of Stackage LTS snapshots.\n* Improved spectraldcmp's documentation to clairify
  that spectraldcmp requires an implementation of the real, imaginary, and complex
  implememtation of the function.\n\n## 1.0.0.0  -- 2017-10-28\n\n* First version.
  Released on an unsuspecting world.\n\n"
basic-deps:
  base: '>=4.7 && <5'
  random: '>=1.0 && <2'
  deepseq: '>=1.1 && <2'
all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
- 2.0.0.0
- 3.0.0.0
author: Nathan Waivio
latest: 3.0.0.0
description-type: markdown
description: |2

  ```haskell
  --          CCCCCCCCCC      llllllllll                     3333333333
  --      CCCCCCCCCCCCCCCCCC   llllllllll                333333333333333333
  --    CCCCCCC      CCCCCCCCCC llllllllll            3333333333       333333
  --   CCCCC               CCC   llllllllll            333         ##   33333
  --  CCCCCC                      llllllllll                       #    33333
  --  CCCCC                        llllllllll                          33333
  --  CCCCC                         llllllllll          /      @    333333
  --  CCCCC                          llllllllll        /|  +         33333
  --  CCCCC                          lllllllllll       \|  +         33333
  --  CCCCC                         lllllllllllll       \      @    333333
  --  CCCCC                        lllllll lllllll                     33333
  --  CCCCCC                      lllllll   lllllll                #    33333
  --   CCCCC               CCC   lllllll     lllllll   333         ##   33333
  --    CCCCCCC      CCCCCCCCCC lllllll       lllllll 3333333333       333333
  --      CCCCCCCCCCCCCCCCCC   lllllll         lllllll   333333333333333333
  --          CCCCCCCCCC      lllllll           lllllll      3333333333
  ```



  # Cl3
  Cl3 is a Haskell Library implementing standard functions for the [Algebra of Physical Space](https://en.wikipedia.org/wiki/Algebra_of_physical_space) Cl(3,0)

  The goal of the Cl3 library is to provide a specialized, safe, high performance, Algebra of Physical Space implementation.
  This library is suitable for physics simulations.  The library integrates into Haskell's standard prelude and has few dependencies.
  The library uses a ADT data type to specialize to specific graded elements in the Algebra of Physical Space.


  # ADT Interface
  The constructors are specialized to single and double grade combinations and the general case of APS.
  Using the specialized constructors helps the compiler to compile to code similar to that you would hand write.
  The constructors follow the following conventions for basis.

  ```haskell
  scalar = R e0
  vector = V3 e1 e2 e3
  bivector = BV e23 e31 e12
  trivectorPseudoScalar = I e123
  paravector = PV e0 e1 e2 e3
  quarternion = H e0 e23 e31 e12
  complex = C e0 e123
  biparavector = BPV e1 e2 e3 e23 e31 e12
  oddparavector = ODD e1 e2 e3 e123
  triparavector = TPV e23 e31 e12 e123
  aps = APS e0 e1 e2 e3 e23 e31 e12 e123
  ```
  # Usage
  In MATLAB or Octave one can write: `sqrt(-25)` and get `5.0i`

  In standard Haskell `sqrt (-25)` will produce `NaN`

  But using the Cl3 library `sqrt (-25) :: Cl3` will produce `I 5.0`, and likewise `(I 5.0)^2` will produce `R (-25)`

  If the unit imaginary is defined as `i = I 1`, expressions very similar to MATLAB can be formed `1.2 + 2.3*i` will produce `C 1.2 2.3`

  Vector addition is also natural, two arbitrary vectors `v1 = V3 a1 a2 a3` and `v2 = V3 b1 b2 b3` can be added `v1 + v2` and scaled `2*(v1+v2)`

  The dot product (inner product) of two arbitrary vectors is `toR $ v1 * v2`, that is the scalar part of the geometric product of two vectors.

  The cross product is the Hodge Dual of the wedge product (outer product) `-i * toBV (v1*v2)`

  The multiplication of two unit vectors is related to the rotor rotating from `u_from` to `u_to` like so `rot = sqrt $ u_to * u_from`

  Any arbitrary vector can be rotated by a rotor with the equation of `v' = rot * v * dag rot`

  Rotors can also be formed with an axis unit vector `u` and real scalar angle `theta` in units of radians, it produces the versor (unit quaternion) `rot = exp $ (-i/2) * theta * u`

  For special relativity with the velocity vector `v` and speed of light scalar `c`:
  * Beta is `beta = v / c`
  * Rapidity is `rapidity = atanh beta`
  * Gamma is `gamma = cosh rapidity`
  * Composition of velocities is simply adding the two rapidities and converting back to velocity
  * Proper Velocity is `w = c * sinh rapidity` or `w = gamma * v`
  * Four Velocity is a paravector `u = exp rapidity` where the real scalar part is `gamma * c` and the vector part is `w / c`
  * The Boost is `boost = exp $ rapidity / 2`

  # APS Basis
  Where __e0__ is the scalar basis frequently refered to as "1", in other texts.

  __e1__, __e2__, and __e3__ are the vector basis of 3 orthonormal vectors.

  __e23__, __e31__, and __e12__ are the bivector basis, these are formed by the outer product of two vector basis. For instance in the case of __e23__, the outer product, or wedge product, is __e2__ /\ __e3__, but because this can be simplified to the geometric product of __e2__ * __e3__ because the scalar part is zero for orthoginal vector basis'.  The geometric product of the two basis vectors is further shortened for brevity to __e23__.

  __e123__ is the trivector basis, and is formed by the wedge product of __e1__ /\ __e2__ /\ __e3__, and likewise shortened to __e123__


  # Multiplication of the basis elements
  The basis vectors multiply with the following multiplication table:

  |    Mult  |   e0 |   e1 |   e2 |   e3 |  e23 |  e31 |  e12 | e123 |
  |:--------:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|
  |   __e0__ |   e0 |   e1 |   e2 |   e3 |  e23 |  e31 |  e12 | e123 |
  |   __e1__ |   e1 |   e0 |  e12 | -e31 | e123 |  -e3 |   e2 |  e23 |
  |   __e2__ |   e2 | -e12 |   e0 |  e23 |   e3 | e123 |  -e1 |  e31 |
  |   __e3__ |   e3 |  e31 | -e23 |   e0 |  -e2 |   e1 | e123 |  e12 |
  |  __e23__ |  e23 | e123 |  -e3 |   e2 |  -e0 | -e12 |  e31 |  -e1 |
  |  __e31__ |  e31 |   e3 | e123 |  -e1 |  e12 |  -e0 | -e23 |  -e2 |
  |  __e12__ |  e12 |  -e2 |   e1 | e123 | -e31 |  e23 |  -e0 |  -e3 |
  | __e123__ | e123 |  e23 |  e31 |  e12 |  -e1 |  -e2 |  -e3 |  -e0 |


  # Multiplication of the ADT Constructors
  The grade specialized type constructors multiply with the following multiplication table:

  | Mult    |   R |  V3 |  BV |   I |  PV |   H |   C | BPV | ODD | TPV | APS |
  |:-------:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
  |   __R__ |   R |  V3 |  BV |   I |  PV |   H |   C | BPV | ODD | TPV | APS |
  |  __V3__ |  V3 |   H | ODD |  BV | APS | ODD | BPV | APS | ODD | APS | APS |
  |  __BV__ |  BV | ODD |   H |  V3 | APS |   H | BPV | APS | ODD | APS | APS |
  |   __I__ |   I |  BV |  V3 |   R | TPV | ODD |   C | BPV |   H |  PV | APS |
  |  __PV__ |  PV | APS | APS | TPV | APS | APS | APS | APS | APS | APS | APS |
  |   __H__ |   H | ODD |   H | ODD | APS |   H | APS | APS | ODD | APS | APS |
  |   __C__ |   C | BPV | BPV |   C | APS | APS |   C | BPV | APS | APS | APS |
  | __BPV__ | BPV | APS | ODD | BPV | APS | APS | BPV | APS | APS | APS | APS |
  | __ODD__ | ODD | ODD | TPV |   H | APS | ODD | APS | APS |   H | APS | APS |
  | __TPV__ | TPV | APS | APS |  PV | APS | APS | APS | APS | APS | APS | APS |
  | __APS__ | APS | APS | APS | APS | APS | APS | APS | APS | APS | APS | APS |


  # Performace Benchmarking
  A benchmark has been developed based on the Haskell entry for the N-Body Benchmark in the [The Computer Language Benchmarks Game](https://benchmarksgame-team.pages.debian.net/benchmarksgame/) with some modifications to run with [Criterion](https://hackage.haskell.org/package/criterion).
  On my machine with GHC-8.10.7 the current fastest implementation completes 50M steps with a mean time of 4.014 seconds.  The benchmark uses a hand rolled implementation of vector math.  The Cl3 implementation completes 50M steps with a mean time of 5.691 seconds.  This 1.67 second difference amounts to a 33.5 ns difference in the inner loop.  This performance has been degraded with GHC regressions in GHC-9.0.2 and GHC-9.2.2 by ~5x.
  In the 3.0 release a [massiv](https://hackage.haskell.org/package/massiv) benchmark was added in addition to a [weigh](https://hackage.haskell.org/package/weigh) based benchmark.

  # Saftey and Correctness
  In the 3.0 release [Liquid Haskell](https://hackage.haskell.org/package/liquidhaskell) support was added, Liquid Haskell did prove its worth by finding a couple of bugs in the implementation.  So far it is an initial release and not much has been done to fully integrate Liquid Haskell to the library.

  # Design Philosophy
  The design space for Clifford Algebra libraries was explored quite a bit before the development of this library.  Initially the isomorphism of APS with 2x2 Complex Matrices was used, this had the draw back that multiplying the scalar 2 * 2 would incur all of the computational cost of multiplying two 2x2 complex matrices.
  Then the design was changed to lists that contained the basis' values, but lists are computationally slow and do not produce well optimized code.
  Then a single constructor data type for APS was developed, but this had all of the drawbacks of 2x2 complex matrices.
  The specialized ADT Constructor version of the library was developed and it showed that it had some promise.
  More of the design space was explored, a version of the Cl3 library was developed using Multi-parameter Type Classes and Functional Dependencies, this didn't appear to have much gained over the specialized ADT Syntax interface and it didn't use the standard Prelude classes like Num, Float, etc.  It was also difficult for me to figure out how to code a `reduce` function.
  So the specialized ADT Constructor design of the Cl3 library was finished and released.

  # How does this fit in with the existing Haskell ecosystem?
  Cl3 is meant to be a [Linear](https://hackage.haskell.org/package/linear) killer based on Geometric Algebra.  The linear package
  consists of many different types that are not easily combinable using the Num Class, and require many specialized functions each to multiply a different combination of types.

  The [clifford](https://hackage.haskell.org/package/clifford) package uses the [Numeric Prelude](https://hackage.haskell.org/package/numeric-prelude),
  for a Clifford Algebra of arbitrary signature that stores multivector blades in a list data structure.

  The [clif](https://hackage.haskell.org/package/clif) is for symbolic computing using symbolic and numeric computations
  with finite and infinite-dimensional Clifford algebras arising from arbitrary bilinear forms.  The libraries representation of a Cliffor also makes use of lists.
license-name: BSD-3-Clause
