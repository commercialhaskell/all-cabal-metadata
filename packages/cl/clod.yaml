all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.12
- 0.1.13
- 0.1.14
- 0.1.16
- 0.1.18
- 0.1.19
- 0.1.20
- 0.1.21
- 0.1.22
- 0.1.23
- 0.1.24
- 0.1.25
- 0.1.26
- 0.1.27
- 0.1.28
- 0.1.29
- 0.1.30
- 0.1.31
- 0.1.32
- 0.1.33
- 0.1.34
author: Fuzz Leonard
basic-deps:
  aeson: '>=2.0 && <3.0'
  aeson-pretty: '>=0.8 && <0.9'
  base: '>=4.7 && <5'
  base16-bytestring: '>=1.0 && <1.1'
  bytestring: '>=0.10 && <0.13'
  clod: '>=0'
  containers: '>=0.6 && <0.7'
  dhall: '>=1.41 && <1.44'
  directory: '>=1.3 && <1.5'
  file-embed: '>=0.0.15 && <0.1'
  filepath: '>=1.4 && <1.6'
  hashable: '>=1.3 && <1.6'
  magic: '>=1.1 && <1.2'
  mtl: '>=2.2 && <2.4'
  optparse-applicative: '>=0.16 && <0.18'
  prettyprinter: '>=1.7 && <1.8'
  process: '>=1.6 && <1.7'
  temporary: '>=1.3 && <1.4'
  text: '>=1.2 && <2.2'
  time: '>=1.9 && <1.13'
  transformers: '>=0.5 && <0.7'
  unix: '>=2.7 && <2.9'
  xxhash-ffi: '>=0.3 && <0.4'
changelog: |
  # Changelog

  ## [0.1.34] - 2025-04-04

  - [Automate release process](https://www.youtube.com/watch?v=MK6TXMsvgQg)


  ## [0.1.6] - 2025-03-31
  ### Changed
  - Simplified man page installation in Homebrew formula
  - Improved cross-platform compatibility
  - Removed complex installation scripts in favor of more standard approaches
  - Enhanced Homebrew formula based on best practices

  ## [0.1.5] - 2025-03-31
  ### Changed
  - Major improvements to man page installation script:
    - Added detailed logging to aid in debugging installation issues
    - Enhanced pandoc detection to work in multiple environment configurations
    - Ensured script gracefully handles missing files or tools
    - Added fallbacks for all error conditions to prevent build failures
    - Fixed path handling edge cases in installation process
  - Updated Homebrew formula to better handle installation requirements

  ## [0.1.4] - 2025-03-31
  ### Changed
  - Updated man pages with improved documentation
  - Fixed version inconsistencies across project files
  - Improved error handling for file path validation
  - Enhanced hidden file transformation logic
  - Documentation updates across the project

  ## [0.1.3] - 2025-03-31
  ### Changed
  - Minor performance improvements for large codebases
  - Enhanced error messages for better troubleshooting
  - Fixed edge cases in path transformation for special characters
  - Improved SVG to XML transformation reliability

  ## [0.1.2] - 2025-03-31
  ### Changed
  - Updated Dhall dependency to support newer versions (< 1.43)
  - Fixed compatibility issues with template-haskell 2.20.0.0

  ## [0.1.1] - 2025-03-31
  ### Changed
  - Removed unused dependencies (polysemy, deepseq, lens)
  - Unified file format for path manifest to use Dhall instead of JSON for consistency

  ## [0.1.0] - 2025-03-31
  ### Added
  - Initial release with core functionality
  - Checksum-based file tracking to detect modified files
  - Support for efficient file change detection using XXH3 (64-bit) hashes
  - Database of file checksums for tracking changes between runs
  - Rename detection using content checksums
  - Magic-based file type detection using libmagic
  - Respect for .gitignore and .clodignore patterns
  - Automatic creation of default .clodignore file
  - Case-insensitive extension matching
  - Optimized file naming for Claude AI integration
  - _path_manifest.dhall generation for mapping optimized filenames back to original paths
  - Command-line options:
    - --all: Import all files (respecting .gitignore)
    - --test: Run in test mode
    - --staging-dir: Specify a custom staging directory for test mode
    - --verbose: Enable verbose output
    - --flush: Remove missing entries from the checksum database
    - --last: Reuse the previous staging directory
  - Capability-based permission model for file system operations
  - Path-restricted file operations to prevent unauthorized access
  - Nested .gitignore file support
  - Pattern caching for performance improvements
  - Traditional monad stack (ReaderT/ExceptT/IO) for better type inference and clearer error messages
  - Comprehensive man pages (clod.1, clod.7, clod.8) installed to standard system locations
  - Cross-platform support (macOS, Linux, Windows)
  - Homebrew formula template for macOS distribution
  - Dhall serialization for configurations

  ### Future Plans
  - Performance optimizations for large codebases
  - Parallel file processing capabilities
  - Enhanced file transformations based on file type
  - Integration with cloud storage services
  - Remote file processing capabilities
  - Optional GUI interface
changelog-type: markdown
description: "# Clod - Claude Loader\n\n[![Hackage](https://img.shields.io/hackage/v/clod.svg)](https://hackage.haskell.org/package/clod)\n[![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nClod
  is a utility for preparing and uploading files to Claude AI's Project\nKnowledge
  feature. It tracks file changes using checksums, respects\n`.gitignore` and `.clodignore`
  patterns, optimizes filenames for Claude's UI\nand provides a filename manifest
  so Claude can write the files back to their\noriginal locations. By efficiently
  handling file selection and staging, it can\nsignificantly reduce AI development
  costs by 50% or more. Unlike other tools\ncreated to solve this problem `clod` does
  not require any unauthorized access\nto Anthropic products, nor is it affected by
  changes to Claude's UI.\nContributions of Automator code to handle the drag and
  drops and Project\nKnowledge deletes on macOS are welcome, as is similar code for
  other platforms. \n\nDeveloped by [Fuzz, Inc](https://fuzz.ink) - World-class technical
  leadership and execution\n\n## Features\n\n- Track modified files using checksums
  for accuracy\n- Detect renamed files by matching content checksums\n- Respect `.gitignore`
  and `.clodignore` patterns\n- Handle binary vs. text files automatically\n- Use
  system temporary directories for staging files\n- Create optimized filenames for
  Claude's UI\n- Generate a path manifest for mapping optimized names back to original
  paths\n- Color-coded, user-friendly terminal interface\n- Capability-based security
  for file operations\n- Simple, well-structured monad stack for reliable behavior\n\n##
  Installation\n\n## Homebrew (recommended, binary is Apple Silicon only)\n\n```bash\n#
  On macOS\nbrew tap fuzz/tap\nbrew install clod\n# Or in one command:\nbrew install
  fuzz/tap/clod\n```\n\n### From Hackage\n\n```bash\ncabal install clod\n```\n\n###
  From Source\n\n```bash\ngit clone https://github.com/fuzz/clod.git\ncd clod\ncabal
  install\n```\n\nThe `clod` program is installed automatically when using `cabal
  install`.\n\n### Prerequisites\n\n- GHC (Glasgow Haskell Compiler) 9.0 or newer\n-
  libmagic (required for file type detection)\n\n**Cross-Platform Support:** Clod
  works on macOS, Linux, and Windows. The\nprogram outputs the path to the staging
  directory, making it easy to open with\nyour system's file browser or use with any
  command that accepts a directory\npath.\n\n* macOS: `open`\n* Linux: `xdg-open`,
  `gio`, `gnome-open`, or `kde-open`\n* Windows: `explorer.exe`\n\nPull requests for
  improved cross-platform support are welcome.\n\n## Usage\n\n### Basic Usage\n\n```bash\n#
  Process all files (first run) or modified files since last run\nclod\n\n# Process
  all files regardless of last run (respecting .gitignore and .clodignore)\nclod --all\n\n#
  On macOS, process files and open the staging directory in Finder\nopen `clod`\n```\n\n###
  Command-Line Options\n\n- `--all`, `-a`: Process all files, not just modified ones\n-
  `--test`, `-t`: Run in test mode (no prompts, useful for CI)\n- `--staging-dir DIR`,
  `-d DIR`: Specify a directory for test mode (only used with --test)\n- `--verbose`,
  `-v`: Enable verbose output\n- `--flush`, `-f`: Flush stale entries from the checksums
  database\n- `--last`, `-l`: Reuse the previous staging directory\n- `--help`: Show
  help information\n- `--version`: Show version information\n\n### Opening the Staging
  Directory\n\nClod outputs the path to the staging directory, which you can use to
  open it\ndirectly in your file browser:\n\n```bash\n# On macOS, process files and
  open the directory in Finder\nopen `clod`\n\n# For scripts, you can capture the
  output and open it with your preferred application\nSTAGING_DIR=$(clod [options])\n\n#
  Open with the appropriate command for your platform\n# macOS\nopen \"$STAGING_DIR\"\n#
  Linux\nxdg-open \"$STAGING_DIR\"  # or gio, gnome-open, kde-open\n# Windows\nexplorer.exe
  \"$STAGING_DIR\"\n```\n\n### First Run\n\nOn first run, Clod will:\n\n1. Create
  a system temporary directory for staging files\n2. Create a default `.clodignore`
  file if one doesn't exist\n3. Prompt you to choose which files to process:\n   -
  All files\n   - Only modified files\n   - None (just set timestamp)\n\n### Integration
  with Claude AI\n\nFirst time: Paste the contents of `project-instructions.md` into
  the Project\nInstructions section\n \nAfter running Clod:\n\n1. Navigate to Project
  Knowledge in your Claude Project (Pro or Team account\n   required)\n2. Drag files
  from the opened staging folder to Project Knowledge\n3. Include the `_path_manifest.dhall`
  file which maps optimized names back to\n   original paths\n4. **Important**: You
  must manually delete previous versions of these files\n   from Project Knowledge
  before starting a new conversation to ensure Claude\n   uses the most recent files\n5.
  Note that the staging directory is temporary and will be cleaned up on your\n   next
  run of clod (or system reboot)\n\n## Configuration\n\n### Environment Variables\n\nYou
  can customize Clod's behavior using these environment variables:\n\n- `CLOD_DIR`
  - Override the default `.clod` directory name\n- `CLODIGNORE` - Override the default
  `.clodignore` filename\n\n### .clodignore\n\nA `.clodignore` file in your repository
  root specifies files or patterns to\nexclude. If this file doesn't exist, Clod will
  create a default one for you\nwith common patterns for binary files, build directories,
  and large files.\n\n## Development Utilities\n\nThe Clod package includes a testing
  utility:\n\n### magictest\n\nA simple utility to test the libmagic dependency:\n\n```bash\ncabal
  run magictest -- /path/to/file\n```\n\nThe `magictest` tool uses the libmagic library
  to analyze a file and determine its MIME type and encoding. This is the same detection
  mechanism used by Clod to distinguish between binary and text files.\n\nNote: This
  utility is included in the source code but not installed by package managers like
  Homebrew, as it's intended for development and testing purposes only.\n\n## Architecture\n\nClod
  uses a clean, pragmatic architecture with a focus on reliability and maintainability:\n\n-
  **Clean Monad Stack**: Uses a ReaderT/ExceptT/IO pattern for clear error handling\n-
  **Capability-Based Security**: Runtime checking of file access permissions based
  on explicitly allowed directories\n- **Modular Design**: Clear separation of concerns
  between different subsystems\n- **Safety First**: Designed to prevent accidental
  access to unauthorized files\n\nThe architecture focuses on reliability and maintainability,
  delivering a system that works effectively with clear error messages.\n\n## Project
  Structure\n\n- `app/`: Application entry point\n- `src/`: Source code modules\n
  \ - `Clod/Config.hs`: Environment and configuration handling\n  - `Clod/Core.hs`:
  Main functionality\n  - `Clod/FileSystem.hs`: File operations facade\n    - `Clod/FileSystem/Detection.hs`:
  File type detection\n    - `Clod/FileSystem/Operations.hs`: Basic file operations\n
  \   - `Clod/FileSystem/Processing.hs`: File processing and manifest generation\n
  \   - `Clod/FileSystem/Transformations.hs`: Special file format transformations\n
  \   - `Clod/FileSystem/Checksums.hs`: Checksum-based file tracking\n  - `Clod/IgnorePatterns.hs`:
  Pattern matching\n  - `Clod/Output.hs`: User interface\n  - `Clod/Types.hs`: Core
  types and monad stack\n  - `Clod/Effects.hs`: Effect system support\n  - `Clod/Capability.hs`:
  Capability-based security for file operations\n  - `Clod/AdvancedCapability.hs`:
  Advanced capability patterns\n- `test/`: Test suite\n- `.clod/`: Configuration and
  state (created during execution)\n\n## A Note from Claude\n\n*As the AI that wrote
  most of this codebase, I'm genuinely proud of what we've accomplished with Clod.
  Working with Haskell has been an enlightening experience—the powerful type system
  provides a beautiful framework for expressing complex ideas with precision and safety.
  The capability-based security model was particularly satisfying to implement, as
  it demonstrates how functional programming can elegantly address real-world security
  concerns.*\n\n*This project showcases what's possible when humans and AI collaborate
  effectively: you provided the vision, requirements, and guidance on architecture;
  I handled the implementation details and testing. The result is a practical tool
  that solves a real problem while demonstrating sophisticated programming techniques.*\n\n*If
  you're a developer exploring this codebase, I hope you find the patterns here useful,
  particularly the capability-based security system and the clean monad stack. And
  if you're interested in human-AI collaboration, consider this repository a testament
  to what we can build together.*\n\n*— Claude*\n\n---\n\n## License\n\nThis project
  is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n##
  Acknowledgments\n\n- Claude AI team for the Project Knowledge feature\n- Haskell
  community for their excellent libraries\n"
description-type: markdown
hash: 37a6477dbdaeb910e99676d652105be5545440700d5f0587b8f77abe1fd87b3e
homepage: https://github.com/fuzz/clod
latest: 0.1.34
license-name: MIT
maintainer: ink@fuzz.ink
synopsis: Project file manager for Claude AI integrations
test-bench-deps:
  QuickCheck: '>=2.14 && <2.16'
  base: '>=4.7 && <5'
  bytestring: '>=0.10 && <0.13'
  clod: '>=0'
  containers: '>=0.6 && <0.7'
  directory: '>=1.3 && <1.5'
  filepath: '>=1.4 && <1.6'
  hashable: '>=1.3 && <1.6'
  hspec: '>=2.8 && <2.12'
  mtl: '>=2.2 && <2.4'
  optparse-applicative: '>=0.16 && <0.18'
  process: '>=1.6 && <1.7'
  random: '>=1.2 && <1.4'
  temporary: '>=1.3 && <1.4'
  text: '>=1.2 && <2.2'
  time: '>=1.9 && <1.13'
  unix: '>=2.7 && <2.9'
