all-versions:
- 0.0.0.0
- 0.1.0.0
- 0.2.0.0
author: Alexis King <lexi.lambda@gmail.com>, Michael Adlai Arnold <michaelaarnold@gmail.com>
basic-deps:
  aeson: '>=0.11.2.0'
  amazonka: '>=1.4.5'
  amazonka-cloudformation: '>=1.4.5'
  amazonka-core: '>=1.4.5'
  amazonka-kms: '>=1.4.5'
  amazonka-s3: '>=1.4.5'
  base: '>=4.9.0.0 && <5'
  bytestring: '>=0'
  containers: '>=0'
  crypto-api: '>=0.3'
  deepseq: '>=1.4.1.0'
  exceptions: '>=0.6'
  lens: '>=0'
  monad-control: '>=1.0.0.0'
  monad-logger: '>=0.3.11.1'
  mtl: '>=0'
  optparse-applicative: '>=0.14.0.0'
  text: '>=0'
  text-conversions: '>=0.3.0'
  transformers: '>=0'
  transformers-base: '>=0'
  unordered-containers: '>=0'
  uuid: '>=1.2.6 && <2'
  yaml: '>=0.8'
changelog: |
  ## 0.2.0.0 (April 19th, 2018)

  ### New Features

  - Added `wait` command to wait until stack is in a stable state
  - Added `teardown` command to destroy stack
  - Logging now uses ToJSON instances to provide accurate and efficient YAML
  - Stack policy can now be set in deployment configurations using `policy`
  - CLI gives useful information about stacks when actions complete
  - Already-provisioned stack parameters default to previously used values

  ### Bugfixes and Minor Changes

  - Stability and error-handling improvements
  - onCreate hooks run only when creating, rather than updating

  ## 0.1.0.0 (July 26th, 2017)

  ### Breaking Changes

  - The `deploy` command is renamed to `provision`.
  - The environment is now passed as a positional argument instead of as an environment variable.

  ### New Features

  - Added support for configuring parameters with command-line flags and hardcoded environments, in addition to environment variables.
  - Parameters are now parsed from template files to determine whether or not they are optional.
  - Tags `cj:application` and `cj:environment` are always added, based on the mandatory `ENV` positional argument and information in the configuration.
  - The `whenEnv` and `getEnvArg` functions are provided to conditionally configure stacks based on the current environment.

  ### Bugfixes and Minor Changes

  - Various improvements to CLI help text.

  ## 0.0.0.0 (June 26th, 2017)

  - Initial release
changelog-type: markdown
description: |
  # cloud-seeder [![Build Status](https://travis-ci.org/cjdev/cloud-seeder.svg?branch=master)](https://travis-ci.org/cjdev/cloud-seeder)

  `cloud-seeder` is a Haskell DSL for provisioning and controlling [CloudFormation][aws-cloudformation] stacks. It provides an opinionated mechanism for provisioning a set of related stacks called a “deployment”. You write ordinary CloudFormation [templates][aws-cloudformation-templates] as YAML, and `cloud-seeder` helps to create a self-executing command-line interface to orchestrate their deployment.

  For example consider a template that provisions an S3 bucket with a configurable name, `bucket.yaml`:

  ```yaml
  AWSTemplateFormatVersion: '2010-09-09'

  Parameters:
    BucketName:
      Type: String

  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Ref BucketName

  Outputs:
    Bucket:
      Value: !Ref Bucket
    BucketDomain:
      Value: !GetAtt Bucket.DomainName
  ```

  Using `cloud-seeder`, you can create a deployment script in the same directory, `config.hs`:

  ```haskell
  #!/usr/bin/env stack
  -- stack runhaskell
  {-# LANGUAGE OverloadedStrings #-}

  import Network.CloudSeeder

  main = cliIO $ deployment "cloud-seeder-example" $ do
    stack "bucket" $ do
      flag "BucketName"
  ```

  This file contains a declarative configuration of your deployment, but it also serves as an executable command-line tool! Since it has a shebang at the top, it can be used directly to run the deployment with a pleasant interface:

  ```
  $ ./config.hs provision bucket production --BucketName my-awesome-s3-bucket
  ```

  The first argument to the `provision` command is the stack you want to provision, and the second argument is the name of some “environment” to provision in. This environment is used to namespace the eventual stack name, so the above command will spin up a new CloudFormation stack called `production-cloud-seeder-example-bucket`. The environment is also available in templates themselves if they specify an `Env` [parameter][aws-cloudformation-parameters]. The generated command-line interface is also robust in the face of mistakes, and it won’t do anything if a required parameter isn’t specified.

  While `cloud-seeder` *can* be used for single-stack deployments, it’s far more useful when used with multiple stacks at a time, which may possibly depend on other stacks’ [outputs][aws-cloudformation-outputs]. For example, we may now wish to serve resources out of our S3 bucket by using CloudFront. We can write a second template to do the job, `cdn.yaml`:

  ```yaml
  AWSTemplateFormatVersion: '2010-09-09'

  Parameters:
    BucketDomainName:
      Type: String

  Resources:
    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
          - DomainName: !Ref BucketDomainName
            Id: origin
            S3OriginConfig: {}
          # ...
  ```

  We can now add `cdn` to our deployment configuration:

  ```haskell
  #!/usr/bin/env stack
  -- stack runhaskell
  {-# LANGUAGE OverloadedStrings #-}

  import Network.CloudSeeder

  main = deployment "cloud-seeder-example" $ do
    stack "bucket" $ do
      flag "BucketName"

    stack_ "cdn"
  ```

  We use `stack_` instead of `stack` to omit the configuration block, since the `cdn` stack doesn’t need any additional configuration options. When we go to provision the stack, it will work just fine:

  ```
  $ ./config.hs provision cdn production
  ```

  Note that we did **not** have to specify the `BucketDomainName` [parameter][aws-cloudformation-parameters] explicitly, because it was an [output][aws-cloudformation-outputs] from the `bucket` stack, so it is automatically passed downward to the `cdn` stack. This allows stacks defined lower in the configuration to build on top of resources defined in previous ones.

  For more information about all of the configuration options available, as well as some of the implementation details, see [the documentation on Hackage][cloud-seeder].

  [aws-cloudformation]: https://aws.amazon.com/cloudformation/
  [aws-cloudformation-outputs]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
  [aws-cloudformation-parameters]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
  [aws-cloudformation-templates]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-guide.html
  [cloud-seeder]: http://hackage.haskell.org/package/cloud-seeder
description-type: markdown
hash: c07992db3d1f65a27f1d2a7e62a8ee271135e80ee7ba50cf4c7aa68c7e9333d2
homepage: https://github.com/cjdev/cloud-seeder#readme
latest: 0.2.0.0
license-name: ISC
maintainer: Alexis King <lexi.lambda@gmail.com>, Michael Adlai Arnold <michaelaarnold@gmail.com>
synopsis: A tool for interacting with AWS CloudFormation
test-bench-deps:
  amazonka-cloudformation: '>=0'
  base: '>=0'
  bytestring: '>=0'
  cloud-seeder: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  fast-logger: '>=0'
  hspec: '>=0'
  lens: '>=0'
  monad-logger: '>=0'
  monad-mock: '>=0'
  mtl: '>=0'
  optparse-applicative: '>=0'
  text: '>=0'
  these: '>=0'
  transformers: '>=0'
  yaml: '>=0'
