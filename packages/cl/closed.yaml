all-versions:
- 0.1.0
- 0.2.0
- 0.2.0.1
- 0.2.0.2
- 0.2.0.3
- 0.2.1.0
author: Chris Parks <chris@freckle.com>
basic-deps:
  QuickCheck: '>=2.11.3'
  aeson: '>=1.3.1.1'
  base: '>=4.9 && <5'
  cassava: '>=0.5.1.0'
  deepseq: '>=1.4.3.0'
  hashable: '>=1.2.7.0'
  persistent: '>=2.8.2'
  random: '>=1.1'
  text: '>=1.2.3.1'
changelog: ''
changelog-type: ''
description: "# closed\n\nIntegers bounded by a closed interval\n\n## Build\n\n```plaintext\nstack
  build\n```\n\n## Tutorial\n\n### Overview\n\nThis package exports one core data
  type `Closed (n :: Nat) (m :: Nat)` for describing integers bounded by a closed
  interval. That is, given `cx :: Closed n m`, `getClosed cx` is an integer `x` where
  `n <= x <= m`.\n\nWe also export a type family `Bounds` for describing open and
  half-open intervals in terms of closed intervals.\n\n```plaintext\nBounds (Inclusive
  0) (Inclusive 10) => Closed 0 10\nBounds (Inclusive 0) (Exclusive 10) => Closed
  0 9\nBounds (Exclusive 0) (Inclusive 10) => Closed 1 10\nBounds (Exclusive 0) (Exclusive
  10) => Closed 1 9\n```\n\n### Preamble\n\nFor most uses of `closed`, you'll only
  need `DataKinds` and maybe `TypeFamilies`. The other extensions below just make
  some of the tests concise.\n\n```haskell\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE
  DataKinds #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE OverloadedLists
  #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-#
  OPTIONS_GHC -fno-warn-unticked-promoted-constructors #-}\n\nmodule Main where\n\nimport
  Closed\nimport Control.Exception\nimport Data.Aeson\nimport Database.Persist\nimport
  Data.Proxy\nimport Data.Text\nimport Data.Vector\nimport GHC.TypeLits\nimport qualified
  Data.Csv as CSV\nimport Test.Hspec\nimport Test.Hspec.QuickCheck\nimport Text.Read
  (readEither)\n\nmain :: IO ()\nmain = hspec $ do\n```\n\n### Construction\n\nThe
  safe constructor `closed` uses `Maybe` to indicate failure. There is also an unsafe
  constructor `unsafeClosed` as well as a `Num` instance that implements `fromInteger`.\n\n```haskell\n
  \ describe \"safe construction\" $ do\n\n    it \"should successfully construct
  values in the specified bounds\" $ do\n      let result = closed 2 :: Maybe (Bounds
  (Inclusive 2) (Exclusive 5))\n      getClosed <$> result `shouldBe` Just 2\n\n    it
  \"should fail to construct values outside the specified bounds\" $ do\n      let
  result = closed 1 :: Maybe (Bounds (Inclusive 2) (Exclusive 5))\n      getClosed
  <$> result `shouldBe` Nothing\n\n  describe \"unsafe construction\" $ do\n\n    it
  \"should successfully construct values in the specified bounds\" $ do\n      --
  Note that you can use -XTypeApplications instead of type annotations\n      let
  result = unsafeClosed @2 @4 2\n      getClosed result `shouldBe` 2\n\n    it \"should
  fail to construct values outside the specified bounds\" $ do\n      let result =
  unsafeClosed @2 @4 1\n      evaluate (getClosed result) `shouldThrow` anyErrorCall\n\n
  \ describe \"construction with clamp\" $ do\n    it \"should round up to lower bound\"
  $ do\n      let result = clamp @2 @4 @Int 0\n      getClosed result `shouldBe` 2
  \n\n    it \"should round down to upper bound\" $ do\n      let result = clamp @2
  @4 @Int 6\n      getClosed result `shouldBe` 4\n\n    it \"should accept internal
  value as-is\" $ do\n      let result = clamp @2 @4 @Int 3\n      getClosed result
  `shouldBe` 3\n\n  describe \"unsafe literal construction\" $ do\n\n    it \"should
  successfully construct values in the specified bounds\" $ do\n      let result =
  2 :: Bounds (Inclusive 2) (Exclusive 5)\n      getClosed result `shouldBe` 2\n\n
  \   it \"should fail to construct values outside the specified bounds\" $ do\n      let
  result = 1 :: Bounds (Inclusive 2) (Exclusive 5)\n      evaluate (getClosed result)
  `shouldThrow` anyErrorCall\n```\n\n### Elimination\n\nUse `getClosed` to extract
  the `Integer` from a `Closed` value.\n\n```haskell\n  describe \"elimination\" $
  do\n\n    it \"should allow the integer value to be extracted\" $ do\n      let
  result = 1 :: Bounds (Inclusive 0) (Exclusive 10)\n      getClosed result `shouldBe`
  1\n```\n\n### Bounds Manipulation\n\nThe upper and lower bounds can be queried,
  strengthened, and weakened.\n\n```haskell\n  describe \"bounds manipulation\" $
  do\n\n    let cx = 4 :: Bounds (Inclusive 2) (Exclusive 10)\n\n    it \"should allow
  querying the bounds\" $ do\n      upperBound cx `shouldBe` (Proxy @9)\n      lowerBound
  cx `shouldBe` (Proxy @2)\n\n    it \"should allow weakening the bounds\" $ do\n
  \     upperBound (weakenUpper cx) `shouldBe` (Proxy @10)\n      lowerBound (weakenLower
  cx) `shouldBe` (Proxy @1)\n\n    it \"should allow weakening the bounds by more
  than one\" $ do\n      upperBound (weakenUpper cx) `shouldBe` (Proxy @20)\n      lowerBound
  (weakenLower cx) `shouldBe` (Proxy @0)\n\n    it \"should allow strengthening the
  bounds\" $ do\n      upperBound <$> strengthenUpper cx `shouldBe` Just (Proxy @8)\n
  \     lowerBound <$> strengthenLower cx `shouldBe` Just (Proxy @3)\n\n    it \"should
  allow strengthening the bounds by more than one\" $ do\n      upperBound <$> strengthenUpper
  cx `shouldBe` Just (Proxy @7)\n      lowerBound <$> strengthenLower cx `shouldBe`
  Just (Proxy @4)\n```\n\n### Arithmetic\n\nArithmetic gets stuck at the upper and
  lower bounds instead of wrapping. This is called [Saturation Arithmetic](https://en.wikipedia.org/wiki/Saturation_arithmetic).\n\n```haskell\n
  \ describe \"arithmetic\" $ do\n\n    it \"addition to the maxBound should have
  no effect\" $ do\n      let result = maxBound :: Bounds (Inclusive 1) (Exclusive
  10)\n      result + 1 `shouldBe` result\n\n    it \"subtraction from the minBound
  should have no effect\" $ do\n      let result = minBound :: Bounds (Inclusive 1)
  (Exclusive 10)\n      result - 1 `shouldBe` result\n```\n\n### Serialization\n\nParsing
  of closed values is strict.\n\n```haskell\n  describe \"Read\" $ do\n\n    it \"should
  successfully read values in the specified bounds\" $ do\n      let result = readEither
  \"1\" :: Either String (Bounds (Inclusive 1) (Exclusive 10))\n      result `shouldBe`
  Right 1\n\n    it \"should fail to read values outside the specified bounds\" $
  do\n      let result = readEither \"0\" :: Either String (Bounds (Inclusive 1) (Exclusive
  10))\n      result `shouldBe` Left \"Prelude.read: no parse\"\n\n  describe \"json\"
  $ do\n\n    it \"should successfully parse values in the specified bounds\" $ do\n
  \     let result = eitherDecode \"1\" :: Either String (Bounds (Inclusive 1) (Exclusive
  10))\n      result `shouldBe` Right 1\n\n    it \"should fail to parse values outside
  the specified bounds\" $ do\n      let result = eitherDecode \"0\" :: Either String
  (Bounds (Inclusive 1) (Exclusive 10))\n      result `shouldBe` Left \"Error in $:
  parseJSON: Integer 0 is not representable in Closed 1 9\"\n\n  describe \"csv\"
  $ do\n\n    it \"should successfully parse values in the specified bounds\" $ do\n
  \     let result = CSV.decode CSV.NoHeader \"1\" :: Either String (Vector (CSV.Only
  (Bounds (Inclusive 1) (Exclusive 10))))\n      result `shouldBe` Right [CSV.Only
  1]\n\n    it \"should fail to parse values outside the specified bounds\" $ do\n
  \     let result = CSV.decode CSV.NoHeader \"0\" :: Either String (Vector (CSV.Only
  (Bounds (Inclusive 1) (Exclusive 10))))\n      result `shouldBe` Left \"parse error
  (Failed reading: conversion error: parseField: Integer 0 is not representable in
  Closed 1 9) at \\\"\\\"\"\n\n  describe \"persistent\" $ do\n\n    it \"should successfully
  parse values in the specified bounds\" $ do\n      let result = fromPersistValue
  (PersistInt64 1) :: Either Text (Bounds (Inclusive 1) (Exclusive 10))\n      result
  `shouldBe` Right 1\n\n    it \"should fail to parse values outside the specified
  bounds\" $ do\n      let result = fromPersistValue (PersistInt64 0) :: Either Text
  (Bounds (Inclusive 1) (Exclusive 10))\n      result `shouldBe` Left \"fromPersistValue:
  Integer 0 is not representable in Closed 1 9\"\n```\n\n### Testing\n\nClosed values
  can be generated with QuickCheck\n\n```haskell\n  describe \"quickcheck\" $ do\n\n
  \   prop \"should always generate values in the specified bounds\" $\n      \\(cx
  :: Closed 0 1000) ->\n        natVal (lowerBound cx) <= getClosed cx &&\n        getClosed
  cx <= natVal (upperBound cx)\n```\n\n## Release\n\nTo release a new version of this
  library, push a commit to `main` using a\nconventionally-formatted commit message.\n\n-
  Prefix with `fix:` to release a new patch version,\n- Prefix with `feat:` to release
  a new minor version, or\n- Prefix with `feat!:` to release a new major version\n\nTo
  change the \"epoch\" version, edit it in `package.yaml` and change the\n`.releaserc.yaml`
  tag prefix to match.\n\n## Remarks\n\nThis library was inspired by [finite-typelits](https://hackage.haskell.org/package/finite-typelits)
  and [finite-typelits-bounded](https://github.com/pseudonom/finite-typelits-bounded).
  The differences are summarized below:\n\n* `finite-typelits` - A value of `Finite
  (n :: Nat)` is in the half-open interval `[0, n)`. Uses modular arithmetic.\n* `finite-typelits-bounded`
  - A value of `Finite (n :: Nat)` is in the half-open interval `[0, n)`. Uses saturation
  arithmetic.\n* `closed` - A value of `Closed (n :: Nat) (m :: Nat)` is in the closed
  interval `[n, m]`. Uses saturation arithmetic.\n"
description-type: text
hash: 1aed15b5c03eabab8d6a51d90dfedbfce0291f9d47e815d104eb0eee68785626
homepage: https://github.com/frontrowed/closed#readme
latest: 0.2.1.0
license-name: MIT
maintainer: Freckle Education <engineering@freckle.com>
synopsis: Integers bounded by a closed interval
test-bench-deps:
  aeson: '>=1.3.1.1'
  base: '>=4.9 && <5'
  cassava: '>=0.5.1.0'
  closed: '>=0'
  hspec: '>=2.5.5'
  markdown-unlit: '>=0.5.0'
  persistent: '>=2.8.2'
  text: '>=1.2.3.1'
  vector: '>=0.12.0.2'
