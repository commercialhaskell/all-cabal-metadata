all-versions:
- 0.3.0
- 0.3.1
author: Andreas Voellmy <andreas.voellmy@gmail.com>
basic-deps:
  aeson: '>=0.7.0.6'
  base: '>=4.4.0.0 && <=5'
  bimap: '>=0.2.4'
  binary: '>=0.7.0'
  bytestring: '>=0'
  containers: '>=0'
  deepseq: '>=0'
  deepseq-generics: '>=0.1.1.2'
  hashable: '>=1.2.1.0'
  network: '>=2.6.0.2'
changelog: ''
changelog-type: ''
description: "# OpenFlow [![Build Status](https://travis-ci.org/AndreasVoellmy/openflow.svg)](https://travis-ci.org/AndreasVoellmy/openflow)\n\nOpenFlow
  is a Haskell library that implements OpenFlow protocols 1.0 and 1.3. It defines
  data types that model the logical content of the various OpenFlow protocol messages
  and provides serialization and deserialization methods using the [binary package](http://hackage.haskell.org/package/binary).
  It also provides basic functions to start servers that use these representations.
  \n\n# Installation\n\nTo build a controller using this library, you need to install
  GHC and install this library. For information on how to install Haskell, head over
  to https://www.haskell.org. To install this library, clone this repository, enter
  the cloned directory, and then run `cabal install`.\n\n# Getting Started\n\nTo write
  an OpenFlow 1.3 controller, start with the following template, and then fill in
  the `messageHandler` function:\n```haskell\nimport Network.Data.OF13.Message\nimport
  Network.Data.OF13.Server\n\nmain :: IO ()\nmain = runServerOne 6633 factory\n  where
  factory sw = handshake sw >> return (messageHandler sw)\n\nhandshake :: Switch ->
  IO ()\nhandshake sw = sendMessage sw [Hello { xid = 0, len = 8 }]\n\nmessageHandler
  :: Switch -> Maybe Message -> IO ()\nmessageHandler _ Nothing = putStrLn \"Disconnecting\"\nmessageHandler
  sw (Just msg) = print msg >> sendMessage sw [FeatureRequest 1]\n```\n\nPlace the
  above source into a file, for example, `Main.hs`. Assuming you have installed `ghc`
  and this library, you can then run `ghc --make Main.hs` to build an executable from
  `Main.hs`. You can then run it as `Main`.\n\nThe above `main` program calls `runServerOne`
  which will wait for a single OpenFlow 1.3 server to connect on port 6633 and then
  will run the given `factory` function. The `factory` function performs an initial
  `handshake`, which, in this bare bones example, consists of sending a `Hello` message
  to the switch, and then returns a message handler function `messageHandler` that
  will be used to interact with that switch until the connection is terminated. When
  the server receives an OpenFlow 1.3 message `m`, it will run `messageHandler (Just
  m)` and when the connection is terminated, the server runs `messageHandler Nothing`.
  The message handler can do anything, but typically it sends messages to the switch.
  To do this, use the `sendMessage` function.\n"
description-type: markdown
hash: a64bf2306aee99476f541f7375236169ced96a049f8e10f16a35c1f5f03dd551
homepage: https://github.com/AndreasVoellmy/openflow
latest: 0.3.1
license-name: LicenseRef-OtherLicense
maintainer: Andreas Voellmy
synopsis: OpenFlow
test-bench-deps: {}
