all-versions:
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
- '0.7'
- '1.0'
author: Mikael Vejdemo Johansson
basic-deps:
  array: '>=0'
  base: <=4
  containers: '>=0'
  mtl: '>=0'
changelog: "Changes 0.7 -> 1.0\nFri Aug 14 13:59:24 IST 2009  mik@stanford.edu\n  *
  Adapted tests to computing reduced Grobner bases.\n  * Fixed README import example.\n
  \ * Added the Alternative operad as an example.\n  * Adapted tests to API changes.\n
  \ * Removed non-used or badly written tests.\n  * Refactored reduceBasis to do full
  reductions, with list reversals, and to include a type signature.\n  * Pre-reduce
  input basis to operadicBuchberger.\n  * Clean compile with -Wall\n  * Examples all
  compile.\n  * Refactored orderings applied to the examples.\n  * Introduce non-symmetric
  Grobner basis computation. Refactor streamReduceBasis -> reduceBasis.\n  * Types
  and comments completed.\n  * Cleaning up monomial orderings, completing the list.\n
  \ * Removed the PolyBag implementation.\n\nThu Aug 13 14:26:33 IST 2009  mik@stanford.edu\n
  \ * Pretty printing no longer hangs waiting on the next element in a list.\n  *
  allShuffles delegates to Dotsenko's shuffle permutations algorithm.\n  * Fixed basisElements
  to a more efficient version.\n  * Introduce reductions for the stable elements in
  the streamOperadicBuchberger pipeline\n  * Zero elements of the generating set no
  longer break reduceCompletely\n  * Sign mangling in reduceOE fixed.\n  * Operadic
  Buchberger with lazy evaluation in place.\n  * Extended traceing.\n  * Fixed bad
  ordering of the SCM embeddings.\n  * Fixed reconstructNode.\n  * Fixed equivalentOrders\n
  \ * Safeguards to findBoundedSCM\n  * Refactored findRootedEmbedding\n\nWed Aug
  12 22:59:42 IST 2009  mik@stanford.edu\n  * Fixing reductions.\n\nTue Aug 11 15:52:07
  IST 2009  mik@stanford.edu\n  * S Polynomials now use the right embeddings for the
  SCMs.\n  * Improved algorithms for listing shuffle permutations and for constructing
  small common multiples.\n  * Additional PPrint instances.\n  * Mapping a function
  over all internal vertex labels.\n  * Division methods.\n\nSun Aug  9 22:24:35 IST
  2009  mik@stanford.edu\n  * Fixing too large findAllLCM issue.\n  The issue, as
  reported by Vladimir Dotsenko, was that the function findAllLCM would return many
  too many\n  LCMs for even the simplest examples.\n  \n  It turned out that the filters
  excluding too many LCMs were erroneously written - we expect the deep \n  implementations,
  findSmallBoundedLCM, to return LCMs with the second argument, t, \n  occurring with
  root shared with the root of the LCM, and the first argument, s, to occur higher
  up in \n  the tree.\n  \n  If findAllLCM was called with both arguments identical,
  the filtering code would identify s dividing the\n  entire tree, missing that it
  occurs as a rooted divisor.\n\n  * Updated changelog\n\n\n\nChanges 0.6 -> 0.7\nSun
  May  3 22:18:13 CEST 2009  mik@stanford.edu\n  * Stopped building test file - bug
  report from dons\n\n\n\nChanges 0.5 -> 0.6\nThu Apr 30 10:25:29 CEST 2009  mik@stanford.edu\n
  \ * ForestLex implemented\n\nThu Apr 30 09:13:50 CEST 2009  mik@stanford.edu\n  *
  Path sequence comparisons have trees around if they need them.\n\nThu Apr 30 09:12:30
  CEST 2009  mik@stanford.edu\n  * Added flag controlling which Map data structure
  to use.\n\nThu Apr 30 09:11:16 CEST 2009  mik@stanford.edu\n  * Adding and interleaving
  reductions in the Buchberger algorithm\n\nWed Apr 29 11:41:03 CEST 2009  mik@stanford.edu\n
  \ * Hackage rerelease - forgot to include one vital module.\n\nWed Apr 29 11:40:48
  CEST 2009  mik@stanford.edu\n  * Optimized order comparison\n\nWed Apr 29 11:14:59
  CEST 2009  mik@stanford.edu\n  * Changelog update\n\nChanges 0.4 -> 0.5\nWed Apr
  29 11:12:12 CEST 2009  mik@stanford.edu\n  * Preparing for v0.5\n\nWed Apr 29 11:11:53
  CEST 2009  mik@stanford.edu\n  * Reducing Groebner bases inline\n\nWed Apr 29 11:11:29
  CEST 2009  mik@stanford.edu\n  * Maximum degree could be run on empty lists\n\nWed
  Apr 29 10:34:31 CEST 2009  mik@stanford.edu\n  * Flag choosable tracing.\n\nWed
  Apr 29 10:32:53 CEST 2009  mik@stanford.edu\n  * Tweaking the map storage type to
  cache comparisons.\n\n    Note that this change induces incompatibility in the induced
  Show instances.\n    Hence, operad elements that were saved from 0.4 will not be
  easy to restore\n    to 0.5. \n\n\n\nChanges 0.3 -> 0.4\nTue Apr 28 23:13:15 CEST
  2009  mik@stanford.edu\n  * Changelog update.\n\nTue Apr 28 23:12:25 CEST 2009  mik@stanford.edu\n
  \ * Automated testing with Cabal.\n\nTue Apr 28 23:11:45 CEST 2009  mik@stanford.edu\n
  \ * Noncritical minor mistake.\n\nTue Apr 28 23:03:25 CEST 2009  mik@stanford.edu\n
  \ * Preparing for release 0.4\n\nTue Apr 28 22:52:05 CEST 2009  mik@stanford.edu\n
  \ * Tree ordering tweaks.\n\nTue Apr 28 22:51:16 CEST 2009  mik@stanford.edu\n  *
  Cabal standards adaptation\n\nTue Apr 28 22:48:57 CEST 2009  mik@stanford.edu\n
  \ * Percolate maximal degree through the Buchberger computation down to the LCM
  computation.\n\nMon Apr 27 18:48:05 CEST 2009  mik@stanford.edu\n  * Adapting to
  HackageDB source code standards\n"
changelog-type: text
description: "This Haskell software package implements the Gr�bner basis algorithm\nas
  described in Vladimir Dotsenko, Anton Khoroshkin: \"Gr�bner bases\nfor operads\"
  (arXiv:0812.4096).\n\nIn order to use it, make sure you install ghc, cabal and haddock
  (see\nhttp://haskell.org for more details). These are available directly in\nmost
  Linux and BSD distributions, and there are installers for MacOSX\nand Windows available
  on http://haskell.org.\n\nOnce ghc is installed, install cabal-install, and then
  use that to\ninstall everything else needed. This tool will make the installation\nof
  everything else painless.\n\nTo install the package, download the most recent tar
  ball\nOperads-n.n.tar.gz, and then perform the following steps:\n\n1) copy the tarball
  into an appropriate temporary directory\n2) in this temporary directory, execute
  \n     tar -xzvf Operads-n.n.tar.gz\n3) enter the directory Operads-0.2\n4) run
  the following commands\n     ghc --make Setup.hs\n     ./Setup configure\n     ./Setup
  build\n     ./Setup install\n5) look through the example files\n     example.hs\n
  \    altDual.hs\n     preLieBad.hs\n   to get a feeling for the syntax for interaction,
  and read the\n   documentation. \n\n   You can get a computation system by running\n
  \    ghci\n   and then inside ghci running\n     :m + Math.Operad\n\n   You can
  also write your own scripts for computation, and run them\n   as Haskell programs.
  This will allow more latitude in using\n   parallel processing and advanced computation
  techniques, but\n   exceeds the scope of this README.\n\nPitfalls: \n  * Make sure
  you run the program from somewhere else than the\n    temporary building directory,
  as this would load the wrong files.\n"
description-type: text
hash: b6bf4579851cba5acbff6b0a985ae8ab7c3e2a5ea841ffeaf72d8c5361015be2
homepage: http://math.stanford.edu/~mik/operads
latest: '1.0'
license-name: BSD-3-Clause
maintainer: mik@stanford.edu
synopsis: Groebner basis computation for Operads.
test-bench-deps: {}
