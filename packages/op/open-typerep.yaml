all-versions:
- '0.1'
- '0.2'
- 0.3.1
- 0.3.2
- 0.3.3
- '0.4'
- '0.5'
- '0.6'
- 0.6.1
author: Emil Axelsson
basic-deps:
  base: '>=4 && <5'
  constraints: '>=0.3'
  mtl: '>=2.2.1'
  syntactic: '>=3.1'
  tagged: '>=0.4'
  template-haskell: '>=0'
changelog: ''
changelog-type: ''
description: |-
  This package uses Data Types Ã  la Carte to provide open type representations
  and dynamic types/coercions for open type universes.

  Example 1 (dynamic types):

  > type MyUniverse = IntType :+: BoolType
  >
  > hlist :: [Dynamic MyUniverse]
  > hlist = [toDyn True, toDyn (1 :: Int)]

  > *Main> hlist
  > [True,1]

  Note that if we were using "Data.Dynamic", it would just print

  > [<<Bool>>,<<Int>>]

  Example 2 (dynamically typed addition):

  > addDyn :: (TypeEq ts ts, PWitness Num ts ts) => Dynamic ts -> Dynamic ts -> Maybe (Dynamic ts)
  > addDyn (Dyn ta a) (Dyn tb b) = do
  >     Dict <- typeEq ta tb
  >     Dict <- pwit pNum ta
  >     return (Dyn ta (a+b))

  "Data.Dynamic" could only do this monomorphically, for one 'Num' type at a
  time.
description-type: haddock
hash: a30a2e67347030956b821ac46e99fad0bb629ca2b64dfe32e100b17b67e1d7ef
homepage: https://github.com/emilaxelsson/open-typerep
latest: 0.6.1
license-name: BSD-3-Clause
maintainer: emax@chalmers.se
synopsis: Open type representations and dynamic types
test-bench-deps:
  base: '>=0'
  criterion: '>=1'
  open-typerep: '>=0'
  syntactic: '>=0'
