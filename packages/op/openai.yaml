all-versions:
- 1.0.0
- 1.0.1
- 1.1.0
author: Gabriella Gonzalez
basic-deps:
  aeson: '>=0'
  base: '>=4.15.0.0 && <5'
  bytestring: '>=0'
  containers: '>=0'
  filepath: '>=0'
  http-api-data: '>=0'
  http-client-tls: '>=0'
  openai: '>=0'
  servant: '>=0'
  servant-client: '>=0'
  servant-multipart-api: '>=0'
  servant-multipart-client: '>=0'
  text: '>=0'
  time: '>=0'
  vector: '>=0'
changelog: |
  1.1.0:

  - BREAKING CHANGE: Fix details representations for various types [[#44](https://github.com/MercuryTechnologies/openai/pull/44)] [[#45](https://github.com/MercuryTechnologies/openai/pull/45)] [[#50](https://github.com/MercuryTechnologies/openai/pull/50)] [[#51](https://github.com/MercuryTechnologies/openai/pull/51)]

    A few details-related fields were fixed to match the behavior of the OpenAI
    API.

  - Add `FromJSON`/`ToJSON` instances for all types [[#42](https://github.com/MercuryTechnologies/openai/pull/42)] [[#47](https://github.com/MercuryTechnologies/openai/pull/47)]

  - [Add support for `reasoning_effort` parameter in chat completions](https://github.com/MercuryTechnologies/openai/pull/48)

  1.0.1:

  - Include `README`
  - Include usage example

  1.0.0:

  - Initial release
changelog-type: markdown
description: |
  # `openai`

  This provides a binding to OpenAI's API using `servant`

  Example usage:

  ```haskell
  {-# LANGUAGE DuplicateRecordFields #-}
  {-# LANGUAGE NamedFieldPuns        #-}
  {-# LANGUAGE OverloadedStrings     #-}
  {-# LANGUAGE OverloadedLists       #-}

  module Main where

  import Data.Foldable (traverse_)
  import OpenAI.V1
  import OpenAI.V1.Chat.Completions

  import qualified Data.Text as Text
  import qualified Data.Text.IO as Text.IO
  import qualified System.Environment as Environment

  main :: IO ()
  main = do
      key <- Environment.getEnv "OPENAI_KEY"

      clientEnv <- getClientEnv "https://api.openai.com"

      let Methods{ createChatCompletion } = makeMethods clientEnv (Text.pack key)

      text <- Text.IO.getLine

      ChatCompletionObject{ choices } <- createChatCompletion _CreateChatCompletion
          { messages = [ User{ content = [ Text{ text } ], name = Nothing } ]
          , model = "gpt-4o-mini"
          }

      let display Choice{ message } = Text.IO.putStrLn (messageToContent message)

      traverse_ display choices
  ```
description-type: markdown
hash: 966f86ac4e1e82746423ed15426c62b3f8b301713efae6023e171dd2b276812b
homepage: ''
latest: 1.1.0
license-name: BSD-3-Clause
maintainer: GenuineGabriella@gmail.com
synopsis: Servant bindings to OpenAI
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  http-client: '>=0'
  http-client-tls: '>=0'
  openai: '>=0'
  servant-client: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
