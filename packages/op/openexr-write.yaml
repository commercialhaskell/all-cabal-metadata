all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
author: Pavol Klacansky
basic-deps:
  base: '>=4.9.1 && <5'
  binary: '>=0'
  bytestring: '>=0'
  data-binary-ieee754: '>=0'
  deepseq: '>=0'
  split: '>=0'
  vector: '>=0'
  vector-split: '>=0'
  zlib: '>=0'
changelog: ''
changelog-type: markdown
description: |
  Haskell OpenEXR Library
  =======================

  This library can write colored images which use floating point values into
  OpenEXR (v2) high-dynamic-range file format.

  Supported features:

  - scanline format
  - compression (ZIPS, ZIP)
  - pixel format (RGB float32)



  Usage
  -----

  An image can be written by calling `writeFile` function. For example,
  following code stores a compressed image consisting of one red pixel.

  ```
  module Main where

  import qualified Data.Vector      as V
  import qualified Graphics.OpenEXR as EXR


  main :: IO ()
  main = do
          let image = EXR.ImageRGBF 1 1 (V.fromList [EXR.PixelRGBF 1.0 0.0 0.0])
          EXR.writeFile "image.exr" image EXR.ZipCompression
  ```
description-type: markdown
hash: 78b8d9d77676f7a9a941d1019860326e01312e45ef1a867de3eb1be83a57b587
homepage: git://klacansky.com/openexr-write.git
latest: 0.1.0.2
license-name: LicenseRef-PublicDomain
maintainer: pavol@klacansky.com
synopsis: Library for writing images in OpenEXR HDR file format.
test-bench-deps:
  base: '>=4.8 && <5'
  bytestring: '>=0'
  directory: '>=0'
  hspec: '>=0'
  openexr-write: '>=0'
  vector: '>=0'
