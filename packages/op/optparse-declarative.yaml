all-versions:
- 0.1.0
- 0.2.0
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.4.2
author: Hideyuki Tanaka
basic-deps:
  base: '>=4.7 && <5'
  exceptions: '>=0'
  mtl: '>=0'
changelog: |
  # 0.4.2 — 2021.06.24

  - Add `Alternative`, `MonadFix`, `MonadPlus`, `MonadFail`, `MonadThrow`, and `MonadCatch` instances for `Cmd`

  # 0.4.1 — 2020.11.01

  - Allow no options for `[a]`

  # 0.4.0 — 2020.11.01

  ## Breaking changes

  - Change in behavior when the same option is specified multiple times [#8](https://github.com/tanakh/optparse-declarative/pull/8)

  ## Other changes

  - Support for list types [#8](https://github.com/tanakh/optparse-declarative/pull/8)

  # 0.3.1

  - Allow False as a default value for Bool arguments [#2](https://github.com/tanakh/optparse-declarative/pull/2)
  - Make `[]` a `IsCmd` instance [#6](https://github.com/tanakh/optparse-declarative/pull/6)
  - Fix typo in README [#1](https://github.com/tanakh/optparse-declarative/pull/1)

  # 0.3.0

  - Simplify API
  - Support -vv -vvv verbosity
  - Improve help message

  # 0.2.0

  - Verbosity support

  # 0.1.0

  - First release
changelog-type: markdown
description: "# optparse-declarative\r\n\r\n[![Hackage](https://matrix.hackage.haskell.org/api/v2/packages/optparse-declarative/badge)](http://hackage.haskell.org/package/optparse-declarative)
  [![GitHub Actions: test](https://github.com/tanakh/optparse-declarative/workflows/test/badge.svg)](https://github.com/tanakh/optparse-declarative/actions?query=workflow%3Atest)
  [![Join the chat at https://gitter.im/optparse-declarative/community](https://badges.gitter.im/optparse-declarative/community.svg)](https://gitter.im/optparse-declarative/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n`optparse-declarative`
  is a declarative and easy-to-use command-line option parser.\r\n\r\n# Install\r\n\r\n```bash\r\n$
  cabal install optparse-declarative\r\n```\r\n\r\n# Usage\r\n\r\n## Writing a simple
  command\r\n\r\nFirst, you need to enable `DataKinds` extension. Then import `Options.Declarative`
  module.\r\n\r\n```hs\r\n{-# LANGUAGE DataKinds #-}\r\nimport           Options.Declarative\r\n```\r\n\r\nNext,
  define command line options as a **type of the function**.\r\nFor example, this
  is a simple greeting program with `-g` option that\r\ntakes a message of type `String`
  and an unnamed command-line argument\r\nthat specifies a name:\r\n\r\n```hs\r\ngreet
  :: Flag \"g\" '[\"greet\"] \"STRING\" \"greeting message\" (Def \"Hello\" String)\r\n
  \     -> Arg \"NAME\" String\r\n      -> Cmd \"Greeting command\" ()\r\ngreet msg
  name =\r\n    liftIO $ putStrLn $ get msg ++ \", \" ++ get name ++ \"!\"\r\n```\r\n\r\nThere
  are two types of options, `Flag` and `Arg`.\r\n`Flag` represents a named argument
  (e.g., `--greet \"Hola\"`), and `Arg` an unnamed argument (e.g., `John` of `greet
  --greet Hola John`).\r\nThe last argument of `Flag` and `Arg` is the type of the
  value of the\r\nargument; in this example, they are both `String`.\r\nYou can specify
  any type for the value as long as the type is an\r\ninstance of `ArgRead` typeclass,
  in which the conversion function\r\nfrom `String` to the specified type is defined.\r\n`Options.Declarative`
  provides following instances of `ArgRead`\r\ntypeclass.\r\n\r\n- Int\r\n- Integer\r\n-
  Bool\r\n- Double\r\n- String\r\n- (ArgRead a) => Maybe a\r\n\r\nUsers can add a
  new instance of `ArgRead` to support any user-defined type.\r\nPlease see Section
  \"How to add a new instance of `ArgRead`\" for details.\r\n\r\nIf you wish to specify
  a default value for allowing users to omit a\r\nvalue, use the modifier `Def` with
  the default value as the second type argument (and the third type argument is the
  type of the value).\r\nYou need to specify the default value in `String` instead
  of the final\r\nvalue of the target type; the string will be converted to the final\r\nvalue
  via `ArgRead` typeclass.\r\n\r\nIn the example above, the variable `msg` has a very
  complex type (`Flag \"g\" '[\"greet\"] \"STRING\" \"greeting message\" (Def \"Hello\"
  String)`).\r\nIn order to get the value of the target type (in this case, that is
  `String`),\r\nyou can use `get` function.\r\n\r\nThe whole type of command is `Cmd`.\r\n`Cmd`
  is an instance of `MonadIO` and it has some extra information.\r\n\r\nFinally, you
  can run the whole program by `run_`.\r\n\r\n```hs\r\nmain :: IO ()\r\nmain = run_
  greet\r\n```\r\n\r\nHere is an example session with the program shown above.\r\n\r\n```bash\r\n$
  ghc simple.hs\r\n\r\n$ ./simple\r\nsimple: not enough arguments\r\nTry 'simple --help'
  for more information.\r\n\r\n$ ./simple --help\r\nUsage: simple [OPTION...] NAME\r\nOptions:\r\n
  \ -g STRING  --greet=STRING  greeting message\r\n  -?         --help          display
  this help and exit\r\n\r\n$ ./simple World\r\nHello, World!\r\n\r\n$ ./simple --greet=Goodbye
  World\r\nGoodbye, World!\r\n```\r\n\r\nNote that only the final option is used when
  multiple options of the\r\nsame name are given. This behavior emulates the behavior
  of a naive\r\nprogram that uses GNU Getopt.\r\n\r\n```bash\r\n$ ./simple --greet=Hello
  --greet=Goodbye World\r\nGoodbye, World!\r\n```\r\n\r\nThere is another way of interpreting
  multiple options of the same name.\r\nSuppose if you need to get multiple values
  from the same option.\r\nSay, you wish to get `[\"Hello\", \"Goodbye\"]` from the
  command-line\r\noption `--greet=Hello --greeet=Goodbye`. Then, you can use\r\nthe
  type `[]` to indicate that it accepts multiple values.\r\nThe first line of the
  function `greet` in the example above\r\nwould be changed as this:\r\n\r\n```hs\r\ngreet
  :: Flag \"g\" '[\"greet\"] \"STRING\" \"greeting message\" [String]\r\n```\r\n\r\nThe
  value returned by `get` will be a value of type `[String]`.\r\nSee the complete
  working example at `example/list.hs` for details.\r\n\r\n\r\n## Writing multiple
  subcommands\r\n\r\nYou can write (nested) subcommands.\r\nYou don't know what subcommands
  are? Imagine `git` command.\r\n`git` has subcommands such as `git add`, `git commit`,
  `git log`, etc.\r\n`git` has nested subcommands such as `git remote add`, `git remote
  rm`,\r\netc.\r\n`optparse-declarative` provides an easy way to provide such possibly\r\nnested
  subcommands.\r\n\r\nJust group subcommands by `Group`, then you get a subcommand
  parser.\r\nHere is an example with two subcommands `greet` and `connect`:\r\n\r\n```hs\r\n{-#
  LANGUAGE DataKinds #-}\r\n\r\nimport           Options.Declarative\r\n\r\nmain ::
  IO ()\r\nmain = run_ $\r\n    Group \"Test program for library\"\r\n    [ subCmd
  \"greet\"   greet\r\n    , subCmd \"connect\" connect\r\n    ]\r\n\r\ngreet :: Flag
  \"g\" '[\"greet\"] \"STRING\" \"greeting message\" (Def \"Hello\" String)\r\n      ->
  Flag \"\" '[\"decolate\"] \"\" \"decolate message\" Bool\r\n      -> Arg \"NAME\"
  String\r\n      -> Cmd \"Greeting command\" ()\r\ngreet msg deco name = do\r\n    let
  f x | get deco = \"*** \" ++ x ++ \" ***\"\r\n            | otherwise = x\r\n    liftIO
  $ putStrLn $ f $ get msg ++ \", \" ++ get name ++ \"!\"\r\n\r\nconnect :: Flag \"h\"
  '[\"host\"] \"HOST\" \"host name\"   (Def \"localhost\" String)\r\n        -> Flag
  \"p\" '[\"port\"] \"PORT\" \"port number\" (Def \"8080\"      Int   )\r\n        ->
  Cmd \"Connect command\" ()\r\nconnect host port = do\r\n    let addr = get host
  ++ \":\" ++ show (get port)\r\n    liftIO $ putStrLn $ \"connect to \" ++ addr\r\n```\r\n\r\nThis
  is a sample session for the program above:\r\n\r\n```bash\r\n$ ./subcmd --help\r\nUsage:
  subcmd [OPTION...] <COMMAND> [ARGS...]\r\nOptions:\r\n  -?  --help  display this
  help and exit\r\n\r\nCommands:\r\n  greet       Greeting command\r\n  port        Server
  command\r\n\r\n$ ./subcmd connect --port=1234\r\nconnect to localhost:1234\r\n```\r\n\r\nIf
  you wish to specify the program name or the version number,\r\nuse `run` instead
  of `run_`. The first argument of `run` is\r\na program name (of type `String`).
  The second argument is\r\na version number (of type `Maybe String`).\r\n\r\n```hs\r\nmain
  :: IO ()\r\nmain = run \"program_name\" (Just \"1.3.2\") $\r\n    Group \"Test program
  for library\"\r\n    [ subCmd \"greet\"   greet\r\n    , subCmd \"connect\" connect\r\n
  \   ]\r\n```\r\n\r\nFor more examples, please see `example` directory.\r\n\r\n\r\n##
  Default options\r\n`optparse-declarative` provides a few default options.\r\nFor
  example, `--help` is defined automatically so users do not have to\r\nwrite it by
  their own. If run with `run` and the version number,\r\n`--version` is defined automatically.
  Also, `--verbosity` option (`-v`\r\nfor short) is defined by default.\r\n`getVerbosity`
  returns the verbosity level in `Int`.\r\n`-v` gives 1, `-vv` gives 2, `-vvv` gives
  3.\r\nAlternatively, `--verbose=3` would yield 3.\r\n\r\n\r\n## How to add a new
  instance of `ArgRead`\r\nUsers need to create an instance of `ArgRead` for supporting
  a new type\r\nfor the command line argument. Here is the definition of class\r\n`ArgRead`.\r\n\r\n```hs\r\nclass
  ArgRead a where\r\n    -- | Type of the argument\r\n    type Unwrap a :: *\r\n    type
  Unwrap a = a\r\n\r\n    -- | Get the argument's value\r\n    unwrap :: a -> Unwrap
  a\r\n    default unwrap :: a ~ Unwrap a => a -> Unwrap a\r\n    unwrap = id\r\n\r\n
  \   -- | Argument parser\r\n    argRead :: [String] -> Maybe a\r\n    default argRead
  :: Read a => [String] -> Maybe a\r\n    argRead ss = getLast $ mconcat $ Last .
  readMaybe <$> ss\r\n\r\n    -- | Indicate this argument is mandatory\r\n    needArg
  :: Proxy a -> Bool\r\n    needArg _ = True\r\n```\r\n\r\nSuppose you are adding
  a support for your type `T`.\r\nWe explain which function to define explicitly,
  depending on the\r\nproperty of `T`.\r\n\r\nIf `T` is the type of the final value
  you take out of a command line,\r\nyou do not have to define `Unwrap`. If `T` is
  a wrapper like `Def`,\r\ndefine `type Unwrap T = <unwrapped type>`. For `Def x y`,\r\n`type
  Unwrap (Def x y) = y`. If you defined `Unwrap`, define `unwrap`\r\nthat takes an
  actual value out of the wrapped value.\r\n\r\n`argRead` is the main function that
  converts String into a value.\r\nIf the type is an instance of `Read` and you are
  satisfied with\r\nhow `read` converts a `String` into value, there is no need to\r\ndefine
  your own `argRead`. Otherwise, you define a function that\r\nconverts a `String`
  into a value of the target type. When parsing\r\nis successful, return `Just`. When
  it fails, return `Nothing`.\r\nIf the input is `[]`, it indicates the option does
  not have an\r\nargument; otherwise the input is a list of a single `String`.\r\nLast
  but not least, define `needArg _ = False` when the option\r\nallows us to omit the
  associated value; consider a boolean\r\noption like `--help`.\r\n"
description-type: markdown
hash: 2054a1489442744f1c93b7994a9d5600fc51a513290d9c27631aef24ffbddf21
homepage: https://github.com/tanakh/optparse-declarative
latest: 0.4.2
license-name: MIT
maintainer: tanaka.hideyuki@gmail.com, kazuki.okamoto@kakkun61.com
synopsis: Declarative command line option parser
test-bench-deps: {}
