homepage: https://github.com/agrafix/openai-hs#readme
changelog-type: ''
hash: a65f582b47f2538420814e8cef46053ee2a20b61fae9f12bc90ff7798f1f6f2c
test-bench-deps:
  http-client: -any
  bytestring: -any
  base: '>=4.7 && <5'
  servant-client: -any
  hspec: -any
  text: -any
  openai-servant: '>=0.2.1'
  servant-auth-client: -any
  servant-client-core: -any
  servant: -any
  casing: -any
  containers: -any
  openai-hs: -any
  http-client-tls: -any
  cpphs: -any
  servant-multipart-client: -any
  http-types: -any
  aeson: -any
  vector: -any
maintainer: Alexander Thiemann <mail@thiemann.at>
synopsis: Unofficial OpenAI client
changelog: ''
basic-deps:
  http-client: -any
  bytestring: -any
  base: '>=4.7 && <5'
  servant-client: -any
  text: -any
  openai-servant: '>=0.2.1'
  servant-auth-client: -any
  servant: -any
  casing: -any
  cpphs: -any
  servant-multipart-client: -any
  http-types: -any
  aeson: -any
all-versions:
- 0.1.1.0
- 0.2.0.0
- 0.2.1.0
- 0.2.2.0
- 0.3.0.0
- 0.3.0.1
author: Alexander Thiemann <mail@thiemann.at>
latest: 0.3.0.1
description-type: markdown
description: "# openai-hs\n\nUnofficial OpenAI SDK/client for Haskell. It's generated
  via `servant-client` from `openai-servant` with a small amount of hand-written code.
  Contributions are welcome!\n\n## Install\n\n``` sh\n# stack\nstack install openai-hs\n\n#
  cabal\ncabal install openai-hs\n```\n\n## Example\n\n``` haskell\n{-# LANGUAGE OverloadedStrings
  #-}\nimport OpenAI.Client\n\nimport Network.HTTP.Client\nimport Network.HTTP.Client.TLS\nimport
  System.Environment (getEnv)\nimport qualified Data.Text as T\n\nrequest :: ChatCompletionRequest\nrequest
  = ChatCompletionRequest \n         { chcrModel = ModelId \"gpt-3.5-turbo\"\n         ,
  chcrMessages = \n            [ChatMessage { chmContent = \"Write a hello world program
  in Haskell\"\n                         , chmRole = \"user\"\n                         }\n
  \           ]\n         , chcrTemperature = Nothing\n         , chcrTopP = Nothing\n
  \        , chcrN = Nothing\n         , chcrStream = Nothing\n         , chcrStop
  = Nothing\n         , chcrMaxTokens = Nothing\n         , chcrPresencePenalty =
  Nothing\n         , chcrFrequencyPenalty = Nothing\n         , chcrLogitBias = Nothing\n
  \        , chcrUser = Nothing\n         }\n\nmain :: IO ()\nmain =\n  do manager
  <- newManager tlsManagerSettings\n     apiKey <- T.pack <$> getEnv \"OPENAI_KEY\"\n
  \    -- create a openai client that automatically retries up to 4 times on network\n
  \    -- errors\n     let client = makeOpenAIClient apiKey manager 4\n     result
  <- completeChat client request        \n     case result of\n       Left failure
  -> print failure\n       Right success -> print $ chrChoices success\n```\n\n##
  Features\n\nSupported actions:\n\n* List engines\n* Retrieve engine\n* Create text
  completion\n* Run semantic search\n\n## Running the tests\n\nYou can run all tests
  with `stack test`. You'll need an OpenAI API Key assigned to the `OPENAI_KEY` environment
  variable.\n"
license-name: BSD-3-Clause
