homepage: https://github.com/qwbarch/optics-operators
changelog-type: markdown
hash: 5d6e0f04f28ba7a1d4bb5b11f79ec5128cb24ed7ed4b561beb74f94868756de5
test-bench-deps:
  optics-core: '>=0.4 && <1'
  base: '>=4.10 && <5'
  tasty-quickcheck: '>=0.10.2 && <0.11'
  mtl: ==2.*
  tasty: '>=1.4.3 && <1.6'
maintainer: qwbarch <qwbarch@gmail.com>
synopsis: A tiny package containing operators missing from the official package.
changelog: |
  # Changelog

  ## [0.1.0.0] - 6/24/2023

  - First release of optics-operators.
  - Provides only (+=), (-=), (*=), (//=) operators for now.
basic-deps:
  optics-core: '>=0.4 && <1'
  base: '>=4.10 && <5'
  mtl: ==2.*
all-versions:
- 0.1.0.1
author: qwbarch
latest: 0.1.0.1
description-type: text
description: "# optics-operators\n\n[![build](https://github.com/qwbarch/optics-operators/actions/workflows/build.yml/badge.svg)](https://github.com/qwbarch/optics-operators/actions/workflows/build.yml)
  [![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)
  [![Hackage](http://img.shields.io/hackage/v/optics-operators.svg)](https://hackage.haskell.org/package/optics-operators)\n\nA
  tiny package containing operators missing from the official package.\n\n## Why does
  this package exist?\n\nThe [optics](https://hackage.haskell.org/package/optics)
  library is missing convenient operators that the [lens](https://hackage.haskell.org/package/lens-5.2.2/docs/Control-Lens-Operators.html)\nlibrary
  provides.  \nI've only added the operators I need for now. Feel free to open an
  issue or pull request to add new ones.\n\n## Quick start\n\nThis is a literate haskell
  file. You can run this example via the following:\n```\nnix develop --command cabal
  run\n```\n\nNecessary language extensions and imports for the example:\n```haskell\n{-#
  LANGUAGE DeriveGeneric, OverloadedLabels #-}\nimport GHC.Generics (Generic)\nimport
  Control.Monad.State (State, execState)\nimport Data.Optics.Operators ((+=), (-=),
  (*=))\n```\n\nBasic example using state operators:\n```haskell\nnewtype Person =
  Person\n  { age :: Int\n  } deriving (Show, Generic)\n\naddAge :: Int -> State Person
  ()\naddAge age = #age += age\n\nsubtractAge :: Int -> State Person ()\nsubtractAge
  age = #age -= age\n```\n\nRunning the example:\n```haskell\nperson :: Person\nperson
  = Person 50\n\nmain :: IO ()\nmain = print . flip execState person $ do\n  addAge
  10\n  subtractAge 20\n  #age *= 2\n\n-- Output: Person {age = 80}\n```\n"
license-name: MIT
