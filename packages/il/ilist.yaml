homepage: http://github.com/kowainik/ilist
changelog-type: markdown
hash: 1e7ab6cf03efac20bfe68dbc9ba3f9c3103f0f0ce6645e6c325cc50963bc256d
test-bench-deps:
  base: '>=4.10 && <4.16'
  hspec: -any
  criterion: -any
  lens: '>=4.13.2.1'
  loop: -any
  transformers: -any
  ilist: -any
  vector: -any
maintainer: Kowainik <xrom.xkov@gmail.com>
synopsis: Optimised list functions for doing index-related things
changelog: |
  # Changelog

  `ilist` uses [PVP Versioning][1].
  The changelog is available [on GitHub][2].

  ## 0.4.0.1 — May 7, 2020

  * [#7](https://github.com/kowainik/ilist/issues/7):
    Support GHC-8.10. Move from GHC-8.8.1 support to GHC-8.8.3.

  ## 0.4.0.0 — Dec 26, 2019

  * Support GHC-8.8, GHC-8.6, GHC-8.4, GHC-8.2. Drop older GHC versions support.
  * Update maintenance info.

  ## 0.3.1.0

  * Added `ireplicateM` and `ireplicateM_`.

  ## 0.3.0.0

  * `ifind` now returns the index alongside with the value (same as in `lens`).

  ## 0.2.0.0

  * `izipWithM` and `izipWithM_` have been generalised from `Monad` to `Applicative` (which mimics what was done in base-4.9).

  ## 0.1.0.0

  First release.

  [1]: https://pvp.haskell.org
  [2]: https://github.com/kowainik/ilist/releases
basic-deps:
  base: '>=4.10 && <4.16'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
- 0.4.0.0
- 0.4.0.1
author: Artyom
latest: 0.4.0.1
description-type: markdown
description: |
  # ilist

  [![GitHub CI](https://github.com/kowainik/ilist/workflows/CI/badge.svg)](https://github.com/kowainik/ilist/actions)
  [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/kowainik/ilist?branch=master&svg=true)](https://ci.appveyor.com/project/kowainik/ilist)
  [![Hackage](https://img.shields.io/hackage/v/ilist.svg?logo=haskell)](https://hackage.haskell.org/package/ilist)
  [![Stackage LTS](http://stackage.org/package/ilist/badge/lts)](http://stackage.org/lts/package/ilist)
  [![Stackage Nightly](http://stackage.org/package/ilist/badge/nightly)](http://stackage.org/nightly/package/ilist)
  [![MPL-2.0 license](https://img.shields.io/badge/license-MPL--2.0-blue.svg)](https://github.com/kowainik/ilist/blob/master/LICENSE)

  ## What is this

  This is a library with lots of list functions that are related to indices. It has often-reinvented `deleteAt`, `setAt`, etc, as well as indexed variants of functions from `Data.List` (e.g. `imap`, `ifilter`, `izipWith`). It has no dependencies, builds in about a second, and works on GHC from 7.4 to 8.0; the functions are [optimised](https://github.com/aelve/ilist/blob/master/lib/Data/List/Index.hs) and benchmarked (for instance, the `zip [0..]` idiom is usually twice as slow, and sometimes 20× as slow).

  So, this library is intended to be the canonical place for index-related functions. You are encouraged to depend on this library instead of reinventing the functions, using `zip [0..]`, or using [lens](hackage.haskell.org/package/lens) when all you need is a simple `imap` or `ifoldr` (not to mention that lens variants are usually 2–10 times slower for lists).

  ## Why should you care

  You shouldn't, actually. This is a small library, it won't change anyone's life, and if you care about speed you probably shouldn't be using lists anyway (unless you keep your fingers crossed and hope that fusion will kick in). So, consider it more of a public service announcement – “hey, just in case you ever need them, index-related functions live here”.

  ## Usage

  Unfortunately, `Data.List.Indexed` was taken by [IndexedList](http://hackage.haskell.org/package/IndexedList), which implements such exciting things as “counted lists” and “conic lists”. Nope, I'm not bitter at all. Okay, maybe a bit, even tho it's completely unfair to [IndexedList](http://hackage.haskell.org/package/IndexedList). Anyway:

  ~~~ haskell
  import Data.List.Index
  ~~~

  And you can use functions from `Data.List` by prepending `i` to them. There's also `indexed :: [a] -> [(Int,a)]` and a family of functions for modifying the element at an index (`deleteAt`, `setAt`, `modifyAt`, `updateAt`, `insertAt`).

  Watch out – `ifoldl` has the index as the *second* parameter of the function:

  ~~~ haskell
  ifoldl :: (b -> Int -> a -> b) -> b -> [a] -> b
  ~~~

  That's the same convention that [containers](http://hackage.haskell.org/package/containers) and [vector](http://hackage.haskell.org/package/vector) use. Other functions pass the index as the first argument, as expected.
license-name: MPL-2.0
