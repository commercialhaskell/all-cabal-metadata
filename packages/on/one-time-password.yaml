all-versions:
- 1.0.0.0
- 1.0.0.1
- 2.0.0
author: Artem Leshchev, Aleksey Uimanov
basic-deps:
  base: '>=3 && <5'
  bytestring: '>=0'
  cereal: '>=0'
  cryptonite: '>=0'
  memory: '>=0'
  time: '>=1.1'
changelog: |
  # CHANGELOG

  ## 2.0.0
  ### Changed
  * Change versioning to semver
  * Use `cryptonite` instead of deprecated `cryptohash` (broken backwards
    compatibility)

  ## 1.0.0.1

  * Documentation typos fixed

  ## 1.0.0.0

  * Forked from OTP (https://github.com/matshch/OTP)
  * Rewrote with `cryptohash`
  * Add multiple hash functions support
  * Tests improoved: all RFC test verctors passed
changelog-type: markdown
description: |
  # What

  One time password implementation according to RFC4226 and RFC6238 in
  Haskell.

  # Generation passwords

  If you need to generate HOTP password described in RFC4226, then use

  ```haskell
  >>> hotp SHA1 "1234" 100 6
  317569

  >>> hotp SHA512 "1234" 100 6
  134131
  ```

  Or

  ```haskell
  >>> totp SHA1 "1234" (read "2010-10-10 00:01:00 UTC") 30 8
  43388892
  ```

  to generate TOTP password described in RFC6238.

  # Checking passwords

  ```haskell
  hotpCheck :: (HashAlgorithm a)
            => a                  -- ^ Hashing algorithm
            -> ByteString         -- ^ Shared secret
            -> (Word64, Word64)   -- ^ how much counters to take lower and higher than ideal
            -> Word64             -- ^ ideal (expected) counter value
            -> Word               -- ^ Number of digits in password
            -> Word32             -- ^ Password entered by user
            -> Bool               -- ^ True if password acceptable
  ```

  ```haskell
  >>> hotpCheck SHA1 "1234" (0,0) 10 6 50897
  True

  >>> hotpCheck SHA1 "1234" (0,0) 9 6 50897
  False

  >>> hotpCheck SHA1 "1234" (0,1) 9 6 50897
  True
  ```

  Here almost the same aguments as for `hotp` function, but there is
  also `(0, 0)` tuple. This tuple describes range of counters to check
  in case of desynchronisation of counters between client and
  server. I.e. if you specify `(1, 1)` and ideal counter will be `10`
  then function will check passwords for `[9, 10, 11]` list of
  counters.

  There is also some protection, so if you specify `(minBound,
  maxBound)` then function will check just 1000 counters around ideal.

  Here is the same for TOTP:

  ```haskell
  >>> totpCheck SHA1 "1234" (0, 0) (read "2010-10-10 00:00:00 UTC") 30 6 778374
  True

  >>> totpCheck SHA1 "1234" (0, 0) (read "2010-10-10 00:00:30 UTC") 30 6 778374
  False

  >>> totpCheck SHA1 "1234" (1, 0) (read "2010-10-10 00:00:30 UTC") 30 6 778374
  True
  ```
description-type: markdown
hash: 9da17e88b6e57282cd436d2eb9a7683385dd4b594d45930d46f7215c2a964f39
homepage: https://github.com/s9gf4ult/one-time-password
latest: 2.0.0
license-name: MIT
maintainer: s9gf4ult@gmail.com <Aleksey Uimanov>
synopsis: HMAC-Based and Time-Based One-Time Passwords
test-bench-deps:
  base: '>=3 && <5'
  bytestring: '>=0'
  cryptonite: '>=0'
  one-time-password: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  time: '>=1.1'
