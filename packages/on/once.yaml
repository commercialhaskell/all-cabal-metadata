all-versions:
- 0.1.0.0
- '0.2'
- '0.3'
- '0.4'
author: Dmitry Bogatov
basic-deps:
  base: '>=4.7 && <5'
  containers: '>=0.5'
  hashable: '>=1.2'
  template-haskell: '>=2.10'
  unordered-containers: '>=0.2'
changelog: ''
changelog-type: ''
description: |-
  Package provides single polymorphic function 'once', that allows you
  to memoize IO actions and functions, evaluating them at most once.

  >>> let mkStamp = (putStrLn "stamping" >> writeFile "/tmp/stamp" "") :: IO ()
  >>> -- onceStamp :: IO ()
  >>> onceStamp <- once mkStamp
  >>> -- onceStamp actually evaluates mkStamp it wraps first time.
  >>> onceStamp
  stamping
  >>> -- but second time result `()' is memoized, no action is performed.
  >>> onceStamp
  >>> -- we can memoize functions too
  >>> foo <- once $ \x -> print "foo" >> print (x :: Int)
  >>> -- action will be performed once for every distinct argument
  >>> foo 10
  foo
  10
  >>> foo 10
  10
  >>> foo 4
  foo
  4
description-type: haddock
hash: ce30b72cd90f6eb729f3ad77ac3daf8117d60b6be961b511b46ae1ce4872519c
homepage: https://gitlab.com/kaction/haskell-once
latest: '0.4'
license-name: GPL-3.0-only
maintainer: KAction@debian.org
synopsis: memoization for IO actions and functions
test-bench-deps:
  HUnit: '>=0'
  async: '>=0'
  base: '>=4.7 && <5'
  containers: '>=0.5'
  hashable: '>=1.2'
  hspec: '>=0'
  once: '>=0'
  template-haskell: '>=2.10'
  unordered-containers: '>=0.2'
