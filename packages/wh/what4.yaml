homepage: https://github.com/GaloisInc/what4
changelog-type: markdown
hash: ec49ceb774507cf97bb9ff730665f93523e21e7f4e0c4b781e8d94adca8ac6d8
test-bench-deps:
  exceptions: -any
  bytestring: -any
  lumberjack: -any
  base: -any
  tasty-hedgehog: '>=1.2'
  tasty-expected-failure: ==0.12.*
  text: -any
  bv-sized: -any
  clock: -any
  libBF: -any
  process: -any
  hedgehog: '>=1.0.2'
  async: -any
  ordered-containers: -any
  what4: -any
  versions: -any
  containers: '>=0.5.0.0'
  units-defs: -any
  lens: -any
  tasty-sugar: '>=2.0 && <2.1'
  io-streams: -any
  tasty-checklist: '>=1.0.3 && <1.1'
  contravariant: -any
  units: -any
  tasty-quickcheck: '>=0.10'
  mtl: '>=2.2.1'
  tasty-hunit: '>=0.9'
  prettyprinter: -any
  transformers: -any
  temporary: -any
  tasty: '>=0.10'
  QuickCheck: '>=2.12'
  parameterized-utils: -any
  directory: -any
maintainer: rscott@galois.com, kquick@galois.com
synopsis: Solver-agnostic symbolic values support for issuing queries
changelog: |
  # 1.4 (January 2023)

  * Allow building with GHC 9.4.

  * Remove the `MonadFail` instance for `VarRecorder`, as this instance is no
    longer straightforward to define due to upstream changes in `base-4.17.0.0`.
    This instance ultimately called `error` anyways, so any uses of `fail` at type
    `VarRecorder` can be replaced with `error` without any change in behavior.

  * Remove a dependency on `data-binary-ieee754`, which has been deprecated.

  * Deprecate `allSupported` which represents the SMT logic `ALL_SUPPORTED`,
    and add `allLogic` instead which represents the SMTLib standard logic `ALL`.

  * Add support for the cvc5 SMT solver.

  * Add a `get-abduct` feature which is compatible with cvc5.

  * Add modules to support serialization and deserialization of what4 terms into
    an s-expression format that is a superset of SMTLib2. See the
    `What4.Serialize.Printer`, `What4.Serialize.Parser`, and
    `What4.Serialize.FastSExpr` modules. Note that these modules have names that
    conflict with the now deprecated what4-serialize package, from which they were
    copied. If you are updating to this version of what4, delete your dependency
    on what4-serialize.

  * Add support Syntax-Guided Synthesis (SyGuS) in CVC5 (through the
    `runCVC5SyGuS` function) and Constrained Horn Clauses (CHC) in Z3 (through the
    `runZ3Horn` function).

  * Make `what4` smarter about simplifying `intMin x y` and `intMax x y`
    expressions when either `x <= y` or `y <= x` can be statically determined.

  # 1.3 (April 2022)

  * Allow building with GHC 9.2.

  * According to
    [this discussion](https://github.com/ghc-proposals/ghc-proposals/discussions/440),
    the `forall` identifier will be claimed, and `forall` made into a
    full keyword. Therefore, the `forall` and `exists` combinators of
    `What4.Protocol.SMTLib2.Syntax` have been
    renamed into `forall_` and `exists_`.

  * Add operations for increased control over the scope of
    configuration options, both in the `What4.Config` and
    `What4.Expr.Builder` modules.

  * Previously, the `exprCounter`, `sbUserState`, `sbUnaryThreshold`, and
    `sbCacheStartSize` fields of `ExprBuilder` were directly exposed; in
    principle this allows users to modify them, which was not intended
    in some cases.  These have been uniformly renamed to remove the `sb`
    prefix, and exposed as `Getter` or `Lens` values instead, as
    appropriate.

  * The `sbBVDomainRangeLimit` fields of `ExprBuilder` was obsolete and
    has been removed.

  * Allow building with `hashable-1.4.*`:
    * Add `Eq` instances for all data types with `Hashable` instances that
      were missing corresponding `Eq` instances. This is required since
      `hashable-1.4.0.0` adds an `Eq` superclass to `Hashable`.
    * Some `Hashable` instances now have extra constraints to match the
      constraints in their corresponding `Eq` instances. For example,
      the `Hashable` instance for `SymNat` now has an extra `TestEquality`
      constraint to match its `Eq` instance.

  * Add an `unsafeSetAbstractValue` function to the `IsExpr` class which allows
    one to manually set the `AbstractValue` used in a symbolic expression.
    As the name suggests, this function is unsound in the general case, so use
    this with caution.

  * Add a `What4.Utils.ResolveBounds.BV` module, which provides a `resolveSymBV`
    function that checks if a `SymBV` is concrete. If it is not concrete, it
    returns the lower and upper version bounds, as determined by querying an
    online SMT solver.

  * Add `arrayCopy`, `arraySet`, and `arrayRangeEq` methods to `IsExprBuilder`.

  * Add a `getUnannotatedTerm` method to `IsExprBuilder` for retrieving the
    original, unannotated term out of an annotated term.

  * `IsExprBuilder` now has `floatSpecialFunction{,0,1,2}`
    and `realSpecialFunction{,0,1,2}` methods which allow the use of special
    values or functions such as `pi`, trigonometric functions, exponentials, or
    logarithms. Similarly, `IsInterpretedFloatExprBuilder` now has
    `iFloatSpecialFunction{,0,1,2}` methods. Although little solver support
    exists for special functions, `what4` may be able to prove properties about
    them in limited cases.
    * The `realPi`, `realLog`, `realExp`, `realSin`, `realCos`, `realTan`,
      `realSinh`, `realCosh`, `realTanh`, and `realAtan2` methods of
      `IsExprBuilder` now have default implementations in terms of
      `realSpecialFunction{,0,1,2}`.

  * Add an `exprUninterpConstants` method to `IsSymExprBuilder` which returns the
    set of uninterpreted constants in a symbolic expression.

  * Add a `natToIntegerPure` function which behaves like `natToInteger` but
    without using `IO`.

  * `asConcrete` now supports concretizing float expressions by way of the new
    `ConcreteFloat` constructor in `ConcreteVal`.

  * Add a `z3Tactic` configuration option to `What4.Solver.Z3` that allows
    specifying a custom tactic to pass to `z3`.

  * `safeSymbol` now replaces exclamation marks (`!`) with underscores (`_`) so
    that the generated names are legal in Verilog.

  * Add `Foldable`, `Traversable`, and `Show` instances for `LabeledPred`.

  * Fix a bug in which `what4` would generate incorrect SMTLib code for array
    lookups and updates when using the CVC4 backend.

  * Fix a bug in which `what4` would incorrectly attempt to configure Boolector
    3.2.2 or later.

  * Fix a bug in which strings containing `\u` or ending with `\` would be
    escaped incorrectly.

  # 1.2.1 (June 2021)

  * Include test suite data in the Hackage tarball.

  # 1.2 (June 2021)

  This is primarily a bugfix release, but also adds support
  for GHC 9.x

  * Tweaks to the `SolverEvent` data type to remove partial
  fields.

  * Fix issue #126.  The shift operations of `What4.SWord` were
  not correctly handling cases where the shift amount has more
  bits than the word to be shifted.

  * Fix issue #121. The ordering of inputs in generated Verilog files is
  now more predictable. Previously, it was determined by the order the
  inputs were encountered during term traversal. Now the user can provide
  a list of (input, name) pairs which are declared in order. Any
  additional inputs discovered during traversal will be added after these
  specified inputs.

  * Fix issue #113.  The `bvSliceLE` and `bvSliceBE` functions of
  `What4.SWord` did not properly handle size 0 bit-vectors and
  requests for 0 length slices.  They now correctly fail for slice
  lengths longer than 0 on 0-length vectors, and correctly
  allow 0 length slices regardless of the length of the input.

  * Fix issue #103. Some of the string operations would give incorrect
  results when string offsets are out-of-bounds.  The SMTLib 2.6 standard
  specifies precise results for these cases, which we now implement.

  * Configuration parameters relative to solvers have been renamed in a
    more consistent and heirarchical fashion; the old configuration
    parameters still work but will emit deprecation warnings when used.

    * `default_solver` --> `solver.default`
    * `abc_path` --> `solver.abc.path`
    * `boolector_path` --> `solver.boolector.path`
    * `cvc4_path` --> `solver.cvc4.path`
    * `cvc4.random-seed` --> `solver.cvc4.random-seed`
    * `cvc4_timeout` --> `solver.cvc4.timeout`
    * `dreal_path` --> `solver.dreal.path`
    * `stp_path` --> `solver.stp.path`
    * `stp.random-seed` --> `solver.stp.random-seed`
    * `yices_path` --> `solver.yices.path`
    * `yices_enable-mcsat` --> `solver.yices.enable-mcsat`
    * `yices_enable-interactive` --> `solver.yices.enable-interactive`
    * `yices_goal_timeout` --> `solver.yices.goal-timeout`
    * `yices.*` --> `solver.yices.*` for many yices internal options
    * `z3_path` --> `solver.z3.path`
    * `z3_timeout` --> `solver.z3.timeout`

  * Added the `solver.strict_parsing` configuration parameter.  This is
    enabled by default but could be disabled to allow running solvers in
    debug mode or to workaround other unexpected output from solver
    processes.

  # 1.1 (February 2021)

  * Use multithread-safe storage primitive for configuration options,
    and clarify single-threaded use assumptions for other data structures.

  * Fix issue #63, which caused traversals to include the bodies of
  defined functions at call sites, which yielded confusing results.

  * Add concrete evaluation and constant folding for floating-point
  operations via the `libBF` library.

  * Add min and max operations for integers and reals to the expression interface.

  * Remove `BaseNatType` from the set of base types. There were bugs
    relating to having nat types appear in structs, arrays and
    functions that were difficult to fix. Natural number values are
    still available as scalars (where they are represented by integers with
    nonzero assumptions) via the `SymNat` type.

  * Support for exporting What4 terms to Verilog syntax.

  * Various documentation fixes and improvements.

  * Test coverage improvements.

  * Switch to use the `prettyprinter` package for user-facing output.

  # 1.0 (July 2020)

  * Initial Hackage release
basic-deps:
  exceptions: '>=0.10'
  bimap: '>=0.2'
  BoundedChan: '>=1 && <2'
  bytestring: '>=0.10'
  fingertree: '>=0.1.4'
  unliftio: '>=0.2 && <0.3'
  s-cargot: '>=0.1 && <0.2'
  stm: -any
  base: '>=4.10 && <5'
  time: '>=1.8 && <1.13'
  deriving-compat: '>=0.5'
  unordered-containers: '>=0.2.10'
  text: '>=1.2.4.0 && <2.1'
  bv-sized: '>=1.0.0'
  megaparsec: '>=8 && <10'
  libBF: '>=0.6 && <0.7'
  filepath: '>=1.3'
  process: '>=1.2'
  async: -any
  parsec: '>=3 && <4'
  ordered-containers: '>=0.2 && <0.3'
  what4: -any
  versions: '>=4.0 && <6.0'
  th-abstraction: '>=0.1 && <0.5'
  th-lift-instances: '>=0.1 && <0.2'
  containers: '>=0.5.0.0'
  lens: '>=4.18'
  concurrent-extra: '>=0.7 && <0.8'
  io-streams: '>=1.5'
  config-value: '>=0.8 && <0.9'
  bifunctors: '>=5'
  utf8-string: '>=1.0.1'
  hashtables: '>=1.2.3'
  ghc-prim: '>=0.5.2'
  zenc: '>=0.1.0 && <0.2.0'
  panic: '>=0.3'
  mtl: '>=2.2.1'
  hashable: '>=1.3'
  attoparsec: '>=0.13'
  prettyprinter: '>=1.7.0'
  transformers: '>=0.4'
  temporary: '>=1.2'
  deepseq: '>=1.3'
  scientific: '>=0.3.6'
  th-lift: '>=0.8.2 && <0.9'
  template-haskell: -any
  vector: '>=0.12.1'
  parameterized-utils: ==2.1.*
  directory: '>=1.2.2'
all-versions:
- '1.0'
- '1.1'
- '1.2'
- 1.2.1
- '1.3'
- '1.4'
author: Galois Inc.
latest: '1.4'
description-type: markdown
description: "# What4\n\n## Introduction\n\n### What is What4?\n\nWhat4 is a Haskell
  library developed at Galois that presents a generic interface\nto SMT solvers (Z3,
  Yices, etc.). Users of What4 use an embedded DSL to create\n_fresh constants_ representing
  unknown values of various types (integer,\nboolean, etc.), assert various properties
  about those constants, and ask a\nlocally-installed SMT solver for satisfying instances.\n\nWhat4
  relies heavily on advanced GHC extensions to ensure that solver\nexpressions are
  type correct. The `parameterized-utils` library is used\nthroughout What4 as a \"standard
  library\" for dependently-typed Haskell.\n\n## Quick start\n\nLet's start with a
  quick end-to-end tutorial, demonstrating how to create a\nmodel for a basic satisfiability
  problem and ask a solver for a satisfying\ninstance.  The code for this quick start
  may be found in\n`doc/QuickStart.hs`, and you can compile and run the quickstart\nby
  executing the following line at the command line from the\nsource root of this package.\n\n```\n$
  cabal v2-run what4:quickstart\n```\n\nWe will be using an example from the first
  page of Donald Knuth's _The\nArt Of Computer Programming, Volume 4, Fascicle 6:
  Satisfiability_:\n\n```\nF(p, q, r) = (p | !q) & (q | r) & (!p | !r) & (!p | !q
  | r)\n```\n\nWe will use What4 to:\n  * generate fresh constants for the three variables
  `p`, `q`, and `r`\n  * construct an expression for `F`\n  * assert that expression
  to our backend solver\n  * ask the solver for a satisfying instance.\n\nWe first
  enable the `GADTs` extension (necessary for most\nuses of What4) and pull\nin a
  number of modules from What4 and `parameterized-utils`:\n\n```\n{-# LANGUAGE GADTs
  #-}\nmodule Main where\n\nimport Data.Foldable (forM_)\nimport System.IO (FilePath)\n\nimport
  Data.Parameterized.Nonce (newIONonceGenerator)\nimport Data.Parameterized.Some (Some(..))\n\nimport
  What4.Config (extendConfig)\nimport What4.Expr\n         ( ExprBuilder,  FloatModeRepr(..),
  newExprBuilder\n         , BoolExpr, GroundValue, groundEval\n\t\t , EmptyExprBuilderState(..)
  )\nimport What4.Interface\n         ( BaseTypeRepr(..), getConfiguration\n         ,
  freshConstant, safeSymbol\n         , notPred, orPred, andPred )\nimport What4.Solver\n
  \        (defaultLogData, z3Options, withZ3, SatResult(..))\nimport What4.Protocol.SMTLib2\n
  \        (assume, sessionWriter, runCheckSat)\n```\n\nWe create a trivial data type
  for the \"builder state\" (which we won't need to\nuse for this simple example),
  and create a top-level constant pointing\nto our backend solver, which is Z3 in
  this example.\n(To run this code, you'll need Z3 on your path, or edit this path
  to\npoint to your Z3.)\n\n```\nz3executable :: FilePath\nz3executable = \"z3\"\n```\n\nWe're
  ready to start our `main` function:\n\n```\nmain :: IO ()\nmain = do\n  Some ng
  <- newIONonceGenerator\n  sym <- newExprBuilder FloatIEEERepr EmptyExprBuilderState
  ng\n```\n\nMost of the functions in `What4.Interface`, the module for building up\nsolver
  expressions, require an explicit `sym` parameter. This\nparameter is a handle for
  a data structure that caches information for\nsharing common subexpressions and
  other bookkeeping\npurposes. `What4.Expr.Builder.newExprBuilder` creates one of
  these,\nand we will use this `sym` throughout our code.\n\nBefore continuing, we
  will set up some global configuration for Z3.\nThis sets up some configurable options
  specific to Z3 with default values.\n\n```\n  extendConfig z3Options (getConfiguration
  sym)\n```\n\nWe declare _fresh constants_ for each of our propositional variables.\n\n```\n
  \ p <- freshConstant sym (safeSymbol \"p\") BaseBoolRepr\n  q <- freshConstant sym
  (safeSymbol \"q\") BaseBoolRepr\n  r <- freshConstant sym (safeSymbol \"r\") BaseBoolRepr\n```\n\nNext,
  we create expressions for their negation.\n\n```\n  not_p <- notPred sym p\n  not_q
  <- notPred sym q\n  not_r <- notPred sym r\n```\n\nThen, we build up each clause
  of `F` individually.\n\n```\n  clause1 <- orPred sym p not_q\n  clause2 <- orPred
  sym q r\n  clause3 <- orPred sym not_p not_r\n  clause4 <- orPred sym not_p =<<
  orPred sym not_q r\n```\n\nFinally, we can create `F` out of the conjunction of
  these four clauses.\n\n```\n  f <- andPred sym clause1 =<<\n       andPred sym clause2
  =<<\n       andPred sym clause3 clause4\n```\n\nNow we can we assert `f` to the
  backend solver (Z3, in this example), and ask for\na satisfying instance.\n\n```\n
  \ -- Determine if f is satisfiable, and print the instance if one is found.\n  checkModel
  sym f [ (\"p\", p)\n                   , (\"q\", q)\n                   , (\"r\",
  r)\n                   ]\n```\n\n(The `checkModel` function is not a What4 function;
  its definition is provided\nbelow.)\n\nNow, let's add one more clause to `F` which
  will make it unsatisfiable.\n\n```\n  -- Now, let's add one more clause to f.\n
  \ clause5 <- orPred sym p =<< orPred sym q not_r\n  g <- andPred sym f clause5\n```\n\nNow,
  when we ask the solver for a satisfying instance, it should\nreport that the formulat
  is unsatisfiable.\n\n```\n  checkModel sym g [ (\"p\", p)\n                   ,
  (\"q\", q)\n                   , (\"r\", r)\n                   ]\n```\n\nThis concludes
  the definition of our `main` function. The definition for\n`checkModel` is as follows:\n\n```\n--
  | Determine whether a predicate is satisfiable, and print out the values of a\n--
  set of expressions if a satisfying instance is found.\ncheckModel ::\n  ExprBuilder
  t st fs ->\n  BoolExpr t ->\n  [(String, BoolExpr t)] ->\n  IO ()\ncheckModel sym
  f es = do\n  -- We will use z3 to determine if f is satisfiable.\n  withZ3 sym z3executable
  defaultLogData $ \\session -> do\n    -- Assume f is true.\n    assume (sessionWriter
  session) f\n    runCheckSat session $ \\result ->\n      case result of\n        Sat
  (ge, _) -> do\n          putStrLn \"Satisfiable, with model:\"\n          forM_
  es $ \\(nm, e) -> do\n            v <- groundEval ge e\n            putStrLn $ \"
  \ \" ++ nm ++ \" := \" ++ show v\n        Unsat _ -> putStrLn \"Unsatisfiable.\"\n
  \       Unknown -> putStrLn \"Solver failed to find a solution.\"\n```\n\nWhen we
  compile this code and run it, we should get the following output.\n\n```\nSatisfiable,
  with model:\n  p := False\n  q := False\n  r := True\nUnsatisfiable.\n```\n\n##
  Where to go next\n\nThe key modules to look at when modeling a problem with What4
  are:\n\n* `What4.BaseTypes` (the datatypes What4 understands)\n* `What4.Interface`
  (the functions What4 uses to build symbolic expressions)\n* `What4.Expr.Builder`
  (the implementation of the functions in `What4.Interface`)\n\nThe key modules to
  look at when interacting with a solver are:\n\n* `What4.Protocol.SMTLib2` (the functions
  to interact with a solver backend)\n* `What4.Solver` (solver-specific implementations
  of `What4.Protocol.SMTLib2`)\n* `What4.Solver.*`\n* `What4.Protocol.Online` (interface
  for online solver connections)\n* `What4.SatResult` and `What4.Expr.GroundEval`
  (for analyzing solver output)\n\nAdditional implementation and operational documentation
  can be found\nin the [implementation documentation in doc/implementation.md](doc/implementation.md).\n\nTo
  serialize and deserialize what4 terms, see the following modules:\n\n* `What4.Serialize.Printer`
  (to serialize what4 terms into an s-expression format)\n* `What4.Serialize.Parser`
  (to deserialize what4 terms)\n* `What4.Serialize.FastSExpr` (provides a faster s-expression
  parser than the default, intended to be used in conjunction with the higher-level
  parsing in `What4.Serialize.Parser`)\n\n## Formula Construction vs Solving\n\nIn
  what4, building expressions and solving expressions are orthogonal concerns.\nWhen
  you create an `ExprBuilder` (with `newExprBuilder`), you are not committing\nto
  any particular solver or solving strategy (except insofar as the selected\nfloating
  point mode might preclude the use of certain solvers).  There are two\ndimensions
  of solver choice: solver and mode.  The supported solvers are listed\nin `What4.Solver.*`.
  \ There are two modes:\n\n- All solvers can be used in an \"offline\" mode, where
  a new solver process is\n  created for each query (e.g., via `What4.Solver.solver_adapter_check_sat`)\n-
  Many solvers also support an \"online\" mode, where what4 maintains a persistent\n
  \ connection to the solver and can issue multiple queries to the same solver\n  process
  (via the interfaces in `What4.Protocol.Online`)\n\nThere are a number of reasons
  to use solvers in online mode.  First, state\n(i.e., previously defined terms and
  assumptions) can be shared between queries.\nFor a series of closely related queries
  that share context, this can be a\nsignificant performance benefit.  Solvers that
  support online solving provide\nthe SMT `push` and `pop` primitives for maintaining
  context frames that can be\ndiscarded (to define local bindings and assumptions).
  \ The canonical use of\nonline solving is *symbolic execution*, which usually requires
  reflecting the\nstate of the program at every program point into the solver (in
  the form of a\npath condition) and using `push` and `pop` to mimic the call and
  return\nstructure of programs. Second, reusing a single solver instance can save
  process\nstartup overhead in the presence of many small queries.\n\nWhile it may
  always seem advantageous to use the online solving mode, there are\nadvantages to
  offline solving.  As offline solving creates a fresh solver\nprocess for each query,
  it enables parallel solving.  Online solving necessarily\nserializes queries.  Additionally,
  offline solving avoids the need for complex\nstate management to synchronize the
  solver state with the state of the tool\nusing what4.  Additionally, not all solvers
  that support online interaction\nsupport per-goal timeouts; using offline solving
  trivially allows users of what4\nto enforce timeouts for each solved goal.\n\n##
  Known working solver versions\n\nWhat4 has been tested and is known to work with
  the following solver versions.\n\nNearby versions may also work; however, subtle
  changes in solver behavior from\nversion to version sometimes happen and can cause
  unexpected results, especially\nfor the more experimental logics that have not been
  standardized. If you\nencounter such a situation, please open a ticket, as our goal
  is to work correctly\non as wide a collection of solvers as is reasonable.\n\n-
  Z3 versions 4.8.7 through 4.8.12\n- Yices 2.6.1 and 2.6.2\n- CVC4 1.7 and 1.8\n-
  CVC5 1.0.2\n- Boolector 3.2.1 and 3.2.2\n- STP 2.3.3\n    (However, note https://github.com/stp/stp/issues/363,
  which prevents\n    effective retrieval of model values.  This should be resolved
  by the next release)\n- dReal v4.20.04.1\n\nNote that the integration with Z3, Yices
  and CVC4 has undergone significantly\nmore testing than the other solvers.\n\n"
license-name: BSD-3-Clause
