all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.2.0.1
author: Matthias Pall Gissurarson
basic-deps:
  aeson: '>=2.1 && <2.3'
  async: '>=2.2 && <2.3'
  base: '>=4.18.2.1 && <4.19'
  base64-bytestring: '>=1.2 && <1.3'
  bytestring: '>=0.11 && <0.12'
  containers: '>=0.6 && <0.7'
  cryptonite: '>=0.30 && <0.31'
  http-conduit: '>=2.3 && <2.4'
  http-types: '>=0.12 && <0.13'
  jose: '>=0.10 && <0.12'
  mcp: '>=0'
  memory: '>=0.18 && <0.19'
  mtl: '>=2.3 && <2.4'
  optparse-applicative: '>=0.17 && <0.19'
  random: '>=1.2 && <1.3'
  scientific: '>=0.3 && <0.4'
  servant: '>=0.19 && <0.21'
  servant-auth: '>=0.4 && <0.5'
  servant-auth-server: '>=0.4 && <0.5'
  servant-server: '>=0.19 && <0.21'
  stm: '>=2.5 && <2.6'
  text: '>=2.0 && <2.1'
  time: '>=1.12 && <1.13'
  transformers: '>=0.6 && <0.7'
  unordered-containers: '>=0.2 && <0.3'
  uuid: '>=1.3 && <1.4'
  wai: '>=3.2 && <3.3'
  wai-extra: '>=3.1 && <3.2'
  warp: '>=3.3 && <3.4'
changelog: |
  # Revision history for mcp

  ## 0.2.0.0 -- 2025-01-18

  * Add HTTP transport support following MCP specification
  * Implement full OAuth 2.0 authorization flow with mandatory PKCE
    - OAuth metadata discovery at /.well-known/oauth-authorization-server
    - Dynamic client registration at /register endpoint
    - /authorize endpoint for authorization requests with PKCE validation
    - /token endpoint for authorization code and refresh token grants
    - In-memory storage for authorization codes, tokens, and registered clients
    - Automatic user approval for demo mode
    - Support for public clients (no client secret required)
  * Add OAuth 2.1 authentication module (MCP.Server.Auth)
    - JWT token validation and introspection
    - PKCE code verifier/challenge generation and validation (S256 method)
    - OAuth metadata discovery with ToJSON/FromJSON instances
    - Support for multiple OAuth providers (Google, GitHub, custom)
    - Token expiration and not-before time validation
  * OAuth implementation features:
    - Returns empty string for client_secret (public clients)
    - Validates redirect URIs and client IDs
    - 10-minute authorization code expiry
    - 1-hour access token validity
    - Refresh token support with rotation
    - Proper JWT token generation using servant-auth-server
    - Fixed authentication loop issue by replacing UUID tokens with JWT
  * Add example OAuth resources:
    - OAuth demo client script (examples/oauth-client-demo.sh)
    - OAuth metadata test script (test-oauth-metadata.sh)
    - Updated HTTP server example with --oauth flag
  * Fix all compiler warnings with -Wall enabled
  * Clean up unused imports and parameters
  * Add uuid dependency for token generation
  * **BREAKING CHANGE**: Refactor HTTP server to be production-ready:
    - Extract hardcoded demo values into configurable parameters
    - Add `httpBaseUrl` and `httpProtocolVersion` to HTTPServerConfig
    - Expand OAuthConfig with timing, OAuth parameters, and demo settings
    - Move demo-specific configuration to examples/http-server.hs
    - Add `defaultDemoOAuthConfig` helper for testing
    - Make server library more robust and configurable for production use
  * Package metadata cleanup and code formatting improvements
  * Remove unused MyLib module
  * Add MCP configuration and examples
  * Published to Hackage

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |-
  This library provides a complete implementation of the Model Context Protocol (MCP)
  for Haskell. MCP is a protocol that enables seamless communication between AI models
  and external tools, resources, and services. This implementation includes support for
  resources, tools, prompts, and all standard MCP message types. It provides both a
  server framework and type definitions for building MCP-compliant applications.
  .
  Features dual transport support:
  .
  * StdIO transport for process-based clients (e.g., Claude Desktop)
  * HTTP transport following the official MCP specification for web-based integration,
    and supports OAuth authentication.
  .
  Both transports use the same MCPServer typeclass, allowing seamless switching between
  communication methods while maintaining identical server logic.
  Supports version 2025-03-26 of the MCP protocol.
description-type: haddock
hash: 0cb809ad2fdf5813d00323ce4edad7c49d745f6583683fab3a6b4a2fd9350d58
homepage: https://github.com/Tritlo/mcp
latest: 0.2.0.1
license-name: MIT
maintainer: mpg@mpg.is
synopsis: A Haskell implementation of the Model Context Protocol (MCP)
test-bench-deps:
  base: ^>=4.18.2.1
  mcp: '>=0'
