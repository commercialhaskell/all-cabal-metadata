all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.0.6
- 0.1.0.7
- 0.1.0.8
- 0.1.0.9
- 0.1.0.10
- 0.1.0.11
- 0.1.0.12
author: Tom Wells
basic-deps:
  aeson: '>=2.0 && <3.0'
  base: '>=4.20.0 && <4.22'
  bytestring: '>=0.10 && <0.13'
  containers: '>=0.6 && <0.8'
  http-types: '>=0.12 && <1.0'
  mcp-server: '>=0'
  network-uri: '>=2.6 && <2.8'
  template-haskell: '>=2.16 && <2.24'
  text: '>=1.2 && <3.0'
  vector: '>=0.12 && <1.0'
  wai: '>=3.2 && <4.0'
  warp: '>=3.3 && <4.0'
changelog: |
  # Revision history for haskell-mcp-lib

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: "# mcp-server\n\nA fully-featured Haskell library for building [Model
  Context Protocol (MCP)](https://modelcontextprotocol.io/) servers.\n\n## Features\n\n-
  **Complete MCP Implementation**: Supports MCP 2025-03-26 specification (with backward
  compatibility for 2024-11-05)\n- **Type-Safe API**: Leverage Haskell's type system
  for robust MCP servers\n- **Multiple Abstractions**: Both low-level fine-grained
  control and high-level derived interfaces\n- **Template Haskell Support**: Automatic
  handler derivation from data types\n- **Multiple Transports**: STDIO and HTTP Streaming
  transport (MCP 2025-03-26 Streamable HTTP)\n\n## Supported MCP Features\n\n- ✅ **Prompts**:
  User-controlled prompt templates with arguments\n- ✅ **Resources**: Application-controlled
  readable resources  \n- ✅ **Tools**: Model-controlled callable functions\n- ✅ **Initialization
  Flow**: Complete protocol lifecycle with version negotiation\n- ✅ **Error Handling**:
  Comprehensive error types and JSON-RPC error responses\n\n## Quick Start\n\nAdd
  the library `mcp-server` to your cabal file:\n\n```cabal\nbuild-depends:\n  mcp-server\n```\n\nCreate
  a simple module, such as this example below:\n\n```haskell\n{-# LANGUAGE OverloadedStrings
  #-}\n{-# LANGUAGE TemplateHaskell #-}\n\nimport MCP.Server\nimport MCP.Server.Derive\n\n--
  Define your data types\ndata MyPrompt = Recipe { idea :: Text } | Shopping { items
  :: Text }\ndata MyResource = Menu | Specials  \ndata MyTool = Search { query ::
  Text } | Order { item :: Text }\n\n-- Implement handlers\nhandlePrompt :: MyPrompt
  -> IO Content\nhandlePrompt (Recipe idea) = pure $ ContentText $ \"Recipe for \"
  <> idea\nhandlePrompt (Shopping items) = pure $ ContentText $ \"Shopping list: \"
  <> items\n\nhandleResource :: MyResource -> IO Content  \nhandleResource Menu =
  pure $ ContentText \"Today's menu...\"\nhandleResource Specials = pure $ ContentText
  \"Daily specials...\"\n\nhandleTool :: MyTool -> IO Content\nhandleTool (Search
  query) = pure $ ContentText $ \"Search results for \" <> query\nhandleTool (Order
  item) = pure $ ContentText $ \"Ordered \" <> item\n\n-- Derive handlers automatically\nmain
  :: IO ()\nmain = runMcpServerStdio serverInfo handlers\n  where\n    serverInfo
  = McpServerInfo\n      { serverName = \"My MCP Server\"\n      , serverVersion =
  \"1.0.0\" \n      , serverInstructions = \"A sample MCP server\"\n      }\n    handlers
  = McpServerHandlers\n      { prompts = Just $(derivePromptHandler ''MyPrompt 'handlePrompt)\n
  \     , resources = Just $(deriveResourceHandler ''MyResource 'handleResource)  \n
  \     , tools = Just $(deriveToolHandler ''MyTool 'handleTool)\n      }\n```\n\n###
  Nestable data types\n\nYou can also nest your data types, but MUST always end in
  a record with named fields:\n\n```haskell\n-- Using fields, but prefixing with the
  Type name, because maybe the user wants to use Lenses\ndata GetValueParams = GetValueParams
  { _gvpKey :: Text }\ndata SetValueParams = SetValueParams { _svpKey :: Text, _svpValue
  :: Text }\n\ndata SimpleTool\n    = GetValue GetValueParams\n    | SetValue SetValueParams\n
  \   deriving (Show, Eq)\n```\n\nWhich is probably nicer for using things like Lenses
  etc. However we do not support positional (and unnamed) parameters such as:\n\n```haskell\n--
  Positional arguments\ndata SimpleTool\n    = GetValue Int\n    | SetValue Int Text\n
  \   deriving (Show, Eq)\n```\n\nBecause we don't want to be generating names when
  returning details in MCP definitions.\n\n## Custom Descriptions\n\nYou can provide
  custom descriptions for constructors and fields using the `*WithDescription` variants:\n\n```haskell\n--
  Define descriptions for constructors and fields\ndescriptions :: [(String, String)]\ndescriptions
  = \n  [ (\"Recipe\", \"Generate a recipe for a specific dish\")     -- Constructor
  description\n  , (\"Search\", \"Search our menu database\")                  --
  Constructor description\n  , (\"idea\", \"The dish you want a recipe for\")              --
  Field description\n  , (\"query\", \"Search terms to find menu items\")            --
  Field description\n  ]\n\n-- Use in derivation\nhandlers = McpServerHandlers\n  {
  prompts = Just $(derivePromptHandlerWithDescription ''MyPrompt 'handlePrompt descriptions)\n
  \ , tools = Just $(deriveToolHandlerWithDescription ''MyTool 'handleTool descriptions)\n
  \ , resources = Just $(deriveResourceHandlerWithDescription ''MyResource 'handleResource
  descriptions)\n  }\n```\n\n## Manual Handler Implementation\n\nFor fine-grained
  control, implement handlers manually:\n\n```haskell\nimport MCP.Server\n\n-- Manual
  handler implementation\npromptListHandler :: IO [PromptDefinition]\npromptGetHandler
  :: PromptName -> [(ArgumentName, ArgumentValue)] -> IO (Either Error Content)\n--
  ... implement your custom logic\n\nmain :: IO ()\nmain = runMcpServerStdio serverInfo
  handlers\n  where\n    handlers = McpServerHandlers\n      { prompts = Just (promptListHandler,
  promptGetHandler)\n      , resources = Nothing  -- Not supported\n      , tools
  = Nothing      -- Not supported  \n      }\n```\n\n## HTTP Transport (NEW!)\n\nThe
  library now supports MCP 2025-03-26 Streamable HTTP transport:\n\n```haskell\nimport
  MCP.Server.Transport.Http\n\n-- Simple HTTP server (localhost:3000/mcp)\nmain =
  runMcpServerHttp serverInfo handlers\n\n-- Custom configuration\nmain = runMcpServerHttpWithConfig
  customConfig serverInfo handlers\n  where\n    customConfig = HttpConfig\n      {
  httpPort = 8080\n      , httpHost = \"0.0.0.0\"\n      , httpEndpoint = \"/api/mcp\"\n
  \     , httpVerbose = True  -- Enable detailed logging\n      }\n```\n\n**Features:**\n-
  JSON-RPC batching support\n- CORS enabled for web clients  \n- GET `/mcp` for server
  discovery\n- POST `/mcp` for JSON-RPC messages\n- Full MCP 2025-03-26 compliance\n\n##
  Examples\n\nThe library includes several examples:\n\n- **`examples/Simple/`**:
  Basic key-value store using Template Haskell derivation (STDIO)\n- **`examples/Complete/`**:
  Full-featured example with prompts, resources, and tools (STDIO)\n- **`examples/HttpSimple/`**:
  HTTP version of the simple key-value store\n\n## Docker Usage\n\nI like to build
  and publish my MCP servers to Docker - which means that it's much easier to configure
  assistants such as Claude Desktop to run them. \n\n```bash\n# Build the image\ndocker
  build -t haskell-mcp-server .\n\n# Run different examples\ndocker run -i --entrypoint=\"/usr/local/bin/haskell-mcp-server\"
  haskell-mcp-server\n```\n\nAnd then configure Claude by editing `claude_desktop_config.json`:\n\n```json\n{\n
  \   \"mcpServers\": {\n       \"haskell-mcp-server-example\": {\n            \"command\":
  \"docker\",\n            \"args\": [\n                \"run\",\n                \"-i\",\n
  \               \"--entrypoint=/usr/local/bin/haskell-mcp-server\",\n                \"haskell-mcp-server\"\n
  \           ]\n        }\n    }\n}\n```\n\n## Documentation\n\n- [MCP Specification](https://modelcontextprotocol.io/specification/2024-11-05/)\n-
  [API Documentation](https://hackage.haskell.org/package/mcp-server)\n- [Examples](examples/)\n\n##
  Contributing\n\nContributions are welcome! Please see the issue tracker for open
  issues and feature requests.\n\n## Disclaimer - AI Assistance\n\nI am not sure whether
  there is any stigma associated with this but Claude helped me write a lot of this
  library. I started with a very specific specification of what I wanted to achieve
  and worked shoulder-to-shoulder with Claude to implement and refactor the library
  until I was happy with it. A few of the features such as the Derive functions are
  a little out of my comfort zone to have manually written, so I appreciated having
  an expert guide me here - however I do suspect that this implementation may be sub-par
  and I do intend to refactor and rewrite large pieces of this through regular maintenance.\n\n##
  License\n\nBSD-3-Clause"
description-type: markdown
hash: b28a81a002006d5326e9ff614bcb63311527eef908e3ff2b32687afbffba8c78
homepage: https://github.com/drshade/haskell-mcp-server
latest: 0.1.0.12
license-name: BSD-3-Clause
maintainer: drshade@gmail.com
synopsis: Library for building Model Context Protocol (MCP) servers
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  hspec: '>=0'
  mcp-server: '>=0'
  network-uri: '>=0'
  template-haskell: '>=0'
  text: '>=0'
