homepage: https://github.com/sheaf/acts
changelog-type: markdown
hash: b824446f5cf5edec5e92a76921b521b07d6b07ab5335984ef6b87323593080f5
test-bench-deps: {}
maintainer: Sam Derbyshire
synopsis: Semigroup actions and torsors.
changelog: "# Changelog for package `acts`\r\n\r\n## 0.3.1.0 ( February 23, 2020 )\r\n\r\n*
  Add a cabal flag to remove dependencies on `finite-typelits` and `finitary`,\r\nat
  the cost of the instances providing actions on finite types.\r\n\r\n## 0.3.0.0 (
  February 16, 2020 )\r\n\r\n* Switch to using the `groups` package for the definition
  of the `Group` typeclass,\r\nsplitting off the generic instances to the `groups-generic`
  package.\r\n\r\n## 0.2.0.0 ( February 14, 2020 )\r\n\r\n* Remove definition of cyclic
  groups.\r\nIt is instead suggested to use a library which defines modular arithmetic.
  \   \r\nFor instance: `type C (n :: Nat) = Sum ( Finite n )`, using the `finite-typelits`
  library.\r\n\r\n* `CyclicEnum` newtype changed to `Finitely` newtype, which uses
  `Finitary` instead of `Bounded + Enum`.\r\nThis ensures that the action is by a
  semigroup of the right cardinality.\r\n\r\n* Remove `Act` instances for `Max`, `Min`
  to avoid possible overlap with user defined instances.\r\n\r\n* Add `anti :: Group
  g => g -> Dual g` function to construct elements in the opposite _group_.    \r\nObsoletes
  the `Act` instance for `Dual` (now removed).\r\n\r\n* Address a limitation of GHC
  < 8.10 with `DerivingVia` and `MultiParamTypeClasses`,\r\nby manually writing some
  instances.\r\n\r\n## 0.1.0.0 ( February 13, 2020 )\r\n\r\n* Initial release.\r\n"
basic-deps:
  groups: ^>=0.4.0.0
  base: '>=4.12 && <4.17'
  deepseq: ^>=1.4.4.0
  finitary: '>=1.2.0.0 && <2.2'
  finite-typelits: ^>=0.1.4.2
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.3.1.0
author: Sam Derbyshire
latest: 0.3.1.0
description-type: haddock
description: |-
  Acts and torsors model types which can be transformed under the action of another type.

  A prototypical example is affine space, which has an action by translation:
  given any two points in affine space, there is a unique translation that brings one to the other.

  This can be useful in a library keeping track of time: on top of needing to keep track
  of units, one also needs to distinguish between absolute time (time stamps) and relative time
  (time differences).
  The operations one expects in this situation are:

  * Addition and subtraction of time differences: time differences form a (commutative) group.
  * Translation of an absolute time by a time difference: there is an action of relative time on absolute time.
  * Given two absolute times, one can obtain the time difference between them: absolute time is a torsor under relative time.

  This library provides a convenient framework which helps to avoid mixing up these two different notions.


  A fleshed out example is available at "Acts.Examples.MusicalIntervals",
  which showcases the use of actions and torsors in the context of musical intervals and harmony.
  It also demonstrates common usage patterns of this library, such as how to automatically derive instances.

  See also the [project readme](https://github.com/sheaf/acts),
  which includes a simple example with 2D affine space.
license-name: BSD-3-Clause
